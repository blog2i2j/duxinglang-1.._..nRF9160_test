
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0001c200 <_vector_table>:
   1c200:	2002f4a0 	.word	0x2002f4a0
   1c204:	000246b5 	.word	0x000246b5
   1c208:	0003e29b 	.word	0x0003e29b
   1c20c:	00024311 	.word	0x00024311
   1c210:	00024311 	.word	0x00024311
   1c214:	00024311 	.word	0x00024311
   1c218:	00024311 	.word	0x00024311
   1c21c:	00024311 	.word	0x00024311
   1c220:	00024311 	.word	0x00024311
   1c224:	00024311 	.word	0x00024311
   1c228:	00024311 	.word	0x00024311
   1c22c:	000242d9 	.word	0x000242d9
   1c230:	00024311 	.word	0x00024311
   1c234:	00024311 	.word	0x00024311
   1c238:	00024215 	.word	0x00024215
   1c23c:	00023d45 	.word	0x00023d45

0001c240 <_irq_vector_table>:
   1c240:	0002432d 0002432d 0002432d 0002432d     -C..-C..-C..-C..
   1c250:	0002432d 0002432d 0002432d 0002432d     -C..-C..-C..-C..
   1c260:	0002432d 0002432d 0002432d 0002432d     -C..-C..-C..-C..
   1c270:	0002432d 0002432d 0002432d 0002432d     -C..-C..-C..-C..
   1c280:	0002432d 0002432d 0002432d 0002432d     -C..-C..-C..-C..
   1c290:	0002432d 0002432d 0002432d 0002432d     -C..-C..-C..-C..
   1c2a0:	0002432d 0002432d 0002432d 0002432d     -C..-C..-C..-C..
   1c2b0:	00026ee9 0003f38f 0002432d 0002432d     .n......-C..-C..
   1c2c0:	0002432d 0002432d 0002432d 0002432d     -C..-C..-C..-C..
   1c2d0:	0002432d 0002432d 0002432d 0002432d     -C..-C..-C..-C..
   1c2e0:	0002432d 0002432d 0003f3ad 0002432d     -C..-C......-C..
   1c2f0:	0002432d 0002432d 0002432d 0002432d     -C..-C..-C..-C..
   1c300:	0002432d 0002432d 0002432d 0002432d     -C..-C..-C..-C..
   1c310:	0002432d 0002432d 0002432d 0002432d     -C..-C..-C..-C..
   1c320:	0002432d 0002432d 0002432d 0002432d     -C..-C..-C..-C..
   1c330:	0002432d 0002432d 0002432d 0002432d     -C..-C..-C..-C..
   1c340:	0002432d                                -C..

0001c344 <_vector_end>:
	...

0001c400 <m_firmware_info>:
   1c400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   1c410:	0002db04 00000001 0001c200 0001c200     ................
   1c420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0001c440 <__aeabi_drsub>:
   1c440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1c444:	e002      	b.n	1c44c <__adddf3>
   1c446:	bf00      	nop

0001c448 <__aeabi_dsub>:
   1c448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001c44c <__adddf3>:
   1c44c:	b530      	push	{r4, r5, lr}
   1c44e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1c452:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1c456:	ea94 0f05 	teq	r4, r5
   1c45a:	bf08      	it	eq
   1c45c:	ea90 0f02 	teqeq	r0, r2
   1c460:	bf1f      	itttt	ne
   1c462:	ea54 0c00 	orrsne.w	ip, r4, r0
   1c466:	ea55 0c02 	orrsne.w	ip, r5, r2
   1c46a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1c46e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c472:	f000 80e2 	beq.w	1c63a <__adddf3+0x1ee>
   1c476:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1c47a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1c47e:	bfb8      	it	lt
   1c480:	426d      	neglt	r5, r5
   1c482:	dd0c      	ble.n	1c49e <__adddf3+0x52>
   1c484:	442c      	add	r4, r5
   1c486:	ea80 0202 	eor.w	r2, r0, r2
   1c48a:	ea81 0303 	eor.w	r3, r1, r3
   1c48e:	ea82 0000 	eor.w	r0, r2, r0
   1c492:	ea83 0101 	eor.w	r1, r3, r1
   1c496:	ea80 0202 	eor.w	r2, r0, r2
   1c49a:	ea81 0303 	eor.w	r3, r1, r3
   1c49e:	2d36      	cmp	r5, #54	; 0x36
   1c4a0:	bf88      	it	hi
   1c4a2:	bd30      	pophi	{r4, r5, pc}
   1c4a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c4a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c4ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1c4b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1c4b4:	d002      	beq.n	1c4bc <__adddf3+0x70>
   1c4b6:	4240      	negs	r0, r0
   1c4b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c4bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1c4c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c4c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1c4c8:	d002      	beq.n	1c4d0 <__adddf3+0x84>
   1c4ca:	4252      	negs	r2, r2
   1c4cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4d0:	ea94 0f05 	teq	r4, r5
   1c4d4:	f000 80a7 	beq.w	1c626 <__adddf3+0x1da>
   1c4d8:	f1a4 0401 	sub.w	r4, r4, #1
   1c4dc:	f1d5 0e20 	rsbs	lr, r5, #32
   1c4e0:	db0d      	blt.n	1c4fe <__adddf3+0xb2>
   1c4e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   1c4e6:	fa22 f205 	lsr.w	r2, r2, r5
   1c4ea:	1880      	adds	r0, r0, r2
   1c4ec:	f141 0100 	adc.w	r1, r1, #0
   1c4f0:	fa03 f20e 	lsl.w	r2, r3, lr
   1c4f4:	1880      	adds	r0, r0, r2
   1c4f6:	fa43 f305 	asr.w	r3, r3, r5
   1c4fa:	4159      	adcs	r1, r3
   1c4fc:	e00e      	b.n	1c51c <__adddf3+0xd0>
   1c4fe:	f1a5 0520 	sub.w	r5, r5, #32
   1c502:	f10e 0e20 	add.w	lr, lr, #32
   1c506:	2a01      	cmp	r2, #1
   1c508:	fa03 fc0e 	lsl.w	ip, r3, lr
   1c50c:	bf28      	it	cs
   1c50e:	f04c 0c02 	orrcs.w	ip, ip, #2
   1c512:	fa43 f305 	asr.w	r3, r3, r5
   1c516:	18c0      	adds	r0, r0, r3
   1c518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1c51c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c520:	d507      	bpl.n	1c532 <__adddf3+0xe6>
   1c522:	f04f 0e00 	mov.w	lr, #0
   1c526:	f1dc 0c00 	rsbs	ip, ip, #0
   1c52a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1c52e:	eb6e 0101 	sbc.w	r1, lr, r1
   1c532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1c536:	d31b      	bcc.n	1c570 <__adddf3+0x124>
   1c538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1c53c:	d30c      	bcc.n	1c558 <__adddf3+0x10c>
   1c53e:	0849      	lsrs	r1, r1, #1
   1c540:	ea5f 0030 	movs.w	r0, r0, rrx
   1c544:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1c548:	f104 0401 	add.w	r4, r4, #1
   1c54c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1c550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1c554:	f080 809a 	bcs.w	1c68c <__adddf3+0x240>
   1c558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c55c:	bf08      	it	eq
   1c55e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c562:	f150 0000 	adcs.w	r0, r0, #0
   1c566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c56a:	ea41 0105 	orr.w	r1, r1, r5
   1c56e:	bd30      	pop	{r4, r5, pc}
   1c570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1c574:	4140      	adcs	r0, r0
   1c576:	eb41 0101 	adc.w	r1, r1, r1
   1c57a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c57e:	f1a4 0401 	sub.w	r4, r4, #1
   1c582:	d1e9      	bne.n	1c558 <__adddf3+0x10c>
   1c584:	f091 0f00 	teq	r1, #0
   1c588:	bf04      	itt	eq
   1c58a:	4601      	moveq	r1, r0
   1c58c:	2000      	moveq	r0, #0
   1c58e:	fab1 f381 	clz	r3, r1
   1c592:	bf08      	it	eq
   1c594:	3320      	addeq	r3, #32
   1c596:	f1a3 030b 	sub.w	r3, r3, #11
   1c59a:	f1b3 0220 	subs.w	r2, r3, #32
   1c59e:	da0c      	bge.n	1c5ba <__adddf3+0x16e>
   1c5a0:	320c      	adds	r2, #12
   1c5a2:	dd08      	ble.n	1c5b6 <__adddf3+0x16a>
   1c5a4:	f102 0c14 	add.w	ip, r2, #20
   1c5a8:	f1c2 020c 	rsb	r2, r2, #12
   1c5ac:	fa01 f00c 	lsl.w	r0, r1, ip
   1c5b0:	fa21 f102 	lsr.w	r1, r1, r2
   1c5b4:	e00c      	b.n	1c5d0 <__adddf3+0x184>
   1c5b6:	f102 0214 	add.w	r2, r2, #20
   1c5ba:	bfd8      	it	le
   1c5bc:	f1c2 0c20 	rsble	ip, r2, #32
   1c5c0:	fa01 f102 	lsl.w	r1, r1, r2
   1c5c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c5c8:	bfdc      	itt	le
   1c5ca:	ea41 010c 	orrle.w	r1, r1, ip
   1c5ce:	4090      	lslle	r0, r2
   1c5d0:	1ae4      	subs	r4, r4, r3
   1c5d2:	bfa2      	ittt	ge
   1c5d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1c5d8:	4329      	orrge	r1, r5
   1c5da:	bd30      	popge	{r4, r5, pc}
   1c5dc:	ea6f 0404 	mvn.w	r4, r4
   1c5e0:	3c1f      	subs	r4, #31
   1c5e2:	da1c      	bge.n	1c61e <__adddf3+0x1d2>
   1c5e4:	340c      	adds	r4, #12
   1c5e6:	dc0e      	bgt.n	1c606 <__adddf3+0x1ba>
   1c5e8:	f104 0414 	add.w	r4, r4, #20
   1c5ec:	f1c4 0220 	rsb	r2, r4, #32
   1c5f0:	fa20 f004 	lsr.w	r0, r0, r4
   1c5f4:	fa01 f302 	lsl.w	r3, r1, r2
   1c5f8:	ea40 0003 	orr.w	r0, r0, r3
   1c5fc:	fa21 f304 	lsr.w	r3, r1, r4
   1c600:	ea45 0103 	orr.w	r1, r5, r3
   1c604:	bd30      	pop	{r4, r5, pc}
   1c606:	f1c4 040c 	rsb	r4, r4, #12
   1c60a:	f1c4 0220 	rsb	r2, r4, #32
   1c60e:	fa20 f002 	lsr.w	r0, r0, r2
   1c612:	fa01 f304 	lsl.w	r3, r1, r4
   1c616:	ea40 0003 	orr.w	r0, r0, r3
   1c61a:	4629      	mov	r1, r5
   1c61c:	bd30      	pop	{r4, r5, pc}
   1c61e:	fa21 f004 	lsr.w	r0, r1, r4
   1c622:	4629      	mov	r1, r5
   1c624:	bd30      	pop	{r4, r5, pc}
   1c626:	f094 0f00 	teq	r4, #0
   1c62a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1c62e:	bf06      	itte	eq
   1c630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1c634:	3401      	addeq	r4, #1
   1c636:	3d01      	subne	r5, #1
   1c638:	e74e      	b.n	1c4d8 <__adddf3+0x8c>
   1c63a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c63e:	bf18      	it	ne
   1c640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c644:	d029      	beq.n	1c69a <__adddf3+0x24e>
   1c646:	ea94 0f05 	teq	r4, r5
   1c64a:	bf08      	it	eq
   1c64c:	ea90 0f02 	teqeq	r0, r2
   1c650:	d005      	beq.n	1c65e <__adddf3+0x212>
   1c652:	ea54 0c00 	orrs.w	ip, r4, r0
   1c656:	bf04      	itt	eq
   1c658:	4619      	moveq	r1, r3
   1c65a:	4610      	moveq	r0, r2
   1c65c:	bd30      	pop	{r4, r5, pc}
   1c65e:	ea91 0f03 	teq	r1, r3
   1c662:	bf1e      	ittt	ne
   1c664:	2100      	movne	r1, #0
   1c666:	2000      	movne	r0, #0
   1c668:	bd30      	popne	{r4, r5, pc}
   1c66a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1c66e:	d105      	bne.n	1c67c <__adddf3+0x230>
   1c670:	0040      	lsls	r0, r0, #1
   1c672:	4149      	adcs	r1, r1
   1c674:	bf28      	it	cs
   1c676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1c67a:	bd30      	pop	{r4, r5, pc}
   1c67c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1c680:	bf3c      	itt	cc
   1c682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1c686:	bd30      	popcc	{r4, r5, pc}
   1c688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c68c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1c690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c694:	f04f 0000 	mov.w	r0, #0
   1c698:	bd30      	pop	{r4, r5, pc}
   1c69a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c69e:	bf1a      	itte	ne
   1c6a0:	4619      	movne	r1, r3
   1c6a2:	4610      	movne	r0, r2
   1c6a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1c6a8:	bf1c      	itt	ne
   1c6aa:	460b      	movne	r3, r1
   1c6ac:	4602      	movne	r2, r0
   1c6ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c6b2:	bf06      	itte	eq
   1c6b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1c6b8:	ea91 0f03 	teqeq	r1, r3
   1c6bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1c6c0:	bd30      	pop	{r4, r5, pc}
   1c6c2:	bf00      	nop

0001c6c4 <__aeabi_ui2d>:
   1c6c4:	f090 0f00 	teq	r0, #0
   1c6c8:	bf04      	itt	eq
   1c6ca:	2100      	moveq	r1, #0
   1c6cc:	4770      	bxeq	lr
   1c6ce:	b530      	push	{r4, r5, lr}
   1c6d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6d8:	f04f 0500 	mov.w	r5, #0
   1c6dc:	f04f 0100 	mov.w	r1, #0
   1c6e0:	e750      	b.n	1c584 <__adddf3+0x138>
   1c6e2:	bf00      	nop

0001c6e4 <__aeabi_i2d>:
   1c6e4:	f090 0f00 	teq	r0, #0
   1c6e8:	bf04      	itt	eq
   1c6ea:	2100      	moveq	r1, #0
   1c6ec:	4770      	bxeq	lr
   1c6ee:	b530      	push	{r4, r5, lr}
   1c6f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1c6fc:	bf48      	it	mi
   1c6fe:	4240      	negmi	r0, r0
   1c700:	f04f 0100 	mov.w	r1, #0
   1c704:	e73e      	b.n	1c584 <__adddf3+0x138>
   1c706:	bf00      	nop

0001c708 <__aeabi_f2d>:
   1c708:	0042      	lsls	r2, r0, #1
   1c70a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1c70e:	ea4f 0131 	mov.w	r1, r1, rrx
   1c712:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1c716:	bf1f      	itttt	ne
   1c718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1c71c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1c724:	4770      	bxne	lr
   1c726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1c72a:	bf08      	it	eq
   1c72c:	4770      	bxeq	lr
   1c72e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1c732:	bf04      	itt	eq
   1c734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1c738:	4770      	bxeq	lr
   1c73a:	b530      	push	{r4, r5, lr}
   1c73c:	f44f 7460 	mov.w	r4, #896	; 0x380
   1c740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c748:	e71c      	b.n	1c584 <__adddf3+0x138>
   1c74a:	bf00      	nop

0001c74c <__aeabi_ul2d>:
   1c74c:	ea50 0201 	orrs.w	r2, r0, r1
   1c750:	bf08      	it	eq
   1c752:	4770      	bxeq	lr
   1c754:	b530      	push	{r4, r5, lr}
   1c756:	f04f 0500 	mov.w	r5, #0
   1c75a:	e00a      	b.n	1c772 <__aeabi_l2d+0x16>

0001c75c <__aeabi_l2d>:
   1c75c:	ea50 0201 	orrs.w	r2, r0, r1
   1c760:	bf08      	it	eq
   1c762:	4770      	bxeq	lr
   1c764:	b530      	push	{r4, r5, lr}
   1c766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1c76a:	d502      	bpl.n	1c772 <__aeabi_l2d+0x16>
   1c76c:	4240      	negs	r0, r0
   1c76e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c772:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c776:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c77a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1c77e:	f43f aed8 	beq.w	1c532 <__adddf3+0xe6>
   1c782:	f04f 0203 	mov.w	r2, #3
   1c786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c78a:	bf18      	it	ne
   1c78c:	3203      	addne	r2, #3
   1c78e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c792:	bf18      	it	ne
   1c794:	3203      	addne	r2, #3
   1c796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1c79a:	f1c2 0320 	rsb	r3, r2, #32
   1c79e:	fa00 fc03 	lsl.w	ip, r0, r3
   1c7a2:	fa20 f002 	lsr.w	r0, r0, r2
   1c7a6:	fa01 fe03 	lsl.w	lr, r1, r3
   1c7aa:	ea40 000e 	orr.w	r0, r0, lr
   1c7ae:	fa21 f102 	lsr.w	r1, r1, r2
   1c7b2:	4414      	add	r4, r2
   1c7b4:	e6bd      	b.n	1c532 <__adddf3+0xe6>
   1c7b6:	bf00      	nop

0001c7b8 <__aeabi_dmul>:
   1c7b8:	b570      	push	{r4, r5, r6, lr}
   1c7ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c7be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c7c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c7c6:	bf1d      	ittte	ne
   1c7c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c7cc:	ea94 0f0c 	teqne	r4, ip
   1c7d0:	ea95 0f0c 	teqne	r5, ip
   1c7d4:	f000 f8de 	bleq	1c994 <__aeabi_dmul+0x1dc>
   1c7d8:	442c      	add	r4, r5
   1c7da:	ea81 0603 	eor.w	r6, r1, r3
   1c7de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1c7e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1c7e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1c7ea:	bf18      	it	ne
   1c7ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1c7f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c7f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1c7f8:	d038      	beq.n	1c86c <__aeabi_dmul+0xb4>
   1c7fa:	fba0 ce02 	umull	ip, lr, r0, r2
   1c7fe:	f04f 0500 	mov.w	r5, #0
   1c802:	fbe1 e502 	umlal	lr, r5, r1, r2
   1c806:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1c80a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1c80e:	f04f 0600 	mov.w	r6, #0
   1c812:	fbe1 5603 	umlal	r5, r6, r1, r3
   1c816:	f09c 0f00 	teq	ip, #0
   1c81a:	bf18      	it	ne
   1c81c:	f04e 0e01 	orrne.w	lr, lr, #1
   1c820:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1c824:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1c828:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1c82c:	d204      	bcs.n	1c838 <__aeabi_dmul+0x80>
   1c82e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1c832:	416d      	adcs	r5, r5
   1c834:	eb46 0606 	adc.w	r6, r6, r6
   1c838:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1c83c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1c840:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1c844:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1c848:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1c84c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1c850:	bf88      	it	hi
   1c852:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1c856:	d81e      	bhi.n	1c896 <__aeabi_dmul+0xde>
   1c858:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1c85c:	bf08      	it	eq
   1c85e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1c862:	f150 0000 	adcs.w	r0, r0, #0
   1c866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c86a:	bd70      	pop	{r4, r5, r6, pc}
   1c86c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1c870:	ea46 0101 	orr.w	r1, r6, r1
   1c874:	ea40 0002 	orr.w	r0, r0, r2
   1c878:	ea81 0103 	eor.w	r1, r1, r3
   1c87c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1c880:	bfc2      	ittt	gt
   1c882:	ebd4 050c 	rsbsgt	r5, r4, ip
   1c886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1c88a:	bd70      	popgt	{r4, r5, r6, pc}
   1c88c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c890:	f04f 0e00 	mov.w	lr, #0
   1c894:	3c01      	subs	r4, #1
   1c896:	f300 80ab 	bgt.w	1c9f0 <__aeabi_dmul+0x238>
   1c89a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1c89e:	bfde      	ittt	le
   1c8a0:	2000      	movle	r0, #0
   1c8a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1c8a6:	bd70      	pople	{r4, r5, r6, pc}
   1c8a8:	f1c4 0400 	rsb	r4, r4, #0
   1c8ac:	3c20      	subs	r4, #32
   1c8ae:	da35      	bge.n	1c91c <__aeabi_dmul+0x164>
   1c8b0:	340c      	adds	r4, #12
   1c8b2:	dc1b      	bgt.n	1c8ec <__aeabi_dmul+0x134>
   1c8b4:	f104 0414 	add.w	r4, r4, #20
   1c8b8:	f1c4 0520 	rsb	r5, r4, #32
   1c8bc:	fa00 f305 	lsl.w	r3, r0, r5
   1c8c0:	fa20 f004 	lsr.w	r0, r0, r4
   1c8c4:	fa01 f205 	lsl.w	r2, r1, r5
   1c8c8:	ea40 0002 	orr.w	r0, r0, r2
   1c8cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1c8d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c8d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c8d8:	fa21 f604 	lsr.w	r6, r1, r4
   1c8dc:	eb42 0106 	adc.w	r1, r2, r6
   1c8e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c8e4:	bf08      	it	eq
   1c8e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c8ea:	bd70      	pop	{r4, r5, r6, pc}
   1c8ec:	f1c4 040c 	rsb	r4, r4, #12
   1c8f0:	f1c4 0520 	rsb	r5, r4, #32
   1c8f4:	fa00 f304 	lsl.w	r3, r0, r4
   1c8f8:	fa20 f005 	lsr.w	r0, r0, r5
   1c8fc:	fa01 f204 	lsl.w	r2, r1, r4
   1c900:	ea40 0002 	orr.w	r0, r0, r2
   1c904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c908:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c90c:	f141 0100 	adc.w	r1, r1, #0
   1c910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c914:	bf08      	it	eq
   1c916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c91a:	bd70      	pop	{r4, r5, r6, pc}
   1c91c:	f1c4 0520 	rsb	r5, r4, #32
   1c920:	fa00 f205 	lsl.w	r2, r0, r5
   1c924:	ea4e 0e02 	orr.w	lr, lr, r2
   1c928:	fa20 f304 	lsr.w	r3, r0, r4
   1c92c:	fa01 f205 	lsl.w	r2, r1, r5
   1c930:	ea43 0302 	orr.w	r3, r3, r2
   1c934:	fa21 f004 	lsr.w	r0, r1, r4
   1c938:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c93c:	fa21 f204 	lsr.w	r2, r1, r4
   1c940:	ea20 0002 	bic.w	r0, r0, r2
   1c944:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1c948:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c94c:	bf08      	it	eq
   1c94e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c952:	bd70      	pop	{r4, r5, r6, pc}
   1c954:	f094 0f00 	teq	r4, #0
   1c958:	d10f      	bne.n	1c97a <__aeabi_dmul+0x1c2>
   1c95a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1c95e:	0040      	lsls	r0, r0, #1
   1c960:	eb41 0101 	adc.w	r1, r1, r1
   1c964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c968:	bf08      	it	eq
   1c96a:	3c01      	subeq	r4, #1
   1c96c:	d0f7      	beq.n	1c95e <__aeabi_dmul+0x1a6>
   1c96e:	ea41 0106 	orr.w	r1, r1, r6
   1c972:	f095 0f00 	teq	r5, #0
   1c976:	bf18      	it	ne
   1c978:	4770      	bxne	lr
   1c97a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1c97e:	0052      	lsls	r2, r2, #1
   1c980:	eb43 0303 	adc.w	r3, r3, r3
   1c984:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1c988:	bf08      	it	eq
   1c98a:	3d01      	subeq	r5, #1
   1c98c:	d0f7      	beq.n	1c97e <__aeabi_dmul+0x1c6>
   1c98e:	ea43 0306 	orr.w	r3, r3, r6
   1c992:	4770      	bx	lr
   1c994:	ea94 0f0c 	teq	r4, ip
   1c998:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c99c:	bf18      	it	ne
   1c99e:	ea95 0f0c 	teqne	r5, ip
   1c9a2:	d00c      	beq.n	1c9be <__aeabi_dmul+0x206>
   1c9a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9a8:	bf18      	it	ne
   1c9aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9ae:	d1d1      	bne.n	1c954 <__aeabi_dmul+0x19c>
   1c9b0:	ea81 0103 	eor.w	r1, r1, r3
   1c9b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9b8:	f04f 0000 	mov.w	r0, #0
   1c9bc:	bd70      	pop	{r4, r5, r6, pc}
   1c9be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9c2:	bf06      	itte	eq
   1c9c4:	4610      	moveq	r0, r2
   1c9c6:	4619      	moveq	r1, r3
   1c9c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9cc:	d019      	beq.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ce:	ea94 0f0c 	teq	r4, ip
   1c9d2:	d102      	bne.n	1c9da <__aeabi_dmul+0x222>
   1c9d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1c9d8:	d113      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9da:	ea95 0f0c 	teq	r5, ip
   1c9de:	d105      	bne.n	1c9ec <__aeabi_dmul+0x234>
   1c9e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1c9e4:	bf1c      	itt	ne
   1c9e6:	4610      	movne	r0, r2
   1c9e8:	4619      	movne	r1, r3
   1c9ea:	d10a      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ec:	ea81 0103 	eor.w	r1, r1, r3
   1c9f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c9f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c9fc:	f04f 0000 	mov.w	r0, #0
   1ca00:	bd70      	pop	{r4, r5, r6, pc}
   1ca02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ca06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1ca0a:	bd70      	pop	{r4, r5, r6, pc}

0001ca0c <__aeabi_ddiv>:
   1ca0c:	b570      	push	{r4, r5, r6, lr}
   1ca0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1ca12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1ca16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1ca1a:	bf1d      	ittte	ne
   1ca1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1ca20:	ea94 0f0c 	teqne	r4, ip
   1ca24:	ea95 0f0c 	teqne	r5, ip
   1ca28:	f000 f8a7 	bleq	1cb7a <__aeabi_ddiv+0x16e>
   1ca2c:	eba4 0405 	sub.w	r4, r4, r5
   1ca30:	ea81 0e03 	eor.w	lr, r1, r3
   1ca34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ca38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1ca3c:	f000 8088 	beq.w	1cb50 <__aeabi_ddiv+0x144>
   1ca40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1ca44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1ca48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1ca4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1ca50:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1ca54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1ca58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1ca5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1ca60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1ca64:	429d      	cmp	r5, r3
   1ca66:	bf08      	it	eq
   1ca68:	4296      	cmpeq	r6, r2
   1ca6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1ca6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1ca72:	d202      	bcs.n	1ca7a <__aeabi_ddiv+0x6e>
   1ca74:	085b      	lsrs	r3, r3, #1
   1ca76:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca7a:	1ab6      	subs	r6, r6, r2
   1ca7c:	eb65 0503 	sbc.w	r5, r5, r3
   1ca80:	085b      	lsrs	r3, r3, #1
   1ca82:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1ca8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1ca8e:	ebb6 0e02 	subs.w	lr, r6, r2
   1ca92:	eb75 0e03 	sbcs.w	lr, r5, r3
   1ca96:	bf22      	ittt	cs
   1ca98:	1ab6      	subcs	r6, r6, r2
   1ca9a:	4675      	movcs	r5, lr
   1ca9c:	ea40 000c 	orrcs.w	r0, r0, ip
   1caa0:	085b      	lsrs	r3, r3, #1
   1caa2:	ea4f 0232 	mov.w	r2, r2, rrx
   1caa6:	ebb6 0e02 	subs.w	lr, r6, r2
   1caaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   1caae:	bf22      	ittt	cs
   1cab0:	1ab6      	subcs	r6, r6, r2
   1cab2:	4675      	movcs	r5, lr
   1cab4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1cab8:	085b      	lsrs	r3, r3, #1
   1caba:	ea4f 0232 	mov.w	r2, r2, rrx
   1cabe:	ebb6 0e02 	subs.w	lr, r6, r2
   1cac2:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cac6:	bf22      	ittt	cs
   1cac8:	1ab6      	subcs	r6, r6, r2
   1caca:	4675      	movcs	r5, lr
   1cacc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1cad0:	085b      	lsrs	r3, r3, #1
   1cad2:	ea4f 0232 	mov.w	r2, r2, rrx
   1cad6:	ebb6 0e02 	subs.w	lr, r6, r2
   1cada:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cade:	bf22      	ittt	cs
   1cae0:	1ab6      	subcs	r6, r6, r2
   1cae2:	4675      	movcs	r5, lr
   1cae4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1cae8:	ea55 0e06 	orrs.w	lr, r5, r6
   1caec:	d018      	beq.n	1cb20 <__aeabi_ddiv+0x114>
   1caee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1caf2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1caf6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1cafa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1cafe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1cb02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1cb06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1cb0a:	d1c0      	bne.n	1ca8e <__aeabi_ddiv+0x82>
   1cb0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb10:	d10b      	bne.n	1cb2a <__aeabi_ddiv+0x11e>
   1cb12:	ea41 0100 	orr.w	r1, r1, r0
   1cb16:	f04f 0000 	mov.w	r0, #0
   1cb1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1cb1e:	e7b6      	b.n	1ca8e <__aeabi_ddiv+0x82>
   1cb20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb24:	bf04      	itt	eq
   1cb26:	4301      	orreq	r1, r0
   1cb28:	2000      	moveq	r0, #0
   1cb2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1cb2e:	bf88      	it	hi
   1cb30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1cb34:	f63f aeaf 	bhi.w	1c896 <__aeabi_dmul+0xde>
   1cb38:	ebb5 0c03 	subs.w	ip, r5, r3
   1cb3c:	bf04      	itt	eq
   1cb3e:	ebb6 0c02 	subseq.w	ip, r6, r2
   1cb42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1cb46:	f150 0000 	adcs.w	r0, r0, #0
   1cb4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1cb4e:	bd70      	pop	{r4, r5, r6, pc}
   1cb50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1cb54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1cb58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1cb5c:	bfc2      	ittt	gt
   1cb5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   1cb62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1cb66:	bd70      	popgt	{r4, r5, r6, pc}
   1cb68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cb6c:	f04f 0e00 	mov.w	lr, #0
   1cb70:	3c01      	subs	r4, #1
   1cb72:	e690      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb74:	ea45 0e06 	orr.w	lr, r5, r6
   1cb78:	e68d      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1cb7e:	ea94 0f0c 	teq	r4, ip
   1cb82:	bf08      	it	eq
   1cb84:	ea95 0f0c 	teqeq	r5, ip
   1cb88:	f43f af3b 	beq.w	1ca02 <__aeabi_dmul+0x24a>
   1cb8c:	ea94 0f0c 	teq	r4, ip
   1cb90:	d10a      	bne.n	1cba8 <__aeabi_ddiv+0x19c>
   1cb92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1cb96:	f47f af34 	bne.w	1ca02 <__aeabi_dmul+0x24a>
   1cb9a:	ea95 0f0c 	teq	r5, ip
   1cb9e:	f47f af25 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cba2:	4610      	mov	r0, r2
   1cba4:	4619      	mov	r1, r3
   1cba6:	e72c      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cba8:	ea95 0f0c 	teq	r5, ip
   1cbac:	d106      	bne.n	1cbbc <__aeabi_ddiv+0x1b0>
   1cbae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1cbb2:	f43f aefd 	beq.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbb6:	4610      	mov	r0, r2
   1cbb8:	4619      	mov	r1, r3
   1cbba:	e722      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cbbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1cbc0:	bf18      	it	ne
   1cbc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1cbc6:	f47f aec5 	bne.w	1c954 <__aeabi_dmul+0x19c>
   1cbca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1cbce:	f47f af0d 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cbd2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1cbd6:	f47f aeeb 	bne.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbda:	e712      	b.n	1ca02 <__aeabi_dmul+0x24a>

0001cbdc <__gedf2>:
   1cbdc:	f04f 3cff 	mov.w	ip, #4294967295
   1cbe0:	e006      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbe2:	bf00      	nop

0001cbe4 <__ledf2>:
   1cbe4:	f04f 0c01 	mov.w	ip, #1
   1cbe8:	e002      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbea:	bf00      	nop

0001cbec <__cmpdf2>:
   1cbec:	f04f 0c01 	mov.w	ip, #1
   1cbf0:	f84d cd04 	str.w	ip, [sp, #-4]!
   1cbf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cbf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cbfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc00:	bf18      	it	ne
   1cc02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1cc06:	d01b      	beq.n	1cc40 <__cmpdf2+0x54>
   1cc08:	b001      	add	sp, #4
   1cc0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1cc0e:	bf0c      	ite	eq
   1cc10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1cc14:	ea91 0f03 	teqne	r1, r3
   1cc18:	bf02      	ittt	eq
   1cc1a:	ea90 0f02 	teqeq	r0, r2
   1cc1e:	2000      	moveq	r0, #0
   1cc20:	4770      	bxeq	lr
   1cc22:	f110 0f00 	cmn.w	r0, #0
   1cc26:	ea91 0f03 	teq	r1, r3
   1cc2a:	bf58      	it	pl
   1cc2c:	4299      	cmppl	r1, r3
   1cc2e:	bf08      	it	eq
   1cc30:	4290      	cmpeq	r0, r2
   1cc32:	bf2c      	ite	cs
   1cc34:	17d8      	asrcs	r0, r3, #31
   1cc36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1cc3a:	f040 0001 	orr.w	r0, r0, #1
   1cc3e:	4770      	bx	lr
   1cc40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cc44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc48:	d102      	bne.n	1cc50 <__cmpdf2+0x64>
   1cc4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cc4e:	d107      	bne.n	1cc60 <__cmpdf2+0x74>
   1cc50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc58:	d1d6      	bne.n	1cc08 <__cmpdf2+0x1c>
   1cc5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cc5e:	d0d3      	beq.n	1cc08 <__cmpdf2+0x1c>
   1cc60:	f85d 0b04 	ldr.w	r0, [sp], #4
   1cc64:	4770      	bx	lr
   1cc66:	bf00      	nop

0001cc68 <__aeabi_cdrcmple>:
   1cc68:	4684      	mov	ip, r0
   1cc6a:	4610      	mov	r0, r2
   1cc6c:	4662      	mov	r2, ip
   1cc6e:	468c      	mov	ip, r1
   1cc70:	4619      	mov	r1, r3
   1cc72:	4663      	mov	r3, ip
   1cc74:	e000      	b.n	1cc78 <__aeabi_cdcmpeq>
   1cc76:	bf00      	nop

0001cc78 <__aeabi_cdcmpeq>:
   1cc78:	b501      	push	{r0, lr}
   1cc7a:	f7ff ffb7 	bl	1cbec <__cmpdf2>
   1cc7e:	2800      	cmp	r0, #0
   1cc80:	bf48      	it	mi
   1cc82:	f110 0f00 	cmnmi.w	r0, #0
   1cc86:	bd01      	pop	{r0, pc}

0001cc88 <__aeabi_dcmpeq>:
   1cc88:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cc8c:	f7ff fff4 	bl	1cc78 <__aeabi_cdcmpeq>
   1cc90:	bf0c      	ite	eq
   1cc92:	2001      	moveq	r0, #1
   1cc94:	2000      	movne	r0, #0
   1cc96:	f85d fb08 	ldr.w	pc, [sp], #8
   1cc9a:	bf00      	nop

0001cc9c <__aeabi_dcmplt>:
   1cc9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cca0:	f7ff ffea 	bl	1cc78 <__aeabi_cdcmpeq>
   1cca4:	bf34      	ite	cc
   1cca6:	2001      	movcc	r0, #1
   1cca8:	2000      	movcs	r0, #0
   1ccaa:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccae:	bf00      	nop

0001ccb0 <__aeabi_dcmple>:
   1ccb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccb4:	f7ff ffe0 	bl	1cc78 <__aeabi_cdcmpeq>
   1ccb8:	bf94      	ite	ls
   1ccba:	2001      	movls	r0, #1
   1ccbc:	2000      	movhi	r0, #0
   1ccbe:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccc2:	bf00      	nop

0001ccc4 <__aeabi_dcmpge>:
   1ccc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccc8:	f7ff ffce 	bl	1cc68 <__aeabi_cdrcmple>
   1cccc:	bf94      	ite	ls
   1ccce:	2001      	movls	r0, #1
   1ccd0:	2000      	movhi	r0, #0
   1ccd2:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccd6:	bf00      	nop

0001ccd8 <__aeabi_dcmpgt>:
   1ccd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccdc:	f7ff ffc4 	bl	1cc68 <__aeabi_cdrcmple>
   1cce0:	bf34      	ite	cc
   1cce2:	2001      	movcc	r0, #1
   1cce4:	2000      	movcs	r0, #0
   1cce6:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccea:	bf00      	nop

0001ccec <__aeabi_d2iz>:
   1ccec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1ccf0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1ccf4:	d215      	bcs.n	1cd22 <__aeabi_d2iz+0x36>
   1ccf6:	d511      	bpl.n	1cd1c <__aeabi_d2iz+0x30>
   1ccf8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1ccfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd00:	d912      	bls.n	1cd28 <__aeabi_d2iz+0x3c>
   1cd02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1cd12:	fa23 f002 	lsr.w	r0, r3, r2
   1cd16:	bf18      	it	ne
   1cd18:	4240      	negne	r0, r0
   1cd1a:	4770      	bx	lr
   1cd1c:	f04f 0000 	mov.w	r0, #0
   1cd20:	4770      	bx	lr
   1cd22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd26:	d105      	bne.n	1cd34 <__aeabi_d2iz+0x48>
   1cd28:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1cd2c:	bf08      	it	eq
   1cd2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1cd32:	4770      	bx	lr
   1cd34:	f04f 0000 	mov.w	r0, #0
   1cd38:	4770      	bx	lr
   1cd3a:	bf00      	nop

0001cd3c <__aeabi_d2uiz>:
   1cd3c:	004a      	lsls	r2, r1, #1
   1cd3e:	d211      	bcs.n	1cd64 <__aeabi_d2uiz+0x28>
   1cd40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1cd44:	d211      	bcs.n	1cd6a <__aeabi_d2uiz+0x2e>
   1cd46:	d50d      	bpl.n	1cd64 <__aeabi_d2uiz+0x28>
   1cd48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1cd4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd50:	d40e      	bmi.n	1cd70 <__aeabi_d2uiz+0x34>
   1cd52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd5e:	fa23 f002 	lsr.w	r0, r3, r2
   1cd62:	4770      	bx	lr
   1cd64:	f04f 0000 	mov.w	r0, #0
   1cd68:	4770      	bx	lr
   1cd6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd6e:	d102      	bne.n	1cd76 <__aeabi_d2uiz+0x3a>
   1cd70:	f04f 30ff 	mov.w	r0, #4294967295
   1cd74:	4770      	bx	lr
   1cd76:	f04f 0000 	mov.w	r0, #0
   1cd7a:	4770      	bx	lr

0001cd7c <__aeabi_uldivmod>:
   1cd7c:	b953      	cbnz	r3, 1cd94 <__aeabi_uldivmod+0x18>
   1cd7e:	b94a      	cbnz	r2, 1cd94 <__aeabi_uldivmod+0x18>
   1cd80:	2900      	cmp	r1, #0
   1cd82:	bf08      	it	eq
   1cd84:	2800      	cmpeq	r0, #0
   1cd86:	bf1c      	itt	ne
   1cd88:	f04f 31ff 	movne.w	r1, #4294967295
   1cd8c:	f04f 30ff 	movne.w	r0, #4294967295
   1cd90:	f000 b970 	b.w	1d074 <__aeabi_idiv0>
   1cd94:	f1ad 0c08 	sub.w	ip, sp, #8
   1cd98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1cd9c:	f000 f806 	bl	1cdac <__udivmoddi4>
   1cda0:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cda4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cda8:	b004      	add	sp, #16
   1cdaa:	4770      	bx	lr

0001cdac <__udivmoddi4>:
   1cdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cdb0:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1cdb2:	4604      	mov	r4, r0
   1cdb4:	4689      	mov	r9, r1
   1cdb6:	2b00      	cmp	r3, #0
   1cdb8:	f040 8083 	bne.w	1cec2 <__udivmoddi4+0x116>
   1cdbc:	428a      	cmp	r2, r1
   1cdbe:	4615      	mov	r5, r2
   1cdc0:	d945      	bls.n	1ce4e <__udivmoddi4+0xa2>
   1cdc2:	fab2 f282 	clz	r2, r2
   1cdc6:	b14a      	cbz	r2, 1cddc <__udivmoddi4+0x30>
   1cdc8:	f1c2 0720 	rsb	r7, r2, #32
   1cdcc:	fa01 f302 	lsl.w	r3, r1, r2
   1cdd0:	4095      	lsls	r5, r2
   1cdd2:	4094      	lsls	r4, r2
   1cdd4:	fa20 f707 	lsr.w	r7, r0, r7
   1cdd8:	ea47 0903 	orr.w	r9, r7, r3
   1cddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1cde0:	0c23      	lsrs	r3, r4, #16
   1cde2:	fa1f f885 	uxth.w	r8, r5
   1cde6:	fbb9 fcfe 	udiv	ip, r9, lr
   1cdea:	fb0e 991c 	mls	r9, lr, ip, r9
   1cdee:	fb0c f108 	mul.w	r1, ip, r8
   1cdf2:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   1cdf6:	4299      	cmp	r1, r3
   1cdf8:	d90a      	bls.n	1ce10 <__udivmoddi4+0x64>
   1cdfa:	18eb      	adds	r3, r5, r3
   1cdfc:	bf2c      	ite	cs
   1cdfe:	2001      	movcs	r0, #1
   1ce00:	2000      	movcc	r0, #0
   1ce02:	4299      	cmp	r1, r3
   1ce04:	d902      	bls.n	1ce0c <__udivmoddi4+0x60>
   1ce06:	2800      	cmp	r0, #0
   1ce08:	f000 811d 	beq.w	1d046 <__udivmoddi4+0x29a>
   1ce0c:	f10c 3cff 	add.w	ip, ip, #4294967295
   1ce10:	1a59      	subs	r1, r3, r1
   1ce12:	b2a3      	uxth	r3, r4
   1ce14:	fbb1 f0fe 	udiv	r0, r1, lr
   1ce18:	fb0e 1110 	mls	r1, lr, r0, r1
   1ce1c:	fb00 f808 	mul.w	r8, r0, r8
   1ce20:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1ce24:	45a0      	cmp	r8, r4
   1ce26:	d905      	bls.n	1ce34 <__udivmoddi4+0x88>
   1ce28:	192c      	adds	r4, r5, r4
   1ce2a:	d202      	bcs.n	1ce32 <__udivmoddi4+0x86>
   1ce2c:	45a0      	cmp	r8, r4
   1ce2e:	f200 810e 	bhi.w	1d04e <__udivmoddi4+0x2a2>
   1ce32:	3801      	subs	r0, #1
   1ce34:	eba4 0408 	sub.w	r4, r4, r8
   1ce38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1ce3c:	2700      	movs	r7, #0
   1ce3e:	b11e      	cbz	r6, 1ce48 <__udivmoddi4+0x9c>
   1ce40:	40d4      	lsrs	r4, r2
   1ce42:	2300      	movs	r3, #0
   1ce44:	e9c6 4300 	strd	r4, r3, [r6]
   1ce48:	4639      	mov	r1, r7
   1ce4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce4e:	2a00      	cmp	r2, #0
   1ce50:	d051      	beq.n	1cef6 <__udivmoddi4+0x14a>
   1ce52:	fab2 f282 	clz	r2, r2
   1ce56:	2a00      	cmp	r2, #0
   1ce58:	f040 80af 	bne.w	1cfba <__udivmoddi4+0x20e>
   1ce5c:	1b49      	subs	r1, r1, r5
   1ce5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1ce62:	fa1f f885 	uxth.w	r8, r5
   1ce66:	2701      	movs	r7, #1
   1ce68:	0c23      	lsrs	r3, r4, #16
   1ce6a:	fbb1 fcfe 	udiv	ip, r1, lr
   1ce6e:	fb0e 111c 	mls	r1, lr, ip, r1
   1ce72:	fb08 f00c 	mul.w	r0, r8, ip
   1ce76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1ce7a:	4298      	cmp	r0, r3
   1ce7c:	d90a      	bls.n	1ce94 <__udivmoddi4+0xe8>
   1ce7e:	18eb      	adds	r3, r5, r3
   1ce80:	bf2c      	ite	cs
   1ce82:	2101      	movcs	r1, #1
   1ce84:	2100      	movcc	r1, #0
   1ce86:	4298      	cmp	r0, r3
   1ce88:	d902      	bls.n	1ce90 <__udivmoddi4+0xe4>
   1ce8a:	2900      	cmp	r1, #0
   1ce8c:	f000 80d7 	beq.w	1d03e <__udivmoddi4+0x292>
   1ce90:	f10c 3cff 	add.w	ip, ip, #4294967295
   1ce94:	1a19      	subs	r1, r3, r0
   1ce96:	b2a3      	uxth	r3, r4
   1ce98:	fbb1 f0fe 	udiv	r0, r1, lr
   1ce9c:	fb0e 1110 	mls	r1, lr, r0, r1
   1cea0:	fb08 f800 	mul.w	r8, r8, r0
   1cea4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1cea8:	45a0      	cmp	r8, r4
   1ceaa:	d905      	bls.n	1ceb8 <__udivmoddi4+0x10c>
   1ceac:	192c      	adds	r4, r5, r4
   1ceae:	d202      	bcs.n	1ceb6 <__udivmoddi4+0x10a>
   1ceb0:	45a0      	cmp	r8, r4
   1ceb2:	f200 80c1 	bhi.w	1d038 <__udivmoddi4+0x28c>
   1ceb6:	3801      	subs	r0, #1
   1ceb8:	eba4 0408 	sub.w	r4, r4, r8
   1cebc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1cec0:	e7bd      	b.n	1ce3e <__udivmoddi4+0x92>
   1cec2:	428b      	cmp	r3, r1
   1cec4:	d908      	bls.n	1ced8 <__udivmoddi4+0x12c>
   1cec6:	2e00      	cmp	r6, #0
   1cec8:	d074      	beq.n	1cfb4 <__udivmoddi4+0x208>
   1ceca:	2700      	movs	r7, #0
   1cecc:	e9c6 0100 	strd	r0, r1, [r6]
   1ced0:	4638      	mov	r0, r7
   1ced2:	4639      	mov	r1, r7
   1ced4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ced8:	fab3 f783 	clz	r7, r3
   1cedc:	b967      	cbnz	r7, 1cef8 <__udivmoddi4+0x14c>
   1cede:	428b      	cmp	r3, r1
   1cee0:	f0c0 80a4 	bcc.w	1d02c <__udivmoddi4+0x280>
   1cee4:	4282      	cmp	r2, r0
   1cee6:	f240 80a1 	bls.w	1d02c <__udivmoddi4+0x280>
   1ceea:	4638      	mov	r0, r7
   1ceec:	2e00      	cmp	r6, #0
   1ceee:	d0ab      	beq.n	1ce48 <__udivmoddi4+0x9c>
   1cef0:	e9c6 4900 	strd	r4, r9, [r6]
   1cef4:	e7a8      	b.n	1ce48 <__udivmoddi4+0x9c>
   1cef6:	deff      	udf	#255	; 0xff
   1cef8:	f1c7 0520 	rsb	r5, r7, #32
   1cefc:	40bb      	lsls	r3, r7
   1cefe:	fa02 fc07 	lsl.w	ip, r2, r7
   1cf02:	fa01 f407 	lsl.w	r4, r1, r7
   1cf06:	40ea      	lsrs	r2, r5
   1cf08:	fa20 f805 	lsr.w	r8, r0, r5
   1cf0c:	40e9      	lsrs	r1, r5
   1cf0e:	fa00 fe07 	lsl.w	lr, r0, r7
   1cf12:	431a      	orrs	r2, r3
   1cf14:	ea48 0404 	orr.w	r4, r8, r4
   1cf18:	ea4f 4812 	mov.w	r8, r2, lsr #16
   1cf1c:	0c20      	lsrs	r0, r4, #16
   1cf1e:	fa1f f982 	uxth.w	r9, r2
   1cf22:	fbb1 faf8 	udiv	sl, r1, r8
   1cf26:	fb08 111a 	mls	r1, r8, sl, r1
   1cf2a:	fb0a fb09 	mul.w	fp, sl, r9
   1cf2e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1cf32:	458b      	cmp	fp, r1
   1cf34:	d90a      	bls.n	1cf4c <__udivmoddi4+0x1a0>
   1cf36:	1851      	adds	r1, r2, r1
   1cf38:	bf2c      	ite	cs
   1cf3a:	2301      	movcs	r3, #1
   1cf3c:	2300      	movcc	r3, #0
   1cf3e:	458b      	cmp	fp, r1
   1cf40:	d902      	bls.n	1cf48 <__udivmoddi4+0x19c>
   1cf42:	2b00      	cmp	r3, #0
   1cf44:	f000 8088 	beq.w	1d058 <__udivmoddi4+0x2ac>
   1cf48:	f10a 3aff 	add.w	sl, sl, #4294967295
   1cf4c:	eba1 010b 	sub.w	r1, r1, fp
   1cf50:	b2a4      	uxth	r4, r4
   1cf52:	fbb1 f0f8 	udiv	r0, r1, r8
   1cf56:	fb08 1110 	mls	r1, r8, r0, r1
   1cf5a:	fb00 f909 	mul.w	r9, r0, r9
   1cf5e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   1cf62:	4589      	cmp	r9, r1
   1cf64:	d904      	bls.n	1cf70 <__udivmoddi4+0x1c4>
   1cf66:	1851      	adds	r1, r2, r1
   1cf68:	d201      	bcs.n	1cf6e <__udivmoddi4+0x1c2>
   1cf6a:	4589      	cmp	r9, r1
   1cf6c:	d87b      	bhi.n	1d066 <__udivmoddi4+0x2ba>
   1cf6e:	3801      	subs	r0, #1
   1cf70:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   1cf74:	eba1 0109 	sub.w	r1, r1, r9
   1cf78:	fba0 890c 	umull	r8, r9, r0, ip
   1cf7c:	4549      	cmp	r1, r9
   1cf7e:	4644      	mov	r4, r8
   1cf80:	464b      	mov	r3, r9
   1cf82:	d302      	bcc.n	1cf8a <__udivmoddi4+0x1de>
   1cf84:	d106      	bne.n	1cf94 <__udivmoddi4+0x1e8>
   1cf86:	45c6      	cmp	lr, r8
   1cf88:	d204      	bcs.n	1cf94 <__udivmoddi4+0x1e8>
   1cf8a:	3801      	subs	r0, #1
   1cf8c:	ebb8 040c 	subs.w	r4, r8, ip
   1cf90:	eb69 0302 	sbc.w	r3, r9, r2
   1cf94:	2e00      	cmp	r6, #0
   1cf96:	d05d      	beq.n	1d054 <__udivmoddi4+0x2a8>
   1cf98:	ebbe 0204 	subs.w	r2, lr, r4
   1cf9c:	eb61 0103 	sbc.w	r1, r1, r3
   1cfa0:	fa01 f505 	lsl.w	r5, r1, r5
   1cfa4:	fa22 f307 	lsr.w	r3, r2, r7
   1cfa8:	40f9      	lsrs	r1, r7
   1cfaa:	2700      	movs	r7, #0
   1cfac:	431d      	orrs	r5, r3
   1cfae:	e9c6 5100 	strd	r5, r1, [r6]
   1cfb2:	e749      	b.n	1ce48 <__udivmoddi4+0x9c>
   1cfb4:	4637      	mov	r7, r6
   1cfb6:	4630      	mov	r0, r6
   1cfb8:	e746      	b.n	1ce48 <__udivmoddi4+0x9c>
   1cfba:	f1c2 0020 	rsb	r0, r2, #32
   1cfbe:	4095      	lsls	r5, r2
   1cfc0:	fa01 f702 	lsl.w	r7, r1, r2
   1cfc4:	fa21 f300 	lsr.w	r3, r1, r0
   1cfc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1cfcc:	fa24 f100 	lsr.w	r1, r4, r0
   1cfd0:	fa1f f885 	uxth.w	r8, r5
   1cfd4:	4094      	lsls	r4, r2
   1cfd6:	4339      	orrs	r1, r7
   1cfd8:	fbb3 f0fe 	udiv	r0, r3, lr
   1cfdc:	0c0f      	lsrs	r7, r1, #16
   1cfde:	fb0e 3310 	mls	r3, lr, r0, r3
   1cfe2:	fb00 fc08 	mul.w	ip, r0, r8
   1cfe6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   1cfea:	459c      	cmp	ip, r3
   1cfec:	d907      	bls.n	1cffe <__udivmoddi4+0x252>
   1cfee:	18eb      	adds	r3, r5, r3
   1cff0:	bf2c      	ite	cs
   1cff2:	2701      	movcs	r7, #1
   1cff4:	2700      	movcc	r7, #0
   1cff6:	459c      	cmp	ip, r3
   1cff8:	d900      	bls.n	1cffc <__udivmoddi4+0x250>
   1cffa:	b38f      	cbz	r7, 1d060 <__udivmoddi4+0x2b4>
   1cffc:	3801      	subs	r0, #1
   1cffe:	eba3 030c 	sub.w	r3, r3, ip
   1d002:	b289      	uxth	r1, r1
   1d004:	fbb3 f7fe 	udiv	r7, r3, lr
   1d008:	fb0e 3317 	mls	r3, lr, r7, r3
   1d00c:	fb07 fc08 	mul.w	ip, r7, r8
   1d010:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1d014:	458c      	cmp	ip, r1
   1d016:	d904      	bls.n	1d022 <__udivmoddi4+0x276>
   1d018:	1869      	adds	r1, r5, r1
   1d01a:	d201      	bcs.n	1d020 <__udivmoddi4+0x274>
   1d01c:	458c      	cmp	ip, r1
   1d01e:	d825      	bhi.n	1d06c <__udivmoddi4+0x2c0>
   1d020:	3f01      	subs	r7, #1
   1d022:	eba1 010c 	sub.w	r1, r1, ip
   1d026:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
   1d02a:	e71d      	b.n	1ce68 <__udivmoddi4+0xbc>
   1d02c:	1a84      	subs	r4, r0, r2
   1d02e:	eb61 0303 	sbc.w	r3, r1, r3
   1d032:	2001      	movs	r0, #1
   1d034:	4699      	mov	r9, r3
   1d036:	e759      	b.n	1ceec <__udivmoddi4+0x140>
   1d038:	3802      	subs	r0, #2
   1d03a:	442c      	add	r4, r5
   1d03c:	e73c      	b.n	1ceb8 <__udivmoddi4+0x10c>
   1d03e:	f1ac 0c02 	sub.w	ip, ip, #2
   1d042:	442b      	add	r3, r5
   1d044:	e726      	b.n	1ce94 <__udivmoddi4+0xe8>
   1d046:	f1ac 0c02 	sub.w	ip, ip, #2
   1d04a:	442b      	add	r3, r5
   1d04c:	e6e0      	b.n	1ce10 <__udivmoddi4+0x64>
   1d04e:	3802      	subs	r0, #2
   1d050:	442c      	add	r4, r5
   1d052:	e6ef      	b.n	1ce34 <__udivmoddi4+0x88>
   1d054:	4637      	mov	r7, r6
   1d056:	e6f7      	b.n	1ce48 <__udivmoddi4+0x9c>
   1d058:	f1aa 0a02 	sub.w	sl, sl, #2
   1d05c:	4411      	add	r1, r2
   1d05e:	e775      	b.n	1cf4c <__udivmoddi4+0x1a0>
   1d060:	3802      	subs	r0, #2
   1d062:	442b      	add	r3, r5
   1d064:	e7cb      	b.n	1cffe <__udivmoddi4+0x252>
   1d066:	3802      	subs	r0, #2
   1d068:	4411      	add	r1, r2
   1d06a:	e781      	b.n	1cf70 <__udivmoddi4+0x1c4>
   1d06c:	3f02      	subs	r7, #2
   1d06e:	4429      	add	r1, r5
   1d070:	e7d7      	b.n	1d022 <__udivmoddi4+0x276>
   1d072:	bf00      	nop

0001d074 <__aeabi_idiv0>:
   1d074:	4770      	bx	lr
   1d076:	bf00      	nop

0001d078 <__aeabi_dcmpun>:
   1d078:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1d07c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1d080:	d102      	bne.n	1d088 <__aeabi_dcmpun+0x10>
   1d082:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1d086:	d10a      	bne.n	1d09e <__aeabi_dcmpun+0x26>
   1d088:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1d08c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1d090:	d102      	bne.n	1d098 <__aeabi_dcmpun+0x20>
   1d092:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1d096:	d102      	bne.n	1d09e <__aeabi_dcmpun+0x26>
   1d098:	f04f 0000 	mov.w	r0, #0
   1d09c:	4770      	bx	lr
   1d09e:	f04f 0001 	mov.w	r0, #1
   1d0a2:	4770      	bx	lr

0001d0a4 <__aeabi_d2lz>:
   1d0a4:	b538      	push	{r3, r4, r5, lr}
   1d0a6:	2200      	movs	r2, #0
   1d0a8:	2300      	movs	r3, #0
   1d0aa:	4604      	mov	r4, r0
   1d0ac:	460d      	mov	r5, r1
   1d0ae:	f7ff fdf5 	bl	1cc9c <__aeabi_dcmplt>
   1d0b2:	b928      	cbnz	r0, 1d0c0 <__aeabi_d2lz+0x1c>
   1d0b4:	4620      	mov	r0, r4
   1d0b6:	4629      	mov	r1, r5
   1d0b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1d0bc:	f000 b80a 	b.w	1d0d4 <__aeabi_d2ulz>
   1d0c0:	4620      	mov	r0, r4
   1d0c2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   1d0c6:	f000 f805 	bl	1d0d4 <__aeabi_d2ulz>
   1d0ca:	4240      	negs	r0, r0
   1d0cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1d0d0:	bd38      	pop	{r3, r4, r5, pc}
   1d0d2:	bf00      	nop

0001d0d4 <__aeabi_d2ulz>:
   1d0d4:	b5d0      	push	{r4, r6, r7, lr}
   1d0d6:	2200      	movs	r2, #0
   1d0d8:	4b0b      	ldr	r3, [pc, #44]	; (1d108 <__aeabi_d2ulz+0x34>)
   1d0da:	4606      	mov	r6, r0
   1d0dc:	460f      	mov	r7, r1
   1d0de:	f7ff fb6b 	bl	1c7b8 <__aeabi_dmul>
   1d0e2:	f7ff fe2b 	bl	1cd3c <__aeabi_d2uiz>
   1d0e6:	4604      	mov	r4, r0
   1d0e8:	f7ff faec 	bl	1c6c4 <__aeabi_ui2d>
   1d0ec:	2200      	movs	r2, #0
   1d0ee:	4b07      	ldr	r3, [pc, #28]	; (1d10c <__aeabi_d2ulz+0x38>)
   1d0f0:	f7ff fb62 	bl	1c7b8 <__aeabi_dmul>
   1d0f4:	4602      	mov	r2, r0
   1d0f6:	460b      	mov	r3, r1
   1d0f8:	4630      	mov	r0, r6
   1d0fa:	4639      	mov	r1, r7
   1d0fc:	f7ff f9a4 	bl	1c448 <__aeabi_dsub>
   1d100:	f7ff fe1c 	bl	1cd3c <__aeabi_d2uiz>
   1d104:	4621      	mov	r1, r4
   1d106:	bdd0      	pop	{r4, r6, r7, pc}
   1d108:	3df00000 	.word	0x3df00000
   1d10c:	41f00000 	.word	0x41f00000

0001d110 <strcmp>:
   1d110:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d114:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d118:	2a01      	cmp	r2, #1
   1d11a:	bf28      	it	cs
   1d11c:	429a      	cmpcs	r2, r3
   1d11e:	d0f7      	beq.n	1d110 <strcmp>
   1d120:	1ad0      	subs	r0, r2, r3
   1d122:	4770      	bx	lr

0001d124 <strlen>:
   1d124:	4603      	mov	r3, r0
   1d126:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d12a:	2a00      	cmp	r2, #0
   1d12c:	d1fb      	bne.n	1d126 <strlen+0x2>
   1d12e:	1a18      	subs	r0, r3, r0
   1d130:	3801      	subs	r0, #1
   1d132:	4770      	bx	lr
   1d134:	0000      	movs	r0, r0
	...

0001d138 <send_agps_request>:
{
	error_handler(ERROR_CLOUD, err);
}

static void send_agps_request(struct k_work *work)
{
   1d138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d13c:	4b28      	ldr	r3, [pc, #160]	; (1d1e0 <send_agps_request+0xa8>)
#if defined(CONFIG_NRF_CLOUD_AGPS)
	int err;
	static s64_t last_request_timestamp;


	if ((last_request_timestamp != 0) &&
   1d13e:	4d29      	ldr	r5, [pc, #164]	; (1d1e4 <send_agps_request+0xac>)
   1d140:	4c29      	ldr	r4, [pc, #164]	; (1d1e8 <send_agps_request+0xb0>)
   1d142:	46a8      	mov	r8, r5
   1d144:	1ae4      	subs	r4, r4, r3
   1d146:	e9d5 2300 	ldrd	r2, r3, [r5]
   1d14a:	4313      	orrs	r3, r2
   1d14c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1d150:	d018      	beq.n	1d184 <send_agps_request+0x4c>
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_GET);
		return (s64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_get();
   1d152:	f023 f9dd 	bl	40510 <z_impl_k_uptime_get>
	    (k_uptime_get() - last_request_timestamp < K_HOURS(1))) {
   1d156:	e9d5 3200 	ldrd	r3, r2, [r5]
   1d15a:	1ac6      	subs	r6, r0, r3
   1d15c:	eb61 0702 	sbc.w	r7, r1, r2
	if ((last_request_timestamp != 0) &&
   1d160:	a31d      	add	r3, pc, #116	; (adr r3, 1d1d8 <send_agps_request+0xa0>)
   1d162:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d166:	42b2      	cmp	r2, r6
   1d168:	41bb      	sbcs	r3, r7
   1d16a:	db0b      	blt.n	1d184 <send_agps_request+0x4c>
		LOG_WRN("A-GPS request was sent less than 1 hour ago");
   1d16c:	f04f 0000 	mov.w	r0, #0
   1d170:	2302      	movs	r3, #2
   1d172:	491e      	ldr	r1, [pc, #120]	; (1d1ec <send_agps_request+0xb4>)
   1d174:	f363 0007 	bfi	r0, r3, #0, #8
   1d178:	f364 108f 	bfi	r0, r4, #6, #10

	last_request_timestamp = k_uptime_get();

	LOG_INF("A-GPS request sent");
#endif /* defined(CONFIG_NRF_CLOUD_AGPS) */
}
   1d17c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_INF("A-GPS request sent");
   1d180:	f020 beef 	b.w	3df62 <log_string_sync>
	LOG_INF("Sending A-GPS request");
   1d184:	2303      	movs	r3, #3
   1d186:	f04f 0000 	mov.w	r0, #0
   1d18a:	f363 0007 	bfi	r0, r3, #0, #8
   1d18e:	f364 108f 	bfi	r0, r4, #6, #10
   1d192:	4917      	ldr	r1, [pc, #92]	; (1d1f0 <send_agps_request+0xb8>)
   1d194:	f020 fee5 	bl	3df62 <log_string_sync>
	err = nrf_cloud_agps_request_all();
   1d198:	f022 ffcb 	bl	40132 <nrf_cloud_agps_request_all>
	if (err) {
   1d19c:	4602      	mov	r2, r0
   1d19e:	b158      	cbz	r0, 1d1b8 <send_agps_request+0x80>
		LOG_ERR("A-GPS request failed, error: %d", err);
   1d1a0:	2101      	movs	r1, #1
   1d1a2:	f04f 0000 	mov.w	r0, #0
   1d1a6:	f361 0007 	bfi	r0, r1, #0, #8
   1d1aa:	f364 108f 	bfi	r0, r4, #6, #10
   1d1ae:	4911      	ldr	r1, [pc, #68]	; (1d1f4 <send_agps_request+0xbc>)
}
   1d1b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		LOG_ERR("A-GPS request failed, error: %d", err);
   1d1b4:	f020 bed5 	b.w	3df62 <log_string_sync>
   1d1b8:	f023 f9aa 	bl	40510 <z_impl_k_uptime_get>
	LOG_INF("A-GPS request sent");
   1d1bc:	2303      	movs	r3, #3
	last_request_timestamp = k_uptime_get();
   1d1be:	e9c8 0100 	strd	r0, r1, [r8]
	LOG_INF("A-GPS request sent");
   1d1c2:	f04f 0000 	mov.w	r0, #0
   1d1c6:	f363 0007 	bfi	r0, r3, #0, #8
   1d1ca:	f364 108f 	bfi	r0, r4, #6, #10
   1d1ce:	490a      	ldr	r1, [pc, #40]	; (1d1f8 <send_agps_request+0xc0>)
   1d1d0:	e7d4      	b.n	1d17c <send_agps_request+0x44>
   1d1d2:	bf00      	nop
   1d1d4:	f3af 8000 	nop.w
   1d1d8:	0036ee7f 	.word	0x0036ee7f
   1d1dc:	00000000 	.word	0x00000000
   1d1e0:	00041c2c 	.word	0x00041c2c
   1d1e4:	20020000 	.word	0x20020000
   1d1e8:	00041c2c 	.word	0x00041c2c
   1d1ec:	00043570 	.word	0x00043570
   1d1f0:	0004359c 	.word	0x0004359c
   1d1f4:	000435b2 	.word	0x000435b2
   1d1f8:	000435d2 	.word	0x000435d2
   1d1fc:	00000000 	.word	0x00000000

0001d200 <motion_work_q_handler>:
	k_delayed_work_submit_to_queue(motion_work_q, &motion_work, K_NO_WAIT);
}

/**@brief Workqueue handler that runs the callback provided by application.*/
static void motion_work_q_handler(struct k_work *work)
{
   1d200:	b570      	push	{r4, r5, r6, lr}
		err = sensor_sample_fetch_chan(accel_dev,
   1d202:	4c4f      	ldr	r4, [pc, #316]	; (1d340 <motion_work_q_handler+0x140>)
{
   1d204:	b092      	sub	sp, #72	; 0x48
		err = sensor_sample_fetch_chan(accel_dev,
   1d206:	6820      	ldr	r0, [r4, #0]
						 enum sensor_channel type)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->driver_api;

	return api->sample_fetch(dev, type);
   1d208:	6843      	ldr	r3, [r0, #4]
   1d20a:	2103      	movs	r1, #3
   1d20c:	689b      	ldr	r3, [r3, #8]
   1d20e:	4798      	blx	r3
	if (err) {
   1d210:	4601      	mov	r1, r0
   1d212:	b178      	cbz	r0, 1d234 <motion_work_q_handler+0x34>
		LOG_ERR("sensor_sample_fetch failed");
   1d214:	2301      	movs	r3, #1
   1d216:	f04f 0000 	mov.w	r0, #0
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   1d21a:	4a4a      	ldr	r2, [pc, #296]	; (1d344 <motion_work_q_handler+0x144>)
   1d21c:	f363 0007 	bfi	r0, r3, #0, #8
   1d220:	4b49      	ldr	r3, [pc, #292]	; (1d348 <motion_work_q_handler+0x148>)
   1d222:	494a      	ldr	r1, [pc, #296]	; (1d34c <motion_work_q_handler+0x14c>)
   1d224:	1a9b      	subs	r3, r3, r2
   1d226:	08db      	lsrs	r3, r3, #3
   1d228:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("sensor_channel_get failed");
   1d22c:	f020 fe99 	bl	3df62 <log_string_sync>
		if (get_orientation(&motion_data.orientation,
					&motion_data.acceleration) == 0) {
			handler(motion_data);
		}
	}
}
   1d230:	b012      	add	sp, #72	; 0x48
   1d232:	bd70      	pop	{r4, r5, r6, pc}
	err = sensor_channel_get(accel_dev,
   1d234:	aa04      	add	r2, sp, #16
   1d236:	6820      	ldr	r0, [r4, #0]
   1d238:	f020 fb31 	bl	3d89e <sensor_channel_get>
	if (err) {
   1d23c:	b160      	cbz	r0, 1d258 <motion_work_q_handler+0x58>
		LOG_ERR("sensor_channel_get failed");
   1d23e:	2301      	movs	r3, #1
   1d240:	f04f 0000 	mov.w	r0, #0
   1d244:	4a3f      	ldr	r2, [pc, #252]	; (1d344 <motion_work_q_handler+0x144>)
   1d246:	f363 0007 	bfi	r0, r3, #0, #8
   1d24a:	4b3f      	ldr	r3, [pc, #252]	; (1d348 <motion_work_q_handler+0x148>)
   1d24c:	4940      	ldr	r1, [pc, #256]	; (1d350 <motion_work_q_handler+0x150>)
   1d24e:	1a9b      	subs	r3, r3, r2
   1d250:	08db      	lsrs	r3, r3, #3
   1d252:	f363 108f 	bfi	r0, r3, #6, #10
   1d256:	e7e9      	b.n	1d22c <motion_work_q_handler+0x2c>
	err = sensor_channel_get(accel_dev,
   1d258:	aa06      	add	r2, sp, #24
   1d25a:	2101      	movs	r1, #1
   1d25c:	6820      	ldr	r0, [r4, #0]
   1d25e:	f020 fb1e 	bl	3d89e <sensor_channel_get>
	if (err) {
   1d262:	2800      	cmp	r0, #0
   1d264:	d1eb      	bne.n	1d23e <motion_work_q_handler+0x3e>
	err = sensor_channel_get(accel_dev,
   1d266:	aa08      	add	r2, sp, #32
   1d268:	2102      	movs	r1, #2
   1d26a:	6820      	ldr	r0, [r4, #0]
   1d26c:	f020 fb17 	bl	3d89e <sensor_channel_get>
	if (err) {
   1d270:	2800      	cmp	r0, #0
   1d272:	d1e4      	bne.n	1d23e <motion_work_q_handler+0x3e>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
   1d274:	9805      	ldr	r0, [sp, #20]
   1d276:	f7ff fa35 	bl	1c6e4 <__aeabi_i2d>
   1d27a:	a32f      	add	r3, pc, #188	; (adr r3, 1d338 <motion_work_q_handler+0x138>)
   1d27c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d280:	f7ff fbc4 	bl	1ca0c <__aeabi_ddiv>
   1d284:	4604      	mov	r4, r0
   1d286:	9804      	ldr	r0, [sp, #16]
   1d288:	460d      	mov	r5, r1
   1d28a:	f7ff fa2b 	bl	1c6e4 <__aeabi_i2d>
   1d28e:	4602      	mov	r2, r0
   1d290:	460b      	mov	r3, r1
   1d292:	4620      	mov	r0, r4
   1d294:	4629      	mov	r1, r5
   1d296:	f7ff f8d9 	bl	1c44c <__adddf3>
	sensor_data->x = sensor_value_to_double(&accel_data[0]);
   1d29a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1d29e:	9807      	ldr	r0, [sp, #28]
   1d2a0:	f7ff fa20 	bl	1c6e4 <__aeabi_i2d>
   1d2a4:	a324      	add	r3, pc, #144	; (adr r3, 1d338 <motion_work_q_handler+0x138>)
   1d2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d2aa:	f7ff fbaf 	bl	1ca0c <__aeabi_ddiv>
   1d2ae:	4604      	mov	r4, r0
   1d2b0:	9806      	ldr	r0, [sp, #24]
   1d2b2:	460d      	mov	r5, r1
   1d2b4:	f7ff fa16 	bl	1c6e4 <__aeabi_i2d>
   1d2b8:	4602      	mov	r2, r0
   1d2ba:	460b      	mov	r3, r1
   1d2bc:	4620      	mov	r0, r4
   1d2be:	4629      	mov	r1, r5
   1d2c0:	f7ff f8c4 	bl	1c44c <__adddf3>
	sensor_data->y = sensor_value_to_double(&accel_data[1]);
   1d2c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   1d2c8:	9809      	ldr	r0, [sp, #36]	; 0x24
   1d2ca:	f7ff fa0b 	bl	1c6e4 <__aeabi_i2d>
   1d2ce:	a31a      	add	r3, pc, #104	; (adr r3, 1d338 <motion_work_q_handler+0x138>)
   1d2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d2d4:	f7ff fb9a 	bl	1ca0c <__aeabi_ddiv>
   1d2d8:	4604      	mov	r4, r0
   1d2da:	9808      	ldr	r0, [sp, #32]
   1d2dc:	460d      	mov	r5, r1
   1d2de:	f7ff fa01 	bl	1c6e4 <__aeabi_i2d>
   1d2e2:	4602      	mov	r2, r0
   1d2e4:	460b      	mov	r3, r1
   1d2e6:	4620      	mov	r0, r4
   1d2e8:	4629      	mov	r1, r5
   1d2ea:	f7ff f8af 	bl	1c44c <__adddf3>
	if (acceleration_data->z >= FLIP_ACCELERATION_THRESHOLD) {
   1d2ee:	2200      	movs	r2, #0
   1d2f0:	4b18      	ldr	r3, [pc, #96]	; (1d354 <motion_work_q_handler+0x154>)
   1d2f2:	4604      	mov	r4, r0
   1d2f4:	460d      	mov	r5, r1
   1d2f6:	f7ff fce5 	bl	1ccc4 <__aeabi_dcmpge>
   1d2fa:	b178      	cbz	r0, 1d31c <motion_work_q_handler+0x11c>
		*orientation = IS_ENABLED(CONFIG_ACCEL_INVERTED) ?
   1d2fc:	2301      	movs	r3, #1
		*orientation = MOTION_ORIENTATION_ON_SIDE;
   1d2fe:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			handler(motion_data);
   1d302:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   1d306:	4b14      	ldr	r3, [pc, #80]	; (1d358 <motion_work_q_handler+0x158>)
   1d308:	681e      	ldr	r6, [r3, #0]
   1d30a:	ab12      	add	r3, sp, #72	; 0x48
   1d30c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1d310:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   1d314:	ab0a      	add	r3, sp, #40	; 0x28
   1d316:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1d318:	47b0      	blx	r6
}
   1d31a:	e789      	b.n	1d230 <motion_work_q_handler+0x30>
	} else if (acceleration_data->z <= -FLIP_ACCELERATION_THRESHOLD) {
   1d31c:	2200      	movs	r2, #0
   1d31e:	4b0f      	ldr	r3, [pc, #60]	; (1d35c <motion_work_q_handler+0x15c>)
   1d320:	4620      	mov	r0, r4
   1d322:	4629      	mov	r1, r5
   1d324:	f7ff fcc4 	bl	1ccb0 <__aeabi_dcmple>
   1d328:	b108      	cbz	r0, 1d32e <motion_work_q_handler+0x12e>
		*orientation = IS_ENABLED(CONFIG_ACCEL_INVERTED) ?
   1d32a:	2302      	movs	r3, #2
   1d32c:	e7e7      	b.n	1d2fe <motion_work_q_handler+0xfe>
		*orientation = MOTION_ORIENTATION_ON_SIDE;
   1d32e:	2303      	movs	r3, #3
   1d330:	e7e5      	b.n	1d2fe <motion_work_q_handler+0xfe>
   1d332:	bf00      	nop
   1d334:	f3af 8000 	nop.w
   1d338:	00000000 	.word	0x00000000
   1d33c:	412e8480 	.word	0x412e8480
   1d340:	20023798 	.word	0x20023798
   1d344:	00041c2c 	.word	0x00041c2c
   1d348:	00041ce4 	.word	0x00041ce4
   1d34c:	000437bb 	.word	0x000437bb
   1d350:	000437d6 	.word	0x000437d6
   1d354:	40140000 	.word	0x40140000
   1d358:	2002379c 	.word	0x2002379c
   1d35c:	c0140000 	.word	0xc0140000

0001d360 <env_sensors_poll_fn>:
{
	return initialized ? submit_poll_work(K_NO_WAIT) : -ENXIO;
}

static void env_sensors_poll_fn(struct k_work *work)
{
   1d360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d364:	b08d      	sub	sp, #52	; 0x34
	int num_sensors = ARRAY_SIZE(env_sensors);
	struct sensor_value data[num_sensors];

	int err;

	if (data_send_interval_s == 0) {
   1d366:	4b5c      	ldr	r3, [pc, #368]	; (1d4d8 <env_sensors_poll_fn+0x178>)
{
   1d368:	af00      	add	r7, sp, #0
	if (data_send_interval_s == 0) {
   1d36a:	681a      	ldr	r2, [r3, #0]
{
   1d36c:	f8c7 d014 	str.w	sp, [r7, #20]
	if (data_send_interval_s == 0) {
   1d370:	607b      	str	r3, [r7, #4]
   1d372:	2a00      	cmp	r2, #0
   1d374:	d055      	beq.n	1d422 <env_sensors_poll_fn+0xc2>
		if (err) {
			LOG_ERR("Failed to fetch data from %s, error: %d",
				log_strdup(env_sensors[0]->dev_name), err);
		}
	}
	for (int i = 0; i < num_sensors; i++) {
   1d376:	f04f 0800 	mov.w	r8, #0
   1d37a:	4b58      	ldr	r3, [pc, #352]	; (1d4dc <env_sensors_poll_fn+0x17c>)
		if (!(IS_ENABLED(CONFIG_BME680))) {
			err = sensor_sample_fetch_chan(env_sensors[i]->dev,
				env_sensors[i]->channel);
			if (err) {
				LOG_ERR("Failed to fetch data from %s, error: %d",
   1d37c:	4a58      	ldr	r2, [pc, #352]	; (1d4e0 <env_sensors_poll_fn+0x180>)
   1d37e:	4c59      	ldr	r4, [pc, #356]	; (1d4e4 <env_sensors_poll_fn+0x184>)
   1d380:	1a9b      	subs	r3, r3, r2
   1d382:	f3c3 09c9 	ubfx	r9, r3, #3, #10
   1d386:	f107 0518 	add.w	r5, r7, #24
			err = sensor_sample_fetch_chan(env_sensors[i]->dev,
   1d38a:	6823      	ldr	r3, [r4, #0]
   1d38c:	6998      	ldr	r0, [r3, #24]
   1d38e:	8a19      	ldrh	r1, [r3, #16]
	return api->sample_fetch(dev, type);
   1d390:	6843      	ldr	r3, [r0, #4]
   1d392:	689b      	ldr	r3, [r3, #8]
   1d394:	4798      	blx	r3
			if (err) {
   1d396:	4606      	mov	r6, r0
   1d398:	b188      	cbz	r0, 1d3be <env_sensors_poll_fn+0x5e>
				LOG_ERR("Failed to fetch data from %s, error: %d",
   1d39a:	6823      	ldr	r3, [r4, #0]
   1d39c:	f02a 023f 	bic.w	r2, sl, #63	; 0x3f
   1d3a0:	f042 0201 	orr.w	r2, r2, #1
   1d3a4:	6958      	ldr	r0, [r3, #20]
   1d3a6:	f362 0a07 	bfi	sl, r2, #0, #8
   1d3aa:	f020 fdec 	bl	3df86 <log_strdup>
   1d3ae:	f369 1a8f 	bfi	sl, r9, #6, #10
   1d3b2:	4602      	mov	r2, r0
   1d3b4:	4633      	mov	r3, r6
   1d3b6:	494c      	ldr	r1, [pc, #304]	; (1d4e8 <env_sensors_poll_fn+0x188>)
   1d3b8:	4650      	mov	r0, sl
   1d3ba:	f020 fdd2 	bl	3df62 <log_string_sync>
					log_strdup(env_sensors[i]->dev_name), err);
			}
		}
		err = sensor_channel_get(env_sensors[i]->dev,
   1d3be:	6823      	ldr	r3, [r4, #0]
   1d3c0:	6998      	ldr	r0, [r3, #24]
   1d3c2:	8a19      	ldrh	r1, [r3, #16]
	return api->channel_get(dev, chan, val);
   1d3c4:	6843      	ldr	r3, [r0, #4]
   1d3c6:	462a      	mov	r2, r5
   1d3c8:	68db      	ldr	r3, [r3, #12]
   1d3ca:	4798      	blx	r3
			env_sensors[i]->channel, &data[i]);
		if (err) {
   1d3cc:	6823      	ldr	r3, [r4, #0]
   1d3ce:	4606      	mov	r6, r0
   1d3d0:	b358      	cbz	r0, 1d42a <env_sensors_poll_fn+0xca>
			LOG_ERR("Failed to fetch data from %s, error: %d",
   1d3d2:	f02b 023f 	bic.w	r2, fp, #63	; 0x3f
   1d3d6:	f042 0201 	orr.w	r2, r2, #1
   1d3da:	6958      	ldr	r0, [r3, #20]
   1d3dc:	f362 0b07 	bfi	fp, r2, #0, #8
   1d3e0:	f020 fdd1 	bl	3df86 <log_strdup>
   1d3e4:	f369 1b8f 	bfi	fp, r9, #6, #10
   1d3e8:	4602      	mov	r2, r0
   1d3ea:	4633      	mov	r3, r6
   1d3ec:	493e      	ldr	r1, [pc, #248]	; (1d4e8 <env_sensors_poll_fn+0x188>)
   1d3ee:	4658      	mov	r0, fp
   1d3f0:	f020 fdb7 	bl	3df62 <log_string_sync>
	for (int i = 0; i < num_sensors; i++) {
   1d3f4:	f108 0801 	add.w	r8, r8, #1
   1d3f8:	f1b8 0f03 	cmp.w	r8, #3
   1d3fc:	f104 0404 	add.w	r4, r4, #4
   1d400:	f105 0508 	add.w	r5, r5, #8
   1d404:	d1c1      	bne.n	1d38a <env_sensors_poll_fn+0x2a>
			env_sensors[i]->sensor.value = sensor_value_to_double(&data[i]);
			k_spin_unlock(&(env_sensors[i]->lock), key);
		}
	}

	if (data_ready_cb) {
   1d406:	4b39      	ldr	r3, [pc, #228]	; (1d4ec <env_sensors_poll_fn+0x18c>)
   1d408:	681b      	ldr	r3, [r3, #0]
   1d40a:	b103      	cbz	r3, 1d40e <env_sensors_poll_fn+0xae>
		data_ready_cb();
   1d40c:	4798      	blx	r3
	}

	submit_poll_work(backoff_enabled ?
   1d40e:	4b38      	ldr	r3, [pc, #224]	; (1d4f0 <env_sensors_poll_fn+0x190>)
   1d410:	781b      	ldrb	r3, [r3, #0]
   1d412:	2b00      	cmp	r3, #0
   1d414:	d158      	bne.n	1d4c8 <env_sensors_poll_fn+0x168>
   1d416:	687b      	ldr	r3, [r7, #4]
   1d418:	6818      	ldr	r0, [r3, #0]
   1d41a:	f005 faf5 	bl	22a08 <submit_poll_work>
   1d41e:	f8d7 d014 	ldr.w	sp, [r7, #20]
		CONFIG_ENVIRONMENT_DATA_BACKOFF_TIME : data_send_interval_s);
}
   1d422:	3734      	adds	r7, #52	; 0x34
   1d424:	46bd      	mov	sp, r7
   1d426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			k_spinlock_key_t key = k_spin_lock(&(env_sensors[i]->lock));
   1d42a:	f103 061c 	add.w	r6, r3, #28
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   1d42e:	f04f 0320 	mov.w	r3, #32
   1d432:	f3ef 8211 	mrs	r2, BASEPRI
   1d436:	f383 8811 	msr	BASEPRI, r3
   1d43a:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d43e:	4630      	mov	r0, r6
   1d440:	613a      	str	r2, [r7, #16]
   1d442:	f01c ffb1 	bl	3a3a8 <z_spin_lock_valid>
   1d446:	b968      	cbnz	r0, 1d464 <env_sensors_poll_fn+0x104>
   1d448:	234a      	movs	r3, #74	; 0x4a
   1d44a:	4a2a      	ldr	r2, [pc, #168]	; (1d4f4 <env_sensors_poll_fn+0x194>)
   1d44c:	492a      	ldr	r1, [pc, #168]	; (1d4f8 <env_sensors_poll_fn+0x198>)
   1d44e:	482b      	ldr	r0, [pc, #172]	; (1d4fc <env_sensors_poll_fn+0x19c>)
   1d450:	f020 fd23 	bl	3de9a <printk>
   1d454:	4631      	mov	r1, r6
   1d456:	482a      	ldr	r0, [pc, #168]	; (1d500 <env_sensors_poll_fn+0x1a0>)
   1d458:	f020 fd1f 	bl	3de9a <printk>
   1d45c:	214a      	movs	r1, #74	; 0x4a
   1d45e:	4825      	ldr	r0, [pc, #148]	; (1d4f4 <env_sensors_poll_fn+0x194>)
   1d460:	f020 fd6e 	bl	3df40 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   1d464:	4630      	mov	r0, r6
   1d466:	f01c ffbd 	bl	3a3e4 <z_spin_lock_set_owner>
	return (double)val->val1 + (double)val->val2 / 1000000;
   1d46a:	6868      	ldr	r0, [r5, #4]
   1d46c:	f7ff f93a 	bl	1c6e4 <__aeabi_i2d>
   1d470:	a317      	add	r3, pc, #92	; (adr r3, 1d4d0 <env_sensors_poll_fn+0x170>)
   1d472:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d476:	f7ff fac9 	bl	1ca0c <__aeabi_ddiv>
   1d47a:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1d47e:	6828      	ldr	r0, [r5, #0]
   1d480:	f7ff f930 	bl	1c6e4 <__aeabi_i2d>
   1d484:	4602      	mov	r2, r0
   1d486:	460b      	mov	r3, r1
   1d488:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1d48c:	f7fe ffde 	bl	1c44c <__adddf3>
			env_sensors[i]->sensor.value = sensor_value_to_double(&data[i]);
   1d490:	6826      	ldr	r6, [r4, #0]
   1d492:	e9c6 0102 	strd	r0, r1, [r6, #8]
			k_spin_unlock(&(env_sensors[i]->lock), key);
   1d496:	361c      	adds	r6, #28
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d498:	4630      	mov	r0, r6
   1d49a:	f01c ff93 	bl	3a3c4 <z_spin_unlock_valid>
   1d49e:	b968      	cbnz	r0, 1d4bc <env_sensors_poll_fn+0x15c>
   1d4a0:	235d      	movs	r3, #93	; 0x5d
   1d4a2:	4a14      	ldr	r2, [pc, #80]	; (1d4f4 <env_sensors_poll_fn+0x194>)
   1d4a4:	4917      	ldr	r1, [pc, #92]	; (1d504 <env_sensors_poll_fn+0x1a4>)
   1d4a6:	4815      	ldr	r0, [pc, #84]	; (1d4fc <env_sensors_poll_fn+0x19c>)
   1d4a8:	f020 fcf7 	bl	3de9a <printk>
   1d4ac:	4631      	mov	r1, r6
   1d4ae:	4816      	ldr	r0, [pc, #88]	; (1d508 <env_sensors_poll_fn+0x1a8>)
   1d4b0:	f020 fcf3 	bl	3de9a <printk>
   1d4b4:	215d      	movs	r1, #93	; 0x5d
   1d4b6:	480f      	ldr	r0, [pc, #60]	; (1d4f4 <env_sensors_poll_fn+0x194>)
   1d4b8:	f020 fd42 	bl	3df40 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1d4bc:	693b      	ldr	r3, [r7, #16]
   1d4be:	f383 8811 	msr	BASEPRI, r3
   1d4c2:	f3bf 8f6f 	isb	sy
   1d4c6:	e795      	b.n	1d3f4 <env_sensors_poll_fn+0x94>
	submit_poll_work(backoff_enabled ?
   1d4c8:	2014      	movs	r0, #20
   1d4ca:	e7a6      	b.n	1d41a <env_sensors_poll_fn+0xba>
   1d4cc:	f3af 8000 	nop.w
   1d4d0:	00000000 	.word	0x00000000
   1d4d4:	412e8480 	.word	0x412e8480
   1d4d8:	20032080 	.word	0x20032080
   1d4dc:	00041c9c 	.word	0x00041c9c
   1d4e0:	00041c2c 	.word	0x00041c2c
   1d4e4:	00041fc0 	.word	0x00041fc0
   1d4e8:	00043da0 	.word	0x00043da0
   1d4ec:	20023840 	.word	0x20023840
   1d4f0:	20029e87 	.word	0x20029e87
   1d4f4:	00043dc8 	.word	0x00043dc8
   1d4f8:	00043dee 	.word	0x00043dee
   1d4fc:	00043278 	.word	0x00043278
   1d500:	00043e03 	.word	0x00043e03
   1d504:	00043e1b 	.word	0x00043e1b
   1d508:	00043e32 	.word	0x00043e32
   1d50c:	00000000 	.word	0x00000000

0001d510 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
   1d510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d514:	4605      	mov	r5, r0
   1d516:	b093      	sub	sp, #76	; 0x4c
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d518:	460c      	mov	r4, r1
   1d51a:	b909      	cbnz	r1, 1d520 <parse_value+0x10>
    if (head != NULL)
    {
        cJSON_Delete(head);
    }

    return false;
   1d51c:	2000      	movs	r0, #0
   1d51e:	e024      	b.n	1d56a <parse_value+0x5a>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d520:	6808      	ldr	r0, [r1, #0]
   1d522:	2800      	cmp	r0, #0
   1d524:	d0fa      	beq.n	1d51c <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   1d526:	688b      	ldr	r3, [r1, #8]
   1d528:	6862      	ldr	r2, [r4, #4]
   1d52a:	1d19      	adds	r1, r3, #4
   1d52c:	4291      	cmp	r1, r2
   1d52e:	d80b      	bhi.n	1d548 <parse_value+0x38>
   1d530:	2204      	movs	r2, #4
   1d532:	49b1      	ldr	r1, [pc, #708]	; (1d7f8 <parse_value+0x2e8>)
   1d534:	4418      	add	r0, r3
   1d536:	f023 fa6a 	bl	40a0e <strncmp>
   1d53a:	b928      	cbnz	r0, 1d548 <parse_value+0x38>
        item->type = cJSON_NULL;
   1d53c:	2304      	movs	r3, #4
   1d53e:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
   1d540:	68a3      	ldr	r3, [r4, #8]
   1d542:	3304      	adds	r3, #4
    input_buffer->offset++;
   1d544:	60a3      	str	r3, [r4, #8]
   1d546:	e074      	b.n	1d632 <parse_value+0x122>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   1d548:	68a3      	ldr	r3, [r4, #8]
   1d54a:	6862      	ldr	r2, [r4, #4]
   1d54c:	1d59      	adds	r1, r3, #5
   1d54e:	4291      	cmp	r1, r2
   1d550:	d80e      	bhi.n	1d570 <parse_value+0x60>
   1d552:	6820      	ldr	r0, [r4, #0]
   1d554:	2205      	movs	r2, #5
   1d556:	49a9      	ldr	r1, [pc, #676]	; (1d7fc <parse_value+0x2ec>)
   1d558:	4418      	add	r0, r3
   1d55a:	f023 fa58 	bl	40a0e <strncmp>
   1d55e:	b938      	cbnz	r0, 1d570 <parse_value+0x60>
        item->type = cJSON_False;
   1d560:	2001      	movs	r0, #1
        input_buffer->offset += 5;
   1d562:	68a3      	ldr	r3, [r4, #8]
        item->type = cJSON_False;
   1d564:	60e8      	str	r0, [r5, #12]
        input_buffer->offset += 5;
   1d566:	3305      	adds	r3, #5
        input_buffer->offset += 4;
   1d568:	60a3      	str	r3, [r4, #8]
}
   1d56a:	b013      	add	sp, #76	; 0x4c
   1d56c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   1d570:	68a3      	ldr	r3, [r4, #8]
   1d572:	6862      	ldr	r2, [r4, #4]
   1d574:	1d19      	adds	r1, r3, #4
   1d576:	4291      	cmp	r1, r2
   1d578:	d80d      	bhi.n	1d596 <parse_value+0x86>
   1d57a:	6820      	ldr	r0, [r4, #0]
   1d57c:	2204      	movs	r2, #4
   1d57e:	49a0      	ldr	r1, [pc, #640]	; (1d800 <parse_value+0x2f0>)
   1d580:	4418      	add	r0, r3
   1d582:	f023 fa44 	bl	40a0e <strncmp>
   1d586:	b930      	cbnz	r0, 1d596 <parse_value+0x86>
        item->type = cJSON_True;
   1d588:	2302      	movs	r3, #2
        item->valueint = 1;
   1d58a:	2001      	movs	r0, #1
        item->type = cJSON_True;
   1d58c:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
   1d58e:	68a3      	ldr	r3, [r4, #8]
        item->valueint = 1;
   1d590:	6168      	str	r0, [r5, #20]
        input_buffer->offset += 4;
   1d592:	3304      	adds	r3, #4
   1d594:	e7e8      	b.n	1d568 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   1d596:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
   1d59a:	42ba      	cmp	r2, r7
   1d59c:	d2be      	bcs.n	1d51c <parse_value+0xc>
   1d59e:	6820      	ldr	r0, [r4, #0]
   1d5a0:	5c83      	ldrb	r3, [r0, r2]
   1d5a2:	2b22      	cmp	r3, #34	; 0x22
   1d5a4:	d104      	bne.n	1d5b0 <parse_value+0xa0>
        return parse_string(item, input_buffer);
   1d5a6:	4621      	mov	r1, r4
   1d5a8:	4628      	mov	r0, r5
   1d5aa:	f008 ff81 	bl	264b0 <parse_string>
   1d5ae:	e7dc      	b.n	1d56a <parse_value+0x5a>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   1d5b0:	2b2d      	cmp	r3, #45	; 0x2d
   1d5b2:	d003      	beq.n	1d5bc <parse_value+0xac>
   1d5b4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   1d5b8:	2e09      	cmp	r6, #9
   1d5ba:	d850      	bhi.n	1d65e <parse_value+0x14e>
    unsigned char *after_end = NULL;
   1d5bc:	2300      	movs	r3, #0
   1d5be:	9301      	str	r3, [sp, #4]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d5c0:	2800      	cmp	r0, #0
   1d5c2:	d0ab      	beq.n	1d51c <parse_value+0xc>
   1d5c4:	1abf      	subs	r7, r7, r2
   1d5c6:	ae02      	add	r6, sp, #8
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1d5c8:	429f      	cmp	r7, r3
   1d5ca:	eb02 0103 	add.w	r1, r2, r3
   1d5ce:	d00e      	beq.n	1d5ee <parse_value+0xde>
        switch (buffer_at_offset(input_buffer)[i])
   1d5d0:	5c41      	ldrb	r1, [r0, r1]
   1d5d2:	2939      	cmp	r1, #57	; 0x39
   1d5d4:	d82f      	bhi.n	1d636 <parse_value+0x126>
   1d5d6:	2930      	cmp	r1, #48	; 0x30
   1d5d8:	d205      	bcs.n	1d5e6 <parse_value+0xd6>
   1d5da:	292d      	cmp	r1, #45	; 0x2d
   1d5dc:	d003      	beq.n	1d5e6 <parse_value+0xd6>
   1d5de:	292e      	cmp	r1, #46	; 0x2e
   1d5e0:	d001      	beq.n	1d5e6 <parse_value+0xd6>
   1d5e2:	292b      	cmp	r1, #43	; 0x2b
   1d5e4:	d103      	bne.n	1d5ee <parse_value+0xde>
                number_c_string[i] = decimal_point;
   1d5e6:	54f1      	strb	r1, [r6, r3]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1d5e8:	3301      	adds	r3, #1
   1d5ea:	2b3f      	cmp	r3, #63	; 0x3f
   1d5ec:	d1ec      	bne.n	1d5c8 <parse_value+0xb8>
    number_c_string[i] = '\0';
   1d5ee:	aa12      	add	r2, sp, #72	; 0x48
   1d5f0:	4413      	add	r3, r2
   1d5f2:	2200      	movs	r2, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d5f4:	a901      	add	r1, sp, #4
   1d5f6:	4630      	mov	r0, r6
    number_c_string[i] = '\0';
   1d5f8:	f803 2c40 	strb.w	r2, [r3, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d5fc:	f01e fe4a 	bl	3c294 <strtod>
    if (number_c_string == after_end)
   1d600:	9f01      	ldr	r7, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d602:	ec59 8b10 	vmov	r8, r9, d0
    if (number_c_string == after_end)
   1d606:	42b7      	cmp	r7, r6
   1d608:	d088      	beq.n	1d51c <parse_value+0xc>
    if (number >= INT_MAX)
   1d60a:	a379      	add	r3, pc, #484	; (adr r3, 1d7f0 <parse_value+0x2e0>)
   1d60c:	e9d3 2300 	ldrd	r2, r3, [r3]
    item->valuedouble = number;
   1d610:	ed85 0b06 	vstr	d0, [r5, #24]
    if (number >= INT_MAX)
   1d614:	ee10 0a10 	vmov	r0, s0
   1d618:	4649      	mov	r1, r9
   1d61a:	f7ff fb53 	bl	1ccc4 <__aeabi_dcmpge>
   1d61e:	b170      	cbz	r0, 1d63e <parse_value+0x12e>
        item->valueint = INT_MAX;
   1d620:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
   1d624:	616b      	str	r3, [r5, #20]
    item->type = cJSON_Number;
   1d626:	2308      	movs	r3, #8
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1d628:	1bbe      	subs	r6, r7, r6
   1d62a:	68a7      	ldr	r7, [r4, #8]
    item->type = cJSON_Number;
   1d62c:	60eb      	str	r3, [r5, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1d62e:	443e      	add	r6, r7
   1d630:	60a6      	str	r6, [r4, #8]
    return true;
   1d632:	2001      	movs	r0, #1
   1d634:	e799      	b.n	1d56a <parse_value+0x5a>
        switch (buffer_at_offset(input_buffer)[i])
   1d636:	2945      	cmp	r1, #69	; 0x45
   1d638:	d0d5      	beq.n	1d5e6 <parse_value+0xd6>
   1d63a:	2965      	cmp	r1, #101	; 0x65
   1d63c:	e7d2      	b.n	1d5e4 <parse_value+0xd4>
    else if (number <= (double)INT_MIN)
   1d63e:	2200      	movs	r2, #0
   1d640:	4b70      	ldr	r3, [pc, #448]	; (1d804 <parse_value+0x2f4>)
   1d642:	4640      	mov	r0, r8
   1d644:	4649      	mov	r1, r9
   1d646:	f7ff fb33 	bl	1ccb0 <__aeabi_dcmple>
   1d64a:	b110      	cbz	r0, 1d652 <parse_value+0x142>
        item->valueint = INT_MIN;
   1d64c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1d650:	e7e8      	b.n	1d624 <parse_value+0x114>
        item->valueint = (int)number;
   1d652:	4640      	mov	r0, r8
   1d654:	4649      	mov	r1, r9
   1d656:	f7ff fb49 	bl	1ccec <__aeabi_d2iz>
   1d65a:	6168      	str	r0, [r5, #20]
   1d65c:	e7e3      	b.n	1d626 <parse_value+0x116>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   1d65e:	2b5b      	cmp	r3, #91	; 0x5b
   1d660:	d153      	bne.n	1d70a <parse_value+0x1fa>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1d662:	68e3      	ldr	r3, [r4, #12]
   1d664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1d668:	f4bf af58 	bcs.w	1d51c <parse_value+0xc>
    input_buffer->depth++;
   1d66c:	3301      	adds	r3, #1
   1d66e:	60e3      	str	r3, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
   1d670:	5c83      	ldrb	r3, [r0, r2]
   1d672:	2b5b      	cmp	r3, #91	; 0x5b
   1d674:	f47f af52 	bne.w	1d51c <parse_value+0xc>
    input_buffer->offset++;
   1d678:	3201      	adds	r2, #1
   1d67a:	60a2      	str	r2, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1d67c:	4620      	mov	r0, r4
   1d67e:	f021 fd90 	bl	3f1a2 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   1d682:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d686:	4293      	cmp	r3, r2
   1d688:	d262      	bcs.n	1d750 <parse_value+0x240>
   1d68a:	6822      	ldr	r2, [r4, #0]
   1d68c:	5cd2      	ldrb	r2, [r2, r3]
   1d68e:	2a5d      	cmp	r2, #93	; 0x5d
   1d690:	d109      	bne.n	1d6a6 <parse_value+0x196>
    cJSON *head = NULL; /* head of the linked list */
   1d692:	2600      	movs	r6, #0
    input_buffer->depth--;
   1d694:	68e3      	ldr	r3, [r4, #12]
   1d696:	3b01      	subs	r3, #1
   1d698:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Array;
   1d69a:	2320      	movs	r3, #32
    item->child = head;
   1d69c:	e9c5 6302 	strd	r6, r3, [r5, #8]
    input_buffer->offset++;
   1d6a0:	68a3      	ldr	r3, [r4, #8]
   1d6a2:	3301      	adds	r3, #1
   1d6a4:	e74e      	b.n	1d544 <parse_value+0x34>
    cJSON *current_item = NULL;
   1d6a6:	f04f 0800 	mov.w	r8, #0
    cJSON *head = NULL; /* head of the linked list */
   1d6aa:	4646      	mov	r6, r8
    input_buffer->offset--;
   1d6ac:	3b01      	subs	r3, #1
   1d6ae:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1d6b0:	6920      	ldr	r0, [r4, #16]
   1d6b2:	f021 fda8 	bl	3f206 <cJSON_New_Item.isra.1>
        if (new_item == NULL)
   1d6b6:	4607      	mov	r7, r0
   1d6b8:	b300      	cbz	r0, 1d6fc <parse_value+0x1ec>
        if (head == NULL)
   1d6ba:	b1ee      	cbz	r6, 1d6f8 <parse_value+0x1e8>
            current_item->next = new_item;
   1d6bc:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1d6c0:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1d6c4:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d6c6:	4620      	mov	r0, r4
        input_buffer->offset++;
   1d6c8:	3301      	adds	r3, #1
   1d6ca:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d6cc:	f021 fd69 	bl	3f1a2 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1d6d0:	4621      	mov	r1, r4
   1d6d2:	4638      	mov	r0, r7
   1d6d4:	f7ff ff1c 	bl	1d510 <parse_value>
   1d6d8:	b198      	cbz	r0, 1d702 <parse_value+0x1f2>
        buffer_skip_whitespace(input_buffer);
   1d6da:	4620      	mov	r0, r4
   1d6dc:	f021 fd61 	bl	3f1a2 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1d6e0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d6e4:	4293      	cmp	r3, r2
   1d6e6:	d20c      	bcs.n	1d702 <parse_value+0x1f2>
   1d6e8:	6822      	ldr	r2, [r4, #0]
   1d6ea:	46b8      	mov	r8, r7
   1d6ec:	5cd3      	ldrb	r3, [r2, r3]
   1d6ee:	2b2c      	cmp	r3, #44	; 0x2c
   1d6f0:	d0de      	beq.n	1d6b0 <parse_value+0x1a0>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   1d6f2:	2b5d      	cmp	r3, #93	; 0x5d
   1d6f4:	d105      	bne.n	1d702 <parse_value+0x1f2>
   1d6f6:	e7cd      	b.n	1d694 <parse_value+0x184>
        if (head == NULL)
   1d6f8:	4606      	mov	r6, r0
   1d6fa:	e7e3      	b.n	1d6c4 <parse_value+0x1b4>
    if (head != NULL)
   1d6fc:	2e00      	cmp	r6, #0
   1d6fe:	f43f af0d 	beq.w	1d51c <parse_value+0xc>
        cJSON_Delete(head);
   1d702:	4630      	mov	r0, r6
        cJSON_Delete(head);
   1d704:	f009 fade 	bl	26cc4 <cJSON_Delete>
   1d708:	e708      	b.n	1d51c <parse_value+0xc>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   1d70a:	2b7b      	cmp	r3, #123	; 0x7b
   1d70c:	f47f af06 	bne.w	1d51c <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1d710:	68e3      	ldr	r3, [r4, #12]
   1d712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1d716:	f4bf af01 	bcs.w	1d51c <parse_value+0xc>
    input_buffer->depth++;
   1d71a:	3301      	adds	r3, #1
   1d71c:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   1d71e:	5c83      	ldrb	r3, [r0, r2]
   1d720:	2b7b      	cmp	r3, #123	; 0x7b
   1d722:	f47f aefb 	bne.w	1d51c <parse_value+0xc>
    input_buffer->offset++;
   1d726:	3201      	adds	r2, #1
   1d728:	60a2      	str	r2, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1d72a:	4620      	mov	r0, r4
   1d72c:	f021 fd39 	bl	3f1a2 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   1d730:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d734:	4293      	cmp	r3, r2
   1d736:	d20b      	bcs.n	1d750 <parse_value+0x240>
   1d738:	6822      	ldr	r2, [r4, #0]
   1d73a:	5cd2      	ldrb	r2, [r2, r3]
   1d73c:	2a7d      	cmp	r2, #125	; 0x7d
   1d73e:	d10a      	bne.n	1d756 <parse_value+0x246>
    cJSON *head = NULL; /* linked list head */
   1d740:	2700      	movs	r7, #0
    input_buffer->depth--;
   1d742:	68e3      	ldr	r3, [r4, #12]
   1d744:	3b01      	subs	r3, #1
   1d746:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Object;
   1d748:	2340      	movs	r3, #64	; 0x40
    item->child = head;
   1d74a:	e9c5 7302 	strd	r7, r3, [r5, #8]
   1d74e:	e7a7      	b.n	1d6a0 <parse_value+0x190>
        input_buffer->offset--;
   1d750:	3b01      	subs	r3, #1
   1d752:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
   1d754:	e6e2      	b.n	1d51c <parse_value+0xc>
    cJSON *current_item = NULL;
   1d756:	f04f 0800 	mov.w	r8, #0
    cJSON *head = NULL; /* linked list head */
   1d75a:	4647      	mov	r7, r8
        current_item->valuestring = NULL;
   1d75c:	46c1      	mov	r9, r8
    input_buffer->offset--;
   1d75e:	3b01      	subs	r3, #1
   1d760:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1d762:	6920      	ldr	r0, [r4, #16]
   1d764:	f021 fd4f 	bl	3f206 <cJSON_New_Item.isra.1>
        if (new_item == NULL)
   1d768:	4606      	mov	r6, r0
   1d76a:	2800      	cmp	r0, #0
   1d76c:	d039      	beq.n	1d7e2 <parse_value+0x2d2>
        if (head == NULL)
   1d76e:	b3b7      	cbz	r7, 1d7de <parse_value+0x2ce>
            current_item->next = new_item;
   1d770:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1d774:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1d778:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d77a:	4620      	mov	r0, r4
        input_buffer->offset++;
   1d77c:	3301      	adds	r3, #1
   1d77e:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d780:	f021 fd0f 	bl	3f1a2 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
   1d784:	4621      	mov	r1, r4
   1d786:	4630      	mov	r0, r6
   1d788:	f008 fe92 	bl	264b0 <parse_string>
   1d78c:	b360      	cbz	r0, 1d7e8 <parse_value+0x2d8>
        buffer_skip_whitespace(input_buffer);
   1d78e:	4620      	mov	r0, r4
   1d790:	f021 fd07 	bl	3f1a2 <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
   1d794:	6933      	ldr	r3, [r6, #16]
        current_item->valuestring = NULL;
   1d796:	f8c6 9010 	str.w	r9, [r6, #16]
        current_item->string = current_item->valuestring;
   1d79a:	6233      	str	r3, [r6, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   1d79c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d7a0:	4293      	cmp	r3, r2
   1d7a2:	d221      	bcs.n	1d7e8 <parse_value+0x2d8>
   1d7a4:	6822      	ldr	r2, [r4, #0]
   1d7a6:	5cd2      	ldrb	r2, [r2, r3]
   1d7a8:	2a3a      	cmp	r2, #58	; 0x3a
   1d7aa:	d11d      	bne.n	1d7e8 <parse_value+0x2d8>
        input_buffer->offset++;
   1d7ac:	3301      	adds	r3, #1
   1d7ae:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d7b0:	4620      	mov	r0, r4
   1d7b2:	f021 fcf6 	bl	3f1a2 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1d7b6:	4621      	mov	r1, r4
   1d7b8:	4630      	mov	r0, r6
   1d7ba:	f7ff fea9 	bl	1d510 <parse_value>
   1d7be:	b198      	cbz	r0, 1d7e8 <parse_value+0x2d8>
        buffer_skip_whitespace(input_buffer);
   1d7c0:	4620      	mov	r0, r4
   1d7c2:	f021 fcee 	bl	3f1a2 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1d7c6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d7ca:	4293      	cmp	r3, r2
   1d7cc:	d20c      	bcs.n	1d7e8 <parse_value+0x2d8>
   1d7ce:	6822      	ldr	r2, [r4, #0]
   1d7d0:	46b0      	mov	r8, r6
   1d7d2:	5cd3      	ldrb	r3, [r2, r3]
   1d7d4:	2b2c      	cmp	r3, #44	; 0x2c
   1d7d6:	d0c4      	beq.n	1d762 <parse_value+0x252>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   1d7d8:	2b7d      	cmp	r3, #125	; 0x7d
   1d7da:	d105      	bne.n	1d7e8 <parse_value+0x2d8>
   1d7dc:	e7b1      	b.n	1d742 <parse_value+0x232>
        if (head == NULL)
   1d7de:	4607      	mov	r7, r0
   1d7e0:	e7ca      	b.n	1d778 <parse_value+0x268>
    if (head != NULL)
   1d7e2:	2f00      	cmp	r7, #0
   1d7e4:	f43f ae9a 	beq.w	1d51c <parse_value+0xc>
        cJSON_Delete(head);
   1d7e8:	4638      	mov	r0, r7
   1d7ea:	e78b      	b.n	1d704 <parse_value+0x1f4>
   1d7ec:	f3af 8000 	nop.w
   1d7f0:	ffc00000 	.word	0xffc00000
   1d7f4:	41dfffff 	.word	0x41dfffff
   1d7f8:	00045103 	.word	0x00045103
   1d7fc:	0004511a 	.word	0x0004511a
   1d800:	00045120 	.word	0x00045120
   1d804:	c1e00000 	.word	0xc1e00000

0001d808 <cJSON_CreateNumber>:
    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
    cJSON *item = cJSON_New_Item(&global_hooks);
   1d808:	4b17      	ldr	r3, [pc, #92]	; (1d868 <cJSON_CreateNumber+0x60>)
{
   1d80a:	b5d0      	push	{r4, r6, r7, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1d80c:	6818      	ldr	r0, [r3, #0]
{
   1d80e:	ec57 6b10 	vmov	r6, r7, d0
    cJSON *item = cJSON_New_Item(&global_hooks);
   1d812:	f021 fcf8 	bl	3f206 <cJSON_New_Item.isra.1>
    if(item)
   1d816:	4604      	mov	r4, r0
   1d818:	b170      	cbz	r0, 1d838 <cJSON_CreateNumber+0x30>
    {
        item->type = cJSON_Number;
   1d81a:	2308      	movs	r3, #8
        item->valuedouble = num;
   1d81c:	e9c0 6706 	strd	r6, r7, [r0, #24]
        item->type = cJSON_Number;
   1d820:	60c3      	str	r3, [r0, #12]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
   1d822:	4639      	mov	r1, r7
   1d824:	a30e      	add	r3, pc, #56	; (adr r3, 1d860 <cJSON_CreateNumber+0x58>)
   1d826:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d82a:	4630      	mov	r0, r6
   1d82c:	f7ff fa4a 	bl	1ccc4 <__aeabi_dcmpge>
   1d830:	b120      	cbz	r0, 1d83c <cJSON_CreateNumber+0x34>
        {
            item->valueint = INT_MAX;
   1d832:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        }
        else if (num <= (double)INT_MIN)
        {
            item->valueint = INT_MIN;
   1d836:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
   1d838:	4620      	mov	r0, r4
   1d83a:	bdd0      	pop	{r4, r6, r7, pc}
        else if (num <= (double)INT_MIN)
   1d83c:	2200      	movs	r2, #0
   1d83e:	4b0b      	ldr	r3, [pc, #44]	; (1d86c <cJSON_CreateNumber+0x64>)
   1d840:	4630      	mov	r0, r6
   1d842:	4639      	mov	r1, r7
   1d844:	f7ff fa34 	bl	1ccb0 <__aeabi_dcmple>
   1d848:	b110      	cbz	r0, 1d850 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
   1d84a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1d84e:	e7f2      	b.n	1d836 <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
   1d850:	4630      	mov	r0, r6
   1d852:	4639      	mov	r1, r7
   1d854:	f7ff fa4a 	bl	1ccec <__aeabi_d2iz>
   1d858:	6160      	str	r0, [r4, #20]
    return item;
   1d85a:	e7ed      	b.n	1d838 <cJSON_CreateNumber+0x30>
   1d85c:	f3af 8000 	nop.w
   1d860:	ffc00000 	.word	0xffc00000
   1d864:	41dfffff 	.word	0x41dfffff
   1d868:	200320bc 	.word	0x200320bc
   1d86c:	c1e00000 	.word	0xc1e00000

0001d870 <double_to_sensor_value>:
 * @param val Sensor value to convert.
 * @param sense_val Pointer to sensor_value to store the converted data.
 */
static void double_to_sensor_value(double val,
				struct sensor_value *sense_val)
{
   1d870:	b5d0      	push	{r4, r6, r7, lr}
   1d872:	4614      	mov	r4, r2
   1d874:	460f      	mov	r7, r1
   1d876:	4606      	mov	r6, r0
	sense_val->val1 = (int)val;
   1d878:	f7ff fa38 	bl	1ccec <__aeabi_d2iz>
   1d87c:	6020      	str	r0, [r4, #0]
	sense_val->val2 = (val - (int)val) * 1000000;
   1d87e:	f7fe ff31 	bl	1c6e4 <__aeabi_i2d>
   1d882:	4602      	mov	r2, r0
   1d884:	460b      	mov	r3, r1
   1d886:	4630      	mov	r0, r6
   1d888:	4639      	mov	r1, r7
   1d88a:	f7fe fddd 	bl	1c448 <__aeabi_dsub>
   1d88e:	a304      	add	r3, pc, #16	; (adr r3, 1d8a0 <double_to_sensor_value+0x30>)
   1d890:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d894:	f7fe ff90 	bl	1c7b8 <__aeabi_dmul>
   1d898:	f7ff fa28 	bl	1ccec <__aeabi_d2iz>
   1d89c:	6060      	str	r0, [r4, #4]
}
   1d89e:	bdd0      	pop	{r4, r6, r7, pc}
   1d8a0:	00000000 	.word	0x00000000
   1d8a4:	412e8480 	.word	0x412e8480

0001d8a8 <sensor_sim_sample_fetch>:
	return 0;
}

static int sensor_sim_sample_fetch(struct device *dev,
				enum sensor_channel chan)
{
   1d8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (chan) {
   1d8aa:	2910      	cmp	r1, #16
   1d8ac:	f200 80a6 	bhi.w	1d9fc <sensor_sim_sample_fetch+0x154>
   1d8b0:	e8df f001 	tbb	[pc, r1]
   1d8b4:	40302009 	.word	0x40302009
   1d8b8:	a4a4a4a4 	.word	0xa4a4a4a4
   1d8bc:	a4a4a4a4 	.word	0xa4a4a4a4
   1d8c0:	a49068a4 	.word	0xa49068a4
   1d8c4:	7d          	.byte	0x7d
   1d8c5:	00          	.byte	0x00
			accel_samples[0] = static_val_coeff * max_variation;
   1d8c6:	4c54      	ldr	r4, [pc, #336]	; (1da18 <sensor_sim_sample_fetch+0x170>)
			accel_samples[0] = generate_sine(base_accel_samples[0],
   1d8c8:	f011 f8cc 	bl	2ea64 <generate_sine.constprop.2>
			accel_samples[0] = static_val_coeff * max_variation;
   1d8cc:	6820      	ldr	r0, [r4, #0]
   1d8ce:	f7fe ff09 	bl	1c6e4 <__aeabi_i2d>
   1d8d2:	4b52      	ldr	r3, [pc, #328]	; (1da1c <sensor_sim_sample_fetch+0x174>)
   1d8d4:	2200      	movs	r2, #0
   1d8d6:	4606      	mov	r6, r0
   1d8d8:	460f      	mov	r7, r1
   1d8da:	f7fe ff6d 	bl	1c7b8 <__aeabi_dmul>
   1d8de:	4b50      	ldr	r3, [pc, #320]	; (1da20 <sensor_sim_sample_fetch+0x178>)
   1d8e0:	e9c3 0100 	strd	r0, r1, [r3]
		static_val_coeff *= -1.0;
   1d8e4:	4630      	mov	r0, r6
   1d8e6:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
   1d8ea:	f7ff f9ff 	bl	1ccec <__aeabi_d2iz>
   1d8ee:	6020      	str	r0, [r4, #0]
	return 0;
   1d8f0:	2000      	movs	r0, #0
	return sensor_sim_generate_data(chan);
}
   1d8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			accel_samples[1] = static_val_coeff * max_variation;
   1d8f4:	4c48      	ldr	r4, [pc, #288]	; (1da18 <sensor_sim_sample_fetch+0x170>)
			accel_samples[1] = generate_sine(base_accel_samples[1],
   1d8f6:	f011 f8b5 	bl	2ea64 <generate_sine.constprop.2>
			accel_samples[1] = static_val_coeff * max_variation;
   1d8fa:	6820      	ldr	r0, [r4, #0]
   1d8fc:	f7fe fef2 	bl	1c6e4 <__aeabi_i2d>
   1d900:	4b46      	ldr	r3, [pc, #280]	; (1da1c <sensor_sim_sample_fetch+0x174>)
   1d902:	2200      	movs	r2, #0
   1d904:	4606      	mov	r6, r0
   1d906:	460f      	mov	r7, r1
   1d908:	f7fe ff56 	bl	1c7b8 <__aeabi_dmul>
   1d90c:	4b44      	ldr	r3, [pc, #272]	; (1da20 <sensor_sim_sample_fetch+0x178>)
   1d90e:	e9c3 0102 	strd	r0, r1, [r3, #8]
		static_val_coeff *= -1.0;
   1d912:	e7e7      	b.n	1d8e4 <sensor_sim_sample_fetch+0x3c>
			accel_samples[2] = static_val_coeff * max_variation;
   1d914:	4c40      	ldr	r4, [pc, #256]	; (1da18 <sensor_sim_sample_fetch+0x170>)
			accel_samples[2] = generate_sine(base_accel_samples[2],
   1d916:	f011 f8a5 	bl	2ea64 <generate_sine.constprop.2>
			accel_samples[2] = static_val_coeff * max_variation;
   1d91a:	6820      	ldr	r0, [r4, #0]
   1d91c:	f7fe fee2 	bl	1c6e4 <__aeabi_i2d>
   1d920:	4b3e      	ldr	r3, [pc, #248]	; (1da1c <sensor_sim_sample_fetch+0x174>)
   1d922:	2200      	movs	r2, #0
   1d924:	4606      	mov	r6, r0
   1d926:	460f      	mov	r7, r1
   1d928:	f7fe ff46 	bl	1c7b8 <__aeabi_dmul>
   1d92c:	4b3c      	ldr	r3, [pc, #240]	; (1da20 <sensor_sim_sample_fetch+0x178>)
   1d92e:	e9c3 0104 	strd	r0, r1, [r3, #16]
   1d932:	e7d7      	b.n	1d8e4 <sensor_sim_sample_fetch+0x3c>
			accel_samples[0] = generate_sine(base_accel_samples[0],
   1d934:	f011 f896 	bl	2ea64 <generate_sine.constprop.2>
   1d938:	4c39      	ldr	r4, [pc, #228]	; (1da20 <sensor_sim_sample_fetch+0x178>)
   1d93a:	e9c4 0100 	strd	r0, r1, [r4]
	return z_impl_k_sleep(ms);
   1d93e:	2001      	movs	r0, #1
   1d940:	f01c fbf2 	bl	3a128 <z_impl_k_sleep>
			accel_samples[1] = generate_sine(base_accel_samples[1],
   1d944:	f011 f88e 	bl	2ea64 <generate_sine.constprop.2>
   1d948:	e9c4 0102 	strd	r0, r1, [r4, #8]
			accel_samples[0] = static_val_coeff * max_variation;
   1d94c:	4d32      	ldr	r5, [pc, #200]	; (1da18 <sensor_sim_sample_fetch+0x170>)
   1d94e:	2001      	movs	r0, #1
   1d950:	f01c fbea 	bl	3a128 <z_impl_k_sleep>
			accel_samples[2] = generate_sine(base_accel_samples[2],
   1d954:	f011 f886 	bl	2ea64 <generate_sine.constprop.2>
			accel_samples[0] = static_val_coeff * max_variation;
   1d958:	6828      	ldr	r0, [r5, #0]
   1d95a:	f7fe fec3 	bl	1c6e4 <__aeabi_i2d>
   1d95e:	2200      	movs	r2, #0
   1d960:	4b2e      	ldr	r3, [pc, #184]	; (1da1c <sensor_sim_sample_fetch+0x174>)
   1d962:	4606      	mov	r6, r0
   1d964:	460f      	mov	r7, r1
   1d966:	f7fe ff27 	bl	1c7b8 <__aeabi_dmul>
   1d96a:	e9c4 0100 	strd	r0, r1, [r4]
			accel_samples[1] = static_val_coeff * max_variation;
   1d96e:	e9c4 0102 	strd	r0, r1, [r4, #8]
			accel_samples[2] = static_val_coeff * max_variation;
   1d972:	e9c4 0104 	strd	r0, r1, [r4, #16]
		static_val_coeff *= -1.0;
   1d976:	4630      	mov	r0, r6
   1d978:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
   1d97c:	f7ff f9b6 	bl	1ccec <__aeabi_d2iz>
   1d980:	6028      	str	r0, [r5, #0]
	return retval;
   1d982:	e7b5      	b.n	1d8f0 <sensor_sim_sample_fetch+0x48>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1d984:	f01e fbdc 	bl	3c140 <rand>
   1d988:	f7fe feac 	bl	1c6e4 <__aeabi_i2d>
   1d98c:	a31e      	add	r3, pc, #120	; (adr r3, 1da08 <sensor_sim_sample_fetch+0x160>)
   1d98e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d992:	f7ff f83b 	bl	1ca0c <__aeabi_ddiv>
   1d996:	2200      	movs	r2, #0
   1d998:	4b22      	ldr	r3, [pc, #136]	; (1da24 <sensor_sim_sample_fetch+0x17c>)
   1d99a:	f7fe fd55 	bl	1c448 <__aeabi_dsub>
	temp_sample = base_temp_sample + generate_pseudo_random();
   1d99e:	4b22      	ldr	r3, [pc, #136]	; (1da28 <sensor_sim_sample_fetch+0x180>)
   1d9a0:	2200      	movs	r2, #0
   1d9a2:	f7fe fd53 	bl	1c44c <__adddf3>
   1d9a6:	4b21      	ldr	r3, [pc, #132]	; (1da2c <sensor_sim_sample_fetch+0x184>)
	pressure_sample = base_pressure_sample + generate_pseudo_random();
   1d9a8:	e9c3 0100 	strd	r0, r1, [r3]
   1d9ac:	e7a0      	b.n	1d8f0 <sensor_sim_sample_fetch+0x48>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1d9ae:	f01e fbc7 	bl	3c140 <rand>
   1d9b2:	f7fe fe97 	bl	1c6e4 <__aeabi_i2d>
   1d9b6:	a314      	add	r3, pc, #80	; (adr r3, 1da08 <sensor_sim_sample_fetch+0x160>)
   1d9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d9bc:	f7ff f826 	bl	1ca0c <__aeabi_ddiv>
   1d9c0:	2200      	movs	r2, #0
   1d9c2:	4b18      	ldr	r3, [pc, #96]	; (1da24 <sensor_sim_sample_fetch+0x17c>)
   1d9c4:	f7fe fd40 	bl	1c448 <__aeabi_dsub>
	humidity_sample = base_humidity_sample + generate_pseudo_random();
   1d9c8:	4b19      	ldr	r3, [pc, #100]	; (1da30 <sensor_sim_sample_fetch+0x188>)
   1d9ca:	2200      	movs	r2, #0
   1d9cc:	f7fe fd3e 	bl	1c44c <__adddf3>
   1d9d0:	4b18      	ldr	r3, [pc, #96]	; (1da34 <sensor_sim_sample_fetch+0x18c>)
   1d9d2:	e7e9      	b.n	1d9a8 <sensor_sim_sample_fetch+0x100>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1d9d4:	f01e fbb4 	bl	3c140 <rand>
   1d9d8:	f7fe fe84 	bl	1c6e4 <__aeabi_i2d>
   1d9dc:	a30a      	add	r3, pc, #40	; (adr r3, 1da08 <sensor_sim_sample_fetch+0x160>)
   1d9de:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d9e2:	f7ff f813 	bl	1ca0c <__aeabi_ddiv>
   1d9e6:	2200      	movs	r2, #0
   1d9e8:	4b0e      	ldr	r3, [pc, #56]	; (1da24 <sensor_sim_sample_fetch+0x17c>)
   1d9ea:	f7fe fd2d 	bl	1c448 <__aeabi_dsub>
	pressure_sample = base_pressure_sample + generate_pseudo_random();
   1d9ee:	a308      	add	r3, pc, #32	; (adr r3, 1da10 <sensor_sim_sample_fetch+0x168>)
   1d9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d9f4:	f7fe fd2a 	bl	1c44c <__adddf3>
   1d9f8:	4b0f      	ldr	r3, [pc, #60]	; (1da38 <sensor_sim_sample_fetch+0x190>)
   1d9fa:	e7d5      	b.n	1d9a8 <sensor_sim_sample_fetch+0x100>
		return -ENOTSUP;
   1d9fc:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return sensor_sim_generate_data(chan);
   1da00:	e777      	b.n	1d8f2 <sensor_sim_sample_fetch+0x4a>
   1da02:	bf00      	nop
   1da04:	f3af 8000 	nop.w
   1da08:	ffc00000 	.word	0xffc00000
   1da0c:	41cfffff 	.word	0x41cfffff
   1da10:	cccccccd 	.word	0xcccccccd
   1da14:	40588ccc 	.word	0x40588ccc
   1da18:	200320ec 	.word	0x200320ec
   1da1c:	40340000 	.word	0x40340000
   1da20:	20022980 	.word	0x20022980
   1da24:	3ff00000 	.word	0x3ff00000
   1da28:	40350000 	.word	0x40350000
   1da2c:	20022c90 	.word	0x20022c90
   1da30:	404a0000 	.word	0x404a0000
   1da34:	20022998 	.word	0x20022998
   1da38:	200229a0 	.word	0x200229a0
   1da3c:	00000000 	.word	0x00000000

0001da40 <sin>:
   1da40:	ec51 0b10 	vmov	r0, r1, d0
   1da44:	4a2c      	ldr	r2, [pc, #176]	; (1daf8 <sin+0xb8>)
   1da46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1da4a:	4293      	cmp	r3, r2
   1da4c:	b500      	push	{lr}
   1da4e:	b085      	sub	sp, #20
   1da50:	dd27      	ble.n	1daa2 <sin+0x62>
   1da52:	4a2a      	ldr	r2, [pc, #168]	; (1dafc <sin+0xbc>)
   1da54:	4293      	cmp	r3, r2
   1da56:	dd09      	ble.n	1da6c <sin+0x2c>
   1da58:	ee10 2a10 	vmov	r2, s0
   1da5c:	460b      	mov	r3, r1
   1da5e:	f7fe fcf3 	bl	1c448 <__aeabi_dsub>
   1da62:	ec41 0b10 	vmov	d0, r0, r1
   1da66:	b005      	add	sp, #20
   1da68:	f85d fb04 	ldr.w	pc, [sp], #4
   1da6c:	4668      	mov	r0, sp
   1da6e:	f000 f847 	bl	1db00 <__ieee754_rem_pio2>
   1da72:	f000 0003 	and.w	r0, r0, #3
   1da76:	2801      	cmp	r0, #1
   1da78:	d01f      	beq.n	1daba <sin+0x7a>
   1da7a:	2802      	cmp	r0, #2
   1da7c:	d030      	beq.n	1dae0 <sin+0xa0>
   1da7e:	b328      	cbz	r0, 1dacc <sin+0x8c>
   1da80:	ed9d 1b02 	vldr	d1, [sp, #8]
   1da84:	ed9d 0b00 	vldr	d0, [sp]
   1da88:	f000 fa56 	bl	1df38 <__kernel_cos>
   1da8c:	ee10 0a10 	vmov	r0, s0
   1da90:	ec53 2b10 	vmov	r2, r3, d0
   1da94:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   1da98:	ec41 0b10 	vmov	d0, r0, r1
   1da9c:	b005      	add	sp, #20
   1da9e:	f85d fb04 	ldr.w	pc, [sp], #4
   1daa2:	2000      	movs	r0, #0
   1daa4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 1daf0 <sin+0xb0>
   1daa8:	f000 ff9e 	bl	1e9e8 <__kernel_sin>
   1daac:	ec51 0b10 	vmov	r0, r1, d0
   1dab0:	ec41 0b10 	vmov	d0, r0, r1
   1dab4:	b005      	add	sp, #20
   1dab6:	f85d fb04 	ldr.w	pc, [sp], #4
   1daba:	ed9d 1b02 	vldr	d1, [sp, #8]
   1dabe:	ed9d 0b00 	vldr	d0, [sp]
   1dac2:	f000 fa39 	bl	1df38 <__kernel_cos>
   1dac6:	ec51 0b10 	vmov	r0, r1, d0
   1daca:	e7ca      	b.n	1da62 <sin+0x22>
   1dacc:	2001      	movs	r0, #1
   1dace:	ed9d 1b02 	vldr	d1, [sp, #8]
   1dad2:	ed9d 0b00 	vldr	d0, [sp]
   1dad6:	f000 ff87 	bl	1e9e8 <__kernel_sin>
   1dada:	ec51 0b10 	vmov	r0, r1, d0
   1dade:	e7c0      	b.n	1da62 <sin+0x22>
   1dae0:	2001      	movs	r0, #1
   1dae2:	ed9d 1b02 	vldr	d1, [sp, #8]
   1dae6:	ed9d 0b00 	vldr	d0, [sp]
   1daea:	f000 ff7d 	bl	1e9e8 <__kernel_sin>
   1daee:	e7cd      	b.n	1da8c <sin+0x4c>
	...
   1daf8:	3fe921fb 	.word	0x3fe921fb
   1dafc:	7fefffff 	.word	0x7fefffff

0001db00 <__ieee754_rem_pio2>:
   1db00:	ec53 2b10 	vmov	r2, r3, d0
   1db04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db08:	4999      	ldr	r1, [pc, #612]	; (1dd70 <__ieee754_rem_pio2+0x270>)
   1db0a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   1db0e:	b08f      	sub	sp, #60	; 0x3c
   1db10:	428d      	cmp	r5, r1
   1db12:	f340 8088 	ble.w	1dc26 <__ieee754_rem_pio2+0x126>
   1db16:	4997      	ldr	r1, [pc, #604]	; (1dd74 <__ieee754_rem_pio2+0x274>)
   1db18:	461e      	mov	r6, r3
   1db1a:	4604      	mov	r4, r0
   1db1c:	428d      	cmp	r5, r1
   1db1e:	dc29      	bgt.n	1db74 <__ieee754_rem_pio2+0x74>
   1db20:	2e00      	cmp	r6, #0
   1db22:	4619      	mov	r1, r3
   1db24:	ee10 0a10 	vmov	r0, s0
   1db28:	a387      	add	r3, pc, #540	; (adr r3, 1dd48 <__ieee754_rem_pio2+0x248>)
   1db2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1db2e:	f340 81ae 	ble.w	1de8e <__ieee754_rem_pio2+0x38e>
   1db32:	f7fe fc89 	bl	1c448 <__aeabi_dsub>
   1db36:	4b90      	ldr	r3, [pc, #576]	; (1dd78 <__ieee754_rem_pio2+0x278>)
   1db38:	4680      	mov	r8, r0
   1db3a:	4689      	mov	r9, r1
   1db3c:	429d      	cmp	r5, r3
   1db3e:	f000 8088 	beq.w	1dc52 <__ieee754_rem_pio2+0x152>
   1db42:	2701      	movs	r7, #1
   1db44:	a382      	add	r3, pc, #520	; (adr r3, 1dd50 <__ieee754_rem_pio2+0x250>)
   1db46:	e9d3 2300 	ldrd	r2, r3, [r3]
   1db4a:	f7fe fc7d 	bl	1c448 <__aeabi_dsub>
   1db4e:	4602      	mov	r2, r0
   1db50:	460b      	mov	r3, r1
   1db52:	4640      	mov	r0, r8
   1db54:	4649      	mov	r1, r9
   1db56:	e9c4 2300 	strd	r2, r3, [r4]
   1db5a:	f7fe fc75 	bl	1c448 <__aeabi_dsub>
   1db5e:	a37c      	add	r3, pc, #496	; (adr r3, 1dd50 <__ieee754_rem_pio2+0x250>)
   1db60:	e9d3 2300 	ldrd	r2, r3, [r3]
   1db64:	f7fe fc70 	bl	1c448 <__aeabi_dsub>
   1db68:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1db6c:	4638      	mov	r0, r7
   1db6e:	b00f      	add	sp, #60	; 0x3c
   1db70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db74:	4981      	ldr	r1, [pc, #516]	; (1dd7c <__ieee754_rem_pio2+0x27c>)
   1db76:	428d      	cmp	r5, r1
   1db78:	f340 808b 	ble.w	1dc92 <__ieee754_rem_pio2+0x192>
   1db7c:	4980      	ldr	r1, [pc, #512]	; (1dd80 <__ieee754_rem_pio2+0x280>)
   1db7e:	428d      	cmp	r5, r1
   1db80:	dc5c      	bgt.n	1dc3c <__ieee754_rem_pio2+0x13c>
   1db82:	152f      	asrs	r7, r5, #20
   1db84:	ee10 0a10 	vmov	r0, s0
   1db88:	ee10 8a10 	vmov	r8, s0
   1db8c:	f2a7 4716 	subw	r7, r7, #1046	; 0x416
   1db90:	eba5 5907 	sub.w	r9, r5, r7, lsl #20
   1db94:	4649      	mov	r1, r9
   1db96:	f7ff f8a9 	bl	1ccec <__aeabi_d2iz>
   1db9a:	f7fe fda3 	bl	1c6e4 <__aeabi_i2d>
   1db9e:	4682      	mov	sl, r0
   1dba0:	468b      	mov	fp, r1
   1dba2:	4640      	mov	r0, r8
   1dba4:	4649      	mov	r1, r9
   1dba6:	4652      	mov	r2, sl
   1dba8:	465b      	mov	r3, fp
   1dbaa:	e9cd ab08 	strd	sl, fp, [sp, #32]
   1dbae:	f7fe fc4b 	bl	1c448 <__aeabi_dsub>
   1dbb2:	2200      	movs	r2, #0
   1dbb4:	4b73      	ldr	r3, [pc, #460]	; (1dd84 <__ieee754_rem_pio2+0x284>)
   1dbb6:	f7fe fdff 	bl	1c7b8 <__aeabi_dmul>
   1dbba:	4689      	mov	r9, r1
   1dbbc:	4680      	mov	r8, r0
   1dbbe:	f7ff f895 	bl	1ccec <__aeabi_d2iz>
   1dbc2:	4605      	mov	r5, r0
   1dbc4:	f7fe fd8e 	bl	1c6e4 <__aeabi_i2d>
   1dbc8:	4602      	mov	r2, r0
   1dbca:	460b      	mov	r3, r1
   1dbcc:	4640      	mov	r0, r8
   1dbce:	4649      	mov	r1, r9
   1dbd0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   1dbd4:	f7fe fc38 	bl	1c448 <__aeabi_dsub>
   1dbd8:	2200      	movs	r2, #0
   1dbda:	4b6a      	ldr	r3, [pc, #424]	; (1dd84 <__ieee754_rem_pio2+0x284>)
   1dbdc:	f7fe fdec 	bl	1c7b8 <__aeabi_dmul>
   1dbe0:	2200      	movs	r2, #0
   1dbe2:	2300      	movs	r3, #0
   1dbe4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1dbe8:	f7ff f84e 	bl	1cc88 <__aeabi_dcmpeq>
   1dbec:	2800      	cmp	r0, #0
   1dbee:	f000 814c 	beq.w	1de8a <__ieee754_rem_pio2+0x38a>
   1dbf2:	2d00      	cmp	r5, #0
   1dbf4:	bf0c      	ite	eq
   1dbf6:	2301      	moveq	r3, #1
   1dbf8:	2302      	movne	r3, #2
   1dbfa:	4963      	ldr	r1, [pc, #396]	; (1dd88 <__ieee754_rem_pio2+0x288>)
   1dbfc:	2002      	movs	r0, #2
   1dbfe:	463a      	mov	r2, r7
   1dc00:	9101      	str	r1, [sp, #4]
   1dc02:	4621      	mov	r1, r4
   1dc04:	9000      	str	r0, [sp, #0]
   1dc06:	a808      	add	r0, sp, #32
   1dc08:	f000 fada 	bl	1e1c0 <__kernel_rem_pio2>
   1dc0c:	2e00      	cmp	r6, #0
   1dc0e:	4607      	mov	r7, r0
   1dc10:	daac      	bge.n	1db6c <__ieee754_rem_pio2+0x6c>
   1dc12:	6862      	ldr	r2, [r4, #4]
   1dc14:	4247      	negs	r7, r0
   1dc16:	68e3      	ldr	r3, [r4, #12]
   1dc18:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   1dc1c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1dc20:	6062      	str	r2, [r4, #4]
   1dc22:	60e3      	str	r3, [r4, #12]
   1dc24:	e7a2      	b.n	1db6c <__ieee754_rem_pio2+0x6c>
   1dc26:	2700      	movs	r7, #0
   1dc28:	2400      	movs	r4, #0
   1dc2a:	2500      	movs	r5, #0
   1dc2c:	ed80 0b00 	vstr	d0, [r0]
   1dc30:	e9c0 4502 	strd	r4, r5, [r0, #8]
   1dc34:	4638      	mov	r0, r7
   1dc36:	b00f      	add	sp, #60	; 0x3c
   1dc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc3c:	ee10 0a10 	vmov	r0, s0
   1dc40:	4619      	mov	r1, r3
   1dc42:	f7fe fc01 	bl	1c448 <__aeabi_dsub>
   1dc46:	2700      	movs	r7, #0
   1dc48:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1dc4c:	e9c4 0100 	strd	r0, r1, [r4]
   1dc50:	e78c      	b.n	1db6c <__ieee754_rem_pio2+0x6c>
   1dc52:	a341      	add	r3, pc, #260	; (adr r3, 1dd58 <__ieee754_rem_pio2+0x258>)
   1dc54:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dc58:	f7fe fbf6 	bl	1c448 <__aeabi_dsub>
   1dc5c:	4606      	mov	r6, r0
   1dc5e:	460f      	mov	r7, r1
   1dc60:	a33f      	add	r3, pc, #252	; (adr r3, 1dd60 <__ieee754_rem_pio2+0x260>)
   1dc62:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dc66:	f7fe fbef 	bl	1c448 <__aeabi_dsub>
   1dc6a:	4602      	mov	r2, r0
   1dc6c:	460b      	mov	r3, r1
   1dc6e:	4630      	mov	r0, r6
   1dc70:	4639      	mov	r1, r7
   1dc72:	2701      	movs	r7, #1
   1dc74:	e9c4 2300 	strd	r2, r3, [r4]
   1dc78:	f7fe fbe6 	bl	1c448 <__aeabi_dsub>
   1dc7c:	a338      	add	r3, pc, #224	; (adr r3, 1dd60 <__ieee754_rem_pio2+0x260>)
   1dc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dc82:	f7fe fbe1 	bl	1c448 <__aeabi_dsub>
   1dc86:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1dc8a:	4638      	mov	r0, r7
   1dc8c:	b00f      	add	sp, #60	; 0x3c
   1dc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc92:	f01d fcd9 	bl	3b648 <fabs>
   1dc96:	ee10 0a10 	vmov	r0, s0
   1dc9a:	ec59 8b10 	vmov	r8, r9, d0
   1dc9e:	a332      	add	r3, pc, #200	; (adr r3, 1dd68 <__ieee754_rem_pio2+0x268>)
   1dca0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dca4:	4649      	mov	r1, r9
   1dca6:	f7fe fd87 	bl	1c7b8 <__aeabi_dmul>
   1dcaa:	2200      	movs	r2, #0
   1dcac:	4b37      	ldr	r3, [pc, #220]	; (1dd8c <__ieee754_rem_pio2+0x28c>)
   1dcae:	f7fe fbcd 	bl	1c44c <__adddf3>
   1dcb2:	f7ff f81b 	bl	1ccec <__aeabi_d2iz>
   1dcb6:	4607      	mov	r7, r0
   1dcb8:	f7fe fd14 	bl	1c6e4 <__aeabi_i2d>
   1dcbc:	a322      	add	r3, pc, #136	; (adr r3, 1dd48 <__ieee754_rem_pio2+0x248>)
   1dcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dcc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1dcc6:	f7fe fd77 	bl	1c7b8 <__aeabi_dmul>
   1dcca:	4602      	mov	r2, r0
   1dccc:	460b      	mov	r3, r1
   1dcce:	4640      	mov	r0, r8
   1dcd0:	4649      	mov	r1, r9
   1dcd2:	f7fe fbb9 	bl	1c448 <__aeabi_dsub>
   1dcd6:	4682      	mov	sl, r0
   1dcd8:	468b      	mov	fp, r1
   1dcda:	a31d      	add	r3, pc, #116	; (adr r3, 1dd50 <__ieee754_rem_pio2+0x250>)
   1dcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dce0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1dce4:	f7fe fd68 	bl	1c7b8 <__aeabi_dmul>
   1dce8:	2f1f      	cmp	r7, #31
   1dcea:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1dcee:	dc51      	bgt.n	1dd94 <__ieee754_rem_pio2+0x294>
   1dcf0:	4602      	mov	r2, r0
   1dcf2:	460b      	mov	r3, r1
   1dcf4:	4650      	mov	r0, sl
   1dcf6:	4659      	mov	r1, fp
   1dcf8:	f7fe fba6 	bl	1c448 <__aeabi_dsub>
   1dcfc:	4b24      	ldr	r3, [pc, #144]	; (1dd90 <__ieee754_rem_pio2+0x290>)
   1dcfe:	1e7a      	subs	r2, r7, #1
   1dd00:	4680      	mov	r8, r0
   1dd02:	4689      	mov	r9, r1
   1dd04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1dd08:	42ab      	cmp	r3, r5
   1dd0a:	d04b      	beq.n	1dda4 <__ieee754_rem_pio2+0x2a4>
   1dd0c:	4642      	mov	r2, r8
   1dd0e:	464b      	mov	r3, r9
   1dd10:	4650      	mov	r0, sl
   1dd12:	4659      	mov	r1, fp
   1dd14:	e9c4 8900 	strd	r8, r9, [r4]
   1dd18:	f7fe fb96 	bl	1c448 <__aeabi_dsub>
   1dd1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1dd20:	f7fe fb92 	bl	1c448 <__aeabi_dsub>
   1dd24:	2e00      	cmp	r6, #0
   1dd26:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1dd2a:	f6bf af1f 	bge.w	1db6c <__ieee754_rem_pio2+0x6c>
   1dd2e:	f109 4500 	add.w	r5, r9, #2147483648	; 0x80000000
   1dd32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1dd36:	427f      	negs	r7, r7
   1dd38:	e9c4 8500 	strd	r8, r5, [r4]
   1dd3c:	e9c4 0302 	strd	r0, r3, [r4, #8]
   1dd40:	e714      	b.n	1db6c <__ieee754_rem_pio2+0x6c>
   1dd42:	bf00      	nop
   1dd44:	f3af 8000 	nop.w
   1dd48:	54400000 	.word	0x54400000
   1dd4c:	3ff921fb 	.word	0x3ff921fb
   1dd50:	1a626331 	.word	0x1a626331
   1dd54:	3dd0b461 	.word	0x3dd0b461
   1dd58:	1a600000 	.word	0x1a600000
   1dd5c:	3dd0b461 	.word	0x3dd0b461
   1dd60:	2e037073 	.word	0x2e037073
   1dd64:	3ba3198a 	.word	0x3ba3198a
   1dd68:	6dc9c883 	.word	0x6dc9c883
   1dd6c:	3fe45f30 	.word	0x3fe45f30
   1dd70:	3fe921fb 	.word	0x3fe921fb
   1dd74:	4002d97b 	.word	0x4002d97b
   1dd78:	3ff921fb 	.word	0x3ff921fb
   1dd7c:	413921fb 	.word	0x413921fb
   1dd80:	7fefffff 	.word	0x7fefffff
   1dd84:	41700000 	.word	0x41700000
   1dd88:	00042a40 	.word	0x00042a40
   1dd8c:	3fe00000 	.word	0x3fe00000
   1dd90:	000429c0 	.word	0x000429c0
   1dd94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1dd98:	4650      	mov	r0, sl
   1dd9a:	4659      	mov	r1, fp
   1dd9c:	f7fe fb54 	bl	1c448 <__aeabi_dsub>
   1dda0:	4680      	mov	r8, r0
   1dda2:	4689      	mov	r9, r1
   1dda4:	152d      	asrs	r5, r5, #20
   1dda6:	f3c9 530a 	ubfx	r3, r9, #20, #11
   1ddaa:	1aeb      	subs	r3, r5, r3
   1ddac:	2b10      	cmp	r3, #16
   1ddae:	ddad      	ble.n	1dd0c <__ieee754_rem_pio2+0x20c>
   1ddb0:	a357      	add	r3, pc, #348	; (adr r3, 1df10 <__ieee754_rem_pio2+0x410>)
   1ddb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ddb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ddba:	f7fe fcfd 	bl	1c7b8 <__aeabi_dmul>
   1ddbe:	4680      	mov	r8, r0
   1ddc0:	4689      	mov	r9, r1
   1ddc2:	4602      	mov	r2, r0
   1ddc4:	460b      	mov	r3, r1
   1ddc6:	4650      	mov	r0, sl
   1ddc8:	4659      	mov	r1, fp
   1ddca:	f7fe fb3d 	bl	1c448 <__aeabi_dsub>
   1ddce:	4602      	mov	r2, r0
   1ddd0:	460b      	mov	r3, r1
   1ddd2:	4650      	mov	r0, sl
   1ddd4:	4659      	mov	r1, fp
   1ddd6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ddda:	f7fe fb35 	bl	1c448 <__aeabi_dsub>
   1ddde:	4642      	mov	r2, r8
   1dde0:	464b      	mov	r3, r9
   1dde2:	f7fe fb31 	bl	1c448 <__aeabi_dsub>
   1dde6:	4680      	mov	r8, r0
   1dde8:	4689      	mov	r9, r1
   1ddea:	a34b      	add	r3, pc, #300	; (adr r3, 1df18 <__ieee754_rem_pio2+0x418>)
   1ddec:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ddf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ddf4:	f7fe fce0 	bl	1c7b8 <__aeabi_dmul>
   1ddf8:	4642      	mov	r2, r8
   1ddfa:	464b      	mov	r3, r9
   1ddfc:	f7fe fb24 	bl	1c448 <__aeabi_dsub>
   1de00:	460b      	mov	r3, r1
   1de02:	4602      	mov	r2, r0
   1de04:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   1de08:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1de0c:	4650      	mov	r0, sl
   1de0e:	4659      	mov	r1, fp
   1de10:	f7fe fb1a 	bl	1c448 <__aeabi_dsub>
   1de14:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1de18:	4680      	mov	r8, r0
   1de1a:	4689      	mov	r9, r1
   1de1c:	1aed      	subs	r5, r5, r3
   1de1e:	2d31      	cmp	r5, #49	; 0x31
   1de20:	f77f af74 	ble.w	1dd0c <__ieee754_rem_pio2+0x20c>
   1de24:	a33f      	add	r3, pc, #252	; (adr r3, 1df24 <__ieee754_rem_pio2+0x424>)
   1de26:	e9d3 2300 	ldrd	r2, r3, [r3]
   1de2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1de2e:	f7fe fcc3 	bl	1c7b8 <__aeabi_dmul>
   1de32:	4680      	mov	r8, r0
   1de34:	4689      	mov	r9, r1
   1de36:	4602      	mov	r2, r0
   1de38:	460b      	mov	r3, r1
   1de3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1de3e:	f7fe fb03 	bl	1c448 <__aeabi_dsub>
   1de42:	4602      	mov	r2, r0
   1de44:	460b      	mov	r3, r1
   1de46:	4682      	mov	sl, r0
   1de48:	468b      	mov	fp, r1
   1de4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1de4e:	f7fe fafb 	bl	1c448 <__aeabi_dsub>
   1de52:	4642      	mov	r2, r8
   1de54:	464b      	mov	r3, r9
   1de56:	f7fe faf7 	bl	1c448 <__aeabi_dsub>
   1de5a:	4680      	mov	r8, r0
   1de5c:	4689      	mov	r9, r1
   1de5e:	a333      	add	r3, pc, #204	; (adr r3, 1df2c <__ieee754_rem_pio2+0x42c>)
   1de60:	e9d3 2300 	ldrd	r2, r3, [r3]
   1de64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1de68:	f7fe fca6 	bl	1c7b8 <__aeabi_dmul>
   1de6c:	4642      	mov	r2, r8
   1de6e:	464b      	mov	r3, r9
   1de70:	f7fe faea 	bl	1c448 <__aeabi_dsub>
   1de74:	4602      	mov	r2, r0
   1de76:	460b      	mov	r3, r1
   1de78:	4650      	mov	r0, sl
   1de7a:	4659      	mov	r1, fp
   1de7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1de80:	f7fe fae2 	bl	1c448 <__aeabi_dsub>
   1de84:	4680      	mov	r8, r0
   1de86:	4689      	mov	r9, r1
   1de88:	e740      	b.n	1dd0c <__ieee754_rem_pio2+0x20c>
   1de8a:	2303      	movs	r3, #3
   1de8c:	e6b5      	b.n	1dbfa <__ieee754_rem_pio2+0xfa>
   1de8e:	f7fe fadd 	bl	1c44c <__adddf3>
   1de92:	4b23      	ldr	r3, [pc, #140]	; (1df20 <__ieee754_rem_pio2+0x420>)
   1de94:	4680      	mov	r8, r0
   1de96:	4689      	mov	r9, r1
   1de98:	429d      	cmp	r5, r3
   1de9a:	d016      	beq.n	1deca <__ieee754_rem_pio2+0x3ca>
   1de9c:	f04f 37ff 	mov.w	r7, #4294967295
   1dea0:	a319      	add	r3, pc, #100	; (adr r3, 1df08 <__ieee754_rem_pio2+0x408>)
   1dea2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dea6:	f7fe fad1 	bl	1c44c <__adddf3>
   1deaa:	4602      	mov	r2, r0
   1deac:	460b      	mov	r3, r1
   1deae:	4640      	mov	r0, r8
   1deb0:	4649      	mov	r1, r9
   1deb2:	e9c4 2300 	strd	r2, r3, [r4]
   1deb6:	f7fe fac7 	bl	1c448 <__aeabi_dsub>
   1deba:	a313      	add	r3, pc, #76	; (adr r3, 1df08 <__ieee754_rem_pio2+0x408>)
   1debc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dec0:	f7fe fac4 	bl	1c44c <__adddf3>
   1dec4:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1dec8:	e650      	b.n	1db6c <__ieee754_rem_pio2+0x6c>
   1deca:	a311      	add	r3, pc, #68	; (adr r3, 1df10 <__ieee754_rem_pio2+0x410>)
   1decc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ded0:	f7fe fabc 	bl	1c44c <__adddf3>
   1ded4:	460f      	mov	r7, r1
   1ded6:	4606      	mov	r6, r0
   1ded8:	a30f      	add	r3, pc, #60	; (adr r3, 1df18 <__ieee754_rem_pio2+0x418>)
   1deda:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dede:	f7fe fab5 	bl	1c44c <__adddf3>
   1dee2:	4602      	mov	r2, r0
   1dee4:	460b      	mov	r3, r1
   1dee6:	4630      	mov	r0, r6
   1dee8:	4639      	mov	r1, r7
   1deea:	f04f 37ff 	mov.w	r7, #4294967295
   1deee:	e9c4 2300 	strd	r2, r3, [r4]
   1def2:	f7fe faa9 	bl	1c448 <__aeabi_dsub>
   1def6:	a308      	add	r3, pc, #32	; (adr r3, 1df18 <__ieee754_rem_pio2+0x418>)
   1def8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1defc:	f7fe faa6 	bl	1c44c <__adddf3>
   1df00:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1df04:	e632      	b.n	1db6c <__ieee754_rem_pio2+0x6c>
   1df06:	bf00      	nop
   1df08:	1a626331 	.word	0x1a626331
   1df0c:	3dd0b461 	.word	0x3dd0b461
   1df10:	1a600000 	.word	0x1a600000
   1df14:	3dd0b461 	.word	0x3dd0b461
   1df18:	2e037073 	.word	0x2e037073
   1df1c:	3ba3198a 	.word	0x3ba3198a
   1df20:	3ff921fb 	.word	0x3ff921fb
   1df24:	2e000000 	.word	0x2e000000
   1df28:	3ba3198a 	.word	0x3ba3198a
   1df2c:	252049c1 	.word	0x252049c1
   1df30:	397b839a 	.word	0x397b839a
   1df34:	00000000 	.word	0x00000000

0001df38 <__kernel_cos>:
   1df38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df3c:	ec57 6b10 	vmov	r6, r7, d0
   1df40:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   1df44:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   1df48:	ed2d 8b02 	vpush	{d8}
   1df4c:	eeb0 8a41 	vmov.f32	s16, s2
   1df50:	eef0 8a61 	vmov.f32	s17, s3
   1df54:	b083      	sub	sp, #12
   1df56:	da72      	bge.n	1e03e <__kernel_cos+0x106>
   1df58:	ee10 0a10 	vmov	r0, s0
   1df5c:	4639      	mov	r1, r7
   1df5e:	f7fe fec5 	bl	1ccec <__aeabi_d2iz>
   1df62:	2800      	cmp	r0, #0
   1df64:	f000 80f6 	beq.w	1e154 <__kernel_cos+0x21c>
   1df68:	4632      	mov	r2, r6
   1df6a:	463b      	mov	r3, r7
   1df6c:	4630      	mov	r0, r6
   1df6e:	4639      	mov	r1, r7
   1df70:	f7fe fc22 	bl	1c7b8 <__aeabi_dmul>
   1df74:	4604      	mov	r4, r0
   1df76:	460d      	mov	r5, r1
   1df78:	a37b      	add	r3, pc, #492	; (adr r3, 1e168 <__kernel_cos+0x230>)
   1df7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1df7e:	f7fe fc1b 	bl	1c7b8 <__aeabi_dmul>
   1df82:	a37b      	add	r3, pc, #492	; (adr r3, 1e170 <__kernel_cos+0x238>)
   1df84:	e9d3 2300 	ldrd	r2, r3, [r3]
   1df88:	f7fe fa60 	bl	1c44c <__adddf3>
   1df8c:	4622      	mov	r2, r4
   1df8e:	462b      	mov	r3, r5
   1df90:	f7fe fc12 	bl	1c7b8 <__aeabi_dmul>
   1df94:	a378      	add	r3, pc, #480	; (adr r3, 1e178 <__kernel_cos+0x240>)
   1df96:	e9d3 2300 	ldrd	r2, r3, [r3]
   1df9a:	f7fe fa55 	bl	1c448 <__aeabi_dsub>
   1df9e:	4622      	mov	r2, r4
   1dfa0:	462b      	mov	r3, r5
   1dfa2:	f7fe fc09 	bl	1c7b8 <__aeabi_dmul>
   1dfa6:	a376      	add	r3, pc, #472	; (adr r3, 1e180 <__kernel_cos+0x248>)
   1dfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dfac:	f7fe fa4e 	bl	1c44c <__adddf3>
   1dfb0:	4622      	mov	r2, r4
   1dfb2:	462b      	mov	r3, r5
   1dfb4:	f7fe fc00 	bl	1c7b8 <__aeabi_dmul>
   1dfb8:	a373      	add	r3, pc, #460	; (adr r3, 1e188 <__kernel_cos+0x250>)
   1dfba:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dfbe:	f7fe fa43 	bl	1c448 <__aeabi_dsub>
   1dfc2:	4622      	mov	r2, r4
   1dfc4:	462b      	mov	r3, r5
   1dfc6:	f7fe fbf7 	bl	1c7b8 <__aeabi_dmul>
   1dfca:	a371      	add	r3, pc, #452	; (adr r3, 1e190 <__kernel_cos+0x258>)
   1dfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dfd0:	f7fe fa3c 	bl	1c44c <__adddf3>
   1dfd4:	4622      	mov	r2, r4
   1dfd6:	462b      	mov	r3, r5
   1dfd8:	f7fe fbee 	bl	1c7b8 <__aeabi_dmul>
   1dfdc:	4682      	mov	sl, r0
   1dfde:	468b      	mov	fp, r1
   1dfe0:	2200      	movs	r2, #0
   1dfe2:	4b71      	ldr	r3, [pc, #452]	; (1e1a8 <__kernel_cos+0x270>)
   1dfe4:	4620      	mov	r0, r4
   1dfe6:	4629      	mov	r1, r5
   1dfe8:	f7fe fbe6 	bl	1c7b8 <__aeabi_dmul>
   1dfec:	4652      	mov	r2, sl
   1dfee:	4680      	mov	r8, r0
   1dff0:	4689      	mov	r9, r1
   1dff2:	465b      	mov	r3, fp
   1dff4:	4620      	mov	r0, r4
   1dff6:	4629      	mov	r1, r5
   1dff8:	f7fe fbde 	bl	1c7b8 <__aeabi_dmul>
   1dffc:	4604      	mov	r4, r0
   1dffe:	460d      	mov	r5, r1
   1e000:	4630      	mov	r0, r6
   1e002:	4639      	mov	r1, r7
   1e004:	ec53 2b18 	vmov	r2, r3, d8
   1e008:	f7fe fbd6 	bl	1c7b8 <__aeabi_dmul>
   1e00c:	4602      	mov	r2, r0
   1e00e:	460b      	mov	r3, r1
   1e010:	4620      	mov	r0, r4
   1e012:	4629      	mov	r1, r5
   1e014:	f7fe fa18 	bl	1c448 <__aeabi_dsub>
   1e018:	4602      	mov	r2, r0
   1e01a:	460b      	mov	r3, r1
   1e01c:	4640      	mov	r0, r8
   1e01e:	4649      	mov	r1, r9
   1e020:	f7fe fa12 	bl	1c448 <__aeabi_dsub>
   1e024:	4602      	mov	r2, r0
   1e026:	460b      	mov	r3, r1
   1e028:	2000      	movs	r0, #0
   1e02a:	4960      	ldr	r1, [pc, #384]	; (1e1ac <__kernel_cos+0x274>)
   1e02c:	f7fe fa0c 	bl	1c448 <__aeabi_dsub>
   1e030:	ec41 0b10 	vmov	d0, r0, r1
   1e034:	b003      	add	sp, #12
   1e036:	ecbd 8b02 	vpop	{d8}
   1e03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e03e:	ee10 2a10 	vmov	r2, s0
   1e042:	ee10 0a10 	vmov	r0, s0
   1e046:	463b      	mov	r3, r7
   1e048:	4639      	mov	r1, r7
   1e04a:	f7fe fbb5 	bl	1c7b8 <__aeabi_dmul>
   1e04e:	4604      	mov	r4, r0
   1e050:	460d      	mov	r5, r1
   1e052:	a345      	add	r3, pc, #276	; (adr r3, 1e168 <__kernel_cos+0x230>)
   1e054:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e058:	f7fe fbae 	bl	1c7b8 <__aeabi_dmul>
   1e05c:	a344      	add	r3, pc, #272	; (adr r3, 1e170 <__kernel_cos+0x238>)
   1e05e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e062:	f7fe f9f3 	bl	1c44c <__adddf3>
   1e066:	4622      	mov	r2, r4
   1e068:	462b      	mov	r3, r5
   1e06a:	f7fe fba5 	bl	1c7b8 <__aeabi_dmul>
   1e06e:	a342      	add	r3, pc, #264	; (adr r3, 1e178 <__kernel_cos+0x240>)
   1e070:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e074:	f7fe f9e8 	bl	1c448 <__aeabi_dsub>
   1e078:	4622      	mov	r2, r4
   1e07a:	462b      	mov	r3, r5
   1e07c:	f7fe fb9c 	bl	1c7b8 <__aeabi_dmul>
   1e080:	a33f      	add	r3, pc, #252	; (adr r3, 1e180 <__kernel_cos+0x248>)
   1e082:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e086:	f7fe f9e1 	bl	1c44c <__adddf3>
   1e08a:	4622      	mov	r2, r4
   1e08c:	462b      	mov	r3, r5
   1e08e:	f7fe fb93 	bl	1c7b8 <__aeabi_dmul>
   1e092:	a33d      	add	r3, pc, #244	; (adr r3, 1e188 <__kernel_cos+0x250>)
   1e094:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e098:	f7fe f9d6 	bl	1c448 <__aeabi_dsub>
   1e09c:	4622      	mov	r2, r4
   1e09e:	462b      	mov	r3, r5
   1e0a0:	f7fe fb8a 	bl	1c7b8 <__aeabi_dmul>
   1e0a4:	a33a      	add	r3, pc, #232	; (adr r3, 1e190 <__kernel_cos+0x258>)
   1e0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e0aa:	f7fe f9cf 	bl	1c44c <__adddf3>
   1e0ae:	462b      	mov	r3, r5
   1e0b0:	4622      	mov	r2, r4
   1e0b2:	f7fe fb81 	bl	1c7b8 <__aeabi_dmul>
   1e0b6:	4b3e      	ldr	r3, [pc, #248]	; (1e1b0 <__kernel_cos+0x278>)
   1e0b8:	4682      	mov	sl, r0
   1e0ba:	468b      	mov	fp, r1
   1e0bc:	4599      	cmp	r9, r3
   1e0be:	dd8f      	ble.n	1dfe0 <__kernel_cos+0xa8>
   1e0c0:	4b3c      	ldr	r3, [pc, #240]	; (1e1b4 <__kernel_cos+0x27c>)
   1e0c2:	4599      	cmp	r9, r3
   1e0c4:	dc3d      	bgt.n	1e142 <__kernel_cos+0x20a>
   1e0c6:	2200      	movs	r2, #0
   1e0c8:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   1e0cc:	2000      	movs	r0, #0
   1e0ce:	4937      	ldr	r1, [pc, #220]	; (1e1ac <__kernel_cos+0x274>)
   1e0d0:	4690      	mov	r8, r2
   1e0d2:	4699      	mov	r9, r3
   1e0d4:	f7fe f9b8 	bl	1c448 <__aeabi_dsub>
   1e0d8:	e9cd 0100 	strd	r0, r1, [sp]
   1e0dc:	2200      	movs	r2, #0
   1e0de:	4b32      	ldr	r3, [pc, #200]	; (1e1a8 <__kernel_cos+0x270>)
   1e0e0:	4620      	mov	r0, r4
   1e0e2:	4629      	mov	r1, r5
   1e0e4:	f7fe fb68 	bl	1c7b8 <__aeabi_dmul>
   1e0e8:	4642      	mov	r2, r8
   1e0ea:	464b      	mov	r3, r9
   1e0ec:	f7fe f9ac 	bl	1c448 <__aeabi_dsub>
   1e0f0:	4652      	mov	r2, sl
   1e0f2:	4680      	mov	r8, r0
   1e0f4:	4689      	mov	r9, r1
   1e0f6:	465b      	mov	r3, fp
   1e0f8:	4620      	mov	r0, r4
   1e0fa:	4629      	mov	r1, r5
   1e0fc:	f7fe fb5c 	bl	1c7b8 <__aeabi_dmul>
   1e100:	4604      	mov	r4, r0
   1e102:	460d      	mov	r5, r1
   1e104:	4630      	mov	r0, r6
   1e106:	4639      	mov	r1, r7
   1e108:	ec53 2b18 	vmov	r2, r3, d8
   1e10c:	f7fe fb54 	bl	1c7b8 <__aeabi_dmul>
   1e110:	4602      	mov	r2, r0
   1e112:	460b      	mov	r3, r1
   1e114:	4620      	mov	r0, r4
   1e116:	4629      	mov	r1, r5
   1e118:	f7fe f996 	bl	1c448 <__aeabi_dsub>
   1e11c:	4602      	mov	r2, r0
   1e11e:	460b      	mov	r3, r1
   1e120:	4640      	mov	r0, r8
   1e122:	4649      	mov	r1, r9
   1e124:	f7fe f990 	bl	1c448 <__aeabi_dsub>
   1e128:	4602      	mov	r2, r0
   1e12a:	460b      	mov	r3, r1
   1e12c:	e9dd 0100 	ldrd	r0, r1, [sp]
   1e130:	f7fe f98a 	bl	1c448 <__aeabi_dsub>
   1e134:	ec41 0b10 	vmov	d0, r0, r1
   1e138:	b003      	add	sp, #12
   1e13a:	ecbd 8b02 	vpop	{d8}
   1e13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e142:	ed9f 7b15 	vldr	d7, [pc, #84]	; 1e198 <__kernel_cos+0x260>
   1e146:	f04f 0800 	mov.w	r8, #0
   1e14a:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1e1b8 <__kernel_cos+0x280>
   1e14e:	ed8d 7b00 	vstr	d7, [sp]
   1e152:	e7c3      	b.n	1e0dc <__kernel_cos+0x1a4>
   1e154:	ed9f 0b12 	vldr	d0, [pc, #72]	; 1e1a0 <__kernel_cos+0x268>
   1e158:	b003      	add	sp, #12
   1e15a:	ecbd 8b02 	vpop	{d8}
   1e15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e162:	bf00      	nop
   1e164:	f3af 8000 	nop.w
   1e168:	be8838d4 	.word	0xbe8838d4
   1e16c:	bda8fae9 	.word	0xbda8fae9
   1e170:	bdb4b1c4 	.word	0xbdb4b1c4
   1e174:	3e21ee9e 	.word	0x3e21ee9e
   1e178:	809c52ad 	.word	0x809c52ad
   1e17c:	3e927e4f 	.word	0x3e927e4f
   1e180:	19cb1590 	.word	0x19cb1590
   1e184:	3efa01a0 	.word	0x3efa01a0
   1e188:	16c15177 	.word	0x16c15177
   1e18c:	3f56c16c 	.word	0x3f56c16c
   1e190:	5555554c 	.word	0x5555554c
   1e194:	3fa55555 	.word	0x3fa55555
   1e198:	00000000 	.word	0x00000000
   1e19c:	3fe70000 	.word	0x3fe70000
   1e1a0:	00000000 	.word	0x00000000
   1e1a4:	3ff00000 	.word	0x3ff00000
   1e1a8:	3fe00000 	.word	0x3fe00000
   1e1ac:	3ff00000 	.word	0x3ff00000
   1e1b0:	3fd33332 	.word	0x3fd33332
   1e1b4:	3fe90000 	.word	0x3fe90000
   1e1b8:	3fd20000 	.word	0x3fd20000
   1e1bc:	00000000 	.word	0x00000000

0001e1c0 <__kernel_rem_pio2>:
   1e1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e1c4:	461c      	mov	r4, r3
   1e1c6:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   1e1ca:	f112 0f14 	cmn.w	r2, #20
   1e1ce:	910b      	str	r1, [sp, #44]	; 0x2c
   1e1d0:	f104 31ff 	add.w	r1, r4, #4294967295
   1e1d4:	9308      	str	r3, [sp, #32]
   1e1d6:	9103      	str	r1, [sp, #12]
   1e1d8:	4bb1      	ldr	r3, [pc, #708]	; (1e4a0 <__kernel_rem_pio2+0x2e0>)
   1e1da:	99a2      	ldr	r1, [sp, #648]	; 0x288
   1e1dc:	9004      	str	r0, [sp, #16]
   1e1de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1e1e2:	9305      	str	r3, [sp, #20]
   1e1e4:	f2c0 82c1 	blt.w	1e76a <__kernel_rem_pio2+0x5aa>
   1e1e8:	1ed3      	subs	r3, r2, #3
   1e1ea:	49ae      	ldr	r1, [pc, #696]	; (1e4a4 <__kernel_rem_pio2+0x2e4>)
   1e1ec:	fb81 0103 	smull	r0, r1, r1, r3
   1e1f0:	17db      	asrs	r3, r3, #31
   1e1f2:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   1e1f6:	9307      	str	r3, [sp, #28]
   1e1f8:	3301      	adds	r3, #1
   1e1fa:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   1e1fe:	00db      	lsls	r3, r3, #3
   1e200:	18d3      	adds	r3, r2, r3
   1e202:	9a07      	ldr	r2, [sp, #28]
   1e204:	9306      	str	r3, [sp, #24]
   1e206:	9b03      	ldr	r3, [sp, #12]
   1e208:	1ad6      	subs	r6, r2, r3
   1e20a:	9a05      	ldr	r2, [sp, #20]
   1e20c:	eb12 0803 	adds.w	r8, r2, r3
   1e210:	d414      	bmi.n	1e23c <__kernel_rem_pio2+0x7c>
   1e212:	f108 0801 	add.w	r8, r8, #1
   1e216:	af20      	add	r7, sp, #128	; 0x80
   1e218:	2400      	movs	r4, #0
   1e21a:	2500      	movs	r5, #0
   1e21c:	44b0      	add	r8, r6
   1e21e:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
   1e222:	2e00      	cmp	r6, #0
   1e224:	4620      	mov	r0, r4
   1e226:	4629      	mov	r1, r5
   1e228:	db03      	blt.n	1e232 <__kernel_rem_pio2+0x72>
   1e22a:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
   1e22e:	f7fe fa59 	bl	1c6e4 <__aeabi_i2d>
   1e232:	3601      	adds	r6, #1
   1e234:	4546      	cmp	r6, r8
   1e236:	e8e7 0102 	strd	r0, r1, [r7], #8
   1e23a:	d1f2      	bne.n	1e222 <__kernel_rem_pio2+0x62>
   1e23c:	9b05      	ldr	r3, [sp, #20]
   1e23e:	2b00      	cmp	r3, #0
   1e240:	9b08      	ldr	r3, [sp, #32]
   1e242:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1e246:	9301      	str	r3, [sp, #4]
   1e248:	db29      	blt.n	1e29e <__kernel_rem_pio2+0xde>
   1e24a:	9a04      	ldr	r2, [sp, #16]
   1e24c:	a920      	add	r1, sp, #128	; 0x80
   1e24e:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   1e252:	eb02 0803 	add.w	r8, r2, r3
   1e256:	eb01 0903 	add.w	r9, r1, r3
   1e25a:	aa72      	add	r2, sp, #456	; 0x1c8
   1e25c:	9b05      	ldr	r3, [sp, #20]
   1e25e:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
   1e262:	9b03      	ldr	r3, [sp, #12]
   1e264:	2b00      	cmp	r3, #0
   1e266:	f2c0 819e 	blt.w	1e5a6 <__kernel_rem_pio2+0x3e6>
   1e26a:	464d      	mov	r5, r9
   1e26c:	9c04      	ldr	r4, [sp, #16]
   1e26e:	2600      	movs	r6, #0
   1e270:	2700      	movs	r7, #0
   1e272:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   1e276:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   1e27a:	f7fe fa9d 	bl	1c7b8 <__aeabi_dmul>
   1e27e:	4602      	mov	r2, r0
   1e280:	460b      	mov	r3, r1
   1e282:	4630      	mov	r0, r6
   1e284:	4639      	mov	r1, r7
   1e286:	f7fe f8e1 	bl	1c44c <__adddf3>
   1e28a:	4544      	cmp	r4, r8
   1e28c:	4606      	mov	r6, r0
   1e28e:	460f      	mov	r7, r1
   1e290:	d1ef      	bne.n	1e272 <__kernel_rem_pio2+0xb2>
   1e292:	f109 0908 	add.w	r9, r9, #8
   1e296:	e8ea 6702 	strd	r6, r7, [sl], #8
   1e29a:	45da      	cmp	sl, fp
   1e29c:	d1e1      	bne.n	1e262 <__kernel_rem_pio2+0xa2>
   1e29e:	9905      	ldr	r1, [sp, #20]
   1e2a0:	9a01      	ldr	r2, [sp, #4]
   1e2a2:	9804      	ldr	r0, [sp, #16]
   1e2a4:	008b      	lsls	r3, r1, #2
   1e2a6:	9101      	str	r1, [sp, #4]
   1e2a8:	4402      	add	r2, r0
   1e2aa:	a80b      	add	r0, sp, #44	; 0x2c
   1e2ac:	4693      	mov	fp, r2
   1e2ae:	f1a3 0208 	sub.w	r2, r3, #8
   1e2b2:	18c3      	adds	r3, r0, r3
   1e2b4:	930a      	str	r3, [sp, #40]	; 0x28
   1e2b6:	ab0c      	add	r3, sp, #48	; 0x30
   1e2b8:	4413      	add	r3, r2
   1e2ba:	9309      	str	r3, [sp, #36]	; 0x24
   1e2bc:	9a01      	ldr	r2, [sp, #4]
   1e2be:	a998      	add	r1, sp, #608	; 0x260
   1e2c0:	2a00      	cmp	r2, #0
   1e2c2:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   1e2c6:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   1e2ca:	dd29      	ble.n	1e320 <__kernel_rem_pio2+0x160>
   1e2cc:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   1e2d0:	f10d 0930 	add.w	r9, sp, #48	; 0x30
   1e2d4:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   1e2d8:	2200      	movs	r2, #0
   1e2da:	4b73      	ldr	r3, [pc, #460]	; (1e4a8 <__kernel_rem_pio2+0x2e8>)
   1e2dc:	4620      	mov	r0, r4
   1e2de:	4629      	mov	r1, r5
   1e2e0:	f7fe fa6a 	bl	1c7b8 <__aeabi_dmul>
   1e2e4:	f7fe fd02 	bl	1ccec <__aeabi_d2iz>
   1e2e8:	f7fe f9fc 	bl	1c6e4 <__aeabi_i2d>
   1e2ec:	2200      	movs	r2, #0
   1e2ee:	4b6f      	ldr	r3, [pc, #444]	; (1e4ac <__kernel_rem_pio2+0x2ec>)
   1e2f0:	4606      	mov	r6, r0
   1e2f2:	460f      	mov	r7, r1
   1e2f4:	f7fe fa60 	bl	1c7b8 <__aeabi_dmul>
   1e2f8:	4602      	mov	r2, r0
   1e2fa:	460b      	mov	r3, r1
   1e2fc:	4620      	mov	r0, r4
   1e2fe:	4629      	mov	r1, r5
   1e300:	f7fe f8a2 	bl	1c448 <__aeabi_dsub>
   1e304:	f7fe fcf2 	bl	1ccec <__aeabi_d2iz>
   1e308:	4639      	mov	r1, r7
   1e30a:	f849 0b04 	str.w	r0, [r9], #4
   1e30e:	4630      	mov	r0, r6
   1e310:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   1e314:	f7fe f89a 	bl	1c44c <__adddf3>
   1e318:	4604      	mov	r4, r0
   1e31a:	45d0      	cmp	r8, sl
   1e31c:	460d      	mov	r5, r1
   1e31e:	d1db      	bne.n	1e2d8 <__kernel_rem_pio2+0x118>
   1e320:	f8dd 9018 	ldr.w	r9, [sp, #24]
   1e324:	ec45 4b10 	vmov	d0, r4, r5
   1e328:	4648      	mov	r0, r9
   1e32a:	f000 fcad 	bl	1ec88 <scalbn>
   1e32e:	2200      	movs	r2, #0
   1e330:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1e334:	ee10 0a10 	vmov	r0, s0
   1e338:	ec55 4b10 	vmov	r4, r5, d0
   1e33c:	4629      	mov	r1, r5
   1e33e:	f7fe fa3b 	bl	1c7b8 <__aeabi_dmul>
   1e342:	ec41 0b10 	vmov	d0, r0, r1
   1e346:	f000 fc1b 	bl	1eb80 <floor>
   1e34a:	2200      	movs	r2, #0
   1e34c:	4b58      	ldr	r3, [pc, #352]	; (1e4b0 <__kernel_rem_pio2+0x2f0>)
   1e34e:	ec51 0b10 	vmov	r0, r1, d0
   1e352:	f7fe fa31 	bl	1c7b8 <__aeabi_dmul>
   1e356:	4602      	mov	r2, r0
   1e358:	460b      	mov	r3, r1
   1e35a:	4620      	mov	r0, r4
   1e35c:	4629      	mov	r1, r5
   1e35e:	f7fe f873 	bl	1c448 <__aeabi_dsub>
   1e362:	460d      	mov	r5, r1
   1e364:	4604      	mov	r4, r0
   1e366:	f7fe fcc1 	bl	1ccec <__aeabi_d2iz>
   1e36a:	4680      	mov	r8, r0
   1e36c:	f7fe f9ba 	bl	1c6e4 <__aeabi_i2d>
   1e370:	460b      	mov	r3, r1
   1e372:	4602      	mov	r2, r0
   1e374:	4629      	mov	r1, r5
   1e376:	4620      	mov	r0, r4
   1e378:	f7fe f866 	bl	1c448 <__aeabi_dsub>
   1e37c:	464b      	mov	r3, r9
   1e37e:	4606      	mov	r6, r0
   1e380:	460f      	mov	r7, r1
   1e382:	2b00      	cmp	r3, #0
   1e384:	f340 8096 	ble.w	1e4b4 <__kernel_rem_pio2+0x2f4>
   1e388:	9a01      	ldr	r2, [sp, #4]
   1e38a:	a90c      	add	r1, sp, #48	; 0x30
   1e38c:	f1c9 0318 	rsb	r3, r9, #24
   1e390:	f1c9 0517 	rsb	r5, r9, #23
   1e394:	3a01      	subs	r2, #1
   1e396:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   1e39a:	fa41 f003 	asr.w	r0, r1, r3
   1e39e:	fa00 f303 	lsl.w	r3, r0, r3
   1e3a2:	4480      	add	r8, r0
   1e3a4:	1acb      	subs	r3, r1, r3
   1e3a6:	a90c      	add	r1, sp, #48	; 0x30
   1e3a8:	fa43 f505 	asr.w	r5, r3, r5
   1e3ac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1e3b0:	2d00      	cmp	r5, #0
   1e3b2:	f300 8089 	bgt.w	1e4c8 <__kernel_rem_pio2+0x308>
   1e3b6:	2200      	movs	r2, #0
   1e3b8:	2300      	movs	r3, #0
   1e3ba:	4630      	mov	r0, r6
   1e3bc:	4639      	mov	r1, r7
   1e3be:	f7fe fc63 	bl	1cc88 <__aeabi_dcmpeq>
   1e3c2:	2800      	cmp	r0, #0
   1e3c4:	f000 8297 	beq.w	1e8f6 <__kernel_rem_pio2+0x736>
   1e3c8:	9901      	ldr	r1, [sp, #4]
   1e3ca:	9b05      	ldr	r3, [sp, #20]
   1e3cc:	f101 39ff 	add.w	r9, r1, #4294967295
   1e3d0:	454b      	cmp	r3, r9
   1e3d2:	dc10      	bgt.n	1e3f6 <__kernel_rem_pio2+0x236>
   1e3d4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   1e3d8:	2200      	movs	r2, #0
   1e3da:	980a      	ldr	r0, [sp, #40]	; 0x28
   1e3dc:	440b      	add	r3, r1
   1e3de:	a90c      	add	r1, sp, #48	; 0x30
   1e3e0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1e3e4:	f853 1904 	ldr.w	r1, [r3], #-4
   1e3e8:	4283      	cmp	r3, r0
   1e3ea:	ea42 0201 	orr.w	r2, r2, r1
   1e3ee:	d1f9      	bne.n	1e3e4 <__kernel_rem_pio2+0x224>
   1e3f0:	2a00      	cmp	r2, #0
   1e3f2:	f040 80e2 	bne.w	1e5ba <__kernel_rem_pio2+0x3fa>
   1e3f6:	9b05      	ldr	r3, [sp, #20]
   1e3f8:	aa0c      	add	r2, sp, #48	; 0x30
   1e3fa:	3b01      	subs	r3, #1
   1e3fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1e400:	2b00      	cmp	r3, #0
   1e402:	f040 80cb 	bne.w	1e59c <__kernel_rem_pio2+0x3dc>
   1e406:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e408:	2301      	movs	r3, #1
   1e40a:	f852 1904 	ldr.w	r1, [r2], #-4
   1e40e:	3301      	adds	r3, #1
   1e410:	2900      	cmp	r1, #0
   1e412:	d0fa      	beq.n	1e40a <__kernel_rem_pio2+0x24a>
   1e414:	9901      	ldr	r1, [sp, #4]
   1e416:	1c4a      	adds	r2, r1, #1
   1e418:	18cb      	adds	r3, r1, r3
   1e41a:	4691      	mov	r9, r2
   1e41c:	9302      	str	r3, [sp, #8]
   1e41e:	9b07      	ldr	r3, [sp, #28]
   1e420:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
   1e424:	9901      	ldr	r1, [sp, #4]
   1e426:	18d3      	adds	r3, r2, r3
   1e428:	9808      	ldr	r0, [sp, #32]
   1e42a:	449a      	add	sl, r3
   1e42c:	4401      	add	r1, r0
   1e42e:	ab20      	add	r3, sp, #128	; 0x80
   1e430:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
   1e434:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
   1e436:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
   1e43a:	ab70      	add	r3, sp, #448	; 0x1c0
   1e43c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1e440:	9301      	str	r3, [sp, #4]
   1e442:	f85a 0f04 	ldr.w	r0, [sl, #4]!
   1e446:	46a8      	mov	r8, r5
   1e448:	f7fe f94c 	bl	1c6e4 <__aeabi_i2d>
   1e44c:	460b      	mov	r3, r1
   1e44e:	9903      	ldr	r1, [sp, #12]
   1e450:	4602      	mov	r2, r0
   1e452:	2900      	cmp	r1, #0
   1e454:	e8e8 2302 	strd	r2, r3, [r8], #8
   1e458:	db1f      	blt.n	1e49a <__kernel_rem_pio2+0x2da>
   1e45a:	9c04      	ldr	r4, [sp, #16]
   1e45c:	2600      	movs	r6, #0
   1e45e:	2700      	movs	r7, #0
   1e460:	e001      	b.n	1e466 <__kernel_rem_pio2+0x2a6>
   1e462:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   1e466:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   1e46a:	f7fe f9a5 	bl	1c7b8 <__aeabi_dmul>
   1e46e:	4602      	mov	r2, r0
   1e470:	460b      	mov	r3, r1
   1e472:	4630      	mov	r0, r6
   1e474:	4639      	mov	r1, r7
   1e476:	f7fd ffe9 	bl	1c44c <__adddf3>
   1e47a:	455c      	cmp	r4, fp
   1e47c:	4606      	mov	r6, r0
   1e47e:	460f      	mov	r7, r1
   1e480:	d1ef      	bne.n	1e462 <__kernel_rem_pio2+0x2a2>
   1e482:	9b01      	ldr	r3, [sp, #4]
   1e484:	f109 0901 	add.w	r9, r9, #1
   1e488:	4645      	mov	r5, r8
   1e48a:	e8e3 6702 	strd	r6, r7, [r3], #8
   1e48e:	9301      	str	r3, [sp, #4]
   1e490:	9b02      	ldr	r3, [sp, #8]
   1e492:	4599      	cmp	r9, r3
   1e494:	ddd5      	ble.n	1e442 <__kernel_rem_pio2+0x282>
   1e496:	9301      	str	r3, [sp, #4]
   1e498:	e710      	b.n	1e2bc <__kernel_rem_pio2+0xfc>
   1e49a:	2600      	movs	r6, #0
   1e49c:	2700      	movs	r7, #0
   1e49e:	e7f0      	b.n	1e482 <__kernel_rem_pio2+0x2c2>
   1e4a0:	00042b48 	.word	0x00042b48
   1e4a4:	2aaaaaab 	.word	0x2aaaaaab
   1e4a8:	3e700000 	.word	0x3e700000
   1e4ac:	41700000 	.word	0x41700000
   1e4b0:	40200000 	.word	0x40200000
   1e4b4:	d169      	bne.n	1e58a <__kernel_rem_pio2+0x3ca>
   1e4b6:	9b01      	ldr	r3, [sp, #4]
   1e4b8:	aa0c      	add	r2, sp, #48	; 0x30
   1e4ba:	3b01      	subs	r3, #1
   1e4bc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1e4c0:	15ed      	asrs	r5, r5, #23
   1e4c2:	2d00      	cmp	r5, #0
   1e4c4:	f77f af77 	ble.w	1e3b6 <__kernel_rem_pio2+0x1f6>
   1e4c8:	9b01      	ldr	r3, [sp, #4]
   1e4ca:	f108 0801 	add.w	r8, r8, #1
   1e4ce:	2b00      	cmp	r3, #0
   1e4d0:	f340 820f 	ble.w	1e8f2 <__kernel_rem_pio2+0x732>
   1e4d4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1e4d6:	2c00      	cmp	r4, #0
   1e4d8:	d13a      	bne.n	1e550 <__kernel_rem_pio2+0x390>
   1e4da:	9b01      	ldr	r3, [sp, #4]
   1e4dc:	2b01      	cmp	r3, #1
   1e4de:	d009      	beq.n	1e4f4 <__kernel_rem_pio2+0x334>
   1e4e0:	a90c      	add	r1, sp, #48	; 0x30
   1e4e2:	2201      	movs	r2, #1
   1e4e4:	f851 4f04 	ldr.w	r4, [r1, #4]!
   1e4e8:	1c53      	adds	r3, r2, #1
   1e4ea:	bb9c      	cbnz	r4, 1e554 <__kernel_rem_pio2+0x394>
   1e4ec:	461a      	mov	r2, r3
   1e4ee:	9b01      	ldr	r3, [sp, #4]
   1e4f0:	4293      	cmp	r3, r2
   1e4f2:	d1f7      	bne.n	1e4e4 <__kernel_rem_pio2+0x324>
   1e4f4:	9b06      	ldr	r3, [sp, #24]
   1e4f6:	2b00      	cmp	r3, #0
   1e4f8:	dd0e      	ble.n	1e518 <__kernel_rem_pio2+0x358>
   1e4fa:	2b01      	cmp	r3, #1
   1e4fc:	f000 811a 	beq.w	1e734 <__kernel_rem_pio2+0x574>
   1e500:	2b02      	cmp	r3, #2
   1e502:	d109      	bne.n	1e518 <__kernel_rem_pio2+0x358>
   1e504:	9b01      	ldr	r3, [sp, #4]
   1e506:	a90c      	add	r1, sp, #48	; 0x30
   1e508:	1e5a      	subs	r2, r3, #1
   1e50a:	ab0c      	add	r3, sp, #48	; 0x30
   1e50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1e510:	f3c3 0315 	ubfx	r3, r3, #0, #22
   1e514:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1e518:	2d02      	cmp	r5, #2
   1e51a:	f47f af4c 	bne.w	1e3b6 <__kernel_rem_pio2+0x1f6>
   1e51e:	4632      	mov	r2, r6
   1e520:	463b      	mov	r3, r7
   1e522:	2000      	movs	r0, #0
   1e524:	4998      	ldr	r1, [pc, #608]	; (1e788 <__kernel_rem_pio2+0x5c8>)
   1e526:	f7fd ff8f 	bl	1c448 <__aeabi_dsub>
   1e52a:	4606      	mov	r6, r0
   1e52c:	460f      	mov	r7, r1
   1e52e:	2c00      	cmp	r4, #0
   1e530:	f43f af41 	beq.w	1e3b6 <__kernel_rem_pio2+0x1f6>
   1e534:	9806      	ldr	r0, [sp, #24]
   1e536:	ed9f 0b90 	vldr	d0, [pc, #576]	; 1e778 <__kernel_rem_pio2+0x5b8>
   1e53a:	f000 fba5 	bl	1ec88 <scalbn>
   1e53e:	4630      	mov	r0, r6
   1e540:	4639      	mov	r1, r7
   1e542:	ec53 2b10 	vmov	r2, r3, d0
   1e546:	f7fd ff7f 	bl	1c448 <__aeabi_dsub>
   1e54a:	4606      	mov	r6, r0
   1e54c:	460f      	mov	r7, r1
   1e54e:	e732      	b.n	1e3b6 <__kernel_rem_pio2+0x1f6>
   1e550:	2301      	movs	r3, #1
   1e552:	2200      	movs	r2, #0
   1e554:	a90c      	add	r1, sp, #48	; 0x30
   1e556:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
   1e55a:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
   1e55e:	9901      	ldr	r1, [sp, #4]
   1e560:	4299      	cmp	r1, r3
   1e562:	dd10      	ble.n	1e586 <__kernel_rem_pio2+0x3c6>
   1e564:	a80c      	add	r0, sp, #48	; 0x30
   1e566:	aa0c      	add	r2, sp, #48	; 0x30
   1e568:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1e56c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1e570:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1e574:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   1e578:	e000      	b.n	1e57c <__kernel_rem_pio2+0x3bc>
   1e57a:	681a      	ldr	r2, [r3, #0]
   1e57c:	1a8a      	subs	r2, r1, r2
   1e57e:	f843 2b04 	str.w	r2, [r3], #4
   1e582:	4283      	cmp	r3, r0
   1e584:	d1f9      	bne.n	1e57a <__kernel_rem_pio2+0x3ba>
   1e586:	2401      	movs	r4, #1
   1e588:	e7b4      	b.n	1e4f4 <__kernel_rem_pio2+0x334>
   1e58a:	2200      	movs	r2, #0
   1e58c:	4b7f      	ldr	r3, [pc, #508]	; (1e78c <__kernel_rem_pio2+0x5cc>)
   1e58e:	f7fe fb99 	bl	1ccc4 <__aeabi_dcmpge>
   1e592:	2800      	cmp	r0, #0
   1e594:	f040 80d9 	bne.w	1e74a <__kernel_rem_pio2+0x58a>
   1e598:	4605      	mov	r5, r0
   1e59a:	e70c      	b.n	1e3b6 <__kernel_rem_pio2+0x1f6>
   1e59c:	9b01      	ldr	r3, [sp, #4]
   1e59e:	1c5a      	adds	r2, r3, #1
   1e5a0:	4691      	mov	r9, r2
   1e5a2:	9202      	str	r2, [sp, #8]
   1e5a4:	e73b      	b.n	1e41e <__kernel_rem_pio2+0x25e>
   1e5a6:	2600      	movs	r6, #0
   1e5a8:	2700      	movs	r7, #0
   1e5aa:	f109 0908 	add.w	r9, r9, #8
   1e5ae:	e8ea 6702 	strd	r6, r7, [sl], #8
   1e5b2:	45da      	cmp	sl, fp
   1e5b4:	f47f ae55 	bne.w	1e262 <__kernel_rem_pio2+0xa2>
   1e5b8:	e671      	b.n	1e29e <__kernel_rem_pio2+0xde>
   1e5ba:	9a06      	ldr	r2, [sp, #24]
   1e5bc:	ab0c      	add	r3, sp, #48	; 0x30
   1e5be:	f8cd 801c 	str.w	r8, [sp, #28]
   1e5c2:	3a18      	subs	r2, #24
   1e5c4:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
   1e5c8:	9504      	str	r5, [sp, #16]
   1e5ca:	9206      	str	r2, [sp, #24]
   1e5cc:	b973      	cbnz	r3, 1e5ec <__kernel_rem_pio2+0x42c>
   1e5ce:	4b70      	ldr	r3, [pc, #448]	; (1e790 <__kernel_rem_pio2+0x5d0>)
   1e5d0:	9901      	ldr	r1, [sp, #4]
   1e5d2:	4419      	add	r1, r3
   1e5d4:	460b      	mov	r3, r1
   1e5d6:	a90c      	add	r1, sp, #48	; 0x30
   1e5d8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1e5dc:	f853 1904 	ldr.w	r1, [r3], #-4
   1e5e0:	f109 39ff 	add.w	r9, r9, #4294967295
   1e5e4:	3a18      	subs	r2, #24
   1e5e6:	2900      	cmp	r1, #0
   1e5e8:	d0f8      	beq.n	1e5dc <__kernel_rem_pio2+0x41c>
   1e5ea:	9206      	str	r2, [sp, #24]
   1e5ec:	9806      	ldr	r0, [sp, #24]
   1e5ee:	ed9f 0b62 	vldr	d0, [pc, #392]	; 1e778 <__kernel_rem_pio2+0x5b8>
   1e5f2:	f000 fb49 	bl	1ec88 <scalbn>
   1e5f6:	f1b9 0f00 	cmp.w	r9, #0
   1e5fa:	ec55 4b10 	vmov	r4, r5, d0
   1e5fe:	f2c0 81da 	blt.w	1e9b6 <__kernel_rem_pio2+0x7f6>
   1e602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
   1e606:	aa70      	add	r2, sp, #448	; 0x1c0
   1e608:	f109 0601 	add.w	r6, r9, #1
   1e60c:	f04f 0a00 	mov.w	sl, #0
   1e610:	eb02 0803 	add.w	r8, r2, r3
   1e614:	9306      	str	r3, [sp, #24]
   1e616:	ab0c      	add	r3, sp, #48	; 0x30
   1e618:	f8df b178 	ldr.w	fp, [pc, #376]	; 1e794 <__kernel_rem_pio2+0x5d4>
   1e61c:	f108 0708 	add.w	r7, r8, #8
   1e620:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1e624:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   1e628:	f7fe f85c 	bl	1c6e4 <__aeabi_i2d>
   1e62c:	4622      	mov	r2, r4
   1e62e:	462b      	mov	r3, r5
   1e630:	f7fe f8c2 	bl	1c7b8 <__aeabi_dmul>
   1e634:	465b      	mov	r3, fp
   1e636:	4652      	mov	r2, sl
   1e638:	e967 0102 	strd	r0, r1, [r7, #-8]!
   1e63c:	4620      	mov	r0, r4
   1e63e:	4629      	mov	r1, r5
   1e640:	f7fe f8ba 	bl	1c7b8 <__aeabi_dmul>
   1e644:	ab0c      	add	r3, sp, #48	; 0x30
   1e646:	4604      	mov	r4, r0
   1e648:	460d      	mov	r5, r1
   1e64a:	429e      	cmp	r6, r3
   1e64c:	d1ea      	bne.n	1e624 <__kernel_rem_pio2+0x464>
   1e64e:	ab48      	add	r3, sp, #288	; 0x120
   1e650:	46c3      	mov	fp, r8
   1e652:	f04f 0a00 	mov.w	sl, #0
   1e656:	9303      	str	r3, [sp, #12]
   1e658:	e9cd 3901 	strd	r3, r9, [sp, #4]
   1e65c:	f8dd 9014 	ldr.w	r9, [sp, #20]
   1e660:	f1b9 0f00 	cmp.w	r9, #0
   1e664:	db2b      	blt.n	1e6be <__kernel_rem_pio2+0x4fe>
   1e666:	f8df 8130 	ldr.w	r8, [pc, #304]	; 1e798 <__kernel_rem_pio2+0x5d8>
   1e66a:	465d      	mov	r5, fp
   1e66c:	2400      	movs	r4, #0
   1e66e:	2600      	movs	r6, #0
   1e670:	2700      	movs	r7, #0
   1e672:	a343      	add	r3, pc, #268	; (adr r3, 1e780 <__kernel_rem_pio2+0x5c0>)
   1e674:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e678:	e003      	b.n	1e682 <__kernel_rem_pio2+0x4c2>
   1e67a:	4554      	cmp	r4, sl
   1e67c:	dc10      	bgt.n	1e6a0 <__kernel_rem_pio2+0x4e0>
   1e67e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   1e682:	3401      	adds	r4, #1
   1e684:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   1e688:	f7fe f896 	bl	1c7b8 <__aeabi_dmul>
   1e68c:	4602      	mov	r2, r0
   1e68e:	460b      	mov	r3, r1
   1e690:	4630      	mov	r0, r6
   1e692:	4639      	mov	r1, r7
   1e694:	f7fd feda 	bl	1c44c <__adddf3>
   1e698:	45a1      	cmp	r9, r4
   1e69a:	4606      	mov	r6, r0
   1e69c:	460f      	mov	r7, r1
   1e69e:	daec      	bge.n	1e67a <__kernel_rem_pio2+0x4ba>
   1e6a0:	9a02      	ldr	r2, [sp, #8]
   1e6a2:	f1ab 0b08 	sub.w	fp, fp, #8
   1e6a6:	9b01      	ldr	r3, [sp, #4]
   1e6a8:	4592      	cmp	sl, r2
   1e6aa:	e8e3 6702 	strd	r6, r7, [r3], #8
   1e6ae:	9301      	str	r3, [sp, #4]
   1e6b0:	f10a 0301 	add.w	r3, sl, #1
   1e6b4:	d006      	beq.n	1e6c4 <__kernel_rem_pio2+0x504>
   1e6b6:	f1b9 0f00 	cmp.w	r9, #0
   1e6ba:	469a      	mov	sl, r3
   1e6bc:	dad3      	bge.n	1e666 <__kernel_rem_pio2+0x4a6>
   1e6be:	2600      	movs	r6, #0
   1e6c0:	2700      	movs	r7, #0
   1e6c2:	e7ed      	b.n	1e6a0 <__kernel_rem_pio2+0x4e0>
   1e6c4:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1e6c6:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1e6ca:	2b03      	cmp	r3, #3
   1e6cc:	d82b      	bhi.n	1e726 <__kernel_rem_pio2+0x566>
   1e6ce:	e8df f013 	tbh	[pc, r3, lsl #1]
   1e6d2:	00f5      	.short	0x00f5
   1e6d4:	00e400e4 	.word	0x00e400e4
   1e6d8:	0067      	.short	0x0067
   1e6da:	ab48      	add	r3, sp, #288	; 0x120
   1e6dc:	2400      	movs	r4, #0
   1e6de:	2500      	movs	r5, #0
   1e6e0:	9303      	str	r3, [sp, #12]
   1e6e2:	9903      	ldr	r1, [sp, #12]
   1e6e4:	462b      	mov	r3, r5
   1e6e6:	4622      	mov	r2, r4
   1e6e8:	e9d1 0100 	ldrd	r0, r1, [r1]
   1e6ec:	f7fd feac 	bl	1c448 <__aeabi_dsub>
   1e6f0:	9b04      	ldr	r3, [sp, #16]
   1e6f2:	2b00      	cmp	r3, #0
   1e6f4:	f040 813e 	bne.w	1e974 <__kernel_rem_pio2+0x7b4>
   1e6f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e6fa:	f1b9 0f00 	cmp.w	r9, #0
   1e6fe:	e9c3 4500 	strd	r4, r5, [r3]
   1e702:	dd0d      	ble.n	1e720 <__kernel_rem_pio2+0x560>
   1e704:	ad4a      	add	r5, sp, #296	; 0x128
   1e706:	2401      	movs	r4, #1
   1e708:	3401      	adds	r4, #1
   1e70a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   1e70e:	f7fd fe9d 	bl	1c44c <__adddf3>
   1e712:	45a1      	cmp	r9, r4
   1e714:	daf8      	bge.n	1e708 <__kernel_rem_pio2+0x548>
   1e716:	9b04      	ldr	r3, [sp, #16]
   1e718:	b113      	cbz	r3, 1e720 <__kernel_rem_pio2+0x560>
   1e71a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1e71e:	4619      	mov	r1, r3
   1e720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e722:	e9c3 0102 	strd	r0, r1, [r3, #8]
   1e726:	9b07      	ldr	r3, [sp, #28]
   1e728:	f003 0007 	and.w	r0, r3, #7
   1e72c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1e730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e734:	9b01      	ldr	r3, [sp, #4]
   1e736:	a90c      	add	r1, sp, #48	; 0x30
   1e738:	1e5a      	subs	r2, r3, #1
   1e73a:	ab0c      	add	r3, sp, #48	; 0x30
   1e73c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1e740:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1e744:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1e748:	e6e6      	b.n	1e518 <__kernel_rem_pio2+0x358>
   1e74a:	9b01      	ldr	r3, [sp, #4]
   1e74c:	f108 0801 	add.w	r8, r8, #1
   1e750:	2502      	movs	r5, #2
   1e752:	2b00      	cmp	r3, #0
   1e754:	f73f aebe 	bgt.w	1e4d4 <__kernel_rem_pio2+0x314>
   1e758:	4632      	mov	r2, r6
   1e75a:	463b      	mov	r3, r7
   1e75c:	2000      	movs	r0, #0
   1e75e:	490a      	ldr	r1, [pc, #40]	; (1e788 <__kernel_rem_pio2+0x5c8>)
   1e760:	f7fd fe72 	bl	1c448 <__aeabi_dsub>
   1e764:	4606      	mov	r6, r0
   1e766:	460f      	mov	r7, r1
   1e768:	e625      	b.n	1e3b6 <__kernel_rem_pio2+0x1f6>
   1e76a:	2100      	movs	r1, #0
   1e76c:	f06f 0317 	mvn.w	r3, #23
   1e770:	9107      	str	r1, [sp, #28]
   1e772:	e545      	b.n	1e200 <__kernel_rem_pio2+0x40>
   1e774:	f3af 8000 	nop.w
   1e778:	00000000 	.word	0x00000000
   1e77c:	3ff00000 	.word	0x3ff00000
   1e780:	40000000 	.word	0x40000000
   1e784:	3ff921fb 	.word	0x3ff921fb
   1e788:	3ff00000 	.word	0x3ff00000
   1e78c:	3fe00000 	.word	0x3fe00000
   1e790:	3ffffffe 	.word	0x3ffffffe
   1e794:	3e700000 	.word	0x3e700000
   1e798:	00041dd0 	.word	0x00041dd0
   1e79c:	ab48      	add	r3, sp, #288	; 0x120
   1e79e:	9303      	str	r3, [sp, #12]
   1e7a0:	f1b9 0f00 	cmp.w	r9, #0
   1e7a4:	f340 8119 	ble.w	1e9da <__kernel_rem_pio2+0x81a>
   1e7a8:	9a03      	ldr	r2, [sp, #12]
   1e7aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
   1e7ae:	eb02 08c9 	add.w	r8, r2, r9, lsl #3
   1e7b2:	9301      	str	r3, [sp, #4]
   1e7b4:	e9d8 ab00 	ldrd	sl, fp, [r8]
   1e7b8:	e978 6702 	ldrd	r6, r7, [r8, #-8]!
   1e7bc:	4652      	mov	r2, sl
   1e7be:	465b      	mov	r3, fp
   1e7c0:	4630      	mov	r0, r6
   1e7c2:	4639      	mov	r1, r7
   1e7c4:	f7fd fe42 	bl	1c44c <__adddf3>
   1e7c8:	4604      	mov	r4, r0
   1e7ca:	460d      	mov	r5, r1
   1e7cc:	4602      	mov	r2, r0
   1e7ce:	460b      	mov	r3, r1
   1e7d0:	4630      	mov	r0, r6
   1e7d2:	4639      	mov	r1, r7
   1e7d4:	f7fd fe38 	bl	1c448 <__aeabi_dsub>
   1e7d8:	465b      	mov	r3, fp
   1e7da:	4652      	mov	r2, sl
   1e7dc:	46ab      	mov	fp, r5
   1e7de:	f7fd fe35 	bl	1c44c <__adddf3>
   1e7e2:	9b03      	ldr	r3, [sp, #12]
   1e7e4:	46a2      	mov	sl, r4
   1e7e6:	4543      	cmp	r3, r8
   1e7e8:	e9c8 0102 	strd	r0, r1, [r8, #8]
   1e7ec:	e9c8 4500 	strd	r4, r5, [r8]
   1e7f0:	d1e2      	bne.n	1e7b8 <__kernel_rem_pio2+0x5f8>
   1e7f2:	f1b9 0f01 	cmp.w	r9, #1
   1e7f6:	f340 80f0 	ble.w	1e9da <__kernel_rem_pio2+0x81a>
   1e7fa:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   1e7fe:	9b01      	ldr	r3, [sp, #4]
   1e800:	9903      	ldr	r1, [sp, #12]
   1e802:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
   1e806:	444a      	add	r2, r9
   1e808:	440b      	add	r3, r1
   1e80a:	00d2      	lsls	r2, r2, #3
   1e80c:	f102 0b08 	add.w	fp, r2, #8
   1e810:	9201      	str	r2, [sp, #4]
   1e812:	e9d3 6700 	ldrd	r6, r7, [r3]
   1e816:	448b      	add	fp, r1
   1e818:	4632      	mov	r2, r6
   1e81a:	463b      	mov	r3, r7
   1e81c:	e97b 8902 	ldrd	r8, r9, [fp, #-8]!
   1e820:	4640      	mov	r0, r8
   1e822:	4649      	mov	r1, r9
   1e824:	f7fd fe12 	bl	1c44c <__adddf3>
   1e828:	4604      	mov	r4, r0
   1e82a:	460d      	mov	r5, r1
   1e82c:	4602      	mov	r2, r0
   1e82e:	460b      	mov	r3, r1
   1e830:	4640      	mov	r0, r8
   1e832:	4649      	mov	r1, r9
   1e834:	f7fd fe08 	bl	1c448 <__aeabi_dsub>
   1e838:	4632      	mov	r2, r6
   1e83a:	463b      	mov	r3, r7
   1e83c:	4626      	mov	r6, r4
   1e83e:	f7fd fe05 	bl	1c44c <__adddf3>
   1e842:	45da      	cmp	sl, fp
   1e844:	462f      	mov	r7, r5
   1e846:	e9cb 0102 	strd	r0, r1, [fp, #8]
   1e84a:	e9cb 4500 	strd	r4, r5, [fp]
   1e84e:	d1e3      	bne.n	1e818 <__kernel_rem_pio2+0x658>
   1e850:	9c01      	ldr	r4, [sp, #4]
   1e852:	2000      	movs	r0, #0
   1e854:	9b03      	ldr	r3, [sp, #12]
   1e856:	2100      	movs	r1, #0
   1e858:	3410      	adds	r4, #16
   1e85a:	f103 0510 	add.w	r5, r3, #16
   1e85e:	441c      	add	r4, r3
   1e860:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1e864:	f7fd fdf2 	bl	1c44c <__adddf3>
   1e868:	42a5      	cmp	r5, r4
   1e86a:	d1f9      	bne.n	1e860 <__kernel_rem_pio2+0x6a0>
   1e86c:	9c03      	ldr	r4, [sp, #12]
   1e86e:	9e04      	ldr	r6, [sp, #16]
   1e870:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e874:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
   1e878:	2e00      	cmp	r6, #0
   1e87a:	f040 8086 	bne.w	1e98a <__kernel_rem_pio2+0x7ca>
   1e87e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1e880:	e9c6 2300 	strd	r2, r3, [r6]
   1e884:	9b07      	ldr	r3, [sp, #28]
   1e886:	e9c6 0104 	strd	r0, r1, [r6, #16]
   1e88a:	f003 0007 	and.w	r0, r3, #7
   1e88e:	e9c6 4502 	strd	r4, r5, [r6, #8]
   1e892:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1e896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e89a:	9e06      	ldr	r6, [sp, #24]
   1e89c:	2400      	movs	r4, #0
   1e89e:	9f03      	ldr	r7, [sp, #12]
   1e8a0:	2500      	movs	r5, #0
   1e8a2:	3608      	adds	r6, #8
   1e8a4:	443e      	add	r6, r7
   1e8a6:	4620      	mov	r0, r4
   1e8a8:	4629      	mov	r1, r5
   1e8aa:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
   1e8ae:	f7fd fdcd 	bl	1c44c <__adddf3>
   1e8b2:	4604      	mov	r4, r0
   1e8b4:	42b7      	cmp	r7, r6
   1e8b6:	460d      	mov	r5, r1
   1e8b8:	d1f5      	bne.n	1e8a6 <__kernel_rem_pio2+0x6e6>
   1e8ba:	e712      	b.n	1e6e2 <__kernel_rem_pio2+0x522>
   1e8bc:	9c06      	ldr	r4, [sp, #24]
   1e8be:	2000      	movs	r0, #0
   1e8c0:	9d03      	ldr	r5, [sp, #12]
   1e8c2:	2100      	movs	r1, #0
   1e8c4:	3408      	adds	r4, #8
   1e8c6:	442c      	add	r4, r5
   1e8c8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1e8cc:	f7fd fdbe 	bl	1c44c <__adddf3>
   1e8d0:	42a5      	cmp	r5, r4
   1e8d2:	d1f9      	bne.n	1e8c8 <__kernel_rem_pio2+0x708>
   1e8d4:	9b04      	ldr	r3, [sp, #16]
   1e8d6:	b113      	cbz	r3, 1e8de <__kernel_rem_pio2+0x71e>
   1e8d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1e8dc:	4619      	mov	r1, r3
   1e8de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e8e0:	e9c3 0100 	strd	r0, r1, [r3]
   1e8e4:	9b07      	ldr	r3, [sp, #28]
   1e8e6:	f003 0007 	and.w	r0, r3, #7
   1e8ea:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1e8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8f2:	2400      	movs	r4, #0
   1e8f4:	e5fe      	b.n	1e4f4 <__kernel_rem_pio2+0x334>
   1e8f6:	9c06      	ldr	r4, [sp, #24]
   1e8f8:	f8cd 801c 	str.w	r8, [sp, #28]
   1e8fc:	4260      	negs	r0, r4
   1e8fe:	9504      	str	r5, [sp, #16]
   1e900:	ec47 6b10 	vmov	d0, r6, r7
   1e904:	f000 f9c0 	bl	1ec88 <scalbn>
   1e908:	2200      	movs	r2, #0
   1e90a:	ee10 0a10 	vmov	r0, s0
   1e90e:	4b34      	ldr	r3, [pc, #208]	; (1e9e0 <__kernel_rem_pio2+0x820>)
   1e910:	ec57 6b10 	vmov	r6, r7, d0
   1e914:	4639      	mov	r1, r7
   1e916:	f7fe f9d5 	bl	1ccc4 <__aeabi_dcmpge>
   1e91a:	b308      	cbz	r0, 1e960 <__kernel_rem_pio2+0x7a0>
   1e91c:	3418      	adds	r4, #24
   1e91e:	2200      	movs	r2, #0
   1e920:	4b30      	ldr	r3, [pc, #192]	; (1e9e4 <__kernel_rem_pio2+0x824>)
   1e922:	4630      	mov	r0, r6
   1e924:	4639      	mov	r1, r7
   1e926:	9406      	str	r4, [sp, #24]
   1e928:	f7fd ff46 	bl	1c7b8 <__aeabi_dmul>
   1e92c:	9d01      	ldr	r5, [sp, #4]
   1e92e:	f7fe f9dd 	bl	1ccec <__aeabi_d2iz>
   1e932:	4604      	mov	r4, r0
   1e934:	f7fd fed6 	bl	1c6e4 <__aeabi_i2d>
   1e938:	2200      	movs	r2, #0
   1e93a:	4b29      	ldr	r3, [pc, #164]	; (1e9e0 <__kernel_rem_pio2+0x820>)
   1e93c:	f105 0901 	add.w	r9, r5, #1
   1e940:	f7fd ff3a 	bl	1c7b8 <__aeabi_dmul>
   1e944:	460b      	mov	r3, r1
   1e946:	4602      	mov	r2, r0
   1e948:	4639      	mov	r1, r7
   1e94a:	4630      	mov	r0, r6
   1e94c:	f7fd fd7c 	bl	1c448 <__aeabi_dsub>
   1e950:	f7fe f9cc 	bl	1ccec <__aeabi_d2iz>
   1e954:	ab0c      	add	r3, sp, #48	; 0x30
   1e956:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
   1e95a:	f843 4029 	str.w	r4, [r3, r9, lsl #2]
   1e95e:	e645      	b.n	1e5ec <__kernel_rem_pio2+0x42c>
   1e960:	4630      	mov	r0, r6
   1e962:	4639      	mov	r1, r7
   1e964:	9c01      	ldr	r4, [sp, #4]
   1e966:	f7fe f9c1 	bl	1ccec <__aeabi_d2iz>
   1e96a:	aa0c      	add	r2, sp, #48	; 0x30
   1e96c:	46a1      	mov	r9, r4
   1e96e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
   1e972:	e63b      	b.n	1e5ec <__kernel_rem_pio2+0x42c>
   1e974:	4622      	mov	r2, r4
   1e976:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   1e97a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1e97c:	f1b9 0f00 	cmp.w	r9, #0
   1e980:	e9c4 2300 	strd	r2, r3, [r4]
   1e984:	f73f aebe 	bgt.w	1e704 <__kernel_rem_pio2+0x544>
   1e988:	e6c7      	b.n	1e71a <__kernel_rem_pio2+0x55a>
   1e98a:	f103 4700 	add.w	r7, r3, #2147483648	; 0x80000000
   1e98e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1e992:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1e994:	4626      	mov	r6, r4
   1e996:	4694      	mov	ip, r2
   1e998:	f105 4400 	add.w	r4, r5, #2147483648	; 0x80000000
   1e99c:	e9c1 0304 	strd	r0, r3, [r1, #16]
   1e9a0:	9b07      	ldr	r3, [sp, #28]
   1e9a2:	f003 0007 	and.w	r0, r3, #7
   1e9a6:	e9c1 c700 	strd	ip, r7, [r1]
   1e9aa:	e9c1 6402 	strd	r6, r4, [r1, #8]
   1e9ae:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1e9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9b6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1e9b8:	2b03      	cmp	r3, #3
   1e9ba:	f63f aeb4 	bhi.w	1e726 <__kernel_rem_pio2+0x566>
   1e9be:	a201      	add	r2, pc, #4	; (adr r2, 1e9c4 <__kernel_rem_pio2+0x804>)
   1e9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e9c4:	0001e9d5 	.word	0x0001e9d5
   1e9c8:	0001e6db 	.word	0x0001e6db
   1e9cc:	0001e6db 	.word	0x0001e6db
   1e9d0:	0001e79d 	.word	0x0001e79d
   1e9d4:	2000      	movs	r0, #0
   1e9d6:	2100      	movs	r1, #0
   1e9d8:	e77c      	b.n	1e8d4 <__kernel_rem_pio2+0x714>
   1e9da:	2000      	movs	r0, #0
   1e9dc:	2100      	movs	r1, #0
   1e9de:	e745      	b.n	1e86c <__kernel_rem_pio2+0x6ac>
   1e9e0:	41700000 	.word	0x41700000
   1e9e4:	3e700000 	.word	0x3e700000

0001e9e8 <__kernel_sin>:
   1e9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e9ec:	ec55 4b10 	vmov	r4, r5, d0
   1e9f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   1e9f4:	4682      	mov	sl, r0
   1e9f6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   1e9fa:	ed2d 8b02 	vpush	{d8}
   1e9fe:	eeb0 8a41 	vmov.f32	s16, s2
   1ea02:	eef0 8a61 	vmov.f32	s17, s3
   1ea06:	b083      	sub	sp, #12
   1ea08:	da07      	bge.n	1ea1a <__kernel_sin+0x32>
   1ea0a:	ee10 0a10 	vmov	r0, s0
   1ea0e:	4629      	mov	r1, r5
   1ea10:	f7fe f96c 	bl	1ccec <__aeabi_d2iz>
   1ea14:	2800      	cmp	r0, #0
   1ea16:	f000 808e 	beq.w	1eb36 <__kernel_sin+0x14e>
   1ea1a:	4622      	mov	r2, r4
   1ea1c:	462b      	mov	r3, r5
   1ea1e:	4620      	mov	r0, r4
   1ea20:	4629      	mov	r1, r5
   1ea22:	f7fd fec9 	bl	1c7b8 <__aeabi_dmul>
   1ea26:	4606      	mov	r6, r0
   1ea28:	460f      	mov	r7, r1
   1ea2a:	4602      	mov	r2, r0
   1ea2c:	460b      	mov	r3, r1
   1ea2e:	4620      	mov	r0, r4
   1ea30:	4629      	mov	r1, r5
   1ea32:	f7fd fec1 	bl	1c7b8 <__aeabi_dmul>
   1ea36:	4680      	mov	r8, r0
   1ea38:	4689      	mov	r9, r1
   1ea3a:	4630      	mov	r0, r6
   1ea3c:	4639      	mov	r1, r7
   1ea3e:	a345      	add	r3, pc, #276	; (adr r3, 1eb54 <__kernel_sin+0x16c>)
   1ea40:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ea44:	f7fd feb8 	bl	1c7b8 <__aeabi_dmul>
   1ea48:	a344      	add	r3, pc, #272	; (adr r3, 1eb5c <__kernel_sin+0x174>)
   1ea4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ea4e:	f7fd fcfb 	bl	1c448 <__aeabi_dsub>
   1ea52:	4632      	mov	r2, r6
   1ea54:	463b      	mov	r3, r7
   1ea56:	f7fd feaf 	bl	1c7b8 <__aeabi_dmul>
   1ea5a:	a342      	add	r3, pc, #264	; (adr r3, 1eb64 <__kernel_sin+0x17c>)
   1ea5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ea60:	f7fd fcf4 	bl	1c44c <__adddf3>
   1ea64:	4632      	mov	r2, r6
   1ea66:	463b      	mov	r3, r7
   1ea68:	f7fd fea6 	bl	1c7b8 <__aeabi_dmul>
   1ea6c:	a33f      	add	r3, pc, #252	; (adr r3, 1eb6c <__kernel_sin+0x184>)
   1ea6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ea72:	f7fd fce9 	bl	1c448 <__aeabi_dsub>
   1ea76:	4632      	mov	r2, r6
   1ea78:	463b      	mov	r3, r7
   1ea7a:	f7fd fe9d 	bl	1c7b8 <__aeabi_dmul>
   1ea7e:	a33d      	add	r3, pc, #244	; (adr r3, 1eb74 <__kernel_sin+0x18c>)
   1ea80:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ea84:	f7fd fce2 	bl	1c44c <__adddf3>
   1ea88:	e9cd 0100 	strd	r0, r1, [sp]
   1ea8c:	f1ba 0f00 	cmp.w	sl, #0
   1ea90:	d037      	beq.n	1eb02 <__kernel_sin+0x11a>
   1ea92:	2200      	movs	r2, #0
   1ea94:	4b2e      	ldr	r3, [pc, #184]	; (1eb50 <__kernel_sin+0x168>)
   1ea96:	ec51 0b18 	vmov	r0, r1, d8
   1ea9a:	f7fd fe8d 	bl	1c7b8 <__aeabi_dmul>
   1ea9e:	4682      	mov	sl, r0
   1eaa0:	468b      	mov	fp, r1
   1eaa2:	4640      	mov	r0, r8
   1eaa4:	4649      	mov	r1, r9
   1eaa6:	e9dd 2300 	ldrd	r2, r3, [sp]
   1eaaa:	f7fd fe85 	bl	1c7b8 <__aeabi_dmul>
   1eaae:	4602      	mov	r2, r0
   1eab0:	460b      	mov	r3, r1
   1eab2:	4650      	mov	r0, sl
   1eab4:	4659      	mov	r1, fp
   1eab6:	f7fd fcc7 	bl	1c448 <__aeabi_dsub>
   1eaba:	4632      	mov	r2, r6
   1eabc:	463b      	mov	r3, r7
   1eabe:	f7fd fe7b 	bl	1c7b8 <__aeabi_dmul>
   1eac2:	ec53 2b18 	vmov	r2, r3, d8
   1eac6:	f7fd fcbf 	bl	1c448 <__aeabi_dsub>
   1eaca:	4606      	mov	r6, r0
   1eacc:	460f      	mov	r7, r1
   1eace:	4640      	mov	r0, r8
   1ead0:	4649      	mov	r1, r9
   1ead2:	a31d      	add	r3, pc, #116	; (adr r3, 1eb48 <__kernel_sin+0x160>)
   1ead4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ead8:	f7fd fe6e 	bl	1c7b8 <__aeabi_dmul>
   1eadc:	4602      	mov	r2, r0
   1eade:	460b      	mov	r3, r1
   1eae0:	4630      	mov	r0, r6
   1eae2:	4639      	mov	r1, r7
   1eae4:	f7fd fcb2 	bl	1c44c <__adddf3>
   1eae8:	4602      	mov	r2, r0
   1eaea:	460b      	mov	r3, r1
   1eaec:	4620      	mov	r0, r4
   1eaee:	4629      	mov	r1, r5
   1eaf0:	f7fd fcaa 	bl	1c448 <__aeabi_dsub>
   1eaf4:	ec41 0b10 	vmov	d0, r0, r1
   1eaf8:	b003      	add	sp, #12
   1eafa:	ecbd 8b02 	vpop	{d8}
   1eafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb02:	4602      	mov	r2, r0
   1eb04:	460b      	mov	r3, r1
   1eb06:	4630      	mov	r0, r6
   1eb08:	4639      	mov	r1, r7
   1eb0a:	f7fd fe55 	bl	1c7b8 <__aeabi_dmul>
   1eb0e:	a30e      	add	r3, pc, #56	; (adr r3, 1eb48 <__kernel_sin+0x160>)
   1eb10:	e9d3 2300 	ldrd	r2, r3, [r3]
   1eb14:	f7fd fc98 	bl	1c448 <__aeabi_dsub>
   1eb18:	4642      	mov	r2, r8
   1eb1a:	464b      	mov	r3, r9
   1eb1c:	f7fd fe4c 	bl	1c7b8 <__aeabi_dmul>
   1eb20:	4622      	mov	r2, r4
   1eb22:	462b      	mov	r3, r5
   1eb24:	f7fd fc92 	bl	1c44c <__adddf3>
   1eb28:	ec41 0b10 	vmov	d0, r0, r1
   1eb2c:	b003      	add	sp, #12
   1eb2e:	ecbd 8b02 	vpop	{d8}
   1eb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb36:	ec45 4b10 	vmov	d0, r4, r5
   1eb3a:	b003      	add	sp, #12
   1eb3c:	ecbd 8b02 	vpop	{d8}
   1eb40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb44:	f3af 8000 	nop.w
   1eb48:	55555549 	.word	0x55555549
   1eb4c:	3fc55555 	.word	0x3fc55555
   1eb50:	3fe00000 	.word	0x3fe00000
   1eb54:	5acfd57c 	.word	0x5acfd57c
   1eb58:	3de5d93a 	.word	0x3de5d93a
   1eb5c:	8a2b9ceb 	.word	0x8a2b9ceb
   1eb60:	3e5ae5e6 	.word	0x3e5ae5e6
   1eb64:	57b1fe7d 	.word	0x57b1fe7d
   1eb68:	3ec71de3 	.word	0x3ec71de3
   1eb6c:	19c161d5 	.word	0x19c161d5
   1eb70:	3f2a01a0 	.word	0x3f2a01a0
   1eb74:	1110f8a6 	.word	0x1110f8a6
   1eb78:	3f811111 	.word	0x3f811111
   1eb7c:	00000000 	.word	0x00000000

0001eb80 <floor>:
   1eb80:	ec51 0b10 	vmov	r0, r1, d0
   1eb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eb86:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1eb8a:	460c      	mov	r4, r1
   1eb8c:	ee10 6a10 	vmov	r6, s0
   1eb90:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   1eb94:	2d13      	cmp	r5, #19
   1eb96:	dc30      	bgt.n	1ebfa <floor+0x7a>
   1eb98:	2d00      	cmp	r5, #0
   1eb9a:	db1e      	blt.n	1ebda <floor+0x5a>
   1eb9c:	4f38      	ldr	r7, [pc, #224]	; (1ec80 <floor+0x100>)
   1eb9e:	412f      	asrs	r7, r5
   1eba0:	ea07 0301 	and.w	r3, r7, r1
   1eba4:	4303      	orrs	r3, r0
   1eba6:	d02d      	beq.n	1ec04 <floor+0x84>
   1eba8:	a333      	add	r3, pc, #204	; (adr r3, 1ec78 <floor+0xf8>)
   1ebaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ebae:	f7fd fc4d 	bl	1c44c <__adddf3>
   1ebb2:	2200      	movs	r2, #0
   1ebb4:	2300      	movs	r3, #0
   1ebb6:	f7fe f88f 	bl	1ccd8 <__aeabi_dcmpgt>
   1ebba:	b148      	cbz	r0, 1ebd0 <floor+0x50>
   1ebbc:	2c00      	cmp	r4, #0
   1ebbe:	da04      	bge.n	1ebca <floor+0x4a>
   1ebc0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1ebc4:	fa43 f505 	asr.w	r5, r3, r5
   1ebc8:	442c      	add	r4, r5
   1ebca:	ea24 0407 	bic.w	r4, r4, r7
   1ebce:	2600      	movs	r6, #0
   1ebd0:	4623      	mov	r3, r4
   1ebd2:	4632      	mov	r2, r6
   1ebd4:	ec43 2b10 	vmov	d0, r2, r3
   1ebd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ebda:	a327      	add	r3, pc, #156	; (adr r3, 1ec78 <floor+0xf8>)
   1ebdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ebe0:	f7fd fc34 	bl	1c44c <__adddf3>
   1ebe4:	2200      	movs	r2, #0
   1ebe6:	2300      	movs	r3, #0
   1ebe8:	f7fe f876 	bl	1ccd8 <__aeabi_dcmpgt>
   1ebec:	2800      	cmp	r0, #0
   1ebee:	d0ef      	beq.n	1ebd0 <floor+0x50>
   1ebf0:	2c00      	cmp	r4, #0
   1ebf2:	db29      	blt.n	1ec48 <floor+0xc8>
   1ebf4:	2600      	movs	r6, #0
   1ebf6:	4634      	mov	r4, r6
   1ebf8:	e7ea      	b.n	1ebd0 <floor+0x50>
   1ebfa:	2d33      	cmp	r5, #51	; 0x33
   1ebfc:	dd05      	ble.n	1ec0a <floor+0x8a>
   1ebfe:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   1ec02:	d019      	beq.n	1ec38 <floor+0xb8>
   1ec04:	ec41 0b10 	vmov	d0, r0, r1
   1ec08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ec0a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   1ec0e:	f04f 37ff 	mov.w	r7, #4294967295
   1ec12:	40df      	lsrs	r7, r3
   1ec14:	4207      	tst	r7, r0
   1ec16:	d0f5      	beq.n	1ec04 <floor+0x84>
   1ec18:	a317      	add	r3, pc, #92	; (adr r3, 1ec78 <floor+0xf8>)
   1ec1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ec1e:	f7fd fc15 	bl	1c44c <__adddf3>
   1ec22:	2200      	movs	r2, #0
   1ec24:	2300      	movs	r3, #0
   1ec26:	f7fe f857 	bl	1ccd8 <__aeabi_dcmpgt>
   1ec2a:	2800      	cmp	r0, #0
   1ec2c:	d0d0      	beq.n	1ebd0 <floor+0x50>
   1ec2e:	2c00      	cmp	r4, #0
   1ec30:	db13      	blt.n	1ec5a <floor+0xda>
   1ec32:	ea26 0607 	bic.w	r6, r6, r7
   1ec36:	e7cb      	b.n	1ebd0 <floor+0x50>
   1ec38:	ee10 2a10 	vmov	r2, s0
   1ec3c:	460b      	mov	r3, r1
   1ec3e:	f7fd fc05 	bl	1c44c <__adddf3>
   1ec42:	ec41 0b10 	vmov	d0, r0, r1
   1ec46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ec48:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   1ec4c:	4a0d      	ldr	r2, [pc, #52]	; (1ec84 <floor+0x104>)
   1ec4e:	4333      	orrs	r3, r6
   1ec50:	2600      	movs	r6, #0
   1ec52:	42b3      	cmp	r3, r6
   1ec54:	bf18      	it	ne
   1ec56:	4614      	movne	r4, r2
   1ec58:	e7ba      	b.n	1ebd0 <floor+0x50>
   1ec5a:	2d14      	cmp	r5, #20
   1ec5c:	d008      	beq.n	1ec70 <floor+0xf0>
   1ec5e:	2301      	movs	r3, #1
   1ec60:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   1ec64:	fa03 f505 	lsl.w	r5, r3, r5
   1ec68:	19ae      	adds	r6, r5, r6
   1ec6a:	bf28      	it	cs
   1ec6c:	18e4      	addcs	r4, r4, r3
   1ec6e:	e7e0      	b.n	1ec32 <floor+0xb2>
   1ec70:	3401      	adds	r4, #1
   1ec72:	e7de      	b.n	1ec32 <floor+0xb2>
   1ec74:	f3af 8000 	nop.w
   1ec78:	8800759c 	.word	0x8800759c
   1ec7c:	7e37e43c 	.word	0x7e37e43c
   1ec80:	000fffff 	.word	0x000fffff
   1ec84:	bff00000 	.word	0xbff00000

0001ec88 <scalbn>:
   1ec88:	b538      	push	{r3, r4, r5, lr}
   1ec8a:	ec53 2b10 	vmov	r2, r3, d0
   1ec8e:	f3c3 510a 	ubfx	r1, r3, #20, #11
   1ec92:	461c      	mov	r4, r3
   1ec94:	4605      	mov	r5, r0
   1ec96:	bb81      	cbnz	r1, 1ecfa <scalbn+0x72>
   1ec98:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   1ec9c:	ee10 1a10 	vmov	r1, s0
   1eca0:	4321      	orrs	r1, r4
   1eca2:	d029      	beq.n	1ecf8 <scalbn+0x70>
   1eca4:	4c3c      	ldr	r4, [pc, #240]	; (1ed98 <scalbn+0x110>)
   1eca6:	4619      	mov	r1, r3
   1eca8:	2200      	movs	r2, #0
   1ecaa:	4b3c      	ldr	r3, [pc, #240]	; (1ed9c <scalbn+0x114>)
   1ecac:	ee10 0a10 	vmov	r0, s0
   1ecb0:	f7fd fd82 	bl	1c7b8 <__aeabi_dmul>
   1ecb4:	42a5      	cmp	r5, r4
   1ecb6:	4602      	mov	r2, r0
   1ecb8:	460b      	mov	r3, r1
   1ecba:	db16      	blt.n	1ecea <scalbn+0x62>
   1ecbc:	460c      	mov	r4, r1
   1ecbe:	f3c1 510a 	ubfx	r1, r1, #20, #11
   1ecc2:	3936      	subs	r1, #54	; 0x36
   1ecc4:	4429      	add	r1, r5
   1ecc6:	f240 70fe 	movw	r0, #2046	; 0x7fe
   1ecca:	4281      	cmp	r1, r0
   1eccc:	dc21      	bgt.n	1ed12 <scalbn+0x8a>
   1ecce:	2900      	cmp	r1, #0
   1ecd0:	dc45      	bgt.n	1ed5e <scalbn+0xd6>
   1ecd2:	f111 0f35 	cmn.w	r1, #53	; 0x35
   1ecd6:	da34      	bge.n	1ed42 <scalbn+0xba>
   1ecd8:	f24c 3150 	movw	r1, #50000	; 0xc350
   1ecdc:	428d      	cmp	r5, r1
   1ecde:	dc18      	bgt.n	1ed12 <scalbn+0x8a>
   1ece0:	2b00      	cmp	r3, #0
   1ece2:	a125      	add	r1, pc, #148	; (adr r1, 1ed78 <scalbn+0xf0>)
   1ece4:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ece8:	db40      	blt.n	1ed6c <scalbn+0xe4>
   1ecea:	a323      	add	r3, pc, #140	; (adr r3, 1ed78 <scalbn+0xf0>)
   1ecec:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ecf0:	f7fd fd62 	bl	1c7b8 <__aeabi_dmul>
   1ecf4:	ec41 0b10 	vmov	d0, r0, r1
   1ecf8:	bd38      	pop	{r3, r4, r5, pc}
   1ecfa:	f240 70ff 	movw	r0, #2047	; 0x7ff
   1ecfe:	4281      	cmp	r1, r0
   1ed00:	d1e0      	bne.n	1ecc4 <scalbn+0x3c>
   1ed02:	ee10 0a10 	vmov	r0, s0
   1ed06:	4619      	mov	r1, r3
   1ed08:	f7fd fba0 	bl	1c44c <__adddf3>
   1ed0c:	ec41 0b10 	vmov	d0, r0, r1
   1ed10:	bd38      	pop	{r3, r4, r5, pc}
   1ed12:	2b00      	cmp	r3, #0
   1ed14:	a11a      	add	r1, pc, #104	; (adr r1, 1ed80 <scalbn+0xf8>)
   1ed16:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ed1a:	db07      	blt.n	1ed2c <scalbn+0xa4>
   1ed1c:	a318      	add	r3, pc, #96	; (adr r3, 1ed80 <scalbn+0xf8>)
   1ed1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ed22:	f7fd fd49 	bl	1c7b8 <__aeabi_dmul>
   1ed26:	ec41 0b10 	vmov	d0, r0, r1
   1ed2a:	bd38      	pop	{r3, r4, r5, pc}
   1ed2c:	a116      	add	r1, pc, #88	; (adr r1, 1ed88 <scalbn+0x100>)
   1ed2e:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ed32:	a313      	add	r3, pc, #76	; (adr r3, 1ed80 <scalbn+0xf8>)
   1ed34:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ed38:	f7fd fd3e 	bl	1c7b8 <__aeabi_dmul>
   1ed3c:	ec41 0b10 	vmov	d0, r0, r1
   1ed40:	e7f3      	b.n	1ed2a <scalbn+0xa2>
   1ed42:	4817      	ldr	r0, [pc, #92]	; (1eda0 <scalbn+0x118>)
   1ed44:	3136      	adds	r1, #54	; 0x36
   1ed46:	4020      	ands	r0, r4
   1ed48:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   1ed4c:	4610      	mov	r0, r2
   1ed4e:	2200      	movs	r2, #0
   1ed50:	4619      	mov	r1, r3
   1ed52:	4b14      	ldr	r3, [pc, #80]	; (1eda4 <scalbn+0x11c>)
   1ed54:	f7fd fd30 	bl	1c7b8 <__aeabi_dmul>
   1ed58:	ec41 0b10 	vmov	d0, r0, r1
   1ed5c:	bd38      	pop	{r3, r4, r5, pc}
   1ed5e:	4810      	ldr	r0, [pc, #64]	; (1eda0 <scalbn+0x118>)
   1ed60:	4020      	ands	r0, r4
   1ed62:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   1ed66:	ec43 2b10 	vmov	d0, r2, r3
   1ed6a:	bd38      	pop	{r3, r4, r5, pc}
   1ed6c:	a108      	add	r1, pc, #32	; (adr r1, 1ed90 <scalbn+0x108>)
   1ed6e:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ed72:	e7ba      	b.n	1ecea <scalbn+0x62>
   1ed74:	f3af 8000 	nop.w
   1ed78:	c2f8f359 	.word	0xc2f8f359
   1ed7c:	01a56e1f 	.word	0x01a56e1f
   1ed80:	8800759c 	.word	0x8800759c
   1ed84:	7e37e43c 	.word	0x7e37e43c
   1ed88:	8800759c 	.word	0x8800759c
   1ed8c:	fe37e43c 	.word	0xfe37e43c
   1ed90:	c2f8f359 	.word	0xc2f8f359
   1ed94:	81a56e1f 	.word	0x81a56e1f
   1ed98:	ffff3cb0 	.word	0xffff3cb0
   1ed9c:	43500000 	.word	0x43500000
   1eda0:	800fffff 	.word	0x800fffff
   1eda4:	3c900000 	.word	0x3c900000

0001eda8 <_strtod_l>:
   1eda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1edac:	461f      	mov	r7, r3
   1edae:	b0a1      	sub	sp, #132	; 0x84
   1edb0:	2300      	movs	r3, #0
   1edb2:	460e      	mov	r6, r1
   1edb4:	9004      	str	r0, [sp, #16]
   1edb6:	f04f 0a00 	mov.w	sl, #0
   1edba:	931c      	str	r3, [sp, #112]	; 0x70
   1edbc:	f04f 0b00 	mov.w	fp, #0
   1edc0:	4b97      	ldr	r3, [pc, #604]	; (1f020 <_strtod_l+0x278>)
   1edc2:	9217      	str	r2, [sp, #92]	; 0x5c
   1edc4:	681b      	ldr	r3, [r3, #0]
   1edc6:	4618      	mov	r0, r3
   1edc8:	9305      	str	r3, [sp, #20]
   1edca:	f7fe f9ab 	bl	1d124 <strlen>
   1edce:	4604      	mov	r4, r0
   1edd0:	961b      	str	r6, [sp, #108]	; 0x6c
   1edd2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1edd4:	7813      	ldrb	r3, [r2, #0]
   1edd6:	2b0d      	cmp	r3, #13
   1edd8:	d832      	bhi.n	1ee40 <_strtod_l+0x98>
   1edda:	2b09      	cmp	r3, #9
   1eddc:	d236      	bcs.n	1ee4c <_strtod_l+0xa4>
   1edde:	2b00      	cmp	r3, #0
   1ede0:	d03e      	beq.n	1ee60 <_strtod_l+0xb8>
   1ede2:	2300      	movs	r3, #0
   1ede4:	930c      	str	r3, [sp, #48]	; 0x30
   1ede6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
   1ede8:	782b      	ldrb	r3, [r5, #0]
   1edea:	2b30      	cmp	r3, #48	; 0x30
   1edec:	f040 80a9 	bne.w	1ef42 <_strtod_l+0x19a>
   1edf0:	786b      	ldrb	r3, [r5, #1]
   1edf2:	2b58      	cmp	r3, #88	; 0x58
   1edf4:	d001      	beq.n	1edfa <_strtod_l+0x52>
   1edf6:	2b78      	cmp	r3, #120	; 0x78
   1edf8:	d167      	bne.n	1eeca <_strtod_l+0x122>
   1edfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1edfc:	a91b      	add	r1, sp, #108	; 0x6c
   1edfe:	9702      	str	r7, [sp, #8]
   1ee00:	9301      	str	r3, [sp, #4]
   1ee02:	ab1c      	add	r3, sp, #112	; 0x70
   1ee04:	4a87      	ldr	r2, [pc, #540]	; (1f024 <_strtod_l+0x27c>)
   1ee06:	9300      	str	r3, [sp, #0]
   1ee08:	ab1d      	add	r3, sp, #116	; 0x74
   1ee0a:	9804      	ldr	r0, [sp, #16]
   1ee0c:	f01d fe02 	bl	3ca14 <__gethex>
   1ee10:	f010 0407 	ands.w	r4, r0, #7
   1ee14:	4606      	mov	r6, r0
   1ee16:	d005      	beq.n	1ee24 <_strtod_l+0x7c>
   1ee18:	2c06      	cmp	r4, #6
   1ee1a:	d12b      	bne.n	1ee74 <_strtod_l+0xcc>
   1ee1c:	3501      	adds	r5, #1
   1ee1e:	2300      	movs	r3, #0
   1ee20:	951b      	str	r5, [sp, #108]	; 0x6c
   1ee22:	930c      	str	r3, [sp, #48]	; 0x30
   1ee24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1ee26:	2b00      	cmp	r3, #0
   1ee28:	f040 8572 	bne.w	1f910 <_strtod_l+0xb68>
   1ee2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ee2e:	b1e3      	cbz	r3, 1ee6a <_strtod_l+0xc2>
   1ee30:	4652      	mov	r2, sl
   1ee32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   1ee36:	ec43 2b10 	vmov	d0, r2, r3
   1ee3a:	b021      	add	sp, #132	; 0x84
   1ee3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee40:	2b2b      	cmp	r3, #43	; 0x2b
   1ee42:	d006      	beq.n	1ee52 <_strtod_l+0xaa>
   1ee44:	2b2d      	cmp	r3, #45	; 0x2d
   1ee46:	d013      	beq.n	1ee70 <_strtod_l+0xc8>
   1ee48:	2b20      	cmp	r3, #32
   1ee4a:	d1ca      	bne.n	1ede2 <_strtod_l+0x3a>
   1ee4c:	3201      	adds	r2, #1
   1ee4e:	921b      	str	r2, [sp, #108]	; 0x6c
   1ee50:	e7bf      	b.n	1edd2 <_strtod_l+0x2a>
   1ee52:	2300      	movs	r3, #0
   1ee54:	930c      	str	r3, [sp, #48]	; 0x30
   1ee56:	1c53      	adds	r3, r2, #1
   1ee58:	931b      	str	r3, [sp, #108]	; 0x6c
   1ee5a:	7853      	ldrb	r3, [r2, #1]
   1ee5c:	2b00      	cmp	r3, #0
   1ee5e:	d1c2      	bne.n	1ede6 <_strtod_l+0x3e>
   1ee60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1ee62:	961b      	str	r6, [sp, #108]	; 0x6c
   1ee64:	2b00      	cmp	r3, #0
   1ee66:	f040 8551 	bne.w	1f90c <_strtod_l+0xb64>
   1ee6a:	4652      	mov	r2, sl
   1ee6c:	465b      	mov	r3, fp
   1ee6e:	e7e2      	b.n	1ee36 <_strtod_l+0x8e>
   1ee70:	2301      	movs	r3, #1
   1ee72:	e7ef      	b.n	1ee54 <_strtod_l+0xac>
   1ee74:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1ee76:	b13a      	cbz	r2, 1ee88 <_strtod_l+0xe0>
   1ee78:	2135      	movs	r1, #53	; 0x35
   1ee7a:	a81e      	add	r0, sp, #120	; 0x78
   1ee7c:	f022 fb78 	bl	41570 <__copybits>
   1ee80:	991c      	ldr	r1, [sp, #112]	; 0x70
   1ee82:	9804      	ldr	r0, [sp, #16]
   1ee84:	f022 f8ac 	bl	40fe0 <_Bfree>
   1ee88:	3c01      	subs	r4, #1
   1ee8a:	2c04      	cmp	r4, #4
   1ee8c:	d806      	bhi.n	1ee9c <_strtod_l+0xf4>
   1ee8e:	e8df f004 	tbb	[pc, r4]
   1ee92:	030a      	.short	0x030a
   1ee94:	1714      	.short	0x1714
   1ee96:	0a          	.byte	0x0a
   1ee97:	00          	.byte	0x00
   1ee98:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
   1ee9c:	0731      	lsls	r1, r6, #28
   1ee9e:	d5c1      	bpl.n	1ee24 <_strtod_l+0x7c>
   1eea0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   1eea4:	e7be      	b.n	1ee24 <_strtod_l+0x7c>
   1eea6:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
   1eeaa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1eeac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1eeb0:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1eeb4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   1eeb8:	e7f0      	b.n	1ee9c <_strtod_l+0xf4>
   1eeba:	f8df b16c 	ldr.w	fp, [pc, #364]	; 1f028 <_strtod_l+0x280>
   1eebe:	e7ed      	b.n	1ee9c <_strtod_l+0xf4>
   1eec0:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   1eec4:	f04f 3aff 	mov.w	sl, #4294967295
   1eec8:	e7e8      	b.n	1ee9c <_strtod_l+0xf4>
   1eeca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1eecc:	1c5a      	adds	r2, r3, #1
   1eece:	921b      	str	r2, [sp, #108]	; 0x6c
   1eed0:	785b      	ldrb	r3, [r3, #1]
   1eed2:	2b30      	cmp	r3, #48	; 0x30
   1eed4:	d0f9      	beq.n	1eeca <_strtod_l+0x122>
   1eed6:	2b00      	cmp	r3, #0
   1eed8:	d0a4      	beq.n	1ee24 <_strtod_l+0x7c>
   1eeda:	2301      	movs	r3, #1
   1eedc:	f04f 0900 	mov.w	r9, #0
   1eee0:	9306      	str	r3, [sp, #24]
   1eee2:	220a      	movs	r2, #10
   1eee4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1eee6:	46c8      	mov	r8, r9
   1eee8:	f8cd 901c 	str.w	r9, [sp, #28]
   1eeec:	9309      	str	r3, [sp, #36]	; 0x24
   1eeee:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1eef0:	7805      	ldrb	r5, [r0, #0]
   1eef2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   1eef6:	b2d9      	uxtb	r1, r3
   1eef8:	2909      	cmp	r1, #9
   1eefa:	d924      	bls.n	1ef46 <_strtod_l+0x19e>
   1eefc:	4622      	mov	r2, r4
   1eefe:	9905      	ldr	r1, [sp, #20]
   1ef00:	f021 fd85 	bl	40a0e <strncmp>
   1ef04:	b378      	cbz	r0, 1ef66 <_strtod_l+0x1be>
   1ef06:	2000      	movs	r0, #0
   1ef08:	462b      	mov	r3, r5
   1ef0a:	4644      	mov	r4, r8
   1ef0c:	4602      	mov	r2, r0
   1ef0e:	9005      	str	r0, [sp, #20]
   1ef10:	2b65      	cmp	r3, #101	; 0x65
   1ef12:	d001      	beq.n	1ef18 <_strtod_l+0x170>
   1ef14:	2b45      	cmp	r3, #69	; 0x45
   1ef16:	d112      	bne.n	1ef3e <_strtod_l+0x196>
   1ef18:	b91c      	cbnz	r4, 1ef22 <_strtod_l+0x17a>
   1ef1a:	9b06      	ldr	r3, [sp, #24]
   1ef1c:	4303      	orrs	r3, r0
   1ef1e:	d09f      	beq.n	1ee60 <_strtod_l+0xb8>
   1ef20:	2400      	movs	r4, #0
   1ef22:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
   1ef24:	1c73      	adds	r3, r6, #1
   1ef26:	931b      	str	r3, [sp, #108]	; 0x6c
   1ef28:	7873      	ldrb	r3, [r6, #1]
   1ef2a:	2b2b      	cmp	r3, #43	; 0x2b
   1ef2c:	d071      	beq.n	1f012 <_strtod_l+0x26a>
   1ef2e:	2b2d      	cmp	r3, #45	; 0x2d
   1ef30:	d074      	beq.n	1f01c <_strtod_l+0x274>
   1ef32:	2700      	movs	r7, #0
   1ef34:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1ef38:	2909      	cmp	r1, #9
   1ef3a:	d97b      	bls.n	1f034 <_strtod_l+0x28c>
   1ef3c:	961b      	str	r6, [sp, #108]	; 0x6c
   1ef3e:	2500      	movs	r5, #0
   1ef40:	e098      	b.n	1f074 <_strtod_l+0x2cc>
   1ef42:	2300      	movs	r3, #0
   1ef44:	e7ca      	b.n	1eedc <_strtod_l+0x134>
   1ef46:	f1b8 0f08 	cmp.w	r8, #8
   1ef4a:	f100 0001 	add.w	r0, r0, #1
   1ef4e:	f108 0801 	add.w	r8, r8, #1
   1ef52:	bfd4      	ite	le
   1ef54:	9907      	ldrle	r1, [sp, #28]
   1ef56:	fb02 3909 	mlagt	r9, r2, r9, r3
   1ef5a:	901b      	str	r0, [sp, #108]	; 0x6c
   1ef5c:	bfdc      	itt	le
   1ef5e:	fb02 3301 	mlale	r3, r2, r1, r3
   1ef62:	9307      	strle	r3, [sp, #28]
   1ef64:	e7c3      	b.n	1eeee <_strtod_l+0x146>
   1ef66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ef68:	191a      	adds	r2, r3, r4
   1ef6a:	921b      	str	r2, [sp, #108]	; 0x6c
   1ef6c:	5d1b      	ldrb	r3, [r3, r4]
   1ef6e:	f1b8 0f00 	cmp.w	r8, #0
   1ef72:	d035      	beq.n	1efe0 <_strtod_l+0x238>
   1ef74:	4644      	mov	r4, r8
   1ef76:	9005      	str	r0, [sp, #20]
   1ef78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1ef7c:	2a09      	cmp	r2, #9
   1ef7e:	d912      	bls.n	1efa6 <_strtod_l+0x1fe>
   1ef80:	2201      	movs	r2, #1
   1ef82:	e7c5      	b.n	1ef10 <_strtod_l+0x168>
   1ef84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ef86:	3001      	adds	r0, #1
   1ef88:	1c5a      	adds	r2, r3, #1
   1ef8a:	921b      	str	r2, [sp, #108]	; 0x6c
   1ef8c:	785b      	ldrb	r3, [r3, #1]
   1ef8e:	2b30      	cmp	r3, #48	; 0x30
   1ef90:	d0f8      	beq.n	1ef84 <_strtod_l+0x1dc>
   1ef92:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   1ef96:	2a08      	cmp	r2, #8
   1ef98:	f200 84bf 	bhi.w	1f91a <_strtod_l+0xb72>
   1ef9c:	9005      	str	r0, [sp, #20]
   1ef9e:	2000      	movs	r0, #0
   1efa0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1efa2:	4604      	mov	r4, r0
   1efa4:	9209      	str	r2, [sp, #36]	; 0x24
   1efa6:	3b30      	subs	r3, #48	; 0x30
   1efa8:	f100 0201 	add.w	r2, r0, #1
   1efac:	d012      	beq.n	1efd4 <_strtod_l+0x22c>
   1efae:	9905      	ldr	r1, [sp, #20]
   1efb0:	1905      	adds	r5, r0, r4
   1efb2:	4411      	add	r1, r2
   1efb4:	4622      	mov	r2, r4
   1efb6:	9105      	str	r1, [sp, #20]
   1efb8:	210a      	movs	r1, #10
   1efba:	42aa      	cmp	r2, r5
   1efbc:	d112      	bne.n	1efe4 <_strtod_l+0x23c>
   1efbe:	1822      	adds	r2, r4, r0
   1efc0:	3401      	adds	r4, #1
   1efc2:	2a08      	cmp	r2, #8
   1efc4:	4404      	add	r4, r0
   1efc6:	dc1a      	bgt.n	1effe <_strtod_l+0x256>
   1efc8:	9907      	ldr	r1, [sp, #28]
   1efca:	220a      	movs	r2, #10
   1efcc:	fb02 3301 	mla	r3, r2, r1, r3
   1efd0:	9307      	str	r3, [sp, #28]
   1efd2:	2200      	movs	r2, #0
   1efd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1efd6:	4610      	mov	r0, r2
   1efd8:	1c59      	adds	r1, r3, #1
   1efda:	911b      	str	r1, [sp, #108]	; 0x6c
   1efdc:	785b      	ldrb	r3, [r3, #1]
   1efde:	e7cb      	b.n	1ef78 <_strtod_l+0x1d0>
   1efe0:	4640      	mov	r0, r8
   1efe2:	e7d4      	b.n	1ef8e <_strtod_l+0x1e6>
   1efe4:	2a08      	cmp	r2, #8
   1efe6:	dc04      	bgt.n	1eff2 <_strtod_l+0x24a>
   1efe8:	9f07      	ldr	r7, [sp, #28]
   1efea:	434f      	muls	r7, r1
   1efec:	9707      	str	r7, [sp, #28]
   1efee:	3201      	adds	r2, #1
   1eff0:	e7e3      	b.n	1efba <_strtod_l+0x212>
   1eff2:	1c57      	adds	r7, r2, #1
   1eff4:	2f10      	cmp	r7, #16
   1eff6:	bfd8      	it	le
   1eff8:	fb01 f909 	mulle.w	r9, r1, r9
   1effc:	e7f7      	b.n	1efee <_strtod_l+0x246>
   1effe:	2c10      	cmp	r4, #16
   1f000:	bfdc      	itt	le
   1f002:	220a      	movle	r2, #10
   1f004:	fb02 3909 	mlale	r9, r2, r9, r3
   1f008:	e7e3      	b.n	1efd2 <_strtod_l+0x22a>
   1f00a:	2300      	movs	r3, #0
   1f00c:	2201      	movs	r2, #1
   1f00e:	9305      	str	r3, [sp, #20]
   1f010:	e783      	b.n	1ef1a <_strtod_l+0x172>
   1f012:	2700      	movs	r7, #0
   1f014:	1cb3      	adds	r3, r6, #2
   1f016:	931b      	str	r3, [sp, #108]	; 0x6c
   1f018:	78b3      	ldrb	r3, [r6, #2]
   1f01a:	e78b      	b.n	1ef34 <_strtod_l+0x18c>
   1f01c:	2701      	movs	r7, #1
   1f01e:	e7f9      	b.n	1f014 <_strtod_l+0x26c>
   1f020:	00042be4 	.word	0x00042be4
   1f024:	00042b5c 	.word	0x00042b5c
   1f028:	7ff00000 	.word	0x7ff00000
   1f02c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f02e:	1c59      	adds	r1, r3, #1
   1f030:	911b      	str	r1, [sp, #108]	; 0x6c
   1f032:	785b      	ldrb	r3, [r3, #1]
   1f034:	2b30      	cmp	r3, #48	; 0x30
   1f036:	d0f9      	beq.n	1f02c <_strtod_l+0x284>
   1f038:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   1f03c:	2908      	cmp	r1, #8
   1f03e:	f63f af7e 	bhi.w	1ef3e <_strtod_l+0x196>
   1f042:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
   1f046:	f04f 0e0a 	mov.w	lr, #10
   1f04a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f04c:	9308      	str	r3, [sp, #32]
   1f04e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f050:	1c59      	adds	r1, r3, #1
   1f052:	911b      	str	r1, [sp, #108]	; 0x6c
   1f054:	785b      	ldrb	r3, [r3, #1]
   1f056:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
   1f05a:	2d09      	cmp	r5, #9
   1f05c:	d92e      	bls.n	1f0bc <_strtod_l+0x314>
   1f05e:	9d08      	ldr	r5, [sp, #32]
   1f060:	1b49      	subs	r1, r1, r5
   1f062:	f644 651f 	movw	r5, #19999	; 0x4e1f
   1f066:	2908      	cmp	r1, #8
   1f068:	dc02      	bgt.n	1f070 <_strtod_l+0x2c8>
   1f06a:	4565      	cmp	r5, ip
   1f06c:	bfa8      	it	ge
   1f06e:	4665      	movge	r5, ip
   1f070:	b107      	cbz	r7, 1f074 <_strtod_l+0x2cc>
   1f072:	426d      	negs	r5, r5
   1f074:	2c00      	cmp	r4, #0
   1f076:	d14b      	bne.n	1f110 <_strtod_l+0x368>
   1f078:	9906      	ldr	r1, [sp, #24]
   1f07a:	4301      	orrs	r1, r0
   1f07c:	f47f aed2 	bne.w	1ee24 <_strtod_l+0x7c>
   1f080:	2a00      	cmp	r2, #0
   1f082:	f47f aeed 	bne.w	1ee60 <_strtod_l+0xb8>
   1f086:	2b4e      	cmp	r3, #78	; 0x4e
   1f088:	d022      	beq.n	1f0d0 <_strtod_l+0x328>
   1f08a:	dc1c      	bgt.n	1f0c6 <_strtod_l+0x31e>
   1f08c:	2b49      	cmp	r3, #73	; 0x49
   1f08e:	f47f aee7 	bne.w	1ee60 <_strtod_l+0xb8>
   1f092:	499a      	ldr	r1, [pc, #616]	; (1f2fc <_strtod_l+0x554>)
   1f094:	a81b      	add	r0, sp, #108	; 0x6c
   1f096:	f021 fe78 	bl	40d8a <__match>
   1f09a:	2800      	cmp	r0, #0
   1f09c:	f43f aee0 	beq.w	1ee60 <_strtod_l+0xb8>
   1f0a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f0a2:	a81b      	add	r0, sp, #108	; 0x6c
   1f0a4:	4996      	ldr	r1, [pc, #600]	; (1f300 <_strtod_l+0x558>)
   1f0a6:	3b01      	subs	r3, #1
   1f0a8:	931b      	str	r3, [sp, #108]	; 0x6c
   1f0aa:	f021 fe6e 	bl	40d8a <__match>
   1f0ae:	b910      	cbnz	r0, 1f0b6 <_strtod_l+0x30e>
   1f0b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f0b2:	3301      	adds	r3, #1
   1f0b4:	931b      	str	r3, [sp, #108]	; 0x6c
   1f0b6:	f8df b260 	ldr.w	fp, [pc, #608]	; 1f318 <_strtod_l+0x570>
   1f0ba:	e6b3      	b.n	1ee24 <_strtod_l+0x7c>
   1f0bc:	fb0e 3c0c 	mla	ip, lr, ip, r3
   1f0c0:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
   1f0c4:	e7c3      	b.n	1f04e <_strtod_l+0x2a6>
   1f0c6:	2b69      	cmp	r3, #105	; 0x69
   1f0c8:	d0e3      	beq.n	1f092 <_strtod_l+0x2ea>
   1f0ca:	2b6e      	cmp	r3, #110	; 0x6e
   1f0cc:	f47f aec8 	bne.w	1ee60 <_strtod_l+0xb8>
   1f0d0:	498c      	ldr	r1, [pc, #560]	; (1f304 <_strtod_l+0x55c>)
   1f0d2:	a81b      	add	r0, sp, #108	; 0x6c
   1f0d4:	f021 fe59 	bl	40d8a <__match>
   1f0d8:	2800      	cmp	r0, #0
   1f0da:	f43f aec1 	beq.w	1ee60 <_strtod_l+0xb8>
   1f0de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f0e0:	781b      	ldrb	r3, [r3, #0]
   1f0e2:	2b28      	cmp	r3, #40	; 0x28
   1f0e4:	d10e      	bne.n	1f104 <_strtod_l+0x35c>
   1f0e6:	aa1e      	add	r2, sp, #120	; 0x78
   1f0e8:	4987      	ldr	r1, [pc, #540]	; (1f308 <_strtod_l+0x560>)
   1f0ea:	a81b      	add	r0, sp, #108	; 0x6c
   1f0ec:	f021 fe61 	bl	40db2 <__hexnan>
   1f0f0:	2805      	cmp	r0, #5
   1f0f2:	d107      	bne.n	1f104 <_strtod_l+0x35c>
   1f0f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1f0f6:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
   1f0fa:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   1f0fe:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   1f102:	e68f      	b.n	1ee24 <_strtod_l+0x7c>
   1f104:	4881      	ldr	r0, [pc, #516]	; (1f30c <_strtod_l+0x564>)
   1f106:	f001 f9c7 	bl	20498 <nan>
   1f10a:	ec5b ab10 	vmov	sl, fp, d0
   1f10e:	e689      	b.n	1ee24 <_strtod_l+0x7c>
   1f110:	9b05      	ldr	r3, [sp, #20]
   1f112:	f1b8 0f00 	cmp.w	r8, #0
   1f116:	bf08      	it	eq
   1f118:	46a0      	moveq	r8, r4
   1f11a:	2c10      	cmp	r4, #16
   1f11c:	9807      	ldr	r0, [sp, #28]
   1f11e:	eba5 0303 	sub.w	r3, r5, r3
   1f122:	4626      	mov	r6, r4
   1f124:	bfa8      	it	ge
   1f126:	2610      	movge	r6, #16
   1f128:	9308      	str	r3, [sp, #32]
   1f12a:	f7fd facb 	bl	1c6c4 <__aeabi_ui2d>
   1f12e:	2c09      	cmp	r4, #9
   1f130:	4682      	mov	sl, r0
   1f132:	468b      	mov	fp, r1
   1f134:	dd13      	ble.n	1f15e <_strtod_l+0x3b6>
   1f136:	4b76      	ldr	r3, [pc, #472]	; (1f310 <_strtod_l+0x568>)
   1f138:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1f13c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   1f140:	f7fd fb3a 	bl	1c7b8 <__aeabi_dmul>
   1f144:	4682      	mov	sl, r0
   1f146:	468b      	mov	fp, r1
   1f148:	4648      	mov	r0, r9
   1f14a:	f7fd fabb 	bl	1c6c4 <__aeabi_ui2d>
   1f14e:	4602      	mov	r2, r0
   1f150:	460b      	mov	r3, r1
   1f152:	4650      	mov	r0, sl
   1f154:	4659      	mov	r1, fp
   1f156:	f7fd f979 	bl	1c44c <__adddf3>
   1f15a:	4682      	mov	sl, r0
   1f15c:	468b      	mov	fp, r1
   1f15e:	2c0f      	cmp	r4, #15
   1f160:	dc38      	bgt.n	1f1d4 <_strtod_l+0x42c>
   1f162:	9b08      	ldr	r3, [sp, #32]
   1f164:	2b00      	cmp	r3, #0
   1f166:	f43f ae5d 	beq.w	1ee24 <_strtod_l+0x7c>
   1f16a:	dd24      	ble.n	1f1b6 <_strtod_l+0x40e>
   1f16c:	2b16      	cmp	r3, #22
   1f16e:	dc0b      	bgt.n	1f188 <_strtod_l+0x3e0>
   1f170:	4c67      	ldr	r4, [pc, #412]	; (1f310 <_strtod_l+0x568>)
   1f172:	4652      	mov	r2, sl
   1f174:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   1f178:	465b      	mov	r3, fp
   1f17a:	e9d4 0100 	ldrd	r0, r1, [r4]
   1f17e:	f7fd fb1b 	bl	1c7b8 <__aeabi_dmul>
   1f182:	4682      	mov	sl, r0
   1f184:	468b      	mov	fp, r1
   1f186:	e64d      	b.n	1ee24 <_strtod_l+0x7c>
   1f188:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
   1f18c:	9a08      	ldr	r2, [sp, #32]
   1f18e:	4293      	cmp	r3, r2
   1f190:	db20      	blt.n	1f1d4 <_strtod_l+0x42c>
   1f192:	f1c4 040f 	rsb	r4, r4, #15
   1f196:	4d5e      	ldr	r5, [pc, #376]	; (1f310 <_strtod_l+0x568>)
   1f198:	4652      	mov	r2, sl
   1f19a:	465b      	mov	r3, fp
   1f19c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
   1f1a0:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f1a4:	f7fd fb08 	bl	1c7b8 <__aeabi_dmul>
   1f1a8:	9b08      	ldr	r3, [sp, #32]
   1f1aa:	1b1c      	subs	r4, r3, r4
   1f1ac:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1f1b0:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f1b4:	e7e3      	b.n	1f17e <_strtod_l+0x3d6>
   1f1b6:	9b08      	ldr	r3, [sp, #32]
   1f1b8:	3316      	adds	r3, #22
   1f1ba:	db0b      	blt.n	1f1d4 <_strtod_l+0x42c>
   1f1bc:	9b05      	ldr	r3, [sp, #20]
   1f1be:	4650      	mov	r0, sl
   1f1c0:	4a53      	ldr	r2, [pc, #332]	; (1f310 <_strtod_l+0x568>)
   1f1c2:	4659      	mov	r1, fp
   1f1c4:	1b5d      	subs	r5, r3, r5
   1f1c6:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
   1f1ca:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f1ce:	f7fd fc1d 	bl	1ca0c <__aeabi_ddiv>
   1f1d2:	e7d6      	b.n	1f182 <_strtod_l+0x3da>
   1f1d4:	1ba6      	subs	r6, r4, r6
   1f1d6:	9b08      	ldr	r3, [sp, #32]
   1f1d8:	441e      	add	r6, r3
   1f1da:	2e00      	cmp	r6, #0
   1f1dc:	dd6e      	ble.n	1f2bc <_strtod_l+0x514>
   1f1de:	f016 030f 	ands.w	r3, r6, #15
   1f1e2:	d00a      	beq.n	1f1fa <_strtod_l+0x452>
   1f1e4:	494a      	ldr	r1, [pc, #296]	; (1f310 <_strtod_l+0x568>)
   1f1e6:	4652      	mov	r2, sl
   1f1e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1f1ec:	465b      	mov	r3, fp
   1f1ee:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f1f2:	f7fd fae1 	bl	1c7b8 <__aeabi_dmul>
   1f1f6:	4682      	mov	sl, r0
   1f1f8:	468b      	mov	fp, r1
   1f1fa:	f036 060f 	bics.w	r6, r6, #15
   1f1fe:	d04e      	beq.n	1f29e <_strtod_l+0x4f6>
   1f200:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
   1f204:	dd23      	ble.n	1f24e <_strtod_l+0x4a6>
   1f206:	2400      	movs	r4, #0
   1f208:	9405      	str	r4, [sp, #20]
   1f20a:	9409      	str	r4, [sp, #36]	; 0x24
   1f20c:	9407      	str	r4, [sp, #28]
   1f20e:	2322      	movs	r3, #34	; 0x22
   1f210:	9a04      	ldr	r2, [sp, #16]
   1f212:	f8df b104 	ldr.w	fp, [pc, #260]	; 1f318 <_strtod_l+0x570>
   1f216:	f04f 0a00 	mov.w	sl, #0
   1f21a:	6013      	str	r3, [r2, #0]
   1f21c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f21e:	2b00      	cmp	r3, #0
   1f220:	f43f ae00 	beq.w	1ee24 <_strtod_l+0x7c>
   1f224:	991c      	ldr	r1, [sp, #112]	; 0x70
   1f226:	9804      	ldr	r0, [sp, #16]
   1f228:	f021 feda 	bl	40fe0 <_Bfree>
   1f22c:	9907      	ldr	r1, [sp, #28]
   1f22e:	9804      	ldr	r0, [sp, #16]
   1f230:	f021 fed6 	bl	40fe0 <_Bfree>
   1f234:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f238:	f021 fed2 	bl	40fe0 <_Bfree>
   1f23c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1f23e:	9804      	ldr	r0, [sp, #16]
   1f240:	f021 fece 	bl	40fe0 <_Bfree>
   1f244:	4621      	mov	r1, r4
   1f246:	9804      	ldr	r0, [sp, #16]
   1f248:	f021 feca 	bl	40fe0 <_Bfree>
   1f24c:	e5ea      	b.n	1ee24 <_strtod_l+0x7c>
   1f24e:	2300      	movs	r3, #0
   1f250:	1136      	asrs	r6, r6, #4
   1f252:	4650      	mov	r0, sl
   1f254:	4659      	mov	r1, fp
   1f256:	461f      	mov	r7, r3
   1f258:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 1f314 <_strtod_l+0x56c>
   1f25c:	2e01      	cmp	r6, #1
   1f25e:	dc21      	bgt.n	1f2a4 <_strtod_l+0x4fc>
   1f260:	b10b      	cbz	r3, 1f266 <_strtod_l+0x4be>
   1f262:	4682      	mov	sl, r0
   1f264:	468b      	mov	fp, r1
   1f266:	4b2b      	ldr	r3, [pc, #172]	; (1f314 <_strtod_l+0x56c>)
   1f268:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   1f26c:	4652      	mov	r2, sl
   1f26e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   1f272:	465b      	mov	r3, fp
   1f274:	e9d7 0100 	ldrd	r0, r1, [r7]
   1f278:	f7fd fa9e 	bl	1c7b8 <__aeabi_dmul>
   1f27c:	4b26      	ldr	r3, [pc, #152]	; (1f318 <_strtod_l+0x570>)
   1f27e:	460a      	mov	r2, r1
   1f280:	4682      	mov	sl, r0
   1f282:	400b      	ands	r3, r1
   1f284:	4925      	ldr	r1, [pc, #148]	; (1f31c <_strtod_l+0x574>)
   1f286:	428b      	cmp	r3, r1
   1f288:	d8bd      	bhi.n	1f206 <_strtod_l+0x45e>
   1f28a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   1f28e:	428b      	cmp	r3, r1
   1f290:	bf86      	itte	hi
   1f292:	f8df b08c 	ldrhi.w	fp, [pc, #140]	; 1f320 <_strtod_l+0x578>
   1f296:	f04f 3aff 	movhi.w	sl, #4294967295
   1f29a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   1f29e:	2300      	movs	r3, #0
   1f2a0:	9306      	str	r3, [sp, #24]
   1f2a2:	e078      	b.n	1f396 <_strtod_l+0x5ee>
   1f2a4:	07f2      	lsls	r2, r6, #31
   1f2a6:	d506      	bpl.n	1f2b6 <_strtod_l+0x50e>
   1f2a8:	eb09 03c7 	add.w	r3, r9, r7, lsl #3
   1f2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f2b0:	f7fd fa82 	bl	1c7b8 <__aeabi_dmul>
   1f2b4:	2301      	movs	r3, #1
   1f2b6:	3701      	adds	r7, #1
   1f2b8:	1076      	asrs	r6, r6, #1
   1f2ba:	e7cf      	b.n	1f25c <_strtod_l+0x4b4>
   1f2bc:	d0ef      	beq.n	1f29e <_strtod_l+0x4f6>
   1f2be:	4276      	negs	r6, r6
   1f2c0:	f016 020f 	ands.w	r2, r6, #15
   1f2c4:	d00a      	beq.n	1f2dc <_strtod_l+0x534>
   1f2c6:	4b12      	ldr	r3, [pc, #72]	; (1f310 <_strtod_l+0x568>)
   1f2c8:	4650      	mov	r0, sl
   1f2ca:	4659      	mov	r1, fp
   1f2cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1f2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f2d4:	f7fd fb9a 	bl	1ca0c <__aeabi_ddiv>
   1f2d8:	4682      	mov	sl, r0
   1f2da:	468b      	mov	fp, r1
   1f2dc:	1136      	asrs	r6, r6, #4
   1f2de:	d0de      	beq.n	1f29e <_strtod_l+0x4f6>
   1f2e0:	2e1f      	cmp	r6, #31
   1f2e2:	dd1f      	ble.n	1f324 <_strtod_l+0x57c>
   1f2e4:	2400      	movs	r4, #0
   1f2e6:	9405      	str	r4, [sp, #20]
   1f2e8:	9409      	str	r4, [sp, #36]	; 0x24
   1f2ea:	9407      	str	r4, [sp, #28]
   1f2ec:	2322      	movs	r3, #34	; 0x22
   1f2ee:	9a04      	ldr	r2, [sp, #16]
   1f2f0:	f04f 0a00 	mov.w	sl, #0
   1f2f4:	f04f 0b00 	mov.w	fp, #0
   1f2f8:	6013      	str	r3, [r2, #0]
   1f2fa:	e78f      	b.n	1f21c <_strtod_l+0x474>
   1f2fc:	00044028 	.word	0x00044028
   1f300:	000492b0 	.word	0x000492b0
   1f304:	0004925a 	.word	0x0004925a
   1f308:	00042b70 	.word	0x00042b70
   1f30c:	00044d14 	.word	0x00044d14
   1f310:	00041e58 	.word	0x00041e58
   1f314:	00041e30 	.word	0x00041e30
   1f318:	7ff00000 	.word	0x7ff00000
   1f31c:	7ca00000 	.word	0x7ca00000
   1f320:	7fefffff 	.word	0x7fefffff
   1f324:	f016 0310 	ands.w	r3, r6, #16
   1f328:	4650      	mov	r0, sl
   1f32a:	4659      	mov	r1, fp
   1f32c:	4fac      	ldr	r7, [pc, #688]	; (1f5e0 <_strtod_l+0x838>)
   1f32e:	bf18      	it	ne
   1f330:	236a      	movne	r3, #106	; 0x6a
   1f332:	9306      	str	r3, [sp, #24]
   1f334:	2300      	movs	r3, #0
   1f336:	07f2      	lsls	r2, r6, #31
   1f338:	d504      	bpl.n	1f344 <_strtod_l+0x59c>
   1f33a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1f33e:	f7fd fa3b 	bl	1c7b8 <__aeabi_dmul>
   1f342:	2301      	movs	r3, #1
   1f344:	1076      	asrs	r6, r6, #1
   1f346:	f107 0708 	add.w	r7, r7, #8
   1f34a:	d1f4      	bne.n	1f336 <_strtod_l+0x58e>
   1f34c:	b10b      	cbz	r3, 1f352 <_strtod_l+0x5aa>
   1f34e:	4682      	mov	sl, r0
   1f350:	468b      	mov	fp, r1
   1f352:	9b06      	ldr	r3, [sp, #24]
   1f354:	b1bb      	cbz	r3, 1f386 <_strtod_l+0x5de>
   1f356:	f3cb 530a 	ubfx	r3, fp, #20, #11
   1f35a:	4659      	mov	r1, fp
   1f35c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1f360:	2b00      	cmp	r3, #0
   1f362:	dd10      	ble.n	1f386 <_strtod_l+0x5de>
   1f364:	2b1f      	cmp	r3, #31
   1f366:	f340 8126 	ble.w	1f5b6 <_strtod_l+0x80e>
   1f36a:	2b34      	cmp	r3, #52	; 0x34
   1f36c:	f04f 0a00 	mov.w	sl, #0
   1f370:	bfdb      	ittet	le
   1f372:	3b20      	suble	r3, #32
   1f374:	f04f 32ff 	movle.w	r2, #4294967295
   1f378:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   1f37c:	fa02 f303 	lslle.w	r3, r2, r3
   1f380:	bfd8      	it	le
   1f382:	ea03 0b01 	andle.w	fp, r3, r1
   1f386:	2200      	movs	r2, #0
   1f388:	2300      	movs	r3, #0
   1f38a:	4650      	mov	r0, sl
   1f38c:	4659      	mov	r1, fp
   1f38e:	f7fd fc7b 	bl	1cc88 <__aeabi_dcmpeq>
   1f392:	2800      	cmp	r0, #0
   1f394:	d1a6      	bne.n	1f2e4 <_strtod_l+0x53c>
   1f396:	9b07      	ldr	r3, [sp, #28]
   1f398:	4642      	mov	r2, r8
   1f39a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1f39c:	9300      	str	r3, [sp, #0]
   1f39e:	4623      	mov	r3, r4
   1f3a0:	9804      	ldr	r0, [sp, #16]
   1f3a2:	f021 fe71 	bl	41088 <__s2b>
   1f3a6:	9009      	str	r0, [sp, #36]	; 0x24
   1f3a8:	2800      	cmp	r0, #0
   1f3aa:	f43f af2c 	beq.w	1f206 <_strtod_l+0x45e>
   1f3ae:	9b05      	ldr	r3, [sp, #20]
   1f3b0:	2400      	movs	r4, #0
   1f3b2:	1b5d      	subs	r5, r3, r5
   1f3b4:	9b08      	ldr	r3, [sp, #32]
   1f3b6:	9405      	str	r4, [sp, #20]
   1f3b8:	2b00      	cmp	r3, #0
   1f3ba:	bfb4      	ite	lt
   1f3bc:	462b      	movlt	r3, r5
   1f3be:	2300      	movge	r3, #0
   1f3c0:	930e      	str	r3, [sp, #56]	; 0x38
   1f3c2:	9b08      	ldr	r3, [sp, #32]
   1f3c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f3c8:	9316      	str	r3, [sp, #88]	; 0x58
   1f3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f3cc:	9804      	ldr	r0, [sp, #16]
   1f3ce:	6859      	ldr	r1, [r3, #4]
   1f3d0:	f021 fdd2 	bl	40f78 <_Balloc>
   1f3d4:	9007      	str	r0, [sp, #28]
   1f3d6:	2800      	cmp	r0, #0
   1f3d8:	f43f af19 	beq.w	1f20e <_strtod_l+0x466>
   1f3dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f3de:	300c      	adds	r0, #12
   1f3e0:	691a      	ldr	r2, [r3, #16]
   1f3e2:	f103 010c 	add.w	r1, r3, #12
   1f3e6:	3202      	adds	r2, #2
   1f3e8:	0092      	lsls	r2, r2, #2
   1f3ea:	f021 f917 	bl	4061c <memcpy>
   1f3ee:	aa1e      	add	r2, sp, #120	; 0x78
   1f3f0:	a91d      	add	r1, sp, #116	; 0x74
   1f3f2:	9804      	ldr	r0, [sp, #16]
   1f3f4:	ec4b ab10 	vmov	d0, sl, fp
   1f3f8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   1f3fc:	f022 f837 	bl	4146e <__d2b>
   1f400:	901c      	str	r0, [sp, #112]	; 0x70
   1f402:	2800      	cmp	r0, #0
   1f404:	f43f af03 	beq.w	1f20e <_strtod_l+0x466>
   1f408:	2101      	movs	r1, #1
   1f40a:	9804      	ldr	r0, [sp, #16]
   1f40c:	f021 feca 	bl	411a4 <__i2b>
   1f410:	9005      	str	r0, [sp, #20]
   1f412:	4603      	mov	r3, r0
   1f414:	2800      	cmp	r0, #0
   1f416:	f43f aefa 	beq.w	1f20e <_strtod_l+0x466>
   1f41a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   1f41c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1f41e:	2e00      	cmp	r6, #0
   1f420:	bfa9      	itett	ge
   1f422:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
   1f424:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
   1f426:	18f7      	addge	r7, r6, r3
   1f428:	9d16      	ldrge	r5, [sp, #88]	; 0x58
   1f42a:	bfb8      	it	lt
   1f42c:	1b9d      	sublt	r5, r3, r6
   1f42e:	9b06      	ldr	r3, [sp, #24]
   1f430:	bfb8      	it	lt
   1f432:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
   1f434:	1af6      	subs	r6, r6, r3
   1f436:	4b6b      	ldr	r3, [pc, #428]	; (1f5e4 <_strtod_l+0x83c>)
   1f438:	4416      	add	r6, r2
   1f43a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   1f43e:	3e01      	subs	r6, #1
   1f440:	429e      	cmp	r6, r3
   1f442:	f280 80bf 	bge.w	1f5c4 <_strtod_l+0x81c>
   1f446:	1b9b      	subs	r3, r3, r6
   1f448:	f04f 0801 	mov.w	r8, #1
   1f44c:	2b1f      	cmp	r3, #31
   1f44e:	eba2 0203 	sub.w	r2, r2, r3
   1f452:	bfcd      	iteet	gt
   1f454:	f1c6 467f 	rsbgt	r6, r6, #4278190080	; 0xff000000
   1f458:	fa08 f803 	lslle.w	r8, r8, r3
   1f45c:	2600      	movle	r6, #0
   1f45e:	f506 067f 	addgt.w	r6, r6, #16711680	; 0xff0000
   1f462:	bfc2      	ittt	gt
   1f464:	f506 467b 	addgt.w	r6, r6, #64256	; 0xfb00
   1f468:	36e2      	addgt	r6, #226	; 0xe2
   1f46a:	fa08 f606 	lslgt.w	r6, r8, r6
   1f46e:	eb07 0902 	add.w	r9, r7, r2
   1f472:	9b06      	ldr	r3, [sp, #24]
   1f474:	4415      	add	r5, r2
   1f476:	454f      	cmp	r7, r9
   1f478:	441d      	add	r5, r3
   1f47a:	463b      	mov	r3, r7
   1f47c:	bfa8      	it	ge
   1f47e:	464b      	movge	r3, r9
   1f480:	42ab      	cmp	r3, r5
   1f482:	bfa8      	it	ge
   1f484:	462b      	movge	r3, r5
   1f486:	2b00      	cmp	r3, #0
   1f488:	bfc2      	ittt	gt
   1f48a:	eba9 0903 	subgt.w	r9, r9, r3
   1f48e:	1aed      	subgt	r5, r5, r3
   1f490:	1aff      	subgt	r7, r7, r3
   1f492:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f494:	2b00      	cmp	r3, #0
   1f496:	dd17      	ble.n	1f4c8 <_strtod_l+0x720>
   1f498:	461a      	mov	r2, r3
   1f49a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f49e:	f01d fd3d 	bl	3cf1c <__pow5mult>
   1f4a2:	9005      	str	r0, [sp, #20]
   1f4a4:	2800      	cmp	r0, #0
   1f4a6:	f43f aeb2 	beq.w	1f20e <_strtod_l+0x466>
   1f4aa:	4601      	mov	r1, r0
   1f4ac:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1f4ae:	9804      	ldr	r0, [sp, #16]
   1f4b0:	f021 fe81 	bl	411b6 <__multiply>
   1f4b4:	900d      	str	r0, [sp, #52]	; 0x34
   1f4b6:	2800      	cmp	r0, #0
   1f4b8:	f43f aea9 	beq.w	1f20e <_strtod_l+0x466>
   1f4bc:	991c      	ldr	r1, [sp, #112]	; 0x70
   1f4be:	9804      	ldr	r0, [sp, #16]
   1f4c0:	f021 fd8e 	bl	40fe0 <_Bfree>
   1f4c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f4c6:	931c      	str	r3, [sp, #112]	; 0x70
   1f4c8:	f1b9 0f00 	cmp.w	r9, #0
   1f4cc:	dc7e      	bgt.n	1f5cc <_strtod_l+0x824>
   1f4ce:	9b08      	ldr	r3, [sp, #32]
   1f4d0:	2b00      	cmp	r3, #0
   1f4d2:	dd08      	ble.n	1f4e6 <_strtod_l+0x73e>
   1f4d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1f4d6:	9907      	ldr	r1, [sp, #28]
   1f4d8:	9804      	ldr	r0, [sp, #16]
   1f4da:	f01d fd1f 	bl	3cf1c <__pow5mult>
   1f4de:	9007      	str	r0, [sp, #28]
   1f4e0:	2800      	cmp	r0, #0
   1f4e2:	f43f ae94 	beq.w	1f20e <_strtod_l+0x466>
   1f4e6:	2d00      	cmp	r5, #0
   1f4e8:	dd08      	ble.n	1f4fc <_strtod_l+0x754>
   1f4ea:	462a      	mov	r2, r5
   1f4ec:	9907      	ldr	r1, [sp, #28]
   1f4ee:	9804      	ldr	r0, [sp, #16]
   1f4f0:	f021 fef0 	bl	412d4 <__lshift>
   1f4f4:	9007      	str	r0, [sp, #28]
   1f4f6:	2800      	cmp	r0, #0
   1f4f8:	f43f ae89 	beq.w	1f20e <_strtod_l+0x466>
   1f4fc:	2f00      	cmp	r7, #0
   1f4fe:	dd08      	ble.n	1f512 <_strtod_l+0x76a>
   1f500:	463a      	mov	r2, r7
   1f502:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f506:	f021 fee5 	bl	412d4 <__lshift>
   1f50a:	9005      	str	r0, [sp, #20]
   1f50c:	2800      	cmp	r0, #0
   1f50e:	f43f ae7e 	beq.w	1f20e <_strtod_l+0x466>
   1f512:	9a07      	ldr	r2, [sp, #28]
   1f514:	991c      	ldr	r1, [sp, #112]	; 0x70
   1f516:	9804      	ldr	r0, [sp, #16]
   1f518:	f021 ff49 	bl	413ae <__mdiff>
   1f51c:	4604      	mov	r4, r0
   1f51e:	2800      	cmp	r0, #0
   1f520:	f43f ae75 	beq.w	1f20e <_strtod_l+0x466>
   1f524:	68c3      	ldr	r3, [r0, #12]
   1f526:	9905      	ldr	r1, [sp, #20]
   1f528:	930d      	str	r3, [sp, #52]	; 0x34
   1f52a:	2300      	movs	r3, #0
   1f52c:	60c3      	str	r3, [r0, #12]
   1f52e:	f021 ff24 	bl	4137a <__mcmp>
   1f532:	2800      	cmp	r0, #0
   1f534:	da5c      	bge.n	1f5f0 <_strtod_l+0x848>
   1f536:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f538:	ea53 030a 	orrs.w	r3, r3, sl
   1f53c:	d17e      	bne.n	1f63c <_strtod_l+0x894>
   1f53e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f542:	2b00      	cmp	r3, #0
   1f544:	d17a      	bne.n	1f63c <_strtod_l+0x894>
   1f546:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1f54a:	0d1b      	lsrs	r3, r3, #20
   1f54c:	051b      	lsls	r3, r3, #20
   1f54e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1f552:	d973      	bls.n	1f63c <_strtod_l+0x894>
   1f554:	6963      	ldr	r3, [r4, #20]
   1f556:	b913      	cbnz	r3, 1f55e <_strtod_l+0x7b6>
   1f558:	6923      	ldr	r3, [r4, #16]
   1f55a:	2b01      	cmp	r3, #1
   1f55c:	dd6e      	ble.n	1f63c <_strtod_l+0x894>
   1f55e:	4621      	mov	r1, r4
   1f560:	2201      	movs	r2, #1
   1f562:	9804      	ldr	r0, [sp, #16]
   1f564:	f021 feb6 	bl	412d4 <__lshift>
   1f568:	9905      	ldr	r1, [sp, #20]
   1f56a:	4604      	mov	r4, r0
   1f56c:	f021 ff05 	bl	4137a <__mcmp>
   1f570:	2800      	cmp	r0, #0
   1f572:	dd63      	ble.n	1f63c <_strtod_l+0x894>
   1f574:	9906      	ldr	r1, [sp, #24]
   1f576:	465b      	mov	r3, fp
   1f578:	4a1b      	ldr	r2, [pc, #108]	; (1f5e8 <_strtod_l+0x840>)
   1f57a:	2900      	cmp	r1, #0
   1f57c:	d07d      	beq.n	1f67a <_strtod_l+0x8d2>
   1f57e:	ea02 010b 	and.w	r1, r2, fp
   1f582:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   1f586:	dc78      	bgt.n	1f67a <_strtod_l+0x8d2>
   1f588:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   1f58c:	f77f aeae 	ble.w	1f2ec <_strtod_l+0x544>
   1f590:	2300      	movs	r3, #0
   1f592:	4a16      	ldr	r2, [pc, #88]	; (1f5ec <_strtod_l+0x844>)
   1f594:	4650      	mov	r0, sl
   1f596:	4659      	mov	r1, fp
   1f598:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
   1f59c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1f5a0:	f7fd f90a 	bl	1c7b8 <__aeabi_dmul>
   1f5a4:	460b      	mov	r3, r1
   1f5a6:	4682      	mov	sl, r0
   1f5a8:	468b      	mov	fp, r1
   1f5aa:	4303      	orrs	r3, r0
   1f5ac:	bf02      	ittt	eq
   1f5ae:	2322      	moveq	r3, #34	; 0x22
   1f5b0:	9a04      	ldreq	r2, [sp, #16]
   1f5b2:	6013      	streq	r3, [r2, #0]
   1f5b4:	e636      	b.n	1f224 <_strtod_l+0x47c>
   1f5b6:	f04f 32ff 	mov.w	r2, #4294967295
   1f5ba:	fa02 f303 	lsl.w	r3, r2, r3
   1f5be:	ea03 0a0a 	and.w	sl, r3, sl
   1f5c2:	e6e0      	b.n	1f386 <_strtod_l+0x5de>
   1f5c4:	2600      	movs	r6, #0
   1f5c6:	f04f 0801 	mov.w	r8, #1
   1f5ca:	e750      	b.n	1f46e <_strtod_l+0x6c6>
   1f5cc:	464a      	mov	r2, r9
   1f5ce:	991c      	ldr	r1, [sp, #112]	; 0x70
   1f5d0:	9804      	ldr	r0, [sp, #16]
   1f5d2:	f021 fe7f 	bl	412d4 <__lshift>
   1f5d6:	901c      	str	r0, [sp, #112]	; 0x70
   1f5d8:	2800      	cmp	r0, #0
   1f5da:	f47f af78 	bne.w	1f4ce <_strtod_l+0x726>
   1f5de:	e616      	b.n	1f20e <_strtod_l+0x466>
   1f5e0:	00041e08 	.word	0x00041e08
   1f5e4:	fffffc02 	.word	0xfffffc02
   1f5e8:	7ff00000 	.word	0x7ff00000
   1f5ec:	39500000 	.word	0x39500000
   1f5f0:	465d      	mov	r5, fp
   1f5f2:	d160      	bne.n	1f6b6 <_strtod_l+0x90e>
   1f5f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f5f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f5fa:	b342      	cbz	r2, 1f64e <_strtod_l+0x8a6>
   1f5fc:	4ab8      	ldr	r2, [pc, #736]	; (1f8e0 <_strtod_l+0xb38>)
   1f5fe:	4293      	cmp	r3, r2
   1f600:	d128      	bne.n	1f654 <_strtod_l+0x8ac>
   1f602:	9b06      	ldr	r3, [sp, #24]
   1f604:	4650      	mov	r0, sl
   1f606:	b1eb      	cbz	r3, 1f644 <_strtod_l+0x89c>
   1f608:	4ab6      	ldr	r2, [pc, #728]	; (1f8e4 <_strtod_l+0xb3c>)
   1f60a:	f04f 31ff 	mov.w	r1, #4294967295
   1f60e:	402a      	ands	r2, r5
   1f610:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   1f614:	d819      	bhi.n	1f64a <_strtod_l+0x8a2>
   1f616:	0d12      	lsrs	r2, r2, #20
   1f618:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   1f61c:	fa01 f303 	lsl.w	r3, r1, r3
   1f620:	4298      	cmp	r0, r3
   1f622:	d117      	bne.n	1f654 <_strtod_l+0x8ac>
   1f624:	4bb0      	ldr	r3, [pc, #704]	; (1f8e8 <_strtod_l+0xb40>)
   1f626:	429d      	cmp	r5, r3
   1f628:	d102      	bne.n	1f630 <_strtod_l+0x888>
   1f62a:	3001      	adds	r0, #1
   1f62c:	f43f adef 	beq.w	1f20e <_strtod_l+0x466>
   1f630:	4bac      	ldr	r3, [pc, #688]	; (1f8e4 <_strtod_l+0xb3c>)
   1f632:	f04f 0a00 	mov.w	sl, #0
   1f636:	402b      	ands	r3, r5
   1f638:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   1f63c:	9b06      	ldr	r3, [sp, #24]
   1f63e:	2b00      	cmp	r3, #0
   1f640:	d1a6      	bne.n	1f590 <_strtod_l+0x7e8>
   1f642:	e5ef      	b.n	1f224 <_strtod_l+0x47c>
   1f644:	f04f 33ff 	mov.w	r3, #4294967295
   1f648:	e7ea      	b.n	1f620 <_strtod_l+0x878>
   1f64a:	460b      	mov	r3, r1
   1f64c:	e7e8      	b.n	1f620 <_strtod_l+0x878>
   1f64e:	ea53 030a 	orrs.w	r3, r3, sl
   1f652:	d08f      	beq.n	1f574 <_strtod_l+0x7cc>
   1f654:	b1de      	cbz	r6, 1f68e <_strtod_l+0x8e6>
   1f656:	422e      	tst	r6, r5
   1f658:	d0f0      	beq.n	1f63c <_strtod_l+0x894>
   1f65a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f65c:	4650      	mov	r0, sl
   1f65e:	9a06      	ldr	r2, [sp, #24]
   1f660:	4659      	mov	r1, fp
   1f662:	b1bb      	cbz	r3, 1f694 <_strtod_l+0x8ec>
   1f664:	f021 fa1b 	bl	40a9e <sulp>
   1f668:	4602      	mov	r2, r0
   1f66a:	460b      	mov	r3, r1
   1f66c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1f670:	f7fc feec 	bl	1c44c <__adddf3>
   1f674:	4682      	mov	sl, r0
   1f676:	468b      	mov	fp, r1
   1f678:	e7e0      	b.n	1f63c <_strtod_l+0x894>
   1f67a:	4013      	ands	r3, r2
   1f67c:	f04f 3aff 	mov.w	sl, #4294967295
   1f680:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1f684:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   1f688:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   1f68c:	e7d6      	b.n	1f63c <_strtod_l+0x894>
   1f68e:	ea18 0f0a 	tst.w	r8, sl
   1f692:	e7e1      	b.n	1f658 <_strtod_l+0x8b0>
   1f694:	f021 fa03 	bl	40a9e <sulp>
   1f698:	4602      	mov	r2, r0
   1f69a:	460b      	mov	r3, r1
   1f69c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1f6a0:	f7fc fed2 	bl	1c448 <__aeabi_dsub>
   1f6a4:	2200      	movs	r2, #0
   1f6a6:	2300      	movs	r3, #0
   1f6a8:	4682      	mov	sl, r0
   1f6aa:	468b      	mov	fp, r1
   1f6ac:	f7fd faec 	bl	1cc88 <__aeabi_dcmpeq>
   1f6b0:	2800      	cmp	r0, #0
   1f6b2:	d0c3      	beq.n	1f63c <_strtod_l+0x894>
   1f6b4:	e61a      	b.n	1f2ec <_strtod_l+0x544>
   1f6b6:	9905      	ldr	r1, [sp, #20]
   1f6b8:	4620      	mov	r0, r4
   1f6ba:	f021 ff26 	bl	4150a <__ratio>
   1f6be:	2200      	movs	r2, #0
   1f6c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f6c4:	ee10 0a10 	vmov	r0, s0
   1f6c8:	ec57 6b10 	vmov	r6, r7, d0
   1f6cc:	4639      	mov	r1, r7
   1f6ce:	f7fd faef 	bl	1ccb0 <__aeabi_dcmple>
   1f6d2:	2800      	cmp	r0, #0
   1f6d4:	d073      	beq.n	1f7be <_strtod_l+0xa16>
   1f6d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f6d8:	2b00      	cmp	r3, #0
   1f6da:	d046      	beq.n	1f76a <_strtod_l+0x9c2>
   1f6dc:	f04f 0800 	mov.w	r8, #0
   1f6e0:	f8df 9208 	ldr.w	r9, [pc, #520]	; 1f8ec <_strtod_l+0xb44>
   1f6e4:	2600      	movs	r6, #0
   1f6e6:	4f81      	ldr	r7, [pc, #516]	; (1f8ec <_strtod_l+0xb44>)
   1f6e8:	4b7e      	ldr	r3, [pc, #504]	; (1f8e4 <_strtod_l+0xb3c>)
   1f6ea:	402b      	ands	r3, r5
   1f6ec:	930f      	str	r3, [sp, #60]	; 0x3c
   1f6ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f6f0:	4b7f      	ldr	r3, [pc, #508]	; (1f8f0 <_strtod_l+0xb48>)
   1f6f2:	429a      	cmp	r2, r3
   1f6f4:	f040 80ab 	bne.w	1f84e <_strtod_l+0xaa6>
   1f6f8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
   1f6fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1f700:	ec4b ab10 	vmov	d0, sl, fp
   1f704:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   1f708:	f01d fc56 	bl	3cfb8 <__ulp>
   1f70c:	4640      	mov	r0, r8
   1f70e:	4649      	mov	r1, r9
   1f710:	ec53 2b10 	vmov	r2, r3, d0
   1f714:	f7fd f850 	bl	1c7b8 <__aeabi_dmul>
   1f718:	4652      	mov	r2, sl
   1f71a:	465b      	mov	r3, fp
   1f71c:	f7fc fe96 	bl	1c44c <__adddf3>
   1f720:	460b      	mov	r3, r1
   1f722:	4970      	ldr	r1, [pc, #448]	; (1f8e4 <_strtod_l+0xb3c>)
   1f724:	4682      	mov	sl, r0
   1f726:	4a73      	ldr	r2, [pc, #460]	; (1f8f4 <_strtod_l+0xb4c>)
   1f728:	4019      	ands	r1, r3
   1f72a:	4291      	cmp	r1, r2
   1f72c:	d95b      	bls.n	1f7e6 <_strtod_l+0xa3e>
   1f72e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f730:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   1f734:	4293      	cmp	r3, r2
   1f736:	d103      	bne.n	1f740 <_strtod_l+0x998>
   1f738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f73a:	3301      	adds	r3, #1
   1f73c:	f43f ad67 	beq.w	1f20e <_strtod_l+0x466>
   1f740:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 1f8e8 <_strtod_l+0xb40>
   1f744:	f04f 3aff 	mov.w	sl, #4294967295
   1f748:	991c      	ldr	r1, [sp, #112]	; 0x70
   1f74a:	9804      	ldr	r0, [sp, #16]
   1f74c:	f021 fc48 	bl	40fe0 <_Bfree>
   1f750:	9907      	ldr	r1, [sp, #28]
   1f752:	9804      	ldr	r0, [sp, #16]
   1f754:	f021 fc44 	bl	40fe0 <_Bfree>
   1f758:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f75c:	f021 fc40 	bl	40fe0 <_Bfree>
   1f760:	4621      	mov	r1, r4
   1f762:	9804      	ldr	r0, [sp, #16]
   1f764:	f021 fc3c 	bl	40fe0 <_Bfree>
   1f768:	e62f      	b.n	1f3ca <_strtod_l+0x622>
   1f76a:	f1ba 0f00 	cmp.w	sl, #0
   1f76e:	d118      	bne.n	1f7a2 <_strtod_l+0x9fa>
   1f770:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f774:	b9db      	cbnz	r3, 1f7ae <_strtod_l+0xa06>
   1f776:	2200      	movs	r2, #0
   1f778:	4b5c      	ldr	r3, [pc, #368]	; (1f8ec <_strtod_l+0xb44>)
   1f77a:	4630      	mov	r0, r6
   1f77c:	4639      	mov	r1, r7
   1f77e:	f7fd fa8d 	bl	1cc9c <__aeabi_dcmplt>
   1f782:	b9c8      	cbnz	r0, 1f7b8 <_strtod_l+0xa10>
   1f784:	4630      	mov	r0, r6
   1f786:	4639      	mov	r1, r7
   1f788:	2200      	movs	r2, #0
   1f78a:	4b5b      	ldr	r3, [pc, #364]	; (1f8f8 <_strtod_l+0xb50>)
   1f78c:	f7fd f814 	bl	1c7b8 <__aeabi_dmul>
   1f790:	4606      	mov	r6, r0
   1f792:	460f      	mov	r7, r1
   1f794:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   1f798:	9618      	str	r6, [sp, #96]	; 0x60
   1f79a:	9319      	str	r3, [sp, #100]	; 0x64
   1f79c:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   1f7a0:	e7a2      	b.n	1f6e8 <_strtod_l+0x940>
   1f7a2:	f1ba 0f01 	cmp.w	sl, #1
   1f7a6:	d102      	bne.n	1f7ae <_strtod_l+0xa06>
   1f7a8:	2d00      	cmp	r5, #0
   1f7aa:	f43f ad9f 	beq.w	1f2ec <_strtod_l+0x544>
   1f7ae:	f04f 0800 	mov.w	r8, #0
   1f7b2:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1f8fc <_strtod_l+0xb54>
   1f7b6:	e795      	b.n	1f6e4 <_strtod_l+0x93c>
   1f7b8:	2600      	movs	r6, #0
   1f7ba:	4f4f      	ldr	r7, [pc, #316]	; (1f8f8 <_strtod_l+0xb50>)
   1f7bc:	e7ea      	b.n	1f794 <_strtod_l+0x9ec>
   1f7be:	4b4e      	ldr	r3, [pc, #312]	; (1f8f8 <_strtod_l+0xb50>)
   1f7c0:	4630      	mov	r0, r6
   1f7c2:	4639      	mov	r1, r7
   1f7c4:	2200      	movs	r2, #0
   1f7c6:	f7fc fff7 	bl	1c7b8 <__aeabi_dmul>
   1f7ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f7cc:	4606      	mov	r6, r0
   1f7ce:	460f      	mov	r7, r1
   1f7d0:	b933      	cbnz	r3, 1f7e0 <_strtod_l+0xa38>
   1f7d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f7d6:	9010      	str	r0, [sp, #64]	; 0x40
   1f7d8:	9311      	str	r3, [sp, #68]	; 0x44
   1f7da:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   1f7de:	e783      	b.n	1f6e8 <_strtod_l+0x940>
   1f7e0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   1f7e4:	e7f9      	b.n	1f7da <_strtod_l+0xa32>
   1f7e6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   1f7ea:	9b06      	ldr	r3, [sp, #24]
   1f7ec:	2b00      	cmp	r3, #0
   1f7ee:	d1ab      	bne.n	1f748 <_strtod_l+0x9a0>
   1f7f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1f7f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f7f6:	0d1b      	lsrs	r3, r3, #20
   1f7f8:	051b      	lsls	r3, r3, #20
   1f7fa:	429a      	cmp	r2, r3
   1f7fc:	d1a4      	bne.n	1f748 <_strtod_l+0x9a0>
   1f7fe:	4630      	mov	r0, r6
   1f800:	4639      	mov	r1, r7
   1f802:	f7fd fc4f 	bl	1d0a4 <__aeabi_d2lz>
   1f806:	f7fc ffa9 	bl	1c75c <__aeabi_l2d>
   1f80a:	4602      	mov	r2, r0
   1f80c:	460b      	mov	r3, r1
   1f80e:	4630      	mov	r0, r6
   1f810:	4639      	mov	r1, r7
   1f812:	f7fc fe19 	bl	1c448 <__aeabi_dsub>
   1f816:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f81a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f81c:	4606      	mov	r6, r0
   1f81e:	ea43 030a 	orr.w	r3, r3, sl
   1f822:	460f      	mov	r7, r1
   1f824:	4313      	orrs	r3, r2
   1f826:	d06b      	beq.n	1f900 <_strtod_l+0xb58>
   1f828:	a327      	add	r3, pc, #156	; (adr r3, 1f8c8 <_strtod_l+0xb20>)
   1f82a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f82e:	f7fd fa35 	bl	1cc9c <__aeabi_dcmplt>
   1f832:	2800      	cmp	r0, #0
   1f834:	f47f acf6 	bne.w	1f224 <_strtod_l+0x47c>
   1f838:	4630      	mov	r0, r6
   1f83a:	4639      	mov	r1, r7
   1f83c:	a324      	add	r3, pc, #144	; (adr r3, 1f8d0 <_strtod_l+0xb28>)
   1f83e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f842:	f7fd fa49 	bl	1ccd8 <__aeabi_dcmpgt>
   1f846:	2800      	cmp	r0, #0
   1f848:	f43f af7e 	beq.w	1f748 <_strtod_l+0x9a0>
   1f84c:	e4ea      	b.n	1f224 <_strtod_l+0x47c>
   1f84e:	9b06      	ldr	r3, [sp, #24]
   1f850:	b31b      	cbz	r3, 1f89a <_strtod_l+0xaf2>
   1f852:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f854:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1f858:	d81f      	bhi.n	1f89a <_strtod_l+0xaf2>
   1f85a:	4630      	mov	r0, r6
   1f85c:	4639      	mov	r1, r7
   1f85e:	a31e      	add	r3, pc, #120	; (adr r3, 1f8d8 <_strtod_l+0xb30>)
   1f860:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f864:	f7fd fa24 	bl	1ccb0 <__aeabi_dcmple>
   1f868:	b190      	cbz	r0, 1f890 <_strtod_l+0xae8>
   1f86a:	4639      	mov	r1, r7
   1f86c:	4630      	mov	r0, r6
   1f86e:	f7fd fa65 	bl	1cd3c <__aeabi_d2uiz>
   1f872:	2800      	cmp	r0, #0
   1f874:	bf08      	it	eq
   1f876:	2001      	moveq	r0, #1
   1f878:	f7fc ff24 	bl	1c6c4 <__aeabi_ui2d>
   1f87c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f87e:	4606      	mov	r6, r0
   1f880:	460f      	mov	r7, r1
   1f882:	b9db      	cbnz	r3, 1f8bc <_strtod_l+0xb14>
   1f884:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f888:	9012      	str	r0, [sp, #72]	; 0x48
   1f88a:	9313      	str	r3, [sp, #76]	; 0x4c
   1f88c:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
   1f890:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   1f894:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f896:	eba3 0902 	sub.w	r9, r3, r2
   1f89a:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   1f89e:	f01d fb8b 	bl	3cfb8 <__ulp>
   1f8a2:	4640      	mov	r0, r8
   1f8a4:	4649      	mov	r1, r9
   1f8a6:	ec53 2b10 	vmov	r2, r3, d0
   1f8aa:	f7fc ff85 	bl	1c7b8 <__aeabi_dmul>
   1f8ae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1f8b2:	f7fc fdcb 	bl	1c44c <__adddf3>
   1f8b6:	4682      	mov	sl, r0
   1f8b8:	468b      	mov	fp, r1
   1f8ba:	e796      	b.n	1f7ea <_strtod_l+0xa42>
   1f8bc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
   1f8c0:	e7e4      	b.n	1f88c <_strtod_l+0xae4>
   1f8c2:	bf00      	nop
   1f8c4:	f3af 8000 	nop.w
   1f8c8:	94a03595 	.word	0x94a03595
   1f8cc:	3fdfffff 	.word	0x3fdfffff
   1f8d0:	35afe535 	.word	0x35afe535
   1f8d4:	3fe00000 	.word	0x3fe00000
   1f8d8:	ffc00000 	.word	0xffc00000
   1f8dc:	41dfffff 	.word	0x41dfffff
   1f8e0:	000fffff 	.word	0x000fffff
   1f8e4:	7ff00000 	.word	0x7ff00000
   1f8e8:	7fefffff 	.word	0x7fefffff
   1f8ec:	3ff00000 	.word	0x3ff00000
   1f8f0:	7fe00000 	.word	0x7fe00000
   1f8f4:	7c9fffff 	.word	0x7c9fffff
   1f8f8:	3fe00000 	.word	0x3fe00000
   1f8fc:	bff00000 	.word	0xbff00000
   1f900:	a30b      	add	r3, pc, #44	; (adr r3, 1f930 <_strtod_l+0xb88>)
   1f902:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f906:	f7fd f9c9 	bl	1cc9c <__aeabi_dcmplt>
   1f90a:	e79c      	b.n	1f846 <_strtod_l+0xa9e>
   1f90c:	2300      	movs	r3, #0
   1f90e:	930c      	str	r3, [sp, #48]	; 0x30
   1f910:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f912:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1f914:	6013      	str	r3, [r2, #0]
   1f916:	f7ff ba89 	b.w	1ee2c <_strtod_l+0x84>
   1f91a:	2b65      	cmp	r3, #101	; 0x65
   1f91c:	f43f ab75 	beq.w	1f00a <_strtod_l+0x262>
   1f920:	2b45      	cmp	r3, #69	; 0x45
   1f922:	f43f ab72 	beq.w	1f00a <_strtod_l+0x262>
   1f926:	2201      	movs	r2, #1
   1f928:	f7ff bba6 	b.w	1f078 <_strtod_l+0x2d0>
   1f92c:	f3af 8000 	nop.w
   1f930:	94a03595 	.word	0x94a03595
   1f934:	3fcfffff 	.word	0x3fcfffff

0001f938 <_dtoa_r>:
   1f938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f93c:	6a47      	ldr	r7, [r0, #36]	; 0x24
   1f93e:	b099      	sub	sp, #100	; 0x64
   1f940:	4683      	mov	fp, r0
   1f942:	9108      	str	r1, [sp, #32]
   1f944:	920d      	str	r2, [sp, #52]	; 0x34
   1f946:	9314      	str	r3, [sp, #80]	; 0x50
   1f948:	9e22      	ldr	r6, [sp, #136]	; 0x88
   1f94a:	ec55 4b10 	vmov	r4, r5, d0
   1f94e:	e9cd 4500 	strd	r4, r5, [sp]
   1f952:	b947      	cbnz	r7, 1f966 <_dtoa_r+0x2e>
   1f954:	2010      	movs	r0, #16
   1f956:	f01b feb1 	bl	3b6bc <malloc>
   1f95a:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
   1f95e:	6007      	str	r7, [r0, #0]
   1f960:	60c7      	str	r7, [r0, #12]
   1f962:	e9c0 7701 	strd	r7, r7, [r0, #4]
   1f966:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   1f96a:	6819      	ldr	r1, [r3, #0]
   1f96c:	b159      	cbz	r1, 1f986 <_dtoa_r+0x4e>
   1f96e:	685a      	ldr	r2, [r3, #4]
   1f970:	2301      	movs	r3, #1
   1f972:	4658      	mov	r0, fp
   1f974:	4093      	lsls	r3, r2
   1f976:	604a      	str	r2, [r1, #4]
   1f978:	608b      	str	r3, [r1, #8]
   1f97a:	f021 fb31 	bl	40fe0 <_Bfree>
   1f97e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   1f982:	2200      	movs	r2, #0
   1f984:	601a      	str	r2, [r3, #0]
   1f986:	1e2b      	subs	r3, r5, #0
   1f988:	bfb7      	itett	lt
   1f98a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   1f98e:	2300      	movge	r3, #0
   1f990:	2201      	movlt	r2, #1
   1f992:	9301      	strlt	r3, [sp, #4]
   1f994:	bfa8      	it	ge
   1f996:	6033      	strge	r3, [r6, #0]
   1f998:	9c01      	ldr	r4, [sp, #4]
   1f99a:	4bb1      	ldr	r3, [pc, #708]	; (1fc60 <_dtoa_r+0x328>)
   1f99c:	bfb8      	it	lt
   1f99e:	6032      	strlt	r2, [r6, #0]
   1f9a0:	43a3      	bics	r3, r4
   1f9a2:	d11a      	bne.n	1f9da <_dtoa_r+0xa2>
   1f9a4:	f242 730f 	movw	r3, #9999	; 0x270f
   1f9a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1f9aa:	6013      	str	r3, [r2, #0]
   1f9ac:	f3c4 0313 	ubfx	r3, r4, #0, #20
   1f9b0:	9a00      	ldr	r2, [sp, #0]
   1f9b2:	4313      	orrs	r3, r2
   1f9b4:	f000 8547 	beq.w	20446 <__kernel_ram_size+0x446>
   1f9b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1f9ba:	b953      	cbnz	r3, 1f9d2 <_dtoa_r+0x9a>
   1f9bc:	4ba9      	ldr	r3, [pc, #676]	; (1fc64 <_dtoa_r+0x32c>)
   1f9be:	e023      	b.n	1fa08 <_dtoa_r+0xd0>
   1f9c0:	4ba9      	ldr	r3, [pc, #676]	; (1fc68 <_dtoa_r+0x330>)
   1f9c2:	9303      	str	r3, [sp, #12]
   1f9c4:	3308      	adds	r3, #8
   1f9c6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1f9c8:	6013      	str	r3, [r2, #0]
   1f9ca:	9803      	ldr	r0, [sp, #12]
   1f9cc:	b019      	add	sp, #100	; 0x64
   1f9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f9d2:	4ba4      	ldr	r3, [pc, #656]	; (1fc64 <_dtoa_r+0x32c>)
   1f9d4:	9303      	str	r3, [sp, #12]
   1f9d6:	3303      	adds	r3, #3
   1f9d8:	e7f5      	b.n	1f9c6 <_dtoa_r+0x8e>
   1f9da:	ed9d 7b00 	vldr	d7, [sp]
   1f9de:	2200      	movs	r2, #0
   1f9e0:	2300      	movs	r3, #0
   1f9e2:	ec51 0b17 	vmov	r0, r1, d7
   1f9e6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   1f9ea:	f7fd f94d 	bl	1cc88 <__aeabi_dcmpeq>
   1f9ee:	4607      	mov	r7, r0
   1f9f0:	b160      	cbz	r0, 1fa0c <_dtoa_r+0xd4>
   1f9f2:	2301      	movs	r3, #1
   1f9f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1f9f6:	6013      	str	r3, [r2, #0]
   1f9f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1f9fa:	2b00      	cmp	r3, #0
   1f9fc:	f000 8520 	beq.w	20440 <__kernel_ram_size+0x440>
   1fa00:	4b9a      	ldr	r3, [pc, #616]	; (1fc6c <_dtoa_r+0x334>)
   1fa02:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1fa04:	6013      	str	r3, [r2, #0]
   1fa06:	3b01      	subs	r3, #1
   1fa08:	9303      	str	r3, [sp, #12]
   1fa0a:	e7de      	b.n	1f9ca <_dtoa_r+0x92>
   1fa0c:	f3c4 560a 	ubfx	r6, r4, #20, #11
   1fa10:	aa16      	add	r2, sp, #88	; 0x58
   1fa12:	a917      	add	r1, sp, #92	; 0x5c
   1fa14:	4658      	mov	r0, fp
   1fa16:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
   1fa1a:	f021 fd28 	bl	4146e <__d2b>
   1fa1e:	4680      	mov	r8, r0
   1fa20:	2e00      	cmp	r6, #0
   1fa22:	d07d      	beq.n	1fb20 <_dtoa_r+0x1e8>
   1fa24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fa26:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   1fa2a:	9715      	str	r7, [sp, #84]	; 0x54
   1fa2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1fa30:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
   1fa34:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
   1fa38:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   1fa3c:	2200      	movs	r2, #0
   1fa3e:	4b8c      	ldr	r3, [pc, #560]	; (1fc70 <_dtoa_r+0x338>)
   1fa40:	4620      	mov	r0, r4
   1fa42:	4629      	mov	r1, r5
   1fa44:	f7fc fd00 	bl	1c448 <__aeabi_dsub>
   1fa48:	a37f      	add	r3, pc, #508	; (adr r3, 1fc48 <_dtoa_r+0x310>)
   1fa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fa4e:	f7fc feb3 	bl	1c7b8 <__aeabi_dmul>
   1fa52:	a37f      	add	r3, pc, #508	; (adr r3, 1fc50 <_dtoa_r+0x318>)
   1fa54:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fa58:	f7fc fcf8 	bl	1c44c <__adddf3>
   1fa5c:	4604      	mov	r4, r0
   1fa5e:	460d      	mov	r5, r1
   1fa60:	4630      	mov	r0, r6
   1fa62:	f7fc fe3f 	bl	1c6e4 <__aeabi_i2d>
   1fa66:	a37c      	add	r3, pc, #496	; (adr r3, 1fc58 <_dtoa_r+0x320>)
   1fa68:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fa6c:	f7fc fea4 	bl	1c7b8 <__aeabi_dmul>
   1fa70:	4602      	mov	r2, r0
   1fa72:	460b      	mov	r3, r1
   1fa74:	4620      	mov	r0, r4
   1fa76:	4629      	mov	r1, r5
   1fa78:	f7fc fce8 	bl	1c44c <__adddf3>
   1fa7c:	4604      	mov	r4, r0
   1fa7e:	460d      	mov	r5, r1
   1fa80:	f7fd f934 	bl	1ccec <__aeabi_d2iz>
   1fa84:	2200      	movs	r2, #0
   1fa86:	4682      	mov	sl, r0
   1fa88:	2300      	movs	r3, #0
   1fa8a:	4620      	mov	r0, r4
   1fa8c:	4629      	mov	r1, r5
   1fa8e:	f7fd f905 	bl	1cc9c <__aeabi_dcmplt>
   1fa92:	b148      	cbz	r0, 1faa8 <_dtoa_r+0x170>
   1fa94:	4650      	mov	r0, sl
   1fa96:	f7fc fe25 	bl	1c6e4 <__aeabi_i2d>
   1fa9a:	4622      	mov	r2, r4
   1fa9c:	462b      	mov	r3, r5
   1fa9e:	f7fd f8f3 	bl	1cc88 <__aeabi_dcmpeq>
   1faa2:	b908      	cbnz	r0, 1faa8 <_dtoa_r+0x170>
   1faa4:	f10a 3aff 	add.w	sl, sl, #4294967295
   1faa8:	f1ba 0f16 	cmp.w	sl, #22
   1faac:	d857      	bhi.n	1fb5e <_dtoa_r+0x226>
   1faae:	4b71      	ldr	r3, [pc, #452]	; (1fc74 <_dtoa_r+0x33c>)
   1fab0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   1fab4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1fab8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fabc:	f7fd f8ee 	bl	1cc9c <__aeabi_dcmplt>
   1fac0:	2800      	cmp	r0, #0
   1fac2:	d04e      	beq.n	1fb62 <_dtoa_r+0x22a>
   1fac4:	f10a 3aff 	add.w	sl, sl, #4294967295
   1fac8:	2300      	movs	r3, #0
   1faca:	9311      	str	r3, [sp, #68]	; 0x44
   1facc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1face:	1b9e      	subs	r6, r3, r6
   1fad0:	1e73      	subs	r3, r6, #1
   1fad2:	9307      	str	r3, [sp, #28]
   1fad4:	bf49      	itett	mi
   1fad6:	f1c6 0301 	rsbmi	r3, r6, #1
   1fada:	2300      	movpl	r3, #0
   1fadc:	9306      	strmi	r3, [sp, #24]
   1fade:	2300      	movmi	r3, #0
   1fae0:	bf54      	ite	pl
   1fae2:	9306      	strpl	r3, [sp, #24]
   1fae4:	9307      	strmi	r3, [sp, #28]
   1fae6:	f1ba 0f00 	cmp.w	sl, #0
   1faea:	db3c      	blt.n	1fb66 <_dtoa_r+0x22e>
   1faec:	9b07      	ldr	r3, [sp, #28]
   1faee:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
   1faf2:	4453      	add	r3, sl
   1faf4:	9307      	str	r3, [sp, #28]
   1faf6:	2300      	movs	r3, #0
   1faf8:	9309      	str	r3, [sp, #36]	; 0x24
   1fafa:	9b08      	ldr	r3, [sp, #32]
   1fafc:	2b09      	cmp	r3, #9
   1fafe:	f200 808d 	bhi.w	1fc1c <_dtoa_r+0x2e4>
   1fb02:	2b05      	cmp	r3, #5
   1fb04:	bfc5      	ittet	gt
   1fb06:	3b04      	subgt	r3, #4
   1fb08:	2400      	movgt	r4, #0
   1fb0a:	2401      	movle	r4, #1
   1fb0c:	9308      	strgt	r3, [sp, #32]
   1fb0e:	9b08      	ldr	r3, [sp, #32]
   1fb10:	3b02      	subs	r3, #2
   1fb12:	2b03      	cmp	r3, #3
   1fb14:	f200 808d 	bhi.w	1fc32 <_dtoa_r+0x2fa>
   1fb18:	e8df f003 	tbb	[pc, r3]
   1fb1c:	7e3a3c2f 	.word	0x7e3a3c2f
   1fb20:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	; 0x58
   1fb24:	441e      	add	r6, r3
   1fb26:	f206 4032 	addw	r0, r6, #1074	; 0x432
   1fb2a:	2820      	cmp	r0, #32
   1fb2c:	dd11      	ble.n	1fb52 <_dtoa_r+0x21a>
   1fb2e:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   1fb32:	9b00      	ldr	r3, [sp, #0]
   1fb34:	4084      	lsls	r4, r0
   1fb36:	f206 4012 	addw	r0, r6, #1042	; 0x412
   1fb3a:	fa23 f000 	lsr.w	r0, r3, r0
   1fb3e:	4320      	orrs	r0, r4
   1fb40:	f7fc fdc0 	bl	1c6c4 <__aeabi_ui2d>
   1fb44:	2301      	movs	r3, #1
   1fb46:	4604      	mov	r4, r0
   1fb48:	f1a1 75f8 	sub.w	r5, r1, #32505856	; 0x1f00000
   1fb4c:	3e01      	subs	r6, #1
   1fb4e:	9315      	str	r3, [sp, #84]	; 0x54
   1fb50:	e774      	b.n	1fa3c <_dtoa_r+0x104>
   1fb52:	f1c0 0020 	rsb	r0, r0, #32
   1fb56:	9b00      	ldr	r3, [sp, #0]
   1fb58:	fa03 f000 	lsl.w	r0, r3, r0
   1fb5c:	e7f0      	b.n	1fb40 <_dtoa_r+0x208>
   1fb5e:	2301      	movs	r3, #1
   1fb60:	e7b3      	b.n	1faca <_dtoa_r+0x192>
   1fb62:	9011      	str	r0, [sp, #68]	; 0x44
   1fb64:	e7b2      	b.n	1facc <_dtoa_r+0x194>
   1fb66:	9b06      	ldr	r3, [sp, #24]
   1fb68:	eba3 030a 	sub.w	r3, r3, sl
   1fb6c:	9306      	str	r3, [sp, #24]
   1fb6e:	f1ca 0300 	rsb	r3, sl, #0
   1fb72:	9309      	str	r3, [sp, #36]	; 0x24
   1fb74:	2300      	movs	r3, #0
   1fb76:	9310      	str	r3, [sp, #64]	; 0x40
   1fb78:	e7bf      	b.n	1fafa <_dtoa_r+0x1c2>
   1fb7a:	2300      	movs	r3, #0
   1fb7c:	930c      	str	r3, [sp, #48]	; 0x30
   1fb7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fb80:	2b00      	cmp	r3, #0
   1fb82:	dc59      	bgt.n	1fc38 <_dtoa_r+0x300>
   1fb84:	2301      	movs	r3, #1
   1fb86:	4699      	mov	r9, r3
   1fb88:	461a      	mov	r2, r3
   1fb8a:	9304      	str	r3, [sp, #16]
   1fb8c:	920d      	str	r2, [sp, #52]	; 0x34
   1fb8e:	e00c      	b.n	1fbaa <_dtoa_r+0x272>
   1fb90:	2301      	movs	r3, #1
   1fb92:	e7f3      	b.n	1fb7c <_dtoa_r+0x244>
   1fb94:	2300      	movs	r3, #0
   1fb96:	930c      	str	r3, [sp, #48]	; 0x30
   1fb98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fb9a:	4453      	add	r3, sl
   1fb9c:	f103 0901 	add.w	r9, r3, #1
   1fba0:	9304      	str	r3, [sp, #16]
   1fba2:	464b      	mov	r3, r9
   1fba4:	2b01      	cmp	r3, #1
   1fba6:	bfb8      	it	lt
   1fba8:	2301      	movlt	r3, #1
   1fbaa:	2200      	movs	r2, #0
   1fbac:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
   1fbb0:	606a      	str	r2, [r5, #4]
   1fbb2:	2204      	movs	r2, #4
   1fbb4:	f102 0014 	add.w	r0, r2, #20
   1fbb8:	6869      	ldr	r1, [r5, #4]
   1fbba:	4298      	cmp	r0, r3
   1fbbc:	d940      	bls.n	1fc40 <_dtoa_r+0x308>
   1fbbe:	4658      	mov	r0, fp
   1fbc0:	f021 f9da 	bl	40f78 <_Balloc>
   1fbc4:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   1fbc8:	6028      	str	r0, [r5, #0]
   1fbca:	f1b9 0f0e 	cmp.w	r9, #14
   1fbce:	681b      	ldr	r3, [r3, #0]
   1fbd0:	9303      	str	r3, [sp, #12]
   1fbd2:	f200 80d4 	bhi.w	1fd7e <_dtoa_r+0x446>
   1fbd6:	2c00      	cmp	r4, #0
   1fbd8:	f000 80d1 	beq.w	1fd7e <_dtoa_r+0x446>
   1fbdc:	f1ba 0f00 	cmp.w	sl, #0
   1fbe0:	dd66      	ble.n	1fcb0 <_dtoa_r+0x378>
   1fbe2:	4a24      	ldr	r2, [pc, #144]	; (1fc74 <_dtoa_r+0x33c>)
   1fbe4:	f00a 030f 	and.w	r3, sl, #15
   1fbe8:	ea4f 142a 	mov.w	r4, sl, asr #4
   1fbec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1fbf0:	06e2      	lsls	r2, r4, #27
   1fbf2:	ed93 7b00 	vldr	d7, [r3]
   1fbf6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   1fbfa:	d557      	bpl.n	1fcac <_dtoa_r+0x374>
   1fbfc:	4b1e      	ldr	r3, [pc, #120]	; (1fc78 <_dtoa_r+0x340>)
   1fbfe:	f004 040f 	and.w	r4, r4, #15
   1fc02:	2603      	movs	r6, #3
   1fc04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1fc08:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1fc0c:	f7fc fefe 	bl	1ca0c <__aeabi_ddiv>
   1fc10:	e9cd 0100 	strd	r0, r1, [sp]
   1fc14:	4d18      	ldr	r5, [pc, #96]	; (1fc78 <_dtoa_r+0x340>)
   1fc16:	e03e      	b.n	1fc96 <_dtoa_r+0x35e>
   1fc18:	2301      	movs	r3, #1
   1fc1a:	e7bc      	b.n	1fb96 <_dtoa_r+0x25e>
   1fc1c:	2401      	movs	r4, #1
   1fc1e:	2300      	movs	r3, #0
   1fc20:	940c      	str	r4, [sp, #48]	; 0x30
   1fc22:	9308      	str	r3, [sp, #32]
   1fc24:	f04f 33ff 	mov.w	r3, #4294967295
   1fc28:	2200      	movs	r2, #0
   1fc2a:	9304      	str	r3, [sp, #16]
   1fc2c:	4699      	mov	r9, r3
   1fc2e:	2312      	movs	r3, #18
   1fc30:	e7ac      	b.n	1fb8c <_dtoa_r+0x254>
   1fc32:	2301      	movs	r3, #1
   1fc34:	930c      	str	r3, [sp, #48]	; 0x30
   1fc36:	e7f5      	b.n	1fc24 <_dtoa_r+0x2ec>
   1fc38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fc3a:	9304      	str	r3, [sp, #16]
   1fc3c:	4699      	mov	r9, r3
   1fc3e:	e7b4      	b.n	1fbaa <_dtoa_r+0x272>
   1fc40:	3101      	adds	r1, #1
   1fc42:	0052      	lsls	r2, r2, #1
   1fc44:	6069      	str	r1, [r5, #4]
   1fc46:	e7b5      	b.n	1fbb4 <_dtoa_r+0x27c>
   1fc48:	636f4361 	.word	0x636f4361
   1fc4c:	3fd287a7 	.word	0x3fd287a7
   1fc50:	8b60c8b3 	.word	0x8b60c8b3
   1fc54:	3fc68a28 	.word	0x3fc68a28
   1fc58:	509f79fb 	.word	0x509f79fb
   1fc5c:	3fd34413 	.word	0x3fd34413
   1fc60:	7ff00000 	.word	0x7ff00000
   1fc64:	000492b6 	.word	0x000492b6
   1fc68:	000492ad 	.word	0x000492ad
   1fc6c:	00048cfc 	.word	0x00048cfc
   1fc70:	3ff80000 	.word	0x3ff80000
   1fc74:	00041e58 	.word	0x00041e58
   1fc78:	00041e30 	.word	0x00041e30
   1fc7c:	07e3      	lsls	r3, r4, #31
   1fc7e:	d508      	bpl.n	1fc92 <_dtoa_r+0x35a>
   1fc80:	3601      	adds	r6, #1
   1fc82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1fc86:	e9d5 2300 	ldrd	r2, r3, [r5]
   1fc8a:	f7fc fd95 	bl	1c7b8 <__aeabi_dmul>
   1fc8e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1fc92:	1064      	asrs	r4, r4, #1
   1fc94:	3508      	adds	r5, #8
   1fc96:	2c00      	cmp	r4, #0
   1fc98:	d1f0      	bne.n	1fc7c <_dtoa_r+0x344>
   1fc9a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1fc9e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fca2:	f7fc feb3 	bl	1ca0c <__aeabi_ddiv>
   1fca6:	e9cd 0100 	strd	r0, r1, [sp]
   1fcaa:	e01a      	b.n	1fce2 <_dtoa_r+0x3aa>
   1fcac:	2602      	movs	r6, #2
   1fcae:	e7b1      	b.n	1fc14 <_dtoa_r+0x2dc>
   1fcb0:	f000 809f 	beq.w	1fdf2 <_dtoa_r+0x4ba>
   1fcb4:	f1ca 0400 	rsb	r4, sl, #0
   1fcb8:	4b9e      	ldr	r3, [pc, #632]	; (1ff34 <_dtoa_r+0x5fc>)
   1fcba:	4d9f      	ldr	r5, [pc, #636]	; (1ff38 <_dtoa_r+0x600>)
   1fcbc:	2602      	movs	r6, #2
   1fcbe:	f004 020f 	and.w	r2, r4, #15
   1fcc2:	1124      	asrs	r4, r4, #4
   1fcc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1fcc8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1fccc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fcd0:	f7fc fd72 	bl	1c7b8 <__aeabi_dmul>
   1fcd4:	2300      	movs	r3, #0
   1fcd6:	e9cd 0100 	strd	r0, r1, [sp]
   1fcda:	2c00      	cmp	r4, #0
   1fcdc:	d17e      	bne.n	1fddc <_dtoa_r+0x4a4>
   1fcde:	2b00      	cmp	r3, #0
   1fce0:	d1e1      	bne.n	1fca6 <_dtoa_r+0x36e>
   1fce2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1fce4:	2b00      	cmp	r3, #0
   1fce6:	f000 8086 	beq.w	1fdf6 <_dtoa_r+0x4be>
   1fcea:	2200      	movs	r2, #0
   1fcec:	4b93      	ldr	r3, [pc, #588]	; (1ff3c <_dtoa_r+0x604>)
   1fcee:	e9dd 4500 	ldrd	r4, r5, [sp]
   1fcf2:	4620      	mov	r0, r4
   1fcf4:	4629      	mov	r1, r5
   1fcf6:	f7fc ffd1 	bl	1cc9c <__aeabi_dcmplt>
   1fcfa:	2800      	cmp	r0, #0
   1fcfc:	d07b      	beq.n	1fdf6 <_dtoa_r+0x4be>
   1fcfe:	f1b9 0f00 	cmp.w	r9, #0
   1fd02:	d078      	beq.n	1fdf6 <_dtoa_r+0x4be>
   1fd04:	9b04      	ldr	r3, [sp, #16]
   1fd06:	2b00      	cmp	r3, #0
   1fd08:	dd35      	ble.n	1fd76 <_dtoa_r+0x43e>
   1fd0a:	f10a 33ff 	add.w	r3, sl, #4294967295
   1fd0e:	4620      	mov	r0, r4
   1fd10:	2200      	movs	r2, #0
   1fd12:	4629      	mov	r1, r5
   1fd14:	930a      	str	r3, [sp, #40]	; 0x28
   1fd16:	3601      	adds	r6, #1
   1fd18:	4b89      	ldr	r3, [pc, #548]	; (1ff40 <_dtoa_r+0x608>)
   1fd1a:	f7fc fd4d 	bl	1c7b8 <__aeabi_dmul>
   1fd1e:	9c04      	ldr	r4, [sp, #16]
   1fd20:	e9cd 0100 	strd	r0, r1, [sp]
   1fd24:	4630      	mov	r0, r6
   1fd26:	f7fc fcdd 	bl	1c6e4 <__aeabi_i2d>
   1fd2a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1fd2e:	f7fc fd43 	bl	1c7b8 <__aeabi_dmul>
   1fd32:	2200      	movs	r2, #0
   1fd34:	4b83      	ldr	r3, [pc, #524]	; (1ff44 <_dtoa_r+0x60c>)
   1fd36:	f7fc fb89 	bl	1c44c <__adddf3>
   1fd3a:	4606      	mov	r6, r0
   1fd3c:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   1fd40:	2c00      	cmp	r4, #0
   1fd42:	d15c      	bne.n	1fdfe <_dtoa_r+0x4c6>
   1fd44:	2200      	movs	r2, #0
   1fd46:	4b80      	ldr	r3, [pc, #512]	; (1ff48 <_dtoa_r+0x610>)
   1fd48:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fd4c:	f7fc fb7c 	bl	1c448 <__aeabi_dsub>
   1fd50:	4632      	mov	r2, r6
   1fd52:	463b      	mov	r3, r7
   1fd54:	e9cd 0100 	strd	r0, r1, [sp]
   1fd58:	f7fc ffbe 	bl	1ccd8 <__aeabi_dcmpgt>
   1fd5c:	2800      	cmp	r0, #0
   1fd5e:	f040 8289 	bne.w	20274 <__kernel_ram_size+0x274>
   1fd62:	4632      	mov	r2, r6
   1fd64:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   1fd68:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fd6c:	f7fc ff96 	bl	1cc9c <__aeabi_dcmplt>
   1fd70:	2800      	cmp	r0, #0
   1fd72:	f040 827d 	bne.w	20270 <__kernel_ram_size+0x270>
   1fd76:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   1fd7a:	e9cd 3400 	strd	r3, r4, [sp]
   1fd7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1fd80:	2b00      	cmp	r3, #0
   1fd82:	f2c0 814c 	blt.w	2001e <__kernel_ram_size+0x1e>
   1fd86:	f1ba 0f0e 	cmp.w	sl, #14
   1fd8a:	f300 8148 	bgt.w	2001e <__kernel_ram_size+0x1e>
   1fd8e:	4b69      	ldr	r3, [pc, #420]	; (1ff34 <_dtoa_r+0x5fc>)
   1fd90:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   1fd94:	ed93 7b00 	vldr	d7, [r3]
   1fd98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fd9a:	2b00      	cmp	r3, #0
   1fd9c:	ed8d 7b04 	vstr	d7, [sp, #16]
   1fda0:	f280 80d6 	bge.w	1ff50 <_dtoa_r+0x618>
   1fda4:	f1b9 0f00 	cmp.w	r9, #0
   1fda8:	f300 80d2 	bgt.w	1ff50 <_dtoa_r+0x618>
   1fdac:	f040 825f 	bne.w	2026e <__kernel_ram_size+0x26e>
   1fdb0:	2200      	movs	r2, #0
   1fdb2:	4b65      	ldr	r3, [pc, #404]	; (1ff48 <_dtoa_r+0x610>)
   1fdb4:	464c      	mov	r4, r9
   1fdb6:	464e      	mov	r6, r9
   1fdb8:	ec51 0b17 	vmov	r0, r1, d7
   1fdbc:	f7fc fcfc 	bl	1c7b8 <__aeabi_dmul>
   1fdc0:	e9dd 2300 	ldrd	r2, r3, [sp]
   1fdc4:	f7fc ff7e 	bl	1ccc4 <__aeabi_dcmpge>
   1fdc8:	2800      	cmp	r0, #0
   1fdca:	f040 8238 	bne.w	2023e <__kernel_ram_size+0x23e>
   1fdce:	9d03      	ldr	r5, [sp, #12]
   1fdd0:	2331      	movs	r3, #49	; 0x31
   1fdd2:	f10a 0a01 	add.w	sl, sl, #1
   1fdd6:	f805 3b01 	strb.w	r3, [r5], #1
   1fdda:	e234      	b.n	20246 <__kernel_ram_size+0x246>
   1fddc:	07e7      	lsls	r7, r4, #31
   1fdde:	d505      	bpl.n	1fdec <_dtoa_r+0x4b4>
   1fde0:	3601      	adds	r6, #1
   1fde2:	e9d5 2300 	ldrd	r2, r3, [r5]
   1fde6:	f7fc fce7 	bl	1c7b8 <__aeabi_dmul>
   1fdea:	2301      	movs	r3, #1
   1fdec:	1064      	asrs	r4, r4, #1
   1fdee:	3508      	adds	r5, #8
   1fdf0:	e773      	b.n	1fcda <_dtoa_r+0x3a2>
   1fdf2:	2602      	movs	r6, #2
   1fdf4:	e775      	b.n	1fce2 <_dtoa_r+0x3aa>
   1fdf6:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   1fdfa:	464c      	mov	r4, r9
   1fdfc:	e792      	b.n	1fd24 <_dtoa_r+0x3ec>
   1fdfe:	4b4d      	ldr	r3, [pc, #308]	; (1ff34 <_dtoa_r+0x5fc>)
   1fe00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1fe04:	e953 0102 	ldrd	r0, r1, [r3, #-8]
   1fe08:	9b03      	ldr	r3, [sp, #12]
   1fe0a:	441c      	add	r4, r3
   1fe0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1fe0e:	2b00      	cmp	r3, #0
   1fe10:	d046      	beq.n	1fea0 <_dtoa_r+0x568>
   1fe12:	4602      	mov	r2, r0
   1fe14:	460b      	mov	r3, r1
   1fe16:	2000      	movs	r0, #0
   1fe18:	494c      	ldr	r1, [pc, #304]	; (1ff4c <_dtoa_r+0x614>)
   1fe1a:	f7fc fdf7 	bl	1ca0c <__aeabi_ddiv>
   1fe1e:	4632      	mov	r2, r6
   1fe20:	463b      	mov	r3, r7
   1fe22:	f7fc fb11 	bl	1c448 <__aeabi_dsub>
   1fe26:	9d03      	ldr	r5, [sp, #12]
   1fe28:	4606      	mov	r6, r0
   1fe2a:	460f      	mov	r7, r1
   1fe2c:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fe30:	f7fc ff5c 	bl	1ccec <__aeabi_d2iz>
   1fe34:	9012      	str	r0, [sp, #72]	; 0x48
   1fe36:	f7fc fc55 	bl	1c6e4 <__aeabi_i2d>
   1fe3a:	4602      	mov	r2, r0
   1fe3c:	460b      	mov	r3, r1
   1fe3e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fe42:	f7fc fb01 	bl	1c448 <__aeabi_dsub>
   1fe46:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1fe48:	4632      	mov	r2, r6
   1fe4a:	3330      	adds	r3, #48	; 0x30
   1fe4c:	f805 3b01 	strb.w	r3, [r5], #1
   1fe50:	463b      	mov	r3, r7
   1fe52:	e9cd 0100 	strd	r0, r1, [sp]
   1fe56:	f7fc ff21 	bl	1cc9c <__aeabi_dcmplt>
   1fe5a:	2800      	cmp	r0, #0
   1fe5c:	d15f      	bne.n	1ff1e <_dtoa_r+0x5e6>
   1fe5e:	2000      	movs	r0, #0
   1fe60:	4936      	ldr	r1, [pc, #216]	; (1ff3c <_dtoa_r+0x604>)
   1fe62:	e9dd 2300 	ldrd	r2, r3, [sp]
   1fe66:	f7fc faef 	bl	1c448 <__aeabi_dsub>
   1fe6a:	4632      	mov	r2, r6
   1fe6c:	463b      	mov	r3, r7
   1fe6e:	f7fc ff15 	bl	1cc9c <__aeabi_dcmplt>
   1fe72:	2800      	cmp	r0, #0
   1fe74:	f040 80b2 	bne.w	1ffdc <_dtoa_r+0x6a4>
   1fe78:	42a5      	cmp	r5, r4
   1fe7a:	f43f af7c 	beq.w	1fd76 <_dtoa_r+0x43e>
   1fe7e:	2200      	movs	r2, #0
   1fe80:	4b2f      	ldr	r3, [pc, #188]	; (1ff40 <_dtoa_r+0x608>)
   1fe82:	4630      	mov	r0, r6
   1fe84:	4639      	mov	r1, r7
   1fe86:	f7fc fc97 	bl	1c7b8 <__aeabi_dmul>
   1fe8a:	2200      	movs	r2, #0
   1fe8c:	4606      	mov	r6, r0
   1fe8e:	460f      	mov	r7, r1
   1fe90:	4b2b      	ldr	r3, [pc, #172]	; (1ff40 <_dtoa_r+0x608>)
   1fe92:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fe96:	f7fc fc8f 	bl	1c7b8 <__aeabi_dmul>
   1fe9a:	e9cd 0100 	strd	r0, r1, [sp]
   1fe9e:	e7c5      	b.n	1fe2c <_dtoa_r+0x4f4>
   1fea0:	4632      	mov	r2, r6
   1fea2:	463b      	mov	r3, r7
   1fea4:	f7fc fc88 	bl	1c7b8 <__aeabi_dmul>
   1fea8:	4625      	mov	r5, r4
   1feaa:	9e03      	ldr	r6, [sp, #12]
   1feac:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   1feb0:	e9dd 0100 	ldrd	r0, r1, [sp]
   1feb4:	f7fc ff1a 	bl	1ccec <__aeabi_d2iz>
   1feb8:	4607      	mov	r7, r0
   1feba:	f7fc fc13 	bl	1c6e4 <__aeabi_i2d>
   1febe:	4602      	mov	r2, r0
   1fec0:	3730      	adds	r7, #48	; 0x30
   1fec2:	460b      	mov	r3, r1
   1fec4:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fec8:	f7fc fabe 	bl	1c448 <__aeabi_dsub>
   1fecc:	f806 7b01 	strb.w	r7, [r6], #1
   1fed0:	42a6      	cmp	r6, r4
   1fed2:	f04f 0200 	mov.w	r2, #0
   1fed6:	e9cd 0100 	strd	r0, r1, [sp]
   1feda:	d125      	bne.n	1ff28 <_dtoa_r+0x5f0>
   1fedc:	4b1b      	ldr	r3, [pc, #108]	; (1ff4c <_dtoa_r+0x614>)
   1fede:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   1fee2:	f7fc fab3 	bl	1c44c <__adddf3>
   1fee6:	4602      	mov	r2, r0
   1fee8:	460b      	mov	r3, r1
   1feea:	e9dd 0100 	ldrd	r0, r1, [sp]
   1feee:	f7fc fef3 	bl	1ccd8 <__aeabi_dcmpgt>
   1fef2:	2800      	cmp	r0, #0
   1fef4:	d172      	bne.n	1ffdc <_dtoa_r+0x6a4>
   1fef6:	2000      	movs	r0, #0
   1fef8:	4914      	ldr	r1, [pc, #80]	; (1ff4c <_dtoa_r+0x614>)
   1fefa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   1fefe:	f7fc faa3 	bl	1c448 <__aeabi_dsub>
   1ff02:	4602      	mov	r2, r0
   1ff04:	460b      	mov	r3, r1
   1ff06:	e9dd 0100 	ldrd	r0, r1, [sp]
   1ff0a:	f7fc fec7 	bl	1cc9c <__aeabi_dcmplt>
   1ff0e:	2800      	cmp	r0, #0
   1ff10:	f43f af31 	beq.w	1fd76 <_dtoa_r+0x43e>
   1ff14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1ff18:	1e6a      	subs	r2, r5, #1
   1ff1a:	2b30      	cmp	r3, #48	; 0x30
   1ff1c:	d002      	beq.n	1ff24 <_dtoa_r+0x5ec>
   1ff1e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1ff22:	e049      	b.n	1ffb8 <_dtoa_r+0x680>
   1ff24:	4615      	mov	r5, r2
   1ff26:	e7f5      	b.n	1ff14 <_dtoa_r+0x5dc>
   1ff28:	4b05      	ldr	r3, [pc, #20]	; (1ff40 <_dtoa_r+0x608>)
   1ff2a:	f7fc fc45 	bl	1c7b8 <__aeabi_dmul>
   1ff2e:	e9cd 0100 	strd	r0, r1, [sp]
   1ff32:	e7bd      	b.n	1feb0 <_dtoa_r+0x578>
   1ff34:	00041e58 	.word	0x00041e58
   1ff38:	00041e30 	.word	0x00041e30
   1ff3c:	3ff00000 	.word	0x3ff00000
   1ff40:	40240000 	.word	0x40240000
   1ff44:	401c0000 	.word	0x401c0000
   1ff48:	40140000 	.word	0x40140000
   1ff4c:	3fe00000 	.word	0x3fe00000
   1ff50:	e9dd 6700 	ldrd	r6, r7, [sp]
   1ff54:	9d03      	ldr	r5, [sp, #12]
   1ff56:	4630      	mov	r0, r6
   1ff58:	4639      	mov	r1, r7
   1ff5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ff5e:	f7fc fd55 	bl	1ca0c <__aeabi_ddiv>
   1ff62:	f7fc fec3 	bl	1ccec <__aeabi_d2iz>
   1ff66:	4604      	mov	r4, r0
   1ff68:	f7fc fbbc 	bl	1c6e4 <__aeabi_i2d>
   1ff6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ff70:	f7fc fc22 	bl	1c7b8 <__aeabi_dmul>
   1ff74:	4602      	mov	r2, r0
   1ff76:	4630      	mov	r0, r6
   1ff78:	f104 0630 	add.w	r6, r4, #48	; 0x30
   1ff7c:	460b      	mov	r3, r1
   1ff7e:	4639      	mov	r1, r7
   1ff80:	f7fc fa62 	bl	1c448 <__aeabi_dsub>
   1ff84:	f805 6b01 	strb.w	r6, [r5], #1
   1ff88:	9e03      	ldr	r6, [sp, #12]
   1ff8a:	4602      	mov	r2, r0
   1ff8c:	460b      	mov	r3, r1
   1ff8e:	1bae      	subs	r6, r5, r6
   1ff90:	45b1      	cmp	r9, r6
   1ff92:	d137      	bne.n	20004 <__kernel_ram_size+0x4>
   1ff94:	f7fc fa5a 	bl	1c44c <__adddf3>
   1ff98:	4606      	mov	r6, r0
   1ff9a:	460f      	mov	r7, r1
   1ff9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ffa0:	f7fc fe9a 	bl	1ccd8 <__aeabi_dcmpgt>
   1ffa4:	b9c0      	cbnz	r0, 1ffd8 <_dtoa_r+0x6a0>
   1ffa6:	4630      	mov	r0, r6
   1ffa8:	4639      	mov	r1, r7
   1ffaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ffae:	f7fc fe6b 	bl	1cc88 <__aeabi_dcmpeq>
   1ffb2:	b108      	cbz	r0, 1ffb8 <_dtoa_r+0x680>
   1ffb4:	07e1      	lsls	r1, r4, #31
   1ffb6:	d40f      	bmi.n	1ffd8 <_dtoa_r+0x6a0>
   1ffb8:	4641      	mov	r1, r8
   1ffba:	4658      	mov	r0, fp
   1ffbc:	f021 f810 	bl	40fe0 <_Bfree>
   1ffc0:	2300      	movs	r3, #0
   1ffc2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1ffc4:	702b      	strb	r3, [r5, #0]
   1ffc6:	f10a 0301 	add.w	r3, sl, #1
   1ffca:	6013      	str	r3, [r2, #0]
   1ffcc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1ffce:	2b00      	cmp	r3, #0
   1ffd0:	f43f acfb 	beq.w	1f9ca <_dtoa_r+0x92>
   1ffd4:	601d      	str	r5, [r3, #0]
   1ffd6:	e4f8      	b.n	1f9ca <_dtoa_r+0x92>
   1ffd8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   1ffdc:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   1ffe0:	1e6b      	subs	r3, r5, #1
   1ffe2:	2a39      	cmp	r2, #57	; 0x39
   1ffe4:	d108      	bne.n	1fff8 <_dtoa_r+0x6c0>
   1ffe6:	9a03      	ldr	r2, [sp, #12]
   1ffe8:	429a      	cmp	r2, r3
   1ffea:	d109      	bne.n	20000 <__kernel_ram_size>
   1ffec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ffee:	9903      	ldr	r1, [sp, #12]
   1fff0:	3201      	adds	r2, #1
   1fff2:	920a      	str	r2, [sp, #40]	; 0x28
   1fff4:	2230      	movs	r2, #48	; 0x30
   1fff6:	700a      	strb	r2, [r1, #0]
   1fff8:	781a      	ldrb	r2, [r3, #0]
   1fffa:	3201      	adds	r2, #1
   1fffc:	701a      	strb	r2, [r3, #0]
   1fffe:	e78e      	b.n	1ff1e <_dtoa_r+0x5e6>
   20000:	461d      	mov	r5, r3
   20002:	e7eb      	b.n	1ffdc <_dtoa_r+0x6a4>
   20004:	2200      	movs	r2, #0
   20006:	4b9d      	ldr	r3, [pc, #628]	; (2027c <__kernel_ram_size+0x27c>)
   20008:	f7fc fbd6 	bl	1c7b8 <__aeabi_dmul>
   2000c:	2200      	movs	r2, #0
   2000e:	2300      	movs	r3, #0
   20010:	4606      	mov	r6, r0
   20012:	460f      	mov	r7, r1
   20014:	f7fc fe38 	bl	1cc88 <__aeabi_dcmpeq>
   20018:	2800      	cmp	r0, #0
   2001a:	d09c      	beq.n	1ff56 <_dtoa_r+0x61e>
   2001c:	e7cc      	b.n	1ffb8 <_dtoa_r+0x680>
   2001e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   20020:	2a00      	cmp	r2, #0
   20022:	f000 80cb 	beq.w	201bc <__kernel_ram_size+0x1bc>
   20026:	9a08      	ldr	r2, [sp, #32]
   20028:	2a01      	cmp	r2, #1
   2002a:	f300 80ae 	bgt.w	2018a <__kernel_ram_size+0x18a>
   2002e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   20030:	2a00      	cmp	r2, #0
   20032:	f000 80a6 	beq.w	20182 <__kernel_ram_size+0x182>
   20036:	f203 4333 	addw	r3, r3, #1075	; 0x433
   2003a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   2003c:	9d06      	ldr	r5, [sp, #24]
   2003e:	9a06      	ldr	r2, [sp, #24]
   20040:	2101      	movs	r1, #1
   20042:	4658      	mov	r0, fp
   20044:	441a      	add	r2, r3
   20046:	9206      	str	r2, [sp, #24]
   20048:	9a07      	ldr	r2, [sp, #28]
   2004a:	441a      	add	r2, r3
   2004c:	9207      	str	r2, [sp, #28]
   2004e:	f021 f8a9 	bl	411a4 <__i2b>
   20052:	4606      	mov	r6, r0
   20054:	2d00      	cmp	r5, #0
   20056:	dd0c      	ble.n	20072 <__kernel_ram_size+0x72>
   20058:	9b07      	ldr	r3, [sp, #28]
   2005a:	2b00      	cmp	r3, #0
   2005c:	dd09      	ble.n	20072 <__kernel_ram_size+0x72>
   2005e:	42ab      	cmp	r3, r5
   20060:	9a06      	ldr	r2, [sp, #24]
   20062:	bfa8      	it	ge
   20064:	462b      	movge	r3, r5
   20066:	1ad2      	subs	r2, r2, r3
   20068:	1aed      	subs	r5, r5, r3
   2006a:	9206      	str	r2, [sp, #24]
   2006c:	9a07      	ldr	r2, [sp, #28]
   2006e:	1ad3      	subs	r3, r2, r3
   20070:	9307      	str	r3, [sp, #28]
   20072:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20074:	b1f3      	cbz	r3, 200b4 <__kernel_ram_size+0xb4>
   20076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20078:	2b00      	cmp	r3, #0
   2007a:	f000 80a3 	beq.w	201c4 <__kernel_ram_size+0x1c4>
   2007e:	2c00      	cmp	r4, #0
   20080:	dd10      	ble.n	200a4 <__kernel_ram_size+0xa4>
   20082:	4631      	mov	r1, r6
   20084:	4622      	mov	r2, r4
   20086:	4658      	mov	r0, fp
   20088:	f01c ff48 	bl	3cf1c <__pow5mult>
   2008c:	4642      	mov	r2, r8
   2008e:	4601      	mov	r1, r0
   20090:	4606      	mov	r6, r0
   20092:	4658      	mov	r0, fp
   20094:	f021 f88f 	bl	411b6 <__multiply>
   20098:	4607      	mov	r7, r0
   2009a:	4641      	mov	r1, r8
   2009c:	4658      	mov	r0, fp
   2009e:	46b8      	mov	r8, r7
   200a0:	f020 ff9e 	bl	40fe0 <_Bfree>
   200a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   200a6:	1b1a      	subs	r2, r3, r4
   200a8:	d004      	beq.n	200b4 <__kernel_ram_size+0xb4>
   200aa:	4641      	mov	r1, r8
   200ac:	4658      	mov	r0, fp
   200ae:	f01c ff35 	bl	3cf1c <__pow5mult>
   200b2:	4680      	mov	r8, r0
   200b4:	2101      	movs	r1, #1
   200b6:	4658      	mov	r0, fp
   200b8:	f021 f874 	bl	411a4 <__i2b>
   200bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   200be:	4604      	mov	r4, r0
   200c0:	2b00      	cmp	r3, #0
   200c2:	f340 8081 	ble.w	201c8 <__kernel_ram_size+0x1c8>
   200c6:	461a      	mov	r2, r3
   200c8:	4601      	mov	r1, r0
   200ca:	4658      	mov	r0, fp
   200cc:	f01c ff26 	bl	3cf1c <__pow5mult>
   200d0:	9b08      	ldr	r3, [sp, #32]
   200d2:	4604      	mov	r4, r0
   200d4:	2b01      	cmp	r3, #1
   200d6:	dd7a      	ble.n	201ce <__kernel_ram_size+0x1ce>
   200d8:	2700      	movs	r7, #0
   200da:	6923      	ldr	r3, [r4, #16]
   200dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   200e0:	6918      	ldr	r0, [r3, #16]
   200e2:	f021 f80f 	bl	41104 <__hi0bits>
   200e6:	f1c0 0020 	rsb	r0, r0, #32
   200ea:	9b07      	ldr	r3, [sp, #28]
   200ec:	4418      	add	r0, r3
   200ee:	f010 001f 	ands.w	r0, r0, #31
   200f2:	f000 808b 	beq.w	2020c <__kernel_ram_size+0x20c>
   200f6:	f1c0 0320 	rsb	r3, r0, #32
   200fa:	2b04      	cmp	r3, #4
   200fc:	f340 8084 	ble.w	20208 <__kernel_ram_size+0x208>
   20100:	f1c0 001c 	rsb	r0, r0, #28
   20104:	9b06      	ldr	r3, [sp, #24]
   20106:	4405      	add	r5, r0
   20108:	4403      	add	r3, r0
   2010a:	9306      	str	r3, [sp, #24]
   2010c:	9b07      	ldr	r3, [sp, #28]
   2010e:	4403      	add	r3, r0
   20110:	9307      	str	r3, [sp, #28]
   20112:	9b06      	ldr	r3, [sp, #24]
   20114:	2b00      	cmp	r3, #0
   20116:	dd05      	ble.n	20124 <__kernel_ram_size+0x124>
   20118:	4641      	mov	r1, r8
   2011a:	461a      	mov	r2, r3
   2011c:	4658      	mov	r0, fp
   2011e:	f021 f8d9 	bl	412d4 <__lshift>
   20122:	4680      	mov	r8, r0
   20124:	9b07      	ldr	r3, [sp, #28]
   20126:	2b00      	cmp	r3, #0
   20128:	dd05      	ble.n	20136 <__kernel_ram_size+0x136>
   2012a:	4621      	mov	r1, r4
   2012c:	461a      	mov	r2, r3
   2012e:	4658      	mov	r0, fp
   20130:	f021 f8d0 	bl	412d4 <__lshift>
   20134:	4604      	mov	r4, r0
   20136:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20138:	2b00      	cmp	r3, #0
   2013a:	d069      	beq.n	20210 <__kernel_ram_size+0x210>
   2013c:	4621      	mov	r1, r4
   2013e:	4640      	mov	r0, r8
   20140:	f021 f91b 	bl	4137a <__mcmp>
   20144:	2800      	cmp	r0, #0
   20146:	da63      	bge.n	20210 <__kernel_ram_size+0x210>
   20148:	2300      	movs	r3, #0
   2014a:	4641      	mov	r1, r8
   2014c:	220a      	movs	r2, #10
   2014e:	4658      	mov	r0, fp
   20150:	f020 ff5d 	bl	4100e <__multadd>
   20154:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20156:	f10a 3aff 	add.w	sl, sl, #4294967295
   2015a:	4680      	mov	r8, r0
   2015c:	2b00      	cmp	r3, #0
   2015e:	f000 8179 	beq.w	20454 <__kernel_ram_size+0x454>
   20162:	2300      	movs	r3, #0
   20164:	4631      	mov	r1, r6
   20166:	220a      	movs	r2, #10
   20168:	4658      	mov	r0, fp
   2016a:	f020 ff50 	bl	4100e <__multadd>
   2016e:	9b04      	ldr	r3, [sp, #16]
   20170:	4606      	mov	r6, r0
   20172:	2b00      	cmp	r3, #0
   20174:	f300 808a 	bgt.w	2028c <__kernel_ram_size+0x28c>
   20178:	9b08      	ldr	r3, [sp, #32]
   2017a:	2b02      	cmp	r3, #2
   2017c:	f340 8086 	ble.w	2028c <__kernel_ram_size+0x28c>
   20180:	e04e      	b.n	20220 <__kernel_ram_size+0x220>
   20182:	9b16      	ldr	r3, [sp, #88]	; 0x58
   20184:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   20188:	e757      	b.n	2003a <__kernel_ram_size+0x3a>
   2018a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2018c:	f109 34ff 	add.w	r4, r9, #4294967295
   20190:	42a3      	cmp	r3, r4
   20192:	bfb7      	itett	lt
   20194:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
   20196:	1b1c      	subge	r4, r3, r4
   20198:	9409      	strlt	r4, [sp, #36]	; 0x24
   2019a:	1ae2      	sublt	r2, r4, r3
   2019c:	bfbf      	itttt	lt
   2019e:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   201a0:	2400      	movlt	r4, #0
   201a2:	189b      	addlt	r3, r3, r2
   201a4:	9310      	strlt	r3, [sp, #64]	; 0x40
   201a6:	f1b9 0f00 	cmp.w	r9, #0
   201aa:	bfb3      	iteet	lt
   201ac:	9b06      	ldrlt	r3, [sp, #24]
   201ae:	464b      	movge	r3, r9
   201b0:	9d06      	ldrge	r5, [sp, #24]
   201b2:	eba3 0509 	sublt.w	r5, r3, r9
   201b6:	bfb8      	it	lt
   201b8:	2300      	movlt	r3, #0
   201ba:	e740      	b.n	2003e <__kernel_ram_size+0x3e>
   201bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   201be:	9d06      	ldr	r5, [sp, #24]
   201c0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   201c2:	e747      	b.n	20054 <__kernel_ram_size+0x54>
   201c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   201c6:	e770      	b.n	200aa <__kernel_ram_size+0xaa>
   201c8:	9b08      	ldr	r3, [sp, #32]
   201ca:	2b01      	cmp	r3, #1
   201cc:	dc18      	bgt.n	20200 <__kernel_ram_size+0x200>
   201ce:	9b00      	ldr	r3, [sp, #0]
   201d0:	b9b3      	cbnz	r3, 20200 <__kernel_ram_size+0x200>
   201d2:	9b01      	ldr	r3, [sp, #4]
   201d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
   201d8:	b9a3      	cbnz	r3, 20204 <__kernel_ram_size+0x204>
   201da:	9b01      	ldr	r3, [sp, #4]
   201dc:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   201e0:	0d3f      	lsrs	r7, r7, #20
   201e2:	053f      	lsls	r7, r7, #20
   201e4:	b137      	cbz	r7, 201f4 <__kernel_ram_size+0x1f4>
   201e6:	9b06      	ldr	r3, [sp, #24]
   201e8:	2701      	movs	r7, #1
   201ea:	3301      	adds	r3, #1
   201ec:	9306      	str	r3, [sp, #24]
   201ee:	9b07      	ldr	r3, [sp, #28]
   201f0:	3301      	adds	r3, #1
   201f2:	9307      	str	r3, [sp, #28]
   201f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   201f6:	2b00      	cmp	r3, #0
   201f8:	f47f af6f 	bne.w	200da <__kernel_ram_size+0xda>
   201fc:	2001      	movs	r0, #1
   201fe:	e774      	b.n	200ea <__kernel_ram_size+0xea>
   20200:	2700      	movs	r7, #0
   20202:	e7f7      	b.n	201f4 <__kernel_ram_size+0x1f4>
   20204:	9f00      	ldr	r7, [sp, #0]
   20206:	e7f5      	b.n	201f4 <__kernel_ram_size+0x1f4>
   20208:	d083      	beq.n	20112 <__kernel_ram_size+0x112>
   2020a:	4618      	mov	r0, r3
   2020c:	301c      	adds	r0, #28
   2020e:	e779      	b.n	20104 <__kernel_ram_size+0x104>
   20210:	f1b9 0f00 	cmp.w	r9, #0
   20214:	dc34      	bgt.n	20280 <__kernel_ram_size+0x280>
   20216:	9b08      	ldr	r3, [sp, #32]
   20218:	2b02      	cmp	r3, #2
   2021a:	dd31      	ble.n	20280 <__kernel_ram_size+0x280>
   2021c:	f8cd 9010 	str.w	r9, [sp, #16]
   20220:	9b04      	ldr	r3, [sp, #16]
   20222:	b963      	cbnz	r3, 2023e <__kernel_ram_size+0x23e>
   20224:	4621      	mov	r1, r4
   20226:	2205      	movs	r2, #5
   20228:	4658      	mov	r0, fp
   2022a:	f020 fef0 	bl	4100e <__multadd>
   2022e:	4601      	mov	r1, r0
   20230:	4604      	mov	r4, r0
   20232:	4640      	mov	r0, r8
   20234:	f021 f8a1 	bl	4137a <__mcmp>
   20238:	2800      	cmp	r0, #0
   2023a:	f73f adc8 	bgt.w	1fdce <_dtoa_r+0x496>
   2023e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20240:	9d03      	ldr	r5, [sp, #12]
   20242:	ea6f 0a03 	mvn.w	sl, r3
   20246:	2700      	movs	r7, #0
   20248:	4621      	mov	r1, r4
   2024a:	4658      	mov	r0, fp
   2024c:	f020 fec8 	bl	40fe0 <_Bfree>
   20250:	2e00      	cmp	r6, #0
   20252:	f43f aeb1 	beq.w	1ffb8 <_dtoa_r+0x680>
   20256:	b12f      	cbz	r7, 20264 <__kernel_ram_size+0x264>
   20258:	42b7      	cmp	r7, r6
   2025a:	d003      	beq.n	20264 <__kernel_ram_size+0x264>
   2025c:	4639      	mov	r1, r7
   2025e:	4658      	mov	r0, fp
   20260:	f020 febe 	bl	40fe0 <_Bfree>
   20264:	4631      	mov	r1, r6
   20266:	4658      	mov	r0, fp
   20268:	f020 feba 	bl	40fe0 <_Bfree>
   2026c:	e6a4      	b.n	1ffb8 <_dtoa_r+0x680>
   2026e:	2400      	movs	r4, #0
   20270:	4626      	mov	r6, r4
   20272:	e7e4      	b.n	2023e <__kernel_ram_size+0x23e>
   20274:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   20278:	4626      	mov	r6, r4
   2027a:	e5a8      	b.n	1fdce <_dtoa_r+0x496>
   2027c:	40240000 	.word	0x40240000
   20280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20282:	f8cd 9010 	str.w	r9, [sp, #16]
   20286:	2b00      	cmp	r3, #0
   20288:	f000 80eb 	beq.w	20462 <__kernel_ram_size+0x462>
   2028c:	2d00      	cmp	r5, #0
   2028e:	dd05      	ble.n	2029c <__kernel_ram_size+0x29c>
   20290:	4631      	mov	r1, r6
   20292:	462a      	mov	r2, r5
   20294:	4658      	mov	r0, fp
   20296:	f021 f81d 	bl	412d4 <__lshift>
   2029a:	4606      	mov	r6, r0
   2029c:	2f00      	cmp	r7, #0
   2029e:	d056      	beq.n	2034e <__kernel_ram_size+0x34e>
   202a0:	6871      	ldr	r1, [r6, #4]
   202a2:	4658      	mov	r0, fp
   202a4:	f020 fe68 	bl	40f78 <_Balloc>
   202a8:	6932      	ldr	r2, [r6, #16]
   202aa:	4605      	mov	r5, r0
   202ac:	f106 010c 	add.w	r1, r6, #12
   202b0:	3202      	adds	r2, #2
   202b2:	300c      	adds	r0, #12
   202b4:	0092      	lsls	r2, r2, #2
   202b6:	f020 f9b1 	bl	4061c <memcpy>
   202ba:	2201      	movs	r2, #1
   202bc:	4629      	mov	r1, r5
   202be:	4658      	mov	r0, fp
   202c0:	f021 f808 	bl	412d4 <__lshift>
   202c4:	9b03      	ldr	r3, [sp, #12]
   202c6:	4637      	mov	r7, r6
   202c8:	4606      	mov	r6, r0
   202ca:	f103 0901 	add.w	r9, r3, #1
   202ce:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   202d2:	4413      	add	r3, r2
   202d4:	9309      	str	r3, [sp, #36]	; 0x24
   202d6:	9b00      	ldr	r3, [sp, #0]
   202d8:	f003 0301 	and.w	r3, r3, #1
   202dc:	9307      	str	r3, [sp, #28]
   202de:	f109 33ff 	add.w	r3, r9, #4294967295
   202e2:	4621      	mov	r1, r4
   202e4:	4640      	mov	r0, r8
   202e6:	9300      	str	r3, [sp, #0]
   202e8:	f020 fc2c 	bl	40b44 <quorem>
   202ec:	4603      	mov	r3, r0
   202ee:	9004      	str	r0, [sp, #16]
   202f0:	4639      	mov	r1, r7
   202f2:	4640      	mov	r0, r8
   202f4:	3330      	adds	r3, #48	; 0x30
   202f6:	930a      	str	r3, [sp, #40]	; 0x28
   202f8:	f021 f83f 	bl	4137a <__mcmp>
   202fc:	4632      	mov	r2, r6
   202fe:	9006      	str	r0, [sp, #24]
   20300:	4621      	mov	r1, r4
   20302:	4658      	mov	r0, fp
   20304:	f021 f853 	bl	413ae <__mdiff>
   20308:	68c2      	ldr	r2, [r0, #12]
   2030a:	4605      	mov	r5, r0
   2030c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2030e:	bb02      	cbnz	r2, 20352 <__kernel_ram_size+0x352>
   20310:	4601      	mov	r1, r0
   20312:	4640      	mov	r0, r8
   20314:	f021 f831 	bl	4137a <__mcmp>
   20318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2031a:	4602      	mov	r2, r0
   2031c:	4629      	mov	r1, r5
   2031e:	4658      	mov	r0, fp
   20320:	920c      	str	r2, [sp, #48]	; 0x30
   20322:	464d      	mov	r5, r9
   20324:	930a      	str	r3, [sp, #40]	; 0x28
   20326:	f020 fe5b 	bl	40fe0 <_Bfree>
   2032a:	9b08      	ldr	r3, [sp, #32]
   2032c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2032e:	ea43 0102 	orr.w	r1, r3, r2
   20332:	9b07      	ldr	r3, [sp, #28]
   20334:	430b      	orrs	r3, r1
   20336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20338:	d10d      	bne.n	20356 <__kernel_ram_size+0x356>
   2033a:	2b39      	cmp	r3, #57	; 0x39
   2033c:	d027      	beq.n	2038e <__kernel_ram_size+0x38e>
   2033e:	9a06      	ldr	r2, [sp, #24]
   20340:	2a00      	cmp	r2, #0
   20342:	dd01      	ble.n	20348 <__kernel_ram_size+0x348>
   20344:	9b04      	ldr	r3, [sp, #16]
   20346:	3331      	adds	r3, #49	; 0x31
   20348:	9a00      	ldr	r2, [sp, #0]
   2034a:	7013      	strb	r3, [r2, #0]
   2034c:	e77c      	b.n	20248 <__kernel_ram_size+0x248>
   2034e:	4630      	mov	r0, r6
   20350:	e7b8      	b.n	202c4 <__kernel_ram_size+0x2c4>
   20352:	2201      	movs	r2, #1
   20354:	e7e2      	b.n	2031c <__kernel_ram_size+0x31c>
   20356:	9906      	ldr	r1, [sp, #24]
   20358:	2900      	cmp	r1, #0
   2035a:	db04      	blt.n	20366 <__kernel_ram_size+0x366>
   2035c:	9808      	ldr	r0, [sp, #32]
   2035e:	4301      	orrs	r1, r0
   20360:	9807      	ldr	r0, [sp, #28]
   20362:	4301      	orrs	r1, r0
   20364:	d11d      	bne.n	203a2 <__kernel_ram_size+0x3a2>
   20366:	2a00      	cmp	r2, #0
   20368:	ddee      	ble.n	20348 <__kernel_ram_size+0x348>
   2036a:	4641      	mov	r1, r8
   2036c:	2201      	movs	r2, #1
   2036e:	4658      	mov	r0, fp
   20370:	9306      	str	r3, [sp, #24]
   20372:	f020 ffaf 	bl	412d4 <__lshift>
   20376:	4621      	mov	r1, r4
   20378:	4680      	mov	r8, r0
   2037a:	f020 fffe 	bl	4137a <__mcmp>
   2037e:	2800      	cmp	r0, #0
   20380:	9b06      	ldr	r3, [sp, #24]
   20382:	dc02      	bgt.n	2038a <__kernel_ram_size+0x38a>
   20384:	d1e0      	bne.n	20348 <__kernel_ram_size+0x348>
   20386:	07da      	lsls	r2, r3, #31
   20388:	d5de      	bpl.n	20348 <__kernel_ram_size+0x348>
   2038a:	2b39      	cmp	r3, #57	; 0x39
   2038c:	d1da      	bne.n	20344 <__kernel_ram_size+0x344>
   2038e:	2339      	movs	r3, #57	; 0x39
   20390:	9a00      	ldr	r2, [sp, #0]
   20392:	7013      	strb	r3, [r2, #0]
   20394:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   20398:	1e6a      	subs	r2, r5, #1
   2039a:	2b39      	cmp	r3, #57	; 0x39
   2039c:	d046      	beq.n	2042c <__kernel_ram_size+0x42c>
   2039e:	3301      	adds	r3, #1
   203a0:	e7d3      	b.n	2034a <__kernel_ram_size+0x34a>
   203a2:	2a00      	cmp	r2, #0
   203a4:	dd03      	ble.n	203ae <__kernel_ram_size+0x3ae>
   203a6:	2b39      	cmp	r3, #57	; 0x39
   203a8:	d0f1      	beq.n	2038e <__kernel_ram_size+0x38e>
   203aa:	3301      	adds	r3, #1
   203ac:	e7cc      	b.n	20348 <__kernel_ram_size+0x348>
   203ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
   203b0:	f809 3c01 	strb.w	r3, [r9, #-1]
   203b4:	4591      	cmp	r9, r2
   203b6:	d021      	beq.n	203fc <__kernel_ram_size+0x3fc>
   203b8:	4641      	mov	r1, r8
   203ba:	2300      	movs	r3, #0
   203bc:	220a      	movs	r2, #10
   203be:	4658      	mov	r0, fp
   203c0:	f020 fe25 	bl	4100e <__multadd>
   203c4:	42b7      	cmp	r7, r6
   203c6:	4680      	mov	r8, r0
   203c8:	f04f 0300 	mov.w	r3, #0
   203cc:	f04f 020a 	mov.w	r2, #10
   203d0:	4639      	mov	r1, r7
   203d2:	4658      	mov	r0, fp
   203d4:	d106      	bne.n	203e4 <__kernel_ram_size+0x3e4>
   203d6:	f020 fe1a 	bl	4100e <__multadd>
   203da:	4607      	mov	r7, r0
   203dc:	4606      	mov	r6, r0
   203de:	f109 0901 	add.w	r9, r9, #1
   203e2:	e77c      	b.n	202de <__kernel_ram_size+0x2de>
   203e4:	f020 fe13 	bl	4100e <__multadd>
   203e8:	4631      	mov	r1, r6
   203ea:	4607      	mov	r7, r0
   203ec:	2300      	movs	r3, #0
   203ee:	220a      	movs	r2, #10
   203f0:	4658      	mov	r0, fp
   203f2:	f020 fe0c 	bl	4100e <__multadd>
   203f6:	4606      	mov	r6, r0
   203f8:	e7f1      	b.n	203de <__kernel_ram_size+0x3de>
   203fa:	2700      	movs	r7, #0
   203fc:	4641      	mov	r1, r8
   203fe:	2201      	movs	r2, #1
   20400:	4658      	mov	r0, fp
   20402:	9300      	str	r3, [sp, #0]
   20404:	f020 ff66 	bl	412d4 <__lshift>
   20408:	4621      	mov	r1, r4
   2040a:	4680      	mov	r8, r0
   2040c:	f020 ffb5 	bl	4137a <__mcmp>
   20410:	2800      	cmp	r0, #0
   20412:	dcbf      	bgt.n	20394 <__kernel_ram_size+0x394>
   20414:	d102      	bne.n	2041c <__kernel_ram_size+0x41c>
   20416:	9b00      	ldr	r3, [sp, #0]
   20418:	07db      	lsls	r3, r3, #31
   2041a:	d4bb      	bmi.n	20394 <__kernel_ram_size+0x394>
   2041c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   20420:	1e6a      	subs	r2, r5, #1
   20422:	2b30      	cmp	r3, #48	; 0x30
   20424:	f47f af10 	bne.w	20248 <__kernel_ram_size+0x248>
   20428:	4615      	mov	r5, r2
   2042a:	e7f7      	b.n	2041c <__kernel_ram_size+0x41c>
   2042c:	9b03      	ldr	r3, [sp, #12]
   2042e:	4293      	cmp	r3, r2
   20430:	d104      	bne.n	2043c <__kernel_ram_size+0x43c>
   20432:	f10a 0a01 	add.w	sl, sl, #1
   20436:	2331      	movs	r3, #49	; 0x31
   20438:	9a03      	ldr	r2, [sp, #12]
   2043a:	e786      	b.n	2034a <__kernel_ram_size+0x34a>
   2043c:	4615      	mov	r5, r2
   2043e:	e7a9      	b.n	20394 <__kernel_ram_size+0x394>
   20440:	4b13      	ldr	r3, [pc, #76]	; (20490 <__kernel_ram_size+0x490>)
   20442:	f7ff bae1 	b.w	1fa08 <_dtoa_r+0xd0>
   20446:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   20448:	2b00      	cmp	r3, #0
   2044a:	f47f aab9 	bne.w	1f9c0 <_dtoa_r+0x88>
   2044e:	4b11      	ldr	r3, [pc, #68]	; (20494 <__kernel_ram_size+0x494>)
   20450:	f7ff bada 	b.w	1fa08 <_dtoa_r+0xd0>
   20454:	9b04      	ldr	r3, [sp, #16]
   20456:	2b00      	cmp	r3, #0
   20458:	dc03      	bgt.n	20462 <__kernel_ram_size+0x462>
   2045a:	9b08      	ldr	r3, [sp, #32]
   2045c:	2b02      	cmp	r3, #2
   2045e:	f73f aedf 	bgt.w	20220 <__kernel_ram_size+0x220>
   20462:	9d03      	ldr	r5, [sp, #12]
   20464:	4621      	mov	r1, r4
   20466:	4640      	mov	r0, r8
   20468:	f020 fb6c 	bl	40b44 <quorem>
   2046c:	9a03      	ldr	r2, [sp, #12]
   2046e:	f100 0330 	add.w	r3, r0, #48	; 0x30
   20472:	9904      	ldr	r1, [sp, #16]
   20474:	f805 3b01 	strb.w	r3, [r5], #1
   20478:	1aaa      	subs	r2, r5, r2
   2047a:	4291      	cmp	r1, r2
   2047c:	ddbd      	ble.n	203fa <__kernel_ram_size+0x3fa>
   2047e:	4641      	mov	r1, r8
   20480:	2300      	movs	r3, #0
   20482:	220a      	movs	r2, #10
   20484:	4658      	mov	r0, fp
   20486:	f020 fdc2 	bl	4100e <__multadd>
   2048a:	4680      	mov	r8, r0
   2048c:	e7ea      	b.n	20464 <__kernel_ram_size+0x464>
   2048e:	bf00      	nop
   20490:	00048cfb 	.word	0x00048cfb
   20494:	000492ad 	.word	0x000492ad

00020498 <nan>:
   20498:	ed9f 0b01 	vldr	d0, [pc, #4]	; 204a0 <nan+0x8>
   2049c:	4770      	bx	lr
   2049e:	bf00      	nop
   204a0:	00000000 	.word	0x00000000
   204a4:	7ff80000 	.word	0x7ff80000

000204a8 <cycle_cloud_connection>:
static void cycle_cloud_connection(struct k_work *work)
{
	int err;
	s32_t reboot_wait_ms = REBOOT_AFTER_DISCONNECT_WAIT_MS;

	LOG_INF("Disconnecting from cloud...");
   204a8:	2303      	movs	r3, #3
   204aa:	f04f 0000 	mov.w	r0, #0
{
   204ae:	b510      	push	{r4, lr}
	LOG_INF("Disconnecting from cloud...");
   204b0:	f363 0007 	bfi	r0, r3, #0, #8
   204b4:	4c16      	ldr	r4, [pc, #88]	; (20510 <cycle_cloud_connection+0x68>)
   204b6:	4b17      	ldr	r3, [pc, #92]	; (20514 <cycle_cloud_connection+0x6c>)
   204b8:	4917      	ldr	r1, [pc, #92]	; (20518 <cycle_cloud_connection+0x70>)
   204ba:	1ae4      	subs	r4, r4, r3
   204bc:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   204c0:	f364 108f 	bfi	r0, r4, #6, #10
   204c4:	f01d fd4d 	bl	3df62 <log_string_sync>

	err = cloud_disconnect(cloud_backend);
   204c8:	4b14      	ldr	r3, [pc, #80]	; (2051c <cycle_cloud_connection+0x74>)
   204ca:	6818      	ldr	r0, [r3, #0]
 *
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_disconnect(const struct cloud_backend *const backend)
{
	if (backend == NULL || backend->api == NULL ||
   204cc:	b188      	cbz	r0, 204f2 <cycle_cloud_connection+0x4a>
   204ce:	6803      	ldr	r3, [r0, #0]
   204d0:	b17b      	cbz	r3, 204f2 <cycle_cloud_connection+0x4a>
	    backend->api->disconnect == NULL) {
   204d2:	68db      	ldr	r3, [r3, #12]
	if (backend == NULL || backend->api == NULL ||
   204d4:	b16b      	cbz	r3, 204f2 <cycle_cloud_connection+0x4a>
		return -ENOTSUP;
	}

	return backend->api->disconnect(backend);
   204d6:	4798      	blx	r3
	if (err == 0) {
   204d8:	b958      	cbnz	r0, 204f2 <cycle_cloud_connection+0x4a>
		atomic_set(&reconnect_to_cloud, 1);
   204da:	2101      	movs	r1, #1
   204dc:	4810      	ldr	r0, [pc, #64]	; (20520 <cycle_cloud_connection+0x78>)
   204de:	f01d f9c2 	bl	3d866 <atomic_set>
	s32_t reboot_wait_ms = REBOOT_AFTER_DISCONNECT_WAIT_MS;
   204e2:	f643 2298 	movw	r2, #15000	; 0x3a98
	}

	/* Reboot fail-safe on disconnect */
	k_delayed_work_submit_to_queue(&application_work_q, &cloud_reboot_work,
				       reboot_wait_ms);
}
   204e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_delayed_work_submit_to_queue(&application_work_q, &cloud_reboot_work,
   204ea:	490e      	ldr	r1, [pc, #56]	; (20524 <cycle_cloud_connection+0x7c>)
   204ec:	480e      	ldr	r0, [pc, #56]	; (20528 <cycle_cloud_connection+0x80>)
   204ee:	f01a b961 	b.w	3a7b4 <k_delayed_work_submit_to_queue>
		LOG_INF("Disconnect failed. Device will reboot in %d seconds",
   204f2:	2303      	movs	r3, #3
   204f4:	f04f 0000 	mov.w	r0, #0
   204f8:	f363 0007 	bfi	r0, r3, #0, #8
   204fc:	2205      	movs	r2, #5
   204fe:	f364 108f 	bfi	r0, r4, #6, #10
   20502:	490a      	ldr	r1, [pc, #40]	; (2052c <cycle_cloud_connection+0x84>)
   20504:	f01d fd2d 	bl	3df62 <log_string_sync>
		reboot_wait_ms = K_SECONDS(5);
   20508:	f241 3288 	movw	r2, #5000	; 0x1388
   2050c:	e7eb      	b.n	204e6 <cycle_cloud_connection+0x3e>
   2050e:	bf00      	nop
   20510:	00041c2c 	.word	0x00041c2c
   20514:	00041c2c 	.word	0x00041c2c
   20518:	00042f7d 	.word	0x00042f7d
   2051c:	200236c8 	.word	0x200236c8
   20520:	20023738 	.word	0x20023738
   20524:	200236cc 	.word	0x200236cc
   20528:	20023600 	.word	0x20023600
   2052c:	00042f99 	.word	0x00042f99

00020530 <ui_evt_handler>:
}

#if defined(CONFIG_USE_UI_MODULE)
/**@brief User interface event handler. */
static void ui_evt_handler(struct ui_evt evt)
{
   20530:	b507      	push	{r0, r1, r2, lr}
   20532:	ab02      	add	r3, sp, #8
   20534:	e903 0003 	stmdb	r3, {r0, r1}
   20538:	9b01      	ldr	r3, [sp, #4]
	if (IS_ENABLED(CONFIG_CLOUD_BUTTON) &&
	   (evt.button == CONFIG_CLOUD_BUTTON_INPUT)) {
		button_send(evt.type == UI_EVT_BUTTON_ACTIVE ? 1 : 0);
	}

	if (IS_ENABLED(CONFIG_ACCEL_USE_SIM) && (evt.button == FLIP_INPUT)
   2053a:	2b03      	cmp	r3, #3
   2053c:	d108      	bne.n	20550 <ui_evt_handler+0x20>
	   && atomic_get(&send_data_enable)) {
   2053e:	4810      	ldr	r0, [pc, #64]	; (20580 <ui_evt_handler+0x50>)
   20540:	f01d f999 	bl	3d876 <atomic_get>
   20544:	b1c0      	cbz	r0, 20578 <ui_evt_handler+0x48>
				error_handler(ERROR_LTE_LC, err);
			}
		}
	}
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */
}
   20546:	b003      	add	sp, #12
   20548:	f85d eb04 	ldr.w	lr, [sp], #4
		motion_simulate_trigger();
   2054c:	f001 bad0 	b.w	21af0 <motion_simulate_trigger>
	if (IS_ENABLED(CONFIG_GPS_CONTROL_ON_LONG_PRESS) &&
   20550:	2b01      	cmp	r3, #1
   20552:	d111      	bne.n	20578 <ui_evt_handler+0x48>
		if (evt.type == UI_EVT_BUTTON_ACTIVE) {
   20554:	f89d 3000 	ldrb.w	r3, [sp]
   20558:	b943      	cbnz	r3, 2056c <ui_evt_handler+0x3c>
			k_delayed_work_submit_to_queue(&application_work_q,
   2055a:	f241 3288 	movw	r2, #5000	; 0x1388
   2055e:	4909      	ldr	r1, [pc, #36]	; (20584 <ui_evt_handler+0x54>)
   20560:	4809      	ldr	r0, [pc, #36]	; (20588 <ui_evt_handler+0x58>)
}
   20562:	b003      	add	sp, #12
   20564:	f85d eb04 	ldr.w	lr, [sp], #4
			k_delayed_work_submit_to_queue(&application_work_q,
   20568:	f01a b924 	b.w	3a7b4 <k_delayed_work_submit_to_queue>
			k_delayed_work_cancel(&long_press_button_work);
   2056c:	4805      	ldr	r0, [pc, #20]	; (20584 <ui_evt_handler+0x54>)
}
   2056e:	b003      	add	sp, #12
   20570:	f85d eb04 	ldr.w	lr, [sp], #4
			k_delayed_work_cancel(&long_press_button_work);
   20574:	f01a b9aa 	b.w	3a8cc <k_delayed_work_cancel>
}
   20578:	b003      	add	sp, #12
   2057a:	f85d fb04 	ldr.w	pc, [sp], #4
   2057e:	bf00      	nop
   20580:	2002376c 	.word	0x2002376c
   20584:	20023718 	.word	0x20023718
   20588:	20023600 	.word	0x20023600

0002058c <send_modem_at_cmd_work_fn>:
	struct cloud_channel_data modem_data = {
   2058c:	2210      	movs	r2, #16
{
   2058e:	b530      	push	{r4, r5, lr}
   20590:	b08f      	sub	sp, #60	; 0x3c
	struct cloud_channel_data modem_data = {
   20592:	2100      	movs	r1, #0
   20594:	eb0d 0002 	add.w	r0, sp, r2
   20598:	f020 f860 	bl	4065c <memset>
   2059c:	2314      	movs	r3, #20
	struct cloud_msg msg = {
   2059e:	2218      	movs	r2, #24
   205a0:	2100      	movs	r1, #0
   205a2:	a808      	add	r0, sp, #32
	struct cloud_channel_data modem_data = {
   205a4:	f88d 3010 	strb.w	r3, [sp, #16]
	struct cloud_msg msg = {
   205a8:	f020 f858 	bl	4065c <memset>
	size_t len = strlen(modem_at_cmd_buff);
   205ac:	4836      	ldr	r0, [pc, #216]	; (20688 <send_modem_at_cmd_work_fn+0xfc>)
   205ae:	f7fc fdb9 	bl	1d124 <strlen>
	if (len == 0) {
   205b2:	4c35      	ldr	r4, [pc, #212]	; (20688 <send_modem_at_cmd_work_fn+0xfc>)
   205b4:	bb90      	cbnz	r0, 2061c <send_modem_at_cmd_work_fn+0x90>
		state = AT_CMD_ERROR;
   205b6:	2301      	movs	r3, #1
		err = -ENOBUFS;
   205b8:	f06f 0568 	mvn.w	r5, #104	; 0x68
		state = AT_CMD_ERROR;
   205bc:	f88d 300f 	strb.w	r3, [sp, #15]
	len = strlen(modem_at_cmd_buff);
   205c0:	4831      	ldr	r0, [pc, #196]	; (20688 <send_modem_at_cmd_work_fn+0xfc>)
   205c2:	f7fc fdaf 	bl	1d124 <strlen>
	if (err) {
   205c6:	b39d      	cbz	r5, 20630 <send_modem_at_cmd_work_fn+0xa4>
		len = snprintf(modem_at_cmd_buff, sizeof(modem_at_cmd_buff),
   205c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   205cc:	4a2f      	ldr	r2, [pc, #188]	; (2068c <send_modem_at_cmd_work_fn+0x100>)
   205ce:	9300      	str	r3, [sp, #0]
   205d0:	f640 218d 	movw	r1, #2701	; 0xa8d
   205d4:	462b      	mov	r3, r5
   205d6:	482c      	ldr	r0, [pc, #176]	; (20688 <send_modem_at_cmd_work_fn+0xfc>)
   205d8:	f01b fdfe 	bl	3c1d8 <sniprintf>
	modem_data.data.len = len;
   205dc:	e9cd 4005 	strd	r4, r0, [sp, #20]
	err = cloud_encode_data(&modem_data, CLOUD_CMD_GROUP_COMMAND, &msg);
   205e0:	aa08      	add	r2, sp, #32
   205e2:	210a      	movs	r1, #10
   205e4:	a804      	add	r0, sp, #16
   205e6:	f001 fc67 	bl	21eb8 <cloud_encode_data>
	if (err) {
   205ea:	4602      	mov	r2, r0
   205ec:	b380      	cbz	r0, 20650 <send_modem_at_cmd_work_fn+0xc4>
		LOG_ERR("[%s:%d] cloud_encode_data failed with error %d",
   205ee:	2301      	movs	r3, #1
   205f0:	f04f 0000 	mov.w	r0, #0
   205f4:	4926      	ldr	r1, [pc, #152]	; (20690 <send_modem_at_cmd_work_fn+0x104>)
   205f6:	f363 0007 	bfi	r0, r3, #0, #8
   205fa:	4b26      	ldr	r3, [pc, #152]	; (20694 <send_modem_at_cmd_work_fn+0x108>)
   205fc:	9200      	str	r2, [sp, #0]
   205fe:	1a5b      	subs	r3, r3, r1
   20600:	08db      	lsrs	r3, r3, #3
   20602:	f363 108f 	bfi	r0, r3, #6, #10
   20606:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   2060a:	4a23      	ldr	r2, [pc, #140]	; (20698 <send_modem_at_cmd_work_fn+0x10c>)
   2060c:	4923      	ldr	r1, [pc, #140]	; (2069c <send_modem_at_cmd_work_fn+0x110>)
			LOG_ERR("[%s:%d] cloud_send failed with error %d",
   2060e:	f01d fca8 	bl	3df62 <log_string_sync>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   20612:	4823      	ldr	r0, [pc, #140]	; (206a0 <send_modem_at_cmd_work_fn+0x114>)
   20614:	f019 fdca 	bl	3a1ac <z_impl_k_sem_give>
}
   20618:	b00f      	add	sp, #60	; 0x3c
   2061a:	bd30      	pop	{r4, r5, pc}
		err = at_cmd_write(modem_at_cmd_buff, modem_at_cmd_buff,
   2061c:	f10d 030f 	add.w	r3, sp, #15
   20620:	f640 228d 	movw	r2, #2701	; 0xa8d
   20624:	4621      	mov	r1, r4
   20626:	4620      	mov	r0, r4
   20628:	f007 fc8a 	bl	27f40 <at_cmd_write>
   2062c:	4605      	mov	r5, r0
   2062e:	e7c7      	b.n	205c0 <send_modem_at_cmd_work_fn+0x34>
	} else if (len == 0) {
   20630:	b928      	cbnz	r0, 2063e <send_modem_at_cmd_work_fn+0xb2>
		len = snprintf(modem_at_cmd_buff, sizeof(modem_at_cmd_buff),
   20632:	491c      	ldr	r1, [pc, #112]	; (206a4 <send_modem_at_cmd_work_fn+0x118>)
   20634:	4814      	ldr	r0, [pc, #80]	; (20688 <send_modem_at_cmd_work_fn+0xfc>)
   20636:	f020 f9c6 	bl	409c6 <strcpy>
   2063a:	2004      	movs	r0, #4
   2063c:	e7ce      	b.n	205dc <send_modem_at_cmd_work_fn+0x50>
	} else if (len > MODEM_AT_CMD_MAX_RESPONSE_LEN) {
   2063e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   20642:	d9cb      	bls.n	205dc <send_modem_at_cmd_work_fn+0x50>
		len = snprintf(modem_at_cmd_buff, sizeof(modem_at_cmd_buff),
   20644:	4918      	ldr	r1, [pc, #96]	; (206a8 <send_modem_at_cmd_work_fn+0x11c>)
   20646:	4810      	ldr	r0, [pc, #64]	; (20688 <send_modem_at_cmd_work_fn+0xfc>)
   20648:	f020 f9bd 	bl	409c6 <strcpy>
   2064c:	2032      	movs	r0, #50	; 0x32
   2064e:	e7c5      	b.n	205dc <send_modem_at_cmd_work_fn+0x50>
		err = cloud_send(cloud_backend, &msg);
   20650:	4b16      	ldr	r3, [pc, #88]	; (206ac <send_modem_at_cmd_work_fn+0x120>)
   20652:	a908      	add	r1, sp, #32
   20654:	6818      	ldr	r0, [r3, #0]
   20656:	f01d f8fd 	bl	3d854 <cloud_send>
   2065a:	4604      	mov	r4, r0
 *
 * @return 0 if the operation was successful, otherwise a (negative) error code.
 */
static inline void cloud_release_data(struct cloud_msg *data)
{
	k_free(data->buf);
   2065c:	9808      	ldr	r0, [sp, #32]
   2065e:	f01f fe3a 	bl	402d6 <k_free>
		if (err) {
   20662:	2c00      	cmp	r4, #0
   20664:	d0d5      	beq.n	20612 <send_modem_at_cmd_work_fn+0x86>
			LOG_ERR("[%s:%d] cloud_send failed with error %d",
   20666:	2301      	movs	r3, #1
   20668:	f04f 0000 	mov.w	r0, #0
   2066c:	4a08      	ldr	r2, [pc, #32]	; (20690 <send_modem_at_cmd_work_fn+0x104>)
   2066e:	f363 0007 	bfi	r0, r3, #0, #8
   20672:	4b08      	ldr	r3, [pc, #32]	; (20694 <send_modem_at_cmd_work_fn+0x108>)
   20674:	9400      	str	r4, [sp, #0]
   20676:	1a9b      	subs	r3, r3, r2
   20678:	08db      	lsrs	r3, r3, #3
   2067a:	f363 108f 	bfi	r0, r3, #6, #10
   2067e:	4a06      	ldr	r2, [pc, #24]	; (20698 <send_modem_at_cmd_work_fn+0x10c>)
   20680:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
   20684:	490a      	ldr	r1, [pc, #40]	; (206b0 <send_modem_at_cmd_work_fn+0x124>)
   20686:	e7c2      	b.n	2060e <send_modem_at_cmd_work_fn+0x82>
   20688:	200293f7 	.word	0x200293f7
   2068c:	000435e5 	.word	0x000435e5
   20690:	00041c2c 	.word	0x00041c2c
   20694:	00041c2c 	.word	0x00041c2c
   20698:	00042c10 	.word	0x00042c10
   2069c:	00043638 	.word	0x00043638
   206a0:	20032428 	.word	0x20032428
   206a4:	00043600 	.word	0x00043600
   206a8:	00043605 	.word	0x00043605
   206ac:	200236c8 	.word	0x200236c8
   206b0:	00043667 	.word	0x00043667

000206b4 <modem_rsrp_handler>:
	if (rsrp_value > 97) {
   206b4:	2861      	cmp	r0, #97	; 0x61
{
   206b6:	b508      	push	{r3, lr}
	if (rsrp_value > 97) {
   206b8:	d812      	bhi.n	206e0 <modem_rsrp_handler+0x2c>
	rsrp.value = rsrp_value;
   206ba:	4b0a      	ldr	r3, [pc, #40]	; (206e4 <modem_rsrp_handler+0x30>)
   206bc:	8018      	strh	r0, [r3, #0]
 * @return Remaining time (in milliseconds).
 * @req K-DWORK-001
 */
static inline s32_t k_delayed_work_remaining_get(struct k_delayed_work *work)
{
	return k_ticks_to_ms_floor64(z_timeout_remaining(&work->timeout));
   206be:	480a      	ldr	r0, [pc, #40]	; (206e8 <modem_rsrp_handler+0x34>)
   206c0:	f01a fa82 	bl	3abc8 <z_timeout_remaining>
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   206c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   206c8:	fb80 0103 	smull	r0, r1, r0, r3
   206cc:	0bc2      	lsrs	r2, r0, #15
	if (CONFIG_HOLD_TIME_RSRP == 0 ||
   206ce:	ea52 4241 	orrs.w	r2, r2, r1, lsl #17
   206d2:	d105      	bne.n	206e0 <modem_rsrp_handler+0x2c>
}
   206d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   206d8:	4904      	ldr	r1, [pc, #16]	; (206ec <modem_rsrp_handler+0x38>)
   206da:	4805      	ldr	r0, [pc, #20]	; (206f0 <modem_rsrp_handler+0x3c>)
   206dc:	f01a b86a 	b.w	3a7b4 <k_delayed_work_submit_to_queue>
}
   206e0:	bd08      	pop	{r3, pc}
   206e2:	bf00      	nop
   206e4:	200322d0 	.word	0x200322d0
   206e8:	2002374c 	.word	0x2002374c
   206ec:	20023740 	.word	0x20023740
   206f0:	20023600 	.word	0x20023600

000206f4 <k_work_submit_to_queue.constprop.15>:
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
   206f4:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   206f6:	f100 0308 	add.w	r3, r0, #8
   206fa:	e8d3 2fef 	ldaex	r2, [r3]
   206fe:	f042 0001 	orr.w	r0, r2, #1
   20702:	e8c3 0fec 	stlex	ip, r0, [r3]
   20706:	f1bc 0f00 	cmp.w	ip, #0
   2070a:	d1f6      	bne.n	206fa <k_work_submit_to_queue.constprop.15+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2070c:	07d3      	lsls	r3, r2, #31
   2070e:	d402      	bmi.n	20716 <k_work_submit_to_queue.constprop.15+0x22>
		k_queue_append(&work_q->queue, work);
   20710:	4801      	ldr	r0, [pc, #4]	; (20718 <k_work_submit_to_queue.constprop.15+0x24>)
   20712:	f01f be16 	b.w	40342 <k_queue_append>
}
   20716:	4770      	bx	lr
   20718:	20023600 	.word	0x20023600

0002071c <set_gps_enable>:
{
   2071c:	b510      	push	{r4, lr}
   2071e:	4604      	mov	r4, r0
	if (enable == gps_control_is_enabled()) {
   20720:	f001 ffc0 	bl	226a4 <gps_control_is_enabled>
   20724:	42a0      	cmp	r0, r4
   20726:	d01f      	beq.n	20768 <set_gps_enable+0x4c>
	if (enable) {
   20728:	4a10      	ldr	r2, [pc, #64]	; (2076c <set_gps_enable+0x50>)
   2072a:	4b11      	ldr	r3, [pc, #68]	; (20770 <set_gps_enable+0x54>)
		LOG_INF("Starting GPS");
   2072c:	f04f 0000 	mov.w	r0, #0
   20730:	1a9b      	subs	r3, r3, r2
   20732:	2203      	movs	r2, #3
   20734:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   20738:	f362 0007 	bfi	r0, r2, #0, #8
   2073c:	f363 108f 	bfi	r0, r3, #6, #10
	if (enable) {
   20740:	b154      	cbz	r4, 20758 <set_gps_enable+0x3c>
		LOG_INF("Starting GPS");
   20742:	490c      	ldr	r1, [pc, #48]	; (20774 <set_gps_enable+0x58>)
   20744:	f01d fc0d 	bl	3df62 <log_string_sync>
		k_work_submit_to_queue(&application_work_q,
   20748:	480b      	ldr	r0, [pc, #44]	; (20778 <set_gps_enable+0x5c>)
   2074a:	f7ff ffd3 	bl	206f4 <k_work_submit_to_queue.constprop.15>
}
   2074e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		gps_control_start(K_NO_WAIT);
   20752:	2000      	movs	r0, #0
   20754:	f002 b8c4 	b.w	228e0 <gps_control_start>
		LOG_INF("Stopping GPS");
   20758:	4908      	ldr	r1, [pc, #32]	; (2077c <set_gps_enable+0x60>)
   2075a:	f01d fc02 	bl	3df62 <log_string_sync>
		gps_control_stop(K_NO_WAIT);
   2075e:	4620      	mov	r0, r4
}
   20760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		gps_control_stop(K_NO_WAIT);
   20764:	f002 b8c6 	b.w	228f4 <gps_control_stop>
}
   20768:	bd10      	pop	{r4, pc}
   2076a:	bf00      	nop
   2076c:	00041c2c 	.word	0x00041c2c
   20770:	00041c2c 	.word	0x00041c2c
   20774:	00043754 	.word	0x00043754
   20778:	20023760 	.word	0x20023760
   2077c:	000488aa 	.word	0x000488aa

00020780 <long_press_handler>:
{
   20780:	b508      	push	{r3, lr}
	if (!atomic_get(&send_data_enable)) {
   20782:	480d      	ldr	r0, [pc, #52]	; (207b8 <long_press_handler+0x38>)
   20784:	f01d f877 	bl	3d876 <atomic_get>
   20788:	b968      	cbnz	r0, 207a6 <long_press_handler+0x26>
		LOG_INF("Link not ready, long press disregarded");
   2078a:	2303      	movs	r3, #3
   2078c:	4a0b      	ldr	r2, [pc, #44]	; (207bc <long_press_handler+0x3c>)
   2078e:	f363 0007 	bfi	r0, r3, #0, #8
   20792:	4b0b      	ldr	r3, [pc, #44]	; (207c0 <long_press_handler+0x40>)
   20794:	490b      	ldr	r1, [pc, #44]	; (207c4 <long_press_handler+0x44>)
   20796:	1a9b      	subs	r3, r3, r2
   20798:	08db      	lsrs	r3, r3, #3
   2079a:	f363 108f 	bfi	r0, r3, #6, #10
}
   2079e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_INF("Link not ready, long press disregarded");
   207a2:	f01d bbde 	b.w	3df62 <log_string_sync>
	set_gps_enable(!gps_control_is_enabled());
   207a6:	f001 ff7d 	bl	226a4 <gps_control_is_enabled>
}
   207aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	set_gps_enable(!gps_control_is_enabled());
   207ae:	f080 0001 	eor.w	r0, r0, #1
   207b2:	b2c0      	uxtb	r0, r0
   207b4:	f7ff bfb2 	b.w	2071c <set_gps_enable>
   207b8:	2002376c 	.word	0x2002376c
   207bc:	00041c2c 	.word	0x00041c2c
   207c0:	00041c2c 	.word	0x00041c2c
   207c4:	00043206 	.word	0x00043206

000207c8 <cloud_cmd_handler>:
{
   207c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	    (cmd->group == CLOUD_CMD_GROUP_CFG_SET) &&
   207ca:	6802      	ldr	r2, [r0, #0]
	if ((cmd->channel == CLOUD_CHANNEL_GPS) &&
   207cc:	4951      	ldr	r1, [pc, #324]	; (20914 <cloud_cmd_handler+0x14c>)
	    (cmd->group == CLOUD_CMD_GROUP_CFG_SET) &&
   207ce:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	if ((cmd->channel == CLOUD_CHANNEL_GPS) &&
   207d2:	428b      	cmp	r3, r1
   207d4:	d109      	bne.n	207ea <cloud_cmd_handler+0x22>
		set_gps_enable(cmd->data.sv.state == CLOUD_CMD_STATE_TRUE);
   207d6:	f990 0010 	ldrsb.w	r0, [r0, #16]
   207da:	1e43      	subs	r3, r0, #1
   207dc:	4258      	negs	r0, r3
   207de:	4158      	adcs	r0, r3
}
   207e0:	b003      	add	sp, #12
   207e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		set_gps_enable(cmd->data.sv.state == CLOUD_CMD_STATE_TRUE);
   207e6:	f7ff bf99 	b.w	2071c <set_gps_enable>
	} else if ((cmd->channel == CLOUD_CHANNEL_MODEM) &&
   207ea:	494b      	ldr	r1, [pc, #300]	; (20918 <cloud_cmd_handler+0x150>)
   207ec:	428b      	cmp	r3, r1
   207ee:	d147      	bne.n	20880 <cloud_cmd_handler+0xb8>
		cloud_cmd_handle_modem_at_cmd(cmd->data.data_string);
   207f0:	6884      	ldr	r4, [r0, #8]
	if (!at_cmd) {
   207f2:	2c00      	cmp	r4, #0
   207f4:	f000 808c 	beq.w	20910 <cloud_cmd_handler+0x148>
	return z_impl_k_sem_take(sem, timeout);
   207f8:	2114      	movs	r1, #20
   207fa:	4848      	ldr	r0, [pc, #288]	; (2091c <cloud_cmd_handler+0x154>)
   207fc:	f019 fd20 	bl	3a240 <z_impl_k_sem_take>
	if (k_sem_take(&modem_at_cmd_sem, K_MSEC(20)) != 0) {
   20800:	4605      	mov	r5, r0
   20802:	b198      	cbz	r0, 2082c <cloud_cmd_handler+0x64>
		LOG_ERR("[%s:%d] Modem AT cmd in progress.", __func__,
   20804:	2301      	movs	r3, #1
   20806:	f04f 0000 	mov.w	r0, #0
   2080a:	4a45      	ldr	r2, [pc, #276]	; (20920 <cloud_cmd_handler+0x158>)
   2080c:	f363 0007 	bfi	r0, r3, #0, #8
   20810:	4b44      	ldr	r3, [pc, #272]	; (20924 <cloud_cmd_handler+0x15c>)
   20812:	4945      	ldr	r1, [pc, #276]	; (20928 <cloud_cmd_handler+0x160>)
   20814:	1a9b      	subs	r3, r3, r2
   20816:	08db      	lsrs	r3, r3, #3
   20818:	f363 108f 	bfi	r0, r3, #6, #10
   2081c:	f240 2395 	movw	r3, #661	; 0x295
   20820:	4a42      	ldr	r2, [pc, #264]	; (2092c <cloud_cmd_handler+0x164>)
}
   20822:	b003      	add	sp, #12
   20824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		LOG_ERR("[%s:%d] Modem AT cmd in progress.", __func__,
   20828:	f01d bb9b 	b.w	3df62 <log_string_sync>
	if (strnlen(at_cmd, max_cmd_len) == max_cmd_len) {
   2082c:	f640 218d 	movw	r1, #2701	; 0xa8d
   20830:	4620      	mov	r0, r4
   20832:	f020 f911 	bl	40a58 <strnlen>
   20836:	f640 228d 	movw	r2, #2701	; 0xa8d
   2083a:	4290      	cmp	r0, r2
   2083c:	d11b      	bne.n	20876 <cloud_cmd_handler+0xae>
		LOG_ERR("[%s:%d] AT cmd is too long, max length is %zu",
   2083e:	2301      	movs	r3, #1
   20840:	f04f 0000 	mov.w	r0, #0
   20844:	4a36      	ldr	r2, [pc, #216]	; (20920 <cloud_cmd_handler+0x158>)
   20846:	f363 0007 	bfi	r0, r3, #0, #8
   2084a:	4b36      	ldr	r3, [pc, #216]	; (20924 <cloud_cmd_handler+0x15c>)
   2084c:	4938      	ldr	r1, [pc, #224]	; (20930 <cloud_cmd_handler+0x168>)
   2084e:	1a9b      	subs	r3, r3, r2
   20850:	08db      	lsrs	r3, r3, #3
   20852:	f363 108f 	bfi	r0, r3, #6, #10
   20856:	f640 238c 	movw	r3, #2700	; 0xa8c
   2085a:	4a34      	ldr	r2, [pc, #208]	; (2092c <cloud_cmd_handler+0x164>)
   2085c:	9300      	str	r3, [sp, #0]
   2085e:	f240 239e 	movw	r3, #670	; 0x29e
   20862:	f01d fb7e 	bl	3df62 <log_string_sync>
		modem_at_cmd_buff[0] = '\0';
   20866:	4b33      	ldr	r3, [pc, #204]	; (20934 <cloud_cmd_handler+0x16c>)
   20868:	701d      	strb	r5, [r3, #0]
	k_work_submit_to_queue(&application_work_q, &send_modem_at_cmd_work);
   2086a:	4833      	ldr	r0, [pc, #204]	; (20938 <cloud_cmd_handler+0x170>)
}
   2086c:	b003      	add	sp, #12
   2086e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		k_work_submit_to_queue(&application_work_q,
   20872:	f7ff bf3f 	b.w	206f4 <k_work_submit_to_queue.constprop.15>
		strcpy(modem_at_cmd_buff, at_cmd);
   20876:	4621      	mov	r1, r4
   20878:	482e      	ldr	r0, [pc, #184]	; (20934 <cloud_cmd_handler+0x16c>)
   2087a:	f020 f8ac 	bl	409d6 <__strcpy_chk>
   2087e:	e7f4      	b.n	2086a <cloud_cmd_handler+0xa2>
	} else if ((cmd->channel == CLOUD_CHANNEL_RGB_LED) &&
   20880:	492e      	ldr	r1, [pc, #184]	; (2093c <cloud_cmd_handler+0x174>)
   20882:	428b      	cmp	r3, r1
   20884:	d10d      	bne.n	208a2 <cloud_cmd_handler+0xda>
		ui_led_set_color(((u32_t)cmd->data.sv.value >> 16) & 0xFF,
   20886:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   2088a:	f7fc fa57 	bl	1cd3c <__aeabi_d2uiz>
   2088e:	b2c2      	uxtb	r2, r0
   20890:	f3c0 2107 	ubfx	r1, r0, #8, #8
   20894:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
   20898:	b003      	add	sp, #12
   2089a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		ui_led_set_color(((u32_t)cmd->data.sv.value >> 16) & 0xFF,
   2089e:	f01d b801 	b.w	3d8a4 <ui_led_set_color>
	} else if ((cmd->channel == CLOUD_CHANNEL_DEVICE_INFO) &&
   208a2:	f640 5104 	movw	r1, #3332	; 0xd04
   208a6:	428b      	cmp	r3, r1
   208a8:	d101      	bne.n	208ae <cloud_cmd_handler+0xe6>
		k_work_submit_to_queue(&application_work_q,
   208aa:	4825      	ldr	r0, [pc, #148]	; (20940 <cloud_cmd_handler+0x178>)
   208ac:	e7de      	b.n	2086c <cloud_cmd_handler+0xa4>
	} else if ((cmd->channel == CLOUD_CHANNEL_LTE_LINK_RSRP) &&
   208ae:	f640 4104 	movw	r1, #3076	; 0xc04
   208b2:	428b      	cmp	r3, r1
   208b4:	d107      	bne.n	208c6 <cloud_cmd_handler+0xfe>
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   208b6:	2200      	movs	r2, #0
   208b8:	4922      	ldr	r1, [pc, #136]	; (20944 <cloud_cmd_handler+0x17c>)
   208ba:	4823      	ldr	r0, [pc, #140]	; (20948 <cloud_cmd_handler+0x180>)
}
   208bc:	b003      	add	sp, #12
   208be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   208c2:	f019 bf77 	b.w	3a7b4 <k_delayed_work_submit_to_queue>
	} else if ((cmd->group == CLOUD_CMD_GROUP_CFG_SET) &&
   208c6:	4b21      	ldr	r3, [pc, #132]	; (2094c <cloud_cmd_handler+0x184>)
   208c8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
   208cc:	429a      	cmp	r2, r3
   208ce:	d11f      	bne.n	20910 <cloud_cmd_handler+0x148>
		if (cmd->channel == CLOUD_CHANNEL_LIGHT_SENSOR) {
   208d0:	7842      	ldrb	r2, [r0, #1]
   208d2:	2a0e      	cmp	r2, #14
   208d4:	d01c      	beq.n	20910 <cloud_cmd_handler+0x148>
		} else if (cmd->channel == CLOUD_CHANNEL_ENVIRONMENT) {
   208d6:	2a07      	cmp	r2, #7
   208d8:	d108      	bne.n	208ec <cloud_cmd_handler+0x124>
			env_sensors_set_send_interval(
   208da:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   208de:	f7fc fa2d 	bl	1cd3c <__aeabi_d2uiz>
}
   208e2:	b003      	add	sp, #12
   208e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			env_sensors_set_send_interval(
   208e8:	f002 ba12 	b.w	22d10 <env_sensors_set_send_interval>
		} else if (cmd->channel == CLOUD_CHANNEL_GPS) {
   208ec:	b182      	cbz	r2, 20910 <cloud_cmd_handler+0x148>
			LOG_ERR("Interval command not valid for channel %d",
   208ee:	2301      	movs	r3, #1
   208f0:	f04f 0000 	mov.w	r0, #0
   208f4:	490a      	ldr	r1, [pc, #40]	; (20920 <cloud_cmd_handler+0x158>)
   208f6:	f363 0007 	bfi	r0, r3, #0, #8
   208fa:	4b0a      	ldr	r3, [pc, #40]	; (20924 <cloud_cmd_handler+0x15c>)
   208fc:	1a5b      	subs	r3, r3, r1
   208fe:	08db      	lsrs	r3, r3, #3
   20900:	4913      	ldr	r1, [pc, #76]	; (20950 <cloud_cmd_handler+0x188>)
   20902:	f363 108f 	bfi	r0, r3, #6, #10
}
   20906:	b003      	add	sp, #12
   20908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_ERR("Interval command not valid for channel %d",
   2090c:	f01d bb29 	b.w	3df62 <log_string_sync>
}
   20910:	b003      	add	sp, #12
   20912:	bd30      	pop	{r4, r5, pc}
   20914:	00010008 	.word	0x00010008
   20918:	0007140a 	.word	0x0007140a
   2091c:	20032428 	.word	0x20032428
   20920:	00041c2c 	.word	0x00041c2c
   20924:	00041c2c 	.word	0x00041c2c
   20928:	00042c59 	.word	0x00042c59
   2092c:	00042c2a 	.word	0x00042c2a
   20930:	00042c7b 	.word	0x00042c7b
   20934:	200293f7 	.word	0x200293f7
   20938:	2002377c 	.word	0x2002377c
   2093c:	00050508 	.word	0x00050508
   20940:	2002370c 	.word	0x2002370c
   20944:	20023740 	.word	0x20023740
   20948:	20023600 	.word	0x20023600
   2094c:	00040008 	.word	0x00040008
   20950:	00042ca9 	.word	0x00042ca9

00020954 <gps_handler>:
{
   20954:	b570      	push	{r4, r5, r6, lr}
   20956:	460d      	mov	r5, r1
	return z_impl_k_uptime_get();
   20958:	f01f fdda 	bl	40510 <z_impl_k_uptime_get>
	switch (evt->type) {
   2095c:	782b      	ldrb	r3, [r5, #0]
   2095e:	2b0a      	cmp	r3, #10
   20960:	f200 80d9 	bhi.w	20b16 <gps_handler+0x1c2>
   20964:	e8df f003 	tbb	[pc, r3]
   20968:	d72c1c06 	.word	0xd72c1c06
   2096c:	9d5ed74e 	.word	0x9d5ed74e
   20970:	b7aa      	.short	0xb7aa
   20972:	ca          	.byte	0xca
   20973:	00          	.byte	0x00
		LOG_INF("GPS_EVT_SEARCH_STARTED");
   20974:	2303      	movs	r3, #3
   20976:	f04f 0000 	mov.w	r0, #0
   2097a:	4a67      	ldr	r2, [pc, #412]	; (20b18 <gps_handler+0x1c4>)
   2097c:	f363 0007 	bfi	r0, r3, #0, #8
   20980:	4b66      	ldr	r3, [pc, #408]	; (20b1c <gps_handler+0x1c8>)
   20982:	4967      	ldr	r1, [pc, #412]	; (20b20 <gps_handler+0x1cc>)
   20984:	1a9b      	subs	r3, r3, r2
   20986:	08db      	lsrs	r3, r3, #3
   20988:	f363 108f 	bfi	r0, r3, #6, #10
   2098c:	f01d fae9 	bl	3df62 <log_string_sync>
		gps_control_set_active(true);
   20990:	2001      	movs	r0, #1
		gps_control_set_active(false);
   20992:	f001 fe9b 	bl	226cc <gps_control_set_active>
}
   20996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ui_led_set_pattern(UI_CLOUD_CONNECTED);
   2099a:	2008      	movs	r0, #8
   2099c:	f001 b90a 	b.w	21bb4 <ui_led_set_pattern>
		LOG_INF("GPS_EVT_SEARCH_STOPPED");
   209a0:	2303      	movs	r3, #3
   209a2:	f04f 0000 	mov.w	r0, #0
   209a6:	4a5c      	ldr	r2, [pc, #368]	; (20b18 <gps_handler+0x1c4>)
   209a8:	f363 0007 	bfi	r0, r3, #0, #8
   209ac:	4b5b      	ldr	r3, [pc, #364]	; (20b1c <gps_handler+0x1c8>)
   209ae:	495d      	ldr	r1, [pc, #372]	; (20b24 <gps_handler+0x1d0>)
   209b0:	1a9b      	subs	r3, r3, r2
   209b2:	08db      	lsrs	r3, r3, #3
   209b4:	f363 108f 	bfi	r0, r3, #6, #10
   209b8:	f01d fad3 	bl	3df62 <log_string_sync>
		gps_control_set_active(false);
   209bc:	2000      	movs	r0, #0
   209be:	e7e8      	b.n	20992 <gps_handler+0x3e>
		LOG_INF("GPS_EVT_SEARCH_TIMEOUT");
   209c0:	2303      	movs	r3, #3
   209c2:	f04f 0000 	mov.w	r0, #0
   209c6:	4c55      	ldr	r4, [pc, #340]	; (20b1c <gps_handler+0x1c8>)
   209c8:	f363 0007 	bfi	r0, r3, #0, #8
   209cc:	4b52      	ldr	r3, [pc, #328]	; (20b18 <gps_handler+0x1c4>)
   209ce:	4956      	ldr	r1, [pc, #344]	; (20b28 <gps_handler+0x1d4>)
   209d0:	1ae4      	subs	r4, r4, r3
   209d2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   209d6:	f364 108f 	bfi	r0, r4, #6, #10
   209da:	f01d fac2 	bl	3df62 <log_string_sync>
		gps_control_set_active(false);
   209de:	2000      	movs	r0, #0
   209e0:	f001 fe74 	bl	226cc <gps_control_set_active>
		LOG_INF("GPS will be attempted again in %d seconds",
   209e4:	f04f 0500 	mov.w	r5, #0
   209e8:	2303      	movs	r3, #3
   209ea:	f363 0507 	bfi	r5, r3, #0, #8
   209ee:	f001 ff8b 	bl	22908 <gps_control_get_gps_reporting_interval>
   209f2:	f364 158f 	bfi	r5, r4, #6, #10
   209f6:	4602      	mov	r2, r0
   209f8:	494c      	ldr	r1, [pc, #304]	; (20b2c <gps_handler+0x1d8>)
   209fa:	4628      	mov	r0, r5
}
   209fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_INF("GPS will be attempted again in %d seconds",
   20a00:	f01d baaf 	b.w	3df62 <log_string_sync>
		LOG_INF("GPS_EVT_PVT_FIX");
   20a04:	2303      	movs	r3, #3
   20a06:	f04f 0000 	mov.w	r0, #0
   20a0a:	4a43      	ldr	r2, [pc, #268]	; (20b18 <gps_handler+0x1c4>)
   20a0c:	f363 0007 	bfi	r0, r3, #0, #8
   20a10:	4b42      	ldr	r3, [pc, #264]	; (20b1c <gps_handler+0x1c8>)
   20a12:	4947      	ldr	r1, [pc, #284]	; (20b30 <gps_handler+0x1dc>)
   20a14:	1a9b      	subs	r3, r3, r2
   20a16:	08db      	lsrs	r3, r3, #3
   20a18:	f363 108f 	bfi	r0, r3, #6, #10
}
   20a1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_INF("GPS_EVT_ERROR\n");
   20a20:	f01d ba9f 	b.w	3df62 <log_string_sync>
		LOG_INF("Position fix with NMEA data");
   20a24:	2303      	movs	r3, #3
   20a26:	f04f 0000 	mov.w	r0, #0
   20a2a:	4c3c      	ldr	r4, [pc, #240]	; (20b1c <gps_handler+0x1c8>)
   20a2c:	f363 0007 	bfi	r0, r3, #0, #8
   20a30:	4b39      	ldr	r3, [pc, #228]	; (20b18 <gps_handler+0x1c4>)
		memcpy(gps_data.buf, evt->nmea.buf, evt->nmea.len);
   20a32:	4e40      	ldr	r6, [pc, #256]	; (20b34 <gps_handler+0x1e0>)
		LOG_INF("Position fix with NMEA data");
   20a34:	1ae4      	subs	r4, r4, r3
   20a36:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   20a3a:	f364 108f 	bfi	r0, r4, #6, #10
   20a3e:	493e      	ldr	r1, [pc, #248]	; (20b38 <gps_handler+0x1e4>)
   20a40:	f01d fa8f 	bl	3df62 <log_string_sync>
		memcpy(gps_data.buf, evt->nmea.buf, evt->nmea.len);
   20a44:	f105 0108 	add.w	r1, r5, #8
   20a48:	f895 205b 	ldrb.w	r2, [r5, #91]	; 0x5b
   20a4c:	2354      	movs	r3, #84	; 0x54
   20a4e:	4630      	mov	r0, r6
   20a50:	f01f fdf1 	bl	40636 <__memcpy_chk>
		gps_cloud_data.data.buf = gps_data.buf;
   20a54:	4b39      	ldr	r3, [pc, #228]	; (20b3c <gps_handler+0x1e8>)
		gps_data.len = evt->nmea.len;
   20a56:	f895 205b 	ldrb.w	r2, [r5, #91]	; 0x5b
		ui_led_set_pattern(UI_LED_GPS_FIX);
   20a5a:	2008      	movs	r0, #8
		gps_cloud_data.data.len = gps_data.len;
   20a5c:	e9c3 6201 	strd	r6, r2, [r3, #4]
		gps_data.len = evt->nmea.len;
   20a60:	f886 2053 	strb.w	r2, [r6, #83]	; 0x53
		gps_cloud_data.tag += 1;
   20a64:	68da      	ldr	r2, [r3, #12]
		LOG_INF("GPS will be started in %d seconds",
   20a66:	f04f 0500 	mov.w	r5, #0
		if (gps_cloud_data.tag == 0) {
   20a6a:	3201      	adds	r2, #1
			gps_cloud_data.tag = 0x1;
   20a6c:	bf08      	it	eq
   20a6e:	2201      	moveq	r2, #1
   20a70:	60da      	str	r2, [r3, #12]
		ui_led_set_pattern(UI_LED_GPS_FIX);
   20a72:	f001 f89f 	bl	21bb4 <ui_led_set_pattern>
		gps_control_set_active(false);
   20a76:	2000      	movs	r0, #0
   20a78:	f001 fe28 	bl	226cc <gps_control_set_active>
		LOG_INF("GPS will be started in %d seconds",
   20a7c:	2303      	movs	r3, #3
   20a7e:	f363 0507 	bfi	r5, r3, #0, #8
   20a82:	f001 ff41 	bl	22908 <gps_control_get_gps_reporting_interval>
   20a86:	f364 158f 	bfi	r5, r4, #6, #10
   20a8a:	4602      	mov	r2, r0
   20a8c:	492c      	ldr	r1, [pc, #176]	; (20b40 <gps_handler+0x1ec>)
   20a8e:	4628      	mov	r0, r5
   20a90:	f01d fa67 	bl	3df62 <log_string_sync>
		k_work_submit_to_queue(&application_work_q,
   20a94:	482b      	ldr	r0, [pc, #172]	; (20b44 <gps_handler+0x1f0>)
   20a96:	f7ff fe2d 	bl	206f4 <k_work_submit_to_queue.constprop.15>
}
   20a9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		env_sensors_poll();
   20a9e:	f001 bfbf 	b.w	22a20 <env_sensors_poll>
		LOG_INF("GPS_EVT_OPERATION_BLOCKED");
   20aa2:	2303      	movs	r3, #3
   20aa4:	f04f 0000 	mov.w	r0, #0
   20aa8:	4a1b      	ldr	r2, [pc, #108]	; (20b18 <gps_handler+0x1c4>)
   20aaa:	f363 0007 	bfi	r0, r3, #0, #8
   20aae:	4b1b      	ldr	r3, [pc, #108]	; (20b1c <gps_handler+0x1c8>)
   20ab0:	4925      	ldr	r1, [pc, #148]	; (20b48 <gps_handler+0x1f4>)
   20ab2:	1a9b      	subs	r3, r3, r2
   20ab4:	08db      	lsrs	r3, r3, #3
   20ab6:	f363 108f 	bfi	r0, r3, #6, #10
   20aba:	e7af      	b.n	20a1c <gps_handler+0xc8>
		LOG_INF("GPS_EVT_OPERATION_UNBLOCKED");
   20abc:	2303      	movs	r3, #3
   20abe:	f04f 0000 	mov.w	r0, #0
   20ac2:	4a15      	ldr	r2, [pc, #84]	; (20b18 <gps_handler+0x1c4>)
   20ac4:	f363 0007 	bfi	r0, r3, #0, #8
   20ac8:	4b14      	ldr	r3, [pc, #80]	; (20b1c <gps_handler+0x1c8>)
   20aca:	4920      	ldr	r1, [pc, #128]	; (20b4c <gps_handler+0x1f8>)
   20acc:	1a9b      	subs	r3, r3, r2
   20ace:	08db      	lsrs	r3, r3, #3
   20ad0:	f363 108f 	bfi	r0, r3, #6, #10
   20ad4:	e7a2      	b.n	20a1c <gps_handler+0xc8>
		LOG_INF("GPS_EVT_AGPS_DATA_NEEDED");
   20ad6:	2303      	movs	r3, #3
   20ad8:	f04f 0000 	mov.w	r0, #0
   20adc:	4a0e      	ldr	r2, [pc, #56]	; (20b18 <gps_handler+0x1c4>)
   20ade:	f363 0007 	bfi	r0, r3, #0, #8
   20ae2:	4b0e      	ldr	r3, [pc, #56]	; (20b1c <gps_handler+0x1c8>)
   20ae4:	491a      	ldr	r1, [pc, #104]	; (20b50 <gps_handler+0x1fc>)
   20ae6:	1a9b      	subs	r3, r3, r2
   20ae8:	08db      	lsrs	r3, r3, #3
   20aea:	f363 108f 	bfi	r0, r3, #6, #10
   20aee:	f01d fa38 	bl	3df62 <log_string_sync>
}
   20af2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&application_work_q,
   20af6:	4817      	ldr	r0, [pc, #92]	; (20b54 <gps_handler+0x200>)
   20af8:	f7ff bdfc 	b.w	206f4 <k_work_submit_to_queue.constprop.15>
		LOG_INF("GPS_EVT_ERROR\n");
   20afc:	2303      	movs	r3, #3
   20afe:	f04f 0000 	mov.w	r0, #0
   20b02:	4a05      	ldr	r2, [pc, #20]	; (20b18 <gps_handler+0x1c4>)
   20b04:	f363 0007 	bfi	r0, r3, #0, #8
   20b08:	4b04      	ldr	r3, [pc, #16]	; (20b1c <gps_handler+0x1c8>)
   20b0a:	4913      	ldr	r1, [pc, #76]	; (20b58 <gps_handler+0x204>)
   20b0c:	1a9b      	subs	r3, r3, r2
   20b0e:	08db      	lsrs	r3, r3, #3
   20b10:	f363 108f 	bfi	r0, r3, #6, #10
   20b14:	e782      	b.n	20a1c <gps_handler+0xc8>
}
   20b16:	bd70      	pop	{r4, r5, r6, pc}
   20b18:	00041c2c 	.word	0x00041c2c
   20b1c:	00041c2c 	.word	0x00041c2c
   20b20:	0004304e 	.word	0x0004304e
   20b24:	00043065 	.word	0x00043065
   20b28:	0004307c 	.word	0x0004307c
   20b2c:	00043093 	.word	0x00043093
   20b30:	000430bd 	.word	0x000430bd
   20b34:	200293a2 	.word	0x200293a2
   20b38:	000430cd 	.word	0x000430cd
   20b3c:	20031d00 	.word	0x20031d00
   20b40:	000430e9 	.word	0x000430e9
   20b44:	20023770 	.word	0x20023770
   20b48:	0004310b 	.word	0x0004310b
   20b4c:	00043125 	.word	0x00043125
   20b50:	00043141 	.word	0x00043141
   20b54:	20023760 	.word	0x20023760
   20b58:	0004315a 	.word	0x0004315a

00020b5c <error_handler>:
{
   20b5c:	b510      	push	{r4, lr}
	if (err_type == ERROR_CLOUD) {
   20b5e:	bb30      	cbnz	r0, 20bae <error_handler+0x52>
		LOG_ERR("LTE link disconnect");
   20b60:	2301      	movs	r3, #1
   20b62:	4c16      	ldr	r4, [pc, #88]	; (20bbc <error_handler+0x60>)
   20b64:	f363 0007 	bfi	r0, r3, #0, #8
   20b68:	4b15      	ldr	r3, [pc, #84]	; (20bc0 <error_handler+0x64>)
   20b6a:	4916      	ldr	r1, [pc, #88]	; (20bc4 <error_handler+0x68>)
   20b6c:	1ae4      	subs	r4, r4, r3
   20b6e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   20b72:	f364 108f 	bfi	r0, r4, #6, #10
   20b76:	f01d f9f4 	bl	3df62 <log_string_sync>
		int err = lte_lc_power_off();
   20b7a:	f008 f979 	bl	28e70 <lte_lc_power_off>
		if (err) {
   20b7e:	4602      	mov	r2, r0
   20b80:	b148      	cbz	r0, 20b96 <error_handler+0x3a>
			LOG_ERR("lte_lc_power_off failed: %d", err);
   20b82:	2101      	movs	r1, #1
   20b84:	f04f 0000 	mov.w	r0, #0
   20b88:	f361 0007 	bfi	r0, r1, #0, #8
   20b8c:	f364 108f 	bfi	r0, r4, #6, #10
   20b90:	490d      	ldr	r1, [pc, #52]	; (20bc8 <error_handler+0x6c>)
   20b92:	f01d f9e6 	bl	3df62 <log_string_sync>
		LOG_ERR("Shutdown modem");
   20b96:	2301      	movs	r3, #1
   20b98:	f04f 0000 	mov.w	r0, #0
   20b9c:	f363 0007 	bfi	r0, r3, #0, #8
   20ba0:	f364 108f 	bfi	r0, r4, #6, #10
   20ba4:	4909      	ldr	r1, [pc, #36]	; (20bcc <error_handler+0x70>)
   20ba6:	f01d f9dc 	bl	3df62 <log_string_sync>
		bsdlib_shutdown();
   20baa:	f01e fbeb 	bl	3f384 <bsdlib_shutdown>
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   20bae:	f002 faf5 	bl	2319c <z_impl_log_panic>
}
   20bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sys_reboot(0);
   20bb6:	2000      	movs	r0, #0
   20bb8:	f002 bf12 	b.w	239e0 <sys_reboot>
   20bbc:	00041c2c 	.word	0x00041c2c
   20bc0:	00041c2c 	.word	0x00041c2c
   20bc4:	0004300f 	.word	0x0004300f
   20bc8:	00043023 	.word	0x00043023
   20bcc:	0004303f 	.word	0x0004303f

00020bd0 <k_sys_fatal_error_handler>:
{
   20bd0:	b508      	push	{r3, lr}
   20bd2:	f002 fae3 	bl	2319c <z_impl_log_panic>
	LOG_ERR("Running main.c error handler");
   20bd6:	2301      	movs	r3, #1
   20bd8:	f04f 0000 	mov.w	r0, #0
   20bdc:	4a07      	ldr	r2, [pc, #28]	; (20bfc <k_sys_fatal_error_handler+0x2c>)
   20bde:	f363 0007 	bfi	r0, r3, #0, #8
   20be2:	4b07      	ldr	r3, [pc, #28]	; (20c00 <k_sys_fatal_error_handler+0x30>)
   20be4:	4907      	ldr	r1, [pc, #28]	; (20c04 <k_sys_fatal_error_handler+0x34>)
   20be6:	1a9b      	subs	r3, r3, r2
   20be8:	08db      	lsrs	r3, r3, #3
   20bea:	f363 108f 	bfi	r0, r3, #6, #10
   20bee:	f01d f9b8 	bl	3df62 <log_string_sync>
   20bf2:	f002 fad3 	bl	2319c <z_impl_log_panic>
	sys_reboot(0);
   20bf6:	2000      	movs	r0, #0
   20bf8:	f002 fef2 	bl	239e0 <sys_reboot>
	CODE_UNREACHABLE;
   20bfc:	00041c2c 	.word	0x00041c2c
   20c00:	00041c2c 	.word	0x00041c2c
   20c04:	000431e9 	.word	0x000431e9

00020c08 <env_data_send>:
{
   20c08:	b510      	push	{r4, lr}
   20c0a:	b08a      	sub	sp, #40	; 0x28
	struct cloud_msg msg = {
   20c0c:	2218      	movs	r2, #24
   20c0e:	2100      	movs	r1, #0
   20c10:	a804      	add	r0, sp, #16
   20c12:	f01f fd23 	bl	4065c <memset>
	if (!atomic_get(&send_data_enable)) {
   20c16:	484b      	ldr	r0, [pc, #300]	; (20d44 <env_data_send+0x13c>)
   20c18:	f01c fe2d 	bl	3d876 <atomic_get>
   20c1c:	b128      	cbz	r0, 20c2a <env_data_send+0x22>
	if (gps_control_is_active()) {
   20c1e:	f001 fd4b 	bl	226b8 <gps_control_is_active>
   20c22:	b120      	cbz	r0, 20c2e <env_data_send+0x26>
		env_sensors_set_backoff_enable(true);
   20c24:	2001      	movs	r0, #1
   20c26:	f002 f8a1 	bl	22d6c <env_sensors_set_backoff_enable>
}
   20c2a:	b00a      	add	sp, #40	; 0x28
   20c2c:	bd10      	pop	{r4, pc}
	env_sensors_set_backoff_enable(false);
   20c2e:	f002 f89d 	bl	22d6c <env_sensors_set_backoff_enable>
	if (env_sensors_get_temperature(&env_data) == 0) {
   20c32:	4668      	mov	r0, sp
   20c34:	f001 ff5e 	bl	22af4 <env_sensors_get_temperature>
   20c38:	b338      	cbz	r0, 20c8a <env_data_send+0x82>
	if (env_sensors_get_humidity(&env_data) == 0) {
   20c3a:	4668      	mov	r0, sp
   20c3c:	f001 ffb4 	bl	22ba8 <env_sensors_get_humidity>
   20c40:	2800      	cmp	r0, #0
   20c42:	d04d      	beq.n	20ce0 <env_data_send+0xd8>
	if (env_sensors_get_pressure(&env_data) == 0) {
   20c44:	4668      	mov	r0, sp
   20c46:	f002 f809 	bl	22c5c <env_sensors_get_pressure>
   20c4a:	2800      	cmp	r0, #0
   20c4c:	d061      	beq.n	20d12 <env_data_send+0x10a>
	if (env_sensors_get_air_quality(&env_data) == 0) {
   20c4e:	4668      	mov	r0, sp
   20c50:	f01c fe6e 	bl	3d930 <env_sensors_get_air_quality>
   20c54:	2800      	cmp	r0, #0
   20c56:	d1e8      	bne.n	20c2a <env_data_send+0x22>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_AIR_QUAL,
   20c58:	ed9d 0b02 	vldr	d0, [sp, #8]
   20c5c:	200b      	movs	r0, #11
   20c5e:	f001 fc8d 	bl	2257c <cloud_is_send_allowed>
   20c62:	2800      	cmp	r0, #0
   20c64:	d0e1      	beq.n	20c2a <env_data_send+0x22>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   20c66:	a904      	add	r1, sp, #16
   20c68:	4668      	mov	r0, sp
   20c6a:	f001 f989 	bl	21f80 <cloud_encode_env_sensors_data>
					  env_data.value) &&
   20c6e:	2800      	cmp	r0, #0
   20c70:	d1db      	bne.n	20c2a <env_data_send+0x22>
			err = cloud_send(cloud_backend, &msg);
   20c72:	4b35      	ldr	r3, [pc, #212]	; (20d48 <env_data_send+0x140>)
   20c74:	a904      	add	r1, sp, #16
   20c76:	6818      	ldr	r0, [r3, #0]
   20c78:	f01c fdec 	bl	3d854 <cloud_send>
   20c7c:	4604      	mov	r4, r0
   20c7e:	9804      	ldr	r0, [sp, #16]
   20c80:	f01f fb29 	bl	402d6 <k_free>
			if (err) {
   20c84:	2c00      	cmp	r4, #0
   20c86:	d0d0      	beq.n	20c2a <env_data_send+0x22>
   20c88:	e017      	b.n	20cba <env_data_send+0xb2>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_TEMP, env_data.value) &&
   20c8a:	ed9d 0b02 	vldr	d0, [sp, #8]
   20c8e:	2008      	movs	r0, #8
   20c90:	f001 fc74 	bl	2257c <cloud_is_send_allowed>
   20c94:	2800      	cmp	r0, #0
   20c96:	d0d0      	beq.n	20c3a <env_data_send+0x32>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   20c98:	a904      	add	r1, sp, #16
   20c9a:	4668      	mov	r0, sp
   20c9c:	f001 f970 	bl	21f80 <cloud_encode_env_sensors_data>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_TEMP, env_data.value) &&
   20ca0:	2800      	cmp	r0, #0
   20ca2:	d1ca      	bne.n	20c3a <env_data_send+0x32>
			err = cloud_send(cloud_backend, &msg);
   20ca4:	4b28      	ldr	r3, [pc, #160]	; (20d48 <env_data_send+0x140>)
   20ca6:	a904      	add	r1, sp, #16
   20ca8:	6818      	ldr	r0, [r3, #0]
   20caa:	f01c fdd3 	bl	3d854 <cloud_send>
   20cae:	4604      	mov	r4, r0
   20cb0:	9804      	ldr	r0, [sp, #16]
   20cb2:	f01f fb10 	bl	402d6 <k_free>
			if (err) {
   20cb6:	2c00      	cmp	r4, #0
   20cb8:	d0bf      	beq.n	20c3a <env_data_send+0x32>
	LOG_ERR("sensor_data_send failed: %d", err);
   20cba:	2301      	movs	r3, #1
   20cbc:	f04f 0000 	mov.w	r0, #0
   20cc0:	4a22      	ldr	r2, [pc, #136]	; (20d4c <env_data_send+0x144>)
   20cc2:	f363 0007 	bfi	r0, r3, #0, #8
   20cc6:	4b22      	ldr	r3, [pc, #136]	; (20d50 <env_data_send+0x148>)
   20cc8:	4922      	ldr	r1, [pc, #136]	; (20d54 <env_data_send+0x14c>)
   20cca:	1a9b      	subs	r3, r3, r2
   20ccc:	08db      	lsrs	r3, r3, #3
   20cce:	f363 108f 	bfi	r0, r3, #6, #10
   20cd2:	4622      	mov	r2, r4
   20cd4:	f01d f945 	bl	3df62 <log_string_sync>
	cloud_error_handler(err);
   20cd8:	4620      	mov	r0, r4
   20cda:	f01c fdd4 	bl	3d886 <cloud_error_handler>
   20cde:	e7a4      	b.n	20c2a <env_data_send+0x22>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_HUMID,
   20ce0:	ed9d 0b02 	vldr	d0, [sp, #8]
   20ce4:	2009      	movs	r0, #9
   20ce6:	f001 fc49 	bl	2257c <cloud_is_send_allowed>
   20cea:	2800      	cmp	r0, #0
   20cec:	d0aa      	beq.n	20c44 <env_data_send+0x3c>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   20cee:	a904      	add	r1, sp, #16
   20cf0:	4668      	mov	r0, sp
   20cf2:	f001 f945 	bl	21f80 <cloud_encode_env_sensors_data>
					  env_data.value) &&
   20cf6:	2800      	cmp	r0, #0
   20cf8:	d1a4      	bne.n	20c44 <env_data_send+0x3c>
			err = cloud_send(cloud_backend, &msg);
   20cfa:	4b13      	ldr	r3, [pc, #76]	; (20d48 <env_data_send+0x140>)
   20cfc:	a904      	add	r1, sp, #16
   20cfe:	6818      	ldr	r0, [r3, #0]
   20d00:	f01c fda8 	bl	3d854 <cloud_send>
   20d04:	4604      	mov	r4, r0
   20d06:	9804      	ldr	r0, [sp, #16]
   20d08:	f01f fae5 	bl	402d6 <k_free>
			if (err) {
   20d0c:	2c00      	cmp	r4, #0
   20d0e:	d099      	beq.n	20c44 <env_data_send+0x3c>
   20d10:	e7d3      	b.n	20cba <env_data_send+0xb2>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_AIR_PRESS,
   20d12:	ed9d 0b02 	vldr	d0, [sp, #8]
   20d16:	200a      	movs	r0, #10
   20d18:	f001 fc30 	bl	2257c <cloud_is_send_allowed>
   20d1c:	2800      	cmp	r0, #0
   20d1e:	d096      	beq.n	20c4e <env_data_send+0x46>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   20d20:	a904      	add	r1, sp, #16
   20d22:	4668      	mov	r0, sp
   20d24:	f001 f92c 	bl	21f80 <cloud_encode_env_sensors_data>
					  env_data.value) &&
   20d28:	2800      	cmp	r0, #0
   20d2a:	d190      	bne.n	20c4e <env_data_send+0x46>
			err = cloud_send(cloud_backend, &msg);
   20d2c:	4b06      	ldr	r3, [pc, #24]	; (20d48 <env_data_send+0x140>)
   20d2e:	a904      	add	r1, sp, #16
   20d30:	6818      	ldr	r0, [r3, #0]
   20d32:	f01c fd8f 	bl	3d854 <cloud_send>
   20d36:	4604      	mov	r4, r0
   20d38:	9804      	ldr	r0, [sp, #16]
   20d3a:	f01f facc 	bl	402d6 <k_free>
			if (err) {
   20d3e:	2c00      	cmp	r4, #0
   20d40:	d085      	beq.n	20c4e <env_data_send+0x46>
   20d42:	e7ba      	b.n	20cba <env_data_send+0xb2>
   20d44:	2002376c 	.word	0x2002376c
   20d48:	200236c8 	.word	0x200236c8
   20d4c:	00041c2c 	.word	0x00041c2c
   20d50:	00041c2c 	.word	0x00041c2c
   20d54:	00042ff3 	.word	0x00042ff3

00020d58 <motion_handler>:
{
   20d58:	b084      	sub	sp, #16
   20d5a:	b530      	push	{r4, r5, lr}
   20d5c:	b087      	sub	sp, #28
   20d5e:	ac0a      	add	r4, sp, #40	; 0x28
   20d60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (!flip_mode_enabled || !atomic_get(&send_data_enable) ||
   20d64:	481f      	ldr	r0, [pc, #124]	; (20de4 <motion_handler+0x8c>)
   20d66:	f01c fd86 	bl	3d876 <atomic_get>
   20d6a:	b390      	cbz	r0, 20dd2 <motion_handler+0x7a>
	    gps_control_is_active()) {
   20d6c:	f001 fca4 	bl	226b8 <gps_control_is_active>
	if (!flip_mode_enabled || !atomic_get(&send_data_enable) ||
   20d70:	4601      	mov	r1, r0
   20d72:	bb70      	cbnz	r0, 20dd2 <motion_handler+0x7a>
	if (motion_data.orientation != last_orientation_state) {
   20d74:	4c1c      	ldr	r4, [pc, #112]	; (20de8 <motion_handler+0x90>)
   20d76:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
   20d7a:	7822      	ldrb	r2, [r4, #0]
   20d7c:	4290      	cmp	r0, r2
   20d7e:	d028      	beq.n	20dd2 <motion_handler+0x7a>
		if (flip_mode_enabled && atomic_get(&send_data_enable)) {
   20d80:	4818      	ldr	r0, [pc, #96]	; (20de4 <motion_handler+0x8c>)
   20d82:	f01c fd78 	bl	3d876 <atomic_get>
   20d86:	b320      	cbz	r0, 20dd2 <motion_handler+0x7a>
			struct cloud_msg msg = {
   20d88:	2218      	movs	r2, #24
   20d8a:	4668      	mov	r0, sp
   20d8c:	f01f fc66 	bl	4065c <memset>
			if (cloud_encode_motion_data(&motion_data, &msg) == 0) {
   20d90:	4669      	mov	r1, sp
   20d92:	a80a      	add	r0, sp, #40	; 0x28
   20d94:	f001 f944 	bl	22020 <cloud_encode_motion_data>
   20d98:	bb00      	cbnz	r0, 20ddc <motion_handler+0x84>
				err = cloud_send(cloud_backend, &msg);
   20d9a:	4b14      	ldr	r3, [pc, #80]	; (20dec <motion_handler+0x94>)
   20d9c:	4669      	mov	r1, sp
   20d9e:	6818      	ldr	r0, [r3, #0]
   20da0:	f01c fd58 	bl	3d854 <cloud_send>
   20da4:	4605      	mov	r5, r0
   20da6:	9800      	ldr	r0, [sp, #0]
   20da8:	f01f fa95 	bl	402d6 <k_free>
				if (err) {
   20dac:	b1b5      	cbz	r5, 20ddc <motion_handler+0x84>
					LOG_ERR("Transmisison of "
   20dae:	2301      	movs	r3, #1
   20db0:	f04f 0000 	mov.w	r0, #0
   20db4:	4a0e      	ldr	r2, [pc, #56]	; (20df0 <motion_handler+0x98>)
   20db6:	f363 0007 	bfi	r0, r3, #0, #8
   20dba:	4b0e      	ldr	r3, [pc, #56]	; (20df4 <motion_handler+0x9c>)
   20dbc:	490e      	ldr	r1, [pc, #56]	; (20df8 <motion_handler+0xa0>)
   20dbe:	1a9b      	subs	r3, r3, r2
   20dc0:	08db      	lsrs	r3, r3, #3
   20dc2:	f363 108f 	bfi	r0, r3, #6, #10
   20dc6:	462a      	mov	r2, r5
   20dc8:	f01d f8cb 	bl	3df62 <log_string_sync>
					cloud_error_handler(err);
   20dcc:	4628      	mov	r0, r5
   20dce:	f01c fd5a 	bl	3d886 <cloud_error_handler>
}
   20dd2:	b007      	add	sp, #28
   20dd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   20dd8:	b004      	add	sp, #16
   20dda:	4770      	bx	lr
				last_orientation_state =
   20ddc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   20de0:	7023      	strb	r3, [r4, #0]
   20de2:	e7f6      	b.n	20dd2 <motion_handler+0x7a>
   20de4:	2002376c 	.word	0x2002376c
   20de8:	200293f6 	.word	0x200293f6
   20dec:	200236c8 	.word	0x200236c8
   20df0:	00041c2c 	.word	0x00041c2c
   20df4:	00041c2c 	.word	0x00041c2c
   20df8:	000434fd 	.word	0x000434fd

00020dfc <sensor_data_send>:
{
   20dfc:	b510      	push	{r4, lr}
   20dfe:	b086      	sub	sp, #24
   20e00:	4604      	mov	r4, r0
	struct cloud_msg msg = {
   20e02:	2218      	movs	r2, #24
   20e04:	2100      	movs	r1, #0
   20e06:	4668      	mov	r0, sp
   20e08:	f01f fc28 	bl	4065c <memset>
	if (!atomic_get(&send_data_enable) || gps_control_is_active()) {
   20e0c:	481e      	ldr	r0, [pc, #120]	; (20e88 <sensor_data_send+0x8c>)
   20e0e:	f01c fd32 	bl	3d876 <atomic_get>
   20e12:	b1b8      	cbz	r0, 20e44 <sensor_data_send+0x48>
   20e14:	f001 fc50 	bl	226b8 <gps_control_is_active>
   20e18:	b9a0      	cbnz	r0, 20e44 <sensor_data_send+0x48>
	err = cloud_encode_data(data, CLOUD_CMD_GROUP_DATA, &msg);
   20e1a:	466a      	mov	r2, sp
   20e1c:	2106      	movs	r1, #6
   20e1e:	4620      	mov	r0, r4
   20e20:	f001 f84a 	bl	21eb8 <cloud_encode_data>
	if (err) {
   20e24:	4602      	mov	r2, r0
   20e26:	b178      	cbz	r0, 20e48 <sensor_data_send+0x4c>
		LOG_ERR("Unable to encode cloud data: %d", err);
   20e28:	2301      	movs	r3, #1
   20e2a:	f04f 0000 	mov.w	r0, #0
   20e2e:	4917      	ldr	r1, [pc, #92]	; (20e8c <sensor_data_send+0x90>)
   20e30:	f363 0007 	bfi	r0, r3, #0, #8
   20e34:	4b16      	ldr	r3, [pc, #88]	; (20e90 <sensor_data_send+0x94>)
   20e36:	1a5b      	subs	r3, r3, r1
   20e38:	08db      	lsrs	r3, r3, #3
   20e3a:	f363 108f 	bfi	r0, r3, #6, #10
   20e3e:	4915      	ldr	r1, [pc, #84]	; (20e94 <sensor_data_send+0x98>)
   20e40:	f01d f88f 	bl	3df62 <log_string_sync>
}
   20e44:	b006      	add	sp, #24
   20e46:	bd10      	pop	{r4, pc}
		err = cloud_send(cloud_backend, &msg);
   20e48:	4b13      	ldr	r3, [pc, #76]	; (20e98 <sensor_data_send+0x9c>)
   20e4a:	4669      	mov	r1, sp
   20e4c:	6818      	ldr	r0, [r3, #0]
   20e4e:	f01c fd01 	bl	3d854 <cloud_send>
   20e52:	4604      	mov	r4, r0
   20e54:	9800      	ldr	r0, [sp, #0]
   20e56:	f01f fa3e 	bl	402d6 <k_free>
		if (err) {
   20e5a:	2c00      	cmp	r4, #0
   20e5c:	d0f2      	beq.n	20e44 <sensor_data_send+0x48>
			LOG_ERR("%s failed: %d", __func__, err);
   20e5e:	2301      	movs	r3, #1
   20e60:	f04f 0000 	mov.w	r0, #0
   20e64:	4a09      	ldr	r2, [pc, #36]	; (20e8c <sensor_data_send+0x90>)
   20e66:	f363 0007 	bfi	r0, r3, #0, #8
   20e6a:	4b09      	ldr	r3, [pc, #36]	; (20e90 <sensor_data_send+0x94>)
   20e6c:	490b      	ldr	r1, [pc, #44]	; (20e9c <sensor_data_send+0xa0>)
   20e6e:	1a9b      	subs	r3, r3, r2
   20e70:	08db      	lsrs	r3, r3, #3
   20e72:	f363 108f 	bfi	r0, r3, #6, #10
   20e76:	4a0a      	ldr	r2, [pc, #40]	; (20ea0 <sensor_data_send+0xa4>)
   20e78:	4623      	mov	r3, r4
   20e7a:	f01d f872 	bl	3df62 <log_string_sync>
			cloud_error_handler(err);
   20e7e:	4620      	mov	r0, r4
   20e80:	f01c fd01 	bl	3d886 <cloud_error_handler>
   20e84:	e7de      	b.n	20e44 <sensor_data_send+0x48>
   20e86:	bf00      	nop
   20e88:	2002376c 	.word	0x2002376c
   20e8c:	00041c2c 	.word	0x00041c2c
   20e90:	00041c2c 	.word	0x00041c2c
   20e94:	0004368f 	.word	0x0004368f
   20e98:	200236c8 	.word	0x200236c8
   20e9c:	000436af 	.word	0x000436af
   20ea0:	00042c48 	.word	0x00042c48

00020ea4 <modem_rsrp_data_send>:
{
   20ea4:	b530      	push	{r4, r5, lr}
   20ea6:	b0a1      	sub	sp, #132	; 0x84
	char buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   20ea8:	2280      	movs	r2, #128	; 0x80
   20eaa:	2100      	movs	r1, #0
   20eac:	4668      	mov	r0, sp
   20eae:	f01f fbd5 	bl	4065c <memset>
	if (!atomic_get(&send_data_enable)) {
   20eb2:	4813      	ldr	r0, [pc, #76]	; (20f00 <modem_rsrp_data_send+0x5c>)
   20eb4:	f01c fcdf 	bl	3d876 <atomic_get>
   20eb8:	b300      	cbz	r0, 20efc <modem_rsrp_data_send+0x58>
	rsrp_current = rsrp.value - rsrp.offset;
   20eba:	4b12      	ldr	r3, [pc, #72]	; (20f04 <modem_rsrp_data_send+0x60>)
	if (rsrp_current == rsrp_prev) {
   20ebc:	4d12      	ldr	r5, [pc, #72]	; (20f08 <modem_rsrp_data_send+0x64>)
	rsrp_current = rsrp.value - rsrp.offset;
   20ebe:	881c      	ldrh	r4, [r3, #0]
   20ec0:	885b      	ldrh	r3, [r3, #2]
	if (rsrp_current == rsrp_prev) {
   20ec2:	682a      	ldr	r2, [r5, #0]
	rsrp_current = rsrp.value - rsrp.offset;
   20ec4:	1ae4      	subs	r4, r4, r3
	if (rsrp_current == rsrp_prev) {
   20ec6:	42a2      	cmp	r2, r4
   20ec8:	d018      	beq.n	20efc <modem_rsrp_data_send+0x58>
	len = snprintf(buf, CONFIG_MODEM_INFO_BUFFER_SIZE,
   20eca:	2180      	movs	r1, #128	; 0x80
   20ecc:	4623      	mov	r3, r4
   20ece:	4a0f      	ldr	r2, [pc, #60]	; (20f0c <modem_rsrp_data_send+0x68>)
   20ed0:	4668      	mov	r0, sp
   20ed2:	f01b f981 	bl	3c1d8 <sniprintf>
	signal_strength_cloud_data.data.buf = buf;
   20ed6:	4b0e      	ldr	r3, [pc, #56]	; (20f10 <modem_rsrp_data_send+0x6c>)
	signal_strength_cloud_data.tag += 1;
   20ed8:	68da      	ldr	r2, [r3, #12]
	signal_strength_cloud_data.data.len = len;
   20eda:	6098      	str	r0, [r3, #8]
	if (signal_strength_cloud_data.tag == 0) {
   20edc:	3201      	adds	r2, #1
		signal_strength_cloud_data.tag = 0x1;
   20ede:	bf08      	it	eq
   20ee0:	2201      	moveq	r2, #1
	sensor_data_send(&signal_strength_cloud_data);
   20ee2:	480b      	ldr	r0, [pc, #44]	; (20f10 <modem_rsrp_data_send+0x6c>)
		signal_strength_cloud_data.tag = 0x1;
   20ee4:	60da      	str	r2, [r3, #12]
	signal_strength_cloud_data.data.buf = buf;
   20ee6:	f8c3 d004 	str.w	sp, [r3, #4]
	sensor_data_send(&signal_strength_cloud_data);
   20eea:	f7ff ff87 	bl	20dfc <sensor_data_send>
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   20eee:	f64e 2260 	movw	r2, #60000	; 0xea60
   20ef2:	4908      	ldr	r1, [pc, #32]	; (20f14 <modem_rsrp_data_send+0x70>)
   20ef4:	4808      	ldr	r0, [pc, #32]	; (20f18 <modem_rsrp_data_send+0x74>)
	rsrp_prev = rsrp_current;
   20ef6:	602c      	str	r4, [r5, #0]
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   20ef8:	f019 fc5c 	bl	3a7b4 <k_delayed_work_submit_to_queue>
}
   20efc:	b021      	add	sp, #132	; 0x84
   20efe:	bd30      	pop	{r4, r5, pc}
   20f00:	2002376c 	.word	0x2002376c
   20f04:	200322d0 	.word	0x200322d0
   20f08:	2002373c 	.word	0x2002373c
   20f0c:	00046b4a 	.word	0x00046b4a
   20f10:	20023788 	.word	0x20023788
   20f14:	20023740 	.word	0x20023740
   20f18:	20023600 	.word	0x20023600

00020f1c <send_gps_data_work_fn>:
	sensor_data_send(&gps_cloud_data);
   20f1c:	4801      	ldr	r0, [pc, #4]	; (20f24 <send_gps_data_work_fn+0x8>)
   20f1e:	f7ff bf6d 	b.w	20dfc <sensor_data_send>
   20f22:	bf00      	nop
   20f24:	20031d00 	.word	0x20031d00

00020f28 <device_status_send>:
{
   20f28:	b570      	push	{r4, r5, r6, lr}
	if (!atomic_get(&send_data_enable) || gps_control_is_active()) {
   20f2a:	4837      	ldr	r0, [pc, #220]	; (21008 <device_status_send+0xe0>)
{
   20f2c:	b092      	sub	sp, #72	; 0x48
	if (!atomic_get(&send_data_enable) || gps_control_is_active()) {
   20f2e:	f01c fca2 	bl	3d876 <atomic_get>
   20f32:	2800      	cmp	r0, #0
   20f34:	d046      	beq.n	20fc4 <device_status_send+0x9c>
   20f36:	f001 fbbf 	bl	226b8 <gps_control_is_active>
   20f3a:	4606      	mov	r6, r0
   20f3c:	2800      	cmp	r0, #0
   20f3e:	d141      	bne.n	20fc4 <device_status_send+0x9c>
	ret = modem_info_params_get(&modem_param);
   20f40:	4832      	ldr	r0, [pc, #200]	; (2100c <device_status_send+0xe4>)
   20f42:	f008 fbf7 	bl	29734 <modem_info_params_get>
	if (ret < 0) {
   20f46:	1e02      	subs	r2, r0, #0
   20f48:	da3e      	bge.n	20fc8 <device_status_send+0xa0>
		LOG_ERR("Unable to obtain modem parameters: %d", ret);
   20f4a:	2301      	movs	r3, #1
   20f4c:	f04f 0000 	mov.w	r0, #0
   20f50:	492f      	ldr	r1, [pc, #188]	; (21010 <device_status_send+0xe8>)
   20f52:	f363 0007 	bfi	r0, r3, #0, #8
   20f56:	4b2f      	ldr	r3, [pc, #188]	; (21014 <device_status_send+0xec>)
   20f58:	1a5b      	subs	r3, r3, r1
   20f5a:	08db      	lsrs	r3, r3, #3
   20f5c:	f363 108f 	bfi	r0, r3, #6, #10
   20f60:	492d      	ldr	r1, [pc, #180]	; (21018 <device_status_send+0xf0>)
   20f62:	f01c fffe 	bl	3df62 <log_string_sync>
	const char *const ui[] = {
   20f66:	4d2d      	ldr	r5, [pc, #180]	; (2101c <device_status_send+0xf4>)
   20f68:	ac06      	add	r4, sp, #24
   20f6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20f6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   20f6e:	e895 0003 	ldmia.w	r5, {r0, r1}
	const char *const fota[] = {
   20f72:	4b2b      	ldr	r3, [pc, #172]	; (21020 <device_status_send+0xf8>)
	const char *const ui[] = {
   20f74:	e884 0003 	stmia.w	r4, {r0, r1}
	const char *const fota[] = {
   20f78:	9304      	str	r3, [sp, #16]
	struct cloud_msg msg = {
   20f7a:	ac0c      	add	r4, sp, #48	; 0x30
	const char *const fota[] = {
   20f7c:	4b29      	ldr	r3, [pc, #164]	; (21024 <device_status_send+0xfc>)
	struct cloud_msg msg = {
   20f7e:	2218      	movs	r2, #24
   20f80:	2100      	movs	r1, #0
   20f82:	4620      	mov	r0, r4
	const char *const fota[] = {
   20f84:	9305      	str	r3, [sp, #20]
	struct cloud_msg msg = {
   20f86:	f01f fb69 	bl	4065c <memset>
   20f8a:	2301      	movs	r3, #1
   20f8c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
	ret = cloud_encode_device_status_data(modem_ptr,
   20f90:	e9cd 3401 	strd	r3, r4, [sp, #4]
   20f94:	2302      	movs	r3, #2
   20f96:	2206      	movs	r2, #6
   20f98:	9300      	str	r3, [sp, #0]
   20f9a:	a906      	add	r1, sp, #24
   20f9c:	ab04      	add	r3, sp, #16
   20f9e:	4630      	mov	r0, r6
   20fa0:	f001 f880 	bl	220a4 <cloud_encode_device_status_data>
	if (ret) {
   20fa4:	4602      	mov	r2, r0
   20fa6:	b188      	cbz	r0, 20fcc <device_status_send+0xa4>
		LOG_ERR("Unable to encode cloud data: %d", ret);
   20fa8:	2301      	movs	r3, #1
   20faa:	f04f 0000 	mov.w	r0, #0
   20fae:	4918      	ldr	r1, [pc, #96]	; (21010 <device_status_send+0xe8>)
   20fb0:	f363 0007 	bfi	r0, r3, #0, #8
   20fb4:	4b17      	ldr	r3, [pc, #92]	; (21014 <device_status_send+0xec>)
   20fb6:	1a5b      	subs	r3, r3, r1
   20fb8:	08db      	lsrs	r3, r3, #3
   20fba:	f363 108f 	bfi	r0, r3, #6, #10
   20fbe:	491a      	ldr	r1, [pc, #104]	; (21028 <device_status_send+0x100>)
   20fc0:	f01c ffcf 	bl	3df62 <log_string_sync>
}
   20fc4:	b012      	add	sp, #72	; 0x48
   20fc6:	bd70      	pop	{r4, r5, r6, pc}
		modem_ptr = &modem_param;
   20fc8:	4e10      	ldr	r6, [pc, #64]	; (2100c <device_status_send+0xe4>)
   20fca:	e7cc      	b.n	20f66 <device_status_send+0x3e>
		ret = cloud_send(cloud_backend, &msg);
   20fcc:	4b17      	ldr	r3, [pc, #92]	; (2102c <device_status_send+0x104>)
   20fce:	4621      	mov	r1, r4
   20fd0:	6818      	ldr	r0, [r3, #0]
   20fd2:	f01c fc3f 	bl	3d854 <cloud_send>
   20fd6:	4604      	mov	r4, r0
   20fd8:	980c      	ldr	r0, [sp, #48]	; 0x30
   20fda:	f01f f97c 	bl	402d6 <k_free>
		if (ret) {
   20fde:	2c00      	cmp	r4, #0
   20fe0:	d0f0      	beq.n	20fc4 <device_status_send+0x9c>
			LOG_ERR("sensor_data_send failed: %d", ret);
   20fe2:	2301      	movs	r3, #1
   20fe4:	f04f 0000 	mov.w	r0, #0
   20fe8:	4a09      	ldr	r2, [pc, #36]	; (21010 <device_status_send+0xe8>)
   20fea:	f363 0007 	bfi	r0, r3, #0, #8
   20fee:	4b09      	ldr	r3, [pc, #36]	; (21014 <device_status_send+0xec>)
   20ff0:	490f      	ldr	r1, [pc, #60]	; (21030 <device_status_send+0x108>)
   20ff2:	1a9b      	subs	r3, r3, r2
   20ff4:	08db      	lsrs	r3, r3, #3
   20ff6:	f363 108f 	bfi	r0, r3, #6, #10
   20ffa:	4622      	mov	r2, r4
   20ffc:	f01c ffb1 	bl	3df62 <log_string_sync>
			cloud_error_handler(ret);
   21000:	4620      	mov	r0, r4
   21002:	f01c fc40 	bl	3d886 <cloud_error_handler>
   21006:	e7dd      	b.n	20fc4 <device_status_send+0x9c>
   21008:	2002376c 	.word	0x2002376c
   2100c:	20020008 	.word	0x20020008
   21010:	00041c2c 	.word	0x00041c2c
   21014:	00041c2c 	.word	0x00041c2c
   21018:	00042fcd 	.word	0x00042fcd
   2101c:	00041d80 	.word	0x00041d80
   21020:	00043761 	.word	0x00043761
   21024:	00043765 	.word	0x00043765
   21028:	0004368f 	.word	0x0004368f
   2102c:	200236c8 	.word	0x200236c8
   21030:	00042ff3 	.word	0x00042ff3

00021034 <cloud_connect_error_handler>:
{
   21034:	b538      	push	{r3, r4, r5, lr}
	if (err == CLOUD_CONNECT_RES_SUCCESS) {
   21036:	4605      	mov	r5, r0
   21038:	2800      	cmp	r0, #0
   2103a:	f000 80b3 	beq.w	211a4 <cloud_connect_error_handler+0x170>
	LOG_ERR("Failed to connect to cloud, error %d", err);
   2103e:	2301      	movs	r3, #1
   21040:	f04f 0000 	mov.w	r0, #0
   21044:	4c58      	ldr	r4, [pc, #352]	; (211a8 <cloud_connect_error_handler+0x174>)
   21046:	f363 0007 	bfi	r0, r3, #0, #8
   2104a:	4b58      	ldr	r3, [pc, #352]	; (211ac <cloud_connect_error_handler+0x178>)
   2104c:	462a      	mov	r2, r5
   2104e:	1ae4      	subs	r4, r4, r3
   21050:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   21054:	f364 108f 	bfi	r0, r4, #6, #10
   21058:	4955      	ldr	r1, [pc, #340]	; (211b0 <cloud_connect_error_handler+0x17c>)
	switch (err) {
   2105a:	350a      	adds	r5, #10
	LOG_ERR("Failed to connect to cloud, error %d", err);
   2105c:	f01c ff81 	bl	3df62 <log_string_sync>
	switch (err) {
   21060:	2d09      	cmp	r5, #9
   21062:	f200 8096 	bhi.w	21192 <cloud_connect_error_handler+0x15e>
   21066:	e8df f005 	tbb	[pc, r5]
   2106a:	828b      	.short	0x828b
   2106c:	5c947079 	.word	0x5c947079
   21070:	05943d48 	.word	0x05943d48
		LOG_ERR("Cloud back-end has not been initialized");
   21074:	f04f 0000 	mov.w	r0, #0
   21078:	2301      	movs	r3, #1
   2107a:	f363 0007 	bfi	r0, r3, #0, #8
   2107e:	f364 108f 	bfi	r0, r4, #6, #10
   21082:	494c      	ldr	r1, [pc, #304]	; (211b4 <cloud_connect_error_handler+0x180>)
   21084:	f01c ff6d 	bl	3df62 <log_string_sync>
	ui_led_set_pattern(UI_LED_ERROR_CLOUD);
   21088:	f44f 6010 	mov.w	r0, #2304	; 0x900
   2108c:	f000 fd92 	bl	21bb4 <ui_led_set_pattern>
	LOG_ERR("LTE link disconnect");
   21090:	2301      	movs	r3, #1
   21092:	f04f 0000 	mov.w	r0, #0
   21096:	f363 0007 	bfi	r0, r3, #0, #8
   2109a:	f364 108f 	bfi	r0, r4, #6, #10
   2109e:	4946      	ldr	r1, [pc, #280]	; (211b8 <cloud_connect_error_handler+0x184>)
   210a0:	f01c ff5f 	bl	3df62 <log_string_sync>
	int err = lte_lc_power_off();
   210a4:	f007 fee4 	bl	28e70 <lte_lc_power_off>
	if (err) {
   210a8:	4602      	mov	r2, r0
   210aa:	b148      	cbz	r0, 210c0 <cloud_connect_error_handler+0x8c>
		LOG_ERR("lte_lc_power_off failed: %d", err);
   210ac:	2101      	movs	r1, #1
   210ae:	f04f 0000 	mov.w	r0, #0
   210b2:	f361 0007 	bfi	r0, r1, #0, #8
   210b6:	f364 108f 	bfi	r0, r4, #6, #10
   210ba:	4940      	ldr	r1, [pc, #256]	; (211bc <cloud_connect_error_handler+0x188>)
   210bc:	f01c ff51 	bl	3df62 <log_string_sync>
	LOG_ERR("Shutdown modem");
   210c0:	2301      	movs	r3, #1
   210c2:	f04f 0000 	mov.w	r0, #0
   210c6:	f363 0007 	bfi	r0, r3, #0, #8
   210ca:	f364 108f 	bfi	r0, r4, #6, #10
   210ce:	493c      	ldr	r1, [pc, #240]	; (211c0 <cloud_connect_error_handler+0x18c>)
   210d0:	f01c ff47 	bl	3df62 <log_string_sync>
	bsdlib_shutdown();
   210d4:	f01e f956 	bl	3f384 <bsdlib_shutdown>
	return z_impl_k_current_get();
   210d8:	f019 f862 	bl	3a1a0 <z_impl_k_current_get>
}
   210dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_suspend(thread);
   210e0:	f019 babe 	b.w	3a660 <z_impl_k_thread_suspend>
		LOG_ERR("Network error, check cloud configuration");
   210e4:	f04f 0000 	mov.w	r0, #0
   210e8:	2301      	movs	r3, #1
   210ea:	4936      	ldr	r1, [pc, #216]	; (211c4 <cloud_connect_error_handler+0x190>)
   210ec:	f363 0007 	bfi	r0, r3, #0, #8
   210f0:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_ERR("Unhandled connect error");
   210f4:	f01c ff35 	bl	3df62 <log_string_sync>
	if (reboot) {
   210f8:	e013      	b.n	21122 <cloud_connect_error_handler+0xee>
		if (cloud_backend && cloud_backend->config &&
   210fa:	4b33      	ldr	r3, [pc, #204]	; (211c8 <cloud_connect_error_handler+0x194>)
   210fc:	681b      	ldr	r3, [r3, #0]
   210fe:	b313      	cbz	r3, 21146 <cloud_connect_error_handler+0x112>
   21100:	685b      	ldr	r3, [r3, #4]
   21102:	b303      	cbz	r3, 21146 <cloud_connect_error_handler+0x112>
		    cloud_backend->config->name) {
   21104:	681a      	ldr	r2, [r3, #0]
	char *backend_name = "invalid";
   21106:	4b31      	ldr	r3, [pc, #196]	; (211cc <cloud_connect_error_handler+0x198>)
   21108:	2a00      	cmp	r2, #0
   2110a:	bf08      	it	eq
   2110c:	461a      	moveq	r2, r3
		LOG_ERR("An error occurred specific to the cloud back-end: %s",
   2110e:	f04f 0000 	mov.w	r0, #0
   21112:	2301      	movs	r3, #1
   21114:	f363 0007 	bfi	r0, r3, #0, #8
   21118:	f364 108f 	bfi	r0, r4, #6, #10
   2111c:	492c      	ldr	r1, [pc, #176]	; (211d0 <cloud_connect_error_handler+0x19c>)
   2111e:	f01c ff20 	bl	3df62 <log_string_sync>
		LOG_ERR("Device will reboot in %d seconds",
   21122:	2301      	movs	r3, #1
   21124:	f04f 0000 	mov.w	r0, #0
   21128:	f363 0007 	bfi	r0, r3, #0, #8
   2112c:	f364 108f 	bfi	r0, r4, #6, #10
   21130:	f44f 7296 	mov.w	r2, #300	; 0x12c
   21134:	4927      	ldr	r1, [pc, #156]	; (211d4 <cloud_connect_error_handler+0x1a0>)
   21136:	f01c ff14 	bl	3df62 <log_string_sync>
		k_delayed_work_submit_to_queue(
   2113a:	4a27      	ldr	r2, [pc, #156]	; (211d8 <cloud_connect_error_handler+0x1a4>)
   2113c:	4927      	ldr	r1, [pc, #156]	; (211dc <cloud_connect_error_handler+0x1a8>)
   2113e:	4828      	ldr	r0, [pc, #160]	; (211e0 <cloud_connect_error_handler+0x1ac>)
   21140:	f019 fb38 	bl	3a7b4 <k_delayed_work_submit_to_queue>
   21144:	e7a0      	b.n	21088 <cloud_connect_error_handler+0x54>
	char *backend_name = "invalid";
   21146:	4a21      	ldr	r2, [pc, #132]	; (211cc <cloud_connect_error_handler+0x198>)
   21148:	e7e1      	b.n	2110e <cloud_connect_error_handler+0xda>
		LOG_ERR("Ensure device has a valid private key");
   2114a:	f04f 0000 	mov.w	r0, #0
   2114e:	2301      	movs	r3, #1
   21150:	f363 0007 	bfi	r0, r3, #0, #8
   21154:	f364 108f 	bfi	r0, r4, #6, #10
   21158:	4922      	ldr	r1, [pc, #136]	; (211e4 <cloud_connect_error_handler+0x1b0>)
   2115a:	e7cb      	b.n	210f4 <cloud_connect_error_handler+0xc0>
		LOG_ERR("Ensure device has a valid CA and client certificate");
   2115c:	f04f 0000 	mov.w	r0, #0
   21160:	2301      	movs	r3, #1
   21162:	f363 0007 	bfi	r0, r3, #0, #8
   21166:	f364 108f 	bfi	r0, r4, #6, #10
   2116a:	491f      	ldr	r1, [pc, #124]	; (211e8 <cloud_connect_error_handler+0x1b4>)
   2116c:	e7c2      	b.n	210f4 <cloud_connect_error_handler+0xc0>
		LOG_ERR("A certificate/authorization error has occurred");
   2116e:	f04f 0000 	mov.w	r0, #0
   21172:	2301      	movs	r3, #1
   21174:	f363 0007 	bfi	r0, r3, #0, #8
   21178:	f364 108f 	bfi	r0, r4, #6, #10
   2117c:	491b      	ldr	r1, [pc, #108]	; (211ec <cloud_connect_error_handler+0x1b8>)
   2117e:	e7b9      	b.n	210f4 <cloud_connect_error_handler+0xc0>
		LOG_ERR("Connect timeout. SIM card may be out of data");
   21180:	f04f 0000 	mov.w	r0, #0
   21184:	2301      	movs	r3, #1
   21186:	f363 0007 	bfi	r0, r3, #0, #8
   2118a:	f364 108f 	bfi	r0, r4, #6, #10
   2118e:	4918      	ldr	r1, [pc, #96]	; (211f0 <cloud_connect_error_handler+0x1bc>)
   21190:	e7b0      	b.n	210f4 <cloud_connect_error_handler+0xc0>
		LOG_ERR("Unhandled connect error");
   21192:	f04f 0000 	mov.w	r0, #0
   21196:	2301      	movs	r3, #1
   21198:	f363 0007 	bfi	r0, r3, #0, #8
   2119c:	f364 108f 	bfi	r0, r4, #6, #10
   211a0:	4914      	ldr	r1, [pc, #80]	; (211f4 <cloud_connect_error_handler+0x1c0>)
   211a2:	e7a7      	b.n	210f4 <cloud_connect_error_handler+0xc0>
}
   211a4:	bd38      	pop	{r3, r4, r5, pc}
   211a6:	bf00      	nop
   211a8:	00041c2c 	.word	0x00041c2c
   211ac:	00041c2c 	.word	0x00041c2c
   211b0:	00042cdb 	.word	0x00042cdb
   211b4:	00042d00 	.word	0x00042d00
   211b8:	0004300f 	.word	0x0004300f
   211bc:	00043023 	.word	0x00043023
   211c0:	0004303f 	.word	0x0004303f
   211c4:	00042d28 	.word	0x00042d28
   211c8:	200236c8 	.word	0x200236c8
   211cc:	00042cd3 	.word	0x00042cd3
   211d0:	00042d51 	.word	0x00042d51
   211d4:	00042fac 	.word	0x00042fac
   211d8:	000493e0 	.word	0x000493e0
   211dc:	200236cc 	.word	0x200236cc
   211e0:	20023600 	.word	0x20023600
   211e4:	00042d86 	.word	0x00042d86
   211e8:	00042dac 	.word	0x00042dac
   211ec:	00042de0 	.word	0x00042de0
   211f0:	00042e0f 	.word	0x00042e0f
   211f4:	00042e3c 	.word	0x00042e3c

000211f8 <sensors_start>:
{
   211f8:	b508      	push	{r3, lr}
	atomic_set(&send_data_enable, 1);
   211fa:	2101      	movs	r1, #1
   211fc:	4830      	ldr	r0, [pc, #192]	; (212c0 <sensors_start+0xc8>)
   211fe:	f01c fb32 	bl	3d866 <atomic_set>
	err = motion_init_and_start(&application_work_q, motion_handler);
   21202:	4930      	ldr	r1, [pc, #192]	; (212c4 <sensors_start+0xcc>)
   21204:	4830      	ldr	r0, [pc, #192]	; (212c8 <sensors_start+0xd0>)
   21206:	f000 fc2f 	bl	21a68 <motion_init_and_start>
	if (err) {
   2120a:	4602      	mov	r2, r0
   2120c:	b168      	cbz	r0, 2122a <sensors_start+0x32>
		LOG_ERR("motion module init failed, error: %d", err);
   2120e:	2301      	movs	r3, #1
   21210:	f04f 0000 	mov.w	r0, #0
   21214:	492d      	ldr	r1, [pc, #180]	; (212cc <sensors_start+0xd4>)
   21216:	f363 0007 	bfi	r0, r3, #0, #8
   2121a:	4b2d      	ldr	r3, [pc, #180]	; (212d0 <sensors_start+0xd8>)
   2121c:	1a5b      	subs	r3, r3, r1
   2121e:	08db      	lsrs	r3, r3, #3
   21220:	f363 108f 	bfi	r0, r3, #6, #10
   21224:	492b      	ldr	r1, [pc, #172]	; (212d4 <sensors_start+0xdc>)
   21226:	f01c fe9c 	bl	3df62 <log_string_sync>
	err = env_sensors_init_and_start(&application_work_q, env_data_send);
   2122a:	492b      	ldr	r1, [pc, #172]	; (212d8 <sensors_start+0xe0>)
   2122c:	4826      	ldr	r0, [pc, #152]	; (212c8 <sensors_start+0xd0>)
   2122e:	f001 fc03 	bl	22a38 <env_sensors_init_and_start>
	if (err) {
   21232:	4602      	mov	r2, r0
   21234:	b168      	cbz	r0, 21252 <sensors_start+0x5a>
		LOG_ERR("Environmental sensors init failed, error: %d", err);
   21236:	2301      	movs	r3, #1
   21238:	f04f 0000 	mov.w	r0, #0
   2123c:	4923      	ldr	r1, [pc, #140]	; (212cc <sensors_start+0xd4>)
   2123e:	f363 0007 	bfi	r0, r3, #0, #8
   21242:	4b23      	ldr	r3, [pc, #140]	; (212d0 <sensors_start+0xd8>)
   21244:	1a5b      	subs	r3, r3, r1
   21246:	08db      	lsrs	r3, r3, #3
   21248:	f363 108f 	bfi	r0, r3, #6, #10
   2124c:	4923      	ldr	r1, [pc, #140]	; (212dc <sensors_start+0xe4>)
   2124e:	f01c fe88 	bl	3df62 <log_string_sync>
	err = modem_info_init();
   21252:	f008 f9d3 	bl	295fc <modem_info_init>
	if (err) {
   21256:	4602      	mov	r2, r0
   21258:	b328      	cbz	r0, 212a6 <sensors_start+0xae>
		LOG_ERR("Modem info could not be established: %d", err);
   2125a:	2301      	movs	r3, #1
   2125c:	f04f 0000 	mov.w	r0, #0
   21260:	491a      	ldr	r1, [pc, #104]	; (212cc <sensors_start+0xd4>)
   21262:	f363 0007 	bfi	r0, r3, #0, #8
   21266:	4b1a      	ldr	r3, [pc, #104]	; (212d0 <sensors_start+0xd8>)
   21268:	1a5b      	subs	r3, r3, r1
   2126a:	08db      	lsrs	r3, r3, #3
   2126c:	f363 108f 	bfi	r0, r3, #6, #10
   21270:	491b      	ldr	r1, [pc, #108]	; (212e0 <sensors_start+0xe8>)
   21272:	f01c fe76 	bl	3df62 <log_string_sync>
	k_work_submit_to_queue(&application_work_q, &device_status_work);
   21276:	481b      	ldr	r0, [pc, #108]	; (212e4 <sensors_start+0xec>)
   21278:	f7ff fa3c 	bl	206f4 <k_work_submit_to_queue.constprop.15>
	err = gps_control_init(&application_work_q, gps_handler);
   2127c:	491a      	ldr	r1, [pc, #104]	; (212e8 <sensors_start+0xf0>)
   2127e:	4812      	ldr	r0, [pc, #72]	; (212c8 <sensors_start+0xd0>)
   21280:	f001 fb48 	bl	22914 <gps_control_init>
	if (err) {
   21284:	b1d8      	cbz	r0, 212be <sensors_start+0xc6>
		LOG_ERR("GPS could not be initialized");
   21286:	2301      	movs	r3, #1
   21288:	f04f 0000 	mov.w	r0, #0
   2128c:	4a0f      	ldr	r2, [pc, #60]	; (212cc <sensors_start+0xd4>)
   2128e:	f363 0007 	bfi	r0, r3, #0, #8
   21292:	4b0f      	ldr	r3, [pc, #60]	; (212d0 <sensors_start+0xd8>)
   21294:	4915      	ldr	r1, [pc, #84]	; (212ec <sensors_start+0xf4>)
   21296:	1a9b      	subs	r3, r3, r2
   21298:	08db      	lsrs	r3, r3, #3
   2129a:	f363 108f 	bfi	r0, r3, #6, #10
}
   2129e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("GPS could not be initialized");
   212a2:	f01c be5e 	b.w	3df62 <log_string_sync>
	modem_info_params_init(&modem_param);
   212a6:	4812      	ldr	r0, [pc, #72]	; (212f0 <sensors_start+0xf8>)
   212a8:	f008 f9f4 	bl	29694 <modem_info_params_init>
	signal_strength_cloud_data.type = CLOUD_CHANNEL_LTE_LINK_RSRP;
   212ac:	220c      	movs	r2, #12
   212ae:	4b11      	ldr	r3, [pc, #68]	; (212f4 <sensors_start+0xfc>)
	modem_info_rsrp_register(modem_rsrp_handler);
   212b0:	4811      	ldr	r0, [pc, #68]	; (212f8 <sensors_start+0x100>)
	signal_strength_cloud_data.type = CLOUD_CHANNEL_LTE_LINK_RSRP;
   212b2:	701a      	strb	r2, [r3, #0]
	signal_strength_cloud_data.tag = 0x1;
   212b4:	2201      	movs	r2, #1
   212b6:	60da      	str	r2, [r3, #12]
	modem_info_rsrp_register(modem_rsrp_handler);
   212b8:	f008 f96e 	bl	29598 <modem_info_rsrp_register>
   212bc:	e7db      	b.n	21276 <sensors_start+0x7e>
}
   212be:	bd08      	pop	{r3, pc}
   212c0:	2002376c 	.word	0x2002376c
   212c4:	00020d59 	.word	0x00020d59
   212c8:	20023600 	.word	0x20023600
   212cc:	00041c2c 	.word	0x00041c2c
   212d0:	00041c2c 	.word	0x00041c2c
   212d4:	000436bd 	.word	0x000436bd
   212d8:	00020c09 	.word	0x00020c09
   212dc:	000436e2 	.word	0x000436e2
   212e0:	0004370f 	.word	0x0004370f
   212e4:	2002370c 	.word	0x2002370c
   212e8:	00020955 	.word	0x00020955
   212ec:	00043737 	.word	0x00043737
   212f0:	20020008 	.word	0x20020008
   212f4:	20023788 	.word	0x20023788
   212f8:	000206b5 	.word	0x000206b5

000212fc <on_pairing_done>:
{
   212fc:	b510      	push	{r4, lr}
	if (atomic_get(&association_requested)) {
   212fe:	4815      	ldr	r0, [pc, #84]	; (21354 <on_pairing_done+0x58>)
   21300:	f01c fab9 	bl	3d876 <atomic_get>
   21304:	b320      	cbz	r0, 21350 <on_pairing_done+0x54>
		atomic_set(&association_requested, 0);
   21306:	2100      	movs	r1, #0
   21308:	4812      	ldr	r0, [pc, #72]	; (21354 <on_pairing_done+0x58>)
   2130a:	f01c faac 	bl	3d866 <atomic_set>
		k_delayed_work_cancel(&cycle_cloud_connection_work);
   2130e:	4812      	ldr	r0, [pc, #72]	; (21358 <on_pairing_done+0x5c>)
   21310:	f019 fadc 	bl	3a8cc <k_delayed_work_cancel>
		LOG_INF("Device associated with cloud.");
   21314:	2303      	movs	r3, #3
   21316:	f04f 0000 	mov.w	r0, #0
   2131a:	4c10      	ldr	r4, [pc, #64]	; (2135c <on_pairing_done+0x60>)
   2131c:	f363 0007 	bfi	r0, r3, #0, #8
   21320:	4b0f      	ldr	r3, [pc, #60]	; (21360 <on_pairing_done+0x64>)
   21322:	4910      	ldr	r1, [pc, #64]	; (21364 <on_pairing_done+0x68>)
   21324:	1ae4      	subs	r4, r4, r3
   21326:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2132a:	f364 108f 	bfi	r0, r4, #6, #10
   2132e:	f01c fe18 	bl	3df62 <log_string_sync>
		LOG_INF("Reconnecting for cloud policy to take effect.");
   21332:	2303      	movs	r3, #3
   21334:	f04f 0000 	mov.w	r0, #0
   21338:	f363 0007 	bfi	r0, r3, #0, #8
   2133c:	f364 108f 	bfi	r0, r4, #6, #10
   21340:	4909      	ldr	r1, [pc, #36]	; (21368 <on_pairing_done+0x6c>)
   21342:	f01c fe0e 	bl	3df62 <log_string_sync>
}
   21346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		cycle_cloud_connection(NULL);
   2134a:	2000      	movs	r0, #0
   2134c:	f7ff b8ac 	b.w	204a8 <cycle_cloud_connection>
}
   21350:	bd10      	pop	{r4, pc}
   21352:	bf00      	nop
   21354:	200236c4 	.word	0x200236c4
   21358:	200236ec 	.word	0x200236ec
   2135c:	00041c2c 	.word	0x00041c2c
   21360:	00041c2c 	.word	0x00041c2c
   21364:	00043524 	.word	0x00043524
   21368:	00043542 	.word	0x00043542

0002136c <cloud_event_handler>:
{
   2136c:	b538      	push	{r3, r4, r5, lr}
   2136e:	4c64      	ldr	r4, [pc, #400]	; (21500 <cloud_event_handler+0x194>)
   21370:	4b64      	ldr	r3, [pc, #400]	; (21504 <cloud_event_handler+0x198>)
	switch (evt->type) {
   21372:	780a      	ldrb	r2, [r1, #0]
   21374:	1ae4      	subs	r4, r4, r3
{
   21376:	460d      	mov	r5, r1
   21378:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		LOG_WRN("Unknown cloud event type: %d", evt->type);
   2137c:	f04f 0000 	mov.w	r0, #0
	switch (evt->type) {
   21380:	2a09      	cmp	r2, #9
   21382:	f200 80b5 	bhi.w	214f0 <cloud_event_handler+0x184>
   21386:	e8df f002 	tbb	[pc, r2]
   2138a:	2605      	.short	0x2605
   2138c:	413a3015 	.word	0x413a3015
   21390:	a4b39868 	.word	0xa4b39868
		LOG_INF("CLOUD_EVT_CONNECTED");
   21394:	2303      	movs	r3, #3
   21396:	f363 0007 	bfi	r0, r3, #0, #8
   2139a:	f364 108f 	bfi	r0, r4, #6, #10
   2139e:	495a      	ldr	r1, [pc, #360]	; (21508 <cloud_event_handler+0x19c>)
   213a0:	f01c fddf 	bl	3df62 <log_string_sync>
		k_delayed_work_cancel(&cloud_reboot_work);
   213a4:	4859      	ldr	r0, [pc, #356]	; (2150c <cloud_event_handler+0x1a0>)
   213a6:	f019 fa91 	bl	3a8cc <k_delayed_work_cancel>
		ui_led_set_pattern(UI_CLOUD_CONNECTED);
   213aa:	2008      	movs	r0, #8
}
   213ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ui_led_set_pattern(UI_LTE_DISCONNECTED);
   213b0:	f000 bc00 	b.w	21bb4 <ui_led_set_pattern>
		LOG_INF("CLOUD_EVT_READY");
   213b4:	2303      	movs	r3, #3
   213b6:	f363 0007 	bfi	r0, r3, #0, #8
   213ba:	f364 108f 	bfi	r0, r4, #6, #10
   213be:	4954      	ldr	r1, [pc, #336]	; (21510 <cloud_event_handler+0x1a4>)
   213c0:	f01c fdcf 	bl	3df62 <log_string_sync>
		ui_led_set_pattern(UI_CLOUD_CONNECTED);
   213c4:	2008      	movs	r0, #8
   213c6:	f000 fbf5 	bl	21bb4 <ui_led_set_pattern>
		boot_write_img_confirmed();
   213ca:	f01c fe3a 	bl	3e042 <boot_write_img_confirmed>
}
   213ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sensors_start();
   213d2:	f7ff bf11 	b.w	211f8 <sensors_start>
		LOG_INF("CLOUD_EVT_DISCONNECTED");
   213d6:	2303      	movs	r3, #3
   213d8:	f363 0007 	bfi	r0, r3, #0, #8
   213dc:	f364 108f 	bfi	r0, r4, #6, #10
   213e0:	494c      	ldr	r1, [pc, #304]	; (21514 <cloud_event_handler+0x1a8>)
   213e2:	f01c fdbe 	bl	3df62 <log_string_sync>
		ui_led_set_pattern(UI_LTE_DISCONNECTED);
   213e6:	2000      	movs	r0, #0
   213e8:	e7e0      	b.n	213ac <cloud_event_handler+0x40>
		LOG_INF("CLOUD_EVT_ERROR");
   213ea:	2303      	movs	r3, #3
   213ec:	494a      	ldr	r1, [pc, #296]	; (21518 <cloud_event_handler+0x1ac>)
   213ee:	f363 0007 	bfi	r0, r3, #0, #8
   213f2:	f364 108f 	bfi	r0, r4, #6, #10
}
   213f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_INF("CLOUD_EVT_DATA_SENT");
   213fa:	f01c bdb2 	b.w	3df62 <log_string_sync>
   213fe:	2303      	movs	r3, #3
   21400:	f363 0007 	bfi	r0, r3, #0, #8
   21404:	f364 108f 	bfi	r0, r4, #6, #10
   21408:	4944      	ldr	r1, [pc, #272]	; (2151c <cloud_event_handler+0x1b0>)
   2140a:	e7f4      	b.n	213f6 <cloud_event_handler+0x8a>
		LOG_INF("CLOUD_EVT_DATA_RECEIVED");
   2140c:	2303      	movs	r3, #3
   2140e:	f363 0007 	bfi	r0, r3, #0, #8
   21412:	f364 108f 	bfi	r0, r4, #6, #10
   21416:	4942      	ldr	r1, [pc, #264]	; (21520 <cloud_event_handler+0x1b4>)
   21418:	f01c fda3 	bl	3df62 <log_string_sync>
		err = cloud_decode_command(evt->data.msg.buf);
   2141c:	6868      	ldr	r0, [r5, #4]
   2141e:	f000 ff11 	bl	22244 <cloud_decode_command>
		if (err == 0) {
   21422:	2800      	cmp	r0, #0
   21424:	d06b      	beq.n	214fe <cloud_event_handler+0x192>
		err = nrf_cloud_agps_process(evt->data.msg.buf,
   21426:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   2142a:	2200      	movs	r2, #0
   2142c:	f00a fb5e 	bl	2baec <nrf_cloud_agps_process>
		if (err) {
   21430:	4602      	mov	r2, r0
			LOG_WRN("Data was not valid A-GPS data, err: %d", err);
   21432:	f04f 0000 	mov.w	r0, #0
		if (err) {
   21436:	b14a      	cbz	r2, 2144c <cloud_event_handler+0xe0>
			LOG_WRN("Data was not valid A-GPS data, err: %d", err);
   21438:	2102      	movs	r1, #2
   2143a:	f361 0007 	bfi	r0, r1, #0, #8
   2143e:	4939      	ldr	r1, [pc, #228]	; (21524 <cloud_event_handler+0x1b8>)
   21440:	f364 108f 	bfi	r0, r4, #6, #10
}
   21444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_WRN("Unknown cloud event type: %d", evt->type);
   21448:	f01c bd8b 	b.w	3df62 <log_string_sync>
		LOG_INF("A-GPS data processed");
   2144c:	2303      	movs	r3, #3
   2144e:	f363 0007 	bfi	r0, r3, #0, #8
   21452:	f364 108f 	bfi	r0, r4, #6, #10
   21456:	4934      	ldr	r1, [pc, #208]	; (21528 <cloud_event_handler+0x1bc>)
   21458:	e7cd      	b.n	213f6 <cloud_event_handler+0x8a>
		LOG_INF("CLOUD_EVT_PAIR_REQUEST");
   2145a:	2303      	movs	r3, #3
   2145c:	f363 0007 	bfi	r0, r3, #0, #8
   21460:	f364 108f 	bfi	r0, r4, #6, #10
   21464:	4931      	ldr	r1, [pc, #196]	; (2152c <cloud_event_handler+0x1c0>)
   21466:	f01c fd7c 	bl	3df62 <log_string_sync>
	if (atomic_get(&association_requested) == 0) {
   2146a:	4831      	ldr	r0, [pc, #196]	; (21530 <cloud_event_handler+0x1c4>)
   2146c:	f01c fa03 	bl	3d876 <atomic_get>
   21470:	2800      	cmp	r0, #0
   21472:	d144      	bne.n	214fe <cloud_event_handler+0x192>
		atomic_set(&association_requested, 1);
   21474:	2101      	movs	r1, #1
   21476:	482e      	ldr	r0, [pc, #184]	; (21530 <cloud_event_handler+0x1c4>)
   21478:	f01c f9f5 	bl	3d866 <atomic_set>
		ui_led_set_pattern(UI_CLOUD_PAIRING);
   2147c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   21480:	f000 fb98 	bl	21bb4 <ui_led_set_pattern>
		LOG_INF("Add device to cloud account.");
   21484:	2303      	movs	r3, #3
   21486:	f04f 0000 	mov.w	r0, #0
   2148a:	f363 0007 	bfi	r0, r3, #0, #8
   2148e:	f364 108f 	bfi	r0, r4, #6, #10
   21492:	4928      	ldr	r1, [pc, #160]	; (21534 <cloud_event_handler+0x1c8>)
   21494:	f01c fd65 	bl	3df62 <log_string_sync>
		LOG_INF("Waiting for cloud association...");
   21498:	2303      	movs	r3, #3
   2149a:	f04f 0000 	mov.w	r0, #0
   2149e:	f363 0007 	bfi	r0, r3, #0, #8
   214a2:	f364 108f 	bfi	r0, r4, #6, #10
   214a6:	4924      	ldr	r1, [pc, #144]	; (21538 <cloud_event_handler+0x1cc>)
   214a8:	f01c fd5b 	bl	3df62 <log_string_sync>
}
   214ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		k_delayed_work_submit_to_queue(&application_work_q,
   214b0:	4a22      	ldr	r2, [pc, #136]	; (2153c <cloud_event_handler+0x1d0>)
   214b2:	4923      	ldr	r1, [pc, #140]	; (21540 <cloud_event_handler+0x1d4>)
   214b4:	4823      	ldr	r0, [pc, #140]	; (21544 <cloud_event_handler+0x1d8>)
   214b6:	f019 b97d 	b.w	3a7b4 <k_delayed_work_submit_to_queue>
		LOG_INF("CLOUD_EVT_PAIR_DONE");
   214ba:	2303      	movs	r3, #3
   214bc:	f363 0007 	bfi	r0, r3, #0, #8
   214c0:	f364 108f 	bfi	r0, r4, #6, #10
   214c4:	4920      	ldr	r1, [pc, #128]	; (21548 <cloud_event_handler+0x1dc>)
   214c6:	f01c fd4c 	bl	3df62 <log_string_sync>
}
   214ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		on_pairing_done();
   214ce:	f7ff bf15 	b.w	212fc <on_pairing_done>
		LOG_INF("CLOUD_EVT_FOTA_DONE");
   214d2:	2303      	movs	r3, #3
   214d4:	f363 0007 	bfi	r0, r3, #0, #8
   214d8:	f364 108f 	bfi	r0, r4, #6, #10
   214dc:	491b      	ldr	r1, [pc, #108]	; (2154c <cloud_event_handler+0x1e0>)
   214de:	f01c fd40 	bl	3df62 <log_string_sync>
		lte_lc_power_off();
   214e2:	f007 fcc5 	bl	28e70 <lte_lc_power_off>
}
   214e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sys_reboot(SYS_REBOOT_COLD);
   214ea:	2001      	movs	r0, #1
   214ec:	f002 ba78 	b.w	239e0 <sys_reboot>
		LOG_WRN("Unknown cloud event type: %d", evt->type);
   214f0:	2302      	movs	r3, #2
   214f2:	f363 0007 	bfi	r0, r3, #0, #8
   214f6:	f364 108f 	bfi	r0, r4, #6, #10
   214fa:	4915      	ldr	r1, [pc, #84]	; (21550 <cloud_event_handler+0x1e4>)
   214fc:	e7a2      	b.n	21444 <cloud_event_handler+0xd8>
}
   214fe:	bd38      	pop	{r3, r4, r5, pc}
   21500:	00041c2c 	.word	0x00041c2c
   21504:	00041c2c 	.word	0x00041c2c
   21508:	00042e54 	.word	0x00042e54
   2150c:	200236cc 	.word	0x200236cc
   21510:	00045fa5 	.word	0x00045fa5
   21514:	00042e68 	.word	0x00042e68
   21518:	00042e7f 	.word	0x00042e7f
   2151c:	00042e8f 	.word	0x00042e8f
   21520:	00042ea3 	.word	0x00042ea3
   21524:	00042ebb 	.word	0x00042ebb
   21528:	00042ee2 	.word	0x00042ee2
   2152c:	00042ef7 	.word	0x00042ef7
   21530:	200236c4 	.word	0x200236c4
   21534:	00042f0e 	.word	0x00042f0e
   21538:	00042f2b 	.word	0x00042f2b
   2153c:	000493e0 	.word	0x000493e0
   21540:	200236ec 	.word	0x200236ec
   21544:	20023600 	.word	0x20023600
   21548:	00042f4c 	.word	0x00042f4c
   2154c:	00046060 	.word	0x00046060
   21550:	00042f60 	.word	0x00042f60

00021554 <handle_bsdlib_init_ret>:
#endif /* defined(CONFIG_USE_UI_MODULE) */

void handle_bsdlib_init_ret(void)
{
   21554:	b508      	push	{r3, lr}
	#if defined(CONFIG_BSD_LIBRARY)
	int ret = bsdlib_get_init_ret();
   21556:	f005 fca1 	bl	26e9c <bsdlib_get_init_ret>

	/* Handle return values relating to modem firmware update */
	switch (ret) {
   2155a:	4b1e      	ldr	r3, [pc, #120]	; (215d4 <handle_bsdlib_init_ret+0x80>)
	int ret = bsdlib_get_init_ret();
   2155c:	4602      	mov	r2, r0
	switch (ret) {
   2155e:	4298      	cmp	r0, r3
   21560:	dc06      	bgt.n	21570 <handle_bsdlib_init_ret+0x1c>
   21562:	3b01      	subs	r3, #1
   21564:	4298      	cmp	r0, r3
   21566:	da19      	bge.n	2159c <handle_bsdlib_init_ret+0x48>
   21568:	f1b0 6f88 	cmp.w	r0, #71303168	; 0x4400000
   2156c:	dc25      	bgt.n	215ba <handle_bsdlib_init_ret+0x66>
		break;
	default:
		break;
	}
	#endif /* CONFIG_BSD_LIBRARY */
}
   2156e:	bd08      	pop	{r3, pc}
	switch (ret) {
   21570:	4b19      	ldr	r3, [pc, #100]	; (215d8 <handle_bsdlib_init_ret+0x84>)
   21572:	4298      	cmp	r0, r3
   21574:	d1fb      	bne.n	2156e <handle_bsdlib_init_ret+0x1a>
		LOG_INF("MODEM UPDATE OK. Will run new firmware");
   21576:	2303      	movs	r3, #3
   21578:	f04f 0000 	mov.w	r0, #0
   2157c:	4a17      	ldr	r2, [pc, #92]	; (215dc <handle_bsdlib_init_ret+0x88>)
   2157e:	f363 0007 	bfi	r0, r3, #0, #8
   21582:	4b17      	ldr	r3, [pc, #92]	; (215e0 <handle_bsdlib_init_ret+0x8c>)
   21584:	4917      	ldr	r1, [pc, #92]	; (215e4 <handle_bsdlib_init_ret+0x90>)
   21586:	1a9b      	subs	r3, r3, r2
   21588:	08db      	lsrs	r3, r3, #3
   2158a:	f363 108f 	bfi	r0, r3, #6, #10
   2158e:	f01c fce8 	bl	3df62 <log_string_sync>
}
   21592:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sys_reboot(SYS_REBOOT_COLD);
   21596:	2001      	movs	r0, #1
   21598:	f002 ba22 	b.w	239e0 <sys_reboot>
		LOG_ERR("MODEM UPDATE ERROR %d. Will run old firmware", ret);
   2159c:	2301      	movs	r3, #1
   2159e:	f04f 0000 	mov.w	r0, #0
   215a2:	490e      	ldr	r1, [pc, #56]	; (215dc <handle_bsdlib_init_ret+0x88>)
   215a4:	f363 0007 	bfi	r0, r3, #0, #8
   215a8:	4b0d      	ldr	r3, [pc, #52]	; (215e0 <handle_bsdlib_init_ret+0x8c>)
   215aa:	1a5b      	subs	r3, r3, r1
   215ac:	08db      	lsrs	r3, r3, #3
   215ae:	490e      	ldr	r1, [pc, #56]	; (215e8 <handle_bsdlib_init_ret+0x94>)
   215b0:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("MODEM UPDATE FATAL ERROR %d. Modem failiure", ret);
   215b4:	f01c fcd5 	bl	3df62 <log_string_sync>
   215b8:	e7eb      	b.n	21592 <handle_bsdlib_init_ret+0x3e>
   215ba:	2301      	movs	r3, #1
   215bc:	f04f 0000 	mov.w	r0, #0
   215c0:	4906      	ldr	r1, [pc, #24]	; (215dc <handle_bsdlib_init_ret+0x88>)
   215c2:	f363 0007 	bfi	r0, r3, #0, #8
   215c6:	4b06      	ldr	r3, [pc, #24]	; (215e0 <handle_bsdlib_init_ret+0x8c>)
   215c8:	1a5b      	subs	r3, r3, r1
   215ca:	08db      	lsrs	r3, r3, #3
   215cc:	f363 108f 	bfi	r0, r3, #6, #10
   215d0:	4906      	ldr	r1, [pc, #24]	; (215ec <handle_bsdlib_init_ret+0x98>)
   215d2:	e7ef      	b.n	215b4 <handle_bsdlib_init_ret+0x60>
   215d4:	04400004 	.word	0x04400004
   215d8:	05500001 	.word	0x05500001
   215dc:	00041c2c 	.word	0x00041c2c
   215e0:	00041c2c 	.word	0x00041c2c
   215e4:	00043169 	.word	0x00043169
   215e8:	00043190 	.word	0x00043190
   215ec:	000431bd 	.word	0x000431bd

000215f0 <main>:

void main(void)
{
	int ret;

	LOG_INF("Asset tracker started");
   215f0:	2303      	movs	r3, #3
   215f2:	f04f 0000 	mov.w	r0, #0
{
   215f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_INF("Asset tracker started");
   215fa:	f363 0007 	bfi	r0, r3, #0, #8
   215fe:	4ca7      	ldr	r4, [pc, #668]	; (2189c <main+0x2ac>)
   21600:	4ba7      	ldr	r3, [pc, #668]	; (218a0 <main+0x2b0>)
{
   21602:	b085      	sub	sp, #20
	LOG_INF("Asset tracker started");
   21604:	1ae4      	subs	r4, r4, r3
   21606:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2160a:	f364 108f 	bfi	r0, r4, #6, #10
   2160e:	49a5      	ldr	r1, [pc, #660]	; (218a4 <main+0x2b4>)
   21610:	f01c fca7 	bl	3df62 <log_string_sync>
	k_work_q_start(&application_work_q, application_stack_area,
   21614:	f04f 33ff 	mov.w	r3, #4294967295
   21618:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2161c:	49a2      	ldr	r1, [pc, #648]	; (218a8 <main+0x2b8>)
   2161e:	48a3      	ldr	r0, [pc, #652]	; (218ac <main+0x2bc>)
   21620:	f019 f8a4 	bl	3a76c <k_work_q_start>
		       CONFIG_APPLICATION_WORKQUEUE_PRIORITY);
	if (IS_ENABLED(CONFIG_WATCHDOG)) {
		watchdog_init_and_start(&application_work_q);
	}

	handle_bsdlib_init_ret();
   21624:	f7ff ff96 	bl	21554 <handle_bsdlib_init_ret>

	cloud_backend = cloud_get_binding("NRF_CLOUD");
   21628:	48a1      	ldr	r0, [pc, #644]	; (218b0 <main+0x2c0>)
   2162a:	f008 fa5d 	bl	29ae8 <cloud_get_binding>
   2162e:	4da1      	ldr	r5, [pc, #644]	; (218b4 <main+0x2c4>)
   21630:	6028      	str	r0, [r5, #0]
	__ASSERT(cloud_backend != NULL, "nRF Cloud backend not found");
   21632:	b970      	cbnz	r0, 21652 <main+0x62>
   21634:	49a0      	ldr	r1, [pc, #640]	; (218b8 <main+0x2c8>)
   21636:	f240 5371 	movw	r3, #1393	; 0x571
   2163a:	4aa0      	ldr	r2, [pc, #640]	; (218bc <main+0x2cc>)
   2163c:	48a0      	ldr	r0, [pc, #640]	; (218c0 <main+0x2d0>)
   2163e:	f01c fc2c 	bl	3de9a <printk>
   21642:	48a0      	ldr	r0, [pc, #640]	; (218c4 <main+0x2d4>)
   21644:	f01c fc29 	bl	3de9a <printk>
   21648:	f240 5171 	movw	r1, #1393	; 0x571
   2164c:	489b      	ldr	r0, [pc, #620]	; (218bc <main+0x2cc>)
   2164e:	f01c fc77 	bl	3df40 <assert_post_action>

	ret = cloud_init(cloud_backend, cloud_event_handler);
   21652:	6828      	ldr	r0, [r5, #0]
	if (backend == NULL || backend->api == NULL ||
   21654:	2800      	cmp	r0, #0
   21656:	f000 8100 	beq.w	2185a <main+0x26a>
   2165a:	6803      	ldr	r3, [r0, #0]
   2165c:	2b00      	cmp	r3, #0
   2165e:	f000 80fc 	beq.w	2185a <main+0x26a>
	    backend->api->init == NULL) {
   21662:	681b      	ldr	r3, [r3, #0]
	if (backend == NULL || backend->api == NULL ||
   21664:	2b00      	cmp	r3, #0
   21666:	f000 80f8 	beq.w	2185a <main+0x26a>
	return backend->api->init(backend, handler);
   2166a:	4997      	ldr	r1, [pc, #604]	; (218c8 <main+0x2d8>)
   2166c:	4798      	blx	r3
	if (ret) {
   2166e:	4680      	mov	r8, r0
   21670:	b168      	cbz	r0, 2168e <main+0x9e>
		LOG_ERR("Cloud backend could not be initialized, error: %d",
   21672:	2301      	movs	r3, #1
   21674:	f04f 0000 	mov.w	r0, #0
   21678:	f363 0007 	bfi	r0, r3, #0, #8
   2167c:	f364 108f 	bfi	r0, r4, #6, #10
   21680:	4642      	mov	r2, r8
   21682:	4992      	ldr	r1, [pc, #584]	; (218cc <main+0x2dc>)
   21684:	f01c fc6d 	bl	3df62 <log_string_sync>
			ret);
		cloud_error_handler(ret);
   21688:	4640      	mov	r0, r8
   2168a:	f01c f8fc 	bl	3d886 <cloud_error_handler>
	}

#if defined(CONFIG_USE_UI_MODULE)
	ui_init(ui_evt_handler);
   2168e:	4890      	ldr	r0, [pc, #576]	; (218d0 <main+0x2e0>)
   21690:	f000 fa96 	bl	21bc0 <ui_init>
#endif

	ret = cloud_decode_init(cloud_cmd_handler);
   21694:	488f      	ldr	r0, [pc, #572]	; (218d4 <main+0x2e4>)
   21696:	f000 ff67 	bl	22568 <cloud_decode_init>
	if (ret) {
   2169a:	4680      	mov	r8, r0
   2169c:	b168      	cbz	r0, 216ba <main+0xca>
		LOG_ERR("Cloud command decoder could not be initialized, error: %d", ret);
   2169e:	2301      	movs	r3, #1
   216a0:	f04f 0000 	mov.w	r0, #0
   216a4:	f363 0007 	bfi	r0, r3, #0, #8
   216a8:	f364 108f 	bfi	r0, r4, #6, #10
   216ac:	4642      	mov	r2, r8
   216ae:	498a      	ldr	r1, [pc, #552]	; (218d8 <main+0x2e8>)
   216b0:	f01c fc57 	bl	3df62 <log_string_sync>
		cloud_error_handler(ret);
   216b4:	4640      	mov	r0, r8
   216b6:	f01c f8e6 	bl	3d886 <cloud_error_handler>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   216ba:	f04f 0800 	mov.w	r8, #0
   216be:	4b87      	ldr	r3, [pc, #540]	; (218dc <main+0x2ec>)
   216c0:	4a87      	ldr	r2, [pc, #540]	; (218e0 <main+0x2f0>)
   216c2:	f8c3 8000 	str.w	r8, [r3]
   216c6:	e9c3 2801 	strd	r2, r8, [r3, #4]
   216ca:	4b86      	ldr	r3, [pc, #536]	; (218e4 <main+0x2f4>)
   216cc:	4a86      	ldr	r2, [pc, #536]	; (218e8 <main+0x2f8>)
   216ce:	f8c3 8000 	str.w	r8, [r3]
   216d2:	e9c3 2801 	strd	r2, r8, [r3, #4]
   216d6:	4b85      	ldr	r3, [pc, #532]	; (218ec <main+0x2fc>)
   216d8:	4a85      	ldr	r2, [pc, #532]	; (218f0 <main+0x300>)
	k_delayed_work_init(&long_press_button_work, long_press_handler);
   216da:	4986      	ldr	r1, [pc, #536]	; (218f4 <main+0x304>)
   216dc:	4886      	ldr	r0, [pc, #536]	; (218f8 <main+0x308>)
   216de:	e9c3 2801 	strd	r2, r8, [r3, #4]
   216e2:	f8c3 8000 	str.w	r8, [r3]
   216e6:	f01e ff07 	bl	404f8 <k_delayed_work_init>
	k_delayed_work_init(&cloud_reboot_work, cloud_reboot_handler);
   216ea:	4984      	ldr	r1, [pc, #528]	; (218fc <main+0x30c>)
   216ec:	4884      	ldr	r0, [pc, #528]	; (21900 <main+0x310>)
   216ee:	f01e ff03 	bl	404f8 <k_delayed_work_init>
	k_delayed_work_init(&cycle_cloud_connection_work,
   216f2:	4984      	ldr	r1, [pc, #528]	; (21904 <main+0x314>)
   216f4:	4884      	ldr	r0, [pc, #528]	; (21908 <main+0x318>)
   216f6:	f01e feff 	bl	404f8 <k_delayed_work_init>
   216fa:	4a84      	ldr	r2, [pc, #528]	; (2190c <main+0x31c>)
   216fc:	4b84      	ldr	r3, [pc, #528]	; (21910 <main+0x320>)
	k_delayed_work_init(&rsrp_work, modem_rsrp_data_send);
   216fe:	4985      	ldr	r1, [pc, #532]	; (21914 <main+0x324>)
   21700:	4885      	ldr	r0, [pc, #532]	; (21918 <main+0x328>)
   21702:	e9c3 2801 	strd	r2, r8, [r3, #4]
   21706:	f8c3 8000 	str.w	r8, [r3]
   2170a:	f01e fef5 	bl	404f8 <k_delayed_work_init>
		LOG_INF("Connecting to LTE network. ");
   2170e:	2303      	movs	r3, #3
   21710:	f04f 0000 	mov.w	r0, #0
   21714:	f363 0007 	bfi	r0, r3, #0, #8
   21718:	f364 108f 	bfi	r0, r4, #6, #10
   2171c:	497f      	ldr	r1, [pc, #508]	; (2191c <main+0x32c>)
   2171e:	f01c fc20 	bl	3df62 <log_string_sync>
		LOG_INF("This may take several minutes.");
   21722:	2303      	movs	r3, #3
   21724:	f04f 0000 	mov.w	r0, #0
   21728:	f363 0007 	bfi	r0, r3, #0, #8
   2172c:	f364 108f 	bfi	r0, r4, #6, #10
   21730:	497b      	ldr	r1, [pc, #492]	; (21920 <main+0x330>)
   21732:	f01c fc16 	bl	3df62 <log_string_sync>
		ui_led_set_pattern(UI_LTE_CONNECTING);
   21736:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2173a:	f000 fa3b 	bl	21bb4 <ui_led_set_pattern>
		err = lte_lc_init_and_connect();
   2173e:	f01e fb92 	bl	3fe66 <lte_lc_init_and_connect>
		if (err) {
   21742:	b170      	cbz	r0, 21762 <main+0x172>
			LOG_ERR("LTE link could not be established.");
   21744:	2301      	movs	r3, #1
   21746:	f04f 0000 	mov.w	r0, #0
   2174a:	f363 0007 	bfi	r0, r3, #0, #8
   2174e:	f364 108f 	bfi	r0, r4, #6, #10
   21752:	4974      	ldr	r1, [pc, #464]	; (21924 <main+0x334>)
   21754:	f01c fc05 	bl	3df62 <log_string_sync>
   21758:	f001 fd20 	bl	2319c <z_impl_log_panic>
	sys_reboot(0);
   2175c:	4640      	mov	r0, r8
   2175e:	f002 f93f 	bl	239e0 <sys_reboot>
		LOG_INF("Connected to LTE network");
   21762:	2303      	movs	r3, #3
   21764:	f04f 0000 	mov.w	r0, #0
   21768:	f363 0007 	bfi	r0, r3, #0, #8
   2176c:	f364 108f 	bfi	r0, r4, #6, #10
   21770:	496d      	ldr	r1, [pc, #436]	; (21928 <main+0x338>)
	return socket_ops->connect(sock, addr, addrlen);
}

static inline int poll(struct pollfd *fds, int nfds, int timeout)
{
	__ASSERT_NO_MSG(socket_ops);
   21772:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 21948 <main+0x358>
   21776:	f01c fbf4 	bl	3df62 <log_string_sync>
		ui_led_set_pattern(UI_LTE_CONNECTED);
   2177a:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2177e:	f000 fa19 	bl	21bb4 <ui_led_set_pattern>
   21782:	46c1      	mov	r9, r8
	}

	work_init();
	modem_configure();
connect:
	ret = cloud_connect(cloud_backend);
   21784:	6828      	ldr	r0, [r5, #0]
	if (backend == NULL || backend->api == NULL ||
   21786:	2800      	cmp	r0, #0
   21788:	d06a      	beq.n	21860 <main+0x270>
   2178a:	6803      	ldr	r3, [r0, #0]
   2178c:	2b00      	cmp	r3, #0
   2178e:	d067      	beq.n	21860 <main+0x270>
	    backend->api->connect == NULL) {
   21790:	689b      	ldr	r3, [r3, #8]
	if (backend == NULL || backend->api == NULL ||
   21792:	2b00      	cmp	r3, #0
   21794:	d064      	beq.n	21860 <main+0x270>
	return backend->api->connect(backend);
   21796:	4798      	blx	r3
	if (ret != CLOUD_CONNECT_RES_SUCCESS) {
   21798:	2800      	cmp	r0, #0
   2179a:	d064      	beq.n	21866 <main+0x276>
		cloud_connect_error_handler(ret);
   2179c:	b240      	sxtb	r0, r0
   2179e:	f7ff fc49 	bl	21034 <cloud_connect_error_handler>
		k_delayed_work_submit_to_queue(&application_work_q,
					       &cloud_reboot_work,
					       CLOUD_CONNACK_WAIT_DURATION);
	}

	struct pollfd fds[] = {
   217a2:	f04f 0300 	mov.w	r3, #0
   217a6:	f8ad 300e 	strh.w	r3, [sp, #14]
		{
			.fd = cloud_backend->config->socket,
   217aa:	682b      	ldr	r3, [r5, #0]
 */
static inline int cloud_keepalive_time_left(const struct cloud_backend *const backend)
{
	if (backend == NULL || backend->api == NULL ||
	    backend->api->keepalive_time_left == NULL) {
		__ASSERT(0, "Missing cloud backend functionality");
   217ac:	f8df a19c 	ldr.w	sl, [pc, #412]	; 2194c <main+0x35c>
   217b0:	685b      	ldr	r3, [r3, #4]
	struct pollfd fds[] = {
   217b2:	689b      	ldr	r3, [r3, #8]
   217b4:	9302      	str	r3, [sp, #8]
   217b6:	2301      	movs	r3, #1
   217b8:	f8ad 300c 	strh.w	r3, [sp, #12]
			.events = POLLIN
		}
	};

	while (true) {
		ret = poll(fds, ARRAY_SIZE(fds),
   217bc:	6828      	ldr	r0, [r5, #0]
	if (backend == NULL || backend->api == NULL ||
   217be:	b120      	cbz	r0, 217ca <main+0x1da>
   217c0:	6803      	ldr	r3, [r0, #0]
   217c2:	b113      	cbz	r3, 217ca <main+0x1da>
	    backend->api->keepalive_time_left == NULL) {
   217c4:	699b      	ldr	r3, [r3, #24]
	if (backend == NULL || backend->api == NULL ||
   217c6:	2b00      	cmp	r3, #0
   217c8:	d158      	bne.n	2187c <main+0x28c>
		__ASSERT(0, "Missing cloud backend functionality");
   217ca:	f44f 7394 	mov.w	r3, #296	; 0x128
   217ce:	4652      	mov	r2, sl
   217d0:	4956      	ldr	r1, [pc, #344]	; (2192c <main+0x33c>)
   217d2:	483b      	ldr	r0, [pc, #236]	; (218c0 <main+0x2d0>)
   217d4:	f01c fb61 	bl	3de9a <printk>
   217d8:	4855      	ldr	r0, [pc, #340]	; (21930 <main+0x340>)
   217da:	f01c fb5e 	bl	3de9a <printk>
   217de:	f44f 7194 	mov.w	r1, #296	; 0x128
   217e2:	4650      	mov	r0, sl
   217e4:	f01c fbac 	bl	3df40 <assert_post_action>
		return K_FOREVER;
   217e8:	f04f 3bff 	mov.w	fp, #4294967295
   217ec:	f8d8 3000 	ldr.w	r3, [r8]
   217f0:	b94b      	cbnz	r3, 21806 <main+0x216>
   217f2:	4950      	ldr	r1, [pc, #320]	; (21934 <main+0x344>)
   217f4:	4832      	ldr	r0, [pc, #200]	; (218c0 <main+0x2d0>)
   217f6:	234d      	movs	r3, #77	; 0x4d
   217f8:	4a4f      	ldr	r2, [pc, #316]	; (21938 <main+0x348>)
   217fa:	f01c fb4e 	bl	3de9a <printk>
   217fe:	214d      	movs	r1, #77	; 0x4d
   21800:	484d      	ldr	r0, [pc, #308]	; (21938 <main+0x348>)
   21802:	f01c fb9d 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->poll);
   21806:	f8d9 3000 	ldr.w	r3, [r9]
   2180a:	699b      	ldr	r3, [r3, #24]
   2180c:	b94b      	cbnz	r3, 21822 <main+0x232>
   2180e:	494b      	ldr	r1, [pc, #300]	; (2193c <main+0x34c>)
   21810:	482b      	ldr	r0, [pc, #172]	; (218c0 <main+0x2d0>)
   21812:	234e      	movs	r3, #78	; 0x4e
   21814:	4a48      	ldr	r2, [pc, #288]	; (21938 <main+0x348>)
   21816:	f01c fb40 	bl	3de9a <printk>
   2181a:	214e      	movs	r1, #78	; 0x4e
   2181c:	4846      	ldr	r0, [pc, #280]	; (21938 <main+0x348>)
   2181e:	f01c fb8f 	bl	3df40 <assert_post_action>

	return socket_ops->poll(fds, nfds, timeout);
   21822:	f8d9 3000 	ldr.w	r3, [r9]
   21826:	465a      	mov	r2, fp
   21828:	699b      	ldr	r3, [r3, #24]
   2182a:	2101      	movs	r1, #1
   2182c:	a802      	add	r0, sp, #8
   2182e:	4798      	blx	r3
			   cloud_keepalive_time_left(cloud_backend));
		if (ret < 0) {
   21830:	f1b0 0b00 	subs.w	fp, r0, #0
   21834:	da25      	bge.n	21882 <main+0x292>
			LOG_ERR("poll() returned an error: %d", ret);
   21836:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   2183a:	f043 0301 	orr.w	r3, r3, #1
   2183e:	f363 0607 	bfi	r6, r3, #0, #8
   21842:	f364 168f 	bfi	r6, r4, #6, #10
   21846:	4630      	mov	r0, r6
   21848:	465a      	mov	r2, fp
   2184a:	493d      	ldr	r1, [pc, #244]	; (21940 <main+0x350>)
   2184c:	f01c fb89 	bl	3df62 <log_string_sync>
			error_handler(ERROR_CLOUD, ret);
   21850:	4659      	mov	r1, fp
   21852:	2000      	movs	r0, #0
   21854:	f7ff f982 	bl	20b5c <error_handler>
			continue;
   21858:	e7b0      	b.n	217bc <main+0x1cc>
		return -ENOTSUP;
   2185a:	f06f 0885 	mvn.w	r8, #133	; 0x85
   2185e:	e708      	b.n	21672 <main+0x82>
		return CLOUD_CONNECT_RES_ERR_INVALID_PARAM;
   21860:	f06f 0001 	mvn.w	r0, #1
   21864:	e79a      	b.n	2179c <main+0x1ac>
		atomic_set(&reconnect_to_cloud, 0);
   21866:	4601      	mov	r1, r0
   21868:	4836      	ldr	r0, [pc, #216]	; (21944 <main+0x354>)
   2186a:	f01b fffc 	bl	3d866 <atomic_set>
		k_delayed_work_submit_to_queue(&application_work_q,
   2186e:	f247 5230 	movw	r2, #30000	; 0x7530
   21872:	4923      	ldr	r1, [pc, #140]	; (21900 <main+0x310>)
   21874:	480d      	ldr	r0, [pc, #52]	; (218ac <main+0x2bc>)
   21876:	f018 ff9d 	bl	3a7b4 <k_delayed_work_submit_to_queue>
   2187a:	e792      	b.n	217a2 <main+0x1b2>
	}

	return backend->api->keepalive_time_left(backend);
   2187c:	4798      	blx	r3
   2187e:	4683      	mov	fp, r0
   21880:	e7b4      	b.n	217ec <main+0x1fc>
		}

		if (ret == 0) {
   21882:	d165      	bne.n	21950 <main+0x360>
			cloud_ping(cloud_backend);
   21884:	6828      	ldr	r0, [r5, #0]
	if (backend == NULL || backend->api == NULL) {
   21886:	2800      	cmp	r0, #0
   21888:	d098      	beq.n	217bc <main+0x1cc>
   2188a:	6803      	ldr	r3, [r0, #0]
   2188c:	2b00      	cmp	r3, #0
   2188e:	d095      	beq.n	217bc <main+0x1cc>
	if (backend->api->ping != NULL) {
   21890:	695b      	ldr	r3, [r3, #20]
   21892:	2b00      	cmp	r3, #0
   21894:	d092      	beq.n	217bc <main+0x1cc>
		return backend->api->ping(backend);
   21896:	4798      	blx	r3
   21898:	e790      	b.n	217bc <main+0x1cc>
   2189a:	bf00      	nop
   2189c:	00041c2c 	.word	0x00041c2c
   218a0:	00041c2c 	.word	0x00041c2c
   218a4:	0004322d 	.word	0x0004322d
   218a8:	2002bea0 	.word	0x2002bea0
   218ac:	20023600 	.word	0x20023600
   218b0:	00043243 	.word	0x00043243
   218b4:	200236c8 	.word	0x200236c8
   218b8:	0004325b 	.word	0x0004325b
   218bc:	0004324d 	.word	0x0004324d
   218c0:	00043278 	.word	0x00043278
   218c4:	00043295 	.word	0x00043295
   218c8:	0002136d 	.word	0x0002136d
   218cc:	000432b3 	.word	0x000432b3
   218d0:	00020531 	.word	0x00020531
   218d4:	000207c9 	.word	0x000207c9
   218d8:	000432e5 	.word	0x000432e5
   218dc:	20023770 	.word	0x20023770
   218e0:	00020f1d 	.word	0x00020f1d
   218e4:	2002377c 	.word	0x2002377c
   218e8:	0002058d 	.word	0x0002058d
   218ec:	20023760 	.word	0x20023760
   218f0:	0001d139 	.word	0x0001d139
   218f4:	00020781 	.word	0x00020781
   218f8:	20023718 	.word	0x20023718
   218fc:	0003d87d 	.word	0x0003d87d
   21900:	200236cc 	.word	0x200236cc
   21904:	000204a9 	.word	0x000204a9
   21908:	200236ec 	.word	0x200236ec
   2190c:	00020f29 	.word	0x00020f29
   21910:	2002370c 	.word	0x2002370c
   21914:	00020ea5 	.word	0x00020ea5
   21918:	20023740 	.word	0x20023740
   2191c:	0004331f 	.word	0x0004331f
   21920:	00043c57 	.word	0x00043c57
   21924:	0004333b 	.word	0x0004333b
   21928:	0004335e 	.word	0x0004335e
   2192c:	00048cfb 	.word	0x00048cfb
   21930:	0004339b 	.word	0x0004339b
   21934:	000433f1 	.word	0x000433f1
   21938:	000433c1 	.word	0x000433c1
   2193c:	000433fc 	.word	0x000433fc
   21940:	0004340d 	.word	0x0004340d
   21944:	20023738 	.word	0x20023738
   21948:	2002389c 	.word	0x2002389c
   2194c:	00043377 	.word	0x00043377
			continue;
		}

		if ((fds[0].revents & POLLIN) == POLLIN) {
   21950:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   21954:	07da      	lsls	r2, r3, #31
   21956:	d506      	bpl.n	21966 <main+0x376>
			cloud_input(cloud_backend);
   21958:	6828      	ldr	r0, [r5, #0]
 *
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_input(const struct cloud_backend *const backend)
{
	if (backend == NULL || backend->api == NULL ||
   2195a:	b120      	cbz	r0, 21966 <main+0x376>
   2195c:	6803      	ldr	r3, [r0, #0]
   2195e:	b113      	cbz	r3, 21966 <main+0x376>
	    backend->api->input == NULL) {
   21960:	69db      	ldr	r3, [r3, #28]
	if (backend == NULL || backend->api == NULL ||
   21962:	b103      	cbz	r3, 21966 <main+0x376>
		return -ENOTSUP;
	}

	return backend->api->input(backend);
   21964:	4798      	blx	r3
		}

		if ((fds[0].revents & POLLNVAL) == POLLNVAL) {
   21966:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2196a:	f012 0320 	ands.w	r3, r2, #32
   2196e:	d030      	beq.n	219d2 <main+0x3e2>
			if (atomic_get(&reconnect_to_cloud)) {
   21970:	4834      	ldr	r0, [pc, #208]	; (21a44 <main+0x454>)
   21972:	f01b ff80 	bl	3d876 <atomic_get>
   21976:	4682      	mov	sl, r0
   21978:	b178      	cbz	r0, 2199a <main+0x3aa>
				k_delayed_work_cancel(&cloud_reboot_work);
   2197a:	4833      	ldr	r0, [pc, #204]	; (21a48 <main+0x458>)
   2197c:	f018 ffa6 	bl	3a8cc <k_delayed_work_cancel>
				LOG_INF("Attempting reconnect...");
   21980:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   21984:	f043 0303 	orr.w	r3, r3, #3
   21988:	f363 0707 	bfi	r7, r3, #0, #8
   2198c:	f364 178f 	bfi	r7, r4, #6, #10
   21990:	492e      	ldr	r1, [pc, #184]	; (21a4c <main+0x45c>)
   21992:	4638      	mov	r0, r7
   21994:	f01c fae5 	bl	3df62 <log_string_sync>
				goto connect;
   21998:	e6f4      	b.n	21784 <main+0x194>
			}
			LOG_ERR("Socket error: POLLNVAL");
   2199a:	2301      	movs	r3, #1
   2199c:	f04f 0000 	mov.w	r0, #0
   219a0:	f363 0007 	bfi	r0, r3, #0, #8
   219a4:	f364 108f 	bfi	r0, r4, #6, #10
   219a8:	4929      	ldr	r1, [pc, #164]	; (21a50 <main+0x460>)
   219aa:	f01c fada 	bl	3df62 <log_string_sync>
			LOG_ERR("The cloud socket was unexpectedly closed.");
   219ae:	2301      	movs	r3, #1
   219b0:	f04f 0000 	mov.w	r0, #0
   219b4:	f363 0007 	bfi	r0, r3, #0, #8
   219b8:	f364 108f 	bfi	r0, r4, #6, #10
   219bc:	4925      	ldr	r1, [pc, #148]	; (21a54 <main+0x464>)
   219be:	f01c fad0 	bl	3df62 <log_string_sync>
			error_handler(ERROR_CLOUD, -EIO);
   219c2:	f06f 0104 	mvn.w	r1, #4
   219c6:	4650      	mov	r0, sl
		}

		if ((fds[0].revents & POLLERR) == POLLERR) {
			LOG_ERR("Socket error: POLLERR");
			LOG_ERR("Cloud connection was unexpectedly closed.");
			error_handler(ERROR_CLOUD, -EIO);
   219c8:	f7ff f8c8 	bl	20b5c <error_handler>
		}
	}

	cloud_disconnect(cloud_backend);
	goto connect;
}
   219cc:	b005      	add	sp, #20
   219ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((fds[0].revents & POLLHUP) == POLLHUP) {
   219d2:	f012 0b10 	ands.w	fp, r2, #16
   219d6:	d019      	beq.n	21a0c <main+0x41c>
			LOG_ERR("Socket error: POLLHUP");
   219d8:	2201      	movs	r2, #1
   219da:	f04f 0000 	mov.w	r0, #0
   219de:	f362 0007 	bfi	r0, r2, #0, #8
   219e2:	f364 108f 	bfi	r0, r4, #6, #10
   219e6:	491c      	ldr	r1, [pc, #112]	; (21a58 <main+0x468>)
   219e8:	9301      	str	r3, [sp, #4]
   219ea:	f01c faba 	bl	3df62 <log_string_sync>
			LOG_ERR("Connection was closed by the cloud.");
   219ee:	2201      	movs	r2, #1
   219f0:	f04f 0000 	mov.w	r0, #0
   219f4:	f362 0007 	bfi	r0, r2, #0, #8
   219f8:	f364 108f 	bfi	r0, r4, #6, #10
   219fc:	4917      	ldr	r1, [pc, #92]	; (21a5c <main+0x46c>)
   219fe:	f01c fab0 	bl	3df62 <log_string_sync>
			error_handler(ERROR_CLOUD, -EIO);
   21a02:	9b01      	ldr	r3, [sp, #4]
   21a04:	f06f 0104 	mvn.w	r1, #4
   21a08:	4618      	mov	r0, r3
   21a0a:	e7dd      	b.n	219c8 <main+0x3d8>
		if ((fds[0].revents & POLLERR) == POLLERR) {
   21a0c:	0713      	lsls	r3, r2, #28
   21a0e:	f57f aed5 	bpl.w	217bc <main+0x1cc>
			LOG_ERR("Socket error: POLLERR");
   21a12:	2301      	movs	r3, #1
   21a14:	f04f 0000 	mov.w	r0, #0
   21a18:	f363 0007 	bfi	r0, r3, #0, #8
   21a1c:	f364 108f 	bfi	r0, r4, #6, #10
   21a20:	490f      	ldr	r1, [pc, #60]	; (21a60 <main+0x470>)
   21a22:	f01c fa9e 	bl	3df62 <log_string_sync>
			LOG_ERR("Cloud connection was unexpectedly closed.");
   21a26:	2301      	movs	r3, #1
   21a28:	f04f 0000 	mov.w	r0, #0
   21a2c:	f363 0007 	bfi	r0, r3, #0, #8
   21a30:	f364 108f 	bfi	r0, r4, #6, #10
   21a34:	490b      	ldr	r1, [pc, #44]	; (21a64 <main+0x474>)
   21a36:	f01c fa94 	bl	3df62 <log_string_sync>
			error_handler(ERROR_CLOUD, -EIO);
   21a3a:	f06f 0104 	mvn.w	r1, #4
   21a3e:	4658      	mov	r0, fp
   21a40:	e7c2      	b.n	219c8 <main+0x3d8>
   21a42:	bf00      	nop
   21a44:	20023738 	.word	0x20023738
   21a48:	200236cc 	.word	0x200236cc
   21a4c:	0004342a 	.word	0x0004342a
   21a50:	00043442 	.word	0x00043442
   21a54:	00043459 	.word	0x00043459
   21a58:	00043483 	.word	0x00043483
   21a5c:	00043499 	.word	0x00043499
   21a60:	000434bd 	.word	0x000434bd
   21a64:	000434d3 	.word	0x000434d3

00021a68 <motion_init_and_start>:
}

/**@brief Initialize motion module. */
int motion_init_and_start(struct k_work_q *work_q,
			  motion_handler_t motion_handler)
{
   21a68:	b510      	push	{r4, lr}
	if ((work_q == NULL) || (motion_handler == NULL)) {
   21a6a:	b358      	cbz	r0, 21ac4 <motion_init_and_start+0x5c>
   21a6c:	b351      	cbz	r1, 21ac4 <motion_init_and_start+0x5c>
	}

	int err;

	motion_work_q = work_q;
	handler = motion_handler;
   21a6e:	4b17      	ldr	r3, [pc, #92]	; (21acc <motion_init_and_start+0x64>)
	motion_work_q = work_q;
   21a70:	4c17      	ldr	r4, [pc, #92]	; (21ad0 <motion_init_and_start+0x68>)
	handler = motion_handler;
   21a72:	6019      	str	r1, [r3, #0]
	motion_work_q = work_q;
   21a74:	6020      	str	r0, [r4, #0]

	k_delayed_work_init(&motion_work, motion_work_q_handler);
   21a76:	4917      	ldr	r1, [pc, #92]	; (21ad4 <motion_init_and_start+0x6c>)
   21a78:	4817      	ldr	r0, [pc, #92]	; (21ad8 <motion_init_and_start+0x70>)
   21a7a:	f01e fd3d 	bl	404f8 <k_delayed_work_init>
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   21a7e:	4817      	ldr	r0, [pc, #92]	; (21adc <motion_init_and_start+0x74>)
   21a80:	f016 fa92 	bl	37fa8 <z_impl_device_get_binding>
	accel_dev = device_get_binding(CONFIG_ACCEL_DEV_NAME);
   21a84:	4b16      	ldr	r3, [pc, #88]	; (21ae0 <motion_init_and_start+0x78>)
   21a86:	6018      	str	r0, [r3, #0]
	if (accel_dev == NULL) {
   21a88:	b130      	cbz	r0, 21a98 <motion_init_and_start+0x30>
	k_delayed_work_submit_to_queue(motion_work_q, &motion_work, K_NO_WAIT);
   21a8a:	2200      	movs	r2, #0
   21a8c:	4912      	ldr	r1, [pc, #72]	; (21ad8 <motion_init_and_start+0x70>)
   21a8e:	6820      	ldr	r0, [r4, #0]
   21a90:	f018 fe90 	bl	3a7b4 <k_delayed_work_submit_to_queue>
	if (err) {
		return err;
	}

	sensor_trigger_handler(NULL, NULL);
	return 0;
   21a94:	2000      	movs	r0, #0
}
   21a96:	bd10      	pop	{r4, pc}
		LOG_ERR("Could not get %s device",
   21a98:	2301      	movs	r3, #1
   21a9a:	f04f 0400 	mov.w	r4, #0
   21a9e:	4a11      	ldr	r2, [pc, #68]	; (21ae4 <motion_init_and_start+0x7c>)
   21aa0:	f363 0407 	bfi	r4, r3, #0, #8
   21aa4:	4b10      	ldr	r3, [pc, #64]	; (21ae8 <motion_init_and_start+0x80>)
   21aa6:	480d      	ldr	r0, [pc, #52]	; (21adc <motion_init_and_start+0x74>)
   21aa8:	1a9b      	subs	r3, r3, r2
   21aaa:	08db      	lsrs	r3, r3, #3
   21aac:	f363 148f 	bfi	r4, r3, #6, #10
   21ab0:	f01c fa69 	bl	3df86 <log_strdup>
   21ab4:	490d      	ldr	r1, [pc, #52]	; (21aec <motion_init_and_start+0x84>)
   21ab6:	4602      	mov	r2, r0
   21ab8:	4620      	mov	r0, r4
   21aba:	f01c fa52 	bl	3df62 <log_string_sync>
		return -ENODEV;
   21abe:	f06f 0012 	mvn.w	r0, #18
   21ac2:	e7e8      	b.n	21a96 <motion_init_and_start+0x2e>
		return -EINVAL;
   21ac4:	f06f 0015 	mvn.w	r0, #21
   21ac8:	e7e5      	b.n	21a96 <motion_init_and_start+0x2e>
   21aca:	bf00      	nop
   21acc:	2002379c 	.word	0x2002379c
   21ad0:	200237c0 	.word	0x200237c0
   21ad4:	0001d201 	.word	0x0001d201
   21ad8:	200237a0 	.word	0x200237a0
   21adc:	00043798 	.word	0x00043798
   21ae0:	20023798 	.word	0x20023798
   21ae4:	00041c2c 	.word	0x00041c2c
   21ae8:	00041ce4 	.word	0x00041ce4
   21aec:	000437a3 	.word	0x000437a3

00021af0 <motion_simulate_trigger>:
	k_delayed_work_submit_to_queue(motion_work_q, &motion_work, K_NO_WAIT);
   21af0:	4b02      	ldr	r3, [pc, #8]	; (21afc <motion_simulate_trigger+0xc>)
   21af2:	2200      	movs	r2, #0
   21af4:	4902      	ldr	r1, [pc, #8]	; (21b00 <motion_simulate_trigger+0x10>)
   21af6:	6818      	ldr	r0, [r3, #0]
   21af8:	f018 be5c 	b.w	3a7b4 <k_delayed_work_submit_to_queue>
   21afc:	200237c0 	.word	0x200237c0
   21b00:	200237a0 	.word	0x200237a0

00021b04 <button_handler>:
}
#endif /* CONFIG_UI_LED_USE_PWM */

/**@brief Callback for button events from the DK buttons and LEDs library. */
static void button_handler(u32_t button_states, u32_t has_changed)
{
   21b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21b06:	4605      	mov	r5, r0
   21b08:	460c      	mov	r4, r1
				break;
			}
		}

		/* Button number has been stored, remove from bitmask. */
		has_changed &= ~(1UL << (btn_num - 1));
   21b0a:	2601      	movs	r6, #1
		evt.button = btn_num;
		evt.type = (button_states & BIT(btn_num - 1))
				? UI_EVT_BUTTON_ACTIVE
				: UI_EVT_BUTTON_INACTIVE;

		callback(evt);
   21b0c:	4f11      	ldr	r7, [pc, #68]	; (21b54 <button_handler+0x50>)
	while (has_changed) {
   21b0e:	b90c      	cbnz	r4, 21b14 <button_handler+0x10>
	}
}
   21b10:	b003      	add	sp, #12
   21b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21b14:	2300      	movs	r3, #0
			if (has_changed & BIT(i)) {
   21b16:	1c59      	adds	r1, r3, #1
   21b18:	fa24 f303 	lsr.w	r3, r4, r3
   21b1c:	f013 0001 	ands.w	r0, r3, #1
   21b20:	b2ca      	uxtb	r2, r1
   21b22:	d103      	bne.n	21b2c <button_handler+0x28>
		for (u8_t i = 0; i < 32; i++) {
   21b24:	2920      	cmp	r1, #32
   21b26:	460b      	mov	r3, r1
   21b28:	d1f5      	bne.n	21b16 <button_handler+0x12>
		btn_num = 0;
   21b2a:	4602      	mov	r2, r0
		has_changed &= ~(1UL << (btn_num - 1));
   21b2c:	1e53      	subs	r3, r2, #1
   21b2e:	fa06 f103 	lsl.w	r1, r6, r3
				? UI_EVT_BUTTON_ACTIVE
   21b32:	fa25 f303 	lsr.w	r3, r5, r3
				: UI_EVT_BUTTON_INACTIVE;
   21b36:	43db      	mvns	r3, r3
   21b38:	f003 0301 	and.w	r3, r3, #1
		evt.button = btn_num;
   21b3c:	9201      	str	r2, [sp, #4]
				: UI_EVT_BUTTON_INACTIVE;
   21b3e:	f88d 3000 	strb.w	r3, [sp]
		callback(evt);
   21b42:	aa02      	add	r2, sp, #8
		has_changed &= ~(1UL << (btn_num - 1));
   21b44:	ea24 0401 	bic.w	r4, r4, r1
		callback(evt);
   21b48:	683b      	ldr	r3, [r7, #0]
   21b4a:	e912 0003 	ldmdb	r2, {r0, r1}
   21b4e:	4798      	blx	r3
   21b50:	e7dd      	b.n	21b0e <button_handler+0xa>
   21b52:	bf00      	nop
   21b54:	200237c4 	.word	0x200237c4

00021b58 <leds_update>:
	led_on_mask = UI_LED_GET_ON(current_led_state);
   21b58:	4b11      	ldr	r3, [pc, #68]	; (21ba0 <leds_update+0x48>)
{
   21b5a:	b570      	push	{r4, r5, r6, lr}
	led_on_mask = UI_LED_GET_ON(current_led_state);
   21b5c:	881c      	ldrh	r4, [r3, #0]
	led_on = !led_on;
   21b5e:	4b11      	ldr	r3, [pc, #68]	; (21ba4 <leds_update+0x4c>)
{
   21b60:	4606      	mov	r6, r0
	led_on = !led_on;
   21b62:	781a      	ldrb	r2, [r3, #0]
   21b64:	f082 0201 	eor.w	r2, r2, #1
   21b68:	701a      	strb	r2, [r3, #0]
	if (led_on) {
   21b6a:	f344 2307 	sbfx	r3, r4, #8, #8
   21b6e:	b264      	sxtb	r4, r4
   21b70:	b192      	cbz	r2, 21b98 <leds_update+0x40>
		led_on_mask |= UI_LED_GET_BLINK(current_led_state);
   21b72:	431c      	orrs	r4, r3
	if (led_on_mask != current_led_on_mask) {
   21b74:	4d0c      	ldr	r5, [pc, #48]	; (21ba8 <leds_update+0x50>)
		led_on_mask &= ~UI_LED_GET_BLINK(current_led_state);
   21b76:	b2e4      	uxtb	r4, r4
	if (led_on_mask != current_led_on_mask) {
   21b78:	782b      	ldrb	r3, [r5, #0]
   21b7a:	42a3      	cmp	r3, r4
   21b7c:	d003      	beq.n	21b86 <leds_update+0x2e>
		dk_set_leds(led_on_mask);
   21b7e:	4620      	mov	r0, r4
   21b80:	f01e f825 	bl	3fbce <dk_set_leds>
		current_led_on_mask = led_on_mask;
   21b84:	702c      	strb	r4, [r5, #0]
	if (work) {
   21b86:	b156      	cbz	r6, 21b9e <leds_update+0x46>
}
   21b88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   21b8c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   21b90:	4906      	ldr	r1, [pc, #24]	; (21bac <leds_update+0x54>)
   21b92:	4807      	ldr	r0, [pc, #28]	; (21bb0 <leds_update+0x58>)
   21b94:	f018 be0e 	b.w	3a7b4 <k_delayed_work_submit_to_queue>
		led_on_mask &= ~UI_LED_GET_BLINK(current_led_state);
   21b98:	ea24 0403 	bic.w	r4, r4, r3
   21b9c:	e7ea      	b.n	21b74 <leds_update+0x1c>
}
   21b9e:	bd70      	pop	{r4, r5, r6, pc}
   21ba0:	20029394 	.word	0x20029394
   21ba4:	20029e85 	.word	0x20029e85
   21ba8:	20029e84 	.word	0x20029e84
   21bac:	200237c8 	.word	0x200237c8
   21bb0:	200292b4 	.word	0x200292b4

00021bb4 <ui_led_set_pattern>:

void ui_led_set_pattern(enum ui_led_pattern state)
{
	current_led_state = state;
   21bb4:	4b01      	ldr	r3, [pc, #4]	; (21bbc <ui_led_set_pattern+0x8>)
   21bb6:	8018      	strh	r0, [r3, #0]
#ifdef CONFIG_UI_LED_USE_PWM
	ui_led_set_effect(state);
#else
	current_led_state = state;
#endif /* CONFIG_UI_LED_USE_PWM */
}
   21bb8:	4770      	bx	lr
   21bba:	bf00      	nop
   21bbc:	20029394 	.word	0x20029394

00021bc0 <ui_init>:
	}
#endif
}

int ui_init(ui_callback_t cb)
{
   21bc0:	b538      	push	{r3, r4, r5, lr}
   21bc2:	4605      	mov	r5, r0
	if (err) {
		LOG_ERR("Error when initializing PWM controlled LEDs");
		return err;
	}
#else
	err = dk_leds_init();
   21bc4:	f005 fdca 	bl	2775c <dk_leds_init>
	if (err) {
   21bc8:	4604      	mov	r4, r0
   21bca:	b180      	cbz	r0, 21bee <ui_init+0x2e>
		LOG_ERR("Could not initialize leds, err code: %d\n", err);
   21bcc:	2301      	movs	r3, #1
   21bce:	f04f 0000 	mov.w	r0, #0
   21bd2:	4a21      	ldr	r2, [pc, #132]	; (21c58 <ui_init+0x98>)
   21bd4:	f363 0007 	bfi	r0, r3, #0, #8
   21bd8:	4b20      	ldr	r3, [pc, #128]	; (21c5c <ui_init+0x9c>)
   21bda:	4921      	ldr	r1, [pc, #132]	; (21c60 <ui_init+0xa0>)
   21bdc:	1a9b      	subs	r3, r3, r2
   21bde:	4622      	mov	r2, r4
   21be0:	08db      	lsrs	r3, r3, #3
   21be2:	f363 108f 	bfi	r0, r3, #6, #10
	if (cb) {
		callback  = cb;

		err = dk_buttons_init(button_handler);
		if (err) {
			LOG_ERR("Could not initialize buttons, err code: %d\n",
   21be6:	f01c f9bc 	bl	3df62 <log_string_sync>
		return err;
	}
#endif /* CONFIG_UI_NMOS */

	return err;
}
   21bea:	4620      	mov	r0, r4
   21bec:	bd38      	pop	{r3, r4, r5, pc}
	err = dk_set_leds_state(0x00, DK_ALL_LEDS_MSK);
   21bee:	210f      	movs	r1, #15
   21bf0:	f01d ffe3 	bl	3fbba <dk_set_leds_state>
	if (err) {
   21bf4:	4604      	mov	r4, r0
   21bf6:	b168      	cbz	r0, 21c14 <ui_init+0x54>
		LOG_ERR("Could not set leds state, err code: %d\n", err);
   21bf8:	2301      	movs	r3, #1
   21bfa:	f04f 0000 	mov.w	r0, #0
   21bfe:	4a16      	ldr	r2, [pc, #88]	; (21c58 <ui_init+0x98>)
   21c00:	f363 0007 	bfi	r0, r3, #0, #8
   21c04:	4b15      	ldr	r3, [pc, #84]	; (21c5c <ui_init+0x9c>)
   21c06:	4917      	ldr	r1, [pc, #92]	; (21c64 <ui_init+0xa4>)
   21c08:	1a9b      	subs	r3, r3, r2
   21c0a:	08db      	lsrs	r3, r3, #3
   21c0c:	f363 108f 	bfi	r0, r3, #6, #10
   21c10:	4622      	mov	r2, r4
   21c12:	e7e8      	b.n	21be6 <ui_init+0x26>
	k_delayed_work_init(&leds_update_work, leds_update);
   21c14:	4914      	ldr	r1, [pc, #80]	; (21c68 <ui_init+0xa8>)
   21c16:	4815      	ldr	r0, [pc, #84]	; (21c6c <ui_init+0xac>)
   21c18:	f01e fc6e 	bl	404f8 <k_delayed_work_init>
   21c1c:	4622      	mov	r2, r4
   21c1e:	4913      	ldr	r1, [pc, #76]	; (21c6c <ui_init+0xac>)
   21c20:	4813      	ldr	r0, [pc, #76]	; (21c70 <ui_init+0xb0>)
   21c22:	f018 fdc7 	bl	3a7b4 <k_delayed_work_submit_to_queue>
	if (cb) {
   21c26:	2d00      	cmp	r5, #0
   21c28:	d0df      	beq.n	21bea <ui_init+0x2a>
		callback  = cb;
   21c2a:	4b12      	ldr	r3, [pc, #72]	; (21c74 <ui_init+0xb4>)
		err = dk_buttons_init(button_handler);
   21c2c:	4812      	ldr	r0, [pc, #72]	; (21c78 <ui_init+0xb8>)
		callback  = cb;
   21c2e:	601d      	str	r5, [r3, #0]
		err = dk_buttons_init(button_handler);
   21c30:	f005 fdee 	bl	27810 <dk_buttons_init>
		if (err) {
   21c34:	4604      	mov	r4, r0
   21c36:	2800      	cmp	r0, #0
   21c38:	d0d7      	beq.n	21bea <ui_init+0x2a>
			LOG_ERR("Could not initialize buttons, err code: %d\n",
   21c3a:	2301      	movs	r3, #1
   21c3c:	f04f 0000 	mov.w	r0, #0
   21c40:	4a05      	ldr	r2, [pc, #20]	; (21c58 <ui_init+0x98>)
   21c42:	f363 0007 	bfi	r0, r3, #0, #8
   21c46:	4b05      	ldr	r3, [pc, #20]	; (21c5c <ui_init+0x9c>)
   21c48:	490c      	ldr	r1, [pc, #48]	; (21c7c <ui_init+0xbc>)
   21c4a:	1a9b      	subs	r3, r3, r2
   21c4c:	08db      	lsrs	r3, r3, #3
   21c4e:	f363 108f 	bfi	r0, r3, #6, #10
   21c52:	4622      	mov	r2, r4
   21c54:	e7c7      	b.n	21be6 <ui_init+0x26>
   21c56:	bf00      	nop
   21c58:	00041c2c 	.word	0x00041c2c
   21c5c:	00041d54 	.word	0x00041d54
   21c60:	000437fa 	.word	0x000437fa
   21c64:	00043823 	.word	0x00043823
   21c68:	00021b59 	.word	0x00021b59
   21c6c:	200237c8 	.word	0x200237c8
   21c70:	200292b4 	.word	0x200292b4
   21c74:	200237c4 	.word	0x200237c4
   21c78:	00021b05 	.word	0x00021b05
   21c7c:	0004384b 	.word	0x0004384b

00021c80 <cloud_set_chan_cfg_item>:
}

static int cloud_set_chan_cfg_item(const enum cloud_channel channel,
			  const enum sensor_chan_cfg_item_type type,
			  const double value)
{
   21c80:	b5f0      	push	{r4, r5, r6, r7, lr}
   21c82:	4616      	mov	r6, r2
   21c84:	461f      	mov	r7, r3
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
		if (sensor_cfg[i].chan == channel) {
   21c86:	2230      	movs	r2, #48	; 0x30
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   21c88:	2300      	movs	r3, #0
		if (sensor_cfg[i].chan == channel) {
   21c8a:	4c0a      	ldr	r4, [pc, #40]	; (21cb4 <cloud_set_chan_cfg_item+0x34>)
   21c8c:	fb02 f503 	mul.w	r5, r2, r3
   21c90:	5d2d      	ldrb	r5, [r5, r4]
   21c92:	4285      	cmp	r5, r0
   21c94:	d108      	bne.n	21ca8 <cloud_set_chan_cfg_item+0x28>
	cfg->value[type] = value;
   21c96:	2206      	movs	r2, #6
	return 0;
   21c98:	2000      	movs	r0, #0
	cfg->value[type] = value;
   21c9a:	fb02 1303 	mla	r3, r2, r3, r1
   21c9e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   21ca2:	e9c3 6702 	strd	r6, r7, [r3, #8]
						      value);
		}
	}

	return -ENOTSUP;
}
   21ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   21ca8:	3301      	adds	r3, #1
   21caa:	2b08      	cmp	r3, #8
   21cac:	d1ee      	bne.n	21c8c <cloud_set_chan_cfg_item+0xc>
	return -ENOTSUP;
   21cae:	f06f 0085 	mvn.w	r0, #133	; 0x85
   21cb2:	e7f8      	b.n	21ca6 <cloud_set_chan_cfg_item+0x26>
   21cb4:	20031b20 	.word	0x20031b20

00021cb8 <cloud_cmd_handle_sensor_set_chan_cfg>:

static int cloud_cmd_handle_sensor_set_chan_cfg(struct cloud_command const *const cmd)
{
	int err = -ENOTSUP;

	if ((cmd == NULL) || (cmd->group != CLOUD_CMD_GROUP_CFG_SET)) {
   21cb8:	7803      	ldrb	r3, [r0, #0]
{
   21cba:	b570      	push	{r4, r5, r6, lr}
	if ((cmd == NULL) || (cmd->group != CLOUD_CMD_GROUP_CFG_SET)) {
   21cbc:	2b08      	cmp	r3, #8
{
   21cbe:	4604      	mov	r4, r0
	if ((cmd == NULL) || (cmd->group != CLOUD_CMD_GROUP_CFG_SET)) {
   21cc0:	d147      	bne.n	21d52 <cloud_cmd_handle_sensor_set_chan_cfg+0x9a>
		return -EINVAL;
	}

	switch (cmd->type) {
   21cc2:	7883      	ldrb	r3, [r0, #2]
   21cc4:	2b02      	cmp	r3, #2
   21cc6:	d012      	beq.n	21cee <cloud_cmd_handle_sensor_set_chan_cfg+0x36>
   21cc8:	2b03      	cmp	r3, #3
   21cca:	d02b      	beq.n	21d24 <cloud_cmd_handle_sensor_set_chan_cfg+0x6c>
   21ccc:	2b01      	cmp	r3, #1
   21cce:	d143      	bne.n	21d58 <cloud_cmd_handle_sensor_set_chan_cfg+0xa0>
	case CLOUD_CMD_ENABLE:
		err = cloud_set_chan_cfg_item(
   21cd0:	f994 3010 	ldrsb.w	r3, [r4, #16]
   21cd4:	2200      	movs	r2, #0
   21cd6:	2b01      	cmp	r3, #1
   21cd8:	bf18      	it	ne
   21cda:	2300      	movne	r3, #0
   21cdc:	f04f 0100 	mov.w	r1, #0
   21ce0:	7840      	ldrb	r0, [r0, #1]
   21ce2:	bf08      	it	eq
   21ce4:	4b1e      	ldreq	r3, [pc, #120]	; (21d60 <cloud_cmd_handle_sensor_set_chan_cfg+0xa8>)
	default:
		break;
	}

	return err;
}
   21ce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			err = cloud_set_chan_cfg_item(
   21cea:	f7ff bfc9 	b.w	21c80 <cloud_set_chan_cfg_item>
		if (cmd->data.sv.state == CLOUD_CMD_STATE_UNDEFINED) {
   21cee:	f990 3010 	ldrsb.w	r3, [r0, #16]
   21cf2:	7840      	ldrb	r0, [r0, #1]
   21cf4:	1c59      	adds	r1, r3, #1
   21cf6:	d10d      	bne.n	21d14 <cloud_cmd_handle_sensor_set_chan_cfg+0x5c>
			err = cloud_set_chan_cfg_item(
   21cf8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   21cfc:	2103      	movs	r1, #3
   21cfe:	f7ff ffbf 	bl	21c80 <cloud_set_chan_cfg_item>
			cloud_set_chan_cfg_item(
   21d02:	2200      	movs	r2, #0
			err = cloud_set_chan_cfg_item(
   21d04:	4605      	mov	r5, r0
			cloud_set_chan_cfg_item(
   21d06:	2104      	movs	r1, #4
   21d08:	4b15      	ldr	r3, [pc, #84]	; (21d60 <cloud_cmd_handle_sensor_set_chan_cfg+0xa8>)
			cloud_set_chan_cfg_item(
   21d0a:	7860      	ldrb	r0, [r4, #1]
   21d0c:	f7ff ffb8 	bl	21c80 <cloud_set_chan_cfg_item>
}
   21d10:	4628      	mov	r0, r5
   21d12:	bd70      	pop	{r4, r5, r6, pc}
			err = cloud_set_chan_cfg_item(
   21d14:	2b01      	cmp	r3, #1
   21d16:	f04f 0200 	mov.w	r2, #0
   21d1a:	bf14      	ite	ne
   21d1c:	2300      	movne	r3, #0
   21d1e:	4b10      	ldreq	r3, [pc, #64]	; (21d60 <cloud_cmd_handle_sensor_set_chan_cfg+0xa8>)
   21d20:	2104      	movs	r1, #4
   21d22:	e7e0      	b.n	21ce6 <cloud_cmd_handle_sensor_set_chan_cfg+0x2e>
		if (cmd->data.sv.state == CLOUD_CMD_STATE_UNDEFINED) {
   21d24:	f990 3010 	ldrsb.w	r3, [r0, #16]
   21d28:	7840      	ldrb	r0, [r0, #1]
   21d2a:	1c5a      	adds	r2, r3, #1
   21d2c:	d109      	bne.n	21d42 <cloud_cmd_handle_sensor_set_chan_cfg+0x8a>
			err = cloud_set_chan_cfg_item(
   21d2e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   21d32:	2101      	movs	r1, #1
   21d34:	f7ff ffa4 	bl	21c80 <cloud_set_chan_cfg_item>
			cloud_set_chan_cfg_item(
   21d38:	2200      	movs	r2, #0
			err = cloud_set_chan_cfg_item(
   21d3a:	4605      	mov	r5, r0
			cloud_set_chan_cfg_item(
   21d3c:	4b08      	ldr	r3, [pc, #32]	; (21d60 <cloud_cmd_handle_sensor_set_chan_cfg+0xa8>)
   21d3e:	2102      	movs	r1, #2
   21d40:	e7e3      	b.n	21d0a <cloud_cmd_handle_sensor_set_chan_cfg+0x52>
			err = cloud_set_chan_cfg_item(
   21d42:	2b01      	cmp	r3, #1
   21d44:	f04f 0200 	mov.w	r2, #0
   21d48:	bf14      	ite	ne
   21d4a:	2300      	movne	r3, #0
   21d4c:	4b04      	ldreq	r3, [pc, #16]	; (21d60 <cloud_cmd_handle_sensor_set_chan_cfg+0xa8>)
   21d4e:	2102      	movs	r1, #2
   21d50:	e7c9      	b.n	21ce6 <cloud_cmd_handle_sensor_set_chan_cfg+0x2e>
		return -EINVAL;
   21d52:	f06f 0515 	mvn.w	r5, #21
   21d56:	e7db      	b.n	21d10 <cloud_cmd_handle_sensor_set_chan_cfg+0x58>
	int err = -ENOTSUP;
   21d58:	f06f 0585 	mvn.w	r5, #133	; 0x85
   21d5c:	e7d8      	b.n	21d10 <cloud_cmd_handle_sensor_set_chan_cfg+0x58>
   21d5e:	bf00      	nop
   21d60:	3ff00000 	.word	0x3ff00000

00021d64 <cloud_cmd_parse_type>:
{
   21d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21d68:	460f      	mov	r7, r1
   21d6a:	4614      	mov	r4, r2
	if ((type_cmd == NULL) || (parsed_cmd == NULL)) {
   21d6c:	4606      	mov	r6, r0
   21d6e:	2800      	cmp	r0, #0
   21d70:	f000 8084 	beq.w	21e7c <cloud_cmd_parse_type+0x118>
	if (type_obj != NULL) {
   21d74:	7903      	ldrb	r3, [r0, #4]
   21d76:	2900      	cmp	r1, #0
   21d78:	d07e      	beq.n	21e78 <cloud_cmd_parse_type+0x114>
		if (type_cmd->type != CLOUD_CMD_DATA_STRING) {
   21d7a:	2b07      	cmp	r3, #7
   21d7c:	d077      	beq.n	21e6e <cloud_cmd_parse_type+0x10a>
			decoded_obj = json_object_decode(type_obj,
   21d7e:	4a4a      	ldr	r2, [pc, #296]	; (21ea8 <cloud_cmd_parse_type+0x144>)
   21d80:	4638      	mov	r0, r7
   21d82:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   21d86:	f01b fd9f 	bl	3d8c8 <json_object_decode>
			if (!decoded_obj) {
   21d8a:	4605      	mov	r5, r0
   21d8c:	2800      	cmp	r0, #0
   21d8e:	f000 8085 	beq.w	21e9c <cloud_cmd_parse_type+0x138>
		switch (type_cmd->type) {
   21d92:	7933      	ldrb	r3, [r6, #4]
   21d94:	3b01      	subs	r3, #1
   21d96:	2b06      	cmp	r3, #6
   21d98:	f200 8083 	bhi.w	21ea2 <cloud_cmd_parse_type+0x13e>
   21d9c:	e8df f003 	tbb	[pc, r3]
   21da0:	2f2f2f04 	.word	0x2f2f2f04
   21da4:	4f3f      	.short	0x4f3f
   21da6:	67          	.byte	0x67
   21da7:	00          	.byte	0x00
			if (cJSON_IsNull(decoded_obj)) {
   21da8:	f01d fac6 	bl	3f338 <cJSON_IsNull>
   21dac:	b1b8      	cbz	r0, 21dde <cloud_cmd_parse_type+0x7a>
				parsed_cmd->data.sv.state =
   21dae:	2300      	movs	r3, #0
   21db0:	7423      	strb	r3, [r4, #16]
	if ((type_cmd->type == CLOUD_CMD_INTERVAL) &&
   21db2:	7935      	ldrb	r5, [r6, #4]
   21db4:	2d04      	cmp	r5, #4
   21db6:	d10f      	bne.n	21dd8 <cloud_cmd_parse_type+0x74>
   21db8:	f994 3010 	ldrsb.w	r3, [r4, #16]
   21dbc:	3301      	adds	r3, #1
   21dbe:	d10b      	bne.n	21dd8 <cloud_cmd_parse_type+0x74>
		if (parsed_cmd->data.sv.value == DISABLE_SEND_INTERVAL_VAL) {
   21dc0:	e9d4 8902 	ldrd	r8, r9, [r4, #8]
   21dc4:	2200      	movs	r2, #0
   21dc6:	2300      	movs	r3, #0
   21dc8:	4640      	mov	r0, r8
   21dca:	4649      	mov	r1, r9
   21dcc:	f7fa ff5c 	bl	1cc88 <__aeabi_dcmpeq>
   21dd0:	2800      	cmp	r0, #0
   21dd2:	d056      	beq.n	21e82 <cloud_cmd_parse_type+0x11e>
			parsed_cmd->data.sv.state = CLOUD_CMD_STATE_FALSE;
   21dd4:	2300      	movs	r3, #0
   21dd6:	7423      	strb	r3, [r4, #16]
	parsed_cmd->type = type_cmd->type;
   21dd8:	70a5      	strb	r5, [r4, #2]
	return 0;
   21dda:	2000      	movs	r0, #0
   21ddc:	e005      	b.n	21dea <cloud_cmd_parse_type+0x86>
			} else if (cJSON_IsBool(decoded_obj)) {
   21dde:	4628      	mov	r0, r5
   21de0:	f01d faa3 	bl	3f32a <cJSON_IsBool>
   21de4:	b918      	cbnz	r0, 21dee <cloud_cmd_parse_type+0x8a>
				return -ESRCH;
   21de6:	f06f 0002 	mvn.w	r0, #2
}
   21dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					cJSON_IsTrue(decoded_obj) ?
   21dee:	4628      	mov	r0, r5
   21df0:	f01d fa95 	bl	3f31e <cJSON_IsTrue>
						CLOUD_CMD_STATE_TRUE :
   21df4:	3000      	adds	r0, #0
   21df6:	bf18      	it	ne
   21df8:	2001      	movne	r0, #1
   21dfa:	7420      	strb	r0, [r4, #16]
   21dfc:	e7d9      	b.n	21db2 <cloud_cmd_parse_type+0x4e>
			if (cJSON_IsNull(decoded_obj)) {
   21dfe:	f01d fa9b 	bl	3f338 <cJSON_IsNull>
   21e02:	2800      	cmp	r0, #0
   21e04:	d1d3      	bne.n	21dae <cloud_cmd_parse_type+0x4a>
			} else if (cJSON_IsNumber(decoded_obj)) {
   21e06:	4628      	mov	r0, r5
   21e08:	f01d fa9c 	bl	3f344 <cJSON_IsNumber>
   21e0c:	2800      	cmp	r0, #0
   21e0e:	d0ea      	beq.n	21de6 <cloud_cmd_parse_type+0x82>
				parsed_cmd->data.sv.state =
   21e10:	23ff      	movs	r3, #255	; 0xff
   21e12:	7423      	strb	r3, [r4, #16]
				parsed_cmd->data.sv.value =
   21e14:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   21e18:	e9c4 2302 	strd	r2, r3, [r4, #8]
   21e1c:	e7c9      	b.n	21db2 <cloud_cmd_parse_type+0x4e>
			if (cJSON_GetStringValue(decoded_obj) == NULL) {
   21e1e:	f01d fa9f 	bl	3f360 <cJSON_GetStringValue>
   21e22:	2800      	cmp	r0, #0
   21e24:	d0df      	beq.n	21de6 <cloud_cmd_parse_type+0x82>
				cJSON_GetStringValue(decoded_obj), NULL, 16);
   21e26:	4628      	mov	r0, r5
   21e28:	f01d fa9a 	bl	3f360 <cJSON_GetStringValue>
			parsed_cmd->data.sv.value = (double)strtol(
   21e2c:	2210      	movs	r2, #16
   21e2e:	2100      	movs	r1, #0
   21e30:	f01a fab4 	bl	3c39c <strtol>
   21e34:	f7fa fc56 	bl	1c6e4 <__aeabi_i2d>
   21e38:	e9c4 0102 	strd	r0, r1, [r4, #8]
			break;
   21e3c:	e7b9      	b.n	21db2 <cloud_cmd_parse_type+0x4e>
	if (!cJSON_IsObject(data_obj)) {
   21e3e:	f01d fa96 	bl	3f36e <cJSON_IsObject>
   21e42:	2800      	cmp	r0, #0
   21e44:	d0cf      	beq.n	21de6 <cloud_cmd_parse_type+0x82>
	blob = json_object_decode(data_obj, MODEM_PARAM_BLOB_KEY_STR);
   21e46:	4919      	ldr	r1, [pc, #100]	; (21eac <cloud_cmd_parse_type+0x148>)
   21e48:	4628      	mov	r0, r5
   21e4a:	f01b fd3d 	bl	3d8c8 <json_object_decode>
	params->blob = cJSON_GetStringValue(blob);
   21e4e:	f01d fa87 	bl	3f360 <cJSON_GetStringValue>
	checksum = json_object_decode(data_obj, MODEM_PARAM_CHECKSUM_KEY_STR);
   21e52:	4917      	ldr	r1, [pc, #92]	; (21eb0 <cloud_cmd_parse_type+0x14c>)
	params->blob = cJSON_GetStringValue(blob);
   21e54:	60a0      	str	r0, [r4, #8]
	checksum = json_object_decode(data_obj, MODEM_PARAM_CHECKSUM_KEY_STR);
   21e56:	4628      	mov	r0, r5
   21e58:	f01b fd36 	bl	3d8c8 <json_object_decode>
	params->checksum = cJSON_GetStringValue(checksum);
   21e5c:	f01d fa80 	bl	3f360 <cJSON_GetStringValue>
			-ESRCH : 0);
   21e60:	68a3      	ldr	r3, [r4, #8]
	params->checksum = cJSON_GetStringValue(checksum);
   21e62:	60e0      	str	r0, [r4, #12]
			-ESRCH : 0);
   21e64:	2b00      	cmp	r3, #0
   21e66:	d0be      	beq.n	21de6 <cloud_cmd_parse_type+0x82>
			if (parsed_cmd->data.data_string == NULL) {
   21e68:	2800      	cmp	r0, #0
   21e6a:	d1a2      	bne.n	21db2 <cloud_cmd_parse_type+0x4e>
   21e6c:	e7bb      	b.n	21de6 <cloud_cmd_parse_type+0x82>
				cJSON_GetStringValue(type_obj);
   21e6e:	4638      	mov	r0, r7
   21e70:	f01d fa76 	bl	3f360 <cJSON_GetStringValue>
			parsed_cmd->data.data_string =
   21e74:	60a0      	str	r0, [r4, #8]
   21e76:	e7f7      	b.n	21e68 <cloud_cmd_parse_type+0x104>
	} else if (type_cmd->type != CLOUD_CMD_EMPTY) {
   21e78:	2b00      	cmp	r3, #0
   21e7a:	d09a      	beq.n	21db2 <cloud_cmd_parse_type+0x4e>
		return -EINVAL;
   21e7c:	f06f 0015 	mvn.w	r0, #21
   21e80:	e7b3      	b.n	21dea <cloud_cmd_parse_type+0x86>
		} else if (parsed_cmd->data.sv.value <
   21e82:	2600      	movs	r6, #0
   21e84:	4f0b      	ldr	r7, [pc, #44]	; (21eb4 <cloud_cmd_parse_type+0x150>)
   21e86:	4632      	mov	r2, r6
   21e88:	463b      	mov	r3, r7
   21e8a:	4640      	mov	r0, r8
   21e8c:	4649      	mov	r1, r9
   21e8e:	f7fa ff05 	bl	1cc9c <__aeabi_dcmplt>
   21e92:	2800      	cmp	r0, #0
   21e94:	d0a0      	beq.n	21dd8 <cloud_cmd_parse_type+0x74>
			parsed_cmd->data.sv.value = MIN_INTERVAL_VAL_SECONDS;
   21e96:	e9c4 6702 	strd	r6, r7, [r4, #8]
   21e9a:	e79d      	b.n	21dd8 <cloud_cmd_parse_type+0x74>
				return -ENOENT; /* Command not found */
   21e9c:	f06f 0001 	mvn.w	r0, #1
   21ea0:	e7a3      	b.n	21dea <cloud_cmd_parse_type+0x86>
			return -ENOTSUP;
   21ea2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   21ea6:	e7a0      	b.n	21dea <cloud_cmd_parse_type+0x86>
   21ea8:	00041fa0 	.word	0x00041fa0
   21eac:	000438b1 	.word	0x000438b1
   21eb0:	000438b6 	.word	0x000438b6
   21eb4:	40140000 	.word	0x40140000

00021eb8 <cloud_encode_data>:
{
   21eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21ebc:	4688      	mov	r8, r1
   21ebe:	4617      	mov	r7, r2
	if (channel == NULL || channel->data.buf == NULL ||
   21ec0:	4606      	mov	r6, r0
   21ec2:	2800      	cmp	r0, #0
   21ec4:	d04f      	beq.n	21f66 <cloud_encode_data+0xae>
   21ec6:	6843      	ldr	r3, [r0, #4]
   21ec8:	2b00      	cmp	r3, #0
   21eca:	d04c      	beq.n	21f66 <cloud_encode_data+0xae>
   21ecc:	6883      	ldr	r3, [r0, #8]
   21ece:	2b00      	cmp	r3, #0
   21ed0:	d049      	beq.n	21f66 <cloud_encode_data+0xae>
	    channel->data.len == 0 || output == NULL ||
   21ed2:	2a00      	cmp	r2, #0
   21ed4:	d047      	beq.n	21f66 <cloud_encode_data+0xae>
   21ed6:	290a      	cmp	r1, #10
   21ed8:	d845      	bhi.n	21f66 <cloud_encode_data+0xae>
	cJSON *root_obj = cJSON_CreateObject();
   21eda:	f004 ffb7 	bl	26e4c <cJSON_CreateObject>
	if (root_obj == NULL) {
   21ede:	4605      	mov	r5, r0
   21ee0:	b930      	cbnz	r0, 21ef0 <cloud_encode_data+0x38>
		cJSON_Delete(root_obj);
   21ee2:	f004 feef 	bl	26cc4 <cJSON_Delete>
		return -ENOMEM;
   21ee6:	f06f 040b 	mvn.w	r4, #11
}
   21eea:	4620      	mov	r0, r4
   21eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			   channel_type_str[channel->type]);
   21ef0:	7832      	ldrb	r2, [r6, #0]
	json_str = cJSON_CreateString(item);
   21ef2:	4b1e      	ldr	r3, [pc, #120]	; (21f6c <cloud_encode_data+0xb4>)
   21ef4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   21ef8:	f004 ff84 	bl	26e04 <cJSON_CreateString>
	if (json_str == NULL) {
   21efc:	4602      	mov	r2, r0
   21efe:	b1c8      	cbz	r0, 21f34 <cloud_encode_data+0x7c>
	cJSON_AddItemToObject(parent, str, item);
   21f00:	491b      	ldr	r1, [pc, #108]	; (21f70 <cloud_encode_data+0xb8>)
   21f02:	4628      	mov	r0, r5
   21f04:	f01d f9ea 	bl	3f2dc <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   21f08:	f04f 0900 	mov.w	r9, #0
	json_str = cJSON_CreateString(item);
   21f0c:	6870      	ldr	r0, [r6, #4]
   21f0e:	f004 ff79 	bl	26e04 <cJSON_CreateString>
	if (json_str == NULL) {
   21f12:	4602      	mov	r2, r0
   21f14:	b188      	cbz	r0, 21f3a <cloud_encode_data+0x82>
	cJSON_AddItemToObject(parent, str, item);
   21f16:	4917      	ldr	r1, [pc, #92]	; (21f74 <cloud_encode_data+0xbc>)
   21f18:	4628      	mov	r0, r5
   21f1a:	f01d f9df 	bl	3f2dc <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   21f1e:	2400      	movs	r4, #0
	ret += json_add_str(root_obj, CMD_GROUP_KEY_STR, cmd_group_str[group]);
   21f20:	4b15      	ldr	r3, [pc, #84]	; (21f78 <cloud_encode_data+0xc0>)
	ret += json_add_str(root_obj, CMD_DATA_TYPE_KEY_STR, channel->data.buf);
   21f22:	444c      	add	r4, r9
	json_str = cJSON_CreateString(item);
   21f24:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
   21f28:	f004 ff6c 	bl	26e04 <cJSON_CreateString>
	if (json_str == NULL) {
   21f2c:	4602      	mov	r2, r0
   21f2e:	b938      	cbnz	r0, 21f40 <cloud_encode_data+0x88>
		cJSON_Delete(root_obj);
   21f30:	4628      	mov	r0, r5
   21f32:	e7d6      	b.n	21ee2 <cloud_encode_data+0x2a>
		return -ENOMEM;
   21f34:	f06f 090b 	mvn.w	r9, #11
   21f38:	e7e8      	b.n	21f0c <cloud_encode_data+0x54>
   21f3a:	f06f 040b 	mvn.w	r4, #11
   21f3e:	e7ef      	b.n	21f20 <cloud_encode_data+0x68>
	cJSON_AddItemToObject(parent, str, item);
   21f40:	490e      	ldr	r1, [pc, #56]	; (21f7c <cloud_encode_data+0xc4>)
   21f42:	4628      	mov	r0, r5
   21f44:	f01d f9ca 	bl	3f2dc <cJSON_AddItemToObject>
	if (ret != 0) {
   21f48:	2c00      	cmp	r4, #0
   21f4a:	d1f1      	bne.n	21f30 <cloud_encode_data+0x78>
	buffer = cJSON_PrintUnformatted(root_obj);
   21f4c:	4628      	mov	r0, r5
   21f4e:	f01d f9ab 	bl	3f2a8 <cJSON_PrintUnformatted>
   21f52:	4606      	mov	r6, r0
	cJSON_Delete(root_obj);
   21f54:	4628      	mov	r0, r5
   21f56:	f004 feb5 	bl	26cc4 <cJSON_Delete>
	output->buf = buffer;
   21f5a:	603e      	str	r6, [r7, #0]
	output->len = strlen(buffer);
   21f5c:	4630      	mov	r0, r6
   21f5e:	f7fb f8e1 	bl	1d124 <strlen>
   21f62:	6078      	str	r0, [r7, #4]
	return 0;
   21f64:	e7c1      	b.n	21eea <cloud_encode_data+0x32>
		return -EINVAL;
   21f66:	f06f 0415 	mvn.w	r4, #21
   21f6a:	e7be      	b.n	21eea <cloud_encode_data+0x32>
   21f6c:	00041f20 	.word	0x00041f20
   21f70:	00043981 	.word	0x00043981
   21f74:	000430e4 	.word	0x000430e4
   21f78:	00041f74 	.word	0x00041f74
   21f7c:	00043987 	.word	0x00043987

00021f80 <cloud_encode_env_sensors_data>:
{
   21f80:	b570      	push	{r4, r5, r6, lr}
   21f82:	460d      	mov	r5, r1
   21f84:	b088      	sub	sp, #32
	__ASSERT_NO_MSG(sensor_data != NULL);
   21f86:	4604      	mov	r4, r0
   21f88:	b958      	cbnz	r0, 21fa2 <cloud_encode_env_sensors_data+0x22>
   21f8a:	4920      	ldr	r1, [pc, #128]	; (2200c <cloud_encode_env_sensors_data+0x8c>)
   21f8c:	4820      	ldr	r0, [pc, #128]	; (22010 <cloud_encode_env_sensors_data+0x90>)
   21f8e:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   21f92:	4a20      	ldr	r2, [pc, #128]	; (22014 <cloud_encode_env_sensors_data+0x94>)
   21f94:	f01b ff81 	bl	3de9a <printk>
   21f98:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   21f9c:	481d      	ldr	r0, [pc, #116]	; (22014 <cloud_encode_env_sensors_data+0x94>)
   21f9e:	f01b ffcf 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   21fa2:	b95d      	cbnz	r5, 21fbc <cloud_encode_env_sensors_data+0x3c>
   21fa4:	491c      	ldr	r1, [pc, #112]	; (22018 <cloud_encode_env_sensors_data+0x98>)
   21fa6:	481a      	ldr	r0, [pc, #104]	; (22010 <cloud_encode_env_sensors_data+0x90>)
   21fa8:	f240 135b 	movw	r3, #347	; 0x15b
   21fac:	4a19      	ldr	r2, [pc, #100]	; (22014 <cloud_encode_env_sensors_data+0x94>)
   21fae:	f01b ff74 	bl	3de9a <printk>
   21fb2:	f240 115b 	movw	r1, #347	; 0x15b
   21fb6:	4817      	ldr	r0, [pc, #92]	; (22014 <cloud_encode_env_sensors_data+0x94>)
   21fb8:	f01b ffc2 	bl	3df40 <assert_post_action>
	switch (sensor_data->type) {
   21fbc:	7823      	ldrb	r3, [r4, #0]
   21fbe:	2b03      	cmp	r3, #3
   21fc0:	d820      	bhi.n	22004 <cloud_encode_env_sensors_data+0x84>
   21fc2:	e8df f003 	tbb	[pc, r3]
   21fc6:	1902      	.short	0x1902
   21fc8:	1d1b      	.short	0x1d1b
		cloud_sensor.type = CLOUD_CHANNEL_TEMP;
   21fca:	2308      	movs	r3, #8
	len = snprintf(buf, sizeof(buf), "%.1f",
   21fcc:	ae02      	add	r6, sp, #8
		cloud_sensor.type = CLOUD_CHANNEL_AIR_QUAL;
   21fce:	f88d 3010 	strb.w	r3, [sp, #16]
	len = snprintf(buf, sizeof(buf), "%.1f",
   21fd2:	2106      	movs	r1, #6
   21fd4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   21fd8:	4630      	mov	r0, r6
   21fda:	e9cd 2300 	strd	r2, r3, [sp]
   21fde:	4a0f      	ldr	r2, [pc, #60]	; (2201c <cloud_encode_env_sensors_data+0x9c>)
   21fe0:	f01a f8fa 	bl	3c1d8 <sniprintf>
	cloud_sensor.data.len = len;
   21fe4:	b2c0      	uxtb	r0, r0
   21fe6:	9006      	str	r0, [sp, #24]
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   21fe8:	462a      	mov	r2, r5
   21fea:	2106      	movs	r1, #6
   21fec:	a804      	add	r0, sp, #16
	cloud_sensor.data.buf = buf;
   21fee:	9605      	str	r6, [sp, #20]
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   21ff0:	f7ff ff62 	bl	21eb8 <cloud_encode_data>
}
   21ff4:	b008      	add	sp, #32
   21ff6:	bd70      	pop	{r4, r5, r6, pc}
		cloud_sensor.type = CLOUD_CHANNEL_HUMID;
   21ff8:	2309      	movs	r3, #9
   21ffa:	e7e7      	b.n	21fcc <cloud_encode_env_sensors_data+0x4c>
		cloud_sensor.type = CLOUD_CHANNEL_AIR_PRESS;
   21ffc:	230a      	movs	r3, #10
   21ffe:	e7e5      	b.n	21fcc <cloud_encode_env_sensors_data+0x4c>
		cloud_sensor.type = CLOUD_CHANNEL_AIR_QUAL;
   22000:	230b      	movs	r3, #11
   22002:	e7e3      	b.n	21fcc <cloud_encode_env_sensors_data+0x4c>
		return -1;
   22004:	f04f 30ff 	mov.w	r0, #4294967295
   22008:	e7f4      	b.n	21ff4 <cloud_encode_env_sensors_data+0x74>
   2200a:	bf00      	nop
   2200c:	00043a10 	.word	0x00043a10
   22010:	00043278 	.word	0x00043278
   22014:	000439ef 	.word	0x000439ef
   22018:	00043a2b 	.word	0x00043a2b
   2201c:	00043a41 	.word	0x00043a41

00022020 <cloud_encode_motion_data>:
{
   22020:	b530      	push	{r4, r5, lr}
   22022:	460c      	mov	r4, r1
   22024:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(motion_data != NULL);
   22026:	4605      	mov	r5, r0
   22028:	b958      	cbnz	r0, 22042 <cloud_encode_motion_data+0x22>
   2202a:	4918      	ldr	r1, [pc, #96]	; (2208c <cloud_encode_motion_data+0x6c>)
   2202c:	4818      	ldr	r0, [pc, #96]	; (22090 <cloud_encode_motion_data+0x70>)
   2202e:	f240 1381 	movw	r3, #385	; 0x181
   22032:	4a18      	ldr	r2, [pc, #96]	; (22094 <cloud_encode_motion_data+0x74>)
   22034:	f01b ff31 	bl	3de9a <printk>
   22038:	f240 1181 	movw	r1, #385	; 0x181
   2203c:	4815      	ldr	r0, [pc, #84]	; (22094 <cloud_encode_motion_data+0x74>)
   2203e:	f01b ff7f 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   22042:	b95c      	cbnz	r4, 2205c <cloud_encode_motion_data+0x3c>
   22044:	4914      	ldr	r1, [pc, #80]	; (22098 <cloud_encode_motion_data+0x78>)
   22046:	4812      	ldr	r0, [pc, #72]	; (22090 <cloud_encode_motion_data+0x70>)
   22048:	f44f 73c1 	mov.w	r3, #386	; 0x182
   2204c:	4a11      	ldr	r2, [pc, #68]	; (22094 <cloud_encode_motion_data+0x74>)
   2204e:	f01b ff24 	bl	3de9a <printk>
   22052:	f44f 71c1 	mov.w	r1, #386	; 0x182
   22056:	480f      	ldr	r0, [pc, #60]	; (22094 <cloud_encode_motion_data+0x74>)
   22058:	f01b ff72 	bl	3df40 <assert_post_action>
	cloud_sensor.type = CLOUD_CHANNEL_FLIP;
   2205c:	2301      	movs	r3, #1
   2205e:	f88d 3000 	strb.w	r3, [sp]
	switch (motion_data->orientation) {
   22062:	782b      	ldrb	r3, [r5, #0]
   22064:	2b01      	cmp	r3, #1
   22066:	d005      	beq.n	22074 <cloud_encode_motion_data+0x54>
   22068:	2b02      	cmp	r3, #2
   2206a:	d00d      	beq.n	22088 <cloud_encode_motion_data+0x68>
		return -1;
   2206c:	f04f 30ff 	mov.w	r0, #4294967295
}
   22070:	b005      	add	sp, #20
   22072:	bd30      	pop	{r4, r5, pc}
		cloud_sensor.data.buf = "NORMAL";
   22074:	4b09      	ldr	r3, [pc, #36]	; (2209c <cloud_encode_motion_data+0x7c>)
		cloud_sensor.data.buf = "UPSIDE_DOWN";
   22076:	9301      	str	r3, [sp, #4]
	cloud_sensor.data.len = sizeof(cloud_sensor.data.buf) - 1;
   22078:	2303      	movs	r3, #3
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   2207a:	4622      	mov	r2, r4
   2207c:	2106      	movs	r1, #6
   2207e:	4668      	mov	r0, sp
	cloud_sensor.data.len = sizeof(cloud_sensor.data.buf) - 1;
   22080:	9302      	str	r3, [sp, #8]
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   22082:	f7ff ff19 	bl	21eb8 <cloud_encode_data>
   22086:	e7f3      	b.n	22070 <cloud_encode_motion_data+0x50>
		cloud_sensor.data.buf = "UPSIDE_DOWN";
   22088:	4b05      	ldr	r3, [pc, #20]	; (220a0 <cloud_encode_motion_data+0x80>)
   2208a:	e7f4      	b.n	22076 <cloud_encode_motion_data+0x56>
   2208c:	00043a46 	.word	0x00043a46
   22090:	00043278 	.word	0x00043278
   22094:	000439ef 	.word	0x000439ef
   22098:	00043a2b 	.word	0x00043a2b
   2209c:	00043a61 	.word	0x00043a61
   220a0:	00043a68 	.word	0x00043a68

000220a4 <cloud_encode_device_status_data>:
{
   220a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   220a8:	4680      	mov	r8, r0
   220aa:	b085      	sub	sp, #20
   220ac:	4692      	mov	sl, r2
   220ae:	469b      	mov	fp, r3
	__ASSERT_NO_MSG((ui != NULL) || !ui_count);
   220b0:	4689      	mov	r9, r1
   220b2:	b961      	cbnz	r1, 220ce <cloud_encode_device_status_data+0x2a>
   220b4:	b15a      	cbz	r2, 220ce <cloud_encode_device_status_data+0x2a>
   220b6:	495a      	ldr	r1, [pc, #360]	; (22220 <cloud_encode_device_status_data+0x17c>)
   220b8:	485a      	ldr	r0, [pc, #360]	; (22224 <cloud_encode_device_status_data+0x180>)
   220ba:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   220be:	4a5a      	ldr	r2, [pc, #360]	; (22228 <cloud_encode_device_status_data+0x184>)
   220c0:	f01b feeb 	bl	3de9a <printk>
   220c4:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   220c8:	4857      	ldr	r0, [pc, #348]	; (22228 <cloud_encode_device_status_data+0x184>)
   220ca:	f01b ff39 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG((fota != NULL) || !fota_count);
   220ce:	f1bb 0f00 	cmp.w	fp, #0
   220d2:	d10d      	bne.n	220f0 <cloud_encode_device_status_data+0x4c>
   220d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   220d6:	b15b      	cbz	r3, 220f0 <cloud_encode_device_status_data+0x4c>
   220d8:	4954      	ldr	r1, [pc, #336]	; (2222c <cloud_encode_device_status_data+0x188>)
   220da:	4852      	ldr	r0, [pc, #328]	; (22224 <cloud_encode_device_status_data+0x180>)
   220dc:	f240 13d1 	movw	r3, #465	; 0x1d1
   220e0:	4a51      	ldr	r2, [pc, #324]	; (22228 <cloud_encode_device_status_data+0x184>)
   220e2:	f01b feda 	bl	3de9a <printk>
   220e6:	f240 11d1 	movw	r1, #465	; 0x1d1
   220ea:	484f      	ldr	r0, [pc, #316]	; (22228 <cloud_encode_device_status_data+0x184>)
   220ec:	f01b ff28 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   220f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   220f2:	b95b      	cbnz	r3, 2210c <cloud_encode_device_status_data+0x68>
   220f4:	494e      	ldr	r1, [pc, #312]	; (22230 <cloud_encode_device_status_data+0x18c>)
   220f6:	484b      	ldr	r0, [pc, #300]	; (22224 <cloud_encode_device_status_data+0x180>)
   220f8:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   220fc:	4a4a      	ldr	r2, [pc, #296]	; (22228 <cloud_encode_device_status_data+0x184>)
   220fe:	f01b fecc 	bl	3de9a <printk>
   22102:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   22106:	4848      	ldr	r0, [pc, #288]	; (22228 <cloud_encode_device_status_data+0x184>)
   22108:	f01b ff1a 	bl	3df40 <assert_post_action>
	cJSON *root_obj = cJSON_CreateObject();
   2210c:	f004 fe9e 	bl	26e4c <cJSON_CreateObject>
   22110:	4606      	mov	r6, r0
	cJSON *state_obj = cJSON_CreateObject();
   22112:	f004 fe9b 	bl	26e4c <cJSON_CreateObject>
   22116:	4607      	mov	r7, r0
	cJSON *reported_obj = cJSON_CreateObject();
   22118:	f004 fe98 	bl	26e4c <cJSON_CreateObject>
   2211c:	4605      	mov	r5, r0
	cJSON *device_obj = cJSON_CreateObject();
   2211e:	f004 fe95 	bl	26e4c <cJSON_CreateObject>
	char dev_str[] = CLOUD_CHANNEL_STR_DEVICE_INFO;
   22122:	4b44      	ldr	r3, [pc, #272]	; (22234 <cloud_encode_device_status_data+0x190>)
	cJSON *device_obj = cJSON_CreateObject();
   22124:	4604      	mov	r4, r0
	char dev_str[] = CLOUD_CHANNEL_STR_DEVICE_INFO;
   22126:	889a      	ldrh	r2, [r3, #4]
   22128:	6818      	ldr	r0, [r3, #0]
   2212a:	799b      	ldrb	r3, [r3, #6]
   2212c:	9002      	str	r0, [sp, #8]
   2212e:	f8ad 200c 	strh.w	r2, [sp, #12]
   22132:	f88d 300e 	strb.w	r3, [sp, #14]
	if (root_obj == NULL || state_obj == NULL ||
   22136:	b116      	cbz	r6, 2213e <cloud_encode_device_status_data+0x9a>
   22138:	b10f      	cbz	r7, 2213e <cloud_encode_device_status_data+0x9a>
   2213a:	b105      	cbz	r5, 2213e <cloud_encode_device_status_data+0x9a>
	    reported_obj == NULL || device_obj == NULL) {
   2213c:	b984      	cbnz	r4, 22160 <cloud_encode_device_status_data+0xbc>
		cJSON_Delete(root_obj);
   2213e:	4630      	mov	r0, r6
   22140:	f004 fdc0 	bl	26cc4 <cJSON_Delete>
		cJSON_Delete(state_obj);
   22144:	4638      	mov	r0, r7
   22146:	f004 fdbd 	bl	26cc4 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   2214a:	4628      	mov	r0, r5
   2214c:	f004 fdba 	bl	26cc4 <cJSON_Delete>
		cJSON_Delete(device_obj);
   22150:	4620      	mov	r0, r4
   22152:	f004 fdb7 	bl	26cc4 <cJSON_Delete>
		return -ENOMEM;
   22156:	f06f 000b 	mvn.w	r0, #11
}
   2215a:	b005      	add	sp, #20
   2215c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cJSON *dummy_obj = cJSON_CreateNull();
   22160:	f004 fe44 	bl	26dec <cJSON_CreateNull>
	if (dummy_obj == NULL) {
   22164:	4602      	mov	r2, r0
   22166:	b118      	cbz	r0, 22170 <cloud_encode_device_status_data+0xcc>
	cJSON_AddItemToObject(parent, str, item);
   22168:	a902      	add	r1, sp, #8
   2216a:	4628      	mov	r0, r5
   2216c:	f01d f8b6 	bl	3f2dc <cJSON_AddItemToObject>
		dev_str[i] = tolower(dev_str[i]);
   22170:	4831      	ldr	r0, [pc, #196]	; (22238 <cloud_encode_device_status_data+0x194>)
   22172:	aa02      	add	r2, sp, #8
	for (int i = 0; dev_str[i]; ++i) {
   22174:	f812 3b01 	ldrb.w	r3, [r2], #1
   22178:	bb8b      	cbnz	r3, 221de <cloud_encode_device_status_data+0x13a>
	if (modem_param) {
   2217a:	f1b8 0f00 	cmp.w	r8, #0
   2217e:	d137      	bne.n	221f0 <cloud_encode_device_status_data+0x14c>
	size_t item_cnt = 0;
   22180:	f04f 0800 	mov.w	r8, #0
	if (service_info_json_object_encode(ui, ui_count,
   22184:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   22188:	9401      	str	r4, [sp, #4]
   2218a:	9300      	str	r3, [sp, #0]
   2218c:	465a      	mov	r2, fp
   2218e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22190:	4651      	mov	r1, sl
   22192:	4648      	mov	r0, r9
   22194:	f000 fa3e 	bl	22614 <service_info_json_object_encode>
   22198:	b110      	cbz	r0, 221a0 <cloud_encode_device_status_data+0xfc>
	if (item_cnt != 0) {
   2219a:	f1b8 0f00 	cmp.w	r8, #0
   2219e:	d02f      	beq.n	22200 <cloud_encode_device_status_data+0x15c>
	cJSON_AddItemToObject(parent, str, item);
   221a0:	4622      	mov	r2, r4
   221a2:	a902      	add	r1, sp, #8
   221a4:	4628      	mov	r0, r5
   221a6:	f01d f899 	bl	3f2dc <cJSON_AddItemToObject>
   221aa:	462a      	mov	r2, r5
   221ac:	4923      	ldr	r1, [pc, #140]	; (2223c <cloud_encode_device_status_data+0x198>)
   221ae:	4638      	mov	r0, r7
   221b0:	f01d f894 	bl	3f2dc <cJSON_AddItemToObject>
   221b4:	463a      	mov	r2, r7
   221b6:	4922      	ldr	r1, [pc, #136]	; (22240 <cloud_encode_device_status_data+0x19c>)
   221b8:	4630      	mov	r0, r6
   221ba:	f01d f88f 	bl	3f2dc <cJSON_AddItemToObject>
	buffer = cJSON_PrintUnformatted(root_obj);
   221be:	4630      	mov	r0, r6
   221c0:	f01d f872 	bl	3f2a8 <cJSON_PrintUnformatted>
   221c4:	4604      	mov	r4, r0
	cJSON_Delete(root_obj);
   221c6:	4630      	mov	r0, r6
   221c8:	f004 fd7c 	bl	26cc4 <cJSON_Delete>
	output->buf = buffer;
   221cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
	output->len = strlen(buffer);
   221ce:	4620      	mov	r0, r4
	output->buf = buffer;
   221d0:	601c      	str	r4, [r3, #0]
	output->len = strlen(buffer);
   221d2:	f7fa ffa7 	bl	1d124 <strlen>
   221d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   221d8:	6058      	str	r0, [r3, #4]
	return 0;
   221da:	2000      	movs	r0, #0
   221dc:	e7bd      	b.n	2215a <cloud_encode_device_status_data+0xb6>
		dev_str[i] = tolower(dev_str[i]);
   221de:	5cc1      	ldrb	r1, [r0, r3]
   221e0:	f001 0103 	and.w	r1, r1, #3
   221e4:	2901      	cmp	r1, #1
   221e6:	bf08      	it	eq
   221e8:	3320      	addeq	r3, #32
   221ea:	f802 3c01 	strb.w	r3, [r2, #-1]
   221ee:	e7c1      	b.n	22174 <cloud_encode_device_status_data+0xd0>
		val = modem_info_json_object_encode((struct modem_param_info *)
   221f0:	4640      	mov	r0, r8
   221f2:	4621      	mov	r1, r4
   221f4:	f007 fc18 	bl	29a28 <modem_info_json_object_encode>
		if (val > 0) {
   221f8:	f1b0 0800 	subs.w	r8, r0, #0
   221fc:	dcc2      	bgt.n	22184 <cloud_encode_device_status_data+0xe0>
   221fe:	e7bf      	b.n	22180 <cloud_encode_device_status_data+0xdc>
		cJSON_Delete(root_obj);
   22200:	4630      	mov	r0, r6
   22202:	f004 fd5f 	bl	26cc4 <cJSON_Delete>
		cJSON_Delete(state_obj);
   22206:	4638      	mov	r0, r7
   22208:	f004 fd5c 	bl	26cc4 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   2220c:	4628      	mov	r0, r5
   2220e:	f004 fd59 	bl	26cc4 <cJSON_Delete>
		cJSON_Delete(device_obj);
   22212:	4620      	mov	r0, r4
   22214:	f004 fd56 	bl	26cc4 <cJSON_Delete>
		return -EAGAIN;
   22218:	f06f 000a 	mvn.w	r0, #10
   2221c:	e79d      	b.n	2215a <cloud_encode_device_status_data+0xb6>
   2221e:	bf00      	nop
   22220:	00043993 	.word	0x00043993
   22224:	00043278 	.word	0x00043278
   22228:	000439ef 	.word	0x000439ef
   2222c:	000439b4 	.word	0x000439b4
   22230:	00043a2b 	.word	0x00043a2b
   22234:	000439e8 	.word	0x000439e8
   22238:	00049140 	.word	0x00049140
   2223c:	000439d9 	.word	0x000439d9
   22240:	000439e2 	.word	0x000439e2

00022244 <cloud_decode_command>:
{
   22244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22248:	b08f      	sub	sp, #60	; 0x3c
	if (input == NULL) {
   2224a:	2800      	cmp	r0, #0
   2224c:	f000 8163 	beq.w	22516 <cloud_decode_command+0x2d2>
	root_obj = cJSON_Parse(input);
   22250:	f01d f826 	bl	3f2a0 <cJSON_Parse>
	if (root_obj == NULL) {
   22254:	9004      	str	r0, [sp, #16]
   22256:	b9a8      	cbnz	r0, 22284 <cloud_decode_command+0x40>
		LOG_ERR("[%s:%d] Unable to parse input", __func__, __LINE__);
   22258:	2301      	movs	r3, #1
   2225a:	f04f 0000 	mov.w	r0, #0
   2225e:	4aaf      	ldr	r2, [pc, #700]	; (2251c <cloud_decode_command+0x2d8>)
   22260:	f363 0007 	bfi	r0, r3, #0, #8
   22264:	4bae      	ldr	r3, [pc, #696]	; (22520 <cloud_decode_command+0x2dc>)
   22266:	49af      	ldr	r1, [pc, #700]	; (22524 <cloud_decode_command+0x2e0>)
   22268:	1a9b      	subs	r3, r3, r2
   2226a:	08db      	lsrs	r3, r3, #3
   2226c:	f363 108f 	bfi	r0, r3, #6, #10
   22270:	4aad      	ldr	r2, [pc, #692]	; (22528 <cloud_decode_command+0x2e4>)
   22272:	f240 3357 	movw	r3, #855	; 0x357
   22276:	f01b fe74 	bl	3df62 <log_string_sync>
		return -ENOENT;
   2227a:	f06f 0001 	mvn.w	r0, #1
}
   2227e:	b00f      	add	sp, #60	; 0x3c
   22280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22284:	4ea9      	ldr	r6, [pc, #676]	; (2252c <cloud_decode_command+0x2e8>)
	for (int i = 0; i < ARRAY_SIZE(cmd_groups); ++i) {
   22286:	2400      	movs	r4, #0
   22288:	4635      	mov	r5, r6
		group_obj = json_object_decode(root_obj, cmd_groups[i]->key);
   2228a:	f856 3b04 	ldr.w	r3, [r6], #4
   2228e:	9804      	ldr	r0, [sp, #16]
   22290:	6819      	ldr	r1, [r3, #0]
   22292:	f01b fb19 	bl	3d8c8 <json_object_decode>
		if ((group_obj != NULL) &&
   22296:	b1f8      	cbz	r0, 222d8 <cloud_decode_command+0x94>
					cmd_group_str[cmd_groups[i]->group]))) {
   22298:	f856 3c04 	ldr.w	r3, [r6, #-4]
			(json_value_string_compare(group_obj,
   2229c:	4aa4      	ldr	r2, [pc, #656]	; (22530 <cloud_decode_command+0x2ec>)
					cmd_group_str[cmd_groups[i]->group]))) {
   2229e:	791b      	ldrb	r3, [r3, #4]
			(json_value_string_compare(group_obj,
   222a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   222a4:	f01b fb01 	bl	3d8aa <json_value_string_compare>
		if ((group_obj != NULL) &&
   222a8:	b1b0      	cbz	r0, 222d8 <cloud_decode_command+0x94>
			group = cmd_groups[i];
   222aa:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
	if (group == NULL) {
   222ae:	b9bd      	cbnz	r5, 222e0 <cloud_decode_command+0x9c>
	state_obj = cJSON_GetObjectItem(root_obj, "state");
   222b0:	49a0      	ldr	r1, [pc, #640]	; (22534 <cloud_decode_command+0x2f0>)
   222b2:	9804      	ldr	r0, [sp, #16]
   222b4:	f01d f803 	bl	3f2be <cJSON_GetObjectItem>
	config_obj = cJSON_DetachItemFromObject(
   222b8:	9b04      	ldr	r3, [sp, #16]
   222ba:	499f      	ldr	r1, [pc, #636]	; (22538 <cloud_decode_command+0x2f4>)
   222bc:	2800      	cmp	r0, #0
   222be:	bf08      	it	eq
   222c0:	4618      	moveq	r0, r3
   222c2:	f01d f822 	bl	3f30a <cJSON_DetachItemFromObject>
	if (config_obj == NULL) {
   222c6:	4607      	mov	r7, r0
   222c8:	2800      	cmp	r0, #0
   222ca:	f040 80a1 	bne.w	22410 <cloud_decode_command+0x1cc>
	cJSON_Delete(root_obj);
   222ce:	9804      	ldr	r0, [sp, #16]
   222d0:	f004 fcf8 	bl	26cc4 <cJSON_Delete>
	return 0;
   222d4:	2000      	movs	r0, #0
   222d6:	e7d2      	b.n	2227e <cloud_decode_command+0x3a>
	for (int i = 0; i < ARRAY_SIZE(cmd_groups); ++i) {
   222d8:	3401      	adds	r4, #1
   222da:	2c04      	cmp	r4, #4
   222dc:	d1d5      	bne.n	2228a <cloud_decode_command+0x46>
   222de:	e7e7      	b.n	222b0 <cloud_decode_command+0x6c>
	cmd_parsed.group = group->group;
   222e0:	4b96      	ldr	r3, [pc, #600]	; (2253c <cloud_decode_command+0x2f8>)
	for (size_t j = 0; j < group->num_children; ++j) {
   222e2:	2600      	movs	r6, #0
   222e4:	4699      	mov	r9, r3
	cmd_parsed.group = group->group;
   222e6:	792a      	ldrb	r2, [r5, #4]
   222e8:	701a      	strb	r2, [r3, #0]
	for (size_t j = 0; j < group->num_children; ++j) {
   222ea:	68eb      	ldr	r3, [r5, #12]
   222ec:	429e      	cmp	r6, r3
   222ee:	d2df      	bcs.n	222b0 <cloud_decode_command+0x6c>
			json_object_decode(root_obj, group->children[j].key);
   222f0:	68ab      	ldr	r3, [r5, #8]
   222f2:	0134      	lsls	r4, r6, #4
   222f4:	5919      	ldr	r1, [r3, r4]
   222f6:	9804      	ldr	r0, [sp, #16]
   222f8:	f01b fae6 	bl	3d8c8 <json_object_decode>
		if ((channel_obj != NULL) &&
   222fc:	2800      	cmp	r0, #0
   222fe:	d04f      	beq.n	223a0 <cloud_decode_command+0x15c>
			    channel_type_str[group->children[j].channel]))) {
   22300:	68ab      	ldr	r3, [r5, #8]
		    (json_value_string_compare(
   22302:	4a8f      	ldr	r2, [pc, #572]	; (22540 <cloud_decode_command+0x2fc>)
			    channel_type_str[group->children[j].channel]))) {
   22304:	4423      	add	r3, r4
   22306:	791b      	ldrb	r3, [r3, #4]
		    (json_value_string_compare(
   22308:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   2230c:	f01b facd 	bl	3d8aa <json_value_string_compare>
		if ((channel_obj != NULL) &&
   22310:	2800      	cmp	r0, #0
   22312:	d045      	beq.n	223a0 <cloud_decode_command+0x15c>
			chan = &group->children[j];
   22314:	68ab      	ldr	r3, [r5, #8]
	if (chan == NULL) {
   22316:	191c      	adds	r4, r3, r4
   22318:	d0ca      	beq.n	222b0 <cloud_decode_command+0x6c>
	for (size_t k = 0; k < chan->num_children; ++k) {
   2231a:	2600      	movs	r6, #0
	cmd_parsed.channel = chan->channel;
   2231c:	7923      	ldrb	r3, [r4, #4]
		LOG_INF("[%s:%d] Found cmd %s, %s, %s\n", __func__, __LINE__,
   2231e:	4a7f      	ldr	r2, [pc, #508]	; (2251c <cloud_decode_command+0x2d8>)
	cmd_parsed.channel = chan->channel;
   22320:	f889 3001 	strb.w	r3, [r9, #1]
   22324:	4b7e      	ldr	r3, [pc, #504]	; (22520 <cloud_decode_command+0x2dc>)
		LOG_INF("[%s:%d] Found cmd %s, %s, %s\n", __func__, __LINE__,
   22326:	1a9b      	subs	r3, r3, r2
   22328:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   2232c:	9305      	str	r3, [sp, #20]
	for (size_t k = 0; k < chan->num_children; ++k) {
   2232e:	68e3      	ldr	r3, [r4, #12]
   22330:	429e      	cmp	r6, r3
   22332:	d2bd      	bcs.n	222b0 <cloud_decode_command+0x6c>
		type = &chan->children[k];
   22334:	68a1      	ldr	r1, [r4, #8]
   22336:	0132      	lsls	r2, r6, #4
   22338:	188b      	adds	r3, r1, r2
		type_obj = json_object_decode(root_obj, type->key);
   2233a:	9804      	ldr	r0, [sp, #16]
   2233c:	5889      	ldr	r1, [r1, r2]
		type = &chan->children[k];
   2233e:	9306      	str	r3, [sp, #24]
		type_obj = json_object_decode(root_obj, type->key);
   22340:	f01b fac2 	bl	3d8c8 <json_object_decode>
		ret = cloud_cmd_parse_type(type, type_obj, &cmd_parsed);
   22344:	9b06      	ldr	r3, [sp, #24]
   22346:	4601      	mov	r1, r0
   22348:	4a7c      	ldr	r2, [pc, #496]	; (2253c <cloud_decode_command+0x2f8>)
   2234a:	4618      	mov	r0, r3
   2234c:	f7ff fd0a 	bl	21d64 <cloud_cmd_parse_type>
		if (ret != 0) {
   22350:	b340      	cbz	r0, 223a4 <cloud_decode_command+0x160>
			if (ret != -ENOENT) {
   22352:	1c81      	adds	r1, r0, #2
   22354:	9007      	str	r0, [sp, #28]
   22356:	d021      	beq.n	2239c <cloud_decode_command+0x158>
				LOG_ERR("[%s:%d] Unhandled cmd format for %s, %s, error %d",
   22358:	f027 023f 	bic.w	r2, r7, #63	; 0x3f
   2235c:	9b05      	ldr	r3, [sp, #20]
   2235e:	f042 0201 	orr.w	r2, r2, #1
   22362:	f362 0707 	bfi	r7, r2, #0, #8
   22366:	f363 178f 	bfi	r7, r3, #6, #10
   2236a:	792a      	ldrb	r2, [r5, #4]
   2236c:	4b70      	ldr	r3, [pc, #448]	; (22530 <cloud_decode_command+0x2ec>)
   2236e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   22372:	f01b fe08 	bl	3df86 <log_strdup>
   22376:	7921      	ldrb	r1, [r4, #4]
   22378:	4b71      	ldr	r3, [pc, #452]	; (22540 <cloud_decode_command+0x2fc>)
   2237a:	9006      	str	r0, [sp, #24]
   2237c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   22380:	f01b fe01 	bl	3df86 <log_strdup>
   22384:	9b07      	ldr	r3, [sp, #28]
   22386:	9a06      	ldr	r2, [sp, #24]
   22388:	e9cd 0301 	strd	r0, r3, [sp, #4]
   2238c:	9200      	str	r2, [sp, #0]
   2238e:	f240 23ef 	movw	r3, #751	; 0x2ef
   22392:	4a6c      	ldr	r2, [pc, #432]	; (22544 <cloud_decode_command+0x300>)
   22394:	496c      	ldr	r1, [pc, #432]	; (22548 <cloud_decode_command+0x304>)
   22396:	4638      	mov	r0, r7
   22398:	f01b fde3 	bl	3df62 <log_string_sync>
	for (size_t k = 0; k < chan->num_children; ++k) {
   2239c:	3601      	adds	r6, #1
   2239e:	e7c6      	b.n	2232e <cloud_decode_command+0xea>
	for (size_t j = 0; j < group->num_children; ++j) {
   223a0:	3601      	adds	r6, #1
   223a2:	e7a2      	b.n	222ea <cloud_decode_command+0xa6>
		LOG_INF("[%s:%d] Found cmd %s, %s, %s\n", __func__, __LINE__,
   223a4:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   223a8:	f043 0303 	orr.w	r3, r3, #3
   223ac:	f363 0807 	bfi	r8, r3, #0, #8
   223b0:	9b05      	ldr	r3, [sp, #20]
   223b2:	4a5f      	ldr	r2, [pc, #380]	; (22530 <cloud_decode_command+0x2ec>)
   223b4:	f363 188f 	bfi	r8, r3, #6, #10
   223b8:	f899 3000 	ldrb.w	r3, [r9]
   223bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   223c0:	f01b fde1 	bl	3df86 <log_strdup>
   223c4:	f899 2001 	ldrb.w	r2, [r9, #1]
   223c8:	4b5d      	ldr	r3, [pc, #372]	; (22540 <cloud_decode_command+0x2fc>)
   223ca:	9007      	str	r0, [sp, #28]
   223cc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   223d0:	f01b fdd9 	bl	3df86 <log_strdup>
   223d4:	f899 1002 	ldrb.w	r1, [r9, #2]
   223d8:	4b5c      	ldr	r3, [pc, #368]	; (2254c <cloud_decode_command+0x308>)
   223da:	9006      	str	r0, [sp, #24]
   223dc:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   223e0:	f01b fdd1 	bl	3df86 <log_strdup>
   223e4:	9a06      	ldr	r2, [sp, #24]
   223e6:	9b07      	ldr	r3, [sp, #28]
   223e8:	9002      	str	r0, [sp, #8]
   223ea:	9201      	str	r2, [sp, #4]
   223ec:	9300      	str	r3, [sp, #0]
   223ee:	4a55      	ldr	r2, [pc, #340]	; (22544 <cloud_decode_command+0x300>)
   223f0:	f240 23f7 	movw	r3, #759	; 0x2f7
   223f4:	4956      	ldr	r1, [pc, #344]	; (22550 <cloud_decode_command+0x30c>)
   223f6:	4640      	mov	r0, r8
   223f8:	f01b fdb3 	bl	3df62 <log_string_sync>
		(void)cloud_cmd_handle_sensor_set_chan_cfg(&cmd_parsed);
   223fc:	484f      	ldr	r0, [pc, #316]	; (2253c <cloud_decode_command+0x2f8>)
   223fe:	f7ff fc5b 	bl	21cb8 <cloud_cmd_handle_sensor_set_chan_cfg>
		if (cloud_command_cb) {
   22402:	4b54      	ldr	r3, [pc, #336]	; (22554 <cloud_decode_command+0x310>)
   22404:	681b      	ldr	r3, [r3, #0]
   22406:	2b00      	cmp	r3, #0
   22408:	d0c8      	beq.n	2239c <cloud_decode_command+0x158>
			cloud_command_cb(&cmd_parsed);
   2240a:	484c      	ldr	r0, [pc, #304]	; (2253c <cloud_decode_command+0x2f8>)
   2240c:	4798      	blx	r3
   2240e:	e7c5      	b.n	2239c <cloud_decode_command+0x158>
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   22410:	2500      	movs	r5, #0
   22412:	4b43      	ldr	r3, [pc, #268]	; (22520 <cloud_decode_command+0x2dc>)
			LOG_INF("[%s:%d] Found cfg item %s, %s\n", __func__,
   22414:	4a41      	ldr	r2, [pc, #260]	; (2251c <cloud_decode_command+0x2d8>)
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   22416:	f8df 814c 	ldr.w	r8, [pc, #332]	; 22564 <cloud_decode_command+0x320>
			LOG_INF("[%s:%d] Found cfg item %s, %s\n", __func__,
   2241a:	1a9b      	subs	r3, r3, r2
   2241c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
		cJSON *channel_obj = json_object_decode(
   22420:	f8df 911c 	ldr.w	r9, [pc, #284]	; 22540 <cloud_decode_command+0x2fc>
			LOG_INF("[%s:%d] Found cfg item %s, %s\n", __func__,
   22424:	9306      	str	r3, [sp, #24]
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   22426:	f8d8 300c 	ldr.w	r3, [r8, #12]
   2242a:	429d      	cmp	r5, r3
   2242c:	d303      	bcc.n	22436 <cloud_decode_command+0x1f2>
	cJSON_Delete(config_obj);
   2242e:	4638      	mov	r0, r7
   22430:	f004 fc48 	bl	26cc4 <cJSON_Delete>
	return 0;
   22434:	e74b      	b.n	222ce <cloud_decode_command+0x8a>
		struct cloud_command found_config_item = {
   22436:	2218      	movs	r2, #24
   22438:	2100      	movs	r1, #0
   2243a:	a808      	add	r0, sp, #32
   2243c:	f01e f90e 	bl	4065c <memset>
   22440:	2308      	movs	r3, #8
   22442:	f88d 3020 	strb.w	r3, [sp, #32]
			channel_type_str[group->children[ch].channel]);
   22446:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2244a:	012c      	lsls	r4, r5, #4
   2244c:	4423      	add	r3, r4
   2244e:	791b      	ldrb	r3, [r3, #4]
		cJSON *channel_obj = json_object_decode(
   22450:	4638      	mov	r0, r7
   22452:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
   22456:	f01b fa37 	bl	3d8c8 <json_object_decode>
		if (channel_obj == NULL) {
   2245a:	9005      	str	r0, [sp, #20]
   2245c:	b908      	cbnz	r0, 22462 <cloud_decode_command+0x21e>
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   2245e:	3501      	adds	r5, #1
   22460:	e7e1      	b.n	22426 <cloud_decode_command+0x1e2>
		for (size_t type = 0; type < chan->num_children; ++type) {
   22462:	2600      	movs	r6, #0
		struct cmd *chan = &group->children[ch];
   22464:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22468:	441c      	add	r4, r3
		found_config_item.channel = chan->channel;
   2246a:	7923      	ldrb	r3, [r4, #4]
   2246c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		for (size_t type = 0; type < chan->num_children; ++type) {
   22470:	68e3      	ldr	r3, [r4, #12]
   22472:	429e      	cmp	r6, r3
   22474:	d2f3      	bcs.n	2245e <cloud_decode_command+0x21a>
			int ret = cloud_cmd_parse_type(&chan->children[type],
   22476:	68a0      	ldr	r0, [r4, #8]
   22478:	aa08      	add	r2, sp, #32
   2247a:	9905      	ldr	r1, [sp, #20]
   2247c:	eb00 1006 	add.w	r0, r0, r6, lsl #4
   22480:	f7ff fc70 	bl	21d64 <cloud_cmd_parse_type>
			if (ret != 0) {
   22484:	b1e0      	cbz	r0, 224c0 <cloud_decode_command+0x27c>
				if (ret != -ENOENT) {
   22486:	1c82      	adds	r2, r0, #2
   22488:	9007      	str	r0, [sp, #28]
   2248a:	d017      	beq.n	224bc <cloud_decode_command+0x278>
					LOG_ERR("[%s:%d] Unhandled cfg format for %s, error %d",
   2248c:	f02b 023f 	bic.w	r2, fp, #63	; 0x3f
   22490:	f042 0201 	orr.w	r2, r2, #1
   22494:	f362 0b07 	bfi	fp, r2, #0, #8
   22498:	7922      	ldrb	r2, [r4, #4]
   2249a:	9b06      	ldr	r3, [sp, #24]
   2249c:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
   224a0:	f363 1b8f 	bfi	fp, r3, #6, #10
   224a4:	f01b fd6f 	bl	3df86 <log_strdup>
   224a8:	9b07      	ldr	r3, [sp, #28]
   224aa:	4a2b      	ldr	r2, [pc, #172]	; (22558 <cloud_decode_command+0x314>)
   224ac:	e9cd 0300 	strd	r0, r3, [sp]
   224b0:	492a      	ldr	r1, [pc, #168]	; (2255c <cloud_decode_command+0x318>)
   224b2:	f240 3333 	movw	r3, #819	; 0x333
   224b6:	4658      	mov	r0, fp
   224b8:	f01b fd53 	bl	3df62 <log_string_sync>
		for (size_t type = 0; type < chan->num_children; ++type) {
   224bc:	3601      	adds	r6, #1
   224be:	e7d7      	b.n	22470 <cloud_decode_command+0x22c>
			LOG_INF("[%s:%d] Found cfg item %s, %s\n", __func__,
   224c0:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   224c4:	f043 0303 	orr.w	r3, r3, #3
   224c8:	f363 0a07 	bfi	sl, r3, #0, #8
   224cc:	9b06      	ldr	r3, [sp, #24]
   224ce:	f363 1a8f 	bfi	sl, r3, #6, #10
   224d2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   224d6:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
   224da:	f01b fd54 	bl	3df86 <log_strdup>
   224de:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   224e2:	4b1a      	ldr	r3, [pc, #104]	; (2254c <cloud_decode_command+0x308>)
   224e4:	9007      	str	r0, [sp, #28]
   224e6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   224ea:	f01b fd4c 	bl	3df86 <log_strdup>
   224ee:	9b07      	ldr	r3, [sp, #28]
   224f0:	9001      	str	r0, [sp, #4]
   224f2:	9300      	str	r3, [sp, #0]
   224f4:	4a18      	ldr	r2, [pc, #96]	; (22558 <cloud_decode_command+0x314>)
   224f6:	f240 333b 	movw	r3, #827	; 0x33b
   224fa:	4919      	ldr	r1, [pc, #100]	; (22560 <cloud_decode_command+0x31c>)
   224fc:	4650      	mov	r0, sl
   224fe:	f01b fd30 	bl	3df62 <log_string_sync>
			(void)cloud_cmd_handle_sensor_set_chan_cfg(
   22502:	a808      	add	r0, sp, #32
   22504:	f7ff fbd8 	bl	21cb8 <cloud_cmd_handle_sensor_set_chan_cfg>
			if (cloud_command_cb) {
   22508:	4b12      	ldr	r3, [pc, #72]	; (22554 <cloud_decode_command+0x310>)
   2250a:	681b      	ldr	r3, [r3, #0]
   2250c:	2b00      	cmp	r3, #0
   2250e:	d0d5      	beq.n	224bc <cloud_decode_command+0x278>
				cloud_command_cb(&found_config_item);
   22510:	a808      	add	r0, sp, #32
   22512:	4798      	blx	r3
   22514:	e7d2      	b.n	224bc <cloud_decode_command+0x278>
		return -EINVAL;
   22516:	f06f 0015 	mvn.w	r0, #21
   2251a:	e6b0      	b.n	2227e <cloud_decode_command+0x3a>
   2251c:	00041c2c 	.word	0x00041c2c
   22520:	00041c6c 	.word	0x00041c6c
   22524:	000438bf 	.word	0x000438bf
   22528:	0004389c 	.word	0x0004389c
   2252c:	20032030 	.word	0x20032030
   22530:	00041f74 	.word	0x00041f74
   22534:	000439e2 	.word	0x000439e2
   22538:	0004392d 	.word	0x0004392d
   2253c:	20020880 	.word	0x20020880
   22540:	00041f20 	.word	0x00041f20
   22544:	00043877 	.word	0x00043877
   22548:	000438dd 	.word	0x000438dd
   2254c:	00041fa0 	.word	0x00041fa0
   22550:	0004390f 	.word	0x0004390f
   22554:	200237e8 	.word	0x200237e8
   22558:	00043888 	.word	0x00043888
   2255c:	00043934 	.word	0x00043934
   22560:	00043962 	.word	0x00043962
   22564:	20032040 	.word	0x20032040

00022568 <cloud_decode_init>:
{
   22568:	b510      	push	{r4, lr}
   2256a:	4604      	mov	r4, r0
	cJSON_Init();
   2256c:	f004 fc7a 	bl	26e64 <cJSON_Init>
	cloud_command_cb = cb;
   22570:	4b01      	ldr	r3, [pc, #4]	; (22578 <cloud_decode_init+0x10>)
}
   22572:	2000      	movs	r0, #0
	cloud_command_cb = cb;
   22574:	601c      	str	r4, [r3, #0]
}
   22576:	bd10      	pop	{r4, pc}
   22578:	200237e8 	.word	0x200237e8

0002257c <cloud_is_send_allowed>:
{
   2257c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (sensor_cfg[i].chan == channel) {
   22580:	4c23      	ldr	r4, [pc, #140]	; (22610 <cloud_is_send_allowed+0x94>)
{
   22582:	ec57 6b10 	vmov	r6, r7, d0
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   22586:	2500      	movs	r5, #0
		if (sensor_cfg[i].chan == channel) {
   22588:	2230      	movs	r2, #48	; 0x30
   2258a:	46a2      	mov	sl, r4
   2258c:	fb02 f305 	mul.w	r3, r2, r5
   22590:	5d19      	ldrb	r1, [r3, r4]
   22592:	4281      	cmp	r1, r0
   22594:	d12a      	bne.n	225ec <cloud_is_send_allowed+0x70>
	    (!cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE])) {
   22596:	441c      	add	r4, r3
	if ((cfg == NULL) ||
   22598:	2200      	movs	r2, #0
   2259a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   2259e:	2300      	movs	r3, #0
   225a0:	f7fa fb72 	bl	1cc88 <__aeabi_dcmpeq>
   225a4:	bb28      	cbnz	r0, 225f2 <cloud_is_send_allowed+0x76>
	if (((cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_LOW_ENABLE]) &&
   225a6:	e9d4 8906 	ldrd	r8, r9, [r4, #24]
   225aa:	2200      	movs	r2, #0
   225ac:	2300      	movs	r3, #0
   225ae:	4640      	mov	r0, r8
   225b0:	4649      	mov	r1, r9
   225b2:	f7fa fb69 	bl	1cc88 <__aeabi_dcmpeq>
   225b6:	b930      	cbnz	r0, 225c6 <cloud_is_send_allowed+0x4a>
   225b8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   225bc:	4630      	mov	r0, r6
   225be:	4639      	mov	r1, r7
   225c0:	f7fa fb6c 	bl	1cc9c <__aeabi_dcmplt>
   225c4:	b9b8      	cbnz	r0, 225f6 <cloud_is_send_allowed+0x7a>
	if (((cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_HIGH_ENABLE]) &&
   225c6:	2330      	movs	r3, #48	; 0x30
   225c8:	fb03 a505 	mla	r5, r3, r5, sl
   225cc:	2200      	movs	r2, #0
   225ce:	e9d5 010a 	ldrd	r0, r1, [r5, #40]	; 0x28
   225d2:	2300      	movs	r3, #0
   225d4:	f7fa fb58 	bl	1cc88 <__aeabi_dcmpeq>
   225d8:	b978      	cbnz	r0, 225fa <cloud_is_send_allowed+0x7e>
   225da:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
   225de:	4630      	mov	r0, r6
   225e0:	4639      	mov	r1, r7
   225e2:	f7fa fb79 	bl	1ccd8 <__aeabi_dcmpgt>
   225e6:	b930      	cbnz	r0, 225f6 <cloud_is_send_allowed+0x7a>
}
   225e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   225ec:	3501      	adds	r5, #1
   225ee:	2d08      	cmp	r5, #8
   225f0:	d1cc      	bne.n	2258c <cloud_is_send_allowed+0x10>
		return false;
   225f2:	2000      	movs	r0, #0
   225f4:	e7f8      	b.n	225e8 <cloud_is_send_allowed+0x6c>
		return true;
   225f6:	2001      	movs	r0, #1
   225f8:	e7f6      	b.n	225e8 <cloud_is_send_allowed+0x6c>
	return (!cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_LOW_ENABLE] &&
   225fa:	2200      	movs	r2, #0
   225fc:	2300      	movs	r3, #0
   225fe:	4640      	mov	r0, r8
   22600:	4649      	mov	r1, r9
   22602:	f7fa fb41 	bl	1cc88 <__aeabi_dcmpeq>
   22606:	3000      	adds	r0, #0
   22608:	bf18      	it	ne
   2260a:	2001      	movne	r0, #1
   2260c:	e7ec      	b.n	225e8 <cloud_is_send_allowed+0x6c>
   2260e:	bf00      	nop
   22610:	20031b20 	.word	0x20031b20

00022614 <service_info_json_object_encode>:
}

int service_info_json_object_encode(
	const char * const ui[], const u32_t ui_count, const char * const fota[],
	const u32_t fota_count, const u16_t fota_version, cJSON * const obj_out)
{
   22614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22618:	b087      	sub	sp, #28
   2261a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   2261c:	4604      	mov	r4, r0
   2261e:	4689      	mov	r9, r1
   22620:	4617      	mov	r7, r2
   22622:	4698      	mov	r8, r3
	int err = 0;
	cJSON *service_info_obj = NULL;
	char fota_name[FOTAS_JSON_NAME_SIZE];

	if ((obj_out == NULL) || ((ui == NULL) && ui_count) ||
   22624:	b386      	cbz	r6, 22688 <service_info_json_object_encode+0x74>
   22626:	b900      	cbnz	r0, 2262a <service_info_json_object_encode+0x16>
   22628:	bb71      	cbnz	r1, 22688 <service_info_json_object_encode+0x74>
   2262a:	b917      	cbnz	r7, 22632 <service_info_json_object_encode+0x1e>
	    ((fota == NULL) && fota_count)) {
   2262c:	f1b8 0f00 	cmp.w	r8, #0
   22630:	d12a      	bne.n	22688 <service_info_json_object_encode+0x74>
		return -EINVAL;
	}

	service_info_obj = cJSON_CreateObject();
   22632:	f004 fc0b 	bl	26e4c <cJSON_CreateObject>
	if (service_info_obj == NULL) {
   22636:	4605      	mov	r5, r0
   22638:	b348      	cbz	r0, 2268e <service_info_json_object_encode+0x7a>
		return -ENOMEM;
	}

	if (!err) {
		err = add_array_obj(ui, ui_count, UI_JSON_NAME,
   2263a:	4603      	mov	r3, r0
   2263c:	4a15      	ldr	r2, [pc, #84]	; (22694 <service_info_json_object_encode+0x80>)
   2263e:	4620      	mov	r0, r4
   22640:	4649      	mov	r1, r9
   22642:	f01b f945 	bl	3d8d0 <add_array_obj>
				    service_info_obj);
	}

	if (!err) {
   22646:	4604      	mov	r4, r0
   22648:	b9d0      	cbnz	r0, 22680 <service_info_json_object_encode+0x6c>
		snprintf(fota_name, sizeof(fota_name), "%s%hu", FOTAS_JSON_NAME,
   2264a:	210c      	movs	r1, #12
   2264c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   22650:	4a11      	ldr	r2, [pc, #68]	; (22698 <service_info_json_object_encode+0x84>)
   22652:	9300      	str	r3, [sp, #0]
   22654:	eb0d 0001 	add.w	r0, sp, r1
   22658:	4b10      	ldr	r3, [pc, #64]	; (2269c <service_info_json_object_encode+0x88>)
   2265a:	f019 fdbd 	bl	3c1d8 <sniprintf>
			 fota_version);
		err = add_array_obj(fota, fota_count, fota_name,
   2265e:	462b      	mov	r3, r5
   22660:	aa03      	add	r2, sp, #12
   22662:	4641      	mov	r1, r8
   22664:	4638      	mov	r0, r7
   22666:	f01b f933 	bl	3d8d0 <add_array_obj>
				    service_info_obj);
	}

	if (!err) {
   2266a:	4604      	mov	r4, r0
   2266c:	b940      	cbnz	r0, 22680 <service_info_json_object_encode+0x6c>
		cJSON_AddItemToObject(obj_out, SERVICE_INFO_JSON_NAME,
   2266e:	462a      	mov	r2, r5
   22670:	490b      	ldr	r1, [pc, #44]	; (226a0 <service_info_json_object_encode+0x8c>)
   22672:	4630      	mov	r0, r6
   22674:	f01c fe32 	bl	3f2dc <cJSON_AddItemToObject>
	} else {
		cJSON_Delete(service_info_obj);
	}

	return err;
}
   22678:	4620      	mov	r0, r4
   2267a:	b007      	add	sp, #28
   2267c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cJSON_Delete(service_info_obj);
   22680:	4628      	mov	r0, r5
   22682:	f004 fb1f 	bl	26cc4 <cJSON_Delete>
   22686:	e7f7      	b.n	22678 <service_info_json_object_encode+0x64>
		return -EINVAL;
   22688:	f06f 0415 	mvn.w	r4, #21
   2268c:	e7f4      	b.n	22678 <service_info_json_object_encode+0x64>
		return -ENOMEM;
   2268e:	f06f 040b 	mvn.w	r4, #11
   22692:	e7f1      	b.n	22678 <service_info_json_object_encode+0x64>
   22694:	000437f7 	.word	0x000437f7
   22698:	00043b3a 	.word	0x00043b3a
   2269c:	00043b33 	.word	0x00043b33
   226a0:	00043b40 	.word	0x00043b40

000226a4 <gps_control_is_enabled>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   226a4:	4b03      	ldr	r3, [pc, #12]	; (226b4 <gps_control_is_enabled+0x10>)
   226a6:	e8d3 0faf 	lda	r0, [r3]
}

bool gps_control_is_enabled(void)
{
	return atomic_get(&gps_is_enabled);
}
   226aa:	3000      	adds	r0, #0
   226ac:	bf18      	it	ne
   226ae:	2001      	movne	r0, #1
   226b0:	4770      	bx	lr
   226b2:	bf00      	nop
   226b4:	200237f8 	.word	0x200237f8

000226b8 <gps_control_is_active>:
   226b8:	4b03      	ldr	r3, [pc, #12]	; (226c8 <gps_control_is_active+0x10>)
   226ba:	e8d3 0faf 	lda	r0, [r3]

bool gps_control_is_active(void)
{
	return atomic_get(&gps_is_active);
}
   226be:	3000      	adds	r0, #0
   226c0:	bf18      	it	ne
   226c2:	2001      	movne	r0, #1
   226c4:	4770      	bx	lr
   226c6:	bf00      	nop
   226c8:	200237f4 	.word	0x200237f4

000226cc <gps_control_set_active>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   226cc:	4b05      	ldr	r3, [pc, #20]	; (226e4 <gps_control_set_active+0x18>)
   226ce:	e8d3 2fef 	ldaex	r2, [r3]
   226d2:	e8c3 0fe1 	stlex	r1, r0, [r3]
   226d6:	2900      	cmp	r1, #0
   226d8:	d1f9      	bne.n	226ce <gps_control_set_active+0x2>

bool gps_control_set_active(bool active)
{
	return atomic_set(&gps_is_active, active ? 1 : 0);
}
   226da:	1c10      	adds	r0, r2, #0
   226dc:	bf18      	it	ne
   226de:	2001      	movne	r0, #1
   226e0:	4770      	bx	lr
   226e2:	bf00      	nop
   226e4:	200237f4 	.word	0x200237f4

000226e8 <stop>:
	if (gps_dev == NULL) {
   226e8:	4b1d      	ldr	r3, [pc, #116]	; (22760 <stop+0x78>)
{
   226ea:	b510      	push	{r4, lr}
	if (gps_dev == NULL) {
   226ec:	6818      	ldr	r0, [r3, #0]
   226ee:	4c1d      	ldr	r4, [pc, #116]	; (22764 <stop+0x7c>)
   226f0:	4b1d      	ldr	r3, [pc, #116]	; (22768 <stop+0x80>)
   226f2:	1ae4      	subs	r4, r4, r3
   226f4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   226f8:	b948      	cbnz	r0, 2270e <stop+0x26>
		LOG_ERR("GPS controller is not initialized");
   226fa:	2301      	movs	r3, #1
   226fc:	491b      	ldr	r1, [pc, #108]	; (2276c <stop+0x84>)
   226fe:	f363 0007 	bfi	r0, r3, #0, #8
   22702:	f364 108f 	bfi	r0, r4, #6, #10
}
   22706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LOG_INF("GPS operation was stopped");
   2270a:	f01b bc2a 	b.w	3df62 <log_string_sync>
		return -EINVAL;
	}

	api = (struct gps_driver_api *)dev->driver_api;

	if (api->stop == NULL) {
   2270e:	6843      	ldr	r3, [r0, #4]
   22710:	685b      	ldr	r3, [r3, #4]
   22712:	b173      	cbz	r3, 22732 <stop+0x4a>
		return -ENOTSUP;
	}

	return api->stop(dev);
   22714:	4798      	blx	r3
	if (err) {
   22716:	4602      	mov	r2, r0
   22718:	b170      	cbz	r0, 22738 <stop+0x50>
		LOG_ERR("Failed to disable GPS, error: %d", err);
   2271a:	f04f 0000 	mov.w	r0, #0
   2271e:	2301      	movs	r3, #1
   22720:	f363 0007 	bfi	r0, r3, #0, #8
   22724:	f364 108f 	bfi	r0, r4, #6, #10
   22728:	4911      	ldr	r1, [pc, #68]	; (22770 <stop+0x88>)
}
   2272a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Failed to disable GPS, error: %d", err);
   2272e:	f01b bc18 	b.w	3df62 <log_string_sync>
		return -ENOTSUP;
   22732:	f06f 0285 	mvn.w	r2, #133	; 0x85
   22736:	e7f0      	b.n	2271a <stop+0x32>
   22738:	4b0e      	ldr	r3, [pc, #56]	; (22774 <stop+0x8c>)
   2273a:	e8d3 1fef 	ldaex	r1, [r3]
   2273e:	e8c3 2fec 	stlex	ip, r2, [r3]
   22742:	f1bc 0f00 	cmp.w	ip, #0
   22746:	d1f8      	bne.n	2273a <stop+0x52>
	gps_control_set_active(false);
   22748:	f7ff ffc0 	bl	226cc <gps_control_set_active>
	LOG_INF("GPS operation was stopped");
   2274c:	f04f 0000 	mov.w	r0, #0
   22750:	2303      	movs	r3, #3
   22752:	f363 0007 	bfi	r0, r3, #0, #8
   22756:	f364 108f 	bfi	r0, r4, #6, #10
   2275a:	4907      	ldr	r1, [pc, #28]	; (22778 <stop+0x90>)
   2275c:	e7d3      	b.n	22706 <stop+0x1e>
   2275e:	bf00      	nop
   22760:	200237f0 	.word	0x200237f0
   22764:	00041cb4 	.word	0x00041cb4
   22768:	00041c2c 	.word	0x00041c2c
   2276c:	00043ce7 	.word	0x00043ce7
   22770:	00043d09 	.word	0x00043d09
   22774:	200237f8 	.word	0x200237f8
   22778:	00043d2a 	.word	0x00043d2a

0002277c <start>:
{
   2277c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct gps_config gps_cfg = {
   2277e:	2210      	movs	r2, #16
   22780:	2100      	movs	r1, #0
   22782:	4668      	mov	r0, sp
   22784:	f01d ff6a 	bl	4065c <memset>
   22788:	2302      	movs	r3, #2
		.interval = CONFIG_GPS_CONTROL_FIX_TRY_TIME +
   2278a:	4d47      	ldr	r5, [pc, #284]	; (228a8 <start+0x12c>)
	struct gps_config gps_cfg = {
   2278c:	f88d 3000 	strb.w	r3, [sp]
		.interval = CONFIG_GPS_CONTROL_FIX_TRY_TIME +
   22790:	682b      	ldr	r3, [r5, #0]
	if (gps_dev == NULL) {
   22792:	4e46      	ldr	r6, [pc, #280]	; (228ac <start+0x130>)
		.interval = CONFIG_GPS_CONTROL_FIX_TRY_TIME +
   22794:	f503 73b4 	add.w	r3, r3, #360	; 0x168
	struct gps_config gps_cfg = {
   22798:	9301      	str	r3, [sp, #4]
   2279a:	f44f 73b4 	mov.w	r3, #360	; 0x168
   2279e:	4c44      	ldr	r4, [pc, #272]	; (228b0 <start+0x134>)
   227a0:	9302      	str	r3, [sp, #8]
	if (gps_dev == NULL) {
   227a2:	4b44      	ldr	r3, [pc, #272]	; (228b4 <start+0x138>)
   227a4:	6832      	ldr	r2, [r6, #0]
   227a6:	1ae4      	subs	r4, r4, r3
   227a8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		LOG_ERR("GPS controller is not initialized properly");
   227ac:	f04f 0000 	mov.w	r0, #0
	if (gps_dev == NULL) {
   227b0:	b94a      	cbnz	r2, 227c6 <start+0x4a>
		LOG_ERR("GPS controller is not initialized properly");
   227b2:	2301      	movs	r3, #1
   227b4:	f363 0007 	bfi	r0, r3, #0, #8
   227b8:	f364 108f 	bfi	r0, r4, #6, #10
   227bc:	493e      	ldr	r1, [pc, #248]	; (228b8 <start+0x13c>)
   227be:	f01b fbd0 	bl	3df62 <log_string_sync>
}
   227c2:	b004      	add	sp, #16
   227c4:	bd70      	pop	{r4, r5, r6, pc}
	LOG_INF("Enabling PSM");
   227c6:	2303      	movs	r3, #3
   227c8:	f363 0007 	bfi	r0, r3, #0, #8
   227cc:	f364 108f 	bfi	r0, r4, #6, #10
   227d0:	493a      	ldr	r1, [pc, #232]	; (228bc <start+0x140>)
   227d2:	f01b fbc6 	bl	3df62 <log_string_sync>
	err = lte_lc_psm_req(true);
   227d6:	2001      	movs	r0, #1
   227d8:	f006 fb58 	bl	28e8c <lte_lc_psm_req>
	if (err) {
   227dc:	4602      	mov	r2, r0
		LOG_ERR("PSM request failed, error: %d", err);
   227de:	f04f 0000 	mov.w	r0, #0
	if (err) {
   227e2:	b1da      	cbz	r2, 2281c <start+0xa0>
		LOG_ERR("PSM request failed, error: %d", err);
   227e4:	2101      	movs	r1, #1
   227e6:	f361 0007 	bfi	r0, r1, #0, #8
   227ea:	f364 108f 	bfi	r0, r4, #6, #10
   227ee:	4934      	ldr	r1, [pc, #208]	; (228c0 <start+0x144>)
   227f0:	f01b fbb7 	bl	3df62 <log_string_sync>
	err = gps_start(gps_dev, &gps_cfg);
   227f4:	6830      	ldr	r0, [r6, #0]
	if ((dev == NULL) || (cfg == NULL)) {
   227f6:	b1d0      	cbz	r0, 2282e <start+0xb2>
	if (api->start == NULL) {
   227f8:	6843      	ldr	r3, [r0, #4]
   227fa:	681b      	ldr	r3, [r3, #0]
   227fc:	b1d3      	cbz	r3, 22834 <start+0xb8>
	return api->start(dev, cfg);
   227fe:	4669      	mov	r1, sp
   22800:	4798      	blx	r3
	if (err) {
   22802:	4602      	mov	r2, r0
   22804:	b1c8      	cbz	r0, 2283a <start+0xbe>
		LOG_ERR("Failed to enable GPS, error: %d", err);
   22806:	f04f 0000 	mov.w	r0, #0
   2280a:	2301      	movs	r3, #1
   2280c:	492d      	ldr	r1, [pc, #180]	; (228c4 <start+0x148>)
   2280e:	f363 0007 	bfi	r0, r3, #0, #8
   22812:	f364 108f 	bfi	r0, r4, #6, #10
	LOG_INF("before the GPS is stopped. It's restarted every %d seconds",
   22816:	f01b fba4 	bl	3df62 <log_string_sync>
   2281a:	e7d2      	b.n	227c2 <start+0x46>
		LOG_INF("PSM enabled");
   2281c:	2303      	movs	r3, #3
   2281e:	f363 0007 	bfi	r0, r3, #0, #8
   22822:	f364 108f 	bfi	r0, r4, #6, #10
   22826:	4928      	ldr	r1, [pc, #160]	; (228c8 <start+0x14c>)
   22828:	f01b fb9b 	bl	3df62 <log_string_sync>
   2282c:	e7e2      	b.n	227f4 <start+0x78>
		return -EINVAL;
   2282e:	f06f 0215 	mvn.w	r2, #21
   22832:	e7e8      	b.n	22806 <start+0x8a>
		return -ENOTSUP;
   22834:	f06f 0285 	mvn.w	r2, #133	; 0x85
   22838:	e7e5      	b.n	22806 <start+0x8a>
   2283a:	2001      	movs	r0, #1
   2283c:	4b23      	ldr	r3, [pc, #140]	; (228cc <start+0x150>)
   2283e:	e8d3 2fef 	ldaex	r2, [r3]
   22842:	e8c3 0fe1 	stlex	r1, r0, [r3]
   22846:	2900      	cmp	r1, #0
   22848:	d1f9      	bne.n	2283e <start+0xc2>
	gps_control_set_active(true);
   2284a:	f7ff ff3f 	bl	226cc <gps_control_set_active>
	ui_led_set_pattern(UI_LED_GPS_SEARCHING);
   2284e:	2008      	movs	r0, #8
   22850:	f7ff f9b0 	bl	21bb4 <ui_led_set_pattern>
	LOG_INF("GPS started successfully. Searching for satellites ");
   22854:	2303      	movs	r3, #3
   22856:	f04f 0000 	mov.w	r0, #0
   2285a:	f363 0007 	bfi	r0, r3, #0, #8
   2285e:	f364 108f 	bfi	r0, r4, #6, #10
   22862:	491b      	ldr	r1, [pc, #108]	; (228d0 <start+0x154>)
   22864:	f01b fb7d 	bl	3df62 <log_string_sync>
	LOG_INF("to get position fix. This may take several minutes.");
   22868:	2303      	movs	r3, #3
   2286a:	f04f 0000 	mov.w	r0, #0
   2286e:	f363 0007 	bfi	r0, r3, #0, #8
   22872:	f364 108f 	bfi	r0, r4, #6, #10
   22876:	4917      	ldr	r1, [pc, #92]	; (228d4 <start+0x158>)
   22878:	f01b fb73 	bl	3df62 <log_string_sync>
	LOG_INF("The device will attempt to get a fix for %d seconds, ",
   2287c:	2303      	movs	r3, #3
   2287e:	f04f 0000 	mov.w	r0, #0
   22882:	f363 0007 	bfi	r0, r3, #0, #8
   22886:	f364 108f 	bfi	r0, r4, #6, #10
   2288a:	f44f 72b4 	mov.w	r2, #360	; 0x168
   2288e:	4912      	ldr	r1, [pc, #72]	; (228d8 <start+0x15c>)
   22890:	f01b fb67 	bl	3df62 <log_string_sync>
	LOG_INF("before the GPS is stopped. It's restarted every %d seconds",
   22894:	f04f 0000 	mov.w	r0, #0
   22898:	2303      	movs	r3, #3
   2289a:	f363 0007 	bfi	r0, r3, #0, #8
   2289e:	f364 108f 	bfi	r0, r4, #6, #10
   228a2:	682a      	ldr	r2, [r5, #0]
   228a4:	490d      	ldr	r1, [pc, #52]	; (228dc <start+0x160>)
   228a6:	e7b6      	b.n	22816 <start+0x9a>
   228a8:	200237fc 	.word	0x200237fc
   228ac:	200237f0 	.word	0x200237f0
   228b0:	00041cb4 	.word	0x00041cb4
   228b4:	00041c2c 	.word	0x00041c2c
   228b8:	00043b8c 	.word	0x00043b8c
   228bc:	00043bb7 	.word	0x00043bb7
   228c0:	00043bc4 	.word	0x00043bc4
   228c4:	00043bee 	.word	0x00043bee
   228c8:	00043be2 	.word	0x00043be2
   228cc:	200237f8 	.word	0x200237f8
   228d0:	00043c0e 	.word	0x00043c0e
   228d4:	00043c42 	.word	0x00043c42
   228d8:	00043c76 	.word	0x00043c76
   228dc:	00043cac 	.word	0x00043cac

000228e0 <gps_control_start>:

void gps_control_start(u32_t delay_ms)
{
	k_delayed_work_submit_to_queue(app_work_q, &start_work, delay_ms);
   228e0:	4b02      	ldr	r3, [pc, #8]	; (228ec <gps_control_start+0xc>)
   228e2:	4602      	mov	r2, r0
   228e4:	4902      	ldr	r1, [pc, #8]	; (228f0 <gps_control_start+0x10>)
   228e6:	6818      	ldr	r0, [r3, #0]
   228e8:	f017 bf64 	b.w	3a7b4 <k_delayed_work_submit_to_queue>
   228ec:	200237ec 	.word	0x200237ec
   228f0:	20023800 	.word	0x20023800

000228f4 <gps_control_stop>:
}

void gps_control_stop(u32_t delay_ms)
{
	k_delayed_work_submit_to_queue(app_work_q, &stop_work, delay_ms);
   228f4:	4b02      	ldr	r3, [pc, #8]	; (22900 <gps_control_stop+0xc>)
   228f6:	4602      	mov	r2, r0
   228f8:	4902      	ldr	r1, [pc, #8]	; (22904 <gps_control_stop+0x10>)
   228fa:	6818      	ldr	r0, [r3, #0]
   228fc:	f017 bf5a 	b.w	3a7b4 <k_delayed_work_submit_to_queue>
   22900:	200237ec 	.word	0x200237ec
   22904:	20023820 	.word	0x20023820

00022908 <gps_control_get_gps_reporting_interval>:
}

int gps_control_get_gps_reporting_interval(void)
{
	return gps_reporting_interval_seconds;
}
   22908:	4b01      	ldr	r3, [pc, #4]	; (22910 <gps_control_get_gps_reporting_interval+0x8>)
   2290a:	6818      	ldr	r0, [r3, #0]
   2290c:	4770      	bx	lr
   2290e:	bf00      	nop
   22910:	200237fc 	.word	0x200237fc

00022914 <gps_control_init>:

/** @brief Configures and starts the GPS device. */
int gps_control_init(struct k_work_q *work_q, gps_event_handler_t handler)
{
   22914:	b570      	push	{r4, r5, r6, lr}
	int err;
	static bool is_init;

	if (is_init) {
   22916:	4e2e      	ldr	r6, [pc, #184]	; (229d0 <gps_control_init+0xbc>)
{
   22918:	460c      	mov	r4, r1
	if (is_init) {
   2291a:	7833      	ldrb	r3, [r6, #0]
   2291c:	2b00      	cmp	r3, #0
   2291e:	d151      	bne.n	229c4 <gps_control_init+0xb0>
		return -EALREADY;
	}

	if ((work_q == NULL) || (handler == NULL)) {
   22920:	2800      	cmp	r0, #0
   22922:	d052      	beq.n	229ca <gps_control_init+0xb6>
   22924:	2900      	cmp	r1, #0
   22926:	d050      	beq.n	229ca <gps_control_init+0xb6>
		return -EINVAL;
	}

	app_work_q = work_q;
   22928:	4b2a      	ldr	r3, [pc, #168]	; (229d4 <gps_control_init+0xc0>)
   2292a:	6018      	str	r0, [r3, #0]
   2292c:	482a      	ldr	r0, [pc, #168]	; (229d8 <gps_control_init+0xc4>)
   2292e:	f015 fb3b 	bl	37fa8 <z_impl_device_get_binding>

	gps_dev = device_get_binding(CONFIG_GPS_DEV_NAME);
   22932:	4a2a      	ldr	r2, [pc, #168]	; (229dc <gps_control_init+0xc8>)
   22934:	4d2a      	ldr	r5, [pc, #168]	; (229e0 <gps_control_init+0xcc>)
   22936:	6010      	str	r0, [r2, #0]
	if (gps_dev == NULL) {
   22938:	4a2a      	ldr	r2, [pc, #168]	; (229e4 <gps_control_init+0xd0>)
   2293a:	1aad      	subs	r5, r5, r2
   2293c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   22940:	b990      	cbnz	r0, 22968 <gps_control_init+0x54>
		LOG_ERR("Could not get %s device",
   22942:	2301      	movs	r3, #1
   22944:	f04f 0400 	mov.w	r4, #0
   22948:	4823      	ldr	r0, [pc, #140]	; (229d8 <gps_control_init+0xc4>)
   2294a:	f363 0407 	bfi	r4, r3, #0, #8
   2294e:	f01b fb1a 	bl	3df86 <log_strdup>
   22952:	f365 148f 	bfi	r4, r5, #6, #10
   22956:	4602      	mov	r2, r0
   22958:	4923      	ldr	r1, [pc, #140]	; (229e8 <gps_control_init+0xd4>)
   2295a:	4620      	mov	r0, r4
   2295c:	f01b fb01 	bl	3df62 <log_string_sync>
			log_strdup(CONFIG_GPS_DEV_NAME));
		return -ENODEV;
   22960:	f06f 0412 	mvn.w	r4, #18
	LOG_INF("GPS initialized");

	is_init = true;

	return err;
}
   22964:	4620      	mov	r0, r4
   22966:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
	}

	api = (struct gps_driver_api *)dev->driver_api;

	if (api->init == NULL) {
   22968:	6843      	ldr	r3, [r0, #4]
   2296a:	68db      	ldr	r3, [r3, #12]
   2296c:	b17b      	cbz	r3, 2298e <gps_control_init+0x7a>
		return -ENOTSUP;
	}

	return api->init(dev, handler);
   2296e:	4621      	mov	r1, r4
   22970:	4798      	blx	r3
	if (err) {
   22972:	4604      	mov	r4, r0
   22974:	b170      	cbz	r0, 22994 <gps_control_init+0x80>
		LOG_ERR("Could not initialize GPS, error: %d", err);
   22976:	2301      	movs	r3, #1
   22978:	f04f 0000 	mov.w	r0, #0
   2297c:	f363 0007 	bfi	r0, r3, #0, #8
   22980:	f365 108f 	bfi	r0, r5, #6, #10
   22984:	4622      	mov	r2, r4
   22986:	4919      	ldr	r1, [pc, #100]	; (229ec <gps_control_init+0xd8>)
   22988:	f01b faeb 	bl	3df62 <log_string_sync>
		return err;
   2298c:	e7ea      	b.n	22964 <gps_control_init+0x50>
		return -ENOTSUP;
   2298e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   22992:	e7f0      	b.n	22976 <gps_control_init+0x62>
	k_delayed_work_init(&start_work, start);
   22994:	4916      	ldr	r1, [pc, #88]	; (229f0 <gps_control_init+0xdc>)
   22996:	4817      	ldr	r0, [pc, #92]	; (229f4 <gps_control_init+0xe0>)
   22998:	f01d fdae 	bl	404f8 <k_delayed_work_init>
	k_delayed_work_init(&stop_work, stop);
   2299c:	4916      	ldr	r1, [pc, #88]	; (229f8 <gps_control_init+0xe4>)
   2299e:	4817      	ldr	r0, [pc, #92]	; (229fc <gps_control_init+0xe8>)
   229a0:	f01d fdaa 	bl	404f8 <k_delayed_work_init>
	gps_reporting_interval_seconds =
   229a4:	221e      	movs	r2, #30
   229a6:	4b16      	ldr	r3, [pc, #88]	; (22a00 <gps_control_init+0xec>)
	LOG_INF("GPS initialized");
   229a8:	f04f 0000 	mov.w	r0, #0
	gps_reporting_interval_seconds =
   229ac:	601a      	str	r2, [r3, #0]
	LOG_INF("GPS initialized");
   229ae:	2303      	movs	r3, #3
   229b0:	f363 0007 	bfi	r0, r3, #0, #8
   229b4:	f365 108f 	bfi	r0, r5, #6, #10
   229b8:	4912      	ldr	r1, [pc, #72]	; (22a04 <gps_control_init+0xf0>)
   229ba:	f01b fad2 	bl	3df62 <log_string_sync>
	is_init = true;
   229be:	2301      	movs	r3, #1
   229c0:	7033      	strb	r3, [r6, #0]
	return err;
   229c2:	e7cf      	b.n	22964 <gps_control_init+0x50>
		return -EALREADY;
   229c4:	f06f 0477 	mvn.w	r4, #119	; 0x77
   229c8:	e7cc      	b.n	22964 <gps_control_init+0x50>
		return -EINVAL;
   229ca:	f06f 0415 	mvn.w	r4, #21
   229ce:	e7c9      	b.n	22964 <gps_control_init+0x50>
   229d0:	20029e86 	.word	0x20029e86
   229d4:	200237ec 	.word	0x200237ec
   229d8:	00043b4c 	.word	0x00043b4c
   229dc:	200237f0 	.word	0x200237f0
   229e0:	00041cb4 	.word	0x00041cb4
   229e4:	00041c2c 	.word	0x00041c2c
   229e8:	000437a3 	.word	0x000437a3
   229ec:	00043b58 	.word	0x00043b58
   229f0:	0002277d 	.word	0x0002277d
   229f4:	20023800 	.word	0x20023800
   229f8:	000226e9 	.word	0x000226e9
   229fc:	20023820 	.word	0x20023820
   22a00:	200237fc 	.word	0x200237fc
   22a04:	00043b7c 	.word	0x00043b7c

00022a08 <submit_poll_work>:
	return k_delayed_work_submit_to_queue(env_sensors_work_q,
   22a08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22a0c:	4b02      	ldr	r3, [pc, #8]	; (22a18 <submit_poll_work+0x10>)
   22a0e:	4342      	muls	r2, r0
   22a10:	4902      	ldr	r1, [pc, #8]	; (22a1c <submit_poll_work+0x14>)
   22a12:	6818      	ldr	r0, [r3, #0]
   22a14:	f017 bece 	b.w	3a7b4 <k_delayed_work_submit_to_queue>
   22a18:	20023864 	.word	0x20023864
   22a1c:	20023844 	.word	0x20023844

00022a20 <env_sensors_poll>:
	return initialized ? submit_poll_work(K_NO_WAIT) : -ENXIO;
   22a20:	4b04      	ldr	r3, [pc, #16]	; (22a34 <env_sensors_poll+0x14>)
   22a22:	781b      	ldrb	r3, [r3, #0]
   22a24:	b113      	cbz	r3, 22a2c <env_sensors_poll+0xc>
   22a26:	2000      	movs	r0, #0
   22a28:	f7ff bfee 	b.w	22a08 <submit_poll_work>
}
   22a2c:	f06f 0005 	mvn.w	r0, #5
   22a30:	4770      	bx	lr
   22a32:	bf00      	nop
   22a34:	20029e88 	.word	0x20029e88

00022a38 <env_sensors_init_and_start>:

/**@brief Initialize environment sensors. */
int env_sensors_init_and_start(struct k_work_q *work_q,
			       const env_sensors_data_ready_cb cb)
{
   22a38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a3c:	460e      	mov	r6, r1
	if ((work_q == NULL) || (cb == NULL)) {
   22a3e:	4607      	mov	r7, r0
   22a40:	2800      	cmp	r0, #0
   22a42:	d03a      	beq.n	22aba <env_sensors_init_and_start+0x82>
   22a44:	2900      	cmp	r1, #0
   22a46:	d038      	beq.n	22aba <env_sensors_init_and_start+0x82>
   22a48:	2403      	movs	r4, #3
   22a4a:	4d1f      	ldr	r5, [pc, #124]	; (22ac8 <env_sensors_init_and_start+0x90>)
	}

	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
		env_sensors[i]->dev =
			device_get_binding(env_sensors[i]->dev_name);
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   22a4c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 22ae8 <env_sensors_init_and_start+0xb0>
   22a50:	f8df a098 	ldr.w	sl, [pc, #152]	; 22aec <env_sensors_init_and_start+0xb4>
   22a54:	f8df b098 	ldr.w	fp, [pc, #152]	; 22af0 <env_sensors_init_and_start+0xb8>
			device_get_binding(env_sensors[i]->dev_name);
   22a58:	f8d5 9000 	ldr.w	r9, [r5]
   22a5c:	f8d9 0014 	ldr.w	r0, [r9, #20]
   22a60:	f015 faa2 	bl	37fa8 <z_impl_device_get_binding>
		env_sensors[i]->dev =
   22a64:	f8c9 0018 	str.w	r0, [r9, #24]
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   22a68:	f855 9b04 	ldr.w	r9, [r5], #4
   22a6c:	f8d9 3018 	ldr.w	r3, [r9, #24]
   22a70:	b973      	cbnz	r3, 22a90 <env_sensors_init_and_start+0x58>
   22a72:	238f      	movs	r3, #143	; 0x8f
   22a74:	4642      	mov	r2, r8
   22a76:	4651      	mov	r1, sl
   22a78:	4658      	mov	r0, fp
   22a7a:	f01b fa0e 	bl	3de9a <printk>
   22a7e:	f8d9 1014 	ldr.w	r1, [r9, #20]
   22a82:	4812      	ldr	r0, [pc, #72]	; (22acc <env_sensors_init_and_start+0x94>)
   22a84:	f01b fa09 	bl	3de9a <printk>
   22a88:	218f      	movs	r1, #143	; 0x8f
   22a8a:	4640      	mov	r0, r8
   22a8c:	f01b fa58 	bl	3df40 <assert_post_action>
	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
   22a90:	3c01      	subs	r4, #1
   22a92:	d1e1      	bne.n	22a58 <env_sensors_init_and_start+0x20>
			env_sensors[i]->dev_name);
	}

	env_sensors_work_q = work_q;
   22a94:	4b0e      	ldr	r3, [pc, #56]	; (22ad0 <env_sensors_init_and_start+0x98>)

	data_ready_cb = cb;

	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   22a96:	490f      	ldr	r1, [pc, #60]	; (22ad4 <env_sensors_init_and_start+0x9c>)
	env_sensors_work_q = work_q;
   22a98:	601f      	str	r7, [r3, #0]
	data_ready_cb = cb;
   22a9a:	4b0f      	ldr	r3, [pc, #60]	; (22ad8 <env_sensors_init_and_start+0xa0>)
	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   22a9c:	480f      	ldr	r0, [pc, #60]	; (22adc <env_sensors_init_and_start+0xa4>)
	data_ready_cb = cb;
   22a9e:	601e      	str	r6, [r3, #0]
	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   22aa0:	f01d fd2a 	bl	404f8 <k_delayed_work_init>

	initialized = true;
   22aa4:	2201      	movs	r2, #1
   22aa6:	4b0e      	ldr	r3, [pc, #56]	; (22ae0 <env_sensors_init_and_start+0xa8>)
   22aa8:	701a      	strb	r2, [r3, #0]

	return (data_send_interval_s > 0) ?
   22aaa:	4b0e      	ldr	r3, [pc, #56]	; (22ae4 <env_sensors_init_and_start+0xac>)
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   22aac:	681b      	ldr	r3, [r3, #0]
   22aae:	b143      	cbz	r3, 22ac2 <env_sensors_init_and_start+0x8a>
}
   22ab0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   22ab4:	2005      	movs	r0, #5
   22ab6:	f7ff bfa7 	b.w	22a08 <submit_poll_work>
		return -EINVAL;
   22aba:	f06f 0015 	mvn.w	r0, #21
}
   22abe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   22ac2:	4620      	mov	r0, r4
   22ac4:	e7fb      	b.n	22abe <env_sensors_init_and_start+0x86>
   22ac6:	bf00      	nop
   22ac8:	00041fc0 	.word	0x00041fc0
   22acc:	00043d85 	.word	0x00043d85
   22ad0:	20023864 	.word	0x20023864
   22ad4:	0001d361 	.word	0x0001d361
   22ad8:	20023840 	.word	0x20023840
   22adc:	20023844 	.word	0x20023844
   22ae0:	20029e88 	.word	0x20029e88
   22ae4:	20032080 	.word	0x20032080
   22ae8:	00043d50 	.word	0x00043d50
   22aec:	00043d71 	.word	0x00043d71
   22af0:	00043278 	.word	0x00043278

00022af4 <env_sensors_get_temperature>:

int env_sensors_get_temperature(env_sensor_data_t *sensor_data)
{
   22af4:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   22af6:	4604      	mov	r4, r0
   22af8:	2800      	cmp	r0, #0
   22afa:	d041      	beq.n	22b80 <env_sensors_get_temperature+0x8c>
	__asm__ volatile(
   22afc:	f04f 0320 	mov.w	r3, #32
   22b00:	f3ef 8611 	mrs	r6, BASEPRI
   22b04:	f383 8811 	msr	BASEPRI, r3
   22b08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22b0c:	481e      	ldr	r0, [pc, #120]	; (22b88 <env_sensors_get_temperature+0x94>)
   22b0e:	f017 fc4b 	bl	3a3a8 <z_spin_lock_valid>
   22b12:	b968      	cbnz	r0, 22b30 <env_sensors_get_temperature+0x3c>
   22b14:	234a      	movs	r3, #74	; 0x4a
   22b16:	4a1d      	ldr	r2, [pc, #116]	; (22b8c <env_sensors_get_temperature+0x98>)
   22b18:	491d      	ldr	r1, [pc, #116]	; (22b90 <env_sensors_get_temperature+0x9c>)
   22b1a:	481e      	ldr	r0, [pc, #120]	; (22b94 <env_sensors_get_temperature+0xa0>)
   22b1c:	f01b f9bd 	bl	3de9a <printk>
   22b20:	4919      	ldr	r1, [pc, #100]	; (22b88 <env_sensors_get_temperature+0x94>)
   22b22:	481d      	ldr	r0, [pc, #116]	; (22b98 <env_sensors_get_temperature+0xa4>)
   22b24:	f01b f9b9 	bl	3de9a <printk>
   22b28:	214a      	movs	r1, #74	; 0x4a
   22b2a:	4818      	ldr	r0, [pc, #96]	; (22b8c <env_sensors_get_temperature+0x98>)
   22b2c:	f01b fa08 	bl	3df40 <assert_post_action>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22b30:	4d1a      	ldr	r5, [pc, #104]	; (22b9c <env_sensors_get_temperature+0xa8>)
	z_spin_lock_set_owner(l);
   22b32:	4815      	ldr	r0, [pc, #84]	; (22b88 <env_sensors_get_temperature+0x94>)
   22b34:	f017 fc56 	bl	3a3e4 <z_spin_lock_set_owner>
   22b38:	4623      	mov	r3, r4
   22b3a:	f105 0410 	add.w	r4, r5, #16
   22b3e:	462a      	mov	r2, r5
   22b40:	ca03      	ldmia	r2!, {r0, r1}
   22b42:	42a2      	cmp	r2, r4
   22b44:	6018      	str	r0, [r3, #0]
   22b46:	6059      	str	r1, [r3, #4]
   22b48:	4615      	mov	r5, r2
   22b4a:	f103 0308 	add.w	r3, r3, #8
   22b4e:	d1f6      	bne.n	22b3e <env_sensors_get_temperature+0x4a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22b50:	480d      	ldr	r0, [pc, #52]	; (22b88 <env_sensors_get_temperature+0x94>)
   22b52:	f017 fc37 	bl	3a3c4 <z_spin_unlock_valid>
   22b56:	b968      	cbnz	r0, 22b74 <env_sensors_get_temperature+0x80>
   22b58:	235d      	movs	r3, #93	; 0x5d
   22b5a:	4a0c      	ldr	r2, [pc, #48]	; (22b8c <env_sensors_get_temperature+0x98>)
   22b5c:	4910      	ldr	r1, [pc, #64]	; (22ba0 <env_sensors_get_temperature+0xac>)
   22b5e:	480d      	ldr	r0, [pc, #52]	; (22b94 <env_sensors_get_temperature+0xa0>)
   22b60:	f01b f99b 	bl	3de9a <printk>
   22b64:	4908      	ldr	r1, [pc, #32]	; (22b88 <env_sensors_get_temperature+0x94>)
   22b66:	480f      	ldr	r0, [pc, #60]	; (22ba4 <env_sensors_get_temperature+0xb0>)
   22b68:	f01b f997 	bl	3de9a <printk>
   22b6c:	215d      	movs	r1, #93	; 0x5d
   22b6e:	4807      	ldr	r0, [pc, #28]	; (22b8c <env_sensors_get_temperature+0x98>)
   22b70:	f01b f9e6 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   22b74:	f386 8811 	msr	BASEPRI, r6
   22b78:	f3bf 8f6f 	isb	sy
	}
	k_spinlock_key_t key = k_spin_lock(&temp_sensor.lock);

	memcpy(sensor_data, &(temp_sensor.sensor), sizeof(temp_sensor.sensor));
	k_spin_unlock(&temp_sensor.lock, key);
	return 0;
   22b7c:	2000      	movs	r0, #0
}
   22b7e:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   22b80:	f04f 30ff 	mov.w	r0, #4294967295
   22b84:	e7fb      	b.n	22b7e <env_sensors_get_temperature+0x8a>
   22b86:	bf00      	nop
   22b88:	20031cfc 	.word	0x20031cfc
   22b8c:	00043dc8 	.word	0x00043dc8
   22b90:	00043dee 	.word	0x00043dee
   22b94:	00043278 	.word	0x00043278
   22b98:	00043e03 	.word	0x00043e03
   22b9c:	20031ce0 	.word	0x20031ce0
   22ba0:	00043e1b 	.word	0x00043e1b
   22ba4:	00043e32 	.word	0x00043e32

00022ba8 <env_sensors_get_humidity>:

int env_sensors_get_humidity(env_sensor_data_t *sensor_data)
{
   22ba8:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   22baa:	4604      	mov	r4, r0
   22bac:	2800      	cmp	r0, #0
   22bae:	d041      	beq.n	22c34 <env_sensors_get_humidity+0x8c>
	__asm__ volatile(
   22bb0:	f04f 0320 	mov.w	r3, #32
   22bb4:	f3ef 8611 	mrs	r6, BASEPRI
   22bb8:	f383 8811 	msr	BASEPRI, r3
   22bbc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22bc0:	481e      	ldr	r0, [pc, #120]	; (22c3c <env_sensors_get_humidity+0x94>)
   22bc2:	f017 fbf1 	bl	3a3a8 <z_spin_lock_valid>
   22bc6:	b968      	cbnz	r0, 22be4 <env_sensors_get_humidity+0x3c>
   22bc8:	234a      	movs	r3, #74	; 0x4a
   22bca:	4a1d      	ldr	r2, [pc, #116]	; (22c40 <env_sensors_get_humidity+0x98>)
   22bcc:	491d      	ldr	r1, [pc, #116]	; (22c44 <env_sensors_get_humidity+0x9c>)
   22bce:	481e      	ldr	r0, [pc, #120]	; (22c48 <env_sensors_get_humidity+0xa0>)
   22bd0:	f01b f963 	bl	3de9a <printk>
   22bd4:	4919      	ldr	r1, [pc, #100]	; (22c3c <env_sensors_get_humidity+0x94>)
   22bd6:	481d      	ldr	r0, [pc, #116]	; (22c4c <env_sensors_get_humidity+0xa4>)
   22bd8:	f01b f95f 	bl	3de9a <printk>
   22bdc:	214a      	movs	r1, #74	; 0x4a
   22bde:	4818      	ldr	r0, [pc, #96]	; (22c40 <env_sensors_get_humidity+0x98>)
   22be0:	f01b f9ae 	bl	3df40 <assert_post_action>
   22be4:	4d1a      	ldr	r5, [pc, #104]	; (22c50 <env_sensors_get_humidity+0xa8>)
	z_spin_lock_set_owner(l);
   22be6:	4815      	ldr	r0, [pc, #84]	; (22c3c <env_sensors_get_humidity+0x94>)
   22be8:	f017 fbfc 	bl	3a3e4 <z_spin_lock_set_owner>
   22bec:	4623      	mov	r3, r4
   22bee:	f105 0410 	add.w	r4, r5, #16
   22bf2:	462a      	mov	r2, r5
   22bf4:	ca03      	ldmia	r2!, {r0, r1}
   22bf6:	42a2      	cmp	r2, r4
   22bf8:	6018      	str	r0, [r3, #0]
   22bfa:	6059      	str	r1, [r3, #4]
   22bfc:	4615      	mov	r5, r2
   22bfe:	f103 0308 	add.w	r3, r3, #8
   22c02:	d1f6      	bne.n	22bf2 <env_sensors_get_humidity+0x4a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22c04:	480d      	ldr	r0, [pc, #52]	; (22c3c <env_sensors_get_humidity+0x94>)
   22c06:	f017 fbdd 	bl	3a3c4 <z_spin_unlock_valid>
   22c0a:	b968      	cbnz	r0, 22c28 <env_sensors_get_humidity+0x80>
   22c0c:	235d      	movs	r3, #93	; 0x5d
   22c0e:	4a0c      	ldr	r2, [pc, #48]	; (22c40 <env_sensors_get_humidity+0x98>)
   22c10:	4910      	ldr	r1, [pc, #64]	; (22c54 <env_sensors_get_humidity+0xac>)
   22c12:	480d      	ldr	r0, [pc, #52]	; (22c48 <env_sensors_get_humidity+0xa0>)
   22c14:	f01b f941 	bl	3de9a <printk>
   22c18:	4908      	ldr	r1, [pc, #32]	; (22c3c <env_sensors_get_humidity+0x94>)
   22c1a:	480f      	ldr	r0, [pc, #60]	; (22c58 <env_sensors_get_humidity+0xb0>)
   22c1c:	f01b f93d 	bl	3de9a <printk>
   22c20:	215d      	movs	r1, #93	; 0x5d
   22c22:	4807      	ldr	r0, [pc, #28]	; (22c40 <env_sensors_get_humidity+0x98>)
   22c24:	f01b f98c 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   22c28:	f386 8811 	msr	BASEPRI, r6
   22c2c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&humid_sensor.lock);

	memcpy(sensor_data, &(humid_sensor.sensor),
		sizeof(humid_sensor.sensor));
	k_spin_unlock(&humid_sensor.lock, key);
	return 0;
   22c30:	2000      	movs	r0, #0
}
   22c32:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   22c34:	f04f 30ff 	mov.w	r0, #4294967295
   22c38:	e7fb      	b.n	22c32 <env_sensors_get_humidity+0x8a>
   22c3a:	bf00      	nop
   22c3c:	20031cbc 	.word	0x20031cbc
   22c40:	00043dc8 	.word	0x00043dc8
   22c44:	00043dee 	.word	0x00043dee
   22c48:	00043278 	.word	0x00043278
   22c4c:	00043e03 	.word	0x00043e03
   22c50:	20031ca0 	.word	0x20031ca0
   22c54:	00043e1b 	.word	0x00043e1b
   22c58:	00043e32 	.word	0x00043e32

00022c5c <env_sensors_get_pressure>:

int env_sensors_get_pressure(env_sensor_data_t *sensor_data)
{
   22c5c:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   22c5e:	4604      	mov	r4, r0
   22c60:	2800      	cmp	r0, #0
   22c62:	d041      	beq.n	22ce8 <env_sensors_get_pressure+0x8c>
	__asm__ volatile(
   22c64:	f04f 0320 	mov.w	r3, #32
   22c68:	f3ef 8611 	mrs	r6, BASEPRI
   22c6c:	f383 8811 	msr	BASEPRI, r3
   22c70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22c74:	481e      	ldr	r0, [pc, #120]	; (22cf0 <env_sensors_get_pressure+0x94>)
   22c76:	f017 fb97 	bl	3a3a8 <z_spin_lock_valid>
   22c7a:	b968      	cbnz	r0, 22c98 <env_sensors_get_pressure+0x3c>
   22c7c:	234a      	movs	r3, #74	; 0x4a
   22c7e:	4a1d      	ldr	r2, [pc, #116]	; (22cf4 <env_sensors_get_pressure+0x98>)
   22c80:	491d      	ldr	r1, [pc, #116]	; (22cf8 <env_sensors_get_pressure+0x9c>)
   22c82:	481e      	ldr	r0, [pc, #120]	; (22cfc <env_sensors_get_pressure+0xa0>)
   22c84:	f01b f909 	bl	3de9a <printk>
   22c88:	4919      	ldr	r1, [pc, #100]	; (22cf0 <env_sensors_get_pressure+0x94>)
   22c8a:	481d      	ldr	r0, [pc, #116]	; (22d00 <env_sensors_get_pressure+0xa4>)
   22c8c:	f01b f905 	bl	3de9a <printk>
   22c90:	214a      	movs	r1, #74	; 0x4a
   22c92:	4818      	ldr	r0, [pc, #96]	; (22cf4 <env_sensors_get_pressure+0x98>)
   22c94:	f01b f954 	bl	3df40 <assert_post_action>
   22c98:	4d1a      	ldr	r5, [pc, #104]	; (22d04 <env_sensors_get_pressure+0xa8>)
	z_spin_lock_set_owner(l);
   22c9a:	4815      	ldr	r0, [pc, #84]	; (22cf0 <env_sensors_get_pressure+0x94>)
   22c9c:	f017 fba2 	bl	3a3e4 <z_spin_lock_set_owner>
   22ca0:	4623      	mov	r3, r4
   22ca2:	f105 0410 	add.w	r4, r5, #16
   22ca6:	462a      	mov	r2, r5
   22ca8:	ca03      	ldmia	r2!, {r0, r1}
   22caa:	42a2      	cmp	r2, r4
   22cac:	6018      	str	r0, [r3, #0]
   22cae:	6059      	str	r1, [r3, #4]
   22cb0:	4615      	mov	r5, r2
   22cb2:	f103 0308 	add.w	r3, r3, #8
   22cb6:	d1f6      	bne.n	22ca6 <env_sensors_get_pressure+0x4a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22cb8:	480d      	ldr	r0, [pc, #52]	; (22cf0 <env_sensors_get_pressure+0x94>)
   22cba:	f017 fb83 	bl	3a3c4 <z_spin_unlock_valid>
   22cbe:	b968      	cbnz	r0, 22cdc <env_sensors_get_pressure+0x80>
   22cc0:	235d      	movs	r3, #93	; 0x5d
   22cc2:	4a0c      	ldr	r2, [pc, #48]	; (22cf4 <env_sensors_get_pressure+0x98>)
   22cc4:	4910      	ldr	r1, [pc, #64]	; (22d08 <env_sensors_get_pressure+0xac>)
   22cc6:	480d      	ldr	r0, [pc, #52]	; (22cfc <env_sensors_get_pressure+0xa0>)
   22cc8:	f01b f8e7 	bl	3de9a <printk>
   22ccc:	4908      	ldr	r1, [pc, #32]	; (22cf0 <env_sensors_get_pressure+0x94>)
   22cce:	480f      	ldr	r0, [pc, #60]	; (22d0c <env_sensors_get_pressure+0xb0>)
   22cd0:	f01b f8e3 	bl	3de9a <printk>
   22cd4:	215d      	movs	r1, #93	; 0x5d
   22cd6:	4807      	ldr	r0, [pc, #28]	; (22cf4 <env_sensors_get_pressure+0x98>)
   22cd8:	f01b f932 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   22cdc:	f386 8811 	msr	BASEPRI, r6
   22ce0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&pressure_sensor.lock);

	memcpy(sensor_data, &(pressure_sensor.sensor),
		sizeof(pressure_sensor.sensor));
	k_spin_unlock(&pressure_sensor.lock, key);
	return 0;
   22ce4:	2000      	movs	r0, #0
}
   22ce6:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   22ce8:	f04f 30ff 	mov.w	r0, #4294967295
   22cec:	e7fb      	b.n	22ce6 <env_sensors_get_pressure+0x8a>
   22cee:	bf00      	nop
   22cf0:	20031cdc 	.word	0x20031cdc
   22cf4:	00043dc8 	.word	0x00043dc8
   22cf8:	00043dee 	.word	0x00043dee
   22cfc:	00043278 	.word	0x00043278
   22d00:	00043e03 	.word	0x00043e03
   22d04:	20031cc0 	.word	0x20031cc0
   22d08:	00043e1b 	.word	0x00043e1b
   22d0c:	00043e32 	.word	0x00043e32

00022d10 <env_sensors_set_send_interval>:
{
	return -1;
}

void env_sensors_set_send_interval(const u32_t interval_s)
{
   22d10:	b508      	push	{r3, lr}
	if (interval_s == data_send_interval_s) {
   22d12:	4b11      	ldr	r3, [pc, #68]	; (22d58 <env_sensors_set_send_interval+0x48>)
   22d14:	681a      	ldr	r2, [r3, #0]
   22d16:	4282      	cmp	r2, r0
   22d18:	d01d      	beq.n	22d56 <env_sensors_set_send_interval+0x46>
		return;
	}

	data_send_interval_s = MIN(interval_s, MAX_INTERVAL_S);
   22d1a:	4a10      	ldr	r2, [pc, #64]	; (22d5c <env_sensors_set_send_interval+0x4c>)
   22d1c:	4290      	cmp	r0, r2
   22d1e:	bf94      	ite	ls
   22d20:	6018      	strls	r0, [r3, #0]
   22d22:	601a      	strhi	r2, [r3, #0]

	if (!initialized) {
   22d24:	4b0e      	ldr	r3, [pc, #56]	; (22d60 <env_sensors_set_send_interval+0x50>)
   22d26:	781b      	ldrb	r3, [r3, #0]
   22d28:	b1ab      	cbz	r3, 22d56 <env_sensors_set_send_interval+0x46>
		return;
	}

	if (data_send_interval_s) {
   22d2a:	b118      	cbz	r0, 22d34 <env_sensors_set_send_interval+0x24>
		/* restart work for new interval to take effect */
		env_sensors_poll();
	} else if (k_delayed_work_remaining_get(&env_sensors_poller) > 0) {
		k_delayed_work_cancel(&env_sensors_poller);
	}
}
   22d2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		env_sensors_poll();
   22d30:	f7ff be76 	b.w	22a20 <env_sensors_poll>
	return k_ticks_to_ms_floor64(z_timeout_remaining(&work->timeout));
   22d34:	480b      	ldr	r0, [pc, #44]	; (22d64 <env_sensors_set_send_interval+0x54>)
   22d36:	f017 ff47 	bl	3abc8 <z_timeout_remaining>
   22d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22d3e:	fb80 0103 	smull	r0, r1, r0, r3
   22d42:	0bc3      	lsrs	r3, r0, #15
   22d44:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	} else if (k_delayed_work_remaining_get(&env_sensors_poller) > 0) {
   22d48:	2b00      	cmp	r3, #0
   22d4a:	dd04      	ble.n	22d56 <env_sensors_set_send_interval+0x46>
}
   22d4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_cancel(&env_sensors_poller);
   22d50:	4805      	ldr	r0, [pc, #20]	; (22d68 <env_sensors_set_send_interval+0x58>)
   22d52:	f017 bdbb 	b.w	3a8cc <k_delayed_work_cancel>
}
   22d56:	bd08      	pop	{r3, pc}
   22d58:	20032080 	.word	0x20032080
   22d5c:	0020c49b 	.word	0x0020c49b
   22d60:	20029e88 	.word	0x20029e88
   22d64:	20023850 	.word	0x20023850
   22d68:	20023844 	.word	0x20023844

00022d6c <env_sensors_set_backoff_enable>:
	return data_send_interval_s;
}

void env_sensors_set_backoff_enable(const bool enable)
{
	backoff_enabled = enable;
   22d6c:	4b01      	ldr	r3, [pc, #4]	; (22d74 <env_sensors_set_backoff_enable+0x8>)
   22d6e:	7018      	strb	r0, [r3, #0]
}
   22d70:	4770      	bx	lr
   22d72:	bf00      	nop
   22d74:	20029e87 	.word	0x20029e87

00022d78 <z_sys_mem_pool_block_free>:
	return 0;
}

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   22d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22d7c:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   22d7e:	7a83      	ldrb	r3, [r0, #10]
{
   22d80:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   22d82:	009b      	lsls	r3, r3, #2
   22d84:	3307      	adds	r3, #7
   22d86:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   22d8a:	ebad 0d03 	sub.w	sp, sp, r3
   22d8e:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   22d90:	6843      	ldr	r3, [r0, #4]
{
   22d92:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
   22d94:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   22d96:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   22d98:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   22d9c:	4281      	cmp	r1, r0
   22d9e:	d222      	bcs.n	22de6 <z_sys_mem_pool_block_free+0x6e>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   22da0:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   22da2:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   22da4:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   22da8:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   22daa:	d001      	beq.n	22db0 <z_sys_mem_pool_block_free+0x38>
   22dac:	f01a fdda 	bl	3d964 <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   22db0:	4604      	mov	r4, r0
	while (level >= 0) {
   22db2:	f1b8 0f00 	cmp.w	r8, #0
   22db6:	da1e      	bge.n	22df6 <z_sys_mem_pool_block_free+0x7e>
	__ASSERT(0, "out of levels");
   22db8:	23bc      	movs	r3, #188	; 0xbc
   22dba:	4a50      	ldr	r2, [pc, #320]	; (22efc <z_sys_mem_pool_block_free+0x184>)
   22dbc:	4950      	ldr	r1, [pc, #320]	; (22f00 <z_sys_mem_pool_block_free+0x188>)
   22dbe:	4851      	ldr	r0, [pc, #324]	; (22f04 <z_sys_mem_pool_block_free+0x18c>)
   22dc0:	f01b f86b 	bl	3de9a <printk>
   22dc4:	4850      	ldr	r0, [pc, #320]	; (22f08 <z_sys_mem_pool_block_free+0x190>)
   22dc6:	f01b f868 	bl	3de9a <printk>
   22dca:	21bc      	movs	r1, #188	; 0xbc
   22dcc:	484b      	ldr	r0, [pc, #300]	; (22efc <z_sys_mem_pool_block_free+0x184>)
   22dce:	f01b f8b7 	bl	3df40 <assert_post_action>
	return -1;
   22dd2:	f04f 34ff 	mov.w	r4, #4294967295
	pool_irq_unlock(p, key);
   22dd6:	4621      	mov	r1, r4
   22dd8:	7c30      	ldrb	r0, [r6, #16]
   22dda:	f01a fdcc 	bl	3d976 <pool_irq_unlock.isra.4>
}
   22dde:	3714      	adds	r7, #20
   22de0:	46bd      	mov	sp, r7
   22de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   22de6:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   22de8:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   22dea:	089b      	lsrs	r3, r3, #2
   22dec:	f023 0303 	bic.w	r3, r3, #3
   22df0:	f844 3f04 	str.w	r3, [r4, #4]!
   22df4:	e7d2      	b.n	22d9c <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   22df6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   22dfa:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
   22dfc:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
   22e00:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   22e02:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   22e04:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
   22e06:	603b      	str	r3, [r7, #0]
   22e08:	eb03 090a 	add.w	r9, r3, sl
	int bit = get_bit_ptr(p, level, bn, &word);
   22e0c:	4630      	mov	r0, r6
   22e0e:	f107 030c 	add.w	r3, r7, #12
   22e12:	f01a fd90 	bl	3d936 <get_bit_ptr>
	return (*word >> bit) & 1;
   22e16:	68fb      	ldr	r3, [r7, #12]
   22e18:	681b      	ldr	r3, [r3, #0]
   22e1a:	fa23 f000 	lsr.w	r0, r3, r0
		__ASSERT(alloc_bit_is_set(p, level, bn),
   22e1e:	07c3      	lsls	r3, r0, #31
   22e20:	d40d      	bmi.n	22e3e <z_sys_mem_pool_block_free+0xc6>
   22e22:	23a3      	movs	r3, #163	; 0xa3
   22e24:	4a35      	ldr	r2, [pc, #212]	; (22efc <z_sys_mem_pool_block_free+0x184>)
   22e26:	4939      	ldr	r1, [pc, #228]	; (22f0c <z_sys_mem_pool_block_free+0x194>)
   22e28:	4836      	ldr	r0, [pc, #216]	; (22f04 <z_sys_mem_pool_block_free+0x18c>)
   22e2a:	f01b f836 	bl	3de9a <printk>
   22e2e:	4649      	mov	r1, r9
   22e30:	4837      	ldr	r0, [pc, #220]	; (22f10 <z_sys_mem_pool_block_free+0x198>)
   22e32:	f01b f832 	bl	3de9a <printk>
   22e36:	21a3      	movs	r1, #163	; 0xa3
   22e38:	4830      	ldr	r0, [pc, #192]	; (22efc <z_sys_mem_pool_block_free+0x184>)
   22e3a:	f01b f881 	bl	3df40 <assert_post_action>
	int bit = get_bit_ptr(p, level, bn, &word);
   22e3e:	f107 030c 	add.w	r3, r7, #12
   22e42:	462a      	mov	r2, r5
   22e44:	4641      	mov	r1, r8
   22e46:	4630      	mov	r0, r6
   22e48:	f01a fd75 	bl	3d936 <get_bit_ptr>
	*word &= ~(1<<bit);
   22e4c:	2301      	movs	r3, #1
   22e4e:	68fa      	ldr	r2, [r7, #12]
   22e50:	fa03 f000 	lsl.w	r0, r3, r0
   22e54:	6813      	ldr	r3, [r2, #0]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   22e56:	6839      	ldr	r1, [r7, #0]
   22e58:	ea23 0300 	bic.w	r3, r3, r0
   22e5c:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   22e5e:	230c      	movs	r3, #12
   22e60:	68f2      	ldr	r2, [r6, #12]
   22e62:	fb03 2308 	mla	r3, r3, r8, r2
   22e66:	1d1a      	adds	r2, r3, #4
   22e68:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   22e6c:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   22e6e:	4621      	mov	r1, r4
   22e70:	f8c9 2004 	str.w	r2, [r9, #4]

	list->tail->next = node;
   22e74:	689a      	ldr	r2, [r3, #8]
   22e76:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   22e7a:	f8c3 9008 	str.w	r9, [r3, #8]
   22e7e:	7c30      	ldrb	r0, [r6, #16]
   22e80:	f01a fd79 	bl	3d976 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   22e84:	7c30      	ldrb	r0, [r6, #16]
   22e86:	f010 0001 	ands.w	r0, r0, #1
   22e8a:	d001      	beq.n	22e90 <z_sys_mem_pool_block_free+0x118>
   22e8c:	f01a fd6a 	bl	3d964 <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   22e90:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   22e92:	f1b8 0f00 	cmp.w	r8, #0
   22e96:	d09e      	beq.n	22dd6 <z_sys_mem_pool_block_free+0x5e>
	int bit = get_bit_ptr(p, level, bn, &word);
   22e98:	f107 030c 	add.w	r3, r7, #12
   22e9c:	462a      	mov	r2, r5
   22e9e:	4641      	mov	r1, r8
   22ea0:	4630      	mov	r0, r6
   22ea2:	f01a fd48 	bl	3d936 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   22ea6:	68fb      	ldr	r3, [r7, #12]
   22ea8:	2800      	cmp	r0, #0
   22eaa:	bfb8      	it	lt
   22eac:	3003      	addlt	r0, #3
   22eae:	681b      	ldr	r3, [r3, #0]
   22eb0:	f020 0003 	bic.w	r0, r0, #3
   22eb4:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   22eb8:	f010 000f 	ands.w	r0, r0, #15
   22ebc:	d18b      	bne.n	22dd6 <z_sys_mem_pool_block_free+0x5e>
	node->next = NULL;
   22ebe:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
   22ec0:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
   22ec4:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   22ec6:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   22eca:	4353      	muls	r3, r2
   22ecc:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
   22ece:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   22ed0:	18d1      	adds	r1, r2, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   22ed2:	f8d1 9004 	ldr.w	r9, [r1, #4]
   22ed6:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
   22eda:	2804      	cmp	r0, #4
   22edc:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
   22ee0:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
   22ee4:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
   22ee8:	f8c1 c004 	str.w	ip, [r1, #4]
   22eec:	d1ea      	bne.n	22ec4 <z_sys_mem_pool_block_free+0x14c>
		bn = bn / 4;
   22eee:	2d00      	cmp	r5, #0
   22ef0:	bfb8      	it	lt
   22ef2:	3503      	addlt	r5, #3
		level = level - 1;
   22ef4:	f108 38ff 	add.w	r8, r8, #4294967295
		bn = bn / 4;
   22ef8:	10ad      	asrs	r5, r5, #2
   22efa:	e75a      	b.n	22db2 <z_sys_mem_pool_block_free+0x3a>
   22efc:	00043e53 	.word	0x00043e53
   22f00:	00048cfb 	.word	0x00048cfb
   22f04:	00043278 	.word	0x00043278
   22f08:	00043ebb 	.word	0x00043ebb
   22f0c:	00043e77 	.word	0x00043e77
   22f10:	00043e96 	.word	0x00043e96

00022f14 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   22f14:	680b      	ldr	r3, [r1, #0]
   22f16:	3301      	adds	r3, #1
   22f18:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   22f1a:	4b01      	ldr	r3, [pc, #4]	; (22f20 <char_out+0xc>)
   22f1c:	681b      	ldr	r3, [r3, #0]
   22f1e:	4718      	bx	r3
   22f20:	20032084 	.word	0x20032084

00022f24 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
   22f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f28:	b085      	sub	sp, #20
   22f2a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   22f2c:	469b      	mov	fp, r3
   22f2e:	2c01      	cmp	r4, #1
   22f30:	bfb8      	it	lt
   22f32:	2401      	movlt	r4, #1
   22f34:	2b01      	cmp	r3, #1
   22f36:	bf0c      	ite	eq
   22f38:	2330      	moveq	r3, #48	; 0x30
   22f3a:	2320      	movne	r3, #32
   22f3c:	4616      	mov	r6, r2
   22f3e:	4682      	mov	sl, r0
   22f40:	4688      	mov	r8, r1
   22f42:	2501      	movs	r5, #1
   22f44:	270a      	movs	r7, #10
   22f46:	2200      	movs	r2, #0
   22f48:	f8df 906c 	ldr.w	r9, [pc, #108]	; 22fb8 <_printk_dec_ulong+0x94>
   22f4c:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
   22f4e:	fbb6 f3f9 	udiv	r3, r6, r9
   22f52:	9301      	str	r3, [sp, #4]
   22f54:	b90a      	cbnz	r2, 22f5a <_printk_dec_ulong+0x36>
   22f56:	45b1      	cmp	r9, r6
   22f58:	d81c      	bhi.n	22f94 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
   22f5a:	9b01      	ldr	r3, [sp, #4]
   22f5c:	4641      	mov	r1, r8
   22f5e:	f103 0030 	add.w	r0, r3, #48	; 0x30
   22f62:	47d0      	blx	sl
			found_largest_digit = 1;
   22f64:	2201      	movs	r2, #1
			digits++;
   22f66:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
   22f68:	9b01      	ldr	r3, [sp, #4]
		remaining--;
   22f6a:	3f01      	subs	r7, #1
		remainder %= pos;
   22f6c:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
   22f70:	230a      	movs	r3, #10
	while (pos >= 10) {
   22f72:	2f01      	cmp	r7, #1
		pos /= 10;
   22f74:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
   22f78:	d1e9      	bne.n	22f4e <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
   22f7a:	4641      	mov	r1, r8
   22f7c:	f106 0030 	add.w	r0, r6, #48	; 0x30
   22f80:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
   22f82:	f1bb 0f03 	cmp.w	fp, #3
   22f86:	d102      	bne.n	22f8e <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
   22f88:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
   22f8a:	2c00      	cmp	r4, #0
   22f8c:	dc0e      	bgt.n	22fac <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
   22f8e:	b005      	add	sp, #20
   22f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
   22f94:	42bc      	cmp	r4, r7
   22f96:	dbe7      	blt.n	22f68 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
   22f98:	f1bb 0f02 	cmp.w	fp, #2
   22f9c:	d8e4      	bhi.n	22f68 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   22f9e:	4641      	mov	r1, r8
   22fa0:	9802      	ldr	r0, [sp, #8]
   22fa2:	9203      	str	r2, [sp, #12]
			digits++;
   22fa4:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   22fa6:	47d0      	blx	sl
			digits++;
   22fa8:	9a03      	ldr	r2, [sp, #12]
   22faa:	e7dd      	b.n	22f68 <_printk_dec_ulong+0x44>
			out(' ', ctx);
   22fac:	4641      	mov	r1, r8
   22fae:	2020      	movs	r0, #32
   22fb0:	47d0      	blx	sl
   22fb2:	3c01      	subs	r4, #1
   22fb4:	e7e9      	b.n	22f8a <_printk_dec_ulong+0x66>
   22fb6:	bf00      	nop
   22fb8:	3b9aca00 	.word	0x3b9aca00

00022fbc <__printk_hook_install>:
	_char_out = fn;
   22fbc:	4b01      	ldr	r3, [pc, #4]	; (22fc4 <__printk_hook_install+0x8>)
   22fbe:	6018      	str	r0, [r3, #0]
}
   22fc0:	4770      	bx	lr
   22fc2:	bf00      	nop
   22fc4:	20032084 	.word	0x20032084

00022fc8 <vprintk>:
	struct out_context ctx = { 0 };
   22fc8:	2300      	movs	r3, #0
{
   22fca:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
   22fcc:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   22fce:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
   22fd0:	4803      	ldr	r0, [pc, #12]	; (22fe0 <vprintk+0x18>)
   22fd2:	460b      	mov	r3, r1
   22fd4:	a901      	add	r1, sp, #4
   22fd6:	f01a fdf0 	bl	3dbba <z_vprintk>
}
   22fda:	b003      	add	sp, #12
   22fdc:	f85d fb04 	ldr.w	pc, [sp], #4
   22fe0:	00022f15 	.word	0x00022f15

00022fe4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   22fe4:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   22fe6:	2500      	movs	r5, #0
{
   22fe8:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   22fea:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   22fee:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   22ff0:	a901      	add	r1, sp, #4
   22ff2:	4805      	ldr	r0, [pc, #20]	; (23008 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   22ff4:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   22ff6:	f01a fde0 	bl	3dbba <z_vprintk>

	if (ctx.count < ctx.max) {
   22ffa:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   22ffe:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   23000:	bfb8      	it	lt
   23002:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   23004:	b005      	add	sp, #20
   23006:	bd30      	pop	{r4, r5, pc}
   23008:	0003db95 	.word	0x0003db95

0002300c <nordicsemi_nrf91_init>:
	__asm__ volatile(
   2300c:	f04f 0220 	mov.w	r2, #32
   23010:	f3ef 8311 	mrs	r3, BASEPRI
   23014:	f382 8811 	msr	BASEPRI, r2
   23018:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   2301c:	2101      	movs	r1, #1
   2301e:	4a04      	ldr	r2, [pc, #16]	; (23030 <nordicsemi_nrf91_init+0x24>)
   23020:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   23024:	f383 8811 	msr	BASEPRI, r3
   23028:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   2302c:	2000      	movs	r0, #0
   2302e:	4770      	bx	lr
   23030:	40039000 	.word	0x40039000

00023034 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   23034:	b120      	cbz	r0, 23040 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   23036:	4b03      	ldr	r3, [pc, #12]	; (23044 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   23038:	0180      	lsls	r0, r0, #6
   2303a:	f043 0301 	orr.w	r3, r3, #1
   2303e:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   23040:	4770      	bx	lr
   23042:	bf00      	nop
   23044:	00041dc0 	.word	0x00041dc0

00023048 <log_generic>:
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else  if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		u32_t timestamp = timestamp_func();
   23048:	4b13      	ldr	r3, [pc, #76]	; (23098 <log_generic+0x50>)
{
   2304a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		u32_t timestamp = timestamp_func();
   2304e:	681b      	ldr	r3, [r3, #0]
{
   23050:	4680      	mov	r8, r0
   23052:	4689      	mov	r9, r1
   23054:	4692      	mov	sl, r2
		u32_t timestamp = timestamp_func();
   23056:	4798      	blx	r3

		for (int i = 0; i < log_backend_count_get(); i++) {
   23058:	2600      	movs	r6, #0
		u32_t timestamp = timestamp_func();
   2305a:	4607      	mov	r7, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   2305c:	4c0f      	ldr	r4, [pc, #60]	; (2309c <log_generic+0x54>)
   2305e:	4d10      	ldr	r5, [pc, #64]	; (230a0 <log_generic+0x58>)
   23060:	1b2d      	subs	r5, r5, r4
   23062:	112d      	asrs	r5, r5, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
   23064:	42ae      	cmp	r6, r5
   23066:	db02      	blt.n	2306e <log_generic+0x26>
			args[i] = va_arg(ap, log_arg_t);
		}

		log_n(fmt, args, nargs, src_level);
	}
}
   23068:	b003      	add	sp, #12
   2306a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (log_backend_is_active(backend)) {
   2306e:	4620      	mov	r0, r4
   23070:	f01a ff70 	bl	3df54 <log_backend_is_active>
   23074:	b160      	cbz	r0, 23090 <log_generic+0x48>
	if (backend->api->put_sync_string) {
   23076:	6823      	ldr	r3, [r4, #0]
   23078:	f8d3 b004 	ldr.w	fp, [r3, #4]
   2307c:	f1bb 0f00 	cmp.w	fp, #0
   23080:	d006      	beq.n	23090 <log_generic+0x48>
		backend->api->put_sync_string(backend, src_level,
   23082:	f8cd a000 	str.w	sl, [sp]
   23086:	464b      	mov	r3, r9
   23088:	463a      	mov	r2, r7
   2308a:	4641      	mov	r1, r8
   2308c:	4620      	mov	r0, r4
   2308e:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
   23090:	3601      	adds	r6, #1
   23092:	3410      	adds	r4, #16
   23094:	e7e6      	b.n	23064 <log_generic+0x1c>
   23096:	bf00      	nop
   23098:	20032088 	.word	0x20032088
   2309c:	00041d5c 	.word	0x00041d5c
   230a0:	00041d7c 	.word	0x00041d7c

000230a4 <log_core_init>:
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
   230a4:	4b03      	ldr	r3, [pc, #12]	; (230b4 <log_core_init+0x10>)
   230a6:	4a04      	ldr	r2, [pc, #16]	; (230b8 <log_core_init+0x14>)
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
   230a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   230ac:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   230ae:	f000 ba35 	b.w	2351c <log_output_timestamp_freq_set>
   230b2:	bf00      	nop
   230b4:	20032088 	.word	0x20032088
   230b8:	0003df5b 	.word	0x0003df5b

000230bc <log_source_name_get>:
   230bc:	4a04      	ldr	r2, [pc, #16]	; (230d0 <log_source_name_get+0x14>)
   230be:	4b05      	ldr	r3, [pc, #20]	; (230d4 <log_source_name_get+0x18>)
   230c0:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(u32_t domain_id, u32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   230c2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   230c6:	bf34      	ite	cc
   230c8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   230cc:	2000      	movcs	r0, #0
}
   230ce:	4770      	bx	lr
   230d0:	00041c2c 	.word	0x00041c2c
   230d4:	00041d5c 	.word	0x00041d5c

000230d8 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			u32_t level)
{
   230d8:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	u32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   230da:	4c10      	ldr	r4, [pc, #64]	; (2311c <log_backend_enable+0x44>)
{
   230dc:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   230de:	1b04      	subs	r4, r0, r4
   230e0:	1124      	asrs	r4, r4, #4
   230e2:	3401      	adds	r4, #1
{
   230e4:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
   230e6:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   230e8:	b948      	cbnz	r0, 230fe <log_backend_enable+0x26>
   230ea:	490d      	ldr	r1, [pc, #52]	; (23120 <log_backend_enable+0x48>)
   230ec:	480d      	ldr	r0, [pc, #52]	; (23124 <log_backend_enable+0x4c>)
   230ee:	23c0      	movs	r3, #192	; 0xc0
   230f0:	4a0d      	ldr	r2, [pc, #52]	; (23128 <log_backend_enable+0x50>)
   230f2:	f01a fed2 	bl	3de9a <printk>
   230f6:	21c0      	movs	r1, #192	; 0xc0
   230f8:	480b      	ldr	r0, [pc, #44]	; (23128 <log_backend_enable+0x50>)
   230fa:	f01a ff21 	bl	3df40 <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   230fe:	2201      	movs	r2, #1
	backend->cb->id = id;
   23100:	686b      	ldr	r3, [r5, #4]
   23102:	711c      	strb	r4, [r3, #4]
	log_backend_activate(backend, ctx);

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
   23104:	4c09      	ldr	r4, [pc, #36]	; (2312c <log_backend_enable+0x54>)
	backend->cb->active = true;
   23106:	715a      	strb	r2, [r3, #5]
   23108:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   2310a:	601e      	str	r6, [r3, #0]
   2310c:	b912      	cbnz	r2, 23114 <log_backend_enable+0x3c>
	z_impl_k_sem_give(sem);
   2310e:	4808      	ldr	r0, [pc, #32]	; (23130 <log_backend_enable+0x58>)
   23110:	f017 f84c 	bl	3a1ac <z_impl_k_sem_give>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
   23114:	2301      	movs	r3, #1
   23116:	7023      	strb	r3, [r4, #0]
}
   23118:	bd70      	pop	{r4, r5, r6, pc}
   2311a:	bf00      	nop
   2311c:	00041d5c 	.word	0x00041d5c
   23120:	00043261 	.word	0x00043261
   23124:	00043278 	.word	0x00043278
   23128:	00043ed8 	.word	0x00043ed8
   2312c:	20029e89 	.word	0x20029e89
   23130:	20032440 	.word	0x20032440

00023134 <log_init>:
{
   23134:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
   23136:	4b13      	ldr	r3, [pc, #76]	; (23184 <log_init+0x50>)
   23138:	4c13      	ldr	r4, [pc, #76]	; (23188 <log_init+0x54>)
   2313a:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   2313c:	2b90      	cmp	r3, #144	; 0x90
   2313e:	dd06      	ble.n	2314e <log_init+0x1a>
   23140:	4b12      	ldr	r3, [pc, #72]	; (2318c <log_init+0x58>)
   23142:	4a13      	ldr	r2, [pc, #76]	; (23190 <log_init+0x5c>)
   23144:	f240 11ed 	movw	r1, #493	; 0x1ed
   23148:	4812      	ldr	r0, [pc, #72]	; (23194 <log_init+0x60>)
   2314a:	f018 fa87 	bl	3b65c <__assert_func>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2314e:	4a12      	ldr	r2, [pc, #72]	; (23198 <log_init+0x64>)
   23150:	e8d2 6fef 	ldaex	r6, [r2]
   23154:	1c71      	adds	r1, r6, #1
   23156:	e8c2 1fe0 	stlex	r0, r1, [r2]
   2315a:	2800      	cmp	r0, #0
   2315c:	d1f8      	bne.n	23150 <log_init+0x1c>
	if (atomic_inc(&initialized) != 0) {
   2315e:	b916      	cbnz	r6, 23166 <log_init+0x32>
   23160:	111d      	asrs	r5, r3, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   23162:	42ae      	cmp	r6, r5
   23164:	db00      	blt.n	23168 <log_init+0x34>
}
   23166:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   23168:	7b23      	ldrb	r3, [r4, #12]
   2316a:	b143      	cbz	r3, 2317e <log_init+0x4a>
			if (backend->api->init != NULL) {
   2316c:	6823      	ldr	r3, [r4, #0]
   2316e:	695b      	ldr	r3, [r3, #20]
   23170:	b103      	cbz	r3, 23174 <log_init+0x40>
				backend->api->init();
   23172:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   23174:	2204      	movs	r2, #4
   23176:	2100      	movs	r1, #0
   23178:	4620      	mov	r0, r4
   2317a:	f7ff ffad 	bl	230d8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   2317e:	3601      	adds	r6, #1
   23180:	3410      	adds	r4, #16
   23182:	e7ee      	b.n	23162 <log_init+0x2e>
   23184:	00041d7c 	.word	0x00041d7c
   23188:	00041d5c 	.word	0x00041d5c
   2318c:	00043f09 	.word	0x00043f09
   23190:	00043ecf 	.word	0x00043ecf
   23194:	00043f40 	.word	0x00043f40
   23198:	20023868 	.word	0x20023868

0002319c <z_impl_log_panic>:
{
   2319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   2319e:	4f0c      	ldr	r7, [pc, #48]	; (231d0 <z_impl_log_panic+0x34>)
   231a0:	783d      	ldrb	r5, [r7, #0]
   231a2:	b94d      	cbnz	r5, 231b8 <z_impl_log_panic+0x1c>
	log_init();
   231a4:	f7ff ffc6 	bl	23134 <log_init>
   231a8:	4c0a      	ldr	r4, [pc, #40]	; (231d4 <z_impl_log_panic+0x38>)
   231aa:	4e0b      	ldr	r6, [pc, #44]	; (231d8 <z_impl_log_panic+0x3c>)
   231ac:	1b36      	subs	r6, r6, r4
   231ae:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   231b0:	42b5      	cmp	r5, r6
   231b2:	db02      	blt.n	231ba <z_impl_log_panic+0x1e>
	panic_mode = true;
   231b4:	2301      	movs	r3, #1
   231b6:	703b      	strb	r3, [r7, #0]
}
   231b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   231ba:	4620      	mov	r0, r4
   231bc:	f01a feca 	bl	3df54 <log_backend_is_active>
   231c0:	b118      	cbz	r0, 231ca <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
   231c2:	6823      	ldr	r3, [r4, #0]
   231c4:	4620      	mov	r0, r4
   231c6:	691b      	ldr	r3, [r3, #16]
   231c8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   231ca:	3501      	adds	r5, #1
   231cc:	3410      	adds	r4, #16
   231ce:	e7ef      	b.n	231b0 <z_impl_log_panic+0x14>
   231d0:	20029e8a 	.word	0x20029e8a
   231d4:	00041d5c 	.word	0x00041d5c
   231d8:	00041d7c 	.word	0x00041d7c

000231dc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   231dc:	b40e      	push	{r1, r2, r3}
   231de:	b503      	push	{r0, r1, lr}
   231e0:	ab03      	add	r3, sp, #12
   231e2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
   231e6:	4601      	mov	r1, r0
   231e8:	4804      	ldr	r0, [pc, #16]	; (231fc <print_formatted+0x20>)
	va_start(args, fmt);
   231ea:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
   231ec:	f01a fce5 	bl	3dbba <z_vprintk>
#endif
	va_end(args);

	return length;
}
   231f0:	2000      	movs	r0, #0
   231f2:	b002      	add	sp, #8
   231f4:	f85d eb04 	ldr.w	lr, [sp], #4
   231f8:	b003      	add	sp, #12
   231fa:	4770      	bx	lr
   231fc:	0003df89 	.word	0x0003df89

00023200 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
   23200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   23204:	f011 0402 	ands.w	r4, r1, #2
{
   23208:	b085      	sub	sp, #20
   2320a:	4606      	mov	r6, r0
   2320c:	4690      	mov	r8, r2
   2320e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   23212:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   23216:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   2321a:	d007      	beq.n	2322c <prefix_print+0x2c>
	if (!format) {
   2321c:	f011 0f44 	tst.w	r1, #68	; 0x44
   23220:	d137      	bne.n	23292 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   23222:	461a      	mov	r2, r3
   23224:	4932      	ldr	r1, [pc, #200]	; (232f0 <prefix_print+0xf0>)
   23226:	f7ff ffd9 	bl	231dc <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   2322a:	4604      	mov	r4, r0
	if (color) {
   2322c:	f1b9 0f00 	cmp.w	r9, #0
   23230:	d00a      	beq.n	23248 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
   23232:	4b30      	ldr	r3, [pc, #192]	; (232f4 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
   23234:	4930      	ldr	r1, [pc, #192]	; (232f8 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
   23236:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
   2323a:	4b30      	ldr	r3, [pc, #192]	; (232fc <prefix_print+0xfc>)
   2323c:	4630      	mov	r0, r6
   2323e:	2a00      	cmp	r2, #0
   23240:	bf08      	it	eq
   23242:	461a      	moveq	r2, r3
   23244:	f7ff ffca 	bl	231dc <print_formatted>
	if (level_on) {
   23248:	b13d      	cbz	r5, 2325a <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   2324a:	4b2d      	ldr	r3, [pc, #180]	; (23300 <prefix_print+0x100>)
   2324c:	492d      	ldr	r1, [pc, #180]	; (23304 <prefix_print+0x104>)
   2324e:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   23252:	4630      	mov	r0, r6
   23254:	f7ff ffc2 	bl	231dc <print_formatted>
   23258:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   2325a:	f1b8 0f00 	cmp.w	r8, #0
   2325e:	d044      	beq.n	232ea <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   23260:	2301      	movs	r3, #1
   23262:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   23266:	4b28      	ldr	r3, [pc, #160]	; (23308 <prefix_print+0x108>)
   23268:	f017 0f10 	tst.w	r7, #16
   2326c:	4f27      	ldr	r7, [pc, #156]	; (2330c <prefix_print+0x10c>)
   2326e:	bf18      	it	ne
   23270:	461f      	movne	r7, r3
   23272:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   23276:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   2327a:	f7ff ff1f 	bl	230bc <log_source_name_get>
   2327e:	4639      	mov	r1, r7
   23280:	4602      	mov	r2, r0
   23282:	4630      	mov	r0, r6
   23284:	f7ff ffaa 	bl	231dc <print_formatted>
   23288:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
   2328a:	4420      	add	r0, r4
   2328c:	b005      	add	sp, #20
   2328e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   23292:	4a1f      	ldr	r2, [pc, #124]	; (23310 <prefix_print+0x110>)
   23294:	6811      	ldr	r1, [r2, #0]
   23296:	b331      	cbz	r1, 232e6 <prefix_print+0xe6>
		timestamp /= timestamp_div;
   23298:	4a1e      	ldr	r2, [pc, #120]	; (23314 <prefix_print+0x114>)
   2329a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   2329e:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   232a0:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   232a4:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
   232a8:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   232ac:	fbb4 f2fe 	udiv	r2, r4, lr
   232b0:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   232b4:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   232b8:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   232bc:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   232c0:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   232c4:	fb01 441b 	mls	r4, r1, fp, r4
   232c8:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   232cc:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   232d0:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   232d4:	e9cd b101 	strd	fp, r1, [sp, #4]
   232d8:	fb0a e113 	mls	r1, sl, r3, lr
   232dc:	9100      	str	r1, [sp, #0]
   232de:	490e      	ldr	r1, [pc, #56]	; (23318 <prefix_print+0x118>)
   232e0:	f7ff ff7c 	bl	231dc <print_formatted>
   232e4:	e7a1      	b.n	2322a <prefix_print+0x2a>
		length = 0;
   232e6:	4608      	mov	r0, r1
   232e8:	e79f      	b.n	2322a <prefix_print+0x2a>
	total += print_formatted(log_output,
   232ea:	4f08      	ldr	r7, [pc, #32]	; (2330c <prefix_print+0x10c>)
   232ec:	e7c1      	b.n	23272 <prefix_print+0x72>
   232ee:	bf00      	nop
   232f0:	00043fe4 	.word	0x00043fe4
   232f4:	00041fcc 	.word	0x00041fcc
   232f8:	00048487 	.word	0x00048487
   232fc:	00043fd6 	.word	0x00043fd6
   23300:	00041fe0 	.word	0x00041fe0
   23304:	00044009 	.word	0x00044009
   23308:	00043fe0 	.word	0x00043fe0
   2330c:	00043fdb 	.word	0x00043fdb
   23310:	2002386c 	.word	0x2002386c
   23314:	20023870 	.word	0x20023870
   23318:	00043fed 	.word	0x00043fed

0002331c <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
   2331c:	b538      	push	{r3, r4, r5, lr}
   2331e:	460c      	mov	r4, r1
	if (color) {
   23320:	07e1      	lsls	r1, r4, #31
{
   23322:	4605      	mov	r5, r0
	if (color) {
   23324:	d503      	bpl.n	2332e <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
   23326:	4a08      	ldr	r2, [pc, #32]	; (23348 <postfix_print+0x2c>)
   23328:	4908      	ldr	r1, [pc, #32]	; (2334c <postfix_print+0x30>)
   2332a:	f7ff ff57 	bl	231dc <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   2332e:	06e2      	lsls	r2, r4, #27
   23330:	d408      	bmi.n	23344 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   23332:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   23334:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   23336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   2333a:	bf4c      	ite	mi
   2333c:	4904      	ldrmi	r1, [pc, #16]	; (23350 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   2333e:	4905      	ldrpl	r1, [pc, #20]	; (23354 <postfix_print+0x38>)
   23340:	f7ff bf4c 	b.w	231dc <print_formatted>
}
   23344:	bd38      	pop	{r3, r4, r5, pc}
   23346:	bf00      	nop
   23348:	00043fd6 	.word	0x00043fd6
   2334c:	00048487 	.word	0x00048487
   23350:	00044d13 	.word	0x00044d13
   23354:	0004767f 	.word	0x0004767f

00023358 <hexdump_line_print>:
{
   23358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2335c:	4698      	mov	r8, r3
   2335e:	9b08      	ldr	r3, [sp, #32]
   23360:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   23362:	06dd      	lsls	r5, r3, #27
{
   23364:	460e      	mov	r6, r1
   23366:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   23368:	d405      	bmi.n	23376 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   2336a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   2336c:	bf4c      	ite	mi
   2336e:	492a      	ldrmi	r1, [pc, #168]	; (23418 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   23370:	492a      	ldrpl	r1, [pc, #168]	; (2341c <hexdump_line_print+0xc4>)
   23372:	f7ff ff33 	bl	231dc <print_formatted>
{
   23376:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
   23378:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 23424 <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
   2337c:	4545      	cmp	r5, r8
   2337e:	db2d      	blt.n	233dc <hexdump_line_print+0x84>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   23380:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   23382:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 23428 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
   23386:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 2342c <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
   2338a:	f8df a098 	ldr.w	sl, [pc, #152]	; 23424 <hexdump_line_print+0xcc>
		if (i < length) {
   2338e:	42bd      	cmp	r5, r7
   23390:	d231      	bcs.n	233f6 <hexdump_line_print+0x9e>
			print_formatted(log_output, "%02x ", data[i]);
   23392:	5d72      	ldrb	r2, [r6, r5]
   23394:	4649      	mov	r1, r9
   23396:	4620      	mov	r0, r4
   23398:	f7ff ff20 	bl	231dc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   2339c:	3501      	adds	r5, #1
   2339e:	2d10      	cmp	r5, #16
   233a0:	d122      	bne.n	233e8 <hexdump_line_print+0x90>
	print_formatted(log_output, "|");
   233a2:	491f      	ldr	r1, [pc, #124]	; (23420 <hexdump_line_print+0xc8>)
   233a4:	4620      	mov	r0, r4
   233a6:	f7ff ff19 	bl	231dc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   233aa:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   233ac:	f8df 8074 	ldr.w	r8, [pc, #116]	; 23424 <hexdump_line_print+0xcc>
			      isprint((int)c) ? c : '.');
   233b0:	f8df 907c 	ldr.w	r9, [pc, #124]	; 23430 <hexdump_line_print+0xd8>
			print_formatted(log_output, "%c",
   233b4:	f8df a07c 	ldr.w	sl, [pc, #124]	; 23434 <hexdump_line_print+0xdc>
		if (i < length) {
   233b8:	42af      	cmp	r7, r5
   233ba:	d928      	bls.n	2340e <hexdump_line_print+0xb6>
			char c = (char)data[i];
   233bc:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   233be:	4651      	mov	r1, sl
   233c0:	f812 3009 	ldrb.w	r3, [r2, r9]
   233c4:	4620      	mov	r0, r4
   233c6:	f013 0f97 	tst.w	r3, #151	; 0x97
   233ca:	bf08      	it	eq
   233cc:	222e      	moveq	r2, #46	; 0x2e
   233ce:	f7ff ff05 	bl	231dc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   233d2:	3501      	adds	r5, #1
   233d4:	2d10      	cmp	r5, #16
   233d6:	d113      	bne.n	23400 <hexdump_line_print+0xa8>
}
   233d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   233dc:	4649      	mov	r1, r9
   233de:	4620      	mov	r0, r4
   233e0:	f7ff fefc 	bl	231dc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   233e4:	3501      	adds	r5, #1
   233e6:	e7c9      	b.n	2337c <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
   233e8:	076a      	lsls	r2, r5, #29
   233ea:	d1d0      	bne.n	2338e <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
   233ec:	4651      	mov	r1, sl
   233ee:	4620      	mov	r0, r4
   233f0:	f7ff fef4 	bl	231dc <print_formatted>
   233f4:	e7cb      	b.n	2338e <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
   233f6:	4641      	mov	r1, r8
   233f8:	4620      	mov	r0, r4
   233fa:	f7ff feef 	bl	231dc <print_formatted>
   233fe:	e7cd      	b.n	2339c <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
   23400:	076b      	lsls	r3, r5, #29
   23402:	d1d9      	bne.n	233b8 <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
   23404:	4641      	mov	r1, r8
   23406:	4620      	mov	r0, r4
   23408:	f7ff fee8 	bl	231dc <print_formatted>
   2340c:	e7d4      	b.n	233b8 <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
   2340e:	4641      	mov	r1, r8
   23410:	4620      	mov	r0, r4
   23412:	f7ff fee3 	bl	231dc <print_formatted>
   23416:	e7dc      	b.n	233d2 <hexdump_line_print+0x7a>
   23418:	00044d13 	.word	0x00044d13
   2341c:	0004767f 	.word	0x0004767f
   23420:	00043f8f 	.word	0x00043f8f
   23424:	00043f8d 	.word	0x00043f8d
   23428:	00043f8b 	.word	0x00043f8b
   2342c:	00043f85 	.word	0x00043f85
   23430:	00049140 	.word	0x00049140
   23434:	00043f91 	.word	0x00043f91

00023438 <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, u32_t timestamp,
		       const char *fmt, va_list ap, u32_t flags)
{
   23438:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		log_output_string_syst_process(log_output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
   2343c:	f011 0407 	ands.w	r4, r1, #7
{
   23440:	4606      	mov	r6, r0
   23442:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
   23446:	461d      	mov	r5, r3
	if (!raw_string) {
   23448:	d00b      	beq.n	23462 <log_output_string+0x2a>
		prefix_print(log_output, flags, true, timestamp,
   2344a:	f3c1 1389 	ubfx	r3, r1, #6, #10
   2344e:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   23452:	9302      	str	r3, [sp, #8]
   23454:	e9cd 4100 	strd	r4, r1, [sp]
   23458:	4613      	mov	r3, r2
   2345a:	4639      	mov	r1, r7
   2345c:	2201      	movs	r2, #1
   2345e:	f7ff fecf 	bl	23200 <prefix_print>

#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, ap);
#else
	z_vprintk(out_func, (void *)log_output, fmt, ap);
   23462:	4643      	mov	r3, r8
   23464:	462a      	mov	r2, r5
   23466:	4631      	mov	r1, r6
   23468:	480d      	ldr	r0, [pc, #52]	; (234a0 <log_output_string+0x68>)
   2346a:	f01a fba6 	bl	3dbba <z_vprintk>
#endif

	(void)length;

	if (raw_string) {
   2346e:	b98c      	cbnz	r4, 23494 <log_output_string+0x5c>
   23470:	3d01      	subs	r5, #1
	while (*fmt != '\0') {
   23472:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   23476:	b95b      	cbnz	r3, 23490 <log_output_string+0x58>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
   23478:	2c0a      	cmp	r4, #10
   2347a:	d103      	bne.n	23484 <log_output_string+0x4c>
			print_formatted(log_output, "\r");
   2347c:	4909      	ldr	r1, [pc, #36]	; (234a4 <log_output_string+0x6c>)
   2347e:	4630      	mov	r0, r6
   23480:	f7ff feac 	bl	231dc <print_formatted>
		}
	} else {
		postfix_print(log_output, flags, level);
	}

	log_output_flush(log_output);
   23484:	4630      	mov	r0, r6
}
   23486:	b004      	add	sp, #16
   23488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(log_output);
   2348c:	f01a bd95 	b.w	3dfba <log_output_flush>
	while (*fmt != '\0') {
   23490:	461c      	mov	r4, r3
   23492:	e7ee      	b.n	23472 <log_output_string+0x3a>
		postfix_print(log_output, flags, level);
   23494:	4622      	mov	r2, r4
   23496:	4639      	mov	r1, r7
   23498:	4630      	mov	r0, r6
   2349a:	f7ff ff3f 	bl	2331c <postfix_print>
   2349e:	e7f1      	b.n	23484 <log_output_string+0x4c>
   234a0:	0003df89 	.word	0x0003df89
   234a4:	00043fd4 	.word	0x00043fd4

000234a8 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, u32_t timestamp,
			     const char *metadata, const u8_t *data,
			     u32_t length, u32_t flags)
{
   234a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   234ac:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   234ae:	4698      	mov	r8, r3
   234b0:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
		log_output_hexdump_syst_process(log_output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   234b4:	f3c1 1389 	ubfx	r3, r1, #6, #10
	u8_t level = (u8_t)src_level.level;
   234b8:	f001 0907 	and.w	r9, r1, #7
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   234bc:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   234c0:	9302      	str	r3, [sp, #8]
   234c2:	e9cd 9100 	strd	r9, r1, [sp]
   234c6:	4613      	mov	r3, r2
   234c8:	4631      	mov	r1, r6
   234ca:	2201      	movs	r2, #1
{
   234cc:	4604      	mov	r4, r0
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   234ce:	f7ff fe97 	bl	23200 <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
   234d2:	4642      	mov	r2, r8
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   234d4:	4682      	mov	sl, r0
	print_formatted(log_output, "%s", metadata);
   234d6:	4910      	ldr	r1, [pc, #64]	; (23518 <log_output_hexdump+0x70>)
   234d8:	4620      	mov	r0, r4
   234da:	f7ff fe7f 	bl	231dc <print_formatted>

	while (length) {
   234de:	b955      	cbnz	r5, 234f6 <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	};

	postfix_print(log_output, flags, level);
   234e0:	4620      	mov	r0, r4
   234e2:	464a      	mov	r2, r9
   234e4:	4631      	mov	r1, r6
   234e6:	f7ff ff19 	bl	2331c <postfix_print>
	log_output_flush(log_output);
   234ea:	4620      	mov	r0, r4
}
   234ec:	b004      	add	sp, #16
   234ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
   234f2:	f01a bd62 	b.w	3dfba <log_output_flush>
		u32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
   234f6:	2d10      	cmp	r5, #16
   234f8:	46a8      	mov	r8, r5
   234fa:	bf28      	it	cs
   234fc:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(log_output, data, part_len,
   23500:	4639      	mov	r1, r7
   23502:	9600      	str	r6, [sp, #0]
   23504:	4653      	mov	r3, sl
   23506:	4642      	mov	r2, r8
   23508:	4620      	mov	r0, r4
   2350a:	f7ff ff25 	bl	23358 <hexdump_line_print>
		data += part_len;
   2350e:	4447      	add	r7, r8
		length -= part_len;
   23510:	eba5 0508 	sub.w	r5, r5, r8
   23514:	e7e3      	b.n	234de <log_output_hexdump+0x36>
   23516:	bf00      	nop
   23518:	00048487 	.word	0x00048487

0002351c <log_output_timestamp_freq_set>:
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
}

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
   2351c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   2351e:	2100      	movs	r1, #0
	timestamp_div = 1U;
   23520:	4a07      	ldr	r2, [pc, #28]	; (23540 <log_output_timestamp_freq_set+0x24>)
{
   23522:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   23524:	4c07      	ldr	r4, [pc, #28]	; (23544 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   23526:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   23528:	42a0      	cmp	r0, r4
   2352a:	d804      	bhi.n	23536 <log_output_timestamp_freq_set+0x1a>
   2352c:	b101      	cbz	r1, 23530 <log_output_timestamp_freq_set+0x14>
   2352e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   23530:	4b05      	ldr	r3, [pc, #20]	; (23548 <log_output_timestamp_freq_set+0x2c>)
   23532:	6018      	str	r0, [r3, #0]
}
   23534:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   23536:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   23538:	005b      	lsls	r3, r3, #1
   2353a:	2101      	movs	r1, #1
   2353c:	e7f4      	b.n	23528 <log_output_timestamp_freq_set+0xc>
   2353e:	bf00      	nop
   23540:	20023870 	.word	0x20023870
   23544:	000f4240 	.word	0x000f4240
   23548:	2002386c 	.word	0x2002386c

0002354c <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   2354c:	4801      	ldr	r0, [pc, #4]	; (23554 <panic+0x8>)
   2354e:	f01a bd34 	b.w	3dfba <log_output_flush>
   23552:	bf00      	nop
   23554:	0004200c 	.word	0x0004200c

00023558 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
   23558:	b508      	push	{r3, lr}
   2355a:	4806      	ldr	r0, [pc, #24]	; (23574 <log_backend_uart_init+0x1c>)
   2355c:	f014 fd24 	bl	37fa8 <z_impl_device_get_binding>
	struct device *dev;

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);
   23560:	b928      	cbnz	r0, 2356e <log_backend_uart_init+0x16>
   23562:	4b05      	ldr	r3, [pc, #20]	; (23578 <log_backend_uart_init+0x20>)
   23564:	4a05      	ldr	r2, [pc, #20]	; (2357c <log_backend_uart_init+0x24>)
   23566:	212d      	movs	r1, #45	; 0x2d
   23568:	4805      	ldr	r0, [pc, #20]	; (23580 <log_backend_uart_init+0x28>)
   2356a:	f018 f877 	bl	3b65c <__assert_func>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
   2356e:	4b05      	ldr	r3, [pc, #20]	; (23584 <log_backend_uart_init+0x2c>)
   23570:	6058      	str	r0, [r3, #4]

	log_output_ctx_set(&log_output, dev);
}
   23572:	bd08      	pop	{r3, pc}
   23574:	00044045 	.word	0x00044045
   23578:	00043d81 	.word	0x00043d81
   2357c:	0004402f 	.word	0x0004402f
   23580:	0004404c 	.word	0x0004404c
   23584:	2002387c 	.word	0x2002387c

00023588 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, u32_t timestamp,
			 const char *metadata, const u8_t *data, u32_t length)
{
   23588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(log_output, src_level, timestamp,
   2358a:	200f      	movs	r0, #15
   2358c:	9002      	str	r0, [sp, #8]
   2358e:	9807      	ldr	r0, [sp, #28]
   23590:	9001      	str	r0, [sp, #4]
   23592:	9806      	ldr	r0, [sp, #24]
   23594:	9000      	str	r0, [sp, #0]
   23596:	4803      	ldr	r0, [pc, #12]	; (235a4 <sync_hexdump+0x1c>)
   23598:	f7ff ff86 	bl	234a8 <log_output_hexdump>
	u32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_UART_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output, flag, src_level,
				     timestamp, metadata, data, length);
}
   2359c:	b005      	add	sp, #20
   2359e:	f85d fb04 	ldr.w	pc, [sp], #4
   235a2:	bf00      	nop
   235a4:	0004200c 	.word	0x0004200c

000235a8 <sync_string>:
{
   235a8:	b507      	push	{r0, r1, r2, lr}
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
   235aa:	200f      	movs	r0, #15
   235ac:	9001      	str	r0, [sp, #4]
   235ae:	9804      	ldr	r0, [sp, #16]
   235b0:	9000      	str	r0, [sp, #0]
   235b2:	4803      	ldr	r0, [pc, #12]	; (235c0 <sync_string+0x18>)
   235b4:	f7ff ff40 	bl	23438 <log_output_string>
}
   235b8:	b003      	add	sp, #12
   235ba:	f85d fb04 	ldr.w	pc, [sp], #4
   235be:	bf00      	nop
   235c0:	0004200c 	.word	0x0004200c

000235c4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   235c4:	2201      	movs	r2, #1
   235c6:	4b01      	ldr	r3, [pc, #4]	; (235cc <log_backend_rtt_init+0x8>)
   235c8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   235ca:	4770      	bx	lr
   235cc:	20029e8d 	.word	0x20029e8d

000235d0 <panic>:

static void panic(struct log_backend const *const backend)
{
   235d0:	b508      	push	{r3, lr}
	log_output_flush(log_output);
   235d2:	4803      	ldr	r0, [pc, #12]	; (235e0 <panic+0x10>)
   235d4:	f01a fcf1 	bl	3dfba <log_output_flush>
	log_backend_std_panic(&log_output);
	panic_mode = true;
   235d8:	2201      	movs	r2, #1
   235da:	4b02      	ldr	r3, [pc, #8]	; (235e4 <panic+0x14>)
   235dc:	701a      	strb	r2, [r3, #0]
}
   235de:	bd08      	pop	{r3, pc}
   235e0:	00042034 	.word	0x00042034
   235e4:	20029e8e 	.word	0x20029e8e

000235e8 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, u32_t timestamp,
			 const char *metadata, const u8_t *data, u32_t length)
{
   235e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	log_output_hexdump(log_output, src_level, timestamp,
   235ea:	200f      	movs	r0, #15
   235ec:	9002      	str	r0, [sp, #8]
   235ee:	9807      	ldr	r0, [sp, #28]
   235f0:	9001      	str	r0, [sp, #4]
   235f2:	9806      	ldr	r0, [sp, #24]
   235f4:	9000      	str	r0, [sp, #0]
   235f6:	4803      	ldr	r0, [pc, #12]	; (23604 <sync_hexdump+0x1c>)
   235f8:	f7ff ff56 	bl	234a8 <log_output_hexdump>
	u32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output, flag, src_level,
				     timestamp, metadata, data, length);
}
   235fc:	b005      	add	sp, #20
   235fe:	f85d fb04 	ldr.w	pc, [sp], #4
   23602:	bf00      	nop
   23604:	00042034 	.word	0x00042034

00023608 <sync_string>:
{
   23608:	b507      	push	{r0, r1, r2, lr}
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
   2360a:	200f      	movs	r0, #15
   2360c:	9001      	str	r0, [sp, #4]
   2360e:	9804      	ldr	r0, [sp, #16]
   23610:	9000      	str	r0, [sp, #0]
   23612:	4803      	ldr	r0, [pc, #12]	; (23620 <sync_string+0x18>)
   23614:	f7ff ff10 	bl	23438 <log_output_string>
}
   23618:	b003      	add	sp, #12
   2361a:	f85d fb04 	ldr.w	pc, [sp], #4
   2361e:	bf00      	nop
   23620:	00042034 	.word	0x00042034

00023624 <data_out_block_mode>:
{
   23624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23626:	4607      	mov	r7, r0
   23628:	460e      	mov	r6, r1
	int retry_cnt = CONFIG_LOG_BACKEND_RTT_RETRY_CNT;
   2362a:	2404      	movs	r4, #4
   2362c:	4d17      	ldr	r5, [pc, #92]	; (2368c <data_out_block_mode+0x68>)
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   2362e:	4632      	mov	r2, r6
   23630:	4639      	mov	r1, r7
   23632:	2000      	movs	r0, #0
   23634:	f000 fd8a 	bl	2414c <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
   23638:	b1c8      	cbz	r0, 2366e <data_out_block_mode+0x4a>
	host_present = true;
   2363a:	2301      	movs	r3, #1
   2363c:	702b      	strb	r3, [r5, #0]
	return panic_mode;
   2363e:	4b14      	ldr	r3, [pc, #80]	; (23690 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
   23640:	781b      	ldrb	r3, [r3, #0]
   23642:	b92b      	cbnz	r3, 23650 <data_out_block_mode+0x2c>
}
   23644:	4630      	mov	r0, r6
   23646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
   23648:	b95c      	cbnz	r4, 23662 <data_out_block_mode+0x3e>
		host_present = false;
   2364a:	702c      	strb	r4, [r5, #0]
   2364c:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   23650:	2000      	movs	r0, #0
   23652:	f000 fdc7 	bl	241e4 <SEGGER_RTT_HasDataUp>
   23656:	2800      	cmp	r0, #0
   23658:	d0f4      	beq.n	23644 <data_out_block_mode+0x20>
   2365a:	782b      	ldrb	r3, [r5, #0]
   2365c:	2b00      	cmp	r3, #0
   2365e:	d1f3      	bne.n	23648 <data_out_block_mode+0x24>
   23660:	e7f0      	b.n	23644 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
   23662:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
   23664:	f241 3088 	movw	r0, #5000	; 0x1388
   23668:	f01c feca 	bl	40400 <z_impl_k_busy_wait>
   2366c:	e7f0      	b.n	23650 <data_out_block_mode+0x2c>
		} else if (host_present) {
   2366e:	782b      	ldrb	r3, [r5, #0]
   23670:	b113      	cbz	r3, 23678 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
   23672:	3c01      	subs	r4, #1
   23674:	d104      	bne.n	23680 <data_out_block_mode+0x5c>
		host_present = false;
   23676:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   23678:	782b      	ldrb	r3, [r5, #0]
   2367a:	2b00      	cmp	r3, #0
   2367c:	d1d7      	bne.n	2362e <data_out_block_mode+0xa>
   2367e:	e7e1      	b.n	23644 <data_out_block_mode+0x20>
   23680:	f241 3088 	movw	r0, #5000	; 0x1388
   23684:	f01c febc 	bl	40400 <z_impl_k_busy_wait>
   23688:	e7f6      	b.n	23678 <data_out_block_mode+0x54>
   2368a:	bf00      	nop
   2368c:	20029e8d 	.word	0x20029e8d
   23690:	20029e8e 	.word	0x20029e8e

00023694 <boot_write_trailer_byte>:
	}
}

static int boot_write_trailer_byte(const struct flash_area *fa, u32_t off,
				   u8_t val)
{
   23694:	b573      	push	{r0, r1, r4, r5, r6, lr}
   23696:	4604      	mov	r4, r0
   23698:	460d      	mov	r5, r1
   2369a:	4616      	mov	r6, r2
	u8_t buf[BOOT_MAX_ALIGN];
	u8_t align;
	u8_t erased_val;
	int rc;

	align = flash_area_align(fa);
   2369c:	f01a fdb5 	bl	3e20a <flash_area_align>
	assert(align <= BOOT_MAX_ALIGN);
   236a0:	2808      	cmp	r0, #8
	align = flash_area_align(fa);
   236a2:	4603      	mov	r3, r0
	assert(align <= BOOT_MAX_ALIGN);
   236a4:	d906      	bls.n	236b4 <boot_write_trailer_byte+0x20>
   236a6:	4b0c      	ldr	r3, [pc, #48]	; (236d8 <boot_write_trailer_byte+0x44>)
   236a8:	4a0c      	ldr	r2, [pc, #48]	; (236dc <boot_write_trailer_byte+0x48>)
   236aa:	f44f 719d 	mov.w	r1, #314	; 0x13a
   236ae:	480c      	ldr	r0, [pc, #48]	; (236e0 <boot_write_trailer_byte+0x4c>)
   236b0:	f017 ffd4 	bl	3b65c <__assert_func>
	erased_val = flash_area_erased_val(fa);
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   236b4:	f04f 30ff 	mov.w	r0, #4294967295
	buf[0] = val;

	rc = flash_area_write(fa, off, buf, align);
   236b8:	466a      	mov	r2, sp
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   236ba:	e9cd 0000 	strd	r0, r0, [sp]
	rc = flash_area_write(fa, off, buf, align);
   236be:	4629      	mov	r1, r5
   236c0:	4620      	mov	r0, r4
	buf[0] = val;
   236c2:	f88d 6000 	strb.w	r6, [sp]
	rc = flash_area_write(fa, off, buf, align);
   236c6:	f01a fd51 	bl	3e16c <flash_area_write>
	if (rc != 0) {
   236ca:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   236cc:	bf18      	it	ne
   236ce:	f06f 0004 	mvnne.w	r0, #4
   236d2:	b002      	add	sp, #8
   236d4:	bd70      	pop	{r4, r5, r6, pc}
   236d6:	bf00      	nop
   236d8:	000440ba 	.word	0x000440ba
   236dc:	000440a2 	.word	0x000440a2
   236e0:	000440d2 	.word	0x000440d2

000236e4 <boot_request_upgrade>:

	return BOOT_SWAP_TYPE_NONE;
}

int boot_request_upgrade(int permanent)
{
   236e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   236e6:	4605      	mov	r5, r0
	rc = flash_area_open(bank_id, &fa);
   236e8:	a901      	add	r1, sp, #4
   236ea:	2006      	movs	r0, #6
   236ec:	f000 f964 	bl	239b8 <flash_area_open>
	if (rc) {
   236f0:	4604      	mov	r4, r0
   236f2:	bb10      	cbnz	r0, 2373a <boot_request_upgrade+0x56>
	offs = MAGIC_OFFS(fa);
   236f4:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   236f6:	2310      	movs	r3, #16
	offs = MAGIC_OFFS(fa);
   236f8:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   236fa:	4a12      	ldr	r2, [pc, #72]	; (23744 <boot_request_upgrade+0x60>)
   236fc:	3910      	subs	r1, #16
   236fe:	f01a fd35 	bl	3e16c <flash_area_write>
   23702:	4604      	mov	r4, r0
	flash_area_close(fa);
   23704:	9801      	ldr	r0, [sp, #4]
   23706:	f01a fd13 	bl	3e130 <flash_area_close>
	u8_t swap_type;
#endif
	int rc;

	rc = boot_magic_write(FLASH_AREA_IMAGE_SECONDARY);
	if (rc) {
   2370a:	b9b4      	cbnz	r4, 2373a <boot_request_upgrade+0x56>
		goto op_end;
	}

	if (permanent) {
   2370c:	b1c5      	cbz	r5, 23740 <boot_request_upgrade+0x5c>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   2370e:	2006      	movs	r0, #6
   23710:	f01a fc84 	bl	3e01c <boot_flag_write.constprop.7>
		rc = boot_image_ok_write(FLASH_AREA_IMAGE_SECONDARY);

#ifdef CONFIG_MCUBOOT_TRAILER_SWAP_TYPE
		if (rc) {
   23714:	4604      	mov	r4, r0
   23716:	b980      	cbnz	r0, 2373a <boot_request_upgrade+0x56>
			goto op_end;
		}

		swap_type = BOOT_SWAP_TYPE_PERM;
   23718:	2503      	movs	r5, #3
	rc = flash_area_open(bank_id, &fa);
   2371a:	a901      	add	r1, sp, #4
   2371c:	2006      	movs	r0, #6
   2371e:	f000 f94b 	bl	239b8 <flash_area_open>
	if (rc) {
   23722:	4604      	mov	r4, r0
   23724:	b948      	cbnz	r0, 2373a <boot_request_upgrade+0x56>
	offs = SWAP_TYPE_OFFS(fa);
   23726:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   23728:	462a      	mov	r2, r5
	offs = SWAP_TYPE_OFFS(fa);
   2372a:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   2372c:	3928      	subs	r1, #40	; 0x28
   2372e:	f7ff ffb1 	bl	23694 <boot_write_trailer_byte>
   23732:	4604      	mov	r4, r0
	flash_area_close(fa);
   23734:	9801      	ldr	r0, [sp, #4]
   23736:	f01a fcfb 	bl	3e130 <flash_area_close>
#else
	}
#endif
op_end:
	return rc;
}
   2373a:	4620      	mov	r0, r4
   2373c:	b003      	add	sp, #12
   2373e:	bd30      	pop	{r4, r5, pc}
		swap_type = BOOT_SWAP_TYPE_TEST;
   23740:	2502      	movs	r5, #2
   23742:	e7ea      	b.n	2371a <boot_request_upgrade+0x36>
   23744:	00042044 	.word	0x00042044

00023748 <flash_progressive_erase>:
 * @param[in] off offset from the beginning of the image flash area beginning
 *
 * @return  0 on success, negative errno code on fail.
 */
static int flash_progressive_erase(struct flash_img_context *ctx, off_t off)
{
   23748:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct flash_sector sector;
	int rc;

	rc = flash_sector_from_off(ctx->flash_area, off, &sector);
   2374c:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
{
   23750:	4607      	mov	r7, r0
	flash_dev = flash_area_get_device(fap);
   23752:	4628      	mov	r0, r5
{
   23754:	460c      	mov	r4, r1
	flash_dev = flash_area_get_device(fap);
   23756:	f01a fd5f 	bl	3e218 <flash_area_get_device>
	off += fap->fa_off; /* flash driver uses offset from memory beginning */
   2375a:	6869      	ldr	r1, [r5, #4]
   2375c:	4421      	add	r1, r4
	if (flash_dev) {
   2375e:	b998      	cbnz	r0, 23788 <flash_progressive_erase+0x40>
	int rc = -ENODEV;
   23760:	f06f 0412 	mvn.w	r4, #18
	if (rc) {
		LOG_ERR("Unable to determine flash sector size");
   23764:	2301      	movs	r3, #1
   23766:	f04f 0000 	mov.w	r0, #0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   2376a:	4a21      	ldr	r2, [pc, #132]	; (237f0 <flash_progressive_erase+0xa8>)
   2376c:	f363 0007 	bfi	r0, r3, #0, #8
   23770:	4b20      	ldr	r3, [pc, #128]	; (237f4 <flash_progressive_erase+0xac>)
   23772:	4921      	ldr	r1, [pc, #132]	; (237f8 <flash_progressive_erase+0xb0>)
   23774:	1a9b      	subs	r3, r3, r2
   23776:	08db      	lsrs	r3, r3, #3
   23778:	f363 108f 	bfi	r0, r3, #6, #10
   2377c:	f01a fbf1 	bl	3df62 <log_string_sync>
			}
		}
	}

	return rc;
}
   23780:	4620      	mov	r0, r4
   23782:	b004      	add	sp, #16
   23784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   23788:	aa01      	add	r2, sp, #4
   2378a:	f01b fbf3 	bl	3ef74 <z_impl_flash_get_page_info_by_offs>
		if (rc == 0) {
   2378e:	4604      	mov	r4, r0
   23790:	2800      	cmp	r0, #0
   23792:	d1e7      	bne.n	23764 <flash_progressive_erase+0x1c>
			sector->fs_size = page.size;
   23794:	e9dd 6801 	ldrd	r6, r8, [sp, #4]
		if (ctx->off_last != sector.fs_off) {
   23798:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
   2379c:	42b3      	cmp	r3, r6
   2379e:	d0ef      	beq.n	23780 <flash_progressive_erase+0x38>
			LOG_INF("Erasing sector at offset 0x%08lx",
   237a0:	2303      	movs	r3, #3
   237a2:	f04f 0000 	mov.w	r0, #0
   237a6:	4d13      	ldr	r5, [pc, #76]	; (237f4 <flash_progressive_erase+0xac>)
   237a8:	f363 0007 	bfi	r0, r3, #0, #8
   237ac:	4b10      	ldr	r3, [pc, #64]	; (237f0 <flash_progressive_erase+0xa8>)
   237ae:	4632      	mov	r2, r6
   237b0:	1aed      	subs	r5, r5, r3
   237b2:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   237b6:	f365 108f 	bfi	r0, r5, #6, #10
   237ba:	4910      	ldr	r1, [pc, #64]	; (237fc <flash_progressive_erase+0xb4>)
			ctx->off_last = sector.fs_off;
   237bc:	f8c7 620c 	str.w	r6, [r7, #524]	; 0x20c
			LOG_INF("Erasing sector at offset 0x%08lx",
   237c0:	f01a fbcf 	bl	3df62 <log_string_sync>
			rc = flash_area_erase(ctx->flash_area,
   237c4:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
   237c8:	4642      	mov	r2, r8
   237ca:	6841      	ldr	r1, [r0, #4]
   237cc:	1a71      	subs	r1, r6, r1
   237ce:	f01a fcf6 	bl	3e1be <flash_area_erase>
			if (rc) {
   237d2:	4604      	mov	r4, r0
   237d4:	2800      	cmp	r0, #0
   237d6:	d0d3      	beq.n	23780 <flash_progressive_erase+0x38>
				LOG_ERR("Error %d while erasing sector", rc);
   237d8:	2301      	movs	r3, #1
   237da:	f04f 0000 	mov.w	r0, #0
   237de:	f363 0007 	bfi	r0, r3, #0, #8
   237e2:	f365 108f 	bfi	r0, r5, #6, #10
   237e6:	4622      	mov	r2, r4
   237e8:	4905      	ldr	r1, [pc, #20]	; (23800 <flash_progressive_erase+0xb8>)
   237ea:	f01a fbba 	bl	3df62 <log_string_sync>
	return rc;
   237ee:	e7c7      	b.n	23780 <flash_progressive_erase+0x38>
   237f0:	00041c2c 	.word	0x00041c2c
   237f4:	00041cac 	.word	0x00041cac
   237f8:	000440ff 	.word	0x000440ff
   237fc:	00044125 	.word	0x00044125
   23800:	00044146 	.word	0x00044146

00023804 <flash_sync>:

#endif /* CONFIG_IMG_ERASE_PROGRESSIVELY */

static int flash_sync(struct flash_img_context *ctx)
{
   23804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   23808:	4604      	mov	r4, r0
	int rc = 0;

	if (ctx->buf_bytes < CONFIG_IMG_BLOCK_BUF_SIZE) {
   2380a:	f8b0 0208 	ldrh.w	r0, [r0, #520]	; 0x208
   2380e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   23812:	d205      	bcs.n	23820 <flash_sync+0x1c>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   23814:	f5c0 7200 	rsb	r2, r0, #512	; 0x200
   23818:	21ff      	movs	r1, #255	; 0xff
   2381a:	4420      	add	r0, r4
   2381c:	f01c ff1e 	bl	4065c <memset>
		(void)memset(ctx->buf + ctx->buf_bytes, 0xFF,
			     CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes);
	}

#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	rc = flash_progressive_erase(ctx, ctx->bytes_written +
   23820:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
   23824:	4620      	mov	r0, r4
   23826:	f501 7100 	add.w	r1, r1, #512	; 0x200
   2382a:	f7ff ff8d 	bl	23748 <flash_progressive_erase>
				     CONFIG_IMG_BLOCK_BUF_SIZE);
	if (rc) {
   2382e:	4605      	mov	r5, r0
   23830:	b1a0      	cbz	r0, 2385c <flash_sync+0x58>
		LOG_ERR("flash_progressive_erase error %d offset=0x%08zx", rc,
   23832:	2301      	movs	r3, #1
   23834:	f04f 0000 	mov.w	r0, #0
   23838:	4a3b      	ldr	r2, [pc, #236]	; (23928 <flash_sync+0x124>)
   2383a:	f363 0007 	bfi	r0, r3, #0, #8
   2383e:	4b3b      	ldr	r3, [pc, #236]	; (2392c <flash_sync+0x128>)
   23840:	493b      	ldr	r1, [pc, #236]	; (23930 <flash_sync+0x12c>)
   23842:	1a9b      	subs	r3, r3, r2
   23844:	462a      	mov	r2, r5
   23846:	08db      	lsrs	r3, r3, #3
   23848:	f363 108f 	bfi	r0, r3, #6, #10
   2384c:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
#endif

	rc = flash_area_write(ctx->flash_area, ctx->bytes_written, ctx->buf,
			      CONFIG_IMG_BLOCK_BUF_SIZE);
	if (rc) {
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   23850:	f01a fb87 	bl	3df62 <log_string_sync>

	ctx->bytes_written += ctx->buf_bytes;
	ctx->buf_bytes = 0U;

	return rc;
}
   23854:	4628      	mov	r0, r5
   23856:	b004      	add	sp, #16
   23858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rc = flash_area_write(ctx->flash_area, ctx->bytes_written, ctx->buf,
   2385c:	f44f 7300 	mov.w	r3, #512	; 0x200
   23860:	e9d4 0180 	ldrd	r0, r1, [r4, #512]	; 0x200
   23864:	4622      	mov	r2, r4
   23866:	f01a fc81 	bl	3e16c <flash_area_write>
   2386a:	46a1      	mov	r9, r4
	if (rc) {
   2386c:	4605      	mov	r5, r0
   2386e:	b178      	cbz	r0, 23890 <flash_sync+0x8c>
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   23870:	2301      	movs	r3, #1
   23872:	f04f 0000 	mov.w	r0, #0
   23876:	4a2c      	ldr	r2, [pc, #176]	; (23928 <flash_sync+0x124>)
   23878:	f363 0007 	bfi	r0, r3, #0, #8
   2387c:	4b2b      	ldr	r3, [pc, #172]	; (2392c <flash_sync+0x128>)
   2387e:	492d      	ldr	r1, [pc, #180]	; (23934 <flash_sync+0x130>)
   23880:	1a9b      	subs	r3, r3, r2
   23882:	08db      	lsrs	r3, r3, #3
   23884:	f363 108f 	bfi	r0, r3, #6, #10
   23888:	462a      	mov	r2, r5
   2388a:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
   2388e:	e7df      	b.n	23850 <flash_sync+0x4c>
	if (!flash_verify(ctx->flash_area, ctx->bytes_written, ctx->buf,
   23890:	f44f 7700 	mov.w	r7, #512	; 0x200
   23894:	e9d4 a880 	ldrd	sl, r8, [r4, #512]	; 0x200
		size = (len >= sizeof(temp)) ? sizeof(temp) : len;
   23898:	2f04      	cmp	r7, #4
   2389a:	463e      	mov	r6, r7
   2389c:	bf28      	it	cs
   2389e:	2604      	movcs	r6, #4
		rc = flash_area_read(fa, offset, &temp, size);
   238a0:	aa03      	add	r2, sp, #12
   238a2:	4633      	mov	r3, r6
   238a4:	4641      	mov	r1, r8
   238a6:	4650      	mov	r0, sl
   238a8:	f01a fc43 	bl	3e132 <flash_area_read>
		if (rc) {
   238ac:	4602      	mov	r2, r0
   238ae:	b190      	cbz	r0, 238d6 <flash_sync+0xd2>
			LOG_ERR("flash_read error %d offset=0x%08lx",
   238b0:	2301      	movs	r3, #1
   238b2:	f04f 0000 	mov.w	r0, #0
   238b6:	491c      	ldr	r1, [pc, #112]	; (23928 <flash_sync+0x124>)
   238b8:	f363 0007 	bfi	r0, r3, #0, #8
   238bc:	4b1b      	ldr	r3, [pc, #108]	; (2392c <flash_sync+0x128>)
   238be:	1a5b      	subs	r3, r3, r1
   238c0:	08db      	lsrs	r3, r3, #3
   238c2:	f363 108f 	bfi	r0, r3, #6, #10
   238c6:	491c      	ldr	r1, [pc, #112]	; (23938 <flash_sync+0x134>)
   238c8:	4643      	mov	r3, r8
   238ca:	f01a fb4a 	bl	3df62 <log_string_sync>
	if (!flash_verify(ctx->flash_area, ctx->bytes_written, ctx->buf,
   238ce:	b307      	cbz	r7, 23912 <flash_sync+0x10e>
		return -EIO;
   238d0:	f06f 0504 	mvn.w	r5, #4
   238d4:	e7be      	b.n	23854 <flash_sync+0x50>
		if (memcmp(data, &temp, size)) {
   238d6:	4632      	mov	r2, r6
   238d8:	a903      	add	r1, sp, #12
   238da:	4648      	mov	r0, r9
   238dc:	f01c fe90 	bl	40600 <memcmp>
   238e0:	b198      	cbz	r0, 2390a <flash_sync+0x106>
			LOG_ERR("offset=0x%08lx VERIFY FAIL. "
   238e2:	2301      	movs	r3, #1
   238e4:	f04f 0000 	mov.w	r0, #0
   238e8:	4a0f      	ldr	r2, [pc, #60]	; (23928 <flash_sync+0x124>)
   238ea:	f363 0007 	bfi	r0, r3, #0, #8
   238ee:	4b0f      	ldr	r3, [pc, #60]	; (2392c <flash_sync+0x128>)
   238f0:	4912      	ldr	r1, [pc, #72]	; (2393c <flash_sync+0x138>)
   238f2:	1a9b      	subs	r3, r3, r2
   238f4:	08db      	lsrs	r3, r3, #3
   238f6:	f363 108f 	bfi	r0, r3, #6, #10
   238fa:	f899 3000 	ldrb.w	r3, [r9]
   238fe:	4642      	mov	r2, r8
   23900:	9300      	str	r3, [sp, #0]
   23902:	9b03      	ldr	r3, [sp, #12]
   23904:	f01a fb2d 	bl	3df62 <log_string_sync>
   23908:	e7e1      	b.n	238ce <flash_sync+0xca>
	while (len) {
   2390a:	1bbf      	subs	r7, r7, r6
		offset += size;
   2390c:	44b0      	add	r8, r6
		data += size;
   2390e:	44b1      	add	r9, r6
	while (len) {
   23910:	d1c2      	bne.n	23898 <flash_sync+0x94>
	ctx->bytes_written += ctx->buf_bytes;
   23912:	f8b4 2208 	ldrh.w	r2, [r4, #520]	; 0x208
   23916:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
   2391a:	4413      	add	r3, r2
   2391c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
	ctx->buf_bytes = 0U;
   23920:	2300      	movs	r3, #0
   23922:	f8a4 3208 	strh.w	r3, [r4, #520]	; 0x208
	return rc;
   23926:	e795      	b.n	23854 <flash_sync+0x50>
   23928:	00041c2c 	.word	0x00041c2c
   2392c:	00041cac 	.word	0x00041cac
   23930:	00044164 	.word	0x00044164
   23934:	00044194 	.word	0x00044194
   23938:	000441b8 	.word	0x000441b8
   2393c:	000441db 	.word	0x000441db

00023940 <socket_offload_register>:

/* Only one provider may register socket operations upon boot. */
const struct socket_offload *socket_ops;

void socket_offload_register(const struct socket_offload *ops)
{
   23940:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   23942:	4605      	mov	r5, r0
   23944:	b948      	cbnz	r0, 2395a <socket_offload_register+0x1a>
   23946:	490c      	ldr	r1, [pc, #48]	; (23978 <socket_offload_register+0x38>)
   23948:	480c      	ldr	r0, [pc, #48]	; (2397c <socket_offload_register+0x3c>)
   2394a:	2311      	movs	r3, #17
   2394c:	4a0c      	ldr	r2, [pc, #48]	; (23980 <socket_offload_register+0x40>)
   2394e:	f01a faa4 	bl	3de9a <printk>
   23952:	2111      	movs	r1, #17
   23954:	480a      	ldr	r0, [pc, #40]	; (23980 <socket_offload_register+0x40>)
   23956:	f01a faf3 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops == NULL);
   2395a:	4c0a      	ldr	r4, [pc, #40]	; (23984 <socket_offload_register+0x44>)
   2395c:	6822      	ldr	r2, [r4, #0]
   2395e:	b14a      	cbz	r2, 23974 <socket_offload_register+0x34>
   23960:	4909      	ldr	r1, [pc, #36]	; (23988 <socket_offload_register+0x48>)
   23962:	4806      	ldr	r0, [pc, #24]	; (2397c <socket_offload_register+0x3c>)
   23964:	2312      	movs	r3, #18
   23966:	4a06      	ldr	r2, [pc, #24]	; (23980 <socket_offload_register+0x40>)
   23968:	f01a fa97 	bl	3de9a <printk>
   2396c:	2112      	movs	r1, #18
   2396e:	4804      	ldr	r0, [pc, #16]	; (23980 <socket_offload_register+0x40>)
   23970:	f01a fae6 	bl	3df40 <assert_post_action>

	socket_ops = ops;
   23974:	6025      	str	r5, [r4, #0]
}
   23976:	bd38      	pop	{r3, r4, r5, pc}
   23978:	000433f8 	.word	0x000433f8
   2397c:	00043278 	.word	0x00043278
   23980:	00044229 	.word	0x00044229
   23984:	2002389c 	.word	0x2002389c
   23988:	00044264 	.word	0x00044264

0002398c <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   2398c:	4b08      	ldr	r3, [pc, #32]	; (239b0 <get_flash_area_from_id+0x24>)
{
   2398e:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   23990:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   23992:	4b08      	ldr	r3, [pc, #32]	; (239b4 <get_flash_area_from_id+0x28>)
   23994:	6819      	ldr	r1, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   23996:	2300      	movs	r3, #0
   23998:	429d      	cmp	r5, r3
   2399a:	dc02      	bgt.n	239a2 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   2399c:	2200      	movs	r2, #0
}
   2399e:	4610      	mov	r0, r2
   239a0:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   239a2:	011c      	lsls	r4, r3, #4
   239a4:	190a      	adds	r2, r1, r4
   239a6:	5d0c      	ldrb	r4, [r1, r4]
   239a8:	4284      	cmp	r4, r0
   239aa:	d0f8      	beq.n	2399e <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
   239ac:	3301      	adds	r3, #1
   239ae:	e7f3      	b.n	23998 <get_flash_area_from_id+0xc>
   239b0:	000420c4 	.word	0x000420c4
   239b4:	2003208c 	.word	0x2003208c

000239b8 <flash_area_open>:

int flash_area_open(u8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   239b8:	4b08      	ldr	r3, [pc, #32]	; (239dc <flash_area_open+0x24>)
{
   239ba:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
   239bc:	681b      	ldr	r3, [r3, #0]
{
   239be:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   239c0:	b12b      	cbz	r3, 239ce <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   239c2:	f7ff ffe3 	bl	2398c <get_flash_area_from_id>
	if (area == NULL) {
   239c6:	b128      	cbz	r0, 239d4 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   239c8:	6020      	str	r0, [r4, #0]
	return 0;
   239ca:	2000      	movs	r0, #0
}
   239cc:	bd10      	pop	{r4, pc}
		return -EACCES;
   239ce:	f06f 000c 	mvn.w	r0, #12
   239d2:	e7fb      	b.n	239cc <flash_area_open+0x14>
		return -ENOENT;
   239d4:	f06f 0001 	mvn.w	r0, #1
   239d8:	e7f8      	b.n	239cc <flash_area_open+0x14>
   239da:	bf00      	nop
   239dc:	2003208c 	.word	0x2003208c

000239e0 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   239e0:	b508      	push	{r3, lr}
   239e2:	4604      	mov	r4, r0
	__asm__ volatile(
   239e4:	f04f 0220 	mov.w	r2, #32
   239e8:	f3ef 8311 	mrs	r3, BASEPRI
   239ec:	f382 8811 	msr	BASEPRI, r2
   239f0:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   239f4:	f01a fc3f 	bl	3e276 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   239f8:	4620      	mov	r0, r4
   239fa:	f001 f953 	bl	24ca4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   239fe:	4803      	ldr	r0, [pc, #12]	; (23a0c <sys_reboot+0x2c>)
   23a00:	f01a fa4b 	bl	3de9a <printk>
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   23a04:	f000 fc7e 	bl	24304 <arch_cpu_idle>
   23a08:	e7fc      	b.n	23a04 <sys_reboot+0x24>
   23a0a:	bf00      	nop
   23a0c:	00044297 	.word	0x00044297

00023a10 <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   23a10:	4b0a      	ldr	r3, [pc, #40]	; (23a3c <console_out+0x2c>)
{
   23a12:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   23a14:	b2c6      	uxtb	r6, r0
{
   23a16:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   23a18:	681b      	ldr	r3, [r3, #0]
   23a1a:	4630      	mov	r0, r6
   23a1c:	4798      	blx	r3

	if (handled_by_debug_server) {
   23a1e:	2801      	cmp	r0, #1
   23a20:	d00a      	beq.n	23a38 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   23a22:	2c0a      	cmp	r4, #10
   23a24:	4d06      	ldr	r5, [pc, #24]	; (23a40 <console_out+0x30>)
   23a26:	d103      	bne.n	23a30 <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
   23a28:	210d      	movs	r1, #13
   23a2a:	6828      	ldr	r0, [r5, #0]
   23a2c:	f01a fbf7 	bl	3e21e <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
   23a30:	4631      	mov	r1, r6
   23a32:	6828      	ldr	r0, [r5, #0]
   23a34:	f01a fbf3 	bl	3e21e <uart_poll_out>

	return c;
}
   23a38:	4620      	mov	r0, r4
   23a3a:	bd70      	pop	{r4, r5, r6, pc}
   23a3c:	20032090 	.word	0x20032090
   23a40:	200238a0 	.word	0x200238a0

00023a44 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
   23a44:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
   23a46:	4c04      	ldr	r4, [pc, #16]	; (23a58 <uart_console_hook_install+0x14>)
   23a48:	4620      	mov	r0, r4
   23a4a:	f001 fbe3 	bl	25214 <__stdout_hook_install>
	__printk_hook_install(console_out);
   23a4e:	4620      	mov	r0, r4
}
   23a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
   23a54:	f7ff bab2 	b.w	22fbc <__printk_hook_install>
   23a58:	00023a11 	.word	0x00023a11

00023a5c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
   23a5c:	b508      	push	{r3, lr}
   23a5e:	4804      	ldr	r0, [pc, #16]	; (23a70 <uart_console_init+0x14>)
   23a60:	f014 faa2 	bl	37fa8 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   23a64:	4b03      	ldr	r3, [pc, #12]	; (23a74 <uart_console_init+0x18>)
   23a66:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
   23a68:	f7ff ffec 	bl	23a44 <uart_console_hook_install>

	return 0;
}
   23a6c:	2000      	movs	r0, #0
   23a6e:	bd08      	pop	{r3, pc}
   23a70:	00044045 	.word	0x00044045
   23a74:	200238a0 	.word	0x200238a0

00023a78 <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
   23a78:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   23a7a:	2200      	movs	r2, #0
{
   23a7c:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   23a7e:	2101      	movs	r1, #1
   23a80:	2005      	movs	r0, #5
   23a82:	f000 fc9d 	bl	243c0 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
   23a86:	2005      	movs	r0, #5
   23a88:	f000 fc8a 	bl	243a0 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   23a8c:	2202      	movs	r2, #2
   23a8e:	4b07      	ldr	r3, [pc, #28]	; (23aac <clk_init+0x34>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   23a90:	2000      	movs	r0, #0
   23a92:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   23a96:	2203      	movs	r2, #3
   23a98:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
   23a9c:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
   23a9e:	e9c3 0000 	strd	r0, r0, [r3]
   23aa2:	68a3      	ldr	r3, [r4, #8]
   23aa4:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
   23aa8:	bd10      	pop	{r4, pc}
   23aaa:	bf00      	nop
   23aac:	40005000 	.word	0x40005000

00023ab0 <get_status>:
{
   23ab0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   23ab2:	b2cc      	uxtb	r4, r1
   23ab4:	2c01      	cmp	r4, #1
{
   23ab6:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   23ab8:	d909      	bls.n	23ace <get_status+0x1e>
   23aba:	490b      	ldr	r1, [pc, #44]	; (23ae8 <get_status+0x38>)
   23abc:	480b      	ldr	r0, [pc, #44]	; (23aec <get_status+0x3c>)
   23abe:	2384      	movs	r3, #132	; 0x84
   23ac0:	4a0b      	ldr	r2, [pc, #44]	; (23af0 <get_status+0x40>)
   23ac2:	f01a f9ea 	bl	3de9a <printk>
   23ac6:	2184      	movs	r1, #132	; 0x84
   23ac8:	4809      	ldr	r0, [pc, #36]	; (23af0 <get_status+0x40>)
   23aca:	f01a fa39 	bl	3df40 <assert_post_action>
	if (data->started) {
   23ace:	210c      	movs	r1, #12
	data = get_sub_data(dev, type);
   23ad0:	68ab      	ldr	r3, [r5, #8]
	if (data->started) {
   23ad2:	fb04 3101 	mla	r1, r4, r1, r3
   23ad6:	7a4b      	ldrb	r3, [r1, #9]
   23ad8:	b923      	cbnz	r3, 23ae4 <get_status+0x34>
	if (data->ref > 0) {
   23ada:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   23adc:	fab0 f080 	clz	r0, r0
   23ae0:	0940      	lsrs	r0, r0, #5
}
   23ae2:	bd38      	pop	{r3, r4, r5, pc}
		return CLOCK_CONTROL_STATUS_ON;
   23ae4:	2002      	movs	r0, #2
   23ae6:	e7fc      	b.n	23ae2 <get_status+0x32>
   23ae8:	0004435b 	.word	0x0004435b
   23aec:	00043278 	.word	0x00043278
   23af0:	00044320 	.word	0x00044320

00023af4 <clock_async_start>:
{
   23af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   23af8:	b2ce      	uxtb	r6, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   23afa:	2e01      	cmp	r6, #1
{
   23afc:	4607      	mov	r7, r0
   23afe:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   23b00:	d909      	bls.n	23b16 <clock_async_start+0x22>
   23b02:	4949      	ldr	r1, [pc, #292]	; (23c28 <clock_async_start+0x134>)
   23b04:	4849      	ldr	r0, [pc, #292]	; (23c2c <clock_async_start+0x138>)
   23b06:	23fd      	movs	r3, #253	; 0xfd
   23b08:	4a49      	ldr	r2, [pc, #292]	; (23c30 <clock_async_start+0x13c>)
   23b0a:	f01a f9c6 	bl	3de9a <printk>
   23b0e:	21fd      	movs	r1, #253	; 0xfd
   23b10:	4847      	ldr	r0, [pc, #284]	; (23c30 <clock_async_start+0x13c>)
   23b12:	f01a fa15 	bl	3df40 <assert_post_action>
	const struct nrf_clock_control_config *config =
   23b16:	683b      	ldr	r3, [r7, #0]
	clk_data = get_sub_data(dev, type);
   23b18:	f8d7 8008 	ldr.w	r8, [r7, #8]
	const struct nrf_clock_control_config *config =
   23b1c:	f8d3 9008 	ldr.w	r9, [r3, #8]
	__ASSERT_NO_MSG((data == NULL) ||
   23b20:	2c00      	cmp	r4, #0
   23b22:	d157      	bne.n	23bd4 <clock_async_start+0xe0>
   23b24:	f04f 0320 	mov.w	r3, #32
   23b28:	f3ef 8a11 	mrs	sl, BASEPRI
   23b2c:	f383 8811 	msr	BASEPRI, r3
   23b30:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   23b34:	230c      	movs	r3, #12
   23b36:	fb03 8306 	mla	r3, r3, r6, r8
   23b3a:	7a1d      	ldrb	r5, [r3, #8]
   23b3c:	3501      	adds	r5, #1
   23b3e:	b2ed      	uxtb	r5, r5
   23b40:	721d      	strb	r5, [r3, #8]
	__ASSERT_NO_MSG(clk_data->ref > 0);
   23b42:	b95d      	cbnz	r5, 23b5c <clock_async_start+0x68>
   23b44:	493b      	ldr	r1, [pc, #236]	; (23c34 <clock_async_start+0x140>)
   23b46:	4839      	ldr	r0, [pc, #228]	; (23c2c <clock_async_start+0x138>)
   23b48:	f44f 7387 	mov.w	r3, #270	; 0x10e
   23b4c:	4a38      	ldr	r2, [pc, #224]	; (23c30 <clock_async_start+0x13c>)
   23b4e:	f01a f9a4 	bl	3de9a <printk>
   23b52:	f44f 7187 	mov.w	r1, #270	; 0x10e
   23b56:	4836      	ldr	r0, [pc, #216]	; (23c30 <clock_async_start+0x13c>)
   23b58:	f01a f9f2 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   23b5c:	f38a 8811 	msr	BASEPRI, sl
   23b60:	f3bf 8f6f 	isb	sy
	if (data) {
   23b64:	b32c      	cbz	r4, 23bb2 <clock_async_start+0xbe>
    p_reg->INTENCLR = mask;
   23b66:	2203      	movs	r2, #3
   23b68:	4b33      	ldr	r3, [pc, #204]	; (23c38 <clock_async_start+0x144>)
   23b6a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		already_started = clk_data->started;
   23b6e:	220c      	movs	r2, #12
   23b70:	4372      	muls	r2, r6
   23b72:	eb08 0302 	add.w	r3, r8, r2
   23b76:	7a59      	ldrb	r1, [r3, #9]
		if (!already_started) {
   23b78:	b991      	cbnz	r1, 23ba0 <clock_async_start+0xac>
	__asm__ volatile(
   23b7a:	f04f 0020 	mov.w	r0, #32
   23b7e:	f3ef 8c11 	mrs	ip, BASEPRI
   23b82:	f380 8811 	msr	BASEPRI, r0
   23b86:	f3bf 8f6f 	isb	sy
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
   23b8a:	6021      	str	r1, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   23b8c:	6858      	ldr	r0, [r3, #4]
   23b8e:	2800      	cmp	r0, #0
   23b90:	d13a      	bne.n	23c08 <clock_async_start+0x114>
	list->tail = node;
   23b92:	605c      	str	r4, [r3, #4]
	list->head = node;
   23b94:	f848 4002 	str.w	r4, [r8, r2]
	__asm__ volatile(
   23b98:	f38c 8811 	msr	BASEPRI, ip
   23b9c:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   23ba0:	2203      	movs	r2, #3
   23ba2:	4b25      	ldr	r3, [pc, #148]	; (23c38 <clock_async_start+0x144>)
   23ba4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		if (already_started) {
   23ba8:	b119      	cbz	r1, 23bb2 <clock_async_start+0xbe>
			data->cb(dev, data->user_data);
   23baa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   23bae:	4638      	mov	r0, r7
   23bb0:	4798      	blx	r3
	if (ref == 1) {
   23bb2:	2d01      	cmp	r5, #1
   23bb4:	d10c      	bne.n	23bd0 <clock_async_start+0xdc>
		do_start =  (config->start_handler) ?
   23bb6:	0135      	lsls	r5, r6, #4
   23bb8:	f859 3005 	ldr.w	r3, [r9, r5]
				config->start_handler(dev) : true;
   23bbc:	bb3b      	cbnz	r3, 23c0e <clock_async_start+0x11a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23bbe:	2201      	movs	r2, #1
			nrf_clock_task_trigger(NRF_CLOCK,
   23bc0:	44a9      	add	r9, r5
   23bc2:	f899 300a 	ldrb.w	r3, [r9, #10]
   23bc6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23bca:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   23bce:	601a      	str	r2, [r3, #0]
	return 0;
   23bd0:	2000      	movs	r0, #0
   23bd2:	e027      	b.n	23c24 <clock_async_start+0x130>
	__ASSERT_NO_MSG((data == NULL) ||
   23bd4:	6863      	ldr	r3, [r4, #4]
   23bd6:	b95b      	cbnz	r3, 23bf0 <clock_async_start+0xfc>
   23bd8:	4918      	ldr	r1, [pc, #96]	; (23c3c <clock_async_start+0x148>)
   23bda:	4814      	ldr	r0, [pc, #80]	; (23c2c <clock_async_start+0x138>)
   23bdc:	f44f 7381 	mov.w	r3, #258	; 0x102
   23be0:	4a13      	ldr	r2, [pc, #76]	; (23c30 <clock_async_start+0x13c>)
   23be2:	f01a f95a 	bl	3de9a <printk>
   23be6:	f44f 7181 	mov.w	r1, #258	; 0x102
   23bea:	4811      	ldr	r0, [pc, #68]	; (23c30 <clock_async_start+0x13c>)
   23bec:	f01a f9a8 	bl	3df40 <assert_post_action>
	sys_snode_t *item = sys_slist_peek_head(list);
   23bf0:	230c      	movs	r3, #12
   23bf2:	4373      	muls	r3, r6
   23bf4:	f858 3003 	ldr.w	r3, [r8, r3]
		if (item == node) {
   23bf8:	429c      	cmp	r4, r3
   23bfa:	d011      	beq.n	23c20 <clock_async_start+0x12c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23bfc:	2b00      	cmp	r3, #0
   23bfe:	d091      	beq.n	23b24 <clock_async_start+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23c00:	681b      	ldr	r3, [r3, #0]
	} while (item);
   23c02:	2b00      	cmp	r3, #0
   23c04:	d1f8      	bne.n	23bf8 <clock_async_start+0x104>
   23c06:	e78d      	b.n	23b24 <clock_async_start+0x30>
	parent->next = child;
   23c08:	6004      	str	r4, [r0, #0]
	list->tail = node;
   23c0a:	605c      	str	r4, [r3, #4]
   23c0c:	e7c4      	b.n	23b98 <clock_async_start+0xa4>
				config->start_handler(dev) : true;
   23c0e:	4638      	mov	r0, r7
   23c10:	4798      	blx	r3
   23c12:	2800      	cmp	r0, #0
   23c14:	d1d3      	bne.n	23bbe <clock_async_start+0xca>
			clkstarted_handle(dev, type);
   23c16:	4631      	mov	r1, r6
   23c18:	4638      	mov	r0, r7
   23c1a:	f01a fb05 	bl	3e228 <clkstarted_handle>
   23c1e:	e7d7      	b.n	23bd0 <clock_async_start+0xdc>
		return -EBUSY;
   23c20:	f06f 000f 	mvn.w	r0, #15
}
   23c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23c28:	0004435b 	.word	0x0004435b
   23c2c:	00043278 	.word	0x00043278
   23c30:	00044320 	.word	0x00044320
   23c34:	0004430e 	.word	0x0004430e
   23c38:	40005000 	.word	0x40005000
   23c3c:	000442c0 	.word	0x000442c0

00023c40 <clock_stop>:
{
   23c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   23c44:	b2cd      	uxtb	r5, r1
   23c46:	2d01      	cmp	r5, #1
{
   23c48:	4680      	mov	r8, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   23c4a:	d909      	bls.n	23c60 <clock_stop+0x20>
   23c4c:	4925      	ldr	r1, [pc, #148]	; (23ce4 <clock_stop+0xa4>)
   23c4e:	4826      	ldr	r0, [pc, #152]	; (23ce8 <clock_stop+0xa8>)
   23c50:	2399      	movs	r3, #153	; 0x99
   23c52:	4a26      	ldr	r2, [pc, #152]	; (23cec <clock_stop+0xac>)
   23c54:	f01a f921 	bl	3de9a <printk>
   23c58:	2199      	movs	r1, #153	; 0x99
   23c5a:	4824      	ldr	r0, [pc, #144]	; (23cec <clock_stop+0xac>)
   23c5c:	f01a f970 	bl	3df40 <assert_post_action>
	const struct nrf_clock_control_config *config =
   23c60:	f8d8 3000 	ldr.w	r3, [r8]
	data = get_sub_data(dev, type);
   23c64:	f8d8 7008 	ldr.w	r7, [r8, #8]
	const struct nrf_clock_control_config *config =
   23c68:	f8d3 9008 	ldr.w	r9, [r3, #8]
	__asm__ volatile(
   23c6c:	f04f 0320 	mov.w	r3, #32
   23c70:	f3ef 8611 	mrs	r6, BASEPRI
   23c74:	f383 8811 	msr	BASEPRI, r3
   23c78:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   23c7c:	220c      	movs	r2, #12
   23c7e:	436a      	muls	r2, r5
   23c80:	18b9      	adds	r1, r7, r2
   23c82:	7a0b      	ldrb	r3, [r1, #8]
   23c84:	b34b      	cbz	r3, 23cda <clock_stop+0x9a>
	data->ref--;
   23c86:	3b01      	subs	r3, #1
   23c88:	b2db      	uxtb	r3, r3
   23c8a:	720b      	strb	r3, [r1, #8]
	if (data->ref == 0) {
   23c8c:	bb43      	cbnz	r3, 23ce0 <clock_stop+0xa0>
		do_stop =  (config->stop_handler) ?
   23c8e:	012c      	lsls	r4, r5, #4
	list->head = NULL;
   23c90:	50bb      	str	r3, [r7, r2]
	list->tail = NULL;
   23c92:	604b      	str	r3, [r1, #4]
   23c94:	eb09 0304 	add.w	r3, r9, r4
   23c98:	685b      	ldr	r3, [r3, #4]
				config->stop_handler(dev) : true;
   23c9a:	b9cb      	cbnz	r3, 23cd0 <clock_stop+0x90>
   23c9c:	2201      	movs	r2, #1
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   23c9e:	444c      	add	r4, r9
   23ca0:	7ae3      	ldrb	r3, [r4, #11]
   23ca2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23ca6:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   23caa:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23cac:	2200      	movs	r2, #0
   23cae:	8923      	ldrh	r3, [r4, #8]
   23cb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23cb4:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   23cb8:	601a      	str	r2, [r3, #0]
		data->started = false;
   23cba:	230c      	movs	r3, #12
   23cbc:	2000      	movs	r0, #0
   23cbe:	fb05 7503 	mla	r5, r5, r3, r7
   23cc2:	7268      	strb	r0, [r5, #9]
	__asm__ volatile(
   23cc4:	f386 8811 	msr	BASEPRI, r6
   23cc8:	f3bf 8f6f 	isb	sy
}
   23ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				config->stop_handler(dev) : true;
   23cd0:	4640      	mov	r0, r8
   23cd2:	4798      	blx	r3
   23cd4:	2800      	cmp	r0, #0
   23cd6:	d1e1      	bne.n	23c9c <clock_stop+0x5c>
   23cd8:	e7ef      	b.n	23cba <clock_stop+0x7a>
		err = -EALREADY;
   23cda:	f06f 0077 	mvn.w	r0, #119	; 0x77
   23cde:	e7f1      	b.n	23cc4 <clock_stop+0x84>
	int err = 0;
   23ce0:	2000      	movs	r0, #0
   23ce2:	e7ef      	b.n	23cc4 <clock_stop+0x84>
   23ce4:	0004435b 	.word	0x0004435b
   23ce8:	00043278 	.word	0x00043278
   23cec:	00044320 	.word	0x00044320

00023cf0 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
   23cf0:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   23cf2:	4b10      	ldr	r3, [pc, #64]	; (23d34 <nrf_power_clock_isr+0x44>)
   23cf4:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   23cf6:	b162      	cbz	r2, 23d12 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
   23cf8:	4a0f      	ldr	r2, [pc, #60]	; (23d38 <nrf_power_clock_isr+0x48>)
   23cfa:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   23cfe:	07d1      	lsls	r1, r2, #31
   23d00:	d507      	bpl.n	23d12 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23d02:	2200      	movs	r2, #0
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   23d04:	480d      	ldr	r0, [pc, #52]	; (23d3c <nrf_power_clock_isr+0x4c>)
   23d06:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
   23d08:	6883      	ldr	r3, [r0, #8]
   23d0a:	7a59      	ldrb	r1, [r3, #9]
   23d0c:	b909      	cbnz	r1, 23d12 <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   23d0e:	f01a fa8b 	bl	3e228 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   23d12:	4b0b      	ldr	r3, [pc, #44]	; (23d40 <nrf_power_clock_isr+0x50>)
   23d14:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   23d16:	b162      	cbz	r2, 23d32 <nrf_power_clock_isr+0x42>
    return p_reg->INTENSET & mask;
   23d18:	4a07      	ldr	r2, [pc, #28]	; (23d38 <nrf_power_clock_isr+0x48>)
   23d1a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   23d1e:	0792      	lsls	r2, r2, #30
   23d20:	d507      	bpl.n	23d32 <nrf_power_clock_isr+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23d22:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   23d24:	2101      	movs	r1, #1
   23d26:	601a      	str	r2, [r3, #0]
   23d28:	4804      	ldr	r0, [pc, #16]	; (23d3c <nrf_power_clock_isr+0x4c>)
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
   23d2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   23d2e:	f01a ba7b 	b.w	3e228 <clkstarted_handle>
}
   23d32:	bd08      	pop	{r3, pc}
   23d34:	40005100 	.word	0x40005100
   23d38:	40005000 	.word	0x40005000
   23d3c:	20032318 	.word	0x20032318
   23d40:	40005104 	.word	0x40005104

00023d44 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   23d44:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   23d46:	4c06      	ldr	r4, [pc, #24]	; (23d60 <z_clock_isr+0x1c>)
   23d48:	4906      	ldr	r1, [pc, #24]	; (23d64 <z_clock_isr+0x20>)
   23d4a:	4622      	mov	r2, r4
   23d4c:	4806      	ldr	r0, [pc, #24]	; (23d68 <z_clock_isr+0x24>)
   23d4e:	2317      	movs	r3, #23
   23d50:	f01a f8a3 	bl	3de9a <printk>
   23d54:	4620      	mov	r0, r4
}
   23d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   23d5a:	2117      	movs	r1, #23
   23d5c:	f01a b8f0 	b.w	3df40 <assert_post_action>
   23d60:	000443a9 	.word	0x000443a9
   23d64:	00048cfb 	.word	0x00048cfb
   23d68:	00043278 	.word	0x00043278

00023d6c <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
   23d6c:	2200      	movs	r2, #0
{
   23d6e:	b538      	push	{r3, r4, r5, lr}
	RTC->EVENTS_COMPARE[0] = 0;
   23d70:	4b22      	ldr	r3, [pc, #136]	; (23dfc <rtc1_nrf_isr+0x90>)
   23d72:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
   23d76:	f04f 0320 	mov.w	r3, #32
   23d7a:	f3ef 8511 	mrs	r5, BASEPRI
   23d7e:	f383 8811 	msr	BASEPRI, r3
   23d82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23d86:	481e      	ldr	r0, [pc, #120]	; (23e00 <rtc1_nrf_isr+0x94>)
   23d88:	f016 fb0e 	bl	3a3a8 <z_spin_lock_valid>
   23d8c:	b968      	cbnz	r0, 23daa <rtc1_nrf_isr+0x3e>
   23d8e:	234a      	movs	r3, #74	; 0x4a
   23d90:	4a1c      	ldr	r2, [pc, #112]	; (23e04 <rtc1_nrf_isr+0x98>)
   23d92:	491d      	ldr	r1, [pc, #116]	; (23e08 <rtc1_nrf_isr+0x9c>)
   23d94:	481d      	ldr	r0, [pc, #116]	; (23e0c <rtc1_nrf_isr+0xa0>)
   23d96:	f01a f880 	bl	3de9a <printk>
   23d9a:	4919      	ldr	r1, [pc, #100]	; (23e00 <rtc1_nrf_isr+0x94>)
   23d9c:	481c      	ldr	r0, [pc, #112]	; (23e10 <rtc1_nrf_isr+0xa4>)
   23d9e:	f01a f87c 	bl	3de9a <printk>
   23da2:	214a      	movs	r1, #74	; 0x4a
   23da4:	4817      	ldr	r0, [pc, #92]	; (23e04 <rtc1_nrf_isr+0x98>)
   23da6:	f01a f8cb 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   23daa:	4815      	ldr	r0, [pc, #84]	; (23e00 <rtc1_nrf_isr+0x94>)
   23dac:	f016 fb1a 	bl	3a3e4 <z_spin_lock_set_owner>
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   23db0:	4b12      	ldr	r3, [pc, #72]	; (23dfc <rtc1_nrf_isr+0x90>)

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   23db2:	4a18      	ldr	r2, [pc, #96]	; (23e14 <rtc1_nrf_isr+0xa8>)
   23db4:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
   23db8:	6813      	ldr	r3, [r2, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23dba:	4811      	ldr	r0, [pc, #68]	; (23e00 <rtc1_nrf_isr+0x94>)
	return (a - b) & COUNTER_MAX;
   23dbc:	1ae4      	subs	r4, r4, r3
   23dbe:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   23dc2:	4423      	add	r3, r4
   23dc4:	6013      	str	r3, [r2, #0]
   23dc6:	f016 fafd 	bl	3a3c4 <z_spin_unlock_valid>
   23dca:	b968      	cbnz	r0, 23de8 <rtc1_nrf_isr+0x7c>
   23dcc:	235d      	movs	r3, #93	; 0x5d
   23dce:	4a0d      	ldr	r2, [pc, #52]	; (23e04 <rtc1_nrf_isr+0x98>)
   23dd0:	4911      	ldr	r1, [pc, #68]	; (23e18 <rtc1_nrf_isr+0xac>)
   23dd2:	480e      	ldr	r0, [pc, #56]	; (23e0c <rtc1_nrf_isr+0xa0>)
   23dd4:	f01a f861 	bl	3de9a <printk>
   23dd8:	4909      	ldr	r1, [pc, #36]	; (23e00 <rtc1_nrf_isr+0x94>)
   23dda:	4810      	ldr	r0, [pc, #64]	; (23e1c <rtc1_nrf_isr+0xb0>)
   23ddc:	f01a f85d 	bl	3de9a <printk>
   23de0:	215d      	movs	r1, #93	; 0x5d
   23de2:	4808      	ldr	r0, [pc, #32]	; (23e04 <rtc1_nrf_isr+0x98>)
   23de4:	f01a f8ac 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   23de8:	f385 8811 	msr	BASEPRI, r5
   23dec:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   23df0:	4620      	mov	r0, r4
}
   23df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   23df6:	f016 bfdf 	b.w	3adb8 <z_clock_announce>
   23dfa:	bf00      	nop
   23dfc:	40015000 	.word	0x40015000
   23e00:	200238c0 	.word	0x200238c0
   23e04:	00043dc8 	.word	0x00043dc8
   23e08:	00043dee 	.word	0x00043dee
   23e0c:	00043278 	.word	0x00043278
   23e10:	00043e03 	.word	0x00043e03
   23e14:	200238bc 	.word	0x200238bc
   23e18:	00043e1b 	.word	0x00043e1b
   23e1c:	00043e32 	.word	0x00043e32

00023e20 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
   23e20:	b570      	push	{r4, r5, r6, lr}
   23e22:	4815      	ldr	r0, [pc, #84]	; (23e78 <z_clock_driver_init+0x58>)
   23e24:	f014 f8c0 	bl	37fa8 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
   23e28:	b310      	cbz	r0, 23e70 <z_clock_driver_init+0x50>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   23e2a:	6843      	ldr	r3, [r0, #4]
   23e2c:	2101      	movs	r1, #1
   23e2e:	681b      	ldr	r3, [r3, #0]
   23e30:	4798      	blx	r3
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   23e32:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
   23e34:	2601      	movs	r6, #1
    p_reg->INTENSET = mask;
   23e36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   23e3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   23e3e:	4d0f      	ldr	r5, [pc, #60]	; (23e7c <z_clock_driver_init+0x5c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   23e40:	4631      	mov	r1, r6
   23e42:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
   23e46:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
   23e4a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   23e4e:	4b0c      	ldr	r3, [pc, #48]	; (23e80 <z_clock_driver_init+0x60>)
   23e50:	2015      	movs	r0, #21
   23e52:	601c      	str	r4, [r3, #0]
   23e54:	4b0b      	ldr	r3, [pc, #44]	; (23e84 <z_clock_driver_init+0x64>)
   23e56:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   23e5a:	4622      	mov	r2, r4
   23e5c:	f000 fab0 	bl	243c0 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
   23e60:	2015      	movs	r0, #21
   23e62:	f000 fa9d 	bl	243a0 <arch_irq_enable>

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   23e66:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   23e68:	4b07      	ldr	r3, [pc, #28]	; (23e88 <z_clock_driver_init+0x68>)
   23e6a:	601e      	str	r6, [r3, #0]
   23e6c:	602e      	str	r6, [r5, #0]
}
   23e6e:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   23e70:	f04f 30ff 	mov.w	r0, #4294967295
   23e74:	e7fb      	b.n	23e6e <z_clock_driver_init+0x4e>
   23e76:	bf00      	nop
   23e78:	0004437f 	.word	0x0004437f
   23e7c:	40015000 	.word	0x40015000
   23e80:	40015140 	.word	0x40015140
   23e84:	e000e100 	.word	0xe000e100
   23e88:	40015008 	.word	0x40015008

00023e8c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   23e8c:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
   23e8e:	4c3a      	ldr	r4, [pc, #232]	; (23f78 <z_clock_set_timeout+0xec>)
   23e90:	f1b0 3fff 	cmp.w	r0, #4294967295
   23e94:	bf18      	it	ne
   23e96:	4604      	movne	r4, r0
	__asm__ volatile(
   23e98:	f04f 0320 	mov.w	r3, #32
   23e9c:	f3ef 8511 	mrs	r5, BASEPRI
   23ea0:	f383 8811 	msr	BASEPRI, r3
   23ea4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23ea8:	4834      	ldr	r0, [pc, #208]	; (23f7c <z_clock_set_timeout+0xf0>)
   23eaa:	f016 fa7d 	bl	3a3a8 <z_spin_lock_valid>
   23eae:	b968      	cbnz	r0, 23ecc <z_clock_set_timeout+0x40>
   23eb0:	234a      	movs	r3, #74	; 0x4a
   23eb2:	4a33      	ldr	r2, [pc, #204]	; (23f80 <z_clock_set_timeout+0xf4>)
   23eb4:	4933      	ldr	r1, [pc, #204]	; (23f84 <z_clock_set_timeout+0xf8>)
   23eb6:	4834      	ldr	r0, [pc, #208]	; (23f88 <z_clock_set_timeout+0xfc>)
   23eb8:	f019 ffef 	bl	3de9a <printk>
   23ebc:	492f      	ldr	r1, [pc, #188]	; (23f7c <z_clock_set_timeout+0xf0>)
   23ebe:	4833      	ldr	r0, [pc, #204]	; (23f8c <z_clock_set_timeout+0x100>)
   23ec0:	f019 ffeb 	bl	3de9a <printk>
   23ec4:	214a      	movs	r1, #74	; 0x4a
   23ec6:	482e      	ldr	r0, [pc, #184]	; (23f80 <z_clock_set_timeout+0xf4>)
   23ec8:	f01a f83a 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   23ecc:	482b      	ldr	r0, [pc, #172]	; (23f7c <z_clock_set_timeout+0xf0>)
   23ece:	f016 fa89 	bl	3a3e4 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   23ed2:	4b2f      	ldr	r3, [pc, #188]	; (23f90 <z_clock_set_timeout+0x104>)
   23ed4:	4e28      	ldr	r6, [pc, #160]	; (23f78 <z_clock_set_timeout+0xec>)
   23ed6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
   23eda:	4b2e      	ldr	r3, [pc, #184]	; (23f94 <z_clock_set_timeout+0x108>)
   23edc:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   23ede:	1ad0      	subs	r0, r2, r3
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   23ee0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   23ee4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
	if (unannounced >= COUNTER_HALF_SPAN) {
   23ee8:	d12c      	bne.n	23f44 <z_clock_set_timeout+0xb8>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   23eea:	1e60      	subs	r0, r4, #1
   23eec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   23ef0:	42b0      	cmp	r0, r6
   23ef2:	bfa8      	it	ge
   23ef4:	4630      	movge	r0, r6
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   23ef6:	3101      	adds	r1, #1
   23ef8:	4408      	add	r0, r1
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   23efa:	42b0      	cmp	r0, r6
   23efc:	bf94      	ite	ls
   23efe:	181b      	addls	r3, r3, r0
   23f00:	199b      	addhi	r3, r3, r6
	return (a - b) & COUNTER_MAX;
   23f02:	1a9a      	subs	r2, r3, r2
   23f04:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   23f08:	4921      	ldr	r1, [pc, #132]	; (23f90 <z_clock_set_timeout+0x104>)
   23f0a:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
   23f0e:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
   23f10:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   23f14:	d918      	bls.n	23f48 <z_clock_set_timeout+0xbc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23f16:	4819      	ldr	r0, [pc, #100]	; (23f7c <z_clock_set_timeout+0xf0>)
   23f18:	f016 fa54 	bl	3a3c4 <z_spin_unlock_valid>
   23f1c:	b968      	cbnz	r0, 23f3a <z_clock_set_timeout+0xae>
   23f1e:	235d      	movs	r3, #93	; 0x5d
   23f20:	4a17      	ldr	r2, [pc, #92]	; (23f80 <z_clock_set_timeout+0xf4>)
   23f22:	491d      	ldr	r1, [pc, #116]	; (23f98 <z_clock_set_timeout+0x10c>)
   23f24:	4818      	ldr	r0, [pc, #96]	; (23f88 <z_clock_set_timeout+0xfc>)
   23f26:	f019 ffb8 	bl	3de9a <printk>
   23f2a:	4914      	ldr	r1, [pc, #80]	; (23f7c <z_clock_set_timeout+0xf0>)
   23f2c:	481b      	ldr	r0, [pc, #108]	; (23f9c <z_clock_set_timeout+0x110>)
   23f2e:	f019 ffb4 	bl	3de9a <printk>
   23f32:	215d      	movs	r1, #93	; 0x5d
   23f34:	4812      	ldr	r0, [pc, #72]	; (23f80 <z_clock_set_timeout+0xf4>)
   23f36:	f01a f803 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   23f3a:	f385 8811 	msr	BASEPRI, r5
   23f3e:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
   23f42:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
   23f44:	2000      	movs	r0, #0
   23f46:	e7d6      	b.n	23ef6 <z_clock_set_timeout+0x6a>
     return p_reg->COUNTER;
   23f48:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
   23f4c:	4814      	ldr	r0, [pc, #80]	; (23fa0 <z_clock_set_timeout+0x114>)
	return (a - b) & COUNTER_MAX;
   23f4e:	1a9a      	subs	r2, r3, r2
   23f50:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
   23f54:	1e54      	subs	r4, r2, #1
   23f56:	4284      	cmp	r4, r0
   23f58:	d905      	bls.n	23f66 <z_clock_set_timeout+0xda>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   23f5a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   23f5e:	4b11      	ldr	r3, [pc, #68]	; (23fa4 <z_clock_set_timeout+0x118>)
   23f60:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   23f64:	e7d7      	b.n	23f16 <z_clock_set_timeout+0x8a>
		} else if (dt == 1) {
   23f66:	2a01      	cmp	r2, #1
			set_comparator(cyc + 2);
   23f68:	bf02      	ittt	eq
   23f6a:	3302      	addeq	r3, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   23f6c:	f023 437f 	biceq.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   23f70:	f8c1 3540 	streq.w	r3, [r1, #1344]	; 0x540
   23f74:	e7cf      	b.n	23f16 <z_clock_set_timeout+0x8a>
   23f76:	bf00      	nop
   23f78:	00fffffe 	.word	0x00fffffe
   23f7c:	200238c0 	.word	0x200238c0
   23f80:	00043dc8 	.word	0x00043dc8
   23f84:	00043dee 	.word	0x00043dee
   23f88:	00043278 	.word	0x00043278
   23f8c:	00043e03 	.word	0x00043e03
   23f90:	40015000 	.word	0x40015000
   23f94:	200238bc 	.word	0x200238bc
   23f98:	00043e1b 	.word	0x00043e1b
   23f9c:	00043e32 	.word	0x00043e32
   23fa0:	007ffffe 	.word	0x007ffffe
   23fa4:	e000e100 	.word	0xe000e100

00023fa8 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
   23fa8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   23faa:	f04f 0320 	mov.w	r3, #32
   23fae:	f3ef 8511 	mrs	r5, BASEPRI
   23fb2:	f383 8811 	msr	BASEPRI, r3
   23fb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23fba:	481a      	ldr	r0, [pc, #104]	; (24024 <z_clock_elapsed+0x7c>)
   23fbc:	f016 f9f4 	bl	3a3a8 <z_spin_lock_valid>
   23fc0:	b968      	cbnz	r0, 23fde <z_clock_elapsed+0x36>
   23fc2:	234a      	movs	r3, #74	; 0x4a
   23fc4:	4a18      	ldr	r2, [pc, #96]	; (24028 <z_clock_elapsed+0x80>)
   23fc6:	4919      	ldr	r1, [pc, #100]	; (2402c <z_clock_elapsed+0x84>)
   23fc8:	4819      	ldr	r0, [pc, #100]	; (24030 <z_clock_elapsed+0x88>)
   23fca:	f019 ff66 	bl	3de9a <printk>
   23fce:	4915      	ldr	r1, [pc, #84]	; (24024 <z_clock_elapsed+0x7c>)
   23fd0:	4818      	ldr	r0, [pc, #96]	; (24034 <z_clock_elapsed+0x8c>)
   23fd2:	f019 ff62 	bl	3de9a <printk>
   23fd6:	214a      	movs	r1, #74	; 0x4a
   23fd8:	4813      	ldr	r0, [pc, #76]	; (24028 <z_clock_elapsed+0x80>)
   23fda:	f019 ffb1 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   23fde:	4811      	ldr	r0, [pc, #68]	; (24024 <z_clock_elapsed+0x7c>)
   23fe0:	f016 fa00 	bl	3a3e4 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   23fe4:	4b14      	ldr	r3, [pc, #80]	; (24038 <z_clock_elapsed+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23fe6:	480f      	ldr	r0, [pc, #60]	; (24024 <z_clock_elapsed+0x7c>)
   23fe8:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   23fec:	4b13      	ldr	r3, [pc, #76]	; (2403c <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
   23fee:	681b      	ldr	r3, [r3, #0]
   23ff0:	1ae4      	subs	r4, r4, r3
   23ff2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   23ff6:	f016 f9e5 	bl	3a3c4 <z_spin_unlock_valid>
   23ffa:	b968      	cbnz	r0, 24018 <z_clock_elapsed+0x70>
   23ffc:	235d      	movs	r3, #93	; 0x5d
   23ffe:	4a0a      	ldr	r2, [pc, #40]	; (24028 <z_clock_elapsed+0x80>)
   24000:	490f      	ldr	r1, [pc, #60]	; (24040 <z_clock_elapsed+0x98>)
   24002:	480b      	ldr	r0, [pc, #44]	; (24030 <z_clock_elapsed+0x88>)
   24004:	f019 ff49 	bl	3de9a <printk>
   24008:	4906      	ldr	r1, [pc, #24]	; (24024 <z_clock_elapsed+0x7c>)
   2400a:	480e      	ldr	r0, [pc, #56]	; (24044 <z_clock_elapsed+0x9c>)
   2400c:	f019 ff45 	bl	3de9a <printk>
   24010:	215d      	movs	r1, #93	; 0x5d
   24012:	4805      	ldr	r0, [pc, #20]	; (24028 <z_clock_elapsed+0x80>)
   24014:	f019 ff94 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   24018:	f385 8811 	msr	BASEPRI, r5
   2401c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   24020:	4620      	mov	r0, r4
   24022:	bd38      	pop	{r3, r4, r5, pc}
   24024:	200238c0 	.word	0x200238c0
   24028:	00043dc8 	.word	0x00043dc8
   2402c:	00043dee 	.word	0x00043dee
   24030:	00043278 	.word	0x00043278
   24034:	00043e03 	.word	0x00043e03
   24038:	40015000 	.word	0x40015000
   2403c:	200238bc 	.word	0x200238bc
   24040:	00043e1b 	.word	0x00043e1b
   24044:	00043e32 	.word	0x00043e32

00024048 <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
   24048:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2404a:	f04f 0320 	mov.w	r3, #32
   2404e:	f3ef 8511 	mrs	r5, BASEPRI
   24052:	f383 8811 	msr	BASEPRI, r3
   24056:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2405a:	481b      	ldr	r0, [pc, #108]	; (240c8 <z_timer_cycle_get_32+0x80>)
   2405c:	f016 f9a4 	bl	3a3a8 <z_spin_lock_valid>
   24060:	b968      	cbnz	r0, 2407e <z_timer_cycle_get_32+0x36>
   24062:	234a      	movs	r3, #74	; 0x4a
   24064:	4a19      	ldr	r2, [pc, #100]	; (240cc <z_timer_cycle_get_32+0x84>)
   24066:	491a      	ldr	r1, [pc, #104]	; (240d0 <z_timer_cycle_get_32+0x88>)
   24068:	481a      	ldr	r0, [pc, #104]	; (240d4 <z_timer_cycle_get_32+0x8c>)
   2406a:	f019 ff16 	bl	3de9a <printk>
   2406e:	4916      	ldr	r1, [pc, #88]	; (240c8 <z_timer_cycle_get_32+0x80>)
   24070:	4819      	ldr	r0, [pc, #100]	; (240d8 <z_timer_cycle_get_32+0x90>)
   24072:	f019 ff12 	bl	3de9a <printk>
   24076:	214a      	movs	r1, #74	; 0x4a
   24078:	4814      	ldr	r0, [pc, #80]	; (240cc <z_timer_cycle_get_32+0x84>)
   2407a:	f019 ff61 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   2407e:	4812      	ldr	r0, [pc, #72]	; (240c8 <z_timer_cycle_get_32+0x80>)
   24080:	f016 f9b0 	bl	3a3e4 <z_spin_lock_set_owner>
   24084:	4b15      	ldr	r3, [pc, #84]	; (240dc <z_timer_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24086:	4810      	ldr	r0, [pc, #64]	; (240c8 <z_timer_cycle_get_32+0x80>)
   24088:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   2408c:	4b14      	ldr	r3, [pc, #80]	; (240e0 <z_timer_cycle_get_32+0x98>)
   2408e:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   24090:	1ae4      	subs	r4, r4, r3
   24092:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   24096:	441c      	add	r4, r3
   24098:	f016 f994 	bl	3a3c4 <z_spin_unlock_valid>
   2409c:	b968      	cbnz	r0, 240ba <z_timer_cycle_get_32+0x72>
   2409e:	235d      	movs	r3, #93	; 0x5d
   240a0:	4a0a      	ldr	r2, [pc, #40]	; (240cc <z_timer_cycle_get_32+0x84>)
   240a2:	4910      	ldr	r1, [pc, #64]	; (240e4 <z_timer_cycle_get_32+0x9c>)
   240a4:	480b      	ldr	r0, [pc, #44]	; (240d4 <z_timer_cycle_get_32+0x8c>)
   240a6:	f019 fef8 	bl	3de9a <printk>
   240aa:	4907      	ldr	r1, [pc, #28]	; (240c8 <z_timer_cycle_get_32+0x80>)
   240ac:	480e      	ldr	r0, [pc, #56]	; (240e8 <z_timer_cycle_get_32+0xa0>)
   240ae:	f019 fef4 	bl	3de9a <printk>
   240b2:	215d      	movs	r1, #93	; 0x5d
   240b4:	4805      	ldr	r0, [pc, #20]	; (240cc <z_timer_cycle_get_32+0x84>)
   240b6:	f019 ff43 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   240ba:	f385 8811 	msr	BASEPRI, r5
   240be:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   240c2:	4620      	mov	r0, r4
   240c4:	bd38      	pop	{r3, r4, r5, pc}
   240c6:	bf00      	nop
   240c8:	200238c0 	.word	0x200238c0
   240cc:	00043dc8 	.word	0x00043dc8
   240d0:	00043dee 	.word	0x00043dee
   240d4:	00043278 	.word	0x00043278
   240d8:	00043e03 	.word	0x00043e03
   240dc:	40015000 	.word	0x40015000
   240e0:	200238bc 	.word	0x200238bc
   240e4:	00043e1b 	.word	0x00043e1b
   240e8:	00043e32 	.word	0x00043e32

000240ec <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   240ec:	2303      	movs	r3, #3
static void _DoInit(void) {
   240ee:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   240f0:	4c10      	ldr	r4, [pc, #64]	; (24134 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   240f2:	4a11      	ldr	r2, [pc, #68]	; (24138 <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   240f4:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   240f8:	4b10      	ldr	r3, [pc, #64]	; (2413c <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   240fa:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   240fc:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   240fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   24102:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   24104:	4a0e      	ldr	r2, [pc, #56]	; (24140 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   24106:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
   24108:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
   2410a:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   2410c:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
   2410e:	490d      	ldr	r1, [pc, #52]	; (24144 <_DoInit+0x58>)
   24110:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
   24112:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   24114:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   24116:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
   24118:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   2411a:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2411c:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   2411e:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
   24120:	f01c fc51 	bl	409c6 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
   24124:	4908      	ldr	r1, [pc, #32]	; (24148 <_DoInit+0x5c>)
   24126:	4620      	mov	r0, r4
   24128:	f01c fc4d 	bl	409c6 <strcpy>
  p->acID[6] = ' ';
   2412c:	2320      	movs	r3, #32
   2412e:	71a3      	strb	r3, [r4, #6]
}
   24130:	bd10      	pop	{r4, pc}
   24132:	bf00      	nop
   24134:	200238c4 	.word	0x200238c4
   24138:	000443db 	.word	0x000443db
   2413c:	20029e9f 	.word	0x20029e9f
   24140:	20029e8f 	.word	0x20029e8f
   24144:	000443e4 	.word	0x000443e4
   24148:	000443e8 	.word	0x000443e8

0002414c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2414c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
   24150:	f04f 0b18 	mov.w	fp, #24
   24154:	4e22      	ldr	r6, [pc, #136]	; (241e0 <SEGGER_RTT_WriteSkipNoLock+0x94>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24156:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   24158:	fb0b 6200 	mla	r2, fp, r0, r6
   2415c:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   2415e:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24160:	4607      	mov	r7, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   24162:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24164:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   24166:	d834      	bhi.n	241d2 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   24168:	f8d2 a020 	ldr.w	sl, [r2, #32]
   2416c:	ebaa 0905 	sub.w	r9, sl, r5
   24170:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   24174:	42a2      	cmp	r2, r4
   24176:	d311      	bcc.n	2419c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
   24178:	f04f 0918 	mov.w	r9, #24
   2417c:	fb07 9309 	mla	r3, r7, r9, r9
   24180:	4433      	add	r3, r6
   24182:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24184:	4622      	mov	r2, r4
   24186:	4641      	mov	r1, r8
   24188:	4428      	add	r0, r5
   2418a:	f01c fa47 	bl	4061c <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   2418e:	fb09 6607 	mla	r6, r9, r7, r6
   24192:	442c      	add	r4, r5
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
      return 1;
   24194:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   24196:	6274      	str	r4, [r6, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   24198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   2419c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   2419e:	429c      	cmp	r4, r3
   241a0:	d81b      	bhi.n	241da <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
   241a2:	fb00 bb0b 	mla	fp, r0, fp, fp
   241a6:	44b3      	add	fp, r6
   241a8:	f8db 0004 	ldr.w	r0, [fp, #4]
   241ac:	464a      	mov	r2, r9
   241ae:	4428      	add	r0, r5
   241b0:	442c      	add	r4, r5
   241b2:	f01c fa33 	bl	4061c <memcpy>
      if (NumBytes) {
   241b6:	ebb4 040a 	subs.w	r4, r4, sl
   241ba:	d006      	beq.n	241ca <SEGGER_RTT_WriteSkipNoLock+0x7e>
   241bc:	4622      	mov	r2, r4
   241be:	eb08 0109 	add.w	r1, r8, r9
   241c2:	f8db 0004 	ldr.w	r0, [fp, #4]
   241c6:	f01c fa29 	bl	4061c <memcpy>
      pRing->WrOff = NumBytes;
   241ca:	2318      	movs	r3, #24
   241cc:	fb03 6607 	mla	r6, r3, r7, r6
   241d0:	e7e0      	b.n	24194 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   241d2:	3b01      	subs	r3, #1
   241d4:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   241d6:	429c      	cmp	r4, r3
   241d8:	d9ce      	bls.n	24178 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   241da:	2000      	movs	r0, #0
   241dc:	e7dc      	b.n	24198 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   241de:	bf00      	nop
   241e0:	200238c4 	.word	0x200238c4

000241e4 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
   241e4:	2318      	movs	r3, #24
   241e6:	4a03      	ldr	r2, [pc, #12]	; (241f4 <SEGGER_RTT_HasDataUp+0x10>)
   241e8:	fb03 2300 	mla	r3, r3, r0, r2
   241ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   241ee:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   241f0:	1a80      	subs	r0, r0, r2
   241f2:	4770      	bx	lr
   241f4:	200238c4 	.word	0x200238c4

000241f8 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   241f8:	4804      	ldr	r0, [pc, #16]	; (2420c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   241fa:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
   241fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
   241fe:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   24200:	d003      	beq.n	2420a <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   24202:	4903      	ldr	r1, [pc, #12]	; (24210 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   24204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   24208:	600a      	str	r2, [r1, #0]

0002420a <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
   2420a:	4770      	bx	lr
    ldr r0, =_kernel
   2420c:	2002926c 	.word	0x2002926c
    ldr r1, =_SCS_ICSR
   24210:	e000ed04 	.word	0xe000ed04

00024214 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   24214:	492e      	ldr	r1, [pc, #184]	; (242d0 <in_fp_endif+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   24216:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   24218:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   2421c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   2421e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   24222:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   24226:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   2422a:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   2422e:	d004      	beq.n	2423a <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   24230:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   24234:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   24238:	e007      	b.n	2424a <out_fp_endif>

0002423a <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   2423a:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
   2423e:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   24242:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   24246:	f050 0004 	orrs.w	r0, r0, #4

0002424a <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   2424a:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2424e:	2020      	movs	r0, #32
    msr BASEPRI, r0
   24250:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   24254:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   24258:	4f1e      	ldr	r7, [pc, #120]	; (242d4 <in_fp_endif+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   2425a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   2425e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   24260:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   24262:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   24264:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
   24266:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   24268:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   2426a:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   2426e:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   24272:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   24276:	d105      	bne.n	24284 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   24278:	2300      	movs	r3, #0
    vmsr fpscr, r3
   2427a:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   2427e:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   24282:	e005      	b.n	24290 <in_fp_endif>

00024284 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   24284:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   24288:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
   2428c:	ec90 8a10 	vldmia	r0, {s16-s31}

00024290 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   24290:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   24294:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   24298:	f383 8814 	msr	CONTROL, r3
    isb
   2429c:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
   242a0:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   242a2:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   242a4:	f01a f800 	bl	3e2a8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   242a8:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   242ac:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   242b0:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
   242b4:	f04f 0000 	mov.w	r0, #0
    msr PSPLIM, r0
   242b8:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   242bc:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   242c0:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   242c4:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   242c6:	f019 ffe0 	bl	3e28a <configure_builtin_stack_guard>
    pop {r2, lr}
   242ca:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   242ce:	4770      	bx	lr
    ldr r1, =_kernel
   242d0:	2002926c 	.word	0x2002926c
    ldr v4, =_SCS_ICSR
   242d4:	e000ed04 	.word	0xe000ed04

000242d8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   242d8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   242dc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   242de:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   242e2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   242e6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   242e8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   242ec:	2902      	cmp	r1, #2
    beq _oops
   242ee:	d0ff      	beq.n	242f0 <_oops>

000242f0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   242f0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   242f2:	f019 ffce 	bl	3e292 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   242f6:	bd01      	pop	{r0, pc}

000242f8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
   242f8:	4901      	ldr	r1, [pc, #4]	; (24300 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   242fa:	2210      	movs	r2, #16
	str r2, [r1]
   242fc:	600a      	str	r2, [r1, #0]
#endif
	bx lr
   242fe:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   24300:	e000ed10 	.word	0xe000ed10

00024304 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   24304:	4040      	eors	r0, r0
	msr BASEPRI, r0
   24306:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
   2430a:	bf30      	wfi

	bx lr
   2430c:	4770      	bx	lr
   2430e:	bf00      	nop

00024310 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
   24310:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   24314:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
   24318:	4672      	mov	r2, lr

	push {r0, lr}
   2431a:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
   2431c:	f000 fbae 	bl	24a7c <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
   24320:	bd01      	pop	{r0, pc}
   24322:	bf00      	nop

00024324 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   24324:	bf30      	wfi
    b z_SysNmiOnReset
   24326:	f7ff bffd 	b.w	24324 <z_SysNmiOnReset>
   2432a:	bf00      	nop

0002432c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   2432c:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
   2432e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   24330:	4a0b      	ldr	r2, [pc, #44]	; (24360 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   24332:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   24334:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   24336:	bf1e      	ittt	ne
	movne	r1, #0
   24338:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   2433a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   2433c:	f01b ffb6 	blne	402ac <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   24340:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   24342:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   24346:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   2434a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
   2434e:	4905      	ldr	r1, [pc, #20]	; (24364 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   24350:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   24352:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   24354:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   24356:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   2435a:	4903      	ldr	r1, [pc, #12]	; (24368 <_isr_wrapper+0x3c>)
	bx r1
   2435c:	4708      	bx	r1
   2435e:	0000      	.short	0x0000
	ldr r2, =_kernel
   24360:	2002926c 	.word	0x2002926c
	ldr r1, =_sw_isr_table
   24364:	00041910 	.word	0x00041910
	ldr r1, =z_arm_int_exit
   24368:	000241f9 	.word	0x000241f9

0002436c <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   2436c:	4a09      	ldr	r2, [pc, #36]	; (24394 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   2436e:	490a      	ldr	r1, [pc, #40]	; (24398 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   24370:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   24372:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   24374:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
   24376:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   24378:	4908      	ldr	r1, [pc, #32]	; (2439c <arch_swap+0x30>)
   2437a:	684b      	ldr	r3, [r1, #4]
   2437c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   24380:	604b      	str	r3, [r1, #4]
   24382:	2300      	movs	r3, #0
   24384:	f383 8811 	msr	BASEPRI, r3
   24388:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   2438c:	6893      	ldr	r3, [r2, #8]
}
   2438e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   24390:	4770      	bx	lr
   24392:	bf00      	nop
   24394:	2002926c 	.word	0x2002926c
   24398:	000429a8 	.word	0x000429a8
   2439c:	e000ed00 	.word	0xe000ed00

000243a0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   243a0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   243a2:	2b00      	cmp	r3, #0
   243a4:	db08      	blt.n	243b8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   243a6:	2201      	movs	r2, #1
   243a8:	f000 001f 	and.w	r0, r0, #31
   243ac:	fa02 f000 	lsl.w	r0, r2, r0
   243b0:	4a02      	ldr	r2, [pc, #8]	; (243bc <arch_irq_enable+0x1c>)
   243b2:	095b      	lsrs	r3, r3, #5
   243b4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   243b8:	4770      	bx	lr
   243ba:	bf00      	nop
   243bc:	e000e100 	.word	0xe000e100

000243c0 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
   243c0:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   243c2:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   243c4:	2c07      	cmp	r4, #7
{
   243c6:	4605      	mov	r5, r0
   243c8:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   243ca:	d90e      	bls.n	243ea <z_arm_irq_priority_set+0x2a>
   243cc:	235f      	movs	r3, #95	; 0x5f
   243ce:	4a10      	ldr	r2, [pc, #64]	; (24410 <z_arm_irq_priority_set+0x50>)
   243d0:	4910      	ldr	r1, [pc, #64]	; (24414 <z_arm_irq_priority_set+0x54>)
   243d2:	4811      	ldr	r0, [pc, #68]	; (24418 <z_arm_irq_priority_set+0x58>)
   243d4:	f019 fd61 	bl	3de9a <printk>
   243d8:	4631      	mov	r1, r6
   243da:	4810      	ldr	r0, [pc, #64]	; (2441c <z_arm_irq_priority_set+0x5c>)
   243dc:	2207      	movs	r2, #7
   243de:	f019 fd5c 	bl	3de9a <printk>
   243e2:	215f      	movs	r1, #95	; 0x5f
   243e4:	480a      	ldr	r0, [pc, #40]	; (24410 <z_arm_irq_priority_set+0x50>)
   243e6:	f019 fdab 	bl	3df40 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   243ea:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   243ec:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   243ee:	bfa8      	it	ge
   243f0:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
   243f4:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   243f8:	bfb8      	it	lt
   243fa:	4b09      	ldrlt	r3, [pc, #36]	; (24420 <z_arm_irq_priority_set+0x60>)
   243fc:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   243fe:	bfab      	itete	ge
   24400:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   24404:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   24408:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2440c:	555c      	strblt	r4, [r3, r5]
}
   2440e:	bd70      	pop	{r4, r5, r6, pc}
   24410:	000443ef 	.word	0x000443ef
   24414:	00044425 	.word	0x00044425
   24418:	00043278 	.word	0x00043278
   2441c:	00044440 	.word	0x00044440
   24420:	e000ed14 	.word	0xe000ed14

00024424 <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   24424:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   24426:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   24428:	4b04      	ldr	r3, [pc, #16]	; (2443c <_arch_isr_direct_pm+0x18>)
   2442a:	6a18      	ldr	r0, [r3, #32]
   2442c:	b118      	cbz	r0, 24436 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   2442e:	2200      	movs	r2, #0
   24430:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   24432:	f01b ff3b 	bl	402ac <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   24436:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   24438:	bd08      	pop	{r3, pc}
   2443a:	bf00      	nop
   2443c:	2002926c 	.word	0x2002926c

00024440 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
   24440:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24444:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   24446:	4605      	mov	r5, r0
	char *pStackMem = Z_THREAD_STACK_BUFFER(stack);
	char *stackEnd;
	/* Offset between the top of stack and the high end of stack area. */
	u32_t top_of_stack_offset = 0U;

	Z_ASSERT_VALID_PRIO(priority, pEntry);
   24448:	2e0f      	cmp	r6, #15
{
   2444a:	4688      	mov	r8, r1
   2444c:	4691      	mov	r9, r2
   2444e:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(priority, pEntry);
   24450:	d126      	bne.n	244a0 <arch_new_thread+0x60>
   24452:	4b1e      	ldr	r3, [pc, #120]	; (244cc <arch_new_thread+0x8c>)
   24454:	429f      	cmp	r7, r3
   24456:	d127      	bne.n	244a8 <arch_new_thread+0x68>
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
   24458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2445a:	464a      	mov	r2, r9
   2445c:	9300      	str	r3, [sp, #0]
   2445e:	4641      	mov	r1, r8
   24460:	4633      	mov	r3, r6
   24462:	4628      	mov	r0, r5
   24464:	f01b ffd3 	bl	4040e <z_new_thread_init>
	stackEnd = pStackMem + stackSize;
   24468:	eb08 0409 	add.w	r4, r8, r9
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
   2446c:	4a18      	ldr	r2, [pc, #96]	; (244d0 <arch_new_thread+0x90>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   2446e:	f1a4 0320 	sub.w	r3, r4, #32
   24472:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
   24476:	f022 0201 	bic.w	r2, r2, #1
   2447a:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
   2447c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	pInitCtx->basic.a1 = (u32_t)pEntry;
   2447e:	601f      	str	r7, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   24480:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   24482:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   24484:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   24486:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   24488:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
   2448a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   2448e:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
   24490:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
   24492:	2300      	movs	r3, #0
   24494:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
   24496:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   2449a:	b003      	add	sp, #12
   2449c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(priority, pEntry);
   244a0:	f106 0310 	add.w	r3, r6, #16
   244a4:	2b1e      	cmp	r3, #30
   244a6:	d9d7      	bls.n	24458 <arch_new_thread+0x18>
   244a8:	232d      	movs	r3, #45	; 0x2d
   244aa:	4a0a      	ldr	r2, [pc, #40]	; (244d4 <arch_new_thread+0x94>)
   244ac:	490a      	ldr	r1, [pc, #40]	; (244d8 <arch_new_thread+0x98>)
   244ae:	480b      	ldr	r0, [pc, #44]	; (244dc <arch_new_thread+0x9c>)
   244b0:	f019 fcf3 	bl	3de9a <printk>
   244b4:	4631      	mov	r1, r6
   244b6:	f06f 030f 	mvn.w	r3, #15
   244ba:	220e      	movs	r2, #14
   244bc:	4808      	ldr	r0, [pc, #32]	; (244e0 <arch_new_thread+0xa0>)
   244be:	f019 fcec 	bl	3de9a <printk>
   244c2:	212d      	movs	r1, #45	; 0x2d
   244c4:	4803      	ldr	r0, [pc, #12]	; (244d4 <arch_new_thread+0x94>)
   244c6:	f019 fd3b 	bl	3df40 <assert_post_action>
   244ca:	e7c5      	b.n	24458 <arch_new_thread+0x18>
   244cc:	000380f9 	.word	0x000380f9
   244d0:	0003def7 	.word	0x0003def7
   244d4:	00044475 	.word	0x00044475
   244d8:	000444a7 	.word	0x000444a7
   244dc:	00043278 	.word	0x00043278
   244e0:	00044534 	.word	0x00044534

000244e4 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
   244e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   244e6:	461f      	mov	r7, r3
   244e8:	4606      	mov	r6, r0
   244ea:	460d      	mov	r5, r1
   244ec:	4614      	mov	r4, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   244ee:	2300      	movs	r3, #0
   244f0:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   244f4:	f3ef 8214 	mrs	r2, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   244f8:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   244fc:	f382 8814 	msr	CONTROL, r2
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   24500:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   24504:	f000 fc2a 	bl	24d5c <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
   24508:	4b0b      	ldr	r3, [pc, #44]	; (24538 <arch_switch_to_main_thread+0x54>)
	start_of_main_stack =
   2450a:	442c      	add	r4, r5
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   2450c:	4630      	mov	r0, r6
	_current = main_thread;
   2450e:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
   24510:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
   24514:	f019 fec8 	bl	3e2a8 <z_arm_configure_dynamic_mpu_regions>
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   24518:	f385 880b 	msr	PSPLIM, r5

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   2451c:	4638      	mov	r0, r7
   2451e:	f384 8809 	msr	PSP, r4
   24522:	2100      	movs	r1, #0
   24524:	b663      	cpsie	if
   24526:	f381 8811 	msr	BASEPRI, r1
   2452a:	f3bf 8f6f 	isb	sy
   2452e:	2200      	movs	r2, #0
   24530:	2300      	movs	r3, #0
   24532:	f019 fce0 	bl	3def6 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   24536:	bf00      	nop
   24538:	2002926c 	.word	0x2002926c

0002453c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2453c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24540:	4681      	mov	r9, r0
   24542:	b086      	sub	sp, #24

	if (esf != NULL) {
   24544:	460c      	mov	r4, r1
   24546:	2900      	cmp	r1, #0
   24548:	d075      	beq.n	24636 <z_arm_fatal_error+0xfa>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   2454a:	2301      	movs	r3, #1
   2454c:	f04f 0000 	mov.w	r0, #0
   24550:	4d3c      	ldr	r5, [pc, #240]	; (24644 <z_arm_fatal_error+0x108>)
   24552:	f363 0007 	bfi	r0, r3, #0, #8
   24556:	4b3c      	ldr	r3, [pc, #240]	; (24648 <z_arm_fatal_error+0x10c>)
   24558:	4627      	mov	r7, r4
   2455a:	1aed      	subs	r5, r5, r3
   2455c:	688b      	ldr	r3, [r1, #8]
   2455e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   24562:	9300      	str	r3, [sp, #0]
   24564:	e9d1 2300 	ldrd	r2, r3, [r1]
   24568:	f365 108f 	bfi	r0, r5, #6, #10
   2456c:	4937      	ldr	r1, [pc, #220]	; (2464c <z_arm_fatal_error+0x110>)
   2456e:	f019 fcf8 	bl	3df62 <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   24572:	2301      	movs	r3, #1
   24574:	f04f 0000 	mov.w	r0, #0
   24578:	f363 0007 	bfi	r0, r3, #0, #8
   2457c:	6963      	ldr	r3, [r4, #20]
   2457e:	f365 108f 	bfi	r0, r5, #6, #10
   24582:	9300      	str	r3, [sp, #0]
   24584:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   24588:	4931      	ldr	r1, [pc, #196]	; (24650 <z_arm_fatal_error+0x114>)
   2458a:	f019 fcea 	bl	3df62 <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   2458e:	2301      	movs	r3, #1
   24590:	f04f 0000 	mov.w	r0, #0
   24594:	f363 0007 	bfi	r0, r3, #0, #8
   24598:	f365 108f 	bfi	r0, r5, #6, #10
   2459c:	69e2      	ldr	r2, [r4, #28]
   2459e:	492d      	ldr	r1, [pc, #180]	; (24654 <z_arm_fatal_error+0x118>)
   245a0:	f019 fcdf 	bl	3df62 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   245a4:	2600      	movs	r6, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   245a6:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 24660 <z_arm_fatal_error+0x124>
   245aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   245ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   245b2:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   245b6:	f043 0301 	orr.w	r3, r3, #1
   245ba:	f363 0807 	bfi	r8, r3, #0, #8
   245be:	1cf3      	adds	r3, r6, #3
   245c0:	ed97 7a08 	vldr	s14, [r7, #32]
   245c4:	9304      	str	r3, [sp, #16]
   245c6:	edcd 7a05 	vstr	s15, [sp, #20]
   245ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   245ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   245d2:	1cb3      	adds	r3, r6, #2
   245d4:	9302      	str	r3, [sp, #8]
   245d6:	edcd 7a03 	vstr	s15, [sp, #12]
   245da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   245de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   245e2:	edcd 7a01 	vstr	s15, [sp, #4]
   245e6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   245ea:	1c73      	adds	r3, r6, #1
   245ec:	f365 188f 	bfi	r8, r5, #6, #10
   245f0:	9300      	str	r3, [sp, #0]
   245f2:	4632      	mov	r2, r6
   245f4:	ee17 3a90 	vmov	r3, s15
   245f8:	4651      	mov	r1, sl
   245fa:	4640      	mov	r0, r8
	for (int i = 0; i < 16; i += 4) {
   245fc:	3604      	adds	r6, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   245fe:	f019 fcb0 	bl	3df62 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   24602:	2e10      	cmp	r6, #16
   24604:	f107 0710 	add.w	r7, r7, #16
   24608:	d1cf      	bne.n	245aa <z_arm_fatal_error+0x6e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   2460a:	2301      	movs	r3, #1
   2460c:	f04f 0000 	mov.w	r0, #0
   24610:	f363 0007 	bfi	r0, r3, #0, #8
   24614:	f365 108f 	bfi	r0, r5, #6, #10
   24618:	6e22      	ldr	r2, [r4, #96]	; 0x60
   2461a:	490f      	ldr	r1, [pc, #60]	; (24658 <z_arm_fatal_error+0x11c>)
   2461c:	f019 fca1 	bl	3df62 <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   24620:	f04f 0000 	mov.w	r0, #0
   24624:	2301      	movs	r3, #1
   24626:	f363 0007 	bfi	r0, r3, #0, #8
   2462a:	f365 108f 	bfi	r0, r5, #6, #10
   2462e:	69a2      	ldr	r2, [r4, #24]
   24630:	490a      	ldr	r1, [pc, #40]	; (2465c <z_arm_fatal_error+0x120>)
   24632:	f019 fc96 	bl	3df62 <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   24636:	4621      	mov	r1, r4
   24638:	4648      	mov	r0, r9
}
   2463a:	b006      	add	sp, #24
   2463c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_fatal_error(reason, esf);
   24640:	f013 bcde 	b.w	38000 <z_fatal_error>
   24644:	00041d2c 	.word	0x00041d2c
   24648:	00041c2c 	.word	0x00041c2c
   2464c:	00044565 	.word	0x00044565
   24650:	00044594 	.word	0x00044594
   24654:	000445c3 	.word	0x000445c3
   24658:	00044615 	.word	0x00044615
   2465c:	00044624 	.word	0x00044624
   24660:	000445d2 	.word	0x000445d2

00024664 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   24664:	4a11      	ldr	r2, [pc, #68]	; (246ac <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   24666:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   24668:	4b11      	ldr	r3, [pc, #68]	; (246b0 <z_arm_prep_c+0x4c>)
   2466a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   2466e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   24670:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   24674:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   24678:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   2467c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   24680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   24684:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   24688:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   2468c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   24690:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   24694:	2300      	movs	r3, #0
   24696:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
   2469a:	f013 fd47 	bl	3812c <z_bss_zero>
	z_data_copy();
   2469e:	f013 fd4f 	bl	38140 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
   246a2:	f000 fb11 	bl	24cc8 <z_arm_int_lib_init>
	z_cstart();
   246a6:	f013 fd89 	bl	381bc <z_cstart>
   246aa:	bf00      	nop
   246ac:	0001c200 	.word	0x0001c200
   246b0:	e000ed00 	.word	0xe000ed00

000246b4 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   246b4:	f019 fc4c 	bl	3df50 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   246b8:	2020      	movs	r0, #32
    msr BASEPRI, r0
   246ba:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
   246be:	4808      	ldr	r0, [pc, #32]	; (246e0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   246c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   246c4:	1840      	adds	r0, r0, r1
    msr PSP, r0
   246c6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   246ca:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   246ce:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   246d0:	4308      	orrs	r0, r1
    msr CONTROL, r0
   246d2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   246d6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   246da:	f7ff ffc3 	bl	24664 <z_arm_prep_c>
   246de:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   246e0:	2002f5e0 	.word	0x2002f5e0

000246e4 <mem_manage_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   246e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   246e6:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   246e8:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   246ea:	f04f 0000 	mov.w	r0, #0
   246ee:	4c40      	ldr	r4, [pc, #256]	; (247f0 <mem_manage_fault.isra.2+0x10c>)
   246f0:	f363 0007 	bfi	r0, r3, #0, #8
   246f4:	4b3f      	ldr	r3, [pc, #252]	; (247f4 <mem_manage_fault.isra.2+0x110>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   246f6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   246f8:	1ae4      	subs	r4, r4, r3
   246fa:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   246fe:	493e      	ldr	r1, [pc, #248]	; (247f8 <mem_manage_fault.isra.2+0x114>)
   24700:	f364 108f 	bfi	r0, r4, #6, #10
   24704:	f019 fc2d 	bl	3df62 <log_string_sync>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   24708:	4b3c      	ldr	r3, [pc, #240]	; (247fc <mem_manage_fault.isra.2+0x118>)
   2470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2470c:	06d9      	lsls	r1, r3, #27
   2470e:	d509      	bpl.n	24724 <mem_manage_fault.isra.2+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
   24710:	f04f 0000 	mov.w	r0, #0
   24714:	2301      	movs	r3, #1
   24716:	f363 0007 	bfi	r0, r3, #0, #8
   2471a:	f364 108f 	bfi	r0, r4, #6, #10
   2471e:	4938      	ldr	r1, [pc, #224]	; (24800 <mem_manage_fault.isra.2+0x11c>)
   24720:	f019 fc1f 	bl	3df62 <log_string_sync>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   24724:	4b35      	ldr	r3, [pc, #212]	; (247fc <mem_manage_fault.isra.2+0x118>)
   24726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24728:	071a      	lsls	r2, r3, #28
   2472a:	d509      	bpl.n	24740 <mem_manage_fault.isra.2+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   2472c:	f04f 0000 	mov.w	r0, #0
   24730:	2301      	movs	r3, #1
   24732:	f363 0007 	bfi	r0, r3, #0, #8
   24736:	f364 108f 	bfi	r0, r4, #6, #10
   2473a:	4932      	ldr	r1, [pc, #200]	; (24804 <mem_manage_fault.isra.2+0x120>)
   2473c:	f019 fc11 	bl	3df62 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   24740:	4d2e      	ldr	r5, [pc, #184]	; (247fc <mem_manage_fault.isra.2+0x118>)
   24742:	6aab      	ldr	r3, [r5, #40]	; 0x28
   24744:	079b      	lsls	r3, r3, #30
   24746:	d51c      	bpl.n	24782 <mem_manage_fault.isra.2+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
   24748:	2301      	movs	r3, #1
   2474a:	f04f 0000 	mov.w	r0, #0
   2474e:	f363 0007 	bfi	r0, r3, #0, #8
   24752:	f364 108f 	bfi	r0, r4, #6, #10
   24756:	492c      	ldr	r1, [pc, #176]	; (24808 <mem_manage_fault.isra.2+0x124>)
   24758:	f019 fc03 	bl	3df62 <log_string_sync>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
   2475c:	6b6a      	ldr	r2, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   2475e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   24760:	0618      	lsls	r0, r3, #24
   24762:	d50e      	bpl.n	24782 <mem_manage_fault.isra.2+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   24764:	f04f 0000 	mov.w	r0, #0
   24768:	2301      	movs	r3, #1
   2476a:	f363 0007 	bfi	r0, r3, #0, #8
   2476e:	f364 108f 	bfi	r0, r4, #6, #10
   24772:	4926      	ldr	r1, [pc, #152]	; (2480c <mem_manage_fault.isra.2+0x128>)
   24774:	f019 fbf5 	bl	3df62 <log_string_sync>
			if (from_hard_fault) {
   24778:	b11f      	cbz	r7, 24782 <mem_manage_fault.isra.2+0x9e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   2477a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2477c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   24780:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   24782:	4b1e      	ldr	r3, [pc, #120]	; (247fc <mem_manage_fault.isra.2+0x118>)
   24784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24786:	07d9      	lsls	r1, r3, #31
   24788:	d509      	bpl.n	2479e <mem_manage_fault.isra.2+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
   2478a:	f04f 0000 	mov.w	r0, #0
   2478e:	2301      	movs	r3, #1
   24790:	f363 0007 	bfi	r0, r3, #0, #8
   24794:	f364 108f 	bfi	r0, r4, #6, #10
   24798:	491d      	ldr	r1, [pc, #116]	; (24810 <mem_manage_fault.isra.2+0x12c>)
   2479a:	f019 fbe2 	bl	3df62 <log_string_sync>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2479e:	4b17      	ldr	r3, [pc, #92]	; (247fc <mem_manage_fault.isra.2+0x118>)
   247a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   247a2:	069a      	lsls	r2, r3, #26
   247a4:	d509      	bpl.n	247ba <mem_manage_fault.isra.2+0xd6>
		PR_FAULT_INFO(
   247a6:	f04f 0000 	mov.w	r0, #0
   247aa:	2301      	movs	r3, #1
   247ac:	f363 0007 	bfi	r0, r3, #0, #8
   247b0:	f364 108f 	bfi	r0, r4, #6, #10
   247b4:	4917      	ldr	r1, [pc, #92]	; (24814 <mem_manage_fault.isra.2+0x130>)
   247b6:	f019 fbd4 	bl	3df62 <log_string_sync>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   247ba:	4b10      	ldr	r3, [pc, #64]	; (247fc <mem_manage_fault.isra.2+0x118>)
   247bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   247be:	06db      	lsls	r3, r3, #27
   247c0:	d50e      	bpl.n	247e0 <mem_manage_fault.isra.2+0xfc>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(0,
   247c2:	4915      	ldr	r1, [pc, #84]	; (24818 <mem_manage_fault.isra.2+0x134>)
   247c4:	f44f 739b 	mov.w	r3, #310	; 0x136
   247c8:	4a14      	ldr	r2, [pc, #80]	; (2481c <mem_manage_fault.isra.2+0x138>)
   247ca:	4815      	ldr	r0, [pc, #84]	; (24820 <mem_manage_fault.isra.2+0x13c>)
   247cc:	f019 fb65 	bl	3de9a <printk>
   247d0:	4814      	ldr	r0, [pc, #80]	; (24824 <mem_manage_fault.isra.2+0x140>)
   247d2:	f019 fb62 	bl	3de9a <printk>
   247d6:	f44f 719b 	mov.w	r1, #310	; 0x136
   247da:	4810      	ldr	r0, [pc, #64]	; (2481c <mem_manage_fault.isra.2+0x138>)
   247dc:	f019 fbb0 	bl	3df40 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   247e0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   247e2:	4a06      	ldr	r2, [pc, #24]	; (247fc <mem_manage_fault.isra.2+0x118>)
   247e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   247e6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   247ea:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   247ec:	7030      	strb	r0, [r6, #0]

	return reason;
}
   247ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   247f0:	00041d2c 	.word	0x00041d2c
   247f4:	00041c2c 	.word	0x00041c2c
   247f8:	000446da 	.word	0x000446da
   247fc:	e000ed00 	.word	0xe000ed00
   24800:	000446f0 	.word	0x000446f0
   24804:	00044723 	.word	0x00044723
   24808:	00044736 	.word	0x00044736
   2480c:	0004474e 	.word	0x0004474e
   24810:	00044764 	.word	0x00044764
   24814:	00044783 	.word	0x00044783
   24818:	00048cfb 	.word	0x00048cfb
   2481c:	000447b2 	.word	0x000447b2
   24820:	00043278 	.word	0x00043278
   24824:	000447ec 	.word	0x000447ec

00024828 <bus_fault.isra.3>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   24828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   2482a:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   2482c:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   2482e:	f04f 0000 	mov.w	r0, #0
   24832:	4c3d      	ldr	r4, [pc, #244]	; (24928 <bus_fault.isra.3+0x100>)
   24834:	f363 0007 	bfi	r0, r3, #0, #8
   24838:	4b3c      	ldr	r3, [pc, #240]	; (2492c <bus_fault.isra.3+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   2483a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   2483c:	1ae4      	subs	r4, r4, r3
   2483e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   24842:	493b      	ldr	r1, [pc, #236]	; (24930 <bus_fault.isra.3+0x108>)
   24844:	f364 108f 	bfi	r0, r4, #6, #10
   24848:	f019 fb8b 	bl	3df62 <log_string_sync>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   2484c:	4b39      	ldr	r3, [pc, #228]	; (24934 <bus_fault.isra.3+0x10c>)
   2484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24850:	04d9      	lsls	r1, r3, #19
   24852:	d509      	bpl.n	24868 <bus_fault.isra.3+0x40>
		PR_FAULT_INFO("  Stacking error");
   24854:	f04f 0000 	mov.w	r0, #0
   24858:	2301      	movs	r3, #1
   2485a:	f363 0007 	bfi	r0, r3, #0, #8
   2485e:	f364 108f 	bfi	r0, r4, #6, #10
   24862:	4935      	ldr	r1, [pc, #212]	; (24938 <bus_fault.isra.3+0x110>)
   24864:	f019 fb7d 	bl	3df62 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   24868:	4b32      	ldr	r3, [pc, #200]	; (24934 <bus_fault.isra.3+0x10c>)
   2486a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2486c:	051a      	lsls	r2, r3, #20
   2486e:	d509      	bpl.n	24884 <bus_fault.isra.3+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   24870:	f04f 0000 	mov.w	r0, #0
   24874:	2301      	movs	r3, #1
   24876:	f363 0007 	bfi	r0, r3, #0, #8
   2487a:	f364 108f 	bfi	r0, r4, #6, #10
   2487e:	492f      	ldr	r1, [pc, #188]	; (2493c <bus_fault.isra.3+0x114>)
   24880:	f019 fb6f 	bl	3df62 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   24884:	4d2b      	ldr	r5, [pc, #172]	; (24934 <bus_fault.isra.3+0x10c>)
   24886:	6aab      	ldr	r3, [r5, #40]	; 0x28
   24888:	059b      	lsls	r3, r3, #22
   2488a:	d51c      	bpl.n	248c6 <bus_fault.isra.3+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
   2488c:	2301      	movs	r3, #1
   2488e:	f04f 0000 	mov.w	r0, #0
   24892:	f363 0007 	bfi	r0, r3, #0, #8
   24896:	f364 108f 	bfi	r0, r4, #6, #10
   2489a:	4929      	ldr	r1, [pc, #164]	; (24940 <bus_fault.isra.3+0x118>)
   2489c:	f019 fb61 	bl	3df62 <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   248a0:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   248a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   248a4:	0418      	lsls	r0, r3, #16
   248a6:	d50e      	bpl.n	248c6 <bus_fault.isra.3+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   248a8:	f04f 0000 	mov.w	r0, #0
   248ac:	2301      	movs	r3, #1
   248ae:	f363 0007 	bfi	r0, r3, #0, #8
   248b2:	f364 108f 	bfi	r0, r4, #6, #10
   248b6:	4923      	ldr	r1, [pc, #140]	; (24944 <bus_fault.isra.3+0x11c>)
   248b8:	f019 fb53 	bl	3df62 <log_string_sync>
			if (from_hard_fault) {
   248bc:	b11f      	cbz	r7, 248c6 <bus_fault.isra.3+0x9e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   248be:	6aab      	ldr	r3, [r5, #40]	; 0x28
   248c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   248c4:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   248c6:	4b1b      	ldr	r3, [pc, #108]	; (24934 <bus_fault.isra.3+0x10c>)
   248c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   248ca:	0559      	lsls	r1, r3, #21
   248cc:	d509      	bpl.n	248e2 <bus_fault.isra.3+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
   248ce:	f04f 0000 	mov.w	r0, #0
   248d2:	2301      	movs	r3, #1
   248d4:	f363 0007 	bfi	r0, r3, #0, #8
   248d8:	f364 108f 	bfi	r0, r4, #6, #10
   248dc:	491a      	ldr	r1, [pc, #104]	; (24948 <bus_fault.isra.3+0x120>)
   248de:	f019 fb40 	bl	3df62 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   248e2:	4b14      	ldr	r3, [pc, #80]	; (24934 <bus_fault.isra.3+0x10c>)
   248e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   248e6:	05d2      	lsls	r2, r2, #23
   248e8:	d511      	bpl.n	2490e <bus_fault.isra.3+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
   248ea:	f04f 0000 	mov.w	r0, #0
   248ee:	2301      	movs	r3, #1
   248f0:	4916      	ldr	r1, [pc, #88]	; (2494c <bus_fault.isra.3+0x124>)
   248f2:	f363 0007 	bfi	r0, r3, #0, #8
   248f6:	f364 108f 	bfi	r0, r4, #6, #10
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   248fa:	f019 fb32 	bl	3df62 <log_string_sync>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   248fe:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   24900:	4a0c      	ldr	r2, [pc, #48]	; (24934 <bus_fault.isra.3+0x10c>)
   24902:	6a93      	ldr	r3, [r2, #40]	; 0x28
   24904:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   24908:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   2490a:	7030      	strb	r0, [r6, #0]

	return reason;
}
   2490c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   2490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24910:	049b      	lsls	r3, r3, #18
   24912:	d5f4      	bpl.n	248fe <bus_fault.isra.3+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   24914:	f04f 0000 	mov.w	r0, #0
   24918:	2301      	movs	r3, #1
   2491a:	f363 0007 	bfi	r0, r3, #0, #8
   2491e:	f364 108f 	bfi	r0, r4, #6, #10
   24922:	490b      	ldr	r1, [pc, #44]	; (24950 <bus_fault.isra.3+0x128>)
   24924:	e7e9      	b.n	248fa <bus_fault.isra.3+0xd2>
   24926:	bf00      	nop
   24928:	00041d2c 	.word	0x00041d2c
   2492c:	00041c2c 	.word	0x00041c2c
   24930:	00044652 	.word	0x00044652
   24934:	e000ed00 	.word	0xe000ed00
   24938:	00044668 	.word	0x00044668
   2493c:	00044723 	.word	0x00044723
   24940:	00044679 	.word	0x00044679
   24944:	00044692 	.word	0x00044692
   24948:	000446a7 	.word	0x000446a7
   2494c:	000446c2 	.word	0x000446c2
   24950:	00044783 	.word	0x00044783

00024954 <usage_fault.isra.4>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
   24954:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   24956:	f04f 0000 	mov.w	r0, #0
   2495a:	2301      	movs	r3, #1
   2495c:	4c3c      	ldr	r4, [pc, #240]	; (24a50 <usage_fault.isra.4+0xfc>)
   2495e:	f363 0007 	bfi	r0, r3, #0, #8
   24962:	4b3c      	ldr	r3, [pc, #240]	; (24a54 <usage_fault.isra.4+0x100>)
   24964:	493c      	ldr	r1, [pc, #240]	; (24a58 <usage_fault.isra.4+0x104>)
   24966:	1ae4      	subs	r4, r4, r3
   24968:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2496c:	f364 108f 	bfi	r0, r4, #6, #10
   24970:	f019 faf7 	bl	3df62 <log_string_sync>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   24974:	4b39      	ldr	r3, [pc, #228]	; (24a5c <usage_fault.isra.4+0x108>)
   24976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24978:	019b      	lsls	r3, r3, #6
   2497a:	d509      	bpl.n	24990 <usage_fault.isra.4+0x3c>
		PR_FAULT_INFO("  Division by zero");
   2497c:	f04f 0000 	mov.w	r0, #0
   24980:	2301      	movs	r3, #1
   24982:	f363 0007 	bfi	r0, r3, #0, #8
   24986:	f364 108f 	bfi	r0, r4, #6, #10
   2498a:	4935      	ldr	r1, [pc, #212]	; (24a60 <usage_fault.isra.4+0x10c>)
   2498c:	f019 fae9 	bl	3df62 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   24990:	4b32      	ldr	r3, [pc, #200]	; (24a5c <usage_fault.isra.4+0x108>)
   24992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24994:	01dd      	lsls	r5, r3, #7
   24996:	d509      	bpl.n	249ac <usage_fault.isra.4+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
   24998:	f04f 0000 	mov.w	r0, #0
   2499c:	2301      	movs	r3, #1
   2499e:	f363 0007 	bfi	r0, r3, #0, #8
   249a2:	f364 108f 	bfi	r0, r4, #6, #10
   249a6:	492f      	ldr	r1, [pc, #188]	; (24a64 <usage_fault.isra.4+0x110>)
   249a8:	f019 fadb 	bl	3df62 <log_string_sync>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   249ac:	4b2b      	ldr	r3, [pc, #172]	; (24a5c <usage_fault.isra.4+0x108>)
   249ae:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   249b0:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   249b4:	d00a      	beq.n	249cc <usage_fault.isra.4+0x78>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   249b6:	2301      	movs	r3, #1
   249b8:	f04f 0000 	mov.w	r0, #0
   249bc:	f363 0007 	bfi	r0, r3, #0, #8
   249c0:	f364 108f 	bfi	r0, r4, #6, #10
   249c4:	4928      	ldr	r1, [pc, #160]	; (24a68 <usage_fault.isra.4+0x114>)
   249c6:	f019 facc 	bl	3df62 <log_string_sync>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   249ca:	2502      	movs	r5, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   249cc:	4b23      	ldr	r3, [pc, #140]	; (24a5c <usage_fault.isra.4+0x108>)
   249ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   249d0:	0318      	lsls	r0, r3, #12
   249d2:	d509      	bpl.n	249e8 <usage_fault.isra.4+0x94>
		PR_FAULT_INFO("  No coprocessor instructions");
   249d4:	f04f 0000 	mov.w	r0, #0
   249d8:	2301      	movs	r3, #1
   249da:	f363 0007 	bfi	r0, r3, #0, #8
   249de:	f364 108f 	bfi	r0, r4, #6, #10
   249e2:	4922      	ldr	r1, [pc, #136]	; (24a6c <usage_fault.isra.4+0x118>)
   249e4:	f019 fabd 	bl	3df62 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   249e8:	4b1c      	ldr	r3, [pc, #112]	; (24a5c <usage_fault.isra.4+0x108>)
   249ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   249ec:	0359      	lsls	r1, r3, #13
   249ee:	d509      	bpl.n	24a04 <usage_fault.isra.4+0xb0>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   249f0:	f04f 0000 	mov.w	r0, #0
   249f4:	2301      	movs	r3, #1
   249f6:	f363 0007 	bfi	r0, r3, #0, #8
   249fa:	f364 108f 	bfi	r0, r4, #6, #10
   249fe:	491c      	ldr	r1, [pc, #112]	; (24a70 <usage_fault.isra.4+0x11c>)
   24a00:	f019 faaf 	bl	3df62 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   24a04:	4b15      	ldr	r3, [pc, #84]	; (24a5c <usage_fault.isra.4+0x108>)
   24a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24a08:	039a      	lsls	r2, r3, #14
   24a0a:	d509      	bpl.n	24a20 <usage_fault.isra.4+0xcc>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   24a0c:	f04f 0000 	mov.w	r0, #0
   24a10:	2301      	movs	r3, #1
   24a12:	f363 0007 	bfi	r0, r3, #0, #8
   24a16:	f364 108f 	bfi	r0, r4, #6, #10
   24a1a:	4916      	ldr	r1, [pc, #88]	; (24a74 <usage_fault.isra.4+0x120>)
   24a1c:	f019 faa1 	bl	3df62 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   24a20:	4b0e      	ldr	r3, [pc, #56]	; (24a5c <usage_fault.isra.4+0x108>)
   24a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24a24:	03db      	lsls	r3, r3, #15
   24a26:	d509      	bpl.n	24a3c <usage_fault.isra.4+0xe8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   24a28:	f04f 0000 	mov.w	r0, #0
   24a2c:	2301      	movs	r3, #1
   24a2e:	f363 0007 	bfi	r0, r3, #0, #8
   24a32:	f364 108f 	bfi	r0, r4, #6, #10
   24a36:	4910      	ldr	r1, [pc, #64]	; (24a78 <usage_fault.isra.4+0x124>)
   24a38:	f019 fa93 	bl	3df62 <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   24a3c:	4a07      	ldr	r2, [pc, #28]	; (24a5c <usage_fault.isra.4+0x108>)

	return reason;
}
   24a3e:	4628      	mov	r0, r5
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   24a40:	6a93      	ldr	r3, [r2, #40]	; 0x28
   24a42:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   24a46:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   24a4a:	6293      	str	r3, [r2, #40]	; 0x28
}
   24a4c:	bd38      	pop	{r3, r4, r5, pc}
   24a4e:	bf00      	nop
   24a50:	00041d2c 	.word	0x00041d2c
   24a54:	00041c2c 	.word	0x00041c2c
   24a58:	00044826 	.word	0x00044826
   24a5c:	e000ed00 	.word	0xe000ed00
   24a60:	0004483e 	.word	0x0004483e
   24a64:	00044851 	.word	0x00044851
   24a68:	0004486b 	.word	0x0004486b
   24a6c:	00044895 	.word	0x00044895
   24a70:	000448b3 	.word	0x000448b3
   24a74:	000448d8 	.word	0x000448d8
   24a78:	000448f2 	.word	0x000448f2

00024a7c <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
   24a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   24a80:	4b70      	ldr	r3, [pc, #448]	; (24c44 <z_arm_fault+0x1c8>)
{
   24a82:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   24a84:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   24a88:	4606      	mov	r6, r0
   24a8a:	4689      	mov	r9, r1
   24a8c:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   24a8e:	f3c8 0708 	ubfx	r7, r8, #0, #9
   24a92:	2500      	movs	r5, #0
   24a94:	f385 8811 	msr	BASEPRI, r5
   24a98:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   24a9c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   24aa0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   24aa4:	d11b      	bne.n	24ade <z_arm_fault+0x62>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   24aa6:	07d0      	lsls	r0, r2, #31
   24aa8:	d419      	bmi.n	24ade <z_arm_fault+0x62>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   24aaa:	0651      	lsls	r1, r2, #25
   24aac:	d403      	bmi.n	24ab6 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   24aae:	0722      	lsls	r2, r4, #28
   24ab0:	d412      	bmi.n	24ad8 <z_arm_fault+0x5c>
			*nested_exc = true;
   24ab2:	2501      	movs	r5, #1
   24ab4:	e012      	b.n	24adc <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
   24ab6:	2301      	movs	r3, #1
   24ab8:	f04f 0000 	mov.w	r0, #0
   24abc:	4a62      	ldr	r2, [pc, #392]	; (24c48 <z_arm_fault+0x1cc>)
   24abe:	f363 0007 	bfi	r0, r3, #0, #8
   24ac2:	4b62      	ldr	r3, [pc, #392]	; (24c4c <z_arm_fault+0x1d0>)
   24ac4:	4962      	ldr	r1, [pc, #392]	; (24c50 <z_arm_fault+0x1d4>)
   24ac6:	1a9b      	subs	r3, r3, r2
   24ac8:	08db      	lsrs	r3, r3, #3
   24aca:	f363 108f 	bfi	r0, r3, #6, #10
   24ace:	f019 fa48 	bl	3df62 <log_string_sync>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   24ad2:	f014 0504 	ands.w	r5, r4, #4
   24ad6:	d001      	beq.n	24adc <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
   24ad8:	464e      	mov	r6, r9
	*nested_exc = false;
   24ada:	2500      	movs	r5, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   24adc:	b97e      	cbnz	r6, 24afe <z_arm_fault+0x82>
   24ade:	f240 33b1 	movw	r3, #945	; 0x3b1
   24ae2:	4a5c      	ldr	r2, [pc, #368]	; (24c54 <z_arm_fault+0x1d8>)
   24ae4:	495c      	ldr	r1, [pc, #368]	; (24c58 <z_arm_fault+0x1dc>)
   24ae6:	485d      	ldr	r0, [pc, #372]	; (24c5c <z_arm_fault+0x1e0>)
   24ae8:	f019 f9d7 	bl	3de9a <printk>
   24aec:	485c      	ldr	r0, [pc, #368]	; (24c60 <z_arm_fault+0x1e4>)
   24aee:	f019 f9d4 	bl	3de9a <printk>
   24af2:	f240 31b1 	movw	r1, #945	; 0x3b1
   24af6:	4857      	ldr	r0, [pc, #348]	; (24c54 <z_arm_fault+0x1d8>)
   24af8:	f019 fa22 	bl	3df40 <assert_post_action>
   24afc:	2600      	movs	r6, #0
	*recoverable = false;
   24afe:	2300      	movs	r3, #0
   24b00:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   24b04:	1efb      	subs	r3, r7, #3
   24b06:	2b09      	cmp	r3, #9
   24b08:	d87f      	bhi.n	24c0a <z_arm_fault+0x18e>
   24b0a:	e8df f003 	tbb	[pc, r3]
   24b0e:	6905      	.short	0x6905
   24b10:	7e7e4c6d 	.word	0x7e7e4c6d
   24b14:	717e7e7e 	.word	0x717e7e7e
	PR_FAULT_INFO("***** HARD FAULT *****");
   24b18:	2301      	movs	r3, #1
   24b1a:	f04f 0000 	mov.w	r0, #0
	*recoverable = false;
   24b1e:	f04f 0800 	mov.w	r8, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
   24b22:	f363 0007 	bfi	r0, r3, #0, #8
   24b26:	4f49      	ldr	r7, [pc, #292]	; (24c4c <z_arm_fault+0x1d0>)
   24b28:	4b47      	ldr	r3, [pc, #284]	; (24c48 <z_arm_fault+0x1cc>)
   24b2a:	494e      	ldr	r1, [pc, #312]	; (24c64 <z_arm_fault+0x1e8>)
   24b2c:	1aff      	subs	r7, r7, r3
   24b2e:	f3c7 07c9 	ubfx	r7, r7, #3, #10
   24b32:	f367 108f 	bfi	r0, r7, #6, #10
   24b36:	f019 fa14 	bl	3df62 <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   24b3a:	4b42      	ldr	r3, [pc, #264]	; (24c44 <z_arm_fault+0x1c8>)
	*recoverable = false;
   24b3c:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   24b40:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   24b42:	f014 0402 	ands.w	r4, r4, #2
   24b46:	d00b      	beq.n	24b60 <z_arm_fault+0xe4>
		PR_EXC("  Bus fault on vector table read");
   24b48:	f04f 0000 	mov.w	r0, #0
   24b4c:	2301      	movs	r3, #1
   24b4e:	4946      	ldr	r1, [pc, #280]	; (24c68 <z_arm_fault+0x1ec>)
   24b50:	f363 0007 	bfi	r0, r3, #0, #8
   24b54:	f367 108f 	bfi	r0, r7, #6, #10
	PR_FAULT_INFO(
   24b58:	f019 fa03 	bl	3df62 <log_string_sync>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   24b5c:	2400      	movs	r4, #0
   24b5e:	e025      	b.n	24bac <z_arm_fault+0x130>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   24b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   24b62:	005b      	lsls	r3, r3, #1
   24b64:	d522      	bpl.n	24bac <z_arm_fault+0x130>
		PR_EXC("  Fault escalation (see below)");
   24b66:	2301      	movs	r3, #1
   24b68:	f04f 0000 	mov.w	r0, #0
   24b6c:	f363 0007 	bfi	r0, r3, #0, #8
   24b70:	f367 108f 	bfi	r0, r7, #6, #10
   24b74:	493d      	ldr	r1, [pc, #244]	; (24c6c <z_arm_fault+0x1f0>)
   24b76:	f019 f9f4 	bl	3df62 <log_string_sync>
		if (SCB_MMFSR != 0) {
   24b7a:	4b3d      	ldr	r3, [pc, #244]	; (24c70 <z_arm_fault+0x1f4>)
   24b7c:	781b      	ldrb	r3, [r3, #0]
   24b7e:	b12b      	cbz	r3, 24b8c <z_arm_fault+0x110>
			reason = mem_manage_fault(esf, 1, recoverable);
   24b80:	2001      	movs	r0, #1
   24b82:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   24b86:	f7ff fdad 	bl	246e4 <mem_manage_fault.isra.2>
   24b8a:	e00e      	b.n	24baa <z_arm_fault+0x12e>
		} else if (SCB_BFSR != 0) {
   24b8c:	4b39      	ldr	r3, [pc, #228]	; (24c74 <z_arm_fault+0x1f8>)
   24b8e:	781b      	ldrb	r3, [r3, #0]
   24b90:	b12b      	cbz	r3, 24b9e <z_arm_fault+0x122>
			reason = bus_fault(esf, 1, recoverable);
   24b92:	2001      	movs	r0, #1
   24b94:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   24b98:	f7ff fe46 	bl	24828 <bus_fault.isra.3>
   24b9c:	e005      	b.n	24baa <z_arm_fault+0x12e>
		} else if (SCB_UFSR != 0) {
   24b9e:	4b36      	ldr	r3, [pc, #216]	; (24c78 <z_arm_fault+0x1fc>)
   24ba0:	881b      	ldrh	r3, [r3, #0]
   24ba2:	b29b      	uxth	r3, r3
   24ba4:	b113      	cbz	r3, 24bac <z_arm_fault+0x130>
			reason = usage_fault(esf);
   24ba6:	f7ff fed5 	bl	24954 <usage_fault.isra.4>
   24baa:	4604      	mov	r4, r0
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   24bac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24bb0:	b99b      	cbnz	r3, 24bda <z_arm_fault+0x15e>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   24bb2:	2268      	movs	r2, #104	; 0x68
   24bb4:	4631      	mov	r1, r6
   24bb6:	a802      	add	r0, sp, #8
   24bb8:	f01b fd30 	bl	4061c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   24bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24bbe:	2d00      	cmp	r5, #0
   24bc0:	d03a      	beq.n	24c38 <z_arm_fault+0x1bc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   24bc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
   24bc6:	b922      	cbnz	r2, 24bd2 <z_arm_fault+0x156>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   24bc8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   24bcc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   24bd0:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   24bd2:	a902      	add	r1, sp, #8
   24bd4:	4620      	mov	r0, r4
   24bd6:	f7ff fcb1 	bl	2453c <z_arm_fatal_error>
}
   24bda:	b01d      	add	sp, #116	; 0x74
   24bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   24be0:	f10d 0107 	add.w	r1, sp, #7
   24be4:	2000      	movs	r0, #0
   24be6:	e7ce      	b.n	24b86 <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
   24be8:	f10d 0107 	add.w	r1, sp, #7
   24bec:	2000      	movs	r0, #0
   24bee:	e7d3      	b.n	24b98 <z_arm_fault+0x11c>
	PR_FAULT_INFO(
   24bf0:	2301      	movs	r3, #1
   24bf2:	f04f 0000 	mov.w	r0, #0
   24bf6:	4a14      	ldr	r2, [pc, #80]	; (24c48 <z_arm_fault+0x1cc>)
   24bf8:	f363 0007 	bfi	r0, r3, #0, #8
   24bfc:	4b13      	ldr	r3, [pc, #76]	; (24c4c <z_arm_fault+0x1d0>)
   24bfe:	491f      	ldr	r1, [pc, #124]	; (24c7c <z_arm_fault+0x200>)
   24c00:	1a9b      	subs	r3, r3, r2
   24c02:	08db      	lsrs	r3, r3, #3
   24c04:	f363 108f 	bfi	r0, r3, #6, #10
   24c08:	e7a6      	b.n	24b58 <z_arm_fault+0xdc>
	PR_FAULT_INFO("***** %s %d) *****",
   24c0a:	2301      	movs	r3, #1
   24c0c:	f04f 0000 	mov.w	r0, #0
   24c10:	4a0d      	ldr	r2, [pc, #52]	; (24c48 <z_arm_fault+0x1cc>)
   24c12:	f363 0007 	bfi	r0, r3, #0, #8
   24c16:	4b0d      	ldr	r3, [pc, #52]	; (24c4c <z_arm_fault+0x1d0>)
   24c18:	4919      	ldr	r1, [pc, #100]	; (24c80 <z_arm_fault+0x204>)
   24c1a:	1a9b      	subs	r3, r3, r2
   24c1c:	08db      	lsrs	r3, r3, #3
   24c1e:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   24c22:	f363 108f 	bfi	r0, r3, #6, #10
   24c26:	4a17      	ldr	r2, [pc, #92]	; (24c84 <z_arm_fault+0x208>)
   24c28:	f1a7 0310 	sub.w	r3, r7, #16
   24c2c:	bf08      	it	eq
   24c2e:	460a      	moveq	r2, r1
   24c30:	4915      	ldr	r1, [pc, #84]	; (24c88 <z_arm_fault+0x20c>)
   24c32:	f019 f996 	bl	3df62 <log_string_sync>
   24c36:	e791      	b.n	24b5c <z_arm_fault+0xe0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   24c38:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   24c3c:	f023 0301 	bic.w	r3, r3, #1
   24c40:	e7c6      	b.n	24bd0 <z_arm_fault+0x154>
   24c42:	bf00      	nop
   24c44:	e000ed00 	.word	0xe000ed00
   24c48:	00041c2c 	.word	0x00041c2c
   24c4c:	00041d2c 	.word	0x00041d2c
   24c50:	0004494b 	.word	0x0004494b
   24c54:	000447b2 	.word	0x000447b2
   24c58:	0004496e 	.word	0x0004496e
   24c5c:	00043278 	.word	0x00043278
   24c60:	00044981 	.word	0x00044981
   24c64:	000449bf 	.word	0x000449bf
   24c68:	000449d6 	.word	0x000449d6
   24c6c:	000449f7 	.word	0x000449f7
   24c70:	e000ed28 	.word	0xe000ed28
   24c74:	e000ed29 	.word	0xe000ed29
   24c78:	e000ed2a 	.word	0xe000ed2a
   24c7c:	00044a16 	.word	0x00044a16
   24c80:	0004491d 	.word	0x0004491d
   24c84:	00044932 	.word	0x00044932
   24c88:	00044a4c 	.word	0x00044a4c

00024c8c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   24c8c:	4b04      	ldr	r3, [pc, #16]	; (24ca0 <z_arm_fault_init+0x14>)
   24c8e:	695a      	ldr	r2, [r3, #20]
   24c90:	f042 0210 	orr.w	r2, r2, #16
   24c94:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   24c96:	695a      	ldr	r2, [r3, #20]
   24c98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   24c9c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   24c9e:	4770      	bx	lr
   24ca0:	e000ed00 	.word	0xe000ed00

00024ca4 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   24ca4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   24ca8:	4905      	ldr	r1, [pc, #20]	; (24cc0 <sys_arch_reboot+0x1c>)
   24caa:	4b06      	ldr	r3, [pc, #24]	; (24cc4 <sys_arch_reboot+0x20>)
   24cac:	68ca      	ldr	r2, [r1, #12]
   24cae:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   24cb2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   24cb4:	60cb      	str	r3, [r1, #12]
   24cb6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   24cba:	bf00      	nop
   24cbc:	e7fd      	b.n	24cba <sys_arch_reboot+0x16>
   24cbe:	bf00      	nop
   24cc0:	e000ed00 	.word	0xe000ed00
   24cc4:	05fa0004 	.word	0x05fa0004

00024cc8 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
   24cc8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   24cca:	2120      	movs	r1, #32
   24ccc:	4803      	ldr	r0, [pc, #12]	; (24cdc <z_arm_int_lib_init+0x14>)
   24cce:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   24cd0:	3301      	adds	r3, #1
   24cd2:	2b41      	cmp	r3, #65	; 0x41
   24cd4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   24cd8:	d1f9      	bne.n	24cce <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   24cda:	4770      	bx	lr
   24cdc:	e000e100 	.word	0xe000e100

00024ce0 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   24ce0:	b538      	push	{r3, r4, r5, lr}
   24ce2:	4604      	mov	r4, r0
	__asm__ volatile(
   24ce4:	f04f 0320 	mov.w	r3, #32
   24ce8:	f3ef 8511 	mrs	r5, BASEPRI
   24cec:	f383 8811 	msr	BASEPRI, r3
   24cf0:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   24cf4:	7b03      	ldrb	r3, [r0, #12]
   24cf6:	07db      	lsls	r3, r3, #31
   24cf8:	d50c      	bpl.n	24d14 <z_impl_k_thread_abort+0x34>
   24cfa:	4912      	ldr	r1, [pc, #72]	; (24d44 <z_impl_k_thread_abort+0x64>)
   24cfc:	2324      	movs	r3, #36	; 0x24
   24cfe:	4a12      	ldr	r2, [pc, #72]	; (24d48 <z_impl_k_thread_abort+0x68>)
   24d00:	4812      	ldr	r0, [pc, #72]	; (24d4c <z_impl_k_thread_abort+0x6c>)
   24d02:	f019 f8ca 	bl	3de9a <printk>
   24d06:	4812      	ldr	r0, [pc, #72]	; (24d50 <z_impl_k_thread_abort+0x70>)
   24d08:	f019 f8c7 	bl	3de9a <printk>
   24d0c:	2124      	movs	r1, #36	; 0x24
   24d0e:	480e      	ldr	r0, [pc, #56]	; (24d48 <z_impl_k_thread_abort+0x68>)
   24d10:	f019 f916 	bl	3df40 <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
   24d14:	4620      	mov	r0, r4
   24d16:	f014 fdcb 	bl	398b0 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   24d1a:	4b0e      	ldr	r3, [pc, #56]	; (24d54 <z_impl_k_thread_abort+0x74>)
   24d1c:	689b      	ldr	r3, [r3, #8]
   24d1e:	42a3      	cmp	r3, r4
   24d20:	d10b      	bne.n	24d3a <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   24d22:	4b0d      	ldr	r3, [pc, #52]	; (24d58 <z_impl_k_thread_abort+0x78>)
   24d24:	685a      	ldr	r2, [r3, #4]
   24d26:	f3c2 0208 	ubfx	r2, r2, #0, #9
   24d2a:	b912      	cbnz	r2, 24d32 <z_impl_k_thread_abort+0x52>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   24d2c:	4628      	mov	r0, r5
   24d2e:	f7ff fb1d 	bl	2436c <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   24d32:	685a      	ldr	r2, [r3, #4]
   24d34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   24d38:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   24d3a:	4628      	mov	r0, r5
}
   24d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   24d40:	f01b bb16 	b.w	40370 <z_reschedule_irqlock>
   24d44:	00044aa0 	.word	0x00044aa0
   24d48:	00044a5f 	.word	0x00044a5f
   24d4c:	00043278 	.word	0x00043278
   24d50:	00044ace 	.word	0x00044ace
   24d54:	2002926c 	.word	0x2002926c
   24d58:	e000ed00 	.word	0xe000ed00

00024d5c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   24d5c:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   24d5e:	4b0e      	ldr	r3, [pc, #56]	; (24d98 <z_arm_configure_static_mpu_regions+0x3c>)
{
   24d60:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   24d62:	9302      	str	r3, [sp, #8]
   24d64:	4b0d      	ldr	r3, [pc, #52]	; (24d9c <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   24d66:	4c0e      	ldr	r4, [pc, #56]	; (24da0 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   24d68:	9303      	str	r3, [sp, #12]
   24d6a:	4b0e      	ldr	r3, [pc, #56]	; (24da4 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   24d6c:	4a0e      	ldr	r2, [pc, #56]	; (24da8 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   24d6e:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   24d70:	ab02      	add	r3, sp, #8
   24d72:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   24d74:	a801      	add	r0, sp, #4
   24d76:	4623      	mov	r3, r4
   24d78:	2101      	movs	r1, #1
   24d7a:	f000 f97d 	bl	25078 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   24d7e:	2300      	movs	r3, #0
   24d80:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   24d82:	4b0a      	ldr	r3, [pc, #40]	; (24dac <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   24d84:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   24d86:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   24d88:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   24d8a:	9305      	str	r3, [sp, #20]
   24d8c:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   24d8e:	f000 f997 	bl	250c0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   24d92:	b008      	add	sp, #32
   24d94:	bd10      	pop	{r4, pc}
   24d96:	bf00      	nop
   24d98:	20020000 	.word	0x20020000
   24d9c:	00000000 	.word	0x00000000
   24da0:	20040000 	.word	0x20040000
   24da4:	00010006 	.word	0x00010006
   24da8:	20020000 	.word	0x20020000
   24dac:	20020000 	.word	0x20020000

00024db0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   24db0:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   24db2:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   24db4:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   24db6:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   24dba:	f004 031f 	and.w	r3, r4, #31
   24dbe:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   24dc0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   24dc2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   24dc4:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   24dc8:	4904      	ldr	r1, [pc, #16]	; (24ddc <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   24dca:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   24dce:	f043 0301 	orr.w	r3, r3, #1
   24dd2:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   24dd4:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   24dd6:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   24dd8:	bd10      	pop	{r4, pc}
   24dda:	bf00      	nop
   24ddc:	e000ed90 	.word	0xe000ed90

00024de0 <region_allocate_and_init>:

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   24de0:	280f      	cmp	r0, #15
{
   24de2:	b510      	push	{r4, lr}
   24de4:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1)) {
   24de6:	d912      	bls.n	24e0e <region_allocate_and_init+0x2e>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   24de8:	2301      	movs	r3, #1
   24dea:	f04f 0000 	mov.w	r0, #0
   24dee:	4a09      	ldr	r2, [pc, #36]	; (24e14 <region_allocate_and_init+0x34>)
   24df0:	f363 0007 	bfi	r0, r3, #0, #8
   24df4:	4b08      	ldr	r3, [pc, #32]	; (24e18 <region_allocate_and_init+0x38>)
   24df6:	4909      	ldr	r1, [pc, #36]	; (24e1c <region_allocate_and_init+0x3c>)
   24df8:	1a9b      	subs	r3, r3, r2
   24dfa:	08db      	lsrs	r3, r3, #3
   24dfc:	4622      	mov	r2, r4
   24dfe:	f363 108f 	bfi	r0, r3, #6, #10
   24e02:	f019 f8ae 	bl	3df62 <log_string_sync>
		return -EINVAL;
   24e06:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   24e0a:	4620      	mov	r0, r4
   24e0c:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   24e0e:	f7ff ffcf 	bl	24db0 <region_init>
	return index;
   24e12:	e7fa      	b.n	24e0a <region_allocate_and_init+0x2a>
   24e14:	00041c2c 	.word	0x00041c2c
   24e18:	00041cec 	.word	0x00041cec
   24e1c:	00044ca1 	.word	0x00044ca1

00024e20 <mpu_configure_regions_and_partition.constprop.2>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   24e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e24:	4607      	mov	r7, r0
   24e26:	4688      	mov	r8, r1
   24e28:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   24e2a:	2600      	movs	r6, #0
	MPU->RNR = index;
   24e2c:	4d58      	ldr	r5, [pc, #352]	; (24f90 <mpu_configure_regions_and_partition.constprop.2+0x170>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   24e2e:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   24e30:	4546      	cmp	r6, r8
   24e32:	da3d      	bge.n	24eb0 <mpu_configure_regions_and_partition.constprop.2+0x90>
		if (regions[i]->size == 0U) {
   24e34:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   24e38:	f8d3 9004 	ldr.w	r9, [r3, #4]
   24e3c:	f1b9 0f00 	cmp.w	r9, #0
   24e40:	d059      	beq.n	24ef6 <mpu_configure_regions_and_partition.constprop.2+0xd6>
		&&
   24e42:	f1b9 0f1f 	cmp.w	r9, #31
   24e46:	d922      	bls.n	24e8e <mpu_configure_regions_and_partition.constprop.2+0x6e>
		&&
   24e48:	f019 0f1f 	tst.w	r9, #31
   24e4c:	d11f      	bne.n	24e8e <mpu_configure_regions_and_partition.constprop.2+0x6e>
		((part->start &
   24e4e:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   24e52:	f01a 0f1f 	tst.w	sl, #31
   24e56:	d11a      	bne.n	24e8e <mpu_configure_regions_and_partition.constprop.2+0x6e>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   24e58:	4650      	mov	r0, sl
   24e5a:	f019 fa48 	bl	3e2ee <arm_cmse_mpu_region_get>
   24e5e:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   24e60:	eb09 000a 	add.w	r0, r9, sl
   24e64:	3801      	subs	r0, #1
   24e66:	f019 fa42 	bl	3e2ee <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   24e6a:	4583      	cmp	fp, r0
   24e6c:	d024      	beq.n	24eb8 <mpu_configure_regions_and_partition.constprop.2+0x98>
	return -EINVAL;
   24e6e:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   24e72:	2301      	movs	r3, #1
   24e74:	f04f 0000 	mov.w	r0, #0
   24e78:	4a46      	ldr	r2, [pc, #280]	; (24f94 <mpu_configure_regions_and_partition.constprop.2+0x174>)
   24e7a:	f363 0007 	bfi	r0, r3, #0, #8
   24e7e:	4b46      	ldr	r3, [pc, #280]	; (24f98 <mpu_configure_regions_and_partition.constprop.2+0x178>)
   24e80:	4946      	ldr	r1, [pc, #280]	; (24f9c <mpu_configure_regions_and_partition.constprop.2+0x17c>)
   24e82:	1a9b      	subs	r3, r3, r2
   24e84:	08db      	lsrs	r3, r3, #3
   24e86:	f363 108f 	bfi	r0, r3, #6, #10
   24e8a:	465a      	mov	r2, fp
   24e8c:	e00c      	b.n	24ea8 <mpu_configure_regions_and_partition.constprop.2+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
   24e8e:	2301      	movs	r3, #1
   24e90:	f04f 0000 	mov.w	r0, #0
   24e94:	4a3f      	ldr	r2, [pc, #252]	; (24f94 <mpu_configure_regions_and_partition.constprop.2+0x174>)
   24e96:	f363 0007 	bfi	r0, r3, #0, #8
   24e9a:	4b3f      	ldr	r3, [pc, #252]	; (24f98 <mpu_configure_regions_and_partition.constprop.2+0x178>)
   24e9c:	4940      	ldr	r1, [pc, #256]	; (24fa0 <mpu_configure_regions_and_partition.constprop.2+0x180>)
   24e9e:	1a9b      	subs	r3, r3, r2
   24ea0:	4632      	mov	r2, r6
   24ea2:	08db      	lsrs	r3, r3, #3
   24ea4:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
   24ea8:	f019 f85b 	bl	3df62 <log_string_sync>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   24eac:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   24eb0:	4620      	mov	r0, r4
   24eb2:	b005      	add	sp, #20
   24eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   24eb8:	f11b 0f16 	cmn.w	fp, #22
   24ebc:	d0d9      	beq.n	24e72 <mpu_configure_regions_and_partition.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
   24ebe:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   24ec0:	455b      	cmp	r3, fp
   24ec2:	dbd6      	blt.n	24e72 <mpu_configure_regions_and_partition.constprop.2+0x52>
	MPU->RNR = index;
   24ec4:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   24ec8:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   24eca:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   24ece:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   24ed0:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   24ed4:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   24ed8:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   24edc:	e9d1 3200 	ldrd	r3, r2, [r1]
   24ee0:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   24ee2:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   24ee4:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   24ee8:	d118      	bne.n	24f1c <mpu_configure_regions_and_partition.constprop.2+0xfc>
   24eea:	45ca      	cmp	sl, r9
   24eec:	d105      	bne.n	24efa <mpu_configure_regions_and_partition.constprop.2+0xda>
			mpu_configure_region(u_reg_index, regions[i]);
   24eee:	fa5f f08b 	uxtb.w	r0, fp
   24ef2:	f019 f9e1 	bl	3e2b8 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   24ef6:	3601      	adds	r6, #1
   24ef8:	e79a      	b.n	24e30 <mpu_configure_regions_and_partition.constprop.2+0x10>
	MPU->RNR = index;
   24efa:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   24efe:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   24f00:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   24f04:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   24f08:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   24f0a:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   24f0c:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   24f0e:	f019 f9d3 	bl	3e2b8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   24f12:	f110 0f16 	cmn.w	r0, #22
   24f16:	d0c9      	beq.n	24eac <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
   24f18:	1c44      	adds	r4, r0, #1
   24f1a:	e7ec      	b.n	24ef6 <mpu_configure_regions_and_partition.constprop.2+0xd6>
	MPU->RNR = index;
   24f1c:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   24f20:	692a      	ldr	r2, [r5, #16]
   24f22:	3b01      	subs	r3, #1
   24f24:	f023 031f 	bic.w	r3, r3, #31
   24f28:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   24f2c:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   24f2e:	45ca      	cmp	sl, r9
   24f30:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   24f32:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   24f34:	d0eb      	beq.n	24f0e <mpu_configure_regions_and_partition.constprop.2+0xee>
				mpu_configure_region(reg_index, regions[i]);
   24f36:	f019 f9bf 	bl	3e2b8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   24f3a:	f110 0f16 	cmn.w	r0, #22
   24f3e:	d0b5      	beq.n	24eac <mpu_configure_regions_and_partition.constprop.2+0x8c>
	MPU->RNR = index;
   24f40:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   24f44:	68ea      	ldr	r2, [r5, #12]
   24f46:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   24f4a:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   24f4e:	f362 0304 	bfi	r3, r2, #0, #5
   24f52:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   24f56:	692b      	ldr	r3, [r5, #16]
   24f58:	f89d 2008 	ldrb.w	r2, [sp, #8]
   24f5c:	085b      	lsrs	r3, r3, #1
   24f5e:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   24f62:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   24f66:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   24f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   24f6e:	4413      	add	r3, r2
   24f70:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   24f72:	f023 031f 	bic.w	r3, r3, #31
   24f76:	4453      	add	r3, sl
   24f78:	eba3 0309 	sub.w	r3, r3, r9
			reg_index++;
   24f7c:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   24f7e:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   24f82:	4669      	mov	r1, sp
   24f84:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   24f86:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   24f88:	f7ff ff2a 	bl	24de0 <region_allocate_and_init>
   24f8c:	e7c1      	b.n	24f12 <mpu_configure_regions_and_partition.constprop.2+0xf2>
   24f8e:	bf00      	nop
   24f90:	e000ed90 	.word	0xe000ed90
   24f94:	00041c2c 	.word	0x00041c2c
   24f98:	00041cec 	.word	0x00041cec
   24f9c:	00044c7e 	.word	0x00044c7e
   24fa0:	00044c5b 	.word	0x00044c5b

00024fa4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   24fa4:	2205      	movs	r2, #5
   24fa6:	4b03      	ldr	r3, [pc, #12]	; (24fb4 <arm_core_mpu_enable+0x10>)
   24fa8:	605a      	str	r2, [r3, #4]
   24faa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   24fae:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   24fb2:	4770      	bx	lr
   24fb4:	e000ed90 	.word	0xe000ed90

00024fb8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   24fb8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   24fbc:	2200      	movs	r2, #0
   24fbe:	4b01      	ldr	r3, [pc, #4]	; (24fc4 <arm_core_mpu_disable+0xc>)
   24fc0:	605a      	str	r2, [r3, #4]
}
   24fc2:	4770      	bx	lr
   24fc4:	e000ed90 	.word	0xe000ed90

00024fc8 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   24fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   24fca:	4f21      	ldr	r7, [pc, #132]	; (25050 <arm_mpu_init+0x88>)
   24fcc:	683e      	ldr	r6, [r7, #0]
   24fce:	2e10      	cmp	r6, #16
   24fd0:	d913      	bls.n	24ffa <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   24fd2:	f240 132d 	movw	r3, #301	; 0x12d
   24fd6:	4a1f      	ldr	r2, [pc, #124]	; (25054 <arm_mpu_init+0x8c>)
   24fd8:	491f      	ldr	r1, [pc, #124]	; (25058 <arm_mpu_init+0x90>)
   24fda:	4820      	ldr	r0, [pc, #128]	; (2505c <arm_mpu_init+0x94>)
   24fdc:	f018 ff5d 	bl	3de9a <printk>
   24fe0:	2210      	movs	r2, #16
   24fe2:	4631      	mov	r1, r6
   24fe4:	481e      	ldr	r0, [pc, #120]	; (25060 <arm_mpu_init+0x98>)
   24fe6:	f018 ff58 	bl	3de9a <printk>
   24fea:	481a      	ldr	r0, [pc, #104]	; (25054 <arm_mpu_init+0x8c>)
   24fec:	f240 112d 	movw	r1, #301	; 0x12d
   24ff0:	f018 ffa6 	bl	3df40 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   24ff4:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   24ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   24ffa:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   24ffc:	f7ff ffdc 	bl	24fb8 <arm_core_mpu_disable>
	MPU->MAIR0 =
   25000:	4d18      	ldr	r5, [pc, #96]	; (25064 <arm_mpu_init+0x9c>)
   25002:	4a19      	ldr	r2, [pc, #100]	; (25068 <arm_mpu_init+0xa0>)
   25004:	632a      	str	r2, [r5, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   25006:	42a6      	cmp	r6, r4
   25008:	d119      	bne.n	2503e <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   2500a:	4b18      	ldr	r3, [pc, #96]	; (2506c <arm_mpu_init+0xa4>)
   2500c:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
   2500e:	f7ff ffc9 	bl	24fa4 <arm_core_mpu_enable>
	__ASSERT(
   25012:	682b      	ldr	r3, [r5, #0]
   25014:	f3c3 2307 	ubfx	r3, r3, #8, #8
   25018:	2b10      	cmp	r3, #16
   2501a:	d00e      	beq.n	2503a <arm_mpu_init+0x72>
   2501c:	4914      	ldr	r1, [pc, #80]	; (25070 <arm_mpu_init+0xa8>)
   2501e:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   25022:	4a0c      	ldr	r2, [pc, #48]	; (25054 <arm_mpu_init+0x8c>)
   25024:	480d      	ldr	r0, [pc, #52]	; (2505c <arm_mpu_init+0x94>)
   25026:	f018 ff38 	bl	3de9a <printk>
   2502a:	4812      	ldr	r0, [pc, #72]	; (25074 <arm_mpu_init+0xac>)
   2502c:	f018 ff35 	bl	3de9a <printk>
   25030:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   25034:	4807      	ldr	r0, [pc, #28]	; (25054 <arm_mpu_init+0x8c>)
   25036:	f018 ff83 	bl	3df40 <assert_post_action>
	return 0;
   2503a:	2000      	movs	r0, #0
   2503c:	e7dc      	b.n	24ff8 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   2503e:	6879      	ldr	r1, [r7, #4]
   25040:	4620      	mov	r0, r4
   25042:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   25046:	f7ff feb3 	bl	24db0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2504a:	3401      	adds	r4, #1
   2504c:	e7db      	b.n	25006 <arm_mpu_init+0x3e>
   2504e:	bf00      	nop
   25050:	000420fc 	.word	0x000420fc
   25054:	00044b75 	.word	0x00044b75
   25058:	00048cfb 	.word	0x00048cfb
   2505c:	00043278 	.word	0x00043278
   25060:	00044bb5 	.word	0x00044bb5
   25064:	e000ed90 	.word	0xe000ed90
   25068:	0044ffaa 	.word	0x0044ffaa
   2506c:	2002a29f 	.word	0x2002a29f
   25070:	00044be9 	.word	0x00044be9
   25074:	00044c3a 	.word	0x00044c3a

00025078 <arm_core_mpu_configure_static_mpu_regions>:
{
   25078:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   2507a:	4c0c      	ldr	r4, [pc, #48]	; (250ac <arm_core_mpu_configure_static_mpu_regions+0x34>)
   2507c:	460d      	mov	r5, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   2507e:	7822      	ldrb	r2, [r4, #0]
   25080:	f7ff fece 	bl	24e20 <mpu_configure_regions_and_partition.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   25084:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   25086:	3016      	adds	r0, #22
   25088:	d10f      	bne.n	250aa <arm_core_mpu_configure_static_mpu_regions+0x32>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   2508a:	23f3      	movs	r3, #243	; 0xf3
   2508c:	4a08      	ldr	r2, [pc, #32]	; (250b0 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   2508e:	4909      	ldr	r1, [pc, #36]	; (250b4 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   25090:	4809      	ldr	r0, [pc, #36]	; (250b8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   25092:	f018 ff02 	bl	3de9a <printk>
   25096:	4629      	mov	r1, r5
   25098:	4808      	ldr	r0, [pc, #32]	; (250bc <arm_core_mpu_configure_static_mpu_regions+0x44>)
   2509a:	f018 fefe 	bl	3de9a <printk>
}
   2509e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   250a2:	21f3      	movs	r1, #243	; 0xf3
   250a4:	4802      	ldr	r0, [pc, #8]	; (250b0 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   250a6:	f018 bf4b 	b.w	3df40 <assert_post_action>
}
   250aa:	bd38      	pop	{r3, r4, r5, pc}
   250ac:	2002a29f 	.word	0x2002a29f
   250b0:	00044b75 	.word	0x00044b75
   250b4:	00048cfb 	.word	0x00048cfb
   250b8:	00043278 	.word	0x00043278
   250bc:	00044b1a 	.word	0x00044b1a

000250c0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   250c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   250c4:	4c2e      	ldr	r4, [pc, #184]	; (25180 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
   250c6:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   250c8:	4680      	mov	r8, r0
   250ca:	2700      	movs	r7, #0
   250cc:	46a2      	mov	sl, r4
	attr->rbar = MPU->RBAR &
   250ce:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
   250d2:	4d2c      	ldr	r5, [pc, #176]	; (25184 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   250d4:	454f      	cmp	r7, r9
   250d6:	db02      	blt.n	250de <arm_core_mpu_mark_areas_for_dynamic_regions+0x1e>
}
   250d8:	b003      	add	sp, #12
   250da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   250de:	f8d8 3004 	ldr.w	r3, [r8, #4]
   250e2:	9301      	str	r3, [sp, #4]
   250e4:	2b00      	cmp	r3, #0
   250e6:	d046      	beq.n	25176 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb6>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   250e8:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   250ec:	4608      	mov	r0, r1
   250ee:	9100      	str	r1, [sp, #0]
   250f0:	f019 f8fd 	bl	3e2ee <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   250f4:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   250f8:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   250fa:	1858      	adds	r0, r3, r1
   250fc:	3801      	subs	r0, #1
   250fe:	f019 f8f6 	bl	3e2ee <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   25102:	4286      	cmp	r6, r0
   25104:	4a20      	ldr	r2, [pc, #128]	; (25188 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   25106:	d018      	beq.n	2513a <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   25108:	2314      	movs	r3, #20
   2510a:	435f      	muls	r7, r3
   2510c:	f06f 0315 	mvn.w	r3, #21
   25110:	f84a 3007 	str.w	r3, [sl, r7]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   25114:	f240 1303 	movw	r3, #259	; 0x103
   25118:	4a1c      	ldr	r2, [pc, #112]	; (2518c <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   2511a:	491d      	ldr	r1, [pc, #116]	; (25190 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   2511c:	481d      	ldr	r0, [pc, #116]	; (25194 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   2511e:	f018 febc 	bl	3de9a <printk>
   25122:	4649      	mov	r1, r9
   25124:	481c      	ldr	r0, [pc, #112]	; (25198 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   25126:	f018 feb8 	bl	3de9a <printk>
   2512a:	f240 1103 	movw	r1, #259	; 0x103
   2512e:	4817      	ldr	r0, [pc, #92]	; (2518c <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
}
   25130:	b003      	add	sp, #12
   25132:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   25136:	f018 bf03 	b.w	3df40 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   2513a:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
   2513e:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   25140:	d0e8      	beq.n	25114 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   25142:	7813      	ldrb	r3, [r2, #0]
   25144:	42b3      	cmp	r3, r6
   25146:	dde5      	ble.n	25114 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   25148:	fb0b a307 	mla	r3, fp, r7, sl
	MPU->RNR = index;
   2514c:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
   2514e:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   25150:	68e8      	ldr	r0, [r5, #12]
   25152:	7b19      	ldrb	r1, [r3, #12]
   25154:	f360 0104 	bfi	r1, r0, #0, #5
   25158:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   2515a:	6929      	ldr	r1, [r5, #16]
   2515c:	7b18      	ldrb	r0, [r3, #12]
   2515e:	0849      	lsrs	r1, r1, #1
   25160:	f361 1047 	bfi	r0, r1, #5, #3
   25164:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   25166:	68eb      	ldr	r3, [r5, #12]
   25168:	f023 031f 	bic.w	r3, r3, #31
   2516c:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   2516e:	692b      	ldr	r3, [r5, #16]
   25170:	f023 031f 	bic.w	r3, r3, #31
   25174:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   25176:	3701      	adds	r7, #1
   25178:	3414      	adds	r4, #20
   2517a:	f108 080c 	add.w	r8, r8, #12
   2517e:	e7a9      	b.n	250d4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   25180:	2002396c 	.word	0x2002396c
   25184:	e000ed90 	.word	0xe000ed90
   25188:	2002a29f 	.word	0x2002a29f
   2518c:	00044b75 	.word	0x00044b75
   25190:	00048cfb 	.word	0x00048cfb
   25194:	00043278 	.word	0x00043278
   25198:	00044b46 	.word	0x00044b46

0002519c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   2519c:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   2519e:	4b16      	ldr	r3, [pc, #88]	; (251f8 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
   251a0:	460c      	mov	r4, r1
   251a2:	781d      	ldrb	r5, [r3, #0]
   251a4:	4606      	mov	r6, r0
   251a6:	462b      	mov	r3, r5
  mpu->RLAR = 0U;
   251a8:	2100      	movs	r1, #0
  mpu->RNR = rnr;
   251aa:	4a14      	ldr	r2, [pc, #80]	; (251fc <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   251ac:	2b0f      	cmp	r3, #15
   251ae:	dd1d      	ble.n	251ec <arm_core_mpu_configure_dynamic_mpu_regions+0x50>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
   251b0:	4913      	ldr	r1, [pc, #76]	; (25200 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
   251b2:	f851 0b04 	ldr.w	r0, [r1], #4
   251b6:	f7ff fdfb 	bl	24db0 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
   251ba:	462a      	mov	r2, r5
   251bc:	4621      	mov	r1, r4
   251be:	4630      	mov	r0, r6
   251c0:	f7ff fe2e 	bl	24e20 <mpu_configure_regions_and_partition.constprop.2>
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   251c4:	3016      	adds	r0, #22
   251c6:	d115      	bne.n	251f4 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   251c8:	f44f 7389 	mov.w	r3, #274	; 0x112
   251cc:	4a0d      	ldr	r2, [pc, #52]	; (25204 <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
   251ce:	490e      	ldr	r1, [pc, #56]	; (25208 <arm_core_mpu_configure_dynamic_mpu_regions+0x6c>)
   251d0:	480e      	ldr	r0, [pc, #56]	; (2520c <arm_core_mpu_configure_dynamic_mpu_regions+0x70>)
   251d2:	f018 fe62 	bl	3de9a <printk>
   251d6:	4621      	mov	r1, r4
   251d8:	480d      	ldr	r0, [pc, #52]	; (25210 <arm_core_mpu_configure_dynamic_mpu_regions+0x74>)
   251da:	f018 fe5e 	bl	3de9a <printk>
}
   251de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   251e2:	f44f 7189 	mov.w	r1, #274	; 0x112
   251e6:	4807      	ldr	r0, [pc, #28]	; (25204 <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
   251e8:	f018 beaa 	b.w	3df40 <assert_post_action>
   251ec:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   251ee:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   251f0:	3301      	adds	r3, #1
   251f2:	e7db      	b.n	251ac <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
}
   251f4:	bd70      	pop	{r4, r5, r6, pc}
   251f6:	bf00      	nop
   251f8:	2002a29f 	.word	0x2002a29f
   251fc:	e000ed90 	.word	0xe000ed90
   25200:	2002396c 	.word	0x2002396c
   25204:	00044b75 	.word	0x00044b75
   25208:	00048cfb 	.word	0x00048cfb
   2520c:	00043278 	.word	0x00043278
   25210:	00044aed 	.word	0x00044aed

00025214 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   25214:	4b01      	ldr	r3, [pc, #4]	; (2521c <__stdout_hook_install+0x8>)
   25216:	6018      	str	r0, [r3, #0]
}
   25218:	4770      	bx	lr
   2521a:	bf00      	nop
   2521c:	20032098 	.word	0x20032098

00025220 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   25220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25222:	4606      	mov	r6, r0
   25224:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   25226:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   25228:	4f06      	ldr	r7, [pc, #24]	; (25244 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   2522a:	42ac      	cmp	r4, r5
   2522c:	da08      	bge.n	25240 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   2522e:	683b      	ldr	r3, [r7, #0]
   25230:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   25232:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   25234:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   25236:	f104 0401 	add.w	r4, r4, #1
   2523a:	d001      	beq.n	25240 <z_impl_zephyr_read_stdin+0x20>
   2523c:	280d      	cmp	r0, #13
   2523e:	d1f4      	bne.n	2522a <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   25240:	4620      	mov	r0, r4
   25242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25244:	20032094 	.word	0x20032094

00025248 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   25248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2524a:	460e      	mov	r6, r1
   2524c:	4f09      	ldr	r7, [pc, #36]	; (25274 <z_impl_zephyr_write_stdout+0x2c>)
   2524e:	1e44      	subs	r4, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   25250:	f1c0 0501 	rsb	r5, r0, #1
   25254:	192b      	adds	r3, r5, r4
   25256:	429e      	cmp	r6, r3
   25258:	dc01      	bgt.n	2525e <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   2525a:	4630      	mov	r0, r6
   2525c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   2525e:	7863      	ldrb	r3, [r4, #1]
   25260:	2b0a      	cmp	r3, #10
   25262:	d102      	bne.n	2526a <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   25264:	683b      	ldr	r3, [r7, #0]
   25266:	200d      	movs	r0, #13
   25268:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   2526a:	683b      	ldr	r3, [r7, #0]
   2526c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   25270:	4798      	blx	r3
   25272:	e7ef      	b.n	25254 <z_impl_zephyr_write_stdout+0xc>
   25274:	20032098 	.word	0x20032098

00025278 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   25278:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2527a:	2105      	movs	r1, #5
   2527c:	4801      	ldr	r0, [pc, #4]	; (25284 <_exit+0xc>)
   2527e:	f7ff ffe3 	bl	25248 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
		;
   25282:	e7fe      	b.n	25282 <_exit+0xa>
   25284:	00044cc7 	.word	0x00044cc7

00025288 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   25288:	b538      	push	{r3, r4, r5, lr}
   2528a:	4605      	mov	r5, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
   2528c:	f04f 31ff 	mov.w	r1, #4294967295
   25290:	480b      	ldr	r0, [pc, #44]	; (252c0 <_sbrk+0x38>)
   25292:	f018 fe21 	bl	3ded8 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   25296:	4a0b      	ldr	r2, [pc, #44]	; (252c4 <_sbrk+0x3c>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   25298:	490b      	ldr	r1, [pc, #44]	; (252c8 <_sbrk+0x40>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
   2529a:	6814      	ldr	r4, [r2, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   2529c:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
   252a0:	4425      	add	r5, r4
   252a2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   252a6:	429d      	cmp	r5, r3
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   252a8:	bf2c      	ite	cs
   252aa:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   252ae:	1864      	addcc	r4, r4, r1
	}

	sys_sem_give(&heap_sem);
   252b0:	4803      	ldr	r0, [pc, #12]	; (252c0 <_sbrk+0x38>)
		heap_sz += count;
   252b2:	bf38      	it	cc
   252b4:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
   252b6:	f018 fe0a 	bl	3dece <sys_sem_give>

	return ret;
}
   252ba:	4620      	mov	r0, r4
   252bc:	bd38      	pop	{r3, r4, r5, pc}
   252be:	bf00      	nop
   252c0:	20032470 	.word	0x20032470
   252c4:	20023980 	.word	0x20023980
   252c8:	2003253c 	.word	0x2003253c

000252cc <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   252cc:	b538      	push	{r3, r4, r5, lr}
   252ce:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   252d0:	4604      	mov	r4, r0
   252d2:	b970      	cbnz	r0, 252f2 <net_if_flag_is_set+0x26>
   252d4:	490b      	ldr	r1, [pc, #44]	; (25304 <net_if_flag_is_set+0x38>)
   252d6:	f240 2311 	movw	r3, #529	; 0x211
   252da:	4a0b      	ldr	r2, [pc, #44]	; (25308 <net_if_flag_is_set+0x3c>)
   252dc:	480b      	ldr	r0, [pc, #44]	; (2530c <net_if_flag_is_set+0x40>)
   252de:	f018 fddc 	bl	3de9a <printk>
   252e2:	480b      	ldr	r0, [pc, #44]	; (25310 <net_if_flag_is_set+0x44>)
   252e4:	f018 fdd9 	bl	3de9a <printk>
   252e8:	f240 2111 	movw	r1, #529	; 0x211
   252ec:	4806      	ldr	r0, [pc, #24]	; (25308 <net_if_flag_is_set+0x3c>)
   252ee:	f018 fe27 	bl	3df40 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   252f2:	6823      	ldr	r3, [r4, #0]
   252f4:	330c      	adds	r3, #12
   252f6:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   252fa:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   252fc:	f000 0001 	and.w	r0, r0, #1
   25300:	bd38      	pop	{r3, r4, r5, pc}
   25302:	bf00      	nop
   25304:	00044d0c 	.word	0x00044d0c
   25308:	00044ce4 	.word	0x00044ce4
   2530c:	00043278 	.word	0x00043278
   25310:	00044d12 	.word	0x00044d12

00025314 <net_if_flag_set.constprop.24>:
static inline void net_if_flag_set(struct net_if *iface,
   25314:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   25316:	4604      	mov	r4, r0
   25318:	b970      	cbnz	r0, 25338 <net_if_flag_set.constprop.24+0x24>
   2531a:	490d      	ldr	r1, [pc, #52]	; (25350 <net_if_flag_set.constprop.24+0x3c>)
   2531c:	f240 13e3 	movw	r3, #483	; 0x1e3
   25320:	4a0c      	ldr	r2, [pc, #48]	; (25354 <net_if_flag_set.constprop.24+0x40>)
   25322:	480d      	ldr	r0, [pc, #52]	; (25358 <net_if_flag_set.constprop.24+0x44>)
   25324:	f018 fdb9 	bl	3de9a <printk>
   25328:	480c      	ldr	r0, [pc, #48]	; (2535c <net_if_flag_set.constprop.24+0x48>)
   2532a:	f018 fdb6 	bl	3de9a <printk>
   2532e:	f240 11e3 	movw	r1, #483	; 0x1e3
   25332:	4808      	ldr	r0, [pc, #32]	; (25354 <net_if_flag_set.constprop.24+0x40>)
   25334:	f018 fe04 	bl	3df40 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25338:	6823      	ldr	r3, [r4, #0]
   2533a:	330c      	adds	r3, #12
   2533c:	e8d3 2fef 	ldaex	r2, [r3]
   25340:	f042 0201 	orr.w	r2, r2, #1
   25344:	e8c3 2fe1 	stlex	r1, r2, [r3]
   25348:	2900      	cmp	r1, #0
   2534a:	d1f7      	bne.n	2533c <net_if_flag_set.constprop.24+0x28>
}
   2534c:	bd10      	pop	{r4, pc}
   2534e:	bf00      	nop
   25350:	00044d0c 	.word	0x00044d0c
   25354:	00044ce4 	.word	0x00044ce4
   25358:	00043278 	.word	0x00043278
   2535c:	00044d12 	.word	0x00044d12

00025360 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   25360:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   25362:	2100      	movs	r1, #0
{
   25364:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   25366:	f7ff ffb1 	bl	252cc <net_if_flag_is_set>
   2536a:	b928      	cbnz	r0, 25378 <net_if_up+0x18>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   2536c:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   2536e:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   25370:	7e9b      	ldrb	r3, [r3, #26]
   25372:	b11b      	cbz	r3, 2537c <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   25374:	f7ff ffce 	bl	25314 <net_if_flag_set.constprop.24>
		return 0;
   25378:	2000      	movs	r0, #0
   2537a:	e023      	b.n	253c4 <net_if_up+0x64>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   2537c:	f018 ffe6 	bl	3e34c <net_if_l2>
   25380:	b9c0      	cbnz	r0, 253b4 <net_if_up+0x54>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   25382:	682b      	ldr	r3, [r5, #0]
   25384:	691b      	ldr	r3, [r3, #16]
   25386:	b973      	cbnz	r3, 253a6 <net_if_up+0x46>
   25388:	490f      	ldr	r1, [pc, #60]	; (253c8 <net_if_up+0x68>)
   2538a:	f640 538f 	movw	r3, #3471	; 0xd8f
   2538e:	4a0f      	ldr	r2, [pc, #60]	; (253cc <net_if_up+0x6c>)
   25390:	480f      	ldr	r0, [pc, #60]	; (253d0 <net_if_up+0x70>)
   25392:	f018 fd82 	bl	3de9a <printk>
   25396:	480f      	ldr	r0, [pc, #60]	; (253d4 <net_if_up+0x74>)
   25398:	f018 fd7f 	bl	3de9a <printk>
   2539c:	f640 518f 	movw	r1, #3471	; 0xd8f
   253a0:	480a      	ldr	r0, [pc, #40]	; (253cc <net_if_up+0x6c>)
   253a2:	f018 fdcd 	bl	3df40 <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
   253a6:	4628      	mov	r0, r5
   253a8:	f7ff ffb4 	bl	25314 <net_if_flag_set.constprop.24>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   253ac:	4628      	mov	r0, r5
   253ae:	f018 ffd2 	bl	3e356 <l2_flags_get>
   253b2:	e7e1      	b.n	25378 <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   253b4:	6883      	ldr	r3, [r0, #8]
   253b6:	2b00      	cmp	r3, #0
   253b8:	d0e3      	beq.n	25382 <net_if_up+0x22>
	status = net_if_l2(iface)->enable(iface, true);
   253ba:	2101      	movs	r1, #1
   253bc:	4628      	mov	r0, r5
   253be:	4798      	blx	r3
	if (status < 0) {
   253c0:	2800      	cmp	r0, #0
   253c2:	dade      	bge.n	25382 <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   253c4:	bd38      	pop	{r3, r4, r5, pc}
   253c6:	bf00      	nop
   253c8:	00044d15 	.word	0x00044d15
   253cc:	00044d46 	.word	0x00044d46
   253d0:	00043278 	.word	0x00043278
   253d4:	00044d12 	.word	0x00044d12

000253d8 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   253d8:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   253da:	4c07      	ldr	r4, [pc, #28]	; (253f8 <net_if_init+0x20>)
   253dc:	4d07      	ldr	r5, [pc, #28]	; (253fc <net_if_init+0x24>)
   253de:	42ac      	cmp	r4, r5
   253e0:	d100      	bne.n	253e4 <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   253e2:	bd38      	pop	{r3, r4, r5, pc}
	return iface->if_dev->dev;
   253e4:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   253e6:	681b      	ldr	r3, [r3, #0]
   253e8:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   253ea:	b11b      	cbz	r3, 253f4 <net_if_init+0x1c>
   253ec:	681b      	ldr	r3, [r3, #0]
   253ee:	b10b      	cbz	r3, 253f4 <net_if_init+0x1c>
	api->init(iface);
   253f0:	4620      	mov	r0, r4
   253f2:	4798      	blx	r3
	     iface++, if_count++) {
   253f4:	3420      	adds	r4, #32
   253f6:	e7f2      	b.n	253de <net_if_init+0x6>
   253f8:	20032500 	.word	0x20032500
   253fc:	20032520 	.word	0x20032520

00025400 <net_if_post_init>:

void net_if_post_init(void)
{
   25400:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   25402:	4c07      	ldr	r4, [pc, #28]	; (25420 <net_if_post_init+0x20>)
   25404:	4d07      	ldr	r5, [pc, #28]	; (25424 <net_if_post_init+0x24>)
   25406:	42ac      	cmp	r4, r5
   25408:	d100      	bne.n	2540c <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   2540a:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   2540c:	2103      	movs	r1, #3
   2540e:	4620      	mov	r0, r4
   25410:	f7ff ff5c 	bl	252cc <net_if_flag_is_set>
   25414:	b910      	cbnz	r0, 2541c <net_if_post_init+0x1c>
			net_if_up(iface);
   25416:	4620      	mov	r0, r4
   25418:	f7ff ffa2 	bl	25360 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   2541c:	3420      	adds	r4, #32
   2541e:	e7f2      	b.n	25406 <net_if_post_init+0x6>
   25420:	20032500 	.word	0x20032500
   25424:	20032520 	.word	0x20032520

00025428 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   25428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2542c:	680f      	ldr	r7, [r1, #0]
	u8_t connect_flags = client->clean_session << 1;
   2542e:	f890 5078 	ldrb.w	r5, [r0, #120]	; 0x78
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   25432:	4b3b      	ldr	r3, [pc, #236]	; (25520 <connect_request_encode+0xf8>)
   25434:	4a3b      	ldr	r2, [pc, #236]	; (25524 <connect_request_encode+0xfc>)
{
   25436:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   25438:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2543c:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   2543e:	2804      	cmp	r0, #4
   25440:	bf0c      	ite	eq
   25442:	4610      	moveq	r0, r2
   25444:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   25446:	600f      	str	r7, [r1, #0]
{
   25448:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   2544a:	f019 f85b 	bl	3e504 <pack_utf8_str>
	u8_t connect_flags = client->clean_session << 1;
   2544e:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
   25452:	4603      	mov	r3, r0
   25454:	b938      	cbnz	r0, 25466 <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   25456:	e9d4 2000 	ldrd	r2, r0, [r4]
   2545a:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   2545c:	f896 1076 	ldrb.w	r1, [r6, #118]	; 0x76
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   25460:	d104      	bne.n	2546c <connect_request_encode+0x44>
		return -ENOMEM;
   25462:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   25466:	4618      	mov	r0, r3
   25468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   2546c:	1c50      	adds	r0, r2, #1
   2546e:	6020      	str	r0, [r4, #0]
   25470:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   25472:	e9d4 8200 	ldrd	r8, r2, [r4]
   25476:	4590      	cmp	r8, r2
   25478:	d0f3      	beq.n	25462 <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   2547a:	f108 0201 	add.w	r2, r8, #1
   2547e:	6022      	str	r2, [r4, #0]
   25480:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(client->keepalive, buf);
   25484:	4621      	mov	r1, r4
   25486:	f8b6 0074 	ldrh.w	r0, [r6, #116]	; 0x74
   2548a:	f019 f829 	bl	3e4e0 <pack_uint16>
	if (err_code != 0) {
   2548e:	4603      	mov	r3, r0
   25490:	2800      	cmp	r0, #0
   25492:	d1e8      	bne.n	25466 <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   25494:	f106 0044 	add.w	r0, r6, #68	; 0x44
   25498:	f019 f834 	bl	3e504 <pack_utf8_str>
	if (err_code != 0) {
   2549c:	4603      	mov	r3, r0
   2549e:	2800      	cmp	r0, #0
   254a0:	d1e1      	bne.n	25466 <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   254a2:	6db0      	ldr	r0, [r6, #88]	; 0x58
	u8_t connect_flags = client->clean_session << 1;
   254a4:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
   254a6:	b1d8      	cbz	r0, 254e0 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   254a8:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   254ac:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= client->will_retain << 5;
   254b0:	f003 0301 	and.w	r3, r3, #1
   254b4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   254b8:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   254ba:	4621      	mov	r1, r4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   254bc:	00db      	lsls	r3, r3, #3
   254be:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   254c2:	431d      	orrs	r5, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   254c4:	f019 f81e 	bl	3e504 <pack_utf8_str>
		if (err_code != 0) {
   254c8:	4603      	mov	r3, r0
   254ca:	2800      	cmp	r0, #0
   254cc:	d1cb      	bne.n	25466 <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   254ce:	6df3      	ldr	r3, [r6, #92]	; 0x5c
			err_code = pack_utf8_str(client->will_message, buf);
   254d0:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
   254d2:	b313      	cbz	r3, 2551a <connect_request_encode+0xf2>
			err_code = pack_utf8_str(client->will_message, buf);
   254d4:	4618      	mov	r0, r3
   254d6:	f019 f815 	bl	3e504 <pack_utf8_str>
			if (err_code != 0) {
   254da:	4603      	mov	r3, r0
   254dc:	2800      	cmp	r0, #0
   254de:	d1c2      	bne.n	25466 <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   254e0:	6d30      	ldr	r0, [r6, #80]	; 0x50
   254e2:	b138      	cbz	r0, 254f4 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   254e4:	4621      	mov	r1, r4
   254e6:	f019 f80d 	bl	3e504 <pack_utf8_str>
		if (err_code != 0) {
   254ea:	4603      	mov	r3, r0
   254ec:	2800      	cmp	r0, #0
   254ee:	d1ba      	bne.n	25466 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   254f0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
   254f4:	6d70      	ldr	r0, [r6, #84]	; 0x54
   254f6:	b138      	cbz	r0, 25508 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   254f8:	4621      	mov	r1, r4
   254fa:	f019 f803 	bl	3e504 <pack_utf8_str>
		if (err_code != 0) {
   254fe:	4603      	mov	r3, r0
   25500:	2800      	cmp	r0, #0
   25502:	d1b0      	bne.n	25466 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   25504:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
   25508:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   2550c:	4622      	mov	r2, r4
   2550e:	4639      	mov	r1, r7
}
   25510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   25514:	2010      	movs	r0, #16
   25516:	f019 b810 	b.w	3e53a <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   2551a:	f018 ffe1 	bl	3e4e0 <pack_uint16>
   2551e:	e7dc      	b.n	254da <connect_request_encode+0xb2>
   25520:	00042124 	.word	0x00042124
   25524:	0004212c 	.word	0x0004212c

00025528 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   25528:	e9d0 2300 	ldrd	r2, r3, [r0]
   2552c:	1a9b      	subs	r3, r3, r2
   2552e:	2b01      	cmp	r3, #1
   25530:	bf81      	itttt	hi
   25532:	4b05      	ldrhi	r3, [pc, #20]	; (25548 <disconnect_encode+0x20>)
   25534:	881b      	ldrhhi	r3, [r3, #0]
   25536:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   25538:	6803      	ldrhi	r3, [r0, #0]
   2553a:	bf83      	ittte	hi
   2553c:	3302      	addhi	r3, #2
   2553e:	6043      	strhi	r3, [r0, #4]

	return 0;
   25540:	2000      	movhi	r0, #0
		return -ENOMEM;
   25542:	f06f 000b 	mvnls.w	r0, #11
}
   25546:	4770      	bx	lr
   25548:	00044d70 	.word	0x00044d70

0002554c <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   2554c:	e9d0 2300 	ldrd	r2, r3, [r0]
   25550:	1a9b      	subs	r3, r3, r2
   25552:	2b01      	cmp	r3, #1
   25554:	bf81      	itttt	hi
   25556:	4b05      	ldrhi	r3, [pc, #20]	; (2556c <ping_request_encode+0x20>)
   25558:	881b      	ldrhhi	r3, [r3, #0]
   2555a:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   2555c:	6803      	ldrhi	r3, [r0, #0]
   2555e:	bf83      	ittte	hi
   25560:	3302      	addhi	r3, #2
   25562:	6043      	strhi	r3, [r0, #4]

	return 0;
   25564:	2000      	movhi	r0, #0
		return -ENOMEM;
   25566:	f06f 000b 	mvnls.w	r0, #11
}
   2556a:	4770      	bx	lr
   2556c:	00044d7c 	.word	0x00044d7c

00025570 <close>:
{
   25570:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   25572:	4c10      	ldr	r4, [pc, #64]	; (255b4 <close+0x44>)
{
   25574:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   25576:	6823      	ldr	r3, [r4, #0]
   25578:	b94b      	cbnz	r3, 2558e <close+0x1e>
   2557a:	490f      	ldr	r1, [pc, #60]	; (255b8 <close+0x48>)
   2557c:	480f      	ldr	r0, [pc, #60]	; (255bc <close+0x4c>)
   2557e:	2321      	movs	r3, #33	; 0x21
   25580:	4a0f      	ldr	r2, [pc, #60]	; (255c0 <close+0x50>)
   25582:	f018 fc8a 	bl	3de9a <printk>
   25586:	2121      	movs	r1, #33	; 0x21
   25588:	480d      	ldr	r0, [pc, #52]	; (255c0 <close+0x50>)
   2558a:	f018 fcd9 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   2558e:	6823      	ldr	r3, [r4, #0]
   25590:	685b      	ldr	r3, [r3, #4]
   25592:	b94b      	cbnz	r3, 255a8 <close+0x38>
   25594:	490b      	ldr	r1, [pc, #44]	; (255c4 <close+0x54>)
   25596:	4809      	ldr	r0, [pc, #36]	; (255bc <close+0x4c>)
   25598:	2322      	movs	r3, #34	; 0x22
   2559a:	4a09      	ldr	r2, [pc, #36]	; (255c0 <close+0x50>)
   2559c:	f018 fc7d 	bl	3de9a <printk>
   255a0:	2122      	movs	r1, #34	; 0x22
   255a2:	4807      	ldr	r0, [pc, #28]	; (255c0 <close+0x50>)
   255a4:	f018 fccc 	bl	3df40 <assert_post_action>
	return socket_ops->close(sock);
   255a8:	6823      	ldr	r3, [r4, #0]
   255aa:	4628      	mov	r0, r5
}
   255ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   255b0:	685b      	ldr	r3, [r3, #4]
   255b2:	4718      	bx	r3
   255b4:	2002389c 	.word	0x2002389c
   255b8:	000433f1 	.word	0x000433f1
   255bc:	00043278 	.word	0x00043278
   255c0:	000433c1 	.word	0x000433c1
   255c4:	00044d7e 	.word	0x00044d7e

000255c8 <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   255c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   255cc:	4c2d      	ldr	r4, [pc, #180]	; (25684 <mqtt_client_tcp_connect+0xbc>)
	const struct sockaddr *broker = client->broker;
   255ce:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
   255d0:	6823      	ldr	r3, [r4, #0]
{
   255d2:	4606      	mov	r6, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   255d4:	882f      	ldrh	r7, [r5, #0]
   255d6:	b94b      	cbnz	r3, 255ec <mqtt_client_tcp_connect+0x24>
   255d8:	492b      	ldr	r1, [pc, #172]	; (25688 <mqtt_client_tcp_connect+0xc0>)
   255da:	482c      	ldr	r0, [pc, #176]	; (2568c <mqtt_client_tcp_connect+0xc4>)
   255dc:	2319      	movs	r3, #25
   255de:	4a2c      	ldr	r2, [pc, #176]	; (25690 <mqtt_client_tcp_connect+0xc8>)
   255e0:	f018 fc5b 	bl	3de9a <printk>
   255e4:	2119      	movs	r1, #25
   255e6:	482a      	ldr	r0, [pc, #168]	; (25690 <mqtt_client_tcp_connect+0xc8>)
   255e8:	f018 fcaa 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   255ec:	6823      	ldr	r3, [r4, #0]
   255ee:	681b      	ldr	r3, [r3, #0]
   255f0:	b94b      	cbnz	r3, 25606 <mqtt_client_tcp_connect+0x3e>
   255f2:	4928      	ldr	r1, [pc, #160]	; (25694 <mqtt_client_tcp_connect+0xcc>)
   255f4:	4825      	ldr	r0, [pc, #148]	; (2568c <mqtt_client_tcp_connect+0xc4>)
   255f6:	231a      	movs	r3, #26
   255f8:	4a25      	ldr	r2, [pc, #148]	; (25690 <mqtt_client_tcp_connect+0xc8>)
   255fa:	f018 fc4e 	bl	3de9a <printk>
   255fe:	211a      	movs	r1, #26
   25600:	4823      	ldr	r0, [pc, #140]	; (25690 <mqtt_client_tcp_connect+0xc8>)
   25602:	f018 fc9d 	bl	3df40 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   25606:	6823      	ldr	r3, [r4, #0]
   25608:	4638      	mov	r0, r7
   2560a:	681b      	ldr	r3, [r3, #0]
   2560c:	2206      	movs	r2, #6
   2560e:	2101      	movs	r1, #1
   25610:	4798      	blx	r3
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   25612:	2800      	cmp	r0, #0
   25614:	4607      	mov	r7, r0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   25616:	62b0      	str	r0, [r6, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   25618:	da05      	bge.n	25626 <mqtt_client_tcp_connect+0x5e>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   2561a:	f018 fe8e 	bl	3e33a <__errno>
   2561e:	6800      	ldr	r0, [r0, #0]
   25620:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   25622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (broker->sa_family == AF_INET) {
   25626:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   25628:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
		peer_addr_size = sizeof(struct sockaddr_in);
   2562a:	2b01      	cmp	r3, #1
	__ASSERT_NO_MSG(socket_ops);
   2562c:	6823      	ldr	r3, [r4, #0]
   2562e:	bf14      	ite	ne
   25630:	f04f 0818 	movne.w	r8, #24
   25634:	f04f 0808 	moveq.w	r8, #8
   25638:	b94b      	cbnz	r3, 2564e <mqtt_client_tcp_connect+0x86>
   2563a:	4913      	ldr	r1, [pc, #76]	; (25688 <mqtt_client_tcp_connect+0xc0>)
   2563c:	4813      	ldr	r0, [pc, #76]	; (2568c <mqtt_client_tcp_connect+0xc4>)
   2563e:	2345      	movs	r3, #69	; 0x45
   25640:	4a13      	ldr	r2, [pc, #76]	; (25690 <mqtt_client_tcp_connect+0xc8>)
   25642:	f018 fc2a 	bl	3de9a <printk>
   25646:	2145      	movs	r1, #69	; 0x45
   25648:	4811      	ldr	r0, [pc, #68]	; (25690 <mqtt_client_tcp_connect+0xc8>)
   2564a:	f018 fc79 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   2564e:	6823      	ldr	r3, [r4, #0]
   25650:	695b      	ldr	r3, [r3, #20]
   25652:	b94b      	cbnz	r3, 25668 <mqtt_client_tcp_connect+0xa0>
   25654:	4910      	ldr	r1, [pc, #64]	; (25698 <mqtt_client_tcp_connect+0xd0>)
   25656:	480d      	ldr	r0, [pc, #52]	; (2568c <mqtt_client_tcp_connect+0xc4>)
   25658:	2346      	movs	r3, #70	; 0x46
   2565a:	4a0d      	ldr	r2, [pc, #52]	; (25690 <mqtt_client_tcp_connect+0xc8>)
   2565c:	f018 fc1d 	bl	3de9a <printk>
   25660:	2146      	movs	r1, #70	; 0x46
   25662:	480b      	ldr	r0, [pc, #44]	; (25690 <mqtt_client_tcp_connect+0xc8>)
   25664:	f018 fc6c 	bl	3df40 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   25668:	6823      	ldr	r3, [r4, #0]
   2566a:	4642      	mov	r2, r8
   2566c:	695b      	ldr	r3, [r3, #20]
   2566e:	4629      	mov	r1, r5
   25670:	4638      	mov	r0, r7
   25672:	4798      	blx	r3
	if (ret < 0) {
   25674:	2800      	cmp	r0, #0
   25676:	da03      	bge.n	25680 <mqtt_client_tcp_connect+0xb8>
		(void)close(client->transport.tcp.sock);
   25678:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   2567a:	f7ff ff79 	bl	25570 <close>
   2567e:	e7cc      	b.n	2561a <mqtt_client_tcp_connect+0x52>
	return 0;
   25680:	2000      	movs	r0, #0
   25682:	e7ce      	b.n	25622 <mqtt_client_tcp_connect+0x5a>
   25684:	2002389c 	.word	0x2002389c
   25688:	000433f1 	.word	0x000433f1
   2568c:	00043278 	.word	0x00043278
   25690:	000433c1 	.word	0x000433c1
   25694:	00044d90 	.word	0x00044d90
   25698:	00044da3 	.word	0x00044da3

0002569c <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   2569c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   256a0:	4680      	mov	r8, r0
   256a2:	4689      	mov	r9, r1
   256a4:	4617      	mov	r7, r2
	u32_t offset = 0U;
   256a6:	2400      	movs	r4, #0
}

static inline ssize_t send(int sock, const void *buf, size_t len,
			   int flags)
{
	__ASSERT_NO_MSG(socket_ops);
   256a8:	4d1d      	ldr	r5, [pc, #116]	; (25720 <mqtt_client_tcp_write+0x84>)
	int ret;

	while (offset < datalen) {
   256aa:	42bc      	cmp	r4, r7
   256ac:	d301      	bcc.n	256b2 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   256ae:	2000      	movs	r0, #0
   256b0:	e031      	b.n	25716 <mqtt_client_tcp_write+0x7a>
		ret = send(client->transport.tcp.sock, data + offset,
   256b2:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   256b6:	eb09 0a04 	add.w	sl, r9, r4
   256ba:	461e      	mov	r6, r3
   256bc:	4b19      	ldr	r3, [pc, #100]	; (25724 <mqtt_client_tcp_write+0x88>)
   256be:	eba7 0b04 	sub.w	fp, r7, r4
   256c2:	681b      	ldr	r3, [r3, #0]
   256c4:	b94b      	cbnz	r3, 256da <mqtt_client_tcp_write+0x3e>
   256c6:	4918      	ldr	r1, [pc, #96]	; (25728 <mqtt_client_tcp_write+0x8c>)
   256c8:	4818      	ldr	r0, [pc, #96]	; (2572c <mqtt_client_tcp_write+0x90>)
   256ca:	237e      	movs	r3, #126	; 0x7e
   256cc:	462a      	mov	r2, r5
   256ce:	f018 fbe4 	bl	3de9a <printk>
   256d2:	217e      	movs	r1, #126	; 0x7e
   256d4:	4628      	mov	r0, r5
   256d6:	f018 fc33 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   256da:	4b12      	ldr	r3, [pc, #72]	; (25724 <mqtt_client_tcp_write+0x88>)
   256dc:	681b      	ldr	r3, [r3, #0]
   256de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   256e0:	b94b      	cbnz	r3, 256f6 <mqtt_client_tcp_write+0x5a>
   256e2:	4913      	ldr	r1, [pc, #76]	; (25730 <mqtt_client_tcp_write+0x94>)
   256e4:	4811      	ldr	r0, [pc, #68]	; (2572c <mqtt_client_tcp_write+0x90>)
   256e6:	237f      	movs	r3, #127	; 0x7f
   256e8:	462a      	mov	r2, r5
   256ea:	f018 fbd6 	bl	3de9a <printk>
   256ee:	217f      	movs	r1, #127	; 0x7f
   256f0:	4628      	mov	r0, r5
   256f2:	f018 fc25 	bl	3df40 <assert_post_action>

	return socket_ops->send(sock, buf, len, flags);
   256f6:	4b0b      	ldr	r3, [pc, #44]	; (25724 <mqtt_client_tcp_write+0x88>)
   256f8:	4630      	mov	r0, r6
   256fa:	681b      	ldr	r3, [r3, #0]
   256fc:	465a      	mov	r2, fp
   256fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   25700:	4651      	mov	r1, sl
   25702:	469c      	mov	ip, r3
   25704:	2300      	movs	r3, #0
   25706:	4666      	mov	r6, ip
   25708:	47b0      	blx	r6
		if (ret < 0) {
   2570a:	2800      	cmp	r0, #0
   2570c:	da05      	bge.n	2571a <mqtt_client_tcp_write+0x7e>
			return -errno;
   2570e:	f018 fe14 	bl	3e33a <__errno>
   25712:	6800      	ldr	r0, [r0, #0]
   25714:	4240      	negs	r0, r0
}
   25716:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += ret;
   2571a:	4404      	add	r4, r0
   2571c:	e7c5      	b.n	256aa <mqtt_client_tcp_write+0xe>
   2571e:	bf00      	nop
   25720:	000433c1 	.word	0x000433c1
   25724:	2002389c 	.word	0x2002389c
   25728:	000433f1 	.word	0x000433f1
   2572c:	00043278 	.word	0x00043278
   25730:	00044dc8 	.word	0x00044dc8

00025734 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   25734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   25738:	4c18      	ldr	r4, [pc, #96]	; (2579c <mqtt_client_tcp_read+0x68>)
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= MSG_DONTWAIT;
   2573a:	2b00      	cmp	r3, #0
   2573c:	6823      	ldr	r3, [r4, #0]
{
   2573e:	460e      	mov	r6, r1
   25740:	4617      	mov	r7, r2
		flags |= MSG_DONTWAIT;
   25742:	bf14      	ite	ne
   25744:	f04f 0800 	movne.w	r8, #0
   25748:	f04f 0840 	moveq.w	r8, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   2574c:	6a85      	ldr	r5, [r0, #40]	; 0x28
   2574e:	b94b      	cbnz	r3, 25764 <mqtt_client_tcp_read+0x30>
   25750:	4913      	ldr	r1, [pc, #76]	; (257a0 <mqtt_client_tcp_read+0x6c>)
   25752:	4814      	ldr	r0, [pc, #80]	; (257a4 <mqtt_client_tcp_read+0x70>)
   25754:	2369      	movs	r3, #105	; 0x69
   25756:	4a14      	ldr	r2, [pc, #80]	; (257a8 <mqtt_client_tcp_read+0x74>)
   25758:	f018 fb9f 	bl	3de9a <printk>
   2575c:	2169      	movs	r1, #105	; 0x69
   2575e:	4812      	ldr	r0, [pc, #72]	; (257a8 <mqtt_client_tcp_read+0x74>)
   25760:	f018 fbee 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   25764:	6823      	ldr	r3, [r4, #0]
   25766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   25768:	b94b      	cbnz	r3, 2577e <mqtt_client_tcp_read+0x4a>
   2576a:	4910      	ldr	r1, [pc, #64]	; (257ac <mqtt_client_tcp_read+0x78>)
   2576c:	480d      	ldr	r0, [pc, #52]	; (257a4 <mqtt_client_tcp_read+0x70>)
   2576e:	236a      	movs	r3, #106	; 0x6a
   25770:	4a0d      	ldr	r2, [pc, #52]	; (257a8 <mqtt_client_tcp_read+0x74>)
   25772:	f018 fb92 	bl	3de9a <printk>
   25776:	216a      	movs	r1, #106	; 0x6a
   25778:	480b      	ldr	r0, [pc, #44]	; (257a8 <mqtt_client_tcp_read+0x74>)
   2577a:	f018 fbe1 	bl	3df40 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   2577e:	6823      	ldr	r3, [r4, #0]
   25780:	463a      	mov	r2, r7
   25782:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   25784:	4631      	mov	r1, r6
   25786:	4643      	mov	r3, r8
   25788:	4628      	mov	r0, r5
   2578a:	47a0      	blx	r4
	if (ret < 0) {
   2578c:	2800      	cmp	r0, #0
   2578e:	da03      	bge.n	25798 <mqtt_client_tcp_read+0x64>
		return -errno;
   25790:	f018 fdd3 	bl	3e33a <__errno>
   25794:	6800      	ldr	r0, [r0, #0]
   25796:	4240      	negs	r0, r0
	}

	return ret;
}
   25798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2579c:	2002389c 	.word	0x2002389c
   257a0:	000433f1 	.word	0x000433f1
   257a4:	00043278 	.word	0x00043278
   257a8:	000433c1 	.word	0x000433c1
   257ac:	00044db7 	.word	0x00044db7

000257b0 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   257b0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   257b4:	4a01      	ldr	r2, [pc, #4]	; (257bc <mqtt_transport_connect+0xc>)
   257b6:	011b      	lsls	r3, r3, #4
   257b8:	58d3      	ldr	r3, [r2, r3]
   257ba:	4718      	bx	r3
   257bc:	00042134 	.word	0x00042134

000257c0 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const u8_t *data,
			 u32_t datalen)
{
   257c0:	b410      	push	{r4}
	return transport_fn[client->transport.type].write(client, data,
   257c2:	4b04      	ldr	r3, [pc, #16]	; (257d4 <mqtt_transport_write+0x14>)
   257c4:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   257c8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   257cc:	685b      	ldr	r3, [r3, #4]
							  datalen);
}
   257ce:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write(client, data,
   257d2:	4718      	bx	r3
   257d4:	00042134 	.word	0x00042134

000257d8 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			bool shall_block)
{
   257d8:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].read(client, data, buflen,
   257da:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
   257de:	4c03      	ldr	r4, [pc, #12]	; (257ec <mqtt_transport_read+0x14>)
   257e0:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   257e4:	68a4      	ldr	r4, [r4, #8]
   257e6:	46a4      	mov	ip, r4
							 shall_block);
}
   257e8:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].read(client, data, buflen,
   257ea:	4760      	bx	ip
   257ec:	00042134 	.word	0x00042134

000257f0 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   257f0:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   257f4:	4b02      	ldr	r3, [pc, #8]	; (25800 <mqtt_transport_disconnect+0x10>)
   257f6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   257fa:	68db      	ldr	r3, [r3, #12]
   257fc:	4718      	bx	r3
   257fe:	bf00      	nop
   25800:	00042134 	.word	0x00042134

00025804 <mqtt_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   25804:	68c2      	ldr	r2, [r0, #12]
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   25806:	b510      	push	{r4, lr}
   25808:	b142      	cbz	r2, 2581c <mqtt_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   2580a:	4b0f      	ldr	r3, [pc, #60]	; (25848 <mqtt_mutex_unlock+0x44>)
   2580c:	6882      	ldr	r2, [r0, #8]
   2580e:	689b      	ldr	r3, [r3, #8]
   25810:	429a      	cmp	r2, r3
   25812:	d115      	bne.n	25840 <mqtt_mutex_unlock+0x3c>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
	(void)ret;
}
   25814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_unlock(mutex);
   25818:	f013 b994 	b.w	38b44 <z_impl_k_mutex_unlock>
		return -EINVAL;
   2581c:	f06f 0415 	mvn.w	r4, #21
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   25820:	2343      	movs	r3, #67	; 0x43
   25822:	4a0a      	ldr	r2, [pc, #40]	; (2584c <mqtt_mutex_unlock+0x48>)
   25824:	490a      	ldr	r1, [pc, #40]	; (25850 <mqtt_mutex_unlock+0x4c>)
   25826:	480b      	ldr	r0, [pc, #44]	; (25854 <mqtt_mutex_unlock+0x50>)
   25828:	f018 fb37 	bl	3de9a <printk>
   2582c:	4621      	mov	r1, r4
   2582e:	480a      	ldr	r0, [pc, #40]	; (25858 <mqtt_mutex_unlock+0x54>)
   25830:	f018 fb33 	bl	3de9a <printk>
}
   25834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   25838:	2143      	movs	r1, #67	; 0x43
   2583a:	4804      	ldr	r0, [pc, #16]	; (2584c <mqtt_mutex_unlock+0x48>)
   2583c:	f018 bb80 	b.w	3df40 <assert_post_action>
		return -EPERM;
   25840:	f04f 34ff 	mov.w	r4, #4294967295
   25844:	e7ec      	b.n	25820 <mqtt_mutex_unlock+0x1c>
   25846:	bf00      	nop
   25848:	2002926c 	.word	0x2002926c
   2584c:	00044df9 	.word	0x00044df9
   25850:	00044e2a 	.word	0x00044e2a
   25854:	00043278 	.word	0x00043278
   25858:	00044e33 	.word	0x00044e33

0002585c <mqtt_mutex_lock>:
{
   2585c:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   2585e:	f04f 31ff 	mov.w	r1, #4294967295
   25862:	f013 f891 	bl	38988 <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   25866:	4604      	mov	r4, r0
   25868:	b178      	cbz	r0, 2588a <mqtt_mutex_lock+0x2e>
   2586a:	2339      	movs	r3, #57	; 0x39
   2586c:	4a07      	ldr	r2, [pc, #28]	; (2588c <mqtt_mutex_lock+0x30>)
   2586e:	4908      	ldr	r1, [pc, #32]	; (25890 <mqtt_mutex_lock+0x34>)
   25870:	4808      	ldr	r0, [pc, #32]	; (25894 <mqtt_mutex_lock+0x38>)
   25872:	f018 fb12 	bl	3de9a <printk>
   25876:	4621      	mov	r1, r4
   25878:	4807      	ldr	r0, [pc, #28]	; (25898 <mqtt_mutex_lock+0x3c>)
   2587a:	f018 fb0e 	bl	3de9a <printk>
}
   2587e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   25882:	2139      	movs	r1, #57	; 0x39
   25884:	4801      	ldr	r0, [pc, #4]	; (2588c <mqtt_mutex_lock+0x30>)
   25886:	f018 bb5b 	b.w	3df40 <assert_post_action>
}
   2588a:	bd10      	pop	{r4, pc}
   2588c:	00044df9 	.word	0x00044df9
   25890:	00044e2a 	.word	0x00044e2a
   25894:	00043278 	.word	0x00043278
   25898:	00044dd9 	.word	0x00044dd9

0002589c <close>:
{
   2589c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   2589e:	4c10      	ldr	r4, [pc, #64]	; (258e0 <close+0x44>)
{
   258a0:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   258a2:	6823      	ldr	r3, [r4, #0]
   258a4:	b94b      	cbnz	r3, 258ba <close+0x1e>
   258a6:	490f      	ldr	r1, [pc, #60]	; (258e4 <close+0x48>)
   258a8:	480f      	ldr	r0, [pc, #60]	; (258e8 <close+0x4c>)
   258aa:	2321      	movs	r3, #33	; 0x21
   258ac:	4a0f      	ldr	r2, [pc, #60]	; (258ec <close+0x50>)
   258ae:	f018 faf4 	bl	3de9a <printk>
   258b2:	2121      	movs	r1, #33	; 0x21
   258b4:	480d      	ldr	r0, [pc, #52]	; (258ec <close+0x50>)
   258b6:	f018 fb43 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   258ba:	6823      	ldr	r3, [r4, #0]
   258bc:	685b      	ldr	r3, [r3, #4]
   258be:	b94b      	cbnz	r3, 258d4 <close+0x38>
   258c0:	490b      	ldr	r1, [pc, #44]	; (258f0 <close+0x54>)
   258c2:	4809      	ldr	r0, [pc, #36]	; (258e8 <close+0x4c>)
   258c4:	2322      	movs	r3, #34	; 0x22
   258c6:	4a09      	ldr	r2, [pc, #36]	; (258ec <close+0x50>)
   258c8:	f018 fae7 	bl	3de9a <printk>
   258cc:	2122      	movs	r1, #34	; 0x22
   258ce:	4807      	ldr	r0, [pc, #28]	; (258ec <close+0x50>)
   258d0:	f018 fb36 	bl	3df40 <assert_post_action>
	return socket_ops->close(sock);
   258d4:	6823      	ldr	r3, [r4, #0]
   258d6:	4628      	mov	r0, r5
}
   258d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   258dc:	685b      	ldr	r3, [r3, #4]
   258de:	4718      	bx	r3
   258e0:	2002389c 	.word	0x2002389c
   258e4:	000433f1 	.word	0x000433f1
   258e8:	00043278 	.word	0x00043278
   258ec:	000433c1 	.word	0x000433c1
   258f0:	00044d7e 	.word	0x00044d7e

000258f4 <setsockopt.constprop.1>:
static inline int setsockopt(int sock, int level, int optname,
   258f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   258f8:	4c15      	ldr	r4, [pc, #84]	; (25950 <setsockopt.constprop.1+0x5c>)
static inline int setsockopt(int sock, int level, int optname,
   258fa:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   258fc:	6823      	ldr	r3, [r4, #0]
static inline int setsockopt(int sock, int level, int optname,
   258fe:	4605      	mov	r5, r0
   25900:	460e      	mov	r6, r1
   25902:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   25904:	b94b      	cbnz	r3, 2591a <setsockopt.constprop.1+0x26>
   25906:	4913      	ldr	r1, [pc, #76]	; (25954 <setsockopt.constprop.1+0x60>)
   25908:	4813      	ldr	r0, [pc, #76]	; (25958 <setsockopt.constprop.1+0x64>)
   2590a:	2357      	movs	r3, #87	; 0x57
   2590c:	4a13      	ldr	r2, [pc, #76]	; (2595c <setsockopt.constprop.1+0x68>)
   2590e:	f018 fac4 	bl	3de9a <printk>
   25912:	2157      	movs	r1, #87	; 0x57
   25914:	4811      	ldr	r0, [pc, #68]	; (2595c <setsockopt.constprop.1+0x68>)
   25916:	f018 fb13 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   2591a:	6823      	ldr	r3, [r4, #0]
   2591c:	69db      	ldr	r3, [r3, #28]
   2591e:	b94b      	cbnz	r3, 25934 <setsockopt.constprop.1+0x40>
   25920:	490f      	ldr	r1, [pc, #60]	; (25960 <setsockopt.constprop.1+0x6c>)
   25922:	480d      	ldr	r0, [pc, #52]	; (25958 <setsockopt.constprop.1+0x64>)
   25924:	2358      	movs	r3, #88	; 0x58
   25926:	4a0d      	ldr	r2, [pc, #52]	; (2595c <setsockopt.constprop.1+0x68>)
   25928:	f018 fab7 	bl	3de9a <printk>
   2592c:	2158      	movs	r1, #88	; 0x58
   2592e:	480b      	ldr	r0, [pc, #44]	; (2595c <setsockopt.constprop.1+0x68>)
   25930:	f018 fb06 	bl	3df40 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   25934:	6823      	ldr	r3, [r4, #0]
   25936:	f8cd 8000 	str.w	r8, [sp]
   2593a:	69dc      	ldr	r4, [r3, #28]
   2593c:	4632      	mov	r2, r6
   2593e:	463b      	mov	r3, r7
   25940:	f44f 718d 	mov.w	r1, #282	; 0x11a
   25944:	4628      	mov	r0, r5
   25946:	47a0      	blx	r4
}
   25948:	b002      	add	sp, #8
   2594a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2594e:	bf00      	nop
   25950:	2002389c 	.word	0x2002389c
   25954:	000433f1 	.word	0x000433f1
   25958:	00043278 	.word	0x00043278
   2595c:	000433c1 	.word	0x000433c1
   25960:	00044e55 	.word	0x00044e55

00025964 <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   25964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   25968:	4d48      	ldr	r5, [pc, #288]	; (25a8c <mqtt_client_tls_connect+0x128>)
	const struct sockaddr *broker = client->broker;
   2596a:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
   2596c:	682b      	ldr	r3, [r5, #0]
{
   2596e:	4604      	mov	r4, r0
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int ret;

	client->transport.tls.sock = socket(broker->sa_family,
   25970:	883e      	ldrh	r6, [r7, #0]
   25972:	b94b      	cbnz	r3, 25988 <mqtt_client_tls_connect+0x24>
   25974:	4946      	ldr	r1, [pc, #280]	; (25a90 <mqtt_client_tls_connect+0x12c>)
   25976:	4847      	ldr	r0, [pc, #284]	; (25a94 <mqtt_client_tls_connect+0x130>)
   25978:	2319      	movs	r3, #25
   2597a:	4a47      	ldr	r2, [pc, #284]	; (25a98 <mqtt_client_tls_connect+0x134>)
   2597c:	f018 fa8d 	bl	3de9a <printk>
   25980:	2119      	movs	r1, #25
   25982:	4845      	ldr	r0, [pc, #276]	; (25a98 <mqtt_client_tls_connect+0x134>)
   25984:	f018 fadc 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   25988:	682b      	ldr	r3, [r5, #0]
   2598a:	681b      	ldr	r3, [r3, #0]
   2598c:	b94b      	cbnz	r3, 259a2 <mqtt_client_tls_connect+0x3e>
   2598e:	4943      	ldr	r1, [pc, #268]	; (25a9c <mqtt_client_tls_connect+0x138>)
   25990:	4840      	ldr	r0, [pc, #256]	; (25a94 <mqtt_client_tls_connect+0x130>)
   25992:	231a      	movs	r3, #26
   25994:	4a40      	ldr	r2, [pc, #256]	; (25a98 <mqtt_client_tls_connect+0x134>)
   25996:	f018 fa80 	bl	3de9a <printk>
   2599a:	211a      	movs	r1, #26
   2599c:	483e      	ldr	r0, [pc, #248]	; (25a98 <mqtt_client_tls_connect+0x134>)
   2599e:	f018 facf 	bl	3df40 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   259a2:	682b      	ldr	r3, [r5, #0]
   259a4:	f44f 7281 	mov.w	r2, #258	; 0x102
   259a8:	681b      	ldr	r3, [r3, #0]
   259aa:	2101      	movs	r1, #1
   259ac:	4630      	mov	r0, r6
   259ae:	4798      	blx	r3
					    SOCK_STREAM, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   259b0:	2800      	cmp	r0, #0
	client->transport.tls.sock = socket(broker->sa_family,
   259b2:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   259b4:	da05      	bge.n	259c2 <mqtt_client_tls_connect+0x5e>
	MQTT_TRC("Connect completed");
	return 0;

error:
	(void)close(client->transport.tls.sock);
	return -errno;
   259b6:	f018 fcc0 	bl	3e33a <__errno>
   259ba:	6800      	ldr	r0, [r0, #0]
   259bc:	4240      	negs	r0, r0
}
   259be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = setsockopt(client->transport.tls.sock, SOL_TLS, TLS_PEER_VERIFY,
   259c2:	2304      	movs	r3, #4
   259c4:	f104 022c 	add.w	r2, r4, #44	; 0x2c
   259c8:	2105      	movs	r1, #5
   259ca:	f7ff ff93 	bl	258f4 <setsockopt.constprop.1>
	if (ret < 0) {
   259ce:	2800      	cmp	r0, #0
   259d0:	da03      	bge.n	259da <mqtt_client_tls_connect+0x76>
	(void)close(client->transport.tls.sock);
   259d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   259d4:	f7ff ff62 	bl	2589c <close>
   259d8:	e7ed      	b.n	259b6 <mqtt_client_tls_connect+0x52>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   259da:	6b62      	ldr	r2, [r4, #52]	; 0x34
   259dc:	2a00      	cmp	r2, #0
   259de:	d131      	bne.n	25a44 <mqtt_client_tls_connect+0xe0>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   259e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   259e2:	2a00      	cmp	r2, #0
   259e4:	d139      	bne.n	25a5a <mqtt_client_tls_connect+0xf6>
	if (tls_config->hostname) {
   259e6:	6c26      	ldr	r6, [r4, #64]	; 0x40
   259e8:	2e00      	cmp	r6, #0
   259ea:	d141      	bne.n	25a70 <mqtt_client_tls_connect+0x10c>
	if (broker->sa_family == AF_INET) {
   259ec:	883b      	ldrh	r3, [r7, #0]
	ret = connect(client->transport.tls.sock, client->broker,
   259ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   259f0:	2b01      	cmp	r3, #1
	__ASSERT_NO_MSG(socket_ops);
   259f2:	682b      	ldr	r3, [r5, #0]
   259f4:	bf0c      	ite	eq
   259f6:	f04f 0808 	moveq.w	r8, #8
   259fa:	f04f 0818 	movne.w	r8, #24
	ret = connect(client->transport.tls.sock, client->broker,
   259fe:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
   25a00:	b94b      	cbnz	r3, 25a16 <mqtt_client_tls_connect+0xb2>
   25a02:	4923      	ldr	r1, [pc, #140]	; (25a90 <mqtt_client_tls_connect+0x12c>)
   25a04:	4823      	ldr	r0, [pc, #140]	; (25a94 <mqtt_client_tls_connect+0x130>)
   25a06:	2345      	movs	r3, #69	; 0x45
   25a08:	4a23      	ldr	r2, [pc, #140]	; (25a98 <mqtt_client_tls_connect+0x134>)
   25a0a:	f018 fa46 	bl	3de9a <printk>
   25a0e:	2145      	movs	r1, #69	; 0x45
   25a10:	4821      	ldr	r0, [pc, #132]	; (25a98 <mqtt_client_tls_connect+0x134>)
   25a12:	f018 fa95 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   25a16:	682b      	ldr	r3, [r5, #0]
   25a18:	695b      	ldr	r3, [r3, #20]
   25a1a:	b94b      	cbnz	r3, 25a30 <mqtt_client_tls_connect+0xcc>
   25a1c:	4920      	ldr	r1, [pc, #128]	; (25aa0 <mqtt_client_tls_connect+0x13c>)
   25a1e:	481d      	ldr	r0, [pc, #116]	; (25a94 <mqtt_client_tls_connect+0x130>)
   25a20:	2346      	movs	r3, #70	; 0x46
   25a22:	4a1d      	ldr	r2, [pc, #116]	; (25a98 <mqtt_client_tls_connect+0x134>)
   25a24:	f018 fa39 	bl	3de9a <printk>
   25a28:	2146      	movs	r1, #70	; 0x46
   25a2a:	481b      	ldr	r0, [pc, #108]	; (25a98 <mqtt_client_tls_connect+0x134>)
   25a2c:	f018 fa88 	bl	3df40 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   25a30:	682b      	ldr	r3, [r5, #0]
   25a32:	4642      	mov	r2, r8
   25a34:	695b      	ldr	r3, [r3, #20]
   25a36:	4639      	mov	r1, r7
   25a38:	4630      	mov	r0, r6
   25a3a:	4798      	blx	r3
	if (ret < 0) {
   25a3c:	2800      	cmp	r0, #0
   25a3e:	dbc8      	blt.n	259d2 <mqtt_client_tls_connect+0x6e>
	return 0;
   25a40:	2000      	movs	r0, #0
   25a42:	e7bc      	b.n	259be <mqtt_client_tls_connect+0x5a>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   25a44:	6b23      	ldr	r3, [r4, #48]	; 0x30
   25a46:	2b00      	cmp	r3, #0
   25a48:	d0ca      	beq.n	259e0 <mqtt_client_tls_connect+0x7c>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   25a4a:	009b      	lsls	r3, r3, #2
   25a4c:	2103      	movs	r1, #3
   25a4e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   25a50:	f7ff ff50 	bl	258f4 <setsockopt.constprop.1>
		if (ret < 0) {
   25a54:	2800      	cmp	r0, #0
   25a56:	dac3      	bge.n	259e0 <mqtt_client_tls_connect+0x7c>
   25a58:	e7bb      	b.n	259d2 <mqtt_client_tls_connect+0x6e>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   25a5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   25a5c:	2b00      	cmp	r3, #0
   25a5e:	d0c2      	beq.n	259e6 <mqtt_client_tls_connect+0x82>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   25a60:	009b      	lsls	r3, r3, #2
   25a62:	2101      	movs	r1, #1
   25a64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   25a66:	f7ff ff45 	bl	258f4 <setsockopt.constprop.1>
		if (ret < 0) {
   25a6a:	2800      	cmp	r0, #0
   25a6c:	dabb      	bge.n	259e6 <mqtt_client_tls_connect+0x82>
   25a6e:	e7b0      	b.n	259d2 <mqtt_client_tls_connect+0x6e>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   25a70:	4630      	mov	r0, r6
   25a72:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
   25a76:	f7f7 fb55 	bl	1d124 <strlen>
   25a7a:	4632      	mov	r2, r6
   25a7c:	4603      	mov	r3, r0
   25a7e:	2102      	movs	r1, #2
   25a80:	4640      	mov	r0, r8
   25a82:	f7ff ff37 	bl	258f4 <setsockopt.constprop.1>
		if (ret < 0) {
   25a86:	2800      	cmp	r0, #0
   25a88:	dab0      	bge.n	259ec <mqtt_client_tls_connect+0x88>
   25a8a:	e7a2      	b.n	259d2 <mqtt_client_tls_connect+0x6e>
   25a8c:	2002389c 	.word	0x2002389c
   25a90:	000433f1 	.word	0x000433f1
   25a94:	00043278 	.word	0x00043278
   25a98:	000433c1 	.word	0x000433c1
   25a9c:	00044d90 	.word	0x00044d90
   25aa0:	00044da3 	.word	0x00044da3

00025aa4 <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   25aa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25aa8:	4680      	mov	r8, r0
   25aaa:	4689      	mov	r9, r1
   25aac:	4617      	mov	r7, r2
	u32_t offset = 0U;
   25aae:	2400      	movs	r4, #0
	__ASSERT_NO_MSG(socket_ops);
   25ab0:	4d1d      	ldr	r5, [pc, #116]	; (25b28 <mqtt_client_tls_write+0x84>)
	int ret;

	while (offset < datalen) {
   25ab2:	42bc      	cmp	r4, r7
   25ab4:	d301      	bcc.n	25aba <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   25ab6:	2000      	movs	r0, #0
   25ab8:	e031      	b.n	25b1e <mqtt_client_tls_write+0x7a>
		ret = send(client->transport.tls.sock, data + offset,
   25aba:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   25abe:	eb09 0a04 	add.w	sl, r9, r4
   25ac2:	461e      	mov	r6, r3
   25ac4:	4b19      	ldr	r3, [pc, #100]	; (25b2c <mqtt_client_tls_write+0x88>)
   25ac6:	eba7 0b04 	sub.w	fp, r7, r4
   25aca:	681b      	ldr	r3, [r3, #0]
   25acc:	b94b      	cbnz	r3, 25ae2 <mqtt_client_tls_write+0x3e>
   25ace:	4918      	ldr	r1, [pc, #96]	; (25b30 <mqtt_client_tls_write+0x8c>)
   25ad0:	4818      	ldr	r0, [pc, #96]	; (25b34 <mqtt_client_tls_write+0x90>)
   25ad2:	237e      	movs	r3, #126	; 0x7e
   25ad4:	462a      	mov	r2, r5
   25ad6:	f018 f9e0 	bl	3de9a <printk>
   25ada:	217e      	movs	r1, #126	; 0x7e
   25adc:	4628      	mov	r0, r5
   25ade:	f018 fa2f 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   25ae2:	4b12      	ldr	r3, [pc, #72]	; (25b2c <mqtt_client_tls_write+0x88>)
   25ae4:	681b      	ldr	r3, [r3, #0]
   25ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   25ae8:	b94b      	cbnz	r3, 25afe <mqtt_client_tls_write+0x5a>
   25aea:	4913      	ldr	r1, [pc, #76]	; (25b38 <mqtt_client_tls_write+0x94>)
   25aec:	4811      	ldr	r0, [pc, #68]	; (25b34 <mqtt_client_tls_write+0x90>)
   25aee:	237f      	movs	r3, #127	; 0x7f
   25af0:	462a      	mov	r2, r5
   25af2:	f018 f9d2 	bl	3de9a <printk>
   25af6:	217f      	movs	r1, #127	; 0x7f
   25af8:	4628      	mov	r0, r5
   25afa:	f018 fa21 	bl	3df40 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   25afe:	4b0b      	ldr	r3, [pc, #44]	; (25b2c <mqtt_client_tls_write+0x88>)
   25b00:	4630      	mov	r0, r6
   25b02:	681b      	ldr	r3, [r3, #0]
   25b04:	465a      	mov	r2, fp
   25b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   25b08:	4651      	mov	r1, sl
   25b0a:	469c      	mov	ip, r3
   25b0c:	2300      	movs	r3, #0
   25b0e:	4666      	mov	r6, ip
   25b10:	47b0      	blx	r6
		if (ret < 0) {
   25b12:	2800      	cmp	r0, #0
   25b14:	da05      	bge.n	25b22 <mqtt_client_tls_write+0x7e>
			return -errno;
   25b16:	f018 fc10 	bl	3e33a <__errno>
   25b1a:	6800      	ldr	r0, [r0, #0]
   25b1c:	4240      	negs	r0, r0
}
   25b1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += ret;
   25b22:	4404      	add	r4, r0
   25b24:	e7c5      	b.n	25ab2 <mqtt_client_tls_write+0xe>
   25b26:	bf00      	nop
   25b28:	000433c1 	.word	0x000433c1
   25b2c:	2002389c 	.word	0x2002389c
   25b30:	000433f1 	.word	0x000433f1
   25b34:	00043278 	.word	0x00043278
   25b38:	00044dc8 	.word	0x00044dc8

00025b3c <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   25b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   25b40:	4c18      	ldr	r4, [pc, #96]	; (25ba4 <mqtt_client_tls_read+0x68>)
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= MSG_DONTWAIT;
   25b42:	2b00      	cmp	r3, #0
   25b44:	6823      	ldr	r3, [r4, #0]
{
   25b46:	460e      	mov	r6, r1
   25b48:	4617      	mov	r7, r2
		flags |= MSG_DONTWAIT;
   25b4a:	bf14      	ite	ne
   25b4c:	f04f 0800 	movne.w	r8, #0
   25b50:	f04f 0840 	moveq.w	r8, #64	; 0x40
	}

	ret = recv(client->transport.tls.sock, data, buflen, flags);
   25b54:	6a85      	ldr	r5, [r0, #40]	; 0x28
   25b56:	b94b      	cbnz	r3, 25b6c <mqtt_client_tls_read+0x30>
   25b58:	4913      	ldr	r1, [pc, #76]	; (25ba8 <mqtt_client_tls_read+0x6c>)
   25b5a:	4814      	ldr	r0, [pc, #80]	; (25bac <mqtt_client_tls_read+0x70>)
   25b5c:	2369      	movs	r3, #105	; 0x69
   25b5e:	4a14      	ldr	r2, [pc, #80]	; (25bb0 <mqtt_client_tls_read+0x74>)
   25b60:	f018 f99b 	bl	3de9a <printk>
   25b64:	2169      	movs	r1, #105	; 0x69
   25b66:	4812      	ldr	r0, [pc, #72]	; (25bb0 <mqtt_client_tls_read+0x74>)
   25b68:	f018 f9ea 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   25b6c:	6823      	ldr	r3, [r4, #0]
   25b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   25b70:	b94b      	cbnz	r3, 25b86 <mqtt_client_tls_read+0x4a>
   25b72:	4910      	ldr	r1, [pc, #64]	; (25bb4 <mqtt_client_tls_read+0x78>)
   25b74:	480d      	ldr	r0, [pc, #52]	; (25bac <mqtt_client_tls_read+0x70>)
   25b76:	236a      	movs	r3, #106	; 0x6a
   25b78:	4a0d      	ldr	r2, [pc, #52]	; (25bb0 <mqtt_client_tls_read+0x74>)
   25b7a:	f018 f98e 	bl	3de9a <printk>
   25b7e:	216a      	movs	r1, #106	; 0x6a
   25b80:	480b      	ldr	r0, [pc, #44]	; (25bb0 <mqtt_client_tls_read+0x74>)
   25b82:	f018 f9dd 	bl	3df40 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   25b86:	6823      	ldr	r3, [r4, #0]
   25b88:	463a      	mov	r2, r7
   25b8a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   25b8c:	4631      	mov	r1, r6
   25b8e:	4643      	mov	r3, r8
   25b90:	4628      	mov	r0, r5
   25b92:	47a0      	blx	r4
	if (ret < 0) {
   25b94:	2800      	cmp	r0, #0
   25b96:	da03      	bge.n	25ba0 <mqtt_client_tls_read+0x64>
		return -errno;
   25b98:	f018 fbcf 	bl	3e33a <__errno>
   25b9c:	6800      	ldr	r0, [r0, #0]
   25b9e:	4240      	negs	r0, r0
	}

	return ret;
}
   25ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25ba4:	2002389c 	.word	0x2002389c
   25ba8:	000433f1 	.word	0x000433f1
   25bac:	00043278 	.word	0x00043278
   25bb0:	000433c1 	.word	0x000433c1
   25bb4:	00044db7 	.word	0x00044db7

00025bb8 <z_impl_entropy_get_entropy>:
				  u16_t length);

static inline int z_impl_entropy_get_entropy(struct device *dev,
					    u8_t *buffer,
					    u16_t length)
{
   25bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct entropy_driver_api *api =
   25bbc:	6845      	ldr	r5, [r0, #4]
{
   25bbe:	4604      	mov	r4, r0
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
   25bc0:	682b      	ldr	r3, [r5, #0]
{
   25bc2:	460e      	mov	r6, r1
   25bc4:	4617      	mov	r7, r2
	__ASSERT(api->get_entropy != NULL,
   25bc6:	b963      	cbnz	r3, 25be2 <z_impl_entropy_get_entropy+0x2a>
   25bc8:	4909      	ldr	r1, [pc, #36]	; (25bf0 <z_impl_entropy_get_entropy+0x38>)
   25bca:	234c      	movs	r3, #76	; 0x4c
   25bcc:	4a09      	ldr	r2, [pc, #36]	; (25bf4 <z_impl_entropy_get_entropy+0x3c>)
   25bce:	480a      	ldr	r0, [pc, #40]	; (25bf8 <z_impl_entropy_get_entropy+0x40>)
   25bd0:	f018 f963 	bl	3de9a <printk>
   25bd4:	4809      	ldr	r0, [pc, #36]	; (25bfc <z_impl_entropy_get_entropy+0x44>)
   25bd6:	f018 f960 	bl	3de9a <printk>
   25bda:	214c      	movs	r1, #76	; 0x4c
   25bdc:	4805      	ldr	r0, [pc, #20]	; (25bf4 <z_impl_entropy_get_entropy+0x3c>)
   25bde:	f018 f9af 	bl	3df40 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   25be2:	682b      	ldr	r3, [r5, #0]
   25be4:	463a      	mov	r2, r7
   25be6:	4631      	mov	r1, r6
   25be8:	4620      	mov	r0, r4
}
   25bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->get_entropy(dev, buffer, length);
   25bee:	4718      	bx	r3
   25bf0:	00044f49 	.word	0x00044f49
   25bf4:	00044f1c 	.word	0x00044f1c
   25bf8:	00043278 	.word	0x00043278
   25bfc:	00044f69 	.word	0x00044f69

00025c00 <sys_rand32_get>:

static struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
u32_t sys_rand32_get(void)
{
   25c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *dev = entropy_driver;
   25c02:	4d12      	ldr	r5, [pc, #72]	; (25c4c <sys_rand32_get+0x4c>)
   25c04:	682c      	ldr	r4, [r5, #0]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   25c06:	b99c      	cbnz	r4, 25c30 <sys_rand32_get+0x30>
   25c08:	4811      	ldr	r0, [pc, #68]	; (25c50 <sys_rand32_get+0x50>)
   25c0a:	f012 f9cd 	bl	37fa8 <z_impl_device_get_binding>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
		__ASSERT((dev != NULL),
   25c0e:	4604      	mov	r4, r0
   25c10:	b968      	cbnz	r0, 25c2e <sys_rand32_get+0x2e>
   25c12:	231d      	movs	r3, #29
   25c14:	4a0f      	ldr	r2, [pc, #60]	; (25c54 <sys_rand32_get+0x54>)
   25c16:	4910      	ldr	r1, [pc, #64]	; (25c58 <sys_rand32_get+0x58>)
   25c18:	4810      	ldr	r0, [pc, #64]	; (25c5c <sys_rand32_get+0x5c>)
   25c1a:	f018 f93e 	bl	3de9a <printk>
   25c1e:	490c      	ldr	r1, [pc, #48]	; (25c50 <sys_rand32_get+0x50>)
   25c20:	480f      	ldr	r0, [pc, #60]	; (25c60 <sys_rand32_get+0x60>)
   25c22:	f018 f93a 	bl	3de9a <printk>
   25c26:	211d      	movs	r1, #29
   25c28:	480a      	ldr	r0, [pc, #40]	; (25c54 <sys_rand32_get+0x54>)
   25c2a:	f018 f989 	bl	3df40 <assert_post_action>
			"Device driver for %s (CONFIG_ENTROPY_NAME) not found. "
			"Check your build configuration!",
			CONFIG_ENTROPY_NAME);
		entropy_driver = dev;
   25c2e:	602c      	str	r4, [r5, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_ENTROPY_GET_ENTROPY);
	}
#endif
	compiler_barrier();
	return z_impl_entropy_get_entropy(dev, buffer, length);
   25c30:	2204      	movs	r2, #4
   25c32:	4620      	mov	r0, r4
   25c34:	eb0d 0102 	add.w	r1, sp, r2
   25c38:	f7ff ffbe 	bl	25bb8 <z_impl_entropy_get_entropy>
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   25c3c:	2800      	cmp	r0, #0
   25c3e:	da02      	bge.n	25c46 <sys_rand32_get+0x46>
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   25c40:	f7fe fa02 	bl	24048 <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   25c44:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   25c46:	9801      	ldr	r0, [sp, #4]
   25c48:	b003      	add	sp, #12
   25c4a:	bd30      	pop	{r4, r5, pc}
   25c4c:	20023984 	.word	0x20023984
   25c50:	00044e6c 	.word	0x00044e6c
   25c54:	00044e76 	.word	0x00044e76
   25c58:	00044eaf 	.word	0x00044eaf
   25c5c:	00043278 	.word	0x00043278
   25c60:	00044ec4 	.word	0x00044ec4

00025c64 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   25c64:	b570      	push	{r4, r5, r6, lr}
   25c66:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   25c68:	6884      	ldr	r4, [r0, #8]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   25c6a:	460d      	mov	r5, r1
   25c6c:	b961      	cbnz	r1, 25c88 <gpio_nrfx_manage_callback+0x24>
   25c6e:	4922      	ldr	r1, [pc, #136]	; (25cf8 <gpio_nrfx_manage_callback+0x94>)
   25c70:	231c      	movs	r3, #28
   25c72:	4a22      	ldr	r2, [pc, #136]	; (25cfc <gpio_nrfx_manage_callback+0x98>)
   25c74:	4822      	ldr	r0, [pc, #136]	; (25d00 <gpio_nrfx_manage_callback+0x9c>)
   25c76:	f018 f910 	bl	3de9a <printk>
   25c7a:	4822      	ldr	r0, [pc, #136]	; (25d04 <gpio_nrfx_manage_callback+0xa0>)
   25c7c:	f018 f90d 	bl	3de9a <printk>
   25c80:	211c      	movs	r1, #28
   25c82:	481e      	ldr	r0, [pc, #120]	; (25cfc <gpio_nrfx_manage_callback+0x98>)
   25c84:	f018 f95c 	bl	3df40 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   25c88:	686b      	ldr	r3, [r5, #4]
   25c8a:	b963      	cbnz	r3, 25ca6 <gpio_nrfx_manage_callback+0x42>
   25c8c:	491e      	ldr	r1, [pc, #120]	; (25d08 <gpio_nrfx_manage_callback+0xa4>)
   25c8e:	231d      	movs	r3, #29
   25c90:	4a1a      	ldr	r2, [pc, #104]	; (25cfc <gpio_nrfx_manage_callback+0x98>)
   25c92:	481b      	ldr	r0, [pc, #108]	; (25d00 <gpio_nrfx_manage_callback+0x9c>)
   25c94:	f018 f901 	bl	3de9a <printk>
   25c98:	481c      	ldr	r0, [pc, #112]	; (25d0c <gpio_nrfx_manage_callback+0xa8>)
   25c9a:	f018 f8fe 	bl	3de9a <printk>
   25c9e:	211d      	movs	r1, #29
   25ca0:	4816      	ldr	r0, [pc, #88]	; (25cfc <gpio_nrfx_manage_callback+0x98>)
   25ca2:	f018 f94d 	bl	3df40 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   25ca6:	6823      	ldr	r3, [r4, #0]

	if (!sys_slist_is_empty(callbacks)) {
   25ca8:	b15b      	cbz	r3, 25cc2 <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25caa:	2200      	movs	r2, #0
   25cac:	429d      	cmp	r5, r3
   25cae:	d113      	bne.n	25cd8 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   25cb0:	682b      	ldr	r3, [r5, #0]
   25cb2:	b95a      	cbnz	r2, 25ccc <gpio_nrfx_manage_callback+0x68>
   25cb4:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   25cb6:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   25cb8:	4295      	cmp	r5, r2
   25cba:	d100      	bne.n	25cbe <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   25cbc:	6063      	str	r3, [r4, #4]
	parent->next = child;
   25cbe:	2300      	movs	r3, #0
   25cc0:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   25cc2:	b976      	cbnz	r6, 25ce2 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   25cc4:	2000      	movs	r0, #0
				     callback, set);
}
   25cc6:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25cc8:	460b      	mov	r3, r1
   25cca:	e7ef      	b.n	25cac <gpio_nrfx_manage_callback+0x48>
	parent->next = child;
   25ccc:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   25cce:	6863      	ldr	r3, [r4, #4]
   25cd0:	429d      	cmp	r5, r3
	list->tail = node;
   25cd2:	bf08      	it	eq
   25cd4:	6062      	streq	r2, [r4, #4]
   25cd6:	e7f2      	b.n	25cbe <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25cd8:	6819      	ldr	r1, [r3, #0]
	return node->next;
   25cda:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25cdc:	2900      	cmp	r1, #0
   25cde:	d1f3      	bne.n	25cc8 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   25ce0:	b13e      	cbz	r6, 25cf2 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   25ce2:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   25ce4:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   25ce6:	6860      	ldr	r0, [r4, #4]
	list->head = node;
   25ce8:	6025      	str	r5, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   25cea:	2800      	cmp	r0, #0
   25cec:	d1ea      	bne.n	25cc4 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   25cee:	6065      	str	r5, [r4, #4]
   25cf0:	e7e9      	b.n	25cc6 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   25cf2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   25cf6:	e7e6      	b.n	25cc6 <gpio_nrfx_manage_callback+0x62>
   25cf8:	000452a7 	.word	0x000452a7
   25cfc:	00044fa8 	.word	0x00044fa8
   25d00:	00043278 	.word	0x00043278
   25d04:	00044fd5 	.word	0x00044fd5
   25d08:	00044fe4 	.word	0x00044fe4
   25d0c:	00044ff6 	.word	0x00044ff6

00025d10 <nrf_gpio_pin_port_decode.isra.8.part.9>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   25d10:	b508      	push	{r3, lr}
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   25d12:	4a03      	ldr	r2, [pc, #12]	; (25d20 <nrf_gpio_pin_port_decode.isra.8.part.9+0x10>)
   25d14:	4b03      	ldr	r3, [pc, #12]	; (25d24 <nrf_gpio_pin_port_decode.isra.8.part.9+0x14>)
   25d16:	f240 11ff 	movw	r1, #511	; 0x1ff
   25d1a:	4803      	ldr	r0, [pc, #12]	; (25d28 <nrf_gpio_pin_port_decode.isra.8.part.9+0x18>)
   25d1c:	f015 fc9e 	bl	3b65c <__assert_func>
   25d20:	00044f8f 	.word	0x00044f8f
   25d24:	00045045 	.word	0x00045045
   25d28:	00045053 	.word	0x00045053

00025d2c <nrf_gpio_cfg_sense_set>:
   25d2c:	281f      	cmp	r0, #31
}


NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
   25d2e:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   25d30:	d901      	bls.n	25d36 <nrf_gpio_cfg_sense_set+0xa>
   25d32:	f7ff ffed 	bl	25d10 <nrf_gpio_pin_port_decode.isra.8.part.9>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   25d36:	4a06      	ldr	r2, [pc, #24]	; (25d50 <nrf_gpio_cfg_sense_set+0x24>)
   25d38:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   25d3c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   25d40:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   25d44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   25d48:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   25d4c:	bd08      	pop	{r3, pc}
   25d4e:	bf00      	nop
   25d50:	40842500 	.word	0x40842500

00025d54 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   25d54:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   25d56:	4b09      	ldr	r3, [pc, #36]	; (25d7c <gpio_nrfx_init+0x28>)
   25d58:	781a      	ldrb	r2, [r3, #0]
   25d5a:	b96a      	cbnz	r2, 25d78 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   25d5c:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   25d5e:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   25d60:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   25d62:	2105      	movs	r1, #5
   25d64:	f7fe fb2c 	bl	243c0 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   25d68:	2031      	movs	r0, #49	; 0x31
   25d6a:	f7fe fb19 	bl	243a0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   25d6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   25d72:	4b03      	ldr	r3, [pc, #12]	; (25d80 <gpio_nrfx_init+0x2c>)
   25d74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   25d78:	2000      	movs	r0, #0
   25d7a:	bd08      	pop	{r3, pc}
   25d7c:	2002a2a0 	.word	0x2002a2a0
   25d80:	40031000 	.word	0x40031000

00025d84 <gpiote_pin_int_cfg>:
{
   25d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->config->config_info;
   25d88:	6803      	ldr	r3, [r0, #0]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   25d8a:	f001 041f 	and.w	r4, r1, #31
   25d8e:	689b      	ldr	r3, [r3, #8]
{
   25d90:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   25d92:	791b      	ldrb	r3, [r3, #4]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   25d94:	4e4b      	ldr	r6, [pc, #300]	; (25ec4 <gpiote_pin_int_cfg+0x140>)
   25d96:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   25d9a:	2300      	movs	r3, #0
   25d9c:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
   25da0:	6887      	ldr	r7, [r0, #8]
   25da2:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   25da4:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   25da8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   25dac:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   25db0:	428c      	cmp	r4, r1
   25db2:	d16c      	bne.n	25e8e <gpiote_pin_int_cfg+0x10a>
		    && (intenset & BIT(i))) {
   25db4:	fa22 f103 	lsr.w	r1, r2, r3
   25db8:	07c9      	lsls	r1, r1, #31
   25dba:	d568      	bpl.n	25e8e <gpiote_pin_int_cfg+0x10a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   25dbc:	009a      	lsls	r2, r3, #2
   25dbe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   25dc2:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   25dc6:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   25dca:	f021 0101 	bic.w	r1, r1, #1
   25dce:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   25dd2:	2201      	movs	r2, #1
   25dd4:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
   25dd8:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   25ddc:	4620      	mov	r0, r4
   25dde:	2100      	movs	r1, #0
   25de0:	f7ff ffa4 	bl	25d2c <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   25de4:	68b8      	ldr	r0, [r7, #8]
   25de6:	40e8      	lsrs	r0, r5
   25de8:	f010 0001 	ands.w	r0, r0, #1
   25dec:	d04d      	beq.n	25e8a <gpiote_pin_int_cfg+0x106>
   25dee:	68f8      	ldr	r0, [r7, #12]
   25df0:	40e8      	lsrs	r0, r5
   25df2:	f010 0001 	ands.w	r0, r0, #1
   25df6:	d048      	beq.n	25e8a <gpiote_pin_int_cfg+0x106>
		if (data->trig_edge & BIT(pin)) {
   25df8:	6978      	ldr	r0, [r7, #20]
   25dfa:	40e8      	lsrs	r0, r5
   25dfc:	f010 0801 	ands.w	r8, r0, #1
   25e00:	d051      	beq.n	25ea6 <gpiote_pin_int_cfg+0x122>
			if (data->double_edge & BIT(pin)) {
   25e02:	69bb      	ldr	r3, [r7, #24]
   25e04:	40eb      	lsrs	r3, r5
   25e06:	07db      	lsls	r3, r3, #31
   25e08:	d445      	bmi.n	25e96 <gpiote_pin_int_cfg+0x112>
			} else if (((data->active_level & BIT(pin)) != 0U)
   25e0a:	693b      	ldr	r3, [r7, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   25e0c:	69fa      	ldr	r2, [r7, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   25e0e:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   25e10:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
   25e14:	f003 0301 	and.w	r3, r3, #1
   25e18:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   25e1c:	42ab      	cmp	r3, r5
   25e1e:	bf14      	ite	ne
   25e20:	2501      	movne	r5, #1
   25e22:	2502      	moveq	r5, #2
   25e24:	2100      	movs	r1, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   25e26:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   25e2a:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   25e2e:	f010 0003 	ands.w	r0, r0, #3
   25e32:	d132      	bne.n	25e9a <gpiote_pin_int_cfg+0x116>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   25e34:	008b      	lsls	r3, r1, #2
   25e36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   25e3a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   25e3e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   25e42:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   25e44:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   25e48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   25e4c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   25e50:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   25e54:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   25e58:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   25e5c:	4315      	orrs	r5, r2
			nrf_gpiote_event_t evt =
   25e5e:	f101 0240 	add.w	r2, r1, #64	; 0x40
   25e62:	0092      	lsls	r2, r2, #2
    return ((uint32_t)p_reg + event);
   25e64:	b292      	uxth	r2, r2
   25e66:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   25e6a:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   25e6e:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   25e72:	6010      	str	r0, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   25e74:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   25e78:	f042 0201 	orr.w	r2, r2, #1
   25e7c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   25e80:	2301      	movs	r3, #1
   25e82:	fa03 f101 	lsl.w	r1, r3, r1
    p_reg->INTENSET = mask;
   25e86:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
   25e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   25e8e:	3301      	adds	r3, #1
   25e90:	2b08      	cmp	r3, #8
   25e92:	d187      	bne.n	25da4 <gpiote_pin_int_cfg+0x20>
   25e94:	e7a2      	b.n	25ddc <gpiote_pin_int_cfg+0x58>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   25e96:	2503      	movs	r5, #3
   25e98:	e7c4      	b.n	25e24 <gpiote_pin_int_cfg+0xa0>
   25e9a:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   25e9c:	2908      	cmp	r1, #8
   25e9e:	d1c2      	bne.n	25e26 <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
   25ea0:	f06f 0012 	mvn.w	r0, #18
   25ea4:	e7f1      	b.n	25e8a <gpiote_pin_int_cfg+0x106>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   25ea6:	693b      	ldr	r3, [r7, #16]
   25ea8:	69fa      	ldr	r2, [r7, #28]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   25eaa:	4620      	mov	r0, r4
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   25eac:	4053      	eors	r3, r2
   25eae:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   25eb2:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   25eb6:	bf0c      	ite	eq
   25eb8:	2103      	moveq	r1, #3
   25eba:	2102      	movne	r1, #2
   25ebc:	f7ff ff36 	bl	25d2c <nrf_gpio_cfg_sense_set>
	int res = 0;
   25ec0:	4640      	mov	r0, r8
   25ec2:	e7e2      	b.n	25e8a <gpiote_pin_int_cfg+0x106>
   25ec4:	40031000 	.word	0x40031000

00025ec8 <gpio_nrfx_config>:
{
   25ec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25ecc:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   25ece:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   25ed0:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   25ed4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   25ed8:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   25eda:	d040      	beq.n	25f5e <gpio_nrfx_config+0x96>
   25edc:	dc09      	bgt.n	25ef2 <gpio_nrfx_config+0x2a>
   25ede:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   25ee2:	d03e      	beq.n	25f62 <gpio_nrfx_config+0x9a>
   25ee4:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   25ee8:	d03d      	beq.n	25f66 <gpio_nrfx_config+0x9e>
   25eea:	b190      	cbz	r0, 25f12 <gpio_nrfx_config+0x4a>
		return -EINVAL;
   25eec:	f06f 0015 	mvn.w	r0, #21
   25ef0:	e032      	b.n	25f58 <gpio_nrfx_config+0x90>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   25ef2:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   25ef6:	d038      	beq.n	25f6a <gpio_nrfx_config+0xa2>
   25ef8:	dc04      	bgt.n	25f04 <gpio_nrfx_config+0x3c>
   25efa:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   25efe:	d1f5      	bne.n	25eec <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   25f00:	2003      	movs	r0, #3
   25f02:	e006      	b.n	25f12 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   25f04:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   25f08:	d031      	beq.n	25f6e <gpio_nrfx_config+0xa6>
   25f0a:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   25f0e:	d1ed      	bne.n	25eec <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
   25f10:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   25f12:	f406 7740 	and.w	r7, r6, #768	; 0x300
   25f16:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   25f1a:	d02a      	beq.n	25f72 <gpio_nrfx_config+0xaa>
		pull = NRF_GPIO_PIN_NOPULL;
   25f1c:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   25f20:	4263      	negs	r3, r4
   25f22:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   25f24:	2901      	cmp	r1, #1
		from_pin = pin;
   25f26:	bf19      	ittee	ne
   25f28:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
   25f2a:	46a1      	movne	r9, r4
		to_pin   = 31U;
   25f2c:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   25f30:	2400      	moveq	r4, #0
   25f32:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   25f36:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   25f3a:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   25f3e:	ea47 070c 	orr.w	r7, r7, ip
   25f42:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   25f46:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 25ff0 <gpio_nrfx_config+0x128>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   25f4a:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   25f4e:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   25f52:	45a1      	cmp	r9, r4
   25f54:	d20f      	bcs.n	25f76 <gpio_nrfx_config+0xae>
	return 0;
   25f56:	2000      	movs	r0, #0
}
   25f58:	b003      	add	sp, #12
   25f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
   25f5e:	2002      	movs	r0, #2
   25f60:	e7d7      	b.n	25f12 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
   25f62:	2001      	movs	r0, #1
   25f64:	e7d5      	b.n	25f12 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
   25f66:	2004      	movs	r0, #4
   25f68:	e7d3      	b.n	25f12 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
   25f6a:	2005      	movs	r0, #5
   25f6c:	e7d1      	b.n	25f12 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
   25f6e:	2006      	movs	r0, #6
   25f70:	e7cf      	b.n	25f12 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
   25f72:	2303      	movs	r3, #3
   25f74:	e7d6      	b.n	25f24 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
   25f76:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   25f7a:	6892      	ldr	r2, [r2, #8]
   25f7c:	7911      	ldrb	r1, [r2, #4]
   25f7e:	f004 021f 	and.w	r2, r4, #31
   25f82:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   25f86:	2a1f      	cmp	r2, #31
   25f88:	dd01      	ble.n	25f8e <gpio_nrfx_config+0xc6>
   25f8a:	f7ff fec1 	bl	25d10 <nrf_gpio_pin_port_decode.isra.8.part.9>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   25f8e:	3280      	adds	r2, #128	; 0x80
   25f90:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   25f94:	68a9      	ldr	r1, [r5, #8]
   25f96:	fa0b f204 	lsl.w	r2, fp, r4
   25f9a:	2b00      	cmp	r3, #0
   25f9c:	d025      	beq.n	25fea <gpio_nrfx_config+0x122>
   25f9e:	4311      	orrs	r1, r2
   25fa0:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   25fa2:	6969      	ldr	r1, [r5, #20]
   25fa4:	06b0      	lsls	r0, r6, #26
   25fa6:	bf4c      	ite	mi
   25fa8:	4311      	orrmi	r1, r2
   25faa:	4391      	bicpl	r1, r2
   25fac:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
   25fae:	69a9      	ldr	r1, [r5, #24]
   25fb0:	0670      	lsls	r0, r6, #25
   25fb2:	bf4c      	ite	mi
   25fb4:	4311      	orrmi	r1, r2
   25fb6:	4391      	bicpl	r1, r2
   25fb8:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
   25fba:	6929      	ldr	r1, [r5, #16]
   25fbc:	0770      	lsls	r0, r6, #29
   25fbe:	bf4c      	ite	mi
   25fc0:	4311      	orrmi	r1, r2
   25fc2:	4391      	bicpl	r1, r2
   25fc4:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   25fc6:	69e9      	ldr	r1, [r5, #28]
   25fc8:	0630      	lsls	r0, r6, #24
   25fca:	bf4c      	ite	mi
   25fcc:	430a      	orrmi	r2, r1
   25fce:	ea21 0202 	bicpl.w	r2, r1, r2
   25fd2:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   25fd4:	4621      	mov	r1, r4
   25fd6:	4640      	mov	r0, r8
   25fd8:	9301      	str	r3, [sp, #4]
   25fda:	f7ff fed3 	bl	25d84 <gpiote_pin_int_cfg>
		if (res != 0) {
   25fde:	2800      	cmp	r0, #0
   25fe0:	d1ba      	bne.n	25f58 <gpio_nrfx_config+0x90>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   25fe2:	3401      	adds	r4, #1
   25fe4:	b2e4      	uxtb	r4, r4
   25fe6:	9b01      	ldr	r3, [sp, #4]
   25fe8:	e7b3      	b.n	25f52 <gpio_nrfx_config+0x8a>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   25fea:	ea21 0102 	bic.w	r1, r1, r2
   25fee:	e7d7      	b.n	25fa0 <gpio_nrfx_config+0xd8>
   25ff0:	40842500 	.word	0x40842500

00025ff4 <gpiote_event_handler>:
{
   25ff4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25ff8:	4b56      	ldr	r3, [pc, #344]	; (26154 <gpiote_event_handler+0x160>)
   25ffa:	681e      	ldr	r6, [r3, #0]
	if (port_event) {
   25ffc:	4698      	mov	r8, r3
   25ffe:	2e00      	cmp	r6, #0
   26000:	d05e      	beq.n	260c0 <gpiote_event_handler+0xcc>
	u32_t bit = 1U << pin;
   26002:	2701      	movs	r7, #1
	u32_t pin = 0U;
   26004:	f04f 0a00 	mov.w	sl, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   26008:	4a53      	ldr	r2, [pc, #332]	; (26158 <gpiote_event_handler+0x164>)
   2600a:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
   2600c:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   2600e:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
   26010:	f8d2 9008 	ldr.w	r9, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
   26014:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
   26018:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
   2601a:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   2601e:	430a      	orrs	r2, r1
   26020:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   26024:	f8d9 2000 	ldr.w	r2, [r9]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   26028:	691b      	ldr	r3, [r3, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   2602a:	6912      	ldr	r2, [r2, #16]
   2602c:	405c      	eors	r4, r3
   2602e:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
   26030:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   26034:	bb9d      	cbnz	r5, 2609e <gpiote_event_handler+0xaa>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   26036:	f8c8 5000 	str.w	r5, [r8]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   2603a:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   2603c:	2001      	movs	r0, #1
   2603e:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   26040:	4946      	ldr	r1, [pc, #280]	; (2615c <gpiote_event_handler+0x168>)
   26042:	4d47      	ldr	r5, [pc, #284]	; (26160 <gpiote_event_handler+0x16c>)
   26044:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   26048:	fa00 fc03 	lsl.w	ip, r0, r3
   2604c:	ea1c 0f02 	tst.w	ip, r2
   26050:	d00d      	beq.n	2606e <gpiote_event_handler+0x7a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26052:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   26056:	b152      	cbz	r2, 2606e <gpiote_event_handler+0x7a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   26058:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   2605c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   26060:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   26064:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   26068:	fa00 f202 	lsl.w	r2, r0, r2
   2606c:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2606e:	3301      	adds	r3, #1
   26070:	2b08      	cmp	r3, #8
   26072:	d1e7      	bne.n	26044 <gpiote_event_handler+0x50>
	if (fired_triggers[0]) {
   26074:	bb34      	cbnz	r4, 260c4 <gpiote_event_handler+0xd0>
	if (port_event) {
   26076:	b186      	cbz	r6, 2609a <gpiote_event_handler+0xa6>
	u32_t bit = 1U << pin;
   26078:	2701      	movs	r7, #1
	u32_t pin = 0U;
   2607a:	f04f 0800 	mov.w	r8, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   2607e:	4b36      	ldr	r3, [pc, #216]	; (26158 <gpiote_event_handler+0x164>)
   26080:	689d      	ldr	r5, [r3, #8]
	return port->config->config_info;
   26082:	681b      	ldr	r3, [r3, #0]
   26084:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   26086:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
   2608a:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   2608c:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
   26090:	4313      	orrs	r3, r2
   26092:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   26096:	2c00      	cmp	r4, #0
   26098:	d142      	bne.n	26120 <gpiote_event_handler+0x12c>
}
   2609a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (level_pins & bit) {
   2609e:	423d      	tst	r5, r7
   260a0:	d00a      	beq.n	260b8 <gpiote_event_handler+0xc4>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   260a2:	f899 3004 	ldrb.w	r3, [r9, #4]
   260a6:	f00a 001f 	and.w	r0, sl, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   260aa:	2100      	movs	r1, #0
   260ac:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   260b0:	f7ff fe3c 	bl	25d2c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   260b4:	ea25 0507 	bic.w	r5, r5, r7
		++pin;
   260b8:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   260bc:	007f      	lsls	r7, r7, #1
   260be:	e7b9      	b.n	26034 <gpiote_event_handler+0x40>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   260c0:	4634      	mov	r4, r6
   260c2:	e7ba      	b.n	2603a <gpiote_event_handler+0x46>
	struct gpio_nrfx_data *data = get_port_data(port);
   260c4:	4b24      	ldr	r3, [pc, #144]	; (26158 <gpiote_event_handler+0x164>)
   260c6:	f8d3 9008 	ldr.w	r9, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   260ca:	f8d9 5000 	ldr.w	r5, [r9]
   260ce:	2d00      	cmp	r5, #0
   260d0:	d0d1      	beq.n	26076 <gpiote_event_handler+0x82>
			cb->handler(port, cb, pins);
   260d2:	4698      	mov	r8, r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   260d4:	682f      	ldr	r7, [r5, #0]
			__ASSERT(cb->handler, "No callback handler!");
   260d6:	f8df a094 	ldr.w	sl, [pc, #148]	; 2616c <gpiote_event_handler+0x178>
   260da:	f8df b094 	ldr.w	fp, [pc, #148]	; 26170 <gpiote_event_handler+0x17c>
		if ((cb->pin_mask & pins) & data->int_en) {
   260de:	f8d9 300c 	ldr.w	r3, [r9, #12]
   260e2:	68aa      	ldr	r2, [r5, #8]
   260e4:	4023      	ands	r3, r4
   260e6:	4213      	tst	r3, r2
   260e8:	d015      	beq.n	26116 <gpiote_event_handler+0x122>
			__ASSERT(cb->handler, "No callback handler!");
   260ea:	686b      	ldr	r3, [r5, #4]
   260ec:	b973      	cbnz	r3, 2610c <gpiote_event_handler+0x118>
   260ee:	4659      	mov	r1, fp
   260f0:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
   260f4:	4652      	mov	r2, sl
   260f6:	481b      	ldr	r0, [pc, #108]	; (26164 <gpiote_event_handler+0x170>)
   260f8:	f017 fecf 	bl	3de9a <printk>
   260fc:	481a      	ldr	r0, [pc, #104]	; (26168 <gpiote_event_handler+0x174>)
   260fe:	f017 fecc 	bl	3de9a <printk>
   26102:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   26106:	4650      	mov	r0, sl
   26108:	f017 ff1a 	bl	3df40 <assert_post_action>
			cb->handler(port, cb, pins);
   2610c:	686b      	ldr	r3, [r5, #4]
   2610e:	4622      	mov	r2, r4
   26110:	4629      	mov	r1, r5
   26112:	4640      	mov	r0, r8
   26114:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   26116:	2f00      	cmp	r7, #0
   26118:	d0ad      	beq.n	26076 <gpiote_event_handler+0x82>
   2611a:	463d      	mov	r5, r7
   2611c:	683f      	ldr	r7, [r7, #0]
   2611e:	e7de      	b.n	260de <gpiote_event_handler+0xea>
		if (level_pins & bit) {
   26120:	4227      	tst	r7, r4
   26122:	d013      	beq.n	2614c <gpiote_event_handler+0x158>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   26124:	692b      	ldr	r3, [r5, #16]
   26126:	69ea      	ldr	r2, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   26128:	f896 c004 	ldrb.w	ip, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   2612c:	4053      	eors	r3, r2
   2612e:	fa23 f308 	lsr.w	r3, r3, r8
		return NRF_GPIO_PIN_SENSE_HIGH;
   26132:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   26136:	f008 001f 	and.w	r0, r8, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2613a:	bf0c      	ite	eq
   2613c:	2103      	moveq	r1, #3
   2613e:	2102      	movne	r1, #2
   26140:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
   26144:	f7ff fdf2 	bl	25d2c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   26148:	ea24 0407 	bic.w	r4, r4, r7
		++pin;
   2614c:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
   26150:	007f      	lsls	r7, r7, #1
   26152:	e7a0      	b.n	26096 <gpiote_event_handler+0xa2>
   26154:	4003117c 	.word	0x4003117c
   26158:	2003236c 	.word	0x2003236c
   2615c:	40031000 	.word	0x40031000
   26160:	40031100 	.word	0x40031100
   26164:	00043278 	.word	0x00043278
   26168:	00044ff6 	.word	0x00044ff6
   2616c:	0004500d 	.word	0x0004500d
   26170:	00045039 	.word	0x00045039

00026174 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   26174:	4b02      	ldr	r3, [pc, #8]	; (26180 <flash_nrf_pages_layout+0xc>)
   26176:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   26178:	2301      	movs	r3, #1
   2617a:	6013      	str	r3, [r2, #0]
}
   2617c:	4770      	bx	lr
   2617e:	bf00      	nop
   26180:	200239a8 	.word	0x200239a8

00026184 <flash_nrf_erase>:
{
   26184:	b570      	push	{r4, r5, r6, lr}
   26186:	460d      	mov	r5, r1
   26188:	4614      	mov	r4, r2
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2618a:	f01a f889 	bl	402a0 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   2618e:	4621      	mov	r1, r4
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   26190:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
   26192:	4628      	mov	r0, r5
   26194:	f018 fe7d 	bl	3ee92 <is_regular_addr_valid>
   26198:	b1f0      	cbz	r0, 261d8 <flash_nrf_erase+0x54>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   2619a:	fbb5 f3f6 	udiv	r3, r5, r6
   2619e:	fb06 5313 	mls	r3, r6, r3, r5
   261a2:	b9cb      	cbnz	r3, 261d8 <flash_nrf_erase+0x54>
   261a4:	fbb4 f0f6 	udiv	r0, r4, r6
   261a8:	fb06 4010 	mls	r0, r6, r0, r4
   261ac:	b9a0      	cbnz	r0, 261d8 <flash_nrf_erase+0x54>
		if (!n_pages) {
   261ae:	42a6      	cmp	r6, r4
   261b0:	d811      	bhi.n	261d6 <flash_nrf_erase+0x52>
	return z_impl_k_sem_take(sem, timeout);
   261b2:	f04f 31ff 	mov.w	r1, #4294967295
   261b6:	480a      	ldr	r0, [pc, #40]	; (261e0 <flash_nrf_erase+0x5c>)
   261b8:	f014 f842 	bl	3a240 <z_impl_k_sem_take>

#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

static int erase_op(void *context)
{
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   261bc:	f01a f870 	bl	402a0 <nrfx_nvmc_flash_page_size_get>
   261c0:	4606      	mov	r6, r0
		return FLASH_OP_DONE;
	}
#endif

	do {
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   261c2:	4628      	mov	r0, r5
   261c4:	f011 fe88 	bl	37ed8 <nrfx_nvmc_page_erase>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	} while (e_ctx->len > 0);
   261c8:	1ba4      	subs	r4, r4, r6
   261ca:	4435      	add	r5, r6
   261cc:	d1f9      	bne.n	261c2 <flash_nrf_erase+0x3e>
	z_impl_k_sem_give(sem);
   261ce:	4804      	ldr	r0, [pc, #16]	; (261e0 <flash_nrf_erase+0x5c>)
   261d0:	f013 ffec 	bl	3a1ac <z_impl_k_sem_give>
	return ret;
   261d4:	4620      	mov	r0, r4
}
   261d6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   261d8:	f06f 0015 	mvn.w	r0, #21
   261dc:	e7fb      	b.n	261d6 <flash_nrf_erase+0x52>
   261de:	bf00      	nop
   261e0:	200239b0 	.word	0x200239b0

000261e4 <nrf_flash_init>:
{
   261e4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   261e6:	2201      	movs	r2, #1
   261e8:	4806      	ldr	r0, [pc, #24]	; (26204 <nrf_flash_init+0x20>)
   261ea:	4611      	mov	r1, r2
   261ec:	f01a f8f2 	bl	403d4 <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   261f0:	f01a f859 	bl	402a6 <nrfx_nvmc_flash_page_count_get>
   261f4:	4c04      	ldr	r4, [pc, #16]	; (26208 <nrf_flash_init+0x24>)
   261f6:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   261f8:	f01a f852 	bl	402a0 <nrfx_nvmc_flash_page_size_get>
   261fc:	6060      	str	r0, [r4, #4]
}
   261fe:	2000      	movs	r0, #0
   26200:	bd10      	pop	{r4, pc}
   26202:	bf00      	nop
   26204:	200239b0 	.word	0x200239b0
   26208:	200239a8 	.word	0x200239a8

0002620c <flash_nrf_write>:
{
   2620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2620e:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   26210:	4619      	mov	r1, r3
   26212:	4630      	mov	r0, r6
{
   26214:	4617      	mov	r7, r2
   26216:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   26218:	f018 fe3b 	bl	3ee92 <is_regular_addr_valid>
   2621c:	b1f8      	cbz	r0, 2625e <flash_nrf_write+0x52>
	return (data & 0x3) ? false : true;
   2621e:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(u32_t))) {
   26222:	f015 0503 	ands.w	r5, r5, #3
   26226:	d11a      	bne.n	2625e <flash_nrf_write+0x52>
	if (!len) {
   26228:	b1e4      	cbz	r4, 26264 <flash_nrf_write+0x58>
	return z_impl_k_sem_take(sem, timeout);
   2622a:	f04f 31ff 	mov.w	r1, #4294967295
   2622e:	480e      	ldr	r0, [pc, #56]	; (26268 <flash_nrf_write+0x5c>)
   26230:	f014 f806 	bl	3a240 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   26234:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(u32_t)) {
   26238:	42a5      	cmp	r5, r4
   2623a:	eb06 0005 	add.w	r0, r6, r5
   2623e:	d109      	bne.n	26254 <flash_nrf_write+0x48>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   26240:	4a0a      	ldr	r2, [pc, #40]	; (2626c <flash_nrf_write+0x60>)
   26242:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   26246:	07db      	lsls	r3, r3, #31
   26248:	d5fb      	bpl.n	26242 <flash_nrf_write+0x36>
	z_impl_k_sem_give(sem);
   2624a:	4807      	ldr	r0, [pc, #28]	; (26268 <flash_nrf_write+0x5c>)
   2624c:	f013 ffae 	bl	3a1ac <z_impl_k_sem_give>
   26250:	2000      	movs	r0, #0
}
   26252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   26254:	5979      	ldr	r1, [r7, r5]
   26256:	f011 fe6b 	bl	37f30 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   2625a:	3504      	adds	r5, #4
   2625c:	e7ec      	b.n	26238 <flash_nrf_write+0x2c>
		return -EINVAL;
   2625e:	f06f 0015 	mvn.w	r0, #21
   26262:	e7f6      	b.n	26252 <flash_nrf_write+0x46>
		return 0;
   26264:	4620      	mov	r0, r4
   26266:	e7f4      	b.n	26252 <flash_nrf_write+0x46>
   26268:	200239b0 	.word	0x200239b0
   2626c:	40039000 	.word	0x40039000

00026270 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   26270:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   26272:	794b      	ldrb	r3, [r1, #5]
   26274:	2b01      	cmp	r3, #1
   26276:	d029      	beq.n	262cc <uarte_nrfx_configure+0x5c>
   26278:	2b03      	cmp	r3, #3
   2627a:	d124      	bne.n	262c6 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   2627c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2627e:	798b      	ldrb	r3, [r1, #6]
   26280:	2b03      	cmp	r3, #3
   26282:	d120      	bne.n	262c6 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   26284:	79cc      	ldrb	r4, [r1, #7]
   26286:	b12c      	cbz	r4, 26294 <uarte_nrfx_configure+0x24>
   26288:	2c01      	cmp	r4, #1
   2628a:	d11c      	bne.n	262c6 <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
   2628c:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   2628e:	689b      	ldr	r3, [r3, #8]
   26290:	791b      	ldrb	r3, [r3, #4]
   26292:	b1c3      	cbz	r3, 262c6 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   26294:	790a      	ldrb	r2, [r1, #4]
   26296:	b112      	cbz	r2, 2629e <uarte_nrfx_configure+0x2e>
   26298:	2a02      	cmp	r2, #2
   2629a:	d114      	bne.n	262c6 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   2629c:	220e      	movs	r2, #14
	switch (baudrate) {
   2629e:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
   262a2:	6805      	ldr	r5, [r0, #0]
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   262a4:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   262a6:	68ad      	ldr	r5, [r5, #8]
	switch (baudrate) {
   262a8:	42bb      	cmp	r3, r7
	return config->uarte_regs;
   262aa:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   262ac:	d062      	beq.n	26374 <uarte_nrfx_configure+0x104>
   262ae:	d829      	bhi.n	26304 <uarte_nrfx_configure+0x94>
   262b0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   262b4:	d061      	beq.n	2637a <uarte_nrfx_configure+0x10a>
   262b6:	d814      	bhi.n	262e2 <uarte_nrfx_configure+0x72>
   262b8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   262bc:	d05f      	beq.n	2637e <uarte_nrfx_configure+0x10e>
   262be:	d807      	bhi.n	262d0 <uarte_nrfx_configure+0x60>
   262c0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   262c4:	d05e      	beq.n	26384 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
   262c6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   262ca:	e052      	b.n	26372 <uarte_nrfx_configure+0x102>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   262cc:	2600      	movs	r6, #0
   262ce:	e7d6      	b.n	2627e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   262d0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   262d4:	d059      	beq.n	2638a <uarte_nrfx_configure+0x11a>
   262d6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   262da:	d1f4      	bne.n	262c6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   262dc:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   262e0:	e03c      	b.n	2635c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   262e2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   262e6:	d053      	beq.n	26390 <uarte_nrfx_configure+0x120>
   262e8:	d804      	bhi.n	262f4 <uarte_nrfx_configure+0x84>
   262ea:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   262ee:	d1ea      	bne.n	262c6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   262f0:	4b32      	ldr	r3, [pc, #200]	; (263bc <uarte_nrfx_configure+0x14c>)
   262f2:	e033      	b.n	2635c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   262f4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   262f8:	d04c      	beq.n	26394 <uarte_nrfx_configure+0x124>
   262fa:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   262fe:	d1e2      	bne.n	262c6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   26300:	4b2f      	ldr	r3, [pc, #188]	; (263c0 <uarte_nrfx_configure+0x150>)
   26302:	e02b      	b.n	2635c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   26304:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   26308:	d046      	beq.n	26398 <uarte_nrfx_configure+0x128>
   2630a:	d812      	bhi.n	26332 <uarte_nrfx_configure+0xc2>
   2630c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   26310:	42bb      	cmp	r3, r7
   26312:	d044      	beq.n	2639e <uarte_nrfx_configure+0x12e>
   26314:	d805      	bhi.n	26322 <uarte_nrfx_configure+0xb2>
   26316:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   2631a:	d1d4      	bne.n	262c6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   2631c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   26320:	e01c      	b.n	2635c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   26322:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   26326:	d03d      	beq.n	263a4 <uarte_nrfx_configure+0x134>
   26328:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   2632c:	d1cb      	bne.n	262c6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   2632e:	4b25      	ldr	r3, [pc, #148]	; (263c4 <uarte_nrfx_configure+0x154>)
   26330:	e014      	b.n	2635c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   26332:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   26336:	d038      	beq.n	263aa <uarte_nrfx_configure+0x13a>
   26338:	d808      	bhi.n	2634c <uarte_nrfx_configure+0xdc>
   2633a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   2633e:	d037      	beq.n	263b0 <uarte_nrfx_configure+0x140>
   26340:	4f21      	ldr	r7, [pc, #132]	; (263c8 <uarte_nrfx_configure+0x158>)
   26342:	42bb      	cmp	r3, r7
   26344:	d1bf      	bne.n	262c6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   26346:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2634a:	e007      	b.n	2635c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   2634c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   26350:	d031      	beq.n	263b6 <uarte_nrfx_configure+0x146>
   26352:	4f1e      	ldr	r7, [pc, #120]	; (263cc <uarte_nrfx_configure+0x15c>)
   26354:	42bb      	cmp	r3, r7
   26356:	d1b6      	bne.n	262c6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   26358:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   2635c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   26360:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   26362:	6883      	ldr	r3, [r0, #8]
   26364:	4322      	orrs	r2, r4
   26366:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   26368:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   2636c:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   26370:	2000      	movs	r0, #0
}
   26372:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   26374:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   26378:	e7f0      	b.n	2635c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   2637a:	4b15      	ldr	r3, [pc, #84]	; (263d0 <uarte_nrfx_configure+0x160>)
   2637c:	e7ee      	b.n	2635c <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00027000;
   2637e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   26382:	e7eb      	b.n	2635c <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   26384:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   26388:	e7e8      	b.n	2635c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   2638a:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   2638e:	e7e5      	b.n	2635c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   26390:	4b10      	ldr	r3, [pc, #64]	; (263d4 <uarte_nrfx_configure+0x164>)
   26392:	e7e3      	b.n	2635c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   26394:	4b10      	ldr	r3, [pc, #64]	; (263d8 <uarte_nrfx_configure+0x168>)
   26396:	e7e1      	b.n	2635c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   26398:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   2639c:	e7de      	b.n	2635c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   2639e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   263a2:	e7db      	b.n	2635c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   263a4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   263a8:	e7d8      	b.n	2635c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   263aa:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   263ae:	e7d5      	b.n	2635c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   263b0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   263b4:	e7d2      	b.n	2635c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   263b6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   263ba:	e7cf      	b.n	2635c <uarte_nrfx_configure+0xec>
   263bc:	00275000 	.word	0x00275000
   263c0:	0075c000 	.word	0x0075c000
   263c4:	013a9000 	.word	0x013a9000
   263c8:	0003d090 	.word	0x0003d090
   263cc:	000f4240 	.word	0x000f4240
   263d0:	0013b000 	.word	0x0013b000
   263d4:	003af000 	.word	0x003af000
   263d8:	004ea000 	.word	0x004ea000

000263dc <uarte_0_init>:
	#endif
	#if !defined(DT_NORDIC_NRF_UARTE_UART_0_RX_PIN)
	#define DT_NORDIC_NRF_UARTE_UART_0_RX_PIN NRF_UARTE_PSEL_DISCONNECTED
	#endif

	UART_NRF_UARTE_DEVICE(0);
   263dc:	b570      	push	{r4, r5, r6, lr}
   263de:	4606      	mov	r6, r0
   263e0:	2200      	movs	r2, #0
   263e2:	2101      	movs	r1, #1
   263e4:	2008      	movs	r0, #8
   263e6:	f7fd ffeb 	bl	243c0 <z_arm_irq_priority_set>
   263ea:	2008      	movs	r0, #8
   263ec:	f7fd ffd8 	bl	243a0 <arch_irq_enable>
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   263f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	return dev->config->config_info;
   263f4:	6833      	ldr	r3, [r6, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   263f6:	68b5      	ldr	r5, [r6, #8]
	return config->uarte_regs;
   263f8:	689b      	ldr	r3, [r3, #8]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   263fa:	4629      	mov	r1, r5
	return config->uarte_regs;
   263fc:	681c      	ldr	r4, [r3, #0]
   263fe:	4b14      	ldr	r3, [pc, #80]	; (26450 <uarte_0_init+0x74>)
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   26400:	4630      	mov	r0, r6
   26402:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   26404:	2203      	movs	r2, #3
   26406:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
   2640a:	2200      	movs	r2, #0
   2640c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    p_reg->PSEL.TXD = pseltxd;
   26410:	231d      	movs	r3, #29
   26412:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   26416:	231c      	movs	r3, #28
   26418:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
   2641c:	f7ff ff28 	bl	26270 <uarte_nrfx_configure>
	if (err) {
   26420:	b9a0      	cbnz	r0, 2644c <uarte_0_init+0x70>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   26422:	2308      	movs	r3, #8
   26424:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   26428:	f105 030c 	add.w	r3, r5, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2642c:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   26430:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   26434:	2301      	movs	r3, #1
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   26436:	68aa      	ldr	r2, [r5, #8]
   26438:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2643c:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2643e:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   26440:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   26444:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26448:	60a3      	str	r3, [r4, #8]
   2644a:	60e3      	str	r3, [r4, #12]
	UART_NRF_UARTE_DEVICE(0);
   2644c:	bd70      	pop	{r4, r5, r6, pc}
   2644e:	bf00      	nop
   26450:	40842500 	.word	0x40842500

00026454 <entropy_cc310_rng_get_entropy>:
#include "nrf_cc310_platform_entropy.h"
#endif

static int entropy_cc310_rng_get_entropy(struct device *dev, u8_t *buffer,
					 u16_t length)
{
   26454:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26456:	460d      	mov	r5, r1
   26458:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   2645a:	b948      	cbnz	r0, 26470 <entropy_cc310_rng_get_entropy+0x1c>
   2645c:	4910      	ldr	r1, [pc, #64]	; (264a0 <entropy_cc310_rng_get_entropy+0x4c>)
   2645e:	4811      	ldr	r0, [pc, #68]	; (264a4 <entropy_cc310_rng_get_entropy+0x50>)
   26460:	231e      	movs	r3, #30
   26462:	4a11      	ldr	r2, [pc, #68]	; (264a8 <entropy_cc310_rng_get_entropy+0x54>)
   26464:	f017 fd19 	bl	3de9a <printk>
   26468:	211e      	movs	r1, #30
   2646a:	480f      	ldr	r0, [pc, #60]	; (264a8 <entropy_cc310_rng_get_entropy+0x54>)
   2646c:	f017 fd68 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   26470:	b94d      	cbnz	r5, 26486 <entropy_cc310_rng_get_entropy+0x32>
   26472:	490e      	ldr	r1, [pc, #56]	; (264ac <entropy_cc310_rng_get_entropy+0x58>)
   26474:	480b      	ldr	r0, [pc, #44]	; (264a4 <entropy_cc310_rng_get_entropy+0x50>)
   26476:	231f      	movs	r3, #31
   26478:	4a0b      	ldr	r2, [pc, #44]	; (264a8 <entropy_cc310_rng_get_entropy+0x54>)
   2647a:	f017 fd0e 	bl	3de9a <printk>
   2647e:	211f      	movs	r1, #31
   26480:	4809      	ldr	r0, [pc, #36]	; (264a8 <entropy_cc310_rng_get_entropy+0x54>)
   26482:	f017 fd5d 	bl	3df40 <assert_post_action>

#if defined(CONFIG_SPM)
	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	res = spm_request_random_number(buffer, length, &olen);
   26486:	aa01      	add	r2, sp, #4
   26488:	4621      	mov	r1, r4
   2648a:	4628      	mov	r0, r5
   2648c:	f7f1 fdb0 	bl	17ff0 <spm_request_random_number>
	if (olen != length) {
   26490:	9b01      	ldr	r3, [sp, #4]
		return -EINVAL;
   26492:	429c      	cmp	r4, r3
		return -EINVAL;
	}
#endif

	return res;
}
   26494:	bf18      	it	ne
   26496:	f06f 0015 	mvnne.w	r0, #21
   2649a:	b003      	add	sp, #12
   2649c:	bd30      	pop	{r4, r5, pc}
   2649e:	bf00      	nop
   264a0:	000450cd 	.word	0x000450cd
   264a4:	00043278 	.word	0x00043278
   264a8:	0004509d 	.word	0x0004509d
   264ac:	000450e0 	.word	0x000450e0

000264b0 <parse_string>:
{
   264b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   264b4:	680a      	ldr	r2, [r1, #0]
   264b6:	688b      	ldr	r3, [r1, #8]
{
   264b8:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   264ba:	1c5d      	adds	r5, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   264bc:	18d0      	adds	r0, r2, r3
   264be:	5cd3      	ldrb	r3, [r2, r3]
{
   264c0:	468a      	mov	sl, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   264c2:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   264c4:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   264c6:	f040 80d6 	bne.w	26676 <parse_string+0x1c6>
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   264ca:	462f      	mov	r7, r5
        size_t skipped_bytes = 0;
   264cc:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   264ce:	684c      	ldr	r4, [r1, #4]
   264d0:	1ab9      	subs	r1, r7, r2
   264d2:	42a1      	cmp	r1, r4
   264d4:	f080 80cf 	bcs.w	26676 <parse_string+0x1c6>
   264d8:	7839      	ldrb	r1, [r7, #0]
   264da:	2922      	cmp	r1, #34	; 0x22
   264dc:	d10e      	bne.n	264fc <parse_string+0x4c>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   264de:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   264e2:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   264e4:	f8da 2010 	ldr.w	r2, [sl, #16]
   264e8:	4418      	add	r0, r3
   264ea:	4790      	blx	r2
        if (output == NULL)
   264ec:	4683      	mov	fp, r0
   264ee:	2800      	cmp	r0, #0
   264f0:	f000 80c1 	beq.w	26676 <parse_string+0x1c6>
   264f4:	4604      	mov	r4, r0
                    *output_pointer++ = '\f';
   264f6:	f04f 090c 	mov.w	r9, #12
   264fa:	e00f      	b.n	2651c <parse_string+0x6c>
            if (input_end[0] == '\\')
   264fc:	295c      	cmp	r1, #92	; 0x5c
   264fe:	d105      	bne.n	2650c <parse_string+0x5c>
   26500:	3701      	adds	r7, #1
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   26502:	1ab9      	subs	r1, r7, r2
   26504:	428c      	cmp	r4, r1
   26506:	f240 80b6 	bls.w	26676 <parse_string+0x1c6>
                skipped_bytes++;
   2650a:	3301      	adds	r3, #1
            input_end++;
   2650c:	3701      	adds	r7, #1
   2650e:	e7df      	b.n	264d0 <parse_string+0x20>
        if (*input_pointer != '\\')
   26510:	782b      	ldrb	r3, [r5, #0]
   26512:	2b5c      	cmp	r3, #92	; 0x5c
   26514:	d012      	beq.n	2653c <parse_string+0x8c>
            *output_pointer++ = *input_pointer++;
   26516:	3501      	adds	r5, #1
   26518:	f804 3b01 	strb.w	r3, [r4], #1
    while (input_pointer < input_end)
   2651c:	42bd      	cmp	r5, r7
   2651e:	d3f7      	bcc.n	26510 <parse_string+0x60>
    *output_pointer = '\0';
   26520:	2300      	movs	r3, #0
   26522:	7023      	strb	r3, [r4, #0]
    item->type = cJSON_String;
   26524:	2310      	movs	r3, #16
    return true;
   26526:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
   26528:	e9c8 3b03 	strd	r3, fp, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   2652c:	f8da 3000 	ldr.w	r3, [sl]
   26530:	1aff      	subs	r7, r7, r3
    input_buffer->offset++;
   26532:	3701      	adds	r7, #1
   26534:	f8ca 7008 	str.w	r7, [sl, #8]
}
   26538:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
   2653c:	1b7a      	subs	r2, r7, r5
   2653e:	2a00      	cmp	r2, #0
   26540:	dd08      	ble.n	26554 <parse_string+0xa4>
            switch (input_pointer[1])
   26542:	786b      	ldrb	r3, [r5, #1]
   26544:	2b66      	cmp	r3, #102	; 0x66
   26546:	d063      	beq.n	26610 <parse_string+0x160>
   26548:	d816      	bhi.n	26578 <parse_string+0xc8>
   2654a:	2b2f      	cmp	r3, #47	; 0x2f
   2654c:	d011      	beq.n	26572 <parse_string+0xc2>
   2654e:	d80b      	bhi.n	26568 <parse_string+0xb8>
   26550:	2b22      	cmp	r3, #34	; 0x22
   26552:	d00e      	beq.n	26572 <parse_string+0xc2>
        input_buffer->hooks.deallocate(output);
   26554:	f8da 3014 	ldr.w	r3, [sl, #20]
   26558:	4658      	mov	r0, fp
   2655a:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   2655c:	f8da 0000 	ldr.w	r0, [sl]
   26560:	1a28      	subs	r0, r5, r0
   26562:	f8ca 0008 	str.w	r0, [sl, #8]
   26566:	e089      	b.n	2667c <parse_string+0x1cc>
            switch (input_pointer[1])
   26568:	2b5c      	cmp	r3, #92	; 0x5c
   2656a:	d002      	beq.n	26572 <parse_string+0xc2>
   2656c:	2b62      	cmp	r3, #98	; 0x62
   2656e:	d1f1      	bne.n	26554 <parse_string+0xa4>
                    *output_pointer++ = '\b';
   26570:	2308      	movs	r3, #8
                    *output_pointer++ = input_pointer[1];
   26572:	f804 3b01 	strb.w	r3, [r4], #1
                    break;
   26576:	e04d      	b.n	26614 <parse_string+0x164>
            switch (input_pointer[1])
   26578:	2b72      	cmp	r3, #114	; 0x72
   2657a:	d04e      	beq.n	2661a <parse_string+0x16a>
   2657c:	d803      	bhi.n	26586 <parse_string+0xd6>
   2657e:	2b6e      	cmp	r3, #110	; 0x6e
   26580:	d1e8      	bne.n	26554 <parse_string+0xa4>
                    *output_pointer++ = '\n';
   26582:	230a      	movs	r3, #10
   26584:	e7f5      	b.n	26572 <parse_string+0xc2>
            switch (input_pointer[1])
   26586:	2b74      	cmp	r3, #116	; 0x74
   26588:	d04a      	beq.n	26620 <parse_string+0x170>
   2658a:	2b75      	cmp	r3, #117	; 0x75
   2658c:	d1e2      	bne.n	26554 <parse_string+0xa4>
    if ((input_end - first_sequence) < 6)
   2658e:	2a05      	cmp	r2, #5
   26590:	dde0      	ble.n	26554 <parse_string+0xa4>
    first_code = parse_hex4(first_sequence + 2);
   26592:	1ca8      	adds	r0, r5, #2
   26594:	f018 fde4 	bl	3f160 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   26598:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   2659c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   265a0:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   265a2:	d3d7      	bcc.n	26554 <parse_string+0xa4>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   265a4:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   265a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   265ac:	d23b      	bcs.n	26626 <parse_string+0x176>
        const unsigned char *second_sequence = first_sequence + 6;
   265ae:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
   265b0:	1afb      	subs	r3, r7, r3
   265b2:	2b05      	cmp	r3, #5
   265b4:	ddce      	ble.n	26554 <parse_string+0xa4>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   265b6:	79ab      	ldrb	r3, [r5, #6]
   265b8:	2b5c      	cmp	r3, #92	; 0x5c
   265ba:	d1cb      	bne.n	26554 <parse_string+0xa4>
   265bc:	79eb      	ldrb	r3, [r5, #7]
   265be:	2b75      	cmp	r3, #117	; 0x75
   265c0:	d1c8      	bne.n	26554 <parse_string+0xa4>
        second_code = parse_hex4(second_sequence + 2);
   265c2:	f105 0008 	add.w	r0, r5, #8
   265c6:	f018 fdcb 	bl	3f160 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   265ca:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   265ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   265d2:	d2bf      	bcs.n	26554 <parse_string+0xa4>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   265d4:	4b2a      	ldr	r3, [pc, #168]	; (26680 <parse_string+0x1d0>)
   265d6:	f3c0 0009 	ubfx	r0, r0, #0, #10
   265da:	ea03 2686 	and.w	r6, r3, r6, lsl #10
        sequence_length = 12; /* \uXXXX\uXXXX */
   265de:	230c      	movs	r3, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   265e0:	4306      	orrs	r6, r0
   265e2:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
        first_byte_mark = 0xF0; /* 11110000 */
   265e6:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
   265ea:	2104      	movs	r1, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   265ec:	1e48      	subs	r0, r1, #1
   265ee:	b240      	sxtb	r0, r0
   265f0:	fa5f fe80 	uxtb.w	lr, r0
   265f4:	4420      	add	r0, r4
   265f6:	b2f2      	uxtb	r2, r6
   265f8:	f1be 0f00 	cmp.w	lr, #0
   265fc:	d12f      	bne.n	2665e <parse_string+0x1ae>
    if (utf8_length > 1)
   265fe:	2901      	cmp	r1, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   26600:	bf14      	ite	ne
   26602:	ea4c 0202 	orrne.w	r2, ip, r2
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   26606:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   2660a:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
   2660c:	440c      	add	r4, r1
                    if (sequence_length == 0)
   2660e:	e002      	b.n	26616 <parse_string+0x166>
                    *output_pointer++ = '\f';
   26610:	f804 9b01 	strb.w	r9, [r4], #1
            unsigned char sequence_length = 2;
   26614:	2302      	movs	r3, #2
            input_pointer += sequence_length;
   26616:	441d      	add	r5, r3
   26618:	e780      	b.n	2651c <parse_string+0x6c>
                    *output_pointer++ = '\r';
   2661a:	f04f 030d 	mov.w	r3, #13
   2661e:	e7a8      	b.n	26572 <parse_string+0xc2>
                    *output_pointer++ = '\t';
   26620:	f04f 0309 	mov.w	r3, #9
   26624:	e7a5      	b.n	26572 <parse_string+0xc2>
    if (codepoint < 0x80)
   26626:	287f      	cmp	r0, #127	; 0x7f
   26628:	d90a      	bls.n	26640 <parse_string+0x190>
    else if (codepoint < 0x800)
   2662a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   2662e:	d30c      	bcc.n	2664a <parse_string+0x19a>
    else if (codepoint < 0x10000)
   26630:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   26634:	d30e      	bcc.n	26654 <parse_string+0x1a4>
    else if (codepoint <= 0x10FFFF)
   26636:	4b13      	ldr	r3, [pc, #76]	; (26684 <parse_string+0x1d4>)
   26638:	4298      	cmp	r0, r3
   2663a:	d88b      	bhi.n	26554 <parse_string+0xa4>
        sequence_length = 6; /* \uXXXX */
   2663c:	2306      	movs	r3, #6
   2663e:	e7d2      	b.n	265e6 <parse_string+0x136>
   26640:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
   26642:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
   26646:	2101      	movs	r1, #1
   26648:	e7d0      	b.n	265ec <parse_string+0x13c>
        sequence_length = 6; /* \uXXXX */
   2664a:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
   2664c:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
   26650:	2102      	movs	r1, #2
   26652:	e7cb      	b.n	265ec <parse_string+0x13c>
        sequence_length = 6; /* \uXXXX */
   26654:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
   26656:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
   2665a:	2103      	movs	r1, #3
   2665c:	e7c6      	b.n	265ec <parse_string+0x13c>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   2665e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   26662:	f062 027f 	orn	r2, r2, #127	; 0x7f
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   26666:	f10e 3eff 	add.w	lr, lr, #4294967295
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   2666a:	f800 2901 	strb.w	r2, [r0], #-1
        codepoint >>= 6;
   2666e:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   26670:	fa5f fe8e 	uxtb.w	lr, lr
   26674:	e7bf      	b.n	265f6 <parse_string+0x146>
    if (input_pointer != NULL)
   26676:	2d00      	cmp	r5, #0
   26678:	f47f af70 	bne.w	2655c <parse_string+0xac>
    return false;
   2667c:	2000      	movs	r0, #0
   2667e:	e75b      	b.n	26538 <parse_string+0x88>
   26680:	000ffc00 	.word	0x000ffc00
   26684:	0010ffff 	.word	0x0010ffff

00026688 <get_object_item>:
{
   26688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2668a:	460d      	mov	r5, r1
    if ((object == NULL) || (name == NULL))
   2668c:	b360      	cbz	r0, 266e8 <get_object_item+0x60>
   2668e:	b359      	cbz	r1, 266e8 <get_object_item+0x60>
    current_element = object->child;
   26690:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   26692:	b9fa      	cbnz	r2, 266d4 <get_object_item+0x4c>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   26694:	4e17      	ldr	r6, [pc, #92]	; (266f4 <get_object_item+0x6c>)
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   26696:	b33c      	cbz	r4, 266e8 <get_object_item+0x60>
   26698:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   2669a:	b1c3      	cbz	r3, 266ce <get_object_item+0x46>
    if (string1 == string2)
   2669c:	42ab      	cmp	r3, r5
   2669e:	d021      	beq.n	266e4 <get_object_item+0x5c>
   266a0:	f105 3cff 	add.w	ip, r5, #4294967295
   266a4:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   266a6:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   266aa:	460f      	mov	r7, r1
   266ac:	5d8a      	ldrb	r2, [r1, r6]
   266ae:	f002 0203 	and.w	r2, r2, #3
   266b2:	2a01      	cmp	r2, #1
   266b4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   266b8:	bf08      	it	eq
   266ba:	f101 0720 	addeq.w	r7, r1, #32
   266be:	5cb0      	ldrb	r0, [r6, r2]
   266c0:	f000 0003 	and.w	r0, r0, #3
   266c4:	2801      	cmp	r0, #1
   266c6:	bf08      	it	eq
   266c8:	3220      	addeq	r2, #32
   266ca:	4297      	cmp	r7, r2
   266cc:	d00f      	beq.n	266ee <get_object_item+0x66>
            current_element = current_element->next;
   266ce:	6824      	ldr	r4, [r4, #0]
   266d0:	e7e1      	b.n	26696 <get_object_item+0xe>
            current_element = current_element->next;
   266d2:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   266d4:	b144      	cbz	r4, 266e8 <get_object_item+0x60>
   266d6:	6a21      	ldr	r1, [r4, #32]
   266d8:	b121      	cbz	r1, 266e4 <get_object_item+0x5c>
   266da:	4628      	mov	r0, r5
   266dc:	f7f6 fd18 	bl	1d110 <strcmp>
   266e0:	2800      	cmp	r0, #0
   266e2:	d1f6      	bne.n	266d2 <get_object_item+0x4a>
    if ((current_element == NULL) || (current_element->string == NULL)) {
   266e4:	6a23      	ldr	r3, [r4, #32]
   266e6:	b903      	cbnz	r3, 266ea <get_object_item+0x62>
        return NULL;
   266e8:	2400      	movs	r4, #0
}
   266ea:	4620      	mov	r0, r4
   266ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (*string1 == '\0')
   266ee:	2900      	cmp	r1, #0
   266f0:	d1d9      	bne.n	266a6 <get_object_item+0x1e>
   266f2:	e7f7      	b.n	266e4 <get_object_item+0x5c>
   266f4:	00049140 	.word	0x00049140

000266f8 <print_string_ptr>:
{
   266f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   266fc:	4683      	mov	fp, r0
   266fe:	b085      	sub	sp, #20
    if (output_buffer == NULL)
   26700:	460f      	mov	r7, r1
   26702:	b919      	cbnz	r1, 2670c <print_string_ptr+0x14>
        return false;
   26704:	2000      	movs	r0, #0
}
   26706:	b005      	add	sp, #20
   26708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const char quotes[] = "\"\"";
   2670c:	4b48      	ldr	r3, [pc, #288]	; (26830 <print_string_ptr+0x138>)
   2670e:	881a      	ldrh	r2, [r3, #0]
   26710:	789b      	ldrb	r3, [r3, #2]
   26712:	f8ad 200c 	strh.w	r2, [sp, #12]
   26716:	f88d 300e 	strb.w	r3, [sp, #14]
    if (input == NULL)
   2671a:	b318      	cbz	r0, 26764 <print_string_ptr+0x6c>
   2671c:	4602      	mov	r2, r0
    size_t escape_characters = 0;
   2671e:	2500      	movs	r5, #0
   26720:	4692      	mov	sl, r2
    for (input_pointer = input; *input_pointer; input_pointer++)
   26722:	f812 3b01 	ldrb.w	r3, [r2], #1
   26726:	bb5b      	cbnz	r3, 26780 <print_string_ptr+0x88>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   26728:	ebaa 0a0b 	sub.w	sl, sl, fp
   2672c:	44aa      	add	sl, r5
    output = ensure(output_buffer, output_length + sizeof(quotes));
   2672e:	f10a 0103 	add.w	r1, sl, #3
   26732:	4638      	mov	r0, r7
   26734:	f018 fd73 	bl	3f21e <ensure>
    if (output == NULL)
   26738:	4606      	mov	r6, r0
   2673a:	2800      	cmp	r0, #0
   2673c:	d0e2      	beq.n	26704 <print_string_ptr+0xc>
    if (escape_characters == 0)
   2673e:	2322      	movs	r3, #34	; 0x22
   26740:	1c44      	adds	r4, r0, #1
   26742:	f10a 0901 	add.w	r9, sl, #1
   26746:	f10a 0802 	add.w	r8, sl, #2
        output[0] = '\"';
   2674a:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   2674c:	bb55      	cbnz	r5, 267a4 <print_string_ptr+0xac>
   2674e:	4652      	mov	r2, sl
   26750:	4659      	mov	r1, fp
   26752:	4620      	mov	r0, r4
   26754:	f019 ff62 	bl	4061c <memcpy>
        output[output_length + 1] = '\"';
   26758:	2322      	movs	r3, #34	; 0x22
   2675a:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   2675e:	f806 5008 	strb.w	r5, [r6, r8]
        return true;
   26762:	e00b      	b.n	2677c <print_string_ptr+0x84>
        output = ensure(output_buffer, sizeof(quotes));
   26764:	2103      	movs	r1, #3
   26766:	4638      	mov	r0, r7
   26768:	f018 fd59 	bl	3f21e <ensure>
        if (output == NULL)
   2676c:	2800      	cmp	r0, #0
   2676e:	d0c9      	beq.n	26704 <print_string_ptr+0xc>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   26770:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   26774:	a903      	add	r1, sp, #12
   26776:	1ad2      	subs	r2, r2, r3
   26778:	f01a f95b 	bl	40a32 <strncpy>
    return true;
   2677c:	2001      	movs	r0, #1
   2677e:	e7c2      	b.n	26706 <print_string_ptr+0xe>
        switch (*input_pointer)
   26780:	2b0d      	cmp	r3, #13
   26782:	d807      	bhi.n	26794 <print_string_ptr+0x9c>
   26784:	2b0c      	cmp	r3, #12
   26786:	d203      	bcs.n	26790 <print_string_ptr+0x98>
   26788:	f1a3 0108 	sub.w	r1, r3, #8
   2678c:	2902      	cmp	r1, #2
   2678e:	d805      	bhi.n	2679c <print_string_ptr+0xa4>
                escape_characters++;
   26790:	3501      	adds	r5, #1
                break;
   26792:	e7c5      	b.n	26720 <print_string_ptr+0x28>
        switch (*input_pointer)
   26794:	2b22      	cmp	r3, #34	; 0x22
   26796:	d0fb      	beq.n	26790 <print_string_ptr+0x98>
   26798:	2b5c      	cmp	r3, #92	; 0x5c
   2679a:	d0f9      	beq.n	26790 <print_string_ptr+0x98>
                if (*input_pointer < 32)
   2679c:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   2679e:	bf98      	it	ls
   267a0:	3505      	addls	r5, #5
   267a2:	e7bd      	b.n	26720 <print_string_ptr+0x28>
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   267a4:	f10b 33ff 	add.w	r3, fp, #4294967295
                    *output_pointer = 'f';
   267a8:	f04f 0a66 	mov.w	sl, #102	; 0x66
            *output_pointer++ = '\\';
   267ac:	f04f 0b5c 	mov.w	fp, #92	; 0x5c
   267b0:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   267b2:	9a01      	ldr	r2, [sp, #4]
   267b4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   267b8:	9201      	str	r2, [sp, #4]
   267ba:	b92b      	cbnz	r3, 267c8 <print_string_ptr+0xd0>
    output[output_length + 1] = '\"';
   267bc:	2222      	movs	r2, #34	; 0x22
   267be:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   267c2:	f806 3008 	strb.w	r3, [r6, r8]
   267c6:	e7d9      	b.n	2677c <print_string_ptr+0x84>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   267c8:	2b1f      	cmp	r3, #31
   267ca:	d907      	bls.n	267dc <print_string_ptr+0xe4>
   267cc:	2b22      	cmp	r3, #34	; 0x22
   267ce:	d005      	beq.n	267dc <print_string_ptr+0xe4>
   267d0:	2b5c      	cmp	r3, #92	; 0x5c
   267d2:	d003      	beq.n	267dc <print_string_ptr+0xe4>
            *output_pointer = *input_pointer;
   267d4:	4620      	mov	r0, r4
   267d6:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   267d8:	1c44      	adds	r4, r0, #1
   267da:	e7ea      	b.n	267b2 <print_string_ptr+0xba>
            *output_pointer++ = '\\';
   267dc:	4620      	mov	r0, r4
            switch (*input_pointer)
   267de:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   267e0:	f800 bb01 	strb.w	fp, [r0], #1
            switch (*input_pointer)
   267e4:	781b      	ldrb	r3, [r3, #0]
   267e6:	2b0c      	cmp	r3, #12
   267e8:	d011      	beq.n	2680e <print_string_ptr+0x116>
   267ea:	d808      	bhi.n	267fe <print_string_ptr+0x106>
   267ec:	2b09      	cmp	r3, #9
   267ee:	d013      	beq.n	26818 <print_string_ptr+0x120>
   267f0:	2b0a      	cmp	r3, #10
   267f2:	d00f      	beq.n	26814 <print_string_ptr+0x11c>
   267f4:	2b08      	cmp	r3, #8
   267f6:	d111      	bne.n	2681c <print_string_ptr+0x124>
                    *output_pointer = 'b';
   267f8:	2362      	movs	r3, #98	; 0x62
                    *output_pointer = 't';
   267fa:	7063      	strb	r3, [r4, #1]
                    break;
   267fc:	e7ec      	b.n	267d8 <print_string_ptr+0xe0>
            switch (*input_pointer)
   267fe:	2b22      	cmp	r3, #34	; 0x22
   26800:	d0fb      	beq.n	267fa <print_string_ptr+0x102>
   26802:	2b5c      	cmp	r3, #92	; 0x5c
   26804:	d0f9      	beq.n	267fa <print_string_ptr+0x102>
   26806:	2b0d      	cmp	r3, #13
   26808:	d108      	bne.n	2681c <print_string_ptr+0x124>
                    *output_pointer = 'r';
   2680a:	2372      	movs	r3, #114	; 0x72
   2680c:	e7f5      	b.n	267fa <print_string_ptr+0x102>
                    *output_pointer = 'f';
   2680e:	f884 a001 	strb.w	sl, [r4, #1]
                    break;
   26812:	e7e1      	b.n	267d8 <print_string_ptr+0xe0>
                    *output_pointer = 'n';
   26814:	236e      	movs	r3, #110	; 0x6e
   26816:	e7f0      	b.n	267fa <print_string_ptr+0x102>
                    *output_pointer = 't';
   26818:	2374      	movs	r3, #116	; 0x74
   2681a:	e7ee      	b.n	267fa <print_string_ptr+0x102>
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   2681c:	6839      	ldr	r1, [r7, #0]
   2681e:	687d      	ldr	r5, [r7, #4]
   26820:	1a41      	subs	r1, r0, r1
   26822:	4a04      	ldr	r2, [pc, #16]	; (26834 <print_string_ptr+0x13c>)
   26824:	1a69      	subs	r1, r5, r1
   26826:	f015 fcd7 	bl	3c1d8 <sniprintf>
                    output_pointer += 4;
   2682a:	1d60      	adds	r0, r4, #5
                    break;
   2682c:	e7d4      	b.n	267d8 <print_string_ptr+0xe0>
   2682e:	bf00      	nop
   26830:	00045100 	.word	0x00045100
   26834:	000450fa 	.word	0x000450fa

00026838 <print_value>:
{
   26838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2683c:	460c      	mov	r4, r1
   2683e:	b08d      	sub	sp, #52	; 0x34
    if ((item == NULL) || (output_buffer == NULL))
   26840:	4606      	mov	r6, r0
   26842:	b908      	cbnz	r0, 26848 <print_value+0x10>
        return false;
   26844:	2500      	movs	r5, #0
   26846:	e01d      	b.n	26884 <print_value+0x4c>
    if ((item == NULL) || (output_buffer == NULL))
   26848:	2900      	cmp	r1, #0
   2684a:	d0fb      	beq.n	26844 <print_value+0xc>
    switch ((item->type) & 0xFF)
   2684c:	7b05      	ldrb	r5, [r0, #12]
   2684e:	2d08      	cmp	r5, #8
   26850:	d053      	beq.n	268fa <print_value+0xc2>
   26852:	dc1b      	bgt.n	2688c <print_value+0x54>
   26854:	2d02      	cmp	r5, #2
   26856:	d04e      	beq.n	268f6 <print_value+0xbe>
   26858:	2d04      	cmp	r5, #4
   2685a:	d037      	beq.n	268cc <print_value+0x94>
   2685c:	2d01      	cmp	r5, #1
   2685e:	d1f1      	bne.n	26844 <print_value+0xc>
            const char buff[] = "false";
   26860:	4b87      	ldr	r3, [pc, #540]	; (26a80 <print_value+0x248>)
            output = ensure(output_buffer, sizeof(buff));
   26862:	2106      	movs	r1, #6
            const char buff[] = "false";
   26864:	6818      	ldr	r0, [r3, #0]
   26866:	889b      	ldrh	r3, [r3, #4]
   26868:	9005      	str	r0, [sp, #20]
            output = ensure(output_buffer, sizeof(buff));
   2686a:	4620      	mov	r0, r4
            const char buff[] = "false";
   2686c:	f8ad 3018 	strh.w	r3, [sp, #24]
            output = ensure(output_buffer, sizeof(buff));
   26870:	f018 fcd5 	bl	3f21e <ensure>
            if (output == NULL)
   26874:	2800      	cmp	r0, #0
   26876:	d0e5      	beq.n	26844 <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   26878:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   2687c:	a905      	add	r1, sp, #20
   2687e:	1ad2      	subs	r2, r2, r3
   26880:	f01a f8d7 	bl	40a32 <strncpy>
}
   26884:	4628      	mov	r0, r5
   26886:	b00d      	add	sp, #52	; 0x34
   26888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch ((item->type) & 0xFF)
   2688c:	2d20      	cmp	r5, #32
   2688e:	d07b      	beq.n	26988 <print_value+0x150>
   26890:	dc06      	bgt.n	268a0 <print_value+0x68>
   26892:	2d10      	cmp	r5, #16
   26894:	d1d6      	bne.n	26844 <print_value+0xc>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   26896:	6900      	ldr	r0, [r0, #16]
   26898:	f7ff ff2e 	bl	266f8 <print_string_ptr>
   2689c:	4605      	mov	r5, r0
   2689e:	e7f1      	b.n	26884 <print_value+0x4c>
    switch ((item->type) & 0xFF)
   268a0:	2d40      	cmp	r5, #64	; 0x40
   268a2:	f000 80bc 	beq.w	26a1e <print_value+0x1e6>
   268a6:	2d80      	cmp	r5, #128	; 0x80
   268a8:	d1cc      	bne.n	26844 <print_value+0xc>
            if (item->valuestring == NULL)
   268aa:	6900      	ldr	r0, [r0, #16]
   268ac:	2800      	cmp	r0, #0
   268ae:	d0c9      	beq.n	26844 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   268b0:	f7f6 fc38 	bl	1d124 <strlen>
   268b4:	1c45      	adds	r5, r0, #1
            output = ensure(output_buffer, raw_length);
   268b6:	4629      	mov	r1, r5
   268b8:	4620      	mov	r0, r4
   268ba:	f018 fcb0 	bl	3f21e <ensure>
            if (output == NULL)
   268be:	2800      	cmp	r0, #0
   268c0:	d0c0      	beq.n	26844 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   268c2:	462a      	mov	r2, r5
   268c4:	6931      	ldr	r1, [r6, #16]
   268c6:	f019 fea9 	bl	4061c <memcpy>
   268ca:	e012      	b.n	268f2 <print_value+0xba>
            const char buff[] = "null";
   268cc:	4b6d      	ldr	r3, [pc, #436]	; (26a84 <print_value+0x24c>)
            const char buff[] = "true";
   268ce:	6818      	ldr	r0, [r3, #0]
   268d0:	791b      	ldrb	r3, [r3, #4]
   268d2:	9005      	str	r0, [sp, #20]
            output = ensure(output_buffer, sizeof(buff));
   268d4:	2105      	movs	r1, #5
   268d6:	4620      	mov	r0, r4
            const char buff[] = "true";
   268d8:	f88d 3018 	strb.w	r3, [sp, #24]
            output = ensure(output_buffer, sizeof(buff));
   268dc:	f018 fc9f 	bl	3f21e <ensure>
            if (output == NULL)
   268e0:	4605      	mov	r5, r0
   268e2:	2800      	cmp	r0, #0
   268e4:	d0ce      	beq.n	26884 <print_value+0x4c>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   268e6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   268ea:	a905      	add	r1, sp, #20
   268ec:	1ad2      	subs	r2, r2, r3
   268ee:	f01a f8a0 	bl	40a32 <strncpy>
    return true;
   268f2:	2501      	movs	r5, #1
   268f4:	e7c6      	b.n	26884 <print_value+0x4c>
            const char buff[] = "true";
   268f6:	4b64      	ldr	r3, [pc, #400]	; (26a88 <print_value+0x250>)
   268f8:	e7e9      	b.n	268ce <print_value+0x96>
    double d = item->valuedouble;
   268fa:	e9d0 8906 	ldrd	r8, r9, [r0, #24]
    if ((d * 0) != 0)
   268fe:	2200      	movs	r2, #0
   26900:	2300      	movs	r3, #0
   26902:	4640      	mov	r0, r8
   26904:	4649      	mov	r1, r9
   26906:	f7f5 ff57 	bl	1c7b8 <__aeabi_dmul>
   2690a:	2200      	movs	r2, #0
   2690c:	2300      	movs	r3, #0
   2690e:	f7f6 f9bb 	bl	1cc88 <__aeabi_dcmpeq>
   26912:	ae05      	add	r6, sp, #20
   26914:	b9b0      	cbnz	r0, 26944 <print_value+0x10c>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   26916:	495b      	ldr	r1, [pc, #364]	; (26a84 <print_value+0x24c>)
   26918:	4630      	mov	r0, r6
   2691a:	f01a f854 	bl	409c6 <strcpy>
   2691e:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   26920:	1c69      	adds	r1, r5, #1
   26922:	4620      	mov	r0, r4
   26924:	f018 fc7b 	bl	3f21e <ensure>
    if (output_pointer == NULL)
   26928:	2800      	cmp	r0, #0
   2692a:	d08b      	beq.n	26844 <print_value+0xc>
    for (i = 0; i < ((size_t)length); i++)
   2692c:	2300      	movs	r3, #0
        if (number_buffer[i] == decimal_point)
   2692e:	5cf2      	ldrb	r2, [r6, r3]
        output_pointer[i] = number_buffer[i];
   26930:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < ((size_t)length); i++)
   26932:	3301      	adds	r3, #1
   26934:	429d      	cmp	r5, r3
   26936:	d1fa      	bne.n	2692e <print_value+0xf6>
    output_pointer[i] = '\0';
   26938:	2300      	movs	r3, #0
   2693a:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   2693c:	68a3      	ldr	r3, [r4, #8]
   2693e:	441d      	add	r5, r3
   26940:	60a5      	str	r5, [r4, #8]
    return true;
   26942:	e7d6      	b.n	268f2 <print_value+0xba>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   26944:	4a51      	ldr	r2, [pc, #324]	; (26a8c <print_value+0x254>)
   26946:	211a      	movs	r1, #26
   26948:	e9cd 8900 	strd	r8, r9, [sp]
   2694c:	4630      	mov	r0, r6
   2694e:	f015 fc43 	bl	3c1d8 <sniprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   26952:	aa02      	add	r2, sp, #8
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   26954:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   26956:	494e      	ldr	r1, [pc, #312]	; (26a90 <print_value+0x258>)
   26958:	4630      	mov	r0, r6
   2695a:	f015 fc71 	bl	3c240 <siscanf>
   2695e:	2801      	cmp	r0, #1
   26960:	d106      	bne.n	26970 <print_value+0x138>
   26962:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   26966:	4640      	mov	r0, r8
   26968:	4649      	mov	r1, r9
   2696a:	f7f6 f98d 	bl	1cc88 <__aeabi_dcmpeq>
   2696e:	b938      	cbnz	r0, 26980 <print_value+0x148>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   26970:	e9cd 8900 	strd	r8, r9, [sp]
   26974:	4a47      	ldr	r2, [pc, #284]	; (26a94 <print_value+0x25c>)
   26976:	211a      	movs	r1, #26
   26978:	4630      	mov	r0, r6
   2697a:	f015 fc2d 	bl	3c1d8 <sniprintf>
   2697e:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   26980:	2d19      	cmp	r5, #25
   26982:	f73f af5f 	bgt.w	26844 <print_value+0xc>
   26986:	e7cb      	b.n	26920 <print_value+0xe8>
            return print_array(item, output_buffer);
   26988:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   2698a:	2101      	movs	r1, #1
   2698c:	4620      	mov	r0, r4
   2698e:	f018 fc46 	bl	3f21e <ensure>
    if (output_pointer == NULL)
   26992:	2800      	cmp	r0, #0
   26994:	f43f af56 	beq.w	26844 <print_value+0xc>
    *output_pointer = '[';
   26998:	235b      	movs	r3, #91	; 0x5b
            *output_pointer++ = ',';
   2699a:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   2699c:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   269a0:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   269a2:	68a3      	ldr	r3, [r4, #8]
   269a4:	3301      	adds	r3, #1
   269a6:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   269a8:	68e3      	ldr	r3, [r4, #12]
   269aa:	3301      	adds	r3, #1
   269ac:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   269ae:	b96e      	cbnz	r6, 269cc <print_value+0x194>
    output_pointer = ensure(output_buffer, 2);
   269b0:	2102      	movs	r1, #2
   269b2:	4620      	mov	r0, r4
   269b4:	f018 fc33 	bl	3f21e <ensure>
    if (output_pointer == NULL)
   269b8:	2800      	cmp	r0, #0
   269ba:	f43f af43 	beq.w	26844 <print_value+0xc>
    *output_pointer++ = ']';
   269be:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   269c0:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   269c2:	7003      	strb	r3, [r0, #0]
    output_buffer->depth--;
   269c4:	68e3      	ldr	r3, [r4, #12]
   269c6:	3b01      	subs	r3, #1
   269c8:	60e3      	str	r3, [r4, #12]
   269ca:	e792      	b.n	268f2 <print_value+0xba>
        if (!print_value(current_element, output_buffer))
   269cc:	4621      	mov	r1, r4
   269ce:	4630      	mov	r0, r6
   269d0:	f7ff ff32 	bl	26838 <print_value>
   269d4:	2800      	cmp	r0, #0
   269d6:	f43f af35 	beq.w	26844 <print_value+0xc>
        update_offset(output_buffer);
   269da:	4620      	mov	r0, r4
   269dc:	f018 fbf6 	bl	3f1cc <update_offset>
        if (current_element->next)
   269e0:	6833      	ldr	r3, [r6, #0]
   269e2:	b1bb      	cbz	r3, 26a14 <print_value+0x1dc>
            length = (size_t) (output_buffer->format ? 2 : 1);
   269e4:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   269e6:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   269e8:	2b00      	cmp	r3, #0
   269ea:	bf14      	ite	ne
   269ec:	f04f 0902 	movne.w	r9, #2
   269f0:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   269f4:	f109 0101 	add.w	r1, r9, #1
   269f8:	f018 fc11 	bl	3f21e <ensure>
            if (output_pointer == NULL)
   269fc:	2800      	cmp	r0, #0
   269fe:	f43f af21 	beq.w	26844 <print_value+0xc>
            *output_pointer++ = ',';
   26a02:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   26a04:	6963      	ldr	r3, [r4, #20]
   26a06:	b93b      	cbnz	r3, 26a18 <print_value+0x1e0>
            *output_pointer++ = ',';
   26a08:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   26a0a:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   26a0e:	68a3      	ldr	r3, [r4, #8]
   26a10:	444b      	add	r3, r9
   26a12:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   26a14:	6836      	ldr	r6, [r6, #0]
   26a16:	e7ca      	b.n	269ae <print_value+0x176>
                *output_pointer++ = ' ';
   26a18:	1c83      	adds	r3, r0, #2
   26a1a:	7045      	strb	r5, [r0, #1]
   26a1c:	e7f5      	b.n	26a0a <print_value+0x1d2>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   26a1e:	694b      	ldr	r3, [r1, #20]
            return print_object(item, output_buffer);
   26a20:	6885      	ldr	r5, [r0, #8]
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   26a22:	2b00      	cmp	r3, #0
   26a24:	bf14      	ite	ne
   26a26:	2702      	movne	r7, #2
   26a28:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   26a2a:	4620      	mov	r0, r4
   26a2c:	1c79      	adds	r1, r7, #1
   26a2e:	f018 fbf6 	bl	3f21e <ensure>
    if (output_pointer == NULL)
   26a32:	2800      	cmp	r0, #0
   26a34:	f43f af06 	beq.w	26844 <print_value+0xc>
    *output_pointer++ = '{';
   26a38:	237b      	movs	r3, #123	; 0x7b
   26a3a:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   26a3c:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   26a3e:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   26a40:	3201      	adds	r2, #1
   26a42:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   26a44:	b10b      	cbz	r3, 26a4a <print_value+0x212>
        *output_pointer++ = '\n';
   26a46:	230a      	movs	r3, #10
   26a48:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   26a4a:	68a3      	ldr	r3, [r4, #8]
        *output_pointer++ = ':';
   26a4c:	f04f 083a 	mov.w	r8, #58	; 0x3a
    output_buffer->offset += length;
   26a50:	443b      	add	r3, r7
                *output_pointer++ = '\t';
   26a52:	2709      	movs	r7, #9
    output_buffer->offset += length;
   26a54:	60a3      	str	r3, [r4, #8]
    while (current_item)
   26a56:	6963      	ldr	r3, [r4, #20]
   26a58:	b9f5      	cbnz	r5, 26a98 <print_value+0x260>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   26a5a:	2b00      	cmp	r3, #0
   26a5c:	d077      	beq.n	26b4e <print_value+0x316>
   26a5e:	68e1      	ldr	r1, [r4, #12]
   26a60:	3101      	adds	r1, #1
   26a62:	4620      	mov	r0, r4
   26a64:	f018 fbdb 	bl	3f21e <ensure>
    if (output_pointer == NULL)
   26a68:	2800      	cmp	r0, #0
   26a6a:	f43f aeeb 	beq.w	26844 <print_value+0xc>
    if (output_buffer->format)
   26a6e:	6963      	ldr	r3, [r4, #20]
   26a70:	2b00      	cmp	r3, #0
   26a72:	d176      	bne.n	26b62 <print_value+0x32a>
   26a74:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   26a76:	227d      	movs	r2, #125	; 0x7d
   26a78:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   26a7a:	2200      	movs	r2, #0
   26a7c:	705a      	strb	r2, [r3, #1]
   26a7e:	e7a1      	b.n	269c4 <print_value+0x18c>
   26a80:	0004511a 	.word	0x0004511a
   26a84:	00045103 	.word	0x00045103
   26a88:	00045120 	.word	0x00045120
   26a8c:	00045108 	.word	0x00045108
   26a90:	0004510f 	.word	0x0004510f
   26a94:	00045113 	.word	0x00045113
        if (output_buffer->format)
   26a98:	b173      	cbz	r3, 26ab8 <print_value+0x280>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   26a9a:	68e1      	ldr	r1, [r4, #12]
   26a9c:	4620      	mov	r0, r4
   26a9e:	f018 fbbe 	bl	3f21e <ensure>
            if (output_pointer == NULL)
   26aa2:	2800      	cmp	r0, #0
   26aa4:	f43f aece 	beq.w	26844 <print_value+0xc>
   26aa8:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   26aaa:	68e1      	ldr	r1, [r4, #12]
   26aac:	1a13      	subs	r3, r2, r0
   26aae:	428b      	cmp	r3, r1
   26ab0:	d34a      	bcc.n	26b48 <print_value+0x310>
            output_buffer->offset += output_buffer->depth;
   26ab2:	68a3      	ldr	r3, [r4, #8]
   26ab4:	440b      	add	r3, r1
   26ab6:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   26ab8:	4621      	mov	r1, r4
   26aba:	6a28      	ldr	r0, [r5, #32]
   26abc:	f7ff fe1c 	bl	266f8 <print_string_ptr>
   26ac0:	2800      	cmp	r0, #0
   26ac2:	f43f aebf 	beq.w	26844 <print_value+0xc>
        update_offset(output_buffer);
   26ac6:	4620      	mov	r0, r4
   26ac8:	f018 fb80 	bl	3f1cc <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   26acc:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   26ace:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   26ad0:	2b00      	cmp	r3, #0
   26ad2:	bf14      	ite	ne
   26ad4:	2602      	movne	r6, #2
   26ad6:	2601      	moveq	r6, #1
        output_pointer = ensure(output_buffer, length);
   26ad8:	4631      	mov	r1, r6
   26ada:	f018 fba0 	bl	3f21e <ensure>
        if (output_pointer == NULL)
   26ade:	2800      	cmp	r0, #0
   26ae0:	f43f aeb0 	beq.w	26844 <print_value+0xc>
        *output_pointer++ = ':';
   26ae4:	f880 8000 	strb.w	r8, [r0]
        if (output_buffer->format)
   26ae8:	6963      	ldr	r3, [r4, #20]
   26aea:	b103      	cbz	r3, 26aee <print_value+0x2b6>
            *output_pointer++ = '\t';
   26aec:	7047      	strb	r7, [r0, #1]
        output_buffer->offset += length;
   26aee:	68a1      	ldr	r1, [r4, #8]
        if (!print_value(current_item, output_buffer))
   26af0:	4628      	mov	r0, r5
        output_buffer->offset += length;
   26af2:	4431      	add	r1, r6
   26af4:	60a1      	str	r1, [r4, #8]
        if (!print_value(current_item, output_buffer))
   26af6:	4621      	mov	r1, r4
   26af8:	f7ff fe9e 	bl	26838 <print_value>
   26afc:	2800      	cmp	r0, #0
   26afe:	f43f aea1 	beq.w	26844 <print_value+0xc>
        update_offset(output_buffer);
   26b02:	4620      	mov	r0, r4
   26b04:	f018 fb62 	bl	3f1cc <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   26b08:	682e      	ldr	r6, [r5, #0]
   26b0a:	6963      	ldr	r3, [r4, #20]
   26b0c:	3600      	adds	r6, #0
   26b0e:	bf18      	it	ne
   26b10:	2601      	movne	r6, #1
   26b12:	2b00      	cmp	r3, #0
   26b14:	bf18      	it	ne
   26b16:	3601      	addne	r6, #1
        output_pointer = ensure(output_buffer, length + 1);
   26b18:	4620      	mov	r0, r4
   26b1a:	1c71      	adds	r1, r6, #1
   26b1c:	f018 fb7f 	bl	3f21e <ensure>
        if (output_pointer == NULL)
   26b20:	2800      	cmp	r0, #0
   26b22:	f43f ae8f 	beq.w	26844 <print_value+0xc>
        if (current_item->next)
   26b26:	682b      	ldr	r3, [r5, #0]
   26b28:	b113      	cbz	r3, 26b30 <print_value+0x2f8>
            *output_pointer++ = ',';
   26b2a:	232c      	movs	r3, #44	; 0x2c
   26b2c:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   26b30:	6963      	ldr	r3, [r4, #20]
   26b32:	b113      	cbz	r3, 26b3a <print_value+0x302>
            *output_pointer++ = '\n';
   26b34:	230a      	movs	r3, #10
   26b36:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   26b3a:	2300      	movs	r3, #0
   26b3c:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   26b3e:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   26b40:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   26b42:	441e      	add	r6, r3
   26b44:	60a6      	str	r6, [r4, #8]
        current_item = current_item->next;
   26b46:	e786      	b.n	26a56 <print_value+0x21e>
                *output_pointer++ = '\t';
   26b48:	f802 7b01 	strb.w	r7, [r2], #1
   26b4c:	e7ad      	b.n	26aaa <print_value+0x272>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   26b4e:	2102      	movs	r1, #2
   26b50:	e787      	b.n	26a62 <print_value+0x22a>
            *output_pointer++ = '\t';
   26b52:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   26b56:	68e2      	ldr	r2, [r4, #12]
   26b58:	1a19      	subs	r1, r3, r0
   26b5a:	3a01      	subs	r2, #1
   26b5c:	4291      	cmp	r1, r2
   26b5e:	d3f8      	bcc.n	26b52 <print_value+0x31a>
   26b60:	e789      	b.n	26a76 <print_value+0x23e>
    if (output_buffer->format)
   26b62:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   26b64:	2509      	movs	r5, #9
   26b66:	e7f6      	b.n	26b56 <print_value+0x31e>

00026b68 <print.constprop.14>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   26b68:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   26b6a:	4d24      	ldr	r5, [pc, #144]	; (26bfc <print.constprop.14+0x94>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   26b6c:	b08b      	sub	sp, #44	; 0x2c
   26b6e:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   26b70:	2224      	movs	r2, #36	; 0x24
   26b72:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   26b74:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   26b76:	a801      	add	r0, sp, #4
   26b78:	f019 fd70 	bl	4065c <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   26b7c:	682b      	ldr	r3, [r5, #0]
   26b7e:	f44f 7080 	mov.w	r0, #256	; 0x100
   26b82:	4798      	blx	r3
    buffer->length = default_buffer_size;
   26b84:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   26b88:	4603      	mov	r3, r0
    buffer->format = format;
   26b8a:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   26b8c:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   26b8e:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   26b90:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   26b92:	462f      	mov	r7, r5
   26b94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   26b98:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   26b9c:	b17b      	cbz	r3, 26bbe <print.constprop.14+0x56>
    if (!print_value(item, buffer))
   26b9e:	a901      	add	r1, sp, #4
   26ba0:	4620      	mov	r0, r4
   26ba2:	f7ff fe49 	bl	26838 <print_value>
   26ba6:	b150      	cbz	r0, 26bbe <print.constprop.14+0x56>
    update_offset(buffer);
   26ba8:	a801      	add	r0, sp, #4
   26baa:	f018 fb0f 	bl	3f1cc <update_offset>
    if (hooks->reallocate != NULL)
   26bae:	68ae      	ldr	r6, [r5, #8]
   26bb0:	9903      	ldr	r1, [sp, #12]
   26bb2:	b15e      	cbz	r6, 26bcc <print.constprop.14+0x64>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   26bb4:	3101      	adds	r1, #1
   26bb6:	9801      	ldr	r0, [sp, #4]
   26bb8:	47b0      	blx	r6
        if (printed == NULL) {
   26bba:	4604      	mov	r4, r0
   26bbc:	b9d0      	cbnz	r0, 26bf4 <print.constprop.14+0x8c>
    if (buffer->buffer != NULL)
   26bbe:	9c01      	ldr	r4, [sp, #4]
   26bc0:	b1c4      	cbz	r4, 26bf4 <print.constprop.14+0x8c>
        hooks->deallocate(buffer->buffer);
   26bc2:	4620      	mov	r0, r4
   26bc4:	687b      	ldr	r3, [r7, #4]
   26bc6:	4798      	blx	r3
    return NULL;
   26bc8:	2400      	movs	r4, #0
   26bca:	e013      	b.n	26bf4 <print.constprop.14+0x8c>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   26bcc:	682b      	ldr	r3, [r5, #0]
   26bce:	1c48      	adds	r0, r1, #1
   26bd0:	4798      	blx	r3
        if (printed == NULL)
   26bd2:	4604      	mov	r4, r0
   26bd4:	2800      	cmp	r0, #0
   26bd6:	d0f2      	beq.n	26bbe <print.constprop.14+0x56>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   26bd8:	9a03      	ldr	r2, [sp, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26bda:	9b02      	ldr	r3, [sp, #8]
   26bdc:	3201      	adds	r2, #1
   26bde:	429a      	cmp	r2, r3
   26be0:	bf28      	it	cs
   26be2:	461a      	movcs	r2, r3
   26be4:	9901      	ldr	r1, [sp, #4]
   26be6:	f019 fd19 	bl	4061c <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   26bea:	9b03      	ldr	r3, [sp, #12]
   26bec:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   26bee:	686b      	ldr	r3, [r5, #4]
   26bf0:	9801      	ldr	r0, [sp, #4]
   26bf2:	4798      	blx	r3
}
   26bf4:	4620      	mov	r0, r4
   26bf6:	b00b      	add	sp, #44	; 0x2c
   26bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26bfa:	bf00      	nop
   26bfc:	200320bc 	.word	0x200320bc

00026c00 <cJSON_strdup.isra.2.constprop.16>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   26c00:	b570      	push	{r4, r5, r6, lr}
    if (string == NULL)
   26c02:	4605      	mov	r5, r0
   26c04:	b170      	cbz	r0, 26c24 <cJSON_strdup.isra.2.constprop.16+0x24>
    length = strlen((const char*)string) + sizeof("");
   26c06:	f7f6 fa8d 	bl	1d124 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   26c0a:	4b07      	ldr	r3, [pc, #28]	; (26c28 <cJSON_strdup.isra.2.constprop.16+0x28>)
    length = strlen((const char*)string) + sizeof("");
   26c0c:	1c46      	adds	r6, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   26c0e:	681b      	ldr	r3, [r3, #0]
   26c10:	4630      	mov	r0, r6
   26c12:	4798      	blx	r3
    if (copy == NULL)
   26c14:	4604      	mov	r4, r0
   26c16:	b118      	cbz	r0, 26c20 <cJSON_strdup.isra.2.constprop.16+0x20>
   26c18:	4632      	mov	r2, r6
   26c1a:	4629      	mov	r1, r5
   26c1c:	f019 fcfe 	bl	4061c <memcpy>
}
   26c20:	4620      	mov	r0, r4
   26c22:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
   26c24:	4604      	mov	r4, r0
   26c26:	e7fb      	b.n	26c20 <cJSON_strdup.isra.2.constprop.16+0x20>
   26c28:	200320bc 	.word	0x200320bc

00026c2c <add_item_to_object.constprop.12>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   26c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26c2e:	460e      	mov	r6, r1
   26c30:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL))
   26c32:	4607      	mov	r7, r0
   26c34:	b1f0      	cbz	r0, 26c74 <add_item_to_object.constprop.12+0x48>
   26c36:	b1e9      	cbz	r1, 26c74 <add_item_to_object.constprop.12+0x48>
   26c38:	b1e2      	cbz	r2, 26c74 <add_item_to_object.constprop.12+0x48>
    if (constant_key)
   26c3a:	b193      	cbz	r3, 26c62 <add_item_to_object.constprop.12+0x36>
        new_type = item->type | cJSON_StringIsConst;
   26c3c:	68d5      	ldr	r5, [r2, #12]
   26c3e:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   26c42:	68e3      	ldr	r3, [r4, #12]
   26c44:	059b      	lsls	r3, r3, #22
   26c46:	d404      	bmi.n	26c52 <add_item_to_object.constprop.12+0x26>
   26c48:	6a20      	ldr	r0, [r4, #32]
   26c4a:	b110      	cbz	r0, 26c52 <add_item_to_object.constprop.12+0x26>
        hooks->deallocate(item->string);
   26c4c:	4b0a      	ldr	r3, [pc, #40]	; (26c78 <add_item_to_object.constprop.12+0x4c>)
   26c4e:	685b      	ldr	r3, [r3, #4]
   26c50:	4798      	blx	r3
    item->string = new_key;
   26c52:	6226      	str	r6, [r4, #32]
    item->type = new_type;
   26c54:	60e5      	str	r5, [r4, #12]
    return add_item_to_array(object, item);
   26c56:	4621      	mov	r1, r4
   26c58:	4638      	mov	r0, r7
}
   26c5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   26c5e:	f018 bac2 	b.w	3f1e6 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   26c62:	4608      	mov	r0, r1
   26c64:	f7ff ffcc 	bl	26c00 <cJSON_strdup.isra.2.constprop.16>
        if (new_key == NULL)
   26c68:	4606      	mov	r6, r0
   26c6a:	b118      	cbz	r0, 26c74 <add_item_to_object.constprop.12+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   26c6c:	68e5      	ldr	r5, [r4, #12]
   26c6e:	f425 7500 	bic.w	r5, r5, #512	; 0x200
   26c72:	e7e6      	b.n	26c42 <add_item_to_object.constprop.12+0x16>
}
   26c74:	2000      	movs	r0, #0
   26c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26c78:	200320bc 	.word	0x200320bc

00026c7c <cJSON_InitHooks>:
{
   26c7c:	b530      	push	{r4, r5, lr}
   26c7e:	4b0d      	ldr	r3, [pc, #52]	; (26cb4 <cJSON_InitHooks+0x38>)
   26c80:	4d0d      	ldr	r5, [pc, #52]	; (26cb8 <cJSON_InitHooks+0x3c>)
   26c82:	4c0e      	ldr	r4, [pc, #56]	; (26cbc <cJSON_InitHooks+0x40>)
    if (hooks == NULL)
   26c84:	b920      	cbnz	r0, 26c90 <cJSON_InitHooks+0x14>
        global_hooks.deallocate = free;
   26c86:	e9c3 5400 	strd	r5, r4, [r3]
        global_hooks.reallocate = realloc;
   26c8a:	4a0d      	ldr	r2, [pc, #52]	; (26cc0 <cJSON_InitHooks+0x44>)
   26c8c:	609a      	str	r2, [r3, #8]
   26c8e:	e00f      	b.n	26cb0 <cJSON_InitHooks+0x34>
    if (hooks->malloc_fn != NULL)
   26c90:	6801      	ldr	r1, [r0, #0]
    if (hooks->free_fn != NULL)
   26c92:	6842      	ldr	r2, [r0, #4]
        global_hooks.allocate = hooks->malloc_fn;
   26c94:	2900      	cmp	r1, #0
   26c96:	bf08      	it	eq
   26c98:	4629      	moveq	r1, r5
        global_hooks.deallocate = hooks->free_fn;
   26c9a:	2a00      	cmp	r2, #0
   26c9c:	bf08      	it	eq
   26c9e:	4622      	moveq	r2, r4
    global_hooks.reallocate = NULL;
   26ca0:	2000      	movs	r0, #0
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   26ca2:	42a9      	cmp	r1, r5
        global_hooks.allocate = hooks->malloc_fn;
   26ca4:	6019      	str	r1, [r3, #0]
        global_hooks.deallocate = hooks->free_fn;
   26ca6:	605a      	str	r2, [r3, #4]
    global_hooks.reallocate = NULL;
   26ca8:	6098      	str	r0, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   26caa:	d101      	bne.n	26cb0 <cJSON_InitHooks+0x34>
   26cac:	42a2      	cmp	r2, r4
   26cae:	d0ec      	beq.n	26c8a <cJSON_InitHooks+0xe>
}
   26cb0:	bd30      	pop	{r4, r5, pc}
   26cb2:	bf00      	nop
   26cb4:	200320bc 	.word	0x200320bc
   26cb8:	0003b6bd 	.word	0x0003b6bd
   26cbc:	0003b6cd 	.word	0x0003b6cd
   26cc0:	0003c1a9 	.word	0x0003c1a9

00026cc4 <cJSON_Delete>:
{
   26cc4:	b570      	push	{r4, r5, r6, lr}
   26cc6:	4604      	mov	r4, r0
   26cc8:	4d0f      	ldr	r5, [pc, #60]	; (26d08 <cJSON_Delete+0x44>)
    while (item != NULL)
   26cca:	b904      	cbnz	r4, 26cce <cJSON_Delete+0xa>
}
   26ccc:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   26cce:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   26cd0:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   26cd2:	05d9      	lsls	r1, r3, #23
   26cd4:	d403      	bmi.n	26cde <cJSON_Delete+0x1a>
   26cd6:	68a0      	ldr	r0, [r4, #8]
   26cd8:	b968      	cbnz	r0, 26cf6 <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   26cda:	6920      	ldr	r0, [r4, #16]
   26cdc:	b988      	cbnz	r0, 26d02 <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   26cde:	68e3      	ldr	r3, [r4, #12]
   26ce0:	059b      	lsls	r3, r3, #22
   26ce2:	d403      	bmi.n	26cec <cJSON_Delete+0x28>
   26ce4:	6a20      	ldr	r0, [r4, #32]
   26ce6:	b108      	cbz	r0, 26cec <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   26ce8:	686b      	ldr	r3, [r5, #4]
   26cea:	4798      	blx	r3
        global_hooks.deallocate(item);
   26cec:	4620      	mov	r0, r4
   26cee:	686b      	ldr	r3, [r5, #4]
   26cf0:	4798      	blx	r3
        item = next;
   26cf2:	4634      	mov	r4, r6
   26cf4:	e7e9      	b.n	26cca <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   26cf6:	f7ff ffe5 	bl	26cc4 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   26cfa:	68e3      	ldr	r3, [r4, #12]
   26cfc:	05da      	lsls	r2, r3, #23
   26cfe:	d5ec      	bpl.n	26cda <cJSON_Delete+0x16>
   26d00:	e7ed      	b.n	26cde <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   26d02:	686b      	ldr	r3, [r5, #4]
   26d04:	4798      	blx	r3
   26d06:	e7ea      	b.n	26cde <cJSON_Delete+0x1a>
   26d08:	200320bc 	.word	0x200320bc

00026d0c <cJSON_ParseWithOpts>:
{
   26d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26d10:	4605      	mov	r5, r0
    global_error.json = NULL;
   26d12:	f04f 0800 	mov.w	r8, #0
{
   26d16:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
   26d18:	4e31      	ldr	r6, [pc, #196]	; (26de0 <cJSON_ParseWithOpts+0xd4>)
{
   26d1a:	460f      	mov	r7, r1
   26d1c:	4691      	mov	r9, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   26d1e:	2100      	movs	r1, #0
   26d20:	221c      	movs	r2, #28
   26d22:	a801      	add	r0, sp, #4
   26d24:	f019 fc9a 	bl	4065c <memset>
    global_error.position = 0;
   26d28:	e9c6 8800 	strd	r8, r8, [r6]
    if (value == NULL)
   26d2c:	2d00      	cmp	r5, #0
   26d2e:	d04d      	beq.n	26dcc <cJSON_ParseWithOpts+0xc0>
    buffer.length = strlen((const char*)value) + sizeof("");
   26d30:	4628      	mov	r0, r5
    buffer.content = (const unsigned char*)value;
   26d32:	9501      	str	r5, [sp, #4]
    buffer.length = strlen((const char*)value) + sizeof("");
   26d34:	f7f6 f9f6 	bl	1d124 <strlen>
    buffer.hooks = global_hooks;
   26d38:	4b2a      	ldr	r3, [pc, #168]	; (26de4 <cJSON_ParseWithOpts+0xd8>)
    buffer.length = strlen((const char*)value) + sizeof("");
   26d3a:	3001      	adds	r0, #1
    buffer.offset = 0;
   26d3c:	e9cd 0802 	strd	r0, r8, [sp, #8]
    buffer.hooks = global_hooks;
   26d40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   26d44:	ab08      	add	r3, sp, #32
   26d46:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   26d4a:	f018 fa5c 	bl	3f206 <cJSON_New_Item.isra.1>
    if (item == NULL) /* memory fail */
   26d4e:	4604      	mov	r4, r0
   26d50:	2800      	cmp	r0, #0
   26d52:	d030      	beq.n	26db6 <cJSON_ParseWithOpts+0xaa>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   26d54:	9801      	ldr	r0, [sp, #4]
   26d56:	b128      	cbz	r0, 26d64 <cJSON_ParseWithOpts+0x58>
   26d58:	9b03      	ldr	r3, [sp, #12]
   26d5a:	b9e3      	cbnz	r3, 26d96 <cJSON_ParseWithOpts+0x8a>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   26d5c:	9b02      	ldr	r3, [sp, #8]
   26d5e:	2b04      	cmp	r3, #4
   26d60:	d80f      	bhi.n	26d82 <cJSON_ParseWithOpts+0x76>
    return buffer;
   26d62:	a801      	add	r0, sp, #4
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   26d64:	f018 fa1d 	bl	3f1a2 <buffer_skip_whitespace>
   26d68:	4601      	mov	r1, r0
   26d6a:	4620      	mov	r0, r4
   26d6c:	f7f6 fbd0 	bl	1d510 <parse_value>
   26d70:	b1f0      	cbz	r0, 26db0 <cJSON_ParseWithOpts+0xa4>
    if (require_null_terminated)
   26d72:	f1b9 0f00 	cmp.w	r9, #0
   26d76:	d110      	bne.n	26d9a <cJSON_ParseWithOpts+0x8e>
    if (return_parse_end)
   26d78:	bb57      	cbnz	r7, 26dd0 <cJSON_ParseWithOpts+0xc4>
}
   26d7a:	4620      	mov	r0, r4
   26d7c:	b009      	add	sp, #36	; 0x24
   26d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   26d82:	2203      	movs	r2, #3
   26d84:	4918      	ldr	r1, [pc, #96]	; (26de8 <cJSON_ParseWithOpts+0xdc>)
   26d86:	f019 fe42 	bl	40a0e <strncmp>
   26d8a:	2800      	cmp	r0, #0
   26d8c:	d1e9      	bne.n	26d62 <cJSON_ParseWithOpts+0x56>
        buffer->offset += 3;
   26d8e:	9b03      	ldr	r3, [sp, #12]
   26d90:	3303      	adds	r3, #3
   26d92:	9303      	str	r3, [sp, #12]
   26d94:	e7e5      	b.n	26d62 <cJSON_ParseWithOpts+0x56>
        return NULL;
   26d96:	4640      	mov	r0, r8
   26d98:	e7e4      	b.n	26d64 <cJSON_ParseWithOpts+0x58>
        buffer_skip_whitespace(&buffer);
   26d9a:	a801      	add	r0, sp, #4
   26d9c:	f018 fa01 	bl	3f1a2 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   26da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   26da4:	4293      	cmp	r3, r2
   26da6:	d203      	bcs.n	26db0 <cJSON_ParseWithOpts+0xa4>
   26da8:	9a01      	ldr	r2, [sp, #4]
   26daa:	5cd3      	ldrb	r3, [r2, r3]
   26dac:	2b00      	cmp	r3, #0
   26dae:	d0e3      	beq.n	26d78 <cJSON_ParseWithOpts+0x6c>
        cJSON_Delete(item);
   26db0:	4620      	mov	r0, r4
   26db2:	f7ff ff87 	bl	26cc4 <cJSON_Delete>
        if (buffer.offset < buffer.length)
   26db6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   26dba:	429a      	cmp	r2, r3
   26dbc:	d30d      	bcc.n	26dda <cJSON_ParseWithOpts+0xce>
        else if (buffer.length > 0)
   26dbe:	b103      	cbz	r3, 26dc2 <cJSON_ParseWithOpts+0xb6>
            local_error.position = buffer.length - 1;
   26dc0:	3b01      	subs	r3, #1
        if (return_parse_end != NULL)
   26dc2:	b10f      	cbz	r7, 26dc8 <cJSON_ParseWithOpts+0xbc>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   26dc4:	18ea      	adds	r2, r5, r3
   26dc6:	603a      	str	r2, [r7, #0]
        global_error = local_error;
   26dc8:	e9c6 5300 	strd	r5, r3, [r6]
    return NULL;
   26dcc:	2400      	movs	r4, #0
   26dce:	e7d4      	b.n	26d7a <cJSON_ParseWithOpts+0x6e>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   26dd0:	9b01      	ldr	r3, [sp, #4]
   26dd2:	9a03      	ldr	r2, [sp, #12]
   26dd4:	4413      	add	r3, r2
   26dd6:	603b      	str	r3, [r7, #0]
   26dd8:	e7cf      	b.n	26d7a <cJSON_ParseWithOpts+0x6e>
   26dda:	4613      	mov	r3, r2
   26ddc:	e7f1      	b.n	26dc2 <cJSON_ParseWithOpts+0xb6>
   26dde:	bf00      	nop
   26de0:	200239c8 	.word	0x200239c8
   26de4:	200320bc 	.word	0x200320bc
   26de8:	000450f6 	.word	0x000450f6

00026dec <cJSON_CreateNull>:
{
   26dec:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   26dee:	4b04      	ldr	r3, [pc, #16]	; (26e00 <cJSON_CreateNull+0x14>)
   26df0:	6818      	ldr	r0, [r3, #0]
   26df2:	f018 fa08 	bl	3f206 <cJSON_New_Item.isra.1>
    if(item)
   26df6:	b108      	cbz	r0, 26dfc <cJSON_CreateNull+0x10>
        item->type = cJSON_NULL;
   26df8:	2304      	movs	r3, #4
   26dfa:	60c3      	str	r3, [r0, #12]
}
   26dfc:	bd08      	pop	{r3, pc}
   26dfe:	bf00      	nop
   26e00:	200320bc 	.word	0x200320bc

00026e04 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   26e04:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   26e06:	4b0a      	ldr	r3, [pc, #40]	; (26e30 <cJSON_CreateString+0x2c>)
{
   26e08:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   26e0a:	6818      	ldr	r0, [r3, #0]
   26e0c:	f018 f9fb 	bl	3f206 <cJSON_New_Item.isra.1>
    if(item)
   26e10:	4604      	mov	r4, r0
   26e12:	b158      	cbz	r0, 26e2c <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   26e14:	2310      	movs	r3, #16
   26e16:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   26e18:	4628      	mov	r0, r5
   26e1a:	f7ff fef1 	bl	26c00 <cJSON_strdup.isra.2.constprop.16>
   26e1e:	4605      	mov	r5, r0
   26e20:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   26e22:	b918      	cbnz	r0, 26e2c <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   26e24:	4620      	mov	r0, r4
   26e26:	f7ff ff4d 	bl	26cc4 <cJSON_Delete>
            return NULL;
   26e2a:	462c      	mov	r4, r5
        }
    }

    return item;
}
   26e2c:	4620      	mov	r0, r4
   26e2e:	bd38      	pop	{r3, r4, r5, pc}
   26e30:	200320bc 	.word	0x200320bc

00026e34 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   26e34:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   26e36:	4b04      	ldr	r3, [pc, #16]	; (26e48 <cJSON_CreateArray+0x14>)
   26e38:	6818      	ldr	r0, [r3, #0]
   26e3a:	f018 f9e4 	bl	3f206 <cJSON_New_Item.isra.1>
    if(item)
   26e3e:	b108      	cbz	r0, 26e44 <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   26e40:	2320      	movs	r3, #32
   26e42:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   26e44:	bd08      	pop	{r3, pc}
   26e46:	bf00      	nop
   26e48:	200320bc 	.word	0x200320bc

00026e4c <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   26e4c:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   26e4e:	4b04      	ldr	r3, [pc, #16]	; (26e60 <cJSON_CreateObject+0x14>)
   26e50:	6818      	ldr	r0, [r3, #0]
   26e52:	f018 f9d8 	bl	3f206 <cJSON_New_Item.isra.1>
    if (item)
   26e56:	b108      	cbz	r0, 26e5c <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   26e58:	2340      	movs	r3, #64	; 0x40
   26e5a:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   26e5c:	bd08      	pop	{r3, pc}
   26e5e:	bf00      	nop
   26e60:	200320bc 	.word	0x200320bc

00026e64 <cJSON_Init>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }

/**@brief Initialize cJSON by assigning function hooks. */
void cJSON_Init(void)
{
	_cjson_hooks.malloc_fn = malloc_fn_hook;
   26e64:	4803      	ldr	r0, [pc, #12]	; (26e74 <cJSON_Init+0x10>)
   26e66:	4b04      	ldr	r3, [pc, #16]	; (26e78 <cJSON_Init+0x14>)
   26e68:	6003      	str	r3, [r0, #0]
	_cjson_hooks.free_fn = free_fn_hook;
   26e6a:	4b04      	ldr	r3, [pc, #16]	; (26e7c <cJSON_Init+0x18>)
   26e6c:	6043      	str	r3, [r0, #4]

	cJSON_InitHooks(&_cjson_hooks);
   26e6e:	f7ff bf05 	b.w	26c7c <cJSON_InitHooks>
   26e72:	bf00      	nop
   26e74:	200239d0 	.word	0x200239d0
   26e78:	0003f381 	.word	0x0003f381
   26e7c:	0003f37d 	.word	0x0003f37d

00026e80 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   26e80:	2200      	movs	r2, #0
{
   26e82:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   26e84:	4611      	mov	r1, r2
   26e86:	202a      	movs	r0, #42	; 0x2a
   26e88:	f7fd fa9a 	bl	243c0 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
   26e8c:	f00a fd98 	bl	319c0 <bsd_init>
   26e90:	4b01      	ldr	r3, [pc, #4]	; (26e98 <_bsdlib_init+0x18>)
   26e92:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   26e94:	2000      	movs	r0, #0
   26e96:	bd08      	pop	{r3, pc}
   26e98:	200239d8 	.word	0x200239d8

00026e9c <bsdlib_get_init_ret>:
}

int bsdlib_get_init_ret(void)
{
	return init_ret;
}
   26e9c:	4b01      	ldr	r3, [pc, #4]	; (26ea4 <bsdlib_get_init_ret+0x8>)
   26e9e:	6818      	ldr	r0, [r3, #0]
   26ea0:	4770      	bx	lr
   26ea2:	bf00      	nop
   26ea4:	200239d8 	.word	0x200239d8

00026ea8 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   26ea8:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   26eaa:	4b0d      	ldr	r3, [pc, #52]	; (26ee0 <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   26eac:	4c0d      	ldr	r4, [pc, #52]	; (26ee4 <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
   26eae:	681a      	ldr	r2, [r3, #0]
   26eb0:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   26eb2:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   26eb4:	4623      	mov	r3, r4
		if (entry->id == id) {
   26eb6:	6819      	ldr	r1, [r3, #0]
   26eb8:	4281      	cmp	r1, r0
   26eba:	d00e      	beq.n	26eda <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   26ebc:	b151      	cbz	r1, 26ed4 <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
   26ebe:	6859      	ldr	r1, [r3, #4]
   26ec0:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
   26ec2:	42b1      	cmp	r1, r6
   26ec4:	bfc4      	itt	gt
   26ec6:	461c      	movgt	r4, r3
   26ec8:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   26eca:	3d01      	subs	r5, #1
   26ecc:	f103 0308 	add.w	r3, r3, #8
   26ed0:	d1f1      	bne.n	26eb6 <thread_monitor_entry_get+0xe>
   26ed2:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   26ed4:	3a01      	subs	r2, #1
	new_entry->id = id;
   26ed6:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   26ed8:	605a      	str	r2, [r3, #4]

	return new_entry;
}
   26eda:	4618      	mov	r0, r3
   26edc:	bd70      	pop	{r4, r5, r6, pc}
   26ede:	bf00      	nop
   26ee0:	200239dc 	.word	0x200239dc
   26ee4:	200239e8 	.word	0x200239e8

00026ee8 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   26ee8:	4668      	mov	r0, sp
   26eea:	f020 0107 	bic.w	r1, r0, #7
   26eee:	468d      	mov	sp, r1
   26ef0:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   26ef2:	4b0d      	ldr	r3, [pc, #52]	; (26f28 <rpc_proxy_irq_handler+0x40>)
   26ef4:	e8d3 2fef 	ldaex	r2, [r3]
   26ef8:	3201      	adds	r2, #1
   26efa:	e8c3 2fe1 	stlex	r1, r2, [r3]
   26efe:	2900      	cmp	r1, #0
   26f00:	d1f8      	bne.n	26ef4 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   26f02:	f00f f867 	bl	35fd4 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   26f06:	4b09      	ldr	r3, [pc, #36]	; (26f2c <rpc_proxy_irq_handler+0x44>)
   26f08:	681c      	ldr	r4, [r3, #0]
   26f0a:	b93c      	cbnz	r4, 26f1c <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   26f0c:	f7fd fa8a 	bl	24424 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   26f10:	f7fd f972 	bl	241f8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   26f14:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   26f18:	4685      	mov	sp, r0
   26f1a:	4770      	bx	lr
   26f1c:	1d20      	adds	r0, r4, #4
   26f1e:	f013 f945 	bl	3a1ac <z_impl_k_sem_give>
   26f22:	6824      	ldr	r4, [r4, #0]
	return node->next;
   26f24:	e7f1      	b.n	26f0a <rpc_proxy_irq_handler+0x22>
   26f26:	bf00      	nop
   26f28:	200239dc 	.word	0x200239dc
   26f2c:	200239e0 	.word	0x200239e0

00026f30 <bsd_os_timedwait>:
{
   26f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26f34:	4688      	mov	r8, r1
   26f36:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   26f38:	f019 faea 	bl	40510 <z_impl_k_uptime_get>
	if (*timeout == 0) {
   26f3c:	f8d8 3000 	ldr.w	r3, [r8]
   26f40:	4606      	mov	r6, r0
   26f42:	2b00      	cmp	r3, #0
   26f44:	460f      	mov	r7, r1
   26f46:	d103      	bne.n	26f50 <bsd_os_timedwait+0x20>
	z_impl_k_yield();
   26f48:	f012 ffac 	bl	39ea4 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   26f4c:	203c      	movs	r0, #60	; 0x3c
   26f4e:	e06e      	b.n	2702e <bsd_os_timedwait+0xfe>
		*timeout = K_FOREVER;
   26f50:	bfbc      	itt	lt
   26f52:	f04f 33ff 	movlt.w	r3, #4294967295
   26f56:	f8c8 3000 	strlt.w	r3, [r8]
	return z_impl_k_sem_init(sem, initial_count, limit);
   26f5a:	2201      	movs	r2, #1
   26f5c:	2100      	movs	r1, #0
   26f5e:	a802      	add	r0, sp, #8
   26f60:	f019 fa38 	bl	403d4 <z_impl_k_sem_init>
   26f64:	f10d 0a04 	add.w	sl, sp, #4
   26f68:	f04f 0320 	mov.w	r3, #32
   26f6c:	f3ef 8b11 	mrs	fp, BASEPRI
   26f70:	f383 8811 	msr	BASEPRI, r3
   26f74:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   26f78:	f013 f912 	bl	3a1a0 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   26f7c:	f7ff ff94 	bl	26ea8 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   26f80:	4933      	ldr	r1, [pc, #204]	; (27050 <bsd_os_timedwait+0x120>)
   26f82:	6843      	ldr	r3, [r0, #4]
   26f84:	680a      	ldr	r2, [r1, #0]
   26f86:	4689      	mov	r9, r1
   26f88:	4293      	cmp	r3, r2
   26f8a:	f04f 0300 	mov.w	r3, #0
   26f8e:	d108      	bne.n	26fa2 <bsd_os_timedwait+0x72>
	parent->next = child;
   26f90:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   26f92:	4b30      	ldr	r3, [pc, #192]	; (27054 <bsd_os_timedwait+0x124>)
   26f94:	685a      	ldr	r2, [r3, #4]
   26f96:	2a00      	cmp	r2, #0
   26f98:	d14c      	bne.n	27034 <bsd_os_timedwait+0x104>
	list->head = node;
   26f9a:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
   26f9e:	2301      	movs	r3, #1
   26fa0:	e000      	b.n	26fa4 <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
   26fa2:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   26fa4:	f38b 8811 	msr	BASEPRI, fp
   26fa8:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   26fac:	2b00      	cmp	r3, #0
   26fae:	d03d      	beq.n	2702c <bsd_os_timedwait+0xfc>
	(void)k_sem_take(&thread.sem, *timeout);
   26fb0:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
   26fb4:	a802      	add	r0, sp, #8
   26fb6:	f013 f943 	bl	3a240 <z_impl_k_sem_take>
	__asm__ volatile(
   26fba:	f04f 0320 	mov.w	r3, #32
   26fbe:	f3ef 8b11 	mrs	fp, BASEPRI
   26fc2:	f383 8811 	msr	BASEPRI, r3
   26fc6:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26fca:	2000      	movs	r0, #0
   26fcc:	4b21      	ldr	r3, [pc, #132]	; (27054 <bsd_os_timedwait+0x124>)
   26fce:	681a      	ldr	r2, [r3, #0]
   26fd0:	b152      	cbz	r2, 26fe8 <bsd_os_timedwait+0xb8>
   26fd2:	4552      	cmp	r2, sl
   26fd4:	d139      	bne.n	2704a <bsd_os_timedwait+0x11a>
Z_GENLIST_REMOVE(slist, snode)
   26fd6:	9901      	ldr	r1, [sp, #4]
   26fd8:	bb88      	cbnz	r0, 2703e <bsd_os_timedwait+0x10e>
   26fda:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   26fdc:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   26fde:	4290      	cmp	r0, r2
   26fe0:	d100      	bne.n	26fe4 <bsd_os_timedwait+0xb4>
	list->tail = node;
   26fe2:	6059      	str	r1, [r3, #4]
	parent->next = child;
   26fe4:	2300      	movs	r3, #0
   26fe6:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   26fe8:	f013 f8da 	bl	3a1a0 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   26fec:	f7ff ff5c 	bl	26ea8 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   26ff0:	f8d9 3000 	ldr.w	r3, [r9]
   26ff4:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   26ff6:	f38b 8811 	msr	BASEPRI, fp
   26ffa:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   26ffe:	f8d8 9000 	ldr.w	r9, [r8]
   27002:	f1b9 3fff 	cmp.w	r9, #4294967295
   27006:	d011      	beq.n	2702c <bsd_os_timedwait+0xfc>
	return z_impl_k_uptime_get();
   27008:	f019 fa82 	bl	40510 <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   2700c:	eb16 0209 	adds.w	r2, r6, r9
   27010:	eb47 73e9 	adc.w	r3, r7, r9, asr #31
   27014:	1a14      	subs	r4, r2, r0
   27016:	eb63 0501 	sbc.w	r5, r3, r1
	*timeout = remaining > 0 ? remaining : 0;
   2701a:	2c00      	cmp	r4, #0
   2701c:	f175 0300 	sbcs.w	r3, r5, #0
   27020:	bfb8      	it	lt
   27022:	2400      	movlt	r4, #0
   27024:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
   27028:	2c00      	cmp	r4, #0
   2702a:	d08f      	beq.n	26f4c <bsd_os_timedwait+0x1c>
	return 0;
   2702c:	2000      	movs	r0, #0
}
   2702e:	b009      	add	sp, #36	; 0x24
   27030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27034:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   27038:	f8c3 a004 	str.w	sl, [r3, #4]
   2703c:	e7af      	b.n	26f9e <bsd_os_timedwait+0x6e>
	parent->next = child;
   2703e:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   27040:	6859      	ldr	r1, [r3, #4]
   27042:	4291      	cmp	r1, r2
	list->tail = node;
   27044:	bf08      	it	eq
   27046:	6058      	streq	r0, [r3, #4]
   27048:	e7cc      	b.n	26fe4 <bsd_os_timedwait+0xb4>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2704a:	4610      	mov	r0, r2
   2704c:	6812      	ldr	r2, [r2, #0]
   2704e:	e7bf      	b.n	26fd0 <bsd_os_timedwait+0xa0>
   27050:	200239dc 	.word	0x200239dc
   27054:	200239e0 	.word	0x200239e0

00027058 <bsd_os_errno_set>:
	switch (err_code) {
   27058:	282d      	cmp	r0, #45	; 0x2d
{
   2705a:	b510      	push	{r4, lr}
   2705c:	4604      	mov	r4, r0
	switch (err_code) {
   2705e:	f000 80a8 	beq.w	271b2 <bsd_os_errno_set+0x15a>
   27062:	dc50      	bgt.n	27106 <bsd_os_errno_set+0xae>
   27064:	2816      	cmp	r0, #22
   27066:	d009      	beq.n	2707c <bsd_os_errno_set+0x24>
   27068:	dc38      	bgt.n	270dc <bsd_os_errno_set+0x84>
   2706a:	2808      	cmp	r0, #8
   2706c:	d006      	beq.n	2707c <bsd_os_errno_set+0x24>
   2706e:	dc09      	bgt.n	27084 <bsd_os_errno_set+0x2c>
   27070:	2802      	cmp	r0, #2
   27072:	d003      	beq.n	2707c <bsd_os_errno_set+0x24>
   27074:	2805      	cmp	r0, #5
   27076:	d001      	beq.n	2707c <bsd_os_errno_set+0x24>
   27078:	2801      	cmp	r0, #1
   2707a:	d10c      	bne.n	27096 <bsd_os_errno_set+0x3e>
		errno = ENOBUFS;
   2707c:	f017 f95d 	bl	3e33a <__errno>
   27080:	6004      	str	r4, [r0, #0]
}
   27082:	bd10      	pop	{r4, pc}
	switch (err_code) {
   27084:	280c      	cmp	r0, #12
   27086:	d0f9      	beq.n	2707c <bsd_os_errno_set+0x24>
   27088:	dc01      	bgt.n	2708e <bsd_os_errno_set+0x36>
   2708a:	2809      	cmp	r0, #9
   2708c:	e7f5      	b.n	2707a <bsd_os_errno_set+0x22>
   2708e:	280d      	cmp	r0, #13
   27090:	d0f4      	beq.n	2707c <bsd_os_errno_set+0x24>
   27092:	280e      	cmp	r0, #14
   27094:	d074      	beq.n	27180 <bsd_os_errno_set+0x128>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
   27096:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   2709a:	4a63      	ldr	r2, [pc, #396]	; (27228 <bsd_os_errno_set+0x1d0>)
   2709c:	4963      	ldr	r1, [pc, #396]	; (2722c <bsd_os_errno_set+0x1d4>)
   2709e:	4864      	ldr	r0, [pc, #400]	; (27230 <bsd_os_errno_set+0x1d8>)
   270a0:	f016 fefb 	bl	3de9a <printk>
   270a4:	4621      	mov	r1, r4
   270a6:	4863      	ldr	r0, [pc, #396]	; (27234 <bsd_os_errno_set+0x1dc>)
   270a8:	f016 fef7 	bl	3de9a <printk>
   270ac:	f44f 71a5 	mov.w	r1, #330	; 0x14a
   270b0:	485d      	ldr	r0, [pc, #372]	; (27228 <bsd_os_errno_set+0x1d0>)
   270b2:	f016 ff45 	bl	3df40 <assert_post_action>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   270b6:	2301      	movs	r3, #1
   270b8:	f04f 0000 	mov.w	r0, #0
   270bc:	4a5e      	ldr	r2, [pc, #376]	; (27238 <bsd_os_errno_set+0x1e0>)
   270be:	f363 0007 	bfi	r0, r3, #0, #8
   270c2:	4b5e      	ldr	r3, [pc, #376]	; (2723c <bsd_os_errno_set+0x1e4>)
   270c4:	495e      	ldr	r1, [pc, #376]	; (27240 <bsd_os_errno_set+0x1e8>)
   270c6:	1a9b      	subs	r3, r3, r2
   270c8:	08db      	lsrs	r3, r3, #3
   270ca:	f363 108f 	bfi	r0, r3, #6, #10
   270ce:	4622      	mov	r2, r4
   270d0:	f016 ff47 	bl	3df62 <log_string_sync>
		errno = 0xBAADBAAD;
   270d4:	f017 f931 	bl	3e33a <__errno>
   270d8:	4b5a      	ldr	r3, [pc, #360]	; (27244 <bsd_os_errno_set+0x1ec>)
   270da:	e054      	b.n	27186 <bsd_os_errno_set+0x12e>
	switch (err_code) {
   270dc:	2828      	cmp	r0, #40	; 0x28
   270de:	f000 809f 	beq.w	27220 <bsd_os_errno_set+0x1c8>
   270e2:	dc05      	bgt.n	270f0 <bsd_os_errno_set+0x98>
   270e4:	2823      	cmp	r0, #35	; 0x23
   270e6:	d050      	beq.n	2718a <bsd_os_errno_set+0x132>
   270e8:	2825      	cmp	r0, #37	; 0x25
   270ea:	d052      	beq.n	27192 <bsd_os_errno_set+0x13a>
   270ec:	2818      	cmp	r0, #24
   270ee:	e7c4      	b.n	2707a <bsd_os_errno_set+0x22>
   270f0:	282a      	cmp	r0, #42	; 0x2a
   270f2:	d056      	beq.n	271a2 <bsd_os_errno_set+0x14a>
   270f4:	db51      	blt.n	2719a <bsd_os_errno_set+0x142>
   270f6:	282b      	cmp	r0, #43	; 0x2b
   270f8:	d057      	beq.n	271aa <bsd_os_errno_set+0x152>
   270fa:	282c      	cmp	r0, #44	; 0x2c
   270fc:	d1cb      	bne.n	27096 <bsd_os_errno_set+0x3e>
		errno = ESOCKTNOSUPPORT;
   270fe:	f017 f91c 	bl	3e33a <__errno>
   27102:	237c      	movs	r3, #124	; 0x7c
   27104:	e03f      	b.n	27186 <bsd_os_errno_set+0x12e>
	switch (err_code) {
   27106:	283c      	cmp	r0, #60	; 0x3c
   27108:	d06b      	beq.n	271e2 <bsd_os_errno_set+0x18a>
   2710a:	dc1d      	bgt.n	27148 <bsd_os_errno_set+0xf0>
   2710c:	2833      	cmp	r0, #51	; 0x33
   2710e:	d05c      	beq.n	271ca <bsd_os_errno_set+0x172>
   27110:	dc09      	bgt.n	27126 <bsd_os_errno_set+0xce>
   27112:	2830      	cmp	r0, #48	; 0x30
   27114:	d051      	beq.n	271ba <bsd_os_errno_set+0x162>
   27116:	2832      	cmp	r0, #50	; 0x32
   27118:	d053      	beq.n	271c2 <bsd_os_errno_set+0x16a>
   2711a:	282f      	cmp	r0, #47	; 0x2f
   2711c:	d1bb      	bne.n	27096 <bsd_os_errno_set+0x3e>
		errno = EAFNOSUPPORT;
   2711e:	f017 f90c 	bl	3e33a <__errno>
   27122:	236a      	movs	r3, #106	; 0x6a
   27124:	e02f      	b.n	27186 <bsd_os_errno_set+0x12e>
	switch (err_code) {
   27126:	2836      	cmp	r0, #54	; 0x36
   27128:	d053      	beq.n	271d2 <bsd_os_errno_set+0x17a>
   2712a:	dc05      	bgt.n	27138 <bsd_os_errno_set+0xe0>
   2712c:	2834      	cmp	r0, #52	; 0x34
   2712e:	d1b2      	bne.n	27096 <bsd_os_errno_set+0x3e>
		errno = ENETRESET;
   27130:	f017 f903 	bl	3e33a <__errno>
   27134:	237e      	movs	r3, #126	; 0x7e
   27136:	e026      	b.n	27186 <bsd_os_errno_set+0x12e>
	switch (err_code) {
   27138:	2838      	cmp	r0, #56	; 0x38
   2713a:	d04e      	beq.n	271da <bsd_os_errno_set+0x182>
   2713c:	2839      	cmp	r0, #57	; 0x39
   2713e:	d1aa      	bne.n	27096 <bsd_os_errno_set+0x3e>
		errno = ENOTCONN;
   27140:	f017 f8fb 	bl	3e33a <__errno>
   27144:	2380      	movs	r3, #128	; 0x80
   27146:	e01e      	b.n	27186 <bsd_os_errno_set+0x12e>
	switch (err_code) {
   27148:	287d      	cmp	r0, #125	; 0x7d
   2714a:	d056      	beq.n	271fa <bsd_os_errno_set+0x1a2>
   2714c:	dc0c      	bgt.n	27168 <bsd_os_errno_set+0x110>
   2714e:	2870      	cmp	r0, #112	; 0x70
   27150:	d04b      	beq.n	271ea <bsd_os_errno_set+0x192>
   27152:	dc01      	bgt.n	27158 <bsd_os_errno_set+0x100>
   27154:	2869      	cmp	r0, #105	; 0x69
   27156:	e790      	b.n	2707a <bsd_os_errno_set+0x22>
   27158:	2872      	cmp	r0, #114	; 0x72
   2715a:	d04a      	beq.n	271f2 <bsd_os_errno_set+0x19a>
   2715c:	2873      	cmp	r0, #115	; 0x73
   2715e:	d19a      	bne.n	27096 <bsd_os_errno_set+0x3e>
		errno = EINPROGRESS;
   27160:	f017 f8eb 	bl	3e33a <__errno>
   27164:	2377      	movs	r3, #119	; 0x77
   27166:	e00e      	b.n	27186 <bsd_os_errno_set+0x12e>
	switch (err_code) {
   27168:	287f      	cmp	r0, #127	; 0x7f
   2716a:	d04f      	beq.n	2720c <bsd_os_errno_set+0x1b4>
   2716c:	db49      	blt.n	27202 <bsd_os_errno_set+0x1aa>
   2716e:	2880      	cmp	r0, #128	; 0x80
   27170:	d051      	beq.n	27216 <bsd_os_errno_set+0x1be>
   27172:	2881      	cmp	r0, #129	; 0x81
   27174:	d18f      	bne.n	27096 <bsd_os_errno_set+0x3e>
		errno = EKEYREJECTED;
   27176:	f017 f8e0 	bl	3e33a <__errno>
   2717a:	f240 73d4 	movw	r3, #2004	; 0x7d4
   2717e:	e002      	b.n	27186 <bsd_os_errno_set+0x12e>
		errno = EFAULT;
   27180:	f017 f8db 	bl	3e33a <__errno>
   27184:	230e      	movs	r3, #14
		errno = 0xBAADBAAD;
   27186:	6003      	str	r3, [r0, #0]
}
   27188:	e77b      	b.n	27082 <bsd_os_errno_set+0x2a>
		errno = EAGAIN;
   2718a:	f017 f8d6 	bl	3e33a <__errno>
   2718e:	230b      	movs	r3, #11
   27190:	e7f9      	b.n	27186 <bsd_os_errno_set+0x12e>
		errno = EDOM;
   27192:	f017 f8d2 	bl	3e33a <__errno>
   27196:	2321      	movs	r3, #33	; 0x21
   27198:	e7f5      	b.n	27186 <bsd_os_errno_set+0x12e>
		errno = EPROTOTYPE;
   2719a:	f017 f8ce 	bl	3e33a <__errno>
   2719e:	236b      	movs	r3, #107	; 0x6b
   271a0:	e7f1      	b.n	27186 <bsd_os_errno_set+0x12e>
		errno = ENOPROTOOPT;
   271a2:	f017 f8ca 	bl	3e33a <__errno>
   271a6:	236d      	movs	r3, #109	; 0x6d
   271a8:	e7ed      	b.n	27186 <bsd_os_errno_set+0x12e>
		errno = EPROTONOSUPPORT;
   271aa:	f017 f8c6 	bl	3e33a <__errno>
   271ae:	237b      	movs	r3, #123	; 0x7b
   271b0:	e7e9      	b.n	27186 <bsd_os_errno_set+0x12e>
		errno = EOPNOTSUPP;
   271b2:	f017 f8c2 	bl	3e33a <__errno>
   271b6:	235f      	movs	r3, #95	; 0x5f
   271b8:	e7e5      	b.n	27186 <bsd_os_errno_set+0x12e>
		errno = EADDRINUSE;
   271ba:	f017 f8be 	bl	3e33a <__errno>
   271be:	2370      	movs	r3, #112	; 0x70
   271c0:	e7e1      	b.n	27186 <bsd_os_errno_set+0x12e>
		errno = ENETDOWN;
   271c2:	f017 f8ba 	bl	3e33a <__errno>
   271c6:	2373      	movs	r3, #115	; 0x73
   271c8:	e7dd      	b.n	27186 <bsd_os_errno_set+0x12e>
		errno = ENETUNREACH;
   271ca:	f017 f8b6 	bl	3e33a <__errno>
   271ce:	2372      	movs	r3, #114	; 0x72
   271d0:	e7d9      	b.n	27186 <bsd_os_errno_set+0x12e>
		errno = ECONNRESET;
   271d2:	f017 f8b2 	bl	3e33a <__errno>
   271d6:	2368      	movs	r3, #104	; 0x68
   271d8:	e7d5      	b.n	27186 <bsd_os_errno_set+0x12e>
		errno = EISCONN;
   271da:	f017 f8ae 	bl	3e33a <__errno>
   271de:	237f      	movs	r3, #127	; 0x7f
   271e0:	e7d1      	b.n	27186 <bsd_os_errno_set+0x12e>
		errno = ETIMEDOUT;
   271e2:	f017 f8aa 	bl	3e33a <__errno>
   271e6:	2374      	movs	r3, #116	; 0x74
   271e8:	e7cd      	b.n	27186 <bsd_os_errno_set+0x12e>
		errno = EHOSTDOWN;
   271ea:	f017 f8a6 	bl	3e33a <__errno>
   271ee:	2375      	movs	r3, #117	; 0x75
   271f0:	e7c9      	b.n	27186 <bsd_os_errno_set+0x12e>
		errno = EALREADY;
   271f2:	f017 f8a2 	bl	3e33a <__errno>
   271f6:	2378      	movs	r3, #120	; 0x78
   271f8:	e7c5      	b.n	27186 <bsd_os_errno_set+0x12e>
		errno = ECANCELED;
   271fa:	f017 f89e 	bl	3e33a <__errno>
   271fe:	238c      	movs	r3, #140	; 0x8c
   27200:	e7c1      	b.n	27186 <bsd_os_errno_set+0x12e>
		errno = ENOKEY;
   27202:	f017 f89a 	bl	3e33a <__errno>
   27206:	f240 73d1 	movw	r3, #2001	; 0x7d1
   2720a:	e7bc      	b.n	27186 <bsd_os_errno_set+0x12e>
		errno = EKEYEXPIRED;
   2720c:	f017 f895 	bl	3e33a <__errno>
   27210:	f240 73d2 	movw	r3, #2002	; 0x7d2
   27214:	e7b7      	b.n	27186 <bsd_os_errno_set+0x12e>
		errno = EKEYREVOKED;
   27216:	f017 f890 	bl	3e33a <__errno>
   2721a:	f240 73d3 	movw	r3, #2003	; 0x7d3
   2721e:	e7b2      	b.n	27186 <bsd_os_errno_set+0x12e>
		errno = EMSGSIZE;
   27220:	f017 f88b 	bl	3e33a <__errno>
   27224:	237a      	movs	r3, #122	; 0x7a
   27226:	e7ae      	b.n	27186 <bsd_os_errno_set+0x12e>
   27228:	00045125 	.word	0x00045125
   2722c:	00048cfb 	.word	0x00048cfb
   27230:	00043278 	.word	0x00043278
   27234:	00045149 	.word	0x00045149
   27238:	00041c2c 	.word	0x00041c2c
   2723c:	00041c5c 	.word	0x00041c5c
   27240:	00045170 	.word	0x00045170
   27244:	baadbaad 	.word	0xbaadbaad

00027248 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   27248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2724c:	4b01      	ldr	r3, [pc, #4]	; (27254 <bsd_os_application_irq_set+0xc>)
   2724e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   27252:	4770      	bx	lr
   27254:	e000e100 	.word	0xe000e100

00027258 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   27258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2725c:	4b01      	ldr	r3, [pc, #4]	; (27264 <bsd_os_application_irq_clear+0xc>)
   2725e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   27262:	4770      	bx	lr
   27264:	e000e100 	.word	0xe000e100

00027268 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   27268:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   2726c:	4b01      	ldr	r3, [pc, #4]	; (27274 <bsd_os_trace_irq_set+0xc>)
   2726e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   27272:	4770      	bx	lr
   27274:	e000e100 	.word	0xe000e100

00027278 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   27278:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   2727c:	4b01      	ldr	r3, [pc, #4]	; (27284 <bsd_os_trace_irq_clear+0xc>)
   2727e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   27282:	4770      	bx	lr
   27284:	e000e100 	.word	0xe000e100

00027288 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   27288:	b508      	push	{r3, lr}
	list->head = NULL;
   2728a:	2300      	movs	r3, #0
   2728c:	4a07      	ldr	r2, [pc, #28]	; (272ac <bsd_os_init+0x24>)
	list->tail = NULL;
   2728e:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   27292:	4a07      	ldr	r2, [pc, #28]	; (272b0 <bsd_os_init+0x28>)
   27294:	e8d2 1fef 	ldaex	r1, [r2]
   27298:	e8c2 3fe0 	stlex	r0, r3, [r2]
   2729c:	2800      	cmp	r0, #0
   2729e:	d1f9      	bne.n	27294 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   272a0:	f018 f89e 	bl	3f3e0 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   272a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   272a8:	f018 b88f 	b.w	3f3ca <trace_task_create>
   272ac:	200239e0 	.word	0x200239e0
   272b0:	200239dc 	.word	0x200239dc

000272b4 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   272b4:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   272b8:	d03c      	beq.n	27334 <z_to_nrf_optname+0x80>
   272ba:	dc04      	bgt.n	272c6 <z_to_nrf_optname+0x12>
   272bc:	2801      	cmp	r0, #1
   272be:	d044      	beq.n	2734a <z_to_nrf_optname+0x96>
			break;
		}
		break;

	default:
		retval = -1;
   272c0:	f04f 30ff 	mov.w	r0, #4294967295
		break;
	}

	return retval;
}
   272c4:	4770      	bx	lr
	switch (z_in_level) {
   272c6:	f240 2302 	movw	r3, #514	; 0x202
   272ca:	4298      	cmp	r0, r3
   272cc:	d052      	beq.n	27374 <z_to_nrf_optname+0xc0>
   272ce:	f240 2303 	movw	r3, #515	; 0x203
   272d2:	4298      	cmp	r0, r3
   272d4:	d1f4      	bne.n	272c0 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   272d6:	3901      	subs	r1, #1
   272d8:	2913      	cmp	r1, #19
   272da:	d8f1      	bhi.n	272c0 <z_to_nrf_optname+0xc>
   272dc:	a301      	add	r3, pc, #4	; (adr r3, 272e4 <z_to_nrf_optname+0x30>)
   272de:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   272e2:	bf00      	nop
   272e4:	00027381 	.word	0x00027381
   272e8:	00027345 	.word	0x00027345
   272ec:	00027365 	.word	0x00027365
   272f0:	00027357 	.word	0x00027357
   272f4:	00027369 	.word	0x00027369
   272f8:	0002736d 	.word	0x0002736d
   272fc:	00027371 	.word	0x00027371
   27300:	000272c1 	.word	0x000272c1
   27304:	000272c1 	.word	0x000272c1
   27308:	000272c1 	.word	0x000272c1
   2730c:	000272c1 	.word	0x000272c1
   27310:	000272c1 	.word	0x000272c1
   27314:	000272c1 	.word	0x000272c1
   27318:	000272c1 	.word	0x000272c1
   2731c:	000272c1 	.word	0x000272c1
   27320:	000272c1 	.word	0x000272c1
   27324:	000272c1 	.word	0x000272c1
   27328:	000272c1 	.word	0x000272c1
   2732c:	000272c1 	.word	0x000272c1
   27330:	0002735b 	.word	0x0002735b
		switch (z_in_optname) {
   27334:	3901      	subs	r1, #1
   27336:	2905      	cmp	r1, #5
   27338:	d8c2      	bhi.n	272c0 <z_to_nrf_optname+0xc>
   2733a:	e8df f001 	tbb	[pc, r1]
   2733e:	1503      	.short	0x1503
   27340:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   27344:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   27346:	6013      	str	r3, [r2, #0]
   27348:	e00a      	b.n	27360 <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
   2734a:	2914      	cmp	r1, #20
   2734c:	d005      	beq.n	2735a <z_to_nrf_optname+0xa6>
   2734e:	2919      	cmp	r1, #25
   27350:	d005      	beq.n	2735e <z_to_nrf_optname+0xaa>
   27352:	2904      	cmp	r1, #4
   27354:	d1b4      	bne.n	272c0 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   27356:	2304      	movs	r3, #4
   27358:	e7f5      	b.n	27346 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   2735a:	2314      	movs	r3, #20
   2735c:	e7f3      	b.n	27346 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   2735e:	6011      	str	r1, [r2, #0]
	int retval = 0;
   27360:	2000      	movs	r0, #0
			break;
   27362:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   27364:	2303      	movs	r3, #3
   27366:	e7ee      	b.n	27346 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   27368:	2305      	movs	r3, #5
   2736a:	e7ec      	b.n	27346 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   2736c:	2306      	movs	r3, #6
   2736e:	e7ea      	b.n	27346 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   27370:	2307      	movs	r3, #7
   27372:	e7e8      	b.n	27346 <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   27374:	2902      	cmp	r1, #2
   27376:	d0e5      	beq.n	27344 <z_to_nrf_optname+0x90>
   27378:	2903      	cmp	r1, #3
   2737a:	d0f3      	beq.n	27364 <z_to_nrf_optname+0xb0>
   2737c:	2901      	cmp	r1, #1
   2737e:	d19f      	bne.n	272c0 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   27380:	2301      	movs	r3, #1
   27382:	e7e0      	b.n	27346 <z_to_nrf_optname+0x92>

00027384 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   27384:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   27386:	4b03      	ldr	r3, [pc, #12]	; (27394 <nrf91_socket_iface_init+0x10>)
   27388:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   2738a:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   2738c:	4802      	ldr	r0, [pc, #8]	; (27398 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   2738e:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   27390:	f7fc bad6 	b.w	23940 <socket_offload_register>
   27394:	20023a38 	.word	0x20023a38
   27398:	000421ec 	.word	0x000421ec

0002739c <dk_set_leds_state.part.7>:
int dk_set_leds(u32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(u32_t leds_on_mask, u32_t leds_off_mask)
   2739c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   273a0:	4606      	mov	r6, r0
   273a2:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   273a4:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_write(led_devs[i],
   273a6:	f8df 8068 	ldr.w	r8, [pc, #104]	; 27410 <dk_set_leds_state.part.7+0x74>
						 led_pins[i].number, val);
   273aa:	f8df 9068 	ldr.w	r9, [pc, #104]	; 27414 <dk_set_leds_state.part.7+0x78>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   273ae:	fa26 f304 	lsr.w	r3, r6, r4
   273b2:	fa27 f204 	lsr.w	r2, r7, r4
   273b6:	431a      	orrs	r2, r3
   273b8:	07d2      	lsls	r2, r2, #31
   273ba:	d51d      	bpl.n	273f8 <dk_set_leds_state.part.7+0x5c>
						 led_pins[i].number, val);
   273bc:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
			int err = gpio_pin_write(led_devs[i],
   273c0:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
   273c4:	7912      	ldrb	r2, [r2, #4]
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
   273c6:	6841      	ldr	r1, [r0, #4]
   273c8:	f003 0301 	and.w	r3, r3, #1
   273cc:	684d      	ldr	r5, [r1, #4]
   273ce:	2100      	movs	r1, #0
   273d0:	47a8      	blx	r5
			if (err) {
   273d2:	4605      	mov	r5, r0
   273d4:	b180      	cbz	r0, 273f8 <dk_set_leds_state.part.7+0x5c>
				LOG_ERR("Cannot write LED gpio");
   273d6:	2301      	movs	r3, #1
   273d8:	f04f 0000 	mov.w	r0, #0
   273dc:	4a09      	ldr	r2, [pc, #36]	; (27404 <dk_set_leds_state.part.7+0x68>)
   273de:	f363 0007 	bfi	r0, r3, #0, #8
   273e2:	4b09      	ldr	r3, [pc, #36]	; (27408 <dk_set_leds_state.part.7+0x6c>)
   273e4:	4909      	ldr	r1, [pc, #36]	; (2740c <dk_set_leds_state.part.7+0x70>)
   273e6:	1a9b      	subs	r3, r3, r2
   273e8:	08db      	lsrs	r3, r3, #3
   273ea:	f363 108f 	bfi	r0, r3, #6, #10
   273ee:	f016 fdb8 	bl	3df62 <log_string_sync>
			}
		}
	}

	return 0;
}
   273f2:	4628      	mov	r0, r5
   273f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   273f8:	3401      	adds	r4, #1
   273fa:	2c04      	cmp	r4, #4
   273fc:	d1d7      	bne.n	273ae <dk_set_leds_state.part.7+0x12>
	return 0;
   273fe:	2500      	movs	r5, #0
   27400:	e7f7      	b.n	273f2 <dk_set_leds_state.part.7+0x56>
   27402:	bf00      	nop
   27404:	00041c2c 	.word	0x00041c2c
   27408:	00041c8c 	.word	0x00041c8c
   2740c:	000452e2 	.word	0x000452e2
   27410:	20023aa0 	.word	0x20023aa0
   27414:	0004224c 	.word	0x0004224c

00027418 <button_pressed>:
{
   27418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2741a:	f04f 0320 	mov.w	r3, #32
   2741e:	f3ef 8511 	mrs	r5, BASEPRI
   27422:	f383 8811 	msr	BASEPRI, r3
   27426:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2742a:	4833      	ldr	r0, [pc, #204]	; (274f8 <button_pressed+0xe0>)
   2742c:	f012 ffbc 	bl	3a3a8 <z_spin_lock_valid>
   27430:	b968      	cbnz	r0, 2744e <button_pressed+0x36>
   27432:	234a      	movs	r3, #74	; 0x4a
   27434:	4a31      	ldr	r2, [pc, #196]	; (274fc <button_pressed+0xe4>)
   27436:	4932      	ldr	r1, [pc, #200]	; (27500 <button_pressed+0xe8>)
   27438:	4832      	ldr	r0, [pc, #200]	; (27504 <button_pressed+0xec>)
   2743a:	f016 fd2e 	bl	3de9a <printk>
   2743e:	492e      	ldr	r1, [pc, #184]	; (274f8 <button_pressed+0xe0>)
   27440:	4831      	ldr	r0, [pc, #196]	; (27508 <button_pressed+0xf0>)
   27442:	f016 fd2a 	bl	3de9a <printk>
   27446:	214a      	movs	r1, #74	; 0x4a
   27448:	482c      	ldr	r0, [pc, #176]	; (274fc <button_pressed+0xe4>)
   2744a:	f016 fd79 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   2744e:	482a      	ldr	r0, [pc, #168]	; (274f8 <button_pressed+0xe0>)
   27450:	f012 ffc8 	bl	3a3e4 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   27454:	2400      	movs	r4, #0
   27456:	4e2d      	ldr	r6, [pc, #180]	; (2750c <button_pressed+0xf4>)
			  button_pins[i].number);
   27458:	4f2d      	ldr	r7, [pc, #180]	; (27510 <button_pressed+0xf8>)
   2745a:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
			err = gpio_pin_disable_callback(button_devs[i],
   2745e:	f856 0b04 	ldr.w	r0, [r6], #4
   27462:	791a      	ldrb	r2, [r3, #4]
					      int access_op, u32_t pin)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->disable_callback == NULL) {
   27464:	6843      	ldr	r3, [r0, #4]
   27466:	695b      	ldr	r3, [r3, #20]
   27468:	b1ab      	cbz	r3, 27496 <button_pressed+0x7e>
		return -ENOTSUP;
	}

	return api->disable_callback(port, access_op, pin);
   2746a:	2100      	movs	r1, #0
   2746c:	4798      	blx	r3
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   2746e:	3401      	adds	r4, #1
   27470:	2c04      	cmp	r4, #4
   27472:	d013      	beq.n	2749c <button_pressed+0x84>
   27474:	2800      	cmp	r0, #0
   27476:	d0f0      	beq.n	2745a <button_pressed+0x42>
		LOG_ERR("Cannot disable callbacks");
   27478:	2301      	movs	r3, #1
   2747a:	f04f 0000 	mov.w	r0, #0
   2747e:	4a25      	ldr	r2, [pc, #148]	; (27514 <button_pressed+0xfc>)
   27480:	f363 0007 	bfi	r0, r3, #0, #8
   27484:	4b24      	ldr	r3, [pc, #144]	; (27518 <button_pressed+0x100>)
   27486:	4925      	ldr	r1, [pc, #148]	; (2751c <button_pressed+0x104>)
   27488:	1a9b      	subs	r3, r3, r2
   2748a:	08db      	lsrs	r3, r3, #3
   2748c:	f363 108f 	bfi	r0, r3, #6, #10
   27490:	f016 fd67 	bl	3df62 <log_string_sync>
   27494:	e004      	b.n	274a0 <button_pressed+0x88>
		return -ENOTSUP;
   27496:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2749a:	e7e8      	b.n	2746e <button_pressed+0x56>
	if (err) {
   2749c:	2800      	cmp	r0, #0
   2749e:	d1eb      	bne.n	27478 <button_pressed+0x60>
	switch (state) {
   274a0:	4b1f      	ldr	r3, [pc, #124]	; (27520 <button_pressed+0x108>)
   274a2:	781a      	ldrb	r2, [r3, #0]
   274a4:	b9e2      	cbnz	r2, 274e0 <button_pressed+0xc8>
		state = STATE_SCANNING;
   274a6:	2201      	movs	r2, #1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   274a8:	491e      	ldr	r1, [pc, #120]	; (27524 <button_pressed+0x10c>)
   274aa:	481f      	ldr	r0, [pc, #124]	; (27528 <button_pressed+0x110>)
   274ac:	701a      	strb	r2, [r3, #0]
   274ae:	f013 f981 	bl	3a7b4 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   274b2:	4811      	ldr	r0, [pc, #68]	; (274f8 <button_pressed+0xe0>)
   274b4:	f012 ff86 	bl	3a3c4 <z_spin_unlock_valid>
   274b8:	b968      	cbnz	r0, 274d6 <button_pressed+0xbe>
   274ba:	235d      	movs	r3, #93	; 0x5d
   274bc:	4a0f      	ldr	r2, [pc, #60]	; (274fc <button_pressed+0xe4>)
   274be:	491b      	ldr	r1, [pc, #108]	; (2752c <button_pressed+0x114>)
   274c0:	4810      	ldr	r0, [pc, #64]	; (27504 <button_pressed+0xec>)
   274c2:	f016 fcea 	bl	3de9a <printk>
   274c6:	490c      	ldr	r1, [pc, #48]	; (274f8 <button_pressed+0xe0>)
   274c8:	4819      	ldr	r0, [pc, #100]	; (27530 <button_pressed+0x118>)
   274ca:	f016 fce6 	bl	3de9a <printk>
   274ce:	215d      	movs	r1, #93	; 0x5d
   274d0:	480a      	ldr	r0, [pc, #40]	; (274fc <button_pressed+0xe4>)
   274d2:	f016 fd35 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   274d6:	f385 8811 	msr	BASEPRI, r5
   274da:	f3bf 8f6f 	isb	sy
}
   274de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   274e0:	23f2      	movs	r3, #242	; 0xf2
   274e2:	4a14      	ldr	r2, [pc, #80]	; (27534 <button_pressed+0x11c>)
   274e4:	4914      	ldr	r1, [pc, #80]	; (27538 <button_pressed+0x120>)
   274e6:	4807      	ldr	r0, [pc, #28]	; (27504 <button_pressed+0xec>)
   274e8:	f016 fcd7 	bl	3de9a <printk>
   274ec:	21f2      	movs	r1, #242	; 0xf2
   274ee:	4811      	ldr	r0, [pc, #68]	; (27534 <button_pressed+0x11c>)
   274f0:	f016 fd26 	bl	3df40 <assert_post_action>
		break;
   274f4:	e7dd      	b.n	274b2 <button_pressed+0x9a>
   274f6:	bf00      	nop
   274f8:	20023ab0 	.word	0x20023ab0
   274fc:	00043dc8 	.word	0x00043dc8
   27500:	00043dee 	.word	0x00043dee
   27504:	00043278 	.word	0x00043278
   27508:	00043e03 	.word	0x00043e03
   2750c:	20023a3c 	.word	0x20023a3c
   27510:	0004222c 	.word	0x0004222c
   27514:	00041c2c 	.word	0x00041c2c
   27518:	00041c8c 	.word	0x00041c8c
   2751c:	000451a9 	.word	0x000451a9
   27520:	2002a2c1 	.word	0x2002a2c1
   27524:	20023a6c 	.word	0x20023a6c
   27528:	200292b4 	.word	0x200292b4
   2752c:	00043e1b 	.word	0x00043e1b
   27530:	00043e32 	.word	0x00043e32
   27534:	000451c2 	.word	0x000451c2
   27538:	00048cfb 	.word	0x00048cfb

0002753c <buttons_scan_fn>:
{
   2753c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	u32_t ret = 0;
   27540:	2400      	movs	r4, #0
   27542:	4f6d      	ldr	r7, [pc, #436]	; (276f8 <buttons_scan_fn+0x1bc>)
			button_devs[i], button_pins[i].number, &val)) {
   27544:	f8df 920c 	ldr.w	r9, [pc, #524]	; 27754 <buttons_scan_fn+0x218>
{
   27548:	463e      	mov	r6, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2754a:	4625      	mov	r5, r4
   2754c:	46c8      	mov	r8, r9
			button_devs[i], button_pins[i].number, &val)) {
   2754e:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		if (gpio_pin_read(
   27552:	f856 0b04 	ldr.w	r0, [r6], #4
   27556:	791a      	ldrb	r2, [r3, #4]
	return api->read(port, access_op, pin, value);
   27558:	6843      	ldr	r3, [r0, #4]
   2755a:	2100      	movs	r1, #0
   2755c:	f8d3 a008 	ldr.w	sl, [r3, #8]
   27560:	ab01      	add	r3, sp, #4
   27562:	47d0      	blx	sl
   27564:	2800      	cmp	r0, #0
   27566:	d04b      	beq.n	27600 <buttons_scan_fn+0xc4>
			LOG_ERR("Cannot read gpio pin");
   27568:	2301      	movs	r3, #1
   2756a:	f04f 0000 	mov.w	r0, #0
   2756e:	4a63      	ldr	r2, [pc, #396]	; (276fc <buttons_scan_fn+0x1c0>)
   27570:	f363 0007 	bfi	r0, r3, #0, #8
   27574:	4b62      	ldr	r3, [pc, #392]	; (27700 <buttons_scan_fn+0x1c4>)
   27576:	4963      	ldr	r1, [pc, #396]	; (27704 <buttons_scan_fn+0x1c8>)
   27578:	1a9b      	subs	r3, r3, r2
   2757a:	08db      	lsrs	r3, r3, #3
   2757c:	f363 108f 	bfi	r0, r3, #6, #10
   27580:	f016 fcef 	bl	3df62 <log_string_sync>
			return 0;
   27584:	2400      	movs	r4, #0
   27586:	4b60      	ldr	r3, [pc, #384]	; (27708 <buttons_scan_fn+0x1cc>)
   27588:	e8d3 2fef 	ldaex	r2, [r3]
   2758c:	e8c3 4fe1 	stlex	r1, r4, [r3]
   27590:	2900      	cmp	r1, #0
   27592:	d1f9      	bne.n	27588 <buttons_scan_fn+0x4c>
	if (!initial_run) {
   27594:	4b5d      	ldr	r3, [pc, #372]	; (2770c <buttons_scan_fn+0x1d0>)
   27596:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 27758 <buttons_scan_fn+0x21c>
   2759a:	781a      	ldrb	r2, [r3, #0]
   2759c:	2a00      	cmp	r2, #0
   2759e:	d141      	bne.n	27624 <buttons_scan_fn+0xe8>
		if (button_scan != last_button_scan) {
   275a0:	f8d9 6000 	ldr.w	r6, [r9]
   275a4:	42a6      	cmp	r6, r4
   275a6:	d011      	beq.n	275cc <buttons_scan_fn+0x90>
	if (button_handler_cb != NULL) {
   275a8:	4b59      	ldr	r3, [pc, #356]	; (27710 <buttons_scan_fn+0x1d4>)
			u32_t has_changed = (button_scan ^ last_button_scan);
   275aa:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   275ac:	681b      	ldr	r3, [r3, #0]
   275ae:	b113      	cbz	r3, 275b6 <buttons_scan_fn+0x7a>
		button_handler_cb(button_state, has_changed);
   275b0:	4631      	mov	r1, r6
   275b2:	4620      	mov	r0, r4
   275b4:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   275b6:	f04f 31ff 	mov.w	r1, #4294967295
   275ba:	4856      	ldr	r0, [pc, #344]	; (27714 <buttons_scan_fn+0x1d8>)
   275bc:	f011 f9e4 	bl	38988 <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   275c0:	4b55      	ldr	r3, [pc, #340]	; (27718 <buttons_scan_fn+0x1dc>)
   275c2:	681d      	ldr	r5, [r3, #0]
   275c4:	bb2d      	cbnz	r5, 27612 <buttons_scan_fn+0xd6>
	return z_impl_k_mutex_unlock(mutex);
   275c6:	4853      	ldr	r0, [pc, #332]	; (27714 <buttons_scan_fn+0x1d8>)
   275c8:	f011 fabc 	bl	38b44 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   275cc:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   275d0:	b35c      	cbz	r4, 2762a <buttons_scan_fn+0xee>
   275d2:	220a      	movs	r2, #10
   275d4:	4951      	ldr	r1, [pc, #324]	; (2771c <buttons_scan_fn+0x1e0>)
   275d6:	4852      	ldr	r0, [pc, #328]	; (27720 <buttons_scan_fn+0x1e4>)
   275d8:	f013 f8ec 	bl	3a7b4 <k_delayed_work_submit_to_queue>
		if (err) {
   275dc:	b168      	cbz	r0, 275fa <buttons_scan_fn+0xbe>
			LOG_ERR("Cannot add work to workqueue");
   275de:	2301      	movs	r3, #1
   275e0:	f04f 0000 	mov.w	r0, #0
   275e4:	4a45      	ldr	r2, [pc, #276]	; (276fc <buttons_scan_fn+0x1c0>)
   275e6:	f363 0007 	bfi	r0, r3, #0, #8
   275ea:	4b45      	ldr	r3, [pc, #276]	; (27700 <buttons_scan_fn+0x1c4>)
   275ec:	494d      	ldr	r1, [pc, #308]	; (27724 <buttons_scan_fn+0x1e8>)
   275ee:	1a9b      	subs	r3, r3, r2
   275f0:	08db      	lsrs	r3, r3, #3
   275f2:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Cannot enable callbacks");
   275f6:	f016 fcb4 	bl	3df62 <log_string_sync>
}
   275fa:	b002      	add	sp, #8
   275fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   27600:	9b01      	ldr	r3, [sp, #4]
   27602:	b913      	cbnz	r3, 2760a <buttons_scan_fn+0xce>
			ret |= 1U << i;
   27604:	2301      	movs	r3, #1
   27606:	40ab      	lsls	r3, r5
   27608:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2760a:	3501      	adds	r5, #1
   2760c:	2d04      	cmp	r5, #4
   2760e:	d19e      	bne.n	2754e <buttons_scan_fn+0x12>
   27610:	e7b9      	b.n	27586 <buttons_scan_fn+0x4a>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   27612:	3d04      	subs	r5, #4
   27614:	2d00      	cmp	r5, #0
   27616:	d0d6      	beq.n	275c6 <buttons_scan_fn+0x8a>
			handler->cb(button_state, has_changed);
   27618:	682b      	ldr	r3, [r5, #0]
   2761a:	4631      	mov	r1, r6
   2761c:	4620      	mov	r0, r4
   2761e:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27620:	686d      	ldr	r5, [r5, #4]
	return node->next;
   27622:	e7cf      	b.n	275c4 <buttons_scan_fn+0x88>
		initial_run = false;
   27624:	2200      	movs	r2, #0
   27626:	701a      	strb	r2, [r3, #0]
   27628:	e7d0      	b.n	275cc <buttons_scan_fn+0x90>
	__asm__ volatile(
   2762a:	f04f 0320 	mov.w	r3, #32
   2762e:	f3ef 8611 	mrs	r6, BASEPRI
   27632:	f383 8811 	msr	BASEPRI, r3
   27636:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2763a:	483b      	ldr	r0, [pc, #236]	; (27728 <buttons_scan_fn+0x1ec>)
   2763c:	f012 feb4 	bl	3a3a8 <z_spin_lock_valid>
   27640:	b968      	cbnz	r0, 2765e <buttons_scan_fn+0x122>
   27642:	234a      	movs	r3, #74	; 0x4a
   27644:	4a39      	ldr	r2, [pc, #228]	; (2772c <buttons_scan_fn+0x1f0>)
   27646:	493a      	ldr	r1, [pc, #232]	; (27730 <buttons_scan_fn+0x1f4>)
   27648:	483a      	ldr	r0, [pc, #232]	; (27734 <buttons_scan_fn+0x1f8>)
   2764a:	f016 fc26 	bl	3de9a <printk>
   2764e:	4936      	ldr	r1, [pc, #216]	; (27728 <buttons_scan_fn+0x1ec>)
   27650:	4839      	ldr	r0, [pc, #228]	; (27738 <buttons_scan_fn+0x1fc>)
   27652:	f016 fc22 	bl	3de9a <printk>
   27656:	214a      	movs	r1, #74	; 0x4a
   27658:	4834      	ldr	r0, [pc, #208]	; (2772c <buttons_scan_fn+0x1f0>)
   2765a:	f016 fc71 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   2765e:	4832      	ldr	r0, [pc, #200]	; (27728 <buttons_scan_fn+0x1ec>)
   27660:	f012 fec0 	bl	3a3e4 <z_spin_lock_set_owner>
		switch (state) {
   27664:	4b35      	ldr	r3, [pc, #212]	; (2773c <buttons_scan_fn+0x200>)
   27666:	781a      	ldrb	r2, [r3, #0]
   27668:	2a01      	cmp	r2, #1
   2766a:	d139      	bne.n	276e0 <buttons_scan_fn+0x1a4>
			state = STATE_WAITING;
   2766c:	2200      	movs	r2, #0
   2766e:	701a      	strb	r2, [r3, #0]
			  button_pins[i].number);
   27670:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
			err = gpio_pin_enable_callback(button_devs[i],
   27674:	f857 0b04 	ldr.w	r0, [r7], #4
   27678:	791a      	ldrb	r2, [r3, #4]
	if (api->enable_callback == NULL) {
   2767a:	6843      	ldr	r3, [r0, #4]
   2767c:	691b      	ldr	r3, [r3, #16]
   2767e:	b363      	cbz	r3, 276da <buttons_scan_fn+0x19e>
	return api->enable_callback(port, access_op, pin);
   27680:	2100      	movs	r1, #0
   27682:	4798      	blx	r3
   27684:	4605      	mov	r5, r0
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   27686:	3401      	adds	r4, #1
   27688:	2c04      	cmp	r4, #4
   2768a:	d001      	beq.n	27690 <buttons_scan_fn+0x154>
   2768c:	2d00      	cmp	r5, #0
   2768e:	d0ef      	beq.n	27670 <buttons_scan_fn+0x134>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27690:	4825      	ldr	r0, [pc, #148]	; (27728 <buttons_scan_fn+0x1ec>)
   27692:	f012 fe97 	bl	3a3c4 <z_spin_unlock_valid>
   27696:	b968      	cbnz	r0, 276b4 <buttons_scan_fn+0x178>
   27698:	235d      	movs	r3, #93	; 0x5d
   2769a:	4a24      	ldr	r2, [pc, #144]	; (2772c <buttons_scan_fn+0x1f0>)
   2769c:	4928      	ldr	r1, [pc, #160]	; (27740 <buttons_scan_fn+0x204>)
   2769e:	4825      	ldr	r0, [pc, #148]	; (27734 <buttons_scan_fn+0x1f8>)
   276a0:	f016 fbfb 	bl	3de9a <printk>
   276a4:	4920      	ldr	r1, [pc, #128]	; (27728 <buttons_scan_fn+0x1ec>)
   276a6:	4827      	ldr	r0, [pc, #156]	; (27744 <buttons_scan_fn+0x208>)
   276a8:	f016 fbf7 	bl	3de9a <printk>
   276ac:	215d      	movs	r1, #93	; 0x5d
   276ae:	481f      	ldr	r0, [pc, #124]	; (2772c <buttons_scan_fn+0x1f0>)
   276b0:	f016 fc46 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   276b4:	f386 8811 	msr	BASEPRI, r6
   276b8:	f3bf 8f6f 	isb	sy
		if (err) {
   276bc:	2d00      	cmp	r5, #0
   276be:	d09c      	beq.n	275fa <buttons_scan_fn+0xbe>
			LOG_ERR("Cannot enable callbacks");
   276c0:	2301      	movs	r3, #1
   276c2:	f04f 0000 	mov.w	r0, #0
   276c6:	4a0d      	ldr	r2, [pc, #52]	; (276fc <buttons_scan_fn+0x1c0>)
   276c8:	f363 0007 	bfi	r0, r3, #0, #8
   276cc:	4b0c      	ldr	r3, [pc, #48]	; (27700 <buttons_scan_fn+0x1c4>)
   276ce:	491e      	ldr	r1, [pc, #120]	; (27748 <buttons_scan_fn+0x20c>)
   276d0:	1a9b      	subs	r3, r3, r2
   276d2:	08db      	lsrs	r3, r3, #3
   276d4:	f363 108f 	bfi	r0, r3, #6, #10
   276d8:	e78d      	b.n	275f6 <buttons_scan_fn+0xba>
		return -ENOTSUP;
   276da:	f06f 0585 	mvn.w	r5, #133	; 0x85
   276de:	e7d2      	b.n	27686 <buttons_scan_fn+0x14a>
			__ASSERT_NO_MSG(false);
   276e0:	23a8      	movs	r3, #168	; 0xa8
   276e2:	4a1a      	ldr	r2, [pc, #104]	; (2774c <buttons_scan_fn+0x210>)
   276e4:	491a      	ldr	r1, [pc, #104]	; (27750 <buttons_scan_fn+0x214>)
   276e6:	4813      	ldr	r0, [pc, #76]	; (27734 <buttons_scan_fn+0x1f8>)
   276e8:	f016 fbd7 	bl	3de9a <printk>
   276ec:	21a8      	movs	r1, #168	; 0xa8
   276ee:	4817      	ldr	r0, [pc, #92]	; (2774c <buttons_scan_fn+0x210>)
   276f0:	f016 fc26 	bl	3df40 <assert_post_action>
		int err = 0;
   276f4:	2500      	movs	r5, #0
   276f6:	e7cb      	b.n	27690 <buttons_scan_fn+0x154>
   276f8:	20023a3c 	.word	0x20023a3c
   276fc:	00041c2c 	.word	0x00041c2c
   27700:	00041c8c 	.word	0x00041c8c
   27704:	00045200 	.word	0x00045200
   27708:	20023ab4 	.word	0x20023ab4
   2770c:	200322d4 	.word	0x200322d4
   27710:	20023a4c 	.word	0x20023a4c
   27714:	20023a50 	.word	0x20023a50
   27718:	20023a64 	.word	0x20023a64
   2771c:	20023a6c 	.word	0x20023a6c
   27720:	200292b4 	.word	0x200292b4
   27724:	00045215 	.word	0x00045215
   27728:	20023ab0 	.word	0x20023ab0
   2772c:	00043dc8 	.word	0x00043dc8
   27730:	00043dee 	.word	0x00043dee
   27734:	00043278 	.word	0x00043278
   27738:	00043e03 	.word	0x00043e03
   2773c:	2002a2c1 	.word	0x2002a2c1
   27740:	00043e1b 	.word	0x00043e1b
   27744:	00043e32 	.word	0x00043e32
   27748:	00045232 	.word	0x00045232
   2774c:	000451c2 	.word	0x000451c2
   27750:	00048cfb 	.word	0x00048cfb
   27754:	0004222c 	.word	0x0004222c
   27758:	20023a98 	.word	0x20023a98

0002775c <dk_leds_init>:
{
   2775c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2775e:	2500      	movs	r5, #0
   27760:	4c1d      	ldr	r4, [pc, #116]	; (277d8 <dk_leds_init+0x7c>)
   27762:	4f1e      	ldr	r7, [pc, #120]	; (277dc <dk_leds_init+0x80>)
		led_devs[i] = device_get_binding(led_pins[i].port);
   27764:	6820      	ldr	r0, [r4, #0]
   27766:	f010 fc1f 	bl	37fa8 <z_impl_device_get_binding>
   2776a:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
   2776e:	b988      	cbnz	r0, 27794 <dk_leds_init+0x38>
			LOG_ERR("Cannot bind gpio device");
   27770:	2301      	movs	r3, #1
   27772:	f04f 0000 	mov.w	r0, #0
   27776:	4a1a      	ldr	r2, [pc, #104]	; (277e0 <dk_leds_init+0x84>)
   27778:	f363 0007 	bfi	r0, r3, #0, #8
   2777c:	4b19      	ldr	r3, [pc, #100]	; (277e4 <dk_leds_init+0x88>)
   2777e:	491a      	ldr	r1, [pc, #104]	; (277e8 <dk_leds_init+0x8c>)
   27780:	1a9b      	subs	r3, r3, r2
   27782:	08db      	lsrs	r3, r3, #3
   27784:	f363 108f 	bfi	r0, r3, #6, #10
   27788:	f016 fbeb 	bl	3df62 <log_string_sync>
			return -ENODEV;
   2778c:	f06f 0612 	mvn.w	r6, #18
}
   27790:	4630      	mov	r0, r6
   27792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   27794:	7922      	ldrb	r2, [r4, #4]
	return api->config(port, access_op, pin, flags);
   27796:	6843      	ldr	r3, [r0, #4]
   27798:	2100      	movs	r1, #0
   2779a:	681e      	ldr	r6, [r3, #0]
   2779c:	2301      	movs	r3, #1
   2779e:	47b0      	blx	r6
		if (err) {
   277a0:	4606      	mov	r6, r0
   277a2:	b170      	cbz	r0, 277c2 <dk_leds_init+0x66>
			LOG_ERR("Cannot configure LED gpio");
   277a4:	2301      	movs	r3, #1
   277a6:	f04f 0000 	mov.w	r0, #0
   277aa:	4a0d      	ldr	r2, [pc, #52]	; (277e0 <dk_leds_init+0x84>)
   277ac:	f363 0007 	bfi	r0, r3, #0, #8
   277b0:	4b0c      	ldr	r3, [pc, #48]	; (277e4 <dk_leds_init+0x88>)
   277b2:	490e      	ldr	r1, [pc, #56]	; (277ec <dk_leds_init+0x90>)
   277b4:	1a9b      	subs	r3, r3, r2
   277b6:	08db      	lsrs	r3, r3, #3
   277b8:	f363 108f 	bfi	r0, r3, #6, #10
   277bc:	f016 fbd1 	bl	3df62 <log_string_sync>
			return err;
   277c0:	e7e6      	b.n	27790 <dk_leds_init+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   277c2:	3501      	adds	r5, #1
   277c4:	2d04      	cmp	r5, #4
   277c6:	f104 0408 	add.w	r4, r4, #8
   277ca:	d1cb      	bne.n	27764 <dk_leds_init+0x8>
}
   277cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   277d0:	210f      	movs	r1, #15
   277d2:	f7ff bde3 	b.w	2739c <dk_set_leds_state.part.7>
   277d6:	bf00      	nop
   277d8:	0004224c 	.word	0x0004224c
   277dc:	20023aa0 	.word	0x20023aa0
   277e0:	00041c2c 	.word	0x00041c2c
   277e4:	00041c8c 	.word	0x00041c8c
   277e8:	000452b0 	.word	0x000452b0
   277ec:	000452c8 	.word	0x000452c8

000277f0 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   277f0:	4b05      	ldr	r3, [pc, #20]	; (27808 <dk_read_buttons+0x18>)
   277f2:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   277f6:	b100      	cbz	r0, 277fa <dk_read_buttons+0xa>
		*button_state = current_state;
   277f8:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   277fa:	4804      	ldr	r0, [pc, #16]	; (2780c <dk_read_buttons+0x1c>)
   277fc:	b111      	cbz	r1, 27804 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   277fe:	6802      	ldr	r2, [r0, #0]
   27800:	405a      	eors	r2, r3
   27802:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   27804:	6003      	str	r3, [r0, #0]
}
   27806:	4770      	bx	lr
   27808:	20023ab4 	.word	0x20023ab4
   2780c:	20023a9c 	.word	0x20023a9c

00027810 <dk_buttons_init>:
{
   27810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   27814:	4b66      	ldr	r3, [pc, #408]	; (279b0 <dk_buttons_init+0x1a0>)
   27816:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   27818:	4d66      	ldr	r5, [pc, #408]	; (279b4 <dk_buttons_init+0x1a4>)
   2781a:	4f67      	ldr	r7, [pc, #412]	; (279b8 <dk_buttons_init+0x1a8>)
   2781c:	4867      	ldr	r0, [pc, #412]	; (279bc <dk_buttons_init+0x1ac>)
   2781e:	f018 fd74 	bl	4030a <z_impl_k_mutex_init>
   27822:	46b9      	mov	r9, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   27824:	2600      	movs	r6, #0
   27826:	46a8      	mov	r8, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
   27828:	6828      	ldr	r0, [r5, #0]
   2782a:	f010 fbbd 	bl	37fa8 <z_impl_device_get_binding>
   2782e:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   27832:	b990      	cbnz	r0, 2785a <dk_buttons_init+0x4a>
			LOG_ERR("Cannot bind gpio device");
   27834:	2301      	movs	r3, #1
   27836:	f04f 0000 	mov.w	r0, #0
   2783a:	4a61      	ldr	r2, [pc, #388]	; (279c0 <dk_buttons_init+0x1b0>)
   2783c:	f363 0007 	bfi	r0, r3, #0, #8
   27840:	4b60      	ldr	r3, [pc, #384]	; (279c4 <dk_buttons_init+0x1b4>)
   27842:	4961      	ldr	r1, [pc, #388]	; (279c8 <dk_buttons_init+0x1b8>)
   27844:	1a9b      	subs	r3, r3, r2
   27846:	08db      	lsrs	r3, r3, #3
   27848:	f363 108f 	bfi	r0, r3, #6, #10
   2784c:	f016 fb89 	bl	3df62 <log_string_sync>
			return -ENODEV;
   27850:	f06f 0412 	mvn.w	r4, #18
}
   27854:	4620      	mov	r0, r4
   27856:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   2785a:	792a      	ldrb	r2, [r5, #4]
   2785c:	6843      	ldr	r3, [r0, #4]
   2785e:	2100      	movs	r1, #0
   27860:	681c      	ldr	r4, [r3, #0]
   27862:	f44f 7380 	mov.w	r3, #256	; 0x100
   27866:	47a0      	blx	r4
		if (err) {
   27868:	4604      	mov	r4, r0
   2786a:	b170      	cbz	r0, 2788a <dk_buttons_init+0x7a>
			LOG_ERR("Cannot configure button gpio");
   2786c:	2301      	movs	r3, #1
   2786e:	f04f 0000 	mov.w	r0, #0
   27872:	4a53      	ldr	r2, [pc, #332]	; (279c0 <dk_buttons_init+0x1b0>)
   27874:	f363 0007 	bfi	r0, r3, #0, #8
   27878:	4b52      	ldr	r3, [pc, #328]	; (279c4 <dk_buttons_init+0x1b4>)
   2787a:	4954      	ldr	r1, [pc, #336]	; (279cc <dk_buttons_init+0x1bc>)
   2787c:	1a9b      	subs	r3, r3, r2
   2787e:	08db      	lsrs	r3, r3, #3
   27880:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Cannot add work to workqueue");
   27884:	f016 fb6d 	bl	3df62 <log_string_sync>
		return err;
   27888:	e7e4      	b.n	27854 <dk_buttons_init+0x44>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2788a:	3601      	adds	r6, #1
   2788c:	2e04      	cmp	r6, #4
   2788e:	f105 0508 	add.w	r5, r5, #8
   27892:	d1c9      	bne.n	27828 <dk_buttons_init+0x18>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   27894:	4605      	mov	r5, r0
   27896:	4e48      	ldr	r6, [pc, #288]	; (279b8 <dk_buttons_init+0x1a8>)
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   27898:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
   2789c:	f856 0b04 	ldr.w	r0, [r6], #4
   278a0:	791a      	ldrb	r2, [r3, #4]
   278a2:	6843      	ldr	r3, [r0, #4]
   278a4:	2100      	movs	r1, #0
   278a6:	681c      	ldr	r4, [r3, #0]
   278a8:	f44f 7381 	mov.w	r3, #258	; 0x102
   278ac:	47a0      	blx	r4
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   278ae:	3501      	adds	r5, #1
   278b0:	2d04      	cmp	r5, #4
   278b2:	4604      	mov	r4, r0
   278b4:	d00e      	beq.n	278d4 <dk_buttons_init+0xc4>
   278b6:	2800      	cmp	r0, #0
   278b8:	d0ee      	beq.n	27898 <dk_buttons_init+0x88>
		LOG_ERR("Cannot set interrupt mode");
   278ba:	2301      	movs	r3, #1
   278bc:	f04f 0000 	mov.w	r0, #0
   278c0:	4a3f      	ldr	r2, [pc, #252]	; (279c0 <dk_buttons_init+0x1b0>)
   278c2:	f363 0007 	bfi	r0, r3, #0, #8
   278c6:	4b3f      	ldr	r3, [pc, #252]	; (279c4 <dk_buttons_init+0x1b4>)
   278c8:	4941      	ldr	r1, [pc, #260]	; (279d0 <dk_buttons_init+0x1c0>)
   278ca:	1a9b      	subs	r3, r3, r2
   278cc:	08db      	lsrs	r3, r3, #3
   278ce:	f363 108f 	bfi	r0, r3, #6, #10
   278d2:	e7d7      	b.n	27884 <dk_buttons_init+0x74>
	if (err) {
   278d4:	2800      	cmp	r0, #0
   278d6:	d1f0      	bne.n	278ba <dk_buttons_init+0xaa>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   278d8:	4605      	mov	r5, r0
	u32_t pin_mask = 0;
   278da:	4681      	mov	r9, r0
		pin_mask |= BIT(button_pins[i].number);
   278dc:	f04f 0b01 	mov.w	fp, #1
   278e0:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 279b8 <dk_buttons_init+0x1a8>
			button_pins[i].number);
   278e4:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
		err = gpio_pin_disable_callback(button_devs[i],
   278e8:	f85a 0b04 	ldr.w	r0, [sl], #4
			button_pins[i].number);
   278ec:	791e      	ldrb	r6, [r3, #4]
	if (api->disable_callback == NULL) {
   278ee:	6843      	ldr	r3, [r0, #4]
   278f0:	695b      	ldr	r3, [r3, #20]
   278f2:	b18b      	cbz	r3, 27918 <dk_buttons_init+0x108>
	return api->disable_callback(port, access_op, pin);
   278f4:	4632      	mov	r2, r6
   278f6:	2100      	movs	r1, #0
   278f8:	4798      	blx	r3
		if (err) {
   278fa:	4604      	mov	r4, r0
   278fc:	b178      	cbz	r0, 2791e <dk_buttons_init+0x10e>
			LOG_ERR("Cannot disable callbacks()");
   278fe:	2301      	movs	r3, #1
   27900:	f04f 0000 	mov.w	r0, #0
   27904:	4a2e      	ldr	r2, [pc, #184]	; (279c0 <dk_buttons_init+0x1b0>)
   27906:	f363 0007 	bfi	r0, r3, #0, #8
   2790a:	4b2e      	ldr	r3, [pc, #184]	; (279c4 <dk_buttons_init+0x1b4>)
   2790c:	4931      	ldr	r1, [pc, #196]	; (279d4 <dk_buttons_init+0x1c4>)
   2790e:	1a9b      	subs	r3, r3, r2
   27910:	08db      	lsrs	r3, r3, #3
   27912:	f363 108f 	bfi	r0, r3, #6, #10
   27916:	e7b5      	b.n	27884 <dk_buttons_init+0x74>
		return -ENOTSUP;
   27918:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2791c:	e7ef      	b.n	278fe <dk_buttons_init+0xee>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2791e:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   27920:	fa0b f606 	lsl.w	r6, fp, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   27924:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   27926:	ea49 0906 	orr.w	r9, r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2792a:	d1db      	bne.n	278e4 <dk_buttons_init+0xd4>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2792c:	4606      	mov	r6, r0
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   2792e:	4d2a      	ldr	r5, [pc, #168]	; (279d8 <dk_buttons_init+0x1c8>)
   27930:	4b2a      	ldr	r3, [pc, #168]	; (279dc <dk_buttons_init+0x1cc>)
	callback->pin_mask = pin_mask;
   27932:	e9c5 3901 	strd	r3, r9, [r5, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   27936:	f857 0b04 	ldr.w	r0, [r7], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
   2793a:	6843      	ldr	r3, [r0, #4]
   2793c:	68db      	ldr	r3, [r3, #12]
   2793e:	b18b      	cbz	r3, 27964 <dk_buttons_init+0x154>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   27940:	2201      	movs	r2, #1
   27942:	4629      	mov	r1, r5
   27944:	4798      	blx	r3
		if (err) {
   27946:	4604      	mov	r4, r0
   27948:	b178      	cbz	r0, 2796a <dk_buttons_init+0x15a>
			LOG_ERR("Cannot add callback");
   2794a:	2301      	movs	r3, #1
   2794c:	f04f 0000 	mov.w	r0, #0
   27950:	4a1b      	ldr	r2, [pc, #108]	; (279c0 <dk_buttons_init+0x1b0>)
   27952:	f363 0007 	bfi	r0, r3, #0, #8
   27956:	4b1b      	ldr	r3, [pc, #108]	; (279c4 <dk_buttons_init+0x1b4>)
   27958:	4921      	ldr	r1, [pc, #132]	; (279e0 <dk_buttons_init+0x1d0>)
   2795a:	1a9b      	subs	r3, r3, r2
   2795c:	08db      	lsrs	r3, r3, #3
   2795e:	f363 108f 	bfi	r0, r3, #6, #10
   27962:	e78f      	b.n	27884 <dk_buttons_init+0x74>
		return -ENOTSUP;
   27964:	f06f 0485 	mvn.w	r4, #133	; 0x85
   27968:	e7ef      	b.n	2794a <dk_buttons_init+0x13a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2796a:	3601      	adds	r6, #1
   2796c:	2e04      	cmp	r6, #4
   2796e:	d1e2      	bne.n	27936 <dk_buttons_init+0x126>
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   27970:	491c      	ldr	r1, [pc, #112]	; (279e4 <dk_buttons_init+0x1d4>)
   27972:	481d      	ldr	r0, [pc, #116]	; (279e8 <dk_buttons_init+0x1d8>)
   27974:	f018 fdc0 	bl	404f8 <k_delayed_work_init>
	state = STATE_SCANNING;
   27978:	2201      	movs	r2, #1
   2797a:	4b1c      	ldr	r3, [pc, #112]	; (279ec <dk_buttons_init+0x1dc>)
   2797c:	491a      	ldr	r1, [pc, #104]	; (279e8 <dk_buttons_init+0x1d8>)
   2797e:	701a      	strb	r2, [r3, #0]
   27980:	481b      	ldr	r0, [pc, #108]	; (279f0 <dk_buttons_init+0x1e0>)
   27982:	4622      	mov	r2, r4
   27984:	f012 ff16 	bl	3a7b4 <k_delayed_work_submit_to_queue>
	if (err) {
   27988:	4604      	mov	r4, r0
   2798a:	b160      	cbz	r0, 279a6 <dk_buttons_init+0x196>
		LOG_ERR("Cannot add work to workqueue");
   2798c:	2301      	movs	r3, #1
   2798e:	f04f 0000 	mov.w	r0, #0
   27992:	4a0b      	ldr	r2, [pc, #44]	; (279c0 <dk_buttons_init+0x1b0>)
   27994:	f363 0007 	bfi	r0, r3, #0, #8
   27998:	4b0a      	ldr	r3, [pc, #40]	; (279c4 <dk_buttons_init+0x1b4>)
   2799a:	4916      	ldr	r1, [pc, #88]	; (279f4 <dk_buttons_init+0x1e4>)
   2799c:	1a9b      	subs	r3, r3, r2
   2799e:	08db      	lsrs	r3, r3, #3
   279a0:	f363 108f 	bfi	r0, r3, #6, #10
   279a4:	e76e      	b.n	27884 <dk_buttons_init+0x74>
	dk_read_buttons(NULL, NULL);
   279a6:	4601      	mov	r1, r0
   279a8:	f7ff ff22 	bl	277f0 <dk_read_buttons>
	return 0;
   279ac:	e752      	b.n	27854 <dk_buttons_init+0x44>
   279ae:	bf00      	nop
   279b0:	20023a4c 	.word	0x20023a4c
   279b4:	0004222c 	.word	0x0004222c
   279b8:	20023a3c 	.word	0x20023a3c
   279bc:	20023a50 	.word	0x20023a50
   279c0:	00041c2c 	.word	0x00041c2c
   279c4:	00041c8c 	.word	0x00041c8c
   279c8:	000452b0 	.word	0x000452b0
   279cc:	0004524a 	.word	0x0004524a
   279d0:	00045267 	.word	0x00045267
   279d4:	00045281 	.word	0x00045281
   279d8:	20023a8c 	.word	0x20023a8c
   279dc:	00027419 	.word	0x00027419
   279e0:	0004529c 	.word	0x0004529c
   279e4:	0002753d 	.word	0x0002753d
   279e8:	20023a6c 	.word	0x20023a6c
   279ec:	2002a2c1 	.word	0x2002a2c1
   279f0:	200292b4 	.word	0x200292b4
   279f4:	00045215 	.word	0x00045215

000279f8 <close>:
{
   279f8:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   279fa:	4c10      	ldr	r4, [pc, #64]	; (27a3c <close+0x44>)
{
   279fc:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   279fe:	6823      	ldr	r3, [r4, #0]
   27a00:	b94b      	cbnz	r3, 27a16 <close+0x1e>
   27a02:	490f      	ldr	r1, [pc, #60]	; (27a40 <close+0x48>)
   27a04:	480f      	ldr	r0, [pc, #60]	; (27a44 <close+0x4c>)
   27a06:	2321      	movs	r3, #33	; 0x21
   27a08:	4a0f      	ldr	r2, [pc, #60]	; (27a48 <close+0x50>)
   27a0a:	f016 fa46 	bl	3de9a <printk>
   27a0e:	2121      	movs	r1, #33	; 0x21
   27a10:	480d      	ldr	r0, [pc, #52]	; (27a48 <close+0x50>)
   27a12:	f016 fa95 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   27a16:	6823      	ldr	r3, [r4, #0]
   27a18:	685b      	ldr	r3, [r3, #4]
   27a1a:	b94b      	cbnz	r3, 27a30 <close+0x38>
   27a1c:	490b      	ldr	r1, [pc, #44]	; (27a4c <close+0x54>)
   27a1e:	4809      	ldr	r0, [pc, #36]	; (27a44 <close+0x4c>)
   27a20:	2322      	movs	r3, #34	; 0x22
   27a22:	4a09      	ldr	r2, [pc, #36]	; (27a48 <close+0x50>)
   27a24:	f016 fa39 	bl	3de9a <printk>
   27a28:	2122      	movs	r1, #34	; 0x22
   27a2a:	4807      	ldr	r0, [pc, #28]	; (27a48 <close+0x50>)
   27a2c:	f016 fa88 	bl	3df40 <assert_post_action>
	return socket_ops->close(sock);
   27a30:	6823      	ldr	r3, [r4, #0]
   27a32:	4628      	mov	r0, r5
}
   27a34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   27a38:	685b      	ldr	r3, [r3, #4]
   27a3a:	4718      	bx	r3
   27a3c:	2002389c 	.word	0x2002389c
   27a40:	000433f1 	.word	0x000433f1
   27a44:	00043278 	.word	0x00043278
   27a48:	000433c1 	.word	0x000433c1
   27a4c:	00044d7e 	.word	0x00044d7e

00027a50 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   27a50:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   27a52:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   27a54:	b118      	cbz	r0, 27a5e <callback_worker+0xe>
		data->callback(data->data);
   27a56:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   27a5a:	300c      	adds	r0, #12
   27a5c:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   27a5e:	a901      	add	r1, sp, #4
   27a60:	4802      	ldr	r0, [pc, #8]	; (27a6c <callback_worker+0x1c>)
   27a62:	f010 fcd3 	bl	3840c <k_mem_slab_free>
}
   27a66:	b003      	add	sp, #12
   27a68:	f85d fb04 	ldr.w	pc, [sp], #4
   27a6c:	200323f0 	.word	0x200323f0

00027a70 <open_socket>:
{
   27a70:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(socket_ops);
   27a72:	4c16      	ldr	r4, [pc, #88]	; (27acc <open_socket+0x5c>)
   27a74:	6823      	ldr	r3, [r4, #0]
   27a76:	b94b      	cbnz	r3, 27a8c <open_socket+0x1c>
   27a78:	4915      	ldr	r1, [pc, #84]	; (27ad0 <open_socket+0x60>)
   27a7a:	4816      	ldr	r0, [pc, #88]	; (27ad4 <open_socket+0x64>)
   27a7c:	2319      	movs	r3, #25
   27a7e:	4a16      	ldr	r2, [pc, #88]	; (27ad8 <open_socket+0x68>)
   27a80:	f016 fa0b 	bl	3de9a <printk>
   27a84:	2119      	movs	r1, #25
   27a86:	4814      	ldr	r0, [pc, #80]	; (27ad8 <open_socket+0x68>)
   27a88:	f016 fa5a 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   27a8c:	6823      	ldr	r3, [r4, #0]
   27a8e:	681b      	ldr	r3, [r3, #0]
   27a90:	b94b      	cbnz	r3, 27aa6 <open_socket+0x36>
   27a92:	4912      	ldr	r1, [pc, #72]	; (27adc <open_socket+0x6c>)
   27a94:	480f      	ldr	r0, [pc, #60]	; (27ad4 <open_socket+0x64>)
   27a96:	231a      	movs	r3, #26
   27a98:	4a0f      	ldr	r2, [pc, #60]	; (27ad8 <open_socket+0x68>)
   27a9a:	f016 f9fe 	bl	3de9a <printk>
   27a9e:	211a      	movs	r1, #26
   27aa0:	480d      	ldr	r0, [pc, #52]	; (27ad8 <open_socket+0x68>)
   27aa2:	f016 fa4d 	bl	3df40 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   27aa6:	6823      	ldr	r3, [r4, #0]
   27aa8:	f240 2201 	movw	r2, #513	; 0x201
   27aac:	681b      	ldr	r3, [r3, #0]
   27aae:	2102      	movs	r1, #2
   27ab0:	2066      	movs	r0, #102	; 0x66
   27ab2:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   27ab4:	4b0a      	ldr	r3, [pc, #40]	; (27ae0 <open_socket+0x70>)
   27ab6:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   27ab8:	3001      	adds	r0, #1
   27aba:	d104      	bne.n	27ac6 <open_socket+0x56>
		return -errno;
   27abc:	f016 fc3d 	bl	3e33a <__errno>
   27ac0:	6800      	ldr	r0, [r0, #0]
   27ac2:	4240      	negs	r0, r0
}
   27ac4:	bd10      	pop	{r4, pc}
	return 0;
   27ac6:	2000      	movs	r0, #0
   27ac8:	e7fc      	b.n	27ac4 <open_socket+0x54>
   27aca:	bf00      	nop
   27acc:	2002389c 	.word	0x2002389c
   27ad0:	000433f1 	.word	0x000433f1
   27ad4:	00043278 	.word	0x00043278
   27ad8:	000433c1 	.word	0x000433c1
   27adc:	00044d90 	.word	0x00044d90
   27ae0:	20023ab8 	.word	0x20023ab8

00027ae4 <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   27ae4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   27ae8:	4680      	mov	r8, r0
   27aea:	460d      	mov	r5, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   27aec:	f7f5 fb1a 	bl	1d124 <strlen>
	__ASSERT_NO_MSG(socket_ops);
   27af0:	4c30      	ldr	r4, [pc, #192]	; (27bb4 <at_write+0xd0>)
	struct return_state_object ret;

	LOG_DBG("Sending command %s", log_strdup(cmd));

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   27af2:	4b31      	ldr	r3, [pc, #196]	; (27bb8 <at_write+0xd4>)
	int bytes_to_send = strlen(cmd);
   27af4:	4606      	mov	r6, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   27af6:	681f      	ldr	r7, [r3, #0]
   27af8:	6823      	ldr	r3, [r4, #0]
   27afa:	b94b      	cbnz	r3, 27b10 <at_write+0x2c>
   27afc:	492f      	ldr	r1, [pc, #188]	; (27bbc <at_write+0xd8>)
   27afe:	4830      	ldr	r0, [pc, #192]	; (27bc0 <at_write+0xdc>)
   27b00:	237e      	movs	r3, #126	; 0x7e
   27b02:	4a30      	ldr	r2, [pc, #192]	; (27bc4 <at_write+0xe0>)
   27b04:	f016 f9c9 	bl	3de9a <printk>
   27b08:	217e      	movs	r1, #126	; 0x7e
   27b0a:	482e      	ldr	r0, [pc, #184]	; (27bc4 <at_write+0xe0>)
   27b0c:	f016 fa18 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   27b10:	6823      	ldr	r3, [r4, #0]
   27b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27b14:	b94b      	cbnz	r3, 27b2a <at_write+0x46>
   27b16:	492c      	ldr	r1, [pc, #176]	; (27bc8 <at_write+0xe4>)
   27b18:	4829      	ldr	r0, [pc, #164]	; (27bc0 <at_write+0xdc>)
   27b1a:	237f      	movs	r3, #127	; 0x7f
   27b1c:	4a29      	ldr	r2, [pc, #164]	; (27bc4 <at_write+0xe0>)
   27b1e:	f016 f9bc 	bl	3de9a <printk>
   27b22:	217f      	movs	r1, #127	; 0x7f
   27b24:	4827      	ldr	r0, [pc, #156]	; (27bc4 <at_write+0xe0>)
   27b26:	f016 fa0b 	bl	3df40 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   27b2a:	6823      	ldr	r3, [r4, #0]
   27b2c:	4632      	mov	r2, r6
   27b2e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   27b30:	4641      	mov	r1, r8
   27b32:	2300      	movs	r3, #0
   27b34:	4638      	mov	r0, r7
   27b36:	47a0      	blx	r4

	if (bytes_sent == -1) {
   27b38:	1c43      	adds	r3, r0, #1
   27b3a:	4604      	mov	r4, r0
   27b3c:	d121      	bne.n	27b82 <at_write+0x9e>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   27b3e:	2301      	movs	r3, #1
   27b40:	f04f 0400 	mov.w	r4, #0
   27b44:	4a21      	ldr	r2, [pc, #132]	; (27bcc <at_write+0xe8>)
   27b46:	f363 0407 	bfi	r4, r3, #0, #8
   27b4a:	4b21      	ldr	r3, [pc, #132]	; (27bd0 <at_write+0xec>)
   27b4c:	1a9b      	subs	r3, r3, r2
   27b4e:	08db      	lsrs	r3, r3, #3
   27b50:	f363 148f 	bfi	r4, r3, #6, #10
   27b54:	f016 fbf1 	bl	3e33a <__errno>
   27b58:	491e      	ldr	r1, [pc, #120]	; (27bd4 <at_write+0xf0>)
   27b5a:	6802      	ldr	r2, [r0, #0]
   27b5c:	4620      	mov	r0, r4
   27b5e:	f016 fa00 	bl	3df62 <log_string_sync>
		ret.code  = -errno;
   27b62:	f016 fbea 	bl	3e33a <__errno>
   27b66:	6803      	ldr	r3, [r0, #0]
   27b68:	425b      	negs	r3, r3
   27b6a:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
   27b6c:	2301      	movs	r3, #1
   27b6e:	f88d 3004 	strb.w	r3, [sp, #4]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
   27b72:	b115      	cbz	r5, 27b7a <at_write+0x96>
		*state = ret.state;
   27b74:	f89d 3004 	ldrb.w	r3, [sp, #4]
   27b78:	702b      	strb	r3, [r5, #0]
	}

	return ret.code;
}
   27b7a:	9800      	ldr	r0, [sp, #0]
   27b7c:	b002      	add	sp, #8
   27b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&msgq, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   27b82:	f04f 32ff 	mov.w	r2, #4294967295
   27b86:	4669      	mov	r1, sp
   27b88:	4813      	ldr	r0, [pc, #76]	; (27bd8 <at_write+0xf4>)
   27b8a:	f010 fe51 	bl	38830 <z_impl_k_msgq_get>
		if (bytes_sent != bytes_to_send) {
   27b8e:	42a6      	cmp	r6, r4
   27b90:	d0ef      	beq.n	27b72 <at_write+0x8e>
			LOG_ERR("Bytes sent (%d) was not the "
   27b92:	2301      	movs	r3, #1
   27b94:	f04f 0000 	mov.w	r0, #0
   27b98:	4a0c      	ldr	r2, [pc, #48]	; (27bcc <at_write+0xe8>)
   27b9a:	f363 0007 	bfi	r0, r3, #0, #8
   27b9e:	4b0c      	ldr	r3, [pc, #48]	; (27bd0 <at_write+0xec>)
   27ba0:	490e      	ldr	r1, [pc, #56]	; (27bdc <at_write+0xf8>)
   27ba2:	1a9b      	subs	r3, r3, r2
   27ba4:	08db      	lsrs	r3, r3, #3
   27ba6:	f363 108f 	bfi	r0, r3, #6, #10
   27baa:	4622      	mov	r2, r4
   27bac:	4633      	mov	r3, r6
   27bae:	f016 f9d8 	bl	3df62 <log_string_sync>
   27bb2:	e7de      	b.n	27b72 <at_write+0x8e>
   27bb4:	2002389c 	.word	0x2002389c
   27bb8:	20023ab8 	.word	0x20023ab8
   27bbc:	000433f1 	.word	0x000433f1
   27bc0:	00043278 	.word	0x00043278
   27bc4:	000433c1 	.word	0x000433c1
   27bc8:	00044dc8 	.word	0x00044dc8
   27bcc:	00041c2c 	.word	0x00041c2c
   27bd0:	00041c34 	.word	0x00041c34
   27bd4:	00045357 	.word	0x00045357
   27bd8:	200324c4 	.word	0x200324c4
   27bdc:	0004537a 	.word	0x0004537a

00027be0 <socket_thread_fn>:
{
   27be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
					LOG_ERR("Response buffer not large "
   27be4:	4b9e      	ldr	r3, [pc, #632]	; (27e60 <socket_thread_fn+0x280>)
   27be6:	4c9f      	ldr	r4, [pc, #636]	; (27e64 <socket_thread_fn+0x284>)
{
   27be8:	b087      	sub	sp, #28
					LOG_ERR("Response buffer not large "
   27bea:	1ae4      	subs	r4, r4, r3
   27bec:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   27bf0:	f04f 32ff 	mov.w	r2, #4294967295
   27bf4:	a903      	add	r1, sp, #12
   27bf6:	489c      	ldr	r0, [pc, #624]	; (27e68 <socket_thread_fn+0x288>)
   27bf8:	f010 fba4 	bl	38344 <k_mem_slab_alloc>
		ret.code  = 0;
   27bfc:	2300      	movs	r3, #0
		item->callback = NULL;
   27bfe:	9d03      	ldr	r5, [sp, #12]
		ret.code  = 0;
   27c00:	9304      	str	r3, [sp, #16]
		item->callback = NULL;
   27c02:	f8c5 3a98 	str.w	r3, [r5, #2712]	; 0xa98
		ret.state = AT_CMD_OK;
   27c06:	f88d 3014 	strb.w	r3, [sp, #20]
	__ASSERT_NO_MSG(socket_ops);
   27c0a:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 27ec0 <socket_thread_fn+0x2e0>
		bytes_read = recv(common_socket_fd, item->data,
   27c0e:	4b97      	ldr	r3, [pc, #604]	; (27e6c <socket_thread_fn+0x28c>)
   27c10:	350c      	adds	r5, #12
   27c12:	f8d3 b000 	ldr.w	fp, [r3]
   27c16:	f8da 3000 	ldr.w	r3, [sl]
   27c1a:	b94b      	cbnz	r3, 27c30 <socket_thread_fn+0x50>
   27c1c:	4994      	ldr	r1, [pc, #592]	; (27e70 <socket_thread_fn+0x290>)
   27c1e:	4895      	ldr	r0, [pc, #596]	; (27e74 <socket_thread_fn+0x294>)
   27c20:	2369      	movs	r3, #105	; 0x69
   27c22:	4a95      	ldr	r2, [pc, #596]	; (27e78 <socket_thread_fn+0x298>)
   27c24:	f016 f939 	bl	3de9a <printk>
   27c28:	2169      	movs	r1, #105	; 0x69
   27c2a:	4893      	ldr	r0, [pc, #588]	; (27e78 <socket_thread_fn+0x298>)
   27c2c:	f016 f988 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   27c30:	f8da 3000 	ldr.w	r3, [sl]
   27c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27c36:	b94b      	cbnz	r3, 27c4c <socket_thread_fn+0x6c>
   27c38:	4990      	ldr	r1, [pc, #576]	; (27e7c <socket_thread_fn+0x29c>)
   27c3a:	488e      	ldr	r0, [pc, #568]	; (27e74 <socket_thread_fn+0x294>)
   27c3c:	236a      	movs	r3, #106	; 0x6a
   27c3e:	4a8e      	ldr	r2, [pc, #568]	; (27e78 <socket_thread_fn+0x298>)
   27c40:	f016 f92b 	bl	3de9a <printk>
   27c44:	216a      	movs	r1, #106	; 0x6a
   27c46:	488c      	ldr	r0, [pc, #560]	; (27e78 <socket_thread_fn+0x298>)
   27c48:	f016 f97a 	bl	3df40 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   27c4c:	f8da 3000 	ldr.w	r3, [sl]
   27c50:	f640 228c 	movw	r2, #2700	; 0xa8c
   27c54:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   27c58:	4629      	mov	r1, r5
   27c5a:	2300      	movs	r3, #0
   27c5c:	4658      	mov	r0, fp
   27c5e:	47d0      	blx	sl
		if (bytes_read < 0) {
   27c60:	1e02      	subs	r2, r0, #0
   27c62:	da58      	bge.n	27d16 <socket_thread_fn+0x136>
			LOG_ERR("AT socket recv failed with err %d",
   27c64:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   27c68:	f043 0301 	orr.w	r3, r3, #1
   27c6c:	f363 0607 	bfi	r6, r3, #0, #8
   27c70:	f364 168f 	bfi	r6, r4, #6, #10
   27c74:	4630      	mov	r0, r6
   27c76:	4982      	ldr	r1, [pc, #520]	; (27e80 <socket_thread_fn+0x2a0>)
   27c78:	f016 f973 	bl	3df62 <log_string_sync>
			if ((close(common_socket_fd) == 0) &&
   27c7c:	4b7b      	ldr	r3, [pc, #492]	; (27e6c <socket_thread_fn+0x28c>)
   27c7e:	6818      	ldr	r0, [r3, #0]
   27c80:	f7ff feba 	bl	279f8 <close>
   27c84:	2800      	cmp	r0, #0
   27c86:	d131      	bne.n	27cec <socket_thread_fn+0x10c>
			    (open_socket() == 0)) {
   27c88:	f7ff fef2 	bl	27a70 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   27c8c:	bb70      	cbnz	r0, 27cec <socket_thread_fn+0x10c>
				LOG_INF("AT socket recovered");
   27c8e:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   27c92:	f043 0303 	orr.w	r3, r3, #3
   27c96:	f363 0707 	bfi	r7, r3, #0, #8
   27c9a:	f364 178f 	bfi	r7, r4, #6, #10
   27c9e:	4979      	ldr	r1, [pc, #484]	; (27e84 <socket_thread_fn+0x2a4>)
   27ca0:	4638      	mov	r0, r7
   27ca2:	f016 f95e 	bl	3df62 <log_string_sync>
				ret.state = AT_CMD_ERROR;
   27ca6:	2301      	movs	r3, #1
   27ca8:	f88d 3014 	strb.w	r3, [sp, #20]
				ret.code  = -errno;
   27cac:	f016 fb45 	bl	3e33a <__errno>
   27cb0:	6803      	ldr	r3, [r0, #0]
   27cb2:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   27cb4:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   27cb6:	9903      	ldr	r1, [sp, #12]
   27cb8:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   27cbc:	2b00      	cmp	r3, #0
   27cbe:	f040 80a5 	bne.w	27e0c <socket_thread_fn+0x22c>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   27cc2:	a903      	add	r1, sp, #12
   27cc4:	4868      	ldr	r0, [pc, #416]	; (27e68 <socket_thread_fn+0x288>)
   27cc6:	f010 fba1 	bl	3840c <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
   27cca:	4b6f      	ldr	r3, [pc, #444]	; (27e88 <socket_thread_fn+0x2a8>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   27ccc:	689b      	ldr	r3, [r3, #8]
   27cce:	2b00      	cmp	r3, #0
   27cd0:	d18e      	bne.n	27bf0 <socket_thread_fn+0x10>
   27cd2:	f89d 2014 	ldrb.w	r2, [sp, #20]
   27cd6:	2a04      	cmp	r2, #4
   27cd8:	d08a      	beq.n	27bf0 <socket_thread_fn+0x10>
			current_cmd_handler = NULL;
   27cda:	4a6c      	ldr	r2, [pc, #432]	; (27e8c <socket_thread_fn+0x2ac>)
   27cdc:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(msgq, data, timeout);
   27cde:	f04f 32ff 	mov.w	r2, #4294967295
   27ce2:	a904      	add	r1, sp, #16
   27ce4:	486a      	ldr	r0, [pc, #424]	; (27e90 <socket_thread_fn+0x2b0>)
   27ce6:	f010 fd03 	bl	386f0 <z_impl_k_msgq_put>
   27cea:	e781      	b.n	27bf0 <socket_thread_fn+0x10>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   27cec:	2301      	movs	r3, #1
   27cee:	f04f 0500 	mov.w	r5, #0
   27cf2:	f363 0507 	bfi	r5, r3, #0, #8
   27cf6:	f016 fb20 	bl	3e33a <__errno>
   27cfa:	f364 158f 	bfi	r5, r4, #6, #10
   27cfe:	6802      	ldr	r2, [r0, #0]
   27d00:	4964      	ldr	r1, [pc, #400]	; (27e94 <socket_thread_fn+0x2b4>)
   27d02:	4628      	mov	r0, r5
   27d04:	f016 f92d 	bl	3df62 <log_string_sync>
			close(common_socket_fd);
   27d08:	4b58      	ldr	r3, [pc, #352]	; (27e6c <socket_thread_fn+0x28c>)
   27d0a:	6818      	ldr	r0, [r3, #0]
   27d0c:	f7ff fe74 	bl	279f8 <close>
}
   27d10:	b007      	add	sp, #28
   27d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(item->data) ||
   27d16:	f640 238c 	movw	r3, #2700	; 0xa8c
   27d1a:	429a      	cmp	r2, r3
   27d1c:	d004      	beq.n	27d28 <socket_thread_fn+0x148>
			   item->data[bytes_read - 1] != '\0') {
   27d1e:	f8dd a00c 	ldr.w	sl, [sp, #12]
   27d22:	4452      	add	r2, sl
		} else if (bytes_read == sizeof(item->data) ||
   27d24:	7ad3      	ldrb	r3, [r2, #11]
   27d26:	b173      	cbz	r3, 27d46 <socket_thread_fn+0x166>
			LOG_ERR("AT message to large for reception buffer or "
   27d28:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   27d2c:	f043 0301 	orr.w	r3, r3, #1
   27d30:	f363 0807 	bfi	r8, r3, #0, #8
   27d34:	f364 188f 	bfi	r8, r4, #6, #10
   27d38:	4957      	ldr	r1, [pc, #348]	; (27e98 <socket_thread_fn+0x2b8>)
   27d3a:	4640      	mov	r0, r8
   27d3c:	f016 f911 	bl	3df62 <log_string_sync>
			ret.code  = -ENOBUFS;
   27d40:	f06f 0368 	mvn.w	r3, #104	; 0x68
   27d44:	e7b6      	b.n	27cb4 <socket_thread_fn+0xd4>
	ret->state = AT_CMD_NOTIFICATION;
   27d46:	2204      	movs	r2, #4
		payload_len = get_return_code(item->data, &ret);
   27d48:	f10a 050c 	add.w	r5, sl, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   27d4c:	4953      	ldr	r1, [pc, #332]	; (27e9c <socket_thread_fn+0x2bc>)
   27d4e:	4628      	mov	r0, r5
   27d50:	9301      	str	r3, [sp, #4]
	ret->state = AT_CMD_NOTIFICATION;
   27d52:	f88d 2014 	strb.w	r2, [sp, #20]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   27d56:	f018 fe8b 	bl	40a70 <strstr>
		if (tmpstr) {
   27d5a:	4683      	mov	fp, r0
   27d5c:	b120      	cbz	r0, 27d68 <socket_thread_fn+0x188>
			ret->state = AT_CMD_OK;
   27d5e:	9b01      	ldr	r3, [sp, #4]
   27d60:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   27d64:	9304      	str	r3, [sp, #16]
			break;
   27d66:	e00d      	b.n	27d84 <socket_thread_fn+0x1a4>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   27d68:	494d      	ldr	r1, [pc, #308]	; (27ea0 <socket_thread_fn+0x2c0>)
   27d6a:	4628      	mov	r0, r5
   27d6c:	f018 fe80 	bl	40a70 <strstr>
		if (tmpstr) {
   27d70:	4683      	mov	fp, r0
   27d72:	b330      	cbz	r0, 27dc2 <socket_thread_fn+0x1e2>
			ret->state = AT_CMD_ERROR_CMS;
   27d74:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   27d76:	f10a 0017 	add.w	r0, sl, #23
			ret->state = AT_CMD_ERROR_CME;
   27d7a:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   27d7e:	f018 fc2d 	bl	405dc <atoi>
   27d82:	9004      	str	r0, [sp, #16]
		buf[new_len++] = '\0';
   27d84:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   27d86:	ebab 0205 	sub.w	r2, fp, r5
		buf[new_len++] = '\0';
   27d8a:	3201      	adds	r2, #1
   27d8c:	f88b 3000 	strb.w	r3, [fp]
		if (ret.state != AT_CMD_NOTIFICATION) {
   27d90:	f89d 3014 	ldrb.w	r3, [sp, #20]
   27d94:	2b04      	cmp	r3, #4
   27d96:	d04f      	beq.n	27e38 <socket_thread_fn+0x258>
			if ((response_buf_len > 0) &&
   27d98:	f8df a128 	ldr.w	sl, [pc, #296]	; 27ec4 <socket_thread_fn+0x2e4>
   27d9c:	f8da 3000 	ldr.w	r3, [sl]
   27da0:	2b00      	cmp	r3, #0
   27da2:	d052      	beq.n	27e4a <socket_thread_fn+0x26a>
			    (response_buf != NULL)) {
   27da4:	4d3f      	ldr	r5, [pc, #252]	; (27ea4 <socket_thread_fn+0x2c4>)
   27da6:	6828      	ldr	r0, [r5, #0]
			if ((response_buf_len > 0) &&
   27da8:	2800      	cmp	r0, #0
   27daa:	d04e      	beq.n	27e4a <socket_thread_fn+0x26a>
				if (response_buf_len > payload_len) {
   27dac:	4293      	cmp	r3, r2
   27dae:	d91d      	bls.n	27dec <socket_thread_fn+0x20c>
   27db0:	9903      	ldr	r1, [sp, #12]
   27db2:	310c      	adds	r1, #12
   27db4:	f018 fc32 	bl	4061c <memcpy>
				response_buf_len = 0;
   27db8:	2300      	movs	r3, #0
   27dba:	f8ca 3000 	str.w	r3, [sl]
				response_buf     = NULL;
   27dbe:	602b      	str	r3, [r5, #0]
				goto next;
   27dc0:	e779      	b.n	27cb6 <socket_thread_fn+0xd6>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   27dc2:	4939      	ldr	r1, [pc, #228]	; (27ea8 <socket_thread_fn+0x2c8>)
   27dc4:	4628      	mov	r0, r5
   27dc6:	f018 fe53 	bl	40a70 <strstr>
		if (tmpstr) {
   27dca:	4683      	mov	fp, r0
   27dcc:	b108      	cbz	r0, 27dd2 <socket_thread_fn+0x1f2>
			ret->state = AT_CMD_ERROR_CME;
   27dce:	2303      	movs	r3, #3
   27dd0:	e7d1      	b.n	27d76 <socket_thread_fn+0x196>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   27dd2:	4936      	ldr	r1, [pc, #216]	; (27eac <socket_thread_fn+0x2cc>)
   27dd4:	4628      	mov	r0, r5
   27dd6:	f018 fe4b 	bl	40a70 <strstr>
		if (tmpstr) {
   27dda:	4683      	mov	fp, r0
   27ddc:	2800      	cmp	r0, #0
   27dde:	d039      	beq.n	27e54 <socket_thread_fn+0x274>
			ret->state = AT_CMD_ERROR;
   27de0:	2301      	movs	r3, #1
   27de2:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   27de6:	f06f 0307 	mvn.w	r3, #7
   27dea:	e7bb      	b.n	27d64 <socket_thread_fn+0x184>
					LOG_ERR("Response buffer not large "
   27dec:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   27df0:	f043 0301 	orr.w	r3, r3, #1
   27df4:	f363 0907 	bfi	r9, r3, #0, #8
   27df8:	f364 198f 	bfi	r9, r4, #6, #10
   27dfc:	492c      	ldr	r1, [pc, #176]	; (27eb0 <socket_thread_fn+0x2d0>)
   27dfe:	4648      	mov	r0, r9
   27e00:	f016 f8af 	bl	3df62 <log_string_sync>
					ret.code  = -EMSGSIZE;
   27e04:	f06f 0379 	mvn.w	r3, #121	; 0x79
   27e08:	9304      	str	r3, [sp, #16]
   27e0a:	e7d5      	b.n	27db8 <socket_thread_fn+0x1d8>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   27e0c:	4b29      	ldr	r3, [pc, #164]	; (27eb4 <socket_thread_fn+0x2d4>)
   27e0e:	2200      	movs	r2, #0
   27e10:	604b      	str	r3, [r1, #4]
   27e12:	460b      	mov	r3, r1
   27e14:	600a      	str	r2, [r1, #0]
   27e16:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27e1a:	e8d3 2fef 	ldaex	r2, [r3]
   27e1e:	f042 0001 	orr.w	r0, r2, #1
   27e22:	e8c3 0fe5 	stlex	r5, r0, [r3]
   27e26:	2d00      	cmp	r5, #0
   27e28:	d1f7      	bne.n	27e1a <socket_thread_fn+0x23a>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   27e2a:	07d3      	lsls	r3, r2, #31
   27e2c:	f53f af4d 	bmi.w	27cca <socket_thread_fn+0xea>
		k_queue_append(&work_q->queue, work);
   27e30:	4821      	ldr	r0, [pc, #132]	; (27eb8 <socket_thread_fn+0x2d8>)
   27e32:	f018 fa86 	bl	40342 <k_queue_append>
   27e36:	e748      	b.n	27cca <socket_thread_fn+0xea>
		if (payload_len == 0) {
   27e38:	2a00      	cmp	r2, #0
   27e3a:	f43f af3c 	beq.w	27cb6 <socket_thread_fn+0xd6>
			item->callback = notification_handler;
   27e3e:	4b1f      	ldr	r3, [pc, #124]	; (27ebc <socket_thread_fn+0x2dc>)
			item->callback = current_cmd_handler;
   27e40:	681a      	ldr	r2, [r3, #0]
   27e42:	9b03      	ldr	r3, [sp, #12]
   27e44:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   27e48:	e735      	b.n	27cb6 <socket_thread_fn+0xd6>
		if (payload_len == 0) {
   27e4a:	2a00      	cmp	r2, #0
   27e4c:	f43f af33 	beq.w	27cb6 <socket_thread_fn+0xd6>
			item->callback = current_cmd_handler;
   27e50:	4b0e      	ldr	r3, [pc, #56]	; (27e8c <socket_thread_fn+0x2ac>)
   27e52:	e7f5      	b.n	27e40 <socket_thread_fn+0x260>
		new_len = strlen(buf) + 1;
   27e54:	4628      	mov	r0, r5
   27e56:	f7f5 f965 	bl	1d124 <strlen>
   27e5a:	1c42      	adds	r2, r0, #1
   27e5c:	e798      	b.n	27d90 <socket_thread_fn+0x1b0>
   27e5e:	bf00      	nop
   27e60:	00041c2c 	.word	0x00041c2c
   27e64:	00041c34 	.word	0x00041c34
   27e68:	200323f0 	.word	0x200323f0
   27e6c:	20023ab8 	.word	0x20023ab8
   27e70:	000433f1 	.word	0x000433f1
   27e74:	00043278 	.word	0x00043278
   27e78:	000433c1 	.word	0x000433c1
   27e7c:	00044db7 	.word	0x00044db7
   27e80:	000453ac 	.word	0x000453ac
   27e84:	000453ce 	.word	0x000453ce
   27e88:	20032458 	.word	0x20032458
   27e8c:	20023abc 	.word	0x20023abc
   27e90:	200324c4 	.word	0x200324c4
   27e94:	000453e2 	.word	0x000453e2
   27e98:	00045419 	.word	0x00045419
   27e9c:	00043ad3 	.word	0x00043ad3
   27ea0:	00045463 	.word	0x00045463
   27ea4:	20023ac4 	.word	0x20023ac4
   27ea8:	0004546f 	.word	0x0004546f
   27eac:	0004665c 	.word	0x0004665c
   27eb0:	0004547b 	.word	0x0004547b
   27eb4:	00027a51 	.word	0x00027a51
   27eb8:	200292b4 	.word	0x200292b4
   27ebc:	20023ac0 	.word	0x20023ac0
   27ec0:	2002389c 	.word	0x2002389c
   27ec4:	20023ac8 	.word	0x20023ac8

00027ec8 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   27ec8:	b510      	push	{r4, lr}
	static bool initialized;

	if (initialized) {
   27eca:	4b16      	ldr	r3, [pc, #88]	; (27f24 <at_cmd_driver_init+0x5c>)
{
   27ecc:	b086      	sub	sp, #24
	if (initialized) {
   27ece:	781a      	ldrb	r2, [r3, #0]
   27ed0:	bb32      	cbnz	r2, 27f20 <at_cmd_driver_init+0x58>
		return 0;
	}

	initialized = true;
   27ed2:	2201      	movs	r2, #1
   27ed4:	701a      	strb	r2, [r3, #0]

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   27ed6:	f7ff fdcb 	bl	27a70 <open_socket>
	if (err) {
   27eda:	4604      	mov	r4, r0
   27edc:	b188      	cbz	r0, 27f02 <at_cmd_driver_init+0x3a>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   27ede:	2301      	movs	r3, #1
   27ee0:	f04f 0000 	mov.w	r0, #0
   27ee4:	4a10      	ldr	r2, [pc, #64]	; (27f28 <at_cmd_driver_init+0x60>)
   27ee6:	f363 0007 	bfi	r0, r3, #0, #8
   27eea:	4b10      	ldr	r3, [pc, #64]	; (27f2c <at_cmd_driver_init+0x64>)
   27eec:	4910      	ldr	r1, [pc, #64]	; (27f30 <at_cmd_driver_init+0x68>)
   27eee:	1a9b      	subs	r3, r3, r2
   27ef0:	08db      	lsrs	r3, r3, #3
   27ef2:	f363 108f 	bfi	r0, r3, #6, #10
   27ef6:	4622      	mov	r2, r4
   27ef8:	f016 f833 	bl	3df62 <log_string_sync>
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   27efc:	4620      	mov	r0, r4
   27efe:	b006      	add	sp, #24
   27f00:	bd10      	pop	{r4, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   27f02:	230a      	movs	r3, #10
   27f04:	e9cd 0004 	strd	r0, r0, [sp, #16]
   27f08:	e9cd 0302 	strd	r0, r3, [sp, #8]
   27f0c:	e9cd 0000 	strd	r0, r0, [sp]
   27f10:	4b08      	ldr	r3, [pc, #32]	; (27f34 <at_cmd_driver_init+0x6c>)
   27f12:	f44f 6280 	mov.w	r2, #1024	; 0x400
   27f16:	4908      	ldr	r1, [pc, #32]	; (27f38 <at_cmd_driver_init+0x70>)
   27f18:	4808      	ldr	r0, [pc, #32]	; (27f3c <at_cmd_driver_init+0x74>)
   27f1a:	f012 fac3 	bl	3a4a4 <z_impl_k_thread_create>
	return 0;
   27f1e:	e7ed      	b.n	27efc <at_cmd_driver_init+0x34>
		return 0;
   27f20:	2400      	movs	r4, #0
   27f22:	e7eb      	b.n	27efc <at_cmd_driver_init+0x34>
   27f24:	2002a2c2 	.word	0x2002a2c2
   27f28:	00041c2c 	.word	0x00041c2c
   27f2c:	00041c34 	.word	0x00041c34
   27f30:	0004530c 	.word	0x0004530c
   27f34:	00027be1 	.word	0x00027be1
   27f38:	2002cea0 	.word	0x2002cea0
   27f3c:	20023acc 	.word	0x20023acc

00027f40 <at_cmd_write>:
{
   27f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27f44:	4605      	mov	r5, r0
   27f46:	4688      	mov	r8, r1
   27f48:	4617      	mov	r7, r2
   27f4a:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   27f4c:	4c0a      	ldr	r4, [pc, #40]	; (27f78 <at_cmd_write+0x38>)
   27f4e:	f04f 31ff 	mov.w	r1, #4294967295
   27f52:	4620      	mov	r0, r4
   27f54:	f012 f974 	bl	3a240 <z_impl_k_sem_take>
	response_buf     = buf;
   27f58:	4b08      	ldr	r3, [pc, #32]	; (27f7c <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   27f5a:	4631      	mov	r1, r6
	response_buf     = buf;
   27f5c:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   27f60:	4b07      	ldr	r3, [pc, #28]	; (27f80 <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   27f62:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   27f64:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   27f66:	f7ff fdbd 	bl	27ae4 <at_write>
   27f6a:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   27f6c:	4620      	mov	r0, r4
   27f6e:	f012 f91d 	bl	3a1ac <z_impl_k_sem_give>
}
   27f72:	4628      	mov	r0, r5
   27f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27f78:	20032458 	.word	0x20032458
   27f7c:	20023ac4 	.word	0x20023ac4
   27f80:	20023ac8 	.word	0x20023ac8

00027f84 <at_cmd_set_notification_handler>:
{
   27f84:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   27f86:	4c0f      	ldr	r4, [pc, #60]	; (27fc4 <at_cmd_set_notification_handler+0x40>)
{
   27f88:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   27f8a:	6822      	ldr	r2, [r4, #0]
   27f8c:	b17a      	cbz	r2, 27fae <at_cmd_set_notification_handler+0x2a>
   27f8e:	4282      	cmp	r2, r0
   27f90:	d00d      	beq.n	27fae <at_cmd_set_notification_handler+0x2a>
		LOG_WRN("Forgetting prior notification handler %p",
   27f92:	2302      	movs	r3, #2
   27f94:	f04f 0000 	mov.w	r0, #0
   27f98:	490b      	ldr	r1, [pc, #44]	; (27fc8 <at_cmd_set_notification_handler+0x44>)
   27f9a:	f363 0007 	bfi	r0, r3, #0, #8
   27f9e:	4b0b      	ldr	r3, [pc, #44]	; (27fcc <at_cmd_set_notification_handler+0x48>)
   27fa0:	1a5b      	subs	r3, r3, r1
   27fa2:	08db      	lsrs	r3, r3, #3
   27fa4:	f363 108f 	bfi	r0, r3, #6, #10
   27fa8:	4909      	ldr	r1, [pc, #36]	; (27fd0 <at_cmd_set_notification_handler+0x4c>)
   27faa:	f015 ffda 	bl	3df62 <log_string_sync>
	return z_impl_k_sem_take(sem, timeout);
   27fae:	f04f 31ff 	mov.w	r1, #4294967295
   27fb2:	4808      	ldr	r0, [pc, #32]	; (27fd4 <at_cmd_set_notification_handler+0x50>)
   27fb4:	f012 f944 	bl	3a240 <z_impl_k_sem_take>
	notification_handler = handler;
   27fb8:	6025      	str	r5, [r4, #0]
	z_impl_k_sem_give(sem);
   27fba:	4806      	ldr	r0, [pc, #24]	; (27fd4 <at_cmd_set_notification_handler+0x50>)
}
   27fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27fc0:	f012 b8f4 	b.w	3a1ac <z_impl_k_sem_give>
   27fc4:	20023ac0 	.word	0x20023ac0
   27fc8:	00041c2c 	.word	0x00041c2c
   27fcc:	00041c34 	.word	0x00041c34
   27fd0:	0004532e 	.word	0x0004532e
   27fd4:	20032458 	.word	0x20032458

00027fd8 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   27fd8:	4b0b      	ldr	r3, [pc, #44]	; (28008 <find_node+0x30>)
{
   27fda:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   27fdc:	681b      	ldr	r3, [r3, #0]
   27fde:	b153      	cbz	r3, 27ff6 <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27fe0:	2500      	movs	r5, #0
   27fe2:	461c      	mov	r4, r3
   27fe4:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   27fe6:	6866      	ldr	r6, [r4, #4]
   27fe8:	428e      	cmp	r6, r1
   27fea:	d106      	bne.n	27ffa <find_node+0x22>
   27fec:	68a6      	ldr	r6, [r4, #8]
   27fee:	4296      	cmp	r6, r2
   27ff0:	d103      	bne.n	27ffa <find_node+0x22>
			*prev_out = prev;
			return curr;
   27ff2:	4623      	mov	r3, r4
			*prev_out = prev;
   27ff4:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   27ff6:	4618      	mov	r0, r3
   27ff8:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   27ffa:	2b00      	cmp	r3, #0
   27ffc:	d0fb      	beq.n	27ff6 <find_node+0x1e>
   27ffe:	4625      	mov	r5, r4
   28000:	461c      	mov	r4, r3
   28002:	681b      	ldr	r3, [r3, #0]
   28004:	e7ef      	b.n	27fe6 <find_node+0xe>
   28006:	bf00      	nop
   28008:	20023b7c 	.word	0x20023b7c

0002800c <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   2800c:	4a0e      	ldr	r2, [pc, #56]	; (28048 <module_init+0x3c>)
{
   2800e:	b508      	push	{r3, lr}
	if (initialized) {
   28010:	7813      	ldrb	r3, [r2, #0]
   28012:	b17b      	cbz	r3, 28034 <module_init+0x28>
		LOG_WRN("Already initialized. Nothing to do");
   28014:	2302      	movs	r3, #2
   28016:	f04f 0000 	mov.w	r0, #0
   2801a:	4a0c      	ldr	r2, [pc, #48]	; (2804c <module_init+0x40>)
   2801c:	f363 0007 	bfi	r0, r3, #0, #8
   28020:	4b0b      	ldr	r3, [pc, #44]	; (28050 <module_init+0x44>)
   28022:	490c      	ldr	r1, [pc, #48]	; (28054 <module_init+0x48>)
   28024:	1a9b      	subs	r3, r3, r2
   28026:	08db      	lsrs	r3, r3, #3
   28028:	f363 108f 	bfi	r0, r3, #6, #10
   2802c:	f015 ff99 	bl	3df62 <log_string_sync>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   28030:	2000      	movs	r0, #0
   28032:	bd08      	pop	{r3, pc}
	initialized = true;
   28034:	2101      	movs	r1, #1
   28036:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   28038:	4a07      	ldr	r2, [pc, #28]	; (28058 <module_init+0x4c>)
	at_cmd_set_notification_handler(notif_dispatch);
   2803a:	4808      	ldr	r0, [pc, #32]	; (2805c <module_init+0x50>)
	list->tail = NULL;
   2803c:	e9c2 3300 	strd	r3, r3, [r2]
   28040:	f7ff ffa0 	bl	27f84 <at_cmd_set_notification_handler>
	return 0;
   28044:	e7f4      	b.n	28030 <module_init+0x24>
   28046:	bf00      	nop
   28048:	2002a2c3 	.word	0x2002a2c3
   2804c:	00041c2c 	.word	0x00041c2c
   28050:	00041c44 	.word	0x00041c44
   28054:	000454fa 	.word	0x000454fa
   28058:	20023b7c 	.word	0x20023b7c
   2805c:	0002806d 	.word	0x0002806d

00028060 <k_mutex_unlock.constprop.7>:
	return z_impl_k_mutex_unlock(mutex);
   28060:	4801      	ldr	r0, [pc, #4]	; (28068 <k_mutex_unlock.constprop.7+0x8>)
   28062:	f010 bd6f 	b.w	38b44 <z_impl_k_mutex_unlock>
   28066:	bf00      	nop
   28068:	200324b0 	.word	0x200324b0

0002806c <notif_dispatch>:
{
   2806c:	b538      	push	{r3, r4, r5, lr}
   2806e:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   28070:	f04f 31ff 	mov.w	r1, #4294967295
   28074:	4809      	ldr	r0, [pc, #36]	; (2809c <notif_dispatch+0x30>)
   28076:	f010 fc87 	bl	38988 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2807a:	4b09      	ldr	r3, [pc, #36]	; (280a0 <notif_dispatch+0x34>)
   2807c:	681b      	ldr	r3, [r3, #0]
   2807e:	b91b      	cbnz	r3, 28088 <notif_dispatch+0x1c>
}
   28080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   28084:	f7ff bfec 	b.w	28060 <k_mutex_unlock.constprop.7>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28088:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   2808a:	689a      	ldr	r2, [r3, #8]
   2808c:	4629      	mov	r1, r5
   2808e:	6858      	ldr	r0, [r3, #4]
   28090:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   28092:	2c00      	cmp	r4, #0
   28094:	d0f4      	beq.n	28080 <notif_dispatch+0x14>
   28096:	4623      	mov	r3, r4
   28098:	6824      	ldr	r4, [r4, #0]
   2809a:	e7f6      	b.n	2808a <notif_dispatch+0x1e>
   2809c:	200324b0 	.word	0x200324b0
   280a0:	20023b7c 	.word	0x20023b7c

000280a4 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   280a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   280a6:	4606      	mov	r6, r0
	if (handler == NULL) {
   280a8:	460d      	mov	r5, r1
   280aa:	b999      	cbnz	r1, 280d4 <at_notif_register_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   280ac:	2301      	movs	r3, #1
   280ae:	f04f 0000 	mov.w	r0, #0
   280b2:	4a1d      	ldr	r2, [pc, #116]	; (28128 <at_notif_register_handler+0x84>)
   280b4:	f363 0007 	bfi	r0, r3, #0, #8
   280b8:	4b1c      	ldr	r3, [pc, #112]	; (2812c <at_notif_register_handler+0x88>)
   280ba:	1a9b      	subs	r3, r3, r2
   280bc:	08db      	lsrs	r3, r3, #3
   280be:	f363 108f 	bfi	r0, r3, #6, #10
   280c2:	4632      	mov	r2, r6
   280c4:	460b      	mov	r3, r1
   280c6:	491a      	ldr	r1, [pc, #104]	; (28130 <at_notif_register_handler+0x8c>)
   280c8:	f015 ff4b 	bl	3df62 <log_string_sync>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   280cc:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   280d0:	b002      	add	sp, #8
   280d2:	bd70      	pop	{r4, r5, r6, pc}
   280d4:	f04f 31ff 	mov.w	r1, #4294967295
   280d8:	4816      	ldr	r0, [pc, #88]	; (28134 <at_notif_register_handler+0x90>)
   280da:	f010 fc55 	bl	38988 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   280de:	462a      	mov	r2, r5
   280e0:	4631      	mov	r1, r6
   280e2:	a801      	add	r0, sp, #4
   280e4:	f7ff ff78 	bl	27fd8 <find_node>
   280e8:	4604      	mov	r4, r0
   280ea:	b118      	cbz	r0, 280f4 <at_notif_register_handler+0x50>
		k_mutex_unlock(&list_mtx);
   280ec:	f7ff ffb8 	bl	28060 <k_mutex_unlock.constprop.7>
		return 0;
   280f0:	2000      	movs	r0, #0
   280f2:	e7ed      	b.n	280d0 <at_notif_register_handler+0x2c>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   280f4:	200c      	movs	r0, #12
   280f6:	f010 fadf 	bl	386b8 <k_malloc>
   280fa:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   280fc:	b920      	cbnz	r0, 28108 <at_notif_register_handler+0x64>
		k_mutex_unlock(&list_mtx);
   280fe:	f7ff ffaf 	bl	28060 <k_mutex_unlock.constprop.7>
		return -ENOBUFS;
   28102:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28106:	e7e3      	b.n	280d0 <at_notif_register_handler+0x2c>
__ssp_bos_icheck3(memset, void *, int)
   28108:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   2810a:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   2810c:	4a0a      	ldr	r2, [pc, #40]	; (28138 <at_notif_register_handler+0x94>)
   2810e:	6044      	str	r4, [r0, #4]
   28110:	6084      	str	r4, [r0, #8]
	parent->next = child;
   28112:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   28114:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   28116:	e9c3 6501 	strd	r6, r5, [r3, #4]
   2811a:	b911      	cbnz	r1, 28122 <at_notif_register_handler+0x7e>
	list->head = node;
   2811c:	e9c2 3300 	strd	r3, r3, [r2]
   28120:	e7e4      	b.n	280ec <at_notif_register_handler+0x48>
	parent->next = child;
   28122:	600b      	str	r3, [r1, #0]
	list->tail = node;
   28124:	6053      	str	r3, [r2, #4]
   28126:	e7e1      	b.n	280ec <at_notif_register_handler+0x48>
   28128:	00041c2c 	.word	0x00041c2c
   2812c:	00041c44 	.word	0x00041c44
   28130:	000454c9 	.word	0x000454c9
   28134:	200324b0 	.word	0x200324b0
   28138:	20023b7c 	.word	0x20023b7c

0002813c <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   2813c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2813e:	4605      	mov	r5, r0
	if (handler == NULL) {
   28140:	460c      	mov	r4, r1
   28142:	b999      	cbnz	r1, 2816c <at_notif_deregister_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   28144:	2301      	movs	r3, #1
   28146:	f04f 0000 	mov.w	r0, #0
   2814a:	4921      	ldr	r1, [pc, #132]	; (281d0 <at_notif_deregister_handler+0x94>)
   2814c:	f363 0007 	bfi	r0, r3, #0, #8
   28150:	4b20      	ldr	r3, [pc, #128]	; (281d4 <at_notif_deregister_handler+0x98>)
   28152:	462a      	mov	r2, r5
   28154:	1ac9      	subs	r1, r1, r3
   28156:	08c9      	lsrs	r1, r1, #3
   28158:	f361 108f 	bfi	r0, r1, #6, #10
   2815c:	4623      	mov	r3, r4
   2815e:	491e      	ldr	r1, [pc, #120]	; (281d8 <at_notif_deregister_handler+0x9c>)
   28160:	f015 feff 	bl	3df62 <log_string_sync>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   28164:	f06f 0015 	mvn.w	r0, #21
	}
	return remove_notif_handler(context, handler);
}
   28168:	b003      	add	sp, #12
   2816a:	bd30      	pop	{r4, r5, pc}
	struct notif_handler *curr, *prev = NULL;
   2816c:	2300      	movs	r3, #0
   2816e:	9301      	str	r3, [sp, #4]
   28170:	f04f 31ff 	mov.w	r1, #4294967295
   28174:	4819      	ldr	r0, [pc, #100]	; (281dc <at_notif_deregister_handler+0xa0>)
   28176:	f010 fc07 	bl	38988 <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   2817a:	4622      	mov	r2, r4
   2817c:	4629      	mov	r1, r5
   2817e:	a801      	add	r0, sp, #4
   28180:	f7ff ff2a 	bl	27fd8 <find_node>
	if (curr == NULL) {
   28184:	b978      	cbnz	r0, 281a6 <at_notif_deregister_handler+0x6a>
		LOG_WRN("Handler not registered. Nothing to do");
   28186:	2302      	movs	r3, #2
   28188:	4a12      	ldr	r2, [pc, #72]	; (281d4 <at_notif_deregister_handler+0x98>)
   2818a:	f363 0007 	bfi	r0, r3, #0, #8
   2818e:	4b10      	ldr	r3, [pc, #64]	; (281d0 <at_notif_deregister_handler+0x94>)
   28190:	4913      	ldr	r1, [pc, #76]	; (281e0 <at_notif_deregister_handler+0xa4>)
   28192:	1a9b      	subs	r3, r3, r2
   28194:	08db      	lsrs	r3, r3, #3
   28196:	f363 108f 	bfi	r0, r3, #6, #10
   2819a:	f015 fee2 	bl	3df62 <log_string_sync>
	k_mutex_unlock(&list_mtx);
   2819e:	f7ff ff5f 	bl	28060 <k_mutex_unlock.constprop.7>
	return remove_notif_handler(context, handler);
   281a2:	2000      	movs	r0, #0
   281a4:	e7e0      	b.n	28168 <at_notif_deregister_handler+0x2c>
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   281a6:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   281a8:	6801      	ldr	r1, [r0, #0]
   281aa:	4b0e      	ldr	r3, [pc, #56]	; (281e4 <at_notif_deregister_handler+0xa8>)
   281ac:	b94a      	cbnz	r2, 281c2 <at_notif_deregister_handler+0x86>
   281ae:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   281b0:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   281b2:	4290      	cmp	r0, r2
   281b4:	d100      	bne.n	281b8 <at_notif_deregister_handler+0x7c>
	list->tail = node;
   281b6:	6059      	str	r1, [r3, #4]
	parent->next = child;
   281b8:	2300      	movs	r3, #0
   281ba:	6003      	str	r3, [r0, #0]
	k_free(curr);
   281bc:	f018 f88b 	bl	402d6 <k_free>
   281c0:	e7ed      	b.n	2819e <at_notif_deregister_handler+0x62>
   281c2:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   281c4:	6859      	ldr	r1, [r3, #4]
   281c6:	4288      	cmp	r0, r1
	list->tail = node;
   281c8:	bf08      	it	eq
   281ca:	605a      	streq	r2, [r3, #4]
   281cc:	e7f4      	b.n	281b8 <at_notif_deregister_handler+0x7c>
   281ce:	bf00      	nop
   281d0:	00041c44 	.word	0x00041c44
   281d4:	00041c2c 	.word	0x00041c2c
   281d8:	000454c9 	.word	0x000454c9
   281dc:	200324b0 	.word	0x200324b0
   281e0:	000454a3 	.word	0x000454a3
   281e4:	20023b7c 	.word	0x20023b7c

000281e8 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   281e8:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   281ea:	4d05      	ldr	r5, [pc, #20]	; (28200 <write_uart_string+0x18>)
   281ec:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   281ee:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   281f2:	b901      	cbnz	r1, 281f6 <write_uart_string+0xe>
	}
}
   281f4:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   281f6:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
   281f8:	6843      	ldr	r3, [r0, #4]
   281fa:	685b      	ldr	r3, [r3, #4]
   281fc:	4798      	blx	r3
   281fe:	e7f6      	b.n	281ee <write_uart_string+0x6>
   28200:	20023c58 	.word	0x20023c58

00028204 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   28204:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   28206:	4923      	ldr	r1, [pc, #140]	; (28294 <cmd_send+0x90>)
{
   28208:	b08b      	sub	sp, #44	; 0x2c
	err = at_cmd_write(at_buf, at_buf,
   2820a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2820e:	f10d 030b 	add.w	r3, sp, #11
   28212:	4608      	mov	r0, r1
   28214:	f7ff fe94 	bl	27f40 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   28218:	1e02      	subs	r2, r0, #0
   2821a:	da12      	bge.n	28242 <cmd_send+0x3e>
		LOG_ERR("Error while processing AT command: %d", err);
   2821c:	2301      	movs	r3, #1
   2821e:	f04f 0000 	mov.w	r0, #0
   28222:	491d      	ldr	r1, [pc, #116]	; (28298 <cmd_send+0x94>)
   28224:	f363 0007 	bfi	r0, r3, #0, #8
   28228:	4b1c      	ldr	r3, [pc, #112]	; (2829c <cmd_send+0x98>)
   2822a:	1a5b      	subs	r3, r3, r1
   2822c:	08db      	lsrs	r3, r3, #3
   2822e:	f363 108f 	bfi	r0, r3, #6, #10
   28232:	491b      	ldr	r1, [pc, #108]	; (282a0 <cmd_send+0x9c>)
   28234:	f015 fe95 	bl	3df62 <log_string_sync>
		state = AT_CMD_ERROR;
   28238:	2301      	movs	r3, #1
   2823a:	f88d 300b 	strb.w	r3, [sp, #11]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   2823e:	4819      	ldr	r0, [pc, #100]	; (282a4 <cmd_send+0xa0>)
   28240:	e012      	b.n	28268 <cmd_send+0x64>
	switch (state) {
   28242:	f89d 300b 	ldrb.w	r3, [sp, #11]
   28246:	2b03      	cmp	r3, #3
   28248:	d810      	bhi.n	2826c <cmd_send+0x68>
   2824a:	a101      	add	r1, pc, #4	; (adr r1, 28250 <cmd_send+0x4c>)
   2824c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   28250:	00028261 	.word	0x00028261
   28254:	0002823f 	.word	0x0002823f
   28258:	0002827b 	.word	0x0002827b
   2825c:	0002828d 	.word	0x0002828d
		write_uart_string(at_buf);
   28260:	480c      	ldr	r0, [pc, #48]	; (28294 <cmd_send+0x90>)
   28262:	f7ff ffc1 	bl	281e8 <write_uart_string>
		write_uart_string(OK_STR);
   28266:	4810      	ldr	r0, [pc, #64]	; (282a8 <cmd_send+0xa4>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   28268:	f7ff ffbe 	bl	281e8 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   2826c:	4b0f      	ldr	r3, [pc, #60]	; (282ac <cmd_send+0xa8>)
   2826e:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   28270:	f017 fcb0 	bl	3fbd4 <z_impl_uart_irq_rx_enable>
}
   28274:	b00b      	add	sp, #44	; 0x2c
   28276:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   2827a:	4b0d      	ldr	r3, [pc, #52]	; (282b0 <cmd_send+0xac>)
   2827c:	9200      	str	r2, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   2827e:	2219      	movs	r2, #25
   28280:	2100      	movs	r1, #0
   28282:	a803      	add	r0, sp, #12
   28284:	f018 fb23 	bl	408ce <__sprintf_chk>
		write_uart_string(str);
   28288:	a803      	add	r0, sp, #12
   2828a:	e7ed      	b.n	28268 <cmd_send+0x64>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   2828c:	9200      	str	r2, [sp, #0]
   2828e:	4b09      	ldr	r3, [pc, #36]	; (282b4 <cmd_send+0xb0>)
   28290:	e7f5      	b.n	2827e <cmd_send+0x7a>
   28292:	bf00      	nop
   28294:	2002a2c4 	.word	0x2002a2c4
   28298:	00041c2c 	.word	0x00041c2c
   2829c:	00041c3c 	.word	0x00041c3c
   282a0:	000455e1 	.word	0x000455e1
   282a4:	00045607 	.word	0x00045607
   282a8:	00043600 	.word	0x00043600
   282ac:	20023c58 	.word	0x20023c58
   282b0:	0004560f 	.word	0x0004560f
   282b4:	00045620 	.word	0x00045620

000282b8 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(struct device *dev)
{
   282b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   282bc:	4606      	mov	r6, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
   282be:	6843      	ldr	r3, [r0, #4]
   282c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   282c2:	b103      	cbz	r3, 282c6 <isr+0xe>
		return api->irq_update(dev);
   282c4:	4798      	blx	r3
	if (api->irq_rx_ready) {
   282c6:	6873      	ldr	r3, [r6, #4]
   282c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   282ca:	b1c3      	cbz	r3, 282fe <isr+0x46>
		return api->irq_rx_ready(dev);
   282cc:	4630      	mov	r0, r6
   282ce:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   282d0:	b1a8      	cbz	r0, 282fe <isr+0x46>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   282d2:	f8df a14c 	ldr.w	sl, [pc, #332]	; 28420 <isr+0x168>
   282d6:	4d47      	ldr	r5, [pc, #284]	; (283f4 <isr+0x13c>)
   282d8:	46d1      	mov	r9, sl
			LOG_WRN("Ignored null; would terminate string early.");
   282da:	4b47      	ldr	r3, [pc, #284]	; (283f8 <isr+0x140>)
		if (at_cmd_len > 0) {
   282dc:	4c47      	ldr	r4, [pc, #284]	; (283fc <isr+0x144>)
			LOG_WRN("Ignored null; would terminate string early.");
   282de:	1aed      	subs	r5, r5, r3
   282e0:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   282e4:	e8da 3faf 	lda	r3, [sl]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   282e8:	07db      	lsls	r3, r3, #31
   282ea:	d408      	bmi.n	282fe <isr+0x46>
	if (api->fifo_read) {
   282ec:	6873      	ldr	r3, [r6, #4]
   282ee:	699b      	ldr	r3, [r3, #24]
   282f0:	b12b      	cbz	r3, 282fe <isr+0x46>
		return api->fifo_read(dev, rx_data, size);
   282f2:	2201      	movs	r2, #1
   282f4:	f10d 0107 	add.w	r1, sp, #7
   282f8:	4630      	mov	r0, r6
   282fa:	4798      	blx	r3
   282fc:	b910      	cbnz	r0, 28304 <isr+0x4c>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   282fe:	b002      	add	sp, #8
   28300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uart_rx_handler(character);
   28304:	f89d 2007 	ldrb.w	r2, [sp, #7]
	switch (character) {
   28308:	2a08      	cmp	r2, #8
   2830a:	d001      	beq.n	28310 <isr+0x58>
   2830c:	2a7f      	cmp	r2, #127	; 0x7f
   2830e:	d105      	bne.n	2831c <isr+0x64>
		if (at_cmd_len > 0) {
   28310:	6823      	ldr	r3, [r4, #0]
   28312:	2b00      	cmp	r3, #0
   28314:	d0e6      	beq.n	282e4 <isr+0x2c>
			at_cmd_len--;
   28316:	3b01      	subs	r3, #1
   28318:	6023      	str	r3, [r4, #0]
   2831a:	e7e3      	b.n	282e4 <isr+0x2c>
	if (!inside_quotes) {
   2831c:	4938      	ldr	r1, [pc, #224]	; (28400 <isr+0x148>)
   2831e:	780b      	ldrb	r3, [r1, #0]
   28320:	b9cb      	cbnz	r3, 28356 <isr+0x9e>
		switch (character) {
   28322:	2a0a      	cmp	r2, #10
   28324:	d02b      	beq.n	2837e <isr+0xc6>
   28326:	2a0d      	cmp	r2, #13
   28328:	d011      	beq.n	2834e <isr+0x96>
   2832a:	b9a2      	cbnz	r2, 28356 <isr+0x9e>
			if (term_mode == MODE_NULL_TERM) {
   2832c:	4b35      	ldr	r3, [pc, #212]	; (28404 <isr+0x14c>)
   2832e:	781b      	ldrb	r3, [r3, #0]
   28330:	2b00      	cmp	r3, #0
   28332:	d040      	beq.n	283b6 <isr+0xfe>
			LOG_WRN("Ignored null; would terminate string early.");
   28334:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   28338:	f043 0302 	orr.w	r3, r3, #2
   2833c:	f363 0707 	bfi	r7, r3, #0, #8
   28340:	f365 178f 	bfi	r7, r5, #6, #10
   28344:	4930      	ldr	r1, [pc, #192]	; (28408 <isr+0x150>)
   28346:	4638      	mov	r0, r7
   28348:	f015 fe0b 	bl	3df62 <log_string_sync>
			return;
   2834c:	e7ca      	b.n	282e4 <isr+0x2c>
			if (term_mode == MODE_CR) {
   2834e:	482d      	ldr	r0, [pc, #180]	; (28404 <isr+0x14c>)
   28350:	7800      	ldrb	r0, [r0, #0]
   28352:	2801      	cmp	r0, #1
			    at_cmd_len > 0 &&
   28354:	d02f      	beq.n	283b6 <isr+0xfe>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   28356:	f8d4 c000 	ldr.w	ip, [r4]
   2835a:	f10c 0001 	add.w	r0, ip, #1
   2835e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   28362:	d31d      	bcc.n	283a0 <isr+0xe8>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   28364:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   28368:	f043 0301 	orr.w	r3, r3, #1
   2836c:	f363 0807 	bfi	r8, r3, #0, #8
   28370:	f365 188f 	bfi	r8, r5, #6, #10
   28374:	4925      	ldr	r1, [pc, #148]	; (2840c <isr+0x154>)
   28376:	4640      	mov	r0, r8
   28378:	f015 fdf3 	bl	3df62 <log_string_sync>
		return;
   2837c:	e7b2      	b.n	282e4 <isr+0x2c>
			if (term_mode == MODE_LF) {
   2837e:	4821      	ldr	r0, [pc, #132]	; (28404 <isr+0x14c>)
   28380:	7800      	ldrb	r0, [r0, #0]
   28382:	2802      	cmp	r0, #2
   28384:	d017      	beq.n	283b6 <isr+0xfe>
			if (term_mode == MODE_CR_LF &&
   28386:	2803      	cmp	r0, #3
   28388:	d1e5      	bne.n	28356 <isr+0x9e>
   2838a:	f8d4 c000 	ldr.w	ip, [r4]
   2838e:	f1bc 0f00 	cmp.w	ip, #0
   28392:	d0e0      	beq.n	28356 <isr+0x9e>
			    at_buf[at_cmd_len - 1] == '\r') {
   28394:	481e      	ldr	r0, [pc, #120]	; (28410 <isr+0x158>)
   28396:	4460      	add	r0, ip
			    at_cmd_len > 0 &&
   28398:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   2839c:	280d      	cmp	r0, #13
   2839e:	e7d9      	b.n	28354 <isr+0x9c>
	at_buf[at_cmd_len] = character;
   283a0:	f8df e06c 	ldr.w	lr, [pc, #108]	; 28410 <isr+0x158>
	if (character == '"') {
   283a4:	2a22      	cmp	r2, #34	; 0x22
	at_buf[at_cmd_len] = character;
   283a6:	f80e 200c 	strb.w	r2, [lr, ip]
	at_cmd_len++;
   283aa:	6020      	str	r0, [r4, #0]
	if (character == '"') {
   283ac:	d19a      	bne.n	282e4 <isr+0x2c>
	if (!inside_quotes) {
   283ae:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   283b2:	700b      	strb	r3, [r1, #0]
   283b4:	e796      	b.n	282e4 <isr+0x2c>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   283b6:	2300      	movs	r3, #0
   283b8:	4a15      	ldr	r2, [pc, #84]	; (28410 <isr+0x158>)
   283ba:	6820      	ldr	r0, [r4, #0]
	inside_quotes = false;
   283bc:	700b      	strb	r3, [r1, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   283be:	5413      	strb	r3, [r2, r0]
	at_cmd_len = 0;
   283c0:	6023      	str	r3, [r4, #0]
	if (at_buf[0]) {
   283c2:	7813      	ldrb	r3, [r2, #0]
   283c4:	2b00      	cmp	r3, #0
   283c6:	d08d      	beq.n	282e4 <isr+0x2c>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   283c8:	4b12      	ldr	r3, [pc, #72]	; (28414 <isr+0x15c>)
   283ca:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   283cc:	6843      	ldr	r3, [r0, #4]
   283ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   283d0:	b103      	cbz	r3, 283d4 <isr+0x11c>
		api->irq_rx_disable(dev);
   283d2:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   283d4:	e8d9 3fef 	ldaex	r3, [r9]
   283d8:	f043 0201 	orr.w	r2, r3, #1
   283dc:	e8c9 2fe1 	stlex	r1, r2, [r9]
   283e0:	2900      	cmp	r1, #0
   283e2:	d1f7      	bne.n	283d4 <isr+0x11c>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   283e4:	07da      	lsls	r2, r3, #31
   283e6:	f53f af7d 	bmi.w	282e4 <isr+0x2c>
		k_queue_append(&work_q->queue, work);
   283ea:	490b      	ldr	r1, [pc, #44]	; (28418 <isr+0x160>)
   283ec:	480b      	ldr	r0, [pc, #44]	; (2841c <isr+0x164>)
   283ee:	f017 ffa8 	bl	40342 <k_queue_append>
   283f2:	e777      	b.n	282e4 <isr+0x2c>
   283f4:	00041c3c 	.word	0x00041c3c
   283f8:	00041c2c 	.word	0x00041c2c
   283fc:	20023b84 	.word	0x20023b84
   28400:	2002b2c4 	.word	0x2002b2c4
   28404:	2002b2c5 	.word	0x2002b2c5
   28408:	00045631 	.word	0x00045631
   2840c:	0004565d 	.word	0x0004565d
   28410:	2002a2c4 	.word	0x2002a2c4
   28414:	20023c58 	.word	0x20023c58
   28418:	20023c4c 	.word	0x20023c4c
   2841c:	20023b88 	.word	0x20023b88
   28420:	20023c54 	.word	0x20023c54

00028424 <at_host_init>:

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   28424:	2202      	movs	r2, #2
   28426:	4b49      	ldr	r3, [pc, #292]	; (2854c <at_host_init+0x128>)
{
   28428:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   2842c:	4948      	ldr	r1, [pc, #288]	; (28550 <at_host_init+0x12c>)
   2842e:	2000      	movs	r0, #0
		term_mode = mode;
   28430:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   28432:	f7ff fe37 	bl	280a4 <at_notif_register_handler>
	if (err != 0) {
   28436:	4c47      	ldr	r4, [pc, #284]	; (28554 <at_host_init+0x130>)
   28438:	4b47      	ldr	r3, [pc, #284]	; (28558 <at_host_init+0x134>)
   2843a:	4606      	mov	r6, r0
   2843c:	1ae4      	subs	r4, r4, r3
   2843e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   28442:	b170      	cbz	r0, 28462 <at_host_init+0x3e>
		LOG_ERR("Can't register handler err=%d", err);
   28444:	f04f 0000 	mov.w	r0, #0
   28448:	2301      	movs	r3, #1
   2844a:	f363 0007 	bfi	r0, r3, #0, #8
   2844e:	f364 108f 	bfi	r0, r4, #6, #10
   28452:	4632      	mov	r2, r6
   28454:	4941      	ldr	r1, [pc, #260]	; (2855c <at_host_init+0x138>)
   28456:	f015 fd84 	bl	3df62 <log_string_sync>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   2845a:	4630      	mov	r0, r6
   2845c:	b002      	add	sp, #8
   2845e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28462:	483f      	ldr	r0, [pc, #252]	; (28560 <at_host_init+0x13c>)
   28464:	f00f fda0 	bl	37fa8 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   28468:	4d3e      	ldr	r5, [pc, #248]	; (28564 <at_host_init+0x140>)
   2846a:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   2846c:	b9b8      	cbnz	r0, 2849e <at_host_init+0x7a>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   2846e:	2301      	movs	r3, #1
   28470:	f363 0007 	bfi	r0, r3, #0, #8
   28474:	4a3a      	ldr	r2, [pc, #232]	; (28560 <at_host_init+0x13c>)
   28476:	f364 108f 	bfi	r0, r4, #6, #10
   2847a:	493b      	ldr	r1, [pc, #236]	; (28568 <at_host_init+0x144>)
   2847c:	f015 fd71 	bl	3df62 <log_string_sync>
		return -EINVAL;
   28480:	f06f 0215 	mvn.w	r2, #21
		LOG_ERR("UART could not be initialized: %d", err);
   28484:	2301      	movs	r3, #1
   28486:	f04f 0000 	mov.w	r0, #0
   2848a:	f363 0007 	bfi	r0, r3, #0, #8
   2848e:	f364 108f 	bfi	r0, r4, #6, #10
   28492:	4936      	ldr	r1, [pc, #216]	; (2856c <at_host_init+0x148>)
   28494:	f015 fd65 	bl	3df62 <log_string_sync>
		return -EFAULT;
   28498:	f06f 060d 	mvn.w	r6, #13
   2849c:	e7dd      	b.n	2845a <at_host_init+0x36>
	return z_impl_k_uptime_get();
   2849e:	f018 f837 	bl	40510 <z_impl_k_uptime_get>
   284a2:	4681      	mov	r9, r0
			LOG_INF("UART check failed: %d. "
   284a4:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 28588 <at_host_init+0x164>
		err = uart_err_check(uart_dev);
   284a8:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   284aa:	6843      	ldr	r3, [r0, #4]
   284ac:	689b      	ldr	r3, [r3, #8]
   284ae:	b39b      	cbz	r3, 28518 <at_host_init+0xf4>
		return api->err_check(dev);
   284b0:	4798      	blx	r3
		if (err) {
   284b2:	4680      	mov	r8, r0
   284b4:	b380      	cbz	r0, 28518 <at_host_init+0xf4>
   284b6:	f018 f82b 	bl	40510 <z_impl_k_uptime_get>
			if (k_uptime_get_32() - start_time >
   284ba:	eba0 0009 	sub.w	r0, r0, r9
   284be:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   284c2:	d90d      	bls.n	284e0 <at_host_init+0xbc>
				LOG_ERR("UART check failed: %d. "
   284c4:	2301      	movs	r3, #1
   284c6:	f04f 0000 	mov.w	r0, #0
   284ca:	f363 0007 	bfi	r0, r3, #0, #8
   284ce:	4642      	mov	r2, r8
   284d0:	f364 108f 	bfi	r0, r4, #6, #10
   284d4:	4926      	ldr	r1, [pc, #152]	; (28570 <at_host_init+0x14c>)
   284d6:	f015 fd44 	bl	3df62 <log_string_sync>
				return -EIO;
   284da:	f06f 0204 	mvn.w	r2, #4
   284de:	e7d1      	b.n	28484 <at_host_init+0x60>
			LOG_INF("UART check failed: %d. "
   284e0:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   284e4:	f043 0303 	orr.w	r3, r3, #3
   284e8:	f363 0707 	bfi	r7, r3, #0, #8
   284ec:	f364 178f 	bfi	r7, r4, #6, #10
   284f0:	4642      	mov	r2, r8
   284f2:	4651      	mov	r1, sl
   284f4:	4638      	mov	r0, r7
   284f6:	f015 fd34 	bl	3df62 <log_string_sync>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   284fa:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   284fc:	6843      	ldr	r3, [r0, #4]
   284fe:	699b      	ldr	r3, [r3, #24]
   28500:	b91b      	cbnz	r3, 2850a <at_host_init+0xe6>
	return z_impl_k_sleep(ms);
   28502:	200a      	movs	r0, #10
   28504:	f011 fe10 	bl	3a128 <z_impl_k_sleep>
   28508:	e7ce      	b.n	284a8 <at_host_init+0x84>
		return api->fifo_read(dev, rx_data, size);
   2850a:	2201      	movs	r2, #1
   2850c:	f10d 0107 	add.w	r1, sp, #7
   28510:	4798      	blx	r3
   28512:	2800      	cmp	r0, #0
   28514:	d1f1      	bne.n	284fa <at_host_init+0xd6>
   28516:	e7f4      	b.n	28502 <at_host_init+0xde>
	uart_irq_callback_set(uart_dev, isr);
   28518:	682a      	ldr	r2, [r5, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
   2851a:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   2851c:	b123      	cbz	r3, 28528 <at_host_init+0x104>
   2851e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   28520:	b113      	cbz	r3, 28528 <at_host_init+0x104>
		api->irq_callback_set(dev, cb, user_data);
   28522:	4914      	ldr	r1, [pc, #80]	; (28574 <at_host_init+0x150>)
   28524:	4610      	mov	r0, r2
   28526:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   28528:	2200      	movs	r2, #0
   2852a:	4b13      	ldr	r3, [pc, #76]	; (28578 <at_host_init+0x154>)
   2852c:	4913      	ldr	r1, [pc, #76]	; (2857c <at_host_init+0x158>)
   2852e:	601a      	str	r2, [r3, #0]
   28530:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   28534:	4812      	ldr	r0, [pc, #72]	; (28580 <at_host_init+0x15c>)
   28536:	230a      	movs	r3, #10
   28538:	f44f 7200 	mov.w	r2, #512	; 0x200
   2853c:	4911      	ldr	r1, [pc, #68]	; (28584 <at_host_init+0x160>)
   2853e:	f012 f915 	bl	3a76c <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   28542:	6828      	ldr	r0, [r5, #0]
   28544:	f017 fb46 	bl	3fbd4 <z_impl_uart_irq_rx_enable>
	return err;
   28548:	e787      	b.n	2845a <at_host_init+0x36>
   2854a:	bf00      	nop
   2854c:	2002b2c5 	.word	0x2002b2c5
   28550:	0003fbdf 	.word	0x0003fbdf
   28554:	00041c3c 	.word	0x00041c3c
   28558:	00041c2c 	.word	0x00041c2c
   2855c:	00045526 	.word	0x00045526
   28560:	00044045 	.word	0x00044045
   28564:	20023c58 	.word	0x20023c58
   28568:	00045544 	.word	0x00045544
   2856c:	000455bf 	.word	0x000455bf
   28570:	00045554 	.word	0x00045554
   28574:	000282b9 	.word	0x000282b9
   28578:	20023c4c 	.word	0x20023c4c
   2857c:	00028205 	.word	0x00028205
   28580:	20023b88 	.word	0x20023b88
   28584:	2002d2a0 	.word	0x2002d2a0
   28588:	0004558a 	.word	0x0004558a

0002858c <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper(chr);
   2858c:	4b06      	ldr	r3, [pc, #24]	; (285a8 <is_valid_notification_char+0x1c>)
   2858e:	5cc3      	ldrb	r3, [r0, r3]
   28590:	f003 0303 	and.w	r3, r3, #3
   28594:	2b02      	cmp	r3, #2
   28596:	bf08      	it	eq
   28598:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   2859a:	3841      	subs	r0, #65	; 0x41
   2859c:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   2859e:	2819      	cmp	r0, #25
   285a0:	bf8c      	ite	hi
   285a2:	2000      	movhi	r0, #0
   285a4:	2001      	movls	r0, #1
   285a6:	4770      	bx	lr
   285a8:	00049140 	.word	0x00049140

000285ac <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   285ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   285b0:	6805      	ldr	r5, [r0, #0]
{
   285b2:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   285b4:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   285b6:	782b      	ldrb	r3, [r5, #0]
{
   285b8:	4680      	mov	r8, r0
   285ba:	460f      	mov	r7, r1
   285bc:	4616      	mov	r6, r2
   285be:	2b00      	cmp	r3, #0
   285c0:	f000 80bd 	beq.w	2873e <at_parse_process_element+0x192>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   285c4:	4b5f      	ldr	r3, [pc, #380]	; (28744 <at_parse_process_element+0x198>)
   285c6:	781c      	ldrb	r4, [r3, #0]
   285c8:	2c05      	cmp	r4, #5
   285ca:	d110      	bne.n	285ee <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   285cc:	1c6b      	adds	r3, r5, #1
   285ce:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   285d0:	9a00      	ldr	r2, [sp, #0]
   285d2:	7810      	ldrb	r0, [r2, #0]
   285d4:	f7ff ffda 	bl	2858c <is_valid_notification_char>
   285d8:	b930      	cbnz	r0, 285e8 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   285da:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   285dc:	462a      	mov	r2, r5
   285de:	4639      	mov	r1, r7
   285e0:	4630      	mov	r0, r6
   285e2:	f017 fb75 	bl	3fcd0 <at_params_string_put>
   285e6:	e01b      	b.n	28620 <at_parse_process_element+0x74>
			tmpstr++;
   285e8:	3201      	adds	r2, #1
   285ea:	9200      	str	r2, [sp, #0]
   285ec:	e7f0      	b.n	285d0 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   285ee:	2c06      	cmp	r4, #6
   285f0:	d124      	bne.n	2863c <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   285f2:	4668      	mov	r0, sp
   285f4:	f017 faff 	bl	3fbf6 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   285f8:	9a00      	ldr	r2, [sp, #0]
   285fa:	7810      	ldrb	r0, [r2, #0]
   285fc:	f7ff ffc6 	bl	2858c <is_valid_notification_char>
   28600:	b9a8      	cbnz	r0, 2862e <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   28602:	1b53      	subs	r3, r2, r5
   28604:	4639      	mov	r1, r7
   28606:	462a      	mov	r2, r5
   28608:	4630      	mov	r0, r6
   2860a:	f017 fb61 	bl	3fcd0 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   2860e:	9b00      	ldr	r3, [sp, #0]
   28610:	781a      	ldrb	r2, [r3, #0]
   28612:	2a3d      	cmp	r2, #61	; 0x3d
   28614:	d10e      	bne.n	28634 <at_parse_process_element+0x88>
   28616:	785a      	ldrb	r2, [r3, #1]
   28618:	2a3f      	cmp	r2, #63	; 0x3f
   2861a:	d101      	bne.n	28620 <at_parse_process_element+0x74>
			tmpstr += 2;
   2861c:	3302      	adds	r3, #2
			tmpstr++;
   2861e:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   28620:	2000      	movs	r0, #0
	*str = tmpstr;
   28622:	9b00      	ldr	r3, [sp, #0]
   28624:	f8c8 3000 	str.w	r3, [r8]
}
   28628:	b023      	add	sp, #140	; 0x8c
   2862a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   2862e:	3201      	adds	r2, #1
   28630:	9200      	str	r2, [sp, #0]
   28632:	e7e1      	b.n	285f8 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   28634:	2a3f      	cmp	r2, #63	; 0x3f
   28636:	d1f3      	bne.n	28620 <at_parse_process_element+0x74>
			tmpstr++;
   28638:	3301      	adds	r3, #1
   2863a:	e7f0      	b.n	2861e <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   2863c:	2c07      	cmp	r4, #7
   2863e:	d103      	bne.n	28648 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   28640:	4610      	mov	r0, r2
   28642:	f017 fb1c 	bl	3fc7e <at_params_empty_put>
   28646:	e7eb      	b.n	28620 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   28648:	2c02      	cmp	r4, #2
   2864a:	d112      	bne.n	28672 <at_parse_process_element+0xc6>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   2864c:	9a00      	ldr	r2, [sp, #0]
   2864e:	7810      	ldrb	r0, [r2, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   28650:	2822      	cmp	r0, #34	; 0x22
   28652:	d003      	beq.n	2865c <at_parse_process_element+0xb0>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   28654:	b110      	cbz	r0, 2865c <at_parse_process_element+0xb0>
		       !is_lfcr(*tmpstr)) {
   28656:	f017 fac5 	bl	3fbe4 <is_lfcr>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   2865a:	b138      	cbz	r0, 2866c <at_parse_process_element+0xc0>
		at_params_string_put(list, index, start_ptr,
   2865c:	1b53      	subs	r3, r2, r5
   2865e:	4639      	mov	r1, r7
   28660:	462a      	mov	r2, r5
   28662:	4630      	mov	r0, r6
   28664:	f017 fb34 	bl	3fcd0 <at_params_string_put>
		tmpstr++;
   28668:	9b00      	ldr	r3, [sp, #0]
   2866a:	e7e5      	b.n	28638 <at_parse_process_element+0x8c>
			tmpstr++;
   2866c:	3201      	adds	r2, #1
   2866e:	9200      	str	r2, [sp, #0]
   28670:	e7ec      	b.n	2864c <at_parse_process_element+0xa0>
	} else if (state == ARRAY) {
   28672:	2c01      	cmp	r4, #1
   28674:	d13c      	bne.n	286f0 <at_parse_process_element+0x144>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   28676:	4628      	mov	r0, r5
   28678:	220a      	movs	r2, #10
   2867a:	a901      	add	r1, sp, #4
   2867c:	f013 ff0c 	bl	3c498 <strtoul>
		tmpstr = next;
   28680:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   28682:	4d31      	ldr	r5, [pc, #196]	; (28748 <at_parse_process_element+0x19c>)
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   28684:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   28686:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   28688:	9800      	ldr	r0, [sp, #0]
   2868a:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   2868c:	2b29      	cmp	r3, #41	; 0x29
   2868e:	d028      	beq.n	286e2 <at_parse_process_element+0x136>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   28690:	b33b      	cbz	r3, 286e2 <at_parse_process_element+0x136>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   28692:	3b2c      	subs	r3, #44	; 0x2c
   28694:	b2db      	uxtb	r3, r3
   28696:	3001      	adds	r0, #1
   28698:	2b11      	cmp	r3, #17
				tmparray[i++] =
   2869a:	9000      	str	r0, [sp, #0]
   2869c:	d803      	bhi.n	286a6 <at_parse_process_element+0xfa>
   2869e:	fa25 f303 	lsr.w	r3, r5, r3
   286a2:	07db      	lsls	r3, r3, #31
   286a4:	d408      	bmi.n	286b8 <at_parse_process_element+0x10c>
				tmpstr++;
   286a6:	46a1      	mov	r9, r4
   286a8:	e004      	b.n	286b4 <at_parse_process_element+0x108>
					tmpstr = next;
   286aa:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   286ac:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   286b0:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   286b2:	d015      	beq.n	286e0 <at_parse_process_element+0x134>
				tmpstr++;
   286b4:	464c      	mov	r4, r9
   286b6:	e7e7      	b.n	28688 <at_parse_process_element+0xdc>
					(u32_t)strtoul(++tmpstr, &next, 10);
   286b8:	220a      	movs	r2, #10
   286ba:	a901      	add	r1, sp, #4
   286bc:	f013 feec 	bl	3c498 <strtoul>
				tmparray[i++] =
   286c0:	ab22      	add	r3, sp, #136	; 0x88
   286c2:	f104 0901 	add.w	r9, r4, #1
   286c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   286ca:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   286ce:	9800      	ldr	r0, [sp, #0]
   286d0:	f7f4 fd28 	bl	1d124 <strlen>
   286d4:	4604      	mov	r4, r0
   286d6:	9801      	ldr	r0, [sp, #4]
   286d8:	f7f4 fd24 	bl	1d124 <strlen>
   286dc:	4284      	cmp	r4, r0
   286de:	d1e4      	bne.n	286aa <at_parse_process_element+0xfe>
   286e0:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(u32_t));
   286e2:	00a3      	lsls	r3, r4, #2
   286e4:	aa02      	add	r2, sp, #8
   286e6:	4639      	mov	r1, r7
   286e8:	4630      	mov	r0, r6
   286ea:	f017 fb17 	bl	3fd1c <at_params_array_put>
   286ee:	e7bb      	b.n	28668 <at_parse_process_element+0xbc>
	} else if (state == NUMBER) {
   286f0:	2c03      	cmp	r4, #3
   286f2:	d115      	bne.n	28720 <at_parse_process_element+0x174>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   286f4:	220a      	movs	r2, #10
   286f6:	a902      	add	r1, sp, #8
   286f8:	4628      	mov	r0, r5
   286fa:	f013 fecd 	bl	3c498 <strtoul>
		tmpstr = next;
   286fe:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   28700:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   28704:	4602      	mov	r2, r0
		tmpstr = next;
   28706:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   28708:	da05      	bge.n	28716 <at_parse_process_element+0x16a>
			at_params_short_put(list, index, (u16_t)value);
   2870a:	b282      	uxth	r2, r0
   2870c:	4639      	mov	r1, r7
   2870e:	4630      	mov	r0, r6
   28710:	f017 faa0 	bl	3fc54 <at_params_short_put>
   28714:	e784      	b.n	28620 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   28716:	4639      	mov	r1, r7
   28718:	4630      	mov	r0, r6
   2871a:	f017 fac4 	bl	3fca6 <at_params_int_put>
   2871e:	e77f      	b.n	28620 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   28720:	2c04      	cmp	r4, #4
   28722:	f47f af7d 	bne.w	28620 <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   28726:	4909      	ldr	r1, [pc, #36]	; (2874c <at_parse_process_element+0x1a0>)
   28728:	9b00      	ldr	r3, [sp, #0]
   2872a:	781a      	ldrb	r2, [r3, #0]
   2872c:	5c52      	ldrb	r2, [r2, r1]
   2872e:	f012 0f44 	tst.w	r2, #68	; 0x44
   28732:	d101      	bne.n	28738 <at_parse_process_element+0x18c>
		at_params_string_put(list, index, start_ptr,
   28734:	1b5b      	subs	r3, r3, r5
   28736:	e751      	b.n	285dc <at_parse_process_element+0x30>
			tmpstr++;
   28738:	3301      	adds	r3, #1
   2873a:	9300      	str	r3, [sp, #0]
   2873c:	e7f4      	b.n	28728 <at_parse_process_element+0x17c>
		return -1;
   2873e:	f04f 30ff 	mov.w	r0, #4294967295
   28742:	e771      	b.n	28628 <at_parse_process_element+0x7c>
   28744:	2002b2c6 	.word	0x2002b2c6
   28748:	00024001 	.word	0x00024001
   2874c:	00049140 	.word	0x00049140

00028750 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   28750:	b510      	push	{r4, lr}
   28752:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   28754:	f7f4 fce6 	bl	1d124 <strlen>
   28758:	2801      	cmp	r0, #1
   2875a:	d922      	bls.n	287a2 <is_command+0x52>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   2875c:	7821      	ldrb	r1, [r4, #0]
   2875e:	4b13      	ldr	r3, [pc, #76]	; (287ac <is_command+0x5c>)
   28760:	5cca      	ldrb	r2, [r1, r3]
   28762:	f002 0203 	and.w	r2, r2, #3
   28766:	2a02      	cmp	r2, #2
   28768:	bf08      	it	eq
   2876a:	3920      	subeq	r1, #32
   2876c:	2941      	cmp	r1, #65	; 0x41
   2876e:	461a      	mov	r2, r3
   28770:	d117      	bne.n	287a2 <is_command+0x52>
   28772:	7863      	ldrb	r3, [r4, #1]
   28774:	5cd2      	ldrb	r2, [r2, r3]
   28776:	f002 0203 	and.w	r2, r2, #3
   2877a:	2a02      	cmp	r2, #2
   2877c:	bf08      	it	eq
   2877e:	3b20      	subeq	r3, #32
   28780:	2b54      	cmp	r3, #84	; 0x54
   28782:	d10e      	bne.n	287a2 <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   28784:	78a2      	ldrb	r2, [r4, #2]
   28786:	2a25      	cmp	r2, #37	; 0x25
   28788:	d00d      	beq.n	287a6 <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   2878a:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   2878e:	2b23      	cmp	r3, #35	; 0x23
   28790:	d009      	beq.n	287a6 <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   28792:	4610      	mov	r0, r2
   28794:	f017 fa26 	bl	3fbe4 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   28798:	b910      	cbnz	r0, 287a0 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2879a:	fab2 f082 	clz	r0, r2
   2879e:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   287a0:	bd10      	pop	{r4, pc}
	return false;
   287a2:	2000      	movs	r0, #0
   287a4:	e7fc      	b.n	287a0 <is_command+0x50>
		return true;
   287a6:	2001      	movs	r0, #1
   287a8:	e7fa      	b.n	287a0 <is_command+0x50>
   287aa:	bf00      	nop
   287ac:	00049140 	.word	0x00049140

000287b0 <at_parse_detect_type>:
{
   287b0:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   287b2:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   287b4:	2900      	cmp	r1, #0
{
   287b6:	4606      	mov	r6, r0
   287b8:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   287ba:	d141      	bne.n	28840 <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   287bc:	2a2b      	cmp	r2, #43	; 0x2b
   287be:	4d29      	ldr	r5, [pc, #164]	; (28864 <at_parse_detect_type+0xb4>)
   287c0:	d001      	beq.n	287c6 <at_parse_detect_type+0x16>
   287c2:	2a25      	cmp	r2, #37	; 0x25
   287c4:	d104      	bne.n	287d0 <at_parse_detect_type+0x20>
	state = new_state;
   287c6:	2305      	movs	r3, #5
   287c8:	702b      	strb	r3, [r5, #0]
	return 0;
   287ca:	2000      	movs	r0, #0
	*str = tmpstr;
   287cc:	6034      	str	r4, [r6, #0]
}
   287ce:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   287d0:	4620      	mov	r0, r4
   287d2:	f7ff ffbd 	bl	28750 <is_command>
   287d6:	b388      	cbz	r0, 2883c <at_parse_detect_type+0x8c>
	state = new_state;
   287d8:	2306      	movs	r3, #6
   287da:	e7f5      	b.n	287c8 <at_parse_detect_type+0x18>
	if (chr == '"') {
   287dc:	2a22      	cmp	r2, #34	; 0x22
   287de:	d006      	beq.n	287ee <at_parse_detect_type+0x3e>
	if (chr == '(') {
   287e0:	2a28      	cmp	r2, #40	; 0x28
   287e2:	d109      	bne.n	287f8 <at_parse_detect_type+0x48>
   287e4:	2201      	movs	r2, #1
   287e6:	4b1f      	ldr	r3, [pc, #124]	; (28864 <at_parse_detect_type+0xb4>)
		tmpstr++;
   287e8:	4414      	add	r4, r2
	state = new_state;
   287ea:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   287ec:	e7ed      	b.n	287ca <at_parse_detect_type+0x1a>
	state = new_state;
   287ee:	2202      	movs	r2, #2
   287f0:	4b1c      	ldr	r3, [pc, #112]	; (28864 <at_parse_detect_type+0xb4>)
		tmpstr++;
   287f2:	3401      	adds	r4, #1
	state = new_state;
   287f4:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   287f6:	e7e8      	b.n	287ca <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   287f8:	4610      	mov	r0, r2
   287fa:	f017 f9f3 	bl	3fbe4 <is_lfcr>
   287fe:	b170      	cbz	r0, 2881e <at_parse_detect_type+0x6e>
   28800:	4918      	ldr	r1, [pc, #96]	; (28864 <at_parse_detect_type+0xb4>)
   28802:	7808      	ldrb	r0, [r1, #0]
   28804:	2803      	cmp	r0, #3
   28806:	d108      	bne.n	2881a <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   28808:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   2880c:	f017 f9ea 	bl	3fbe4 <is_lfcr>
   28810:	2800      	cmp	r0, #0
   28812:	d1f9      	bne.n	28808 <at_parse_detect_type+0x58>
	state = new_state;
   28814:	2304      	movs	r3, #4
   28816:	700b      	strb	r3, [r1, #0]
   28818:	e7d7      	b.n	287ca <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   2881a:	2807      	cmp	r0, #7
   2881c:	d0d5      	beq.n	287ca <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2881e:	3a2c      	subs	r2, #44	; 0x2c
   28820:	b2d2      	uxtb	r2, r2
   28822:	2a11      	cmp	r2, #17
   28824:	d807      	bhi.n	28836 <at_parse_detect_type+0x86>
   28826:	4b10      	ldr	r3, [pc, #64]	; (28868 <at_parse_detect_type+0xb8>)
   28828:	fa23 f202 	lsr.w	r2, r3, r2
   2882c:	07d3      	lsls	r3, r2, #31
   2882e:	d502      	bpl.n	28836 <at_parse_detect_type+0x86>
	state = new_state;
   28830:	4b0c      	ldr	r3, [pc, #48]	; (28864 <at_parse_detect_type+0xb4>)
   28832:	2207      	movs	r2, #7
   28834:	e013      	b.n	2885e <at_parse_detect_type+0xae>
		return -1;
   28836:	f04f 30ff 	mov.w	r0, #4294967295
   2883a:	e7c8      	b.n	287ce <at_parse_detect_type+0x1e>
	state = new_state;
   2883c:	2302      	movs	r3, #2
   2883e:	e7c3      	b.n	287c8 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   28840:	dd03      	ble.n	2884a <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   28842:	2a2b      	cmp	r2, #43	; 0x2b
   28844:	d0f7      	beq.n	28836 <at_parse_detect_type+0x86>
   28846:	2a25      	cmp	r2, #37	; 0x25
   28848:	d0f5      	beq.n	28836 <at_parse_detect_type+0x86>
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   2884a:	4b08      	ldr	r3, [pc, #32]	; (2886c <at_parse_detect_type+0xbc>)
   2884c:	5cd3      	ldrb	r3, [r2, r3]
   2884e:	0759      	lsls	r1, r3, #29
   28850:	d403      	bmi.n	2885a <at_parse_detect_type+0xaa>
   28852:	2a2d      	cmp	r2, #45	; 0x2d
   28854:	d001      	beq.n	2885a <at_parse_detect_type+0xaa>
   28856:	2a2b      	cmp	r2, #43	; 0x2b
   28858:	d1c0      	bne.n	287dc <at_parse_detect_type+0x2c>
	state = new_state;
   2885a:	2203      	movs	r2, #3
   2885c:	4b01      	ldr	r3, [pc, #4]	; (28864 <at_parse_detect_type+0xb4>)
   2885e:	701a      	strb	r2, [r3, #0]
   28860:	e7b3      	b.n	287ca <at_parse_detect_type+0x1a>
   28862:	bf00      	nop
   28864:	2002b2c6 	.word	0x2002b2c6
   28868:	00024001 	.word	0x00024001
   2886c:	00049140 	.word	0x00049140

00028870 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   28870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28874:	4688      	mov	r8, r1
   28876:	4616      	mov	r6, r2
   28878:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   2887a:	4604      	mov	r4, r0
   2887c:	2800      	cmp	r0, #0
   2887e:	d07e      	beq.n	2897e <at_parser_max_params_from_str+0x10e>
   28880:	2a00      	cmp	r2, #0
   28882:	d07c      	beq.n	2897e <at_parser_max_params_from_str+0x10e>
   28884:	6853      	ldr	r3, [r2, #4]
   28886:	2b00      	cmp	r3, #0
   28888:	d079      	beq.n	2897e <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   2888a:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   2888c:	4610      	mov	r0, r2
   2888e:	f000 f8eb 	bl	28a68 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   28892:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   28894:	9401      	str	r4, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   28896:	4297      	cmp	r7, r2
   28898:	bf28      	it	cs
   2889a:	4617      	movcs	r7, r2
	int index = 0;
   2889c:	462c      	mov	r4, r5
	state = IDLE;
   2889e:	4b39      	ldr	r3, [pc, #228]	; (28984 <at_parser_max_params_from_str+0x114>)
		if (isspace((int)*str)) {
   288a0:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 28988 <at_parser_max_params_from_str+0x118>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   288a4:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 2898c <at_parser_max_params_from_str+0x11c>
	state = IDLE;
   288a8:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   288aa:	9b01      	ldr	r3, [sp, #4]
   288ac:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   288ae:	2a00      	cmp	r2, #0
   288b0:	d04b      	beq.n	2894a <at_parser_max_params_from_str+0xda>
   288b2:	42a7      	cmp	r7, r4
   288b4:	d949      	bls.n	2894a <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   288b6:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   288ba:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   288bc:	0711      	lsls	r1, r2, #28
			str++;
   288be:	bf48      	it	mi
   288c0:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   288c2:	4621      	mov	r1, r4
			str++;
   288c4:	bf48      	it	mi
   288c6:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   288c8:	f7ff ff72 	bl	287b0 <at_parse_detect_type>
   288cc:	1c42      	adds	r2, r0, #1
   288ce:	d03c      	beq.n	2894a <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   288d0:	4632      	mov	r2, r6
   288d2:	4621      	mov	r1, r4
   288d4:	a801      	add	r0, sp, #4
   288d6:	f7ff fe69 	bl	285ac <at_parse_process_element>
   288da:	1c43      	adds	r3, r0, #1
   288dc:	d035      	beq.n	2894a <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   288de:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   288e0:	781a      	ldrb	r2, [r3, #0]
   288e2:	3a2c      	subs	r2, #44	; 0x2c
   288e4:	b2d2      	uxtb	r2, r2
   288e6:	2a11      	cmp	r2, #17
   288e8:	d81a      	bhi.n	28920 <at_parser_max_params_from_str+0xb0>
   288ea:	fa2a f202 	lsr.w	r2, sl, r2
   288ee:	07d1      	lsls	r1, r2, #31
   288f0:	d516      	bpl.n	28920 <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   288f2:	7858      	ldrb	r0, [r3, #1]
   288f4:	f017 f976 	bl	3fbe4 <is_lfcr>
   288f8:	b178      	cbz	r0, 2891a <at_parser_max_params_from_str+0xaa>
				index++;
   288fa:	3401      	adds	r4, #1
				if (index == max_params) {
   288fc:	42bc      	cmp	r4, r7
   288fe:	d039      	beq.n	28974 <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   28900:	4621      	mov	r1, r4
   28902:	a801      	add	r0, sp, #4
   28904:	f7ff ff54 	bl	287b0 <at_parse_detect_type>
   28908:	1c42      	adds	r2, r0, #1
   2890a:	d01e      	beq.n	2894a <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   2890c:	4632      	mov	r2, r6
   2890e:	4621      	mov	r1, r4
   28910:	a801      	add	r0, sp, #4
   28912:	f7ff fe4b 	bl	285ac <at_parse_process_element>
   28916:	1c43      	adds	r3, r0, #1
   28918:	d017      	beq.n	2894a <at_parser_max_params_from_str+0xda>
			str++;
   2891a:	9b01      	ldr	r3, [sp, #4]
   2891c:	3301      	adds	r3, #1
   2891e:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   28920:	9a01      	ldr	r2, [sp, #4]
   28922:	7810      	ldrb	r0, [r2, #0]
   28924:	f017 f95e 	bl	3fbe4 <is_lfcr>
   28928:	b1f8      	cbz	r0, 2896a <at_parser_max_params_from_str+0xfa>
   2892a:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   2892c:	7811      	ldrb	r1, [r2, #0]
   2892e:	4693      	mov	fp, r2
   28930:	4608      	mov	r0, r1
   28932:	3201      	adds	r2, #1
   28934:	f017 f956 	bl	3fbe4 <is_lfcr>
   28938:	2800      	cmp	r0, #0
   2893a:	d1f7      	bne.n	2892c <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2893c:	b119      	cbz	r1, 28946 <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2893e:	292b      	cmp	r1, #43	; 0x2b
   28940:	d001      	beq.n	28946 <at_parser_max_params_from_str+0xd6>
   28942:	2925      	cmp	r1, #37	; 0x25
   28944:	d111      	bne.n	2896a <at_parser_max_params_from_str+0xfa>
				str += i;
   28946:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   2894a:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   2894c:	b9a5      	cbnz	r5, 28978 <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2894e:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   28950:	2a00      	cmp	r2, #0
   28952:	bf0c      	ite	eq
   28954:	2000      	moveq	r0, #0
   28956:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   2895a:	f1b8 0f00 	cmp.w	r8, #0
   2895e:	d001      	beq.n	28964 <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   28960:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   28964:	b003      	add	sp, #12
   28966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   2896a:	3401      	adds	r4, #1
			oversized = true;
   2896c:	42bc      	cmp	r4, r7
   2896e:	bf08      	it	eq
   28970:	2501      	moveq	r5, #1
   28972:	e79a      	b.n	288aa <at_parser_max_params_from_str+0x3a>
					oversized = true;
   28974:	4605      	mov	r5, r0
   28976:	e7e8      	b.n	2894a <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   28978:	f06f 0006 	mvn.w	r0, #6
   2897c:	e7ed      	b.n	2895a <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   2897e:	f06f 0015 	mvn.w	r0, #21
   28982:	e7ef      	b.n	28964 <at_parser_max_params_from_str+0xf4>
   28984:	2002b2c6 	.word	0x2002b2c6
   28988:	00049140 	.word	0x00049140
   2898c:	00024001 	.word	0x00024001

00028990 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   28990:	b538      	push	{r3, r4, r5, lr}
   28992:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   28994:	4605      	mov	r5, r0
   28996:	b960      	cbnz	r0, 289b2 <at_params_get+0x22>
   28998:	490a      	ldr	r1, [pc, #40]	; (289c4 <at_params_get+0x34>)
   2899a:	232b      	movs	r3, #43	; 0x2b
   2899c:	4a0a      	ldr	r2, [pc, #40]	; (289c8 <at_params_get+0x38>)
   2899e:	480b      	ldr	r0, [pc, #44]	; (289cc <at_params_get+0x3c>)
   289a0:	f015 fa7b 	bl	3de9a <printk>
   289a4:	480a      	ldr	r0, [pc, #40]	; (289d0 <at_params_get+0x40>)
   289a6:	f015 fa78 	bl	3de9a <printk>
   289aa:	212b      	movs	r1, #43	; 0x2b
   289ac:	4806      	ldr	r0, [pc, #24]	; (289c8 <at_params_get+0x38>)
   289ae:	f015 fac7 	bl	3df40 <assert_post_action>

	if (index >= list->param_count) {
   289b2:	682b      	ldr	r3, [r5, #0]
   289b4:	42a3      	cmp	r3, r4
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   289b6:	bf85      	ittet	hi
   289b8:	230c      	movhi	r3, #12
   289ba:	6868      	ldrhi	r0, [r5, #4]
		return NULL;
   289bc:	2000      	movls	r0, #0
	return &param[index];
   289be:	fb03 0004 	mlahi	r0, r3, r4, r0
}
   289c2:	bd38      	pop	{r3, r4, r5, pc}
   289c4:	000456e4 	.word	0x000456e4
   289c8:	000456b6 	.word	0x000456b6
   289cc:	00043278 	.word	0x00043278
   289d0:	000456f8 	.word	0x000456f8

000289d4 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   289d4:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   289d6:	4604      	mov	r4, r0
   289d8:	b960      	cbnz	r0, 289f4 <at_param_size+0x20>
   289da:	490e      	ldr	r1, [pc, #56]	; (28a14 <at_param_size+0x40>)
   289dc:	2339      	movs	r3, #57	; 0x39
   289de:	4a0e      	ldr	r2, [pc, #56]	; (28a18 <at_param_size+0x44>)
   289e0:	480e      	ldr	r0, [pc, #56]	; (28a1c <at_param_size+0x48>)
   289e2:	f015 fa5a 	bl	3de9a <printk>
   289e6:	480e      	ldr	r0, [pc, #56]	; (28a20 <at_param_size+0x4c>)
   289e8:	f015 fa57 	bl	3de9a <printk>
   289ec:	2139      	movs	r1, #57	; 0x39
   289ee:	480a      	ldr	r0, [pc, #40]	; (28a18 <at_param_size+0x44>)
   289f0:	f015 faa6 	bl	3df40 <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   289f4:	7823      	ldrb	r3, [r4, #0]
   289f6:	2b01      	cmp	r3, #1
   289f8:	d006      	beq.n	28a08 <at_param_size+0x34>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   289fa:	2b02      	cmp	r3, #2
   289fc:	d006      	beq.n	28a0c <at_param_size+0x38>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   289fe:	3b03      	subs	r3, #3
   28a00:	2b01      	cmp	r3, #1
   28a02:	d805      	bhi.n	28a10 <at_param_size+0x3c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   28a04:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   28a06:	bd10      	pop	{r4, pc}
		return sizeof(u16_t);
   28a08:	2002      	movs	r0, #2
   28a0a:	e7fc      	b.n	28a06 <at_param_size+0x32>
		return sizeof(u32_t);
   28a0c:	2004      	movs	r0, #4
   28a0e:	e7fa      	b.n	28a06 <at_param_size+0x32>
	return 0;
   28a10:	2000      	movs	r0, #0
   28a12:	e7f8      	b.n	28a06 <at_param_size+0x32>
   28a14:	00045685 	.word	0x00045685
   28a18:	000456b6 	.word	0x000456b6
   28a1c:	00043278 	.word	0x00043278
   28a20:	0004569a 	.word	0x0004569a

00028a24 <at_param_clear>:
{
   28a24:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   28a26:	4604      	mov	r4, r0
   28a28:	b960      	cbnz	r0, 28a44 <at_param_clear+0x20>
   28a2a:	490b      	ldr	r1, [pc, #44]	; (28a58 <at_param_clear+0x34>)
   28a2c:	231d      	movs	r3, #29
   28a2e:	4a0b      	ldr	r2, [pc, #44]	; (28a5c <at_param_clear+0x38>)
   28a30:	480b      	ldr	r0, [pc, #44]	; (28a60 <at_param_clear+0x3c>)
   28a32:	f015 fa32 	bl	3de9a <printk>
   28a36:	480b      	ldr	r0, [pc, #44]	; (28a64 <at_param_clear+0x40>)
   28a38:	f015 fa2f 	bl	3de9a <printk>
   28a3c:	211d      	movs	r1, #29
   28a3e:	4807      	ldr	r0, [pc, #28]	; (28a5c <at_param_clear+0x38>)
   28a40:	f015 fa7e 	bl	3df40 <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   28a44:	7823      	ldrb	r3, [r4, #0]
   28a46:	3b03      	subs	r3, #3
   28a48:	2b01      	cmp	r3, #1
   28a4a:	d802      	bhi.n	28a52 <at_param_clear+0x2e>
		k_free(param->value.str_val);
   28a4c:	68a0      	ldr	r0, [r4, #8]
   28a4e:	f017 fc42 	bl	402d6 <k_free>
	param->value.int_val = 0;
   28a52:	2300      	movs	r3, #0
   28a54:	60a3      	str	r3, [r4, #8]
}
   28a56:	bd10      	pop	{r4, pc}
   28a58:	00045685 	.word	0x00045685
   28a5c:	000456b6 	.word	0x000456b6
   28a60:	00043278 	.word	0x00043278
   28a64:	0004569a 	.word	0x0004569a

00028a68 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   28a68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (list == NULL || list->params == NULL) {
   28a6c:	4605      	mov	r5, r0
   28a6e:	b158      	cbz	r0, 28a88 <at_params_list_clear+0x20>
   28a70:	6843      	ldr	r3, [r0, #4]
   28a72:	b14b      	cbz	r3, 28a88 <at_params_list_clear+0x20>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   28a74:	2400      	movs	r4, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   28a76:	f8df 8054 	ldr.w	r8, [pc, #84]	; 28acc <at_params_list_clear+0x64>
   28a7a:	f8df a054 	ldr.w	sl, [pc, #84]	; 28ad0 <at_params_list_clear+0x68>
   28a7e:	f8df b054 	ldr.w	fp, [pc, #84]	; 28ad4 <at_params_list_clear+0x6c>
	for (size_t i = 0; i < list->param_count; ++i) {
   28a82:	682b      	ldr	r3, [r5, #0]
   28a84:	429c      	cmp	r4, r3
   28a86:	d301      	bcc.n	28a8c <at_params_list_clear+0x24>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   28a88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		at_param_clear(&params[i]);
   28a8c:	270c      	movs	r7, #12
   28a8e:	4367      	muls	r7, r4
   28a90:	f8d5 9004 	ldr.w	r9, [r5, #4]
   28a94:	eb09 0607 	add.w	r6, r9, r7
   28a98:	4630      	mov	r0, r6
   28a9a:	f7ff ffc3 	bl	28a24 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   28a9e:	b966      	cbnz	r6, 28aba <at_params_list_clear+0x52>
   28aa0:	4651      	mov	r1, sl
   28aa2:	2314      	movs	r3, #20
   28aa4:	4642      	mov	r2, r8
   28aa6:	4658      	mov	r0, fp
   28aa8:	f015 f9f7 	bl	3de9a <printk>
   28aac:	4806      	ldr	r0, [pc, #24]	; (28ac8 <at_params_list_clear+0x60>)
   28aae:	f015 f9f4 	bl	3de9a <printk>
   28ab2:	2114      	movs	r1, #20
   28ab4:	4640      	mov	r0, r8
   28ab6:	f015 fa43 	bl	3df40 <assert_post_action>
   28aba:	2300      	movs	r3, #0
	for (size_t i = 0; i < list->param_count; ++i) {
   28abc:	3401      	adds	r4, #1
   28abe:	f849 3007 	str.w	r3, [r9, r7]
   28ac2:	6073      	str	r3, [r6, #4]
   28ac4:	60b3      	str	r3, [r6, #8]
   28ac6:	e7dc      	b.n	28a82 <at_params_list_clear+0x1a>
   28ac8:	0004569a 	.word	0x0004569a
   28acc:	000456b6 	.word	0x000456b6
   28ad0:	00045685 	.word	0x00045685
   28ad4:	00043278 	.word	0x00043278

00028ad8 <w_lte_lc_init>:
	}
}

static int w_lte_lc_init(void)
{
	if (at_cmd_write(nw_mode_preferred, NULL, 0, NULL) != 0) {
   28ad8:	2300      	movs	r3, #0
{
   28ada:	b510      	push	{r4, lr}
	if (at_cmd_write(nw_mode_preferred, NULL, 0, NULL) != 0) {
   28adc:	461a      	mov	r2, r3
   28ade:	4619      	mov	r1, r3
   28ae0:	4813      	ldr	r0, [pc, #76]	; (28b30 <w_lte_lc_init+0x58>)
   28ae2:	f7ff fa2d 	bl	27f40 <at_cmd_write>
   28ae6:	4603      	mov	r3, r0
   28ae8:	b118      	cbz	r0, 28af2 <w_lte_lc_init+0x1a>
		return -EIO;
   28aea:	f06f 0404 	mvn.w	r4, #4
	}
	LOG_INF("PDN Auth: %s", log_strdup(cgauth));
#endif

	return 0;
}
   28aee:	4620      	mov	r0, r4
   28af0:	bd10      	pop	{r4, pc}
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   28af2:	4602      	mov	r2, r0
   28af4:	4601      	mov	r1, r0
   28af6:	480f      	ldr	r0, [pc, #60]	; (28b34 <w_lte_lc_init+0x5c>)
   28af8:	f7ff fa22 	bl	27f40 <at_cmd_write>
   28afc:	4603      	mov	r3, r0
   28afe:	2800      	cmp	r0, #0
   28b00:	d1f3      	bne.n	28aea <w_lte_lc_init+0x12>
	if (at_cmd_write(legacy_pco, NULL, 0, NULL) != 0) {
   28b02:	4602      	mov	r2, r0
   28b04:	4601      	mov	r1, r0
   28b06:	480c      	ldr	r0, [pc, #48]	; (28b38 <w_lte_lc_init+0x60>)
   28b08:	f7ff fa1a 	bl	27f40 <at_cmd_write>
   28b0c:	4604      	mov	r4, r0
   28b0e:	2800      	cmp	r0, #0
   28b10:	d1eb      	bne.n	28aea <w_lte_lc_init+0x12>
	LOG_INF("Using legacy LTE PCO mode...");
   28b12:	2303      	movs	r3, #3
   28b14:	f04f 0000 	mov.w	r0, #0
   28b18:	4a08      	ldr	r2, [pc, #32]	; (28b3c <w_lte_lc_init+0x64>)
   28b1a:	f363 0007 	bfi	r0, r3, #0, #8
   28b1e:	4b08      	ldr	r3, [pc, #32]	; (28b40 <w_lte_lc_init+0x68>)
   28b20:	4908      	ldr	r1, [pc, #32]	; (28b44 <w_lte_lc_init+0x6c>)
   28b22:	1a9b      	subs	r3, r3, r2
   28b24:	08db      	lsrs	r3, r3, #3
   28b26:	f363 108f 	bfi	r0, r3, #6, #10
   28b2a:	f015 fa1a 	bl	3df62 <log_string_sync>
	return 0;
   28b2e:	e7de      	b.n	28aee <w_lte_lc_init+0x16>
   28b30:	0004597b 	.word	0x0004597b
   28b34:	0004579f 	.word	0x0004579f
   28b38:	000457aa 	.word	0x000457aa
   28b3c:	00041c2c 	.word	0x00041c2c
   28b40:	00041cc4 	.word	0x00041cc4
   28b44:	00045b6c 	.word	0x00045b6c

00028b48 <parse_nw_reg_status>:
static int parse_nw_reg_status(const char *at_response,
			       enum lte_lc_nw_reg_status *status,
			       size_t reg_status_index)
{
	int err, reg_status;
	struct at_param_list resp_list = {0};
   28b48:	2300      	movs	r3, #0
{
   28b4a:	b5f0      	push	{r4, r5, r6, r7, lr}
   28b4c:	b087      	sub	sp, #28
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   28b4e:	9302      	str	r3, [sp, #8]
	struct at_param_list resp_list = {0};
   28b50:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   28b54:	f8cd 300b 	str.w	r3, [sp, #11]
	size_t response_prefix_len = sizeof(response_prefix);
   28b58:	2307      	movs	r3, #7
{
   28b5a:	460d      	mov	r5, r1
   28b5c:	4617      	mov	r7, r2
	size_t response_prefix_len = sizeof(response_prefix);
   28b5e:	9301      	str	r3, [sp, #4]

	if ((at_response == NULL) || (status == NULL)) {
   28b60:	4606      	mov	r6, r0
   28b62:	2800      	cmp	r0, #0
   28b64:	f000 808c 	beq.w	28c80 <parse_nw_reg_status+0x138>
   28b68:	2900      	cmp	r1, #0
   28b6a:	f000 8089 	beq.w	28c80 <parse_nw_reg_status+0x138>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   28b6e:	210a      	movs	r1, #10
   28b70:	a804      	add	r0, sp, #16
   28b72:	f017 f84e 	bl	3fc12 <at_params_list_init>
	if (err) {
   28b76:	4604      	mov	r4, r0
   28b78:	b188      	cbz	r0, 28b9e <parse_nw_reg_status+0x56>
		LOG_ERR("Could not init AT params list, error: %d", err);
   28b7a:	2301      	movs	r3, #1
   28b7c:	f04f 0000 	mov.w	r0, #0
   28b80:	4a41      	ldr	r2, [pc, #260]	; (28c88 <parse_nw_reg_status+0x140>)
   28b82:	f363 0007 	bfi	r0, r3, #0, #8
   28b86:	4b41      	ldr	r3, [pc, #260]	; (28c8c <parse_nw_reg_status+0x144>)
   28b88:	4941      	ldr	r1, [pc, #260]	; (28c90 <parse_nw_reg_status+0x148>)
   28b8a:	1a9b      	subs	r3, r3, r2
   28b8c:	08db      	lsrs	r3, r3, #3
   28b8e:	f363 108f 	bfi	r0, r3, #6, #10
   28b92:	4622      	mov	r2, r4
   28b94:	f015 f9e5 	bl	3df62 <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   28b98:	4620      	mov	r0, r4
   28b9a:	b007      	add	sp, #28
   28b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_max_params_from_str(at_response,
   28b9e:	4601      	mov	r1, r0
   28ba0:	230a      	movs	r3, #10
   28ba2:	aa04      	add	r2, sp, #16
   28ba4:	4630      	mov	r0, r6
   28ba6:	f7ff fe63 	bl	28870 <at_parser_max_params_from_str>
	if (err) {
   28baa:	4604      	mov	r4, r0
   28bac:	b190      	cbz	r0, 28bd4 <parse_nw_reg_status+0x8c>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   28bae:	2301      	movs	r3, #1
   28bb0:	f04f 0000 	mov.w	r0, #0
   28bb4:	4a34      	ldr	r2, [pc, #208]	; (28c88 <parse_nw_reg_status+0x140>)
   28bb6:	f363 0007 	bfi	r0, r3, #0, #8
   28bba:	4b34      	ldr	r3, [pc, #208]	; (28c8c <parse_nw_reg_status+0x144>)
   28bbc:	4935      	ldr	r1, [pc, #212]	; (28c94 <parse_nw_reg_status+0x14c>)
   28bbe:	1a9b      	subs	r3, r3, r2
   28bc0:	4622      	mov	r2, r4
   28bc2:	08db      	lsrs	r3, r3, #3
   28bc4:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not get response prefix, error: %d", err);
   28bc8:	f015 f9cb 	bl	3df62 <log_string_sync>
	at_params_list_free(&resp_list);
   28bcc:	a804      	add	r0, sp, #16
   28bce:	f017 f833 	bl	3fc38 <at_params_list_free>
	return err;
   28bd2:	e7e1      	b.n	28b98 <parse_nw_reg_status+0x50>
	err = at_params_string_get(&resp_list,
   28bd4:	4601      	mov	r1, r0
   28bd6:	ab01      	add	r3, sp, #4
   28bd8:	aa02      	add	r2, sp, #8
   28bda:	a804      	add	r0, sp, #16
   28bdc:	f017 f8f1 	bl	3fdc2 <at_params_string_get>
	if (err) {
   28be0:	4604      	mov	r4, r0
   28be2:	b168      	cbz	r0, 28c00 <parse_nw_reg_status+0xb8>
		LOG_ERR("Could not get response prefix, error: %d", err);
   28be4:	2301      	movs	r3, #1
   28be6:	f04f 0000 	mov.w	r0, #0
   28bea:	4a27      	ldr	r2, [pc, #156]	; (28c88 <parse_nw_reg_status+0x140>)
   28bec:	f363 0007 	bfi	r0, r3, #0, #8
   28bf0:	4b26      	ldr	r3, [pc, #152]	; (28c8c <parse_nw_reg_status+0x144>)
   28bf2:	4929      	ldr	r1, [pc, #164]	; (28c98 <parse_nw_reg_status+0x150>)
   28bf4:	1a9b      	subs	r3, r3, r2
   28bf6:	08db      	lsrs	r3, r3, #3
   28bf8:	f363 108f 	bfi	r0, r3, #6, #10
   28bfc:	4622      	mov	r2, r4
   28bfe:	e7e3      	b.n	28bc8 <parse_nw_reg_status+0x80>
	if (!response_is_valid(response_prefix, response_prefix_len,
   28c00:	4a26      	ldr	r2, [pc, #152]	; (28c9c <parse_nw_reg_status+0x154>)
   28c02:	9901      	ldr	r1, [sp, #4]
   28c04:	a802      	add	r0, sp, #8
   28c06:	f017 f91a 	bl	3fe3e <response_is_valid>
   28c0a:	2800      	cmp	r0, #0
   28c0c:	d0de      	beq.n	28bcc <parse_nw_reg_status+0x84>
	err = at_params_int_get(&resp_list, reg_status_index,
   28c0e:	4639      	mov	r1, r7
   28c10:	466a      	mov	r2, sp
   28c12:	a804      	add	r0, sp, #16
   28c14:	f017 f8be 	bl	3fd94 <at_params_int_get>
	if (err) {
   28c18:	491c      	ldr	r1, [pc, #112]	; (28c8c <parse_nw_reg_status+0x144>)
   28c1a:	4b1b      	ldr	r3, [pc, #108]	; (28c88 <parse_nw_reg_status+0x140>)
   28c1c:	4604      	mov	r4, r0
   28c1e:	1ac9      	subs	r1, r1, r3
   28c20:	f3c1 01c9 	ubfx	r1, r1, #3, #10
   28c24:	b148      	cbz	r0, 28c3a <parse_nw_reg_status+0xf2>
		LOG_ERR("Could not get registration status, error: %d", err);
   28c26:	f04f 0000 	mov.w	r0, #0
   28c2a:	2301      	movs	r3, #1
   28c2c:	f363 0007 	bfi	r0, r3, #0, #8
   28c30:	f361 108f 	bfi	r0, r1, #6, #10
   28c34:	4622      	mov	r2, r4
   28c36:	491a      	ldr	r1, [pc, #104]	; (28ca0 <parse_nw_reg_status+0x158>)
   28c38:	e7c6      	b.n	28bc8 <parse_nw_reg_status+0x80>
	switch (reg_status) {
   28c3a:	9b00      	ldr	r3, [sp, #0]
   28c3c:	2b08      	cmp	r3, #8
   28c3e:	d002      	beq.n	28c46 <parse_nw_reg_status+0xfe>
   28c40:	dc0e      	bgt.n	28c60 <parse_nw_reg_status+0x118>
   28c42:	2b05      	cmp	r3, #5
   28c44:	d80e      	bhi.n	28c64 <parse_nw_reg_status+0x11c>
		LOG_DBG("Network registration status: %d", reg_status);
   28c46:	2204      	movs	r2, #4
   28c48:	f04f 0000 	mov.w	r0, #0
   28c4c:	f362 0007 	bfi	r0, r2, #0, #8
   28c50:	f361 108f 	bfi	r0, r1, #6, #10
		*status = reg_status;
   28c54:	702b      	strb	r3, [r5, #0]
		LOG_DBG("Network registration status: %d", reg_status);
   28c56:	4a13      	ldr	r2, [pc, #76]	; (28ca4 <parse_nw_reg_status+0x15c>)
   28c58:	4913      	ldr	r1, [pc, #76]	; (28ca8 <parse_nw_reg_status+0x160>)
   28c5a:	f015 f982 	bl	3df62 <log_string_sync>
   28c5e:	e7b5      	b.n	28bcc <parse_nw_reg_status+0x84>
	switch (reg_status) {
   28c60:	2b5a      	cmp	r3, #90	; 0x5a
   28c62:	d0f0      	beq.n	28c46 <parse_nw_reg_status+0xfe>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   28c64:	2201      	movs	r2, #1
   28c66:	f04f 0000 	mov.w	r0, #0
   28c6a:	f362 0007 	bfi	r0, r2, #0, #8
   28c6e:	f361 108f 	bfi	r0, r1, #6, #10
   28c72:	461a      	mov	r2, r3
   28c74:	490d      	ldr	r1, [pc, #52]	; (28cac <parse_nw_reg_status+0x164>)
   28c76:	f015 f974 	bl	3df62 <log_string_sync>
		err = -EIO;
   28c7a:	f06f 0404 	mvn.w	r4, #4
   28c7e:	e7a5      	b.n	28bcc <parse_nw_reg_status+0x84>
		return -EINVAL;
   28c80:	f06f 0415 	mvn.w	r4, #21
   28c84:	e788      	b.n	28b98 <parse_nw_reg_status+0x50>
   28c86:	bf00      	nop
   28c88:	00041c2c 	.word	0x00041c2c
   28c8c:	00041cc4 	.word	0x00041cc4
   28c90:	0004599c 	.word	0x0004599c
   28c94:	000459c5 	.word	0x000459c5
   28c98:	000459f2 	.word	0x000459f2
   28c9c:	00045a1b 	.word	0x00045a1b
   28ca0:	00045a22 	.word	0x00045a22
   28ca4:	0004572a 	.word	0x0004572a
   28ca8:	00045a4f 	.word	0x00045a4f
   28cac:	00045a73 	.word	0x00045a73

00028cb0 <at_handler>:
{
   28cb0:	b507      	push	{r0, r1, r2, lr}
	if (response == NULL) {
   28cb2:	4608      	mov	r0, r1
   28cb4:	b971      	cbnz	r1, 28cd4 <at_handler+0x24>
		LOG_ERR("Response buffer is NULL-pointer");
   28cb6:	2301      	movs	r3, #1
   28cb8:	4a15      	ldr	r2, [pc, #84]	; (28d10 <at_handler+0x60>)
   28cba:	f363 0007 	bfi	r0, r3, #0, #8
   28cbe:	4b15      	ldr	r3, [pc, #84]	; (28d14 <at_handler+0x64>)
   28cc0:	4915      	ldr	r1, [pc, #84]	; (28d18 <at_handler+0x68>)
   28cc2:	1a9b      	subs	r3, r3, r2
   28cc4:	08db      	lsrs	r3, r3, #3
   28cc6:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not get network registration status");
   28cca:	f015 f94a 	bl	3df62 <log_string_sync>
}
   28cce:	b003      	add	sp, #12
   28cd0:	f85d fb04 	ldr.w	pc, [sp], #4
	err = parse_nw_reg_status(response, &status, AT_CEREG_REG_STATUS_INDEX);
   28cd4:	2201      	movs	r2, #1
   28cd6:	f10d 0107 	add.w	r1, sp, #7
   28cda:	f7ff ff35 	bl	28b48 <parse_nw_reg_status>
	if (err) {
   28cde:	b160      	cbz	r0, 28cfa <at_handler+0x4a>
		LOG_ERR("Could not get network registration status");
   28ce0:	2301      	movs	r3, #1
   28ce2:	f04f 0000 	mov.w	r0, #0
   28ce6:	4a0a      	ldr	r2, [pc, #40]	; (28d10 <at_handler+0x60>)
   28ce8:	f363 0007 	bfi	r0, r3, #0, #8
   28cec:	4b09      	ldr	r3, [pc, #36]	; (28d14 <at_handler+0x64>)
   28cee:	490b      	ldr	r1, [pc, #44]	; (28d1c <at_handler+0x6c>)
   28cf0:	1a9b      	subs	r3, r3, r2
   28cf2:	08db      	lsrs	r3, r3, #3
   28cf4:	f363 108f 	bfi	r0, r3, #6, #10
   28cf8:	e7e7      	b.n	28cca <at_handler+0x1a>
	if ((status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   28cfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   28cfe:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28d02:	2b01      	cmp	r3, #1
   28d04:	d1e3      	bne.n	28cce <at_handler+0x1e>
	z_impl_k_sem_give(sem);
   28d06:	4806      	ldr	r0, [pc, #24]	; (28d20 <at_handler+0x70>)
   28d08:	f011 fa50 	bl	3a1ac <z_impl_k_sem_give>
   28d0c:	e7df      	b.n	28cce <at_handler+0x1e>
   28d0e:	bf00      	nop
   28d10:	00041c2c 	.word	0x00041c2c
   28d14:	00041cc4 	.word	0x00041cc4
   28d18:	00045755 	.word	0x00045755
   28d1c:	00045775 	.word	0x00045775
   28d20:	20023c5c 	.word	0x20023c5c

00028d24 <w_lte_lc_connect>:
{
   28d24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   28d28:	2201      	movs	r2, #1
   28d2a:	2100      	movs	r1, #0
   28d2c:	4841      	ldr	r0, [pc, #260]	; (28e34 <w_lte_lc_connect+0x110>)
   28d2e:	f017 fb51 	bl	403d4 <z_impl_k_sem_init>
	rc = at_notif_register_handler(NULL, at_handler);
   28d32:	4941      	ldr	r1, [pc, #260]	; (28e38 <w_lte_lc_connect+0x114>)
   28d34:	2000      	movs	r0, #0
   28d36:	f7ff f9b5 	bl	280a4 <at_notif_register_handler>
	if (rc != 0) {
   28d3a:	4c40      	ldr	r4, [pc, #256]	; (28e3c <w_lte_lc_connect+0x118>)
   28d3c:	4b40      	ldr	r3, [pc, #256]	; (28e40 <w_lte_lc_connect+0x11c>)
   28d3e:	4682      	mov	sl, r0
   28d40:	1ae4      	subs	r4, r4, r3
   28d42:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   28d46:	b168      	cbz	r0, 28d64 <w_lte_lc_connect+0x40>
		LOG_ERR("Can't register handler rc=%d", rc);
   28d48:	2201      	movs	r2, #1
   28d4a:	f04f 0000 	mov.w	r0, #0
   28d4e:	f362 0007 	bfi	r0, r2, #0, #8
   28d52:	4652      	mov	r2, sl
   28d54:	493b      	ldr	r1, [pc, #236]	; (28e44 <w_lte_lc_connect+0x120>)
   28d56:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_ERR("Can't de-register handler rc=%d", rc);
   28d5a:	f015 f902 	bl	3df62 <log_string_sync>
}
   28d5e:	4650      	mov	r0, sl
   28d60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28d64:	f04f 0902 	mov.w	r9, #2
	const char *current_network_mode = nw_mode_preferred;
   28d68:	4d37      	ldr	r5, [pc, #220]	; (28e48 <w_lte_lc_connect+0x124>)
		if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   28d6a:	f8df b100 	ldr.w	fp, [pc, #256]	; 28e6c <w_lte_lc_connect+0x148>
		LOG_DBG("Network mode: %s", log_strdup(current_network_mode));
   28d6e:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   28d72:	f043 0304 	orr.w	r3, r3, #4
   28d76:	4628      	mov	r0, r5
   28d78:	f363 0707 	bfi	r7, r3, #0, #8
   28d7c:	f015 f903 	bl	3df86 <log_strdup>
   28d80:	f364 178f 	bfi	r7, r4, #6, #10
   28d84:	4603      	mov	r3, r0
   28d86:	4a31      	ldr	r2, [pc, #196]	; (28e4c <w_lte_lc_connect+0x128>)
   28d88:	4931      	ldr	r1, [pc, #196]	; (28e50 <w_lte_lc_connect+0x12c>)
   28d8a:	4638      	mov	r0, r7
   28d8c:	f015 f8e9 	bl	3df62 <log_string_sync>
		if (at_cmd_write(current_network_mode, NULL, 0, NULL) != 0) {
   28d90:	2300      	movs	r3, #0
   28d92:	4628      	mov	r0, r5
   28d94:	461a      	mov	r2, r3
   28d96:	4619      	mov	r1, r3
   28d98:	f7ff f8d2 	bl	27f40 <at_cmd_write>
   28d9c:	4603      	mov	r3, r0
   28d9e:	bba0      	cbnz	r0, 28e0a <w_lte_lc_connect+0xe6>
		if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   28da0:	4602      	mov	r2, r0
   28da2:	4601      	mov	r1, r0
   28da4:	4658      	mov	r0, fp
   28da6:	f7ff f8cb 	bl	27f40 <at_cmd_write>
   28daa:	4605      	mov	r5, r0
   28dac:	bb68      	cbnz	r0, 28e0a <w_lte_lc_connect+0xe6>
	return z_impl_k_sem_take(sem, timeout);
   28dae:	4929      	ldr	r1, [pc, #164]	; (28e54 <w_lte_lc_connect+0x130>)
   28db0:	4820      	ldr	r0, [pc, #128]	; (28e34 <w_lte_lc_connect+0x110>)
   28db2:	f011 fa45 	bl	3a240 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   28db6:	f110 0f0b 	cmn.w	r0, #11
   28dba:	4682      	mov	sl, r0
   28dbc:	d127      	bne.n	28e0e <w_lte_lc_connect+0xea>
			LOG_INF("Network connection attempt timed out");
   28dbe:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   28dc2:	f043 0303 	orr.w	r3, r3, #3
   28dc6:	f363 0807 	bfi	r8, r3, #0, #8
   28dca:	f364 188f 	bfi	r8, r4, #6, #10
   28dce:	4922      	ldr	r1, [pc, #136]	; (28e58 <w_lte_lc_connect+0x134>)
   28dd0:	4640      	mov	r0, r8
   28dd2:	f015 f8c6 	bl	3df62 <log_string_sync>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   28dd6:	f1b9 0f01 	cmp.w	r9, #1
   28dda:	d028      	beq.n	28e2e <w_lte_lc_connect+0x10a>
				if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   28ddc:	462b      	mov	r3, r5
   28dde:	462a      	mov	r2, r5
   28de0:	4629      	mov	r1, r5
   28de2:	481e      	ldr	r0, [pc, #120]	; (28e5c <w_lte_lc_connect+0x138>)
   28de4:	f7ff f8ac 	bl	27f40 <at_cmd_write>
   28de8:	b978      	cbnz	r0, 28e0a <w_lte_lc_connect+0xe6>
				LOG_INF("Using fallback network mode");
   28dea:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   28dee:	f043 0303 	orr.w	r3, r3, #3
   28df2:	f363 0607 	bfi	r6, r3, #0, #8
   28df6:	f364 168f 	bfi	r6, r4, #6, #10
   28dfa:	4919      	ldr	r1, [pc, #100]	; (28e60 <w_lte_lc_connect+0x13c>)
   28dfc:	4630      	mov	r0, r6
   28dfe:	f015 f8b0 	bl	3df62 <log_string_sync>
				current_network_mode = nw_mode_fallback;
   28e02:	4d18      	ldr	r5, [pc, #96]	; (28e64 <w_lte_lc_connect+0x140>)
   28e04:	f04f 0901 	mov.w	r9, #1
   28e08:	e7b1      	b.n	28d6e <w_lte_lc_connect+0x4a>
			err = -EIO;
   28e0a:	f06f 0a04 	mvn.w	sl, #4
	rc = at_notif_deregister_handler(NULL, at_handler);
   28e0e:	490a      	ldr	r1, [pc, #40]	; (28e38 <w_lte_lc_connect+0x114>)
   28e10:	2000      	movs	r0, #0
   28e12:	f7ff f993 	bl	2813c <at_notif_deregister_handler>
	if (rc != 0) {
   28e16:	4602      	mov	r2, r0
   28e18:	2800      	cmp	r0, #0
   28e1a:	d0a0      	beq.n	28d5e <w_lte_lc_connect+0x3a>
		LOG_ERR("Can't de-register handler rc=%d", rc);
   28e1c:	2101      	movs	r1, #1
   28e1e:	f04f 0000 	mov.w	r0, #0
   28e22:	f361 0007 	bfi	r0, r1, #0, #8
   28e26:	f364 108f 	bfi	r0, r4, #6, #10
   28e2a:	490f      	ldr	r1, [pc, #60]	; (28e68 <w_lte_lc_connect+0x144>)
   28e2c:	e795      	b.n	28d5a <w_lte_lc_connect+0x36>
				err = -ETIMEDOUT;
   28e2e:	f06f 0a73 	mvn.w	sl, #115	; 0x73
   28e32:	e7ec      	b.n	28e0e <w_lte_lc_connect+0xea>
   28e34:	20023c5c 	.word	0x20023c5c
   28e38:	00028cb1 	.word	0x00028cb1
   28e3c:	00041cc4 	.word	0x00041cc4
   28e40:	00041c2c 	.word	0x00041c2c
   28e44:	00045ad9 	.word	0x00045ad9
   28e48:	0004597b 	.word	0x0004597b
   28e4c:	00045719 	.word	0x00045719
   28e50:	00045af6 	.word	0x00045af6
   28e54:	000927c0 	.word	0x000927c0
   28e58:	00045b0b 	.word	0x00045b0b
   28e5c:	00045992 	.word	0x00045992
   28e60:	00045b30 	.word	0x00045b30
   28e64:	00045964 	.word	0x00045964
   28e68:	00045b4c 	.word	0x00045b4c
   28e6c:	0004595a 	.word	0x0004595a

00028e70 <lte_lc_power_off>:
{
   28e70:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   28e72:	2300      	movs	r3, #0
   28e74:	4804      	ldr	r0, [pc, #16]	; (28e88 <lte_lc_power_off+0x18>)
   28e76:	461a      	mov	r2, r3
   28e78:	4619      	mov	r1, r3
   28e7a:	f7ff f861 	bl	27f40 <at_cmd_write>
   28e7e:	2800      	cmp	r0, #0
}
   28e80:	bf18      	it	ne
   28e82:	f06f 0004 	mvnne.w	r0, #4
   28e86:	bd08      	pop	{r3, pc}
   28e88:	00045a9b 	.word	0x00045a9b

00028e8c <lte_lc_psm_req>:
{
   28e8c:	b538      	push	{r3, r4, r5, lr}
	if (at_cmd_write(enable ? psm_req : psm_disable,
   28e8e:	2300      	movs	r3, #0
   28e90:	4d07      	ldr	r5, [pc, #28]	; (28eb0 <lte_lc_psm_req+0x24>)
   28e92:	4c08      	ldr	r4, [pc, #32]	; (28eb4 <lte_lc_psm_req+0x28>)
   28e94:	461a      	mov	r2, r3
   28e96:	4298      	cmp	r0, r3
   28e98:	bf14      	ite	ne
   28e9a:	4628      	movne	r0, r5
   28e9c:	4620      	moveq	r0, r4
   28e9e:	4619      	mov	r1, r3
   28ea0:	f7ff f84e 	bl	27f40 <at_cmd_write>
   28ea4:	2800      	cmp	r0, #0
}
   28ea6:	bf18      	it	ne
   28ea8:	f06f 0004 	mvnne.w	r0, #4
   28eac:	bd38      	pop	{r3, r4, r5, pc}
   28eae:	bf00      	nop
   28eb0:	00045aaf 	.word	0x00045aaf
   28eb4:	00045aa5 	.word	0x00045aa5

00028eb8 <lte_lc_system_mode_set>:

	return err;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode)
{
   28eb8:	b570      	push	{r4, r5, r6, lr}
   28eba:	4a34      	ldr	r2, [pc, #208]	; (28f8c <lte_lc_system_mode_set+0xd4>)
   28ebc:	4c34      	ldr	r4, [pc, #208]	; (28f90 <lte_lc_system_mode_set+0xd8>)
   28ebe:	b08c      	sub	sp, #48	; 0x30
   28ec0:	1aa4      	subs	r4, r4, r2
   28ec2:	4603      	mov	r3, r0
   28ec4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	int len, err = 0;
	u8_t mode_params[4] = {0};
	char cmd[sizeof(AT_XSYSTEMMODE_PROTO)];

	switch (mode) {
   28ec8:	2805      	cmp	r0, #5
   28eca:	d84b      	bhi.n	28f64 <lte_lc_system_mode_set+0xac>
   28ecc:	e8df f000 	tbb	[pc, r0]
   28ed0:	475a5707 	.word	0x475a5707
   28ed4:	1603      	.short	0x1603
	case LTE_LC_SYSTEM_MODE_LTEM:
		mode_params[AT_XSYSTEMMODE_LTEM_INDEX] = 1;
		break;
	case LTE_LC_SYSTEM_MODE_LTEM_GPS:
		mode_params[AT_XSYSTEMMODE_LTEM_INDEX] = 1;
		mode_params[AT_XSYSTEMMODE_GPS_INDEX] = 1;
   28ed6:	2201      	movs	r2, #1
	u8_t mode_params[4] = {0};
   28ed8:	2100      	movs	r1, #0
   28eda:	4613      	mov	r3, r2
   28edc:	e011      	b.n	28f02 <lte_lc_system_mode_set+0x4a>
		LOG_DBG("No system mode set");
   28ede:	2304      	movs	r3, #4
   28ee0:	f04f 0000 	mov.w	r0, #0
   28ee4:	f363 0007 	bfi	r0, r3, #0, #8
   28ee8:	f364 108f 	bfi	r0, r4, #6, #10
   28eec:	4a29      	ldr	r2, [pc, #164]	; (28f94 <lte_lc_system_mode_set+0xdc>)
   28eee:	492a      	ldr	r1, [pc, #168]	; (28f98 <lte_lc_system_mode_set+0xe0>)
   28ef0:	f015 f837 	bl	3df62 <log_string_sync>
	int len, err = 0;
   28ef4:	2500      	movs	r5, #0
		LOG_ERR("Could not send AT command, err: %d", err);
	}

exit:
	return err;
}
   28ef6:	4628      	mov	r0, r5
   28ef8:	b00c      	add	sp, #48	; 0x30
   28efa:	bd70      	pop	{r4, r5, r6, pc}
		mode_params[AT_XSYSTEMMODE_GPS_INDEX] = 1;
   28efc:	2201      	movs	r2, #1
		mode_params[AT_XSYSTEMMODE_NBIOT_INDEX] = 1;
   28efe:	4611      	mov	r1, r2
	u8_t mode_params[4] = {0};
   28f00:	2300      	movs	r3, #0
	len = snprintf(cmd, sizeof(AT_XSYSTEMMODE_PROTO), AT_XSYSTEMMODE_PROTO,
   28f02:	2600      	movs	r6, #0
   28f04:	9100      	str	r1, [sp, #0]
   28f06:	e9cd 2601 	strd	r2, r6, [sp, #4]
   28f0a:	211c      	movs	r1, #28
   28f0c:	4a23      	ldr	r2, [pc, #140]	; (28f9c <lte_lc_system_mode_set+0xe4>)
   28f0e:	a805      	add	r0, sp, #20
   28f10:	f013 f962 	bl	3c1d8 <sniprintf>
	LOG_DBG("Sending command: %s", log_strdup(cmd));
   28f14:	f04f 0500 	mov.w	r5, #0
   28f18:	2304      	movs	r3, #4
   28f1a:	a805      	add	r0, sp, #20
   28f1c:	f363 0507 	bfi	r5, r3, #0, #8
   28f20:	f015 f831 	bl	3df86 <log_strdup>
   28f24:	f364 158f 	bfi	r5, r4, #6, #10
   28f28:	4603      	mov	r3, r0
   28f2a:	4a1a      	ldr	r2, [pc, #104]	; (28f94 <lte_lc_system_mode_set+0xdc>)
   28f2c:	4628      	mov	r0, r5
   28f2e:	491c      	ldr	r1, [pc, #112]	; (28fa0 <lte_lc_system_mode_set+0xe8>)
   28f30:	f015 f817 	bl	3df62 <log_string_sync>
	err = at_cmd_write(cmd, NULL, 0, NULL);
   28f34:	4633      	mov	r3, r6
   28f36:	4632      	mov	r2, r6
   28f38:	4631      	mov	r1, r6
   28f3a:	a805      	add	r0, sp, #20
   28f3c:	f7ff f800 	bl	27f40 <at_cmd_write>
	if (err) {
   28f40:	4605      	mov	r5, r0
   28f42:	2800      	cmp	r0, #0
   28f44:	d0d7      	beq.n	28ef6 <lte_lc_system_mode_set+0x3e>
		LOG_ERR("Could not send AT command, err: %d", err);
   28f46:	2301      	movs	r3, #1
   28f48:	f04f 0000 	mov.w	r0, #0
   28f4c:	f363 0007 	bfi	r0, r3, #0, #8
   28f50:	f364 108f 	bfi	r0, r4, #6, #10
   28f54:	462a      	mov	r2, r5
   28f56:	4913      	ldr	r1, [pc, #76]	; (28fa4 <lte_lc_system_mode_set+0xec>)
   28f58:	f015 f803 	bl	3df62 <log_string_sync>
	return err;
   28f5c:	e7cb      	b.n	28ef6 <lte_lc_system_mode_set+0x3e>
		mode_params[AT_XSYSTEMMODE_GPS_INDEX] = 1;
   28f5e:	2201      	movs	r2, #1
	u8_t mode_params[4] = {0};
   28f60:	2100      	movs	r1, #0
   28f62:	e7cd      	b.n	28f00 <lte_lc_system_mode_set+0x48>
		LOG_ERR("Invalid system mode requested");
   28f64:	2301      	movs	r3, #1
   28f66:	f04f 0000 	mov.w	r0, #0
   28f6a:	f363 0007 	bfi	r0, r3, #0, #8
   28f6e:	f364 108f 	bfi	r0, r4, #6, #10
   28f72:	490d      	ldr	r1, [pc, #52]	; (28fa8 <lte_lc_system_mode_set+0xf0>)
   28f74:	f014 fff5 	bl	3df62 <log_string_sync>
		err = -EINVAL;
   28f78:	f06f 0515 	mvn.w	r5, #21
		goto exit;
   28f7c:	e7bb      	b.n	28ef6 <lte_lc_system_mode_set+0x3e>
	u8_t mode_params[4] = {0};
   28f7e:	2200      	movs	r2, #0
   28f80:	4611      	mov	r1, r2
   28f82:	e7be      	b.n	28f02 <lte_lc_system_mode_set+0x4a>
   28f84:	2200      	movs	r2, #0
		mode_params[AT_XSYSTEMMODE_NBIOT_INDEX] = 1;
   28f86:	2101      	movs	r1, #1
   28f88:	e7a7      	b.n	28eda <lte_lc_system_mode_set+0x22>
   28f8a:	bf00      	nop
   28f8c:	00041c2c 	.word	0x00041c2c
   28f90:	00041cc4 	.word	0x00041cc4
   28f94:	0004573e 	.word	0x0004573e
   28f98:	000458ce 	.word	0x000458ce
   28f9c:	00045903 	.word	0x00045903
   28fa0:	0004591f 	.word	0x0004591f
   28fa4:	00045937 	.word	0x00045937
   28fa8:	000458e5 	.word	0x000458e5

00028fac <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode)
{
   28fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, bitmask = 0;
	struct at_param_list resp_list = {0};
   28fb0:	2400      	movs	r4, #0
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   28fb2:	250d      	movs	r5, #13
{
   28fb4:	4606      	mov	r6, r0
   28fb6:	b090      	sub	sp, #64	; 0x40
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   28fb8:	221e      	movs	r2, #30
   28fba:	4621      	mov	r1, r4
   28fbc:	a808      	add	r0, sp, #32
	struct at_param_list resp_list = {0};
   28fbe:	e9cd 4402 	strd	r4, r4, [sp, #8]
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   28fc2:	f017 fb4b 	bl	4065c <memset>
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   28fc6:	462a      	mov	r2, r5
   28fc8:	4621      	mov	r1, r4
   28fca:	a804      	add	r0, sp, #16
   28fcc:	f017 fb46 	bl	4065c <memset>
	size_t response_prefix_len = sizeof(response_prefix);
   28fd0:	9500      	str	r5, [sp, #0]

	if (mode == NULL) {
   28fd2:	2e00      	cmp	r6, #0
   28fd4:	f000 80c2 	beq.w	2915c <lte_lc_system_mode_get+0x1b0>
		return -EINVAL;
	}

	err = at_cmd_write(AT_XSYSTEMMODE_READ, response, sizeof(response),
   28fd8:	4623      	mov	r3, r4
   28fda:	221e      	movs	r2, #30
   28fdc:	a908      	add	r1, sp, #32
   28fde:	4861      	ldr	r0, [pc, #388]	; (29164 <lte_lc_system_mode_get+0x1b8>)
   28fe0:	f7fe ffae 	bl	27f40 <at_cmd_write>
			   NULL);
	if (err) {
   28fe4:	4604      	mov	r4, r0
   28fe6:	b188      	cbz	r0, 2900c <lte_lc_system_mode_get+0x60>
		LOG_ERR("Could not send AT command");
   28fe8:	2301      	movs	r3, #1
   28fea:	f04f 0000 	mov.w	r0, #0
   28fee:	4a5e      	ldr	r2, [pc, #376]	; (29168 <lte_lc_system_mode_get+0x1bc>)
   28ff0:	f363 0007 	bfi	r0, r3, #0, #8
   28ff4:	4b5d      	ldr	r3, [pc, #372]	; (2916c <lte_lc_system_mode_get+0x1c0>)
   28ff6:	495e      	ldr	r1, [pc, #376]	; (29170 <lte_lc_system_mode_get+0x1c4>)
   28ff8:	1a9b      	subs	r3, r3, r2
   28ffa:	08db      	lsrs	r3, r3, #3
   28ffc:	f363 108f 	bfi	r0, r3, #6, #10
   29000:	f014 ffaf 	bl	3df62 <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   29004:	4620      	mov	r0, r4
   29006:	b010      	add	sp, #64	; 0x40
   29008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_params_list_init(&resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   2900c:	2105      	movs	r1, #5
   2900e:	a802      	add	r0, sp, #8
   29010:	f016 fdff 	bl	3fc12 <at_params_list_init>
	if (err) {
   29014:	4604      	mov	r4, r0
   29016:	b178      	cbz	r0, 29038 <lte_lc_system_mode_get+0x8c>
		LOG_ERR("Could init AT params list, error: %d", err);
   29018:	2301      	movs	r3, #1
   2901a:	f04f 0000 	mov.w	r0, #0
   2901e:	4a52      	ldr	r2, [pc, #328]	; (29168 <lte_lc_system_mode_get+0x1bc>)
   29020:	f363 0007 	bfi	r0, r3, #0, #8
   29024:	4b51      	ldr	r3, [pc, #324]	; (2916c <lte_lc_system_mode_get+0x1c0>)
   29026:	4953      	ldr	r1, [pc, #332]	; (29174 <lte_lc_system_mode_get+0x1c8>)
   29028:	1a9b      	subs	r3, r3, r2
   2902a:	08db      	lsrs	r3, r3, #3
   2902c:	f363 108f 	bfi	r0, r3, #6, #10
   29030:	4622      	mov	r2, r4
   29032:	f014 ff96 	bl	3df62 <log_string_sync>
		return err;
   29036:	e7e5      	b.n	29004 <lte_lc_system_mode_get+0x58>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   29038:	4601      	mov	r1, r0
   2903a:	2305      	movs	r3, #5
   2903c:	aa02      	add	r2, sp, #8
   2903e:	a808      	add	r0, sp, #32
   29040:	f7ff fc16 	bl	28870 <at_parser_max_params_from_str>
	if (err) {
   29044:	4604      	mov	r4, r0
   29046:	b178      	cbz	r0, 29068 <lte_lc_system_mode_get+0xbc>
		LOG_ERR("Could not parse AT response, error: %d", err);
   29048:	2301      	movs	r3, #1
   2904a:	f04f 0000 	mov.w	r0, #0
   2904e:	4a46      	ldr	r2, [pc, #280]	; (29168 <lte_lc_system_mode_get+0x1bc>)
   29050:	f363 0007 	bfi	r0, r3, #0, #8
   29054:	4b45      	ldr	r3, [pc, #276]	; (2916c <lte_lc_system_mode_get+0x1c0>)
   29056:	4948      	ldr	r1, [pc, #288]	; (29178 <lte_lc_system_mode_get+0x1cc>)
   29058:	1a9b      	subs	r3, r3, r2
   2905a:	4622      	mov	r2, r4
   2905c:	08db      	lsrs	r3, r3, #3
   2905e:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   29062:	f014 ff7e 	bl	3df62 <log_string_sync>
			goto clean_exit;
   29066:	e02c      	b.n	290c2 <lte_lc_system_mode_get+0x116>
	err = at_params_string_get(&resp_list,
   29068:	4601      	mov	r1, r0
   2906a:	466b      	mov	r3, sp
   2906c:	aa04      	add	r2, sp, #16
   2906e:	a802      	add	r0, sp, #8
   29070:	f016 fea7 	bl	3fdc2 <at_params_string_get>
	if (err) {
   29074:	4605      	mov	r5, r0
   29076:	b180      	cbz	r0, 2909a <lte_lc_system_mode_get+0xee>
		LOG_ERR("Could not get response prefix, error: %d", err);
   29078:	2301      	movs	r3, #1
   2907a:	f04f 0000 	mov.w	r0, #0
   2907e:	4a3a      	ldr	r2, [pc, #232]	; (29168 <lte_lc_system_mode_get+0x1bc>)
   29080:	f363 0007 	bfi	r0, r3, #0, #8
   29084:	4b39      	ldr	r3, [pc, #228]	; (2916c <lte_lc_system_mode_get+0x1c0>)
   29086:	493d      	ldr	r1, [pc, #244]	; (2917c <lte_lc_system_mode_get+0x1d0>)
   29088:	1a9b      	subs	r3, r3, r2
   2908a:	08db      	lsrs	r3, r3, #3
   2908c:	f363 108f 	bfi	r0, r3, #6, #10
   29090:	462a      	mov	r2, r5
   29092:	f014 ff66 	bl	3df62 <log_string_sync>
		break;
   29096:	462c      	mov	r4, r5
   29098:	e013      	b.n	290c2 <lte_lc_system_mode_get+0x116>
	if (!response_is_valid(response_prefix, response_prefix_len,
   2909a:	4a39      	ldr	r2, [pc, #228]	; (29180 <lte_lc_system_mode_get+0x1d4>)
   2909c:	9900      	ldr	r1, [sp, #0]
   2909e:	a804      	add	r0, sp, #16
   290a0:	f016 fecd 	bl	3fe3e <response_is_valid>
   290a4:	b988      	cbnz	r0, 290ca <lte_lc_system_mode_get+0x11e>
		LOG_ERR("Invalid XSYSTEMMODE response");
   290a6:	2301      	movs	r3, #1
   290a8:	4a2f      	ldr	r2, [pc, #188]	; (29168 <lte_lc_system_mode_get+0x1bc>)
   290aa:	f363 0007 	bfi	r0, r3, #0, #8
   290ae:	4b2f      	ldr	r3, [pc, #188]	; (2916c <lte_lc_system_mode_get+0x1c0>)
   290b0:	4934      	ldr	r1, [pc, #208]	; (29184 <lte_lc_system_mode_get+0x1d8>)
   290b2:	1a9b      	subs	r3, r3, r2
   290b4:	08db      	lsrs	r3, r3, #3
   290b6:	f363 108f 	bfi	r0, r3, #6, #10
   290ba:	f014 ff52 	bl	3df62 <log_string_sync>
		err = -EIO;
   290be:	f06f 0404 	mvn.w	r4, #4
	at_params_list_free(&resp_list);
   290c2:	a802      	add	r0, sp, #8
   290c4:	f016 fdb8 	bl	3fc38 <at_params_list_free>
	return err;
   290c8:	e79c      	b.n	29004 <lte_lc_system_mode_get+0x58>
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   290ca:	2701      	movs	r7, #1
		bitmask = param ? bitmask | BIT(i) : bitmask;
   290cc:	46b8      	mov	r8, r7
		err = at_params_int_get(&resp_list, i, &param);
   290ce:	aa01      	add	r2, sp, #4
   290d0:	4639      	mov	r1, r7
   290d2:	a802      	add	r0, sp, #8
   290d4:	f016 fe5e 	bl	3fd94 <at_params_int_get>
		if (err) {
   290d8:	4604      	mov	r4, r0
   290da:	b168      	cbz	r0, 290f8 <lte_lc_system_mode_get+0x14c>
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   290dc:	2301      	movs	r3, #1
   290de:	f04f 0000 	mov.w	r0, #0
   290e2:	4a21      	ldr	r2, [pc, #132]	; (29168 <lte_lc_system_mode_get+0x1bc>)
   290e4:	f363 0007 	bfi	r0, r3, #0, #8
   290e8:	4b20      	ldr	r3, [pc, #128]	; (2916c <lte_lc_system_mode_get+0x1c0>)
   290ea:	4927      	ldr	r1, [pc, #156]	; (29188 <lte_lc_system_mode_get+0x1dc>)
   290ec:	1a9b      	subs	r3, r3, r2
   290ee:	08db      	lsrs	r3, r3, #3
   290f0:	f363 108f 	bfi	r0, r3, #6, #10
   290f4:	4622      	mov	r2, r4
   290f6:	e7b4      	b.n	29062 <lte_lc_system_mode_get+0xb6>
		bitmask = param ? bitmask | BIT(i) : bitmask;
   290f8:	9b01      	ldr	r3, [sp, #4]
   290fa:	b113      	cbz	r3, 29102 <lte_lc_system_mode_get+0x156>
   290fc:	fa08 f307 	lsl.w	r3, r8, r7
   29100:	431d      	orrs	r5, r3
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   29102:	3701      	adds	r7, #1
   29104:	2f05      	cmp	r7, #5
   29106:	d1e2      	bne.n	290ce <lte_lc_system_mode_get+0x122>
	switch (bitmask) {
   29108:	2d0c      	cmp	r5, #12
   2910a:	d816      	bhi.n	2913a <lte_lc_system_mode_get+0x18e>
   2910c:	e8df f005 	tbb	[pc, r5]
   29110:	150a1507 	.word	0x150a1507
   29114:	1515150d 	.word	0x1515150d
   29118:	1511150f 	.word	0x1511150f
   2911c:	13          	.byte	0x13
   2911d:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   2911e:	2300      	movs	r3, #0
   29120:	7033      	strb	r3, [r6, #0]
   29122:	e7b8      	b.n	29096 <lte_lc_system_mode_get+0xea>
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   29124:	2301      	movs	r3, #1
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   29126:	7033      	strb	r3, [r6, #0]
		break;
   29128:	e7cb      	b.n	290c2 <lte_lc_system_mode_get+0x116>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   2912a:	2302      	movs	r3, #2
   2912c:	e7fb      	b.n	29126 <lte_lc_system_mode_get+0x17a>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   2912e:	2303      	movs	r3, #3
   29130:	e7f9      	b.n	29126 <lte_lc_system_mode_get+0x17a>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   29132:	2304      	movs	r3, #4
   29134:	e7f7      	b.n	29126 <lte_lc_system_mode_get+0x17a>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   29136:	2305      	movs	r3, #5
   29138:	e7f5      	b.n	29126 <lte_lc_system_mode_get+0x17a>
		LOG_ERR("Invalid system mode, assuming parsing error");
   2913a:	2301      	movs	r3, #1
   2913c:	f04f 0000 	mov.w	r0, #0
   29140:	4a09      	ldr	r2, [pc, #36]	; (29168 <lte_lc_system_mode_get+0x1bc>)
   29142:	f363 0007 	bfi	r0, r3, #0, #8
   29146:	4b09      	ldr	r3, [pc, #36]	; (2916c <lte_lc_system_mode_get+0x1c0>)
   29148:	4910      	ldr	r1, [pc, #64]	; (2918c <lte_lc_system_mode_get+0x1e0>)
   2914a:	1a9b      	subs	r3, r3, r2
   2914c:	08db      	lsrs	r3, r3, #3
   2914e:	f363 108f 	bfi	r0, r3, #6, #10
   29152:	f014 ff06 	bl	3df62 <log_string_sync>
		err = -EFAULT;
   29156:	f06f 040d 	mvn.w	r4, #13
		break;
   2915a:	e7b2      	b.n	290c2 <lte_lc_system_mode_get+0x116>
		return -EINVAL;
   2915c:	f06f 0415 	mvn.w	r4, #21
   29160:	e750      	b.n	29004 <lte_lc_system_mode_get+0x58>
   29162:	bf00      	nop
   29164:	000457da 	.word	0x000457da
   29168:	00041c2c 	.word	0x00041c2c
   2916c:	00041cc4 	.word	0x00041cc4
   29170:	000457ea 	.word	0x000457ea
   29174:	00045804 	.word	0x00045804
   29178:	00045829 	.word	0x00045829
   2917c:	000459f2 	.word	0x000459f2
   29180:	00045850 	.word	0x00045850
   29184:	0004585d 	.word	0x0004585d
   29188:	0004587a 	.word	0x0004587a
   2918c:	000458a2 	.word	0x000458a2

00029190 <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   29190:	b530      	push	{r4, r5, lr}
	int err, resp_mode;
	struct at_param_list resp_list = {0};
   29192:	2400      	movs	r4, #0
{
   29194:	b08d      	sub	sp, #52	; 0x34
   29196:	4605      	mov	r5, r0
	char response[AT_CFUN_RESPONSE_MAX_LEN] = {0};
   29198:	2214      	movs	r2, #20
   2919a:	4621      	mov	r1, r4
   2919c:	a807      	add	r0, sp, #28
	struct at_param_list resp_list = {0};
   2919e:	e9cd 4405 	strd	r4, r4, [sp, #20]
	char response[AT_CFUN_RESPONSE_MAX_LEN] = {0};
   291a2:	f017 fa5b 	bl	4065c <memset>
	char response_prefix[sizeof(AT_CFUN_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   291a6:	2306      	movs	r3, #6
	char response_prefix[sizeof(AT_CFUN_RESPONSE_PREFIX)] = {0};
   291a8:	9403      	str	r4, [sp, #12]
   291aa:	f8ad 4010 	strh.w	r4, [sp, #16]
	size_t response_prefix_len = sizeof(response_prefix);
   291ae:	9302      	str	r3, [sp, #8]

	if (mode == NULL) {
   291b0:	2d00      	cmp	r5, #0
   291b2:	f000 808d 	beq.w	292d0 <lte_lc_func_mode_get+0x140>
		return -EINVAL;
	}

	err = at_cmd_write(AT_CFUN_READ, response, sizeof(response), NULL);
   291b6:	4623      	mov	r3, r4
   291b8:	2214      	movs	r2, #20
   291ba:	a907      	add	r1, sp, #28
   291bc:	4846      	ldr	r0, [pc, #280]	; (292d8 <lte_lc_func_mode_get+0x148>)
   291be:	f7fe febf 	bl	27f40 <at_cmd_write>
	if (err) {
   291c2:	4604      	mov	r4, r0
   291c4:	b180      	cbz	r0, 291e8 <lte_lc_func_mode_get+0x58>
		LOG_ERR("Could not send AT command");
   291c6:	2301      	movs	r3, #1
   291c8:	f04f 0000 	mov.w	r0, #0
   291cc:	4a43      	ldr	r2, [pc, #268]	; (292dc <lte_lc_func_mode_get+0x14c>)
   291ce:	f363 0007 	bfi	r0, r3, #0, #8
   291d2:	4b43      	ldr	r3, [pc, #268]	; (292e0 <lte_lc_func_mode_get+0x150>)
   291d4:	4943      	ldr	r1, [pc, #268]	; (292e4 <lte_lc_func_mode_get+0x154>)
   291d6:	1a9b      	subs	r3, r3, r2
   291d8:	08db      	lsrs	r3, r3, #3
   291da:	f363 108f 	bfi	r0, r3, #6, #10
   291de:	f014 fec0 	bl	3df62 <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   291e2:	4620      	mov	r0, r4
   291e4:	b00d      	add	sp, #52	; 0x34
   291e6:	bd30      	pop	{r4, r5, pc}
	err = at_params_list_init(&resp_list, AT_CFUN_PARAMS_COUNT);
   291e8:	2102      	movs	r1, #2
   291ea:	a805      	add	r0, sp, #20
   291ec:	f016 fd11 	bl	3fc12 <at_params_list_init>
	if (err) {
   291f0:	4604      	mov	r4, r0
   291f2:	b178      	cbz	r0, 29214 <lte_lc_func_mode_get+0x84>
		LOG_ERR("Could init AT params list, error: %d", err);
   291f4:	2301      	movs	r3, #1
   291f6:	f04f 0000 	mov.w	r0, #0
   291fa:	4a38      	ldr	r2, [pc, #224]	; (292dc <lte_lc_func_mode_get+0x14c>)
   291fc:	f363 0007 	bfi	r0, r3, #0, #8
   29200:	4b37      	ldr	r3, [pc, #220]	; (292e0 <lte_lc_func_mode_get+0x150>)
   29202:	4939      	ldr	r1, [pc, #228]	; (292e8 <lte_lc_func_mode_get+0x158>)
   29204:	1a9b      	subs	r3, r3, r2
   29206:	08db      	lsrs	r3, r3, #3
   29208:	f363 108f 	bfi	r0, r3, #6, #10
   2920c:	4622      	mov	r2, r4
   2920e:	f014 fea8 	bl	3df62 <log_string_sync>
		return err;
   29212:	e7e6      	b.n	291e2 <lte_lc_func_mode_get+0x52>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   29214:	4601      	mov	r1, r0
   29216:	2302      	movs	r3, #2
   29218:	aa05      	add	r2, sp, #20
   2921a:	a807      	add	r0, sp, #28
   2921c:	f7ff fb28 	bl	28870 <at_parser_max_params_from_str>
	if (err) {
   29220:	4604      	mov	r4, r0
   29222:	b190      	cbz	r0, 2924a <lte_lc_func_mode_get+0xba>
		LOG_ERR("Could not parse AT response, error: %d", err);
   29224:	2301      	movs	r3, #1
   29226:	f04f 0000 	mov.w	r0, #0
   2922a:	4a2c      	ldr	r2, [pc, #176]	; (292dc <lte_lc_func_mode_get+0x14c>)
   2922c:	f363 0007 	bfi	r0, r3, #0, #8
   29230:	4b2b      	ldr	r3, [pc, #172]	; (292e0 <lte_lc_func_mode_get+0x150>)
   29232:	492e      	ldr	r1, [pc, #184]	; (292ec <lte_lc_func_mode_get+0x15c>)
   29234:	1a9b      	subs	r3, r3, r2
   29236:	4622      	mov	r2, r4
   29238:	08db      	lsrs	r3, r3, #3
   2923a:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not get response prefix, error: %d", err);
   2923e:	f014 fe90 	bl	3df62 <log_string_sync>
	at_params_list_free(&resp_list);
   29242:	a805      	add	r0, sp, #20
   29244:	f016 fcf8 	bl	3fc38 <at_params_list_free>
	return err;
   29248:	e7cb      	b.n	291e2 <lte_lc_func_mode_get+0x52>
	err = at_params_string_get(&resp_list,
   2924a:	4601      	mov	r1, r0
   2924c:	ab02      	add	r3, sp, #8
   2924e:	aa03      	add	r2, sp, #12
   29250:	a805      	add	r0, sp, #20
   29252:	f016 fdb6 	bl	3fdc2 <at_params_string_get>
	if (err) {
   29256:	4604      	mov	r4, r0
   29258:	b168      	cbz	r0, 29276 <lte_lc_func_mode_get+0xe6>
		LOG_ERR("Could not get response prefix, error: %d", err);
   2925a:	2301      	movs	r3, #1
   2925c:	f04f 0000 	mov.w	r0, #0
   29260:	4a1e      	ldr	r2, [pc, #120]	; (292dc <lte_lc_func_mode_get+0x14c>)
   29262:	f363 0007 	bfi	r0, r3, #0, #8
   29266:	4b1e      	ldr	r3, [pc, #120]	; (292e0 <lte_lc_func_mode_get+0x150>)
   29268:	4921      	ldr	r1, [pc, #132]	; (292f0 <lte_lc_func_mode_get+0x160>)
   2926a:	1a9b      	subs	r3, r3, r2
   2926c:	08db      	lsrs	r3, r3, #3
   2926e:	f363 108f 	bfi	r0, r3, #6, #10
   29272:	4622      	mov	r2, r4
   29274:	e7e3      	b.n	2923e <lte_lc_func_mode_get+0xae>
	if (!response_is_valid(response_prefix, response_prefix_len,
   29276:	4a1f      	ldr	r2, [pc, #124]	; (292f4 <lte_lc_func_mode_get+0x164>)
   29278:	9902      	ldr	r1, [sp, #8]
   2927a:	a803      	add	r0, sp, #12
   2927c:	f016 fddf 	bl	3fe3e <response_is_valid>
   29280:	b970      	cbnz	r0, 292a0 <lte_lc_func_mode_get+0x110>
		LOG_ERR("Invalid CFUN response");
   29282:	2301      	movs	r3, #1
   29284:	4a15      	ldr	r2, [pc, #84]	; (292dc <lte_lc_func_mode_get+0x14c>)
   29286:	f363 0007 	bfi	r0, r3, #0, #8
   2928a:	4b15      	ldr	r3, [pc, #84]	; (292e0 <lte_lc_func_mode_get+0x150>)
   2928c:	491a      	ldr	r1, [pc, #104]	; (292f8 <lte_lc_func_mode_get+0x168>)
   2928e:	1a9b      	subs	r3, r3, r2
   29290:	08db      	lsrs	r3, r3, #3
   29292:	f363 108f 	bfi	r0, r3, #6, #10
   29296:	f014 fe64 	bl	3df62 <log_string_sync>
		err = -EIO;
   2929a:	f06f 0404 	mvn.w	r4, #4
		goto clean_exit;
   2929e:	e7d0      	b.n	29242 <lte_lc_func_mode_get+0xb2>
	err = at_params_int_get(&resp_list, AT_CFUN_MODE_INDEX, &resp_mode);
   292a0:	aa01      	add	r2, sp, #4
   292a2:	2101      	movs	r1, #1
   292a4:	a805      	add	r0, sp, #20
   292a6:	f016 fd75 	bl	3fd94 <at_params_int_get>
	if (err) {
   292aa:	4604      	mov	r4, r0
   292ac:	b168      	cbz	r0, 292ca <lte_lc_func_mode_get+0x13a>
		LOG_ERR("Could not parse mode parameter, err: %d", err);
   292ae:	2301      	movs	r3, #1
   292b0:	f04f 0000 	mov.w	r0, #0
   292b4:	4a09      	ldr	r2, [pc, #36]	; (292dc <lte_lc_func_mode_get+0x14c>)
   292b6:	f363 0007 	bfi	r0, r3, #0, #8
   292ba:	4b09      	ldr	r3, [pc, #36]	; (292e0 <lte_lc_func_mode_get+0x150>)
   292bc:	490f      	ldr	r1, [pc, #60]	; (292fc <lte_lc_func_mode_get+0x16c>)
   292be:	1a9b      	subs	r3, r3, r2
   292c0:	08db      	lsrs	r3, r3, #3
   292c2:	f363 108f 	bfi	r0, r3, #6, #10
   292c6:	4622      	mov	r2, r4
   292c8:	e7b9      	b.n	2923e <lte_lc_func_mode_get+0xae>
	*mode = resp_mode;
   292ca:	9b01      	ldr	r3, [sp, #4]
   292cc:	702b      	strb	r3, [r5, #0]
   292ce:	e7b8      	b.n	29242 <lte_lc_func_mode_get+0xb2>
		return -EINVAL;
   292d0:	f06f 0415 	mvn.w	r4, #21
   292d4:	e785      	b.n	291e2 <lte_lc_func_mode_get+0x52>
   292d6:	bf00      	nop
   292d8:	000457b5 	.word	0x000457b5
   292dc:	00041c2c 	.word	0x00041c2c
   292e0:	00041cc4 	.word	0x00041cc4
   292e4:	000457ea 	.word	0x000457ea
   292e8:	00045804 	.word	0x00045804
   292ec:	00045829 	.word	0x00045829
   292f0:	000459f2 	.word	0x000459f2
   292f4:	000457be 	.word	0x000457be
   292f8:	000457c4 	.word	0x000457c4
   292fc:	0004587a 	.word	0x0004587a

00029300 <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   29300:	b538      	push	{r3, r4, r5, lr}
   29302:	4605      	mov	r5, r0
			    const char *buf)
{
	int err;
	u32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   29304:	4a08      	ldr	r2, [pc, #32]	; (29328 <modem_info_parse.isra.0+0x28>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   29306:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   29308:	782b      	ldrb	r3, [r5, #0]
   2930a:	2100      	movs	r1, #0
   2930c:	f7ff fab0 	bl	28870 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err != 0) {
   29310:	4604      	mov	r4, r0
   29312:	b938      	cbnz	r0, 29324 <modem_info_parse.isra.0+0x24>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   29314:	4804      	ldr	r0, [pc, #16]	; (29328 <modem_info_parse.isra.0+0x28>)
   29316:	f016 fd7b 	bl	3fe10 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   2931a:	782b      	ldrb	r3, [r5, #0]
		return -EAGAIN;
   2931c:	4298      	cmp	r0, r3
   2931e:	bf88      	it	hi
   29320:	f06f 040a 	mvnhi.w	r4, #10
	}

	return err;
}
   29324:	4620      	mov	r0, r4
   29326:	bd38      	pop	{r3, r4, r5, pc}
   29328:	20023c74 	.word	0x20023c74

0002932c <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(void *context, const char *response)
{
   2932c:	b513      	push	{r0, r1, r4, lr}
   2932e:	460c      	mov	r4, r1
	ARG_UNUSED(context);

	u16_t param_value;
	int err;

	if (!is_cesq_notification(response, strlen(response))) {
   29330:	4608      	mov	r0, r1
   29332:	f7f3 fef7 	bl	1d124 <strlen>
	return strstr(buf, AT_CMD_CESQ_RESP) ? true : false;
   29336:	491b      	ldr	r1, [pc, #108]	; (293a4 <modem_info_rsrp_subscribe_handler+0x78>)
   29338:	4620      	mov	r0, r4
   2933a:	f017 fb99 	bl	40a70 <strstr>
	if (!is_cesq_notification(response, strlen(response))) {
   2933e:	b198      	cbz	r0, 29368 <modem_info_rsrp_subscribe_handler+0x3c>
		return;
	}

	err = modem_info_parse(modem_data[MODEM_INFO_RSRP],
   29340:	4621      	mov	r1, r4
   29342:	4819      	ldr	r0, [pc, #100]	; (293a8 <modem_info_rsrp_subscribe_handler+0x7c>)
   29344:	f7ff ffdc 	bl	29300 <modem_info_parse.isra.0>
			       response);
	if (err != 0) {
   29348:	4602      	mov	r2, r0
   2934a:	b178      	cbz	r0, 2936c <modem_info_rsrp_subscribe_handler+0x40>
		LOG_ERR("modem_info_parse failed to parse "
   2934c:	2301      	movs	r3, #1
   2934e:	f04f 0000 	mov.w	r0, #0
   29352:	4916      	ldr	r1, [pc, #88]	; (293ac <modem_info_rsrp_subscribe_handler+0x80>)
   29354:	f363 0007 	bfi	r0, r3, #0, #8
   29358:	4b15      	ldr	r3, [pc, #84]	; (293b0 <modem_info_rsrp_subscribe_handler+0x84>)
   2935a:	1a5b      	subs	r3, r3, r1
   2935c:	08db      	lsrs	r3, r3, #3
   2935e:	4915      	ldr	r1, [pc, #84]	; (293b4 <modem_info_rsrp_subscribe_handler+0x88>)
   29360:	f363 108f 	bfi	r0, r3, #6, #10

	err = at_params_short_get(&m_param_list,
				  modem_data[MODEM_INFO_RSRP]->param_index,
				  &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   29364:	f014 fdfd 	bl	3df62 <log_string_sync>
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   29368:	b002      	add	sp, #8
   2936a:	bd10      	pop	{r4, pc}
	err = at_params_short_get(&m_param_list,
   2936c:	f10d 0206 	add.w	r2, sp, #6
   29370:	2101      	movs	r1, #1
   29372:	4811      	ldr	r0, [pc, #68]	; (293b8 <modem_info_rsrp_subscribe_handler+0x8c>)
   29374:	f016 fcf8 	bl	3fd68 <at_params_short_get>
	if (err != 0) {
   29378:	4602      	mov	r2, r0
   2937a:	b160      	cbz	r0, 29396 <modem_info_rsrp_subscribe_handler+0x6a>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   2937c:	2301      	movs	r3, #1
   2937e:	f04f 0000 	mov.w	r0, #0
   29382:	490a      	ldr	r1, [pc, #40]	; (293ac <modem_info_rsrp_subscribe_handler+0x80>)
   29384:	f363 0007 	bfi	r0, r3, #0, #8
   29388:	4b09      	ldr	r3, [pc, #36]	; (293b0 <modem_info_rsrp_subscribe_handler+0x84>)
   2938a:	1a5b      	subs	r3, r3, r1
   2938c:	08db      	lsrs	r3, r3, #3
   2938e:	f363 108f 	bfi	r0, r3, #6, #10
   29392:	490a      	ldr	r1, [pc, #40]	; (293bc <modem_info_rsrp_subscribe_handler+0x90>)
   29394:	e7e6      	b.n	29364 <modem_info_rsrp_subscribe_handler+0x38>
	modem_info_rsrp_cb(param_value);
   29396:	4b0a      	ldr	r3, [pc, #40]	; (293c0 <modem_info_rsrp_subscribe_handler+0x94>)
   29398:	f89d 0006 	ldrb.w	r0, [sp, #6]
   2939c:	681b      	ldr	r3, [r3, #0]
   2939e:	4798      	blx	r3
   293a0:	e7e2      	b.n	29368 <modem_info_rsrp_subscribe_handler+0x3c>
   293a2:	bf00      	nop
   293a4:	00045b93 	.word	0x00045b93
   293a8:	000423a1 	.word	0x000423a1
   293ac:	00041c2c 	.word	0x00041c2c
   293b0:	00041ccc 	.word	0x00041ccc
   293b4:	00045b99 	.word	0x00045b99
   293b8:	20023c74 	.word	0x20023c74
   293bc:	00045bd0 	.word	0x00045bd0
   293c0:	20023c7c 	.word	0x20023c7c

000293c4 <modem_info_type_get>:
	if (info_type >= MODEM_INFO_COUNT) {
   293c4:	2814      	cmp	r0, #20
	return modem_data[info_type]->data_type;
   293c6:	bf9d      	ittte	ls
   293c8:	4b02      	ldrls	r3, [pc, #8]	; (293d4 <modem_info_type_get+0x10>)
   293ca:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   293ce:	7a98      	ldrbls	r0, [r3, #10]
		return -EINVAL;
   293d0:	20ea      	movhi	r0, #234	; 0xea
}
   293d2:	4770      	bx	lr
   293d4:	0004232c 	.word	0x0004232c

000293d8 <modem_info_name_get>:
{
   293d8:	b570      	push	{r4, r5, r6, lr}
	if (name == NULL) {
   293da:	460d      	mov	r5, r1
   293dc:	b919      	cbnz	r1, 293e6 <modem_info_name_get+0xe>
		return -EINVAL;
   293de:	f06f 0415 	mvn.w	r4, #21
}
   293e2:	4620      	mov	r0, r4
   293e4:	bd70      	pop	{r4, r5, r6, pc}
	len = strlen(modem_data[info]->data_name);
   293e6:	4b07      	ldr	r3, [pc, #28]	; (29404 <modem_info_name_get+0x2c>)
   293e8:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   293ec:	6870      	ldr	r0, [r6, #4]
   293ee:	f7f3 fe99 	bl	1d124 <strlen>
	if (len <= 0) {
   293f2:	1e04      	subs	r4, r0, #0
   293f4:	ddf3      	ble.n	293de <modem_info_name_get+0x6>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   293f6:	4622      	mov	r2, r4
   293f8:	6871      	ldr	r1, [r6, #4]
   293fa:	4628      	mov	r0, r5
   293fc:	f017 f90e 	bl	4061c <memcpy>
   29400:	e7ef      	b.n	293e2 <modem_info_name_get+0xa>
   29402:	bf00      	nop
   29404:	0004232c 	.word	0x0004232c

00029408 <modem_info_short_get>:
{
   29408:	b530      	push	{r4, r5, lr}
   2940a:	460d      	mov	r5, r1
   2940c:	b0a1      	sub	sp, #132	; 0x84
   2940e:	4604      	mov	r4, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   29410:	2280      	movs	r2, #128	; 0x80
   29412:	2100      	movs	r1, #0
   29414:	4668      	mov	r0, sp
   29416:	f017 f921 	bl	4065c <memset>
	if (buf == NULL) {
   2941a:	b1e5      	cbz	r5, 29456 <modem_info_short_get+0x4e>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   2941c:	4b11      	ldr	r3, [pc, #68]	; (29464 <modem_info_short_get+0x5c>)
   2941e:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   29422:	7aa3      	ldrb	r3, [r4, #10]
   29424:	2b03      	cmp	r3, #3
   29426:	d016      	beq.n	29456 <modem_info_short_get+0x4e>
	err = at_cmd_write(modem_data[info]->cmd,
   29428:	2300      	movs	r3, #0
   2942a:	2280      	movs	r2, #128	; 0x80
   2942c:	4669      	mov	r1, sp
   2942e:	6820      	ldr	r0, [r4, #0]
   29430:	f7fe fd86 	bl	27f40 <at_cmd_write>
	if (err != 0) {
   29434:	b990      	cbnz	r0, 2945c <modem_info_short_get+0x54>
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   29436:	4669      	mov	r1, sp
   29438:	f104 0009 	add.w	r0, r4, #9
   2943c:	f7ff ff60 	bl	29300 <modem_info_parse.isra.0>
	if (err) {
   29440:	b938      	cbnz	r0, 29452 <modem_info_short_get+0x4a>
	err = at_params_short_get(&m_param_list,
   29442:	462a      	mov	r2, r5
   29444:	7a21      	ldrb	r1, [r4, #8]
   29446:	4808      	ldr	r0, [pc, #32]	; (29468 <modem_info_short_get+0x60>)
   29448:	f016 fc8e 	bl	3fd68 <at_params_short_get>
	return sizeof(u16_t);
   2944c:	2800      	cmp	r0, #0
   2944e:	bf08      	it	eq
   29450:	2002      	moveq	r0, #2
}
   29452:	b021      	add	sp, #132	; 0x84
   29454:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   29456:	f06f 0015 	mvn.w	r0, #21
   2945a:	e7fa      	b.n	29452 <modem_info_short_get+0x4a>
		return -EIO;
   2945c:	f06f 0004 	mvn.w	r0, #4
   29460:	e7f7      	b.n	29452 <modem_info_short_get+0x4a>
   29462:	bf00      	nop
   29464:	0004232c 	.word	0x0004232c
   29468:	20023c74 	.word	0x20023c74

0002946c <modem_info_string_get>:
{
   2946c:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t len = 0;
   2946e:	2400      	movs	r4, #0
{
   29470:	460d      	mov	r5, r1
   29472:	b0a3      	sub	sp, #140	; 0x8c
   29474:	4607      	mov	r7, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   29476:	2280      	movs	r2, #128	; 0x80
   29478:	4621      	mov	r1, r4
   2947a:	a802      	add	r0, sp, #8
	size_t len = 0;
   2947c:	9401      	str	r4, [sp, #4]
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2947e:	f017 f8ed 	bl	4065c <memset>
	if (buf == NULL) {
   29482:	2d00      	cmp	r5, #0
   29484:	d074      	beq.n	29570 <modem_info_string_get+0x104>
	err = at_cmd_write(modem_data[info]->cmd,
   29486:	4b3d      	ldr	r3, [pc, #244]	; (2957c <modem_info_string_get+0x110>)
   29488:	2280      	movs	r2, #128	; 0x80
   2948a:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
   2948e:	a902      	add	r1, sp, #8
   29490:	4623      	mov	r3, r4
   29492:	6830      	ldr	r0, [r6, #0]
   29494:	f7fe fd54 	bl	27f40 <at_cmd_write>
	if (info == MODEM_INFO_SUP_BAND) {
   29498:	2f02      	cmp	r7, #2
   2949a:	d10b      	bne.n	294b4 <modem_info_string_get+0x48>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   2949c:	f10d 0111 	add.w	r1, sp, #17
   294a0:	4628      	mov	r0, r5
   294a2:	f017 fa90 	bl	409c6 <strcpy>
		return strlen(buf);
   294a6:	4628      	mov	r0, r5
   294a8:	f7f3 fe3c 	bl	1d124 <strlen>
   294ac:	4604      	mov	r4, r0
}
   294ae:	4620      	mov	r0, r4
   294b0:	b023      	add	sp, #140	; 0x8c
   294b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (err != 0) {
   294b4:	2800      	cmp	r0, #0
   294b6:	d15e      	bne.n	29576 <modem_info_string_get+0x10a>
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   294b8:	a902      	add	r1, sp, #8
   294ba:	f106 0009 	add.w	r0, r6, #9
   294be:	f7ff ff1f 	bl	29300 <modem_info_parse.isra.0>
	if (err) {
   294c2:	4604      	mov	r4, r0
   294c4:	b178      	cbz	r0, 294e6 <modem_info_string_get+0x7a>
		LOG_ERR("Unable to parse data: %d", err);
   294c6:	2301      	movs	r3, #1
   294c8:	f04f 0000 	mov.w	r0, #0
   294cc:	4a2c      	ldr	r2, [pc, #176]	; (29580 <modem_info_string_get+0x114>)
   294ce:	f363 0007 	bfi	r0, r3, #0, #8
   294d2:	4b2c      	ldr	r3, [pc, #176]	; (29584 <modem_info_string_get+0x118>)
   294d4:	492c      	ldr	r1, [pc, #176]	; (29588 <modem_info_string_get+0x11c>)
   294d6:	1a9b      	subs	r3, r3, r2
   294d8:	4622      	mov	r2, r4
   294da:	08db      	lsrs	r3, r3, #3
   294dc:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Unable to obtain short: %d", err);
   294e0:	f014 fd3f 	bl	3df62 <log_string_sync>
			return err;
   294e4:	e7e3      	b.n	294ae <modem_info_string_get+0x42>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   294e6:	7ab3      	ldrb	r3, [r6, #10]
   294e8:	2b01      	cmp	r3, #1
   294ea:	d12c      	bne.n	29546 <modem_info_string_get+0xda>
		err = at_params_short_get(&m_param_list,
   294ec:	f10d 0202 	add.w	r2, sp, #2
   294f0:	7a31      	ldrb	r1, [r6, #8]
   294f2:	4826      	ldr	r0, [pc, #152]	; (2958c <modem_info_string_get+0x120>)
   294f4:	f016 fc38 	bl	3fd68 <at_params_short_get>
		if (err) {
   294f8:	4604      	mov	r4, r0
   294fa:	b168      	cbz	r0, 29518 <modem_info_string_get+0xac>
			LOG_ERR("Unable to obtain short: %d", err);
   294fc:	2301      	movs	r3, #1
   294fe:	f04f 0000 	mov.w	r0, #0
   29502:	4a1f      	ldr	r2, [pc, #124]	; (29580 <modem_info_string_get+0x114>)
   29504:	f363 0007 	bfi	r0, r3, #0, #8
   29508:	4b1e      	ldr	r3, [pc, #120]	; (29584 <modem_info_string_get+0x118>)
   2950a:	4921      	ldr	r1, [pc, #132]	; (29590 <modem_info_string_get+0x124>)
   2950c:	1a9b      	subs	r3, r3, r2
   2950e:	08db      	lsrs	r3, r3, #3
   29510:	f363 108f 	bfi	r0, r3, #6, #10
   29514:	4622      	mov	r2, r4
   29516:	e7e3      	b.n	294e0 <modem_info_string_get+0x74>
		err = snprintf(buf, MODEM_INFO_MAX_RESPONSE_SIZE,
   29518:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   2951c:	4a1d      	ldr	r2, [pc, #116]	; (29594 <modem_info_string_get+0x128>)
   2951e:	2164      	movs	r1, #100	; 0x64
   29520:	4628      	mov	r0, r5
   29522:	f012 fe59 	bl	3c1d8 <sniprintf>
	if (info == MODEM_INFO_ICCID) {
   29526:	2f0e      	cmp	r7, #14
   29528:	d107      	bne.n	2953a <modem_info_string_get+0xce>
   2952a:	462c      	mov	r4, r5
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   2952c:	4628      	mov	r0, r5
   2952e:	f7f3 fdf9 	bl	1d124 <strlen>
   29532:	1ca3      	adds	r3, r4, #2
   29534:	1b64      	subs	r4, r4, r5
   29536:	42a0      	cmp	r0, r4
   29538:	d810      	bhi.n	2955c <modem_info_string_get+0xf0>
	return len <= 0 ? -ENOTSUP : len;
   2953a:	9c01      	ldr	r4, [sp, #4]
   2953c:	2c00      	cmp	r4, #0
   2953e:	bf08      	it	eq
   29540:	f06f 0485 	mvneq.w	r4, #133	; 0x85
   29544:	e7b3      	b.n	294ae <modem_info_string_get+0x42>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   29546:	2b03      	cmp	r3, #3
   29548:	d1ed      	bne.n	29526 <modem_info_string_get+0xba>
		len = MODEM_INFO_MAX_RESPONSE_SIZE;
   2954a:	2364      	movs	r3, #100	; 0x64
		err = at_params_string_get(&m_param_list,
   2954c:	462a      	mov	r2, r5
		len = MODEM_INFO_MAX_RESPONSE_SIZE;
   2954e:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&m_param_list,
   29550:	7a31      	ldrb	r1, [r6, #8]
   29552:	ab01      	add	r3, sp, #4
   29554:	480d      	ldr	r0, [pc, #52]	; (2958c <modem_info_string_get+0x120>)
   29556:	f016 fc34 	bl	3fdc2 <at_params_string_get>
   2955a:	e7e4      	b.n	29526 <modem_info_string_get+0xba>
		current_char = buf[i];
   2955c:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   29560:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   29564:	461c      	mov	r4, r3
		buf[i] = next_char;
   29566:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   2956a:	f803 2c01 	strb.w	r2, [r3, #-1]
   2956e:	e7dd      	b.n	2952c <modem_info_string_get+0xc0>
		return -EINVAL;
   29570:	f06f 0415 	mvn.w	r4, #21
   29574:	e79b      	b.n	294ae <modem_info_string_get+0x42>
		return -EIO;
   29576:	f06f 0404 	mvn.w	r4, #4
   2957a:	e798      	b.n	294ae <modem_info_string_get+0x42>
   2957c:	0004232c 	.word	0x0004232c
   29580:	00041c2c 	.word	0x00041c2c
   29584:	00041ccc 	.word	0x00041ccc
   29588:	00045bf0 	.word	0x00045bf0
   2958c:	20023c74 	.word	0x20023c74
   29590:	00045c09 	.word	0x00045c09
   29594:	00046b4a 	.word	0x00046b4a

00029598 <modem_info_rsrp_register>:

int modem_info_rsrp_register(rsrp_cb_t cb)
{
	modem_info_rsrp_cb = cb;
   29598:	4b12      	ldr	r3, [pc, #72]	; (295e4 <modem_info_rsrp_register+0x4c>)
{
   2959a:	b510      	push	{r4, lr}

	int rc = at_notif_register_handler(NULL,
   2959c:	4912      	ldr	r1, [pc, #72]	; (295e8 <modem_info_rsrp_register+0x50>)
	modem_info_rsrp_cb = cb;
   2959e:	6018      	str	r0, [r3, #0]
	int rc = at_notif_register_handler(NULL,
   295a0:	2000      	movs	r0, #0
   295a2:	f7fe fd7f 	bl	280a4 <at_notif_register_handler>
		modem_info_rsrp_subscribe_handler);
	if (rc != 0) {
   295a6:	4604      	mov	r4, r0
   295a8:	b180      	cbz	r0, 295cc <modem_info_rsrp_register+0x34>
		LOG_ERR("Can't register handler rc=%d", rc);
   295aa:	2301      	movs	r3, #1
   295ac:	f04f 0000 	mov.w	r0, #0
   295b0:	4a0e      	ldr	r2, [pc, #56]	; (295ec <modem_info_rsrp_register+0x54>)
   295b2:	f363 0007 	bfi	r0, r3, #0, #8
   295b6:	4b0e      	ldr	r3, [pc, #56]	; (295f0 <modem_info_rsrp_register+0x58>)
   295b8:	490e      	ldr	r1, [pc, #56]	; (295f4 <modem_info_rsrp_register+0x5c>)
   295ba:	1a9b      	subs	r3, r3, r2
   295bc:	08db      	lsrs	r3, r3, #3
   295be:	f363 108f 	bfi	r0, r3, #6, #10
   295c2:	4622      	mov	r2, r4
   295c4:	f014 fccd 	bl	3df62 <log_string_sync>
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
		return -EIO;
	}

	return 0;
}
   295c8:	4620      	mov	r0, r4
   295ca:	bd10      	pop	{r4, pc}
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
   295cc:	4603      	mov	r3, r0
   295ce:	4602      	mov	r2, r0
   295d0:	4601      	mov	r1, r0
   295d2:	4809      	ldr	r0, [pc, #36]	; (295f8 <modem_info_rsrp_register+0x60>)
   295d4:	f7fe fcb4 	bl	27f40 <at_cmd_write>
   295d8:	1e04      	subs	r4, r0, #0
		return -EIO;
   295da:	bf18      	it	ne
   295dc:	f06f 0404 	mvnne.w	r4, #4
   295e0:	e7f2      	b.n	295c8 <modem_info_rsrp_register+0x30>
   295e2:	bf00      	nop
   295e4:	20023c7c 	.word	0x20023c7c
   295e8:	0002932d 	.word	0x0002932d
   295ec:	00041c2c 	.word	0x00041c2c
   295f0:	00041ccc 	.word	0x00041ccc
   295f4:	00045ad9 	.word	0x00045ad9
   295f8:	00045b89 	.word	0x00045b89

000295fc <modem_info_init>:

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   295fc:	210a      	movs	r1, #10
   295fe:	4801      	ldr	r0, [pc, #4]	; (29604 <modem_info_init+0x8>)
   29600:	f016 bb07 	b.w	3fc12 <at_params_list_init>
   29604:	20023c74 	.word	0x20023c74

00029608 <modem_data_get>:

	return 0;
}

static int modem_data_get(struct lte_param *param)
{
   29608:	b538      	push	{r3, r4, r5, lr}
   2960a:	4605      	mov	r5, r0
	enum at_param_type data_type;
	int ret;

	data_type = modem_info_type_get(param->type);
   2960c:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
   29610:	f7ff fed8 	bl	293c4 <modem_info_type_get>

	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING) {
   29614:	2803      	cmp	r0, #3
   29616:	d11b      	bne.n	29650 <modem_data_get+0x48>
		ret = modem_info_string_get(param->type, param->value_string);
   29618:	1ca9      	adds	r1, r5, #2
   2961a:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   2961e:	f7ff ff25 	bl	2946c <modem_info_string_get>
		if (ret < 0) {
   29622:	1e04      	subs	r4, r0, #0
   29624:	db02      	blt.n	2962c <modem_data_get+0x24>
			LOG_ERR("Link data not obtained: %d", ret);
			return ret;
		}
	}

	return 0;
   29626:	2400      	movs	r4, #0
}
   29628:	4620      	mov	r0, r4
   2962a:	bd38      	pop	{r3, r4, r5, pc}
			LOG_ERR("Link data not obtained: %d %d", param->type, ret);
   2962c:	2301      	movs	r3, #1
   2962e:	f04f 0000 	mov.w	r0, #0
   29632:	4a14      	ldr	r2, [pc, #80]	; (29684 <modem_data_get+0x7c>)
   29634:	f363 0007 	bfi	r0, r3, #0, #8
   29638:	4b13      	ldr	r3, [pc, #76]	; (29688 <modem_data_get+0x80>)
   2963a:	4914      	ldr	r1, [pc, #80]	; (2968c <modem_data_get+0x84>)
   2963c:	1a9b      	subs	r3, r3, r2
   2963e:	08db      	lsrs	r3, r3, #3
   29640:	f363 108f 	bfi	r0, r3, #6, #10
   29644:	f895 206c 	ldrb.w	r2, [r5, #108]	; 0x6c
   29648:	4623      	mov	r3, r4
   2964a:	f014 fc8a 	bl	3df62 <log_string_sync>
			return ret;
   2964e:	e7eb      	b.n	29628 <modem_data_get+0x20>
	} else if (data_type == AT_PARAM_TYPE_NUM_SHORT) {
   29650:	2801      	cmp	r0, #1
   29652:	d1e8      	bne.n	29626 <modem_data_get+0x1e>
		ret = modem_info_short_get(param->type, &param->value);
   29654:	4629      	mov	r1, r5
   29656:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   2965a:	f7ff fed5 	bl	29408 <modem_info_short_get>
		if (ret < 0) {
   2965e:	1e04      	subs	r4, r0, #0
   29660:	dae1      	bge.n	29626 <modem_data_get+0x1e>
			LOG_ERR("Link data not obtained: %d", ret);
   29662:	2301      	movs	r3, #1
   29664:	f04f 0000 	mov.w	r0, #0
   29668:	4a06      	ldr	r2, [pc, #24]	; (29684 <modem_data_get+0x7c>)
   2966a:	f363 0007 	bfi	r0, r3, #0, #8
   2966e:	4b06      	ldr	r3, [pc, #24]	; (29688 <modem_data_get+0x80>)
   29670:	4907      	ldr	r1, [pc, #28]	; (29690 <modem_data_get+0x88>)
   29672:	1a9b      	subs	r3, r3, r2
   29674:	08db      	lsrs	r3, r3, #3
   29676:	f363 108f 	bfi	r0, r3, #6, #10
   2967a:	4622      	mov	r2, r4
   2967c:	f014 fc71 	bl	3df62 <log_string_sync>
			return ret;
   29680:	e7d2      	b.n	29628 <modem_data_get+0x20>
   29682:	bf00      	nop
   29684:	00041c2c 	.word	0x00041c2c
   29688:	00041cdc 	.word	0x00041cdc
   2968c:	00045d7e 	.word	0x00045d7e
   29690:	00045d9c 	.word	0x00045d9c

00029694 <modem_info_params_init>:
	if (modem == NULL) {
   29694:	2800      	cmp	r0, #0
   29696:	d043      	beq.n	29720 <modem_info_params_init+0x8c>
	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   29698:	2301      	movs	r3, #1
   2969a:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   2969e:	2302      	movs	r3, #2
   296a0:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   296a4:	2303      	movs	r3, #3
   296a6:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   296aa:	2305      	movs	r3, #5
   296ac:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   296b0:	2306      	movs	r3, #6
   296b2:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   296b6:	2307      	movs	r3, #7
   296b8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   296bc:	2308      	movs	r3, #8
   296be:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   296c2:	2309      	movs	r3, #9
   296c4:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   296c8:	2304      	movs	r3, #4
   296ca:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   296ce:	230f      	movs	r3, #15
   296d0:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   296d4:	2310      	movs	r3, #16
   296d6:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   296da:	2311      	movs	r3, #17
   296dc:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   296e0:	2314      	movs	r3, #20
   296e2:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   296e6:	230a      	movs	r3, #10
   296e8:	f880 3634 	strb.w	r3, [r0, #1588]	; 0x634
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   296ec:	230e      	movs	r3, #14
   296ee:	f880 36a4 	strb.w	r3, [r0, #1700]	; 0x6a4
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   296f2:	2312      	movs	r3, #18
   296f4:	f880 3714 	strb.w	r3, [r0, #1812]	; 0x714
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   296f8:	230d      	movs	r3, #13
   296fa:	f880 3784 	strb.w	r3, [r0, #1924]	; 0x784
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   296fe:	230b      	movs	r3, #11
   29700:	f880 37f4 	strb.w	r3, [r0, #2036]	; 0x7f4
	modem->device.imei.type			= MODEM_INFO_IMEI;
   29704:	2313      	movs	r3, #19
   29706:	f880 3864 	strb.w	r3, [r0, #2148]	; 0x864
	modem->device.board			= CONFIG_BOARD;
   2970a:	4b07      	ldr	r3, [pc, #28]	; (29728 <modem_info_params_init+0x94>)
   2970c:	f8c0 3868 	str.w	r3, [r0, #2152]	; 0x868
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   29710:	4b06      	ldr	r3, [pc, #24]	; (2972c <modem_info_params_init+0x98>)
   29712:	f8c0 386c 	str.w	r3, [r0, #2156]	; 0x86c
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   29716:	4b06      	ldr	r3, [pc, #24]	; (29730 <modem_info_params_init+0x9c>)
   29718:	f8c0 3870 	str.w	r3, [r0, #2160]	; 0x870
	return 0;
   2971c:	2000      	movs	r0, #0
   2971e:	4770      	bx	lr
		return -EINVAL;
   29720:	f06f 0015 	mvn.w	r0, #21
}
   29724:	4770      	bx	lr
   29726:	bf00      	nop
   29728:	00045e0c 	.word	0x00045e0c
   2972c:	00045e1d 	.word	0x00045e1d
   29730:	0004378a 	.word	0x0004378a

00029734 <modem_info_params_get>:

int modem_info_params_get(struct modem_param_info *modem)
{
   29734:	b570      	push	{r4, r5, r6, lr}
	int ret;

	if (modem == NULL) {
   29736:	4604      	mov	r4, r0
   29738:	2800      	cmp	r0, #0
   2973a:	f000 80b9 	beq.w	298b0 <modem_info_params_get+0x17c>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK)) {
		ret = modem_data_get(&modem->network.current_band);
   2973e:	f7ff ff63 	bl	29608 <modem_data_get>
   29742:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->network.sup_band);
   29744:	f104 0070 	add.w	r0, r4, #112	; 0x70
   29748:	f7ff ff5e 	bl	29608 <modem_data_get>
   2974c:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ip_address);
   2974e:	f504 7044 	add.w	r0, r4, #784	; 0x310
   29752:	f7ff ff59 	bl	29608 <modem_data_get>
   29756:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ue_mode);
   29758:	f504 7060 	add.w	r0, r4, #896	; 0x380
   2975c:	f7ff ff54 	bl	29608 <modem_data_get>
   29760:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.current_operator);
   29762:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   29766:	f7ff ff4f 	bl	29608 <modem_data_get>
   2976a:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.cellid_hex);
   2976c:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
   29770:	f7ff ff4a 	bl	29608 <modem_data_get>
   29774:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.area_code);
   29776:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   2977a:	f7ff ff45 	bl	29608 <modem_data_get>
   2977e:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.lte_mode);
   29780:	f504 707c 	add.w	r0, r4, #1008	; 0x3f0
   29784:	f7ff ff40 	bl	29608 <modem_data_get>
   29788:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.nbiot_mode);
   2978a:	f504 608c 	add.w	r0, r4, #1120	; 0x460
   2978e:	f7ff ff3b 	bl	29608 <modem_data_get>
   29792:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.gps_mode);
   29794:	f504 609a 	add.w	r0, r4, #1232	; 0x4d0
   29798:	f7ff ff36 	bl	29608 <modem_data_get>
   2979c:	4405      	add	r5, r0

		if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DATE_TIME)) {
			ret += modem_data_get(&modem->network.date_time);
   2979e:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
   297a2:	f7ff ff31 	bl	29608 <modem_data_get>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   297a6:	f8b4 2152 	ldrh.w	r2, [r4, #338]	; 0x152
   297aa:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   297ae:	4405      	add	r5, r0
	memcpy(mcc->value_string, current_operator->value_string, 3);
   297b0:	f504 70e1 	add.w	r0, r4, #450	; 0x1c2
   297b4:	f8a4 21c2 	strh.w	r2, [r4, #450]	; 0x1c2
   297b8:	7083      	strb	r3, [r0, #2]
   297ba:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
   297be:	f8b4 2155 	ldrh.w	r2, [r4, #341]	; 0x155
   297c2:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
   297c6:	f8a4 2232 	strh.w	r2, [r4, #562]	; 0x232
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   297ca:	2100      	movs	r1, #0
   297cc:	220a      	movs	r2, #10
   297ce:	f012 fde5 	bl	3c39c <strtol>
		memcpy(&mnc->value_string, &current_operator->value_string[3], 3);
   297d2:	f204 2632 	addw	r6, r4, #562	; 0x232
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   297d6:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   297da:	220a      	movs	r2, #10
   297dc:	2100      	movs	r1, #0
   297de:	4630      	mov	r0, r6
   297e0:	f012 fddc 	bl	3c39c <strtol>
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   297e4:	2210      	movs	r2, #16
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   297e6:	f8a4 0230 	strh.w	r0, [r4, #560]	; 0x230
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   297ea:	2100      	movs	r1, #0
   297ec:	f204 20a2 	addw	r0, r4, #674	; 0x2a2
   297f0:	f012 fdd4 	bl	3c39c <strtol>
   297f4:	f7f2 ff76 	bl	1c6e4 <__aeabi_i2d>
   297f8:	f504 66b6 	add.w	r6, r4, #1456	; 0x5b0
   297fc:	e9c6 0100 	strd	r0, r1, [r6]
	area_code->value_string[4] = '\0';
   29800:	2100      	movs	r1, #0
	area_code->value = strtol(area_code->value_string, NULL, 16);
   29802:	2210      	movs	r2, #16
	area_code->value_string[4] = '\0';
   29804:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	area_code->value = strtol(area_code->value_string, NULL, 16);
   29808:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
   2980c:	f012 fdc6 	bl	3c39c <strtol>
   29810:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
				&modem->network.mcc,
				&modem->network.mnc);
		ret += cellid_to_dec(&modem->network.cellid_hex,
				&modem->network.cellid_dec);
		ret += area_code_parse(&modem->network.area_code);
		if (ret) {
   29814:	b195      	cbz	r5, 2983c <modem_info_params_get+0x108>
			LOG_ERR("Network data not obtained: %d", ret);
   29816:	2301      	movs	r3, #1
   29818:	f04f 0000 	mov.w	r0, #0
   2981c:	4a26      	ldr	r2, [pc, #152]	; (298b8 <modem_info_params_get+0x184>)
   2981e:	f363 0007 	bfi	r0, r3, #0, #8
   29822:	4b26      	ldr	r3, [pc, #152]	; (298bc <modem_info_params_get+0x188>)
   29824:	4926      	ldr	r1, [pc, #152]	; (298c0 <modem_info_params_get+0x18c>)
   29826:	1a9b      	subs	r3, r3, r2
   29828:	462a      	mov	r2, r5
   2982a:	08db      	lsrs	r3, r3, #3
   2982c:	f363 108f 	bfi	r0, r3, #6, #10
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE)) {
		ret = modem_data_get(&modem->device.modem_fw);
		ret += modem_data_get(&modem->device.battery);
		ret += modem_data_get(&modem->device.imei);
		if (ret) {
			LOG_ERR("Device data not obtained: %d", ret);
   29830:	f014 fb97 	bl	3df62 <log_string_sync>
			return -EAGAIN;
   29834:	f06f 020a 	mvn.w	r2, #10
		}
	}

	return 0;
}
   29838:	4610      	mov	r0, r2
   2983a:	bd70      	pop	{r4, r5, r6, pc}
		ret = modem_data_get(&modem->sim.uicc);
   2983c:	f504 60b9 	add.w	r0, r4, #1480	; 0x5c8
   29840:	f7ff fee2 	bl	29608 <modem_data_get>
   29844:	4605      	mov	r5, r0
			ret += modem_data_get(&modem->sim.iccid);
   29846:	f504 60c7 	add.w	r0, r4, #1592	; 0x638
   2984a:	f7ff fedd 	bl	29608 <modem_data_get>
   2984e:	4405      	add	r5, r0
			ret += modem_data_get(&modem->sim.imsi);
   29850:	f504 60d5 	add.w	r0, r4, #1704	; 0x6a8
   29854:	f7ff fed8 	bl	29608 <modem_data_get>
		if (ret) {
   29858:	182a      	adds	r2, r5, r0
   2985a:	d00c      	beq.n	29876 <modem_info_params_get+0x142>
			LOG_ERR("Sim data not obtained: %d", ret);
   2985c:	2301      	movs	r3, #1
   2985e:	f04f 0000 	mov.w	r0, #0
   29862:	4915      	ldr	r1, [pc, #84]	; (298b8 <modem_info_params_get+0x184>)
   29864:	f363 0007 	bfi	r0, r3, #0, #8
   29868:	4b14      	ldr	r3, [pc, #80]	; (298bc <modem_info_params_get+0x188>)
   2986a:	1a5b      	subs	r3, r3, r1
   2986c:	08db      	lsrs	r3, r3, #3
   2986e:	f363 108f 	bfi	r0, r3, #6, #10
   29872:	4914      	ldr	r1, [pc, #80]	; (298c4 <modem_info_params_get+0x190>)
   29874:	e7dc      	b.n	29830 <modem_info_params_get+0xfc>
		ret = modem_data_get(&modem->device.modem_fw);
   29876:	f504 60e3 	add.w	r0, r4, #1816	; 0x718
   2987a:	f7ff fec5 	bl	29608 <modem_data_get>
   2987e:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->device.battery);
   29880:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
   29884:	f7ff fec0 	bl	29608 <modem_data_get>
   29888:	4405      	add	r5, r0
		ret += modem_data_get(&modem->device.imei);
   2988a:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
   2988e:	f7ff febb 	bl	29608 <modem_data_get>
		if (ret) {
   29892:	182a      	adds	r2, r5, r0
   29894:	d0d0      	beq.n	29838 <modem_info_params_get+0x104>
			LOG_ERR("Device data not obtained: %d", ret);
   29896:	2301      	movs	r3, #1
   29898:	f04f 0000 	mov.w	r0, #0
   2989c:	4906      	ldr	r1, [pc, #24]	; (298b8 <modem_info_params_get+0x184>)
   2989e:	f363 0007 	bfi	r0, r3, #0, #8
   298a2:	4b06      	ldr	r3, [pc, #24]	; (298bc <modem_info_params_get+0x188>)
   298a4:	1a5b      	subs	r3, r3, r1
   298a6:	08db      	lsrs	r3, r3, #3
   298a8:	f363 108f 	bfi	r0, r3, #6, #10
   298ac:	4906      	ldr	r1, [pc, #24]	; (298c8 <modem_info_params_get+0x194>)
   298ae:	e7bf      	b.n	29830 <modem_info_params_get+0xfc>
		return -EINVAL;
   298b0:	f06f 0215 	mvn.w	r2, #21
   298b4:	e7c0      	b.n	29838 <modem_info_params_get+0x104>
   298b6:	bf00      	nop
   298b8:	00041c2c 	.word	0x00041c2c
   298bc:	00041cdc 	.word	0x00041cdc
   298c0:	00045db7 	.word	0x00045db7
   298c4:	00045dd5 	.word	0x00045dd5
   298c8:	00045def 	.word	0x00045def

000298cc <network_data_add>:

	return total_len;
}

static int network_data_add(struct network_param *network, cJSON *json_obj)
{
   298cc:	b570      	push	{r4, r5, r6, lr}
   298ce:	460e      	mov	r6, r1
   298d0:	b09a      	sub	sp, #104	; 0x68

	static const char lte_string[]	 = "LTE-M";
	static const char nbiot_string[] = "NB-IoT";
	static const char gps_string[]	 = " GPS";

	if (network == NULL || json_obj == NULL) {
   298d2:	4605      	mov	r5, r0
   298d4:	2800      	cmp	r0, #0
   298d6:	d065      	beq.n	299a4 <network_data_add+0xd8>
   298d8:	2900      	cmp	r1, #0
   298da:	d063      	beq.n	299a4 <network_data_add+0xd8>
		return -EINVAL;
	}

	total_len = json_add_data(&network->current_band, json_obj);
   298dc:	f016 fae2 	bl	3fea4 <json_add_data>
	total_len += json_add_data(&network->sup_band, json_obj);
   298e0:	4631      	mov	r1, r6
	total_len = json_add_data(&network->current_band, json_obj);
   298e2:	4604      	mov	r4, r0
	total_len += json_add_data(&network->sup_band, json_obj);
   298e4:	f105 0070 	add.w	r0, r5, #112	; 0x70
   298e8:	f016 fadc 	bl	3fea4 <json_add_data>
	total_len += json_add_data(&network->area_code, json_obj);
   298ec:	4631      	mov	r1, r6
	total_len += json_add_data(&network->sup_band, json_obj);
   298ee:	4404      	add	r4, r0
	total_len += json_add_data(&network->area_code, json_obj);
   298f0:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   298f4:	f016 fad6 	bl	3fea4 <json_add_data>
	total_len += json_add_data(&network->current_operator, json_obj);
   298f8:	4631      	mov	r1, r6
	total_len += json_add_data(&network->area_code, json_obj);
   298fa:	4404      	add	r4, r0
	total_len += json_add_data(&network->current_operator, json_obj);
   298fc:	f505 70a8 	add.w	r0, r5, #336	; 0x150
   29900:	f016 fad0 	bl	3fea4 <json_add_data>
	total_len += json_add_data(&network->ip_address, json_obj);
   29904:	4631      	mov	r1, r6
	total_len += json_add_data(&network->current_operator, json_obj);
   29906:	4404      	add	r4, r0
	total_len += json_add_data(&network->ip_address, json_obj);
   29908:	f505 7044 	add.w	r0, r5, #784	; 0x310
   2990c:	f016 faca 	bl	3fea4 <json_add_data>
	total_len += json_add_data(&network->ue_mode, json_obj);
   29910:	4631      	mov	r1, r6
	total_len += json_add_data(&network->ip_address, json_obj);
   29912:	4404      	add	r4, r0
	total_len += json_add_data(&network->ue_mode, json_obj);
   29914:	f505 7060 	add.w	r0, r5, #896	; 0x380
   29918:	f016 fac4 	bl	3fea4 <json_add_data>

	len = modem_info_name_get(network->cellid_hex.type, data_name);
   2991c:	a901      	add	r1, sp, #4
	total_len += json_add_data(&network->ue_mode, json_obj);
   2991e:	4404      	add	r4, r0
	len = modem_info_name_get(network->cellid_hex.type, data_name);
   29920:	f895 030c 	ldrb.w	r0, [r5, #780]	; 0x30c
   29924:	f7ff fd58 	bl	293d8 <modem_info_name_get>
	data_name[len] =  '\0';
   29928:	ab1a      	add	r3, sp, #104	; 0x68
   2992a:	4418      	add	r0, r3
   2992c:	2300      	movs	r3, #0
   2992e:	f800 3c64 	strb.w	r3, [r0, #-100]
	ret = json_add_num(json_obj, data_name, network->cellid_dec);
   29932:	f505 63b6 	add.w	r3, r5, #1456	; 0x5b0
	json_num = cJSON_CreateNumber(num);
   29936:	ed93 0b00 	vldr	d0, [r3]
   2993a:	f7f3 ff65 	bl	1d808 <cJSON_CreateNumber>
	if (json_num == NULL) {
   2993e:	4602      	mov	r2, r0
   29940:	b120      	cbz	r0, 2994c <network_data_add+0x80>
	cJSON_AddItemToObject(parent, str, item);
   29942:	a901      	add	r1, sp, #4
   29944:	4630      	mov	r0, r6
   29946:	f015 fcc9 	bl	3f2dc <cJSON_AddItemToObject>

	if (ret) {
		LOG_DBG("Unable to add the cell ID.");
	} else {
		total_len += sizeof(double);
   2994a:	3408      	adds	r4, #8
	}

	if (network->lte_mode.value == 1) {
   2994c:	f8b5 33f0 	ldrh.w	r3, [r5, #1008]	; 0x3f0
   29950:	f505 62b7 	add.w	r2, r5, #1464	; 0x5b8
   29954:	2b01      	cmp	r3, #1
   29956:	d11a      	bne.n	2998e <network_data_add+0xc2>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
   29958:	4610      	mov	r0, r2
   2995a:	4914      	ldr	r1, [pc, #80]	; (299ac <network_data_add+0xe0>)
   2995c:	f017 f816 	bl	4098c <strcat>
   29960:	4602      	mov	r2, r0
		strcat(network->network_mode, lte_string);
		total_len += sizeof(lte_string);
   29962:	3406      	adds	r4, #6
	} else if (network->nbiot_mode.value == 1) {
		strcat(network->network_mode, nbiot_string);
		total_len += sizeof(nbiot_string);
	}

	if (network->gps_mode.value == 1) {
   29964:	f8b5 34d0 	ldrh.w	r3, [r5, #1232]	; 0x4d0
   29968:	2b01      	cmp	r3, #1
   2996a:	d105      	bne.n	29978 <network_data_add+0xac>
   2996c:	4610      	mov	r0, r2
   2996e:	4910      	ldr	r1, [pc, #64]	; (299b0 <network_data_add+0xe4>)
   29970:	f017 f80c 	bl	4098c <strcat>
   29974:	4602      	mov	r2, r0
		strcat(network->network_mode, gps_string);
		total_len += sizeof(gps_string);
   29976:	3405      	adds	r4, #5
	}

	ret = json_add_str(json_obj, "networkMode", network->network_mode);
   29978:	490e      	ldr	r1, [pc, #56]	; (299b4 <network_data_add+0xe8>)
   2997a:	4630      	mov	r0, r6
   2997c:	f016 fa7c 	bl	3fe78 <json_add_str>

	if (ret) {
   29980:	b110      	cbz	r0, 29988 <network_data_add+0xbc>
		printk("Unable to add the network mode");
   29982:	480d      	ldr	r0, [pc, #52]	; (299b8 <network_data_add+0xec>)
   29984:	f014 fa89 	bl	3de9a <printk>
	}

	return total_len;
}
   29988:	4620      	mov	r0, r4
   2998a:	b01a      	add	sp, #104	; 0x68
   2998c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (network->nbiot_mode.value == 1) {
   2998e:	f8b5 3460 	ldrh.w	r3, [r5, #1120]	; 0x460
   29992:	2b01      	cmp	r3, #1
   29994:	d1e6      	bne.n	29964 <network_data_add+0x98>
   29996:	4610      	mov	r0, r2
   29998:	4908      	ldr	r1, [pc, #32]	; (299bc <network_data_add+0xf0>)
   2999a:	f016 fff7 	bl	4098c <strcat>
		total_len += sizeof(nbiot_string);
   2999e:	3407      	adds	r4, #7
   299a0:	4602      	mov	r2, r0
   299a2:	e7df      	b.n	29964 <network_data_add+0x98>
		return -EINVAL;
   299a4:	f06f 0415 	mvn.w	r4, #21
   299a8:	e7ee      	b.n	29988 <network_data_add+0xbc>
   299aa:	bf00      	nop
   299ac:	00045e66 	.word	0x00045e66
   299b0:	00045e61 	.word	0x00045e61
   299b4:	00045e92 	.word	0x00045e92
   299b8:	00045e9e 	.word	0x00045e9e
   299bc:	00045e8b 	.word	0x00045e8b

000299c0 <device_data_add>:

	return total_len;
}

static int device_data_add(struct device_param *device, cJSON *json_obj)
{
   299c0:	b570      	push	{r4, r5, r6, lr}
   299c2:	460d      	mov	r5, r1
	int total_len;

	if (device == NULL || json_obj == NULL) {
   299c4:	4606      	mov	r6, r0
   299c6:	b328      	cbz	r0, 29a14 <device_data_add+0x54>
   299c8:	b321      	cbz	r1, 29a14 <device_data_add+0x54>
		return -EINVAL;
	}

	total_len = json_add_data(&device->modem_fw, json_obj);
   299ca:	f016 fa6b 	bl	3fea4 <json_add_data>
	total_len += json_add_data(&device->battery, json_obj);
   299ce:	4629      	mov	r1, r5
	total_len = json_add_data(&device->modem_fw, json_obj);
   299d0:	4604      	mov	r4, r0
	total_len += json_add_data(&device->battery, json_obj);
   299d2:	f106 0070 	add.w	r0, r6, #112	; 0x70
   299d6:	f016 fa65 	bl	3fea4 <json_add_data>
	total_len += json_add_data(&device->imei, json_obj);
   299da:	4629      	mov	r1, r5
	total_len += json_add_data(&device->battery, json_obj);
   299dc:	4404      	add	r4, r0
	total_len += json_add_data(&device->imei, json_obj);
   299de:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   299e2:	f016 fa5f 	bl	3fea4 <json_add_data>
	total_len += json_add_str(json_obj, "board", device->board);
   299e6:	f8d6 2150 	ldr.w	r2, [r6, #336]	; 0x150
	total_len += json_add_data(&device->imei, json_obj);
   299ea:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "board", device->board);
   299ec:	490b      	ldr	r1, [pc, #44]	; (29a1c <device_data_add+0x5c>)
   299ee:	4628      	mov	r0, r5
   299f0:	f016 fa42 	bl	3fe78 <json_add_str>
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   299f4:	f8d6 2154 	ldr.w	r2, [r6, #340]	; 0x154
	total_len += json_add_str(json_obj, "board", device->board);
   299f8:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   299fa:	4909      	ldr	r1, [pc, #36]	; (29a20 <device_data_add+0x60>)
   299fc:	4628      	mov	r0, r5
   299fe:	f016 fa3b 	bl	3fe78 <json_add_str>
	total_len += json_add_str(json_obj, "appName", device->app_name);
   29a02:	f8d6 2158 	ldr.w	r2, [r6, #344]	; 0x158
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   29a06:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "appName", device->app_name);
   29a08:	4906      	ldr	r1, [pc, #24]	; (29a24 <device_data_add+0x64>)
   29a0a:	4628      	mov	r0, r5
   29a0c:	f016 fa34 	bl	3fe78 <json_add_str>
   29a10:	4420      	add	r0, r4

	return total_len;
}
   29a12:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   29a14:	f06f 0015 	mvn.w	r0, #21
   29a18:	e7fb      	b.n	29a12 <device_data_add+0x52>
   29a1a:	bf00      	nop
   29a1c:	00045e48 	.word	0x00045e48
   29a20:	00045e4e 	.word	0x00045e4e
   29a24:	00045e59 	.word	0x00045e59

00029a28 <modem_info_json_object_encode>:

int modem_info_json_object_encode(struct modem_param_info *modem,
				  cJSON *root_obj)
{
   29a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29a2c:	4681      	mov	r9, r0
	if (root_obj == NULL || modem == NULL) {
   29a2e:	460d      	mov	r5, r1
   29a30:	2900      	cmp	r1, #0
   29a32:	d04f      	beq.n	29ad4 <modem_info_json_object_encode+0xac>
   29a34:	2800      	cmp	r0, #0
   29a36:	d04d      	beq.n	29ad4 <modem_info_json_object_encode+0xac>
		return -EINVAL;
	}

	int obj_count = cJSON_GetArraySize(root_obj);
   29a38:	4608      	mov	r0, r1
   29a3a:	f015 fc38 	bl	3f2ae <cJSON_GetArraySize>
   29a3e:	4604      	mov	r4, r0

	cJSON *network_obj	= cJSON_CreateObject();
   29a40:	f7fd fa04 	bl	26e4c <cJSON_CreateObject>
   29a44:	4680      	mov	r8, r0
	cJSON *sim_obj		= cJSON_CreateObject();
   29a46:	f7fd fa01 	bl	26e4c <cJSON_CreateObject>
   29a4a:	4607      	mov	r7, r0
	cJSON *device_obj	= cJSON_CreateObject();
   29a4c:	f7fd f9fe 	bl	26e4c <cJSON_CreateObject>
   29a50:	4606      	mov	r6, r0

	if (network_obj == NULL || sim_obj == NULL || device_obj == NULL) {
   29a52:	f1b8 0f00 	cmp.w	r8, #0
   29a56:	d03a      	beq.n	29ace <modem_info_json_object_encode+0xa6>
   29a58:	b3cf      	cbz	r7, 29ace <modem_info_json_object_encode+0xa6>
   29a5a:	b3c0      	cbz	r0, 29ace <modem_info_json_object_encode+0xa6>
		obj_count = -ENOMEM;
		goto delete_object;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
	    (network_data_add(&modem->network, network_obj) > 0)) {
   29a5c:	4641      	mov	r1, r8
   29a5e:	4648      	mov	r0, r9
   29a60:	f7ff ff34 	bl	298cc <network_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
   29a64:	2800      	cmp	r0, #0
   29a66:	dd06      	ble.n	29a76 <modem_info_json_object_encode+0x4e>
	cJSON_AddItemToObject(parent, str, item);
   29a68:	4642      	mov	r2, r8
   29a6a:	491c      	ldr	r1, [pc, #112]	; (29adc <modem_info_json_object_encode+0xb4>)
   29a6c:	4628      	mov	r0, r5
   29a6e:	f015 fc35 	bl	3f2dc <cJSON_AddItemToObject>

		json_add_obj(root_obj, "networkInfo", network_obj);
		network_obj = NULL;
   29a72:	f04f 0800 	mov.w	r8, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
	    (sim_data_add(&modem->sim, sim_obj) > 0)) {
   29a76:	4639      	mov	r1, r7
   29a78:	f509 60b9 	add.w	r0, r9, #1480	; 0x5c8
   29a7c:	f016 fa56 	bl	3ff2c <sim_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
   29a80:	2800      	cmp	r0, #0
   29a82:	dd05      	ble.n	29a90 <modem_info_json_object_encode+0x68>
	cJSON_AddItemToObject(parent, str, item);
   29a84:	463a      	mov	r2, r7
   29a86:	4916      	ldr	r1, [pc, #88]	; (29ae0 <modem_info_json_object_encode+0xb8>)
   29a88:	4628      	mov	r0, r5
   29a8a:	f015 fc27 	bl	3f2dc <cJSON_AddItemToObject>

		json_add_obj(root_obj, "simInfo", sim_obj);
		sim_obj = NULL;
   29a8e:	2700      	movs	r7, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
	    (device_data_add(&modem->device, device_obj) > 0)) {
   29a90:	4631      	mov	r1, r6
   29a92:	f509 60e3 	add.w	r0, r9, #1816	; 0x718
   29a96:	f7ff ff93 	bl	299c0 <device_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
   29a9a:	2800      	cmp	r0, #0
   29a9c:	dd05      	ble.n	29aaa <modem_info_json_object_encode+0x82>
	cJSON_AddItemToObject(parent, str, item);
   29a9e:	4632      	mov	r2, r6
   29aa0:	4910      	ldr	r1, [pc, #64]	; (29ae4 <modem_info_json_object_encode+0xbc>)
   29aa2:	4628      	mov	r0, r5
   29aa4:	f015 fc1a 	bl	3f2dc <cJSON_AddItemToObject>

		json_add_obj(root_obj, "deviceInfo", device_obj);
		device_obj = NULL;
   29aa8:	2600      	movs	r6, #0
	}

delete_object:
	cJSON_Delete(network_obj);
   29aaa:	4640      	mov	r0, r8
   29aac:	f7fd f90a 	bl	26cc4 <cJSON_Delete>
	cJSON_Delete(sim_obj);
   29ab0:	4638      	mov	r0, r7
   29ab2:	f7fd f907 	bl	26cc4 <cJSON_Delete>
	cJSON_Delete(device_obj);
   29ab6:	4630      	mov	r0, r6
   29ab8:	f7fd f904 	bl	26cc4 <cJSON_Delete>

	if (obj_count >= 0) {
   29abc:	2c00      	cmp	r4, #0
   29abe:	db03      	blt.n	29ac8 <modem_info_json_object_encode+0xa0>
		obj_count = cJSON_GetArraySize(root_obj) - obj_count;
   29ac0:	4628      	mov	r0, r5
   29ac2:	f015 fbf4 	bl	3f2ae <cJSON_GetArraySize>
   29ac6:	1b04      	subs	r4, r0, r4
	}

	return obj_count;
}
   29ac8:	4620      	mov	r0, r4
   29aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		obj_count = -ENOMEM;
   29ace:	f06f 040b 	mvn.w	r4, #11
   29ad2:	e7ea      	b.n	29aaa <modem_info_json_object_encode+0x82>
		return -EINVAL;
   29ad4:	f06f 0415 	mvn.w	r4, #21
   29ad8:	e7f6      	b.n	29ac8 <modem_info_json_object_encode+0xa0>
   29ada:	bf00      	nop
   29adc:	00045e6c 	.word	0x00045e6c
   29ae0:	00045e78 	.word	0x00045e78
   29ae4:	00045e80 	.word	0x00045e80

00029ae8 <cloud_get_binding>:

extern struct cloud_backend __cloud_backends_start[0];
extern struct cloud_backend __cloud_backends_end[0];

struct cloud_backend *cloud_get_binding(const char *name)
{
   29ae8:	b570      	push	{r4, r5, r6, lr}
   29aea:	4606      	mov	r6, r0
	struct cloud_backend *info;

	for (info = __cloud_backends_start; info != __cloud_backends_end;
   29aec:	4c09      	ldr	r4, [pc, #36]	; (29b14 <cloud_get_binding+0x2c>)
   29aee:	4d0a      	ldr	r5, [pc, #40]	; (29b18 <cloud_get_binding+0x30>)
   29af0:	42ac      	cmp	r4, r5
   29af2:	d101      	bne.n	29af8 <cloud_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   29af4:	2400      	movs	r4, #0
   29af6:	e00a      	b.n	29b0e <cloud_get_binding+0x26>
		if (info->api == NULL) {
   29af8:	6823      	ldr	r3, [r4, #0]
   29afa:	b90b      	cbnz	r3, 29b00 <cloud_get_binding+0x18>
	     info++) {
   29afc:	3408      	adds	r4, #8
   29afe:	e7f7      	b.n	29af0 <cloud_get_binding+0x8>
		if (strcmp(name, info->config->name) == 0) {
   29b00:	6863      	ldr	r3, [r4, #4]
   29b02:	4630      	mov	r0, r6
   29b04:	6819      	ldr	r1, [r3, #0]
   29b06:	f7f3 fb03 	bl	1d110 <strcmp>
   29b0a:	2800      	cmp	r0, #0
   29b0c:	d1f6      	bne.n	29afc <cloud_get_binding+0x14>
}
   29b0e:	4620      	mov	r0, r4
   29b10:	bd70      	pop	{r4, r5, r6, pc}
   29b12:	bf00      	nop
   29b14:	00049cfc 	.word	0x00049cfc
   29b18:	00049d04 	.word	0x00049d04

00029b1c <uninit>:

	return nrf_cloud_init(&params);
}

static int uninit(const struct cloud_backend *const backend)
{
   29b1c:	b508      	push	{r3, lr}
	LOG_INF("uninit() is not implemented");
   29b1e:	f04f 0000 	mov.w	r0, #0
   29b22:	2303      	movs	r3, #3
   29b24:	4a06      	ldr	r2, [pc, #24]	; (29b40 <uninit+0x24>)
   29b26:	f363 0007 	bfi	r0, r3, #0, #8
   29b2a:	4b06      	ldr	r3, [pc, #24]	; (29b44 <uninit+0x28>)
   29b2c:	4906      	ldr	r1, [pc, #24]	; (29b48 <uninit+0x2c>)
   29b2e:	1a9b      	subs	r3, r3, r2
   29b30:	08db      	lsrs	r3, r3, #3
   29b32:	f363 108f 	bfi	r0, r3, #6, #10
   29b36:	f014 fa14 	bl	3df62 <log_string_sync>

	return 0;
}
   29b3a:	2000      	movs	r0, #0
   29b3c:	bd08      	pop	{r3, pc}
   29b3e:	bf00      	nop
   29b40:	00041c2c 	.word	0x00041c2c
   29b44:	00041d04 	.word	0x00041d04
   29b48:	00046103 	.word	0x00046103

00029b4c <event_handler>:
{
   29b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   29b4e:	4606      	mov	r6, r0
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   29b50:	4c64      	ldr	r4, [pc, #400]	; (29ce4 <event_handler+0x198>)
{
   29b52:	b089      	sub	sp, #36	; 0x24
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   29b54:	6823      	ldr	r3, [r4, #0]
	struct cloud_event evt = { 0 };
   29b56:	221c      	movs	r2, #28
   29b58:	2100      	movs	r1, #0
   29b5a:	a801      	add	r0, sp, #4
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   29b5c:	685d      	ldr	r5, [r3, #4]
	struct cloud_event evt = { 0 };
   29b5e:	f016 fd7d 	bl	4065c <memset>
	switch (nrf_cloud_evt->type) {
   29b62:	7837      	ldrb	r7, [r6, #0]
   29b64:	4a60      	ldr	r2, [pc, #384]	; (29ce8 <event_handler+0x19c>)
   29b66:	4b61      	ldr	r3, [pc, #388]	; (29cec <event_handler+0x1a0>)
   29b68:	2f05      	cmp	r7, #5
   29b6a:	eba2 0203 	sub.w	r2, r2, r3
   29b6e:	f3c2 02c9 	ubfx	r2, r2, #3, #10
   29b72:	d07c      	beq.n	29c6e <event_handler+0x122>
   29b74:	d822      	bhi.n	29bbc <event_handler+0x70>
   29b76:	2f02      	cmp	r7, #2
   29b78:	d05f      	beq.n	29c3a <event_handler+0xee>
   29b7a:	d80e      	bhi.n	29b9a <event_handler+0x4e>
   29b7c:	2f01      	cmp	r7, #1
   29b7e:	d04b      	beq.n	29c18 <event_handler+0xcc>
		LOG_DBG("Unknown event type: %d", nrf_cloud_evt->type);
   29b80:	2304      	movs	r3, #4
   29b82:	f04f 0000 	mov.w	r0, #0
   29b86:	f363 0007 	bfi	r0, r3, #0, #8
   29b8a:	f362 108f 	bfi	r0, r2, #6, #10
   29b8e:	463b      	mov	r3, r7
   29b90:	4a57      	ldr	r2, [pc, #348]	; (29cf0 <event_handler+0x1a4>)
   29b92:	4958      	ldr	r1, [pc, #352]	; (29cf4 <event_handler+0x1a8>)
   29b94:	f014 f9e5 	bl	3df62 <log_string_sync>
}
   29b98:	e074      	b.n	29c84 <event_handler+0x138>
	switch (nrf_cloud_evt->type) {
   29b9a:	2f03      	cmp	r7, #3
   29b9c:	d05a      	beq.n	29c54 <event_handler+0x108>
   29b9e:	2f04      	cmp	r7, #4
   29ba0:	d1ee      	bne.n	29b80 <event_handler+0x34>
		LOG_DBG("NRF_CLOUD_EVT_READY");
   29ba2:	2304      	movs	r3, #4
   29ba4:	f04f 0000 	mov.w	r0, #0
   29ba8:	f363 0007 	bfi	r0, r3, #0, #8
   29bac:	f362 108f 	bfi	r0, r2, #6, #10
   29bb0:	4951      	ldr	r1, [pc, #324]	; (29cf8 <event_handler+0x1ac>)
   29bb2:	4a4f      	ldr	r2, [pc, #316]	; (29cf0 <event_handler+0x1a4>)
   29bb4:	f014 f9d5 	bl	3df62 <log_string_sync>
		evt.type = CLOUD_EVT_READY;
   29bb8:	2302      	movs	r3, #2
   29bba:	e039      	b.n	29c30 <event_handler+0xe4>
	switch (nrf_cloud_evt->type) {
   29bbc:	2f08      	cmp	r7, #8
   29bbe:	d063      	beq.n	29c88 <event_handler+0x13c>
   29bc0:	d818      	bhi.n	29bf4 <event_handler+0xa8>
   29bc2:	2f06      	cmp	r7, #6
   29bc4:	d06d      	beq.n	29ca2 <event_handler+0x156>
   29bc6:	2f07      	cmp	r7, #7
   29bc8:	d1da      	bne.n	29b80 <event_handler+0x34>
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_DATA_ACK");
   29bca:	2304      	movs	r3, #4
   29bcc:	f04f 0000 	mov.w	r0, #0
   29bd0:	f363 0007 	bfi	r0, r3, #0, #8
   29bd4:	f362 108f 	bfi	r0, r2, #6, #10
   29bd8:	4948      	ldr	r1, [pc, #288]	; (29cfc <event_handler+0x1b0>)
   29bda:	4a45      	ldr	r2, [pc, #276]	; (29cf0 <event_handler+0x1a4>)
   29bdc:	f014 f9c1 	bl	3df62 <log_string_sync>
		evt.type = CLOUD_EVT_DATA_SENT;
   29be0:	2304      	movs	r3, #4
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   29be2:	68ea      	ldr	r2, [r5, #12]
		evt.type = CLOUD_EVT_DATA_SENT;
   29be4:	f88d 3004 	strb.w	r3, [sp, #4]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   29be8:	eb0d 0103 	add.w	r1, sp, r3
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   29bec:	6820      	ldr	r0, [r4, #0]
   29bee:	f016 f9b5 	bl	3ff5c <cloud_notify_event>
		break;
   29bf2:	e047      	b.n	29c84 <event_handler+0x138>
	switch (nrf_cloud_evt->type) {
   29bf4:	2f09      	cmp	r7, #9
   29bf6:	d067      	beq.n	29cc8 <event_handler+0x17c>
   29bf8:	2fff      	cmp	r7, #255	; 0xff
   29bfa:	d1c1      	bne.n	29b80 <event_handler+0x34>
		LOG_DBG("NRF_CLOUD_EVT_ERROR: %d", nrf_cloud_evt->status);
   29bfc:	2304      	movs	r3, #4
   29bfe:	f04f 0000 	mov.w	r0, #0
   29c02:	f363 0007 	bfi	r0, r3, #0, #8
   29c06:	f362 108f 	bfi	r0, r2, #6, #10
   29c0a:	6873      	ldr	r3, [r6, #4]
   29c0c:	4a38      	ldr	r2, [pc, #224]	; (29cf0 <event_handler+0x1a4>)
   29c0e:	493c      	ldr	r1, [pc, #240]	; (29d00 <event_handler+0x1b4>)
   29c10:	f014 f9a7 	bl	3df62 <log_string_sync>
		evt.type = CLOUD_EVT_ERROR;
   29c14:	2303      	movs	r3, #3
   29c16:	e00b      	b.n	29c30 <event_handler+0xe4>
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_CONNECTED");
   29c18:	2304      	movs	r3, #4
   29c1a:	f04f 0000 	mov.w	r0, #0
   29c1e:	f363 0007 	bfi	r0, r3, #0, #8
   29c22:	f362 108f 	bfi	r0, r2, #6, #10
   29c26:	4937      	ldr	r1, [pc, #220]	; (29d04 <event_handler+0x1b8>)
   29c28:	4a31      	ldr	r2, [pc, #196]	; (29cf0 <event_handler+0x1a4>)
   29c2a:	f014 f99a 	bl	3df62 <log_string_sync>
		evt.type = CLOUD_EVT_CONNECTED;
   29c2e:	2300      	movs	r3, #0
		evt.type = CLOUD_EVT_ERROR;
   29c30:	f88d 3004 	strb.w	r3, [sp, #4]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   29c34:	68ea      	ldr	r2, [r5, #12]
   29c36:	a901      	add	r1, sp, #4
   29c38:	e7d8      	b.n	29bec <event_handler+0xa0>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATION_REQUEST");
   29c3a:	2304      	movs	r3, #4
   29c3c:	f04f 0000 	mov.w	r0, #0
   29c40:	f363 0007 	bfi	r0, r3, #0, #8
   29c44:	f362 108f 	bfi	r0, r2, #6, #10
   29c48:	492f      	ldr	r1, [pc, #188]	; (29d08 <event_handler+0x1bc>)
   29c4a:	4a29      	ldr	r2, [pc, #164]	; (29cf0 <event_handler+0x1a4>)
   29c4c:	f014 f989 	bl	3df62 <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_REQUEST;
   29c50:	2306      	movs	r3, #6
   29c52:	e7ed      	b.n	29c30 <event_handler+0xe4>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATED");
   29c54:	2304      	movs	r3, #4
   29c56:	f04f 0000 	mov.w	r0, #0
   29c5a:	f363 0007 	bfi	r0, r3, #0, #8
   29c5e:	f362 108f 	bfi	r0, r2, #6, #10
   29c62:	492a      	ldr	r1, [pc, #168]	; (29d0c <event_handler+0x1c0>)
   29c64:	4a22      	ldr	r2, [pc, #136]	; (29cf0 <event_handler+0x1a4>)
   29c66:	f014 f97c 	bl	3df62 <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_DONE;
   29c6a:	2307      	movs	r3, #7
   29c6c:	e7e0      	b.n	29c30 <event_handler+0xe4>
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_ATTACHED");
   29c6e:	f04f 0000 	mov.w	r0, #0
   29c72:	2304      	movs	r3, #4
   29c74:	f363 0007 	bfi	r0, r3, #0, #8
   29c78:	f362 108f 	bfi	r0, r2, #6, #10
   29c7c:	4924      	ldr	r1, [pc, #144]	; (29d10 <event_handler+0x1c4>)
   29c7e:	4a1c      	ldr	r2, [pc, #112]	; (29cf0 <event_handler+0x1a4>)
   29c80:	f014 f96f 	bl	3df62 <log_string_sync>
}
   29c84:	b009      	add	sp, #36	; 0x24
   29c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED");
   29c88:	2304      	movs	r3, #4
   29c8a:	f04f 0000 	mov.w	r0, #0
   29c8e:	f363 0007 	bfi	r0, r3, #0, #8
   29c92:	f362 108f 	bfi	r0, r2, #6, #10
   29c96:	491f      	ldr	r1, [pc, #124]	; (29d14 <event_handler+0x1c8>)
   29c98:	4a15      	ldr	r2, [pc, #84]	; (29cf0 <event_handler+0x1a4>)
   29c9a:	f014 f962 	bl	3df62 <log_string_sync>
		evt.type = CLOUD_EVT_DISCONNECTED;
   29c9e:	2301      	movs	r3, #1
   29ca0:	e7c6      	b.n	29c30 <event_handler+0xe4>
		LOG_DBG("NRF_CLOUD_EVT_RX_DATA");
   29ca2:	2304      	movs	r3, #4
   29ca4:	f04f 0000 	mov.w	r0, #0
   29ca8:	f363 0007 	bfi	r0, r3, #0, #8
   29cac:	f362 108f 	bfi	r0, r2, #6, #10
   29cb0:	4919      	ldr	r1, [pc, #100]	; (29d18 <event_handler+0x1cc>)
   29cb2:	4a0f      	ldr	r2, [pc, #60]	; (29cf0 <event_handler+0x1a4>)
   29cb4:	f014 f955 	bl	3df62 <log_string_sync>
		evt.type = CLOUD_EVT_DATA_RECEIVED;
   29cb8:	2305      	movs	r3, #5
   29cba:	f88d 3004 	strb.w	r3, [sp, #4]
		evt.data.msg.buf = (char *)nrf_cloud_evt->data.ptr;
   29cbe:	68f3      	ldr	r3, [r6, #12]
   29cc0:	9302      	str	r3, [sp, #8]
		evt.data.msg.len = nrf_cloud_evt->data.len;
   29cc2:	68b3      	ldr	r3, [r6, #8]
   29cc4:	9303      	str	r3, [sp, #12]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   29cc6:	e7b5      	b.n	29c34 <event_handler+0xe8>
		LOG_DBG("NRF_CLOUD_EVT_FOTA_DONE");
   29cc8:	2304      	movs	r3, #4
   29cca:	f04f 0000 	mov.w	r0, #0
   29cce:	f363 0007 	bfi	r0, r3, #0, #8
   29cd2:	f362 108f 	bfi	r0, r2, #6, #10
   29cd6:	4911      	ldr	r1, [pc, #68]	; (29d1c <event_handler+0x1d0>)
   29cd8:	4a05      	ldr	r2, [pc, #20]	; (29cf0 <event_handler+0x1a4>)
   29cda:	f014 f942 	bl	3df62 <log_string_sync>
		evt.type = CLOUD_EVT_FOTA_DONE;
   29cde:	f88d 7004 	strb.w	r7, [sp, #4]
   29ce2:	e7a7      	b.n	29c34 <event_handler+0xe8>
   29ce4:	20023c84 	.word	0x20023c84
   29ce8:	00041d04 	.word	0x00041d04
   29cec:	00041c2c 	.word	0x00041c2c
   29cf0:	00045eef 	.word	0x00045eef
   29cf4:	00046074 	.word	0x00046074
   29cf8:	00045f9d 	.word	0x00045f9d
   29cfc:	00045fd7 	.word	0x00045fd7
   29d00:	00046022 	.word	0x00046022
   29d04:	00045f2a 	.word	0x00045f2a
   29d08:	00045f50 	.word	0x00045f50
   29d0c:	00045f7b 	.word	0x00045f7b
   29d10:	00045fb5 	.word	0x00045fb5
   29d14:	00045ff9 	.word	0x00045ff9
   29d18:	0004603e 	.word	0x0004603e
   29d1c:	00046058 	.word	0x00046058

00029d20 <send>:
	return nrf_cloud_disconnect();
}

static int send(const struct cloud_backend *const backend,
		const struct cloud_msg *const msg)
{
   29d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err = 0;

	if (msg->endpoint.len != 0) {
   29d22:	694c      	ldr	r4, [r1, #20]
   29d24:	2c00      	cmp	r4, #0
   29d26:	d156      	bne.n	29dd6 <send+0xb6>
		/* Unsupported case where topic is not the default. */
		return -ENOTSUP;
	}

	switch (msg->endpoint.type) {
   29d28:	898b      	ldrh	r3, [r1, #12]
   29d2a:	b18b      	cbz	r3, 29d50 <send+0x30>
   29d2c:	2b01      	cmp	r3, #1
   29d2e:	d034      	beq.n	29d9a <send+0x7a>
			return err;
		}
		break;
	}
	default:
		LOG_DBG("Unknown cloud endpoint type: %d", msg->endpoint.type);
   29d30:	2204      	movs	r2, #4
   29d32:	f04f 0000 	mov.w	r0, #0
   29d36:	4929      	ldr	r1, [pc, #164]	; (29ddc <send+0xbc>)
   29d38:	f362 0007 	bfi	r0, r2, #0, #8
   29d3c:	4a28      	ldr	r2, [pc, #160]	; (29de0 <send+0xc0>)
   29d3e:	1a52      	subs	r2, r2, r1
   29d40:	08d2      	lsrs	r2, r2, #3
   29d42:	f362 108f 	bfi	r0, r2, #6, #10
   29d46:	4927      	ldr	r1, [pc, #156]	; (29de4 <send+0xc4>)
   29d48:	4a27      	ldr	r2, [pc, #156]	; (29de8 <send+0xc8>)
   29d4a:	f014 f90a 	bl	3df62 <log_string_sync>
		break;
	}

	if (err) {
   29d4e:	e00a      	b.n	29d66 <send+0x46>
		const struct nct_dc_data buf = {
   29d50:	9302      	str	r3, [sp, #8]
   29d52:	684b      	ldr	r3, [r1, #4]
   29d54:	9300      	str	r3, [sp, #0]
   29d56:	680b      	ldr	r3, [r1, #0]
   29d58:	9301      	str	r3, [sp, #4]
		if (msg->qos == CLOUD_QOS_AT_MOST_ONCE) {
   29d5a:	7a0b      	ldrb	r3, [r1, #8]
   29d5c:	b933      	cbnz	r3, 29d6c <send+0x4c>
			err = nct_dc_stream(&buf);
   29d5e:	4668      	mov	r0, sp
   29d60:	f016 f9e4 	bl	4012c <nct_dc_stream>
			err = nct_dc_send(&buf);
   29d64:	4604      	mov	r4, r0
		return err;
	}

	return 0;
}
   29d66:	4620      	mov	r0, r4
   29d68:	b004      	add	sp, #16
   29d6a:	bd10      	pop	{r4, pc}
		} else if (msg->qos == CLOUD_QOS_AT_LEAST_ONCE) {
   29d6c:	2b01      	cmp	r3, #1
   29d6e:	d103      	bne.n	29d78 <send+0x58>
			err = nct_dc_send(&buf);
   29d70:	4668      	mov	r0, sp
   29d72:	f016 f9d8 	bl	40126 <nct_dc_send>
   29d76:	e7f5      	b.n	29d64 <send+0x44>
			LOG_ERR("Unsupported QoS setting.");
   29d78:	2301      	movs	r3, #1
   29d7a:	f04f 0000 	mov.w	r0, #0
   29d7e:	4a17      	ldr	r2, [pc, #92]	; (29ddc <send+0xbc>)
   29d80:	f363 0007 	bfi	r0, r3, #0, #8
   29d84:	4b16      	ldr	r3, [pc, #88]	; (29de0 <send+0xc0>)
   29d86:	4919      	ldr	r1, [pc, #100]	; (29dec <send+0xcc>)
   29d88:	1a9b      	subs	r3, r3, r2
   29d8a:	08db      	lsrs	r3, r3, #3
   29d8c:	f363 108f 	bfi	r0, r3, #6, #10
   29d90:	f014 f8e7 	bl	3df62 <log_string_sync>
			return err;
   29d94:	f06f 0415 	mvn.w	r4, #21
   29d98:	e7e5      	b.n	29d66 <send+0x46>
		struct nct_cc_data shadow_data = {
   29d9a:	684a      	ldr	r2, [r1, #4]
		err = nct_cc_send(&shadow_data);
   29d9c:	4668      	mov	r0, sp
		struct nct_cc_data shadow_data = {
   29d9e:	9200      	str	r2, [sp, #0]
   29da0:	680a      	ldr	r2, [r1, #0]
   29da2:	e9cd 4402 	strd	r4, r4, [sp, #8]
   29da6:	9201      	str	r2, [sp, #4]
   29da8:	f88d 300c 	strb.w	r3, [sp, #12]
		err = nct_cc_send(&shadow_data);
   29dac:	f001 fba6 	bl	2b4fc <nct_cc_send>
		if (err) {
   29db0:	4604      	mov	r4, r0
   29db2:	2800      	cmp	r0, #0
   29db4:	d0d7      	beq.n	29d66 <send+0x46>
			LOG_ERR("nct_cc_send failed, error: %d\n", err);
   29db6:	2301      	movs	r3, #1
   29db8:	f04f 0000 	mov.w	r0, #0
   29dbc:	4a07      	ldr	r2, [pc, #28]	; (29ddc <send+0xbc>)
   29dbe:	f363 0007 	bfi	r0, r3, #0, #8
   29dc2:	4b07      	ldr	r3, [pc, #28]	; (29de0 <send+0xc0>)
   29dc4:	490a      	ldr	r1, [pc, #40]	; (29df0 <send+0xd0>)
   29dc6:	1a9b      	subs	r3, r3, r2
   29dc8:	08db      	lsrs	r3, r3, #3
   29dca:	f363 108f 	bfi	r0, r3, #6, #10
   29dce:	4622      	mov	r2, r4
   29dd0:	f014 f8c7 	bl	3df62 <log_string_sync>
			return err;
   29dd4:	e7c7      	b.n	29d66 <send+0x46>
		return -ENOTSUP;
   29dd6:	f06f 0485 	mvn.w	r4, #133	; 0x85
   29dda:	e7c4      	b.n	29d66 <send+0x46>
   29ddc:	00041c2c 	.word	0x00041c2c
   29de0:	00041d04 	.word	0x00041d04
   29de4:	000460d5 	.word	0x000460d5
   29de8:	00045f05 	.word	0x00045f05
   29dec:	0004609d 	.word	0x0004609d
   29df0:	000460b6 	.word	0x000460b6

00029df4 <nfsm_get_current_state>:
	return m_current_state;
   29df4:	4b01      	ldr	r3, [pc, #4]	; (29dfc <nfsm_get_current_state+0x8>)
   29df6:	7818      	ldrb	r0, [r3, #0]
}
   29df8:	4770      	bx	lr
   29dfa:	bf00      	nop
   29dfc:	2002b2c7 	.word	0x2002b2c7

00029e00 <nfsm_set_current_state_and_notify>:
{
   29e00:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("state: %d", state);
   29e02:	2304      	movs	r3, #4
{
   29e04:	4605      	mov	r5, r0
	LOG_DBG("state: %d", state);
   29e06:	f04f 0000 	mov.w	r0, #0
   29e0a:	4a0c      	ldr	r2, [pc, #48]	; (29e3c <nfsm_set_current_state_and_notify+0x3c>)
   29e0c:	f363 0007 	bfi	r0, r3, #0, #8
   29e10:	4b0b      	ldr	r3, [pc, #44]	; (29e40 <nfsm_set_current_state_and_notify+0x40>)
{
   29e12:	460c      	mov	r4, r1
   29e14:	1a9b      	subs	r3, r3, r2
   29e16:	08db      	lsrs	r3, r3, #3
	LOG_DBG("state: %d", state);
   29e18:	f363 108f 	bfi	r0, r3, #6, #10
   29e1c:	4a09      	ldr	r2, [pc, #36]	; (29e44 <nfsm_set_current_state_and_notify+0x44>)
   29e1e:	462b      	mov	r3, r5
   29e20:	4909      	ldr	r1, [pc, #36]	; (29e48 <nfsm_set_current_state_and_notify+0x48>)
   29e22:	f014 f89e 	bl	3df62 <log_string_sync>
	m_current_state = state;
   29e26:	4b09      	ldr	r3, [pc, #36]	; (29e4c <nfsm_set_current_state_and_notify+0x4c>)
   29e28:	701d      	strb	r5, [r3, #0]
	if ((m_event_handler != NULL) && (evt != NULL)) {
   29e2a:	4b09      	ldr	r3, [pc, #36]	; (29e50 <nfsm_set_current_state_and_notify+0x50>)
   29e2c:	681b      	ldr	r3, [r3, #0]
   29e2e:	b123      	cbz	r3, 29e3a <nfsm_set_current_state_and_notify+0x3a>
   29e30:	b11c      	cbz	r4, 29e3a <nfsm_set_current_state_and_notify+0x3a>
		m_event_handler(evt);
   29e32:	4620      	mov	r0, r4
}
   29e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		m_event_handler(evt);
   29e38:	4718      	bx	r3
}
   29e3a:	bd70      	pop	{r4, r5, r6, pc}
   29e3c:	00041c2c 	.word	0x00041c2c
   29e40:	00041d04 	.word	0x00041d04
   29e44:	00045ecd 	.word	0x00045ecd
   29e48:	0004608f 	.word	0x0004608f
   29e4c:	2002b2c7 	.word	0x2002b2c7
   29e50:	20023c80 	.word	0x20023c80

00029e54 <nrf_cloud_init>:
{
   29e54:	b538      	push	{r3, r4, r5, lr}
	if (m_current_state != STATE_IDLE) {
   29e56:	4c0d      	ldr	r4, [pc, #52]	; (29e8c <nrf_cloud_init+0x38>)
{
   29e58:	4605      	mov	r5, r0
	if (m_current_state != STATE_IDLE) {
   29e5a:	7823      	ldrb	r3, [r4, #0]
   29e5c:	b983      	cbnz	r3, 29e80 <nrf_cloud_init+0x2c>
	if (param->event_handler == NULL) {
   29e5e:	6803      	ldr	r3, [r0, #0]
   29e60:	b18b      	cbz	r3, 29e86 <nrf_cloud_init+0x32>
	err = nfsm_init();
   29e62:	f016 f95e 	bl	40122 <nfsm_init>
	if (err) {
   29e66:	b950      	cbnz	r0, 29e7e <nrf_cloud_init+0x2a>
	err = nrf_codec_init();
   29e68:	f016 f8d3 	bl	40012 <nrf_codec_init>
	if (err) {
   29e6c:	b938      	cbnz	r0, 29e7e <nrf_cloud_init+0x2a>
	err = nct_init();
   29e6e:	f001 f90f 	bl	2b090 <nct_init>
	if (err) {
   29e72:	b920      	cbnz	r0, 29e7e <nrf_cloud_init+0x2a>
	m_event_handler = param->event_handler;
   29e74:	4b06      	ldr	r3, [pc, #24]	; (29e90 <nrf_cloud_init+0x3c>)
   29e76:	682a      	ldr	r2, [r5, #0]
   29e78:	601a      	str	r2, [r3, #0]
	m_current_state = STATE_INITIALIZED;
   29e7a:	2301      	movs	r3, #1
   29e7c:	7023      	strb	r3, [r4, #0]
}
   29e7e:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
   29e80:	f06f 000c 	mvn.w	r0, #12
   29e84:	e7fb      	b.n	29e7e <nrf_cloud_init+0x2a>
		return -EINVAL;
   29e86:	f06f 0015 	mvn.w	r0, #21
   29e8a:	e7f8      	b.n	29e7e <nrf_cloud_init+0x2a>
   29e8c:	2002b2c7 	.word	0x2002b2c7
   29e90:	20023c80 	.word	0x20023c80

00029e94 <init>:
{
   29e94:	b507      	push	{r0, r1, r2, lr}
	const struct nrf_cloud_init_param params = {
   29e96:	4b06      	ldr	r3, [pc, #24]	; (29eb0 <init+0x1c>)
   29e98:	9301      	str	r3, [sp, #4]
	backend->config->handler = handler;
   29e9a:	6843      	ldr	r3, [r0, #4]
   29e9c:	6059      	str	r1, [r3, #4]
	nrf_cloud_backend = (struct cloud_backend *)backend;
   29e9e:	4b05      	ldr	r3, [pc, #20]	; (29eb4 <init+0x20>)
   29ea0:	6018      	str	r0, [r3, #0]
	return nrf_cloud_init(&params);
   29ea2:	a801      	add	r0, sp, #4
   29ea4:	f7ff ffd6 	bl	29e54 <nrf_cloud_init>
}
   29ea8:	b003      	add	sp, #12
   29eaa:	f85d fb04 	ldr.w	pc, [sp], #4
   29eae:	bf00      	nop
   29eb0:	00029b4d 	.word	0x00029b4d
   29eb4:	20023c84 	.word	0x20023c84

00029eb8 <nrf_cloud_connect>:
	if (NOT_VALID_STATE(STATE_INITIALIZED)) {
   29eb8:	4b04      	ldr	r3, [pc, #16]	; (29ecc <nrf_cloud_connect+0x14>)
   29eba:	781b      	ldrb	r3, [r3, #0]
   29ebc:	2b01      	cmp	r3, #1
   29ebe:	d801      	bhi.n	29ec4 <nrf_cloud_connect+0xc>
	return nct_connect();
   29ec0:	f001 ba3a 	b.w	2b338 <nct_connect>
}
   29ec4:	f06f 000c 	mvn.w	r0, #12
   29ec8:	4770      	bx	lr
   29eca:	bf00      	nop
   29ecc:	2002b2c7 	.word	0x2002b2c7

00029ed0 <connect>:
{
   29ed0:	b538      	push	{r3, r4, r5, lr}
   29ed2:	4605      	mov	r5, r0
	err = nrf_cloud_connect(NULL);
   29ed4:	2000      	movs	r0, #0
   29ed6:	f7ff ffef 	bl	29eb8 <nrf_cloud_connect>
	switch (err) {
   29eda:	f110 0f0d 	cmn.w	r0, #13
	err = nrf_cloud_connect(NULL);
   29ede:	4604      	mov	r4, r0
	switch (err) {
   29ee0:	d038      	beq.n	29f54 <connect+0x84>
   29ee2:	dc22      	bgt.n	29f2a <connect+0x5a>
   29ee4:	f110 0f6f 	cmn.w	r0, #111	; 0x6f
   29ee8:	d037      	beq.n	29f5a <connect+0x8a>
   29eea:	dc15      	bgt.n	29f18 <connect+0x48>
   29eec:	f110 0f74 	cmn.w	r0, #116	; 0x74
   29ef0:	d036      	beq.n	29f60 <connect+0x90>
		LOG_DBG("nrf_cloud_connect failed %d", err);
   29ef2:	2304      	movs	r3, #4
   29ef4:	f04f 0000 	mov.w	r0, #0
   29ef8:	4a1f      	ldr	r2, [pc, #124]	; (29f78 <connect+0xa8>)
   29efa:	f363 0007 	bfi	r0, r3, #0, #8
   29efe:	4b1f      	ldr	r3, [pc, #124]	; (29f7c <connect+0xac>)
   29f00:	491f      	ldr	r1, [pc, #124]	; (29f80 <connect+0xb0>)
   29f02:	1a9b      	subs	r3, r3, r2
   29f04:	08db      	lsrs	r3, r3, #3
   29f06:	f363 108f 	bfi	r0, r3, #6, #10
   29f0a:	4a1e      	ldr	r2, [pc, #120]	; (29f84 <connect+0xb4>)
   29f0c:	4623      	mov	r3, r4
   29f0e:	f014 f828 	bl	3df62 <log_string_sync>
		return CLOUD_CONNECT_RES_ERR_MISC;
   29f12:	f06f 0404 	mvn.w	r4, #4
   29f16:	e01b      	b.n	29f50 <connect+0x80>
	switch (err) {
   29f18:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   29f1c:	d023      	beq.n	29f66 <connect+0x96>
   29f1e:	f110 0f16 	cmn.w	r0, #22
   29f22:	d1e6      	bne.n	29ef2 <connect+0x22>
		return CLOUD_CONNECT_RES_ERR_PRV_KEY;
   29f24:	f06f 0406 	mvn.w	r4, #6
   29f28:	e012      	b.n	29f50 <connect+0x80>
	switch (err) {
   29f2a:	f110 0f0a 	cmn.w	r0, #10
   29f2e:	d01d      	beq.n	29f6c <connect+0x9c>
   29f30:	dc05      	bgt.n	29f3e <connect+0x6e>
   29f32:	f110 0f0c 	cmn.w	r0, #12
   29f36:	d1dc      	bne.n	29ef2 <connect+0x22>
		return CLOUD_CONNECT_RES_ERR_NO_MEM;
   29f38:	f06f 0405 	mvn.w	r4, #5
   29f3c:	e008      	b.n	29f50 <connect+0x80>
	switch (err) {
   29f3e:	f110 0f08 	cmn.w	r0, #8
   29f42:	d016      	beq.n	29f72 <connect+0xa2>
   29f44:	2800      	cmp	r0, #0
   29f46:	d1d4      	bne.n	29ef2 <connect+0x22>
		backend->config->socket = nct_socket_get();
   29f48:	686d      	ldr	r5, [r5, #4]
   29f4a:	f001 fc99 	bl	2b880 <nct_socket_get>
   29f4e:	60a8      	str	r0, [r5, #8]
}
   29f50:	4620      	mov	r0, r4
   29f52:	bd38      	pop	{r3, r4, r5, pc}
		return CLOUD_CONNECT_RES_ERR_NOT_INITD;
   29f54:	f04f 34ff 	mov.w	r4, #4294967295
   29f58:	e7fa      	b.n	29f50 <connect+0x80>
		return CLOUD_CONNECT_RES_ERR_CERT_MISC;
   29f5a:	f06f 0408 	mvn.w	r4, #8
   29f5e:	e7f7      	b.n	29f50 <connect+0x80>
		return CLOUD_CONNECT_RES_ERR_TIMEOUT_NO_DATA;
   29f60:	f06f 0409 	mvn.w	r4, #9
   29f64:	e7f4      	b.n	29f50 <connect+0x80>
		return CLOUD_CONNECT_RES_ERR_CERT;
   29f66:	f06f 0407 	mvn.w	r4, #7
   29f6a:	e7f1      	b.n	29f50 <connect+0x80>
		return CLOUD_CONNECT_RES_ERR_NETWORK;
   29f6c:	f06f 0402 	mvn.w	r4, #2
   29f70:	e7ee      	b.n	29f50 <connect+0x80>
		return CLOUD_CONNECT_RES_ERR_BACKEND;
   29f72:	f06f 0403 	mvn.w	r4, #3
   29f76:	e7eb      	b.n	29f50 <connect+0x80>
   29f78:	00041c2c 	.word	0x00041c2c
   29f7c:	00041d04 	.word	0x00041d04
   29f80:	00045f0a 	.word	0x00045f0a
   29f84:	00045efd 	.word	0x00045efd

00029f88 <nrf_cloud_disconnect>:
	if (NOT_VALID_STATE(STATE_DC_CONNECTED) &&
   29f88:	4b05      	ldr	r3, [pc, #20]	; (29fa0 <nrf_cloud_disconnect+0x18>)
   29f8a:	781a      	ldrb	r2, [r3, #0]
   29f8c:	2a09      	cmp	r2, #9
   29f8e:	d902      	bls.n	29f96 <nrf_cloud_disconnect+0xe>
	    NOT_VALID_STATE(STATE_CC_CONNECTED)) {
   29f90:	781b      	ldrb	r3, [r3, #0]
	if (NOT_VALID_STATE(STATE_DC_CONNECTED) &&
   29f92:	2b04      	cmp	r3, #4
   29f94:	d801      	bhi.n	29f9a <nrf_cloud_disconnect+0x12>
	return nct_disconnect();
   29f96:	f001 bc3f 	b.w	2b818 <nct_disconnect>
}
   29f9a:	f06f 000c 	mvn.w	r0, #12
   29f9e:	4770      	bx	lr
   29fa0:	2002b2c7 	.word	0x2002b2c7

00029fa4 <nct_input>:
	return nfsm_handle_incoming_event(evt, m_current_state);
   29fa4:	4b01      	ldr	r3, [pc, #4]	; (29fac <nct_input+0x8>)
   29fa6:	7819      	ldrb	r1, [r3, #0]
   29fa8:	f000 bcb8 	b.w	2a91c <nfsm_handle_incoming_event>
   29fac:	2002b2c7 	.word	0x2002b2c7

00029fb0 <nct_apply_update>:
	m_event_handler(&evt);
   29fb0:	4b01      	ldr	r3, [pc, #4]	; (29fb8 <nct_apply_update+0x8>)
   29fb2:	4802      	ldr	r0, [pc, #8]	; (29fbc <nct_apply_update+0xc>)
   29fb4:	681b      	ldr	r3, [r3, #0]
   29fb6:	4718      	bx	r3
   29fb8:	20023c80 	.word	0x20023c80
   29fbc:	000423bc 	.word	0x000423bc

00029fc0 <nrf_cloud_decode_desired_obj>:
	return !strncmp(s1, s2, strlen(s2));
}

static void nrf_cloud_decode_desired_obj(cJSON *const root_obj,
					 cJSON **desired_obj)
{
   29fc0:	b538      	push	{r3, r4, r5, lr}
   29fc2:	460c      	mov	r4, r1
	cJSON *state_obj;

	if ((root_obj != NULL) && (desired_obj != NULL)) {
   29fc4:	4605      	mov	r5, r0
   29fc6:	b140      	cbz	r0, 29fda <nrf_cloud_decode_desired_obj+0x1a>
		/* On initial pairing, a shadow delta event is sent */
		/* which does not include the "desired" JSON key, */
		/* "state" is used instead */
		state_obj = json_object_decode(root_obj, "state");
   29fc8:	4904      	ldr	r1, [pc, #16]	; (29fdc <nrf_cloud_decode_desired_obj+0x1c>)
   29fca:	f015 ffef 	bl	3ffac <json_object_decode>
		if (state_obj == NULL) {
   29fce:	b918      	cbnz	r0, 29fd8 <nrf_cloud_decode_desired_obj+0x18>
			*desired_obj = json_object_decode(root_obj, "desired");
   29fd0:	4903      	ldr	r1, [pc, #12]	; (29fe0 <nrf_cloud_decode_desired_obj+0x20>)
   29fd2:	4628      	mov	r0, r5
   29fd4:	f015 ffea 	bl	3ffac <json_object_decode>
		} else {
			*desired_obj = state_obj;
   29fd8:	6020      	str	r0, [r4, #0]
		}
	}
}
   29fda:	bd38      	pop	{r3, r4, r5, pc}
   29fdc:	000439e2 	.word	0x000439e2
   29fe0:	00046176 	.word	0x00046176

00029fe4 <nrf_cloud_decode_requested_state>:
	return 0;
}

int nrf_cloud_decode_requested_state(const struct nrf_cloud_data *input,
				     enum nfsm_state *requested_state)
{
   29fe4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   29fe6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(requested_state != NULL);
   29fe8:	460e      	mov	r6, r1
   29fea:	b949      	cbnz	r1, 2a000 <nrf_cloud_decode_requested_state+0x1c>
   29fec:	494f      	ldr	r1, [pc, #316]	; (2a12c <nrf_cloud_decode_requested_state+0x148>)
   29fee:	4850      	ldr	r0, [pc, #320]	; (2a130 <nrf_cloud_decode_requested_state+0x14c>)
   29ff0:	23cb      	movs	r3, #203	; 0xcb
   29ff2:	4a50      	ldr	r2, [pc, #320]	; (2a134 <nrf_cloud_decode_requested_state+0x150>)
   29ff4:	f013 ff51 	bl	3de9a <printk>
   29ff8:	21cb      	movs	r1, #203	; 0xcb
   29ffa:	484e      	ldr	r0, [pc, #312]	; (2a134 <nrf_cloud_decode_requested_state+0x150>)
   29ffc:	f013 ffa0 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   2a000:	b94c      	cbnz	r4, 2a016 <nrf_cloud_decode_requested_state+0x32>
   2a002:	494d      	ldr	r1, [pc, #308]	; (2a138 <nrf_cloud_decode_requested_state+0x154>)
   2a004:	484a      	ldr	r0, [pc, #296]	; (2a130 <nrf_cloud_decode_requested_state+0x14c>)
   2a006:	23cc      	movs	r3, #204	; 0xcc
   2a008:	4a4a      	ldr	r2, [pc, #296]	; (2a134 <nrf_cloud_decode_requested_state+0x150>)
   2a00a:	f013 ff46 	bl	3de9a <printk>
   2a00e:	21cc      	movs	r1, #204	; 0xcc
   2a010:	4848      	ldr	r0, [pc, #288]	; (2a134 <nrf_cloud_decode_requested_state+0x150>)
   2a012:	f013 ff95 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   2a016:	6863      	ldr	r3, [r4, #4]
   2a018:	b94b      	cbnz	r3, 2a02e <nrf_cloud_decode_requested_state+0x4a>
   2a01a:	4948      	ldr	r1, [pc, #288]	; (2a13c <nrf_cloud_decode_requested_state+0x158>)
   2a01c:	4844      	ldr	r0, [pc, #272]	; (2a130 <nrf_cloud_decode_requested_state+0x14c>)
   2a01e:	23cd      	movs	r3, #205	; 0xcd
   2a020:	4a44      	ldr	r2, [pc, #272]	; (2a134 <nrf_cloud_decode_requested_state+0x150>)
   2a022:	f013 ff3a 	bl	3de9a <printk>
   2a026:	21cd      	movs	r1, #205	; 0xcd
   2a028:	4842      	ldr	r0, [pc, #264]	; (2a134 <nrf_cloud_decode_requested_state+0x150>)
   2a02a:	f013 ff89 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   2a02e:	6823      	ldr	r3, [r4, #0]
   2a030:	b94b      	cbnz	r3, 2a046 <nrf_cloud_decode_requested_state+0x62>
   2a032:	4943      	ldr	r1, [pc, #268]	; (2a140 <nrf_cloud_decode_requested_state+0x15c>)
   2a034:	483e      	ldr	r0, [pc, #248]	; (2a130 <nrf_cloud_decode_requested_state+0x14c>)
   2a036:	23ce      	movs	r3, #206	; 0xce
   2a038:	4a3e      	ldr	r2, [pc, #248]	; (2a134 <nrf_cloud_decode_requested_state+0x150>)
   2a03a:	f013 ff2e 	bl	3de9a <printk>
   2a03e:	21ce      	movs	r1, #206	; 0xce
   2a040:	483c      	ldr	r0, [pc, #240]	; (2a134 <nrf_cloud_decode_requested_state+0x150>)
   2a042:	f013 ff7d 	bl	3df40 <assert_post_action>
	cJSON *desired_obj;
	cJSON *pairing_obj;
	cJSON *pairing_state_obj;
	cJSON *topic_prefix_obj;

	root_obj = cJSON_Parse(input->ptr);
   2a046:	6860      	ldr	r0, [r4, #4]
   2a048:	f015 f92a 	bl	3f2a0 <cJSON_Parse>
	if (root_obj == NULL) {
   2a04c:	4605      	mov	r5, r0
   2a04e:	b9a8      	cbnz	r0, 2a07c <nrf_cloud_decode_requested_state+0x98>
		LOG_ERR("cJSON_Parse failed: %s",
   2a050:	2301      	movs	r3, #1
   2a052:	f04f 0500 	mov.w	r5, #0
   2a056:	4a3b      	ldr	r2, [pc, #236]	; (2a144 <nrf_cloud_decode_requested_state+0x160>)
   2a058:	f363 0507 	bfi	r5, r3, #0, #8
   2a05c:	4b3a      	ldr	r3, [pc, #232]	; (2a148 <nrf_cloud_decode_requested_state+0x164>)
   2a05e:	6860      	ldr	r0, [r4, #4]
   2a060:	1a9b      	subs	r3, r3, r2
   2a062:	08db      	lsrs	r3, r3, #3
   2a064:	f363 158f 	bfi	r5, r3, #6, #10
   2a068:	f013 ff8d 	bl	3df86 <log_strdup>
   2a06c:	4937      	ldr	r1, [pc, #220]	; (2a14c <nrf_cloud_decode_requested_state+0x168>)
   2a06e:	4602      	mov	r2, r0
   2a070:	4628      	mov	r0, r5
   2a072:	f013 ff76 	bl	3df62 <log_string_sync>
	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
		if (cJSON_HasObjectItem(desired_obj, "config") == false) {
			LOG_DBG("No valid state found!");
		}
		cJSON_Delete(root_obj);
		return -ENOENT;
   2a076:	f06f 0401 	mvn.w	r4, #1
   2a07a:	e00d      	b.n	2a098 <nrf_cloud_decode_requested_state+0xb4>
	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   2a07c:	a901      	add	r1, sp, #4
   2a07e:	f7ff ff9f 	bl	29fc0 <nrf_cloud_decode_desired_obj>
		json_object_decode(desired_obj, "nrfcloud_mqtt_topic_prefix");
   2a082:	4933      	ldr	r1, [pc, #204]	; (2a150 <nrf_cloud_decode_requested_state+0x16c>)
   2a084:	9801      	ldr	r0, [sp, #4]
   2a086:	f015 ff91 	bl	3ffac <json_object_decode>
	if (topic_prefix_obj != NULL) {
   2a08a:	b140      	cbz	r0, 2a09e <nrf_cloud_decode_requested_state+0xba>
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2a08c:	2307      	movs	r3, #7
		cJSON_Delete(root_obj);
   2a08e:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2a090:	7033      	strb	r3, [r6, #0]
		cJSON_Delete(root_obj);
   2a092:	f7fc fe17 	bl	26cc4 <cJSON_Delete>
		return 0;
   2a096:	2400      	movs	r4, #0
	}

	cJSON_Delete(root_obj);

	return 0;
}
   2a098:	4620      	mov	r0, r4
   2a09a:	b002      	add	sp, #8
   2a09c:	bd70      	pop	{r4, r5, r6, pc}
	pairing_obj = json_object_decode(desired_obj, "pairing");
   2a09e:	492d      	ldr	r1, [pc, #180]	; (2a154 <nrf_cloud_decode_requested_state+0x170>)
   2a0a0:	9801      	ldr	r0, [sp, #4]
   2a0a2:	f015 ff83 	bl	3ffac <json_object_decode>
	pairing_state_obj = json_object_decode(pairing_obj, "state");
   2a0a6:	492c      	ldr	r1, [pc, #176]	; (2a158 <nrf_cloud_decode_requested_state+0x174>)
   2a0a8:	f015 ff80 	bl	3ffac <json_object_decode>
	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
   2a0ac:	b110      	cbz	r0, 2a0b4 <nrf_cloud_decode_requested_state+0xd0>
   2a0ae:	68c3      	ldr	r3, [r0, #12]
   2a0b0:	2b10      	cmp	r3, #16
   2a0b2:	d015      	beq.n	2a0e0 <nrf_cloud_decode_requested_state+0xfc>
		if (cJSON_HasObjectItem(desired_obj, "config") == false) {
   2a0b4:	4929      	ldr	r1, [pc, #164]	; (2a15c <nrf_cloud_decode_requested_state+0x178>)
   2a0b6:	9801      	ldr	r0, [sp, #4]
   2a0b8:	f015 f907 	bl	3f2ca <cJSON_HasObjectItem>
   2a0bc:	b960      	cbnz	r0, 2a0d8 <nrf_cloud_decode_requested_state+0xf4>
			LOG_DBG("No valid state found!");
   2a0be:	2304      	movs	r3, #4
   2a0c0:	4a20      	ldr	r2, [pc, #128]	; (2a144 <nrf_cloud_decode_requested_state+0x160>)
   2a0c2:	f363 0007 	bfi	r0, r3, #0, #8
   2a0c6:	4b20      	ldr	r3, [pc, #128]	; (2a148 <nrf_cloud_decode_requested_state+0x164>)
   2a0c8:	4925      	ldr	r1, [pc, #148]	; (2a160 <nrf_cloud_decode_requested_state+0x17c>)
   2a0ca:	1a9b      	subs	r3, r3, r2
   2a0cc:	08db      	lsrs	r3, r3, #3
   2a0ce:	f363 108f 	bfi	r0, r3, #6, #10
   2a0d2:	4a24      	ldr	r2, [pc, #144]	; (2a164 <nrf_cloud_decode_requested_state+0x180>)
   2a0d4:	f013 ff45 	bl	3df62 <log_string_sync>
		cJSON_Delete(root_obj);
   2a0d8:	4628      	mov	r0, r5
   2a0da:	f7fc fdf3 	bl	26cc4 <cJSON_Delete>
   2a0de:	e7ca      	b.n	2a076 <nrf_cloud_decode_requested_state+0x92>
	const char *state_str = pairing_state_obj->valuestring;
   2a0e0:	6904      	ldr	r4, [r0, #16]
	return !strncmp(s1, s2, strlen(s2));
   2a0e2:	4821      	ldr	r0, [pc, #132]	; (2a168 <nrf_cloud_decode_requested_state+0x184>)
   2a0e4:	f7f3 f81e 	bl	1d124 <strlen>
   2a0e8:	491f      	ldr	r1, [pc, #124]	; (2a168 <nrf_cloud_decode_requested_state+0x184>)
   2a0ea:	4602      	mov	r2, r0
   2a0ec:	4620      	mov	r0, r4
   2a0ee:	f016 fc8e 	bl	40a0e <strncmp>
	if (compare(state_str, DUA_PIN_STR)) {
   2a0f2:	4604      	mov	r4, r0
   2a0f4:	b928      	cbnz	r0, 2a102 <nrf_cloud_decode_requested_state+0x11e>
		(*requested_state) = STATE_UA_PIN_WAIT;
   2a0f6:	2306      	movs	r3, #6
	cJSON_Delete(root_obj);
   2a0f8:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_WAIT;
   2a0fa:	7033      	strb	r3, [r6, #0]
	cJSON_Delete(root_obj);
   2a0fc:	f7fc fde2 	bl	26cc4 <cJSON_Delete>
	return 0;
   2a100:	e7ca      	b.n	2a098 <nrf_cloud_decode_requested_state+0xb4>
		LOG_ERR("Deprecated state. Delete device from nrfCloud and update device with JITP certificates.");
   2a102:	2301      	movs	r3, #1
   2a104:	f04f 0000 	mov.w	r0, #0
   2a108:	4a0e      	ldr	r2, [pc, #56]	; (2a144 <nrf_cloud_decode_requested_state+0x160>)
   2a10a:	f363 0007 	bfi	r0, r3, #0, #8
   2a10e:	4b0e      	ldr	r3, [pc, #56]	; (2a148 <nrf_cloud_decode_requested_state+0x164>)
   2a110:	4916      	ldr	r1, [pc, #88]	; (2a16c <nrf_cloud_decode_requested_state+0x188>)
   2a112:	1a9b      	subs	r3, r3, r2
   2a114:	08db      	lsrs	r3, r3, #3
   2a116:	f363 108f 	bfi	r0, r3, #6, #10
   2a11a:	f013 ff22 	bl	3df62 <log_string_sync>
		cJSON_Delete(root_obj);
   2a11e:	4628      	mov	r0, r5
   2a120:	f7fc fdd0 	bl	26cc4 <cJSON_Delete>
		return -ENOTSUP;
   2a124:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2a128:	e7b6      	b.n	2a098 <nrf_cloud_decode_requested_state+0xb4>
   2a12a:	bf00      	nop
   2a12c:	0004617e 	.word	0x0004617e
   2a130:	00043278 	.word	0x00043278
   2a134:	00046297 	.word	0x00046297
   2a138:	0004619d 	.word	0x0004619d
   2a13c:	000461b2 	.word	0x000461b2
   2a140:	000461cc 	.word	0x000461cc
   2a144:	00041c2c 	.word	0x00041c2c
   2a148:	00041d14 	.word	0x00041d14
   2a14c:	000461dc 	.word	0x000461dc
   2a150:	000461f3 	.word	0x000461f3
   2a154:	0004620e 	.word	0x0004620e
   2a158:	000439e2 	.word	0x000439e2
   2a15c:	0004392d 	.word	0x0004392d
   2a160:	00046216 	.word	0x00046216
   2a164:	0004611f 	.word	0x0004611f
   2a168:	00046230 	.word	0x00046230
   2a16c:	0004623f 	.word	0x0004623f

0002a170 <nrf_cloud_encode_config_response>:

int nrf_cloud_encode_config_response(struct nrf_cloud_data const *const input,
				     struct nrf_cloud_data *const output,
				     bool *const has_config)
{
   2a170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a174:	4605      	mov	r5, r0
   2a176:	4690      	mov	r8, r2
	__ASSERT_NO_MSG(output != NULL);
   2a178:	460c      	mov	r4, r1
   2a17a:	b959      	cbnz	r1, 2a194 <nrf_cloud_encode_config_response+0x24>
   2a17c:	494e      	ldr	r1, [pc, #312]	; (2a2b8 <nrf_cloud_encode_config_response+0x148>)
   2a17e:	484f      	ldr	r0, [pc, #316]	; (2a2bc <nrf_cloud_encode_config_response+0x14c>)
   2a180:	f240 1305 	movw	r3, #261	; 0x105
   2a184:	4a4e      	ldr	r2, [pc, #312]	; (2a2c0 <nrf_cloud_encode_config_response+0x150>)
   2a186:	f013 fe88 	bl	3de9a <printk>
   2a18a:	f240 1105 	movw	r1, #261	; 0x105
   2a18e:	484c      	ldr	r0, [pc, #304]	; (2a2c0 <nrf_cloud_encode_config_response+0x150>)
   2a190:	f013 fed6 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   2a194:	2d00      	cmp	r5, #0
   2a196:	d164      	bne.n	2a262 <nrf_cloud_encode_config_response+0xf2>
   2a198:	494a      	ldr	r1, [pc, #296]	; (2a2c4 <nrf_cloud_encode_config_response+0x154>)
   2a19a:	4848      	ldr	r0, [pc, #288]	; (2a2bc <nrf_cloud_encode_config_response+0x14c>)
   2a19c:	f44f 7383 	mov.w	r3, #262	; 0x106
   2a1a0:	4a47      	ldr	r2, [pc, #284]	; (2a2c0 <nrf_cloud_encode_config_response+0x150>)
   2a1a2:	f013 fe7a 	bl	3de9a <printk>
   2a1a6:	f44f 7183 	mov.w	r1, #262	; 0x106
   2a1aa:	4845      	ldr	r0, [pc, #276]	; (2a2c0 <nrf_cloud_encode_config_response+0x150>)
   2a1ac:	f013 fec8 	bl	3df40 <assert_post_action>
	cJSON *state_obj = NULL;
	cJSON *config_obj = NULL;
	cJSON *input_obj = input ? cJSON_Parse(input->ptr) : NULL;

	if (input_obj == NULL) {
		return -ESRCH; /* invalid input or no JSON parsed */
   2a1b0:	f06f 0002 	mvn.w	r0, #2
   2a1b4:	e07d      	b.n	2a2b2 <nrf_cloud_encode_config_response+0x142>
		output->len = 0;
		return 0;
	}

	/* Prepare JSON response for the delta */
	root_obj = cJSON_CreateObject();
   2a1b6:	f7fc fe49 	bl	26e4c <cJSON_CreateObject>
   2a1ba:	4605      	mov	r5, r0
	desired_obj = cJSON_CreateObject();
   2a1bc:	f7fc fe46 	bl	26e4c <cJSON_CreateObject>
   2a1c0:	4680      	mov	r8, r0
	null_obj = cJSON_CreateNull();
   2a1c2:	f7fc fe13 	bl	26dec <cJSON_CreateNull>
   2a1c6:	4681      	mov	r9, r0
	reported_obj = cJSON_CreateObject();
   2a1c8:	f7fc fe40 	bl	26e4c <cJSON_CreateObject>
   2a1cc:	4682      	mov	sl, r0

	if ((root_obj == NULL) || (desired_obj == NULL) || (null_obj == NULL) ||
   2a1ce:	b135      	cbz	r5, 2a1de <nrf_cloud_encode_config_response+0x6e>
   2a1d0:	f1b8 0f00 	cmp.w	r8, #0
   2a1d4:	d003      	beq.n	2a1de <nrf_cloud_encode_config_response+0x6e>
   2a1d6:	f1b9 0f00 	cmp.w	r9, #0
   2a1da:	d000      	beq.n	2a1de <nrf_cloud_encode_config_response+0x6e>
   2a1dc:	b9a0      	cbnz	r0, 2a208 <nrf_cloud_encode_config_response+0x98>
		(reported_obj == NULL)) {
		cJSON_Delete(root_obj);
   2a1de:	4628      	mov	r0, r5
   2a1e0:	f7fc fd70 	bl	26cc4 <cJSON_Delete>
		cJSON_Delete(desired_obj);
   2a1e4:	4640      	mov	r0, r8
   2a1e6:	f7fc fd6d 	bl	26cc4 <cJSON_Delete>
		cJSON_Delete(null_obj);
   2a1ea:	4648      	mov	r0, r9
   2a1ec:	f7fc fd6a 	bl	26cc4 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   2a1f0:	4650      	mov	r0, sl
   2a1f2:	f7fc fd67 	bl	26cc4 <cJSON_Delete>
		cJSON_Delete(config_obj);
   2a1f6:	4638      	mov	r0, r7
   2a1f8:	f7fc fd64 	bl	26cc4 <cJSON_Delete>
		cJSON_Delete(state_obj);
   2a1fc:	4630      	mov	r0, r6
   2a1fe:	f7fc fd61 	bl	26cc4 <cJSON_Delete>
	(void)json_add_obj(state_obj, "state", root_obj);
	buffer = cJSON_PrintUnformatted(state_obj);
	cJSON_Delete(state_obj);

	if (buffer == NULL) {
		return -ENOMEM;
   2a202:	f06f 000b 	mvn.w	r0, #11
   2a206:	e054      	b.n	2a2b2 <nrf_cloud_encode_config_response+0x142>
	cJSON_AddItemToObject(parent, str, item);
   2a208:	463a      	mov	r2, r7
   2a20a:	492f      	ldr	r1, [pc, #188]	; (2a2c8 <nrf_cloud_encode_config_response+0x158>)
   2a20c:	f015 f866 	bl	3f2dc <cJSON_AddItemToObject>
   2a210:	4628      	mov	r0, r5
   2a212:	4652      	mov	r2, sl
   2a214:	492d      	ldr	r1, [pc, #180]	; (2a2cc <nrf_cloud_encode_config_response+0x15c>)
   2a216:	f015 f861 	bl	3f2dc <cJSON_AddItemToObject>
   2a21a:	464a      	mov	r2, r9
   2a21c:	492a      	ldr	r1, [pc, #168]	; (2a2c8 <nrf_cloud_encode_config_response+0x158>)
   2a21e:	4640      	mov	r0, r8
   2a220:	f015 f85c 	bl	3f2dc <cJSON_AddItemToObject>
   2a224:	4642      	mov	r2, r8
   2a226:	492a      	ldr	r1, [pc, #168]	; (2a2d0 <nrf_cloud_encode_config_response+0x160>)
   2a228:	4628      	mov	r0, r5
   2a22a:	f015 f857 	bl	3f2dc <cJSON_AddItemToObject>
	cJSON_Delete(state_obj);
   2a22e:	4630      	mov	r0, r6
   2a230:	f7fc fd48 	bl	26cc4 <cJSON_Delete>
	state_obj = cJSON_CreateObject();
   2a234:	f7fc fe0a 	bl	26e4c <cJSON_CreateObject>
   2a238:	4606      	mov	r6, r0
	cJSON_AddItemToObject(parent, str, item);
   2a23a:	462a      	mov	r2, r5
   2a23c:	4925      	ldr	r1, [pc, #148]	; (2a2d4 <nrf_cloud_encode_config_response+0x164>)
   2a23e:	f015 f84d 	bl	3f2dc <cJSON_AddItemToObject>
	buffer = cJSON_PrintUnformatted(state_obj);
   2a242:	4630      	mov	r0, r6
   2a244:	f015 f830 	bl	3f2a8 <cJSON_PrintUnformatted>
   2a248:	4605      	mov	r5, r0
	cJSON_Delete(state_obj);
   2a24a:	4630      	mov	r0, r6
   2a24c:	f7fc fd3a 	bl	26cc4 <cJSON_Delete>
	if (buffer == NULL) {
   2a250:	2d00      	cmp	r5, #0
   2a252:	d0d6      	beq.n	2a202 <nrf_cloud_encode_config_response+0x92>
	}

	output->ptr = buffer;
   2a254:	6065      	str	r5, [r4, #4]
	output->len = strlen(buffer);
   2a256:	4628      	mov	r0, r5
   2a258:	f7f2 ff64 	bl	1d124 <strlen>
   2a25c:	6020      	str	r0, [r4, #0]

	return 0;
   2a25e:	2000      	movs	r0, #0
   2a260:	e027      	b.n	2a2b2 <nrf_cloud_encode_config_response+0x142>
	cJSON *input_obj = input ? cJSON_Parse(input->ptr) : NULL;
   2a262:	6868      	ldr	r0, [r5, #4]
   2a264:	f015 f81c 	bl	3f2a0 <cJSON_Parse>
	if (input_obj == NULL) {
   2a268:	4605      	mov	r5, r0
   2a26a:	2800      	cmp	r0, #0
   2a26c:	d0a0      	beq.n	2a1b0 <nrf_cloud_encode_config_response+0x40>
	state_obj = cJSON_DetachItemFromObject(input_obj, "state");
   2a26e:	4919      	ldr	r1, [pc, #100]	; (2a2d4 <nrf_cloud_encode_config_response+0x164>)
   2a270:	f015 f84b 	bl	3f30a <cJSON_DetachItemFromObject>
	config_obj = cJSON_DetachItemFromObject(
   2a274:	1e06      	subs	r6, r0, #0
   2a276:	bf14      	ite	ne
   2a278:	4630      	movne	r0, r6
   2a27a:	4628      	moveq	r0, r5
   2a27c:	4912      	ldr	r1, [pc, #72]	; (2a2c8 <nrf_cloud_encode_config_response+0x158>)
   2a27e:	f015 f844 	bl	3f30a <cJSON_DetachItemFromObject>
   2a282:	4607      	mov	r7, r0
	cJSON_Delete(input_obj);
   2a284:	4628      	mov	r0, r5
   2a286:	f7fc fd1d 	bl	26cc4 <cJSON_Delete>
	if (has_config) {
   2a28a:	f1b8 0f00 	cmp.w	r8, #0
   2a28e:	d004      	beq.n	2a29a <nrf_cloud_encode_config_response+0x12a>
		*has_config = (config_obj != NULL);
   2a290:	1c3b      	adds	r3, r7, #0
   2a292:	bf18      	it	ne
   2a294:	2301      	movne	r3, #1
   2a296:	f888 3000 	strb.w	r3, [r8]
	if ((state_obj == NULL) || (config_obj == NULL)) {
   2a29a:	b10e      	cbz	r6, 2a2a0 <nrf_cloud_encode_config_response+0x130>
   2a29c:	2f00      	cmp	r7, #0
   2a29e:	d18a      	bne.n	2a1b6 <nrf_cloud_encode_config_response+0x46>
		cJSON_Delete(state_obj);
   2a2a0:	4630      	mov	r0, r6
   2a2a2:	f7fc fd0f 	bl	26cc4 <cJSON_Delete>
		cJSON_Delete(config_obj);
   2a2a6:	4638      	mov	r0, r7
   2a2a8:	f7fc fd0c 	bl	26cc4 <cJSON_Delete>
		output->ptr = NULL;
   2a2ac:	2000      	movs	r0, #0
		output->len = 0;
   2a2ae:	e9c4 0000 	strd	r0, r0, [r4]
}
   2a2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a2b6:	bf00      	nop
   2a2b8:	00043a2b 	.word	0x00043a2b
   2a2bc:	00043278 	.word	0x00043278
   2a2c0:	00046297 	.word	0x00046297
   2a2c4:	0004619d 	.word	0x0004619d
   2a2c8:	0004392d 	.word	0x0004392d
   2a2cc:	000439d9 	.word	0x000439d9
   2a2d0:	00046176 	.word	0x00046176
   2a2d4:	000439e2 	.word	0x000439e2

0002a2d8 <nrf_cloud_encode_state>:

int nrf_cloud_encode_state(u32_t reported_state, struct nrf_cloud_data *output)
{
   2a2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a2dc:	4604      	mov	r4, r0
   2a2de:	b086      	sub	sp, #24
	int ret;

	__ASSERT_NO_MSG(output != NULL);
   2a2e0:	4689      	mov	r9, r1
   2a2e2:	b959      	cbnz	r1, 2a2fc <nrf_cloud_encode_state+0x24>
   2a2e4:	495a      	ldr	r1, [pc, #360]	; (2a450 <nrf_cloud_encode_state+0x178>)
   2a2e6:	485b      	ldr	r0, [pc, #364]	; (2a454 <nrf_cloud_encode_state+0x17c>)
   2a2e8:	f240 1357 	movw	r3, #343	; 0x157
   2a2ec:	4a5a      	ldr	r2, [pc, #360]	; (2a458 <nrf_cloud_encode_state+0x180>)
   2a2ee:	f013 fdd4 	bl	3de9a <printk>
   2a2f2:	f240 1157 	movw	r1, #343	; 0x157
   2a2f6:	4858      	ldr	r0, [pc, #352]	; (2a458 <nrf_cloud_encode_state+0x180>)
   2a2f8:	f013 fe22 	bl	3df40 <assert_post_action>

	cJSON *root_obj = cJSON_CreateObject();
   2a2fc:	f7fc fda6 	bl	26e4c <cJSON_CreateObject>
   2a300:	4607      	mov	r7, r0
	cJSON *state_obj = cJSON_CreateObject();
   2a302:	f7fc fda3 	bl	26e4c <cJSON_CreateObject>
   2a306:	4680      	mov	r8, r0
	cJSON *reported_obj = cJSON_CreateObject();
   2a308:	f7fc fda0 	bl	26e4c <cJSON_CreateObject>
   2a30c:	4606      	mov	r6, r0
	cJSON *pairing_obj = cJSON_CreateObject();
   2a30e:	f7fc fd9d 	bl	26e4c <cJSON_CreateObject>
   2a312:	4605      	mov	r5, r0

	if ((root_obj == NULL) || (state_obj == NULL) ||
   2a314:	b127      	cbz	r7, 2a320 <nrf_cloud_encode_state+0x48>
   2a316:	f1b8 0f00 	cmp.w	r8, #0
   2a31a:	d001      	beq.n	2a320 <nrf_cloud_encode_state+0x48>
   2a31c:	b106      	cbz	r6, 2a320 <nrf_cloud_encode_state+0x48>
	    (reported_obj == NULL) || (pairing_obj == NULL)) {
   2a31e:	b970      	cbnz	r0, 2a33e <nrf_cloud_encode_state+0x66>

		/* Report pairing topics. */
		cJSON *topics_obj = cJSON_CreateObject();

		if (topics_obj == NULL) {
			cJSON_Delete(root_obj);
   2a320:	4638      	mov	r0, r7
	ret += json_add_obj(reported_obj, "pairing", pairing_obj);
	ret += json_add_obj(state_obj, "reported", reported_obj);
	ret += json_add_obj(root_obj, "state", state_obj);

	if (ret != 0) {
		cJSON_Delete(root_obj);
   2a322:	f7fc fccf 	bl	26cc4 <cJSON_Delete>
		cJSON_Delete(state_obj);
   2a326:	4640      	mov	r0, r8
   2a328:	f7fc fccc 	bl	26cc4 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   2a32c:	4630      	mov	r0, r6
   2a32e:	f7fc fcc9 	bl	26cc4 <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   2a332:	4628      	mov	r0, r5
   2a334:	f7fc fcc6 	bl	26cc4 <cJSON_Delete>

	buffer = cJSON_PrintUnformatted(root_obj);
	cJSON_Delete(root_obj);

	if (buffer == NULL) {
		return -ENOMEM;
   2a338:	f06f 040b 	mvn.w	r4, #11
   2a33c:	e011      	b.n	2a362 <nrf_cloud_encode_state+0x8a>
	switch (reported_state) {
   2a33e:	2c06      	cmp	r4, #6
   2a340:	d013      	beq.n	2a36a <nrf_cloud_encode_state+0x92>
   2a342:	2c07      	cmp	r4, #7
   2a344:	d04c      	beq.n	2a3e0 <nrf_cloud_encode_state+0x108>
		cJSON_Delete(root_obj);
   2a346:	4638      	mov	r0, r7
   2a348:	f7fc fcbc 	bl	26cc4 <cJSON_Delete>
		cJSON_Delete(state_obj);
   2a34c:	4640      	mov	r0, r8
   2a34e:	f7fc fcb9 	bl	26cc4 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   2a352:	4630      	mov	r0, r6
   2a354:	f7fc fcb6 	bl	26cc4 <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   2a358:	4628      	mov	r0, r5
   2a35a:	f7fc fcb3 	bl	26cc4 <cJSON_Delete>
		return -ENOTSUP;
   2a35e:	f06f 0485 	mvn.w	r4, #133	; 0x85

	output->ptr = buffer;
	output->len = strlen(buffer);

	return 0;
}
   2a362:	4620      	mov	r0, r4
   2a364:	b006      	add	sp, #24
   2a366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   2a36a:	4a3c      	ldr	r2, [pc, #240]	; (2a45c <nrf_cloud_encode_state+0x184>)
   2a36c:	493c      	ldr	r1, [pc, #240]	; (2a460 <nrf_cloud_encode_state+0x188>)
   2a36e:	f015 fe0c 	bl	3ff8a <json_add_str>
		ret += json_add_null(pairing_obj, "topics");
   2a372:	493c      	ldr	r1, [pc, #240]	; (2a464 <nrf_cloud_encode_state+0x18c>)
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   2a374:	4604      	mov	r4, r0
		ret += json_add_null(pairing_obj, "topics");
   2a376:	4628      	mov	r0, r5
   2a378:	f015 fe1c 	bl	3ffb4 <json_add_null>
		ret += json_add_null(pairing_obj, "config");
   2a37c:	493a      	ldr	r1, [pc, #232]	; (2a468 <nrf_cloud_encode_state+0x190>)
		ret += json_add_null(pairing_obj, "topics");
   2a37e:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   2a380:	4628      	mov	r0, r5
   2a382:	f015 fe17 	bl	3ffb4 <json_add_null>
		ret += json_add_null(reported_obj, "stage");
   2a386:	4939      	ldr	r1, [pc, #228]	; (2a46c <nrf_cloud_encode_state+0x194>)
		ret += json_add_null(pairing_obj, "config");
   2a388:	4404      	add	r4, r0
		ret += json_add_null(reported_obj, "stage");
   2a38a:	4630      	mov	r0, r6
   2a38c:	f015 fe12 	bl	3ffb4 <json_add_null>
		ret += json_add_null(reported_obj,
   2a390:	4937      	ldr	r1, [pc, #220]	; (2a470 <nrf_cloud_encode_state+0x198>)
		ret += json_add_null(reported_obj, "stage");
   2a392:	4404      	add	r4, r0
		ret += json_add_null(reported_obj,
   2a394:	4630      	mov	r0, r6
   2a396:	f015 fe0d 	bl	3ffb4 <json_add_null>
   2a39a:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   2a39c:	462a      	mov	r2, r5
   2a39e:	4935      	ldr	r1, [pc, #212]	; (2a474 <nrf_cloud_encode_state+0x19c>)
   2a3a0:	4630      	mov	r0, r6
   2a3a2:	f014 ff9b 	bl	3f2dc <cJSON_AddItemToObject>
   2a3a6:	4632      	mov	r2, r6
   2a3a8:	4933      	ldr	r1, [pc, #204]	; (2a478 <nrf_cloud_encode_state+0x1a0>)
   2a3aa:	4640      	mov	r0, r8
   2a3ac:	f014 ff96 	bl	3f2dc <cJSON_AddItemToObject>
   2a3b0:	4638      	mov	r0, r7
   2a3b2:	4642      	mov	r2, r8
   2a3b4:	492a      	ldr	r1, [pc, #168]	; (2a460 <nrf_cloud_encode_state+0x188>)
   2a3b6:	f014 ff91 	bl	3f2dc <cJSON_AddItemToObject>
		cJSON_Delete(root_obj);
   2a3ba:	4638      	mov	r0, r7
	if (ret != 0) {
   2a3bc:	2c00      	cmp	r4, #0
   2a3be:	d1b0      	bne.n	2a322 <nrf_cloud_encode_state+0x4a>
	buffer = cJSON_PrintUnformatted(root_obj);
   2a3c0:	f014 ff72 	bl	3f2a8 <cJSON_PrintUnformatted>
   2a3c4:	4605      	mov	r5, r0
	cJSON_Delete(root_obj);
   2a3c6:	4638      	mov	r0, r7
   2a3c8:	f7fc fc7c 	bl	26cc4 <cJSON_Delete>
	if (buffer == NULL) {
   2a3cc:	2d00      	cmp	r5, #0
   2a3ce:	d0b3      	beq.n	2a338 <nrf_cloud_encode_state+0x60>
	output->ptr = buffer;
   2a3d0:	f8c9 5004 	str.w	r5, [r9, #4]
	output->len = strlen(buffer);
   2a3d4:	4628      	mov	r0, r5
   2a3d6:	f7f2 fea5 	bl	1d124 <strlen>
   2a3da:	f8c9 0000 	str.w	r0, [r9]
	return 0;
   2a3de:	e7c0      	b.n	2a362 <nrf_cloud_encode_state+0x8a>
		nct_dc_endpoint_get(&tx_endp, &rx_endp, &m_endp);
   2a3e0:	aa04      	add	r2, sp, #16
   2a3e2:	4669      	mov	r1, sp
   2a3e4:	a802      	add	r0, sp, #8
   2a3e6:	f001 f989 	bl	2b6fc <nct_dc_endpoint_get>
		ret += json_add_str(reported_obj, "nrfcloud_mqtt_topic_prefix",
   2a3ea:	9a05      	ldr	r2, [sp, #20]
   2a3ec:	4920      	ldr	r1, [pc, #128]	; (2a470 <nrf_cloud_encode_state+0x198>)
   2a3ee:	4630      	mov	r0, r6
   2a3f0:	f015 fdcb 	bl	3ff8a <json_add_str>
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   2a3f4:	4a21      	ldr	r2, [pc, #132]	; (2a47c <nrf_cloud_encode_state+0x1a4>)
		ret += json_add_str(reported_obj, "nrfcloud_mqtt_topic_prefix",
   2a3f6:	4604      	mov	r4, r0
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   2a3f8:	4919      	ldr	r1, [pc, #100]	; (2a460 <nrf_cloud_encode_state+0x188>)
   2a3fa:	4628      	mov	r0, r5
   2a3fc:	f015 fdc5 	bl	3ff8a <json_add_str>
		ret += json_add_null(pairing_obj, "config");
   2a400:	4919      	ldr	r1, [pc, #100]	; (2a468 <nrf_cloud_encode_state+0x190>)
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   2a402:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   2a404:	4628      	mov	r0, r5
   2a406:	f015 fdd5 	bl	3ffb4 <json_add_null>
		ret += json_add_null(reported_obj, "pairingStatus");
   2a40a:	491d      	ldr	r1, [pc, #116]	; (2a480 <nrf_cloud_encode_state+0x1a8>)
		ret += json_add_null(pairing_obj, "config");
   2a40c:	4404      	add	r4, r0
		ret += json_add_null(reported_obj, "pairingStatus");
   2a40e:	4630      	mov	r0, r6
   2a410:	f015 fdd0 	bl	3ffb4 <json_add_null>
   2a414:	4404      	add	r4, r0
		cJSON *topics_obj = cJSON_CreateObject();
   2a416:	f7fc fd19 	bl	26e4c <cJSON_CreateObject>
		if (topics_obj == NULL) {
   2a41a:	4682      	mov	sl, r0
   2a41c:	2800      	cmp	r0, #0
   2a41e:	f43f af7f 	beq.w	2a320 <nrf_cloud_encode_state+0x48>
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   2a422:	9a03      	ldr	r2, [sp, #12]
   2a424:	4917      	ldr	r1, [pc, #92]	; (2a484 <nrf_cloud_encode_state+0x1ac>)
   2a426:	f015 fdb0 	bl	3ff8a <json_add_str>
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   2a42a:	9a01      	ldr	r2, [sp, #4]
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   2a42c:	4404      	add	r4, r0
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   2a42e:	4916      	ldr	r1, [pc, #88]	; (2a488 <nrf_cloud_encode_state+0x1b0>)
   2a430:	4650      	mov	r0, sl
   2a432:	f015 fdaa 	bl	3ff8a <json_add_str>
	cJSON_AddItemToObject(parent, str, item);
   2a436:	4652      	mov	r2, sl
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   2a438:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   2a43a:	490a      	ldr	r1, [pc, #40]	; (2a464 <nrf_cloud_encode_state+0x18c>)
   2a43c:	4628      	mov	r0, r5
   2a43e:	f014 ff4d 	bl	3f2dc <cJSON_AddItemToObject>
		if (ret != 0) {
   2a442:	2c00      	cmp	r4, #0
   2a444:	d0aa      	beq.n	2a39c <nrf_cloud_encode_state+0xc4>
			cJSON_Delete(topics_obj);
   2a446:	4650      	mov	r0, sl
   2a448:	f7fc fc3c 	bl	26cc4 <cJSON_Delete>
		break;
   2a44c:	e7a6      	b.n	2a39c <nrf_cloud_encode_state+0xc4>
   2a44e:	bf00      	nop
   2a450:	00043a2b 	.word	0x00043a2b
   2a454:	00043278 	.word	0x00043278
   2a458:	00046297 	.word	0x00046297
   2a45c:	00046230 	.word	0x00046230
   2a460:	000439e2 	.word	0x000439e2
   2a464:	00046322 	.word	0x00046322
   2a468:	0004392d 	.word	0x0004392d
   2a46c:	00046329 	.word	0x00046329
   2a470:	000461f3 	.word	0x000461f3
   2a474:	0004620e 	.word	0x0004620e
   2a478:	000439d9 	.word	0x000439d9
   2a47c:	0004632f 	.word	0x0004632f
   2a480:	00046336 	.word	0x00046336
   2a484:	00046344 	.word	0x00046344
   2a488:	00046348 	.word	0x00046348

0002a48c <nrf_cloud_decode_data_endpoint>:
 */
int nrf_cloud_decode_data_endpoint(const struct nrf_cloud_data *input,
				   struct nrf_cloud_data *tx_endpoint,
				   struct nrf_cloud_data *rx_endpoint,
				   struct nrf_cloud_data *m_endpoint)
{
   2a48c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2a490:	4689      	mov	r9, r1
   2a492:	4690      	mov	r8, r2
   2a494:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(input != NULL);
   2a496:	4604      	mov	r4, r0
   2a498:	b958      	cbnz	r0, 2a4b2 <nrf_cloud_decode_data_endpoint+0x26>
   2a49a:	4950      	ldr	r1, [pc, #320]	; (2a5dc <nrf_cloud_decode_data_endpoint+0x150>)
   2a49c:	4850      	ldr	r0, [pc, #320]	; (2a5e0 <nrf_cloud_decode_data_endpoint+0x154>)
   2a49e:	f240 13c9 	movw	r3, #457	; 0x1c9
   2a4a2:	4a50      	ldr	r2, [pc, #320]	; (2a5e4 <nrf_cloud_decode_data_endpoint+0x158>)
   2a4a4:	f013 fcf9 	bl	3de9a <printk>
   2a4a8:	f240 11c9 	movw	r1, #457	; 0x1c9
   2a4ac:	484d      	ldr	r0, [pc, #308]	; (2a5e4 <nrf_cloud_decode_data_endpoint+0x158>)
   2a4ae:	f013 fd47 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   2a4b2:	6863      	ldr	r3, [r4, #4]
   2a4b4:	b95b      	cbnz	r3, 2a4ce <nrf_cloud_decode_data_endpoint+0x42>
   2a4b6:	494c      	ldr	r1, [pc, #304]	; (2a5e8 <nrf_cloud_decode_data_endpoint+0x15c>)
   2a4b8:	4849      	ldr	r0, [pc, #292]	; (2a5e0 <nrf_cloud_decode_data_endpoint+0x154>)
   2a4ba:	f44f 73e5 	mov.w	r3, #458	; 0x1ca
   2a4be:	4a49      	ldr	r2, [pc, #292]	; (2a5e4 <nrf_cloud_decode_data_endpoint+0x158>)
   2a4c0:	f013 fceb 	bl	3de9a <printk>
   2a4c4:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
   2a4c8:	4846      	ldr	r0, [pc, #280]	; (2a5e4 <nrf_cloud_decode_data_endpoint+0x158>)
   2a4ca:	f013 fd39 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   2a4ce:	6823      	ldr	r3, [r4, #0]
   2a4d0:	b95b      	cbnz	r3, 2a4ea <nrf_cloud_decode_data_endpoint+0x5e>
   2a4d2:	4946      	ldr	r1, [pc, #280]	; (2a5ec <nrf_cloud_decode_data_endpoint+0x160>)
   2a4d4:	4842      	ldr	r0, [pc, #264]	; (2a5e0 <nrf_cloud_decode_data_endpoint+0x154>)
   2a4d6:	f240 13cb 	movw	r3, #459	; 0x1cb
   2a4da:	4a42      	ldr	r2, [pc, #264]	; (2a5e4 <nrf_cloud_decode_data_endpoint+0x158>)
   2a4dc:	f013 fcdd 	bl	3de9a <printk>
   2a4e0:	f240 11cb 	movw	r1, #459	; 0x1cb
   2a4e4:	483f      	ldr	r0, [pc, #252]	; (2a5e4 <nrf_cloud_decode_data_endpoint+0x158>)
   2a4e6:	f013 fd2b 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(tx_endpoint != NULL);
   2a4ea:	f1b9 0f00 	cmp.w	r9, #0
   2a4ee:	d10b      	bne.n	2a508 <nrf_cloud_decode_data_endpoint+0x7c>
   2a4f0:	493f      	ldr	r1, [pc, #252]	; (2a5f0 <nrf_cloud_decode_data_endpoint+0x164>)
   2a4f2:	483b      	ldr	r0, [pc, #236]	; (2a5e0 <nrf_cloud_decode_data_endpoint+0x154>)
   2a4f4:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
   2a4f8:	4a3a      	ldr	r2, [pc, #232]	; (2a5e4 <nrf_cloud_decode_data_endpoint+0x158>)
   2a4fa:	f013 fcce 	bl	3de9a <printk>
   2a4fe:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   2a502:	4838      	ldr	r0, [pc, #224]	; (2a5e4 <nrf_cloud_decode_data_endpoint+0x158>)
   2a504:	f013 fd1c 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(rx_endpoint != NULL);
   2a508:	f1b8 0f00 	cmp.w	r8, #0
   2a50c:	d10b      	bne.n	2a526 <nrf_cloud_decode_data_endpoint+0x9a>
   2a50e:	4939      	ldr	r1, [pc, #228]	; (2a5f4 <nrf_cloud_decode_data_endpoint+0x168>)
   2a510:	4833      	ldr	r0, [pc, #204]	; (2a5e0 <nrf_cloud_decode_data_endpoint+0x154>)
   2a512:	f240 13cd 	movw	r3, #461	; 0x1cd
   2a516:	4a33      	ldr	r2, [pc, #204]	; (2a5e4 <nrf_cloud_decode_data_endpoint+0x158>)
   2a518:	f013 fcbf 	bl	3de9a <printk>
   2a51c:	f240 11cd 	movw	r1, #461	; 0x1cd
   2a520:	4830      	ldr	r0, [pc, #192]	; (2a5e4 <nrf_cloud_decode_data_endpoint+0x158>)
   2a522:	f013 fd0d 	bl	3df40 <assert_post_action>

	int err;
	cJSON *root_obj;
	cJSON *m_endpoint_obj = NULL;
	cJSON *desired_obj = NULL;
   2a526:	2300      	movs	r3, #0

	root_obj = cJSON_Parse(input->ptr);
   2a528:	6860      	ldr	r0, [r4, #4]
	cJSON *desired_obj = NULL;
   2a52a:	9301      	str	r3, [sp, #4]
	root_obj = cJSON_Parse(input->ptr);
   2a52c:	f014 feb8 	bl	3f2a0 <cJSON_Parse>
	if (root_obj == NULL) {
   2a530:	4605      	mov	r5, r0
   2a532:	b308      	cbz	r0, 2a578 <nrf_cloud_decode_data_endpoint+0xec>
		return -ENOENT;
	}

	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   2a534:	a901      	add	r1, sp, #4
   2a536:	f7ff fd43 	bl	29fc0 <nrf_cloud_decode_desired_obj>

	if (m_endpoint != NULL) {
   2a53a:	b307      	cbz	r7, 2a57e <nrf_cloud_decode_data_endpoint+0xf2>
		m_endpoint_obj = json_object_decode(
   2a53c:	492e      	ldr	r1, [pc, #184]	; (2a5f8 <nrf_cloud_decode_data_endpoint+0x16c>)
   2a53e:	9801      	ldr	r0, [sp, #4]
   2a540:	f015 fd34 	bl	3ffac <json_object_decode>
   2a544:	4604      	mov	r4, r0
			desired_obj, "nrfcloud_mqtt_topic_prefix");
	}

	cJSON *pairing_obj = json_object_decode(desired_obj, "pairing");
   2a546:	492d      	ldr	r1, [pc, #180]	; (2a5fc <nrf_cloud_decode_data_endpoint+0x170>)
   2a548:	9801      	ldr	r0, [sp, #4]
   2a54a:	f015 fd2f 	bl	3ffac <json_object_decode>
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   2a54e:	492c      	ldr	r1, [pc, #176]	; (2a600 <nrf_cloud_decode_data_endpoint+0x174>)
	cJSON *pairing_obj = json_object_decode(desired_obj, "pairing");
   2a550:	4606      	mov	r6, r0
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   2a552:	f015 fd2b 	bl	3ffac <json_object_decode>
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   2a556:	492b      	ldr	r1, [pc, #172]	; (2a604 <nrf_cloud_decode_data_endpoint+0x178>)
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   2a558:	4682      	mov	sl, r0
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   2a55a:	4630      	mov	r0, r6
   2a55c:	f015 fd26 	bl	3ffac <json_object_decode>
   2a560:	4606      	mov	r6, r0

	if ((pairing_state_obj == NULL) || (topic_obj == NULL) ||
   2a562:	f1ba 0f00 	cmp.w	sl, #0
   2a566:	d004      	beq.n	2a572 <nrf_cloud_decode_data_endpoint+0xe6>
   2a568:	b118      	cbz	r0, 2a572 <nrf_cloud_decode_data_endpoint+0xe6>
   2a56a:	f8da 300c 	ldr.w	r3, [sl, #12]
   2a56e:	2b10      	cmp	r3, #16
   2a570:	d007      	beq.n	2a582 <nrf_cloud_decode_data_endpoint+0xf6>
	}

	const char *state_str = pairing_state_obj->valuestring;

	if (!compare(state_str, PAIRED_STR)) {
		cJSON_Delete(root_obj);
   2a572:	4628      	mov	r0, r5
   2a574:	f7fc fba6 	bl	26cc4 <cJSON_Delete>
		return -ENOENT;
   2a578:	f06f 0401 	mvn.w	r4, #1
   2a57c:	e017      	b.n	2a5ae <nrf_cloud_decode_data_endpoint+0x122>
	cJSON *m_endpoint_obj = NULL;
   2a57e:	463c      	mov	r4, r7
   2a580:	e7e1      	b.n	2a546 <nrf_cloud_decode_data_endpoint+0xba>
	return !strncmp(s1, s2, strlen(s2));
   2a582:	4821      	ldr	r0, [pc, #132]	; (2a608 <nrf_cloud_decode_data_endpoint+0x17c>)
	const char *state_str = pairing_state_obj->valuestring;
   2a584:	f8da a010 	ldr.w	sl, [sl, #16]
	return !strncmp(s1, s2, strlen(s2));
   2a588:	f7f2 fdcc 	bl	1d124 <strlen>
   2a58c:	491e      	ldr	r1, [pc, #120]	; (2a608 <nrf_cloud_decode_data_endpoint+0x17c>)
   2a58e:	4602      	mov	r2, r0
   2a590:	4650      	mov	r0, sl
   2a592:	f016 fa3c 	bl	40a0e <strncmp>
	if (!compare(state_str, PAIRED_STR)) {
   2a596:	2800      	cmp	r0, #0
   2a598:	d1eb      	bne.n	2a572 <nrf_cloud_decode_data_endpoint+0xe6>
		return -ENOENT;
	}

	if (m_endpoint_obj != NULL) {
   2a59a:	b164      	cbz	r4, 2a5b6 <nrf_cloud_decode_data_endpoint+0x12a>
		err = json_decode_and_alloc(m_endpoint_obj, m_endpoint);
   2a59c:	4620      	mov	r0, r4
   2a59e:	4639      	mov	r1, r7
   2a5a0:	f015 fd18 	bl	3ffd4 <json_decode_and_alloc>
		if (err) {
   2a5a4:	4604      	mov	r4, r0
   2a5a6:	b130      	cbz	r0, 2a5b6 <nrf_cloud_decode_data_endpoint+0x12a>

	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");

	err = json_decode_and_alloc(rx_obj, rx_endpoint);
	if (err) {
		cJSON_Delete(root_obj);
   2a5a8:	4628      	mov	r0, r5
		return err;
	}

	cJSON_Delete(root_obj);
   2a5aa:	f7fc fb8b 	bl	26cc4 <cJSON_Delete>

	return err;
}
   2a5ae:	4620      	mov	r0, r4
   2a5b0:	b002      	add	sp, #8
   2a5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cJSON *tx_obj = json_object_decode(topic_obj, "d2c");
   2a5b6:	4915      	ldr	r1, [pc, #84]	; (2a60c <nrf_cloud_decode_data_endpoint+0x180>)
   2a5b8:	4630      	mov	r0, r6
   2a5ba:	f015 fcf7 	bl	3ffac <json_object_decode>
	err = json_decode_and_alloc(tx_obj, tx_endpoint);
   2a5be:	4649      	mov	r1, r9
   2a5c0:	f015 fd08 	bl	3ffd4 <json_decode_and_alloc>
	if (err) {
   2a5c4:	4604      	mov	r4, r0
   2a5c6:	2800      	cmp	r0, #0
   2a5c8:	d1ee      	bne.n	2a5a8 <nrf_cloud_decode_data_endpoint+0x11c>
	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");
   2a5ca:	4911      	ldr	r1, [pc, #68]	; (2a610 <nrf_cloud_decode_data_endpoint+0x184>)
   2a5cc:	4630      	mov	r0, r6
   2a5ce:	f015 fced 	bl	3ffac <json_object_decode>
	err = json_decode_and_alloc(rx_obj, rx_endpoint);
   2a5d2:	4641      	mov	r1, r8
   2a5d4:	f015 fcfe 	bl	3ffd4 <json_decode_and_alloc>
	if (err) {
   2a5d8:	4604      	mov	r4, r0
   2a5da:	e7e5      	b.n	2a5a8 <nrf_cloud_decode_data_endpoint+0x11c>
   2a5dc:	0004619d 	.word	0x0004619d
   2a5e0:	00043278 	.word	0x00043278
   2a5e4:	00046297 	.word	0x00046297
   2a5e8:	000461b2 	.word	0x000461b2
   2a5ec:	000461cc 	.word	0x000461cc
   2a5f0:	00046140 	.word	0x00046140
   2a5f4:	0004615b 	.word	0x0004615b
   2a5f8:	000461f3 	.word	0x000461f3
   2a5fc:	0004620e 	.word	0x0004620e
   2a600:	000439e2 	.word	0x000439e2
   2a604:	00046322 	.word	0x00046322
   2a608:	0004632f 	.word	0x0004632f
   2a60c:	00046344 	.word	0x00046344
   2a610:	00046348 	.word	0x00046348

0002a614 <state_ua_pin_wait>:

	return err;
}

static int state_ua_pin_wait(void)
{
   2a614:	b510      	push	{r4, lr}
   2a616:	b088      	sub	sp, #32
	int err;
	struct nct_cc_data msg = {
   2a618:	2210      	movs	r2, #16
   2a61a:	2100      	movs	r1, #0
   2a61c:	4668      	mov	r0, sp
   2a61e:	f016 f81d 	bl	4065c <memset>
   2a622:	2301      	movs	r3, #1
		.opcode = NCT_CC_OPCODE_UPDATE_REQ,
		.id = DEFAULT_REPORT_ID,
	};

	/* Publish report to the cloud on current status. */
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   2a624:	4669      	mov	r1, sp
   2a626:	2006      	movs	r0, #6
	struct nct_cc_data msg = {
   2a628:	9302      	str	r3, [sp, #8]
   2a62a:	f88d 300c 	strb.w	r3, [sp, #12]
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   2a62e:	f7ff fe53 	bl	2a2d8 <nrf_cloud_encode_state>
	if (err) {
   2a632:	4604      	mov	r4, r0
   2a634:	b188      	cbz	r0, 2a65a <state_ua_pin_wait+0x46>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2a636:	2301      	movs	r3, #1
   2a638:	f04f 0000 	mov.w	r0, #0
   2a63c:	4a1b      	ldr	r2, [pc, #108]	; (2a6ac <state_ua_pin_wait+0x98>)
   2a63e:	f363 0007 	bfi	r0, r3, #0, #8
   2a642:	4b1b      	ldr	r3, [pc, #108]	; (2a6b0 <state_ua_pin_wait+0x9c>)
   2a644:	491b      	ldr	r1, [pc, #108]	; (2a6b4 <state_ua_pin_wait+0xa0>)
   2a646:	1a9b      	subs	r3, r3, r2
   2a648:	08db      	lsrs	r3, r3, #3
   2a64a:	f363 108f 	bfi	r0, r3, #6, #10
   2a64e:	4622      	mov	r2, r4
   2a650:	f013 fc87 	bl	3df62 <log_string_sync>
	};

	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);

	return 0;
}
   2a654:	4620      	mov	r0, r4
   2a656:	b008      	add	sp, #32
   2a658:	bd10      	pop	{r4, pc}
	err = nct_cc_send(&msg);
   2a65a:	4668      	mov	r0, sp
   2a65c:	f000 ff4e 	bl	2b4fc <nct_cc_send>
	if (err) {
   2a660:	4604      	mov	r4, r0
   2a662:	b190      	cbz	r0, 2a68a <state_ua_pin_wait+0x76>
		LOG_ERR("nct_cc_send failed %d", err);
   2a664:	2301      	movs	r3, #1
   2a666:	f04f 0000 	mov.w	r0, #0
   2a66a:	4a10      	ldr	r2, [pc, #64]	; (2a6ac <state_ua_pin_wait+0x98>)
   2a66c:	f363 0007 	bfi	r0, r3, #0, #8
   2a670:	4b0f      	ldr	r3, [pc, #60]	; (2a6b0 <state_ua_pin_wait+0x9c>)
   2a672:	4911      	ldr	r1, [pc, #68]	; (2a6b8 <state_ua_pin_wait+0xa4>)
   2a674:	1a9b      	subs	r3, r3, r2
   2a676:	08db      	lsrs	r3, r3, #3
   2a678:	f363 108f 	bfi	r0, r3, #6, #10
   2a67c:	4622      	mov	r2, r4
   2a67e:	f013 fc70 	bl	3df62 <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   2a682:	9801      	ldr	r0, [sp, #4]
   2a684:	f015 fe27 	bl	402d6 <k_free>
		return err;
   2a688:	e7e4      	b.n	2a654 <state_ua_pin_wait+0x40>
	nrf_cloud_free((void *)msg.data.ptr);
   2a68a:	9801      	ldr	r0, [sp, #4]
   2a68c:	f015 fe23 	bl	402d6 <k_free>
	struct nrf_cloud_evt evt = {
   2a690:	2210      	movs	r2, #16
   2a692:	4621      	mov	r1, r4
   2a694:	eb0d 0002 	add.w	r0, sp, r2
   2a698:	f015 ffe0 	bl	4065c <memset>
   2a69c:	2302      	movs	r3, #2
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   2a69e:	a904      	add	r1, sp, #16
   2a6a0:	2006      	movs	r0, #6
	struct nrf_cloud_evt evt = {
   2a6a2:	f88d 3010 	strb.w	r3, [sp, #16]
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   2a6a6:	f7ff fbab 	bl	29e00 <nfsm_set_current_state_and_notify>
	return 0;
   2a6aa:	e7d3      	b.n	2a654 <state_ua_pin_wait+0x40>
   2a6ac:	00041c2c 	.word	0x00041c2c
   2a6b0:	00041d1c 	.word	0x00041d1c
   2a6b4:	00046480 	.word	0x00046480
   2a6b8:	000464a1 	.word	0x000464a1

0002a6bc <cc_connection_handler>:

	return 0;
}

static int cc_connection_handler(const struct nct_evt *nct_evt)
{
   2a6bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2a6be:	4604      	mov	r4, r0
		.opcode = NCT_CC_OPCODE_GET_REQ,
		.id = CLOUD_STATE_REQ_ID,
	};

	int err;
	const struct nrf_cloud_evt evt = {
   2a6c0:	2100      	movs	r1, #0
   2a6c2:	2210      	movs	r2, #16
   2a6c4:	4668      	mov	r0, sp
   2a6c6:	f015 ffc9 	bl	4065c <memset>
   2a6ca:	23ff      	movs	r3, #255	; 0xff
		.type = NRF_CLOUD_EVT_ERROR,
	};

	if (nct_evt->status != 0) {
   2a6cc:	6821      	ldr	r1, [r4, #0]
	const struct nrf_cloud_evt evt = {
   2a6ce:	f88d 3000 	strb.w	r3, [sp]
	if (nct_evt->status != 0) {
   2a6d2:	b139      	cbz	r1, 2a6e4 <cc_connection_handler+0x28>
		nfsm_set_current_state_and_notify(STATE_ERROR, &evt);
   2a6d4:	4669      	mov	r1, sp
   2a6d6:	200c      	movs	r0, #12
   2a6d8:	f7ff fb92 	bl	29e00 <nfsm_set_current_state_and_notify>
		return 0;
   2a6dc:	2400      	movs	r4, #0
	}

	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);

	return 0;
}
   2a6de:	4620      	mov	r0, r4
   2a6e0:	b004      	add	sp, #16
   2a6e2:	bd10      	pop	{r4, pc}
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTED, NULL);
   2a6e4:	2004      	movs	r0, #4
   2a6e6:	f7ff fb8b 	bl	29e00 <nfsm_set_current_state_and_notify>
	err = nct_cc_send(&get_request);
   2a6ea:	4806      	ldr	r0, [pc, #24]	; (2a704 <cc_connection_handler+0x48>)
   2a6ec:	f000 ff06 	bl	2b4fc <nct_cc_send>
	if (err) {
   2a6f0:	4604      	mov	r4, r0
   2a6f2:	b120      	cbz	r0, 2a6fe <cc_connection_handler+0x42>
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2a6f4:	4669      	mov	r1, sp
   2a6f6:	2002      	movs	r0, #2
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   2a6f8:	f7ff fb82 	bl	29e00 <nfsm_set_current_state_and_notify>
	return 0;
   2a6fc:	e7ef      	b.n	2a6de <cc_connection_handler+0x22>
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   2a6fe:	4601      	mov	r1, r0
   2a700:	2005      	movs	r0, #5
   2a702:	e7f9      	b.n	2a6f8 <cc_connection_handler+0x3c>
   2a704:	000424e8 	.word	0x000424e8

0002a708 <cc_rx_data_handler>:

	return state_ua_pin_complete();
}

static int cc_rx_data_handler(const struct nct_evt *nct_evt)
{
   2a708:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	enum nfsm_state new_state;
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
	bool config_found = false;
   2a70a:	2700      	movs	r7, #0
{
   2a70c:	b091      	sub	sp, #68	; 0x44
   2a70e:	4605      	mov	r5, r0
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
   2a710:	6844      	ldr	r4, [r0, #4]
	bool config_found = false;
   2a712:	f88d 7007 	strb.w	r7, [sp, #7]
	const enum nfsm_state current_state = nfsm_get_current_state();
   2a716:	f7ff fb6d 	bl	29df4 <nfsm_get_current_state>
	struct nct_cc_data msg = {
   2a71a:	2210      	movs	r2, #16
   2a71c:	4639      	mov	r1, r7
	const enum nfsm_state current_state = nfsm_get_current_state();
   2a71e:	4606      	mov	r6, r0
	struct nct_cc_data msg = {
   2a720:	a808      	add	r0, sp, #32
   2a722:	f015 ff9b 	bl	4065c <memset>
   2a726:	2301      	movs	r3, #1
	struct nrf_cloud_evt cloud_evt = {
   2a728:	2210      	movs	r2, #16
   2a72a:	4639      	mov	r1, r7
   2a72c:	a80c      	add	r0, sp, #48	; 0x30
	struct nct_cc_data msg = {
   2a72e:	930a      	str	r3, [sp, #40]	; 0x28
   2a730:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	struct nrf_cloud_evt cloud_evt = {
   2a734:	f015 ff92 	bl	4065c <memset>
   2a738:	2306      	movs	r3, #6
	if (evt->param.cc == NULL) {
   2a73a:	6868      	ldr	r0, [r5, #4]
	struct nrf_cloud_evt cloud_evt = {
   2a73c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	if (evt->param.cc == NULL) {
   2a740:	b1b0      	cbz	r0, 2a770 <cc_rx_data_handler+0x68>
	err = nrf_cloud_encode_config_response(&evt->param.cc->data, &msg.data,
   2a742:	f10d 0207 	add.w	r2, sp, #7
   2a746:	a908      	add	r1, sp, #32
   2a748:	f7ff fd12 	bl	2a170 <nrf_cloud_encode_config_response>
	if ((err) && (err != -ESRCH)) {
   2a74c:	4602      	mov	r2, r0
   2a74e:	b370      	cbz	r0, 2a7ae <cc_rx_data_handler+0xa6>
   2a750:	1cc3      	adds	r3, r0, #3
   2a752:	d02c      	beq.n	2a7ae <cc_rx_data_handler+0xa6>
		LOG_ERR("nrf_cloud_encode_config_response failed %d", err);
   2a754:	2301      	movs	r3, #1
   2a756:	f04f 0000 	mov.w	r0, #0
   2a75a:	4969      	ldr	r1, [pc, #420]	; (2a900 <cc_rx_data_handler+0x1f8>)
   2a75c:	f363 0007 	bfi	r0, r3, #0, #8
   2a760:	4b68      	ldr	r3, [pc, #416]	; (2a904 <cc_rx_data_handler+0x1fc>)
   2a762:	1a5b      	subs	r3, r3, r1
   2a764:	08db      	lsrs	r3, r3, #3
   2a766:	f363 108f 	bfi	r0, r3, #6, #10
   2a76a:	4967      	ldr	r1, [pc, #412]	; (2a908 <cc_rx_data_handler+0x200>)
   2a76c:	f013 fbf9 	bl	3df62 <log_string_sync>

	handle_device_config_update(nct_evt, &config_found);

	err = nrf_cloud_decode_requested_state(payload, &new_state);
   2a770:	4620      	mov	r0, r4
   2a772:	f10d 0106 	add.w	r1, sp, #6
   2a776:	f7ff fc35 	bl	29fe4 <nrf_cloud_decode_requested_state>

	if (err) {
   2a77a:	4604      	mov	r4, r0
   2a77c:	2800      	cmp	r0, #0
   2a77e:	d03f      	beq.n	2a800 <cc_rx_data_handler+0xf8>
		if (!config_found) {
   2a780:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2a784:	2b00      	cmp	r3, #0
   2a786:	f040 80b8 	bne.w	2a8fa <cc_rx_data_handler+0x1f2>
			LOG_ERR("nrf_cloud_decode_requested_state Failed %d",
   2a78a:	2301      	movs	r3, #1
   2a78c:	f04f 0000 	mov.w	r0, #0
   2a790:	4a5b      	ldr	r2, [pc, #364]	; (2a900 <cc_rx_data_handler+0x1f8>)
   2a792:	f363 0007 	bfi	r0, r3, #0, #8
   2a796:	4b5b      	ldr	r3, [pc, #364]	; (2a904 <cc_rx_data_handler+0x1fc>)
   2a798:	495c      	ldr	r1, [pc, #368]	; (2a90c <cc_rx_data_handler+0x204>)
   2a79a:	1a9b      	subs	r3, r3, r2
   2a79c:	4622      	mov	r2, r4
   2a79e:	08db      	lsrs	r3, r3, #3
   2a7a0:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   2a7a4:	f013 fbdd 	bl	3df62 <log_string_sync>
	default:
		break;
	}

	return 0;
}
   2a7a8:	4620      	mov	r0, r4
   2a7aa:	b011      	add	sp, #68	; 0x44
   2a7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (*config_found == false) {
   2a7ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2a7b2:	2b00      	cmp	r3, #0
   2a7b4:	d0dc      	beq.n	2a770 <cc_rx_data_handler+0x68>
	if (msg.data.ptr) {
   2a7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a7b8:	b1b3      	cbz	r3, 2a7e8 <cc_rx_data_handler+0xe0>
		err = nct_cc_send(&msg);
   2a7ba:	a808      	add	r0, sp, #32
   2a7bc:	f000 fe9e 	bl	2b4fc <nct_cc_send>
   2a7c0:	4607      	mov	r7, r0
		nrf_cloud_free((void *)msg.data.ptr);
   2a7c2:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a7c4:	f015 fd87 	bl	402d6 <k_free>
		if (err) {
   2a7c8:	b177      	cbz	r7, 2a7e8 <cc_rx_data_handler+0xe0>
			LOG_ERR("nct_cc_send failed %d", err);
   2a7ca:	2301      	movs	r3, #1
   2a7cc:	f04f 0000 	mov.w	r0, #0
   2a7d0:	4a4b      	ldr	r2, [pc, #300]	; (2a900 <cc_rx_data_handler+0x1f8>)
   2a7d2:	f363 0007 	bfi	r0, r3, #0, #8
   2a7d6:	4b4b      	ldr	r3, [pc, #300]	; (2a904 <cc_rx_data_handler+0x1fc>)
   2a7d8:	494d      	ldr	r1, [pc, #308]	; (2a910 <cc_rx_data_handler+0x208>)
   2a7da:	1a9b      	subs	r3, r3, r2
   2a7dc:	08db      	lsrs	r3, r3, #3
   2a7de:	f363 108f 	bfi	r0, r3, #6, #10
   2a7e2:	463a      	mov	r2, r7
   2a7e4:	f013 fbbd 	bl	3df62 <log_string_sync>
	cloud_evt.data = evt->param.cc->data;
   2a7e8:	686b      	ldr	r3, [r5, #4]
   2a7ea:	e893 0003 	ldmia.w	r3, {r0, r1}
   2a7ee:	ab10      	add	r3, sp, #64	; 0x40
   2a7f0:	e903 0003 	stmdb	r3, {r0, r1}
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   2a7f4:	f7ff fafe 	bl	29df4 <nfsm_get_current_state>
   2a7f8:	a90c      	add	r1, sp, #48	; 0x30
   2a7fa:	f7ff fb01 	bl	29e00 <nfsm_set_current_state_and_notify>
	return err;
   2a7fe:	e7b7      	b.n	2a770 <cc_rx_data_handler+0x68>
	switch (current_state) {
   2a800:	3e04      	subs	r6, #4
   2a802:	2e05      	cmp	r6, #5
   2a804:	d8d0      	bhi.n	2a7a8 <cc_rx_data_handler+0xa0>
   2a806:	e8df f006 	tbb	[pc, r6]
   2a80a:	0303      	.short	0x0303
   2a80c:	70700303 	.word	0x70700303
		if (new_state == STATE_UA_PIN_COMPLETE) {
   2a810:	f89d 6006 	ldrb.w	r6, [sp, #6]
   2a814:	2e07      	cmp	r6, #7
   2a816:	d161      	bne.n	2a8dc <cc_rx_data_handler+0x1d4>
	err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx, &endpoint);
   2a818:	ab06      	add	r3, sp, #24
   2a81a:	aa02      	add	r2, sp, #8
   2a81c:	a904      	add	r1, sp, #16
   2a81e:	6868      	ldr	r0, [r5, #4]
   2a820:	f7ff fe34 	bl	2a48c <nrf_cloud_decode_data_endpoint>
	if (err) {
   2a824:	4604      	mov	r4, r0
   2a826:	b168      	cbz	r0, 2a844 <cc_rx_data_handler+0x13c>
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   2a828:	2301      	movs	r3, #1
   2a82a:	f04f 0000 	mov.w	r0, #0
   2a82e:	4a34      	ldr	r2, [pc, #208]	; (2a900 <cc_rx_data_handler+0x1f8>)
   2a830:	f363 0007 	bfi	r0, r3, #0, #8
   2a834:	4b33      	ldr	r3, [pc, #204]	; (2a904 <cc_rx_data_handler+0x1fc>)
   2a836:	4937      	ldr	r1, [pc, #220]	; (2a914 <cc_rx_data_handler+0x20c>)
   2a838:	1a9b      	subs	r3, r3, r2
   2a83a:	08db      	lsrs	r3, r3, #3
   2a83c:	f363 108f 	bfi	r0, r3, #6, #10
   2a840:	4622      	mov	r2, r4
   2a842:	e7af      	b.n	2a7a4 <cc_rx_data_handler+0x9c>
	nct_dc_endpoint_set(&tx, &rx, &endpoint);
   2a844:	aa06      	add	r2, sp, #24
   2a846:	a902      	add	r1, sp, #8
   2a848:	a804      	add	r0, sp, #16
   2a84a:	f000 fed5 	bl	2b5f8 <nct_dc_endpoint_set>
	struct nct_cc_data msg = {
   2a84e:	4621      	mov	r1, r4
   2a850:	2210      	movs	r2, #16
   2a852:	a808      	add	r0, sp, #32
   2a854:	f015 ff02 	bl	4065c <memset>
   2a858:	f641 63d2 	movw	r3, #7890	; 0x1ed2
   2a85c:	930a      	str	r3, [sp, #40]	; 0x28
   2a85e:	2301      	movs	r3, #1
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   2a860:	a908      	add	r1, sp, #32
   2a862:	4630      	mov	r0, r6
	struct nct_cc_data msg = {
   2a864:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   2a868:	f7ff fd36 	bl	2a2d8 <nrf_cloud_encode_state>
	if (err) {
   2a86c:	4604      	mov	r4, r0
   2a86e:	b168      	cbz	r0, 2a88c <cc_rx_data_handler+0x184>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2a870:	2301      	movs	r3, #1
   2a872:	f04f 0000 	mov.w	r0, #0
   2a876:	4a22      	ldr	r2, [pc, #136]	; (2a900 <cc_rx_data_handler+0x1f8>)
   2a878:	f363 0007 	bfi	r0, r3, #0, #8
   2a87c:	4b21      	ldr	r3, [pc, #132]	; (2a904 <cc_rx_data_handler+0x1fc>)
   2a87e:	4926      	ldr	r1, [pc, #152]	; (2a918 <cc_rx_data_handler+0x210>)
   2a880:	1a9b      	subs	r3, r3, r2
   2a882:	08db      	lsrs	r3, r3, #3
   2a884:	f363 108f 	bfi	r0, r3, #6, #10
   2a888:	4622      	mov	r2, r4
   2a88a:	e78b      	b.n	2a7a4 <cc_rx_data_handler+0x9c>
	err = nct_cc_send(&msg);
   2a88c:	a808      	add	r0, sp, #32
   2a88e:	f000 fe35 	bl	2b4fc <nct_cc_send>
	if (err) {
   2a892:	4604      	mov	r4, r0
   2a894:	b190      	cbz	r0, 2a8bc <cc_rx_data_handler+0x1b4>
		LOG_ERR("nct_cc_send failed %d", err);
   2a896:	2301      	movs	r3, #1
   2a898:	f04f 0000 	mov.w	r0, #0
   2a89c:	4a18      	ldr	r2, [pc, #96]	; (2a900 <cc_rx_data_handler+0x1f8>)
   2a89e:	f363 0007 	bfi	r0, r3, #0, #8
   2a8a2:	4b18      	ldr	r3, [pc, #96]	; (2a904 <cc_rx_data_handler+0x1fc>)
   2a8a4:	491a      	ldr	r1, [pc, #104]	; (2a910 <cc_rx_data_handler+0x208>)
   2a8a6:	1a9b      	subs	r3, r3, r2
   2a8a8:	08db      	lsrs	r3, r3, #3
   2a8aa:	f363 108f 	bfi	r0, r3, #6, #10
   2a8ae:	4622      	mov	r2, r4
   2a8b0:	f013 fb57 	bl	3df62 <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   2a8b4:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a8b6:	f015 fd0e 	bl	402d6 <k_free>
		return err;
   2a8ba:	e775      	b.n	2a7a8 <cc_rx_data_handler+0xa0>
	nrf_cloud_free((void *)msg.data.ptr);
   2a8bc:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a8be:	f015 fd0a 	bl	402d6 <k_free>
	struct nrf_cloud_evt evt = {
   2a8c2:	4621      	mov	r1, r4
   2a8c4:	2210      	movs	r2, #16
   2a8c6:	a80c      	add	r0, sp, #48	; 0x30
   2a8c8:	f015 fec8 	bl	4065c <memset>
   2a8cc:	2303      	movs	r3, #3
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   2a8ce:	a90c      	add	r1, sp, #48	; 0x30
   2a8d0:	4630      	mov	r0, r6
	struct nrf_cloud_evt evt = {
   2a8d2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   2a8d6:	f7ff fa93 	bl	29e00 <nfsm_set_current_state_and_notify>
			return handle_pin_complete(nct_evt);
   2a8da:	e765      	b.n	2a7a8 <cc_rx_data_handler+0xa0>
		} else if (new_state == STATE_UA_PIN_WAIT) {
   2a8dc:	2e06      	cmp	r6, #6
   2a8de:	f47f af63 	bne.w	2a7a8 <cc_rx_data_handler+0xa0>
			return state_ua_pin_wait();
   2a8e2:	f7ff fe97 	bl	2a614 <state_ua_pin_wait>
   2a8e6:	4604      	mov	r4, r0
   2a8e8:	e75e      	b.n	2a7a8 <cc_rx_data_handler+0xa0>
		if (new_state == STATE_UA_PIN_WAIT) {
   2a8ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2a8ee:	2b06      	cmp	r3, #6
   2a8f0:	f47f af5a 	bne.w	2a7a8 <cc_rx_data_handler+0xa0>
			(void)nct_dc_disconnect();
   2a8f4:	f000 ff66 	bl	2b7c4 <nct_dc_disconnect>
   2a8f8:	e7f3      	b.n	2a8e2 <cc_rx_data_handler+0x1da>
		return 0;
   2a8fa:	2400      	movs	r4, #0
   2a8fc:	e754      	b.n	2a7a8 <cc_rx_data_handler+0xa0>
   2a8fe:	bf00      	nop
   2a900:	00041c2c 	.word	0x00041c2c
   2a904:	00041d1c 	.word	0x00041d1c
   2a908:	0004636f 	.word	0x0004636f
   2a90c:	0004639a 	.word	0x0004639a
   2a910:	000464a1 	.word	0x000464a1
   2a914:	000463c5 	.word	0x000463c5
   2a918:	00046480 	.word	0x00046480

0002a91c <nfsm_handle_incoming_event>:
{
   2a91c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a91e:	460d      	mov	r5, r1
	if ((nct_evt == NULL) || (nct_evt->type >= NCT_EVT_TOTAL) ||
   2a920:	4607      	mov	r7, r0
   2a922:	b120      	cbz	r0, 2a92e <nfsm_handle_incoming_event+0x12>
   2a924:	7a06      	ldrb	r6, [r0, #8]
   2a926:	2e09      	cmp	r6, #9
   2a928:	d801      	bhi.n	2a92e <nfsm_handle_incoming_event+0x12>
   2a92a:	290c      	cmp	r1, #12
   2a92c:	d90e      	bls.n	2a94c <nfsm_handle_incoming_event+0x30>
		__ASSERT_NO_MSG(false);
   2a92e:	2384      	movs	r3, #132	; 0x84
   2a930:	4a1e      	ldr	r2, [pc, #120]	; (2a9ac <nfsm_handle_incoming_event+0x90>)
   2a932:	491f      	ldr	r1, [pc, #124]	; (2a9b0 <nfsm_handle_incoming_event+0x94>)
   2a934:	481f      	ldr	r0, [pc, #124]	; (2a9b4 <nfsm_handle_incoming_event+0x98>)
   2a936:	f013 fab0 	bl	3de9a <printk>
   2a93a:	2184      	movs	r1, #132	; 0x84
   2a93c:	481b      	ldr	r0, [pc, #108]	; (2a9ac <nfsm_handle_incoming_event+0x90>)
   2a93e:	f013 faff 	bl	3df40 <assert_post_action>
		return -EINVAL;
   2a942:	f06f 0415 	mvn.w	r4, #21
}
   2a946:	4620      	mov	r0, r4
   2a948:	b003      	add	sp, #12
   2a94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state_event_handlers[state][nct_evt->type] != NULL) {
   2a94c:	4b1a      	ldr	r3, [pc, #104]	; (2a9b8 <nfsm_handle_incoming_event+0x9c>)
   2a94e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   2a952:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   2a956:	b1a4      	cbz	r4, 2a982 <nfsm_handle_incoming_event+0x66>
		err = state_event_handlers[state][nct_evt->type](nct_evt);
   2a958:	47a0      	blx	r4
		if (err) {
   2a95a:	4604      	mov	r4, r0
   2a95c:	2800      	cmp	r0, #0
   2a95e:	d0f2      	beq.n	2a946 <nfsm_handle_incoming_event+0x2a>
			LOG_ERR("Handler failed! state: %d, type: %d", state,
   2a960:	2301      	movs	r3, #1
   2a962:	f04f 0000 	mov.w	r0, #0
   2a966:	4a15      	ldr	r2, [pc, #84]	; (2a9bc <nfsm_handle_incoming_event+0xa0>)
   2a968:	f363 0007 	bfi	r0, r3, #0, #8
   2a96c:	4b14      	ldr	r3, [pc, #80]	; (2a9c0 <nfsm_handle_incoming_event+0xa4>)
   2a96e:	4915      	ldr	r1, [pc, #84]	; (2a9c4 <nfsm_handle_incoming_event+0xa8>)
   2a970:	1a9b      	subs	r3, r3, r2
   2a972:	08db      	lsrs	r3, r3, #3
   2a974:	f363 108f 	bfi	r0, r3, #6, #10
   2a978:	462a      	mov	r2, r5
   2a97a:	7a3b      	ldrb	r3, [r7, #8]
   2a97c:	f013 faf1 	bl	3df62 <log_string_sync>
   2a980:	e7e1      	b.n	2a946 <nfsm_handle_incoming_event+0x2a>
	LOG_DBG("Dropping FSM transition %d, current state %d", nct_evt->type,
   2a982:	2304      	movs	r3, #4
   2a984:	f04f 0500 	mov.w	r5, #0
   2a988:	4a0d      	ldr	r2, [pc, #52]	; (2a9c0 <nfsm_handle_incoming_event+0xa4>)
   2a98a:	f363 0507 	bfi	r5, r3, #0, #8
   2a98e:	4b0b      	ldr	r3, [pc, #44]	; (2a9bc <nfsm_handle_incoming_event+0xa0>)
   2a990:	1ad2      	subs	r2, r2, r3
   2a992:	08d2      	lsrs	r2, r2, #3
   2a994:	f362 158f 	bfi	r5, r2, #6, #10
   2a998:	f7ff fa2c 	bl	29df4 <nfsm_get_current_state>
   2a99c:	4633      	mov	r3, r6
   2a99e:	9000      	str	r0, [sp, #0]
   2a9a0:	4a09      	ldr	r2, [pc, #36]	; (2a9c8 <nfsm_handle_incoming_event+0xac>)
   2a9a2:	490a      	ldr	r1, [pc, #40]	; (2a9cc <nfsm_handle_incoming_event+0xb0>)
   2a9a4:	4628      	mov	r0, r5
   2a9a6:	f013 fadc 	bl	3df62 <log_string_sync>
	return 0;
   2a9aa:	e7cc      	b.n	2a946 <nfsm_handle_incoming_event+0x2a>
   2a9ac:	000463ee 	.word	0x000463ee
   2a9b0:	00048cfb 	.word	0x00048cfb
   2a9b4:	00043278 	.word	0x00043278
   2a9b8:	00042548 	.word	0x00042548
   2a9bc:	00041c2c 	.word	0x00041c2c
   2a9c0:	00041d1c 	.word	0x00041d1c
   2a9c4:	0004642b 	.word	0x0004642b
   2a9c8:	0004635c 	.word	0x0004635c
   2a9cc:	0004644f 	.word	0x0004644f

0002a9d0 <dc_endpoint_reset>:
};

/* Internal routine to reset data endpoint information. */
static void dc_endpoint_reset(void)
{
	nct.dc_rx_endp.utf8 = NULL;
   2a9d0:	2200      	movs	r2, #0
   2a9d2:	4b05      	ldr	r3, [pc, #20]	; (2a9e8 <dc_endpoint_reset+0x18>)
	nct.dc_rx_endp.size = 0;
   2a9d4:	e9c3 222d 	strd	r2, r2, [r3, #180]	; 0xb4

	nct.dc_tx_endp.utf8 = NULL;
	nct.dc_tx_endp.size = 0;
   2a9d8:	e9c3 222b 	strd	r2, r2, [r3, #172]	; 0xac

	nct.dc_m_endp.utf8 = NULL;
	nct.dc_m_endp.size = 0;
   2a9dc:	e9c3 222f 	strd	r2, r2, [r3, #188]	; 0xbc

	nct.job_status_endp.utf8 = NULL;
	nct.job_status_endp.size = 0;
   2a9e0:	e9c3 2231 	strd	r2, r2, [r3, #196]	; 0xc4
}
   2a9e4:	4770      	bx	lr
   2a9e6:	bf00      	nop
   2a9e8:	20023c90 	.word	0x20023c90

0002a9ec <aws_fota_cb_handler>:
	return mqtt_publish(&nct.client, &publish);
}

/* Handle AWS FOTA events */
static void aws_fota_cb_handler(struct aws_fota_event *fota_evt)
{
   2a9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (fota_evt == NULL) {
   2a9f0:	4606      	mov	r6, r0
{
   2a9f2:	b08c      	sub	sp, #48	; 0x30
	if (fota_evt == NULL) {
   2a9f4:	b380      	cbz	r0, 2aa58 <aws_fota_cb_handler+0x6c>
		return;
	}

	char fota_status[JOB_STATUS_STR_LEN] = { 0 };
   2a9f6:	af02      	add	r7, sp, #8
   2a9f8:	220d      	movs	r2, #13
   2a9fa:	2100      	movs	r1, #0
   2a9fc:	4638      	mov	r0, r7
   2a9fe:	f015 fe2d 	bl	4065c <memset>
	struct nct_dc_data prog;
	int err;

	switch (fota_evt->id) {
   2aa02:	7833      	ldrb	r3, [r6, #0]
   2aa04:	2b05      	cmp	r3, #5
   2aa06:	d827      	bhi.n	2aa58 <aws_fota_cb_handler+0x6c>
   2aa08:	e8df f003 	tbb	[pc, r3]
   2aa0c:	40602903 	.word	0x40602903
   2aa10:	7450      	.short	0x7450
	case AWS_FOTA_EVT_START:
		LOG_DBG("AWS_FOTA_EVT_START");
   2aa12:	2304      	movs	r3, #4
   2aa14:	f04f 0000 	mov.w	r0, #0
   2aa18:	4c7b      	ldr	r4, [pc, #492]	; (2ac08 <aws_fota_cb_handler+0x21c>)
   2aa1a:	f363 0007 	bfi	r0, r3, #0, #8
   2aa1e:	4b7b      	ldr	r3, [pc, #492]	; (2ac0c <aws_fota_cb_handler+0x220>)
		if (aws_fota_get_job_id(current_job_id, sizeof(current_job_id))
   2aa20:	4d7b      	ldr	r5, [pc, #492]	; (2ac10 <aws_fota_cb_handler+0x224>)
		LOG_DBG("AWS_FOTA_EVT_START");
   2aa22:	1ae4      	subs	r4, r4, r3
   2aa24:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2aa28:	f364 108f 	bfi	r0, r4, #6, #10
   2aa2c:	4a79      	ldr	r2, [pc, #484]	; (2ac14 <aws_fota_cb_handler+0x228>)
   2aa2e:	497a      	ldr	r1, [pc, #488]	; (2ac18 <aws_fota_cb_handler+0x22c>)
   2aa30:	f013 fa97 	bl	3df62 <log_string_sync>
		if (aws_fota_get_job_id(current_job_id, sizeof(current_job_id))
   2aa34:	2109      	movs	r1, #9
   2aa36:	4628      	mov	r0, r5
   2aa38:	f003 fa08 	bl	2de4c <aws_fota_get_job_id>
   2aa3c:	2807      	cmp	r0, #7
   2aa3e:	dc0b      	bgt.n	2aa58 <aws_fota_cb_handler+0x6c>
			< JOB_ID_LEN) {
			LOG_ERR("Failed to get current job ID");
   2aa40:	2301      	movs	r3, #1
   2aa42:	f04f 0000 	mov.w	r0, #0
   2aa46:	f363 0007 	bfi	r0, r3, #0, #8
   2aa4a:	f364 108f 	bfi	r0, r4, #6, #10
   2aa4e:	4973      	ldr	r1, [pc, #460]	; (2ac1c <aws_fota_cb_handler+0x230>)
   2aa50:	f013 fa87 	bl	3df62 <log_string_sync>
			current_job_id[0] = 0;
   2aa54:	2300      	movs	r3, #0
   2aa56:	702b      	strb	r3, [r5, #0]
		}

		last_sent_fota_progress = fota_evt->dl.progress;
		break;
	}
}
   2aa58:	b00c      	add	sp, #48	; 0x30
   2aa5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_DBG("AWS_FOTA_EVT_DONE: rebooting to apply update");
   2aa5e:	2304      	movs	r3, #4
   2aa60:	f04f 0000 	mov.w	r0, #0
   2aa64:	4a69      	ldr	r2, [pc, #420]	; (2ac0c <aws_fota_cb_handler+0x220>)
   2aa66:	f363 0007 	bfi	r0, r3, #0, #8
   2aa6a:	4b67      	ldr	r3, [pc, #412]	; (2ac08 <aws_fota_cb_handler+0x21c>)
   2aa6c:	496c      	ldr	r1, [pc, #432]	; (2ac20 <aws_fota_cb_handler+0x234>)
   2aa6e:	1a9b      	subs	r3, r3, r2
   2aa70:	08db      	lsrs	r3, r3, #3
   2aa72:	f363 108f 	bfi	r0, r3, #6, #10
   2aa76:	4a67      	ldr	r2, [pc, #412]	; (2ac14 <aws_fota_cb_handler+0x228>)
   2aa78:	f013 fa73 	bl	3df62 <log_string_sync>
		last_sent_fota_progress = 0;
   2aa7c:	2300      	movs	r3, #0
   2aa7e:	4a69      	ldr	r2, [pc, #420]	; (2ac24 <aws_fota_cb_handler+0x238>)
   2aa80:	6013      	str	r3, [r2, #0]
		current_job_id[0] = 0;
   2aa82:	4a63      	ldr	r2, [pc, #396]	; (2ac10 <aws_fota_cb_handler+0x224>)
   2aa84:	7013      	strb	r3, [r2, #0]
		nct_apply_update();
   2aa86:	f7ff fa93 	bl	29fb0 <nct_apply_update>
		break;
   2aa8a:	e7e5      	b.n	2aa58 <aws_fota_cb_handler+0x6c>
		LOG_DBG("AWS_FOTA_EVT_ERASE_PENDING: rebooting");
   2aa8c:	2304      	movs	r3, #4
   2aa8e:	f04f 0000 	mov.w	r0, #0
   2aa92:	4a5e      	ldr	r2, [pc, #376]	; (2ac0c <aws_fota_cb_handler+0x220>)
   2aa94:	f363 0007 	bfi	r0, r3, #0, #8
   2aa98:	4b5b      	ldr	r3, [pc, #364]	; (2ac08 <aws_fota_cb_handler+0x21c>)
   2aa9a:	4963      	ldr	r1, [pc, #396]	; (2ac28 <aws_fota_cb_handler+0x23c>)
   2aa9c:	1a9b      	subs	r3, r3, r2
   2aa9e:	08db      	lsrs	r3, r3, #3
   2aaa0:	f363 108f 	bfi	r0, r3, #6, #10
   2aaa4:	4a5b      	ldr	r2, [pc, #364]	; (2ac14 <aws_fota_cb_handler+0x228>)
   2aaa6:	f013 fa5c 	bl	3df62 <log_string_sync>
   2aaaa:	e7ec      	b.n	2aa86 <aws_fota_cb_handler+0x9a>
		LOG_DBG("AWS_FOTA_EVT_ERASE_DONE");
   2aaac:	2304      	movs	r3, #4
   2aaae:	f04f 0000 	mov.w	r0, #0
   2aab2:	4a56      	ldr	r2, [pc, #344]	; (2ac0c <aws_fota_cb_handler+0x220>)
   2aab4:	f363 0007 	bfi	r0, r3, #0, #8
   2aab8:	4b53      	ldr	r3, [pc, #332]	; (2ac08 <aws_fota_cb_handler+0x21c>)
   2aaba:	495c      	ldr	r1, [pc, #368]	; (2ac2c <aws_fota_cb_handler+0x240>)
   2aabc:	1a9b      	subs	r3, r3, r2
   2aabe:	08db      	lsrs	r3, r3, #3
   2aac0:	4a54      	ldr	r2, [pc, #336]	; (2ac14 <aws_fota_cb_handler+0x228>)
   2aac2:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("job_status_stream failed %d", err);
   2aac6:	f013 fa4c 	bl	3df62 <log_string_sync>
			return;
   2aaca:	e7c5      	b.n	2aa58 <aws_fota_cb_handler+0x6c>
		LOG_ERR("AWS_FOTA_EVT_ERROR");
   2aacc:	2301      	movs	r3, #1
   2aace:	f04f 0000 	mov.w	r0, #0
   2aad2:	4a4e      	ldr	r2, [pc, #312]	; (2ac0c <aws_fota_cb_handler+0x220>)
   2aad4:	f363 0007 	bfi	r0, r3, #0, #8
   2aad8:	4b4b      	ldr	r3, [pc, #300]	; (2ac08 <aws_fota_cb_handler+0x21c>)
   2aada:	4955      	ldr	r1, [pc, #340]	; (2ac30 <aws_fota_cb_handler+0x244>)
   2aadc:	1a9b      	subs	r3, r3, r2
   2aade:	08db      	lsrs	r3, r3, #3
   2aae0:	f363 108f 	bfi	r0, r3, #6, #10
   2aae4:	f013 fa3d 	bl	3df62 <log_string_sync>
		last_sent_fota_progress = 0;
   2aae8:	2300      	movs	r3, #0
   2aaea:	4a4e      	ldr	r2, [pc, #312]	; (2ac24 <aws_fota_cb_handler+0x238>)
   2aaec:	6013      	str	r3, [r2, #0]
		current_job_id[0] = 0;
   2aaee:	4a48      	ldr	r2, [pc, #288]	; (2ac10 <aws_fota_cb_handler+0x224>)
   2aaf0:	7013      	strb	r3, [r2, #0]
		break;
   2aaf2:	e7b1      	b.n	2aa58 <aws_fota_cb_handler+0x6c>
		LOG_DBG("AWS_FOTA_EVT_DL_PROGRESS");
   2aaf4:	2304      	movs	r3, #4
   2aaf6:	f04f 0000 	mov.w	r0, #0
   2aafa:	4c43      	ldr	r4, [pc, #268]	; (2ac08 <aws_fota_cb_handler+0x21c>)
   2aafc:	f363 0007 	bfi	r0, r3, #0, #8
   2ab00:	4b42      	ldr	r3, [pc, #264]	; (2ac0c <aws_fota_cb_handler+0x220>)
   2ab02:	4a44      	ldr	r2, [pc, #272]	; (2ac14 <aws_fota_cb_handler+0x228>)
   2ab04:	1ae4      	subs	r4, r4, r3
   2ab06:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2ab0a:	f364 108f 	bfi	r0, r4, #6, #10
   2ab0e:	4949      	ldr	r1, [pc, #292]	; (2ac34 <aws_fota_cb_handler+0x248>)
   2ab10:	f013 fa27 	bl	3df62 <log_string_sync>
		if ((fota_evt->dl.progress < 0) ||
   2ab14:	6872      	ldr	r2, [r6, #4]
   2ab16:	2a64      	cmp	r2, #100	; 0x64
   2ab18:	d909      	bls.n	2ab2e <aws_fota_cb_handler+0x142>
			LOG_ERR("Invalid progress value %d",
   2ab1a:	f04f 0000 	mov.w	r0, #0
   2ab1e:	2301      	movs	r3, #1
   2ab20:	f363 0007 	bfi	r0, r3, #0, #8
   2ab24:	f364 108f 	bfi	r0, r4, #6, #10
   2ab28:	4943      	ldr	r1, [pc, #268]	; (2ac38 <aws_fota_cb_handler+0x24c>)
   2ab2a:	f013 fa1a 	bl	3df62 <log_string_sync>
		if ((last_sent_fota_progress == AWS_FOTA_EVT_DL_COMPLETE_VAL) &&
   2ab2e:	4d3d      	ldr	r5, [pc, #244]	; (2ac24 <aws_fota_cb_handler+0x238>)
   2ab30:	6872      	ldr	r2, [r6, #4]
   2ab32:	682b      	ldr	r3, [r5, #0]
   2ab34:	2b64      	cmp	r3, #100	; 0x64
   2ab36:	d101      	bne.n	2ab3c <aws_fota_cb_handler+0x150>
   2ab38:	2a64      	cmp	r2, #100	; 0x64
   2ab3a:	d08d      	beq.n	2aa58 <aws_fota_cb_handler+0x6c>
		if (last_sent_fota_progress > fota_evt->dl.progress) {
   2ab3c:	4293      	cmp	r3, r2
			last_sent_fota_progress = 0;
   2ab3e:	bfc4      	itt	gt
   2ab40:	2300      	movgt	r3, #0
   2ab42:	602b      	strgt	r3, [r5, #0]
		if (current_job_id[0] == 0) {
   2ab44:	4b32      	ldr	r3, [pc, #200]	; (2ac10 <aws_fota_cb_handler+0x224>)
   2ab46:	7819      	ldrb	r1, [r3, #0]
   2ab48:	b951      	cbnz	r1, 2ab60 <aws_fota_cb_handler+0x174>
			LOG_ERR("Invalid job ID, progress will not be sent");
   2ab4a:	f04f 0000 	mov.w	r0, #0
   2ab4e:	2301      	movs	r3, #1
   2ab50:	493a      	ldr	r1, [pc, #232]	; (2ac3c <aws_fota_cb_handler+0x250>)
   2ab52:	f363 0007 	bfi	r0, r3, #0, #8
   2ab56:	f364 108f 	bfi	r0, r4, #6, #10
			LOG_ERR("Failed to create FOTA progress message");
   2ab5a:	f013 fa02 	bl	3df62 <log_string_sync>
			return;
   2ab5e:	e77b      	b.n	2aa58 <aws_fota_cb_handler+0x6c>
			snprintf(fota_status, sizeof(fota_status), "%s %d",
   2ab60:	9200      	str	r2, [sp, #0]
   2ab62:	210d      	movs	r1, #13
   2ab64:	4a36      	ldr	r2, [pc, #216]	; (2ac40 <aws_fota_cb_handler+0x254>)
   2ab66:	4638      	mov	r0, r7
   2ab68:	f011 fb36 	bl	3c1d8 <sniprintf>
		if ((prog.data.len <= 0) ||
   2ab6c:	1e43      	subs	r3, r0, #1
   2ab6e:	2b0b      	cmp	r3, #11
			snprintf(fota_status, sizeof(fota_status), "%s %d",
   2ab70:	4681      	mov	r9, r0
		if ((prog.data.len <= 0) ||
   2ab72:	d908      	bls.n	2ab86 <aws_fota_cb_handler+0x19a>
			LOG_ERR("Failed to create FOTA progress message");
   2ab74:	f04f 0000 	mov.w	r0, #0
   2ab78:	2301      	movs	r3, #1
   2ab7a:	f363 0007 	bfi	r0, r3, #0, #8
   2ab7e:	f364 108f 	bfi	r0, r4, #6, #10
   2ab82:	4930      	ldr	r1, [pc, #192]	; (2ac44 <aws_fota_cb_handler+0x258>)
   2ab84:	e7e9      	b.n	2ab5a <aws_fota_cb_handler+0x16e>
		LOG_ERR("JOB STATUS: %s", log_strdup(prog.data.ptr));
   2ab86:	2301      	movs	r3, #1
   2ab88:	f04f 0800 	mov.w	r8, #0
   2ab8c:	4638      	mov	r0, r7
   2ab8e:	f363 0807 	bfi	r8, r3, #0, #8
   2ab92:	f013 f9f8 	bl	3df86 <log_strdup>
   2ab96:	f364 188f 	bfi	r8, r4, #6, #10
   2ab9a:	4602      	mov	r2, r0
   2ab9c:	4640      	mov	r0, r8
	if (nct.job_status_endp.utf8 == NULL) {
   2ab9e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 2ac54 <aws_fota_cb_handler+0x268>
		LOG_ERR("JOB STATUS: %s", log_strdup(prog.data.ptr));
   2aba2:	4929      	ldr	r1, [pc, #164]	; (2ac48 <aws_fota_cb_handler+0x25c>)
   2aba4:	f013 f9dd 	bl	3df62 <log_string_sync>
	if (nct.job_status_endp.utf8 == NULL) {
   2aba8:	f8d8 a0c4 	ldr.w	sl, [r8, #196]	; 0xc4
   2abac:	f1ba 0f00 	cmp.w	sl, #0
   2abb0:	d114      	bne.n	2abdc <aws_fota_cb_handler+0x1f0>
		LOG_ERR("Job status topic not set");
   2abb2:	2301      	movs	r3, #1
   2abb4:	f04f 0000 	mov.w	r0, #0
   2abb8:	f363 0007 	bfi	r0, r3, #0, #8
   2abbc:	f364 108f 	bfi	r0, r4, #6, #10
   2abc0:	4922      	ldr	r1, [pc, #136]	; (2ac4c <aws_fota_cb_handler+0x260>)
   2abc2:	f013 f9ce 	bl	3df62 <log_string_sync>
		return -EACCES;
   2abc6:	f06f 020c 	mvn.w	r2, #12
			LOG_ERR("job_status_stream failed %d", err);
   2abca:	2101      	movs	r1, #1
   2abcc:	f04f 0000 	mov.w	r0, #0
   2abd0:	f361 0007 	bfi	r0, r1, #0, #8
   2abd4:	f364 108f 	bfi	r0, r4, #6, #10
   2abd8:	491d      	ldr	r1, [pc, #116]	; (2ac50 <aws_fota_cb_handler+0x264>)
   2abda:	e774      	b.n	2aac6 <aws_fota_cb_handler+0xda>
	struct mqtt_publish_param publish = {
   2abdc:	2210      	movs	r2, #16
   2abde:	2100      	movs	r1, #0
   2abe0:	a808      	add	r0, sp, #32
   2abe2:	f015 fd3b 	bl	4065c <memset>
	publish.message.topic.topic.size = nct.job_status_endp.size;
   2abe6:	f8d8 30c8 	ldr.w	r3, [r8, #200]	; 0xc8
	return mqtt_publish(&nct.client, &publish);
   2abea:	a906      	add	r1, sp, #24
   2abec:	f108 0018 	add.w	r0, r8, #24
	publish.message.topic.topic.utf8 = nct.job_status_endp.utf8;
   2abf0:	e9cd a306 	strd	sl, r3, [sp, #24]
		publish.message.payload.len = dc_data->data.len;
   2abf4:	e9cd 7909 	strd	r7, r9, [sp, #36]	; 0x24
	return mqtt_publish(&nct.client, &publish);
   2abf8:	f013 ff5a 	bl	3eab0 <mqtt_publish>
		if (err) {
   2abfc:	4602      	mov	r2, r0
   2abfe:	2800      	cmp	r0, #0
   2ac00:	d1e3      	bne.n	2abca <aws_fota_cb_handler+0x1de>
		last_sent_fota_progress = fota_evt->dl.progress;
   2ac02:	6873      	ldr	r3, [r6, #4]
   2ac04:	602b      	str	r3, [r5, #0]
		break;
   2ac06:	e727      	b.n	2aa58 <aws_fota_cb_handler+0x6c>
   2ac08:	00041d24 	.word	0x00041d24
   2ac0c:	00041c2c 	.word	0x00041c2c
   2ac10:	2002b304 	.word	0x2002b304
   2ac14:	000464eb 	.word	0x000464eb
   2ac18:	000465a4 	.word	0x000465a4
   2ac1c:	000465bb 	.word	0x000465bb
   2ac20:	000465d8 	.word	0x000465d8
   2ac24:	20023c88 	.word	0x20023c88
   2ac28:	00046609 	.word	0x00046609
   2ac2c:	00046633 	.word	0x00046633
   2ac30:	0004664f 	.word	0x0004664f
   2ac34:	00046662 	.word	0x00046662
   2ac38:	0004667f 	.word	0x0004667f
   2ac3c:	00046699 	.word	0x00046699
   2ac40:	000466c3 	.word	0x000466c3
   2ac44:	000466c9 	.word	0x000466c9
   2ac48:	000466f0 	.word	0x000466f0
   2ac4c:	000466ff 	.word	0x000466ff
   2ac50:	00046718 	.word	0x00046718
   2ac54:	20023c90 	.word	0x20023c90

0002ac58 <dc_send>:
{
   2ac58:	b530      	push	{r4, r5, lr}
   2ac5a:	460d      	mov	r5, r1
   2ac5c:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   2ac5e:	4604      	mov	r4, r0
   2ac60:	b368      	cbz	r0, 2acbe <dc_send+0x66>
	struct mqtt_publish_param publish = {
   2ac62:	2210      	movs	r2, #16
   2ac64:	2100      	movs	r1, #0
   2ac66:	a802      	add	r0, sp, #8
   2ac68:	f015 fcf8 	bl	4065c <memset>
		.message.topic.topic.utf8 = nct.dc_tx_endp.utf8,
   2ac6c:	4b15      	ldr	r3, [pc, #84]	; (2acc4 <dc_send+0x6c>)
	struct mqtt_publish_param publish = {
   2ac6e:	f88d 5008 	strb.w	r5, [sp, #8]
   2ac72:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
   2ac76:	9200      	str	r2, [sp, #0]
   2ac78:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
   2ac7c:	9201      	str	r2, [sp, #4]
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   2ac7e:	6822      	ldr	r2, [r4, #0]
   2ac80:	b11a      	cbz	r2, 2ac8a <dc_send+0x32>
   2ac82:	6861      	ldr	r1, [r4, #4]
   2ac84:	b109      	cbz	r1, 2ac8a <dc_send+0x32>
		publish.message.payload.len = dc_data->data.len;
   2ac86:	e9cd 1203 	strd	r1, r2, [sp, #12]
	if (dc_data->id != 0) {
   2ac8a:	68a2      	ldr	r2, [r4, #8]
   2ac8c:	b13a      	cbz	r2, 2ac9e <dc_send+0x46>
		publish.message_id = dc_data->id;
   2ac8e:	f8ad 2014 	strh.w	r2, [sp, #20]
	return mqtt_publish(&nct.client, &publish);
   2ac92:	4669      	mov	r1, sp
   2ac94:	480c      	ldr	r0, [pc, #48]	; (2acc8 <dc_send+0x70>)
   2ac96:	f013 ff0b 	bl	3eab0 <mqtt_publish>
}
   2ac9a:	b007      	add	sp, #28
   2ac9c:	bd30      	pop	{r4, r5, pc}
	nct.message_id++;
   2ac9e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   2aca2:	1c51      	adds	r1, r2, #1
	if ((u16_t)nct.message_id == 0) {
   2aca4:	b288      	uxth	r0, r1
   2aca6:	b130      	cbz	r0, 2acb6 <dc_send+0x5e>
	nct.message_id++;
   2aca8:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
		publish.message_id = dc_get_next_message_id();
   2acac:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
   2acb0:	f8ad 3014 	strh.w	r3, [sp, #20]
   2acb4:	e7ed      	b.n	2ac92 <dc_send+0x3a>
		nct.message_id++;
   2acb6:	3202      	adds	r2, #2
   2acb8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
   2acbc:	e7f6      	b.n	2acac <dc_send+0x54>
		return -EINVAL;
   2acbe:	f06f 0015 	mvn.w	r0, #21
   2acc2:	e7ea      	b.n	2ac9a <dc_send+0x42>
   2acc4:	20023c90 	.word	0x20023c90
   2acc8:	20023ca8 	.word	0x20023ca8

0002accc <dc_endpoint_free>:
{
   2accc:	b510      	push	{r4, lr}
	if (nct.dc_rx_endp.utf8 != NULL) {
   2acce:	4c0c      	ldr	r4, [pc, #48]	; (2ad00 <dc_endpoint_free+0x34>)
   2acd0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2acd4:	b108      	cbz	r0, 2acda <dc_endpoint_free+0xe>
		nrf_cloud_free(nct.dc_rx_endp.utf8);
   2acd6:	f015 fafe 	bl	402d6 <k_free>
	if (nct.dc_tx_endp.utf8 != NULL) {
   2acda:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   2acde:	b108      	cbz	r0, 2ace4 <dc_endpoint_free+0x18>
		nrf_cloud_free(nct.dc_tx_endp.utf8);
   2ace0:	f015 faf9 	bl	402d6 <k_free>
	if (nct.dc_m_endp.utf8 != NULL) {
   2ace4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   2ace8:	b108      	cbz	r0, 2acee <dc_endpoint_free+0x22>
		nrf_cloud_free(nct.dc_m_endp.utf8);
   2acea:	f015 faf4 	bl	402d6 <k_free>
	if (nct.job_status_endp.utf8 != NULL) {
   2acee:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   2acf2:	b108      	cbz	r0, 2acf8 <dc_endpoint_free+0x2c>
		nrf_cloud_free(nct.job_status_endp.utf8);
   2acf4:	f015 faef 	bl	402d6 <k_free>
}
   2acf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dc_endpoint_reset();
   2acfc:	f7ff be68 	b.w	2a9d0 <dc_endpoint_reset>
   2ad00:	20023c90 	.word	0x20023c90

0002ad04 <nct_mqtt_evt_handler>:
/* Handle MQTT events. */
static void nct_mqtt_evt_handler(struct mqtt_client *const mqtt_client,
				 const struct mqtt_evt *_mqtt_evt)
{
	int err;
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2ad04:	2300      	movs	r3, #0
{
   2ad06:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ad08:	b08f      	sub	sp, #60	; 0x3c
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2ad0a:	e9cd 3305 	strd	r3, r3, [sp, #20]
   2ad0e:	69cb      	ldr	r3, [r1, #28]
{
   2ad10:	4607      	mov	r7, r0
   2ad12:	460c      	mov	r4, r1
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2ad14:	9304      	str	r3, [sp, #16]
	struct nct_cc_data cc;
	struct nct_dc_data dc;
	bool event_notify = false;

#if defined(CONFIG_AWS_FOTA)
	err = aws_fota_mqtt_evt_handler(mqtt_client, _mqtt_evt);
   2ad16:	f002 fd6b 	bl	2d7f0 <aws_fota_mqtt_evt_handler>
	if (err == 0) {
   2ad1a:	1e02      	subs	r2, r0, #0
   2ad1c:	d074      	beq.n	2ae08 <nct_mqtt_evt_handler+0x104>
		/* Event handled by FOTA library so we can skip it */
		return;
	} else if (err < 0) {
   2ad1e:	da28      	bge.n	2ad72 <nct_mqtt_evt_handler+0x6e>
		LOG_ERR("aws_fota_mqtt_evt_handler: Failed! %d", err);
   2ad20:	2301      	movs	r3, #1
   2ad22:	f04f 0000 	mov.w	r0, #0
   2ad26:	4d91      	ldr	r5, [pc, #580]	; (2af6c <nct_mqtt_evt_handler+0x268>)
   2ad28:	f363 0007 	bfi	r0, r3, #0, #8
   2ad2c:	4b90      	ldr	r3, [pc, #576]	; (2af70 <nct_mqtt_evt_handler+0x26c>)
   2ad2e:	4991      	ldr	r1, [pc, #580]	; (2af74 <nct_mqtt_evt_handler+0x270>)
   2ad30:	1aed      	subs	r5, r5, r3
   2ad32:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   2ad36:	f365 108f 	bfi	r0, r5, #6, #10
   2ad3a:	f013 f912 	bl	3df62 <log_string_sync>
		LOG_DBG("Disconnecting MQTT client...");
   2ad3e:	2304      	movs	r3, #4
   2ad40:	f04f 0000 	mov.w	r0, #0
   2ad44:	f363 0007 	bfi	r0, r3, #0, #8
   2ad48:	4a8b      	ldr	r2, [pc, #556]	; (2af78 <nct_mqtt_evt_handler+0x274>)
   2ad4a:	f365 108f 	bfi	r0, r5, #6, #10
   2ad4e:	498b      	ldr	r1, [pc, #556]	; (2af7c <nct_mqtt_evt_handler+0x278>)
   2ad50:	f013 f907 	bl	3df62 <log_string_sync>

		err = mqtt_disconnect(mqtt_client);
   2ad54:	4638      	mov	r0, r7
   2ad56:	f013 ff00 	bl	3eb5a <mqtt_disconnect>
		if (err) {
   2ad5a:	4602      	mov	r2, r0
   2ad5c:	b148      	cbz	r0, 2ad72 <nct_mqtt_evt_handler+0x6e>
			LOG_ERR("Could not disconnect: %d", err);
   2ad5e:	2101      	movs	r1, #1
   2ad60:	f04f 0000 	mov.w	r0, #0
   2ad64:	f361 0007 	bfi	r0, r1, #0, #8
   2ad68:	f365 108f 	bfi	r0, r5, #6, #10
   2ad6c:	4984      	ldr	r1, [pc, #528]	; (2af80 <nct_mqtt_evt_handler+0x27c>)
   2ad6e:	f013 f8f8 	bl	3df62 <log_string_sync>
		}
	}
#endif /* defined(CONFIG_AWS_FOTA) */

	switch (_mqtt_evt->type) {
   2ad72:	7823      	ldrb	r3, [r4, #0]
   2ad74:	2b08      	cmp	r3, #8
   2ad76:	d847      	bhi.n	2ae08 <nct_mqtt_evt_handler+0x104>
   2ad78:	e8df f013 	tbh	[pc, r3, lsl #1]
   2ad7c:	00de0009 	.word	0x00de0009
   2ad80:	00c6001c 	.word	0x00c6001c
   2ad84:	00460046 	.word	0x00460046
   2ad88:	00970046 	.word	0x00970046
   2ad8c:	00b0      	.short	0x00b0
	case MQTT_EVT_CONNACK: {
		LOG_DBG("MQTT_EVT_CONNACK");
   2ad8e:	2304      	movs	r3, #4
   2ad90:	f04f 0000 	mov.w	r0, #0
   2ad94:	4a76      	ldr	r2, [pc, #472]	; (2af70 <nct_mqtt_evt_handler+0x26c>)
   2ad96:	f363 0007 	bfi	r0, r3, #0, #8
   2ad9a:	4b74      	ldr	r3, [pc, #464]	; (2af6c <nct_mqtt_evt_handler+0x268>)
   2ad9c:	4979      	ldr	r1, [pc, #484]	; (2af84 <nct_mqtt_evt_handler+0x280>)
   2ad9e:	1a9b      	subs	r3, r3, r2
   2ada0:	08db      	lsrs	r3, r3, #3
   2ada2:	f363 108f 	bfi	r0, r3, #6, #10
   2ada6:	4a74      	ldr	r2, [pc, #464]	; (2af78 <nct_mqtt_evt_handler+0x274>)
   2ada8:	f013 f8db 	bl	3df62 <log_string_sync>

		evt.type = NCT_EVT_CONNECTED;
   2adac:	2300      	movs	r3, #0
		break;
	}
	case MQTT_EVT_DISCONNECT: {
		LOG_DBG("MQTT_EVT_DISCONNECT: result = %d", _mqtt_evt->result);

		evt.type = NCT_EVT_DISCONNECTED;
   2adae:	f88d 3018 	strb.w	r3, [sp, #24]
	}
	default:
		break;
	}

	if (event_notify) {
   2adb2:	e055      	b.n	2ae60 <nct_mqtt_evt_handler+0x15c>
		LOG_DBG("MQTT_EVT_PUBLISH: id = %d len = %d",
   2adb4:	2304      	movs	r3, #4
   2adb6:	f04f 0000 	mov.w	r0, #0
   2adba:	4a6d      	ldr	r2, [pc, #436]	; (2af70 <nct_mqtt_evt_handler+0x26c>)
   2adbc:	f363 0007 	bfi	r0, r3, #0, #8
   2adc0:	4b6a      	ldr	r3, [pc, #424]	; (2af6c <nct_mqtt_evt_handler+0x268>)
   2adc2:	4971      	ldr	r1, [pc, #452]	; (2af88 <nct_mqtt_evt_handler+0x284>)
   2adc4:	1a9b      	subs	r3, r3, r2
   2adc6:	f3c3 05c9 	ubfx	r5, r3, #3, #10
   2adca:	6963      	ldr	r3, [r4, #20]
   2adcc:	4a6a      	ldr	r2, [pc, #424]	; (2af78 <nct_mqtt_evt_handler+0x274>)
   2adce:	9300      	str	r3, [sp, #0]
   2add0:	f365 108f 	bfi	r0, r5, #6, #10
   2add4:	8b23      	ldrh	r3, [r4, #24]
   2add6:	f013 f8c4 	bl	3df62 <log_string_sync>
		int err = publish_get_payload(mqtt_client,
   2adda:	6962      	ldr	r2, [r4, #20]
	if (length > sizeof(nct.payload_buf)) {
   2addc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2ade0:	d814      	bhi.n	2ae0c <nct_mqtt_evt_handler+0x108>
	return mqtt_readall_publish_payload(client, nct.payload_buf, length);
   2ade2:	496a      	ldr	r1, [pc, #424]	; (2af8c <nct_mqtt_evt_handler+0x288>)
   2ade4:	4638      	mov	r0, r7
   2ade6:	f013 ffbc 	bl	3ed62 <mqtt_readall_publish_payload>
		if (err < 0) {
   2adea:	1e02      	subs	r2, r0, #0
   2adec:	da11      	bge.n	2ae12 <nct_mqtt_evt_handler+0x10e>
			LOG_ERR("publish_get_payload: failed %d", err);
   2adee:	2301      	movs	r3, #1
   2adf0:	f04f 0000 	mov.w	r0, #0
   2adf4:	f363 0007 	bfi	r0, r3, #0, #8
   2adf8:	f365 108f 	bfi	r0, r5, #6, #10
   2adfc:	4964      	ldr	r1, [pc, #400]	; (2af90 <nct_mqtt_evt_handler+0x28c>)
   2adfe:	f013 f8b0 	bl	3df62 <log_string_sync>
			mqtt_disconnect(mqtt_client);
   2ae02:	4638      	mov	r0, r7
   2ae04:	f013 fea9 	bl	3eb5a <mqtt_disconnect>

		if (err != 0) {
			LOG_ERR("nct_input: failed %d", err);
		}
	}
}
   2ae08:	b00f      	add	sp, #60	; 0x3c
   2ae0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2ae0c:	f06f 0279 	mvn.w	r2, #121	; 0x79
   2ae10:	e7ed      	b.n	2adee <nct_mqtt_evt_handler+0xea>
	for (u32_t index = 0; index < list_size; index++) {
   2ae12:	2500      	movs	r5, #0
   2ae14:	4e5f      	ldr	r6, [pc, #380]	; (2af94 <nct_mqtt_evt_handler+0x290>)
	return (strncmp(s1, s2, MIN(s1_len, s2_len))) ? false : true;
   2ae16:	68a2      	ldr	r2, [r4, #8]
   2ae18:	6873      	ldr	r3, [r6, #4]
   2ae1a:	6831      	ldr	r1, [r6, #0]
   2ae1c:	429a      	cmp	r2, r3
   2ae1e:	bf28      	it	cs
   2ae20:	461a      	movcs	r2, r3
   2ae22:	6860      	ldr	r0, [r4, #4]
   2ae24:	f015 fdf3 	bl	40a0e <strncmp>
		if (strings_compare(
   2ae28:	2800      	cmp	r0, #0
   2ae2a:	d12e      	bne.n	2ae8a <nct_mqtt_evt_handler+0x186>
			*opcode = nct_cc_rx_opcode_map[index];
   2ae2c:	4b5a      	ldr	r3, [pc, #360]	; (2af98 <nct_mqtt_evt_handler+0x294>)
   2ae2e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   2ae32:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
			cc.id = p->message_id;
   2ae36:	8b23      	ldrh	r3, [r4, #24]
   2ae38:	930c      	str	r3, [sp, #48]	; 0x30
			cc.data.ptr = nct.payload_buf;
   2ae3a:	4b54      	ldr	r3, [pc, #336]	; (2af8c <nct_mqtt_evt_handler+0x288>)
   2ae3c:	930b      	str	r3, [sp, #44]	; 0x2c
			cc.data.len = p->message.payload.len;
   2ae3e:	6963      	ldr	r3, [r4, #20]
   2ae40:	930a      	str	r3, [sp, #40]	; 0x28
			evt.type = NCT_EVT_CC_RX_DATA;
   2ae42:	2303      	movs	r3, #3
   2ae44:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.cc = &cc;
   2ae48:	ab0a      	add	r3, sp, #40	; 0x28
			evt.param.dc = &dc;
   2ae4a:	9305      	str	r3, [sp, #20]
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   2ae4c:	7b23      	ldrb	r3, [r4, #12]
   2ae4e:	2b01      	cmp	r3, #1
   2ae50:	d106      	bne.n	2ae60 <nct_mqtt_evt_handler+0x15c>
			const struct mqtt_puback_param ack = {
   2ae52:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   2ae54:	a903      	add	r1, sp, #12
   2ae56:	4638      	mov	r0, r7
			const struct mqtt_puback_param ack = {
   2ae58:	f8ad 300c 	strh.w	r3, [sp, #12]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   2ae5c:	f013 fe56 	bl	3eb0c <mqtt_publish_qos1_ack>
		err = nct_input(&evt);
   2ae60:	a804      	add	r0, sp, #16
   2ae62:	f7ff f89f 	bl	29fa4 <nct_input>
		if (err != 0) {
   2ae66:	4602      	mov	r2, r0
   2ae68:	2800      	cmp	r0, #0
   2ae6a:	d0cd      	beq.n	2ae08 <nct_mqtt_evt_handler+0x104>
			LOG_ERR("nct_input: failed %d", err);
   2ae6c:	2301      	movs	r3, #1
   2ae6e:	f04f 0000 	mov.w	r0, #0
   2ae72:	493f      	ldr	r1, [pc, #252]	; (2af70 <nct_mqtt_evt_handler+0x26c>)
   2ae74:	f363 0007 	bfi	r0, r3, #0, #8
   2ae78:	4b3c      	ldr	r3, [pc, #240]	; (2af6c <nct_mqtt_evt_handler+0x268>)
   2ae7a:	1a5b      	subs	r3, r3, r1
   2ae7c:	08db      	lsrs	r3, r3, #3
   2ae7e:	f363 108f 	bfi	r0, r3, #6, #10
   2ae82:	4946      	ldr	r1, [pc, #280]	; (2af9c <nct_mqtt_evt_handler+0x298>)
   2ae84:	f013 f86d 	bl	3df62 <log_string_sync>
   2ae88:	e7be      	b.n	2ae08 <nct_mqtt_evt_handler+0x104>
	for (u32_t index = 0; index < list_size; index++) {
   2ae8a:	3501      	adds	r5, #1
   2ae8c:	2d03      	cmp	r5, #3
   2ae8e:	f106 060c 	add.w	r6, r6, #12
   2ae92:	d1c0      	bne.n	2ae16 <nct_mqtt_evt_handler+0x112>
			dc.id = p->message_id;
   2ae94:	8b23      	ldrh	r3, [r4, #24]
   2ae96:	9309      	str	r3, [sp, #36]	; 0x24
			dc.data.ptr = nct.payload_buf;
   2ae98:	4b3c      	ldr	r3, [pc, #240]	; (2af8c <nct_mqtt_evt_handler+0x288>)
   2ae9a:	9308      	str	r3, [sp, #32]
			dc.data.len = p->message.payload.len;
   2ae9c:	6963      	ldr	r3, [r4, #20]
   2ae9e:	9307      	str	r3, [sp, #28]
			evt.type = NCT_EVT_DC_RX_DATA;
   2aea0:	2305      	movs	r3, #5
   2aea2:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.dc = &dc;
   2aea6:	ab07      	add	r3, sp, #28
   2aea8:	e7cf      	b.n	2ae4a <nct_mqtt_evt_handler+0x146>
		LOG_DBG("MQTT_EVT_SUBACK: id = %d result = %d",
   2aeaa:	2304      	movs	r3, #4
   2aeac:	f04f 0000 	mov.w	r0, #0
   2aeb0:	4a2f      	ldr	r2, [pc, #188]	; (2af70 <nct_mqtt_evt_handler+0x26c>)
   2aeb2:	f363 0007 	bfi	r0, r3, #0, #8
   2aeb6:	4b2d      	ldr	r3, [pc, #180]	; (2af6c <nct_mqtt_evt_handler+0x268>)
   2aeb8:	4939      	ldr	r1, [pc, #228]	; (2afa0 <nct_mqtt_evt_handler+0x29c>)
   2aeba:	1a9b      	subs	r3, r3, r2
   2aebc:	08db      	lsrs	r3, r3, #3
   2aebe:	f363 108f 	bfi	r0, r3, #6, #10
   2aec2:	69e3      	ldr	r3, [r4, #28]
   2aec4:	4a2c      	ldr	r2, [pc, #176]	; (2af78 <nct_mqtt_evt_handler+0x274>)
   2aec6:	9300      	str	r3, [sp, #0]
   2aec8:	88a3      	ldrh	r3, [r4, #4]
   2aeca:	f013 f84a 	bl	3df62 <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   2aece:	f240 42d2 	movw	r2, #1234	; 0x4d2
   2aed2:	88a3      	ldrh	r3, [r4, #4]
   2aed4:	4293      	cmp	r3, r2
   2aed6:	d141      	bne.n	2af5c <nct_mqtt_evt_handler+0x258>
			evt.type = NCT_EVT_CC_CONNECTED;
   2aed8:	2301      	movs	r3, #1
   2aeda:	e768      	b.n	2adae <nct_mqtt_evt_handler+0xaa>
		LOG_DBG("MQTT_EVT_UNSUBACK");
   2aedc:	2304      	movs	r3, #4
   2aede:	f04f 0000 	mov.w	r0, #0
   2aee2:	4a23      	ldr	r2, [pc, #140]	; (2af70 <nct_mqtt_evt_handler+0x26c>)
   2aee4:	f363 0007 	bfi	r0, r3, #0, #8
   2aee8:	4b20      	ldr	r3, [pc, #128]	; (2af6c <nct_mqtt_evt_handler+0x268>)
   2aeea:	492e      	ldr	r1, [pc, #184]	; (2afa4 <nct_mqtt_evt_handler+0x2a0>)
   2aeec:	1a9b      	subs	r3, r3, r2
   2aeee:	08db      	lsrs	r3, r3, #3
   2aef0:	f363 108f 	bfi	r0, r3, #6, #10
   2aef4:	4a20      	ldr	r2, [pc, #128]	; (2af78 <nct_mqtt_evt_handler+0x274>)
   2aef6:	f013 f834 	bl	3df62 <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   2aefa:	f240 43d2 	movw	r3, #1234	; 0x4d2
   2aefe:	88a2      	ldrh	r2, [r4, #4]
   2af00:	429a      	cmp	r2, r3
   2af02:	d181      	bne.n	2ae08 <nct_mqtt_evt_handler+0x104>
			evt.type = NCT_EVT_CC_DISCONNECTED;
   2af04:	2307      	movs	r3, #7
   2af06:	e752      	b.n	2adae <nct_mqtt_evt_handler+0xaa>
		LOG_DBG("MQTT_EVT_PUBACK: id = %d result = %d",
   2af08:	2304      	movs	r3, #4
   2af0a:	f04f 0000 	mov.w	r0, #0
   2af0e:	4a18      	ldr	r2, [pc, #96]	; (2af70 <nct_mqtt_evt_handler+0x26c>)
   2af10:	f363 0007 	bfi	r0, r3, #0, #8
   2af14:	4b15      	ldr	r3, [pc, #84]	; (2af6c <nct_mqtt_evt_handler+0x268>)
   2af16:	4924      	ldr	r1, [pc, #144]	; (2afa8 <nct_mqtt_evt_handler+0x2a4>)
   2af18:	1a9b      	subs	r3, r3, r2
   2af1a:	08db      	lsrs	r3, r3, #3
   2af1c:	f363 108f 	bfi	r0, r3, #6, #10
   2af20:	69e3      	ldr	r3, [r4, #28]
   2af22:	4a15      	ldr	r2, [pc, #84]	; (2af78 <nct_mqtt_evt_handler+0x274>)
   2af24:	9300      	str	r3, [sp, #0]
   2af26:	88a3      	ldrh	r3, [r4, #4]
   2af28:	f013 f81b 	bl	3df62 <log_string_sync>
		evt.type = NCT_EVT_CC_TX_DATA_ACK;
   2af2c:	2304      	movs	r3, #4
   2af2e:	f88d 3018 	strb.w	r3, [sp, #24]
		evt.param.data_id = _mqtt_evt->param.puback.message_id;
   2af32:	88a3      	ldrh	r3, [r4, #4]
   2af34:	9305      	str	r3, [sp, #20]
	if (event_notify) {
   2af36:	e793      	b.n	2ae60 <nct_mqtt_evt_handler+0x15c>
		LOG_DBG("MQTT_EVT_DISCONNECT: result = %d", _mqtt_evt->result);
   2af38:	2304      	movs	r3, #4
   2af3a:	f04f 0000 	mov.w	r0, #0
   2af3e:	4a0c      	ldr	r2, [pc, #48]	; (2af70 <nct_mqtt_evt_handler+0x26c>)
   2af40:	f363 0007 	bfi	r0, r3, #0, #8
   2af44:	4b09      	ldr	r3, [pc, #36]	; (2af6c <nct_mqtt_evt_handler+0x268>)
   2af46:	4919      	ldr	r1, [pc, #100]	; (2afac <nct_mqtt_evt_handler+0x2a8>)
   2af48:	1a9b      	subs	r3, r3, r2
   2af4a:	08db      	lsrs	r3, r3, #3
   2af4c:	f363 108f 	bfi	r0, r3, #6, #10
   2af50:	4a09      	ldr	r2, [pc, #36]	; (2af78 <nct_mqtt_evt_handler+0x274>)
   2af52:	69e3      	ldr	r3, [r4, #28]
   2af54:	f013 f805 	bl	3df62 <log_string_sync>
		evt.type = NCT_EVT_DISCONNECTED;
   2af58:	2309      	movs	r3, #9
   2af5a:	e728      	b.n	2adae <nct_mqtt_evt_handler+0xaa>
		if (_mqtt_evt->param.suback.message_id == NCT_DC_SUBSCRIBE_ID) {
   2af5c:	f242 223d 	movw	r2, #8765	; 0x223d
   2af60:	4293      	cmp	r3, r2
   2af62:	f47f af51 	bne.w	2ae08 <nct_mqtt_evt_handler+0x104>
			evt.type = NCT_EVT_DC_CONNECTED;
   2af66:	2302      	movs	r3, #2
   2af68:	e721      	b.n	2adae <nct_mqtt_evt_handler+0xaa>
   2af6a:	bf00      	nop
   2af6c:	00041d24 	.word	0x00041d24
   2af70:	00041c2c 	.word	0x00041c2c
   2af74:	00046b27 	.word	0x00046b27
   2af78:	00046510 	.word	0x00046510
   2af7c:	00046b4d 	.word	0x00046b4d
   2af80:	00046b6e 	.word	0x00046b6e
   2af84:	00046b87 	.word	0x00046b87
   2af88:	00046b9c 	.word	0x00046b9c
   2af8c:	20023f60 	.word	0x20023f60
   2af90:	00046bc3 	.word	0x00046bc3
   2af94:	000425a4 	.word	0x000425a4
   2af98:	000425c8 	.word	0x000425c8
   2af9c:	00046c6f 	.word	0x00046c6f
   2afa0:	00046be2 	.word	0x00046be2
   2afa4:	00046c0b 	.word	0x00046c0b
   2afa8:	00046c21 	.word	0x00046c21
   2afac:	00046c4a 	.word	0x00046c4a

0002afb0 <nct_mqtt_connect>:
{
   2afb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	mqtt_client_init(&nct.client);
   2afb2:	4c2e      	ldr	r4, [pc, #184]	; (2b06c <nct_mqtt_connect+0xbc>)
   2afb4:	f104 0018 	add.w	r0, r4, #24
   2afb8:	f013 fd1c 	bl	3e9f4 <mqtt_client_init>
	nct.client.evt_cb = nct_mqtt_evt_handler;
   2afbc:	4b2c      	ldr	r3, [pc, #176]	; (2b070 <nct_mqtt_connect+0xc0>)
	nct.client.client_id.utf8 = (u8_t *)client_id_buf;
   2afbe:	482d      	ldr	r0, [pc, #180]	; (2b074 <nct_mqtt_connect+0xc4>)
	nct.client.broker = (struct sockaddr *)&nct.broker;
   2afc0:	f104 0794 	add.w	r7, r4, #148	; 0x94
	nct.client.evt_cb = nct_mqtt_evt_handler;
   2afc4:	67a3      	str	r3, [r4, #120]	; 0x78
	nct.client.broker = (struct sockaddr *)&nct.broker;
   2afc6:	6667      	str	r7, [r4, #100]	; 0x64
	nct.client.client_id.utf8 = (u8_t *)client_id_buf;
   2afc8:	65e0      	str	r0, [r4, #92]	; 0x5c
	nct.client.client_id.size = strlen(client_id_buf);
   2afca:	f7f2 f8ab 	bl	1d124 <strlen>
	nct.client.protocol_version = MQTT_VERSION_3_1_1;
   2afce:	2304      	movs	r3, #4
   2afd0:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	nct.client.password = NULL;
   2afd4:	2300      	movs	r3, #0
	nct.client.user_name = NULL;
   2afd6:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
	nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   2afda:	2301      	movs	r3, #1
   2afdc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nct.client.rx_buf = nct.rx_buf;
   2afe0:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   2afe4:	67e3      	str	r3, [r4, #124]	; 0x7c
   2afe6:	4626      	mov	r6, r4
	nct.client.rx_buf_size = sizeof(nct.rx_buf);
   2afe8:	f44f 7380 	mov.w	r3, #256	; 0x100
	nct.client.tx_buf = nct.tx_buf;
   2afec:	f504 72e8 	add.w	r2, r4, #464	; 0x1d0
   2aff0:	f104 0544 	add.w	r5, r4, #68	; 0x44
	nct.client.client_id.size = strlen(client_id_buf);
   2aff4:	6620      	str	r0, [r4, #96]	; 0x60
	nct.client.rx_buf_size = sizeof(nct.rx_buf);
   2aff6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	nct.client.tx_buf_size = sizeof(nct.tx_buf);
   2affa:	e9c4 2321 	strd	r2, r3, [r4, #132]	; 0x84
	memcpy(tls_config, &nct.tls_config, sizeof(struct mqtt_sec_config));
   2affe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2b000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2b002:	e896 0003 	ldmia.w	r6, {r0, r1}
   2b006:	e885 0003 	stmia.w	r5, {r0, r1}
	err = aws_fota_init(&nct.client, aws_fota_cb_handler);
   2b00a:	491b      	ldr	r1, [pc, #108]	; (2b078 <nct_mqtt_connect+0xc8>)
   2b00c:	f104 0018 	add.w	r0, r4, #24
   2b010:	f002 fef0 	bl	2ddf4 <aws_fota_init>
	if (err != 0) {
   2b014:	4602      	mov	r2, r0
   2b016:	b188      	cbz	r0, 2b03c <nct_mqtt_connect+0x8c>
		LOG_ERR("aws_fota_init failed %d", err);
   2b018:	2301      	movs	r3, #1
   2b01a:	f04f 0000 	mov.w	r0, #0
   2b01e:	4917      	ldr	r1, [pc, #92]	; (2b07c <nct_mqtt_connect+0xcc>)
   2b020:	f363 0007 	bfi	r0, r3, #0, #8
   2b024:	4b16      	ldr	r3, [pc, #88]	; (2b080 <nct_mqtt_connect+0xd0>)
		return -ENOEXEC;
   2b026:	f06f 0407 	mvn.w	r4, #7
   2b02a:	1a5b      	subs	r3, r3, r1
   2b02c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("aws_fota_init failed %d", err);
   2b02e:	f363 108f 	bfi	r0, r3, #6, #10
   2b032:	4914      	ldr	r1, [pc, #80]	; (2b084 <nct_mqtt_connect+0xd4>)
   2b034:	f012 ff95 	bl	3df62 <log_string_sync>
}
   2b038:	4620      	mov	r0, r4
   2b03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	err = mqtt_connect(&nct.client);
   2b03c:	f104 0018 	add.w	r0, r4, #24
   2b040:	f013 fcf2 	bl	3ea28 <mqtt_connect>
	if (err != 0) {
   2b044:	4604      	mov	r4, r0
   2b046:	2800      	cmp	r0, #0
   2b048:	d0f6      	beq.n	2b038 <nct_mqtt_connect+0x88>
		LOG_DBG("mqtt_connect failed %d", err);
   2b04a:	2304      	movs	r3, #4
   2b04c:	f04f 0000 	mov.w	r0, #0
   2b050:	4a0a      	ldr	r2, [pc, #40]	; (2b07c <nct_mqtt_connect+0xcc>)
   2b052:	f363 0007 	bfi	r0, r3, #0, #8
   2b056:	4b0a      	ldr	r3, [pc, #40]	; (2b080 <nct_mqtt_connect+0xd0>)
   2b058:	490b      	ldr	r1, [pc, #44]	; (2b088 <nct_mqtt_connect+0xd8>)
   2b05a:	1a9b      	subs	r3, r3, r2
   2b05c:	08db      	lsrs	r3, r3, #3
   2b05e:	f363 108f 	bfi	r0, r3, #6, #10
   2b062:	4a0a      	ldr	r2, [pc, #40]	; (2b08c <nct_mqtt_connect+0xdc>)
   2b064:	4623      	mov	r3, r4
   2b066:	f012 ff7c 	bl	3df62 <log_string_sync>
   2b06a:	e7e5      	b.n	2b038 <nct_mqtt_connect+0x88>
   2b06c:	20023c90 	.word	0x20023c90
   2b070:	0002ad05 	.word	0x0002ad05
   2b074:	2002b2f0 	.word	0x2002b2f0
   2b078:	0002a9ed 	.word	0x0002a9ed
   2b07c:	00041c2c 	.word	0x00041c2c
   2b080:	00041d24 	.word	0x00041d24
   2b084:	00046af4 	.word	0x00046af4
   2b088:	00046b0c 	.word	0x00046b0c
   2b08c:	000464ff 	.word	0x000464ff

0002b090 <nct_init>:

int nct_init(void)
{
   2b090:	b530      	push	{r4, r5, lr}
   2b092:	b085      	sub	sp, #20
	int err;

	dc_endpoint_reset();
   2b094:	f7ff fc9c 	bl	2a9d0 <dc_endpoint_reset>
	at_socket_fd = nrf_socket(NRF_AF_LTE, NRF_SOCK_DGRAM, NRF_PROTO_AT);
   2b098:	f240 2201 	movw	r2, #513	; 0x201
   2b09c:	2102      	movs	r1, #2
   2b09e:	2066      	movs	r0, #102	; 0x66
   2b0a0:	f009 f84a 	bl	34138 <nrf_socket>
	__ASSERT_NO_MSG(at_socket_fd >= 0);
   2b0a4:	1e04      	subs	r4, r0, #0
   2b0a6:	da0b      	bge.n	2b0c0 <nct_init+0x30>
   2b0a8:	4980      	ldr	r1, [pc, #512]	; (2b2ac <nct_init+0x21c>)
   2b0aa:	4881      	ldr	r0, [pc, #516]	; (2b2b0 <nct_init+0x220>)
   2b0ac:	f240 1327 	movw	r3, #295	; 0x127
   2b0b0:	4a80      	ldr	r2, [pc, #512]	; (2b2b4 <nct_init+0x224>)
   2b0b2:	f012 fef2 	bl	3de9a <printk>
   2b0b6:	f240 1127 	movw	r1, #295	; 0x127
   2b0ba:	487e      	ldr	r0, [pc, #504]	; (2b2b4 <nct_init+0x224>)
   2b0bc:	f012 ff40 	bl	3df40 <assert_post_action>
	bytes_written = nrf_write(at_socket_fd, "AT+CGSN", 7);
   2b0c0:	2207      	movs	r2, #7
   2b0c2:	497d      	ldr	r1, [pc, #500]	; (2b2b8 <nct_init+0x228>)
   2b0c4:	4620      	mov	r0, r4
   2b0c6:	f009 f88d 	bl	341e4 <nrf_write>
	__ASSERT_NO_MSG(bytes_written == 7);
   2b0ca:	2807      	cmp	r0, #7
   2b0cc:	d00b      	beq.n	2b0e6 <nct_init+0x56>
   2b0ce:	497b      	ldr	r1, [pc, #492]	; (2b2bc <nct_init+0x22c>)
   2b0d0:	4877      	ldr	r0, [pc, #476]	; (2b2b0 <nct_init+0x220>)
   2b0d2:	f44f 7395 	mov.w	r3, #298	; 0x12a
   2b0d6:	4a77      	ldr	r2, [pc, #476]	; (2b2b4 <nct_init+0x224>)
   2b0d8:	f012 fedf 	bl	3de9a <printk>
   2b0dc:	f44f 7195 	mov.w	r1, #298	; 0x12a
   2b0e0:	4874      	ldr	r0, [pc, #464]	; (2b2b4 <nct_init+0x224>)
   2b0e2:	f012 ff2d 	bl	3df40 <assert_post_action>
	bytes_read = nrf_read(at_socket_fd, imei_buf, NRF_IMEI_LEN);
   2b0e6:	220f      	movs	r2, #15
   2b0e8:	4669      	mov	r1, sp
   2b0ea:	4620      	mov	r0, r4
   2b0ec:	f009 f8c6 	bl	3427c <nrf_read>
	__ASSERT_NO_MSG(bytes_read == NRF_IMEI_LEN);
   2b0f0:	280f      	cmp	r0, #15
   2b0f2:	d00b      	beq.n	2b10c <nct_init+0x7c>
   2b0f4:	4972      	ldr	r1, [pc, #456]	; (2b2c0 <nct_init+0x230>)
   2b0f6:	486e      	ldr	r0, [pc, #440]	; (2b2b0 <nct_init+0x220>)
   2b0f8:	f240 132d 	movw	r3, #301	; 0x12d
   2b0fc:	4a6d      	ldr	r2, [pc, #436]	; (2b2b4 <nct_init+0x224>)
   2b0fe:	f012 fecc 	bl	3de9a <printk>
   2b102:	f240 112d 	movw	r1, #301	; 0x12d
   2b106:	486b      	ldr	r0, [pc, #428]	; (2b2b4 <nct_init+0x224>)
   2b108:	f012 ff1a 	bl	3df40 <assert_post_action>
	imei_buf[NRF_IMEI_LEN] = 0;
   2b10c:	2300      	movs	r3, #0
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "nrf-%s", imei_buf);
   2b10e:	4a6d      	ldr	r2, [pc, #436]	; (2b2c4 <nct_init+0x234>)
	imei_buf[NRF_IMEI_LEN] = 0;
   2b110:	f88d 300f 	strb.w	r3, [sp, #15]
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "nrf-%s", imei_buf);
   2b114:	2114      	movs	r1, #20
   2b116:	466b      	mov	r3, sp
   2b118:	486b      	ldr	r0, [pc, #428]	; (2b2c8 <nct_init+0x238>)
   2b11a:	f011 f85d 	bl	3c1d8 <sniprintf>
	ret = nrf_close(at_socket_fd);
   2b11e:	4620      	mov	r0, r4
   2b120:	f009 f81c 	bl	3415c <nrf_close>
	__ASSERT_NO_MSG(ret == 0);
   2b124:	b158      	cbz	r0, 2b13e <nct_init+0xae>
   2b126:	4969      	ldr	r1, [pc, #420]	; (2b2cc <nct_init+0x23c>)
   2b128:	4861      	ldr	r0, [pc, #388]	; (2b2b0 <nct_init+0x220>)
   2b12a:	f240 1333 	movw	r3, #307	; 0x133
   2b12e:	4a61      	ldr	r2, [pc, #388]	; (2b2b4 <nct_init+0x224>)
   2b130:	f012 feb3 	bl	3de9a <printk>
   2b134:	f240 1133 	movw	r1, #307	; 0x133
   2b138:	485e      	ldr	r0, [pc, #376]	; (2b2b4 <nct_init+0x224>)
   2b13a:	f012 ff01 	bl	3df40 <assert_post_action>
	LOG_DBG("client_id = %s", log_strdup(id));
   2b13e:	2304      	movs	r3, #4
   2b140:	f04f 0500 	mov.w	r5, #0
   2b144:	4c62      	ldr	r4, [pc, #392]	; (2b2d0 <nct_init+0x240>)
   2b146:	f363 0507 	bfi	r5, r3, #0, #8
   2b14a:	4b62      	ldr	r3, [pc, #392]	; (2b2d4 <nct_init+0x244>)
   2b14c:	485e      	ldr	r0, [pc, #376]	; (2b2c8 <nct_init+0x238>)
   2b14e:	1ae4      	subs	r4, r4, r3
   2b150:	f012 ff19 	bl	3df86 <log_strdup>
   2b154:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2b158:	f364 158f 	bfi	r5, r4, #6, #10
   2b15c:	4603      	mov	r3, r0
   2b15e:	4a5e      	ldr	r2, [pc, #376]	; (2b2d8 <nct_init+0x248>)
   2b160:	495e      	ldr	r1, [pc, #376]	; (2b2dc <nct_init+0x24c>)
   2b162:	4628      	mov	r0, r5
   2b164:	f012 fefd 	bl	3df62 <log_string_sync>
	ret = snprintf(shadow_base_topic, sizeof(shadow_base_topic),
   2b168:	4b57      	ldr	r3, [pc, #348]	; (2b2c8 <nct_init+0x238>)
   2b16a:	4a5d      	ldr	r2, [pc, #372]	; (2b2e0 <nct_init+0x250>)
   2b16c:	2127      	movs	r1, #39	; 0x27
   2b16e:	485d      	ldr	r0, [pc, #372]	; (2b2e4 <nct_init+0x254>)
   2b170:	f011 f832 	bl	3c1d8 <sniprintf>
	if (ret != NCT_SHADOW_BASE_TOPIC_LEN) {
   2b174:	2826      	cmp	r0, #38	; 0x26
   2b176:	d003      	beq.n	2b180 <nct_init+0xf0>
		return -ENOMEM;
   2b178:	f06f 000b 	mvn.w	r0, #11
	if (err) {
		return err;
	}

	return nct_provision();
}
   2b17c:	b005      	add	sp, #20
   2b17e:	bd30      	pop	{r4, r5, pc}
	LOG_DBG("shadow_base_topic: %s", log_strdup(shadow_base_topic));
   2b180:	2304      	movs	r3, #4
   2b182:	f04f 0500 	mov.w	r5, #0
   2b186:	4857      	ldr	r0, [pc, #348]	; (2b2e4 <nct_init+0x254>)
   2b188:	f363 0507 	bfi	r5, r3, #0, #8
   2b18c:	f012 fefb 	bl	3df86 <log_strdup>
   2b190:	f364 158f 	bfi	r5, r4, #6, #10
   2b194:	4603      	mov	r3, r0
   2b196:	4a54      	ldr	r2, [pc, #336]	; (2b2e8 <nct_init+0x258>)
   2b198:	4954      	ldr	r1, [pc, #336]	; (2b2ec <nct_init+0x25c>)
   2b19a:	4628      	mov	r0, r5
   2b19c:	f012 fee1 	bl	3df62 <log_string_sync>
	ret = snprintf(accepted_topic, sizeof(accepted_topic),
   2b1a0:	4b49      	ldr	r3, [pc, #292]	; (2b2c8 <nct_init+0x238>)
   2b1a2:	4a53      	ldr	r2, [pc, #332]	; (2b2f0 <nct_init+0x260>)
   2b1a4:	2128      	movs	r1, #40	; 0x28
   2b1a6:	4853      	ldr	r0, [pc, #332]	; (2b2f4 <nct_init+0x264>)
   2b1a8:	f011 f816 	bl	3c1d8 <sniprintf>
	if (ret != NCT_ACCEPTED_TOPIC_LEN) {
   2b1ac:	2827      	cmp	r0, #39	; 0x27
   2b1ae:	d1e3      	bne.n	2b178 <nct_init+0xe8>
	LOG_DBG("accepted_topic: %s", log_strdup(accepted_topic));
   2b1b0:	2304      	movs	r3, #4
   2b1b2:	f04f 0500 	mov.w	r5, #0
   2b1b6:	484f      	ldr	r0, [pc, #316]	; (2b2f4 <nct_init+0x264>)
   2b1b8:	f363 0507 	bfi	r5, r3, #0, #8
   2b1bc:	f012 fee3 	bl	3df86 <log_strdup>
   2b1c0:	f364 158f 	bfi	r5, r4, #6, #10
   2b1c4:	4603      	mov	r3, r0
   2b1c6:	4a48      	ldr	r2, [pc, #288]	; (2b2e8 <nct_init+0x258>)
   2b1c8:	494b      	ldr	r1, [pc, #300]	; (2b2f8 <nct_init+0x268>)
   2b1ca:	4628      	mov	r0, r5
   2b1cc:	f012 fec9 	bl	3df62 <log_string_sync>
	ret = snprintf(rejected_topic, sizeof(rejected_topic),
   2b1d0:	4b3d      	ldr	r3, [pc, #244]	; (2b2c8 <nct_init+0x238>)
   2b1d2:	4a4a      	ldr	r2, [pc, #296]	; (2b2fc <nct_init+0x26c>)
   2b1d4:	2134      	movs	r1, #52	; 0x34
   2b1d6:	484a      	ldr	r0, [pc, #296]	; (2b300 <nct_init+0x270>)
   2b1d8:	f010 fffe 	bl	3c1d8 <sniprintf>
	if (ret != NCT_REJECTED_TOPIC_LEN) {
   2b1dc:	2833      	cmp	r0, #51	; 0x33
   2b1de:	d1cb      	bne.n	2b178 <nct_init+0xe8>
	LOG_DBG("rejected_topic: %s", log_strdup(rejected_topic));
   2b1e0:	2304      	movs	r3, #4
   2b1e2:	f04f 0500 	mov.w	r5, #0
   2b1e6:	4846      	ldr	r0, [pc, #280]	; (2b300 <nct_init+0x270>)
   2b1e8:	f363 0507 	bfi	r5, r3, #0, #8
   2b1ec:	f012 fecb 	bl	3df86 <log_strdup>
   2b1f0:	f364 158f 	bfi	r5, r4, #6, #10
   2b1f4:	4603      	mov	r3, r0
   2b1f6:	4a3c      	ldr	r2, [pc, #240]	; (2b2e8 <nct_init+0x258>)
   2b1f8:	4942      	ldr	r1, [pc, #264]	; (2b304 <nct_init+0x274>)
   2b1fa:	4628      	mov	r0, r5
   2b1fc:	f012 feb1 	bl	3df62 <log_string_sync>
	ret = snprintf(update_delta_topic, sizeof(update_delta_topic),
   2b200:	4b31      	ldr	r3, [pc, #196]	; (2b2c8 <nct_init+0x238>)
   2b202:	4a41      	ldr	r2, [pc, #260]	; (2b308 <nct_init+0x278>)
   2b204:	2134      	movs	r1, #52	; 0x34
   2b206:	4841      	ldr	r0, [pc, #260]	; (2b30c <nct_init+0x27c>)
   2b208:	f010 ffe6 	bl	3c1d8 <sniprintf>
	if (ret != NCT_UPDATE_DELTA_TOPIC_LEN) {
   2b20c:	2833      	cmp	r0, #51	; 0x33
   2b20e:	d1b3      	bne.n	2b178 <nct_init+0xe8>
	LOG_DBG("update_delta_topic: %s", log_strdup(update_delta_topic));
   2b210:	2304      	movs	r3, #4
   2b212:	f04f 0500 	mov.w	r5, #0
   2b216:	483d      	ldr	r0, [pc, #244]	; (2b30c <nct_init+0x27c>)
   2b218:	f363 0507 	bfi	r5, r3, #0, #8
   2b21c:	f012 feb3 	bl	3df86 <log_strdup>
   2b220:	f364 158f 	bfi	r5, r4, #6, #10
   2b224:	4603      	mov	r3, r0
   2b226:	4a30      	ldr	r2, [pc, #192]	; (2b2e8 <nct_init+0x258>)
   2b228:	4939      	ldr	r1, [pc, #228]	; (2b310 <nct_init+0x280>)
   2b22a:	4628      	mov	r0, r5
   2b22c:	f012 fe99 	bl	3df62 <log_string_sync>
	ret = snprintf(update_topic, sizeof(update_topic), NCT_UPDATE_TOPIC,
   2b230:	4b25      	ldr	r3, [pc, #148]	; (2b2c8 <nct_init+0x238>)
   2b232:	4a38      	ldr	r2, [pc, #224]	; (2b314 <nct_init+0x284>)
   2b234:	212e      	movs	r1, #46	; 0x2e
   2b236:	4838      	ldr	r0, [pc, #224]	; (2b318 <nct_init+0x288>)
   2b238:	f010 ffce 	bl	3c1d8 <sniprintf>
	if (ret != NCT_UPDATE_TOPIC_LEN) {
   2b23c:	282d      	cmp	r0, #45	; 0x2d
   2b23e:	d19b      	bne.n	2b178 <nct_init+0xe8>
	LOG_DBG("update_topic: %s", log_strdup(update_topic));
   2b240:	2304      	movs	r3, #4
   2b242:	f04f 0500 	mov.w	r5, #0
   2b246:	4834      	ldr	r0, [pc, #208]	; (2b318 <nct_init+0x288>)
   2b248:	f363 0507 	bfi	r5, r3, #0, #8
   2b24c:	f012 fe9b 	bl	3df86 <log_strdup>
   2b250:	f364 158f 	bfi	r5, r4, #6, #10
   2b254:	4603      	mov	r3, r0
   2b256:	4a24      	ldr	r2, [pc, #144]	; (2b2e8 <nct_init+0x258>)
   2b258:	4930      	ldr	r1, [pc, #192]	; (2b31c <nct_init+0x28c>)
   2b25a:	4628      	mov	r0, r5
   2b25c:	f012 fe81 	bl	3df62 <log_string_sync>
	ret = snprintf(shadow_get_topic, sizeof(shadow_get_topic),
   2b260:	4b19      	ldr	r3, [pc, #100]	; (2b2c8 <nct_init+0x238>)
   2b262:	4a2f      	ldr	r2, [pc, #188]	; (2b320 <nct_init+0x290>)
   2b264:	212b      	movs	r1, #43	; 0x2b
   2b266:	482f      	ldr	r0, [pc, #188]	; (2b324 <nct_init+0x294>)
   2b268:	f010 ffb6 	bl	3c1d8 <sniprintf>
	if (ret != NCT_SHADOW_GET_LEN) {
   2b26c:	282a      	cmp	r0, #42	; 0x2a
   2b26e:	d183      	bne.n	2b178 <nct_init+0xe8>
	LOG_DBG("shadow_get_topic: %s", log_strdup(shadow_get_topic));
   2b270:	2304      	movs	r3, #4
   2b272:	f04f 0500 	mov.w	r5, #0
   2b276:	482b      	ldr	r0, [pc, #172]	; (2b324 <nct_init+0x294>)
   2b278:	f363 0507 	bfi	r5, r3, #0, #8
   2b27c:	f012 fe83 	bl	3df86 <log_strdup>
   2b280:	f364 158f 	bfi	r5, r4, #6, #10
   2b284:	4603      	mov	r3, r0
   2b286:	4a18      	ldr	r2, [pc, #96]	; (2b2e8 <nct_init+0x258>)
   2b288:	4628      	mov	r0, r5
   2b28a:	4927      	ldr	r1, [pc, #156]	; (2b328 <nct_init+0x298>)
   2b28c:	f012 fe69 	bl	3df62 <log_string_sync>
	nct.tls_config.cipher_count = 0;
   2b290:	2202      	movs	r2, #2
   2b292:	2000      	movs	r0, #0
	nct.tls_config.peer_verify = 2;
   2b294:	4b25      	ldr	r3, [pc, #148]	; (2b32c <nct_init+0x29c>)
	nct.tls_config.cipher_count = 0;
   2b296:	e9c3 2000 	strd	r2, r0, [r3]
	nct.tls_config.sec_tag_count = ARRAY_SIZE(sec_tag_list);
   2b29a:	2201      	movs	r2, #1
   2b29c:	60da      	str	r2, [r3, #12]
	nct.tls_config.sec_tag_list = sec_tag_list;
   2b29e:	4a24      	ldr	r2, [pc, #144]	; (2b330 <nct_init+0x2a0>)
	nct.tls_config.cipher_list = NULL;
   2b2a0:	6098      	str	r0, [r3, #8]
	nct.tls_config.sec_tag_list = sec_tag_list;
   2b2a2:	611a      	str	r2, [r3, #16]
	nct.tls_config.hostname = NRF_CLOUD_HOSTNAME;
   2b2a4:	4a23      	ldr	r2, [pc, #140]	; (2b334 <nct_init+0x2a4>)
   2b2a6:	615a      	str	r2, [r3, #20]
	return nct_provision();
   2b2a8:	e768      	b.n	2b17c <nct_init+0xec>
   2b2aa:	bf00      	nop
   2b2ac:	0004693a 	.word	0x0004693a
   2b2b0:	00043278 	.word	0x00043278
   2b2b4:	000468f7 	.word	0x000468f7
   2b2b8:	00045c36 	.word	0x00045c36
   2b2bc:	0004694c 	.word	0x0004694c
   2b2c0:	0004695f 	.word	0x0004695f
   2b2c4:	00046970 	.word	0x00046970
   2b2c8:	2002b2f0 	.word	0x2002b2f0
   2b2cc:	00044e2a 	.word	0x00044e2a
   2b2d0:	00041d24 	.word	0x00041d24
   2b2d4:	00041c2c 	.word	0x00041c2c
   2b2d8:	000464c5 	.word	0x000464c5
   2b2dc:	00046977 	.word	0x00046977
   2b2e0:	0004698a 	.word	0x0004698a
   2b2e4:	2002b341 	.word	0x2002b341
   2b2e8:	000464d7 	.word	0x000464d7
   2b2ec:	000469a0 	.word	0x000469a0
   2b2f0:	000469ba 	.word	0x000469ba
   2b2f4:	2002b2c8 	.word	0x2002b2c8
   2b2f8:	000469d1 	.word	0x000469d1
   2b2fc:	000469e8 	.word	0x000469e8
   2b300:	2002b30d 	.word	0x2002b30d
   2b304:	00046a0b 	.word	0x00046a0b
   2b308:	00046a22 	.word	0x00046a22
   2b30c:	2002b393 	.word	0x2002b393
   2b310:	00046a45 	.word	0x00046a45
   2b314:	00046a60 	.word	0x00046a60
   2b318:	2002b3c7 	.word	0x2002b3c7
   2b31c:	00046a7d 	.word	0x00046a7d
   2b320:	00046a92 	.word	0x00046a92
   2b324:	2002b368 	.word	0x2002b368
   2b328:	00046aac 	.word	0x00046aac
   2b32c:	20023c90 	.word	0x20023c90
   2b330:	200320e4 	.word	0x200320e4
   2b334:	00046ac5 	.word	0x00046ac5

0002b338 <nct_connect>:

	return err;
}
#else
int nct_connect(void)
{
   2b338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b33c:	b08c      	sub	sp, #48	; 0x30
	int err;
	struct addrinfo *result;
	struct addrinfo *addr;
	struct addrinfo hints = {
   2b33e:	2220      	movs	r2, #32
   2b340:	2100      	movs	r1, #0
   2b342:	a804      	add	r0, sp, #16
   2b344:	f015 f98a 	bl	4065c <memset>
   2b348:	2301      	movs	r3, #1

static inline int getaddrinfo(const char *node, const char *service,
			      const struct addrinfo *hints,
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
   2b34a:	4c48      	ldr	r4, [pc, #288]	; (2b46c <nct_connect+0x134>)
   2b34c:	e9cd 3305 	strd	r3, r3, [sp, #20]
   2b350:	6823      	ldr	r3, [r4, #0]
   2b352:	b94b      	cbnz	r3, 2b368 <nct_connect+0x30>
   2b354:	4946      	ldr	r1, [pc, #280]	; (2b470 <nct_connect+0x138>)
   2b356:	4847      	ldr	r0, [pc, #284]	; (2b474 <nct_connect+0x13c>)
   2b358:	2393      	movs	r3, #147	; 0x93
   2b35a:	4a47      	ldr	r2, [pc, #284]	; (2b478 <nct_connect+0x140>)
   2b35c:	f012 fd9d 	bl	3de9a <printk>
   2b360:	2193      	movs	r1, #147	; 0x93
   2b362:	4845      	ldr	r0, [pc, #276]	; (2b478 <nct_connect+0x140>)
   2b364:	f012 fdec 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);
   2b368:	6823      	ldr	r3, [r4, #0]
   2b36a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2b36c:	b94b      	cbnz	r3, 2b382 <nct_connect+0x4a>
   2b36e:	4943      	ldr	r1, [pc, #268]	; (2b47c <nct_connect+0x144>)
   2b370:	4840      	ldr	r0, [pc, #256]	; (2b474 <nct_connect+0x13c>)
   2b372:	2394      	movs	r3, #148	; 0x94
   2b374:	4a40      	ldr	r2, [pc, #256]	; (2b478 <nct_connect+0x140>)
   2b376:	f012 fd90 	bl	3de9a <printk>
   2b37a:	2194      	movs	r1, #148	; 0x94
   2b37c:	483e      	ldr	r0, [pc, #248]	; (2b478 <nct_connect+0x140>)
   2b37e:	f012 fddf 	bl	3df40 <assert_post_action>

	return socket_ops->getaddrinfo(node, service, hints, res);
   2b382:	6823      	ldr	r3, [r4, #0]
   2b384:	aa04      	add	r2, sp, #16
   2b386:	6b5d      	ldr	r5, [r3, #52]	; 0x34
   2b388:	2100      	movs	r1, #0
   2b38a:	ab03      	add	r3, sp, #12
   2b38c:	483c      	ldr	r0, [pc, #240]	; (2b480 <nct_connect+0x148>)
   2b38e:	47a8      	blx	r5
		.ai_family = NRF_CLOUD_AF_FAMILY,
		.ai_socktype = SOCK_STREAM
	};

	err = getaddrinfo(NRF_CLOUD_HOSTNAME, NULL, &hints, &result);
	if (err) {
   2b390:	4b3c      	ldr	r3, [pc, #240]	; (2b484 <nct_connect+0x14c>)
   2b392:	4d3d      	ldr	r5, [pc, #244]	; (2b488 <nct_connect+0x150>)
   2b394:	1aed      	subs	r5, r5, r3
   2b396:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   2b39a:	4603      	mov	r3, r0
   2b39c:	b180      	cbz	r0, 2b3c0 <nct_connect+0x88>
		LOG_DBG("getaddrinfo failed %d", err);
   2b39e:	2204      	movs	r2, #4
   2b3a0:	f04f 0000 	mov.w	r0, #0
   2b3a4:	f362 0007 	bfi	r0, r2, #0, #8
   2b3a8:	f365 108f 	bfi	r0, r5, #6, #10
   2b3ac:	4a37      	ldr	r2, [pc, #220]	; (2b48c <nct_connect+0x154>)
   2b3ae:	4938      	ldr	r1, [pc, #224]	; (2b490 <nct_connect+0x158>)
   2b3b0:	f012 fdd7 	bl	3df62 <log_string_sync>
		return -ECHILD;
   2b3b4:	f06f 0509 	mvn.w	r5, #9

	/* Free the address. */
	freeaddrinfo(result);

	return err;
}
   2b3b8:	4628      	mov	r0, r5
   2b3ba:	b00c      	add	sp, #48	; 0x30
   2b3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   2b3c0:	f04f 0818 	mov.w	r8, #24
	addr = result;
   2b3c4:	9e03      	ldr	r6, [sp, #12]
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   2b3c6:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 2b48c <nct_connect+0x154>
   2b3ca:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 2b4a4 <nct_connect+0x16c>
	while (addr != NULL) {
   2b3ce:	b916      	cbnz	r6, 2b3d6 <nct_connect+0x9e>
	err = -ECHILD;
   2b3d0:	f06f 0509 	mvn.w	r5, #9
   2b3d4:	e018      	b.n	2b408 <nct_connect+0xd0>
		if ((addr->ai_addrlen == sizeof(struct sockaddr_in)) &&
   2b3d6:	6933      	ldr	r3, [r6, #16]
   2b3d8:	2b08      	cmp	r3, #8
   2b3da:	d134      	bne.n	2b446 <nct_connect+0x10e>
					->sin_addr.s_addr;
   2b3dc:	6973      	ldr	r3, [r6, #20]
			broker->sin_addr.s_addr =
   2b3de:	4a2d      	ldr	r2, [pc, #180]	; (2b494 <nct_connect+0x15c>)
					->sin_addr.s_addr;
   2b3e0:	685b      	ldr	r3, [r3, #4]
			broker->sin_family = AF_INET;
   2b3e2:	492d      	ldr	r1, [pc, #180]	; (2b498 <nct_connect+0x160>)
			broker->sin_addr.s_addr =
   2b3e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			broker->sin_family = AF_INET;
   2b3e8:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
			LOG_DBG("IPv4 Address 0x%08x", broker->sin_addr.s_addr);
   2b3ec:	f04f 0000 	mov.w	r0, #0
   2b3f0:	2204      	movs	r2, #4
   2b3f2:	f362 0007 	bfi	r0, r2, #0, #8
   2b3f6:	f365 108f 	bfi	r0, r5, #6, #10
   2b3fa:	4a24      	ldr	r2, [pc, #144]	; (2b48c <nct_connect+0x154>)
   2b3fc:	4927      	ldr	r1, [pc, #156]	; (2b49c <nct_connect+0x164>)
   2b3fe:	f012 fdb0 	bl	3df62 <log_string_sync>
			err = nct_mqtt_connect();
   2b402:	f7ff fdd5 	bl	2afb0 <nct_mqtt_connect>
   2b406:	4605      	mov	r5, r0
}

static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
   2b408:	6823      	ldr	r3, [r4, #0]
	freeaddrinfo(result);
   2b40a:	9e03      	ldr	r6, [sp, #12]
   2b40c:	b94b      	cbnz	r3, 2b422 <nct_connect+0xea>
   2b40e:	4918      	ldr	r1, [pc, #96]	; (2b470 <nct_connect+0x138>)
   2b410:	4818      	ldr	r0, [pc, #96]	; (2b474 <nct_connect+0x13c>)
   2b412:	239b      	movs	r3, #155	; 0x9b
   2b414:	4a18      	ldr	r2, [pc, #96]	; (2b478 <nct_connect+0x140>)
   2b416:	f012 fd40 	bl	3de9a <printk>
   2b41a:	219b      	movs	r1, #155	; 0x9b
   2b41c:	4816      	ldr	r0, [pc, #88]	; (2b478 <nct_connect+0x140>)
   2b41e:	f012 fd8f 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);
   2b422:	6823      	ldr	r3, [r4, #0]
   2b424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2b426:	b94b      	cbnz	r3, 2b43c <nct_connect+0x104>
   2b428:	491d      	ldr	r1, [pc, #116]	; (2b4a0 <nct_connect+0x168>)
   2b42a:	4812      	ldr	r0, [pc, #72]	; (2b474 <nct_connect+0x13c>)
   2b42c:	239c      	movs	r3, #156	; 0x9c
   2b42e:	4a12      	ldr	r2, [pc, #72]	; (2b478 <nct_connect+0x140>)
   2b430:	f012 fd33 	bl	3de9a <printk>
   2b434:	219c      	movs	r1, #156	; 0x9c
   2b436:	4810      	ldr	r0, [pc, #64]	; (2b478 <nct_connect+0x140>)
   2b438:	f012 fd82 	bl	3df40 <assert_post_action>

	return socket_ops->freeaddrinfo(res);
   2b43c:	6823      	ldr	r3, [r4, #0]
   2b43e:	4630      	mov	r0, r6
   2b440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2b442:	4798      	blx	r3
   2b444:	e7b8      	b.n	2b3b8 <nct_connect+0x80>
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   2b446:	f027 023f 	bic.w	r2, r7, #63	; 0x3f
   2b44a:	f042 0204 	orr.w	r2, r2, #4
   2b44e:	f362 0707 	bfi	r7, r2, #0, #8
   2b452:	2208      	movs	r2, #8
   2b454:	f365 178f 	bfi	r7, r5, #6, #10
   2b458:	9200      	str	r2, [sp, #0]
   2b45a:	f8cd 8004 	str.w	r8, [sp, #4]
   2b45e:	464a      	mov	r2, r9
   2b460:	4651      	mov	r1, sl
   2b462:	4638      	mov	r0, r7
   2b464:	f012 fd7d 	bl	3df62 <log_string_sync>
		addr = addr->ai_next;
   2b468:	69f6      	ldr	r6, [r6, #28]
   2b46a:	e7b0      	b.n	2b3ce <nct_connect+0x96>
   2b46c:	2002389c 	.word	0x2002389c
   2b470:	000433f1 	.word	0x000433f1
   2b474:	00043278 	.word	0x00043278
   2b478:	000433c1 	.word	0x000433c1
   2b47c:	000467a9 	.word	0x000467a9
   2b480:	00046ac5 	.word	0x00046ac5
   2b484:	00041c2c 	.word	0x00041c2c
   2b488:	00041d24 	.word	0x00041d24
   2b48c:	00046525 	.word	0x00046525
   2b490:	000467c1 	.word	0x000467c1
   2b494:	20023c90 	.word	0x20023c90
   2b498:	b3220001 	.word	0xb3220001
   2b49c:	000467db 	.word	0x000467db
   2b4a0:	0004681a 	.word	0x0004681a
   2b4a4:	000467f3 	.word	0x000467f3

0002b4a8 <nct_cc_connect>:
#endif /* defined(CONFIG_NRF_CLOUD_STATIC_IPV4) */

int nct_cc_connect(void)
{
   2b4a8:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("nct_cc_connect");
   2b4aa:	2304      	movs	r3, #4
   2b4ac:	f04f 0000 	mov.w	r0, #0
   2b4b0:	4a0b      	ldr	r2, [pc, #44]	; (2b4e0 <nct_cc_connect+0x38>)
   2b4b2:	f363 0007 	bfi	r0, r3, #0, #8
   2b4b6:	4b0b      	ldr	r3, [pc, #44]	; (2b4e4 <nct_cc_connect+0x3c>)
   2b4b8:	490b      	ldr	r1, [pc, #44]	; (2b4e8 <nct_cc_connect+0x40>)
   2b4ba:	1a9b      	subs	r3, r3, r2
   2b4bc:	08db      	lsrs	r3, r3, #3
   2b4be:	f363 108f 	bfi	r0, r3, #6, #10
   2b4c2:	4a0a      	ldr	r2, [pc, #40]	; (2b4ec <nct_cc_connect+0x44>)
   2b4c4:	f012 fd4d 	bl	3df62 <log_string_sync>

	const struct mqtt_subscription_list subscription_list = {
   2b4c8:	4b09      	ldr	r3, [pc, #36]	; (2b4f0 <nct_cc_connect+0x48>)
		.list = (struct mqtt_topic *)&nct_cc_rx_list,
		.list_count = ARRAY_SIZE(nct_cc_rx_list),
		.message_id = NCT_CC_SUBSCRIBE_ID
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   2b4ca:	4669      	mov	r1, sp
	const struct mqtt_subscription_list subscription_list = {
   2b4cc:	9300      	str	r3, [sp, #0]
   2b4ce:	4b09      	ldr	r3, [pc, #36]	; (2b4f4 <nct_cc_connect+0x4c>)
	return mqtt_subscribe(&nct.client, &subscription_list);
   2b4d0:	4809      	ldr	r0, [pc, #36]	; (2b4f8 <nct_cc_connect+0x50>)
	const struct mqtt_subscription_list subscription_list = {
   2b4d2:	9301      	str	r3, [sp, #4]
	return mqtt_subscribe(&nct.client, &subscription_list);
   2b4d4:	f013 fb6a 	bl	3ebac <mqtt_subscribe>
}
   2b4d8:	b003      	add	sp, #12
   2b4da:	f85d fb04 	ldr.w	pc, [sp], #4
   2b4de:	bf00      	nop
   2b4e0:	00041c2c 	.word	0x00041c2c
   2b4e4:	00041d24 	.word	0x00041d24
   2b4e8:	00046734 	.word	0x00046734
   2b4ec:	00046531 	.word	0x00046531
   2b4f0:	000425a4 	.word	0x000425a4
   2b4f4:	04d20003 	.word	0x04d20003
   2b4f8:	20023ca8 	.word	0x20023ca8

0002b4fc <nct_cc_send>:

int nct_cc_send(const struct nct_cc_data *cc_data)
{
   2b4fc:	b570      	push	{r4, r5, r6, lr}
   2b4fe:	4b34      	ldr	r3, [pc, #208]	; (2b5d0 <nct_cc_send+0xd4>)
   2b500:	4c34      	ldr	r4, [pc, #208]	; (2b5d4 <nct_cc_send+0xd8>)
   2b502:	b088      	sub	sp, #32
   2b504:	1ae4      	subs	r4, r4, r3
   2b506:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	static u32_t msg_id;

	if (cc_data == NULL) {
   2b50a:	4605      	mov	r5, r0
   2b50c:	b970      	cbnz	r0, 2b52c <nct_cc_send+0x30>
		LOG_ERR("cc_data == NULL");
   2b50e:	2301      	movs	r3, #1
   2b510:	f04f 0000 	mov.w	r0, #0
   2b514:	f363 0007 	bfi	r0, r3, #0, #8
   2b518:	f364 108f 	bfi	r0, r4, #6, #10
   2b51c:	492e      	ldr	r1, [pc, #184]	; (2b5d8 <nct_cc_send+0xdc>)
   2b51e:	f012 fd20 	bl	3df62 <log_string_sync>
		return -EINVAL;
   2b522:	f06f 0515 	mvn.w	r5, #21
	if (err) {
		LOG_ERR("mqtt_publish failed %d", err);
	}

	return err;
}
   2b526:	4628      	mov	r0, r5
   2b528:	b008      	add	sp, #32
   2b52a:	bd70      	pop	{r4, r5, r6, pc}
	if (cc_data->opcode >= ARRAY_SIZE(nct_cc_tx_list)) {
   2b52c:	7b06      	ldrb	r6, [r0, #12]
   2b52e:	2e01      	cmp	r6, #1
   2b530:	d90d      	bls.n	2b54e <nct_cc_send+0x52>
		LOG_ERR("opcode = %d", cc_data->opcode);
   2b532:	2301      	movs	r3, #1
   2b534:	f04f 0000 	mov.w	r0, #0
   2b538:	f363 0007 	bfi	r0, r3, #0, #8
   2b53c:	f364 108f 	bfi	r0, r4, #6, #10
   2b540:	4632      	mov	r2, r6
   2b542:	4926      	ldr	r1, [pc, #152]	; (2b5dc <nct_cc_send+0xe0>)
   2b544:	f012 fd0d 	bl	3df62 <log_string_sync>
		return -ENOTSUP;
   2b548:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2b54c:	e7eb      	b.n	2b526 <nct_cc_send+0x2a>
	struct mqtt_publish_param publish = {
   2b54e:	2210      	movs	r2, #16
   2b550:	2100      	movs	r1, #0
   2b552:	eb0d 0002 	add.w	r0, sp, r2
   2b556:	f015 f881 	bl	4065c <memset>
			nct_cc_tx_list[cc_data->opcode].topic.utf8,
   2b55a:	230c      	movs	r3, #12
   2b55c:	4373      	muls	r3, r6
   2b55e:	4920      	ldr	r1, [pc, #128]	; (2b5e0 <nct_cc_send+0xe4>)
   2b560:	18ca      	adds	r2, r1, r3
	struct mqtt_publish_param publish = {
   2b562:	58cb      	ldr	r3, [r1, r3]
   2b564:	9302      	str	r3, [sp, #8]
   2b566:	6853      	ldr	r3, [r2, #4]
   2b568:	9303      	str	r3, [sp, #12]
   2b56a:	7a13      	ldrb	r3, [r2, #8]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   2b56c:	682a      	ldr	r2, [r5, #0]
	struct mqtt_publish_param publish = {
   2b56e:	f88d 3010 	strb.w	r3, [sp, #16]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   2b572:	b11a      	cbz	r2, 2b57c <nct_cc_send+0x80>
   2b574:	686b      	ldr	r3, [r5, #4]
   2b576:	b10b      	cbz	r3, 2b57c <nct_cc_send+0x80>
		publish.message.payload.len = cc_data->data.len;
   2b578:	e9cd 3205 	strd	r3, r2, [sp, #20]
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   2b57c:	68ab      	ldr	r3, [r5, #8]
   2b57e:	b313      	cbz	r3, 2b5c6 <nct_cc_send+0xca>
	LOG_DBG("mqtt_publish: id = %d opcode = %d len = %d", publish.message_id,
   2b580:	2104      	movs	r1, #4
   2b582:	f04f 0000 	mov.w	r0, #0
   2b586:	f361 0007 	bfi	r0, r1, #0, #8
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   2b58a:	b29b      	uxth	r3, r3
	LOG_DBG("mqtt_publish: id = %d opcode = %d len = %d", publish.message_id,
   2b58c:	f364 108f 	bfi	r0, r4, #6, #10
   2b590:	e9cd 6200 	strd	r6, r2, [sp]
   2b594:	4913      	ldr	r1, [pc, #76]	; (2b5e4 <nct_cc_send+0xe8>)
   2b596:	4a14      	ldr	r2, [pc, #80]	; (2b5e8 <nct_cc_send+0xec>)
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   2b598:	f8ad 301c 	strh.w	r3, [sp, #28]
	LOG_DBG("mqtt_publish: id = %d opcode = %d len = %d", publish.message_id,
   2b59c:	f012 fce1 	bl	3df62 <log_string_sync>
	int err = mqtt_publish(&nct.client, &publish);
   2b5a0:	a902      	add	r1, sp, #8
   2b5a2:	4812      	ldr	r0, [pc, #72]	; (2b5ec <nct_cc_send+0xf0>)
   2b5a4:	f013 fa84 	bl	3eab0 <mqtt_publish>
	if (err) {
   2b5a8:	4605      	mov	r5, r0
   2b5aa:	2800      	cmp	r0, #0
   2b5ac:	d0bb      	beq.n	2b526 <nct_cc_send+0x2a>
		LOG_ERR("mqtt_publish failed %d", err);
   2b5ae:	2301      	movs	r3, #1
   2b5b0:	f04f 0000 	mov.w	r0, #0
   2b5b4:	f363 0007 	bfi	r0, r3, #0, #8
   2b5b8:	f364 108f 	bfi	r0, r4, #6, #10
   2b5bc:	462a      	mov	r2, r5
   2b5be:	490c      	ldr	r1, [pc, #48]	; (2b5f0 <nct_cc_send+0xf4>)
   2b5c0:	f012 fccf 	bl	3df62 <log_string_sync>
   2b5c4:	e7af      	b.n	2b526 <nct_cc_send+0x2a>
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   2b5c6:	490b      	ldr	r1, [pc, #44]	; (2b5f4 <nct_cc_send+0xf8>)
   2b5c8:	680b      	ldr	r3, [r1, #0]
   2b5ca:	3301      	adds	r3, #1
   2b5cc:	600b      	str	r3, [r1, #0]
   2b5ce:	e7d7      	b.n	2b580 <nct_cc_send+0x84>
   2b5d0:	00041c2c 	.word	0x00041c2c
   2b5d4:	00041d24 	.word	0x00041d24
   2b5d8:	00046747 	.word	0x00046747
   2b5dc:	00046757 	.word	0x00046757
   2b5e0:	000425d4 	.word	0x000425d4
   2b5e4:	00046763 	.word	0x00046763
   2b5e8:	00046540 	.word	0x00046540
   2b5ec:	20023ca8 	.word	0x20023ca8
   2b5f0:	00046792 	.word	0x00046792
   2b5f4:	20023c8c 	.word	0x20023c8c

0002b5f8 <nct_dc_endpoint_set>:
}

void nct_dc_endpoint_set(const struct nrf_cloud_data *tx_endp,
			 const struct nrf_cloud_data *rx_endp,
			 const struct nrf_cloud_data *m_endp)
{
   2b5f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2b5fc:	4680      	mov	r8, r0
	LOG_DBG("nct_dc_endpoint_set");
   2b5fe:	2304      	movs	r3, #4
   2b600:	f04f 0000 	mov.w	r0, #0
{
   2b604:	460e      	mov	r6, r1
   2b606:	4617      	mov	r7, r2
	LOG_DBG("nct_dc_endpoint_set");
   2b608:	f363 0007 	bfi	r0, r3, #0, #8
   2b60c:	4d30      	ldr	r5, [pc, #192]	; (2b6d0 <nct_dc_endpoint_set+0xd8>)
   2b60e:	4b31      	ldr	r3, [pc, #196]	; (2b6d4 <nct_dc_endpoint_set+0xdc>)
   2b610:	4a31      	ldr	r2, [pc, #196]	; (2b6d8 <nct_dc_endpoint_set+0xe0>)
   2b612:	1aed      	subs	r5, r5, r3
   2b614:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   2b618:	f365 108f 	bfi	r0, r5, #6, #10
   2b61c:	492f      	ldr	r1, [pc, #188]	; (2b6dc <nct_dc_endpoint_set+0xe4>)
	/* In case the endpoint was previous set, free and reset
	 * before copying new one.
	 */
	dc_endpoint_free();

	nct.dc_tx_endp.utf8 = (u8_t *)tx_endp->ptr;
   2b61e:	4c30      	ldr	r4, [pc, #192]	; (2b6e0 <nct_dc_endpoint_set+0xe8>)
	LOG_DBG("nct_dc_endpoint_set");
   2b620:	f012 fc9f 	bl	3df62 <log_string_sync>
	dc_endpoint_free();
   2b624:	f7ff fb52 	bl	2accc <dc_endpoint_free>
	nct.dc_tx_endp.utf8 = (u8_t *)tx_endp->ptr;
   2b628:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2b62c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	nct.dc_tx_endp.size = tx_endp->len;
   2b630:	f8d8 3000 	ldr.w	r3, [r8]
   2b634:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0

	nct.dc_rx_endp.utf8 = (u8_t *)rx_endp->ptr;
   2b638:	6873      	ldr	r3, [r6, #4]
   2b63a:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
	nct.dc_rx_endp.size = rx_endp->len;
   2b63e:	6833      	ldr	r3, [r6, #0]
   2b640:	4626      	mov	r6, r4
   2b642:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8

	if (m_endp != NULL) {
   2b646:	2f00      	cmp	r7, #0
   2b648:	d03f      	beq.n	2b6ca <nct_dc_endpoint_set+0xd2>
		nct.dc_m_endp.utf8 = (u8_t *)m_endp->ptr;
		nct.dc_m_endp.size = m_endp->len;
   2b64a:	6838      	ldr	r0, [r7, #0]
		nct.dc_m_endp.utf8 = (u8_t *)m_endp->ptr;
   2b64c:	687b      	ldr	r3, [r7, #4]
		nct.dc_m_endp.size = m_endp->len;
   2b64e:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
#if defined(CONFIG_AWS_FOTA)
		int ret;

		nct.job_status_endp.size =
			nct.dc_m_endp.size + NCT_TOPIC_PREFIX_M_D_LEN +
			NRF_CLOUD_CLIENT_ID_LEN + NCT_JOB_STATUS_TOPIC_LEN + 1;
   2b652:	301d      	adds	r0, #29
		nct.dc_m_endp.utf8 = (u8_t *)m_endp->ptr;
   2b654:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		nct.job_status_endp.size =
   2b658:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
		nct.job_status_endp.utf8 =
			nrf_cloud_malloc(nct.job_status_endp.size);
   2b65c:	f00d f82c 	bl	386b8 <k_malloc>
		nct.job_status_endp.utf8 =
   2b660:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
		if (nct.job_status_endp.utf8 == NULL) {
   2b664:	b960      	cbnz	r0, 2b680 <nct_dc_endpoint_set+0x88>
			LOG_ERR("Failed to allocate mem for job status topic");
   2b666:	f04f 0000 	mov.w	r0, #0
   2b66a:	2301      	movs	r3, #1
   2b66c:	491d      	ldr	r1, [pc, #116]	; (2b6e4 <nct_dc_endpoint_set+0xec>)
   2b66e:	f363 0007 	bfi	r0, r3, #0, #8
   2b672:	f365 108f 	bfi	r0, r5, #6, #10
		}
		/* size is actually string length */
		nct.job_status_endp.size = ret;
#endif
	}
}
   2b676:	b004      	add	sp, #16
   2b678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			LOG_ERR("Failed to build job status topic");
   2b67c:	f012 bc71 	b.w	3df62 <log_string_sync>
		ret = snprintf(nct.job_status_endp.utf8,
   2b680:	4b19      	ldr	r3, [pc, #100]	; (2b6e8 <nct_dc_endpoint_set+0xf0>)
   2b682:	4a1a      	ldr	r2, [pc, #104]	; (2b6ec <nct_dc_endpoint_set+0xf4>)
   2b684:	9302      	str	r3, [sp, #8]
   2b686:	4b1a      	ldr	r3, [pc, #104]	; (2b6f0 <nct_dc_endpoint_set+0xf8>)
   2b688:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
   2b68c:	9301      	str	r3, [sp, #4]
   2b68e:	4b19      	ldr	r3, [pc, #100]	; (2b6f4 <nct_dc_endpoint_set+0xfc>)
   2b690:	9300      	str	r3, [sp, #0]
   2b692:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2b696:	f010 fd9f 	bl	3c1d8 <sniprintf>
		if ((ret <= 0) || (ret >= nct.job_status_endp.size)) {
   2b69a:	2800      	cmp	r0, #0
   2b69c:	dd03      	ble.n	2b6a6 <nct_dc_endpoint_set+0xae>
   2b69e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   2b6a2:	4283      	cmp	r3, r0
   2b6a4:	d80f      	bhi.n	2b6c6 <nct_dc_endpoint_set+0xce>
			nrf_cloud_free(nct.job_status_endp.utf8);
   2b6a6:	f8d6 00c4 	ldr.w	r0, [r6, #196]	; 0xc4
   2b6aa:	f014 fe14 	bl	402d6 <k_free>
			nct.job_status_endp.utf8 = NULL;
   2b6ae:	2300      	movs	r3, #0
			LOG_ERR("Failed to build job status topic");
   2b6b0:	f04f 0000 	mov.w	r0, #0
			nct.job_status_endp.size = 0;
   2b6b4:	e9c6 3331 	strd	r3, r3, [r6, #196]	; 0xc4
			LOG_ERR("Failed to build job status topic");
   2b6b8:	2301      	movs	r3, #1
   2b6ba:	f363 0007 	bfi	r0, r3, #0, #8
   2b6be:	f365 108f 	bfi	r0, r5, #6, #10
   2b6c2:	490d      	ldr	r1, [pc, #52]	; (2b6f8 <nct_dc_endpoint_set+0x100>)
   2b6c4:	e7d7      	b.n	2b676 <nct_dc_endpoint_set+0x7e>
		nct.job_status_endp.size = ret;
   2b6c6:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
}
   2b6ca:	b004      	add	sp, #16
   2b6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b6d0:	00041d24 	.word	0x00041d24
   2b6d4:	00041c2c 	.word	0x00041c2c
   2b6d8:	0004654c 	.word	0x0004654c
   2b6dc:	00046874 	.word	0x00046874
   2b6e0:	20023c90 	.word	0x20023c90
   2b6e4:	0004688c 	.word	0x0004688c
   2b6e8:	000468b8 	.word	0x000468b8
   2b6ec:	000478fb 	.word	0x000478fb
   2b6f0:	2002b2f0 	.word	0x2002b2f0
   2b6f4:	000468be 	.word	0x000468be
   2b6f8:	000468c3 	.word	0x000468c3

0002b6fc <nct_dc_endpoint_get>:

void nct_dc_endpoint_get(struct nrf_cloud_data *const tx_endp,
			 struct nrf_cloud_data *const rx_endp,
			 struct nrf_cloud_data *const m_endp)
{
   2b6fc:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("nct_dc_endpoint_get");
   2b6fe:	2304      	movs	r3, #4
{
   2b700:	4606      	mov	r6, r0
	LOG_DBG("nct_dc_endpoint_get");
   2b702:	f04f 0000 	mov.w	r0, #0
{
   2b706:	460d      	mov	r5, r1
   2b708:	4614      	mov	r4, r2
	LOG_DBG("nct_dc_endpoint_get");
   2b70a:	f363 0007 	bfi	r0, r3, #0, #8
   2b70e:	4a0f      	ldr	r2, [pc, #60]	; (2b74c <nct_dc_endpoint_get+0x50>)
   2b710:	4b0f      	ldr	r3, [pc, #60]	; (2b750 <nct_dc_endpoint_get+0x54>)
   2b712:	4910      	ldr	r1, [pc, #64]	; (2b754 <nct_dc_endpoint_get+0x58>)
   2b714:	1a9b      	subs	r3, r3, r2
   2b716:	08db      	lsrs	r3, r3, #3
   2b718:	f363 108f 	bfi	r0, r3, #6, #10
   2b71c:	4a0e      	ldr	r2, [pc, #56]	; (2b758 <nct_dc_endpoint_get+0x5c>)
   2b71e:	f012 fc20 	bl	3df62 <log_string_sync>

	tx_endp->ptr = nct.dc_tx_endp.utf8;
   2b722:	4b0e      	ldr	r3, [pc, #56]	; (2b75c <nct_dc_endpoint_get+0x60>)
   2b724:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
   2b728:	6072      	str	r2, [r6, #4]
	tx_endp->len = nct.dc_tx_endp.size;
   2b72a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
   2b72e:	6032      	str	r2, [r6, #0]

	rx_endp->ptr = nct.dc_rx_endp.utf8;
   2b730:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   2b734:	606a      	str	r2, [r5, #4]
	rx_endp->len = nct.dc_rx_endp.size;
   2b736:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   2b73a:	602a      	str	r2, [r5, #0]

	if (m_endp != NULL) {
   2b73c:	b12c      	cbz	r4, 2b74a <nct_dc_endpoint_get+0x4e>
		m_endp->ptr = nct.dc_m_endp.utf8;
   2b73e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
		m_endp->len = nct.dc_m_endp.size;
   2b742:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
		m_endp->ptr = nct.dc_m_endp.utf8;
   2b746:	6062      	str	r2, [r4, #4]
		m_endp->len = nct.dc_m_endp.size;
   2b748:	6023      	str	r3, [r4, #0]
	}
}
   2b74a:	bd70      	pop	{r4, r5, r6, pc}
   2b74c:	00041c2c 	.word	0x00041c2c
   2b750:	00041d24 	.word	0x00041d24
   2b754:	0004685c 	.word	0x0004685c
   2b758:	00046560 	.word	0x00046560
   2b75c:	20023c90 	.word	0x20023c90

0002b760 <nct_dc_connect>:

int nct_dc_connect(void)
{
   2b760:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("nct_dc_connect");
   2b762:	2304      	movs	r3, #4
   2b764:	f04f 0000 	mov.w	r0, #0
   2b768:	4a10      	ldr	r2, [pc, #64]	; (2b7ac <nct_dc_connect+0x4c>)
   2b76a:	f363 0007 	bfi	r0, r3, #0, #8
   2b76e:	4b10      	ldr	r3, [pc, #64]	; (2b7b0 <nct_dc_connect+0x50>)
   2b770:	4910      	ldr	r1, [pc, #64]	; (2b7b4 <nct_dc_connect+0x54>)
   2b772:	1a9b      	subs	r3, r3, r2
   2b774:	08db      	lsrs	r3, r3, #3
   2b776:	f363 108f 	bfi	r0, r3, #6, #10
   2b77a:	4a0f      	ldr	r2, [pc, #60]	; (2b7b8 <nct_dc_connect+0x58>)
   2b77c:	f012 fbf1 	bl	3df62 <log_string_sync>

	struct mqtt_topic subscribe_topic = {
		.topic = {
			.utf8 = nct.dc_rx_endp.utf8,
   2b780:	480e      	ldr	r0, [pc, #56]	; (2b7bc <nct_dc_connect+0x5c>)
		.list = &subscribe_topic,
		.list_count = 1,
		.message_id = NCT_DC_SUBSCRIBE_ID
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   2b782:	a901      	add	r1, sp, #4
	struct mqtt_topic subscribe_topic = {
   2b784:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
	return mqtt_subscribe(&nct.client, &subscription_list);
   2b788:	3018      	adds	r0, #24
	struct mqtt_topic subscribe_topic = {
   2b78a:	9303      	str	r3, [sp, #12]
   2b78c:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   2b790:	9304      	str	r3, [sp, #16]
   2b792:	2301      	movs	r3, #1
   2b794:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct mqtt_subscription_list subscription_list = {
   2b798:	ab03      	add	r3, sp, #12
   2b79a:	9301      	str	r3, [sp, #4]
   2b79c:	4b08      	ldr	r3, [pc, #32]	; (2b7c0 <nct_dc_connect+0x60>)
   2b79e:	9302      	str	r3, [sp, #8]
	return mqtt_subscribe(&nct.client, &subscription_list);
   2b7a0:	f013 fa04 	bl	3ebac <mqtt_subscribe>
}
   2b7a4:	b007      	add	sp, #28
   2b7a6:	f85d fb04 	ldr.w	pc, [sp], #4
   2b7aa:	bf00      	nop
   2b7ac:	00041c2c 	.word	0x00041c2c
   2b7b0:	00041d24 	.word	0x00041d24
   2b7b4:	00046833 	.word	0x00046833
   2b7b8:	00046574 	.word	0x00046574
   2b7bc:	20023c90 	.word	0x20023c90
   2b7c0:	223d0001 	.word	0x223d0001

0002b7c4 <nct_dc_disconnect>:
{
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
}

int nct_dc_disconnect(void)
{
   2b7c4:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("nct_dc_disconnect");
   2b7c6:	2304      	movs	r3, #4
   2b7c8:	f04f 0000 	mov.w	r0, #0
   2b7cc:	4a0c      	ldr	r2, [pc, #48]	; (2b800 <nct_dc_disconnect+0x3c>)
   2b7ce:	f363 0007 	bfi	r0, r3, #0, #8
   2b7d2:	4b0c      	ldr	r3, [pc, #48]	; (2b804 <nct_dc_disconnect+0x40>)
   2b7d4:	490c      	ldr	r1, [pc, #48]	; (2b808 <nct_dc_disconnect+0x44>)
   2b7d6:	1a9b      	subs	r3, r3, r2
   2b7d8:	08db      	lsrs	r3, r3, #3
   2b7da:	f363 108f 	bfi	r0, r3, #6, #10
   2b7de:	4a0b      	ldr	r2, [pc, #44]	; (2b80c <nct_dc_disconnect+0x48>)
   2b7e0:	f012 fbbf 	bl	3df62 <log_string_sync>

	const struct mqtt_subscription_list subscription_list = {
   2b7e4:	480a      	ldr	r0, [pc, #40]	; (2b810 <nct_dc_disconnect+0x4c>)
		.list = (struct mqtt_topic *)&nct.dc_rx_endp,
		.list_count = 1,
		.message_id = NCT_DC_SUBSCRIBE_ID
	};

	return mqtt_unsubscribe(&nct.client, &subscription_list);
   2b7e6:	4669      	mov	r1, sp
	const struct mqtt_subscription_list subscription_list = {
   2b7e8:	f100 03b4 	add.w	r3, r0, #180	; 0xb4
   2b7ec:	9300      	str	r3, [sp, #0]
   2b7ee:	4b09      	ldr	r3, [pc, #36]	; (2b814 <nct_dc_disconnect+0x50>)
	return mqtt_unsubscribe(&nct.client, &subscription_list);
   2b7f0:	3018      	adds	r0, #24
	const struct mqtt_subscription_list subscription_list = {
   2b7f2:	9301      	str	r3, [sp, #4]
	return mqtt_unsubscribe(&nct.client, &subscription_list);
   2b7f4:	f013 fa01 	bl	3ebfa <mqtt_unsubscribe>
}
   2b7f8:	b003      	add	sp, #12
   2b7fa:	f85d fb04 	ldr.w	pc, [sp], #4
   2b7fe:	bf00      	nop
   2b800:	00041c2c 	.word	0x00041c2c
   2b804:	00041d24 	.word	0x00041d24
   2b808:	00046846 	.word	0x00046846
   2b80c:	00046583 	.word	0x00046583
   2b810:	20023c90 	.word	0x20023c90
   2b814:	223d0001 	.word	0x223d0001

0002b818 <nct_disconnect>:

int nct_disconnect(void)
{
   2b818:	b508      	push	{r3, lr}
	LOG_DBG("nct_disconnect");
   2b81a:	f04f 0000 	mov.w	r0, #0
   2b81e:	2304      	movs	r3, #4
   2b820:	4a09      	ldr	r2, [pc, #36]	; (2b848 <nct_disconnect+0x30>)
   2b822:	f363 0007 	bfi	r0, r3, #0, #8
   2b826:	4b09      	ldr	r3, [pc, #36]	; (2b84c <nct_disconnect+0x34>)
   2b828:	4909      	ldr	r1, [pc, #36]	; (2b850 <nct_disconnect+0x38>)
   2b82a:	1a9b      	subs	r3, r3, r2
   2b82c:	08db      	lsrs	r3, r3, #3
   2b82e:	f363 108f 	bfi	r0, r3, #6, #10
   2b832:	4a08      	ldr	r2, [pc, #32]	; (2b854 <nct_disconnect+0x3c>)
   2b834:	f012 fb95 	bl	3df62 <log_string_sync>

	dc_endpoint_free();
   2b838:	f7ff fa48 	bl	2accc <dc_endpoint_free>
	return mqtt_disconnect(&nct.client);
}
   2b83c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return mqtt_disconnect(&nct.client);
   2b840:	4805      	ldr	r0, [pc, #20]	; (2b858 <nct_disconnect+0x40>)
   2b842:	f013 b98a 	b.w	3eb5a <mqtt_disconnect>
   2b846:	bf00      	nop
   2b848:	00041c2c 	.word	0x00041c2c
   2b84c:	00041d24 	.word	0x00041d24
   2b850:	000468e4 	.word	0x000468e4
   2b854:	00046595 	.word	0x00046595
   2b858:	20023ca8 	.word	0x20023ca8

0002b85c <nct_process>:

void nct_process(void)
{
   2b85c:	b510      	push	{r4, lr}
	mqtt_input(&nct.client);
   2b85e:	4c04      	ldr	r4, [pc, #16]	; (2b870 <nct_process+0x14>)
   2b860:	4620      	mov	r0, r4
   2b862:	f013 fa5a 	bl	3ed1a <mqtt_input>
	mqtt_live(&nct.client);
   2b866:	4620      	mov	r0, r4
}
   2b868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mqtt_live(&nct.client);
   2b86c:	f013 ba17 	b.w	3ec9e <mqtt_live>
   2b870:	20023ca8 	.word	0x20023ca8

0002b874 <nct_keepalive_time_left>:

int nct_keepalive_time_left(void)
{
	return (int)mqtt_keepalive_time_left(&nct.client);
   2b874:	4801      	ldr	r0, [pc, #4]	; (2b87c <nct_keepalive_time_left+0x8>)
   2b876:	f013 ba39 	b.w	3ecec <mqtt_keepalive_time_left>
   2b87a:	bf00      	nop
   2b87c:	20023ca8 	.word	0x20023ca8

0002b880 <nct_socket_get>:
}

int nct_socket_get(void)
{
	return nct.client.transport.tls.sock;
}
   2b880:	4b01      	ldr	r3, [pc, #4]	; (2b888 <nct_socket_get+0x8>)
   2b882:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2b884:	4770      	bx	lr
   2b886:	bf00      	nop
   2b888:	20023c90 	.word	0x20023c90

0002b88c <send_to_modem>:
	return type_lookup_socket2gps[type];
}

static int send_to_modem(void *data, size_t data_len,
			 nrf_gnss_agps_data_type_t type)
{
   2b88c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	/* At this point, GPS driver or app-provided socket is assumed. */
	if (gps_dev) {
   2b88e:	4b26      	ldr	r3, [pc, #152]	; (2b928 <send_to_modem+0x9c>)
{
   2b890:	4605      	mov	r5, r0
	if (gps_dev) {
   2b892:	681c      	ldr	r4, [r3, #0]
{
   2b894:	f8ad 200e 	strh.w	r2, [sp, #14]
	if (gps_dev) {
   2b898:	b18c      	cbz	r4, 2b8be <send_to_modem+0x32>
	return type_lookup_socket2gps[type];
   2b89a:	b293      	uxth	r3, r2
   2b89c:	4a23      	ldr	r2, [pc, #140]	; (2b92c <send_to_modem+0xa0>)
   2b89e:	5cd0      	ldrb	r0, [r2, r3]
	if ((data == NULL) || (dev == NULL)) {
   2b8a0:	2d00      	cmp	r5, #0
   2b8a2:	d03a      	beq.n	2b91a <send_to_modem+0x8e>
	if (api->agps_write == NULL) {
   2b8a4:	6863      	ldr	r3, [r4, #4]
   2b8a6:	689e      	ldr	r6, [r3, #8]
   2b8a8:	2e00      	cmp	r6, #0
   2b8aa:	d039      	beq.n	2b920 <send_to_modem+0x94>
	return api->agps_write(dev, type, data, data_len);
   2b8ac:	460b      	mov	r3, r1
   2b8ae:	462a      	mov	r2, r5
   2b8b0:	4601      	mov	r1, r0
   2b8b2:	4620      	mov	r0, r4
   2b8b4:	47b0      	blx	r6
   2b8b6:	4604      	mov	r4, r0
	if (agps_print_enabled) {
		agps_print(type, data);
	}

	return err;
}
   2b8b8:	4620      	mov	r0, r4
   2b8ba:	b004      	add	sp, #16
   2b8bc:	bd70      	pop	{r4, r5, r6, pc}
	err = nrf_sendto(fd, data, data_len, 0, &type, sizeof(type));
   2b8be:	2302      	movs	r3, #2
   2b8c0:	460a      	mov	r2, r1
   2b8c2:	9301      	str	r3, [sp, #4]
   2b8c4:	4601      	mov	r1, r0
   2b8c6:	f10d 030e 	add.w	r3, sp, #14
   2b8ca:	4819      	ldr	r0, [pc, #100]	; (2b930 <send_to_modem+0xa4>)
   2b8cc:	9300      	str	r3, [sp, #0]
   2b8ce:	6800      	ldr	r0, [r0, #0]
   2b8d0:	4623      	mov	r3, r4
   2b8d2:	f008 fc51 	bl	34178 <nrf_sendto>
	if (err < 0) {
   2b8d6:	2800      	cmp	r0, #0
   2b8d8:	da15      	bge.n	2b906 <send_to_modem+0x7a>
		LOG_ERR("Failed to send AGPS data to modem, errno: %d", errno);
   2b8da:	2301      	movs	r3, #1
   2b8dc:	f04f 0400 	mov.w	r4, #0
   2b8e0:	4a14      	ldr	r2, [pc, #80]	; (2b934 <send_to_modem+0xa8>)
   2b8e2:	f363 0407 	bfi	r4, r3, #0, #8
   2b8e6:	4b14      	ldr	r3, [pc, #80]	; (2b938 <send_to_modem+0xac>)
   2b8e8:	1a9b      	subs	r3, r3, r2
   2b8ea:	08db      	lsrs	r3, r3, #3
   2b8ec:	f363 148f 	bfi	r4, r3, #6, #10
   2b8f0:	f012 fd23 	bl	3e33a <__errno>
   2b8f4:	4911      	ldr	r1, [pc, #68]	; (2b93c <send_to_modem+0xb0>)
   2b8f6:	6802      	ldr	r2, [r0, #0]
   2b8f8:	4620      	mov	r0, r4
   2b8fa:	f012 fb32 	bl	3df62 <log_string_sync>
		err = -errno;
   2b8fe:	f012 fd1c 	bl	3e33a <__errno>
   2b902:	6804      	ldr	r4, [r0, #0]
   2b904:	4264      	negs	r4, r4
	if (agps_print_enabled) {
   2b906:	4b0e      	ldr	r3, [pc, #56]	; (2b940 <send_to_modem+0xb4>)
   2b908:	781b      	ldrb	r3, [r3, #0]
   2b90a:	2b00      	cmp	r3, #0
   2b90c:	d0d4      	beq.n	2b8b8 <send_to_modem+0x2c>
		agps_print(type, data);
   2b90e:	4629      	mov	r1, r5
   2b910:	f89d 000e 	ldrb.w	r0, [sp, #14]
   2b914:	f000 fb18 	bl	2bf48 <agps_print>
   2b918:	e7ce      	b.n	2b8b8 <send_to_modem+0x2c>
		return -EINVAL;
   2b91a:	f06f 0415 	mvn.w	r4, #21
   2b91e:	e7cb      	b.n	2b8b8 <send_to_modem+0x2c>
		return -ENOTSUP;
   2b920:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2b924:	e7c8      	b.n	2b8b8 <send_to_modem+0x2c>
   2b926:	bf00      	nop
   2b928:	20024760 	.word	0x20024760
   2b92c:	00046f0e 	.word	0x00046f0e
   2b930:	200320e8 	.word	0x200320e8
   2b934:	00041c2c 	.word	0x00041c2c
   2b938:	00041d0c 	.word	0x00041d0c
   2b93c:	00046ed2 	.word	0x00046ed2
   2b940:	2002b3f5 	.word	0x2002b3f5

0002b944 <nrf_cloud_agps_request>:
{
   2b944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b948:	f6ad 1dcc 	subw	sp, sp, #2508	; 0x9cc
	struct modem_param_info modem_info = {0};
   2b94c:	f640 0278 	movw	r2, #2168	; 0x878
{
   2b950:	4605      	mov	r5, r0
   2b952:	460f      	mov	r7, r1
	struct modem_param_info modem_info = {0};
   2b954:	a854      	add	r0, sp, #336	; 0x150
   2b956:	2100      	movs	r1, #0
   2b958:	f014 fe80 	bl	4065c <memset>
	struct nct_dc_data msg = {
   2b95c:	2300      	movs	r3, #0
   2b95e:	f10d 0854 	add.w	r8, sp, #84	; 0x54
   2b962:	9305      	str	r3, [sp, #20]
   2b964:	9307      	str	r3, [sp, #28]
   2b966:	f8cd 8018 	str.w	r8, [sp, #24]
	err = modem_info_init();
   2b96a:	f7fd fe47 	bl	295fc <modem_info_init>
	if (err) {
   2b96e:	4604      	mov	r4, r0
   2b970:	b190      	cbz	r0, 2b998 <nrf_cloud_agps_request+0x54>
		LOG_ERR("Could not initialize modem info module");
   2b972:	2301      	movs	r3, #1
   2b974:	f04f 0000 	mov.w	r0, #0
   2b978:	4a51      	ldr	r2, [pc, #324]	; (2bac0 <nrf_cloud_agps_request+0x17c>)
   2b97a:	f363 0007 	bfi	r0, r3, #0, #8
   2b97e:	4b51      	ldr	r3, [pc, #324]	; (2bac4 <nrf_cloud_agps_request+0x180>)
   2b980:	4951      	ldr	r1, [pc, #324]	; (2bac8 <nrf_cloud_agps_request+0x184>)
   2b982:	1a9b      	subs	r3, r3, r2
   2b984:	08db      	lsrs	r3, r3, #3
   2b986:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not initialize modem info parameters");
   2b98a:	f012 faea 	bl	3df62 <log_string_sync>
}
   2b98e:	4620      	mov	r0, r4
   2b990:	f60d 1dcc 	addw	sp, sp, #2508	; 0x9cc
   2b994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = modem_info_params_init(&modem_info);
   2b998:	a854      	add	r0, sp, #336	; 0x150
   2b99a:	f7fd fe7b 	bl	29694 <modem_info_params_init>
	if (err) {
   2b99e:	4604      	mov	r4, r0
   2b9a0:	b160      	cbz	r0, 2b9bc <nrf_cloud_agps_request+0x78>
		LOG_ERR("Could not initialize modem info parameters");
   2b9a2:	2301      	movs	r3, #1
   2b9a4:	f04f 0000 	mov.w	r0, #0
   2b9a8:	4a45      	ldr	r2, [pc, #276]	; (2bac0 <nrf_cloud_agps_request+0x17c>)
   2b9aa:	f363 0007 	bfi	r0, r3, #0, #8
   2b9ae:	4b45      	ldr	r3, [pc, #276]	; (2bac4 <nrf_cloud_agps_request+0x180>)
   2b9b0:	4946      	ldr	r1, [pc, #280]	; (2bacc <nrf_cloud_agps_request+0x188>)
   2b9b2:	1a9b      	subs	r3, r3, r2
   2b9b4:	08db      	lsrs	r3, r3, #3
   2b9b6:	f363 108f 	bfi	r0, r3, #6, #10
   2b9ba:	e7e6      	b.n	2b98a <nrf_cloud_agps_request+0x46>
	err = modem_info_params_get(&modem_info);
   2b9bc:	a854      	add	r0, sp, #336	; 0x150
   2b9be:	f7fd feb9 	bl	29734 <modem_info_params_get>
	if (err) {
   2b9c2:	4604      	mov	r4, r0
   2b9c4:	b160      	cbz	r0, 2b9e0 <nrf_cloud_agps_request+0x9c>
		LOG_ERR("Could not obtain cell information");
   2b9c6:	2301      	movs	r3, #1
   2b9c8:	f04f 0000 	mov.w	r0, #0
   2b9cc:	4a3c      	ldr	r2, [pc, #240]	; (2bac0 <nrf_cloud_agps_request+0x17c>)
   2b9ce:	f363 0007 	bfi	r0, r3, #0, #8
   2b9d2:	4b3c      	ldr	r3, [pc, #240]	; (2bac4 <nrf_cloud_agps_request+0x180>)
   2b9d4:	493e      	ldr	r1, [pc, #248]	; (2bad0 <nrf_cloud_agps_request+0x18c>)
   2b9d6:	1a9b      	subs	r3, r3, r2
   2b9d8:	08db      	lsrs	r3, r3, #3
   2b9da:	f363 108f 	bfi	r0, r3, #6, #10
   2b9de:	e7d4      	b.n	2b98a <nrf_cloud_agps_request+0x46>
	if ((types == NULL) || (type_count == 0)) {
   2b9e0:	b315      	cbz	r5, 2ba28 <nrf_cloud_agps_request+0xe4>
   2b9e2:	b30f      	cbz	r7, 2ba28 <nrf_cloud_agps_request+0xe4>
	size_t len = 0;
   2b9e4:	4606      	mov	r6, r0
		err = snprintk(&type_array[len], type_array_len,
   2b9e6:	f8df 9100 	ldr.w	r9, [pc, #256]	; 2bae8 <nrf_cloud_agps_request+0x1a4>
   2b9ea:	442f      	add	r7, r5
	for (size_t i = 0; i < type_count; i++) {
   2b9ec:	42af      	cmp	r7, r5
   2b9ee:	d145      	bne.n	2ba7c <nrf_cloud_agps_request+0x138>
	type_array[len - 1] = '\0';
   2b9f0:	2200      	movs	r2, #0
   2b9f2:	f10d 031f 	add.w	r3, sp, #31
   2b9f6:	559a      	strb	r2, [r3, r6]
		err = snprintk(types_array, sizeof(types_array),
   2b9f8:	211e      	movs	r1, #30
   2b9fa:	ab08      	add	r3, sp, #32
   2b9fc:	4a35      	ldr	r2, [pc, #212]	; (2bad4 <nrf_cloud_agps_request+0x190>)
   2b9fe:	a80d      	add	r0, sp, #52	; 0x34
   2ba00:	f012 fa58 	bl	3deb4 <snprintk>
		if (err < 0) {
   2ba04:	1e04      	subs	r4, r0, #0
   2ba06:	da12      	bge.n	2ba2e <nrf_cloud_agps_request+0xea>
			LOG_ERR("Error when creating type array: %d", err);
   2ba08:	2301      	movs	r3, #1
   2ba0a:	f04f 0000 	mov.w	r0, #0
   2ba0e:	4a2c      	ldr	r2, [pc, #176]	; (2bac0 <nrf_cloud_agps_request+0x17c>)
   2ba10:	f363 0007 	bfi	r0, r3, #0, #8
   2ba14:	4b2b      	ldr	r3, [pc, #172]	; (2bac4 <nrf_cloud_agps_request+0x180>)
   2ba16:	4930      	ldr	r1, [pc, #192]	; (2bad8 <nrf_cloud_agps_request+0x194>)
   2ba18:	1a9b      	subs	r3, r3, r2
   2ba1a:	4622      	mov	r2, r4
   2ba1c:	08db      	lsrs	r3, r3, #3
   2ba1e:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Failed to send A-GPS request, error: %d", err);
   2ba22:	f012 fa9e 	bl	3df62 <log_string_sync>
		return err;
   2ba26:	e7b2      	b.n	2b98e <nrf_cloud_agps_request+0x4a>
		types_array[0] = '\0';
   2ba28:	2300      	movs	r3, #0
   2ba2a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	len = snprintk(request, sizeof(request),
   2ba2e:	ab0d      	add	r3, sp, #52	; 0x34
   2ba30:	9303      	str	r3, [sp, #12]
		(u32_t)modem_info.network.cellid_dec,
   2ba32:	f50d 63e0 	add.w	r3, sp, #1792	; 0x700
	len = snprintk(request, sizeof(request),
   2ba36:	e9d3 0100 	ldrd	r0, r1, [r3]
   2ba3a:	f7f1 f97f 	bl	1cd3c <__aeabi_d2uiz>
   2ba3e:	f8bd 3230 	ldrh.w	r3, [sp, #560]	; 0x230
   2ba42:	f8bd 4310 	ldrh.w	r4, [sp, #784]	; 0x310
   2ba46:	9301      	str	r3, [sp, #4]
   2ba48:	f8bd 3380 	ldrh.w	r3, [sp, #896]	; 0x380
   2ba4c:	9002      	str	r0, [sp, #8]
   2ba4e:	9300      	str	r3, [sp, #0]
   2ba50:	4a22      	ldr	r2, [pc, #136]	; (2badc <nrf_cloud_agps_request+0x198>)
   2ba52:	4623      	mov	r3, r4
   2ba54:	21fa      	movs	r1, #250	; 0xfa
   2ba56:	4640      	mov	r0, r8
   2ba58:	f012 fa2c 	bl	3deb4 <snprintk>
	if (len < 0) {
   2ba5c:	1e04      	subs	r4, r0, #0
   2ba5e:	da19      	bge.n	2ba94 <nrf_cloud_agps_request+0x150>
		LOG_ERR("Failed to create A-GPS request, error: %d", len);
   2ba60:	2301      	movs	r3, #1
   2ba62:	f04f 0000 	mov.w	r0, #0
   2ba66:	4a16      	ldr	r2, [pc, #88]	; (2bac0 <nrf_cloud_agps_request+0x17c>)
   2ba68:	f363 0007 	bfi	r0, r3, #0, #8
   2ba6c:	4b15      	ldr	r3, [pc, #84]	; (2bac4 <nrf_cloud_agps_request+0x180>)
   2ba6e:	491c      	ldr	r1, [pc, #112]	; (2bae0 <nrf_cloud_agps_request+0x19c>)
   2ba70:	1a9b      	subs	r3, r3, r2
   2ba72:	08db      	lsrs	r3, r3, #3
   2ba74:	f363 108f 	bfi	r0, r3, #6, #10
   2ba78:	4622      	mov	r2, r4
   2ba7a:	e7d2      	b.n	2ba22 <nrf_cloud_agps_request+0xde>
		err = snprintk(&type_array[len], type_array_len,
   2ba7c:	a808      	add	r0, sp, #32
   2ba7e:	f815 3b01 	ldrb.w	r3, [r5], #1
   2ba82:	464a      	mov	r2, r9
   2ba84:	2114      	movs	r1, #20
   2ba86:	4430      	add	r0, r6
   2ba88:	f012 fa14 	bl	3deb4 <snprintk>
		if (err < 0) {
   2ba8c:	1e04      	subs	r4, r0, #0
   2ba8e:	dbbb      	blt.n	2ba08 <nrf_cloud_agps_request+0xc4>
		len += err;
   2ba90:	4426      	add	r6, r4
   2ba92:	e7ab      	b.n	2b9ec <nrf_cloud_agps_request+0xa8>
	err = nct_dc_send(&msg);
   2ba94:	a805      	add	r0, sp, #20
	msg.data.len = len;
   2ba96:	9405      	str	r4, [sp, #20]
	err = nct_dc_send(&msg);
   2ba98:	f014 fb45 	bl	40126 <nct_dc_send>
	if (err) {
   2ba9c:	4604      	mov	r4, r0
   2ba9e:	2800      	cmp	r0, #0
   2baa0:	f43f af75 	beq.w	2b98e <nrf_cloud_agps_request+0x4a>
		LOG_ERR("Failed to send A-GPS request, error: %d", err);
   2baa4:	2301      	movs	r3, #1
   2baa6:	f04f 0000 	mov.w	r0, #0
   2baaa:	4a05      	ldr	r2, [pc, #20]	; (2bac0 <nrf_cloud_agps_request+0x17c>)
   2baac:	f363 0007 	bfi	r0, r3, #0, #8
   2bab0:	4b04      	ldr	r3, [pc, #16]	; (2bac4 <nrf_cloud_agps_request+0x180>)
   2bab2:	490c      	ldr	r1, [pc, #48]	; (2bae4 <nrf_cloud_agps_request+0x1a0>)
   2bab4:	1a9b      	subs	r3, r3, r2
   2bab6:	08db      	lsrs	r3, r3, #3
   2bab8:	f363 108f 	bfi	r0, r3, #6, #10
   2babc:	4622      	mov	r2, r4
   2babe:	e7b0      	b.n	2ba22 <nrf_cloud_agps_request+0xde>
   2bac0:	00041c2c 	.word	0x00041c2c
   2bac4:	00041d0c 	.word	0x00041d0c
   2bac8:	00046d77 	.word	0x00046d77
   2bacc:	00046d9e 	.word	0x00046d9e
   2bad0:	00046dc9 	.word	0x00046dc9
   2bad4:	00046def 	.word	0x00046def
   2bad8:	00046dfd 	.word	0x00046dfd
   2badc:	00046e20 	.word	0x00046e20
   2bae0:	00046e80 	.word	0x00046e80
   2bae4:	00046eaa 	.word	0x00046eaa
   2bae8:	00046deb 	.word	0x00046deb

0002baec <nrf_cloud_agps_process>:

	return len;
}

int nrf_cloud_agps_process(const char *buf, size_t buf_len, const int *socket)
{
   2baec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nrf_cloud_apgs_element element = {};
	struct nrf_cloud_agps_system_time sys_time;
	size_t parsed_len = 0;
	u8_t version;

	version = buf[NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION_INDEX];
   2baf0:	7804      	ldrb	r4, [r0, #0]
{
   2baf2:	b0cb      	sub	sp, #300	; 0x12c
	parsed_len += NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION_SIZE;

	__ASSERT(version == NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION,
   2baf4:	2c01      	cmp	r4, #1
{
   2baf6:	4607      	mov	r7, r0
   2baf8:	468a      	mov	sl, r1
   2bafa:	4690      	mov	r8, r2
	__ASSERT(version == NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION,
   2bafc:	d00f      	beq.n	2bb1e <nrf_cloud_agps_process+0x32>
   2bafe:	f240 13f7 	movw	r3, #503	; 0x1f7
   2bb02:	4ab5      	ldr	r2, [pc, #724]	; (2bdd8 <nrf_cloud_agps_process+0x2ec>)
   2bb04:	49b5      	ldr	r1, [pc, #724]	; (2bddc <nrf_cloud_agps_process+0x2f0>)
   2bb06:	48b6      	ldr	r0, [pc, #728]	; (2bde0 <nrf_cloud_agps_process+0x2f4>)
   2bb08:	f012 f9c7 	bl	3de9a <printk>
   2bb0c:	4621      	mov	r1, r4
   2bb0e:	48b5      	ldr	r0, [pc, #724]	; (2bde4 <nrf_cloud_agps_process+0x2f8>)
   2bb10:	f012 f9c3 	bl	3de9a <printk>
   2bb14:	f240 11f7 	movw	r1, #503	; 0x1f7
   2bb18:	48af      	ldr	r0, [pc, #700]	; (2bdd8 <nrf_cloud_agps_process+0x2ec>)
   2bb1a:	f012 fa11 	bl	3df40 <assert_post_action>
		 "Cannot parse schema version: %d", version);

	LOG_DBG("Receievd AGPS data. Schema version: %d, length: %d",
		version, buf_len);

	if (socket) {
   2bb1e:	4cb2      	ldr	r4, [pc, #712]	; (2bde8 <nrf_cloud_agps_process+0x2fc>)
   2bb20:	4bb2      	ldr	r3, [pc, #712]	; (2bdec <nrf_cloud_agps_process+0x300>)
   2bb22:	4db3      	ldr	r5, [pc, #716]	; (2bdf0 <nrf_cloud_agps_process+0x304>)
   2bb24:	1ae4      	subs	r4, r4, r3
   2bb26:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2bb2a:	f1b8 0f00 	cmp.w	r8, #0
   2bb2e:	d010      	beq.n	2bb52 <nrf_cloud_agps_process+0x66>
		LOG_DBG("Using user-provided socket, fd %d", fd);

		gps_dev = NULL;
   2bb30:	2300      	movs	r3, #0
		fd = *socket;
   2bb32:	f8d8 2000 	ldr.w	r2, [r8]
		gps_dev = NULL;
   2bb36:	602b      	str	r3, [r5, #0]
		fd = *socket;
   2bb38:	4bae      	ldr	r3, [pc, #696]	; (2bdf4 <nrf_cloud_agps_process+0x308>)
   2bb3a:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2bb3c:	2501      	movs	r5, #1
	if (elements_left_to_process == 0) {
   2bb3e:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 2be04 <nrf_cloud_agps_process+0x318>
   2bb42:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 2be08 <nrf_cloud_agps_process+0x31c>
		LOG_WRN("Unknown AGPS data type: %d", agps_data->type);
   2bb46:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 2be0c <nrf_cloud_agps_process+0x320>
			LOG_ERR("GPS is not enabled, A-GPS response unhandled");
			return -ENODEV;
		}
	}

	while (parsed_len < buf_len) {
   2bb4a:	4555      	cmp	r5, sl
   2bb4c:	d318      	bcc.n	2bb80 <nrf_cloud_agps_process+0x94>
			LOG_ERR("Failed to send data to modem, error: %d", err);
			return err;
		}
	}

	return 0;
   2bb4e:	2300      	movs	r3, #0
   2bb50:	e012      	b.n	2bb78 <nrf_cloud_agps_process+0x8c>
	} else if (gps_dev == NULL) {
   2bb52:	682b      	ldr	r3, [r5, #0]
   2bb54:	2b00      	cmp	r3, #0
   2bb56:	d1f1      	bne.n	2bb3c <nrf_cloud_agps_process+0x50>
   2bb58:	48a7      	ldr	r0, [pc, #668]	; (2bdf8 <nrf_cloud_agps_process+0x30c>)
   2bb5a:	f00c fa25 	bl	37fa8 <z_impl_device_get_binding>
		gps_dev = device_get_binding("NRF9160_GPS");
   2bb5e:	6028      	str	r0, [r5, #0]
		if (gps_dev == NULL) {
   2bb60:	2800      	cmp	r0, #0
   2bb62:	d1eb      	bne.n	2bb3c <nrf_cloud_agps_process+0x50>
			LOG_ERR("GPS is not enabled, A-GPS response unhandled");
   2bb64:	2301      	movs	r3, #1
   2bb66:	f363 0007 	bfi	r0, r3, #0, #8
   2bb6a:	f364 108f 	bfi	r0, r4, #6, #10
   2bb6e:	49a3      	ldr	r1, [pc, #652]	; (2bdfc <nrf_cloud_agps_process+0x310>)
   2bb70:	f012 f9f7 	bl	3df62 <log_string_sync>
			return -ENODEV;
   2bb74:	f06f 0312 	mvn.w	r3, #18
}
   2bb78:	4618      	mov	r0, r3
   2bb7a:	b04b      	add	sp, #300	; 0x12c
   2bb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (elements_left_to_process == 0) {
   2bb80:	f8b8 1000 	ldrh.w	r1, [r8]
			get_next_agps_element(&element, &buf[parsed_len]);
   2bb84:	197b      	adds	r3, r7, r5
	if (elements_left_to_process == 0) {
   2bb86:	bb09      	cbnz	r1, 2bbcc <nrf_cloud_agps_process+0xe0>
			*(u16_t *)&buf[NRF_CLOUD_AGPS_BIN_COUNT_OFFSET] - 1;
   2bb88:	f8b3 1001 	ldrh.w	r1, [r3, #1]
			(enum nrf_cloud_agps_type)buf[NRF_CLOUD_AGPS_BIN_TYPE_OFFSET];
   2bb8c:	5d7a      	ldrb	r2, [r7, r5]
			*(u16_t *)&buf[NRF_CLOUD_AGPS_BIN_COUNT_OFFSET] - 1;
   2bb8e:	3901      	subs	r1, #1
		elements_left_to_process =
   2bb90:	f8a8 1000 	strh.w	r1, [r8]
		len += NRF_CLOUD_AGPS_BIN_TYPE_SIZE +
   2bb94:	2103      	movs	r1, #3
		element_type = element->type;
   2bb96:	f889 2000 	strb.w	r2, [r9]
	switch (element->type) {
   2bb9a:	1e50      	subs	r0, r2, #1
   2bb9c:	2808      	cmp	r0, #8
   2bb9e:	d8d6      	bhi.n	2bb4e <nrf_cloud_agps_process+0x62>
   2bba0:	f20f 0c04 	addw	ip, pc, #4
   2bba4:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
   2bba8:	0002bbdb 	.word	0x0002bbdb
   2bbac:	0002bbf7 	.word	0x0002bbf7
   2bbb0:	0002bbfd 	.word	0x0002bbfd
   2bbb4:	0002bc03 	.word	0x0002bc03
   2bbb8:	0002bb4f 	.word	0x0002bb4f
   2bbbc:	0002bc15 	.word	0x0002bc15
   2bbc0:	0002bc09 	.word	0x0002bc09
   2bbc4:	0002bc0f 	.word	0x0002bc0f
   2bbc8:	0002bc15 	.word	0x0002bc15
		elements_left_to_process -= 1;
   2bbcc:	3901      	subs	r1, #1
   2bbce:	f8a8 1000 	strh.w	r1, [r8]
		element->type = element_type;
   2bbd2:	f899 2000 	ldrb.w	r2, [r9]
	size_t len = 0;
   2bbd6:	2100      	movs	r1, #0
   2bbd8:	e7df      	b.n	2bb9a <nrf_cloud_agps_process+0xae>
		element->utc = (struct nrf_cloud_agps_utc *)(buf + len);
   2bbda:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_utc);
   2bbdc:	310e      	adds	r1, #14
		if (element.type == NRF_CLOUD_AGPS_GPS_TOWS) {
   2bbde:	2a06      	cmp	r2, #6
		parsed_len += element_size;
   2bbe0:	440d      	add	r5, r1
		if (element.type == NRF_CLOUD_AGPS_GPS_TOWS) {
   2bbe2:	d11a      	bne.n	2bc1a <nrf_cloud_agps_process+0x12e>
			memcpy(&sys_time.sv_tow[element.tow->sv_id - 1],
   2bbe4:	781a      	ldrb	r2, [r3, #0]
   2bbe6:	a94a      	add	r1, sp, #296	; 0x128
   2bbe8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   2bbec:	681b      	ldr	r3, [r3, #0]
   2bbee:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
   2bbf2:	6013      	str	r3, [r2, #0]
			continue;
   2bbf4:	e7a9      	b.n	2bb4a <nrf_cloud_agps_process+0x5e>
		element->ephemeris = (struct nrf_cloud_agps_ephemeris *)(buf + len);
   2bbf6:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_ephemeris);
   2bbf8:	313e      	adds	r1, #62	; 0x3e
		break;
   2bbfa:	e7f0      	b.n	2bbde <nrf_cloud_agps_process+0xf2>
		element->almanac = (struct nrf_cloud_agps_almanac *)(buf + len);
   2bbfc:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_almanac);
   2bbfe:	311f      	adds	r1, #31
		break;
   2bc00:	e7ed      	b.n	2bbde <nrf_cloud_agps_process+0xf2>
			(struct nrf_cloud_agps_klobuchar *)(buf + len);
   2bc02:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_klobuchar);
   2bc04:	3108      	adds	r1, #8
		break;
   2bc06:	e7ea      	b.n	2bbde <nrf_cloud_agps_process+0xf2>
			(struct nrf_cloud_agps_system_time *)(buf + len);
   2bc08:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_system_time) -
   2bc0a:	3110      	adds	r1, #16
		break;
   2bc0c:	e7e7      	b.n	2bbde <nrf_cloud_agps_process+0xf2>
		element->location = (struct nrf_cloud_agps_location *)(buf + len);
   2bc0e:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_location);
   2bc10:	310f      	adds	r1, #15
		break;
   2bc12:	e7e4      	b.n	2bbde <nrf_cloud_agps_process+0xf2>
			(struct nrf_cloud_agps_integrity *)(buf + len);
   2bc14:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_integrity);
   2bc16:	3104      	adds	r1, #4
		break;
   2bc18:	e7e1      	b.n	2bbde <nrf_cloud_agps_process+0xf2>
		} else if (element.type == NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK) {
   2bc1a:	2a07      	cmp	r2, #7
   2bc1c:	d120      	bne.n	2bc60 <nrf_cloud_agps_process+0x174>
			memcpy(&sys_time, element.time_and_tow,
   2bc1e:	6818      	ldr	r0, [r3, #0]
   2bc20:	6859      	ldr	r1, [r3, #4]
   2bc22:	aa03      	add	r2, sp, #12
   2bc24:	c203      	stmia	r2!, {r0, r1}
   2bc26:	6898      	ldr	r0, [r3, #8]
	dst->date_day		= src->time_and_tow->date_day;
   2bc28:	7859      	ldrb	r1, [r3, #1]
			memcpy(&sys_time, element.time_and_tow,
   2bc2a:	6010      	str	r0, [r2, #0]
	dst->date_day		= src->time_and_tow->date_day;
   2bc2c:	781a      	ldrb	r2, [r3, #0]
   2bc2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2bc32:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
	dst->time_full_s	= src->time_and_tow->time_full_s;
   2bc36:	f8d3 2002 	ldr.w	r2, [r3, #2]
   2bc3a:	9227      	str	r2, [sp, #156]	; 0x9c
	dst->time_frac_ms	= src->time_and_tow->time_frac_ms;
   2bc3c:	79d9      	ldrb	r1, [r3, #7]
   2bc3e:	799a      	ldrb	r2, [r3, #6]
	dst->sv_mask		= src->time_and_tow->sv_mask;
   2bc40:	9029      	str	r0, [sp, #164]	; 0xa4
	dst->time_frac_ms	= src->time_and_tow->time_frac_ms;
   2bc42:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2bc46:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	dst->sv_mask		= src->time_and_tow->sv_mask;
   2bc4a:	4601      	mov	r1, r0
	if (src->time_and_tow->sv_mask == 0U) {
   2bc4c:	2800      	cmp	r0, #0
   2bc4e:	f040 8136 	bne.w	2bebe <nrf_cloud_agps_process+0x3d2>
		memset(dst->sv_tow, 0, sizeof(dst->sv_tow));
   2bc52:	2280      	movs	r2, #128	; 0x80
   2bc54:	a82a      	add	r0, sp, #168	; 0xa8
   2bc56:	f014 fd01 	bl	4065c <memset>
		return send_to_modem(&time_and_tow, sizeof(time_and_tow),
   2bc5a:	2206      	movs	r2, #6
   2bc5c:	2190      	movs	r1, #144	; 0x90
   2bc5e:	e0a5      	b.n	2bdac <nrf_cloud_agps_process+0x2c0>
	switch (agps_data->type) {
   2bc60:	2808      	cmp	r0, #8
   2bc62:	f200 8163 	bhi.w	2bf2c <nrf_cloud_agps_process+0x440>
   2bc66:	e8df f010 	tbh	[pc, r0, lsl #1]
   2bc6a:	0009      	.short	0x0009
   2bc6c:	00d30022 	.word	0x00d30022
   2bc70:	0161010f 	.word	0x0161010f
   2bc74:	01610161 	.word	0x01610161
   2bc78:	015d013f 	.word	0x015d013f
	dst->a1		= src->utc->a1;
   2bc7c:	681a      	ldr	r2, [r3, #0]
   2bc7e:	9226      	str	r2, [sp, #152]	; 0x98
	dst->a0		= src->utc->a0;
   2bc80:	685a      	ldr	r2, [r3, #4]
   2bc82:	9227      	str	r2, [sp, #156]	; 0x9c
	dst->tot	= src->utc->tot;
   2bc84:	7a1a      	ldrb	r2, [r3, #8]
   2bc86:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
	dst->wn_t	= src->utc->wn_t;
   2bc8a:	7a5a      	ldrb	r2, [r3, #9]
   2bc8c:	f88d 20a1 	strb.w	r2, [sp, #161]	; 0xa1
	dst->delta_tls	= src->utc->delta_tls;
   2bc90:	7a9a      	ldrb	r2, [r3, #10]
   2bc92:	f88d 20a2 	strb.w	r2, [sp, #162]	; 0xa2
	dst->wn_lsf	= src->utc->wn_lsf;
   2bc96:	7ada      	ldrb	r2, [r3, #11]
   2bc98:	f88d 20a3 	strb.w	r2, [sp, #163]	; 0xa3
	dst->dn		= src->utc->dn;
   2bc9c:	7b1a      	ldrb	r2, [r3, #12]
	dst->delta_tlsf	= src->utc->delta_tlsf;
   2bc9e:	7b5b      	ldrb	r3, [r3, #13]
	dst->dn		= src->utc->dn;
   2bca0:	f88d 20a4 	strb.w	r2, [sp, #164]	; 0xa4
		return send_to_modem(&utc, sizeof(utc),
   2bca4:	2201      	movs	r2, #1
	dst->delta_tlsf	= src->utc->delta_tlsf;
   2bca6:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
		return send_to_modem(&location, sizeof(location),
   2bcaa:	2110      	movs	r1, #16
   2bcac:	e07e      	b.n	2bdac <nrf_cloud_agps_process+0x2c0>
	dst->sv_id	= src->ephemeris->sv_id;
   2bcae:	781a      	ldrb	r2, [r3, #0]
   2bcb0:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
	dst->health	= src->ephemeris->health;
   2bcb4:	785a      	ldrb	r2, [r3, #1]
   2bcb6:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
	dst->iodc	= src->ephemeris->iodc;
   2bcba:	78d9      	ldrb	r1, [r3, #3]
   2bcbc:	789a      	ldrb	r2, [r3, #2]
   2bcbe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2bcc2:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
	dst->toc	= src->ephemeris->toc;
   2bcc6:	7959      	ldrb	r1, [r3, #5]
   2bcc8:	791a      	ldrb	r2, [r3, #4]
   2bcca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2bcce:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
	dst->af2	= src->ephemeris->af2;
   2bcd2:	799a      	ldrb	r2, [r3, #6]
   2bcd4:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
	dst->af1	= src->ephemeris->af1;
   2bcd8:	7a19      	ldrb	r1, [r3, #8]
   2bcda:	79da      	ldrb	r2, [r3, #7]
   2bcdc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2bce0:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	dst->af0	= src->ephemeris->af0;
   2bce4:	f8d3 2009 	ldr.w	r2, [r3, #9]
   2bce8:	9229      	str	r2, [sp, #164]	; 0xa4
	dst->tgd	= src->ephemeris->tgd;
   2bcea:	7b5a      	ldrb	r2, [r3, #13]
   2bcec:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
	dst->ura	= src->ephemeris->ura;
   2bcf0:	7b9a      	ldrb	r2, [r3, #14]
   2bcf2:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
	dst->fit_int	= src->ephemeris->fit_int;
   2bcf6:	7bda      	ldrb	r2, [r3, #15]
   2bcf8:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
	dst->toe	= src->ephemeris->toe;
   2bcfc:	7c59      	ldrb	r1, [r3, #17]
   2bcfe:	7c1a      	ldrb	r2, [r3, #16]
   2bd00:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2bd04:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
	dst->w		= src->ephemeris->w;
   2bd08:	f8d3 2012 	ldr.w	r2, [r3, #18]
   2bd0c:	922c      	str	r2, [sp, #176]	; 0xb0
	dst->delta_n	= src->ephemeris->delta_n;
   2bd0e:	7dd9      	ldrb	r1, [r3, #23]
   2bd10:	7d9a      	ldrb	r2, [r3, #22]
   2bd12:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2bd16:	f8ad 20b4 	strh.w	r2, [sp, #180]	; 0xb4
	dst->m0		= src->ephemeris->m0;
   2bd1a:	699a      	ldr	r2, [r3, #24]
   2bd1c:	922e      	str	r2, [sp, #184]	; 0xb8
	dst->omega_dot	= src->ephemeris->omega_dot;
   2bd1e:	69da      	ldr	r2, [r3, #28]
   2bd20:	922f      	str	r2, [sp, #188]	; 0xbc
	dst->e		= src->ephemeris->e;
   2bd22:	6a1a      	ldr	r2, [r3, #32]
   2bd24:	9230      	str	r2, [sp, #192]	; 0xc0
	dst->idot	= src->ephemeris->idot;
   2bd26:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
   2bd2a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   2bd2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2bd32:	f8ad 20c4 	strh.w	r2, [sp, #196]	; 0xc4
	dst->sqrt_a	= src->ephemeris->sqrt_a;
   2bd36:	f8d3 2026 	ldr.w	r2, [r3, #38]	; 0x26
   2bd3a:	9232      	str	r2, [sp, #200]	; 0xc8
	dst->i0		= src->ephemeris->i0;
   2bd3c:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
   2bd40:	9233      	str	r2, [sp, #204]	; 0xcc
	dst->omega0	= src->ephemeris->omega0;
   2bd42:	f8d3 202e 	ldr.w	r2, [r3, #46]	; 0x2e
   2bd46:	9234      	str	r2, [sp, #208]	; 0xd0
	dst->crs	= src->ephemeris->crs;
   2bd48:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
   2bd4c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
   2bd50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2bd54:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4
	dst->cis	= src->ephemeris->cis;
   2bd58:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
   2bd5c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
   2bd60:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2bd64:	f8ad 20d6 	strh.w	r2, [sp, #214]	; 0xd6
	dst->cus	= src->ephemeris->cus;
   2bd68:	f893 1037 	ldrb.w	r1, [r3, #55]	; 0x37
   2bd6c:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
   2bd70:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2bd74:	f8ad 20d8 	strh.w	r2, [sp, #216]	; 0xd8
	dst->crc	= src->ephemeris->crc;
   2bd78:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
   2bd7c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   2bd80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2bd84:	f8ad 20da 	strh.w	r2, [sp, #218]	; 0xda
	dst->cic	= src->ephemeris->cic;
   2bd88:	f893 103b 	ldrb.w	r1, [r3, #59]	; 0x3b
   2bd8c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   2bd90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2bd94:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
	dst->cuc	= src->ephemeris->cuc;
   2bd98:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
   2bd9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   2bda0:	2148      	movs	r1, #72	; 0x48
	dst->cuc	= src->ephemeris->cuc;
   2bda2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   2bda6:	2202      	movs	r2, #2
	dst->cuc	= src->ephemeris->cuc;
   2bda8:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
		return send_to_modem(&location, sizeof(location),
   2bdac:	a826      	add	r0, sp, #152	; 0x98
		return send_to_modem(agps_data->integrity,
   2bdae:	f7ff fd6d 	bl	2b88c <send_to_modem>
   2bdb2:	4603      	mov	r3, r0
		if (err) {
   2bdb4:	2800      	cmp	r0, #0
   2bdb6:	f43f aec8 	beq.w	2bb4a <nrf_cloud_agps_process+0x5e>
			LOG_ERR("Failed to send data to modem, error: %d", err);
   2bdba:	2201      	movs	r2, #1
   2bdbc:	f04f 0000 	mov.w	r0, #0
   2bdc0:	f362 0007 	bfi	r0, r2, #0, #8
   2bdc4:	f364 108f 	bfi	r0, r4, #6, #10
   2bdc8:	461a      	mov	r2, r3
   2bdca:	490d      	ldr	r1, [pc, #52]	; (2be00 <nrf_cloud_agps_process+0x314>)
   2bdcc:	9301      	str	r3, [sp, #4]
   2bdce:	f012 f8c8 	bl	3df62 <log_string_sync>
			return err;
   2bdd2:	9b01      	ldr	r3, [sp, #4]
   2bdd4:	e6d0      	b.n	2bb78 <nrf_cloud_agps_process+0x8c>
   2bdd6:	bf00      	nop
   2bdd8:	00046c98 	.word	0x00046c98
   2bddc:	00046cd6 	.word	0x00046cd6
   2bde0:	00043278 	.word	0x00043278
   2bde4:	00046ce5 	.word	0x00046ce5
   2bde8:	00041d0c 	.word	0x00041d0c
   2bdec:	00041c2c 	.word	0x00041c2c
   2bdf0:	20024760 	.word	0x20024760
   2bdf4:	200320e8 	.word	0x200320e8
   2bdf8:	00043b4c 	.word	0x00043b4c
   2bdfc:	00046d07 	.word	0x00046d07
   2be00:	00046d4f 	.word	0x00046d4f
   2be04:	20029396 	.word	0x20029396
   2be08:	2002b3f6 	.word	0x2002b3f6
   2be0c:	00046d34 	.word	0x00046d34
	dst->sv_id	= src->almanac->sv_id;
   2be10:	781a      	ldrb	r2, [r3, #0]
   2be12:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
	dst->wn		= src->almanac->wn;
   2be16:	785a      	ldrb	r2, [r3, #1]
   2be18:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
	dst->toa	= src->almanac->toa;
   2be1c:	789a      	ldrb	r2, [r3, #2]
   2be1e:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
	dst->ioda	= src->almanac->ioda;
   2be22:	78da      	ldrb	r2, [r3, #3]
   2be24:	f88d 209b 	strb.w	r2, [sp, #155]	; 0x9b
	dst->e		= src->almanac->e;
   2be28:	7959      	ldrb	r1, [r3, #5]
   2be2a:	791a      	ldrb	r2, [r3, #4]
   2be2c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2be30:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
	dst->delta_i	= src->almanac->delta_i;
   2be34:	79d9      	ldrb	r1, [r3, #7]
   2be36:	799a      	ldrb	r2, [r3, #6]
   2be38:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2be3c:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
	dst->omega_dot	= src->almanac->omega_dot;
   2be40:	7a59      	ldrb	r1, [r3, #9]
   2be42:	7a1a      	ldrb	r2, [r3, #8]
   2be44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2be48:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	dst->sv_health	= src->almanac->sv_health;
   2be4c:	7a9a      	ldrb	r2, [r3, #10]
   2be4e:	f88d 20a2 	strb.w	r2, [sp, #162]	; 0xa2
	dst->sqrt_a	= src->almanac->sqrt_a;
   2be52:	f8d3 200b 	ldr.w	r2, [r3, #11]
   2be56:	9229      	str	r2, [sp, #164]	; 0xa4
	dst->omega0	= src->almanac->omega0;
   2be58:	f8d3 200f 	ldr.w	r2, [r3, #15]
   2be5c:	922a      	str	r2, [sp, #168]	; 0xa8
	dst->w		= src->almanac->w;
   2be5e:	f8d3 2013 	ldr.w	r2, [r3, #19]
   2be62:	922b      	str	r2, [sp, #172]	; 0xac
	dst->m0		= src->almanac->m0;
   2be64:	f8d3 2017 	ldr.w	r2, [r3, #23]
   2be68:	922c      	str	r2, [sp, #176]	; 0xb0
	dst->af0	= src->almanac->af0;
   2be6a:	7f19      	ldrb	r1, [r3, #28]
   2be6c:	7eda      	ldrb	r2, [r3, #27]
   2be6e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2be72:	f8ad 20b4 	strh.w	r2, [sp, #180]	; 0xb4
	dst->af1	= src->almanac->af1;
   2be76:	7f5a      	ldrb	r2, [r3, #29]
   2be78:	7f9b      	ldrb	r3, [r3, #30]
		return send_to_modem(&almanac, sizeof(almanac),
   2be7a:	2120      	movs	r1, #32
	dst->af1	= src->almanac->af1;
   2be7c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   2be80:	f8ad 30b6 	strh.w	r3, [sp, #182]	; 0xb6
		return send_to_modem(&almanac, sizeof(almanac),
   2be84:	2203      	movs	r2, #3
   2be86:	e791      	b.n	2bdac <nrf_cloud_agps_process+0x2c0>
	dst->alpha0	= src->ion_correction.klobuchar->alpha0;
   2be88:	781a      	ldrb	r2, [r3, #0]
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   2be8a:	2108      	movs	r1, #8
	dst->alpha0	= src->ion_correction.klobuchar->alpha0;
   2be8c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
	dst->alpha1	= src->ion_correction.klobuchar->alpha1;
   2be90:	785a      	ldrb	r2, [r3, #1]
   2be92:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
	dst->alpha2	= src->ion_correction.klobuchar->alpha2;
   2be96:	789a      	ldrb	r2, [r3, #2]
   2be98:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
	dst->alpha3	= src->ion_correction.klobuchar->alpha3;
   2be9c:	78da      	ldrb	r2, [r3, #3]
   2be9e:	f88d 209b 	strb.w	r2, [sp, #155]	; 0x9b
	dst->beta0	= src->ion_correction.klobuchar->beta0;
   2bea2:	791a      	ldrb	r2, [r3, #4]
   2bea4:	f88d 209c 	strb.w	r2, [sp, #156]	; 0x9c
	dst->beta1	= src->ion_correction.klobuchar->beta1;
   2bea8:	795a      	ldrb	r2, [r3, #5]
   2beaa:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
	dst->beta2	= src->ion_correction.klobuchar->beta2;
   2beae:	799a      	ldrb	r2, [r3, #6]
	dst->beta3	= src->ion_correction.klobuchar->beta3;
   2beb0:	79db      	ldrb	r3, [r3, #7]
	dst->beta2	= src->ion_correction.klobuchar->beta2;
   2beb2:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
	dst->beta3	= src->ion_correction.klobuchar->beta3;
   2beb6:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   2beba:	2204      	movs	r2, #4
   2bebc:	e776      	b.n	2bdac <nrf_cloud_agps_process+0x2c0>
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2bebe:	2200      	movs	r2, #0
   2bec0:	a926      	add	r1, sp, #152	; 0x98
		dst->sv_tow[i].flags = src->time_and_tow->sv_tow[i].flags;
   2bec2:	f103 0c0f 	add.w	ip, r3, #15
   2bec6:	f81c 0022 	ldrb.w	r0, [ip, r2, lsl #2]
   2beca:	3104      	adds	r1, #4
   2becc:	7388      	strb	r0, [r1, #14]
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2bece:	1c90      	adds	r0, r2, #2
   2bed0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2bed4:	f890 e005 	ldrb.w	lr, [r0, #5]
   2bed8:	7980      	ldrb	r0, [r0, #6]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2beda:	3201      	adds	r2, #1
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2bedc:	ea4e 2000 	orr.w	r0, lr, r0, lsl #8
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2bee0:	2a20      	cmp	r2, #32
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2bee2:	8188      	strh	r0, [r1, #12]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2bee4:	d1ef      	bne.n	2bec6 <nrf_cloud_agps_process+0x3da>
   2bee6:	e6b8      	b.n	2bc5a <nrf_cloud_agps_process+0x16e>
		nrf_gnss_agps_data_location_t location = {0};
   2bee8:	2200      	movs	r2, #0
   2beea:	f8ad 20a6 	strh.w	r2, [sp, #166]	; 0xa6
	dst->latitude		= src->location->latitude;
   2beee:	681a      	ldr	r2, [r3, #0]
   2bef0:	9226      	str	r2, [sp, #152]	; 0x98
	dst->longitude		= src->location->longitude;
   2bef2:	685a      	ldr	r2, [r3, #4]
   2bef4:	9227      	str	r2, [sp, #156]	; 0x9c
	dst->altitude		= src->location->altitude;
   2bef6:	7a1a      	ldrb	r2, [r3, #8]
   2bef8:	7a59      	ldrb	r1, [r3, #9]
   2befa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2befe:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	dst->unc_semimajor	= src->location->unc_semimajor;
   2bf02:	7a9a      	ldrb	r2, [r3, #10]
   2bf04:	f88d 20a2 	strb.w	r2, [sp, #162]	; 0xa2
	dst->unc_semiminor	= src->location->unc_semiminor;
   2bf08:	7ada      	ldrb	r2, [r3, #11]
   2bf0a:	f88d 20a3 	strb.w	r2, [sp, #163]	; 0xa3
	dst->orientation_major	= src->location->orientation_major;
   2bf0e:	7b1a      	ldrb	r2, [r3, #12]
   2bf10:	f88d 20a4 	strb.w	r2, [sp, #164]	; 0xa4
	dst->unc_altitude	= src->location->unc_altitude;
   2bf14:	7b5a      	ldrb	r2, [r3, #13]
	dst->confidence		= src->location->confidence;
   2bf16:	7b9b      	ldrb	r3, [r3, #14]
	dst->unc_altitude	= src->location->unc_altitude;
   2bf18:	f88d 20a5 	strb.w	r2, [sp, #165]	; 0xa5
	dst->confidence		= src->location->confidence;
   2bf1c:	f88d 30a6 	strb.w	r3, [sp, #166]	; 0xa6
		return send_to_modem(&location, sizeof(location),
   2bf20:	2207      	movs	r2, #7
   2bf22:	e6c2      	b.n	2bcaa <nrf_cloud_agps_process+0x1be>
		return send_to_modem(agps_data->integrity,
   2bf24:	2208      	movs	r2, #8
   2bf26:	2104      	movs	r1, #4
   2bf28:	4618      	mov	r0, r3
   2bf2a:	e740      	b.n	2bdae <nrf_cloud_agps_process+0x2c2>
		LOG_WRN("Unknown AGPS data type: %d", agps_data->type);
   2bf2c:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   2bf30:	f043 0302 	orr.w	r3, r3, #2
   2bf34:	f363 0607 	bfi	r6, r3, #0, #8
   2bf38:	f364 168f 	bfi	r6, r4, #6, #10
   2bf3c:	4659      	mov	r1, fp
   2bf3e:	4630      	mov	r0, r6
   2bf40:	f012 f80f 	bl	3df62 <log_string_sync>
		if (err) {
   2bf44:	e601      	b.n	2bb4a <nrf_cloud_agps_process+0x5e>
   2bf46:	bf00      	nop

0002bf48 <agps_print>:
}

void agps_print(nrf_gnss_agps_data_type_t type, void *data)
{

	switch (type) {
   2bf48:	3801      	subs	r0, #1
{
   2bf4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bf4e:	460c      	mov	r4, r1
	switch (type) {
   2bf50:	2807      	cmp	r0, #7
   2bf52:	f200 816b 	bhi.w	2c22c <agps_print+0x2e4>
   2bf56:	e8df f010 	tbh	[pc, r0, lsl #1]
   2bf5a:	0008      	.short	0x0008
   2bf5c:	00a50030 	.word	0x00a50030
   2bf60:	010d00e3 	.word	0x010d00e3
   2bf64:	01400112 	.word	0x01400112
   2bf68:	0163      	.short	0x0163
	printk("utc:\n");
   2bf6a:	48b1      	ldr	r0, [pc, #708]	; (2c230 <agps_print+0x2e8>)
   2bf6c:	f011 ff95 	bl	3de9a <printk>
	printk("\ta1: %d\n", data->a1);
   2bf70:	6821      	ldr	r1, [r4, #0]
   2bf72:	48b0      	ldr	r0, [pc, #704]	; (2c234 <agps_print+0x2ec>)
   2bf74:	f011 ff91 	bl	3de9a <printk>
	printk("\ta0: %d\n", data->a0);
   2bf78:	6861      	ldr	r1, [r4, #4]
   2bf7a:	48af      	ldr	r0, [pc, #700]	; (2c238 <agps_print+0x2f0>)
   2bf7c:	f011 ff8d 	bl	3de9a <printk>
	printk("\ttot: %d\n", data->tot);
   2bf80:	7a21      	ldrb	r1, [r4, #8]
   2bf82:	48ae      	ldr	r0, [pc, #696]	; (2c23c <agps_print+0x2f4>)
   2bf84:	f011 ff89 	bl	3de9a <printk>
	printk("\twn_t: %d\n", data->wn_t);
   2bf88:	7a61      	ldrb	r1, [r4, #9]
   2bf8a:	48ad      	ldr	r0, [pc, #692]	; (2c240 <agps_print+0x2f8>)
   2bf8c:	f011 ff85 	bl	3de9a <printk>
	printk("\tdelta_tls: %d\n", data->delta_tls);
   2bf90:	f994 100a 	ldrsb.w	r1, [r4, #10]
   2bf94:	48ab      	ldr	r0, [pc, #684]	; (2c244 <agps_print+0x2fc>)
   2bf96:	f011 ff80 	bl	3de9a <printk>
	printk("\twn_lsf: %d\n", data->wn_lsf);
   2bf9a:	7ae1      	ldrb	r1, [r4, #11]
   2bf9c:	48aa      	ldr	r0, [pc, #680]	; (2c248 <agps_print+0x300>)
   2bf9e:	f011 ff7c 	bl	3de9a <printk>
	printk("\tdn: %d\n", data->dn);
   2bfa2:	f994 100c 	ldrsb.w	r1, [r4, #12]
   2bfa6:	48a9      	ldr	r0, [pc, #676]	; (2c24c <agps_print+0x304>)
   2bfa8:	f011 ff77 	bl	3de9a <printk>
	printk("\tdelta_tlsf: %d\n", data->delta_tlsf);
   2bfac:	f994 100d 	ldrsb.w	r1, [r4, #13]
   2bfb0:	48a7      	ldr	r0, [pc, #668]	; (2c250 <agps_print+0x308>)
	}
	default:
		printk("Unknown AGPS data type\n");
		break;
	}
}
   2bfb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printk("\tcuc: %d\n", data->cuc);
   2bfb6:	f011 bf70 	b.w	3de9a <printk>
	printk("ephemeris:\n");
   2bfba:	48a6      	ldr	r0, [pc, #664]	; (2c254 <agps_print+0x30c>)
   2bfbc:	f011 ff6d 	bl	3de9a <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   2bfc0:	7821      	ldrb	r1, [r4, #0]
   2bfc2:	48a5      	ldr	r0, [pc, #660]	; (2c258 <agps_print+0x310>)
   2bfc4:	f011 ff69 	bl	3de9a <printk>
	printk("\thealth: %d\n", data->health);
   2bfc8:	7861      	ldrb	r1, [r4, #1]
   2bfca:	48a4      	ldr	r0, [pc, #656]	; (2c25c <agps_print+0x314>)
   2bfcc:	f011 ff65 	bl	3de9a <printk>
	printk("\tiodc: %d\n", data->iodc);
   2bfd0:	8861      	ldrh	r1, [r4, #2]
   2bfd2:	48a3      	ldr	r0, [pc, #652]	; (2c260 <agps_print+0x318>)
   2bfd4:	f011 ff61 	bl	3de9a <printk>
	printk("\ttoc: %d\n", data->toc);
   2bfd8:	88a1      	ldrh	r1, [r4, #4]
   2bfda:	48a2      	ldr	r0, [pc, #648]	; (2c264 <agps_print+0x31c>)
   2bfdc:	f011 ff5d 	bl	3de9a <printk>
	printk("\taf2: %d\n", data->af2);
   2bfe0:	f994 1006 	ldrsb.w	r1, [r4, #6]
   2bfe4:	48a0      	ldr	r0, [pc, #640]	; (2c268 <agps_print+0x320>)
   2bfe6:	f011 ff58 	bl	3de9a <printk>
	printk("\taf1: %d\n", data->af1);
   2bfea:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2bfee:	489f      	ldr	r0, [pc, #636]	; (2c26c <agps_print+0x324>)
   2bff0:	f011 ff53 	bl	3de9a <printk>
	printk("\taf0: %d\n", data->af0);
   2bff4:	68e1      	ldr	r1, [r4, #12]
   2bff6:	489e      	ldr	r0, [pc, #632]	; (2c270 <agps_print+0x328>)
   2bff8:	f011 ff4f 	bl	3de9a <printk>
	printk("\ttgd: %d\n", data->tgd);
   2bffc:	f994 1010 	ldrsb.w	r1, [r4, #16]
   2c000:	489c      	ldr	r0, [pc, #624]	; (2c274 <agps_print+0x32c>)
   2c002:	f011 ff4a 	bl	3de9a <printk>
	printk("\tura: %d\n", data->ura);
   2c006:	7c61      	ldrb	r1, [r4, #17]
   2c008:	489b      	ldr	r0, [pc, #620]	; (2c278 <agps_print+0x330>)
   2c00a:	f011 ff46 	bl	3de9a <printk>
	printk("\tfit_int: %d\n", data->fit_int);
   2c00e:	7ca1      	ldrb	r1, [r4, #18]
   2c010:	489a      	ldr	r0, [pc, #616]	; (2c27c <agps_print+0x334>)
   2c012:	f011 ff42 	bl	3de9a <printk>
	printk("\ttoe: %d\n", data->toe);
   2c016:	8aa1      	ldrh	r1, [r4, #20]
   2c018:	4899      	ldr	r0, [pc, #612]	; (2c280 <agps_print+0x338>)
   2c01a:	f011 ff3e 	bl	3de9a <printk>
	printk("\tw: %d\n", data->w);
   2c01e:	69a1      	ldr	r1, [r4, #24]
   2c020:	4898      	ldr	r0, [pc, #608]	; (2c284 <agps_print+0x33c>)
   2c022:	f011 ff3a 	bl	3de9a <printk>
	printk("\tdelta_n: %d\n", data->delta_n);
   2c026:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   2c02a:	4897      	ldr	r0, [pc, #604]	; (2c288 <agps_print+0x340>)
   2c02c:	f011 ff35 	bl	3de9a <printk>
	printk("\tm0: %d\n", data->m0);
   2c030:	6a21      	ldr	r1, [r4, #32]
   2c032:	4896      	ldr	r0, [pc, #600]	; (2c28c <agps_print+0x344>)
   2c034:	f011 ff31 	bl	3de9a <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   2c038:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2c03a:	4895      	ldr	r0, [pc, #596]	; (2c290 <agps_print+0x348>)
   2c03c:	f011 ff2d 	bl	3de9a <printk>
	printk("\te: %d\n", data->e);
   2c040:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2c042:	4894      	ldr	r0, [pc, #592]	; (2c294 <agps_print+0x34c>)
   2c044:	f011 ff29 	bl	3de9a <printk>
	printk("\tidot: %d\n", data->idot);
   2c048:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
   2c04c:	4892      	ldr	r0, [pc, #584]	; (2c298 <agps_print+0x350>)
   2c04e:	f011 ff24 	bl	3de9a <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   2c052:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2c054:	4891      	ldr	r0, [pc, #580]	; (2c29c <agps_print+0x354>)
   2c056:	f011 ff20 	bl	3de9a <printk>
	printk("\ti0: %d\n", data->i0);
   2c05a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2c05c:	4890      	ldr	r0, [pc, #576]	; (2c2a0 <agps_print+0x358>)
   2c05e:	f011 ff1c 	bl	3de9a <printk>
	printk("\tomega0: %d\n", data->omega0);
   2c062:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   2c064:	488f      	ldr	r0, [pc, #572]	; (2c2a4 <agps_print+0x35c>)
   2c066:	f011 ff18 	bl	3de9a <printk>
	printk("\tcrs: %d\n", data->crs);
   2c06a:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
   2c06e:	488e      	ldr	r0, [pc, #568]	; (2c2a8 <agps_print+0x360>)
   2c070:	f011 ff13 	bl	3de9a <printk>
	printk("\tcis: %d\n", data->cis);
   2c074:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
   2c078:	488c      	ldr	r0, [pc, #560]	; (2c2ac <agps_print+0x364>)
   2c07a:	f011 ff0e 	bl	3de9a <printk>
	printk("\tcus: %d\n", data->cus);
   2c07e:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
   2c082:	488b      	ldr	r0, [pc, #556]	; (2c2b0 <agps_print+0x368>)
   2c084:	f011 ff09 	bl	3de9a <printk>
	printk("\tcrc: %d\n", data->crc);
   2c088:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
   2c08c:	4889      	ldr	r0, [pc, #548]	; (2c2b4 <agps_print+0x36c>)
   2c08e:	f011 ff04 	bl	3de9a <printk>
	printk("\tcic: %d\n", data->cic);
   2c092:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
   2c096:	4888      	ldr	r0, [pc, #544]	; (2c2b8 <agps_print+0x370>)
   2c098:	f011 feff 	bl	3de9a <printk>
	printk("\tcuc: %d\n", data->cuc);
   2c09c:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
   2c0a0:	4886      	ldr	r0, [pc, #536]	; (2c2bc <agps_print+0x374>)
   2c0a2:	e786      	b.n	2bfb2 <agps_print+0x6a>
	printk("almanac\n");
   2c0a4:	4886      	ldr	r0, [pc, #536]	; (2c2c0 <agps_print+0x378>)
   2c0a6:	f011 fef8 	bl	3de9a <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   2c0aa:	7821      	ldrb	r1, [r4, #0]
   2c0ac:	486a      	ldr	r0, [pc, #424]	; (2c258 <agps_print+0x310>)
   2c0ae:	f011 fef4 	bl	3de9a <printk>
	printk("\twn: %d\n", data->wn);
   2c0b2:	7861      	ldrb	r1, [r4, #1]
   2c0b4:	4883      	ldr	r0, [pc, #524]	; (2c2c4 <agps_print+0x37c>)
   2c0b6:	f011 fef0 	bl	3de9a <printk>
	printk("\ttoa: %d\n", data->toa);
   2c0ba:	78a1      	ldrb	r1, [r4, #2]
   2c0bc:	4882      	ldr	r0, [pc, #520]	; (2c2c8 <agps_print+0x380>)
   2c0be:	f011 feec 	bl	3de9a <printk>
	printk("\tioda: %d\n", data->ioda);
   2c0c2:	78e1      	ldrb	r1, [r4, #3]
   2c0c4:	4881      	ldr	r0, [pc, #516]	; (2c2cc <agps_print+0x384>)
   2c0c6:	f011 fee8 	bl	3de9a <printk>
	printk("\te: %d\n", data->e);
   2c0ca:	88a1      	ldrh	r1, [r4, #4]
   2c0cc:	4871      	ldr	r0, [pc, #452]	; (2c294 <agps_print+0x34c>)
   2c0ce:	f011 fee4 	bl	3de9a <printk>
	printk("\tdelta_i: %d\n", data->delta_i);
   2c0d2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   2c0d6:	487e      	ldr	r0, [pc, #504]	; (2c2d0 <agps_print+0x388>)
   2c0d8:	f011 fedf 	bl	3de9a <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   2c0dc:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2c0e0:	486b      	ldr	r0, [pc, #428]	; (2c290 <agps_print+0x348>)
   2c0e2:	f011 feda 	bl	3de9a <printk>
	printk("\tsv_health: %d\n", data->sv_health);
   2c0e6:	7aa1      	ldrb	r1, [r4, #10]
   2c0e8:	487a      	ldr	r0, [pc, #488]	; (2c2d4 <agps_print+0x38c>)
   2c0ea:	f011 fed6 	bl	3de9a <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   2c0ee:	68e1      	ldr	r1, [r4, #12]
   2c0f0:	486a      	ldr	r0, [pc, #424]	; (2c29c <agps_print+0x354>)
   2c0f2:	f011 fed2 	bl	3de9a <printk>
	printk("\tomega0: %d\n", data->omega0);
   2c0f6:	6921      	ldr	r1, [r4, #16]
   2c0f8:	486a      	ldr	r0, [pc, #424]	; (2c2a4 <agps_print+0x35c>)
   2c0fa:	f011 fece 	bl	3de9a <printk>
	printk("\tw: %d\n", data->w);
   2c0fe:	6961      	ldr	r1, [r4, #20]
   2c100:	4860      	ldr	r0, [pc, #384]	; (2c284 <agps_print+0x33c>)
   2c102:	f011 feca 	bl	3de9a <printk>
	printk("\tm0: %d\n", data->m0);
   2c106:	69a1      	ldr	r1, [r4, #24]
   2c108:	4860      	ldr	r0, [pc, #384]	; (2c28c <agps_print+0x344>)
   2c10a:	f011 fec6 	bl	3de9a <printk>
	printk("\taf0: %d\n", data->af0);
   2c10e:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   2c112:	4857      	ldr	r0, [pc, #348]	; (2c270 <agps_print+0x328>)
   2c114:	f011 fec1 	bl	3de9a <printk>
	printk("\taf1: %d\n", data->af1);
   2c118:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
   2c11c:	4853      	ldr	r0, [pc, #332]	; (2c26c <agps_print+0x324>)
   2c11e:	e748      	b.n	2bfb2 <agps_print+0x6a>
	printk("klobuchar\n");
   2c120:	486d      	ldr	r0, [pc, #436]	; (2c2d8 <agps_print+0x390>)
   2c122:	f011 feba 	bl	3de9a <printk>
	printk("\talpha0: %d\n", data->alpha0);
   2c126:	f994 1000 	ldrsb.w	r1, [r4]
   2c12a:	486c      	ldr	r0, [pc, #432]	; (2c2dc <agps_print+0x394>)
   2c12c:	f011 feb5 	bl	3de9a <printk>
	printk("\talpha1: %d\n", data->alpha1);
   2c130:	f994 1001 	ldrsb.w	r1, [r4, #1]
   2c134:	486a      	ldr	r0, [pc, #424]	; (2c2e0 <agps_print+0x398>)
   2c136:	f011 feb0 	bl	3de9a <printk>
	printk("\talpha2: %d\n", data->alpha2);
   2c13a:	f994 1002 	ldrsb.w	r1, [r4, #2]
   2c13e:	4869      	ldr	r0, [pc, #420]	; (2c2e4 <agps_print+0x39c>)
   2c140:	f011 feab 	bl	3de9a <printk>
	printk("\talpha3: %d\n", data->alpha3);
   2c144:	f994 1003 	ldrsb.w	r1, [r4, #3]
   2c148:	4867      	ldr	r0, [pc, #412]	; (2c2e8 <agps_print+0x3a0>)
   2c14a:	f011 fea6 	bl	3de9a <printk>
	printk("\tbeta0: %d\n", data->beta0);
   2c14e:	f994 1004 	ldrsb.w	r1, [r4, #4]
   2c152:	4866      	ldr	r0, [pc, #408]	; (2c2ec <agps_print+0x3a4>)
   2c154:	f011 fea1 	bl	3de9a <printk>
	printk("\tbeta1: %d\n", data->beta1);
   2c158:	f994 1005 	ldrsb.w	r1, [r4, #5]
   2c15c:	4864      	ldr	r0, [pc, #400]	; (2c2f0 <agps_print+0x3a8>)
   2c15e:	f011 fe9c 	bl	3de9a <printk>
	printk("\tbeta2: %d\n", data->beta2);
   2c162:	f994 1006 	ldrsb.w	r1, [r4, #6]
   2c166:	4863      	ldr	r0, [pc, #396]	; (2c2f4 <agps_print+0x3ac>)
   2c168:	f011 fe97 	bl	3de9a <printk>
	printk("\tbeta3: %d\n", data->beta3);
   2c16c:	f994 1007 	ldrsb.w	r1, [r4, #7]
   2c170:	4861      	ldr	r0, [pc, #388]	; (2c2f8 <agps_print+0x3b0>)
   2c172:	e71e      	b.n	2bfb2 <agps_print+0x6a>
		printk("nequick unhandled\n");
   2c174:	4861      	ldr	r0, [pc, #388]	; (2c2fc <agps_print+0x3b4>)
}
   2c176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printk("Unknown AGPS data type\n");
   2c17a:	f011 be8e 	b.w	3de9a <printk>
	printk("clock_and_tows\n");
   2c17e:	4860      	ldr	r0, [pc, #384]	; (2c300 <agps_print+0x3b8>)
   2c180:	f011 fe8b 	bl	3de9a <printk>
	printk("\tdate_day: %d\n", data->date_day);
   2c184:	8821      	ldrh	r1, [r4, #0]
   2c186:	485f      	ldr	r0, [pc, #380]	; (2c304 <agps_print+0x3bc>)
   2c188:	f011 fe87 	bl	3de9a <printk>
	printk("\ttime_full_s: %d\n", data->time_full_s);
   2c18c:	6861      	ldr	r1, [r4, #4]
   2c18e:	485e      	ldr	r0, [pc, #376]	; (2c308 <agps_print+0x3c0>)
   2c190:	f011 fe83 	bl	3de9a <printk>
	printk("\ttime_frac_ms: %d\n", data->time_frac_ms);
   2c194:	8921      	ldrh	r1, [r4, #8]
   2c196:	485d      	ldr	r0, [pc, #372]	; (2c30c <agps_print+0x3c4>)
   2c198:	f011 fe7f 	bl	3de9a <printk>
	printk("\tsv_mask: %d\n", data->sv_mask);
   2c19c:	68e1      	ldr	r1, [r4, #12]
   2c19e:	485c      	ldr	r0, [pc, #368]	; (2c310 <agps_print+0x3c8>)
   2c1a0:	f011 fe7b 	bl	3de9a <printk>
	printk("\tsv_tow\n");
   2c1a4:	485b      	ldr	r0, [pc, #364]	; (2c314 <agps_print+0x3cc>)
   2c1a6:	f011 fe78 	bl	3de9a <printk>
	for (size_t i = 0; i < NRF_GNSS_AGPS_MAX_SV_TOW; i++) {
   2c1aa:	2500      	movs	r5, #0
		printk("\t\tsv_tow[%d]\n", i);
   2c1ac:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 2c350 <agps_print+0x408>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   2c1b0:	4f59      	ldr	r7, [pc, #356]	; (2c318 <agps_print+0x3d0>)
		printk("\t\t\tflags: %d\n", data->sv_tow[i].flags);
   2c1b2:	4e5a      	ldr	r6, [pc, #360]	; (2c31c <agps_print+0x3d4>)
		printk("\t\tsv_tow[%d]\n", i);
   2c1b4:	4629      	mov	r1, r5
   2c1b6:	4640      	mov	r0, r8
   2c1b8:	f011 fe6f 	bl	3de9a <printk>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   2c1bc:	8a21      	ldrh	r1, [r4, #16]
   2c1be:	4638      	mov	r0, r7
   2c1c0:	f011 fe6b 	bl	3de9a <printk>
	for (size_t i = 0; i < NRF_GNSS_AGPS_MAX_SV_TOW; i++) {
   2c1c4:	3501      	adds	r5, #1
		printk("\t\t\tflags: %d\n", data->sv_tow[i].flags);
   2c1c6:	7ca1      	ldrb	r1, [r4, #18]
   2c1c8:	4630      	mov	r0, r6
   2c1ca:	f011 fe66 	bl	3de9a <printk>
	for (size_t i = 0; i < NRF_GNSS_AGPS_MAX_SV_TOW; i++) {
   2c1ce:	2d20      	cmp	r5, #32
   2c1d0:	f104 0404 	add.w	r4, r4, #4
   2c1d4:	d1ee      	bne.n	2c1b4 <agps_print+0x26c>
}
   2c1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printk("location\n");
   2c1da:	4851      	ldr	r0, [pc, #324]	; (2c320 <agps_print+0x3d8>)
   2c1dc:	f011 fe5d 	bl	3de9a <printk>
	printk("\tlatitude: %d\n", data->latitude);
   2c1e0:	6821      	ldr	r1, [r4, #0]
   2c1e2:	4850      	ldr	r0, [pc, #320]	; (2c324 <agps_print+0x3dc>)
   2c1e4:	f011 fe59 	bl	3de9a <printk>
	printk("\tlongitude: %d\n", data->longitude);
   2c1e8:	6861      	ldr	r1, [r4, #4]
   2c1ea:	484f      	ldr	r0, [pc, #316]	; (2c328 <agps_print+0x3e0>)
   2c1ec:	f011 fe55 	bl	3de9a <printk>
	printk("\taltitude: %d\n", data->altitude);
   2c1f0:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2c1f4:	484d      	ldr	r0, [pc, #308]	; (2c32c <agps_print+0x3e4>)
   2c1f6:	f011 fe50 	bl	3de9a <printk>
	printk("\tunc_semimajor: %d\n", data->unc_semimajor);
   2c1fa:	7aa1      	ldrb	r1, [r4, #10]
   2c1fc:	484c      	ldr	r0, [pc, #304]	; (2c330 <agps_print+0x3e8>)
   2c1fe:	f011 fe4c 	bl	3de9a <printk>
	printk("\tunc_semiminor: %d\n", data->unc_semiminor);
   2c202:	7ae1      	ldrb	r1, [r4, #11]
   2c204:	484b      	ldr	r0, [pc, #300]	; (2c334 <agps_print+0x3ec>)
   2c206:	f011 fe48 	bl	3de9a <printk>
	printk("\torientation_major: %d\n", data->orientation_major);
   2c20a:	7b21      	ldrb	r1, [r4, #12]
   2c20c:	484a      	ldr	r0, [pc, #296]	; (2c338 <agps_print+0x3f0>)
   2c20e:	f011 fe44 	bl	3de9a <printk>
	printk("\tunc_altitude: %d\n", data->unc_altitude);
   2c212:	7b61      	ldrb	r1, [r4, #13]
   2c214:	4849      	ldr	r0, [pc, #292]	; (2c33c <agps_print+0x3f4>)
   2c216:	f011 fe40 	bl	3de9a <printk>
	printk("\tconfidence: %d\n", data->confidence);
   2c21a:	7ba1      	ldrb	r1, [r4, #14]
   2c21c:	4848      	ldr	r0, [pc, #288]	; (2c340 <agps_print+0x3f8>)
   2c21e:	e6c8      	b.n	2bfb2 <agps_print+0x6a>
	printk("integrity\n");
   2c220:	4848      	ldr	r0, [pc, #288]	; (2c344 <agps_print+0x3fc>)
   2c222:	f011 fe3a 	bl	3de9a <printk>
	printk("\tintegrity_mask: %d\n", data->integrity_mask);
   2c226:	6821      	ldr	r1, [r4, #0]
   2c228:	4847      	ldr	r0, [pc, #284]	; (2c348 <agps_print+0x400>)
   2c22a:	e6c2      	b.n	2bfb2 <agps_print+0x6a>
		printk("Unknown AGPS data type\n");
   2c22c:	4847      	ldr	r0, [pc, #284]	; (2c34c <agps_print+0x404>)
   2c22e:	e7a2      	b.n	2c176 <agps_print+0x22e>
   2c230:	00046f17 	.word	0x00046f17
   2c234:	00046f1d 	.word	0x00046f1d
   2c238:	00046f26 	.word	0x00046f26
   2c23c:	00046f2f 	.word	0x00046f2f
   2c240:	00046f39 	.word	0x00046f39
   2c244:	00046f44 	.word	0x00046f44
   2c248:	00046f54 	.word	0x00046f54
   2c24c:	00046f61 	.word	0x00046f61
   2c250:	00046f6a 	.word	0x00046f6a
   2c254:	00046f7b 	.word	0x00046f7b
   2c258:	00046f87 	.word	0x00046f87
   2c25c:	00046f93 	.word	0x00046f93
   2c260:	00046fa0 	.word	0x00046fa0
   2c264:	00046fab 	.word	0x00046fab
   2c268:	00046fb5 	.word	0x00046fb5
   2c26c:	00046fbf 	.word	0x00046fbf
   2c270:	00046fc9 	.word	0x00046fc9
   2c274:	00046fd3 	.word	0x00046fd3
   2c278:	00046fdd 	.word	0x00046fdd
   2c27c:	00046fe7 	.word	0x00046fe7
   2c280:	00046ff5 	.word	0x00046ff5
   2c284:	00046fff 	.word	0x00046fff
   2c288:	00047007 	.word	0x00047007
   2c28c:	00047015 	.word	0x00047015
   2c290:	0004701e 	.word	0x0004701e
   2c294:	0004702e 	.word	0x0004702e
   2c298:	00047036 	.word	0x00047036
   2c29c:	00047041 	.word	0x00047041
   2c2a0:	0004704e 	.word	0x0004704e
   2c2a4:	00047057 	.word	0x00047057
   2c2a8:	00047064 	.word	0x00047064
   2c2ac:	0004706e 	.word	0x0004706e
   2c2b0:	00047078 	.word	0x00047078
   2c2b4:	00047082 	.word	0x00047082
   2c2b8:	0004708c 	.word	0x0004708c
   2c2bc:	00047096 	.word	0x00047096
   2c2c0:	000470a0 	.word	0x000470a0
   2c2c4:	000470a9 	.word	0x000470a9
   2c2c8:	000470b2 	.word	0x000470b2
   2c2cc:	000470bc 	.word	0x000470bc
   2c2d0:	000470c7 	.word	0x000470c7
   2c2d4:	000470d5 	.word	0x000470d5
   2c2d8:	000470e5 	.word	0x000470e5
   2c2dc:	000470f0 	.word	0x000470f0
   2c2e0:	000470fd 	.word	0x000470fd
   2c2e4:	0004710a 	.word	0x0004710a
   2c2e8:	00047117 	.word	0x00047117
   2c2ec:	00047124 	.word	0x00047124
   2c2f0:	00047130 	.word	0x00047130
   2c2f4:	0004713c 	.word	0x0004713c
   2c2f8:	00047148 	.word	0x00047148
   2c2fc:	00047154 	.word	0x00047154
   2c300:	00047167 	.word	0x00047167
   2c304:	00047177 	.word	0x00047177
   2c308:	00047186 	.word	0x00047186
   2c30c:	00047198 	.word	0x00047198
   2c310:	000471ab 	.word	0x000471ab
   2c314:	000471b9 	.word	0x000471b9
   2c318:	000471d0 	.word	0x000471d0
   2c31c:	000471dc 	.word	0x000471dc
   2c320:	00048b87 	.word	0x00048b87
   2c324:	000471ea 	.word	0x000471ea
   2c328:	000471f9 	.word	0x000471f9
   2c32c:	00047209 	.word	0x00047209
   2c330:	00047218 	.word	0x00047218
   2c334:	0004722c 	.word	0x0004722c
   2c338:	00047240 	.word	0x00047240
   2c33c:	00047258 	.word	0x00047258
   2c340:	0004726b 	.word	0x0004726b
   2c344:	0004727c 	.word	0x0004727c
   2c348:	00047287 	.word	0x00047287
   2c34c:	0004729c 	.word	0x0004729c
   2c350:	000471c2 	.word	0x000471c2

0002c354 <fragment_evt_send>:

	return 0;
}

static int fragment_evt_send(const struct download_client *client)
{
   2c354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT(client->offset <= client->fragment_size,
   2c356:	f241 0304 	movw	r3, #4100	; 0x1004
   2c35a:	58c2      	ldr	r2, [r0, r3]
   2c35c:	f241 0310 	movw	r3, #4112	; 0x1010
   2c360:	58c3      	ldr	r3, [r0, r3]
{
   2c362:	4604      	mov	r4, r0
	__ASSERT(client->offset <= client->fragment_size,
   2c364:	429a      	cmp	r2, r3
   2c366:	d90e      	bls.n	2c386 <fragment_evt_send+0x32>
   2c368:	4919      	ldr	r1, [pc, #100]	; (2c3d0 <fragment_evt_send+0x7c>)
   2c36a:	f44f 73b3 	mov.w	r3, #358	; 0x166
   2c36e:	4a19      	ldr	r2, [pc, #100]	; (2c3d4 <fragment_evt_send+0x80>)
   2c370:	4819      	ldr	r0, [pc, #100]	; (2c3d8 <fragment_evt_send+0x84>)
   2c372:	f011 fd92 	bl	3de9a <printk>
   2c376:	4819      	ldr	r0, [pc, #100]	; (2c3dc <fragment_evt_send+0x88>)
   2c378:	f011 fd8f 	bl	3de9a <printk>
   2c37c:	f44f 71b3 	mov.w	r1, #358	; 0x166
   2c380:	4814      	ldr	r0, [pc, #80]	; (2c3d4 <fragment_evt_send+0x80>)
   2c382:	f011 fddd 	bl	3df40 <assert_post_action>
		 "Fragment overflow!");

	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE,
   2c386:	f241 0304 	movw	r3, #4100	; 0x1004
   2c38a:	58e3      	ldr	r3, [r4, r3]
   2c38c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2c390:	d90e      	bls.n	2c3b0 <fragment_evt_send+0x5c>
   2c392:	4913      	ldr	r1, [pc, #76]	; (2c3e0 <fragment_evt_send+0x8c>)
   2c394:	f240 1369 	movw	r3, #361	; 0x169
   2c398:	4a0e      	ldr	r2, [pc, #56]	; (2c3d4 <fragment_evt_send+0x80>)
   2c39a:	480f      	ldr	r0, [pc, #60]	; (2c3d8 <fragment_evt_send+0x84>)
   2c39c:	f011 fd7d 	bl	3de9a <printk>
   2c3a0:	4810      	ldr	r0, [pc, #64]	; (2c3e4 <fragment_evt_send+0x90>)
   2c3a2:	f011 fd7a 	bl	3de9a <printk>
   2c3a6:	f240 1169 	movw	r1, #361	; 0x169
   2c3aa:	480a      	ldr	r0, [pc, #40]	; (2c3d4 <fragment_evt_send+0x80>)
   2c3ac:	f011 fdc8 	bl	3df40 <assert_post_action>
		 "Buffer overflow!");

	const struct download_client_evt evt = {
   2c3b0:	2300      	movs	r3, #0
   2c3b2:	f88d 3004 	strb.w	r3, [sp, #4]
		.id = DOWNLOAD_CLIENT_EVT_FRAGMENT,
		.fragment = {
			.buf = client->buf,
   2c3b6:	1d23      	adds	r3, r4, #4
	const struct download_client_evt evt = {
   2c3b8:	9302      	str	r3, [sp, #8]
			.len = client->offset,
   2c3ba:	f241 0304 	movw	r3, #4100	; 0x1004
	const struct download_client_evt evt = {
   2c3be:	58e3      	ldr	r3, [r4, r3]
		}
	};

	return client->callback(&evt);
   2c3c0:	a801      	add	r0, sp, #4
	const struct download_client_evt evt = {
   2c3c2:	9303      	str	r3, [sp, #12]
	return client->callback(&evt);
   2c3c4:	f242 03e0 	movw	r3, #8416	; 0x20e0
   2c3c8:	58e3      	ldr	r3, [r4, r3]
   2c3ca:	4798      	blx	r3
}
   2c3cc:	b004      	add	sp, #16
   2c3ce:	bd10      	pop	{r4, pc}
   2c3d0:	000475b6 	.word	0x000475b6
   2c3d4:	00047571 	.word	0x00047571
   2c3d8:	00043278 	.word	0x00043278
   2c3dc:	000475de 	.word	0x000475de
   2c3e0:	000475f3 	.word	0x000475f3
   2c3e4:	0004760a 	.word	0x0004760a

0002c3e8 <setsockopt>:
{
   2c3e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT_NO_MSG(socket_ops);
   2c3ec:	4c15      	ldr	r4, [pc, #84]	; (2c444 <setsockopt+0x5c>)
{
   2c3ee:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   2c3f0:	6823      	ldr	r3, [r4, #0]
{
   2c3f2:	4605      	mov	r5, r0
   2c3f4:	460e      	mov	r6, r1
   2c3f6:	4617      	mov	r7, r2
   2c3f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
	__ASSERT_NO_MSG(socket_ops);
   2c3fc:	b94b      	cbnz	r3, 2c412 <setsockopt+0x2a>
   2c3fe:	4912      	ldr	r1, [pc, #72]	; (2c448 <setsockopt+0x60>)
   2c400:	4812      	ldr	r0, [pc, #72]	; (2c44c <setsockopt+0x64>)
   2c402:	2357      	movs	r3, #87	; 0x57
   2c404:	4a12      	ldr	r2, [pc, #72]	; (2c450 <setsockopt+0x68>)
   2c406:	f011 fd48 	bl	3de9a <printk>
   2c40a:	2157      	movs	r1, #87	; 0x57
   2c40c:	4810      	ldr	r0, [pc, #64]	; (2c450 <setsockopt+0x68>)
   2c40e:	f011 fd97 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   2c412:	6823      	ldr	r3, [r4, #0]
   2c414:	69db      	ldr	r3, [r3, #28]
   2c416:	b94b      	cbnz	r3, 2c42c <setsockopt+0x44>
   2c418:	490e      	ldr	r1, [pc, #56]	; (2c454 <setsockopt+0x6c>)
   2c41a:	480c      	ldr	r0, [pc, #48]	; (2c44c <setsockopt+0x64>)
   2c41c:	2358      	movs	r3, #88	; 0x58
   2c41e:	4a0c      	ldr	r2, [pc, #48]	; (2c450 <setsockopt+0x68>)
   2c420:	f011 fd3b 	bl	3de9a <printk>
   2c424:	2158      	movs	r1, #88	; 0x58
   2c426:	480a      	ldr	r0, [pc, #40]	; (2c450 <setsockopt+0x68>)
   2c428:	f011 fd8a 	bl	3df40 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   2c42c:	6823      	ldr	r3, [r4, #0]
   2c42e:	f8cd 9020 	str.w	r9, [sp, #32]
   2c432:	69dc      	ldr	r4, [r3, #28]
   2c434:	463a      	mov	r2, r7
   2c436:	4643      	mov	r3, r8
   2c438:	4631      	mov	r1, r6
   2c43a:	4628      	mov	r0, r5
   2c43c:	46a4      	mov	ip, r4
}
   2c43e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   2c442:	4760      	bx	ip
   2c444:	2002389c 	.word	0x2002389c
   2c448:	000433f1 	.word	0x000433f1
   2c44c:	00043278 	.word	0x00043278
   2c450:	000433c1 	.word	0x000433c1
   2c454:	00044e55 	.word	0x00044e55

0002c458 <close>:
{
   2c458:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   2c45a:	4c10      	ldr	r4, [pc, #64]	; (2c49c <close+0x44>)
{
   2c45c:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   2c45e:	6823      	ldr	r3, [r4, #0]
   2c460:	b94b      	cbnz	r3, 2c476 <close+0x1e>
   2c462:	490f      	ldr	r1, [pc, #60]	; (2c4a0 <close+0x48>)
   2c464:	480f      	ldr	r0, [pc, #60]	; (2c4a4 <close+0x4c>)
   2c466:	2321      	movs	r3, #33	; 0x21
   2c468:	4a0f      	ldr	r2, [pc, #60]	; (2c4a8 <close+0x50>)
   2c46a:	f011 fd16 	bl	3de9a <printk>
   2c46e:	2121      	movs	r1, #33	; 0x21
   2c470:	480d      	ldr	r0, [pc, #52]	; (2c4a8 <close+0x50>)
   2c472:	f011 fd65 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   2c476:	6823      	ldr	r3, [r4, #0]
   2c478:	685b      	ldr	r3, [r3, #4]
   2c47a:	b94b      	cbnz	r3, 2c490 <close+0x38>
   2c47c:	490b      	ldr	r1, [pc, #44]	; (2c4ac <close+0x54>)
   2c47e:	4809      	ldr	r0, [pc, #36]	; (2c4a4 <close+0x4c>)
   2c480:	2322      	movs	r3, #34	; 0x22
   2c482:	4a09      	ldr	r2, [pc, #36]	; (2c4a8 <close+0x50>)
   2c484:	f011 fd09 	bl	3de9a <printk>
   2c488:	2122      	movs	r1, #34	; 0x22
   2c48a:	4807      	ldr	r0, [pc, #28]	; (2c4a8 <close+0x50>)
   2c48c:	f011 fd58 	bl	3df40 <assert_post_action>
	return socket_ops->close(sock);
   2c490:	6823      	ldr	r3, [r4, #0]
   2c492:	4628      	mov	r0, r5
}
   2c494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   2c498:	685b      	ldr	r3, [r3, #4]
   2c49a:	4718      	bx	r3
   2c49c:	2002389c 	.word	0x2002389c
   2c4a0:	000433f1 	.word	0x000433f1
   2c4a4:	00043278 	.word	0x00043278
   2c4a8:	000433c1 	.word	0x000433c1
   2c4ac:	00044d7e 	.word	0x00044d7e

0002c4b0 <get_request_send>:
{
   2c4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT_NO_MSG(client);
   2c4b4:	4605      	mov	r5, r0
{
   2c4b6:	b087      	sub	sp, #28
	__ASSERT_NO_MSG(client);
   2c4b8:	b948      	cbnz	r0, 2c4ce <get_request_send+0x1e>
   2c4ba:	4955      	ldr	r1, [pc, #340]	; (2c610 <get_request_send+0x160>)
   2c4bc:	4855      	ldr	r0, [pc, #340]	; (2c614 <get_request_send+0x164>)
   2c4be:	23f6      	movs	r3, #246	; 0xf6
   2c4c0:	4a55      	ldr	r2, [pc, #340]	; (2c618 <get_request_send+0x168>)
   2c4c2:	f011 fcea 	bl	3de9a <printk>
   2c4c6:	21f6      	movs	r1, #246	; 0xf6
   2c4c8:	4853      	ldr	r0, [pc, #332]	; (2c618 <get_request_send+0x168>)
   2c4ca:	f011 fd39 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(client->host);
   2c4ce:	f241 0318 	movw	r3, #4120	; 0x1018
   2c4d2:	58eb      	ldr	r3, [r5, r3]
   2c4d4:	b94b      	cbnz	r3, 2c4ea <get_request_send+0x3a>
   2c4d6:	4951      	ldr	r1, [pc, #324]	; (2c61c <get_request_send+0x16c>)
   2c4d8:	484e      	ldr	r0, [pc, #312]	; (2c614 <get_request_send+0x164>)
   2c4da:	23f7      	movs	r3, #247	; 0xf7
   2c4dc:	4a4e      	ldr	r2, [pc, #312]	; (2c618 <get_request_send+0x168>)
   2c4de:	f011 fcdc 	bl	3de9a <printk>
   2c4e2:	21f7      	movs	r1, #247	; 0xf7
   2c4e4:	484c      	ldr	r0, [pc, #304]	; (2c618 <get_request_send+0x168>)
   2c4e6:	f011 fd2b 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(client->file);
   2c4ea:	f241 031c 	movw	r3, #4124	; 0x101c
   2c4ee:	58eb      	ldr	r3, [r5, r3]
   2c4f0:	b94b      	cbnz	r3, 2c506 <get_request_send+0x56>
   2c4f2:	494b      	ldr	r1, [pc, #300]	; (2c620 <get_request_send+0x170>)
   2c4f4:	4847      	ldr	r0, [pc, #284]	; (2c614 <get_request_send+0x164>)
   2c4f6:	23f8      	movs	r3, #248	; 0xf8
   2c4f8:	4a47      	ldr	r2, [pc, #284]	; (2c618 <get_request_send+0x168>)
   2c4fa:	f011 fcce 	bl	3de9a <printk>
   2c4fe:	21f8      	movs	r1, #248	; 0xf8
   2c500:	4845      	ldr	r0, [pc, #276]	; (2c618 <get_request_send+0x168>)
   2c502:	f011 fd1d 	bl	3df40 <assert_post_action>
	off = client->progress + client->fragment_size - 1;
   2c506:	f241 030c 	movw	r3, #4108	; 0x100c
   2c50a:	58ea      	ldr	r2, [r5, r3]
   2c50c:	f241 0310 	movw	r3, #4112	; 0x1010
	if (client->file_size != 0) {
   2c510:	f241 0108 	movw	r1, #4104	; 0x1008
	off = client->progress + client->fragment_size - 1;
   2c514:	58eb      	ldr	r3, [r5, r3]
	if (client->file_size != 0) {
   2c516:	5869      	ldr	r1, [r5, r1]
	off = client->progress + client->fragment_size - 1;
   2c518:	4413      	add	r3, r2
   2c51a:	3b01      	subs	r3, #1
	if (client->file_size != 0) {
   2c51c:	b111      	cbz	r1, 2c524 <get_request_send+0x74>
		off = MIN(off, client->file_size);
   2c51e:	428b      	cmp	r3, r1
   2c520:	bf28      	it	cs
   2c522:	460b      	movcs	r3, r1
	len = snprintf(client->buf, CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE,
   2c524:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2c528:	f241 0318 	movw	r3, #4120	; 0x1018
   2c52c:	58eb      	ldr	r3, [r5, r3]
   2c52e:	f105 0904 	add.w	r9, r5, #4
   2c532:	9300      	str	r3, [sp, #0]
   2c534:	f241 031c 	movw	r3, #4124	; 0x101c
   2c538:	4a3a      	ldr	r2, [pc, #232]	; (2c624 <get_request_send+0x174>)
   2c53a:	58eb      	ldr	r3, [r5, r3]
   2c53c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   2c540:	4648      	mov	r0, r9
   2c542:	f00f fe49 	bl	3c1d8 <sniprintf>
	if (len < 0 || len > CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE) {
   2c546:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	len = snprintf(client->buf, CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE,
   2c54a:	4604      	mov	r4, r0
	if (len < 0 || len > CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE) {
   2c54c:	d945      	bls.n	2c5da <get_request_send+0x12a>
		LOG_ERR("Cannot create GET request, buffer too small");
   2c54e:	2301      	movs	r3, #1
   2c550:	f04f 0000 	mov.w	r0, #0
   2c554:	4a34      	ldr	r2, [pc, #208]	; (2c628 <get_request_send+0x178>)
   2c556:	f363 0007 	bfi	r0, r3, #0, #8
   2c55a:	4b34      	ldr	r3, [pc, #208]	; (2c62c <get_request_send+0x17c>)
   2c55c:	4934      	ldr	r1, [pc, #208]	; (2c630 <get_request_send+0x180>)
   2c55e:	1a9b      	subs	r3, r3, r2
   2c560:	08db      	lsrs	r3, r3, #3
   2c562:	f363 108f 	bfi	r0, r3, #6, #10
   2c566:	f011 fcfc 	bl	3df62 <log_string_sync>
		return -ENOMEM;
   2c56a:	f06f 000b 	mvn.w	r0, #11
}
   2c56e:	b007      	add	sp, #28
   2c570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sent = send(client->fd, client->buf + off, len, 0);
   2c574:	9b05      	ldr	r3, [sp, #20]
   2c576:	f8d5 a000 	ldr.w	sl, [r5]
   2c57a:	eb09 0b03 	add.w	fp, r9, r3
	__ASSERT_NO_MSG(socket_ops);
   2c57e:	f8d8 3000 	ldr.w	r3, [r8]
   2c582:	b94b      	cbnz	r3, 2c598 <get_request_send+0xe8>
   2c584:	492b      	ldr	r1, [pc, #172]	; (2c634 <get_request_send+0x184>)
   2c586:	4823      	ldr	r0, [pc, #140]	; (2c614 <get_request_send+0x164>)
   2c588:	237e      	movs	r3, #126	; 0x7e
   2c58a:	4632      	mov	r2, r6
   2c58c:	f011 fc85 	bl	3de9a <printk>
   2c590:	217e      	movs	r1, #126	; 0x7e
   2c592:	4630      	mov	r0, r6
   2c594:	f011 fcd4 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   2c598:	f8d8 3000 	ldr.w	r3, [r8]
   2c59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2c59e:	b94b      	cbnz	r3, 2c5b4 <get_request_send+0x104>
   2c5a0:	4925      	ldr	r1, [pc, #148]	; (2c638 <get_request_send+0x188>)
   2c5a2:	481c      	ldr	r0, [pc, #112]	; (2c614 <get_request_send+0x164>)
   2c5a4:	237f      	movs	r3, #127	; 0x7f
   2c5a6:	4632      	mov	r2, r6
   2c5a8:	f011 fc77 	bl	3de9a <printk>
   2c5ac:	217f      	movs	r1, #127	; 0x7f
   2c5ae:	4630      	mov	r0, r6
   2c5b0:	f011 fcc6 	bl	3df40 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   2c5b4:	f8d8 3000 	ldr.w	r3, [r8]
   2c5b8:	4622      	mov	r2, r4
   2c5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2c5bc:	4659      	mov	r1, fp
   2c5be:	461f      	mov	r7, r3
   2c5c0:	4650      	mov	r0, sl
   2c5c2:	2300      	movs	r3, #0
   2c5c4:	47b8      	blx	r7
		if (sent <= 0) {
   2c5c6:	2800      	cmp	r0, #0
   2c5c8:	dd0d      	ble.n	2c5e6 <get_request_send+0x136>
		off += sent;
   2c5ca:	9b05      	ldr	r3, [sp, #20]
		len -= sent;
   2c5cc:	1a24      	subs	r4, r4, r0
		off += sent;
   2c5ce:	4403      	add	r3, r0
   2c5d0:	9305      	str	r3, [sp, #20]
	while (len) {
   2c5d2:	2c00      	cmp	r4, #0
   2c5d4:	d1ce      	bne.n	2c574 <get_request_send+0xc4>
	return 0;
   2c5d6:	4620      	mov	r0, r4
   2c5d8:	e7c9      	b.n	2c56e <get_request_send+0xbe>
	size_t off = 0;
   2c5da:	2300      	movs	r3, #0
	__ASSERT_NO_MSG(socket_ops);
   2c5dc:	f8df 8064 	ldr.w	r8, [pc, #100]	; 2c644 <get_request_send+0x194>
   2c5e0:	9305      	str	r3, [sp, #20]
   2c5e2:	4e16      	ldr	r6, [pc, #88]	; (2c63c <get_request_send+0x18c>)
   2c5e4:	e7f5      	b.n	2c5d2 <get_request_send+0x122>
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
   2c5e6:	2301      	movs	r3, #1
   2c5e8:	f04f 0400 	mov.w	r4, #0
   2c5ec:	4a0e      	ldr	r2, [pc, #56]	; (2c628 <get_request_send+0x178>)
   2c5ee:	f363 0407 	bfi	r4, r3, #0, #8
   2c5f2:	4b0e      	ldr	r3, [pc, #56]	; (2c62c <get_request_send+0x17c>)
   2c5f4:	1a9b      	subs	r3, r3, r2
   2c5f6:	08db      	lsrs	r3, r3, #3
   2c5f8:	f363 148f 	bfi	r4, r3, #6, #10
   2c5fc:	f011 fe9d 	bl	3e33a <__errno>
   2c600:	490f      	ldr	r1, [pc, #60]	; (2c640 <get_request_send+0x190>)
   2c602:	6802      	ldr	r2, [r0, #0]
   2c604:	4620      	mov	r0, r4
   2c606:	f011 fcac 	bl	3df62 <log_string_sync>
			return -EIO;
   2c60a:	f06f 0004 	mvn.w	r0, #4
		return err;
   2c60e:	e7ae      	b.n	2c56e <get_request_send+0xbe>
   2c610:	000476ec 	.word	0x000476ec
   2c614:	00043278 	.word	0x00043278
   2c618:	00047571 	.word	0x00047571
   2c61c:	0004761d 	.word	0x0004761d
   2c620:	0004762a 	.word	0x0004762a
   2c624:	00047637 	.word	0x00047637
   2c628:	00041c2c 	.word	0x00041c2c
   2c62c:	00041c94 	.word	0x00041c94
   2c630:	00047682 	.word	0x00047682
   2c634:	000433f1 	.word	0x000433f1
   2c638:	00044dc8 	.word	0x00044dc8
   2c63c:	000433c1 	.word	0x000433c1
   2c640:	000476ae 	.word	0x000476ae
   2c644:	2002389c 	.word	0x2002389c

0002c648 <download_client_init>:
	goto restart_and_suspend;
}

int download_client_init(struct download_client *const client,
			 download_client_callback_t callback)
{
   2c648:	b530      	push	{r4, r5, lr}
	if (client == NULL || callback == NULL) {
   2c64a:	4605      	mov	r5, r0
{
   2c64c:	b087      	sub	sp, #28
	if (client == NULL || callback == NULL) {
   2c64e:	b1f0      	cbz	r0, 2c68e <download_client_init+0x46>
   2c650:	b1e9      	cbz	r1, 2c68e <download_client_init+0x46>
		return -EINVAL;
	}

	client->fd = -1;
   2c652:	f04f 33ff 	mov.w	r3, #4294967295
   2c656:	6003      	str	r3, [r0, #0]
	client->callback = callback;
   2c658:	f242 03e0 	movw	r3, #8416	; 0x20e0
   2c65c:	50c1      	str	r1, [r0, r3]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2c65e:	2400      	movs	r4, #0
   2c660:	230e      	movs	r3, #14
   2c662:	e9cd 0400 	strd	r0, r4, [sp]
   2c666:	f500 5187 	add.w	r1, r0, #4320	; 0x10e0
   2c66a:	f500 5081 	add.w	r0, r0, #4128	; 0x1020
   2c66e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   2c672:	e9cd 4404 	strd	r4, r4, [sp, #16]
   2c676:	4b07      	ldr	r3, [pc, #28]	; (2c694 <download_client_init+0x4c>)
   2c678:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2c67c:	3010      	adds	r0, #16
   2c67e:	f00d ff11 	bl	3a4a4 <z_impl_k_thread_create>

	/* The thread is spawned now, but it will suspend itself;
	 * it is resumed when the download is started via the API.
	 */
	client->tid =
   2c682:	f241 032c 	movw	r3, #4140	; 0x102c
   2c686:	50e8      	str	r0, [r5, r3]
		k_thread_create(&client->thread, client->thread_stack,
				K_THREAD_STACK_SIZEOF(client->thread_stack),
				download_thread, client, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	return 0;
   2c688:	4620      	mov	r0, r4
}
   2c68a:	b007      	add	sp, #28
   2c68c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2c68e:	f06f 0015 	mvn.w	r0, #21
   2c692:	e7fa      	b.n	2c68a <download_client_init+0x42>
   2c694:	0002cadd 	.word	0x0002cadd

0002c698 <download_client_connect>:

int download_client_connect(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   2c698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c69c:	b0a1      	sub	sp, #132	; 0x84
   2c69e:	9103      	str	r1, [sp, #12]
   2c6a0:	4617      	mov	r7, r2
	int err;

	if (client == NULL || host == NULL || config == NULL) {
   2c6a2:	4605      	mov	r5, r0
   2c6a4:	b928      	cbnz	r0, 2c6b2 <download_client_connect+0x1a>
		client->fd =
			resolve_and_connect(AF_INET, host, config);
	}

	if (client->fd < 0) {
		return -EINVAL;
   2c6a6:	f06f 0615 	mvn.w	r6, #21
	if (err) {
		return err;
	}

	return 0;
}
   2c6aa:	4630      	mov	r0, r6
   2c6ac:	b021      	add	sp, #132	; 0x84
   2c6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (client == NULL || host == NULL || config == NULL) {
   2c6b2:	9b03      	ldr	r3, [sp, #12]
   2c6b4:	2b00      	cmp	r3, #0
   2c6b6:	d0f6      	beq.n	2c6a6 <download_client_connect+0xe>
   2c6b8:	2a00      	cmp	r2, #0
   2c6ba:	d0f4      	beq.n	2c6a6 <download_client_connect+0xe>
		if (config->sec_tag != -1) {
   2c6bc:	6853      	ldr	r3, [r2, #4]
   2c6be:	3301      	adds	r3, #1
   2c6c0:	d1f1      	bne.n	2c6a6 <download_client_connect+0xe>
		client->fragment_size =
   2c6c2:	f241 0310 	movw	r3, #4112	; 0x1010
   2c6c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	if (client->fd != -1) {
   2c6ca:	6806      	ldr	r6, [r0, #0]
		client->fragment_size =
   2c6cc:	50c2      	str	r2, [r0, r3]
	if (client->fd != -1) {
   2c6ce:	1c73      	adds	r3, r6, #1
   2c6d0:	f040 8184 	bne.w	2c9dc <download_client_connect+0x344>
		port = (cfg->port != 0) ? htons(cfg->port) :
   2c6d4:	883a      	ldrh	r2, [r7, #0]
   2c6d6:	2a00      	cmp	r2, #0
   2c6d8:	d04f      	beq.n	2c77a <download_client_connect+0xe2>
   2c6da:	0213      	lsls	r3, r2, #8
   2c6dc:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   2c6e0:	b29b      	uxth	r3, r3
	struct addrinfo hints = {
   2c6e2:	2220      	movs	r2, #32
   2c6e4:	2100      	movs	r1, #0
   2c6e6:	eb0d 0002 	add.w	r0, sp, r2
		port = (cfg->port != 0) ? htons(cfg->port) :
   2c6ea:	9304      	str	r3, [sp, #16]
	struct addrinfo hints = {
   2c6ec:	f013 ffb6 	bl	4065c <memset>
   2c6f0:	2301      	movs	r3, #1
   2c6f2:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   2c6f6:	2306      	movs	r3, #6
   2c6f8:	930b      	str	r3, [sp, #44]	; 0x2c
   2c6fa:	68bb      	ldr	r3, [r7, #8]
   2c6fc:	930e      	str	r3, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(socket_ops);
   2c6fe:	4bb8      	ldr	r3, [pc, #736]	; (2c9e0 <download_client_connect+0x348>)
   2c700:	681a      	ldr	r2, [r3, #0]
   2c702:	4698      	mov	r8, r3
   2c704:	b94a      	cbnz	r2, 2c71a <download_client_connect+0x82>
   2c706:	49b7      	ldr	r1, [pc, #732]	; (2c9e4 <download_client_connect+0x34c>)
   2c708:	48b7      	ldr	r0, [pc, #732]	; (2c9e8 <download_client_connect+0x350>)
   2c70a:	2393      	movs	r3, #147	; 0x93
   2c70c:	4ab7      	ldr	r2, [pc, #732]	; (2c9ec <download_client_connect+0x354>)
   2c70e:	f011 fbc4 	bl	3de9a <printk>
   2c712:	2193      	movs	r1, #147	; 0x93
   2c714:	48b5      	ldr	r0, [pc, #724]	; (2c9ec <download_client_connect+0x354>)
   2c716:	f011 fc13 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);
   2c71a:	f8d8 3000 	ldr.w	r3, [r8]
   2c71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2c720:	b94b      	cbnz	r3, 2c736 <download_client_connect+0x9e>
   2c722:	49b3      	ldr	r1, [pc, #716]	; (2c9f0 <download_client_connect+0x358>)
   2c724:	48b0      	ldr	r0, [pc, #704]	; (2c9e8 <download_client_connect+0x350>)
   2c726:	2394      	movs	r3, #148	; 0x94
   2c728:	4ab0      	ldr	r2, [pc, #704]	; (2c9ec <download_client_connect+0x354>)
   2c72a:	f011 fbb6 	bl	3de9a <printk>
   2c72e:	2194      	movs	r1, #148	; 0x94
   2c730:	48ae      	ldr	r0, [pc, #696]	; (2c9ec <download_client_connect+0x354>)
   2c732:	f011 fc05 	bl	3df40 <assert_post_action>
	return socket_ops->getaddrinfo(node, service, hints, res);
   2c736:	f8d8 3000 	ldr.w	r3, [r8]
   2c73a:	aa08      	add	r2, sp, #32
   2c73c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
   2c73e:	2100      	movs	r1, #0
   2c740:	ab07      	add	r3, sp, #28
   2c742:	9803      	ldr	r0, [sp, #12]
   2c744:	47a0      	blx	r4
	if (err) {
   2c746:	4cab      	ldr	r4, [pc, #684]	; (2c9f4 <download_client_connect+0x35c>)
   2c748:	4bab      	ldr	r3, [pc, #684]	; (2c9f8 <download_client_connect+0x360>)
   2c74a:	1ae4      	subs	r4, r4, r3
   2c74c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2c750:	b1b0      	cbz	r0, 2c780 <download_client_connect+0xe8>
		LOG_WRN("Failed to resolve hostname %s on %s", log_strdup(host),
   2c752:	2302      	movs	r3, #2
   2c754:	f04f 0600 	mov.w	r6, #0
   2c758:	9803      	ldr	r0, [sp, #12]
   2c75a:	f363 0607 	bfi	r6, r3, #0, #8
   2c75e:	f011 fc12 	bl	3df86 <log_strdup>
   2c762:	f364 168f 	bfi	r6, r4, #6, #10
   2c766:	4602      	mov	r2, r0
   2c768:	4ba4      	ldr	r3, [pc, #656]	; (2c9fc <download_client_connect+0x364>)
   2c76a:	49a5      	ldr	r1, [pc, #660]	; (2ca00 <download_client_connect+0x368>)
   2c76c:	4630      	mov	r0, r6
   2c76e:	f011 fbf8 	bl	3df62 <log_string_sync>
		client->fd =
   2c772:	f04f 33ff 	mov.w	r3, #4294967295
   2c776:	602b      	str	r3, [r5, #0]
   2c778:	e795      	b.n	2c6a6 <download_client_connect+0xe>
		port = (cfg->port != 0) ? htons(cfg->port) :
   2c77a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
   2c77e:	e7b0      	b.n	2c6e2 <download_client_connect+0x4a>
	LOG_INF("Attempting to connect over %s",
   2c780:	2303      	movs	r3, #3
   2c782:	f04f 0a00 	mov.w	sl, #0
   2c786:	489d      	ldr	r0, [pc, #628]	; (2c9fc <download_client_connect+0x364>)
   2c788:	f363 0a07 	bfi	sl, r3, #0, #8
   2c78c:	f011 fbfb 	bl	3df86 <log_strdup>
   2c790:	f364 1a8f 	bfi	sl, r4, #6, #10
   2c794:	4602      	mov	r2, r0
   2c796:	499b      	ldr	r1, [pc, #620]	; (2ca04 <download_client_connect+0x36c>)
   2c798:	4650      	mov	r0, sl
   2c79a:	f011 fbe2 	bl	3df62 <log_string_sync>
	__ASSERT_NO_MSG(socket_ops);
   2c79e:	f8d8 3000 	ldr.w	r3, [r8]
   2c7a2:	b94b      	cbnz	r3, 2c7b8 <download_client_connect+0x120>
   2c7a4:	498f      	ldr	r1, [pc, #572]	; (2c9e4 <download_client_connect+0x34c>)
   2c7a6:	4890      	ldr	r0, [pc, #576]	; (2c9e8 <download_client_connect+0x350>)
   2c7a8:	2319      	movs	r3, #25
   2c7aa:	4a90      	ldr	r2, [pc, #576]	; (2c9ec <download_client_connect+0x354>)
   2c7ac:	f011 fb75 	bl	3de9a <printk>
   2c7b0:	2119      	movs	r1, #25
   2c7b2:	488e      	ldr	r0, [pc, #568]	; (2c9ec <download_client_connect+0x354>)
   2c7b4:	f011 fbc4 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   2c7b8:	f8d8 3000 	ldr.w	r3, [r8]
   2c7bc:	681b      	ldr	r3, [r3, #0]
   2c7be:	b94b      	cbnz	r3, 2c7d4 <download_client_connect+0x13c>
   2c7c0:	4991      	ldr	r1, [pc, #580]	; (2ca08 <download_client_connect+0x370>)
   2c7c2:	4889      	ldr	r0, [pc, #548]	; (2c9e8 <download_client_connect+0x350>)
   2c7c4:	231a      	movs	r3, #26
   2c7c6:	4a89      	ldr	r2, [pc, #548]	; (2c9ec <download_client_connect+0x354>)
   2c7c8:	f011 fb67 	bl	3de9a <printk>
   2c7cc:	211a      	movs	r1, #26
   2c7ce:	4887      	ldr	r0, [pc, #540]	; (2c9ec <download_client_connect+0x354>)
   2c7d0:	f011 fbb6 	bl	3df40 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   2c7d4:	2101      	movs	r1, #1
   2c7d6:	f8d8 3000 	ldr.w	r3, [r8]
   2c7da:	2206      	movs	r2, #6
   2c7dc:	681b      	ldr	r3, [r3, #0]
   2c7de:	4608      	mov	r0, r1
   2c7e0:	4798      	blx	r3
	if (fd < 0) {
   2c7e2:	1e03      	subs	r3, r0, #0
   2c7e4:	9302      	str	r3, [sp, #8]
   2c7e6:	da38      	bge.n	2c85a <download_client_connect+0x1c2>
		LOG_ERR("Failed to create socket, errno %d", errno);
   2c7e8:	2301      	movs	r3, #1
   2c7ea:	f04f 0600 	mov.w	r6, #0
   2c7ee:	f363 0607 	bfi	r6, r3, #0, #8
   2c7f2:	f011 fda2 	bl	3e33a <__errno>
   2c7f6:	f364 168f 	bfi	r6, r4, #6, #10
   2c7fa:	6802      	ldr	r2, [r0, #0]
   2c7fc:	4983      	ldr	r1, [pc, #524]	; (2ca0c <download_client_connect+0x374>)
   2c7fe:	4630      	mov	r0, r6
   2c800:	f011 fbaf 	bl	3df62 <log_string_sync>
	err = getaddrinfo(host, NULL, &hints, &info);
   2c804:	2600      	movs	r6, #0
	__ASSERT_NO_MSG(socket_ops);
   2c806:	4b76      	ldr	r3, [pc, #472]	; (2c9e0 <download_client_connect+0x348>)
	freeaddrinfo(info);
   2c808:	f8dd 901c 	ldr.w	r9, [sp, #28]
   2c80c:	681a      	ldr	r2, [r3, #0]
   2c80e:	4698      	mov	r8, r3
   2c810:	b94a      	cbnz	r2, 2c826 <download_client_connect+0x18e>
   2c812:	4974      	ldr	r1, [pc, #464]	; (2c9e4 <download_client_connect+0x34c>)
   2c814:	4874      	ldr	r0, [pc, #464]	; (2c9e8 <download_client_connect+0x350>)
   2c816:	239b      	movs	r3, #155	; 0x9b
   2c818:	4a74      	ldr	r2, [pc, #464]	; (2c9ec <download_client_connect+0x354>)
   2c81a:	f011 fb3e 	bl	3de9a <printk>
   2c81e:	219b      	movs	r1, #155	; 0x9b
   2c820:	4872      	ldr	r0, [pc, #456]	; (2c9ec <download_client_connect+0x354>)
   2c822:	f011 fb8d 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);
   2c826:	f8d8 3000 	ldr.w	r3, [r8]
   2c82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2c82c:	b94b      	cbnz	r3, 2c842 <download_client_connect+0x1aa>
   2c82e:	4978      	ldr	r1, [pc, #480]	; (2ca10 <download_client_connect+0x378>)
   2c830:	486d      	ldr	r0, [pc, #436]	; (2c9e8 <download_client_connect+0x350>)
   2c832:	239c      	movs	r3, #156	; 0x9c
   2c834:	4a6d      	ldr	r2, [pc, #436]	; (2c9ec <download_client_connect+0x354>)
   2c836:	f011 fb30 	bl	3de9a <printk>
   2c83a:	219c      	movs	r1, #156	; 0x9c
   2c83c:	486b      	ldr	r0, [pc, #428]	; (2c9ec <download_client_connect+0x354>)
   2c83e:	f011 fb7f 	bl	3df40 <assert_post_action>
	return socket_ops->freeaddrinfo(res);
   2c842:	f8d8 3000 	ldr.w	r3, [r8]
   2c846:	4648      	mov	r0, r9
   2c848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2c84a:	4798      	blx	r3
	if (err) {
   2c84c:	2e00      	cmp	r6, #0
   2c84e:	f000 80a6 	beq.w	2c99e <download_client_connect+0x306>
		close(fd);
   2c852:	9802      	ldr	r0, [sp, #8]
   2c854:	f7ff fe00 	bl	2c458 <close>
   2c858:	e78b      	b.n	2c772 <download_client_connect+0xda>
	if (cfg->apn != NULL) {
   2c85a:	68b8      	ldr	r0, [r7, #8]
   2c85c:	2800      	cmp	r0, #0
   2c85e:	d052      	beq.n	2c906 <download_client_connect+0x26e>
		LOG_INF("Setting up APN: %s", log_strdup(cfg->apn));
   2c860:	2303      	movs	r3, #3
   2c862:	f04f 0a00 	mov.w	sl, #0
   2c866:	f363 0a07 	bfi	sl, r3, #0, #8
   2c86a:	f011 fb8c 	bl	3df86 <log_strdup>
   2c86e:	f364 1a8f 	bfi	sl, r4, #6, #10
   2c872:	4602      	mov	r2, r0
   2c874:	4967      	ldr	r1, [pc, #412]	; (2ca14 <download_client_connect+0x37c>)
   2c876:	4650      	mov	r0, sl
   2c878:	f011 fb73 	bl	3df62 <log_string_sync>
	struct ifreq ifr = {0};
   2c87c:	2240      	movs	r2, #64	; 0x40
		err = socket_apn_set(fd, cfg->apn);
   2c87e:	f8d7 b008 	ldr.w	fp, [r7, #8]
	struct ifreq ifr = {0};
   2c882:	2100      	movs	r1, #0
   2c884:	eb0d 0002 	add.w	r0, sp, r2
   2c888:	f013 fee8 	bl	4065c <memset>
	__ASSERT_NO_MSG(apn);
   2c88c:	f1bb 0f00 	cmp.w	fp, #0
   2c890:	d109      	bne.n	2c8a6 <download_client_connect+0x20e>
   2c892:	4961      	ldr	r1, [pc, #388]	; (2ca18 <download_client_connect+0x380>)
   2c894:	4854      	ldr	r0, [pc, #336]	; (2c9e8 <download_client_connect+0x350>)
   2c896:	2366      	movs	r3, #102	; 0x66
   2c898:	4a60      	ldr	r2, [pc, #384]	; (2ca1c <download_client_connect+0x384>)
   2c89a:	f011 fafe 	bl	3de9a <printk>
   2c89e:	2166      	movs	r1, #102	; 0x66
   2c8a0:	485e      	ldr	r0, [pc, #376]	; (2ca1c <download_client_connect+0x384>)
   2c8a2:	f011 fb4d 	bl	3df40 <assert_post_action>
	len = strlen(apn);
   2c8a6:	4658      	mov	r0, fp
   2c8a8:	f7f0 fc3c 	bl	1d124 <strlen>
	if (len >= sizeof(ifr.ifr_name)) {
   2c8ac:	283f      	cmp	r0, #63	; 0x3f
	len = strlen(apn);
   2c8ae:	4682      	mov	sl, r0
	if (len >= sizeof(ifr.ifr_name)) {
   2c8b0:	d90a      	bls.n	2c8c8 <download_client_connect+0x230>
		LOG_ERR("Access point name is too long.");
   2c8b2:	2301      	movs	r3, #1
   2c8b4:	f04f 0000 	mov.w	r0, #0
   2c8b8:	f363 0007 	bfi	r0, r3, #0, #8
   2c8bc:	f364 108f 	bfi	r0, r4, #6, #10
   2c8c0:	4957      	ldr	r1, [pc, #348]	; (2ca20 <download_client_connect+0x388>)
   2c8c2:	f011 fb4e 	bl	3df62 <log_string_sync>
		if (err) {
   2c8c6:	e79e      	b.n	2c806 <download_client_connect+0x16e>
	memcpy(ifr.ifr_name, apn, len);
   2c8c8:	2340      	movs	r3, #64	; 0x40
   2c8ca:	4602      	mov	r2, r0
   2c8cc:	4659      	mov	r1, fp
   2c8ce:	eb0d 0003 	add.w	r0, sp, r3
   2c8d2:	f013 feb0 	bl	40636 <__memcpy_chk>
	err = setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE, &ifr, len);
   2c8d6:	f8cd a000 	str.w	sl, [sp]
   2c8da:	ab10      	add	r3, sp, #64	; 0x40
   2c8dc:	2219      	movs	r2, #25
   2c8de:	2101      	movs	r1, #1
   2c8e0:	9802      	ldr	r0, [sp, #8]
   2c8e2:	f7ff fd81 	bl	2c3e8 <setsockopt>
	if (err) {
   2c8e6:	b170      	cbz	r0, 2c906 <download_client_connect+0x26e>
		LOG_ERR("Failed to bind socket, errno %d", errno);
   2c8e8:	2301      	movs	r3, #1
   2c8ea:	f04f 0800 	mov.w	r8, #0
   2c8ee:	f363 0807 	bfi	r8, r3, #0, #8
   2c8f2:	f011 fd22 	bl	3e33a <__errno>
   2c8f6:	f364 188f 	bfi	r8, r4, #6, #10
   2c8fa:	6802      	ldr	r2, [r0, #0]
   2c8fc:	4949      	ldr	r1, [pc, #292]	; (2ca24 <download_client_connect+0x38c>)
   2c8fe:	4640      	mov	r0, r8
   2c900:	f011 fb2f 	bl	3df62 <log_string_sync>
		if (err) {
   2c904:	e77f      	b.n	2c806 <download_client_connect+0x16e>
	for (addr = info; addr != NULL; addr = addr->ai_next) {
   2c906:	f8dd a01c 	ldr.w	sl, [sp, #28]
	__ASSERT_NO_MSG(socket_ops);
   2c90a:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 2c9ec <download_client_connect+0x354>
   2c90e:	f1ba 0f00 	cmp.w	sl, #0
   2c912:	f43f af78 	beq.w	2c806 <download_client_connect+0x16e>
		struct sockaddr * const sa = addr->ai_addr;
   2c916:	f8da 6014 	ldr.w	r6, [sl, #20]
		switch (sa->sa_family) {
   2c91a:	8833      	ldrh	r3, [r6, #0]
   2c91c:	2b01      	cmp	r3, #1
   2c91e:	d001      	beq.n	2c924 <download_client_connect+0x28c>
   2c920:	2b02      	cmp	r3, #2
   2c922:	d101      	bne.n	2c928 <download_client_connect+0x290>
			((struct sockaddr_in *)sa)->sin_port = port;
   2c924:	9b04      	ldr	r3, [sp, #16]
   2c926:	8073      	strh	r3, [r6, #2]
		err = connect(fd, sa, addr->ai_addrlen);
   2c928:	f8da 3010 	ldr.w	r3, [sl, #16]
   2c92c:	9305      	str	r3, [sp, #20]
   2c92e:	4b2c      	ldr	r3, [pc, #176]	; (2c9e0 <download_client_connect+0x348>)
   2c930:	681b      	ldr	r3, [r3, #0]
   2c932:	b94b      	cbnz	r3, 2c948 <download_client_connect+0x2b0>
   2c934:	492b      	ldr	r1, [pc, #172]	; (2c9e4 <download_client_connect+0x34c>)
   2c936:	482c      	ldr	r0, [pc, #176]	; (2c9e8 <download_client_connect+0x350>)
   2c938:	2345      	movs	r3, #69	; 0x45
   2c93a:	465a      	mov	r2, fp
   2c93c:	f011 faad 	bl	3de9a <printk>
   2c940:	2145      	movs	r1, #69	; 0x45
   2c942:	4658      	mov	r0, fp
   2c944:	f011 fafc 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   2c948:	4b25      	ldr	r3, [pc, #148]	; (2c9e0 <download_client_connect+0x348>)
   2c94a:	681b      	ldr	r3, [r3, #0]
   2c94c:	695b      	ldr	r3, [r3, #20]
   2c94e:	b94b      	cbnz	r3, 2c964 <download_client_connect+0x2cc>
   2c950:	4935      	ldr	r1, [pc, #212]	; (2ca28 <download_client_connect+0x390>)
   2c952:	4825      	ldr	r0, [pc, #148]	; (2c9e8 <download_client_connect+0x350>)
   2c954:	2346      	movs	r3, #70	; 0x46
   2c956:	465a      	mov	r2, fp
   2c958:	f011 fa9f 	bl	3de9a <printk>
   2c95c:	2146      	movs	r1, #70	; 0x46
   2c95e:	4658      	mov	r0, fp
   2c960:	f011 faee 	bl	3df40 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   2c964:	f8d8 3000 	ldr.w	r3, [r8]
   2c968:	4631      	mov	r1, r6
   2c96a:	695b      	ldr	r3, [r3, #20]
   2c96c:	9a05      	ldr	r2, [sp, #20]
   2c96e:	9802      	ldr	r0, [sp, #8]
   2c970:	4798      	blx	r3
		if (err) {
   2c972:	4606      	mov	r6, r0
   2c974:	2800      	cmp	r0, #0
   2c976:	f43f af46 	beq.w	2c806 <download_client_connect+0x16e>
			LOG_ERR("Unable to connect, errno %d", errno);
   2c97a:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   2c97e:	f043 0301 	orr.w	r3, r3, #1
   2c982:	f363 0907 	bfi	r9, r3, #0, #8
   2c986:	f011 fcd8 	bl	3e33a <__errno>
   2c98a:	f364 198f 	bfi	r9, r4, #6, #10
   2c98e:	6802      	ldr	r2, [r0, #0]
   2c990:	4926      	ldr	r1, [pc, #152]	; (2ca2c <download_client_connect+0x394>)
   2c992:	4648      	mov	r0, r9
   2c994:	f011 fae5 	bl	3df62 <log_string_sync>
	for (addr = info; addr != NULL; addr = addr->ai_next) {
   2c998:	f8da a01c 	ldr.w	sl, [sl, #28]
   2c99c:	e7b7      	b.n	2c90e <download_client_connect+0x276>
		client->fd =
   2c99e:	9b02      	ldr	r3, [sp, #8]
	if (client->fd < 0) {
   2c9a0:	2b00      	cmp	r3, #0
		client->fd =
   2c9a2:	602b      	str	r3, [r5, #0]
	if (client->fd < 0) {
   2c9a4:	f6ff ae7f 	blt.w	2c6a6 <download_client_connect+0xe>
	client->host = host;
   2c9a8:	f241 0318 	movw	r3, #4120	; 0x1018
   2c9ac:	9a03      	ldr	r2, [sp, #12]
   2c9ae:	50ea      	str	r2, [r5, r3]
	client->config = *config;
   2c9b0:	f505 5581 	add.w	r5, r5, #4128	; 0x1020
   2c9b4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
	LOG_INF("Connected to %s", log_strdup(host));
   2c9b8:	2303      	movs	r3, #3
	client->config = *config;
   2c9ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	LOG_INF("Connected to %s", log_strdup(host));
   2c9be:	f04f 0500 	mov.w	r5, #0
   2c9c2:	9803      	ldr	r0, [sp, #12]
   2c9c4:	f363 0507 	bfi	r5, r3, #0, #8
   2c9c8:	f011 fadd 	bl	3df86 <log_strdup>
   2c9cc:	f364 158f 	bfi	r5, r4, #6, #10
   2c9d0:	4602      	mov	r2, r0
   2c9d2:	4917      	ldr	r1, [pc, #92]	; (2ca30 <download_client_connect+0x398>)
   2c9d4:	4628      	mov	r0, r5
   2c9d6:	f011 fac4 	bl	3df62 <log_string_sync>
	if (err) {
   2c9da:	e666      	b.n	2c6aa <download_client_connect+0x12>
		return 0;
   2c9dc:	2600      	movs	r6, #0
   2c9de:	e664      	b.n	2c6aa <download_client_connect+0x12>
   2c9e0:	2002389c 	.word	0x2002389c
   2c9e4:	000433f1 	.word	0x000433f1
   2c9e8:	00043278 	.word	0x00043278
   2c9ec:	000433c1 	.word	0x000433c1
   2c9f0:	000467a9 	.word	0x000467a9
   2c9f4:	00041c94 	.word	0x00041c94
   2c9f8:	00041c2c 	.word	0x00041c2c
   2c9fc:	000472b4 	.word	0x000472b4
   2ca00:	000472b9 	.word	0x000472b9
   2ca04:	000472dd 	.word	0x000472dd
   2ca08:	00044d90 	.word	0x00044d90
   2ca0c:	000472fb 	.word	0x000472fb
   2ca10:	0004681a 	.word	0x0004681a
   2ca14:	0004731d 	.word	0x0004731d
   2ca18:	00047330 	.word	0x00047330
   2ca1c:	00047571 	.word	0x00047571
   2ca20:	00047334 	.word	0x00047334
   2ca24:	00047353 	.word	0x00047353
   2ca28:	00044da3 	.word	0x00044da3
   2ca2c:	00047373 	.word	0x00047373
   2ca30:	0004738f 	.word	0x0004738f

0002ca34 <download_client_disconnect>:

int download_client_disconnect(struct download_client *const client)
{
   2ca34:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   2ca36:	4604      	mov	r4, r0
   2ca38:	b300      	cbz	r0, 2ca7c <download_client_disconnect+0x48>
   2ca3a:	6800      	ldr	r0, [r0, #0]
   2ca3c:	2800      	cmp	r0, #0
   2ca3e:	db1d      	blt.n	2ca7c <download_client_disconnect+0x48>
		return -EINVAL;
	}

	err = close(client->fd);
   2ca40:	f7ff fd0a 	bl	2c458 <close>
	if (err) {
   2ca44:	b1b0      	cbz	r0, 2ca74 <download_client_disconnect+0x40>
		LOG_ERR("Failed to close socket, errno %d", errno);
   2ca46:	2301      	movs	r3, #1
   2ca48:	f04f 0400 	mov.w	r4, #0
   2ca4c:	4a0d      	ldr	r2, [pc, #52]	; (2ca84 <download_client_disconnect+0x50>)
   2ca4e:	f363 0407 	bfi	r4, r3, #0, #8
   2ca52:	4b0d      	ldr	r3, [pc, #52]	; (2ca88 <download_client_disconnect+0x54>)
   2ca54:	1a9b      	subs	r3, r3, r2
   2ca56:	08db      	lsrs	r3, r3, #3
   2ca58:	f363 148f 	bfi	r4, r3, #6, #10
   2ca5c:	f011 fc6d 	bl	3e33a <__errno>
   2ca60:	490a      	ldr	r1, [pc, #40]	; (2ca8c <download_client_disconnect+0x58>)
   2ca62:	6802      	ldr	r2, [r0, #0]
   2ca64:	4620      	mov	r0, r4
   2ca66:	f011 fa7c 	bl	3df62 <log_string_sync>
		return -errno;
   2ca6a:	f011 fc66 	bl	3e33a <__errno>
   2ca6e:	6800      	ldr	r0, [r0, #0]
   2ca70:	4240      	negs	r0, r0
	}

	client->fd = -1;

	return 0;
}
   2ca72:	bd10      	pop	{r4, pc}
	client->fd = -1;
   2ca74:	f04f 33ff 	mov.w	r3, #4294967295
   2ca78:	6023      	str	r3, [r4, #0]
	return 0;
   2ca7a:	e7fa      	b.n	2ca72 <download_client_disconnect+0x3e>
		return -EINVAL;
   2ca7c:	f06f 0015 	mvn.w	r0, #21
   2ca80:	e7f7      	b.n	2ca72 <download_client_disconnect+0x3e>
   2ca82:	bf00      	nop
   2ca84:	00041c2c 	.word	0x00041c2c
   2ca88:	00041c94 	.word	0x00041c94
   2ca8c:	0004739f 	.word	0x0004739f

0002ca90 <reconnect>:
{
   2ca90:	b510      	push	{r4, lr}
	LOG_INF("Reconnecting..");
   2ca92:	2303      	movs	r3, #3
{
   2ca94:	4604      	mov	r4, r0
	LOG_INF("Reconnecting..");
   2ca96:	f04f 0000 	mov.w	r0, #0
   2ca9a:	4a0d      	ldr	r2, [pc, #52]	; (2cad0 <reconnect+0x40>)
   2ca9c:	f363 0007 	bfi	r0, r3, #0, #8
   2caa0:	4b0c      	ldr	r3, [pc, #48]	; (2cad4 <reconnect+0x44>)
   2caa2:	490d      	ldr	r1, [pc, #52]	; (2cad8 <reconnect+0x48>)
   2caa4:	1a9b      	subs	r3, r3, r2
   2caa6:	08db      	lsrs	r3, r3, #3
   2caa8:	f363 108f 	bfi	r0, r3, #6, #10
   2caac:	f011 fa59 	bl	3df62 <log_string_sync>
	err = download_client_disconnect(dl);
   2cab0:	4620      	mov	r0, r4
   2cab2:	f7ff ffbf 	bl	2ca34 <download_client_disconnect>
	if (err) {
   2cab6:	b948      	cbnz	r0, 2cacc <reconnect+0x3c>
	err = download_client_connect(dl, dl->host, &dl->config);
   2cab8:	f241 0318 	movw	r3, #4120	; 0x1018
   2cabc:	f504 5281 	add.w	r2, r4, #4128	; 0x1020
   2cac0:	58e1      	ldr	r1, [r4, r3]
   2cac2:	4620      	mov	r0, r4
}
   2cac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = download_client_connect(dl, dl->host, &dl->config);
   2cac8:	f7ff bde6 	b.w	2c698 <download_client_connect>
}
   2cacc:	bd10      	pop	{r4, pc}
   2cace:	bf00      	nop
   2cad0:	00041c2c 	.word	0x00041c2c
   2cad4:	00041c94 	.word	0x00041c94
   2cad8:	000476d4 	.word	0x000476d4

0002cadc <download_thread>:
{
   2cadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cae0:	4604      	mov	r4, r0
   2cae2:	4b90      	ldr	r3, [pc, #576]	; (2cd24 <download_thread+0x248>)
		LOG_WRN("Peer closed connection, will attempt to re-connect");
   2cae4:	4a90      	ldr	r2, [pc, #576]	; (2cd28 <download_thread+0x24c>)
{
   2cae6:	b091      	sub	sp, #68	; 0x44
		LOG_WRN("Peer closed connection, will attempt to re-connect");
   2cae8:	1a9b      	subs	r3, r3, r2
   2caea:	f3c3 0bc9 	ubfx	fp, r3, #3, #10
	k_thread_suspend(dl->tid);
   2caee:	f500 5381 	add.w	r3, r0, #4128	; 0x1020
   2caf2:	330c      	adds	r3, #12
   2caf4:	930a      	str	r3, [sp, #40]	; 0x28
   2caf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2caf8:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_suspend(thread);
   2cafa:	f00d fdb1 	bl	3a660 <z_impl_k_thread_suspend>
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   2cafe:	f504 5580 	add.w	r5, r4, #4096	; 0x1000
   2cb02:	3504      	adds	r5, #4
   2cb04:	682b      	ldr	r3, [r5, #0]
   2cb06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2cb0a:	d30e      	bcc.n	2cb2a <download_thread+0x4e>
   2cb0c:	4987      	ldr	r1, [pc, #540]	; (2cd2c <download_thread+0x250>)
   2cb0e:	f240 139f 	movw	r3, #415	; 0x19f
   2cb12:	4a87      	ldr	r2, [pc, #540]	; (2cd30 <download_thread+0x254>)
   2cb14:	4887      	ldr	r0, [pc, #540]	; (2cd34 <download_thread+0x258>)
   2cb16:	f011 f9c0 	bl	3de9a <printk>
   2cb1a:	4887      	ldr	r0, [pc, #540]	; (2cd38 <download_thread+0x25c>)
   2cb1c:	f011 f9bd 	bl	3de9a <printk>
   2cb20:	f240 119f 	movw	r1, #415	; 0x19f
   2cb24:	4882      	ldr	r0, [pc, #520]	; (2cd30 <download_thread+0x254>)
   2cb26:	f011 fa0b 	bl	3df40 <assert_post_action>
		len = recv(dl->fd, dl->buf + dl->offset,
   2cb2a:	4626      	mov	r6, r4
   2cb2c:	f856 3b04 	ldr.w	r3, [r6], #4
   2cb30:	682f      	ldr	r7, [r5, #0]
   2cb32:	930b      	str	r3, [sp, #44]	; 0x2c
	__ASSERT_NO_MSG(socket_ops);
   2cb34:	4b81      	ldr	r3, [pc, #516]	; (2cd3c <download_thread+0x260>)
   2cb36:	eb06 0807 	add.w	r8, r6, r7
   2cb3a:	681b      	ldr	r3, [r3, #0]
   2cb3c:	f5c7 5780 	rsb	r7, r7, #4096	; 0x1000
   2cb40:	b94b      	cbnz	r3, 2cb56 <download_thread+0x7a>
   2cb42:	497f      	ldr	r1, [pc, #508]	; (2cd40 <download_thread+0x264>)
   2cb44:	487b      	ldr	r0, [pc, #492]	; (2cd34 <download_thread+0x258>)
   2cb46:	2369      	movs	r3, #105	; 0x69
   2cb48:	4a7e      	ldr	r2, [pc, #504]	; (2cd44 <download_thread+0x268>)
   2cb4a:	f011 f9a6 	bl	3de9a <printk>
   2cb4e:	2169      	movs	r1, #105	; 0x69
   2cb50:	487c      	ldr	r0, [pc, #496]	; (2cd44 <download_thread+0x268>)
   2cb52:	f011 f9f5 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   2cb56:	4b79      	ldr	r3, [pc, #484]	; (2cd3c <download_thread+0x260>)
   2cb58:	681b      	ldr	r3, [r3, #0]
   2cb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2cb5c:	b94b      	cbnz	r3, 2cb72 <download_thread+0x96>
   2cb5e:	497a      	ldr	r1, [pc, #488]	; (2cd48 <download_thread+0x26c>)
   2cb60:	4874      	ldr	r0, [pc, #464]	; (2cd34 <download_thread+0x258>)
   2cb62:	236a      	movs	r3, #106	; 0x6a
   2cb64:	4a77      	ldr	r2, [pc, #476]	; (2cd44 <download_thread+0x268>)
   2cb66:	f011 f998 	bl	3de9a <printk>
   2cb6a:	216a      	movs	r1, #106	; 0x6a
   2cb6c:	4875      	ldr	r0, [pc, #468]	; (2cd44 <download_thread+0x268>)
   2cb6e:	f011 f9e7 	bl	3df40 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   2cb72:	4b72      	ldr	r3, [pc, #456]	; (2cd3c <download_thread+0x260>)
   2cb74:	463a      	mov	r2, r7
   2cb76:	681b      	ldr	r3, [r3, #0]
   2cb78:	4641      	mov	r1, r8
   2cb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2cb7c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2cb7e:	469c      	mov	ip, r3
   2cb80:	2300      	movs	r3, #0
   2cb82:	4667      	mov	r7, ip
   2cb84:	47b8      	blx	r7
		if ((len == 0) || (len == -1)) {
   2cb86:	1e43      	subs	r3, r0, #1
   2cb88:	3303      	adds	r3, #3
   2cb8a:	4680      	mov	r8, r0
			if ((dl->offset > 0) && (dl->has_header)) {
   2cb8c:	682b      	ldr	r3, [r5, #0]
		if ((len == 0) || (len == -1)) {
   2cb8e:	d974      	bls.n	2cc7a <download_thread+0x19e>
			if ((dl->offset > 0) && (dl->has_header)) {
   2cb90:	b1db      	cbz	r3, 2cbca <download_thread+0xee>
   2cb92:	f241 0314 	movw	r3, #4116	; 0x1014
   2cb96:	5ce3      	ldrb	r3, [r4, r3]
   2cb98:	b1bb      	cbz	r3, 2cbca <download_thread+0xee>
				rc = fragment_evt_send(dl);
   2cb9a:	4620      	mov	r0, r4
   2cb9c:	f7ff fbda 	bl	2c354 <fragment_evt_send>
				if (rc) {
   2cba0:	b198      	cbz	r0, 2cbca <download_thread+0xee>
					LOG_INF("Fragment refused, download "
   2cba2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2cba6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   2cbaa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2cbae:	f043 0303 	orr.w	r3, r3, #3
   2cbb2:	f363 0207 	bfi	r2, r3, #0, #8
   2cbb6:	b293      	uxth	r3, r2
   2cbb8:	f36b 138f 	bfi	r3, fp, #6, #10
   2cbbc:	f8ad 3010 	strh.w	r3, [sp, #16]
			LOG_INF("Fragment refused, download stopped.");
   2cbc0:	4962      	ldr	r1, [pc, #392]	; (2cd4c <download_thread+0x270>)
   2cbc2:	b298      	uxth	r0, r3
   2cbc4:	f011 f9cd 	bl	3df62 <log_string_sync>
   2cbc8:	e795      	b.n	2caf6 <download_thread+0x1a>
			if (len == -1) {
   2cbca:	f504 5603 	add.w	r6, r4, #8384	; 0x20c0
   2cbce:	f1b8 3fff 	cmp.w	r8, #4294967295
   2cbd2:	f106 0620 	add.w	r6, r6, #32
   2cbd6:	d13b      	bne.n	2cc50 <download_thread+0x174>
				LOG_ERR("Error in recv(), errno %d", errno);
   2cbd8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2cbdc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   2cbe0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2cbe4:	f043 0301 	orr.w	r3, r3, #1
   2cbe8:	f363 0207 	bfi	r2, r3, #0, #8
   2cbec:	b293      	uxth	r3, r2
   2cbee:	f36b 138f 	bfi	r3, fp, #6, #10
   2cbf2:	f8ad 3014 	strh.w	r3, [sp, #20]
   2cbf6:	f011 fba0 	bl	3e33a <__errno>
   2cbfa:	4955      	ldr	r1, [pc, #340]	; (2cd50 <download_thread+0x274>)
   2cbfc:	6802      	ldr	r2, [r0, #0]
   2cbfe:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   2cc02:	f011 f9ae 	bl	3df62 <log_string_sync>
				rc = error_evt_send(dl, ENOTCONN);
   2cc06:	2180      	movs	r1, #128	; 0x80
				rc = error_evt_send(dl, ECONNRESET);
   2cc08:	4630      	mov	r0, r6
   2cc0a:	f013 fa96 	bl	4013a <error_evt_send.isra.1>
			if (rc) {
   2cc0e:	2800      	cmp	r0, #0
   2cc10:	f47f af71 	bne.w	2caf6 <download_thread+0x1a>
			reconnect(dl);
   2cc14:	4620      	mov	r0, r4
   2cc16:	f7ff ff3b 	bl	2ca90 <reconnect>
		dl->offset = 0;
   2cc1a:	2700      	movs	r7, #0
		dl->has_header = false;
   2cc1c:	46b8      	mov	r8, r7
   2cc1e:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
   2cc22:	3614      	adds	r6, #20
		dl->offset = 0;
   2cc24:	602f      	str	r7, [r5, #0]
		rc = get_request_send(dl);
   2cc26:	4620      	mov	r0, r4
		dl->has_header = false;
   2cc28:	f886 8000 	strb.w	r8, [r6]
		rc = get_request_send(dl);
   2cc2c:	f7ff fc40 	bl	2c4b0 <get_request_send>
		if (rc) {
   2cc30:	2800      	cmp	r0, #0
   2cc32:	f43f af67 	beq.w	2cb04 <download_thread+0x28>
			rc = error_evt_send(dl, ECONNRESET);
   2cc36:	f504 5003 	add.w	r0, r4, #8384	; 0x20c0
   2cc3a:	2168      	movs	r1, #104	; 0x68
   2cc3c:	3020      	adds	r0, #32
   2cc3e:	f013 fa7c 	bl	4013a <error_evt_send.isra.1>
			if (rc) {
   2cc42:	2800      	cmp	r0, #0
   2cc44:	f47f af57 	bne.w	2caf6 <download_thread+0x1a>
			reconnect(dl);
   2cc48:	4620      	mov	r0, r4
   2cc4a:	f7ff ff21 	bl	2ca90 <reconnect>
			goto send_again;
   2cc4e:	e7e9      	b.n	2cc24 <download_thread+0x148>
				LOG_WRN("Peer closed connection!");
   2cc50:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   2cc54:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2cc58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2cc5c:	f043 0302 	orr.w	r3, r3, #2
   2cc60:	f363 0207 	bfi	r2, r3, #0, #8
   2cc64:	b293      	uxth	r3, r2
   2cc66:	f36b 138f 	bfi	r3, fp, #6, #10
   2cc6a:	493a      	ldr	r1, [pc, #232]	; (2cd54 <download_thread+0x278>)
   2cc6c:	b298      	uxth	r0, r3
   2cc6e:	f8ad 3018 	strh.w	r3, [sp, #24]
   2cc72:	f011 f976 	bl	3df62 <log_string_sync>
				rc = error_evt_send(dl, ECONNRESET);
   2cc76:	2168      	movs	r1, #104	; 0x68
   2cc78:	e7c6      	b.n	2cc08 <download_thread+0x12c>
		dl->offset += len;
   2cc7a:	4403      	add	r3, r0
   2cc7c:	602b      	str	r3, [r5, #0]
		if (!dl->has_header) {
   2cc7e:	f241 0314 	movw	r3, #4116	; 0x1014
   2cc82:	5ce3      	ldrb	r3, [r4, r3]
   2cc84:	2b00      	cmp	r3, #0
   2cc86:	f040 80b9 	bne.w	2cdfc <download_thread+0x320>
	p = strstr(client->buf, "\r\n\r\n");
   2cc8a:	4933      	ldr	r1, [pc, #204]	; (2cd58 <download_thread+0x27c>)
   2cc8c:	4630      	mov	r0, r6
   2cc8e:	f013 feef 	bl	40a70 <strstr>
	if (!p) {
   2cc92:	4607      	mov	r7, r0
   2cc94:	2800      	cmp	r0, #0
   2cc96:	f43f af35 	beq.w	2cb04 <download_thread+0x28>
	hdr = p + strlen("\r\n\r\n") - client->buf;
   2cc9a:	482f      	ldr	r0, [pc, #188]	; (2cd58 <download_thread+0x27c>)
   2cc9c:	f7f0 fa42 	bl	1d124 <strlen>
   2cca0:	183b      	adds	r3, r7, r0
   2cca2:	1b9f      	subs	r7, r3, r6
	__ASSERT(hdr < sizeof(client->buf), "Buffer overflow");
   2cca4:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
	hdr = p + strlen("\r\n\r\n") - client->buf;
   2cca8:	930b      	str	r3, [sp, #44]	; 0x2c
	__ASSERT(hdr < sizeof(client->buf), "Buffer overflow");
   2ccaa:	d30e      	bcc.n	2ccca <download_thread+0x1ee>
   2ccac:	492b      	ldr	r1, [pc, #172]	; (2cd5c <download_thread+0x280>)
   2ccae:	f240 132d 	movw	r3, #301	; 0x12d
   2ccb2:	4a1f      	ldr	r2, [pc, #124]	; (2cd30 <download_thread+0x254>)
   2ccb4:	481f      	ldr	r0, [pc, #124]	; (2cd34 <download_thread+0x258>)
   2ccb6:	f011 f8f0 	bl	3de9a <printk>
   2ccba:	481f      	ldr	r0, [pc, #124]	; (2cd38 <download_thread+0x25c>)
   2ccbc:	f011 f8ed 	bl	3de9a <printk>
   2ccc0:	f240 112d 	movw	r1, #301	; 0x12d
   2ccc4:	481a      	ldr	r0, [pc, #104]	; (2cd30 <download_thread+0x254>)
   2ccc6:	f011 f93b 	bl	3df40 <assert_post_action>
	if (client->file_size == 0) {
   2ccca:	f241 0308 	movw	r3, #4104	; 0x1008
   2ccce:	58e3      	ldr	r3, [r4, r3]
   2ccd0:	2b00      	cmp	r3, #0
   2ccd2:	d153      	bne.n	2cd7c <download_thread+0x2a0>
		p = strstr(client->buf, "Content-Range: bytes");
   2ccd4:	4922      	ldr	r1, [pc, #136]	; (2cd60 <download_thread+0x284>)
   2ccd6:	4630      	mov	r0, r6
   2ccd8:	f013 feca 	bl	40a70 <strstr>
		if (!p) {
   2ccdc:	b990      	cbnz	r0, 2cd04 <download_thread+0x228>
			LOG_ERR("Server did not send "
   2ccde:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   2cce2:	f043 0301 	orr.w	r3, r3, #1
   2cce6:	f363 0a07 	bfi	sl, r3, #0, #8
   2ccea:	f36b 1a8f 	bfi	sl, fp, #6, #10
   2ccee:	4650      	mov	r0, sl
   2ccf0:	491c      	ldr	r1, [pc, #112]	; (2cd64 <download_thread+0x288>)
			LOG_ERR("Server did not send file size in response");
   2ccf2:	f011 f936 	bl	3df62 <log_string_sync>
				error_evt_send(dl, EBADMSG);
   2ccf6:	f504 5003 	add.w	r0, r4, #8384	; 0x20c0
   2ccfa:	214d      	movs	r1, #77	; 0x4d
   2ccfc:	3020      	adds	r0, #32
   2ccfe:	f013 fa1c 	bl	4013a <error_evt_send.isra.1>
				break;
   2cd02:	e6f8      	b.n	2caf6 <download_thread+0x1a>
		p = strstr(p, "/");
   2cd04:	4918      	ldr	r1, [pc, #96]	; (2cd68 <download_thread+0x28c>)
   2cd06:	f013 feb3 	bl	40a70 <strstr>
		if (!p) {
   2cd0a:	bb88      	cbnz	r0, 2cd70 <download_thread+0x294>
			LOG_ERR("Server did not send file size in response");
   2cd0c:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   2cd10:	f043 0301 	orr.w	r3, r3, #1
   2cd14:	f363 0907 	bfi	r9, r3, #0, #8
   2cd18:	f36b 198f 	bfi	r9, fp, #6, #10
   2cd1c:	4913      	ldr	r1, [pc, #76]	; (2cd6c <download_thread+0x290>)
   2cd1e:	4648      	mov	r0, r9
   2cd20:	e7e7      	b.n	2ccf2 <download_thread+0x216>
   2cd22:	bf00      	nop
   2cd24:	00041c94 	.word	0x00041c94
   2cd28:	00041c2c 	.word	0x00041c2c
   2cd2c:	000473d5 	.word	0x000473d5
   2cd30:	00047571 	.word	0x00047571
   2cd34:	00043278 	.word	0x00043278
   2cd38:	000473f2 	.word	0x000473f2
   2cd3c:	2002389c 	.word	0x2002389c
   2cd40:	000433f1 	.word	0x000433f1
   2cd44:	000433c1 	.word	0x000433c1
   2cd48:	00044db7 	.word	0x00044db7
   2cd4c:	00047404 	.word	0x00047404
   2cd50:	00047428 	.word	0x00047428
   2cd54:	00047442 	.word	0x00047442
   2cd58:	0004767d 	.word	0x0004767d
   2cd5c:	0004745a 	.word	0x0004745a
   2cd60:	00047474 	.word	0x00047474
   2cd64:	00047489 	.word	0x00047489
   2cd68:	000468c1 	.word	0x000468c1
   2cd6c:	000474b9 	.word	0x000474b9
		client->file_size = atoi(p + 1);
   2cd70:	3001      	adds	r0, #1
   2cd72:	f013 fc33 	bl	405dc <atoi>
   2cd76:	f241 0308 	movw	r3, #4104	; 0x1008
   2cd7a:	50e0      	str	r0, [r4, r3]
	p = strstr(client->buf, "Connection: close");
   2cd7c:	4958      	ldr	r1, [pc, #352]	; (2cee0 <download_thread+0x404>)
   2cd7e:	4630      	mov	r0, r6
   2cd80:	f013 fe76 	bl	40a70 <strstr>
	if (p) {
   2cd84:	b1b0      	cbz	r0, 2cdb4 <download_thread+0x2d8>
		LOG_WRN("Peer closed connection, will attempt to re-connect");
   2cd86:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2cd8a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   2cd8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2cd92:	f043 0302 	orr.w	r3, r3, #2
   2cd96:	f363 0207 	bfi	r2, r3, #0, #8
   2cd9a:	b293      	uxth	r3, r2
   2cd9c:	f36b 138f 	bfi	r3, fp, #6, #10
   2cda0:	b298      	uxth	r0, r3
   2cda2:	4950      	ldr	r1, [pc, #320]	; (2cee4 <download_thread+0x408>)
   2cda4:	f8ad 3008 	strh.w	r3, [sp, #8]
   2cda8:	f011 f8db 	bl	3df62 <log_string_sync>
		client->connection_close = true;
   2cdac:	f241 0315 	movw	r3, #4117	; 0x1015
   2cdb0:	2201      	movs	r2, #1
   2cdb2:	54e2      	strb	r2, [r4, r3]
	if (client->offset != hdr) {
   2cdb4:	682a      	ldr	r2, [r5, #0]
   2cdb6:	4297      	cmp	r7, r2
   2cdb8:	d062      	beq.n	2ce80 <download_thread+0x3a4>
		LOG_WRN("Copying %u payload bytes", client->offset - hdr);
   2cdba:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2cdbe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2cdc2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2cdc6:	f043 0302 	orr.w	r3, r3, #2
   2cdca:	f363 0107 	bfi	r1, r3, #0, #8
   2cdce:	b28b      	uxth	r3, r1
   2cdd0:	f36b 138f 	bfi	r3, fp, #6, #10
   2cdd4:	b298      	uxth	r0, r3
   2cdd6:	1bd2      	subs	r2, r2, r7
   2cdd8:	4943      	ldr	r1, [pc, #268]	; (2cee8 <download_thread+0x40c>)
   2cdda:	f8ad 300c 	strh.w	r3, [sp, #12]
   2cdde:	f011 f8c0 	bl	3df62 <log_string_sync>
		memcpy(client->buf, client->buf + hdr, client->offset - hdr);
   2cde2:	682a      	ldr	r2, [r5, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2cde4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2cde6:	1bd2      	subs	r2, r2, r7
   2cde8:	4630      	mov	r0, r6
   2cdea:	f013 fc17 	bl	4061c <memcpy>
		client->offset -= hdr;
   2cdee:	682b      	ldr	r3, [r5, #0]
   2cdf0:	1bdf      	subs	r7, r3, r7
   2cdf2:	602f      	str	r7, [r5, #0]
			dl->has_header = true;
   2cdf4:	2301      	movs	r3, #1
   2cdf6:	f241 0214 	movw	r2, #4116	; 0x1014
   2cdfa:	54a3      	strb	r3, [r4, r2]
		dl->progress += MIN(dl->offset, len);
   2cdfc:	f241 060c 	movw	r6, #4108	; 0x100c
		if ((dl->offset < dl->fragment_size) &&
   2ce00:	f241 0010 	movw	r0, #4112	; 0x1010
		dl->progress += MIN(dl->offset, len);
   2ce04:	6829      	ldr	r1, [r5, #0]
   2ce06:	59a2      	ldr	r2, [r4, r6]
   2ce08:	f241 0708 	movw	r7, #4104	; 0x1008
   2ce0c:	4541      	cmp	r1, r8
   2ce0e:	bf94      	ite	ls
   2ce10:	1852      	addls	r2, r2, r1
   2ce12:	4442      	addhi	r2, r8
		if ((dl->offset < dl->fragment_size) &&
   2ce14:	5820      	ldr	r0, [r4, r0]
		dl->progress += MIN(dl->offset, len);
   2ce16:	51a2      	str	r2, [r4, r6]
		if ((dl->offset < dl->fragment_size) &&
   2ce18:	4281      	cmp	r1, r0
   2ce1a:	59e3      	ldr	r3, [r4, r7]
   2ce1c:	d202      	bcs.n	2ce24 <download_thread+0x348>
   2ce1e:	429a      	cmp	r2, r3
   2ce20:	f47f ae70 	bne.w	2cb04 <download_thread+0x28>
		LOG_INF("Downloaded %u/%u bytes (%d%%)", dl->progress,
   2ce24:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   2ce28:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   2ce2c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
   2ce30:	f041 0103 	orr.w	r1, r1, #3
   2ce34:	f361 0007 	bfi	r0, r1, #0, #8
   2ce38:	b281      	uxth	r1, r0
   2ce3a:	f36b 118f 	bfi	r1, fp, #6, #10
   2ce3e:	f8ad 101c 	strh.w	r1, [sp, #28]
   2ce42:	2164      	movs	r1, #100	; 0x64
   2ce44:	4351      	muls	r1, r2
   2ce46:	fbb1 f1f3 	udiv	r1, r1, r3
   2ce4a:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   2ce4e:	9100      	str	r1, [sp, #0]
   2ce50:	4926      	ldr	r1, [pc, #152]	; (2ceec <download_thread+0x410>)
   2ce52:	f011 f886 	bl	3df62 <log_string_sync>
		rc = fragment_evt_send(dl);
   2ce56:	4620      	mov	r0, r4
   2ce58:	f7ff fa7c 	bl	2c354 <fragment_evt_send>
		if (rc) {
   2ce5c:	4680      	mov	r8, r0
   2ce5e:	b190      	cbz	r0, 2ce86 <download_thread+0x3aa>
			LOG_INF("Fragment refused, download stopped.");
   2ce60:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2ce64:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2ce68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2ce6c:	f043 0303 	orr.w	r3, r3, #3
   2ce70:	f363 0207 	bfi	r2, r3, #0, #8
   2ce74:	b293      	uxth	r3, r2
   2ce76:	f36b 138f 	bfi	r3, fp, #6, #10
   2ce7a:	f8ad 3020 	strh.w	r3, [sp, #32]
   2ce7e:	e69f      	b.n	2cbc0 <download_thread+0xe4>
		client->offset = 0;
   2ce80:	2300      	movs	r3, #0
   2ce82:	602b      	str	r3, [r5, #0]
			if (rc > 0) {
   2ce84:	e7b6      	b.n	2cdf4 <download_thread+0x318>
		if (dl->progress == dl->file_size) {
   2ce86:	59a2      	ldr	r2, [r4, r6]
   2ce88:	59e3      	ldr	r3, [r4, r7]
   2ce8a:	429a      	cmp	r2, r3
   2ce8c:	d11f      	bne.n	2cece <download_thread+0x3f2>
			LOG_INF("Download complete");
   2ce8e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   2ce92:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   2ce96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2ce9a:	f043 0303 	orr.w	r3, r3, #3
   2ce9e:	f363 0207 	bfi	r2, r3, #0, #8
   2cea2:	b293      	uxth	r3, r2
   2cea4:	f36b 138f 	bfi	r3, fp, #6, #10
   2cea8:	b298      	uxth	r0, r3
   2ceaa:	4911      	ldr	r1, [pc, #68]	; (2cef0 <download_thread+0x414>)
   2ceac:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   2ceb0:	f011 f857 	bl	3df62 <log_string_sync>
			const struct download_client_evt evt = {
   2ceb4:	2302      	movs	r3, #2
   2ceb6:	e9cd 880d 	strd	r8, r8, [sp, #52]	; 0x34
   2ceba:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
			dl->callback(&evt);
   2cebe:	f242 03e0 	movw	r3, #8416	; 0x20e0
			const struct download_client_evt evt = {
   2cec2:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
			dl->callback(&evt);
   2cec6:	58e3      	ldr	r3, [r4, r3]
   2cec8:	a80d      	add	r0, sp, #52	; 0x34
   2ceca:	4798      	blx	r3
			break;
   2cecc:	e613      	b.n	2caf6 <download_thread+0x1a>
		if (dl->connection_close) {
   2cece:	f241 0315 	movw	r3, #4117	; 0x1015
   2ced2:	5ce2      	ldrb	r2, [r4, r3]
   2ced4:	2a00      	cmp	r2, #0
   2ced6:	f43f aea0 	beq.w	2cc1a <download_thread+0x13e>
			dl->connection_close = false;
   2ceda:	54e0      	strb	r0, [r4, r3]
   2cedc:	e69a      	b.n	2cc14 <download_thread+0x138>
   2cede:	bf00      	nop
   2cee0:	000474e3 	.word	0x000474e3
   2cee4:	000474f5 	.word	0x000474f5
   2cee8:	00047528 	.word	0x00047528
   2ceec:	00047541 	.word	0x00047541
   2cef0:	0004755f 	.word	0x0004755f

0002cef4 <download_client_start>:

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   2cef4:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   2cef6:	4604      	mov	r4, r0
   2cef8:	b390      	cbz	r0, 2cf60 <download_client_start+0x6c>
   2cefa:	6803      	ldr	r3, [r0, #0]
   2cefc:	2b00      	cmp	r3, #0
   2cefe:	db2f      	blt.n	2cf60 <download_client_start+0x6c>
		return -EINVAL;
	}

	client->file = file;
   2cf00:	f241 031c 	movw	r3, #4124	; 0x101c
	client->file_size = 0;
	client->progress = from;
   2cf04:	f241 060c 	movw	r6, #4108	; 0x100c
	client->file = file;
   2cf08:	50c1      	str	r1, [r0, r3]
	client->file_size = 0;
   2cf0a:	2300      	movs	r3, #0
   2cf0c:	f241 0008 	movw	r0, #4104	; 0x1008
   2cf10:	5023      	str	r3, [r4, r0]
	client->progress = from;
   2cf12:	51a2      	str	r2, [r4, r6]

	client->offset = 0;
   2cf14:	f241 0204 	movw	r2, #4100	; 0x1004
   2cf18:	50a3      	str	r3, [r4, r2]
	client->has_header = false;
   2cf1a:	f241 0214 	movw	r2, #4116	; 0x1014

	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   2cf1e:	f04f 0500 	mov.w	r5, #0
	client->has_header = false;
   2cf22:	54a3      	strb	r3, [r4, r2]
	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   2cf24:	2303      	movs	r3, #3
   2cf26:	4a10      	ldr	r2, [pc, #64]	; (2cf68 <download_client_start+0x74>)
   2cf28:	f363 0507 	bfi	r5, r3, #0, #8
   2cf2c:	4b0f      	ldr	r3, [pc, #60]	; (2cf6c <download_client_start+0x78>)
   2cf2e:	4608      	mov	r0, r1
   2cf30:	1a9b      	subs	r3, r3, r2
   2cf32:	08db      	lsrs	r3, r3, #3
   2cf34:	f363 158f 	bfi	r5, r3, #6, #10
   2cf38:	f011 f825 	bl	3df86 <log_strdup>
   2cf3c:	59a3      	ldr	r3, [r4, r6]
   2cf3e:	4602      	mov	r2, r0
   2cf40:	490b      	ldr	r1, [pc, #44]	; (2cf70 <download_client_start+0x7c>)
   2cf42:	4628      	mov	r0, r5
   2cf44:	f011 f80d 	bl	3df62 <log_string_sync>
		client->progress);

	err = get_request_send(client);
   2cf48:	4620      	mov	r0, r4
   2cf4a:	f7ff fab1 	bl	2c4b0 <get_request_send>
	if (err) {
   2cf4e:	4605      	mov	r5, r0
   2cf50:	b920      	cbnz	r0, 2cf5c <download_client_start+0x68>
		return err;
	}

	/* Let the thread run */
	k_thread_resume(client->tid);
   2cf52:	f241 032c 	movw	r3, #4140	; 0x102c
   2cf56:	58e0      	ldr	r0, [r4, r3]
	z_impl_k_thread_resume(thread);
   2cf58:	f00d fbd6 	bl	3a708 <z_impl_k_thread_resume>

	return 0;
}
   2cf5c:	4628      	mov	r0, r5
   2cf5e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2cf60:	f06f 0515 	mvn.w	r5, #21
   2cf64:	e7fa      	b.n	2cf5c <download_client_start+0x68>
   2cf66:	bf00      	nop
   2cf68:	00041c2c 	.word	0x00041c2c
   2cf6c:	00041c94 	.word	0x00041c94
   2cf70:	000473c0 	.word	0x000473c0

0002cf74 <download_with_offset>:

	return 0;
}

static void download_with_offset(struct k_work *unused)
{
   2cf74:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int offset;
	int err = dfu_target_offset_get(&offset);
   2cf76:	a801      	add	r0, sp, #4
   2cf78:	f001 f854 	bl	2e024 <dfu_target_offset_get>

	err = download_client_start(&dlc, dlc.file, offset);
   2cf7c:	f241 031c 	movw	r3, #4124	; 0x101c
   2cf80:	4812      	ldr	r0, [pc, #72]	; (2cfcc <download_with_offset+0x58>)
   2cf82:	9a01      	ldr	r2, [sp, #4]
   2cf84:	58c1      	ldr	r1, [r0, r3]
   2cf86:	f7ff ffb5 	bl	2cef4 <download_client_start>

	LOG_INF("Downloading from offset: 0x%x", offset);
   2cf8a:	2303      	movs	r3, #3
	err = download_client_start(&dlc, dlc.file, offset);
   2cf8c:	4605      	mov	r5, r0
	LOG_INF("Downloading from offset: 0x%x", offset);
   2cf8e:	f04f 0000 	mov.w	r0, #0
   2cf92:	4c0f      	ldr	r4, [pc, #60]	; (2cfd0 <download_with_offset+0x5c>)
   2cf94:	f363 0007 	bfi	r0, r3, #0, #8
   2cf98:	4b0e      	ldr	r3, [pc, #56]	; (2cfd4 <download_with_offset+0x60>)
   2cf9a:	9a01      	ldr	r2, [sp, #4]
   2cf9c:	1ae4      	subs	r4, r4, r3
   2cf9e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2cfa2:	f364 108f 	bfi	r0, r4, #6, #10
   2cfa6:	490c      	ldr	r1, [pc, #48]	; (2cfd8 <download_with_offset+0x64>)
   2cfa8:	f010 ffdb 	bl	3df62 <log_string_sync>
	if (err != 0) {
   2cfac:	b15d      	cbz	r5, 2cfc6 <download_with_offset+0x52>
		LOG_ERR("%s failed with error %d", __func__, err);
   2cfae:	2301      	movs	r3, #1
   2cfb0:	f04f 0000 	mov.w	r0, #0
   2cfb4:	f363 0007 	bfi	r0, r3, #0, #8
   2cfb8:	f364 108f 	bfi	r0, r4, #6, #10
   2cfbc:	462b      	mov	r3, r5
   2cfbe:	4a07      	ldr	r2, [pc, #28]	; (2cfdc <download_with_offset+0x68>)
   2cfc0:	4907      	ldr	r1, [pc, #28]	; (2cfe0 <download_with_offset+0x6c>)
   2cfc2:	f010 ffce 	bl	3df62 <log_string_sync>
	}
}
   2cfc6:	b003      	add	sp, #12
   2cfc8:	bd30      	pop	{r4, r5, pc}
   2cfca:	bf00      	nop
   2cfcc:	20020898 	.word	0x20020898
   2cfd0:	00041ca4 	.word	0x00041ca4
   2cfd4:	00041c2c 	.word	0x00041c2c
   2cfd8:	000477ee 	.word	0x000477ee
   2cfdc:	000476f3 	.word	0x000476f3
   2cfe0:	0004780c 	.word	0x0004780c

0002cfe4 <send_evt>:
	const struct fota_download_evt evt = {
   2cfe4:	2300      	movs	r3, #0
{
   2cfe6:	b507      	push	{r0, r1, r2, lr}
	const struct fota_download_evt evt = {
   2cfe8:	e9cd 3300 	strd	r3, r3, [sp]
	callback(&evt);
   2cfec:	4b04      	ldr	r3, [pc, #16]	; (2d000 <send_evt+0x1c>)
	const struct fota_download_evt evt = {
   2cfee:	f88d 0000 	strb.w	r0, [sp]
	callback(&evt);
   2cff2:	681b      	ldr	r3, [r3, #0]
   2cff4:	4668      	mov	r0, sp
   2cff6:	4798      	blx	r3
}
   2cff8:	b003      	add	sp, #12
   2cffa:	f85d fb04 	ldr.w	pc, [sp], #4
   2cffe:	bf00      	nop
   2d000:	20024764 	.word	0x20024764

0002d004 <download_client_callback>:
{
   2d004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (event == NULL) {
   2d006:	4605      	mov	r5, r0
   2d008:	2800      	cmp	r0, #0
   2d00a:	f000 80d8 	beq.w	2d1be <download_client_callback+0x1ba>
	switch (event->id) {
   2d00e:	7803      	ldrb	r3, [r0, #0]
   2d010:	2b01      	cmp	r3, #1
   2d012:	f000 8090 	beq.w	2d136 <download_client_callback+0x132>
   2d016:	b11b      	cbz	r3, 2d020 <download_client_callback+0x1c>
   2d018:	2b02      	cmp	r3, #2
   2d01a:	d06a      	beq.n	2d0f2 <download_client_callback+0xee>
	return 0;
   2d01c:	2400      	movs	r4, #0
			socket_retries_left--;
   2d01e:	e02b      	b.n	2d078 <download_client_callback+0x74>
		if (first_fragment) {
   2d020:	4f68      	ldr	r7, [pc, #416]	; (2d1c4 <download_client_callback+0x1c0>)
   2d022:	783b      	ldrb	r3, [r7, #0]
   2d024:	2b00      	cmp	r3, #0
   2d026:	d04a      	beq.n	2d0be <download_client_callback+0xba>
			err = download_client_file_size_get(&dlc, &file_size);
   2d028:	4e67      	ldr	r6, [pc, #412]	; (2d1c8 <download_client_callback+0x1c4>)
   2d02a:	4868      	ldr	r0, [pc, #416]	; (2d1cc <download_client_callback+0x1c8>)
   2d02c:	4631      	mov	r1, r6
   2d02e:	f013 f893 	bl	40158 <download_client_file_size_get>
			if (err != 0) {
   2d032:	4604      	mov	r4, r0
   2d034:	b118      	cbz	r0, 2d03e <download_client_callback+0x3a>
			send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   2d036:	2004      	movs	r0, #4
   2d038:	f7ff ffd4 	bl	2cfe4 <send_evt>
			return err;
   2d03c:	e01c      	b.n	2d078 <download_client_callback+0x74>
			first_fragment = false;
   2d03e:	7038      	strb	r0, [r7, #0]
			int img_type = dfu_target_img_type(event->fragment.buf,
   2d040:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   2d044:	f000 ff90 	bl	2df68 <dfu_target_img_type>
			err = dfu_target_init(img_type, file_size,
   2d048:	4a61      	ldr	r2, [pc, #388]	; (2d1d0 <download_client_callback+0x1cc>)
   2d04a:	6831      	ldr	r1, [r6, #0]
   2d04c:	f000 ffb4 	bl	2dfb8 <dfu_target_init>
			if ((err < 0) && (err != -EBUSY)) {
   2d050:	1e04      	subs	r4, r0, #0
   2d052:	da14      	bge.n	2d07e <download_client_callback+0x7a>
   2d054:	f114 0f10 	cmn.w	r4, #16
   2d058:	d011      	beq.n	2d07e <download_client_callback+0x7a>
				LOG_ERR("dfu_target_init error %d", err);
   2d05a:	2301      	movs	r3, #1
   2d05c:	f04f 0000 	mov.w	r0, #0
   2d060:	4a5c      	ldr	r2, [pc, #368]	; (2d1d4 <download_client_callback+0x1d0>)
   2d062:	f363 0007 	bfi	r0, r3, #0, #8
   2d066:	4b5c      	ldr	r3, [pc, #368]	; (2d1d8 <download_client_callback+0x1d4>)
   2d068:	495c      	ldr	r1, [pc, #368]	; (2d1dc <download_client_callback+0x1d8>)
   2d06a:	1a9b      	subs	r3, r3, r2
   2d06c:	08db      	lsrs	r3, r3, #3
   2d06e:	f363 108f 	bfi	r0, r3, #6, #10
   2d072:	4622      	mov	r2, r4
   2d074:	f010 ff75 	bl	3df62 <log_string_sync>
}
   2d078:	4620      	mov	r0, r4
   2d07a:	b003      	add	sp, #12
   2d07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = dfu_target_offset_get(&offset);
   2d07e:	a801      	add	r0, sp, #4
   2d080:	f000 ffd0 	bl	2e024 <dfu_target_offset_get>
			if (err != 0) {
   2d084:	b110      	cbz	r0, 2d08c <download_client_callback+0x88>
				send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   2d086:	2004      	movs	r0, #4
   2d088:	f7ff ffac 	bl	2cfe4 <send_evt>
			if (offset != 0) {
   2d08c:	9b01      	ldr	r3, [sp, #4]
   2d08e:	b1b3      	cbz	r3, 2d0be <download_client_callback+0xba>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2d090:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2d094:	4952      	ldr	r1, [pc, #328]	; (2d1e0 <download_client_callback+0x1dc>)
   2d096:	4853      	ldr	r0, [pc, #332]	; (2d1e4 <download_client_callback+0x1e0>)
   2d098:	f00d fb8c 	bl	3a7b4 <k_delayed_work_submit_to_queue>
				LOG_INF("Refuse fragment, restart with offset");
   2d09c:	2303      	movs	r3, #3
   2d09e:	f04f 0000 	mov.w	r0, #0
   2d0a2:	4a4c      	ldr	r2, [pc, #304]	; (2d1d4 <download_client_callback+0x1d0>)
   2d0a4:	f363 0007 	bfi	r0, r3, #0, #8
   2d0a8:	4b4b      	ldr	r3, [pc, #300]	; (2d1d8 <download_client_callback+0x1d4>)
   2d0aa:	494f      	ldr	r1, [pc, #316]	; (2d1e8 <download_client_callback+0x1e4>)
   2d0ac:	1a9b      	subs	r3, r3, r2
   2d0ae:	08db      	lsrs	r3, r3, #3
   2d0b0:	f363 108f 	bfi	r0, r3, #6, #10
   2d0b4:	f010 ff55 	bl	3df62 <log_string_sync>
				return -1;
   2d0b8:	f04f 34ff 	mov.w	r4, #4294967295
   2d0bc:	e7dc      	b.n	2d078 <download_client_callback+0x74>
		err = dfu_target_write(event->fragment.buf,
   2d0be:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   2d0c2:	f000 ffb9 	bl	2e038 <dfu_target_write>
		if (err != 0) {
   2d0c6:	4604      	mov	r4, r0
   2d0c8:	2800      	cmp	r0, #0
   2d0ca:	d0d5      	beq.n	2d078 <download_client_callback+0x74>
			LOG_ERR("dfu_target_write error %d", err);
   2d0cc:	2301      	movs	r3, #1
   2d0ce:	f04f 0000 	mov.w	r0, #0
   2d0d2:	4a40      	ldr	r2, [pc, #256]	; (2d1d4 <download_client_callback+0x1d0>)
   2d0d4:	f363 0007 	bfi	r0, r3, #0, #8
   2d0d8:	4b3f      	ldr	r3, [pc, #252]	; (2d1d8 <download_client_callback+0x1d4>)
   2d0da:	4944      	ldr	r1, [pc, #272]	; (2d1ec <download_client_callback+0x1e8>)
   2d0dc:	1a9b      	subs	r3, r3, r2
   2d0de:	08db      	lsrs	r3, r3, #3
   2d0e0:	f363 108f 	bfi	r0, r3, #6, #10
   2d0e4:	4622      	mov	r2, r4
   2d0e6:	f010 ff3c 	bl	3df62 <log_string_sync>
			(void) download_client_disconnect(&dlc);
   2d0ea:	4838      	ldr	r0, [pc, #224]	; (2d1cc <download_client_callback+0x1c8>)
   2d0ec:	f7ff fca2 	bl	2ca34 <download_client_disconnect>
   2d0f0:	e7a1      	b.n	2d036 <download_client_callback+0x32>
		err = dfu_target_done(true);
   2d0f2:	2001      	movs	r0, #1
   2d0f4:	f000 ffac 	bl	2e050 <dfu_target_done>
		if (err != 0) {
   2d0f8:	4604      	mov	r4, r0
   2d0fa:	b178      	cbz	r0, 2d11c <download_client_callback+0x118>
			LOG_ERR("dfu_target_done error: %d", err);
   2d0fc:	2301      	movs	r3, #1
   2d0fe:	f04f 0000 	mov.w	r0, #0
   2d102:	4a34      	ldr	r2, [pc, #208]	; (2d1d4 <download_client_callback+0x1d0>)
   2d104:	f363 0007 	bfi	r0, r3, #0, #8
   2d108:	4b33      	ldr	r3, [pc, #204]	; (2d1d8 <download_client_callback+0x1d4>)
   2d10a:	4939      	ldr	r1, [pc, #228]	; (2d1f0 <download_client_callback+0x1ec>)
   2d10c:	1a9b      	subs	r3, r3, r2
   2d10e:	08db      	lsrs	r3, r3, #3
   2d110:	f363 108f 	bfi	r0, r3, #6, #10
   2d114:	4622      	mov	r2, r4
   2d116:	f010 ff24 	bl	3df62 <log_string_sync>
			send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   2d11a:	e78c      	b.n	2d036 <download_client_callback+0x32>
		err = download_client_disconnect(&dlc);
   2d11c:	482b      	ldr	r0, [pc, #172]	; (2d1cc <download_client_callback+0x1c8>)
   2d11e:	f7ff fc89 	bl	2ca34 <download_client_disconnect>
		if (err != 0) {
   2d122:	4604      	mov	r4, r0
   2d124:	2800      	cmp	r0, #0
   2d126:	d186      	bne.n	2d036 <download_client_callback+0x32>
		send_evt(FOTA_DOWNLOAD_EVT_FINISHED);
   2d128:	2001      	movs	r0, #1
   2d12a:	f7ff ff5b 	bl	2cfe4 <send_evt>
		first_fragment = true;
   2d12e:	2201      	movs	r2, #1
   2d130:	4b24      	ldr	r3, [pc, #144]	; (2d1c4 <download_client_callback+0x1c0>)
   2d132:	701a      	strb	r2, [r3, #0]
		break;
   2d134:	e7a0      	b.n	2d078 <download_client_callback+0x74>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   2d136:	4e2f      	ldr	r6, [pc, #188]	; (2d1f4 <download_client_callback+0x1f0>)
   2d138:	4c27      	ldr	r4, [pc, #156]	; (2d1d8 <download_client_callback+0x1d4>)
   2d13a:	6832      	ldr	r2, [r6, #0]
   2d13c:	4f25      	ldr	r7, [pc, #148]	; (2d1d4 <download_client_callback+0x1d0>)
   2d13e:	b1aa      	cbz	r2, 2d16c <download_client_callback+0x168>
   2d140:	6843      	ldr	r3, [r0, #4]
   2d142:	f113 0f80 	cmn.w	r3, #128	; 0x80
   2d146:	d001      	beq.n	2d14c <download_client_callback+0x148>
   2d148:	3368      	adds	r3, #104	; 0x68
   2d14a:	d10f      	bne.n	2d16c <download_client_callback+0x168>
			LOG_WRN("Download socket error. %d retries left...",
   2d14c:	2302      	movs	r3, #2
   2d14e:	f04f 0000 	mov.w	r0, #0
   2d152:	1be4      	subs	r4, r4, r7
   2d154:	f363 0007 	bfi	r0, r3, #0, #8
   2d158:	08e4      	lsrs	r4, r4, #3
   2d15a:	f364 108f 	bfi	r0, r4, #6, #10
   2d15e:	4926      	ldr	r1, [pc, #152]	; (2d1f8 <download_client_callback+0x1f4>)
   2d160:	f010 feff 	bl	3df62 <log_string_sync>
			socket_retries_left--;
   2d164:	6833      	ldr	r3, [r6, #0]
   2d166:	3b01      	subs	r3, #1
   2d168:	6033      	str	r3, [r6, #0]
   2d16a:	e757      	b.n	2d01c <download_client_callback+0x18>
			download_client_disconnect(&dlc);
   2d16c:	4817      	ldr	r0, [pc, #92]	; (2d1cc <download_client_callback+0x1c8>)
   2d16e:	f7ff fc61 	bl	2ca34 <download_client_disconnect>
			LOG_ERR("Download client error");
   2d172:	2301      	movs	r3, #1
   2d174:	f04f 0000 	mov.w	r0, #0
   2d178:	1be4      	subs	r4, r4, r7
   2d17a:	f363 0007 	bfi	r0, r3, #0, #8
   2d17e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2d182:	f364 108f 	bfi	r0, r4, #6, #10
   2d186:	491d      	ldr	r1, [pc, #116]	; (2d1fc <download_client_callback+0x1f8>)
   2d188:	f010 feeb 	bl	3df62 <log_string_sync>
			err = dfu_target_done(false);
   2d18c:	2000      	movs	r0, #0
   2d18e:	f000 ff5f 	bl	2e050 <dfu_target_done>
			if (err == -EACCES) {
   2d192:	f110 0f0d 	cmn.w	r0, #13
   2d196:	d00a      	beq.n	2d1ae <download_client_callback+0x1aa>
			} else if (err != 0) {
   2d198:	b148      	cbz	r0, 2d1ae <download_client_callback+0x1aa>
				LOG_ERR("Unable to deinitialze resources "
   2d19a:	f04f 0000 	mov.w	r0, #0
   2d19e:	2301      	movs	r3, #1
   2d1a0:	f363 0007 	bfi	r0, r3, #0, #8
   2d1a4:	f364 108f 	bfi	r0, r4, #6, #10
   2d1a8:	4915      	ldr	r1, [pc, #84]	; (2d200 <download_client_callback+0x1fc>)
   2d1aa:	f010 feda 	bl	3df62 <log_string_sync>
			first_fragment = true;
   2d1ae:	2201      	movs	r2, #1
   2d1b0:	4b04      	ldr	r3, [pc, #16]	; (2d1c4 <download_client_callback+0x1c0>)
			send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   2d1b2:	2004      	movs	r0, #4
			first_fragment = true;
   2d1b4:	701a      	strb	r2, [r3, #0]
			send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   2d1b6:	f7ff ff15 	bl	2cfe4 <send_evt>
			return event->error;
   2d1ba:	686c      	ldr	r4, [r5, #4]
   2d1bc:	e75c      	b.n	2d078 <download_client_callback+0x74>
		return -EINVAL;
   2d1be:	f06f 0415 	mvn.w	r4, #21
   2d1c2:	e759      	b.n	2d078 <download_client_callback+0x74>
   2d1c4:	200322d5 	.word	0x200322d5
   2d1c8:	20024788 	.word	0x20024788
   2d1cc:	20020898 	.word	0x20020898
   2d1d0:	0004016f 	.word	0x0004016f
   2d1d4:	00041c2c 	.word	0x00041c2c
   2d1d8:	00041ca4 	.word	0x00041ca4
   2d1dc:	00047708 	.word	0x00047708
   2d1e0:	20024768 	.word	0x20024768
   2d1e4:	200292b4 	.word	0x200292b4
   2d1e8:	00047721 	.word	0x00047721
   2d1ec:	00047746 	.word	0x00047746
   2d1f0:	00047760 	.word	0x00047760
   2d1f4:	2002478c 	.word	0x2002478c
   2d1f8:	0004777a 	.word	0x0004777a
   2d1fc:	000477a4 	.word	0x000477a4
   2d200:	000477ba 	.word	0x000477ba

0002d204 <fota_download_start>:

int fota_download_start(const char *host, const char *file, int sec_tag)
{
	int err = -1;

	struct download_client_cfg config = {
   2d204:	2300      	movs	r3, #0
{
   2d206:	b530      	push	{r4, r5, lr}
   2d208:	b085      	sub	sp, #20
   2d20a:	460d      	mov	r5, r1
	struct download_client_cfg config = {
   2d20c:	9301      	str	r3, [sp, #4]
   2d20e:	e9cd 2302 	strd	r2, r3, [sp, #8]
		.sec_tag = sec_tag,
	};

	if (host == NULL || file == NULL || callback == NULL) {
   2d212:	4601      	mov	r1, r0
   2d214:	b1c8      	cbz	r0, 2d24a <fota_download_start+0x46>
   2d216:	b1c5      	cbz	r5, 2d24a <fota_download_start+0x46>
   2d218:	4b0d      	ldr	r3, [pc, #52]	; (2d250 <fota_download_start+0x4c>)
   2d21a:	681b      	ldr	r3, [r3, #0]
   2d21c:	b1ab      	cbz	r3, 2d24a <fota_download_start+0x46>
		return -EINVAL;
	}

	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   2d21e:	2202      	movs	r2, #2
   2d220:	4b0c      	ldr	r3, [pc, #48]	; (2d254 <fota_download_start+0x50>)
		LOG_INF("B1 update, selected file:\n%s", update);
		file = update;
	}
#endif /* PM_S1_ADDRESS */

	err = download_client_connect(&dlc, host, &config);
   2d222:	480d      	ldr	r0, [pc, #52]	; (2d258 <fota_download_start+0x54>)
	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   2d224:	601a      	str	r2, [r3, #0]
	err = download_client_connect(&dlc, host, &config);
   2d226:	aa01      	add	r2, sp, #4
   2d228:	f7ff fa36 	bl	2c698 <download_client_connect>
	if (err != 0) {
   2d22c:	4604      	mov	r4, r0
   2d22e:	b948      	cbnz	r0, 2d244 <fota_download_start+0x40>
		return err;
	}

	err = download_client_start(&dlc, file, 0);
   2d230:	4602      	mov	r2, r0
   2d232:	4629      	mov	r1, r5
   2d234:	4808      	ldr	r0, [pc, #32]	; (2d258 <fota_download_start+0x54>)
   2d236:	f7ff fe5d 	bl	2cef4 <download_client_start>
	if (err != 0) {
   2d23a:	4604      	mov	r4, r0
   2d23c:	b110      	cbz	r0, 2d244 <fota_download_start+0x40>
		download_client_disconnect(&dlc);
   2d23e:	4806      	ldr	r0, [pc, #24]	; (2d258 <fota_download_start+0x54>)
   2d240:	f7ff fbf8 	bl	2ca34 <download_client_disconnect>
		return err;
	}

	return 0;
}
   2d244:	4620      	mov	r0, r4
   2d246:	b005      	add	sp, #20
   2d248:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2d24a:	f06f 0415 	mvn.w	r4, #21
   2d24e:	e7f9      	b.n	2d244 <fota_download_start+0x40>
   2d250:	20024764 	.word	0x20024764
   2d254:	2002478c 	.word	0x2002478c
   2d258:	20020898 	.word	0x20020898

0002d25c <fota_download_init>:

int fota_download_init(fota_download_callback_t client_callback)
{
   2d25c:	b508      	push	{r3, lr}
	if (client_callback == NULL) {
   2d25e:	b158      	cbz	r0, 2d278 <fota_download_init+0x1c>
		return -EINVAL;
	}

	callback = client_callback;
   2d260:	4b07      	ldr	r3, [pc, #28]	; (2d280 <fota_download_init+0x24>)

	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   2d262:	4908      	ldr	r1, [pc, #32]	; (2d284 <fota_download_init+0x28>)
	callback = client_callback;
   2d264:	6018      	str	r0, [r3, #0]
	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   2d266:	4808      	ldr	r0, [pc, #32]	; (2d288 <fota_download_init+0x2c>)
   2d268:	f013 f946 	bl	404f8 <k_delayed_work_init>
	if (err != 0) {
		return err;
	}

	return 0;
}
   2d26c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	int err = download_client_init(&dlc, download_client_callback);
   2d270:	4906      	ldr	r1, [pc, #24]	; (2d28c <fota_download_init+0x30>)
   2d272:	4807      	ldr	r0, [pc, #28]	; (2d290 <fota_download_init+0x34>)
   2d274:	f7ff b9e8 	b.w	2c648 <download_client_init>
}
   2d278:	f06f 0015 	mvn.w	r0, #21
   2d27c:	bd08      	pop	{r3, pc}
   2d27e:	bf00      	nop
   2d280:	20024764 	.word	0x20024764
   2d284:	0002cf75 	.word	0x0002cf75
   2d288:	20024768 	.word	0x20024768
   2d28c:	0002d005 	.word	0x0002d005
   2d290:	20020898 	.word	0x20020898

0002d294 <construct_topic>:
 */
#define TOPIC_TEMPLATE "$aws/things/%s/jobs/%s%s%s%s"
static int construct_topic(const u8_t *client_id, const u8_t *job_id,
			   const struct topic_conf *conf, u8_t *out_buf,
			   struct mqtt_topic *topic, bool remove_suffix)
{
   2d294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2d298:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   2d29a:	4688      	mov	r8, r1
   2d29c:	4615      	mov	r5, r2
   2d29e:	461f      	mov	r7, r3
	if (client_id == NULL || job_id == NULL || conf == NULL ||
   2d2a0:	4681      	mov	r9, r0
   2d2a2:	2800      	cmp	r0, #0
   2d2a4:	d05d      	beq.n	2d362 <construct_topic+0xce>
   2d2a6:	2900      	cmp	r1, #0
   2d2a8:	d05b      	beq.n	2d362 <construct_topic+0xce>
   2d2aa:	6853      	ldr	r3, [r2, #4]
   2d2ac:	2b00      	cmp	r3, #0
   2d2ae:	d058      	beq.n	2d362 <construct_topic+0xce>
	    conf->name == NULL || conf->suffix == NULL ||
   2d2b0:	6894      	ldr	r4, [r2, #8]
   2d2b2:	2c00      	cmp	r4, #0
   2d2b4:	d055      	beq.n	2d362 <construct_topic+0xce>
   2d2b6:	2f00      	cmp	r7, #0
   2d2b8:	d053      	beq.n	2d362 <construct_topic+0xce>
	    out_buf == NULL || topic == NULL) {
		return -EINVAL;
	}

	const char *suffix = remove_suffix  ? "" : conf->suffix;
   2d2ba:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   2d2be:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 2d380 <construct_topic+0xec>
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   2d2c2:	4608      	mov	r0, r1
	const char *suffix = remove_suffix  ? "" : conf->suffix;
   2d2c4:	2b00      	cmp	r3, #0
   2d2c6:	bf18      	it	ne
   2d2c8:	4654      	movne	r4, sl
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   2d2ca:	f7ef ff2b 	bl	1d124 <strlen>
   2d2ce:	4a26      	ldr	r2, [pc, #152]	; (2d368 <construct_topic+0xd4>)
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   2d2d0:	686b      	ldr	r3, [r5, #4]
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   2d2d2:	2800      	cmp	r0, #0
   2d2d4:	bf14      	ite	ne
   2d2d6:	4610      	movne	r0, r2
   2d2d8:	4650      	moveq	r0, sl
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   2d2da:	9403      	str	r4, [sp, #12]
   2d2dc:	e9cd 0301 	strd	r0, r3, [sp, #4]
   2d2e0:	f8cd 8000 	str.w	r8, [sp]
   2d2e4:	464b      	mov	r3, r9
   2d2e6:	4a21      	ldr	r2, [pc, #132]	; (2d36c <construct_topic+0xd8>)
   2d2e8:	2195      	movs	r1, #149	; 0x95
   2d2ea:	4638      	mov	r0, r7
   2d2ec:	f00e ff74 	bl	3c1d8 <sniprintf>
			client_id, job_id, slash_after_job_id, conf->name,
			suffix);

	if (ret >= AWS_JOBS_TOPIC_MAX_LEN) {
   2d2f0:	2894      	cmp	r0, #148	; 0x94
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   2d2f2:	4604      	mov	r4, r0
	if (ret >= AWS_JOBS_TOPIC_MAX_LEN) {
   2d2f4:	dd18      	ble.n	2d328 <construct_topic+0x94>
		LOG_ERR("Unable to fit formated string into to allocate "
   2d2f6:	2301      	movs	r3, #1
   2d2f8:	f04f 0400 	mov.w	r4, #0
   2d2fc:	4a1c      	ldr	r2, [pc, #112]	; (2d370 <construct_topic+0xdc>)
   2d2fe:	f363 0407 	bfi	r4, r3, #0, #8
   2d302:	4b1c      	ldr	r3, [pc, #112]	; (2d374 <construct_topic+0xe0>)
   2d304:	6868      	ldr	r0, [r5, #4]
   2d306:	1a9b      	subs	r3, r3, r2
   2d308:	08db      	lsrs	r3, r3, #3
   2d30a:	f363 148f 	bfi	r4, r3, #6, #10
   2d30e:	f010 fe3a 	bl	3df86 <log_strdup>
   2d312:	4919      	ldr	r1, [pc, #100]	; (2d378 <construct_topic+0xe4>)
   2d314:	4602      	mov	r2, r0
   2d316:	4620      	mov	r0, r4
   2d318:	f010 fe23 	bl	3df62 <log_string_sync>
			"memory for %s", log_strdup(conf->name));
		return -ENOMEM;
   2d31c:	f06f 040b 	mvn.w	r4, #11

	topic->topic.size = ret;
	topic->topic.utf8 = out_buf;
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
	return 0;
}
   2d320:	4620      	mov	r0, r4
   2d322:	b004      	add	sp, #16
   2d324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (ret < 0) {
   2d328:	2800      	cmp	r0, #0
   2d32a:	da14      	bge.n	2d356 <construct_topic+0xc2>
		LOG_ERR("Output error for %s was encountered with return value "
   2d32c:	2301      	movs	r3, #1
   2d32e:	f04f 0600 	mov.w	r6, #0
   2d332:	4a0f      	ldr	r2, [pc, #60]	; (2d370 <construct_topic+0xdc>)
   2d334:	f363 0607 	bfi	r6, r3, #0, #8
   2d338:	4b0e      	ldr	r3, [pc, #56]	; (2d374 <construct_topic+0xe0>)
   2d33a:	6868      	ldr	r0, [r5, #4]
   2d33c:	1a9b      	subs	r3, r3, r2
   2d33e:	08db      	lsrs	r3, r3, #3
   2d340:	f363 168f 	bfi	r6, r3, #6, #10
   2d344:	f010 fe1f 	bl	3df86 <log_strdup>
   2d348:	4623      	mov	r3, r4
   2d34a:	4602      	mov	r2, r0
   2d34c:	490b      	ldr	r1, [pc, #44]	; (2d37c <construct_topic+0xe8>)
   2d34e:	4630      	mov	r0, r6
   2d350:	f010 fe07 	bl	3df62 <log_string_sync>
		return ret;
   2d354:	e7e4      	b.n	2d320 <construct_topic+0x8c>
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2d356:	2301      	movs	r3, #1
	topic->topic.utf8 = out_buf;
   2d358:	e9c6 7000 	strd	r7, r0, [r6]
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2d35c:	7233      	strb	r3, [r6, #8]
	return 0;
   2d35e:	2400      	movs	r4, #0
   2d360:	e7de      	b.n	2d320 <construct_topic+0x8c>
		return -EINVAL;
   2d362:	f06f 0415 	mvn.w	r4, #21
   2d366:	e7db      	b.n	2d320 <construct_topic+0x8c>
   2d368:	000468c1 	.word	0x000468c1
   2d36c:	000478e7 	.word	0x000478e7
   2d370:	00041c2c 	.word	0x00041c2c
   2d374:	00041c54 	.word	0x00041c54
   2d378:	00047904 	.word	0x00047904
   2d37c:	00047941 	.word	0x00047941
   2d380:	00044d14 	.word	0x00044d14

0002d384 <reg_topic>:

static int reg_topic(struct mqtt_client *const client, u8_t *topic_buf,
		     struct topic_conf const *conf, const u8_t *job_id,
		     bool subscribe)
{
   2d384:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d386:	b089      	sub	sp, #36	; 0x24
   2d388:	468c      	mov	ip, r1
   2d38a:	4617      	mov	r7, r2
   2d38c:	4619      	mov	r1, r3
   2d38e:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
	if (client == NULL) {
   2d392:	4604      	mov	r4, r0
   2d394:	2800      	cmp	r0, #0
   2d396:	d036      	beq.n	2d406 <reg_topic+0x82>
		return -EINVAL;
	}

	struct mqtt_topic topic;
	int err = construct_topic(client->client_id.utf8, job_id, conf,
   2d398:	2300      	movs	r3, #0
   2d39a:	ad05      	add	r5, sp, #20
   2d39c:	9301      	str	r3, [sp, #4]
   2d39e:	9500      	str	r5, [sp, #0]
   2d3a0:	4663      	mov	r3, ip
   2d3a2:	6c40      	ldr	r0, [r0, #68]	; 0x44
   2d3a4:	f7ff ff76 	bl	2d294 <construct_topic>
				  topic_buf, &topic, false);

	const struct mqtt_subscription_list subscription_list = {
   2d3a8:	2301      	movs	r3, #1
   2d3aa:	f8ad 3010 	strh.w	r3, [sp, #16]
   2d3ae:	683b      	ldr	r3, [r7, #0]
   2d3b0:	9503      	str	r5, [sp, #12]
   2d3b2:	f8ad 3012 	strh.w	r3, [sp, #18]
		.list = &topic,
		.list_count = 1,
		.message_id = conf->msg_id
	};

	if (err) {
   2d3b6:	b9c0      	cbnz	r0, 2d3ea <reg_topic+0x66>
		return err;
	}

	if (subscribe) {
   2d3b8:	4a14      	ldr	r2, [pc, #80]	; (2d40c <reg_topic+0x88>)
   2d3ba:	4b15      	ldr	r3, [pc, #84]	; (2d410 <reg_topic+0x8c>)
		LOG_INF("Subscribe: %s", log_strdup(topic.topic.utf8));
   2d3bc:	f04f 0500 	mov.w	r5, #0
   2d3c0:	1a9b      	subs	r3, r3, r2
   2d3c2:	2203      	movs	r2, #3
   2d3c4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   2d3c8:	f362 0507 	bfi	r5, r2, #0, #8
   2d3cc:	9805      	ldr	r0, [sp, #20]
   2d3ce:	f363 158f 	bfi	r5, r3, #6, #10
	if (subscribe) {
   2d3d2:	b166      	cbz	r6, 2d3ee <reg_topic+0x6a>
		LOG_INF("Subscribe: %s", log_strdup(topic.topic.utf8));
   2d3d4:	f010 fdd7 	bl	3df86 <log_strdup>
   2d3d8:	490e      	ldr	r1, [pc, #56]	; (2d414 <reg_topic+0x90>)
   2d3da:	4602      	mov	r2, r0
   2d3dc:	4628      	mov	r0, r5
   2d3de:	f010 fdc0 	bl	3df62 <log_string_sync>
		return mqtt_subscribe(client, &subscription_list);
   2d3e2:	a903      	add	r1, sp, #12
   2d3e4:	4620      	mov	r0, r4
   2d3e6:	f011 fbe1 	bl	3ebac <mqtt_subscribe>
	}

	LOG_INF("Unsubscribe: %s", log_strdup(topic.topic.utf8));
	return mqtt_unsubscribe(client, &subscription_list);
}
   2d3ea:	b009      	add	sp, #36	; 0x24
   2d3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("Unsubscribe: %s", log_strdup(topic.topic.utf8));
   2d3ee:	f010 fdca 	bl	3df86 <log_strdup>
   2d3f2:	4909      	ldr	r1, [pc, #36]	; (2d418 <reg_topic+0x94>)
   2d3f4:	4602      	mov	r2, r0
   2d3f6:	4628      	mov	r0, r5
   2d3f8:	f010 fdb3 	bl	3df62 <log_string_sync>
	return mqtt_unsubscribe(client, &subscription_list);
   2d3fc:	a903      	add	r1, sp, #12
   2d3fe:	4620      	mov	r0, r4
   2d400:	f011 fbfb 	bl	3ebfa <mqtt_unsubscribe>
   2d404:	e7f1      	b.n	2d3ea <reg_topic+0x66>
		return -EINVAL;
   2d406:	f06f 0015 	mvn.w	r0, #21
   2d40a:	e7ee      	b.n	2d3ea <reg_topic+0x66>
   2d40c:	00041c2c 	.word	0x00041c2c
   2d410:	00041c54 	.word	0x00041c54
   2d414:	0004799f 	.word	0x0004799f
   2d418:	000479ad 	.word	0x000479ad

0002d41c <publish>:
}

static int publish(struct mqtt_client *const client, const u8_t *job_id,
		   const struct topic_conf *conf, u8_t *payload_data,
		   size_t payload_data_len, u8_t *topic_buf)
{
   2d41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d420:	461f      	mov	r7, r3
	struct mqtt_topic topic;

	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   2d422:	2301      	movs	r3, #1
{
   2d424:	b08c      	sub	sp, #48	; 0x30
	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   2d426:	ad03      	add	r5, sp, #12
   2d428:	9301      	str	r3, [sp, #4]
   2d42a:	9500      	str	r5, [sp, #0]
{
   2d42c:	4606      	mov	r6, r0
	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   2d42e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2d430:	6c40      	ldr	r0, [r0, #68]	; 0x44
   2d432:	f7ff ff2f 	bl	2d294 <construct_topic>
				  topic_buf, &topic, true);

	if (ret) {
   2d436:	2800      	cmp	r0, #0
   2d438:	d138      	bne.n	2d4ac <publish+0x90>
		return ret;
	}

	LOG_INF("Publish topic: %s", log_strdup(topic.topic.utf8));
   2d43a:	2303      	movs	r3, #3
   2d43c:	f04f 0800 	mov.w	r8, #0
   2d440:	4c1c      	ldr	r4, [pc, #112]	; (2d4b4 <publish+0x98>)
   2d442:	f363 0807 	bfi	r8, r3, #0, #8
   2d446:	4b1c      	ldr	r3, [pc, #112]	; (2d4b8 <publish+0x9c>)
   2d448:	9803      	ldr	r0, [sp, #12]
   2d44a:	1ae4      	subs	r4, r4, r3
   2d44c:	f010 fd9b 	bl	3df86 <log_strdup>
   2d450:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2d454:	f364 188f 	bfi	r8, r4, #6, #10
   2d458:	4602      	mov	r2, r0
   2d45a:	4918      	ldr	r1, [pc, #96]	; (2d4bc <publish+0xa0>)
   2d45c:	4640      	mov	r0, r8
   2d45e:	f010 fd80 	bl	3df62 <log_string_sync>
	LOG_INF("Publish payload %s", log_strdup(payload_data));
   2d462:	f04f 0800 	mov.w	r8, #0
   2d466:	2303      	movs	r3, #3
   2d468:	4638      	mov	r0, r7
   2d46a:	f363 0807 	bfi	r8, r3, #0, #8
   2d46e:	f010 fd8a 	bl	3df86 <log_strdup>
   2d472:	f364 188f 	bfi	r8, r4, #6, #10
   2d476:	4602      	mov	r2, r0
   2d478:	4911      	ldr	r1, [pc, #68]	; (2d4c0 <publish+0xa4>)
   2d47a:	4640      	mov	r0, r8
   2d47c:	f010 fd71 	bl	3df62 <log_string_sync>

	struct mqtt_publish_param param = {
   2d480:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   2d484:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d486:	ac06      	add	r4, sp, #24
   2d488:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   2d48c:	930a      	str	r3, [sp, #40]	; 0x28
   2d48e:	9709      	str	r7, [sp, #36]	; 0x24
		.message.topic = topic,
		.message.payload.data = payload_data,
		.message.payload.len = payload_data_len,
		.message_id = sys_rand32_get(),
   2d490:	f7f8 fbb6 	bl	25c00 <sys_rand32_get>
	struct mqtt_publish_param param = {
   2d494:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   2d498:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
   2d49c:	f023 0303 	bic.w	r3, r3, #3
		.dup_flag = 0,
		.retain_flag = 0,
	};

	return mqtt_publish(client, &param);
   2d4a0:	4621      	mov	r1, r4
   2d4a2:	4630      	mov	r0, r6
	struct mqtt_publish_param param = {
   2d4a4:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	return mqtt_publish(client, &param);
   2d4a8:	f011 fb02 	bl	3eab0 <mqtt_publish>
}
   2d4ac:	b00c      	add	sp, #48	; 0x30
   2d4ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d4b2:	bf00      	nop
   2d4b4:	00041c54 	.word	0x00041c54
   2d4b8:	00041c2c 	.word	0x00041c2c
   2d4bc:	0004797a 	.word	0x0004797a
   2d4c0:	0004798c 	.word	0x0004798c

0002d4c4 <aws_jobs_subscribe_topic_notify_next>:
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", true);
   2d4c4:	2301      	movs	r3, #1
{
   2d4c6:	b507      	push	{r0, r1, r2, lr}
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", true);
   2d4c8:	4a03      	ldr	r2, [pc, #12]	; (2d4d8 <aws_jobs_subscribe_topic_notify_next+0x14>)
   2d4ca:	9300      	str	r3, [sp, #0]
   2d4cc:	4b03      	ldr	r3, [pc, #12]	; (2d4dc <aws_jobs_subscribe_topic_notify_next+0x18>)
   2d4ce:	f7ff ff59 	bl	2d384 <reg_topic>
}
   2d4d2:	b003      	add	sp, #12
   2d4d4:	f85d fb04 	ldr.w	pc, [sp], #4
   2d4d8:	000425f8 	.word	0x000425f8
   2d4dc:	00044d14 	.word	0x00044d14

0002d4e0 <aws_jobs_subscribe_topic_get>:
{
   2d4e0:	b513      	push	{r0, r1, r4, lr}
	return reg_topic(client, topic_buf, &TOPIC_GET_CONF, job_id, true);
   2d4e2:	2301      	movs	r3, #1
{
   2d4e4:	4614      	mov	r4, r2
	return reg_topic(client, topic_buf, &TOPIC_GET_CONF, job_id, true);
   2d4e6:	9300      	str	r3, [sp, #0]
   2d4e8:	4a03      	ldr	r2, [pc, #12]	; (2d4f8 <aws_jobs_subscribe_topic_get+0x18>)
   2d4ea:	460b      	mov	r3, r1
   2d4ec:	4621      	mov	r1, r4
   2d4ee:	f7ff ff49 	bl	2d384 <reg_topic>
}
   2d4f2:	b002      	add	sp, #8
   2d4f4:	bd10      	pop	{r4, pc}
   2d4f6:	bf00      	nop
   2d4f8:	000425ec 	.word	0x000425ec

0002d4fc <aws_jobs_subscribe_topic_update>:
{
   2d4fc:	b513      	push	{r0, r1, r4, lr}
	return reg_topic(client, topic_buf, &TOPIC_UPDATE_CONF, job_id, true);
   2d4fe:	2301      	movs	r3, #1
{
   2d500:	4614      	mov	r4, r2
	return reg_topic(client, topic_buf, &TOPIC_UPDATE_CONF, job_id, true);
   2d502:	9300      	str	r3, [sp, #0]
   2d504:	4a03      	ldr	r2, [pc, #12]	; (2d514 <aws_jobs_subscribe_topic_update+0x18>)
   2d506:	460b      	mov	r3, r1
   2d508:	4621      	mov	r1, r4
   2d50a:	f7ff ff3b 	bl	2d384 <reg_topic>
}
   2d50e:	b002      	add	sp, #8
   2d510:	bd10      	pop	{r4, pc}
   2d512:	bf00      	nop
   2d514:	00042604 	.word	0x00042604

0002d518 <aws_jobs_update_job_execution>:
				  const u8_t *job_id,
				  enum execution_status status,
				  const u8_t *status_details,
				  int expected_version,
				  const u8_t *client_token, u8_t *topic_buf)
{
   2d518:	b570      	push	{r4, r5, r6, lr}
   2d51a:	f5ad 6dab 	sub.w	sp, sp, #1368	; 0x558
   2d51e:	460e      	mov	r6, r1
   2d520:	f8dd 156c 	ldr.w	r1, [sp, #1388]	; 0x56c
   2d524:	4605      	mov	r5, r0
	/* The rest of the parameters are checked later */
	if (client_token == NULL) {
   2d526:	2900      	cmp	r1, #0
   2d528:	d048      	beq.n	2d5bc <aws_jobs_update_job_execution+0xa4>
	 * is actually 32kb set it to what is the limiting factor which is the
	 * MQTT buffer size for reception.
	 */
	u8_t update_job_payload[CONFIG_UPDATE_JOB_PAYLOAD_LEN];

	int ret = snprintf(update_job_payload, sizeof(update_job_payload),
   2d52a:	4826      	ldr	r0, [pc, #152]	; (2d5c4 <aws_jobs_update_job_execution+0xac>)
   2d52c:	9102      	str	r1, [sp, #8]
   2d52e:	2b00      	cmp	r3, #0
   2d530:	bf08      	it	eq
   2d532:	4603      	moveq	r3, r0
   2d534:	f8dd 1568 	ldr.w	r1, [sp, #1384]	; 0x568
   2d538:	a804      	add	r0, sp, #16
   2d53a:	e9cd 3100 	strd	r3, r1, [sp]
   2d53e:	4b22      	ldr	r3, [pc, #136]	; (2d5c8 <aws_jobs_update_job_execution+0xb0>)
   2d540:	f240 5146 	movw	r1, #1350	; 0x546
   2d544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   2d548:	4a20      	ldr	r2, [pc, #128]	; (2d5cc <aws_jobs_update_job_execution+0xb4>)
   2d54a:	f00e fe45 	bl	3c1d8 <sniprintf>
			   UPDATE_JOB_PAYLOAD, execution_status_strings[status],
			   (status_details ? (char *)status_details : "null"),
			   expected_version, client_token);

	if (ret >= CONFIG_UPDATE_JOB_PAYLOAD_LEN) {
   2d54e:	f240 5345 	movw	r3, #1349	; 0x545
   2d552:	4298      	cmp	r0, r3
	int ret = snprintf(update_job_payload, sizeof(update_job_payload),
   2d554:	4604      	mov	r4, r0
	if (ret >= CONFIG_UPDATE_JOB_PAYLOAD_LEN) {
   2d556:	dd13      	ble.n	2d580 <aws_jobs_update_job_execution+0x68>
		LOG_ERR("Unable to fit formated string in provided buffer.");
   2d558:	2301      	movs	r3, #1
   2d55a:	f04f 0000 	mov.w	r0, #0
   2d55e:	4a1c      	ldr	r2, [pc, #112]	; (2d5d0 <aws_jobs_update_job_execution+0xb8>)
   2d560:	f363 0007 	bfi	r0, r3, #0, #8
   2d564:	4b1b      	ldr	r3, [pc, #108]	; (2d5d4 <aws_jobs_update_job_execution+0xbc>)
   2d566:	491c      	ldr	r1, [pc, #112]	; (2d5d8 <aws_jobs_update_job_execution+0xc0>)
   2d568:	1a9b      	subs	r3, r3, r2
   2d56a:	08db      	lsrs	r3, r3, #3
   2d56c:	f363 108f 	bfi	r0, r3, #6, #10
   2d570:	f010 fcf7 	bl	3df62 <log_string_sync>
		return -ENOMEM;
   2d574:	f06f 040b 	mvn.w	r4, #11
	}

	return publish(client, job_id, &TOPIC_UPDATE_CONF, update_job_payload,
		       ret, topic_buf);

}
   2d578:	4620      	mov	r0, r4
   2d57a:	f50d 6dab 	add.w	sp, sp, #1368	; 0x558
   2d57e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (ret < 0) {
   2d580:	2800      	cmp	r0, #0
   2d582:	da0f      	bge.n	2d5a4 <aws_jobs_update_job_execution+0x8c>
		LOG_ERR("Error when creating payload %d", ret);
   2d584:	2301      	movs	r3, #1
   2d586:	f04f 0000 	mov.w	r0, #0
   2d58a:	4a11      	ldr	r2, [pc, #68]	; (2d5d0 <aws_jobs_update_job_execution+0xb8>)
   2d58c:	f363 0007 	bfi	r0, r3, #0, #8
   2d590:	4b10      	ldr	r3, [pc, #64]	; (2d5d4 <aws_jobs_update_job_execution+0xbc>)
   2d592:	4912      	ldr	r1, [pc, #72]	; (2d5dc <aws_jobs_update_job_execution+0xc4>)
   2d594:	1a9b      	subs	r3, r3, r2
   2d596:	08db      	lsrs	r3, r3, #3
   2d598:	f363 108f 	bfi	r0, r3, #6, #10
   2d59c:	4622      	mov	r2, r4
   2d59e:	f010 fce0 	bl	3df62 <log_string_sync>
		return ret;
   2d5a2:	e7e9      	b.n	2d578 <aws_jobs_update_job_execution+0x60>
	return publish(client, job_id, &TOPIC_UPDATE_CONF, update_job_payload,
   2d5a4:	f8dd 3570 	ldr.w	r3, [sp, #1392]	; 0x570
   2d5a8:	4a0d      	ldr	r2, [pc, #52]	; (2d5e0 <aws_jobs_update_job_execution+0xc8>)
   2d5aa:	e9cd 0300 	strd	r0, r3, [sp]
   2d5ae:	4631      	mov	r1, r6
   2d5b0:	ab04      	add	r3, sp, #16
   2d5b2:	4628      	mov	r0, r5
   2d5b4:	f7ff ff32 	bl	2d41c <publish>
   2d5b8:	4604      	mov	r4, r0
   2d5ba:	e7dd      	b.n	2d578 <aws_jobs_update_job_execution+0x60>
		return -EINVAL;
   2d5bc:	f06f 0415 	mvn.w	r4, #21
   2d5c0:	e7da      	b.n	2d578 <aws_jobs_update_job_execution+0x60>
   2d5c2:	bf00      	nop
   2d5c4:	00045103 	.word	0x00045103
   2d5c8:	00042610 	.word	0x00042610
   2d5cc:	00047846 	.word	0x00047846
   2d5d0:	00041c2c 	.word	0x00041c2c
   2d5d4:	00041c54 	.word	0x00041c54
   2d5d8:	00047896 	.word	0x00047896
   2d5dc:	000478c8 	.word	0x000478c8
   2d5e0:	00042604 	.word	0x00042604

0002d5e4 <aws_jobs_get_job_execution>:

#define JOB_ID_GET_PAYLOAD "{\"clientToken\": \"\"}"
int aws_jobs_get_job_execution(struct mqtt_client *const client,
			       const char *job_id, u8_t *topic_buf)
{
   2d5e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   2d5e6:	4c08      	ldr	r4, [pc, #32]	; (2d608 <aws_jobs_get_job_execution+0x24>)
{
   2d5e8:	4605      	mov	r5, r0
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   2d5ea:	4620      	mov	r0, r4
{
   2d5ec:	4617      	mov	r7, r2
   2d5ee:	460e      	mov	r6, r1
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   2d5f0:	f7ef fd98 	bl	1d124 <strlen>
   2d5f4:	4623      	mov	r3, r4
   2d5f6:	e9cd 0700 	strd	r0, r7, [sp]
   2d5fa:	4a04      	ldr	r2, [pc, #16]	; (2d60c <aws_jobs_get_job_execution+0x28>)
   2d5fc:	4631      	mov	r1, r6
   2d5fe:	4628      	mov	r0, r5
   2d600:	f7ff ff0c 	bl	2d41c <publish>
		       strlen(JOB_ID_GET_PAYLOAD), topic_buf);
}
   2d604:	b003      	add	sp, #12
   2d606:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d608:	00047832 	.word	0x00047832
   2d60c:	000425ec 	.word	0x000425ec

0002d610 <update_job_execution.constprop.0>:
 * @param[in] client_token  Client identifier which will be repeated in the
 *			    respone of the update.
 *
 * @return 0 If successful otherwise a negative error code is returned.
 */
static int update_job_execution(struct mqtt_client *const client,
   2d610:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2d614:	4680      	mov	r8, r0
   2d616:	460d      	mov	r5, r1
	while (!accepted) {
   2d618:	4c1d      	ldr	r4, [pc, #116]	; (2d690 <update_job_execution.constprop.0+0x80>)
   2d61a:	7823      	ldrb	r3, [r4, #0]
   2d61c:	2b00      	cmp	r3, #0
   2d61e:	d033      	beq.n	2d688 <update_job_execution.constprop.0+0x78>
{
	int ret;

	/* Waiting for the previous call to this function to be accepted. */
	wait_for_update_accepted();
	accepted = false;
   2d620:	2600      	movs	r6, #0
	LOG_DBG("%s, state: %d, version_number: %d", __func__,
   2d622:	2304      	movs	r3, #4
   2d624:	f04f 0000 	mov.w	r0, #0
	accepted = false;
   2d628:	7026      	strb	r6, [r4, #0]
	LOG_DBG("%s, state: %d, version_number: %d", __func__,
   2d62a:	f363 0007 	bfi	r0, r3, #0, #8
   2d62e:	4f19      	ldr	r7, [pc, #100]	; (2d694 <update_job_execution.constprop.0+0x84>)
   2d630:	4b19      	ldr	r3, [pc, #100]	; (2d698 <update_job_execution.constprop.0+0x88>)
   2d632:	4c1a      	ldr	r4, [pc, #104]	; (2d69c <update_job_execution.constprop.0+0x8c>)
   2d634:	491a      	ldr	r1, [pc, #104]	; (2d6a0 <update_job_execution.constprop.0+0x90>)
   2d636:	1ae4      	subs	r4, r4, r3
   2d638:	683b      	ldr	r3, [r7, #0]
   2d63a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2d63e:	e9cd 5300 	strd	r5, r3, [sp]
   2d642:	4b18      	ldr	r3, [pc, #96]	; (2d6a4 <update_job_execution.constprop.0+0x94>)
   2d644:	f364 108f 	bfi	r0, r4, #6, #10
   2d648:	461a      	mov	r2, r3
   2d64a:	f010 fc8a 	bl	3df62 <log_string_sync>
		state, execution_version_number);

	ret = aws_jobs_update_job_execution(client, job_id, state,
   2d64e:	4b16      	ldr	r3, [pc, #88]	; (2d6a8 <update_job_execution.constprop.0+0x98>)
   2d650:	462a      	mov	r2, r5
   2d652:	9302      	str	r3, [sp, #8]
   2d654:	4b15      	ldr	r3, [pc, #84]	; (2d6ac <update_job_execution.constprop.0+0x9c>)
   2d656:	4916      	ldr	r1, [pc, #88]	; (2d6b0 <update_job_execution.constprop.0+0xa0>)
   2d658:	9301      	str	r3, [sp, #4]
   2d65a:	683b      	ldr	r3, [r7, #0]
   2d65c:	4640      	mov	r0, r8
   2d65e:	9300      	str	r3, [sp, #0]
   2d660:	4633      	mov	r3, r6
   2d662:	f7ff ff59 	bl	2d518 <aws_jobs_update_job_execution>
						 NULL,
					     execution_version_number,
					     client_token, update_topic);

	if (ret < 0) {
   2d666:	1e05      	subs	r5, r0, #0
   2d668:	da0a      	bge.n	2d680 <update_job_execution.constprop.0+0x70>
		LOG_ERR("aws_jobs_update_job_execution failed: %d", ret);
   2d66a:	f04f 0000 	mov.w	r0, #0
   2d66e:	2301      	movs	r3, #1
   2d670:	f363 0007 	bfi	r0, r3, #0, #8
   2d674:	f364 108f 	bfi	r0, r4, #6, #10
   2d678:	462a      	mov	r2, r5
   2d67a:	490e      	ldr	r1, [pc, #56]	; (2d6b4 <update_job_execution.constprop.0+0xa4>)
   2d67c:	f010 fc71 	bl	3df62 <log_string_sync>
	}

	return ret;
}
   2d680:	4628      	mov	r0, r5
   2d682:	b004      	add	sp, #16
   2d684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   2d688:	f00c fc0c 	bl	39ea4 <z_impl_k_yield>
   2d68c:	e7c5      	b.n	2d61a <update_job_execution.constprop.0+0xa>
   2d68e:	bf00      	nop
   2d690:	200322d6 	.word	0x200322d6
   2d694:	20024798 	.word	0x20024798
   2d698:	00041c2c 	.word	0x00041c2c
   2d69c:	00041c4c 	.word	0x00041c4c
   2d6a0:	00047e25 	.word	0x00047e25
   2d6a4:	00047a24 	.word	0x00047a24
   2d6a8:	2002bca8 	.word	0x2002bca8
   2d6ac:	00044d14 	.word	0x00044d14
   2d6b0:	2002b68c 	.word	0x2002b68c
   2d6b4:	00047e4b 	.word	0x00047e4b

0002d6b8 <http_fota_handler>:
		return 1;
	}
}

static void http_fota_handler(const struct fota_download_evt *evt)
{
   2d6b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__ASSERT_NO_MSG(c != NULL);
   2d6ba:	4c32      	ldr	r4, [pc, #200]	; (2d784 <http_fota_handler+0xcc>)
{
   2d6bc:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(c != NULL);
   2d6be:	6823      	ldr	r3, [r4, #0]
   2d6c0:	b95b      	cbnz	r3, 2d6da <http_fota_handler+0x22>
   2d6c2:	4931      	ldr	r1, [pc, #196]	; (2d788 <http_fota_handler+0xd0>)
   2d6c4:	4831      	ldr	r0, [pc, #196]	; (2d78c <http_fota_handler+0xd4>)
   2d6c6:	f240 13cf 	movw	r3, #463	; 0x1cf
   2d6ca:	4a31      	ldr	r2, [pc, #196]	; (2d790 <http_fota_handler+0xd8>)
   2d6cc:	f010 fbe5 	bl	3de9a <printk>
   2d6d0:	f240 11cf 	movw	r1, #463	; 0x1cf
   2d6d4:	482e      	ldr	r0, [pc, #184]	; (2d790 <http_fota_handler+0xd8>)
   2d6d6:	f010 fc33 	bl	3df40 <assert_post_action>

	int err = 0;
	struct aws_fota_event aws_fota_evt;

	switch (evt->id) {
   2d6da:	782b      	ldrb	r3, [r5, #0]
   2d6dc:	2b04      	cmp	r3, #4
   2d6de:	d828      	bhi.n	2d732 <http_fota_handler+0x7a>
   2d6e0:	e8df f003 	tbb	[pc, r3]
   2d6e4:	2f29034a 	.word	0x2f29034a
   2d6e8:	31          	.byte	0x31
   2d6e9:	00          	.byte	0x00
	case FOTA_DOWNLOAD_EVT_FINISHED:
		LOG_INF("FOTA download completed evt received");
   2d6ea:	2303      	movs	r3, #3
   2d6ec:	f04f 0000 	mov.w	r0, #0
   2d6f0:	4a28      	ldr	r2, [pc, #160]	; (2d794 <http_fota_handler+0xdc>)
   2d6f2:	f363 0007 	bfi	r0, r3, #0, #8
   2d6f6:	4b28      	ldr	r3, [pc, #160]	; (2d798 <http_fota_handler+0xe0>)
   2d6f8:	4928      	ldr	r1, [pc, #160]	; (2d79c <http_fota_handler+0xe4>)
   2d6fa:	1a9b      	subs	r3, r3, r2
   2d6fc:	08db      	lsrs	r3, r3, #3
   2d6fe:	f363 108f 	bfi	r0, r3, #6, #10
   2d702:	f010 fc2e 	bl	3df62 <log_string_sync>

		/* Always send download complete progress */
		aws_fota_evt.id = AWS_FOTA_EVT_DL_PROGRESS;
   2d706:	2305      	movs	r3, #5
   2d708:	f88d 3000 	strb.w	r3, [sp]
		aws_fota_evt.dl.progress = AWS_FOTA_EVT_DL_COMPLETE_VAL;
   2d70c:	2364      	movs	r3, #100	; 0x64
		callback(&aws_fota_evt);

		fota_state = APPLY_UPDATE;
   2d70e:	2602      	movs	r6, #2
		callback(&aws_fota_evt);
   2d710:	4d23      	ldr	r5, [pc, #140]	; (2d7a0 <http_fota_handler+0xe8>)
		aws_fota_evt.dl.progress = AWS_FOTA_EVT_DL_COMPLETE_VAL;
   2d712:	9301      	str	r3, [sp, #4]
		callback(&aws_fota_evt);
   2d714:	4668      	mov	r0, sp
   2d716:	682b      	ldr	r3, [r5, #0]
   2d718:	4798      	blx	r3
		fota_state = APPLY_UPDATE;
   2d71a:	4b22      	ldr	r3, [pc, #136]	; (2d7a4 <http_fota_handler+0xec>)
		err = update_job_execution(c, job_id, AWS_JOBS_IN_PROGRESS, "");
   2d71c:	2101      	movs	r1, #1
   2d71e:	6820      	ldr	r0, [r4, #0]
		fota_state = APPLY_UPDATE;
   2d720:	701e      	strb	r6, [r3, #0]
		err = update_job_execution(c, job_id, AWS_JOBS_IN_PROGRESS, "");
   2d722:	f7ff ff75 	bl	2d610 <update_job_execution.constprop.0>
		if (err != 0) {
   2d726:	b120      	cbz	r0, 2d732 <http_fota_handler+0x7a>
			aws_fota_evt.id = AWS_FOTA_EVT_ERROR;
			callback(&aws_fota_evt);
   2d728:	682b      	ldr	r3, [r5, #0]
			aws_fota_evt.id = AWS_FOTA_EVT_ERROR;
   2d72a:	f88d 6000 	strb.w	r6, [sp]
	case FOTA_DOWNLOAD_EVT_PROGRESS:
		/* Only if CONFIG_FOTA_DOWNLOAD_PROGRESS_EVT is enabled */
		download_progress = evt->progress;
		aws_fota_evt.id = AWS_FOTA_EVT_DL_PROGRESS;
		aws_fota_evt.dl.progress = download_progress;
		callback(&aws_fota_evt);
   2d72e:	4668      	mov	r0, sp
   2d730:	4798      	blx	r3
		break;
	}
}
   2d732:	b002      	add	sp, #8
   2d734:	bd70      	pop	{r4, r5, r6, pc}
		aws_fota_evt.id = AWS_FOTA_EVT_ERASE_PENDING;
   2d736:	2303      	movs	r3, #3
		aws_fota_evt.id = AWS_FOTA_EVT_ERROR;
   2d738:	f88d 3000 	strb.w	r3, [sp]
		callback(&aws_fota_evt);
   2d73c:	4b18      	ldr	r3, [pc, #96]	; (2d7a0 <http_fota_handler+0xe8>)
   2d73e:	681b      	ldr	r3, [r3, #0]
   2d740:	e7f5      	b.n	2d72e <http_fota_handler+0x76>
		aws_fota_evt.id = AWS_FOTA_EVT_ERASE_DONE;
   2d742:	2304      	movs	r3, #4
   2d744:	e7f8      	b.n	2d738 <http_fota_handler+0x80>
		LOG_ERR("FOTA download failed, report back");
   2d746:	2301      	movs	r3, #1
   2d748:	f04f 0000 	mov.w	r0, #0
   2d74c:	4a11      	ldr	r2, [pc, #68]	; (2d794 <http_fota_handler+0xdc>)
   2d74e:	f363 0007 	bfi	r0, r3, #0, #8
   2d752:	4b11      	ldr	r3, [pc, #68]	; (2d798 <http_fota_handler+0xe0>)
   2d754:	4914      	ldr	r1, [pc, #80]	; (2d7a8 <http_fota_handler+0xf0>)
   2d756:	1a9b      	subs	r3, r3, r2
   2d758:	08db      	lsrs	r3, r3, #3
   2d75a:	f363 108f 	bfi	r0, r3, #6, #10
   2d75e:	f010 fc00 	bl	3df62 <log_string_sync>
		fota_state = NONE;
   2d762:	2300      	movs	r3, #0
   2d764:	4a0f      	ldr	r2, [pc, #60]	; (2d7a4 <http_fota_handler+0xec>)
		(void)update_job_execution(c, job_id, AWS_JOBS_FAILED, "");
   2d766:	2103      	movs	r1, #3
		fota_state = NONE;
   2d768:	7013      	strb	r3, [r2, #0]
		execution_state = AWS_JOBS_QUEUED;
   2d76a:	4a10      	ldr	r2, [pc, #64]	; (2d7ac <http_fota_handler+0xf4>)
		(void)update_job_execution(c, job_id, AWS_JOBS_FAILED, "");
   2d76c:	6820      	ldr	r0, [r4, #0]
		execution_state = AWS_JOBS_QUEUED;
   2d76e:	7013      	strb	r3, [r2, #0]
		(void)update_job_execution(c, job_id, AWS_JOBS_FAILED, "");
   2d770:	f7ff ff4e 	bl	2d610 <update_job_execution.constprop.0>
		aws_fota_evt.id = AWS_FOTA_EVT_ERROR;
   2d774:	2302      	movs	r3, #2
   2d776:	e7df      	b.n	2d738 <http_fota_handler+0x80>
		aws_fota_evt.id = AWS_FOTA_EVT_DL_PROGRESS;
   2d778:	2205      	movs	r2, #5
		download_progress = evt->progress;
   2d77a:	686b      	ldr	r3, [r5, #4]
		aws_fota_evt.id = AWS_FOTA_EVT_DL_PROGRESS;
   2d77c:	f88d 2000 	strb.w	r2, [sp]
		aws_fota_evt.dl.progress = download_progress;
   2d780:	9301      	str	r3, [sp, #4]
   2d782:	e7db      	b.n	2d73c <http_fota_handler+0x84>
   2d784:	20024790 	.word	0x20024790
   2d788:	00047dc4 	.word	0x00047dc4
   2d78c:	00043278 	.word	0x00043278
   2d790:	00047d8d 	.word	0x00047d8d
   2d794:	00041c2c 	.word	0x00041c2c
   2d798:	00041c4c 	.word	0x00041c4c
   2d79c:	00047dd5 	.word	0x00047dd5
   2d7a0:	20024794 	.word	0x20024794
   2d7a4:	2002b4f7 	.word	0x2002b4f7
   2d7a8:	00047dfa 	.word	0x00047dfa
   2d7ac:	2002b3f7 	.word	0x2002b3f7

0002d7b0 <get_published_payload.constprop.1>:
	if (length > sizeof(payload_buf)) {
   2d7b0:	f240 5346 	movw	r3, #1350	; 0x546
static int get_published_payload(struct mqtt_client *client, u8_t *write_buf,
   2d7b4:	b570      	push	{r4, r5, r6, lr}
	u8_t *end = buf + length;
   2d7b6:	4c0d      	ldr	r4, [pc, #52]	; (2d7ec <get_published_payload.constprop.1+0x3c>)
	if (length > sizeof(payload_buf)) {
   2d7b8:	4299      	cmp	r1, r3
static int get_published_payload(struct mqtt_client *client, u8_t *write_buf,
   2d7ba:	4606      	mov	r6, r0
	u8_t *end = buf + length;
   2d7bc:	eb04 0501 	add.w	r5, r4, r1
	if (length > sizeof(payload_buf)) {
   2d7c0:	d80d      	bhi.n	2d7de <get_published_payload.constprop.1+0x2e>
	while (buf < end) {
   2d7c2:	42a5      	cmp	r5, r4
   2d7c4:	d801      	bhi.n	2d7ca <get_published_payload.constprop.1+0x1a>
	return 0;
   2d7c6:	2000      	movs	r0, #0
}
   2d7c8:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buf,
   2d7ca:	1b2a      	subs	r2, r5, r4
   2d7cc:	4621      	mov	r1, r4
   2d7ce:	4630      	mov	r0, r6
   2d7d0:	f011 fac4 	bl	3ed5c <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   2d7d4:	2800      	cmp	r0, #0
   2d7d6:	dbf7      	blt.n	2d7c8 <get_published_payload.constprop.1+0x18>
		} else if (ret == 0) {
   2d7d8:	d004      	beq.n	2d7e4 <get_published_payload.constprop.1+0x34>
		buf += ret;
   2d7da:	4404      	add	r4, r0
   2d7dc:	e7f1      	b.n	2d7c2 <get_published_payload.constprop.1+0x12>
		return -EMSGSIZE;
   2d7de:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2d7e2:	e7f1      	b.n	2d7c8 <get_published_payload.constprop.1+0x18>
			return -EIO;
   2d7e4:	f06f 0004 	mvn.w	r0, #4
   2d7e8:	e7ee      	b.n	2d7c8 <get_published_payload.constprop.1+0x18>
   2d7ea:	bf00      	nop
   2d7ec:	2002b762 	.word	0x2002b762

0002d7f0 <aws_fota_mqtt_evt_handler>:
{
   2d7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d7f4:	b08b      	sub	sp, #44	; 0x2c
	switch (evt->type) {
   2d7f6:	780b      	ldrb	r3, [r1, #0]
{
   2d7f8:	af02      	add	r7, sp, #8
   2d7fa:	4680      	mov	r8, r0
   2d7fc:	460d      	mov	r5, r1
	switch (evt->type) {
   2d7fe:	2b07      	cmp	r3, #7
   2d800:	d80b      	bhi.n	2d81a <aws_fota_mqtt_evt_handler+0x2a>
   2d802:	e8df f013 	tbh	[pc, r3, lsl #1]
   2d806:	0008      	.short	0x0008
   2d808:	0036000a 	.word	0x0036000a
   2d80c:	000a027e 	.word	0x000a027e
   2d810:	000a000a 	.word	0x000a000a
   2d814:	0293      	.short	0x0293
		if (evt->result != 0) {
   2d816:	69cb      	ldr	r3, [r1, #28]
   2d818:	b113      	cbz	r3, 2d820 <aws_fota_mqtt_evt_handler+0x30>
			return err;
   2d81a:	f04f 0b01 	mov.w	fp, #1
   2d81e:	e259      	b.n	2dcd4 <_flash_used+0x1d0>
		err = aws_jobs_subscribe_topic_notify_next(client,
   2d820:	49be      	ldr	r1, [pc, #760]	; (2db1c <_flash_used+0x18>)
   2d822:	f7ff fe4f 	bl	2d4c4 <aws_jobs_subscribe_topic_notify_next>
		if (err) {
   2d826:	4683      	mov	fp, r0
   2d828:	b170      	cbz	r0, 2d848 <aws_fota_mqtt_evt_handler+0x58>
			LOG_ERR("Unable to subscribe to notify-next topic");
   2d82a:	2201      	movs	r2, #1
   2d82c:	f04f 0000 	mov.w	r0, #0
   2d830:	49bb      	ldr	r1, [pc, #748]	; (2db20 <_flash_used+0x1c>)
   2d832:	f362 0007 	bfi	r0, r2, #0, #8
   2d836:	4abb      	ldr	r2, [pc, #748]	; (2db24 <_flash_used+0x20>)
   2d838:	1a52      	subs	r2, r2, r1
   2d83a:	08d2      	lsrs	r2, r2, #3
   2d83c:	49ba      	ldr	r1, [pc, #744]	; (2db28 <_flash_used+0x24>)
   2d83e:	f362 108f 	bfi	r0, r2, #6, #10
			LOG_INF("subscribed to get topic");
   2d842:	f010 fb8e 	bl	3df62 <log_string_sync>
			return 0;
   2d846:	e245      	b.n	2dcd4 <_flash_used+0x1d0>
		err = aws_jobs_subscribe_topic_get(client, "$next", get_topic);
   2d848:	4ab8      	ldr	r2, [pc, #736]	; (2db2c <_flash_used+0x28>)
   2d84a:	49b9      	ldr	r1, [pc, #740]	; (2db30 <_flash_used+0x2c>)
   2d84c:	4640      	mov	r0, r8
   2d84e:	f7ff fe47 	bl	2d4e0 <aws_jobs_subscribe_topic_get>
		if (err) {
   2d852:	4683      	mov	fp, r0
   2d854:	2800      	cmp	r0, #0
   2d856:	d0e0      	beq.n	2d81a <aws_fota_mqtt_evt_handler+0x2a>
			LOG_ERR("Unable to subscribe to jobs/$next/get");
   2d858:	2201      	movs	r2, #1
   2d85a:	f04f 0000 	mov.w	r0, #0
   2d85e:	49b0      	ldr	r1, [pc, #704]	; (2db20 <_flash_used+0x1c>)
   2d860:	f362 0007 	bfi	r0, r2, #0, #8
   2d864:	4aaf      	ldr	r2, [pc, #700]	; (2db24 <_flash_used+0x20>)
   2d866:	1a52      	subs	r2, r2, r1
   2d868:	08d2      	lsrs	r2, r2, #3
   2d86a:	f362 108f 	bfi	r0, r2, #6, #10
   2d86e:	49b1      	ldr	r1, [pc, #708]	; (2db34 <_flash_used+0x30>)
   2d870:	e7e7      	b.n	2d842 <aws_fota_mqtt_evt_handler+0x52>
		err = on_publish_evt(client,
   2d872:	e9d1 b401 	ldrd	fp, r4, [r1, #4]
   2d876:	f8d1 a014 	ldr.w	sl, [r1, #20]
		aws_jobs_cmp(get_topic, topic, topic_len, "");
   2d87a:	4622      	mov	r2, r4
   2d87c:	4659      	mov	r1, fp
   2d87e:	4bae      	ldr	r3, [pc, #696]	; (2db38 <_flash_used+0x34>)
   2d880:	48aa      	ldr	r0, [pc, #680]	; (2db2c <_flash_used+0x28>)
   2d882:	f012 fc7e 	bl	40182 <aws_jobs_cmp>
		aws_jobs_cmp(get_topic, topic, topic_len, "accepted");
   2d886:	4622      	mov	r2, r4
   2d888:	4659      	mov	r1, fp
		aws_jobs_cmp(get_topic, topic, topic_len, "");
   2d88a:	6138      	str	r0, [r7, #16]
		aws_jobs_cmp(get_topic, topic, topic_len, "accepted");
   2d88c:	4bab      	ldr	r3, [pc, #684]	; (2db3c <_flash_used+0x38>)
   2d88e:	48a7      	ldr	r0, [pc, #668]	; (2db2c <_flash_used+0x28>)
   2d890:	f012 fc77 	bl	40182 <aws_jobs_cmp>
		aws_jobs_cmp(notify_next_topic, topic, topic_len, "");
   2d894:	4622      	mov	r2, r4
   2d896:	4659      	mov	r1, fp
		aws_jobs_cmp(get_topic, topic, topic_len, "accepted");
   2d898:	60f8      	str	r0, [r7, #12]
		aws_jobs_cmp(notify_next_topic, topic, topic_len, "");
   2d89a:	4ba7      	ldr	r3, [pc, #668]	; (2db38 <_flash_used+0x34>)
   2d89c:	489f      	ldr	r0, [pc, #636]	; (2db1c <_flash_used+0x18>)
   2d89e:	f012 fc70 	bl	40182 <aws_jobs_cmp>
		aws_jobs_cmp(update_topic, topic, topic_len, "accepted");
   2d8a2:	4622      	mov	r2, r4
   2d8a4:	4659      	mov	r1, fp
		aws_jobs_cmp(notify_next_topic, topic, topic_len, "");
   2d8a6:	60b8      	str	r0, [r7, #8]
		aws_jobs_cmp(update_topic, topic, topic_len, "accepted");
   2d8a8:	4ba4      	ldr	r3, [pc, #656]	; (2db3c <_flash_used+0x38>)
   2d8aa:	48a5      	ldr	r0, [pc, #660]	; (2db40 <_flash_used+0x3c>)
   2d8ac:	f012 fc69 	bl	40182 <aws_jobs_cmp>
		aws_jobs_cmp(update_topic, topic, topic_len, "rejected");
   2d8b0:	4622      	mov	r2, r4
   2d8b2:	4659      	mov	r1, fp
		aws_jobs_cmp(update_topic, topic, topic_len, "accepted");
   2d8b4:	6178      	str	r0, [r7, #20]
		aws_jobs_cmp(update_topic, topic, topic_len, "rejected");
   2d8b6:	4ba3      	ldr	r3, [pc, #652]	; (2db44 <_flash_used+0x40>)
   2d8b8:	48a1      	ldr	r0, [pc, #644]	; (2db40 <_flash_used+0x3c>)
   2d8ba:	f012 fc62 	bl	40182 <aws_jobs_cmp>
	char debug_log[topic_len + 1];
   2d8be:	f104 0308 	add.w	r3, r4, #8
   2d8c2:	f023 0307 	bic.w	r3, r3, #7
{
   2d8c6:	466e      	mov	r6, sp
	char debug_log[topic_len + 1];
   2d8c8:	ebad 0d03 	sub.w	sp, sp, r3
   2d8cc:	f10d 0908 	add.w	r9, sp, #8
   2d8d0:	4622      	mov	r2, r4
   2d8d2:	4659      	mov	r1, fp
		aws_jobs_cmp(update_topic, topic, topic_len, "rejected");
   2d8d4:	6078      	str	r0, [r7, #4]
   2d8d6:	4648      	mov	r0, r9
   2d8d8:	f012 fea0 	bl	4061c <memcpy>
	debug_log[topic_len] = '\0';
   2d8dc:	2300      	movs	r3, #0
	LOG_DBG("Received topic: %s", log_strdup(debug_log));
   2d8de:	f04f 0b00 	mov.w	fp, #0
	debug_log[topic_len] = '\0';
   2d8e2:	f809 3004 	strb.w	r3, [r9, r4]
	LOG_DBG("Received topic: %s", log_strdup(debug_log));
   2d8e6:	2304      	movs	r3, #4
   2d8e8:	4c8e      	ldr	r4, [pc, #568]	; (2db24 <_flash_used+0x20>)
   2d8ea:	f363 0b07 	bfi	fp, r3, #0, #8
   2d8ee:	4b8c      	ldr	r3, [pc, #560]	; (2db20 <_flash_used+0x1c>)
   2d8f0:	4648      	mov	r0, r9
   2d8f2:	1ae4      	subs	r4, r4, r3
   2d8f4:	f010 fb47 	bl	3df86 <log_strdup>
   2d8f8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2d8fc:	f364 1b8f 	bfi	fp, r4, #6, #10
   2d900:	4603      	mov	r3, r0
   2d902:	4a91      	ldr	r2, [pc, #580]	; (2db48 <_flash_used+0x44>)
   2d904:	4991      	ldr	r1, [pc, #580]	; (2db4c <_flash_used+0x48>)
   2d906:	4658      	mov	r0, fp
   2d908:	f010 fb2b 	bl	3df62 <log_string_sync>
	if (is_notify_next_topic || is_get_next_topic || is_get_accepted) {
   2d90c:	68bb      	ldr	r3, [r7, #8]
   2d90e:	b92b      	cbnz	r3, 2d91c <aws_fota_mqtt_evt_handler+0x12c>
   2d910:	693b      	ldr	r3, [r7, #16]
   2d912:	b91b      	cbnz	r3, 2d91c <aws_fota_mqtt_evt_handler+0x12c>
   2d914:	68fb      	ldr	r3, [r7, #12]
   2d916:	2b00      	cmp	r3, #0
   2d918:	f000 80b1 	beq.w	2da7e <aws_fota_mqtt_evt_handler+0x28e>
		LOG_INF("Checking for an available job");
   2d91c:	2303      	movs	r3, #3
   2d91e:	f04f 0000 	mov.w	r0, #0
   2d922:	f363 0007 	bfi	r0, r3, #0, #8
   2d926:	f364 108f 	bfi	r0, r4, #6, #10
   2d92a:	4989      	ldr	r1, [pc, #548]	; (2db50 <_flash_used+0x4c>)
   2d92c:	f010 fb19 	bl	3df62 <log_string_sync>
	int err = get_published_payload(client, payload_buf, payload_len);
   2d930:	4651      	mov	r1, sl
   2d932:	4640      	mov	r0, r8
   2d934:	f7ff ff3c 	bl	2d7b0 <get_published_payload.constprop.1>
	if (err) {
   2d938:	4683      	mov	fp, r0
   2d93a:	b148      	cbz	r0, 2d950 <aws_fota_mqtt_evt_handler+0x160>
		LOG_ERR("Error when getting the payload: %d", err);
   2d93c:	2201      	movs	r2, #1
   2d93e:	f04f 0000 	mov.w	r0, #0
   2d942:	f362 0007 	bfi	r0, r2, #0, #8
   2d946:	f364 108f 	bfi	r0, r4, #6, #10
   2d94a:	465a      	mov	r2, fp
   2d94c:	4981      	ldr	r1, [pc, #516]	; (2db54 <_flash_used+0x50>)
   2d94e:	e017      	b.n	2d980 <aws_fota_mqtt_evt_handler+0x190>
	err = aws_fota_parse_DescribeJobExecution_rsp(payload_buf, payload_len,
   2d950:	4b81      	ldr	r3, [pc, #516]	; (2db58 <_flash_used+0x54>)
   2d952:	f8df 9240 	ldr.w	r9, [pc, #576]	; 2db94 <_flash_used+0x90>
   2d956:	9300      	str	r3, [sp, #0]
   2d958:	f8cd 9004 	str.w	r9, [sp, #4]
   2d95c:	4b7f      	ldr	r3, [pc, #508]	; (2db5c <_flash_used+0x58>)
   2d95e:	4a80      	ldr	r2, [pc, #512]	; (2db60 <_flash_used+0x5c>)
   2d960:	4651      	mov	r1, sl
   2d962:	4880      	ldr	r0, [pc, #512]	; (2db64 <_flash_used+0x60>)
   2d964:	f000 fa80 	bl	2de68 <aws_fota_parse_DescribeJobExecution_rsp>
	if (err < 0) {
   2d968:	f1b0 0b00 	subs.w	fp, r0, #0
   2d96c:	da0b      	bge.n	2d986 <aws_fota_mqtt_evt_handler+0x196>
		LOG_ERR("Error when parsing the json: %d", err);
   2d96e:	2201      	movs	r2, #1
   2d970:	f04f 0000 	mov.w	r0, #0
   2d974:	f362 0007 	bfi	r0, r2, #0, #8
   2d978:	465a      	mov	r2, fp
   2d97a:	497b      	ldr	r1, [pc, #492]	; (2db68 <_flash_used+0x64>)
   2d97c:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_ERR("Error %d when getting the payload", err);
   2d980:	f010 faef 	bl	3df62 <log_string_sync>
		return err;
   2d984:	e134      	b.n	2dbf0 <_flash_used+0xec>
	} else if (err == 0) {
   2d986:	d11a      	bne.n	2d9be <aws_fota_mqtt_evt_handler+0x1ce>
		LOG_DBG("Got only one field: %s", log_strdup(payload_buf));
   2d988:	2304      	movs	r3, #4
   2d98a:	f04f 0800 	mov.w	r8, #0
   2d98e:	4875      	ldr	r0, [pc, #468]	; (2db64 <_flash_used+0x60>)
   2d990:	f363 0807 	bfi	r8, r3, #0, #8
   2d994:	f010 faf7 	bl	3df86 <log_strdup>
   2d998:	f364 188f 	bfi	r8, r4, #6, #10
   2d99c:	4603      	mov	r3, r0
   2d99e:	4973      	ldr	r1, [pc, #460]	; (2db6c <_flash_used+0x68>)
   2d9a0:	4640      	mov	r0, r8
   2d9a2:	4a73      	ldr	r2, [pc, #460]	; (2db70 <_flash_used+0x6c>)
   2d9a4:	f010 fadd 	bl	3df62 <log_string_sync>
		LOG_INF("No queued jobs for this device");
   2d9a8:	f04f 0000 	mov.w	r0, #0
   2d9ac:	2303      	movs	r3, #3
   2d9ae:	4971      	ldr	r1, [pc, #452]	; (2db74 <_flash_used+0x70>)
   2d9b0:	f363 0007 	bfi	r0, r3, #0, #8
   2d9b4:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_INF("Ready to reboot");
   2d9b8:	f010 fad3 	bl	3df62 <log_string_sync>
   2d9bc:	e050      	b.n	2da60 <aws_fota_mqtt_evt_handler+0x270>
	LOG_DBG("Job ID: %s", log_strdup(job_id));
   2d9be:	2304      	movs	r3, #4
   2d9c0:	f04f 0a00 	mov.w	sl, #0
   2d9c4:	4866      	ldr	r0, [pc, #408]	; (2db60 <_flash_used+0x5c>)
   2d9c6:	f363 0a07 	bfi	sl, r3, #0, #8
   2d9ca:	f010 fadc 	bl	3df86 <log_strdup>
   2d9ce:	f364 1a8f 	bfi	sl, r4, #6, #10
   2d9d2:	4603      	mov	r3, r0
   2d9d4:	4a66      	ldr	r2, [pc, #408]	; (2db70 <_flash_used+0x6c>)
   2d9d6:	4968      	ldr	r1, [pc, #416]	; (2db78 <_flash_used+0x74>)
   2d9d8:	4650      	mov	r0, sl
   2d9da:	f010 fac2 	bl	3df62 <log_string_sync>
	LOG_DBG("hostname: %s", log_strdup(hostname));
   2d9de:	f04f 0a00 	mov.w	sl, #0
   2d9e2:	2304      	movs	r3, #4
   2d9e4:	485d      	ldr	r0, [pc, #372]	; (2db5c <_flash_used+0x58>)
   2d9e6:	f363 0a07 	bfi	sl, r3, #0, #8
   2d9ea:	f010 facc 	bl	3df86 <log_strdup>
   2d9ee:	f364 1a8f 	bfi	sl, r4, #6, #10
   2d9f2:	4603      	mov	r3, r0
   2d9f4:	4a5e      	ldr	r2, [pc, #376]	; (2db70 <_flash_used+0x6c>)
   2d9f6:	4961      	ldr	r1, [pc, #388]	; (2db7c <_flash_used+0x78>)
   2d9f8:	4650      	mov	r0, sl
   2d9fa:	f010 fab2 	bl	3df62 <log_string_sync>
	LOG_DBG("file_path %s", log_strdup(file_path));
   2d9fe:	f04f 0a00 	mov.w	sl, #0
   2da02:	2304      	movs	r3, #4
   2da04:	4854      	ldr	r0, [pc, #336]	; (2db58 <_flash_used+0x54>)
   2da06:	f363 0a07 	bfi	sl, r3, #0, #8
   2da0a:	f010 fabc 	bl	3df86 <log_strdup>
   2da0e:	f364 1a8f 	bfi	sl, r4, #6, #10
   2da12:	4603      	mov	r3, r0
   2da14:	4a56      	ldr	r2, [pc, #344]	; (2db70 <_flash_used+0x6c>)
   2da16:	495a      	ldr	r1, [pc, #360]	; (2db80 <_flash_used+0x7c>)
   2da18:	4650      	mov	r0, sl
   2da1a:	f010 faa2 	bl	3df62 <log_string_sync>
	LOG_DBG("execution_version_number: %d ", execution_version_number);
   2da1e:	2304      	movs	r3, #4
   2da20:	f04f 0000 	mov.w	r0, #0
   2da24:	f363 0007 	bfi	r0, r3, #0, #8
   2da28:	f364 108f 	bfi	r0, r4, #6, #10
   2da2c:	f8d9 3000 	ldr.w	r3, [r9]
   2da30:	4a4f      	ldr	r2, [pc, #316]	; (2db70 <_flash_used+0x6c>)
   2da32:	4954      	ldr	r1, [pc, #336]	; (2db84 <_flash_used+0x80>)
   2da34:	f010 fa95 	bl	3df62 <log_string_sync>
	err = aws_jobs_subscribe_topic_update(client, job_id, update_topic);
   2da38:	4a41      	ldr	r2, [pc, #260]	; (2db40 <_flash_used+0x3c>)
   2da3a:	4949      	ldr	r1, [pc, #292]	; (2db60 <_flash_used+0x5c>)
   2da3c:	4640      	mov	r0, r8
   2da3e:	f7ff fd5d 	bl	2d4fc <aws_jobs_subscribe_topic_update>
	if (err) {
   2da42:	4683      	mov	fp, r0
   2da44:	b148      	cbz	r0, 2da5a <aws_fota_mqtt_evt_handler+0x26a>
		LOG_ERR("Error when subscribing job_id_update: "
   2da46:	2201      	movs	r2, #1
   2da48:	f04f 0000 	mov.w	r0, #0
   2da4c:	f362 0007 	bfi	r0, r2, #0, #8
   2da50:	f364 108f 	bfi	r0, r4, #6, #10
   2da54:	465a      	mov	r2, fp
   2da56:	494c      	ldr	r1, [pc, #304]	; (2db88 <_flash_used+0x84>)
   2da58:	e792      	b.n	2d980 <aws_fota_mqtt_evt_handler+0x190>
	fota_state = DOWNLOAD_FIRMWARE;
   2da5a:	2201      	movs	r2, #1
   2da5c:	4b4b      	ldr	r3, [pc, #300]	; (2db8c <_flash_used+0x88>)
   2da5e:	701a      	strb	r2, [r3, #0]
		LOG_INF("Ready to reboot");
   2da60:	46b5      	mov	sp, r6
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   2da62:	7b2b      	ldrb	r3, [r5, #12]
   2da64:	2b01      	cmp	r3, #1
   2da66:	f040 815e 	bne.w	2dd26 <_flash_used+0x222>
			const struct mqtt_puback_param ack = {
   2da6a:	8b2b      	ldrh	r3, [r5, #24]
			err = mqtt_publish_qos1_ack(c, &ack);
   2da6c:	f107 0118 	add.w	r1, r7, #24
			const struct mqtt_puback_param ack = {
   2da70:	833b      	strh	r3, [r7, #24]
			err = mqtt_publish_qos1_ack(c, &ack);
   2da72:	4b47      	ldr	r3, [pc, #284]	; (2db90 <_flash_used+0x8c>)
   2da74:	6818      	ldr	r0, [r3, #0]
   2da76:	f011 f849 	bl	3eb0c <mqtt_publish_qos1_ack>
			err = update_job_execution(client, job_id,
   2da7a:	4683      	mov	fp, r0
			if (err) {
   2da7c:	e12a      	b.n	2dcd4 <_flash_used+0x1d0>
	} else if (doc_update_accepted) {
   2da7e:	697b      	ldr	r3, [r7, #20]
   2da80:	2b00      	cmp	r3, #0
   2da82:	f000 80e0 	beq.w	2dc46 <_flash_used+0x142>
	int err = get_published_payload(client, payload_buf, payload_len);
   2da86:	4651      	mov	r1, sl
   2da88:	4640      	mov	r0, r8
   2da8a:	f7ff fe91 	bl	2d7b0 <get_published_payload.constprop.1>
	if (err) {
   2da8e:	4683      	mov	fp, r0
   2da90:	2800      	cmp	r0, #0
   2da92:	f47f af53 	bne.w	2d93c <aws_fota_mqtt_evt_handler+0x14c>
	accepted = true;
   2da96:	2101      	movs	r1, #1
	execution_version_number++;
   2da98:	483e      	ldr	r0, [pc, #248]	; (2db94 <_flash_used+0x90>)
	accepted = true;
   2da9a:	4a3f      	ldr	r2, [pc, #252]	; (2db98 <_flash_used+0x94>)
	if (execution_state != AWS_JOBS_IN_PROGRESS
   2da9c:	f8df a108 	ldr.w	sl, [pc, #264]	; 2dba8 <_flash_used+0xa4>
	accepted = true;
   2daa0:	7011      	strb	r1, [r2, #0]
	execution_version_number++;
   2daa2:	6802      	ldr	r2, [r0, #0]
   2daa4:	440a      	add	r2, r1
   2daa6:	6002      	str	r2, [r0, #0]
	if (execution_state != AWS_JOBS_IN_PROGRESS
   2daa8:	f89a 2000 	ldrb.w	r2, [sl]
   2daac:	4837      	ldr	r0, [pc, #220]	; (2db8c <_flash_used+0x88>)
   2daae:	428a      	cmp	r2, r1
   2dab0:	f890 9000 	ldrb.w	r9, [r0]
   2dab4:	d07a      	beq.n	2dbac <_flash_used+0xa8>
	    && fota_state == DOWNLOAD_FIRMWARE) {
   2dab6:	4589      	cmp	r9, r1
   2dab8:	f040 80a3 	bne.w	2dc02 <_flash_used+0xfe>
		LOG_INF("Start downloading firmware from %s/%s",
   2dabc:	2303      	movs	r3, #3
   2dabe:	f04f 0800 	mov.w	r8, #0
   2dac2:	4826      	ldr	r0, [pc, #152]	; (2db5c <_flash_used+0x58>)
   2dac4:	f363 0807 	bfi	r8, r3, #0, #8
		struct aws_fota_event aws_fota_evt = {
   2dac8:	e9c7 bb06 	strd	fp, fp, [r7, #24]
		execution_state = AWS_JOBS_IN_PROGRESS;
   2dacc:	f88a 9000 	strb.w	r9, [sl]
		LOG_INF("Start downloading firmware from %s/%s",
   2dad0:	f010 fa59 	bl	3df86 <log_strdup>
   2dad4:	4681      	mov	r9, r0
   2dad6:	4820      	ldr	r0, [pc, #128]	; (2db58 <_flash_used+0x54>)
   2dad8:	f010 fa55 	bl	3df86 <log_strdup>
   2dadc:	f364 188f 	bfi	r8, r4, #6, #10
   2dae0:	4603      	mov	r3, r0
   2dae2:	464a      	mov	r2, r9
   2dae4:	492d      	ldr	r1, [pc, #180]	; (2db9c <_flash_used+0x98>)
   2dae6:	4640      	mov	r0, r8
   2dae8:	f010 fa3b 	bl	3df62 <log_string_sync>
		err = fota_download_start(hostname, file_path, sec_tag);
   2daec:	f04f 32ff 	mov.w	r2, #4294967295
   2daf0:	4919      	ldr	r1, [pc, #100]	; (2db58 <_flash_used+0x54>)
   2daf2:	481a      	ldr	r0, [pc, #104]	; (2db5c <_flash_used+0x58>)
   2daf4:	f7ff fb86 	bl	2d204 <fota_download_start>
		if (err) {
   2daf8:	4683      	mov	fp, r0
   2dafa:	b148      	cbz	r0, 2db10 <_flash_used+0xc>
			LOG_ERR("Error (%d) when trying to start firmware "
   2dafc:	2201      	movs	r2, #1
   2dafe:	f04f 0000 	mov.w	r0, #0
   2db02:	f362 0007 	bfi	r0, r2, #0, #8
   2db06:	f364 108f 	bfi	r0, r4, #6, #10
   2db0a:	465a      	mov	r2, fp
   2db0c:	4924      	ldr	r1, [pc, #144]	; (2dba0 <_flash_used+0x9c>)
   2db0e:	e737      	b.n	2d980 <aws_fota_mqtt_evt_handler+0x190>
		callback(&aws_fota_evt);
   2db10:	4b24      	ldr	r3, [pc, #144]	; (2dba4 <_flash_used+0xa0>)
   2db12:	f107 0018 	add.w	r0, r7, #24
   2db16:	681b      	ldr	r3, [r3, #0]
   2db18:	4798      	blx	r3
   2db1a:	e7a1      	b.n	2da60 <aws_fota_mqtt_evt_handler+0x270>
   2db1c:	2002b6cd 	.word	0x2002b6cd
   2db20:	00041c2c 	.word	0x00041c2c
   2db24:	00041c4c 	.word	0x00041c4c
   2db28:	00047a76 	.word	0x00047a76
   2db2c:	2002b4f8 	.word	0x2002b4f8
   2db30:	00047a9f 	.word	0x00047a9f
   2db34:	00047aa5 	.word	0x00047aa5
   2db38:	00044d14 	.word	0x00044d14
   2db3c:	000469c8 	.word	0x000469c8
   2db40:	2002bca8 	.word	0x2002bca8
   2db44:	00047cdb 	.word	0x00047cdb
   2db48:	00047a4b 	.word	0x00047a4b
   2db4c:	00047acb 	.word	0x00047acb
   2db50:	00047ae2 	.word	0x00047ae2
   2db54:	00047b00 	.word	0x00047b00
   2db58:	2002b3f8 	.word	0x2002b3f8
   2db5c:	2002b58d 	.word	0x2002b58d
   2db60:	2002b68c 	.word	0x2002b68c
   2db64:	2002b762 	.word	0x2002b762
   2db68:	00047b23 	.word	0x00047b23
   2db6c:	00047b43 	.word	0x00047b43
   2db70:	00047a39 	.word	0x00047a39
   2db74:	00047b5e 	.word	0x00047b5e
   2db78:	00047b7d 	.word	0x00047b7d
   2db7c:	00047b8c 	.word	0x00047b8c
   2db80:	00047b9d 	.word	0x00047b9d
   2db84:	00047bae 	.word	0x00047bae
   2db88:	00047bd0 	.word	0x00047bd0
   2db8c:	2002b4f7 	.word	0x2002b4f7
   2db90:	20024790 	.word	0x20024790
   2db94:	20024798 	.word	0x20024798
   2db98:	200322d6 	.word	0x200322d6
   2db9c:	00047bf9 	.word	0x00047bf9
   2dba0:	00047c1f 	.word	0x00047c1f
   2dba4:	20024794 	.word	0x20024794
   2dba8:	2002b3f7 	.word	0x2002b3f7
		   && fota_state == APPLY_UPDATE) {
   2dbac:	f1b9 0f02 	cmp.w	r9, #2
   2dbb0:	f47f af56 	bne.w	2da60 <aws_fota_mqtt_evt_handler+0x270>
		LOG_INF("Firmware download completed");
   2dbb4:	2303      	movs	r3, #3
   2dbb6:	f04f 0000 	mov.w	r0, #0
   2dbba:	f363 0007 	bfi	r0, r3, #0, #8
   2dbbe:	f364 108f 	bfi	r0, r4, #6, #10
   2dbc2:	4978      	ldr	r1, [pc, #480]	; (2dda4 <_flash_used+0x2a0>)
   2dbc4:	f010 f9cd 	bl	3df62 <log_string_sync>
		err = update_job_execution(client, job_id, execution_state, "");
   2dbc8:	4649      	mov	r1, r9
   2dbca:	4640      	mov	r0, r8
		execution_state = AWS_JOBS_SUCCEEDED;
   2dbcc:	f88a 9000 	strb.w	r9, [sl]
		err = update_job_execution(client, job_id, execution_state, "");
   2dbd0:	f7ff fd1e 	bl	2d610 <update_job_execution.constprop.0>
		if (err) {
   2dbd4:	4683      	mov	fp, r0
   2dbd6:	2800      	cmp	r0, #0
   2dbd8:	f43f af42 	beq.w	2da60 <aws_fota_mqtt_evt_handler+0x270>
			LOG_ERR("Unable to update the job execution");
   2dbdc:	f04f 0000 	mov.w	r0, #0
   2dbe0:	2201      	movs	r2, #1
   2dbe2:	f362 0007 	bfi	r0, r2, #0, #8
   2dbe6:	f364 108f 	bfi	r0, r4, #6, #10
   2dbea:	496f      	ldr	r1, [pc, #444]	; (2dda8 <_flash_used+0x2a4>)
   2dbec:	f010 f9b9 	bl	3df62 <log_string_sync>
		if (err < 0) {
   2dbf0:	f1bb 0f00 	cmp.w	fp, #0
   2dbf4:	46b5      	mov	sp, r6
   2dbf6:	db6d      	blt.n	2dcd4 <_flash_used+0x1d0>
		} else if (err == 1) {
   2dbf8:	f1bb 0f01 	cmp.w	fp, #1
   2dbfc:	f47f af31 	bne.w	2da62 <aws_fota_mqtt_evt_handler+0x272>
   2dc00:	e60b      	b.n	2d81a <aws_fota_mqtt_evt_handler+0x2a>
	} else if (execution_state == AWS_JOBS_SUCCEEDED &&
   2dc02:	2a02      	cmp	r2, #2
   2dc04:	f47f af2c 	bne.w	2da60 <aws_fota_mqtt_evt_handler+0x270>
   2dc08:	f1b9 0f02 	cmp.w	r9, #2
   2dc0c:	f47f af28 	bne.w	2da60 <aws_fota_mqtt_evt_handler+0x270>
		callback(&aws_fota_evt);
   2dc10:	4b66      	ldr	r3, [pc, #408]	; (2ddac <_flash_used+0x2a8>)
		struct aws_fota_event aws_fota_evt = {
   2dc12:	e9c7 bb06 	strd	fp, fp, [r7, #24]
		callback(&aws_fota_evt);
   2dc16:	681b      	ldr	r3, [r3, #0]
		struct aws_fota_event aws_fota_evt = {
   2dc18:	7639      	strb	r1, [r7, #24]
		callback(&aws_fota_evt);
   2dc1a:	f107 0018 	add.w	r0, r7, #24
   2dc1e:	4798      	blx	r3
		LOG_INF("Job document updated with SUCCEDED");
   2dc20:	2303      	movs	r3, #3
   2dc22:	f04f 0000 	mov.w	r0, #0
   2dc26:	f363 0007 	bfi	r0, r3, #0, #8
   2dc2a:	f364 108f 	bfi	r0, r4, #6, #10
   2dc2e:	4960      	ldr	r1, [pc, #384]	; (2ddb0 <_flash_used+0x2ac>)
   2dc30:	f010 f997 	bl	3df62 <log_string_sync>
		LOG_INF("Ready to reboot");
   2dc34:	f04f 0000 	mov.w	r0, #0
   2dc38:	2303      	movs	r3, #3
   2dc3a:	f363 0007 	bfi	r0, r3, #0, #8
   2dc3e:	f364 108f 	bfi	r0, r4, #6, #10
   2dc42:	495c      	ldr	r1, [pc, #368]	; (2ddb4 <_flash_used+0x2b0>)
   2dc44:	e6b8      	b.n	2d9b8 <aws_fota_mqtt_evt_handler+0x1c8>
	} else if (doc_update_rejected) {
   2dc46:	687b      	ldr	r3, [r7, #4]
   2dc48:	2b00      	cmp	r3, #0
   2dc4a:	d048      	beq.n	2dcde <_flash_used+0x1da>
		LOG_ERR("Job document update was rejected");
   2dc4c:	2301      	movs	r3, #1
   2dc4e:	f04f 0000 	mov.w	r0, #0
   2dc52:	f363 0007 	bfi	r0, r3, #0, #8
   2dc56:	f364 108f 	bfi	r0, r4, #6, #10
   2dc5a:	4957      	ldr	r1, [pc, #348]	; (2ddb8 <_flash_used+0x2b4>)
   2dc5c:	f010 f981 	bl	3df62 <log_string_sync>
	struct aws_fota_event aws_fota_evt = { .id = AWS_FOTA_EVT_ERROR };
   2dc60:	697b      	ldr	r3, [r7, #20]
	LOG_ERR("Job document update was rejected");
   2dc62:	f04f 0000 	mov.w	r0, #0
	struct aws_fota_event aws_fota_evt = { .id = AWS_FOTA_EVT_ERROR };
   2dc66:	e9c7 3306 	strd	r3, r3, [r7, #24]
   2dc6a:	2302      	movs	r3, #2
   2dc6c:	763b      	strb	r3, [r7, #24]
	LOG_ERR("Job document update was rejected");
   2dc6e:	2301      	movs	r3, #1
   2dc70:	f363 0007 	bfi	r0, r3, #0, #8
   2dc74:	f364 108f 	bfi	r0, r4, #6, #10
   2dc78:	494f      	ldr	r1, [pc, #316]	; (2ddb8 <_flash_used+0x2b4>)
   2dc7a:	f010 f972 	bl	3df62 <log_string_sync>
	execution_version_number--;
   2dc7e:	4a4f      	ldr	r2, [pc, #316]	; (2ddbc <_flash_used+0x2b8>)
	int err = get_published_payload(client, payload_buf, payload_len);
   2dc80:	4651      	mov	r1, sl
	execution_version_number--;
   2dc82:	6813      	ldr	r3, [r2, #0]
	int err = get_published_payload(client, payload_buf, payload_len);
   2dc84:	4640      	mov	r0, r8
	execution_version_number--;
   2dc86:	3b01      	subs	r3, #1
   2dc88:	6013      	str	r3, [r2, #0]
	int err = get_published_payload(client, payload_buf, payload_len);
   2dc8a:	f7ff fd91 	bl	2d7b0 <get_published_payload.constprop.1>
	if (err) {
   2dc8e:	4683      	mov	fp, r0
   2dc90:	b148      	cbz	r0, 2dca6 <_flash_used+0x1a2>
		LOG_ERR("Error %d when getting the payload", err);
   2dc92:	2201      	movs	r2, #1
   2dc94:	f04f 0000 	mov.w	r0, #0
   2dc98:	f362 0007 	bfi	r0, r2, #0, #8
   2dc9c:	f364 108f 	bfi	r0, r4, #6, #10
   2dca0:	465a      	mov	r2, fp
   2dca2:	4947      	ldr	r1, [pc, #284]	; (2ddc0 <_flash_used+0x2bc>)
   2dca4:	e66c      	b.n	2d980 <aws_fota_mqtt_evt_handler+0x190>
	LOG_ERR("%s", log_strdup(payload_buf));
   2dca6:	2301      	movs	r3, #1
   2dca8:	f04f 0500 	mov.w	r5, #0
   2dcac:	4845      	ldr	r0, [pc, #276]	; (2ddc4 <_flash_used+0x2c0>)
   2dcae:	f363 0507 	bfi	r5, r3, #0, #8
   2dcb2:	f010 f968 	bl	3df86 <log_strdup>
   2dcb6:	f364 158f 	bfi	r5, r4, #6, #10
   2dcba:	4602      	mov	r2, r0
   2dcbc:	4942      	ldr	r1, [pc, #264]	; (2ddc8 <_flash_used+0x2c4>)
   2dcbe:	4628      	mov	r0, r5
   2dcc0:	f010 f94f 	bl	3df62 <log_string_sync>
	callback(&aws_fota_evt);
   2dcc4:	4b39      	ldr	r3, [pc, #228]	; (2ddac <_flash_used+0x2a8>)
   2dcc6:	f107 0018 	add.w	r0, r7, #24
   2dcca:	681b      	ldr	r3, [r3, #0]
   2dccc:	4798      	blx	r3
	return -EFAULT;
   2dcce:	f06f 0b0d 	mvn.w	fp, #13
   2dcd2:	46b5      	mov	sp, r6
}
   2dcd4:	4658      	mov	r0, fp
   2dcd6:	3724      	adds	r7, #36	; 0x24
   2dcd8:	46bd      	mov	sp, r7
   2dcda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LOG_DBG("received an unhandled MQTT publish event on topic: %s",
   2dcde:	2304      	movs	r3, #4
   2dce0:	f04f 0500 	mov.w	r5, #0
   2dce4:	4648      	mov	r0, r9
   2dce6:	f363 0507 	bfi	r5, r3, #0, #8
   2dcea:	f010 f94c 	bl	3df86 <log_strdup>
   2dcee:	f364 158f 	bfi	r5, r4, #6, #10
   2dcf2:	4603      	mov	r3, r0
   2dcf4:	4a35      	ldr	r2, [pc, #212]	; (2ddcc <_flash_used+0x2c8>)
   2dcf6:	4936      	ldr	r1, [pc, #216]	; (2ddd0 <_flash_used+0x2cc>)
   2dcf8:	4628      	mov	r0, r5
   2dcfa:	f010 f932 	bl	3df62 <log_string_sync>
	return 1;
   2dcfe:	46b5      	mov	sp, r6
   2dd00:	e58b      	b.n	2d81a <aws_fota_mqtt_evt_handler+0x2a>
		if (evt->result != 0) {
   2dd02:	69ca      	ldr	r2, [r1, #28]
   2dd04:	2a00      	cmp	r2, #0
   2dd06:	f43f ad88 	beq.w	2d81a <aws_fota_mqtt_evt_handler+0x2a>
			LOG_ERR("MQTT PUBACK error %d", evt->result);
   2dd0a:	2301      	movs	r3, #1
   2dd0c:	f04f 0000 	mov.w	r0, #0
   2dd10:	4930      	ldr	r1, [pc, #192]	; (2ddd4 <_flash_used+0x2d0>)
   2dd12:	f363 0007 	bfi	r0, r3, #0, #8
   2dd16:	4b30      	ldr	r3, [pc, #192]	; (2ddd8 <_flash_used+0x2d4>)
   2dd18:	1a5b      	subs	r3, r3, r1
   2dd1a:	08db      	lsrs	r3, r3, #3
   2dd1c:	f363 108f 	bfi	r0, r3, #6, #10
   2dd20:	492e      	ldr	r1, [pc, #184]	; (2dddc <_flash_used+0x2d8>)
   2dd22:	f010 f91e 	bl	3df62 <log_string_sync>
		return 0;
   2dd26:	f04f 0b00 	mov.w	fp, #0
   2dd2a:	e7d3      	b.n	2dcd4 <_flash_used+0x1d0>
		if (evt->result != 0) {
   2dd2c:	f8d1 b01c 	ldr.w	fp, [r1, #28]
   2dd30:	f1bb 0f00 	cmp.w	fp, #0
   2dd34:	d1ce      	bne.n	2dcd4 <_flash_used+0x1d0>
		if (evt->param.suback.message_id == SUBSCRIBE_NOTIFY_NEXT) {
   2dd36:	888a      	ldrh	r2, [r1, #4]
   2dd38:	f5b2 6f04 	cmp.w	r2, #2112	; 0x840
   2dd3c:	d113      	bne.n	2dd66 <_flash_used+0x262>
			LOG_INF("subscribed to notify-next topic");
   2dd3e:	2303      	movs	r3, #3
   2dd40:	f04f 0000 	mov.w	r0, #0
   2dd44:	4a23      	ldr	r2, [pc, #140]	; (2ddd4 <_flash_used+0x2d0>)
   2dd46:	f363 0007 	bfi	r0, r3, #0, #8
   2dd4a:	4b23      	ldr	r3, [pc, #140]	; (2ddd8 <_flash_used+0x2d4>)
   2dd4c:	4924      	ldr	r1, [pc, #144]	; (2dde0 <_flash_used+0x2dc>)
   2dd4e:	1a9b      	subs	r3, r3, r2
   2dd50:	08db      	lsrs	r3, r3, #3
   2dd52:	f363 108f 	bfi	r0, r3, #6, #10
   2dd56:	f010 f904 	bl	3df62 <log_string_sync>
			err = aws_jobs_get_job_execution(client, "$next",
   2dd5a:	4a22      	ldr	r2, [pc, #136]	; (2dde4 <_flash_used+0x2e0>)
   2dd5c:	4922      	ldr	r1, [pc, #136]	; (2dde8 <_flash_used+0x2e4>)
   2dd5e:	4640      	mov	r0, r8
   2dd60:	f7ff fc40 	bl	2d5e4 <aws_jobs_get_job_execution>
   2dd64:	e689      	b.n	2da7a <aws_fota_mqtt_evt_handler+0x28a>
		if (evt->param.suback.message_id == SUBSCRIBE_GET) {
   2dd66:	f640 0141 	movw	r1, #2113	; 0x841
   2dd6a:	428a      	cmp	r2, r1
   2dd6c:	d10c      	bne.n	2dd88 <_flash_used+0x284>
			LOG_INF("subscribed to get topic");
   2dd6e:	2203      	movs	r2, #3
   2dd70:	f04f 0000 	mov.w	r0, #0
   2dd74:	4917      	ldr	r1, [pc, #92]	; (2ddd4 <_flash_used+0x2d0>)
   2dd76:	f362 0007 	bfi	r0, r2, #0, #8
   2dd7a:	4a17      	ldr	r2, [pc, #92]	; (2ddd8 <_flash_used+0x2d4>)
   2dd7c:	1a52      	subs	r2, r2, r1
   2dd7e:	08d2      	lsrs	r2, r2, #3
   2dd80:	f362 108f 	bfi	r0, r2, #6, #10
   2dd84:	4919      	ldr	r1, [pc, #100]	; (2ddec <_flash_used+0x2e8>)
   2dd86:	e55c      	b.n	2d842 <aws_fota_mqtt_evt_handler+0x52>
		if ((fota_state == DOWNLOAD_FIRMWARE) &&
   2dd88:	4b19      	ldr	r3, [pc, #100]	; (2ddf0 <_flash_used+0x2ec>)
   2dd8a:	7819      	ldrb	r1, [r3, #0]
   2dd8c:	2901      	cmp	r1, #1
   2dd8e:	f47f ad44 	bne.w	2d81a <aws_fota_mqtt_evt_handler+0x2a>
   2dd92:	f640 0343 	movw	r3, #2115	; 0x843
   2dd96:	429a      	cmp	r2, r3
   2dd98:	f47f ad3f 	bne.w	2d81a <aws_fota_mqtt_evt_handler+0x2a>
			err = update_job_execution(client, job_id,
   2dd9c:	f7ff fc38 	bl	2d610 <update_job_execution.constprop.0>
   2dda0:	e66b      	b.n	2da7a <aws_fota_mqtt_evt_handler+0x28a>
   2dda2:	bf00      	nop
   2dda4:	00047c51 	.word	0x00047c51
   2dda8:	00047c6d 	.word	0x00047c6d
   2ddac:	20024794 	.word	0x20024794
   2ddb0:	00047c90 	.word	0x00047c90
   2ddb4:	00047cb3 	.word	0x00047cb3
   2ddb8:	00047cc3 	.word	0x00047cc3
   2ddbc:	20024798 	.word	0x20024798
   2ddc0:	00047ce4 	.word	0x00047ce4
   2ddc4:	2002b762 	.word	0x2002b762
   2ddc8:	00048487 	.word	0x00048487
   2ddcc:	00047a4b 	.word	0x00047a4b
   2ddd0:	00047d06 	.word	0x00047d06
   2ddd4:	00041c2c 	.word	0x00041c2c
   2ddd8:	00041c4c 	.word	0x00041c4c
   2dddc:	00047d40 	.word	0x00047d40
   2dde0:	00047d55 	.word	0x00047d55
   2dde4:	2002b4f8 	.word	0x2002b4f8
   2dde8:	00047a9f 	.word	0x00047a9f
   2ddec:	00047d75 	.word	0x00047d75
   2ddf0:	2002b4f7 	.word	0x2002b4f7

0002ddf4 <aws_fota_init>:

int aws_fota_init(struct mqtt_client *const client,
		  aws_fota_callback_t evt_handler)
{
   2ddf4:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || evt_handler == NULL) {
   2ddf6:	b1d0      	cbz	r0, 2de2e <aws_fota_init+0x3a>
   2ddf8:	b1c9      	cbz	r1, 2de2e <aws_fota_init+0x3a>
		return -EINVAL;
	}

	/* Store client to make it available in event handlers. */
	c = client;
   2ddfa:	4b0e      	ldr	r3, [pc, #56]	; (2de34 <aws_fota_init+0x40>)
   2ddfc:	6018      	str	r0, [r3, #0]
	callback = evt_handler;
   2ddfe:	4b0e      	ldr	r3, [pc, #56]	; (2de38 <aws_fota_init+0x44>)

	err = fota_download_init(http_fota_handler);
   2de00:	480e      	ldr	r0, [pc, #56]	; (2de3c <aws_fota_init+0x48>)
	callback = evt_handler;
   2de02:	6019      	str	r1, [r3, #0]
	err = fota_download_init(http_fota_handler);
   2de04:	f7ff fa2a 	bl	2d25c <fota_download_init>
	if (err != 0) {
   2de08:	4604      	mov	r4, r0
   2de0a:	b170      	cbz	r0, 2de2a <aws_fota_init+0x36>
		LOG_ERR("fota_download_init error %d", err);
   2de0c:	2301      	movs	r3, #1
   2de0e:	f04f 0000 	mov.w	r0, #0
   2de12:	4a0b      	ldr	r2, [pc, #44]	; (2de40 <aws_fota_init+0x4c>)
   2de14:	f363 0007 	bfi	r0, r3, #0, #8
   2de18:	4b0a      	ldr	r3, [pc, #40]	; (2de44 <aws_fota_init+0x50>)
   2de1a:	490b      	ldr	r1, [pc, #44]	; (2de48 <aws_fota_init+0x54>)
   2de1c:	1a9b      	subs	r3, r3, r2
   2de1e:	08db      	lsrs	r3, r3, #3
   2de20:	f363 108f 	bfi	r0, r3, #6, #10
   2de24:	4622      	mov	r2, r4
   2de26:	f010 f89c 	bl	3df62 <log_string_sync>
		return err;
	}

	return 0;
}
   2de2a:	4620      	mov	r0, r4
   2de2c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2de2e:	f06f 0415 	mvn.w	r4, #21
   2de32:	e7fa      	b.n	2de2a <aws_fota_init+0x36>
   2de34:	20024790 	.word	0x20024790
   2de38:	20024794 	.word	0x20024794
   2de3c:	0002d6b9 	.word	0x0002d6b9
   2de40:	00041c2c 	.word	0x00041c2c
   2de44:	00041c4c 	.word	0x00041c4c
   2de48:	00047a5a 	.word	0x00047a5a

0002de4c <aws_fota_get_job_id>:

int aws_fota_get_job_id(u8_t *const job_id_buf, size_t buf_size)
{
	if ((job_id_buf == NULL) || (buf_size == 0)) {
   2de4c:	b120      	cbz	r0, 2de58 <aws_fota_get_job_id+0xc>
   2de4e:	b119      	cbz	r1, 2de58 <aws_fota_get_job_id+0xc>
		return -EINVAL;
	}
	return snprintf(job_id_buf, buf_size, "%s", job_id);
   2de50:	4b03      	ldr	r3, [pc, #12]	; (2de60 <aws_fota_get_job_id+0x14>)
   2de52:	4a04      	ldr	r2, [pc, #16]	; (2de64 <aws_fota_get_job_id+0x18>)
   2de54:	f00e b9c0 	b.w	3c1d8 <sniprintf>
}
   2de58:	f06f 0015 	mvn.w	r0, #21
   2de5c:	4770      	bx	lr
   2de5e:	bf00      	nop
   2de60:	2002b68c 	.word	0x2002b68c
   2de64:	00048487 	.word	0x00048487

0002de68 <aws_fota_parse_DescribeJobExecution_rsp>:
					   u32_t payload_len,
					   char *job_id_buf,
					   char *hostname_buf,
					   char *file_path_buf,
					   int *execution_version_number)
{
   2de68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2de6c:	4617      	mov	r7, r2
   2de6e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   2de72:	4698      	mov	r8, r3
	if (job_document == NULL
   2de74:	2800      	cmp	r0, #0
   2de76:	d065      	beq.n	2df44 <aws_fota_parse_DescribeJobExecution_rsp+0xdc>
	    || job_id_buf == NULL
   2de78:	2a00      	cmp	r2, #0
   2de7a:	d063      	beq.n	2df44 <aws_fota_parse_DescribeJobExecution_rsp+0xdc>
	    || hostname_buf == NULL
   2de7c:	2b00      	cmp	r3, #0
   2de7e:	d061      	beq.n	2df44 <aws_fota_parse_DescribeJobExecution_rsp+0xdc>
	    || file_path_buf == NULL
   2de80:	2e00      	cmp	r6, #0
   2de82:	d05f      	beq.n	2df44 <aws_fota_parse_DescribeJobExecution_rsp+0xdc>
	    || execution_version_number == NULL) {
   2de84:	2d00      	cmp	r5, #0
   2de86:	d05d      	beq.n	2df44 <aws_fota_parse_DescribeJobExecution_rsp+0xdc>
		return -EINVAL;
	}

	int ret;

	cJSON *json_data = cJSON_Parse(job_document);
   2de88:	f011 fa0a 	bl	3f2a0 <cJSON_Parse>

	if (json_data == NULL) {
   2de8c:	4682      	mov	sl, r0
   2de8e:	b938      	cbnz	r0, 2dea0 <aws_fota_parse_DescribeJobExecution_rsp+0x38>
		ret = -ENODATA;
   2de90:	f06f 043c 	mvn.w	r4, #60	; 0x3c
		goto cleanup;
	}

	ret = 1;
cleanup:
	cJSON_Delete(json_data);
   2de94:	4650      	mov	r0, sl
   2de96:	f7f8 ff15 	bl	26cc4 <cJSON_Delete>
	return ret;
}
   2de9a:	4620      	mov	r0, r4
   2de9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cJSON *execution = cJSON_GetObjectItemCaseSensitive(json_data,
   2dea0:	492a      	ldr	r1, [pc, #168]	; (2df4c <aws_fota_parse_DescribeJobExecution_rsp+0xe4>)
   2dea2:	f011 fa0f 	bl	3f2c4 <cJSON_GetObjectItemCaseSensitive>
	if (execution == NULL) {
   2dea6:	4604      	mov	r4, r0
   2dea8:	2800      	cmp	r0, #0
   2deaa:	d0f3      	beq.n	2de94 <aws_fota_parse_DescribeJobExecution_rsp+0x2c>
	cJSON *job_id = cJSON_GetObjectItemCaseSensitive(execution, "jobId");
   2deac:	4928      	ldr	r1, [pc, #160]	; (2df50 <aws_fota_parse_DescribeJobExecution_rsp+0xe8>)
   2deae:	f011 fa09 	bl	3f2c4 <cJSON_GetObjectItemCaseSensitive>
   2deb2:	4681      	mov	r9, r0
	if (cJSON_GetStringValue(job_id) != NULL) {
   2deb4:	f011 fa54 	bl	3f360 <cJSON_GetStringValue>
   2deb8:	2800      	cmp	r0, #0
   2deba:	d0e9      	beq.n	2de90 <aws_fota_parse_DescribeJobExecution_rsp+0x28>
		strncpy_nullterm(job_id_buf, job_id->valuestring,
   2debc:	4638      	mov	r0, r7
   2debe:	2241      	movs	r2, #65	; 0x41
   2dec0:	f8d9 1010 	ldr.w	r1, [r9, #16]
   2dec4:	f012 f992 	bl	401ec <strncpy_nullterm>
	cJSON *job_data = cJSON_GetObjectItemCaseSensitive(execution,
   2dec8:	4922      	ldr	r1, [pc, #136]	; (2df54 <aws_fota_parse_DescribeJobExecution_rsp+0xec>)
   2deca:	4620      	mov	r0, r4
   2decc:	f011 f9fa 	bl	3f2c4 <cJSON_GetObjectItemCaseSensitive>
   2ded0:	4607      	mov	r7, r0
	if (!cJSON_IsObject(job_data)) {
   2ded2:	f011 fa4c 	bl	3f36e <cJSON_IsObject>
   2ded6:	2800      	cmp	r0, #0
   2ded8:	d0da      	beq.n	2de90 <aws_fota_parse_DescribeJobExecution_rsp+0x28>
	cJSON *location = cJSON_GetObjectItemCaseSensitive(job_data,
   2deda:	4638      	mov	r0, r7
   2dedc:	491e      	ldr	r1, [pc, #120]	; (2df58 <aws_fota_parse_DescribeJobExecution_rsp+0xf0>)
   2dede:	f011 f9f1 	bl	3f2c4 <cJSON_GetObjectItemCaseSensitive>
   2dee2:	4607      	mov	r7, r0
	if (!cJSON_IsObject(location)) {
   2dee4:	f011 fa43 	bl	3f36e <cJSON_IsObject>
   2dee8:	2800      	cmp	r0, #0
   2deea:	d0d1      	beq.n	2de90 <aws_fota_parse_DescribeJobExecution_rsp+0x28>
	cJSON *hostname = cJSON_GetObjectItemCaseSensitive(location, "host");
   2deec:	491b      	ldr	r1, [pc, #108]	; (2df5c <aws_fota_parse_DescribeJobExecution_rsp+0xf4>)
   2deee:	4638      	mov	r0, r7
   2def0:	f011 f9e8 	bl	3f2c4 <cJSON_GetObjectItemCaseSensitive>
	cJSON *path = cJSON_GetObjectItemCaseSensitive(location, "path");
   2def4:	491a      	ldr	r1, [pc, #104]	; (2df60 <aws_fota_parse_DescribeJobExecution_rsp+0xf8>)
	cJSON *hostname = cJSON_GetObjectItemCaseSensitive(location, "host");
   2def6:	4681      	mov	r9, r0
	cJSON *path = cJSON_GetObjectItemCaseSensitive(location, "path");
   2def8:	4638      	mov	r0, r7
   2defa:	f011 f9e3 	bl	3f2c4 <cJSON_GetObjectItemCaseSensitive>
   2defe:	4607      	mov	r7, r0
	if ((cJSON_GetStringValue(hostname) != NULL)
   2df00:	4648      	mov	r0, r9
   2df02:	f011 fa2d 	bl	3f360 <cJSON_GetStringValue>
   2df06:	2800      	cmp	r0, #0
   2df08:	d0c2      	beq.n	2de90 <aws_fota_parse_DescribeJobExecution_rsp+0x28>
	   && (cJSON_GetStringValue(path) != NULL)) {
   2df0a:	4638      	mov	r0, r7
   2df0c:	f011 fa28 	bl	3f360 <cJSON_GetStringValue>
   2df10:	2800      	cmp	r0, #0
   2df12:	d0bd      	beq.n	2de90 <aws_fota_parse_DescribeJobExecution_rsp+0x28>
		strncpy_nullterm(hostname_buf, hostname->valuestring,
   2df14:	22ff      	movs	r2, #255	; 0xff
   2df16:	f8d9 1010 	ldr.w	r1, [r9, #16]
   2df1a:	4640      	mov	r0, r8
   2df1c:	f012 f966 	bl	401ec <strncpy_nullterm>
		strncpy_nullterm(file_path_buf, path->valuestring,
   2df20:	22ff      	movs	r2, #255	; 0xff
   2df22:	6939      	ldr	r1, [r7, #16]
   2df24:	4630      	mov	r0, r6
   2df26:	f012 f961 	bl	401ec <strncpy_nullterm>
	cJSON *version_number = cJSON_GetObjectItemCaseSensitive(
   2df2a:	4620      	mov	r0, r4
   2df2c:	490d      	ldr	r1, [pc, #52]	; (2df64 <aws_fota_parse_DescribeJobExecution_rsp+0xfc>)
   2df2e:	f011 f9c9 	bl	3f2c4 <cJSON_GetObjectItemCaseSensitive>
   2df32:	4604      	mov	r4, r0
	if (cJSON_IsNumber(version_number)) {
   2df34:	f011 fa06 	bl	3f344 <cJSON_IsNumber>
   2df38:	2800      	cmp	r0, #0
   2df3a:	d0a9      	beq.n	2de90 <aws_fota_parse_DescribeJobExecution_rsp+0x28>
		*execution_version_number = version_number->valueint;
   2df3c:	6963      	ldr	r3, [r4, #20]
	ret = 1;
   2df3e:	2401      	movs	r4, #1
		*execution_version_number = version_number->valueint;
   2df40:	602b      	str	r3, [r5, #0]
	ret = 1;
   2df42:	e7a7      	b.n	2de94 <aws_fota_parse_DescribeJobExecution_rsp+0x2c>
		return -EINVAL;
   2df44:	f06f 0415 	mvn.w	r4, #21
   2df48:	e7a7      	b.n	2de9a <aws_fota_parse_DescribeJobExecution_rsp+0x32>
   2df4a:	bf00      	nop
   2df4c:	00047c86 	.word	0x00047c86
   2df50:	00047e74 	.word	0x00047e74
   2df54:	00047e7a 	.word	0x00047e7a
   2df58:	00047e86 	.word	0x00047e86
   2df5c:	00047625 	.word	0x00047625
   2df60:	00047e8f 	.word	0x00047e8f
   2df64:	00047e94 	.word	0x00047e94

0002df68 <dfu_target_img_type>:
LOG_MODULE_REGISTER(dfu_target, CONFIG_DFU_TARGET_LOG_LEVEL);

static const struct dfu_target *current_target;

int dfu_target_img_type(const void *const buf, size_t len)
{
   2df68:	b538      	push	{r3, r4, r5, lr}
   2df6a:	4605      	mov	r5, r0
   2df6c:	460c      	mov	r4, r1
#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (dfu_target_mcuboot_identify(buf)) {
   2df6e:	f000 fc0b 	bl	2e788 <dfu_target_mcuboot_identify>
   2df72:	b9a0      	cbnz	r0, 2df9e <dfu_target_img_type+0x36>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM
	if (dfu_target_modem_identify(buf)) {
   2df74:	4628      	mov	r0, r5
   2df76:	f000 f9b1 	bl	2e2dc <dfu_target_modem_identify>
   2df7a:	b990      	cbnz	r0, 2dfa2 <dfu_target_img_type+0x3a>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
	}
#endif
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   2df7c:	2c1f      	cmp	r4, #31
   2df7e:	d912      	bls.n	2dfa6 <dfu_target_img_type+0x3e>
		return -EAGAIN;
	}

	LOG_ERR("No supported image type found");
   2df80:	2301      	movs	r3, #1
   2df82:	4a0a      	ldr	r2, [pc, #40]	; (2dfac <dfu_target_img_type+0x44>)
   2df84:	f363 0007 	bfi	r0, r3, #0, #8
   2df88:	4b09      	ldr	r3, [pc, #36]	; (2dfb0 <dfu_target_img_type+0x48>)
   2df8a:	490a      	ldr	r1, [pc, #40]	; (2dfb4 <dfu_target_img_type+0x4c>)
   2df8c:	1a9b      	subs	r3, r3, r2
   2df8e:	08db      	lsrs	r3, r3, #3
   2df90:	f363 108f 	bfi	r0, r3, #6, #10
   2df94:	f00f ffe5 	bl	3df62 <log_string_sync>
	return -ENOTSUP;
   2df98:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2df9c:	bd38      	pop	{r3, r4, r5, pc}
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   2df9e:	2001      	movs	r0, #1
   2dfa0:	e7fc      	b.n	2df9c <dfu_target_img_type+0x34>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
   2dfa2:	2002      	movs	r0, #2
   2dfa4:	e7fa      	b.n	2df9c <dfu_target_img_type+0x34>
		return -EAGAIN;
   2dfa6:	f06f 000a 	mvn.w	r0, #10
   2dfaa:	e7f7      	b.n	2df9c <dfu_target_img_type+0x34>
   2dfac:	00041c2c 	.word	0x00041c2c
   2dfb0:	00041c74 	.word	0x00041c74
   2dfb4:	00047ec0 	.word	0x00047ec0

0002dfb8 <dfu_target_init>:
int dfu_target_init(int img_type, size_t file_size, dfu_target_callback_t cb)
{
	const struct dfu_target *new_target = NULL;

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   2dfb8:	2801      	cmp	r0, #1
{
   2dfba:	b570      	push	{r4, r5, r6, lr}
   2dfbc:	460d      	mov	r5, r1
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   2dfbe:	d012      	beq.n	2dfe6 <dfu_target_init+0x2e>
		new_target = &dfu_target_mcuboot;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM
	if (img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   2dfc0:	2802      	cmp	r0, #2
   2dfc2:	d01e      	beq.n	2e002 <dfu_target_init+0x4a>
		new_target = &dfu_target_modem;
	}
#endif
	if (new_target == NULL) {
		LOG_ERR("Unknown image type");
   2dfc4:	2301      	movs	r3, #1
   2dfc6:	f04f 0000 	mov.w	r0, #0
   2dfca:	4a10      	ldr	r2, [pc, #64]	; (2e00c <dfu_target_init+0x54>)
   2dfcc:	f363 0007 	bfi	r0, r3, #0, #8
   2dfd0:	4b0f      	ldr	r3, [pc, #60]	; (2e010 <dfu_target_init+0x58>)
   2dfd2:	4910      	ldr	r1, [pc, #64]	; (2e014 <dfu_target_init+0x5c>)
   2dfd4:	1a9b      	subs	r3, r3, r2
   2dfd6:	08db      	lsrs	r3, r3, #3
   2dfd8:	f363 108f 	bfi	r0, r3, #6, #10
   2dfdc:	f00f ffc1 	bl	3df62 <log_string_sync>
		return -ENOTSUP;
   2dfe0:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	current_target = new_target;

	return current_target->init(file_size, cb);
}
   2dfe4:	bd70      	pop	{r4, r5, r6, pc}
		new_target = &dfu_target_mcuboot;
   2dfe6:	4b0c      	ldr	r3, [pc, #48]	; (2e018 <dfu_target_init+0x60>)
	if (new_target == current_target
   2dfe8:	4c0c      	ldr	r4, [pc, #48]	; (2e01c <dfu_target_init+0x64>)
   2dfea:	6821      	ldr	r1, [r4, #0]
   2dfec:	4299      	cmp	r1, r3
   2dfee:	d101      	bne.n	2dff4 <dfu_target_init+0x3c>
	   && img_type != DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   2dff0:	2802      	cmp	r0, #2
   2dff2:	d108      	bne.n	2e006 <dfu_target_init+0x4e>
	current_target = new_target;
   2dff4:	6023      	str	r3, [r4, #0]
	return current_target->init(file_size, cb);
   2dff6:	4628      	mov	r0, r5
}
   2dff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return current_target->init(file_size, cb);
   2dffc:	681b      	ldr	r3, [r3, #0]
   2dffe:	4611      	mov	r1, r2
   2e000:	4718      	bx	r3
		new_target = &dfu_target_modem;
   2e002:	4b07      	ldr	r3, [pc, #28]	; (2e020 <dfu_target_init+0x68>)
   2e004:	e7f0      	b.n	2dfe8 <dfu_target_init+0x30>
		return 0;
   2e006:	2000      	movs	r0, #0
   2e008:	e7ec      	b.n	2dfe4 <dfu_target_init+0x2c>
   2e00a:	bf00      	nop
   2e00c:	00041c2c 	.word	0x00041c2c
   2e010:	00041c74 	.word	0x00041c74
   2e014:	00047ede 	.word	0x00047ede
   2e018:	00042630 	.word	0x00042630
   2e01c:	2002479c 	.word	0x2002479c
   2e020:	00042640 	.word	0x00042640

0002e024 <dfu_target_offset_get>:

int dfu_target_offset_get(size_t *offset)
{
	if (current_target == NULL) {
   2e024:	4b03      	ldr	r3, [pc, #12]	; (2e034 <dfu_target_offset_get+0x10>)
   2e026:	681b      	ldr	r3, [r3, #0]
   2e028:	b10b      	cbz	r3, 2e02e <dfu_target_offset_get+0xa>
		return -EACCES;
	}

	return current_target->offset_get(offset);
   2e02a:	685b      	ldr	r3, [r3, #4]
   2e02c:	4718      	bx	r3
}
   2e02e:	f06f 000c 	mvn.w	r0, #12
   2e032:	4770      	bx	lr
   2e034:	2002479c 	.word	0x2002479c

0002e038 <dfu_target_write>:

int dfu_target_write(const void *const buf, size_t len)
{
	if (current_target == NULL || buf == NULL) {
   2e038:	4b04      	ldr	r3, [pc, #16]	; (2e04c <dfu_target_write+0x14>)
   2e03a:	681b      	ldr	r3, [r3, #0]
   2e03c:	b113      	cbz	r3, 2e044 <dfu_target_write+0xc>
   2e03e:	b108      	cbz	r0, 2e044 <dfu_target_write+0xc>
		return -EACCES;
	}

	return current_target->write(buf, len);
   2e040:	689b      	ldr	r3, [r3, #8]
   2e042:	4718      	bx	r3
}
   2e044:	f06f 000c 	mvn.w	r0, #12
   2e048:	4770      	bx	lr
   2e04a:	bf00      	nop
   2e04c:	2002479c 	.word	0x2002479c

0002e050 <dfu_target_done>:

int dfu_target_done(bool successful)
{
   2e050:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (current_target == NULL) {
   2e052:	4d0f      	ldr	r5, [pc, #60]	; (2e090 <dfu_target_done+0x40>)
{
   2e054:	4606      	mov	r6, r0
	if (current_target == NULL) {
   2e056:	682b      	ldr	r3, [r5, #0]
   2e058:	b1bb      	cbz	r3, 2e08a <dfu_target_done+0x3a>
		return -EACCES;
	}

	err = current_target->done(successful);
   2e05a:	68db      	ldr	r3, [r3, #12]
   2e05c:	4798      	blx	r3
	if (err != 0) {
   2e05e:	4604      	mov	r4, r0
   2e060:	b178      	cbz	r0, 2e082 <dfu_target_done+0x32>
		LOG_ERR("Unable to clean up dfu_target");
   2e062:	2301      	movs	r3, #1
   2e064:	f04f 0000 	mov.w	r0, #0
   2e068:	4a0a      	ldr	r2, [pc, #40]	; (2e094 <dfu_target_done+0x44>)
   2e06a:	f363 0007 	bfi	r0, r3, #0, #8
   2e06e:	4b0a      	ldr	r3, [pc, #40]	; (2e098 <dfu_target_done+0x48>)
   2e070:	490a      	ldr	r1, [pc, #40]	; (2e09c <dfu_target_done+0x4c>)
   2e072:	1a9b      	subs	r3, r3, r2
   2e074:	08db      	lsrs	r3, r3, #3
   2e076:	f363 108f 	bfi	r0, r3, #6, #10
   2e07a:	f00f ff72 	bl	3df62 <log_string_sync>
	if (successful) {
		current_target = NULL;
	}

	return 0;
}
   2e07e:	4620      	mov	r0, r4
   2e080:	bd70      	pop	{r4, r5, r6, pc}
	if (successful) {
   2e082:	2e00      	cmp	r6, #0
   2e084:	d0fb      	beq.n	2e07e <dfu_target_done+0x2e>
		current_target = NULL;
   2e086:	6028      	str	r0, [r5, #0]
   2e088:	e7f9      	b.n	2e07e <dfu_target_done+0x2e>
		return -EACCES;
   2e08a:	f06f 040c 	mvn.w	r4, #12
   2e08e:	e7f6      	b.n	2e07e <dfu_target_done+0x2e>
   2e090:	2002479c 	.word	0x2002479c
   2e094:	00041c2c 	.word	0x00041c2c
   2e098:	00041c74 	.word	0x00041c74
   2e09c:	00047ea2 	.word	0x00047ea2

0002e0a0 <getsockopt.constprop.2>:
static inline int getsockopt(int sock, int level, int optname,
   2e0a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   2e0a4:	4c15      	ldr	r4, [pc, #84]	; (2e0fc <getsockopt.constprop.2+0x5c>)
static inline int getsockopt(int sock, int level, int optname,
   2e0a6:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   2e0a8:	6823      	ldr	r3, [r4, #0]
static inline int getsockopt(int sock, int level, int optname,
   2e0aa:	4605      	mov	r5, r0
   2e0ac:	460e      	mov	r6, r1
   2e0ae:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   2e0b0:	b94b      	cbnz	r3, 2e0c6 <getsockopt.constprop.2+0x26>
   2e0b2:	4913      	ldr	r1, [pc, #76]	; (2e100 <getsockopt.constprop.2+0x60>)
   2e0b4:	4813      	ldr	r0, [pc, #76]	; (2e104 <getsockopt.constprop.2+0x64>)
   2e0b6:	2360      	movs	r3, #96	; 0x60
   2e0b8:	4a13      	ldr	r2, [pc, #76]	; (2e108 <getsockopt.constprop.2+0x68>)
   2e0ba:	f00f feee 	bl	3de9a <printk>
   2e0be:	2160      	movs	r1, #96	; 0x60
   2e0c0:	4811      	ldr	r0, [pc, #68]	; (2e108 <getsockopt.constprop.2+0x68>)
   2e0c2:	f00f ff3d 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getsockopt);
   2e0c6:	6823      	ldr	r3, [r4, #0]
   2e0c8:	6a1b      	ldr	r3, [r3, #32]
   2e0ca:	b94b      	cbnz	r3, 2e0e0 <getsockopt.constprop.2+0x40>
   2e0cc:	490f      	ldr	r1, [pc, #60]	; (2e10c <getsockopt.constprop.2+0x6c>)
   2e0ce:	480d      	ldr	r0, [pc, #52]	; (2e104 <getsockopt.constprop.2+0x64>)
   2e0d0:	2361      	movs	r3, #97	; 0x61
   2e0d2:	4a0d      	ldr	r2, [pc, #52]	; (2e108 <getsockopt.constprop.2+0x68>)
   2e0d4:	f00f fee1 	bl	3de9a <printk>
   2e0d8:	2161      	movs	r1, #97	; 0x61
   2e0da:	480b      	ldr	r0, [pc, #44]	; (2e108 <getsockopt.constprop.2+0x68>)
   2e0dc:	f00f ff30 	bl	3df40 <assert_post_action>
	return socket_ops->getsockopt(sock, level, optname, optval, optlen);
   2e0e0:	6823      	ldr	r3, [r4, #0]
   2e0e2:	f8cd 8000 	str.w	r8, [sp]
   2e0e6:	6a1c      	ldr	r4, [r3, #32]
   2e0e8:	4632      	mov	r2, r6
   2e0ea:	463b      	mov	r3, r7
   2e0ec:	f240 2103 	movw	r1, #515	; 0x203
   2e0f0:	4628      	mov	r0, r5
   2e0f2:	47a0      	blx	r4
}
   2e0f4:	b002      	add	sp, #8
   2e0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e0fa:	bf00      	nop
   2e0fc:	2002389c 	.word	0x2002389c
   2e100:	000433f1 	.word	0x000433f1
   2e104:	00043278 	.word	0x00043278
   2e108:	000433c1 	.word	0x000433c1
   2e10c:	00048161 	.word	0x00048161

0002e110 <get_modem_error>:
{
	int rc;
	int err = 0;
	socklen_t len;

	len = sizeof(err);
   2e110:	2200      	movs	r2, #0
   2e112:	2304      	movs	r3, #4
{
   2e114:	b513      	push	{r0, r1, r4, lr}
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   2e116:	480f      	ldr	r0, [pc, #60]	; (2e154 <get_modem_error+0x44>)
	len = sizeof(err);
   2e118:	e9cd 2300 	strd	r2, r3, [sp]
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   2e11c:	2114      	movs	r1, #20
   2e11e:	446b      	add	r3, sp
   2e120:	466a      	mov	r2, sp
   2e122:	6800      	ldr	r0, [r0, #0]
   2e124:	f7ff ffbc 	bl	2e0a0 <getsockopt.constprop.2>
	if (rc) {
   2e128:	b188      	cbz	r0, 2e14e <get_modem_error+0x3e>
		LOG_ERR("Unable to fetch modem error, errno %d", errno);
   2e12a:	2301      	movs	r3, #1
   2e12c:	f04f 0400 	mov.w	r4, #0
   2e130:	4a09      	ldr	r2, [pc, #36]	; (2e158 <get_modem_error+0x48>)
   2e132:	f363 0407 	bfi	r4, r3, #0, #8
   2e136:	4b09      	ldr	r3, [pc, #36]	; (2e15c <get_modem_error+0x4c>)
   2e138:	1a9b      	subs	r3, r3, r2
   2e13a:	08db      	lsrs	r3, r3, #3
   2e13c:	f363 148f 	bfi	r4, r3, #6, #10
   2e140:	f010 f8fb 	bl	3e33a <__errno>
   2e144:	4906      	ldr	r1, [pc, #24]	; (2e160 <get_modem_error+0x50>)
   2e146:	6802      	ldr	r2, [r0, #0]
   2e148:	4620      	mov	r0, r4
   2e14a:	f00f ff0a 	bl	3df62 <log_string_sync>
	}

	return err;
}
   2e14e:	9800      	ldr	r0, [sp, #0]
   2e150:	b002      	add	sp, #8
   2e152:	bd10      	pop	{r4, pc}
   2e154:	200247a4 	.word	0x200247a4
   2e158:	00041c2c 	.word	0x00041c2c
   2e15c:	00041c84 	.word	0x00041c84
   2e160:	0004813b 	.word	0x0004813b

0002e164 <setsockopt.constprop.3>:
static inline int setsockopt(int sock, int level, int optname,
   2e164:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   2e168:	4c15      	ldr	r4, [pc, #84]	; (2e1c0 <setsockopt.constprop.3+0x5c>)
static inline int setsockopt(int sock, int level, int optname,
   2e16a:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   2e16c:	6823      	ldr	r3, [r4, #0]
static inline int setsockopt(int sock, int level, int optname,
   2e16e:	4605      	mov	r5, r0
   2e170:	460e      	mov	r6, r1
   2e172:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   2e174:	b94b      	cbnz	r3, 2e18a <setsockopt.constprop.3+0x26>
   2e176:	4913      	ldr	r1, [pc, #76]	; (2e1c4 <setsockopt.constprop.3+0x60>)
   2e178:	4813      	ldr	r0, [pc, #76]	; (2e1c8 <setsockopt.constprop.3+0x64>)
   2e17a:	2357      	movs	r3, #87	; 0x57
   2e17c:	4a13      	ldr	r2, [pc, #76]	; (2e1cc <setsockopt.constprop.3+0x68>)
   2e17e:	f00f fe8c 	bl	3de9a <printk>
   2e182:	2157      	movs	r1, #87	; 0x57
   2e184:	4811      	ldr	r0, [pc, #68]	; (2e1cc <setsockopt.constprop.3+0x68>)
   2e186:	f00f fedb 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   2e18a:	6823      	ldr	r3, [r4, #0]
   2e18c:	69db      	ldr	r3, [r3, #28]
   2e18e:	b94b      	cbnz	r3, 2e1a4 <setsockopt.constprop.3+0x40>
   2e190:	490f      	ldr	r1, [pc, #60]	; (2e1d0 <setsockopt.constprop.3+0x6c>)
   2e192:	480d      	ldr	r0, [pc, #52]	; (2e1c8 <setsockopt.constprop.3+0x64>)
   2e194:	2358      	movs	r3, #88	; 0x58
   2e196:	4a0d      	ldr	r2, [pc, #52]	; (2e1cc <setsockopt.constprop.3+0x68>)
   2e198:	f00f fe7f 	bl	3de9a <printk>
   2e19c:	2158      	movs	r1, #88	; 0x58
   2e19e:	480b      	ldr	r0, [pc, #44]	; (2e1cc <setsockopt.constprop.3+0x68>)
   2e1a0:	f00f fece 	bl	3df40 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   2e1a4:	6823      	ldr	r3, [r4, #0]
   2e1a6:	f8cd 8000 	str.w	r8, [sp]
   2e1aa:	69dc      	ldr	r4, [r3, #28]
   2e1ac:	4632      	mov	r2, r6
   2e1ae:	463b      	mov	r3, r7
   2e1b0:	f240 2103 	movw	r1, #515	; 0x203
   2e1b4:	4628      	mov	r0, r5
   2e1b6:	47a0      	blx	r4
}
   2e1b8:	b002      	add	sp, #8
   2e1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e1be:	bf00      	nop
   2e1c0:	2002389c 	.word	0x2002389c
   2e1c4:	000433f1 	.word	0x000433f1
   2e1c8:	00043278 	.word	0x00043278
   2e1cc:	000433c1 	.word	0x000433c1
   2e1d0:	00044e55 	.word	0x00044e55

0002e1d4 <delete_banked_modem_fw>:
}
#define SLEEP_TIME 1
static int delete_banked_modem_fw(void)
{
	int err;
	socklen_t len = sizeof(offset);
   2e1d4:	2304      	movs	r3, #4
{
   2e1d6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;

	LOG_INF("Deleting firmware image, this can take several minutes");
   2e1da:	f04f 0000 	mov.w	r0, #0
	socklen_t len = sizeof(offset);
   2e1de:	9301      	str	r3, [sp, #4]
	LOG_INF("Deleting firmware image, this can take several minutes");
   2e1e0:	2303      	movs	r3, #3
   2e1e2:	4c35      	ldr	r4, [pc, #212]	; (2e2b8 <delete_banked_modem_fw+0xe4>)
   2e1e4:	f363 0007 	bfi	r0, r3, #0, #8
   2e1e8:	4b34      	ldr	r3, [pc, #208]	; (2e2bc <delete_banked_modem_fw+0xe8>)
   2e1ea:	4935      	ldr	r1, [pc, #212]	; (2e2c0 <delete_banked_modem_fw+0xec>)
   2e1ec:	1ae4      	subs	r4, r4, r3
   2e1ee:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2e1f2:	f364 108f 	bfi	r0, r4, #6, #10
   2e1f6:	f00f feb4 	bl	3df62 <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   2e1fa:	2300      	movs	r3, #0
   2e1fc:	4e31      	ldr	r6, [pc, #196]	; (2e2c4 <delete_banked_modem_fw+0xf0>)
   2e1fe:	461a      	mov	r2, r3
   2e200:	2106      	movs	r1, #6
   2e202:	6830      	ldr	r0, [r6, #0]
   2e204:	f7ff ffae 	bl	2e164 <setsockopt.constprop.3>
	if (err < 0) {
   2e208:	2800      	cmp	r0, #0
   2e20a:	da12      	bge.n	2e232 <delete_banked_modem_fw+0x5e>
		LOG_ERR("Failed to delete backup, errno %d", errno);
   2e20c:	2301      	movs	r3, #1
   2e20e:	f04f 0500 	mov.w	r5, #0
   2e212:	f363 0507 	bfi	r5, r3, #0, #8
   2e216:	f010 f890 	bl	3e33a <__errno>
   2e21a:	f364 158f 	bfi	r5, r4, #6, #10
   2e21e:	6802      	ldr	r2, [r0, #0]
   2e220:	4929      	ldr	r1, [pc, #164]	; (2e2c8 <delete_banked_modem_fw+0xf4>)
   2e222:	4628      	mov	r0, r5
   2e224:	f00f fe9d 	bl	3df62 <log_string_sync>
		return -EFAULT;
   2e228:	f06f 000d 	mvn.w	r0, #13
			break;
		}
	}

	return 0;
}
   2e22c:	b002      	add	sp, #8
   2e22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   2e232:	253c      	movs	r5, #60	; 0x3c
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2e234:	f8df 809c 	ldr.w	r8, [pc, #156]	; 2e2d4 <delete_banked_modem_fw+0x100>
				callback(DFU_TARGET_EVT_TIMEOUT);
   2e238:	f8df 9090 	ldr.w	r9, [pc, #144]	; 2e2cc <delete_banked_modem_fw+0xf8>
					LOG_ERR("DFU error: %d", err);
   2e23c:	f8df a098 	ldr.w	sl, [pc, #152]	; 2e2d8 <delete_banked_modem_fw+0x104>
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2e240:	ab01      	add	r3, sp, #4
   2e242:	4642      	mov	r2, r8
   2e244:	2107      	movs	r1, #7
   2e246:	6830      	ldr	r0, [r6, #0]
   2e248:	f7ff ff2a 	bl	2e0a0 <getsockopt.constprop.2>
		if (err < 0) {
   2e24c:	2800      	cmp	r0, #0
   2e24e:	da23      	bge.n	2e298 <delete_banked_modem_fw+0xc4>
			if (timeout < 0) {
   2e250:	2d00      	cmp	r5, #0
   2e252:	da04      	bge.n	2e25e <delete_banked_modem_fw+0x8a>
				callback(DFU_TARGET_EVT_TIMEOUT);
   2e254:	f8d9 3000 	ldr.w	r3, [r9]
   2e258:	2000      	movs	r0, #0
   2e25a:	4798      	blx	r3
				timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   2e25c:	253c      	movs	r5, #60	; 0x3c
			if (errno == ENOEXEC) {
   2e25e:	f010 f86c 	bl	3e33a <__errno>
   2e262:	6803      	ldr	r3, [r0, #0]
   2e264:	2b08      	cmp	r3, #8
   2e266:	d115      	bne.n	2e294 <delete_banked_modem_fw+0xc0>
				err = get_modem_error();
   2e268:	f7ff ff52 	bl	2e110 <get_modem_error>
				if (err != DFU_ERASE_PENDING) {
   2e26c:	f110 0f11 	cmn.w	r0, #17
				err = get_modem_error();
   2e270:	4602      	mov	r2, r0
				if (err != DFU_ERASE_PENDING) {
   2e272:	d00b      	beq.n	2e28c <delete_banked_modem_fw+0xb8>
					LOG_ERR("DFU error: %d", err);
   2e274:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   2e278:	f043 0301 	orr.w	r3, r3, #1
   2e27c:	f363 0707 	bfi	r7, r3, #0, #8
   2e280:	f364 178f 	bfi	r7, r4, #6, #10
   2e284:	4651      	mov	r1, sl
   2e286:	4638      	mov	r0, r7
   2e288:	f00f fe6b 	bl	3df62 <log_string_sync>
	return z_impl_k_sleep(ms);
   2e28c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2e290:	f00b ff4a 	bl	3a128 <z_impl_k_sleep>
			timeout -= SLEEP_TIME;
   2e294:	3d01      	subs	r5, #1
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2e296:	e7d3      	b.n	2e240 <delete_banked_modem_fw+0x6c>
			callback(DFU_TARGET_EVT_ERASE_DONE);
   2e298:	4b0c      	ldr	r3, [pc, #48]	; (2e2cc <delete_banked_modem_fw+0xf8>)
   2e29a:	2001      	movs	r0, #1
   2e29c:	681b      	ldr	r3, [r3, #0]
   2e29e:	4798      	blx	r3
			LOG_INF("Modem FW delete complete");
   2e2a0:	2303      	movs	r3, #3
   2e2a2:	f04f 0000 	mov.w	r0, #0
   2e2a6:	f363 0007 	bfi	r0, r3, #0, #8
   2e2aa:	f364 108f 	bfi	r0, r4, #6, #10
   2e2ae:	4908      	ldr	r1, [pc, #32]	; (2e2d0 <delete_banked_modem_fw+0xfc>)
   2e2b0:	f00f fe57 	bl	3df62 <log_string_sync>
	return 0;
   2e2b4:	2000      	movs	r0, #0
   2e2b6:	e7b9      	b.n	2e22c <delete_banked_modem_fw+0x58>
   2e2b8:	00041c84 	.word	0x00041c84
   2e2bc:	00041c2c 	.word	0x00041c2c
   2e2c0:	00047ef1 	.word	0x00047ef1
   2e2c4:	200247a4 	.word	0x200247a4
   2e2c8:	00047f28 	.word	0x00047f28
   2e2cc:	200247a0 	.word	0x200247a0
   2e2d0:	00047f58 	.word	0x00047f58
   2e2d4:	200247a8 	.word	0x200247a8
   2e2d8:	00047f4a 	.word	0x00047f4a

0002e2dc <dfu_target_modem_identify>:
	return err;
}

bool dfu_target_modem_identify(const void *const buf)
{
	return ((const struct modem_delta_header *)buf)->magic == MODEM_MAGIC;
   2e2dc:	6840      	ldr	r0, [r0, #4]

}
   2e2de:	4b02      	ldr	r3, [pc, #8]	; (2e2e8 <dfu_target_modem_identify+0xc>)
   2e2e0:	1ac3      	subs	r3, r0, r3
   2e2e2:	4258      	negs	r0, r3
   2e2e4:	4158      	adcs	r0, r3
   2e2e6:	4770      	bx	lr
   2e2e8:	7544656d 	.word	0x7544656d

0002e2ec <dfu_target_modem_init>:

int dfu_target_modem_init(size_t file_size, dfu_target_callback_t cb)
{
	int err;
	size_t scratch_space;
	socklen_t len = sizeof(offset);
   2e2ec:	2304      	movs	r3, #4
{
   2e2ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e2f2:	b099      	sub	sp, #100	; 0x64
	socklen_t len = sizeof(offset);
   2e2f4:	9303      	str	r3, [sp, #12]
	__ASSERT_NO_MSG(socket_ops);
   2e2f6:	4c7c      	ldr	r4, [pc, #496]	; (2e4e8 <dfu_target_modem_init+0x1fc>)

	callback = cb;
   2e2f8:	4b7c      	ldr	r3, [pc, #496]	; (2e4ec <dfu_target_modem_init+0x200>)
{
   2e2fa:	4607      	mov	r7, r0
	callback = cb;
   2e2fc:	6019      	str	r1, [r3, #0]
   2e2fe:	6823      	ldr	r3, [r4, #0]
   2e300:	b94b      	cbnz	r3, 2e316 <dfu_target_modem_init+0x2a>
   2e302:	497b      	ldr	r1, [pc, #492]	; (2e4f0 <dfu_target_modem_init+0x204>)
   2e304:	487b      	ldr	r0, [pc, #492]	; (2e4f4 <dfu_target_modem_init+0x208>)
   2e306:	2319      	movs	r3, #25
   2e308:	4a7b      	ldr	r2, [pc, #492]	; (2e4f8 <dfu_target_modem_init+0x20c>)
   2e30a:	f00f fdc6 	bl	3de9a <printk>
   2e30e:	2119      	movs	r1, #25
   2e310:	4879      	ldr	r0, [pc, #484]	; (2e4f8 <dfu_target_modem_init+0x20c>)
   2e312:	f00f fe15 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   2e316:	6823      	ldr	r3, [r4, #0]
   2e318:	681b      	ldr	r3, [r3, #0]
   2e31a:	b94b      	cbnz	r3, 2e330 <dfu_target_modem_init+0x44>
   2e31c:	4977      	ldr	r1, [pc, #476]	; (2e4fc <dfu_target_modem_init+0x210>)
   2e31e:	4875      	ldr	r0, [pc, #468]	; (2e4f4 <dfu_target_modem_init+0x208>)
   2e320:	231a      	movs	r3, #26
   2e322:	4a75      	ldr	r2, [pc, #468]	; (2e4f8 <dfu_target_modem_init+0x20c>)
   2e324:	f00f fdb9 	bl	3de9a <printk>
   2e328:	211a      	movs	r1, #26
   2e32a:	4873      	ldr	r0, [pc, #460]	; (2e4f8 <dfu_target_modem_init+0x20c>)
   2e32c:	f00f fe08 	bl	3df40 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   2e330:	6823      	ldr	r3, [r4, #0]
   2e332:	f240 2203 	movw	r2, #515	; 0x203
   2e336:	681b      	ldr	r3, [r3, #0]
   2e338:	2101      	movs	r1, #1
   2e33a:	2067      	movs	r0, #103	; 0x67
   2e33c:	4798      	blx	r3
   2e33e:	4c70      	ldr	r4, [pc, #448]	; (2e500 <dfu_target_modem_init+0x214>)
   2e340:	4b70      	ldr	r3, [pc, #448]	; (2e504 <dfu_target_modem_init+0x218>)
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   2e342:	4e71      	ldr	r6, [pc, #452]	; (2e508 <dfu_target_modem_init+0x21c>)
   2e344:	1ae4      	subs	r4, r4, r3
	if (fd < 0) {
   2e346:	2800      	cmp	r0, #0
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   2e348:	6030      	str	r0, [r6, #0]
	if (fd < 0) {
   2e34a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2e34e:	4635      	mov	r5, r6
		LOG_ERR("Failed to open Modem DFU socket.");
   2e350:	f04f 0000 	mov.w	r0, #0
	if (fd < 0) {
   2e354:	da37      	bge.n	2e3c6 <dfu_target_modem_init+0xda>
		LOG_ERR("Failed to open Modem DFU socket.");
   2e356:	2301      	movs	r3, #1
   2e358:	f363 0007 	bfi	r0, r3, #0, #8
   2e35c:	f364 108f 	bfi	r0, r4, #6, #10
   2e360:	496a      	ldr	r1, [pc, #424]	; (2e50c <dfu_target_modem_init+0x220>)
   2e362:	f00f fdfe 	bl	3df62 <log_string_sync>
		return fd;
   2e366:	6830      	ldr	r0, [r6, #0]

	err = modem_dfu_socket_init();
	if (err < 0) {
   2e368:	2800      	cmp	r0, #0
   2e36a:	db52      	blt.n	2e412 <dfu_target_modem_init+0x126>
		return err;
	}

	err = getsockopt(fd, SOL_DFU, SO_DFU_RESOURCES, &scratch_space, &len);
   2e36c:	ab03      	add	r3, sp, #12
   2e36e:	aa0e      	add	r2, sp, #56	; 0x38
   2e370:	2102      	movs	r1, #2
   2e372:	6828      	ldr	r0, [r5, #0]
   2e374:	f7ff fe94 	bl	2e0a0 <getsockopt.constprop.2>
	if (err < 0) {
   2e378:	2800      	cmp	r0, #0
   2e37a:	da13      	bge.n	2e3a4 <dfu_target_modem_init+0xb8>
		if (errno == ENOEXEC) {
   2e37c:	f00f ffdd 	bl	3e33a <__errno>
   2e380:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   2e382:	f04f 0600 	mov.w	r6, #0
		if (errno == ENOEXEC) {
   2e386:	2b08      	cmp	r3, #8
			LOG_ERR("Modem error: %d", get_modem_error());
   2e388:	f04f 0301 	mov.w	r3, #1
   2e38c:	f363 0607 	bfi	r6, r3, #0, #8
   2e390:	f364 168f 	bfi	r6, r4, #6, #10
		if (errno == ENOEXEC) {
   2e394:	d158      	bne.n	2e448 <dfu_target_modem_init+0x15c>
			LOG_ERR("Modem error: %d", get_modem_error());
   2e396:	f7ff febb 	bl	2e110 <get_modem_error>
   2e39a:	4602      	mov	r2, r0
   2e39c:	495c      	ldr	r1, [pc, #368]	; (2e510 <dfu_target_modem_init+0x224>)
		} else {
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2e39e:	4630      	mov	r0, r6
   2e3a0:	f00f fddf 	bl	3df62 <log_string_sync>
		}
	}

	if (file_size > scratch_space) {
   2e3a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2e3a6:	42bb      	cmp	r3, r7
   2e3a8:	d253      	bcs.n	2e452 <dfu_target_modem_init+0x166>
		LOG_ERR("Requested file too big to fit in flash %d > %d",
   2e3aa:	2201      	movs	r2, #1
   2e3ac:	f04f 0000 	mov.w	r0, #0
   2e3b0:	f362 0007 	bfi	r0, r2, #0, #8
   2e3b4:	f364 108f 	bfi	r0, r4, #6, #10
   2e3b8:	463a      	mov	r2, r7
   2e3ba:	4956      	ldr	r1, [pc, #344]	; (2e514 <dfu_target_modem_init+0x228>)
   2e3bc:	f00f fdd1 	bl	3df62 <log_string_sync>
			file_size, scratch_space);
		return -EFBIG;
   2e3c0:	f06f 001a 	mvn.w	r0, #26
   2e3c4:	e025      	b.n	2e412 <dfu_target_modem_init+0x126>
	LOG_INF("Modem DFU Socket created");
   2e3c6:	2303      	movs	r3, #3
	len = sizeof(version);
   2e3c8:	f04f 0824 	mov.w	r8, #36	; 0x24
	LOG_INF("Modem DFU Socket created");
   2e3cc:	f363 0007 	bfi	r0, r3, #0, #8
   2e3d0:	f364 108f 	bfi	r0, r4, #6, #10
   2e3d4:	4950      	ldr	r1, [pc, #320]	; (2e518 <dfu_target_modem_init+0x22c>)
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   2e3d6:	f10d 0914 	add.w	r9, sp, #20
	LOG_INF("Modem DFU Socket created");
   2e3da:	f00f fdc2 	bl	3df62 <log_string_sync>
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   2e3de:	ab04      	add	r3, sp, #16
   2e3e0:	464a      	mov	r2, r9
   2e3e2:	2101      	movs	r1, #1
   2e3e4:	6830      	ldr	r0, [r6, #0]
	len = sizeof(version);
   2e3e6:	f8cd 8010 	str.w	r8, [sp, #16]
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   2e3ea:	f7ff fe59 	bl	2e0a0 <getsockopt.constprop.2>
	if (err < 0) {
   2e3ee:	2800      	cmp	r0, #0
   2e3f0:	da12      	bge.n	2e418 <dfu_target_modem_init+0x12c>
		LOG_ERR("Firmware version request failed, errno %d", errno);
   2e3f2:	2301      	movs	r3, #1
   2e3f4:	f04f 0500 	mov.w	r5, #0
   2e3f8:	f363 0507 	bfi	r5, r3, #0, #8
   2e3fc:	f00f ff9d 	bl	3e33a <__errno>
   2e400:	f364 158f 	bfi	r5, r4, #6, #10
   2e404:	6802      	ldr	r2, [r0, #0]
   2e406:	4945      	ldr	r1, [pc, #276]	; (2e51c <dfu_target_modem_init+0x230>)
   2e408:	4628      	mov	r0, r5
   2e40a:	f00f fdaa 	bl	3df62 <log_string_sync>
		return -1;
   2e40e:	f04f 30ff 	mov.w	r0, #4294967295
			LOG_INF("Error while setting offset: %d", offset);
		}
	}

	return 0;
}
   2e412:	b019      	add	sp, #100	; 0x64
   2e414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	snprintf(version_string, sizeof(version_string), "%.*s",
   2e418:	4643      	mov	r3, r8
   2e41a:	4a41      	ldr	r2, [pc, #260]	; (2e520 <dfu_target_modem_init+0x234>)
   2e41c:	2125      	movs	r1, #37	; 0x25
   2e41e:	f8cd 9000 	str.w	r9, [sp]
   2e422:	a80e      	add	r0, sp, #56	; 0x38
   2e424:	f00d fed8 	bl	3c1d8 <sniprintf>
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   2e428:	f04f 0600 	mov.w	r6, #0
   2e42c:	2303      	movs	r3, #3
   2e42e:	a80e      	add	r0, sp, #56	; 0x38
   2e430:	f363 0607 	bfi	r6, r3, #0, #8
   2e434:	f00f fda7 	bl	3df86 <log_strdup>
   2e438:	f364 168f 	bfi	r6, r4, #6, #10
   2e43c:	4602      	mov	r2, r0
   2e43e:	4939      	ldr	r1, [pc, #228]	; (2e524 <dfu_target_modem_init+0x238>)
   2e440:	4630      	mov	r0, r6
   2e442:	f00f fd8e 	bl	3df62 <log_string_sync>
	if (err < 0) {
   2e446:	e791      	b.n	2e36c <dfu_target_modem_init+0x80>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2e448:	f00f ff77 	bl	3e33a <__errno>
   2e44c:	4936      	ldr	r1, [pc, #216]	; (2e528 <dfu_target_modem_init+0x23c>)
   2e44e:	6802      	ldr	r2, [r0, #0]
   2e450:	e7a5      	b.n	2e39e <dfu_target_modem_init+0xb2>
	err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2e452:	ab03      	add	r3, sp, #12
   2e454:	4a35      	ldr	r2, [pc, #212]	; (2e52c <dfu_target_modem_init+0x240>)
   2e456:	2107      	movs	r1, #7
   2e458:	6828      	ldr	r0, [r5, #0]
   2e45a:	f7ff fe21 	bl	2e0a0 <getsockopt.constprop.2>
	if (err < 0) {
   2e45e:	2800      	cmp	r0, #0
   2e460:	da13      	bge.n	2e48a <dfu_target_modem_init+0x19e>
		if (errno == ENOEXEC) {
   2e462:	f00f ff6a 	bl	3e33a <__errno>
   2e466:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   2e468:	f04f 0600 	mov.w	r6, #0
		if (errno == ENOEXEC) {
   2e46c:	2b08      	cmp	r3, #8
			LOG_ERR("Modem error: %d", get_modem_error());
   2e46e:	f04f 0301 	mov.w	r3, #1
   2e472:	f363 0607 	bfi	r6, r3, #0, #8
   2e476:	f364 168f 	bfi	r6, r4, #6, #10
		if (errno == ENOEXEC) {
   2e47a:	d10f      	bne.n	2e49c <dfu_target_modem_init+0x1b0>
			LOG_ERR("Modem error: %d", get_modem_error());
   2e47c:	f7ff fe48 	bl	2e110 <get_modem_error>
   2e480:	4602      	mov	r2, r0
   2e482:	4923      	ldr	r1, [pc, #140]	; (2e510 <dfu_target_modem_init+0x224>)
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2e484:	4630      	mov	r0, r6
   2e486:	f00f fd6c 	bl	3df62 <log_string_sync>
	if (offset == DIRTY_IMAGE) {
   2e48a:	4e28      	ldr	r6, [pc, #160]	; (2e52c <dfu_target_modem_init+0x240>)
   2e48c:	6832      	ldr	r2, [r6, #0]
   2e48e:	f5b2 1f20 	cmp.w	r2, #2621440	; 0x280000
   2e492:	d108      	bne.n	2e4a6 <dfu_target_modem_init+0x1ba>
		delete_banked_modem_fw();
   2e494:	f7ff fe9e 	bl	2e1d4 <delete_banked_modem_fw>
	return 0;
   2e498:	2000      	movs	r0, #0
   2e49a:	e7ba      	b.n	2e412 <dfu_target_modem_init+0x126>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2e49c:	f00f ff4d 	bl	3e33a <__errno>
   2e4a0:	4921      	ldr	r1, [pc, #132]	; (2e528 <dfu_target_modem_init+0x23c>)
   2e4a2:	6802      	ldr	r2, [r0, #0]
   2e4a4:	e7ee      	b.n	2e484 <dfu_target_modem_init+0x198>
	} else if (offset != 0) {
   2e4a6:	2a00      	cmp	r2, #0
   2e4a8:	d0f6      	beq.n	2e498 <dfu_target_modem_init+0x1ac>
		LOG_INF("Setting offset to 0x%x", offset);
   2e4aa:	2303      	movs	r3, #3
   2e4ac:	f04f 0000 	mov.w	r0, #0
   2e4b0:	f363 0007 	bfi	r0, r3, #0, #8
   2e4b4:	f364 108f 	bfi	r0, r4, #6, #10
   2e4b8:	491d      	ldr	r1, [pc, #116]	; (2e530 <dfu_target_modem_init+0x244>)
   2e4ba:	f00f fd52 	bl	3df62 <log_string_sync>
		len = sizeof(offset);
   2e4be:	2304      	movs	r3, #4
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   2e4c0:	4632      	mov	r2, r6
   2e4c2:	2107      	movs	r1, #7
   2e4c4:	6828      	ldr	r0, [r5, #0]
		len = sizeof(offset);
   2e4c6:	9303      	str	r3, [sp, #12]
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   2e4c8:	f7ff fe4c 	bl	2e164 <setsockopt.constprop.3>
		if (err != 0) {
   2e4cc:	2800      	cmp	r0, #0
   2e4ce:	d0e3      	beq.n	2e498 <dfu_target_modem_init+0x1ac>
			LOG_INF("Error while setting offset: %d", offset);
   2e4d0:	2303      	movs	r3, #3
   2e4d2:	f04f 0000 	mov.w	r0, #0
   2e4d6:	f363 0007 	bfi	r0, r3, #0, #8
   2e4da:	f364 108f 	bfi	r0, r4, #6, #10
   2e4de:	6832      	ldr	r2, [r6, #0]
   2e4e0:	4914      	ldr	r1, [pc, #80]	; (2e534 <dfu_target_modem_init+0x248>)
   2e4e2:	f00f fd3e 	bl	3df62 <log_string_sync>
   2e4e6:	e7d7      	b.n	2e498 <dfu_target_modem_init+0x1ac>
   2e4e8:	2002389c 	.word	0x2002389c
   2e4ec:	200247a0 	.word	0x200247a0
   2e4f0:	000433f1 	.word	0x000433f1
   2e4f4:	00043278 	.word	0x00043278
   2e4f8:	000433c1 	.word	0x000433c1
   2e4fc:	00044d90 	.word	0x00044d90
   2e500:	00041c84 	.word	0x00041c84
   2e504:	00041c2c 	.word	0x00041c2c
   2e508:	200247a4 	.word	0x200247a4
   2e50c:	00047ffd 	.word	0x00047ffd
   2e510:	00048081 	.word	0x00048081
   2e514:	000480ae 	.word	0x000480ae
   2e518:	0004801e 	.word	0x0004801e
   2e51c:	00048037 	.word	0x00048037
   2e520:	00048061 	.word	0x00048061
   2e524:	00048066 	.word	0x00048066
   2e528:	00048091 	.word	0x00048091
   2e52c:	200247a8 	.word	0x200247a8
   2e530:	000480dd 	.word	0x000480dd
   2e534:	000480f4 	.word	0x000480f4

0002e538 <dfu_target_modem_offset_get>:

int dfu_target_modem_offset_get(size_t *out)
{
	*out = offset;
   2e538:	4b02      	ldr	r3, [pc, #8]	; (2e544 <dfu_target_modem_offset_get+0xc>)
   2e53a:	681b      	ldr	r3, [r3, #0]
   2e53c:	6003      	str	r3, [r0, #0]
	return 0;
}
   2e53e:	2000      	movs	r0, #0
   2e540:	4770      	bx	lr
   2e542:	bf00      	nop
   2e544:	200247a8 	.word	0x200247a8

0002e548 <dfu_target_modem_write>:

int dfu_target_modem_write(const void *const buf, size_t len)
{
   2e548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err = 0;
	int sent = 0;
	int modem_error = 0;

	sent = send(fd, buf, len, 0);
   2e54a:	4b31      	ldr	r3, [pc, #196]	; (2e610 <dfu_target_modem_write+0xc8>)
	__ASSERT_NO_MSG(socket_ops);
   2e54c:	4c31      	ldr	r4, [pc, #196]	; (2e614 <dfu_target_modem_write+0xcc>)
   2e54e:	681f      	ldr	r7, [r3, #0]
   2e550:	6823      	ldr	r3, [r4, #0]
{
   2e552:	4606      	mov	r6, r0
   2e554:	460d      	mov	r5, r1
   2e556:	b94b      	cbnz	r3, 2e56c <dfu_target_modem_write+0x24>
   2e558:	492f      	ldr	r1, [pc, #188]	; (2e618 <dfu_target_modem_write+0xd0>)
   2e55a:	4830      	ldr	r0, [pc, #192]	; (2e61c <dfu_target_modem_write+0xd4>)
   2e55c:	237e      	movs	r3, #126	; 0x7e
   2e55e:	4a30      	ldr	r2, [pc, #192]	; (2e620 <dfu_target_modem_write+0xd8>)
   2e560:	f00f fc9b 	bl	3de9a <printk>
   2e564:	217e      	movs	r1, #126	; 0x7e
   2e566:	482e      	ldr	r0, [pc, #184]	; (2e620 <dfu_target_modem_write+0xd8>)
   2e568:	f00f fcea 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   2e56c:	6823      	ldr	r3, [r4, #0]
   2e56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e570:	b94b      	cbnz	r3, 2e586 <dfu_target_modem_write+0x3e>
   2e572:	492c      	ldr	r1, [pc, #176]	; (2e624 <dfu_target_modem_write+0xdc>)
   2e574:	4829      	ldr	r0, [pc, #164]	; (2e61c <dfu_target_modem_write+0xd4>)
   2e576:	237f      	movs	r3, #127	; 0x7f
   2e578:	4a29      	ldr	r2, [pc, #164]	; (2e620 <dfu_target_modem_write+0xd8>)
   2e57a:	f00f fc8e 	bl	3de9a <printk>
   2e57e:	217f      	movs	r1, #127	; 0x7f
   2e580:	4827      	ldr	r0, [pc, #156]	; (2e620 <dfu_target_modem_write+0xd8>)
   2e582:	f00f fcdd 	bl	3df40 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   2e586:	6823      	ldr	r3, [r4, #0]
   2e588:	462a      	mov	r2, r5
   2e58a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   2e58c:	4631      	mov	r1, r6
   2e58e:	2300      	movs	r3, #0
   2e590:	4638      	mov	r0, r7
   2e592:	47a0      	blx	r4
	if (sent > 0) {
   2e594:	2800      	cmp	r0, #0
   2e596:	dd05      	ble.n	2e5a4 <dfu_target_modem_write+0x5c>
		offset += len;
		return 0;
   2e598:	2000      	movs	r0, #0
		offset += len;
   2e59a:	4a23      	ldr	r2, [pc, #140]	; (2e628 <dfu_target_modem_write+0xe0>)
   2e59c:	6813      	ldr	r3, [r2, #0]
   2e59e:	441d      	add	r5, r3
   2e5a0:	6015      	str	r5, [r2, #0]
			return 0;
		}
	default:
		return -EFAULT;
	}
}
   2e5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (errno != ENOEXEC) {
   2e5a4:	f00f fec9 	bl	3e33a <__errno>
   2e5a8:	6803      	ldr	r3, [r0, #0]
   2e5aa:	2b08      	cmp	r3, #8
   2e5ac:	d12c      	bne.n	2e608 <dfu_target_modem_write+0xc0>
	modem_error = get_modem_error();
   2e5ae:	f7ff fdaf 	bl	2e110 <get_modem_error>
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   2e5b2:	f04f 0700 	mov.w	r7, #0
   2e5b6:	2301      	movs	r3, #1
   2e5b8:	4a1c      	ldr	r2, [pc, #112]	; (2e62c <dfu_target_modem_write+0xe4>)
   2e5ba:	f363 0707 	bfi	r7, r3, #0, #8
   2e5be:	4b1c      	ldr	r3, [pc, #112]	; (2e630 <dfu_target_modem_write+0xe8>)
	modem_error = get_modem_error();
   2e5c0:	4604      	mov	r4, r0
   2e5c2:	1a9b      	subs	r3, r3, r2
   2e5c4:	08db      	lsrs	r3, r3, #3
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   2e5c6:	f363 178f 	bfi	r7, r3, #6, #10
   2e5ca:	f00f feb6 	bl	3e33a <__errno>
   2e5ce:	4623      	mov	r3, r4
   2e5d0:	6802      	ldr	r2, [r0, #0]
   2e5d2:	4918      	ldr	r1, [pc, #96]	; (2e634 <dfu_target_modem_write+0xec>)
   2e5d4:	4638      	mov	r0, r7
   2e5d6:	f00f fcc4 	bl	3df62 <log_string_sync>
	switch (modem_error) {
   2e5da:	f114 0f0b 	cmn.w	r4, #11
   2e5de:	d004      	beq.n	2e5ea <dfu_target_modem_write+0xa2>
   2e5e0:	f114 0f09 	cmn.w	r4, #9
   2e5e4:	d00d      	beq.n	2e602 <dfu_target_modem_write+0xba>
   2e5e6:	340e      	adds	r4, #14
   2e5e8:	d10e      	bne.n	2e608 <dfu_target_modem_write+0xc0>
		delete_banked_modem_fw();
   2e5ea:	f7ff fdf3 	bl	2e1d4 <delete_banked_modem_fw>
		err = dfu_target_modem_write(buf, len);
   2e5ee:	4629      	mov	r1, r5
   2e5f0:	4630      	mov	r0, r6
   2e5f2:	f7ff ffa9 	bl	2e548 <dfu_target_modem_write>
			return 0;
   2e5f6:	2800      	cmp	r0, #0
   2e5f8:	bfb4      	ite	lt
   2e5fa:	f06f 0015 	mvnlt.w	r0, #21
   2e5fe:	2000      	movge	r0, #0
   2e600:	e7cf      	b.n	2e5a2 <dfu_target_modem_write+0x5a>
		return -EINVAL;
   2e602:	f06f 0015 	mvn.w	r0, #21
   2e606:	e7cc      	b.n	2e5a2 <dfu_target_modem_write+0x5a>
		return -EFAULT;
   2e608:	f06f 000d 	mvn.w	r0, #13
   2e60c:	e7c9      	b.n	2e5a2 <dfu_target_modem_write+0x5a>
   2e60e:	bf00      	nop
   2e610:	200247a4 	.word	0x200247a4
   2e614:	2002389c 	.word	0x2002389c
   2e618:	000433f1 	.word	0x000433f1
   2e61c:	00043278 	.word	0x00043278
   2e620:	000433c1 	.word	0x000433c1
   2e624:	00044dc8 	.word	0x00044dc8
   2e628:	200247a8 	.word	0x200247a8
   2e62c:	00041c2c 	.word	0x00041c2c
   2e630:	00041c84 	.word	0x00041c84
   2e634:	00048113 	.word	0x00048113

0002e638 <dfu_target_modem_done>:

int dfu_target_modem_done(bool successful)
{
   2e638:	b570      	push	{r4, r5, r6, lr}
   2e63a:	4b38      	ldr	r3, [pc, #224]	; (2e71c <dfu_target_modem_done+0xe4>)
   2e63c:	4c38      	ldr	r4, [pc, #224]	; (2e720 <dfu_target_modem_done+0xe8>)
   2e63e:	4e39      	ldr	r6, [pc, #228]	; (2e724 <dfu_target_modem_done+0xec>)
   2e640:	1ae4      	subs	r4, r4, r3
   2e642:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	int err = 0;

	if (successful) {
   2e646:	2800      	cmp	r0, #0
   2e648:	d05b      	beq.n	2e702 <dfu_target_modem_done+0xca>
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   2e64a:	2303      	movs	r3, #3
   2e64c:	f04f 0000 	mov.w	r0, #0
   2e650:	f363 0007 	bfi	r0, r3, #0, #8
   2e654:	f364 108f 	bfi	r0, r4, #6, #10
   2e658:	4933      	ldr	r1, [pc, #204]	; (2e728 <dfu_target_modem_done+0xf0>)
   2e65a:	f00f fc82 	bl	3df62 <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_APPLY, NULL, 0);
   2e65e:	2300      	movs	r3, #0
   2e660:	2104      	movs	r1, #4
   2e662:	461a      	mov	r2, r3
   2e664:	6830      	ldr	r0, [r6, #0]
   2e666:	f7ff fd7d 	bl	2e164 <setsockopt.constprop.3>
	if (err < 0) {
   2e66a:	1e05      	subs	r5, r0, #0
   2e66c:	da12      	bge.n	2e694 <dfu_target_modem_done+0x5c>
		if (errno == ENOEXEC) {
   2e66e:	f00f fe64 	bl	3e33a <__errno>
   2e672:	6803      	ldr	r3, [r0, #0]
   2e674:	2b08      	cmp	r3, #8
   2e676:	d13a      	bne.n	2e6ee <dfu_target_modem_done+0xb6>
			LOG_ERR("SO_DFU_APPLY failed, modem error %d",
   2e678:	2301      	movs	r3, #1
   2e67a:	f04f 0500 	mov.w	r5, #0
   2e67e:	f363 0507 	bfi	r5, r3, #0, #8
   2e682:	f7ff fd45 	bl	2e110 <get_modem_error>
   2e686:	f364 158f 	bfi	r5, r4, #6, #10
   2e68a:	4602      	mov	r2, r0
   2e68c:	4628      	mov	r0, r5
   2e68e:	4927      	ldr	r1, [pc, #156]	; (2e72c <dfu_target_modem_done+0xf4>)
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   2e690:	f00f fc67 	bl	3df62 <log_string_sync>
	__ASSERT_NO_MSG(socket_ops);
   2e694:	4d26      	ldr	r5, [pc, #152]	; (2e730 <dfu_target_modem_done+0xf8>)
	} else {
		LOG_INF("Modem upgrade aborted.");
	}


	err = close(fd);
   2e696:	6836      	ldr	r6, [r6, #0]
   2e698:	682b      	ldr	r3, [r5, #0]
   2e69a:	b94b      	cbnz	r3, 2e6b0 <dfu_target_modem_done+0x78>
   2e69c:	4925      	ldr	r1, [pc, #148]	; (2e734 <dfu_target_modem_done+0xfc>)
   2e69e:	4826      	ldr	r0, [pc, #152]	; (2e738 <dfu_target_modem_done+0x100>)
   2e6a0:	2321      	movs	r3, #33	; 0x21
   2e6a2:	4a26      	ldr	r2, [pc, #152]	; (2e73c <dfu_target_modem_done+0x104>)
   2e6a4:	f00f fbf9 	bl	3de9a <printk>
   2e6a8:	2121      	movs	r1, #33	; 0x21
   2e6aa:	4824      	ldr	r0, [pc, #144]	; (2e73c <dfu_target_modem_done+0x104>)
   2e6ac:	f00f fc48 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   2e6b0:	682b      	ldr	r3, [r5, #0]
   2e6b2:	685b      	ldr	r3, [r3, #4]
   2e6b4:	b94b      	cbnz	r3, 2e6ca <dfu_target_modem_done+0x92>
   2e6b6:	4922      	ldr	r1, [pc, #136]	; (2e740 <dfu_target_modem_done+0x108>)
   2e6b8:	481f      	ldr	r0, [pc, #124]	; (2e738 <dfu_target_modem_done+0x100>)
   2e6ba:	2322      	movs	r3, #34	; 0x22
   2e6bc:	4a1f      	ldr	r2, [pc, #124]	; (2e73c <dfu_target_modem_done+0x104>)
   2e6be:	f00f fbec 	bl	3de9a <printk>
   2e6c2:	2122      	movs	r1, #34	; 0x22
   2e6c4:	481d      	ldr	r0, [pc, #116]	; (2e73c <dfu_target_modem_done+0x104>)
   2e6c6:	f00f fc3b 	bl	3df40 <assert_post_action>
	return socket_ops->close(sock);
   2e6ca:	682b      	ldr	r3, [r5, #0]
   2e6cc:	4630      	mov	r0, r6
   2e6ce:	685b      	ldr	r3, [r3, #4]
   2e6d0:	4798      	blx	r3
	if (err < 0) {
   2e6d2:	1e05      	subs	r5, r0, #0
   2e6d4:	da20      	bge.n	2e718 <dfu_target_modem_done+0xe0>
		LOG_ERR("Failed to close modem DFU socket.");
   2e6d6:	f04f 0000 	mov.w	r0, #0
   2e6da:	2301      	movs	r3, #1
   2e6dc:	f363 0007 	bfi	r0, r3, #0, #8
   2e6e0:	f364 108f 	bfi	r0, r4, #6, #10
   2e6e4:	4917      	ldr	r1, [pc, #92]	; (2e744 <dfu_target_modem_done+0x10c>)
   2e6e6:	f00f fc3c 	bl	3df62 <log_string_sync>
		return err;
	}

	return 0;
}
   2e6ea:	4628      	mov	r0, r5
   2e6ec:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   2e6ee:	f04f 0000 	mov.w	r0, #0
   2e6f2:	2301      	movs	r3, #1
   2e6f4:	f363 0007 	bfi	r0, r3, #0, #8
   2e6f8:	f364 108f 	bfi	r0, r4, #6, #10
   2e6fc:	462a      	mov	r2, r5
   2e6fe:	490b      	ldr	r1, [pc, #44]	; (2e72c <dfu_target_modem_done+0xf4>)
   2e700:	e7c6      	b.n	2e690 <dfu_target_modem_done+0x58>
		LOG_INF("Modem upgrade aborted.");
   2e702:	2303      	movs	r3, #3
   2e704:	f04f 0000 	mov.w	r0, #0
   2e708:	f363 0007 	bfi	r0, r3, #0, #8
   2e70c:	f364 108f 	bfi	r0, r4, #6, #10
   2e710:	490d      	ldr	r1, [pc, #52]	; (2e748 <dfu_target_modem_done+0x110>)
   2e712:	f00f fc26 	bl	3df62 <log_string_sync>
   2e716:	e7bd      	b.n	2e694 <dfu_target_modem_done+0x5c>
	return 0;
   2e718:	2500      	movs	r5, #0
   2e71a:	e7e6      	b.n	2e6ea <dfu_target_modem_done+0xb2>
   2e71c:	00041c2c 	.word	0x00041c2c
   2e720:	00041c84 	.word	0x00041c84
   2e724:	200247a4 	.word	0x200247a4
   2e728:	00047f71 	.word	0x00047f71
   2e72c:	00047fa0 	.word	0x00047fa0
   2e730:	2002389c 	.word	0x2002389c
   2e734:	000433f1 	.word	0x000433f1
   2e738:	00043278 	.word	0x00043278
   2e73c:	000433c1 	.word	0x000433c1
   2e740:	00044d7e 	.word	0x00044d7e
   2e744:	00047fdb 	.word	0x00047fdb
   2e748:	00047fc4 	.word	0x00047fc4

0002e74c <reset_flash_context>:

	return 0;
}

static void reset_flash_context(void)
{
   2e74c:	b508      	push	{r3, lr}
	/* Need to set bytes_written to 0 */
	int err = flash_img_init(&flash_img);
   2e74e:	480a      	ldr	r0, [pc, #40]	; (2e778 <reset_flash_context+0x2c>)
   2e750:	f00f fcdd 	bl	3e10e <flash_img_init>

	if (err) {
   2e754:	b178      	cbz	r0, 2e776 <reset_flash_context+0x2a>
		LOG_ERR("Unable to re-initialize flash_img");
   2e756:	2301      	movs	r3, #1
   2e758:	f04f 0000 	mov.w	r0, #0
   2e75c:	4a07      	ldr	r2, [pc, #28]	; (2e77c <reset_flash_context+0x30>)
   2e75e:	f363 0007 	bfi	r0, r3, #0, #8
   2e762:	4b07      	ldr	r3, [pc, #28]	; (2e780 <reset_flash_context+0x34>)
   2e764:	4907      	ldr	r1, [pc, #28]	; (2e784 <reset_flash_context+0x38>)
   2e766:	1a9b      	subs	r3, r3, r2
   2e768:	08db      	lsrs	r3, r3, #3
   2e76a:	f363 108f 	bfi	r0, r3, #6, #10
	}
	err = store_flash_img_context();
	if (err != 0) {
		LOG_ERR("Unable to reset write progress: %d", err);
	}
}
   2e76e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Unable to re-initialize flash_img");
   2e772:	f00f bbf6 	b.w	3df62 <log_string_sync>
}
   2e776:	bd08      	pop	{r3, pc}
   2e778:	200247ac 	.word	0x200247ac
   2e77c:	00041c2c 	.word	0x00041c2c
   2e780:	00041c7c 	.word	0x00041c7c
   2e784:	0004826d 	.word	0x0004826d

0002e788 <dfu_target_mcuboot_identify>:
	return *((const u32_t *)buf) == MCUBOOT_HEADER_MAGIC;
   2e788:	6800      	ldr	r0, [r0, #0]
}
   2e78a:	4b02      	ldr	r3, [pc, #8]	; (2e794 <dfu_target_mcuboot_identify+0xc>)
   2e78c:	1ac3      	subs	r3, r0, r3
   2e78e:	4258      	negs	r0, r3
   2e790:	4158      	adcs	r0, r3
   2e792:	4770      	bx	lr
   2e794:	96f3b83d 	.word	0x96f3b83d

0002e798 <dfu_target_mcuboot_init>:
{
   2e798:	b538      	push	{r3, r4, r5, lr}
   2e79a:	4605      	mov	r5, r0
	int err = flash_img_init(&flash_img);
   2e79c:	4816      	ldr	r0, [pc, #88]	; (2e7f8 <dfu_target_mcuboot_init+0x60>)
   2e79e:	f00f fcb6 	bl	3e10e <flash_img_init>
	if (err != 0) {
   2e7a2:	4604      	mov	r4, r0
   2e7a4:	b180      	cbz	r0, 2e7c8 <dfu_target_mcuboot_init+0x30>
		LOG_ERR("flash_img_init error %d", err);
   2e7a6:	2301      	movs	r3, #1
   2e7a8:	f04f 0000 	mov.w	r0, #0
   2e7ac:	4a13      	ldr	r2, [pc, #76]	; (2e7fc <dfu_target_mcuboot_init+0x64>)
   2e7ae:	f363 0007 	bfi	r0, r3, #0, #8
   2e7b2:	4b13      	ldr	r3, [pc, #76]	; (2e800 <dfu_target_mcuboot_init+0x68>)
   2e7b4:	4913      	ldr	r1, [pc, #76]	; (2e804 <dfu_target_mcuboot_init+0x6c>)
   2e7b6:	1a9b      	subs	r3, r3, r2
   2e7b8:	08db      	lsrs	r3, r3, #3
   2e7ba:	f363 108f 	bfi	r0, r3, #6, #10
   2e7be:	4622      	mov	r2, r4
   2e7c0:	f00f fbcf 	bl	3df62 <log_string_sync>
}
   2e7c4:	4620      	mov	r0, r4
   2e7c6:	bd38      	pop	{r3, r4, r5, pc}
	if (file_size > PM_MCUBOOT_SECONDARY_SIZE) {
   2e7c8:	f5b5 2ff0 	cmp.w	r5, #491520	; 0x78000
   2e7cc:	d9fa      	bls.n	2e7c4 <dfu_target_mcuboot_init+0x2c>
		LOG_ERR("Requested file too big to fit in flash %zu > 0x%x",
   2e7ce:	2301      	movs	r3, #1
   2e7d0:	f04f 0000 	mov.w	r0, #0
   2e7d4:	4a09      	ldr	r2, [pc, #36]	; (2e7fc <dfu_target_mcuboot_init+0x64>)
   2e7d6:	f363 0007 	bfi	r0, r3, #0, #8
   2e7da:	4b09      	ldr	r3, [pc, #36]	; (2e800 <dfu_target_mcuboot_init+0x68>)
   2e7dc:	490a      	ldr	r1, [pc, #40]	; (2e808 <dfu_target_mcuboot_init+0x70>)
   2e7de:	1a9b      	subs	r3, r3, r2
   2e7e0:	08db      	lsrs	r3, r3, #3
   2e7e2:	f363 108f 	bfi	r0, r3, #6, #10
   2e7e6:	462a      	mov	r2, r5
   2e7e8:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
   2e7ec:	f00f fbb9 	bl	3df62 <log_string_sync>
		return -EFBIG;
   2e7f0:	f06f 041a 	mvn.w	r4, #26
   2e7f4:	e7e6      	b.n	2e7c4 <dfu_target_mcuboot_init+0x2c>
   2e7f6:	bf00      	nop
   2e7f8:	200247ac 	.word	0x200247ac
   2e7fc:	00041c2c 	.word	0x00041c2c
   2e800:	00041c7c 	.word	0x00041c7c
   2e804:	00048201 	.word	0x00048201
   2e808:	00048219 	.word	0x00048219

0002e80c <dfu_target_mcuboot_offset_get>:
{
   2e80c:	b510      	push	{r4, lr}
   2e80e:	4604      	mov	r4, r0
	*out = flash_img_bytes_written(&flash_img);
   2e810:	4802      	ldr	r0, [pc, #8]	; (2e81c <dfu_target_mcuboot_offset_get+0x10>)
   2e812:	f00f fc79 	bl	3e108 <flash_img_bytes_written>
   2e816:	6020      	str	r0, [r4, #0]
}
   2e818:	2000      	movs	r0, #0
   2e81a:	bd10      	pop	{r4, pc}
   2e81c:	200247ac 	.word	0x200247ac

0002e820 <dfu_target_mcuboot_write>:
{
   2e820:	b510      	push	{r4, lr}
	int err = flash_img_buffered_write(&flash_img, (u8_t *)buf, len, false);
   2e822:	460a      	mov	r2, r1
   2e824:	2300      	movs	r3, #0
   2e826:	4601      	mov	r1, r0
   2e828:	480a      	ldr	r0, [pc, #40]	; (2e854 <dfu_target_mcuboot_write+0x34>)
   2e82a:	f00f fc20 	bl	3e06e <flash_img_buffered_write>
	if (err != 0) {
   2e82e:	4604      	mov	r4, r0
   2e830:	b170      	cbz	r0, 2e850 <dfu_target_mcuboot_write+0x30>
		LOG_ERR("flash_img_buffered_write error %d", err);
   2e832:	2301      	movs	r3, #1
   2e834:	f04f 0000 	mov.w	r0, #0
   2e838:	4a07      	ldr	r2, [pc, #28]	; (2e858 <dfu_target_mcuboot_write+0x38>)
   2e83a:	f363 0007 	bfi	r0, r3, #0, #8
   2e83e:	4b07      	ldr	r3, [pc, #28]	; (2e85c <dfu_target_mcuboot_write+0x3c>)
   2e840:	4907      	ldr	r1, [pc, #28]	; (2e860 <dfu_target_mcuboot_write+0x40>)
   2e842:	1a9b      	subs	r3, r3, r2
   2e844:	08db      	lsrs	r3, r3, #3
   2e846:	f363 108f 	bfi	r0, r3, #6, #10
   2e84a:	4622      	mov	r2, r4
   2e84c:	f00f fb89 	bl	3df62 <log_string_sync>
}
   2e850:	4620      	mov	r0, r4
   2e852:	bd10      	pop	{r4, pc}
   2e854:	200247ac 	.word	0x200247ac
   2e858:	00041c2c 	.word	0x00041c2c
   2e85c:	00041c7c 	.word	0x00041c7c
   2e860:	0004824b 	.word	0x0004824b

0002e864 <dfu_target_mcuboot_done>:

int dfu_target_mcuboot_done(bool successful)
{
   2e864:	b538      	push	{r3, r4, r5, lr}
   2e866:	4c20      	ldr	r4, [pc, #128]	; (2e8e8 <dfu_target_mcuboot_done+0x84>)
   2e868:	4b20      	ldr	r3, [pc, #128]	; (2e8ec <dfu_target_mcuboot_done+0x88>)
   2e86a:	1ae4      	subs	r4, r4, r3
   2e86c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	int err = 0;

	if (successful) {
   2e870:	b380      	cbz	r0, 2e8d4 <dfu_target_mcuboot_done+0x70>
		err = flash_img_buffered_write(&flash_img, NULL, 0, true);
   2e872:	2200      	movs	r2, #0
   2e874:	2301      	movs	r3, #1
   2e876:	4611      	mov	r1, r2
   2e878:	481d      	ldr	r0, [pc, #116]	; (2e8f0 <dfu_target_mcuboot_done+0x8c>)
   2e87a:	f00f fbf8 	bl	3e06e <flash_img_buffered_write>
		if (err != 0) {
   2e87e:	4605      	mov	r5, r0
   2e880:	b170      	cbz	r0, 2e8a0 <dfu_target_mcuboot_done+0x3c>
			LOG_ERR("flash_img_buffered_write error %d", err);
   2e882:	f04f 0000 	mov.w	r0, #0
   2e886:	2301      	movs	r3, #1
   2e888:	462a      	mov	r2, r5
   2e88a:	f363 0007 	bfi	r0, r3, #0, #8
   2e88e:	4919      	ldr	r1, [pc, #100]	; (2e8f4 <dfu_target_mcuboot_done+0x90>)
   2e890:	f364 108f 	bfi	r0, r4, #6, #10
			return err;
		}

		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
		if (err != 0) {
			LOG_ERR("boot_request_upgrade error %d", err);
   2e894:	f00f fb65 	bl	3df62 <log_string_sync>
			reset_flash_context();
   2e898:	f7ff ff58 	bl	2e74c <reset_flash_context>
		LOG_INF("MCUBoot image upgrade aborted.");
	}

	reset_flash_context();
	return err;
}
   2e89c:	4628      	mov	r0, r5
   2e89e:	bd38      	pop	{r3, r4, r5, pc}
		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
   2e8a0:	f7f4 ff20 	bl	236e4 <boot_request_upgrade>
		if (err != 0) {
   2e8a4:	4605      	mov	r5, r0
			LOG_ERR("boot_request_upgrade error %d", err);
   2e8a6:	f04f 0000 	mov.w	r0, #0
		if (err != 0) {
   2e8aa:	b13d      	cbz	r5, 2e8bc <dfu_target_mcuboot_done+0x58>
			LOG_ERR("boot_request_upgrade error %d", err);
   2e8ac:	2301      	movs	r3, #1
   2e8ae:	f363 0007 	bfi	r0, r3, #0, #8
   2e8b2:	f364 108f 	bfi	r0, r4, #6, #10
   2e8b6:	462a      	mov	r2, r5
   2e8b8:	490f      	ldr	r1, [pc, #60]	; (2e8f8 <dfu_target_mcuboot_done+0x94>)
   2e8ba:	e7eb      	b.n	2e894 <dfu_target_mcuboot_done+0x30>
		LOG_INF("MCUBoot image upgrade scheduled. Reset the device to "
   2e8bc:	2303      	movs	r3, #3
   2e8be:	490f      	ldr	r1, [pc, #60]	; (2e8fc <dfu_target_mcuboot_done+0x98>)
   2e8c0:	f363 0007 	bfi	r0, r3, #0, #8
   2e8c4:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_INF("MCUBoot image upgrade aborted.");
   2e8c8:	f00f fb4b 	bl	3df62 <log_string_sync>
	return err;
   2e8cc:	2500      	movs	r5, #0
	reset_flash_context();
   2e8ce:	f7ff ff3d 	bl	2e74c <reset_flash_context>
	return err;
   2e8d2:	e7e3      	b.n	2e89c <dfu_target_mcuboot_done+0x38>
		LOG_INF("MCUBoot image upgrade aborted.");
   2e8d4:	f04f 0000 	mov.w	r0, #0
   2e8d8:	2303      	movs	r3, #3
   2e8da:	f363 0007 	bfi	r0, r3, #0, #8
   2e8de:	f364 108f 	bfi	r0, r4, #6, #10
   2e8e2:	4907      	ldr	r1, [pc, #28]	; (2e900 <dfu_target_mcuboot_done+0x9c>)
   2e8e4:	e7f0      	b.n	2e8c8 <dfu_target_mcuboot_done+0x64>
   2e8e6:	bf00      	nop
   2e8e8:	00041c7c 	.word	0x00041c7c
   2e8ec:	00041c2c 	.word	0x00041c2c
   2e8f0:	200247ac 	.word	0x200247ac
   2e8f4:	0004824b 	.word	0x0004824b
   2e8f8:	00048189 	.word	0x00048189
   2e8fc:	000481a7 	.word	0x000481a7
   2e900:	000481e2 	.word	0x000481e2

0002e904 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
   2e904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2e908:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   2e90a:	4c21      	ldr	r4, [pc, #132]	; (2e990 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
   2e90c:	4e21      	ldr	r6, [pc, #132]	; (2e994 <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2e90e:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   2e912:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2e99c <check_ext_api_requests+0x98>
{
   2e916:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2e918:	45a8      	cmp	r8, r5
   2e91a:	d803      	bhi.n	2e924 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   2e91c:	2000      	movs	r0, #0
   2e91e:	b005      	add	sp, #20
   2e920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
   2e924:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2e926:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   2e92a:	681f      	ldr	r7, [r3, #0]
   2e92c:	ab01      	add	r3, sp, #4
   2e92e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   2e932:	220c      	movs	r2, #12
   2e934:	4619      	mov	r1, r3
   2e936:	4638      	mov	r0, r7
   2e938:	f011 fe62 	bl	40600 <memcmp>
   2e93c:	b990      	cbnz	r0, 2e964 <check_ext_api_requests+0x60>
   2e93e:	b18f      	cbz	r7, 2e964 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   2e940:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
   2e942:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   2e944:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   2e946:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   2e948:	4291      	cmp	r1, r2
   2e94a:	d10b      	bne.n	2e964 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   2e94c:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
   2e94e:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   2e950:	4291      	cmp	r1, r2
   2e952:	d807      	bhi.n	2e964 <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
   2e954:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   2e956:	4291      	cmp	r1, r2
   2e958:	d904      	bls.n	2e964 <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
   2e95a:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   2e95c:	695b      	ldr	r3, [r3, #20]
   2e95e:	ea32 0303 	bics.w	r3, r2, r3
   2e962:	d00a      	beq.n	2e97a <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   2e964:	6a27      	ldr	r7, [r4, #32]
   2e966:	b167      	cbz	r7, 2e982 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   2e968:	480b      	ldr	r0, [pc, #44]	; (2e998 <check_ext_api_requests+0x94>)
   2e96a:	f00f fa96 	bl	3de9a <printk>
			k_panic();
   2e96e:	4040      	eors	r0, r0
   2e970:	f380 8811 	msr	BASEPRI, r0
   2e974:	f04f 0004 	mov.w	r0, #4
   2e978:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   2e97a:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2e97c:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   2e97e:	441c      	add	r4, r3
   2e980:	e7ca      	b.n	2e918 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   2e982:	4648      	mov	r0, r9
   2e984:	f00f fa89 	bl	3de9a <printk>
			*ext_api_req->ext_api = NULL;
   2e988:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2e98a:	601f      	str	r7, [r3, #0]
   2e98c:	e7f5      	b.n	2e97a <check_ext_api_requests+0x76>
   2e98e:	bf00      	nop
   2e990:	0001c43c 	.word	0x0001c43c
   2e994:	00041d98 	.word	0x00041d98
   2e998:	000482a2 	.word	0x000482a2
   2e99c:	000482cb 	.word	0x000482cb

0002e9a0 <sensor_sim_channel_get>:

static int sensor_sim_channel_get(struct device *dev,
				  enum sensor_channel chan,
				  struct sensor_value *sample)
{
   2e9a0:	b538      	push	{r3, r4, r5, lr}
   2e9a2:	4614      	mov	r4, r2
	switch (chan) {
   2e9a4:	2910      	cmp	r1, #16
   2e9a6:	d82f      	bhi.n	2ea08 <sensor_sim_channel_get+0x68>
   2e9a8:	e8df f001 	tbb	[pc, r1]
   2e9ac:	18140d09 	.word	0x18140d09
   2e9b0:	2e2e2e2e 	.word	0x2e2e2e2e
   2e9b4:	2e2e2e2e 	.word	0x2e2e2e2e
   2e9b8:	2e2c282e 	.word	0x2e2c282e
   2e9bc:	2a          	.byte	0x2a
   2e9bd:	00          	.byte	0x00
	case SENSOR_CHAN_ACCEL_X:
		double_to_sensor_value(accel_samples[0], sample);
   2e9be:	4b14      	ldr	r3, [pc, #80]	; (2ea10 <sensor_sim_channel_get+0x70>)
		break;
	case SENSOR_CHAN_HUMIDITY:
		double_to_sensor_value(humidity_sample, sample);
		break;
	case SENSOR_CHAN_PRESS:
		double_to_sensor_value(pressure_sample, sample);
   2e9c0:	e9d3 0100 	ldrd	r0, r1, [r3]
   2e9c4:	e002      	b.n	2e9cc <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[1], sample);
   2e9c6:	4b12      	ldr	r3, [pc, #72]	; (2ea10 <sensor_sim_channel_get+0x70>)
   2e9c8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
		double_to_sensor_value(pressure_sample, sample);
   2e9cc:	f7ee ff50 	bl	1d870 <double_to_sensor_value>
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   2e9d0:	2000      	movs	r0, #0
}
   2e9d2:	bd38      	pop	{r3, r4, r5, pc}
		double_to_sensor_value(accel_samples[2], sample);
   2e9d4:	4b0e      	ldr	r3, [pc, #56]	; (2ea10 <sensor_sim_channel_get+0x70>)
   2e9d6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   2e9da:	e7f7      	b.n	2e9cc <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[0], sample);
   2e9dc:	4d0c      	ldr	r5, [pc, #48]	; (2ea10 <sensor_sim_channel_get+0x70>)
   2e9de:	e9d5 0100 	ldrd	r0, r1, [r5]
   2e9e2:	f7ee ff45 	bl	1d870 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[1], ++sample);
   2e9e6:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   2e9ea:	f104 0208 	add.w	r2, r4, #8
   2e9ee:	f7ee ff3f 	bl	1d870 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[2], ++sample);
   2e9f2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   2e9f6:	f104 0210 	add.w	r2, r4, #16
   2e9fa:	e7e7      	b.n	2e9cc <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(temp_sample, sample);
   2e9fc:	4b05      	ldr	r3, [pc, #20]	; (2ea14 <sensor_sim_channel_get+0x74>)
   2e9fe:	e7df      	b.n	2e9c0 <sensor_sim_channel_get+0x20>
		double_to_sensor_value(humidity_sample, sample);
   2ea00:	4b05      	ldr	r3, [pc, #20]	; (2ea18 <sensor_sim_channel_get+0x78>)
   2ea02:	e7dd      	b.n	2e9c0 <sensor_sim_channel_get+0x20>
		double_to_sensor_value(pressure_sample, sample);
   2ea04:	4b05      	ldr	r3, [pc, #20]	; (2ea1c <sensor_sim_channel_get+0x7c>)
   2ea06:	e7db      	b.n	2e9c0 <sensor_sim_channel_get+0x20>
		return -ENOTSUP;
   2ea08:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ea0c:	e7e1      	b.n	2e9d2 <sensor_sim_channel_get+0x32>
   2ea0e:	bf00      	nop
   2ea10:	20022980 	.word	0x20022980
   2ea14:	20022c90 	.word	0x20022c90
   2ea18:	20022998 	.word	0x20022998
   2ea1c:	200229a0 	.word	0x200229a0

0002ea20 <sensor_sim_trigger_set>:
{
   2ea20:	b508      	push	{r3, lr}
	struct sensor_sim_data *drv_data = dev->driver_data;
   2ea22:	6883      	ldr	r3, [r0, #8]
	switch (trig->type) {
   2ea24:	8808      	ldrh	r0, [r1, #0]
   2ea26:	2801      	cmp	r0, #1
   2ea28:	d104      	bne.n	2ea34 <sensor_sim_trigger_set+0x14>
		drv_data->drdy_trigger = *trig;
   2ea2a:	6808      	ldr	r0, [r1, #0]
		drv_data->drdy_handler = handler;
   2ea2c:	631a      	str	r2, [r3, #48]	; 0x30
		drv_data->drdy_trigger = *trig;
   2ea2e:	6358      	str	r0, [r3, #52]	; 0x34
	int ret = 0;
   2ea30:	2000      	movs	r0, #0
}
   2ea32:	bd08      	pop	{r3, pc}
		LOG_ERR("Unsupported sensor trigger");
   2ea34:	2301      	movs	r3, #1
   2ea36:	f04f 0000 	mov.w	r0, #0
   2ea3a:	4a07      	ldr	r2, [pc, #28]	; (2ea58 <sensor_sim_trigger_set+0x38>)
   2ea3c:	f363 0007 	bfi	r0, r3, #0, #8
   2ea40:	4b06      	ldr	r3, [pc, #24]	; (2ea5c <sensor_sim_trigger_set+0x3c>)
   2ea42:	4907      	ldr	r1, [pc, #28]	; (2ea60 <sensor_sim_trigger_set+0x40>)
   2ea44:	1a9b      	subs	r3, r3, r2
   2ea46:	08db      	lsrs	r3, r3, #3
   2ea48:	f363 108f 	bfi	r0, r3, #6, #10
   2ea4c:	f00f fa89 	bl	3df62 <log_string_sync>
	return ret;
   2ea50:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ea54:	e7ed      	b.n	2ea32 <sensor_sim_trigger_set+0x12>
   2ea56:	bf00      	nop
   2ea58:	00041c2c 	.word	0x00041c2c
   2ea5c:	00041d3c 	.word	0x00041d3c
   2ea60:	000482fe 	.word	0x000482fe

0002ea64 <generate_sine.constprop.2>:
static double generate_sine(double offset, double amplitude)
   2ea64:	b508      	push	{r3, lr}
	return z_impl_k_uptime_get();
   2ea66:	f011 fd53 	bl	40510 <z_impl_k_uptime_get>
	return offset + amplitude * sin(time % 65535);
   2ea6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2ea6e:	fbb0 f3f3 	udiv	r3, r0, r3
   2ea72:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
   2ea76:	1ac0      	subs	r0, r0, r3
   2ea78:	f7ed fe24 	bl	1c6c4 <__aeabi_ui2d>
   2ea7c:	ec41 0b10 	vmov	d0, r0, r1
   2ea80:	f7ee ffde 	bl	1da40 <sin>
   2ea84:	2200      	movs	r2, #0
   2ea86:	4b05      	ldr	r3, [pc, #20]	; (2ea9c <generate_sine.constprop.2+0x38>)
   2ea88:	ec51 0b10 	vmov	r0, r1, d0
   2ea8c:	f7ed fe94 	bl	1c7b8 <__aeabi_dmul>
   2ea90:	2200      	movs	r2, #0
   2ea92:	2300      	movs	r3, #0
   2ea94:	f7ed fcda 	bl	1c44c <__adddf3>
}
   2ea98:	bd08      	pop	{r3, pc}
   2ea9a:	bf00      	nop
   2ea9c:	40340000 	.word	0x40340000

0002eaa0 <sensor_sim_init>:
{
   2eaa0:	b530      	push	{r4, r5, lr}
	struct sensor_sim_data *drv_data = dev->driver_data;
   2eaa2:	6885      	ldr	r5, [r0, #8]
{
   2eaa4:	b087      	sub	sp, #28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2eaa6:	2400      	movs	r4, #0
   2eaa8:	f06f 0305 	mvn.w	r3, #5
   2eaac:	f44f 7200 	mov.w	r2, #512	; 0x200
   2eab0:	f105 0138 	add.w	r1, r5, #56	; 0x38
   2eab4:	e9cd 4302 	strd	r4, r3, [sp, #8]
   2eab8:	e9cd 0400 	strd	r0, r4, [sp]
   2eabc:	4b06      	ldr	r3, [pc, #24]	; (2ead8 <sensor_sim_init+0x38>)
   2eabe:	e9cd 4404 	strd	r4, r4, [sp, #16]
   2eac2:	f505 700e 	add.w	r0, r5, #568	; 0x238
   2eac6:	f00b fced 	bl	3a4a4 <z_impl_k_thread_create>
   2eaca:	f7f5 fabd 	bl	24048 <z_timer_cycle_get_32>
	srand(k_cycle_get_32());
   2eace:	f00d fb13 	bl	3c0f8 <srand>
}
   2ead2:	4620      	mov	r0, r4
   2ead4:	b007      	add	sp, #28
   2ead6:	bd30      	pop	{r4, r5, pc}
   2ead8:	0004021f 	.word	0x0004021f

0002eadc <agps_write>:
	notify_event(dev, &evt);
}

static int agps_write(struct device *dev, enum gps_agps_type type, void *data,
		      size_t data_len)
{
   2eadc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2eade:	460c      	mov	r4, r1
   2eae0:	4611      	mov	r1, r2
   2eae2:	461a      	mov	r2, r3
	int err;
	struct gps_drv_data *drv_data = dev->driver_data;
	nrf_gnss_agps_data_type_t data_type = type_lookup_gps2socket[type];
   2eae4:	4b1c      	ldr	r3, [pc, #112]	; (2eb58 <agps_write+0x7c>)
	struct gps_drv_data *drv_data = dev->driver_data;
   2eae6:	6880      	ldr	r0, [r0, #8]
	nrf_gnss_agps_data_type_t data_type = type_lookup_gps2socket[type];
   2eae8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   2eaec:	f8ad 300e 	strh.w	r3, [sp, #14]

	err = nrf_sendto(drv_data->socket, data, data_len, 0, &data_type,
   2eaf0:	2302      	movs	r3, #2
   2eaf2:	9301      	str	r3, [sp, #4]
   2eaf4:	f10d 030e 	add.w	r3, sp, #14
   2eaf8:	9300      	str	r3, [sp, #0]
   2eafa:	6a00      	ldr	r0, [r0, #32]
   2eafc:	2300      	movs	r3, #0
   2eafe:	f005 fb3b 	bl	34178 <nrf_sendto>
			 sizeof(data_type));
	if (err < 0) {
   2eb02:	4b16      	ldr	r3, [pc, #88]	; (2eb5c <agps_write+0x80>)
   2eb04:	4a16      	ldr	r2, [pc, #88]	; (2eb60 <agps_write+0x84>)
   2eb06:	2800      	cmp	r0, #0
   2eb08:	eba3 0302 	sub.w	r3, r3, r2
   2eb0c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   2eb10:	da13      	bge.n	2eb3a <agps_write+0x5e>
		LOG_ERR("Failed to send A-GPS data to modem, errno: %d", errno);
   2eb12:	2201      	movs	r2, #1
   2eb14:	f04f 0400 	mov.w	r4, #0
   2eb18:	f362 0407 	bfi	r4, r2, #0, #8
   2eb1c:	f363 148f 	bfi	r4, r3, #6, #10
   2eb20:	f00f fc0b 	bl	3e33a <__errno>
   2eb24:	490f      	ldr	r1, [pc, #60]	; (2eb64 <agps_write+0x88>)
   2eb26:	6802      	ldr	r2, [r0, #0]
   2eb28:	4620      	mov	r0, r4
   2eb2a:	f00f fa1a 	bl	3df62 <log_string_sync>
		return -errno;
   2eb2e:	f00f fc04 	bl	3e33a <__errno>
   2eb32:	6800      	ldr	r0, [r0, #0]
   2eb34:	4240      	negs	r0, r0
	}

	LOG_DBG("Sent A-GPS data to modem, type: %d", type);

	return 0;
}
   2eb36:	b004      	add	sp, #16
   2eb38:	bd10      	pop	{r4, pc}
	LOG_DBG("Sent A-GPS data to modem, type: %d", type);
   2eb3a:	2204      	movs	r2, #4
   2eb3c:	f04f 0000 	mov.w	r0, #0
   2eb40:	f362 0007 	bfi	r0, r2, #0, #8
   2eb44:	f363 108f 	bfi	r0, r3, #6, #10
   2eb48:	4a07      	ldr	r2, [pc, #28]	; (2eb68 <agps_write+0x8c>)
   2eb4a:	4623      	mov	r3, r4
   2eb4c:	4907      	ldr	r1, [pc, #28]	; (2eb6c <agps_write+0x90>)
   2eb4e:	f00f fa08 	bl	3df62 <log_string_sync>
	return 0;
   2eb52:	2000      	movs	r0, #0
   2eb54:	e7ef      	b.n	2eb36 <agps_write+0x5a>
   2eb56:	bf00      	nop
   2eb58:	00042bfc 	.word	0x00042bfc
   2eb5c:	00041cfc 	.word	0x00041cfc
   2eb60:	00041c2c 	.word	0x00041c2c
   2eb64:	00048375 	.word	0x00048375
   2eb68:	00048365 	.word	0x00048365
   2eb6c:	000483a3 	.word	0x000483a3

0002eb70 <init>:

static int init(struct device *dev, gps_event_handler_t handler)
{
   2eb70:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct gps_drv_data *drv_data = dev->driver_data;
   2eb72:	6884      	ldr	r4, [r0, #8]
{
   2eb74:	b087      	sub	sp, #28
	int err;

	if (drv_data->is_init) {
   2eb76:	69a5      	ldr	r5, [r4, #24]
{
   2eb78:	4606      	mov	r6, r0
	if (drv_data->is_init) {
   2eb7a:	b195      	cbz	r5, 2eba2 <init+0x32>
		LOG_WRN("GPS is already initialized");
   2eb7c:	2302      	movs	r3, #2
   2eb7e:	f04f 0000 	mov.w	r0, #0
   2eb82:	4a3c      	ldr	r2, [pc, #240]	; (2ec74 <init+0x104>)
   2eb84:	f363 0007 	bfi	r0, r3, #0, #8
   2eb88:	4b3b      	ldr	r3, [pc, #236]	; (2ec78 <init+0x108>)
   2eb8a:	493c      	ldr	r1, [pc, #240]	; (2ec7c <init+0x10c>)
   2eb8c:	1a9b      	subs	r3, r3, r2
   2eb8e:	08db      	lsrs	r3, r3, #3
   2eb90:	f363 108f 	bfi	r0, r3, #6, #10
   2eb94:	f00f f9e5 	bl	3df62 <log_string_sync>

		return -EALREADY;
   2eb98:	f06f 0577 	mvn.w	r5, #119	; 0x77
	}

	drv_data->is_init = true;

	return 0;
}
   2eb9c:	4628      	mov	r0, r5
   2eb9e:	b007      	add	sp, #28
   2eba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (handler == NULL) {
   2eba2:	b981      	cbnz	r1, 2ebc6 <init+0x56>
		LOG_ERR("No event handler provided");
   2eba4:	2301      	movs	r3, #1
   2eba6:	f04f 0000 	mov.w	r0, #0
   2ebaa:	4a32      	ldr	r2, [pc, #200]	; (2ec74 <init+0x104>)
   2ebac:	f363 0007 	bfi	r0, r3, #0, #8
   2ebb0:	4b31      	ldr	r3, [pc, #196]	; (2ec78 <init+0x108>)
   2ebb2:	4933      	ldr	r1, [pc, #204]	; (2ec80 <init+0x110>)
   2ebb4:	1a9b      	subs	r3, r3, r2
   2ebb6:	08db      	lsrs	r3, r3, #3
   2ebb8:	f363 108f 	bfi	r0, r3, #6, #10
   2ebbc:	f00f f9d1 	bl	3df62 <log_string_sync>
		return -EINVAL;
   2ebc0:	f06f 0515 	mvn.w	r5, #21
   2ebc4:	e7ea      	b.n	2eb9c <init+0x2c>
	if (drv_data->socket < 0) {
   2ebc6:	6a23      	ldr	r3, [r4, #32]
	drv_data->handler = handler;
   2ebc8:	6061      	str	r1, [r4, #4]
	if (drv_data->socket < 0) {
   2ebca:	2b00      	cmp	r3, #0
   2ebcc:	da1a      	bge.n	2ec04 <init+0x94>
		drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   2ebce:	f44f 7201 	mov.w	r2, #516	; 0x204
   2ebd2:	2102      	movs	r1, #2
   2ebd4:	2001      	movs	r0, #1
   2ebd6:	f005 faaf 	bl	34138 <nrf_socket>
   2ebda:	4603      	mov	r3, r0
   2ebdc:	4926      	ldr	r1, [pc, #152]	; (2ec78 <init+0x108>)
   2ebde:	4a25      	ldr	r2, [pc, #148]	; (2ec74 <init+0x104>)
		if (drv_data->socket >= 0) {
   2ebe0:	2b00      	cmp	r3, #0
   2ebe2:	eba1 0102 	sub.w	r1, r1, r2
		drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   2ebe6:	6220      	str	r0, [r4, #32]
		if (drv_data->socket >= 0) {
   2ebe8:	f3c1 01c9 	ubfx	r1, r1, #3, #10
			LOG_DBG("GPS socket created, fd: %d", drv_data->socket);
   2ebec:	f04f 0000 	mov.w	r0, #0
		if (drv_data->socket >= 0) {
   2ebf0:	db34      	blt.n	2ec5c <init+0xec>
			LOG_DBG("GPS socket created, fd: %d", drv_data->socket);
   2ebf2:	2204      	movs	r2, #4
   2ebf4:	f362 0007 	bfi	r0, r2, #0, #8
   2ebf8:	f361 108f 	bfi	r0, r1, #6, #10
   2ebfc:	4a21      	ldr	r2, [pc, #132]	; (2ec84 <init+0x114>)
   2ebfe:	4922      	ldr	r1, [pc, #136]	; (2ec88 <init+0x118>)
   2ec00:	f00f f9af 	bl	3df62 <log_string_sync>
	k_delayed_work_init(&drv_data->start_work, start_work_fn);
   2ec04:	f604 00f4 	addw	r0, r4, #2292	; 0x8f4
   2ec08:	4920      	ldr	r1, [pc, #128]	; (2ec8c <init+0x11c>)
   2ec0a:	f011 fc75 	bl	404f8 <k_delayed_work_init>
	k_delayed_work_init(&drv_data->stop_work, stop_work_fn);
   2ec0e:	f604 1014 	addw	r0, r4, #2324	; 0x914
   2ec12:	491f      	ldr	r1, [pc, #124]	; (2ec90 <init+0x120>)
   2ec14:	f011 fc70 	bl	404f8 <k_delayed_work_init>
	k_delayed_work_init(&drv_data->timeout_work, timeout_work_fn);
   2ec18:	491e      	ldr	r1, [pc, #120]	; (2ec94 <init+0x124>)
   2ec1a:	f604 1034 	addw	r0, r4, #2356	; 0x934
   2ec1e:	f011 fc6b 	bl	404f8 <k_delayed_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2ec22:	2201      	movs	r2, #1
   2ec24:	2100      	movs	r1, #0
   2ec26:	f604 00dc 	addw	r0, r4, #2268	; 0x8dc
   2ec2a:	f011 fbd3 	bl	403d4 <z_impl_k_sem_init>
	struct gps_drv_data *drv_data = dev->driver_data;
   2ec2e:	68b7      	ldr	r7, [r6, #8]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2ec30:	2300      	movs	r3, #0
   2ec32:	220a      	movs	r2, #10
   2ec34:	e9cd 3304 	strd	r3, r3, [sp, #16]
   2ec38:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2ec3c:	e9cd 6300 	strd	r6, r3, [sp]
   2ec40:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2ec44:	4b14      	ldr	r3, [pc, #80]	; (2ec98 <init+0x128>)
   2ec46:	f107 0128 	add.w	r1, r7, #40	; 0x28
   2ec4a:	f607 0028 	addw	r0, r7, #2088	; 0x828
   2ec4e:	f00b fc29 	bl	3a4a4 <z_impl_k_thread_create>
	drv_data->is_init = true;
   2ec52:	2301      	movs	r3, #1
	drv_data->thread_id = k_thread_create(
   2ec54:	f8c7 08d8 	str.w	r0, [r7, #2264]	; 0x8d8
	drv_data->is_init = true;
   2ec58:	61a3      	str	r3, [r4, #24]
	return 0;
   2ec5a:	e79f      	b.n	2eb9c <init+0x2c>
			LOG_ERR("Could not initialize socket, error: %d)",
   2ec5c:	2201      	movs	r2, #1
   2ec5e:	f362 0007 	bfi	r0, r2, #0, #8
   2ec62:	f361 108f 	bfi	r0, r1, #6, #10
   2ec66:	461a      	mov	r2, r3
   2ec68:	490c      	ldr	r1, [pc, #48]	; (2ec9c <init+0x12c>)
   2ec6a:	f00f f97a 	bl	3df62 <log_string_sync>
			return -EIO;
   2ec6e:	f06f 0504 	mvn.w	r5, #4
   2ec72:	e793      	b.n	2eb9c <init+0x2c>
   2ec74:	00041c2c 	.word	0x00041c2c
   2ec78:	00041cfc 	.word	0x00041cfc
   2ec7c:	00048507 	.word	0x00048507
   2ec80:	00048522 	.word	0x00048522
   2ec84:	00048370 	.word	0x00048370
   2ec88:	0004853c 	.word	0x0004853c
   2ec8c:	0004026f 	.word	0x0004026f
   2ec90:	00040249 	.word	0x00040249
   2ec94:	0002f2ad 	.word	0x0002f2ad
   2ec98:	0002edf9 	.word	0x0002edf9
   2ec9c:	0004855b 	.word	0x0004855b

0002eca0 <setup>:
	drv_data->socket = -1;
   2eca0:	f04f 33ff 	mov.w	r3, #4294967295
	struct gps_drv_data *drv_data = dev->driver_data;
   2eca4:	6882      	ldr	r2, [r0, #8]
{
   2eca6:	b570      	push	{r4, r5, r6, lr}
	drv_data->socket = -1;
   2eca8:	6213      	str	r3, [r2, #32]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2ecaa:	2300      	movs	r3, #0
	drv_data->dev = dev;
   2ecac:	f842 0b1c 	str.w	r0, [r2], #28
   2ecb0:	e8d2 1fef 	ldaex	r1, [r2]
   2ecb4:	e8c2 3fe0 	stlex	r0, r3, [r2]
   2ecb8:	2800      	cmp	r0, #0
   2ecba:	d1f9      	bne.n	2ecb0 <setup+0x10>
	err = at_cmd_write(CONFIG_NRF9160_GPS_MAGPIO_STRING,
   2ecbc:	461a      	mov	r2, r3
   2ecbe:	4619      	mov	r1, r3
   2ecc0:	4824      	ldr	r0, [pc, #144]	; (2ed54 <setup+0xb4>)
   2ecc2:	f7f9 f93d 	bl	27f40 <at_cmd_write>
	if (err) {
   2ecc6:	4c24      	ldr	r4, [pc, #144]	; (2ed58 <setup+0xb8>)
   2ecc8:	4b24      	ldr	r3, [pc, #144]	; (2ed5c <setup+0xbc>)
   2ecca:	4605      	mov	r5, r0
   2eccc:	1ae4      	subs	r4, r4, r3
   2ecce:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2ecd2:	b160      	cbz	r0, 2ecee <setup+0x4e>
		LOG_ERR("Could not configure MAGPIO, error: %d", err);
   2ecd4:	f04f 0000 	mov.w	r0, #0
   2ecd8:	2301      	movs	r3, #1
   2ecda:	462a      	mov	r2, r5
   2ecdc:	f363 0007 	bfi	r0, r3, #0, #8
   2ece0:	491f      	ldr	r1, [pc, #124]	; (2ed60 <setup+0xc0>)
   2ece2:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_ERR("Could not configure COEX0, error: %d", err);
   2ece6:	f00f f93c 	bl	3df62 <log_string_sync>
}
   2ecea:	4628      	mov	r0, r5
   2ecec:	bd70      	pop	{r4, r5, r6, pc}
	LOG_DBG("MAGPIO set: %s",
   2ecee:	2304      	movs	r3, #4
   2ecf0:	f04f 0600 	mov.w	r6, #0
   2ecf4:	4817      	ldr	r0, [pc, #92]	; (2ed54 <setup+0xb4>)
   2ecf6:	f363 0607 	bfi	r6, r3, #0, #8
   2ecfa:	f00f f944 	bl	3df86 <log_strdup>
   2ecfe:	f364 168f 	bfi	r6, r4, #6, #10
   2ed02:	4603      	mov	r3, r0
   2ed04:	4a17      	ldr	r2, [pc, #92]	; (2ed64 <setup+0xc4>)
   2ed06:	4918      	ldr	r1, [pc, #96]	; (2ed68 <setup+0xc8>)
   2ed08:	4630      	mov	r0, r6
   2ed0a:	f00f f92a 	bl	3df62 <log_string_sync>
	err = at_cmd_write(CONFIG_NRF9160_GPS_COEX0_STRING,
   2ed0e:	462b      	mov	r3, r5
   2ed10:	462a      	mov	r2, r5
   2ed12:	4629      	mov	r1, r5
   2ed14:	4815      	ldr	r0, [pc, #84]	; (2ed6c <setup+0xcc>)
   2ed16:	f7f9 f913 	bl	27f40 <at_cmd_write>
	if (err) {
   2ed1a:	4605      	mov	r5, r0
   2ed1c:	b148      	cbz	r0, 2ed32 <setup+0x92>
		LOG_ERR("Could not configure COEX0, error: %d", err);
   2ed1e:	f04f 0000 	mov.w	r0, #0
   2ed22:	2301      	movs	r3, #1
   2ed24:	f363 0007 	bfi	r0, r3, #0, #8
   2ed28:	f364 108f 	bfi	r0, r4, #6, #10
   2ed2c:	462a      	mov	r2, r5
   2ed2e:	4910      	ldr	r1, [pc, #64]	; (2ed70 <setup+0xd0>)
   2ed30:	e7d9      	b.n	2ece6 <setup+0x46>
	LOG_DBG("COEX0 set: %s",
   2ed32:	2304      	movs	r3, #4
   2ed34:	f04f 0600 	mov.w	r6, #0
   2ed38:	480c      	ldr	r0, [pc, #48]	; (2ed6c <setup+0xcc>)
   2ed3a:	f363 0607 	bfi	r6, r3, #0, #8
   2ed3e:	f00f f922 	bl	3df86 <log_strdup>
   2ed42:	f364 168f 	bfi	r6, r4, #6, #10
   2ed46:	4603      	mov	r3, r0
   2ed48:	4a06      	ldr	r2, [pc, #24]	; (2ed64 <setup+0xc4>)
   2ed4a:	490a      	ldr	r1, [pc, #40]	; (2ed74 <setup+0xd4>)
   2ed4c:	4630      	mov	r0, r6
   2ed4e:	f00f f908 	bl	3df62 <log_string_sync>
	return err;
   2ed52:	e7ca      	b.n	2ecea <setup+0x4a>
   2ed54:	00048583 	.word	0x00048583
   2ed58:	00041cfc 	.word	0x00041cfc
   2ed5c:	00041c2c 	.word	0x00041c2c
   2ed60:	000485a2 	.word	0x000485a2
   2ed64:	00048356 	.word	0x00048356
   2ed68:	000485c8 	.word	0x000485c8
   2ed6c:	000485db 	.word	0x000485db
   2ed70:	000485f3 	.word	0x000485f3
   2ed74:	00048618 	.word	0x00048618

0002ed78 <stop_gps.isra.4>:
static int stop_gps(struct device *dev, bool is_timeout)
   2ed78:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ed7a:	4b19      	ldr	r3, [pc, #100]	; (2ede0 <stop_gps.isra.4+0x68>)
   2ed7c:	4c19      	ldr	r4, [pc, #100]	; (2ede4 <stop_gps.isra.4+0x6c>)
   2ed7e:	4605      	mov	r5, r0
	if (is_timeout) {
   2ed80:	1ae4      	subs	r4, r4, r3
		LOG_DBG("Stopping GPS due to timeout");
   2ed82:	f04f 0000 	mov.w	r0, #0
   2ed86:	2304      	movs	r3, #4
   2ed88:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2ed8c:	f363 0007 	bfi	r0, r3, #0, #8
   2ed90:	f364 108f 	bfi	r0, r4, #6, #10
   2ed94:	4a14      	ldr	r2, [pc, #80]	; (2ede8 <stop_gps.isra.4+0x70>)
	if (is_timeout) {
   2ed96:	b309      	cbz	r1, 2eddc <stop_gps.isra.4+0x64>
		LOG_DBG("Stopping GPS due to timeout");
   2ed98:	4914      	ldr	r1, [pc, #80]	; (2edec <stop_gps.isra.4+0x74>)
		LOG_DBG("Stopping GPS");
   2ed9a:	f00f f8e2 	bl	3df62 <log_string_sync>
   2ed9e:	2300      	movs	r3, #0
   2eda0:	f105 021c 	add.w	r2, r5, #28
   2eda4:	e8d2 1fef 	ldaex	r1, [r2]
   2eda8:	e8c2 3fe0 	stlex	r0, r3, [r2]
   2edac:	2800      	cmp	r0, #0
   2edae:	d1f9      	bne.n	2eda4 <stop_gps.isra.4+0x2c>
	retval = nrf_setsockopt(drv_data->socket,
   2edb0:	9300      	str	r3, [sp, #0]
   2edb2:	2208      	movs	r2, #8
   2edb4:	f44f 7101 	mov.w	r1, #516	; 0x204
   2edb8:	6a28      	ldr	r0, [r5, #32]
   2edba:	f005 fabf 	bl	3433c <nrf_setsockopt>
	if (retval != 0) {
   2edbe:	b158      	cbz	r0, 2edd8 <stop_gps.isra.4+0x60>
		LOG_ERR("Failed to stop GPS");
   2edc0:	2301      	movs	r3, #1
   2edc2:	f04f 0000 	mov.w	r0, #0
   2edc6:	f363 0007 	bfi	r0, r3, #0, #8
   2edca:	f364 108f 	bfi	r0, r4, #6, #10
   2edce:	4908      	ldr	r1, [pc, #32]	; (2edf0 <stop_gps.isra.4+0x78>)
   2edd0:	f00f f8c7 	bl	3df62 <log_string_sync>
		return -EIO;
   2edd4:	f06f 0004 	mvn.w	r0, #4
}
   2edd8:	b003      	add	sp, #12
   2edda:	bd30      	pop	{r4, r5, pc}
		LOG_DBG("Stopping GPS");
   2eddc:	4905      	ldr	r1, [pc, #20]	; (2edf4 <stop_gps.isra.4+0x7c>)
   2edde:	e7dc      	b.n	2ed9a <stop_gps.isra.4+0x22>
   2ede0:	00041c2c 	.word	0x00041c2c
   2ede4:	00041cfc 	.word	0x00041cfc
   2ede8:	0004835c 	.word	0x0004835c
   2edec:	00048886 	.word	0x00048886
   2edf0:	000488b7 	.word	0x000488b7
   2edf4:	000488a6 	.word	0x000488a6

0002edf8 <gps_thread>:
{
   2edf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool has_fix = false;
   2edfc:	2400      	movs	r4, #0
	bool operation_blocked = false;
   2edfe:	4625      	mov	r5, r4
	struct gps_drv_data *drv_data = dev->driver_data;
   2ee00:	6883      	ldr	r3, [r0, #8]
{
   2ee02:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
	struct gps_event evt = {
   2ee06:	22c0      	movs	r2, #192	; 0xc0
{
   2ee08:	4682      	mov	sl, r0
	struct gps_event evt = {
   2ee0a:	2100      	movs	r1, #0
   2ee0c:	a80c      	add	r0, sp, #48	; 0x30
	struct gps_drv_data *drv_data = dev->driver_data;
   2ee0e:	9309      	str	r3, [sp, #36]	; 0x24
	struct gps_event evt = {
   2ee10:	f011 fc24 	bl	4065c <memset>
   2ee14:	4b8f      	ldr	r3, [pc, #572]	; (2f054 <gps_thread+0x25c>)
			LOG_DBG("A-GPS data update needed");
   2ee16:	4a90      	ldr	r2, [pc, #576]	; (2f058 <gps_thread+0x260>)
   2ee18:	1a9b      	subs	r3, r3, r2
   2ee1a:	f3c3 09c9 	ubfx	r9, r3, #3, #10
	return z_impl_k_sem_take(sem, timeout);
   2ee1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ee20:	f04f 31ff 	mov.w	r1, #4294967295
   2ee24:	f603 00dc 	addw	r0, r3, #2268	; 0x8dc
   2ee28:	f00b fa0a 	bl	3a240 <z_impl_k_sem_take>
	notify_event(dev, &evt);
   2ee2c:	a90c      	add	r1, sp, #48	; 0x30
   2ee2e:	4650      	mov	r0, sl
   2ee30:	f011 fa05 	bl	4023e <notify_event>
		nrf_gnss_data_frame_t raw_gps_data = {0};
   2ee34:	22d8      	movs	r2, #216	; 0xd8
   2ee36:	2100      	movs	r1, #0
   2ee38:	a86c      	add	r0, sp, #432	; 0x1b0
   2ee3a:	f011 fc0f 	bl	4065c <memset>
		struct gps_event evt = {0};
   2ee3e:	22c0      	movs	r2, #192	; 0xc0
   2ee40:	2100      	movs	r1, #0
   2ee42:	a83c      	add	r0, sp, #240	; 0xf0
   2ee44:	f011 fc0a 	bl	4065c <memset>
		len = recv(drv_data->socket, &raw_gps_data,
   2ee48:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ee4a:	6a1f      	ldr	r7, [r3, #32]
	__ASSERT_NO_MSG(socket_ops);
   2ee4c:	4b83      	ldr	r3, [pc, #524]	; (2f05c <gps_thread+0x264>)
   2ee4e:	681b      	ldr	r3, [r3, #0]
   2ee50:	b94b      	cbnz	r3, 2ee66 <gps_thread+0x6e>
   2ee52:	4983      	ldr	r1, [pc, #524]	; (2f060 <gps_thread+0x268>)
   2ee54:	4883      	ldr	r0, [pc, #524]	; (2f064 <gps_thread+0x26c>)
   2ee56:	2369      	movs	r3, #105	; 0x69
   2ee58:	4a83      	ldr	r2, [pc, #524]	; (2f068 <gps_thread+0x270>)
   2ee5a:	f00f f81e 	bl	3de9a <printk>
   2ee5e:	2169      	movs	r1, #105	; 0x69
   2ee60:	4881      	ldr	r0, [pc, #516]	; (2f068 <gps_thread+0x270>)
   2ee62:	f00f f86d 	bl	3df40 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   2ee66:	4b7d      	ldr	r3, [pc, #500]	; (2f05c <gps_thread+0x264>)
   2ee68:	681b      	ldr	r3, [r3, #0]
   2ee6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2ee6c:	b94b      	cbnz	r3, 2ee82 <gps_thread+0x8a>
   2ee6e:	497f      	ldr	r1, [pc, #508]	; (2f06c <gps_thread+0x274>)
   2ee70:	487c      	ldr	r0, [pc, #496]	; (2f064 <gps_thread+0x26c>)
   2ee72:	236a      	movs	r3, #106	; 0x6a
   2ee74:	4a7c      	ldr	r2, [pc, #496]	; (2f068 <gps_thread+0x270>)
   2ee76:	f00f f810 	bl	3de9a <printk>
   2ee7a:	216a      	movs	r1, #106	; 0x6a
   2ee7c:	487a      	ldr	r0, [pc, #488]	; (2f068 <gps_thread+0x270>)
   2ee7e:	f00f f85f 	bl	3df40 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   2ee82:	4b76      	ldr	r3, [pc, #472]	; (2f05c <gps_thread+0x264>)
   2ee84:	22d8      	movs	r2, #216	; 0xd8
   2ee86:	681b      	ldr	r3, [r3, #0]
   2ee88:	a96c      	add	r1, sp, #432	; 0x1b0
   2ee8a:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   2ee8c:	4638      	mov	r0, r7
   2ee8e:	2300      	movs	r3, #0
   2ee90:	47b0      	blx	r6
		if (len <= 0) {
   2ee92:	1e06      	subs	r6, r0, #0
   2ee94:	dc1a      	bgt.n	2eecc <gps_thread+0xd4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ee96:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ee98:	331c      	adds	r3, #28
   2ee9a:	e8d3 3faf 	lda	r3, [r3]
			if (!atomic_get(&drv_data->is_active)) {
   2ee9e:	2b00      	cmp	r3, #0
   2eea0:	d0bd      	beq.n	2ee1e <gps_thread+0x26>
			LOG_ERR("recv() returned error: %d", len);
   2eea2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2eea6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   2eeaa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2eeae:	f043 0301 	orr.w	r3, r3, #1
   2eeb2:	f363 0207 	bfi	r2, r3, #0, #8
   2eeb6:	b293      	uxth	r3, r2
   2eeb8:	f369 138f 	bfi	r3, r9, #6, #10
   2eebc:	4632      	mov	r2, r6
   2eebe:	496c      	ldr	r1, [pc, #432]	; (2f070 <gps_thread+0x278>)
   2eec0:	b298      	uxth	r0, r3
   2eec2:	f8ad 300c 	strh.w	r3, [sp, #12]
   2eec6:	f00f f84c 	bl	3df62 <log_string_sync>
			continue;
   2eeca:	e7b3      	b.n	2ee34 <gps_thread+0x3c>
		switch (raw_gps_data.data_id) {
   2eecc:	f89d 71b0 	ldrb.w	r7, [sp, #432]	; 0x1b0
   2eed0:	2f02      	cmp	r7, #2
   2eed2:	f000 8150 	beq.w	2f176 <gps_thread+0x37e>
   2eed6:	2f03      	cmp	r7, #3
   2eed8:	f000 8178 	beq.w	2f1cc <gps_thread+0x3d4>
   2eedc:	2f01      	cmp	r7, #1
   2eede:	d1a9      	bne.n	2ee34 <gps_thread+0x3c>
	return ((pvt->flags & NRF_GNSS_PVT_FLAG_DEADLINE_MISSED)
   2eee0:	f89d 31f4 	ldrb.w	r3, [sp, #500]	; 0x1f4
			if (has_no_time_window(&raw_gps_data.pvt) ||
   2eee4:	f013 0318 	ands.w	r3, r3, #24
   2eee8:	930a      	str	r3, [sp, #40]	; 0x28
   2eeea:	d020      	beq.n	2ef2e <gps_thread+0x136>
				if (operation_blocked) {
   2eeec:	2d00      	cmp	r5, #0
   2eeee:	f040 81a0 	bne.w	2f232 <gps_thread+0x43a>
				LOG_DBG("Waiting for time window to operate");
   2eef2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2eef6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   2eefa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2eefe:	f043 0304 	orr.w	r3, r3, #4
   2ef02:	f363 0207 	bfi	r2, r3, #0, #8
   2ef06:	b293      	uxth	r3, r2
   2ef08:	f369 138f 	bfi	r3, r9, #6, #10
   2ef0c:	b298      	uxth	r0, r3
   2ef0e:	4a59      	ldr	r2, [pc, #356]	; (2f074 <gps_thread+0x27c>)
   2ef10:	4959      	ldr	r1, [pc, #356]	; (2f078 <gps_thread+0x280>)
   2ef12:	f8ad 3010 	strh.w	r3, [sp, #16]
   2ef16:	f00f f824 	bl	3df62 <log_string_sync>
				evt.type = GPS_EVT_OPERATION_BLOCKED;
   2ef1a:	2307      	movs	r3, #7
				notify_event(dev, &evt);
   2ef1c:	a93c      	add	r1, sp, #240	; 0xf0
   2ef1e:	4650      	mov	r0, sl
				evt.type = GPS_EVT_OPERATION_BLOCKED;
   2ef20:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
			has_fix = false;
   2ef24:	462c      	mov	r4, r5
				notify_event(dev, &evt);
   2ef26:	f011 f98a 	bl	4023e <notify_event>
				operation_blocked = true;
   2ef2a:	463d      	mov	r5, r7
				continue;
   2ef2c:	e782      	b.n	2ee34 <gps_thread+0x3c>
			} else if (operation_blocked) {
   2ef2e:	b1d5      	cbz	r5, 2ef66 <gps_thread+0x16e>
				LOG_DBG("GPS has time window to operate");
   2ef30:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2ef34:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   2ef38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2ef3c:	f043 0304 	orr.w	r3, r3, #4
   2ef40:	f363 0207 	bfi	r2, r3, #0, #8
   2ef44:	b293      	uxth	r3, r2
   2ef46:	f369 138f 	bfi	r3, r9, #6, #10
   2ef4a:	b298      	uxth	r0, r3
   2ef4c:	494b      	ldr	r1, [pc, #300]	; (2f07c <gps_thread+0x284>)
   2ef4e:	4a49      	ldr	r2, [pc, #292]	; (2f074 <gps_thread+0x27c>)
   2ef50:	f8ad 3014 	strh.w	r3, [sp, #20]
   2ef54:	f00f f805 	bl	3df62 <log_string_sync>
				evt.type = GPS_EVT_OPERATION_UNBLOCKED;
   2ef58:	2308      	movs	r3, #8
				notify_event(dev, &evt);
   2ef5a:	a93c      	add	r1, sp, #240	; 0xf0
   2ef5c:	4650      	mov	r0, sl
				evt.type = GPS_EVT_OPERATION_UNBLOCKED;
   2ef5e:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
				notify_event(dev, &evt);
   2ef62:	f011 f96c 	bl	4023e <notify_event>
	dest->latitude = src->latitude;
   2ef66:	e9dd 236e 	ldrd	r2, r3, [sp, #440]	; 0x1b8
   2ef6a:	e9cd 233e 	strd	r2, r3, [sp, #248]	; 0xf8
	dest->longitude = src->longitude;
   2ef6e:	e9dd 2370 	ldrd	r2, r3, [sp, #448]	; 0x1c0
   2ef72:	e9cd 2340 	strd	r2, r3, [sp, #256]	; 0x100
	dest->datetime.year = src->datetime.year;
   2ef76:	9a76      	ldr	r2, [sp, #472]	; 0x1d8
   2ef78:	af6c      	add	r7, sp, #432	; 0x1b0
   2ef7a:	924b      	str	r2, [sp, #300]	; 0x12c
	dest->datetime.hour = src->datetime.hour;
   2ef7c:	f8bd 21dc 	ldrh.w	r2, [sp, #476]	; 0x1dc
	for (size_t i = 0;
   2ef80:	2100      	movs	r1, #0
	dest->datetime.hour = src->datetime.hour;
   2ef82:	f8ad 2130 	strh.w	r2, [sp, #304]	; 0x130
	dest->tdop = src->tdop;
   2ef86:	463a      	mov	r2, r7
	dest->altitude = src->altitude;
   2ef88:	9b72      	ldr	r3, [sp, #456]	; 0x1c8
   2ef8a:	9342      	str	r3, [sp, #264]	; 0x108
	dest->accuracy = src->accuracy;
   2ef8c:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
   2ef8e:	9343      	str	r3, [sp, #268]	; 0x10c
	dest->speed = src->speed;
   2ef90:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
   2ef92:	9344      	str	r3, [sp, #272]	; 0x110
	dest->heading = src->heading;
   2ef94:	9b75      	ldr	r3, [sp, #468]	; 0x1d4
   2ef96:	9345      	str	r3, [sp, #276]	; 0x114
	dest->datetime.seconds = src->datetime.seconds;
   2ef98:	f89d 31de 	ldrb.w	r3, [sp, #478]	; 0x1de
   2ef9c:	f88d 3132 	strb.w	r3, [sp, #306]	; 0x132
	dest->datetime.ms = src->datetime.ms;
   2efa0:	f8bd 31e0 	ldrh.w	r3, [sp, #480]	; 0x1e0
   2efa4:	f8ad 3134 	strh.w	r3, [sp, #308]	; 0x134
	dest->pdop = src->pdop;
   2efa8:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
   2efaa:	9346      	str	r3, [sp, #280]	; 0x118
	dest->hdop = src->hdop;
   2efac:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
   2efae:	9347      	str	r3, [sp, #284]	; 0x11c
	dest->vdop = src->vdop;
   2efb0:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
   2efb2:	9348      	str	r3, [sp, #288]	; 0x120
	dest->tdop = src->tdop;
   2efb4:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
   2efb6:	9349      	str	r3, [sp, #292]	; 0x124
	for (size_t i = 0;
   2efb8:	ab3c      	add	r3, sp, #240	; 0xf0
		dest->sv[i].sv = src->sv[i].sv;
   2efba:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
	     i < MIN(NRF_GNSS_MAX_SATELLITES, GPS_PVT_MAX_SV_COUNT); i++) {
   2efbe:	3101      	adds	r1, #1
		dest->sv[i].sv = src->sv[i].sv;
   2efc0:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
		dest->sv[i].cn0 = src->sv[i].cn0;
   2efc4:	f8b2 004a 	ldrh.w	r0, [r2, #74]	; 0x4a
	for (size_t i = 0;
   2efc8:	290c      	cmp	r1, #12
		dest->sv[i].cn0 = src->sv[i].cn0;
   2efca:	f8a3 0048 	strh.w	r0, [r3, #72]	; 0x48
		dest->sv[i].elevation = src->sv[i].elevation;
   2efce:	f8b2 004c 	ldrh.w	r0, [r2, #76]	; 0x4c
   2efd2:	f103 030a 	add.w	r3, r3, #10
   2efd6:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
		dest->sv[i].azimuth = src->sv[i].azimuth;
   2efda:	f8b2 004e 	ldrh.w	r0, [r2, #78]	; 0x4e
   2efde:	f102 020c 	add.w	r2, r2, #12
   2efe2:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
		dest->sv[i].signal = src->sv[i].signal;
   2efe6:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
   2efea:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
	for (size_t i = 0;
   2efee:	d1e4      	bne.n	2efba <gps_thread+0x1c2>
			if (is_fix(&raw_gps_data.pvt)) {
   2eff0:	f89d 41f4 	ldrb.w	r4, [sp, #500]	; 0x1f4
   2eff4:	f014 0401 	ands.w	r4, r4, #1
   2eff8:	d046      	beq.n	2f088 <gps_thread+0x290>
				LOG_DBG("PVT: Position fix");
   2effa:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   2effe:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2f002:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2f006:	f043 0304 	orr.w	r3, r3, #4
   2f00a:	f363 0207 	bfi	r2, r3, #0, #8
   2f00e:	b293      	uxth	r3, r2
   2f010:	f369 138f 	bfi	r3, r9, #6, #10
   2f014:	b298      	uxth	r0, r3
   2f016:	4a17      	ldr	r2, [pc, #92]	; (2f074 <gps_thread+0x27c>)
   2f018:	4919      	ldr	r1, [pc, #100]	; (2f080 <gps_thread+0x288>)
   2f01a:	f8ad 3018 	strh.w	r3, [sp, #24]
   2f01e:	f00e ffa0 	bl	3df62 <log_string_sync>
				evt.type = GPS_EVT_PVT_FIX;
   2f022:	2304      	movs	r3, #4
   2f024:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
	return z_impl_k_uptime_get();
   2f028:	f011 fa72 	bl	40510 <z_impl_k_uptime_get>
				fix_timestamp = k_uptime_get();
   2f02c:	4b15      	ldr	r3, [pc, #84]	; (2f084 <gps_thread+0x28c>)
   2f02e:	e9c3 0100 	strd	r0, r1, [r3]
	struct gps_drv_data *drv_data = dev->driver_data;
   2f032:	f8da 0008 	ldr.w	r0, [sl, #8]
	switch (drv_data->current_cfg.nav_mode) {
   2f036:	7a03      	ldrb	r3, [r0, #8]
   2f038:	b10b      	cbz	r3, 2f03e <gps_thread+0x246>
   2f03a:	2b02      	cmp	r3, #2
   2f03c:	d108      	bne.n	2f050 <gps_thread+0x258>
		k_delayed_work_cancel(&drv_data->timeout_work);
   2f03e:	f600 1034 	addw	r0, r0, #2356	; 0x934
   2f042:	f00b fc43 	bl	3a8cc <k_delayed_work_cancel>
		stop_gps(dev, false);
   2f046:	2100      	movs	r1, #0
   2f048:	f8da 0008 	ldr.w	r0, [sl, #8]
   2f04c:	f7ff fe94 	bl	2ed78 <stop_gps.isra.4>
				has_fix = true;
   2f050:	2401      	movs	r4, #1
   2f052:	e01c      	b.n	2f08e <gps_thread+0x296>
   2f054:	00041cfc 	.word	0x00041cfc
   2f058:	00041c2c 	.word	0x00041c2c
   2f05c:	2002389c 	.word	0x2002389c
   2f060:	000433f1 	.word	0x000433f1
   2f064:	00043278 	.word	0x00043278
   2f068:	000433c1 	.word	0x000433c1
   2f06c:	00044db7 	.word	0x00044db7
   2f070:	000483f4 	.word	0x000483f4
   2f074:	0004833a 	.word	0x0004833a
   2f078:	0004840e 	.word	0x0004840e
   2f07c:	00048435 	.word	0x00048435
   2f080:	00048458 	.word	0x00048458
   2f084:	20022c98 	.word	0x20022c98
				evt.type = GPS_EVT_PVT;
   2f088:	2303      	movs	r3, #3
   2f08a:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
	u8_t  n_unhealthy = 0;
   2f08e:	2500      	movs	r5, #0
	u8_t  n_used = 0;
   2f090:	462e      	mov	r6, r5
			notify_event(dev, &evt);
   2f092:	a93c      	add	r1, sp, #240	; 0xf0
   2f094:	4650      	mov	r0, sl
   2f096:	f011 f8d2 	bl	4023e <notify_event>
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
   2f09a:	950b      	str	r5, [sp, #44]	; 0x2c
		u8_t sv = pvt_data->pvt.sv[i].sv;
   2f09c:	f897 c046 	ldrb.w	ip, [r7, #70]	; 0x46
		if (sv) { /* SV number 0 indicates no satellite */
   2f0a0:	f1bc 0f00 	cmp.w	ip, #0
   2f0a4:	d02a      	beq.n	2f0fc <gps_thread+0x304>
			n_tracked++;
   2f0a6:	980a      	ldr	r0, [sp, #40]	; 0x28
			     NRF_GNSS_SV_FLAG_USED_IN_FIX) ? true : false;
   2f0a8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
			n_tracked++;
   2f0ac:	3001      	adds	r0, #1
   2f0ae:	b2c3      	uxtb	r3, r0
			     NRF_GNSS_SV_FLAG_USED_IN_FIX) ? true : false;
   2f0b0:	f3c2 0140 	ubfx	r1, r2, #1, #1
			n_tracked++;
   2f0b4:	930a      	str	r3, [sp, #40]	; 0x28
			if (used) {
   2f0b6:	b109      	cbz	r1, 2f0bc <gps_thread+0x2c4>
				n_used++;
   2f0b8:	3601      	adds	r6, #1
   2f0ba:	b2f6      	uxtb	r6, r6
				  NRF_GNSS_SV_FLAG_UNHEALTHY) ? true : false;
   2f0bc:	f3c2 02c0 	ubfx	r2, r2, #3, #1
			if (unhealthy) {
   2f0c0:	b10a      	cbz	r2, 2f0c6 <gps_thread+0x2ce>
				n_unhealthy++;
   2f0c2:	3501      	adds	r5, #1
   2f0c4:	b2ed      	uxtb	r5, r5
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   2f0c6:	f02b 003f 	bic.w	r0, fp, #63	; 0x3f
   2f0ca:	f040 0004 	orr.w	r0, r0, #4
   2f0ce:	f360 0b07 	bfi	fp, r0, #0, #8
   2f0d2:	4b59      	ldr	r3, [pc, #356]	; (2f238 <gps_thread+0x440>)
   2f0d4:	4859      	ldr	r0, [pc, #356]	; (2f23c <gps_thread+0x444>)
   2f0d6:	f369 1b8f 	bfi	fp, r9, #6, #10
   2f0da:	2900      	cmp	r1, #0
   2f0dc:	bf08      	it	eq
   2f0de:	4618      	moveq	r0, r3
   2f0e0:	4b57      	ldr	r3, [pc, #348]	; (2f240 <gps_thread+0x448>)
   2f0e2:	4601      	mov	r1, r0
   2f0e4:	4857      	ldr	r0, [pc, #348]	; (2f244 <gps_thread+0x44c>)
   2f0e6:	2a00      	cmp	r2, #0
   2f0e8:	bf08      	it	eq
   2f0ea:	4603      	moveq	r3, r0
   2f0ec:	4a56      	ldr	r2, [pc, #344]	; (2f248 <gps_thread+0x450>)
   2f0ee:	e9cd 1300 	strd	r1, r3, [sp]
   2f0f2:	4658      	mov	r0, fp
   2f0f4:	4663      	mov	r3, ip
   2f0f6:	4955      	ldr	r1, [pc, #340]	; (2f24c <gps_thread+0x454>)
   2f0f8:	f00e ff33 	bl	3df62 <log_string_sync>
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
   2f0fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2f0fe:	370c      	adds	r7, #12
   2f100:	3301      	adds	r3, #1
   2f102:	2b0c      	cmp	r3, #12
   2f104:	930b      	str	r3, [sp, #44]	; 0x2c
   2f106:	d1c9      	bne.n	2f09c <gps_thread+0x2a4>
	LOG_DBG("Tracking: %d Using: %d Unhealthy: %d", n_tracked,
   2f108:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   2f10c:	f043 0304 	orr.w	r3, r3, #4
   2f110:	f363 0807 	bfi	r8, r3, #0, #8
   2f114:	f369 188f 	bfi	r8, r9, #6, #10
   2f118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2f11a:	e9cd 6500 	strd	r6, r5, [sp]
   2f11e:	4a4a      	ldr	r2, [pc, #296]	; (2f248 <gps_thread+0x450>)
   2f120:	494b      	ldr	r1, [pc, #300]	; (2f250 <gps_thread+0x458>)
   2f122:	4640      	mov	r0, r8
   2f124:	f00e ff1d 	bl	3df62 <log_string_sync>
	LOG_DBG("Seconds since last fix %lld",
   2f128:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2f12c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   2f130:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2f134:	f043 0304 	orr.w	r3, r3, #4
   2f138:	f363 0207 	bfi	r2, r3, #0, #8
   2f13c:	b293      	uxth	r3, r2
   2f13e:	f369 138f 	bfi	r3, r9, #6, #10
   2f142:	f8ad 3008 	strh.w	r3, [sp, #8]
   2f146:	f011 f9e3 	bl	40510 <z_impl_k_uptime_get>
   2f14a:	4b42      	ldr	r3, [pc, #264]	; (2f254 <gps_thread+0x45c>)
   2f14c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2f150:	e9d3 5600 	ldrd	r5, r6, [r3]
   2f154:	1b40      	subs	r0, r0, r5
   2f156:	f04f 0300 	mov.w	r3, #0
   2f15a:	eb61 0106 	sbc.w	r1, r1, r6
   2f15e:	f7ed fe0d 	bl	1cd7c <__aeabi_uldivmod>
   2f162:	4a39      	ldr	r2, [pc, #228]	; (2f248 <gps_thread+0x450>)
   2f164:	e9cd 0100 	strd	r0, r1, [sp]
   2f168:	493b      	ldr	r1, [pc, #236]	; (2f258 <gps_thread+0x460>)
   2f16a:	f8bd 0008 	ldrh.w	r0, [sp, #8]
   2f16e:	f00e fef8 	bl	3df62 <log_string_sync>
   2f172:	2500      	movs	r5, #0
   2f174:	e65e      	b.n	2ee34 <gps_thread+0x3c>
			if (operation_blocked) {
   2f176:	2d00      	cmp	r5, #0
   2f178:	f47f ae5c 	bne.w	2ee34 <gps_thread+0x3c>
			memcpy(evt.nmea.buf, raw_gps_data.nmea, len);
   2f17c:	4632      	mov	r2, r6
   2f17e:	23b8      	movs	r3, #184	; 0xb8
   2f180:	a96e      	add	r1, sp, #440	; 0x1b8
   2f182:	a83e      	add	r0, sp, #248	; 0xf8
			evt.nmea.len = len - 1;
   2f184:	3e01      	subs	r6, #1
			memcpy(evt.nmea.buf, raw_gps_data.nmea, len);
   2f186:	f011 fa56 	bl	40636 <__memcpy_chk>
			evt.nmea.len = len - 1;
   2f18a:	f88d 614b 	strb.w	r6, [sp, #331]	; 0x14b
			if (has_fix) {
   2f18e:	b1dc      	cbz	r4, 2f1c8 <gps_thread+0x3d0>
				LOG_DBG("NMEA: Position fix");
   2f190:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2f194:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   2f198:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2f19c:	f043 0304 	orr.w	r3, r3, #4
   2f1a0:	f363 0207 	bfi	r2, r3, #0, #8
   2f1a4:	b293      	uxth	r3, r2
   2f1a6:	f369 138f 	bfi	r3, r9, #6, #10
   2f1aa:	b298      	uxth	r0, r3
   2f1ac:	4a2b      	ldr	r2, [pc, #172]	; (2f25c <gps_thread+0x464>)
   2f1ae:	492c      	ldr	r1, [pc, #176]	; (2f260 <gps_thread+0x468>)
   2f1b0:	f8ad 301c 	strh.w	r3, [sp, #28]
   2f1b4:	f00e fed5 	bl	3df62 <log_string_sync>
				evt.type = GPS_EVT_NMEA_FIX;
   2f1b8:	2306      	movs	r3, #6
			notify_event(dev, &evt);
   2f1ba:	a93c      	add	r1, sp, #240	; 0xf0
   2f1bc:	4650      	mov	r0, sl
				evt.type = GPS_EVT_NMEA;
   2f1be:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
			notify_event(dev, &evt);
   2f1c2:	f011 f83c 	bl	4023e <notify_event>
			break;
   2f1c6:	e7d4      	b.n	2f172 <gps_thread+0x37a>
				evt.type = GPS_EVT_NMEA;
   2f1c8:	2305      	movs	r3, #5
   2f1ca:	e7f6      	b.n	2f1ba <gps_thread+0x3c2>
			LOG_DBG("A-GPS data update needed");
   2f1cc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2f1d0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2f1d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2f1d8:	f043 0304 	orr.w	r3, r3, #4
   2f1dc:	f363 0207 	bfi	r2, r3, #0, #8
   2f1e0:	b293      	uxth	r3, r2
   2f1e2:	f369 138f 	bfi	r3, r9, #6, #10
   2f1e6:	4a1d      	ldr	r2, [pc, #116]	; (2f25c <gps_thread+0x464>)
   2f1e8:	491e      	ldr	r1, [pc, #120]	; (2f264 <gps_thread+0x46c>)
   2f1ea:	b298      	uxth	r0, r3
   2f1ec:	f8ad 3020 	strh.w	r3, [sp, #32]
   2f1f0:	f00e feb7 	bl	3df62 <log_string_sync>
			evt.type = GPS_EVT_AGPS_DATA_NEEDED;
   2f1f4:	2309      	movs	r3, #9
   2f1f6:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
			evt.agps_request.sv_mask_ephe =
   2f1fa:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
				raw_gps_data.agps.data_flags &
   2f1fc:	9a70      	ldr	r2, [sp, #448]	; 0x1c0
			evt.agps_request.sv_mask_ephe =
   2f1fe:	933e      	str	r3, [sp, #248]	; 0xf8
			evt.agps_request.sv_mask_alm =
   2f200:	9b6f      	ldr	r3, [sp, #444]	; 0x1bc
				BIT(NRF_GNSS_AGPS_KLOBUCHAR_REQUEST) ? 1 : 0;
   2f202:	0851      	lsrs	r1, r2, #1
			evt.agps_request.sv_mask_alm =
   2f204:	933f      	str	r3, [sp, #252]	; 0xfc
			evt.agps_request.utc =
   2f206:	f89d 3100 	ldrb.w	r3, [sp, #256]	; 0x100
   2f20a:	f362 0300 	bfi	r3, r2, #0, #1
			evt.agps_request.klobuchar =
   2f20e:	f361 0341 	bfi	r3, r1, #1, #1
				BIT(NRF_GNSS_AGPS_NEQUICK_REQUEST) ? 1 : 0;
   2f212:	0891      	lsrs	r1, r2, #2
			evt.agps_request.nequick =
   2f214:	f361 0382 	bfi	r3, r1, #2, #1
				1 : 0;
   2f218:	08d1      	lsrs	r1, r2, #3
			evt.agps_request.system_time_tow =
   2f21a:	f361 03c3 	bfi	r3, r1, #3, #1
				BIT(NRF_GNSS_AGPS_POSITION_REQUEST) ? 1 : 0;
   2f21e:	0911      	lsrs	r1, r2, #4
			evt.agps_request.position =
   2f220:	f361 1304 	bfi	r3, r1, #4, #1
				BIT(NRF_GNSS_AGPS_INTEGRITY_REQUEST) ? 1 : 0;
   2f224:	0952      	lsrs	r2, r2, #5
			evt.agps_request.integrity =
   2f226:	f362 1345 	bfi	r3, r2, #5, #1
   2f22a:	f88d 3100 	strb.w	r3, [sp, #256]	; 0x100
			notify_event(dev, &evt);
   2f22e:	a93c      	add	r1, sp, #240	; 0xf0
   2f230:	e5fd      	b.n	2ee2e <gps_thread+0x36>
			has_fix = false;
   2f232:	2400      	movs	r4, #0
   2f234:	e5fe      	b.n	2ee34 <gps_thread+0x3c>
   2f236:	bf00      	nop
   2f238:	000483d3 	.word	0x000483d3
   2f23c:	000483ca 	.word	0x000483ca
   2f240:	000483dc 	.word	0x000483dc
   2f244:	000483e8 	.word	0x000483e8
   2f248:	00048324 	.word	0x00048324
   2f24c:	0004846e 	.word	0x0004846e
   2f250:	0004848a 	.word	0x0004848a
   2f254:	20022c98 	.word	0x20022c98
   2f258:	000484b3 	.word	0x000484b3
   2f25c:	0004833a 	.word	0x0004833a
   2f260:	000484d3 	.word	0x000484d3
   2f264:	000484ea 	.word	0x000484ea

0002f268 <stop>:
{
   2f268:	b538      	push	{r3, r4, r5, lr}
	struct gps_drv_data *drv_data = dev->driver_data;
   2f26a:	6884      	ldr	r4, [r0, #8]
{
   2f26c:	4605      	mov	r5, r0
	k_delayed_work_cancel(&drv_data->timeout_work);
   2f26e:	f604 1034 	addw	r0, r4, #2356	; 0x934
   2f272:	f00b fb2b 	bl	3a8cc <k_delayed_work_cancel>
	k_delayed_work_cancel(&drv_data->start_work);
   2f276:	f604 00f4 	addw	r0, r4, #2292	; 0x8f4
   2f27a:	f00b fb27 	bl	3a8cc <k_delayed_work_cancel>
   2f27e:	f104 031c 	add.w	r3, r4, #28
   2f282:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&drv_data->is_active) == 0) {
   2f286:	b93b      	cbnz	r3, 2f298 <stop+0x30>
   2f288:	2200      	movs	r2, #0
   2f28a:	f604 1114 	addw	r1, r4, #2324	; 0x914
   2f28e:	4806      	ldr	r0, [pc, #24]	; (2f2a8 <stop+0x40>)
   2f290:	f00b fa90 	bl	3a7b4 <k_delayed_work_submit_to_queue>
	return 0;
   2f294:	2000      	movs	r0, #0
}
   2f296:	bd38      	pop	{r3, r4, r5, pc}
	err = stop_gps(dev, false);
   2f298:	2100      	movs	r1, #0
   2f29a:	68a8      	ldr	r0, [r5, #8]
   2f29c:	f7ff fd6c 	bl	2ed78 <stop_gps.isra.4>
	if (err) {
   2f2a0:	2800      	cmp	r0, #0
   2f2a2:	d0f1      	beq.n	2f288 <stop+0x20>
   2f2a4:	e7f7      	b.n	2f296 <stop+0x2e>
   2f2a6:	bf00      	nop
   2f2a8:	200292b4 	.word	0x200292b4

0002f2ac <timeout_work_fn>:
{
   2f2ac:	b570      	push	{r4, r5, r6, lr}
   2f2ae:	b0b0      	sub	sp, #192	; 0xc0
	struct device *dev = drv_data->dev;
   2f2b0:	f6a0 1434 	subw	r4, r0, #2356	; 0x934
	struct gps_event evt = {
   2f2b4:	22c0      	movs	r2, #192	; 0xc0
   2f2b6:	2100      	movs	r1, #0
{
   2f2b8:	4606      	mov	r6, r0
	struct gps_event evt = {
   2f2ba:	4668      	mov	r0, sp
	struct device *dev = drv_data->dev;
   2f2bc:	6825      	ldr	r5, [r4, #0]
	struct gps_event evt = {
   2f2be:	f011 f9cd 	bl	4065c <memset>
   2f2c2:	2302      	movs	r3, #2
	stop_gps(dev, true);
   2f2c4:	2101      	movs	r1, #1
   2f2c6:	68a8      	ldr	r0, [r5, #8]
	struct gps_event evt = {
   2f2c8:	f88d 3000 	strb.w	r3, [sp]
	stop_gps(dev, true);
   2f2cc:	f7ff fd54 	bl	2ed78 <stop_gps.isra.4>
	if (drv_data->current_cfg.nav_mode == GPS_NAV_MODE_PERIODIC) {
   2f2d0:	7a23      	ldrb	r3, [r4, #8]
   2f2d2:	2b02      	cmp	r3, #2
   2f2d4:	d10a      	bne.n	2f2ec <timeout_work_fn+0x40>
		u32_t start_delay = drv_data->current_cfg.interval -
   2f2d6:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   2f2da:	1a9b      	subs	r3, r3, r2
   2f2dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2f2e0:	f1a6 0140 	sub.w	r1, r6, #64	; 0x40
   2f2e4:	435a      	muls	r2, r3
   2f2e6:	4804      	ldr	r0, [pc, #16]	; (2f2f8 <timeout_work_fn+0x4c>)
   2f2e8:	f00b fa64 	bl	3a7b4 <k_delayed_work_submit_to_queue>
	notify_event(dev, &evt);
   2f2ec:	4669      	mov	r1, sp
   2f2ee:	4628      	mov	r0, r5
   2f2f0:	f010 ffa5 	bl	4023e <notify_event>
}
   2f2f4:	b030      	add	sp, #192	; 0xc0
   2f2f6:	bd70      	pop	{r4, r5, r6, pc}
   2f2f8:	200292b4 	.word	0x200292b4

0002f2fc <start>:
	struct nrf9160_gps_config gps_cfg = { 0 };
   2f2fc:	2210      	movs	r2, #16
{
   2f2fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct gps_drv_data *drv_data = dev->driver_data;
   2f302:	6887      	ldr	r7, [r0, #8]
{
   2f304:	b089      	sub	sp, #36	; 0x24
   2f306:	460d      	mov	r5, r1
	struct nrf9160_gps_config gps_cfg = { 0 };
   2f308:	eb0d 0002 	add.w	r0, sp, r2
   2f30c:	2100      	movs	r1, #0
   2f30e:	f011 f9a5 	bl	4065c <memset>
	if (atomic_get(&drv_data->is_active)) {
   2f312:	f107 081c 	add.w	r8, r7, #28
   2f316:	e8d8 3faf 	lda	r3, [r8]
   2f31a:	4cbe      	ldr	r4, [pc, #760]	; (2f614 <start+0x318>)
   2f31c:	4abe      	ldr	r2, [pc, #760]	; (2f618 <start+0x31c>)
   2f31e:	1aa4      	subs	r4, r4, r2
   2f320:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2f324:	b17b      	cbz	r3, 2f346 <start+0x4a>
		LOG_WRN("GPS is already active");
   2f326:	2302      	movs	r3, #2
   2f328:	f04f 0000 	mov.w	r0, #0
   2f32c:	f363 0007 	bfi	r0, r3, #0, #8
   2f330:	f364 108f 	bfi	r0, r4, #6, #10
   2f334:	49b9      	ldr	r1, [pc, #740]	; (2f61c <start+0x320>)
   2f336:	f00e fe14 	bl	3df62 <log_string_sync>
		return -EALREADY;
   2f33a:	f06f 0677 	mvn.w	r6, #119	; 0x77
}
   2f33e:	4630      	mov	r0, r6
   2f340:	b009      	add	sp, #36	; 0x24
   2f342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (cfg_src->nav_mode) {
   2f346:	782a      	ldrb	r2, [r5, #0]
   2f348:	2a01      	cmp	r2, #1
   2f34a:	d022      	beq.n	2f392 <start+0x96>
   2f34c:	b253      	sxtb	r3, r2
   2f34e:	b163      	cbz	r3, 2f36a <start+0x6e>
   2f350:	2a02      	cmp	r2, #2
   2f352:	d022      	beq.n	2f39a <start+0x9e>
		LOG_ERR("Invalid operation mode (%d), GPS will not start",
   2f354:	2301      	movs	r3, #1
   2f356:	f04f 0000 	mov.w	r0, #0
   2f35a:	f363 0007 	bfi	r0, r3, #0, #8
   2f35e:	f364 108f 	bfi	r0, r4, #6, #10
   2f362:	49af      	ldr	r1, [pc, #700]	; (2f620 <start+0x324>)
   2f364:	f00e fdfd 	bl	3df62 <log_string_sync>
	if (err) {
   2f368:	e024      	b.n	2f3b4 <start+0xb8>
		cfg_dst->interval = 0;
   2f36a:	f8ad 3012 	strh.w	r3, [sp, #18]
		cfg_dst->retry = cfg_src->timeout < 0 ? 0 : cfg_src->timeout;
   2f36e:	68ab      	ldr	r3, [r5, #8]
   2f370:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2f374:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (cfg_src->delete_agps_data) {
   2f378:	7b2b      	ldrb	r3, [r5, #12]
   2f37a:	b10b      	cbz	r3, 2f380 <start+0x84>
		cfg_dst->delete_mask = 0xFF;
   2f37c:	23ff      	movs	r3, #255	; 0xff
   2f37e:	9306      	str	r3, [sp, #24]
	*nmea_mask |= NRF_GNSS_NMEA_GGA_MASK;
   2f380:	2301      	movs	r3, #1
   2f382:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (cfg_src->power_mode == GPS_POWER_MODE_PERFORMANCE) {
   2f386:	786b      	ldrb	r3, [r5, #1]
   2f388:	2b01      	cmp	r3, #1
   2f38a:	d131      	bne.n	2f3f0 <start+0xf4>
		cfg_dst->power_mode = NRF_GNSS_PSM_DUTY_CYCLING_POWER;
   2f38c:	f88d 301c 	strb.w	r3, [sp, #28]
	if (err) {
   2f390:	e030      	b.n	2f3f4 <start+0xf8>
		cfg_dst->retry = 0;
   2f392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2f396:	9304      	str	r3, [sp, #16]
		break;
   2f398:	e7ee      	b.n	2f378 <start+0x7c>
		if (cfg_src->interval < 10) {
   2f39a:	686b      	ldr	r3, [r5, #4]
   2f39c:	2b09      	cmp	r3, #9
   2f39e:	d816      	bhi.n	2f3ce <start+0xd2>
			LOG_ERR("Minimum periodic interval is 10 sec");
   2f3a0:	f04f 0000 	mov.w	r0, #0
   2f3a4:	2301      	movs	r3, #1
   2f3a6:	499f      	ldr	r1, [pc, #636]	; (2f624 <start+0x328>)
   2f3a8:	f363 0007 	bfi	r0, r3, #0, #8
   2f3ac:	f364 108f 	bfi	r0, r4, #6, #10
			LOG_ERR("Interval must be longer than timeout");
   2f3b0:	f00e fdd7 	bl	3df62 <log_string_sync>
		LOG_ERR("Invalid GPS configuration");
   2f3b4:	2301      	movs	r3, #1
   2f3b6:	f04f 0000 	mov.w	r0, #0
   2f3ba:	f363 0007 	bfi	r0, r3, #0, #8
   2f3be:	f364 108f 	bfi	r0, r4, #6, #10
   2f3c2:	4999      	ldr	r1, [pc, #612]	; (2f628 <start+0x32c>)
   2f3c4:	f00e fdcd 	bl	3df62 <log_string_sync>
		return err;
   2f3c8:	f06f 0615 	mvn.w	r6, #21
   2f3cc:	e7b7      	b.n	2f33e <start+0x42>
		if (cfg_src->timeout >= cfg_src->interval) {
   2f3ce:	68aa      	ldr	r2, [r5, #8]
   2f3d0:	4293      	cmp	r3, r2
   2f3d2:	d808      	bhi.n	2f3e6 <start+0xea>
			LOG_ERR("Interval must be longer than timeout");
   2f3d4:	f04f 0000 	mov.w	r0, #0
   2f3d8:	2301      	movs	r3, #1
   2f3da:	f363 0007 	bfi	r0, r3, #0, #8
   2f3de:	f364 108f 	bfi	r0, r4, #6, #10
   2f3e2:	4992      	ldr	r1, [pc, #584]	; (2f62c <start+0x330>)
   2f3e4:	e7e4      	b.n	2f3b0 <start+0xb4>
		cfg_dst->retry = cfg_src->timeout;
   2f3e6:	f8ad 2010 	strh.w	r2, [sp, #16]
		cfg_dst->interval = cfg_src->interval;
   2f3ea:	f8ad 3012 	strh.w	r3, [sp, #18]
		break;
   2f3ee:	e7c3      	b.n	2f378 <start+0x7c>
	} else if (cfg_src->power_mode == GPS_POWER_MODE_SAVE) {
   2f3f0:	2b02      	cmp	r3, #2
   2f3f2:	d0cb      	beq.n	2f38c <start+0x90>
	if (cfg != &drv_data->current_cfg) {
   2f3f4:	f107 0308 	add.w	r3, r7, #8
   2f3f8:	42ab      	cmp	r3, r5
   2f3fa:	d008      	beq.n	2f40e <start+0x112>
   2f3fc:	462a      	mov	r2, r5
   2f3fe:	f105 0110 	add.w	r1, r5, #16
   2f402:	f852 0b04 	ldr.w	r0, [r2], #4
   2f406:	428a      	cmp	r2, r1
   2f408:	f843 0b04 	str.w	r0, [r3], #4
   2f40c:	d1f9      	bne.n	2f402 <start+0x106>
	err = lte_lc_system_mode_get(&system_mode);
   2f40e:	f10d 000e 	add.w	r0, sp, #14
   2f412:	f7f9 fdcb 	bl	28fac <lte_lc_system_mode_get>
	if (err) {
   2f416:	4602      	mov	r2, r0
   2f418:	b1a0      	cbz	r0, 2f444 <start+0x148>
		LOG_ERR("Could not get modem system mode, error: %d", err);
   2f41a:	2101      	movs	r1, #1
   2f41c:	f04f 0000 	mov.w	r0, #0
   2f420:	f361 0007 	bfi	r0, r1, #0, #8
   2f424:	4982      	ldr	r1, [pc, #520]	; (2f630 <start+0x334>)
   2f426:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_ERR("Could not get modem's functional mode, error: %d",
   2f42a:	f00e fd9a 	bl	3df62 <log_string_sync>
		LOG_ERR("Failed to enable GPS");
   2f42e:	f04f 0000 	mov.w	r0, #0
   2f432:	2301      	movs	r3, #1
   2f434:	497f      	ldr	r1, [pc, #508]	; (2f634 <start+0x338>)
   2f436:	f363 0007 	bfi	r0, r3, #0, #8
   2f43a:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_ERR("Failed to start GPS");
   2f43e:	f00e fd90 	bl	3df62 <log_string_sync>
   2f442:	e065      	b.n	2f510 <start+0x214>
	    (system_mode != LTE_LC_SYSTEM_MODE_LTEM_GPS) &&
   2f444:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if ((system_mode != LTE_LC_SYSTEM_MODE_GPS) &&
   2f448:	1eda      	subs	r2, r3, #3
   2f44a:	2a02      	cmp	r2, #2
   2f44c:	d920      	bls.n	2f490 <start+0x194>
		if (system_mode == LTE_LC_SYSTEM_MODE_LTEM) {
   2f44e:	2b01      	cmp	r3, #1
   2f450:	d01c      	beq.n	2f48c <start+0x190>
			new_mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   2f452:	2b02      	cmp	r3, #2
   2f454:	bf14      	ite	ne
   2f456:	2603      	movne	r6, #3
   2f458:	2605      	moveq	r6, #5
		LOG_DBG("GPS mode is not enabled, attempting to enable it");
   2f45a:	2304      	movs	r3, #4
   2f45c:	f04f 0000 	mov.w	r0, #0
   2f460:	f363 0007 	bfi	r0, r3, #0, #8
   2f464:	4a74      	ldr	r2, [pc, #464]	; (2f638 <start+0x33c>)
   2f466:	f364 108f 	bfi	r0, r4, #6, #10
   2f46a:	4974      	ldr	r1, [pc, #464]	; (2f63c <start+0x340>)
   2f46c:	f00e fd79 	bl	3df62 <log_string_sync>
		err = lte_lc_system_mode_set(new_mode);
   2f470:	4630      	mov	r0, r6
   2f472:	f7f9 fd21 	bl	28eb8 <lte_lc_system_mode_set>
		if (err) {
   2f476:	4602      	mov	r2, r0
   2f478:	b150      	cbz	r0, 2f490 <start+0x194>
			LOG_ERR("Could not enable GPS mode, error: %d", err);
   2f47a:	2101      	movs	r1, #1
   2f47c:	f04f 0000 	mov.w	r0, #0
   2f480:	f361 0007 	bfi	r0, r1, #0, #8
   2f484:	f364 108f 	bfi	r0, r4, #6, #10
   2f488:	496d      	ldr	r1, [pc, #436]	; (2f640 <start+0x344>)
   2f48a:	e7ce      	b.n	2f42a <start+0x12e>
			new_mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   2f48c:	2604      	movs	r6, #4
   2f48e:	e7e4      	b.n	2f45a <start+0x15e>
	LOG_DBG("GPS mode is enabled");
   2f490:	2304      	movs	r3, #4
   2f492:	f04f 0000 	mov.w	r0, #0
   2f496:	f363 0007 	bfi	r0, r3, #0, #8
   2f49a:	4a67      	ldr	r2, [pc, #412]	; (2f638 <start+0x33c>)
   2f49c:	f364 108f 	bfi	r0, r4, #6, #10
   2f4a0:	4968      	ldr	r1, [pc, #416]	; (2f644 <start+0x348>)
   2f4a2:	f00e fd5e 	bl	3df62 <log_string_sync>
	err = lte_lc_func_mode_get(&functional_mode);
   2f4a6:	f10d 000f 	add.w	r0, sp, #15
   2f4aa:	f7f9 fe71 	bl	29190 <lte_lc_func_mode_get>
	if (err) {
   2f4ae:	4602      	mov	r2, r0
   2f4b0:	b140      	cbz	r0, 2f4c4 <start+0x1c8>
		LOG_ERR("Could not get modem's functional mode, error: %d",
   2f4b2:	2101      	movs	r1, #1
   2f4b4:	f04f 0000 	mov.w	r0, #0
   2f4b8:	f361 0007 	bfi	r0, r1, #0, #8
   2f4bc:	f364 108f 	bfi	r0, r4, #6, #10
   2f4c0:	4961      	ldr	r1, [pc, #388]	; (2f648 <start+0x34c>)
   2f4c2:	e7b2      	b.n	2f42a <start+0x12e>
	if (functional_mode != LTE_LC_FUNC_MODE_NORMAL) {
   2f4c4:	f89d 900f 	ldrb.w	r9, [sp, #15]
   2f4c8:	f1b9 0f01 	cmp.w	r9, #1
   2f4cc:	d00a      	beq.n	2f4e4 <start+0x1e8>
		LOG_ERR("GPS is not supported in current functional mode");
   2f4ce:	2301      	movs	r3, #1
   2f4d0:	f04f 0000 	mov.w	r0, #0
   2f4d4:	f363 0007 	bfi	r0, r3, #0, #8
   2f4d8:	f364 108f 	bfi	r0, r4, #6, #10
   2f4dc:	495b      	ldr	r1, [pc, #364]	; (2f64c <start+0x350>)
   2f4de:	f00e fd40 	bl	3df62 <log_string_sync>
		return -EIO;
   2f4e2:	e7a4      	b.n	2f42e <start+0x132>
	retval = nrf_setsockopt(drv_data->socket,
   2f4e4:	2602      	movs	r6, #2
   2f4e6:	9600      	str	r6, [sp, #0]
   2f4e8:	ab04      	add	r3, sp, #16
   2f4ea:	4632      	mov	r2, r6
   2f4ec:	f44f 7101 	mov.w	r1, #516	; 0x204
   2f4f0:	6a38      	ldr	r0, [r7, #32]
   2f4f2:	f004 ff23 	bl	3433c <nrf_setsockopt>
	if (retval != 0) {
   2f4f6:	b170      	cbz	r0, 2f516 <start+0x21a>
		LOG_ERR("Failed to set fix retry value: %d", gps_cfg.retry);
   2f4f8:	f04f 0000 	mov.w	r0, #0
   2f4fc:	2301      	movs	r3, #1
   2f4fe:	f363 0007 	bfi	r0, r3, #0, #8
   2f502:	f364 108f 	bfi	r0, r4, #6, #10
   2f506:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   2f50a:	4951      	ldr	r1, [pc, #324]	; (2f650 <start+0x354>)
   2f50c:	f00e fd29 	bl	3df62 <log_string_sync>
		return -EIO;
   2f510:	f06f 0604 	mvn.w	r6, #4
   2f514:	e713      	b.n	2f33e <start+0x42>
	retval = nrf_setsockopt(drv_data->socket,
   2f516:	9600      	str	r6, [sp, #0]
   2f518:	f10d 0312 	add.w	r3, sp, #18
   2f51c:	464a      	mov	r2, r9
   2f51e:	f44f 7101 	mov.w	r1, #516	; 0x204
   2f522:	6a38      	ldr	r0, [r7, #32]
   2f524:	f004 ff0a 	bl	3433c <nrf_setsockopt>
	if (retval != 0) {
   2f528:	b140      	cbz	r0, 2f53c <start+0x240>
		LOG_ERR("Failed to set fix interval value");
   2f52a:	f04f 0000 	mov.w	r0, #0
   2f52e:	2301      	movs	r3, #1
   2f530:	f363 0007 	bfi	r0, r3, #0, #8
   2f534:	f364 108f 	bfi	r0, r4, #6, #10
   2f538:	4946      	ldr	r1, [pc, #280]	; (2f654 <start+0x358>)
   2f53a:	e780      	b.n	2f43e <start+0x142>
	retval = nrf_setsockopt(drv_data->socket,
   2f53c:	9600      	str	r6, [sp, #0]
   2f53e:	ab05      	add	r3, sp, #20
   2f540:	2204      	movs	r2, #4
   2f542:	f44f 7101 	mov.w	r1, #516	; 0x204
   2f546:	6a38      	ldr	r0, [r7, #32]
   2f548:	f004 fef8 	bl	3433c <nrf_setsockopt>
	if (retval != 0) {
   2f54c:	b140      	cbz	r0, 2f560 <start+0x264>
		LOG_ERR("Failed to set nmea mask");
   2f54e:	f04f 0000 	mov.w	r0, #0
   2f552:	2301      	movs	r3, #1
   2f554:	f363 0007 	bfi	r0, r3, #0, #8
   2f558:	f364 108f 	bfi	r0, r4, #6, #10
   2f55c:	493e      	ldr	r1, [pc, #248]	; (2f658 <start+0x35c>)
   2f55e:	e76e      	b.n	2f43e <start+0x142>
	if (gps_cfg.power_mode != NRF_GNSS_PSM_DISABLED) {
   2f560:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2f564:	b193      	cbz	r3, 2f58c <start+0x290>
		retval = nrf_setsockopt(drv_data->socket,
   2f566:	f8cd 9000 	str.w	r9, [sp]
   2f56a:	ab07      	add	r3, sp, #28
   2f56c:	2209      	movs	r2, #9
   2f56e:	f44f 7101 	mov.w	r1, #516	; 0x204
   2f572:	6a38      	ldr	r0, [r7, #32]
   2f574:	f004 fee2 	bl	3433c <nrf_setsockopt>
		if (retval != 0) {
   2f578:	b140      	cbz	r0, 2f58c <start+0x290>
			LOG_ERR("Failed to set GPS power mode");
   2f57a:	f04f 0000 	mov.w	r0, #0
   2f57e:	2301      	movs	r3, #1
   2f580:	f363 0007 	bfi	r0, r3, #0, #8
   2f584:	f364 108f 	bfi	r0, r4, #6, #10
   2f588:	4934      	ldr	r1, [pc, #208]	; (2f65c <start+0x360>)
   2f58a:	e758      	b.n	2f43e <start+0x142>
	retval = nrf_setsockopt(drv_data->socket,
   2f58c:	2304      	movs	r3, #4
   2f58e:	9300      	str	r3, [sp, #0]
   2f590:	2207      	movs	r2, #7
   2f592:	ab06      	add	r3, sp, #24
   2f594:	f44f 7101 	mov.w	r1, #516	; 0x204
   2f598:	6a38      	ldr	r0, [r7, #32]
   2f59a:	f004 fecf 	bl	3433c <nrf_setsockopt>
	if (retval != 0) {
   2f59e:	4606      	mov	r6, r0
   2f5a0:	b140      	cbz	r0, 2f5b4 <start+0x2b8>
		LOG_ERR("Failed to start GPS");
   2f5a2:	f04f 0000 	mov.w	r0, #0
   2f5a6:	2301      	movs	r3, #1
   2f5a8:	f363 0007 	bfi	r0, r3, #0, #8
   2f5ac:	f364 108f 	bfi	r0, r4, #6, #10
   2f5b0:	492b      	ldr	r1, [pc, #172]	; (2f660 <start+0x364>)
   2f5b2:	e744      	b.n	2f43e <start+0x142>
	if (gps_cfg.retry > 0) {
   2f5b4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2f5b8:	b143      	cbz	r3, 2f5cc <start+0x2d0>
   2f5ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
				      K_SECONDS(cfg->timeout));
   2f5be:	68ab      	ldr	r3, [r5, #8]
   2f5c0:	f607 1134 	addw	r1, r7, #2356	; 0x934
   2f5c4:	435a      	muls	r2, r3
   2f5c6:	4827      	ldr	r0, [pc, #156]	; (2f664 <start+0x368>)
   2f5c8:	f00b f8f4 	bl	3a7b4 <k_delayed_work_submit_to_queue>
	if (cfg->nav_mode == GPS_NAV_MODE_PERIODIC) {
   2f5cc:	782b      	ldrb	r3, [r5, #0]
   2f5ce:	2b02      	cmp	r3, #2
   2f5d0:	d108      	bne.n	2f5e4 <start+0x2e8>
   2f5d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
				      K_SECONDS(cfg->interval));
   2f5d6:	686b      	ldr	r3, [r5, #4]
   2f5d8:	f607 01f4 	addw	r1, r7, #2292	; 0x8f4
   2f5dc:	435a      	muls	r2, r3
   2f5de:	4821      	ldr	r0, [pc, #132]	; (2f664 <start+0x368>)
   2f5e0:	f00b f8e8 	bl	3a7b4 <k_delayed_work_submit_to_queue>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2f5e4:	2301      	movs	r3, #1
   2f5e6:	e8d8 2fef 	ldaex	r2, [r8]
   2f5ea:	e8c8 3fe1 	stlex	r1, r3, [r8]
   2f5ee:	2900      	cmp	r1, #0
   2f5f0:	d1f9      	bne.n	2f5e6 <start+0x2ea>
	z_impl_k_sem_give(sem);
   2f5f2:	f607 00dc 	addw	r0, r7, #2268	; 0x8dc
   2f5f6:	f00a fdd9 	bl	3a1ac <z_impl_k_sem_give>
	LOG_DBG("GPS operational");
   2f5fa:	2304      	movs	r3, #4
   2f5fc:	f04f 0000 	mov.w	r0, #0
   2f600:	f363 0007 	bfi	r0, r3, #0, #8
   2f604:	f364 108f 	bfi	r0, r4, #6, #10
   2f608:	4a17      	ldr	r2, [pc, #92]	; (2f668 <start+0x36c>)
   2f60a:	4918      	ldr	r1, [pc, #96]	; (2f66c <start+0x370>)
   2f60c:	f00e fca9 	bl	3df62 <log_string_sync>
	return retval;
   2f610:	e695      	b.n	2f33e <start+0x42>
   2f612:	bf00      	nop
   2f614:	00041cfc 	.word	0x00041cfc
   2f618:	00041c2c 	.word	0x00041c2c
   2f61c:	0004862a 	.word	0x0004862a
   2f620:	00048689 	.word	0x00048689
   2f624:	00048640 	.word	0x00048640
   2f628:	000486b9 	.word	0x000486b9
   2f62c:	00048664 	.word	0x00048664
   2f630:	000486d3 	.word	0x000486d3
   2f634:	000487d1 	.word	0x000487d1
   2f638:	00048345 	.word	0x00048345
   2f63c:	000486fe 	.word	0x000486fe
   2f640:	00048733 	.word	0x00048733
   2f644:	00048758 	.word	0x00048758
   2f648:	00048770 	.word	0x00048770
   2f64c:	000487a1 	.word	0x000487a1
   2f650:	000487e6 	.word	0x000487e6
   2f654:	00048808 	.word	0x00048808
   2f658:	00048829 	.word	0x00048829
   2f65c:	00048841 	.word	0x00048841
   2f660:	0004885e 	.word	0x0004885e
   2f664:	200292b4 	.word	0x200292b4
   2f668:	00048350 	.word	0x00048350
   2f66c:	00048872 	.word	0x00048872

0002f670 <rpc_logobj_client_evt_handler>:
   2f670:	b120      	cbz	r0, 2f67c <rpc_logobj_client_evt_handler+0xc>
   2f672:	f850 1b08 	ldr.w	r1, [r0], #8
   2f676:	0c09      	lsrs	r1, r1, #16
   2f678:	f000 b852 	b.w	2f720 <logobj_event_handler>
   2f67c:	4770      	bx	lr
   2f67e:	bf00      	nop

0002f680 <rpc_logobj_client_init>:
   2f680:	4801      	ldr	r0, [pc, #4]	; (2f688 <rpc_logobj_client_init+0x8>)
   2f682:	f006 bd21 	b.w	360c8 <rpc_client_register>
   2f686:	bf00      	nop
   2f688:	00042674 	.word	0x00042674

0002f68c <rpc_logobj_client_request_alloc>:
   2f68c:	2300      	movs	r3, #0
   2f68e:	b510      	push	{r4, lr}
   2f690:	b082      	sub	sp, #8
   2f692:	9301      	str	r3, [sp, #4]
   2f694:	b961      	cbnz	r1, 2f6b0 <rpc_logobj_client_request_alloc+0x24>
   2f696:	b170      	cbz	r0, 2f6b6 <rpc_logobj_client_request_alloc+0x2a>
   2f698:	4604      	mov	r4, r0
   2f69a:	aa01      	add	r2, sp, #4
   2f69c:	2009      	movs	r0, #9
   2f69e:	f006 ff4b 	bl	36538 <rpc_message_alloc>
   2f6a2:	b918      	cbnz	r0, 2f6ac <rpc_logobj_client_request_alloc+0x20>
   2f6a4:	9b01      	ldr	r3, [sp, #4]
   2f6a6:	b10b      	cbz	r3, 2f6ac <rpc_logobj_client_request_alloc+0x20>
   2f6a8:	3308      	adds	r3, #8
   2f6aa:	6023      	str	r3, [r4, #0]
   2f6ac:	b002      	add	sp, #8
   2f6ae:	bd10      	pop	{r4, pc}
   2f6b0:	200f      	movs	r0, #15
   2f6b2:	b002      	add	sp, #8
   2f6b4:	bd10      	pop	{r4, pc}
   2f6b6:	200e      	movs	r0, #14
   2f6b8:	b002      	add	sp, #8
   2f6ba:	bd10      	pop	{r4, pc}

0002f6bc <rpc_logobj_client_request_send>:
   2f6bc:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   2f6c0:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   2f6c4:	d10b      	bne.n	2f6de <rpc_logobj_client_request_send+0x22>
   2f6c6:	b160      	cbz	r0, 2f6e2 <rpc_logobj_client_request_send+0x26>
   2f6c8:	4603      	mov	r3, r0
   2f6ca:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2f6ce:	2009      	movs	r0, #9
   2f6d0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   2f6d4:	f843 1d08 	str.w	r1, [r3, #-8]!
   2f6d8:	4619      	mov	r1, r3
   2f6da:	f006 bf15 	b.w	36508 <rpc_message_send>
   2f6de:	200f      	movs	r0, #15
   2f6e0:	4770      	bx	lr
   2f6e2:	200e      	movs	r0, #14
   2f6e4:	4770      	bx	lr
   2f6e6:	bf00      	nop

0002f6e8 <rpc_logobj_client_message_free>:
   2f6e8:	b120      	cbz	r0, 2f6f4 <rpc_logobj_client_message_free+0xc>
   2f6ea:	f1a0 0108 	sub.w	r1, r0, #8
   2f6ee:	2009      	movs	r0, #9
   2f6f0:	f006 bf54 	b.w	3659c <rpc_message_free>
   2f6f4:	200e      	movs	r0, #14
   2f6f6:	4770      	bx	lr

0002f6f8 <rpc_logobj_client_data_free>:
   2f6f8:	b118      	cbz	r0, 2f702 <rpc_logobj_client_data_free+0xa>
   2f6fa:	4601      	mov	r1, r0
   2f6fc:	2009      	movs	r0, #9
   2f6fe:	f007 b85f 	b.w	367c0 <rpc_message_data_free>
   2f702:	200e      	movs	r0, #14
   2f704:	4770      	bx	lr
   2f706:	bf00      	nop

0002f708 <packet_free_cb>:
   2f708:	b510      	push	{r4, lr}
   2f70a:	4604      	mov	r4, r0
   2f70c:	6800      	ldr	r0, [r0, #0]
   2f70e:	f7ff fff3 	bl	2f6f8 <rpc_logobj_client_data_free>
   2f712:	68a0      	ldr	r0, [r4, #8]
   2f714:	b118      	cbz	r0, 2f71e <packet_free_cb+0x16>
   2f716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2f71a:	f001 b935 	b.w	30988 <nrf_free>
   2f71e:	bd10      	pop	{r4, pc}

0002f720 <logobj_event_handler>:
   2f720:	b530      	push	{r4, r5, lr}
   2f722:	4b3b      	ldr	r3, [pc, #236]	; (2f810 <logobj_event_handler+0xf0>)
   2f724:	b085      	sub	sp, #20
   2f726:	681d      	ldr	r5, [r3, #0]
   2f728:	2d00      	cmp	r5, #0
   2f72a:	d04c      	beq.n	2f7c6 <logobj_event_handler+0xa6>
   2f72c:	f248 0302 	movw	r3, #32770	; 0x8002
   2f730:	4299      	cmp	r1, r3
   2f732:	d053      	beq.n	2f7dc <logobj_event_handler+0xbc>
   2f734:	d91c      	bls.n	2f770 <logobj_event_handler+0x50>
   2f736:	f248 0303 	movw	r3, #32771	; 0x8003
   2f73a:	4299      	cmp	r1, r3
   2f73c:	d05a      	beq.n	2f7f4 <logobj_event_handler+0xd4>
   2f73e:	f249 0301 	movw	r3, #36865	; 0x9001
   2f742:	4299      	cmp	r1, r3
   2f744:	d147      	bne.n	2f7d6 <logobj_event_handler+0xb6>
   2f746:	2400      	movs	r4, #0
   2f748:	6843      	ldr	r3, [r0, #4]
   2f74a:	6802      	ldr	r2, [r0, #0]
   2f74c:	e9cd 4402 	strd	r4, r4, [sp, #8]
   2f750:	e9cd 2300 	strd	r2, r3, [sp]
   2f754:	69e8      	ldr	r0, [r5, #28]
   2f756:	4669      	mov	r1, sp
   2f758:	6803      	ldr	r3, [r0, #0]
   2f75a:	685b      	ldr	r3, [r3, #4]
   2f75c:	4798      	blx	r3
   2f75e:	3001      	adds	r0, #1
   2f760:	d04e      	beq.n	2f800 <logobj_event_handler+0xe0>
   2f762:	4620      	mov	r0, r4
   2f764:	682b      	ldr	r3, [r5, #0]
   2f766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2f76a:	602b      	str	r3, [r5, #0]
   2f76c:	b005      	add	sp, #20
   2f76e:	bd30      	pop	{r4, r5, pc}
   2f770:	f248 0301 	movw	r3, #32769	; 0x8001
   2f774:	4299      	cmp	r1, r3
   2f776:	d12e      	bne.n	2f7d6 <logobj_event_handler+0xb6>
   2f778:	68c3      	ldr	r3, [r0, #12]
   2f77a:	2b00      	cmp	r3, #0
   2f77c:	d135      	bne.n	2f7ea <logobj_event_handler+0xca>
   2f77e:	6828      	ldr	r0, [r5, #0]
   2f780:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   2f784:	d03e      	beq.n	2f804 <logobj_event_handler+0xe4>
   2f786:	682b      	ldr	r3, [r5, #0]
   2f788:	b29b      	uxth	r3, r3
   2f78a:	2b01      	cmp	r3, #1
   2f78c:	d105      	bne.n	2f79a <logobj_event_handler+0x7a>
   2f78e:	682b      	ldr	r3, [r5, #0]
   2f790:	0c1b      	lsrs	r3, r3, #16
   2f792:	041b      	lsls	r3, r3, #16
   2f794:	f043 0302 	orr.w	r3, r3, #2
   2f798:	602b      	str	r3, [r5, #0]
   2f79a:	4b1e      	ldr	r3, [pc, #120]	; (2f814 <logobj_event_handler+0xf4>)
   2f79c:	781a      	ldrb	r2, [r3, #0]
   2f79e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   2f7a2:	2a00      	cmp	r2, #0
   2f7a4:	d031      	beq.n	2f80a <logobj_event_handler+0xea>
   2f7a6:	4a1c      	ldr	r2, [pc, #112]	; (2f818 <logobj_event_handler+0xf8>)
   2f7a8:	7811      	ldrb	r1, [r2, #0]
   2f7aa:	b909      	cbnz	r1, 2f7b0 <logobj_event_handler+0x90>
   2f7ac:	2101      	movs	r1, #1
   2f7ae:	7011      	strb	r1, [r2, #0]
   2f7b0:	2000      	movs	r0, #0
   2f7b2:	7018      	strb	r0, [r3, #0]
   2f7b4:	682b      	ldr	r3, [r5, #0]
   2f7b6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2f7ba:	602b      	str	r3, [r5, #0]
   2f7bc:	682b      	ldr	r3, [r5, #0]
   2f7be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   2f7c2:	602b      	str	r3, [r5, #0]
   2f7c4:	e7d2      	b.n	2f76c <logobj_event_handler+0x4c>
   2f7c6:	6800      	ldr	r0, [r0, #0]
   2f7c8:	2800      	cmp	r0, #0
   2f7ca:	d0cf      	beq.n	2f76c <logobj_event_handler+0x4c>
   2f7cc:	f7ff ff94 	bl	2f6f8 <rpc_logobj_client_data_free>
   2f7d0:	4628      	mov	r0, r5
   2f7d2:	b005      	add	sp, #20
   2f7d4:	bd30      	pop	{r4, r5, pc}
   2f7d6:	2000      	movs	r0, #0
   2f7d8:	b005      	add	sp, #20
   2f7da:	bd30      	pop	{r4, r5, pc}
   2f7dc:	682b      	ldr	r3, [r5, #0]
   2f7de:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   2f7e2:	d00b      	beq.n	2f7fc <logobj_event_handler+0xdc>
   2f7e4:	68c0      	ldr	r0, [r0, #12]
   2f7e6:	2800      	cmp	r0, #0
   2f7e8:	d0e4      	beq.n	2f7b4 <logobj_event_handler+0x94>
   2f7ea:	230e      	movs	r3, #14
   2f7ec:	2000      	movs	r0, #0
   2f7ee:	606b      	str	r3, [r5, #4]
   2f7f0:	b005      	add	sp, #20
   2f7f2:	bd30      	pop	{r4, r5, pc}
   2f7f4:	68c3      	ldr	r3, [r0, #12]
   2f7f6:	2b01      	cmp	r3, #1
   2f7f8:	d1a5      	bne.n	2f746 <logobj_event_handler+0x26>
   2f7fa:	e7f6      	b.n	2f7ea <logobj_event_handler+0xca>
   2f7fc:	4618      	mov	r0, r3
   2f7fe:	e7b5      	b.n	2f76c <logobj_event_handler+0x4c>
   2f800:	2002      	movs	r0, #2
   2f802:	e7b3      	b.n	2f76c <logobj_event_handler+0x4c>
   2f804:	230e      	movs	r3, #14
   2f806:	606b      	str	r3, [r5, #4]
   2f808:	e7b0      	b.n	2f76c <logobj_event_handler+0x4c>
   2f80a:	4a03      	ldr	r2, [pc, #12]	; (2f818 <logobj_event_handler+0xf8>)
   2f80c:	7011      	strb	r1, [r2, #0]
   2f80e:	e7cf      	b.n	2f7b0 <logobj_event_handler+0x90>
   2f810:	200249c0 	.word	0x200249c0
   2f814:	2002bd3d 	.word	0x2002bd3d
   2f818:	2002bd3e 	.word	0x2002bd3e

0002f81c <logobj_interface_init>:
   2f81c:	2300      	movs	r3, #0
   2f81e:	b510      	push	{r4, lr}
   2f820:	4907      	ldr	r1, [pc, #28]	; (2f840 <logobj_interface_init+0x24>)
   2f822:	4a08      	ldr	r2, [pc, #32]	; (2f844 <logobj_interface_init+0x28>)
   2f824:	4c08      	ldr	r4, [pc, #32]	; (2f848 <logobj_interface_init+0x2c>)
   2f826:	4809      	ldr	r0, [pc, #36]	; (2f84c <logobj_interface_init+0x30>)
   2f828:	7023      	strb	r3, [r4, #0]
   2f82a:	6003      	str	r3, [r0, #0]
   2f82c:	700b      	strb	r3, [r1, #0]
   2f82e:	6013      	str	r3, [r2, #0]
   2f830:	f7ff ff26 	bl	2f680 <rpc_logobj_client_init>
   2f834:	3000      	adds	r0, #0
   2f836:	bf18      	it	ne
   2f838:	2001      	movne	r0, #1
   2f83a:	4240      	negs	r0, r0
   2f83c:	bd10      	pop	{r4, pc}
   2f83e:	bf00      	nop
   2f840:	2002bd3d 	.word	0x2002bd3d
   2f844:	200249bc 	.word	0x200249bc
   2f848:	2002bd3e 	.word	0x2002bd3e
   2f84c:	200249c0 	.word	0x200249c0

0002f850 <logobj_interface_open>:
   2f850:	2300      	movs	r3, #0
   2f852:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f856:	2866      	cmp	r0, #102	; 0x66
   2f858:	b082      	sub	sp, #8
   2f85a:	9300      	str	r3, [sp, #0]
   2f85c:	d172      	bne.n	2f944 <logobj_interface_open+0xf4>
   2f85e:	2902      	cmp	r1, #2
   2f860:	4689      	mov	r9, r1
   2f862:	d16f      	bne.n	2f944 <logobj_interface_open+0xf4>
   2f864:	f240 2305 	movw	r3, #517	; 0x205
   2f868:	429a      	cmp	r2, r3
   2f86a:	4692      	mov	sl, r2
   2f86c:	d16a      	bne.n	2f944 <logobj_interface_open+0xf4>
   2f86e:	4f48      	ldr	r7, [pc, #288]	; (2f990 <logobj_interface_open+0x140>)
   2f870:	683d      	ldr	r5, [r7, #0]
   2f872:	2d00      	cmp	r5, #0
   2f874:	d17c      	bne.n	2f970 <logobj_interface_open+0x120>
   2f876:	4680      	mov	r8, r0
   2f878:	4a46      	ldr	r2, [pc, #280]	; (2f994 <logobj_interface_open+0x144>)
   2f87a:	4668      	mov	r0, sp
   2f87c:	f006 f98e 	bl	35b9c <interface_socket_allocate>
   2f880:	9b00      	ldr	r3, [sp, #0]
   2f882:	4606      	mov	r6, r0
   2f884:	2b00      	cmp	r3, #0
   2f886:	d07d      	beq.n	2f984 <logobj_interface_open+0x134>
   2f888:	4629      	mov	r1, r5
   2f88a:	2204      	movs	r2, #4
   2f88c:	4842      	ldr	r0, [pc, #264]	; (2f998 <logobj_interface_open+0x148>)
   2f88e:	603b      	str	r3, [r7, #0]
   2f890:	f010 fee4 	bl	4065c <memset>
   2f894:	9c00      	ldr	r4, [sp, #0]
   2f896:	4629      	mov	r1, r5
   2f898:	e9c4 8903 	strd	r8, r9, [r4, #12]
   2f89c:	f8c4 a014 	str.w	sl, [r4, #20]
   2f8a0:	a801      	add	r0, sp, #4
   2f8a2:	f7ff fef3 	bl	2f68c <rpc_logobj_client_request_alloc>
   2f8a6:	2800      	cmp	r0, #0
   2f8a8:	d13c      	bne.n	2f924 <logobj_interface_open+0xd4>
   2f8aa:	2201      	movs	r2, #1
   2f8ac:	2104      	movs	r1, #4
   2f8ae:	9b01      	ldr	r3, [sp, #4]
   2f8b0:	4d3a      	ldr	r5, [pc, #232]	; (2f99c <logobj_interface_open+0x14c>)
   2f8b2:	7358      	strb	r0, [r3, #13]
   2f8b4:	7398      	strb	r0, [r3, #14]
   2f8b6:	73d8      	strb	r0, [r3, #15]
   2f8b8:	7258      	strb	r0, [r3, #9]
   2f8ba:	7298      	strb	r0, [r3, #10]
   2f8bc:	72d8      	strb	r0, [r3, #11]
   2f8be:	7219      	strb	r1, [r3, #8]
   2f8c0:	702a      	strb	r2, [r5, #0]
   2f8c2:	731a      	strb	r2, [r3, #12]
   2f8c4:	6822      	ldr	r2, [r4, #0]
   2f8c6:	4618      	mov	r0, r3
   2f8c8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   2f8cc:	6022      	str	r2, [r4, #0]
   2f8ce:	f247 0101 	movw	r1, #28673	; 0x7001
   2f8d2:	f7ff fef3 	bl	2f6bc <rpc_logobj_client_request_send>
   2f8d6:	bb38      	cbnz	r0, 2f928 <logobj_interface_open+0xd8>
   2f8d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2f8dc:	f04f 33ff 	mov.w	r3, #4294967295
   2f8e0:	4611      	mov	r1, r2
   2f8e2:	4630      	mov	r0, r6
   2f8e4:	f006 fa0c 	bl	35d00 <interface_socket_wait>
   2f8e8:	4604      	mov	r4, r0
   2f8ea:	b310      	cbz	r0, 2f932 <logobj_interface_open+0xe2>
   2f8ec:	9a00      	ldr	r2, [sp, #0]
   2f8ee:	2e00      	cmp	r6, #0
   2f8f0:	6813      	ldr	r3, [r2, #0]
   2f8f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2f8f6:	6013      	str	r3, [r2, #0]
   2f8f8:	9a00      	ldr	r2, [sp, #0]
   2f8fa:	6813      	ldr	r3, [r2, #0]
   2f8fc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2f900:	6013      	str	r3, [r2, #0]
   2f902:	9a00      	ldr	r2, [sp, #0]
   2f904:	6813      	ldr	r3, [r2, #0]
   2f906:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2f90a:	6013      	str	r3, [r2, #0]
   2f90c:	da36      	bge.n	2f97c <logobj_interface_open+0x12c>
   2f90e:	2300      	movs	r3, #0
   2f910:	4620      	mov	r0, r4
   2f912:	603b      	str	r3, [r7, #0]
   2f914:	f04f 36ff 	mov.w	r6, #4294967295
   2f918:	f7f7 fb9e 	bl	27058 <bsd_os_errno_set>
   2f91c:	4630      	mov	r0, r6
   2f91e:	b002      	add	sp, #8
   2f920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2f924:	240c      	movs	r4, #12
   2f926:	e7e1      	b.n	2f8ec <logobj_interface_open+0x9c>
   2f928:	9801      	ldr	r0, [sp, #4]
   2f92a:	f7ff fedd 	bl	2f6e8 <rpc_logobj_client_message_free>
   2f92e:	2405      	movs	r4, #5
   2f930:	e7dc      	b.n	2f8ec <logobj_interface_open+0x9c>
   2f932:	4630      	mov	r0, r6
   2f934:	f006 fa58 	bl	35de8 <interface_socket_from_handle_get>
   2f938:	b150      	cbz	r0, 2f950 <logobj_interface_open+0x100>
   2f93a:	6844      	ldr	r4, [r0, #4]
   2f93c:	b144      	cbz	r4, 2f950 <logobj_interface_open+0x100>
   2f93e:	2300      	movs	r3, #0
   2f940:	6043      	str	r3, [r0, #4]
   2f942:	e7d3      	b.n	2f8ec <logobj_interface_open+0x9c>
   2f944:	2016      	movs	r0, #22
   2f946:	f7f7 fb87 	bl	27058 <bsd_os_errno_set>
   2f94a:	f04f 36ff 	mov.w	r6, #4294967295
   2f94e:	e7e5      	b.n	2f91c <logobj_interface_open+0xcc>
   2f950:	9a00      	ldr	r2, [sp, #0]
   2f952:	6813      	ldr	r3, [r2, #0]
   2f954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2f958:	6013      	str	r3, [r2, #0]
   2f95a:	9a00      	ldr	r2, [sp, #0]
   2f95c:	6813      	ldr	r3, [r2, #0]
   2f95e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2f962:	6013      	str	r3, [r2, #0]
   2f964:	9a00      	ldr	r2, [sp, #0]
   2f966:	6813      	ldr	r3, [r2, #0]
   2f968:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2f96c:	6013      	str	r3, [r2, #0]
   2f96e:	e7d5      	b.n	2f91c <logobj_interface_open+0xcc>
   2f970:	2001      	movs	r0, #1
   2f972:	f7f7 fb71 	bl	27058 <bsd_os_errno_set>
   2f976:	f04f 36ff 	mov.w	r6, #4294967295
   2f97a:	e7cf      	b.n	2f91c <logobj_interface_open+0xcc>
   2f97c:	4630      	mov	r0, r6
   2f97e:	f006 f971 	bl	35c64 <interface_socket_free>
   2f982:	e7c4      	b.n	2f90e <logobj_interface_open+0xbe>
   2f984:	2018      	movs	r0, #24
   2f986:	f7f7 fb67 	bl	27058 <bsd_os_errno_set>
   2f98a:	f04f 36ff 	mov.w	r6, #4294967295
   2f98e:	e7c5      	b.n	2f91c <logobj_interface_open+0xcc>
   2f990:	200249c0 	.word	0x200249c0
   2f994:	0002f709 	.word	0x0002f709
   2f998:	200249bc 	.word	0x200249bc
   2f99c:	2002bd3d 	.word	0x2002bd3d

0002f9a0 <logobj_interface_read>:
   2f9a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f9a4:	b085      	sub	sp, #20
   2f9a6:	2900      	cmp	r1, #0
   2f9a8:	d068      	beq.n	2fa7c <logobj_interface_read+0xdc>
   2f9aa:	2a00      	cmp	r2, #0
   2f9ac:	4617      	mov	r7, r2
   2f9ae:	dd65      	ble.n	2fa7c <logobj_interface_read+0xdc>
   2f9b0:	461d      	mov	r5, r3
   2f9b2:	4680      	mov	r8, r0
   2f9b4:	460e      	mov	r6, r1
   2f9b6:	f006 fa17 	bl	35de8 <interface_socket_from_handle_get>
   2f9ba:	4604      	mov	r4, r0
   2f9bc:	2800      	cmp	r0, #0
   2f9be:	d063      	beq.n	2fa88 <logobj_interface_read+0xe8>
   2f9c0:	bb4d      	cbnz	r5, 2fa16 <logobj_interface_read+0x76>
   2f9c2:	69e0      	ldr	r0, [r4, #28]
   2f9c4:	07aa      	lsls	r2, r5, #30
   2f9c6:	6803      	ldr	r3, [r0, #0]
   2f9c8:	68db      	ldr	r3, [r3, #12]
   2f9ca:	d52d      	bpl.n	2fa28 <logobj_interface_read+0x88>
   2f9cc:	4798      	blx	r3
   2f9ce:	3001      	adds	r0, #1
   2f9d0:	d044      	beq.n	2fa5c <logobj_interface_read+0xbc>
   2f9d2:	6823      	ldr	r3, [r4, #0]
   2f9d4:	69e0      	ldr	r0, [r4, #28]
   2f9d6:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   2f9da:	d041      	beq.n	2fa60 <logobj_interface_read+0xc0>
   2f9dc:	2100      	movs	r1, #0
   2f9de:	6823      	ldr	r3, [r4, #0]
   2f9e0:	462a      	mov	r2, r5
   2f9e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2f9e6:	6023      	str	r3, [r4, #0]
   2f9e8:	e9cd 1102 	strd	r1, r1, [sp, #8]
   2f9ec:	e9cd 6700 	strd	r6, r7, [sp]
   2f9f0:	6803      	ldr	r3, [r0, #0]
   2f9f2:	4669      	mov	r1, sp
   2f9f4:	689b      	ldr	r3, [r3, #8]
   2f9f6:	4798      	blx	r3
   2f9f8:	4605      	mov	r5, r0
   2f9fa:	69e0      	ldr	r0, [r4, #28]
   2f9fc:	6803      	ldr	r3, [r0, #0]
   2f9fe:	68db      	ldr	r3, [r3, #12]
   2fa00:	4798      	blx	r3
   2fa02:	3001      	adds	r0, #1
   2fa04:	d003      	beq.n	2fa0e <logobj_interface_read+0x6e>
   2fa06:	6823      	ldr	r3, [r4, #0]
   2fa08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2fa0c:	6023      	str	r3, [r4, #0]
   2fa0e:	4628      	mov	r0, r5
   2fa10:	b005      	add	sp, #20
   2fa12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2fa16:	f015 0f0a 	tst.w	r5, #10
   2fa1a:	d1d2      	bne.n	2f9c2 <logobj_interface_read+0x22>
   2fa1c:	202d      	movs	r0, #45	; 0x2d
   2fa1e:	f7f7 fb1b 	bl	27058 <bsd_os_errno_set>
   2fa22:	f04f 35ff 	mov.w	r5, #4294967295
   2fa26:	e7f2      	b.n	2fa0e <logobj_interface_read+0x6e>
   2fa28:	6822      	ldr	r2, [r4, #0]
   2fa2a:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   2fa2e:	d1cd      	bne.n	2f9cc <logobj_interface_read+0x2c>
   2fa30:	4798      	blx	r3
   2fa32:	1c43      	adds	r3, r0, #1
   2fa34:	d1cd      	bne.n	2f9d2 <logobj_interface_read+0x32>
   2fa36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2fa3a:	6a23      	ldr	r3, [r4, #32]
   2fa3c:	4611      	mov	r1, r2
   2fa3e:	2b00      	cmp	r3, #0
   2fa40:	bf08      	it	eq
   2fa42:	4603      	moveq	r3, r0
   2fa44:	4640      	mov	r0, r8
   2fa46:	f006 f95b 	bl	35d00 <interface_socket_wait>
   2fa4a:	b158      	cbz	r0, 2fa64 <logobj_interface_read+0xc4>
   2fa4c:	f04f 35ff 	mov.w	r5, #4294967295
   2fa50:	f7f7 fb02 	bl	27058 <bsd_os_errno_set>
   2fa54:	4628      	mov	r0, r5
   2fa56:	b005      	add	sp, #20
   2fa58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2fa5c:	2023      	movs	r0, #35	; 0x23
   2fa5e:	e7f5      	b.n	2fa4c <logobj_interface_read+0xac>
   2fa60:	461d      	mov	r5, r3
   2fa62:	e7cb      	b.n	2f9fc <logobj_interface_read+0x5c>
   2fa64:	4640      	mov	r0, r8
   2fa66:	f006 f9bf 	bl	35de8 <interface_socket_from_handle_get>
   2fa6a:	4603      	mov	r3, r0
   2fa6c:	2800      	cmp	r0, #0
   2fa6e:	d0b0      	beq.n	2f9d2 <logobj_interface_read+0x32>
   2fa70:	6840      	ldr	r0, [r0, #4]
   2fa72:	2800      	cmp	r0, #0
   2fa74:	d0ad      	beq.n	2f9d2 <logobj_interface_read+0x32>
   2fa76:	f8c3 9004 	str.w	r9, [r3, #4]
   2fa7a:	e7e7      	b.n	2fa4c <logobj_interface_read+0xac>
   2fa7c:	2016      	movs	r0, #22
   2fa7e:	f7f7 faeb 	bl	27058 <bsd_os_errno_set>
   2fa82:	f04f 35ff 	mov.w	r5, #4294967295
   2fa86:	e7c2      	b.n	2fa0e <logobj_interface_read+0x6e>
   2fa88:	2009      	movs	r0, #9
   2fa8a:	f7f7 fae5 	bl	27058 <bsd_os_errno_set>
   2fa8e:	f04f 35ff 	mov.w	r5, #4294967295
   2fa92:	e7bc      	b.n	2fa0e <logobj_interface_read+0x6e>

0002fa94 <logobj_interface_write>:
   2fa94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fa98:	b082      	sub	sp, #8
   2fa9a:	2900      	cmp	r1, #0
   2fa9c:	d05e      	beq.n	2fb5c <logobj_interface_write+0xc8>
   2fa9e:	2a04      	cmp	r2, #4
   2faa0:	d15c      	bne.n	2fb5c <logobj_interface_write+0xc8>
   2faa2:	461e      	mov	r6, r3
   2faa4:	4607      	mov	r7, r0
   2faa6:	460d      	mov	r5, r1
   2faa8:	f006 f99e 	bl	35de8 <interface_socket_from_handle_get>
   2faac:	4604      	mov	r4, r0
   2faae:	2800      	cmp	r0, #0
   2fab0:	d070      	beq.n	2fb94 <logobj_interface_write+0x100>
   2fab2:	b1e6      	cbz	r6, 2faee <logobj_interface_write+0x5a>
   2fab4:	07b0      	lsls	r0, r6, #30
   2fab6:	d567      	bpl.n	2fb88 <logobj_interface_write+0xf4>
   2fab8:	6823      	ldr	r3, [r4, #0]
   2faba:	039b      	lsls	r3, r3, #14
   2fabc:	d560      	bpl.n	2fb80 <logobj_interface_write+0xec>
   2fabe:	2600      	movs	r6, #0
   2fac0:	6823      	ldr	r3, [r4, #0]
   2fac2:	2100      	movs	r1, #0
   2fac4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2fac8:	6023      	str	r3, [r4, #0]
   2faca:	a801      	add	r0, sp, #4
   2facc:	f8d5 8000 	ldr.w	r8, [r5]
   2fad0:	f7ff fddc 	bl	2f68c <rpc_logobj_client_request_alloc>
   2fad4:	b198      	cbz	r0, 2fafe <logobj_interface_write+0x6a>
   2fad6:	200c      	movs	r0, #12
   2fad8:	6823      	ldr	r3, [r4, #0]
   2fada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2fade:	6023      	str	r3, [r4, #0]
   2fae0:	f7f7 faba 	bl	27058 <bsd_os_errno_set>
   2fae4:	f04f 30ff 	mov.w	r0, #4294967295
   2fae8:	b002      	add	sp, #8
   2faea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2faee:	6803      	ldr	r3, [r0, #0]
   2faf0:	00d9      	lsls	r1, r3, #3
   2faf2:	d4e1      	bmi.n	2fab8 <logobj_interface_write+0x24>
   2faf4:	6803      	ldr	r3, [r0, #0]
   2faf6:	039a      	lsls	r2, r3, #14
   2faf8:	d544      	bpl.n	2fb84 <logobj_interface_write+0xf0>
   2fafa:	2601      	movs	r6, #1
   2fafc:	e7e0      	b.n	2fac0 <logobj_interface_write+0x2c>
   2fafe:	2504      	movs	r5, #4
   2fb00:	9b01      	ldr	r3, [sp, #4]
   2fb02:	f247 0103 	movw	r1, #28675	; 0x7003
   2fb06:	f8c3 800c 	str.w	r8, [r3, #12]
   2fb0a:	7258      	strb	r0, [r3, #9]
   2fb0c:	7298      	strb	r0, [r3, #10]
   2fb0e:	72d8      	strb	r0, [r3, #11]
   2fb10:	721d      	strb	r5, [r3, #8]
   2fb12:	4618      	mov	r0, r3
   2fb14:	f7ff fdd2 	bl	2f6bc <rpc_logobj_client_request_send>
   2fb18:	4680      	mov	r8, r0
   2fb1a:	b9b0      	cbnz	r0, 2fb4a <logobj_interface_write+0xb6>
   2fb1c:	b93e      	cbnz	r6, 2fb2e <logobj_interface_write+0x9a>
   2fb1e:	4628      	mov	r0, r5
   2fb20:	6823      	ldr	r3, [r4, #0]
   2fb22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2fb26:	6023      	str	r3, [r4, #0]
   2fb28:	b002      	add	sp, #8
   2fb2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2fb2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2fb32:	f04f 33ff 	mov.w	r3, #4294967295
   2fb36:	4611      	mov	r1, r2
   2fb38:	4638      	mov	r0, r7
   2fb3a:	f006 f8e1 	bl	35d00 <interface_socket_wait>
   2fb3e:	b198      	cbz	r0, 2fb68 <logobj_interface_write+0xd4>
   2fb40:	6823      	ldr	r3, [r4, #0]
   2fb42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2fb46:	6023      	str	r3, [r4, #0]
   2fb48:	e7ca      	b.n	2fae0 <logobj_interface_write+0x4c>
   2fb4a:	9801      	ldr	r0, [sp, #4]
   2fb4c:	f7ff fdcc 	bl	2f6e8 <rpc_logobj_client_message_free>
   2fb50:	6823      	ldr	r3, [r4, #0]
   2fb52:	2005      	movs	r0, #5
   2fb54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2fb58:	6023      	str	r3, [r4, #0]
   2fb5a:	e7c1      	b.n	2fae0 <logobj_interface_write+0x4c>
   2fb5c:	2016      	movs	r0, #22
   2fb5e:	f7f7 fa7b 	bl	27058 <bsd_os_errno_set>
   2fb62:	f04f 30ff 	mov.w	r0, #4294967295
   2fb66:	e7bf      	b.n	2fae8 <logobj_interface_write+0x54>
   2fb68:	4638      	mov	r0, r7
   2fb6a:	f006 f93d 	bl	35de8 <interface_socket_from_handle_get>
   2fb6e:	4603      	mov	r3, r0
   2fb70:	2800      	cmp	r0, #0
   2fb72:	d0d4      	beq.n	2fb1e <logobj_interface_write+0x8a>
   2fb74:	6840      	ldr	r0, [r0, #4]
   2fb76:	2800      	cmp	r0, #0
   2fb78:	d0d1      	beq.n	2fb1e <logobj_interface_write+0x8a>
   2fb7a:	f8c3 8004 	str.w	r8, [r3, #4]
   2fb7e:	e7df      	b.n	2fb40 <logobj_interface_write+0xac>
   2fb80:	2073      	movs	r0, #115	; 0x73
   2fb82:	e7ad      	b.n	2fae0 <logobj_interface_write+0x4c>
   2fb84:	2009      	movs	r0, #9
   2fb86:	e7ab      	b.n	2fae0 <logobj_interface_write+0x4c>
   2fb88:	202d      	movs	r0, #45	; 0x2d
   2fb8a:	f7f7 fa65 	bl	27058 <bsd_os_errno_set>
   2fb8e:	f04f 30ff 	mov.w	r0, #4294967295
   2fb92:	e7a9      	b.n	2fae8 <logobj_interface_write+0x54>
   2fb94:	2009      	movs	r0, #9
   2fb96:	f7f7 fa5f 	bl	27058 <bsd_os_errno_set>
   2fb9a:	f04f 30ff 	mov.w	r0, #4294967295
   2fb9e:	e7a3      	b.n	2fae8 <logobj_interface_write+0x54>

0002fba0 <logobj_interface_setopt>:
   2fba0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fba2:	2901      	cmp	r1, #1
   2fba4:	b085      	sub	sp, #20
   2fba6:	d068      	beq.n	2fc7a <logobj_interface_setopt+0xda>
   2fba8:	461e      	mov	r6, r3
   2fbaa:	f240 2305 	movw	r3, #517	; 0x205
   2fbae:	4299      	cmp	r1, r3
   2fbb0:	f040 8095 	bne.w	2fcde <logobj_interface_setopt+0x13e>
   2fbb4:	4607      	mov	r7, r0
   2fbb6:	4615      	mov	r5, r2
   2fbb8:	f006 f916 	bl	35de8 <interface_socket_from_handle_get>
   2fbbc:	4604      	mov	r4, r0
   2fbbe:	2800      	cmp	r0, #0
   2fbc0:	f000 80b2 	beq.w	2fd28 <logobj_interface_setopt+0x188>
   2fbc4:	2d01      	cmp	r5, #1
   2fbc6:	d019      	beq.n	2fbfc <logobj_interface_setopt+0x5c>
   2fbc8:	2d02      	cmp	r5, #2
   2fbca:	d010      	beq.n	2fbee <logobj_interface_setopt+0x4e>
   2fbcc:	252a      	movs	r5, #42	; 0x2a
   2fbce:	6803      	ldr	r3, [r0, #0]
   2fbd0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2fbd4:	6023      	str	r3, [r4, #0]
   2fbd6:	6823      	ldr	r3, [r4, #0]
   2fbd8:	4628      	mov	r0, r5
   2fbda:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2fbde:	6023      	str	r3, [r4, #0]
   2fbe0:	f7f7 fa3a 	bl	27058 <bsd_os_errno_set>
   2fbe4:	f04f 35ff 	mov.w	r5, #4294967295
   2fbe8:	4628      	mov	r0, r5
   2fbea:	b005      	add	sp, #20
   2fbec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fbee:	b116      	cbz	r6, 2fbf6 <logobj_interface_setopt+0x56>
   2fbf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2fbf2:	2b01      	cmp	r3, #1
   2fbf4:	d049      	beq.n	2fc8a <logobj_interface_setopt+0xea>
   2fbf6:	6823      	ldr	r3, [r4, #0]
   2fbf8:	2516      	movs	r5, #22
   2fbfa:	e7e9      	b.n	2fbd0 <logobj_interface_setopt+0x30>
   2fbfc:	2e00      	cmp	r6, #0
   2fbfe:	d0fa      	beq.n	2fbf6 <logobj_interface_setopt+0x56>
   2fc00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2fc02:	2b04      	cmp	r3, #4
   2fc04:	d1f7      	bne.n	2fbf6 <logobj_interface_setopt+0x56>
   2fc06:	2100      	movs	r1, #0
   2fc08:	a803      	add	r0, sp, #12
   2fc0a:	f7ff fd3f 	bl	2f68c <rpc_logobj_client_request_alloc>
   2fc0e:	4605      	mov	r5, r0
   2fc10:	2800      	cmp	r0, #0
   2fc12:	d16a      	bne.n	2fcea <logobj_interface_setopt+0x14a>
   2fc14:	9803      	ldr	r0, [sp, #12]
   2fc16:	2208      	movs	r2, #8
   2fc18:	4629      	mov	r1, r5
   2fc1a:	300c      	adds	r0, #12
   2fc1c:	f010 fd1e 	bl	4065c <memset>
   2fc20:	9803      	ldr	r0, [sp, #12]
   2fc22:	4631      	mov	r1, r6
   2fc24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2fc26:	300c      	adds	r0, #12
   2fc28:	f010 fcf8 	bl	4061c <memcpy>
   2fc2c:	2308      	movs	r3, #8
   2fc2e:	9803      	ldr	r0, [sp, #12]
   2fc30:	f247 0102 	movw	r1, #28674	; 0x7002
   2fc34:	7203      	strb	r3, [r0, #8]
   2fc36:	7245      	strb	r5, [r0, #9]
   2fc38:	7285      	strb	r5, [r0, #10]
   2fc3a:	72c5      	strb	r5, [r0, #11]
   2fc3c:	6823      	ldr	r3, [r4, #0]
   2fc3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   2fc42:	6023      	str	r3, [r4, #0]
   2fc44:	f7ff fd3a 	bl	2f6bc <rpc_logobj_client_request_send>
   2fc48:	2800      	cmp	r0, #0
   2fc4a:	d151      	bne.n	2fcf0 <logobj_interface_setopt+0x150>
   2fc4c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2fc50:	f04f 33ff 	mov.w	r3, #4294967295
   2fc54:	4611      	mov	r1, r2
   2fc56:	4638      	mov	r0, r7
   2fc58:	f006 f852 	bl	35d00 <interface_socket_wait>
   2fc5c:	4605      	mov	r5, r0
   2fc5e:	2800      	cmp	r0, #0
   2fc60:	d13b      	bne.n	2fcda <logobj_interface_setopt+0x13a>
   2fc62:	4638      	mov	r0, r7
   2fc64:	f006 f8c0 	bl	35de8 <interface_socket_from_handle_get>
   2fc68:	2800      	cmp	r0, #0
   2fc6a:	d04f      	beq.n	2fd0c <logobj_interface_setopt+0x16c>
   2fc6c:	6843      	ldr	r3, [r0, #4]
   2fc6e:	2b00      	cmp	r3, #0
   2fc70:	d04c      	beq.n	2fd0c <logobj_interface_setopt+0x16c>
   2fc72:	2200      	movs	r2, #0
   2fc74:	461d      	mov	r5, r3
   2fc76:	6042      	str	r2, [r0, #4]
   2fc78:	e02f      	b.n	2fcda <logobj_interface_setopt+0x13a>
   2fc7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2fc7c:	9400      	str	r4, [sp, #0]
   2fc7e:	f006 f8db 	bl	35e38 <interface_socket_setopt>
   2fc82:	4605      	mov	r5, r0
   2fc84:	4628      	mov	r0, r5
   2fc86:	b005      	add	sp, #20
   2fc88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fc8a:	2100      	movs	r1, #0
   2fc8c:	a803      	add	r0, sp, #12
   2fc8e:	7835      	ldrb	r5, [r6, #0]
   2fc90:	f7ff fcfc 	bl	2f68c <rpc_logobj_client_request_alloc>
   2fc94:	bb48      	cbnz	r0, 2fcea <logobj_interface_setopt+0x14a>
   2fc96:	2d01      	cmp	r5, #1
   2fc98:	bf08      	it	eq
   2fc9a:	4b26      	ldreq	r3, [pc, #152]	; (2fd34 <logobj_interface_setopt+0x194>)
   2fc9c:	f04f 0204 	mov.w	r2, #4
   2fca0:	bf08      	it	eq
   2fca2:	701d      	strbeq	r5, [r3, #0]
   2fca4:	2300      	movs	r3, #0
   2fca6:	9803      	ldr	r0, [sp, #12]
   2fca8:	f247 0101 	movw	r1, #28673	; 0x7001
   2fcac:	7243      	strb	r3, [r0, #9]
   2fcae:	60c5      	str	r5, [r0, #12]
   2fcb0:	7283      	strb	r3, [r0, #10]
   2fcb2:	72c3      	strb	r3, [r0, #11]
   2fcb4:	7202      	strb	r2, [r0, #8]
   2fcb6:	6823      	ldr	r3, [r4, #0]
   2fcb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   2fcbc:	6023      	str	r3, [r4, #0]
   2fcbe:	f7ff fcfd 	bl	2f6bc <rpc_logobj_client_request_send>
   2fcc2:	4606      	mov	r6, r0
   2fcc4:	b9a0      	cbnz	r0, 2fcf0 <logobj_interface_setopt+0x150>
   2fcc6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2fcca:	f04f 33ff 	mov.w	r3, #4294967295
   2fcce:	4611      	mov	r1, r2
   2fcd0:	4638      	mov	r0, r7
   2fcd2:	f006 f815 	bl	35d00 <interface_socket_wait>
   2fcd6:	4605      	mov	r5, r0
   2fcd8:	b180      	cbz	r0, 2fcfc <logobj_interface_setopt+0x15c>
   2fcda:	6823      	ldr	r3, [r4, #0]
   2fcdc:	e778      	b.n	2fbd0 <logobj_interface_setopt+0x30>
   2fcde:	202a      	movs	r0, #42	; 0x2a
   2fce0:	f7f7 f9ba 	bl	27058 <bsd_os_errno_set>
   2fce4:	f04f 35ff 	mov.w	r5, #4294967295
   2fce8:	e77e      	b.n	2fbe8 <logobj_interface_setopt+0x48>
   2fcea:	6823      	ldr	r3, [r4, #0]
   2fcec:	250c      	movs	r5, #12
   2fcee:	e76f      	b.n	2fbd0 <logobj_interface_setopt+0x30>
   2fcf0:	9803      	ldr	r0, [sp, #12]
   2fcf2:	f7ff fcf9 	bl	2f6e8 <rpc_logobj_client_message_free>
   2fcf6:	2505      	movs	r5, #5
   2fcf8:	6823      	ldr	r3, [r4, #0]
   2fcfa:	e769      	b.n	2fbd0 <logobj_interface_setopt+0x30>
   2fcfc:	4638      	mov	r0, r7
   2fcfe:	f006 f873 	bl	35de8 <interface_socket_from_handle_get>
   2fd02:	b140      	cbz	r0, 2fd16 <logobj_interface_setopt+0x176>
   2fd04:	6845      	ldr	r5, [r0, #4]
   2fd06:	b135      	cbz	r5, 2fd16 <logobj_interface_setopt+0x176>
   2fd08:	6046      	str	r6, [r0, #4]
   2fd0a:	e7e6      	b.n	2fcda <logobj_interface_setopt+0x13a>
   2fd0c:	4631      	mov	r1, r6
   2fd0e:	2204      	movs	r2, #4
   2fd10:	4809      	ldr	r0, [pc, #36]	; (2fd38 <logobj_interface_setopt+0x198>)
   2fd12:	f010 fc83 	bl	4061c <memcpy>
   2fd16:	6823      	ldr	r3, [r4, #0]
   2fd18:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2fd1c:	6023      	str	r3, [r4, #0]
   2fd1e:	6823      	ldr	r3, [r4, #0]
   2fd20:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2fd24:	6023      	str	r3, [r4, #0]
   2fd26:	e75f      	b.n	2fbe8 <logobj_interface_setopt+0x48>
   2fd28:	2009      	movs	r0, #9
   2fd2a:	f7f7 f995 	bl	27058 <bsd_os_errno_set>
   2fd2e:	f04f 35ff 	mov.w	r5, #4294967295
   2fd32:	e759      	b.n	2fbe8 <logobj_interface_setopt+0x48>
   2fd34:	2002bd3d 	.word	0x2002bd3d
   2fd38:	200249bc 	.word	0x200249bc

0002fd3c <logobj_interface_getopt>:
   2fd3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fd3e:	2901      	cmp	r1, #1
   2fd40:	b083      	sub	sp, #12
   2fd42:	9e08      	ldr	r6, [sp, #32]
   2fd44:	d030      	beq.n	2fda8 <logobj_interface_getopt+0x6c>
   2fd46:	461f      	mov	r7, r3
   2fd48:	f240 2305 	movw	r3, #517	; 0x205
   2fd4c:	4299      	cmp	r1, r3
   2fd4e:	d134      	bne.n	2fdba <logobj_interface_getopt+0x7e>
   2fd50:	4615      	mov	r5, r2
   2fd52:	f006 f849 	bl	35de8 <interface_socket_from_handle_get>
   2fd56:	2800      	cmp	r0, #0
   2fd58:	d037      	beq.n	2fdca <logobj_interface_getopt+0x8e>
   2fd5a:	2d01      	cmp	r5, #1
   2fd5c:	d015      	beq.n	2fd8a <logobj_interface_getopt+0x4e>
   2fd5e:	2d02      	cmp	r5, #2
   2fd60:	d10b      	bne.n	2fd7a <logobj_interface_getopt+0x3e>
   2fd62:	b387      	cbz	r7, 2fdc6 <logobj_interface_getopt+0x8a>
   2fd64:	6833      	ldr	r3, [r6, #0]
   2fd66:	b373      	cbz	r3, 2fdc6 <logobj_interface_getopt+0x8a>
   2fd68:	2300      	movs	r3, #0
   2fd6a:	2201      	movs	r2, #1
   2fd6c:	4618      	mov	r0, r3
   2fd6e:	491a      	ldr	r1, [pc, #104]	; (2fdd8 <logobj_interface_getopt+0x9c>)
   2fd70:	7809      	ldrb	r1, [r1, #0]
   2fd72:	7039      	strb	r1, [r7, #0]
   2fd74:	6032      	str	r2, [r6, #0]
   2fd76:	b003      	add	sp, #12
   2fd78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fd7a:	2009      	movs	r0, #9
   2fd7c:	f7f7 f96c 	bl	27058 <bsd_os_errno_set>
   2fd80:	f04f 33ff 	mov.w	r3, #4294967295
   2fd84:	4618      	mov	r0, r3
   2fd86:	b003      	add	sp, #12
   2fd88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fd8a:	b1e7      	cbz	r7, 2fdc6 <logobj_interface_getopt+0x8a>
   2fd8c:	6833      	ldr	r3, [r6, #0]
   2fd8e:	2b03      	cmp	r3, #3
   2fd90:	d919      	bls.n	2fdc6 <logobj_interface_getopt+0x8a>
   2fd92:	4638      	mov	r0, r7
   2fd94:	2204      	movs	r2, #4
   2fd96:	4911      	ldr	r1, [pc, #68]	; (2fddc <logobj_interface_getopt+0xa0>)
   2fd98:	f010 fc40 	bl	4061c <memcpy>
   2fd9c:	2300      	movs	r3, #0
   2fd9e:	2204      	movs	r2, #4
   2fda0:	4618      	mov	r0, r3
   2fda2:	6032      	str	r2, [r6, #0]
   2fda4:	b003      	add	sp, #12
   2fda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fda8:	9600      	str	r6, [sp, #0]
   2fdaa:	f006 f887 	bl	35ebc <interface_socket_getopt>
   2fdae:	4603      	mov	r3, r0
   2fdb0:	2800      	cmp	r0, #0
   2fdb2:	d1e3      	bne.n	2fd7c <logobj_interface_getopt+0x40>
   2fdb4:	4618      	mov	r0, r3
   2fdb6:	b003      	add	sp, #12
   2fdb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fdba:	202a      	movs	r0, #42	; 0x2a
   2fdbc:	f7f7 f94c 	bl	27058 <bsd_os_errno_set>
   2fdc0:	f04f 33ff 	mov.w	r3, #4294967295
   2fdc4:	e7de      	b.n	2fd84 <logobj_interface_getopt+0x48>
   2fdc6:	2016      	movs	r0, #22
   2fdc8:	e7d8      	b.n	2fd7c <logobj_interface_getopt+0x40>
   2fdca:	2009      	movs	r0, #9
   2fdcc:	f7f7 f944 	bl	27058 <bsd_os_errno_set>
   2fdd0:	f04f 33ff 	mov.w	r3, #4294967295
   2fdd4:	e7d6      	b.n	2fd84 <logobj_interface_getopt+0x48>
   2fdd6:	bf00      	nop
   2fdd8:	2002bd3e 	.word	0x2002bd3e
   2fddc:	200249bc 	.word	0x200249bc

0002fde0 <logobj_interface_close>:
   2fde0:	b510      	push	{r4, lr}
   2fde2:	4604      	mov	r4, r0
   2fde4:	f006 f800 	bl	35de8 <interface_socket_from_handle_get>
   2fde8:	b138      	cbz	r0, 2fdfa <logobj_interface_close+0x1a>
   2fdea:	4620      	mov	r0, r4
   2fdec:	f005 ff3a 	bl	35c64 <interface_socket_free>
   2fdf0:	2300      	movs	r3, #0
   2fdf2:	4a05      	ldr	r2, [pc, #20]	; (2fe08 <logobj_interface_close+0x28>)
   2fdf4:	4618      	mov	r0, r3
   2fdf6:	6013      	str	r3, [r2, #0]
   2fdf8:	bd10      	pop	{r4, pc}
   2fdfa:	2009      	movs	r0, #9
   2fdfc:	f7f7 f92c 	bl	27058 <bsd_os_errno_set>
   2fe00:	f04f 30ff 	mov.w	r0, #4294967295
   2fe04:	bd10      	pop	{r4, pc}
   2fe06:	bf00      	nop
   2fe08:	200249c0 	.word	0x200249c0

0002fe0c <packet_free_cb>:
   2fe0c:	6800      	ldr	r0, [r0, #0]
   2fe0e:	f004 bb0d 	b.w	3442c <rpc_at_client_data_free>
   2fe12:	bf00      	nop

0002fe14 <at_interface_write>:
   2fe14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fe18:	b082      	sub	sp, #8
   2fe1a:	9c08      	ldr	r4, [sp, #32]
   2fe1c:	2c00      	cmp	r4, #0
   2fe1e:	d15b      	bne.n	2fed8 <at_interface_write+0xc4>
   2fe20:	460f      	mov	r7, r1
   2fe22:	4615      	mov	r5, r2
   2fe24:	4698      	mov	r8, r3
   2fe26:	4606      	mov	r6, r0
   2fe28:	f005 ffde 	bl	35de8 <interface_socket_from_handle_get>
   2fe2c:	4604      	mov	r4, r0
   2fe2e:	f1b8 0f00 	cmp.w	r8, #0
   2fe32:	d12b      	bne.n	2fe8c <at_interface_write+0x78>
   2fe34:	2800      	cmp	r0, #0
   2fe36:	d055      	beq.n	2fee4 <at_interface_write+0xd0>
   2fe38:	6803      	ldr	r3, [r0, #0]
   2fe3a:	039b      	lsls	r3, r3, #14
   2fe3c:	d552      	bpl.n	2fee4 <at_interface_write+0xd0>
   2fe3e:	6803      	ldr	r3, [r0, #0]
   2fe40:	4629      	mov	r1, r5
   2fe42:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2fe46:	6003      	str	r3, [r0, #0]
   2fe48:	6803      	ldr	r3, [r0, #0]
   2fe4a:	a801      	add	r0, sp, #4
   2fe4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   2fe50:	6023      	str	r3, [r4, #0]
   2fe52:	f004 fac1 	bl	343d8 <rpc_at_client_request_alloc>
   2fe56:	bb08      	cbnz	r0, 2fe9c <at_interface_write+0x88>
   2fe58:	2204      	movs	r2, #4
   2fe5a:	9b01      	ldr	r3, [sp, #4]
   2fe5c:	721a      	strb	r2, [r3, #8]
   2fe5e:	7258      	strb	r0, [r3, #9]
   2fe60:	7298      	strb	r0, [r3, #10]
   2fe62:	72d8      	strb	r0, [r3, #11]
   2fe64:	60de      	str	r6, [r3, #12]
   2fe66:	b9fd      	cbnz	r5, 2fea8 <at_interface_write+0x94>
   2fe68:	4618      	mov	r0, r3
   2fe6a:	2101      	movs	r1, #1
   2fe6c:	f004 fac8 	bl	34400 <rpc_at_client_request_send>
   2fe70:	bb48      	cbnz	r0, 2fec6 <at_interface_write+0xb2>
   2fe72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   2fe76:	4630      	mov	r0, r6
   2fe78:	4611      	mov	r1, r2
   2fe7a:	f04f 33ff 	mov.w	r3, #4294967295
   2fe7e:	f005 ff3f 	bl	35d00 <interface_socket_wait>
   2fe82:	b960      	cbnz	r0, 2fe9e <at_interface_write+0x8a>
   2fe84:	4628      	mov	r0, r5
   2fe86:	b002      	add	sp, #8
   2fe88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2fe8c:	b360      	cbz	r0, 2fee8 <at_interface_write+0xd4>
   2fe8e:	6803      	ldr	r3, [r0, #0]
   2fe90:	202d      	movs	r0, #45	; 0x2d
   2fe92:	f7f7 f8e1 	bl	27058 <bsd_os_errno_set>
   2fe96:	f04f 30ff 	mov.w	r0, #4294967295
   2fe9a:	e7f4      	b.n	2fe86 <at_interface_write+0x72>
   2fe9c:	200c      	movs	r0, #12
   2fe9e:	6823      	ldr	r3, [r4, #0]
   2fea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2fea4:	6023      	str	r3, [r4, #0]
   2fea6:	e7f4      	b.n	2fe92 <at_interface_write+0x7e>
   2fea8:	4639      	mov	r1, r7
   2feaa:	6818      	ldr	r0, [r3, #0]
   2feac:	462a      	mov	r2, r5
   2feae:	f010 fbb5 	bl	4061c <memcpy>
   2feb2:	2101      	movs	r1, #1
   2feb4:	9801      	ldr	r0, [sp, #4]
   2feb6:	f004 faa3 	bl	34400 <rpc_at_client_request_send>
   2feba:	2800      	cmp	r0, #0
   2febc:	d0d9      	beq.n	2fe72 <at_interface_write+0x5e>
   2febe:	9b01      	ldr	r3, [sp, #4]
   2fec0:	6818      	ldr	r0, [r3, #0]
   2fec2:	f004 fab3 	bl	3442c <rpc_at_client_data_free>
   2fec6:	9801      	ldr	r0, [sp, #4]
   2fec8:	f004 faa8 	bl	3441c <rpc_at_client_message_free>
   2fecc:	6823      	ldr	r3, [r4, #0]
   2fece:	2023      	movs	r0, #35	; 0x23
   2fed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2fed4:	6023      	str	r3, [r4, #0]
   2fed6:	e7dc      	b.n	2fe92 <at_interface_write+0x7e>
   2fed8:	2038      	movs	r0, #56	; 0x38
   2feda:	f7f7 f8bd 	bl	27058 <bsd_os_errno_set>
   2fede:	f04f 30ff 	mov.w	r0, #4294967295
   2fee2:	e7d0      	b.n	2fe86 <at_interface_write+0x72>
   2fee4:	2016      	movs	r0, #22
   2fee6:	e7d4      	b.n	2fe92 <at_interface_write+0x7e>
   2fee8:	202d      	movs	r0, #45	; 0x2d
   2feea:	e7d2      	b.n	2fe92 <at_interface_write+0x7e>

0002feec <at_interface_init>:
   2feec:	f004 ba6e 	b.w	343cc <rpc_at_client_init>

0002fef0 <at_interface_open>:
   2fef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fef4:	2600      	movs	r6, #0
   2fef6:	b082      	sub	sp, #8
   2fef8:	2902      	cmp	r1, #2
   2fefa:	9600      	str	r6, [sp, #0]
   2fefc:	d13e      	bne.n	2ff7c <at_interface_open+0x8c>
   2fefe:	4680      	mov	r8, r0
   2ff00:	4617      	mov	r7, r2
   2ff02:	4668      	mov	r0, sp
   2ff04:	4a20      	ldr	r2, [pc, #128]	; (2ff88 <at_interface_open+0x98>)
   2ff06:	460c      	mov	r4, r1
   2ff08:	f005 fe48 	bl	35b9c <interface_socket_allocate>
   2ff0c:	9b00      	ldr	r3, [sp, #0]
   2ff0e:	4605      	mov	r5, r0
   2ff10:	b30b      	cbz	r3, 2ff56 <at_interface_open+0x66>
   2ff12:	e9c3 8403 	strd	r8, r4, [r3, #12]
   2ff16:	615f      	str	r7, [r3, #20]
   2ff18:	4631      	mov	r1, r6
   2ff1a:	a801      	add	r0, sp, #4
   2ff1c:	f004 fa5c 	bl	343d8 <rpc_at_client_request_alloc>
   2ff20:	bb50      	cbnz	r0, 2ff78 <at_interface_open+0x88>
   2ff22:	2204      	movs	r2, #4
   2ff24:	9b01      	ldr	r3, [sp, #4]
   2ff26:	2105      	movs	r1, #5
   2ff28:	7258      	strb	r0, [r3, #9]
   2ff2a:	7298      	strb	r0, [r3, #10]
   2ff2c:	72d8      	strb	r0, [r3, #11]
   2ff2e:	721a      	strb	r2, [r3, #8]
   2ff30:	60dd      	str	r5, [r3, #12]
   2ff32:	4618      	mov	r0, r3
   2ff34:	f004 fa64 	bl	34400 <rpc_at_client_request_send>
   2ff38:	b988      	cbnz	r0, 2ff5e <at_interface_open+0x6e>
   2ff3a:	4622      	mov	r2, r4
   2ff3c:	4621      	mov	r1, r4
   2ff3e:	f04f 33ff 	mov.w	r3, #4294967295
   2ff42:	4628      	mov	r0, r5
   2ff44:	f005 fedc 	bl	35d00 <interface_socket_wait>
   2ff48:	4604      	mov	r4, r0
   2ff4a:	b960      	cbnz	r0, 2ff66 <at_interface_open+0x76>
   2ff4c:	9a00      	ldr	r2, [sp, #0]
   2ff4e:	6813      	ldr	r3, [r2, #0]
   2ff50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2ff54:	6013      	str	r3, [r2, #0]
   2ff56:	4628      	mov	r0, r5
   2ff58:	b002      	add	sp, #8
   2ff5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ff5e:	9801      	ldr	r0, [sp, #4]
   2ff60:	f004 fa5c 	bl	3441c <rpc_at_client_message_free>
   2ff64:	2423      	movs	r4, #35	; 0x23
   2ff66:	4628      	mov	r0, r5
   2ff68:	f005 fe7c 	bl	35c64 <interface_socket_free>
   2ff6c:	4620      	mov	r0, r4
   2ff6e:	f7f7 f873 	bl	27058 <bsd_os_errno_set>
   2ff72:	f04f 35ff 	mov.w	r5, #4294967295
   2ff76:	e7ee      	b.n	2ff56 <at_interface_open+0x66>
   2ff78:	240c      	movs	r4, #12
   2ff7a:	e7f4      	b.n	2ff66 <at_interface_open+0x76>
   2ff7c:	2029      	movs	r0, #41	; 0x29
   2ff7e:	f7f7 f86b 	bl	27058 <bsd_os_errno_set>
   2ff82:	f04f 35ff 	mov.w	r5, #4294967295
   2ff86:	e7e6      	b.n	2ff56 <at_interface_open+0x66>
   2ff88:	0002fe0d 	.word	0x0002fe0d

0002ff8c <at_interface_close>:
   2ff8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ff8e:	b083      	sub	sp, #12
   2ff90:	4606      	mov	r6, r0
   2ff92:	f005 ff29 	bl	35de8 <interface_socket_from_handle_get>
   2ff96:	2800      	cmp	r0, #0
   2ff98:	d03d      	beq.n	30016 <at_interface_close+0x8a>
   2ff9a:	230d      	movs	r3, #13
   2ff9c:	6807      	ldr	r7, [r0, #0]
   2ff9e:	6003      	str	r3, [r0, #0]
   2ffa0:	6803      	ldr	r3, [r0, #0]
   2ffa2:	4604      	mov	r4, r0
   2ffa4:	039b      	lsls	r3, r3, #14
   2ffa6:	d41f      	bmi.n	2ffe8 <at_interface_close+0x5c>
   2ffa8:	2100      	movs	r1, #0
   2ffaa:	a801      	add	r0, sp, #4
   2ffac:	f004 fa14 	bl	343d8 <rpc_at_client_request_alloc>
   2ffb0:	bb20      	cbnz	r0, 2fffc <at_interface_close+0x70>
   2ffb2:	2204      	movs	r2, #4
   2ffb4:	9b01      	ldr	r3, [sp, #4]
   2ffb6:	2106      	movs	r1, #6
   2ffb8:	7258      	strb	r0, [r3, #9]
   2ffba:	7298      	strb	r0, [r3, #10]
   2ffbc:	72d8      	strb	r0, [r3, #11]
   2ffbe:	721a      	strb	r2, [r3, #8]
   2ffc0:	60de      	str	r6, [r3, #12]
   2ffc2:	4618      	mov	r0, r3
   2ffc4:	f004 fa1c 	bl	34400 <rpc_at_client_request_send>
   2ffc8:	b9d0      	cbnz	r0, 30000 <at_interface_close+0x74>
   2ffca:	220e      	movs	r2, #14
   2ffcc:	f04f 33ff 	mov.w	r3, #4294967295
   2ffd0:	4611      	mov	r1, r2
   2ffd2:	4630      	mov	r0, r6
   2ffd4:	f005 fe94 	bl	35d00 <interface_socket_wait>
   2ffd8:	4605      	mov	r5, r0
   2ffda:	b9a8      	cbnz	r0, 30008 <at_interface_close+0x7c>
   2ffdc:	4630      	mov	r0, r6
   2ffde:	f005 fe41 	bl	35c64 <interface_socket_free>
   2ffe2:	4628      	mov	r0, r5
   2ffe4:	b003      	add	sp, #12
   2ffe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ffe8:	6803      	ldr	r3, [r0, #0]
   2ffea:	2100      	movs	r1, #0
   2ffec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2fff0:	6003      	str	r3, [r0, #0]
   2fff2:	a801      	add	r0, sp, #4
   2fff4:	f004 f9f0 	bl	343d8 <rpc_at_client_request_alloc>
   2fff8:	2800      	cmp	r0, #0
   2fffa:	d0da      	beq.n	2ffb2 <at_interface_close+0x26>
   2fffc:	250c      	movs	r5, #12
   2fffe:	e003      	b.n	30008 <at_interface_close+0x7c>
   30000:	9801      	ldr	r0, [sp, #4]
   30002:	f004 fa0b 	bl	3441c <rpc_at_client_message_free>
   30006:	2523      	movs	r5, #35	; 0x23
   30008:	6027      	str	r7, [r4, #0]
   3000a:	4628      	mov	r0, r5
   3000c:	f7f7 f824 	bl	27058 <bsd_os_errno_set>
   30010:	f04f 35ff 	mov.w	r5, #4294967295
   30014:	e7e5      	b.n	2ffe2 <at_interface_close+0x56>
   30016:	2516      	movs	r5, #22
   30018:	e7f7      	b.n	3000a <at_interface_close+0x7e>
   3001a:	bf00      	nop

0003001c <at_interface_read>:
   3001c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30020:	b084      	sub	sp, #16
   30022:	4688      	mov	r8, r1
   30024:	4615      	mov	r5, r2
   30026:	461e      	mov	r6, r3
   30028:	4607      	mov	r7, r0
   3002a:	f005 fedd 	bl	35de8 <interface_socket_from_handle_get>
   3002e:	2800      	cmp	r0, #0
   30030:	d043      	beq.n	300ba <at_interface_read+0x9e>
   30032:	2300      	movs	r3, #0
   30034:	4604      	mov	r4, r0
   30036:	e9cd 8500 	strd	r8, r5, [sp]
   3003a:	e9cd 3302 	strd	r3, r3, [sp, #8]
   3003e:	bb2e      	cbnz	r6, 3008c <at_interface_read+0x70>
   30040:	f016 0502 	ands.w	r5, r6, #2
   30044:	d00d      	beq.n	30062 <at_interface_read+0x46>
   30046:	e028      	b.n	3009a <at_interface_read+0x7e>
   30048:	b9cd      	cbnz	r5, 3007e <at_interface_read+0x62>
   3004a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   3004e:	6a23      	ldr	r3, [r4, #32]
   30050:	4611      	mov	r1, r2
   30052:	2b00      	cmp	r3, #0
   30054:	bf08      	it	eq
   30056:	f04f 33ff 	moveq.w	r3, #4294967295
   3005a:	4638      	mov	r0, r7
   3005c:	f005 fe50 	bl	35d00 <interface_socket_wait>
   30060:	4605      	mov	r5, r0
   30062:	6823      	ldr	r3, [r4, #0]
   30064:	69e0      	ldr	r0, [r4, #28]
   30066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   3006a:	6023      	str	r3, [r4, #0]
   3006c:	6803      	ldr	r3, [r0, #0]
   3006e:	4632      	mov	r2, r6
   30070:	689b      	ldr	r3, [r3, #8]
   30072:	4669      	mov	r1, sp
   30074:	4798      	blx	r3
   30076:	f1b0 0800 	subs.w	r8, r0, #0
   3007a:	dbe5      	blt.n	30048 <at_interface_read+0x2c>
   3007c:	b115      	cbz	r5, 30084 <at_interface_read+0x68>
   3007e:	4628      	mov	r0, r5
   30080:	f7f6 ffea 	bl	27058 <bsd_os_errno_set>
   30084:	4640      	mov	r0, r8
   30086:	b004      	add	sp, #16
   30088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3008c:	f016 0f0a 	tst.w	r6, #10
   30090:	d1d6      	bne.n	30040 <at_interface_read+0x24>
   30092:	252d      	movs	r5, #45	; 0x2d
   30094:	f04f 38ff 	mov.w	r8, #4294967295
   30098:	e7f1      	b.n	3007e <at_interface_read+0x62>
   3009a:	6823      	ldr	r3, [r4, #0]
   3009c:	69e0      	ldr	r0, [r4, #28]
   3009e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   300a2:	6023      	str	r3, [r4, #0]
   300a4:	6803      	ldr	r3, [r0, #0]
   300a6:	4632      	mov	r2, r6
   300a8:	689b      	ldr	r3, [r3, #8]
   300aa:	4669      	mov	r1, sp
   300ac:	4798      	blx	r3
   300ae:	f1b0 3fff 	cmp.w	r0, #4294967295
   300b2:	4680      	mov	r8, r0
   300b4:	d1e6      	bne.n	30084 <at_interface_read+0x68>
   300b6:	2523      	movs	r5, #35	; 0x23
   300b8:	e7e1      	b.n	3007e <at_interface_read+0x62>
   300ba:	2516      	movs	r5, #22
   300bc:	f04f 38ff 	mov.w	r8, #4294967295
   300c0:	e7dd      	b.n	3007e <at_interface_read+0x62>
   300c2:	bf00      	nop

000300c4 <at_interface_getopt>:
   300c4:	f005 befa 	b.w	35ebc <interface_socket_getopt>

000300c8 <at_interface_setopt>:
   300c8:	f005 beb6 	b.w	35e38 <interface_socket_setopt>

000300cc <rpc_at_event_handler>:
   300cc:	b570      	push	{r4, r5, r6, lr}
   300ce:	4606      	mov	r6, r0
   300d0:	b084      	sub	sp, #16
   300d2:	68c0      	ldr	r0, [r0, #12]
   300d4:	460d      	mov	r5, r1
   300d6:	f005 fe87 	bl	35de8 <interface_socket_from_handle_get>
   300da:	4604      	mov	r4, r0
   300dc:	b348      	cbz	r0, 30132 <rpc_at_event_handler+0x66>
   300de:	6803      	ldr	r3, [r0, #0]
   300e0:	b29b      	uxth	r3, r3
   300e2:	2b01      	cmp	r3, #1
   300e4:	d01f      	beq.n	30126 <rpc_at_event_handler+0x5a>
   300e6:	6803      	ldr	r3, [r0, #0]
   300e8:	b29b      	uxth	r3, r3
   300ea:	2b0d      	cmp	r3, #13
   300ec:	d029      	beq.n	30142 <rpc_at_event_handler+0x76>
   300ee:	6803      	ldr	r3, [r0, #0]
   300f0:	b29b      	uxth	r3, r3
   300f2:	2b02      	cmp	r3, #2
   300f4:	d02d      	beq.n	30152 <rpc_at_event_handler+0x86>
   300f6:	3d03      	subs	r5, #3
   300f8:	2d01      	cmp	r5, #1
   300fa:	d817      	bhi.n	3012c <rpc_at_event_handler+0x60>
   300fc:	2500      	movs	r5, #0
   300fe:	6873      	ldr	r3, [r6, #4]
   30100:	6832      	ldr	r2, [r6, #0]
   30102:	e9cd 5502 	strd	r5, r5, [sp, #8]
   30106:	e9cd 2300 	strd	r2, r3, [sp]
   3010a:	69e0      	ldr	r0, [r4, #28]
   3010c:	4669      	mov	r1, sp
   3010e:	6803      	ldr	r3, [r0, #0]
   30110:	685b      	ldr	r3, [r3, #4]
   30112:	4798      	blx	r3
   30114:	3001      	adds	r0, #1
   30116:	d019      	beq.n	3014c <rpc_at_event_handler+0x80>
   30118:	4628      	mov	r0, r5
   3011a:	6823      	ldr	r3, [r4, #0]
   3011c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   30120:	6023      	str	r3, [r4, #0]
   30122:	b004      	add	sp, #16
   30124:	bd70      	pop	{r4, r5, r6, pc}
   30126:	2d02      	cmp	r5, #2
   30128:	d1e5      	bne.n	300f6 <rpc_at_event_handler+0x2a>
   3012a:	6005      	str	r5, [r0, #0]
   3012c:	2000      	movs	r0, #0
   3012e:	b004      	add	sp, #16
   30130:	bd70      	pop	{r4, r5, r6, pc}
   30132:	6830      	ldr	r0, [r6, #0]
   30134:	2800      	cmp	r0, #0
   30136:	d0f9      	beq.n	3012c <rpc_at_event_handler+0x60>
   30138:	f004 f978 	bl	3442c <rpc_at_client_data_free>
   3013c:	4620      	mov	r0, r4
   3013e:	b004      	add	sp, #16
   30140:	bd70      	pop	{r4, r5, r6, pc}
   30142:	2d02      	cmp	r5, #2
   30144:	d1d7      	bne.n	300f6 <rpc_at_event_handler+0x2a>
   30146:	230e      	movs	r3, #14
   30148:	6003      	str	r3, [r0, #0]
   3014a:	e7ef      	b.n	3012c <rpc_at_event_handler+0x60>
   3014c:	2002      	movs	r0, #2
   3014e:	b004      	add	sp, #16
   30150:	bd70      	pop	{r4, r5, r6, pc}
   30152:	6803      	ldr	r3, [r0, #0]
   30154:	029b      	lsls	r3, r3, #10
   30156:	d5ce      	bpl.n	300f6 <rpc_at_event_handler+0x2a>
   30158:	2d02      	cmp	r5, #2
   3015a:	d1cc      	bne.n	300f6 <rpc_at_event_handler+0x2a>
   3015c:	6803      	ldr	r3, [r0, #0]
   3015e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   30162:	6003      	str	r3, [r0, #0]
   30164:	6803      	ldr	r3, [r0, #0]
   30166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3016a:	6003      	str	r3, [r0, #0]
   3016c:	e7de      	b.n	3012c <rpc_at_event_handler+0x60>
   3016e:	bf00      	nop

00030170 <dfu_client_event_handler>:
   30170:	f850 1b08 	ldr.w	r1, [r0], #8
   30174:	0c09      	lsrs	r1, r1, #16
   30176:	f001 b925 	b.w	313c4 <rpc_dfu_event_handler>
   3017a:	bf00      	nop

0003017c <rpc_dfu_client_init>:
   3017c:	4801      	ldr	r0, [pc, #4]	; (30184 <rpc_dfu_client_init+0x8>)
   3017e:	f005 bfa3 	b.w	360c8 <rpc_client_register>
   30182:	bf00      	nop
   30184:	00042684 	.word	0x00042684

00030188 <rpc_dfu_client_request_alloc>:
   30188:	2300      	movs	r3, #0
   3018a:	b510      	push	{r4, lr}
   3018c:	b082      	sub	sp, #8
   3018e:	9301      	str	r3, [sp, #4]
   30190:	b158      	cbz	r0, 301aa <rpc_dfu_client_request_alloc+0x22>
   30192:	4604      	mov	r4, r0
   30194:	aa01      	add	r2, sp, #4
   30196:	2006      	movs	r0, #6
   30198:	f006 f9ce 	bl	36538 <rpc_message_alloc>
   3019c:	b918      	cbnz	r0, 301a6 <rpc_dfu_client_request_alloc+0x1e>
   3019e:	9b01      	ldr	r3, [sp, #4]
   301a0:	b10b      	cbz	r3, 301a6 <rpc_dfu_client_request_alloc+0x1e>
   301a2:	3308      	adds	r3, #8
   301a4:	6023      	str	r3, [r4, #0]
   301a6:	b002      	add	sp, #8
   301a8:	bd10      	pop	{r4, pc}
   301aa:	2007      	movs	r0, #7
   301ac:	b002      	add	sp, #8
   301ae:	bd10      	pop	{r4, pc}

000301b0 <rpc_dfu_client_request_send>:
   301b0:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   301b4:	d10b      	bne.n	301ce <rpc_dfu_client_request_send+0x1e>
   301b6:	b160      	cbz	r0, 301d2 <rpc_dfu_client_request_send+0x22>
   301b8:	4603      	mov	r3, r0
   301ba:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   301be:	2006      	movs	r0, #6
   301c0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   301c4:	f843 1d08 	str.w	r1, [r3, #-8]!
   301c8:	4619      	mov	r1, r3
   301ca:	f006 b99d 	b.w	36508 <rpc_message_send>
   301ce:	200f      	movs	r0, #15
   301d0:	4770      	bx	lr
   301d2:	2007      	movs	r0, #7
   301d4:	4770      	bx	lr
   301d6:	bf00      	nop

000301d8 <rpc_dfu_client_message_free>:
   301d8:	b120      	cbz	r0, 301e4 <rpc_dfu_client_message_free+0xc>
   301da:	f1a0 0108 	sub.w	r1, r0, #8
   301de:	2006      	movs	r0, #6
   301e0:	f006 b9dc 	b.w	3659c <rpc_message_free>
   301e4:	2007      	movs	r0, #7
   301e6:	4770      	bx	lr

000301e8 <rpc_dfu_client_data_free>:
   301e8:	b118      	cbz	r0, 301f2 <rpc_dfu_client_data_free+0xa>
   301ea:	4601      	mov	r1, r0
   301ec:	2006      	movs	r0, #6
   301ee:	f006 bae7 	b.w	367c0 <rpc_message_data_free>
   301f2:	2007      	movs	r0, #7
   301f4:	4770      	bx	lr
   301f6:	bf00      	nop

000301f8 <mem_free>:
   301f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   301fc:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 302cc <mem_free+0xd4>
   30200:	b083      	sub	sp, #12
   30202:	9000      	str	r0, [sp, #0]
   30204:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   30208:	f8dc 3008 	ldr.w	r3, [ip, #8]
   3020c:	b12b      	cbz	r3, 3021a <mem_free+0x22>
   3020e:	f8dc 2000 	ldr.w	r2, [ip]
   30212:	9c00      	ldr	r4, [sp, #0]
   30214:	7810      	ldrb	r0, [r2, #0]
   30216:	42a0      	cmp	r0, r4
   30218:	d006      	beq.n	30228 <mem_free+0x30>
   3021a:	f10c 0c0c 	add.w	ip, ip, #12
   3021e:	45e3      	cmp	fp, ip
   30220:	d1f2      	bne.n	30208 <mem_free+0x10>
   30222:	b003      	add	sp, #12
   30224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30228:	f8dc a004 	ldr.w	sl, [ip, #4]
   3022c:	eb03 080a 	add.w	r8, r3, sl
   30230:	45c2      	cmp	sl, r8
   30232:	d2f2      	bcs.n	3021a <mem_free+0x22>
   30234:	6853      	ldr	r3, [r2, #4]
   30236:	f8cd c004 	str.w	ip, [sp, #4]
   3023a:	46d6      	mov	lr, sl
   3023c:	469c      	mov	ip, r3
   3023e:	f8d2 9010 	ldr.w	r9, [r2, #16]
   30242:	8997      	ldrh	r7, [r2, #12]
   30244:	ebae 000a 	sub.w	r0, lr, sl
   30248:	b3df      	cbz	r7, 302c2 <mem_free+0xca>
   3024a:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   3024e:	4290      	cmp	r0, r2
   30250:	d31c      	bcc.n	3028c <mem_free+0x94>
   30252:	4665      	mov	r5, ip
   30254:	2400      	movs	r4, #0
   30256:	f109 0304 	add.w	r3, r9, #4
   3025a:	e003      	b.n	30264 <mem_free+0x6c>
   3025c:	885a      	ldrh	r2, [r3, #2]
   3025e:	3304      	adds	r3, #4
   30260:	4282      	cmp	r2, r0
   30262:	d815      	bhi.n	30290 <mem_free+0x98>
   30264:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   30268:	3401      	adds	r4, #1
   3026a:	42a7      	cmp	r7, r4
   3026c:	fb02 5506 	mla	r5, r2, r6, r5
   30270:	eba0 0002 	sub.w	r0, r0, r2
   30274:	461e      	mov	r6, r3
   30276:	d1f1      	bne.n	3025c <mem_free+0x64>
   30278:	2000      	movs	r0, #0
   3027a:	4281      	cmp	r1, r0
   3027c:	d00d      	beq.n	3029a <mem_free+0xa2>
   3027e:	f10e 0e01 	add.w	lr, lr, #1
   30282:	45f0      	cmp	r8, lr
   30284:	d1de      	bne.n	30244 <mem_free+0x4c>
   30286:	f8dd c004 	ldr.w	ip, [sp, #4]
   3028a:	e7c6      	b.n	3021a <mem_free+0x22>
   3028c:	4665      	mov	r5, ip
   3028e:	464e      	mov	r6, r9
   30290:	8833      	ldrh	r3, [r6, #0]
   30292:	fb00 5003 	mla	r0, r0, r3, r5
   30296:	4281      	cmp	r1, r0
   30298:	d1f1      	bne.n	3027e <mem_free+0x86>
   3029a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   3029e:	f8dd c004 	ldr.w	ip, [sp, #4]
   302a2:	d0ba      	beq.n	3021a <mem_free+0x22>
   302a4:	2301      	movs	r3, #1
   302a6:	4a08      	ldr	r2, [pc, #32]	; (302c8 <mem_free+0xd0>)
   302a8:	ea4f 115e 	mov.w	r1, lr, lsr #5
   302ac:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   302b0:	f00e 0e1f 	and.w	lr, lr, #31
   302b4:	fa03 fe0e 	lsl.w	lr, r3, lr
   302b8:	ea4e 0000 	orr.w	r0, lr, r0
   302bc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   302c0:	e7af      	b.n	30222 <mem_free+0x2a>
   302c2:	4638      	mov	r0, r7
   302c4:	e7d9      	b.n	3027a <mem_free+0x82>
   302c6:	bf00      	nop
   302c8:	200249c4 	.word	0x200249c4
   302cc:	20024a08 	.word	0x20024a08

000302d0 <mem_alloc.constprop.5>:
   302d0:	2800      	cmp	r0, #0
   302d2:	d050      	beq.n	30376 <mem_alloc.constprop.5+0xa6>
   302d4:	4b6d      	ldr	r3, [pc, #436]	; (3048c <mem_alloc.constprop.5+0x1bc>)
   302d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   302da:	4290      	cmp	r0, r2
   302dc:	d84b      	bhi.n	30376 <mem_alloc.constprop.5+0xa6>
   302de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   302e2:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   302e6:	b083      	sub	sp, #12
   302e8:	f1bb 0f00 	cmp.w	fp, #0
   302ec:	d054      	beq.n	30398 <mem_alloc.constprop.5+0xc8>
   302ee:	f10b 32ff 	add.w	r2, fp, #4294967295
   302f2:	4691      	mov	r9, r2
   302f4:	2600      	movs	r6, #0
   302f6:	f04f 0812 	mov.w	r8, #18
   302fa:	4f65      	ldr	r7, [pc, #404]	; (30490 <mem_alloc.constprop.5+0x1c0>)
   302fc:	9201      	str	r2, [sp, #4]
   302fe:	f10b 0e11 	add.w	lr, fp, #17
   30302:	eb06 0209 	add.w	r2, r6, r9
   30306:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   3030a:	3201      	adds	r2, #1
   3030c:	0852      	lsrs	r2, r2, #1
   3030e:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   30312:	f102 0112 	add.w	r1, r2, #18
   30316:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   3031a:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   3031e:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   30322:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   30326:	f8dc c004 	ldr.w	ip, [ip, #4]
   3032a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   3032e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   30332:	f8da a010 	ldr.w	sl, [sl, #16]
   30336:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   3033a:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   3033e:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   30342:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   30346:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   3034a:	6849      	ldr	r1, [r1, #4]
   3034c:	692d      	ldr	r5, [r5, #16]
   3034e:	6924      	ldr	r4, [r4, #16]
   30350:	f8dc c004 	ldr.w	ip, [ip, #4]
   30354:	4550      	cmp	r0, sl
   30356:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   3035a:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   3035e:	d915      	bls.n	3038c <mem_alloc.constprop.5+0xbc>
   30360:	4288      	cmp	r0, r1
   30362:	d211      	bcs.n	30388 <mem_alloc.constprop.5+0xb8>
   30364:	42a8      	cmp	r0, r5
   30366:	d908      	bls.n	3037a <mem_alloc.constprop.5+0xaa>
   30368:	1c56      	adds	r6, r2, #1
   3036a:	45b1      	cmp	r9, r6
   3036c:	f0c0 8087 	bcc.w	3047e <mem_alloc.constprop.5+0x1ae>
   30370:	f102 0813 	add.w	r8, r2, #19
   30374:	e7c5      	b.n	30302 <mem_alloc.constprop.5+0x32>
   30376:	2000      	movs	r0, #0
   30378:	4770      	bx	lr
   3037a:	f102 39ff 	add.w	r9, r2, #4294967295
   3037e:	454e      	cmp	r6, r9
   30380:	d87d      	bhi.n	3047e <mem_alloc.constprop.5+0x1ae>
   30382:	f102 0e11 	add.w	lr, r2, #17
   30386:	e7bc      	b.n	30302 <mem_alloc.constprop.5+0x32>
   30388:	f109 0601 	add.w	r6, r9, #1
   3038c:	45b3      	cmp	fp, r6
   3038e:	d007      	beq.n	303a0 <mem_alloc.constprop.5+0xd0>
   30390:	2e10      	cmp	r6, #16
   30392:	d001      	beq.n	30398 <mem_alloc.constprop.5+0xc8>
   30394:	45b3      	cmp	fp, r6
   30396:	d808      	bhi.n	303aa <mem_alloc.constprop.5+0xda>
   30398:	2000      	movs	r0, #0
   3039a:	b003      	add	sp, #12
   3039c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   303a0:	9a01      	ldr	r2, [sp, #4]
   303a2:	2a10      	cmp	r2, #16
   303a4:	bf18      	it	ne
   303a6:	4616      	movne	r6, r2
   303a8:	d0f6      	beq.n	30398 <mem_alloc.constprop.5+0xc8>
   303aa:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 30494 <mem_alloc.constprop.5+0x1c4>
   303ae:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   303b2:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   303b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   303ba:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   303be:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   303c2:	f8d2 e004 	ldr.w	lr, [r2, #4]
   303c6:	691d      	ldr	r5, [r3, #16]
   303c8:	2c00      	cmp	r4, #0
   303ca:	d056      	beq.n	3047a <mem_alloc.constprop.5+0x1aa>
   303cc:	462a      	mov	r2, r5
   303ce:	4670      	mov	r0, lr
   303d0:	00a4      	lsls	r4, r4, #2
   303d2:	eb05 0904 	add.w	r9, r5, r4
   303d6:	8851      	ldrh	r1, [r2, #2]
   303d8:	3204      	adds	r2, #4
   303da:	4591      	cmp	r9, r2
   303dc:	4408      	add	r0, r1
   303de:	d1fa      	bne.n	303d6 <mem_alloc.constprop.5+0x106>
   303e0:	1929      	adds	r1, r5, r4
   303e2:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   303e6:	4482      	add	sl, r0
   303e8:	4582      	cmp	sl, r0
   303ea:	d918      	bls.n	3041e <mem_alloc.constprop.5+0x14e>
   303ec:	0941      	lsrs	r1, r0, #5
   303ee:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   303f2:	f000 041f 	and.w	r4, r0, #31
   303f6:	fa22 f904 	lsr.w	r9, r2, r4
   303fa:	f019 0f01 	tst.w	r9, #1
   303fe:	d007      	beq.n	30410 <mem_alloc.constprop.5+0x140>
   30400:	e013      	b.n	3042a <mem_alloc.constprop.5+0x15a>
   30402:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   30406:	fa22 f904 	lsr.w	r9, r2, r4
   3040a:	f019 0f01 	tst.w	r9, #1
   3040e:	d10c      	bne.n	3042a <mem_alloc.constprop.5+0x15a>
   30410:	3001      	adds	r0, #1
   30412:	4582      	cmp	sl, r0
   30414:	ea4f 1150 	mov.w	r1, r0, lsr #5
   30418:	f000 041f 	and.w	r4, r0, #31
   3041c:	d1f1      	bne.n	30402 <mem_alloc.constprop.5+0x132>
   3041e:	3601      	adds	r6, #1
   30420:	455e      	cmp	r6, fp
   30422:	f108 0808 	add.w	r8, r8, #8
   30426:	d3c4      	bcc.n	303b2 <mem_alloc.constprop.5+0xe2>
   30428:	e7b6      	b.n	30398 <mem_alloc.constprop.5+0xc8>
   3042a:	2601      	movs	r6, #1
   3042c:	fa06 f404 	lsl.w	r4, r6, r4
   30430:	899e      	ldrh	r6, [r3, #12]
   30432:	ea22 0204 	bic.w	r2, r2, r4
   30436:	eba0 000e 	sub.w	r0, r0, lr
   3043a:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   3043e:	685c      	ldr	r4, [r3, #4]
   30440:	2e00      	cmp	r6, #0
   30442:	d0a9      	beq.n	30398 <mem_alloc.constprop.5+0xc8>
   30444:	886a      	ldrh	r2, [r5, #2]
   30446:	4282      	cmp	r2, r0
   30448:	d811      	bhi.n	3046e <mem_alloc.constprop.5+0x19e>
   3044a:	2100      	movs	r1, #0
   3044c:	1d2b      	adds	r3, r5, #4
   3044e:	e003      	b.n	30458 <mem_alloc.constprop.5+0x188>
   30450:	885a      	ldrh	r2, [r3, #2]
   30452:	3304      	adds	r3, #4
   30454:	4282      	cmp	r2, r0
   30456:	d80a      	bhi.n	3046e <mem_alloc.constprop.5+0x19e>
   30458:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   3045c:	3101      	adds	r1, #1
   3045e:	428e      	cmp	r6, r1
   30460:	fb02 4405 	mla	r4, r2, r5, r4
   30464:	eba0 0002 	sub.w	r0, r0, r2
   30468:	461d      	mov	r5, r3
   3046a:	d1f1      	bne.n	30450 <mem_alloc.constprop.5+0x180>
   3046c:	e794      	b.n	30398 <mem_alloc.constprop.5+0xc8>
   3046e:	882b      	ldrh	r3, [r5, #0]
   30470:	fb00 4003 	mla	r0, r0, r3, r4
   30474:	b003      	add	sp, #12
   30476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3047a:	4670      	mov	r0, lr
   3047c:	e7b0      	b.n	303e0 <mem_alloc.constprop.5+0x110>
   3047e:	f1bb 0f10 	cmp.w	fp, #16
   30482:	bf08      	it	eq
   30484:	260f      	moveq	r6, #15
   30486:	d090      	beq.n	303aa <mem_alloc.constprop.5+0xda>
   30488:	e786      	b.n	30398 <mem_alloc.constprop.5+0xc8>
   3048a:	bf00      	nop
   3048c:	20024a44 	.word	0x20024a44
   30490:	20024a08 	.word	0x20024a08
   30494:	200249c4 	.word	0x200249c4

00030498 <mem_alloc.constprop.4>:
   30498:	2800      	cmp	r0, #0
   3049a:	d04c      	beq.n	30536 <mem_alloc.constprop.4+0x9e>
   3049c:	4b6b      	ldr	r3, [pc, #428]	; (3064c <mem_alloc.constprop.4+0x1b4>)
   3049e:	681a      	ldr	r2, [r3, #0]
   304a0:	4290      	cmp	r0, r2
   304a2:	d848      	bhi.n	30536 <mem_alloc.constprop.4+0x9e>
   304a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   304a8:	685f      	ldr	r7, [r3, #4]
   304aa:	b083      	sub	sp, #12
   304ac:	9700      	str	r7, [sp, #0]
   304ae:	2f00      	cmp	r7, #0
   304b0:	d051      	beq.n	30556 <mem_alloc.constprop.4+0xbe>
   304b2:	1e7a      	subs	r2, r7, #1
   304b4:	4696      	mov	lr, r2
   304b6:	2100      	movs	r1, #0
   304b8:	f04f 0c01 	mov.w	ip, #1
   304bc:	4c64      	ldr	r4, [pc, #400]	; (30650 <mem_alloc.constprop.4+0x1b8>)
   304be:	9201      	str	r2, [sp, #4]
   304c0:	eb01 020e 	add.w	r2, r1, lr
   304c4:	3201      	adds	r2, #1
   304c6:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   304ca:	0852      	lsrs	r2, r2, #1
   304cc:	f102 0801 	add.w	r8, r2, #1
   304d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   304d4:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   304d8:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   304dc:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   304e0:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   304e4:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   304e8:	f8d9 9004 	ldr.w	r9, [r9, #4]
   304ec:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   304f0:	f8da a010 	ldr.w	sl, [sl, #16]
   304f4:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   304f8:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   304fc:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   30500:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   30504:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   30508:	6936      	ldr	r6, [r6, #16]
   3050a:	f8db b004 	ldr.w	fp, [fp, #4]
   3050e:	692d      	ldr	r5, [r5, #16]
   30510:	f8d9 9004 	ldr.w	r9, [r9, #4]
   30514:	4550      	cmp	r0, sl
   30516:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   3051a:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   3051e:	d913      	bls.n	30548 <mem_alloc.constprop.4+0xb0>
   30520:	42a8      	cmp	r0, r5
   30522:	d210      	bcs.n	30546 <mem_alloc.constprop.4+0xae>
   30524:	42b0      	cmp	r0, r6
   30526:	d908      	bls.n	3053a <mem_alloc.constprop.4+0xa2>
   30528:	45c6      	cmp	lr, r8
   3052a:	4641      	mov	r1, r8
   3052c:	f0c0 8087 	bcc.w	3063e <mem_alloc.constprop.4+0x1a6>
   30530:	f108 0c01 	add.w	ip, r8, #1
   30534:	e7c4      	b.n	304c0 <mem_alloc.constprop.4+0x28>
   30536:	2000      	movs	r0, #0
   30538:	4770      	bx	lr
   3053a:	f102 3eff 	add.w	lr, r2, #4294967295
   3053e:	4571      	cmp	r1, lr
   30540:	d87d      	bhi.n	3063e <mem_alloc.constprop.4+0x1a6>
   30542:	4617      	mov	r7, r2
   30544:	e7bc      	b.n	304c0 <mem_alloc.constprop.4+0x28>
   30546:	4639      	mov	r1, r7
   30548:	9a00      	ldr	r2, [sp, #0]
   3054a:	428a      	cmp	r2, r1
   3054c:	d007      	beq.n	3055e <mem_alloc.constprop.4+0xc6>
   3054e:	2910      	cmp	r1, #16
   30550:	d001      	beq.n	30556 <mem_alloc.constprop.4+0xbe>
   30552:	428a      	cmp	r2, r1
   30554:	d808      	bhi.n	30568 <mem_alloc.constprop.4+0xd0>
   30556:	2000      	movs	r0, #0
   30558:	b003      	add	sp, #12
   3055a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3055e:	9a01      	ldr	r2, [sp, #4]
   30560:	2a10      	cmp	r2, #16
   30562:	bf18      	it	ne
   30564:	4611      	movne	r1, r2
   30566:	d0f6      	beq.n	30556 <mem_alloc.constprop.4+0xbe>
   30568:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 30654 <mem_alloc.constprop.4+0x1bc>
   3056c:	f8dd 9000 	ldr.w	r9, [sp]
   30570:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   30574:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   30578:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   3057c:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   30580:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   30584:	f8d2 e004 	ldr.w	lr, [r2, #4]
   30588:	691f      	ldr	r7, [r3, #16]
   3058a:	2e00      	cmp	r6, #0
   3058c:	d055      	beq.n	3063a <mem_alloc.constprop.4+0x1a2>
   3058e:	463a      	mov	r2, r7
   30590:	4670      	mov	r0, lr
   30592:	00b6      	lsls	r6, r6, #2
   30594:	eb07 0a06 	add.w	sl, r7, r6
   30598:	8855      	ldrh	r5, [r2, #2]
   3059a:	3204      	adds	r2, #4
   3059c:	4592      	cmp	sl, r2
   3059e:	4428      	add	r0, r5
   305a0:	d1fa      	bne.n	30598 <mem_alloc.constprop.4+0x100>
   305a2:	19bd      	adds	r5, r7, r6
   305a4:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   305a8:	4483      	add	fp, r0
   305aa:	4583      	cmp	fp, r0
   305ac:	d918      	bls.n	305e0 <mem_alloc.constprop.4+0x148>
   305ae:	0945      	lsrs	r5, r0, #5
   305b0:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   305b4:	f000 061f 	and.w	r6, r0, #31
   305b8:	fa22 fa06 	lsr.w	sl, r2, r6
   305bc:	f01a 0f01 	tst.w	sl, #1
   305c0:	d007      	beq.n	305d2 <mem_alloc.constprop.4+0x13a>
   305c2:	e013      	b.n	305ec <mem_alloc.constprop.4+0x154>
   305c4:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   305c8:	fa22 fa06 	lsr.w	sl, r2, r6
   305cc:	f01a 0f01 	tst.w	sl, #1
   305d0:	d10c      	bne.n	305ec <mem_alloc.constprop.4+0x154>
   305d2:	3001      	adds	r0, #1
   305d4:	4583      	cmp	fp, r0
   305d6:	ea4f 1550 	mov.w	r5, r0, lsr #5
   305da:	f000 061f 	and.w	r6, r0, #31
   305de:	d1f1      	bne.n	305c4 <mem_alloc.constprop.4+0x12c>
   305e0:	3101      	adds	r1, #1
   305e2:	4549      	cmp	r1, r9
   305e4:	f108 0808 	add.w	r8, r8, #8
   305e8:	d3c4      	bcc.n	30574 <mem_alloc.constprop.4+0xdc>
   305ea:	e7b4      	b.n	30556 <mem_alloc.constprop.4+0xbe>
   305ec:	2101      	movs	r1, #1
   305ee:	40b1      	lsls	r1, r6
   305f0:	899e      	ldrh	r6, [r3, #12]
   305f2:	ea22 0201 	bic.w	r2, r2, r1
   305f6:	eba0 000e 	sub.w	r0, r0, lr
   305fa:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   305fe:	685c      	ldr	r4, [r3, #4]
   30600:	2e00      	cmp	r6, #0
   30602:	d0a8      	beq.n	30556 <mem_alloc.constprop.4+0xbe>
   30604:	887a      	ldrh	r2, [r7, #2]
   30606:	4282      	cmp	r2, r0
   30608:	d811      	bhi.n	3062e <mem_alloc.constprop.4+0x196>
   3060a:	2100      	movs	r1, #0
   3060c:	1d3b      	adds	r3, r7, #4
   3060e:	e003      	b.n	30618 <mem_alloc.constprop.4+0x180>
   30610:	885a      	ldrh	r2, [r3, #2]
   30612:	3304      	adds	r3, #4
   30614:	4282      	cmp	r2, r0
   30616:	d80a      	bhi.n	3062e <mem_alloc.constprop.4+0x196>
   30618:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   3061c:	3101      	adds	r1, #1
   3061e:	428e      	cmp	r6, r1
   30620:	eba0 0002 	sub.w	r0, r0, r2
   30624:	fb02 4405 	mla	r4, r2, r5, r4
   30628:	461f      	mov	r7, r3
   3062a:	d1f1      	bne.n	30610 <mem_alloc.constprop.4+0x178>
   3062c:	e793      	b.n	30556 <mem_alloc.constprop.4+0xbe>
   3062e:	883b      	ldrh	r3, [r7, #0]
   30630:	fb00 4003 	mla	r0, r0, r3, r4
   30634:	b003      	add	sp, #12
   30636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3063a:	4670      	mov	r0, lr
   3063c:	e7b1      	b.n	305a2 <mem_alloc.constprop.4+0x10a>
   3063e:	9a00      	ldr	r2, [sp, #0]
   30640:	2a10      	cmp	r2, #16
   30642:	bf08      	it	eq
   30644:	210f      	moveq	r1, #15
   30646:	d08f      	beq.n	30568 <mem_alloc.constprop.4+0xd0>
   30648:	e785      	b.n	30556 <mem_alloc.constprop.4+0xbe>
   3064a:	bf00      	nop
   3064c:	20024a44 	.word	0x20024a44
   30650:	20024a08 	.word	0x20024a08
   30654:	200249c4 	.word	0x200249c4

00030658 <nrf_mem_init>:
   30658:	b570      	push	{r4, r5, r6, lr}
   3065a:	2200      	movs	r2, #0
   3065c:	2501      	movs	r5, #1
   3065e:	4833      	ldr	r0, [pc, #204]	; (3072c <nrf_mem_init+0xd4>)
   30660:	0951      	lsrs	r1, r2, #5
   30662:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   30666:	f002 031f 	and.w	r3, r2, #31
   3066a:	fa05 f303 	lsl.w	r3, r5, r3
   3066e:	3201      	adds	r2, #1
   30670:	4323      	orrs	r3, r4
   30672:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   30676:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   3067a:	d1f1      	bne.n	30660 <nrf_mem_init+0x8>
   3067c:	2400      	movs	r4, #0
   3067e:	4b2c      	ldr	r3, [pc, #176]	; (30730 <nrf_mem_init+0xd8>)
   30680:	4621      	mov	r1, r4
   30682:	223c      	movs	r2, #60	; 0x3c
   30684:	482b      	ldr	r0, [pc, #172]	; (30734 <nrf_mem_init+0xdc>)
   30686:	601c      	str	r4, [r3, #0]
   30688:	f00f ffe8 	bl	4065c <memset>
   3068c:	2110      	movs	r1, #16
   3068e:	2205      	movs	r2, #5
   30690:	4b29      	ldr	r3, [pc, #164]	; (30738 <nrf_mem_init+0xe0>)
   30692:	4e2a      	ldr	r6, [pc, #168]	; (3073c <nrf_mem_init+0xe4>)
   30694:	e9c3 4400 	strd	r4, r4, [r3]
   30698:	60d9      	str	r1, [r3, #12]
   3069a:	6159      	str	r1, [r3, #20]
   3069c:	61d9      	str	r1, [r3, #28]
   3069e:	6259      	str	r1, [r3, #36]	; 0x24
   306a0:	62d9      	str	r1, [r3, #44]	; 0x2c
   306a2:	6359      	str	r1, [r3, #52]	; 0x34
   306a4:	63d9      	str	r1, [r3, #60]	; 0x3c
   306a6:	6459      	str	r1, [r3, #68]	; 0x44
   306a8:	64d9      	str	r1, [r3, #76]	; 0x4c
   306aa:	6559      	str	r1, [r3, #84]	; 0x54
   306ac:	65d9      	str	r1, [r3, #92]	; 0x5c
   306ae:	6659      	str	r1, [r3, #100]	; 0x64
   306b0:	66d9      	str	r1, [r3, #108]	; 0x6c
   306b2:	6759      	str	r1, [r3, #116]	; 0x74
   306b4:	67d9      	str	r1, [r3, #124]	; 0x7c
   306b6:	609a      	str	r2, [r3, #8]
   306b8:	611a      	str	r2, [r3, #16]
   306ba:	619a      	str	r2, [r3, #24]
   306bc:	621a      	str	r2, [r3, #32]
   306be:	629a      	str	r2, [r3, #40]	; 0x28
   306c0:	631a      	str	r2, [r3, #48]	; 0x30
   306c2:	639a      	str	r2, [r3, #56]	; 0x38
   306c4:	641a      	str	r2, [r3, #64]	; 0x40
   306c6:	649a      	str	r2, [r3, #72]	; 0x48
   306c8:	651a      	str	r2, [r3, #80]	; 0x50
   306ca:	659a      	str	r2, [r3, #88]	; 0x58
   306cc:	661a      	str	r2, [r3, #96]	; 0x60
   306ce:	669a      	str	r2, [r3, #104]	; 0x68
   306d0:	671a      	str	r2, [r3, #112]	; 0x70
   306d2:	679a      	str	r2, [r3, #120]	; 0x78
   306d4:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   306d8:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   306dc:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   306e0:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   306e4:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   306e8:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   306ec:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   306f0:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   306f4:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   306f8:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   306fc:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   30700:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   30704:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   30708:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   3070c:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   30710:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   30714:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   30718:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3071c:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   30720:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   30724:	4620      	mov	r0, r4
   30726:	7035      	strb	r5, [r6, #0]
   30728:	bd70      	pop	{r4, r5, r6, pc}
   3072a:	bf00      	nop
   3072c:	200249c4 	.word	0x200249c4
   30730:	20024a04 	.word	0x20024a04
   30734:	20024a08 	.word	0x20024a08
   30738:	20024a44 	.word	0x20024a44
   3073c:	2002bd3f 	.word	0x2002bd3f

00030740 <nrf_mem_register>:
   30740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30744:	4b87      	ldr	r3, [pc, #540]	; (30964 <nrf_mem_register+0x224>)
   30746:	b087      	sub	sp, #28
   30748:	781b      	ldrb	r3, [r3, #0]
   3074a:	2b00      	cmp	r3, #0
   3074c:	f000 808c 	beq.w	30868 <nrf_mem_register+0x128>
   30750:	b328      	cbz	r0, 3079e <nrf_mem_register+0x5e>
   30752:	b321      	cbz	r1, 3079e <nrf_mem_register+0x5e>
   30754:	780b      	ldrb	r3, [r1, #0]
   30756:	f8df 8218 	ldr.w	r8, [pc, #536]	; 30970 <nrf_mem_register+0x230>
   3075a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   3075e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   30762:	685b      	ldr	r3, [r3, #4]
   30764:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   30768:	4463      	add	r3, ip
   3076a:	2b10      	cmp	r3, #16
   3076c:	d811      	bhi.n	30792 <nrf_mem_register+0x52>
   3076e:	f04f 0a00 	mov.w	sl, #0
   30772:	4689      	mov	r9, r1
   30774:	4b7c      	ldr	r3, [pc, #496]	; (30968 <nrf_mem_register+0x228>)
   30776:	4f7d      	ldr	r7, [pc, #500]	; (3096c <nrf_mem_register+0x22c>)
   30778:	681b      	ldr	r3, [r3, #0]
   3077a:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   3077e:	9300      	str	r3, [sp, #0]
   30780:	68b9      	ldr	r1, [r7, #8]
   30782:	b191      	cbz	r1, 307aa <nrf_mem_register+0x6a>
   30784:	f10a 0a01 	add.w	sl, sl, #1
   30788:	f1ba 0f05 	cmp.w	sl, #5
   3078c:	f107 070c 	add.w	r7, r7, #12
   30790:	d1f6      	bne.n	30780 <nrf_mem_register+0x40>
   30792:	f248 1b07 	movw	fp, #33031	; 0x8107
   30796:	4658      	mov	r0, fp
   30798:	b007      	add	sp, #28
   3079a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3079e:	f248 1b0e 	movw	fp, #33038	; 0x810e
   307a2:	4658      	mov	r0, fp
   307a4:	b007      	add	sp, #28
   307a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   307aa:	f1bc 0f00 	cmp.w	ip, #0
   307ae:	d061      	beq.n	30874 <nrf_mem_register+0x134>
   307b0:	460d      	mov	r5, r1
   307b2:	460c      	mov	r4, r1
   307b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   307b8:	eb0e 0b03 	add.w	fp, lr, r3
   307bc:	885a      	ldrh	r2, [r3, #2]
   307be:	f833 6b04 	ldrh.w	r6, [r3], #4
   307c2:	4415      	add	r5, r2
   307c4:	459b      	cmp	fp, r3
   307c6:	fb02 4406 	mla	r4, r2, r6, r4
   307ca:	d1f7      	bne.n	307bc <nrf_mem_register+0x7c>
   307cc:	f8d9 3008 	ldr.w	r3, [r9, #8]
   307d0:	42a3      	cmp	r3, r4
   307d2:	d3d7      	bcc.n	30784 <nrf_mem_register+0x44>
   307d4:	9b00      	ldr	r3, [sp, #0]
   307d6:	442b      	add	r3, r5
   307d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   307dc:	d2d2      	bcs.n	30784 <nrf_mem_register+0x44>
   307de:	4c63      	ldr	r4, [pc, #396]	; (3096c <nrf_mem_register+0x22c>)
   307e0:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   307e4:	0092      	lsls	r2, r2, #2
   307e6:	f8c0 a000 	str.w	sl, [r0]
   307ea:	18a0      	adds	r0, r4, r2
   307ec:	f844 9002 	str.w	r9, [r4, r2]
   307f0:	9a00      	ldr	r2, [sp, #0]
   307f2:	468b      	mov	fp, r1
   307f4:	e9c0 2501 	strd	r2, r5, [r0, #4]
   307f8:	f899 2001 	ldrb.w	r2, [r9, #1]
   307fc:	485a      	ldr	r0, [pc, #360]	; (30968 <nrf_mem_register+0x228>)
   307fe:	2a01      	cmp	r2, #1
   30800:	6003      	str	r3, [r0, #0]
   30802:	d0c8      	beq.n	30796 <nrf_mem_register+0x56>
   30804:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   30808:	2b00      	cmp	r3, #0
   3080a:	d0c4      	beq.n	30796 <nrf_mem_register+0x56>
   3080c:	2500      	movs	r5, #0
   3080e:	f8cd 9004 	str.w	r9, [sp, #4]
   30812:	f8cd a00c 	str.w	sl, [sp, #12]
   30816:	f8cd b014 	str.w	fp, [sp, #20]
   3081a:	9b01      	ldr	r3, [sp, #4]
   3081c:	781f      	ldrb	r7, [r3, #0]
   3081e:	691a      	ldr	r2, [r3, #16]
   30820:	013b      	lsls	r3, r7, #4
   30822:	eb03 0907 	add.w	r9, r3, r7
   30826:	9300      	str	r3, [sp, #0]
   30828:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   3082c:	6859      	ldr	r1, [r3, #4]
   3082e:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   30832:	9102      	str	r1, [sp, #8]
   30834:	bb39      	cbnz	r1, 30886 <nrf_mem_register+0x146>
   30836:	9a03      	ldr	r2, [sp, #12]
   30838:	60dd      	str	r5, [r3, #12]
   3083a:	609a      	str	r2, [r3, #8]
   3083c:	9b00      	ldr	r3, [sp, #0]
   3083e:	443b      	add	r3, r7
   30840:	461f      	mov	r7, r3
   30842:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   30846:	684b      	ldr	r3, [r1, #4]
   30848:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   3084c:	3301      	adds	r3, #1
   3084e:	4294      	cmp	r4, r2
   30850:	604b      	str	r3, [r1, #4]
   30852:	d912      	bls.n	3087a <nrf_mem_register+0x13a>
   30854:	9b01      	ldr	r3, [sp, #4]
   30856:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   3085a:	899b      	ldrh	r3, [r3, #12]
   3085c:	3501      	adds	r5, #1
   3085e:	429d      	cmp	r5, r3
   30860:	d3db      	bcc.n	3081a <nrf_mem_register+0xda>
   30862:	f8dd b014 	ldr.w	fp, [sp, #20]
   30866:	e796      	b.n	30796 <nrf_mem_register+0x56>
   30868:	f248 1b08 	movw	fp, #33032	; 0x8108
   3086c:	4658      	mov	r0, fp
   3086e:	b007      	add	sp, #28
   30870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30874:	9b00      	ldr	r3, [sp, #0]
   30876:	4665      	mov	r5, ip
   30878:	e7ae      	b.n	307d8 <nrf_mem_register+0x98>
   3087a:	9b01      	ldr	r3, [sp, #4]
   3087c:	3501      	adds	r5, #1
   3087e:	899b      	ldrh	r3, [r3, #12]
   30880:	42ab      	cmp	r3, r5
   30882:	d8ca      	bhi.n	3081a <nrf_mem_register+0xda>
   30884:	e7ed      	b.n	30862 <nrf_mem_register+0x122>
   30886:	2600      	movs	r6, #0
   30888:	f101 3aff 	add.w	sl, r1, #4294967295
   3088c:	9504      	str	r5, [sp, #16]
   3088e:	eb06 000a 	add.w	r0, r6, sl
   30892:	eb09 0206 	add.w	r2, r9, r6
   30896:	3201      	adds	r2, #1
   30898:	3001      	adds	r0, #1
   3089a:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   3089e:	0840      	lsrs	r0, r0, #1
   308a0:	4d32      	ldr	r5, [pc, #200]	; (3096c <nrf_mem_register+0x22c>)
   308a2:	eb09 0100 	add.w	r1, r9, r0
   308a6:	eb09 030a 	add.w	r3, r9, sl
   308aa:	3101      	adds	r1, #1
   308ac:	3301      	adds	r3, #1
   308ae:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   308b2:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   308b6:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   308ba:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   308be:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   308c2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   308c6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   308ca:	f8db b010 	ldr.w	fp, [fp, #16]
   308ce:	6852      	ldr	r2, [r2, #4]
   308d0:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   308d4:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   308d8:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   308dc:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   308e0:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   308e4:	f8de e010 	ldr.w	lr, [lr, #16]
   308e8:	6849      	ldr	r1, [r1, #4]
   308ea:	f8dc c010 	ldr.w	ip, [ip, #16]
   308ee:	685b      	ldr	r3, [r3, #4]
   308f0:	4294      	cmp	r4, r2
   308f2:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   308f6:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   308fa:	d92d      	bls.n	30958 <nrf_mem_register+0x218>
   308fc:	429c      	cmp	r4, r3
   308fe:	d22d      	bcs.n	3095c <nrf_mem_register+0x21c>
   30900:	428c      	cmp	r4, r1
   30902:	d924      	bls.n	3094e <nrf_mem_register+0x20e>
   30904:	1c46      	adds	r6, r0, #1
   30906:	45b2      	cmp	sl, r6
   30908:	d2c1      	bcs.n	3088e <nrf_mem_register+0x14e>
   3090a:	2610      	movs	r6, #16
   3090c:	9d04      	ldr	r5, [sp, #16]
   3090e:	9a02      	ldr	r2, [sp, #8]
   30910:	42b2      	cmp	r2, r6
   30912:	d911      	bls.n	30938 <nrf_mem_register+0x1f8>
   30914:	9b00      	ldr	r3, [sp, #0]
   30916:	443b      	add	r3, r7
   30918:	441a      	add	r2, r3
   3091a:	4433      	add	r3, r6
   3091c:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   30920:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   30924:	2208      	movs	r2, #8
   30926:	4651      	mov	r1, sl
   30928:	eb0a 0002 	add.w	r0, sl, r2
   3092c:	f1aa 0a08 	sub.w	sl, sl, #8
   30930:	f00f fe74 	bl	4061c <memcpy>
   30934:	45d1      	cmp	r9, sl
   30936:	d1f5      	bne.n	30924 <nrf_mem_register+0x1e4>
   30938:	9b00      	ldr	r3, [sp, #0]
   3093a:	9903      	ldr	r1, [sp, #12]
   3093c:	443b      	add	r3, r7
   3093e:	4433      	add	r3, r6
   30940:	3301      	adds	r3, #1
   30942:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   30946:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   3094a:	6055      	str	r5, [r2, #4]
   3094c:	e776      	b.n	3083c <nrf_mem_register+0xfc>
   3094e:	f100 3aff 	add.w	sl, r0, #4294967295
   30952:	4556      	cmp	r6, sl
   30954:	d99b      	bls.n	3088e <nrf_mem_register+0x14e>
   30956:	e7d8      	b.n	3090a <nrf_mem_register+0x1ca>
   30958:	9d04      	ldr	r5, [sp, #16]
   3095a:	e7d8      	b.n	3090e <nrf_mem_register+0x1ce>
   3095c:	9d04      	ldr	r5, [sp, #16]
   3095e:	f10a 0601 	add.w	r6, sl, #1
   30962:	e7d4      	b.n	3090e <nrf_mem_register+0x1ce>
   30964:	2002bd3f 	.word	0x2002bd3f
   30968:	20024a04 	.word	0x20024a04
   3096c:	20024a08 	.word	0x20024a08
   30970:	20024a44 	.word	0x20024a44

00030974 <nrf_malloc>:
   30974:	4b03      	ldr	r3, [pc, #12]	; (30984 <nrf_malloc+0x10>)
   30976:	781b      	ldrb	r3, [r3, #0]
   30978:	b10b      	cbz	r3, 3097e <nrf_malloc+0xa>
   3097a:	f7ff bd8d 	b.w	30498 <mem_alloc.constprop.4>
   3097e:	4618      	mov	r0, r3
   30980:	4770      	bx	lr
   30982:	bf00      	nop
   30984:	2002bd3f 	.word	0x2002bd3f

00030988 <nrf_free>:
   30988:	4b04      	ldr	r3, [pc, #16]	; (3099c <nrf_free+0x14>)
   3098a:	781b      	ldrb	r3, [r3, #0]
   3098c:	b123      	cbz	r3, 30998 <nrf_free+0x10>
   3098e:	b118      	cbz	r0, 30998 <nrf_free+0x10>
   30990:	4601      	mov	r1, r0
   30992:	2000      	movs	r0, #0
   30994:	f7ff bc30 	b.w	301f8 <mem_free>
   30998:	4770      	bx	lr
   3099a:	bf00      	nop
   3099c:	2002bd3f 	.word	0x2002bd3f

000309a0 <nrf_shared_malloc>:
   309a0:	4b03      	ldr	r3, [pc, #12]	; (309b0 <nrf_shared_malloc+0x10>)
   309a2:	781b      	ldrb	r3, [r3, #0]
   309a4:	b10b      	cbz	r3, 309aa <nrf_shared_malloc+0xa>
   309a6:	f7ff bc93 	b.w	302d0 <mem_alloc.constprop.5>
   309aa:	4618      	mov	r0, r3
   309ac:	4770      	bx	lr
   309ae:	bf00      	nop
   309b0:	2002bd3f 	.word	0x2002bd3f

000309b4 <nrf_shared_free>:
   309b4:	4b04      	ldr	r3, [pc, #16]	; (309c8 <nrf_shared_free+0x14>)
   309b6:	781b      	ldrb	r3, [r3, #0]
   309b8:	b123      	cbz	r3, 309c4 <nrf_shared_free+0x10>
   309ba:	b118      	cbz	r0, 309c4 <nrf_shared_free+0x10>
   309bc:	4601      	mov	r1, r0
   309be:	2001      	movs	r0, #1
   309c0:	f7ff bc1a 	b.w	301f8 <mem_free>
   309c4:	4770      	bx	lr
   309c6:	bf00      	nop
   309c8:	2002bd3f 	.word	0x2002bd3f

000309cc <ip_client_event_handler>:
   309cc:	f850 1b08 	ldr.w	r1, [r0], #8
   309d0:	0c09      	lsrs	r1, r1, #16
   309d2:	f004 be51 	b.w	35678 <rpc_ip_event_handler>
   309d6:	bf00      	nop

000309d8 <rpc_ip_client_init>:
   309d8:	4801      	ldr	r0, [pc, #4]	; (309e0 <rpc_ip_client_init+0x8>)
   309da:	f005 bb75 	b.w	360c8 <rpc_client_register>
   309de:	bf00      	nop
   309e0:	00042694 	.word	0x00042694

000309e4 <rpc_ip_client_request_alloc>:
   309e4:	2300      	movs	r3, #0
   309e6:	b510      	push	{r4, lr}
   309e8:	b082      	sub	sp, #8
   309ea:	9301      	str	r3, [sp, #4]
   309ec:	b158      	cbz	r0, 30a06 <rpc_ip_client_request_alloc+0x22>
   309ee:	4604      	mov	r4, r0
   309f0:	aa01      	add	r2, sp, #4
   309f2:	2004      	movs	r0, #4
   309f4:	f005 fda0 	bl	36538 <rpc_message_alloc>
   309f8:	b918      	cbnz	r0, 30a02 <rpc_ip_client_request_alloc+0x1e>
   309fa:	9b01      	ldr	r3, [sp, #4]
   309fc:	b10b      	cbz	r3, 30a02 <rpc_ip_client_request_alloc+0x1e>
   309fe:	3308      	adds	r3, #8
   30a00:	6023      	str	r3, [r4, #0]
   30a02:	b002      	add	sp, #8
   30a04:	bd10      	pop	{r4, pc}
   30a06:	2007      	movs	r0, #7
   30a08:	b002      	add	sp, #8
   30a0a:	bd10      	pop	{r4, pc}

00030a0c <rpc_ip_client_request_send>:
   30a0c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   30a10:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   30a14:	d10b      	bne.n	30a2e <rpc_ip_client_request_send+0x22>
   30a16:	b160      	cbz	r0, 30a32 <rpc_ip_client_request_send+0x26>
   30a18:	4603      	mov	r3, r0
   30a1a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   30a1e:	2004      	movs	r0, #4
   30a20:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   30a24:	f843 1d08 	str.w	r1, [r3, #-8]!
   30a28:	4619      	mov	r1, r3
   30a2a:	f005 bd6d 	b.w	36508 <rpc_message_send>
   30a2e:	200f      	movs	r0, #15
   30a30:	4770      	bx	lr
   30a32:	2007      	movs	r0, #7
   30a34:	4770      	bx	lr
   30a36:	bf00      	nop

00030a38 <rpc_ip_client_message_free>:
   30a38:	b120      	cbz	r0, 30a44 <rpc_ip_client_message_free+0xc>
   30a3a:	f1a0 0108 	sub.w	r1, r0, #8
   30a3e:	2004      	movs	r0, #4
   30a40:	f005 bdac 	b.w	3659c <rpc_message_free>
   30a44:	2007      	movs	r0, #7
   30a46:	4770      	bx	lr

00030a48 <rpc_ip_client_data_free>:
   30a48:	b118      	cbz	r0, 30a52 <rpc_ip_client_data_free+0xa>
   30a4a:	4601      	mov	r1, r0
   30a4c:	2004      	movs	r0, #4
   30a4e:	f005 beb7 	b.w	367c0 <rpc_message_data_free>
   30a52:	2007      	movs	r0, #7
   30a54:	4770      	bx	lr
   30a56:	bf00      	nop

00030a58 <secure_client_socket>:
   30a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30a5c:	460c      	mov	r4, r1
   30a5e:	680b      	ldr	r3, [r1, #0]
   30a60:	4f46      	ldr	r7, [pc, #280]	; (30b7c <secure_client_socket+0x124>)
   30a62:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   30a66:	600b      	str	r3, [r1, #0]
   30a68:	680b      	ldr	r3, [r1, #0]
   30a6a:	00c6      	lsls	r6, r0, #3
   30a6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   30a70:	600b      	str	r3, [r1, #0]
   30a72:	eb07 0a06 	add.w	sl, r7, r6
   30a76:	b082      	sub	sp, #8
   30a78:	f8da 3004 	ldr.w	r3, [sl, #4]
   30a7c:	6989      	ldr	r1, [r1, #24]
   30a7e:	f247 0281 	movw	r2, #28801	; 0x7081
   30a82:	4605      	mov	r5, r0
   30a84:	f8d4 8000 	ldr.w	r8, [r4]
   30a88:	f003 fcee 	bl	34468 <ip_interface_request_create>
   30a8c:	2800      	cmp	r0, #0
   30a8e:	d06f      	beq.n	30b70 <secure_client_socket+0x118>
   30a90:	f8da 2004 	ldr.w	r2, [sl, #4]
   30a94:	4681      	mov	r9, r0
   30a96:	2a00      	cmp	r2, #0
   30a98:	d15f      	bne.n	30b5a <secure_client_socket+0x102>
   30a9a:	4b39      	ldr	r3, [pc, #228]	; (30b80 <secure_client_socket+0x128>)
   30a9c:	1971      	adds	r1, r6, r5
   30a9e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   30aa2:	2224      	movs	r2, #36	; 0x24
   30aa4:	f109 0014 	add.w	r0, r9, #20
   30aa8:	f00f fdb8 	bl	4061c <memcpy>
   30aac:	f8d9 3008 	ldr.w	r3, [r9, #8]
   30ab0:	4649      	mov	r1, r9
   30ab2:	3324      	adds	r3, #36	; 0x24
   30ab4:	f8c9 3008 	str.w	r3, [r9, #8]
   30ab8:	6822      	ldr	r2, [r4, #0]
   30aba:	4643      	mov	r3, r8
   30abc:	0c12      	lsrs	r2, r2, #16
   30abe:	0412      	lsls	r2, r2, #16
   30ac0:	f042 020a 	orr.w	r2, r2, #10
   30ac4:	6022      	str	r2, [r4, #0]
   30ac6:	4620      	mov	r0, r4
   30ac8:	f247 0281 	movw	r2, #28801	; 0x7081
   30acc:	f003 fcec 	bl	344a8 <ip_interface_request_send>
   30ad0:	4603      	mov	r3, r0
   30ad2:	b970      	cbnz	r0, 30af2 <secure_client_socket+0x9a>
   30ad4:	6823      	ldr	r3, [r4, #0]
   30ad6:	00db      	lsls	r3, r3, #3
   30ad8:	d40f      	bmi.n	30afa <secure_client_socket+0xa2>
   30ada:	f04f 33ff 	mov.w	r3, #4294967295
   30ade:	f64f 72ff 	movw	r2, #65535	; 0xffff
   30ae2:	210b      	movs	r1, #11
   30ae4:	4628      	mov	r0, r5
   30ae6:	f003 fcf3 	bl	344d0 <ip_interface_wait>
   30aea:	4603      	mov	r3, r0
   30aec:	b150      	cbz	r0, 30b04 <secure_client_socket+0xac>
   30aee:	f8c4 8000 	str.w	r8, [r4]
   30af2:	4618      	mov	r0, r3
   30af4:	b002      	add	sp, #8
   30af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30afa:	2373      	movs	r3, #115	; 0x73
   30afc:	4618      	mov	r0, r3
   30afe:	b002      	add	sp, #8
   30b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30b04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   30b08:	f04f 33ff 	mov.w	r3, #4294967295
   30b0c:	4611      	mov	r1, r2
   30b0e:	4628      	mov	r0, r5
   30b10:	f003 fcde 	bl	344d0 <ip_interface_wait>
   30b14:	4603      	mov	r3, r0
   30b16:	bb30      	cbnz	r0, 30b66 <secure_client_socket+0x10e>
   30b18:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   30b1c:	b138      	cbz	r0, 30b2e <secure_client_socket+0xd6>
   30b1e:	9301      	str	r3, [sp, #4]
   30b20:	f7ff ff32 	bl	30988 <nrf_free>
   30b24:	9b01      	ldr	r3, [sp, #4]
   30b26:	443e      	add	r6, r7
   30b28:	6073      	str	r3, [r6, #4]
   30b2a:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   30b2e:	4618      	mov	r0, r3
   30b30:	6822      	ldr	r2, [r4, #0]
   30b32:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   30b36:	6022      	str	r2, [r4, #0]
   30b38:	6822      	ldr	r2, [r4, #0]
   30b3a:	0c12      	lsrs	r2, r2, #16
   30b3c:	0412      	lsls	r2, r2, #16
   30b3e:	f042 020c 	orr.w	r2, r2, #12
   30b42:	6022      	str	r2, [r4, #0]
   30b44:	6822      	ldr	r2, [r4, #0]
   30b46:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   30b4a:	6022      	str	r2, [r4, #0]
   30b4c:	6822      	ldr	r2, [r4, #0]
   30b4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   30b52:	6022      	str	r2, [r4, #0]
   30b54:	b002      	add	sp, #8
   30b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30b5a:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   30b5e:	6800      	ldr	r0, [r0, #0]
   30b60:	f00f fd5c 	bl	4061c <memcpy>
   30b64:	e799      	b.n	30a9a <secure_client_socket+0x42>
   30b66:	2b73      	cmp	r3, #115	; 0x73
   30b68:	d0c3      	beq.n	30af2 <secure_client_socket+0x9a>
   30b6a:	f8c4 8000 	str.w	r8, [r4]
   30b6e:	e7c0      	b.n	30af2 <secure_client_socket+0x9a>
   30b70:	230c      	movs	r3, #12
   30b72:	4618      	mov	r0, r3
   30b74:	b002      	add	sp, #8
   30b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30b7a:	bf00      	nop
   30b7c:	20024c98 	.word	0x20024c98
   30b80:	20024b54 	.word	0x20024b54

00030b84 <tls_interface_init>:
   30b84:	2000      	movs	r0, #0
   30b86:	4770      	bx	lr

00030b88 <tls_interface_open>:
   30b88:	b538      	push	{r3, r4, r5, lr}
   30b8a:	1e4b      	subs	r3, r1, #1
   30b8c:	2b01      	cmp	r3, #1
   30b8e:	d808      	bhi.n	30ba2 <tls_interface_open+0x1a>
   30b90:	4614      	mov	r4, r2
   30b92:	b162      	cbz	r2, 30bae <tls_interface_open+0x26>
   30b94:	2901      	cmp	r1, #1
   30b96:	d02d      	beq.n	30bf4 <tls_interface_open+0x6c>
   30b98:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   30b9c:	bf08      	it	eq
   30b9e:	2202      	moveq	r2, #2
   30ba0:	d00d      	beq.n	30bbe <tls_interface_open+0x36>
   30ba2:	2029      	movs	r0, #41	; 0x29
   30ba4:	f7f6 fa58 	bl	27058 <bsd_os_errno_set>
   30ba8:	f04f 35ff 	mov.w	r5, #4294967295
   30bac:	e020      	b.n	30bf0 <tls_interface_open+0x68>
   30bae:	2901      	cmp	r1, #1
   30bb0:	bf0b      	itete	eq
   30bb2:	2201      	moveq	r2, #1
   30bb4:	2202      	movne	r2, #2
   30bb6:	f44f 7482 	moveq.w	r4, #260	; 0x104
   30bba:	f44f 7487 	movne.w	r4, #270	; 0x10e
   30bbe:	f003 fcb3 	bl	34528 <ip_interface_open>
   30bc2:	1e05      	subs	r5, r0, #0
   30bc4:	db1b      	blt.n	30bfe <tls_interface_open+0x76>
   30bc6:	4b0f      	ldr	r3, [pc, #60]	; (30c04 <tls_interface_open+0x7c>)
   30bc8:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   30bcc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   30bd0:	2224      	movs	r2, #36	; 0x24
   30bd2:	490d      	ldr	r1, [pc, #52]	; (30c08 <tls_interface_open+0x80>)
   30bd4:	f00f fd22 	bl	4061c <memcpy>
   30bd8:	4628      	mov	r0, r5
   30bda:	f005 f905 	bl	35de8 <interface_socket_from_handle_get>
   30bde:	6803      	ldr	r3, [r0, #0]
   30be0:	6144      	str	r4, [r0, #20]
   30be2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   30be6:	6003      	str	r3, [r0, #0]
   30be8:	6803      	ldr	r3, [r0, #0]
   30bea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   30bee:	6003      	str	r3, [r0, #0]
   30bf0:	4628      	mov	r0, r5
   30bf2:	bd38      	pop	{r3, r4, r5, pc}
   30bf4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   30bf8:	d1d3      	bne.n	30ba2 <tls_interface_open+0x1a>
   30bfa:	460a      	mov	r2, r1
   30bfc:	e7df      	b.n	30bbe <tls_interface_open+0x36>
   30bfe:	f04f 35ff 	mov.w	r5, #4294967295
   30c02:	e7f5      	b.n	30bf0 <tls_interface_open+0x68>
   30c04:	20024b54 	.word	0x20024b54
   30c08:	000426a4 	.word	0x000426a4

00030c0c <tls_interface_close>:
   30c0c:	b538      	push	{r3, r4, r5, lr}
   30c0e:	4604      	mov	r4, r0
   30c10:	f005 f8ea 	bl	35de8 <interface_socket_from_handle_get>
   30c14:	b180      	cbz	r0, 30c38 <tls_interface_close+0x2c>
   30c16:	4d0b      	ldr	r5, [pc, #44]	; (30c44 <tls_interface_close+0x38>)
   30c18:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   30c1c:	b138      	cbz	r0, 30c2e <tls_interface_close+0x22>
   30c1e:	f7ff feb3 	bl	30988 <nrf_free>
   30c22:	2300      	movs	r3, #0
   30c24:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   30c28:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   30c2c:	6053      	str	r3, [r2, #4]
   30c2e:	4620      	mov	r0, r4
   30c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   30c34:	f003 bd2a 	b.w	3468c <ip_interface_close>
   30c38:	2009      	movs	r0, #9
   30c3a:	f7f6 fa0d 	bl	27058 <bsd_os_errno_set>
   30c3e:	f04f 30ff 	mov.w	r0, #4294967295
   30c42:	bd38      	pop	{r3, r4, r5, pc}
   30c44:	20024c98 	.word	0x20024c98

00030c48 <tls_interface_sendto>:
   30c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30c4c:	460d      	mov	r5, r1
   30c4e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   30c52:	4616      	mov	r6, r2
   30c54:	461f      	mov	r7, r3
   30c56:	4604      	mov	r4, r0
   30c58:	f005 f8c6 	bl	35de8 <interface_socket_from_handle_get>
   30c5c:	2800      	cmp	r0, #0
   30c5e:	d03b      	beq.n	30cd8 <tls_interface_sendto+0x90>
   30c60:	6803      	ldr	r3, [r0, #0]
   30c62:	b29b      	uxth	r3, r3
   30c64:	2b0c      	cmp	r3, #12
   30c66:	d039      	beq.n	30cdc <tls_interface_sendto+0x94>
   30c68:	6803      	ldr	r3, [r0, #0]
   30c6a:	b29b      	uxth	r3, r3
   30c6c:	2b0b      	cmp	r3, #11
   30c6e:	d111      	bne.n	30c94 <tls_interface_sendto+0x4c>
   30c70:	4b20      	ldr	r3, [pc, #128]	; (30cf4 <tls_interface_sendto+0xac>)
   30c72:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   30c76:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   30c7a:	2b02      	cmp	r3, #2
   30c7c:	d038      	beq.n	30cf0 <tls_interface_sendto+0xa8>
   30c7e:	6903      	ldr	r3, [r0, #16]
   30c80:	2b01      	cmp	r3, #1
   30c82:	bf14      	ite	ne
   30c84:	2039      	movne	r0, #57	; 0x39
   30c86:	202a      	moveq	r0, #42	; 0x2a
   30c88:	f7f6 f9e6 	bl	27058 <bsd_os_errno_set>
   30c8c:	f04f 30ff 	mov.w	r0, #4294967295
   30c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30c94:	6903      	ldr	r3, [r0, #16]
   30c96:	2b01      	cmp	r3, #1
   30c98:	d00b      	beq.n	30cb2 <tls_interface_sendto+0x6a>
   30c9a:	2b02      	cmp	r3, #2
   30c9c:	d001      	beq.n	30ca2 <tls_interface_sendto+0x5a>
   30c9e:	2039      	movs	r0, #57	; 0x39
   30ca0:	e7f2      	b.n	30c88 <tls_interface_sendto+0x40>
   30ca2:	6803      	ldr	r3, [r0, #0]
   30ca4:	b29b      	uxth	r3, r3
   30ca6:	2b02      	cmp	r3, #2
   30ca8:	d007      	beq.n	30cba <tls_interface_sendto+0x72>
   30caa:	6803      	ldr	r3, [r0, #0]
   30cac:	b29b      	uxth	r3, r3
   30cae:	2b04      	cmp	r3, #4
   30cb0:	d003      	beq.n	30cba <tls_interface_sendto+0x72>
   30cb2:	6803      	ldr	r3, [r0, #0]
   30cb4:	b29b      	uxth	r3, r3
   30cb6:	2b05      	cmp	r3, #5
   30cb8:	d1f1      	bne.n	30c9e <tls_interface_sendto+0x56>
   30cba:	4b0e      	ldr	r3, [pc, #56]	; (30cf4 <tls_interface_sendto+0xac>)
   30cbc:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   30cc0:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   30cc4:	2b02      	cmp	r3, #2
   30cc6:	d1ea      	bne.n	30c9e <tls_interface_sendto+0x56>
   30cc8:	4601      	mov	r1, r0
   30cca:	4620      	mov	r0, r4
   30ccc:	f7ff fec4 	bl	30a58 <secure_client_socket>
   30cd0:	2800      	cmp	r0, #0
   30cd2:	d003      	beq.n	30cdc <tls_interface_sendto+0x94>
   30cd4:	dcd8      	bgt.n	30c88 <tls_interface_sendto+0x40>
   30cd6:	e7d9      	b.n	30c8c <tls_interface_sendto+0x44>
   30cd8:	2009      	movs	r0, #9
   30cda:	e7d5      	b.n	30c88 <tls_interface_sendto+0x40>
   30cdc:	e9cd 8908 	strd	r8, r9, [sp, #32]
   30ce0:	463b      	mov	r3, r7
   30ce2:	4632      	mov	r2, r6
   30ce4:	4629      	mov	r1, r5
   30ce6:	4620      	mov	r0, r4
   30ce8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30cec:	f003 bd3e 	b.w	3476c <ip_interface_sendto>
   30cf0:	2023      	movs	r0, #35	; 0x23
   30cf2:	e7c9      	b.n	30c88 <tls_interface_sendto+0x40>
   30cf4:	20024b54 	.word	0x20024b54

00030cf8 <tls_interface_recvfrom>:
   30cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30cfc:	460d      	mov	r5, r1
   30cfe:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   30d02:	4616      	mov	r6, r2
   30d04:	461f      	mov	r7, r3
   30d06:	4604      	mov	r4, r0
   30d08:	f005 f86e 	bl	35de8 <interface_socket_from_handle_get>
   30d0c:	2800      	cmp	r0, #0
   30d0e:	d038      	beq.n	30d82 <tls_interface_recvfrom+0x8a>
   30d10:	6803      	ldr	r3, [r0, #0]
   30d12:	b29b      	uxth	r3, r3
   30d14:	2b0c      	cmp	r3, #12
   30d16:	d00f      	beq.n	30d38 <tls_interface_recvfrom+0x40>
   30d18:	6803      	ldr	r3, [r0, #0]
   30d1a:	b29b      	uxth	r3, r3
   30d1c:	2b0d      	cmp	r3, #13
   30d1e:	d00b      	beq.n	30d38 <tls_interface_recvfrom+0x40>
   30d20:	6903      	ldr	r3, [r0, #16]
   30d22:	2b01      	cmp	r3, #1
   30d24:	d01a      	beq.n	30d5c <tls_interface_recvfrom+0x64>
   30d26:	2b02      	cmp	r3, #2
   30d28:	d010      	beq.n	30d4c <tls_interface_recvfrom+0x54>
   30d2a:	2023      	movs	r0, #35	; 0x23
   30d2c:	f7f6 f994 	bl	27058 <bsd_os_errno_set>
   30d30:	f04f 30ff 	mov.w	r0, #4294967295
   30d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30d38:	e9cd 8908 	strd	r8, r9, [sp, #32]
   30d3c:	463b      	mov	r3, r7
   30d3e:	4632      	mov	r2, r6
   30d40:	4629      	mov	r1, r5
   30d42:	4620      	mov	r0, r4
   30d44:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30d48:	f003 be88 	b.w	34a5c <ip_interface_recvfrom>
   30d4c:	6803      	ldr	r3, [r0, #0]
   30d4e:	b29b      	uxth	r3, r3
   30d50:	2b02      	cmp	r3, #2
   30d52:	d007      	beq.n	30d64 <tls_interface_recvfrom+0x6c>
   30d54:	6803      	ldr	r3, [r0, #0]
   30d56:	b29b      	uxth	r3, r3
   30d58:	2b04      	cmp	r3, #4
   30d5a:	d003      	beq.n	30d64 <tls_interface_recvfrom+0x6c>
   30d5c:	6803      	ldr	r3, [r0, #0]
   30d5e:	b29b      	uxth	r3, r3
   30d60:	2b05      	cmp	r3, #5
   30d62:	d1e2      	bne.n	30d2a <tls_interface_recvfrom+0x32>
   30d64:	4b08      	ldr	r3, [pc, #32]	; (30d88 <tls_interface_recvfrom+0x90>)
   30d66:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   30d6a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   30d6e:	2b02      	cmp	r3, #2
   30d70:	d1db      	bne.n	30d2a <tls_interface_recvfrom+0x32>
   30d72:	4601      	mov	r1, r0
   30d74:	4620      	mov	r0, r4
   30d76:	f7ff fe6f 	bl	30a58 <secure_client_socket>
   30d7a:	2800      	cmp	r0, #0
   30d7c:	d0dc      	beq.n	30d38 <tls_interface_recvfrom+0x40>
   30d7e:	dcd5      	bgt.n	30d2c <tls_interface_recvfrom+0x34>
   30d80:	e7d6      	b.n	30d30 <tls_interface_recvfrom+0x38>
   30d82:	2009      	movs	r0, #9
   30d84:	e7d2      	b.n	30d2c <tls_interface_recvfrom+0x34>
   30d86:	bf00      	nop
   30d88:	20024b54 	.word	0x20024b54

00030d8c <tls_interface_bind>:
   30d8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30d90:	460c      	mov	r4, r1
   30d92:	4617      	mov	r7, r2
   30d94:	4606      	mov	r6, r0
   30d96:	f005 f827 	bl	35de8 <interface_socket_from_handle_get>
   30d9a:	2800      	cmp	r0, #0
   30d9c:	d06d      	beq.n	30e7a <tls_interface_bind+0xee>
   30d9e:	6803      	ldr	r3, [r0, #0]
   30da0:	4605      	mov	r5, r0
   30da2:	b29b      	uxth	r3, r3
   30da4:	2b02      	cmp	r3, #2
   30da6:	d15a      	bne.n	30e5e <tls_interface_bind+0xd2>
   30da8:	4621      	mov	r1, r4
   30daa:	463a      	mov	r2, r7
   30dac:	4630      	mov	r0, r6
   30dae:	f004 f843 	bl	34e38 <ip_interface_bind>
   30db2:	4604      	mov	r4, r0
   30db4:	2800      	cmp	r0, #0
   30db6:	d148      	bne.n	30e4a <tls_interface_bind+0xbe>
   30db8:	00f7      	lsls	r7, r6, #3
   30dba:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 30e80 <tls_interface_bind+0xf4>
   30dbe:	19bb      	adds	r3, r7, r6
   30dc0:	f818 3023 	ldrb.w	r3, [r8, r3, lsl #2]
   30dc4:	2b01      	cmp	r3, #1
   30dc6:	d002      	beq.n	30dce <tls_interface_bind+0x42>
   30dc8:	4620      	mov	r0, r4
   30dca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30dce:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 30e84 <tls_interface_bind+0xf8>
   30dd2:	f247 0281 	movw	r2, #28801	; 0x7081
   30dd6:	eb0b 0a07 	add.w	sl, fp, r7
   30dda:	f8da 3004 	ldr.w	r3, [sl, #4]
   30dde:	69a9      	ldr	r1, [r5, #24]
   30de0:	4630      	mov	r0, r6
   30de2:	f003 fb41 	bl	34468 <ip_interface_request_create>
   30de6:	4681      	mov	r9, r0
   30de8:	2800      	cmp	r0, #0
   30dea:	d044      	beq.n	30e76 <tls_interface_bind+0xea>
   30dec:	f8da 2004 	ldr.w	r2, [sl, #4]
   30df0:	2a00      	cmp	r2, #0
   30df2:	d13a      	bne.n	30e6a <tls_interface_bind+0xde>
   30df4:	19b9      	adds	r1, r7, r6
   30df6:	eb08 0181 	add.w	r1, r8, r1, lsl #2
   30dfa:	2224      	movs	r2, #36	; 0x24
   30dfc:	f109 0014 	add.w	r0, r9, #20
   30e00:	f00f fc0c 	bl	4061c <memcpy>
   30e04:	f8d9 3008 	ldr.w	r3, [r9, #8]
   30e08:	4649      	mov	r1, r9
   30e0a:	3324      	adds	r3, #36	; 0x24
   30e0c:	f8c9 3008 	str.w	r3, [r9, #8]
   30e10:	682a      	ldr	r2, [r5, #0]
   30e12:	2304      	movs	r3, #4
   30e14:	0c12      	lsrs	r2, r2, #16
   30e16:	0412      	lsls	r2, r2, #16
   30e18:	f042 020a 	orr.w	r2, r2, #10
   30e1c:	602a      	str	r2, [r5, #0]
   30e1e:	4628      	mov	r0, r5
   30e20:	f247 0281 	movw	r2, #28801	; 0x7081
   30e24:	f003 fb40 	bl	344a8 <ip_interface_request_send>
   30e28:	b9e8      	cbnz	r0, 30e66 <tls_interface_bind+0xda>
   30e2a:	682b      	ldr	r3, [r5, #0]
   30e2c:	00db      	lsls	r3, r3, #3
   30e2e:	d418      	bmi.n	30e62 <tls_interface_bind+0xd6>
   30e30:	4630      	mov	r0, r6
   30e32:	f04f 33ff 	mov.w	r3, #4294967295
   30e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
   30e3a:	210b      	movs	r1, #11
   30e3c:	f003 fb48 	bl	344d0 <ip_interface_wait>
   30e40:	2800      	cmp	r0, #0
   30e42:	d0c1      	beq.n	30dc8 <tls_interface_bind+0x3c>
   30e44:	2304      	movs	r3, #4
   30e46:	4604      	mov	r4, r0
   30e48:	602b      	str	r3, [r5, #0]
   30e4a:	2c00      	cmp	r4, #0
   30e4c:	ddbc      	ble.n	30dc8 <tls_interface_bind+0x3c>
   30e4e:	4620      	mov	r0, r4
   30e50:	f04f 34ff 	mov.w	r4, #4294967295
   30e54:	f7f6 f900 	bl	27058 <bsd_os_errno_set>
   30e58:	4620      	mov	r0, r4
   30e5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30e5e:	242d      	movs	r4, #45	; 0x2d
   30e60:	e7f5      	b.n	30e4e <tls_interface_bind+0xc2>
   30e62:	2473      	movs	r4, #115	; 0x73
   30e64:	e7f3      	b.n	30e4e <tls_interface_bind+0xc2>
   30e66:	4604      	mov	r4, r0
   30e68:	e7ef      	b.n	30e4a <tls_interface_bind+0xbe>
   30e6a:	f85b 1036 	ldr.w	r1, [fp, r6, lsl #3]
   30e6e:	6800      	ldr	r0, [r0, #0]
   30e70:	f00f fbd4 	bl	4061c <memcpy>
   30e74:	e7be      	b.n	30df4 <tls_interface_bind+0x68>
   30e76:	240c      	movs	r4, #12
   30e78:	e7e9      	b.n	30e4e <tls_interface_bind+0xc2>
   30e7a:	2409      	movs	r4, #9
   30e7c:	e7e7      	b.n	30e4e <tls_interface_bind+0xc2>
   30e7e:	bf00      	nop
   30e80:	20024b54 	.word	0x20024b54
   30e84:	20024c98 	.word	0x20024c98

00030e88 <tls_interface_connect>:
   30e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30e8a:	460e      	mov	r6, r1
   30e8c:	4617      	mov	r7, r2
   30e8e:	4604      	mov	r4, r0
   30e90:	f004 ffaa 	bl	35de8 <interface_socket_from_handle_get>
   30e94:	b1e8      	cbz	r0, 30ed2 <tls_interface_connect+0x4a>
   30e96:	4b13      	ldr	r3, [pc, #76]	; (30ee4 <tls_interface_connect+0x5c>)
   30e98:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   30e9c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   30ea0:	2b02      	cmp	r3, #2
   30ea2:	d11c      	bne.n	30ede <tls_interface_connect+0x56>
   30ea4:	6803      	ldr	r3, [r0, #0]
   30ea6:	4605      	mov	r5, r0
   30ea8:	b29b      	uxth	r3, r3
   30eaa:	2b02      	cmp	r3, #2
   30eac:	d003      	beq.n	30eb6 <tls_interface_connect+0x2e>
   30eae:	6803      	ldr	r3, [r0, #0]
   30eb0:	b29b      	uxth	r3, r3
   30eb2:	2b04      	cmp	r3, #4
   30eb4:	d113      	bne.n	30ede <tls_interface_connect+0x56>
   30eb6:	463a      	mov	r2, r7
   30eb8:	4631      	mov	r1, r6
   30eba:	4620      	mov	r0, r4
   30ebc:	f003 ff02 	bl	34cc4 <ip_interface_connect>
   30ec0:	b110      	cbz	r0, 30ec8 <tls_interface_connect+0x40>
   30ec2:	2800      	cmp	r0, #0
   30ec4:	dc06      	bgt.n	30ed4 <tls_interface_connect+0x4c>
   30ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30ec8:	4629      	mov	r1, r5
   30eca:	4620      	mov	r0, r4
   30ecc:	f7ff fdc4 	bl	30a58 <secure_client_socket>
   30ed0:	e7f7      	b.n	30ec2 <tls_interface_connect+0x3a>
   30ed2:	2009      	movs	r0, #9
   30ed4:	f7f6 f8c0 	bl	27058 <bsd_os_errno_set>
   30ed8:	f04f 30ff 	mov.w	r0, #4294967295
   30edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30ede:	202d      	movs	r0, #45	; 0x2d
   30ee0:	e7f8      	b.n	30ed4 <tls_interface_connect+0x4c>
   30ee2:	bf00      	nop
   30ee4:	20024b54 	.word	0x20024b54

00030ee8 <tls_interface_listen>:
   30ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30eec:	b083      	sub	sp, #12
   30eee:	9101      	str	r1, [sp, #4]
   30ef0:	4605      	mov	r5, r0
   30ef2:	f004 ff79 	bl	35de8 <interface_socket_from_handle_get>
   30ef6:	2800      	cmp	r0, #0
   30ef8:	d079      	beq.n	30fee <tls_interface_listen+0x106>
   30efa:	6903      	ldr	r3, [r0, #16]
   30efc:	4604      	mov	r4, r0
   30efe:	2b01      	cmp	r3, #1
   30f00:	d173      	bne.n	30fea <tls_interface_listen+0x102>
   30f02:	6803      	ldr	r3, [r0, #0]
   30f04:	b29b      	uxth	r3, r3
   30f06:	2b04      	cmp	r3, #4
   30f08:	d05f      	beq.n	30fca <tls_interface_listen+0xe2>
   30f0a:	6823      	ldr	r3, [r4, #0]
   30f0c:	b29b      	uxth	r3, r3
   30f0e:	2b0b      	cmp	r3, #11
   30f10:	d16b      	bne.n	30fea <tls_interface_listen+0x102>
   30f12:	00ee      	lsls	r6, r5, #3
   30f14:	4f37      	ldr	r7, [pc, #220]	; (30ff4 <tls_interface_listen+0x10c>)
   30f16:	1973      	adds	r3, r6, r5
   30f18:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   30f1c:	2b01      	cmp	r3, #1
   30f1e:	d164      	bne.n	30fea <tls_interface_listen+0x102>
   30f20:	2201      	movs	r2, #1
   30f22:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 30ff8 <tls_interface_listen+0x110>
   30f26:	1973      	adds	r3, r6, r5
   30f28:	00ee      	lsls	r6, r5, #3
   30f2a:	f807 2023 	strb.w	r2, [r7, r3, lsl #2]
   30f2e:	eb09 0806 	add.w	r8, r9, r6
   30f32:	69a1      	ldr	r1, [r4, #24]
   30f34:	f8d8 3004 	ldr.w	r3, [r8, #4]
   30f38:	f247 0281 	movw	r2, #28801	; 0x7081
   30f3c:	4628      	mov	r0, r5
   30f3e:	f8d4 a000 	ldr.w	sl, [r4]
   30f42:	f003 fa91 	bl	34468 <ip_interface_request_create>
   30f46:	4683      	mov	fp, r0
   30f48:	2800      	cmp	r0, #0
   30f4a:	d04c      	beq.n	30fe6 <tls_interface_listen+0xfe>
   30f4c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   30f50:	2a00      	cmp	r2, #0
   30f52:	d142      	bne.n	30fda <tls_interface_listen+0xf2>
   30f54:	1971      	adds	r1, r6, r5
   30f56:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   30f5a:	2224      	movs	r2, #36	; 0x24
   30f5c:	f10b 0014 	add.w	r0, fp, #20
   30f60:	f00f fb5c 	bl	4061c <memcpy>
   30f64:	f8db 2008 	ldr.w	r2, [fp, #8]
   30f68:	4659      	mov	r1, fp
   30f6a:	3224      	adds	r2, #36	; 0x24
   30f6c:	f8cb 2008 	str.w	r2, [fp, #8]
   30f70:	6822      	ldr	r2, [r4, #0]
   30f72:	4653      	mov	r3, sl
   30f74:	0c12      	lsrs	r2, r2, #16
   30f76:	0412      	lsls	r2, r2, #16
   30f78:	f042 020a 	orr.w	r2, r2, #10
   30f7c:	6022      	str	r2, [r4, #0]
   30f7e:	4620      	mov	r0, r4
   30f80:	f247 0281 	movw	r2, #28801	; 0x7081
   30f84:	f003 fa90 	bl	344a8 <ip_interface_request_send>
   30f88:	b968      	cbnz	r0, 30fa6 <tls_interface_listen+0xbe>
   30f8a:	6823      	ldr	r3, [r4, #0]
   30f8c:	00db      	lsls	r3, r3, #3
   30f8e:	d40f      	bmi.n	30fb0 <tls_interface_listen+0xc8>
   30f90:	f04f 33ff 	mov.w	r3, #4294967295
   30f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
   30f98:	210b      	movs	r1, #11
   30f9a:	4628      	mov	r0, r5
   30f9c:	f003 fa98 	bl	344d0 <ip_interface_wait>
   30fa0:	b170      	cbz	r0, 30fc0 <tls_interface_listen+0xd8>
   30fa2:	f8c4 a000 	str.w	sl, [r4]
   30fa6:	2800      	cmp	r0, #0
   30fa8:	dc03      	bgt.n	30fb2 <tls_interface_listen+0xca>
   30faa:	b003      	add	sp, #12
   30fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30fb0:	2073      	movs	r0, #115	; 0x73
   30fb2:	f7f6 f851 	bl	27058 <bsd_os_errno_set>
   30fb6:	f04f 30ff 	mov.w	r0, #4294967295
   30fba:	b003      	add	sp, #12
   30fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30fc0:	9901      	ldr	r1, [sp, #4]
   30fc2:	4628      	mov	r0, r5
   30fc4:	f003 ffd8 	bl	34f78 <ip_interface_listen>
   30fc8:	e7ed      	b.n	30fa6 <tls_interface_listen+0xbe>
   30fca:	00ee      	lsls	r6, r5, #3
   30fcc:	4f09      	ldr	r7, [pc, #36]	; (30ff4 <tls_interface_listen+0x10c>)
   30fce:	1973      	adds	r3, r6, r5
   30fd0:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   30fd4:	2b02      	cmp	r3, #2
   30fd6:	d198      	bne.n	30f0a <tls_interface_listen+0x22>
   30fd8:	e7a2      	b.n	30f20 <tls_interface_listen+0x38>
   30fda:	f859 1035 	ldr.w	r1, [r9, r5, lsl #3]
   30fde:	6800      	ldr	r0, [r0, #0]
   30fe0:	f00f fb1c 	bl	4061c <memcpy>
   30fe4:	e7b6      	b.n	30f54 <tls_interface_listen+0x6c>
   30fe6:	200c      	movs	r0, #12
   30fe8:	e7e3      	b.n	30fb2 <tls_interface_listen+0xca>
   30fea:	202d      	movs	r0, #45	; 0x2d
   30fec:	e7e1      	b.n	30fb2 <tls_interface_listen+0xca>
   30fee:	2009      	movs	r0, #9
   30ff0:	e7df      	b.n	30fb2 <tls_interface_listen+0xca>
   30ff2:	bf00      	nop
   30ff4:	20024b54 	.word	0x20024b54
   30ff8:	20024c98 	.word	0x20024c98

00030ffc <tls_interface_accept>:
   30ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30ffe:	460c      	mov	r4, r1
   31000:	4616      	mov	r6, r2
   31002:	461f      	mov	r7, r3
   31004:	4605      	mov	r5, r0
   31006:	f004 feef 	bl	35de8 <interface_socket_from_handle_get>
   3100a:	2800      	cmp	r0, #0
   3100c:	d03b      	beq.n	31086 <tls_interface_accept+0x8a>
   3100e:	6800      	ldr	r0, [r0, #0]
   31010:	b280      	uxth	r0, r0
   31012:	2806      	cmp	r0, #6
   31014:	d137      	bne.n	31086 <tls_interface_accept+0x8a>
   31016:	4621      	mov	r1, r4
   31018:	463b      	mov	r3, r7
   3101a:	4632      	mov	r2, r6
   3101c:	4628      	mov	r0, r5
   3101e:	f004 f821 	bl	35064 <ip_interface_accept>
   31022:	4604      	mov	r4, r0
   31024:	b118      	cbz	r0, 3102e <tls_interface_accept+0x32>
   31026:	2c00      	cmp	r4, #0
   31028:	dc2e      	bgt.n	31088 <tls_interface_accept+0x8c>
   3102a:	4620      	mov	r0, r4
   3102c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3102e:	4628      	mov	r0, r5
   31030:	f004 feda 	bl	35de8 <interface_socket_from_handle_get>
   31034:	6803      	ldr	r3, [r0, #0]
   31036:	4f18      	ldr	r7, [pc, #96]	; (31098 <tls_interface_accept+0x9c>)
   31038:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   3103c:	6003      	str	r3, [r0, #0]
   3103e:	6803      	ldr	r3, [r0, #0]
   31040:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   31044:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   31048:	4606      	mov	r6, r0
   3104a:	6003      	str	r3, [r0, #0]
   3104c:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   31050:	2224      	movs	r2, #36	; 0x24
   31052:	4638      	mov	r0, r7
   31054:	f00f fae2 	bl	4061c <memcpy>
   31058:	2302      	movs	r3, #2
   3105a:	703b      	strb	r3, [r7, #0]
   3105c:	6833      	ldr	r3, [r6, #0]
   3105e:	4620      	mov	r0, r4
   31060:	0c1b      	lsrs	r3, r3, #16
   31062:	041b      	lsls	r3, r3, #16
   31064:	f043 030b 	orr.w	r3, r3, #11
   31068:	6033      	str	r3, [r6, #0]
   3106a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3106e:	f04f 33ff 	mov.w	r3, #4294967295
   31072:	210c      	movs	r1, #12
   31074:	f003 fa2c 	bl	344d0 <ip_interface_wait>
   31078:	4604      	mov	r4, r0
   3107a:	2800      	cmp	r0, #0
   3107c:	d0d5      	beq.n	3102a <tls_interface_accept+0x2e>
   3107e:	2000      	movs	r0, #0
   31080:	f003 fb04 	bl	3468c <ip_interface_close>
   31084:	e7cf      	b.n	31026 <tls_interface_accept+0x2a>
   31086:	2409      	movs	r4, #9
   31088:	4620      	mov	r0, r4
   3108a:	f04f 34ff 	mov.w	r4, #4294967295
   3108e:	f7f5 ffe3 	bl	27058 <bsd_os_errno_set>
   31092:	4620      	mov	r0, r4
   31094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   31096:	bf00      	nop
   31098:	20024b54 	.word	0x20024b54

0003109c <tls_interface_setopt>:
   3109c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   310a0:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   310a4:	9e06      	ldr	r6, [sp, #24]
   310a6:	d11e      	bne.n	310e6 <tls_interface_setopt+0x4a>
   310a8:	461f      	mov	r7, r3
   310aa:	4605      	mov	r5, r0
   310ac:	2b00      	cmp	r3, #0
   310ae:	f000 808c 	beq.w	311ca <tls_interface_setopt+0x12e>
   310b2:	4690      	mov	r8, r2
   310b4:	f004 fe98 	bl	35de8 <interface_socket_from_handle_get>
   310b8:	2800      	cmp	r0, #0
   310ba:	d07b      	beq.n	311b4 <tls_interface_setopt+0x118>
   310bc:	6804      	ldr	r4, [r0, #0]
   310be:	b2a4      	uxth	r4, r4
   310c0:	2c02      	cmp	r4, #2
   310c2:	d007      	beq.n	310d4 <tls_interface_setopt+0x38>
   310c4:	6803      	ldr	r3, [r0, #0]
   310c6:	b29b      	uxth	r3, r3
   310c8:	2b04      	cmp	r3, #4
   310ca:	d003      	beq.n	310d4 <tls_interface_setopt+0x38>
   310cc:	6803      	ldr	r3, [r0, #0]
   310ce:	b29b      	uxth	r3, r3
   310d0:	2b05      	cmp	r3, #5
   310d2:	d16f      	bne.n	311b4 <tls_interface_setopt+0x118>
   310d4:	f108 32ff 	add.w	r2, r8, #4294967295
   310d8:	2a04      	cmp	r2, #4
   310da:	d87c      	bhi.n	311d6 <tls_interface_setopt+0x13a>
   310dc:	e8df f002 	tbb	[pc, r2]
   310e0:	41324e24 	.word	0x41324e24
   310e4:	07          	.byte	0x07
   310e5:	00          	.byte	0x00
   310e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   310ea:	f004 b8f3 	b.w	352d4 <ip_interface_setopt>
   310ee:	4c3b      	ldr	r4, [pc, #236]	; (311dc <tls_interface_setopt+0x140>)
   310f0:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   310f4:	b138      	cbz	r0, 31106 <tls_interface_setopt+0x6a>
   310f6:	f7ff fc47 	bl	30988 <nrf_free>
   310fa:	2200      	movs	r2, #0
   310fc:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   31100:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   31104:	605a      	str	r2, [r3, #4]
   31106:	4630      	mov	r0, r6
   31108:	b34e      	cbz	r6, 3115e <tls_interface_setopt+0xc2>
   3110a:	f7ff fc33 	bl	30974 <nrf_malloc>
   3110e:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   31112:	2800      	cmp	r0, #0
   31114:	d057      	beq.n	311c6 <tls_interface_setopt+0x12a>
   31116:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   3111a:	4632      	mov	r2, r6
   3111c:	4639      	mov	r1, r7
   3111e:	6066      	str	r6, [r4, #4]
   31120:	f00f fa7c 	bl	4061c <memcpy>
   31124:	2000      	movs	r0, #0
   31126:	e01a      	b.n	3115e <tls_interface_setopt+0xc2>
   31128:	2e04      	cmp	r6, #4
   3112a:	d14a      	bne.n	311c2 <tls_interface_setopt+0x126>
   3112c:	6838      	ldr	r0, [r7, #0]
   3112e:	2800      	cmp	r0, #0
   31130:	d039      	beq.n	311a6 <tls_interface_setopt+0x10a>
   31132:	2801      	cmp	r0, #1
   31134:	d145      	bne.n	311c2 <tls_interface_setopt+0x126>
   31136:	4a2a      	ldr	r2, [pc, #168]	; (311e0 <tls_interface_setopt+0x144>)
   31138:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   3113c:	f802 0024 	strb.w	r0, [r2, r4, lsl #2]
   31140:	2000      	movs	r0, #0
   31142:	e00c      	b.n	3115e <tls_interface_setopt+0xc2>
   31144:	2e01      	cmp	r6, #1
   31146:	d13c      	bne.n	311c2 <tls_interface_setopt+0x126>
   31148:	783a      	ldrb	r2, [r7, #0]
   3114a:	2000      	movs	r0, #0
   3114c:	3200      	adds	r2, #0
   3114e:	bf18      	it	ne
   31150:	2201      	movne	r2, #1
   31152:	4b23      	ldr	r3, [pc, #140]	; (311e0 <tls_interface_setopt+0x144>)
   31154:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   31158:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   3115c:	7062      	strb	r2, [r4, #1]
   3115e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31162:	2e04      	cmp	r6, #4
   31164:	d12d      	bne.n	311c2 <tls_interface_setopt+0x126>
   31166:	683a      	ldr	r2, [r7, #0]
   31168:	2a02      	cmp	r2, #2
   3116a:	d82a      	bhi.n	311c2 <tls_interface_setopt+0x126>
   3116c:	4b1c      	ldr	r3, [pc, #112]	; (311e0 <tls_interface_setopt+0x144>)
   3116e:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   31172:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   31176:	70a2      	strb	r2, [r4, #2]
   31178:	2000      	movs	r0, #0
   3117a:	e7f0      	b.n	3115e <tls_interface_setopt+0xc2>
   3117c:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   31180:	d01f      	beq.n	311c2 <tls_interface_setopt+0x126>
   31182:	f016 0403 	ands.w	r4, r6, #3
   31186:	d11c      	bne.n	311c2 <tls_interface_setopt+0x126>
   31188:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   3118c:	00ad      	lsls	r5, r5, #2
   3118e:	4b14      	ldr	r3, [pc, #80]	; (311e0 <tls_interface_setopt+0x144>)
   31190:	1d28      	adds	r0, r5, #4
   31192:	4418      	add	r0, r3
   31194:	442b      	add	r3, r5
   31196:	4632      	mov	r2, r6
   31198:	4639      	mov	r1, r7
   3119a:	f883 c003 	strb.w	ip, [r3, #3]
   3119e:	f00f fa3d 	bl	4061c <memcpy>
   311a2:	4620      	mov	r0, r4
   311a4:	e7db      	b.n	3115e <tls_interface_setopt+0xc2>
   311a6:	2102      	movs	r1, #2
   311a8:	4a0d      	ldr	r2, [pc, #52]	; (311e0 <tls_interface_setopt+0x144>)
   311aa:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   311ae:	f802 1024 	strb.w	r1, [r2, r4, lsl #2]
   311b2:	e7d4      	b.n	3115e <tls_interface_setopt+0xc2>
   311b4:	2009      	movs	r0, #9
   311b6:	f7f5 ff4f 	bl	27058 <bsd_os_errno_set>
   311ba:	f04f 30ff 	mov.w	r0, #4294967295
   311be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   311c2:	2016      	movs	r0, #22
   311c4:	e7f7      	b.n	311b6 <tls_interface_setopt+0x11a>
   311c6:	200c      	movs	r0, #12
   311c8:	e7f5      	b.n	311b6 <tls_interface_setopt+0x11a>
   311ca:	200e      	movs	r0, #14
   311cc:	f7f5 ff44 	bl	27058 <bsd_os_errno_set>
   311d0:	f04f 30ff 	mov.w	r0, #4294967295
   311d4:	e7c3      	b.n	3115e <tls_interface_setopt+0xc2>
   311d6:	202a      	movs	r0, #42	; 0x2a
   311d8:	e7ed      	b.n	311b6 <tls_interface_setopt+0x11a>
   311da:	bf00      	nop
   311dc:	20024c98 	.word	0x20024c98
   311e0:	20024b54 	.word	0x20024b54

000311e4 <tls_interface_getopt>:
   311e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   311e8:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   311ec:	9f06      	ldr	r7, [sp, #24]
   311ee:	d112      	bne.n	31216 <tls_interface_getopt+0x32>
   311f0:	461d      	mov	r5, r3
   311f2:	b16b      	cbz	r3, 31210 <tls_interface_getopt+0x2c>
   311f4:	b167      	cbz	r7, 31210 <tls_interface_getopt+0x2c>
   311f6:	4606      	mov	r6, r0
   311f8:	4614      	mov	r4, r2
   311fa:	f004 fdf5 	bl	35de8 <interface_socket_from_handle_get>
   311fe:	2800      	cmp	r0, #0
   31200:	d04f      	beq.n	312a2 <tls_interface_getopt+0xbe>
   31202:	3c01      	subs	r4, #1
   31204:	2c03      	cmp	r4, #3
   31206:	d852      	bhi.n	312ae <tls_interface_getopt+0xca>
   31208:	e8df f004 	tbb	[pc, r4]
   3120c:	09152139 	.word	0x09152139
   31210:	200e      	movs	r0, #14
   31212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3121a:	f004 b917 	b.w	3544c <ip_interface_getopt>
   3121e:	683b      	ldr	r3, [r7, #0]
   31220:	2b04      	cmp	r3, #4
   31222:	d13c      	bne.n	3129e <tls_interface_getopt+0xba>
   31224:	4b23      	ldr	r3, [pc, #140]	; (312b4 <tls_interface_getopt+0xd0>)
   31226:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   3122a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   3122e:	78b3      	ldrb	r3, [r6, #2]
   31230:	2000      	movs	r0, #0
   31232:	602b      	str	r3, [r5, #0]
   31234:	e7ed      	b.n	31212 <tls_interface_getopt+0x2e>
   31236:	683b      	ldr	r3, [r7, #0]
   31238:	2b01      	cmp	r3, #1
   3123a:	d130      	bne.n	3129e <tls_interface_getopt+0xba>
   3123c:	4b1d      	ldr	r3, [pc, #116]	; (312b4 <tls_interface_getopt+0xd0>)
   3123e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   31242:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   31246:	7873      	ldrb	r3, [r6, #1]
   31248:	2000      	movs	r0, #0
   3124a:	702b      	strb	r3, [r5, #0]
   3124c:	e7e1      	b.n	31212 <tls_interface_getopt+0x2e>
   3124e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   31252:	4918      	ldr	r1, [pc, #96]	; (312b4 <tls_interface_getopt+0xd0>)
   31254:	683b      	ldr	r3, [r7, #0]
   31256:	00b6      	lsls	r6, r6, #2
   31258:	198a      	adds	r2, r1, r6
   3125a:	f013 0403 	ands.w	r4, r3, #3
   3125e:	78d0      	ldrb	r0, [r2, #3]
   31260:	d121      	bne.n	312a6 <tls_interface_getopt+0xc2>
   31262:	089b      	lsrs	r3, r3, #2
   31264:	4283      	cmp	r3, r0
   31266:	bf28      	it	cs
   31268:	4603      	movcs	r3, r0
   3126a:	009a      	lsls	r2, r3, #2
   3126c:	b1db      	cbz	r3, 312a6 <tls_interface_getopt+0xc2>
   3126e:	3604      	adds	r6, #4
   31270:	4431      	add	r1, r6
   31272:	603a      	str	r2, [r7, #0]
   31274:	4628      	mov	r0, r5
   31276:	f00f f9d1 	bl	4061c <memcpy>
   3127a:	4620      	mov	r0, r4
   3127c:	e7c9      	b.n	31212 <tls_interface_getopt+0x2e>
   3127e:	683b      	ldr	r3, [r7, #0]
   31280:	2b04      	cmp	r3, #4
   31282:	d10c      	bne.n	3129e <tls_interface_getopt+0xba>
   31284:	4b0b      	ldr	r3, [pc, #44]	; (312b4 <tls_interface_getopt+0xd0>)
   31286:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   3128a:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   3128e:	2000      	movs	r0, #0
   31290:	f1a3 0301 	sub.w	r3, r3, #1
   31294:	fab3 f383 	clz	r3, r3
   31298:	095b      	lsrs	r3, r3, #5
   3129a:	602b      	str	r3, [r5, #0]
   3129c:	e7b9      	b.n	31212 <tls_interface_getopt+0x2e>
   3129e:	2016      	movs	r0, #22
   312a0:	e7b7      	b.n	31212 <tls_interface_getopt+0x2e>
   312a2:	2009      	movs	r0, #9
   312a4:	e7b5      	b.n	31212 <tls_interface_getopt+0x2e>
   312a6:	2800      	cmp	r0, #0
   312a8:	d1f9      	bne.n	3129e <tls_interface_getopt+0xba>
   312aa:	6038      	str	r0, [r7, #0]
   312ac:	e7b1      	b.n	31212 <tls_interface_getopt+0x2e>
   312ae:	202a      	movs	r0, #42	; 0x2a
   312b0:	e7af      	b.n	31212 <tls_interface_getopt+0x2e>
   312b2:	bf00      	nop
   312b4:	20024b54 	.word	0x20024b54

000312b8 <tls_rpc_ip_event_handler>:
   312b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   312ba:	f248 0581 	movw	r5, #32897	; 0x8081
   312be:	42ab      	cmp	r3, r5
   312c0:	460c      	mov	r4, r1
   312c2:	d062      	beq.n	3138a <tls_rpc_ip_event_handler+0xd2>
   312c4:	f249 0182 	movw	r1, #36994	; 0x9082
   312c8:	428b      	cmp	r3, r1
   312ca:	4606      	mov	r6, r0
   312cc:	d02e      	beq.n	3132c <tls_rpc_ip_event_handler+0x74>
   312ce:	f248 0102 	movw	r1, #32770	; 0x8002
   312d2:	428b      	cmp	r3, r1
   312d4:	d001      	beq.n	312da <tls_rpc_ip_event_handler+0x22>
   312d6:	2001      	movs	r0, #1
   312d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   312da:	2c00      	cmp	r4, #0
   312dc:	d0fb      	beq.n	312d6 <tls_rpc_ip_event_handler+0x1e>
   312de:	6963      	ldr	r3, [r4, #20]
   312e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   312e4:	d002      	beq.n	312ec <tls_rpc_ip_event_handler+0x34>
   312e6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   312ea:	d1f4      	bne.n	312d6 <tls_rpc_ip_event_handler+0x1e>
   312ec:	6823      	ldr	r3, [r4, #0]
   312ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   312f2:	6023      	str	r3, [r4, #0]
   312f4:	6955      	ldr	r5, [r2, #20]
   312f6:	2d00      	cmp	r5, #0
   312f8:	d156      	bne.n	313a8 <tls_rpc_ip_event_handler+0xf0>
   312fa:	6823      	ldr	r3, [r4, #0]
   312fc:	0c1b      	lsrs	r3, r3, #16
   312fe:	041b      	lsls	r3, r3, #16
   31300:	f043 0305 	orr.w	r3, r3, #5
   31304:	6023      	str	r3, [r4, #0]
   31306:	6823      	ldr	r3, [r4, #0]
   31308:	00da      	lsls	r2, r3, #3
   3130a:	d50d      	bpl.n	31328 <tls_rpc_ip_event_handler+0x70>
   3130c:	4b2b      	ldr	r3, [pc, #172]	; (313bc <tls_rpc_ip_event_handler+0x104>)
   3130e:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   31312:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   31316:	2b02      	cmp	r3, #2
   31318:	d106      	bne.n	31328 <tls_rpc_ip_event_handler+0x70>
   3131a:	4630      	mov	r0, r6
   3131c:	4621      	mov	r1, r4
   3131e:	f7ff fb9b 	bl	30a58 <secure_client_socket>
   31322:	b108      	cbz	r0, 31328 <tls_rpc_ip_event_handler+0x70>
   31324:	2873      	cmp	r0, #115	; 0x73
   31326:	d142      	bne.n	313ae <tls_rpc_ip_event_handler+0xf6>
   31328:	2000      	movs	r0, #0
   3132a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3132c:	2c00      	cmp	r4, #0
   3132e:	d0fb      	beq.n	31328 <tls_rpc_ip_event_handler+0x70>
   31330:	6823      	ldr	r3, [r4, #0]
   31332:	b29b      	uxth	r3, r3
   31334:	2b0b      	cmp	r3, #11
   31336:	d1f7      	bne.n	31328 <tls_rpc_ip_event_handler+0x70>
   31338:	6915      	ldr	r5, [r2, #16]
   3133a:	2d00      	cmp	r5, #0
   3133c:	d134      	bne.n	313a8 <tls_rpc_ip_event_handler+0xf0>
   3133e:	6823      	ldr	r3, [r4, #0]
   31340:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   31344:	6023      	str	r3, [r4, #0]
   31346:	6823      	ldr	r3, [r4, #0]
   31348:	00db      	lsls	r3, r3, #3
   3134a:	d5ed      	bpl.n	31328 <tls_rpc_ip_event_handler+0x70>
   3134c:	4f1c      	ldr	r7, [pc, #112]	; (313c0 <tls_rpc_ip_event_handler+0x108>)
   3134e:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   31352:	b130      	cbz	r0, 31362 <tls_rpc_ip_event_handler+0xaa>
   31354:	f7ff fb18 	bl	30988 <nrf_free>
   31358:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   3135c:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   31360:	605d      	str	r5, [r3, #4]
   31362:	6823      	ldr	r3, [r4, #0]
   31364:	2000      	movs	r0, #0
   31366:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   3136a:	6023      	str	r3, [r4, #0]
   3136c:	6823      	ldr	r3, [r4, #0]
   3136e:	0c1b      	lsrs	r3, r3, #16
   31370:	041b      	lsls	r3, r3, #16
   31372:	f043 030c 	orr.w	r3, r3, #12
   31376:	6023      	str	r3, [r4, #0]
   31378:	6823      	ldr	r3, [r4, #0]
   3137a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3137e:	6023      	str	r3, [r4, #0]
   31380:	6823      	ldr	r3, [r4, #0]
   31382:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   31386:	6023      	str	r3, [r4, #0]
   31388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3138a:	2900      	cmp	r1, #0
   3138c:	d0cc      	beq.n	31328 <tls_rpc_ip_event_handler+0x70>
   3138e:	680b      	ldr	r3, [r1, #0]
   31390:	b29b      	uxth	r3, r3
   31392:	2b0a      	cmp	r3, #10
   31394:	d1c8      	bne.n	31328 <tls_rpc_ip_event_handler+0x70>
   31396:	6950      	ldr	r0, [r2, #20]
   31398:	b938      	cbnz	r0, 313aa <tls_rpc_ip_event_handler+0xf2>
   3139a:	680b      	ldr	r3, [r1, #0]
   3139c:	0c1b      	lsrs	r3, r3, #16
   3139e:	041b      	lsls	r3, r3, #16
   313a0:	f043 030b 	orr.w	r3, r3, #11
   313a4:	600b      	str	r3, [r1, #0]
   313a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   313a8:	4628      	mov	r0, r5
   313aa:	f003 f853 	bl	34454 <rpc_error_to_nrf_bsd_error>
   313ae:	6060      	str	r0, [r4, #4]
   313b0:	6823      	ldr	r3, [r4, #0]
   313b2:	2000      	movs	r0, #0
   313b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   313b8:	6023      	str	r3, [r4, #0]
   313ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   313bc:	20024b54 	.word	0x20024b54
   313c0:	20024c98 	.word	0x20024c98

000313c4 <rpc_dfu_event_handler>:
   313c4:	b508      	push	{r3, lr}
   313c6:	4a08      	ldr	r2, [pc, #32]	; (313e8 <rpc_dfu_event_handler+0x24>)
   313c8:	68c1      	ldr	r1, [r0, #12]
   313ca:	8812      	ldrh	r2, [r2, #0]
   313cc:	4603      	mov	r3, r0
   313ce:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   313d2:	d005      	beq.n	313e0 <rpc_dfu_event_handler+0x1c>
   313d4:	6800      	ldr	r0, [r0, #0]
   313d6:	b110      	cbz	r0, 313de <rpc_dfu_event_handler+0x1a>
   313d8:	f7fe ff06 	bl	301e8 <rpc_dfu_client_data_free>
   313dc:	2000      	movs	r0, #0
   313de:	bd08      	pop	{r3, pc}
   313e0:	4a02      	ldr	r2, [pc, #8]	; (313ec <rpc_dfu_event_handler+0x28>)
   313e2:	2001      	movs	r0, #1
   313e4:	6013      	str	r3, [r2, #0]
   313e6:	bd08      	pop	{r3, pc}
   313e8:	20029398 	.word	0x20029398
   313ec:	20024ce4 	.word	0x20024ce4

000313f0 <mfu_interface_init>:
   313f0:	2300      	movs	r3, #0
   313f2:	b510      	push	{r4, lr}
   313f4:	4808      	ldr	r0, [pc, #32]	; (31418 <mfu_interface_init+0x28>)
   313f6:	4909      	ldr	r1, [pc, #36]	; (3141c <mfu_interface_init+0x2c>)
   313f8:	4a09      	ldr	r2, [pc, #36]	; (31420 <mfu_interface_init+0x30>)
   313fa:	4c0a      	ldr	r4, [pc, #40]	; (31424 <mfu_interface_init+0x34>)
   313fc:	8003      	strh	r3, [r0, #0]
   313fe:	600b      	str	r3, [r1, #0]
   31400:	6013      	str	r3, [r2, #0]
   31402:	6023      	str	r3, [r4, #0]
   31404:	f7fe feba 	bl	3017c <rpc_dfu_client_init>
   31408:	b910      	cbnz	r0, 31410 <mfu_interface_init+0x20>
   3140a:	2301      	movs	r3, #1
   3140c:	6023      	str	r3, [r4, #0]
   3140e:	bd10      	pop	{r4, pc}
   31410:	f04f 30ff 	mov.w	r0, #4294967295
   31414:	bd10      	pop	{r4, pc}
   31416:	bf00      	nop
   31418:	20029398 	.word	0x20029398
   3141c:	20024ce4 	.word	0x20024ce4
   31420:	20024ce0 	.word	0x20024ce0
   31424:	20024cd8 	.word	0x20024cd8

00031428 <mfu_interface_open>:
   31428:	b508      	push	{r3, lr}
   3142a:	4b07      	ldr	r3, [pc, #28]	; (31448 <mfu_interface_open+0x20>)
   3142c:	681a      	ldr	r2, [r3, #0]
   3142e:	2a01      	cmp	r2, #1
   31430:	d103      	bne.n	3143a <mfu_interface_open+0x12>
   31432:	2202      	movs	r2, #2
   31434:	601a      	str	r2, [r3, #0]
   31436:	4805      	ldr	r0, [pc, #20]	; (3144c <mfu_interface_open+0x24>)
   31438:	bd08      	pop	{r3, pc}
   3143a:	2001      	movs	r0, #1
   3143c:	f7f5 fe0c 	bl	27058 <bsd_os_errno_set>
   31440:	f04f 30ff 	mov.w	r0, #4294967295
   31444:	bd08      	pop	{r3, pc}
   31446:	bf00      	nop
   31448:	20024cd8 	.word	0x20024cd8
   3144c:	49765432 	.word	0x49765432

00031450 <mfu_interface_close>:
   31450:	b5f0      	push	{r4, r5, r6, r7, lr}
   31452:	4c32      	ldr	r4, [pc, #200]	; (3151c <mfu_interface_close+0xcc>)
   31454:	b083      	sub	sp, #12
   31456:	6823      	ldr	r3, [r4, #0]
   31458:	1e9a      	subs	r2, r3, #2
   3145a:	2a01      	cmp	r2, #1
   3145c:	d857      	bhi.n	3150e <mfu_interface_close+0xbe>
   3145e:	2b03      	cmp	r3, #3
   31460:	d004      	beq.n	3146c <mfu_interface_close+0x1c>
   31462:	2301      	movs	r3, #1
   31464:	2000      	movs	r0, #0
   31466:	6023      	str	r3, [r4, #0]
   31468:	b003      	add	sp, #12
   3146a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3146c:	2100      	movs	r1, #0
   3146e:	4668      	mov	r0, sp
   31470:	f7fe fe8a 	bl	30188 <rpc_dfu_client_request_alloc>
   31474:	4603      	mov	r3, r0
   31476:	2800      	cmp	r0, #0
   31478:	d13d      	bne.n	314f6 <mfu_interface_close+0xa6>
   3147a:	2104      	movs	r1, #4
   3147c:	4e28      	ldr	r6, [pc, #160]	; (31520 <mfu_interface_close+0xd0>)
   3147e:	9800      	ldr	r0, [sp, #0]
   31480:	8832      	ldrh	r2, [r6, #0]
   31482:	7201      	strb	r1, [r0, #8]
   31484:	3201      	adds	r2, #1
   31486:	b292      	uxth	r2, r2
   31488:	0411      	lsls	r1, r2, #16
   3148a:	f041 0106 	orr.w	r1, r1, #6
   3148e:	4d25      	ldr	r5, [pc, #148]	; (31524 <mfu_interface_close+0xd4>)
   31490:	60c1      	str	r1, [r0, #12]
   31492:	7103      	strb	r3, [r0, #4]
   31494:	7143      	strb	r3, [r0, #5]
   31496:	7183      	strb	r3, [r0, #6]
   31498:	71c3      	strb	r3, [r0, #7]
   3149a:	7243      	strb	r3, [r0, #9]
   3149c:	7283      	strb	r3, [r0, #10]
   3149e:	72c3      	strb	r3, [r0, #11]
   314a0:	2106      	movs	r1, #6
   314a2:	8032      	strh	r2, [r6, #0]
   314a4:	602b      	str	r3, [r5, #0]
   314a6:	f7fe fe83 	bl	301b0 <rpc_dfu_client_request_send>
   314aa:	b9d8      	cbnz	r0, 314e4 <mfu_interface_close+0x94>
   314ac:	f04f 33ff 	mov.w	r3, #4294967295
   314b0:	ae02      	add	r6, sp, #8
   314b2:	4627      	mov	r7, r4
   314b4:	f846 3d04 	str.w	r3, [r6, #-4]!
   314b8:	e004      	b.n	314c4 <mfu_interface_close+0x74>
   314ba:	4631      	mov	r1, r6
   314bc:	4638      	mov	r0, r7
   314be:	f7f5 fd37 	bl	26f30 <bsd_os_timedwait>
   314c2:	b9f0      	cbnz	r0, 31502 <mfu_interface_close+0xb2>
   314c4:	6828      	ldr	r0, [r5, #0]
   314c6:	2800      	cmp	r0, #0
   314c8:	d0f7      	beq.n	314ba <mfu_interface_close+0x6a>
   314ca:	6905      	ldr	r5, [r0, #16]
   314cc:	f7fe fe84 	bl	301d8 <rpc_dfu_client_message_free>
   314d0:	2d00      	cmp	r5, #0
   314d2:	d0c6      	beq.n	31462 <mfu_interface_close+0x12>
   314d4:	4b14      	ldr	r3, [pc, #80]	; (31528 <mfu_interface_close+0xd8>)
   314d6:	2008      	movs	r0, #8
   314d8:	601d      	str	r5, [r3, #0]
   314da:	f7f5 fdbd 	bl	27058 <bsd_os_errno_set>
   314de:	f04f 30ff 	mov.w	r0, #4294967295
   314e2:	e7c1      	b.n	31468 <mfu_interface_close+0x18>
   314e4:	9800      	ldr	r0, [sp, #0]
   314e6:	6803      	ldr	r3, [r0, #0]
   314e8:	b11b      	cbz	r3, 314f2 <mfu_interface_close+0xa2>
   314ea:	4618      	mov	r0, r3
   314ec:	f7fe fe7c 	bl	301e8 <rpc_dfu_client_data_free>
   314f0:	9800      	ldr	r0, [sp, #0]
   314f2:	f7fe fe71 	bl	301d8 <rpc_dfu_client_message_free>
   314f6:	200c      	movs	r0, #12
   314f8:	f7f5 fdae 	bl	27058 <bsd_os_errno_set>
   314fc:	f04f 30ff 	mov.w	r0, #4294967295
   31500:	e7b2      	b.n	31468 <mfu_interface_close+0x18>
   31502:	203c      	movs	r0, #60	; 0x3c
   31504:	f7f5 fda8 	bl	27058 <bsd_os_errno_set>
   31508:	f04f 30ff 	mov.w	r0, #4294967295
   3150c:	e7ac      	b.n	31468 <mfu_interface_close+0x18>
   3150e:	2001      	movs	r0, #1
   31510:	f7f5 fda2 	bl	27058 <bsd_os_errno_set>
   31514:	f04f 30ff 	mov.w	r0, #4294967295
   31518:	e7a6      	b.n	31468 <mfu_interface_close+0x18>
   3151a:	bf00      	nop
   3151c:	20024cd8 	.word	0x20024cd8
   31520:	20029398 	.word	0x20029398
   31524:	20024ce4 	.word	0x20024ce4
   31528:	20024cdc 	.word	0x20024cdc

0003152c <mfu_interface_sendto>:
   3152c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   31530:	4e64      	ldr	r6, [pc, #400]	; (316c4 <mfu_interface_sendto+0x198>)
   31532:	460f      	mov	r7, r1
   31534:	6831      	ldr	r1, [r6, #0]
   31536:	4615      	mov	r5, r2
   31538:	1e8a      	subs	r2, r1, #2
   3153a:	2a01      	cmp	r2, #1
   3153c:	b082      	sub	sp, #8
   3153e:	f200 80b4 	bhi.w	316aa <mfu_interface_sendto+0x17e>
   31542:	2f00      	cmp	r7, #0
   31544:	f000 80a5 	beq.w	31692 <mfu_interface_sendto+0x166>
   31548:	2d00      	cmp	r5, #0
   3154a:	f000 80a2 	beq.w	31692 <mfu_interface_sendto+0x166>
   3154e:	2b00      	cmp	r3, #0
   31550:	f040 80b1 	bne.w	316b6 <mfu_interface_sendto+0x18a>
   31554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   31556:	2b00      	cmp	r3, #0
   31558:	f040 80a1 	bne.w	3169e <mfu_interface_sendto+0x172>
   3155c:	2902      	cmp	r1, #2
   3155e:	d04f      	beq.n	31600 <mfu_interface_sendto+0xd4>
   31560:	46e8      	mov	r8, sp
   31562:	4640      	mov	r0, r8
   31564:	4629      	mov	r1, r5
   31566:	f7fe fe0f 	bl	30188 <rpc_dfu_client_request_alloc>
   3156a:	4606      	mov	r6, r0
   3156c:	b140      	cbz	r0, 31580 <mfu_interface_sendto+0x54>
   3156e:	200c      	movs	r0, #12
   31570:	f7f5 fd72 	bl	27058 <bsd_os_errno_set>
   31574:	f04f 35ff 	mov.w	r5, #4294967295
   31578:	4628      	mov	r0, r5
   3157a:	b002      	add	sp, #8
   3157c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   31580:	9b00      	ldr	r3, [sp, #0]
   31582:	4639      	mov	r1, r7
   31584:	6818      	ldr	r0, [r3, #0]
   31586:	462a      	mov	r2, r5
   31588:	f00f f848 	bl	4061c <memcpy>
   3158c:	2104      	movs	r1, #4
   3158e:	4c4e      	ldr	r4, [pc, #312]	; (316c8 <mfu_interface_sendto+0x19c>)
   31590:	9800      	ldr	r0, [sp, #0]
   31592:	8823      	ldrh	r3, [r4, #0]
   31594:	6045      	str	r5, [r0, #4]
   31596:	3301      	adds	r3, #1
   31598:	b29b      	uxth	r3, r3
   3159a:	041a      	lsls	r2, r3, #16
   3159c:	8023      	strh	r3, [r4, #0]
   3159e:	430a      	orrs	r2, r1
   315a0:	4c4a      	ldr	r4, [pc, #296]	; (316cc <mfu_interface_sendto+0x1a0>)
   315a2:	60c2      	str	r2, [r0, #12]
   315a4:	7246      	strb	r6, [r0, #9]
   315a6:	7286      	strb	r6, [r0, #10]
   315a8:	72c6      	strb	r6, [r0, #11]
   315aa:	7201      	strb	r1, [r0, #8]
   315ac:	6026      	str	r6, [r4, #0]
   315ae:	f7fe fdff 	bl	301b0 <rpc_dfu_client_request_send>
   315b2:	2800      	cmp	r0, #0
   315b4:	d163      	bne.n	3167e <mfu_interface_sendto+0x152>
   315b6:	f04f 33ff 	mov.w	r3, #4294967295
   315ba:	ae02      	add	r6, sp, #8
   315bc:	4f41      	ldr	r7, [pc, #260]	; (316c4 <mfu_interface_sendto+0x198>)
   315be:	f846 3d04 	str.w	r3, [r6, #-4]!
   315c2:	e004      	b.n	315ce <mfu_interface_sendto+0xa2>
   315c4:	4631      	mov	r1, r6
   315c6:	4638      	mov	r0, r7
   315c8:	f7f5 fcb2 	bl	26f30 <bsd_os_timedwait>
   315cc:	b978      	cbnz	r0, 315ee <mfu_interface_sendto+0xc2>
   315ce:	6820      	ldr	r0, [r4, #0]
   315d0:	2800      	cmp	r0, #0
   315d2:	d0f7      	beq.n	315c4 <mfu_interface_sendto+0x98>
   315d4:	6904      	ldr	r4, [r0, #16]
   315d6:	f7fe fdff 	bl	301d8 <rpc_dfu_client_message_free>
   315da:	2c00      	cmp	r4, #0
   315dc:	d0cc      	beq.n	31578 <mfu_interface_sendto+0x4c>
   315de:	4b3c      	ldr	r3, [pc, #240]	; (316d0 <mfu_interface_sendto+0x1a4>)
   315e0:	2008      	movs	r0, #8
   315e2:	601c      	str	r4, [r3, #0]
   315e4:	f04f 35ff 	mov.w	r5, #4294967295
   315e8:	f7f5 fd36 	bl	27058 <bsd_os_errno_set>
   315ec:	e7c4      	b.n	31578 <mfu_interface_sendto+0x4c>
   315ee:	f04f 35ff 	mov.w	r5, #4294967295
   315f2:	203c      	movs	r0, #60	; 0x3c
   315f4:	f7f5 fd30 	bl	27058 <bsd_os_errno_set>
   315f8:	4628      	mov	r0, r5
   315fa:	b002      	add	sp, #8
   315fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   31600:	46e8      	mov	r8, sp
   31602:	4619      	mov	r1, r3
   31604:	4640      	mov	r0, r8
   31606:	f7fe fdbf 	bl	30188 <rpc_dfu_client_request_alloc>
   3160a:	4602      	mov	r2, r0
   3160c:	2800      	cmp	r0, #0
   3160e:	d1ae      	bne.n	3156e <mfu_interface_sendto+0x42>
   31610:	f04f 0c08 	mov.w	ip, #8
   31614:	492c      	ldr	r1, [pc, #176]	; (316c8 <mfu_interface_sendto+0x19c>)
   31616:	482f      	ldr	r0, [pc, #188]	; (316d4 <mfu_interface_sendto+0x1a8>)
   31618:	880b      	ldrh	r3, [r1, #0]
   3161a:	6804      	ldr	r4, [r0, #0]
   3161c:	3301      	adds	r3, #1
   3161e:	9800      	ldr	r0, [sp, #0]
   31620:	b29b      	uxth	r3, r3
   31622:	800b      	strh	r3, [r1, #0]
   31624:	041b      	lsls	r3, r3, #16
   31626:	f043 0303 	orr.w	r3, r3, #3
   3162a:	6104      	str	r4, [r0, #16]
   3162c:	4c27      	ldr	r4, [pc, #156]	; (316cc <mfu_interface_sendto+0x1a0>)
   3162e:	60c3      	str	r3, [r0, #12]
   31630:	7102      	strb	r2, [r0, #4]
   31632:	7142      	strb	r2, [r0, #5]
   31634:	7182      	strb	r2, [r0, #6]
   31636:	71c2      	strb	r2, [r0, #7]
   31638:	7242      	strb	r2, [r0, #9]
   3163a:	7282      	strb	r2, [r0, #10]
   3163c:	72c2      	strb	r2, [r0, #11]
   3163e:	f880 c008 	strb.w	ip, [r0, #8]
   31642:	2103      	movs	r1, #3
   31644:	6022      	str	r2, [r4, #0]
   31646:	f7fe fdb3 	bl	301b0 <rpc_dfu_client_request_send>
   3164a:	b9c0      	cbnz	r0, 3167e <mfu_interface_sendto+0x152>
   3164c:	f04f 33ff 	mov.w	r3, #4294967295
   31650:	f10d 0908 	add.w	r9, sp, #8
   31654:	f849 3d04 	str.w	r3, [r9, #-4]!
   31658:	46b2      	mov	sl, r6
   3165a:	e005      	b.n	31668 <mfu_interface_sendto+0x13c>
   3165c:	4649      	mov	r1, r9
   3165e:	4650      	mov	r0, sl
   31660:	f7f5 fc66 	bl	26f30 <bsd_os_timedwait>
   31664:	2800      	cmp	r0, #0
   31666:	d1c2      	bne.n	315ee <mfu_interface_sendto+0xc2>
   31668:	6820      	ldr	r0, [r4, #0]
   3166a:	2800      	cmp	r0, #0
   3166c:	d0f6      	beq.n	3165c <mfu_interface_sendto+0x130>
   3166e:	6904      	ldr	r4, [r0, #16]
   31670:	f7fe fdb2 	bl	301d8 <rpc_dfu_client_message_free>
   31674:	2c00      	cmp	r4, #0
   31676:	d1b2      	bne.n	315de <mfu_interface_sendto+0xb2>
   31678:	2303      	movs	r3, #3
   3167a:	6033      	str	r3, [r6, #0]
   3167c:	e771      	b.n	31562 <mfu_interface_sendto+0x36>
   3167e:	9800      	ldr	r0, [sp, #0]
   31680:	6803      	ldr	r3, [r0, #0]
   31682:	b11b      	cbz	r3, 3168c <mfu_interface_sendto+0x160>
   31684:	4618      	mov	r0, r3
   31686:	f7fe fdaf 	bl	301e8 <rpc_dfu_client_data_free>
   3168a:	9800      	ldr	r0, [sp, #0]
   3168c:	f7fe fda4 	bl	301d8 <rpc_dfu_client_message_free>
   31690:	e76d      	b.n	3156e <mfu_interface_sendto+0x42>
   31692:	2016      	movs	r0, #22
   31694:	f7f5 fce0 	bl	27058 <bsd_os_errno_set>
   31698:	f04f 35ff 	mov.w	r5, #4294967295
   3169c:	e76c      	b.n	31578 <mfu_interface_sendto+0x4c>
   3169e:	2038      	movs	r0, #56	; 0x38
   316a0:	f7f5 fcda 	bl	27058 <bsd_os_errno_set>
   316a4:	f04f 35ff 	mov.w	r5, #4294967295
   316a8:	e766      	b.n	31578 <mfu_interface_sendto+0x4c>
   316aa:	2001      	movs	r0, #1
   316ac:	f7f5 fcd4 	bl	27058 <bsd_os_errno_set>
   316b0:	f04f 35ff 	mov.w	r5, #4294967295
   316b4:	e760      	b.n	31578 <mfu_interface_sendto+0x4c>
   316b6:	202d      	movs	r0, #45	; 0x2d
   316b8:	f7f5 fcce 	bl	27058 <bsd_os_errno_set>
   316bc:	f04f 35ff 	mov.w	r5, #4294967295
   316c0:	e75a      	b.n	31578 <mfu_interface_sendto+0x4c>
   316c2:	bf00      	nop
   316c4:	20024cd8 	.word	0x20024cd8
   316c8:	20029398 	.word	0x20029398
   316cc:	20024ce4 	.word	0x20024ce4
   316d0:	20024cdc 	.word	0x20024cdc
   316d4:	20024ce0 	.word	0x20024ce0

000316d8 <mfu_interface_setopt>:
   316d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   316da:	4846      	ldr	r0, [pc, #280]	; (317f4 <mfu_interface_setopt+0x11c>)
   316dc:	b083      	sub	sp, #12
   316de:	6800      	ldr	r0, [r0, #0]
   316e0:	3802      	subs	r0, #2
   316e2:	2801      	cmp	r0, #1
   316e4:	d877      	bhi.n	317d6 <mfu_interface_setopt+0xfe>
   316e6:	f240 2003 	movw	r0, #515	; 0x203
   316ea:	4281      	cmp	r1, r0
   316ec:	d16d      	bne.n	317ca <mfu_interface_setopt+0xf2>
   316ee:	3a04      	subs	r2, #4
   316f0:	2a03      	cmp	r2, #3
   316f2:	d85c      	bhi.n	317ae <mfu_interface_setopt+0xd6>
   316f4:	e8df f002 	tbb	[pc, r2]
   316f8:	514e024b 	.word	0x514e024b
   316fc:	2407      	movs	r4, #7
   316fe:	4625      	mov	r5, r4
   31700:	2100      	movs	r1, #0
   31702:	4668      	mov	r0, sp
   31704:	f7fe fd40 	bl	30188 <rpc_dfu_client_request_alloc>
   31708:	4603      	mov	r3, r0
   3170a:	2800      	cmp	r0, #0
   3170c:	d138      	bne.n	31780 <mfu_interface_setopt+0xa8>
   3170e:	2704      	movs	r7, #4
   31710:	4e39      	ldr	r6, [pc, #228]	; (317f8 <mfu_interface_setopt+0x120>)
   31712:	9800      	ldr	r0, [sp, #0]
   31714:	8832      	ldrh	r2, [r6, #0]
   31716:	4629      	mov	r1, r5
   31718:	3201      	adds	r2, #1
   3171a:	b292      	uxth	r2, r2
   3171c:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   31720:	4c36      	ldr	r4, [pc, #216]	; (317fc <mfu_interface_setopt+0x124>)
   31722:	60c5      	str	r5, [r0, #12]
   31724:	7103      	strb	r3, [r0, #4]
   31726:	7143      	strb	r3, [r0, #5]
   31728:	7183      	strb	r3, [r0, #6]
   3172a:	71c3      	strb	r3, [r0, #7]
   3172c:	7243      	strb	r3, [r0, #9]
   3172e:	7283      	strb	r3, [r0, #10]
   31730:	72c3      	strb	r3, [r0, #11]
   31732:	7207      	strb	r7, [r0, #8]
   31734:	8032      	strh	r2, [r6, #0]
   31736:	6023      	str	r3, [r4, #0]
   31738:	f7fe fd3a 	bl	301b0 <rpc_dfu_client_request_send>
   3173c:	b9b8      	cbnz	r0, 3176e <mfu_interface_setopt+0x96>
   3173e:	f04f 33ff 	mov.w	r3, #4294967295
   31742:	ad02      	add	r5, sp, #8
   31744:	4e2b      	ldr	r6, [pc, #172]	; (317f4 <mfu_interface_setopt+0x11c>)
   31746:	f845 3d04 	str.w	r3, [r5, #-4]!
   3174a:	e005      	b.n	31758 <mfu_interface_setopt+0x80>
   3174c:	4629      	mov	r1, r5
   3174e:	4630      	mov	r0, r6
   31750:	f7f5 fbee 	bl	26f30 <bsd_os_timedwait>
   31754:	2800      	cmp	r0, #0
   31756:	d131      	bne.n	317bc <mfu_interface_setopt+0xe4>
   31758:	6820      	ldr	r0, [r4, #0]
   3175a:	2800      	cmp	r0, #0
   3175c:	d0f6      	beq.n	3174c <mfu_interface_setopt+0x74>
   3175e:	6904      	ldr	r4, [r0, #16]
   31760:	f7fe fd3a 	bl	301d8 <rpc_dfu_client_message_free>
   31764:	2c00      	cmp	r4, #0
   31766:	d13c      	bne.n	317e2 <mfu_interface_setopt+0x10a>
   31768:	4620      	mov	r0, r4
   3176a:	b003      	add	sp, #12
   3176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3176e:	9800      	ldr	r0, [sp, #0]
   31770:	6803      	ldr	r3, [r0, #0]
   31772:	b11b      	cbz	r3, 3177c <mfu_interface_setopt+0xa4>
   31774:	4618      	mov	r0, r3
   31776:	f7fe fd37 	bl	301e8 <rpc_dfu_client_data_free>
   3177a:	9800      	ldr	r0, [sp, #0]
   3177c:	f7fe fd2c 	bl	301d8 <rpc_dfu_client_message_free>
   31780:	200c      	movs	r0, #12
   31782:	f7f5 fc69 	bl	27058 <bsd_os_errno_set>
   31786:	f04f 30ff 	mov.w	r0, #4294967295
   3178a:	b003      	add	sp, #12
   3178c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3178e:	2405      	movs	r4, #5
   31790:	4625      	mov	r5, r4
   31792:	e7b5      	b.n	31700 <mfu_interface_setopt+0x28>
   31794:	2408      	movs	r4, #8
   31796:	4625      	mov	r5, r4
   31798:	e7b2      	b.n	31700 <mfu_interface_setopt+0x28>
   3179a:	b1b3      	cbz	r3, 317ca <mfu_interface_setopt+0xf2>
   3179c:	9a08      	ldr	r2, [sp, #32]
   3179e:	2a04      	cmp	r2, #4
   317a0:	d113      	bne.n	317ca <mfu_interface_setopt+0xf2>
   317a2:	2000      	movs	r0, #0
   317a4:	681a      	ldr	r2, [r3, #0]
   317a6:	4b16      	ldr	r3, [pc, #88]	; (31800 <mfu_interface_setopt+0x128>)
   317a8:	601a      	str	r2, [r3, #0]
   317aa:	b003      	add	sp, #12
   317ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   317ae:	202a      	movs	r0, #42	; 0x2a
   317b0:	f7f5 fc52 	bl	27058 <bsd_os_errno_set>
   317b4:	f04f 30ff 	mov.w	r0, #4294967295
   317b8:	b003      	add	sp, #12
   317ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   317bc:	203c      	movs	r0, #60	; 0x3c
   317be:	f7f5 fc4b 	bl	27058 <bsd_os_errno_set>
   317c2:	f04f 30ff 	mov.w	r0, #4294967295
   317c6:	b003      	add	sp, #12
   317c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   317ca:	2016      	movs	r0, #22
   317cc:	f7f5 fc44 	bl	27058 <bsd_os_errno_set>
   317d0:	f04f 30ff 	mov.w	r0, #4294967295
   317d4:	e7c9      	b.n	3176a <mfu_interface_setopt+0x92>
   317d6:	2001      	movs	r0, #1
   317d8:	f7f5 fc3e 	bl	27058 <bsd_os_errno_set>
   317dc:	f04f 30ff 	mov.w	r0, #4294967295
   317e0:	e7c3      	b.n	3176a <mfu_interface_setopt+0x92>
   317e2:	4b08      	ldr	r3, [pc, #32]	; (31804 <mfu_interface_setopt+0x12c>)
   317e4:	2008      	movs	r0, #8
   317e6:	601c      	str	r4, [r3, #0]
   317e8:	f7f5 fc36 	bl	27058 <bsd_os_errno_set>
   317ec:	f04f 30ff 	mov.w	r0, #4294967295
   317f0:	e7bb      	b.n	3176a <mfu_interface_setopt+0x92>
   317f2:	bf00      	nop
   317f4:	20024cd8 	.word	0x20024cd8
   317f8:	20029398 	.word	0x20029398
   317fc:	20024ce4 	.word	0x20024ce4
   31800:	20024ce0 	.word	0x20024ce0
   31804:	20024cdc 	.word	0x20024cdc

00031808 <mfu_interface_getopt>:
   31808:	f240 2003 	movw	r0, #515	; 0x203
   3180c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31810:	4281      	cmp	r1, r0
   31812:	b082      	sub	sp, #8
   31814:	9e08      	ldr	r6, [sp, #32]
   31816:	f040 80ae 	bne.w	31976 <mfu_interface_getopt+0x16e>
   3181a:	461d      	mov	r5, r3
   3181c:	2b00      	cmp	r3, #0
   3181e:	f000 80aa 	beq.w	31976 <mfu_interface_getopt+0x16e>
   31822:	2e00      	cmp	r6, #0
   31824:	f000 80a7 	beq.w	31976 <mfu_interface_getopt+0x16e>
   31828:	4b5e      	ldr	r3, [pc, #376]	; (319a4 <mfu_interface_getopt+0x19c>)
   3182a:	681b      	ldr	r3, [r3, #0]
   3182c:	3b02      	subs	r3, #2
   3182e:	2b01      	cmp	r3, #1
   31830:	f200 80a7 	bhi.w	31982 <mfu_interface_getopt+0x17a>
   31834:	3a01      	subs	r2, #1
   31836:	2a13      	cmp	r2, #19
   31838:	d879      	bhi.n	3192e <mfu_interface_getopt+0x126>
   3183a:	e8df f002 	tbb	[pc, r2]
   3183e:	5f17      	.short	0x5f17
   31840:	78787878 	.word	0x78787878
   31844:	78787872 	.word	0x78787872
   31848:	78787878 	.word	0x78787878
   3184c:	78787878 	.word	0x78787878
   31850:	0a78      	.short	0x0a78
   31852:	6833      	ldr	r3, [r6, #0]
   31854:	2b04      	cmp	r3, #4
   31856:	f040 808e 	bne.w	31976 <mfu_interface_getopt+0x16e>
   3185a:	2200      	movs	r2, #0
   3185c:	4610      	mov	r0, r2
   3185e:	4b52      	ldr	r3, [pc, #328]	; (319a8 <mfu_interface_getopt+0x1a0>)
   31860:	6819      	ldr	r1, [r3, #0]
   31862:	601a      	str	r2, [r3, #0]
   31864:	6029      	str	r1, [r5, #0]
   31866:	b002      	add	sp, #8
   31868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3186c:	6833      	ldr	r3, [r6, #0]
   3186e:	2b24      	cmp	r3, #36	; 0x24
   31870:	f040 8081 	bne.w	31976 <mfu_interface_getopt+0x16e>
   31874:	2401      	movs	r4, #1
   31876:	46a0      	mov	r8, r4
   31878:	2100      	movs	r1, #0
   3187a:	4668      	mov	r0, sp
   3187c:	f7fe fc84 	bl	30188 <rpc_dfu_client_request_alloc>
   31880:	2800      	cmp	r0, #0
   31882:	d146      	bne.n	31912 <mfu_interface_getopt+0x10a>
   31884:	4949      	ldr	r1, [pc, #292]	; (319ac <mfu_interface_getopt+0x1a4>)
   31886:	9b00      	ldr	r3, [sp, #0]
   31888:	880a      	ldrh	r2, [r1, #0]
   3188a:	f1b8 0f03 	cmp.w	r8, #3
   3188e:	f102 0201 	add.w	r2, r2, #1
   31892:	b292      	uxth	r2, r2
   31894:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   31898:	7118      	strb	r0, [r3, #4]
   3189a:	800a      	strh	r2, [r1, #0]
   3189c:	60dc      	str	r4, [r3, #12]
   3189e:	7158      	strb	r0, [r3, #5]
   318a0:	7198      	strb	r0, [r3, #6]
   318a2:	71d8      	strb	r0, [r3, #7]
   318a4:	d04b      	beq.n	3193e <mfu_interface_getopt+0x136>
   318a6:	2104      	movs	r1, #4
   318a8:	2200      	movs	r2, #0
   318aa:	4f41      	ldr	r7, [pc, #260]	; (319b0 <mfu_interface_getopt+0x1a8>)
   318ac:	6099      	str	r1, [r3, #8]
   318ae:	4618      	mov	r0, r3
   318b0:	4641      	mov	r1, r8
   318b2:	603a      	str	r2, [r7, #0]
   318b4:	f7fe fc7c 	bl	301b0 <rpc_dfu_client_request_send>
   318b8:	2800      	cmp	r0, #0
   318ba:	d14d      	bne.n	31958 <mfu_interface_getopt+0x150>
   318bc:	f04f 33ff 	mov.w	r3, #4294967295
   318c0:	ac02      	add	r4, sp, #8
   318c2:	f844 3d04 	str.w	r3, [r4, #-4]!
   318c6:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 319a4 <mfu_interface_getopt+0x19c>
   318ca:	e005      	b.n	318d8 <mfu_interface_getopt+0xd0>
   318cc:	4621      	mov	r1, r4
   318ce:	4640      	mov	r0, r8
   318d0:	f7f5 fb2e 	bl	26f30 <bsd_os_timedwait>
   318d4:	2800      	cmp	r0, #0
   318d6:	d137      	bne.n	31948 <mfu_interface_getopt+0x140>
   318d8:	6839      	ldr	r1, [r7, #0]
   318da:	2900      	cmp	r1, #0
   318dc:	d0f6      	beq.n	318cc <mfu_interface_getopt+0xc4>
   318de:	690c      	ldr	r4, [r1, #16]
   318e0:	2c00      	cmp	r4, #0
   318e2:	d154      	bne.n	3198e <mfu_interface_getopt+0x186>
   318e4:	6832      	ldr	r2, [r6, #0]
   318e6:	3114      	adds	r1, #20
   318e8:	4628      	mov	r0, r5
   318ea:	f00e fe97 	bl	4061c <memcpy>
   318ee:	6838      	ldr	r0, [r7, #0]
   318f0:	f7fe fc72 	bl	301d8 <rpc_dfu_client_message_free>
   318f4:	4620      	mov	r0, r4
   318f6:	b002      	add	sp, #8
   318f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   318fc:	6833      	ldr	r3, [r6, #0]
   318fe:	2b04      	cmp	r3, #4
   31900:	d139      	bne.n	31976 <mfu_interface_getopt+0x16e>
   31902:	2402      	movs	r4, #2
   31904:	2100      	movs	r1, #0
   31906:	4668      	mov	r0, sp
   31908:	46a0      	mov	r8, r4
   3190a:	f7fe fc3d 	bl	30188 <rpc_dfu_client_request_alloc>
   3190e:	2800      	cmp	r0, #0
   31910:	d0b8      	beq.n	31884 <mfu_interface_getopt+0x7c>
   31912:	200c      	movs	r0, #12
   31914:	f7f5 fba0 	bl	27058 <bsd_os_errno_set>
   31918:	f04f 30ff 	mov.w	r0, #4294967295
   3191c:	b002      	add	sp, #8
   3191e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31922:	6833      	ldr	r3, [r6, #0]
   31924:	2b04      	cmp	r3, #4
   31926:	d126      	bne.n	31976 <mfu_interface_getopt+0x16e>
   31928:	2409      	movs	r4, #9
   3192a:	46a0      	mov	r8, r4
   3192c:	e7a4      	b.n	31878 <mfu_interface_getopt+0x70>
   3192e:	202a      	movs	r0, #42	; 0x2a
   31930:	f7f5 fb92 	bl	27058 <bsd_os_errno_set>
   31934:	f04f 30ff 	mov.w	r0, #4294967295
   31938:	b002      	add	sp, #8
   3193a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3193e:	4a1d      	ldr	r2, [pc, #116]	; (319b4 <mfu_interface_getopt+0x1ac>)
   31940:	2108      	movs	r1, #8
   31942:	6812      	ldr	r2, [r2, #0]
   31944:	611a      	str	r2, [r3, #16]
   31946:	e7af      	b.n	318a8 <mfu_interface_getopt+0xa0>
   31948:	203c      	movs	r0, #60	; 0x3c
   3194a:	f7f5 fb85 	bl	27058 <bsd_os_errno_set>
   3194e:	f04f 30ff 	mov.w	r0, #4294967295
   31952:	b002      	add	sp, #8
   31954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31958:	9800      	ldr	r0, [sp, #0]
   3195a:	6803      	ldr	r3, [r0, #0]
   3195c:	b11b      	cbz	r3, 31966 <mfu_interface_getopt+0x15e>
   3195e:	4618      	mov	r0, r3
   31960:	f7fe fc42 	bl	301e8 <rpc_dfu_client_data_free>
   31964:	9800      	ldr	r0, [sp, #0]
   31966:	f7fe fc37 	bl	301d8 <rpc_dfu_client_message_free>
   3196a:	200c      	movs	r0, #12
   3196c:	f7f5 fb74 	bl	27058 <bsd_os_errno_set>
   31970:	f04f 30ff 	mov.w	r0, #4294967295
   31974:	e7d2      	b.n	3191c <mfu_interface_getopt+0x114>
   31976:	2016      	movs	r0, #22
   31978:	f7f5 fb6e 	bl	27058 <bsd_os_errno_set>
   3197c:	f04f 30ff 	mov.w	r0, #4294967295
   31980:	e771      	b.n	31866 <mfu_interface_getopt+0x5e>
   31982:	2001      	movs	r0, #1
   31984:	f7f5 fb68 	bl	27058 <bsd_os_errno_set>
   31988:	f04f 30ff 	mov.w	r0, #4294967295
   3198c:	e76b      	b.n	31866 <mfu_interface_getopt+0x5e>
   3198e:	4b06      	ldr	r3, [pc, #24]	; (319a8 <mfu_interface_getopt+0x1a0>)
   31990:	2008      	movs	r0, #8
   31992:	601c      	str	r4, [r3, #0]
   31994:	f7f5 fb60 	bl	27058 <bsd_os_errno_set>
   31998:	6838      	ldr	r0, [r7, #0]
   3199a:	f7fe fc1d 	bl	301d8 <rpc_dfu_client_message_free>
   3199e:	f04f 30ff 	mov.w	r0, #4294967295
   319a2:	e760      	b.n	31866 <mfu_interface_getopt+0x5e>
   319a4:	20024cd8 	.word	0x20024cd8
   319a8:	20024cdc 	.word	0x20024cdc
   319ac:	20029398 	.word	0x20029398
   319b0:	20024ce4 	.word	0x20024ce4
   319b4:	20024ce0 	.word	0x20024ce0

000319b8 <bsd_platform_error_handler>:
   319b8:	b508      	push	{r3, lr}
   319ba:	f00b ff68 	bl	3d88e <bsd_recoverable_error_handler>
   319be:	bd08      	pop	{r3, pc}

000319c0 <bsd_init>:
   319c0:	b510      	push	{r4, lr}
   319c2:	4c06      	ldr	r4, [pc, #24]	; (319dc <bsd_init+0x1c>)
   319c4:	7823      	ldrb	r3, [r4, #0]
   319c6:	b92b      	cbnz	r3, 319d4 <bsd_init+0x14>
   319c8:	f000 f826 	bl	31a18 <bsd_platform_init>
   319cc:	b908      	cbnz	r0, 319d2 <bsd_init+0x12>
   319ce:	2301      	movs	r3, #1
   319d0:	7023      	strb	r3, [r4, #0]
   319d2:	bd10      	pop	{r4, pc}
   319d4:	f04f 30ff 	mov.w	r0, #4294967295
   319d8:	bd10      	pop	{r4, pc}
   319da:	bf00      	nop
   319dc:	2002bd40 	.word	0x2002bd40

000319e0 <bsd_shutdown>:
   319e0:	b510      	push	{r4, lr}
   319e2:	4c05      	ldr	r4, [pc, #20]	; (319f8 <bsd_shutdown+0x18>)
   319e4:	7823      	ldrb	r3, [r4, #0]
   319e6:	b123      	cbz	r3, 319f2 <bsd_shutdown+0x12>
   319e8:	f000 f87c 	bl	31ae4 <bsd_platform_shutdown>
   319ec:	b900      	cbnz	r0, 319f0 <bsd_shutdown+0x10>
   319ee:	7020      	strb	r0, [r4, #0]
   319f0:	bd10      	pop	{r4, pc}
   319f2:	f04f 30ff 	mov.w	r0, #4294967295
   319f6:	bd10      	pop	{r4, pc}
   319f8:	2002bd40 	.word	0x2002bd40

000319fc <unimplemented_method>:
   319fc:	b40f      	push	{r0, r1, r2, r3}
   319fe:	b508      	push	{r3, lr}
   31a00:	202d      	movs	r0, #45	; 0x2d
   31a02:	f7f5 fb29 	bl	27058 <bsd_os_errno_set>
   31a06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   31a0a:	f04f 30ff 	mov.w	r0, #4294967295
   31a0e:	b004      	add	sp, #16
   31a10:	4770      	bx	lr
   31a12:	bf00      	nop

00031a14 <rpc_transport_ipc_fault_handler>:
   31a14:	f7ff bfd0 	b.w	319b8 <bsd_platform_error_handler>

00031a18 <bsd_platform_init>:
   31a18:	b5f0      	push	{r4, r5, r6, r7, lr}
   31a1a:	b093      	sub	sp, #76	; 0x4c
   31a1c:	f7fe fe1c 	bl	30658 <nrf_mem_init>
   31a20:	2800      	cmp	r0, #0
   31a22:	d14c      	bne.n	31abe <bsd_platform_init+0xa6>
   31a24:	4928      	ldr	r1, [pc, #160]	; (31ac8 <bsd_platform_init+0xb0>)
   31a26:	a801      	add	r0, sp, #4
   31a28:	f7fe fe8a 	bl	30740 <nrf_mem_register>
   31a2c:	2800      	cmp	r0, #0
   31a2e:	d146      	bne.n	31abe <bsd_platform_init+0xa6>
   31a30:	f7f5 fc2a 	bl	27288 <bsd_os_init>
   31a34:	f004 fb3e 	bl	360b4 <rpc_framework_init>
   31a38:	2800      	cmp	r0, #0
   31a3a:	d140      	bne.n	31abe <bsd_platform_init+0xa6>
   31a3c:	2320      	movs	r3, #32
   31a3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   31a42:	2208      	movs	r2, #8
   31a44:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   31a48:	4f20      	ldr	r7, [pc, #128]	; (31acc <bsd_platform_init+0xb4>)
   31a4a:	4e21      	ldr	r6, [pc, #132]	; (31ad0 <bsd_platform_init+0xb8>)
   31a4c:	9303      	str	r3, [sp, #12]
   31a4e:	9305      	str	r3, [sp, #20]
   31a50:	9307      	str	r3, [sp, #28]
   31a52:	4d20      	ldr	r5, [pc, #128]	; (31ad4 <bsd_platform_init+0xbc>)
   31a54:	9109      	str	r1, [sp, #36]	; 0x24
   31a56:	910d      	str	r1, [sp, #52]	; 0x34
   31a58:	4c1f      	ldr	r4, [pc, #124]	; (31ad8 <bsd_platform_init+0xc0>)
   31a5a:	4920      	ldr	r1, [pc, #128]	; (31adc <bsd_platform_init+0xc4>)
   31a5c:	4b20      	ldr	r3, [pc, #128]	; (31ae0 <bsd_platform_init+0xc8>)
   31a5e:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   31a62:	eb0d 0002 	add.w	r0, sp, r2
   31a66:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   31a6a:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
   31a6e:	9702      	str	r7, [sp, #8]
   31a70:	9604      	str	r6, [sp, #16]
   31a72:	9506      	str	r5, [sp, #24]
   31a74:	9408      	str	r4, [sp, #32]
   31a76:	910a      	str	r1, [sp, #40]	; 0x28
   31a78:	930c      	str	r3, [sp, #48]	; 0x30
   31a7a:	f000 fbf1 	bl	32260 <rpc_transport_ipc_init>
   31a7e:	b108      	cbz	r0, 31a84 <bsd_platform_init+0x6c>
   31a80:	b013      	add	sp, #76	; 0x4c
   31a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31a84:	f004 f87e 	bl	35b84 <interface_init>
   31a88:	b9c8      	cbnz	r0, 31abe <bsd_platform_init+0xa6>
   31a8a:	f7fe fa2f 	bl	2feec <at_interface_init>
   31a8e:	b9b0      	cbnz	r0, 31abe <bsd_platform_init+0xa6>
   31a90:	f002 fd32 	bl	344f8 <ip_interface_init>
   31a94:	b998      	cbnz	r0, 31abe <bsd_platform_init+0xa6>
   31a96:	f7ff f875 	bl	30b84 <tls_interface_init>
   31a9a:	b980      	cbnz	r0, 31abe <bsd_platform_init+0xa6>
   31a9c:	f7ff fca8 	bl	313f0 <mfu_interface_init>
   31aa0:	b968      	cbnz	r0, 31abe <bsd_platform_init+0xa6>
   31aa2:	f001 facd 	bl	33040 <pdn_interface_init>
   31aa6:	b950      	cbnz	r0, 31abe <bsd_platform_init+0xa6>
   31aa8:	f005 fdd8 	bl	3765c <gnss_interface_init>
   31aac:	b938      	cbnz	r0, 31abe <bsd_platform_init+0xa6>
   31aae:	f7fd feb5 	bl	2f81c <logobj_interface_init>
   31ab2:	3000      	adds	r0, #0
   31ab4:	bf18      	it	ne
   31ab6:	2001      	movne	r0, #1
   31ab8:	4240      	negs	r0, r0
   31aba:	b013      	add	sp, #76	; 0x4c
   31abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31abe:	f04f 30ff 	mov.w	r0, #4294967295
   31ac2:	b013      	add	sp, #76	; 0x4c
   31ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31ac6:	bf00      	nop
   31ac8:	00042820 	.word	0x00042820
   31acc:	20010000 	.word	0x20010000
   31ad0:	20010040 	.word	0x20010040
   31ad4:	20010020 	.word	0x20010020
   31ad8:	20017060 	.word	0x20017060
   31adc:	20010060 	.word	0x20010060
   31ae0:	20013060 	.word	0x20013060

00031ae4 <bsd_platform_shutdown>:
   31ae4:	b508      	push	{r3, lr}
   31ae6:	f004 fa17 	bl	35f18 <interface_shutdown>
   31aea:	f000 fc1d 	bl	32328 <rpc_transport_ipc_shutdown>
   31aee:	2000      	movs	r0, #0
   31af0:	bd08      	pop	{r3, pc}
   31af2:	bf00      	nop

00031af4 <bsd_platform_af_method_table_get>:
   31af4:	2805      	cmp	r0, #5
   31af6:	d02a      	beq.n	31b4e <bsd_platform_af_method_table_get+0x5a>
   31af8:	b508      	push	{r3, lr}
   31afa:	d914      	bls.n	31b26 <bsd_platform_af_method_table_get+0x32>
   31afc:	280a      	cmp	r0, #10
   31afe:	d016      	beq.n	31b2e <bsd_platform_af_method_table_get+0x3a>
   31b00:	2866      	cmp	r0, #102	; 0x66
   31b02:	d11f      	bne.n	31b44 <bsd_platform_af_method_table_get+0x50>
   31b04:	f240 2302 	movw	r3, #514	; 0x202
   31b08:	429a      	cmp	r2, r3
   31b0a:	d035      	beq.n	31b78 <bsd_platform_af_method_table_get+0x84>
   31b0c:	f240 2305 	movw	r3, #517	; 0x205
   31b10:	429a      	cmp	r2, r3
   31b12:	d035      	beq.n	31b80 <bsd_platform_af_method_table_get+0x8c>
   31b14:	f240 2301 	movw	r3, #513	; 0x201
   31b18:	429a      	cmp	r2, r3
   31b1a:	d02f      	beq.n	31b7c <bsd_platform_af_method_table_get+0x88>
   31b1c:	202b      	movs	r0, #43	; 0x2b
   31b1e:	f7f5 fa9b 	bl	27058 <bsd_os_errno_set>
   31b22:	2000      	movs	r0, #0
   31b24:	bd08      	pop	{r3, pc}
   31b26:	2801      	cmp	r0, #1
   31b28:	d016      	beq.n	31b58 <bsd_platform_af_method_table_get+0x64>
   31b2a:	2802      	cmp	r0, #2
   31b2c:	d10a      	bne.n	31b44 <bsd_platform_af_method_table_get+0x50>
   31b2e:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   31b32:	d21a      	bcs.n	31b6a <bsd_platform_af_method_table_get+0x76>
   31b34:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   31b38:	d21a      	bcs.n	31b70 <bsd_platform_af_method_table_get+0x7c>
   31b3a:	3a01      	subs	r2, #1
   31b3c:	2a01      	cmp	r2, #1
   31b3e:	d8ed      	bhi.n	31b1c <bsd_platform_af_method_table_get+0x28>
   31b40:	4810      	ldr	r0, [pc, #64]	; (31b84 <bsd_platform_af_method_table_get+0x90>)
   31b42:	bd08      	pop	{r3, pc}
   31b44:	2016      	movs	r0, #22
   31b46:	f7f5 fa87 	bl	27058 <bsd_os_errno_set>
   31b4a:	2000      	movs	r0, #0
   31b4c:	bd08      	pop	{r3, pc}
   31b4e:	2903      	cmp	r1, #3
   31b50:	480d      	ldr	r0, [pc, #52]	; (31b88 <bsd_platform_af_method_table_get+0x94>)
   31b52:	bf18      	it	ne
   31b54:	2000      	movne	r0, #0
   31b56:	4770      	bx	lr
   31b58:	f240 2303 	movw	r3, #515	; 0x203
   31b5c:	429a      	cmp	r2, r3
   31b5e:	d009      	beq.n	31b74 <bsd_platform_af_method_table_get+0x80>
   31b60:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   31b64:	d1da      	bne.n	31b1c <bsd_platform_af_method_table_get+0x28>
   31b66:	4809      	ldr	r0, [pc, #36]	; (31b8c <bsd_platform_af_method_table_get+0x98>)
   31b68:	bd08      	pop	{r3, pc}
   31b6a:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   31b6e:	d1d5      	bne.n	31b1c <bsd_platform_af_method_table_get+0x28>
   31b70:	4807      	ldr	r0, [pc, #28]	; (31b90 <bsd_platform_af_method_table_get+0x9c>)
   31b72:	bd08      	pop	{r3, pc}
   31b74:	4807      	ldr	r0, [pc, #28]	; (31b94 <bsd_platform_af_method_table_get+0xa0>)
   31b76:	bd08      	pop	{r3, pc}
   31b78:	4807      	ldr	r0, [pc, #28]	; (31b98 <bsd_platform_af_method_table_get+0xa4>)
   31b7a:	bd08      	pop	{r3, pc}
   31b7c:	4807      	ldr	r0, [pc, #28]	; (31b9c <bsd_platform_af_method_table_get+0xa8>)
   31b7e:	bd08      	pop	{r3, pc}
   31b80:	4807      	ldr	r0, [pc, #28]	; (31ba0 <bsd_platform_af_method_table_get+0xac>)
   31b82:	bd08      	pop	{r3, pc}
   31b84:	000426f0 	.word	0x000426f0
   31b88:	000427e0 	.word	0x000427e0
   31b8c:	00042790 	.word	0x00042790
   31b90:	00042718 	.word	0x00042718
   31b94:	00042740 	.word	0x00042740
   31b98:	00042768 	.word	0x00042768
   31b9c:	000426c8 	.word	0x000426c8
   31ba0:	000427b8 	.word	0x000427b8

00031ba4 <bsd_platform_fd_method_table_get>:
   31ba4:	b538      	push	{r3, r4, r5, lr}
   31ba6:	4605      	mov	r5, r0
   31ba8:	f004 f91e 	bl	35de8 <interface_socket_from_handle_get>
   31bac:	4604      	mov	r4, r0
   31bae:	b960      	cbnz	r0, 31bca <bsd_platform_fd_method_table_get+0x26>
   31bb0:	4b2c      	ldr	r3, [pc, #176]	; (31c64 <bsd_platform_fd_method_table_get+0xc0>)
   31bb2:	429d      	cmp	r5, r3
   31bb4:	d02f      	beq.n	31c16 <bsd_platform_fd_method_table_get+0x72>
   31bb6:	0c2b      	lsrs	r3, r5, #16
   31bb8:	4a2b      	ldr	r2, [pc, #172]	; (31c68 <bsd_platform_fd_method_table_get+0xc4>)
   31bba:	041b      	lsls	r3, r3, #16
   31bbc:	4293      	cmp	r3, r2
   31bbe:	d03d      	beq.n	31c3c <bsd_platform_fd_method_table_get+0x98>
   31bc0:	4b2a      	ldr	r3, [pc, #168]	; (31c6c <bsd_platform_fd_method_table_get+0xc8>)
   31bc2:	429d      	cmp	r5, r3
   31bc4:	d149      	bne.n	31c5a <bsd_platform_fd_method_table_get+0xb6>
   31bc6:	482a      	ldr	r0, [pc, #168]	; (31c70 <bsd_platform_fd_method_table_get+0xcc>)
   31bc8:	bd38      	pop	{r3, r4, r5, pc}
   31bca:	68c3      	ldr	r3, [r0, #12]
   31bcc:	6942      	ldr	r2, [r0, #20]
   31bce:	2b05      	cmp	r3, #5
   31bd0:	d036      	beq.n	31c40 <bsd_platform_fd_method_table_get+0x9c>
   31bd2:	d911      	bls.n	31bf8 <bsd_platform_fd_method_table_get+0x54>
   31bd4:	2b0a      	cmp	r3, #10
   31bd6:	d013      	beq.n	31c00 <bsd_platform_fd_method_table_get+0x5c>
   31bd8:	2b66      	cmp	r3, #102	; 0x66
   31bda:	d11e      	bne.n	31c1a <bsd_platform_fd_method_table_get+0x76>
   31bdc:	f240 2302 	movw	r3, #514	; 0x202
   31be0:	429a      	cmp	r2, r3
   31be2:	d02b      	beq.n	31c3c <bsd_platform_fd_method_table_get+0x98>
   31be4:	f240 2305 	movw	r3, #517	; 0x205
   31be8:	429a      	cmp	r2, r3
   31bea:	d02f      	beq.n	31c4c <bsd_platform_fd_method_table_get+0xa8>
   31bec:	f240 2301 	movw	r3, #513	; 0x201
   31bf0:	429a      	cmp	r2, r3
   31bf2:	d11e      	bne.n	31c32 <bsd_platform_fd_method_table_get+0x8e>
   31bf4:	481f      	ldr	r0, [pc, #124]	; (31c74 <bsd_platform_fd_method_table_get+0xd0>)
   31bf6:	bd38      	pop	{r3, r4, r5, pc}
   31bf8:	2b01      	cmp	r3, #1
   31bfa:	d013      	beq.n	31c24 <bsd_platform_fd_method_table_get+0x80>
   31bfc:	2b02      	cmp	r3, #2
   31bfe:	d10c      	bne.n	31c1a <bsd_platform_fd_method_table_get+0x76>
   31c00:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   31c04:	d224      	bcs.n	31c50 <bsd_platform_fd_method_table_get+0xac>
   31c06:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   31c0a:	d224      	bcs.n	31c56 <bsd_platform_fd_method_table_get+0xb2>
   31c0c:	3a01      	subs	r2, #1
   31c0e:	2a01      	cmp	r2, #1
   31c10:	d80f      	bhi.n	31c32 <bsd_platform_fd_method_table_get+0x8e>
   31c12:	4819      	ldr	r0, [pc, #100]	; (31c78 <bsd_platform_fd_method_table_get+0xd4>)
   31c14:	bd38      	pop	{r3, r4, r5, pc}
   31c16:	4819      	ldr	r0, [pc, #100]	; (31c7c <bsd_platform_fd_method_table_get+0xd8>)
   31c18:	bd38      	pop	{r3, r4, r5, pc}
   31c1a:	2016      	movs	r0, #22
   31c1c:	f7f5 fa1c 	bl	27058 <bsd_os_errno_set>
   31c20:	2000      	movs	r0, #0
   31c22:	bd38      	pop	{r3, r4, r5, pc}
   31c24:	f240 2303 	movw	r3, #515	; 0x203
   31c28:	429a      	cmp	r2, r3
   31c2a:	d0f4      	beq.n	31c16 <bsd_platform_fd_method_table_get+0x72>
   31c2c:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   31c30:	d0c9      	beq.n	31bc6 <bsd_platform_fd_method_table_get+0x22>
   31c32:	202b      	movs	r0, #43	; 0x2b
   31c34:	f7f5 fa10 	bl	27058 <bsd_os_errno_set>
   31c38:	2000      	movs	r0, #0
   31c3a:	bd38      	pop	{r3, r4, r5, pc}
   31c3c:	4810      	ldr	r0, [pc, #64]	; (31c80 <bsd_platform_fd_method_table_get+0xdc>)
   31c3e:	bd38      	pop	{r3, r4, r5, pc}
   31c40:	6903      	ldr	r3, [r0, #16]
   31c42:	4810      	ldr	r0, [pc, #64]	; (31c84 <bsd_platform_fd_method_table_get+0xe0>)
   31c44:	2b03      	cmp	r3, #3
   31c46:	bf18      	it	ne
   31c48:	2000      	movne	r0, #0
   31c4a:	bd38      	pop	{r3, r4, r5, pc}
   31c4c:	480e      	ldr	r0, [pc, #56]	; (31c88 <bsd_platform_fd_method_table_get+0xe4>)
   31c4e:	bd38      	pop	{r3, r4, r5, pc}
   31c50:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   31c54:	d1ed      	bne.n	31c32 <bsd_platform_fd_method_table_get+0x8e>
   31c56:	480d      	ldr	r0, [pc, #52]	; (31c8c <bsd_platform_fd_method_table_get+0xe8>)
   31c58:	bd38      	pop	{r3, r4, r5, pc}
   31c5a:	2009      	movs	r0, #9
   31c5c:	f7f5 f9fc 	bl	27058 <bsd_os_errno_set>
   31c60:	4620      	mov	r0, r4
   31c62:	bd38      	pop	{r3, r4, r5, pc}
   31c64:	49765432 	.word	0x49765432
   31c68:	789a0000 	.word	0x789a0000
   31c6c:	49765443 	.word	0x49765443
   31c70:	00042790 	.word	0x00042790
   31c74:	000426c8 	.word	0x000426c8
   31c78:	000426f0 	.word	0x000426f0
   31c7c:	00042740 	.word	0x00042740
   31c80:	00042768 	.word	0x00042768
   31c84:	000427e0 	.word	0x000427e0
   31c88:	000427b8 	.word	0x000427b8
   31c8c:	00042718 	.word	0x00042718

00031c90 <bsd_platform_getaddrinfo>:
   31c90:	f003 bbde 	b.w	35450 <ip_interface_getaddrinfo>

00031c94 <bsd_platform_freeaddrinfo>:
   31c94:	f003 bcd2 	b.w	3563c <ip_interface_freeaddrinfo>

00031c98 <bsd_platform_poll>:
   31c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31c9c:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   31ca0:	b083      	sub	sp, #12
   31ca2:	9200      	str	r2, [sp, #0]
   31ca4:	2800      	cmp	r0, #0
   31ca6:	d048      	beq.n	31d3a <bsd_platform_poll+0xa2>
   31ca8:	1e4b      	subs	r3, r1, #1
   31caa:	2b08      	cmp	r3, #8
   31cac:	d845      	bhi.n	31d3a <bsd_platform_poll+0xa2>
   31cae:	4680      	mov	r8, r0
   31cb0:	4605      	mov	r5, r0
   31cb2:	2400      	movs	r4, #0
   31cb4:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   31cb8:	88ab      	ldrh	r3, [r5, #4]
   31cba:	6828      	ldr	r0, [r5, #0]
   31cbc:	f003 0303 	and.w	r3, r3, #3
   31cc0:	a901      	add	r1, sp, #4
   31cc2:	f043 061c 	orr.w	r6, r3, #28
   31cc6:	f004 f89d 	bl	35e04 <interface_socket_event_get>
   31cca:	9b01      	ldr	r3, [sp, #4]
   31ccc:	3508      	adds	r5, #8
   31cce:	4033      	ands	r3, r6
   31cd0:	f825 3c02 	strh.w	r3, [r5, #-2]
   31cd4:	b103      	cbz	r3, 31cd8 <bsd_platform_poll+0x40>
   31cd6:	3401      	adds	r4, #1
   31cd8:	42af      	cmp	r7, r5
   31cda:	d1ed      	bne.n	31cb8 <bsd_platform_poll+0x20>
   31cdc:	bb9c      	cbnz	r4, 31d46 <bsd_platform_poll+0xae>
   31cde:	4669      	mov	r1, sp
   31ce0:	4640      	mov	r0, r8
   31ce2:	f7f5 f925 	bl	26f30 <bsd_os_timedwait>
   31ce6:	4607      	mov	r7, r0
   31ce8:	b108      	cbz	r0, 31cee <bsd_platform_poll+0x56>
   31cea:	283c      	cmp	r0, #60	; 0x3c
   31cec:	d11d      	bne.n	31d2a <bsd_platform_poll+0x92>
   31cee:	46c1      	mov	r9, r8
   31cf0:	2600      	movs	r6, #0
   31cf2:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   31cf6:	f8d9 0000 	ldr.w	r0, [r9]
   31cfa:	f003 0303 	and.w	r3, r3, #3
   31cfe:	a901      	add	r1, sp, #4
   31d00:	f043 041c 	orr.w	r4, r3, #28
   31d04:	f004 f87e 	bl	35e04 <interface_socket_event_get>
   31d08:	9b01      	ldr	r3, [sp, #4]
   31d0a:	f109 0908 	add.w	r9, r9, #8
   31d0e:	4023      	ands	r3, r4
   31d10:	f829 3c02 	strh.w	r3, [r9, #-2]
   31d14:	b103      	cbz	r3, 31d18 <bsd_platform_poll+0x80>
   31d16:	3601      	adds	r6, #1
   31d18:	454d      	cmp	r5, r9
   31d1a:	d1ea      	bne.n	31cf2 <bsd_platform_poll+0x5a>
   31d1c:	b90e      	cbnz	r6, 31d22 <bsd_platform_poll+0x8a>
   31d1e:	2f00      	cmp	r7, #0
   31d20:	d0dd      	beq.n	31cde <bsd_platform_poll+0x46>
   31d22:	4630      	mov	r0, r6
   31d24:	b003      	add	sp, #12
   31d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   31d2a:	2023      	movs	r0, #35	; 0x23
   31d2c:	f7f5 f994 	bl	27058 <bsd_os_errno_set>
   31d30:	f04f 30ff 	mov.w	r0, #4294967295
   31d34:	b003      	add	sp, #12
   31d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   31d3a:	2016      	movs	r0, #22
   31d3c:	f7f5 f98c 	bl	27058 <bsd_os_errno_set>
   31d40:	f04f 30ff 	mov.w	r0, #4294967295
   31d44:	e7ee      	b.n	31d24 <bsd_platform_poll+0x8c>
   31d46:	4620      	mov	r0, r4
   31d48:	e7ec      	b.n	31d24 <bsd_platform_poll+0x8c>
   31d4a:	bf00      	nop

00031d4c <bsd_platform_fcntl>:
   31d4c:	b508      	push	{r3, lr}
   31d4e:	4b06      	ldr	r3, [pc, #24]	; (31d68 <bsd_platform_fcntl+0x1c>)
   31d50:	4298      	cmp	r0, r3
   31d52:	d003      	beq.n	31d5c <bsd_platform_fcntl+0x10>
   31d54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   31d58:	f004 b912 	b.w	35f80 <interface_socket_fcntl>
   31d5c:	202d      	movs	r0, #45	; 0x2d
   31d5e:	f7f5 f97b 	bl	27058 <bsd_os_errno_set>
   31d62:	f04f 30ff 	mov.w	r0, #4294967295
   31d66:	bd08      	pop	{r3, pc}
   31d68:	49765432 	.word	0x49765432

00031d6c <ipc_trace_init>:
   31d6c:	4b01      	ldr	r3, [pc, #4]	; (31d74 <ipc_trace_init+0x8>)
   31d6e:	6018      	str	r0, [r3, #0]
   31d70:	4770      	bx	lr
   31d72:	bf00      	nop
   31d74:	20024cf4 	.word	0x20024cf4

00031d78 <bsd_os_trace_irq_handler>:
   31d78:	b5f0      	push	{r4, r5, r6, r7, lr}
   31d7a:	4b6c      	ldr	r3, [pc, #432]	; (31f2c <bsd_os_trace_irq_handler+0x1b4>)
   31d7c:	b083      	sub	sp, #12
   31d7e:	781b      	ldrb	r3, [r3, #0]
   31d80:	2b00      	cmp	r3, #0
   31d82:	f000 80ad 	beq.w	31ee0 <bsd_os_trace_irq_handler+0x168>
   31d86:	4b6a      	ldr	r3, [pc, #424]	; (31f30 <bsd_os_trace_irq_handler+0x1b8>)
   31d88:	681c      	ldr	r4, [r3, #0]
   31d8a:	68a2      	ldr	r2, [r4, #8]
   31d8c:	6863      	ldr	r3, [r4, #4]
   31d8e:	429a      	cmp	r2, r3
   31d90:	d02d      	beq.n	31dee <bsd_os_trace_irq_handler+0x76>
   31d92:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   31d96:	f8ad 3000 	strh.w	r3, [sp]
   31d9a:	7823      	ldrb	r3, [r4, #0]
   31d9c:	466e      	mov	r6, sp
   31d9e:	f88d 3004 	strb.w	r3, [sp, #4]
   31da2:	6863      	ldr	r3, [r4, #4]
   31da4:	2105      	movs	r1, #5
   31da6:	429a      	cmp	r2, r3
   31da8:	bf2a      	itet	cs
   31daa:	6927      	ldrcs	r7, [r4, #16]
   31dac:	1a9f      	subcc	r7, r3, r2
   31dae:	1abf      	subcs	r7, r7, r2
   31db0:	429a      	cmp	r2, r3
   31db2:	bf94      	ite	ls
   31db4:	2500      	movls	r5, #0
   31db6:	68e5      	ldrhi	r5, [r4, #12]
   31db8:	b2bf      	uxth	r7, r7
   31dba:	bf88      	it	hi
   31dbc:	1b5b      	subhi	r3, r3, r5
   31dbe:	4630      	mov	r0, r6
   31dc0:	bf88      	it	hi
   31dc2:	b29d      	uxthhi	r5, r3
   31dc4:	f8ad 7002 	strh.w	r7, [sp, #2]
   31dc8:	f00d fb15 	bl	3f3f6 <bsd_os_trace_put>
   31dcc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   31dd0:	68a0      	ldr	r0, [r4, #8]
   31dd2:	f00d fb10 	bl	3f3f6 <bsd_os_trace_put>
   31dd6:	68a3      	ldr	r3, [r4, #8]
   31dd8:	6922      	ldr	r2, [r4, #16]
   31dda:	441f      	add	r7, r3
   31ddc:	4297      	cmp	r7, r2
   31dde:	bf08      	it	eq
   31de0:	68e3      	ldreq	r3, [r4, #12]
   31de2:	60a7      	str	r7, [r4, #8]
   31de4:	bf08      	it	eq
   31de6:	60a3      	streq	r3, [r4, #8]
   31de8:	2d00      	cmp	r5, #0
   31dea:	f040 808d 	bne.w	31f08 <bsd_os_trace_irq_handler+0x190>
   31dee:	4b51      	ldr	r3, [pc, #324]	; (31f34 <bsd_os_trace_irq_handler+0x1bc>)
   31df0:	681c      	ldr	r4, [r3, #0]
   31df2:	68a2      	ldr	r2, [r4, #8]
   31df4:	6863      	ldr	r3, [r4, #4]
   31df6:	429a      	cmp	r2, r3
   31df8:	d02c      	beq.n	31e54 <bsd_os_trace_irq_handler+0xdc>
   31dfa:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   31dfe:	f8ad 3000 	strh.w	r3, [sp]
   31e02:	7823      	ldrb	r3, [r4, #0]
   31e04:	466e      	mov	r6, sp
   31e06:	f88d 3004 	strb.w	r3, [sp, #4]
   31e0a:	6863      	ldr	r3, [r4, #4]
   31e0c:	2105      	movs	r1, #5
   31e0e:	429a      	cmp	r2, r3
   31e10:	bf2a      	itet	cs
   31e12:	6927      	ldrcs	r7, [r4, #16]
   31e14:	1a9f      	subcc	r7, r3, r2
   31e16:	1abf      	subcs	r7, r7, r2
   31e18:	429a      	cmp	r2, r3
   31e1a:	bf94      	ite	ls
   31e1c:	2500      	movls	r5, #0
   31e1e:	68e5      	ldrhi	r5, [r4, #12]
   31e20:	b2bf      	uxth	r7, r7
   31e22:	bf88      	it	hi
   31e24:	1b5b      	subhi	r3, r3, r5
   31e26:	4630      	mov	r0, r6
   31e28:	bf88      	it	hi
   31e2a:	b29d      	uxthhi	r5, r3
   31e2c:	f8ad 7002 	strh.w	r7, [sp, #2]
   31e30:	f00d fae1 	bl	3f3f6 <bsd_os_trace_put>
   31e34:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   31e38:	68a0      	ldr	r0, [r4, #8]
   31e3a:	f00d fadc 	bl	3f3f6 <bsd_os_trace_put>
   31e3e:	68a3      	ldr	r3, [r4, #8]
   31e40:	6922      	ldr	r2, [r4, #16]
   31e42:	441f      	add	r7, r3
   31e44:	4297      	cmp	r7, r2
   31e46:	bf08      	it	eq
   31e48:	68e3      	ldreq	r3, [r4, #12]
   31e4a:	60a7      	str	r7, [r4, #8]
   31e4c:	bf08      	it	eq
   31e4e:	60a3      	streq	r3, [r4, #8]
   31e50:	2d00      	cmp	r5, #0
   31e52:	d148      	bne.n	31ee6 <bsd_os_trace_irq_handler+0x16e>
   31e54:	4b38      	ldr	r3, [pc, #224]	; (31f38 <bsd_os_trace_irq_handler+0x1c0>)
   31e56:	681c      	ldr	r4, [r3, #0]
   31e58:	68a2      	ldr	r2, [r4, #8]
   31e5a:	6863      	ldr	r3, [r4, #4]
   31e5c:	429a      	cmp	r2, r3
   31e5e:	d02b      	beq.n	31eb8 <bsd_os_trace_irq_handler+0x140>
   31e60:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   31e64:	f8ad 3000 	strh.w	r3, [sp]
   31e68:	7823      	ldrb	r3, [r4, #0]
   31e6a:	466e      	mov	r6, sp
   31e6c:	f88d 3004 	strb.w	r3, [sp, #4]
   31e70:	6863      	ldr	r3, [r4, #4]
   31e72:	2105      	movs	r1, #5
   31e74:	429a      	cmp	r2, r3
   31e76:	bf2a      	itet	cs
   31e78:	6927      	ldrcs	r7, [r4, #16]
   31e7a:	1a9f      	subcc	r7, r3, r2
   31e7c:	1abf      	subcs	r7, r7, r2
   31e7e:	429a      	cmp	r2, r3
   31e80:	bf94      	ite	ls
   31e82:	2500      	movls	r5, #0
   31e84:	68e5      	ldrhi	r5, [r4, #12]
   31e86:	b2bf      	uxth	r7, r7
   31e88:	bf88      	it	hi
   31e8a:	1b5b      	subhi	r3, r3, r5
   31e8c:	4630      	mov	r0, r6
   31e8e:	bf88      	it	hi
   31e90:	b29d      	uxthhi	r5, r3
   31e92:	f8ad 7002 	strh.w	r7, [sp, #2]
   31e96:	f00d faae 	bl	3f3f6 <bsd_os_trace_put>
   31e9a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   31e9e:	68a0      	ldr	r0, [r4, #8]
   31ea0:	f00d faa9 	bl	3f3f6 <bsd_os_trace_put>
   31ea4:	68a3      	ldr	r3, [r4, #8]
   31ea6:	6922      	ldr	r2, [r4, #16]
   31ea8:	441f      	add	r7, r3
   31eaa:	4297      	cmp	r7, r2
   31eac:	bf08      	it	eq
   31eae:	68e3      	ldreq	r3, [r4, #12]
   31eb0:	60a7      	str	r7, [r4, #8]
   31eb2:	bf08      	it	eq
   31eb4:	60a3      	streq	r3, [r4, #8]
   31eb6:	b90d      	cbnz	r5, 31ebc <bsd_os_trace_irq_handler+0x144>
   31eb8:	b003      	add	sp, #12
   31eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31ebc:	4630      	mov	r0, r6
   31ebe:	2105      	movs	r1, #5
   31ec0:	f8ad 5002 	strh.w	r5, [sp, #2]
   31ec4:	f00d fa97 	bl	3f3f6 <bsd_os_trace_put>
   31ec8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   31ecc:	68e0      	ldr	r0, [r4, #12]
   31ece:	f00d fa92 	bl	3f3f6 <bsd_os_trace_put>
   31ed2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   31ed6:	68e3      	ldr	r3, [r4, #12]
   31ed8:	4413      	add	r3, r2
   31eda:	60a3      	str	r3, [r4, #8]
   31edc:	b003      	add	sp, #12
   31ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31ee0:	f7f5 f9ca 	bl	27278 <bsd_os_trace_irq_clear>
   31ee4:	e74f      	b.n	31d86 <bsd_os_trace_irq_handler+0xe>
   31ee6:	2105      	movs	r1, #5
   31ee8:	4630      	mov	r0, r6
   31eea:	f8ad 5002 	strh.w	r5, [sp, #2]
   31eee:	f00d fa82 	bl	3f3f6 <bsd_os_trace_put>
   31ef2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   31ef6:	68e0      	ldr	r0, [r4, #12]
   31ef8:	f00d fa7d 	bl	3f3f6 <bsd_os_trace_put>
   31efc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   31f00:	68e3      	ldr	r3, [r4, #12]
   31f02:	4413      	add	r3, r2
   31f04:	60a3      	str	r3, [r4, #8]
   31f06:	e7a5      	b.n	31e54 <bsd_os_trace_irq_handler+0xdc>
   31f08:	2105      	movs	r1, #5
   31f0a:	4630      	mov	r0, r6
   31f0c:	f8ad 5002 	strh.w	r5, [sp, #2]
   31f10:	f00d fa71 	bl	3f3f6 <bsd_os_trace_put>
   31f14:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   31f18:	68e0      	ldr	r0, [r4, #12]
   31f1a:	f00d fa6c 	bl	3f3f6 <bsd_os_trace_put>
   31f1e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   31f22:	68e3      	ldr	r3, [r4, #12]
   31f24:	4413      	add	r3, r2
   31f26:	60a3      	str	r3, [r4, #8]
   31f28:	e761      	b.n	31dee <bsd_os_trace_irq_handler+0x76>
   31f2a:	bf00      	nop
   31f2c:	2002bd41 	.word	0x2002bd41
   31f30:	20024cf0 	.word	0x20024cf0
   31f34:	20024ce8 	.word	0x20024ce8
   31f38:	20024cec 	.word	0x20024cec

00031f3c <ipc_trace_handle>:
   31f3c:	2200      	movs	r2, #0
   31f3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31f42:	4bb0      	ldr	r3, [pc, #704]	; (32204 <ipc_trace_handle+0x2c8>)
   31f44:	b083      	sub	sp, #12
   31f46:	681b      	ldr	r3, [r3, #0]
   31f48:	6919      	ldr	r1, [r3, #16]
   31f4a:	695c      	ldr	r4, [r3, #20]
   31f4c:	7c18      	ldrb	r0, [r3, #16]
   31f4e:	741a      	strb	r2, [r3, #16]
   31f50:	7c58      	ldrb	r0, [r3, #17]
   31f52:	745a      	strb	r2, [r3, #17]
   31f54:	7c98      	ldrb	r0, [r3, #18]
   31f56:	749a      	strb	r2, [r3, #18]
   31f58:	7cd8      	ldrb	r0, [r3, #19]
   31f5a:	74da      	strb	r2, [r3, #19]
   31f5c:	7d18      	ldrb	r0, [r3, #20]
   31f5e:	751a      	strb	r2, [r3, #20]
   31f60:	7d58      	ldrb	r0, [r3, #21]
   31f62:	755a      	strb	r2, [r3, #21]
   31f64:	7d98      	ldrb	r0, [r3, #22]
   31f66:	759a      	strb	r2, [r3, #22]
   31f68:	7dd8      	ldrb	r0, [r3, #23]
   31f6a:	75da      	strb	r2, [r3, #23]
   31f6c:	b1b9      	cbz	r1, 31f9e <ipc_trace_handle+0x62>
   31f6e:	3901      	subs	r1, #1
   31f70:	2903      	cmp	r1, #3
   31f72:	d814      	bhi.n	31f9e <ipc_trace_handle+0x62>
   31f74:	e8df f011 	tbh	[pc, r1, lsl #1]
   31f78:	010300d6 	.word	0x010300d6
   31f7c:	00160004 	.word	0x00160004
   31f80:	2501      	movs	r5, #1
   31f82:	2003      	movs	r0, #3
   31f84:	2200      	movs	r2, #0
   31f86:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   31f8a:	4c9f      	ldr	r4, [pc, #636]	; (32208 <ipc_trace_handle+0x2cc>)
   31f8c:	7025      	strb	r5, [r4, #0]
   31f8e:	7a1c      	ldrb	r4, [r3, #8]
   31f90:	7218      	strb	r0, [r3, #8]
   31f92:	7a58      	ldrb	r0, [r3, #9]
   31f94:	725a      	strb	r2, [r3, #9]
   31f96:	7a98      	ldrb	r0, [r3, #10]
   31f98:	729a      	strb	r2, [r3, #10]
   31f9a:	7ada      	ldrb	r2, [r3, #11]
   31f9c:	72d9      	strb	r1, [r3, #11]
   31f9e:	b003      	add	sp, #12
   31fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31fa4:	2104      	movs	r1, #4
   31fa6:	2200      	movs	r2, #0
   31fa8:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   31fac:	7a1c      	ldrb	r4, [r3, #8]
   31fae:	7219      	strb	r1, [r3, #8]
   31fb0:	7a59      	ldrb	r1, [r3, #9]
   31fb2:	725a      	strb	r2, [r3, #9]
   31fb4:	4994      	ldr	r1, [pc, #592]	; (32208 <ipc_trace_handle+0x2cc>)
   31fb6:	7a9c      	ldrb	r4, [r3, #10]
   31fb8:	729a      	strb	r2, [r3, #10]
   31fba:	7adc      	ldrb	r4, [r3, #11]
   31fbc:	72d8      	strb	r0, [r3, #11]
   31fbe:	700a      	strb	r2, [r1, #0]
   31fc0:	780b      	ldrb	r3, [r1, #0]
   31fc2:	2b00      	cmp	r3, #0
   31fc4:	f000 8117 	beq.w	321f6 <ipc_trace_handle+0x2ba>
   31fc8:	4b90      	ldr	r3, [pc, #576]	; (3220c <ipc_trace_handle+0x2d0>)
   31fca:	681c      	ldr	r4, [r3, #0]
   31fcc:	68a2      	ldr	r2, [r4, #8]
   31fce:	6863      	ldr	r3, [r4, #4]
   31fd0:	429a      	cmp	r2, r3
   31fd2:	d02d      	beq.n	32030 <ipc_trace_handle+0xf4>
   31fd4:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   31fd8:	f8ad 3000 	strh.w	r3, [sp]
   31fdc:	7823      	ldrb	r3, [r4, #0]
   31fde:	466e      	mov	r6, sp
   31fe0:	f88d 3004 	strb.w	r3, [sp, #4]
   31fe4:	6863      	ldr	r3, [r4, #4]
   31fe6:	2105      	movs	r1, #5
   31fe8:	429a      	cmp	r2, r3
   31fea:	bf2a      	itet	cs
   31fec:	6927      	ldrcs	r7, [r4, #16]
   31fee:	1a9f      	subcc	r7, r3, r2
   31ff0:	1abf      	subcs	r7, r7, r2
   31ff2:	429a      	cmp	r2, r3
   31ff4:	bf94      	ite	ls
   31ff6:	2500      	movls	r5, #0
   31ff8:	68e5      	ldrhi	r5, [r4, #12]
   31ffa:	b2bf      	uxth	r7, r7
   31ffc:	bf88      	it	hi
   31ffe:	1b5b      	subhi	r3, r3, r5
   32000:	4630      	mov	r0, r6
   32002:	bf88      	it	hi
   32004:	b29d      	uxthhi	r5, r3
   32006:	f8ad 7002 	strh.w	r7, [sp, #2]
   3200a:	f00d f9f4 	bl	3f3f6 <bsd_os_trace_put>
   3200e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   32012:	68a0      	ldr	r0, [r4, #8]
   32014:	f00d f9ef 	bl	3f3f6 <bsd_os_trace_put>
   32018:	68a3      	ldr	r3, [r4, #8]
   3201a:	6922      	ldr	r2, [r4, #16]
   3201c:	441f      	add	r7, r3
   3201e:	4297      	cmp	r7, r2
   32020:	bf08      	it	eq
   32022:	68e3      	ldreq	r3, [r4, #12]
   32024:	60a7      	str	r7, [r4, #8]
   32026:	bf08      	it	eq
   32028:	60a3      	streq	r3, [r4, #8]
   3202a:	2d00      	cmp	r5, #0
   3202c:	f040 80d2 	bne.w	321d4 <ipc_trace_handle+0x298>
   32030:	4b77      	ldr	r3, [pc, #476]	; (32210 <ipc_trace_handle+0x2d4>)
   32032:	681c      	ldr	r4, [r3, #0]
   32034:	68a2      	ldr	r2, [r4, #8]
   32036:	6863      	ldr	r3, [r4, #4]
   32038:	429a      	cmp	r2, r3
   3203a:	d02d      	beq.n	32098 <ipc_trace_handle+0x15c>
   3203c:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   32040:	f8ad 3000 	strh.w	r3, [sp]
   32044:	7823      	ldrb	r3, [r4, #0]
   32046:	466e      	mov	r6, sp
   32048:	f88d 3004 	strb.w	r3, [sp, #4]
   3204c:	6863      	ldr	r3, [r4, #4]
   3204e:	2105      	movs	r1, #5
   32050:	429a      	cmp	r2, r3
   32052:	bf2a      	itet	cs
   32054:	6927      	ldrcs	r7, [r4, #16]
   32056:	1a9f      	subcc	r7, r3, r2
   32058:	1abf      	subcs	r7, r7, r2
   3205a:	429a      	cmp	r2, r3
   3205c:	bf94      	ite	ls
   3205e:	2500      	movls	r5, #0
   32060:	68e5      	ldrhi	r5, [r4, #12]
   32062:	b2bf      	uxth	r7, r7
   32064:	bf88      	it	hi
   32066:	1b5b      	subhi	r3, r3, r5
   32068:	4630      	mov	r0, r6
   3206a:	bf88      	it	hi
   3206c:	b29d      	uxthhi	r5, r3
   3206e:	f8ad 7002 	strh.w	r7, [sp, #2]
   32072:	f00d f9c0 	bl	3f3f6 <bsd_os_trace_put>
   32076:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   3207a:	68a0      	ldr	r0, [r4, #8]
   3207c:	f00d f9bb 	bl	3f3f6 <bsd_os_trace_put>
   32080:	68a3      	ldr	r3, [r4, #8]
   32082:	6922      	ldr	r2, [r4, #16]
   32084:	441f      	add	r7, r3
   32086:	4297      	cmp	r7, r2
   32088:	bf08      	it	eq
   3208a:	68e3      	ldreq	r3, [r4, #12]
   3208c:	60a7      	str	r7, [r4, #8]
   3208e:	bf08      	it	eq
   32090:	60a3      	streq	r3, [r4, #8]
   32092:	2d00      	cmp	r5, #0
   32094:	f040 808d 	bne.w	321b2 <ipc_trace_handle+0x276>
   32098:	4b5e      	ldr	r3, [pc, #376]	; (32214 <ipc_trace_handle+0x2d8>)
   3209a:	681c      	ldr	r4, [r3, #0]
   3209c:	68a2      	ldr	r2, [r4, #8]
   3209e:	6863      	ldr	r3, [r4, #4]
   320a0:	429a      	cmp	r2, r3
   320a2:	f43f af7c 	beq.w	31f9e <ipc_trace_handle+0x62>
   320a6:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   320aa:	f8ad 3000 	strh.w	r3, [sp]
   320ae:	7823      	ldrb	r3, [r4, #0]
   320b0:	466e      	mov	r6, sp
   320b2:	f88d 3004 	strb.w	r3, [sp, #4]
   320b6:	6863      	ldr	r3, [r4, #4]
   320b8:	2105      	movs	r1, #5
   320ba:	429a      	cmp	r2, r3
   320bc:	bf2a      	itet	cs
   320be:	6927      	ldrcs	r7, [r4, #16]
   320c0:	1a9f      	subcc	r7, r3, r2
   320c2:	1abf      	subcs	r7, r7, r2
   320c4:	429a      	cmp	r2, r3
   320c6:	bf94      	ite	ls
   320c8:	2500      	movls	r5, #0
   320ca:	68e5      	ldrhi	r5, [r4, #12]
   320cc:	b2bf      	uxth	r7, r7
   320ce:	bf88      	it	hi
   320d0:	1b5b      	subhi	r3, r3, r5
   320d2:	4630      	mov	r0, r6
   320d4:	bf88      	it	hi
   320d6:	b29d      	uxthhi	r5, r3
   320d8:	f8ad 7002 	strh.w	r7, [sp, #2]
   320dc:	f00d f98b 	bl	3f3f6 <bsd_os_trace_put>
   320e0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   320e4:	68a0      	ldr	r0, [r4, #8]
   320e6:	f00d f986 	bl	3f3f6 <bsd_os_trace_put>
   320ea:	68a3      	ldr	r3, [r4, #8]
   320ec:	6922      	ldr	r2, [r4, #16]
   320ee:	441f      	add	r7, r3
   320f0:	4297      	cmp	r7, r2
   320f2:	bf08      	it	eq
   320f4:	68e3      	ldreq	r3, [r4, #12]
   320f6:	60a7      	str	r7, [r4, #8]
   320f8:	bf08      	it	eq
   320fa:	60a3      	streq	r3, [r4, #8]
   320fc:	2d00      	cmp	r5, #0
   320fe:	f43f af4e 	beq.w	31f9e <ipc_trace_handle+0x62>
   32102:	2105      	movs	r1, #5
   32104:	4630      	mov	r0, r6
   32106:	f8ad 5002 	strh.w	r5, [sp, #2]
   3210a:	f00d f974 	bl	3f3f6 <bsd_os_trace_put>
   3210e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   32112:	68e0      	ldr	r0, [r4, #12]
   32114:	f00d f96f 	bl	3f3f6 <bsd_os_trace_put>
   32118:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   3211c:	68e3      	ldr	r3, [r4, #12]
   3211e:	4413      	add	r3, r2
   32120:	60a3      	str	r3, [r4, #8]
   32122:	e73c      	b.n	31f9e <ipc_trace_handle+0x62>
   32124:	4a38      	ldr	r2, [pc, #224]	; (32208 <ipc_trace_handle+0x2cc>)
   32126:	7811      	ldrb	r1, [r2, #0]
   32128:	b109      	cbz	r1, 3212e <ipc_trace_handle+0x1f2>
   3212a:	2100      	movs	r1, #0
   3212c:	7011      	strb	r1, [r2, #0]
   3212e:	68a5      	ldr	r5, [r4, #8]
   32130:	2d00      	cmp	r5, #0
   32132:	d039      	beq.n	321a8 <ipc_trace_handle+0x26c>
   32134:	f04f 0c00 	mov.w	ip, #0
   32138:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 32210 <ipc_trace_handle+0x2d4>
   3213c:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 3220c <ipc_trace_handle+0x2d0>
   32140:	4934      	ldr	r1, [pc, #208]	; (32214 <ipc_trace_handle+0x2d8>)
   32142:	46e1      	mov	r9, ip
   32144:	4666      	mov	r6, ip
   32146:	4662      	mov	r2, ip
   32148:	f8d1 e000 	ldr.w	lr, [r1]
   3214c:	f8da 8000 	ldr.w	r8, [sl]
   32150:	f8db 7000 	ldr.w	r7, [fp]
   32154:	e008      	b.n	32168 <ipc_trace_handle+0x22c>
   32156:	2963      	cmp	r1, #99	; 0x63
   32158:	d016      	beq.n	32188 <ipc_trace_handle+0x24c>
   3215a:	2961      	cmp	r1, #97	; 0x61
   3215c:	bf04      	itt	eq
   3215e:	4607      	moveq	r7, r0
   32160:	2601      	moveq	r6, #1
   32162:	3201      	adds	r2, #1
   32164:	42aa      	cmp	r2, r5
   32166:	d013      	beq.n	32190 <ipc_trace_handle+0x254>
   32168:	1c91      	adds	r1, r2, #2
   3216a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   3216e:	6848      	ldr	r0, [r1, #4]
   32170:	7801      	ldrb	r1, [r0, #0]
   32172:	2962      	cmp	r1, #98	; 0x62
   32174:	d1ef      	bne.n	32156 <ipc_trace_handle+0x21a>
   32176:	4680      	mov	r8, r0
   32178:	f04f 0901 	mov.w	r9, #1
   3217c:	e7f1      	b.n	32162 <ipc_trace_handle+0x226>
   3217e:	f7f5 f873 	bl	27268 <bsd_os_trace_irq_set>
   32182:	b003      	add	sp, #12
   32184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32188:	4686      	mov	lr, r0
   3218a:	f04f 0c01 	mov.w	ip, #1
   3218e:	e7e8      	b.n	32162 <ipc_trace_handle+0x226>
   32190:	bba6      	cbnz	r6, 321fc <ipc_trace_handle+0x2c0>
   32192:	f1b9 0f00 	cmp.w	r9, #0
   32196:	d001      	beq.n	3219c <ipc_trace_handle+0x260>
   32198:	f8ca 8000 	str.w	r8, [sl]
   3219c:	f1bc 0f00 	cmp.w	ip, #0
   321a0:	d002      	beq.n	321a8 <ipc_trace_handle+0x26c>
   321a2:	4a1c      	ldr	r2, [pc, #112]	; (32214 <ipc_trace_handle+0x2d8>)
   321a4:	f8c2 e000 	str.w	lr, [r2]
   321a8:	2001      	movs	r0, #1
   321aa:	2200      	movs	r2, #0
   321ac:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   321b0:	e6ed      	b.n	31f8e <ipc_trace_handle+0x52>
   321b2:	2105      	movs	r1, #5
   321b4:	4630      	mov	r0, r6
   321b6:	f8ad 5002 	strh.w	r5, [sp, #2]
   321ba:	f00d f91c 	bl	3f3f6 <bsd_os_trace_put>
   321be:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   321c2:	68e0      	ldr	r0, [r4, #12]
   321c4:	f00d f917 	bl	3f3f6 <bsd_os_trace_put>
   321c8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   321cc:	68e3      	ldr	r3, [r4, #12]
   321ce:	4413      	add	r3, r2
   321d0:	60a3      	str	r3, [r4, #8]
   321d2:	e761      	b.n	32098 <ipc_trace_handle+0x15c>
   321d4:	2105      	movs	r1, #5
   321d6:	4630      	mov	r0, r6
   321d8:	f8ad 5002 	strh.w	r5, [sp, #2]
   321dc:	f00d f90b 	bl	3f3f6 <bsd_os_trace_put>
   321e0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   321e4:	68e0      	ldr	r0, [r4, #12]
   321e6:	f00d f906 	bl	3f3f6 <bsd_os_trace_put>
   321ea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   321ee:	68e3      	ldr	r3, [r4, #12]
   321f0:	4413      	add	r3, r2
   321f2:	60a3      	str	r3, [r4, #8]
   321f4:	e71c      	b.n	32030 <ipc_trace_handle+0xf4>
   321f6:	f7f5 f83f 	bl	27278 <bsd_os_trace_irq_clear>
   321fa:	e6e5      	b.n	31fc8 <ipc_trace_handle+0x8c>
   321fc:	f8cb 7000 	str.w	r7, [fp]
   32200:	e7c7      	b.n	32192 <ipc_trace_handle+0x256>
   32202:	bf00      	nop
   32204:	20024cf4 	.word	0x20024cf4
   32208:	2002bd41 	.word	0x2002bd41
   3220c:	20024cf0 	.word	0x20024cf0
   32210:	20024ce8 	.word	0x20024ce8
   32214:	20024cec 	.word	0x20024cec

00032218 <rpc_trace_coredump_in_progress>:
   32218:	4b01      	ldr	r3, [pc, #4]	; (32220 <rpc_trace_coredump_in_progress+0x8>)
   3221a:	7818      	ldrb	r0, [r3, #0]
   3221c:	4770      	bx	lr
   3221e:	bf00      	nop
   32220:	2002bd41 	.word	0x2002bd41

00032224 <transport_reset>:
   32224:	2000      	movs	r0, #0
   32226:	4770      	bx	lr

00032228 <transport_data_free>:
   32228:	4b0b      	ldr	r3, [pc, #44]	; (32258 <transport_data_free+0x30>)
   3222a:	e9d3 2300 	ldrd	r2, r3, [r3]
   3222e:	4413      	add	r3, r2
   32230:	4298      	cmp	r0, r3
   32232:	d20d      	bcs.n	32250 <transport_data_free+0x28>
   32234:	4282      	cmp	r2, r0
   32236:	d80b      	bhi.n	32250 <transport_data_free+0x28>
   32238:	b510      	push	{r4, lr}
   3223a:	4604      	mov	r4, r0
   3223c:	f000 fdfc 	bl	32e38 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   32240:	b140      	cbz	r0, 32254 <transport_data_free+0x2c>
   32242:	4a06      	ldr	r2, [pc, #24]	; (3225c <transport_data_free+0x34>)
   32244:	6084      	str	r4, [r0, #8]
   32246:	6002      	str	r2, [r0, #0]
   32248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3224c:	f000 bd3c 	b.w	32cc8 <rpc_transport_ipc_tx_send>
   32250:	f7fe bbb0 	b.w	309b4 <nrf_shared_free>
   32254:	bd10      	pop	{r4, pc}
   32256:	bf00      	nop
   32258:	20024cf8 	.word	0x20024cf8
   3225c:	00020001 	.word	0x00020001

00032260 <rpc_transport_ipc_init>:
   32260:	2800      	cmp	r0, #0
   32262:	d02b      	beq.n	322bc <rpc_transport_ipc_init+0x5c>
   32264:	b530      	push	{r4, r5, lr}
   32266:	b089      	sub	sp, #36	; 0x24
   32268:	aa01      	add	r2, sp, #4
   3226a:	4669      	mov	r1, sp
   3226c:	4604      	mov	r4, r0
   3226e:	f000 fc41 	bl	32af4 <rpc_transport_ipc_tx_init>
   32272:	4603      	mov	r3, r0
   32274:	b140      	cbz	r0, 32288 <rpc_transport_ipc_init+0x28>
   32276:	4a13      	ldr	r2, [pc, #76]	; (322c4 <rpc_transport_ipc_init+0x64>)
   32278:	f104 0028 	add.w	r0, r4, #40	; 0x28
   3227c:	c803      	ldmia	r0, {r0, r1}
   3227e:	e882 0003 	stmia.w	r2, {r0, r1}
   32282:	4618      	mov	r0, r3
   32284:	b009      	add	sp, #36	; 0x24
   32286:	bd30      	pop	{r4, r5, pc}
   32288:	e9dd 1200 	ldrd	r1, r2, [sp]
   3228c:	4620      	mov	r0, r4
   3228e:	f000 f857 	bl	32340 <rpc_transport_ipc_rx_init>
   32292:	4603      	mov	r3, r0
   32294:	2800      	cmp	r0, #0
   32296:	d1ee      	bne.n	32276 <rpc_transport_ipc_init+0x16>
   32298:	4b0b      	ldr	r3, [pc, #44]	; (322c8 <rpc_transport_ipc_init+0x68>)
   3229a:	490c      	ldr	r1, [pc, #48]	; (322cc <rpc_transport_ipc_init+0x6c>)
   3229c:	480c      	ldr	r0, [pc, #48]	; (322d0 <rpc_transport_ipc_init+0x70>)
   3229e:	4a0d      	ldr	r2, [pc, #52]	; (322d4 <rpc_transport_ipc_init+0x74>)
   322a0:	9303      	str	r3, [sp, #12]
   322a2:	4d0d      	ldr	r5, [pc, #52]	; (322d8 <rpc_transport_ipc_init+0x78>)
   322a4:	4b0d      	ldr	r3, [pc, #52]	; (322dc <rpc_transport_ipc_init+0x7c>)
   322a6:	9104      	str	r1, [sp, #16]
   322a8:	9005      	str	r0, [sp, #20]
   322aa:	490d      	ldr	r1, [pc, #52]	; (322e0 <rpc_transport_ipc_init+0x80>)
   322ac:	a802      	add	r0, sp, #8
   322ae:	9307      	str	r3, [sp, #28]
   322b0:	9506      	str	r5, [sp, #24]
   322b2:	9202      	str	r2, [sp, #8]
   322b4:	f004 f880 	bl	363b8 <rpc_transport_register>
   322b8:	4603      	mov	r3, r0
   322ba:	e7dc      	b.n	32276 <rpc_transport_ipc_init+0x16>
   322bc:	230e      	movs	r3, #14
   322be:	4618      	mov	r0, r3
   322c0:	4770      	bx	lr
   322c2:	bf00      	nop
   322c4:	20024cf8 	.word	0x20024cf8
   322c8:	00032dc9 	.word	0x00032dc9
   322cc:	00032e99 	.word	0x00032e99
   322d0:	0003295d 	.word	0x0003295d
   322d4:	00032cc9 	.word	0x00032cc9
   322d8:	00032229 	.word	0x00032229
   322dc:	00032225 	.word	0x00032225
   322e0:	20024d00 	.word	0x20024d00

000322e4 <rpc_transport_rx_handle>:
   322e4:	b160      	cbz	r0, 32300 <rpc_transport_rx_handle+0x1c>
   322e6:	b508      	push	{r3, lr}
   322e8:	6843      	ldr	r3, [r0, #4]
   322ea:	b2db      	uxtb	r3, r3
   322ec:	2b02      	cmp	r3, #2
   322ee:	d00e      	beq.n	3230e <rpc_transport_rx_handle+0x2a>
   322f0:	6803      	ldr	r3, [r0, #0]
   322f2:	0c1b      	lsrs	r3, r3, #16
   322f4:	2b02      	cmp	r3, #2
   322f6:	d005      	beq.n	32304 <rpc_transport_rx_handle+0x20>
   322f8:	2b04      	cmp	r3, #4
   322fa:	d00e      	beq.n	3231a <rpc_transport_rx_handle+0x36>
   322fc:	2000      	movs	r0, #0
   322fe:	bd08      	pop	{r3, pc}
   32300:	2000      	movs	r0, #0
   32302:	4770      	bx	lr
   32304:	6880      	ldr	r0, [r0, #8]
   32306:	f7fe fb55 	bl	309b4 <nrf_shared_free>
   3230a:	2000      	movs	r0, #0
   3230c:	bd08      	pop	{r3, pc}
   3230e:	4601      	mov	r1, r0
   32310:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   32314:	4803      	ldr	r0, [pc, #12]	; (32324 <rpc_transport_rx_handle+0x40>)
   32316:	f003 bf41 	b.w	3619c <rpc_transport_input>
   3231a:	4802      	ldr	r0, [pc, #8]	; (32324 <rpc_transport_rx_handle+0x40>)
   3231c:	f004 f8ac 	bl	36478 <rpc_transport_unregister>
   32320:	2000      	movs	r0, #0
   32322:	bd08      	pop	{r3, pc}
   32324:	20024d00 	.word	0x20024d00

00032328 <rpc_transport_ipc_shutdown>:
   32328:	b508      	push	{r3, lr}
   3232a:	f000 fdbf 	bl	32eac <rpc_transport_ipc_tx_suspend>
   3232e:	f000 fb4b 	bl	329c8 <rpc_transport_ipc_rx_suspend>
   32332:	f000 fdc1 	bl	32eb8 <rpc_transport_ipc_tx_shutdown>
   32336:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3233a:	f000 bb65 	b.w	32a08 <rpc_transport_ipc_rx_shutdown>
   3233e:	bf00      	nop

00032340 <rpc_transport_ipc_rx_init>:
   32340:	2800      	cmp	r0, #0
   32342:	f000 80ff 	beq.w	32544 <rpc_transport_ipc_rx_init+0x204>
   32346:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3234a:	6805      	ldr	r5, [r0, #0]
   3234c:	b095      	sub	sp, #84	; 0x54
   3234e:	2d00      	cmp	r5, #0
   32350:	f000 80ee 	beq.w	32530 <rpc_transport_ipc_rx_init+0x1f0>
   32354:	6883      	ldr	r3, [r0, #8]
   32356:	2b00      	cmp	r3, #0
   32358:	f000 80ea 	beq.w	32530 <rpc_transport_ipc_rx_init+0x1f0>
   3235c:	6907      	ldr	r7, [r0, #16]
   3235e:	2f00      	cmp	r7, #0
   32360:	f000 80e6 	beq.w	32530 <rpc_transport_ipc_rx_init+0x1f0>
   32364:	6a84      	ldr	r4, [r0, #40]	; 0x28
   32366:	2c00      	cmp	r4, #0
   32368:	f000 80e2 	beq.w	32530 <rpc_transport_ipc_rx_init+0x1f0>
   3236c:	6844      	ldr	r4, [r0, #4]
   3236e:	2c1b      	cmp	r4, #27
   32370:	f240 80e3 	bls.w	3253a <rpc_transport_ipc_rx_init+0x1fa>
   32374:	68c4      	ldr	r4, [r0, #12]
   32376:	2c0b      	cmp	r4, #11
   32378:	f240 80df 	bls.w	3253a <rpc_transport_ipc_rx_init+0x1fa>
   3237c:	f8d0 e014 	ldr.w	lr, [r0, #20]
   32380:	f1be 0f17 	cmp.w	lr, #23
   32384:	f240 80d9 	bls.w	3253a <rpc_transport_ipc_rx_init+0x1fa>
   32388:	2600      	movs	r6, #0
   3238a:	4604      	mov	r4, r0
   3238c:	486f      	ldr	r0, [pc, #444]	; (3254c <rpc_transport_ipc_rx_init+0x20c>)
   3238e:	e9cd 1200 	strd	r1, r2, [sp]
   32392:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 3256c <rpc_transport_ipc_rx_init+0x22c>
   32396:	496e      	ldr	r1, [pc, #440]	; (32550 <rpc_transport_ipc_rx_init+0x210>)
   32398:	8006      	strh	r6, [r0, #0]
   3239a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   3239c:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 32570 <rpc_transport_ipc_rx_init+0x230>
   323a0:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 32574 <rpc_transport_ipc_rx_init+0x234>
   323a4:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 32578 <rpc_transport_ipc_rx_init+0x238>
   323a8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 3257c <rpc_transport_ipc_rx_init+0x23c>
   323ac:	4672      	mov	r2, lr
   323ae:	600e      	str	r6, [r1, #0]
   323b0:	f8ca 0000 	str.w	r0, [sl]
   323b4:	4631      	mov	r1, r6
   323b6:	4638      	mov	r0, r7
   323b8:	f8cc 6000 	str.w	r6, [ip]
   323bc:	f8cb 3000 	str.w	r3, [fp]
   323c0:	f8c8 6000 	str.w	r6, [r8]
   323c4:	f8c9 6000 	str.w	r6, [r9]
   323c8:	f00e f948 	bl	4065c <memset>
   323cc:	69e3      	ldr	r3, [r4, #28]
   323ce:	4638      	mov	r0, r7
   323d0:	603b      	str	r3, [r7, #0]
   323d2:	69a3      	ldr	r3, [r4, #24]
   323d4:	607b      	str	r3, [r7, #4]
   323d6:	f7ff fcc9 	bl	31d6c <ipc_trace_init>
   323da:	2201      	movs	r2, #1
   323dc:	f04f 0c04 	mov.w	ip, #4
   323e0:	4b5c      	ldr	r3, [pc, #368]	; (32554 <rpc_transport_ipc_rx_init+0x214>)
   323e2:	495d      	ldr	r1, [pc, #372]	; (32558 <rpc_transport_ipc_rx_init+0x218>)
   323e4:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   323e8:	6809      	ldr	r1, [r1, #0]
   323ea:	2080      	movs	r0, #128	; 0x80
   323ec:	9104      	str	r1, [sp, #16]
   323ee:	495b      	ldr	r1, [pc, #364]	; (3255c <rpc_transport_ipc_rx_init+0x21c>)
   323f0:	f8dd e010 	ldr.w	lr, [sp, #16]
   323f4:	f8c3 6614 	str.w	r6, [r3, #1556]	; 0x614
   323f8:	6809      	ldr	r1, [r1, #0]
   323fa:	702e      	strb	r6, [r5, #0]
   323fc:	9103      	str	r1, [sp, #12]
   323fe:	706e      	strb	r6, [r5, #1]
   32400:	70ee      	strb	r6, [r5, #3]
   32402:	70aa      	strb	r2, [r5, #2]
   32404:	9903      	ldr	r1, [sp, #12]
   32406:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   32408:	f8db e000 	ldr.w	lr, [fp]
   3240c:	6069      	str	r1, [r5, #4]
   3240e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   32410:	9c01      	ldr	r4, [sp, #4]
   32412:	60a9      	str	r1, [r5, #8]
   32414:	60ec      	str	r4, [r5, #12]
   32416:	9c00      	ldr	r4, [sp, #0]
   32418:	4951      	ldr	r1, [pc, #324]	; (32560 <rpc_transport_ipc_rx_init+0x220>)
   3241a:	61af      	str	r7, [r5, #24]
   3241c:	f8c5 e014 	str.w	lr, [r5, #20]
   32420:	612c      	str	r4, [r5, #16]
   32422:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   32426:	680c      	ldr	r4, [r1, #0]
   32428:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   3242c:	9405      	str	r4, [sp, #20]
   3242e:	9c05      	ldr	r4, [sp, #20]
   32430:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   32434:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   32438:	f44f 6780 	mov.w	r7, #1024	; 0x400
   3243c:	9406      	str	r4, [sp, #24]
   3243e:	9c06      	ldr	r4, [sp, #24]
   32440:	2410      	movs	r4, #16
   32442:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   32446:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   3244a:	4d46      	ldr	r5, [pc, #280]	; (32564 <rpc_transport_ipc_rx_init+0x224>)
   3244c:	9407      	str	r4, [sp, #28]
   3244e:	9c07      	ldr	r4, [sp, #28]
   32450:	2440      	movs	r4, #64	; 0x40
   32452:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   32456:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   3245a:	9408      	str	r4, [sp, #32]
   3245c:	9c08      	ldr	r4, [sp, #32]
   3245e:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   32462:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   32466:	9009      	str	r0, [sp, #36]	; 0x24
   32468:	9809      	ldr	r0, [sp, #36]	; 0x24
   3246a:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
   3246e:	6808      	ldr	r0, [r1, #0]
   32470:	900a      	str	r0, [sp, #40]	; 0x28
   32472:	980a      	ldr	r0, [sp, #40]	; 0x28
   32474:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
   32478:	6888      	ldr	r0, [r1, #8]
   3247a:	900b      	str	r0, [sp, #44]	; 0x2c
   3247c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   3247e:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
   32482:	6908      	ldr	r0, [r1, #16]
   32484:	900c      	str	r0, [sp, #48]	; 0x30
   32486:	980c      	ldr	r0, [sp, #48]	; 0x30
   32488:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
   3248c:	6988      	ldr	r0, [r1, #24]
   3248e:	900d      	str	r0, [sp, #52]	; 0x34
   32490:	980d      	ldr	r0, [sp, #52]	; 0x34
   32492:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
   32496:	69c8      	ldr	r0, [r1, #28]
   32498:	f501 7101 	add.w	r1, r1, #516	; 0x204
   3249c:	900e      	str	r0, [sp, #56]	; 0x38
   3249e:	980e      	ldr	r0, [sp, #56]	; 0x38
   324a0:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   324a4:	4310      	orrs	r0, r2
   324a6:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   324aa:	680c      	ldr	r4, [r1, #0]
   324ac:	482e      	ldr	r0, [pc, #184]	; (32568 <rpc_transport_ipc_rx_init+0x228>)
   324ae:	940f      	str	r4, [sp, #60]	; 0x3c
   324b0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   324b2:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   324b6:	ea44 040c 	orr.w	r4, r4, ip
   324ba:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   324be:	680c      	ldr	r4, [r1, #0]
   324c0:	9410      	str	r4, [sp, #64]	; 0x40
   324c2:	9c10      	ldr	r4, [sp, #64]	; 0x40
   324c4:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   324c8:	f044 0410 	orr.w	r4, r4, #16
   324cc:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   324d0:	680c      	ldr	r4, [r1, #0]
   324d2:	9411      	str	r4, [sp, #68]	; 0x44
   324d4:	9c11      	ldr	r4, [sp, #68]	; 0x44
   324d6:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   324da:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   324de:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   324e2:	680c      	ldr	r4, [r1, #0]
   324e4:	9412      	str	r4, [sp, #72]	; 0x48
   324e6:	9c12      	ldr	r4, [sp, #72]	; 0x48
   324e8:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   324ec:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   324f0:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   324f4:	f8da 3000 	ldr.w	r3, [sl]
   324f8:	6809      	ldr	r1, [r1, #0]
   324fa:	015b      	lsls	r3, r3, #5
   324fc:	9113      	str	r1, [sp, #76]	; 0x4c
   324fe:	b2db      	uxtb	r3, r3
   32500:	9913      	ldr	r1, [sp, #76]	; 0x4c
   32502:	f8c8 2000 	str.w	r2, [r8]
   32506:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   3250a:	f8c0 7184 	str.w	r7, [r0, #388]	; 0x184
   3250e:	6047      	str	r7, [r0, #4]
   32510:	9602      	str	r6, [sp, #8]
   32512:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
   32516:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   3251a:	9302      	str	r3, [sp, #8]
   3251c:	9b02      	ldr	r3, [sp, #8]
   3251e:	f8d8 3000 	ldr.w	r3, [r8]
   32522:	2b01      	cmp	r3, #1
   32524:	d0fb      	beq.n	3251e <rpc_transport_ipc_rx_init+0x1de>
   32526:	f8d9 0000 	ldr.w	r0, [r9]
   3252a:	b015      	add	sp, #84	; 0x54
   3252c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32530:	f24c 000e 	movw	r0, #49166	; 0xc00e
   32534:	b015      	add	sp, #84	; 0x54
   32536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3253a:	f24c 0009 	movw	r0, #49161	; 0xc009
   3253e:	b015      	add	sp, #84	; 0x54
   32540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32544:	f24c 000e 	movw	r0, #49166	; 0xc00e
   32548:	4770      	bx	lr
   3254a:	bf00      	nop
   3254c:	2002939a 	.word	0x2002939a
   32550:	20024d10 	.word	0x20024d10
   32554:	4002a000 	.word	0x4002a000
   32558:	4002a610 	.word	0x4002a610
   3255c:	4002a614 	.word	0x4002a614
   32560:	4002a590 	.word	0x4002a590
   32564:	40005000 	.word	0x40005000
   32568:	e000e100 	.word	0xe000e100
   3256c:	20024d08 	.word	0x20024d08
   32570:	20024d14 	.word	0x20024d14
   32574:	20024d0c 	.word	0x20024d0c
   32578:	20024d18 	.word	0x20024d18
   3257c:	20024d04 	.word	0x20024d04

00032580 <IPC_IRQHandler>:
   32580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32584:	f44f 6580 	mov.w	r5, #1024	; 0x400
   32588:	4ca7      	ldr	r4, [pc, #668]	; (32828 <IPC_IRQHandler+0x2a8>)
   3258a:	b087      	sub	sp, #28
   3258c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   32590:	f3bf 8f4f 	dsb	sy
   32594:	f3bf 8f6f 	isb	sy
   32598:	4ea4      	ldr	r6, [pc, #656]	; (3282c <IPC_IRQHandler+0x2ac>)
   3259a:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
   3259e:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   325a2:	061f      	lsls	r7, r3, #24
   325a4:	f100 80c8 	bmi.w	32738 <IPC_IRQHandler+0x1b8>
   325a8:	4ba0      	ldr	r3, [pc, #640]	; (3282c <IPC_IRQHandler+0x2ac>)
   325aa:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   325ae:	07d0      	lsls	r0, r2, #31
   325b0:	f100 80d4 	bmi.w	3275c <IPC_IRQHandler+0x1dc>
   325b4:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   325b8:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   325bc:	f040 80b6 	bne.w	3272c <IPC_IRQHandler+0x1ac>
   325c0:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   325c4:	0749      	lsls	r1, r1, #29
   325c6:	f100 80e6 	bmi.w	32796 <IPC_IRQHandler+0x216>
   325ca:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   325ce:	06da      	lsls	r2, r3, #27
   325d0:	f140 809d 	bpl.w	3270e <IPC_IRQHandler+0x18e>
   325d4:	2100      	movs	r1, #0
   325d6:	4a95      	ldr	r2, [pc, #596]	; (3282c <IPC_IRQHandler+0x2ac>)
   325d8:	4b95      	ldr	r3, [pc, #596]	; (32830 <IPC_IRQHandler+0x2b0>)
   325da:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
   325de:	681b      	ldr	r3, [r3, #0]
   325e0:	9304      	str	r3, [sp, #16]
   325e2:	9b04      	ldr	r3, [sp, #16]
   325e4:	f8df 8270 	ldr.w	r8, [pc, #624]	; 32858 <IPC_IRQHandler+0x2d8>
   325e8:	4f92      	ldr	r7, [pc, #584]	; (32834 <IPC_IRQHandler+0x2b4>)
   325ea:	f8df 9270 	ldr.w	r9, [pc, #624]	; 3285c <IPC_IRQHandler+0x2dc>
   325ee:	f8d8 a000 	ldr.w	sl, [r8]
   325f2:	f8da 1000 	ldr.w	r1, [sl]
   325f6:	2900      	cmp	r1, #0
   325f8:	d03f      	beq.n	3267a <IPC_IRQHandler+0xfa>
   325fa:	2200      	movs	r2, #0
   325fc:	4614      	mov	r4, r2
   325fe:	e002      	b.n	32606 <IPC_IRQHandler+0x86>
   32600:	3401      	adds	r4, #1
   32602:	428c      	cmp	r4, r1
   32604:	d227      	bcs.n	32656 <IPC_IRQHandler+0xd6>
   32606:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   3260a:	68ab      	ldr	r3, [r5, #8]
   3260c:	2b00      	cmp	r3, #0
   3260e:	d0f7      	beq.n	32600 <IPC_IRQHandler+0x80>
   32610:	686e      	ldr	r6, [r5, #4]
   32612:	b2f6      	uxtb	r6, r6
   32614:	2e01      	cmp	r6, #1
   32616:	d1f3      	bne.n	32600 <IPC_IRQHandler+0x80>
   32618:	6868      	ldr	r0, [r5, #4]
   3261a:	f8b9 3000 	ldrh.w	r3, [r9]
   3261e:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   32622:	d1ed      	bne.n	32600 <IPC_IRQHandler+0x80>
   32624:	686a      	ldr	r2, [r5, #4]
   32626:	3301      	adds	r3, #1
   32628:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   3262c:	f042 0202 	orr.w	r2, r2, #2
   32630:	606a      	str	r2, [r5, #4]
   32632:	68a8      	ldr	r0, [r5, #8]
   32634:	f8a9 3000 	strh.w	r3, [r9]
   32638:	f7ff fe54 	bl	322e4 <rpc_transport_rx_handle>
   3263c:	4632      	mov	r2, r6
   3263e:	b928      	cbnz	r0, 3264c <IPC_IRQHandler+0xcc>
   32640:	686b      	ldr	r3, [r5, #4]
   32642:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   32646:	f043 0303 	orr.w	r3, r3, #3
   3264a:	606b      	str	r3, [r5, #4]
   3264c:	f8da 1000 	ldr.w	r1, [sl]
   32650:	3401      	adds	r4, #1
   32652:	428c      	cmp	r4, r1
   32654:	d3d7      	bcc.n	32606 <IPC_IRQHandler+0x86>
   32656:	2a00      	cmp	r2, #0
   32658:	d1cd      	bne.n	325f6 <IPC_IRQHandler+0x76>
   3265a:	b171      	cbz	r1, 3267a <IPC_IRQHandler+0xfa>
   3265c:	4613      	mov	r3, r2
   3265e:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
   32662:	6890      	ldr	r0, [r2, #8]
   32664:	3301      	adds	r3, #1
   32666:	b130      	cbz	r0, 32676 <IPC_IRQHandler+0xf6>
   32668:	f8d2 b004 	ldr.w	fp, [r2, #4]
   3266c:	fa5f fb8b 	uxtb.w	fp, fp
   32670:	f1bb 0f01 	cmp.w	fp, #1
   32674:	d003      	beq.n	3267e <IPC_IRQHandler+0xfe>
   32676:	428b      	cmp	r3, r1
   32678:	d1f1      	bne.n	3265e <IPC_IRQHandler+0xde>
   3267a:	f04f 0b00 	mov.w	fp, #0
   3267e:	f8d7 a000 	ldr.w	sl, [r7]
   32682:	f8da 2000 	ldr.w	r2, [sl]
   32686:	2a00      	cmp	r2, #0
   32688:	d03d      	beq.n	32706 <IPC_IRQHandler+0x186>
   3268a:	2100      	movs	r1, #0
   3268c:	460c      	mov	r4, r1
   3268e:	e002      	b.n	32696 <IPC_IRQHandler+0x116>
   32690:	3401      	adds	r4, #1
   32692:	4294      	cmp	r4, r2
   32694:	d227      	bcs.n	326e6 <IPC_IRQHandler+0x166>
   32696:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   3269a:	68ab      	ldr	r3, [r5, #8]
   3269c:	2b00      	cmp	r3, #0
   3269e:	d0f7      	beq.n	32690 <IPC_IRQHandler+0x110>
   326a0:	686e      	ldr	r6, [r5, #4]
   326a2:	b2f6      	uxtb	r6, r6
   326a4:	2e01      	cmp	r6, #1
   326a6:	d1f3      	bne.n	32690 <IPC_IRQHandler+0x110>
   326a8:	6868      	ldr	r0, [r5, #4]
   326aa:	f8b9 3000 	ldrh.w	r3, [r9]
   326ae:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   326b2:	d1ed      	bne.n	32690 <IPC_IRQHandler+0x110>
   326b4:	686a      	ldr	r2, [r5, #4]
   326b6:	3301      	adds	r3, #1
   326b8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   326bc:	f042 0202 	orr.w	r2, r2, #2
   326c0:	606a      	str	r2, [r5, #4]
   326c2:	68a8      	ldr	r0, [r5, #8]
   326c4:	f8a9 3000 	strh.w	r3, [r9]
   326c8:	f7ff fe0c 	bl	322e4 <rpc_transport_rx_handle>
   326cc:	4631      	mov	r1, r6
   326ce:	b928      	cbnz	r0, 326dc <IPC_IRQHandler+0x15c>
   326d0:	686a      	ldr	r2, [r5, #4]
   326d2:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   326d6:	f043 0303 	orr.w	r3, r3, #3
   326da:	606b      	str	r3, [r5, #4]
   326dc:	f8da 2000 	ldr.w	r2, [sl]
   326e0:	3401      	adds	r4, #1
   326e2:	4294      	cmp	r4, r2
   326e4:	d3d7      	bcc.n	32696 <IPC_IRQHandler+0x116>
   326e6:	2900      	cmp	r1, #0
   326e8:	d1cd      	bne.n	32686 <IPC_IRQHandler+0x106>
   326ea:	b162      	cbz	r2, 32706 <IPC_IRQHandler+0x186>
   326ec:	460b      	mov	r3, r1
   326ee:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   326f2:	6888      	ldr	r0, [r1, #8]
   326f4:	3301      	adds	r3, #1
   326f6:	b120      	cbz	r0, 32702 <IPC_IRQHandler+0x182>
   326f8:	6849      	ldr	r1, [r1, #4]
   326fa:	b2c9      	uxtb	r1, r1
   326fc:	2901      	cmp	r1, #1
   326fe:	f43f af76 	beq.w	325ee <IPC_IRQHandler+0x6e>
   32702:	4293      	cmp	r3, r2
   32704:	d1f3      	bne.n	326ee <IPC_IRQHandler+0x16e>
   32706:	f1bb 0f00 	cmp.w	fp, #0
   3270a:	f47f af70 	bne.w	325ee <IPC_IRQHandler+0x6e>
   3270e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   32712:	4b49      	ldr	r3, [pc, #292]	; (32838 <IPC_IRQHandler+0x2b8>)
   32714:	4a44      	ldr	r2, [pc, #272]	; (32828 <IPC_IRQHandler+0x2a8>)
   32716:	681b      	ldr	r3, [r3, #0]
   32718:	015b      	lsls	r3, r3, #5
   3271a:	b2db      	uxtb	r3, r3
   3271c:	f882 332a 	strb.w	r3, [r2, #810]	; 0x32a
   32720:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
   32724:	6051      	str	r1, [r2, #4]
   32726:	b007      	add	sp, #28
   32728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3272c:	2206      	movs	r2, #6
   3272e:	4b43      	ldr	r3, [pc, #268]	; (3283c <IPC_IRQHandler+0x2bc>)
   32730:	601a      	str	r2, [r3, #0]
   32732:	b007      	add	sp, #28
   32734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32738:	f7ff fc00 	bl	31f3c <ipc_trace_handle>
   3273c:	f7ff fd6c 	bl	32218 <rpc_trace_coredump_in_progress>
   32740:	2800      	cmp	r0, #0
   32742:	d149      	bne.n	327d8 <IPC_IRQHandler+0x258>
   32744:	4b3e      	ldr	r3, [pc, #248]	; (32840 <IPC_IRQHandler+0x2c0>)
   32746:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
   3274a:	681b      	ldr	r3, [r3, #0]
   3274c:	9301      	str	r3, [sp, #4]
   3274e:	9b01      	ldr	r3, [sp, #4]
   32750:	4b36      	ldr	r3, [pc, #216]	; (3282c <IPC_IRQHandler+0x2ac>)
   32752:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   32756:	07d0      	lsls	r0, r2, #31
   32758:	f57f af2c 	bpl.w	325b4 <IPC_IRQHandler+0x34>
   3275c:	2000      	movs	r0, #0
   3275e:	f248 0202 	movw	r2, #32770	; 0x8002
   32762:	4938      	ldr	r1, [pc, #224]	; (32844 <IPC_IRQHandler+0x2c4>)
   32764:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   32768:	6809      	ldr	r1, [r1, #0]
   3276a:	9102      	str	r1, [sp, #8]
   3276c:	9902      	ldr	r1, [sp, #8]
   3276e:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   32772:	4293      	cmp	r3, r2
   32774:	d040      	beq.n	327f8 <IPC_IRQHandler+0x278>
   32776:	d81e      	bhi.n	327b6 <IPC_IRQHandler+0x236>
   32778:	2b00      	cmp	r3, #0
   3277a:	d04f      	beq.n	3281c <IPC_IRQHandler+0x29c>
   3277c:	2b02      	cmp	r3, #2
   3277e:	d942      	bls.n	32806 <IPC_IRQHandler+0x286>
   32780:	f248 0201 	movw	r2, #32769	; 0x8001
   32784:	4293      	cmp	r3, r2
   32786:	d149      	bne.n	3281c <IPC_IRQHandler+0x29c>
   32788:	2003      	movs	r0, #3
   3278a:	2207      	movs	r2, #7
   3278c:	492b      	ldr	r1, [pc, #172]	; (3283c <IPC_IRQHandler+0x2bc>)
   3278e:	4b2e      	ldr	r3, [pc, #184]	; (32848 <IPC_IRQHandler+0x2c8>)
   32790:	6008      	str	r0, [r1, #0]
   32792:	601a      	str	r2, [r3, #0]
   32794:	e7cd      	b.n	32732 <IPC_IRQHandler+0x1b2>
   32796:	4d29      	ldr	r5, [pc, #164]	; (3283c <IPC_IRQHandler+0x2bc>)
   32798:	6829      	ldr	r1, [r5, #0]
   3279a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   3279e:	2901      	cmp	r1, #1
   327a0:	492a      	ldr	r1, [pc, #168]	; (3284c <IPC_IRQHandler+0x2cc>)
   327a2:	d05d      	beq.n	32860 <IPC_IRQHandler+0x2e0>
   327a4:	680a      	ldr	r2, [r1, #0]
   327a6:	9203      	str	r2, [sp, #12]
   327a8:	9a03      	ldr	r2, [sp, #12]
   327aa:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   327ae:	06db      	lsls	r3, r3, #27
   327b0:	f53f af10 	bmi.w	325d4 <IPC_IRQHandler+0x54>
   327b4:	e716      	b.n	325e4 <IPC_IRQHandler+0x64>
   327b6:	4a26      	ldr	r2, [pc, #152]	; (32850 <IPC_IRQHandler+0x2d0>)
   327b8:	4293      	cmp	r3, r2
   327ba:	d814      	bhi.n	327e6 <IPC_IRQHandler+0x266>
   327bc:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   327c0:	d814      	bhi.n	327ec <IPC_IRQHandler+0x26c>
   327c2:	f248 0203 	movw	r2, #32771	; 0x8003
   327c6:	4293      	cmp	r3, r2
   327c8:	d128      	bne.n	3281c <IPC_IRQHandler+0x29c>
   327ca:	2003      	movs	r0, #3
   327cc:	2204      	movs	r2, #4
   327ce:	491b      	ldr	r1, [pc, #108]	; (3283c <IPC_IRQHandler+0x2bc>)
   327d0:	4b1d      	ldr	r3, [pc, #116]	; (32848 <IPC_IRQHandler+0x2c8>)
   327d2:	6008      	str	r0, [r1, #0]
   327d4:	601a      	str	r2, [r3, #0]
   327d6:	e7ac      	b.n	32732 <IPC_IRQHandler+0x1b2>
   327d8:	23e0      	movs	r3, #224	; 0xe0
   327da:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
   327de:	6065      	str	r5, [r4, #4]
   327e0:	b007      	add	sp, #28
   327e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   327e6:	4a1b      	ldr	r2, [pc, #108]	; (32854 <IPC_IRQHandler+0x2d4>)
   327e8:	4293      	cmp	r3, r2
   327ea:	d117      	bne.n	3281c <IPC_IRQHandler+0x29c>
   327ec:	2003      	movs	r0, #3
   327ee:	4913      	ldr	r1, [pc, #76]	; (3283c <IPC_IRQHandler+0x2bc>)
   327f0:	4a15      	ldr	r2, [pc, #84]	; (32848 <IPC_IRQHandler+0x2c8>)
   327f2:	6008      	str	r0, [r1, #0]
   327f4:	6013      	str	r3, [r2, #0]
   327f6:	e79c      	b.n	32732 <IPC_IRQHandler+0x1b2>
   327f8:	2003      	movs	r0, #3
   327fa:	2206      	movs	r2, #6
   327fc:	490f      	ldr	r1, [pc, #60]	; (3283c <IPC_IRQHandler+0x2bc>)
   327fe:	4b12      	ldr	r3, [pc, #72]	; (32848 <IPC_IRQHandler+0x2c8>)
   32800:	6008      	str	r0, [r1, #0]
   32802:	601a      	str	r2, [r3, #0]
   32804:	e795      	b.n	32732 <IPC_IRQHandler+0x1b2>
   32806:	2303      	movs	r3, #3
   32808:	4618      	mov	r0, r3
   3280a:	490c      	ldr	r1, [pc, #48]	; (3283c <IPC_IRQHandler+0x2bc>)
   3280c:	4a0e      	ldr	r2, [pc, #56]	; (32848 <IPC_IRQHandler+0x2c8>)
   3280e:	600b      	str	r3, [r1, #0]
   32810:	6013      	str	r3, [r2, #0]
   32812:	b007      	add	sp, #28
   32814:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32818:	f7ff b8fc 	b.w	31a14 <rpc_transport_ipc_fault_handler>
   3281c:	2303      	movs	r3, #3
   3281e:	4907      	ldr	r1, [pc, #28]	; (3283c <IPC_IRQHandler+0x2bc>)
   32820:	4a09      	ldr	r2, [pc, #36]	; (32848 <IPC_IRQHandler+0x2c8>)
   32822:	600b      	str	r3, [r1, #0]
   32824:	6013      	str	r3, [r2, #0]
   32826:	e784      	b.n	32732 <IPC_IRQHandler+0x1b2>
   32828:	e000e100 	.word	0xe000e100
   3282c:	4002a000 	.word	0x4002a000
   32830:	4002a110 	.word	0x4002a110
   32834:	20024d10 	.word	0x20024d10
   32838:	20024d08 	.word	0x20024d08
   3283c:	20024d0c 	.word	0x20024d0c
   32840:	4002a11c 	.word	0x4002a11c
   32844:	4002a100 	.word	0x4002a100
   32848:	20024d04 	.word	0x20024d04
   3284c:	4002a108 	.word	0x4002a108
   32850:	04400004 	.word	0x04400004
   32854:	05500001 	.word	0x05500001
   32858:	20024d14 	.word	0x20024d14
   3285c:	2002939a 	.word	0x2002939a
   32860:	4a37      	ldr	r2, [pc, #220]	; (32940 <IPC_IRQHandler+0x3c0>)
   32862:	680b      	ldr	r3, [r1, #0]
   32864:	6812      	ldr	r2, [r2, #0]
   32866:	9305      	str	r3, [sp, #20]
   32868:	6893      	ldr	r3, [r2, #8]
   3286a:	4836      	ldr	r0, [pc, #216]	; (32944 <IPC_IRQHandler+0x3c4>)
   3286c:	4936      	ldr	r1, [pc, #216]	; (32948 <IPC_IRQHandler+0x3c8>)
   3286e:	6003      	str	r3, [r0, #0]
   32870:	6854      	ldr	r4, [r2, #4]
   32872:	9a05      	ldr	r2, [sp, #20]
   32874:	600c      	str	r4, [r1, #0]
   32876:	b16b      	cbz	r3, 32894 <IPC_IRQHandler+0x314>
   32878:	b164      	cbz	r4, 32894 <IPC_IRQHandler+0x314>
   3287a:	681b      	ldr	r3, [r3, #0]
   3287c:	2b10      	cmp	r3, #16
   3287e:	d802      	bhi.n	32886 <IPC_IRQHandler+0x306>
   32880:	6822      	ldr	r2, [r4, #0]
   32882:	2a10      	cmp	r2, #16
   32884:	d90c      	bls.n	328a0 <IPC_IRQHandler+0x320>
   32886:	2103      	movs	r1, #3
   32888:	f24c 0206 	movw	r2, #49158	; 0xc006
   3288c:	4b2f      	ldr	r3, [pc, #188]	; (3294c <IPC_IRQHandler+0x3cc>)
   3288e:	6029      	str	r1, [r5, #0]
   32890:	601a      	str	r2, [r3, #0]
   32892:	e74e      	b.n	32732 <IPC_IRQHandler+0x1b2>
   32894:	2103      	movs	r1, #3
   32896:	2210      	movs	r2, #16
   32898:	4b2c      	ldr	r3, [pc, #176]	; (3294c <IPC_IRQHandler+0x3cc>)
   3289a:	6029      	str	r1, [r5, #0]
   3289c:	601a      	str	r2, [r3, #0]
   3289e:	e748      	b.n	32732 <IPC_IRQHandler+0x1b2>
   328a0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 32958 <IPC_IRQHandler+0x3d8>
   328a4:	2a00      	cmp	r2, #0
   328a6:	d042      	beq.n	3292e <IPC_IRQHandler+0x3ae>
   328a8:	2300      	movs	r3, #0
   328aa:	f104 0904 	add.w	r9, r4, #4
   328ae:	461e      	mov	r6, r3
   328b0:	e002      	b.n	328b8 <IPC_IRQHandler+0x338>
   328b2:	3601      	adds	r6, #1
   328b4:	4296      	cmp	r6, r2
   328b6:	d22a      	bcs.n	3290e <IPC_IRQHandler+0x38e>
   328b8:	00f7      	lsls	r7, r6, #3
   328ba:	19e1      	adds	r1, r4, r7
   328bc:	6888      	ldr	r0, [r1, #8]
   328be:	2800      	cmp	r0, #0
   328c0:	d0f7      	beq.n	328b2 <IPC_IRQHandler+0x332>
   328c2:	f8d1 a004 	ldr.w	sl, [r1, #4]
   328c6:	fa5f fa8a 	uxtb.w	sl, sl
   328ca:	f1ba 0f01 	cmp.w	sl, #1
   328ce:	d1f0      	bne.n	328b2 <IPC_IRQHandler+0x332>
   328d0:	f8d1 c004 	ldr.w	ip, [r1, #4]
   328d4:	f8b8 0000 	ldrh.w	r0, [r8]
   328d8:	ebb0 4f1c 	cmp.w	r0, ip, lsr #16
   328dc:	d1e9      	bne.n	328b2 <IPC_IRQHandler+0x332>
   328de:	684b      	ldr	r3, [r1, #4]
   328e0:	1c42      	adds	r2, r0, #1
   328e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   328e6:	f043 0302 	orr.w	r3, r3, #2
   328ea:	604b      	str	r3, [r1, #4]
   328ec:	6888      	ldr	r0, [r1, #8]
   328ee:	f8a8 2000 	strh.w	r2, [r8]
   328f2:	f7ff fcf7 	bl	322e4 <rpc_transport_rx_handle>
   328f6:	4653      	mov	r3, sl
   328f8:	b938      	cbnz	r0, 3290a <IPC_IRQHandler+0x38a>
   328fa:	f859 2007 	ldr.w	r2, [r9, r7]
   328fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   32902:	f042 0203 	orr.w	r2, r2, #3
   32906:	f849 2007 	str.w	r2, [r9, r7]
   3290a:	6822      	ldr	r2, [r4, #0]
   3290c:	e7d1      	b.n	328b2 <IPC_IRQHandler+0x332>
   3290e:	2b00      	cmp	r3, #0
   32910:	d1c8      	bne.n	328a4 <IPC_IRQHandler+0x324>
   32912:	b912      	cbnz	r2, 3291a <IPC_IRQHandler+0x39a>
   32914:	e00b      	b.n	3292e <IPC_IRQHandler+0x3ae>
   32916:	4293      	cmp	r3, r2
   32918:	d009      	beq.n	3292e <IPC_IRQHandler+0x3ae>
   3291a:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   3291e:	6888      	ldr	r0, [r1, #8]
   32920:	3301      	adds	r3, #1
   32922:	2800      	cmp	r0, #0
   32924:	d0f7      	beq.n	32916 <IPC_IRQHandler+0x396>
   32926:	6849      	ldr	r1, [r1, #4]
   32928:	b2c9      	uxtb	r1, r1
   3292a:	2901      	cmp	r1, #1
   3292c:	d1f3      	bne.n	32916 <IPC_IRQHandler+0x396>
   3292e:	2002      	movs	r0, #2
   32930:	4b07      	ldr	r3, [pc, #28]	; (32950 <IPC_IRQHandler+0x3d0>)
   32932:	f44f 6180 	mov.w	r1, #1024	; 0x400
   32936:	4a07      	ldr	r2, [pc, #28]	; (32954 <IPC_IRQHandler+0x3d4>)
   32938:	681b      	ldr	r3, [r3, #0]
   3293a:	6028      	str	r0, [r5, #0]
   3293c:	e6ec      	b.n	32718 <IPC_IRQHandler+0x198>
   3293e:	bf00      	nop
   32940:	20024d18 	.word	0x20024d18
   32944:	20024d14 	.word	0x20024d14
   32948:	20024d10 	.word	0x20024d10
   3294c:	20024d04 	.word	0x20024d04
   32950:	20024d08 	.word	0x20024d08
   32954:	e000e100 	.word	0xe000e100
   32958:	2002939a 	.word	0x2002939a

0003295c <rpc_transport_msg_free>:
   3295c:	b430      	push	{r4, r5}
   3295e:	4b18      	ldr	r3, [pc, #96]	; (329c0 <rpc_transport_msg_free+0x64>)
   32960:	681c      	ldr	r4, [r3, #0]
   32962:	6825      	ldr	r5, [r4, #0]
   32964:	b16d      	cbz	r5, 32982 <rpc_transport_msg_free+0x26>
   32966:	68a3      	ldr	r3, [r4, #8]
   32968:	4283      	cmp	r3, r0
   3296a:	d027      	beq.n	329bc <rpc_transport_msg_free+0x60>
   3296c:	2300      	movs	r3, #0
   3296e:	e002      	b.n	32976 <rpc_transport_msg_free+0x1a>
   32970:	6889      	ldr	r1, [r1, #8]
   32972:	4281      	cmp	r1, r0
   32974:	d019      	beq.n	329aa <rpc_transport_msg_free+0x4e>
   32976:	3301      	adds	r3, #1
   32978:	00da      	lsls	r2, r3, #3
   3297a:	42ab      	cmp	r3, r5
   3297c:	eb04 0102 	add.w	r1, r4, r2
   32980:	d1f6      	bne.n	32970 <rpc_transport_msg_free+0x14>
   32982:	4b10      	ldr	r3, [pc, #64]	; (329c4 <rpc_transport_msg_free+0x68>)
   32984:	681c      	ldr	r4, [r3, #0]
   32986:	6825      	ldr	r5, [r4, #0]
   32988:	b16d      	cbz	r5, 329a6 <rpc_transport_msg_free+0x4a>
   3298a:	68a3      	ldr	r3, [r4, #8]
   3298c:	4283      	cmp	r3, r0
   3298e:	d015      	beq.n	329bc <rpc_transport_msg_free+0x60>
   32990:	2300      	movs	r3, #0
   32992:	e002      	b.n	3299a <rpc_transport_msg_free+0x3e>
   32994:	6889      	ldr	r1, [r1, #8]
   32996:	4281      	cmp	r1, r0
   32998:	d007      	beq.n	329aa <rpc_transport_msg_free+0x4e>
   3299a:	3301      	adds	r3, #1
   3299c:	00da      	lsls	r2, r3, #3
   3299e:	429d      	cmp	r5, r3
   329a0:	eb04 0102 	add.w	r1, r4, r2
   329a4:	d1f6      	bne.n	32994 <rpc_transport_msg_free+0x38>
   329a6:	bc30      	pop	{r4, r5}
   329a8:	4770      	bx	lr
   329aa:	3204      	adds	r2, #4
   329ac:	58a3      	ldr	r3, [r4, r2]
   329ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   329b2:	f043 0303 	orr.w	r3, r3, #3
   329b6:	50a3      	str	r3, [r4, r2]
   329b8:	bc30      	pop	{r4, r5}
   329ba:	4770      	bx	lr
   329bc:	2204      	movs	r2, #4
   329be:	e7f5      	b.n	329ac <rpc_transport_msg_free+0x50>
   329c0:	20024d14 	.word	0x20024d14
   329c4:	20024d10 	.word	0x20024d10

000329c8 <rpc_transport_ipc_rx_suspend>:
   329c8:	b410      	push	{r4}
   329ca:	2400      	movs	r4, #0
   329cc:	2010      	movs	r0, #16
   329ce:	2204      	movs	r2, #4
   329d0:	4b0a      	ldr	r3, [pc, #40]	; (329fc <rpc_transport_ipc_rx_suspend+0x34>)
   329d2:	490b      	ldr	r1, [pc, #44]	; (32a00 <rpc_transport_ipc_rx_suspend+0x38>)
   329d4:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   329d8:	680c      	ldr	r4, [r1, #0]
   329da:	b083      	sub	sp, #12
   329dc:	9401      	str	r4, [sp, #4]
   329de:	9c01      	ldr	r4, [sp, #4]
   329e0:	f5a1 7126 	sub.w	r1, r1, #664	; 0x298
   329e4:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   329e8:	6809      	ldr	r1, [r1, #0]
   329ea:	4b06      	ldr	r3, [pc, #24]	; (32a04 <rpc_transport_ipc_rx_suspend+0x3c>)
   329ec:	9100      	str	r1, [sp, #0]
   329ee:	9900      	ldr	r1, [sp, #0]
   329f0:	601a      	str	r2, [r3, #0]
   329f2:	b003      	add	sp, #12
   329f4:	f85d 4b04 	ldr.w	r4, [sp], #4
   329f8:	4770      	bx	lr
   329fa:	bf00      	nop
   329fc:	4002a000 	.word	0x4002a000
   32a00:	4002a5a0 	.word	0x4002a5a0
   32a04:	20024d0c 	.word	0x20024d0c

00032a08 <rpc_transport_ipc_rx_shutdown>:
   32a08:	b4f0      	push	{r4, r5, r6, r7}
   32a0a:	4a32      	ldr	r2, [pc, #200]	; (32ad4 <rpc_transport_ipc_rx_shutdown+0xcc>)
   32a0c:	b08c      	sub	sp, #48	; 0x30
   32a0e:	6813      	ldr	r3, [r2, #0]
   32a10:	2b06      	cmp	r3, #6
   32a12:	d1fc      	bne.n	32a0e <rpc_transport_ipc_rx_shutdown+0x6>
   32a14:	2000      	movs	r0, #0
   32a16:	2201      	movs	r2, #1
   32a18:	210a      	movs	r1, #10
   32a1a:	4b2f      	ldr	r3, [pc, #188]	; (32ad8 <rpc_transport_ipc_rx_shutdown+0xd0>)
   32a1c:	9000      	str	r0, [sp, #0]
   32a1e:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
   32a22:	f8d3 0610 	ldr.w	r0, [r3, #1552]	; 0x610
   32a26:	9000      	str	r0, [sp, #0]
   32a28:	9800      	ldr	r0, [sp, #0]
   32a2a:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   32a2e:	9101      	str	r1, [sp, #4]
   32a30:	9b01      	ldr	r3, [sp, #4]
   32a32:	b12b      	cbz	r3, 32a40 <rpc_transport_ipc_rx_shutdown+0x38>
   32a34:	9b01      	ldr	r3, [sp, #4]
   32a36:	3b01      	subs	r3, #1
   32a38:	9301      	str	r3, [sp, #4]
   32a3a:	9b01      	ldr	r3, [sp, #4]
   32a3c:	2b00      	cmp	r3, #0
   32a3e:	d1f9      	bne.n	32a34 <rpc_transport_ipc_rx_shutdown+0x2c>
   32a40:	2200      	movs	r2, #0
   32a42:	2601      	movs	r6, #1
   32a44:	2504      	movs	r5, #4
   32a46:	2410      	movs	r4, #16
   32a48:	4923      	ldr	r1, [pc, #140]	; (32ad8 <rpc_transport_ipc_rx_shutdown+0xd0>)
   32a4a:	4b24      	ldr	r3, [pc, #144]	; (32adc <rpc_transport_ipc_rx_shutdown+0xd4>)
   32a4c:	f8c1 2614 	str.w	r2, [r1, #1556]	; 0x614
   32a50:	f501 3115 	add.w	r1, r1, #152576	; 0x25400
   32a54:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   32a58:	f501 71c8 	add.w	r1, r1, #400	; 0x190
   32a5c:	6809      	ldr	r1, [r1, #0]
   32a5e:	2040      	movs	r0, #64	; 0x40
   32a60:	9102      	str	r1, [sp, #8]
   32a62:	491f      	ldr	r1, [pc, #124]	; (32ae0 <rpc_transport_ipc_rx_shutdown+0xd8>)
   32a64:	9f02      	ldr	r7, [sp, #8]
   32a66:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   32a6a:	680f      	ldr	r7, [r1, #0]
   32a6c:	2180      	movs	r1, #128	; 0x80
   32a6e:	9703      	str	r7, [sp, #12]
   32a70:	4f1c      	ldr	r7, [pc, #112]	; (32ae4 <rpc_transport_ipc_rx_shutdown+0xdc>)
   32a72:	f8dd c00c 	ldr.w	ip, [sp, #12]
   32a76:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   32a7a:	683f      	ldr	r7, [r7, #0]
   32a7c:	9704      	str	r7, [sp, #16]
   32a7e:	4f1a      	ldr	r7, [pc, #104]	; (32ae8 <rpc_transport_ipc_rx_shutdown+0xe0>)
   32a80:	f8dd c010 	ldr.w	ip, [sp, #16]
   32a84:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   32a88:	683f      	ldr	r7, [r7, #0]
   32a8a:	9705      	str	r7, [sp, #20]
   32a8c:	9f05      	ldr	r7, [sp, #20]
   32a8e:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   32a92:	4a16      	ldr	r2, [pc, #88]	; (32aec <rpc_transport_ipc_rx_shutdown+0xe4>)
   32a94:	6812      	ldr	r2, [r2, #0]
   32a96:	9206      	str	r2, [sp, #24]
   32a98:	4a15      	ldr	r2, [pc, #84]	; (32af0 <rpc_transport_ipc_rx_shutdown+0xe8>)
   32a9a:	9f06      	ldr	r7, [sp, #24]
   32a9c:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   32aa0:	6816      	ldr	r6, [r2, #0]
   32aa2:	9607      	str	r6, [sp, #28]
   32aa4:	9e07      	ldr	r6, [sp, #28]
   32aa6:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   32aaa:	6815      	ldr	r5, [r2, #0]
   32aac:	9508      	str	r5, [sp, #32]
   32aae:	9d08      	ldr	r5, [sp, #32]
   32ab0:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
   32ab4:	6814      	ldr	r4, [r2, #0]
   32ab6:	9409      	str	r4, [sp, #36]	; 0x24
   32ab8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   32aba:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   32abe:	6810      	ldr	r0, [r2, #0]
   32ac0:	900a      	str	r0, [sp, #40]	; 0x28
   32ac2:	980a      	ldr	r0, [sp, #40]	; 0x28
   32ac4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
   32ac8:	6813      	ldr	r3, [r2, #0]
   32aca:	930b      	str	r3, [sp, #44]	; 0x2c
   32acc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   32ace:	b00c      	add	sp, #48	; 0x30
   32ad0:	bcf0      	pop	{r4, r5, r6, r7}
   32ad2:	4770      	bx	lr
   32ad4:	20024d0c 	.word	0x20024d0c
   32ad8:	40005000 	.word	0x40005000
   32adc:	4002a000 	.word	0x4002a000
   32ae0:	4002a598 	.word	0x4002a598
   32ae4:	4002a5a0 	.word	0x4002a5a0
   32ae8:	4002a5a8 	.word	0x4002a5a8
   32aec:	4002a5ac 	.word	0x4002a5ac
   32af0:	4002a308 	.word	0x4002a308

00032af4 <rpc_transport_ipc_tx_init>:
   32af4:	2800      	cmp	r0, #0
   32af6:	f000 80b8 	beq.w	32c6a <rpc_transport_ipc_tx_init+0x176>
   32afa:	2900      	cmp	r1, #0
   32afc:	f000 80b5 	beq.w	32c6a <rpc_transport_ipc_tx_init+0x176>
   32b00:	2a00      	cmp	r2, #0
   32b02:	f000 80b2 	beq.w	32c6a <rpc_transport_ipc_tx_init+0x176>
   32b06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32b0a:	6a04      	ldr	r4, [r0, #32]
   32b0c:	b085      	sub	sp, #20
   32b0e:	2c00      	cmp	r4, #0
   32b10:	f000 80a6 	beq.w	32c60 <rpc_transport_ipc_tx_init+0x16c>
   32b14:	6a40      	ldr	r0, [r0, #36]	; 0x24
   32b16:	2800      	cmp	r0, #0
   32b18:	f000 80a2 	beq.w	32c60 <rpc_transport_ipc_tx_init+0x16c>
   32b1c:	f642 4587 	movw	r5, #11399	; 0x2c87
   32b20:	f04f 0a00 	mov.w	sl, #0
   32b24:	4e55      	ldr	r6, [pc, #340]	; (32c7c <rpc_transport_ipc_tx_init+0x188>)
   32b26:	42a8      	cmp	r0, r5
   32b28:	f886 a000 	strb.w	sl, [r6]
   32b2c:	f240 80a0 	bls.w	32c70 <rpc_transport_ipc_tx_init+0x17c>
   32b30:	2708      	movs	r7, #8
   32b32:	f8df 9180 	ldr.w	r9, [pc, #384]	; 32cb4 <rpc_transport_ipc_tx_init+0x1c0>
   32b36:	4620      	mov	r0, r4
   32b38:	4616      	mov	r6, r2
   32b3a:	460d      	mov	r5, r1
   32b3c:	2244      	movs	r2, #68	; 0x44
   32b3e:	4651      	mov	r1, sl
   32b40:	f8c9 4000 	str.w	r4, [r9]
   32b44:	f00d fd8a 	bl	4065c <memset>
   32b48:	f8d9 2000 	ldr.w	r2, [r9]
   32b4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   32b50:	f8df 8164 	ldr.w	r8, [pc, #356]	; 32cb8 <rpc_transport_ipc_tx_init+0x1c4>
   32b54:	f882 a001 	strb.w	sl, [r2, #1]
   32b58:	f882 a002 	strb.w	sl, [r2, #2]
   32b5c:	f882 a003 	strb.w	sl, [r2, #3]
   32b60:	7017      	strb	r7, [r2, #0]
   32b62:	4618      	mov	r0, r3
   32b64:	2244      	movs	r2, #68	; 0x44
   32b66:	4651      	mov	r1, sl
   32b68:	f8c8 3000 	str.w	r3, [r8]
   32b6c:	f00d fd76 	bl	4065c <memset>
   32b70:	f8d8 2000 	ldr.w	r2, [r8]
   32b74:	f104 0388 	add.w	r3, r4, #136	; 0x88
   32b78:	f8df b140 	ldr.w	fp, [pc, #320]	; 32cbc <rpc_transport_ipc_tx_init+0x1c8>
   32b7c:	7017      	strb	r7, [r2, #0]
   32b7e:	f882 a001 	strb.w	sl, [r2, #1]
   32b82:	f882 a002 	strb.w	sl, [r2, #2]
   32b86:	f882 a003 	strb.w	sl, [r2, #3]
   32b8a:	4618      	mov	r0, r3
   32b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
   32b90:	4651      	mov	r1, sl
   32b92:	f8cb 3000 	str.w	r3, [fp]
   32b96:	f00d fd61 	bl	4065c <memset>
   32b9a:	4b39      	ldr	r3, [pc, #228]	; (32c80 <rpc_transport_ipc_tx_init+0x18c>)
   32b9c:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   32ba0:	f8c3 c000 	str.w	ip, [r3]
   32ba4:	4651      	mov	r1, sl
   32ba6:	4660      	mov	r0, ip
   32ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
   32bac:	f00d fd56 	bl	4065c <memset>
   32bb0:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   32bb4:	2106      	movs	r1, #6
   32bb6:	f04f 0e01 	mov.w	lr, #1
   32bba:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   32bbe:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   32bc2:	4b30      	ldr	r3, [pc, #192]	; (32c84 <rpc_transport_ipc_tx_init+0x190>)
   32bc4:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   32bc8:	605c      	str	r4, [r3, #4]
   32bca:	4c2f      	ldr	r4, [pc, #188]	; (32c88 <rpc_transport_ipc_tx_init+0x194>)
   32bcc:	f8c3 c008 	str.w	ip, [r3, #8]
   32bd0:	8199      	strh	r1, [r3, #12]
   32bd2:	f8a3 e000 	strh.w	lr, [r3]
   32bd6:	4619      	mov	r1, r3
   32bd8:	611c      	str	r4, [r3, #16]
   32bda:	4b2c      	ldr	r3, [pc, #176]	; (32c8c <rpc_transport_ipc_tx_init+0x198>)
   32bdc:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 32cc0 <rpc_transport_ipc_tx_init+0x1cc>
   32be0:	6120      	str	r0, [r4, #16]
   32be2:	482b      	ldr	r0, [pc, #172]	; (32c90 <rpc_transport_ipc_tx_init+0x19c>)
   32be4:	6063      	str	r3, [r4, #4]
   32be6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   32bea:	60a0      	str	r0, [r4, #8]
   32bec:	f8c4 c000 	str.w	ip, [r4]
   32bf0:	4828      	ldr	r0, [pc, #160]	; (32c94 <rpc_transport_ipc_tx_init+0x1a0>)
   32bf2:	60e3      	str	r3, [r4, #12]
   32bf4:	6162      	str	r2, [r4, #20]
   32bf6:	f7fd fda3 	bl	30740 <nrf_mem_register>
   32bfa:	2800      	cmp	r0, #0
   32bfc:	d132      	bne.n	32c64 <rpc_transport_ipc_tx_init+0x170>
   32bfe:	f04f 0c02 	mov.w	ip, #2
   32c02:	2420      	movs	r4, #32
   32c04:	f8d9 1000 	ldr.w	r1, [r9]
   32c08:	f8db 2000 	ldr.w	r2, [fp]
   32c0c:	6029      	str	r1, [r5, #0]
   32c0e:	4b1c      	ldr	r3, [pc, #112]	; (32c80 <rpc_transport_ipc_tx_init+0x18c>)
   32c10:	f8d8 1000 	ldr.w	r1, [r8]
   32c14:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 32cc4 <rpc_transport_ipc_tx_init+0x1d0>
   32c18:	4d1f      	ldr	r5, [pc, #124]	; (32c98 <rpc_transport_ipc_tx_init+0x1a4>)
   32c1a:	6031      	str	r1, [r6, #0]
   32c1c:	f8ce 2000 	str.w	r2, [lr]
   32c20:	681b      	ldr	r3, [r3, #0]
   32c22:	491e      	ldr	r1, [pc, #120]	; (32c9c <rpc_transport_ipc_tx_init+0x1a8>)
   32c24:	f502 7200 	add.w	r2, r2, #512	; 0x200
   32c28:	602a      	str	r2, [r5, #0]
   32c2a:	4e1d      	ldr	r6, [pc, #116]	; (32ca0 <rpc_transport_ipc_tx_init+0x1ac>)
   32c2c:	4a1d      	ldr	r2, [pc, #116]	; (32ca4 <rpc_transport_ipc_tx_init+0x1b0>)
   32c2e:	4d1e      	ldr	r5, [pc, #120]	; (32ca8 <rpc_transport_ipc_tx_init+0x1b4>)
   32c30:	600b      	str	r3, [r1, #0]
   32c32:	f503 7300 	add.w	r3, r3, #512	; 0x200
   32c36:	491d      	ldr	r1, [pc, #116]	; (32cac <rpc_transport_ipc_tx_init+0x1b8>)
   32c38:	6033      	str	r3, [r6, #0]
   32c3a:	8028      	strh	r0, [r5, #0]
   32c3c:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   32c40:	6809      	ldr	r1, [r1, #0]
   32c42:	4b1b      	ldr	r3, [pc, #108]	; (32cb0 <rpc_transport_ipc_tx_init+0x1bc>)
   32c44:	9103      	str	r1, [sp, #12]
   32c46:	9903      	ldr	r1, [sp, #12]
   32c48:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   32c4c:	6819      	ldr	r1, [r3, #0]
   32c4e:	443b      	add	r3, r7
   32c50:	9102      	str	r1, [sp, #8]
   32c52:	9902      	ldr	r1, [sp, #8]
   32c54:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   32c58:	681b      	ldr	r3, [r3, #0]
   32c5a:	9301      	str	r3, [sp, #4]
   32c5c:	9b01      	ldr	r3, [sp, #4]
   32c5e:	e001      	b.n	32c64 <rpc_transport_ipc_tx_init+0x170>
   32c60:	f24c 0007 	movw	r0, #49159	; 0xc007
   32c64:	b005      	add	sp, #20
   32c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32c6a:	f24c 000e 	movw	r0, #49166	; 0xc00e
   32c6e:	4770      	bx	lr
   32c70:	f24c 0004 	movw	r0, #49156	; 0xc004
   32c74:	b005      	add	sp, #20
   32c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32c7a:	bf00      	nop
   32c7c:	2002bd42 	.word	0x2002bd42
   32c80:	20024d44 	.word	0x20024d44
   32c84:	20024d30 	.word	0x20024d30
   32c88:	20024d54 	.word	0x20024d54
   32c8c:	00040080 	.word	0x00040080
   32c90:	00040100 	.word	0x00040100
   32c94:	20024d1c 	.word	0x20024d1c
   32c98:	20024d28 	.word	0x20024d28
   32c9c:	20024d24 	.word	0x20024d24
   32ca0:	20024d20 	.word	0x20024d20
   32ca4:	4002a000 	.word	0x4002a000
   32ca8:	2002939c 	.word	0x2002939c
   32cac:	4002a514 	.word	0x4002a514
   32cb0:	4002a51c 	.word	0x4002a51c
   32cb4:	20024d50 	.word	0x20024d50
   32cb8:	20024d48 	.word	0x20024d48
   32cbc:	20024d4c 	.word	0x20024d4c
   32cc0:	00080040 	.word	0x00080040
   32cc4:	20024d2c 	.word	0x20024d2c

00032cc8 <rpc_transport_ipc_tx_send>:
   32cc8:	2800      	cmp	r0, #0
   32cca:	d05f      	beq.n	32d8c <rpc_transport_ipc_tx_send+0xc4>
   32ccc:	b470      	push	{r4, r5, r6}
   32cce:	4b33      	ldr	r3, [pc, #204]	; (32d9c <rpc_transport_ipc_tx_send+0xd4>)
   32cd0:	b083      	sub	sp, #12
   32cd2:	681a      	ldr	r2, [r3, #0]
   32cd4:	4b32      	ldr	r3, [pc, #200]	; (32da0 <rpc_transport_ipc_tx_send+0xd8>)
   32cd6:	4282      	cmp	r2, r0
   32cd8:	d81e      	bhi.n	32d18 <rpc_transport_ipc_tx_send+0x50>
   32cda:	681b      	ldr	r3, [r3, #0]
   32cdc:	4931      	ldr	r1, [pc, #196]	; (32da4 <rpc_transport_ipc_tx_send+0xdc>)
   32cde:	4283      	cmp	r3, r0
   32ce0:	6809      	ldr	r1, [r1, #0]
   32ce2:	d803      	bhi.n	32cec <rpc_transport_ipc_tx_send+0x24>
   32ce4:	4c30      	ldr	r4, [pc, #192]	; (32da8 <rpc_transport_ipc_tx_send+0xe0>)
   32ce6:	6824      	ldr	r4, [r4, #0]
   32ce8:	4284      	cmp	r4, r0
   32cea:	d847      	bhi.n	32d7c <rpc_transport_ipc_tx_send+0xb4>
   32cec:	4281      	cmp	r1, r0
   32cee:	d90e      	bls.n	32d0e <rpc_transport_ipc_tx_send+0x46>
   32cf0:	4b2e      	ldr	r3, [pc, #184]	; (32dac <rpc_transport_ipc_tx_send+0xe4>)
   32cf2:	781b      	ldrb	r3, [r3, #0]
   32cf4:	2b00      	cmp	r3, #0
   32cf6:	d14c      	bne.n	32d92 <rpc_transport_ipc_tx_send+0xca>
   32cf8:	1a83      	subs	r3, r0, r2
   32cfa:	492d      	ldr	r1, [pc, #180]	; (32db0 <rpc_transport_ipc_tx_send+0xe8>)
   32cfc:	099e      	lsrs	r6, r3, #6
   32cfe:	069b      	lsls	r3, r3, #26
   32d00:	680a      	ldr	r2, [r1, #0]
   32d02:	4c2c      	ldr	r4, [pc, #176]	; (32db4 <rpc_transport_ipc_tx_send+0xec>)
   32d04:	f04f 0103 	mov.w	r1, #3
   32d08:	f04f 0502 	mov.w	r5, #2
   32d0c:	d014      	beq.n	32d38 <rpc_transport_ipc_tx_send+0x70>
   32d0e:	f24c 0010 	movw	r0, #49168	; 0xc010
   32d12:	b003      	add	sp, #12
   32d14:	bc70      	pop	{r4, r5, r6}
   32d16:	4770      	bx	lr
   32d18:	681b      	ldr	r3, [r3, #0]
   32d1a:	4298      	cmp	r0, r3
   32d1c:	d3f7      	bcc.n	32d0e <rpc_transport_ipc_tx_send+0x46>
   32d1e:	4a22      	ldr	r2, [pc, #136]	; (32da8 <rpc_transport_ipc_tx_send+0xe0>)
   32d20:	6812      	ldr	r2, [r2, #0]
   32d22:	4290      	cmp	r0, r2
   32d24:	d2f3      	bcs.n	32d0e <rpc_transport_ipc_tx_send+0x46>
   32d26:	2101      	movs	r1, #1
   32d28:	1ac3      	subs	r3, r0, r3
   32d2a:	4a23      	ldr	r2, [pc, #140]	; (32db8 <rpc_transport_ipc_tx_send+0xf0>)
   32d2c:	099e      	lsrs	r6, r3, #6
   32d2e:	069b      	lsls	r3, r3, #26
   32d30:	460d      	mov	r5, r1
   32d32:	6812      	ldr	r2, [r2, #0]
   32d34:	4c21      	ldr	r4, [pc, #132]	; (32dbc <rpc_transport_ipc_tx_send+0xf4>)
   32d36:	d1ea      	bne.n	32d0e <rpc_transport_ipc_tx_send+0x46>
   32d38:	6843      	ldr	r3, [r0, #4]
   32d3a:	b2db      	uxtb	r3, r3
   32d3c:	429d      	cmp	r5, r3
   32d3e:	d120      	bne.n	32d82 <rpc_transport_ipc_tx_send+0xba>
   32d40:	2020      	movs	r0, #32
   32d42:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   32d46:	4d1e      	ldr	r5, [pc, #120]	; (32dc0 <rpc_transport_ipc_tx_send+0xf8>)
   32d48:	6853      	ldr	r3, [r2, #4]
   32d4a:	882e      	ldrh	r6, [r5, #0]
   32d4c:	b29b      	uxth	r3, r3
   32d4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   32d52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   32d56:	f043 0301 	orr.w	r3, r3, #1
   32d5a:	6053      	str	r3, [r2, #4]
   32d5c:	bf00      	nop
   32d5e:	3801      	subs	r0, #1
   32d60:	d1fc      	bne.n	32d5c <rpc_transport_ipc_tx_send+0x94>
   32d62:	2201      	movs	r2, #1
   32d64:	4b17      	ldr	r3, [pc, #92]	; (32dc4 <rpc_transport_ipc_tx_send+0xfc>)
   32d66:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   32d6a:	6822      	ldr	r2, [r4, #0]
   32d6c:	882b      	ldrh	r3, [r5, #0]
   32d6e:	9201      	str	r2, [sp, #4]
   32d70:	9a01      	ldr	r2, [sp, #4]
   32d72:	3301      	adds	r3, #1
   32d74:	802b      	strh	r3, [r5, #0]
   32d76:	b003      	add	sp, #12
   32d78:	bc70      	pop	{r4, r5, r6}
   32d7a:	4770      	bx	lr
   32d7c:	4281      	cmp	r1, r0
   32d7e:	d9d2      	bls.n	32d26 <rpc_transport_ipc_tx_send+0x5e>
   32d80:	e7b6      	b.n	32cf0 <rpc_transport_ipc_tx_send+0x28>
   32d82:	f24c 0007 	movw	r0, #49159	; 0xc007
   32d86:	b003      	add	sp, #12
   32d88:	bc70      	pop	{r4, r5, r6}
   32d8a:	4770      	bx	lr
   32d8c:	f24c 000e 	movw	r0, #49166	; 0xc00e
   32d90:	4770      	bx	lr
   32d92:	f24c 000f 	movw	r0, #49167	; 0xc00f
   32d96:	b003      	add	sp, #12
   32d98:	bc70      	pop	{r4, r5, r6}
   32d9a:	4770      	bx	lr
   32d9c:	20024d2c 	.word	0x20024d2c
   32da0:	20024d24 	.word	0x20024d24
   32da4:	20024d28 	.word	0x20024d28
   32da8:	20024d20 	.word	0x20024d20
   32dac:	2002bd42 	.word	0x2002bd42
   32db0:	20024d50 	.word	0x20024d50
   32db4:	4002a00c 	.word	0x4002a00c
   32db8:	20024d48 	.word	0x20024d48
   32dbc:	4002a004 	.word	0x4002a004
   32dc0:	2002939c 	.word	0x2002939c
   32dc4:	4002a000 	.word	0x4002a000

00032dc8 <rpc_transport_ipc_tx_rpc_data_alloc>:
   32dc8:	4b18      	ldr	r3, [pc, #96]	; (32e2c <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   32dca:	781b      	ldrb	r3, [r3, #0]
   32dcc:	bb63      	cbnz	r3, 32e28 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   32dce:	b4f0      	push	{r4, r5, r6, r7}
   32dd0:	4a17      	ldr	r2, [pc, #92]	; (32e30 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   32dd2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   32dd6:	6814      	ldr	r4, [r2, #0]
   32dd8:	4b16      	ldr	r3, [pc, #88]	; (32e34 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   32dda:	6825      	ldr	r5, [r4, #0]
   32ddc:	681e      	ldr	r6, [r3, #0]
   32dde:	b1a5      	cbz	r5, 32e0a <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   32de0:	4607      	mov	r7, r0
   32de2:	00c1      	lsls	r1, r0, #3
   32de4:	1863      	adds	r3, r4, r1
   32de6:	685a      	ldr	r2, [r3, #4]
   32de8:	b2d2      	uxtb	r2, r2
   32dea:	2a03      	cmp	r2, #3
   32dec:	d104      	bne.n	32df8 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   32dee:	609f      	str	r7, [r3, #8]
   32df0:	685a      	ldr	r2, [r3, #4]
   32df2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   32df6:	605a      	str	r2, [r3, #4]
   32df8:	685a      	ldr	r2, [r3, #4]
   32dfa:	f012 0fff 	tst.w	r2, #255	; 0xff
   32dfe:	d101      	bne.n	32e04 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   32e00:	689b      	ldr	r3, [r3, #8]
   32e02:	b12b      	cbz	r3, 32e10 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   32e04:	3001      	adds	r0, #1
   32e06:	42a8      	cmp	r0, r5
   32e08:	d1eb      	bne.n	32de2 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   32e0a:	2000      	movs	r0, #0
   32e0c:	bcf0      	pop	{r4, r5, r6, r7}
   32e0e:	4770      	bx	lr
   32e10:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   32e14:	4421      	add	r1, r4
   32e16:	6088      	str	r0, [r1, #8]
   32e18:	6843      	ldr	r3, [r0, #4]
   32e1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   32e1e:	f043 0302 	orr.w	r3, r3, #2
   32e22:	6043      	str	r3, [r0, #4]
   32e24:	bcf0      	pop	{r4, r5, r6, r7}
   32e26:	4770      	bx	lr
   32e28:	2000      	movs	r0, #0
   32e2a:	4770      	bx	lr
   32e2c:	2002bd42 	.word	0x2002bd42
   32e30:	20024d50 	.word	0x20024d50
   32e34:	20024d4c 	.word	0x20024d4c

00032e38 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   32e38:	b4f0      	push	{r4, r5, r6, r7}
   32e3a:	4a15      	ldr	r2, [pc, #84]	; (32e90 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   32e3c:	4b15      	ldr	r3, [pc, #84]	; (32e94 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   32e3e:	6814      	ldr	r4, [r2, #0]
   32e40:	681e      	ldr	r6, [r3, #0]
   32e42:	6825      	ldr	r5, [r4, #0]
   32e44:	b1ad      	cbz	r5, 32e72 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   32e46:	2000      	movs	r0, #0
   32e48:	4607      	mov	r7, r0
   32e4a:	00c1      	lsls	r1, r0, #3
   32e4c:	1863      	adds	r3, r4, r1
   32e4e:	685a      	ldr	r2, [r3, #4]
   32e50:	b2d2      	uxtb	r2, r2
   32e52:	2a03      	cmp	r2, #3
   32e54:	d104      	bne.n	32e60 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   32e56:	609f      	str	r7, [r3, #8]
   32e58:	685a      	ldr	r2, [r3, #4]
   32e5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   32e5e:	605a      	str	r2, [r3, #4]
   32e60:	685a      	ldr	r2, [r3, #4]
   32e62:	f012 0fff 	tst.w	r2, #255	; 0xff
   32e66:	d101      	bne.n	32e6c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   32e68:	689b      	ldr	r3, [r3, #8]
   32e6a:	b12b      	cbz	r3, 32e78 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   32e6c:	3001      	adds	r0, #1
   32e6e:	4285      	cmp	r5, r0
   32e70:	d1eb      	bne.n	32e4a <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   32e72:	2000      	movs	r0, #0
   32e74:	bcf0      	pop	{r4, r5, r6, r7}
   32e76:	4770      	bx	lr
   32e78:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   32e7c:	4421      	add	r1, r4
   32e7e:	6088      	str	r0, [r1, #8]
   32e80:	6843      	ldr	r3, [r0, #4]
   32e82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   32e86:	f043 0301 	orr.w	r3, r3, #1
   32e8a:	6043      	str	r3, [r0, #4]
   32e8c:	bcf0      	pop	{r4, r5, r6, r7}
   32e8e:	4770      	bx	lr
   32e90:	20024d48 	.word	0x20024d48
   32e94:	20024d44 	.word	0x20024d44

00032e98 <rpc_transport_ipc_tx_data_alloc>:
   32e98:	4b03      	ldr	r3, [pc, #12]	; (32ea8 <rpc_transport_ipc_tx_data_alloc+0x10>)
   32e9a:	781b      	ldrb	r3, [r3, #0]
   32e9c:	b90b      	cbnz	r3, 32ea2 <rpc_transport_ipc_tx_data_alloc+0xa>
   32e9e:	f7fd bd7f 	b.w	309a0 <nrf_shared_malloc>
   32ea2:	2000      	movs	r0, #0
   32ea4:	4770      	bx	lr
   32ea6:	bf00      	nop
   32ea8:	2002bd42 	.word	0x2002bd42

00032eac <rpc_transport_ipc_tx_suspend>:
   32eac:	2201      	movs	r2, #1
   32eae:	4b01      	ldr	r3, [pc, #4]	; (32eb4 <rpc_transport_ipc_tx_suspend+0x8>)
   32eb0:	701a      	strb	r2, [r3, #0]
   32eb2:	4770      	bx	lr
   32eb4:	2002bd42 	.word	0x2002bd42

00032eb8 <rpc_transport_ipc_tx_shutdown>:
   32eb8:	b4f0      	push	{r4, r5, r6, r7}
   32eba:	4a16      	ldr	r2, [pc, #88]	; (32f14 <rpc_transport_ipc_tx_shutdown+0x5c>)
   32ebc:	4b16      	ldr	r3, [pc, #88]	; (32f18 <rpc_transport_ipc_tx_shutdown+0x60>)
   32ebe:	6814      	ldr	r4, [r2, #0]
   32ec0:	681e      	ldr	r6, [r3, #0]
   32ec2:	6825      	ldr	r5, [r4, #0]
   32ec4:	b1ad      	cbz	r5, 32ef2 <rpc_transport_ipc_tx_shutdown+0x3a>
   32ec6:	2200      	movs	r2, #0
   32ec8:	4617      	mov	r7, r2
   32eca:	00d0      	lsls	r0, r2, #3
   32ecc:	1823      	adds	r3, r4, r0
   32ece:	6859      	ldr	r1, [r3, #4]
   32ed0:	b2c9      	uxtb	r1, r1
   32ed2:	2903      	cmp	r1, #3
   32ed4:	d104      	bne.n	32ee0 <rpc_transport_ipc_tx_shutdown+0x28>
   32ed6:	609f      	str	r7, [r3, #8]
   32ed8:	6859      	ldr	r1, [r3, #4]
   32eda:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   32ede:	6059      	str	r1, [r3, #4]
   32ee0:	6859      	ldr	r1, [r3, #4]
   32ee2:	f011 0fff 	tst.w	r1, #255	; 0xff
   32ee6:	d101      	bne.n	32eec <rpc_transport_ipc_tx_shutdown+0x34>
   32ee8:	689b      	ldr	r3, [r3, #8]
   32eea:	b123      	cbz	r3, 32ef6 <rpc_transport_ipc_tx_shutdown+0x3e>
   32eec:	3201      	adds	r2, #1
   32eee:	42aa      	cmp	r2, r5
   32ef0:	d1eb      	bne.n	32eca <rpc_transport_ipc_tx_shutdown+0x12>
   32ef2:	bcf0      	pop	{r4, r5, r6, r7}
   32ef4:	4770      	bx	lr
   32ef6:	0192      	lsls	r2, r2, #6
   32ef8:	4404      	add	r4, r0
   32efa:	18b0      	adds	r0, r6, r2
   32efc:	60a0      	str	r0, [r4, #8]
   32efe:	6843      	ldr	r3, [r0, #4]
   32f00:	4906      	ldr	r1, [pc, #24]	; (32f1c <rpc_transport_ipc_tx_shutdown+0x64>)
   32f02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   32f06:	f043 0301 	orr.w	r3, r3, #1
   32f0a:	6043      	str	r3, [r0, #4]
   32f0c:	50b1      	str	r1, [r6, r2]
   32f0e:	bcf0      	pop	{r4, r5, r6, r7}
   32f10:	f7ff beda 	b.w	32cc8 <rpc_transport_ipc_tx_send>
   32f14:	20024d48 	.word	0x20024d48
   32f18:	20024d44 	.word	0x20024d44
   32f1c:	00030001 	.word	0x00030001

00032f20 <ok_rsp_parser>:
   32f20:	2000      	movs	r0, #0
   32f22:	4770      	bx	lr

00032f24 <pdn_state_get_parser>:
   32f24:	2200      	movs	r2, #0
   32f26:	b570      	push	{r4, r5, r6, lr}
   32f28:	780b      	ldrb	r3, [r1, #0]
   32f2a:	b084      	sub	sp, #16
   32f2c:	460e      	mov	r6, r1
   32f2e:	e9cd 2200 	strd	r2, r2, [sp]
   32f32:	e9cd 2202 	strd	r2, r2, [sp, #8]
   32f36:	b323      	cbz	r3, 32f82 <pdn_state_get_parser+0x5e>
   32f38:	460c      	mov	r4, r1
   32f3a:	2b20      	cmp	r3, #32
   32f3c:	460d      	mov	r5, r1
   32f3e:	d01b      	beq.n	32f78 <pdn_state_get_parser+0x54>
   32f40:	700b      	strb	r3, [r1, #0]
   32f42:	3201      	adds	r2, #1
   32f44:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   32f48:	18b1      	adds	r1, r6, r2
   32f4a:	460d      	mov	r5, r1
   32f4c:	2b00      	cmp	r3, #0
   32f4e:	d1f4      	bne.n	32f3a <pdn_state_get_parser+0x16>
   32f50:	2200      	movs	r2, #0
   32f52:	4b0d      	ldr	r3, [pc, #52]	; (32f88 <pdn_state_get_parser+0x64>)
   32f54:	702a      	strb	r2, [r5, #0]
   32f56:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   32f5a:	4a0c      	ldr	r2, [pc, #48]	; (32f8c <pdn_state_get_parser+0x68>)
   32f5c:	681b      	ldr	r3, [r3, #0]
   32f5e:	2110      	movs	r1, #16
   32f60:	4668      	mov	r0, sp
   32f62:	f009 f939 	bl	3c1d8 <sniprintf>
   32f66:	4669      	mov	r1, sp
   32f68:	4630      	mov	r0, r6
   32f6a:	f00d fd81 	bl	40a70 <strstr>
   32f6e:	3000      	adds	r0, #0
   32f70:	bf18      	it	ne
   32f72:	2001      	movne	r0, #1
   32f74:	b004      	add	sp, #16
   32f76:	bd70      	pop	{r4, r5, r6, pc}
   32f78:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   32f7c:	2b00      	cmp	r3, #0
   32f7e:	d1dc      	bne.n	32f3a <pdn_state_get_parser+0x16>
   32f80:	e7e6      	b.n	32f50 <pdn_state_get_parser+0x2c>
   32f82:	460d      	mov	r5, r1
   32f84:	e7e4      	b.n	32f50 <pdn_state_get_parser+0x2c>
   32f86:	bf00      	nop
   32f88:	20024e70 	.word	0x20024e70
   32f8c:	000428dc 	.word	0x000428dc

00032f90 <pdn_id_get_parser>:
   32f90:	b570      	push	{r4, r5, r6, lr}
   32f92:	780b      	ldrb	r3, [r1, #0]
   32f94:	4606      	mov	r6, r0
   32f96:	b313      	cbz	r3, 32fde <pdn_id_get_parser+0x4e>
   32f98:	4608      	mov	r0, r1
   32f9a:	2400      	movs	r4, #0
   32f9c:	460a      	mov	r2, r1
   32f9e:	2b20      	cmp	r3, #32
   32fa0:	4615      	mov	r5, r2
   32fa2:	d017      	beq.n	32fd4 <pdn_id_get_parser+0x44>
   32fa4:	7013      	strb	r3, [r2, #0]
   32fa6:	3401      	adds	r4, #1
   32fa8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   32fac:	190a      	adds	r2, r1, r4
   32fae:	4615      	mov	r5, r2
   32fb0:	2b00      	cmp	r3, #0
   32fb2:	d1f4      	bne.n	32f9e <pdn_id_get_parser+0xe>
   32fb4:	2300      	movs	r3, #0
   32fb6:	4608      	mov	r0, r1
   32fb8:	702b      	strb	r3, [r5, #0]
   32fba:	213a      	movs	r1, #58	; 0x3a
   32fbc:	f00d fcf6 	bl	409ac <strchr>
   32fc0:	b130      	cbz	r0, 32fd0 <pdn_id_get_parser+0x40>
   32fc2:	3001      	adds	r0, #1
   32fc4:	f00d fb0a 	bl	405dc <atoi>
   32fc8:	4b06      	ldr	r3, [pc, #24]	; (32fe4 <pdn_id_get_parser+0x54>)
   32fca:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   32fce:	6058      	str	r0, [r3, #4]
   32fd0:	2000      	movs	r0, #0
   32fd2:	bd70      	pop	{r4, r5, r6, pc}
   32fd4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   32fd8:	2b00      	cmp	r3, #0
   32fda:	d1e0      	bne.n	32f9e <pdn_id_get_parser+0xe>
   32fdc:	e7ea      	b.n	32fb4 <pdn_id_get_parser+0x24>
   32fde:	460d      	mov	r5, r1
   32fe0:	e7e8      	b.n	32fb4 <pdn_id_get_parser+0x24>
   32fe2:	bf00      	nop
   32fe4:	20024e70 	.word	0x20024e70

00032fe8 <context_create_parser>:
   32fe8:	b570      	push	{r4, r5, r6, lr}
   32fea:	780b      	ldrb	r3, [r1, #0]
   32fec:	4606      	mov	r6, r0
   32fee:	b313      	cbz	r3, 33036 <context_create_parser+0x4e>
   32ff0:	4608      	mov	r0, r1
   32ff2:	2400      	movs	r4, #0
   32ff4:	460a      	mov	r2, r1
   32ff6:	2b20      	cmp	r3, #32
   32ff8:	4615      	mov	r5, r2
   32ffa:	d017      	beq.n	3302c <context_create_parser+0x44>
   32ffc:	7013      	strb	r3, [r2, #0]
   32ffe:	3401      	adds	r4, #1
   33000:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   33004:	190a      	adds	r2, r1, r4
   33006:	4615      	mov	r5, r2
   33008:	2b00      	cmp	r3, #0
   3300a:	d1f4      	bne.n	32ff6 <context_create_parser+0xe>
   3300c:	2300      	movs	r3, #0
   3300e:	4608      	mov	r0, r1
   33010:	702b      	strb	r3, [r5, #0]
   33012:	213a      	movs	r1, #58	; 0x3a
   33014:	f00d fcca 	bl	409ac <strchr>
   33018:	b130      	cbz	r0, 33028 <context_create_parser+0x40>
   3301a:	4b08      	ldr	r3, [pc, #32]	; (3303c <context_create_parser+0x54>)
   3301c:	3001      	adds	r0, #1
   3301e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   33022:	f00d fadb 	bl	405dc <atoi>
   33026:	6020      	str	r0, [r4, #0]
   33028:	2000      	movs	r0, #0
   3302a:	bd70      	pop	{r4, r5, r6, pc}
   3302c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   33030:	2b00      	cmp	r3, #0
   33032:	d1e0      	bne.n	32ff6 <context_create_parser+0xe>
   33034:	e7ea      	b.n	3300c <context_create_parser+0x24>
   33036:	460d      	mov	r5, r1
   33038:	e7e8      	b.n	3300c <context_create_parser+0x24>
   3303a:	bf00      	nop
   3303c:	20024e70 	.word	0x20024e70

00033040 <pdn_interface_init>:
   33040:	f04f 33ff 	mov.w	r3, #4294967295
   33044:	b510      	push	{r4, lr}
   33046:	4c09      	ldr	r4, [pc, #36]	; (3306c <pdn_interface_init+0x2c>)
   33048:	2228      	movs	r2, #40	; 0x28
   3304a:	2100      	movs	r1, #0
   3304c:	4808      	ldr	r0, [pc, #32]	; (33070 <pdn_interface_init+0x30>)
   3304e:	6023      	str	r3, [r4, #0]
   33050:	f00d fb04 	bl	4065c <memset>
   33054:	f240 2201 	movw	r2, #513	; 0x201
   33058:	2102      	movs	r1, #2
   3305a:	2066      	movs	r0, #102	; 0x66
   3305c:	f7fc ff48 	bl	2fef0 <at_interface_open>
   33060:	2800      	cmp	r0, #0
   33062:	6020      	str	r0, [r4, #0]
   33064:	bfb4      	ite	lt
   33066:	2003      	movlt	r0, #3
   33068:	2000      	movge	r0, #0
   3306a:	bd10      	pop	{r4, pc}
   3306c:	20024d6c 	.word	0x20024d6c
   33070:	20024e70 	.word	0x20024e70

00033074 <pdn_interface_open>:
   33074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   33078:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   3307c:	b083      	sub	sp, #12
   3307e:	f040 80ad 	bne.w	331dc <pdn_interface_open+0x168>
   33082:	4c5f      	ldr	r4, [pc, #380]	; (33200 <pdn_interface_open+0x18c>)
   33084:	6825      	ldr	r5, [r4, #0]
   33086:	b34d      	cbz	r5, 330dc <pdn_interface_open+0x68>
   33088:	6863      	ldr	r3, [r4, #4]
   3308a:	2b00      	cmp	r3, #0
   3308c:	f000 8098 	beq.w	331c0 <pdn_interface_open+0x14c>
   33090:	68a3      	ldr	r3, [r4, #8]
   33092:	2b00      	cmp	r3, #0
   33094:	f000 8096 	beq.w	331c4 <pdn_interface_open+0x150>
   33098:	68e3      	ldr	r3, [r4, #12]
   3309a:	2b00      	cmp	r3, #0
   3309c:	f000 8094 	beq.w	331c8 <pdn_interface_open+0x154>
   330a0:	6923      	ldr	r3, [r4, #16]
   330a2:	2b00      	cmp	r3, #0
   330a4:	f000 8092 	beq.w	331cc <pdn_interface_open+0x158>
   330a8:	6963      	ldr	r3, [r4, #20]
   330aa:	2b00      	cmp	r3, #0
   330ac:	f000 8090 	beq.w	331d0 <pdn_interface_open+0x15c>
   330b0:	69a3      	ldr	r3, [r4, #24]
   330b2:	2b00      	cmp	r3, #0
   330b4:	f000 808e 	beq.w	331d4 <pdn_interface_open+0x160>
   330b8:	69e3      	ldr	r3, [r4, #28]
   330ba:	2b00      	cmp	r3, #0
   330bc:	f000 808c 	beq.w	331d8 <pdn_interface_open+0x164>
   330c0:	6a23      	ldr	r3, [r4, #32]
   330c2:	b153      	cbz	r3, 330da <pdn_interface_open+0x66>
   330c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   330c6:	2509      	movs	r5, #9
   330c8:	b143      	cbz	r3, 330dc <pdn_interface_open+0x68>
   330ca:	200c      	movs	r0, #12
   330cc:	f7f3 ffc4 	bl	27058 <bsd_os_errno_set>
   330d0:	f04f 30ff 	mov.w	r0, #4294967295
   330d4:	b003      	add	sp, #12
   330d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   330da:	2508      	movs	r5, #8
   330dc:	2074      	movs	r0, #116	; 0x74
   330de:	f7fd fc49 	bl	30974 <nrf_malloc>
   330e2:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   330e6:	2800      	cmp	r0, #0
   330e8:	d0ef      	beq.n	330ca <pdn_interface_open+0x56>
   330ea:	2274      	movs	r2, #116	; 0x74
   330ec:	2100      	movs	r1, #0
   330ee:	f00d fab5 	bl	4065c <memset>
   330f2:	2101      	movs	r1, #1
   330f4:	2003      	movs	r0, #3
   330f6:	f04f 37ff 	mov.w	r7, #4294967295
   330fa:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   330fe:	4a41      	ldr	r2, [pc, #260]	; (33204 <pdn_interface_open+0x190>)
   33100:	6099      	str	r1, [r3, #8]
   33102:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   33106:	f44f 7180 	mov.w	r1, #256	; 0x100
   3310a:	6718      	str	r0, [r3, #112]	; 0x70
   3310c:	605f      	str	r7, [r3, #4]
   3310e:	483e      	ldr	r0, [pc, #248]	; (33208 <pdn_interface_open+0x194>)
   33110:	f8df 8100 	ldr.w	r8, [pc, #256]	; 33214 <pdn_interface_open+0x1a0>
   33114:	f009 f860 	bl	3c1d8 <sniprintf>
   33118:	483b      	ldr	r0, [pc, #236]	; (33208 <pdn_interface_open+0x194>)
   3311a:	f8d8 9000 	ldr.w	r9, [r8]
   3311e:	2600      	movs	r6, #0
   33120:	f7ea f800 	bl	1d124 <strlen>
   33124:	4633      	mov	r3, r6
   33126:	4602      	mov	r2, r0
   33128:	4937      	ldr	r1, [pc, #220]	; (33208 <pdn_interface_open+0x194>)
   3312a:	4648      	mov	r0, r9
   3312c:	9601      	str	r6, [sp, #4]
   3312e:	9600      	str	r6, [sp, #0]
   33130:	f7fc fe70 	bl	2fe14 <at_interface_write>
   33134:	4681      	mov	r9, r0
   33136:	4834      	ldr	r0, [pc, #208]	; (33208 <pdn_interface_open+0x194>)
   33138:	f7e9 fff4 	bl	1d124 <strlen>
   3313c:	4548      	cmp	r0, r9
   3313e:	d153      	bne.n	331e8 <pdn_interface_open+0x174>
   33140:	4633      	mov	r3, r6
   33142:	e9cd 6600 	strd	r6, r6, [sp]
   33146:	f44f 7280 	mov.w	r2, #256	; 0x100
   3314a:	492f      	ldr	r1, [pc, #188]	; (33208 <pdn_interface_open+0x194>)
   3314c:	f8d8 0000 	ldr.w	r0, [r8]
   33150:	f7fc ff64 	bl	3001c <at_interface_read>
   33154:	4606      	mov	r6, r0
   33156:	482d      	ldr	r0, [pc, #180]	; (3320c <pdn_interface_open+0x198>)
   33158:	f7e9 ffe4 	bl	1d124 <strlen>
   3315c:	4286      	cmp	r6, r0
   3315e:	db15      	blt.n	3318c <pdn_interface_open+0x118>
   33160:	4602      	mov	r2, r0
   33162:	4929      	ldr	r1, [pc, #164]	; (33208 <pdn_interface_open+0x194>)
   33164:	4829      	ldr	r0, [pc, #164]	; (3320c <pdn_interface_open+0x198>)
   33166:	f00d fc52 	bl	40a0e <strncmp>
   3316a:	b978      	cbnz	r0, 3318c <pdn_interface_open+0x118>
   3316c:	4926      	ldr	r1, [pc, #152]	; (33208 <pdn_interface_open+0x194>)
   3316e:	4628      	mov	r0, r5
   33170:	f7ff ff3a 	bl	32fe8 <context_create_parser>
   33174:	b9b0      	cbnz	r0, 331a4 <pdn_interface_open+0x130>
   33176:	2202      	movs	r2, #2
   33178:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   3317c:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   33180:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   33184:	609a      	str	r2, [r3, #8]
   33186:	b003      	add	sp, #12
   33188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3318c:	4820      	ldr	r0, [pc, #128]	; (33210 <pdn_interface_open+0x19c>)
   3318e:	f7e9 ffc9 	bl	1d124 <strlen>
   33192:	491d      	ldr	r1, [pc, #116]	; (33208 <pdn_interface_open+0x194>)
   33194:	4602      	mov	r2, r0
   33196:	481e      	ldr	r0, [pc, #120]	; (33210 <pdn_interface_open+0x19c>)
   33198:	f00d fc39 	bl	40a0e <strncmp>
   3319c:	b960      	cbnz	r0, 331b8 <pdn_interface_open+0x144>
   3319e:	2008      	movs	r0, #8
   331a0:	f7f3 ff5a 	bl	27058 <bsd_os_errno_set>
   331a4:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   331a8:	f7fd fbee 	bl	30988 <nrf_free>
   331ac:	2300      	movs	r3, #0
   331ae:	f04f 30ff 	mov.w	r0, #4294967295
   331b2:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   331b6:	e78d      	b.n	330d4 <pdn_interface_open+0x60>
   331b8:	2005      	movs	r0, #5
   331ba:	f7f3 ff4d 	bl	27058 <bsd_os_errno_set>
   331be:	e7f1      	b.n	331a4 <pdn_interface_open+0x130>
   331c0:	2501      	movs	r5, #1
   331c2:	e78b      	b.n	330dc <pdn_interface_open+0x68>
   331c4:	2502      	movs	r5, #2
   331c6:	e789      	b.n	330dc <pdn_interface_open+0x68>
   331c8:	2503      	movs	r5, #3
   331ca:	e787      	b.n	330dc <pdn_interface_open+0x68>
   331cc:	2504      	movs	r5, #4
   331ce:	e785      	b.n	330dc <pdn_interface_open+0x68>
   331d0:	2505      	movs	r5, #5
   331d2:	e783      	b.n	330dc <pdn_interface_open+0x68>
   331d4:	2506      	movs	r5, #6
   331d6:	e781      	b.n	330dc <pdn_interface_open+0x68>
   331d8:	2507      	movs	r5, #7
   331da:	e77f      	b.n	330dc <pdn_interface_open+0x68>
   331dc:	2029      	movs	r0, #41	; 0x29
   331de:	f7f3 ff3b 	bl	27058 <bsd_os_errno_set>
   331e2:	f04f 30ff 	mov.w	r0, #4294967295
   331e6:	e775      	b.n	330d4 <pdn_interface_open+0x60>
   331e8:	2005      	movs	r0, #5
   331ea:	f7f3 ff35 	bl	27058 <bsd_os_errno_set>
   331ee:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   331f2:	f7fd fbc9 	bl	30988 <nrf_free>
   331f6:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   331fa:	4638      	mov	r0, r7
   331fc:	e76a      	b.n	330d4 <pdn_interface_open+0x60>
   331fe:	bf00      	nop
   33200:	20024e70 	.word	0x20024e70
   33204:	000428b8 	.word	0x000428b8
   33208:	20024d70 	.word	0x20024d70
   3320c:	000428c8 	.word	0x000428c8
   33210:	000428d4 	.word	0x000428d4
   33214:	20024d6c 	.word	0x20024d6c

00033218 <pdn_interface_connect>:
   33218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3321c:	b083      	sub	sp, #12
   3321e:	2900      	cmp	r1, #0
   33220:	f000 813d 	beq.w	3349e <pdn_interface_connect+0x286>
   33224:	2a64      	cmp	r2, #100	; 0x64
   33226:	4691      	mov	r9, r2
   33228:	f200 8139 	bhi.w	3349e <pdn_interface_connect+0x286>
   3322c:	4605      	mov	r5, r0
   3322e:	4608      	mov	r0, r1
   33230:	4688      	mov	r8, r1
   33232:	f7e9 ff77 	bl	1d124 <strlen>
   33236:	2864      	cmp	r0, #100	; 0x64
   33238:	f200 8131 	bhi.w	3349e <pdn_interface_connect+0x286>
   3323c:	0c2b      	lsrs	r3, r5, #16
   3323e:	4aa5      	ldr	r2, [pc, #660]	; (334d4 <pdn_interface_connect+0x2bc>)
   33240:	041b      	lsls	r3, r3, #16
   33242:	4293      	cmp	r3, r2
   33244:	f040 8122 	bne.w	3348c <pdn_interface_connect+0x274>
   33248:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   3324c:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   33250:	2d09      	cmp	r5, #9
   33252:	f300 811b 	bgt.w	3348c <pdn_interface_connect+0x274>
   33256:	4fa0      	ldr	r7, [pc, #640]	; (334d8 <pdn_interface_connect+0x2c0>)
   33258:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   3325c:	2b00      	cmp	r3, #0
   3325e:	f000 8115 	beq.w	3348c <pdn_interface_connect+0x274>
   33262:	689a      	ldr	r2, [r3, #8]
   33264:	2a00      	cmp	r2, #0
   33266:	f000 8111 	beq.w	3348c <pdn_interface_connect+0x274>
   3326a:	689b      	ldr	r3, [r3, #8]
   3326c:	2b02      	cmp	r3, #2
   3326e:	f040 810d 	bne.w	3348c <pdn_interface_connect+0x274>
   33272:	4e9a      	ldr	r6, [pc, #616]	; (334dc <pdn_interface_connect+0x2c4>)
   33274:	4a9a      	ldr	r2, [pc, #616]	; (334e0 <pdn_interface_connect+0x2c8>)
   33276:	f44f 7180 	mov.w	r1, #256	; 0x100
   3327a:	4630      	mov	r0, r6
   3327c:	f008 ffac 	bl	3c1d8 <sniprintf>
   33280:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   33284:	4604      	mov	r4, r0
   33286:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   3328a:	681b      	ldr	r3, [r3, #0]
   3328c:	4a95      	ldr	r2, [pc, #596]	; (334e4 <pdn_interface_connect+0x2cc>)
   3328e:	1830      	adds	r0, r6, r0
   33290:	f008 ffa2 	bl	3c1d8 <sniprintf>
   33294:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   33298:	4404      	add	r4, r0
   3329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   3329c:	f003 0203 	and.w	r2, r3, #3
   332a0:	2a03      	cmp	r2, #3
   332a2:	f000 80ea 	beq.w	3347a <pdn_interface_connect+0x262>
   332a6:	079b      	lsls	r3, r3, #30
   332a8:	eb06 0004 	add.w	r0, r6, r4
   332ac:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   332b0:	bf4c      	ite	mi
   332b2:	4b8d      	ldrmi	r3, [pc, #564]	; (334e8 <pdn_interface_connect+0x2d0>)
   332b4:	4b8d      	ldrpl	r3, [pc, #564]	; (334ec <pdn_interface_connect+0x2d4>)
   332b6:	4a8e      	ldr	r2, [pc, #568]	; (334f0 <pdn_interface_connect+0x2d8>)
   332b8:	f008 ff8e 	bl	3c1d8 <sniprintf>
   332bc:	4404      	add	r4, r0
   332be:	4643      	mov	r3, r8
   332c0:	4a8c      	ldr	r2, [pc, #560]	; (334f4 <pdn_interface_connect+0x2dc>)
   332c2:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   332c6:	1930      	adds	r0, r6, r4
   332c8:	f008 ff86 	bl	3c1d8 <sniprintf>
   332cc:	4420      	add	r0, r4
   332ce:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   332d2:	f300 80f7 	bgt.w	334c4 <pdn_interface_connect+0x2ac>
   332d6:	f8df a23c 	ldr.w	sl, [pc, #572]	; 33514 <pdn_interface_connect+0x2fc>
   332da:	4880      	ldr	r0, [pc, #512]	; (334dc <pdn_interface_connect+0x2c4>)
   332dc:	f8da b000 	ldr.w	fp, [sl]
   332e0:	2400      	movs	r4, #0
   332e2:	f7e9 ff1f 	bl	1d124 <strlen>
   332e6:	4623      	mov	r3, r4
   332e8:	4602      	mov	r2, r0
   332ea:	497c      	ldr	r1, [pc, #496]	; (334dc <pdn_interface_connect+0x2c4>)
   332ec:	4658      	mov	r0, fp
   332ee:	9401      	str	r4, [sp, #4]
   332f0:	9400      	str	r4, [sp, #0]
   332f2:	f7fc fd8f 	bl	2fe14 <at_interface_write>
   332f6:	4683      	mov	fp, r0
   332f8:	4878      	ldr	r0, [pc, #480]	; (334dc <pdn_interface_connect+0x2c4>)
   332fa:	f7e9 ff13 	bl	1d124 <strlen>
   332fe:	4558      	cmp	r0, fp
   33300:	d008      	beq.n	33314 <pdn_interface_connect+0xfc>
   33302:	2005      	movs	r0, #5
   33304:	f7f3 fea8 	bl	27058 <bsd_os_errno_set>
   33308:	f04f 34ff 	mov.w	r4, #4294967295
   3330c:	4620      	mov	r0, r4
   3330e:	b003      	add	sp, #12
   33310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33314:	4623      	mov	r3, r4
   33316:	e9cd 4400 	strd	r4, r4, [sp]
   3331a:	f44f 7280 	mov.w	r2, #256	; 0x100
   3331e:	496f      	ldr	r1, [pc, #444]	; (334dc <pdn_interface_connect+0x2c4>)
   33320:	f8da 0000 	ldr.w	r0, [sl]
   33324:	f7fc fe7a 	bl	3001c <at_interface_read>
   33328:	4604      	mov	r4, r0
   3332a:	4873      	ldr	r0, [pc, #460]	; (334f8 <pdn_interface_connect+0x2e0>)
   3332c:	f7e9 fefa 	bl	1d124 <strlen>
   33330:	4284      	cmp	r4, r0
   33332:	f2c0 8091 	blt.w	33458 <pdn_interface_connect+0x240>
   33336:	4602      	mov	r2, r0
   33338:	4968      	ldr	r1, [pc, #416]	; (334dc <pdn_interface_connect+0x2c4>)
   3333a:	486f      	ldr	r0, [pc, #444]	; (334f8 <pdn_interface_connect+0x2e0>)
   3333c:	f00d fb67 	bl	40a0e <strncmp>
   33340:	2800      	cmp	r0, #0
   33342:	f040 8089 	bne.w	33458 <pdn_interface_connect+0x240>
   33346:	4965      	ldr	r1, [pc, #404]	; (334dc <pdn_interface_connect+0x2c4>)
   33348:	4628      	mov	r0, r5
   3334a:	f7ff fde9 	bl	32f20 <ok_rsp_parser>
   3334e:	4604      	mov	r4, r0
   33350:	2800      	cmp	r0, #0
   33352:	d1db      	bne.n	3330c <pdn_interface_connect+0xf4>
   33354:	4a69      	ldr	r2, [pc, #420]	; (334fc <pdn_interface_connect+0x2e4>)
   33356:	f44f 7180 	mov.w	r1, #256	; 0x100
   3335a:	4860      	ldr	r0, [pc, #384]	; (334dc <pdn_interface_connect+0x2c4>)
   3335c:	f008 ff3c 	bl	3c1d8 <sniprintf>
   33360:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   33364:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   33368:	681b      	ldr	r3, [r3, #0]
   3336a:	4a65      	ldr	r2, [pc, #404]	; (33500 <pdn_interface_connect+0x2e8>)
   3336c:	4430      	add	r0, r6
   3336e:	f008 ff33 	bl	3c1d8 <sniprintf>
   33372:	485a      	ldr	r0, [pc, #360]	; (334dc <pdn_interface_connect+0x2c4>)
   33374:	f8da b000 	ldr.w	fp, [sl]
   33378:	f7e9 fed4 	bl	1d124 <strlen>
   3337c:	4623      	mov	r3, r4
   3337e:	4602      	mov	r2, r0
   33380:	4956      	ldr	r1, [pc, #344]	; (334dc <pdn_interface_connect+0x2c4>)
   33382:	4658      	mov	r0, fp
   33384:	9401      	str	r4, [sp, #4]
   33386:	9400      	str	r4, [sp, #0]
   33388:	f7fc fd44 	bl	2fe14 <at_interface_write>
   3338c:	4683      	mov	fp, r0
   3338e:	4853      	ldr	r0, [pc, #332]	; (334dc <pdn_interface_connect+0x2c4>)
   33390:	f7e9 fec8 	bl	1d124 <strlen>
   33394:	4558      	cmp	r0, fp
   33396:	d1b4      	bne.n	33302 <pdn_interface_connect+0xea>
   33398:	4623      	mov	r3, r4
   3339a:	f44f 7280 	mov.w	r2, #256	; 0x100
   3339e:	494f      	ldr	r1, [pc, #316]	; (334dc <pdn_interface_connect+0x2c4>)
   333a0:	f8da 0000 	ldr.w	r0, [sl]
   333a4:	e9cd 4400 	strd	r4, r4, [sp]
   333a8:	f7fc fe38 	bl	3001c <at_interface_read>
   333ac:	4683      	mov	fp, r0
   333ae:	4852      	ldr	r0, [pc, #328]	; (334f8 <pdn_interface_connect+0x2e0>)
   333b0:	f7e9 feb8 	bl	1d124 <strlen>
   333b4:	4583      	cmp	fp, r0
   333b6:	db4f      	blt.n	33458 <pdn_interface_connect+0x240>
   333b8:	4602      	mov	r2, r0
   333ba:	4948      	ldr	r1, [pc, #288]	; (334dc <pdn_interface_connect+0x2c4>)
   333bc:	484e      	ldr	r0, [pc, #312]	; (334f8 <pdn_interface_connect+0x2e0>)
   333be:	f00d fb26 	bl	40a0e <strncmp>
   333c2:	2800      	cmp	r0, #0
   333c4:	d148      	bne.n	33458 <pdn_interface_connect+0x240>
   333c6:	2103      	movs	r1, #3
   333c8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   333cc:	464a      	mov	r2, r9
   333ce:	6099      	str	r1, [r3, #8]
   333d0:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   333d4:	4641      	mov	r1, r8
   333d6:	300c      	adds	r0, #12
   333d8:	f00d f920 	bl	4061c <memcpy>
   333dc:	4a49      	ldr	r2, [pc, #292]	; (33504 <pdn_interface_connect+0x2ec>)
   333de:	f44f 7180 	mov.w	r1, #256	; 0x100
   333e2:	483e      	ldr	r0, [pc, #248]	; (334dc <pdn_interface_connect+0x2c4>)
   333e4:	f008 fef8 	bl	3c1d8 <sniprintf>
   333e8:	4601      	mov	r1, r0
   333ea:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   333ee:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   333f2:	681b      	ldr	r3, [r3, #0]
   333f4:	4a42      	ldr	r2, [pc, #264]	; (33500 <pdn_interface_connect+0x2e8>)
   333f6:	1830      	adds	r0, r6, r0
   333f8:	f008 feee 	bl	3c1d8 <sniprintf>
   333fc:	4837      	ldr	r0, [pc, #220]	; (334dc <pdn_interface_connect+0x2c4>)
   333fe:	f8da 6000 	ldr.w	r6, [sl]
   33402:	f7e9 fe8f 	bl	1d124 <strlen>
   33406:	4623      	mov	r3, r4
   33408:	4602      	mov	r2, r0
   3340a:	4934      	ldr	r1, [pc, #208]	; (334dc <pdn_interface_connect+0x2c4>)
   3340c:	4630      	mov	r0, r6
   3340e:	9401      	str	r4, [sp, #4]
   33410:	9400      	str	r4, [sp, #0]
   33412:	f7fc fcff 	bl	2fe14 <at_interface_write>
   33416:	4606      	mov	r6, r0
   33418:	4830      	ldr	r0, [pc, #192]	; (334dc <pdn_interface_connect+0x2c4>)
   3341a:	f7e9 fe83 	bl	1d124 <strlen>
   3341e:	42b0      	cmp	r0, r6
   33420:	d153      	bne.n	334ca <pdn_interface_connect+0x2b2>
   33422:	4623      	mov	r3, r4
   33424:	f44f 7280 	mov.w	r2, #256	; 0x100
   33428:	492c      	ldr	r1, [pc, #176]	; (334dc <pdn_interface_connect+0x2c4>)
   3342a:	f8da 0000 	ldr.w	r0, [sl]
   3342e:	e9cd 4400 	strd	r4, r4, [sp]
   33432:	f7fc fdf3 	bl	3001c <at_interface_read>
   33436:	4606      	mov	r6, r0
   33438:	4833      	ldr	r0, [pc, #204]	; (33508 <pdn_interface_connect+0x2f0>)
   3343a:	f7e9 fe73 	bl	1d124 <strlen>
   3343e:	4286      	cmp	r6, r0
   33440:	db33      	blt.n	334aa <pdn_interface_connect+0x292>
   33442:	4602      	mov	r2, r0
   33444:	4925      	ldr	r1, [pc, #148]	; (334dc <pdn_interface_connect+0x2c4>)
   33446:	4830      	ldr	r0, [pc, #192]	; (33508 <pdn_interface_connect+0x2f0>)
   33448:	f00d fae1 	bl	40a0e <strncmp>
   3344c:	bb68      	cbnz	r0, 334aa <pdn_interface_connect+0x292>
   3344e:	4628      	mov	r0, r5
   33450:	4922      	ldr	r1, [pc, #136]	; (334dc <pdn_interface_connect+0x2c4>)
   33452:	f7ff fd9d 	bl	32f90 <pdn_id_get_parser>
   33456:	e759      	b.n	3330c <pdn_interface_connect+0xf4>
   33458:	482c      	ldr	r0, [pc, #176]	; (3350c <pdn_interface_connect+0x2f4>)
   3345a:	f7e9 fe63 	bl	1d124 <strlen>
   3345e:	491f      	ldr	r1, [pc, #124]	; (334dc <pdn_interface_connect+0x2c4>)
   33460:	4602      	mov	r2, r0
   33462:	482a      	ldr	r0, [pc, #168]	; (3350c <pdn_interface_connect+0x2f4>)
   33464:	f00d fad3 	bl	40a0e <strncmp>
   33468:	2800      	cmp	r0, #0
   3346a:	f47f af4a 	bne.w	33302 <pdn_interface_connect+0xea>
   3346e:	2008      	movs	r0, #8
   33470:	f7f3 fdf2 	bl	27058 <bsd_os_errno_set>
   33474:	f04f 34ff 	mov.w	r4, #4294967295
   33478:	e748      	b.n	3330c <pdn_interface_connect+0xf4>
   3347a:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   3347e:	1930      	adds	r0, r6, r4
   33480:	4b23      	ldr	r3, [pc, #140]	; (33510 <pdn_interface_connect+0x2f8>)
   33482:	4a1b      	ldr	r2, [pc, #108]	; (334f0 <pdn_interface_connect+0x2d8>)
   33484:	f008 fea8 	bl	3c1d8 <sniprintf>
   33488:	4404      	add	r4, r0
   3348a:	e718      	b.n	332be <pdn_interface_connect+0xa6>
   3348c:	f04f 34ff 	mov.w	r4, #4294967295
   33490:	2009      	movs	r0, #9
   33492:	f7f3 fde1 	bl	27058 <bsd_os_errno_set>
   33496:	4620      	mov	r0, r4
   33498:	b003      	add	sp, #12
   3349a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3349e:	2016      	movs	r0, #22
   334a0:	f7f3 fdda 	bl	27058 <bsd_os_errno_set>
   334a4:	f04f 34ff 	mov.w	r4, #4294967295
   334a8:	e730      	b.n	3330c <pdn_interface_connect+0xf4>
   334aa:	4818      	ldr	r0, [pc, #96]	; (3350c <pdn_interface_connect+0x2f4>)
   334ac:	f7e9 fe3a 	bl	1d124 <strlen>
   334b0:	490a      	ldr	r1, [pc, #40]	; (334dc <pdn_interface_connect+0x2c4>)
   334b2:	4602      	mov	r2, r0
   334b4:	4815      	ldr	r0, [pc, #84]	; (3350c <pdn_interface_connect+0x2f4>)
   334b6:	f00d faaa 	bl	40a0e <strncmp>
   334ba:	b930      	cbnz	r0, 334ca <pdn_interface_connect+0x2b2>
   334bc:	2008      	movs	r0, #8
   334be:	f7f3 fdcb 	bl	27058 <bsd_os_errno_set>
   334c2:	e723      	b.n	3330c <pdn_interface_connect+0xf4>
   334c4:	f04f 34ff 	mov.w	r4, #4294967295
   334c8:	e720      	b.n	3330c <pdn_interface_connect+0xf4>
   334ca:	2005      	movs	r0, #5
   334cc:	f7f3 fdc4 	bl	27058 <bsd_os_errno_set>
   334d0:	e71c      	b.n	3330c <pdn_interface_connect+0xf4>
   334d2:	bf00      	nop
   334d4:	789a0000 	.word	0x789a0000
   334d8:	20024e70 	.word	0x20024e70
   334dc:	20024d70 	.word	0x20024d70
   334e0:	00042840 	.word	0x00042840
   334e4:	0004284c 	.word	0x0004284c
   334e8:	00042860 	.word	0x00042860
   334ec:	00042868 	.word	0x00042868
   334f0:	00042858 	.word	0x00042858
   334f4:	0004289c 	.word	0x0004289c
   334f8:	0004286c 	.word	0x0004286c
   334fc:	00042870 	.word	0x00042870
   33500:	0004287c 	.word	0x0004287c
   33504:	00042880 	.word	0x00042880
   33508:	00042890 	.word	0x00042890
   3350c:	000428d4 	.word	0x000428d4
   33510:	00042850 	.word	0x00042850
   33514:	20024d6c 	.word	0x20024d6c

00033518 <pdn_interface_close>:
   33518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3351c:	4a64      	ldr	r2, [pc, #400]	; (336b0 <pdn_interface_close+0x198>)
   3351e:	0c03      	lsrs	r3, r0, #16
   33520:	041b      	lsls	r3, r3, #16
   33522:	4293      	cmp	r3, r2
   33524:	b083      	sub	sp, #12
   33526:	f040 809d 	bne.w	33664 <pdn_interface_close+0x14c>
   3352a:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   3352e:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   33532:	2c09      	cmp	r4, #9
   33534:	f300 8096 	bgt.w	33664 <pdn_interface_close+0x14c>
   33538:	4d5e      	ldr	r5, [pc, #376]	; (336b4 <pdn_interface_close+0x19c>)
   3353a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   3353e:	2800      	cmp	r0, #0
   33540:	f000 8090 	beq.w	33664 <pdn_interface_close+0x14c>
   33544:	6883      	ldr	r3, [r0, #8]
   33546:	2b00      	cmp	r3, #0
   33548:	f000 808c 	beq.w	33664 <pdn_interface_close+0x14c>
   3354c:	6883      	ldr	r3, [r0, #8]
   3354e:	2b03      	cmp	r3, #3
   33550:	d008      	beq.n	33564 <pdn_interface_close+0x4c>
   33552:	f7fd fa19 	bl	30988 <nrf_free>
   33556:	2300      	movs	r3, #0
   33558:	4618      	mov	r0, r3
   3355a:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   3355e:	b003      	add	sp, #12
   33560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   33564:	4e54      	ldr	r6, [pc, #336]	; (336b8 <pdn_interface_close+0x1a0>)
   33566:	4a55      	ldr	r2, [pc, #340]	; (336bc <pdn_interface_close+0x1a4>)
   33568:	f44f 7180 	mov.w	r1, #256	; 0x100
   3356c:	4630      	mov	r0, r6
   3356e:	f008 fe33 	bl	3c1d8 <sniprintf>
   33572:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   33576:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   3357a:	681b      	ldr	r3, [r3, #0]
   3357c:	4a50      	ldr	r2, [pc, #320]	; (336c0 <pdn_interface_close+0x1a8>)
   3357e:	4430      	add	r0, r6
   33580:	f8df 814c 	ldr.w	r8, [pc, #332]	; 336d0 <pdn_interface_close+0x1b8>
   33584:	f008 fe28 	bl	3c1d8 <sniprintf>
   33588:	4630      	mov	r0, r6
   3358a:	f8d8 9000 	ldr.w	r9, [r8]
   3358e:	2700      	movs	r7, #0
   33590:	f7e9 fdc8 	bl	1d124 <strlen>
   33594:	4631      	mov	r1, r6
   33596:	4602      	mov	r2, r0
   33598:	463b      	mov	r3, r7
   3359a:	4648      	mov	r0, r9
   3359c:	9701      	str	r7, [sp, #4]
   3359e:	9700      	str	r7, [sp, #0]
   335a0:	f7fc fc38 	bl	2fe14 <at_interface_write>
   335a4:	4681      	mov	r9, r0
   335a6:	4630      	mov	r0, r6
   335a8:	f7e9 fdbc 	bl	1d124 <strlen>
   335ac:	4548      	cmp	r0, r9
   335ae:	d176      	bne.n	3369e <pdn_interface_close+0x186>
   335b0:	463b      	mov	r3, r7
   335b2:	e9cd 7700 	strd	r7, r7, [sp]
   335b6:	f44f 7280 	mov.w	r2, #256	; 0x100
   335ba:	4631      	mov	r1, r6
   335bc:	f8d8 0000 	ldr.w	r0, [r8]
   335c0:	f7fc fd2c 	bl	3001c <at_interface_read>
   335c4:	4607      	mov	r7, r0
   335c6:	483f      	ldr	r0, [pc, #252]	; (336c4 <pdn_interface_close+0x1ac>)
   335c8:	f7e9 fdac 	bl	1d124 <strlen>
   335cc:	4287      	cmp	r7, r0
   335ce:	da4f      	bge.n	33670 <pdn_interface_close+0x158>
   335d0:	483d      	ldr	r0, [pc, #244]	; (336c8 <pdn_interface_close+0x1b0>)
   335d2:	f7e9 fda7 	bl	1d124 <strlen>
   335d6:	4938      	ldr	r1, [pc, #224]	; (336b8 <pdn_interface_close+0x1a0>)
   335d8:	4602      	mov	r2, r0
   335da:	483b      	ldr	r0, [pc, #236]	; (336c8 <pdn_interface_close+0x1b0>)
   335dc:	f00d fa17 	bl	40a0e <strncmp>
   335e0:	2800      	cmp	r0, #0
   335e2:	d15c      	bne.n	3369e <pdn_interface_close+0x186>
   335e4:	2008      	movs	r0, #8
   335e6:	f7f3 fd37 	bl	27058 <bsd_os_errno_set>
   335ea:	4a38      	ldr	r2, [pc, #224]	; (336cc <pdn_interface_close+0x1b4>)
   335ec:	f44f 7180 	mov.w	r1, #256	; 0x100
   335f0:	4831      	ldr	r0, [pc, #196]	; (336b8 <pdn_interface_close+0x1a0>)
   335f2:	f008 fdf1 	bl	3c1d8 <sniprintf>
   335f6:	4601      	mov	r1, r0
   335f8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   335fc:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   33600:	681b      	ldr	r3, [r3, #0]
   33602:	4a2f      	ldr	r2, [pc, #188]	; (336c0 <pdn_interface_close+0x1a8>)
   33604:	1830      	adds	r0, r6, r0
   33606:	f008 fde7 	bl	3c1d8 <sniprintf>
   3360a:	482b      	ldr	r0, [pc, #172]	; (336b8 <pdn_interface_close+0x1a0>)
   3360c:	f8d8 7000 	ldr.w	r7, [r8]
   33610:	2600      	movs	r6, #0
   33612:	f7e9 fd87 	bl	1d124 <strlen>
   33616:	4633      	mov	r3, r6
   33618:	4602      	mov	r2, r0
   3361a:	4927      	ldr	r1, [pc, #156]	; (336b8 <pdn_interface_close+0x1a0>)
   3361c:	4638      	mov	r0, r7
   3361e:	9601      	str	r6, [sp, #4]
   33620:	9600      	str	r6, [sp, #0]
   33622:	f7fc fbf7 	bl	2fe14 <at_interface_write>
   33626:	4607      	mov	r7, r0
   33628:	4823      	ldr	r0, [pc, #140]	; (336b8 <pdn_interface_close+0x1a0>)
   3362a:	f7e9 fd7b 	bl	1d124 <strlen>
   3362e:	42b8      	cmp	r0, r7
   33630:	d139      	bne.n	336a6 <pdn_interface_close+0x18e>
   33632:	4633      	mov	r3, r6
   33634:	e9cd 6600 	strd	r6, r6, [sp]
   33638:	f44f 7280 	mov.w	r2, #256	; 0x100
   3363c:	491e      	ldr	r1, [pc, #120]	; (336b8 <pdn_interface_close+0x1a0>)
   3363e:	f8d8 0000 	ldr.w	r0, [r8]
   33642:	f7fc fceb 	bl	3001c <at_interface_read>
   33646:	4606      	mov	r6, r0
   33648:	481e      	ldr	r0, [pc, #120]	; (336c4 <pdn_interface_close+0x1ac>)
   3364a:	f7e9 fd6b 	bl	1d124 <strlen>
   3364e:	4286      	cmp	r6, r0
   33650:	db16      	blt.n	33680 <pdn_interface_close+0x168>
   33652:	4602      	mov	r2, r0
   33654:	4918      	ldr	r1, [pc, #96]	; (336b8 <pdn_interface_close+0x1a0>)
   33656:	481b      	ldr	r0, [pc, #108]	; (336c4 <pdn_interface_close+0x1ac>)
   33658:	f00d f9d9 	bl	40a0e <strncmp>
   3365c:	b980      	cbnz	r0, 33680 <pdn_interface_close+0x168>
   3365e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   33662:	e776      	b.n	33552 <pdn_interface_close+0x3a>
   33664:	2009      	movs	r0, #9
   33666:	f7f3 fcf7 	bl	27058 <bsd_os_errno_set>
   3366a:	f04f 30ff 	mov.w	r0, #4294967295
   3366e:	e776      	b.n	3355e <pdn_interface_close+0x46>
   33670:	4602      	mov	r2, r0
   33672:	4631      	mov	r1, r6
   33674:	4813      	ldr	r0, [pc, #76]	; (336c4 <pdn_interface_close+0x1ac>)
   33676:	f00d f9ca 	bl	40a0e <strncmp>
   3367a:	2800      	cmp	r0, #0
   3367c:	d0b5      	beq.n	335ea <pdn_interface_close+0xd2>
   3367e:	e7a7      	b.n	335d0 <pdn_interface_close+0xb8>
   33680:	4811      	ldr	r0, [pc, #68]	; (336c8 <pdn_interface_close+0x1b0>)
   33682:	f7e9 fd4f 	bl	1d124 <strlen>
   33686:	490c      	ldr	r1, [pc, #48]	; (336b8 <pdn_interface_close+0x1a0>)
   33688:	4602      	mov	r2, r0
   3368a:	480f      	ldr	r0, [pc, #60]	; (336c8 <pdn_interface_close+0x1b0>)
   3368c:	f00d f9bf 	bl	40a0e <strncmp>
   33690:	b948      	cbnz	r0, 336a6 <pdn_interface_close+0x18e>
   33692:	2008      	movs	r0, #8
   33694:	f7f3 fce0 	bl	27058 <bsd_os_errno_set>
   33698:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   3369c:	e759      	b.n	33552 <pdn_interface_close+0x3a>
   3369e:	2005      	movs	r0, #5
   336a0:	f7f3 fcda 	bl	27058 <bsd_os_errno_set>
   336a4:	e7a1      	b.n	335ea <pdn_interface_close+0xd2>
   336a6:	2005      	movs	r0, #5
   336a8:	f7f3 fcd6 	bl	27058 <bsd_os_errno_set>
   336ac:	e7d7      	b.n	3365e <pdn_interface_close+0x146>
   336ae:	bf00      	nop
   336b0:	789a0000 	.word	0x789a0000
   336b4:	20024e70 	.word	0x20024e70
   336b8:	20024d70 	.word	0x20024d70
   336bc:	00042834 	.word	0x00042834
   336c0:	0004287c 	.word	0x0004287c
   336c4:	0004286c 	.word	0x0004286c
   336c8:	000428d4 	.word	0x000428d4
   336cc:	00042840 	.word	0x00042840
   336d0:	20024d6c 	.word	0x20024d6c

000336d4 <pdn_interface_setopt>:
   336d4:	b510      	push	{r4, lr}
   336d6:	f240 2402 	movw	r4, #514	; 0x202
   336da:	42a1      	cmp	r1, r4
   336dc:	d10d      	bne.n	336fa <pdn_interface_setopt+0x26>
   336de:	b163      	cbz	r3, 336fa <pdn_interface_setopt+0x26>
   336e0:	9902      	ldr	r1, [sp, #8]
   336e2:	b151      	cbz	r1, 336fa <pdn_interface_setopt+0x26>
   336e4:	0c01      	lsrs	r1, r0, #16
   336e6:	4c25      	ldr	r4, [pc, #148]	; (3377c <pdn_interface_setopt+0xa8>)
   336e8:	0409      	lsls	r1, r1, #16
   336ea:	42a1      	cmp	r1, r4
   336ec:	d00b      	beq.n	33706 <pdn_interface_setopt+0x32>
   336ee:	2009      	movs	r0, #9
   336f0:	f7f3 fcb2 	bl	27058 <bsd_os_errno_set>
   336f4:	f04f 30ff 	mov.w	r0, #4294967295
   336f8:	bd10      	pop	{r4, pc}
   336fa:	2016      	movs	r0, #22
   336fc:	f7f3 fcac 	bl	27058 <bsd_os_errno_set>
   33700:	f04f 30ff 	mov.w	r0, #4294967295
   33704:	bd10      	pop	{r4, pc}
   33706:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   3370a:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   3370e:	2809      	cmp	r0, #9
   33710:	dced      	bgt.n	336ee <pdn_interface_setopt+0x1a>
   33712:	491b      	ldr	r1, [pc, #108]	; (33780 <pdn_interface_setopt+0xac>)
   33714:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   33718:	2900      	cmp	r1, #0
   3371a:	d0e8      	beq.n	336ee <pdn_interface_setopt+0x1a>
   3371c:	6888      	ldr	r0, [r1, #8]
   3371e:	2800      	cmp	r0, #0
   33720:	d0e5      	beq.n	336ee <pdn_interface_setopt+0x1a>
   33722:	2a01      	cmp	r2, #1
   33724:	d001      	beq.n	3372a <pdn_interface_setopt+0x56>
   33726:	202d      	movs	r0, #45	; 0x2d
   33728:	e7e8      	b.n	336fc <pdn_interface_setopt+0x28>
   3372a:	688a      	ldr	r2, [r1, #8]
   3372c:	b1fa      	cbz	r2, 3376e <pdn_interface_setopt+0x9a>
   3372e:	688a      	ldr	r2, [r1, #8]
   33730:	2a03      	cmp	r2, #3
   33732:	d01c      	beq.n	3376e <pdn_interface_setopt+0x9a>
   33734:	688a      	ldr	r2, [r1, #8]
   33736:	2a04      	cmp	r2, #4
   33738:	d019      	beq.n	3376e <pdn_interface_setopt+0x9a>
   3373a:	9a02      	ldr	r2, [sp, #8]
   3373c:	0890      	lsrs	r0, r2, #2
   3373e:	1e42      	subs	r2, r0, #1
   33740:	2a01      	cmp	r2, #1
   33742:	d8da      	bhi.n	336fa <pdn_interface_setopt+0x26>
   33744:	9a02      	ldr	r2, [sp, #8]
   33746:	0792      	lsls	r2, r2, #30
   33748:	d1d7      	bne.n	336fa <pdn_interface_setopt+0x26>
   3374a:	681a      	ldr	r2, [r3, #0]
   3374c:	2a02      	cmp	r2, #2
   3374e:	d010      	beq.n	33772 <pdn_interface_setopt+0x9e>
   33750:	2a0a      	cmp	r2, #10
   33752:	d1d2      	bne.n	336fa <pdn_interface_setopt+0x26>
   33754:	2202      	movs	r2, #2
   33756:	2802      	cmp	r0, #2
   33758:	d106      	bne.n	33768 <pdn_interface_setopt+0x94>
   3375a:	685b      	ldr	r3, [r3, #4]
   3375c:	2b02      	cmp	r3, #2
   3375e:	d00a      	beq.n	33776 <pdn_interface_setopt+0xa2>
   33760:	2b0a      	cmp	r3, #10
   33762:	d1ca      	bne.n	336fa <pdn_interface_setopt+0x26>
   33764:	f042 0202 	orr.w	r2, r2, #2
   33768:	670a      	str	r2, [r1, #112]	; 0x70
   3376a:	2000      	movs	r0, #0
   3376c:	e7c6      	b.n	336fc <pdn_interface_setopt+0x28>
   3376e:	200e      	movs	r0, #14
   33770:	e7c4      	b.n	336fc <pdn_interface_setopt+0x28>
   33772:	2201      	movs	r2, #1
   33774:	e7ef      	b.n	33756 <pdn_interface_setopt+0x82>
   33776:	f042 0201 	orr.w	r2, r2, #1
   3377a:	e7f5      	b.n	33768 <pdn_interface_setopt+0x94>
   3377c:	789a0000 	.word	0x789a0000
   33780:	20024e70 	.word	0x20024e70

00033784 <pdn_interface_getopt>:
   33784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   33788:	f240 2402 	movw	r4, #514	; 0x202
   3378c:	b083      	sub	sp, #12
   3378e:	42a1      	cmp	r1, r4
   33790:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   33792:	f040 80a9 	bne.w	338e8 <pdn_interface_getopt+0x164>
   33796:	461e      	mov	r6, r3
   33798:	2b00      	cmp	r3, #0
   3379a:	f000 80a5 	beq.w	338e8 <pdn_interface_getopt+0x164>
   3379e:	2d00      	cmp	r5, #0
   337a0:	f000 80a2 	beq.w	338e8 <pdn_interface_getopt+0x164>
   337a4:	0c03      	lsrs	r3, r0, #16
   337a6:	4956      	ldr	r1, [pc, #344]	; (33900 <pdn_interface_getopt+0x17c>)
   337a8:	041b      	lsls	r3, r3, #16
   337aa:	428b      	cmp	r3, r1
   337ac:	f040 8082 	bne.w	338b4 <pdn_interface_getopt+0x130>
   337b0:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   337b4:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   337b8:	2c09      	cmp	r4, #9
   337ba:	dc7b      	bgt.n	338b4 <pdn_interface_getopt+0x130>
   337bc:	4b51      	ldr	r3, [pc, #324]	; (33904 <pdn_interface_getopt+0x180>)
   337be:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   337c2:	2b00      	cmp	r3, #0
   337c4:	d076      	beq.n	338b4 <pdn_interface_getopt+0x130>
   337c6:	6899      	ldr	r1, [r3, #8]
   337c8:	2900      	cmp	r1, #0
   337ca:	d073      	beq.n	338b4 <pdn_interface_getopt+0x130>
   337cc:	2a02      	cmp	r2, #2
   337ce:	d00e      	beq.n	337ee <pdn_interface_getopt+0x6a>
   337d0:	2a03      	cmp	r2, #3
   337d2:	d008      	beq.n	337e6 <pdn_interface_getopt+0x62>
   337d4:	2a01      	cmp	r2, #1
   337d6:	d015      	beq.n	33804 <pdn_interface_getopt+0x80>
   337d8:	202d      	movs	r0, #45	; 0x2d
   337da:	f7f3 fc3d 	bl	27058 <bsd_os_errno_set>
   337de:	2000      	movs	r0, #0
   337e0:	b003      	add	sp, #12
   337e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   337e6:	682b      	ldr	r3, [r5, #0]
   337e8:	bb23      	cbnz	r3, 33834 <pdn_interface_getopt+0xb0>
   337ea:	2016      	movs	r0, #22
   337ec:	e7f5      	b.n	337da <pdn_interface_getopt+0x56>
   337ee:	682a      	ldr	r2, [r5, #0]
   337f0:	2a00      	cmp	r2, #0
   337f2:	d0fa      	beq.n	337ea <pdn_interface_getopt+0x66>
   337f4:	2201      	movs	r2, #1
   337f6:	2000      	movs	r0, #0
   337f8:	681b      	ldr	r3, [r3, #0]
   337fa:	7033      	strb	r3, [r6, #0]
   337fc:	602a      	str	r2, [r5, #0]
   337fe:	b003      	add	sp, #12
   33800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   33804:	689a      	ldr	r2, [r3, #8]
   33806:	2a00      	cmp	r2, #0
   33808:	d052      	beq.n	338b0 <pdn_interface_getopt+0x12c>
   3380a:	689a      	ldr	r2, [r3, #8]
   3380c:	2a04      	cmp	r2, #4
   3380e:	d04f      	beq.n	338b0 <pdn_interface_getopt+0x12c>
   33810:	682a      	ldr	r2, [r5, #0]
   33812:	2a07      	cmp	r2, #7
   33814:	d9e9      	bls.n	337ea <pdn_interface_getopt+0x66>
   33816:	f012 0203 	ands.w	r2, r2, #3
   3381a:	d1e6      	bne.n	337ea <pdn_interface_getopt+0x66>
   3381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   3381e:	0799      	lsls	r1, r3, #30
   33820:	d45d      	bmi.n	338de <pdn_interface_getopt+0x15a>
   33822:	2104      	movs	r1, #4
   33824:	07db      	lsls	r3, r3, #31
   33826:	d502      	bpl.n	3382e <pdn_interface_getopt+0xaa>
   33828:	2302      	movs	r3, #2
   3382a:	50b3      	str	r3, [r6, r2]
   3382c:	460a      	mov	r2, r1
   3382e:	602a      	str	r2, [r5, #0]
   33830:	2000      	movs	r0, #0
   33832:	e7d5      	b.n	337e0 <pdn_interface_getopt+0x5c>
   33834:	4a34      	ldr	r2, [pc, #208]	; (33908 <pdn_interface_getopt+0x184>)
   33836:	f44f 7180 	mov.w	r1, #256	; 0x100
   3383a:	4834      	ldr	r0, [pc, #208]	; (3390c <pdn_interface_getopt+0x188>)
   3383c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 33918 <pdn_interface_getopt+0x194>
   33840:	f008 fcca 	bl	3c1d8 <sniprintf>
   33844:	4831      	ldr	r0, [pc, #196]	; (3390c <pdn_interface_getopt+0x188>)
   33846:	f8d8 9000 	ldr.w	r9, [r8]
   3384a:	2700      	movs	r7, #0
   3384c:	f7e9 fc6a 	bl	1d124 <strlen>
   33850:	463b      	mov	r3, r7
   33852:	4602      	mov	r2, r0
   33854:	492d      	ldr	r1, [pc, #180]	; (3390c <pdn_interface_getopt+0x188>)
   33856:	4648      	mov	r0, r9
   33858:	9701      	str	r7, [sp, #4]
   3385a:	9700      	str	r7, [sp, #0]
   3385c:	f7fc fada 	bl	2fe14 <at_interface_write>
   33860:	4681      	mov	r9, r0
   33862:	482a      	ldr	r0, [pc, #168]	; (3390c <pdn_interface_getopt+0x188>)
   33864:	f7e9 fc5e 	bl	1d124 <strlen>
   33868:	4548      	cmp	r0, r9
   3386a:	d143      	bne.n	338f4 <pdn_interface_getopt+0x170>
   3386c:	463b      	mov	r3, r7
   3386e:	e9cd 7700 	strd	r7, r7, [sp]
   33872:	f44f 7280 	mov.w	r2, #256	; 0x100
   33876:	4925      	ldr	r1, [pc, #148]	; (3390c <pdn_interface_getopt+0x188>)
   33878:	f8d8 0000 	ldr.w	r0, [r8]
   3387c:	f7fc fbce 	bl	3001c <at_interface_read>
   33880:	4607      	mov	r7, r0
   33882:	4823      	ldr	r0, [pc, #140]	; (33910 <pdn_interface_getopt+0x18c>)
   33884:	f7e9 fc4e 	bl	1d124 <strlen>
   33888:	4287      	cmp	r7, r0
   3388a:	db19      	blt.n	338c0 <pdn_interface_getopt+0x13c>
   3388c:	4602      	mov	r2, r0
   3388e:	491f      	ldr	r1, [pc, #124]	; (3390c <pdn_interface_getopt+0x188>)
   33890:	481f      	ldr	r0, [pc, #124]	; (33910 <pdn_interface_getopt+0x18c>)
   33892:	f00d f8bc 	bl	40a0e <strncmp>
   33896:	4607      	mov	r7, r0
   33898:	b990      	cbnz	r0, 338c0 <pdn_interface_getopt+0x13c>
   3389a:	4620      	mov	r0, r4
   3389c:	491b      	ldr	r1, [pc, #108]	; (3390c <pdn_interface_getopt+0x188>)
   3389e:	f7ff fb41 	bl	32f24 <pdn_state_get_parser>
   338a2:	2800      	cmp	r0, #0
   338a4:	db99      	blt.n	337da <pdn_interface_getopt+0x56>
   338a6:	2301      	movs	r3, #1
   338a8:	7030      	strb	r0, [r6, #0]
   338aa:	4638      	mov	r0, r7
   338ac:	602b      	str	r3, [r5, #0]
   338ae:	e797      	b.n	337e0 <pdn_interface_getopt+0x5c>
   338b0:	200e      	movs	r0, #14
   338b2:	e792      	b.n	337da <pdn_interface_getopt+0x56>
   338b4:	2009      	movs	r0, #9
   338b6:	f7f3 fbcf 	bl	27058 <bsd_os_errno_set>
   338ba:	f04f 30ff 	mov.w	r0, #4294967295
   338be:	e78f      	b.n	337e0 <pdn_interface_getopt+0x5c>
   338c0:	4814      	ldr	r0, [pc, #80]	; (33914 <pdn_interface_getopt+0x190>)
   338c2:	f7e9 fc2f 	bl	1d124 <strlen>
   338c6:	4911      	ldr	r1, [pc, #68]	; (3390c <pdn_interface_getopt+0x188>)
   338c8:	4602      	mov	r2, r0
   338ca:	4812      	ldr	r0, [pc, #72]	; (33914 <pdn_interface_getopt+0x190>)
   338cc:	f00d f89f 	bl	40a0e <strncmp>
   338d0:	b980      	cbnz	r0, 338f4 <pdn_interface_getopt+0x170>
   338d2:	2008      	movs	r0, #8
   338d4:	f7f3 fbc0 	bl	27058 <bsd_os_errno_set>
   338d8:	f04f 30ff 	mov.w	r0, #4294967295
   338dc:	e77d      	b.n	337da <pdn_interface_getopt+0x56>
   338de:	220a      	movs	r2, #10
   338e0:	2108      	movs	r1, #8
   338e2:	6032      	str	r2, [r6, #0]
   338e4:	2204      	movs	r2, #4
   338e6:	e79d      	b.n	33824 <pdn_interface_getopt+0xa0>
   338e8:	2016      	movs	r0, #22
   338ea:	f7f3 fbb5 	bl	27058 <bsd_os_errno_set>
   338ee:	f04f 30ff 	mov.w	r0, #4294967295
   338f2:	e775      	b.n	337e0 <pdn_interface_getopt+0x5c>
   338f4:	2005      	movs	r0, #5
   338f6:	f7f3 fbaf 	bl	27058 <bsd_os_errno_set>
   338fa:	f04f 30ff 	mov.w	r0, #4294967295
   338fe:	e76c      	b.n	337da <pdn_interface_getopt+0x56>
   33900:	789a0000 	.word	0x789a0000
   33904:	20024e70 	.word	0x20024e70
   33908:	000428a4 	.word	0x000428a4
   3390c:	20024d70 	.word	0x20024d70
   33910:	000428b0 	.word	0x000428b0
   33914:	000428d4 	.word	0x000428d4
   33918:	20024d6c 	.word	0x20024d6c

0003391c <pdn_interface_pdn_id_get>:
   3391c:	2900      	cmp	r1, #0
   3391e:	f000 83b9 	beq.w	34094 <pdn_interface_pdn_id_get+0x778>
   33922:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   33926:	4ca3      	ldr	r4, [pc, #652]	; (33bb4 <pdn_interface_pdn_id_get+0x298>)
   33928:	2802      	cmp	r0, #2
   3392a:	b083      	sub	sp, #12
   3392c:	460d      	mov	r5, r1
   3392e:	6823      	ldr	r3, [r4, #0]
   33930:	f000 8094 	beq.w	33a5c <pdn_interface_pdn_id_get+0x140>
   33934:	280a      	cmp	r0, #10
   33936:	d03f      	beq.n	339b8 <pdn_interface_pdn_id_get+0x9c>
   33938:	b11b      	cbz	r3, 33942 <pdn_interface_pdn_id_get+0x26>
   3393a:	689b      	ldr	r3, [r3, #8]
   3393c:	2b03      	cmp	r3, #3
   3393e:	f000 8127 	beq.w	33b90 <pdn_interface_pdn_id_get+0x274>
   33942:	6863      	ldr	r3, [r4, #4]
   33944:	b11b      	cbz	r3, 3394e <pdn_interface_pdn_id_get+0x32>
   33946:	689b      	ldr	r3, [r3, #8]
   33948:	2b03      	cmp	r3, #3
   3394a:	f000 8110 	beq.w	33b6e <pdn_interface_pdn_id_get+0x252>
   3394e:	68a3      	ldr	r3, [r4, #8]
   33950:	b11b      	cbz	r3, 3395a <pdn_interface_pdn_id_get+0x3e>
   33952:	689b      	ldr	r3, [r3, #8]
   33954:	2b03      	cmp	r3, #3
   33956:	f000 80f9 	beq.w	33b4c <pdn_interface_pdn_id_get+0x230>
   3395a:	68e3      	ldr	r3, [r4, #12]
   3395c:	b11b      	cbz	r3, 33966 <pdn_interface_pdn_id_get+0x4a>
   3395e:	689b      	ldr	r3, [r3, #8]
   33960:	2b03      	cmp	r3, #3
   33962:	f000 80e2 	beq.w	33b2a <pdn_interface_pdn_id_get+0x20e>
   33966:	6923      	ldr	r3, [r4, #16]
   33968:	b11b      	cbz	r3, 33972 <pdn_interface_pdn_id_get+0x56>
   3396a:	689b      	ldr	r3, [r3, #8]
   3396c:	2b03      	cmp	r3, #3
   3396e:	f000 8123 	beq.w	33bb8 <pdn_interface_pdn_id_get+0x29c>
   33972:	6963      	ldr	r3, [r4, #20]
   33974:	b11b      	cbz	r3, 3397e <pdn_interface_pdn_id_get+0x62>
   33976:	689b      	ldr	r3, [r3, #8]
   33978:	2b03      	cmp	r3, #3
   3397a:	f000 8161 	beq.w	33c40 <pdn_interface_pdn_id_get+0x324>
   3397e:	69a3      	ldr	r3, [r4, #24]
   33980:	b11b      	cbz	r3, 3398a <pdn_interface_pdn_id_get+0x6e>
   33982:	689b      	ldr	r3, [r3, #8]
   33984:	2b03      	cmp	r3, #3
   33986:	f000 814a 	beq.w	33c1e <pdn_interface_pdn_id_get+0x302>
   3398a:	69e3      	ldr	r3, [r4, #28]
   3398c:	b11b      	cbz	r3, 33996 <pdn_interface_pdn_id_get+0x7a>
   3398e:	689b      	ldr	r3, [r3, #8]
   33990:	2b03      	cmp	r3, #3
   33992:	f000 8133 	beq.w	33bfc <pdn_interface_pdn_id_get+0x2e0>
   33996:	6a23      	ldr	r3, [r4, #32]
   33998:	b11b      	cbz	r3, 339a2 <pdn_interface_pdn_id_get+0x86>
   3399a:	689b      	ldr	r3, [r3, #8]
   3399c:	2b03      	cmp	r3, #3
   3399e:	f000 811c 	beq.w	33bda <pdn_interface_pdn_id_get+0x2be>
   339a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   339a4:	b11b      	cbz	r3, 339ae <pdn_interface_pdn_id_get+0x92>
   339a6:	689b      	ldr	r3, [r3, #8]
   339a8:	2b03      	cmp	r3, #3
   339aa:	f000 80ad 	beq.w	33b08 <pdn_interface_pdn_id_get+0x1ec>
   339ae:	f04f 30ff 	mov.w	r0, #4294967295
   339b2:	b003      	add	sp, #12
   339b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   339b8:	b11b      	cbz	r3, 339c2 <pdn_interface_pdn_id_get+0xa6>
   339ba:	689b      	ldr	r3, [r3, #8]
   339bc:	2b03      	cmp	r3, #3
   339be:	f000 8335 	beq.w	3402c <pdn_interface_pdn_id_get+0x710>
   339c2:	6863      	ldr	r3, [r4, #4]
   339c4:	b11b      	cbz	r3, 339ce <pdn_interface_pdn_id_get+0xb2>
   339c6:	689b      	ldr	r3, [r3, #8]
   339c8:	2b03      	cmp	r3, #3
   339ca:	f000 82fd 	beq.w	33fc8 <pdn_interface_pdn_id_get+0x6ac>
   339ce:	68a3      	ldr	r3, [r4, #8]
   339d0:	b11b      	cbz	r3, 339da <pdn_interface_pdn_id_get+0xbe>
   339d2:	689b      	ldr	r3, [r3, #8]
   339d4:	2b03      	cmp	r3, #3
   339d6:	f000 82d5 	beq.w	33f84 <pdn_interface_pdn_id_get+0x668>
   339da:	68e3      	ldr	r3, [r4, #12]
   339dc:	b11b      	cbz	r3, 339e6 <pdn_interface_pdn_id_get+0xca>
   339de:	689e      	ldr	r6, [r3, #8]
   339e0:	2e03      	cmp	r6, #3
   339e2:	f000 81f0 	beq.w	33dc6 <pdn_interface_pdn_id_get+0x4aa>
   339e6:	6923      	ldr	r3, [r4, #16]
   339e8:	b11b      	cbz	r3, 339f2 <pdn_interface_pdn_id_get+0xd6>
   339ea:	689b      	ldr	r3, [r3, #8]
   339ec:	2b03      	cmp	r3, #3
   339ee:	f000 8203 	beq.w	33df8 <pdn_interface_pdn_id_get+0x4dc>
   339f2:	6963      	ldr	r3, [r4, #20]
   339f4:	b11b      	cbz	r3, 339fe <pdn_interface_pdn_id_get+0xe2>
   339f6:	689b      	ldr	r3, [r3, #8]
   339f8:	2b03      	cmp	r3, #3
   339fa:	f000 8215 	beq.w	33e28 <pdn_interface_pdn_id_get+0x50c>
   339fe:	69a3      	ldr	r3, [r4, #24]
   33a00:	b11b      	cbz	r3, 33a0a <pdn_interface_pdn_id_get+0xee>
   33a02:	689b      	ldr	r3, [r3, #8]
   33a04:	2b03      	cmp	r3, #3
   33a06:	f000 8227 	beq.w	33e58 <pdn_interface_pdn_id_get+0x53c>
   33a0a:	69e3      	ldr	r3, [r4, #28]
   33a0c:	b11b      	cbz	r3, 33a16 <pdn_interface_pdn_id_get+0xfa>
   33a0e:	689b      	ldr	r3, [r3, #8]
   33a10:	2b03      	cmp	r3, #3
   33a12:	f000 8239 	beq.w	33e88 <pdn_interface_pdn_id_get+0x56c>
   33a16:	6a23      	ldr	r3, [r4, #32]
   33a18:	b11b      	cbz	r3, 33a22 <pdn_interface_pdn_id_get+0x106>
   33a1a:	689b      	ldr	r3, [r3, #8]
   33a1c:	2b03      	cmp	r3, #3
   33a1e:	f000 824d 	beq.w	33ebc <pdn_interface_pdn_id_get+0x5a0>
   33a22:	6a63      	ldr	r3, [r4, #36]	; 0x24
   33a24:	2b00      	cmp	r3, #0
   33a26:	d0c2      	beq.n	339ae <pdn_interface_pdn_id_get+0x92>
   33a28:	689b      	ldr	r3, [r3, #8]
   33a2a:	2b03      	cmp	r3, #3
   33a2c:	d1bf      	bne.n	339ae <pdn_interface_pdn_id_get+0x92>
   33a2e:	4628      	mov	r0, r5
   33a30:	f7e9 fb78 	bl	1d124 <strlen>
   33a34:	4606      	mov	r6, r0
   33a36:	6a60      	ldr	r0, [r4, #36]	; 0x24
   33a38:	300c      	adds	r0, #12
   33a3a:	f7e9 fb73 	bl	1d124 <strlen>
   33a3e:	42b0      	cmp	r0, r6
   33a40:	d1b5      	bne.n	339ae <pdn_interface_pdn_id_get+0x92>
   33a42:	6a61      	ldr	r1, [r4, #36]	; 0x24
   33a44:	4628      	mov	r0, r5
   33a46:	310c      	adds	r1, #12
   33a48:	f7e9 fb62 	bl	1d110 <strcmp>
   33a4c:	2800      	cmp	r0, #0
   33a4e:	d1ae      	bne.n	339ae <pdn_interface_pdn_id_get+0x92>
   33a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
   33a52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   33a54:	0792      	lsls	r2, r2, #30
   33a56:	d5aa      	bpl.n	339ae <pdn_interface_pdn_id_get+0x92>
   33a58:	2609      	movs	r6, #9
   33a5a:	e11a      	b.n	33c92 <pdn_interface_pdn_id_get+0x376>
   33a5c:	b11b      	cbz	r3, 33a66 <pdn_interface_pdn_id_get+0x14a>
   33a5e:	689b      	ldr	r3, [r3, #8]
   33a60:	2b03      	cmp	r3, #3
   33a62:	f000 82fd 	beq.w	34060 <pdn_interface_pdn_id_get+0x744>
   33a66:	6863      	ldr	r3, [r4, #4]
   33a68:	b11b      	cbz	r3, 33a72 <pdn_interface_pdn_id_get+0x156>
   33a6a:	689b      	ldr	r3, [r3, #8]
   33a6c:	2b03      	cmp	r3, #3
   33a6e:	f000 82c5 	beq.w	33ffc <pdn_interface_pdn_id_get+0x6e0>
   33a72:	68a3      	ldr	r3, [r4, #8]
   33a74:	b11b      	cbz	r3, 33a7e <pdn_interface_pdn_id_get+0x162>
   33a76:	689b      	ldr	r3, [r3, #8]
   33a78:	2b03      	cmp	r3, #3
   33a7a:	f000 8269 	beq.w	33f50 <pdn_interface_pdn_id_get+0x634>
   33a7e:	68e3      	ldr	r3, [r4, #12]
   33a80:	b11b      	cbz	r3, 33a8a <pdn_interface_pdn_id_get+0x16e>
   33a82:	689e      	ldr	r6, [r3, #8]
   33a84:	2e03      	cmp	r6, #3
   33a86:	f000 80ec 	beq.w	33c62 <pdn_interface_pdn_id_get+0x346>
   33a8a:	6923      	ldr	r3, [r4, #16]
   33a8c:	b11b      	cbz	r3, 33a96 <pdn_interface_pdn_id_get+0x17a>
   33a8e:	689b      	ldr	r3, [r3, #8]
   33a90:	2b03      	cmp	r3, #3
   33a92:	f000 814a 	beq.w	33d2a <pdn_interface_pdn_id_get+0x40e>
   33a96:	6963      	ldr	r3, [r4, #20]
   33a98:	b11b      	cbz	r3, 33aa2 <pdn_interface_pdn_id_get+0x186>
   33a9a:	689b      	ldr	r3, [r3, #8]
   33a9c:	2b03      	cmp	r3, #3
   33a9e:	f000 815e 	beq.w	33d5e <pdn_interface_pdn_id_get+0x442>
   33aa2:	69a3      	ldr	r3, [r4, #24]
   33aa4:	b11b      	cbz	r3, 33aae <pdn_interface_pdn_id_get+0x192>
   33aa6:	689b      	ldr	r3, [r3, #8]
   33aa8:	2b03      	cmp	r3, #3
   33aaa:	f000 8172 	beq.w	33d92 <pdn_interface_pdn_id_get+0x476>
   33aae:	69e3      	ldr	r3, [r4, #28]
   33ab0:	b11b      	cbz	r3, 33aba <pdn_interface_pdn_id_get+0x19e>
   33ab2:	689b      	ldr	r3, [r3, #8]
   33ab4:	2b03      	cmp	r3, #3
   33ab6:	f000 821b 	beq.w	33ef0 <pdn_interface_pdn_id_get+0x5d4>
   33aba:	6a23      	ldr	r3, [r4, #32]
   33abc:	b11b      	cbz	r3, 33ac6 <pdn_interface_pdn_id_get+0x1aa>
   33abe:	689b      	ldr	r3, [r3, #8]
   33ac0:	2b03      	cmp	r3, #3
   33ac2:	f000 822d 	beq.w	33f20 <pdn_interface_pdn_id_get+0x604>
   33ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   33ac8:	2b00      	cmp	r3, #0
   33aca:	f43f af70 	beq.w	339ae <pdn_interface_pdn_id_get+0x92>
   33ace:	689b      	ldr	r3, [r3, #8]
   33ad0:	2b03      	cmp	r3, #3
   33ad2:	f47f af6c 	bne.w	339ae <pdn_interface_pdn_id_get+0x92>
   33ad6:	4628      	mov	r0, r5
   33ad8:	f7e9 fb24 	bl	1d124 <strlen>
   33adc:	4606      	mov	r6, r0
   33ade:	6a60      	ldr	r0, [r4, #36]	; 0x24
   33ae0:	300c      	adds	r0, #12
   33ae2:	f7e9 fb1f 	bl	1d124 <strlen>
   33ae6:	4286      	cmp	r6, r0
   33ae8:	f47f af61 	bne.w	339ae <pdn_interface_pdn_id_get+0x92>
   33aec:	6a61      	ldr	r1, [r4, #36]	; 0x24
   33aee:	4628      	mov	r0, r5
   33af0:	310c      	adds	r1, #12
   33af2:	f7e9 fb0d 	bl	1d110 <strcmp>
   33af6:	2800      	cmp	r0, #0
   33af8:	f47f af59 	bne.w	339ae <pdn_interface_pdn_id_get+0x92>
   33afc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   33afe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   33b00:	07d2      	lsls	r2, r2, #31
   33b02:	f57f af54 	bpl.w	339ae <pdn_interface_pdn_id_get+0x92>
   33b06:	e7a7      	b.n	33a58 <pdn_interface_pdn_id_get+0x13c>
   33b08:	4628      	mov	r0, r5
   33b0a:	f7e9 fb0b 	bl	1d124 <strlen>
   33b0e:	4606      	mov	r6, r0
   33b10:	6a60      	ldr	r0, [r4, #36]	; 0x24
   33b12:	300c      	adds	r0, #12
   33b14:	f7e9 fb06 	bl	1d124 <strlen>
   33b18:	42b0      	cmp	r0, r6
   33b1a:	f47f af48 	bne.w	339ae <pdn_interface_pdn_id_get+0x92>
   33b1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   33b20:	4628      	mov	r0, r5
   33b22:	310c      	adds	r1, #12
   33b24:	f7e9 faf4 	bl	1d110 <strcmp>
   33b28:	e741      	b.n	339ae <pdn_interface_pdn_id_get+0x92>
   33b2a:	4628      	mov	r0, r5
   33b2c:	f7e9 fafa 	bl	1d124 <strlen>
   33b30:	4606      	mov	r6, r0
   33b32:	68e0      	ldr	r0, [r4, #12]
   33b34:	300c      	adds	r0, #12
   33b36:	f7e9 faf5 	bl	1d124 <strlen>
   33b3a:	4286      	cmp	r6, r0
   33b3c:	f47f af13 	bne.w	33966 <pdn_interface_pdn_id_get+0x4a>
   33b40:	68e1      	ldr	r1, [r4, #12]
   33b42:	4628      	mov	r0, r5
   33b44:	310c      	adds	r1, #12
   33b46:	f7e9 fae3 	bl	1d110 <strcmp>
   33b4a:	e70c      	b.n	33966 <pdn_interface_pdn_id_get+0x4a>
   33b4c:	4628      	mov	r0, r5
   33b4e:	f7e9 fae9 	bl	1d124 <strlen>
   33b52:	4606      	mov	r6, r0
   33b54:	68a0      	ldr	r0, [r4, #8]
   33b56:	300c      	adds	r0, #12
   33b58:	f7e9 fae4 	bl	1d124 <strlen>
   33b5c:	4286      	cmp	r6, r0
   33b5e:	f47f aefc 	bne.w	3395a <pdn_interface_pdn_id_get+0x3e>
   33b62:	68a1      	ldr	r1, [r4, #8]
   33b64:	4628      	mov	r0, r5
   33b66:	310c      	adds	r1, #12
   33b68:	f7e9 fad2 	bl	1d110 <strcmp>
   33b6c:	e6f5      	b.n	3395a <pdn_interface_pdn_id_get+0x3e>
   33b6e:	4628      	mov	r0, r5
   33b70:	f7e9 fad8 	bl	1d124 <strlen>
   33b74:	4606      	mov	r6, r0
   33b76:	6860      	ldr	r0, [r4, #4]
   33b78:	300c      	adds	r0, #12
   33b7a:	f7e9 fad3 	bl	1d124 <strlen>
   33b7e:	4286      	cmp	r6, r0
   33b80:	f47f aee5 	bne.w	3394e <pdn_interface_pdn_id_get+0x32>
   33b84:	6861      	ldr	r1, [r4, #4]
   33b86:	4628      	mov	r0, r5
   33b88:	310c      	adds	r1, #12
   33b8a:	f7e9 fac1 	bl	1d110 <strcmp>
   33b8e:	e6de      	b.n	3394e <pdn_interface_pdn_id_get+0x32>
   33b90:	4608      	mov	r0, r1
   33b92:	f7e9 fac7 	bl	1d124 <strlen>
   33b96:	4606      	mov	r6, r0
   33b98:	6820      	ldr	r0, [r4, #0]
   33b9a:	300c      	adds	r0, #12
   33b9c:	f7e9 fac2 	bl	1d124 <strlen>
   33ba0:	4286      	cmp	r6, r0
   33ba2:	f47f aece 	bne.w	33942 <pdn_interface_pdn_id_get+0x26>
   33ba6:	6821      	ldr	r1, [r4, #0]
   33ba8:	4628      	mov	r0, r5
   33baa:	310c      	adds	r1, #12
   33bac:	f7e9 fab0 	bl	1d110 <strcmp>
   33bb0:	e6c7      	b.n	33942 <pdn_interface_pdn_id_get+0x26>
   33bb2:	bf00      	nop
   33bb4:	20024e70 	.word	0x20024e70
   33bb8:	4628      	mov	r0, r5
   33bba:	f7e9 fab3 	bl	1d124 <strlen>
   33bbe:	4606      	mov	r6, r0
   33bc0:	6920      	ldr	r0, [r4, #16]
   33bc2:	300c      	adds	r0, #12
   33bc4:	f7e9 faae 	bl	1d124 <strlen>
   33bc8:	4286      	cmp	r6, r0
   33bca:	f47f aed2 	bne.w	33972 <pdn_interface_pdn_id_get+0x56>
   33bce:	6921      	ldr	r1, [r4, #16]
   33bd0:	4628      	mov	r0, r5
   33bd2:	310c      	adds	r1, #12
   33bd4:	f7e9 fa9c 	bl	1d110 <strcmp>
   33bd8:	e6cb      	b.n	33972 <pdn_interface_pdn_id_get+0x56>
   33bda:	4628      	mov	r0, r5
   33bdc:	f7e9 faa2 	bl	1d124 <strlen>
   33be0:	4606      	mov	r6, r0
   33be2:	6a20      	ldr	r0, [r4, #32]
   33be4:	300c      	adds	r0, #12
   33be6:	f7e9 fa9d 	bl	1d124 <strlen>
   33bea:	4286      	cmp	r6, r0
   33bec:	f47f aed9 	bne.w	339a2 <pdn_interface_pdn_id_get+0x86>
   33bf0:	6a21      	ldr	r1, [r4, #32]
   33bf2:	4628      	mov	r0, r5
   33bf4:	310c      	adds	r1, #12
   33bf6:	f7e9 fa8b 	bl	1d110 <strcmp>
   33bfa:	e6d2      	b.n	339a2 <pdn_interface_pdn_id_get+0x86>
   33bfc:	4628      	mov	r0, r5
   33bfe:	f7e9 fa91 	bl	1d124 <strlen>
   33c02:	4606      	mov	r6, r0
   33c04:	69e0      	ldr	r0, [r4, #28]
   33c06:	300c      	adds	r0, #12
   33c08:	f7e9 fa8c 	bl	1d124 <strlen>
   33c0c:	4286      	cmp	r6, r0
   33c0e:	f47f aec2 	bne.w	33996 <pdn_interface_pdn_id_get+0x7a>
   33c12:	69e1      	ldr	r1, [r4, #28]
   33c14:	4628      	mov	r0, r5
   33c16:	310c      	adds	r1, #12
   33c18:	f7e9 fa7a 	bl	1d110 <strcmp>
   33c1c:	e6bb      	b.n	33996 <pdn_interface_pdn_id_get+0x7a>
   33c1e:	4628      	mov	r0, r5
   33c20:	f7e9 fa80 	bl	1d124 <strlen>
   33c24:	4606      	mov	r6, r0
   33c26:	69a0      	ldr	r0, [r4, #24]
   33c28:	300c      	adds	r0, #12
   33c2a:	f7e9 fa7b 	bl	1d124 <strlen>
   33c2e:	4286      	cmp	r6, r0
   33c30:	f47f aeab 	bne.w	3398a <pdn_interface_pdn_id_get+0x6e>
   33c34:	69a1      	ldr	r1, [r4, #24]
   33c36:	4628      	mov	r0, r5
   33c38:	310c      	adds	r1, #12
   33c3a:	f7e9 fa69 	bl	1d110 <strcmp>
   33c3e:	e6a4      	b.n	3398a <pdn_interface_pdn_id_get+0x6e>
   33c40:	4628      	mov	r0, r5
   33c42:	f7e9 fa6f 	bl	1d124 <strlen>
   33c46:	4606      	mov	r6, r0
   33c48:	6960      	ldr	r0, [r4, #20]
   33c4a:	300c      	adds	r0, #12
   33c4c:	f7e9 fa6a 	bl	1d124 <strlen>
   33c50:	4286      	cmp	r6, r0
   33c52:	f47f ae94 	bne.w	3397e <pdn_interface_pdn_id_get+0x62>
   33c56:	6961      	ldr	r1, [r4, #20]
   33c58:	4628      	mov	r0, r5
   33c5a:	310c      	adds	r1, #12
   33c5c:	f7e9 fa58 	bl	1d110 <strcmp>
   33c60:	e68d      	b.n	3397e <pdn_interface_pdn_id_get+0x62>
   33c62:	4628      	mov	r0, r5
   33c64:	f7e9 fa5e 	bl	1d124 <strlen>
   33c68:	4607      	mov	r7, r0
   33c6a:	68e0      	ldr	r0, [r4, #12]
   33c6c:	300c      	adds	r0, #12
   33c6e:	f7e9 fa59 	bl	1d124 <strlen>
   33c72:	4287      	cmp	r7, r0
   33c74:	f47f af09 	bne.w	33a8a <pdn_interface_pdn_id_get+0x16e>
   33c78:	68e1      	ldr	r1, [r4, #12]
   33c7a:	4628      	mov	r0, r5
   33c7c:	310c      	adds	r1, #12
   33c7e:	f7e9 fa47 	bl	1d110 <strcmp>
   33c82:	2800      	cmp	r0, #0
   33c84:	f47f af01 	bne.w	33a8a <pdn_interface_pdn_id_get+0x16e>
   33c88:	68e3      	ldr	r3, [r4, #12]
   33c8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   33c8c:	07d1      	lsls	r1, r2, #31
   33c8e:	f57f aefc 	bpl.w	33a8a <pdn_interface_pdn_id_get+0x16e>
   33c92:	6858      	ldr	r0, [r3, #4]
   33c94:	1c43      	adds	r3, r0, #1
   33c96:	f47f ae8c 	bne.w	339b2 <pdn_interface_pdn_id_get+0x96>
   33c9a:	4dc6      	ldr	r5, [pc, #792]	; (33fb4 <pdn_interface_pdn_id_get+0x698>)
   33c9c:	4ac6      	ldr	r2, [pc, #792]	; (33fb8 <pdn_interface_pdn_id_get+0x69c>)
   33c9e:	f44f 7180 	mov.w	r1, #256	; 0x100
   33ca2:	4628      	mov	r0, r5
   33ca4:	f008 fa98 	bl	3c1d8 <sniprintf>
   33ca8:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   33cac:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   33cb0:	681b      	ldr	r3, [r3, #0]
   33cb2:	4ac2      	ldr	r2, [pc, #776]	; (33fbc <pdn_interface_pdn_id_get+0x6a0>)
   33cb4:	4428      	add	r0, r5
   33cb6:	f8df 830c 	ldr.w	r8, [pc, #780]	; 33fc4 <pdn_interface_pdn_id_get+0x6a8>
   33cba:	f008 fa8d 	bl	3c1d8 <sniprintf>
   33cbe:	4628      	mov	r0, r5
   33cc0:	f8d8 9000 	ldr.w	r9, [r8]
   33cc4:	2700      	movs	r7, #0
   33cc6:	f7e9 fa2d 	bl	1d124 <strlen>
   33cca:	4629      	mov	r1, r5
   33ccc:	4602      	mov	r2, r0
   33cce:	463b      	mov	r3, r7
   33cd0:	4648      	mov	r0, r9
   33cd2:	9701      	str	r7, [sp, #4]
   33cd4:	9700      	str	r7, [sp, #0]
   33cd6:	f7fc f89d 	bl	2fe14 <at_interface_write>
   33cda:	4681      	mov	r9, r0
   33cdc:	4628      	mov	r0, r5
   33cde:	f7e9 fa21 	bl	1d124 <strlen>
   33ce2:	4548      	cmp	r0, r9
   33ce4:	f040 81e9 	bne.w	340ba <pdn_interface_pdn_id_get+0x79e>
   33ce8:	463b      	mov	r3, r7
   33cea:	f44f 7280 	mov.w	r2, #256	; 0x100
   33cee:	e9cd 7700 	strd	r7, r7, [sp]
   33cf2:	4629      	mov	r1, r5
   33cf4:	f8d8 0000 	ldr.w	r0, [r8]
   33cf8:	f7fc f990 	bl	3001c <at_interface_read>
   33cfc:	4607      	mov	r7, r0
   33cfe:	48b0      	ldr	r0, [pc, #704]	; (33fc0 <pdn_interface_pdn_id_get+0x6a4>)
   33d00:	f7e9 fa10 	bl	1d124 <strlen>
   33d04:	4287      	cmp	r7, r0
   33d06:	4602      	mov	r2, r0
   33d08:	f2c0 81c7 	blt.w	3409a <pdn_interface_pdn_id_get+0x77e>
   33d0c:	4629      	mov	r1, r5
   33d0e:	48ac      	ldr	r0, [pc, #688]	; (33fc0 <pdn_interface_pdn_id_get+0x6a4>)
   33d10:	f00c fe7d 	bl	40a0e <strncmp>
   33d14:	2800      	cmp	r0, #0
   33d16:	f040 81c0 	bne.w	3409a <pdn_interface_pdn_id_get+0x77e>
   33d1a:	4629      	mov	r1, r5
   33d1c:	4630      	mov	r0, r6
   33d1e:	f7ff f937 	bl	32f90 <pdn_id_get_parser>
   33d22:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   33d26:	6858      	ldr	r0, [r3, #4]
   33d28:	e643      	b.n	339b2 <pdn_interface_pdn_id_get+0x96>
   33d2a:	4628      	mov	r0, r5
   33d2c:	f7e9 f9fa 	bl	1d124 <strlen>
   33d30:	4606      	mov	r6, r0
   33d32:	6920      	ldr	r0, [r4, #16]
   33d34:	300c      	adds	r0, #12
   33d36:	f7e9 f9f5 	bl	1d124 <strlen>
   33d3a:	4286      	cmp	r6, r0
   33d3c:	f47f aeab 	bne.w	33a96 <pdn_interface_pdn_id_get+0x17a>
   33d40:	6921      	ldr	r1, [r4, #16]
   33d42:	4628      	mov	r0, r5
   33d44:	310c      	adds	r1, #12
   33d46:	f7e9 f9e3 	bl	1d110 <strcmp>
   33d4a:	2800      	cmp	r0, #0
   33d4c:	f47f aea3 	bne.w	33a96 <pdn_interface_pdn_id_get+0x17a>
   33d50:	6923      	ldr	r3, [r4, #16]
   33d52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   33d54:	07d2      	lsls	r2, r2, #31
   33d56:	f57f ae9e 	bpl.w	33a96 <pdn_interface_pdn_id_get+0x17a>
   33d5a:	2604      	movs	r6, #4
   33d5c:	e799      	b.n	33c92 <pdn_interface_pdn_id_get+0x376>
   33d5e:	4628      	mov	r0, r5
   33d60:	f7e9 f9e0 	bl	1d124 <strlen>
   33d64:	4606      	mov	r6, r0
   33d66:	6960      	ldr	r0, [r4, #20]
   33d68:	300c      	adds	r0, #12
   33d6a:	f7e9 f9db 	bl	1d124 <strlen>
   33d6e:	4286      	cmp	r6, r0
   33d70:	f47f ae97 	bne.w	33aa2 <pdn_interface_pdn_id_get+0x186>
   33d74:	6961      	ldr	r1, [r4, #20]
   33d76:	4628      	mov	r0, r5
   33d78:	310c      	adds	r1, #12
   33d7a:	f7e9 f9c9 	bl	1d110 <strcmp>
   33d7e:	2800      	cmp	r0, #0
   33d80:	f47f ae8f 	bne.w	33aa2 <pdn_interface_pdn_id_get+0x186>
   33d84:	6963      	ldr	r3, [r4, #20]
   33d86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   33d88:	07d7      	lsls	r7, r2, #31
   33d8a:	f57f ae8a 	bpl.w	33aa2 <pdn_interface_pdn_id_get+0x186>
   33d8e:	2605      	movs	r6, #5
   33d90:	e77f      	b.n	33c92 <pdn_interface_pdn_id_get+0x376>
   33d92:	4628      	mov	r0, r5
   33d94:	f7e9 f9c6 	bl	1d124 <strlen>
   33d98:	4606      	mov	r6, r0
   33d9a:	69a0      	ldr	r0, [r4, #24]
   33d9c:	300c      	adds	r0, #12
   33d9e:	f7e9 f9c1 	bl	1d124 <strlen>
   33da2:	4286      	cmp	r6, r0
   33da4:	f47f ae83 	bne.w	33aae <pdn_interface_pdn_id_get+0x192>
   33da8:	69a1      	ldr	r1, [r4, #24]
   33daa:	4628      	mov	r0, r5
   33dac:	310c      	adds	r1, #12
   33dae:	f7e9 f9af 	bl	1d110 <strcmp>
   33db2:	2800      	cmp	r0, #0
   33db4:	f47f ae7b 	bne.w	33aae <pdn_interface_pdn_id_get+0x192>
   33db8:	69a3      	ldr	r3, [r4, #24]
   33dba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   33dbc:	07d6      	lsls	r6, r2, #31
   33dbe:	f57f ae76 	bpl.w	33aae <pdn_interface_pdn_id_get+0x192>
   33dc2:	2606      	movs	r6, #6
   33dc4:	e765      	b.n	33c92 <pdn_interface_pdn_id_get+0x376>
   33dc6:	4628      	mov	r0, r5
   33dc8:	f7e9 f9ac 	bl	1d124 <strlen>
   33dcc:	4607      	mov	r7, r0
   33dce:	68e0      	ldr	r0, [r4, #12]
   33dd0:	300c      	adds	r0, #12
   33dd2:	f7e9 f9a7 	bl	1d124 <strlen>
   33dd6:	4287      	cmp	r7, r0
   33dd8:	f47f ae05 	bne.w	339e6 <pdn_interface_pdn_id_get+0xca>
   33ddc:	68e1      	ldr	r1, [r4, #12]
   33dde:	4628      	mov	r0, r5
   33de0:	310c      	adds	r1, #12
   33de2:	f7e9 f995 	bl	1d110 <strcmp>
   33de6:	2800      	cmp	r0, #0
   33de8:	f47f adfd 	bne.w	339e6 <pdn_interface_pdn_id_get+0xca>
   33dec:	68e3      	ldr	r3, [r4, #12]
   33dee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   33df0:	0791      	lsls	r1, r2, #30
   33df2:	f53f af4e 	bmi.w	33c92 <pdn_interface_pdn_id_get+0x376>
   33df6:	e5f6      	b.n	339e6 <pdn_interface_pdn_id_get+0xca>
   33df8:	4628      	mov	r0, r5
   33dfa:	f7e9 f993 	bl	1d124 <strlen>
   33dfe:	4606      	mov	r6, r0
   33e00:	6920      	ldr	r0, [r4, #16]
   33e02:	300c      	adds	r0, #12
   33e04:	f7e9 f98e 	bl	1d124 <strlen>
   33e08:	4286      	cmp	r6, r0
   33e0a:	f47f adf2 	bne.w	339f2 <pdn_interface_pdn_id_get+0xd6>
   33e0e:	6921      	ldr	r1, [r4, #16]
   33e10:	4628      	mov	r0, r5
   33e12:	310c      	adds	r1, #12
   33e14:	f7e9 f97c 	bl	1d110 <strcmp>
   33e18:	2800      	cmp	r0, #0
   33e1a:	f47f adea 	bne.w	339f2 <pdn_interface_pdn_id_get+0xd6>
   33e1e:	6923      	ldr	r3, [r4, #16]
   33e20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   33e22:	0792      	lsls	r2, r2, #30
   33e24:	d499      	bmi.n	33d5a <pdn_interface_pdn_id_get+0x43e>
   33e26:	e5e4      	b.n	339f2 <pdn_interface_pdn_id_get+0xd6>
   33e28:	4628      	mov	r0, r5
   33e2a:	f7e9 f97b 	bl	1d124 <strlen>
   33e2e:	4606      	mov	r6, r0
   33e30:	6960      	ldr	r0, [r4, #20]
   33e32:	300c      	adds	r0, #12
   33e34:	f7e9 f976 	bl	1d124 <strlen>
   33e38:	4286      	cmp	r6, r0
   33e3a:	f47f ade0 	bne.w	339fe <pdn_interface_pdn_id_get+0xe2>
   33e3e:	6961      	ldr	r1, [r4, #20]
   33e40:	4628      	mov	r0, r5
   33e42:	310c      	adds	r1, #12
   33e44:	f7e9 f964 	bl	1d110 <strcmp>
   33e48:	2800      	cmp	r0, #0
   33e4a:	f47f add8 	bne.w	339fe <pdn_interface_pdn_id_get+0xe2>
   33e4e:	6963      	ldr	r3, [r4, #20]
   33e50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   33e52:	0797      	lsls	r7, r2, #30
   33e54:	d49b      	bmi.n	33d8e <pdn_interface_pdn_id_get+0x472>
   33e56:	e5d2      	b.n	339fe <pdn_interface_pdn_id_get+0xe2>
   33e58:	4628      	mov	r0, r5
   33e5a:	f7e9 f963 	bl	1d124 <strlen>
   33e5e:	4606      	mov	r6, r0
   33e60:	69a0      	ldr	r0, [r4, #24]
   33e62:	300c      	adds	r0, #12
   33e64:	f7e9 f95e 	bl	1d124 <strlen>
   33e68:	4286      	cmp	r6, r0
   33e6a:	f47f adce 	bne.w	33a0a <pdn_interface_pdn_id_get+0xee>
   33e6e:	69a1      	ldr	r1, [r4, #24]
   33e70:	4628      	mov	r0, r5
   33e72:	310c      	adds	r1, #12
   33e74:	f7e9 f94c 	bl	1d110 <strcmp>
   33e78:	2800      	cmp	r0, #0
   33e7a:	f47f adc6 	bne.w	33a0a <pdn_interface_pdn_id_get+0xee>
   33e7e:	69a3      	ldr	r3, [r4, #24]
   33e80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   33e82:	0796      	lsls	r6, r2, #30
   33e84:	d49d      	bmi.n	33dc2 <pdn_interface_pdn_id_get+0x4a6>
   33e86:	e5c0      	b.n	33a0a <pdn_interface_pdn_id_get+0xee>
   33e88:	4628      	mov	r0, r5
   33e8a:	f7e9 f94b 	bl	1d124 <strlen>
   33e8e:	4606      	mov	r6, r0
   33e90:	69e0      	ldr	r0, [r4, #28]
   33e92:	300c      	adds	r0, #12
   33e94:	f7e9 f946 	bl	1d124 <strlen>
   33e98:	4286      	cmp	r6, r0
   33e9a:	f47f adbc 	bne.w	33a16 <pdn_interface_pdn_id_get+0xfa>
   33e9e:	69e1      	ldr	r1, [r4, #28]
   33ea0:	4628      	mov	r0, r5
   33ea2:	310c      	adds	r1, #12
   33ea4:	f7e9 f934 	bl	1d110 <strcmp>
   33ea8:	2800      	cmp	r0, #0
   33eaa:	f47f adb4 	bne.w	33a16 <pdn_interface_pdn_id_get+0xfa>
   33eae:	69e3      	ldr	r3, [r4, #28]
   33eb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   33eb2:	0790      	lsls	r0, r2, #30
   33eb4:	f57f adaf 	bpl.w	33a16 <pdn_interface_pdn_id_get+0xfa>
   33eb8:	2607      	movs	r6, #7
   33eba:	e6ea      	b.n	33c92 <pdn_interface_pdn_id_get+0x376>
   33ebc:	4628      	mov	r0, r5
   33ebe:	f7e9 f931 	bl	1d124 <strlen>
   33ec2:	4606      	mov	r6, r0
   33ec4:	6a20      	ldr	r0, [r4, #32]
   33ec6:	300c      	adds	r0, #12
   33ec8:	f7e9 f92c 	bl	1d124 <strlen>
   33ecc:	4286      	cmp	r6, r0
   33ece:	f47f ada8 	bne.w	33a22 <pdn_interface_pdn_id_get+0x106>
   33ed2:	6a21      	ldr	r1, [r4, #32]
   33ed4:	4628      	mov	r0, r5
   33ed6:	310c      	adds	r1, #12
   33ed8:	f7e9 f91a 	bl	1d110 <strcmp>
   33edc:	2800      	cmp	r0, #0
   33ede:	f47f ada0 	bne.w	33a22 <pdn_interface_pdn_id_get+0x106>
   33ee2:	6a23      	ldr	r3, [r4, #32]
   33ee4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   33ee6:	0791      	lsls	r1, r2, #30
   33ee8:	f57f ad9b 	bpl.w	33a22 <pdn_interface_pdn_id_get+0x106>
   33eec:	2608      	movs	r6, #8
   33eee:	e6d0      	b.n	33c92 <pdn_interface_pdn_id_get+0x376>
   33ef0:	4628      	mov	r0, r5
   33ef2:	f7e9 f917 	bl	1d124 <strlen>
   33ef6:	4606      	mov	r6, r0
   33ef8:	69e0      	ldr	r0, [r4, #28]
   33efa:	300c      	adds	r0, #12
   33efc:	f7e9 f912 	bl	1d124 <strlen>
   33f00:	4286      	cmp	r6, r0
   33f02:	f47f adda 	bne.w	33aba <pdn_interface_pdn_id_get+0x19e>
   33f06:	69e1      	ldr	r1, [r4, #28]
   33f08:	4628      	mov	r0, r5
   33f0a:	310c      	adds	r1, #12
   33f0c:	f7e9 f900 	bl	1d110 <strcmp>
   33f10:	2800      	cmp	r0, #0
   33f12:	f47f add2 	bne.w	33aba <pdn_interface_pdn_id_get+0x19e>
   33f16:	69e3      	ldr	r3, [r4, #28]
   33f18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   33f1a:	07d0      	lsls	r0, r2, #31
   33f1c:	d4cc      	bmi.n	33eb8 <pdn_interface_pdn_id_get+0x59c>
   33f1e:	e5cc      	b.n	33aba <pdn_interface_pdn_id_get+0x19e>
   33f20:	4628      	mov	r0, r5
   33f22:	f7e9 f8ff 	bl	1d124 <strlen>
   33f26:	4606      	mov	r6, r0
   33f28:	6a20      	ldr	r0, [r4, #32]
   33f2a:	300c      	adds	r0, #12
   33f2c:	f7e9 f8fa 	bl	1d124 <strlen>
   33f30:	4286      	cmp	r6, r0
   33f32:	f47f adc8 	bne.w	33ac6 <pdn_interface_pdn_id_get+0x1aa>
   33f36:	6a21      	ldr	r1, [r4, #32]
   33f38:	4628      	mov	r0, r5
   33f3a:	310c      	adds	r1, #12
   33f3c:	f7e9 f8e8 	bl	1d110 <strcmp>
   33f40:	2800      	cmp	r0, #0
   33f42:	f47f adc0 	bne.w	33ac6 <pdn_interface_pdn_id_get+0x1aa>
   33f46:	6a23      	ldr	r3, [r4, #32]
   33f48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   33f4a:	07d1      	lsls	r1, r2, #31
   33f4c:	d4ce      	bmi.n	33eec <pdn_interface_pdn_id_get+0x5d0>
   33f4e:	e5ba      	b.n	33ac6 <pdn_interface_pdn_id_get+0x1aa>
   33f50:	4628      	mov	r0, r5
   33f52:	f7e9 f8e7 	bl	1d124 <strlen>
   33f56:	4606      	mov	r6, r0
   33f58:	68a0      	ldr	r0, [r4, #8]
   33f5a:	300c      	adds	r0, #12
   33f5c:	f7e9 f8e2 	bl	1d124 <strlen>
   33f60:	4286      	cmp	r6, r0
   33f62:	f47f ad8c 	bne.w	33a7e <pdn_interface_pdn_id_get+0x162>
   33f66:	68a1      	ldr	r1, [r4, #8]
   33f68:	4628      	mov	r0, r5
   33f6a:	310c      	adds	r1, #12
   33f6c:	f7e9 f8d0 	bl	1d110 <strcmp>
   33f70:	2800      	cmp	r0, #0
   33f72:	f47f ad84 	bne.w	33a7e <pdn_interface_pdn_id_get+0x162>
   33f76:	68a3      	ldr	r3, [r4, #8]
   33f78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   33f7a:	07d0      	lsls	r0, r2, #31
   33f7c:	f57f ad7f 	bpl.w	33a7e <pdn_interface_pdn_id_get+0x162>
   33f80:	2602      	movs	r6, #2
   33f82:	e686      	b.n	33c92 <pdn_interface_pdn_id_get+0x376>
   33f84:	4628      	mov	r0, r5
   33f86:	f7e9 f8cd 	bl	1d124 <strlen>
   33f8a:	4606      	mov	r6, r0
   33f8c:	68a0      	ldr	r0, [r4, #8]
   33f8e:	300c      	adds	r0, #12
   33f90:	f7e9 f8c8 	bl	1d124 <strlen>
   33f94:	4286      	cmp	r6, r0
   33f96:	f47f ad20 	bne.w	339da <pdn_interface_pdn_id_get+0xbe>
   33f9a:	68a1      	ldr	r1, [r4, #8]
   33f9c:	4628      	mov	r0, r5
   33f9e:	310c      	adds	r1, #12
   33fa0:	f7e9 f8b6 	bl	1d110 <strcmp>
   33fa4:	2800      	cmp	r0, #0
   33fa6:	f47f ad18 	bne.w	339da <pdn_interface_pdn_id_get+0xbe>
   33faa:	68a3      	ldr	r3, [r4, #8]
   33fac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   33fae:	0790      	lsls	r0, r2, #30
   33fb0:	d4e6      	bmi.n	33f80 <pdn_interface_pdn_id_get+0x664>
   33fb2:	e512      	b.n	339da <pdn_interface_pdn_id_get+0xbe>
   33fb4:	20024d70 	.word	0x20024d70
   33fb8:	00042880 	.word	0x00042880
   33fbc:	0004287c 	.word	0x0004287c
   33fc0:	00042890 	.word	0x00042890
   33fc4:	20024d6c 	.word	0x20024d6c
   33fc8:	4628      	mov	r0, r5
   33fca:	f7e9 f8ab 	bl	1d124 <strlen>
   33fce:	4606      	mov	r6, r0
   33fd0:	6860      	ldr	r0, [r4, #4]
   33fd2:	300c      	adds	r0, #12
   33fd4:	f7e9 f8a6 	bl	1d124 <strlen>
   33fd8:	4286      	cmp	r6, r0
   33fda:	f47f acf8 	bne.w	339ce <pdn_interface_pdn_id_get+0xb2>
   33fde:	6861      	ldr	r1, [r4, #4]
   33fe0:	4628      	mov	r0, r5
   33fe2:	310c      	adds	r1, #12
   33fe4:	f7e9 f894 	bl	1d110 <strcmp>
   33fe8:	2800      	cmp	r0, #0
   33fea:	f47f acf0 	bne.w	339ce <pdn_interface_pdn_id_get+0xb2>
   33fee:	6863      	ldr	r3, [r4, #4]
   33ff0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   33ff2:	0796      	lsls	r6, r2, #30
   33ff4:	f57f aceb 	bpl.w	339ce <pdn_interface_pdn_id_get+0xb2>
   33ff8:	2601      	movs	r6, #1
   33ffa:	e64a      	b.n	33c92 <pdn_interface_pdn_id_get+0x376>
   33ffc:	4628      	mov	r0, r5
   33ffe:	f7e9 f891 	bl	1d124 <strlen>
   34002:	4606      	mov	r6, r0
   34004:	6860      	ldr	r0, [r4, #4]
   34006:	300c      	adds	r0, #12
   34008:	f7e9 f88c 	bl	1d124 <strlen>
   3400c:	4286      	cmp	r6, r0
   3400e:	f47f ad30 	bne.w	33a72 <pdn_interface_pdn_id_get+0x156>
   34012:	6861      	ldr	r1, [r4, #4]
   34014:	4628      	mov	r0, r5
   34016:	310c      	adds	r1, #12
   34018:	f7e9 f87a 	bl	1d110 <strcmp>
   3401c:	2800      	cmp	r0, #0
   3401e:	f47f ad28 	bne.w	33a72 <pdn_interface_pdn_id_get+0x156>
   34022:	6863      	ldr	r3, [r4, #4]
   34024:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   34026:	07d6      	lsls	r6, r2, #31
   34028:	d4e6      	bmi.n	33ff8 <pdn_interface_pdn_id_get+0x6dc>
   3402a:	e522      	b.n	33a72 <pdn_interface_pdn_id_get+0x156>
   3402c:	4608      	mov	r0, r1
   3402e:	f7e9 f879 	bl	1d124 <strlen>
   34032:	4606      	mov	r6, r0
   34034:	6820      	ldr	r0, [r4, #0]
   34036:	300c      	adds	r0, #12
   34038:	f7e9 f874 	bl	1d124 <strlen>
   3403c:	4286      	cmp	r6, r0
   3403e:	f47f acc0 	bne.w	339c2 <pdn_interface_pdn_id_get+0xa6>
   34042:	6821      	ldr	r1, [r4, #0]
   34044:	4628      	mov	r0, r5
   34046:	310c      	adds	r1, #12
   34048:	f7e9 f862 	bl	1d110 <strcmp>
   3404c:	4606      	mov	r6, r0
   3404e:	2800      	cmp	r0, #0
   34050:	f47f acb7 	bne.w	339c2 <pdn_interface_pdn_id_get+0xa6>
   34054:	6823      	ldr	r3, [r4, #0]
   34056:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   34058:	0797      	lsls	r7, r2, #30
   3405a:	f53f ae1a 	bmi.w	33c92 <pdn_interface_pdn_id_get+0x376>
   3405e:	e4b0      	b.n	339c2 <pdn_interface_pdn_id_get+0xa6>
   34060:	4608      	mov	r0, r1
   34062:	f7e9 f85f 	bl	1d124 <strlen>
   34066:	4606      	mov	r6, r0
   34068:	6820      	ldr	r0, [r4, #0]
   3406a:	300c      	adds	r0, #12
   3406c:	f7e9 f85a 	bl	1d124 <strlen>
   34070:	4286      	cmp	r6, r0
   34072:	f47f acf8 	bne.w	33a66 <pdn_interface_pdn_id_get+0x14a>
   34076:	6821      	ldr	r1, [r4, #0]
   34078:	4628      	mov	r0, r5
   3407a:	310c      	adds	r1, #12
   3407c:	f7e9 f848 	bl	1d110 <strcmp>
   34080:	4606      	mov	r6, r0
   34082:	2800      	cmp	r0, #0
   34084:	f47f acef 	bne.w	33a66 <pdn_interface_pdn_id_get+0x14a>
   34088:	6823      	ldr	r3, [r4, #0]
   3408a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   3408c:	07d7      	lsls	r7, r2, #31
   3408e:	f53f ae00 	bmi.w	33c92 <pdn_interface_pdn_id_get+0x376>
   34092:	e4e8      	b.n	33a66 <pdn_interface_pdn_id_get+0x14a>
   34094:	f04f 30ff 	mov.w	r0, #4294967295
   34098:	4770      	bx	lr
   3409a:	480b      	ldr	r0, [pc, #44]	; (340c8 <pdn_interface_pdn_id_get+0x7ac>)
   3409c:	f7e9 f842 	bl	1d124 <strlen>
   340a0:	490a      	ldr	r1, [pc, #40]	; (340cc <pdn_interface_pdn_id_get+0x7b0>)
   340a2:	4602      	mov	r2, r0
   340a4:	4808      	ldr	r0, [pc, #32]	; (340c8 <pdn_interface_pdn_id_get+0x7ac>)
   340a6:	f00c fcb2 	bl	40a0e <strncmp>
   340aa:	b930      	cbnz	r0, 340ba <pdn_interface_pdn_id_get+0x79e>
   340ac:	2008      	movs	r0, #8
   340ae:	f7f2 ffd3 	bl	27058 <bsd_os_errno_set>
   340b2:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   340b6:	6858      	ldr	r0, [r3, #4]
   340b8:	e47b      	b.n	339b2 <pdn_interface_pdn_id_get+0x96>
   340ba:	2005      	movs	r0, #5
   340bc:	f7f2 ffcc 	bl	27058 <bsd_os_errno_set>
   340c0:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   340c4:	6858      	ldr	r0, [r3, #4]
   340c6:	e474      	b.n	339b2 <pdn_interface_pdn_id_get+0x96>
   340c8:	000428d4 	.word	0x000428d4
   340cc:	20024d70 	.word	0x20024d70

000340d0 <linked_list_init>:
   340d0:	b128      	cbz	r0, 340de <linked_list_init+0xe>
   340d2:	2300      	movs	r3, #0
   340d4:	6003      	str	r3, [r0, #0]
   340d6:	e9c0 3301 	strd	r3, r3, [r0, #4]
   340da:	4618      	mov	r0, r3
   340dc:	4770      	bx	lr
   340de:	2007      	movs	r0, #7
   340e0:	4770      	bx	lr
   340e2:	bf00      	nop

000340e4 <linked_list_push>:
   340e4:	6802      	ldr	r2, [r0, #0]
   340e6:	4603      	mov	r3, r0
   340e8:	3201      	adds	r2, #1
   340ea:	d00e      	beq.n	3410a <linked_list_push+0x26>
   340ec:	2200      	movs	r2, #0
   340ee:	600a      	str	r2, [r1, #0]
   340f0:	6802      	ldr	r2, [r0, #0]
   340f2:	b13a      	cbz	r2, 34104 <linked_list_push+0x20>
   340f4:	6882      	ldr	r2, [r0, #8]
   340f6:	6011      	str	r1, [r2, #0]
   340f8:	6081      	str	r1, [r0, #8]
   340fa:	681a      	ldr	r2, [r3, #0]
   340fc:	2000      	movs	r0, #0
   340fe:	3201      	adds	r2, #1
   34100:	601a      	str	r2, [r3, #0]
   34102:	4770      	bx	lr
   34104:	e9c0 1101 	strd	r1, r1, [r0, #4]
   34108:	e7f7      	b.n	340fa <linked_list_push+0x16>
   3410a:	2004      	movs	r0, #4
   3410c:	4770      	bx	lr
   3410e:	bf00      	nop

00034110 <linked_list_pop>:
   34110:	4603      	mov	r3, r0
   34112:	6800      	ldr	r0, [r0, #0]
   34114:	b128      	cbz	r0, 34122 <linked_list_pop+0x12>
   34116:	6858      	ldr	r0, [r3, #4]
   34118:	681a      	ldr	r2, [r3, #0]
   3411a:	6801      	ldr	r1, [r0, #0]
   3411c:	3a01      	subs	r2, #1
   3411e:	6059      	str	r1, [r3, #4]
   34120:	601a      	str	r2, [r3, #0]
   34122:	4770      	bx	lr

00034124 <linked_list_peek>:
   34124:	6803      	ldr	r3, [r0, #0]
   34126:	b10b      	cbz	r3, 3412c <linked_list_peek+0x8>
   34128:	6840      	ldr	r0, [r0, #4]
   3412a:	4770      	bx	lr
   3412c:	4618      	mov	r0, r3
   3412e:	4770      	bx	lr

00034130 <linked_list_size_get>:
   34130:	6800      	ldr	r0, [r0, #0]
   34132:	4770      	bx	lr

00034134 <linked_list_get_next>:
   34134:	6800      	ldr	r0, [r0, #0]
   34136:	4770      	bx	lr

00034138 <nrf_socket>:
   34138:	b570      	push	{r4, r5, r6, lr}
   3413a:	4604      	mov	r4, r0
   3413c:	460d      	mov	r5, r1
   3413e:	4616      	mov	r6, r2
   34140:	f7fd fcd8 	bl	31af4 <bsd_platform_af_method_table_get>
   34144:	b130      	cbz	r0, 34154 <nrf_socket+0x1c>
   34146:	6803      	ldr	r3, [r0, #0]
   34148:	4632      	mov	r2, r6
   3414a:	4629      	mov	r1, r5
   3414c:	4620      	mov	r0, r4
   3414e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   34152:	4718      	bx	r3
   34154:	f04f 30ff 	mov.w	r0, #4294967295
   34158:	bd70      	pop	{r4, r5, r6, pc}
   3415a:	bf00      	nop

0003415c <nrf_close>:
   3415c:	b510      	push	{r4, lr}
   3415e:	4604      	mov	r4, r0
   34160:	f7fd fd20 	bl	31ba4 <bsd_platform_fd_method_table_get>
   34164:	b120      	cbz	r0, 34170 <nrf_close+0x14>
   34166:	6843      	ldr	r3, [r0, #4]
   34168:	4620      	mov	r0, r4
   3416a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3416e:	4718      	bx	r3
   34170:	f04f 30ff 	mov.w	r0, #4294967295
   34174:	bd10      	pop	{r4, pc}
   34176:	bf00      	nop

00034178 <nrf_sendto>:
   34178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3417c:	460d      	mov	r5, r1
   3417e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   34182:	4616      	mov	r6, r2
   34184:	461f      	mov	r7, r3
   34186:	4604      	mov	r4, r0
   34188:	f7fd fd0c 	bl	31ba4 <bsd_platform_fd_method_table_get>
   3418c:	b158      	cbz	r0, 341a6 <nrf_sendto+0x2e>
   3418e:	e9cd 8908 	strd	r8, r9, [sp, #32]
   34192:	f8d0 e008 	ldr.w	lr, [r0, #8]
   34196:	463b      	mov	r3, r7
   34198:	4632      	mov	r2, r6
   3419a:	4629      	mov	r1, r5
   3419c:	4620      	mov	r0, r4
   3419e:	46f4      	mov	ip, lr
   341a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   341a4:	4760      	bx	ip
   341a6:	f04f 30ff 	mov.w	r0, #4294967295
   341aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   341ae:	bf00      	nop

000341b0 <nrf_send>:
   341b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   341b4:	b082      	sub	sp, #8
   341b6:	460e      	mov	r6, r1
   341b8:	4617      	mov	r7, r2
   341ba:	4698      	mov	r8, r3
   341bc:	4605      	mov	r5, r0
   341be:	f7fd fcf1 	bl	31ba4 <bsd_platform_fd_method_table_get>
   341c2:	b160      	cbz	r0, 341de <nrf_send+0x2e>
   341c4:	4604      	mov	r4, r0
   341c6:	2000      	movs	r0, #0
   341c8:	e9cd 0000 	strd	r0, r0, [sp]
   341cc:	4643      	mov	r3, r8
   341ce:	463a      	mov	r2, r7
   341d0:	4631      	mov	r1, r6
   341d2:	4628      	mov	r0, r5
   341d4:	68a4      	ldr	r4, [r4, #8]
   341d6:	47a0      	blx	r4
   341d8:	b002      	add	sp, #8
   341da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   341de:	f04f 30ff 	mov.w	r0, #4294967295
   341e2:	e7f9      	b.n	341d8 <nrf_send+0x28>

000341e4 <nrf_write>:
   341e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   341e6:	b083      	sub	sp, #12
   341e8:	460e      	mov	r6, r1
   341ea:	4617      	mov	r7, r2
   341ec:	4605      	mov	r5, r0
   341ee:	f7fd fcd9 	bl	31ba4 <bsd_platform_fd_method_table_get>
   341f2:	b150      	cbz	r0, 3420a <nrf_write+0x26>
   341f4:	2300      	movs	r3, #0
   341f6:	4604      	mov	r4, r0
   341f8:	e9cd 3300 	strd	r3, r3, [sp]
   341fc:	463a      	mov	r2, r7
   341fe:	4631      	mov	r1, r6
   34200:	4628      	mov	r0, r5
   34202:	68a4      	ldr	r4, [r4, #8]
   34204:	47a0      	blx	r4
   34206:	b003      	add	sp, #12
   34208:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3420a:	f04f 30ff 	mov.w	r0, #4294967295
   3420e:	e7fa      	b.n	34206 <nrf_write+0x22>

00034210 <nrf_recvfrom>:
   34210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34214:	460d      	mov	r5, r1
   34216:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   3421a:	4616      	mov	r6, r2
   3421c:	461f      	mov	r7, r3
   3421e:	4604      	mov	r4, r0
   34220:	f7fd fcc0 	bl	31ba4 <bsd_platform_fd_method_table_get>
   34224:	b158      	cbz	r0, 3423e <nrf_recvfrom+0x2e>
   34226:	e9cd 8908 	strd	r8, r9, [sp, #32]
   3422a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   3422e:	463b      	mov	r3, r7
   34230:	4632      	mov	r2, r6
   34232:	4629      	mov	r1, r5
   34234:	4620      	mov	r0, r4
   34236:	46f4      	mov	ip, lr
   34238:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3423c:	4760      	bx	ip
   3423e:	f04f 30ff 	mov.w	r0, #4294967295
   34242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34246:	bf00      	nop

00034248 <nrf_recv>:
   34248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3424c:	b082      	sub	sp, #8
   3424e:	460e      	mov	r6, r1
   34250:	4617      	mov	r7, r2
   34252:	4698      	mov	r8, r3
   34254:	4605      	mov	r5, r0
   34256:	f7fd fca5 	bl	31ba4 <bsd_platform_fd_method_table_get>
   3425a:	b160      	cbz	r0, 34276 <nrf_recv+0x2e>
   3425c:	4604      	mov	r4, r0
   3425e:	2000      	movs	r0, #0
   34260:	e9cd 0000 	strd	r0, r0, [sp]
   34264:	4643      	mov	r3, r8
   34266:	463a      	mov	r2, r7
   34268:	4631      	mov	r1, r6
   3426a:	4628      	mov	r0, r5
   3426c:	68e4      	ldr	r4, [r4, #12]
   3426e:	47a0      	blx	r4
   34270:	b002      	add	sp, #8
   34272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34276:	f04f 30ff 	mov.w	r0, #4294967295
   3427a:	e7f9      	b.n	34270 <nrf_recv+0x28>

0003427c <nrf_read>:
   3427c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3427e:	b083      	sub	sp, #12
   34280:	460e      	mov	r6, r1
   34282:	4617      	mov	r7, r2
   34284:	4605      	mov	r5, r0
   34286:	f7fd fc8d 	bl	31ba4 <bsd_platform_fd_method_table_get>
   3428a:	b150      	cbz	r0, 342a2 <nrf_read+0x26>
   3428c:	2300      	movs	r3, #0
   3428e:	4604      	mov	r4, r0
   34290:	e9cd 3300 	strd	r3, r3, [sp]
   34294:	463a      	mov	r2, r7
   34296:	4631      	mov	r1, r6
   34298:	4628      	mov	r0, r5
   3429a:	68e4      	ldr	r4, [r4, #12]
   3429c:	47a0      	blx	r4
   3429e:	b003      	add	sp, #12
   342a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   342a2:	f04f 30ff 	mov.w	r0, #4294967295
   342a6:	e7fa      	b.n	3429e <nrf_read+0x22>

000342a8 <nrf_connect>:
   342a8:	b570      	push	{r4, r5, r6, lr}
   342aa:	460d      	mov	r5, r1
   342ac:	4616      	mov	r6, r2
   342ae:	4604      	mov	r4, r0
   342b0:	f7fd fc78 	bl	31ba4 <bsd_platform_fd_method_table_get>
   342b4:	b130      	cbz	r0, 342c4 <nrf_connect+0x1c>
   342b6:	6943      	ldr	r3, [r0, #20]
   342b8:	4632      	mov	r2, r6
   342ba:	4629      	mov	r1, r5
   342bc:	4620      	mov	r0, r4
   342be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   342c2:	4718      	bx	r3
   342c4:	f04f 30ff 	mov.w	r0, #4294967295
   342c8:	bd70      	pop	{r4, r5, r6, pc}
   342ca:	bf00      	nop

000342cc <nrf_listen>:
   342cc:	b570      	push	{r4, r5, r6, lr}
   342ce:	460d      	mov	r5, r1
   342d0:	4604      	mov	r4, r0
   342d2:	f7fd fc67 	bl	31ba4 <bsd_platform_fd_method_table_get>
   342d6:	b128      	cbz	r0, 342e4 <nrf_listen+0x18>
   342d8:	6983      	ldr	r3, [r0, #24]
   342da:	4629      	mov	r1, r5
   342dc:	4620      	mov	r0, r4
   342de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   342e2:	4718      	bx	r3
   342e4:	f04f 30ff 	mov.w	r0, #4294967295
   342e8:	bd70      	pop	{r4, r5, r6, pc}
   342ea:	bf00      	nop

000342ec <nrf_accept>:
   342ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   342f0:	460d      	mov	r5, r1
   342f2:	4616      	mov	r6, r2
   342f4:	4604      	mov	r4, r0
   342f6:	f7fd fc55 	bl	31ba4 <bsd_platform_fd_method_table_get>
   342fa:	b140      	cbz	r0, 3430e <nrf_accept+0x22>
   342fc:	69c7      	ldr	r7, [r0, #28]
   342fe:	4632      	mov	r2, r6
   34300:	4629      	mov	r1, r5
   34302:	4620      	mov	r0, r4
   34304:	46bc      	mov	ip, r7
   34306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3430a:	2300      	movs	r3, #0
   3430c:	4760      	bx	ip
   3430e:	f04f 30ff 	mov.w	r0, #4294967295
   34312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34316:	bf00      	nop

00034318 <nrf_bind>:
   34318:	b570      	push	{r4, r5, r6, lr}
   3431a:	460d      	mov	r5, r1
   3431c:	4616      	mov	r6, r2
   3431e:	4604      	mov	r4, r0
   34320:	f7fd fc40 	bl	31ba4 <bsd_platform_fd_method_table_get>
   34324:	b130      	cbz	r0, 34334 <nrf_bind+0x1c>
   34326:	6903      	ldr	r3, [r0, #16]
   34328:	4632      	mov	r2, r6
   3432a:	4629      	mov	r1, r5
   3432c:	4620      	mov	r0, r4
   3432e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   34332:	4718      	bx	r3
   34334:	f04f 30ff 	mov.w	r0, #4294967295
   34338:	bd70      	pop	{r4, r5, r6, pc}
   3433a:	bf00      	nop

0003433c <nrf_setsockopt>:
   3433c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34340:	f8dd 8018 	ldr.w	r8, [sp, #24]
   34344:	460d      	mov	r5, r1
   34346:	4616      	mov	r6, r2
   34348:	461f      	mov	r7, r3
   3434a:	4604      	mov	r4, r0
   3434c:	f7fd fc2a 	bl	31ba4 <bsd_platform_fd_method_table_get>
   34350:	b158      	cbz	r0, 3436a <nrf_setsockopt+0x2e>
   34352:	f8cd 8018 	str.w	r8, [sp, #24]
   34356:	f8d0 e020 	ldr.w	lr, [r0, #32]
   3435a:	463b      	mov	r3, r7
   3435c:	4632      	mov	r2, r6
   3435e:	4629      	mov	r1, r5
   34360:	4620      	mov	r0, r4
   34362:	46f4      	mov	ip, lr
   34364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   34368:	4760      	bx	ip
   3436a:	f04f 30ff 	mov.w	r0, #4294967295
   3436e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34372:	bf00      	nop

00034374 <nrf_getsockopt>:
   34374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34378:	f8dd 8018 	ldr.w	r8, [sp, #24]
   3437c:	460d      	mov	r5, r1
   3437e:	4616      	mov	r6, r2
   34380:	461f      	mov	r7, r3
   34382:	4604      	mov	r4, r0
   34384:	f7fd fc0e 	bl	31ba4 <bsd_platform_fd_method_table_get>
   34388:	b158      	cbz	r0, 343a2 <nrf_getsockopt+0x2e>
   3438a:	f8cd 8018 	str.w	r8, [sp, #24]
   3438e:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   34392:	463b      	mov	r3, r7
   34394:	4632      	mov	r2, r6
   34396:	4629      	mov	r1, r5
   34398:	4620      	mov	r0, r4
   3439a:	46f4      	mov	ip, lr
   3439c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   343a0:	4760      	bx	ip
   343a2:	f04f 30ff 	mov.w	r0, #4294967295
   343a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   343aa:	bf00      	nop

000343ac <nrf_getaddrinfo>:
   343ac:	f7fd bc70 	b.w	31c90 <bsd_platform_getaddrinfo>

000343b0 <nrf_freeaddrinfo>:
   343b0:	f7fd bc70 	b.w	31c94 <bsd_platform_freeaddrinfo>

000343b4 <nrf_poll>:
   343b4:	f7fd bc70 	b.w	31c98 <bsd_platform_poll>

000343b8 <nrf_fcntl>:
   343b8:	f7fd bcc8 	b.w	31d4c <bsd_platform_fcntl>

000343bc <at_client_evt_handler>:
   343bc:	b120      	cbz	r0, 343c8 <at_client_evt_handler+0xc>
   343be:	f850 1b08 	ldr.w	r1, [r0], #8
   343c2:	0c09      	lsrs	r1, r1, #16
   343c4:	f7fb be82 	b.w	300cc <rpc_at_event_handler>
   343c8:	4770      	bx	lr
   343ca:	bf00      	nop

000343cc <rpc_at_client_init>:
   343cc:	4801      	ldr	r0, [pc, #4]	; (343d4 <rpc_at_client_init+0x8>)
   343ce:	f001 be7b 	b.w	360c8 <rpc_client_register>
   343d2:	bf00      	nop
   343d4:	000428e8 	.word	0x000428e8

000343d8 <rpc_at_client_request_alloc>:
   343d8:	b180      	cbz	r0, 343fc <rpc_at_client_request_alloc+0x24>
   343da:	2300      	movs	r3, #0
   343dc:	b510      	push	{r4, lr}
   343de:	b082      	sub	sp, #8
   343e0:	aa02      	add	r2, sp, #8
   343e2:	4604      	mov	r4, r0
   343e4:	f842 3d04 	str.w	r3, [r2, #-4]!
   343e8:	2003      	movs	r0, #3
   343ea:	f002 f8a5 	bl	36538 <rpc_message_alloc>
   343ee:	b918      	cbnz	r0, 343f8 <rpc_at_client_request_alloc+0x20>
   343f0:	9b01      	ldr	r3, [sp, #4]
   343f2:	b10b      	cbz	r3, 343f8 <rpc_at_client_request_alloc+0x20>
   343f4:	3308      	adds	r3, #8
   343f6:	6023      	str	r3, [r4, #0]
   343f8:	b002      	add	sp, #8
   343fa:	bd10      	pop	{r4, pc}
   343fc:	200e      	movs	r0, #14
   343fe:	4770      	bx	lr

00034400 <rpc_at_client_request_send>:
   34400:	b150      	cbz	r0, 34418 <rpc_at_client_request_send+0x18>
   34402:	4603      	mov	r3, r0
   34404:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   34408:	2003      	movs	r0, #3
   3440a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   3440e:	f843 1d08 	str.w	r1, [r3, #-8]!
   34412:	4619      	mov	r1, r3
   34414:	f002 b878 	b.w	36508 <rpc_message_send>
   34418:	200e      	movs	r0, #14
   3441a:	4770      	bx	lr

0003441c <rpc_at_client_message_free>:
   3441c:	b120      	cbz	r0, 34428 <rpc_at_client_message_free+0xc>
   3441e:	f1a0 0108 	sub.w	r1, r0, #8
   34422:	2003      	movs	r0, #3
   34424:	f002 b8ba 	b.w	3659c <rpc_message_free>
   34428:	200e      	movs	r0, #14
   3442a:	4770      	bx	lr

0003442c <rpc_at_client_data_free>:
   3442c:	b118      	cbz	r0, 34436 <rpc_at_client_data_free+0xa>
   3442e:	4601      	mov	r1, r0
   34430:	2003      	movs	r0, #3
   34432:	f002 b9c5 	b.w	367c0 <rpc_message_data_free>
   34436:	200e      	movs	r0, #14
   34438:	4770      	bx	lr
   3443a:	bf00      	nop

0003443c <ip_recvd_packet_free_cb>:
   3443c:	b510      	push	{r4, lr}
   3443e:	4604      	mov	r4, r0
   34440:	6800      	ldr	r0, [r0, #0]
   34442:	f7fc fb01 	bl	30a48 <rpc_ip_client_data_free>
   34446:	68a0      	ldr	r0, [r4, #8]
   34448:	b118      	cbz	r0, 34452 <ip_recvd_packet_free_cb+0x16>
   3444a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3444e:	f7fc ba9b 	b.w	30988 <nrf_free>
   34452:	bd10      	pop	{r4, pc}

00034454 <rpc_error_to_nrf_bsd_error>:
   34454:	2810      	cmp	r0, #16
   34456:	bf9a      	itte	ls
   34458:	4b02      	ldrls	r3, [pc, #8]	; (34464 <rpc_error_to_nrf_bsd_error+0x10>)
   3445a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   3445e:	202d      	movhi	r0, #45	; 0x2d
   34460:	4770      	bx	lr
   34462:	bf00      	nop
   34464:	000428f8 	.word	0x000428f8

00034468 <ip_interface_request_create>:
   34468:	b570      	push	{r4, r5, r6, lr}
   3446a:	2500      	movs	r5, #0
   3446c:	b082      	sub	sp, #8
   3446e:	ac02      	add	r4, sp, #8
   34470:	f844 5d04 	str.w	r5, [r4, #-4]!
   34474:	4606      	mov	r6, r0
   34476:	460d      	mov	r5, r1
   34478:	4620      	mov	r0, r4
   3447a:	4619      	mov	r1, r3
   3447c:	4614      	mov	r4, r2
   3447e:	f7fc fab1 	bl	309e4 <rpc_ip_client_request_alloc>
   34482:	b960      	cbnz	r0, 3449e <ip_interface_request_create+0x36>
   34484:	9b01      	ldr	r3, [sp, #4]
   34486:	2208      	movs	r2, #8
   34488:	7258      	strb	r0, [r3, #9]
   3448a:	7298      	strb	r0, [r3, #10]
   3448c:	72d8      	strb	r0, [r3, #11]
   3448e:	4618      	mov	r0, r3
   34490:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   34494:	60dc      	str	r4, [r3, #12]
   34496:	611d      	str	r5, [r3, #16]
   34498:	721a      	strb	r2, [r3, #8]
   3449a:	b002      	add	sp, #8
   3449c:	bd70      	pop	{r4, r5, r6, pc}
   3449e:	9b01      	ldr	r3, [sp, #4]
   344a0:	4618      	mov	r0, r3
   344a2:	b002      	add	sp, #8
   344a4:	bd70      	pop	{r4, r5, r6, pc}
   344a6:	bf00      	nop

000344a8 <ip_interface_request_send>:
   344a8:	b570      	push	{r4, r5, r6, lr}
   344aa:	460c      	mov	r4, r1
   344ac:	4605      	mov	r5, r0
   344ae:	4611      	mov	r1, r2
   344b0:	4620      	mov	r0, r4
   344b2:	461e      	mov	r6, r3
   344b4:	f7fc faaa 	bl	30a0c <rpc_ip_client_request_send>
   344b8:	b900      	cbnz	r0, 344bc <ip_interface_request_send+0x14>
   344ba:	bd70      	pop	{r4, r5, r6, pc}
   344bc:	6820      	ldr	r0, [r4, #0]
   344be:	b108      	cbz	r0, 344c4 <ip_interface_request_send+0x1c>
   344c0:	f7fc fac2 	bl	30a48 <rpc_ip_client_data_free>
   344c4:	4620      	mov	r0, r4
   344c6:	f7fc fab7 	bl	30a38 <rpc_ip_client_message_free>
   344ca:	602e      	str	r6, [r5, #0]
   344cc:	2023      	movs	r0, #35	; 0x23
   344ce:	bd70      	pop	{r4, r5, r6, pc}

000344d0 <ip_interface_wait>:
   344d0:	b538      	push	{r3, r4, r5, lr}
   344d2:	4605      	mov	r5, r0
   344d4:	f001 fc14 	bl	35d00 <interface_socket_wait>
   344d8:	4604      	mov	r4, r0
   344da:	b108      	cbz	r0, 344e0 <ip_interface_wait+0x10>
   344dc:	4620      	mov	r0, r4
   344de:	bd38      	pop	{r3, r4, r5, pc}
   344e0:	4628      	mov	r0, r5
   344e2:	f001 fc81 	bl	35de8 <interface_socket_from_handle_get>
   344e6:	2800      	cmp	r0, #0
   344e8:	d0f8      	beq.n	344dc <ip_interface_wait+0xc>
   344ea:	6844      	ldr	r4, [r0, #4]
   344ec:	2c00      	cmp	r4, #0
   344ee:	d0f5      	beq.n	344dc <ip_interface_wait+0xc>
   344f0:	2300      	movs	r3, #0
   344f2:	6043      	str	r3, [r0, #4]
   344f4:	4620      	mov	r0, r4
   344f6:	bd38      	pop	{r3, r4, r5, pc}

000344f8 <ip_interface_init>:
   344f8:	b538      	push	{r3, r4, r5, lr}
   344fa:	2300      	movs	r3, #0
   344fc:	4d07      	ldr	r5, [pc, #28]	; (3451c <ip_interface_init+0x24>)
   344fe:	4c08      	ldr	r4, [pc, #32]	; (34520 <ip_interface_init+0x28>)
   34500:	4619      	mov	r1, r3
   34502:	2224      	movs	r2, #36	; 0x24
   34504:	4807      	ldr	r0, [pc, #28]	; (34524 <ip_interface_init+0x2c>)
   34506:	602b      	str	r3, [r5, #0]
   34508:	6023      	str	r3, [r4, #0]
   3450a:	f00c f8a7 	bl	4065c <memset>
   3450e:	f7fc fa63 	bl	309d8 <rpc_ip_client_init>
   34512:	3000      	adds	r0, #0
   34514:	bf18      	it	ne
   34516:	2001      	movne	r0, #1
   34518:	4240      	negs	r0, r0
   3451a:	bd38      	pop	{r3, r4, r5, pc}
   3451c:	20024ea8 	.word	0x20024ea8
   34520:	20024ea4 	.word	0x20024ea4
   34524:	20024eb0 	.word	0x20024eb0

00034528 <ip_interface_open>:
   34528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3452c:	4606      	mov	r6, r0
   3452e:	2000      	movs	r0, #0
   34530:	f026 0308 	bic.w	r3, r6, #8
   34534:	b082      	sub	sp, #8
   34536:	2b02      	cmp	r3, #2
   34538:	460c      	mov	r4, r1
   3453a:	4617      	mov	r7, r2
   3453c:	9000      	str	r0, [sp, #0]
   3453e:	d002      	beq.n	34546 <ip_interface_open+0x1e>
   34540:	2e05      	cmp	r6, #5
   34542:	f040 8085 	bne.w	34650 <ip_interface_open+0x128>
   34546:	1e63      	subs	r3, r4, #1
   34548:	2b02      	cmp	r3, #2
   3454a:	f200 8097 	bhi.w	3467c <ip_interface_open+0x154>
   3454e:	2f00      	cmp	r7, #0
   34550:	d154      	bne.n	345fc <ip_interface_open+0xd4>
   34552:	2c01      	cmp	r4, #1
   34554:	d067      	beq.n	34626 <ip_interface_open+0xfe>
   34556:	2c03      	cmp	r4, #3
   34558:	bf18      	it	ne
   3455a:	2702      	movne	r7, #2
   3455c:	4a4a      	ldr	r2, [pc, #296]	; (34688 <ip_interface_open+0x160>)
   3455e:	4621      	mov	r1, r4
   34560:	4668      	mov	r0, sp
   34562:	f001 fb1b 	bl	35b9c <interface_socket_allocate>
   34566:	9b00      	ldr	r3, [sp, #0]
   34568:	4680      	mov	r8, r0
   3456a:	2b00      	cmp	r3, #0
   3456c:	d059      	beq.n	34622 <ip_interface_open+0xfa>
   3456e:	2100      	movs	r1, #0
   34570:	a802      	add	r0, sp, #8
   34572:	f840 1d04 	str.w	r1, [r0, #-4]!
   34576:	e9c3 6403 	strd	r6, r4, [r3, #12]
   3457a:	615f      	str	r7, [r3, #20]
   3457c:	f7fc fa32 	bl	309e4 <rpc_ip_client_request_alloc>
   34580:	2800      	cmp	r0, #0
   34582:	d14b      	bne.n	3461c <ip_interface_open+0xf4>
   34584:	f247 0201 	movw	r2, #28673	; 0x7001
   34588:	f04f 33ff 	mov.w	r3, #4294967295
   3458c:	2108      	movs	r1, #8
   3458e:	9d01      	ldr	r5, [sp, #4]
   34590:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
   34594:	60ea      	str	r2, [r5, #12]
   34596:	7268      	strb	r0, [r5, #9]
   34598:	72a8      	strb	r0, [r5, #10]
   3459a:	72e8      	strb	r0, [r5, #11]
   3459c:	7229      	strb	r1, [r5, #8]
   3459e:	742b      	strb	r3, [r5, #16]
   345a0:	746b      	strb	r3, [r5, #17]
   345a2:	74ab      	strb	r3, [r5, #18]
   345a4:	74eb      	strb	r3, [r5, #19]
   345a6:	68ab      	ldr	r3, [r5, #8]
   345a8:	2e05      	cmp	r6, #5
   345aa:	f103 030c 	add.w	r3, r3, #12
   345ae:	60ab      	str	r3, [r5, #8]
   345b0:	d003      	beq.n	345ba <ip_interface_open+0x92>
   345b2:	2e0a      	cmp	r6, #10
   345b4:	bf14      	ite	ne
   345b6:	2601      	movne	r6, #1
   345b8:	2602      	moveq	r6, #2
   345ba:	616e      	str	r6, [r5, #20]
   345bc:	61ef      	str	r7, [r5, #28]
   345be:	61ac      	str	r4, [r5, #24]
   345c0:	f247 0101 	movw	r1, #28673	; 0x7001
   345c4:	4628      	mov	r0, r5
   345c6:	9f00      	ldr	r7, [sp, #0]
   345c8:	f7fc fa20 	bl	30a0c <rpc_ip_client_request_send>
   345cc:	4606      	mov	r6, r0
   345ce:	b360      	cbz	r0, 3462a <ip_interface_open+0x102>
   345d0:	6828      	ldr	r0, [r5, #0]
   345d2:	b108      	cbz	r0, 345d8 <ip_interface_open+0xb0>
   345d4:	f7fc fa38 	bl	30a48 <rpc_ip_client_data_free>
   345d8:	4628      	mov	r0, r5
   345da:	f7fc fa2d 	bl	30a38 <rpc_ip_client_message_free>
   345de:	2301      	movs	r3, #1
   345e0:	2523      	movs	r5, #35	; 0x23
   345e2:	603b      	str	r3, [r7, #0]
   345e4:	4640      	mov	r0, r8
   345e6:	f001 fb3d 	bl	35c64 <interface_socket_free>
   345ea:	4628      	mov	r0, r5
   345ec:	f7f2 fd34 	bl	27058 <bsd_os_errno_set>
   345f0:	f04f 38ff 	mov.w	r8, #4294967295
   345f4:	4640      	mov	r0, r8
   345f6:	b002      	add	sp, #8
   345f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   345fc:	2c01      	cmp	r4, #1
   345fe:	d009      	beq.n	34614 <ip_interface_open+0xec>
   34600:	2c02      	cmp	r4, #2
   34602:	d109      	bne.n	34618 <ip_interface_open+0xf0>
   34604:	2f02      	cmp	r7, #2
   34606:	d0a9      	beq.n	3455c <ip_interface_open+0x34>
   34608:	2029      	movs	r0, #41	; 0x29
   3460a:	f7f2 fd25 	bl	27058 <bsd_os_errno_set>
   3460e:	f04f 38ff 	mov.w	r8, #4294967295
   34612:	e7ef      	b.n	345f4 <ip_interface_open+0xcc>
   34614:	2f01      	cmp	r7, #1
   34616:	d1f7      	bne.n	34608 <ip_interface_open+0xe0>
   34618:	2702      	movs	r7, #2
   3461a:	e79f      	b.n	3455c <ip_interface_open+0x34>
   3461c:	9d01      	ldr	r5, [sp, #4]
   3461e:	2d00      	cmp	r5, #0
   34620:	d1c1      	bne.n	345a6 <ip_interface_open+0x7e>
   34622:	250c      	movs	r5, #12
   34624:	e7de      	b.n	345e4 <ip_interface_open+0xbc>
   34626:	4627      	mov	r7, r4
   34628:	e798      	b.n	3455c <ip_interface_open+0x34>
   3462a:	f04f 33ff 	mov.w	r3, #4294967295
   3462e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   34632:	2102      	movs	r1, #2
   34634:	4640      	mov	r0, r8
   34636:	f001 fb63 	bl	35d00 <interface_socket_wait>
   3463a:	4605      	mov	r5, r0
   3463c:	2800      	cmp	r0, #0
   3463e:	d1d1      	bne.n	345e4 <ip_interface_open+0xbc>
   34640:	4640      	mov	r0, r8
   34642:	f001 fbd1 	bl	35de8 <interface_socket_from_handle_get>
   34646:	b148      	cbz	r0, 3465c <ip_interface_open+0x134>
   34648:	6845      	ldr	r5, [r0, #4]
   3464a:	b13d      	cbz	r5, 3465c <ip_interface_open+0x134>
   3464c:	6046      	str	r6, [r0, #4]
   3464e:	e7c9      	b.n	345e4 <ip_interface_open+0xbc>
   34650:	202f      	movs	r0, #47	; 0x2f
   34652:	f7f2 fd01 	bl	27058 <bsd_os_errno_set>
   34656:	f04f 38ff 	mov.w	r8, #4294967295
   3465a:	e7cb      	b.n	345f4 <ip_interface_open+0xcc>
   3465c:	3c02      	subs	r4, #2
   3465e:	2c01      	cmp	r4, #1
   34660:	d8c8      	bhi.n	345f4 <ip_interface_open+0xcc>
   34662:	4640      	mov	r0, r8
   34664:	9b00      	ldr	r3, [sp, #0]
   34666:	681a      	ldr	r2, [r3, #0]
   34668:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   3466c:	601a      	str	r2, [r3, #0]
   3466e:	681a      	ldr	r2, [r3, #0]
   34670:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   34674:	601a      	str	r2, [r3, #0]
   34676:	b002      	add	sp, #8
   34678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3467c:	2016      	movs	r0, #22
   3467e:	f7f2 fceb 	bl	27058 <bsd_os_errno_set>
   34682:	f04f 38ff 	mov.w	r8, #4294967295
   34686:	e7b5      	b.n	345f4 <ip_interface_open+0xcc>
   34688:	0003443d 	.word	0x0003443d

0003468c <ip_interface_close>:
   3468c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34690:	b082      	sub	sp, #8
   34692:	4606      	mov	r6, r0
   34694:	f001 fba8 	bl	35de8 <interface_socket_from_handle_get>
   34698:	2800      	cmp	r0, #0
   3469a:	d063      	beq.n	34764 <ip_interface_close+0xd8>
   3469c:	4604      	mov	r4, r0
   3469e:	2100      	movs	r1, #0
   346a0:	a802      	add	r0, sp, #8
   346a2:	6827      	ldr	r7, [r4, #0]
   346a4:	f840 1d04 	str.w	r1, [r0, #-4]!
   346a8:	f8d4 8018 	ldr.w	r8, [r4, #24]
   346ac:	f7fc f99a 	bl	309e4 <rpc_ip_client_request_alloc>
   346b0:	2800      	cmp	r0, #0
   346b2:	d13a      	bne.n	3472a <ip_interface_close+0x9e>
   346b4:	f247 0309 	movw	r3, #28681	; 0x7009
   346b8:	2208      	movs	r2, #8
   346ba:	9d01      	ldr	r5, [sp, #4]
   346bc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   346c0:	60eb      	str	r3, [r5, #12]
   346c2:	f8c5 8010 	str.w	r8, [r5, #16]
   346c6:	7268      	strb	r0, [r5, #9]
   346c8:	72a8      	strb	r0, [r5, #10]
   346ca:	72e8      	strb	r0, [r5, #11]
   346cc:	722a      	strb	r2, [r5, #8]
   346ce:	6823      	ldr	r3, [r4, #0]
   346d0:	f247 0109 	movw	r1, #28681	; 0x7009
   346d4:	0c1b      	lsrs	r3, r3, #16
   346d6:	041b      	lsls	r3, r3, #16
   346d8:	f043 030d 	orr.w	r3, r3, #13
   346dc:	6023      	str	r3, [r4, #0]
   346de:	6823      	ldr	r3, [r4, #0]
   346e0:	4628      	mov	r0, r5
   346e2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   346e6:	6023      	str	r3, [r4, #0]
   346e8:	6823      	ldr	r3, [r4, #0]
   346ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   346ee:	6023      	str	r3, [r4, #0]
   346f0:	f7fc f98c 	bl	30a0c <rpc_ip_client_request_send>
   346f4:	bb40      	cbnz	r0, 34748 <ip_interface_close+0xbc>
   346f6:	f04f 33ff 	mov.w	r3, #4294967295
   346fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   346fe:	210e      	movs	r1, #14
   34700:	4630      	mov	r0, r6
   34702:	f001 fafd 	bl	35d00 <interface_socket_wait>
   34706:	4604      	mov	r4, r0
   34708:	b1a0      	cbz	r0, 34734 <ip_interface_close+0xa8>
   3470a:	4c17      	ldr	r4, [pc, #92]	; (34768 <ip_interface_close+0xdc>)
   3470c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   34710:	b120      	cbz	r0, 3471c <ip_interface_close+0x90>
   34712:	f7fc f991 	bl	30a38 <rpc_ip_client_message_free>
   34716:	2300      	movs	r3, #0
   34718:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   3471c:	4630      	mov	r0, r6
   3471e:	f001 faa1 	bl	35c64 <interface_socket_free>
   34722:	2000      	movs	r0, #0
   34724:	b002      	add	sp, #8
   34726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3472a:	9d01      	ldr	r5, [sp, #4]
   3472c:	200c      	movs	r0, #12
   3472e:	2d00      	cmp	r5, #0
   34730:	d1cd      	bne.n	346ce <ip_interface_close+0x42>
   34732:	e012      	b.n	3475a <ip_interface_close+0xce>
   34734:	4630      	mov	r0, r6
   34736:	f001 fb57 	bl	35de8 <interface_socket_from_handle_get>
   3473a:	2800      	cmp	r0, #0
   3473c:	d0e5      	beq.n	3470a <ip_interface_close+0x7e>
   3473e:	6843      	ldr	r3, [r0, #4]
   34740:	2b00      	cmp	r3, #0
   34742:	d0e2      	beq.n	3470a <ip_interface_close+0x7e>
   34744:	6044      	str	r4, [r0, #4]
   34746:	e7e0      	b.n	3470a <ip_interface_close+0x7e>
   34748:	6828      	ldr	r0, [r5, #0]
   3474a:	b108      	cbz	r0, 34750 <ip_interface_close+0xc4>
   3474c:	f7fc f97c 	bl	30a48 <rpc_ip_client_data_free>
   34750:	4628      	mov	r0, r5
   34752:	f7fc f971 	bl	30a38 <rpc_ip_client_message_free>
   34756:	2023      	movs	r0, #35	; 0x23
   34758:	6027      	str	r7, [r4, #0]
   3475a:	f7f2 fc7d 	bl	27058 <bsd_os_errno_set>
   3475e:	f04f 30ff 	mov.w	r0, #4294967295
   34762:	e7df      	b.n	34724 <ip_interface_close+0x98>
   34764:	2009      	movs	r0, #9
   34766:	e7f8      	b.n	3475a <ip_interface_close+0xce>
   34768:	20024eb0 	.word	0x20024eb0

0003476c <ip_interface_sendto>:
   3476c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34770:	2400      	movs	r4, #0
   34772:	b089      	sub	sp, #36	; 0x24
   34774:	9102      	str	r1, [sp, #8]
   34776:	4615      	mov	r5, r2
   34778:	4699      	mov	r9, r3
   3477a:	9407      	str	r4, [sp, #28]
   3477c:	4607      	mov	r7, r0
   3477e:	9e12      	ldr	r6, [sp, #72]	; 0x48
   34780:	f001 fb32 	bl	35de8 <interface_socket_from_handle_get>
   34784:	2800      	cmp	r0, #0
   34786:	f000 815f 	beq.w	34a48 <ip_interface_sendto+0x2dc>
   3478a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   3478e:	f300 814c 	bgt.w	34a2a <ip_interface_sendto+0x2be>
   34792:	6903      	ldr	r3, [r0, #16]
   34794:	4604      	mov	r4, r0
   34796:	2b01      	cmp	r3, #1
   34798:	f000 80fb 	beq.w	34992 <ip_interface_sendto+0x226>
   3479c:	6822      	ldr	r2, [r4, #0]
   3479e:	0390      	lsls	r0, r2, #14
   347a0:	d562      	bpl.n	34868 <ip_interface_sendto+0xfc>
   347a2:	f1b9 0f00 	cmp.w	r9, #0
   347a6:	f000 80fc 	beq.w	349a2 <ip_interface_sendto+0x236>
   347aa:	f019 0f02 	tst.w	r9, #2
   347ae:	f000 8146 	beq.w	34a3e <ip_interface_sendto+0x2d2>
   347b2:	2300      	movs	r3, #0
   347b4:	9303      	str	r3, [sp, #12]
   347b6:	f247 0806 	movw	r8, #28678	; 0x7006
   347ba:	f04f 0b0c 	mov.w	fp, #12
   347be:	4ba6      	ldr	r3, [pc, #664]	; (34a58 <ip_interface_sendto+0x2ec>)
   347c0:	9300      	str	r3, [sp, #0]
   347c2:	043b      	lsls	r3, r7, #16
   347c4:	9304      	str	r3, [sp, #16]
   347c6:	4629      	mov	r1, r5
   347c8:	a807      	add	r0, sp, #28
   347ca:	f7fc f90b 	bl	309e4 <rpc_ip_client_request_alloc>
   347ce:	2804      	cmp	r0, #4
   347d0:	d063      	beq.n	3489a <ip_interface_sendto+0x12e>
   347d2:	2800      	cmp	r0, #0
   347d4:	f040 813d 	bne.w	34a52 <ip_interface_sendto+0x2e6>
   347d8:	9b07      	ldr	r3, [sp, #28]
   347da:	f883 b008 	strb.w	fp, [r3, #8]
   347de:	7258      	strb	r0, [r3, #9]
   347e0:	7298      	strb	r0, [r3, #10]
   347e2:	72d8      	strb	r0, [r3, #11]
   347e4:	2e00      	cmp	r6, #0
   347e6:	d074      	beq.n	348d2 <ip_interface_sendto+0x166>
   347e8:	68e2      	ldr	r2, [r4, #12]
   347ea:	6871      	ldr	r1, [r6, #4]
   347ec:	428a      	cmp	r2, r1
   347ee:	f040 80a2 	bne.w	34936 <ip_interface_sendto+0x1ca>
   347f2:	7831      	ldrb	r1, [r6, #0]
   347f4:	9813      	ldr	r0, [sp, #76]	; 0x4c
   347f6:	4288      	cmp	r0, r1
   347f8:	d10a      	bne.n	34810 <ip_interface_sendto+0xa4>
   347fa:	2a02      	cmp	r2, #2
   347fc:	f103 001c 	add.w	r0, r3, #28
   34800:	f000 8101 	beq.w	34a06 <ip_interface_sendto+0x29a>
   34804:	2a0a      	cmp	r2, #10
   34806:	d103      	bne.n	34810 <ip_interface_sendto+0xa4>
   34808:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   3480a:	2a24      	cmp	r2, #36	; 0x24
   3480c:	f000 80e8 	beq.w	349e0 <ip_interface_sendto+0x274>
   34810:	f04f 0a16 	mov.w	sl, #22
   34814:	6818      	ldr	r0, [r3, #0]
   34816:	b110      	cbz	r0, 3481e <ip_interface_sendto+0xb2>
   34818:	f7fc f916 	bl	30a48 <rpc_ip_client_data_free>
   3481c:	9b07      	ldr	r3, [sp, #28]
   3481e:	4618      	mov	r0, r3
   34820:	f7fc f90a 	bl	30a38 <rpc_ip_client_message_free>
   34824:	6823      	ldr	r3, [r4, #0]
   34826:	031a      	lsls	r2, r3, #12
   34828:	d43f      	bmi.n	348aa <ip_interface_sendto+0x13e>
   3482a:	6823      	ldr	r3, [r4, #0]
   3482c:	b29b      	uxth	r3, r3
   3482e:	2b0d      	cmp	r3, #13
   34830:	d007      	beq.n	34842 <ip_interface_sendto+0xd6>
   34832:	6823      	ldr	r3, [r4, #0]
   34834:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   34838:	6023      	str	r3, [r4, #0]
   3483a:	6823      	ldr	r3, [r4, #0]
   3483c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   34840:	6023      	str	r3, [r4, #0]
   34842:	f1ba 0f00 	cmp.w	sl, #0
   34846:	d130      	bne.n	348aa <ip_interface_sendto+0x13e>
   34848:	6823      	ldr	r3, [r4, #0]
   3484a:	0118      	lsls	r0, r3, #4
   3484c:	d576      	bpl.n	3493c <ip_interface_sendto+0x1d0>
   3484e:	6823      	ldr	r3, [r4, #0]
   34850:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   34854:	6023      	str	r3, [r4, #0]
   34856:	9b00      	ldr	r3, [sp, #0]
   34858:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   3485c:	2800      	cmp	r0, #0
   3485e:	d12e      	bne.n	348be <ip_interface_sendto+0x152>
   34860:	4628      	mov	r0, r5
   34862:	b009      	add	sp, #36	; 0x24
   34864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34868:	6822      	ldr	r2, [r4, #0]
   3486a:	0091      	lsls	r1, r2, #2
   3486c:	d406      	bmi.n	3487c <ip_interface_sendto+0x110>
   3486e:	2b01      	cmp	r3, #1
   34870:	f000 80b0 	beq.w	349d4 <ip_interface_sendto+0x268>
   34874:	6823      	ldr	r3, [r4, #0]
   34876:	031a      	lsls	r2, r3, #12
   34878:	f140 80d2 	bpl.w	34a20 <ip_interface_sendto+0x2b4>
   3487c:	6823      	ldr	r3, [r4, #0]
   3487e:	031b      	lsls	r3, r3, #12
   34880:	f140 80d8 	bpl.w	34a34 <ip_interface_sendto+0x2c8>
   34884:	4b74      	ldr	r3, [pc, #464]	; (34a58 <ip_interface_sendto+0x2ec>)
   34886:	f8d4 a008 	ldr.w	sl, [r4, #8]
   3488a:	9300      	str	r3, [sp, #0]
   3488c:	e7d9      	b.n	34842 <ip_interface_sendto+0xd6>
   3488e:	9b00      	ldr	r3, [sp, #0]
   34890:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   34894:	b108      	cbz	r0, 3489a <ip_interface_sendto+0x12e>
   34896:	f7fc f8cf 	bl	30a38 <rpc_ip_client_message_free>
   3489a:	9b03      	ldr	r3, [sp, #12]
   3489c:	2b00      	cmp	r3, #0
   3489e:	d192      	bne.n	347c6 <ip_interface_sendto+0x5a>
   348a0:	6823      	ldr	r3, [r4, #0]
   348a2:	f04f 0a23 	mov.w	sl, #35	; 0x23
   348a6:	031a      	lsls	r2, r3, #12
   348a8:	d5bf      	bpl.n	3482a <ip_interface_sendto+0xbe>
   348aa:	4650      	mov	r0, sl
   348ac:	f7f2 fbd4 	bl	27058 <bsd_os_errno_set>
   348b0:	9b00      	ldr	r3, [sp, #0]
   348b2:	f04f 35ff 	mov.w	r5, #4294967295
   348b6:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   348ba:	2800      	cmp	r0, #0
   348bc:	d0d0      	beq.n	34860 <ip_interface_sendto+0xf4>
   348be:	f7fc f8bb 	bl	30a38 <rpc_ip_client_message_free>
   348c2:	2300      	movs	r3, #0
   348c4:	9a00      	ldr	r2, [sp, #0]
   348c6:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   348ca:	4628      	mov	r0, r5
   348cc:	b009      	add	sp, #36	; 0x24
   348ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   348d2:	4642      	mov	r2, r8
   348d4:	f8c3 9014 	str.w	r9, [r3, #20]
   348d8:	69a1      	ldr	r1, [r4, #24]
   348da:	9804      	ldr	r0, [sp, #16]
   348dc:	6119      	str	r1, [r3, #16]
   348de:	9902      	ldr	r1, [sp, #8]
   348e0:	4302      	orrs	r2, r0
   348e2:	60da      	str	r2, [r3, #12]
   348e4:	605d      	str	r5, [r3, #4]
   348e6:	b119      	cbz	r1, 348f0 <ip_interface_sendto+0x184>
   348e8:	6818      	ldr	r0, [r3, #0]
   348ea:	462a      	mov	r2, r5
   348ec:	f00b fe96 	bl	4061c <memcpy>
   348f0:	6823      	ldr	r3, [r4, #0]
   348f2:	4641      	mov	r1, r8
   348f4:	9305      	str	r3, [sp, #20]
   348f6:	6823      	ldr	r3, [r4, #0]
   348f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   348fc:	6023      	str	r3, [r4, #0]
   348fe:	6823      	ldr	r3, [r4, #0]
   34900:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   34904:	6023      	str	r3, [r4, #0]
   34906:	9b07      	ldr	r3, [sp, #28]
   34908:	4618      	mov	r0, r3
   3490a:	9301      	str	r3, [sp, #4]
   3490c:	f7fc f87e 	bl	30a0c <rpc_ip_client_request_send>
   34910:	9b01      	ldr	r3, [sp, #4]
   34912:	4682      	mov	sl, r0
   34914:	b9e8      	cbnz	r0, 34952 <ip_interface_sendto+0x1e6>
   34916:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   3491a:	f04f 33ff 	mov.w	r3, #4294967295
   3491e:	4611      	mov	r1, r2
   34920:	4638      	mov	r0, r7
   34922:	f001 f9ed 	bl	35d00 <interface_socket_wait>
   34926:	b308      	cbz	r0, 3496c <ip_interface_sendto+0x200>
   34928:	6823      	ldr	r3, [r4, #0]
   3492a:	0319      	lsls	r1, r3, #12
   3492c:	d42a      	bmi.n	34984 <ip_interface_sendto+0x218>
   3492e:	280c      	cmp	r0, #12
   34930:	d0ad      	beq.n	3488e <ip_interface_sendto+0x122>
   34932:	4682      	mov	sl, r0
   34934:	e776      	b.n	34824 <ip_interface_sendto+0xb8>
   34936:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   3493a:	e76b      	b.n	34814 <ip_interface_sendto+0xa8>
   3493c:	9b00      	ldr	r3, [sp, #0]
   3493e:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   34942:	6985      	ldr	r5, [r0, #24]
   34944:	f7fc f878 	bl	30a38 <rpc_ip_client_message_free>
   34948:	2300      	movs	r3, #0
   3494a:	9a00      	ldr	r2, [sp, #0]
   3494c:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   34950:	e7bb      	b.n	348ca <ip_interface_sendto+0x15e>
   34952:	6818      	ldr	r0, [r3, #0]
   34954:	469a      	mov	sl, r3
   34956:	b108      	cbz	r0, 3495c <ip_interface_sendto+0x1f0>
   34958:	f7fc f876 	bl	30a48 <rpc_ip_client_data_free>
   3495c:	4650      	mov	r0, sl
   3495e:	f7fc f86b 	bl	30a38 <rpc_ip_client_message_free>
   34962:	9b05      	ldr	r3, [sp, #20]
   34964:	f04f 0a23 	mov.w	sl, #35	; 0x23
   34968:	6023      	str	r3, [r4, #0]
   3496a:	e75b      	b.n	34824 <ip_interface_sendto+0xb8>
   3496c:	4638      	mov	r0, r7
   3496e:	f001 fa3b 	bl	35de8 <interface_socket_from_handle_get>
   34972:	4603      	mov	r3, r0
   34974:	b1e0      	cbz	r0, 349b0 <ip_interface_sendto+0x244>
   34976:	6840      	ldr	r0, [r0, #4]
   34978:	b1d0      	cbz	r0, 349b0 <ip_interface_sendto+0x244>
   3497a:	f8c3 a004 	str.w	sl, [r3, #4]
   3497e:	6823      	ldr	r3, [r4, #0]
   34980:	0319      	lsls	r1, r3, #12
   34982:	d5d4      	bpl.n	3492e <ip_interface_sendto+0x1c2>
   34984:	f8d4 a008 	ldr.w	sl, [r4, #8]
   34988:	6823      	ldr	r3, [r4, #0]
   3498a:	031e      	lsls	r6, r3, #12
   3498c:	f57f af4d 	bpl.w	3482a <ip_interface_sendto+0xbe>
   34990:	e757      	b.n	34842 <ip_interface_sendto+0xd6>
   34992:	2e00      	cmp	r6, #0
   34994:	f43f af02 	beq.w	3479c <ip_interface_sendto+0x30>
   34998:	4b2f      	ldr	r3, [pc, #188]	; (34a58 <ip_interface_sendto+0x2ec>)
   3499a:	f04f 0a38 	mov.w	sl, #56	; 0x38
   3499e:	9300      	str	r3, [sp, #0]
   349a0:	e783      	b.n	348aa <ip_interface_sendto+0x13e>
   349a2:	6823      	ldr	r3, [r4, #0]
   349a4:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   349a8:	f3c3 7300 	ubfx	r3, r3, #28, #1
   349ac:	9303      	str	r3, [sp, #12]
   349ae:	e702      	b.n	347b6 <ip_interface_sendto+0x4a>
   349b0:	6823      	ldr	r3, [r4, #0]
   349b2:	031b      	lsls	r3, r3, #12
   349b4:	f53f af48 	bmi.w	34848 <ip_interface_sendto+0xdc>
   349b8:	6823      	ldr	r3, [r4, #0]
   349ba:	b29b      	uxth	r3, r3
   349bc:	2b0d      	cmp	r3, #13
   349be:	f43f af43 	beq.w	34848 <ip_interface_sendto+0xdc>
   349c2:	6823      	ldr	r3, [r4, #0]
   349c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   349c8:	6023      	str	r3, [r4, #0]
   349ca:	6823      	ldr	r3, [r4, #0]
   349cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   349d0:	6023      	str	r3, [r4, #0]
   349d2:	e739      	b.n	34848 <ip_interface_sendto+0xdc>
   349d4:	6823      	ldr	r3, [r4, #0]
   349d6:	b29b      	uxth	r3, r3
   349d8:	2b05      	cmp	r3, #5
   349da:	f47f af4f 	bne.w	3487c <ip_interface_sendto+0x110>
   349de:	e749      	b.n	34874 <ip_interface_sendto+0x108>
   349e0:	2210      	movs	r2, #16
   349e2:	8931      	ldrh	r1, [r6, #8]
   349e4:	835a      	strh	r2, [r3, #26]
   349e6:	8319      	strh	r1, [r3, #24]
   349e8:	18b1      	adds	r1, r6, r2
   349ea:	f00b fe17 	bl	4061c <memcpy>
   349ee:	f247 0207 	movw	r2, #28679	; 0x7007
   349f2:	9b07      	ldr	r3, [sp, #28]
   349f4:	4690      	mov	r8, r2
   349f6:	6899      	ldr	r1, [r3, #8]
   349f8:	8b58      	ldrh	r0, [r3, #26]
   349fa:	3104      	adds	r1, #4
   349fc:	4401      	add	r1, r0
   349fe:	f8c3 9014 	str.w	r9, [r3, #20]
   34a02:	6099      	str	r1, [r3, #8]
   34a04:	e768      	b.n	348d8 <ip_interface_sendto+0x16c>
   34a06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   34a08:	2a10      	cmp	r2, #16
   34a0a:	f47f af01 	bne.w	34810 <ip_interface_sendto+0xa4>
   34a0e:	2204      	movs	r2, #4
   34a10:	8931      	ldrh	r1, [r6, #8]
   34a12:	835a      	strh	r2, [r3, #26]
   34a14:	8319      	strh	r1, [r3, #24]
   34a16:	f106 010c 	add.w	r1, r6, #12
   34a1a:	f00b fdff 	bl	4061c <memcpy>
   34a1e:	e7e6      	b.n	349ee <ip_interface_sendto+0x282>
   34a20:	4b0d      	ldr	r3, [pc, #52]	; (34a58 <ip_interface_sendto+0x2ec>)
   34a22:	f04f 0a23 	mov.w	sl, #35	; 0x23
   34a26:	9300      	str	r3, [sp, #0]
   34a28:	e73f      	b.n	348aa <ip_interface_sendto+0x13e>
   34a2a:	4b0b      	ldr	r3, [pc, #44]	; (34a58 <ip_interface_sendto+0x2ec>)
   34a2c:	f04f 0a28 	mov.w	sl, #40	; 0x28
   34a30:	9300      	str	r3, [sp, #0]
   34a32:	e73a      	b.n	348aa <ip_interface_sendto+0x13e>
   34a34:	4b08      	ldr	r3, [pc, #32]	; (34a58 <ip_interface_sendto+0x2ec>)
   34a36:	f04f 0a39 	mov.w	sl, #57	; 0x39
   34a3a:	9300      	str	r3, [sp, #0]
   34a3c:	e735      	b.n	348aa <ip_interface_sendto+0x13e>
   34a3e:	4b06      	ldr	r3, [pc, #24]	; (34a58 <ip_interface_sendto+0x2ec>)
   34a40:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   34a44:	9300      	str	r3, [sp, #0]
   34a46:	e730      	b.n	348aa <ip_interface_sendto+0x13e>
   34a48:	4b03      	ldr	r3, [pc, #12]	; (34a58 <ip_interface_sendto+0x2ec>)
   34a4a:	f04f 0a09 	mov.w	sl, #9
   34a4e:	9300      	str	r3, [sp, #0]
   34a50:	e72b      	b.n	348aa <ip_interface_sendto+0x13e>
   34a52:	f04f 0a0c 	mov.w	sl, #12
   34a56:	e6e5      	b.n	34824 <ip_interface_sendto+0xb8>
   34a58:	20024eb0 	.word	0x20024eb0

00034a5c <ip_interface_recvfrom>:
   34a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34a60:	b085      	sub	sp, #20
   34a62:	2a00      	cmp	r2, #0
   34a64:	f000 811b 	beq.w	34c9e <ip_interface_recvfrom+0x242>
   34a68:	4605      	mov	r5, r0
   34a6a:	468a      	mov	sl, r1
   34a6c:	4698      	mov	r8, r3
   34a6e:	4617      	mov	r7, r2
   34a70:	b11b      	cbz	r3, 34a7a <ip_interface_recvfrom+0x1e>
   34a72:	f013 0f1a 	tst.w	r3, #26
   34a76:	f000 810f 	beq.w	34c98 <ip_interface_recvfrom+0x23c>
   34a7a:	4628      	mov	r0, r5
   34a7c:	f001 f9b4 	bl	35de8 <interface_socket_from_handle_get>
   34a80:	4604      	mov	r4, r0
   34a82:	2800      	cmp	r0, #0
   34a84:	f000 810e 	beq.w	34ca4 <ip_interface_recvfrom+0x248>
   34a88:	6803      	ldr	r3, [r0, #0]
   34a8a:	02d9      	lsls	r1, r3, #11
   34a8c:	d564      	bpl.n	34b58 <ip_interface_recvfrom+0xfc>
   34a8e:	f018 0f02 	tst.w	r8, #2
   34a92:	bf18      	it	ne
   34a94:	f04f 0900 	movne.w	r9, #0
   34a98:	f04f 3bff 	mov.w	fp, #4294967295
   34a9c:	bf08      	it	eq
   34a9e:	6803      	ldreq	r3, [r0, #0]
   34aa0:	f008 0610 	and.w	r6, r8, #16
   34aa4:	bf04      	itt	eq
   34aa6:	f083 5980 	eoreq.w	r9, r3, #268435456	; 0x10000000
   34aaa:	f3c9 7900 	ubfxeq	r9, r9, #28, #1
   34aae:	6823      	ldr	r3, [r4, #0]
   34ab0:	03da      	lsls	r2, r3, #15
   34ab2:	d56c      	bpl.n	34b8e <ip_interface_recvfrom+0x132>
   34ab4:	6823      	ldr	r3, [r4, #0]
   34ab6:	69e0      	ldr	r0, [r4, #28]
   34ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   34abc:	6023      	str	r3, [r4, #0]
   34abe:	6803      	ldr	r3, [r0, #0]
   34ac0:	68db      	ldr	r3, [r3, #12]
   34ac2:	4798      	blx	r3
   34ac4:	f1b0 3fff 	cmp.w	r0, #4294967295
   34ac8:	4683      	mov	fp, r0
   34aca:	d07f      	beq.n	34bcc <ip_interface_recvfrom+0x170>
   34acc:	4287      	cmp	r7, r0
   34ace:	dd03      	ble.n	34ad8 <ip_interface_recvfrom+0x7c>
   34ad0:	6923      	ldr	r3, [r4, #16]
   34ad2:	2b01      	cmp	r3, #1
   34ad4:	f000 80a6 	beq.w	34c24 <ip_interface_recvfrom+0x1c8>
   34ad8:	2600      	movs	r6, #0
   34ada:	69e0      	ldr	r0, [r4, #28]
   34adc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   34ade:	b103      	cbz	r3, 34ae2 <ip_interface_recvfrom+0x86>
   34ae0:	681b      	ldr	r3, [r3, #0]
   34ae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   34ae4:	e9cd a700 	strd	sl, r7, [sp]
   34ae8:	e9cd 2302 	strd	r2, r3, [sp, #8]
   34aec:	6803      	ldr	r3, [r0, #0]
   34aee:	4642      	mov	r2, r8
   34af0:	689b      	ldr	r3, [r3, #8]
   34af2:	4669      	mov	r1, sp
   34af4:	4798      	blx	r3
   34af6:	4683      	mov	fp, r0
   34af8:	69e0      	ldr	r0, [r4, #28]
   34afa:	f1bb 3fff 	cmp.w	fp, #4294967295
   34afe:	6803      	ldr	r3, [r0, #0]
   34b00:	bf18      	it	ne
   34b02:	2501      	movne	r5, #1
   34b04:	68db      	ldr	r3, [r3, #12]
   34b06:	bf0a      	itet	eq
   34b08:	2500      	moveq	r5, #0
   34b0a:	f04f 0900 	movne.w	r9, #0
   34b0e:	f04f 0923 	moveq.w	r9, #35	; 0x23
   34b12:	4798      	blx	r3
   34b14:	3001      	adds	r0, #1
   34b16:	d135      	bne.n	34b84 <ip_interface_recvfrom+0x128>
   34b18:	2e00      	cmp	r6, #0
   34b1a:	f000 80b5 	beq.w	34c88 <ip_interface_recvfrom+0x22c>
   34b1e:	2d00      	cmp	r5, #0
   34b20:	f000 80a5 	beq.w	34c6e <ip_interface_recvfrom+0x212>
   34b24:	6823      	ldr	r3, [r4, #0]
   34b26:	0319      	lsls	r1, r3, #12
   34b28:	d506      	bpl.n	34b38 <ip_interface_recvfrom+0xdc>
   34b2a:	6823      	ldr	r3, [r4, #0]
   34b2c:	b29b      	uxth	r3, r3
   34b2e:	2b0d      	cmp	r3, #13
   34b30:	d002      	beq.n	34b38 <ip_interface_recvfrom+0xdc>
   34b32:	6923      	ldr	r3, [r4, #16]
   34b34:	2b01      	cmp	r3, #1
   34b36:	d025      	beq.n	34b84 <ip_interface_recvfrom+0x128>
   34b38:	6823      	ldr	r3, [r4, #0]
   34b3a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   34b3e:	6823      	ldr	r3, [r4, #0]
   34b40:	f040 80b3 	bne.w	34caa <ip_interface_recvfrom+0x24e>
   34b44:	031a      	lsls	r2, r3, #12
   34b46:	d474      	bmi.n	34c32 <ip_interface_recvfrom+0x1d6>
   34b48:	f1b9 0f00 	cmp.w	r9, #0
   34b4c:	f040 8089 	bne.w	34c62 <ip_interface_recvfrom+0x206>
   34b50:	4658      	mov	r0, fp
   34b52:	b005      	add	sp, #20
   34b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34b58:	6803      	ldr	r3, [r0, #0]
   34b5a:	b29b      	uxth	r3, r3
   34b5c:	2b06      	cmp	r3, #6
   34b5e:	d072      	beq.n	34c46 <ip_interface_recvfrom+0x1ea>
   34b60:	6803      	ldr	r3, [r0, #0]
   34b62:	b29b      	uxth	r3, r3
   34b64:	2b07      	cmp	r3, #7
   34b66:	bf0c      	ite	eq
   34b68:	f04f 0909 	moveq.w	r9, #9
   34b6c:	f04f 0939 	movne.w	r9, #57	; 0x39
   34b70:	69e0      	ldr	r0, [r4, #28]
   34b72:	6803      	ldr	r3, [r0, #0]
   34b74:	68db      	ldr	r3, [r3, #12]
   34b76:	4798      	blx	r3
   34b78:	f1b0 3fff 	cmp.w	r0, #4294967295
   34b7c:	4683      	mov	fp, r0
   34b7e:	d0db      	beq.n	34b38 <ip_interface_recvfrom+0xdc>
   34b80:	f04f 3bff 	mov.w	fp, #4294967295
   34b84:	6823      	ldr	r3, [r4, #0]
   34b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   34b8a:	6023      	str	r3, [r4, #0]
   34b8c:	e7dc      	b.n	34b48 <ip_interface_recvfrom+0xec>
   34b8e:	f1b9 0f00 	cmp.w	r9, #0
   34b92:	d07d      	beq.n	34c90 <ip_interface_recvfrom+0x234>
   34b94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   34b98:	6a23      	ldr	r3, [r4, #32]
   34b9a:	4611      	mov	r1, r2
   34b9c:	2b00      	cmp	r3, #0
   34b9e:	bf08      	it	eq
   34ba0:	f04f 33ff 	moveq.w	r3, #4294967295
   34ba4:	4628      	mov	r0, r5
   34ba6:	f001 f8ab 	bl	35d00 <interface_socket_wait>
   34baa:	4681      	mov	r9, r0
   34bac:	b358      	cbz	r0, 34c06 <ip_interface_recvfrom+0x1aa>
   34bae:	6823      	ldr	r3, [r4, #0]
   34bb0:	69e0      	ldr	r0, [r4, #28]
   34bb2:	031b      	lsls	r3, r3, #12
   34bb4:	d521      	bpl.n	34bfa <ip_interface_recvfrom+0x19e>
   34bb6:	6823      	ldr	r3, [r4, #0]
   34bb8:	b29b      	uxth	r3, r3
   34bba:	2b0d      	cmp	r3, #13
   34bbc:	d01d      	beq.n	34bfa <ip_interface_recvfrom+0x19e>
   34bbe:	6926      	ldr	r6, [r4, #16]
   34bc0:	f1a6 0601 	sub.w	r6, r6, #1
   34bc4:	fab6 f686 	clz	r6, r6
   34bc8:	0976      	lsrs	r6, r6, #5
   34bca:	e787      	b.n	34adc <ip_interface_recvfrom+0x80>
   34bcc:	6823      	ldr	r3, [r4, #0]
   34bce:	0318      	lsls	r0, r3, #12
   34bd0:	d5dd      	bpl.n	34b8e <ip_interface_recvfrom+0x132>
   34bd2:	6823      	ldr	r3, [r4, #0]
   34bd4:	b29b      	uxth	r3, r3
   34bd6:	2b0d      	cmp	r3, #13
   34bd8:	d0d9      	beq.n	34b8e <ip_interface_recvfrom+0x132>
   34bda:	6923      	ldr	r3, [r4, #16]
   34bdc:	69e0      	ldr	r0, [r4, #28]
   34bde:	2b01      	cmp	r3, #1
   34be0:	d034      	beq.n	34c4c <ip_interface_recvfrom+0x1f0>
   34be2:	f04f 0939 	mov.w	r9, #57	; 0x39
   34be6:	6823      	ldr	r3, [r4, #0]
   34be8:	0c1b      	lsrs	r3, r3, #16
   34bea:	041b      	lsls	r3, r3, #16
   34bec:	f043 030d 	orr.w	r3, r3, #13
   34bf0:	6023      	str	r3, [r4, #0]
   34bf2:	6823      	ldr	r3, [r4, #0]
   34bf4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   34bf8:	6023      	str	r3, [r4, #0]
   34bfa:	6803      	ldr	r3, [r0, #0]
   34bfc:	68db      	ldr	r3, [r3, #12]
   34bfe:	4798      	blx	r3
   34c00:	3001      	adds	r0, #1
   34c02:	d1bf      	bne.n	34b84 <ip_interface_recvfrom+0x128>
   34c04:	e798      	b.n	34b38 <ip_interface_recvfrom+0xdc>
   34c06:	4628      	mov	r0, r5
   34c08:	f001 f8ee 	bl	35de8 <interface_socket_from_handle_get>
   34c0c:	b138      	cbz	r0, 34c1e <ip_interface_recvfrom+0x1c2>
   34c0e:	f8d0 9004 	ldr.w	r9, [r0, #4]
   34c12:	f1b9 0f00 	cmp.w	r9, #0
   34c16:	d002      	beq.n	34c1e <ip_interface_recvfrom+0x1c2>
   34c18:	2300      	movs	r3, #0
   34c1a:	6043      	str	r3, [r0, #4]
   34c1c:	e7c7      	b.n	34bae <ip_interface_recvfrom+0x152>
   34c1e:	f04f 0901 	mov.w	r9, #1
   34c22:	e744      	b.n	34aae <ip_interface_recvfrom+0x52>
   34c24:	b11e      	cbz	r6, 34c2e <ip_interface_recvfrom+0x1d2>
   34c26:	6823      	ldr	r3, [r4, #0]
   34c28:	00db      	lsls	r3, r3, #3
   34c2a:	d5b3      	bpl.n	34b94 <ip_interface_recvfrom+0x138>
   34c2c:	e754      	b.n	34ad8 <ip_interface_recvfrom+0x7c>
   34c2e:	69e0      	ldr	r0, [r4, #28]
   34c30:	e754      	b.n	34adc <ip_interface_recvfrom+0x80>
   34c32:	6823      	ldr	r3, [r4, #0]
   34c34:	b29b      	uxth	r3, r3
   34c36:	2b0d      	cmp	r3, #13
   34c38:	d186      	bne.n	34b48 <ip_interface_recvfrom+0xec>
   34c3a:	68a3      	ldr	r3, [r4, #8]
   34c3c:	2b00      	cmp	r3, #0
   34c3e:	d083      	beq.n	34b48 <ip_interface_recvfrom+0xec>
   34c40:	f8d4 9008 	ldr.w	r9, [r4, #8]
   34c44:	e780      	b.n	34b48 <ip_interface_recvfrom+0xec>
   34c46:	f04f 0909 	mov.w	r9, #9
   34c4a:	e791      	b.n	34b70 <ip_interface_recvfrom+0x114>
   34c4c:	6803      	ldr	r3, [r0, #0]
   34c4e:	68db      	ldr	r3, [r3, #12]
   34c50:	4798      	blx	r3
   34c52:	3001      	adds	r0, #1
   34c54:	d00b      	beq.n	34c6e <ip_interface_recvfrom+0x212>
   34c56:	f04f 0923 	mov.w	r9, #35	; 0x23
   34c5a:	6823      	ldr	r3, [r4, #0]
   34c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   34c60:	6023      	str	r3, [r4, #0]
   34c62:	4648      	mov	r0, r9
   34c64:	f7f2 f9f8 	bl	27058 <bsd_os_errno_set>
   34c68:	f04f 3bff 	mov.w	fp, #4294967295
   34c6c:	e770      	b.n	34b50 <ip_interface_recvfrom+0xf4>
   34c6e:	6823      	ldr	r3, [r4, #0]
   34c70:	f04f 0b00 	mov.w	fp, #0
   34c74:	0c1b      	lsrs	r3, r3, #16
   34c76:	041b      	lsls	r3, r3, #16
   34c78:	f043 030d 	orr.w	r3, r3, #13
   34c7c:	6023      	str	r3, [r4, #0]
   34c7e:	6823      	ldr	r3, [r4, #0]
   34c80:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   34c84:	6023      	str	r3, [r4, #0]
   34c86:	e763      	b.n	34b50 <ip_interface_recvfrom+0xf4>
   34c88:	2d00      	cmp	r5, #0
   34c8a:	f47f af4b 	bne.w	34b24 <ip_interface_recvfrom+0xc8>
   34c8e:	e753      	b.n	34b38 <ip_interface_recvfrom+0xdc>
   34c90:	f04f 0923 	mov.w	r9, #35	; 0x23
   34c94:	69e0      	ldr	r0, [r4, #28]
   34c96:	e7b0      	b.n	34bfa <ip_interface_recvfrom+0x19e>
   34c98:	f04f 092d 	mov.w	r9, #45	; 0x2d
   34c9c:	e7e1      	b.n	34c62 <ip_interface_recvfrom+0x206>
   34c9e:	f04f 0916 	mov.w	r9, #22
   34ca2:	e7de      	b.n	34c62 <ip_interface_recvfrom+0x206>
   34ca4:	f04f 0909 	mov.w	r9, #9
   34ca8:	e7db      	b.n	34c62 <ip_interface_recvfrom+0x206>
   34caa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   34cae:	6023      	str	r3, [r4, #0]
   34cb0:	6823      	ldr	r3, [r4, #0]
   34cb2:	f04f 0969 	mov.w	r9, #105	; 0x69
   34cb6:	0c1b      	lsrs	r3, r3, #16
   34cb8:	041b      	lsls	r3, r3, #16
   34cba:	f043 030d 	orr.w	r3, r3, #13
   34cbe:	6023      	str	r3, [r4, #0]
   34cc0:	e7cf      	b.n	34c62 <ip_interface_recvfrom+0x206>
   34cc2:	bf00      	nop

00034cc4 <ip_interface_connect>:
   34cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34cc8:	b083      	sub	sp, #12
   34cca:	2900      	cmp	r1, #0
   34ccc:	d049      	beq.n	34d62 <ip_interface_connect+0x9e>
   34cce:	4616      	mov	r6, r2
   34cd0:	2a00      	cmp	r2, #0
   34cd2:	d046      	beq.n	34d62 <ip_interface_connect+0x9e>
   34cd4:	4607      	mov	r7, r0
   34cd6:	4688      	mov	r8, r1
   34cd8:	f001 f886 	bl	35de8 <interface_socket_from_handle_get>
   34cdc:	4605      	mov	r5, r0
   34cde:	2800      	cmp	r0, #0
   34ce0:	f000 80a8 	beq.w	34e34 <ip_interface_connect+0x170>
   34ce4:	6803      	ldr	r3, [r0, #0]
   34ce6:	b29b      	uxth	r3, r3
   34ce8:	2b02      	cmp	r3, #2
   34cea:	d004      	beq.n	34cf6 <ip_interface_connect+0x32>
   34cec:	6803      	ldr	r3, [r0, #0]
   34cee:	b29b      	uxth	r3, r3
   34cf0:	2b04      	cmp	r3, #4
   34cf2:	f040 808b 	bne.w	34e0c <ip_interface_connect+0x148>
   34cf6:	6829      	ldr	r1, [r5, #0]
   34cf8:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   34cfc:	f040 8082 	bne.w	34e04 <ip_interface_connect+0x140>
   34d00:	a802      	add	r0, sp, #8
   34d02:	f840 1d04 	str.w	r1, [r0, #-4]!
   34d06:	f8d5 9018 	ldr.w	r9, [r5, #24]
   34d0a:	f7fb fe6b 	bl	309e4 <rpc_ip_client_request_alloc>
   34d0e:	bb90      	cbnz	r0, 34d76 <ip_interface_connect+0xb2>
   34d10:	2108      	movs	r1, #8
   34d12:	043b      	lsls	r3, r7, #16
   34d14:	9c01      	ldr	r4, [sp, #4]
   34d16:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
   34d1a:	f042 0202 	orr.w	r2, r2, #2
   34d1e:	60e2      	str	r2, [r4, #12]
   34d20:	f8c4 9010 	str.w	r9, [r4, #16]
   34d24:	7260      	strb	r0, [r4, #9]
   34d26:	72a0      	strb	r0, [r4, #10]
   34d28:	72e0      	strb	r0, [r4, #11]
   34d2a:	7221      	strb	r1, [r4, #8]
   34d2c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
   34d30:	f043 0302 	orr.w	r3, r3, #2
   34d34:	60e3      	str	r3, [r4, #12]
   34d36:	68a3      	ldr	r3, [r4, #8]
   34d38:	69aa      	ldr	r2, [r5, #24]
   34d3a:	3304      	adds	r3, #4
   34d3c:	6122      	str	r2, [r4, #16]
   34d3e:	60a3      	str	r3, [r4, #8]
   34d40:	68eb      	ldr	r3, [r5, #12]
   34d42:	f8d8 2004 	ldr.w	r2, [r8, #4]
   34d46:	4293      	cmp	r3, r2
   34d48:	d11a      	bne.n	34d80 <ip_interface_connect+0xbc>
   34d4a:	f898 2000 	ldrb.w	r2, [r8]
   34d4e:	4296      	cmp	r6, r2
   34d50:	d107      	bne.n	34d62 <ip_interface_connect+0x9e>
   34d52:	2b02      	cmp	r3, #2
   34d54:	f104 0018 	add.w	r0, r4, #24
   34d58:	d014      	beq.n	34d84 <ip_interface_connect+0xc0>
   34d5a:	2b0a      	cmp	r3, #10
   34d5c:	d101      	bne.n	34d62 <ip_interface_connect+0x9e>
   34d5e:	2e24      	cmp	r6, #36	; 0x24
   34d60:	d01c      	beq.n	34d9c <ip_interface_connect+0xd8>
   34d62:	2416      	movs	r4, #22
   34d64:	4620      	mov	r0, r4
   34d66:	f7f2 f977 	bl	27058 <bsd_os_errno_set>
   34d6a:	f04f 34ff 	mov.w	r4, #4294967295
   34d6e:	4620      	mov	r0, r4
   34d70:	b003      	add	sp, #12
   34d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   34d76:	9c01      	ldr	r4, [sp, #4]
   34d78:	2c00      	cmp	r4, #0
   34d7a:	d059      	beq.n	34e30 <ip_interface_connect+0x16c>
   34d7c:	043b      	lsls	r3, r7, #16
   34d7e:	e7d5      	b.n	34d2c <ip_interface_connect+0x68>
   34d80:	242f      	movs	r4, #47	; 0x2f
   34d82:	e7ef      	b.n	34d64 <ip_interface_connect+0xa0>
   34d84:	2e10      	cmp	r6, #16
   34d86:	d1ec      	bne.n	34d62 <ip_interface_connect+0x9e>
   34d88:	2204      	movs	r2, #4
   34d8a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   34d8e:	f108 010c 	add.w	r1, r8, #12
   34d92:	82e2      	strh	r2, [r4, #22]
   34d94:	82a3      	strh	r3, [r4, #20]
   34d96:	f00b fc41 	bl	4061c <memcpy>
   34d9a:	e008      	b.n	34dae <ip_interface_connect+0xea>
   34d9c:	2210      	movs	r2, #16
   34d9e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   34da2:	eb08 0102 	add.w	r1, r8, r2
   34da6:	82e2      	strh	r2, [r4, #22]
   34da8:	82a3      	strh	r3, [r4, #20]
   34daa:	f00b fc37 	bl	4061c <memcpy>
   34dae:	68a3      	ldr	r3, [r4, #8]
   34db0:	8ae2      	ldrh	r2, [r4, #22]
   34db2:	f247 0102 	movw	r1, #28674	; 0x7002
   34db6:	4413      	add	r3, r2
   34db8:	60a3      	str	r3, [r4, #8]
   34dba:	682e      	ldr	r6, [r5, #0]
   34dbc:	682b      	ldr	r3, [r5, #0]
   34dbe:	4620      	mov	r0, r4
   34dc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   34dc4:	602b      	str	r3, [r5, #0]
   34dc6:	f7fb fe21 	bl	30a0c <rpc_ip_client_request_send>
   34dca:	b988      	cbnz	r0, 34df0 <ip_interface_connect+0x12c>
   34dcc:	682b      	ldr	r3, [r5, #0]
   34dce:	f013 5880 	ands.w	r8, r3, #268435456	; 0x10000000
   34dd2:	d119      	bne.n	34e08 <ip_interface_connect+0x144>
   34dd4:	f04f 33ff 	mov.w	r3, #4294967295
   34dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   34ddc:	2105      	movs	r1, #5
   34dde:	4638      	mov	r0, r7
   34de0:	f000 ff8e 	bl	35d00 <interface_socket_wait>
   34de4:	4604      	mov	r4, r0
   34de6:	b1c0      	cbz	r0, 34e1a <ip_interface_connect+0x156>
   34de8:	2c73      	cmp	r4, #115	; 0x73
   34dea:	d0bb      	beq.n	34d64 <ip_interface_connect+0xa0>
   34dec:	602e      	str	r6, [r5, #0]
   34dee:	e7b9      	b.n	34d64 <ip_interface_connect+0xa0>
   34df0:	6820      	ldr	r0, [r4, #0]
   34df2:	b108      	cbz	r0, 34df8 <ip_interface_connect+0x134>
   34df4:	f7fb fe28 	bl	30a48 <rpc_ip_client_data_free>
   34df8:	4620      	mov	r0, r4
   34dfa:	f7fb fe1d 	bl	30a38 <rpc_ip_client_message_free>
   34dfe:	2423      	movs	r4, #35	; 0x23
   34e00:	602e      	str	r6, [r5, #0]
   34e02:	e7af      	b.n	34d64 <ip_interface_connect+0xa0>
   34e04:	2472      	movs	r4, #114	; 0x72
   34e06:	e7ad      	b.n	34d64 <ip_interface_connect+0xa0>
   34e08:	2473      	movs	r4, #115	; 0x73
   34e0a:	e7ab      	b.n	34d64 <ip_interface_connect+0xa0>
   34e0c:	6803      	ldr	r3, [r0, #0]
   34e0e:	b29b      	uxth	r3, r3
   34e10:	2b05      	cmp	r3, #5
   34e12:	bf14      	ite	ne
   34e14:	2409      	movne	r4, #9
   34e16:	2438      	moveq	r4, #56	; 0x38
   34e18:	e7a4      	b.n	34d64 <ip_interface_connect+0xa0>
   34e1a:	4638      	mov	r0, r7
   34e1c:	f000 ffe4 	bl	35de8 <interface_socket_from_handle_get>
   34e20:	2800      	cmp	r0, #0
   34e22:	d0a4      	beq.n	34d6e <ip_interface_connect+0xaa>
   34e24:	6844      	ldr	r4, [r0, #4]
   34e26:	2c00      	cmp	r4, #0
   34e28:	d0a1      	beq.n	34d6e <ip_interface_connect+0xaa>
   34e2a:	f8c0 8004 	str.w	r8, [r0, #4]
   34e2e:	e7db      	b.n	34de8 <ip_interface_connect+0x124>
   34e30:	240c      	movs	r4, #12
   34e32:	e797      	b.n	34d64 <ip_interface_connect+0xa0>
   34e34:	2409      	movs	r4, #9
   34e36:	e795      	b.n	34d64 <ip_interface_connect+0xa0>

00034e38 <ip_interface_bind>:
   34e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34e3c:	b083      	sub	sp, #12
   34e3e:	b3b1      	cbz	r1, 34eae <ip_interface_bind+0x76>
   34e40:	4616      	mov	r6, r2
   34e42:	b3a2      	cbz	r2, 34eae <ip_interface_bind+0x76>
   34e44:	4607      	mov	r7, r0
   34e46:	4688      	mov	r8, r1
   34e48:	f000 ffce 	bl	35de8 <interface_socket_from_handle_get>
   34e4c:	4605      	mov	r5, r0
   34e4e:	2800      	cmp	r0, #0
   34e50:	d04a      	beq.n	34ee8 <ip_interface_bind+0xb0>
   34e52:	6803      	ldr	r3, [r0, #0]
   34e54:	b29b      	uxth	r3, r3
   34e56:	2b02      	cmp	r3, #2
   34e58:	d146      	bne.n	34ee8 <ip_interface_bind+0xb0>
   34e5a:	2100      	movs	r1, #0
   34e5c:	a802      	add	r0, sp, #8
   34e5e:	f840 1d04 	str.w	r1, [r0, #-4]!
   34e62:	f8d5 9018 	ldr.w	r9, [r5, #24]
   34e66:	f7fb fdbd 	bl	309e4 <rpc_ip_client_request_alloc>
   34e6a:	bb50      	cbnz	r0, 34ec2 <ip_interface_bind+0x8a>
   34e6c:	f247 0305 	movw	r3, #28677	; 0x7005
   34e70:	2208      	movs	r2, #8
   34e72:	9c01      	ldr	r4, [sp, #4]
   34e74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   34e78:	60e3      	str	r3, [r4, #12]
   34e7a:	f8c4 9010 	str.w	r9, [r4, #16]
   34e7e:	7260      	strb	r0, [r4, #9]
   34e80:	72a0      	strb	r0, [r4, #10]
   34e82:	72e0      	strb	r0, [r4, #11]
   34e84:	7222      	strb	r2, [r4, #8]
   34e86:	68a3      	ldr	r3, [r4, #8]
   34e88:	3304      	adds	r3, #4
   34e8a:	60a3      	str	r3, [r4, #8]
   34e8c:	68eb      	ldr	r3, [r5, #12]
   34e8e:	f8d8 2004 	ldr.w	r2, [r8, #4]
   34e92:	4293      	cmp	r3, r2
   34e94:	d11a      	bne.n	34ecc <ip_interface_bind+0x94>
   34e96:	f898 2000 	ldrb.w	r2, [r8]
   34e9a:	4296      	cmp	r6, r2
   34e9c:	d107      	bne.n	34eae <ip_interface_bind+0x76>
   34e9e:	2b02      	cmp	r3, #2
   34ea0:	f104 0018 	add.w	r0, r4, #24
   34ea4:	d014      	beq.n	34ed0 <ip_interface_bind+0x98>
   34ea6:	2b0a      	cmp	r3, #10
   34ea8:	d101      	bne.n	34eae <ip_interface_bind+0x76>
   34eaa:	2e24      	cmp	r6, #36	; 0x24
   34eac:	d01e      	beq.n	34eec <ip_interface_bind+0xb4>
   34eae:	2416      	movs	r4, #22
   34eb0:	4620      	mov	r0, r4
   34eb2:	f7f2 f8d1 	bl	27058 <bsd_os_errno_set>
   34eb6:	f04f 34ff 	mov.w	r4, #4294967295
   34eba:	4620      	mov	r0, r4
   34ebc:	b003      	add	sp, #12
   34ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   34ec2:	9c01      	ldr	r4, [sp, #4]
   34ec4:	2c00      	cmp	r4, #0
   34ec6:	d1de      	bne.n	34e86 <ip_interface_bind+0x4e>
   34ec8:	240c      	movs	r4, #12
   34eca:	e7f1      	b.n	34eb0 <ip_interface_bind+0x78>
   34ecc:	242f      	movs	r4, #47	; 0x2f
   34ece:	e7ef      	b.n	34eb0 <ip_interface_bind+0x78>
   34ed0:	2e10      	cmp	r6, #16
   34ed2:	d1ec      	bne.n	34eae <ip_interface_bind+0x76>
   34ed4:	2204      	movs	r2, #4
   34ed6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   34eda:	f108 010c 	add.w	r1, r8, #12
   34ede:	82e2      	strh	r2, [r4, #22]
   34ee0:	82a3      	strh	r3, [r4, #20]
   34ee2:	f00b fb9b 	bl	4061c <memcpy>
   34ee6:	e00a      	b.n	34efe <ip_interface_bind+0xc6>
   34ee8:	2409      	movs	r4, #9
   34eea:	e7e1      	b.n	34eb0 <ip_interface_bind+0x78>
   34eec:	2210      	movs	r2, #16
   34eee:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   34ef2:	eb08 0102 	add.w	r1, r8, r2
   34ef6:	82e2      	strh	r2, [r4, #22]
   34ef8:	82a3      	strh	r3, [r4, #20]
   34efa:	f00b fb8f 	bl	4061c <memcpy>
   34efe:	68a3      	ldr	r3, [r4, #8]
   34f00:	8ae2      	ldrh	r2, [r4, #22]
   34f02:	f247 0105 	movw	r1, #28677	; 0x7005
   34f06:	4413      	add	r3, r2
   34f08:	60a3      	str	r3, [r4, #8]
   34f0a:	682b      	ldr	r3, [r5, #0]
   34f0c:	4620      	mov	r0, r4
   34f0e:	0c1b      	lsrs	r3, r3, #16
   34f10:	041b      	lsls	r3, r3, #16
   34f12:	f043 0303 	orr.w	r3, r3, #3
   34f16:	602b      	str	r3, [r5, #0]
   34f18:	682e      	ldr	r6, [r5, #0]
   34f1a:	f7fb fd77 	bl	30a0c <rpc_ip_client_request_send>
   34f1e:	4680      	mov	r8, r0
   34f20:	b980      	cbnz	r0, 34f44 <ip_interface_bind+0x10c>
   34f22:	f04f 33ff 	mov.w	r3, #4294967295
   34f26:	f64f 72ff 	movw	r2, #65535	; 0xffff
   34f2a:	2104      	movs	r1, #4
   34f2c:	4638      	mov	r0, r7
   34f2e:	f000 fee7 	bl	35d00 <interface_socket_wait>
   34f32:	4604      	mov	r4, r0
   34f34:	b1a0      	cbz	r0, 34f60 <ip_interface_bind+0x128>
   34f36:	682b      	ldr	r3, [r5, #0]
   34f38:	0c1b      	lsrs	r3, r3, #16
   34f3a:	041b      	lsls	r3, r3, #16
   34f3c:	f043 0302 	orr.w	r3, r3, #2
   34f40:	602b      	str	r3, [r5, #0]
   34f42:	e7b5      	b.n	34eb0 <ip_interface_bind+0x78>
   34f44:	6820      	ldr	r0, [r4, #0]
   34f46:	b108      	cbz	r0, 34f4c <ip_interface_bind+0x114>
   34f48:	f7fb fd7e 	bl	30a48 <rpc_ip_client_data_free>
   34f4c:	0c36      	lsrs	r6, r6, #16
   34f4e:	0436      	lsls	r6, r6, #16
   34f50:	4620      	mov	r0, r4
   34f52:	f046 0602 	orr.w	r6, r6, #2
   34f56:	f7fb fd6f 	bl	30a38 <rpc_ip_client_message_free>
   34f5a:	2423      	movs	r4, #35	; 0x23
   34f5c:	602e      	str	r6, [r5, #0]
   34f5e:	e7a7      	b.n	34eb0 <ip_interface_bind+0x78>
   34f60:	4638      	mov	r0, r7
   34f62:	f000 ff41 	bl	35de8 <interface_socket_from_handle_get>
   34f66:	2800      	cmp	r0, #0
   34f68:	d0a7      	beq.n	34eba <ip_interface_bind+0x82>
   34f6a:	6844      	ldr	r4, [r0, #4]
   34f6c:	2c00      	cmp	r4, #0
   34f6e:	d0a4      	beq.n	34eba <ip_interface_bind+0x82>
   34f70:	f8c0 8004 	str.w	r8, [r0, #4]
   34f74:	e7df      	b.n	34f36 <ip_interface_bind+0xfe>
   34f76:	bf00      	nop

00034f78 <ip_interface_listen>:
   34f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34f7c:	b082      	sub	sp, #8
   34f7e:	4606      	mov	r6, r0
   34f80:	f000 ff32 	bl	35de8 <interface_socket_from_handle_get>
   34f84:	2800      	cmp	r0, #0
   34f86:	d067      	beq.n	35058 <ip_interface_listen+0xe0>
   34f88:	6803      	ldr	r3, [r0, #0]
   34f8a:	4605      	mov	r5, r0
   34f8c:	b29b      	uxth	r3, r3
   34f8e:	2b04      	cmp	r3, #4
   34f90:	d162      	bne.n	35058 <ip_interface_listen+0xe0>
   34f92:	2100      	movs	r1, #0
   34f94:	4a32      	ldr	r2, [pc, #200]	; (35060 <ip_interface_listen+0xe8>)
   34f96:	4630      	mov	r0, r6
   34f98:	f000 fe7a 	bl	35c90 <interface_socket_packet_handler_update>
   34f9c:	4601      	mov	r1, r0
   34f9e:	2800      	cmp	r0, #0
   34fa0:	d15c      	bne.n	3505c <ip_interface_listen+0xe4>
   34fa2:	a802      	add	r0, sp, #8
   34fa4:	f840 1d04 	str.w	r1, [r0, #-4]!
   34fa8:	69af      	ldr	r7, [r5, #24]
   34faa:	f7fb fd1b 	bl	309e4 <rpc_ip_client_request_alloc>
   34fae:	bba8      	cbnz	r0, 3501c <ip_interface_listen+0xa4>
   34fb0:	f247 0308 	movw	r3, #28680	; 0x7008
   34fb4:	2208      	movs	r2, #8
   34fb6:	9c01      	ldr	r4, [sp, #4]
   34fb8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   34fbc:	60e3      	str	r3, [r4, #12]
   34fbe:	6127      	str	r7, [r4, #16]
   34fc0:	7260      	strb	r0, [r4, #9]
   34fc2:	72a0      	strb	r0, [r4, #10]
   34fc4:	72e0      	strb	r0, [r4, #11]
   34fc6:	7222      	strb	r2, [r4, #8]
   34fc8:	68a3      	ldr	r3, [r4, #8]
   34fca:	f247 0108 	movw	r1, #28680	; 0x7008
   34fce:	3304      	adds	r3, #4
   34fd0:	60a3      	str	r3, [r4, #8]
   34fd2:	682b      	ldr	r3, [r5, #0]
   34fd4:	4620      	mov	r0, r4
   34fd6:	0c1b      	lsrs	r3, r3, #16
   34fd8:	041b      	lsls	r3, r3, #16
   34fda:	f043 0306 	orr.w	r3, r3, #6
   34fde:	602b      	str	r3, [r5, #0]
   34fe0:	682f      	ldr	r7, [r5, #0]
   34fe2:	f7fb fd13 	bl	30a0c <rpc_ip_client_request_send>
   34fe6:	4680      	mov	r8, r0
   34fe8:	b9e8      	cbnz	r0, 35026 <ip_interface_listen+0xae>
   34fea:	f04f 33ff 	mov.w	r3, #4294967295
   34fee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   34ff2:	2107      	movs	r1, #7
   34ff4:	4630      	mov	r0, r6
   34ff6:	f000 fe83 	bl	35d00 <interface_socket_wait>
   34ffa:	4604      	mov	r4, r0
   34ffc:	b308      	cbz	r0, 35042 <ip_interface_listen+0xca>
   34ffe:	682b      	ldr	r3, [r5, #0]
   35000:	0c1b      	lsrs	r3, r3, #16
   35002:	041b      	lsls	r3, r3, #16
   35004:	f043 0304 	orr.w	r3, r3, #4
   35008:	602b      	str	r3, [r5, #0]
   3500a:	4620      	mov	r0, r4
   3500c:	f7f2 f824 	bl	27058 <bsd_os_errno_set>
   35010:	f04f 34ff 	mov.w	r4, #4294967295
   35014:	4620      	mov	r0, r4
   35016:	b002      	add	sp, #8
   35018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3501c:	9c01      	ldr	r4, [sp, #4]
   3501e:	2c00      	cmp	r4, #0
   35020:	d1d2      	bne.n	34fc8 <ip_interface_listen+0x50>
   35022:	240c      	movs	r4, #12
   35024:	e7f1      	b.n	3500a <ip_interface_listen+0x92>
   35026:	6820      	ldr	r0, [r4, #0]
   35028:	b108      	cbz	r0, 3502e <ip_interface_listen+0xb6>
   3502a:	f7fb fd0d 	bl	30a48 <rpc_ip_client_data_free>
   3502e:	0c3f      	lsrs	r7, r7, #16
   35030:	043f      	lsls	r7, r7, #16
   35032:	4620      	mov	r0, r4
   35034:	f047 0704 	orr.w	r7, r7, #4
   35038:	f7fb fcfe 	bl	30a38 <rpc_ip_client_message_free>
   3503c:	2423      	movs	r4, #35	; 0x23
   3503e:	602f      	str	r7, [r5, #0]
   35040:	e7e3      	b.n	3500a <ip_interface_listen+0x92>
   35042:	4630      	mov	r0, r6
   35044:	f000 fed0 	bl	35de8 <interface_socket_from_handle_get>
   35048:	2800      	cmp	r0, #0
   3504a:	d0e3      	beq.n	35014 <ip_interface_listen+0x9c>
   3504c:	6844      	ldr	r4, [r0, #4]
   3504e:	2c00      	cmp	r4, #0
   35050:	d0e0      	beq.n	35014 <ip_interface_listen+0x9c>
   35052:	f8c0 8004 	str.w	r8, [r0, #4]
   35056:	e7d2      	b.n	34ffe <ip_interface_listen+0x86>
   35058:	2409      	movs	r4, #9
   3505a:	e7d6      	b.n	3500a <ip_interface_listen+0x92>
   3505c:	2423      	movs	r4, #35	; 0x23
   3505e:	e7d4      	b.n	3500a <ip_interface_listen+0x92>
   35060:	0003443d 	.word	0x0003443d

00035064 <ip_interface_accept>:
   35064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35068:	2500      	movs	r5, #0
   3506a:	b085      	sub	sp, #20
   3506c:	460f      	mov	r7, r1
   3506e:	4690      	mov	r8, r2
   35070:	9502      	str	r5, [sp, #8]
   35072:	4606      	mov	r6, r0
   35074:	f000 feb8 	bl	35de8 <interface_socket_from_handle_get>
   35078:	4604      	mov	r4, r0
   3507a:	2800      	cmp	r0, #0
   3507c:	f000 811c 	beq.w	352b8 <ip_interface_accept+0x254>
   35080:	6803      	ldr	r3, [r0, #0]
   35082:	b29b      	uxth	r3, r3
   35084:	2b07      	cmp	r3, #7
   35086:	d10a      	bne.n	3509e <ip_interface_accept+0x3a>
   35088:	6803      	ldr	r3, [r0, #0]
   3508a:	6805      	ldr	r5, [r0, #0]
   3508c:	00db      	lsls	r3, r3, #3
   3508e:	d416      	bmi.n	350be <ip_interface_accept+0x5a>
   35090:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   35094:	d019      	beq.n	350ca <ip_interface_accept+0x66>
   35096:	6805      	ldr	r5, [r0, #0]
   35098:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   3509c:	d124      	bne.n	350e8 <ip_interface_accept+0x84>
   3509e:	f04f 0909 	mov.w	r9, #9
   350a2:	9b02      	ldr	r3, [sp, #8]
   350a4:	b113      	cbz	r3, 350ac <ip_interface_accept+0x48>
   350a6:	4628      	mov	r0, r5
   350a8:	f000 fddc 	bl	35c64 <interface_socket_free>
   350ac:	4648      	mov	r0, r9
   350ae:	f04f 39ff 	mov.w	r9, #4294967295
   350b2:	f7f1 ffd1 	bl	27058 <bsd_os_errno_set>
   350b6:	4648      	mov	r0, r9
   350b8:	b005      	add	sp, #20
   350ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   350be:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   350c2:	d16d      	bne.n	351a0 <ip_interface_accept+0x13c>
   350c4:	f04f 0923 	mov.w	r9, #35	; 0x23
   350c8:	e7eb      	b.n	350a2 <ip_interface_accept+0x3e>
   350ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   350ce:	f04f 33ff 	mov.w	r3, #4294967295
   350d2:	4611      	mov	r1, r2
   350d4:	4630      	mov	r0, r6
   350d6:	f000 fe13 	bl	35d00 <interface_socket_wait>
   350da:	4681      	mov	r9, r0
   350dc:	2800      	cmp	r0, #0
   350de:	d07e      	beq.n	351de <ip_interface_accept+0x17a>
   350e0:	6825      	ldr	r5, [r4, #0]
   350e2:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   350e6:	d0dc      	beq.n	350a2 <ip_interface_accept+0x3e>
   350e8:	f04f 30ff 	mov.w	r0, #4294967295
   350ec:	2300      	movs	r3, #0
   350ee:	e9cd 0300 	strd	r0, r3, [sp]
   350f2:	4a75      	ldr	r2, [pc, #468]	; (352c8 <ip_interface_accept+0x264>)
   350f4:	6921      	ldr	r1, [r4, #16]
   350f6:	a802      	add	r0, sp, #8
   350f8:	f000 fd50 	bl	35b9c <interface_socket_allocate>
   350fc:	9b02      	ldr	r3, [sp, #8]
   350fe:	4605      	mov	r5, r0
   35100:	2b00      	cmp	r3, #0
   35102:	f000 80dd 	beq.w	352c0 <ip_interface_accept+0x25c>
   35106:	2100      	movs	r1, #0
   35108:	6962      	ldr	r2, [r4, #20]
   3510a:	a804      	add	r0, sp, #16
   3510c:	615a      	str	r2, [r3, #20]
   3510e:	68e2      	ldr	r2, [r4, #12]
   35110:	f840 1d04 	str.w	r1, [r0, #-4]!
   35114:	60da      	str	r2, [r3, #12]
   35116:	6922      	ldr	r2, [r4, #16]
   35118:	611a      	str	r2, [r3, #16]
   3511a:	f8d4 9018 	ldr.w	r9, [r4, #24]
   3511e:	f7fb fc61 	bl	309e4 <rpc_ip_client_request_alloc>
   35122:	2800      	cmp	r0, #0
   35124:	d143      	bne.n	351ae <ip_interface_accept+0x14a>
   35126:	f247 030c 	movw	r3, #28684	; 0x700c
   3512a:	2108      	movs	r1, #8
   3512c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   35130:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   35134:	f8cb 300c 	str.w	r3, [fp, #12]
   35138:	f8cb 9010 	str.w	r9, [fp, #16]
   3513c:	f88b 0009 	strb.w	r0, [fp, #9]
   35140:	f88b 000a 	strb.w	r0, [fp, #10]
   35144:	f88b 000b 	strb.w	r0, [fp, #11]
   35148:	f88b 1008 	strb.w	r1, [fp, #8]
   3514c:	6823      	ldr	r3, [r4, #0]
   3514e:	f247 010c 	movw	r1, #28684	; 0x700c
   35152:	0c1b      	lsrs	r3, r3, #16
   35154:	041b      	lsls	r3, r3, #16
   35156:	f043 0308 	orr.w	r3, r3, #8
   3515a:	6023      	str	r3, [r4, #0]
   3515c:	4658      	mov	r0, fp
   3515e:	f8d4 9000 	ldr.w	r9, [r4]
   35162:	f7fb fc53 	bl	30a0c <rpc_ip_client_request_send>
   35166:	4682      	mov	sl, r0
   35168:	bb48      	cbnz	r0, 351be <ip_interface_accept+0x15a>
   3516a:	6822      	ldr	r2, [r4, #0]
   3516c:	9900      	ldr	r1, [sp, #0]
   3516e:	f04f 33ff 	mov.w	r3, #4294967295
   35172:	400a      	ands	r2, r1
   35174:	6022      	str	r2, [r4, #0]
   35176:	2109      	movs	r1, #9
   35178:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3517c:	4630      	mov	r0, r6
   3517e:	f000 fdbf 	bl	35d00 <interface_socket_wait>
   35182:	4681      	mov	r9, r0
   35184:	2800      	cmp	r0, #0
   35186:	f000 8085 	beq.w	35294 <ip_interface_accept+0x230>
   3518a:	6823      	ldr	r3, [r4, #0]
   3518c:	9a01      	ldr	r2, [sp, #4]
   3518e:	431a      	orrs	r2, r3
   35190:	6022      	str	r2, [r4, #0]
   35192:	6823      	ldr	r3, [r4, #0]
   35194:	0c1b      	lsrs	r3, r3, #16
   35196:	041b      	lsls	r3, r3, #16
   35198:	f043 0307 	orr.w	r3, r3, #7
   3519c:	6023      	str	r3, [r4, #0]
   3519e:	e780      	b.n	350a2 <ip_interface_accept+0x3e>
   351a0:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   351a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   351a8:	e9cd 2300 	strd	r2, r3, [sp]
   351ac:	e7a1      	b.n	350f2 <ip_interface_accept+0x8e>
   351ae:	f8dd b00c 	ldr.w	fp, [sp, #12]
   351b2:	f04f 090c 	mov.w	r9, #12
   351b6:	f1bb 0f00 	cmp.w	fp, #0
   351ba:	d1c7      	bne.n	3514c <ip_interface_accept+0xe8>
   351bc:	e771      	b.n	350a2 <ip_interface_accept+0x3e>
   351be:	f8db 0000 	ldr.w	r0, [fp]
   351c2:	b108      	cbz	r0, 351c8 <ip_interface_accept+0x164>
   351c4:	f7fb fc40 	bl	30a48 <rpc_ip_client_data_free>
   351c8:	ea4f 4919 	mov.w	r9, r9, lsr #16
   351cc:	4658      	mov	r0, fp
   351ce:	ea4f 4909 	mov.w	r9, r9, lsl #16
   351d2:	f7fb fc31 	bl	30a38 <rpc_ip_client_message_free>
   351d6:	f049 0307 	orr.w	r3, r9, #7
   351da:	6023      	str	r3, [r4, #0]
   351dc:	e772      	b.n	350c4 <ip_interface_accept+0x60>
   351de:	4630      	mov	r0, r6
   351e0:	f000 fe02 	bl	35de8 <interface_socket_from_handle_get>
   351e4:	b130      	cbz	r0, 351f4 <ip_interface_accept+0x190>
   351e6:	f8d0 9004 	ldr.w	r9, [r0, #4]
   351ea:	f1b9 0f00 	cmp.w	r9, #0
   351ee:	d001      	beq.n	351f4 <ip_interface_accept+0x190>
   351f0:	6045      	str	r5, [r0, #4]
   351f2:	e775      	b.n	350e0 <ip_interface_accept+0x7c>
   351f4:	6823      	ldr	r3, [r4, #0]
   351f6:	03d9      	lsls	r1, r3, #15
   351f8:	f53f af76 	bmi.w	350e8 <ip_interface_accept+0x84>
   351fc:	4d33      	ldr	r5, [pc, #204]	; (352cc <ip_interface_accept+0x268>)
   351fe:	9902      	ldr	r1, [sp, #8]
   35200:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   35204:	699b      	ldr	r3, [r3, #24]
   35206:	618b      	str	r3, [r1, #24]
   35208:	b147      	cbz	r7, 3521c <ip_interface_accept+0x1b8>
   3520a:	68cb      	ldr	r3, [r1, #12]
   3520c:	2b0a      	cmp	r3, #10
   3520e:	d024      	beq.n	3525a <ip_interface_accept+0x1f6>
   35210:	2b02      	cmp	r3, #2
   35212:	d103      	bne.n	3521c <ip_interface_accept+0x1b8>
   35214:	f8d8 2000 	ldr.w	r2, [r8]
   35218:	2a10      	cmp	r2, #16
   3521a:	d032      	beq.n	35282 <ip_interface_accept+0x21e>
   3521c:	680a      	ldr	r2, [r1, #0]
   3521e:	482c      	ldr	r0, [pc, #176]	; (352d0 <ip_interface_accept+0x26c>)
   35220:	4002      	ands	r2, r0
   35222:	f042 0205 	orr.w	r2, r2, #5
   35226:	600a      	str	r2, [r1, #0]
   35228:	9a02      	ldr	r2, [sp, #8]
   3522a:	6811      	ldr	r1, [r2, #0]
   3522c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   35230:	6011      	str	r1, [r2, #0]
   35232:	6811      	ldr	r1, [r2, #0]
   35234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   35238:	6011      	str	r1, [r2, #0]
   3523a:	6823      	ldr	r3, [r4, #0]
   3523c:	4003      	ands	r3, r0
   3523e:	f043 0307 	orr.w	r3, r3, #7
   35242:	6023      	str	r3, [r4, #0]
   35244:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   35248:	f7fb fbf6 	bl	30a38 <rpc_ip_client_message_free>
   3524c:	2300      	movs	r3, #0
   3524e:	4648      	mov	r0, r9
   35250:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   35254:	b005      	add	sp, #20
   35256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3525a:	f8d8 2000 	ldr.w	r2, [r8]
   3525e:	2a24      	cmp	r2, #36	; 0x24
   35260:	d1dc      	bne.n	3521c <ip_interface_accept+0x1b8>
   35262:	703a      	strb	r2, [r7, #0]
   35264:	2210      	movs	r2, #16
   35266:	607b      	str	r3, [r7, #4]
   35268:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   3526c:	f107 0010 	add.w	r0, r7, #16
   35270:	8b9b      	ldrh	r3, [r3, #28]
   35272:	813b      	strh	r3, [r7, #8]
   35274:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   35278:	3120      	adds	r1, #32
   3527a:	f00b f9cf 	bl	4061c <memcpy>
   3527e:	9902      	ldr	r1, [sp, #8]
   35280:	e7cc      	b.n	3521c <ip_interface_accept+0x1b8>
   35282:	703a      	strb	r2, [r7, #0]
   35284:	607b      	str	r3, [r7, #4]
   35286:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   3528a:	f107 000c 	add.w	r0, r7, #12
   3528e:	8b9b      	ldrh	r3, [r3, #28]
   35290:	2204      	movs	r2, #4
   35292:	e7ee      	b.n	35272 <ip_interface_accept+0x20e>
   35294:	4630      	mov	r0, r6
   35296:	f000 fda7 	bl	35de8 <interface_socket_from_handle_get>
   3529a:	b138      	cbz	r0, 352ac <ip_interface_accept+0x248>
   3529c:	f8d0 9004 	ldr.w	r9, [r0, #4]
   352a0:	f1b9 0f00 	cmp.w	r9, #0
   352a4:	d002      	beq.n	352ac <ip_interface_accept+0x248>
   352a6:	f8c0 a004 	str.w	sl, [r0, #4]
   352aa:	e76e      	b.n	3518a <ip_interface_accept+0x126>
   352ac:	6823      	ldr	r3, [r4, #0]
   352ae:	9a01      	ldr	r2, [sp, #4]
   352b0:	46a9      	mov	r9, r5
   352b2:	4313      	orrs	r3, r2
   352b4:	6023      	str	r3, [r4, #0]
   352b6:	e7a1      	b.n	351fc <ip_interface_accept+0x198>
   352b8:	4605      	mov	r5, r0
   352ba:	f04f 0909 	mov.w	r9, #9
   352be:	e6f0      	b.n	350a2 <ip_interface_accept+0x3e>
   352c0:	f04f 090c 	mov.w	r9, #12
   352c4:	e6f2      	b.n	350ac <ip_interface_accept+0x48>
   352c6:	bf00      	nop
   352c8:	0003443d 	.word	0x0003443d
   352cc:	20024eb0 	.word	0x20024eb0
   352d0:	ffff0000 	.word	0xffff0000

000352d4 <ip_interface_setopt>:
   352d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   352d8:	2901      	cmp	r1, #1
   352da:	b084      	sub	sp, #16
   352dc:	f040 809c 	bne.w	35418 <ip_interface_setopt+0x144>
   352e0:	460e      	mov	r6, r1
   352e2:	4690      	mov	r8, r2
   352e4:	461d      	mov	r5, r3
   352e6:	4607      	mov	r7, r0
   352e8:	f000 fd7e 	bl	35de8 <interface_socket_from_handle_get>
   352ec:	4604      	mov	r4, r0
   352ee:	2800      	cmp	r0, #0
   352f0:	f000 80a5 	beq.w	3543e <ip_interface_setopt+0x16a>
   352f4:	f1b8 0f19 	cmp.w	r8, #25
   352f8:	d16e      	bne.n	353d8 <ip_interface_setopt+0x104>
   352fa:	2d00      	cmp	r5, #0
   352fc:	f000 8092 	beq.w	35424 <ip_interface_setopt+0x150>
   35300:	4628      	mov	r0, r5
   35302:	f7e7 ff0f 	bl	1d124 <strlen>
   35306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   35308:	4298      	cmp	r0, r3
   3530a:	f040 808b 	bne.w	35424 <ip_interface_setopt+0x150>
   3530e:	6823      	ldr	r3, [r4, #0]
   35310:	b29b      	uxth	r3, r3
   35312:	2b02      	cmp	r3, #2
   35314:	d173      	bne.n	353fe <ip_interface_setopt+0x12a>
   35316:	4629      	mov	r1, r5
   35318:	68e0      	ldr	r0, [r4, #12]
   3531a:	f7fe faff 	bl	3391c <pdn_interface_pdn_id_get>
   3531e:	9002      	str	r0, [sp, #8]
   35320:	3001      	adds	r0, #1
   35322:	bf08      	it	eq
   35324:	2516      	moveq	r5, #22
   35326:	d04e      	beq.n	353c6 <ip_interface_setopt+0xf2>
   35328:	6823      	ldr	r3, [r4, #0]
   3532a:	025b      	lsls	r3, r3, #9
   3532c:	d44a      	bmi.n	353c4 <ip_interface_setopt+0xf0>
   3532e:	6823      	ldr	r3, [r4, #0]
   35330:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   35334:	d146      	bne.n	353c4 <ip_interface_setopt+0xf0>
   35336:	6826      	ldr	r6, [r4, #0]
   35338:	6822      	ldr	r2, [r4, #0]
   3533a:	a804      	add	r0, sp, #16
   3533c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   35340:	6022      	str	r2, [r4, #0]
   35342:	2104      	movs	r1, #4
   35344:	f840 3d04 	str.w	r3, [r0, #-4]!
   35348:	f8d4 8018 	ldr.w	r8, [r4, #24]
   3534c:	f7fb fb4a 	bl	309e4 <rpc_ip_client_request_alloc>
   35350:	2800      	cmp	r0, #0
   35352:	d14e      	bne.n	353f2 <ip_interface_setopt+0x11e>
   35354:	f247 0203 	movw	r2, #28675	; 0x7003
   35358:	2300      	movs	r3, #0
   3535a:	2108      	movs	r1, #8
   3535c:	9d03      	ldr	r5, [sp, #12]
   3535e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   35362:	60ea      	str	r2, [r5, #12]
   35364:	f8c5 8010 	str.w	r8, [r5, #16]
   35368:	7229      	strb	r1, [r5, #8]
   3536a:	726b      	strb	r3, [r5, #9]
   3536c:	72ab      	strb	r3, [r5, #10]
   3536e:	72eb      	strb	r3, [r5, #11]
   35370:	f04f 0c08 	mov.w	ip, #8
   35374:	2300      	movs	r3, #0
   35376:	2010      	movs	r0, #16
   35378:	2130      	movs	r1, #48	; 0x30
   3537a:	68aa      	ldr	r2, [r5, #8]
   3537c:	756b      	strb	r3, [r5, #21]
   3537e:	4462      	add	r2, ip
   35380:	60aa      	str	r2, [r5, #8]
   35382:	75ab      	strb	r3, [r5, #22]
   35384:	75eb      	strb	r3, [r5, #23]
   35386:	76ab      	strb	r3, [r5, #26]
   35388:	76eb      	strb	r3, [r5, #27]
   3538a:	f885 c014 	strb.w	ip, [r5, #20]
   3538e:	7628      	strb	r0, [r5, #24]
   35390:	7669      	strb	r1, [r5, #25]
   35392:	2204      	movs	r2, #4
   35394:	eb0d 010c 	add.w	r1, sp, ip
   35398:	6828      	ldr	r0, [r5, #0]
   3539a:	f00b f93f 	bl	4061c <memcpy>
   3539e:	f247 0103 	movw	r1, #28675	; 0x7003
   353a2:	4628      	mov	r0, r5
   353a4:	f7fb fb32 	bl	30a0c <rpc_ip_client_request_send>
   353a8:	4680      	mov	r8, r0
   353aa:	bb50      	cbnz	r0, 35402 <ip_interface_setopt+0x12e>
   353ac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   353b0:	f04f 33ff 	mov.w	r3, #4294967295
   353b4:	4611      	mov	r1, r2
   353b6:	4638      	mov	r0, r7
   353b8:	f000 fca2 	bl	35d00 <interface_socket_wait>
   353bc:	4605      	mov	r5, r0
   353be:	b398      	cbz	r0, 35428 <ip_interface_setopt+0x154>
   353c0:	6026      	str	r6, [r4, #0]
   353c2:	e000      	b.n	353c6 <ip_interface_setopt+0xf2>
   353c4:	2523      	movs	r5, #35	; 0x23
   353c6:	4628      	mov	r0, r5
   353c8:	f7f1 fe46 	bl	27058 <bsd_os_errno_set>
   353cc:	f04f 35ff 	mov.w	r5, #4294967295
   353d0:	4628      	mov	r0, r5
   353d2:	b004      	add	sp, #16
   353d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   353d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   353da:	4642      	mov	r2, r8
   353dc:	9300      	str	r3, [sp, #0]
   353de:	4631      	mov	r1, r6
   353e0:	462b      	mov	r3, r5
   353e2:	4638      	mov	r0, r7
   353e4:	f000 fd28 	bl	35e38 <interface_socket_setopt>
   353e8:	4605      	mov	r5, r0
   353ea:	4628      	mov	r0, r5
   353ec:	b004      	add	sp, #16
   353ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   353f2:	9d03      	ldr	r5, [sp, #12]
   353f4:	2d00      	cmp	r5, #0
   353f6:	d1bb      	bne.n	35370 <ip_interface_setopt+0x9c>
   353f8:	6026      	str	r6, [r4, #0]
   353fa:	250c      	movs	r5, #12
   353fc:	e7e3      	b.n	353c6 <ip_interface_setopt+0xf2>
   353fe:	2509      	movs	r5, #9
   35400:	e7e1      	b.n	353c6 <ip_interface_setopt+0xf2>
   35402:	6828      	ldr	r0, [r5, #0]
   35404:	b108      	cbz	r0, 3540a <ip_interface_setopt+0x136>
   35406:	f7fb fb1f 	bl	30a48 <rpc_ip_client_data_free>
   3540a:	4628      	mov	r0, r5
   3540c:	f7fb fb14 	bl	30a38 <rpc_ip_client_message_free>
   35410:	2523      	movs	r5, #35	; 0x23
   35412:	6026      	str	r6, [r4, #0]
   35414:	6026      	str	r6, [r4, #0]
   35416:	e7d6      	b.n	353c6 <ip_interface_setopt+0xf2>
   35418:	202a      	movs	r0, #42	; 0x2a
   3541a:	f7f1 fe1d 	bl	27058 <bsd_os_errno_set>
   3541e:	f04f 35ff 	mov.w	r5, #4294967295
   35422:	e7d5      	b.n	353d0 <ip_interface_setopt+0xfc>
   35424:	250e      	movs	r5, #14
   35426:	e7ce      	b.n	353c6 <ip_interface_setopt+0xf2>
   35428:	4638      	mov	r0, r7
   3542a:	f000 fcdd 	bl	35de8 <interface_socket_from_handle_get>
   3542e:	b120      	cbz	r0, 3543a <ip_interface_setopt+0x166>
   35430:	6845      	ldr	r5, [r0, #4]
   35432:	b115      	cbz	r5, 3543a <ip_interface_setopt+0x166>
   35434:	f8c0 8004 	str.w	r8, [r0, #4]
   35438:	e7c2      	b.n	353c0 <ip_interface_setopt+0xec>
   3543a:	6026      	str	r6, [r4, #0]
   3543c:	e7c8      	b.n	353d0 <ip_interface_setopt+0xfc>
   3543e:	2009      	movs	r0, #9
   35440:	f7f1 fe0a 	bl	27058 <bsd_os_errno_set>
   35444:	f04f 35ff 	mov.w	r5, #4294967295
   35448:	e7c2      	b.n	353d0 <ip_interface_setopt+0xfc>
   3544a:	bf00      	nop

0003544c <ip_interface_getopt>:
   3544c:	f000 bd36 	b.w	35ebc <interface_socket_getopt>

00035450 <ip_interface_getaddrinfo>:
   35450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35454:	f04f 0c00 	mov.w	ip, #0
   35458:	2401      	movs	r4, #1
   3545a:	4e72      	ldr	r6, [pc, #456]	; (35624 <ip_interface_getaddrinfo+0x1d4>)
   3545c:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 35630 <ip_interface_getaddrinfo+0x1e0>
   35460:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 35634 <ip_interface_getaddrinfo+0x1e4>
   35464:	b085      	sub	sp, #20
   35466:	4607      	mov	r7, r0
   35468:	4615      	mov	r5, r2
   3546a:	9301      	str	r3, [sp, #4]
   3546c:	f8a6 c000 	strh.w	ip, [r6]
   35470:	f8ca 4000 	str.w	r4, [sl]
   35474:	f8c9 4000 	str.w	r4, [r9]
   35478:	b171      	cbz	r1, 35498 <ip_interface_getaddrinfo+0x48>
   3547a:	4608      	mov	r0, r1
   3547c:	220a      	movs	r2, #10
   3547e:	4661      	mov	r1, ip
   35480:	f006 ff8c 	bl	3c39c <strtol>
   35484:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   35488:	1e42      	subs	r2, r0, #1
   3548a:	429a      	cmp	r2, r3
   3548c:	f200 8083 	bhi.w	35596 <ip_interface_getaddrinfo+0x146>
   35490:	0203      	lsls	r3, r0, #8
   35492:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   35496:	8030      	strh	r0, [r6, #0]
   35498:	f8df 819c 	ldr.w	r8, [pc, #412]	; 35638 <ip_interface_getaddrinfo+0x1e8>
   3549c:	f8d8 3000 	ldr.w	r3, [r8]
   354a0:	2b00      	cmp	r3, #0
   354a2:	d174      	bne.n	3558e <ip_interface_getaddrinfo+0x13e>
   354a4:	4a60      	ldr	r2, [pc, #384]	; (35628 <ip_interface_getaddrinfo+0x1d8>)
   354a6:	6013      	str	r3, [r2, #0]
   354a8:	4a60      	ldr	r2, [pc, #384]	; (3562c <ip_interface_getaddrinfo+0x1dc>)
   354aa:	6013      	str	r3, [r2, #0]
   354ac:	2f00      	cmp	r7, #0
   354ae:	d062      	beq.n	35576 <ip_interface_getaddrinfo+0x126>
   354b0:	4638      	mov	r0, r7
   354b2:	f7e7 fe37 	bl	1d124 <strlen>
   354b6:	4683      	mov	fp, r0
   354b8:	b125      	cbz	r5, 354c4 <ip_interface_getaddrinfo+0x74>
   354ba:	69ea      	ldr	r2, [r5, #28]
   354bc:	b112      	cbz	r2, 354c4 <ip_interface_getaddrinfo+0x74>
   354be:	6851      	ldr	r1, [r2, #4]
   354c0:	2966      	cmp	r1, #102	; 0x66
   354c2:	d06c      	beq.n	3559e <ip_interface_getaddrinfo+0x14e>
   354c4:	f04f 32ff 	mov.w	r2, #4294967295
   354c8:	2100      	movs	r1, #0
   354ca:	ae04      	add	r6, sp, #16
   354cc:	f846 1d04 	str.w	r1, [r6, #-4]!
   354d0:	4630      	mov	r0, r6
   354d2:	4659      	mov	r1, fp
   354d4:	9200      	str	r2, [sp, #0]
   354d6:	f7fb fa85 	bl	309e4 <rpc_ip_client_request_alloc>
   354da:	9a00      	ldr	r2, [sp, #0]
   354dc:	2800      	cmp	r0, #0
   354de:	d14c      	bne.n	3557a <ip_interface_getaddrinfo+0x12a>
   354e0:	f247 010d 	movw	r1, #28685	; 0x700d
   354e4:	f04f 0c08 	mov.w	ip, #8
   354e8:	9c03      	ldr	r4, [sp, #12]
   354ea:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   354ee:	60e1      	str	r1, [r4, #12]
   354f0:	6122      	str	r2, [r4, #16]
   354f2:	7260      	strb	r0, [r4, #9]
   354f4:	72a0      	strb	r0, [r4, #10]
   354f6:	72e0      	strb	r0, [r4, #11]
   354f8:	f884 c008 	strb.w	ip, [r4, #8]
   354fc:	2d00      	cmp	r5, #0
   354fe:	d076      	beq.n	355ee <ip_interface_getaddrinfo+0x19e>
   35500:	686a      	ldr	r2, [r5, #4]
   35502:	f022 0108 	bic.w	r1, r2, #8
   35506:	2902      	cmp	r1, #2
   35508:	d05c      	beq.n	355c4 <ip_interface_getaddrinfo+0x174>
   3550a:	2a05      	cmp	r2, #5
   3550c:	d178      	bne.n	35600 <ip_interface_getaddrinfo+0x1b0>
   3550e:	68a9      	ldr	r1, [r5, #8]
   35510:	2902      	cmp	r1, #2
   35512:	f8c9 1000 	str.w	r1, [r9]
   35516:	d061      	beq.n	355dc <ip_interface_getaddrinfo+0x18c>
   35518:	61a2      	str	r2, [r4, #24]
   3551a:	68ea      	ldr	r2, [r5, #12]
   3551c:	6222      	str	r2, [r4, #32]
   3551e:	68aa      	ldr	r2, [r5, #8]
   35520:	61e2      	str	r2, [r4, #28]
   35522:	682a      	ldr	r2, [r5, #0]
   35524:	6162      	str	r2, [r4, #20]
   35526:	68a2      	ldr	r2, [r4, #8]
   35528:	3210      	adds	r2, #16
   3552a:	60a2      	str	r2, [r4, #8]
   3552c:	b12f      	cbz	r7, 3553a <ip_interface_getaddrinfo+0xea>
   3552e:	6820      	ldr	r0, [r4, #0]
   35530:	b118      	cbz	r0, 3553a <ip_interface_getaddrinfo+0xea>
   35532:	465a      	mov	r2, fp
   35534:	4639      	mov	r1, r7
   35536:	f00b f871 	bl	4061c <memcpy>
   3553a:	2301      	movs	r3, #1
   3553c:	f247 010d 	movw	r1, #28685	; 0x700d
   35540:	4620      	mov	r0, r4
   35542:	f8c8 3000 	str.w	r3, [r8]
   35546:	f7fb fa61 	bl	30a0c <rpc_ip_client_request_send>
   3554a:	2800      	cmp	r0, #0
   3554c:	d156      	bne.n	355fc <ip_interface_getaddrinfo+0x1ac>
   3554e:	f04f 33ff 	mov.w	r3, #4294967295
   35552:	9303      	str	r3, [sp, #12]
   35554:	4631      	mov	r1, r6
   35556:	4620      	mov	r0, r4
   35558:	f7f1 fcea 	bl	26f30 <bsd_os_timedwait>
   3555c:	f8d8 3000 	ldr.w	r3, [r8]
   35560:	2b01      	cmp	r3, #1
   35562:	d0f7      	beq.n	35554 <ip_interface_getaddrinfo+0x104>
   35564:	4b31      	ldr	r3, [pc, #196]	; (3562c <ip_interface_getaddrinfo+0x1dc>)
   35566:	6818      	ldr	r0, [r3, #0]
   35568:	2800      	cmp	r0, #0
   3556a:	d13b      	bne.n	355e4 <ip_interface_getaddrinfo+0x194>
   3556c:	4b2e      	ldr	r3, [pc, #184]	; (35628 <ip_interface_getaddrinfo+0x1d8>)
   3556e:	9a01      	ldr	r2, [sp, #4]
   35570:	681b      	ldr	r3, [r3, #0]
   35572:	6013      	str	r3, [r2, #0]
   35574:	e00c      	b.n	35590 <ip_interface_getaddrinfo+0x140>
   35576:	46bb      	mov	fp, r7
   35578:	e79e      	b.n	354b8 <ip_interface_getaddrinfo+0x68>
   3557a:	9c03      	ldr	r4, [sp, #12]
   3557c:	2c00      	cmp	r4, #0
   3557e:	d1bd      	bne.n	354fc <ip_interface_getaddrinfo+0xac>
   35580:	200c      	movs	r0, #12
   35582:	2300      	movs	r3, #0
   35584:	f8c8 3000 	str.w	r3, [r8]
   35588:	b005      	add	sp, #20
   3558a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3558e:	2073      	movs	r0, #115	; 0x73
   35590:	b005      	add	sp, #20
   35592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35596:	2016      	movs	r0, #22
   35598:	b005      	add	sp, #20
   3559a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3559e:	6891      	ldr	r1, [r2, #8]
   355a0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   355a4:	d18e      	bne.n	354c4 <ip_interface_getaddrinfo+0x74>
   355a6:	f240 2102 	movw	r1, #514	; 0x202
   355aa:	68d0      	ldr	r0, [r2, #12]
   355ac:	4288      	cmp	r0, r1
   355ae:	d189      	bne.n	354c4 <ip_interface_getaddrinfo+0x74>
   355b0:	6991      	ldr	r1, [r2, #24]
   355b2:	2900      	cmp	r1, #0
   355b4:	d086      	beq.n	354c4 <ip_interface_getaddrinfo+0x74>
   355b6:	6868      	ldr	r0, [r5, #4]
   355b8:	f7fe f9b0 	bl	3391c <pdn_interface_pdn_id_get>
   355bc:	1c43      	adds	r3, r0, #1
   355be:	d081      	beq.n	354c4 <ip_interface_getaddrinfo+0x74>
   355c0:	4602      	mov	r2, r0
   355c2:	e781      	b.n	354c8 <ip_interface_getaddrinfo+0x78>
   355c4:	68a9      	ldr	r1, [r5, #8]
   355c6:	2902      	cmp	r1, #2
   355c8:	f8c9 1000 	str.w	r1, [r9]
   355cc:	d006      	beq.n	355dc <ip_interface_getaddrinfo+0x18c>
   355ce:	2a05      	cmp	r2, #5
   355d0:	d0a2      	beq.n	35518 <ip_interface_getaddrinfo+0xc8>
   355d2:	2a0a      	cmp	r2, #10
   355d4:	bf14      	ite	ne
   355d6:	2201      	movne	r2, #1
   355d8:	2202      	moveq	r2, #2
   355da:	e79d      	b.n	35518 <ip_interface_getaddrinfo+0xc8>
   355dc:	2102      	movs	r1, #2
   355de:	f8ca 1000 	str.w	r1, [sl]
   355e2:	e7f4      	b.n	355ce <ip_interface_getaddrinfo+0x17e>
   355e4:	4b11      	ldr	r3, [pc, #68]	; (3562c <ip_interface_getaddrinfo+0x1dc>)
   355e6:	6818      	ldr	r0, [r3, #0]
   355e8:	2800      	cmp	r0, #0
   355ea:	d0d1      	beq.n	35590 <ip_interface_getaddrinfo+0x140>
   355ec:	e7c9      	b.n	35582 <ip_interface_getaddrinfo+0x132>
   355ee:	4629      	mov	r1, r5
   355f0:	2210      	movs	r2, #16
   355f2:	f104 0014 	add.w	r0, r4, #20
   355f6:	f00b f831 	bl	4065c <memset>
   355fa:	e794      	b.n	35526 <ip_interface_getaddrinfo+0xd6>
   355fc:	2023      	movs	r0, #35	; 0x23
   355fe:	e7c0      	b.n	35582 <ip_interface_getaddrinfo+0x132>
   35600:	202f      	movs	r0, #47	; 0x2f
   35602:	f7f1 fd29 	bl	27058 <bsd_os_errno_set>
   35606:	68a2      	ldr	r2, [r4, #8]
   35608:	3210      	adds	r2, #16
   3560a:	60a2      	str	r2, [r4, #8]
   3560c:	b917      	cbnz	r7, 35614 <ip_interface_getaddrinfo+0x1c4>
   3560e:	f04f 30ff 	mov.w	r0, #4294967295
   35612:	e7b6      	b.n	35582 <ip_interface_getaddrinfo+0x132>
   35614:	6820      	ldr	r0, [r4, #0]
   35616:	2800      	cmp	r0, #0
   35618:	d0f9      	beq.n	3560e <ip_interface_getaddrinfo+0x1be>
   3561a:	465a      	mov	r2, fp
   3561c:	4639      	mov	r1, r7
   3561e:	f00a fffd 	bl	4061c <memcpy>
   35622:	e7f4      	b.n	3560e <ip_interface_getaddrinfo+0x1be>
   35624:	2002939e 	.word	0x2002939e
   35628:	20024ea8 	.word	0x20024ea8
   3562c:	20024ea0 	.word	0x20024ea0
   35630:	20024e98 	.word	0x20024e98
   35634:	20024e9c 	.word	0x20024e9c
   35638:	20024ea4 	.word	0x20024ea4

0003563c <ip_interface_freeaddrinfo>:
   3563c:	b538      	push	{r3, r4, r5, lr}
   3563e:	4c0b      	ldr	r4, [pc, #44]	; (3566c <ip_interface_freeaddrinfo+0x30>)
   35640:	6823      	ldr	r3, [r4, #0]
   35642:	2b02      	cmp	r3, #2
   35644:	d000      	beq.n	35648 <ip_interface_freeaddrinfo+0xc>
   35646:	bd38      	pop	{r3, r4, r5, pc}
   35648:	b130      	cbz	r0, 35658 <ip_interface_freeaddrinfo+0x1c>
   3564a:	4605      	mov	r5, r0
   3564c:	6940      	ldr	r0, [r0, #20]
   3564e:	f7fb f99b 	bl	30988 <nrf_free>
   35652:	4628      	mov	r0, r5
   35654:	f7fb f998 	bl	30988 <nrf_free>
   35658:	2300      	movs	r3, #0
   3565a:	4a05      	ldr	r2, [pc, #20]	; (35670 <ip_interface_freeaddrinfo+0x34>)
   3565c:	4905      	ldr	r1, [pc, #20]	; (35674 <ip_interface_freeaddrinfo+0x38>)
   3565e:	6023      	str	r3, [r4, #0]
   35660:	6013      	str	r3, [r2, #0]
   35662:	6808      	ldr	r0, [r1, #0]
   35664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   35668:	f7fb b9ee 	b.w	30a48 <rpc_ip_client_data_free>
   3566c:	20024ea4 	.word	0x20024ea4
   35670:	20024ea0 	.word	0x20024ea0
   35674:	20024eac 	.word	0x20024eac

00035678 <rpc_ip_event_handler>:
   35678:	f248 030d 	movw	r3, #32781	; 0x800d
   3567c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35680:	4299      	cmp	r1, r3
   35682:	b089      	sub	sp, #36	; 0x24
   35684:	4605      	mov	r5, r0
   35686:	d062      	beq.n	3574e <rpc_ip_event_handler+0xd6>
   35688:	f248 030f 	movw	r3, #32783	; 0x800f
   3568c:	4299      	cmp	r1, r3
   3568e:	460c      	mov	r4, r1
   35690:	d04b      	beq.n	3572a <rpc_ip_event_handler+0xb2>
   35692:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   35696:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   3569a:	68c0      	ldr	r0, [r0, #12]
   3569c:	d07b      	beq.n	35796 <rpc_ip_event_handler+0x11e>
   3569e:	0c07      	lsrs	r7, r0, #16
   356a0:	4638      	mov	r0, r7
   356a2:	f000 fba1 	bl	35de8 <interface_socket_from_handle_get>
   356a6:	4606      	mov	r6, r0
   356a8:	2800      	cmp	r0, #0
   356aa:	d05f      	beq.n	3576c <rpc_ip_event_handler+0xf4>
   356ac:	4601      	mov	r1, r0
   356ae:	4623      	mov	r3, r4
   356b0:	462a      	mov	r2, r5
   356b2:	4638      	mov	r0, r7
   356b4:	f7fb fe00 	bl	312b8 <tls_rpc_ip_event_handler>
   356b8:	2800      	cmp	r0, #0
   356ba:	d053      	beq.n	35764 <rpc_ip_event_handler+0xec>
   356bc:	f248 0307 	movw	r3, #32775	; 0x8007
   356c0:	429c      	cmp	r4, r3
   356c2:	d97d      	bls.n	357c0 <rpc_ip_event_handler+0x148>
   356c4:	f248 030c 	movw	r3, #32780	; 0x800c
   356c8:	429c      	cmp	r4, r3
   356ca:	d068      	beq.n	3579e <rpc_ip_event_handler+0x126>
   356cc:	f240 8119 	bls.w	35902 <rpc_ip_event_handler+0x28a>
   356d0:	f249 0302 	movw	r3, #36866	; 0x9002
   356d4:	429c      	cmp	r4, r3
   356d6:	f000 8195 	beq.w	35a04 <rpc_ip_event_handler+0x38c>
   356da:	f249 0303 	movw	r3, #36867	; 0x9003
   356de:	429c      	cmp	r4, r3
   356e0:	f000 81aa 	beq.w	35a38 <rpc_ip_event_handler+0x3c0>
   356e4:	f249 0301 	movw	r3, #36865	; 0x9001
   356e8:	429c      	cmp	r4, r3
   356ea:	d13f      	bne.n	3576c <rpc_ip_event_handler+0xf4>
   356ec:	6834      	ldr	r4, [r6, #0]
   356ee:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   356f2:	f000 81c2 	beq.w	35a7a <rpc_ip_event_handler+0x402>
   356f6:	68ab      	ldr	r3, [r5, #8]
   356f8:	2b04      	cmp	r3, #4
   356fa:	f200 81ff 	bhi.w	35afc <rpc_ip_event_handler+0x484>
   356fe:	2400      	movs	r4, #0
   35700:	4627      	mov	r7, r4
   35702:	6829      	ldr	r1, [r5, #0]
   35704:	686a      	ldr	r2, [r5, #4]
   35706:	e9cd 7406 	strd	r7, r4, [sp, #24]
   3570a:	e9cd 1204 	strd	r1, r2, [sp, #16]
   3570e:	69f0      	ldr	r0, [r6, #28]
   35710:	a904      	add	r1, sp, #16
   35712:	6803      	ldr	r3, [r0, #0]
   35714:	685b      	ldr	r3, [r3, #4]
   35716:	4798      	blx	r3
   35718:	3001      	adds	r0, #1
   3571a:	f000 81db 	beq.w	35ad4 <rpc_ip_event_handler+0x45c>
   3571e:	6833      	ldr	r3, [r6, #0]
   35720:	2000      	movs	r0, #0
   35722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   35726:	6033      	str	r3, [r6, #0]
   35728:	e00e      	b.n	35748 <rpc_ip_event_handler+0xd0>
   3572a:	6943      	ldr	r3, [r0, #20]
   3572c:	2001      	movs	r0, #1
   3572e:	2b10      	cmp	r3, #16
   35730:	49b7      	ldr	r1, [pc, #732]	; (35a10 <rpc_ip_event_handler+0x398>)
   35732:	bf88      	it	hi
   35734:	222d      	movhi	r2, #45	; 0x2d
   35736:	7008      	strb	r0, [r1, #0]
   35738:	f04f 0000 	mov.w	r0, #0
   3573c:	bf9c      	itt	ls
   3573e:	4ab5      	ldrls	r2, [pc, #724]	; (35a14 <rpc_ip_event_handler+0x39c>)
   35740:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   35744:	4bb4      	ldr	r3, [pc, #720]	; (35a18 <rpc_ip_event_handler+0x3a0>)
   35746:	601a      	str	r2, [r3, #0]
   35748:	b009      	add	sp, #36	; 0x24
   3574a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3574e:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 35a2c <rpc_ip_event_handler+0x3b4>
   35752:	6807      	ldr	r7, [r0, #0]
   35754:	f8d9 3000 	ldr.w	r3, [r9]
   35758:	2b01      	cmp	r3, #1
   3575a:	d00b      	beq.n	35774 <rpc_ip_event_handler+0xfc>
   3575c:	b117      	cbz	r7, 35764 <rpc_ip_event_handler+0xec>
   3575e:	4638      	mov	r0, r7
   35760:	f7fb f972 	bl	30a48 <rpc_ip_client_data_free>
   35764:	2000      	movs	r0, #0
   35766:	b009      	add	sp, #36	; 0x24
   35768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3576c:	6828      	ldr	r0, [r5, #0]
   3576e:	2800      	cmp	r0, #0
   35770:	d1f6      	bne.n	35760 <rpc_ip_event_handler+0xe8>
   35772:	e7f7      	b.n	35764 <rpc_ip_event_handler+0xec>
   35774:	6943      	ldr	r3, [r0, #20]
   35776:	2b00      	cmp	r3, #0
   35778:	d046      	beq.n	35808 <rpc_ip_event_handler+0x190>
   3577a:	2b10      	cmp	r3, #16
   3577c:	bf96      	itet	ls
   3577e:	4aa5      	ldrls	r2, [pc, #660]	; (35a14 <rpc_ip_event_handler+0x39c>)
   35780:	232d      	movhi	r3, #45	; 0x2d
   35782:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   35786:	2202      	movs	r2, #2
   35788:	49a4      	ldr	r1, [pc, #656]	; (35a1c <rpc_ip_event_handler+0x3a4>)
   3578a:	600b      	str	r3, [r1, #0]
   3578c:	f8c9 2000 	str.w	r2, [r9]
   35790:	2f00      	cmp	r7, #0
   35792:	d1e4      	bne.n	3575e <rpc_ip_event_handler+0xe6>
   35794:	e7e6      	b.n	35764 <rpc_ip_event_handler+0xec>
   35796:	f000 fad5 	bl	35d44 <interface_from_internal_id_search>
   3579a:	4607      	mov	r7, r0
   3579c:	e780      	b.n	356a0 <rpc_ip_event_handler+0x28>
   3579e:	6833      	ldr	r3, [r6, #0]
   357a0:	b29b      	uxth	r3, r3
   357a2:	2b08      	cmp	r3, #8
   357a4:	d1de      	bne.n	35764 <rpc_ip_event_handler+0xec>
   357a6:	696b      	ldr	r3, [r5, #20]
   357a8:	2b00      	cmp	r3, #0
   357aa:	f000 819c 	beq.w	35ae6 <rpc_ip_event_handler+0x46e>
   357ae:	2b10      	cmp	r3, #16
   357b0:	f200 8161 	bhi.w	35a76 <rpc_ip_event_handler+0x3fe>
   357b4:	4a97      	ldr	r2, [pc, #604]	; (35a14 <rpc_ip_event_handler+0x39c>)
   357b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   357ba:	6073      	str	r3, [r6, #4]
   357bc:	2000      	movs	r0, #0
   357be:	e7c3      	b.n	35748 <rpc_ip_event_handler+0xd0>
   357c0:	f248 0306 	movw	r3, #32774	; 0x8006
   357c4:	429c      	cmp	r4, r3
   357c6:	f080 810d 	bcs.w	359e4 <rpc_ip_event_handler+0x36c>
   357ca:	f248 0302 	movw	r3, #32770	; 0x8002
   357ce:	429c      	cmp	r4, r3
   357d0:	f000 80f0 	beq.w	359b4 <rpc_ip_event_handler+0x33c>
   357d4:	f240 80be 	bls.w	35954 <rpc_ip_event_handler+0x2dc>
   357d8:	f248 0303 	movw	r3, #32771	; 0x8003
   357dc:	429c      	cmp	r4, r3
   357de:	f000 80ca 	beq.w	35976 <rpc_ip_event_handler+0x2fe>
   357e2:	f248 0305 	movw	r3, #32773	; 0x8005
   357e6:	429c      	cmp	r4, r3
   357e8:	d1c0      	bne.n	3576c <rpc_ip_event_handler+0xf4>
   357ea:	6833      	ldr	r3, [r6, #0]
   357ec:	b29b      	uxth	r3, r3
   357ee:	2b03      	cmp	r3, #3
   357f0:	d1b8      	bne.n	35764 <rpc_ip_event_handler+0xec>
   357f2:	696b      	ldr	r3, [r5, #20]
   357f4:	2b00      	cmp	r3, #0
   357f6:	d1da      	bne.n	357ae <rpc_ip_event_handler+0x136>
   357f8:	6833      	ldr	r3, [r6, #0]
   357fa:	2000      	movs	r0, #0
   357fc:	0c1b      	lsrs	r3, r3, #16
   357fe:	041b      	lsls	r3, r3, #16
   35800:	f043 0304 	orr.w	r3, r3, #4
   35804:	6033      	str	r3, [r6, #0]
   35806:	e79f      	b.n	35748 <rpc_ip_event_handler+0xd0>
   35808:	4b85      	ldr	r3, [pc, #532]	; (35a20 <rpc_ip_event_handler+0x3a8>)
   3580a:	601f      	str	r7, [r3, #0]
   3580c:	6984      	ldr	r4, [r0, #24]
   3580e:	0163      	lsls	r3, r4, #5
   35810:	4618      	mov	r0, r3
   35812:	9303      	str	r3, [sp, #12]
   35814:	f7fb f8ae 	bl	30974 <nrf_malloc>
   35818:	9002      	str	r0, [sp, #8]
   3581a:	2800      	cmp	r0, #0
   3581c:	f000 808a 	beq.w	35934 <rpc_ip_event_handler+0x2bc>
   35820:	00e5      	lsls	r5, r4, #3
   35822:	1928      	adds	r0, r5, r4
   35824:	0080      	lsls	r0, r0, #2
   35826:	f7fb f8a5 	bl	30974 <nrf_malloc>
   3582a:	2800      	cmp	r0, #0
   3582c:	f000 811f 	beq.w	35a6e <rpc_ip_event_handler+0x3f6>
   35830:	2c00      	cmp	r4, #0
   35832:	d05e      	beq.n	358f2 <rpc_ip_event_handler+0x27a>
   35834:	3510      	adds	r5, #16
   35836:	1943      	adds	r3, r0, r5
   35838:	9301      	str	r3, [sp, #4]
   3583a:	9b02      	ldr	r3, [sp, #8]
   3583c:	2404      	movs	r4, #4
   3583e:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 35a30 <rpc_ip_event_handler+0x3b8>
   35842:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 35a34 <rpc_ip_event_handler+0x3bc>
   35846:	f100 0810 	add.w	r8, r0, #16
   3584a:	f103 0620 	add.w	r6, r3, #32
   3584e:	e01d      	b.n	3588c <rpc_ip_event_handler+0x214>
   35850:	220a      	movs	r2, #10
   35852:	f848 2c0c 	str.w	r2, [r8, #-12]
   35856:	f04f 0224 	mov.w	r2, #36	; 0x24
   3585a:	4640      	mov	r0, r8
   3585c:	f808 2c10 	strb.w	r2, [r8, #-16]
   35860:	f828 3c08 	strh.w	r3, [r8, #-8]
   35864:	f856 2c10 	ldr.w	r2, [r6, #-16]
   35868:	f00a fed8 	bl	4061c <memcpy>
   3586c:	f856 3c10 	ldr.w	r3, [r6, #-16]
   35870:	f108 0808 	add.w	r8, r8, #8
   35874:	441c      	add	r4, r3
   35876:	193b      	adds	r3, r7, r4
   35878:	f846 3c08 	str.w	r3, [r6, #-8]
   3587c:	9b01      	ldr	r3, [sp, #4]
   3587e:	f846 6c04 	str.w	r6, [r6, #-4]
   35882:	4598      	cmp	r8, r3
   35884:	442c      	add	r4, r5
   35886:	f106 0620 	add.w	r6, r6, #32
   3588a:	d02c      	beq.n	358e6 <rpc_ip_event_handler+0x26e>
   3588c:	593b      	ldr	r3, [r7, r4]
   3588e:	193a      	adds	r2, r7, r4
   35890:	f846 3c20 	str.w	r3, [r6, #-32]
   35894:	6853      	ldr	r3, [r2, #4]
   35896:	f8da 1000 	ldr.w	r1, [sl]
   3589a:	2b02      	cmp	r3, #2
   3589c:	bf14      	ite	ne
   3589e:	2002      	movne	r0, #2
   358a0:	200a      	moveq	r0, #10
   358a2:	f8db 3000 	ldr.w	r3, [fp]
   358a6:	e946 0107 	strd	r0, r1, [r6, #-28]
   358aa:	f846 3c14 	str.w	r3, [r6, #-20]
   358ae:	8a10      	ldrh	r0, [r2, #16]
   358b0:	f1a8 0310 	sub.w	r3, r8, #16
   358b4:	f846 0c10 	str.w	r0, [r6, #-16]
   358b8:	8a55      	ldrh	r5, [r2, #18]
   358ba:	f846 3c0c 	str.w	r3, [r6, #-12]
   358be:	4b59      	ldr	r3, [pc, #356]	; (35a24 <rpc_ip_event_handler+0x3ac>)
   358c0:	3414      	adds	r4, #20
   358c2:	2804      	cmp	r0, #4
   358c4:	eb07 0104 	add.w	r1, r7, r4
   358c8:	881b      	ldrh	r3, [r3, #0]
   358ca:	d1c1      	bne.n	35850 <rpc_ip_event_handler+0x1d8>
   358cc:	2210      	movs	r2, #16
   358ce:	2002      	movs	r0, #2
   358d0:	f828 3c08 	strh.w	r3, [r8, #-8]
   358d4:	f848 0c0c 	str.w	r0, [r8, #-12]
   358d8:	f808 2c10 	strb.w	r2, [r8, #-16]
   358dc:	f856 2c10 	ldr.w	r2, [r6, #-16]
   358e0:	f1a8 0004 	sub.w	r0, r8, #4
   358e4:	e7c0      	b.n	35868 <rpc_ip_event_handler+0x1f0>
   358e6:	2200      	movs	r2, #0
   358e8:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   358ec:	440b      	add	r3, r1
   358ee:	f843 2c04 	str.w	r2, [r3, #-4]
   358f2:	2202      	movs	r2, #2
   358f4:	4b4c      	ldr	r3, [pc, #304]	; (35a28 <rpc_ip_event_handler+0x3b0>)
   358f6:	f8c9 2000 	str.w	r2, [r9]
   358fa:	9a02      	ldr	r2, [sp, #8]
   358fc:	2000      	movs	r0, #0
   358fe:	601a      	str	r2, [r3, #0]
   35900:	e722      	b.n	35748 <rpc_ip_event_handler+0xd0>
   35902:	f248 0308 	movw	r3, #32776	; 0x8008
   35906:	429c      	cmp	r4, r3
   35908:	d045      	beq.n	35996 <rpc_ip_event_handler+0x31e>
   3590a:	f248 0309 	movw	r3, #32777	; 0x8009
   3590e:	429c      	cmp	r4, r3
   35910:	f47f af2c 	bne.w	3576c <rpc_ip_event_handler+0xf4>
   35914:	6833      	ldr	r3, [r6, #0]
   35916:	b29b      	uxth	r3, r3
   35918:	2b0d      	cmp	r3, #13
   3591a:	f47f af23 	bne.w	35764 <rpc_ip_event_handler+0xec>
   3591e:	6968      	ldr	r0, [r5, #20]
   35920:	2800      	cmp	r0, #0
   35922:	f000 80d9 	beq.w	35ad8 <rpc_ip_event_handler+0x460>
   35926:	2810      	cmp	r0, #16
   35928:	f200 80a5 	bhi.w	35a76 <rpc_ip_event_handler+0x3fe>
   3592c:	4b39      	ldr	r3, [pc, #228]	; (35a14 <rpc_ip_event_handler+0x39c>)
   3592e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   35932:	e742      	b.n	357ba <rpc_ip_event_handler+0x142>
   35934:	f7fb f828 	bl	30988 <nrf_free>
   35938:	200c      	movs	r0, #12
   3593a:	2302      	movs	r3, #2
   3593c:	4937      	ldr	r1, [pc, #220]	; (35a1c <rpc_ip_event_handler+0x3a4>)
   3593e:	4a3a      	ldr	r2, [pc, #232]	; (35a28 <rpc_ip_event_handler+0x3b0>)
   35940:	6008      	str	r0, [r1, #0]
   35942:	682f      	ldr	r7, [r5, #0]
   35944:	9902      	ldr	r1, [sp, #8]
   35946:	f8c9 3000 	str.w	r3, [r9]
   3594a:	6011      	str	r1, [r2, #0]
   3594c:	2f00      	cmp	r7, #0
   3594e:	f47f af06 	bne.w	3575e <rpc_ip_event_handler+0xe6>
   35952:	e707      	b.n	35764 <rpc_ip_event_handler+0xec>
   35954:	f248 0301 	movw	r3, #32769	; 0x8001
   35958:	429c      	cmp	r4, r3
   3595a:	f47f af07 	bne.w	3576c <rpc_ip_event_handler+0xf4>
   3595e:	6833      	ldr	r3, [r6, #0]
   35960:	2b01      	cmp	r3, #1
   35962:	f47f aeff 	bne.w	35764 <rpc_ip_event_handler+0xec>
   35966:	6968      	ldr	r0, [r5, #20]
   35968:	2800      	cmp	r0, #0
   3596a:	d1dc      	bne.n	35926 <rpc_ip_event_handler+0x2ae>
   3596c:	2302      	movs	r3, #2
   3596e:	6033      	str	r3, [r6, #0]
   35970:	69ab      	ldr	r3, [r5, #24]
   35972:	61b3      	str	r3, [r6, #24]
   35974:	e6e8      	b.n	35748 <rpc_ip_event_handler+0xd0>
   35976:	6833      	ldr	r3, [r6, #0]
   35978:	025b      	lsls	r3, r3, #9
   3597a:	f57f aef3 	bpl.w	35764 <rpc_ip_event_handler+0xec>
   3597e:	6968      	ldr	r0, [r5, #20]
   35980:	2800      	cmp	r0, #0
   35982:	f000 80a0 	beq.w	35ac6 <rpc_ip_event_handler+0x44e>
   35986:	2810      	cmp	r0, #16
   35988:	bf8e      	itee	hi
   3598a:	232d      	movhi	r3, #45	; 0x2d
   3598c:	4b21      	ldrls	r3, [pc, #132]	; (35a14 <rpc_ip_event_handler+0x39c>)
   3598e:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   35992:	6073      	str	r3, [r6, #4]
   35994:	e6e6      	b.n	35764 <rpc_ip_event_handler+0xec>
   35996:	6833      	ldr	r3, [r6, #0]
   35998:	b29b      	uxth	r3, r3
   3599a:	2b06      	cmp	r3, #6
   3599c:	f47f aee2 	bne.w	35764 <rpc_ip_event_handler+0xec>
   359a0:	6968      	ldr	r0, [r5, #20]
   359a2:	2800      	cmp	r0, #0
   359a4:	d1bf      	bne.n	35926 <rpc_ip_event_handler+0x2ae>
   359a6:	6833      	ldr	r3, [r6, #0]
   359a8:	0c1b      	lsrs	r3, r3, #16
   359aa:	041b      	lsls	r3, r3, #16
   359ac:	f043 0307 	orr.w	r3, r3, #7
   359b0:	6033      	str	r3, [r6, #0]
   359b2:	e6c9      	b.n	35748 <rpc_ip_event_handler+0xd0>
   359b4:	6833      	ldr	r3, [r6, #0]
   359b6:	0099      	lsls	r1, r3, #2
   359b8:	f57f aed4 	bpl.w	35764 <rpc_ip_event_handler+0xec>
   359bc:	6833      	ldr	r3, [r6, #0]
   359be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   359c2:	6033      	str	r3, [r6, #0]
   359c4:	6968      	ldr	r0, [r5, #20]
   359c6:	2800      	cmp	r0, #0
   359c8:	d06e      	beq.n	35aa8 <rpc_ip_event_handler+0x430>
   359ca:	2810      	cmp	r0, #16
   359cc:	f200 8080 	bhi.w	35ad0 <rpc_ip_event_handler+0x458>
   359d0:	4b10      	ldr	r3, [pc, #64]	; (35a14 <rpc_ip_event_handler+0x39c>)
   359d2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   359d6:	6073      	str	r3, [r6, #4]
   359d8:	6833      	ldr	r3, [r6, #0]
   359da:	2000      	movs	r0, #0
   359dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   359e0:	6033      	str	r3, [r6, #0]
   359e2:	e6b1      	b.n	35748 <rpc_ip_event_handler+0xd0>
   359e4:	6833      	ldr	r3, [r6, #0]
   359e6:	029a      	lsls	r2, r3, #10
   359e8:	f57f aebc 	bpl.w	35764 <rpc_ip_event_handler+0xec>
   359ec:	696b      	ldr	r3, [r5, #20]
   359ee:	2b00      	cmp	r3, #0
   359f0:	d051      	beq.n	35a96 <rpc_ip_event_handler+0x41e>
   359f2:	2b6b      	cmp	r3, #107	; 0x6b
   359f4:	f000 8086 	beq.w	35b04 <rpc_ip_event_handler+0x48c>
   359f8:	2b10      	cmp	r3, #16
   359fa:	d869      	bhi.n	35ad0 <rpc_ip_event_handler+0x458>
   359fc:	4a05      	ldr	r2, [pc, #20]	; (35a14 <rpc_ip_event_handler+0x39c>)
   359fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   35a02:	e7e8      	b.n	359d6 <rpc_ip_event_handler+0x35e>
   35a04:	6833      	ldr	r3, [r6, #0]
   35a06:	b29b      	uxth	r3, r3
   35a08:	2b07      	cmp	r3, #7
   35a0a:	f47f aeab 	bne.w	35764 <rpc_ip_event_handler+0xec>
   35a0e:	e686      	b.n	3571e <rpc_ip_event_handler+0xa6>
   35a10:	2002bd43 	.word	0x2002bd43
   35a14:	000428f8 	.word	0x000428f8
   35a18:	20024ed4 	.word	0x20024ed4
   35a1c:	20024ea0 	.word	0x20024ea0
   35a20:	20024eac 	.word	0x20024eac
   35a24:	2002939e 	.word	0x2002939e
   35a28:	20024ea8 	.word	0x20024ea8
   35a2c:	20024ea4 	.word	0x20024ea4
   35a30:	20024e9c 	.word	0x20024e9c
   35a34:	20024e98 	.word	0x20024e98
   35a38:	6833      	ldr	r3, [r6, #0]
   35a3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   35a3e:	6033      	str	r3, [r6, #0]
   35a40:	6833      	ldr	r3, [r6, #0]
   35a42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   35a46:	6033      	str	r3, [r6, #0]
   35a48:	6833      	ldr	r3, [r6, #0]
   35a4a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   35a4e:	6033      	str	r3, [r6, #0]
   35a50:	692b      	ldr	r3, [r5, #16]
   35a52:	2b6c      	cmp	r3, #108	; 0x6c
   35a54:	d016      	beq.n	35a84 <rpc_ip_event_handler+0x40c>
   35a56:	2b10      	cmp	r3, #16
   35a58:	bf8c      	ite	hi
   35a5a:	232d      	movhi	r3, #45	; 0x2d
   35a5c:	4a46      	ldrls	r2, [pc, #280]	; (35b78 <rpc_ip_event_handler+0x500>)
   35a5e:	f04f 0000 	mov.w	r0, #0
   35a62:	bf98      	it	ls
   35a64:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   35a68:	6073      	str	r3, [r6, #4]
   35a6a:	60b3      	str	r3, [r6, #8]
   35a6c:	e66c      	b.n	35748 <rpc_ip_event_handler+0xd0>
   35a6e:	220c      	movs	r2, #12
   35a70:	4b42      	ldr	r3, [pc, #264]	; (35b7c <rpc_ip_event_handler+0x504>)
   35a72:	601a      	str	r2, [r3, #0]
   35a74:	e73d      	b.n	358f2 <rpc_ip_event_handler+0x27a>
   35a76:	232d      	movs	r3, #45	; 0x2d
   35a78:	e69f      	b.n	357ba <rpc_ip_event_handler+0x142>
   35a7a:	6828      	ldr	r0, [r5, #0]
   35a7c:	f7fa ffe4 	bl	30a48 <rpc_ip_client_data_free>
   35a80:	4620      	mov	r0, r4
   35a82:	e661      	b.n	35748 <rpc_ip_event_handler+0xd0>
   35a84:	2239      	movs	r2, #57	; 0x39
   35a86:	6833      	ldr	r3, [r6, #0]
   35a88:	2000      	movs	r0, #0
   35a8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   35a8e:	6033      	str	r3, [r6, #0]
   35a90:	6072      	str	r2, [r6, #4]
   35a92:	60b2      	str	r2, [r6, #8]
   35a94:	e658      	b.n	35748 <rpc_ip_event_handler+0xd0>
   35a96:	6833      	ldr	r3, [r6, #0]
   35a98:	4a39      	ldr	r2, [pc, #228]	; (35b80 <rpc_ip_event_handler+0x508>)
   35a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   35a9e:	6033      	str	r3, [r6, #0]
   35aa0:	2001      	movs	r0, #1
   35aa2:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
   35aa6:	e64f      	b.n	35748 <rpc_ip_event_handler+0xd0>
   35aa8:	6833      	ldr	r3, [r6, #0]
   35aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   35aae:	6033      	str	r3, [r6, #0]
   35ab0:	6833      	ldr	r3, [r6, #0]
   35ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   35ab6:	6033      	str	r3, [r6, #0]
   35ab8:	6833      	ldr	r3, [r6, #0]
   35aba:	0c1b      	lsrs	r3, r3, #16
   35abc:	041b      	lsls	r3, r3, #16
   35abe:	f043 0305 	orr.w	r3, r3, #5
   35ac2:	6033      	str	r3, [r6, #0]
   35ac4:	e640      	b.n	35748 <rpc_ip_event_handler+0xd0>
   35ac6:	6833      	ldr	r3, [r6, #0]
   35ac8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   35acc:	6033      	str	r3, [r6, #0]
   35ace:	e63b      	b.n	35748 <rpc_ip_event_handler+0xd0>
   35ad0:	232d      	movs	r3, #45	; 0x2d
   35ad2:	e780      	b.n	359d6 <rpc_ip_event_handler+0x35e>
   35ad4:	2002      	movs	r0, #2
   35ad6:	e637      	b.n	35748 <rpc_ip_event_handler+0xd0>
   35ad8:	6833      	ldr	r3, [r6, #0]
   35ada:	0c1b      	lsrs	r3, r3, #16
   35adc:	041b      	lsls	r3, r3, #16
   35ade:	f043 030e 	orr.w	r3, r3, #14
   35ae2:	6033      	str	r3, [r6, #0]
   35ae4:	e630      	b.n	35748 <rpc_ip_event_handler+0xd0>
   35ae6:	4b26      	ldr	r3, [pc, #152]	; (35b80 <rpc_ip_event_handler+0x508>)
   35ae8:	2001      	movs	r0, #1
   35aea:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
   35aee:	6833      	ldr	r3, [r6, #0]
   35af0:	0c1b      	lsrs	r3, r3, #16
   35af2:	041b      	lsls	r3, r3, #16
   35af4:	f043 0309 	orr.w	r3, r3, #9
   35af8:	6033      	str	r3, [r6, #0]
   35afa:	e625      	b.n	35748 <rpc_ip_event_handler+0xd0>
   35afc:	8a6c      	ldrh	r4, [r5, #18]
   35afe:	b934      	cbnz	r4, 35b0e <rpc_ip_event_handler+0x496>
   35b00:	4627      	mov	r7, r4
   35b02:	e5fe      	b.n	35702 <rpc_ip_event_handler+0x8a>
   35b04:	6933      	ldr	r3, [r6, #16]
   35b06:	2b01      	cmp	r3, #1
   35b08:	d012      	beq.n	35b30 <rpc_ip_event_handler+0x4b8>
   35b0a:	230c      	movs	r3, #12
   35b0c:	e763      	b.n	359d6 <rpc_ip_event_handler+0x35e>
   35b0e:	2024      	movs	r0, #36	; 0x24
   35b10:	f7fa ff30 	bl	30974 <nrf_malloc>
   35b14:	4607      	mov	r7, r0
   35b16:	b358      	cbz	r0, 35b70 <rpc_ip_event_handler+0x4f8>
   35b18:	8a6a      	ldrh	r2, [r5, #18]
   35b1a:	2a10      	cmp	r2, #16
   35b1c:	d01c      	beq.n	35b58 <rpc_ip_event_handler+0x4e0>
   35b1e:	2a04      	cmp	r2, #4
   35b20:	d00e      	beq.n	35b40 <rpc_ip_event_handler+0x4c8>
   35b22:	6828      	ldr	r0, [r5, #0]
   35b24:	f7fa ff90 	bl	30a48 <rpc_ip_client_data_free>
   35b28:	4638      	mov	r0, r7
   35b2a:	f7fa ff2d 	bl	30988 <nrf_free>
   35b2e:	e619      	b.n	35764 <rpc_ip_event_handler+0xec>
   35b30:	220c      	movs	r2, #12
   35b32:	6833      	ldr	r3, [r6, #0]
   35b34:	2000      	movs	r0, #0
   35b36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   35b3a:	6033      	str	r3, [r6, #0]
   35b3c:	6072      	str	r2, [r6, #4]
   35b3e:	e603      	b.n	35748 <rpc_ip_event_handler+0xd0>
   35b40:	2302      	movs	r3, #2
   35b42:	2410      	movs	r4, #16
   35b44:	6043      	str	r3, [r0, #4]
   35b46:	7004      	strb	r4, [r0, #0]
   35b48:	8a2b      	ldrh	r3, [r5, #16]
   35b4a:	f105 0114 	add.w	r1, r5, #20
   35b4e:	8103      	strh	r3, [r0, #8]
   35b50:	300c      	adds	r0, #12
   35b52:	f00a fd63 	bl	4061c <memcpy>
   35b56:	e5d4      	b.n	35702 <rpc_ip_event_handler+0x8a>
   35b58:	230a      	movs	r3, #10
   35b5a:	2424      	movs	r4, #36	; 0x24
   35b5c:	6043      	str	r3, [r0, #4]
   35b5e:	7004      	strb	r4, [r0, #0]
   35b60:	8a2b      	ldrh	r3, [r5, #16]
   35b62:	f105 0114 	add.w	r1, r5, #20
   35b66:	8103      	strh	r3, [r0, #8]
   35b68:	3010      	adds	r0, #16
   35b6a:	f00a fd57 	bl	4061c <memcpy>
   35b6e:	e5c8      	b.n	35702 <rpc_ip_event_handler+0x8a>
   35b70:	6828      	ldr	r0, [r5, #0]
   35b72:	f7fa ff69 	bl	30a48 <rpc_ip_client_data_free>
   35b76:	e5f5      	b.n	35764 <rpc_ip_event_handler+0xec>
   35b78:	000428f8 	.word	0x000428f8
   35b7c:	20024ea0 	.word	0x20024ea0
   35b80:	20024eb0 	.word	0x20024eb0

00035b84 <interface_init>:
   35b84:	b508      	push	{r3, lr}
   35b86:	f44f 72a2 	mov.w	r2, #324	; 0x144
   35b8a:	2100      	movs	r1, #0
   35b8c:	4802      	ldr	r0, [pc, #8]	; (35b98 <interface_init+0x14>)
   35b8e:	f00a fd65 	bl	4065c <memset>
   35b92:	2000      	movs	r0, #0
   35b94:	bd08      	pop	{r3, pc}
   35b96:	bf00      	nop
   35b98:	2002bd48 	.word	0x2002bd48

00035b9c <interface_socket_allocate>:
   35b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35b9e:	4b30      	ldr	r3, [pc, #192]	; (35c60 <interface_socket_allocate+0xc4>)
   35ba0:	4606      	mov	r6, r0
   35ba2:	681d      	ldr	r5, [r3, #0]
   35ba4:	4608      	mov	r0, r1
   35ba6:	b31d      	cbz	r5, 35bf0 <interface_socket_allocate+0x54>
   35ba8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   35baa:	2c00      	cmp	r4, #0
   35bac:	d04a      	beq.n	35c44 <interface_socket_allocate+0xa8>
   35bae:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   35bb0:	2c00      	cmp	r4, #0
   35bb2:	d049      	beq.n	35c48 <interface_socket_allocate+0xac>
   35bb4:	6edc      	ldr	r4, [r3, #108]	; 0x6c
   35bb6:	2c00      	cmp	r4, #0
   35bb8:	d048      	beq.n	35c4c <interface_socket_allocate+0xb0>
   35bba:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   35bbe:	2900      	cmp	r1, #0
   35bc0:	d046      	beq.n	35c50 <interface_socket_allocate+0xb4>
   35bc2:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
   35bc6:	b191      	cbz	r1, 35bee <interface_socket_allocate+0x52>
   35bc8:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
   35bcc:	2900      	cmp	r1, #0
   35bce:	d043      	beq.n	35c58 <interface_socket_allocate+0xbc>
   35bd0:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
   35bd4:	2900      	cmp	r1, #0
   35bd6:	d041      	beq.n	35c5c <interface_socket_allocate+0xc0>
   35bd8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   35bdc:	2900      	cmp	r1, #0
   35bde:	d039      	beq.n	35c54 <interface_socket_allocate+0xb8>
   35be0:	f04f 35ff 	mov.w	r5, #4294967295
   35be4:	2069      	movs	r0, #105	; 0x69
   35be6:	f7f1 fa37 	bl	27058 <bsd_os_errno_set>
   35bea:	4628      	mov	r0, r5
   35bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35bee:	2505      	movs	r5, #5
   35bf0:	f04f 0c01 	mov.w	ip, #1
   35bf4:	f04f 37ff 	mov.w	r7, #4294967295
   35bf8:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   35bfc:	00a4      	lsls	r4, r4, #2
   35bfe:	f843 c004 	str.w	ip, [r3, r4]
   35c02:	441c      	add	r4, r3
   35c04:	4611      	mov	r1, r2
   35c06:	61a7      	str	r7, [r4, #24]
   35c08:	4622      	mov	r2, r4
   35c0a:	f002 f805 	bl	37c18 <packet_handler_create>
   35c0e:	4603      	mov	r3, r0
   35c10:	61e0      	str	r0, [r4, #28]
   35c12:	b158      	cbz	r0, 35c2c <interface_socket_allocate+0x90>
   35c14:	681b      	ldr	r3, [r3, #0]
   35c16:	681b      	ldr	r3, [r3, #0]
   35c18:	4798      	blx	r3
   35c1a:	b910      	cbnz	r0, 35c22 <interface_socket_allocate+0x86>
   35c1c:	6034      	str	r4, [r6, #0]
   35c1e:	4628      	mov	r0, r5
   35c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35c22:	69e0      	ldr	r0, [r4, #28]
   35c24:	f002 f818 	bl	37c58 <packet_handler_delete>
   35c28:	2300      	movs	r3, #0
   35c2a:	61e3      	str	r3, [r4, #28]
   35c2c:	f04f 35ff 	mov.w	r5, #4294967295
   35c30:	2224      	movs	r2, #36	; 0x24
   35c32:	2100      	movs	r1, #0
   35c34:	4620      	mov	r0, r4
   35c36:	f00a fd11 	bl	4065c <memset>
   35c3a:	200c      	movs	r0, #12
   35c3c:	f7f1 fa0c 	bl	27058 <bsd_os_errno_set>
   35c40:	4628      	mov	r0, r5
   35c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35c44:	2501      	movs	r5, #1
   35c46:	e7d3      	b.n	35bf0 <interface_socket_allocate+0x54>
   35c48:	2502      	movs	r5, #2
   35c4a:	e7d1      	b.n	35bf0 <interface_socket_allocate+0x54>
   35c4c:	2503      	movs	r5, #3
   35c4e:	e7cf      	b.n	35bf0 <interface_socket_allocate+0x54>
   35c50:	2504      	movs	r5, #4
   35c52:	e7cd      	b.n	35bf0 <interface_socket_allocate+0x54>
   35c54:	2508      	movs	r5, #8
   35c56:	e7cb      	b.n	35bf0 <interface_socket_allocate+0x54>
   35c58:	2506      	movs	r5, #6
   35c5a:	e7c9      	b.n	35bf0 <interface_socket_allocate+0x54>
   35c5c:	2507      	movs	r5, #7
   35c5e:	e7c7      	b.n	35bf0 <interface_socket_allocate+0x54>
   35c60:	2002bd48 	.word	0x2002bd48

00035c64 <interface_socket_free>:
   35c64:	2808      	cmp	r0, #8
   35c66:	d900      	bls.n	35c6a <interface_socket_free+0x6>
   35c68:	4770      	bx	lr
   35c6a:	b510      	push	{r4, lr}
   35c6c:	4c07      	ldr	r4, [pc, #28]	; (35c8c <interface_socket_free+0x28>)
   35c6e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   35c72:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   35c76:	69e0      	ldr	r0, [r4, #28]
   35c78:	b108      	cbz	r0, 35c7e <interface_socket_free+0x1a>
   35c7a:	f001 ffed 	bl	37c58 <packet_handler_delete>
   35c7e:	4620      	mov	r0, r4
   35c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   35c84:	2224      	movs	r2, #36	; 0x24
   35c86:	2100      	movs	r1, #0
   35c88:	f00a bce8 	b.w	4065c <memset>
   35c8c:	2002bd48 	.word	0x2002bd48

00035c90 <interface_socket_packet_handler_update>:
   35c90:	2808      	cmp	r0, #8
   35c92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   35c96:	d81e      	bhi.n	35cd6 <interface_socket_packet_handler_update+0x46>
   35c98:	ea4f 08c0 	mov.w	r8, r0, lsl #3
   35c9c:	4e17      	ldr	r6, [pc, #92]	; (35cfc <interface_socket_packet_handler_update+0x6c>)
   35c9e:	eb08 0300 	add.w	r3, r8, r0
   35ca2:	009b      	lsls	r3, r3, #2
   35ca4:	58f4      	ldr	r4, [r6, r3]
   35ca6:	18f5      	adds	r5, r6, r3
   35ca8:	b1ac      	cbz	r4, 35cd6 <interface_socket_packet_handler_update+0x46>
   35caa:	460b      	mov	r3, r1
   35cac:	4604      	mov	r4, r0
   35cae:	4611      	mov	r1, r2
   35cb0:	4618      	mov	r0, r3
   35cb2:	462a      	mov	r2, r5
   35cb4:	f8d5 901c 	ldr.w	r9, [r5, #28]
   35cb8:	f001 ffae 	bl	37c18 <packet_handler_create>
   35cbc:	61e8      	str	r0, [r5, #28]
   35cbe:	b1d0      	cbz	r0, 35cf6 <interface_socket_packet_handler_update+0x66>
   35cc0:	6803      	ldr	r3, [r0, #0]
   35cc2:	681b      	ldr	r3, [r3, #0]
   35cc4:	4798      	blx	r3
   35cc6:	4607      	mov	r7, r0
   35cc8:	b948      	cbnz	r0, 35cde <interface_socket_packet_handler_update+0x4e>
   35cca:	4648      	mov	r0, r9
   35ccc:	f001 ffc4 	bl	37c58 <packet_handler_delete>
   35cd0:	4638      	mov	r0, r7
   35cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   35cd6:	2705      	movs	r7, #5
   35cd8:	4638      	mov	r0, r7
   35cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   35cde:	69e8      	ldr	r0, [r5, #28]
   35ce0:	f001 ffba 	bl	37c58 <packet_handler_delete>
   35ce4:	eb08 0004 	add.w	r0, r8, r4
   35ce8:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   35cec:	f8c6 901c 	str.w	r9, [r6, #28]
   35cf0:	4638      	mov	r0, r7
   35cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   35cf6:	2704      	movs	r7, #4
   35cf8:	e7f4      	b.n	35ce4 <interface_socket_packet_handler_update+0x54>
   35cfa:	bf00      	nop
   35cfc:	2002bd48 	.word	0x2002bd48

00035d00 <interface_socket_wait>:
   35d00:	b5f0      	push	{r4, r5, r6, r7, lr}
   35d02:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   35d06:	4c0e      	ldr	r4, [pc, #56]	; (35d40 <interface_socket_wait+0x40>)
   35d08:	0080      	lsls	r0, r0, #2
   35d0a:	5825      	ldr	r5, [r4, r0]
   35d0c:	b083      	sub	sp, #12
   35d0e:	4015      	ands	r5, r2
   35d10:	428d      	cmp	r5, r1
   35d12:	9301      	str	r3, [sp, #4]
   35d14:	4404      	add	r4, r0
   35d16:	d010      	beq.n	35d3a <interface_socket_wait+0x3a>
   35d18:	6863      	ldr	r3, [r4, #4]
   35d1a:	b973      	cbnz	r3, 35d3a <interface_socket_wait+0x3a>
   35d1c:	460f      	mov	r7, r1
   35d1e:	4616      	mov	r6, r2
   35d20:	4625      	mov	r5, r4
   35d22:	e006      	b.n	35d32 <interface_socket_wait+0x32>
   35d24:	686b      	ldr	r3, [r5, #4]
   35d26:	b943      	cbnz	r3, 35d3a <interface_socket_wait+0x3a>
   35d28:	a901      	add	r1, sp, #4
   35d2a:	4620      	mov	r0, r4
   35d2c:	f7f1 f900 	bl	26f30 <bsd_os_timedwait>
   35d30:	b920      	cbnz	r0, 35d3c <interface_socket_wait+0x3c>
   35d32:	682b      	ldr	r3, [r5, #0]
   35d34:	4033      	ands	r3, r6
   35d36:	42bb      	cmp	r3, r7
   35d38:	d1f4      	bne.n	35d24 <interface_socket_wait+0x24>
   35d3a:	2000      	movs	r0, #0
   35d3c:	b003      	add	sp, #12
   35d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35d40:	2002bd48 	.word	0x2002bd48

00035d44 <interface_from_internal_id_search>:
   35d44:	4b27      	ldr	r3, [pc, #156]	; (35de4 <interface_from_internal_id_search+0xa0>)
   35d46:	681a      	ldr	r2, [r3, #0]
   35d48:	b112      	cbz	r2, 35d50 <interface_from_internal_id_search+0xc>
   35d4a:	699a      	ldr	r2, [r3, #24]
   35d4c:	4282      	cmp	r2, r0
   35d4e:	d039      	beq.n	35dc4 <interface_from_internal_id_search+0x80>
   35d50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   35d52:	b112      	cbz	r2, 35d5a <interface_from_internal_id_search+0x16>
   35d54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   35d56:	4282      	cmp	r2, r0
   35d58:	d036      	beq.n	35dc8 <interface_from_internal_id_search+0x84>
   35d5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   35d5c:	b112      	cbz	r2, 35d64 <interface_from_internal_id_search+0x20>
   35d5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   35d60:	4282      	cmp	r2, r0
   35d62:	d033      	beq.n	35dcc <interface_from_internal_id_search+0x88>
   35d64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   35d66:	b11a      	cbz	r2, 35d70 <interface_from_internal_id_search+0x2c>
   35d68:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   35d6c:	4282      	cmp	r2, r0
   35d6e:	d02f      	beq.n	35dd0 <interface_from_internal_id_search+0x8c>
   35d70:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   35d74:	b11a      	cbz	r2, 35d7e <interface_from_internal_id_search+0x3a>
   35d76:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   35d7a:	4282      	cmp	r2, r0
   35d7c:	d02a      	beq.n	35dd4 <interface_from_internal_id_search+0x90>
   35d7e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   35d82:	b11a      	cbz	r2, 35d8c <interface_from_internal_id_search+0x48>
   35d84:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   35d88:	4282      	cmp	r2, r0
   35d8a:	d025      	beq.n	35dd8 <interface_from_internal_id_search+0x94>
   35d8c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   35d90:	b11a      	cbz	r2, 35d9a <interface_from_internal_id_search+0x56>
   35d92:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   35d96:	4282      	cmp	r2, r0
   35d98:	d020      	beq.n	35ddc <interface_from_internal_id_search+0x98>
   35d9a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   35d9e:	b11a      	cbz	r2, 35da8 <interface_from_internal_id_search+0x64>
   35da0:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   35da4:	4282      	cmp	r2, r0
   35da6:	d01b      	beq.n	35de0 <interface_from_internal_id_search+0x9c>
   35da8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   35dac:	b13a      	cbz	r2, 35dbe <interface_from_internal_id_search+0x7a>
   35dae:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
   35db2:	4283      	cmp	r3, r0
   35db4:	bf14      	ite	ne
   35db6:	f04f 30ff 	movne.w	r0, #4294967295
   35dba:	2008      	moveq	r0, #8
   35dbc:	4770      	bx	lr
   35dbe:	f04f 30ff 	mov.w	r0, #4294967295
   35dc2:	4770      	bx	lr
   35dc4:	2000      	movs	r0, #0
   35dc6:	4770      	bx	lr
   35dc8:	2001      	movs	r0, #1
   35dca:	4770      	bx	lr
   35dcc:	2002      	movs	r0, #2
   35dce:	4770      	bx	lr
   35dd0:	2003      	movs	r0, #3
   35dd2:	4770      	bx	lr
   35dd4:	2004      	movs	r0, #4
   35dd6:	4770      	bx	lr
   35dd8:	2005      	movs	r0, #5
   35dda:	4770      	bx	lr
   35ddc:	2006      	movs	r0, #6
   35dde:	4770      	bx	lr
   35de0:	2007      	movs	r0, #7
   35de2:	4770      	bx	lr
   35de4:	2002bd48 	.word	0x2002bd48

00035de8 <interface_socket_from_handle_get>:
   35de8:	2808      	cmp	r0, #8
   35dea:	d807      	bhi.n	35dfc <interface_socket_from_handle_get+0x14>
   35dec:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   35df0:	4b03      	ldr	r3, [pc, #12]	; (35e00 <interface_socket_from_handle_get+0x18>)
   35df2:	0080      	lsls	r0, r0, #2
   35df4:	581a      	ldr	r2, [r3, r0]
   35df6:	b10a      	cbz	r2, 35dfc <interface_socket_from_handle_get+0x14>
   35df8:	4418      	add	r0, r3
   35dfa:	4770      	bx	lr
   35dfc:	2000      	movs	r0, #0
   35dfe:	4770      	bx	lr
   35e00:	2002bd48 	.word	0x2002bd48

00035e04 <interface_socket_event_get>:
   35e04:	b119      	cbz	r1, 35e0e <interface_socket_event_get+0xa>
   35e06:	2808      	cmp	r0, #8
   35e08:	d902      	bls.n	35e10 <interface_socket_event_get+0xc>
   35e0a:	2310      	movs	r3, #16
   35e0c:	600b      	str	r3, [r1, #0]
   35e0e:	4770      	bx	lr
   35e10:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   35e14:	4b07      	ldr	r3, [pc, #28]	; (35e34 <interface_socket_event_get+0x30>)
   35e16:	0080      	lsls	r0, r0, #2
   35e18:	581a      	ldr	r2, [r3, r0]
   35e1a:	2a00      	cmp	r2, #0
   35e1c:	d0f5      	beq.n	35e0a <interface_socket_event_get+0x6>
   35e1e:	581b      	ldr	r3, [r3, r0]
   35e20:	0c1b      	lsrs	r3, r3, #16
   35e22:	f003 020a 	and.w	r2, r3, #10
   35e26:	2a0a      	cmp	r2, #10
   35e28:	bf14      	ite	ne
   35e2a:	f003 030f 	andne.w	r3, r3, #15
   35e2e:	f003 030d 	andeq.w	r3, r3, #13
   35e32:	e7eb      	b.n	35e0c <interface_socket_event_get+0x8>
   35e34:	2002bd48 	.word	0x2002bd48

00035e38 <interface_socket_setopt>:
   35e38:	2808      	cmp	r0, #8
   35e3a:	b538      	push	{r3, r4, r5, lr}
   35e3c:	d82d      	bhi.n	35e9a <interface_socket_setopt+0x62>
   35e3e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   35e42:	4c1c      	ldr	r4, [pc, #112]	; (35eb4 <interface_socket_setopt+0x7c>)
   35e44:	0080      	lsls	r0, r0, #2
   35e46:	461d      	mov	r5, r3
   35e48:	5823      	ldr	r3, [r4, r0]
   35e4a:	b333      	cbz	r3, 35e9a <interface_socket_setopt+0x62>
   35e4c:	2901      	cmp	r1, #1
   35e4e:	d11e      	bne.n	35e8e <interface_socket_setopt+0x56>
   35e50:	2a14      	cmp	r2, #20
   35e52:	d11c      	bne.n	35e8e <interface_socket_setopt+0x56>
   35e54:	b1ad      	cbz	r5, 35e82 <interface_socket_setopt+0x4a>
   35e56:	9b04      	ldr	r3, [sp, #16]
   35e58:	2b08      	cmp	r3, #8
   35e5a:	d112      	bne.n	35e82 <interface_socket_setopt+0x4a>
   35e5c:	686a      	ldr	r2, [r5, #4]
   35e5e:	4b16      	ldr	r3, [pc, #88]	; (35eb8 <interface_socket_setopt+0x80>)
   35e60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   35e64:	fba3 3202 	umull	r3, r2, r3, r2
   35e68:	2300      	movs	r3, #0
   35e6a:	682d      	ldr	r5, [r5, #0]
   35e6c:	0992      	lsrs	r2, r2, #6
   35e6e:	fbe1 2305 	umlal	r2, r3, r1, r5
   35e72:	2b01      	cmp	r3, #1
   35e74:	bf08      	it	eq
   35e76:	2a00      	cmpeq	r2, #0
   35e78:	d215      	bcs.n	35ea6 <interface_socket_setopt+0x6e>
   35e7a:	4420      	add	r0, r4
   35e7c:	6202      	str	r2, [r0, #32]
   35e7e:	2000      	movs	r0, #0
   35e80:	bd38      	pop	{r3, r4, r5, pc}
   35e82:	2016      	movs	r0, #22
   35e84:	f7f1 f8e8 	bl	27058 <bsd_os_errno_set>
   35e88:	f04f 30ff 	mov.w	r0, #4294967295
   35e8c:	bd38      	pop	{r3, r4, r5, pc}
   35e8e:	202a      	movs	r0, #42	; 0x2a
   35e90:	f7f1 f8e2 	bl	27058 <bsd_os_errno_set>
   35e94:	f04f 30ff 	mov.w	r0, #4294967295
   35e98:	bd38      	pop	{r3, r4, r5, pc}
   35e9a:	2009      	movs	r0, #9
   35e9c:	f7f1 f8dc 	bl	27058 <bsd_os_errno_set>
   35ea0:	f04f 30ff 	mov.w	r0, #4294967295
   35ea4:	bd38      	pop	{r3, r4, r5, pc}
   35ea6:	2025      	movs	r0, #37	; 0x25
   35ea8:	f7f1 f8d6 	bl	27058 <bsd_os_errno_set>
   35eac:	f04f 30ff 	mov.w	r0, #4294967295
   35eb0:	bd38      	pop	{r3, r4, r5, pc}
   35eb2:	bf00      	nop
   35eb4:	2002bd48 	.word	0x2002bd48
   35eb8:	10624dd3 	.word	0x10624dd3

00035ebc <interface_socket_getopt>:
   35ebc:	b570      	push	{r4, r5, r6, lr}
   35ebe:	2808      	cmp	r0, #8
   35ec0:	9d04      	ldr	r5, [sp, #16]
   35ec2:	d821      	bhi.n	35f08 <interface_socket_getopt+0x4c>
   35ec4:	4c13      	ldr	r4, [pc, #76]	; (35f14 <interface_socket_getopt+0x58>)
   35ec6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   35eca:	0080      	lsls	r0, r0, #2
   35ecc:	5826      	ldr	r6, [r4, r0]
   35ece:	4404      	add	r4, r0
   35ed0:	b1d6      	cbz	r6, 35f08 <interface_socket_getopt+0x4c>
   35ed2:	2901      	cmp	r1, #1
   35ed4:	d112      	bne.n	35efc <interface_socket_getopt+0x40>
   35ed6:	2a04      	cmp	r2, #4
   35ed8:	d110      	bne.n	35efc <interface_socket_getopt+0x40>
   35eda:	b14b      	cbz	r3, 35ef0 <interface_socket_getopt+0x34>
   35edc:	b145      	cbz	r5, 35ef0 <interface_socket_getopt+0x34>
   35ede:	682a      	ldr	r2, [r5, #0]
   35ee0:	2a04      	cmp	r2, #4
   35ee2:	d105      	bne.n	35ef0 <interface_socket_getopt+0x34>
   35ee4:	2200      	movs	r2, #0
   35ee6:	6861      	ldr	r1, [r4, #4]
   35ee8:	4610      	mov	r0, r2
   35eea:	6019      	str	r1, [r3, #0]
   35eec:	6062      	str	r2, [r4, #4]
   35eee:	bd70      	pop	{r4, r5, r6, pc}
   35ef0:	2016      	movs	r0, #22
   35ef2:	f7f1 f8b1 	bl	27058 <bsd_os_errno_set>
   35ef6:	f04f 30ff 	mov.w	r0, #4294967295
   35efa:	bd70      	pop	{r4, r5, r6, pc}
   35efc:	202a      	movs	r0, #42	; 0x2a
   35efe:	f7f1 f8ab 	bl	27058 <bsd_os_errno_set>
   35f02:	f04f 30ff 	mov.w	r0, #4294967295
   35f06:	bd70      	pop	{r4, r5, r6, pc}
   35f08:	2009      	movs	r0, #9
   35f0a:	f7f1 f8a5 	bl	27058 <bsd_os_errno_set>
   35f0e:	f04f 30ff 	mov.w	r0, #4294967295
   35f12:	bd70      	pop	{r4, r5, r6, pc}
   35f14:	2002bd48 	.word	0x2002bd48

00035f18 <interface_shutdown>:
   35f18:	4b18      	ldr	r3, [pc, #96]	; (35f7c <interface_shutdown+0x64>)
   35f1a:	681a      	ldr	r2, [r3, #0]
   35f1c:	b10a      	cbz	r2, 35f22 <interface_shutdown+0xa>
   35f1e:	2270      	movs	r2, #112	; 0x70
   35f20:	605a      	str	r2, [r3, #4]
   35f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   35f24:	b10a      	cbz	r2, 35f2a <interface_shutdown+0x12>
   35f26:	2270      	movs	r2, #112	; 0x70
   35f28:	629a      	str	r2, [r3, #40]	; 0x28
   35f2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   35f2c:	b10a      	cbz	r2, 35f32 <interface_shutdown+0x1a>
   35f2e:	2270      	movs	r2, #112	; 0x70
   35f30:	64da      	str	r2, [r3, #76]	; 0x4c
   35f32:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   35f34:	b10a      	cbz	r2, 35f3a <interface_shutdown+0x22>
   35f36:	2270      	movs	r2, #112	; 0x70
   35f38:	671a      	str	r2, [r3, #112]	; 0x70
   35f3a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   35f3e:	b112      	cbz	r2, 35f46 <interface_shutdown+0x2e>
   35f40:	2270      	movs	r2, #112	; 0x70
   35f42:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   35f46:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   35f4a:	b112      	cbz	r2, 35f52 <interface_shutdown+0x3a>
   35f4c:	2270      	movs	r2, #112	; 0x70
   35f4e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   35f52:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   35f56:	b112      	cbz	r2, 35f5e <interface_shutdown+0x46>
   35f58:	2270      	movs	r2, #112	; 0x70
   35f5a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
   35f5e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   35f62:	b112      	cbz	r2, 35f6a <interface_shutdown+0x52>
   35f64:	2270      	movs	r2, #112	; 0x70
   35f66:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   35f6a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   35f6e:	b112      	cbz	r2, 35f76 <interface_shutdown+0x5e>
   35f70:	2270      	movs	r2, #112	; 0x70
   35f72:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   35f76:	2000      	movs	r0, #0
   35f78:	4770      	bx	lr
   35f7a:	bf00      	nop
   35f7c:	2002bd48 	.word	0x2002bd48

00035f80 <interface_socket_fcntl>:
   35f80:	2808      	cmp	r0, #8
   35f82:	b510      	push	{r4, lr}
   35f84:	d818      	bhi.n	35fb8 <interface_socket_fcntl+0x38>
   35f86:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   35f8a:	4c11      	ldr	r4, [pc, #68]	; (35fd0 <interface_socket_fcntl+0x50>)
   35f8c:	0083      	lsls	r3, r0, #2
   35f8e:	58e0      	ldr	r0, [r4, r3]
   35f90:	b190      	cbz	r0, 35fb8 <interface_socket_fcntl+0x38>
   35f92:	2901      	cmp	r1, #1
   35f94:	d005      	beq.n	35fa2 <interface_socket_fcntl+0x22>
   35f96:	2902      	cmp	r1, #2
   35f98:	d114      	bne.n	35fc4 <interface_socket_fcntl+0x44>
   35f9a:	58e0      	ldr	r0, [r4, r3]
   35f9c:	f3c0 7000 	ubfx	r0, r0, #28, #1
   35fa0:	bd10      	pop	{r4, pc}
   35fa2:	f012 0001 	ands.w	r0, r2, #1
   35fa6:	58e2      	ldr	r2, [r4, r3]
   35fa8:	bf1a      	itte	ne
   35faa:	2000      	movne	r0, #0
   35fac:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
   35fb0:	f022 5280 	biceq.w	r2, r2, #268435456	; 0x10000000
   35fb4:	50e2      	str	r2, [r4, r3]
   35fb6:	bd10      	pop	{r4, pc}
   35fb8:	2009      	movs	r0, #9
   35fba:	f7f1 f84d 	bl	27058 <bsd_os_errno_set>
   35fbe:	f04f 30ff 	mov.w	r0, #4294967295
   35fc2:	bd10      	pop	{r4, pc}
   35fc4:	2016      	movs	r0, #22
   35fc6:	f7f1 f847 	bl	27058 <bsd_os_errno_set>
   35fca:	f04f 30ff 	mov.w	r0, #4294967295
   35fce:	bd10      	pop	{r4, pc}
   35fd0:	2002bd48 	.word	0x2002bd48

00035fd4 <bsd_os_application_irq_handler>:
   35fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35fd8:	4c33      	ldr	r4, [pc, #204]	; (360a8 <bsd_os_application_irq_handler+0xd4>)
   35fda:	f7f1 f93d 	bl	27258 <bsd_os_application_irq_clear>
   35fde:	f04f 0803 	mov.w	r8, #3
   35fe2:	4d32      	ldr	r5, [pc, #200]	; (360ac <bsd_os_application_irq_handler+0xd8>)
   35fe4:	4f32      	ldr	r7, [pc, #200]	; (360b0 <bsd_os_application_irq_handler+0xdc>)
   35fe6:	f104 0680 	add.w	r6, r4, #128	; 0x80
   35fea:	e004      	b.n	35ff6 <bsd_os_application_irq_handler+0x22>
   35fec:	2b04      	cmp	r3, #4
   35fee:	d006      	beq.n	35ffe <bsd_os_application_irq_handler+0x2a>
   35ff0:	3408      	adds	r4, #8
   35ff2:	42b4      	cmp	r4, r6
   35ff4:	d03b      	beq.n	3606e <bsd_os_application_irq_handler+0x9a>
   35ff6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   35ffa:	2b02      	cmp	r3, #2
   35ffc:	d1f6      	bne.n	35fec <bsd_os_application_irq_handler+0x18>
   35ffe:	6820      	ldr	r0, [r4, #0]
   36000:	882a      	ldrh	r2, [r5, #0]
   36002:	6803      	ldr	r3, [r0, #0]
   36004:	b29b      	uxth	r3, r3
   36006:	429a      	cmp	r2, r3
   36008:	d033      	beq.n	36072 <bsd_os_application_irq_handler+0x9e>
   3600a:	8a2a      	ldrh	r2, [r5, #16]
   3600c:	429a      	cmp	r2, r3
   3600e:	d032      	beq.n	36076 <bsd_os_application_irq_handler+0xa2>
   36010:	8c2a      	ldrh	r2, [r5, #32]
   36012:	429a      	cmp	r2, r3
   36014:	d031      	beq.n	3607a <bsd_os_application_irq_handler+0xa6>
   36016:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   36018:	429a      	cmp	r2, r3
   3601a:	d030      	beq.n	3607e <bsd_os_application_irq_handler+0xaa>
   3601c:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
   36020:	429a      	cmp	r2, r3
   36022:	d036      	beq.n	36092 <bsd_os_application_irq_handler+0xbe>
   36024:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
   36028:	429a      	cmp	r2, r3
   3602a:	d034      	beq.n	36096 <bsd_os_application_irq_handler+0xc2>
   3602c:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
   36030:	429a      	cmp	r2, r3
   36032:	d032      	beq.n	3609a <bsd_os_application_irq_handler+0xc6>
   36034:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
   36038:	429a      	cmp	r2, r3
   3603a:	d030      	beq.n	3609e <bsd_os_application_irq_handler+0xca>
   3603c:	f8b5 2080 	ldrh.w	r2, [r5, #128]	; 0x80
   36040:	429a      	cmp	r2, r3
   36042:	d02e      	beq.n	360a2 <bsd_os_application_irq_handler+0xce>
   36044:	f8b5 2090 	ldrh.w	r2, [r5, #144]	; 0x90
   36048:	429a      	cmp	r2, r3
   3604a:	bf08      	it	eq
   3604c:	2309      	moveq	r3, #9
   3604e:	d1cf      	bne.n	35ff0 <bsd_os_application_irq_handler+0x1c>
   36050:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   36054:	685a      	ldr	r2, [r3, #4]
   36056:	68d9      	ldr	r1, [r3, #12]
   36058:	4790      	blx	r2
   3605a:	b990      	cbnz	r0, 36082 <bsd_os_application_irq_handler+0xae>
   3605c:	2201      	movs	r2, #1
   3605e:	6820      	ldr	r0, [r4, #0]
   36060:	f804 2c04 	strb.w	r2, [r4, #-4]
   36064:	68fb      	ldr	r3, [r7, #12]
   36066:	3408      	adds	r4, #8
   36068:	4798      	blx	r3
   3606a:	42b4      	cmp	r4, r6
   3606c:	d1c3      	bne.n	35ff6 <bsd_os_application_irq_handler+0x22>
   3606e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36072:	2300      	movs	r3, #0
   36074:	e7ec      	b.n	36050 <bsd_os_application_irq_handler+0x7c>
   36076:	2301      	movs	r3, #1
   36078:	e7ea      	b.n	36050 <bsd_os_application_irq_handler+0x7c>
   3607a:	2302      	movs	r3, #2
   3607c:	e7e8      	b.n	36050 <bsd_os_application_irq_handler+0x7c>
   3607e:	2303      	movs	r3, #3
   36080:	e7e6      	b.n	36050 <bsd_os_application_irq_handler+0x7c>
   36082:	2802      	cmp	r0, #2
   36084:	bf0a      	itet	eq
   36086:	2304      	moveq	r3, #4
   36088:	f804 8c04 	strbne.w	r8, [r4, #-4]
   3608c:	f804 3c04 	strbeq.w	r3, [r4, #-4]
   36090:	e7ae      	b.n	35ff0 <bsd_os_application_irq_handler+0x1c>
   36092:	2304      	movs	r3, #4
   36094:	e7dc      	b.n	36050 <bsd_os_application_irq_handler+0x7c>
   36096:	2305      	movs	r3, #5
   36098:	e7da      	b.n	36050 <bsd_os_application_irq_handler+0x7c>
   3609a:	2306      	movs	r3, #6
   3609c:	e7d8      	b.n	36050 <bsd_os_application_irq_handler+0x7c>
   3609e:	2307      	movs	r3, #7
   360a0:	e7d6      	b.n	36050 <bsd_os_application_irq_handler+0x7c>
   360a2:	2308      	movs	r3, #8
   360a4:	e7d4      	b.n	36050 <bsd_os_application_irq_handler+0x7c>
   360a6:	bf00      	nop
   360a8:	20025014 	.word	0x20025014
   360ac:	20024ed8 	.word	0x20024ed8
   360b0:	20024f78 	.word	0x20024f78

000360b4 <rpc_framework_init>:
   360b4:	b508      	push	{r3, lr}
   360b6:	22a0      	movs	r2, #160	; 0xa0
   360b8:	2100      	movs	r1, #0
   360ba:	4802      	ldr	r0, [pc, #8]	; (360c4 <rpc_framework_init+0x10>)
   360bc:	f00a face 	bl	4065c <memset>
   360c0:	2000      	movs	r0, #0
   360c2:	bd08      	pop	{r3, pc}
   360c4:	20024ed8 	.word	0x20024ed8

000360c8 <rpc_client_register>:
   360c8:	8803      	ldrh	r3, [r0, #0]
   360ca:	2b00      	cmp	r3, #0
   360cc:	d045      	beq.n	3615a <rpc_client_register+0x92>
   360ce:	6842      	ldr	r2, [r0, #4]
   360d0:	4601      	mov	r1, r0
   360d2:	2a00      	cmp	r2, #0
   360d4:	d050      	beq.n	36178 <rpc_client_register+0xb0>
   360d6:	4a30      	ldr	r2, [pc, #192]	; (36198 <rpc_client_register+0xd0>)
   360d8:	8810      	ldrh	r0, [r2, #0]
   360da:	4283      	cmp	r3, r0
   360dc:	d03d      	beq.n	3615a <rpc_client_register+0x92>
   360de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   360e2:	8a14      	ldrh	r4, [r2, #16]
   360e4:	42a3      	cmp	r3, r4
   360e6:	d035      	beq.n	36154 <rpc_client_register+0x8c>
   360e8:	8c15      	ldrh	r5, [r2, #32]
   360ea:	42ab      	cmp	r3, r5
   360ec:	d032      	beq.n	36154 <rpc_client_register+0x8c>
   360ee:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   360f0:	42b3      	cmp	r3, r6
   360f2:	d02f      	beq.n	36154 <rpc_client_register+0x8c>
   360f4:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   360f8:	42bb      	cmp	r3, r7
   360fa:	d02b      	beq.n	36154 <rpc_client_register+0x8c>
   360fc:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   36100:	4563      	cmp	r3, ip
   36102:	d027      	beq.n	36154 <rpc_client_register+0x8c>
   36104:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   36108:	4573      	cmp	r3, lr
   3610a:	d023      	beq.n	36154 <rpc_client_register+0x8c>
   3610c:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   36110:	4543      	cmp	r3, r8
   36112:	d01f      	beq.n	36154 <rpc_client_register+0x8c>
   36114:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   36118:	454b      	cmp	r3, r9
   3611a:	d01b      	beq.n	36154 <rpc_client_register+0x8c>
   3611c:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   36120:	4553      	cmp	r3, sl
   36122:	d017      	beq.n	36154 <rpc_client_register+0x8c>
   36124:	b1e0      	cbz	r0, 36160 <rpc_client_register+0x98>
   36126:	b35c      	cbz	r4, 36180 <rpc_client_register+0xb8>
   36128:	b365      	cbz	r5, 36184 <rpc_client_register+0xbc>
   3612a:	b36e      	cbz	r6, 36188 <rpc_client_register+0xc0>
   3612c:	b377      	cbz	r7, 3618c <rpc_client_register+0xc4>
   3612e:	f1bc 0f00 	cmp.w	ip, #0
   36132:	d02d      	beq.n	36190 <rpc_client_register+0xc8>
   36134:	f1be 0f00 	cmp.w	lr, #0
   36138:	d020      	beq.n	3617c <rpc_client_register+0xb4>
   3613a:	f1b8 0f00 	cmp.w	r8, #0
   3613e:	d029      	beq.n	36194 <rpc_client_register+0xcc>
   36140:	f1b9 0f00 	cmp.w	r9, #0
   36144:	d00b      	beq.n	3615e <rpc_client_register+0x96>
   36146:	2009      	movs	r0, #9
   36148:	f1ba 0f00 	cmp.w	sl, #0
   3614c:	d008      	beq.n	36160 <rpc_client_register+0x98>
   3614e:	2004      	movs	r0, #4
   36150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   36154:	2007      	movs	r0, #7
   36156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3615a:	2007      	movs	r0, #7
   3615c:	4770      	bx	lr
   3615e:	2008      	movs	r0, #8
   36160:	0100      	lsls	r0, r0, #4
   36162:	5213      	strh	r3, [r2, r0]
   36164:	684b      	ldr	r3, [r1, #4]
   36166:	4402      	add	r2, r0
   36168:	6053      	str	r3, [r2, #4]
   3616a:	688b      	ldr	r3, [r1, #8]
   3616c:	2000      	movs	r0, #0
   3616e:	6093      	str	r3, [r2, #8]
   36170:	68cb      	ldr	r3, [r1, #12]
   36172:	60d3      	str	r3, [r2, #12]
   36174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   36178:	200e      	movs	r0, #14
   3617a:	4770      	bx	lr
   3617c:	2006      	movs	r0, #6
   3617e:	e7ef      	b.n	36160 <rpc_client_register+0x98>
   36180:	2001      	movs	r0, #1
   36182:	e7ed      	b.n	36160 <rpc_client_register+0x98>
   36184:	2002      	movs	r0, #2
   36186:	e7eb      	b.n	36160 <rpc_client_register+0x98>
   36188:	2003      	movs	r0, #3
   3618a:	e7e9      	b.n	36160 <rpc_client_register+0x98>
   3618c:	2004      	movs	r0, #4
   3618e:	e7e7      	b.n	36160 <rpc_client_register+0x98>
   36190:	2005      	movs	r0, #5
   36192:	e7e5      	b.n	36160 <rpc_client_register+0x98>
   36194:	2007      	movs	r0, #7
   36196:	e7e3      	b.n	36160 <rpc_client_register+0x98>
   36198:	20024ed8 	.word	0x20024ed8

0003619c <rpc_transport_input>:
   3619c:	b538      	push	{r3, r4, r5, lr}
   3619e:	4a82      	ldr	r2, [pc, #520]	; (363a8 <rpc_transport_input+0x20c>)
   361a0:	680b      	ldr	r3, [r1, #0]
   361a2:	8810      	ldrh	r0, [r2, #0]
   361a4:	b29b      	uxth	r3, r3
   361a6:	4298      	cmp	r0, r3
   361a8:	d027      	beq.n	361fa <rpc_transport_input+0x5e>
   361aa:	8a10      	ldrh	r0, [r2, #16]
   361ac:	4298      	cmp	r0, r3
   361ae:	d024      	beq.n	361fa <rpc_transport_input+0x5e>
   361b0:	8c10      	ldrh	r0, [r2, #32]
   361b2:	4298      	cmp	r0, r3
   361b4:	d021      	beq.n	361fa <rpc_transport_input+0x5e>
   361b6:	8e10      	ldrh	r0, [r2, #48]	; 0x30
   361b8:	4298      	cmp	r0, r3
   361ba:	d01e      	beq.n	361fa <rpc_transport_input+0x5e>
   361bc:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   361c0:	4298      	cmp	r0, r3
   361c2:	d01a      	beq.n	361fa <rpc_transport_input+0x5e>
   361c4:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
   361c8:	4298      	cmp	r0, r3
   361ca:	d016      	beq.n	361fa <rpc_transport_input+0x5e>
   361cc:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
   361d0:	4298      	cmp	r0, r3
   361d2:	d012      	beq.n	361fa <rpc_transport_input+0x5e>
   361d4:	f8b2 0070 	ldrh.w	r0, [r2, #112]	; 0x70
   361d8:	4298      	cmp	r0, r3
   361da:	d00e      	beq.n	361fa <rpc_transport_input+0x5e>
   361dc:	f8b2 0080 	ldrh.w	r0, [r2, #128]	; 0x80
   361e0:	4298      	cmp	r0, r3
   361e2:	d00a      	beq.n	361fa <rpc_transport_input+0x5e>
   361e4:	f8b2 2090 	ldrh.w	r2, [r2, #144]	; 0x90
   361e8:	429a      	cmp	r2, r3
   361ea:	d006      	beq.n	361fa <rpc_transport_input+0x5e>
   361ec:	6888      	ldr	r0, [r1, #8]
   361ee:	b118      	cbz	r0, 361f8 <rpc_transport_input+0x5c>
   361f0:	4b6e      	ldr	r3, [pc, #440]	; (363ac <rpc_transport_input+0x210>)
   361f2:	691b      	ldr	r3, [r3, #16]
   361f4:	4798      	blx	r3
   361f6:	2000      	movs	r0, #0
   361f8:	bd38      	pop	{r3, r4, r5, pc}
   361fa:	6888      	ldr	r0, [r1, #8]
   361fc:	2800      	cmp	r0, #0
   361fe:	f000 8098 	beq.w	36332 <rpc_transport_input+0x196>
   36202:	4a6b      	ldr	r2, [pc, #428]	; (363b0 <rpc_transport_input+0x214>)
   36204:	6814      	ldr	r4, [r2, #0]
   36206:	2c00      	cmp	r4, #0
   36208:	d03c      	beq.n	36284 <rpc_transport_input+0xe8>
   3620a:	6894      	ldr	r4, [r2, #8]
   3620c:	2c00      	cmp	r4, #0
   3620e:	f000 809a 	beq.w	36346 <rpc_transport_input+0x1aa>
   36212:	6914      	ldr	r4, [r2, #16]
   36214:	2c00      	cmp	r4, #0
   36216:	f000 809a 	beq.w	3634e <rpc_transport_input+0x1b2>
   3621a:	6994      	ldr	r4, [r2, #24]
   3621c:	2c00      	cmp	r4, #0
   3621e:	f000 809a 	beq.w	36356 <rpc_transport_input+0x1ba>
   36222:	6a14      	ldr	r4, [r2, #32]
   36224:	2c00      	cmp	r4, #0
   36226:	f000 809a 	beq.w	3635e <rpc_transport_input+0x1c2>
   3622a:	6a94      	ldr	r4, [r2, #40]	; 0x28
   3622c:	2c00      	cmp	r4, #0
   3622e:	f000 8084 	beq.w	3633a <rpc_transport_input+0x19e>
   36232:	6b14      	ldr	r4, [r2, #48]	; 0x30
   36234:	2c00      	cmp	r4, #0
   36236:	f000 8098 	beq.w	3636a <rpc_transport_input+0x1ce>
   3623a:	6b94      	ldr	r4, [r2, #56]	; 0x38
   3623c:	2c00      	cmp	r4, #0
   3623e:	f000 8096 	beq.w	3636e <rpc_transport_input+0x1d2>
   36242:	6c14      	ldr	r4, [r2, #64]	; 0x40
   36244:	2c00      	cmp	r4, #0
   36246:	f000 8096 	beq.w	36376 <rpc_transport_input+0x1da>
   3624a:	6c94      	ldr	r4, [r2, #72]	; 0x48
   3624c:	2c00      	cmp	r4, #0
   3624e:	f000 8096 	beq.w	3637e <rpc_transport_input+0x1e2>
   36252:	6d14      	ldr	r4, [r2, #80]	; 0x50
   36254:	2c00      	cmp	r4, #0
   36256:	f000 8096 	beq.w	36386 <rpc_transport_input+0x1ea>
   3625a:	6d94      	ldr	r4, [r2, #88]	; 0x58
   3625c:	2c00      	cmp	r4, #0
   3625e:	f000 8098 	beq.w	36392 <rpc_transport_input+0x1f6>
   36262:	6e14      	ldr	r4, [r2, #96]	; 0x60
   36264:	2c00      	cmp	r4, #0
   36266:	f000 8098 	beq.w	3639a <rpc_transport_input+0x1fe>
   3626a:	6e94      	ldr	r4, [r2, #104]	; 0x68
   3626c:	2c00      	cmp	r4, #0
   3626e:	f000 8096 	beq.w	3639e <rpc_transport_input+0x202>
   36272:	6f14      	ldr	r4, [r2, #112]	; 0x70
   36274:	2c00      	cmp	r4, #0
   36276:	f000 8094 	beq.w	363a2 <rpc_transport_input+0x206>
   3627a:	6f94      	ldr	r4, [r2, #120]	; 0x78
   3627c:	b10c      	cbz	r4, 36282 <rpc_transport_input+0xe6>
   3627e:	2001      	movs	r0, #1
   36280:	bd38      	pop	{r3, r4, r5, pc}
   36282:	240f      	movs	r4, #15
   36284:	eb02 05c4 	add.w	r5, r2, r4, lsl #3
   36288:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
   3628c:	80ab      	strh	r3, [r5, #4]
   3628e:	4b49      	ldr	r3, [pc, #292]	; (363b4 <rpc_transport_input+0x218>)
   36290:	781a      	ldrb	r2, [r3, #0]
   36292:	2a01      	cmp	r2, #1
   36294:	d053      	beq.n	3633e <rpc_transport_input+0x1a2>
   36296:	7a1a      	ldrb	r2, [r3, #8]
   36298:	2a01      	cmp	r2, #1
   3629a:	d041      	beq.n	36320 <rpc_transport_input+0x184>
   3629c:	7c1a      	ldrb	r2, [r3, #16]
   3629e:	2a01      	cmp	r2, #1
   362a0:	d04f      	beq.n	36342 <rpc_transport_input+0x1a6>
   362a2:	7e1a      	ldrb	r2, [r3, #24]
   362a4:	2a01      	cmp	r2, #1
   362a6:	d050      	beq.n	3634a <rpc_transport_input+0x1ae>
   362a8:	f893 2020 	ldrb.w	r2, [r3, #32]
   362ac:	2a01      	cmp	r2, #1
   362ae:	d050      	beq.n	36352 <rpc_transport_input+0x1b6>
   362b0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   362b4:	2a01      	cmp	r2, #1
   362b6:	d050      	beq.n	3635a <rpc_transport_input+0x1be>
   362b8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   362bc:	2a01      	cmp	r2, #1
   362be:	d03a      	beq.n	36336 <rpc_transport_input+0x19a>
   362c0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   362c4:	2a01      	cmp	r2, #1
   362c6:	d04c      	beq.n	36362 <rpc_transport_input+0x1c6>
   362c8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   362cc:	2a01      	cmp	r2, #1
   362ce:	d04a      	beq.n	36366 <rpc_transport_input+0x1ca>
   362d0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   362d4:	2a01      	cmp	r2, #1
   362d6:	d04c      	beq.n	36372 <rpc_transport_input+0x1d6>
   362d8:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   362dc:	2a01      	cmp	r2, #1
   362de:	d04c      	beq.n	3637a <rpc_transport_input+0x1de>
   362e0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   362e4:	2a01      	cmp	r2, #1
   362e6:	d04c      	beq.n	36382 <rpc_transport_input+0x1e6>
   362e8:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   362ec:	2a01      	cmp	r2, #1
   362ee:	d04c      	beq.n	3638a <rpc_transport_input+0x1ee>
   362f0:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   362f4:	2a01      	cmp	r2, #1
   362f6:	d04a      	beq.n	3638e <rpc_transport_input+0x1f2>
   362f8:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   362fc:	2a01      	cmp	r2, #1
   362fe:	d04a      	beq.n	36396 <rpc_transport_input+0x1fa>
   36300:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   36304:	2a01      	cmp	r2, #1
   36306:	d00a      	beq.n	3631e <rpc_transport_input+0x182>
   36308:	2c10      	cmp	r4, #16
   3630a:	d0b8      	beq.n	3627e <rpc_transport_input+0xe2>
   3630c:	2200      	movs	r2, #0
   3630e:	4b28      	ldr	r3, [pc, #160]	; (363b0 <rpc_transport_input+0x214>)
   36310:	2001      	movs	r0, #1
   36312:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   36316:	808a      	strh	r2, [r1, #4]
   36318:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   3631c:	bd38      	pop	{r3, r4, r5, pc}
   3631e:	220f      	movs	r2, #15
   36320:	2402      	movs	r4, #2
   36322:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   36326:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
   3632a:	6041      	str	r1, [r0, #4]
   3632c:	f7f0 ff8c 	bl	27248 <bsd_os_application_irq_set>
   36330:	e7a5      	b.n	3627e <rpc_transport_input+0xe2>
   36332:	2410      	movs	r4, #16
   36334:	e7ab      	b.n	3628e <rpc_transport_input+0xf2>
   36336:	2206      	movs	r2, #6
   36338:	e7f2      	b.n	36320 <rpc_transport_input+0x184>
   3633a:	2405      	movs	r4, #5
   3633c:	e7a2      	b.n	36284 <rpc_transport_input+0xe8>
   3633e:	2200      	movs	r2, #0
   36340:	e7ee      	b.n	36320 <rpc_transport_input+0x184>
   36342:	2202      	movs	r2, #2
   36344:	e7ec      	b.n	36320 <rpc_transport_input+0x184>
   36346:	2401      	movs	r4, #1
   36348:	e79c      	b.n	36284 <rpc_transport_input+0xe8>
   3634a:	2203      	movs	r2, #3
   3634c:	e7e8      	b.n	36320 <rpc_transport_input+0x184>
   3634e:	2402      	movs	r4, #2
   36350:	e798      	b.n	36284 <rpc_transport_input+0xe8>
   36352:	2204      	movs	r2, #4
   36354:	e7e4      	b.n	36320 <rpc_transport_input+0x184>
   36356:	2403      	movs	r4, #3
   36358:	e794      	b.n	36284 <rpc_transport_input+0xe8>
   3635a:	2205      	movs	r2, #5
   3635c:	e7e0      	b.n	36320 <rpc_transport_input+0x184>
   3635e:	2404      	movs	r4, #4
   36360:	e790      	b.n	36284 <rpc_transport_input+0xe8>
   36362:	2207      	movs	r2, #7
   36364:	e7dc      	b.n	36320 <rpc_transport_input+0x184>
   36366:	2208      	movs	r2, #8
   36368:	e7da      	b.n	36320 <rpc_transport_input+0x184>
   3636a:	2406      	movs	r4, #6
   3636c:	e78a      	b.n	36284 <rpc_transport_input+0xe8>
   3636e:	2407      	movs	r4, #7
   36370:	e788      	b.n	36284 <rpc_transport_input+0xe8>
   36372:	2209      	movs	r2, #9
   36374:	e7d4      	b.n	36320 <rpc_transport_input+0x184>
   36376:	2408      	movs	r4, #8
   36378:	e784      	b.n	36284 <rpc_transport_input+0xe8>
   3637a:	220a      	movs	r2, #10
   3637c:	e7d0      	b.n	36320 <rpc_transport_input+0x184>
   3637e:	2409      	movs	r4, #9
   36380:	e780      	b.n	36284 <rpc_transport_input+0xe8>
   36382:	220b      	movs	r2, #11
   36384:	e7cc      	b.n	36320 <rpc_transport_input+0x184>
   36386:	240a      	movs	r4, #10
   36388:	e77c      	b.n	36284 <rpc_transport_input+0xe8>
   3638a:	220c      	movs	r2, #12
   3638c:	e7c8      	b.n	36320 <rpc_transport_input+0x184>
   3638e:	220d      	movs	r2, #13
   36390:	e7c6      	b.n	36320 <rpc_transport_input+0x184>
   36392:	240b      	movs	r4, #11
   36394:	e776      	b.n	36284 <rpc_transport_input+0xe8>
   36396:	220e      	movs	r2, #14
   36398:	e7c2      	b.n	36320 <rpc_transport_input+0x184>
   3639a:	240c      	movs	r4, #12
   3639c:	e772      	b.n	36284 <rpc_transport_input+0xe8>
   3639e:	240d      	movs	r4, #13
   363a0:	e770      	b.n	36284 <rpc_transport_input+0xe8>
   363a2:	240e      	movs	r4, #14
   363a4:	e76e      	b.n	36284 <rpc_transport_input+0xe8>
   363a6:	bf00      	nop
   363a8:	20024ed8 	.word	0x20024ed8
   363ac:	20024f78 	.word	0x20024f78
   363b0:	20024f90 	.word	0x20024f90
   363b4:	20025010 	.word	0x20025010

000363b8 <rpc_transport_register>:
   363b8:	b4f0      	push	{r4, r5, r6, r7}
   363ba:	2900      	cmp	r1, #0
   363bc:	d052      	beq.n	36464 <rpc_transport_register+0xac>
   363be:	2800      	cmp	r0, #0
   363c0:	d050      	beq.n	36464 <rpc_transport_register+0xac>
   363c2:	6883      	ldr	r3, [r0, #8]
   363c4:	2b00      	cmp	r3, #0
   363c6:	d04d      	beq.n	36464 <rpc_transport_register+0xac>
   363c8:	6903      	ldr	r3, [r0, #16]
   363ca:	2b00      	cmp	r3, #0
   363cc:	d04a      	beq.n	36464 <rpc_transport_register+0xac>
   363ce:	6843      	ldr	r3, [r0, #4]
   363d0:	2b00      	cmp	r3, #0
   363d2:	d047      	beq.n	36464 <rpc_transport_register+0xac>
   363d4:	68c3      	ldr	r3, [r0, #12]
   363d6:	2b00      	cmp	r3, #0
   363d8:	d044      	beq.n	36464 <rpc_transport_register+0xac>
   363da:	6803      	ldr	r3, [r0, #0]
   363dc:	2b00      	cmp	r3, #0
   363de:	d041      	beq.n	36464 <rpc_transport_register+0xac>
   363e0:	6943      	ldr	r3, [r0, #20]
   363e2:	2b00      	cmp	r3, #0
   363e4:	d03e      	beq.n	36464 <rpc_transport_register+0xac>
   363e6:	2601      	movs	r6, #1
   363e8:	2500      	movs	r5, #0
   363ea:	4604      	mov	r4, r0
   363ec:	460f      	mov	r7, r1
   363ee:	4a1f      	ldr	r2, [pc, #124]	; (3646c <rpc_transport_register+0xb4>)
   363f0:	4b1f      	ldr	r3, [pc, #124]	; (36470 <rpc_transport_register+0xb8>)
   363f2:	f8df c080 	ldr.w	ip, [pc, #128]	; 36474 <rpc_transport_register+0xbc>
   363f6:	7416      	strb	r6, [r2, #16]
   363f8:	7616      	strb	r6, [r2, #24]
   363fa:	f882 6020 	strb.w	r6, [r2, #32]
   363fe:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
   36402:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
   36406:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
   3640a:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
   3640e:	f882 6048 	strb.w	r6, [r2, #72]	; 0x48
   36412:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
   36416:	f882 6058 	strb.w	r6, [r2, #88]	; 0x58
   3641a:	f882 6060 	strb.w	r6, [r2, #96]	; 0x60
   3641e:	f882 6068 	strb.w	r6, [r2, #104]	; 0x68
   36422:	f882 6070 	strb.w	r6, [r2, #112]	; 0x70
   36426:	f882 6078 	strb.w	r6, [r2, #120]	; 0x78
   3642a:	611d      	str	r5, [r3, #16]
   3642c:	619d      	str	r5, [r3, #24]
   3642e:	621d      	str	r5, [r3, #32]
   36430:	629d      	str	r5, [r3, #40]	; 0x28
   36432:	631d      	str	r5, [r3, #48]	; 0x30
   36434:	639d      	str	r5, [r3, #56]	; 0x38
   36436:	641d      	str	r5, [r3, #64]	; 0x40
   36438:	649d      	str	r5, [r3, #72]	; 0x48
   3643a:	651d      	str	r5, [r3, #80]	; 0x50
   3643c:	659d      	str	r5, [r3, #88]	; 0x58
   3643e:	661d      	str	r5, [r3, #96]	; 0x60
   36440:	669d      	str	r5, [r3, #104]	; 0x68
   36442:	671d      	str	r5, [r3, #112]	; 0x70
   36444:	679d      	str	r5, [r3, #120]	; 0x78
   36446:	7016      	strb	r6, [r2, #0]
   36448:	7216      	strb	r6, [r2, #8]
   3644a:	601d      	str	r5, [r3, #0]
   3644c:	609d      	str	r5, [r3, #8]
   3644e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   36450:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   36454:	e894 0003 	ldmia.w	r4, {r0, r1}
   36458:	e88c 0003 	stmia.w	ip, {r0, r1}
   3645c:	603e      	str	r6, [r7, #0]
   3645e:	4628      	mov	r0, r5
   36460:	bcf0      	pop	{r4, r5, r6, r7}
   36462:	4770      	bx	lr
   36464:	250e      	movs	r5, #14
   36466:	4628      	mov	r0, r5
   36468:	bcf0      	pop	{r4, r5, r6, r7}
   3646a:	4770      	bx	lr
   3646c:	20025010 	.word	0x20025010
   36470:	20024f90 	.word	0x20024f90
   36474:	20024f78 	.word	0x20024f78

00036478 <rpc_transport_unregister>:
   36478:	2800      	cmp	r0, #0
   3647a:	d03a      	beq.n	364f2 <rpc_transport_unregister+0x7a>
   3647c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   36480:	4680      	mov	r8, r0
   36482:	4c1d      	ldr	r4, [pc, #116]	; (364f8 <rpc_transport_unregister+0x80>)
   36484:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
   36488:	68a3      	ldr	r3, [r4, #8]
   3648a:	3410      	adds	r4, #16
   3648c:	b103      	cbz	r3, 36490 <rpc_transport_unregister+0x18>
   3648e:	4798      	blx	r3
   36490:	42ac      	cmp	r4, r5
   36492:	d1f9      	bne.n	36488 <rpc_transport_unregister+0x10>
   36494:	f04f 0901 	mov.w	r9, #1
   36498:	2600      	movs	r6, #0
   3649a:	4c18      	ldr	r4, [pc, #96]	; (364fc <rpc_transport_unregister+0x84>)
   3649c:	4d18      	ldr	r5, [pc, #96]	; (36500 <rpc_transport_unregister+0x88>)
   3649e:	f8df a064 	ldr.w	sl, [pc, #100]	; 36504 <rpc_transport_unregister+0x8c>
   364a2:	f104 0780 	add.w	r7, r4, #128	; 0x80
   364a6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   364aa:	2b01      	cmp	r3, #1
   364ac:	d005      	beq.n	364ba <rpc_transport_unregister+0x42>
   364ae:	f8da 300c 	ldr.w	r3, [sl, #12]
   364b2:	6820      	ldr	r0, [r4, #0]
   364b4:	4798      	blx	r3
   364b6:	f804 9c04 	strb.w	r9, [r4, #-4]
   364ba:	f855 0c04 	ldr.w	r0, [r5, #-4]
   364be:	3408      	adds	r4, #8
   364c0:	b128      	cbz	r0, 364ce <rpc_transport_unregister+0x56>
   364c2:	f8da 3010 	ldr.w	r3, [sl, #16]
   364c6:	4798      	blx	r3
   364c8:	802e      	strh	r6, [r5, #0]
   364ca:	f845 6c04 	str.w	r6, [r5, #-4]
   364ce:	42bc      	cmp	r4, r7
   364d0:	f105 0508 	add.w	r5, r5, #8
   364d4:	d1e7      	bne.n	364a6 <rpc_transport_unregister+0x2e>
   364d6:	f8d8 0000 	ldr.w	r0, [r8]
   364da:	2218      	movs	r2, #24
   364dc:	3801      	subs	r0, #1
   364de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   364e2:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   364e6:	2100      	movs	r1, #0
   364e8:	f00a f8b8 	bl	4065c <memset>
   364ec:	2000      	movs	r0, #0
   364ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   364f2:	200e      	movs	r0, #14
   364f4:	4770      	bx	lr
   364f6:	bf00      	nop
   364f8:	20024ed8 	.word	0x20024ed8
   364fc:	20025014 	.word	0x20025014
   36500:	20024f94 	.word	0x20024f94
   36504:	20024f78 	.word	0x20024f78

00036508 <rpc_message_send>:
   36508:	b168      	cbz	r0, 36526 <rpc_message_send+0x1e>
   3650a:	b171      	cbz	r1, 3652a <rpc_message_send+0x22>
   3650c:	4a09      	ldr	r2, [pc, #36]	; (36534 <rpc_message_send+0x2c>)
   3650e:	6853      	ldr	r3, [r2, #4]
   36510:	b16b      	cbz	r3, 3652e <rpc_message_send+0x26>
   36512:	684b      	ldr	r3, [r1, #4]
   36514:	8008      	strh	r0, [r1, #0]
   36516:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   3651a:	f043 0302 	orr.w	r3, r3, #2
   3651e:	6812      	ldr	r2, [r2, #0]
   36520:	604b      	str	r3, [r1, #4]
   36522:	4608      	mov	r0, r1
   36524:	4710      	bx	r2
   36526:	2007      	movs	r0, #7
   36528:	4770      	bx	lr
   3652a:	200e      	movs	r0, #14
   3652c:	4770      	bx	lr
   3652e:	2008      	movs	r0, #8
   36530:	4770      	bx	lr
   36532:	bf00      	nop
   36534:	20024f78 	.word	0x20024f78

00036538 <rpc_message_alloc>:
   36538:	b35a      	cbz	r2, 36592 <rpc_message_alloc+0x5a>
   3653a:	b330      	cbz	r0, 3658a <rpc_message_alloc+0x52>
   3653c:	2300      	movs	r3, #0
   3653e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36542:	4f15      	ldr	r7, [pc, #84]	; (36598 <rpc_message_alloc+0x60>)
   36544:	6013      	str	r3, [r2, #0]
   36546:	687b      	ldr	r3, [r7, #4]
   36548:	b30b      	cbz	r3, 3658e <rpc_message_alloc+0x56>
   3654a:	4615      	mov	r5, r2
   3654c:	460c      	mov	r4, r1
   3654e:	4606      	mov	r6, r0
   36550:	b959      	cbnz	r1, 3656a <rpc_message_alloc+0x32>
   36552:	4798      	blx	r3
   36554:	4603      	mov	r3, r0
   36556:	b1a8      	cbz	r0, 36584 <rpc_message_alloc+0x4c>
   36558:	46a0      	mov	r8, r4
   3655a:	60dc      	str	r4, [r3, #12]
   3655c:	f8c3 8008 	str.w	r8, [r3, #8]
   36560:	801e      	strh	r6, [r3, #0]
   36562:	602b      	str	r3, [r5, #0]
   36564:	2000      	movs	r0, #0
   36566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3656a:	68bb      	ldr	r3, [r7, #8]
   3656c:	4608      	mov	r0, r1
   3656e:	4798      	blx	r3
   36570:	4680      	mov	r8, r0
   36572:	b138      	cbz	r0, 36584 <rpc_message_alloc+0x4c>
   36574:	687b      	ldr	r3, [r7, #4]
   36576:	4798      	blx	r3
   36578:	4603      	mov	r3, r0
   3657a:	2800      	cmp	r0, #0
   3657c:	d1ed      	bne.n	3655a <rpc_message_alloc+0x22>
   3657e:	693b      	ldr	r3, [r7, #16]
   36580:	4640      	mov	r0, r8
   36582:	4798      	blx	r3
   36584:	2004      	movs	r0, #4
   36586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3658a:	2007      	movs	r0, #7
   3658c:	4770      	bx	lr
   3658e:	2008      	movs	r0, #8
   36590:	e7f9      	b.n	36586 <rpc_message_alloc+0x4e>
   36592:	200e      	movs	r0, #14
   36594:	4770      	bx	lr
   36596:	bf00      	nop
   36598:	20024f78 	.word	0x20024f78

0003659c <rpc_message_free>:
   3659c:	2800      	cmp	r0, #0
   3659e:	f000 808c 	beq.w	366ba <rpc_message_free+0x11e>
   365a2:	2900      	cmp	r1, #0
   365a4:	f000 80e9 	beq.w	3677a <rpc_message_free+0x1de>
   365a8:	b538      	push	{r3, r4, r5, lr}
   365aa:	4a83      	ldr	r2, [pc, #524]	; (367b8 <rpc_message_free+0x21c>)
   365ac:	6853      	ldr	r3, [r2, #4]
   365ae:	2b00      	cmp	r3, #0
   365b0:	f000 8085 	beq.w	366be <rpc_message_free+0x122>
   365b4:	4c81      	ldr	r4, [pc, #516]	; (367bc <rpc_message_free+0x220>)
   365b6:	4608      	mov	r0, r1
   365b8:	6863      	ldr	r3, [r4, #4]
   365ba:	4299      	cmp	r1, r3
   365bc:	f000 8085 	beq.w	366ca <rpc_message_free+0x12e>
   365c0:	68e3      	ldr	r3, [r4, #12]
   365c2:	4298      	cmp	r0, r3
   365c4:	f000 808e 	beq.w	366e4 <rpc_message_free+0x148>
   365c8:	6963      	ldr	r3, [r4, #20]
   365ca:	4298      	cmp	r0, r3
   365cc:	f000 8090 	beq.w	366f0 <rpc_message_free+0x154>
   365d0:	69e3      	ldr	r3, [r4, #28]
   365d2:	4298      	cmp	r0, r3
   365d4:	f000 8092 	beq.w	366fc <rpc_message_free+0x160>
   365d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   365da:	4298      	cmp	r0, r3
   365dc:	f000 8095 	beq.w	3670a <rpc_message_free+0x16e>
   365e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   365e2:	4298      	cmp	r0, r3
   365e4:	f000 8098 	beq.w	36718 <rpc_message_free+0x17c>
   365e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   365ea:	4298      	cmp	r0, r3
   365ec:	f000 809b 	beq.w	36726 <rpc_message_free+0x18a>
   365f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   365f2:	4298      	cmp	r0, r3
   365f4:	f000 809e 	beq.w	36734 <rpc_message_free+0x198>
   365f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   365fa:	4298      	cmp	r0, r3
   365fc:	f000 80a1 	beq.w	36742 <rpc_message_free+0x1a6>
   36600:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   36602:	4298      	cmp	r0, r3
   36604:	f000 80a4 	beq.w	36750 <rpc_message_free+0x1b4>
   36608:	6d63      	ldr	r3, [r4, #84]	; 0x54
   3660a:	4298      	cmp	r0, r3
   3660c:	f000 80a7 	beq.w	3675e <rpc_message_free+0x1c2>
   36610:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   36612:	4298      	cmp	r0, r3
   36614:	f000 80aa 	beq.w	3676c <rpc_message_free+0x1d0>
   36618:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3661a:	4298      	cmp	r0, r3
   3661c:	f000 80af 	beq.w	3677e <rpc_message_free+0x1e2>
   36620:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   36622:	4298      	cmp	r0, r3
   36624:	f000 80b2 	beq.w	3678c <rpc_message_free+0x1f0>
   36628:	6f63      	ldr	r3, [r4, #116]	; 0x74
   3662a:	4298      	cmp	r0, r3
   3662c:	f000 80b5 	beq.w	3679a <rpc_message_free+0x1fe>
   36630:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   36632:	4283      	cmp	r3, r0
   36634:	f000 80b8 	beq.w	367a8 <rpc_message_free+0x20c>
   36638:	68d3      	ldr	r3, [r2, #12]
   3663a:	4798      	blx	r3
   3663c:	7823      	ldrb	r3, [r4, #0]
   3663e:	2b04      	cmp	r3, #4
   36640:	d03f      	beq.n	366c2 <rpc_message_free+0x126>
   36642:	7a23      	ldrb	r3, [r4, #8]
   36644:	2b04      	cmp	r3, #4
   36646:	d03c      	beq.n	366c2 <rpc_message_free+0x126>
   36648:	7c23      	ldrb	r3, [r4, #16]
   3664a:	2b04      	cmp	r3, #4
   3664c:	d039      	beq.n	366c2 <rpc_message_free+0x126>
   3664e:	7e23      	ldrb	r3, [r4, #24]
   36650:	2b04      	cmp	r3, #4
   36652:	d036      	beq.n	366c2 <rpc_message_free+0x126>
   36654:	f894 3020 	ldrb.w	r3, [r4, #32]
   36658:	2b04      	cmp	r3, #4
   3665a:	d032      	beq.n	366c2 <rpc_message_free+0x126>
   3665c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   36660:	2b04      	cmp	r3, #4
   36662:	d02e      	beq.n	366c2 <rpc_message_free+0x126>
   36664:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   36668:	2b04      	cmp	r3, #4
   3666a:	d02a      	beq.n	366c2 <rpc_message_free+0x126>
   3666c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   36670:	2b04      	cmp	r3, #4
   36672:	d026      	beq.n	366c2 <rpc_message_free+0x126>
   36674:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   36678:	2b04      	cmp	r3, #4
   3667a:	d022      	beq.n	366c2 <rpc_message_free+0x126>
   3667c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   36680:	2b04      	cmp	r3, #4
   36682:	d01e      	beq.n	366c2 <rpc_message_free+0x126>
   36684:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   36688:	2b04      	cmp	r3, #4
   3668a:	d01a      	beq.n	366c2 <rpc_message_free+0x126>
   3668c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   36690:	2b04      	cmp	r3, #4
   36692:	d016      	beq.n	366c2 <rpc_message_free+0x126>
   36694:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   36698:	2b04      	cmp	r3, #4
   3669a:	d012      	beq.n	366c2 <rpc_message_free+0x126>
   3669c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   366a0:	2b04      	cmp	r3, #4
   366a2:	d00e      	beq.n	366c2 <rpc_message_free+0x126>
   366a4:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   366a8:	2b04      	cmp	r3, #4
   366aa:	d00a      	beq.n	366c2 <rpc_message_free+0x126>
   366ac:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   366b0:	2b04      	cmp	r3, #4
   366b2:	bf18      	it	ne
   366b4:	2000      	movne	r0, #0
   366b6:	d004      	beq.n	366c2 <rpc_message_free+0x126>
   366b8:	bd38      	pop	{r3, r4, r5, pc}
   366ba:	2007      	movs	r0, #7
   366bc:	4770      	bx	lr
   366be:	2008      	movs	r0, #8
   366c0:	bd38      	pop	{r3, r4, r5, pc}
   366c2:	f7f0 fdc1 	bl	27248 <bsd_os_application_irq_set>
   366c6:	2000      	movs	r0, #0
   366c8:	bd38      	pop	{r3, r4, r5, pc}
   366ca:	7821      	ldrb	r1, [r4, #0]
   366cc:	2903      	cmp	r1, #3
   366ce:	f47f af77 	bne.w	365c0 <rpc_message_free+0x24>
   366d2:	2100      	movs	r1, #0
   366d4:	2501      	movs	r5, #1
   366d6:	4618      	mov	r0, r3
   366d8:	68d2      	ldr	r2, [r2, #12]
   366da:	f804 5031 	strb.w	r5, [r4, r1, lsl #3]
   366de:	4790      	blx	r2
   366e0:	2000      	movs	r0, #0
   366e2:	bd38      	pop	{r3, r4, r5, pc}
   366e4:	7a21      	ldrb	r1, [r4, #8]
   366e6:	2903      	cmp	r1, #3
   366e8:	f47f af6e 	bne.w	365c8 <rpc_message_free+0x2c>
   366ec:	2101      	movs	r1, #1
   366ee:	e7f1      	b.n	366d4 <rpc_message_free+0x138>
   366f0:	7c21      	ldrb	r1, [r4, #16]
   366f2:	2903      	cmp	r1, #3
   366f4:	f47f af6c 	bne.w	365d0 <rpc_message_free+0x34>
   366f8:	2102      	movs	r1, #2
   366fa:	e7eb      	b.n	366d4 <rpc_message_free+0x138>
   366fc:	7e21      	ldrb	r1, [r4, #24]
   366fe:	2903      	cmp	r1, #3
   36700:	d0e8      	beq.n	366d4 <rpc_message_free+0x138>
   36702:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36704:	4298      	cmp	r0, r3
   36706:	f47f af6b 	bne.w	365e0 <rpc_message_free+0x44>
   3670a:	f894 1020 	ldrb.w	r1, [r4, #32]
   3670e:	2903      	cmp	r1, #3
   36710:	f47f af66 	bne.w	365e0 <rpc_message_free+0x44>
   36714:	2104      	movs	r1, #4
   36716:	e7dd      	b.n	366d4 <rpc_message_free+0x138>
   36718:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   3671c:	2903      	cmp	r1, #3
   3671e:	f47f af63 	bne.w	365e8 <rpc_message_free+0x4c>
   36722:	2105      	movs	r1, #5
   36724:	e7d6      	b.n	366d4 <rpc_message_free+0x138>
   36726:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   3672a:	2903      	cmp	r1, #3
   3672c:	f47f af60 	bne.w	365f0 <rpc_message_free+0x54>
   36730:	2106      	movs	r1, #6
   36732:	e7cf      	b.n	366d4 <rpc_message_free+0x138>
   36734:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   36738:	2903      	cmp	r1, #3
   3673a:	f47f af5d 	bne.w	365f8 <rpc_message_free+0x5c>
   3673e:	2107      	movs	r1, #7
   36740:	e7c8      	b.n	366d4 <rpc_message_free+0x138>
   36742:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   36746:	2903      	cmp	r1, #3
   36748:	f47f af5a 	bne.w	36600 <rpc_message_free+0x64>
   3674c:	2108      	movs	r1, #8
   3674e:	e7c1      	b.n	366d4 <rpc_message_free+0x138>
   36750:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   36754:	2903      	cmp	r1, #3
   36756:	f47f af57 	bne.w	36608 <rpc_message_free+0x6c>
   3675a:	2109      	movs	r1, #9
   3675c:	e7ba      	b.n	366d4 <rpc_message_free+0x138>
   3675e:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   36762:	2903      	cmp	r1, #3
   36764:	f47f af54 	bne.w	36610 <rpc_message_free+0x74>
   36768:	210a      	movs	r1, #10
   3676a:	e7b3      	b.n	366d4 <rpc_message_free+0x138>
   3676c:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
   36770:	2903      	cmp	r1, #3
   36772:	f47f af51 	bne.w	36618 <rpc_message_free+0x7c>
   36776:	210b      	movs	r1, #11
   36778:	e7ac      	b.n	366d4 <rpc_message_free+0x138>
   3677a:	200e      	movs	r0, #14
   3677c:	4770      	bx	lr
   3677e:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   36782:	2903      	cmp	r1, #3
   36784:	f47f af4c 	bne.w	36620 <rpc_message_free+0x84>
   36788:	210c      	movs	r1, #12
   3678a:	e7a3      	b.n	366d4 <rpc_message_free+0x138>
   3678c:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   36790:	2903      	cmp	r1, #3
   36792:	f47f af49 	bne.w	36628 <rpc_message_free+0x8c>
   36796:	210d      	movs	r1, #13
   36798:	e79c      	b.n	366d4 <rpc_message_free+0x138>
   3679a:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
   3679e:	2903      	cmp	r1, #3
   367a0:	f47f af46 	bne.w	36630 <rpc_message_free+0x94>
   367a4:	210e      	movs	r1, #14
   367a6:	e795      	b.n	366d4 <rpc_message_free+0x138>
   367a8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   367ac:	2b03      	cmp	r3, #3
   367ae:	f47f af43 	bne.w	36638 <rpc_message_free+0x9c>
   367b2:	4603      	mov	r3, r0
   367b4:	210f      	movs	r1, #15
   367b6:	e78d      	b.n	366d4 <rpc_message_free+0x138>
   367b8:	20024f78 	.word	0x20024f78
   367bc:	20025010 	.word	0x20025010

000367c0 <rpc_message_data_free>:
   367c0:	2800      	cmp	r0, #0
   367c2:	f000 8091 	beq.w	368e8 <rpc_message_data_free+0x128>
   367c6:	2900      	cmp	r1, #0
   367c8:	f000 80e4 	beq.w	36994 <rpc_message_data_free+0x1d4>
   367cc:	b538      	push	{r3, r4, r5, lr}
   367ce:	4a81      	ldr	r2, [pc, #516]	; (369d4 <rpc_message_data_free+0x214>)
   367d0:	6853      	ldr	r3, [r2, #4]
   367d2:	2b00      	cmp	r3, #0
   367d4:	f000 808a 	beq.w	368ec <rpc_message_data_free+0x12c>
   367d8:	4b7f      	ldr	r3, [pc, #508]	; (369d8 <rpc_message_data_free+0x218>)
   367da:	681c      	ldr	r4, [r3, #0]
   367dc:	42a1      	cmp	r1, r4
   367de:	f000 8087 	beq.w	368f0 <rpc_message_data_free+0x130>
   367e2:	689c      	ldr	r4, [r3, #8]
   367e4:	42a1      	cmp	r1, r4
   367e6:	f000 808f 	beq.w	36908 <rpc_message_data_free+0x148>
   367ea:	691c      	ldr	r4, [r3, #16]
   367ec:	42a1      	cmp	r1, r4
   367ee:	f000 8091 	beq.w	36914 <rpc_message_data_free+0x154>
   367f2:	699c      	ldr	r4, [r3, #24]
   367f4:	42a1      	cmp	r1, r4
   367f6:	f000 8093 	beq.w	36920 <rpc_message_data_free+0x160>
   367fa:	6a1c      	ldr	r4, [r3, #32]
   367fc:	42a1      	cmp	r1, r4
   367fe:	f000 8095 	beq.w	3692c <rpc_message_data_free+0x16c>
   36802:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   36804:	42a1      	cmp	r1, r4
   36806:	f000 8097 	beq.w	36938 <rpc_message_data_free+0x178>
   3680a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   3680c:	42a1      	cmp	r1, r4
   3680e:	f000 8099 	beq.w	36944 <rpc_message_data_free+0x184>
   36812:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   36814:	42a1      	cmp	r1, r4
   36816:	f000 809b 	beq.w	36950 <rpc_message_data_free+0x190>
   3681a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   3681c:	42a1      	cmp	r1, r4
   3681e:	f000 809d 	beq.w	3695c <rpc_message_data_free+0x19c>
   36822:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   36824:	42a1      	cmp	r1, r4
   36826:	f000 80a0 	beq.w	3696a <rpc_message_data_free+0x1aa>
   3682a:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   3682c:	42a1      	cmp	r1, r4
   3682e:	f000 80a3 	beq.w	36978 <rpc_message_data_free+0x1b8>
   36832:	6d9c      	ldr	r4, [r3, #88]	; 0x58
   36834:	42a1      	cmp	r1, r4
   36836:	f000 80a6 	beq.w	36986 <rpc_message_data_free+0x1c6>
   3683a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   3683c:	42a1      	cmp	r1, r4
   3683e:	f000 80ab 	beq.w	36998 <rpc_message_data_free+0x1d8>
   36842:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   36844:	42a1      	cmp	r1, r4
   36846:	f000 80ae 	beq.w	369a6 <rpc_message_data_free+0x1e6>
   3684a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   3684c:	42a1      	cmp	r1, r4
   3684e:	f000 80b1 	beq.w	369b4 <rpc_message_data_free+0x1f4>
   36852:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   36854:	428c      	cmp	r4, r1
   36856:	f000 80b4 	beq.w	369c2 <rpc_message_data_free+0x202>
   3685a:	6913      	ldr	r3, [r2, #16]
   3685c:	4608      	mov	r0, r1
   3685e:	4798      	blx	r3
   36860:	4b5e      	ldr	r3, [pc, #376]	; (369dc <rpc_message_data_free+0x21c>)
   36862:	781a      	ldrb	r2, [r3, #0]
   36864:	2a04      	cmp	r2, #4
   36866:	d03b      	beq.n	368e0 <rpc_message_data_free+0x120>
   36868:	7a1a      	ldrb	r2, [r3, #8]
   3686a:	2a04      	cmp	r2, #4
   3686c:	d038      	beq.n	368e0 <rpc_message_data_free+0x120>
   3686e:	7c1a      	ldrb	r2, [r3, #16]
   36870:	2a04      	cmp	r2, #4
   36872:	d035      	beq.n	368e0 <rpc_message_data_free+0x120>
   36874:	7e1a      	ldrb	r2, [r3, #24]
   36876:	2a04      	cmp	r2, #4
   36878:	d032      	beq.n	368e0 <rpc_message_data_free+0x120>
   3687a:	f893 2020 	ldrb.w	r2, [r3, #32]
   3687e:	2a04      	cmp	r2, #4
   36880:	d02e      	beq.n	368e0 <rpc_message_data_free+0x120>
   36882:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   36886:	2a04      	cmp	r2, #4
   36888:	d02a      	beq.n	368e0 <rpc_message_data_free+0x120>
   3688a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   3688e:	2a04      	cmp	r2, #4
   36890:	d026      	beq.n	368e0 <rpc_message_data_free+0x120>
   36892:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   36896:	2a04      	cmp	r2, #4
   36898:	d022      	beq.n	368e0 <rpc_message_data_free+0x120>
   3689a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   3689e:	2a04      	cmp	r2, #4
   368a0:	d01e      	beq.n	368e0 <rpc_message_data_free+0x120>
   368a2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   368a6:	2a04      	cmp	r2, #4
   368a8:	d01a      	beq.n	368e0 <rpc_message_data_free+0x120>
   368aa:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   368ae:	2a04      	cmp	r2, #4
   368b0:	d016      	beq.n	368e0 <rpc_message_data_free+0x120>
   368b2:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   368b6:	2a04      	cmp	r2, #4
   368b8:	d012      	beq.n	368e0 <rpc_message_data_free+0x120>
   368ba:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   368be:	2a04      	cmp	r2, #4
   368c0:	d00e      	beq.n	368e0 <rpc_message_data_free+0x120>
   368c2:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   368c6:	2a04      	cmp	r2, #4
   368c8:	d00a      	beq.n	368e0 <rpc_message_data_free+0x120>
   368ca:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   368ce:	2a04      	cmp	r2, #4
   368d0:	d006      	beq.n	368e0 <rpc_message_data_free+0x120>
   368d2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   368d6:	2b04      	cmp	r3, #4
   368d8:	bf18      	it	ne
   368da:	2000      	movne	r0, #0
   368dc:	d000      	beq.n	368e0 <rpc_message_data_free+0x120>
   368de:	bd38      	pop	{r3, r4, r5, pc}
   368e0:	f7f0 fcb2 	bl	27248 <bsd_os_application_irq_set>
   368e4:	2000      	movs	r0, #0
   368e6:	bd38      	pop	{r3, r4, r5, pc}
   368e8:	2007      	movs	r0, #7
   368ea:	4770      	bx	lr
   368ec:	2008      	movs	r0, #8
   368ee:	bd38      	pop	{r3, r4, r5, pc}
   368f0:	889c      	ldrh	r4, [r3, #4]
   368f2:	4284      	cmp	r4, r0
   368f4:	f47f af75 	bne.w	367e2 <rpc_message_data_free+0x22>
   368f8:	2400      	movs	r4, #0
   368fa:	2000      	movs	r0, #0
   368fc:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   36900:	f843 0034 	str.w	r0, [r3, r4, lsl #3]
   36904:	80a8      	strh	r0, [r5, #4]
   36906:	e7a8      	b.n	3685a <rpc_message_data_free+0x9a>
   36908:	899c      	ldrh	r4, [r3, #12]
   3690a:	4284      	cmp	r4, r0
   3690c:	f47f af6d 	bne.w	367ea <rpc_message_data_free+0x2a>
   36910:	2401      	movs	r4, #1
   36912:	e7f2      	b.n	368fa <rpc_message_data_free+0x13a>
   36914:	8a9c      	ldrh	r4, [r3, #20]
   36916:	4284      	cmp	r4, r0
   36918:	f47f af6b 	bne.w	367f2 <rpc_message_data_free+0x32>
   3691c:	2402      	movs	r4, #2
   3691e:	e7ec      	b.n	368fa <rpc_message_data_free+0x13a>
   36920:	8b9c      	ldrh	r4, [r3, #28]
   36922:	4284      	cmp	r4, r0
   36924:	f47f af69 	bne.w	367fa <rpc_message_data_free+0x3a>
   36928:	2403      	movs	r4, #3
   3692a:	e7e6      	b.n	368fa <rpc_message_data_free+0x13a>
   3692c:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
   3692e:	4284      	cmp	r4, r0
   36930:	f47f af67 	bne.w	36802 <rpc_message_data_free+0x42>
   36934:	2404      	movs	r4, #4
   36936:	e7e0      	b.n	368fa <rpc_message_data_free+0x13a>
   36938:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
   3693a:	4284      	cmp	r4, r0
   3693c:	f47f af65 	bne.w	3680a <rpc_message_data_free+0x4a>
   36940:	2405      	movs	r4, #5
   36942:	e7da      	b.n	368fa <rpc_message_data_free+0x13a>
   36944:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
   36946:	4284      	cmp	r4, r0
   36948:	f47f af63 	bne.w	36812 <rpc_message_data_free+0x52>
   3694c:	2406      	movs	r4, #6
   3694e:	e7d4      	b.n	368fa <rpc_message_data_free+0x13a>
   36950:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   36952:	4284      	cmp	r4, r0
   36954:	f47f af61 	bne.w	3681a <rpc_message_data_free+0x5a>
   36958:	2407      	movs	r4, #7
   3695a:	e7ce      	b.n	368fa <rpc_message_data_free+0x13a>
   3695c:	f8b3 4044 	ldrh.w	r4, [r3, #68]	; 0x44
   36960:	4284      	cmp	r4, r0
   36962:	f47f af5e 	bne.w	36822 <rpc_message_data_free+0x62>
   36966:	2408      	movs	r4, #8
   36968:	e7c7      	b.n	368fa <rpc_message_data_free+0x13a>
   3696a:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
   3696e:	4284      	cmp	r4, r0
   36970:	f47f af5b 	bne.w	3682a <rpc_message_data_free+0x6a>
   36974:	2409      	movs	r4, #9
   36976:	e7c0      	b.n	368fa <rpc_message_data_free+0x13a>
   36978:	f8b3 4054 	ldrh.w	r4, [r3, #84]	; 0x54
   3697c:	4284      	cmp	r4, r0
   3697e:	f47f af58 	bne.w	36832 <rpc_message_data_free+0x72>
   36982:	240a      	movs	r4, #10
   36984:	e7b9      	b.n	368fa <rpc_message_data_free+0x13a>
   36986:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
   3698a:	4284      	cmp	r4, r0
   3698c:	f47f af55 	bne.w	3683a <rpc_message_data_free+0x7a>
   36990:	240b      	movs	r4, #11
   36992:	e7b2      	b.n	368fa <rpc_message_data_free+0x13a>
   36994:	200e      	movs	r0, #14
   36996:	4770      	bx	lr
   36998:	f8b3 4064 	ldrh.w	r4, [r3, #100]	; 0x64
   3699c:	4284      	cmp	r4, r0
   3699e:	f47f af50 	bne.w	36842 <rpc_message_data_free+0x82>
   369a2:	240c      	movs	r4, #12
   369a4:	e7a9      	b.n	368fa <rpc_message_data_free+0x13a>
   369a6:	f8b3 406c 	ldrh.w	r4, [r3, #108]	; 0x6c
   369aa:	4284      	cmp	r4, r0
   369ac:	f47f af4d 	bne.w	3684a <rpc_message_data_free+0x8a>
   369b0:	240d      	movs	r4, #13
   369b2:	e7a2      	b.n	368fa <rpc_message_data_free+0x13a>
   369b4:	f8b3 4074 	ldrh.w	r4, [r3, #116]	; 0x74
   369b8:	4284      	cmp	r4, r0
   369ba:	f47f af4a 	bne.w	36852 <rpc_message_data_free+0x92>
   369be:	240e      	movs	r4, #14
   369c0:	e79b      	b.n	368fa <rpc_message_data_free+0x13a>
   369c2:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
   369c6:	4284      	cmp	r4, r0
   369c8:	bf08      	it	eq
   369ca:	240f      	moveq	r4, #15
   369cc:	f47f af45 	bne.w	3685a <rpc_message_data_free+0x9a>
   369d0:	e793      	b.n	368fa <rpc_message_data_free+0x13a>
   369d2:	bf00      	nop
   369d4:	20024f78 	.word	0x20024f78
   369d8:	20024f90 	.word	0x20024f90
   369dc:	20025010 	.word	0x20025010

000369e0 <packet_free_cb>:
   369e0:	b510      	push	{r4, lr}
   369e2:	4604      	mov	r4, r0
   369e4:	b118      	cbz	r0, 369ee <packet_free_cb+0xe>
   369e6:	6800      	ldr	r0, [r0, #0]
   369e8:	b108      	cbz	r0, 369ee <packet_free_cb+0xe>
   369ea:	f001 f82f 	bl	37a4c <rpc_gnss_client_data_free>
   369ee:	68a0      	ldr	r0, [r4, #8]
   369f0:	b118      	cbz	r0, 369fa <packet_free_cb+0x1a>
   369f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   369f6:	f7f9 bfc7 	b.w	30988 <nrf_free>
   369fa:	bd10      	pop	{r4, pc}

000369fc <rpc_gnss_event_handler>:
   369fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36a00:	4b64      	ldr	r3, [pc, #400]	; (36b94 <rpc_gnss_event_handler+0x198>)
   36a02:	4606      	mov	r6, r0
   36a04:	6800      	ldr	r0, [r0, #0]
   36a06:	881b      	ldrh	r3, [r3, #0]
   36a08:	6802      	ldr	r2, [r0, #0]
   36a0a:	4f63      	ldr	r7, [pc, #396]	; (36b98 <rpc_gnss_event_handler+0x19c>)
   36a0c:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   36a10:	b084      	sub	sp, #16
   36a12:	460d      	mov	r5, r1
   36a14:	6038      	str	r0, [r7, #0]
   36a16:	d038      	beq.n	36a8a <rpc_gnss_event_handler+0x8e>
   36a18:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   36a1c:	33ff      	adds	r3, #255	; 0xff
   36a1e:	b29b      	uxth	r3, r3
   36a20:	2b02      	cmp	r3, #2
   36a22:	d810      	bhi.n	36a46 <rpc_gnss_event_handler+0x4a>
   36a24:	4c5d      	ldr	r4, [pc, #372]	; (36b9c <rpc_gnss_event_handler+0x1a0>)
   36a26:	6823      	ldr	r3, [r4, #0]
   36a28:	075a      	lsls	r2, r3, #29
   36a2a:	d410      	bmi.n	36a4e <rpc_gnss_event_handler+0x52>
   36a2c:	6823      	ldr	r3, [r4, #0]
   36a2e:	079b      	lsls	r3, r3, #30
   36a30:	d503      	bpl.n	36a3a <rpc_gnss_event_handler+0x3e>
   36a32:	f244 0303 	movw	r3, #16387	; 0x4003
   36a36:	429d      	cmp	r5, r3
   36a38:	d009      	beq.n	36a4e <rpc_gnss_event_handler+0x52>
   36a3a:	6830      	ldr	r0, [r6, #0]
   36a3c:	b118      	cbz	r0, 36a46 <rpc_gnss_event_handler+0x4a>
   36a3e:	f001 f805 	bl	37a4c <rpc_gnss_client_data_free>
   36a42:	2300      	movs	r3, #0
   36a44:	603b      	str	r3, [r7, #0]
   36a46:	2000      	movs	r0, #0
   36a48:	b004      	add	sp, #16
   36a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36a4e:	2002      	movs	r0, #2
   36a50:	f7f9 ff90 	bl	30974 <nrf_malloc>
   36a54:	4680      	mov	r8, r0
   36a56:	2800      	cmp	r0, #0
   36a58:	f000 8093 	beq.w	36b82 <rpc_gnss_event_handler+0x186>
   36a5c:	2302      	movs	r3, #2
   36a5e:	8005      	strh	r5, [r0, #0]
   36a60:	6831      	ldr	r1, [r6, #0]
   36a62:	6872      	ldr	r2, [r6, #4]
   36a64:	484e      	ldr	r0, [pc, #312]	; (36ba0 <rpc_gnss_event_handler+0x1a4>)
   36a66:	e88d 0106 	stmia.w	sp, {r1, r2, r8}
   36a6a:	6800      	ldr	r0, [r0, #0]
   36a6c:	9303      	str	r3, [sp, #12]
   36a6e:	6803      	ldr	r3, [r0, #0]
   36a70:	4669      	mov	r1, sp
   36a72:	685b      	ldr	r3, [r3, #4]
   36a74:	4798      	blx	r3
   36a76:	3001      	adds	r0, #1
   36a78:	d070      	beq.n	36b5c <rpc_gnss_event_handler+0x160>
   36a7a:	2000      	movs	r0, #0
   36a7c:	6823      	ldr	r3, [r4, #0]
   36a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   36a82:	6023      	str	r3, [r4, #0]
   36a84:	b004      	add	sp, #16
   36a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36a8a:	4c44      	ldr	r4, [pc, #272]	; (36b9c <rpc_gnss_event_handler+0x1a0>)
   36a8c:	6823      	ldr	r3, [r4, #0]
   36a8e:	01d9      	lsls	r1, r3, #7
   36a90:	d523      	bpl.n	36ada <rpc_gnss_event_handler+0xde>
   36a92:	f242 1302 	movw	r3, #8450	; 0x2102
   36a96:	429d      	cmp	r5, r3
   36a98:	d11f      	bne.n	36ada <rpc_gnss_event_handler+0xde>
   36a9a:	6843      	ldr	r3, [r0, #4]
   36a9c:	b91b      	cbnz	r3, 36aa6 <rpc_gnss_event_handler+0xaa>
   36a9e:	6823      	ldr	r3, [r4, #0]
   36aa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   36aa4:	6023      	str	r3, [r4, #0]
   36aa6:	6823      	ldr	r3, [r4, #0]
   36aa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   36aac:	6023      	str	r3, [r4, #0]
   36aae:	6823      	ldr	r3, [r4, #0]
   36ab0:	025a      	lsls	r2, r3, #9
   36ab2:	d430      	bmi.n	36b16 <rpc_gnss_event_handler+0x11a>
   36ab4:	f242 0305 	movw	r3, #8197	; 0x2005
   36ab8:	429d      	cmp	r5, r3
   36aba:	d12c      	bne.n	36b16 <rpc_gnss_event_handler+0x11a>
   36abc:	6823      	ldr	r3, [r4, #0]
   36abe:	0299      	lsls	r1, r3, #10
   36ac0:	d529      	bpl.n	36b16 <rpc_gnss_event_handler+0x11a>
   36ac2:	6843      	ldr	r3, [r0, #4]
   36ac4:	2b00      	cmp	r3, #0
   36ac6:	d157      	bne.n	36b78 <rpc_gnss_event_handler+0x17c>
   36ac8:	6823      	ldr	r3, [r4, #0]
   36aca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   36ace:	6023      	str	r3, [r4, #0]
   36ad0:	6823      	ldr	r3, [r4, #0]
   36ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   36ad6:	6023      	str	r3, [r4, #0]
   36ad8:	e01d      	b.n	36b16 <rpc_gnss_event_handler+0x11a>
   36ada:	6823      	ldr	r3, [r4, #0]
   36adc:	025b      	lsls	r3, r3, #9
   36ade:	d50e      	bpl.n	36afe <rpc_gnss_event_handler+0x102>
   36ae0:	f242 1303 	movw	r3, #8451	; 0x2103
   36ae4:	429d      	cmp	r5, r3
   36ae6:	d10a      	bne.n	36afe <rpc_gnss_event_handler+0x102>
   36ae8:	6843      	ldr	r3, [r0, #4]
   36aea:	b91b      	cbnz	r3, 36af4 <rpc_gnss_event_handler+0xf8>
   36aec:	6823      	ldr	r3, [r4, #0]
   36aee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   36af2:	6023      	str	r3, [r4, #0]
   36af4:	6823      	ldr	r3, [r4, #0]
   36af6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   36afa:	6023      	str	r3, [r4, #0]
   36afc:	e00b      	b.n	36b16 <rpc_gnss_event_handler+0x11a>
   36afe:	f242 0301 	movw	r3, #8193	; 0x2001
   36b02:	429d      	cmp	r5, r3
   36b04:	d10c      	bne.n	36b20 <rpc_gnss_event_handler+0x124>
   36b06:	6843      	ldr	r3, [r0, #4]
   36b08:	b92b      	cbnz	r3, 36b16 <rpc_gnss_event_handler+0x11a>
   36b0a:	6823      	ldr	r3, [r4, #0]
   36b0c:	0c1b      	lsrs	r3, r3, #16
   36b0e:	041b      	lsls	r3, r3, #16
   36b10:	f043 0302 	orr.w	r3, r3, #2
   36b14:	6023      	str	r3, [r4, #0]
   36b16:	f000 ff99 	bl	37a4c <rpc_gnss_client_data_free>
   36b1a:	2300      	movs	r3, #0
   36b1c:	603b      	str	r3, [r7, #0]
   36b1e:	e77b      	b.n	36a18 <rpc_gnss_event_handler+0x1c>
   36b20:	f242 0304 	movw	r3, #8196	; 0x2004
   36b24:	429d      	cmp	r5, r3
   36b26:	d1c5      	bne.n	36ab4 <rpc_gnss_event_handler+0xb8>
   36b28:	6843      	ldr	r3, [r0, #4]
   36b2a:	b993      	cbnz	r3, 36b52 <rpc_gnss_event_handler+0x156>
   36b2c:	6823      	ldr	r3, [r4, #0]
   36b2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   36b32:	6023      	str	r3, [r4, #0]
   36b34:	6823      	ldr	r3, [r4, #0]
   36b36:	b29b      	uxth	r3, r3
   36b38:	2b03      	cmp	r3, #3
   36b3a:	6823      	ldr	r3, [r4, #0]
   36b3c:	d016      	beq.n	36b6c <rpc_gnss_event_handler+0x170>
   36b3e:	b29b      	uxth	r3, r3
   36b40:	2b04      	cmp	r3, #4
   36b42:	d1d7      	bne.n	36af4 <rpc_gnss_event_handler+0xf8>
   36b44:	6823      	ldr	r3, [r4, #0]
   36b46:	0c1b      	lsrs	r3, r3, #16
   36b48:	041b      	lsls	r3, r3, #16
   36b4a:	f043 0302 	orr.w	r3, r3, #2
   36b4e:	6023      	str	r3, [r4, #0]
   36b50:	e7d0      	b.n	36af4 <rpc_gnss_event_handler+0xf8>
   36b52:	6823      	ldr	r3, [r4, #0]
   36b54:	b29b      	uxth	r3, r3
   36b56:	2b03      	cmp	r3, #3
   36b58:	d1cc      	bne.n	36af4 <rpc_gnss_event_handler+0xf8>
   36b5a:	e7f3      	b.n	36b44 <rpc_gnss_event_handler+0x148>
   36b5c:	4640      	mov	r0, r8
   36b5e:	f7f9 ff13 	bl	30988 <nrf_free>
   36b62:	6830      	ldr	r0, [r6, #0]
   36b64:	2800      	cmp	r0, #0
   36b66:	f47f af6a 	bne.w	36a3e <rpc_gnss_event_handler+0x42>
   36b6a:	e76c      	b.n	36a46 <rpc_gnss_event_handler+0x4a>
   36b6c:	0c1b      	lsrs	r3, r3, #16
   36b6e:	041b      	lsls	r3, r3, #16
   36b70:	f043 0304 	orr.w	r3, r3, #4
   36b74:	6023      	str	r3, [r4, #0]
   36b76:	e7bd      	b.n	36af4 <rpc_gnss_event_handler+0xf8>
   36b78:	6823      	ldr	r3, [r4, #0]
   36b7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   36b7e:	6023      	str	r3, [r4, #0]
   36b80:	e7c9      	b.n	36b16 <rpc_gnss_event_handler+0x11a>
   36b82:	6830      	ldr	r0, [r6, #0]
   36b84:	2800      	cmp	r0, #0
   36b86:	f43f af5e 	beq.w	36a46 <rpc_gnss_event_handler+0x4a>
   36b8a:	f000 ff5f 	bl	37a4c <rpc_gnss_client_data_free>
   36b8e:	f8c7 8000 	str.w	r8, [r7]
   36b92:	e758      	b.n	36a46 <rpc_gnss_event_handler+0x4a>
   36b94:	200293a0 	.word	0x200293a0
   36b98:	20025094 	.word	0x20025094
   36b9c:	20025090 	.word	0x20025090
   36ba0:	20025098 	.word	0x20025098

00036ba4 <gnss_interface_write>:
   36ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   36ba8:	4a74      	ldr	r2, [pc, #464]	; (36d7c <gnss_interface_write+0x1d8>)
   36baa:	b09f      	sub	sp, #124	; 0x7c
   36bac:	4290      	cmp	r0, r2
   36bae:	9d26      	ldr	r5, [sp, #152]	; 0x98
   36bb0:	f040 80d7 	bne.w	36d62 <gnss_interface_write+0x1be>
   36bb4:	2900      	cmp	r1, #0
   36bb6:	f000 80c6 	beq.w	36d46 <gnss_interface_write+0x1a2>
   36bba:	2d00      	cmp	r5, #0
   36bbc:	f000 80c3 	beq.w	36d46 <gnss_interface_write+0x1a2>
   36bc0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   36bc2:	2a02      	cmp	r2, #2
   36bc4:	f040 80bf 	bne.w	36d46 <gnss_interface_write+0x1a2>
   36bc8:	4c6d      	ldr	r4, [pc, #436]	; (36d80 <gnss_interface_write+0x1dc>)
   36bca:	6822      	ldr	r2, [r4, #0]
   36bcc:	b292      	uxth	r2, r2
   36bce:	2a02      	cmp	r2, #2
   36bd0:	d004      	beq.n	36bdc <gnss_interface_write+0x38>
   36bd2:	6822      	ldr	r2, [r4, #0]
   36bd4:	b292      	uxth	r2, r2
   36bd6:	2a04      	cmp	r2, #4
   36bd8:	f040 80bd 	bne.w	36d56 <gnss_interface_write+0x1b2>
   36bdc:	2b00      	cmp	r3, #0
   36bde:	f040 80c6 	bne.w	36d6e <gnss_interface_write+0x1ca>
   36be2:	6822      	ldr	r2, [r4, #0]
   36be4:	0390      	lsls	r0, r2, #14
   36be6:	d512      	bpl.n	36c0e <gnss_interface_write+0x6a>
   36be8:	6822      	ldr	r2, [r4, #0]
   36bea:	882b      	ldrh	r3, [r5, #0]
   36bec:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   36bf0:	6022      	str	r2, [r4, #0]
   36bf2:	6822      	ldr	r2, [r4, #0]
   36bf4:	3b01      	subs	r3, #1
   36bf6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   36bfa:	6022      	str	r2, [r4, #0]
   36bfc:	2b07      	cmp	r3, #7
   36bfe:	f200 80a2 	bhi.w	36d46 <gnss_interface_write+0x1a2>
   36c02:	e8df f003 	tbb	[pc, r3]
   36c06:	7d82      	.short	0x7d82
   36c08:	646e7378 	.word	0x646e7378
   36c0c:	0869      	.short	0x0869
   36c0e:	2000      	movs	r0, #0
   36c10:	b01f      	add	sp, #124	; 0x7c
   36c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   36c16:	4608      	mov	r0, r1
   36c18:	a902      	add	r1, sp, #8
   36c1a:	f000 fecb 	bl	379b4 <rpc_gnss_serialize_integrity>
   36c1e:	2172      	movs	r1, #114	; 0x72
   36c20:	4668      	mov	r0, sp
   36c22:	f000 fee1 	bl	379e8 <rpc_gnss_client_request_alloc>
   36c26:	4605      	mov	r5, r0
   36c28:	9800      	ldr	r0, [sp, #0]
   36c2a:	2d00      	cmp	r5, #0
   36c2c:	d172      	bne.n	36d14 <gnss_interface_write+0x170>
   36c2e:	2800      	cmp	r0, #0
   36c30:	d077      	beq.n	36d22 <gnss_interface_write+0x17e>
   36c32:	f241 0605 	movw	r6, #4101	; 0x1005
   36c36:	f04f 0c49 	mov.w	ip, #73	; 0x49
   36c3a:	2272      	movs	r2, #114	; 0x72
   36c3c:	f04f 0e76 	mov.w	lr, #118	; 0x76
   36c40:	f04f 0943 	mov.w	r9, #67	; 0x43
   36c44:	f04f 0854 	mov.w	r8, #84	; 0x54
   36c48:	4f4e      	ldr	r7, [pc, #312]	; (36d84 <gnss_interface_write+0x1e0>)
   36c4a:	a91e      	add	r1, sp, #120	; 0x78
   36c4c:	883b      	ldrh	r3, [r7, #0]
   36c4e:	f880 c00f 	strb.w	ip, [r0, #15]
   36c52:	3301      	adds	r3, #1
   36c54:	b29b      	uxth	r3, r3
   36c56:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   36c5a:	f841 cd74 	str.w	ip, [r1, #-116]!
   36c5e:	7145      	strb	r5, [r0, #5]
   36c60:	7185      	strb	r5, [r0, #6]
   36c62:	71c5      	strb	r5, [r0, #7]
   36c64:	7205      	strb	r5, [r0, #8]
   36c66:	7245      	strb	r5, [r0, #9]
   36c68:	7285      	strb	r5, [r0, #10]
   36c6a:	72c5      	strb	r5, [r0, #11]
   36c6c:	7102      	strb	r2, [r0, #4]
   36c6e:	f880 900c 	strb.w	r9, [r0, #12]
   36c72:	f880 800d 	strb.w	r8, [r0, #13]
   36c76:	f880 e00e 	strb.w	lr, [r0, #14]
   36c7a:	6800      	ldr	r0, [r0, #0]
   36c7c:	803b      	strh	r3, [r7, #0]
   36c7e:	f009 fccd 	bl	4061c <memcpy>
   36c82:	4b41      	ldr	r3, [pc, #260]	; (36d88 <gnss_interface_write+0x1e4>)
   36c84:	4631      	mov	r1, r6
   36c86:	9800      	ldr	r0, [sp, #0]
   36c88:	601d      	str	r5, [r3, #0]
   36c8a:	f000 fec1 	bl	37a10 <rpc_gnss_client_request_send>
   36c8e:	2800      	cmp	r0, #0
   36c90:	d14e      	bne.n	36d30 <gnss_interface_write+0x18c>
   36c92:	6823      	ldr	r3, [r4, #0]
   36c94:	0299      	lsls	r1, r3, #10
   36c96:	d50b      	bpl.n	36cb0 <gnss_interface_write+0x10c>
   36c98:	4e3c      	ldr	r6, [pc, #240]	; (36d8c <gnss_interface_write+0x1e8>)
   36c9a:	4d38      	ldr	r5, [pc, #224]	; (36d7c <gnss_interface_write+0x1d8>)
   36c9c:	e000      	b.n	36ca0 <gnss_interface_write+0xfc>
   36c9e:	b978      	cbnz	r0, 36cc0 <gnss_interface_write+0x11c>
   36ca0:	4631      	mov	r1, r6
   36ca2:	4628      	mov	r0, r5
   36ca4:	f7f0 f944 	bl	26f30 <bsd_os_timedwait>
   36ca8:	6823      	ldr	r3, [r4, #0]
   36caa:	029a      	lsls	r2, r3, #10
   36cac:	d4f7      	bmi.n	36c9e <gnss_interface_write+0xfa>
   36cae:	b938      	cbnz	r0, 36cc0 <gnss_interface_write+0x11c>
   36cb0:	6823      	ldr	r3, [r4, #0]
   36cb2:	039b      	lsls	r3, r3, #14
   36cb4:	d4ab      	bmi.n	36c0e <gnss_interface_write+0x6a>
   36cb6:	2005      	movs	r0, #5
   36cb8:	6823      	ldr	r3, [r4, #0]
   36cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   36cbe:	6023      	str	r3, [r4, #0]
   36cc0:	f7f0 f9ca 	bl	27058 <bsd_os_errno_set>
   36cc4:	f04f 30ff 	mov.w	r0, #4294967295
   36cc8:	b01f      	add	sp, #124	; 0x7c
   36cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   36cce:	4608      	mov	r0, r1
   36cd0:	a902      	add	r1, sp, #8
   36cd2:	f000 fe27 	bl	37924 <rpc_gnss_serialize_time_and_sv_tow>
   36cd6:	e7a2      	b.n	36c1e <gnss_interface_write+0x7a>
   36cd8:	4608      	mov	r0, r1
   36cda:	a902      	add	r1, sp, #8
   36cdc:	f000 fe4a 	bl	37974 <rpc_gnss_serialize_location>
   36ce0:	e79d      	b.n	36c1e <gnss_interface_write+0x7a>
   36ce2:	4608      	mov	r0, r1
   36ce4:	a902      	add	r1, sp, #8
   36ce6:	f000 fe03 	bl	378f0 <rpc_gnss_serialize_nequick>
   36cea:	e798      	b.n	36c1e <gnss_interface_write+0x7a>
   36cec:	4608      	mov	r0, r1
   36cee:	a902      	add	r1, sp, #8
   36cf0:	f000 fdda 	bl	378a8 <rpc_gnss_serialize_klob>
   36cf4:	e793      	b.n	36c1e <gnss_interface_write+0x7a>
   36cf6:	4608      	mov	r0, r1
   36cf8:	a902      	add	r1, sp, #8
   36cfa:	f000 fda3 	bl	37844 <rpc_gnss_serialize_alm>
   36cfe:	e78e      	b.n	36c1e <gnss_interface_write+0x7a>
   36d00:	4608      	mov	r0, r1
   36d02:	a902      	add	r1, sp, #8
   36d04:	f000 fd4c 	bl	377a0 <rpc_gnss_serialize_ephe>
   36d08:	e789      	b.n	36c1e <gnss_interface_write+0x7a>
   36d0a:	4608      	mov	r0, r1
   36d0c:	a902      	add	r1, sp, #8
   36d0e:	f000 fd25 	bl	3775c <rpc_gnss_serialize_utc>
   36d12:	e784      	b.n	36c1e <gnss_interface_write+0x7a>
   36d14:	b128      	cbz	r0, 36d22 <gnss_interface_write+0x17e>
   36d16:	6803      	ldr	r3, [r0, #0]
   36d18:	b11b      	cbz	r3, 36d22 <gnss_interface_write+0x17e>
   36d1a:	4618      	mov	r0, r3
   36d1c:	f000 fe96 	bl	37a4c <rpc_gnss_client_data_free>
   36d20:	9800      	ldr	r0, [sp, #0]
   36d22:	f000 fe8b 	bl	37a3c <rpc_gnss_client_message_free>
   36d26:	2023      	movs	r0, #35	; 0x23
   36d28:	f7f0 f996 	bl	27058 <bsd_os_errno_set>
   36d2c:	f04f 30ff 	mov.w	r0, #4294967295
   36d30:	6823      	ldr	r3, [r4, #0]
   36d32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   36d36:	6023      	str	r3, [r4, #0]
   36d38:	6823      	ldr	r3, [r4, #0]
   36d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   36d3e:	6023      	str	r3, [r4, #0]
   36d40:	b01f      	add	sp, #124	; 0x7c
   36d42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   36d46:	2016      	movs	r0, #22
   36d48:	f7f0 f986 	bl	27058 <bsd_os_errno_set>
   36d4c:	f04f 30ff 	mov.w	r0, #4294967295
   36d50:	b01f      	add	sp, #124	; 0x7c
   36d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   36d56:	2039      	movs	r0, #57	; 0x39
   36d58:	f7f0 f97e 	bl	27058 <bsd_os_errno_set>
   36d5c:	f04f 30ff 	mov.w	r0, #4294967295
   36d60:	e756      	b.n	36c10 <gnss_interface_write+0x6c>
   36d62:	2009      	movs	r0, #9
   36d64:	f7f0 f978 	bl	27058 <bsd_os_errno_set>
   36d68:	f04f 30ff 	mov.w	r0, #4294967295
   36d6c:	e750      	b.n	36c10 <gnss_interface_write+0x6c>
   36d6e:	202d      	movs	r0, #45	; 0x2d
   36d70:	f7f0 f972 	bl	27058 <bsd_os_errno_set>
   36d74:	f04f 30ff 	mov.w	r0, #4294967295
   36d78:	e74a      	b.n	36c10 <gnss_interface_write+0x6c>
   36d7a:	bf00      	nop
   36d7c:	49765443 	.word	0x49765443
   36d80:	20025090 	.word	0x20025090
   36d84:	200293a0 	.word	0x200293a0
   36d88:	20025094 	.word	0x20025094
   36d8c:	200320f0 	.word	0x200320f0

00036d90 <gnss_interface_read>:
   36d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36d94:	4c50      	ldr	r4, [pc, #320]	; (36ed8 <gnss_interface_read+0x148>)
   36d96:	b0b7      	sub	sp, #220	; 0xdc
   36d98:	42a0      	cmp	r0, r4
   36d9a:	f040 81fe 	bne.w	3719a <gnss_interface_read+0x40a>
   36d9e:	4688      	mov	r8, r1
   36da0:	2900      	cmp	r1, #0
   36da2:	f000 81f4 	beq.w	3718e <gnss_interface_read+0x3fe>
   36da6:	2ad7      	cmp	r2, #215	; 0xd7
   36da8:	f240 81f1 	bls.w	3718e <gnss_interface_read+0x3fe>
   36dac:	4d4b      	ldr	r5, [pc, #300]	; (36edc <gnss_interface_read+0x14c>)
   36dae:	4699      	mov	r9, r3
   36db0:	682b      	ldr	r3, [r5, #0]
   36db2:	b29b      	uxth	r3, r3
   36db4:	2b04      	cmp	r3, #4
   36db6:	d004      	beq.n	36dc2 <gnss_interface_read+0x32>
   36db8:	682b      	ldr	r3, [r5, #0]
   36dba:	b29b      	uxth	r3, r3
   36dbc:	2b02      	cmp	r3, #2
   36dbe:	f040 81e0 	bne.w	37182 <gnss_interface_read+0x3f2>
   36dc2:	f1b9 0f00 	cmp.w	r9, #0
   36dc6:	d158      	bne.n	36e7a <gnss_interface_read+0xea>
   36dc8:	2102      	movs	r1, #2
   36dca:	20b6      	movs	r0, #182	; 0xb6
   36dcc:	2400      	movs	r4, #0
   36dce:	682b      	ldr	r3, [r5, #0]
   36dd0:	f10d 020e 	add.w	r2, sp, #14
   36dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   36dd8:	602b      	str	r3, [r5, #0]
   36dda:	f8df a108 	ldr.w	sl, [pc, #264]	; 36ee4 <gnss_interface_read+0x154>
   36dde:	ab08      	add	r3, sp, #32
   36de0:	4f3f      	ldr	r7, [pc, #252]	; (36ee0 <gnss_interface_read+0x150>)
   36de2:	4e3d      	ldr	r6, [pc, #244]	; (36ed8 <gnss_interface_read+0x148>)
   36de4:	9005      	str	r0, [sp, #20]
   36de6:	9107      	str	r1, [sp, #28]
   36de8:	9304      	str	r3, [sp, #16]
   36dea:	9206      	str	r2, [sp, #24]
   36dec:	ea09 0b01 	and.w	fp, r9, r1
   36df0:	f8da 0000 	ldr.w	r0, [sl]
   36df4:	464a      	mov	r2, r9
   36df6:	6803      	ldr	r3, [r0, #0]
   36df8:	a904      	add	r1, sp, #16
   36dfa:	689b      	ldr	r3, [r3, #8]
   36dfc:	4798      	blx	r3
   36dfe:	2800      	cmp	r0, #0
   36e00:	da11      	bge.n	36e26 <gnss_interface_read+0x96>
   36e02:	f1bb 0f00 	cmp.w	fp, #0
   36e06:	d141      	bne.n	36e8c <gnss_interface_read+0xfc>
   36e08:	682b      	ldr	r3, [r5, #0]
   36e0a:	03d8      	lsls	r0, r3, #15
   36e0c:	d4f0      	bmi.n	36df0 <gnss_interface_read+0x60>
   36e0e:	b10c      	cbz	r4, 36e14 <gnss_interface_read+0x84>
   36e10:	e7ee      	b.n	36df0 <gnss_interface_read+0x60>
   36e12:	b930      	cbnz	r0, 36e22 <gnss_interface_read+0x92>
   36e14:	4639      	mov	r1, r7
   36e16:	4630      	mov	r0, r6
   36e18:	f7f0 f88a 	bl	26f30 <bsd_os_timedwait>
   36e1c:	682b      	ldr	r3, [r5, #0]
   36e1e:	03d9      	lsls	r1, r3, #15
   36e20:	d5f7      	bpl.n	36e12 <gnss_interface_read+0x82>
   36e22:	4604      	mov	r4, r0
   36e24:	e7e4      	b.n	36df0 <gnss_interface_read+0x60>
   36e26:	f244 0202 	movw	r2, #16386	; 0x4002
   36e2a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   36e2e:	4293      	cmp	r3, r2
   36e30:	d042      	beq.n	36eb8 <gnss_interface_read+0x128>
   36e32:	f244 0201 	movw	r2, #16385	; 0x4001
   36e36:	4293      	cmp	r3, r2
   36e38:	d056      	beq.n	36ee8 <gnss_interface_read+0x158>
   36e3a:	f244 0203 	movw	r2, #16387	; 0x4003
   36e3e:	4293      	cmp	r3, r2
   36e40:	f040 81a5 	bne.w	3718e <gnss_interface_read+0x3fe>
   36e44:	2203      	movs	r2, #3
   36e46:	2414      	movs	r4, #20
   36e48:	9b08      	ldr	r3, [sp, #32]
   36e4a:	f888 2000 	strb.w	r2, [r8]
   36e4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   36e50:	f8c8 3008 	str.w	r3, [r8, #8]
   36e54:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   36e58:	e9c8 2303 	strd	r2, r3, [r8, #12]
   36e5c:	f8da 0000 	ldr.w	r0, [sl]
   36e60:	6803      	ldr	r3, [r0, #0]
   36e62:	68db      	ldr	r3, [r3, #12]
   36e64:	4798      	blx	r3
   36e66:	2800      	cmp	r0, #0
   36e68:	dd03      	ble.n	36e72 <gnss_interface_read+0xe2>
   36e6a:	682b      	ldr	r3, [r5, #0]
   36e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   36e70:	602b      	str	r3, [r5, #0]
   36e72:	4620      	mov	r0, r4
   36e74:	b037      	add	sp, #220	; 0xdc
   36e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36e7a:	f019 0f0a 	tst.w	r9, #10
   36e7e:	d1a3      	bne.n	36dc8 <gnss_interface_read+0x38>
   36e80:	202d      	movs	r0, #45	; 0x2d
   36e82:	f7f0 f8e9 	bl	27058 <bsd_os_errno_set>
   36e86:	f04f 34ff 	mov.w	r4, #4294967295
   36e8a:	e7f2      	b.n	36e72 <gnss_interface_read+0xe2>
   36e8c:	1c42      	adds	r2, r0, #1
   36e8e:	4603      	mov	r3, r0
   36e90:	d1c9      	bne.n	36e26 <gnss_interface_read+0x96>
   36e92:	b93c      	cbnz	r4, 36ea4 <gnss_interface_read+0x114>
   36e94:	461c      	mov	r4, r3
   36e96:	2023      	movs	r0, #35	; 0x23
   36e98:	f7f0 f8de 	bl	27058 <bsd_os_errno_set>
   36e9c:	4620      	mov	r0, r4
   36e9e:	b037      	add	sp, #220	; 0xdc
   36ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36ea4:	9001      	str	r0, [sp, #4]
   36ea6:	4620      	mov	r0, r4
   36ea8:	f7f0 f8d6 	bl	27058 <bsd_os_errno_set>
   36eac:	9b01      	ldr	r3, [sp, #4]
   36eae:	461c      	mov	r4, r3
   36eb0:	4620      	mov	r0, r4
   36eb2:	b037      	add	sp, #220	; 0xdc
   36eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36eb8:	a808      	add	r0, sp, #32
   36eba:	f7e6 f933 	bl	1d124 <strlen>
   36ebe:	2302      	movs	r3, #2
   36ec0:	1c44      	adds	r4, r0, #1
   36ec2:	b2a4      	uxth	r4, r4
   36ec4:	f808 3b08 	strb.w	r3, [r8], #8
   36ec8:	4622      	mov	r2, r4
   36eca:	a908      	add	r1, sp, #32
   36ecc:	4640      	mov	r0, r8
   36ece:	f009 fba5 	bl	4061c <memcpy>
   36ed2:	3408      	adds	r4, #8
   36ed4:	e7c2      	b.n	36e5c <gnss_interface_read+0xcc>
   36ed6:	bf00      	nop
   36ed8:	49765443 	.word	0x49765443
   36edc:	20025090 	.word	0x20025090
   36ee0:	200320f0 	.word	0x200320f0
   36ee4:	20025098 	.word	0x20025098
   36ee8:	2401      	movs	r4, #1
   36eea:	a809      	add	r0, sp, #36	; 0x24
   36eec:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   36eee:	e9c8 0102 	strd	r0, r1, [r8, #8]
   36ef2:	e9c8 2304 	strd	r2, r3, [r8, #16]
   36ef6:	990d      	ldr	r1, [sp, #52]	; 0x34
   36ef8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   36efa:	f888 4000 	strb.w	r4, [r8]
   36efe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   36f00:	f8c8 1018 	str.w	r1, [r8, #24]
   36f04:	9910      	ldr	r1, [sp, #64]	; 0x40
   36f06:	f8c8 201c 	str.w	r2, [r8, #28]
   36f0a:	f8c8 3020 	str.w	r3, [r8, #32]
   36f0e:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   36f12:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   36f16:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   36f1a:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   36f1e:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   36f22:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   36f26:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   36f2a:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   36f2e:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   36f32:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   36f36:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   36f3a:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   36f3e:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   36f42:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   36f46:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   36f4a:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   36f4e:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   36f52:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   36f56:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   36f5a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   36f5c:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   36f60:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   36f64:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   36f68:	f3c3 210f 	ubfx	r1, r3, #8, #16
   36f6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   36f6e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   36f72:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   36f76:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   36f7a:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   36f7e:	f3c3 230f 	ubfx	r3, r3, #8, #16
   36f82:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   36f86:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   36f8a:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   36f8e:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   36f92:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   36f96:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   36f9a:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   36f9e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   36fa2:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   36fa6:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   36faa:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   36fae:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   36fb2:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   36fb6:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   36fba:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   36fbe:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   36fc2:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   36fc6:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   36fca:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   36fce:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   36fd2:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   36fd6:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   36fda:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   36fde:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   36fe2:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   36fe6:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   36fea:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   36fee:	9a22      	ldr	r2, [sp, #136]	; 0x88
   36ff0:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   36ff4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   36ff8:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   36ffc:	f3c2 220f 	ubfx	r2, r2, #8, #16
   37000:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   37004:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   37008:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   3700c:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   37010:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   37014:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   37018:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   3701c:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   37020:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   37024:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   37028:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   3702c:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   37030:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   37034:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   37038:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   3703c:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   37040:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   37044:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   37048:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   3704c:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   37050:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   37054:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   37058:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   3705c:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   37060:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   37064:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   37068:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   3706c:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   37070:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   37074:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   37076:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   3707a:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   3707e:	f3c3 210f 	ubfx	r1, r3, #8, #16
   37082:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   37084:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   37088:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   3708c:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   37090:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   37094:	f3c3 230f 	ubfx	r3, r3, #8, #16
   37098:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   3709c:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   370a0:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   370a4:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   370a8:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   370ac:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   370b0:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   370b4:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   370b8:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   370bc:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   370c0:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   370c4:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   370c8:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   370cc:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   370d0:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   370d4:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   370d8:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   370dc:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   370e0:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   370e4:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   370e8:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   370ec:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   370f0:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   370f4:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   370f8:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   370fc:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   37100:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   37104:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   37108:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   3710a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   3710e:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   37112:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   37116:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   3711a:	f3c2 220f 	ubfx	r2, r2, #8, #16
   3711e:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   37122:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   37126:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   3712a:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   3712e:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   37132:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   37136:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   3713a:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   3713e:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   37142:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   37146:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   3714a:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   3714e:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   37152:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   37156:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   3715a:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   3715e:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   37162:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   37166:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   3716a:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   3716e:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   37172:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   37176:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   3717a:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   3717e:	24d8      	movs	r4, #216	; 0xd8
   37180:	e66c      	b.n	36e5c <gnss_interface_read+0xcc>
   37182:	2039      	movs	r0, #57	; 0x39
   37184:	f7ef ff68 	bl	27058 <bsd_os_errno_set>
   37188:	f04f 34ff 	mov.w	r4, #4294967295
   3718c:	e671      	b.n	36e72 <gnss_interface_read+0xe2>
   3718e:	2016      	movs	r0, #22
   37190:	f7ef ff62 	bl	27058 <bsd_os_errno_set>
   37194:	f04f 34ff 	mov.w	r4, #4294967295
   37198:	e66b      	b.n	36e72 <gnss_interface_read+0xe2>
   3719a:	2009      	movs	r0, #9
   3719c:	f7ef ff5c 	bl	27058 <bsd_os_errno_set>
   371a0:	f04f 34ff 	mov.w	r4, #4294967295
   371a4:	e665      	b.n	36e72 <gnss_interface_read+0xe2>
   371a6:	bf00      	nop

000371a8 <gnss_interface_setopt>:
   371a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   371ac:	f241 1402 	movw	r4, #4354	; 0x1102
   371b0:	4222      	tst	r2, r4
   371b2:	b086      	sub	sp, #24
   371b4:	4d9c      	ldr	r5, [pc, #624]	; (37428 <gnss_interface_setopt+0x280>)
   371b6:	d004      	beq.n	371c2 <gnss_interface_setopt+0x1a>
   371b8:	682c      	ldr	r4, [r5, #0]
   371ba:	b2a4      	uxth	r4, r4
   371bc:	2c02      	cmp	r4, #2
   371be:	f040 8104 	bne.w	373ca <gnss_interface_setopt+0x222>
   371c2:	682c      	ldr	r4, [r5, #0]
   371c4:	0264      	lsls	r4, r4, #9
   371c6:	f100 8128 	bmi.w	3741a <gnss_interface_setopt+0x272>
   371ca:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   371ce:	f040 811e 	bne.w	3740e <gnss_interface_setopt+0x266>
   371d2:	4996      	ldr	r1, [pc, #600]	; (3742c <gnss_interface_setopt+0x284>)
   371d4:	4288      	cmp	r0, r1
   371d6:	f040 8114 	bne.w	37402 <gnss_interface_setopt+0x25a>
   371da:	3a01      	subs	r2, #1
   371dc:	2a08      	cmp	r2, #8
   371de:	f200 80ec 	bhi.w	373ba <gnss_interface_setopt+0x212>
   371e2:	e8df f012 	tbh	[pc, r2, lsl #1]
   371e6:	0075      	.short	0x0075
   371e8:	00c200d8 	.word	0x00c200d8
   371ec:	008100cc 	.word	0x008100cc
   371f0:	0098008c 	.word	0x0098008c
   371f4:	000900af 	.word	0x000900af
   371f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   371fa:	2a01      	cmp	r2, #1
   371fc:	f040 80dd 	bne.w	373ba <gnss_interface_setopt+0x212>
   37200:	f241 1603 	movw	r6, #4355	; 0x1103
   37204:	2240      	movs	r2, #64	; 0x40
   37206:	4637      	mov	r7, r6
   37208:	781b      	ldrb	r3, [r3, #0]
   3720a:	9202      	str	r2, [sp, #8]
   3720c:	f88d 3015 	strb.w	r3, [sp, #21]
   37210:	682b      	ldr	r3, [r5, #0]
   37212:	2112      	movs	r1, #18
   37214:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   37218:	4668      	mov	r0, sp
   3721a:	602b      	str	r3, [r5, #0]
   3721c:	f000 fbe4 	bl	379e8 <rpc_gnss_client_request_alloc>
   37220:	4604      	mov	r4, r0
   37222:	9800      	ldr	r0, [sp, #0]
   37224:	2c00      	cmp	r4, #0
   37226:	f040 80d6 	bne.w	373d6 <gnss_interface_setopt+0x22e>
   3722a:	2800      	cmp	r0, #0
   3722c:	f000 80da 	beq.w	373e4 <gnss_interface_setopt+0x23c>
   37230:	2212      	movs	r2, #18
   37232:	f04f 0876 	mov.w	r8, #118	; 0x76
   37236:	f04f 0e49 	mov.w	lr, #73	; 0x49
   3723a:	f04f 0a43 	mov.w	sl, #67	; 0x43
   3723e:	f04f 0954 	mov.w	r9, #84	; 0x54
   37242:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 37434 <gnss_interface_setopt+0x28c>
   37246:	a906      	add	r1, sp, #24
   37248:	f8bc 3000 	ldrh.w	r3, [ip]
   3724c:	f880 800e 	strb.w	r8, [r0, #14]
   37250:	3301      	adds	r3, #1
   37252:	b29b      	uxth	r3, r3
   37254:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   37258:	f841 6d14 	str.w	r6, [r1, #-20]!
   3725c:	7144      	strb	r4, [r0, #5]
   3725e:	7184      	strb	r4, [r0, #6]
   37260:	71c4      	strb	r4, [r0, #7]
   37262:	7204      	strb	r4, [r0, #8]
   37264:	7244      	strb	r4, [r0, #9]
   37266:	7284      	strb	r4, [r0, #10]
   37268:	72c4      	strb	r4, [r0, #11]
   3726a:	7102      	strb	r2, [r0, #4]
   3726c:	f880 a00c 	strb.w	sl, [r0, #12]
   37270:	f880 900d 	strb.w	r9, [r0, #13]
   37274:	f880 e00f 	strb.w	lr, [r0, #15]
   37278:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 37438 <gnss_interface_setopt+0x290>
   3727c:	6800      	ldr	r0, [r0, #0]
   3727e:	f8ac 3000 	strh.w	r3, [ip]
   37282:	f009 f9cb 	bl	4061c <memcpy>
   37286:	4639      	mov	r1, r7
   37288:	9800      	ldr	r0, [sp, #0]
   3728a:	f8c8 4000 	str.w	r4, [r8]
   3728e:	f000 fbbf 	bl	37a10 <rpc_gnss_client_request_send>
   37292:	2800      	cmp	r0, #0
   37294:	f040 80ab 	bne.w	373ee <gnss_interface_setopt+0x246>
   37298:	4f65      	ldr	r7, [pc, #404]	; (37430 <gnss_interface_setopt+0x288>)
   3729a:	4e64      	ldr	r6, [pc, #400]	; (3742c <gnss_interface_setopt+0x284>)
   3729c:	4639      	mov	r1, r7
   3729e:	4630      	mov	r0, r6
   372a0:	f7ef fe46 	bl	26f30 <bsd_os_timedwait>
   372a4:	682c      	ldr	r4, [r5, #0]
   372a6:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   372aa:	d1f7      	bne.n	3729c <gnss_interface_setopt+0xf4>
   372ac:	f8d8 0000 	ldr.w	r0, [r8]
   372b0:	b118      	cbz	r0, 372ba <gnss_interface_setopt+0x112>
   372b2:	f000 fbcb 	bl	37a4c <rpc_gnss_client_data_free>
   372b6:	f8c8 4000 	str.w	r4, [r8]
   372ba:	682b      	ldr	r3, [r5, #0]
   372bc:	021b      	lsls	r3, r3, #8
   372be:	d576      	bpl.n	373ae <gnss_interface_setopt+0x206>
   372c0:	2000      	movs	r0, #0
   372c2:	682b      	ldr	r3, [r5, #0]
   372c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   372c8:	602b      	str	r3, [r5, #0]
   372ca:	b006      	add	sp, #24
   372cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   372d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   372d2:	2a02      	cmp	r2, #2
   372d4:	d171      	bne.n	373ba <gnss_interface_setopt+0x212>
   372d6:	2208      	movs	r2, #8
   372d8:	f241 1603 	movw	r6, #4355	; 0x1103
   372dc:	881b      	ldrh	r3, [r3, #0]
   372de:	9202      	str	r2, [sp, #8]
   372e0:	f8ad 300f 	strh.w	r3, [sp, #15]
   372e4:	4637      	mov	r7, r6
   372e6:	e793      	b.n	37210 <gnss_interface_setopt+0x68>
   372e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   372ea:	2a01      	cmp	r2, #1
   372ec:	d165      	bne.n	373ba <gnss_interface_setopt+0x212>
   372ee:	f241 1603 	movw	r6, #4355	; 0x1103
   372f2:	781b      	ldrb	r3, [r3, #0]
   372f4:	9202      	str	r2, [sp, #8]
   372f6:	f88d 300c 	strb.w	r3, [sp, #12]
   372fa:	4637      	mov	r7, r6
   372fc:	e788      	b.n	37210 <gnss_interface_setopt+0x68>
   372fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   37300:	2a01      	cmp	r2, #1
   37302:	d15a      	bne.n	373ba <gnss_interface_setopt+0x212>
   37304:	2202      	movs	r2, #2
   37306:	f241 1603 	movw	r6, #4355	; 0x1103
   3730a:	781b      	ldrb	r3, [r3, #0]
   3730c:	9202      	str	r2, [sp, #8]
   3730e:	f88d 300d 	strb.w	r3, [sp, #13]
   37312:	4637      	mov	r7, r6
   37314:	e77c      	b.n	37210 <gnss_interface_setopt+0x68>
   37316:	682a      	ldr	r2, [r5, #0]
   37318:	b292      	uxth	r2, r2
   3731a:	2a02      	cmp	r2, #2
   3731c:	d155      	bne.n	373ca <gnss_interface_setopt+0x222>
   3731e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   37320:	2a04      	cmp	r2, #4
   37322:	d14a      	bne.n	373ba <gnss_interface_setopt+0x212>
   37324:	2101      	movs	r1, #1
   37326:	f241 0604 	movw	r6, #4100	; 0x1004
   3732a:	682a      	ldr	r2, [r5, #0]
   3732c:	6818      	ldr	r0, [r3, #0]
   3732e:	0c13      	lsrs	r3, r2, #16
   37330:	041b      	lsls	r3, r3, #16
   37332:	f043 0303 	orr.w	r3, r3, #3
   37336:	f8cd 0009 	str.w	r0, [sp, #9]
   3733a:	602b      	str	r3, [r5, #0]
   3733c:	f88d 1008 	strb.w	r1, [sp, #8]
   37340:	4637      	mov	r7, r6
   37342:	e765      	b.n	37210 <gnss_interface_setopt+0x68>
   37344:	682b      	ldr	r3, [r5, #0]
   37346:	b29b      	uxth	r3, r3
   37348:	2b04      	cmp	r3, #4
   3734a:	d13e      	bne.n	373ca <gnss_interface_setopt+0x222>
   3734c:	2300      	movs	r3, #0
   3734e:	f241 0604 	movw	r6, #4100	; 0x1004
   37352:	f88d 3008 	strb.w	r3, [sp, #8]
   37356:	f88d 3009 	strb.w	r3, [sp, #9]
   3735a:	f88d 300a 	strb.w	r3, [sp, #10]
   3735e:	f88d 300b 	strb.w	r3, [sp, #11]
   37362:	f88d 300c 	strb.w	r3, [sp, #12]
   37366:	4637      	mov	r7, r6
   37368:	e752      	b.n	37210 <gnss_interface_setopt+0x68>
   3736a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3736c:	2a01      	cmp	r2, #1
   3736e:	d124      	bne.n	373ba <gnss_interface_setopt+0x212>
   37370:	781b      	ldrb	r3, [r3, #0]
   37372:	2b01      	cmp	r3, #1
   37374:	d121      	bne.n	373ba <gnss_interface_setopt+0x212>
   37376:	f241 1603 	movw	r6, #4355	; 0x1103
   3737a:	4637      	mov	r7, r6
   3737c:	e748      	b.n	37210 <gnss_interface_setopt+0x68>
   3737e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   37380:	2a02      	cmp	r2, #2
   37382:	d11a      	bne.n	373ba <gnss_interface_setopt+0x212>
   37384:	2220      	movs	r2, #32
   37386:	f241 1603 	movw	r6, #4355	; 0x1103
   3738a:	881b      	ldrh	r3, [r3, #0]
   3738c:	9202      	str	r2, [sp, #8]
   3738e:	f8ad 3013 	strh.w	r3, [sp, #19]
   37392:	4637      	mov	r7, r6
   37394:	e73c      	b.n	37210 <gnss_interface_setopt+0x68>
   37396:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   37398:	2a02      	cmp	r2, #2
   3739a:	d10e      	bne.n	373ba <gnss_interface_setopt+0x212>
   3739c:	2210      	movs	r2, #16
   3739e:	f241 1603 	movw	r6, #4355	; 0x1103
   373a2:	881b      	ldrh	r3, [r3, #0]
   373a4:	9202      	str	r2, [sp, #8]
   373a6:	f8ad 3011 	strh.w	r3, [sp, #17]
   373aa:	4637      	mov	r7, r6
   373ac:	e730      	b.n	37210 <gnss_interface_setopt+0x68>
   373ae:	200e      	movs	r0, #14
   373b0:	f7ef fe52 	bl	27058 <bsd_os_errno_set>
   373b4:	f04f 30ff 	mov.w	r0, #4294967295
   373b8:	e783      	b.n	372c2 <gnss_interface_setopt+0x11a>
   373ba:	2016      	movs	r0, #22
   373bc:	f7ef fe4c 	bl	27058 <bsd_os_errno_set>
   373c0:	f04f 30ff 	mov.w	r0, #4294967295
   373c4:	b006      	add	sp, #24
   373c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   373ca:	200e      	movs	r0, #14
   373cc:	f7ef fe44 	bl	27058 <bsd_os_errno_set>
   373d0:	f04f 30ff 	mov.w	r0, #4294967295
   373d4:	e779      	b.n	372ca <gnss_interface_setopt+0x122>
   373d6:	b128      	cbz	r0, 373e4 <gnss_interface_setopt+0x23c>
   373d8:	6803      	ldr	r3, [r0, #0]
   373da:	b11b      	cbz	r3, 373e4 <gnss_interface_setopt+0x23c>
   373dc:	4618      	mov	r0, r3
   373de:	f000 fb35 	bl	37a4c <rpc_gnss_client_data_free>
   373e2:	9800      	ldr	r0, [sp, #0]
   373e4:	f000 fb2a 	bl	37a3c <rpc_gnss_client_message_free>
   373e8:	2023      	movs	r0, #35	; 0x23
   373ea:	f7ef fe35 	bl	27058 <bsd_os_errno_set>
   373ee:	682b      	ldr	r3, [r5, #0]
   373f0:	200e      	movs	r0, #14
   373f2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   373f6:	602b      	str	r3, [r5, #0]
   373f8:	f7ef fe2e 	bl	27058 <bsd_os_errno_set>
   373fc:	f04f 30ff 	mov.w	r0, #4294967295
   37400:	e763      	b.n	372ca <gnss_interface_setopt+0x122>
   37402:	2009      	movs	r0, #9
   37404:	f7ef fe28 	bl	27058 <bsd_os_errno_set>
   37408:	f04f 30ff 	mov.w	r0, #4294967295
   3740c:	e75d      	b.n	372ca <gnss_interface_setopt+0x122>
   3740e:	202a      	movs	r0, #42	; 0x2a
   37410:	f7ef fe22 	bl	27058 <bsd_os_errno_set>
   37414:	f04f 30ff 	mov.w	r0, #4294967295
   37418:	e757      	b.n	372ca <gnss_interface_setopt+0x122>
   3741a:	2073      	movs	r0, #115	; 0x73
   3741c:	f7ef fe1c 	bl	27058 <bsd_os_errno_set>
   37420:	f04f 30ff 	mov.w	r0, #4294967295
   37424:	e751      	b.n	372ca <gnss_interface_setopt+0x122>
   37426:	bf00      	nop
   37428:	20025090 	.word	0x20025090
   3742c:	49765443 	.word	0x49765443
   37430:	200320f0 	.word	0x200320f0
   37434:	200293a0 	.word	0x200293a0
   37438:	20025094 	.word	0x20025094

0003743c <gnss_interface_getopt>:
   3743c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37440:	4c81      	ldr	r4, [pc, #516]	; (37648 <gnss_interface_getopt+0x20c>)
   37442:	b087      	sub	sp, #28
   37444:	6825      	ldr	r5, [r4, #0]
   37446:	4698      	mov	r8, r3
   37448:	b2ad      	uxth	r5, r5
   3744a:	2d02      	cmp	r5, #2
   3744c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3744e:	f040 80dd 	bne.w	3760c <gnss_interface_getopt+0x1d0>
   37452:	6825      	ldr	r5, [r4, #0]
   37454:	03ee      	lsls	r6, r5, #15
   37456:	f100 80eb 	bmi.w	37630 <gnss_interface_getopt+0x1f4>
   3745a:	6825      	ldr	r5, [r4, #0]
   3745c:	01ed      	lsls	r5, r5, #7
   3745e:	f100 80ed 	bmi.w	3763c <gnss_interface_getopt+0x200>
   37462:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   37466:	f040 80d7 	bne.w	37618 <gnss_interface_getopt+0x1dc>
   3746a:	4978      	ldr	r1, [pc, #480]	; (3764c <gnss_interface_getopt+0x210>)
   3746c:	4288      	cmp	r0, r1
   3746e:	f040 80d9 	bne.w	37624 <gnss_interface_getopt+0x1e8>
   37472:	f1b8 0f00 	cmp.w	r8, #0
   37476:	d00b      	beq.n	37490 <gnss_interface_getopt+0x54>
   37478:	b153      	cbz	r3, 37490 <gnss_interface_getopt+0x54>
   3747a:	1e57      	subs	r7, r2, #1
   3747c:	2f05      	cmp	r7, #5
   3747e:	d807      	bhi.n	37490 <gnss_interface_getopt+0x54>
   37480:	e8df f007 	tbb	[pc, r7]
   37484:	0f030f0f 	.word	0x0f030f0f
   37488:	0303      	.short	0x0303
   3748a:	681b      	ldr	r3, [r3, #0]
   3748c:	2b01      	cmp	r3, #1
   3748e:	d00b      	beq.n	374a8 <gnss_interface_getopt+0x6c>
   37490:	2016      	movs	r0, #22
   37492:	f7ef fde1 	bl	27058 <bsd_os_errno_set>
   37496:	f04f 35ff 	mov.w	r5, #4294967295
   3749a:	4628      	mov	r0, r5
   3749c:	b007      	add	sp, #28
   3749e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   374a2:	681b      	ldr	r3, [r3, #0]
   374a4:	2b02      	cmp	r3, #2
   374a6:	d1f3      	bne.n	37490 <gnss_interface_getopt+0x54>
   374a8:	6823      	ldr	r3, [r4, #0]
   374aa:	2212      	movs	r2, #18
   374ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   374b0:	2100      	movs	r1, #0
   374b2:	a801      	add	r0, sp, #4
   374b4:	6023      	str	r3, [r4, #0]
   374b6:	f009 f8d1 	bl	4065c <memset>
   374ba:	2112      	movs	r1, #18
   374bc:	4668      	mov	r0, sp
   374be:	f000 fa93 	bl	379e8 <rpc_gnss_client_request_alloc>
   374c2:	4605      	mov	r5, r0
   374c4:	9800      	ldr	r0, [sp, #0]
   374c6:	2d00      	cmp	r5, #0
   374c8:	f040 808a 	bne.w	375e0 <gnss_interface_getopt+0x1a4>
   374cc:	2800      	cmp	r0, #0
   374ce:	f000 808e 	beq.w	375ee <gnss_interface_getopt+0x1b2>
   374d2:	f241 1602 	movw	r6, #4354	; 0x1102
   374d6:	f04f 0e49 	mov.w	lr, #73	; 0x49
   374da:	2212      	movs	r2, #18
   374dc:	f04f 0976 	mov.w	r9, #118	; 0x76
   374e0:	f04f 0b43 	mov.w	fp, #67	; 0x43
   374e4:	f04f 0a54 	mov.w	sl, #84	; 0x54
   374e8:	f8df c168 	ldr.w	ip, [pc, #360]	; 37654 <gnss_interface_getopt+0x218>
   374ec:	f880 e00f 	strb.w	lr, [r0, #15]
   374f0:	f8bc 3000 	ldrh.w	r3, [ip]
   374f4:	f880 900e 	strb.w	r9, [r0, #14]
   374f8:	3301      	adds	r3, #1
   374fa:	b29b      	uxth	r3, r3
   374fc:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   37500:	f8cd e004 	str.w	lr, [sp, #4]
   37504:	7145      	strb	r5, [r0, #5]
   37506:	7185      	strb	r5, [r0, #6]
   37508:	71c5      	strb	r5, [r0, #7]
   3750a:	7205      	strb	r5, [r0, #8]
   3750c:	7245      	strb	r5, [r0, #9]
   3750e:	7285      	strb	r5, [r0, #10]
   37510:	72c5      	strb	r5, [r0, #11]
   37512:	a901      	add	r1, sp, #4
   37514:	7102      	strb	r2, [r0, #4]
   37516:	f880 b00c 	strb.w	fp, [r0, #12]
   3751a:	f880 a00d 	strb.w	sl, [r0, #13]
   3751e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 37658 <gnss_interface_getopt+0x21c>
   37522:	6800      	ldr	r0, [r0, #0]
   37524:	f8ac 3000 	strh.w	r3, [ip]
   37528:	f009 f878 	bl	4061c <memcpy>
   3752c:	4631      	mov	r1, r6
   3752e:	9800      	ldr	r0, [sp, #0]
   37530:	f8c9 5000 	str.w	r5, [r9]
   37534:	f000 fa6c 	bl	37a10 <rpc_gnss_client_request_send>
   37538:	2800      	cmp	r0, #0
   3753a:	d15d      	bne.n	375f8 <gnss_interface_getopt+0x1bc>
   3753c:	4e44      	ldr	r6, [pc, #272]	; (37650 <gnss_interface_getopt+0x214>)
   3753e:	4d43      	ldr	r5, [pc, #268]	; (3764c <gnss_interface_getopt+0x210>)
   37540:	4631      	mov	r1, r6
   37542:	4628      	mov	r0, r5
   37544:	f7ef fcf4 	bl	26f30 <bsd_os_timedwait>
   37548:	6823      	ldr	r3, [r4, #0]
   3754a:	01db      	lsls	r3, r3, #7
   3754c:	d4f8      	bmi.n	37540 <gnss_interface_getopt+0x104>
   3754e:	f8d9 0000 	ldr.w	r0, [r9]
   37552:	b1d8      	cbz	r0, 3758c <gnss_interface_getopt+0x150>
   37554:	6825      	ldr	r5, [r4, #0]
   37556:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   3755a:	d00f      	beq.n	3757c <gnss_interface_getopt+0x140>
   3755c:	2f05      	cmp	r7, #5
   3755e:	d837      	bhi.n	375d0 <gnss_interface_getopt+0x194>
   37560:	e8df f007 	tbb	[pc, r7]
   37564:	2b26201a 	.word	0x2b26201a
   37568:	0331      	.short	0x0331
   3756a:	2500      	movs	r5, #0
   3756c:	7b43      	ldrb	r3, [r0, #13]
   3756e:	f888 3000 	strb.w	r3, [r8]
   37572:	f000 fa6b 	bl	37a4c <rpc_gnss_client_data_free>
   37576:	2300      	movs	r3, #0
   37578:	f8c9 3000 	str.w	r3, [r9]
   3757c:	6823      	ldr	r3, [r4, #0]
   3757e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   37582:	6023      	str	r3, [r4, #0]
   37584:	4628      	mov	r0, r5
   37586:	b007      	add	sp, #28
   37588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3758c:	6823      	ldr	r3, [r4, #0]
   3758e:	4605      	mov	r5, r0
   37590:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   37594:	6023      	str	r3, [r4, #0]
   37596:	e7f5      	b.n	37584 <gnss_interface_getopt+0x148>
   37598:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   3759c:	2500      	movs	r5, #0
   3759e:	f8a8 3000 	strh.w	r3, [r8]
   375a2:	e7e6      	b.n	37572 <gnss_interface_getopt+0x136>
   375a4:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   375a8:	2500      	movs	r5, #0
   375aa:	f8a8 3000 	strh.w	r3, [r8]
   375ae:	e7e0      	b.n	37572 <gnss_interface_getopt+0x136>
   375b0:	7b83      	ldrb	r3, [r0, #14]
   375b2:	2500      	movs	r5, #0
   375b4:	f888 3000 	strb.w	r3, [r8]
   375b8:	e7db      	b.n	37572 <gnss_interface_getopt+0x136>
   375ba:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   375be:	2500      	movs	r5, #0
   375c0:	f8a8 3000 	strh.w	r3, [r8]
   375c4:	e7d5      	b.n	37572 <gnss_interface_getopt+0x136>
   375c6:	7b03      	ldrb	r3, [r0, #12]
   375c8:	2500      	movs	r5, #0
   375ca:	f888 3000 	strb.w	r3, [r8]
   375ce:	e7d0      	b.n	37572 <gnss_interface_getopt+0x136>
   375d0:	2016      	movs	r0, #22
   375d2:	f7ef fd41 	bl	27058 <bsd_os_errno_set>
   375d6:	f04f 35ff 	mov.w	r5, #4294967295
   375da:	f8d9 0000 	ldr.w	r0, [r9]
   375de:	e7c8      	b.n	37572 <gnss_interface_getopt+0x136>
   375e0:	b128      	cbz	r0, 375ee <gnss_interface_getopt+0x1b2>
   375e2:	6803      	ldr	r3, [r0, #0]
   375e4:	b11b      	cbz	r3, 375ee <gnss_interface_getopt+0x1b2>
   375e6:	4618      	mov	r0, r3
   375e8:	f000 fa30 	bl	37a4c <rpc_gnss_client_data_free>
   375ec:	9800      	ldr	r0, [sp, #0]
   375ee:	f000 fa25 	bl	37a3c <rpc_gnss_client_message_free>
   375f2:	2023      	movs	r0, #35	; 0x23
   375f4:	f7ef fd30 	bl	27058 <bsd_os_errno_set>
   375f8:	6823      	ldr	r3, [r4, #0]
   375fa:	200e      	movs	r0, #14
   375fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   37600:	6023      	str	r3, [r4, #0]
   37602:	f04f 35ff 	mov.w	r5, #4294967295
   37606:	f7ef fd27 	bl	27058 <bsd_os_errno_set>
   3760a:	e746      	b.n	3749a <gnss_interface_getopt+0x5e>
   3760c:	200e      	movs	r0, #14
   3760e:	f7ef fd23 	bl	27058 <bsd_os_errno_set>
   37612:	f04f 35ff 	mov.w	r5, #4294967295
   37616:	e740      	b.n	3749a <gnss_interface_getopt+0x5e>
   37618:	202a      	movs	r0, #42	; 0x2a
   3761a:	f7ef fd1d 	bl	27058 <bsd_os_errno_set>
   3761e:	f04f 35ff 	mov.w	r5, #4294967295
   37622:	e73a      	b.n	3749a <gnss_interface_getopt+0x5e>
   37624:	2009      	movs	r0, #9
   37626:	f7ef fd17 	bl	27058 <bsd_os_errno_set>
   3762a:	f04f 35ff 	mov.w	r5, #4294967295
   3762e:	e734      	b.n	3749a <gnss_interface_getopt+0x5e>
   37630:	2005      	movs	r0, #5
   37632:	f7ef fd11 	bl	27058 <bsd_os_errno_set>
   37636:	f04f 35ff 	mov.w	r5, #4294967295
   3763a:	e72e      	b.n	3749a <gnss_interface_getopt+0x5e>
   3763c:	2073      	movs	r0, #115	; 0x73
   3763e:	f7ef fd0b 	bl	27058 <bsd_os_errno_set>
   37642:	f04f 35ff 	mov.w	r5, #4294967295
   37646:	e728      	b.n	3749a <gnss_interface_getopt+0x5e>
   37648:	20025090 	.word	0x20025090
   3764c:	49765443 	.word	0x49765443
   37650:	200320f0 	.word	0x200320f0
   37654:	200293a0 	.word	0x200293a0
   37658:	20025094 	.word	0x20025094

0003765c <gnss_interface_init>:
   3765c:	2100      	movs	r1, #0
   3765e:	b538      	push	{r3, r4, r5, lr}
   37660:	4c09      	ldr	r4, [pc, #36]	; (37688 <gnss_interface_init+0x2c>)
   37662:	4d0a      	ldr	r5, [pc, #40]	; (3768c <gnss_interface_init+0x30>)
   37664:	6822      	ldr	r2, [r4, #0]
   37666:	480a      	ldr	r0, [pc, #40]	; (37690 <gnss_interface_init+0x34>)
   37668:	4b0a      	ldr	r3, [pc, #40]	; (37694 <gnss_interface_init+0x38>)
   3766a:	402a      	ands	r2, r5
   3766c:	6022      	str	r2, [r4, #0]
   3766e:	8001      	strh	r1, [r0, #0]
   37670:	6019      	str	r1, [r3, #0]
   37672:	f000 f9b3 	bl	379dc <rpc_gnss_client_init>
   37676:	b928      	cbnz	r0, 37684 <gnss_interface_init+0x28>
   37678:	6823      	ldr	r3, [r4, #0]
   3767a:	402b      	ands	r3, r5
   3767c:	f043 0301 	orr.w	r3, r3, #1
   37680:	6023      	str	r3, [r4, #0]
   37682:	bd38      	pop	{r3, r4, r5, pc}
   37684:	2003      	movs	r0, #3
   37686:	bd38      	pop	{r3, r4, r5, pc}
   37688:	20025090 	.word	0x20025090
   3768c:	ffff0000 	.word	0xffff0000
   37690:	200293a0 	.word	0x200293a0
   37694:	20025094 	.word	0x20025094

00037698 <gnss_interface_open>:
   37698:	2902      	cmp	r1, #2
   3769a:	b510      	push	{r4, lr}
   3769c:	d121      	bne.n	376e2 <gnss_interface_open+0x4a>
   3769e:	4c14      	ldr	r4, [pc, #80]	; (376f0 <gnss_interface_open+0x58>)
   376a0:	6823      	ldr	r3, [r4, #0]
   376a2:	b29b      	uxth	r3, r3
   376a4:	2b01      	cmp	r3, #1
   376a6:	d116      	bne.n	376d6 <gnss_interface_open+0x3e>
   376a8:	6823      	ldr	r3, [r4, #0]
   376aa:	4608      	mov	r0, r1
   376ac:	0c1b      	lsrs	r3, r3, #16
   376ae:	041b      	lsls	r3, r3, #16
   376b0:	f043 0302 	orr.w	r3, r3, #2
   376b4:	2200      	movs	r2, #0
   376b6:	490f      	ldr	r1, [pc, #60]	; (376f4 <gnss_interface_open+0x5c>)
   376b8:	6023      	str	r3, [r4, #0]
   376ba:	f000 faad 	bl	37c18 <packet_handler_create>
   376be:	4a0e      	ldr	r2, [pc, #56]	; (376f8 <gnss_interface_open+0x60>)
   376c0:	6010      	str	r0, [r2, #0]
   376c2:	b140      	cbz	r0, 376d6 <gnss_interface_open+0x3e>
   376c4:	6823      	ldr	r3, [r4, #0]
   376c6:	6802      	ldr	r2, [r0, #0]
   376c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   376cc:	6812      	ldr	r2, [r2, #0]
   376ce:	6023      	str	r3, [r4, #0]
   376d0:	4790      	blx	r2
   376d2:	480a      	ldr	r0, [pc, #40]	; (376fc <gnss_interface_open+0x64>)
   376d4:	bd10      	pop	{r4, pc}
   376d6:	200e      	movs	r0, #14
   376d8:	f7ef fcbe 	bl	27058 <bsd_os_errno_set>
   376dc:	f04f 30ff 	mov.w	r0, #4294967295
   376e0:	bd10      	pop	{r4, pc}
   376e2:	2029      	movs	r0, #41	; 0x29
   376e4:	f7ef fcb8 	bl	27058 <bsd_os_errno_set>
   376e8:	f04f 30ff 	mov.w	r0, #4294967295
   376ec:	bd10      	pop	{r4, pc}
   376ee:	bf00      	nop
   376f0:	20025090 	.word	0x20025090
   376f4:	000369e1 	.word	0x000369e1
   376f8:	20025098 	.word	0x20025098
   376fc:	49765443 	.word	0x49765443

00037700 <gnss_interface_close>:
   37700:	b530      	push	{r4, r5, lr}
   37702:	4b13      	ldr	r3, [pc, #76]	; (37750 <gnss_interface_close+0x50>)
   37704:	b083      	sub	sp, #12
   37706:	4298      	cmp	r0, r3
   37708:	d11c      	bne.n	37744 <gnss_interface_close+0x44>
   3770a:	4c12      	ldr	r4, [pc, #72]	; (37754 <gnss_interface_close+0x54>)
   3770c:	6823      	ldr	r3, [r4, #0]
   3770e:	b29b      	uxth	r3, r3
   37710:	2b04      	cmp	r3, #4
   37712:	d00f      	beq.n	37734 <gnss_interface_close+0x34>
   37714:	4d10      	ldr	r5, [pc, #64]	; (37758 <gnss_interface_close+0x58>)
   37716:	6828      	ldr	r0, [r5, #0]
   37718:	b118      	cbz	r0, 37722 <gnss_interface_close+0x22>
   3771a:	f000 fa9d 	bl	37c58 <packet_handler_delete>
   3771e:	2300      	movs	r3, #0
   37720:	602b      	str	r3, [r5, #0]
   37722:	2000      	movs	r0, #0
   37724:	6823      	ldr	r3, [r4, #0]
   37726:	0c1b      	lsrs	r3, r3, #16
   37728:	041b      	lsls	r3, r3, #16
   3772a:	f043 0301 	orr.w	r3, r3, #1
   3772e:	6023      	str	r3, [r4, #0]
   37730:	b003      	add	sp, #12
   37732:	bd30      	pop	{r4, r5, pc}
   37734:	2300      	movs	r3, #0
   37736:	2208      	movs	r2, #8
   37738:	9300      	str	r3, [sp, #0]
   3773a:	f44f 7101 	mov.w	r1, #516	; 0x204
   3773e:	f7fc fdfd 	bl	3433c <nrf_setsockopt>
   37742:	e7e7      	b.n	37714 <gnss_interface_close+0x14>
   37744:	2009      	movs	r0, #9
   37746:	f7ef fc87 	bl	27058 <bsd_os_errno_set>
   3774a:	f04f 30ff 	mov.w	r0, #4294967295
   3774e:	e7ef      	b.n	37730 <gnss_interface_close+0x30>
   37750:	49765443 	.word	0x49765443
   37754:	20025090 	.word	0x20025090
   37758:	20025098 	.word	0x20025098

0003775c <rpc_gnss_serialize_utc>:
   3775c:	4603      	mov	r3, r0
   3775e:	b1d8      	cbz	r0, 37798 <rpc_gnss_serialize_utc+0x3c>
   37760:	b1d1      	cbz	r1, 37798 <rpc_gnss_serialize_utc+0x3c>
   37762:	2000      	movs	r0, #0
   37764:	2201      	movs	r2, #1
   37766:	7048      	strb	r0, [r1, #1]
   37768:	700a      	strb	r2, [r1, #0]
   3776a:	685a      	ldr	r2, [r3, #4]
   3776c:	2010      	movs	r0, #16
   3776e:	f8c1 2006 	str.w	r2, [r1, #6]
   37772:	681a      	ldr	r2, [r3, #0]
   37774:	f8c1 2002 	str.w	r2, [r1, #2]
   37778:	f993 200a 	ldrsb.w	r2, [r3, #10]
   3777c:	730a      	strb	r2, [r1, #12]
   3777e:	f993 200d 	ldrsb.w	r2, [r3, #13]
   37782:	73ca      	strb	r2, [r1, #15]
   37784:	f993 200c 	ldrsb.w	r2, [r3, #12]
   37788:	738a      	strb	r2, [r1, #14]
   3778a:	7a1a      	ldrb	r2, [r3, #8]
   3778c:	728a      	strb	r2, [r1, #10]
   3778e:	7ada      	ldrb	r2, [r3, #11]
   37790:	734a      	strb	r2, [r1, #13]
   37792:	7a5b      	ldrb	r3, [r3, #9]
   37794:	72cb      	strb	r3, [r1, #11]
   37796:	4770      	bx	lr
   37798:	f04f 30ff 	mov.w	r0, #4294967295
   3779c:	4770      	bx	lr
   3779e:	bf00      	nop

000377a0 <rpc_gnss_serialize_ephe>:
   377a0:	4603      	mov	r3, r0
   377a2:	2800      	cmp	r0, #0
   377a4:	d04b      	beq.n	3783e <rpc_gnss_serialize_ephe+0x9e>
   377a6:	2900      	cmp	r1, #0
   377a8:	d049      	beq.n	3783e <rpc_gnss_serialize_ephe+0x9e>
   377aa:	2000      	movs	r0, #0
   377ac:	2202      	movs	r2, #2
   377ae:	7048      	strb	r0, [r1, #1]
   377b0:	700a      	strb	r2, [r1, #0]
   377b2:	68da      	ldr	r2, [r3, #12]
   377b4:	2040      	movs	r0, #64	; 0x40
   377b6:	f8c1 200b 	str.w	r2, [r1, #11]
   377ba:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   377be:	f8a1 2009 	strh.w	r2, [r1, #9]
   377c2:	f993 2006 	ldrsb.w	r2, [r3, #6]
   377c6:	720a      	strb	r2, [r1, #8]
   377c8:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   377cc:	878a      	strh	r2, [r1, #60]	; 0x3c
   377ce:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   377d2:	86ca      	strh	r2, [r1, #54]	; 0x36
   377d4:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   377d8:	874a      	strh	r2, [r1, #58]	; 0x3a
   377da:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   377de:	868a      	strh	r2, [r1, #52]	; 0x34
   377e0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   377e4:	87ca      	strh	r2, [r1, #62]	; 0x3e
   377e6:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   377ea:	870a      	strh	r2, [r1, #56]	; 0x38
   377ec:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   377f0:	830a      	strh	r2, [r1, #24]
   377f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   377f4:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   377f8:	7c9a      	ldrb	r2, [r3, #18]
   377fa:	744a      	strb	r2, [r1, #17]
   377fc:	785a      	ldrb	r2, [r3, #1]
   377fe:	70ca      	strb	r2, [r1, #3]
   37800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   37802:	62ca      	str	r2, [r1, #44]	; 0x2c
   37804:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   37808:	84ca      	strh	r2, [r1, #38]	; 0x26
   3780a:	885a      	ldrh	r2, [r3, #2]
   3780c:	808a      	strh	r2, [r1, #4]
   3780e:	6a1a      	ldr	r2, [r3, #32]
   37810:	f8c1 201a 	str.w	r2, [r1, #26]
   37814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   37816:	630a      	str	r2, [r1, #48]	; 0x30
   37818:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   3781a:	f8c1 201e 	str.w	r2, [r1, #30]
   3781e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   37820:	628a      	str	r2, [r1, #40]	; 0x28
   37822:	781a      	ldrb	r2, [r3, #0]
   37824:	708a      	strb	r2, [r1, #2]
   37826:	f993 2010 	ldrsb.w	r2, [r3, #16]
   3782a:	73ca      	strb	r2, [r1, #15]
   3782c:	889a      	ldrh	r2, [r3, #4]
   3782e:	80ca      	strh	r2, [r1, #6]
   37830:	8a9a      	ldrh	r2, [r3, #20]
   37832:	824a      	strh	r2, [r1, #18]
   37834:	7c5a      	ldrb	r2, [r3, #17]
   37836:	740a      	strb	r2, [r1, #16]
   37838:	699b      	ldr	r3, [r3, #24]
   3783a:	614b      	str	r3, [r1, #20]
   3783c:	4770      	bx	lr
   3783e:	f04f 30ff 	mov.w	r0, #4294967295
   37842:	4770      	bx	lr

00037844 <rpc_gnss_serialize_alm>:
   37844:	4603      	mov	r3, r0
   37846:	b360      	cbz	r0, 378a2 <rpc_gnss_serialize_alm+0x5e>
   37848:	b359      	cbz	r1, 378a2 <rpc_gnss_serialize_alm+0x5e>
   3784a:	2000      	movs	r0, #0
   3784c:	2203      	movs	r2, #3
   3784e:	7048      	strb	r0, [r1, #1]
   37850:	700a      	strb	r2, [r1, #0]
   37852:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   37856:	2021      	movs	r0, #33	; 0x21
   37858:	f8a1 201d 	strh.w	r2, [r1, #29]
   3785c:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   37860:	f8a1 201f 	strh.w	r2, [r1, #31]
   37864:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   37868:	810a      	strh	r2, [r1, #8]
   3786a:	889a      	ldrh	r2, [r3, #4]
   3786c:	80ca      	strh	r2, [r1, #6]
   3786e:	78da      	ldrb	r2, [r3, #3]
   37870:	714a      	strb	r2, [r1, #5]
   37872:	699a      	ldr	r2, [r3, #24]
   37874:	f8c1 2019 	str.w	r2, [r1, #25]
   37878:	691a      	ldr	r2, [r3, #16]
   3787a:	f8c1 2011 	str.w	r2, [r1, #17]
   3787e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   37882:	814a      	strh	r2, [r1, #10]
   37884:	68da      	ldr	r2, [r3, #12]
   37886:	f8c1 200d 	str.w	r2, [r1, #13]
   3788a:	7a9a      	ldrb	r2, [r3, #10]
   3788c:	730a      	strb	r2, [r1, #12]
   3788e:	781a      	ldrb	r2, [r3, #0]
   37890:	708a      	strb	r2, [r1, #2]
   37892:	789a      	ldrb	r2, [r3, #2]
   37894:	710a      	strb	r2, [r1, #4]
   37896:	695a      	ldr	r2, [r3, #20]
   37898:	f8c1 2015 	str.w	r2, [r1, #21]
   3789c:	785b      	ldrb	r3, [r3, #1]
   3789e:	70cb      	strb	r3, [r1, #3]
   378a0:	4770      	bx	lr
   378a2:	f04f 30ff 	mov.w	r0, #4294967295
   378a6:	4770      	bx	lr

000378a8 <rpc_gnss_serialize_klob>:
   378a8:	4603      	mov	r3, r0
   378aa:	b1f0      	cbz	r0, 378ea <rpc_gnss_serialize_klob+0x42>
   378ac:	b1e9      	cbz	r1, 378ea <rpc_gnss_serialize_klob+0x42>
   378ae:	2000      	movs	r0, #0
   378b0:	2204      	movs	r2, #4
   378b2:	7048      	strb	r0, [r1, #1]
   378b4:	700a      	strb	r2, [r1, #0]
   378b6:	f993 2000 	ldrsb.w	r2, [r3]
   378ba:	200a      	movs	r0, #10
   378bc:	708a      	strb	r2, [r1, #2]
   378be:	f993 2001 	ldrsb.w	r2, [r3, #1]
   378c2:	70ca      	strb	r2, [r1, #3]
   378c4:	f993 2002 	ldrsb.w	r2, [r3, #2]
   378c8:	710a      	strb	r2, [r1, #4]
   378ca:	f993 2003 	ldrsb.w	r2, [r3, #3]
   378ce:	714a      	strb	r2, [r1, #5]
   378d0:	f993 2004 	ldrsb.w	r2, [r3, #4]
   378d4:	718a      	strb	r2, [r1, #6]
   378d6:	f993 2005 	ldrsb.w	r2, [r3, #5]
   378da:	71ca      	strb	r2, [r1, #7]
   378dc:	f993 2006 	ldrsb.w	r2, [r3, #6]
   378e0:	720a      	strb	r2, [r1, #8]
   378e2:	f993 3007 	ldrsb.w	r3, [r3, #7]
   378e6:	724b      	strb	r3, [r1, #9]
   378e8:	4770      	bx	lr
   378ea:	f04f 30ff 	mov.w	r0, #4294967295
   378ee:	4770      	bx	lr

000378f0 <rpc_gnss_serialize_nequick>:
   378f0:	4603      	mov	r3, r0
   378f2:	b198      	cbz	r0, 3791c <rpc_gnss_serialize_nequick+0x2c>
   378f4:	b191      	cbz	r1, 3791c <rpc_gnss_serialize_nequick+0x2c>
   378f6:	2000      	movs	r0, #0
   378f8:	2205      	movs	r2, #5
   378fa:	7048      	strb	r0, [r1, #1]
   378fc:	700a      	strb	r2, [r1, #0]
   378fe:	f9b3 2000 	ldrsh.w	r2, [r3]
   37902:	200a      	movs	r0, #10
   37904:	804a      	strh	r2, [r1, #2]
   37906:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   3790a:	808a      	strh	r2, [r1, #4]
   3790c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   37910:	80ca      	strh	r2, [r1, #6]
   37912:	799a      	ldrb	r2, [r3, #6]
   37914:	720a      	strb	r2, [r1, #8]
   37916:	79db      	ldrb	r3, [r3, #7]
   37918:	724b      	strb	r3, [r1, #9]
   3791a:	4770      	bx	lr
   3791c:	f04f 30ff 	mov.w	r0, #4294967295
   37920:	4770      	bx	lr
   37922:	bf00      	nop

00037924 <rpc_gnss_serialize_time_and_sv_tow>:
   37924:	b310      	cbz	r0, 3796c <rpc_gnss_serialize_time_and_sv_tow+0x48>
   37926:	b309      	cbz	r1, 3796c <rpc_gnss_serialize_time_and_sv_tow+0x48>
   37928:	b470      	push	{r4, r5, r6}
   3792a:	2500      	movs	r5, #0
   3792c:	2606      	movs	r6, #6
   3792e:	460c      	mov	r4, r1
   37930:	704d      	strb	r5, [r1, #1]
   37932:	700e      	strb	r6, [r1, #0]
   37934:	462b      	mov	r3, r5
   37936:	8805      	ldrh	r5, [r0, #0]
   37938:	4602      	mov	r2, r0
   3793a:	804d      	strh	r5, [r1, #2]
   3793c:	68c5      	ldr	r5, [r0, #12]
   3793e:	f8c1 500a 	str.w	r5, [r1, #10]
   37942:	8905      	ldrh	r5, [r0, #8]
   37944:	810d      	strh	r5, [r1, #8]
   37946:	6840      	ldr	r0, [r0, #4]
   37948:	6048      	str	r0, [r1, #4]
   3794a:	8a15      	ldrh	r5, [r2, #16]
   3794c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   37950:	4408      	add	r0, r1
   37952:	81c5      	strh	r5, [r0, #14]
   37954:	7c90      	ldrb	r0, [r2, #18]
   37956:	3301      	adds	r3, #1
   37958:	2b20      	cmp	r3, #32
   3795a:	7420      	strb	r0, [r4, #16]
   3795c:	f102 0204 	add.w	r2, r2, #4
   37960:	f104 0403 	add.w	r4, r4, #3
   37964:	d1f1      	bne.n	3794a <rpc_gnss_serialize_time_and_sv_tow+0x26>
   37966:	206e      	movs	r0, #110	; 0x6e
   37968:	bc70      	pop	{r4, r5, r6}
   3796a:	4770      	bx	lr
   3796c:	f04f 30ff 	mov.w	r0, #4294967295
   37970:	4770      	bx	lr
   37972:	bf00      	nop

00037974 <rpc_gnss_serialize_location>:
   37974:	4603      	mov	r3, r0
   37976:	b1c8      	cbz	r0, 379ac <rpc_gnss_serialize_location+0x38>
   37978:	b1c1      	cbz	r1, 379ac <rpc_gnss_serialize_location+0x38>
   3797a:	2000      	movs	r0, #0
   3797c:	2207      	movs	r2, #7
   3797e:	7048      	strb	r0, [r1, #1]
   37980:	700a      	strb	r2, [r1, #0]
   37982:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   37986:	2011      	movs	r0, #17
   37988:	814a      	strh	r2, [r1, #10]
   3798a:	7b9a      	ldrb	r2, [r3, #14]
   3798c:	740a      	strb	r2, [r1, #16]
   3798e:	681a      	ldr	r2, [r3, #0]
   37990:	f8c1 2002 	str.w	r2, [r1, #2]
   37994:	685a      	ldr	r2, [r3, #4]
   37996:	f8c1 2006 	str.w	r2, [r1, #6]
   3799a:	7b1a      	ldrb	r2, [r3, #12]
   3799c:	738a      	strb	r2, [r1, #14]
   3799e:	7b5a      	ldrb	r2, [r3, #13]
   379a0:	73ca      	strb	r2, [r1, #15]
   379a2:	7a9a      	ldrb	r2, [r3, #10]
   379a4:	730a      	strb	r2, [r1, #12]
   379a6:	7adb      	ldrb	r3, [r3, #11]
   379a8:	734b      	strb	r3, [r1, #13]
   379aa:	4770      	bx	lr
   379ac:	f04f 30ff 	mov.w	r0, #4294967295
   379b0:	4770      	bx	lr
   379b2:	bf00      	nop

000379b4 <rpc_gnss_serialize_integrity>:
   379b4:	b148      	cbz	r0, 379ca <rpc_gnss_serialize_integrity+0x16>
   379b6:	b141      	cbz	r1, 379ca <rpc_gnss_serialize_integrity+0x16>
   379b8:	2200      	movs	r2, #0
   379ba:	2308      	movs	r3, #8
   379bc:	704a      	strb	r2, [r1, #1]
   379be:	700b      	strb	r3, [r1, #0]
   379c0:	6803      	ldr	r3, [r0, #0]
   379c2:	2006      	movs	r0, #6
   379c4:	f8c1 3002 	str.w	r3, [r1, #2]
   379c8:	4770      	bx	lr
   379ca:	f04f 30ff 	mov.w	r0, #4294967295
   379ce:	4770      	bx	lr

000379d0 <gnss_client_event_handler>:
   379d0:	f850 1b08 	ldr.w	r1, [r0], #8
   379d4:	0c09      	lsrs	r1, r1, #16
   379d6:	f7ff b811 	b.w	369fc <rpc_gnss_event_handler>
   379da:	bf00      	nop

000379dc <rpc_gnss_client_init>:
   379dc:	4801      	ldr	r0, [pc, #4]	; (379e4 <rpc_gnss_client_init+0x8>)
   379de:	f7fe bb73 	b.w	360c8 <rpc_client_register>
   379e2:	bf00      	nop
   379e4:	0004293c 	.word	0x0004293c

000379e8 <rpc_gnss_client_request_alloc>:
   379e8:	2300      	movs	r3, #0
   379ea:	b510      	push	{r4, lr}
   379ec:	b082      	sub	sp, #8
   379ee:	9301      	str	r3, [sp, #4]
   379f0:	b158      	cbz	r0, 37a0a <rpc_gnss_client_request_alloc+0x22>
   379f2:	4604      	mov	r4, r0
   379f4:	aa01      	add	r2, sp, #4
   379f6:	2007      	movs	r0, #7
   379f8:	f7fe fd9e 	bl	36538 <rpc_message_alloc>
   379fc:	b918      	cbnz	r0, 37a06 <rpc_gnss_client_request_alloc+0x1e>
   379fe:	9b01      	ldr	r3, [sp, #4]
   37a00:	b10b      	cbz	r3, 37a06 <rpc_gnss_client_request_alloc+0x1e>
   37a02:	3308      	adds	r3, #8
   37a04:	6023      	str	r3, [r4, #0]
   37a06:	b002      	add	sp, #8
   37a08:	bd10      	pop	{r4, pc}
   37a0a:	2007      	movs	r0, #7
   37a0c:	b002      	add	sp, #8
   37a0e:	bd10      	pop	{r4, pc}

00037a10 <rpc_gnss_client_request_send>:
   37a10:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   37a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   37a18:	d10b      	bne.n	37a32 <rpc_gnss_client_request_send+0x22>
   37a1a:	b160      	cbz	r0, 37a36 <rpc_gnss_client_request_send+0x26>
   37a1c:	4603      	mov	r3, r0
   37a1e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   37a22:	2007      	movs	r0, #7
   37a24:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   37a28:	f843 1d08 	str.w	r1, [r3, #-8]!
   37a2c:	4619      	mov	r1, r3
   37a2e:	f7fe bd6b 	b.w	36508 <rpc_message_send>
   37a32:	200f      	movs	r0, #15
   37a34:	4770      	bx	lr
   37a36:	2007      	movs	r0, #7
   37a38:	4770      	bx	lr
   37a3a:	bf00      	nop

00037a3c <rpc_gnss_client_message_free>:
   37a3c:	b120      	cbz	r0, 37a48 <rpc_gnss_client_message_free+0xc>
   37a3e:	f1a0 0108 	sub.w	r1, r0, #8
   37a42:	2007      	movs	r0, #7
   37a44:	f7fe bdaa 	b.w	3659c <rpc_message_free>
   37a48:	2007      	movs	r0, #7
   37a4a:	4770      	bx	lr

00037a4c <rpc_gnss_client_data_free>:
   37a4c:	b118      	cbz	r0, 37a56 <rpc_gnss_client_data_free+0xa>
   37a4e:	4601      	mov	r1, r0
   37a50:	2007      	movs	r0, #7
   37a52:	f7fe beb5 	b.w	367c0 <rpc_message_data_free>
   37a56:	2007      	movs	r0, #7
   37a58:	4770      	bx	lr
   37a5a:	bf00      	nop

00037a5c <datagram_handler_init>:
   37a5c:	b510      	push	{r4, lr}
   37a5e:	4604      	mov	r4, r0
   37a60:	200c      	movs	r0, #12
   37a62:	f7f8 ff87 	bl	30974 <nrf_malloc>
   37a66:	60e0      	str	r0, [r4, #12]
   37a68:	b118      	cbz	r0, 37a72 <datagram_handler_init+0x16>
   37a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   37a6e:	f7fc bb2f 	b.w	340d0 <linked_list_init>
   37a72:	2004      	movs	r0, #4
   37a74:	bd10      	pop	{r4, pc}
   37a76:	bf00      	nop

00037a78 <datagram_handler_put>:
   37a78:	b570      	push	{r4, r5, r6, lr}
   37a7a:	4606      	mov	r6, r0
   37a7c:	2014      	movs	r0, #20
   37a7e:	460d      	mov	r5, r1
   37a80:	f7f8 ff78 	bl	30974 <nrf_malloc>
   37a84:	b178      	cbz	r0, 37aa6 <datagram_handler_put+0x2e>
   37a86:	682b      	ldr	r3, [r5, #0]
   37a88:	4604      	mov	r4, r0
   37a8a:	6043      	str	r3, [r0, #4]
   37a8c:	686b      	ldr	r3, [r5, #4]
   37a8e:	4601      	mov	r1, r0
   37a90:	6083      	str	r3, [r0, #8]
   37a92:	68eb      	ldr	r3, [r5, #12]
   37a94:	60c3      	str	r3, [r0, #12]
   37a96:	68ab      	ldr	r3, [r5, #8]
   37a98:	6103      	str	r3, [r0, #16]
   37a9a:	68f0      	ldr	r0, [r6, #12]
   37a9c:	f7fc fb22 	bl	340e4 <linked_list_push>
   37aa0:	b920      	cbnz	r0, 37aac <datagram_handler_put+0x34>
   37aa2:	6868      	ldr	r0, [r5, #4]
   37aa4:	bd70      	pop	{r4, r5, r6, pc}
   37aa6:	f04f 30ff 	mov.w	r0, #4294967295
   37aaa:	bd70      	pop	{r4, r5, r6, pc}
   37aac:	4620      	mov	r0, r4
   37aae:	f7f8 ff6b 	bl	30988 <nrf_free>
   37ab2:	f04f 30ff 	mov.w	r0, #4294967295
   37ab6:	bd70      	pop	{r4, r5, r6, pc}

00037ab8 <datagram_handler_get>:
   37ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
   37aba:	4606      	mov	r6, r0
   37abc:	b085      	sub	sp, #20
   37abe:	68c0      	ldr	r0, [r0, #12]
   37ac0:	460c      	mov	r4, r1
   37ac2:	4617      	mov	r7, r2
   37ac4:	f7fc fb2e 	bl	34124 <linked_list_peek>
   37ac8:	2800      	cmp	r0, #0
   37aca:	d037      	beq.n	37b3c <datagram_handler_get+0x84>
   37acc:	6882      	ldr	r2, [r0, #8]
   37ace:	4605      	mov	r5, r0
   37ad0:	e9d4 0300 	ldrd	r0, r3, [r4]
   37ad4:	429a      	cmp	r2, r3
   37ad6:	bf28      	it	cs
   37ad8:	461a      	movcs	r2, r3
   37ada:	6062      	str	r2, [r4, #4]
   37adc:	b110      	cbz	r0, 37ae4 <datagram_handler_get+0x2c>
   37ade:	6869      	ldr	r1, [r5, #4]
   37ae0:	f008 fd9c 	bl	4061c <memcpy>
   37ae4:	68a0      	ldr	r0, [r4, #8]
   37ae6:	b118      	cbz	r0, 37af0 <datagram_handler_get+0x38>
   37ae8:	692b      	ldr	r3, [r5, #16]
   37aea:	b10b      	cbz	r3, 37af0 <datagram_handler_get+0x38>
   37aec:	68ea      	ldr	r2, [r5, #12]
   37aee:	b9e2      	cbnz	r2, 37b2a <datagram_handler_get+0x72>
   37af0:	2300      	movs	r3, #0
   37af2:	60e3      	str	r3, [r4, #12]
   37af4:	073b      	lsls	r3, r7, #28
   37af6:	d502      	bpl.n	37afe <datagram_handler_get+0x46>
   37af8:	6860      	ldr	r0, [r4, #4]
   37afa:	b005      	add	sp, #20
   37afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37afe:	68f0      	ldr	r0, [r6, #12]
   37b00:	f7fc fb06 	bl	34110 <linked_list_pop>
   37b04:	4605      	mov	r5, r0
   37b06:	2800      	cmp	r0, #0
   37b08:	d0f6      	beq.n	37af8 <datagram_handler_get+0x40>
   37b0a:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   37b0e:	6902      	ldr	r2, [r0, #16]
   37b10:	9300      	str	r3, [sp, #0]
   37b12:	68c3      	ldr	r3, [r0, #12]
   37b14:	e9cd 1201 	strd	r1, r2, [sp, #4]
   37b18:	9303      	str	r3, [sp, #12]
   37b1a:	4668      	mov	r0, sp
   37b1c:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
   37b20:	4798      	blx	r3
   37b22:	4628      	mov	r0, r5
   37b24:	f7f8 ff30 	bl	30988 <nrf_free>
   37b28:	e7e6      	b.n	37af8 <datagram_handler_get+0x40>
   37b2a:	68e3      	ldr	r3, [r4, #12]
   37b2c:	429a      	cmp	r2, r3
   37b2e:	bf28      	it	cs
   37b30:	461a      	movcs	r2, r3
   37b32:	60e2      	str	r2, [r4, #12]
   37b34:	6929      	ldr	r1, [r5, #16]
   37b36:	f008 fd71 	bl	4061c <memcpy>
   37b3a:	e7db      	b.n	37af4 <datagram_handler_get+0x3c>
   37b3c:	f04f 30ff 	mov.w	r0, #4294967295
   37b40:	e7db      	b.n	37afa <datagram_handler_get+0x42>
   37b42:	bf00      	nop

00037b44 <datagram_handler_available>:
   37b44:	b508      	push	{r3, lr}
   37b46:	68c0      	ldr	r0, [r0, #12]
   37b48:	f7fc faec 	bl	34124 <linked_list_peek>
   37b4c:	b108      	cbz	r0, 37b52 <datagram_handler_available+0xe>
   37b4e:	6880      	ldr	r0, [r0, #8]
   37b50:	bd08      	pop	{r3, pc}
   37b52:	f04f 30ff 	mov.w	r0, #4294967295
   37b56:	bd08      	pop	{r3, pc}

00037b58 <datagram_handler_flush>:
   37b58:	b530      	push	{r4, r5, lr}
   37b5a:	4605      	mov	r5, r0
   37b5c:	68c0      	ldr	r0, [r0, #12]
   37b5e:	b085      	sub	sp, #20
   37b60:	b9a8      	cbnz	r0, 37b8e <datagram_handler_flush+0x36>
   37b62:	e01a      	b.n	37b9a <datagram_handler_flush+0x42>
   37b64:	68e8      	ldr	r0, [r5, #12]
   37b66:	f7fc fad3 	bl	34110 <linked_list_pop>
   37b6a:	4604      	mov	r4, r0
   37b6c:	b170      	cbz	r0, 37b8c <datagram_handler_flush+0x34>
   37b6e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   37b72:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   37b76:	e9cd 0100 	strd	r0, r1, [sp]
   37b7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   37b7e:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   37b82:	4668      	mov	r0, sp
   37b84:	4798      	blx	r3
   37b86:	4620      	mov	r0, r4
   37b88:	f7f8 fefe 	bl	30988 <nrf_free>
   37b8c:	68e8      	ldr	r0, [r5, #12]
   37b8e:	f7fc facf 	bl	34130 <linked_list_size_get>
   37b92:	2800      	cmp	r0, #0
   37b94:	d1e6      	bne.n	37b64 <datagram_handler_flush+0xc>
   37b96:	b005      	add	sp, #20
   37b98:	bd30      	pop	{r4, r5, pc}
   37b9a:	2008      	movs	r0, #8
   37b9c:	b005      	add	sp, #20
   37b9e:	bd30      	pop	{r4, r5, pc}

00037ba0 <datagram_handler_free>:
   37ba0:	b530      	push	{r4, r5, lr}
   37ba2:	4605      	mov	r5, r0
   37ba4:	68c0      	ldr	r0, [r0, #12]
   37ba6:	b085      	sub	sp, #20
   37ba8:	b9a0      	cbnz	r0, 37bd4 <datagram_handler_free+0x34>
   37baa:	e01c      	b.n	37be6 <datagram_handler_free+0x46>
   37bac:	f7fc fab0 	bl	34110 <linked_list_pop>
   37bb0:	4604      	mov	r4, r0
   37bb2:	b170      	cbz	r0, 37bd2 <datagram_handler_free+0x32>
   37bb4:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   37bb8:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   37bbc:	e9cd 0100 	strd	r0, r1, [sp]
   37bc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   37bc4:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   37bc8:	4668      	mov	r0, sp
   37bca:	4798      	blx	r3
   37bcc:	4620      	mov	r0, r4
   37bce:	f7f8 fedb 	bl	30988 <nrf_free>
   37bd2:	68e8      	ldr	r0, [r5, #12]
   37bd4:	f7fc faac 	bl	34130 <linked_list_size_get>
   37bd8:	4604      	mov	r4, r0
   37bda:	68e8      	ldr	r0, [r5, #12]
   37bdc:	2c00      	cmp	r4, #0
   37bde:	d1e5      	bne.n	37bac <datagram_handler_free+0xc>
   37be0:	f7f8 fed2 	bl	30988 <nrf_free>
   37be4:	60ec      	str	r4, [r5, #12]
   37be6:	b005      	add	sp, #20
   37be8:	bd30      	pop	{r4, r5, pc}
   37bea:	bf00      	nop

00037bec <null_handler_init>:
   37bec:	2000      	movs	r0, #0
   37bee:	4770      	bx	lr

00037bf0 <null_handler_put>:
   37bf0:	b510      	push	{r4, lr}
   37bf2:	460c      	mov	r4, r1
   37bf4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   37bf8:	4620      	mov	r0, r4
   37bfa:	4798      	blx	r3
   37bfc:	6860      	ldr	r0, [r4, #4]
   37bfe:	bd10      	pop	{r4, pc}

00037c00 <null_handler_get>:
   37c00:	f04f 30ff 	mov.w	r0, #4294967295
   37c04:	4770      	bx	lr
   37c06:	bf00      	nop

00037c08 <null_handler_available>:
   37c08:	f04f 30ff 	mov.w	r0, #4294967295
   37c0c:	4770      	bx	lr
   37c0e:	bf00      	nop

00037c10 <null_handler_flush>:
   37c10:	2000      	movs	r0, #0
   37c12:	4770      	bx	lr

00037c14 <null_handler_free>:
   37c14:	4770      	bx	lr
   37c16:	bf00      	nop

00037c18 <packet_handler_create>:
   37c18:	2801      	cmp	r0, #1
   37c1a:	b538      	push	{r3, r4, r5, lr}
   37c1c:	460d      	mov	r5, r1
   37c1e:	4614      	mov	r4, r2
   37c20:	d00d      	beq.n	37c3e <packet_handler_create+0x26>
   37c22:	db11      	blt.n	37c48 <packet_handler_create+0x30>
   37c24:	2803      	cmp	r0, #3
   37c26:	dc0f      	bgt.n	37c48 <packet_handler_create+0x30>
   37c28:	2010      	movs	r0, #16
   37c2a:	f7f8 fea3 	bl	30974 <nrf_malloc>
   37c2e:	2218      	movs	r2, #24
   37c30:	b120      	cbz	r0, 37c3c <packet_handler_create+0x24>
   37c32:	4b08      	ldr	r3, [pc, #32]	; (37c54 <packet_handler_create+0x3c>)
   37c34:	6045      	str	r5, [r0, #4]
   37c36:	4413      	add	r3, r2
   37c38:	6084      	str	r4, [r0, #8]
   37c3a:	6003      	str	r3, [r0, #0]
   37c3c:	bd38      	pop	{r3, r4, r5, pc}
   37c3e:	2014      	movs	r0, #20
   37c40:	f7f8 fe98 	bl	30974 <nrf_malloc>
   37c44:	2230      	movs	r2, #48	; 0x30
   37c46:	e7f3      	b.n	37c30 <packet_handler_create+0x18>
   37c48:	200c      	movs	r0, #12
   37c4a:	f7f8 fe93 	bl	30974 <nrf_malloc>
   37c4e:	2200      	movs	r2, #0
   37c50:	e7ee      	b.n	37c30 <packet_handler_create+0x18>
   37c52:	bf00      	nop
   37c54:	0004294c 	.word	0x0004294c

00037c58 <packet_handler_delete>:
   37c58:	b510      	push	{r4, lr}
   37c5a:	4604      	mov	r4, r0
   37c5c:	6803      	ldr	r3, [r0, #0]
   37c5e:	691b      	ldr	r3, [r3, #16]
   37c60:	4798      	blx	r3
   37c62:	6823      	ldr	r3, [r4, #0]
   37c64:	4620      	mov	r0, r4
   37c66:	695b      	ldr	r3, [r3, #20]
   37c68:	4798      	blx	r3
   37c6a:	4620      	mov	r0, r4
   37c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   37c70:	f7f8 be8a 	b.w	30988 <nrf_free>

00037c74 <stream_handler_init>:
   37c74:	b510      	push	{r4, lr}
   37c76:	4604      	mov	r4, r0
   37c78:	200c      	movs	r0, #12
   37c7a:	f7f8 fe7b 	bl	30974 <nrf_malloc>
   37c7e:	60e0      	str	r0, [r4, #12]
   37c80:	b128      	cbz	r0, 37c8e <stream_handler_init+0x1a>
   37c82:	2300      	movs	r3, #0
   37c84:	6123      	str	r3, [r4, #16]
   37c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   37c8a:	f7fc ba21 	b.w	340d0 <linked_list_init>
   37c8e:	2004      	movs	r0, #4
   37c90:	bd10      	pop	{r4, pc}
   37c92:	bf00      	nop

00037c94 <stream_handler_put>:
   37c94:	b570      	push	{r4, r5, r6, lr}
   37c96:	4606      	mov	r6, r0
   37c98:	2014      	movs	r0, #20
   37c9a:	460d      	mov	r5, r1
   37c9c:	f7f8 fe6a 	bl	30974 <nrf_malloc>
   37ca0:	b178      	cbz	r0, 37cc2 <stream_handler_put+0x2e>
   37ca2:	682b      	ldr	r3, [r5, #0]
   37ca4:	4604      	mov	r4, r0
   37ca6:	6043      	str	r3, [r0, #4]
   37ca8:	686b      	ldr	r3, [r5, #4]
   37caa:	4601      	mov	r1, r0
   37cac:	6083      	str	r3, [r0, #8]
   37cae:	68eb      	ldr	r3, [r5, #12]
   37cb0:	60c3      	str	r3, [r0, #12]
   37cb2:	68ab      	ldr	r3, [r5, #8]
   37cb4:	6103      	str	r3, [r0, #16]
   37cb6:	68f0      	ldr	r0, [r6, #12]
   37cb8:	f7fc fa14 	bl	340e4 <linked_list_push>
   37cbc:	b920      	cbnz	r0, 37cc8 <stream_handler_put+0x34>
   37cbe:	6868      	ldr	r0, [r5, #4]
   37cc0:	bd70      	pop	{r4, r5, r6, pc}
   37cc2:	f04f 30ff 	mov.w	r0, #4294967295
   37cc6:	bd70      	pop	{r4, r5, r6, pc}
   37cc8:	4620      	mov	r0, r4
   37cca:	f7f8 fe5d 	bl	30988 <nrf_free>
   37cce:	f04f 30ff 	mov.w	r0, #4294967295
   37cd2:	bd70      	pop	{r4, r5, r6, pc}

00037cd4 <stream_handler_get>:
   37cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37cd8:	4682      	mov	sl, r0
   37cda:	b087      	sub	sp, #28
   37cdc:	68c0      	ldr	r0, [r0, #12]
   37cde:	4689      	mov	r9, r1
   37ce0:	4693      	mov	fp, r2
   37ce2:	f7fc fa1f 	bl	34124 <linked_list_peek>
   37ce6:	2800      	cmp	r0, #0
   37ce8:	d072      	beq.n	37dd0 <stream_handler_get+0xfc>
   37cea:	4605      	mov	r5, r0
   37cec:	f8d9 0008 	ldr.w	r0, [r9, #8]
   37cf0:	b120      	cbz	r0, 37cfc <stream_handler_get+0x28>
   37cf2:	692b      	ldr	r3, [r5, #16]
   37cf4:	b113      	cbz	r3, 37cfc <stream_handler_get+0x28>
   37cf6:	68ea      	ldr	r2, [r5, #12]
   37cf8:	2a00      	cmp	r2, #0
   37cfa:	d15c      	bne.n	37db6 <stream_handler_get+0xe2>
   37cfc:	2300      	movs	r3, #0
   37cfe:	f8c9 300c 	str.w	r3, [r9, #12]
   37d02:	f8d9 2000 	ldr.w	r2, [r9]
   37d06:	f8d9 8004 	ldr.w	r8, [r9, #4]
   37d0a:	f8da 1010 	ldr.w	r1, [sl, #16]
   37d0e:	9201      	str	r2, [sp, #4]
   37d10:	f1b8 0f00 	cmp.w	r8, #0
   37d14:	d05a      	beq.n	37dcc <stream_handler_get+0xf8>
   37d16:	f00b 0308 	and.w	r3, fp, #8
   37d1a:	2400      	movs	r4, #0
   37d1c:	9300      	str	r3, [sp, #0]
   37d1e:	e010      	b.n	37d42 <stream_handler_get+0x6e>
   37d20:	f8da 3010 	ldr.w	r3, [sl, #16]
   37d24:	443b      	add	r3, r7
   37d26:	f8ca 3010 	str.w	r3, [sl, #16]
   37d2a:	4628      	mov	r0, r5
   37d2c:	f7fc fa02 	bl	34134 <linked_list_get_next>
   37d30:	443c      	add	r4, r7
   37d32:	4605      	mov	r5, r0
   37d34:	2800      	cmp	r0, #0
   37d36:	d038      	beq.n	37daa <stream_handler_get+0xd6>
   37d38:	45a0      	cmp	r8, r4
   37d3a:	d936      	bls.n	37daa <stream_handler_get+0xd6>
   37d3c:	2100      	movs	r1, #0
   37d3e:	f8d9 2000 	ldr.w	r2, [r9]
   37d42:	68ae      	ldr	r6, [r5, #8]
   37d44:	eba8 0b04 	sub.w	fp, r8, r4
   37d48:	1a76      	subs	r6, r6, r1
   37d4a:	455e      	cmp	r6, fp
   37d4c:	4637      	mov	r7, r6
   37d4e:	bf28      	it	cs
   37d50:	465f      	movcs	r7, fp
   37d52:	b132      	cbz	r2, 37d62 <stream_handler_get+0x8e>
   37d54:	6868      	ldr	r0, [r5, #4]
   37d56:	9b01      	ldr	r3, [sp, #4]
   37d58:	4401      	add	r1, r0
   37d5a:	463a      	mov	r2, r7
   37d5c:	1918      	adds	r0, r3, r4
   37d5e:	f008 fc5d 	bl	4061c <memcpy>
   37d62:	9b00      	ldr	r3, [sp, #0]
   37d64:	2b00      	cmp	r3, #0
   37d66:	d1e0      	bne.n	37d2a <stream_handler_get+0x56>
   37d68:	455e      	cmp	r6, fp
   37d6a:	d8d9      	bhi.n	37d20 <stream_handler_get+0x4c>
   37d6c:	f8da 000c 	ldr.w	r0, [sl, #12]
   37d70:	f7fc f9ce 	bl	34110 <linked_list_pop>
   37d74:	4606      	mov	r6, r0
   37d76:	b170      	cbz	r0, 37d96 <stream_handler_get+0xc2>
   37d78:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   37d7c:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   37d80:	e9cd 2302 	strd	r2, r3, [sp, #8]
   37d84:	e9cd 1004 	strd	r1, r0, [sp, #16]
   37d88:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   37d8c:	a802      	add	r0, sp, #8
   37d8e:	4798      	blx	r3
   37d90:	4630      	mov	r0, r6
   37d92:	f7f8 fdf9 	bl	30988 <nrf_free>
   37d96:	2300      	movs	r3, #0
   37d98:	4628      	mov	r0, r5
   37d9a:	f8ca 3010 	str.w	r3, [sl, #16]
   37d9e:	f7fc f9c9 	bl	34134 <linked_list_get_next>
   37da2:	443c      	add	r4, r7
   37da4:	4605      	mov	r5, r0
   37da6:	2800      	cmp	r0, #0
   37da8:	d1c6      	bne.n	37d38 <stream_handler_get+0x64>
   37daa:	4620      	mov	r0, r4
   37dac:	f8c9 4004 	str.w	r4, [r9, #4]
   37db0:	b007      	add	sp, #28
   37db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37db6:	f8d9 300c 	ldr.w	r3, [r9, #12]
   37dba:	429a      	cmp	r2, r3
   37dbc:	bf28      	it	cs
   37dbe:	461a      	movcs	r2, r3
   37dc0:	f8c9 200c 	str.w	r2, [r9, #12]
   37dc4:	6929      	ldr	r1, [r5, #16]
   37dc6:	f008 fc29 	bl	4061c <memcpy>
   37dca:	e79a      	b.n	37d02 <stream_handler_get+0x2e>
   37dcc:	4644      	mov	r4, r8
   37dce:	e7ec      	b.n	37daa <stream_handler_get+0xd6>
   37dd0:	f04f 30ff 	mov.w	r0, #4294967295
   37dd4:	e7ec      	b.n	37db0 <stream_handler_get+0xdc>
   37dd6:	bf00      	nop

00037dd8 <stream_handler_available>:
   37dd8:	b510      	push	{r4, lr}
   37dda:	4604      	mov	r4, r0
   37ddc:	68c0      	ldr	r0, [r0, #12]
   37dde:	f7fc f9a1 	bl	34124 <linked_list_peek>
   37de2:	b150      	cbz	r0, 37dfa <stream_handler_available+0x22>
   37de4:	6924      	ldr	r4, [r4, #16]
   37de6:	4264      	negs	r4, r4
   37de8:	6883      	ldr	r3, [r0, #8]
   37dea:	441c      	add	r4, r3
   37dec:	f7fc f9a2 	bl	34134 <linked_list_get_next>
   37df0:	2800      	cmp	r0, #0
   37df2:	d1f9      	bne.n	37de8 <stream_handler_available+0x10>
   37df4:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   37df8:	bd10      	pop	{r4, pc}
   37dfa:	f04f 30ff 	mov.w	r0, #4294967295
   37dfe:	bd10      	pop	{r4, pc}

00037e00 <stream_handler_flush>:
   37e00:	b530      	push	{r4, r5, lr}
   37e02:	4605      	mov	r5, r0
   37e04:	68c0      	ldr	r0, [r0, #12]
   37e06:	b085      	sub	sp, #20
   37e08:	b9a8      	cbnz	r0, 37e36 <stream_handler_flush+0x36>
   37e0a:	e01a      	b.n	37e42 <stream_handler_flush+0x42>
   37e0c:	68e8      	ldr	r0, [r5, #12]
   37e0e:	f7fc f97f 	bl	34110 <linked_list_pop>
   37e12:	4604      	mov	r4, r0
   37e14:	b170      	cbz	r0, 37e34 <stream_handler_flush+0x34>
   37e16:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   37e1a:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   37e1e:	e9cd 0100 	strd	r0, r1, [sp]
   37e22:	e9cd 2302 	strd	r2, r3, [sp, #8]
   37e26:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   37e2a:	4668      	mov	r0, sp
   37e2c:	4798      	blx	r3
   37e2e:	4620      	mov	r0, r4
   37e30:	f7f8 fdaa 	bl	30988 <nrf_free>
   37e34:	68e8      	ldr	r0, [r5, #12]
   37e36:	f7fc f97b 	bl	34130 <linked_list_size_get>
   37e3a:	2800      	cmp	r0, #0
   37e3c:	d1e6      	bne.n	37e0c <stream_handler_flush+0xc>
   37e3e:	b005      	add	sp, #20
   37e40:	bd30      	pop	{r4, r5, pc}
   37e42:	2008      	movs	r0, #8
   37e44:	b005      	add	sp, #20
   37e46:	bd30      	pop	{r4, r5, pc}

00037e48 <stream_handler_free>:
   37e48:	b530      	push	{r4, r5, lr}
   37e4a:	4605      	mov	r5, r0
   37e4c:	68c0      	ldr	r0, [r0, #12]
   37e4e:	b085      	sub	sp, #20
   37e50:	b9a0      	cbnz	r0, 37e7c <stream_handler_free+0x34>
   37e52:	e01c      	b.n	37e8e <stream_handler_free+0x46>
   37e54:	f7fc f95c 	bl	34110 <linked_list_pop>
   37e58:	4604      	mov	r4, r0
   37e5a:	b170      	cbz	r0, 37e7a <stream_handler_free+0x32>
   37e5c:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   37e60:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   37e64:	e9cd 0100 	strd	r0, r1, [sp]
   37e68:	e9cd 2302 	strd	r2, r3, [sp, #8]
   37e6c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   37e70:	4668      	mov	r0, sp
   37e72:	4798      	blx	r3
   37e74:	4620      	mov	r0, r4
   37e76:	f7f8 fd87 	bl	30988 <nrf_free>
   37e7a:	68e8      	ldr	r0, [r5, #12]
   37e7c:	f7fc f958 	bl	34130 <linked_list_size_get>
   37e80:	4604      	mov	r4, r0
   37e82:	68e8      	ldr	r0, [r5, #12]
   37e84:	2c00      	cmp	r4, #0
   37e86:	d1e5      	bne.n	37e54 <stream_handler_free+0xc>
   37e88:	f7f8 fd7e 	bl	30988 <nrf_free>
   37e8c:	60ec      	str	r4, [r5, #12]
   37e8e:	b005      	add	sp, #20
   37e90:	bd30      	pop	{r4, r5, pc}
   37e92:	bf00      	nop

00037e94 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   37e94:	4a07      	ldr	r2, [pc, #28]	; (37eb4 <SystemInit+0x20>)
   37e96:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   37e9a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   37e9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   37ea2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   37ea6:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   37eaa:	4b03      	ldr	r3, [pc, #12]	; (37eb8 <SystemInit+0x24>)
   37eac:	4a03      	ldr	r2, [pc, #12]	; (37ebc <SystemInit+0x28>)
   37eae:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   37eb0:	4770      	bx	lr
   37eb2:	bf00      	nop
   37eb4:	e000ed00 	.word	0xe000ed00
   37eb8:	200320f4 	.word	0x200320f4
   37ebc:	03d09000 	.word	0x03d09000

00037ec0 <nvmc_word_write>:
}

#if defined(NVMC_READYNEXT_READYNEXT_Msk)
NRF_STATIC_INLINE bool nrf_nvmc_write_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   37ec0:	4a04      	ldr	r2, [pc, #16]	; (37ed4 <nvmc_word_write+0x14>)
   37ec2:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   37ec6:	07db      	lsls	r3, r3, #31
   37ec8:	d5fb      	bpl.n	37ec2 <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   37eca:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   37ecc:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   37ed0:	4770      	bx	lr
   37ed2:	bf00      	nop
   37ed4:	40039000 	.word	0x40039000

00037ed8 <nrfx_nvmc_page_erase>:
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   37ed8:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   37edc:	b508      	push	{r3, lr}
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   37ede:	d305      	bcc.n	37eec <nrfx_nvmc_page_erase+0x14>
   37ee0:	4b0d      	ldr	r3, [pc, #52]	; (37f18 <nrfx_nvmc_page_erase+0x40>)
   37ee2:	4a0e      	ldr	r2, [pc, #56]	; (37f1c <nrfx_nvmc_page_erase+0x44>)
   37ee4:	21dd      	movs	r1, #221	; 0xdd
   37ee6:	480e      	ldr	r0, [pc, #56]	; (37f20 <nrfx_nvmc_page_erase+0x48>)
   37ee8:	f003 fbb8 	bl	3b65c <__assert_func>
    return !(addr % flash_page_size_get());
   37eec:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   37ef0:	b97b      	cbnz	r3, 37f12 <nrfx_nvmc_page_erase+0x3a>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   37ef2:	2202      	movs	r2, #2
   37ef4:	4b0b      	ldr	r3, [pc, #44]	; (37f24 <nrfx_nvmc_page_erase+0x4c>)
   37ef6:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   37efa:	f04f 32ff 	mov.w	r2, #4294967295
   37efe:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   37f00:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   37f04:	07d2      	lsls	r2, r2, #31
   37f06:	d5fb      	bpl.n	37f00 <nrfx_nvmc_page_erase+0x28>
    p_reg->CONFIGNS = (uint32_t)mode;
   37f08:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   37f0a:	4807      	ldr	r0, [pc, #28]	; (37f28 <nrfx_nvmc_page_erase+0x50>)
   37f0c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   37f10:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   37f12:	4806      	ldr	r0, [pc, #24]	; (37f2c <nrfx_nvmc_page_erase+0x54>)
   37f14:	e7fc      	b.n	37f10 <nrfx_nvmc_page_erase+0x38>
   37f16:	bf00      	nop
   37f18:	00048900 	.word	0x00048900
   37f1c:	000488d6 	.word	0x000488d6
   37f20:	0004896d 	.word	0x0004896d
   37f24:	40039000 	.word	0x40039000
   37f28:	0bad0000 	.word	0x0bad0000
   37f2c:	0bad000a 	.word	0x0bad000a

00037f30 <nrfx_nvmc_word_write>:
    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, &value, 1));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   37f30:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   37f34:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   37f36:	d306      	bcc.n	37f46 <nrfx_nvmc_word_write+0x16>
   37f38:	f240 114d 	movw	r1, #333	; 0x14d
   37f3c:	4b0a      	ldr	r3, [pc, #40]	; (37f68 <nrfx_nvmc_word_write+0x38>)
   37f3e:	4a0b      	ldr	r2, [pc, #44]	; (37f6c <nrfx_nvmc_word_write+0x3c>)
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   37f40:	480b      	ldr	r0, [pc, #44]	; (37f70 <nrfx_nvmc_word_write+0x40>)
   37f42:	f003 fb8b 	bl	3b65c <__assert_func>
   37f46:	f010 0403 	ands.w	r4, r0, #3
   37f4a:	d004      	beq.n	37f56 <nrfx_nvmc_word_write+0x26>
   37f4c:	4b09      	ldr	r3, [pc, #36]	; (37f74 <nrfx_nvmc_word_write+0x44>)
   37f4e:	4a07      	ldr	r2, [pc, #28]	; (37f6c <nrfx_nvmc_word_write+0x3c>)
   37f50:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   37f54:	e7f4      	b.n	37f40 <nrfx_nvmc_word_write+0x10>
   37f56:	2301      	movs	r3, #1
   37f58:	4d07      	ldr	r5, [pc, #28]	; (37f78 <nrfx_nvmc_word_write+0x48>)
   37f5a:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   37f5e:	f7ff ffaf 	bl	37ec0 <nvmc_word_write>
   37f62:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   37f66:	bd38      	pop	{r3, r4, r5, pc}
   37f68:	00048900 	.word	0x00048900
   37f6c:	000488eb 	.word	0x000488eb
   37f70:	0004896d 	.word	0x0004896d
   37f74:	00048924 	.word	0x00048924
   37f78:	40039000 	.word	0x40039000

00037f7c <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   37f7c:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   37f7e:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   37f80:	4b08      	ldr	r3, [pc, #32]	; (37fa4 <z_sys_device_do_config_level+0x28>)
   37f82:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   37f86:	3001      	adds	r0, #1
   37f88:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   37f8c:	42a5      	cmp	r5, r4
   37f8e:	d800      	bhi.n	37f92 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   37f90:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   37f92:	6823      	ldr	r3, [r4, #0]
   37f94:	4620      	mov	r0, r4
   37f96:	685b      	ldr	r3, [r3, #4]
   37f98:	4798      	blx	r3
		if (retval != 0) {
   37f9a:	b100      	cbz	r0, 37f9e <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   37f9c:	6066      	str	r6, [r4, #4]
								info++) {
   37f9e:	340c      	adds	r4, #12
   37fa0:	e7f4      	b.n	37f8c <z_sys_device_do_config_level+0x10>
   37fa2:	bf00      	nop
   37fa4:	00042994 	.word	0x00042994

00037fa8 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   37fa8:	4b10      	ldr	r3, [pc, #64]	; (37fec <z_impl_device_get_binding+0x44>)
{
   37faa:	b570      	push	{r4, r5, r6, lr}
   37fac:	4605      	mov	r5, r0
   37fae:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   37fb0:	4c0f      	ldr	r4, [pc, #60]	; (37ff0 <z_impl_device_get_binding+0x48>)
   37fb2:	429c      	cmp	r4, r3
   37fb4:	d104      	bne.n	37fc0 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   37fb6:	4c0e      	ldr	r4, [pc, #56]	; (37ff0 <z_impl_device_get_binding+0x48>)
   37fb8:	42b4      	cmp	r4, r6
   37fba:	d109      	bne.n	37fd0 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   37fbc:	2400      	movs	r4, #0
   37fbe:	e012      	b.n	37fe6 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   37fc0:	6862      	ldr	r2, [r4, #4]
   37fc2:	b11a      	cbz	r2, 37fcc <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   37fc4:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   37fc6:	6812      	ldr	r2, [r2, #0]
   37fc8:	42aa      	cmp	r2, r5
   37fca:	d00c      	beq.n	37fe6 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   37fcc:	340c      	adds	r4, #12
   37fce:	e7f0      	b.n	37fb2 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   37fd0:	6863      	ldr	r3, [r4, #4]
   37fd2:	b90b      	cbnz	r3, 37fd8 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   37fd4:	340c      	adds	r4, #12
   37fd6:	e7ef      	b.n	37fb8 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   37fd8:	6823      	ldr	r3, [r4, #0]
   37fda:	4628      	mov	r0, r5
   37fdc:	6819      	ldr	r1, [r3, #0]
   37fde:	f7e5 f897 	bl	1d110 <strcmp>
   37fe2:	2800      	cmp	r0, #0
   37fe4:	d1f6      	bne.n	37fd4 <z_impl_device_get_binding+0x2c>
}
   37fe6:	4620      	mov	r0, r4
   37fe8:	bd70      	pop	{r4, r5, r6, pc}
   37fea:	bf00      	nop
   37fec:	200323f0 	.word	0x200323f0
   37ff0:	200322dc 	.word	0x200322dc

00037ff4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   37ff4:	4b01      	ldr	r3, [pc, #4]	; (37ffc <z_impl_z_errno+0x8>)
   37ff6:	6898      	ldr	r0, [r3, #8]
}
   37ff8:	3054      	adds	r0, #84	; 0x54
   37ffa:	4770      	bx	lr
   37ffc:	2002926c 	.word	0x2002926c

00038000 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   38000:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   38004:	4605      	mov	r5, r0
   38006:	4688      	mov	r8, r1
	return z_impl_k_current_get();
   38008:	f002 f8ca 	bl	3a1a0 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   3800c:	2301      	movs	r3, #1
   3800e:	4606      	mov	r6, r0
   38010:	f04f 0000 	mov.w	r0, #0
   38014:	2200      	movs	r2, #0
   38016:	f363 0007 	bfi	r0, r3, #0, #8
   3801a:	4c2b      	ldr	r4, [pc, #172]	; (380c8 <z_fatal_error+0xc8>)
   3801c:	4b2b      	ldr	r3, [pc, #172]	; (380cc <z_fatal_error+0xcc>)
   3801e:	2d04      	cmp	r5, #4
   38020:	eba4 0403 	sub.w	r4, r4, r3
   38024:	bf98      	it	ls
   38026:	4b2a      	ldrls	r3, [pc, #168]	; (380d0 <z_fatal_error+0xd0>)
   38028:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   3802c:	bf94      	ite	ls
   3802e:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   38032:	4b28      	ldrhi	r3, [pc, #160]	; (380d4 <z_fatal_error+0xd4>)
   38034:	9200      	str	r2, [sp, #0]
   38036:	f364 108f 	bfi	r0, r4, #6, #10
   3803a:	462a      	mov	r2, r5
   3803c:	4926      	ldr	r1, [pc, #152]	; (380d8 <z_fatal_error+0xd8>)
   3803e:	f005 ff90 	bl	3df62 <log_string_sync>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   38042:	f8d8 301c 	ldr.w	r3, [r8, #28]
   38046:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   3804a:	b14b      	cbz	r3, 38060 <z_fatal_error+0x60>
		LOG_ERR("Fault during interrupt handling\n");
   3804c:	f04f 0000 	mov.w	r0, #0
   38050:	2301      	movs	r3, #1
   38052:	f363 0007 	bfi	r0, r3, #0, #8
   38056:	f364 108f 	bfi	r0, r4, #6, #10
   3805a:	4920      	ldr	r1, [pc, #128]	; (380dc <z_fatal_error+0xdc>)
   3805c:	f005 ff81 	bl	3df62 <log_string_sync>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   38060:	f04f 0700 	mov.w	r7, #0
   38064:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
   38066:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   38068:	f363 0707 	bfi	r7, r3, #0, #8
   3806c:	f364 178f 	bfi	r7, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   38070:	f008 f9cb 	bl	4040a <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   38074:	b328      	cbz	r0, 380c2 <z_fatal_error+0xc2>
   38076:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   38078:	4b19      	ldr	r3, [pc, #100]	; (380e0 <z_fatal_error+0xe0>)
   3807a:	2a00      	cmp	r2, #0
   3807c:	bf08      	it	eq
   3807e:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   38080:	f005 ff81 	bl	3df86 <log_strdup>
   38084:	4632      	mov	r2, r6
   38086:	4603      	mov	r3, r0
   38088:	4916      	ldr	r1, [pc, #88]	; (380e4 <z_fatal_error+0xe4>)
   3808a:	4638      	mov	r0, r7
   3808c:	f005 ff69 	bl	3df62 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   38090:	4641      	mov	r1, r8
   38092:	4628      	mov	r0, r5
   38094:	f7e8 fd9c 	bl	20bd0 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   38098:	2d04      	cmp	r5, #4
   3809a:	d10c      	bne.n	380b6 <z_fatal_error+0xb6>
   3809c:	4912      	ldr	r1, [pc, #72]	; (380e8 <z_fatal_error+0xe8>)
   3809e:	2387      	movs	r3, #135	; 0x87
   380a0:	4a12      	ldr	r2, [pc, #72]	; (380ec <z_fatal_error+0xec>)
   380a2:	4813      	ldr	r0, [pc, #76]	; (380f0 <z_fatal_error+0xf0>)
   380a4:	f005 fef9 	bl	3de9a <printk>
   380a8:	4812      	ldr	r0, [pc, #72]	; (380f4 <z_fatal_error+0xf4>)
   380aa:	f005 fef6 	bl	3de9a <printk>
   380ae:	2187      	movs	r1, #135	; 0x87
   380b0:	480e      	ldr	r0, [pc, #56]	; (380ec <z_fatal_error+0xec>)
   380b2:	f005 ff45 	bl	3df40 <assert_post_action>
	z_impl_k_thread_abort(thread);
   380b6:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   380b8:	b002      	add	sp, #8
   380ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   380be:	f7ec be0f 	b.w	24ce0 <z_impl_k_thread_abort>
		thread_name = "unknown";
   380c2:	4807      	ldr	r0, [pc, #28]	; (380e0 <z_fatal_error+0xe0>)
   380c4:	e7dc      	b.n	38080 <z_fatal_error+0x80>
   380c6:	bf00      	nop
   380c8:	00041d2c 	.word	0x00041d2c
   380cc:	00041c2c 	.word	0x00041c2c
   380d0:	000429ac 	.word	0x000429ac
   380d4:	000489f3 	.word	0x000489f3
   380d8:	00048a09 	.word	0x00048a09
   380dc:	00048a31 	.word	0x00048a31
   380e0:	00048a01 	.word	0x00048a01
   380e4:	00048a52 	.word	0x00048a52
   380e8:	00048a8c 	.word	0x00048a8c
   380ec:	00048a6a 	.word	0x00048a6a
   380f0:	00043278 	.word	0x00043278
   380f4:	00048aa9 	.word	0x00048aa9

000380f8 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   380f8:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   380fa:	4d0b      	ldr	r5, [pc, #44]	; (38128 <idle+0x30>)
	__asm__ volatile(
   380fc:	f04f 0220 	mov.w	r2, #32
   38100:	f3ef 8311 	mrs	r3, BASEPRI
   38104:	f382 8811 	msr	BASEPRI, r2
   38108:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   3810c:	f002 fdbc 	bl	3ac88 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   38110:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   38112:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   38114:	2802      	cmp	r0, #2
   38116:	bfd8      	it	le
   38118:	4608      	movle	r0, r1
   3811a:	f002 fdfd 	bl	3ad18 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   3811e:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   38120:	f7ec f8f0 	bl	24304 <arch_cpu_idle>
   38124:	e7ea      	b.n	380fc <idle+0x4>
   38126:	bf00      	nop
   38128:	2002926c 	.word	0x2002926c

0003812c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   3812c:	4802      	ldr	r0, [pc, #8]	; (38138 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   3812e:	4a03      	ldr	r2, [pc, #12]	; (3813c <z_bss_zero+0x10>)
   38130:	2100      	movs	r1, #0
   38132:	1a12      	subs	r2, r2, r0
   38134:	f008 ba92 	b.w	4065c <memset>
   38138:	20020000 	.word	0x20020000
   3813c:	2002be9c 	.word	0x2002be9c

00038140 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   38140:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   38142:	4806      	ldr	r0, [pc, #24]	; (3815c <z_data_copy+0x1c>)
   38144:	4a06      	ldr	r2, [pc, #24]	; (38160 <z_data_copy+0x20>)
   38146:	4907      	ldr	r1, [pc, #28]	; (38164 <z_data_copy+0x24>)
   38148:	1a12      	subs	r2, r2, r0
   3814a:	f008 fa67 	bl	4061c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   3814e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   38152:	4a05      	ldr	r2, [pc, #20]	; (38168 <z_data_copy+0x28>)
   38154:	4905      	ldr	r1, [pc, #20]	; (3816c <z_data_copy+0x2c>)
   38156:	4806      	ldr	r0, [pc, #24]	; (38170 <z_data_copy+0x30>)
   38158:	f008 ba60 	b.w	4061c <memcpy>
   3815c:	20031b20 	.word	0x20031b20
   38160:	2003253c 	.word	0x2003253c
   38164:	000492e0 	.word	0x000492e0
   38168:	00000000 	.word	0x00000000
   3816c:	000492e0 	.word	0x000492e0
   38170:	20020000 	.word	0x20020000

00038174 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   38174:	2201      	movs	r2, #1
{
   38176:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   38178:	4b0b      	ldr	r3, [pc, #44]	; (381a8 <bg_thread_main+0x34>)

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   3817a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   3817c:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   3817e:	f7ff fefd 	bl	37f7c <z_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   38182:	4a0a      	ldr	r2, [pc, #40]	; (381ac <bg_thread_main+0x38>)
   38184:	490a      	ldr	r1, [pc, #40]	; (381b0 <bg_thread_main+0x3c>)
   38186:	480b      	ldr	r0, [pc, #44]	; (381b4 <bg_thread_main+0x40>)
   38188:	f005 fe87 	bl	3de9a <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   3818c:	2003      	movs	r0, #3
   3818e:	f7ff fef5 	bl	37f7c <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   38192:	f002 f9db 	bl	3a54c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   38196:	f7e9 fa2b 	bl	215f0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   3819a:	4a07      	ldr	r2, [pc, #28]	; (381b8 <bg_thread_main+0x44>)
   3819c:	7b13      	ldrb	r3, [r2, #12]
   3819e:	f023 0301 	bic.w	r3, r3, #1
   381a2:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   381a4:	bd08      	pop	{r3, pc}
   381a6:	bf00      	nop
   381a8:	2002bd44 	.word	0x2002bd44
   381ac:	00044d14 	.word	0x00044d14
   381b0:	00048ade 	.word	0x00048ade
   381b4:	00048afc 	.word	0x00048afc
   381b8:	2002514c 	.word	0x2002514c

000381bc <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   381bc:	b580      	push	{r7, lr}
   381be:	b0b2      	sub	sp, #200	; 0xc8
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   381c0:	f7ea ff70 	bl	230a4 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   381c4:	4b35      	ldr	r3, [pc, #212]	; (3829c <z_cstart+0xe0>)
   381c6:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   381ca:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   381ce:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   381d2:	2400      	movs	r4, #0
   381d4:	23e0      	movs	r3, #224	; 0xe0
   381d6:	4d32      	ldr	r5, [pc, #200]	; (382a0 <z_cstart+0xe4>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   381d8:	2701      	movs	r7, #1
   381da:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   381de:	77ec      	strb	r4, [r5, #31]
   381e0:	762c      	strb	r4, [r5, #24]
   381e2:	766c      	strb	r4, [r5, #25]
   381e4:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   381e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   381e8:	4e2e      	ldr	r6, [pc, #184]	; (382a4 <z_cstart+0xe8>)
   381ea:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   381ee:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   381f0:	f7ec fd4c 	bl	24c8c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   381f4:	f7ec f880 	bl	242f8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   381f8:	f04f 33ff 	mov.w	r3, #4294967295
   381fc:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   381fe:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   38200:	ab06      	add	r3, sp, #24
   38202:	22b0      	movs	r2, #176	; 0xb0
   38204:	4621      	mov	r1, r4
   38206:	4618      	mov	r0, r3
   38208:	f008 fa28 	bl	4065c <memset>
	_current = &dummy_thread;
   3820c:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   3820e:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   38210:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   38214:	f7ff feb2 	bl	37f7c <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   38218:	4638      	mov	r0, r7
   3821a:	f7ff feaf 	bl	37f7c <z_sys_device_do_config_level>
	_kernel.ready_q.cache = &z_main_thread;
   3821e:	4d22      	ldr	r5, [pc, #136]	; (382a8 <z_cstart+0xec>)
	z_sched_init();
   38220:	f001 fe34 	bl	39e8c <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   38224:	4b21      	ldr	r3, [pc, #132]	; (382ac <z_cstart+0xf0>)
   38226:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   3822a:	e9cd 7304 	strd	r7, r3, [sp, #16]
   3822e:	e9cd 4402 	strd	r4, r4, [sp, #8]
   38232:	4b1f      	ldr	r3, [pc, #124]	; (382b0 <z_cstart+0xf4>)
   38234:	e9cd 4400 	strd	r4, r4, [sp]
   38238:	491e      	ldr	r1, [pc, #120]	; (382b4 <z_cstart+0xf8>)
   3823a:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   3823c:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   3823e:	f002 f89b 	bl	3a378 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   38242:	7b6b      	ldrb	r3, [r5, #13]
   38244:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   38248:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3824c:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3824e:	d104      	bne.n	3825a <z_cstart+0x9e>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   38250:	69ab      	ldr	r3, [r5, #24]
   38252:	b913      	cbnz	r3, 3825a <z_cstart+0x9e>
		z_add_thread_to_ready_q(thread);
   38254:	4628      	mov	r0, r5
   38256:	f001 f913 	bl	39480 <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
   3825a:	4b17      	ldr	r3, [pc, #92]	; (382b8 <z_cstart+0xfc>)
   3825c:	2201      	movs	r2, #1
   3825e:	9305      	str	r3, [sp, #20]
   38260:	230f      	movs	r3, #15
   38262:	e9cd 3203 	strd	r3, r2, [sp, #12]
   38266:	2300      	movs	r3, #0
   38268:	4d14      	ldr	r5, [pc, #80]	; (382bc <z_cstart+0x100>)
   3826a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   3826e:	9300      	str	r3, [sp, #0]
   38270:	f44f 72a0 	mov.w	r2, #320	; 0x140
   38274:	4b12      	ldr	r3, [pc, #72]	; (382c0 <z_cstart+0x104>)
   38276:	4913      	ldr	r1, [pc, #76]	; (382c4 <z_cstart+0x108>)
   38278:	4628      	mov	r0, r5
   3827a:	f002 f87d 	bl	3a378 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3827e:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   38280:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   38284:	f023 0304 	bic.w	r3, r3, #4
   38288:	736b      	strb	r3, [r5, #13]
	list->head = (sys_dnode_t *)list;
   3828a:	4b0f      	ldr	r3, [pc, #60]	; (382c8 <z_cstart+0x10c>)
   3828c:	4909      	ldr	r1, [pc, #36]	; (382b4 <z_cstart+0xf8>)
	list->tail = (sys_dnode_t *)list;
   3828e:	e9c6 3306 	strd	r3, r3, [r6, #24]
   38292:	4805      	ldr	r0, [pc, #20]	; (382a8 <z_cstart+0xec>)
   38294:	4b06      	ldr	r3, [pc, #24]	; (382b0 <z_cstart+0xf4>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   38296:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   38298:	f7ec f924 	bl	244e4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   3829c:	2002f5e0 	.word	0x2002f5e0
   382a0:	e000ed00 	.word	0xe000ed00
   382a4:	2002926c 	.word	0x2002926c
   382a8:	2002514c 	.word	0x2002514c
   382ac:	00048b26 	.word	0x00048b26
   382b0:	00038175 	.word	0x00038175
   382b4:	2002d4a0 	.word	0x2002d4a0
   382b8:	00048b2b 	.word	0x00048b2b
   382bc:	2002509c 	.word	0x2002509c
   382c0:	000380f9 	.word	0x000380f9
   382c4:	2002f4a0 	.word	0x2002f4a0
   382c8:	20029284 	.word	0x20029284

000382cc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   382cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   382d0:	4d16      	ldr	r5, [pc, #88]	; (3832c <init_mem_slab_module+0x60>)
   382d2:	4c17      	ldr	r4, [pc, #92]	; (38330 <init_mem_slab_module+0x64>)
   382d4:	46a8      	mov	r8, r5
   382d6:	4e17      	ldr	r6, [pc, #92]	; (38334 <init_mem_slab_module+0x68>)
   382d8:	42ac      	cmp	r4, r5
   382da:	d90c      	bls.n	382f6 <init_mem_slab_module+0x2a>
   382dc:	4916      	ldr	r1, [pc, #88]	; (38338 <init_mem_slab_module+0x6c>)
   382de:	2342      	movs	r3, #66	; 0x42
   382e0:	4632      	mov	r2, r6
   382e2:	4816      	ldr	r0, [pc, #88]	; (3833c <init_mem_slab_module+0x70>)
   382e4:	f005 fdd9 	bl	3de9a <printk>
   382e8:	4815      	ldr	r0, [pc, #84]	; (38340 <init_mem_slab_module+0x74>)
   382ea:	f005 fdd6 	bl	3de9a <printk>
   382ee:	2142      	movs	r1, #66	; 0x42
   382f0:	4630      	mov	r0, r6
   382f2:	f005 fe25 	bl	3df40 <assert_post_action>
   382f6:	4544      	cmp	r4, r8
   382f8:	d302      	bcc.n	38300 <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   382fa:	2000      	movs	r0, #0
	return rc;
}
   382fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   38300:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   38304:	ea42 0301 	orr.w	r3, r2, r1
   38308:	f013 0303 	ands.w	r3, r3, #3
   3830c:	d10b      	bne.n	38326 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   3830e:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   38310:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   38312:	4283      	cmp	r3, r0
   38314:	d101      	bne.n	3831a <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   38316:	341c      	adds	r4, #28
   38318:	e7de      	b.n	382d8 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   3831a:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   3831c:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   3831e:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   38320:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   38322:	440a      	add	r2, r1
   38324:	e7f5      	b.n	38312 <init_mem_slab_module+0x46>
		return -EINVAL;
   38326:	f06f 0015 	mvn.w	r0, #21
	return rc;
   3832a:	e7e7      	b.n	382fc <init_mem_slab_module+0x30>
   3832c:	2003240c 	.word	0x2003240c
   38330:	200323f0 	.word	0x200323f0
   38334:	00048b30 	.word	0x00048b30
   38338:	00048b55 	.word	0x00048b55
   3833c:	00043278 	.word	0x00043278
   38340:	00048b72 	.word	0x00048b72

00038344 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   38344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38346:	4604      	mov	r4, r0
   38348:	460d      	mov	r5, r1
   3834a:	4616      	mov	r6, r2
   3834c:	f04f 0320 	mov.w	r3, #32
   38350:	f3ef 8711 	mrs	r7, BASEPRI
   38354:	f383 8811 	msr	BASEPRI, r3
   38358:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3835c:	4823      	ldr	r0, [pc, #140]	; (383ec <k_mem_slab_alloc+0xa8>)
   3835e:	f002 f823 	bl	3a3a8 <z_spin_lock_valid>
   38362:	b968      	cbnz	r0, 38380 <k_mem_slab_alloc+0x3c>
   38364:	234a      	movs	r3, #74	; 0x4a
   38366:	4a22      	ldr	r2, [pc, #136]	; (383f0 <k_mem_slab_alloc+0xac>)
   38368:	4922      	ldr	r1, [pc, #136]	; (383f4 <k_mem_slab_alloc+0xb0>)
   3836a:	4823      	ldr	r0, [pc, #140]	; (383f8 <k_mem_slab_alloc+0xb4>)
   3836c:	f005 fd95 	bl	3de9a <printk>
   38370:	491e      	ldr	r1, [pc, #120]	; (383ec <k_mem_slab_alloc+0xa8>)
   38372:	4822      	ldr	r0, [pc, #136]	; (383fc <k_mem_slab_alloc+0xb8>)
   38374:	f005 fd91 	bl	3de9a <printk>
   38378:	214a      	movs	r1, #74	; 0x4a
   3837a:	481d      	ldr	r0, [pc, #116]	; (383f0 <k_mem_slab_alloc+0xac>)
   3837c:	f005 fde0 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   38380:	481a      	ldr	r0, [pc, #104]	; (383ec <k_mem_slab_alloc+0xa8>)
   38382:	f002 f82f 	bl	3a3e4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   38386:	6963      	ldr	r3, [r4, #20]
   38388:	b1eb      	cbz	r3, 383c6 <k_mem_slab_alloc+0x82>
		/* take a free block */
		*mem = slab->free_list;
   3838a:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   3838c:	681b      	ldr	r3, [r3, #0]
   3838e:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   38390:	69a3      	ldr	r3, [r4, #24]
   38392:	3301      	adds	r3, #1
   38394:	61a3      	str	r3, [r4, #24]
		result = 0;
   38396:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38398:	4814      	ldr	r0, [pc, #80]	; (383ec <k_mem_slab_alloc+0xa8>)
   3839a:	f002 f813 	bl	3a3c4 <z_spin_unlock_valid>
   3839e:	b968      	cbnz	r0, 383bc <k_mem_slab_alloc+0x78>
   383a0:	235d      	movs	r3, #93	; 0x5d
   383a2:	4a13      	ldr	r2, [pc, #76]	; (383f0 <k_mem_slab_alloc+0xac>)
   383a4:	4916      	ldr	r1, [pc, #88]	; (38400 <k_mem_slab_alloc+0xbc>)
   383a6:	4814      	ldr	r0, [pc, #80]	; (383f8 <k_mem_slab_alloc+0xb4>)
   383a8:	f005 fd77 	bl	3de9a <printk>
   383ac:	490f      	ldr	r1, [pc, #60]	; (383ec <k_mem_slab_alloc+0xa8>)
   383ae:	4815      	ldr	r0, [pc, #84]	; (38404 <k_mem_slab_alloc+0xc0>)
   383b0:	f005 fd73 	bl	3de9a <printk>
   383b4:	215d      	movs	r1, #93	; 0x5d
   383b6:	480e      	ldr	r0, [pc, #56]	; (383f0 <k_mem_slab_alloc+0xac>)
   383b8:	f005 fdc2 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   383bc:	f387 8811 	msr	BASEPRI, r7
   383c0:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   383c4:	e010      	b.n	383e8 <k_mem_slab_alloc+0xa4>
	} else if (timeout == K_NO_WAIT) {
   383c6:	b91e      	cbnz	r6, 383d0 <k_mem_slab_alloc+0x8c>
		*mem = NULL;
   383c8:	602e      	str	r6, [r5, #0]
		result = -ENOMEM;
   383ca:	f06f 040b 	mvn.w	r4, #11
   383ce:	e7e3      	b.n	38398 <k_mem_slab_alloc+0x54>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   383d0:	4622      	mov	r2, r4
   383d2:	4633      	mov	r3, r6
   383d4:	4639      	mov	r1, r7
   383d6:	4805      	ldr	r0, [pc, #20]	; (383ec <k_mem_slab_alloc+0xa8>)
   383d8:	f001 fc0c 	bl	39bf4 <z_pend_curr>
		if (result == 0) {
   383dc:	4604      	mov	r4, r0
   383de:	b918      	cbnz	r0, 383e8 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   383e0:	4b09      	ldr	r3, [pc, #36]	; (38408 <k_mem_slab_alloc+0xc4>)
   383e2:	689b      	ldr	r3, [r3, #8]
   383e4:	695b      	ldr	r3, [r3, #20]
   383e6:	602b      	str	r3, [r5, #0]
}
   383e8:	4620      	mov	r0, r4
   383ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   383ec:	200251fc 	.word	0x200251fc
   383f0:	00043dc8 	.word	0x00043dc8
   383f4:	00043dee 	.word	0x00043dee
   383f8:	00043278 	.word	0x00043278
   383fc:	00043e03 	.word	0x00043e03
   38400:	00043e1b 	.word	0x00043e1b
   38404:	00043e32 	.word	0x00043e32
   38408:	2002926c 	.word	0x2002926c

0003840c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   3840c:	b570      	push	{r4, r5, r6, lr}
   3840e:	4604      	mov	r4, r0
   38410:	460d      	mov	r5, r1
	__asm__ volatile(
   38412:	f04f 0320 	mov.w	r3, #32
   38416:	f3ef 8611 	mrs	r6, BASEPRI
   3841a:	f383 8811 	msr	BASEPRI, r3
   3841e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38422:	4824      	ldr	r0, [pc, #144]	; (384b4 <k_mem_slab_free+0xa8>)
   38424:	f001 ffc0 	bl	3a3a8 <z_spin_lock_valid>
   38428:	b968      	cbnz	r0, 38446 <k_mem_slab_free+0x3a>
   3842a:	234a      	movs	r3, #74	; 0x4a
   3842c:	4a22      	ldr	r2, [pc, #136]	; (384b8 <k_mem_slab_free+0xac>)
   3842e:	4923      	ldr	r1, [pc, #140]	; (384bc <k_mem_slab_free+0xb0>)
   38430:	4823      	ldr	r0, [pc, #140]	; (384c0 <k_mem_slab_free+0xb4>)
   38432:	f005 fd32 	bl	3de9a <printk>
   38436:	491f      	ldr	r1, [pc, #124]	; (384b4 <k_mem_slab_free+0xa8>)
   38438:	4822      	ldr	r0, [pc, #136]	; (384c4 <k_mem_slab_free+0xb8>)
   3843a:	f005 fd2e 	bl	3de9a <printk>
   3843e:	214a      	movs	r1, #74	; 0x4a
   38440:	481d      	ldr	r0, [pc, #116]	; (384b8 <k_mem_slab_free+0xac>)
   38442:	f005 fd7d 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   38446:	481b      	ldr	r0, [pc, #108]	; (384b4 <k_mem_slab_free+0xa8>)
   38448:	f001 ffcc 	bl	3a3e4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   3844c:	4620      	mov	r0, r4
   3844e:	f001 fc8d 	bl	39d6c <z_unpend_first_thread>

	if (pending_thread != NULL) {
   38452:	b180      	cbz	r0, 38476 <k_mem_slab_free+0x6a>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   38454:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   38456:	682a      	ldr	r2, [r5, #0]
   38458:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   3845a:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3845c:	7b42      	ldrb	r2, [r0, #13]
   3845e:	06d2      	lsls	r2, r2, #27
   38460:	d103      	bne.n	3846a <k_mem_slab_free+0x5e>
	if (z_is_thread_ready(thread)) {
   38462:	6983      	ldr	r3, [r0, #24]
   38464:	b90b      	cbnz	r3, 3846a <k_mem_slab_free+0x5e>
		z_add_thread_to_ready_q(thread);
   38466:	f001 f80b 	bl	39480 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   3846a:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   3846c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   38470:	4810      	ldr	r0, [pc, #64]	; (384b4 <k_mem_slab_free+0xa8>)
   38472:	f000 be1b 	b.w	390ac <z_reschedule>
		**(char ***)mem = slab->free_list;
   38476:	682b      	ldr	r3, [r5, #0]
   38478:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3847a:	480e      	ldr	r0, [pc, #56]	; (384b4 <k_mem_slab_free+0xa8>)
   3847c:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   3847e:	682b      	ldr	r3, [r5, #0]
   38480:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   38482:	69a3      	ldr	r3, [r4, #24]
   38484:	3b01      	subs	r3, #1
   38486:	61a3      	str	r3, [r4, #24]
   38488:	f001 ff9c 	bl	3a3c4 <z_spin_unlock_valid>
   3848c:	b968      	cbnz	r0, 384aa <k_mem_slab_free+0x9e>
   3848e:	235d      	movs	r3, #93	; 0x5d
   38490:	4a09      	ldr	r2, [pc, #36]	; (384b8 <k_mem_slab_free+0xac>)
   38492:	490d      	ldr	r1, [pc, #52]	; (384c8 <k_mem_slab_free+0xbc>)
   38494:	480a      	ldr	r0, [pc, #40]	; (384c0 <k_mem_slab_free+0xb4>)
   38496:	f005 fd00 	bl	3de9a <printk>
   3849a:	4906      	ldr	r1, [pc, #24]	; (384b4 <k_mem_slab_free+0xa8>)
   3849c:	480b      	ldr	r0, [pc, #44]	; (384cc <k_mem_slab_free+0xc0>)
   3849e:	f005 fcfc 	bl	3de9a <printk>
   384a2:	215d      	movs	r1, #93	; 0x5d
   384a4:	4804      	ldr	r0, [pc, #16]	; (384b8 <k_mem_slab_free+0xac>)
   384a6:	f005 fd4b 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   384aa:	f386 8811 	msr	BASEPRI, r6
   384ae:	f3bf 8f6f 	isb	sy
}
   384b2:	bd70      	pop	{r4, r5, r6, pc}
   384b4:	200251fc 	.word	0x200251fc
   384b8:	00043dc8 	.word	0x00043dc8
   384bc:	00043dee 	.word	0x00043dee
   384c0:	00043278 	.word	0x00043278
   384c4:	00043e03 	.word	0x00043e03
   384c8:	00043e1b 	.word	0x00043e1b
   384cc:	00043e32 	.word	0x00043e32

000384d0 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   384d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   384d2:	4d10      	ldr	r5, [pc, #64]	; (38514 <init_static_pools+0x44>)
   384d4:	4c10      	ldr	r4, [pc, #64]	; (38518 <init_static_pools+0x48>)
   384d6:	462f      	mov	r7, r5
   384d8:	4e10      	ldr	r6, [pc, #64]	; (3851c <init_static_pools+0x4c>)
   384da:	42ac      	cmp	r4, r5
   384dc:	d90c      	bls.n	384f8 <init_static_pools+0x28>
   384de:	4910      	ldr	r1, [pc, #64]	; (38520 <init_static_pools+0x50>)
   384e0:	2328      	movs	r3, #40	; 0x28
   384e2:	4632      	mov	r2, r6
   384e4:	480f      	ldr	r0, [pc, #60]	; (38524 <init_static_pools+0x54>)
   384e6:	f005 fcd8 	bl	3de9a <printk>
   384ea:	480f      	ldr	r0, [pc, #60]	; (38528 <init_static_pools+0x58>)
   384ec:	f005 fcd5 	bl	3de9a <printk>
   384f0:	2128      	movs	r1, #40	; 0x28
   384f2:	4630      	mov	r0, r6
   384f4:	f005 fd24 	bl	3df40 <assert_post_action>
   384f8:	42bc      	cmp	r4, r7
   384fa:	d301      	bcc.n	38500 <init_static_pools+0x30>
		k_mem_pool_init(p);
	}

	return 0;
}
   384fc:	2000      	movs	r0, #0
   384fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   38500:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   38504:	4620      	mov	r0, r4
   38506:	e9c4 3305 	strd	r3, r3, [r4, #20]
   3850a:	f005 fa3b 	bl	3d984 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   3850e:	341c      	adds	r4, #28
   38510:	e7e3      	b.n	384da <init_static_pools+0xa>
   38512:	bf00      	nop
   38514:	20032428 	.word	0x20032428
   38518:	2003240c 	.word	0x2003240c
   3851c:	00048b91 	.word	0x00048b91
   38520:	00048bb5 	.word	0x00048bb5
   38524:	00043278 	.word	0x00043278
   38528:	00048b72 	.word	0x00048b72

0003852c <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   3852c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38530:	4607      	mov	r7, r0
   38532:	b085      	sub	sp, #20
   38534:	460d      	mov	r5, r1
   38536:	4692      	mov	sl, r2
   38538:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3853a:	f3ef 8305 	mrs	r3, IPSR
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");
   3853e:	2b00      	cmp	r3, #0
   38540:	d048      	beq.n	385d4 <k_mem_pool_alloc+0xa8>
   38542:	2c00      	cmp	r4, #0
   38544:	d139      	bne.n	385ba <k_mem_pool_alloc+0x8e>
	s64_t end = 0;
   38546:	f04f 0800 	mov.w	r8, #0
	return pool - &_k_mem_pool_list_start[0];
   3854a:	4b26      	ldr	r3, [pc, #152]	; (385e4 <k_mem_pool_alloc+0xb8>)
   3854c:	4e26      	ldr	r6, [pc, #152]	; (385e8 <k_mem_pool_alloc+0xbc>)
   3854e:	1afb      	subs	r3, r7, r3
   38550:	109b      	asrs	r3, r3, #2
   38552:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   38554:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   38558:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   3855a:	ab03      	add	r3, sp, #12
   3855c:	aa02      	add	r2, sp, #8
   3855e:	9500      	str	r5, [sp, #0]
   38560:	4651      	mov	r1, sl
   38562:	4638      	mov	r0, r7
   38564:	f005 fa54 	bl	3da10 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   38568:	796b      	ldrb	r3, [r5, #5]
   3856a:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   3856c:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   3856e:	f362 0303 	bfi	r3, r2, #0, #4
   38572:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   38574:	686b      	ldr	r3, [r5, #4]
   38576:	9a03      	ldr	r2, [sp, #12]
   38578:	f362 331f 	bfi	r3, r2, #12, #20
   3857c:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   3857e:	b1c8      	cbz	r0, 385b4 <k_mem_pool_alloc+0x88>
   38580:	b1c4      	cbz	r4, 385b4 <k_mem_pool_alloc+0x88>
   38582:	f110 0f0c 	cmn.w	r0, #12
   38586:	d115      	bne.n	385b4 <k_mem_pool_alloc+0x88>
	__asm__ volatile(
   38588:	f04f 0320 	mov.w	r3, #32
   3858c:	f3ef 8011 	mrs	r0, BASEPRI
   38590:	f383 8811 	msr	BASEPRI, r3
   38594:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   38598:	4622      	mov	r2, r4
   3859a:	4659      	mov	r1, fp
   3859c:	f001 fad0 	bl	39b40 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   385a0:	1c63      	adds	r3, r4, #1
   385a2:	d0da      	beq.n	3855a <k_mem_pool_alloc+0x2e>
	return z_impl_k_uptime_get();
   385a4:	f007 ffb4 	bl	40510 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   385a8:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   385ac:	2c00      	cmp	r4, #0
   385ae:	dcd4      	bgt.n	3855a <k_mem_pool_alloc+0x2e>
				break;
			}
		}
	}

	return -EAGAIN;
   385b0:	f06f 000a 	mvn.w	r0, #10
}
   385b4:	b005      	add	sp, #20
   385b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");
   385ba:	490c      	ldr	r1, [pc, #48]	; (385ec <k_mem_pool_alloc+0xc0>)
   385bc:	2337      	movs	r3, #55	; 0x37
   385be:	4a0c      	ldr	r2, [pc, #48]	; (385f0 <k_mem_pool_alloc+0xc4>)
   385c0:	480c      	ldr	r0, [pc, #48]	; (385f4 <k_mem_pool_alloc+0xc8>)
   385c2:	f005 fc6a 	bl	3de9a <printk>
   385c6:	480c      	ldr	r0, [pc, #48]	; (385f8 <k_mem_pool_alloc+0xcc>)
   385c8:	f005 fc67 	bl	3de9a <printk>
   385cc:	2137      	movs	r1, #55	; 0x37
   385ce:	4808      	ldr	r0, [pc, #32]	; (385f0 <k_mem_pool_alloc+0xc4>)
   385d0:	f005 fcb6 	bl	3df40 <assert_post_action>
	if (timeout > 0) {
   385d4:	2c00      	cmp	r4, #0
   385d6:	ddb6      	ble.n	38546 <k_mem_pool_alloc+0x1a>
   385d8:	f007 ff9a 	bl	40510 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   385dc:	eb10 0804 	adds.w	r8, r0, r4
   385e0:	e7b3      	b.n	3854a <k_mem_pool_alloc+0x1e>
   385e2:	bf00      	nop
   385e4:	2003240c 	.word	0x2003240c
   385e8:	b6db6db7 	.word	0xb6db6db7
   385ec:	00048bcf 	.word	0x00048bcf
   385f0:	00048b91 	.word	0x00048b91
   385f4:	00043278 	.word	0x00043278
   385f8:	00044d12 	.word	0x00044d12

000385fc <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   385fc:	b570      	push	{r4, r5, r6, lr}
   385fe:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   38600:	6802      	ldr	r2, [r0, #0]
   38602:	7841      	ldrb	r1, [r0, #1]
   38604:	4d24      	ldr	r5, [pc, #144]	; (38698 <k_mem_pool_free_id+0x9c>)
   38606:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   3860a:	00a4      	lsls	r4, r4, #2
   3860c:	0b12      	lsrs	r2, r2, #12
   3860e:	f001 010f 	and.w	r1, r1, #15
   38612:	1928      	adds	r0, r5, r4
   38614:	f7ea fbb0 	bl	22d78 <z_sys_mem_pool_block_free>
   38618:	f04f 0320 	mov.w	r3, #32
   3861c:	f3ef 8611 	mrs	r6, BASEPRI
   38620:	f383 8811 	msr	BASEPRI, r3
   38624:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38628:	481c      	ldr	r0, [pc, #112]	; (3869c <k_mem_pool_free_id+0xa0>)
   3862a:	f001 febd 	bl	3a3a8 <z_spin_lock_valid>
   3862e:	b968      	cbnz	r0, 3864c <k_mem_pool_free_id+0x50>
   38630:	234a      	movs	r3, #74	; 0x4a
   38632:	4a1b      	ldr	r2, [pc, #108]	; (386a0 <k_mem_pool_free_id+0xa4>)
   38634:	491b      	ldr	r1, [pc, #108]	; (386a4 <k_mem_pool_free_id+0xa8>)
   38636:	481c      	ldr	r0, [pc, #112]	; (386a8 <k_mem_pool_free_id+0xac>)
   38638:	f005 fc2f 	bl	3de9a <printk>
   3863c:	4917      	ldr	r1, [pc, #92]	; (3869c <k_mem_pool_free_id+0xa0>)
   3863e:	481b      	ldr	r0, [pc, #108]	; (386ac <k_mem_pool_free_id+0xb0>)
   38640:	f005 fc2b 	bl	3de9a <printk>
   38644:	214a      	movs	r1, #74	; 0x4a
   38646:	4816      	ldr	r0, [pc, #88]	; (386a0 <k_mem_pool_free_id+0xa4>)
   38648:	f005 fc7a 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3864c:	4813      	ldr	r0, [pc, #76]	; (3869c <k_mem_pool_free_id+0xa0>)
   3864e:	f001 fec9 	bl	3a3e4 <z_spin_lock_set_owner>
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   38652:	f104 0014 	add.w	r0, r4, #20
   38656:	4428      	add	r0, r5
   38658:	f007 fea6 	bl	403a8 <z_unpend_all>

	if (need_sched != 0) {
   3865c:	b128      	cbz	r0, 3866a <k_mem_pool_free_id+0x6e>
		z_reschedule(&lock, key);
   3865e:	4631      	mov	r1, r6
	} else {
		k_spin_unlock(&lock, key);
	}
}
   38660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   38664:	480d      	ldr	r0, [pc, #52]	; (3869c <k_mem_pool_free_id+0xa0>)
   38666:	f000 bd21 	b.w	390ac <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3866a:	480c      	ldr	r0, [pc, #48]	; (3869c <k_mem_pool_free_id+0xa0>)
   3866c:	f001 feaa 	bl	3a3c4 <z_spin_unlock_valid>
   38670:	b968      	cbnz	r0, 3868e <k_mem_pool_free_id+0x92>
   38672:	235d      	movs	r3, #93	; 0x5d
   38674:	4a0a      	ldr	r2, [pc, #40]	; (386a0 <k_mem_pool_free_id+0xa4>)
   38676:	490e      	ldr	r1, [pc, #56]	; (386b0 <k_mem_pool_free_id+0xb4>)
   38678:	480b      	ldr	r0, [pc, #44]	; (386a8 <k_mem_pool_free_id+0xac>)
   3867a:	f005 fc0e 	bl	3de9a <printk>
   3867e:	4907      	ldr	r1, [pc, #28]	; (3869c <k_mem_pool_free_id+0xa0>)
   38680:	480c      	ldr	r0, [pc, #48]	; (386b4 <k_mem_pool_free_id+0xb8>)
   38682:	f005 fc0a 	bl	3de9a <printk>
   38686:	215d      	movs	r1, #93	; 0x5d
   38688:	4805      	ldr	r0, [pc, #20]	; (386a0 <k_mem_pool_free_id+0xa4>)
   3868a:	f005 fc59 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   3868e:	f386 8811 	msr	BASEPRI, r6
   38692:	f3bf 8f6f 	isb	sy
}
   38696:	bd70      	pop	{r4, r5, r6, pc}
   38698:	2003240c 	.word	0x2003240c
   3869c:	20029264 	.word	0x20029264
   386a0:	00043dc8 	.word	0x00043dc8
   386a4:	00043dee 	.word	0x00043dee
   386a8:	00043278 	.word	0x00043278
   386ac:	00043e03 	.word	0x00043e03
   386b0:	00043e1b 	.word	0x00043e1b
   386b4:	00043e32 	.word	0x00043e32

000386b8 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   386b8:	4601      	mov	r1, r0
   386ba:	4801      	ldr	r0, [pc, #4]	; (386c0 <k_malloc+0x8>)
   386bc:	f007 bdf8 	b.w	402b0 <k_mem_pool_malloc>
   386c0:	2003240c 	.word	0x2003240c

000386c4 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   386c4:	b510      	push	{r4, lr}
   386c6:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   386c8:	f007 fe94 	bl	403f4 <k_is_in_isr>
   386cc:	b948      	cbnz	r0, 386e2 <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   386ce:	4b06      	ldr	r3, [pc, #24]	; (386e8 <z_thread_malloc+0x24>)
   386d0:	689b      	ldr	r3, [r3, #8]
   386d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	}

	if (pool) {
   386d4:	b13b      	cbz	r3, 386e6 <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
   386d6:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   386d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   386dc:	4618      	mov	r0, r3
   386de:	f007 bde7 	b.w	402b0 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   386e2:	4b02      	ldr	r3, [pc, #8]	; (386ec <z_thread_malloc+0x28>)
   386e4:	e7f7      	b.n	386d6 <z_thread_malloc+0x12>
}
   386e6:	bd10      	pop	{r4, pc}
   386e8:	2002926c 	.word	0x2002926c
   386ec:	2003240c 	.word	0x2003240c

000386f0 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   386f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   386f4:	4604      	mov	r4, r0
   386f6:	4688      	mov	r8, r1
   386f8:	4616      	mov	r6, r2
   386fa:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || timeout == K_NO_WAIT, "");
   386fe:	b16b      	cbz	r3, 3871c <z_impl_k_msgq_put+0x2c>
   38700:	b162      	cbz	r2, 3871c <z_impl_k_msgq_put+0x2c>
   38702:	4941      	ldr	r1, [pc, #260]	; (38808 <z_impl_k_msgq_put+0x118>)
   38704:	2376      	movs	r3, #118	; 0x76
   38706:	4a41      	ldr	r2, [pc, #260]	; (3880c <z_impl_k_msgq_put+0x11c>)
   38708:	4841      	ldr	r0, [pc, #260]	; (38810 <z_impl_k_msgq_put+0x120>)
   3870a:	f005 fbc6 	bl	3de9a <printk>
   3870e:	4841      	ldr	r0, [pc, #260]	; (38814 <z_impl_k_msgq_put+0x124>)
   38710:	f005 fbc3 	bl	3de9a <printk>
   38714:	2176      	movs	r1, #118	; 0x76
   38716:	483d      	ldr	r0, [pc, #244]	; (3880c <z_impl_k_msgq_put+0x11c>)
   38718:	f005 fc12 	bl	3df40 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   3871c:	f104 0508 	add.w	r5, r4, #8
	__asm__ volatile(
   38720:	f04f 0320 	mov.w	r3, #32
   38724:	f3ef 8711 	mrs	r7, BASEPRI
   38728:	f383 8811 	msr	BASEPRI, r3
   3872c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38730:	4628      	mov	r0, r5
   38732:	f001 fe39 	bl	3a3a8 <z_spin_lock_valid>
   38736:	b968      	cbnz	r0, 38754 <z_impl_k_msgq_put+0x64>
   38738:	234a      	movs	r3, #74	; 0x4a
   3873a:	4a37      	ldr	r2, [pc, #220]	; (38818 <z_impl_k_msgq_put+0x128>)
   3873c:	4937      	ldr	r1, [pc, #220]	; (3881c <z_impl_k_msgq_put+0x12c>)
   3873e:	4834      	ldr	r0, [pc, #208]	; (38810 <z_impl_k_msgq_put+0x120>)
   38740:	f005 fbab 	bl	3de9a <printk>
   38744:	4629      	mov	r1, r5
   38746:	4836      	ldr	r0, [pc, #216]	; (38820 <z_impl_k_msgq_put+0x130>)
   38748:	f005 fba7 	bl	3de9a <printk>
   3874c:	214a      	movs	r1, #74	; 0x4a
   3874e:	4832      	ldr	r0, [pc, #200]	; (38818 <z_impl_k_msgq_put+0x128>)
   38750:	f005 fbf6 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   38754:	4628      	mov	r0, r5
   38756:	f001 fe45 	bl	3a3e4 <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   3875a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   3875c:	6923      	ldr	r3, [r4, #16]
   3875e:	429a      	cmp	r2, r3
   38760:	d242      	bcs.n	387e8 <z_impl_k_msgq_put+0xf8>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   38762:	4620      	mov	r0, r4
   38764:	f001 fb02 	bl	39d6c <z_unpend_first_thread>
		if (pending_thread != NULL) {
   38768:	68e2      	ldr	r2, [r4, #12]
   3876a:	4606      	mov	r6, r0
   3876c:	4641      	mov	r1, r8
   3876e:	b1a0      	cbz	r0, 3879a <z_impl_k_msgq_put+0xaa>
   38770:	6940      	ldr	r0, [r0, #20]
   38772:	f007 ff53 	bl	4061c <memcpy>
   38776:	2300      	movs	r3, #0
   38778:	66b3      	str	r3, [r6, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3877a:	7b73      	ldrb	r3, [r6, #13]
   3877c:	06db      	lsls	r3, r3, #27
   3877e:	d104      	bne.n	3878a <z_impl_k_msgq_put+0x9a>
	if (z_is_thread_ready(thread)) {
   38780:	69b3      	ldr	r3, [r6, #24]
   38782:	b913      	cbnz	r3, 3878a <z_impl_k_msgq_put+0x9a>
		z_add_thread_to_ready_q(thread);
   38784:	4630      	mov	r0, r6
   38786:	f000 fe7b 	bl	39480 <z_add_thread_to_ready_q>
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   3878a:	4639      	mov	r1, r7
   3878c:	4628      	mov	r0, r5
   3878e:	f000 fc8d 	bl	390ac <z_reschedule>
			return 0;
   38792:	2400      	movs	r4, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   38794:	4620      	mov	r0, r4
   38796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3879a:	6a20      	ldr	r0, [r4, #32]
   3879c:	f007 ff3e 	bl	4061c <memcpy>
			msgq->write_ptr += msgq->msg_size;
   387a0:	6a23      	ldr	r3, [r4, #32]
   387a2:	68e2      	ldr	r2, [r4, #12]
   387a4:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   387a6:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   387a8:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   387aa:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   387ac:	bf04      	itt	eq
   387ae:	6963      	ldreq	r3, [r4, #20]
   387b0:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   387b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   387b4:	3301      	adds	r3, #1
   387b6:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   387b8:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   387ba:	4628      	mov	r0, r5
   387bc:	f001 fe02 	bl	3a3c4 <z_spin_unlock_valid>
   387c0:	b968      	cbnz	r0, 387de <z_impl_k_msgq_put+0xee>
   387c2:	235d      	movs	r3, #93	; 0x5d
   387c4:	4a14      	ldr	r2, [pc, #80]	; (38818 <z_impl_k_msgq_put+0x128>)
   387c6:	4917      	ldr	r1, [pc, #92]	; (38824 <z_impl_k_msgq_put+0x134>)
   387c8:	4811      	ldr	r0, [pc, #68]	; (38810 <z_impl_k_msgq_put+0x120>)
   387ca:	f005 fb66 	bl	3de9a <printk>
   387ce:	4629      	mov	r1, r5
   387d0:	4815      	ldr	r0, [pc, #84]	; (38828 <z_impl_k_msgq_put+0x138>)
   387d2:	f005 fb62 	bl	3de9a <printk>
   387d6:	215d      	movs	r1, #93	; 0x5d
   387d8:	480f      	ldr	r0, [pc, #60]	; (38818 <z_impl_k_msgq_put+0x128>)
   387da:	f005 fbb1 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   387de:	f387 8811 	msr	BASEPRI, r7
   387e2:	f3bf 8f6f 	isb	sy
	return result;
   387e6:	e7d5      	b.n	38794 <z_impl_k_msgq_put+0xa4>
	} else if (timeout == K_NO_WAIT) {
   387e8:	b15e      	cbz	r6, 38802 <z_impl_k_msgq_put+0x112>
		_current->base.swap_data = data;
   387ea:	4b10      	ldr	r3, [pc, #64]	; (3882c <z_impl_k_msgq_put+0x13c>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   387ec:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   387ee:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   387f0:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   387f2:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   387f6:	4628      	mov	r0, r5
   387f8:	4633      	mov	r3, r6
}
   387fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   387fe:	f001 b9f9 	b.w	39bf4 <z_pend_curr>
		result = -ENOMSG;
   38802:	f06f 0422 	mvn.w	r4, #34	; 0x22
   38806:	e7d8      	b.n	387ba <z_impl_k_msgq_put+0xca>
   38808:	00048c15 	.word	0x00048c15
   3880c:	00048bf3 	.word	0x00048bf3
   38810:	00043278 	.word	0x00043278
   38814:	00044d12 	.word	0x00044d12
   38818:	00043dc8 	.word	0x00043dc8
   3881c:	00043dee 	.word	0x00043dee
   38820:	00043e03 	.word	0x00043e03
   38824:	00043e1b 	.word	0x00043e1b
   38828:	00043e32 	.word	0x00043e32
   3882c:	2002926c 	.word	0x2002926c

00038830 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   38830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38834:	4604      	mov	r4, r0
   38836:	4688      	mov	r8, r1
   38838:	4615      	mov	r5, r2
   3883a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || timeout == K_NO_WAIT, "");
   3883e:	b16b      	cbz	r3, 3885c <z_impl_k_msgq_get+0x2c>
   38840:	b162      	cbz	r2, 3885c <z_impl_k_msgq_get+0x2c>
   38842:	4947      	ldr	r1, [pc, #284]	; (38960 <z_impl_k_msgq_get+0x130>)
   38844:	23c1      	movs	r3, #193	; 0xc1
   38846:	4a47      	ldr	r2, [pc, #284]	; (38964 <z_impl_k_msgq_get+0x134>)
   38848:	4847      	ldr	r0, [pc, #284]	; (38968 <z_impl_k_msgq_get+0x138>)
   3884a:	f005 fb26 	bl	3de9a <printk>
   3884e:	4847      	ldr	r0, [pc, #284]	; (3896c <z_impl_k_msgq_get+0x13c>)
   38850:	f005 fb23 	bl	3de9a <printk>
   38854:	21c1      	movs	r1, #193	; 0xc1
   38856:	4843      	ldr	r0, [pc, #268]	; (38964 <z_impl_k_msgq_get+0x134>)
   38858:	f005 fb72 	bl	3df40 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   3885c:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   38860:	f04f 0320 	mov.w	r3, #32
   38864:	f3ef 8711 	mrs	r7, BASEPRI
   38868:	f383 8811 	msr	BASEPRI, r3
   3886c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38870:	4630      	mov	r0, r6
   38872:	f001 fd99 	bl	3a3a8 <z_spin_lock_valid>
   38876:	b968      	cbnz	r0, 38894 <z_impl_k_msgq_get+0x64>
   38878:	234a      	movs	r3, #74	; 0x4a
   3887a:	4a3d      	ldr	r2, [pc, #244]	; (38970 <z_impl_k_msgq_get+0x140>)
   3887c:	493d      	ldr	r1, [pc, #244]	; (38974 <z_impl_k_msgq_get+0x144>)
   3887e:	483a      	ldr	r0, [pc, #232]	; (38968 <z_impl_k_msgq_get+0x138>)
   38880:	f005 fb0b 	bl	3de9a <printk>
   38884:	4631      	mov	r1, r6
   38886:	483c      	ldr	r0, [pc, #240]	; (38978 <z_impl_k_msgq_get+0x148>)
   38888:	f005 fb07 	bl	3de9a <printk>
   3888c:	214a      	movs	r1, #74	; 0x4a
   3888e:	4838      	ldr	r0, [pc, #224]	; (38970 <z_impl_k_msgq_get+0x140>)
   38890:	f005 fb56 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   38894:	4630      	mov	r0, r6
   38896:	f001 fda5 	bl	3a3e4 <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   3889a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3889c:	2b00      	cmp	r3, #0
   3889e:	d039      	beq.n	38914 <z_impl_k_msgq_get+0xe4>
   388a0:	68e2      	ldr	r2, [r4, #12]
   388a2:	69e1      	ldr	r1, [r4, #28]
   388a4:	4640      	mov	r0, r8
   388a6:	f007 feb9 	bl	4061c <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   388aa:	69e3      	ldr	r3, [r4, #28]
   388ac:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   388ae:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   388b0:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   388b2:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   388b4:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   388b6:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   388b8:	bf04      	itt	eq
   388ba:	6963      	ldreq	r3, [r4, #20]
   388bc:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   388be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   388c0:	3b01      	subs	r3, #1
   388c2:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   388c4:	f001 fa52 	bl	39d6c <z_unpend_first_thread>
		if (pending_thread != NULL) {
   388c8:	4605      	mov	r5, r0
   388ca:	2800      	cmp	r0, #0
   388cc:	d031      	beq.n	38932 <z_impl_k_msgq_get+0x102>
   388ce:	68e2      	ldr	r2, [r4, #12]
   388d0:	6941      	ldr	r1, [r0, #20]
   388d2:	6a20      	ldr	r0, [r4, #32]
   388d4:	f007 fea2 	bl	4061c <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   388d8:	6a23      	ldr	r3, [r4, #32]
   388da:	68e2      	ldr	r2, [r4, #12]
   388dc:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   388de:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   388e0:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   388e2:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   388e4:	bf04      	itt	eq
   388e6:	6963      	ldreq	r3, [r4, #20]
   388e8:	6223      	streq	r3, [r4, #32]
			}
			msgq->used_msgs++;
   388ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   388ec:	3301      	adds	r3, #1
   388ee:	6263      	str	r3, [r4, #36]	; 0x24
   388f0:	2300      	movs	r3, #0
   388f2:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   388f4:	7b6b      	ldrb	r3, [r5, #13]
   388f6:	06db      	lsls	r3, r3, #27
   388f8:	d104      	bne.n	38904 <z_impl_k_msgq_get+0xd4>
	if (z_is_thread_ready(thread)) {
   388fa:	69ab      	ldr	r3, [r5, #24]
   388fc:	b913      	cbnz	r3, 38904 <z_impl_k_msgq_get+0xd4>
		z_add_thread_to_ready_q(thread);
   388fe:	4628      	mov	r0, r5
   38900:	f000 fdbe 	bl	39480 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   38904:	4639      	mov	r1, r7
   38906:	4630      	mov	r0, r6
   38908:	f000 fbd0 	bl	390ac <z_reschedule>
			return 0;
   3890c:	2500      	movs	r5, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   3890e:	4628      	mov	r0, r5
   38910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   38914:	b15d      	cbz	r5, 3892e <z_impl_k_msgq_get+0xfe>
		_current->base.swap_data = data;
   38916:	4b19      	ldr	r3, [pc, #100]	; (3897c <z_impl_k_msgq_get+0x14c>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   38918:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   3891a:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3891c:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   3891e:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   38922:	4630      	mov	r0, r6
   38924:	462b      	mov	r3, r5
}
   38926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3892a:	f001 b963 	b.w	39bf4 <z_pend_curr>
		result = -ENOMSG;
   3892e:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38932:	4630      	mov	r0, r6
   38934:	f001 fd46 	bl	3a3c4 <z_spin_unlock_valid>
   38938:	b968      	cbnz	r0, 38956 <z_impl_k_msgq_get+0x126>
   3893a:	235d      	movs	r3, #93	; 0x5d
   3893c:	4a0c      	ldr	r2, [pc, #48]	; (38970 <z_impl_k_msgq_get+0x140>)
   3893e:	4910      	ldr	r1, [pc, #64]	; (38980 <z_impl_k_msgq_get+0x150>)
   38940:	4809      	ldr	r0, [pc, #36]	; (38968 <z_impl_k_msgq_get+0x138>)
   38942:	f005 faaa 	bl	3de9a <printk>
   38946:	4631      	mov	r1, r6
   38948:	480e      	ldr	r0, [pc, #56]	; (38984 <z_impl_k_msgq_get+0x154>)
   3894a:	f005 faa6 	bl	3de9a <printk>
   3894e:	215d      	movs	r1, #93	; 0x5d
   38950:	4807      	ldr	r0, [pc, #28]	; (38970 <z_impl_k_msgq_get+0x140>)
   38952:	f005 faf5 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   38956:	f387 8811 	msr	BASEPRI, r7
   3895a:	f3bf 8f6f 	isb	sy
	return result;
   3895e:	e7d6      	b.n	3890e <z_impl_k_msgq_get+0xde>
   38960:	00048c15 	.word	0x00048c15
   38964:	00048bf3 	.word	0x00048bf3
   38968:	00043278 	.word	0x00043278
   3896c:	00044d12 	.word	0x00044d12
   38970:	00043dc8 	.word	0x00043dc8
   38974:	00043dee 	.word	0x00043dee
   38978:	00043e03 	.word	0x00043e03
   3897c:	2002926c 	.word	0x2002926c
   38980:	00043e1b 	.word	0x00043e1b
   38984:	00043e32 	.word	0x00043e32

00038988 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   38988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3898a:	4604      	mov	r4, r0
   3898c:	460e      	mov	r6, r1
	__asm__ volatile(
   3898e:	f04f 0320 	mov.w	r3, #32
   38992:	f3ef 8511 	mrs	r5, BASEPRI
   38996:	f383 8811 	msr	BASEPRI, r3
   3899a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3899e:	4861      	ldr	r0, [pc, #388]	; (38b24 <z_impl_k_mutex_lock+0x19c>)
   389a0:	f001 fd02 	bl	3a3a8 <z_spin_lock_valid>
   389a4:	b968      	cbnz	r0, 389c2 <z_impl_k_mutex_lock+0x3a>
   389a6:	234a      	movs	r3, #74	; 0x4a
   389a8:	4a5f      	ldr	r2, [pc, #380]	; (38b28 <z_impl_k_mutex_lock+0x1a0>)
   389aa:	4960      	ldr	r1, [pc, #384]	; (38b2c <z_impl_k_mutex_lock+0x1a4>)
   389ac:	4860      	ldr	r0, [pc, #384]	; (38b30 <z_impl_k_mutex_lock+0x1a8>)
   389ae:	f005 fa74 	bl	3de9a <printk>
   389b2:	495c      	ldr	r1, [pc, #368]	; (38b24 <z_impl_k_mutex_lock+0x19c>)
   389b4:	485f      	ldr	r0, [pc, #380]	; (38b34 <z_impl_k_mutex_lock+0x1ac>)
   389b6:	f005 fa70 	bl	3de9a <printk>
   389ba:	214a      	movs	r1, #74	; 0x4a
   389bc:	485a      	ldr	r0, [pc, #360]	; (38b28 <z_impl_k_mutex_lock+0x1a0>)
   389be:	f005 fabf 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   389c2:	4858      	ldr	r0, [pc, #352]	; (38b24 <z_impl_k_mutex_lock+0x19c>)
   389c4:	f001 fd0e 	bl	3a3e4 <z_spin_lock_set_owner>
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   389c8:	68e3      	ldr	r3, [r4, #12]
   389ca:	4a5b      	ldr	r2, [pc, #364]	; (38b38 <z_impl_k_mutex_lock+0x1b0>)
   389cc:	b1f3      	cbz	r3, 38a0c <z_impl_k_mutex_lock+0x84>
   389ce:	68a0      	ldr	r0, [r4, #8]
   389d0:	6891      	ldr	r1, [r2, #8]
   389d2:	4288      	cmp	r0, r1
   389d4:	d03a      	beq.n	38a4c <z_impl_k_mutex_lock+0xc4>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   389d6:	2e00      	cmp	r6, #0
   389d8:	d13a      	bne.n	38a50 <z_impl_k_mutex_lock+0xc8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   389da:	4852      	ldr	r0, [pc, #328]	; (38b24 <z_impl_k_mutex_lock+0x19c>)
   389dc:	f001 fcf2 	bl	3a3c4 <z_spin_unlock_valid>
   389e0:	b968      	cbnz	r0, 389fe <z_impl_k_mutex_lock+0x76>
   389e2:	235d      	movs	r3, #93	; 0x5d
   389e4:	4a50      	ldr	r2, [pc, #320]	; (38b28 <z_impl_k_mutex_lock+0x1a0>)
   389e6:	4955      	ldr	r1, [pc, #340]	; (38b3c <z_impl_k_mutex_lock+0x1b4>)
   389e8:	4851      	ldr	r0, [pc, #324]	; (38b30 <z_impl_k_mutex_lock+0x1a8>)
   389ea:	f005 fa56 	bl	3de9a <printk>
   389ee:	494d      	ldr	r1, [pc, #308]	; (38b24 <z_impl_k_mutex_lock+0x19c>)
   389f0:	4853      	ldr	r0, [pc, #332]	; (38b40 <z_impl_k_mutex_lock+0x1b8>)
   389f2:	f005 fa52 	bl	3de9a <printk>
   389f6:	215d      	movs	r1, #93	; 0x5d
   389f8:	484b      	ldr	r0, [pc, #300]	; (38b28 <z_impl_k_mutex_lock+0x1a0>)
   389fa:	f005 faa1 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   389fe:	f385 8811 	msr	BASEPRI, r5
   38a02:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   38a06:	f06f 000f 	mvn.w	r0, #15
   38a0a:	e01e      	b.n	38a4a <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   38a0c:	6891      	ldr	r1, [r2, #8]
   38a0e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   38a12:	3301      	adds	r3, #1
   38a14:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   38a16:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   38a18:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   38a1a:	60a3      	str	r3, [r4, #8]
   38a1c:	4841      	ldr	r0, [pc, #260]	; (38b24 <z_impl_k_mutex_lock+0x19c>)
   38a1e:	f001 fcd1 	bl	3a3c4 <z_spin_unlock_valid>
   38a22:	b968      	cbnz	r0, 38a40 <z_impl_k_mutex_lock+0xb8>
   38a24:	235d      	movs	r3, #93	; 0x5d
   38a26:	4a40      	ldr	r2, [pc, #256]	; (38b28 <z_impl_k_mutex_lock+0x1a0>)
   38a28:	4944      	ldr	r1, [pc, #272]	; (38b3c <z_impl_k_mutex_lock+0x1b4>)
   38a2a:	4841      	ldr	r0, [pc, #260]	; (38b30 <z_impl_k_mutex_lock+0x1a8>)
   38a2c:	f005 fa35 	bl	3de9a <printk>
   38a30:	493c      	ldr	r1, [pc, #240]	; (38b24 <z_impl_k_mutex_lock+0x19c>)
   38a32:	4843      	ldr	r0, [pc, #268]	; (38b40 <z_impl_k_mutex_lock+0x1b8>)
   38a34:	f005 fa31 	bl	3de9a <printk>
   38a38:	215d      	movs	r1, #93	; 0x5d
   38a3a:	483b      	ldr	r0, [pc, #236]	; (38b28 <z_impl_k_mutex_lock+0x1a0>)
   38a3c:	f005 fa80 	bl	3df40 <assert_post_action>
   38a40:	f385 8811 	msr	BASEPRI, r5
   38a44:	f3bf 8f6f 	isb	sy
		return 0;
   38a48:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   38a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   38a4c:	6921      	ldr	r1, [r4, #16]
   38a4e:	e7e0      	b.n	38a12 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   38a50:	f990 300e 	ldrsb.w	r3, [r0, #14]
   38a54:	f991 100e 	ldrsb.w	r1, [r1, #14]
   38a58:	4299      	cmp	r1, r3
   38a5a:	bfa8      	it	ge
   38a5c:	4619      	movge	r1, r3
   38a5e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   38a62:	4299      	cmp	r1, r3
   38a64:	da40      	bge.n	38ae8 <z_impl_k_mutex_lock+0x160>
		return z_set_prio(mutex->owner, new_prio);
   38a66:	f001 f8f3 	bl	39c50 <z_set_prio>
   38a6a:	4607      	mov	r7, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   38a6c:	4633      	mov	r3, r6
   38a6e:	4622      	mov	r2, r4
   38a70:	4629      	mov	r1, r5
   38a72:	482c      	ldr	r0, [pc, #176]	; (38b24 <z_impl_k_mutex_lock+0x19c>)
   38a74:	f001 f8be 	bl	39bf4 <z_pend_curr>
	if (got_mutex == 0) {
   38a78:	2800      	cmp	r0, #0
   38a7a:	d0e6      	beq.n	38a4a <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   38a7c:	f04f 0320 	mov.w	r3, #32
   38a80:	f3ef 8511 	mrs	r5, BASEPRI
   38a84:	f383 8811 	msr	BASEPRI, r3
   38a88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38a8c:	4825      	ldr	r0, [pc, #148]	; (38b24 <z_impl_k_mutex_lock+0x19c>)
   38a8e:	f001 fc8b 	bl	3a3a8 <z_spin_lock_valid>
   38a92:	b968      	cbnz	r0, 38ab0 <z_impl_k_mutex_lock+0x128>
   38a94:	234a      	movs	r3, #74	; 0x4a
   38a96:	4a24      	ldr	r2, [pc, #144]	; (38b28 <z_impl_k_mutex_lock+0x1a0>)
   38a98:	4924      	ldr	r1, [pc, #144]	; (38b2c <z_impl_k_mutex_lock+0x1a4>)
   38a9a:	4825      	ldr	r0, [pc, #148]	; (38b30 <z_impl_k_mutex_lock+0x1a8>)
   38a9c:	f005 f9fd 	bl	3de9a <printk>
   38aa0:	4920      	ldr	r1, [pc, #128]	; (38b24 <z_impl_k_mutex_lock+0x19c>)
   38aa2:	4824      	ldr	r0, [pc, #144]	; (38b34 <z_impl_k_mutex_lock+0x1ac>)
   38aa4:	f005 f9f9 	bl	3de9a <printk>
   38aa8:	214a      	movs	r1, #74	; 0x4a
   38aaa:	481f      	ldr	r0, [pc, #124]	; (38b28 <z_impl_k_mutex_lock+0x1a0>)
   38aac:	f005 fa48 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   38ab0:	481c      	ldr	r0, [pc, #112]	; (38b24 <z_impl_k_mutex_lock+0x19c>)
   38ab2:	f001 fc97 	bl	3a3e4 <z_spin_lock_set_owner>
	return list->head == list;
   38ab6:	6823      	ldr	r3, [r4, #0]
   38ab8:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38aba:	429c      	cmp	r4, r3
   38abc:	d007      	beq.n	38ace <z_impl_k_mutex_lock+0x146>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   38abe:	b133      	cbz	r3, 38ace <z_impl_k_mutex_lock+0x146>
   38ac0:	f993 300e 	ldrsb.w	r3, [r3, #14]
   38ac4:	4299      	cmp	r1, r3
   38ac6:	bfa8      	it	ge
   38ac8:	4619      	movge	r1, r3
   38aca:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   38ace:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   38ad0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   38ad4:	4299      	cmp	r1, r3
   38ad6:	d109      	bne.n	38aec <z_impl_k_mutex_lock+0x164>
	if (resched) {
   38ad8:	b16f      	cbz	r7, 38af6 <z_impl_k_mutex_lock+0x16e>
		z_reschedule(&lock, key);
   38ada:	4629      	mov	r1, r5
   38adc:	4811      	ldr	r0, [pc, #68]	; (38b24 <z_impl_k_mutex_lock+0x19c>)
   38ade:	f000 fae5 	bl	390ac <z_reschedule>
	return -EAGAIN;
   38ae2:	f06f 000a 	mvn.w	r0, #10
   38ae6:	e7b0      	b.n	38a4a <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   38ae8:	2700      	movs	r7, #0
   38aea:	e7bf      	b.n	38a6c <z_impl_k_mutex_lock+0xe4>
		return z_set_prio(mutex->owner, new_prio);
   38aec:	f001 f8b0 	bl	39c50 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   38af0:	2800      	cmp	r0, #0
   38af2:	d1f2      	bne.n	38ada <z_impl_k_mutex_lock+0x152>
   38af4:	e7f0      	b.n	38ad8 <z_impl_k_mutex_lock+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38af6:	480b      	ldr	r0, [pc, #44]	; (38b24 <z_impl_k_mutex_lock+0x19c>)
   38af8:	f001 fc64 	bl	3a3c4 <z_spin_unlock_valid>
   38afc:	b968      	cbnz	r0, 38b1a <z_impl_k_mutex_lock+0x192>
   38afe:	235d      	movs	r3, #93	; 0x5d
   38b00:	4a09      	ldr	r2, [pc, #36]	; (38b28 <z_impl_k_mutex_lock+0x1a0>)
   38b02:	490e      	ldr	r1, [pc, #56]	; (38b3c <z_impl_k_mutex_lock+0x1b4>)
   38b04:	480a      	ldr	r0, [pc, #40]	; (38b30 <z_impl_k_mutex_lock+0x1a8>)
   38b06:	f005 f9c8 	bl	3de9a <printk>
   38b0a:	4906      	ldr	r1, [pc, #24]	; (38b24 <z_impl_k_mutex_lock+0x19c>)
   38b0c:	480c      	ldr	r0, [pc, #48]	; (38b40 <z_impl_k_mutex_lock+0x1b8>)
   38b0e:	f005 f9c4 	bl	3de9a <printk>
   38b12:	215d      	movs	r1, #93	; 0x5d
   38b14:	4804      	ldr	r0, [pc, #16]	; (38b28 <z_impl_k_mutex_lock+0x1a0>)
   38b16:	f005 fa13 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   38b1a:	f385 8811 	msr	BASEPRI, r5
   38b1e:	f3bf 8f6f 	isb	sy
   38b22:	e7de      	b.n	38ae2 <z_impl_k_mutex_lock+0x15a>
   38b24:	20029268 	.word	0x20029268
   38b28:	00043dc8 	.word	0x00043dc8
   38b2c:	00043dee 	.word	0x00043dee
   38b30:	00043278 	.word	0x00043278
   38b34:	00043e03 	.word	0x00043e03
   38b38:	2002926c 	.word	0x2002926c
   38b3c:	00043e1b 	.word	0x00043e1b
   38b40:	00043e32 	.word	0x00043e32

00038b44 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   38b44:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   38b46:	6883      	ldr	r3, [r0, #8]
{
   38b48:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   38b4a:	2b00      	cmp	r3, #0
   38b4c:	f000 8096 	beq.w	38c7c <z_impl_k_mutex_unlock+0x138>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   38b50:	4d4d      	ldr	r5, [pc, #308]	; (38c88 <z_impl_k_mutex_unlock+0x144>)
   38b52:	68aa      	ldr	r2, [r5, #8]
   38b54:	4293      	cmp	r3, r2
   38b56:	f040 8094 	bne.w	38c82 <z_impl_k_mutex_unlock+0x13e>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   38b5a:	68c3      	ldr	r3, [r0, #12]
   38b5c:	b94b      	cbnz	r3, 38b72 <z_impl_k_mutex_unlock+0x2e>
   38b5e:	494b      	ldr	r1, [pc, #300]	; (38c8c <z_impl_k_mutex_unlock+0x148>)
   38b60:	484b      	ldr	r0, [pc, #300]	; (38c90 <z_impl_k_mutex_unlock+0x14c>)
   38b62:	23e5      	movs	r3, #229	; 0xe5
   38b64:	4a4b      	ldr	r2, [pc, #300]	; (38c94 <z_impl_k_mutex_unlock+0x150>)
   38b66:	f005 f998 	bl	3de9a <printk>
   38b6a:	21e5      	movs	r1, #229	; 0xe5
   38b6c:	4849      	ldr	r0, [pc, #292]	; (38c94 <z_impl_k_mutex_unlock+0x150>)
   38b6e:	f005 f9e7 	bl	3df40 <assert_post_action>
   38b72:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   38b76:	b173      	cbz	r3, 38b96 <z_impl_k_mutex_unlock+0x52>
   38b78:	4947      	ldr	r1, [pc, #284]	; (38c98 <z_impl_k_mutex_unlock+0x154>)
   38b7a:	f240 130d 	movw	r3, #269	; 0x10d
   38b7e:	4a47      	ldr	r2, [pc, #284]	; (38c9c <z_impl_k_mutex_unlock+0x158>)
   38b80:	4843      	ldr	r0, [pc, #268]	; (38c90 <z_impl_k_mutex_unlock+0x14c>)
   38b82:	f005 f98a 	bl	3de9a <printk>
   38b86:	4846      	ldr	r0, [pc, #280]	; (38ca0 <z_impl_k_mutex_unlock+0x15c>)
   38b88:	f005 f987 	bl	3de9a <printk>
   38b8c:	f240 110d 	movw	r1, #269	; 0x10d
   38b90:	4842      	ldr	r0, [pc, #264]	; (38c9c <z_impl_k_mutex_unlock+0x158>)
   38b92:	f005 f9d5 	bl	3df40 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   38b96:	68ab      	ldr	r3, [r5, #8]
   38b98:	7bdb      	ldrb	r3, [r3, #15]
   38b9a:	2b01      	cmp	r3, #1
   38b9c:	d10e      	bne.n	38bbc <z_impl_k_mutex_unlock+0x78>
   38b9e:	4941      	ldr	r1, [pc, #260]	; (38ca4 <z_impl_k_mutex_unlock+0x160>)
   38ba0:	f44f 7387 	mov.w	r3, #270	; 0x10e
   38ba4:	4a3d      	ldr	r2, [pc, #244]	; (38c9c <z_impl_k_mutex_unlock+0x158>)
   38ba6:	483a      	ldr	r0, [pc, #232]	; (38c90 <z_impl_k_mutex_unlock+0x14c>)
   38ba8:	f005 f977 	bl	3de9a <printk>
   38bac:	483c      	ldr	r0, [pc, #240]	; (38ca0 <z_impl_k_mutex_unlock+0x15c>)
   38bae:	f005 f974 	bl	3de9a <printk>
   38bb2:	f44f 7187 	mov.w	r1, #270	; 0x10e
   38bb6:	4839      	ldr	r0, [pc, #228]	; (38c9c <z_impl_k_mutex_unlock+0x158>)
   38bb8:	f005 f9c2 	bl	3df40 <assert_post_action>

	--_current->base.sched_locked;
   38bbc:	68aa      	ldr	r2, [r5, #8]
   38bbe:	7bd3      	ldrb	r3, [r2, #15]
   38bc0:	3b01      	subs	r3, #1
   38bc2:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   38bc4:	68e3      	ldr	r3, [r4, #12]
   38bc6:	2b01      	cmp	r3, #1
   38bc8:	d005      	beq.n	38bd6 <z_impl_k_mutex_unlock+0x92>
		mutex->lock_count--;
   38bca:	3b01      	subs	r3, #1
   38bcc:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   38bce:	f000 fbdb 	bl	39388 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   38bd2:	2000      	movs	r0, #0
}
   38bd4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   38bd6:	f04f 0320 	mov.w	r3, #32
   38bda:	f3ef 8511 	mrs	r5, BASEPRI
   38bde:	f383 8811 	msr	BASEPRI, r3
   38be2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38be6:	4830      	ldr	r0, [pc, #192]	; (38ca8 <z_impl_k_mutex_unlock+0x164>)
   38be8:	f001 fbde 	bl	3a3a8 <z_spin_lock_valid>
   38bec:	b968      	cbnz	r0, 38c0a <z_impl_k_mutex_unlock+0xc6>
   38bee:	234a      	movs	r3, #74	; 0x4a
   38bf0:	4a2e      	ldr	r2, [pc, #184]	; (38cac <z_impl_k_mutex_unlock+0x168>)
   38bf2:	492f      	ldr	r1, [pc, #188]	; (38cb0 <z_impl_k_mutex_unlock+0x16c>)
   38bf4:	4826      	ldr	r0, [pc, #152]	; (38c90 <z_impl_k_mutex_unlock+0x14c>)
   38bf6:	f005 f950 	bl	3de9a <printk>
   38bfa:	492b      	ldr	r1, [pc, #172]	; (38ca8 <z_impl_k_mutex_unlock+0x164>)
   38bfc:	482d      	ldr	r0, [pc, #180]	; (38cb4 <z_impl_k_mutex_unlock+0x170>)
   38bfe:	f005 f94c 	bl	3de9a <printk>
   38c02:	214a      	movs	r1, #74	; 0x4a
   38c04:	4829      	ldr	r0, [pc, #164]	; (38cac <z_impl_k_mutex_unlock+0x168>)
   38c06:	f005 f99b 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   38c0a:	4827      	ldr	r0, [pc, #156]	; (38ca8 <z_impl_k_mutex_unlock+0x164>)
   38c0c:	f001 fbea 	bl	3a3e4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   38c10:	68a0      	ldr	r0, [r4, #8]
   38c12:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   38c14:	f990 300e 	ldrsb.w	r3, [r0, #14]
   38c18:	4299      	cmp	r1, r3
   38c1a:	d001      	beq.n	38c20 <z_impl_k_mutex_unlock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   38c1c:	f001 f818 	bl	39c50 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   38c20:	4620      	mov	r0, r4
   38c22:	f001 f8a3 	bl	39d6c <z_unpend_first_thread>
	mutex->owner = new_owner;
   38c26:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   38c28:	b180      	cbz	r0, 38c4c <z_impl_k_mutex_unlock+0x108>
		mutex->owner_orig_prio = new_owner->base.prio;
   38c2a:	f990 200e 	ldrsb.w	r2, [r0, #14]
   38c2e:	6122      	str	r2, [r4, #16]
   38c30:	2200      	movs	r2, #0
   38c32:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   38c34:	7b42      	ldrb	r2, [r0, #13]
   38c36:	06d2      	lsls	r2, r2, #27
   38c38:	d103      	bne.n	38c42 <z_impl_k_mutex_unlock+0xfe>
	if (z_is_thread_ready(thread)) {
   38c3a:	6983      	ldr	r3, [r0, #24]
   38c3c:	b90b      	cbnz	r3, 38c42 <z_impl_k_mutex_unlock+0xfe>
		z_add_thread_to_ready_q(thread);
   38c3e:	f000 fc1f 	bl	39480 <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
   38c42:	4629      	mov	r1, r5
   38c44:	4818      	ldr	r0, [pc, #96]	; (38ca8 <z_impl_k_mutex_unlock+0x164>)
   38c46:	f000 fa31 	bl	390ac <z_reschedule>
   38c4a:	e7c0      	b.n	38bce <z_impl_k_mutex_unlock+0x8a>
		mutex->lock_count = 0U;
   38c4c:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38c4e:	4816      	ldr	r0, [pc, #88]	; (38ca8 <z_impl_k_mutex_unlock+0x164>)
   38c50:	f001 fbb8 	bl	3a3c4 <z_spin_unlock_valid>
   38c54:	b968      	cbnz	r0, 38c72 <z_impl_k_mutex_unlock+0x12e>
   38c56:	235d      	movs	r3, #93	; 0x5d
   38c58:	4a14      	ldr	r2, [pc, #80]	; (38cac <z_impl_k_mutex_unlock+0x168>)
   38c5a:	4917      	ldr	r1, [pc, #92]	; (38cb8 <z_impl_k_mutex_unlock+0x174>)
   38c5c:	480c      	ldr	r0, [pc, #48]	; (38c90 <z_impl_k_mutex_unlock+0x14c>)
   38c5e:	f005 f91c 	bl	3de9a <printk>
   38c62:	4911      	ldr	r1, [pc, #68]	; (38ca8 <z_impl_k_mutex_unlock+0x164>)
   38c64:	4815      	ldr	r0, [pc, #84]	; (38cbc <z_impl_k_mutex_unlock+0x178>)
   38c66:	f005 f918 	bl	3de9a <printk>
   38c6a:	215d      	movs	r1, #93	; 0x5d
   38c6c:	480f      	ldr	r0, [pc, #60]	; (38cac <z_impl_k_mutex_unlock+0x168>)
   38c6e:	f005 f967 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   38c72:	f385 8811 	msr	BASEPRI, r5
   38c76:	f3bf 8f6f 	isb	sy
   38c7a:	e7a8      	b.n	38bce <z_impl_k_mutex_unlock+0x8a>
		return -EINVAL;
   38c7c:	f06f 0015 	mvn.w	r0, #21
   38c80:	e7a8      	b.n	38bd4 <z_impl_k_mutex_unlock+0x90>
		return -EPERM;
   38c82:	f04f 30ff 	mov.w	r0, #4294967295
   38c86:	e7a5      	b.n	38bd4 <z_impl_k_mutex_unlock+0x90>
   38c88:	2002926c 	.word	0x2002926c
   38c8c:	00048c59 	.word	0x00048c59
   38c90:	00043278 	.word	0x00043278
   38c94:	00048c37 	.word	0x00048c37
   38c98:	00048c9b 	.word	0x00048c9b
   38c9c:	00048c70 	.word	0x00048c70
   38ca0:	00044d12 	.word	0x00044d12
   38ca4:	00048cad 	.word	0x00048cad
   38ca8:	20029268 	.word	0x20029268
   38cac:	00043dc8 	.word	0x00043dc8
   38cb0:	00043dee 	.word	0x00043dee
   38cb4:	00043e03 	.word	0x00043e03
   38cb8:	00043e1b 	.word	0x00043e1b
   38cbc:	00043e32 	.word	0x00043e32

00038cc0 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   38cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   38cc4:	4604      	mov	r4, r0
   38cc6:	460e      	mov	r6, r1
   38cc8:	4690      	mov	r8, r2
   38cca:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   38ccc:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   38cd0:	f04f 0320 	mov.w	r3, #32
   38cd4:	f3ef 8711 	mrs	r7, BASEPRI
   38cd8:	f383 8811 	msr	BASEPRI, r3
   38cdc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38ce0:	4628      	mov	r0, r5
   38ce2:	f001 fb61 	bl	3a3a8 <z_spin_lock_valid>
   38ce6:	b968      	cbnz	r0, 38d04 <queue_insert+0x44>
   38ce8:	234a      	movs	r3, #74	; 0x4a
   38cea:	4a33      	ldr	r2, [pc, #204]	; (38db8 <queue_insert+0xf8>)
   38cec:	4933      	ldr	r1, [pc, #204]	; (38dbc <queue_insert+0xfc>)
   38cee:	4834      	ldr	r0, [pc, #208]	; (38dc0 <queue_insert+0x100>)
   38cf0:	f005 f8d3 	bl	3de9a <printk>
   38cf4:	4629      	mov	r1, r5
   38cf6:	4833      	ldr	r0, [pc, #204]	; (38dc4 <queue_insert+0x104>)
   38cf8:	f005 f8cf 	bl	3de9a <printk>
   38cfc:	214a      	movs	r1, #74	; 0x4a
   38cfe:	482e      	ldr	r0, [pc, #184]	; (38db8 <queue_insert+0xf8>)
   38d00:	f005 f91e 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   38d04:	4628      	mov	r0, r5
   38d06:	f001 fb6d 	bl	3a3e4 <z_spin_lock_set_owner>
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   38d0a:	f1b9 0f00 	cmp.w	r9, #0
   38d0e:	d02d      	beq.n	38d6c <queue_insert+0xac>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   38d10:	2008      	movs	r0, #8
   38d12:	f7ff fcd7 	bl	386c4 <z_thread_malloc>
		if (anode == NULL) {
   38d16:	b9c8      	cbnz	r0, 38d4c <queue_insert+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38d18:	4628      	mov	r0, r5
   38d1a:	f001 fb53 	bl	3a3c4 <z_spin_unlock_valid>
   38d1e:	b968      	cbnz	r0, 38d3c <queue_insert+0x7c>
   38d20:	235d      	movs	r3, #93	; 0x5d
   38d22:	4a25      	ldr	r2, [pc, #148]	; (38db8 <queue_insert+0xf8>)
   38d24:	4928      	ldr	r1, [pc, #160]	; (38dc8 <queue_insert+0x108>)
   38d26:	4826      	ldr	r0, [pc, #152]	; (38dc0 <queue_insert+0x100>)
   38d28:	f005 f8b7 	bl	3de9a <printk>
   38d2c:	4629      	mov	r1, r5
   38d2e:	4827      	ldr	r0, [pc, #156]	; (38dcc <queue_insert+0x10c>)
   38d30:	f005 f8b3 	bl	3de9a <printk>
   38d34:	215d      	movs	r1, #93	; 0x5d
   38d36:	4820      	ldr	r0, [pc, #128]	; (38db8 <queue_insert+0xf8>)
   38d38:	f005 f902 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   38d3c:	f387 8811 	msr	BASEPRI, r7
   38d40:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   38d44:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   38d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   38d4c:	2301      	movs	r3, #1
		anode->data = data;
   38d4e:	f8c0 8004 	str.w	r8, [r0, #4]
   38d52:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   38d54:	6803      	ldr	r3, [r0, #0]
   38d56:	f003 0203 	and.w	r2, r3, #3
   38d5a:	b95e      	cbnz	r6, 38d74 <queue_insert+0xb4>
	parent->next_and_flags = cur_flags | (unative_t)child;
   38d5c:	6823      	ldr	r3, [r4, #0]
   38d5e:	4313      	orrs	r3, r2
   38d60:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   38d62:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   38d64:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   38d66:	b973      	cbnz	r3, 38d86 <queue_insert+0xc6>
	list->tail = node;
   38d68:	6060      	str	r0, [r4, #4]
   38d6a:	e00c      	b.n	38d86 <queue_insert+0xc6>
	node->next_and_flags = flags;
   38d6c:	f8c8 9000 	str.w	r9, [r8]
   38d70:	4640      	mov	r0, r8
   38d72:	e7ef      	b.n	38d54 <queue_insert+0x94>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   38d74:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   38d76:	f033 0303 	bics.w	r3, r3, #3
   38d7a:	d115      	bne.n	38da8 <queue_insert+0xe8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   38d7c:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   38d7e:	6862      	ldr	r2, [r4, #4]
   38d80:	b962      	cbnz	r2, 38d9c <queue_insert+0xdc>
	list->head = node;
   38d82:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   38d86:	2104      	movs	r1, #4
   38d88:	f104 000c 	add.w	r0, r4, #12
   38d8c:	f007 fc17 	bl	405be <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   38d90:	4628      	mov	r0, r5
   38d92:	4639      	mov	r1, r7
   38d94:	f000 f98a 	bl	390ac <z_reschedule>
	return 0;
   38d98:	2000      	movs	r0, #0
   38d9a:	e7d5      	b.n	38d48 <queue_insert+0x88>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   38d9c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   38d9e:	f003 0303 	and.w	r3, r3, #3
   38da2:	4303      	orrs	r3, r0
   38da4:	6013      	str	r3, [r2, #0]
   38da6:	e7df      	b.n	38d68 <queue_insert+0xa8>
   38da8:	4313      	orrs	r3, r2
   38daa:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   38dac:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   38dae:	f003 0303 	and.w	r3, r3, #3
   38db2:	4318      	orrs	r0, r3
   38db4:	6030      	str	r0, [r6, #0]
   38db6:	e7e6      	b.n	38d86 <queue_insert+0xc6>
   38db8:	00043dc8 	.word	0x00043dc8
   38dbc:	00043dee 	.word	0x00043dee
   38dc0:	00043278 	.word	0x00043278
   38dc4:	00043e03 	.word	0x00043e03
   38dc8:	00043e1b 	.word	0x00043e1b
   38dcc:	00043e32 	.word	0x00043e32

00038dd0 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   38dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38dd4:	4606      	mov	r6, r0
   38dd6:	b089      	sub	sp, #36	; 0x24
   38dd8:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   38dda:	f100 0408 	add.w	r4, r0, #8
	__asm__ volatile(
   38dde:	f04f 0320 	mov.w	r3, #32
   38de2:	f3ef 8811 	mrs	r8, BASEPRI
   38de6:	f383 8811 	msr	BASEPRI, r3
   38dea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38dee:	4620      	mov	r0, r4
   38df0:	f001 fada 	bl	3a3a8 <z_spin_lock_valid>
   38df4:	b968      	cbnz	r0, 38e12 <z_impl_k_queue_get+0x42>
   38df6:	234a      	movs	r3, #74	; 0x4a
   38df8:	4a5f      	ldr	r2, [pc, #380]	; (38f78 <z_impl_k_queue_get+0x1a8>)
   38dfa:	4960      	ldr	r1, [pc, #384]	; (38f7c <z_impl_k_queue_get+0x1ac>)
   38dfc:	4860      	ldr	r0, [pc, #384]	; (38f80 <z_impl_k_queue_get+0x1b0>)
   38dfe:	f005 f84c 	bl	3de9a <printk>
   38e02:	4621      	mov	r1, r4
   38e04:	485f      	ldr	r0, [pc, #380]	; (38f84 <z_impl_k_queue_get+0x1b4>)
   38e06:	f005 f848 	bl	3de9a <printk>
   38e0a:	214a      	movs	r1, #74	; 0x4a
   38e0c:	485a      	ldr	r0, [pc, #360]	; (38f78 <z_impl_k_queue_get+0x1a8>)
   38e0e:	f005 f897 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   38e12:	4620      	mov	r0, r4
   38e14:	f001 fae6 	bl	3a3e4 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   38e18:	6835      	ldr	r5, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   38e1a:	b335      	cbz	r5, 38e6a <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   38e1c:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   38e1e:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   38e20:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   38e24:	4295      	cmp	r5, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   38e26:	4628      	mov	r0, r5
	list->head = node;
   38e28:	6033      	str	r3, [r6, #0]
	list->tail = node;
   38e2a:	bf08      	it	eq
   38e2c:	6073      	streq	r3, [r6, #4]
   38e2e:	2101      	movs	r1, #1
   38e30:	f007 fa72 	bl	40318 <z_queue_node_peek>
   38e34:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38e36:	4620      	mov	r0, r4
   38e38:	f001 fac4 	bl	3a3c4 <z_spin_unlock_valid>
   38e3c:	b968      	cbnz	r0, 38e5a <z_impl_k_queue_get+0x8a>
   38e3e:	235d      	movs	r3, #93	; 0x5d
   38e40:	4a4d      	ldr	r2, [pc, #308]	; (38f78 <z_impl_k_queue_get+0x1a8>)
   38e42:	4951      	ldr	r1, [pc, #324]	; (38f88 <z_impl_k_queue_get+0x1b8>)
   38e44:	484e      	ldr	r0, [pc, #312]	; (38f80 <z_impl_k_queue_get+0x1b0>)
   38e46:	f005 f828 	bl	3de9a <printk>
   38e4a:	4621      	mov	r1, r4
   38e4c:	484f      	ldr	r0, [pc, #316]	; (38f8c <z_impl_k_queue_get+0x1bc>)
   38e4e:	f005 f824 	bl	3de9a <printk>
   38e52:	215d      	movs	r1, #93	; 0x5d
   38e54:	4848      	ldr	r0, [pc, #288]	; (38f78 <z_impl_k_queue_get+0x1a8>)
   38e56:	f005 f873 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   38e5a:	f388 8811 	msr	BASEPRI, r8
   38e5e:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   38e62:	4628      	mov	r0, r5
   38e64:	b009      	add	sp, #36	; 0x24
   38e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38e6a:	4620      	mov	r0, r4
	if (timeout == K_NO_WAIT) {
   38e6c:	2f00      	cmp	r7, #0
   38e6e:	d0e3      	beq.n	38e38 <z_impl_k_queue_get+0x68>
   38e70:	f001 faa8 	bl	3a3c4 <z_spin_unlock_valid>
   38e74:	b968      	cbnz	r0, 38e92 <z_impl_k_queue_get+0xc2>
   38e76:	235d      	movs	r3, #93	; 0x5d
   38e78:	4a3f      	ldr	r2, [pc, #252]	; (38f78 <z_impl_k_queue_get+0x1a8>)
   38e7a:	4943      	ldr	r1, [pc, #268]	; (38f88 <z_impl_k_queue_get+0x1b8>)
   38e7c:	4840      	ldr	r0, [pc, #256]	; (38f80 <z_impl_k_queue_get+0x1b0>)
   38e7e:	f005 f80c 	bl	3de9a <printk>
   38e82:	4621      	mov	r1, r4
   38e84:	4841      	ldr	r0, [pc, #260]	; (38f8c <z_impl_k_queue_get+0x1bc>)
   38e86:	f005 f808 	bl	3de9a <printk>
   38e8a:	215d      	movs	r1, #93	; 0x5d
   38e8c:	483a      	ldr	r0, [pc, #232]	; (38f78 <z_impl_k_queue_get+0x1a8>)
   38e8e:	f005 f857 	bl	3df40 <assert_post_action>
   38e92:	f388 8811 	msr	BASEPRI, r8
   38e96:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   38e9a:	2200      	movs	r2, #0
   38e9c:	4633      	mov	r3, r6
   38e9e:	2104      	movs	r1, #4
   38ea0:	a803      	add	r0, sp, #12
   38ea2:	f002 fa79 	bl	3b398 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   38ea6:	1c7a      	adds	r2, r7, #1
   38ea8:	d002      	beq.n	38eb0 <z_impl_k_queue_get+0xe0>
   38eaa:	f007 fb31 	bl	40510 <z_impl_k_uptime_get>
   38eae:	4683      	mov	fp, r0
{
   38eb0:	f04f 0900 	mov.w	r9, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38eb4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 38f78 <z_impl_k_queue_get+0x1a8>
   38eb8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 38f80 <z_impl_k_queue_get+0x1b0>
		event.state = K_POLL_STATE_NOT_READY;
   38ebc:	9b06      	ldr	r3, [sp, #24]
   38ebe:	f36f 3310 	bfc	r3, #12, #5
   38ec2:	9306      	str	r3, [sp, #24]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   38ec4:	2101      	movs	r1, #1
   38ec6:	eba7 0209 	sub.w	r2, r7, r9
   38eca:	a803      	add	r0, sp, #12
   38ecc:	f002 fab6 	bl	3b43c <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   38ed0:	b118      	cbz	r0, 38eda <z_impl_k_queue_get+0x10a>
   38ed2:	300b      	adds	r0, #11
   38ed4:	d001      	beq.n	38eda <z_impl_k_queue_get+0x10a>
			return NULL;
   38ed6:	2500      	movs	r5, #0
   38ed8:	e7c3      	b.n	38e62 <z_impl_k_queue_get+0x92>
	__asm__ volatile(
   38eda:	f04f 0320 	mov.w	r3, #32
   38ede:	f3ef 8211 	mrs	r2, BASEPRI
   38ee2:	f383 8811 	msr	BASEPRI, r3
   38ee6:	f3bf 8f6f 	isb	sy
   38eea:	4620      	mov	r0, r4
   38eec:	9201      	str	r2, [sp, #4]
   38eee:	f001 fa5b 	bl	3a3a8 <z_spin_lock_valid>
   38ef2:	b968      	cbnz	r0, 38f10 <z_impl_k_queue_get+0x140>
   38ef4:	234a      	movs	r3, #74	; 0x4a
   38ef6:	4642      	mov	r2, r8
   38ef8:	4920      	ldr	r1, [pc, #128]	; (38f7c <z_impl_k_queue_get+0x1ac>)
   38efa:	4650      	mov	r0, sl
   38efc:	f004 ffcd 	bl	3de9a <printk>
   38f00:	4621      	mov	r1, r4
   38f02:	4820      	ldr	r0, [pc, #128]	; (38f84 <z_impl_k_queue_get+0x1b4>)
   38f04:	f004 ffc9 	bl	3de9a <printk>
   38f08:	214a      	movs	r1, #74	; 0x4a
   38f0a:	4640      	mov	r0, r8
   38f0c:	f005 f818 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   38f10:	4620      	mov	r0, r4
   38f12:	f001 fa67 	bl	3a3e4 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   38f16:	6830      	ldr	r0, [r6, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   38f18:	b138      	cbz	r0, 38f2a <z_impl_k_queue_get+0x15a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   38f1a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   38f1c:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   38f1e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   38f22:	4290      	cmp	r0, r2
	list->head = node;
   38f24:	6033      	str	r3, [r6, #0]
	list->tail = node;
   38f26:	bf08      	it	eq
   38f28:	6073      	streq	r3, [r6, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   38f2a:	2101      	movs	r1, #1
   38f2c:	f007 f9f4 	bl	40318 <z_queue_node_peek>
   38f30:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38f32:	4620      	mov	r0, r4
   38f34:	f001 fa46 	bl	3a3c4 <z_spin_unlock_valid>
   38f38:	b968      	cbnz	r0, 38f56 <z_impl_k_queue_get+0x186>
   38f3a:	235d      	movs	r3, #93	; 0x5d
   38f3c:	4642      	mov	r2, r8
   38f3e:	4912      	ldr	r1, [pc, #72]	; (38f88 <z_impl_k_queue_get+0x1b8>)
   38f40:	4650      	mov	r0, sl
   38f42:	f004 ffaa 	bl	3de9a <printk>
   38f46:	4621      	mov	r1, r4
   38f48:	4810      	ldr	r0, [pc, #64]	; (38f8c <z_impl_k_queue_get+0x1bc>)
   38f4a:	f004 ffa6 	bl	3de9a <printk>
   38f4e:	215d      	movs	r1, #93	; 0x5d
   38f50:	4640      	mov	r0, r8
   38f52:	f004 fff5 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   38f56:	9b01      	ldr	r3, [sp, #4]
   38f58:	f383 8811 	msr	BASEPRI, r3
   38f5c:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   38f60:	2d00      	cmp	r5, #0
   38f62:	f47f af7e 	bne.w	38e62 <z_impl_k_queue_get+0x92>
   38f66:	1c7b      	adds	r3, r7, #1
   38f68:	d0a8      	beq.n	38ebc <z_impl_k_queue_get+0xec>
	return z_impl_k_uptime_get();
   38f6a:	f007 fad1 	bl	40510 <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   38f6e:	eba0 090b 	sub.w	r9, r0, fp
	} while (!val && !done);
   38f72:	454f      	cmp	r7, r9
   38f74:	daa2      	bge.n	38ebc <z_impl_k_queue_get+0xec>
   38f76:	e7ae      	b.n	38ed6 <z_impl_k_queue_get+0x106>
   38f78:	00043dc8 	.word	0x00043dc8
   38f7c:	00043dee 	.word	0x00043dee
   38f80:	00043278 	.word	0x00043278
   38f84:	00043e03 	.word	0x00043e03
   38f88:	00043e1b 	.word	0x00043e1b
   38f8c:	00043e32 	.word	0x00043e32

00038f90 <pended_on.isra.17>:
	}
}

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   38f90:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   38f92:	b510      	push	{r4, lr}
   38f94:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   38f96:	b95b      	cbnz	r3, 38fb0 <pended_on.isra.17+0x20>
   38f98:	4906      	ldr	r1, [pc, #24]	; (38fb4 <pended_on.isra.17+0x24>)
   38f9a:	4807      	ldr	r0, [pc, #28]	; (38fb8 <pended_on.isra.17+0x28>)
   38f9c:	f240 139d 	movw	r3, #413	; 0x19d
   38fa0:	4a06      	ldr	r2, [pc, #24]	; (38fbc <pended_on.isra.17+0x2c>)
   38fa2:	f004 ff7a 	bl	3de9a <printk>
   38fa6:	f240 119d 	movw	r1, #413	; 0x19d
   38faa:	4804      	ldr	r0, [pc, #16]	; (38fbc <pended_on.isra.17+0x2c>)
   38fac:	f004 ffc8 	bl	3df40 <assert_post_action>

	return thread->base.pended_on;
}
   38fb0:	6820      	ldr	r0, [r4, #0]
   38fb2:	bd10      	pop	{r4, pc}
   38fb4:	00048d55 	.word	0x00048d55
   38fb8:	00043278 	.word	0x00043278
   38fbc:	00048d33 	.word	0x00048d33

00038fc0 <z_reset_time_slice>:
{
   38fc0:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   38fc2:	4c08      	ldr	r4, [pc, #32]	; (38fe4 <z_reset_time_slice+0x24>)
   38fc4:	6823      	ldr	r3, [r4, #0]
   38fc6:	b15b      	cbz	r3, 38fe0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   38fc8:	f7ea ffee 	bl	23fa8 <z_clock_elapsed>
   38fcc:	6823      	ldr	r3, [r4, #0]
   38fce:	4a06      	ldr	r2, [pc, #24]	; (38fe8 <z_reset_time_slice+0x28>)
   38fd0:	4418      	add	r0, r3
   38fd2:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   38fd4:	2100      	movs	r1, #0
}
   38fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   38fda:	4618      	mov	r0, r3
   38fdc:	f001 be9c 	b.w	3ad18 <z_set_timeout_expiry>
}
   38fe0:	bd10      	pop	{r4, pc}
   38fe2:	bf00      	nop
   38fe4:	200292ac 	.word	0x200292ac
   38fe8:	2002926c 	.word	0x2002926c

00038fec <k_sched_time_slice_set>:
{
   38fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38fee:	4607      	mov	r7, r0
   38ff0:	460d      	mov	r5, r1
	__asm__ volatile(
   38ff2:	f04f 0320 	mov.w	r3, #32
   38ff6:	f3ef 8411 	mrs	r4, BASEPRI
   38ffa:	f383 8811 	msr	BASEPRI, r3
   38ffe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39002:	4820      	ldr	r0, [pc, #128]	; (39084 <k_sched_time_slice_set+0x98>)
   39004:	f001 f9d0 	bl	3a3a8 <z_spin_lock_valid>
   39008:	b968      	cbnz	r0, 39026 <k_sched_time_slice_set+0x3a>
   3900a:	234a      	movs	r3, #74	; 0x4a
   3900c:	4a1e      	ldr	r2, [pc, #120]	; (39088 <k_sched_time_slice_set+0x9c>)
   3900e:	491f      	ldr	r1, [pc, #124]	; (3908c <k_sched_time_slice_set+0xa0>)
   39010:	481f      	ldr	r0, [pc, #124]	; (39090 <k_sched_time_slice_set+0xa4>)
   39012:	f004 ff42 	bl	3de9a <printk>
   39016:	491b      	ldr	r1, [pc, #108]	; (39084 <k_sched_time_slice_set+0x98>)
   39018:	481e      	ldr	r0, [pc, #120]	; (39094 <k_sched_time_slice_set+0xa8>)
   3901a:	f004 ff3e 	bl	3de9a <printk>
   3901e:	214a      	movs	r1, #74	; 0x4a
   39020:	4819      	ldr	r0, [pc, #100]	; (39088 <k_sched_time_slice_set+0x9c>)
   39022:	f004 ff8d 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   39026:	4817      	ldr	r0, [pc, #92]	; (39084 <k_sched_time_slice_set+0x98>)
   39028:	f001 f9dc 	bl	3a3e4 <z_spin_lock_set_owner>
			return (u32_t)((t * to_hz + off) / from_hz);
   3902c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   39030:	2200      	movs	r2, #0
   39032:	f240 30e7 	movw	r0, #999	; 0x3e7
   39036:	2100      	movs	r1, #0
   39038:	4b17      	ldr	r3, [pc, #92]	; (39098 <k_sched_time_slice_set+0xac>)
   3903a:	fbe6 0107 	umlal	r0, r1, r6, r7
   3903e:	611a      	str	r2, [r3, #16]
   39040:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   39044:	2300      	movs	r3, #0
   39046:	f7e3 fe99 	bl	1cd7c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   3904a:	4b14      	ldr	r3, [pc, #80]	; (3909c <k_sched_time_slice_set+0xb0>)
   3904c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   3904e:	4b14      	ldr	r3, [pc, #80]	; (390a0 <k_sched_time_slice_set+0xb4>)
   39050:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   39052:	f7ff ffb5 	bl	38fc0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39056:	480b      	ldr	r0, [pc, #44]	; (39084 <k_sched_time_slice_set+0x98>)
   39058:	f001 f9b4 	bl	3a3c4 <z_spin_unlock_valid>
   3905c:	b968      	cbnz	r0, 3907a <k_sched_time_slice_set+0x8e>
   3905e:	235d      	movs	r3, #93	; 0x5d
   39060:	4a09      	ldr	r2, [pc, #36]	; (39088 <k_sched_time_slice_set+0x9c>)
   39062:	4910      	ldr	r1, [pc, #64]	; (390a4 <k_sched_time_slice_set+0xb8>)
   39064:	480a      	ldr	r0, [pc, #40]	; (39090 <k_sched_time_slice_set+0xa4>)
   39066:	f004 ff18 	bl	3de9a <printk>
   3906a:	4906      	ldr	r1, [pc, #24]	; (39084 <k_sched_time_slice_set+0x98>)
   3906c:	480e      	ldr	r0, [pc, #56]	; (390a8 <k_sched_time_slice_set+0xbc>)
   3906e:	f004 ff14 	bl	3de9a <printk>
   39072:	215d      	movs	r1, #93	; 0x5d
   39074:	4804      	ldr	r0, [pc, #16]	; (39088 <k_sched_time_slice_set+0x9c>)
   39076:	f004 ff63 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   3907a:	f384 8811 	msr	BASEPRI, r4
   3907e:	f3bf 8f6f 	isb	sy
}
   39082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   39084:	200292a4 	.word	0x200292a4
   39088:	00043dc8 	.word	0x00043dc8
   3908c:	00043dee 	.word	0x00043dee
   39090:	00043278 	.word	0x00043278
   39094:	00043e03 	.word	0x00043e03
   39098:	2002926c 	.word	0x2002926c
   3909c:	200292ac 	.word	0x200292ac
   390a0:	200292a8 	.word	0x200292a8
   390a4:	00043e1b 	.word	0x00043e1b
   390a8:	00043e32 	.word	0x00043e32

000390ac <z_reschedule>:

	return arch_irq_unlocked(key) && !arch_is_in_isr();
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   390ac:	b538      	push	{r3, r4, r5, lr}
   390ae:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   390b0:	460d      	mov	r5, r1
   390b2:	b9c1      	cbnz	r1, 390e6 <z_reschedule+0x3a>
   390b4:	f3ef 8305 	mrs	r3, IPSR
   390b8:	b9ab      	cbnz	r3, 390e6 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   390ba:	f001 f983 	bl	3a3c4 <z_spin_unlock_valid>
   390be:	b968      	cbnz	r0, 390dc <z_reschedule+0x30>
   390c0:	2374      	movs	r3, #116	; 0x74
   390c2:	4a14      	ldr	r2, [pc, #80]	; (39114 <z_reschedule+0x68>)
   390c4:	4914      	ldr	r1, [pc, #80]	; (39118 <z_reschedule+0x6c>)
   390c6:	4815      	ldr	r0, [pc, #84]	; (3911c <z_reschedule+0x70>)
   390c8:	f004 fee7 	bl	3de9a <printk>
   390cc:	4621      	mov	r1, r4
   390ce:	4814      	ldr	r0, [pc, #80]	; (39120 <z_reschedule+0x74>)
   390d0:	f004 fee3 	bl	3de9a <printk>
   390d4:	2174      	movs	r1, #116	; 0x74
   390d6:	480f      	ldr	r0, [pc, #60]	; (39114 <z_reschedule+0x68>)
   390d8:	f004 ff32 	bl	3df40 <assert_post_action>
	if (resched(key.key)) {
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   390dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   390e0:	2000      	movs	r0, #0
   390e2:	f7eb b943 	b.w	2436c <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   390e6:	4620      	mov	r0, r4
   390e8:	f001 f96c 	bl	3a3c4 <z_spin_unlock_valid>
   390ec:	b968      	cbnz	r0, 3910a <z_reschedule+0x5e>
   390ee:	235d      	movs	r3, #93	; 0x5d
   390f0:	4a08      	ldr	r2, [pc, #32]	; (39114 <z_reschedule+0x68>)
   390f2:	4909      	ldr	r1, [pc, #36]	; (39118 <z_reschedule+0x6c>)
   390f4:	4809      	ldr	r0, [pc, #36]	; (3911c <z_reschedule+0x70>)
   390f6:	f004 fed0 	bl	3de9a <printk>
   390fa:	4621      	mov	r1, r4
   390fc:	4808      	ldr	r0, [pc, #32]	; (39120 <z_reschedule+0x74>)
   390fe:	f004 fecc 	bl	3de9a <printk>
   39102:	215d      	movs	r1, #93	; 0x5d
   39104:	4803      	ldr	r0, [pc, #12]	; (39114 <z_reschedule+0x68>)
   39106:	f004 ff1b 	bl	3df40 <assert_post_action>
   3910a:	f385 8811 	msr	BASEPRI, r5
   3910e:	f3bf 8f6f 	isb	sy
   39112:	bd38      	pop	{r3, r4, r5, pc}
   39114:	00043dc8 	.word	0x00043dc8
   39118:	00043e1b 	.word	0x00043e1b
   3911c:	00043278 	.word	0x00043278
   39120:	00043e32 	.word	0x00043e32

00039124 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   39124:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   39126:	f04f 0320 	mov.w	r3, #32
   3912a:	f3ef 8511 	mrs	r5, BASEPRI
   3912e:	f383 8811 	msr	BASEPRI, r3
   39132:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39136:	482b      	ldr	r0, [pc, #172]	; (391e4 <k_sched_lock+0xc0>)
   39138:	f001 f936 	bl	3a3a8 <z_spin_lock_valid>
   3913c:	b968      	cbnz	r0, 3915a <k_sched_lock+0x36>
   3913e:	234a      	movs	r3, #74	; 0x4a
   39140:	4a29      	ldr	r2, [pc, #164]	; (391e8 <k_sched_lock+0xc4>)
   39142:	492a      	ldr	r1, [pc, #168]	; (391ec <k_sched_lock+0xc8>)
   39144:	482a      	ldr	r0, [pc, #168]	; (391f0 <k_sched_lock+0xcc>)
   39146:	f004 fea8 	bl	3de9a <printk>
   3914a:	4926      	ldr	r1, [pc, #152]	; (391e4 <k_sched_lock+0xc0>)
   3914c:	4829      	ldr	r0, [pc, #164]	; (391f4 <k_sched_lock+0xd0>)
   3914e:	f004 fea4 	bl	3de9a <printk>
   39152:	214a      	movs	r1, #74	; 0x4a
   39154:	4824      	ldr	r0, [pc, #144]	; (391e8 <k_sched_lock+0xc4>)
   39156:	f004 fef3 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3915a:	4822      	ldr	r0, [pc, #136]	; (391e4 <k_sched_lock+0xc0>)
   3915c:	f001 f942 	bl	3a3e4 <z_spin_lock_set_owner>
   39160:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   39164:	b173      	cbz	r3, 39184 <k_sched_lock+0x60>
   39166:	4924      	ldr	r1, [pc, #144]	; (391f8 <k_sched_lock+0xd4>)
   39168:	f240 130d 	movw	r3, #269	; 0x10d
   3916c:	4a23      	ldr	r2, [pc, #140]	; (391fc <k_sched_lock+0xd8>)
   3916e:	4820      	ldr	r0, [pc, #128]	; (391f0 <k_sched_lock+0xcc>)
   39170:	f004 fe93 	bl	3de9a <printk>
   39174:	4822      	ldr	r0, [pc, #136]	; (39200 <k_sched_lock+0xdc>)
   39176:	f004 fe90 	bl	3de9a <printk>
   3917a:	f240 110d 	movw	r1, #269	; 0x10d
   3917e:	481f      	ldr	r0, [pc, #124]	; (391fc <k_sched_lock+0xd8>)
   39180:	f004 fede 	bl	3df40 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   39184:	4c1f      	ldr	r4, [pc, #124]	; (39204 <k_sched_lock+0xe0>)
   39186:	68a2      	ldr	r2, [r4, #8]
   39188:	7bd2      	ldrb	r2, [r2, #15]
   3918a:	2a01      	cmp	r2, #1
   3918c:	d10e      	bne.n	391ac <k_sched_lock+0x88>
   3918e:	491e      	ldr	r1, [pc, #120]	; (39208 <k_sched_lock+0xe4>)
   39190:	f44f 7387 	mov.w	r3, #270	; 0x10e
   39194:	4a19      	ldr	r2, [pc, #100]	; (391fc <k_sched_lock+0xd8>)
   39196:	4816      	ldr	r0, [pc, #88]	; (391f0 <k_sched_lock+0xcc>)
   39198:	f004 fe7f 	bl	3de9a <printk>
   3919c:	4818      	ldr	r0, [pc, #96]	; (39200 <k_sched_lock+0xdc>)
   3919e:	f004 fe7c 	bl	3de9a <printk>
   391a2:	f44f 7187 	mov.w	r1, #270	; 0x10e
   391a6:	4815      	ldr	r0, [pc, #84]	; (391fc <k_sched_lock+0xd8>)
   391a8:	f004 feca 	bl	3df40 <assert_post_action>
	--_current->base.sched_locked;
   391ac:	68a2      	ldr	r2, [r4, #8]
   391ae:	7bd3      	ldrb	r3, [r2, #15]
   391b0:	3b01      	subs	r3, #1
   391b2:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   391b4:	480b      	ldr	r0, [pc, #44]	; (391e4 <k_sched_lock+0xc0>)
   391b6:	f001 f905 	bl	3a3c4 <z_spin_unlock_valid>
   391ba:	b968      	cbnz	r0, 391d8 <k_sched_lock+0xb4>
   391bc:	235d      	movs	r3, #93	; 0x5d
   391be:	4a0a      	ldr	r2, [pc, #40]	; (391e8 <k_sched_lock+0xc4>)
   391c0:	4912      	ldr	r1, [pc, #72]	; (3920c <k_sched_lock+0xe8>)
   391c2:	480b      	ldr	r0, [pc, #44]	; (391f0 <k_sched_lock+0xcc>)
   391c4:	f004 fe69 	bl	3de9a <printk>
   391c8:	4906      	ldr	r1, [pc, #24]	; (391e4 <k_sched_lock+0xc0>)
   391ca:	4811      	ldr	r0, [pc, #68]	; (39210 <k_sched_lock+0xec>)
   391cc:	f004 fe65 	bl	3de9a <printk>
   391d0:	215d      	movs	r1, #93	; 0x5d
   391d2:	4805      	ldr	r0, [pc, #20]	; (391e8 <k_sched_lock+0xc4>)
   391d4:	f004 feb4 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   391d8:	f385 8811 	msr	BASEPRI, r5
   391dc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   391e0:	bd38      	pop	{r3, r4, r5, pc}
   391e2:	bf00      	nop
   391e4:	200292a4 	.word	0x200292a4
   391e8:	00043dc8 	.word	0x00043dc8
   391ec:	00043dee 	.word	0x00043dee
   391f0:	00043278 	.word	0x00043278
   391f4:	00043e03 	.word	0x00043e03
   391f8:	00048c9b 	.word	0x00048c9b
   391fc:	00048c70 	.word	0x00048c70
   39200:	00044d12 	.word	0x00044d12
   39204:	2002926c 	.word	0x2002926c
   39208:	00048cad 	.word	0x00048cad
   3920c:	00043e1b 	.word	0x00043e1b
   39210:	00043e32 	.word	0x00043e32

00039214 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   39214:	4b11      	ldr	r3, [pc, #68]	; (3925c <z_priq_dumb_remove+0x48>)
{
   39216:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   39218:	f103 0228 	add.w	r2, r3, #40	; 0x28
   3921c:	4282      	cmp	r2, r0
{
   3921e:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   39220:	d105      	bne.n	3922e <z_priq_dumb_remove+0x1a>
   39222:	689b      	ldr	r3, [r3, #8]
   39224:	428b      	cmp	r3, r1
   39226:	d102      	bne.n	3922e <z_priq_dumb_remove+0x1a>
   39228:	7b4b      	ldrb	r3, [r1, #13]
   3922a:	06db      	lsls	r3, r3, #27
   3922c:	d115      	bne.n	3925a <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3922e:	4b0c      	ldr	r3, [pc, #48]	; (39260 <z_priq_dumb_remove+0x4c>)
   39230:	429c      	cmp	r4, r3
   39232:	d10b      	bne.n	3924c <z_priq_dumb_remove+0x38>
   39234:	490b      	ldr	r1, [pc, #44]	; (39264 <z_priq_dumb_remove+0x50>)
   39236:	480c      	ldr	r0, [pc, #48]	; (39268 <z_priq_dumb_remove+0x54>)
   39238:	f44f 7346 	mov.w	r3, #792	; 0x318
   3923c:	4a0b      	ldr	r2, [pc, #44]	; (3926c <z_priq_dumb_remove+0x58>)
   3923e:	f004 fe2c 	bl	3de9a <printk>
   39242:	f44f 7146 	mov.w	r1, #792	; 0x318
   39246:	4809      	ldr	r0, [pc, #36]	; (3926c <z_priq_dumb_remove+0x58>)
   39248:	f004 fe7a 	bl	3df40 <assert_post_action>
	node->prev->next = node->next;
   3924c:	e9d4 3200 	ldrd	r3, r2, [r4]
   39250:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   39252:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   39254:	2300      	movs	r3, #0
	node->prev = NULL;
   39256:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   3925a:	bd10      	pop	{r4, pc}
   3925c:	2002926c 	.word	0x2002926c
   39260:	2002509c 	.word	0x2002509c
   39264:	00048d8b 	.word	0x00048d8b
   39268:	00043278 	.word	0x00043278
   3926c:	00048d33 	.word	0x00048d33

00039270 <z_unpend_thread>:
{
   39270:	b538      	push	{r3, r4, r5, lr}
   39272:	4604      	mov	r4, r0
	__asm__ volatile(
   39274:	f04f 0320 	mov.w	r3, #32
   39278:	f3ef 8511 	mrs	r5, BASEPRI
   3927c:	f383 8811 	msr	BASEPRI, r3
   39280:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39284:	481e      	ldr	r0, [pc, #120]	; (39300 <z_unpend_thread+0x90>)
   39286:	f001 f88f 	bl	3a3a8 <z_spin_lock_valid>
   3928a:	b968      	cbnz	r0, 392a8 <z_unpend_thread+0x38>
   3928c:	234a      	movs	r3, #74	; 0x4a
   3928e:	4a1d      	ldr	r2, [pc, #116]	; (39304 <z_unpend_thread+0x94>)
   39290:	491d      	ldr	r1, [pc, #116]	; (39308 <z_unpend_thread+0x98>)
   39292:	481e      	ldr	r0, [pc, #120]	; (3930c <z_unpend_thread+0x9c>)
   39294:	f004 fe01 	bl	3de9a <printk>
   39298:	4919      	ldr	r1, [pc, #100]	; (39300 <z_unpend_thread+0x90>)
   3929a:	481d      	ldr	r0, [pc, #116]	; (39310 <z_unpend_thread+0xa0>)
   3929c:	f004 fdfd 	bl	3de9a <printk>
   392a0:	214a      	movs	r1, #74	; 0x4a
   392a2:	4818      	ldr	r0, [pc, #96]	; (39304 <z_unpend_thread+0x94>)
   392a4:	f004 fe4c 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   392a8:	4815      	ldr	r0, [pc, #84]	; (39300 <z_unpend_thread+0x90>)
   392aa:	f001 f89b 	bl	3a3e4 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   392ae:	f104 0008 	add.w	r0, r4, #8
   392b2:	f7ff fe6d 	bl	38f90 <pended_on.isra.17>
   392b6:	4621      	mov	r1, r4
   392b8:	f7ff ffac 	bl	39214 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   392bc:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   392be:	4810      	ldr	r0, [pc, #64]	; (39300 <z_unpend_thread+0x90>)
   392c0:	f023 0302 	bic.w	r3, r3, #2
   392c4:	7363      	strb	r3, [r4, #13]
   392c6:	f001 f87d 	bl	3a3c4 <z_spin_unlock_valid>
   392ca:	b968      	cbnz	r0, 392e8 <z_unpend_thread+0x78>
   392cc:	235d      	movs	r3, #93	; 0x5d
   392ce:	4a0d      	ldr	r2, [pc, #52]	; (39304 <z_unpend_thread+0x94>)
   392d0:	4910      	ldr	r1, [pc, #64]	; (39314 <z_unpend_thread+0xa4>)
   392d2:	480e      	ldr	r0, [pc, #56]	; (3930c <z_unpend_thread+0x9c>)
   392d4:	f004 fde1 	bl	3de9a <printk>
   392d8:	4909      	ldr	r1, [pc, #36]	; (39300 <z_unpend_thread+0x90>)
   392da:	480f      	ldr	r0, [pc, #60]	; (39318 <z_unpend_thread+0xa8>)
   392dc:	f004 fddd 	bl	3de9a <printk>
   392e0:	215d      	movs	r1, #93	; 0x5d
   392e2:	4808      	ldr	r0, [pc, #32]	; (39304 <z_unpend_thread+0x94>)
   392e4:	f004 fe2c 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   392e8:	f385 8811 	msr	BASEPRI, r5
   392ec:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   392f0:	2300      	movs	r3, #0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   392f2:	f104 0018 	add.w	r0, r4, #24
   392f6:	60a3      	str	r3, [r4, #8]
}
   392f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   392fc:	f001 bc16 	b.w	3ab2c <z_abort_timeout>
   39300:	200292a4 	.word	0x200292a4
   39304:	00043dc8 	.word	0x00043dc8
   39308:	00043dee 	.word	0x00043dee
   3930c:	00043278 	.word	0x00043278
   39310:	00043e03 	.word	0x00043e03
   39314:	00043e1b 	.word	0x00043e1b
   39318:	00043e32 	.word	0x00043e32

0003931c <update_cache>:
{
   3931c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   3931e:	4c15      	ldr	r4, [pc, #84]	; (39374 <update_cache+0x58>)
{
   39320:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   39322:	f104 0028 	add.w	r0, r4, #40	; 0x28
   39326:	f007 f839 	bl	4039c <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
   3932a:	4605      	mov	r5, r0
   3932c:	b900      	cbnz	r0, 39330 <update_cache+0x14>
   3932e:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   39330:	b9ca      	cbnz	r2, 39366 <update_cache+0x4a>
	__ASSERT(_current != NULL, "");
   39332:	68a3      	ldr	r3, [r4, #8]
   39334:	b963      	cbnz	r3, 39350 <update_cache+0x34>
   39336:	4910      	ldr	r1, [pc, #64]	; (39378 <update_cache+0x5c>)
   39338:	237e      	movs	r3, #126	; 0x7e
   3933a:	4a10      	ldr	r2, [pc, #64]	; (3937c <update_cache+0x60>)
   3933c:	4810      	ldr	r0, [pc, #64]	; (39380 <update_cache+0x64>)
   3933e:	f004 fdac 	bl	3de9a <printk>
   39342:	4810      	ldr	r0, [pc, #64]	; (39384 <update_cache+0x68>)
   39344:	f004 fda9 	bl	3de9a <printk>
   39348:	217e      	movs	r1, #126	; 0x7e
   3934a:	480c      	ldr	r0, [pc, #48]	; (3937c <update_cache+0x60>)
   3934c:	f004 fdf8 	bl	3df40 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   39350:	68a3      	ldr	r3, [r4, #8]
   39352:	7b5a      	ldrb	r2, [r3, #13]
   39354:	06d2      	lsls	r2, r2, #27
   39356:	d106      	bne.n	39366 <update_cache+0x4a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   39358:	69aa      	ldr	r2, [r5, #24]
   3935a:	b922      	cbnz	r2, 39366 <update_cache+0x4a>
	if (is_preempt(_current) || is_metairq(thread)) {
   3935c:	89da      	ldrh	r2, [r3, #14]
   3935e:	2a7f      	cmp	r2, #127	; 0x7f
   39360:	d901      	bls.n	39366 <update_cache+0x4a>
		_kernel.ready_q.cache = _current;
   39362:	6263      	str	r3, [r4, #36]	; 0x24
}
   39364:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   39366:	68a3      	ldr	r3, [r4, #8]
   39368:	42ab      	cmp	r3, r5
   3936a:	d001      	beq.n	39370 <update_cache+0x54>
			z_reset_time_slice();
   3936c:	f7ff fe28 	bl	38fc0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   39370:	6265      	str	r5, [r4, #36]	; 0x24
}
   39372:	e7f7      	b.n	39364 <update_cache+0x48>
   39374:	2002926c 	.word	0x2002926c
   39378:	00048d6c 	.word	0x00048d6c
   3937c:	00048d33 	.word	0x00048d33
   39380:	00043278 	.word	0x00043278
   39384:	00044d12 	.word	0x00044d12

00039388 <k_sched_unlock>:
{
   39388:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current->base.sched_locked != 0, "");
   3938a:	4c31      	ldr	r4, [pc, #196]	; (39450 <k_sched_unlock+0xc8>)
   3938c:	68a2      	ldr	r2, [r4, #8]
   3938e:	7bd2      	ldrb	r2, [r2, #15]
   39390:	b972      	cbnz	r2, 393b0 <k_sched_unlock+0x28>
   39392:	4930      	ldr	r1, [pc, #192]	; (39454 <k_sched_unlock+0xcc>)
   39394:	f240 23ad 	movw	r3, #685	; 0x2ad
   39398:	4a2f      	ldr	r2, [pc, #188]	; (39458 <k_sched_unlock+0xd0>)
   3939a:	4830      	ldr	r0, [pc, #192]	; (3945c <k_sched_unlock+0xd4>)
   3939c:	f004 fd7d 	bl	3de9a <printk>
   393a0:	482f      	ldr	r0, [pc, #188]	; (39460 <k_sched_unlock+0xd8>)
   393a2:	f004 fd7a 	bl	3de9a <printk>
   393a6:	f240 21ad 	movw	r1, #685	; 0x2ad
   393aa:	482b      	ldr	r0, [pc, #172]	; (39458 <k_sched_unlock+0xd0>)
   393ac:	f004 fdc8 	bl	3df40 <assert_post_action>
   393b0:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   393b4:	b173      	cbz	r3, 393d4 <k_sched_unlock+0x4c>
   393b6:	492b      	ldr	r1, [pc, #172]	; (39464 <k_sched_unlock+0xdc>)
   393b8:	f240 23ae 	movw	r3, #686	; 0x2ae
   393bc:	4a26      	ldr	r2, [pc, #152]	; (39458 <k_sched_unlock+0xd0>)
   393be:	4827      	ldr	r0, [pc, #156]	; (3945c <k_sched_unlock+0xd4>)
   393c0:	f004 fd6b 	bl	3de9a <printk>
   393c4:	4826      	ldr	r0, [pc, #152]	; (39460 <k_sched_unlock+0xd8>)
   393c6:	f004 fd68 	bl	3de9a <printk>
   393ca:	f240 21ae 	movw	r1, #686	; 0x2ae
   393ce:	4822      	ldr	r0, [pc, #136]	; (39458 <k_sched_unlock+0xd0>)
   393d0:	f004 fdb6 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   393d4:	f04f 0320 	mov.w	r3, #32
   393d8:	f3ef 8511 	mrs	r5, BASEPRI
   393dc:	f383 8811 	msr	BASEPRI, r3
   393e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   393e4:	4820      	ldr	r0, [pc, #128]	; (39468 <k_sched_unlock+0xe0>)
   393e6:	f000 ffdf 	bl	3a3a8 <z_spin_lock_valid>
   393ea:	b968      	cbnz	r0, 39408 <k_sched_unlock+0x80>
   393ec:	234a      	movs	r3, #74	; 0x4a
   393ee:	4a1f      	ldr	r2, [pc, #124]	; (3946c <k_sched_unlock+0xe4>)
   393f0:	491f      	ldr	r1, [pc, #124]	; (39470 <k_sched_unlock+0xe8>)
   393f2:	481a      	ldr	r0, [pc, #104]	; (3945c <k_sched_unlock+0xd4>)
   393f4:	f004 fd51 	bl	3de9a <printk>
   393f8:	491b      	ldr	r1, [pc, #108]	; (39468 <k_sched_unlock+0xe0>)
   393fa:	481e      	ldr	r0, [pc, #120]	; (39474 <k_sched_unlock+0xec>)
   393fc:	f004 fd4d 	bl	3de9a <printk>
   39400:	214a      	movs	r1, #74	; 0x4a
   39402:	481a      	ldr	r0, [pc, #104]	; (3946c <k_sched_unlock+0xe4>)
   39404:	f004 fd9c 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   39408:	4817      	ldr	r0, [pc, #92]	; (39468 <k_sched_unlock+0xe0>)
   3940a:	f000 ffeb 	bl	3a3e4 <z_spin_lock_set_owner>
		++_current->base.sched_locked;
   3940e:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   39410:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   39412:	7bd3      	ldrb	r3, [r2, #15]
   39414:	3301      	adds	r3, #1
   39416:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   39418:	f7ff ff80 	bl	3931c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3941c:	4812      	ldr	r0, [pc, #72]	; (39468 <k_sched_unlock+0xe0>)
   3941e:	f000 ffd1 	bl	3a3c4 <z_spin_unlock_valid>
   39422:	b968      	cbnz	r0, 39440 <k_sched_unlock+0xb8>
   39424:	235d      	movs	r3, #93	; 0x5d
   39426:	4a11      	ldr	r2, [pc, #68]	; (3946c <k_sched_unlock+0xe4>)
   39428:	4913      	ldr	r1, [pc, #76]	; (39478 <k_sched_unlock+0xf0>)
   3942a:	480c      	ldr	r0, [pc, #48]	; (3945c <k_sched_unlock+0xd4>)
   3942c:	f004 fd35 	bl	3de9a <printk>
   39430:	490d      	ldr	r1, [pc, #52]	; (39468 <k_sched_unlock+0xe0>)
   39432:	4812      	ldr	r0, [pc, #72]	; (3947c <k_sched_unlock+0xf4>)
   39434:	f004 fd31 	bl	3de9a <printk>
   39438:	215d      	movs	r1, #93	; 0x5d
   3943a:	480c      	ldr	r0, [pc, #48]	; (3946c <k_sched_unlock+0xe4>)
   3943c:	f004 fd80 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   39440:	f385 8811 	msr	BASEPRI, r5
   39444:	f3bf 8f6f 	isb	sy
}
   39448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   3944c:	f006 bf9c 	b.w	40388 <z_reschedule_unlocked>
   39450:	2002926c 	.word	0x2002926c
   39454:	00048cd5 	.word	0x00048cd5
   39458:	00048d33 	.word	0x00048d33
   3945c:	00043278 	.word	0x00043278
   39460:	00044d12 	.word	0x00044d12
   39464:	00048c9b 	.word	0x00048c9b
   39468:	200292a4 	.word	0x200292a4
   3946c:	00043dc8 	.word	0x00043dc8
   39470:	00043dee 	.word	0x00043dee
   39474:	00043e03 	.word	0x00043e03
   39478:	00043e1b 	.word	0x00043e1b
   3947c:	00043e32 	.word	0x00043e32

00039480 <z_add_thread_to_ready_q>:
{
   39480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39482:	4604      	mov	r4, r0
	__asm__ volatile(
   39484:	f04f 0320 	mov.w	r3, #32
   39488:	f3ef 8511 	mrs	r5, BASEPRI
   3948c:	f383 8811 	msr	BASEPRI, r3
   39490:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39494:	482f      	ldr	r0, [pc, #188]	; (39554 <z_add_thread_to_ready_q+0xd4>)
   39496:	f000 ff87 	bl	3a3a8 <z_spin_lock_valid>
   3949a:	b968      	cbnz	r0, 394b8 <z_add_thread_to_ready_q+0x38>
   3949c:	234a      	movs	r3, #74	; 0x4a
   3949e:	4a2e      	ldr	r2, [pc, #184]	; (39558 <z_add_thread_to_ready_q+0xd8>)
   394a0:	492e      	ldr	r1, [pc, #184]	; (3955c <z_add_thread_to_ready_q+0xdc>)
   394a2:	482f      	ldr	r0, [pc, #188]	; (39560 <z_add_thread_to_ready_q+0xe0>)
   394a4:	f004 fcf9 	bl	3de9a <printk>
   394a8:	492a      	ldr	r1, [pc, #168]	; (39554 <z_add_thread_to_ready_q+0xd4>)
   394aa:	482e      	ldr	r0, [pc, #184]	; (39564 <z_add_thread_to_ready_q+0xe4>)
   394ac:	f004 fcf5 	bl	3de9a <printk>
   394b0:	214a      	movs	r1, #74	; 0x4a
   394b2:	4829      	ldr	r0, [pc, #164]	; (39558 <z_add_thread_to_ready_q+0xd8>)
   394b4:	f004 fd44 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   394b8:	4826      	ldr	r0, [pc, #152]	; (39554 <z_add_thread_to_ready_q+0xd4>)
   394ba:	f000 ff93 	bl	3a3e4 <z_spin_lock_set_owner>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   394be:	4b2a      	ldr	r3, [pc, #168]	; (39568 <z_add_thread_to_ready_q+0xe8>)
   394c0:	429c      	cmp	r4, r3
   394c2:	d10b      	bne.n	394dc <z_add_thread_to_ready_q+0x5c>
   394c4:	4929      	ldr	r1, [pc, #164]	; (3956c <z_add_thread_to_ready_q+0xec>)
   394c6:	4826      	ldr	r0, [pc, #152]	; (39560 <z_add_thread_to_ready_q+0xe0>)
   394c8:	f240 3302 	movw	r3, #770	; 0x302
   394cc:	4a28      	ldr	r2, [pc, #160]	; (39570 <z_add_thread_to_ready_q+0xf0>)
   394ce:	f004 fce4 	bl	3de9a <printk>
   394d2:	f240 3102 	movw	r1, #770	; 0x302
   394d6:	4826      	ldr	r0, [pc, #152]	; (39570 <z_add_thread_to_ready_q+0xf0>)
   394d8:	f004 fd32 	bl	3df40 <assert_post_action>
	return list->head == list;
   394dc:	4a25      	ldr	r2, [pc, #148]	; (39574 <z_add_thread_to_ready_q+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   394de:	f102 0128 	add.w	r1, r2, #40	; 0x28
   394e2:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   394e6:	428b      	cmp	r3, r1
   394e8:	d02e      	beq.n	39548 <z_add_thread_to_ready_q+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   394ea:	b36b      	cbz	r3, 39548 <z_add_thread_to_ready_q+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   394ec:	f994 600e 	ldrsb.w	r6, [r4, #14]
   394f0:	f993 700e 	ldrsb.w	r7, [r3, #14]
   394f4:	42b7      	cmp	r7, r6
   394f6:	dd22      	ble.n	3953e <z_add_thread_to_ready_q+0xbe>
	node->prev = successor->prev;
   394f8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   394fa:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   394fe:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   39500:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   39502:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   39504:	2000      	movs	r0, #0
   39506:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3950a:	7363      	strb	r3, [r4, #13]
   3950c:	f7ff ff06 	bl	3931c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39510:	4810      	ldr	r0, [pc, #64]	; (39554 <z_add_thread_to_ready_q+0xd4>)
   39512:	f000 ff57 	bl	3a3c4 <z_spin_unlock_valid>
   39516:	b968      	cbnz	r0, 39534 <z_add_thread_to_ready_q+0xb4>
   39518:	235d      	movs	r3, #93	; 0x5d
   3951a:	4a0f      	ldr	r2, [pc, #60]	; (39558 <z_add_thread_to_ready_q+0xd8>)
   3951c:	4916      	ldr	r1, [pc, #88]	; (39578 <z_add_thread_to_ready_q+0xf8>)
   3951e:	4810      	ldr	r0, [pc, #64]	; (39560 <z_add_thread_to_ready_q+0xe0>)
   39520:	f004 fcbb 	bl	3de9a <printk>
   39524:	490b      	ldr	r1, [pc, #44]	; (39554 <z_add_thread_to_ready_q+0xd4>)
   39526:	4815      	ldr	r0, [pc, #84]	; (3957c <z_add_thread_to_ready_q+0xfc>)
   39528:	f004 fcb7 	bl	3de9a <printk>
   3952c:	215d      	movs	r1, #93	; 0x5d
   3952e:	480a      	ldr	r0, [pc, #40]	; (39558 <z_add_thread_to_ready_q+0xd8>)
   39530:	f004 fd06 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   39534:	f385 8811 	msr	BASEPRI, r5
   39538:	f3bf 8f6f 	isb	sy
}
   3953c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   3953e:	4298      	cmp	r0, r3
   39540:	d002      	beq.n	39548 <z_add_thread_to_ready_q+0xc8>
   39542:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   39544:	2b00      	cmp	r3, #0
   39546:	d1d3      	bne.n	394f0 <z_add_thread_to_ready_q+0x70>
	node->prev = list->tail;
   39548:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   3954c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3954e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   39550:	62d4      	str	r4, [r2, #44]	; 0x2c
   39552:	e7d6      	b.n	39502 <z_add_thread_to_ready_q+0x82>
   39554:	200292a4 	.word	0x200292a4
   39558:	00043dc8 	.word	0x00043dc8
   3955c:	00043dee 	.word	0x00043dee
   39560:	00043278 	.word	0x00043278
   39564:	00043e03 	.word	0x00043e03
   39568:	2002509c 	.word	0x2002509c
   3956c:	00048d8b 	.word	0x00048d8b
   39570:	00048d33 	.word	0x00048d33
   39574:	2002926c 	.word	0x2002926c
   39578:	00043e1b 	.word	0x00043e1b
   3957c:	00043e32 	.word	0x00043e32

00039580 <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
   39580:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   39584:	b570      	push	{r4, r5, r6, lr}
   39586:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   39588:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
   3958c:	2b00      	cmp	r3, #0
   3958e:	d042      	beq.n	39616 <z_thread_timeout+0x96>
	__asm__ volatile(
   39590:	f04f 0320 	mov.w	r3, #32
   39594:	f3ef 8611 	mrs	r6, BASEPRI
   39598:	f383 8811 	msr	BASEPRI, r3
   3959c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   395a0:	4825      	ldr	r0, [pc, #148]	; (39638 <z_thread_timeout+0xb8>)
   395a2:	f000 ff01 	bl	3a3a8 <z_spin_lock_valid>
   395a6:	b968      	cbnz	r0, 395c4 <z_thread_timeout+0x44>
   395a8:	234a      	movs	r3, #74	; 0x4a
   395aa:	4a24      	ldr	r2, [pc, #144]	; (3963c <z_thread_timeout+0xbc>)
   395ac:	4924      	ldr	r1, [pc, #144]	; (39640 <z_thread_timeout+0xc0>)
   395ae:	4825      	ldr	r0, [pc, #148]	; (39644 <z_thread_timeout+0xc4>)
   395b0:	f004 fc73 	bl	3de9a <printk>
   395b4:	4920      	ldr	r1, [pc, #128]	; (39638 <z_thread_timeout+0xb8>)
   395b6:	4824      	ldr	r0, [pc, #144]	; (39648 <z_thread_timeout+0xc8>)
   395b8:	f004 fc6f 	bl	3de9a <printk>
   395bc:	214a      	movs	r1, #74	; 0x4a
   395be:	481f      	ldr	r0, [pc, #124]	; (3963c <z_thread_timeout+0xbc>)
   395c0:	f004 fcbe 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   395c4:	481c      	ldr	r0, [pc, #112]	; (39638 <z_thread_timeout+0xb8>)
   395c6:	f000 ff0d 	bl	3a3e4 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   395ca:	f1a4 0010 	sub.w	r0, r4, #16
   395ce:	f7ff fcdf 	bl	38f90 <pended_on.isra.17>
   395d2:	4629      	mov	r1, r5
   395d4:	f7ff fe1e 	bl	39214 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   395d8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   395dc:	4816      	ldr	r0, [pc, #88]	; (39638 <z_thread_timeout+0xb8>)
   395de:	f023 0302 	bic.w	r3, r3, #2
   395e2:	f804 3c0b 	strb.w	r3, [r4, #-11]
   395e6:	f000 feed 	bl	3a3c4 <z_spin_unlock_valid>
   395ea:	b968      	cbnz	r0, 39608 <z_thread_timeout+0x88>
   395ec:	235d      	movs	r3, #93	; 0x5d
   395ee:	4a13      	ldr	r2, [pc, #76]	; (3963c <z_thread_timeout+0xbc>)
   395f0:	4916      	ldr	r1, [pc, #88]	; (3964c <z_thread_timeout+0xcc>)
   395f2:	4814      	ldr	r0, [pc, #80]	; (39644 <z_thread_timeout+0xc4>)
   395f4:	f004 fc51 	bl	3de9a <printk>
   395f8:	490f      	ldr	r1, [pc, #60]	; (39638 <z_thread_timeout+0xb8>)
   395fa:	4815      	ldr	r0, [pc, #84]	; (39650 <z_thread_timeout+0xd0>)
   395fc:	f004 fc4d 	bl	3de9a <printk>
   39600:	215d      	movs	r1, #93	; 0x5d
   39602:	480e      	ldr	r0, [pc, #56]	; (3963c <z_thread_timeout+0xbc>)
   39604:	f004 fc9c 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   39608:	f386 8811 	msr	BASEPRI, r6
   3960c:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   39610:	2300      	movs	r3, #0
   39612:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   39616:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   3961a:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   3961c:	f023 0314 	bic.w	r3, r3, #20
   39620:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   39624:	f006 fe92 	bl	4034c <z_is_thread_ready>
   39628:	b120      	cbz	r0, 39634 <z_thread_timeout+0xb4>
		z_add_thread_to_ready_q(thread);
   3962a:	4628      	mov	r0, r5
}
   3962c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   39630:	f7ff bf26 	b.w	39480 <z_add_thread_to_ready_q>
   39634:	bd70      	pop	{r4, r5, r6, pc}
   39636:	bf00      	nop
   39638:	200292a4 	.word	0x200292a4
   3963c:	00043dc8 	.word	0x00043dc8
   39640:	00043dee 	.word	0x00043dee
   39644:	00043278 	.word	0x00043278
   39648:	00043e03 	.word	0x00043e03
   3964c:	00043e1b 	.word	0x00043e1b
   39650:	00043e32 	.word	0x00043e32

00039654 <z_move_thread_to_end_of_prio_q>:
{
   39654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39656:	4604      	mov	r4, r0
	__asm__ volatile(
   39658:	f04f 0320 	mov.w	r3, #32
   3965c:	f3ef 8511 	mrs	r5, BASEPRI
   39660:	f383 8811 	msr	BASEPRI, r3
   39664:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39668:	4835      	ldr	r0, [pc, #212]	; (39740 <z_move_thread_to_end_of_prio_q+0xec>)
   3966a:	f000 fe9d 	bl	3a3a8 <z_spin_lock_valid>
   3966e:	b968      	cbnz	r0, 3968c <z_move_thread_to_end_of_prio_q+0x38>
   39670:	234a      	movs	r3, #74	; 0x4a
   39672:	4a34      	ldr	r2, [pc, #208]	; (39744 <z_move_thread_to_end_of_prio_q+0xf0>)
   39674:	4934      	ldr	r1, [pc, #208]	; (39748 <z_move_thread_to_end_of_prio_q+0xf4>)
   39676:	4835      	ldr	r0, [pc, #212]	; (3974c <z_move_thread_to_end_of_prio_q+0xf8>)
   39678:	f004 fc0f 	bl	3de9a <printk>
   3967c:	4930      	ldr	r1, [pc, #192]	; (39740 <z_move_thread_to_end_of_prio_q+0xec>)
   3967e:	4834      	ldr	r0, [pc, #208]	; (39750 <z_move_thread_to_end_of_prio_q+0xfc>)
   39680:	f004 fc0b 	bl	3de9a <printk>
   39684:	214a      	movs	r1, #74	; 0x4a
   39686:	482f      	ldr	r0, [pc, #188]	; (39744 <z_move_thread_to_end_of_prio_q+0xf0>)
   39688:	f004 fc5a 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3968c:	482c      	ldr	r0, [pc, #176]	; (39740 <z_move_thread_to_end_of_prio_q+0xec>)
   3968e:	f000 fea9 	bl	3a3e4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   39692:	f994 300d 	ldrsb.w	r3, [r4, #13]
   39696:	2b00      	cmp	r3, #0
   39698:	da03      	bge.n	396a2 <z_move_thread_to_end_of_prio_q+0x4e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   3969a:	4621      	mov	r1, r4
   3969c:	482d      	ldr	r0, [pc, #180]	; (39754 <z_move_thread_to_end_of_prio_q+0x100>)
   3969e:	f7ff fdb9 	bl	39214 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   396a2:	4b2d      	ldr	r3, [pc, #180]	; (39758 <z_move_thread_to_end_of_prio_q+0x104>)
   396a4:	429c      	cmp	r4, r3
   396a6:	d10b      	bne.n	396c0 <z_move_thread_to_end_of_prio_q+0x6c>
   396a8:	492c      	ldr	r1, [pc, #176]	; (3975c <z_move_thread_to_end_of_prio_q+0x108>)
   396aa:	4828      	ldr	r0, [pc, #160]	; (3974c <z_move_thread_to_end_of_prio_q+0xf8>)
   396ac:	f240 3302 	movw	r3, #770	; 0x302
   396b0:	4a2b      	ldr	r2, [pc, #172]	; (39760 <z_move_thread_to_end_of_prio_q+0x10c>)
   396b2:	f004 fbf2 	bl	3de9a <printk>
   396b6:	f240 3102 	movw	r1, #770	; 0x302
   396ba:	4829      	ldr	r0, [pc, #164]	; (39760 <z_move_thread_to_end_of_prio_q+0x10c>)
   396bc:	f004 fc40 	bl	3df40 <assert_post_action>
	return list->head == list;
   396c0:	4a28      	ldr	r2, [pc, #160]	; (39764 <z_move_thread_to_end_of_prio_q+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   396c2:	f102 0128 	add.w	r1, r2, #40	; 0x28
   396c6:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   396ca:	428b      	cmp	r3, r1
   396cc:	d032      	beq.n	39734 <z_move_thread_to_end_of_prio_q+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   396ce:	2b00      	cmp	r3, #0
   396d0:	d030      	beq.n	39734 <z_move_thread_to_end_of_prio_q+0xe0>
	if (thread_1->base.prio < thread_2->base.prio) {
   396d2:	f994 600e 	ldrsb.w	r6, [r4, #14]
   396d6:	f993 700e 	ldrsb.w	r7, [r3, #14]
   396da:	42b7      	cmp	r7, r6
   396dc:	dd25      	ble.n	3972a <z_move_thread_to_end_of_prio_q+0xd6>
	node->prev = successor->prev;
   396de:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   396e0:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   396e4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   396e6:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   396e8:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   396ea:	6890      	ldr	r0, [r2, #8]
   396ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
   396f0:	7363      	strb	r3, [r4, #13]
   396f2:	1b03      	subs	r3, r0, r4
   396f4:	4258      	negs	r0, r3
   396f6:	4158      	adcs	r0, r3
   396f8:	f7ff fe10 	bl	3931c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   396fc:	4810      	ldr	r0, [pc, #64]	; (39740 <z_move_thread_to_end_of_prio_q+0xec>)
   396fe:	f000 fe61 	bl	3a3c4 <z_spin_unlock_valid>
   39702:	b968      	cbnz	r0, 39720 <z_move_thread_to_end_of_prio_q+0xcc>
   39704:	235d      	movs	r3, #93	; 0x5d
   39706:	4a0f      	ldr	r2, [pc, #60]	; (39744 <z_move_thread_to_end_of_prio_q+0xf0>)
   39708:	4917      	ldr	r1, [pc, #92]	; (39768 <z_move_thread_to_end_of_prio_q+0x114>)
   3970a:	4810      	ldr	r0, [pc, #64]	; (3974c <z_move_thread_to_end_of_prio_q+0xf8>)
   3970c:	f004 fbc5 	bl	3de9a <printk>
   39710:	490b      	ldr	r1, [pc, #44]	; (39740 <z_move_thread_to_end_of_prio_q+0xec>)
   39712:	4816      	ldr	r0, [pc, #88]	; (3976c <z_move_thread_to_end_of_prio_q+0x118>)
   39714:	f004 fbc1 	bl	3de9a <printk>
   39718:	215d      	movs	r1, #93	; 0x5d
   3971a:	480a      	ldr	r0, [pc, #40]	; (39744 <z_move_thread_to_end_of_prio_q+0xf0>)
   3971c:	f004 fc10 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   39720:	f385 8811 	msr	BASEPRI, r5
   39724:	f3bf 8f6f 	isb	sy
}
   39728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   3972a:	4298      	cmp	r0, r3
   3972c:	d002      	beq.n	39734 <z_move_thread_to_end_of_prio_q+0xe0>
   3972e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   39730:	2b00      	cmp	r3, #0
   39732:	d1d0      	bne.n	396d6 <z_move_thread_to_end_of_prio_q+0x82>
	node->prev = list->tail;
   39734:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   39738:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3973a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3973c:	62d4      	str	r4, [r2, #44]	; 0x2c
   3973e:	e7d3      	b.n	396e8 <z_move_thread_to_end_of_prio_q+0x94>
   39740:	200292a4 	.word	0x200292a4
   39744:	00043dc8 	.word	0x00043dc8
   39748:	00043dee 	.word	0x00043dee
   3974c:	00043278 	.word	0x00043278
   39750:	00043e03 	.word	0x00043e03
   39754:	20029294 	.word	0x20029294
   39758:	2002509c 	.word	0x2002509c
   3975c:	00048d8b 	.word	0x00048d8b
   39760:	00048d33 	.word	0x00048d33
   39764:	2002926c 	.word	0x2002926c
   39768:	00043e1b 	.word	0x00043e1b
   3976c:	00043e32 	.word	0x00043e32

00039770 <z_time_slice>:
	if (pending_current == _current) {
   39770:	4a15      	ldr	r2, [pc, #84]	; (397c8 <z_time_slice+0x58>)
   39772:	4916      	ldr	r1, [pc, #88]	; (397cc <z_time_slice+0x5c>)
{
   39774:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   39776:	680c      	ldr	r4, [r1, #0]
   39778:	6893      	ldr	r3, [r2, #8]
   3977a:	42a3      	cmp	r3, r4
   3977c:	4614      	mov	r4, r2
   3977e:	d103      	bne.n	39788 <z_time_slice+0x18>
}
   39780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   39784:	f7ff bc1c 	b.w	38fc0 <z_reset_time_slice>
	pending_current = NULL;
   39788:	2500      	movs	r5, #0
   3978a:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   3978c:	4910      	ldr	r1, [pc, #64]	; (397d0 <z_time_slice+0x60>)
   3978e:	6809      	ldr	r1, [r1, #0]
   39790:	b1b9      	cbz	r1, 397c2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   39792:	89d9      	ldrh	r1, [r3, #14]
   39794:	297f      	cmp	r1, #127	; 0x7f
   39796:	d814      	bhi.n	397c2 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   39798:	490e      	ldr	r1, [pc, #56]	; (397d4 <z_time_slice+0x64>)
   3979a:	f993 500e 	ldrsb.w	r5, [r3, #14]
   3979e:	6809      	ldr	r1, [r1, #0]
   397a0:	428d      	cmp	r5, r1
   397a2:	db0e      	blt.n	397c2 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   397a4:	490c      	ldr	r1, [pc, #48]	; (397d8 <z_time_slice+0x68>)
   397a6:	428b      	cmp	r3, r1
   397a8:	d00b      	beq.n	397c2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   397aa:	6999      	ldr	r1, [r3, #24]
   397ac:	b949      	cbnz	r1, 397c2 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   397ae:	6911      	ldr	r1, [r2, #16]
   397b0:	4281      	cmp	r1, r0
   397b2:	dc03      	bgt.n	397bc <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   397b4:	4618      	mov	r0, r3
   397b6:	f7ff ff4d 	bl	39654 <z_move_thread_to_end_of_prio_q>
   397ba:	e7e1      	b.n	39780 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   397bc:	1a09      	subs	r1, r1, r0
   397be:	6111      	str	r1, [r2, #16]
}
   397c0:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   397c2:	2300      	movs	r3, #0
   397c4:	6123      	str	r3, [r4, #16]
   397c6:	e7fb      	b.n	397c0 <z_time_slice+0x50>
   397c8:	2002926c 	.word	0x2002926c
   397cc:	200292a0 	.word	0x200292a0
   397d0:	200292ac 	.word	0x200292ac
   397d4:	200292a8 	.word	0x200292a8
   397d8:	2002509c 	.word	0x2002509c

000397dc <z_thread_single_suspend>:
{
   397dc:	b570      	push	{r4, r5, r6, lr}
   397de:	4604      	mov	r4, r0
   397e0:	3018      	adds	r0, #24
   397e2:	f001 f9a3 	bl	3ab2c <z_abort_timeout>
	__asm__ volatile(
   397e6:	f04f 0320 	mov.w	r3, #32
   397ea:	f3ef 8611 	mrs	r6, BASEPRI
   397ee:	f383 8811 	msr	BASEPRI, r3
   397f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   397f6:	4825      	ldr	r0, [pc, #148]	; (3988c <z_thread_single_suspend+0xb0>)
   397f8:	f000 fdd6 	bl	3a3a8 <z_spin_lock_valid>
   397fc:	b968      	cbnz	r0, 3981a <z_thread_single_suspend+0x3e>
   397fe:	234a      	movs	r3, #74	; 0x4a
   39800:	4a23      	ldr	r2, [pc, #140]	; (39890 <z_thread_single_suspend+0xb4>)
   39802:	4924      	ldr	r1, [pc, #144]	; (39894 <z_thread_single_suspend+0xb8>)
   39804:	4824      	ldr	r0, [pc, #144]	; (39898 <z_thread_single_suspend+0xbc>)
   39806:	f004 fb48 	bl	3de9a <printk>
   3980a:	4920      	ldr	r1, [pc, #128]	; (3988c <z_thread_single_suspend+0xb0>)
   3980c:	4823      	ldr	r0, [pc, #140]	; (3989c <z_thread_single_suspend+0xc0>)
   3980e:	f004 fb44 	bl	3de9a <printk>
   39812:	214a      	movs	r1, #74	; 0x4a
   39814:	481e      	ldr	r0, [pc, #120]	; (39890 <z_thread_single_suspend+0xb4>)
   39816:	f004 fb93 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3981a:	481c      	ldr	r0, [pc, #112]	; (3988c <z_thread_single_suspend+0xb0>)
   3981c:	f000 fde2 	bl	3a3e4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   39820:	f994 300d 	ldrsb.w	r3, [r4, #13]
   39824:	2b00      	cmp	r3, #0
   39826:	da07      	bge.n	39838 <z_thread_single_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   39828:	4621      	mov	r1, r4
   3982a:	481d      	ldr	r0, [pc, #116]	; (398a0 <z_thread_single_suspend+0xc4>)
   3982c:	f7ff fcf2 	bl	39214 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   39830:	7b63      	ldrb	r3, [r4, #13]
   39832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   39836:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   39838:	4d1a      	ldr	r5, [pc, #104]	; (398a4 <z_thread_single_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   3983a:	7b63      	ldrb	r3, [r4, #13]
   3983c:	68a8      	ldr	r0, [r5, #8]
   3983e:	f043 0310 	orr.w	r3, r3, #16
   39842:	7363      	strb	r3, [r4, #13]
   39844:	1b03      	subs	r3, r0, r4
   39846:	4258      	negs	r0, r3
   39848:	4158      	adcs	r0, r3
   3984a:	f7ff fd67 	bl	3931c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3984e:	480f      	ldr	r0, [pc, #60]	; (3988c <z_thread_single_suspend+0xb0>)
   39850:	f000 fdb8 	bl	3a3c4 <z_spin_unlock_valid>
   39854:	b968      	cbnz	r0, 39872 <z_thread_single_suspend+0x96>
   39856:	235d      	movs	r3, #93	; 0x5d
   39858:	4a0d      	ldr	r2, [pc, #52]	; (39890 <z_thread_single_suspend+0xb4>)
   3985a:	4913      	ldr	r1, [pc, #76]	; (398a8 <z_thread_single_suspend+0xcc>)
   3985c:	480e      	ldr	r0, [pc, #56]	; (39898 <z_thread_single_suspend+0xbc>)
   3985e:	f004 fb1c 	bl	3de9a <printk>
   39862:	490a      	ldr	r1, [pc, #40]	; (3988c <z_thread_single_suspend+0xb0>)
   39864:	4811      	ldr	r0, [pc, #68]	; (398ac <z_thread_single_suspend+0xd0>)
   39866:	f004 fb18 	bl	3de9a <printk>
   3986a:	215d      	movs	r1, #93	; 0x5d
   3986c:	4808      	ldr	r0, [pc, #32]	; (39890 <z_thread_single_suspend+0xb4>)
   3986e:	f004 fb67 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   39872:	f386 8811 	msr	BASEPRI, r6
   39876:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   3987a:	68ab      	ldr	r3, [r5, #8]
   3987c:	42a3      	cmp	r3, r4
   3987e:	d103      	bne.n	39888 <z_thread_single_suspend+0xac>
}
   39880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   39884:	f006 bd80 	b.w	40388 <z_reschedule_unlocked>
}
   39888:	bd70      	pop	{r4, r5, r6, pc}
   3988a:	bf00      	nop
   3988c:	200292a4 	.word	0x200292a4
   39890:	00043dc8 	.word	0x00043dc8
   39894:	00043dee 	.word	0x00043dee
   39898:	00043278 	.word	0x00043278
   3989c:	00043e03 	.word	0x00043e03
   398a0:	20029294 	.word	0x20029294
   398a4:	2002926c 	.word	0x2002926c
   398a8:	00043e1b 	.word	0x00043e1b
   398ac:	00043e32 	.word	0x00043e32

000398b0 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   398b0:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   398b2:	b570      	push	{r4, r5, r6, lr}
   398b4:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   398b6:	b103      	cbz	r3, 398ba <z_thread_single_abort+0xa>
		thread->fn_abort();
   398b8:	4798      	blx	r3
   398ba:	f104 0018 	add.w	r0, r4, #24
   398be:	f001 f935 	bl	3ab2c <z_abort_timeout>
	__asm__ volatile(
   398c2:	f04f 0320 	mov.w	r3, #32
   398c6:	f3ef 8511 	mrs	r5, BASEPRI
   398ca:	f383 8811 	msr	BASEPRI, r3
   398ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   398d2:	482c      	ldr	r0, [pc, #176]	; (39984 <z_thread_single_abort+0xd4>)
   398d4:	f000 fd68 	bl	3a3a8 <z_spin_lock_valid>
   398d8:	b968      	cbnz	r0, 398f6 <z_thread_single_abort+0x46>
   398da:	234a      	movs	r3, #74	; 0x4a
   398dc:	4a2a      	ldr	r2, [pc, #168]	; (39988 <z_thread_single_abort+0xd8>)
   398de:	492b      	ldr	r1, [pc, #172]	; (3998c <z_thread_single_abort+0xdc>)
   398e0:	482b      	ldr	r0, [pc, #172]	; (39990 <z_thread_single_abort+0xe0>)
   398e2:	f004 fada 	bl	3de9a <printk>
   398e6:	4927      	ldr	r1, [pc, #156]	; (39984 <z_thread_single_abort+0xd4>)
   398e8:	482a      	ldr	r0, [pc, #168]	; (39994 <z_thread_single_abort+0xe4>)
   398ea:	f004 fad6 	bl	3de9a <printk>
   398ee:	214a      	movs	r1, #74	; 0x4a
   398f0:	4825      	ldr	r0, [pc, #148]	; (39988 <z_thread_single_abort+0xd8>)
   398f2:	f004 fb25 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   398f6:	4823      	ldr	r0, [pc, #140]	; (39984 <z_thread_single_abort+0xd4>)
   398f8:	f000 fd74 	bl	3a3e4 <z_spin_lock_set_owner>
		if (z_is_thread_ready(thread)) {
   398fc:	4620      	mov	r0, r4
   398fe:	f006 fd25 	bl	4034c <z_is_thread_ready>
   39902:	4606      	mov	r6, r0
   39904:	b368      	cbz	r0, 39962 <z_thread_single_abort+0xb2>
			if (z_is_thread_queued(thread)) {
   39906:	f994 300d 	ldrsb.w	r3, [r4, #13]
   3990a:	2b00      	cmp	r3, #0
   3990c:	da07      	bge.n	3991e <z_thread_single_abort+0x6e>
				_priq_run_remove(&_kernel.ready_q.runq,
   3990e:	4621      	mov	r1, r4
   39910:	4821      	ldr	r0, [pc, #132]	; (39998 <z_thread_single_abort+0xe8>)
   39912:	f7ff fc7f 	bl	39214 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   39916:	7b63      	ldrb	r3, [r4, #13]
   39918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3991c:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   3991e:	4b1f      	ldr	r3, [pc, #124]	; (3999c <z_thread_single_abort+0xec>)
   39920:	6898      	ldr	r0, [r3, #8]
   39922:	1b02      	subs	r2, r0, r4
   39924:	4250      	negs	r0, r2
   39926:	4150      	adcs	r0, r2
   39928:	f7ff fcf8 	bl	3931c <update_cache>
		thread->base.thread_state |= mask;
   3992c:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3992e:	4815      	ldr	r0, [pc, #84]	; (39984 <z_thread_single_abort+0xd4>)
   39930:	f043 0308 	orr.w	r3, r3, #8
   39934:	7363      	strb	r3, [r4, #13]
   39936:	f000 fd45 	bl	3a3c4 <z_spin_unlock_valid>
   3993a:	b968      	cbnz	r0, 39958 <z_thread_single_abort+0xa8>
   3993c:	235d      	movs	r3, #93	; 0x5d
   3993e:	4a12      	ldr	r2, [pc, #72]	; (39988 <z_thread_single_abort+0xd8>)
   39940:	4917      	ldr	r1, [pc, #92]	; (399a0 <z_thread_single_abort+0xf0>)
   39942:	4813      	ldr	r0, [pc, #76]	; (39990 <z_thread_single_abort+0xe0>)
   39944:	f004 faa9 	bl	3de9a <printk>
   39948:	490e      	ldr	r1, [pc, #56]	; (39984 <z_thread_single_abort+0xd4>)
   3994a:	4816      	ldr	r0, [pc, #88]	; (399a4 <z_thread_single_abort+0xf4>)
   3994c:	f004 faa5 	bl	3de9a <printk>
   39950:	215d      	movs	r1, #93	; 0x5d
   39952:	480d      	ldr	r0, [pc, #52]	; (39988 <z_thread_single_abort+0xd8>)
   39954:	f004 faf4 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   39958:	f385 8811 	msr	BASEPRI, r5
   3995c:	f3bf 8f6f 	isb	sy
}
   39960:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
   39962:	7b63      	ldrb	r3, [r4, #13]
   39964:	079b      	lsls	r3, r3, #30
   39966:	d5e1      	bpl.n	3992c <z_thread_single_abort+0x7c>
				_priq_wait_remove(&pended_on(thread)->waitq,
   39968:	f104 0008 	add.w	r0, r4, #8
   3996c:	f7ff fb10 	bl	38f90 <pended_on.isra.17>
   39970:	4621      	mov	r1, r4
   39972:	f7ff fc4f 	bl	39214 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   39976:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   39978:	60a6      	str	r6, [r4, #8]
   3997a:	f023 0302 	bic.w	r3, r3, #2
   3997e:	7363      	strb	r3, [r4, #13]
   39980:	e7d4      	b.n	3992c <z_thread_single_abort+0x7c>
   39982:	bf00      	nop
   39984:	200292a4 	.word	0x200292a4
   39988:	00043dc8 	.word	0x00043dc8
   3998c:	00043dee 	.word	0x00043dee
   39990:	00043278 	.word	0x00043278
   39994:	00043e03 	.word	0x00043e03
   39998:	20029294 	.word	0x20029294
   3999c:	2002926c 	.word	0x2002926c
   399a0:	00043e1b 	.word	0x00043e1b
   399a4:	00043e32 	.word	0x00043e32

000399a8 <z_remove_thread_from_ready_q>:
{
   399a8:	b538      	push	{r3, r4, r5, lr}
   399aa:	4604      	mov	r4, r0
	__asm__ volatile(
   399ac:	f04f 0320 	mov.w	r3, #32
   399b0:	f3ef 8511 	mrs	r5, BASEPRI
   399b4:	f383 8811 	msr	BASEPRI, r3
   399b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   399bc:	481f      	ldr	r0, [pc, #124]	; (39a3c <z_remove_thread_from_ready_q+0x94>)
   399be:	f000 fcf3 	bl	3a3a8 <z_spin_lock_valid>
   399c2:	b968      	cbnz	r0, 399e0 <z_remove_thread_from_ready_q+0x38>
   399c4:	234a      	movs	r3, #74	; 0x4a
   399c6:	4a1e      	ldr	r2, [pc, #120]	; (39a40 <z_remove_thread_from_ready_q+0x98>)
   399c8:	491e      	ldr	r1, [pc, #120]	; (39a44 <z_remove_thread_from_ready_q+0x9c>)
   399ca:	481f      	ldr	r0, [pc, #124]	; (39a48 <z_remove_thread_from_ready_q+0xa0>)
   399cc:	f004 fa65 	bl	3de9a <printk>
   399d0:	491a      	ldr	r1, [pc, #104]	; (39a3c <z_remove_thread_from_ready_q+0x94>)
   399d2:	481e      	ldr	r0, [pc, #120]	; (39a4c <z_remove_thread_from_ready_q+0xa4>)
   399d4:	f004 fa61 	bl	3de9a <printk>
   399d8:	214a      	movs	r1, #74	; 0x4a
   399da:	4819      	ldr	r0, [pc, #100]	; (39a40 <z_remove_thread_from_ready_q+0x98>)
   399dc:	f004 fab0 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   399e0:	4816      	ldr	r0, [pc, #88]	; (39a3c <z_remove_thread_from_ready_q+0x94>)
   399e2:	f000 fcff 	bl	3a3e4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   399e6:	f994 300d 	ldrsb.w	r3, [r4, #13]
   399ea:	2b00      	cmp	r3, #0
   399ec:	da07      	bge.n	399fe <z_remove_thread_from_ready_q+0x56>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   399ee:	4621      	mov	r1, r4
   399f0:	4817      	ldr	r0, [pc, #92]	; (39a50 <z_remove_thread_from_ready_q+0xa8>)
   399f2:	f7ff fc0f 	bl	39214 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   399f6:	7b63      	ldrb	r3, [r4, #13]
   399f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   399fc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   399fe:	4b15      	ldr	r3, [pc, #84]	; (39a54 <z_remove_thread_from_ready_q+0xac>)
   39a00:	6898      	ldr	r0, [r3, #8]
   39a02:	1b03      	subs	r3, r0, r4
   39a04:	4258      	negs	r0, r3
   39a06:	4158      	adcs	r0, r3
   39a08:	f7ff fc88 	bl	3931c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39a0c:	480b      	ldr	r0, [pc, #44]	; (39a3c <z_remove_thread_from_ready_q+0x94>)
   39a0e:	f000 fcd9 	bl	3a3c4 <z_spin_unlock_valid>
   39a12:	b968      	cbnz	r0, 39a30 <z_remove_thread_from_ready_q+0x88>
   39a14:	235d      	movs	r3, #93	; 0x5d
   39a16:	4a0a      	ldr	r2, [pc, #40]	; (39a40 <z_remove_thread_from_ready_q+0x98>)
   39a18:	490f      	ldr	r1, [pc, #60]	; (39a58 <z_remove_thread_from_ready_q+0xb0>)
   39a1a:	480b      	ldr	r0, [pc, #44]	; (39a48 <z_remove_thread_from_ready_q+0xa0>)
   39a1c:	f004 fa3d 	bl	3de9a <printk>
   39a20:	4906      	ldr	r1, [pc, #24]	; (39a3c <z_remove_thread_from_ready_q+0x94>)
   39a22:	480e      	ldr	r0, [pc, #56]	; (39a5c <z_remove_thread_from_ready_q+0xb4>)
   39a24:	f004 fa39 	bl	3de9a <printk>
   39a28:	215d      	movs	r1, #93	; 0x5d
   39a2a:	4805      	ldr	r0, [pc, #20]	; (39a40 <z_remove_thread_from_ready_q+0x98>)
   39a2c:	f004 fa88 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   39a30:	f385 8811 	msr	BASEPRI, r5
   39a34:	f3bf 8f6f 	isb	sy
}
   39a38:	bd38      	pop	{r3, r4, r5, pc}
   39a3a:	bf00      	nop
   39a3c:	200292a4 	.word	0x200292a4
   39a40:	00043dc8 	.word	0x00043dc8
   39a44:	00043dee 	.word	0x00043dee
   39a48:	00043278 	.word	0x00043278
   39a4c:	00043e03 	.word	0x00043e03
   39a50:	20029294 	.word	0x20029294
   39a54:	2002926c 	.word	0x2002926c
   39a58:	00043e1b 	.word	0x00043e1b
   39a5c:	00043e32 	.word	0x00043e32

00039a60 <pend>:
{
   39a60:	b570      	push	{r4, r5, r6, lr}
   39a62:	4604      	mov	r4, r0
   39a64:	460d      	mov	r5, r1
   39a66:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   39a68:	f7ff ff9e 	bl	399a8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   39a6c:	7b63      	ldrb	r3, [r4, #13]
   39a6e:	f043 0302 	orr.w	r3, r3, #2
   39a72:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   39a74:	b1fd      	cbz	r5, 39ab6 <pend+0x56>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   39a76:	4b2b      	ldr	r3, [pc, #172]	; (39b24 <pend+0xc4>)
		thread->base.pended_on = wait_q;
   39a78:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   39a7a:	429c      	cmp	r4, r3
   39a7c:	d10b      	bne.n	39a96 <pend+0x36>
   39a7e:	492a      	ldr	r1, [pc, #168]	; (39b28 <pend+0xc8>)
   39a80:	482a      	ldr	r0, [pc, #168]	; (39b2c <pend+0xcc>)
   39a82:	f240 3302 	movw	r3, #770	; 0x302
   39a86:	4a2a      	ldr	r2, [pc, #168]	; (39b30 <pend+0xd0>)
   39a88:	f004 fa07 	bl	3de9a <printk>
   39a8c:	f240 3102 	movw	r1, #770	; 0x302
   39a90:	4827      	ldr	r0, [pc, #156]	; (39b30 <pend+0xd0>)
   39a92:	f004 fa55 	bl	3df40 <assert_post_action>
	return list->head == list;
   39a96:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   39a98:	429d      	cmp	r5, r3
   39a9a:	d03b      	beq.n	39b14 <pend+0xb4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   39a9c:	2b00      	cmp	r3, #0
   39a9e:	d039      	beq.n	39b14 <pend+0xb4>
	if (thread_1->base.prio < thread_2->base.prio) {
   39aa0:	f994 200e 	ldrsb.w	r2, [r4, #14]
   39aa4:	f993 100e 	ldrsb.w	r1, [r3, #14]
   39aa8:	4291      	cmp	r1, r2
   39aaa:	dd2d      	ble.n	39b08 <pend+0xa8>
	node->prev = successor->prev;
   39aac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   39aae:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   39ab2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   39ab4:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   39ab6:	1c73      	adds	r3, r6, #1
   39ab8:	d033      	beq.n	39b22 <pend+0xc2>
		__ASSERT(timeout >= 0,
   39aba:	2e00      	cmp	r6, #0
   39abc:	da0e      	bge.n	39adc <pend+0x7c>
   39abe:	491d      	ldr	r1, [pc, #116]	; (39b34 <pend+0xd4>)
   39ac0:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   39ac4:	4a1a      	ldr	r2, [pc, #104]	; (39b30 <pend+0xd0>)
   39ac6:	4819      	ldr	r0, [pc, #100]	; (39b2c <pend+0xcc>)
   39ac8:	f004 f9e7 	bl	3de9a <printk>
   39acc:	481a      	ldr	r0, [pc, #104]	; (39b38 <pend+0xd8>)
   39ace:	f004 f9e4 	bl	3de9a <printk>
   39ad2:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
   39ad6:	4816      	ldr	r0, [pc, #88]	; (39b30 <pend+0xd0>)
   39ad8:	f004 fa32 	bl	3df40 <assert_post_action>
   39adc:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   39ae0:	f240 30e7 	movw	r0, #999	; 0x3e7
   39ae4:	2100      	movs	r1, #0
   39ae6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   39aea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   39aee:	fbc5 0106 	smlal	r0, r1, r5, r6
   39af2:	2300      	movs	r3, #0
   39af4:	f7e3 f942 	bl	1cd7c <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   39af8:	4910      	ldr	r1, [pc, #64]	; (39b3c <pend+0xdc>)
   39afa:	1c42      	adds	r2, r0, #1
   39afc:	f104 0018 	add.w	r0, r4, #24
}
   39b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   39b04:	f000 bf6c 	b.w	3a9e0 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   39b08:	6869      	ldr	r1, [r5, #4]
   39b0a:	428b      	cmp	r3, r1
   39b0c:	d002      	beq.n	39b14 <pend+0xb4>
   39b0e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   39b10:	2b00      	cmp	r3, #0
   39b12:	d1c7      	bne.n	39aa4 <pend+0x44>
	node->prev = list->tail;
   39b14:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   39b16:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   39b18:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   39b1a:	686b      	ldr	r3, [r5, #4]
   39b1c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   39b1e:	606c      	str	r4, [r5, #4]
   39b20:	e7c9      	b.n	39ab6 <pend+0x56>
}
   39b22:	bd70      	pop	{r4, r5, r6, pc}
   39b24:	2002509c 	.word	0x2002509c
   39b28:	00048d8b 	.word	0x00048d8b
   39b2c:	00043278 	.word	0x00043278
   39b30:	00048d33 	.word	0x00048d33
   39b34:	00048cfd 	.word	0x00048cfd
   39b38:	00048d0a 	.word	0x00048d0a
   39b3c:	00039581 	.word	0x00039581

00039b40 <z_pend_curr_irqlock>:
{
   39b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39b42:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   39b44:	4d22      	ldr	r5, [pc, #136]	; (39bd0 <z_pend_curr_irqlock+0x90>)
	pending_current = _current;
   39b46:	4c23      	ldr	r4, [pc, #140]	; (39bd4 <z_pend_curr_irqlock+0x94>)
	pend(_current, wait_q, timeout);
   39b48:	68a8      	ldr	r0, [r5, #8]
   39b4a:	f7ff ff89 	bl	39a60 <pend>
	pending_current = _current;
   39b4e:	68ab      	ldr	r3, [r5, #8]
   39b50:	4630      	mov	r0, r6
   39b52:	6023      	str	r3, [r4, #0]
   39b54:	f7ea fc0a 	bl	2436c <arch_swap>
   39b58:	4606      	mov	r6, r0
	__asm__ volatile(
   39b5a:	f04f 0320 	mov.w	r3, #32
   39b5e:	f3ef 8711 	mrs	r7, BASEPRI
   39b62:	f383 8811 	msr	BASEPRI, r3
   39b66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39b6a:	481b      	ldr	r0, [pc, #108]	; (39bd8 <z_pend_curr_irqlock+0x98>)
   39b6c:	f000 fc1c 	bl	3a3a8 <z_spin_lock_valid>
   39b70:	b968      	cbnz	r0, 39b8e <z_pend_curr_irqlock+0x4e>
   39b72:	234a      	movs	r3, #74	; 0x4a
   39b74:	4a19      	ldr	r2, [pc, #100]	; (39bdc <z_pend_curr_irqlock+0x9c>)
   39b76:	491a      	ldr	r1, [pc, #104]	; (39be0 <z_pend_curr_irqlock+0xa0>)
   39b78:	481a      	ldr	r0, [pc, #104]	; (39be4 <z_pend_curr_irqlock+0xa4>)
   39b7a:	f004 f98e 	bl	3de9a <printk>
   39b7e:	4916      	ldr	r1, [pc, #88]	; (39bd8 <z_pend_curr_irqlock+0x98>)
   39b80:	4819      	ldr	r0, [pc, #100]	; (39be8 <z_pend_curr_irqlock+0xa8>)
   39b82:	f004 f98a 	bl	3de9a <printk>
   39b86:	214a      	movs	r1, #74	; 0x4a
   39b88:	4814      	ldr	r0, [pc, #80]	; (39bdc <z_pend_curr_irqlock+0x9c>)
   39b8a:	f004 f9d9 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   39b8e:	4812      	ldr	r0, [pc, #72]	; (39bd8 <z_pend_curr_irqlock+0x98>)
   39b90:	f000 fc28 	bl	3a3e4 <z_spin_lock_set_owner>
		if (pending_current == _current) {
   39b94:	6823      	ldr	r3, [r4, #0]
   39b96:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39b98:	480f      	ldr	r0, [pc, #60]	; (39bd8 <z_pend_curr_irqlock+0x98>)
   39b9a:	429a      	cmp	r2, r3
			pending_current = NULL;
   39b9c:	bf04      	itt	eq
   39b9e:	2300      	moveq	r3, #0
   39ba0:	6023      	streq	r3, [r4, #0]
   39ba2:	f000 fc0f 	bl	3a3c4 <z_spin_unlock_valid>
   39ba6:	b968      	cbnz	r0, 39bc4 <z_pend_curr_irqlock+0x84>
   39ba8:	235d      	movs	r3, #93	; 0x5d
   39baa:	4a0c      	ldr	r2, [pc, #48]	; (39bdc <z_pend_curr_irqlock+0x9c>)
   39bac:	490f      	ldr	r1, [pc, #60]	; (39bec <z_pend_curr_irqlock+0xac>)
   39bae:	480d      	ldr	r0, [pc, #52]	; (39be4 <z_pend_curr_irqlock+0xa4>)
   39bb0:	f004 f973 	bl	3de9a <printk>
   39bb4:	4908      	ldr	r1, [pc, #32]	; (39bd8 <z_pend_curr_irqlock+0x98>)
   39bb6:	480e      	ldr	r0, [pc, #56]	; (39bf0 <z_pend_curr_irqlock+0xb0>)
   39bb8:	f004 f96f 	bl	3de9a <printk>
   39bbc:	215d      	movs	r1, #93	; 0x5d
   39bbe:	4807      	ldr	r0, [pc, #28]	; (39bdc <z_pend_curr_irqlock+0x9c>)
   39bc0:	f004 f9be 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   39bc4:	f387 8811 	msr	BASEPRI, r7
   39bc8:	f3bf 8f6f 	isb	sy
}
   39bcc:	4630      	mov	r0, r6
   39bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   39bd0:	2002926c 	.word	0x2002926c
   39bd4:	200292a0 	.word	0x200292a0
   39bd8:	200292a4 	.word	0x200292a4
   39bdc:	00043dc8 	.word	0x00043dc8
   39be0:	00043dee 	.word	0x00043dee
   39be4:	00043278 	.word	0x00043278
   39be8:	00043e03 	.word	0x00043e03
   39bec:	00043e1b 	.word	0x00043e1b
   39bf0:	00043e32 	.word	0x00043e32

00039bf4 <z_pend_curr>:
{
   39bf4:	b538      	push	{r3, r4, r5, lr}
   39bf6:	4604      	mov	r4, r0
   39bf8:	460d      	mov	r5, r1
   39bfa:	4611      	mov	r1, r2
	pending_current = _current;
   39bfc:	4a0e      	ldr	r2, [pc, #56]	; (39c38 <z_pend_curr+0x44>)
   39bfe:	6890      	ldr	r0, [r2, #8]
   39c00:	4a0e      	ldr	r2, [pc, #56]	; (39c3c <z_pend_curr+0x48>)
   39c02:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   39c04:	461a      	mov	r2, r3
   39c06:	f7ff ff2b 	bl	39a60 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39c0a:	4620      	mov	r0, r4
   39c0c:	f000 fbda 	bl	3a3c4 <z_spin_unlock_valid>
   39c10:	b968      	cbnz	r0, 39c2e <z_pend_curr+0x3a>
   39c12:	2374      	movs	r3, #116	; 0x74
   39c14:	4a0a      	ldr	r2, [pc, #40]	; (39c40 <z_pend_curr+0x4c>)
   39c16:	490b      	ldr	r1, [pc, #44]	; (39c44 <z_pend_curr+0x50>)
   39c18:	480b      	ldr	r0, [pc, #44]	; (39c48 <z_pend_curr+0x54>)
   39c1a:	f004 f93e 	bl	3de9a <printk>
   39c1e:	4621      	mov	r1, r4
   39c20:	480a      	ldr	r0, [pc, #40]	; (39c4c <z_pend_curr+0x58>)
   39c22:	f004 f93a 	bl	3de9a <printk>
   39c26:	2174      	movs	r1, #116	; 0x74
   39c28:	4805      	ldr	r0, [pc, #20]	; (39c40 <z_pend_curr+0x4c>)
   39c2a:	f004 f989 	bl	3df40 <assert_post_action>
   39c2e:	4628      	mov	r0, r5
}
   39c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   39c34:	f7ea bb9a 	b.w	2436c <arch_swap>
   39c38:	2002926c 	.word	0x2002926c
   39c3c:	200292a0 	.word	0x200292a0
   39c40:	00043dc8 	.word	0x00043dc8
   39c44:	00043e1b 	.word	0x00043e1b
   39c48:	00043278 	.word	0x00043278
   39c4c:	00043e32 	.word	0x00043e32

00039c50 <z_set_prio>:
{
   39c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39c52:	4604      	mov	r4, r0
   39c54:	460d      	mov	r5, r1
	__asm__ volatile(
   39c56:	f04f 0320 	mov.w	r3, #32
   39c5a:	f3ef 8611 	mrs	r6, BASEPRI
   39c5e:	f383 8811 	msr	BASEPRI, r3
   39c62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39c66:	4835      	ldr	r0, [pc, #212]	; (39d3c <z_set_prio+0xec>)
   39c68:	f000 fb9e 	bl	3a3a8 <z_spin_lock_valid>
   39c6c:	b968      	cbnz	r0, 39c8a <z_set_prio+0x3a>
   39c6e:	234a      	movs	r3, #74	; 0x4a
   39c70:	4a33      	ldr	r2, [pc, #204]	; (39d40 <z_set_prio+0xf0>)
   39c72:	4934      	ldr	r1, [pc, #208]	; (39d44 <z_set_prio+0xf4>)
   39c74:	4834      	ldr	r0, [pc, #208]	; (39d48 <z_set_prio+0xf8>)
   39c76:	f004 f910 	bl	3de9a <printk>
   39c7a:	4930      	ldr	r1, [pc, #192]	; (39d3c <z_set_prio+0xec>)
   39c7c:	4833      	ldr	r0, [pc, #204]	; (39d4c <z_set_prio+0xfc>)
   39c7e:	f004 f90c 	bl	3de9a <printk>
   39c82:	214a      	movs	r1, #74	; 0x4a
   39c84:	482e      	ldr	r0, [pc, #184]	; (39d40 <z_set_prio+0xf0>)
   39c86:	f004 f95b 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   39c8a:	482c      	ldr	r0, [pc, #176]	; (39d3c <z_set_prio+0xec>)
   39c8c:	f000 fbaa 	bl	3a3e4 <z_spin_lock_set_owner>
		need_sched = z_is_thread_ready(thread);
   39c90:	4620      	mov	r0, r4
   39c92:	f006 fb5b 	bl	4034c <z_is_thread_ready>
		if (need_sched) {
   39c96:	b26d      	sxtb	r5, r5
   39c98:	4607      	mov	r7, r0
   39c9a:	2800      	cmp	r0, #0
   39c9c:	d04c      	beq.n	39d38 <z_set_prio+0xe8>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   39c9e:	4621      	mov	r1, r4
   39ca0:	482b      	ldr	r0, [pc, #172]	; (39d50 <z_set_prio+0x100>)
   39ca2:	f7ff fab7 	bl	39214 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   39ca6:	4b2b      	ldr	r3, [pc, #172]	; (39d54 <z_set_prio+0x104>)
				thread->base.prio = prio;
   39ca8:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   39caa:	429c      	cmp	r4, r3
   39cac:	d10b      	bne.n	39cc6 <z_set_prio+0x76>
   39cae:	492a      	ldr	r1, [pc, #168]	; (39d58 <z_set_prio+0x108>)
   39cb0:	4825      	ldr	r0, [pc, #148]	; (39d48 <z_set_prio+0xf8>)
   39cb2:	f240 3302 	movw	r3, #770	; 0x302
   39cb6:	4a29      	ldr	r2, [pc, #164]	; (39d5c <z_set_prio+0x10c>)
   39cb8:	f004 f8ef 	bl	3de9a <printk>
   39cbc:	f240 3102 	movw	r1, #770	; 0x302
   39cc0:	4826      	ldr	r0, [pc, #152]	; (39d5c <z_set_prio+0x10c>)
   39cc2:	f004 f93d 	bl	3df40 <assert_post_action>
	return list->head == list;
   39cc6:	4a26      	ldr	r2, [pc, #152]	; (39d60 <z_set_prio+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   39cc8:	f102 0128 	add.w	r1, r2, #40	; 0x28
   39ccc:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   39cd0:	428b      	cmp	r3, r1
   39cd2:	d02b      	beq.n	39d2c <z_set_prio+0xdc>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   39cd4:	b353      	cbz	r3, 39d2c <z_set_prio+0xdc>
	if (thread_1->base.prio < thread_2->base.prio) {
   39cd6:	f994 500e 	ldrsb.w	r5, [r4, #14]
   39cda:	f993 c00e 	ldrsb.w	ip, [r3, #14]
   39cde:	45ac      	cmp	ip, r5
   39ce0:	dd1f      	ble.n	39d22 <z_set_prio+0xd2>
	node->prev = successor->prev;
   39ce2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   39ce4:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   39ce8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   39cea:	605c      	str	r4, [r3, #4]
			update_cache(1);
   39cec:	2001      	movs	r0, #1
   39cee:	f7ff fb15 	bl	3931c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39cf2:	4812      	ldr	r0, [pc, #72]	; (39d3c <z_set_prio+0xec>)
   39cf4:	f000 fb66 	bl	3a3c4 <z_spin_unlock_valid>
   39cf8:	b968      	cbnz	r0, 39d16 <z_set_prio+0xc6>
   39cfa:	235d      	movs	r3, #93	; 0x5d
   39cfc:	4a10      	ldr	r2, [pc, #64]	; (39d40 <z_set_prio+0xf0>)
   39cfe:	4919      	ldr	r1, [pc, #100]	; (39d64 <z_set_prio+0x114>)
   39d00:	4811      	ldr	r0, [pc, #68]	; (39d48 <z_set_prio+0xf8>)
   39d02:	f004 f8ca 	bl	3de9a <printk>
   39d06:	490d      	ldr	r1, [pc, #52]	; (39d3c <z_set_prio+0xec>)
   39d08:	4817      	ldr	r0, [pc, #92]	; (39d68 <z_set_prio+0x118>)
   39d0a:	f004 f8c6 	bl	3de9a <printk>
   39d0e:	215d      	movs	r1, #93	; 0x5d
   39d10:	480b      	ldr	r0, [pc, #44]	; (39d40 <z_set_prio+0xf0>)
   39d12:	f004 f915 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   39d16:	f386 8811 	msr	BASEPRI, r6
   39d1a:	f3bf 8f6f 	isb	sy
}
   39d1e:	4638      	mov	r0, r7
   39d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   39d22:	4298      	cmp	r0, r3
   39d24:	d002      	beq.n	39d2c <z_set_prio+0xdc>
   39d26:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   39d28:	2b00      	cmp	r3, #0
   39d2a:	d1d6      	bne.n	39cda <z_set_prio+0x8a>
	node->prev = list->tail;
   39d2c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   39d30:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   39d32:	601c      	str	r4, [r3, #0]
	list->tail = node;
   39d34:	62d4      	str	r4, [r2, #44]	; 0x2c
   39d36:	e7d9      	b.n	39cec <z_set_prio+0x9c>
			thread->base.prio = prio;
   39d38:	73a5      	strb	r5, [r4, #14]
   39d3a:	e7da      	b.n	39cf2 <z_set_prio+0xa2>
   39d3c:	200292a4 	.word	0x200292a4
   39d40:	00043dc8 	.word	0x00043dc8
   39d44:	00043dee 	.word	0x00043dee
   39d48:	00043278 	.word	0x00043278
   39d4c:	00043e03 	.word	0x00043e03
   39d50:	20029294 	.word	0x20029294
   39d54:	2002509c 	.word	0x2002509c
   39d58:	00048d8b 	.word	0x00048d8b
   39d5c:	00048d33 	.word	0x00048d33
   39d60:	2002926c 	.word	0x2002926c
   39d64:	00043e1b 	.word	0x00043e1b
   39d68:	00043e32 	.word	0x00043e32

00039d6c <z_unpend_first_thread>:
{
   39d6c:	b538      	push	{r3, r4, r5, lr}
   39d6e:	4604      	mov	r4, r0
	__asm__ volatile(
   39d70:	f04f 0320 	mov.w	r3, #32
   39d74:	f3ef 8511 	mrs	r5, BASEPRI
   39d78:	f383 8811 	msr	BASEPRI, r3
   39d7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39d80:	483b      	ldr	r0, [pc, #236]	; (39e70 <z_unpend_first_thread+0x104>)
   39d82:	f000 fb11 	bl	3a3a8 <z_spin_lock_valid>
   39d86:	b968      	cbnz	r0, 39da4 <z_unpend_first_thread+0x38>
   39d88:	234a      	movs	r3, #74	; 0x4a
   39d8a:	4a3a      	ldr	r2, [pc, #232]	; (39e74 <z_unpend_first_thread+0x108>)
   39d8c:	493a      	ldr	r1, [pc, #232]	; (39e78 <z_unpend_first_thread+0x10c>)
   39d8e:	483b      	ldr	r0, [pc, #236]	; (39e7c <z_unpend_first_thread+0x110>)
   39d90:	f004 f883 	bl	3de9a <printk>
   39d94:	4936      	ldr	r1, [pc, #216]	; (39e70 <z_unpend_first_thread+0x104>)
   39d96:	483a      	ldr	r0, [pc, #232]	; (39e80 <z_unpend_first_thread+0x114>)
   39d98:	f004 f87f 	bl	3de9a <printk>
   39d9c:	214a      	movs	r1, #74	; 0x4a
   39d9e:	4835      	ldr	r0, [pc, #212]	; (39e74 <z_unpend_first_thread+0x108>)
   39da0:	f004 f8ce 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   39da4:	4832      	ldr	r0, [pc, #200]	; (39e70 <z_unpend_first_thread+0x104>)
   39da6:	f000 fb1d 	bl	3a3e4 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   39daa:	4620      	mov	r0, r4
   39dac:	f006 faf6 	bl	4039c <z_priq_dumb_best>
   39db0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39db2:	482f      	ldr	r0, [pc, #188]	; (39e70 <z_unpend_first_thread+0x104>)
   39db4:	f000 fb06 	bl	3a3c4 <z_spin_unlock_valid>
   39db8:	b968      	cbnz	r0, 39dd6 <z_unpend_first_thread+0x6a>
   39dba:	235d      	movs	r3, #93	; 0x5d
   39dbc:	4a2d      	ldr	r2, [pc, #180]	; (39e74 <z_unpend_first_thread+0x108>)
   39dbe:	4931      	ldr	r1, [pc, #196]	; (39e84 <z_unpend_first_thread+0x118>)
   39dc0:	482e      	ldr	r0, [pc, #184]	; (39e7c <z_unpend_first_thread+0x110>)
   39dc2:	f004 f86a 	bl	3de9a <printk>
   39dc6:	492a      	ldr	r1, [pc, #168]	; (39e70 <z_unpend_first_thread+0x104>)
   39dc8:	482f      	ldr	r0, [pc, #188]	; (39e88 <z_unpend_first_thread+0x11c>)
   39dca:	f004 f866 	bl	3de9a <printk>
   39dce:	215d      	movs	r1, #93	; 0x5d
   39dd0:	4828      	ldr	r0, [pc, #160]	; (39e74 <z_unpend_first_thread+0x108>)
   39dd2:	f004 f8b5 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   39dd6:	f385 8811 	msr	BASEPRI, r5
   39dda:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   39dde:	2c00      	cmp	r4, #0
   39de0:	d043      	beq.n	39e6a <z_unpend_first_thread+0xfe>
	__asm__ volatile(
   39de2:	f04f 0320 	mov.w	r3, #32
   39de6:	f3ef 8511 	mrs	r5, BASEPRI
   39dea:	f383 8811 	msr	BASEPRI, r3
   39dee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39df2:	481f      	ldr	r0, [pc, #124]	; (39e70 <z_unpend_first_thread+0x104>)
   39df4:	f000 fad8 	bl	3a3a8 <z_spin_lock_valid>
   39df8:	b968      	cbnz	r0, 39e16 <z_unpend_first_thread+0xaa>
   39dfa:	234a      	movs	r3, #74	; 0x4a
   39dfc:	4a1d      	ldr	r2, [pc, #116]	; (39e74 <z_unpend_first_thread+0x108>)
   39dfe:	491e      	ldr	r1, [pc, #120]	; (39e78 <z_unpend_first_thread+0x10c>)
   39e00:	481e      	ldr	r0, [pc, #120]	; (39e7c <z_unpend_first_thread+0x110>)
   39e02:	f004 f84a 	bl	3de9a <printk>
   39e06:	491a      	ldr	r1, [pc, #104]	; (39e70 <z_unpend_first_thread+0x104>)
   39e08:	481d      	ldr	r0, [pc, #116]	; (39e80 <z_unpend_first_thread+0x114>)
   39e0a:	f004 f846 	bl	3de9a <printk>
   39e0e:	214a      	movs	r1, #74	; 0x4a
   39e10:	4818      	ldr	r0, [pc, #96]	; (39e74 <z_unpend_first_thread+0x108>)
   39e12:	f004 f895 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   39e16:	4816      	ldr	r0, [pc, #88]	; (39e70 <z_unpend_first_thread+0x104>)
   39e18:	f000 fae4 	bl	3a3e4 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   39e1c:	f104 0008 	add.w	r0, r4, #8
   39e20:	f7ff f8b6 	bl	38f90 <pended_on.isra.17>
   39e24:	4621      	mov	r1, r4
   39e26:	f7ff f9f5 	bl	39214 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   39e2a:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39e2c:	4810      	ldr	r0, [pc, #64]	; (39e70 <z_unpend_first_thread+0x104>)
   39e2e:	f023 0302 	bic.w	r3, r3, #2
   39e32:	7363      	strb	r3, [r4, #13]
   39e34:	f000 fac6 	bl	3a3c4 <z_spin_unlock_valid>
   39e38:	b968      	cbnz	r0, 39e56 <z_unpend_first_thread+0xea>
   39e3a:	235d      	movs	r3, #93	; 0x5d
   39e3c:	4a0d      	ldr	r2, [pc, #52]	; (39e74 <z_unpend_first_thread+0x108>)
   39e3e:	4911      	ldr	r1, [pc, #68]	; (39e84 <z_unpend_first_thread+0x118>)
   39e40:	480e      	ldr	r0, [pc, #56]	; (39e7c <z_unpend_first_thread+0x110>)
   39e42:	f004 f82a 	bl	3de9a <printk>
   39e46:	490a      	ldr	r1, [pc, #40]	; (39e70 <z_unpend_first_thread+0x104>)
   39e48:	480f      	ldr	r0, [pc, #60]	; (39e88 <z_unpend_first_thread+0x11c>)
   39e4a:	f004 f826 	bl	3de9a <printk>
   39e4e:	215d      	movs	r1, #93	; 0x5d
   39e50:	4808      	ldr	r0, [pc, #32]	; (39e74 <z_unpend_first_thread+0x108>)
   39e52:	f004 f875 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   39e56:	f385 8811 	msr	BASEPRI, r5
   39e5a:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   39e5e:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   39e60:	f104 0018 	add.w	r0, r4, #24
   39e64:	60a3      	str	r3, [r4, #8]
   39e66:	f000 fe61 	bl	3ab2c <z_abort_timeout>
}
   39e6a:	4620      	mov	r0, r4
   39e6c:	bd38      	pop	{r3, r4, r5, pc}
   39e6e:	bf00      	nop
   39e70:	200292a4 	.word	0x200292a4
   39e74:	00043dc8 	.word	0x00043dc8
   39e78:	00043dee 	.word	0x00043dee
   39e7c:	00043278 	.word	0x00043278
   39e80:	00043e03 	.word	0x00043e03
   39e84:	00043e1b 	.word	0x00043e1b
   39e88:	00043e32 	.word	0x00043e32

00039e8c <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   39e8c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   39e8e:	4b04      	ldr	r3, [pc, #16]	; (39ea0 <z_sched_init+0x14>)
   39e90:	4608      	mov	r0, r1
   39e92:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   39e96:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   39e9a:	f7ff b8a7 	b.w	38fec <k_sched_time_slice_set>
   39e9e:	bf00      	nop
   39ea0:	2002926c 	.word	0x2002926c

00039ea4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   39ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39ea6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   39eaa:	b173      	cbz	r3, 39eca <z_impl_k_yield+0x26>
   39eac:	4945      	ldr	r1, [pc, #276]	; (39fc4 <z_impl_k_yield+0x120>)
   39eae:	f240 430d 	movw	r3, #1037	; 0x40d
   39eb2:	4a45      	ldr	r2, [pc, #276]	; (39fc8 <z_impl_k_yield+0x124>)
   39eb4:	4845      	ldr	r0, [pc, #276]	; (39fcc <z_impl_k_yield+0x128>)
   39eb6:	f003 fff0 	bl	3de9a <printk>
   39eba:	4845      	ldr	r0, [pc, #276]	; (39fd0 <z_impl_k_yield+0x12c>)
   39ebc:	f003 ffed 	bl	3de9a <printk>
   39ec0:	f240 410d 	movw	r1, #1037	; 0x40d
   39ec4:	4840      	ldr	r0, [pc, #256]	; (39fc8 <z_impl_k_yield+0x124>)
   39ec6:	f004 f83b 	bl	3df40 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   39eca:	4c42      	ldr	r4, [pc, #264]	; (39fd4 <z_impl_k_yield+0x130>)
   39ecc:	4e42      	ldr	r6, [pc, #264]	; (39fd8 <z_impl_k_yield+0x134>)
   39ece:	68a2      	ldr	r2, [r4, #8]
   39ed0:	42b2      	cmp	r2, r6
   39ed2:	d05f      	beq.n	39f94 <z_impl_k_yield+0xf0>
	__asm__ volatile(
   39ed4:	f04f 0320 	mov.w	r3, #32
   39ed8:	f3ef 8711 	mrs	r7, BASEPRI
   39edc:	f383 8811 	msr	BASEPRI, r3
   39ee0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39ee4:	483d      	ldr	r0, [pc, #244]	; (39fdc <z_impl_k_yield+0x138>)
   39ee6:	f000 fa5f 	bl	3a3a8 <z_spin_lock_valid>
   39eea:	b968      	cbnz	r0, 39f08 <z_impl_k_yield+0x64>
   39eec:	234a      	movs	r3, #74	; 0x4a
   39eee:	4a3c      	ldr	r2, [pc, #240]	; (39fe0 <z_impl_k_yield+0x13c>)
   39ef0:	493c      	ldr	r1, [pc, #240]	; (39fe4 <z_impl_k_yield+0x140>)
   39ef2:	4836      	ldr	r0, [pc, #216]	; (39fcc <z_impl_k_yield+0x128>)
   39ef4:	f003 ffd1 	bl	3de9a <printk>
   39ef8:	4938      	ldr	r1, [pc, #224]	; (39fdc <z_impl_k_yield+0x138>)
   39efa:	483b      	ldr	r0, [pc, #236]	; (39fe8 <z_impl_k_yield+0x144>)
   39efc:	f003 ffcd 	bl	3de9a <printk>
   39f00:	214a      	movs	r1, #74	; 0x4a
   39f02:	4837      	ldr	r0, [pc, #220]	; (39fe0 <z_impl_k_yield+0x13c>)
   39f04:	f004 f81c 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   39f08:	4834      	ldr	r0, [pc, #208]	; (39fdc <z_impl_k_yield+0x138>)
   39f0a:	f000 fa6b 	bl	3a3e4 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   39f0e:	68a1      	ldr	r1, [r4, #8]
   39f10:	4836      	ldr	r0, [pc, #216]	; (39fec <z_impl_k_yield+0x148>)
   39f12:	f7ff f97f 	bl	39214 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   39f16:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   39f18:	42b5      	cmp	r5, r6
   39f1a:	d10b      	bne.n	39f34 <z_impl_k_yield+0x90>
   39f1c:	4934      	ldr	r1, [pc, #208]	; (39ff0 <z_impl_k_yield+0x14c>)
   39f1e:	482b      	ldr	r0, [pc, #172]	; (39fcc <z_impl_k_yield+0x128>)
   39f20:	f240 3302 	movw	r3, #770	; 0x302
   39f24:	4a28      	ldr	r2, [pc, #160]	; (39fc8 <z_impl_k_yield+0x124>)
   39f26:	f003 ffb8 	bl	3de9a <printk>
   39f2a:	f240 3102 	movw	r1, #770	; 0x302
   39f2e:	4826      	ldr	r0, [pc, #152]	; (39fc8 <z_impl_k_yield+0x124>)
   39f30:	f004 f806 	bl	3df40 <assert_post_action>
	return list->head == list;
   39f34:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   39f38:	4a2c      	ldr	r2, [pc, #176]	; (39fec <z_impl_k_yield+0x148>)
   39f3a:	4293      	cmp	r3, r2
   39f3c:	d03b      	beq.n	39fb6 <z_impl_k_yield+0x112>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   39f3e:	2b00      	cmp	r3, #0
   39f40:	d039      	beq.n	39fb6 <z_impl_k_yield+0x112>
	if (thread_1->base.prio < thread_2->base.prio) {
   39f42:	f995 000e 	ldrsb.w	r0, [r5, #14]
   39f46:	f993 600e 	ldrsb.w	r6, [r3, #14]
   39f4a:	4286      	cmp	r6, r0
   39f4c:	dd2e      	ble.n	39fac <z_impl_k_yield+0x108>
	node->prev = successor->prev;
   39f4e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   39f50:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   39f54:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   39f56:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   39f58:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   39f5a:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   39f5c:	7b53      	ldrb	r3, [r2, #13]
   39f5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   39f62:	7353      	strb	r3, [r2, #13]
   39f64:	f7ff f9da 	bl	3931c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39f68:	481c      	ldr	r0, [pc, #112]	; (39fdc <z_impl_k_yield+0x138>)
   39f6a:	f000 fa2b 	bl	3a3c4 <z_spin_unlock_valid>
   39f6e:	b968      	cbnz	r0, 39f8c <z_impl_k_yield+0xe8>
   39f70:	235d      	movs	r3, #93	; 0x5d
   39f72:	4a1b      	ldr	r2, [pc, #108]	; (39fe0 <z_impl_k_yield+0x13c>)
   39f74:	491f      	ldr	r1, [pc, #124]	; (39ff4 <z_impl_k_yield+0x150>)
   39f76:	4815      	ldr	r0, [pc, #84]	; (39fcc <z_impl_k_yield+0x128>)
   39f78:	f003 ff8f 	bl	3de9a <printk>
   39f7c:	4917      	ldr	r1, [pc, #92]	; (39fdc <z_impl_k_yield+0x138>)
   39f7e:	481e      	ldr	r0, [pc, #120]	; (39ff8 <z_impl_k_yield+0x154>)
   39f80:	f003 ff8b 	bl	3de9a <printk>
   39f84:	215d      	movs	r1, #93	; 0x5d
   39f86:	4816      	ldr	r0, [pc, #88]	; (39fe0 <z_impl_k_yield+0x13c>)
   39f88:	f003 ffda 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   39f8c:	f387 8811 	msr	BASEPRI, r7
   39f90:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   39f94:	f04f 0320 	mov.w	r3, #32
   39f98:	f3ef 8011 	mrs	r0, BASEPRI
   39f9c:	f383 8811 	msr	BASEPRI, r3
   39fa0:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   39fa4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   39fa8:	f7ea b9e0 	b.w	2436c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   39fac:	4299      	cmp	r1, r3
   39fae:	d002      	beq.n	39fb6 <z_impl_k_yield+0x112>
   39fb0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   39fb2:	2b00      	cmp	r3, #0
   39fb4:	d1c7      	bne.n	39f46 <z_impl_k_yield+0xa2>
	node->prev = list->tail;
   39fb6:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   39fba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   39fbc:	601d      	str	r5, [r3, #0]
	list->tail = node;
   39fbe:	62e5      	str	r5, [r4, #44]	; 0x2c
   39fc0:	e7ca      	b.n	39f58 <z_impl_k_yield+0xb4>
   39fc2:	bf00      	nop
   39fc4:	00048c9b 	.word	0x00048c9b
   39fc8:	00048d33 	.word	0x00048d33
   39fcc:	00043278 	.word	0x00043278
   39fd0:	00044d12 	.word	0x00044d12
   39fd4:	2002926c 	.word	0x2002926c
   39fd8:	2002509c 	.word	0x2002509c
   39fdc:	200292a4 	.word	0x200292a4
   39fe0:	00043dc8 	.word	0x00043dc8
   39fe4:	00043dee 	.word	0x00043dee
   39fe8:	00043e03 	.word	0x00043e03
   39fec:	20029294 	.word	0x20029294
   39ff0:	00048d8b 	.word	0x00048d8b
   39ff4:	00043e1b 	.word	0x00043e1b
   39ff8:	00043e32 	.word	0x00043e32

00039ffc <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
   39ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   39ffe:	4604      	mov	r4, r0
   3a000:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   3a004:	b173      	cbz	r3, 3a024 <z_tick_sleep+0x28>
   3a006:	493b      	ldr	r1, [pc, #236]	; (3a0f4 <z_tick_sleep+0xf8>)
   3a008:	f240 432b 	movw	r3, #1067	; 0x42b
   3a00c:	4a3a      	ldr	r2, [pc, #232]	; (3a0f8 <z_tick_sleep+0xfc>)
   3a00e:	483b      	ldr	r0, [pc, #236]	; (3a0fc <z_tick_sleep+0x100>)
   3a010:	f003 ff43 	bl	3de9a <printk>
   3a014:	483a      	ldr	r0, [pc, #232]	; (3a100 <z_tick_sleep+0x104>)
   3a016:	f003 ff40 	bl	3de9a <printk>
   3a01a:	f240 412b 	movw	r1, #1067	; 0x42b
   3a01e:	4836      	ldr	r0, [pc, #216]	; (3a0f8 <z_tick_sleep+0xfc>)
   3a020:	f003 ff8e 	bl	3df40 <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   3a024:	b924      	cbnz	r4, 3a030 <z_tick_sleep+0x34>
	z_impl_k_yield();
   3a026:	f7ff ff3d 	bl	39ea4 <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   3a02a:	4620      	mov	r0, r4
   3a02c:	b003      	add	sp, #12
   3a02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   3a030:	f006 fa6a 	bl	40508 <z_tick_get_32>
	struct k_spinlock local_lock = {};
   3a034:	2300      	movs	r3, #0
	ticks += _TICK_ALIGN;
   3a036:	1c66      	adds	r6, r4, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   3a038:	1834      	adds	r4, r6, r0
	struct k_spinlock local_lock = {};
   3a03a:	9301      	str	r3, [sp, #4]
   3a03c:	f04f 0320 	mov.w	r3, #32
   3a040:	f3ef 8711 	mrs	r7, BASEPRI
   3a044:	f383 8811 	msr	BASEPRI, r3
   3a048:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3a04c:	a801      	add	r0, sp, #4
   3a04e:	f000 f9ab 	bl	3a3a8 <z_spin_lock_valid>
   3a052:	b968      	cbnz	r0, 3a070 <z_tick_sleep+0x74>
   3a054:	234a      	movs	r3, #74	; 0x4a
   3a056:	4a2b      	ldr	r2, [pc, #172]	; (3a104 <z_tick_sleep+0x108>)
   3a058:	492b      	ldr	r1, [pc, #172]	; (3a108 <z_tick_sleep+0x10c>)
   3a05a:	4828      	ldr	r0, [pc, #160]	; (3a0fc <z_tick_sleep+0x100>)
   3a05c:	f003 ff1d 	bl	3de9a <printk>
   3a060:	a901      	add	r1, sp, #4
   3a062:	482a      	ldr	r0, [pc, #168]	; (3a10c <z_tick_sleep+0x110>)
   3a064:	f003 ff19 	bl	3de9a <printk>
   3a068:	214a      	movs	r1, #74	; 0x4a
   3a06a:	4826      	ldr	r0, [pc, #152]	; (3a104 <z_tick_sleep+0x108>)
   3a06c:	f003 ff68 	bl	3df40 <assert_post_action>
	pending_current = _current;
   3a070:	4d27      	ldr	r5, [pc, #156]	; (3a110 <z_tick_sleep+0x114>)
	z_spin_lock_set_owner(l);
   3a072:	a801      	add	r0, sp, #4
   3a074:	f000 f9b6 	bl	3a3e4 <z_spin_lock_set_owner>
   3a078:	4b26      	ldr	r3, [pc, #152]	; (3a114 <z_tick_sleep+0x118>)
   3a07a:	68a8      	ldr	r0, [r5, #8]
   3a07c:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   3a07e:	f7ff fc93 	bl	399a8 <z_remove_thread_from_ready_q>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   3a082:	68a8      	ldr	r0, [r5, #8]
   3a084:	4632      	mov	r2, r6
   3a086:	3018      	adds	r0, #24
   3a088:	4923      	ldr	r1, [pc, #140]	; (3a118 <z_tick_sleep+0x11c>)
   3a08a:	f000 fca9 	bl	3a9e0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   3a08e:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3a090:	a801      	add	r0, sp, #4
	thread->base.thread_state |= _THREAD_SUSPENDED;
   3a092:	7b53      	ldrb	r3, [r2, #13]
   3a094:	f043 0310 	orr.w	r3, r3, #16
   3a098:	7353      	strb	r3, [r2, #13]
   3a09a:	f000 f993 	bl	3a3c4 <z_spin_unlock_valid>
   3a09e:	b968      	cbnz	r0, 3a0bc <z_tick_sleep+0xc0>
   3a0a0:	2374      	movs	r3, #116	; 0x74
   3a0a2:	4a18      	ldr	r2, [pc, #96]	; (3a104 <z_tick_sleep+0x108>)
   3a0a4:	491d      	ldr	r1, [pc, #116]	; (3a11c <z_tick_sleep+0x120>)
   3a0a6:	4815      	ldr	r0, [pc, #84]	; (3a0fc <z_tick_sleep+0x100>)
   3a0a8:	f003 fef7 	bl	3de9a <printk>
   3a0ac:	a901      	add	r1, sp, #4
   3a0ae:	481c      	ldr	r0, [pc, #112]	; (3a120 <z_tick_sleep+0x124>)
   3a0b0:	f003 fef3 	bl	3de9a <printk>
   3a0b4:	2174      	movs	r1, #116	; 0x74
   3a0b6:	4813      	ldr	r0, [pc, #76]	; (3a104 <z_tick_sleep+0x108>)
   3a0b8:	f003 ff42 	bl	3df40 <assert_post_action>
   3a0bc:	4638      	mov	r0, r7
   3a0be:	f7ea f955 	bl	2436c <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   3a0c2:	68ab      	ldr	r3, [r5, #8]
   3a0c4:	7b5b      	ldrb	r3, [r3, #13]
   3a0c6:	06db      	lsls	r3, r3, #27
   3a0c8:	d50e      	bpl.n	3a0e8 <z_tick_sleep+0xec>
   3a0ca:	4916      	ldr	r1, [pc, #88]	; (3a124 <z_tick_sleep+0x128>)
   3a0cc:	f44f 6389 	mov.w	r3, #1096	; 0x448
   3a0d0:	4a09      	ldr	r2, [pc, #36]	; (3a0f8 <z_tick_sleep+0xfc>)
   3a0d2:	480a      	ldr	r0, [pc, #40]	; (3a0fc <z_tick_sleep+0x100>)
   3a0d4:	f003 fee1 	bl	3de9a <printk>
   3a0d8:	4809      	ldr	r0, [pc, #36]	; (3a100 <z_tick_sleep+0x104>)
   3a0da:	f003 fede 	bl	3de9a <printk>
   3a0de:	f44f 6189 	mov.w	r1, #1096	; 0x448
   3a0e2:	4805      	ldr	r0, [pc, #20]	; (3a0f8 <z_tick_sleep+0xfc>)
   3a0e4:	f003 ff2c 	bl	3df40 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   3a0e8:	f006 fa0e 	bl	40508 <z_tick_get_32>
   3a0ec:	1a24      	subs	r4, r4, r0
   3a0ee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   3a0f2:	e79a      	b.n	3a02a <z_tick_sleep+0x2e>
   3a0f4:	00048c9b 	.word	0x00048c9b
   3a0f8:	00048d33 	.word	0x00048d33
   3a0fc:	00043278 	.word	0x00043278
   3a100:	00044d12 	.word	0x00044d12
   3a104:	00043dc8 	.word	0x00043dc8
   3a108:	00043dee 	.word	0x00043dee
   3a10c:	00043e03 	.word	0x00043e03
   3a110:	2002926c 	.word	0x2002926c
   3a114:	200292a0 	.word	0x200292a0
   3a118:	00039581 	.word	0x00039581
   3a11c:	00043e1b 	.word	0x00043e1b
   3a120:	00043e32 	.word	0x00043e32
   3a124:	00048dac 	.word	0x00048dac

0003a128 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   3a128:	b538      	push	{r3, r4, r5, lr}
   3a12a:	4604      	mov	r4, r0
   3a12c:	f3ef 8305 	mrs	r3, IPSR
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   3a130:	b173      	cbz	r3, 3a150 <z_impl_k_sleep+0x28>
   3a132:	4916      	ldr	r1, [pc, #88]	; (3a18c <z_impl_k_sleep+0x64>)
   3a134:	f240 4357 	movw	r3, #1111	; 0x457
   3a138:	4a15      	ldr	r2, [pc, #84]	; (3a190 <z_impl_k_sleep+0x68>)
   3a13a:	4816      	ldr	r0, [pc, #88]	; (3a194 <z_impl_k_sleep+0x6c>)
   3a13c:	f003 fead 	bl	3de9a <printk>
   3a140:	4815      	ldr	r0, [pc, #84]	; (3a198 <z_impl_k_sleep+0x70>)
   3a142:	f003 feaa 	bl	3de9a <printk>
   3a146:	f240 4157 	movw	r1, #1111	; 0x457
   3a14a:	4811      	ldr	r0, [pc, #68]	; (3a190 <z_impl_k_sleep+0x68>)
   3a14c:	f003 fef8 	bl	3df40 <assert_post_action>

	if (ms == K_FOREVER) {
   3a150:	1c63      	adds	r3, r4, #1
   3a152:	d105      	bne.n	3a160 <z_impl_k_sleep+0x38>
		k_thread_suspend(_current);
   3a154:	4b11      	ldr	r3, [pc, #68]	; (3a19c <z_impl_k_sleep+0x74>)
   3a156:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   3a158:	f000 fa82 	bl	3a660 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   3a15c:	4620      	mov	r0, r4
   3a15e:	bd38      	pop	{r3, r4, r5, pc}
   3a160:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   3a164:	f240 30e7 	movw	r0, #999	; 0x3e7
   3a168:	2100      	movs	r1, #0
   3a16a:	2300      	movs	r3, #0
   3a16c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3a170:	fbe5 0104 	umlal	r0, r1, r5, r4
   3a174:	f7e2 fe02 	bl	1cd7c <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   3a178:	f7ff ff40 	bl	39ffc <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   3a17c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3a180:	fb80 0103 	smull	r0, r1, r0, r3
   3a184:	0bc4      	lsrs	r4, r0, #15
   3a186:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   3a18a:	e7e7      	b.n	3a15c <z_impl_k_sleep+0x34>
   3a18c:	00048c9b 	.word	0x00048c9b
   3a190:	00048d33 	.word	0x00048d33
   3a194:	00043278 	.word	0x00043278
   3a198:	00044d12 	.word	0x00044d12
   3a19c:	2002926c 	.word	0x2002926c

0003a1a0 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   3a1a0:	4b01      	ldr	r3, [pc, #4]	; (3a1a8 <z_impl_k_current_get+0x8>)
   3a1a2:	6898      	ldr	r0, [r3, #8]
   3a1a4:	4770      	bx	lr
   3a1a6:	bf00      	nop
   3a1a8:	2002926c 	.word	0x2002926c

0003a1ac <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   3a1ac:	b570      	push	{r4, r5, r6, lr}
   3a1ae:	4604      	mov	r4, r0
   3a1b0:	f04f 0320 	mov.w	r3, #32
   3a1b4:	f3ef 8611 	mrs	r6, BASEPRI
   3a1b8:	f383 8811 	msr	BASEPRI, r3
   3a1bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3a1c0:	481a      	ldr	r0, [pc, #104]	; (3a22c <z_impl_k_sem_give+0x80>)
   3a1c2:	f000 f8f1 	bl	3a3a8 <z_spin_lock_valid>
   3a1c6:	b968      	cbnz	r0, 3a1e4 <z_impl_k_sem_give+0x38>
   3a1c8:	234a      	movs	r3, #74	; 0x4a
   3a1ca:	4a19      	ldr	r2, [pc, #100]	; (3a230 <z_impl_k_sem_give+0x84>)
   3a1cc:	4919      	ldr	r1, [pc, #100]	; (3a234 <z_impl_k_sem_give+0x88>)
   3a1ce:	481a      	ldr	r0, [pc, #104]	; (3a238 <z_impl_k_sem_give+0x8c>)
   3a1d0:	f003 fe63 	bl	3de9a <printk>
   3a1d4:	4915      	ldr	r1, [pc, #84]	; (3a22c <z_impl_k_sem_give+0x80>)
   3a1d6:	4819      	ldr	r0, [pc, #100]	; (3a23c <z_impl_k_sem_give+0x90>)
   3a1d8:	f003 fe5f 	bl	3de9a <printk>
   3a1dc:	214a      	movs	r1, #74	; 0x4a
   3a1de:	4814      	ldr	r0, [pc, #80]	; (3a230 <z_impl_k_sem_give+0x84>)
   3a1e0:	f003 feae 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a1e4:	4811      	ldr	r0, [pc, #68]	; (3a22c <z_impl_k_sem_give+0x80>)
   3a1e6:	f000 f8fd 	bl	3a3e4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   3a1ea:	4620      	mov	r0, r4
   3a1ec:	f7ff fdbe 	bl	39d6c <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   3a1f0:	4605      	mov	r5, r0
   3a1f2:	b170      	cbz	r0, 3a212 <z_impl_k_sem_give+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3a1f4:	7b43      	ldrb	r3, [r0, #13]
   3a1f6:	06db      	lsls	r3, r3, #27
   3a1f8:	d103      	bne.n	3a202 <z_impl_k_sem_give+0x56>
	if (z_is_thread_ready(thread)) {
   3a1fa:	6983      	ldr	r3, [r0, #24]
   3a1fc:	b90b      	cbnz	r3, 3a202 <z_impl_k_sem_give+0x56>
		z_add_thread_to_ready_q(thread);
   3a1fe:	f7ff f93f 	bl	39480 <z_add_thread_to_ready_q>
   3a202:	2300      	movs	r3, #0
   3a204:	66ab      	str	r3, [r5, #104]	; 0x68
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   3a206:	4631      	mov	r1, r6
}
   3a208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   3a20c:	4807      	ldr	r0, [pc, #28]	; (3a22c <z_impl_k_sem_give+0x80>)
   3a20e:	f7fe bf4d 	b.w	390ac <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   3a212:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   3a216:	429a      	cmp	r2, r3
   3a218:	bf18      	it	ne
   3a21a:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3a21c:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   3a21e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3a220:	f104 0010 	add.w	r0, r4, #16
   3a224:	f006 f9cb 	bl	405be <z_handle_obj_poll_events>
   3a228:	e7ed      	b.n	3a206 <z_impl_k_sem_give+0x5a>
   3a22a:	bf00      	nop
   3a22c:	200292b0 	.word	0x200292b0
   3a230:	00043dc8 	.word	0x00043dc8
   3a234:	00043dee 	.word	0x00043dee
   3a238:	00043278 	.word	0x00043278
   3a23c:	00043e03 	.word	0x00043e03

0003a240 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   3a240:	b570      	push	{r4, r5, r6, lr}
   3a242:	4605      	mov	r5, r0
   3a244:	460e      	mov	r6, r1
   3a246:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");
   3a24a:	b16b      	cbz	r3, 3a268 <z_impl_k_sem_take+0x28>
   3a24c:	b161      	cbz	r1, 3a268 <z_impl_k_sem_take+0x28>
   3a24e:	4934      	ldr	r1, [pc, #208]	; (3a320 <z_impl_k_sem_take+0xe0>)
   3a250:	238c      	movs	r3, #140	; 0x8c
   3a252:	4a34      	ldr	r2, [pc, #208]	; (3a324 <z_impl_k_sem_take+0xe4>)
   3a254:	4834      	ldr	r0, [pc, #208]	; (3a328 <z_impl_k_sem_take+0xe8>)
   3a256:	f003 fe20 	bl	3de9a <printk>
   3a25a:	4834      	ldr	r0, [pc, #208]	; (3a32c <z_impl_k_sem_take+0xec>)
   3a25c:	f003 fe1d 	bl	3de9a <printk>
   3a260:	218c      	movs	r1, #140	; 0x8c
   3a262:	4830      	ldr	r0, [pc, #192]	; (3a324 <z_impl_k_sem_take+0xe4>)
   3a264:	f003 fe6c 	bl	3df40 <assert_post_action>
   3a268:	f04f 0320 	mov.w	r3, #32
   3a26c:	f3ef 8411 	mrs	r4, BASEPRI
   3a270:	f383 8811 	msr	BASEPRI, r3
   3a274:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3a278:	482d      	ldr	r0, [pc, #180]	; (3a330 <z_impl_k_sem_take+0xf0>)
   3a27a:	f000 f895 	bl	3a3a8 <z_spin_lock_valid>
   3a27e:	b968      	cbnz	r0, 3a29c <z_impl_k_sem_take+0x5c>
   3a280:	234a      	movs	r3, #74	; 0x4a
   3a282:	4a2c      	ldr	r2, [pc, #176]	; (3a334 <z_impl_k_sem_take+0xf4>)
   3a284:	492c      	ldr	r1, [pc, #176]	; (3a338 <z_impl_k_sem_take+0xf8>)
   3a286:	4828      	ldr	r0, [pc, #160]	; (3a328 <z_impl_k_sem_take+0xe8>)
   3a288:	f003 fe07 	bl	3de9a <printk>
   3a28c:	4928      	ldr	r1, [pc, #160]	; (3a330 <z_impl_k_sem_take+0xf0>)
   3a28e:	482b      	ldr	r0, [pc, #172]	; (3a33c <z_impl_k_sem_take+0xfc>)
   3a290:	f003 fe03 	bl	3de9a <printk>
   3a294:	214a      	movs	r1, #74	; 0x4a
   3a296:	4827      	ldr	r0, [pc, #156]	; (3a334 <z_impl_k_sem_take+0xf4>)
   3a298:	f003 fe52 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a29c:	4824      	ldr	r0, [pc, #144]	; (3a330 <z_impl_k_sem_take+0xf0>)
   3a29e:	f000 f8a1 	bl	3a3e4 <z_spin_lock_set_owner>

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   3a2a2:	68ab      	ldr	r3, [r5, #8]
   3a2a4:	b1cb      	cbz	r3, 3a2da <z_impl_k_sem_take+0x9a>
		sem->count--;
   3a2a6:	3b01      	subs	r3, #1
   3a2a8:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3a2aa:	4821      	ldr	r0, [pc, #132]	; (3a330 <z_impl_k_sem_take+0xf0>)
   3a2ac:	f000 f88a 	bl	3a3c4 <z_spin_unlock_valid>
   3a2b0:	b968      	cbnz	r0, 3a2ce <z_impl_k_sem_take+0x8e>
   3a2b2:	235d      	movs	r3, #93	; 0x5d
   3a2b4:	4a1f      	ldr	r2, [pc, #124]	; (3a334 <z_impl_k_sem_take+0xf4>)
   3a2b6:	4922      	ldr	r1, [pc, #136]	; (3a340 <z_impl_k_sem_take+0x100>)
   3a2b8:	481b      	ldr	r0, [pc, #108]	; (3a328 <z_impl_k_sem_take+0xe8>)
   3a2ba:	f003 fdee 	bl	3de9a <printk>
   3a2be:	491c      	ldr	r1, [pc, #112]	; (3a330 <z_impl_k_sem_take+0xf0>)
   3a2c0:	4820      	ldr	r0, [pc, #128]	; (3a344 <z_impl_k_sem_take+0x104>)
   3a2c2:	f003 fdea 	bl	3de9a <printk>
   3a2c6:	215d      	movs	r1, #93	; 0x5d
   3a2c8:	481a      	ldr	r0, [pc, #104]	; (3a334 <z_impl_k_sem_take+0xf4>)
   3a2ca:	f003 fe39 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   3a2ce:	f384 8811 	msr	BASEPRI, r4
   3a2d2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   3a2d6:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   3a2d8:	bd70      	pop	{r4, r5, r6, pc}
	if (timeout == K_NO_WAIT) {
   3a2da:	b9c6      	cbnz	r6, 3a30e <z_impl_k_sem_take+0xce>
   3a2dc:	4814      	ldr	r0, [pc, #80]	; (3a330 <z_impl_k_sem_take+0xf0>)
   3a2de:	f000 f871 	bl	3a3c4 <z_spin_unlock_valid>
   3a2e2:	b968      	cbnz	r0, 3a300 <z_impl_k_sem_take+0xc0>
   3a2e4:	235d      	movs	r3, #93	; 0x5d
   3a2e6:	4a13      	ldr	r2, [pc, #76]	; (3a334 <z_impl_k_sem_take+0xf4>)
   3a2e8:	4915      	ldr	r1, [pc, #84]	; (3a340 <z_impl_k_sem_take+0x100>)
   3a2ea:	480f      	ldr	r0, [pc, #60]	; (3a328 <z_impl_k_sem_take+0xe8>)
   3a2ec:	f003 fdd5 	bl	3de9a <printk>
   3a2f0:	490f      	ldr	r1, [pc, #60]	; (3a330 <z_impl_k_sem_take+0xf0>)
   3a2f2:	4814      	ldr	r0, [pc, #80]	; (3a344 <z_impl_k_sem_take+0x104>)
   3a2f4:	f003 fdd1 	bl	3de9a <printk>
   3a2f8:	215d      	movs	r1, #93	; 0x5d
   3a2fa:	480e      	ldr	r0, [pc, #56]	; (3a334 <z_impl_k_sem_take+0xf4>)
   3a2fc:	f003 fe20 	bl	3df40 <assert_post_action>
   3a300:	f384 8811 	msr	BASEPRI, r4
   3a304:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   3a308:	f06f 000f 	mvn.w	r0, #15
		goto out;
   3a30c:	e7e4      	b.n	3a2d8 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   3a30e:	4633      	mov	r3, r6
   3a310:	462a      	mov	r2, r5
   3a312:	4621      	mov	r1, r4
}
   3a314:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   3a318:	4805      	ldr	r0, [pc, #20]	; (3a330 <z_impl_k_sem_take+0xf0>)
   3a31a:	f7ff bc6b 	b.w	39bf4 <z_pend_curr>
   3a31e:	bf00      	nop
   3a320:	00048e04 	.word	0x00048e04
   3a324:	00048de4 	.word	0x00048de4
   3a328:	00043278 	.word	0x00043278
   3a32c:	00044d12 	.word	0x00044d12
   3a330:	200292b0 	.word	0x200292b0
   3a334:	00043dc8 	.word	0x00043dc8
   3a338:	00043dee 	.word	0x00043dee
   3a33c:	00043e03 	.word	0x00043e03
   3a340:	00043e1b 	.word	0x00043e1b
   3a344:	00043e32 	.word	0x00043e32

0003a348 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   3a348:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   3a34a:	4c08      	ldr	r4, [pc, #32]	; (3a36c <k_sys_work_q_init+0x24>)
   3a34c:	f04f 33ff 	mov.w	r3, #4294967295
   3a350:	f44f 6200 	mov.w	r2, #2048	; 0x800
   3a354:	4906      	ldr	r1, [pc, #24]	; (3a370 <k_sys_work_q_init+0x28>)
   3a356:	4620      	mov	r0, r4
   3a358:	f000 fa08 	bl	3a76c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   3a35c:	4905      	ldr	r1, [pc, #20]	; (3a374 <k_sys_work_q_init+0x2c>)
   3a35e:	f104 0014 	add.w	r0, r4, #20
   3a362:	f006 f84f 	bl	40404 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   3a366:	2000      	movs	r0, #0
   3a368:	bd10      	pop	{r4, pc}
   3a36a:	bf00      	nop
   3a36c:	200292b4 	.word	0x200292b4
   3a370:	2002fde0 	.word	0x2002fde0
   3a374:	00048e30 	.word	0x00048e30

0003a378 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   3a378:	b530      	push	{r4, r5, lr}
   3a37a:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3a37c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   3a37e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3a380:	9504      	str	r5, [sp, #16]
   3a382:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   3a384:	9503      	str	r5, [sp, #12]
   3a386:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   3a388:	9502      	str	r5, [sp, #8]
   3a38a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   3a38c:	9501      	str	r5, [sp, #4]
   3a38e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   3a390:	9500      	str	r5, [sp, #0]
   3a392:	f7ea f855 	bl	24440 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   3a396:	4b03      	ldr	r3, [pc, #12]	; (3a3a4 <z_setup_new_thread+0x2c>)
   3a398:	689b      	ldr	r3, [r3, #8]
   3a39a:	b103      	cbz	r3, 3a39e <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   3a39c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3a39e:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   3a3a0:	b007      	add	sp, #28
   3a3a2:	bd30      	pop	{r4, r5, pc}
   3a3a4:	2002926c 	.word	0x2002926c

0003a3a8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   3a3a8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   3a3aa:	b138      	cbz	r0, 3a3bc <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   3a3ac:	4b04      	ldr	r3, [pc, #16]	; (3a3c0 <z_spin_lock_valid+0x18>)
   3a3ae:	f000 0003 	and.w	r0, r0, #3
   3a3b2:	7d1b      	ldrb	r3, [r3, #20]
   3a3b4:	1ac0      	subs	r0, r0, r3
   3a3b6:	bf18      	it	ne
   3a3b8:	2001      	movne	r0, #1
   3a3ba:	4770      	bx	lr
			return false;
		}
	}
	return true;
   3a3bc:	2001      	movs	r0, #1
}
   3a3be:	4770      	bx	lr
   3a3c0:	2002926c 	.word	0x2002926c

0003a3c4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   3a3c4:	4a06      	ldr	r2, [pc, #24]	; (3a3e0 <z_spin_unlock_valid+0x1c>)
   3a3c6:	7d11      	ldrb	r1, [r2, #20]
   3a3c8:	6893      	ldr	r3, [r2, #8]
   3a3ca:	6802      	ldr	r2, [r0, #0]
   3a3cc:	430b      	orrs	r3, r1
   3a3ce:	429a      	cmp	r2, r3
   3a3d0:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   3a3d4:	bf06      	itte	eq
   3a3d6:	6003      	streq	r3, [r0, #0]
	return true;
   3a3d8:	2001      	moveq	r0, #1
		return false;
   3a3da:	4618      	movne	r0, r3
}
   3a3dc:	4770      	bx	lr
   3a3de:	bf00      	nop
   3a3e0:	2002926c 	.word	0x2002926c

0003a3e4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   3a3e4:	4a02      	ldr	r2, [pc, #8]	; (3a3f0 <z_spin_lock_set_owner+0xc>)
   3a3e6:	7d11      	ldrb	r1, [r2, #20]
   3a3e8:	6893      	ldr	r3, [r2, #8]
   3a3ea:	430b      	orrs	r3, r1
   3a3ec:	6003      	str	r3, [r0, #0]
}
   3a3ee:	4770      	bx	lr
   3a3f0:	2002926c 	.word	0x2002926c

0003a3f4 <z_impl_k_thread_start>:
{
   3a3f4:	b538      	push	{r3, r4, r5, lr}
   3a3f6:	4604      	mov	r4, r0
	__asm__ volatile(
   3a3f8:	f04f 0320 	mov.w	r3, #32
   3a3fc:	f3ef 8511 	mrs	r5, BASEPRI
   3a400:	f383 8811 	msr	BASEPRI, r3
   3a404:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3a408:	481f      	ldr	r0, [pc, #124]	; (3a488 <z_impl_k_thread_start+0x94>)
   3a40a:	f7ff ffcd 	bl	3a3a8 <z_spin_lock_valid>
   3a40e:	b968      	cbnz	r0, 3a42c <z_impl_k_thread_start+0x38>
   3a410:	234a      	movs	r3, #74	; 0x4a
   3a412:	4a1e      	ldr	r2, [pc, #120]	; (3a48c <z_impl_k_thread_start+0x98>)
   3a414:	491e      	ldr	r1, [pc, #120]	; (3a490 <z_impl_k_thread_start+0x9c>)
   3a416:	481f      	ldr	r0, [pc, #124]	; (3a494 <z_impl_k_thread_start+0xa0>)
   3a418:	f003 fd3f 	bl	3de9a <printk>
   3a41c:	491a      	ldr	r1, [pc, #104]	; (3a488 <z_impl_k_thread_start+0x94>)
   3a41e:	481e      	ldr	r0, [pc, #120]	; (3a498 <z_impl_k_thread_start+0xa4>)
   3a420:	f003 fd3b 	bl	3de9a <printk>
   3a424:	214a      	movs	r1, #74	; 0x4a
   3a426:	4819      	ldr	r0, [pc, #100]	; (3a48c <z_impl_k_thread_start+0x98>)
   3a428:	f003 fd8a 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a42c:	4816      	ldr	r0, [pc, #88]	; (3a488 <z_impl_k_thread_start+0x94>)
   3a42e:	f7ff ffd9 	bl	3a3e4 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   3a432:	7b63      	ldrb	r3, [r4, #13]
   3a434:	075a      	lsls	r2, r3, #29
   3a436:	d416      	bmi.n	3a466 <z_impl_k_thread_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3a438:	4813      	ldr	r0, [pc, #76]	; (3a488 <z_impl_k_thread_start+0x94>)
   3a43a:	f7ff ffc3 	bl	3a3c4 <z_spin_unlock_valid>
   3a43e:	b968      	cbnz	r0, 3a45c <z_impl_k_thread_start+0x68>
   3a440:	235d      	movs	r3, #93	; 0x5d
   3a442:	4a12      	ldr	r2, [pc, #72]	; (3a48c <z_impl_k_thread_start+0x98>)
   3a444:	4915      	ldr	r1, [pc, #84]	; (3a49c <z_impl_k_thread_start+0xa8>)
   3a446:	4813      	ldr	r0, [pc, #76]	; (3a494 <z_impl_k_thread_start+0xa0>)
   3a448:	f003 fd27 	bl	3de9a <printk>
   3a44c:	490e      	ldr	r1, [pc, #56]	; (3a488 <z_impl_k_thread_start+0x94>)
   3a44e:	4814      	ldr	r0, [pc, #80]	; (3a4a0 <z_impl_k_thread_start+0xac>)
   3a450:	f003 fd23 	bl	3de9a <printk>
   3a454:	215d      	movs	r1, #93	; 0x5d
   3a456:	480d      	ldr	r0, [pc, #52]	; (3a48c <z_impl_k_thread_start+0x98>)
   3a458:	f003 fd72 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   3a45c:	f385 8811 	msr	BASEPRI, r5
   3a460:	f3bf 8f6f 	isb	sy
}
   3a464:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3a466:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3a46a:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3a46e:	7362      	strb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3a470:	d104      	bne.n	3a47c <z_impl_k_thread_start+0x88>
	if (z_is_thread_ready(thread)) {
   3a472:	69a3      	ldr	r3, [r4, #24]
   3a474:	b913      	cbnz	r3, 3a47c <z_impl_k_thread_start+0x88>
		z_add_thread_to_ready_q(thread);
   3a476:	4620      	mov	r0, r4
   3a478:	f7ff f802 	bl	39480 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   3a47c:	4629      	mov	r1, r5
}
   3a47e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   3a482:	4801      	ldr	r0, [pc, #4]	; (3a488 <z_impl_k_thread_start+0x94>)
   3a484:	f7fe be12 	b.w	390ac <z_reschedule>
   3a488:	20029378 	.word	0x20029378
   3a48c:	00043dc8 	.word	0x00043dc8
   3a490:	00043dee 	.word	0x00043dee
   3a494:	00043278 	.word	0x00043278
   3a498:	00043e03 	.word	0x00043e03
   3a49c:	00043e1b 	.word	0x00043e1b
   3a4a0:	00043e32 	.word	0x00043e32

0003a4a4 <z_impl_k_thread_create>:
{
   3a4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3a4a8:	b086      	sub	sp, #24
   3a4aa:	4604      	mov	r4, r0
   3a4ac:	460e      	mov	r6, r1
   3a4ae:	4617      	mov	r7, r2
   3a4b0:	4698      	mov	r8, r3
   3a4b2:	9d11      	ldr	r5, [sp, #68]	; 0x44
   3a4b4:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   3a4b8:	b173      	cbz	r3, 3a4d8 <z_impl_k_thread_create+0x34>
   3a4ba:	491f      	ldr	r1, [pc, #124]	; (3a538 <z_impl_k_thread_create+0x94>)
   3a4bc:	f240 2357 	movw	r3, #599	; 0x257
   3a4c0:	4a1e      	ldr	r2, [pc, #120]	; (3a53c <z_impl_k_thread_create+0x98>)
   3a4c2:	481f      	ldr	r0, [pc, #124]	; (3a540 <z_impl_k_thread_create+0x9c>)
   3a4c4:	f003 fce9 	bl	3de9a <printk>
   3a4c8:	481e      	ldr	r0, [pc, #120]	; (3a544 <z_impl_k_thread_create+0xa0>)
   3a4ca:	f003 fce6 	bl	3de9a <printk>
   3a4ce:	f240 2157 	movw	r1, #599	; 0x257
   3a4d2:	481a      	ldr	r0, [pc, #104]	; (3a53c <z_impl_k_thread_create+0x98>)
   3a4d4:	f003 fd34 	bl	3df40 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3a4d8:	2300      	movs	r3, #0
   3a4da:	9305      	str	r3, [sp, #20]
   3a4dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3a4de:	463a      	mov	r2, r7
   3a4e0:	9304      	str	r3, [sp, #16]
   3a4e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3a4e4:	4631      	mov	r1, r6
   3a4e6:	9303      	str	r3, [sp, #12]
   3a4e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a4ea:	4620      	mov	r0, r4
   3a4ec:	9302      	str	r3, [sp, #8]
   3a4ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3a4f0:	9301      	str	r3, [sp, #4]
   3a4f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3a4f4:	9300      	str	r3, [sp, #0]
   3a4f6:	4643      	mov	r3, r8
   3a4f8:	f7ff ff3e 	bl	3a378 <z_setup_new_thread>
	if (delay != K_FOREVER) {
   3a4fc:	1c6b      	adds	r3, r5, #1
   3a4fe:	d003      	beq.n	3a508 <z_impl_k_thread_create+0x64>
	if (delay == 0) {
   3a500:	b935      	cbnz	r5, 3a510 <z_impl_k_thread_create+0x6c>
	z_impl_k_thread_start(thread);
   3a502:	4620      	mov	r0, r4
   3a504:	f7ff ff76 	bl	3a3f4 <z_impl_k_thread_start>
}
   3a508:	4620      	mov	r0, r4
   3a50a:	b006      	add	sp, #24
   3a50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   3a510:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   3a514:	f240 30e7 	movw	r0, #999	; 0x3e7
   3a518:	2100      	movs	r1, #0
   3a51a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3a51e:	2300      	movs	r3, #0
   3a520:	fbe6 0105 	umlal	r0, r1, r6, r5
   3a524:	f7e2 fc2a 	bl	1cd7c <__aeabi_uldivmod>
   3a528:	4907      	ldr	r1, [pc, #28]	; (3a548 <z_impl_k_thread_create+0xa4>)
   3a52a:	1c42      	adds	r2, r0, #1
   3a52c:	f104 0018 	add.w	r0, r4, #24
   3a530:	f000 fa56 	bl	3a9e0 <z_add_timeout>
   3a534:	e7e8      	b.n	3a508 <z_impl_k_thread_create+0x64>
   3a536:	bf00      	nop
   3a538:	00048c9b 	.word	0x00048c9b
   3a53c:	00048e39 	.word	0x00048e39
   3a540:	00043278 	.word	0x00043278
   3a544:	00048e5c 	.word	0x00048e5c
   3a548:	00039581 	.word	0x00039581

0003a54c <z_init_static_threads>:
{
   3a54c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   3a550:	4f3c      	ldr	r7, [pc, #240]	; (3a644 <z_init_static_threads+0xf8>)
   3a552:	4d3d      	ldr	r5, [pc, #244]	; (3a648 <z_init_static_threads+0xfc>)
   3a554:	463e      	mov	r6, r7
   3a556:	f8df 8100 	ldr.w	r8, [pc, #256]	; 3a658 <z_init_static_threads+0x10c>
{
   3a55a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   3a55c:	42bd      	cmp	r5, r7
   3a55e:	d90e      	bls.n	3a57e <z_init_static_threads+0x32>
   3a560:	493a      	ldr	r1, [pc, #232]	; (3a64c <z_init_static_threads+0x100>)
   3a562:	f240 23e7 	movw	r3, #743	; 0x2e7
   3a566:	4642      	mov	r2, r8
   3a568:	4839      	ldr	r0, [pc, #228]	; (3a650 <z_init_static_threads+0x104>)
   3a56a:	f003 fc96 	bl	3de9a <printk>
   3a56e:	4839      	ldr	r0, [pc, #228]	; (3a654 <z_init_static_threads+0x108>)
   3a570:	f003 fc93 	bl	3de9a <printk>
   3a574:	f240 21e7 	movw	r1, #743	; 0x2e7
   3a578:	4640      	mov	r0, r8
   3a57a:	f003 fce1 	bl	3df40 <assert_post_action>
   3a57e:	42b5      	cmp	r5, r6
   3a580:	f105 0430 	add.w	r4, r5, #48	; 0x30
   3a584:	d31f      	bcc.n	3a5c6 <z_init_static_threads+0x7a>
	k_sched_lock();
   3a586:	f7fe fdcd 	bl	39124 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   3a58a:	4c2f      	ldr	r4, [pc, #188]	; (3a648 <z_init_static_threads+0xfc>)
   3a58c:	4d32      	ldr	r5, [pc, #200]	; (3a658 <z_init_static_threads+0x10c>)
   3a58e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 3a64c <z_init_static_threads+0x100>
   3a592:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 3a650 <z_init_static_threads+0x104>
   3a596:	42b4      	cmp	r4, r6
   3a598:	d90e      	bls.n	3a5b8 <z_init_static_threads+0x6c>
   3a59a:	4641      	mov	r1, r8
   3a59c:	f240 3306 	movw	r3, #774	; 0x306
   3a5a0:	462a      	mov	r2, r5
   3a5a2:	4648      	mov	r0, r9
   3a5a4:	f003 fc79 	bl	3de9a <printk>
   3a5a8:	482a      	ldr	r0, [pc, #168]	; (3a654 <z_init_static_threads+0x108>)
   3a5aa:	f003 fc76 	bl	3de9a <printk>
   3a5ae:	f240 3106 	movw	r1, #774	; 0x306
   3a5b2:	4628      	mov	r0, r5
   3a5b4:	f003 fcc4 	bl	3df40 <assert_post_action>
   3a5b8:	42b4      	cmp	r4, r6
   3a5ba:	d321      	bcc.n	3a600 <z_init_static_threads+0xb4>
}
   3a5bc:	b007      	add	sp, #28
   3a5be:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   3a5c2:	f7fe bee1 	b.w	39388 <k_sched_unlock>
		z_setup_new_thread(
   3a5c6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3a5ca:	9305      	str	r3, [sp, #20]
   3a5cc:	f854 3c10 	ldr.w	r3, [r4, #-16]
   3a5d0:	9304      	str	r3, [sp, #16]
   3a5d2:	f854 3c14 	ldr.w	r3, [r4, #-20]
   3a5d6:	9303      	str	r3, [sp, #12]
   3a5d8:	f854 3c18 	ldr.w	r3, [r4, #-24]
   3a5dc:	9302      	str	r3, [sp, #8]
   3a5de:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   3a5e2:	9301      	str	r3, [sp, #4]
   3a5e4:	f854 3c20 	ldr.w	r3, [r4, #-32]
   3a5e8:	9300      	str	r3, [sp, #0]
   3a5ea:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   3a5ee:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   3a5f2:	f7ff fec1 	bl	3a378 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   3a5f6:	f854 3c30 	ldr.w	r3, [r4, #-48]
   3a5fa:	64dd      	str	r5, [r3, #76]	; 0x4c
   3a5fc:	4625      	mov	r5, r4
   3a5fe:	e7ad      	b.n	3a55c <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_FOREVER) {
   3a600:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   3a604:	f1bc 3fff 	cmp.w	ip, #4294967295
   3a608:	d006      	beq.n	3a618 <z_init_static_threads+0xcc>
			schedule_new_thread(thread_data->init_thread,
   3a60a:	6827      	ldr	r7, [r4, #0]
	if (delay == 0) {
   3a60c:	f1bc 0f00 	cmp.w	ip, #0
   3a610:	d104      	bne.n	3a61c <z_init_static_threads+0xd0>
   3a612:	4638      	mov	r0, r7
   3a614:	f7ff feee 	bl	3a3f4 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   3a618:	3430      	adds	r4, #48	; 0x30
   3a61a:	e7bc      	b.n	3a596 <z_init_static_threads+0x4a>
   3a61c:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   3a620:	f240 30e7 	movw	r0, #999	; 0x3e7
   3a624:	2100      	movs	r1, #0
   3a626:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3a62a:	2300      	movs	r3, #0
   3a62c:	fbee 010c 	umlal	r0, r1, lr, ip
   3a630:	f7e2 fba4 	bl	1cd7c <__aeabi_uldivmod>
   3a634:	4909      	ldr	r1, [pc, #36]	; (3a65c <z_init_static_threads+0x110>)
   3a636:	1c42      	adds	r2, r0, #1
   3a638:	f107 0018 	add.w	r0, r7, #24
   3a63c:	f000 f9d0 	bl	3a9e0 <z_add_timeout>
   3a640:	e7ea      	b.n	3a618 <z_init_static_threads+0xcc>
   3a642:	bf00      	nop
   3a644:	200323f0 	.word	0x200323f0
   3a648:	200323f0 	.word	0x200323f0
   3a64c:	00048e81 	.word	0x00048e81
   3a650:	00043278 	.word	0x00043278
   3a654:	00048b72 	.word	0x00048b72
   3a658:	00048e39 	.word	0x00048e39
   3a65c:	00039581 	.word	0x00039581

0003a660 <z_impl_k_thread_suspend>:
{
   3a660:	b538      	push	{r3, r4, r5, lr}
   3a662:	4605      	mov	r5, r0
	__asm__ volatile(
   3a664:	f04f 0320 	mov.w	r3, #32
   3a668:	f3ef 8411 	mrs	r4, BASEPRI
   3a66c:	f383 8811 	msr	BASEPRI, r3
   3a670:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3a674:	481c      	ldr	r0, [pc, #112]	; (3a6e8 <z_impl_k_thread_suspend+0x88>)
   3a676:	f7ff fe97 	bl	3a3a8 <z_spin_lock_valid>
   3a67a:	b968      	cbnz	r0, 3a698 <z_impl_k_thread_suspend+0x38>
   3a67c:	234a      	movs	r3, #74	; 0x4a
   3a67e:	4a1b      	ldr	r2, [pc, #108]	; (3a6ec <z_impl_k_thread_suspend+0x8c>)
   3a680:	491b      	ldr	r1, [pc, #108]	; (3a6f0 <z_impl_k_thread_suspend+0x90>)
   3a682:	481c      	ldr	r0, [pc, #112]	; (3a6f4 <z_impl_k_thread_suspend+0x94>)
   3a684:	f003 fc09 	bl	3de9a <printk>
   3a688:	4917      	ldr	r1, [pc, #92]	; (3a6e8 <z_impl_k_thread_suspend+0x88>)
   3a68a:	481b      	ldr	r0, [pc, #108]	; (3a6f8 <z_impl_k_thread_suspend+0x98>)
   3a68c:	f003 fc05 	bl	3de9a <printk>
   3a690:	214a      	movs	r1, #74	; 0x4a
   3a692:	4816      	ldr	r0, [pc, #88]	; (3a6ec <z_impl_k_thread_suspend+0x8c>)
   3a694:	f003 fc54 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a698:	4813      	ldr	r0, [pc, #76]	; (3a6e8 <z_impl_k_thread_suspend+0x88>)
   3a69a:	f7ff fea3 	bl	3a3e4 <z_spin_lock_set_owner>
	z_thread_single_suspend(thread);
   3a69e:	4628      	mov	r0, r5
   3a6a0:	f7ff f89c 	bl	397dc <z_thread_single_suspend>
	if (thread == _current) {
   3a6a4:	4b15      	ldr	r3, [pc, #84]	; (3a6fc <z_impl_k_thread_suspend+0x9c>)
   3a6a6:	689b      	ldr	r3, [r3, #8]
   3a6a8:	42ab      	cmp	r3, r5
   3a6aa:	d105      	bne.n	3a6b8 <z_impl_k_thread_suspend+0x58>
		z_reschedule(&lock, key);
   3a6ac:	4621      	mov	r1, r4
}
   3a6ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   3a6b2:	480d      	ldr	r0, [pc, #52]	; (3a6e8 <z_impl_k_thread_suspend+0x88>)
   3a6b4:	f7fe bcfa 	b.w	390ac <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3a6b8:	480b      	ldr	r0, [pc, #44]	; (3a6e8 <z_impl_k_thread_suspend+0x88>)
   3a6ba:	f7ff fe83 	bl	3a3c4 <z_spin_unlock_valid>
   3a6be:	b968      	cbnz	r0, 3a6dc <z_impl_k_thread_suspend+0x7c>
   3a6c0:	235d      	movs	r3, #93	; 0x5d
   3a6c2:	4a0a      	ldr	r2, [pc, #40]	; (3a6ec <z_impl_k_thread_suspend+0x8c>)
   3a6c4:	490e      	ldr	r1, [pc, #56]	; (3a700 <z_impl_k_thread_suspend+0xa0>)
   3a6c6:	480b      	ldr	r0, [pc, #44]	; (3a6f4 <z_impl_k_thread_suspend+0x94>)
   3a6c8:	f003 fbe7 	bl	3de9a <printk>
   3a6cc:	4906      	ldr	r1, [pc, #24]	; (3a6e8 <z_impl_k_thread_suspend+0x88>)
   3a6ce:	480d      	ldr	r0, [pc, #52]	; (3a704 <z_impl_k_thread_suspend+0xa4>)
   3a6d0:	f003 fbe3 	bl	3de9a <printk>
   3a6d4:	215d      	movs	r1, #93	; 0x5d
   3a6d6:	4805      	ldr	r0, [pc, #20]	; (3a6ec <z_impl_k_thread_suspend+0x8c>)
   3a6d8:	f003 fc32 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   3a6dc:	f384 8811 	msr	BASEPRI, r4
   3a6e0:	f3bf 8f6f 	isb	sy
}
   3a6e4:	bd38      	pop	{r3, r4, r5, pc}
   3a6e6:	bf00      	nop
   3a6e8:	20029378 	.word	0x20029378
   3a6ec:	00043dc8 	.word	0x00043dc8
   3a6f0:	00043dee 	.word	0x00043dee
   3a6f4:	00043278 	.word	0x00043278
   3a6f8:	00043e03 	.word	0x00043e03
   3a6fc:	2002926c 	.word	0x2002926c
   3a700:	00043e1b 	.word	0x00043e1b
   3a704:	00043e32 	.word	0x00043e32

0003a708 <z_impl_k_thread_resume>:
{
   3a708:	b538      	push	{r3, r4, r5, lr}
   3a70a:	4605      	mov	r5, r0
	__asm__ volatile(
   3a70c:	f04f 0320 	mov.w	r3, #32
   3a710:	f3ef 8411 	mrs	r4, BASEPRI
   3a714:	f383 8811 	msr	BASEPRI, r3
   3a718:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3a71c:	480e      	ldr	r0, [pc, #56]	; (3a758 <z_impl_k_thread_resume+0x50>)
   3a71e:	f7ff fe43 	bl	3a3a8 <z_spin_lock_valid>
   3a722:	b968      	cbnz	r0, 3a740 <z_impl_k_thread_resume+0x38>
   3a724:	234a      	movs	r3, #74	; 0x4a
   3a726:	4a0d      	ldr	r2, [pc, #52]	; (3a75c <z_impl_k_thread_resume+0x54>)
   3a728:	490d      	ldr	r1, [pc, #52]	; (3a760 <z_impl_k_thread_resume+0x58>)
   3a72a:	480e      	ldr	r0, [pc, #56]	; (3a764 <z_impl_k_thread_resume+0x5c>)
   3a72c:	f003 fbb5 	bl	3de9a <printk>
   3a730:	4909      	ldr	r1, [pc, #36]	; (3a758 <z_impl_k_thread_resume+0x50>)
   3a732:	480d      	ldr	r0, [pc, #52]	; (3a768 <z_impl_k_thread_resume+0x60>)
   3a734:	f003 fbb1 	bl	3de9a <printk>
   3a738:	214a      	movs	r1, #74	; 0x4a
   3a73a:	4808      	ldr	r0, [pc, #32]	; (3a75c <z_impl_k_thread_resume+0x54>)
   3a73c:	f003 fc00 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a740:	4805      	ldr	r0, [pc, #20]	; (3a758 <z_impl_k_thread_resume+0x50>)
   3a742:	f7ff fe4f 	bl	3a3e4 <z_spin_lock_set_owner>
	z_thread_single_resume(thread);
   3a746:	4628      	mov	r0, r5
   3a748:	f005 fe70 	bl	4042c <z_thread_single_resume>
	z_reschedule(&lock, key);
   3a74c:	4621      	mov	r1, r4
}
   3a74e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   3a752:	4801      	ldr	r0, [pc, #4]	; (3a758 <z_impl_k_thread_resume+0x50>)
   3a754:	f7fe bcaa 	b.w	390ac <z_reschedule>
   3a758:	20029378 	.word	0x20029378
   3a75c:	00043dc8 	.word	0x00043dc8
   3a760:	00043dee 	.word	0x00043dee
   3a764:	00043278 	.word	0x00043278
   3a768:	00043e03 	.word	0x00043e03

0003a76c <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   3a76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3a770:	4605      	mov	r5, r0
   3a772:	b086      	sub	sp, #24
   3a774:	460e      	mov	r6, r1
   3a776:	4617      	mov	r7, r2
   3a778:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   3a77a:	f005 fdd9 	bl	40330 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   3a77e:	f105 0414 	add.w	r4, r5, #20
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   3a782:	2000      	movs	r0, #0
   3a784:	4b09      	ldr	r3, [pc, #36]	; (3a7ac <k_work_q_start+0x40>)
   3a786:	e9cd 0004 	strd	r0, r0, [sp, #16]
   3a78a:	e9cd 0802 	strd	r0, r8, [sp, #8]
   3a78e:	e9cd 5000 	strd	r5, r0, [sp]
   3a792:	463a      	mov	r2, r7
   3a794:	4631      	mov	r1, r6
   3a796:	4620      	mov	r0, r4
   3a798:	f7ff fe84 	bl	3a4a4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   3a79c:	4620      	mov	r0, r4
   3a79e:	4904      	ldr	r1, [pc, #16]	; (3a7b0 <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   3a7a0:	b006      	add	sp, #24
   3a7a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3a7a6:	f005 be2d 	b.w	40404 <z_impl_k_thread_name_set>
   3a7aa:	bf00      	nop
   3a7ac:	0003df0b 	.word	0x0003df0b
   3a7b0:	00045228 	.word	0x00045228

0003a7b4 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   3a7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3a7b8:	4606      	mov	r6, r0
   3a7ba:	460d      	mov	r5, r1
   3a7bc:	4690      	mov	r8, r2
   3a7be:	f04f 0320 	mov.w	r3, #32
   3a7c2:	f3ef 8711 	mrs	r7, BASEPRI
   3a7c6:	f383 8811 	msr	BASEPRI, r3
   3a7ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3a7ce:	4837      	ldr	r0, [pc, #220]	; (3a8ac <k_delayed_work_submit_to_queue+0xf8>)
   3a7d0:	f7ff fdea 	bl	3a3a8 <z_spin_lock_valid>
   3a7d4:	b968      	cbnz	r0, 3a7f2 <k_delayed_work_submit_to_queue+0x3e>
   3a7d6:	234a      	movs	r3, #74	; 0x4a
   3a7d8:	4a35      	ldr	r2, [pc, #212]	; (3a8b0 <k_delayed_work_submit_to_queue+0xfc>)
   3a7da:	4936      	ldr	r1, [pc, #216]	; (3a8b4 <k_delayed_work_submit_to_queue+0x100>)
   3a7dc:	4836      	ldr	r0, [pc, #216]	; (3a8b8 <k_delayed_work_submit_to_queue+0x104>)
   3a7de:	f003 fb5c 	bl	3de9a <printk>
   3a7e2:	4932      	ldr	r1, [pc, #200]	; (3a8ac <k_delayed_work_submit_to_queue+0xf8>)
   3a7e4:	4835      	ldr	r0, [pc, #212]	; (3a8bc <k_delayed_work_submit_to_queue+0x108>)
   3a7e6:	f003 fb58 	bl	3de9a <printk>
   3a7ea:	214a      	movs	r1, #74	; 0x4a
   3a7ec:	4830      	ldr	r0, [pc, #192]	; (3a8b0 <k_delayed_work_submit_to_queue+0xfc>)
   3a7ee:	f003 fba7 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a7f2:	482e      	ldr	r0, [pc, #184]	; (3a8ac <k_delayed_work_submit_to_queue+0xf8>)
   3a7f4:	f7ff fdf6 	bl	3a3e4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   3a7f8:	69ec      	ldr	r4, [r5, #28]
   3a7fa:	b1ec      	cbz	r4, 3a838 <k_delayed_work_submit_to_queue+0x84>
   3a7fc:	42b4      	cmp	r4, r6
   3a7fe:	d152      	bne.n	3a8a6 <k_delayed_work_submit_to_queue+0xf2>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   3a800:	4628      	mov	r0, r5
   3a802:	f005 fe37 	bl	40474 <work_cancel>
		if (err < 0) {
   3a806:	1e04      	subs	r4, r0, #0
   3a808:	da18      	bge.n	3a83c <k_delayed_work_submit_to_queue+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3a80a:	4828      	ldr	r0, [pc, #160]	; (3a8ac <k_delayed_work_submit_to_queue+0xf8>)
   3a80c:	f7ff fdda 	bl	3a3c4 <z_spin_unlock_valid>
   3a810:	b968      	cbnz	r0, 3a82e <k_delayed_work_submit_to_queue+0x7a>
   3a812:	235d      	movs	r3, #93	; 0x5d
   3a814:	4a26      	ldr	r2, [pc, #152]	; (3a8b0 <k_delayed_work_submit_to_queue+0xfc>)
   3a816:	492a      	ldr	r1, [pc, #168]	; (3a8c0 <k_delayed_work_submit_to_queue+0x10c>)
   3a818:	4827      	ldr	r0, [pc, #156]	; (3a8b8 <k_delayed_work_submit_to_queue+0x104>)
   3a81a:	f003 fb3e 	bl	3de9a <printk>
   3a81e:	4923      	ldr	r1, [pc, #140]	; (3a8ac <k_delayed_work_submit_to_queue+0xf8>)
   3a820:	4828      	ldr	r0, [pc, #160]	; (3a8c4 <k_delayed_work_submit_to_queue+0x110>)
   3a822:	f003 fb3a 	bl	3de9a <printk>
   3a826:	215d      	movs	r1, #93	; 0x5d
   3a828:	4821      	ldr	r0, [pc, #132]	; (3a8b0 <k_delayed_work_submit_to_queue+0xfc>)
   3a82a:	f003 fb89 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   3a82e:	f387 8811 	msr	BASEPRI, r7
   3a832:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + k_ms_to_ticks_ceil32(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   3a836:	e020      	b.n	3a87a <k_delayed_work_submit_to_queue+0xc6>
	if (work->work_q == work_q) {
   3a838:	2e00      	cmp	r6, #0
   3a83a:	d0e1      	beq.n	3a800 <k_delayed_work_submit_to_queue+0x4c>
	work->work_q = work_q;
   3a83c:	61ee      	str	r6, [r5, #28]
	if (delay == 0) {
   3a83e:	f1b8 0f00 	cmp.w	r8, #0
   3a842:	d11d      	bne.n	3a880 <k_delayed_work_submit_to_queue+0xcc>
   3a844:	4819      	ldr	r0, [pc, #100]	; (3a8ac <k_delayed_work_submit_to_queue+0xf8>)
   3a846:	f7ff fdbd 	bl	3a3c4 <z_spin_unlock_valid>
   3a84a:	b968      	cbnz	r0, 3a868 <k_delayed_work_submit_to_queue+0xb4>
   3a84c:	235d      	movs	r3, #93	; 0x5d
   3a84e:	4a18      	ldr	r2, [pc, #96]	; (3a8b0 <k_delayed_work_submit_to_queue+0xfc>)
   3a850:	491b      	ldr	r1, [pc, #108]	; (3a8c0 <k_delayed_work_submit_to_queue+0x10c>)
   3a852:	4819      	ldr	r0, [pc, #100]	; (3a8b8 <k_delayed_work_submit_to_queue+0x104>)
   3a854:	f003 fb21 	bl	3de9a <printk>
   3a858:	4914      	ldr	r1, [pc, #80]	; (3a8ac <k_delayed_work_submit_to_queue+0xf8>)
   3a85a:	481a      	ldr	r0, [pc, #104]	; (3a8c4 <k_delayed_work_submit_to_queue+0x110>)
   3a85c:	f003 fb1d 	bl	3de9a <printk>
   3a860:	215d      	movs	r1, #93	; 0x5d
   3a862:	4813      	ldr	r0, [pc, #76]	; (3a8b0 <k_delayed_work_submit_to_queue+0xfc>)
   3a864:	f003 fb6c 	bl	3df40 <assert_post_action>
   3a868:	f387 8811 	msr	BASEPRI, r7
   3a86c:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   3a870:	4629      	mov	r1, r5
   3a872:	4630      	mov	r0, r6
   3a874:	f005 fde5 	bl	40442 <k_work_submit_to_queue>
		return 0;
   3a878:	2400      	movs	r4, #0
}
   3a87a:	4620      	mov	r0, r4
   3a87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3a880:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   3a884:	f240 30e7 	movw	r0, #999	; 0x3e7
   3a888:	2100      	movs	r1, #0
   3a88a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3a88e:	2300      	movs	r3, #0
   3a890:	fbe6 0108 	umlal	r0, r1, r6, r8
   3a894:	f7e2 fa72 	bl	1cd7c <__aeabi_uldivmod>
	z_add_timeout(&work->timeout, work_timeout,
   3a898:	490b      	ldr	r1, [pc, #44]	; (3a8c8 <k_delayed_work_submit_to_queue+0x114>)
   3a89a:	1c42      	adds	r2, r0, #1
   3a89c:	f105 000c 	add.w	r0, r5, #12
   3a8a0:	f000 f89e 	bl	3a9e0 <z_add_timeout>
   3a8a4:	e7b1      	b.n	3a80a <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   3a8a6:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   3a8aa:	e7ae      	b.n	3a80a <k_delayed_work_submit_to_queue+0x56>
   3a8ac:	2002937c 	.word	0x2002937c
   3a8b0:	00043dc8 	.word	0x00043dc8
   3a8b4:	00043dee 	.word	0x00043dee
   3a8b8:	00043278 	.word	0x00043278
   3a8bc:	00043e03 	.word	0x00043e03
   3a8c0:	00043e1b 	.word	0x00043e1b
   3a8c4:	00043e32 	.word	0x00043e32
   3a8c8:	0004046b 	.word	0x0004046b

0003a8cc <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   3a8cc:	b538      	push	{r3, r4, r5, lr}
	if (!work->work_q) {
   3a8ce:	69c3      	ldr	r3, [r0, #28]
{
   3a8d0:	4604      	mov	r4, r0
	if (!work->work_q) {
   3a8d2:	2b00      	cmp	r3, #0
   3a8d4:	d038      	beq.n	3a948 <k_delayed_work_cancel+0x7c>
	__asm__ volatile(
   3a8d6:	f04f 0320 	mov.w	r3, #32
   3a8da:	f3ef 8511 	mrs	r5, BASEPRI
   3a8de:	f383 8811 	msr	BASEPRI, r3
   3a8e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3a8e6:	481a      	ldr	r0, [pc, #104]	; (3a950 <k_delayed_work_cancel+0x84>)
   3a8e8:	f7ff fd5e 	bl	3a3a8 <z_spin_lock_valid>
   3a8ec:	b968      	cbnz	r0, 3a90a <k_delayed_work_cancel+0x3e>
   3a8ee:	234a      	movs	r3, #74	; 0x4a
   3a8f0:	4a18      	ldr	r2, [pc, #96]	; (3a954 <k_delayed_work_cancel+0x88>)
   3a8f2:	4919      	ldr	r1, [pc, #100]	; (3a958 <k_delayed_work_cancel+0x8c>)
   3a8f4:	4819      	ldr	r0, [pc, #100]	; (3a95c <k_delayed_work_cancel+0x90>)
   3a8f6:	f003 fad0 	bl	3de9a <printk>
   3a8fa:	4915      	ldr	r1, [pc, #84]	; (3a950 <k_delayed_work_cancel+0x84>)
   3a8fc:	4818      	ldr	r0, [pc, #96]	; (3a960 <k_delayed_work_cancel+0x94>)
   3a8fe:	f003 facc 	bl	3de9a <printk>
   3a902:	214a      	movs	r1, #74	; 0x4a
   3a904:	4813      	ldr	r0, [pc, #76]	; (3a954 <k_delayed_work_cancel+0x88>)
   3a906:	f003 fb1b 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a90a:	4811      	ldr	r0, [pc, #68]	; (3a950 <k_delayed_work_cancel+0x84>)
   3a90c:	f7ff fd6a 	bl	3a3e4 <z_spin_lock_set_owner>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   3a910:	4620      	mov	r0, r4
   3a912:	f005 fdaf 	bl	40474 <work_cancel>
   3a916:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3a918:	480d      	ldr	r0, [pc, #52]	; (3a950 <k_delayed_work_cancel+0x84>)
   3a91a:	f7ff fd53 	bl	3a3c4 <z_spin_unlock_valid>
   3a91e:	b968      	cbnz	r0, 3a93c <k_delayed_work_cancel+0x70>
   3a920:	235d      	movs	r3, #93	; 0x5d
   3a922:	4a0c      	ldr	r2, [pc, #48]	; (3a954 <k_delayed_work_cancel+0x88>)
   3a924:	490f      	ldr	r1, [pc, #60]	; (3a964 <k_delayed_work_cancel+0x98>)
   3a926:	480d      	ldr	r0, [pc, #52]	; (3a95c <k_delayed_work_cancel+0x90>)
   3a928:	f003 fab7 	bl	3de9a <printk>
   3a92c:	4908      	ldr	r1, [pc, #32]	; (3a950 <k_delayed_work_cancel+0x84>)
   3a92e:	480e      	ldr	r0, [pc, #56]	; (3a968 <k_delayed_work_cancel+0x9c>)
   3a930:	f003 fab3 	bl	3de9a <printk>
   3a934:	215d      	movs	r1, #93	; 0x5d
   3a936:	4807      	ldr	r0, [pc, #28]	; (3a954 <k_delayed_work_cancel+0x88>)
   3a938:	f003 fb02 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   3a93c:	f385 8811 	msr	BASEPRI, r5
   3a940:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   3a944:	4620      	mov	r0, r4
   3a946:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3a948:	f06f 0415 	mvn.w	r4, #21
   3a94c:	e7fa      	b.n	3a944 <k_delayed_work_cancel+0x78>
   3a94e:	bf00      	nop
   3a950:	2002937c 	.word	0x2002937c
   3a954:	00043dc8 	.word	0x00043dc8
   3a958:	00043dee 	.word	0x00043dee
   3a95c:	00043278 	.word	0x00043278
   3a960:	00043e03 	.word	0x00043e03
   3a964:	00043e1b 	.word	0x00043e1b
   3a968:	00043e32 	.word	0x00043e32

0003a96c <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   3a96c:	4b03      	ldr	r3, [pc, #12]	; (3a97c <elapsed+0x10>)
   3a96e:	681b      	ldr	r3, [r3, #0]
   3a970:	b90b      	cbnz	r3, 3a976 <elapsed+0xa>
   3a972:	f7e9 bb19 	b.w	23fa8 <z_clock_elapsed>
}
   3a976:	2000      	movs	r0, #0
   3a978:	4770      	bx	lr
   3a97a:	bf00      	nop
   3a97c:	20029380 	.word	0x20029380

0003a980 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3a980:	6803      	ldr	r3, [r0, #0]
   3a982:	b140      	cbz	r0, 3a996 <remove_timeout+0x16>
   3a984:	4a07      	ldr	r2, [pc, #28]	; (3a9a4 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   3a986:	6852      	ldr	r2, [r2, #4]
   3a988:	4290      	cmp	r0, r2
   3a98a:	d004      	beq.n	3a996 <remove_timeout+0x16>
	if (next(t) != NULL) {
   3a98c:	b11b      	cbz	r3, 3a996 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   3a98e:	689a      	ldr	r2, [r3, #8]
   3a990:	6881      	ldr	r1, [r0, #8]
   3a992:	440a      	add	r2, r1
   3a994:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   3a996:	6842      	ldr	r2, [r0, #4]
   3a998:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3a99a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3a99c:	2300      	movs	r3, #0
	node->prev = NULL;
   3a99e:	e9c0 3300 	strd	r3, r3, [r0]
}
   3a9a2:	4770      	bx	lr
   3a9a4:	200320f8 	.word	0x200320f8

0003a9a8 <next_timeout>:
	return list->head == list;
   3a9a8:	4b0b      	ldr	r3, [pc, #44]	; (3a9d8 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   3a9aa:	b510      	push	{r4, lr}
   3a9ac:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3a9ae:	429c      	cmp	r4, r3
   3a9b0:	bf08      	it	eq
   3a9b2:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   3a9b4:	f7ff ffda 	bl	3a96c <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   3a9b8:	b154      	cbz	r4, 3a9d0 <next_timeout+0x28>
   3a9ba:	68a3      	ldr	r3, [r4, #8]
   3a9bc:	1a18      	subs	r0, r3, r0
   3a9be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   3a9c2:	4b06      	ldr	r3, [pc, #24]	; (3a9dc <next_timeout+0x34>)
   3a9c4:	691b      	ldr	r3, [r3, #16]
   3a9c6:	b113      	cbz	r3, 3a9ce <next_timeout+0x26>
   3a9c8:	4298      	cmp	r0, r3
   3a9ca:	bfa8      	it	ge
   3a9cc:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   3a9ce:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   3a9d0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   3a9d4:	e7f5      	b.n	3a9c2 <next_timeout+0x1a>
   3a9d6:	bf00      	nop
   3a9d8:	200320f8 	.word	0x200320f8
   3a9dc:	2002926c 	.word	0x2002926c

0003a9e0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   3a9e0:	6803      	ldr	r3, [r0, #0]
{
   3a9e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3a9e6:	4604      	mov	r4, r0
   3a9e8:	460e      	mov	r6, r1
   3a9ea:	4615      	mov	r5, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   3a9ec:	b163      	cbz	r3, 3aa08 <z_add_timeout+0x28>
   3a9ee:	4943      	ldr	r1, [pc, #268]	; (3aafc <z_add_timeout+0x11c>)
   3a9f0:	2358      	movs	r3, #88	; 0x58
   3a9f2:	4a43      	ldr	r2, [pc, #268]	; (3ab00 <z_add_timeout+0x120>)
   3a9f4:	4843      	ldr	r0, [pc, #268]	; (3ab04 <z_add_timeout+0x124>)
   3a9f6:	f003 fa50 	bl	3de9a <printk>
   3a9fa:	4843      	ldr	r0, [pc, #268]	; (3ab08 <z_add_timeout+0x128>)
   3a9fc:	f003 fa4d 	bl	3de9a <printk>
   3aa00:	2158      	movs	r1, #88	; 0x58
   3aa02:	483f      	ldr	r0, [pc, #252]	; (3ab00 <z_add_timeout+0x120>)
   3aa04:	f003 fa9c 	bl	3df40 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   3aa08:	2d01      	cmp	r5, #1
   3aa0a:	bfb8      	it	lt
   3aa0c:	2501      	movlt	r5, #1
	to->fn = fn;
   3aa0e:	60e6      	str	r6, [r4, #12]
	__asm__ volatile(
   3aa10:	f04f 0320 	mov.w	r3, #32
   3aa14:	f3ef 8811 	mrs	r8, BASEPRI
   3aa18:	f383 8811 	msr	BASEPRI, r3
   3aa1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3aa20:	483a      	ldr	r0, [pc, #232]	; (3ab0c <z_add_timeout+0x12c>)
   3aa22:	f7ff fcc1 	bl	3a3a8 <z_spin_lock_valid>
   3aa26:	b968      	cbnz	r0, 3aa44 <z_add_timeout+0x64>
   3aa28:	234a      	movs	r3, #74	; 0x4a
   3aa2a:	4a39      	ldr	r2, [pc, #228]	; (3ab10 <z_add_timeout+0x130>)
   3aa2c:	4939      	ldr	r1, [pc, #228]	; (3ab14 <z_add_timeout+0x134>)
   3aa2e:	4835      	ldr	r0, [pc, #212]	; (3ab04 <z_add_timeout+0x124>)
   3aa30:	f003 fa33 	bl	3de9a <printk>
   3aa34:	4935      	ldr	r1, [pc, #212]	; (3ab0c <z_add_timeout+0x12c>)
   3aa36:	4838      	ldr	r0, [pc, #224]	; (3ab18 <z_add_timeout+0x138>)
   3aa38:	f003 fa2f 	bl	3de9a <printk>
   3aa3c:	214a      	movs	r1, #74	; 0x4a
   3aa3e:	4834      	ldr	r0, [pc, #208]	; (3ab10 <z_add_timeout+0x130>)
   3aa40:	f003 fa7e 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3aa44:	4831      	ldr	r0, [pc, #196]	; (3ab0c <z_add_timeout+0x12c>)
   3aa46:	f7ff fccd 	bl	3a3e4 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   3aa4a:	f7ff ff8f 	bl	3a96c <elapsed>
   3aa4e:	4428      	add	r0, r5
	return list->head == list;
   3aa50:	4d32      	ldr	r5, [pc, #200]	; (3ab1c <z_add_timeout+0x13c>)
   3aa52:	60a0      	str	r0, [r4, #8]
   3aa54:	682e      	ldr	r6, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3aa56:	42ae      	cmp	r6, r5
   3aa58:	d005      	beq.n	3aa66 <z_add_timeout+0x86>
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");
   3aa5a:	4f29      	ldr	r7, [pc, #164]	; (3ab00 <z_add_timeout+0x120>)
   3aa5c:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 3ab28 <z_add_timeout+0x148>
   3aa60:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 3ab04 <z_add_timeout+0x124>
		for (t = first(); t != NULL; t = next(t)) {
   3aa64:	b936      	cbnz	r6, 3aa74 <z_add_timeout+0x94>
	node->prev = list->tail;
   3aa66:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   3aa68:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   3aa6a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   3aa6c:	686b      	ldr	r3, [r5, #4]
   3aa6e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3aa70:	606c      	str	r4, [r5, #4]
   3aa72:	e01a      	b.n	3aaaa <z_add_timeout+0xca>
			__ASSERT(t->dticks >= 0, "");
   3aa74:	68b3      	ldr	r3, [r6, #8]
   3aa76:	2b00      	cmp	r3, #0
   3aa78:	da0c      	bge.n	3aa94 <z_add_timeout+0xb4>
   3aa7a:	4649      	mov	r1, r9
   3aa7c:	2361      	movs	r3, #97	; 0x61
   3aa7e:	463a      	mov	r2, r7
   3aa80:	4650      	mov	r0, sl
   3aa82:	f003 fa0a 	bl	3de9a <printk>
   3aa86:	4820      	ldr	r0, [pc, #128]	; (3ab08 <z_add_timeout+0x128>)
   3aa88:	f003 fa07 	bl	3de9a <printk>
   3aa8c:	2161      	movs	r1, #97	; 0x61
   3aa8e:	4638      	mov	r0, r7
   3aa90:	f003 fa56 	bl	3df40 <assert_post_action>

			if (t->dticks > to->dticks) {
   3aa94:	68b2      	ldr	r2, [r6, #8]
   3aa96:	68a3      	ldr	r3, [r4, #8]
   3aa98:	429a      	cmp	r2, r3
   3aa9a:	dd28      	ble.n	3aaee <z_add_timeout+0x10e>
				t->dticks -= to->dticks;
   3aa9c:	1ad3      	subs	r3, r2, r3
   3aa9e:	60b3      	str	r3, [r6, #8]
	node->prev = successor->prev;
   3aaa0:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   3aaa2:	e9c4 6300 	strd	r6, r3, [r4]
	successor->prev->next = node;
   3aaa6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   3aaa8:	6074      	str	r4, [r6, #4]
	return list->head == list;
   3aaaa:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3aaac:	42ab      	cmp	r3, r5
   3aaae:	d006      	beq.n	3aabe <z_add_timeout+0xde>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   3aab0:	429c      	cmp	r4, r3
   3aab2:	d104      	bne.n	3aabe <z_add_timeout+0xde>
			z_clock_set_timeout(next_timeout(), false);
   3aab4:	f7ff ff78 	bl	3a9a8 <next_timeout>
   3aab8:	2100      	movs	r1, #0
   3aaba:	f7e9 f9e7 	bl	23e8c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3aabe:	4813      	ldr	r0, [pc, #76]	; (3ab0c <z_add_timeout+0x12c>)
   3aac0:	f7ff fc80 	bl	3a3c4 <z_spin_unlock_valid>
   3aac4:	b968      	cbnz	r0, 3aae2 <z_add_timeout+0x102>
   3aac6:	235d      	movs	r3, #93	; 0x5d
   3aac8:	4a11      	ldr	r2, [pc, #68]	; (3ab10 <z_add_timeout+0x130>)
   3aaca:	4915      	ldr	r1, [pc, #84]	; (3ab20 <z_add_timeout+0x140>)
   3aacc:	480d      	ldr	r0, [pc, #52]	; (3ab04 <z_add_timeout+0x124>)
   3aace:	f003 f9e4 	bl	3de9a <printk>
   3aad2:	490e      	ldr	r1, [pc, #56]	; (3ab0c <z_add_timeout+0x12c>)
   3aad4:	4813      	ldr	r0, [pc, #76]	; (3ab24 <z_add_timeout+0x144>)
   3aad6:	f003 f9e0 	bl	3de9a <printk>
   3aada:	215d      	movs	r1, #93	; 0x5d
   3aadc:	480c      	ldr	r0, [pc, #48]	; (3ab10 <z_add_timeout+0x130>)
   3aade:	f003 fa2f 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   3aae2:	f388 8811 	msr	BASEPRI, r8
   3aae6:	f3bf 8f6f 	isb	sy
		}
	}
}
   3aaea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			to->dticks -= t->dticks;
   3aaee:	1a9b      	subs	r3, r3, r2
   3aaf0:	60a3      	str	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
   3aaf2:	686b      	ldr	r3, [r5, #4]
   3aaf4:	429e      	cmp	r6, r3
   3aaf6:	d0b6      	beq.n	3aa66 <z_add_timeout+0x86>
   3aaf8:	6836      	ldr	r6, [r6, #0]
   3aafa:	e7b3      	b.n	3aa64 <z_add_timeout+0x84>
   3aafc:	00048ed2 	.word	0x00048ed2
   3ab00:	00048eae 	.word	0x00048eae
   3ab04:	00043278 	.word	0x00043278
   3ab08:	00044d12 	.word	0x00044d12
   3ab0c:	20029384 	.word	0x20029384
   3ab10:	00043dc8 	.word	0x00043dc8
   3ab14:	00043dee 	.word	0x00043dee
   3ab18:	00043e03 	.word	0x00043e03
   3ab1c:	200320f8 	.word	0x200320f8
   3ab20:	00043e1b 	.word	0x00043e1b
   3ab24:	00043e32 	.word	0x00043e32
   3ab28:	00048ef2 	.word	0x00048ef2

0003ab2c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   3ab2c:	b538      	push	{r3, r4, r5, lr}
   3ab2e:	4604      	mov	r4, r0
	__asm__ volatile(
   3ab30:	f04f 0320 	mov.w	r3, #32
   3ab34:	f3ef 8511 	mrs	r5, BASEPRI
   3ab38:	f383 8811 	msr	BASEPRI, r3
   3ab3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ab40:	481a      	ldr	r0, [pc, #104]	; (3abac <z_abort_timeout+0x80>)
   3ab42:	f7ff fc31 	bl	3a3a8 <z_spin_lock_valid>
   3ab46:	b968      	cbnz	r0, 3ab64 <z_abort_timeout+0x38>
   3ab48:	234a      	movs	r3, #74	; 0x4a
   3ab4a:	4a19      	ldr	r2, [pc, #100]	; (3abb0 <z_abort_timeout+0x84>)
   3ab4c:	4919      	ldr	r1, [pc, #100]	; (3abb4 <z_abort_timeout+0x88>)
   3ab4e:	481a      	ldr	r0, [pc, #104]	; (3abb8 <z_abort_timeout+0x8c>)
   3ab50:	f003 f9a3 	bl	3de9a <printk>
   3ab54:	4915      	ldr	r1, [pc, #84]	; (3abac <z_abort_timeout+0x80>)
   3ab56:	4819      	ldr	r0, [pc, #100]	; (3abbc <z_abort_timeout+0x90>)
   3ab58:	f003 f99f 	bl	3de9a <printk>
   3ab5c:	214a      	movs	r1, #74	; 0x4a
   3ab5e:	4814      	ldr	r0, [pc, #80]	; (3abb0 <z_abort_timeout+0x84>)
   3ab60:	f003 f9ee 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3ab64:	4811      	ldr	r0, [pc, #68]	; (3abac <z_abort_timeout+0x80>)
   3ab66:	f7ff fc3d 	bl	3a3e4 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   3ab6a:	6823      	ldr	r3, [r4, #0]
   3ab6c:	b1db      	cbz	r3, 3aba6 <z_abort_timeout+0x7a>
			remove_timeout(to);
   3ab6e:	4620      	mov	r0, r4
   3ab70:	f7ff ff06 	bl	3a980 <remove_timeout>
			ret = 0;
   3ab74:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ab76:	480d      	ldr	r0, [pc, #52]	; (3abac <z_abort_timeout+0x80>)
   3ab78:	f7ff fc24 	bl	3a3c4 <z_spin_unlock_valid>
   3ab7c:	b968      	cbnz	r0, 3ab9a <z_abort_timeout+0x6e>
   3ab7e:	235d      	movs	r3, #93	; 0x5d
   3ab80:	4a0b      	ldr	r2, [pc, #44]	; (3abb0 <z_abort_timeout+0x84>)
   3ab82:	490f      	ldr	r1, [pc, #60]	; (3abc0 <z_abort_timeout+0x94>)
   3ab84:	480c      	ldr	r0, [pc, #48]	; (3abb8 <z_abort_timeout+0x8c>)
   3ab86:	f003 f988 	bl	3de9a <printk>
   3ab8a:	4908      	ldr	r1, [pc, #32]	; (3abac <z_abort_timeout+0x80>)
   3ab8c:	480d      	ldr	r0, [pc, #52]	; (3abc4 <z_abort_timeout+0x98>)
   3ab8e:	f003 f984 	bl	3de9a <printk>
   3ab92:	215d      	movs	r1, #93	; 0x5d
   3ab94:	4806      	ldr	r0, [pc, #24]	; (3abb0 <z_abort_timeout+0x84>)
   3ab96:	f003 f9d3 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   3ab9a:	f385 8811 	msr	BASEPRI, r5
   3ab9e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   3aba2:	4620      	mov	r0, r4
   3aba4:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   3aba6:	f06f 0415 	mvn.w	r4, #21
   3abaa:	e7e4      	b.n	3ab76 <z_abort_timeout+0x4a>
   3abac:	20029384 	.word	0x20029384
   3abb0:	00043dc8 	.word	0x00043dc8
   3abb4:	00043dee 	.word	0x00043dee
   3abb8:	00043278 	.word	0x00043278
   3abbc:	00043e03 	.word	0x00043e03
   3abc0:	00043e1b 	.word	0x00043e1b
   3abc4:	00043e32 	.word	0x00043e32

0003abc8 <z_timeout_remaining>:

s32_t z_timeout_remaining(struct _timeout *timeout)
{
   3abc8:	b570      	push	{r4, r5, r6, lr}
   3abca:	4605      	mov	r5, r0
	s32_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   3abcc:	6800      	ldr	r0, [r0, #0]
   3abce:	2800      	cmp	r0, #0
   3abd0:	d03c      	beq.n	3ac4c <z_timeout_remaining+0x84>
	__asm__ volatile(
   3abd2:	f04f 0320 	mov.w	r3, #32
   3abd6:	f3ef 8611 	mrs	r6, BASEPRI
   3abda:	f383 8811 	msr	BASEPRI, r3
   3abde:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3abe2:	4821      	ldr	r0, [pc, #132]	; (3ac68 <z_timeout_remaining+0xa0>)
   3abe4:	f7ff fbe0 	bl	3a3a8 <z_spin_lock_valid>
   3abe8:	b968      	cbnz	r0, 3ac06 <z_timeout_remaining+0x3e>
   3abea:	234a      	movs	r3, #74	; 0x4a
   3abec:	4a1f      	ldr	r2, [pc, #124]	; (3ac6c <z_timeout_remaining+0xa4>)
   3abee:	4920      	ldr	r1, [pc, #128]	; (3ac70 <z_timeout_remaining+0xa8>)
   3abf0:	4820      	ldr	r0, [pc, #128]	; (3ac74 <z_timeout_remaining+0xac>)
   3abf2:	f003 f952 	bl	3de9a <printk>
   3abf6:	491c      	ldr	r1, [pc, #112]	; (3ac68 <z_timeout_remaining+0xa0>)
   3abf8:	481f      	ldr	r0, [pc, #124]	; (3ac78 <z_timeout_remaining+0xb0>)
   3abfa:	f003 f94e 	bl	3de9a <printk>
   3abfe:	214a      	movs	r1, #74	; 0x4a
   3ac00:	481a      	ldr	r0, [pc, #104]	; (3ac6c <z_timeout_remaining+0xa4>)
   3ac02:	f003 f99d 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3ac06:	4818      	ldr	r0, [pc, #96]	; (3ac68 <z_timeout_remaining+0xa0>)
   3ac08:	f7ff fbec 	bl	3a3e4 <z_spin_lock_set_owner>
	return list->head == list;
   3ac0c:	4a1b      	ldr	r2, [pc, #108]	; (3ac7c <z_timeout_remaining+0xb4>)
   3ac0e:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3ac10:	4293      	cmp	r3, r2
   3ac12:	d026      	beq.n	3ac62 <z_timeout_remaining+0x9a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3ac14:	2400      	movs	r4, #0
   3ac16:	6852      	ldr	r2, [r2, #4]
		return 0;
	}

	LOCKED(&timeout_lock) {
		for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   3ac18:	b9cb      	cbnz	r3, 3ac4e <z_timeout_remaining+0x86>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ac1a:	4813      	ldr	r0, [pc, #76]	; (3ac68 <z_timeout_remaining+0xa0>)
   3ac1c:	f7ff fbd2 	bl	3a3c4 <z_spin_unlock_valid>
   3ac20:	b968      	cbnz	r0, 3ac3e <z_timeout_remaining+0x76>
   3ac22:	235d      	movs	r3, #93	; 0x5d
   3ac24:	4a11      	ldr	r2, [pc, #68]	; (3ac6c <z_timeout_remaining+0xa4>)
   3ac26:	4916      	ldr	r1, [pc, #88]	; (3ac80 <z_timeout_remaining+0xb8>)
   3ac28:	4812      	ldr	r0, [pc, #72]	; (3ac74 <z_timeout_remaining+0xac>)
   3ac2a:	f003 f936 	bl	3de9a <printk>
   3ac2e:	490e      	ldr	r1, [pc, #56]	; (3ac68 <z_timeout_remaining+0xa0>)
   3ac30:	4814      	ldr	r0, [pc, #80]	; (3ac84 <z_timeout_remaining+0xbc>)
   3ac32:	f003 f932 	bl	3de9a <printk>
   3ac36:	215d      	movs	r1, #93	; 0x5d
   3ac38:	480c      	ldr	r0, [pc, #48]	; (3ac6c <z_timeout_remaining+0xa4>)
   3ac3a:	f003 f981 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   3ac3e:	f386 8811 	msr	BASEPRI, r6
   3ac42:	f3bf 8f6f 	isb	sy
				break;
			}
		}
	}

	return ticks - elapsed();
   3ac46:	f7ff fe91 	bl	3a96c <elapsed>
   3ac4a:	1a20      	subs	r0, r4, r0
}
   3ac4c:	bd70      	pop	{r4, r5, r6, pc}
			ticks += t->dticks;
   3ac4e:	6899      	ldr	r1, [r3, #8]
			if (timeout == t) {
   3ac50:	42ab      	cmp	r3, r5
			ticks += t->dticks;
   3ac52:	440c      	add	r4, r1
			if (timeout == t) {
   3ac54:	d0e1      	beq.n	3ac1a <z_timeout_remaining+0x52>
   3ac56:	2b00      	cmp	r3, #0
   3ac58:	d0df      	beq.n	3ac1a <z_timeout_remaining+0x52>
	return (node == list->tail) ? NULL : node->next;
   3ac5a:	4293      	cmp	r3, r2
   3ac5c:	d0dd      	beq.n	3ac1a <z_timeout_remaining+0x52>
   3ac5e:	681b      	ldr	r3, [r3, #0]
   3ac60:	e7da      	b.n	3ac18 <z_timeout_remaining+0x50>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3ac62:	2400      	movs	r4, #0
   3ac64:	e7d9      	b.n	3ac1a <z_timeout_remaining+0x52>
   3ac66:	bf00      	nop
   3ac68:	20029384 	.word	0x20029384
   3ac6c:	00043dc8 	.word	0x00043dc8
   3ac70:	00043dee 	.word	0x00043dee
   3ac74:	00043278 	.word	0x00043278
   3ac78:	00043e03 	.word	0x00043e03
   3ac7c:	200320f8 	.word	0x200320f8
   3ac80:	00043e1b 	.word	0x00043e1b
   3ac84:	00043e32 	.word	0x00043e32

0003ac88 <z_get_next_timeout_expiry>:

s32_t z_get_next_timeout_expiry(void)
{
   3ac88:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3ac8a:	f04f 0320 	mov.w	r3, #32
   3ac8e:	f3ef 8511 	mrs	r5, BASEPRI
   3ac92:	f383 8811 	msr	BASEPRI, r3
   3ac96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ac9a:	4818      	ldr	r0, [pc, #96]	; (3acfc <z_get_next_timeout_expiry+0x74>)
   3ac9c:	f7ff fb84 	bl	3a3a8 <z_spin_lock_valid>
   3aca0:	b968      	cbnz	r0, 3acbe <z_get_next_timeout_expiry+0x36>
   3aca2:	234a      	movs	r3, #74	; 0x4a
   3aca4:	4a16      	ldr	r2, [pc, #88]	; (3ad00 <z_get_next_timeout_expiry+0x78>)
   3aca6:	4917      	ldr	r1, [pc, #92]	; (3ad04 <z_get_next_timeout_expiry+0x7c>)
   3aca8:	4817      	ldr	r0, [pc, #92]	; (3ad08 <z_get_next_timeout_expiry+0x80>)
   3acaa:	f003 f8f6 	bl	3de9a <printk>
   3acae:	4913      	ldr	r1, [pc, #76]	; (3acfc <z_get_next_timeout_expiry+0x74>)
   3acb0:	4816      	ldr	r0, [pc, #88]	; (3ad0c <z_get_next_timeout_expiry+0x84>)
   3acb2:	f003 f8f2 	bl	3de9a <printk>
   3acb6:	214a      	movs	r1, #74	; 0x4a
   3acb8:	4811      	ldr	r0, [pc, #68]	; (3ad00 <z_get_next_timeout_expiry+0x78>)
   3acba:	f003 f941 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3acbe:	480f      	ldr	r0, [pc, #60]	; (3acfc <z_get_next_timeout_expiry+0x74>)
   3acc0:	f7ff fb90 	bl	3a3e4 <z_spin_lock_set_owner>
	s32_t ret = K_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   3acc4:	f7ff fe70 	bl	3a9a8 <next_timeout>
   3acc8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3acca:	480c      	ldr	r0, [pc, #48]	; (3acfc <z_get_next_timeout_expiry+0x74>)
   3accc:	f7ff fb7a 	bl	3a3c4 <z_spin_unlock_valid>
   3acd0:	b968      	cbnz	r0, 3acee <z_get_next_timeout_expiry+0x66>
   3acd2:	235d      	movs	r3, #93	; 0x5d
   3acd4:	4a0a      	ldr	r2, [pc, #40]	; (3ad00 <z_get_next_timeout_expiry+0x78>)
   3acd6:	490e      	ldr	r1, [pc, #56]	; (3ad10 <z_get_next_timeout_expiry+0x88>)
   3acd8:	480b      	ldr	r0, [pc, #44]	; (3ad08 <z_get_next_timeout_expiry+0x80>)
   3acda:	f003 f8de 	bl	3de9a <printk>
   3acde:	4907      	ldr	r1, [pc, #28]	; (3acfc <z_get_next_timeout_expiry+0x74>)
   3ace0:	480c      	ldr	r0, [pc, #48]	; (3ad14 <z_get_next_timeout_expiry+0x8c>)
   3ace2:	f003 f8da 	bl	3de9a <printk>
   3ace6:	215d      	movs	r1, #93	; 0x5d
   3ace8:	4805      	ldr	r0, [pc, #20]	; (3ad00 <z_get_next_timeout_expiry+0x78>)
   3acea:	f003 f929 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   3acee:	f385 8811 	msr	BASEPRI, r5
   3acf2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   3acf6:	4620      	mov	r0, r4
   3acf8:	bd38      	pop	{r3, r4, r5, pc}
   3acfa:	bf00      	nop
   3acfc:	20029384 	.word	0x20029384
   3ad00:	00043dc8 	.word	0x00043dc8
   3ad04:	00043dee 	.word	0x00043dee
   3ad08:	00043278 	.word	0x00043278
   3ad0c:	00043e03 	.word	0x00043e03
   3ad10:	00043e1b 	.word	0x00043e1b
   3ad14:	00043e32 	.word	0x00043e32

0003ad18 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   3ad18:	b570      	push	{r4, r5, r6, lr}
   3ad1a:	4604      	mov	r4, r0
   3ad1c:	460e      	mov	r6, r1
	__asm__ volatile(
   3ad1e:	f04f 0320 	mov.w	r3, #32
   3ad22:	f3ef 8511 	mrs	r5, BASEPRI
   3ad26:	f383 8811 	msr	BASEPRI, r3
   3ad2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ad2e:	481b      	ldr	r0, [pc, #108]	; (3ad9c <z_set_timeout_expiry+0x84>)
   3ad30:	f7ff fb3a 	bl	3a3a8 <z_spin_lock_valid>
   3ad34:	b968      	cbnz	r0, 3ad52 <z_set_timeout_expiry+0x3a>
   3ad36:	234a      	movs	r3, #74	; 0x4a
   3ad38:	4a19      	ldr	r2, [pc, #100]	; (3ada0 <z_set_timeout_expiry+0x88>)
   3ad3a:	491a      	ldr	r1, [pc, #104]	; (3ada4 <z_set_timeout_expiry+0x8c>)
   3ad3c:	481a      	ldr	r0, [pc, #104]	; (3ada8 <z_set_timeout_expiry+0x90>)
   3ad3e:	f003 f8ac 	bl	3de9a <printk>
   3ad42:	4916      	ldr	r1, [pc, #88]	; (3ad9c <z_set_timeout_expiry+0x84>)
   3ad44:	4819      	ldr	r0, [pc, #100]	; (3adac <z_set_timeout_expiry+0x94>)
   3ad46:	f003 f8a8 	bl	3de9a <printk>
   3ad4a:	214a      	movs	r1, #74	; 0x4a
   3ad4c:	4814      	ldr	r0, [pc, #80]	; (3ada0 <z_set_timeout_expiry+0x88>)
   3ad4e:	f003 f8f7 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3ad52:	4812      	ldr	r0, [pc, #72]	; (3ad9c <z_set_timeout_expiry+0x84>)
   3ad54:	f7ff fb46 	bl	3a3e4 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   3ad58:	f7ff fe26 	bl	3a9a8 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   3ad5c:	2801      	cmp	r0, #1
   3ad5e:	dd05      	ble.n	3ad6c <z_set_timeout_expiry+0x54>
   3ad60:	42a0      	cmp	r0, r4
   3ad62:	dd03      	ble.n	3ad6c <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, idle);
   3ad64:	4631      	mov	r1, r6
   3ad66:	4620      	mov	r0, r4
   3ad68:	f7e9 f890 	bl	23e8c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ad6c:	480b      	ldr	r0, [pc, #44]	; (3ad9c <z_set_timeout_expiry+0x84>)
   3ad6e:	f7ff fb29 	bl	3a3c4 <z_spin_unlock_valid>
   3ad72:	b968      	cbnz	r0, 3ad90 <z_set_timeout_expiry+0x78>
   3ad74:	235d      	movs	r3, #93	; 0x5d
   3ad76:	4a0a      	ldr	r2, [pc, #40]	; (3ada0 <z_set_timeout_expiry+0x88>)
   3ad78:	490d      	ldr	r1, [pc, #52]	; (3adb0 <z_set_timeout_expiry+0x98>)
   3ad7a:	480b      	ldr	r0, [pc, #44]	; (3ada8 <z_set_timeout_expiry+0x90>)
   3ad7c:	f003 f88d 	bl	3de9a <printk>
   3ad80:	4906      	ldr	r1, [pc, #24]	; (3ad9c <z_set_timeout_expiry+0x84>)
   3ad82:	480c      	ldr	r0, [pc, #48]	; (3adb4 <z_set_timeout_expiry+0x9c>)
   3ad84:	f003 f889 	bl	3de9a <printk>
   3ad88:	215d      	movs	r1, #93	; 0x5d
   3ad8a:	4805      	ldr	r0, [pc, #20]	; (3ada0 <z_set_timeout_expiry+0x88>)
   3ad8c:	f003 f8d8 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   3ad90:	f385 8811 	msr	BASEPRI, r5
   3ad94:	f3bf 8f6f 	isb	sy
		}
	}
}
   3ad98:	bd70      	pop	{r4, r5, r6, pc}
   3ad9a:	bf00      	nop
   3ad9c:	20029384 	.word	0x20029384
   3ada0:	00043dc8 	.word	0x00043dc8
   3ada4:	00043dee 	.word	0x00043dee
   3ada8:	00043278 	.word	0x00043278
   3adac:	00043e03 	.word	0x00043e03
   3adb0:	00043e1b 	.word	0x00043e1b
   3adb4:	00043e32 	.word	0x00043e32

0003adb8 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   3adb8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   3adbc:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   3adbe:	f7fe fcd7 	bl	39770 <z_time_slice>
	__asm__ volatile(
   3adc2:	f04f 0320 	mov.w	r3, #32
   3adc6:	f3ef 8511 	mrs	r5, BASEPRI
   3adca:	f383 8811 	msr	BASEPRI, r3
   3adce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3add2:	4848      	ldr	r0, [pc, #288]	; (3aef4 <z_clock_announce+0x13c>)
   3add4:	f7ff fae8 	bl	3a3a8 <z_spin_lock_valid>
   3add8:	b968      	cbnz	r0, 3adf6 <z_clock_announce+0x3e>
   3adda:	234a      	movs	r3, #74	; 0x4a
   3addc:	4a46      	ldr	r2, [pc, #280]	; (3aef8 <z_clock_announce+0x140>)
   3adde:	4947      	ldr	r1, [pc, #284]	; (3aefc <z_clock_announce+0x144>)
   3ade0:	4847      	ldr	r0, [pc, #284]	; (3af00 <z_clock_announce+0x148>)
   3ade2:	f003 f85a 	bl	3de9a <printk>
   3ade6:	4943      	ldr	r1, [pc, #268]	; (3aef4 <z_clock_announce+0x13c>)
   3ade8:	4846      	ldr	r0, [pc, #280]	; (3af04 <z_clock_announce+0x14c>)
   3adea:	f003 f856 	bl	3de9a <printk>
   3adee:	214a      	movs	r1, #74	; 0x4a
   3adf0:	4841      	ldr	r0, [pc, #260]	; (3aef8 <z_clock_announce+0x140>)
   3adf2:	f003 f8a5 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3adf6:	4f44      	ldr	r7, [pc, #272]	; (3af08 <z_clock_announce+0x150>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   3adf8:	4e44      	ldr	r6, [pc, #272]	; (3af0c <z_clock_announce+0x154>)
   3adfa:	46b9      	mov	r9, r7
   3adfc:	483d      	ldr	r0, [pc, #244]	; (3aef4 <z_clock_announce+0x13c>)
	return list->head == list;
   3adfe:	f8df 8118 	ldr.w	r8, [pc, #280]	; 3af18 <z_clock_announce+0x160>
   3ae02:	f7ff faef 	bl	3a3e4 <z_spin_lock_set_owner>
   3ae06:	6034      	str	r4, [r6, #0]
   3ae08:	f8d8 4000 	ldr.w	r4, [r8]
   3ae0c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3ae0e:	4544      	cmp	r4, r8
   3ae10:	e9d7 bc00 	ldrd	fp, ip, [r7]
   3ae14:	d005      	beq.n	3ae22 <z_clock_announce+0x6a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   3ae16:	b124      	cbz	r4, 3ae22 <z_clock_announce+0x6a>
   3ae18:	68a3      	ldr	r3, [r4, #8]
   3ae1a:	4293      	cmp	r3, r2
   3ae1c:	dd26      	ble.n	3ae6c <z_clock_announce+0xb4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   3ae1e:	1a9b      	subs	r3, r3, r2
   3ae20:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   3ae22:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   3ae24:	eb1b 0002 	adds.w	r0, fp, r2
   3ae28:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   3ae2c:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   3ae30:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   3ae32:	f7ff fdb9 	bl	3a9a8 <next_timeout>
   3ae36:	4621      	mov	r1, r4
   3ae38:	f7e9 f828 	bl	23e8c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ae3c:	482d      	ldr	r0, [pc, #180]	; (3aef4 <z_clock_announce+0x13c>)
   3ae3e:	f7ff fac1 	bl	3a3c4 <z_spin_unlock_valid>
   3ae42:	b968      	cbnz	r0, 3ae60 <z_clock_announce+0xa8>
   3ae44:	235d      	movs	r3, #93	; 0x5d
   3ae46:	4a2c      	ldr	r2, [pc, #176]	; (3aef8 <z_clock_announce+0x140>)
   3ae48:	4931      	ldr	r1, [pc, #196]	; (3af10 <z_clock_announce+0x158>)
   3ae4a:	482d      	ldr	r0, [pc, #180]	; (3af00 <z_clock_announce+0x148>)
   3ae4c:	f003 f825 	bl	3de9a <printk>
   3ae50:	4928      	ldr	r1, [pc, #160]	; (3aef4 <z_clock_announce+0x13c>)
   3ae52:	4830      	ldr	r0, [pc, #192]	; (3af14 <z_clock_announce+0x15c>)
   3ae54:	f003 f821 	bl	3de9a <printk>
   3ae58:	215d      	movs	r1, #93	; 0x5d
   3ae5a:	4827      	ldr	r0, [pc, #156]	; (3aef8 <z_clock_announce+0x140>)
   3ae5c:	f003 f870 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   3ae60:	f385 8811 	msr	BASEPRI, r5
   3ae64:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   3ae68:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   3ae6c:	eb1b 0003 	adds.w	r0, fp, r3
   3ae70:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   3ae74:	1ad3      	subs	r3, r2, r3
   3ae76:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   3ae78:	2300      	movs	r3, #0
		curr_tick += dt;
   3ae7a:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   3ae7e:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   3ae80:	4620      	mov	r0, r4
   3ae82:	f7ff fd7d 	bl	3a980 <remove_timeout>
   3ae86:	481b      	ldr	r0, [pc, #108]	; (3aef4 <z_clock_announce+0x13c>)
   3ae88:	f7ff fa9c 	bl	3a3c4 <z_spin_unlock_valid>
   3ae8c:	b968      	cbnz	r0, 3aeaa <z_clock_announce+0xf2>
   3ae8e:	235d      	movs	r3, #93	; 0x5d
   3ae90:	4a19      	ldr	r2, [pc, #100]	; (3aef8 <z_clock_announce+0x140>)
   3ae92:	491f      	ldr	r1, [pc, #124]	; (3af10 <z_clock_announce+0x158>)
   3ae94:	481a      	ldr	r0, [pc, #104]	; (3af00 <z_clock_announce+0x148>)
   3ae96:	f003 f800 	bl	3de9a <printk>
   3ae9a:	4916      	ldr	r1, [pc, #88]	; (3aef4 <z_clock_announce+0x13c>)
   3ae9c:	481d      	ldr	r0, [pc, #116]	; (3af14 <z_clock_announce+0x15c>)
   3ae9e:	f002 fffc 	bl	3de9a <printk>
   3aea2:	215d      	movs	r1, #93	; 0x5d
   3aea4:	4814      	ldr	r0, [pc, #80]	; (3aef8 <z_clock_announce+0x140>)
   3aea6:	f003 f84b 	bl	3df40 <assert_post_action>
   3aeaa:	f385 8811 	msr	BASEPRI, r5
   3aeae:	f3bf 8f6f 	isb	sy
		t->fn(t);
   3aeb2:	68e3      	ldr	r3, [r4, #12]
   3aeb4:	4620      	mov	r0, r4
   3aeb6:	4798      	blx	r3
	__asm__ volatile(
   3aeb8:	f04f 0320 	mov.w	r3, #32
   3aebc:	f3ef 8511 	mrs	r5, BASEPRI
   3aec0:	f383 8811 	msr	BASEPRI, r3
   3aec4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3aec8:	480a      	ldr	r0, [pc, #40]	; (3aef4 <z_clock_announce+0x13c>)
   3aeca:	f7ff fa6d 	bl	3a3a8 <z_spin_lock_valid>
   3aece:	b968      	cbnz	r0, 3aeec <z_clock_announce+0x134>
   3aed0:	234a      	movs	r3, #74	; 0x4a
   3aed2:	4a09      	ldr	r2, [pc, #36]	; (3aef8 <z_clock_announce+0x140>)
   3aed4:	4909      	ldr	r1, [pc, #36]	; (3aefc <z_clock_announce+0x144>)
   3aed6:	480a      	ldr	r0, [pc, #40]	; (3af00 <z_clock_announce+0x148>)
   3aed8:	f002 ffdf 	bl	3de9a <printk>
   3aedc:	4905      	ldr	r1, [pc, #20]	; (3aef4 <z_clock_announce+0x13c>)
   3aede:	4809      	ldr	r0, [pc, #36]	; (3af04 <z_clock_announce+0x14c>)
   3aee0:	f002 ffdb 	bl	3de9a <printk>
   3aee4:	214a      	movs	r1, #74	; 0x4a
   3aee6:	4804      	ldr	r0, [pc, #16]	; (3aef8 <z_clock_announce+0x140>)
   3aee8:	f003 f82a 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3aeec:	4801      	ldr	r0, [pc, #4]	; (3aef4 <z_clock_announce+0x13c>)
   3aeee:	f7ff fa79 	bl	3a3e4 <z_spin_lock_set_owner>
	return k;
   3aef2:	e789      	b.n	3ae08 <z_clock_announce+0x50>
   3aef4:	20029384 	.word	0x20029384
   3aef8:	00043dc8 	.word	0x00043dc8
   3aefc:	00043dee 	.word	0x00043dee
   3af00:	00043278 	.word	0x00043278
   3af04:	00043e03 	.word	0x00043e03
   3af08:	200235f8 	.word	0x200235f8
   3af0c:	20029380 	.word	0x20029380
   3af10:	00043e1b 	.word	0x00043e1b
   3af14:	00043e32 	.word	0x00043e32
   3af18:	200320f8 	.word	0x200320f8

0003af1c <z_tick_get>:

s64_t z_tick_get(void)
{
   3af1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3af20:	f04f 0320 	mov.w	r3, #32
   3af24:	f3ef 8611 	mrs	r6, BASEPRI
   3af28:	f383 8811 	msr	BASEPRI, r3
   3af2c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3af30:	481b      	ldr	r0, [pc, #108]	; (3afa0 <z_tick_get+0x84>)
   3af32:	f7ff fa39 	bl	3a3a8 <z_spin_lock_valid>
   3af36:	b968      	cbnz	r0, 3af54 <z_tick_get+0x38>
   3af38:	234a      	movs	r3, #74	; 0x4a
   3af3a:	4a1a      	ldr	r2, [pc, #104]	; (3afa4 <z_tick_get+0x88>)
   3af3c:	491a      	ldr	r1, [pc, #104]	; (3afa8 <z_tick_get+0x8c>)
   3af3e:	481b      	ldr	r0, [pc, #108]	; (3afac <z_tick_get+0x90>)
   3af40:	f002 ffab 	bl	3de9a <printk>
   3af44:	4916      	ldr	r1, [pc, #88]	; (3afa0 <z_tick_get+0x84>)
   3af46:	481a      	ldr	r0, [pc, #104]	; (3afb0 <z_tick_get+0x94>)
   3af48:	f002 ffa7 	bl	3de9a <printk>
   3af4c:	214a      	movs	r1, #74	; 0x4a
   3af4e:	4815      	ldr	r0, [pc, #84]	; (3afa4 <z_tick_get+0x88>)
   3af50:	f002 fff6 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3af54:	4812      	ldr	r0, [pc, #72]	; (3afa0 <z_tick_get+0x84>)
   3af56:	f7ff fa45 	bl	3a3e4 <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   3af5a:	f7e9 f825 	bl	23fa8 <z_clock_elapsed>
   3af5e:	4b15      	ldr	r3, [pc, #84]	; (3afb4 <z_tick_get+0x98>)
   3af60:	e9d3 4500 	ldrd	r4, r5, [r3]
   3af64:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3af66:	480e      	ldr	r0, [pc, #56]	; (3afa0 <z_tick_get+0x84>)
   3af68:	f145 0800 	adc.w	r8, r5, #0
   3af6c:	f7ff fa2a 	bl	3a3c4 <z_spin_unlock_valid>
   3af70:	b968      	cbnz	r0, 3af8e <z_tick_get+0x72>
   3af72:	235d      	movs	r3, #93	; 0x5d
   3af74:	4a0b      	ldr	r2, [pc, #44]	; (3afa4 <z_tick_get+0x88>)
   3af76:	4910      	ldr	r1, [pc, #64]	; (3afb8 <z_tick_get+0x9c>)
   3af78:	480c      	ldr	r0, [pc, #48]	; (3afac <z_tick_get+0x90>)
   3af7a:	f002 ff8e 	bl	3de9a <printk>
   3af7e:	4908      	ldr	r1, [pc, #32]	; (3afa0 <z_tick_get+0x84>)
   3af80:	480e      	ldr	r0, [pc, #56]	; (3afbc <z_tick_get+0xa0>)
   3af82:	f002 ff8a 	bl	3de9a <printk>
   3af86:	215d      	movs	r1, #93	; 0x5d
   3af88:	4806      	ldr	r0, [pc, #24]	; (3afa4 <z_tick_get+0x88>)
   3af8a:	f002 ffd9 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   3af8e:	f386 8811 	msr	BASEPRI, r6
   3af92:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   3af96:	4638      	mov	r0, r7
   3af98:	4641      	mov	r1, r8
   3af9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3af9e:	bf00      	nop
   3afa0:	20029384 	.word	0x20029384
   3afa4:	00043dc8 	.word	0x00043dc8
   3afa8:	00043dee 	.word	0x00043dee
   3afac:	00043278 	.word	0x00043278
   3afb0:	00043e03 	.word	0x00043e03
   3afb4:	200235f8 	.word	0x200235f8
   3afb8:	00043e1b 	.word	0x00043e1b
   3afbc:	00043e32 	.word	0x00043e32

0003afc0 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, u32_t state)
{
   3afc0:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   3afc2:	6883      	ldr	r3, [r0, #8]
{
   3afc4:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   3afc6:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   3afc8:	b964      	cbnz	r4, 3afe4 <k_poll_poller_cb+0x24>
   3afca:	4915      	ldr	r1, [pc, #84]	; (3b020 <k_poll_poller_cb+0x60>)
   3afcc:	23e0      	movs	r3, #224	; 0xe0
   3afce:	4a15      	ldr	r2, [pc, #84]	; (3b024 <k_poll_poller_cb+0x64>)
   3afd0:	4815      	ldr	r0, [pc, #84]	; (3b028 <k_poll_poller_cb+0x68>)
   3afd2:	f002 ff62 	bl	3de9a <printk>
   3afd6:	4815      	ldr	r0, [pc, #84]	; (3b02c <k_poll_poller_cb+0x6c>)
   3afd8:	f002 ff5f 	bl	3de9a <printk>
   3afdc:	21e0      	movs	r1, #224	; 0xe0
   3afde:	4811      	ldr	r0, [pc, #68]	; (3b024 <k_poll_poller_cb+0x64>)
   3afe0:	f002 ffae 	bl	3df40 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   3afe4:	7b63      	ldrb	r3, [r4, #13]
   3afe6:	079a      	lsls	r2, r3, #30
   3afe8:	d401      	bmi.n	3afee <k_poll_poller_cb+0x2e>
		return 0;
   3afea:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   3afec:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   3afee:	6a23      	ldr	r3, [r4, #32]
   3aff0:	3302      	adds	r3, #2
   3aff2:	d012      	beq.n	3b01a <k_poll_poller_cb+0x5a>
	z_unpend_thread(thread);
   3aff4:	4620      	mov	r0, r4
   3aff6:	f7fe f93b 	bl	39270 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   3affa:	2d08      	cmp	r5, #8
   3affc:	bf0c      	ite	eq
   3affe:	f06f 0303 	mvneq.w	r3, #3
   3b002:	2300      	movne	r3, #0
   3b004:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3b006:	7b63      	ldrb	r3, [r4, #13]
   3b008:	06db      	lsls	r3, r3, #27
   3b00a:	d1ee      	bne.n	3afea <k_poll_poller_cb+0x2a>
	if (!z_is_thread_ready(thread)) {
   3b00c:	69a5      	ldr	r5, [r4, #24]
   3b00e:	2d00      	cmp	r5, #0
   3b010:	d1eb      	bne.n	3afea <k_poll_poller_cb+0x2a>
		z_add_thread_to_ready_q(thread);
   3b012:	4620      	mov	r0, r4
   3b014:	f7fe fa34 	bl	39480 <z_add_thread_to_ready_q>
	return 0;
   3b018:	e7e7      	b.n	3afea <k_poll_poller_cb+0x2a>
		return -EAGAIN;
   3b01a:	f06f 000a 	mvn.w	r0, #10
   3b01e:	e7e5      	b.n	3afec <k_poll_poller_cb+0x2c>
   3b020:	0004906f 	.word	0x0004906f
   3b024:	0004904e 	.word	0x0004904e
   3b028:	00043278 	.word	0x00043278
   3b02c:	00049085 	.word	0x00049085

0003b030 <clear_event_registrations>:
{
   3b030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3b034:	2414      	movs	r4, #20
   3b036:	4680      	mov	r8, r0
   3b038:	4617      	mov	r7, r2
	while (num_events--) {
   3b03a:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   3b03e:	4d48      	ldr	r5, [pc, #288]	; (3b160 <clear_event_registrations+0x130>)
   3b040:	f8df 9158 	ldr.w	r9, [pc, #344]	; 3b19c <clear_event_registrations+0x16c>
   3b044:	4e47      	ldr	r6, [pc, #284]	; (3b164 <clear_event_registrations+0x134>)
	while (num_events--) {
   3b046:	4544      	cmp	r4, r8
   3b048:	d101      	bne.n	3b04e <clear_event_registrations+0x1e>
}
   3b04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   3b04e:	2300      	movs	r3, #0
   3b050:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   3b054:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   3b058:	f003 030f 	and.w	r3, r3, #15
   3b05c:	2b04      	cmp	r3, #4
   3b05e:	d83d      	bhi.n	3b0dc <clear_event_registrations+0xac>
   3b060:	e8df f003 	tbb	[pc, r3]
   3b064:	3c032d49 	.word	0x3c032d49
   3b068:	1e          	.byte	0x1e
   3b069:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3b06a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3b06e:	b963      	cbnz	r3, 3b08a <clear_event_registrations+0x5a>
   3b070:	493d      	ldr	r1, [pc, #244]	; (3b168 <clear_event_registrations+0x138>)
   3b072:	2396      	movs	r3, #150	; 0x96
   3b074:	462a      	mov	r2, r5
   3b076:	4630      	mov	r0, r6
   3b078:	f002 ff0f 	bl	3de9a <printk>
   3b07c:	483b      	ldr	r0, [pc, #236]	; (3b16c <clear_event_registrations+0x13c>)
   3b07e:	f002 ff0c 	bl	3de9a <printk>
   3b082:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3b084:	4628      	mov	r0, r5
   3b086:	f002 ff5b 	bl	3df40 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   3b08a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   3b08e:	b393      	cbz	r3, 3b0f6 <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   3b090:	f854 2c10 	ldr.w	r2, [r4, #-16]
   3b094:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3b096:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3b098:	2300      	movs	r3, #0
	node->prev = NULL;
   3b09a:	e944 3305 	strd	r3, r3, [r4, #-20]
   3b09e:	e02a      	b.n	3b0f6 <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3b0a0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3b0a4:	2b00      	cmp	r3, #0
   3b0a6:	d1f0      	bne.n	3b08a <clear_event_registrations+0x5a>
   3b0a8:	4931      	ldr	r1, [pc, #196]	; (3b170 <clear_event_registrations+0x140>)
   3b0aa:	239a      	movs	r3, #154	; 0x9a
   3b0ac:	462a      	mov	r2, r5
   3b0ae:	4630      	mov	r0, r6
   3b0b0:	f002 fef3 	bl	3de9a <printk>
   3b0b4:	482f      	ldr	r0, [pc, #188]	; (3b174 <clear_event_registrations+0x144>)
   3b0b6:	f002 fef0 	bl	3de9a <printk>
   3b0ba:	219a      	movs	r1, #154	; 0x9a
   3b0bc:	e7e2      	b.n	3b084 <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3b0be:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3b0c2:	2b00      	cmp	r3, #0
   3b0c4:	d1e1      	bne.n	3b08a <clear_event_registrations+0x5a>
   3b0c6:	492c      	ldr	r1, [pc, #176]	; (3b178 <clear_event_registrations+0x148>)
   3b0c8:	239e      	movs	r3, #158	; 0x9e
   3b0ca:	462a      	mov	r2, r5
   3b0cc:	4630      	mov	r0, r6
   3b0ce:	f002 fee4 	bl	3de9a <printk>
   3b0d2:	482a      	ldr	r0, [pc, #168]	; (3b17c <clear_event_registrations+0x14c>)
   3b0d4:	f002 fee1 	bl	3de9a <printk>
   3b0d8:	219e      	movs	r1, #158	; 0x9e
   3b0da:	e7d3      	b.n	3b084 <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   3b0dc:	4649      	mov	r1, r9
   3b0de:	23a5      	movs	r3, #165	; 0xa5
   3b0e0:	462a      	mov	r2, r5
   3b0e2:	4630      	mov	r0, r6
   3b0e4:	f002 fed9 	bl	3de9a <printk>
   3b0e8:	4825      	ldr	r0, [pc, #148]	; (3b180 <clear_event_registrations+0x150>)
   3b0ea:	f002 fed6 	bl	3de9a <printk>
   3b0ee:	21a5      	movs	r1, #165	; 0xa5
   3b0f0:	4628      	mov	r0, r5
   3b0f2:	f002 ff25 	bl	3df40 <assert_post_action>
   3b0f6:	4823      	ldr	r0, [pc, #140]	; (3b184 <clear_event_registrations+0x154>)
   3b0f8:	f7ff f964 	bl	3a3c4 <z_spin_unlock_valid>
   3b0fc:	b968      	cbnz	r0, 3b11a <clear_event_registrations+0xea>
   3b0fe:	235d      	movs	r3, #93	; 0x5d
   3b100:	4a21      	ldr	r2, [pc, #132]	; (3b188 <clear_event_registrations+0x158>)
   3b102:	4922      	ldr	r1, [pc, #136]	; (3b18c <clear_event_registrations+0x15c>)
   3b104:	4630      	mov	r0, r6
   3b106:	f002 fec8 	bl	3de9a <printk>
   3b10a:	491e      	ldr	r1, [pc, #120]	; (3b184 <clear_event_registrations+0x154>)
   3b10c:	4820      	ldr	r0, [pc, #128]	; (3b190 <clear_event_registrations+0x160>)
   3b10e:	f002 fec4 	bl	3de9a <printk>
   3b112:	215d      	movs	r1, #93	; 0x5d
   3b114:	481c      	ldr	r0, [pc, #112]	; (3b188 <clear_event_registrations+0x158>)
   3b116:	f002 ff13 	bl	3df40 <assert_post_action>
   3b11a:	f387 8811 	msr	BASEPRI, r7
   3b11e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3b122:	f04f 0320 	mov.w	r3, #32
   3b126:	f3ef 8711 	mrs	r7, BASEPRI
   3b12a:	f383 8811 	msr	BASEPRI, r3
   3b12e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3b132:	4814      	ldr	r0, [pc, #80]	; (3b184 <clear_event_registrations+0x154>)
   3b134:	f7ff f938 	bl	3a3a8 <z_spin_lock_valid>
   3b138:	b968      	cbnz	r0, 3b156 <clear_event_registrations+0x126>
   3b13a:	234a      	movs	r3, #74	; 0x4a
   3b13c:	4a12      	ldr	r2, [pc, #72]	; (3b188 <clear_event_registrations+0x158>)
   3b13e:	4915      	ldr	r1, [pc, #84]	; (3b194 <clear_event_registrations+0x164>)
   3b140:	4630      	mov	r0, r6
   3b142:	f002 feaa 	bl	3de9a <printk>
   3b146:	490f      	ldr	r1, [pc, #60]	; (3b184 <clear_event_registrations+0x154>)
   3b148:	4813      	ldr	r0, [pc, #76]	; (3b198 <clear_event_registrations+0x168>)
   3b14a:	f002 fea6 	bl	3de9a <printk>
   3b14e:	214a      	movs	r1, #74	; 0x4a
   3b150:	480d      	ldr	r0, [pc, #52]	; (3b188 <clear_event_registrations+0x158>)
   3b152:	f002 fef5 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b156:	480b      	ldr	r0, [pc, #44]	; (3b184 <clear_event_registrations+0x154>)
   3b158:	f7ff f944 	bl	3a3e4 <z_spin_lock_set_owner>
	return k;
   3b15c:	3c14      	subs	r4, #20
   3b15e:	e772      	b.n	3b046 <clear_event_registrations+0x16>
   3b160:	0004904e 	.word	0x0004904e
   3b164:	00043278 	.word	0x00043278
   3b168:	00048f01 	.word	0x00048f01
   3b16c:	00048f1b 	.word	0x00048f1b
   3b170:	00048f30 	.word	0x00048f30
   3b174:	00048f4c 	.word	0x00048f4c
   3b178:	00048f5d 	.word	0x00048f5d
   3b17c:	00048f7a 	.word	0x00048f7a
   3b180:	00048f91 	.word	0x00048f91
   3b184:	20029388 	.word	0x20029388
   3b188:	00043dc8 	.word	0x00043dc8
   3b18c:	00043e1b 	.word	0x00043e1b
   3b190:	00043e32 	.word	0x00043e32
   3b194:	00043dee 	.word	0x00043dee
   3b198:	00043e03 	.word	0x00043e03
   3b19c:	00048cfb 	.word	0x00048cfb

0003b1a0 <register_events>:
{
   3b1a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   3b1a4:	2700      	movs	r7, #0
{
   3b1a6:	468a      	mov	sl, r1
   3b1a8:	4615      	mov	r5, r2
   3b1aa:	4604      	mov	r4, r0
	int events_registered = 0;
   3b1ac:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3b1ae:	4e69      	ldr	r6, [pc, #420]	; (3b354 <register_events+0x1b4>)
   3b1b0:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 3b394 <register_events+0x1f4>
{
   3b1b4:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   3b1b6:	4557      	cmp	r7, sl
   3b1b8:	db03      	blt.n	3b1c2 <register_events+0x22>
}
   3b1ba:	4648      	mov	r0, r9
   3b1bc:	b003      	add	sp, #12
   3b1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b1c2:	f04f 0320 	mov.w	r3, #32
   3b1c6:	f3ef 8b11 	mrs	fp, BASEPRI
   3b1ca:	f383 8811 	msr	BASEPRI, r3
   3b1ce:	f3bf 8f6f 	isb	sy
   3b1d2:	4630      	mov	r0, r6
   3b1d4:	f7ff f8e8 	bl	3a3a8 <z_spin_lock_valid>
   3b1d8:	b968      	cbnz	r0, 3b1f6 <register_events+0x56>
   3b1da:	234a      	movs	r3, #74	; 0x4a
   3b1dc:	4642      	mov	r2, r8
   3b1de:	495e      	ldr	r1, [pc, #376]	; (3b358 <register_events+0x1b8>)
   3b1e0:	485e      	ldr	r0, [pc, #376]	; (3b35c <register_events+0x1bc>)
   3b1e2:	f002 fe5a 	bl	3de9a <printk>
   3b1e6:	4631      	mov	r1, r6
   3b1e8:	485d      	ldr	r0, [pc, #372]	; (3b360 <register_events+0x1c0>)
   3b1ea:	f002 fe56 	bl	3de9a <printk>
   3b1ee:	214a      	movs	r1, #74	; 0x4a
   3b1f0:	4640      	mov	r0, r8
   3b1f2:	f002 fea5 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b1f6:	4630      	mov	r0, r6
   3b1f8:	f7ff f8f4 	bl	3a3e4 <z_spin_lock_set_owner>
	switch (event->type) {
   3b1fc:	7b63      	ldrb	r3, [r4, #13]
   3b1fe:	f003 030f 	and.w	r3, r3, #15
   3b202:	2b04      	cmp	r3, #4
   3b204:	d844      	bhi.n	3b290 <register_events+0xf0>
   3b206:	e8df f003 	tbb	[pc, r3]
   3b20a:	3d2d      	.short	0x3d2d
   3b20c:	4303      	.short	0x4303
   3b20e:	2a          	.byte	0x2a
   3b20f:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   3b210:	6923      	ldr	r3, [r4, #16]
   3b212:	689b      	ldr	r3, [r3, #8]
   3b214:	b333      	cbz	r3, 3b264 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   3b216:	2202      	movs	r2, #2
	event->poller = NULL;
   3b218:	2100      	movs	r1, #0
	event->state |= state;
   3b21a:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   3b21c:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   3b21e:	f3c3 3004 	ubfx	r0, r3, #12, #5
   3b222:	4302      	orrs	r2, r0
   3b224:	f362 3310 	bfi	r3, r2, #12, #5
   3b228:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   3b22a:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3b22c:	4630      	mov	r0, r6
   3b22e:	f7ff f8c9 	bl	3a3c4 <z_spin_unlock_valid>
   3b232:	b968      	cbnz	r0, 3b250 <register_events+0xb0>
   3b234:	235d      	movs	r3, #93	; 0x5d
   3b236:	4642      	mov	r2, r8
   3b238:	494a      	ldr	r1, [pc, #296]	; (3b364 <register_events+0x1c4>)
   3b23a:	4848      	ldr	r0, [pc, #288]	; (3b35c <register_events+0x1bc>)
   3b23c:	f002 fe2d 	bl	3de9a <printk>
   3b240:	4631      	mov	r1, r6
   3b242:	4849      	ldr	r0, [pc, #292]	; (3b368 <register_events+0x1c8>)
   3b244:	f002 fe29 	bl	3de9a <printk>
   3b248:	215d      	movs	r1, #93	; 0x5d
   3b24a:	4640      	mov	r0, r8
   3b24c:	f002 fe78 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   3b250:	f38b 8811 	msr	BASEPRI, fp
   3b254:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   3b258:	3701      	adds	r7, #1
   3b25a:	3414      	adds	r4, #20
   3b25c:	e7ab      	b.n	3b1b6 <register_events+0x16>
		if (!k_queue_is_empty(event->queue)) {
   3b25e:	6923      	ldr	r3, [r4, #16]
   3b260:	681b      	ldr	r3, [r3, #0]
   3b262:	bb33      	cbnz	r3, 3b2b2 <register_events+0x112>
		} else if (!just_check && poller->is_polling) {
   3b264:	9b01      	ldr	r3, [sp, #4]
   3b266:	2b00      	cmp	r3, #0
   3b268:	d1e0      	bne.n	3b22c <register_events+0x8c>
   3b26a:	782b      	ldrb	r3, [r5, #0]
   3b26c:	2b00      	cmp	r3, #0
   3b26e:	d0dd      	beq.n	3b22c <register_events+0x8c>
	switch (event->type) {
   3b270:	7b63      	ldrb	r3, [r4, #13]
   3b272:	f003 030f 	and.w	r3, r3, #15
   3b276:	2b04      	cmp	r3, #4
   3b278:	d85d      	bhi.n	3b336 <register_events+0x196>
   3b27a:	e8df f003 	tbb	[pc, r3]
   3b27e:	4931      	.short	0x4931
   3b280:	5c1c      	.short	0x5c1c
   3b282:	35          	.byte	0x35
   3b283:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   3b284:	6923      	ldr	r3, [r4, #16]
   3b286:	689b      	ldr	r3, [r3, #8]
   3b288:	2b00      	cmp	r3, #0
   3b28a:	d0eb      	beq.n	3b264 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   3b28c:	2201      	movs	r2, #1
   3b28e:	e7c3      	b.n	3b218 <register_events+0x78>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   3b290:	2350      	movs	r3, #80	; 0x50
   3b292:	4a36      	ldr	r2, [pc, #216]	; (3b36c <register_events+0x1cc>)
   3b294:	4936      	ldr	r1, [pc, #216]	; (3b370 <register_events+0x1d0>)
   3b296:	4831      	ldr	r0, [pc, #196]	; (3b35c <register_events+0x1bc>)
   3b298:	f002 fdff 	bl	3de9a <printk>
   3b29c:	7b61      	ldrb	r1, [r4, #13]
   3b29e:	4835      	ldr	r0, [pc, #212]	; (3b374 <register_events+0x1d4>)
   3b2a0:	f001 010f 	and.w	r1, r1, #15
   3b2a4:	f002 fdf9 	bl	3de9a <printk>
   3b2a8:	2150      	movs	r1, #80	; 0x50
   3b2aa:	4830      	ldr	r0, [pc, #192]	; (3b36c <register_events+0x1cc>)
   3b2ac:	f002 fe48 	bl	3df40 <assert_post_action>
		break;
   3b2b0:	e7d8      	b.n	3b264 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   3b2b2:	2204      	movs	r2, #4
   3b2b4:	e7b0      	b.n	3b218 <register_events+0x78>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3b2b6:	6923      	ldr	r3, [r4, #16]
   3b2b8:	b963      	cbnz	r3, 3b2d4 <register_events+0x134>
   3b2ba:	492f      	ldr	r1, [pc, #188]	; (3b378 <register_events+0x1d8>)
   3b2bc:	2375      	movs	r3, #117	; 0x75
   3b2be:	4a2b      	ldr	r2, [pc, #172]	; (3b36c <register_events+0x1cc>)
   3b2c0:	4826      	ldr	r0, [pc, #152]	; (3b35c <register_events+0x1bc>)
   3b2c2:	f002 fdea 	bl	3de9a <printk>
   3b2c6:	482d      	ldr	r0, [pc, #180]	; (3b37c <register_events+0x1dc>)
   3b2c8:	f002 fde7 	bl	3de9a <printk>
   3b2cc:	2175      	movs	r1, #117	; 0x75
   3b2ce:	4827      	ldr	r0, [pc, #156]	; (3b36c <register_events+0x1cc>)
   3b2d0:	f002 fe36 	bl	3df40 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   3b2d4:	462a      	mov	r2, r5
   3b2d6:	4621      	mov	r1, r4
   3b2d8:	6920      	ldr	r0, [r4, #16]
   3b2da:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   3b2dc:	f005 f941 	bl	40562 <add_event>
	event->poller = poller;
   3b2e0:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   3b2e2:	f109 0901 	add.w	r9, r9, #1
   3b2e6:	e7a1      	b.n	3b22c <register_events+0x8c>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3b2e8:	6923      	ldr	r3, [r4, #16]
   3b2ea:	b963      	cbnz	r3, 3b306 <register_events+0x166>
   3b2ec:	4924      	ldr	r1, [pc, #144]	; (3b380 <register_events+0x1e0>)
   3b2ee:	2379      	movs	r3, #121	; 0x79
   3b2f0:	4a1e      	ldr	r2, [pc, #120]	; (3b36c <register_events+0x1cc>)
   3b2f2:	481a      	ldr	r0, [pc, #104]	; (3b35c <register_events+0x1bc>)
   3b2f4:	f002 fdd1 	bl	3de9a <printk>
   3b2f8:	4822      	ldr	r0, [pc, #136]	; (3b384 <register_events+0x1e4>)
   3b2fa:	f002 fdce 	bl	3de9a <printk>
   3b2fe:	2179      	movs	r1, #121	; 0x79
   3b300:	481a      	ldr	r0, [pc, #104]	; (3b36c <register_events+0x1cc>)
   3b302:	f002 fe1d 	bl	3df40 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   3b306:	6920      	ldr	r0, [r4, #16]
   3b308:	462a      	mov	r2, r5
   3b30a:	4621      	mov	r1, r4
   3b30c:	300c      	adds	r0, #12
   3b30e:	e7e5      	b.n	3b2dc <register_events+0x13c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3b310:	6923      	ldr	r3, [r4, #16]
   3b312:	b963      	cbnz	r3, 3b32e <register_events+0x18e>
   3b314:	491c      	ldr	r1, [pc, #112]	; (3b388 <register_events+0x1e8>)
   3b316:	237d      	movs	r3, #125	; 0x7d
   3b318:	4a14      	ldr	r2, [pc, #80]	; (3b36c <register_events+0x1cc>)
   3b31a:	4810      	ldr	r0, [pc, #64]	; (3b35c <register_events+0x1bc>)
   3b31c:	f002 fdbd 	bl	3de9a <printk>
   3b320:	481a      	ldr	r0, [pc, #104]	; (3b38c <register_events+0x1ec>)
   3b322:	f002 fdba 	bl	3de9a <printk>
   3b326:	217d      	movs	r1, #125	; 0x7d
   3b328:	4810      	ldr	r0, [pc, #64]	; (3b36c <register_events+0x1cc>)
   3b32a:	f002 fe09 	bl	3df40 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   3b32e:	462a      	mov	r2, r5
   3b330:	4621      	mov	r1, r4
   3b332:	6920      	ldr	r0, [r4, #16]
   3b334:	e7d2      	b.n	3b2dc <register_events+0x13c>
		__ASSERT(false, "invalid event type\n");
   3b336:	2384      	movs	r3, #132	; 0x84
   3b338:	4a0c      	ldr	r2, [pc, #48]	; (3b36c <register_events+0x1cc>)
   3b33a:	490d      	ldr	r1, [pc, #52]	; (3b370 <register_events+0x1d0>)
   3b33c:	4807      	ldr	r0, [pc, #28]	; (3b35c <register_events+0x1bc>)
   3b33e:	f002 fdac 	bl	3de9a <printk>
   3b342:	4813      	ldr	r0, [pc, #76]	; (3b390 <register_events+0x1f0>)
   3b344:	f002 fda9 	bl	3de9a <printk>
   3b348:	2184      	movs	r1, #132	; 0x84
   3b34a:	4808      	ldr	r0, [pc, #32]	; (3b36c <register_events+0x1cc>)
   3b34c:	f002 fdf8 	bl	3df40 <assert_post_action>
		break;
   3b350:	e7c6      	b.n	3b2e0 <register_events+0x140>
   3b352:	bf00      	nop
   3b354:	20029388 	.word	0x20029388
   3b358:	00043dee 	.word	0x00043dee
   3b35c:	00043278 	.word	0x00043278
   3b360:	00043e03 	.word	0x00043e03
   3b364:	00043e1b 	.word	0x00043e1b
   3b368:	00043e32 	.word	0x00043e32
   3b36c:	0004904e 	.word	0x0004904e
   3b370:	00048cfb 	.word	0x00048cfb
   3b374:	000490a4 	.word	0x000490a4
   3b378:	00048f01 	.word	0x00048f01
   3b37c:	00048f1b 	.word	0x00048f1b
   3b380:	00048f30 	.word	0x00048f30
   3b384:	00048f4c 	.word	0x00048f4c
   3b388:	00048f5d 	.word	0x00048f5d
   3b38c:	00048f7a 	.word	0x00048f7a
   3b390:	00048f91 	.word	0x00048f91
   3b394:	00043dc8 	.word	0x00043dc8

0003b398 <k_poll_event_init>:
{
   3b398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b39a:	4604      	mov	r4, r0
   3b39c:	460f      	mov	r7, r1
   3b39e:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   3b3a0:	4616      	mov	r6, r2
   3b3a2:	b162      	cbz	r2, 3b3be <k_poll_event_init+0x26>
   3b3a4:	491c      	ldr	r1, [pc, #112]	; (3b418 <k_poll_event_init+0x80>)
   3b3a6:	232a      	movs	r3, #42	; 0x2a
   3b3a8:	4a1c      	ldr	r2, [pc, #112]	; (3b41c <k_poll_event_init+0x84>)
   3b3aa:	481d      	ldr	r0, [pc, #116]	; (3b420 <k_poll_event_init+0x88>)
   3b3ac:	f002 fd75 	bl	3de9a <printk>
   3b3b0:	481c      	ldr	r0, [pc, #112]	; (3b424 <k_poll_event_init+0x8c>)
   3b3b2:	f002 fd72 	bl	3de9a <printk>
   3b3b6:	212a      	movs	r1, #42	; 0x2a
   3b3b8:	4818      	ldr	r0, [pc, #96]	; (3b41c <k_poll_event_init+0x84>)
   3b3ba:	f002 fdc1 	bl	3df40 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   3b3be:	2f0f      	cmp	r7, #15
   3b3c0:	d90c      	bls.n	3b3dc <k_poll_event_init+0x44>
   3b3c2:	4919      	ldr	r1, [pc, #100]	; (3b428 <k_poll_event_init+0x90>)
   3b3c4:	232b      	movs	r3, #43	; 0x2b
   3b3c6:	4a15      	ldr	r2, [pc, #84]	; (3b41c <k_poll_event_init+0x84>)
   3b3c8:	4815      	ldr	r0, [pc, #84]	; (3b420 <k_poll_event_init+0x88>)
   3b3ca:	f002 fd66 	bl	3de9a <printk>
   3b3ce:	4817      	ldr	r0, [pc, #92]	; (3b42c <k_poll_event_init+0x94>)
   3b3d0:	f002 fd63 	bl	3de9a <printk>
   3b3d4:	212b      	movs	r1, #43	; 0x2b
   3b3d6:	4811      	ldr	r0, [pc, #68]	; (3b41c <k_poll_event_init+0x84>)
   3b3d8:	f002 fdb2 	bl	3df40 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   3b3dc:	b965      	cbnz	r5, 3b3f8 <k_poll_event_init+0x60>
   3b3de:	4914      	ldr	r1, [pc, #80]	; (3b430 <k_poll_event_init+0x98>)
   3b3e0:	232c      	movs	r3, #44	; 0x2c
   3b3e2:	4a0e      	ldr	r2, [pc, #56]	; (3b41c <k_poll_event_init+0x84>)
   3b3e4:	480e      	ldr	r0, [pc, #56]	; (3b420 <k_poll_event_init+0x88>)
   3b3e6:	f002 fd58 	bl	3de9a <printk>
   3b3ea:	4812      	ldr	r0, [pc, #72]	; (3b434 <k_poll_event_init+0x9c>)
   3b3ec:	f002 fd55 	bl	3de9a <printk>
   3b3f0:	212c      	movs	r1, #44	; 0x2c
   3b3f2:	480a      	ldr	r0, [pc, #40]	; (3b41c <k_poll_event_init+0x84>)
   3b3f4:	f002 fda4 	bl	3df40 <assert_post_action>
	event->type = type;
   3b3f8:	7b63      	ldrb	r3, [r4, #13]
   3b3fa:	f367 0303 	bfi	r3, r7, #0, #4
   3b3fe:	7363      	strb	r3, [r4, #13]
	event->mode = mode;
   3b400:	7ba3      	ldrb	r3, [r4, #14]
   3b402:	f366 0341 	bfi	r3, r6, #1, #1
   3b406:	73a3      	strb	r3, [r4, #14]
	event->poller = NULL;
   3b408:	2300      	movs	r3, #0
	event->state = K_POLL_STATE_NOT_READY;
   3b40a:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   3b40c:	60a3      	str	r3, [r4, #8]
	event->state = K_POLL_STATE_NOT_READY;
   3b40e:	4b0a      	ldr	r3, [pc, #40]	; (3b438 <k_poll_event_init+0xa0>)
   3b410:	4013      	ands	r3, r2
	event->obj = obj;
   3b412:	e9c4 3503 	strd	r3, r5, [r4, #12]
}
   3b416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b418:	00048fa7 	.word	0x00048fa7
   3b41c:	0004904e 	.word	0x0004904e
   3b420:	00043278 	.word	0x00043278
   3b424:	00048fc7 	.word	0x00048fc7
   3b428:	00048fed 	.word	0x00048fed
   3b42c:	00049011 	.word	0x00049011
   3b430:	00049021 	.word	0x00049021
   3b434:	00049034 	.word	0x00049034
   3b438:	00020fff 	.word	0x00020fff

0003b43c <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   3b43c:	2301      	movs	r3, #1
{
   3b43e:	b5f0      	push	{r4, r5, r6, r7, lr}
   3b440:	b087      	sub	sp, #28
	struct _poller poller = { .is_polling = true,
   3b442:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   3b446:	4b70      	ldr	r3, [pc, #448]	; (3b608 <z_impl_k_poll+0x1cc>)
{
   3b448:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   3b44a:	689b      	ldr	r3, [r3, #8]
{
   3b44c:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   3b44e:	9304      	str	r3, [sp, #16]
   3b450:	4b6e      	ldr	r3, [pc, #440]	; (3b60c <z_impl_k_poll+0x1d0>)
{
   3b452:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   3b454:	9305      	str	r3, [sp, #20]
   3b456:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   3b45a:	b163      	cbz	r3, 3b476 <z_impl_k_poll+0x3a>
   3b45c:	496c      	ldr	r1, [pc, #432]	; (3b610 <z_impl_k_poll+0x1d4>)
   3b45e:	23ff      	movs	r3, #255	; 0xff
   3b460:	4a6c      	ldr	r2, [pc, #432]	; (3b614 <z_impl_k_poll+0x1d8>)
   3b462:	486d      	ldr	r0, [pc, #436]	; (3b618 <z_impl_k_poll+0x1dc>)
   3b464:	f002 fd19 	bl	3de9a <printk>
   3b468:	486c      	ldr	r0, [pc, #432]	; (3b61c <z_impl_k_poll+0x1e0>)
   3b46a:	f002 fd16 	bl	3de9a <printk>
   3b46e:	21ff      	movs	r1, #255	; 0xff
   3b470:	4868      	ldr	r0, [pc, #416]	; (3b614 <z_impl_k_poll+0x1d8>)
   3b472:	f002 fd65 	bl	3df40 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   3b476:	b974      	cbnz	r4, 3b496 <z_impl_k_poll+0x5a>
   3b478:	4969      	ldr	r1, [pc, #420]	; (3b620 <z_impl_k_poll+0x1e4>)
   3b47a:	f44f 7380 	mov.w	r3, #256	; 0x100
   3b47e:	4a65      	ldr	r2, [pc, #404]	; (3b614 <z_impl_k_poll+0x1d8>)
   3b480:	4865      	ldr	r0, [pc, #404]	; (3b618 <z_impl_k_poll+0x1dc>)
   3b482:	f002 fd0a 	bl	3de9a <printk>
   3b486:	4867      	ldr	r0, [pc, #412]	; (3b624 <z_impl_k_poll+0x1e8>)
   3b488:	f002 fd07 	bl	3de9a <printk>
   3b48c:	f44f 7180 	mov.w	r1, #256	; 0x100
   3b490:	4860      	ldr	r0, [pc, #384]	; (3b614 <z_impl_k_poll+0x1d8>)
   3b492:	f002 fd55 	bl	3df40 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   3b496:	2d00      	cmp	r5, #0
   3b498:	da0e      	bge.n	3b4b8 <z_impl_k_poll+0x7c>
   3b49a:	4963      	ldr	r1, [pc, #396]	; (3b628 <z_impl_k_poll+0x1ec>)
   3b49c:	f240 1301 	movw	r3, #257	; 0x101
   3b4a0:	4a5c      	ldr	r2, [pc, #368]	; (3b614 <z_impl_k_poll+0x1d8>)
   3b4a2:	485d      	ldr	r0, [pc, #372]	; (3b618 <z_impl_k_poll+0x1dc>)
   3b4a4:	f002 fcf9 	bl	3de9a <printk>
   3b4a8:	4860      	ldr	r0, [pc, #384]	; (3b62c <z_impl_k_poll+0x1f0>)
   3b4aa:	f002 fcf6 	bl	3de9a <printk>
   3b4ae:	f240 1101 	movw	r1, #257	; 0x101
   3b4b2:	4858      	ldr	r0, [pc, #352]	; (3b614 <z_impl_k_poll+0x1d8>)
   3b4b4:	f002 fd44 	bl	3df40 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   3b4b8:	fab6 f386 	clz	r3, r6
   3b4bc:	aa03      	add	r2, sp, #12
   3b4be:	095b      	lsrs	r3, r3, #5
   3b4c0:	4629      	mov	r1, r5
   3b4c2:	4620      	mov	r0, r4
   3b4c4:	f7ff fe6c 	bl	3b1a0 <register_events>
   3b4c8:	4607      	mov	r7, r0
	__asm__ volatile(
   3b4ca:	f04f 0320 	mov.w	r3, #32
   3b4ce:	f3ef 8511 	mrs	r5, BASEPRI
   3b4d2:	f383 8811 	msr	BASEPRI, r3
   3b4d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3b4da:	4855      	ldr	r0, [pc, #340]	; (3b630 <z_impl_k_poll+0x1f4>)
   3b4dc:	f7fe ff64 	bl	3a3a8 <z_spin_lock_valid>
   3b4e0:	b968      	cbnz	r0, 3b4fe <z_impl_k_poll+0xc2>
   3b4e2:	234a      	movs	r3, #74	; 0x4a
   3b4e4:	4a53      	ldr	r2, [pc, #332]	; (3b634 <z_impl_k_poll+0x1f8>)
   3b4e6:	4954      	ldr	r1, [pc, #336]	; (3b638 <z_impl_k_poll+0x1fc>)
   3b4e8:	484b      	ldr	r0, [pc, #300]	; (3b618 <z_impl_k_poll+0x1dc>)
   3b4ea:	f002 fcd6 	bl	3de9a <printk>
   3b4ee:	4950      	ldr	r1, [pc, #320]	; (3b630 <z_impl_k_poll+0x1f4>)
   3b4f0:	4852      	ldr	r0, [pc, #328]	; (3b63c <z_impl_k_poll+0x200>)
   3b4f2:	f002 fcd2 	bl	3de9a <printk>
   3b4f6:	214a      	movs	r1, #74	; 0x4a
   3b4f8:	484e      	ldr	r0, [pc, #312]	; (3b634 <z_impl_k_poll+0x1f8>)
   3b4fa:	f002 fd21 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b4fe:	484c      	ldr	r0, [pc, #304]	; (3b630 <z_impl_k_poll+0x1f4>)
   3b500:	f7fe ff70 	bl	3a3e4 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   3b504:	f89d 300c 	ldrb.w	r3, [sp, #12]
   3b508:	b9f3      	cbnz	r3, 3b548 <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
   3b50a:	4620      	mov	r0, r4
   3b50c:	462a      	mov	r2, r5
   3b50e:	4639      	mov	r1, r7
   3b510:	f7ff fd8e 	bl	3b030 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3b514:	4846      	ldr	r0, [pc, #280]	; (3b630 <z_impl_k_poll+0x1f4>)
   3b516:	f7fe ff55 	bl	3a3c4 <z_spin_unlock_valid>
   3b51a:	b968      	cbnz	r0, 3b538 <z_impl_k_poll+0xfc>
   3b51c:	235d      	movs	r3, #93	; 0x5d
   3b51e:	4a45      	ldr	r2, [pc, #276]	; (3b634 <z_impl_k_poll+0x1f8>)
   3b520:	4947      	ldr	r1, [pc, #284]	; (3b640 <z_impl_k_poll+0x204>)
   3b522:	483d      	ldr	r0, [pc, #244]	; (3b618 <z_impl_k_poll+0x1dc>)
   3b524:	f002 fcb9 	bl	3de9a <printk>
   3b528:	4941      	ldr	r1, [pc, #260]	; (3b630 <z_impl_k_poll+0x1f4>)
   3b52a:	4846      	ldr	r0, [pc, #280]	; (3b644 <z_impl_k_poll+0x208>)
   3b52c:	f002 fcb5 	bl	3de9a <printk>
   3b530:	215d      	movs	r1, #93	; 0x5d
   3b532:	4840      	ldr	r0, [pc, #256]	; (3b634 <z_impl_k_poll+0x1f8>)
   3b534:	f002 fd04 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   3b538:	f385 8811 	msr	BASEPRI, r5
   3b53c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   3b540:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   3b542:	4628      	mov	r0, r5
   3b544:	b007      	add	sp, #28
   3b546:	bdf0      	pop	{r4, r5, r6, r7, pc}
	poller.is_polling = false;
   3b548:	2300      	movs	r3, #0
   3b54a:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   3b54e:	b9c6      	cbnz	r6, 3b582 <z_impl_k_poll+0x146>
   3b550:	4837      	ldr	r0, [pc, #220]	; (3b630 <z_impl_k_poll+0x1f4>)
   3b552:	f7fe ff37 	bl	3a3c4 <z_spin_unlock_valid>
   3b556:	b968      	cbnz	r0, 3b574 <z_impl_k_poll+0x138>
   3b558:	235d      	movs	r3, #93	; 0x5d
   3b55a:	4a36      	ldr	r2, [pc, #216]	; (3b634 <z_impl_k_poll+0x1f8>)
   3b55c:	4938      	ldr	r1, [pc, #224]	; (3b640 <z_impl_k_poll+0x204>)
   3b55e:	482e      	ldr	r0, [pc, #184]	; (3b618 <z_impl_k_poll+0x1dc>)
   3b560:	f002 fc9b 	bl	3de9a <printk>
   3b564:	4932      	ldr	r1, [pc, #200]	; (3b630 <z_impl_k_poll+0x1f4>)
   3b566:	4837      	ldr	r0, [pc, #220]	; (3b644 <z_impl_k_poll+0x208>)
   3b568:	f002 fc97 	bl	3de9a <printk>
   3b56c:	215d      	movs	r1, #93	; 0x5d
   3b56e:	4831      	ldr	r0, [pc, #196]	; (3b634 <z_impl_k_poll+0x1f8>)
   3b570:	f002 fce6 	bl	3df40 <assert_post_action>
   3b574:	f385 8811 	msr	BASEPRI, r5
   3b578:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   3b57c:	f06f 050a 	mvn.w	r5, #10
   3b580:	e7df      	b.n	3b542 <z_impl_k_poll+0x106>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   3b582:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   3b584:	4629      	mov	r1, r5
   3b586:	4633      	mov	r3, r6
   3b588:	4829      	ldr	r0, [pc, #164]	; (3b630 <z_impl_k_poll+0x1f4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   3b58a:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   3b58e:	f7fe fb31 	bl	39bf4 <z_pend_curr>
   3b592:	4605      	mov	r5, r0
	__asm__ volatile(
   3b594:	f04f 0320 	mov.w	r3, #32
   3b598:	f3ef 8611 	mrs	r6, BASEPRI
   3b59c:	f383 8811 	msr	BASEPRI, r3
   3b5a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3b5a4:	4822      	ldr	r0, [pc, #136]	; (3b630 <z_impl_k_poll+0x1f4>)
   3b5a6:	f7fe feff 	bl	3a3a8 <z_spin_lock_valid>
   3b5aa:	b968      	cbnz	r0, 3b5c8 <z_impl_k_poll+0x18c>
   3b5ac:	234a      	movs	r3, #74	; 0x4a
   3b5ae:	4a21      	ldr	r2, [pc, #132]	; (3b634 <z_impl_k_poll+0x1f8>)
   3b5b0:	4921      	ldr	r1, [pc, #132]	; (3b638 <z_impl_k_poll+0x1fc>)
   3b5b2:	4819      	ldr	r0, [pc, #100]	; (3b618 <z_impl_k_poll+0x1dc>)
   3b5b4:	f002 fc71 	bl	3de9a <printk>
   3b5b8:	491d      	ldr	r1, [pc, #116]	; (3b630 <z_impl_k_poll+0x1f4>)
   3b5ba:	4820      	ldr	r0, [pc, #128]	; (3b63c <z_impl_k_poll+0x200>)
   3b5bc:	f002 fc6d 	bl	3de9a <printk>
   3b5c0:	214a      	movs	r1, #74	; 0x4a
   3b5c2:	481c      	ldr	r0, [pc, #112]	; (3b634 <z_impl_k_poll+0x1f8>)
   3b5c4:	f002 fcbc 	bl	3df40 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b5c8:	4819      	ldr	r0, [pc, #100]	; (3b630 <z_impl_k_poll+0x1f4>)
   3b5ca:	f7fe ff0b 	bl	3a3e4 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   3b5ce:	4620      	mov	r0, r4
   3b5d0:	4632      	mov	r2, r6
   3b5d2:	4639      	mov	r1, r7
   3b5d4:	f7ff fd2c 	bl	3b030 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3b5d8:	4815      	ldr	r0, [pc, #84]	; (3b630 <z_impl_k_poll+0x1f4>)
   3b5da:	f7fe fef3 	bl	3a3c4 <z_spin_unlock_valid>
   3b5de:	b968      	cbnz	r0, 3b5fc <z_impl_k_poll+0x1c0>
   3b5e0:	235d      	movs	r3, #93	; 0x5d
   3b5e2:	4a14      	ldr	r2, [pc, #80]	; (3b634 <z_impl_k_poll+0x1f8>)
   3b5e4:	4916      	ldr	r1, [pc, #88]	; (3b640 <z_impl_k_poll+0x204>)
   3b5e6:	480c      	ldr	r0, [pc, #48]	; (3b618 <z_impl_k_poll+0x1dc>)
   3b5e8:	f002 fc57 	bl	3de9a <printk>
   3b5ec:	4910      	ldr	r1, [pc, #64]	; (3b630 <z_impl_k_poll+0x1f4>)
   3b5ee:	4815      	ldr	r0, [pc, #84]	; (3b644 <z_impl_k_poll+0x208>)
   3b5f0:	f002 fc53 	bl	3de9a <printk>
   3b5f4:	215d      	movs	r1, #93	; 0x5d
   3b5f6:	480f      	ldr	r0, [pc, #60]	; (3b634 <z_impl_k_poll+0x1f8>)
   3b5f8:	f002 fca2 	bl	3df40 <assert_post_action>
	__asm__ volatile(
   3b5fc:	f386 8811 	msr	BASEPRI, r6
   3b600:	f3bf 8f6f 	isb	sy
	return swap_rc;
   3b604:	e79d      	b.n	3b542 <z_impl_k_poll+0x106>
   3b606:	bf00      	nop
   3b608:	2002926c 	.word	0x2002926c
   3b60c:	0003afc1 	.word	0x0003afc1
   3b610:	00048c9b 	.word	0x00048c9b
   3b614:	0004904e 	.word	0x0004904e
   3b618:	00043278 	.word	0x00043278
   3b61c:	00044d12 	.word	0x00044d12
   3b620:	000490c1 	.word	0x000490c1
   3b624:	000490d7 	.word	0x000490d7
   3b628:	000490e6 	.word	0x000490e6
   3b62c:	000490f6 	.word	0x000490f6
   3b630:	20029388 	.word	0x20029388
   3b634:	00043dc8 	.word	0x00043dc8
   3b638:	00043dee 	.word	0x00043dee
   3b63c:	00043e03 	.word	0x00043e03
   3b640:	00043e1b 	.word	0x00043e1b
   3b644:	00043e32 	.word	0x00043e32

0003b648 <fabs>:
   3b648:	ec51 0b10 	vmov	r0, r1, d0
   3b64c:	ee10 2a10 	vmov	r2, s0
   3b650:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   3b654:	ec43 2b10 	vmov	d0, r2, r3
   3b658:	4770      	bx	lr
   3b65a:	bf00      	nop

0003b65c <__assert_func>:
   3b65c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   3b65e:	461c      	mov	r4, r3
   3b660:	4b09      	ldr	r3, [pc, #36]	; (3b688 <__assert_func+0x2c>)
   3b662:	4605      	mov	r5, r0
   3b664:	681b      	ldr	r3, [r3, #0]
   3b666:	68d8      	ldr	r0, [r3, #12]
   3b668:	b152      	cbz	r2, 3b680 <__assert_func+0x24>
   3b66a:	4b08      	ldr	r3, [pc, #32]	; (3b68c <__assert_func+0x30>)
   3b66c:	9100      	str	r1, [sp, #0]
   3b66e:	4908      	ldr	r1, [pc, #32]	; (3b690 <__assert_func+0x34>)
   3b670:	e9cd 3201 	strd	r3, r2, [sp, #4]
   3b674:	462b      	mov	r3, r5
   3b676:	4622      	mov	r2, r4
   3b678:	f000 f80e 	bl	3b698 <fiprintf>
   3b67c:	f005 fa5b 	bl	40b36 <abort>
   3b680:	4b04      	ldr	r3, [pc, #16]	; (3b694 <__assert_func+0x38>)
   3b682:	461a      	mov	r2, r3
   3b684:	e7f2      	b.n	3b66c <__assert_func+0x10>
   3b686:	bf00      	nop
   3b688:	20032100 	.word	0x20032100
   3b68c:	00049103 	.word	0x00049103
   3b690:	00049110 	.word	0x00049110
   3b694:	00044d14 	.word	0x00044d14

0003b698 <fiprintf>:
   3b698:	b40e      	push	{r1, r2, r3}
   3b69a:	b503      	push	{r0, r1, lr}
   3b69c:	ab03      	add	r3, sp, #12
   3b69e:	4601      	mov	r1, r0
   3b6a0:	4805      	ldr	r0, [pc, #20]	; (3b6b8 <fiprintf+0x20>)
   3b6a2:	f853 2b04 	ldr.w	r2, [r3], #4
   3b6a6:	6800      	ldr	r0, [r0, #0]
   3b6a8:	9301      	str	r3, [sp, #4]
   3b6aa:	f000 f8bf 	bl	3b82c <_vfiprintf_r>
   3b6ae:	b002      	add	sp, #8
   3b6b0:	f85d eb04 	ldr.w	lr, [sp], #4
   3b6b4:	b003      	add	sp, #12
   3b6b6:	4770      	bx	lr
   3b6b8:	20032100 	.word	0x20032100

0003b6bc <malloc>:
   3b6bc:	4b02      	ldr	r3, [pc, #8]	; (3b6c8 <malloc+0xc>)
   3b6be:	4601      	mov	r1, r0
   3b6c0:	6818      	ldr	r0, [r3, #0]
   3b6c2:	f000 b859 	b.w	3b778 <_malloc_r>
   3b6c6:	bf00      	nop
   3b6c8:	20032100 	.word	0x20032100

0003b6cc <free>:
   3b6cc:	4b02      	ldr	r3, [pc, #8]	; (3b6d8 <free+0xc>)
   3b6ce:	4601      	mov	r1, r0
   3b6d0:	6818      	ldr	r0, [r3, #0]
   3b6d2:	f000 b803 	b.w	3b6dc <_free_r>
   3b6d6:	bf00      	nop
   3b6d8:	20032100 	.word	0x20032100

0003b6dc <_free_r>:
   3b6dc:	b538      	push	{r3, r4, r5, lr}
   3b6de:	4605      	mov	r5, r0
   3b6e0:	2900      	cmp	r1, #0
   3b6e2:	d045      	beq.n	3b770 <_free_r+0x94>
   3b6e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
   3b6e8:	1f0c      	subs	r4, r1, #4
   3b6ea:	2b00      	cmp	r3, #0
   3b6ec:	bfb8      	it	lt
   3b6ee:	18e4      	addlt	r4, r4, r3
   3b6f0:	f001 fc08 	bl	3cf04 <__malloc_lock>
   3b6f4:	4a1f      	ldr	r2, [pc, #124]	; (3b774 <_free_r+0x98>)
   3b6f6:	6813      	ldr	r3, [r2, #0]
   3b6f8:	4610      	mov	r0, r2
   3b6fa:	b933      	cbnz	r3, 3b70a <_free_r+0x2e>
   3b6fc:	6063      	str	r3, [r4, #4]
   3b6fe:	6014      	str	r4, [r2, #0]
   3b700:	4628      	mov	r0, r5
   3b702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3b706:	f001 bc03 	b.w	3cf10 <__malloc_unlock>
   3b70a:	42a3      	cmp	r3, r4
   3b70c:	d90c      	bls.n	3b728 <_free_r+0x4c>
   3b70e:	6821      	ldr	r1, [r4, #0]
   3b710:	1862      	adds	r2, r4, r1
   3b712:	4293      	cmp	r3, r2
   3b714:	bf02      	ittt	eq
   3b716:	681a      	ldreq	r2, [r3, #0]
   3b718:	685b      	ldreq	r3, [r3, #4]
   3b71a:	1852      	addeq	r2, r2, r1
   3b71c:	6063      	str	r3, [r4, #4]
   3b71e:	bf08      	it	eq
   3b720:	6022      	streq	r2, [r4, #0]
   3b722:	6004      	str	r4, [r0, #0]
   3b724:	e7ec      	b.n	3b700 <_free_r+0x24>
   3b726:	4613      	mov	r3, r2
   3b728:	685a      	ldr	r2, [r3, #4]
   3b72a:	b10a      	cbz	r2, 3b730 <_free_r+0x54>
   3b72c:	42a2      	cmp	r2, r4
   3b72e:	d9fa      	bls.n	3b726 <_free_r+0x4a>
   3b730:	6819      	ldr	r1, [r3, #0]
   3b732:	1858      	adds	r0, r3, r1
   3b734:	42a0      	cmp	r0, r4
   3b736:	d10b      	bne.n	3b750 <_free_r+0x74>
   3b738:	6820      	ldr	r0, [r4, #0]
   3b73a:	4401      	add	r1, r0
   3b73c:	1858      	adds	r0, r3, r1
   3b73e:	6019      	str	r1, [r3, #0]
   3b740:	4282      	cmp	r2, r0
   3b742:	d1dd      	bne.n	3b700 <_free_r+0x24>
   3b744:	6810      	ldr	r0, [r2, #0]
   3b746:	6852      	ldr	r2, [r2, #4]
   3b748:	4401      	add	r1, r0
   3b74a:	605a      	str	r2, [r3, #4]
   3b74c:	6019      	str	r1, [r3, #0]
   3b74e:	e7d7      	b.n	3b700 <_free_r+0x24>
   3b750:	d902      	bls.n	3b758 <_free_r+0x7c>
   3b752:	230c      	movs	r3, #12
   3b754:	602b      	str	r3, [r5, #0]
   3b756:	e7d3      	b.n	3b700 <_free_r+0x24>
   3b758:	6820      	ldr	r0, [r4, #0]
   3b75a:	1821      	adds	r1, r4, r0
   3b75c:	428a      	cmp	r2, r1
   3b75e:	bf02      	ittt	eq
   3b760:	6811      	ldreq	r1, [r2, #0]
   3b762:	6852      	ldreq	r2, [r2, #4]
   3b764:	1809      	addeq	r1, r1, r0
   3b766:	6062      	str	r2, [r4, #4]
   3b768:	bf08      	it	eq
   3b76a:	6021      	streq	r1, [r4, #0]
   3b76c:	605c      	str	r4, [r3, #4]
   3b76e:	e7c7      	b.n	3b700 <_free_r+0x24>
   3b770:	bd38      	pop	{r3, r4, r5, pc}
   3b772:	bf00      	nop
   3b774:	2002938c 	.word	0x2002938c

0003b778 <_malloc_r>:
   3b778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b77a:	1ccd      	adds	r5, r1, #3
   3b77c:	4606      	mov	r6, r0
   3b77e:	f025 0503 	bic.w	r5, r5, #3
   3b782:	3508      	adds	r5, #8
   3b784:	2d0c      	cmp	r5, #12
   3b786:	bf38      	it	cc
   3b788:	250c      	movcc	r5, #12
   3b78a:	2d00      	cmp	r5, #0
   3b78c:	db01      	blt.n	3b792 <_malloc_r+0x1a>
   3b78e:	42a9      	cmp	r1, r5
   3b790:	d903      	bls.n	3b79a <_malloc_r+0x22>
   3b792:	230c      	movs	r3, #12
   3b794:	6033      	str	r3, [r6, #0]
   3b796:	2000      	movs	r0, #0
   3b798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b79a:	f001 fbb3 	bl	3cf04 <__malloc_lock>
   3b79e:	4921      	ldr	r1, [pc, #132]	; (3b824 <_malloc_r+0xac>)
   3b7a0:	680a      	ldr	r2, [r1, #0]
   3b7a2:	4614      	mov	r4, r2
   3b7a4:	b99c      	cbnz	r4, 3b7ce <_malloc_r+0x56>
   3b7a6:	4f20      	ldr	r7, [pc, #128]	; (3b828 <_malloc_r+0xb0>)
   3b7a8:	683b      	ldr	r3, [r7, #0]
   3b7aa:	b923      	cbnz	r3, 3b7b6 <_malloc_r+0x3e>
   3b7ac:	4621      	mov	r1, r4
   3b7ae:	4630      	mov	r0, r6
   3b7b0:	f000 fd02 	bl	3c1b8 <_sbrk_r>
   3b7b4:	6038      	str	r0, [r7, #0]
   3b7b6:	4629      	mov	r1, r5
   3b7b8:	4630      	mov	r0, r6
   3b7ba:	f000 fcfd 	bl	3c1b8 <_sbrk_r>
   3b7be:	1c43      	adds	r3, r0, #1
   3b7c0:	d123      	bne.n	3b80a <_malloc_r+0x92>
   3b7c2:	230c      	movs	r3, #12
   3b7c4:	4630      	mov	r0, r6
   3b7c6:	6033      	str	r3, [r6, #0]
   3b7c8:	f001 fba2 	bl	3cf10 <__malloc_unlock>
   3b7cc:	e7e3      	b.n	3b796 <_malloc_r+0x1e>
   3b7ce:	6823      	ldr	r3, [r4, #0]
   3b7d0:	1b5b      	subs	r3, r3, r5
   3b7d2:	d417      	bmi.n	3b804 <_malloc_r+0x8c>
   3b7d4:	2b0b      	cmp	r3, #11
   3b7d6:	d903      	bls.n	3b7e0 <_malloc_r+0x68>
   3b7d8:	6023      	str	r3, [r4, #0]
   3b7da:	441c      	add	r4, r3
   3b7dc:	6025      	str	r5, [r4, #0]
   3b7de:	e004      	b.n	3b7ea <_malloc_r+0x72>
   3b7e0:	6863      	ldr	r3, [r4, #4]
   3b7e2:	42a2      	cmp	r2, r4
   3b7e4:	bf0c      	ite	eq
   3b7e6:	600b      	streq	r3, [r1, #0]
   3b7e8:	6053      	strne	r3, [r2, #4]
   3b7ea:	4630      	mov	r0, r6
   3b7ec:	f001 fb90 	bl	3cf10 <__malloc_unlock>
   3b7f0:	f104 000b 	add.w	r0, r4, #11
   3b7f4:	1d23      	adds	r3, r4, #4
   3b7f6:	f020 0007 	bic.w	r0, r0, #7
   3b7fa:	1ac2      	subs	r2, r0, r3
   3b7fc:	d0cc      	beq.n	3b798 <_malloc_r+0x20>
   3b7fe:	1a1b      	subs	r3, r3, r0
   3b800:	50a3      	str	r3, [r4, r2]
   3b802:	e7c9      	b.n	3b798 <_malloc_r+0x20>
   3b804:	4622      	mov	r2, r4
   3b806:	6864      	ldr	r4, [r4, #4]
   3b808:	e7cc      	b.n	3b7a4 <_malloc_r+0x2c>
   3b80a:	1cc4      	adds	r4, r0, #3
   3b80c:	f024 0403 	bic.w	r4, r4, #3
   3b810:	42a0      	cmp	r0, r4
   3b812:	d0e3      	beq.n	3b7dc <_malloc_r+0x64>
   3b814:	1a21      	subs	r1, r4, r0
   3b816:	4630      	mov	r0, r6
   3b818:	f000 fcce 	bl	3c1b8 <_sbrk_r>
   3b81c:	3001      	adds	r0, #1
   3b81e:	d1dd      	bne.n	3b7dc <_malloc_r+0x64>
   3b820:	e7cf      	b.n	3b7c2 <_malloc_r+0x4a>
   3b822:	bf00      	nop
   3b824:	2002938c 	.word	0x2002938c
   3b828:	20029390 	.word	0x20029390

0003b82c <_vfiprintf_r>:
   3b82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b830:	460d      	mov	r5, r1
   3b832:	b09d      	sub	sp, #116	; 0x74
   3b834:	4614      	mov	r4, r2
   3b836:	461e      	mov	r6, r3
   3b838:	4607      	mov	r7, r0
   3b83a:	b118      	cbz	r0, 3b844 <_vfiprintf_r+0x18>
   3b83c:	6983      	ldr	r3, [r0, #24]
   3b83e:	b90b      	cbnz	r3, 3b844 <_vfiprintf_r+0x18>
   3b840:	f001 f86a 	bl	3c918 <__sinit>
   3b844:	4b85      	ldr	r3, [pc, #532]	; (3ba5c <_vfiprintf_r+0x230>)
   3b846:	429d      	cmp	r5, r3
   3b848:	d11b      	bne.n	3b882 <_vfiprintf_r+0x56>
   3b84a:	687d      	ldr	r5, [r7, #4]
   3b84c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3b84e:	07d9      	lsls	r1, r3, #31
   3b850:	d405      	bmi.n	3b85e <_vfiprintf_r+0x32>
   3b852:	89ab      	ldrh	r3, [r5, #12]
   3b854:	059a      	lsls	r2, r3, #22
   3b856:	d402      	bmi.n	3b85e <_vfiprintf_r+0x32>
   3b858:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3b85a:	f005 fb3b 	bl	40ed4 <__retarget_lock_acquire_recursive>
   3b85e:	89ab      	ldrh	r3, [r5, #12]
   3b860:	071b      	lsls	r3, r3, #28
   3b862:	d501      	bpl.n	3b868 <_vfiprintf_r+0x3c>
   3b864:	692b      	ldr	r3, [r5, #16]
   3b866:	b9eb      	cbnz	r3, 3b8a4 <_vfiprintf_r+0x78>
   3b868:	4629      	mov	r1, r5
   3b86a:	4638      	mov	r0, r7
   3b86c:	f000 feb0 	bl	3c5d0 <__swsetup_r>
   3b870:	b1c0      	cbz	r0, 3b8a4 <_vfiprintf_r+0x78>
   3b872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3b874:	07d8      	lsls	r0, r3, #31
   3b876:	d50e      	bpl.n	3b896 <_vfiprintf_r+0x6a>
   3b878:	f04f 30ff 	mov.w	r0, #4294967295
   3b87c:	b01d      	add	sp, #116	; 0x74
   3b87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b882:	4b77      	ldr	r3, [pc, #476]	; (3ba60 <_vfiprintf_r+0x234>)
   3b884:	429d      	cmp	r5, r3
   3b886:	d101      	bne.n	3b88c <_vfiprintf_r+0x60>
   3b888:	68bd      	ldr	r5, [r7, #8]
   3b88a:	e7df      	b.n	3b84c <_vfiprintf_r+0x20>
   3b88c:	4b75      	ldr	r3, [pc, #468]	; (3ba64 <_vfiprintf_r+0x238>)
   3b88e:	429d      	cmp	r5, r3
   3b890:	bf08      	it	eq
   3b892:	68fd      	ldreq	r5, [r7, #12]
   3b894:	e7da      	b.n	3b84c <_vfiprintf_r+0x20>
   3b896:	89ab      	ldrh	r3, [r5, #12]
   3b898:	0599      	lsls	r1, r3, #22
   3b89a:	d4ed      	bmi.n	3b878 <_vfiprintf_r+0x4c>
   3b89c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3b89e:	f005 fb1a 	bl	40ed6 <__retarget_lock_release_recursive>
   3b8a2:	e7e9      	b.n	3b878 <_vfiprintf_r+0x4c>
   3b8a4:	2300      	movs	r3, #0
   3b8a6:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 3ba68 <_vfiprintf_r+0x23c>
   3b8aa:	f04f 0a01 	mov.w	sl, #1
   3b8ae:	9603      	str	r6, [sp, #12]
   3b8b0:	9309      	str	r3, [sp, #36]	; 0x24
   3b8b2:	2320      	movs	r3, #32
   3b8b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3b8b8:	2330      	movs	r3, #48	; 0x30
   3b8ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3b8be:	4623      	mov	r3, r4
   3b8c0:	461e      	mov	r6, r3
   3b8c2:	f813 2b01 	ldrb.w	r2, [r3], #1
   3b8c6:	b10a      	cbz	r2, 3b8cc <_vfiprintf_r+0xa0>
   3b8c8:	2a25      	cmp	r2, #37	; 0x25
   3b8ca:	d1f9      	bne.n	3b8c0 <_vfiprintf_r+0x94>
   3b8cc:	ebb6 0b04 	subs.w	fp, r6, r4
   3b8d0:	d00b      	beq.n	3b8ea <_vfiprintf_r+0xbe>
   3b8d2:	465b      	mov	r3, fp
   3b8d4:	4622      	mov	r2, r4
   3b8d6:	4629      	mov	r1, r5
   3b8d8:	4638      	mov	r0, r7
   3b8da:	f004 fede 	bl	4069a <__sfputs_r>
   3b8de:	3001      	adds	r0, #1
   3b8e0:	f000 80a3 	beq.w	3ba2a <_vfiprintf_r+0x1fe>
   3b8e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3b8e6:	445b      	add	r3, fp
   3b8e8:	9309      	str	r3, [sp, #36]	; 0x24
   3b8ea:	7833      	ldrb	r3, [r6, #0]
   3b8ec:	2b00      	cmp	r3, #0
   3b8ee:	f000 809c 	beq.w	3ba2a <_vfiprintf_r+0x1fe>
   3b8f2:	2300      	movs	r3, #0
   3b8f4:	f04f 32ff 	mov.w	r2, #4294967295
   3b8f8:	3601      	adds	r6, #1
   3b8fa:	9304      	str	r3, [sp, #16]
   3b8fc:	9307      	str	r3, [sp, #28]
   3b8fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3b902:	931a      	str	r3, [sp, #104]	; 0x68
   3b904:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3b908:	4634      	mov	r4, r6
   3b90a:	2205      	movs	r2, #5
   3b90c:	4856      	ldr	r0, [pc, #344]	; (3ba68 <_vfiprintf_r+0x23c>)
   3b90e:	f814 1b01 	ldrb.w	r1, [r4], #1
   3b912:	f004 fe67 	bl	405e4 <memchr>
   3b916:	9b04      	ldr	r3, [sp, #16]
   3b918:	b9c0      	cbnz	r0, 3b94c <_vfiprintf_r+0x120>
   3b91a:	06da      	lsls	r2, r3, #27
   3b91c:	bf44      	itt	mi
   3b91e:	2220      	movmi	r2, #32
   3b920:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3b924:	0718      	lsls	r0, r3, #28
   3b926:	bf44      	itt	mi
   3b928:	222b      	movmi	r2, #43	; 0x2b
   3b92a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3b92e:	7832      	ldrb	r2, [r6, #0]
   3b930:	2a2a      	cmp	r2, #42	; 0x2a
   3b932:	d013      	beq.n	3b95c <_vfiprintf_r+0x130>
   3b934:	4634      	mov	r4, r6
   3b936:	9a07      	ldr	r2, [sp, #28]
   3b938:	2000      	movs	r0, #0
   3b93a:	260a      	movs	r6, #10
   3b93c:	4621      	mov	r1, r4
   3b93e:	f811 3b01 	ldrb.w	r3, [r1], #1
   3b942:	3b30      	subs	r3, #48	; 0x30
   3b944:	2b09      	cmp	r3, #9
   3b946:	d94b      	bls.n	3b9e0 <_vfiprintf_r+0x1b4>
   3b948:	b970      	cbnz	r0, 3b968 <_vfiprintf_r+0x13c>
   3b94a:	e014      	b.n	3b976 <_vfiprintf_r+0x14a>
   3b94c:	eba0 0009 	sub.w	r0, r0, r9
   3b950:	4626      	mov	r6, r4
   3b952:	fa0a f000 	lsl.w	r0, sl, r0
   3b956:	4318      	orrs	r0, r3
   3b958:	9004      	str	r0, [sp, #16]
   3b95a:	e7d5      	b.n	3b908 <_vfiprintf_r+0xdc>
   3b95c:	9a03      	ldr	r2, [sp, #12]
   3b95e:	1d11      	adds	r1, r2, #4
   3b960:	6812      	ldr	r2, [r2, #0]
   3b962:	2a00      	cmp	r2, #0
   3b964:	9103      	str	r1, [sp, #12]
   3b966:	db01      	blt.n	3b96c <_vfiprintf_r+0x140>
   3b968:	9207      	str	r2, [sp, #28]
   3b96a:	e004      	b.n	3b976 <_vfiprintf_r+0x14a>
   3b96c:	4252      	negs	r2, r2
   3b96e:	f043 0302 	orr.w	r3, r3, #2
   3b972:	9207      	str	r2, [sp, #28]
   3b974:	9304      	str	r3, [sp, #16]
   3b976:	7823      	ldrb	r3, [r4, #0]
   3b978:	2b2e      	cmp	r3, #46	; 0x2e
   3b97a:	d10c      	bne.n	3b996 <_vfiprintf_r+0x16a>
   3b97c:	7863      	ldrb	r3, [r4, #1]
   3b97e:	2b2a      	cmp	r3, #42	; 0x2a
   3b980:	d133      	bne.n	3b9ea <_vfiprintf_r+0x1be>
   3b982:	9b03      	ldr	r3, [sp, #12]
   3b984:	3402      	adds	r4, #2
   3b986:	1d1a      	adds	r2, r3, #4
   3b988:	681b      	ldr	r3, [r3, #0]
   3b98a:	2b00      	cmp	r3, #0
   3b98c:	9203      	str	r2, [sp, #12]
   3b98e:	bfb8      	it	lt
   3b990:	f04f 33ff 	movlt.w	r3, #4294967295
   3b994:	9305      	str	r3, [sp, #20]
   3b996:	4e35      	ldr	r6, [pc, #212]	; (3ba6c <_vfiprintf_r+0x240>)
   3b998:	2203      	movs	r2, #3
   3b99a:	7821      	ldrb	r1, [r4, #0]
   3b99c:	4630      	mov	r0, r6
   3b99e:	f004 fe21 	bl	405e4 <memchr>
   3b9a2:	b138      	cbz	r0, 3b9b4 <_vfiprintf_r+0x188>
   3b9a4:	2340      	movs	r3, #64	; 0x40
   3b9a6:	1b80      	subs	r0, r0, r6
   3b9a8:	3401      	adds	r4, #1
   3b9aa:	fa03 f000 	lsl.w	r0, r3, r0
   3b9ae:	9b04      	ldr	r3, [sp, #16]
   3b9b0:	4303      	orrs	r3, r0
   3b9b2:	9304      	str	r3, [sp, #16]
   3b9b4:	f814 1b01 	ldrb.w	r1, [r4], #1
   3b9b8:	2206      	movs	r2, #6
   3b9ba:	482d      	ldr	r0, [pc, #180]	; (3ba70 <_vfiprintf_r+0x244>)
   3b9bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3b9c0:	f004 fe10 	bl	405e4 <memchr>
   3b9c4:	2800      	cmp	r0, #0
   3b9c6:	d03f      	beq.n	3ba48 <_vfiprintf_r+0x21c>
   3b9c8:	4b2a      	ldr	r3, [pc, #168]	; (3ba74 <_vfiprintf_r+0x248>)
   3b9ca:	bb13      	cbnz	r3, 3ba12 <_vfiprintf_r+0x1e6>
   3b9cc:	9b03      	ldr	r3, [sp, #12]
   3b9ce:	3307      	adds	r3, #7
   3b9d0:	f023 0307 	bic.w	r3, r3, #7
   3b9d4:	3308      	adds	r3, #8
   3b9d6:	9303      	str	r3, [sp, #12]
   3b9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3b9da:	4443      	add	r3, r8
   3b9dc:	9309      	str	r3, [sp, #36]	; 0x24
   3b9de:	e76e      	b.n	3b8be <_vfiprintf_r+0x92>
   3b9e0:	fb06 3202 	mla	r2, r6, r2, r3
   3b9e4:	2001      	movs	r0, #1
   3b9e6:	460c      	mov	r4, r1
   3b9e8:	e7a8      	b.n	3b93c <_vfiprintf_r+0x110>
   3b9ea:	2300      	movs	r3, #0
   3b9ec:	3401      	adds	r4, #1
   3b9ee:	260a      	movs	r6, #10
   3b9f0:	4619      	mov	r1, r3
   3b9f2:	9305      	str	r3, [sp, #20]
   3b9f4:	4620      	mov	r0, r4
   3b9f6:	f810 2b01 	ldrb.w	r2, [r0], #1
   3b9fa:	3a30      	subs	r2, #48	; 0x30
   3b9fc:	2a09      	cmp	r2, #9
   3b9fe:	d903      	bls.n	3ba08 <_vfiprintf_r+0x1dc>
   3ba00:	2b00      	cmp	r3, #0
   3ba02:	d0c8      	beq.n	3b996 <_vfiprintf_r+0x16a>
   3ba04:	9105      	str	r1, [sp, #20]
   3ba06:	e7c6      	b.n	3b996 <_vfiprintf_r+0x16a>
   3ba08:	fb06 2101 	mla	r1, r6, r1, r2
   3ba0c:	2301      	movs	r3, #1
   3ba0e:	4604      	mov	r4, r0
   3ba10:	e7f0      	b.n	3b9f4 <_vfiprintf_r+0x1c8>
   3ba12:	ab03      	add	r3, sp, #12
   3ba14:	462a      	mov	r2, r5
   3ba16:	a904      	add	r1, sp, #16
   3ba18:	4638      	mov	r0, r7
   3ba1a:	9300      	str	r3, [sp, #0]
   3ba1c:	4b16      	ldr	r3, [pc, #88]	; (3ba78 <_vfiprintf_r+0x24c>)
   3ba1e:	f000 f82d 	bl	3ba7c <_printf_float>
   3ba22:	f1b0 3fff 	cmp.w	r0, #4294967295
   3ba26:	4680      	mov	r8, r0
   3ba28:	d1d6      	bne.n	3b9d8 <_vfiprintf_r+0x1ac>
   3ba2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3ba2c:	07d9      	lsls	r1, r3, #31
   3ba2e:	d405      	bmi.n	3ba3c <_vfiprintf_r+0x210>
   3ba30:	89ab      	ldrh	r3, [r5, #12]
   3ba32:	059a      	lsls	r2, r3, #22
   3ba34:	d402      	bmi.n	3ba3c <_vfiprintf_r+0x210>
   3ba36:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3ba38:	f005 fa4d 	bl	40ed6 <__retarget_lock_release_recursive>
   3ba3c:	89ab      	ldrh	r3, [r5, #12]
   3ba3e:	065b      	lsls	r3, r3, #25
   3ba40:	f53f af1a 	bmi.w	3b878 <_vfiprintf_r+0x4c>
   3ba44:	9809      	ldr	r0, [sp, #36]	; 0x24
   3ba46:	e719      	b.n	3b87c <_vfiprintf_r+0x50>
   3ba48:	ab03      	add	r3, sp, #12
   3ba4a:	462a      	mov	r2, r5
   3ba4c:	a904      	add	r1, sp, #16
   3ba4e:	4638      	mov	r0, r7
   3ba50:	9300      	str	r3, [sp, #0]
   3ba52:	4b09      	ldr	r3, [pc, #36]	; (3ba78 <_vfiprintf_r+0x24c>)
   3ba54:	f000 fa3c 	bl	3bed0 <_printf_i>
   3ba58:	e7e3      	b.n	3ba22 <_vfiprintf_r+0x1f6>
   3ba5a:	bf00      	nop
   3ba5c:	00042ba4 	.word	0x00042ba4
   3ba60:	00042bc4 	.word	0x00042bc4
   3ba64:	00042b84 	.word	0x00042b84
   3ba68:	00049240 	.word	0x00049240
   3ba6c:	00049246 	.word	0x00049246
   3ba70:	0004924a 	.word	0x0004924a
   3ba74:	0003ba7d 	.word	0x0003ba7d
   3ba78:	0004069b 	.word	0x0004069b

0003ba7c <_printf_float>:
   3ba7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ba80:	b08d      	sub	sp, #52	; 0x34
   3ba82:	460c      	mov	r4, r1
   3ba84:	4616      	mov	r6, r2
   3ba86:	461f      	mov	r7, r3
   3ba88:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   3ba8c:	4605      	mov	r5, r0
   3ba8e:	f001 f9e3 	bl	3ce58 <_localeconv_r>
   3ba92:	6803      	ldr	r3, [r0, #0]
   3ba94:	4618      	mov	r0, r3
   3ba96:	9306      	str	r3, [sp, #24]
   3ba98:	f7e1 fb44 	bl	1d124 <strlen>
   3ba9c:	2300      	movs	r3, #0
   3ba9e:	9007      	str	r0, [sp, #28]
   3baa0:	930a      	str	r3, [sp, #40]	; 0x28
   3baa2:	f8d8 3000 	ldr.w	r3, [r8]
   3baa6:	f894 a018 	ldrb.w	sl, [r4, #24]
   3baaa:	3307      	adds	r3, #7
   3baac:	f8d4 b000 	ldr.w	fp, [r4]
   3bab0:	f023 0307 	bic.w	r3, r3, #7
   3bab4:	f103 0208 	add.w	r2, r3, #8
   3bab8:	f8c8 2000 	str.w	r2, [r8]
   3babc:	e9d3 2300 	ldrd	r2, r3, [r3]
   3bac0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   3bac4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
   3bac8:	f04f 32ff 	mov.w	r2, #4294967295
   3bacc:	ed8d 7b04 	vstr	d7, [sp, #16]
   3bad0:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
   3bad4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   3bad8:	4640      	mov	r0, r8
   3bada:	4ba6      	ldr	r3, [pc, #664]	; (3bd74 <_printf_float+0x2f8>)
   3badc:	4649      	mov	r1, r9
   3bade:	f7e1 facb 	bl	1d078 <__aeabi_dcmpun>
   3bae2:	bb70      	cbnz	r0, 3bb42 <_printf_float+0xc6>
   3bae4:	f04f 32ff 	mov.w	r2, #4294967295
   3bae8:	4ba2      	ldr	r3, [pc, #648]	; (3bd74 <_printf_float+0x2f8>)
   3baea:	4640      	mov	r0, r8
   3baec:	4649      	mov	r1, r9
   3baee:	f7e1 f8df 	bl	1ccb0 <__aeabi_dcmple>
   3baf2:	bb30      	cbnz	r0, 3bb42 <_printf_float+0xc6>
   3baf4:	2200      	movs	r2, #0
   3baf6:	2300      	movs	r3, #0
   3baf8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   3bafc:	f7e1 f8ce 	bl	1cc9c <__aeabi_dcmplt>
   3bb00:	b110      	cbz	r0, 3bb08 <_printf_float+0x8c>
   3bb02:	232d      	movs	r3, #45	; 0x2d
   3bb04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3bb08:	4a9b      	ldr	r2, [pc, #620]	; (3bd78 <_printf_float+0x2fc>)
   3bb0a:	4b9c      	ldr	r3, [pc, #624]	; (3bd7c <_printf_float+0x300>)
   3bb0c:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   3bb10:	bf94      	ite	ls
   3bb12:	4690      	movls	r8, r2
   3bb14:	4698      	movhi	r8, r3
   3bb16:	f04f 0900 	mov.w	r9, #0
   3bb1a:	2303      	movs	r3, #3
   3bb1c:	f02b 0204 	bic.w	r2, fp, #4
   3bb20:	6123      	str	r3, [r4, #16]
   3bb22:	6022      	str	r2, [r4, #0]
   3bb24:	9700      	str	r7, [sp, #0]
   3bb26:	4633      	mov	r3, r6
   3bb28:	aa0b      	add	r2, sp, #44	; 0x2c
   3bb2a:	4621      	mov	r1, r4
   3bb2c:	4628      	mov	r0, r5
   3bb2e:	f004 fe56 	bl	407de <_printf_common>
   3bb32:	3001      	adds	r0, #1
   3bb34:	f040 808c 	bne.w	3bc50 <_printf_float+0x1d4>
   3bb38:	f04f 30ff 	mov.w	r0, #4294967295
   3bb3c:	b00d      	add	sp, #52	; 0x34
   3bb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bb42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   3bb46:	4610      	mov	r0, r2
   3bb48:	4619      	mov	r1, r3
   3bb4a:	f7e1 fa95 	bl	1d078 <__aeabi_dcmpun>
   3bb4e:	b140      	cbz	r0, 3bb62 <_printf_float+0xe6>
   3bb50:	9b05      	ldr	r3, [sp, #20]
   3bb52:	4a8b      	ldr	r2, [pc, #556]	; (3bd80 <_printf_float+0x304>)
   3bb54:	2b00      	cmp	r3, #0
   3bb56:	bfbc      	itt	lt
   3bb58:	232d      	movlt	r3, #45	; 0x2d
   3bb5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   3bb5e:	4b89      	ldr	r3, [pc, #548]	; (3bd84 <_printf_float+0x308>)
   3bb60:	e7d4      	b.n	3bb0c <_printf_float+0x90>
   3bb62:	6863      	ldr	r3, [r4, #4]
   3bb64:	f00a 09df 	and.w	r9, sl, #223	; 0xdf
   3bb68:	1c5a      	adds	r2, r3, #1
   3bb6a:	d13e      	bne.n	3bbea <_printf_float+0x16e>
   3bb6c:	2306      	movs	r3, #6
   3bb6e:	6063      	str	r3, [r4, #4]
   3bb70:	2300      	movs	r3, #0
   3bb72:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   3bb76:	6861      	ldr	r1, [r4, #4]
   3bb78:	4628      	mov	r0, r5
   3bb7a:	9303      	str	r3, [sp, #12]
   3bb7c:	ab0a      	add	r3, sp, #40	; 0x28
   3bb7e:	6022      	str	r2, [r4, #0]
   3bb80:	e9cd a301 	strd	sl, r3, [sp, #4]
   3bb84:	ab09      	add	r3, sp, #36	; 0x24
   3bb86:	ed9d 0b04 	vldr	d0, [sp, #16]
   3bb8a:	9300      	str	r3, [sp, #0]
   3bb8c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   3bb90:	f004 fd95 	bl	406be <__cvt>
   3bb94:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   3bb98:	4680      	mov	r8, r0
   3bb9a:	9909      	ldr	r1, [sp, #36]	; 0x24
   3bb9c:	d108      	bne.n	3bbb0 <_printf_float+0x134>
   3bb9e:	1cc8      	adds	r0, r1, #3
   3bba0:	db02      	blt.n	3bba8 <_printf_float+0x12c>
   3bba2:	6863      	ldr	r3, [r4, #4]
   3bba4:	4299      	cmp	r1, r3
   3bba6:	dd41      	ble.n	3bc2c <_printf_float+0x1b0>
   3bba8:	f1aa 0a02 	sub.w	sl, sl, #2
   3bbac:	fa5f fa8a 	uxtb.w	sl, sl
   3bbb0:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   3bbb4:	d820      	bhi.n	3bbf8 <_printf_float+0x17c>
   3bbb6:	3901      	subs	r1, #1
   3bbb8:	4652      	mov	r2, sl
   3bbba:	f104 0050 	add.w	r0, r4, #80	; 0x50
   3bbbe:	9109      	str	r1, [sp, #36]	; 0x24
   3bbc0:	f004 fdda 	bl	40778 <__exponent>
   3bbc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3bbc6:	4681      	mov	r9, r0
   3bbc8:	1813      	adds	r3, r2, r0
   3bbca:	2a01      	cmp	r2, #1
   3bbcc:	6123      	str	r3, [r4, #16]
   3bbce:	dc02      	bgt.n	3bbd6 <_printf_float+0x15a>
   3bbd0:	6822      	ldr	r2, [r4, #0]
   3bbd2:	07d2      	lsls	r2, r2, #31
   3bbd4:	d501      	bpl.n	3bbda <_printf_float+0x15e>
   3bbd6:	3301      	adds	r3, #1
   3bbd8:	6123      	str	r3, [r4, #16]
   3bbda:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   3bbde:	2b00      	cmp	r3, #0
   3bbe0:	d0a0      	beq.n	3bb24 <_printf_float+0xa8>
   3bbe2:	232d      	movs	r3, #45	; 0x2d
   3bbe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3bbe8:	e79c      	b.n	3bb24 <_printf_float+0xa8>
   3bbea:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   3bbee:	d1bf      	bne.n	3bb70 <_printf_float+0xf4>
   3bbf0:	2b00      	cmp	r3, #0
   3bbf2:	d1bd      	bne.n	3bb70 <_printf_float+0xf4>
   3bbf4:	2301      	movs	r3, #1
   3bbf6:	e7ba      	b.n	3bb6e <_printf_float+0xf2>
   3bbf8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   3bbfc:	d118      	bne.n	3bc30 <_printf_float+0x1b4>
   3bbfe:	2900      	cmp	r1, #0
   3bc00:	6863      	ldr	r3, [r4, #4]
   3bc02:	dd0b      	ble.n	3bc1c <_printf_float+0x1a0>
   3bc04:	6121      	str	r1, [r4, #16]
   3bc06:	b913      	cbnz	r3, 3bc0e <_printf_float+0x192>
   3bc08:	6822      	ldr	r2, [r4, #0]
   3bc0a:	07d0      	lsls	r0, r2, #31
   3bc0c:	d502      	bpl.n	3bc14 <_printf_float+0x198>
   3bc0e:	3301      	adds	r3, #1
   3bc10:	440b      	add	r3, r1
   3bc12:	6123      	str	r3, [r4, #16]
   3bc14:	65a1      	str	r1, [r4, #88]	; 0x58
   3bc16:	f04f 0900 	mov.w	r9, #0
   3bc1a:	e7de      	b.n	3bbda <_printf_float+0x15e>
   3bc1c:	b913      	cbnz	r3, 3bc24 <_printf_float+0x1a8>
   3bc1e:	6822      	ldr	r2, [r4, #0]
   3bc20:	07d2      	lsls	r2, r2, #31
   3bc22:	d501      	bpl.n	3bc28 <_printf_float+0x1ac>
   3bc24:	3302      	adds	r3, #2
   3bc26:	e7f4      	b.n	3bc12 <_printf_float+0x196>
   3bc28:	2301      	movs	r3, #1
   3bc2a:	e7f2      	b.n	3bc12 <_printf_float+0x196>
   3bc2c:	f04f 0a67 	mov.w	sl, #103	; 0x67
   3bc30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3bc32:	4299      	cmp	r1, r3
   3bc34:	db05      	blt.n	3bc42 <_printf_float+0x1c6>
   3bc36:	6823      	ldr	r3, [r4, #0]
   3bc38:	6121      	str	r1, [r4, #16]
   3bc3a:	07d8      	lsls	r0, r3, #31
   3bc3c:	d5ea      	bpl.n	3bc14 <_printf_float+0x198>
   3bc3e:	1c4b      	adds	r3, r1, #1
   3bc40:	e7e7      	b.n	3bc12 <_printf_float+0x196>
   3bc42:	2900      	cmp	r1, #0
   3bc44:	bfd4      	ite	le
   3bc46:	f1c1 0202 	rsble	r2, r1, #2
   3bc4a:	2201      	movgt	r2, #1
   3bc4c:	4413      	add	r3, r2
   3bc4e:	e7e0      	b.n	3bc12 <_printf_float+0x196>
   3bc50:	6823      	ldr	r3, [r4, #0]
   3bc52:	055a      	lsls	r2, r3, #21
   3bc54:	d407      	bmi.n	3bc66 <_printf_float+0x1ea>
   3bc56:	6923      	ldr	r3, [r4, #16]
   3bc58:	4642      	mov	r2, r8
   3bc5a:	4631      	mov	r1, r6
   3bc5c:	4628      	mov	r0, r5
   3bc5e:	47b8      	blx	r7
   3bc60:	3001      	adds	r0, #1
   3bc62:	d12b      	bne.n	3bcbc <_printf_float+0x240>
   3bc64:	e768      	b.n	3bb38 <_printf_float+0xbc>
   3bc66:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   3bc6a:	f240 80dc 	bls.w	3be26 <_printf_float+0x3aa>
   3bc6e:	2200      	movs	r2, #0
   3bc70:	2300      	movs	r3, #0
   3bc72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3bc76:	f7e1 f807 	bl	1cc88 <__aeabi_dcmpeq>
   3bc7a:	2800      	cmp	r0, #0
   3bc7c:	d033      	beq.n	3bce6 <_printf_float+0x26a>
   3bc7e:	2301      	movs	r3, #1
   3bc80:	4a41      	ldr	r2, [pc, #260]	; (3bd88 <_printf_float+0x30c>)
   3bc82:	4631      	mov	r1, r6
   3bc84:	4628      	mov	r0, r5
   3bc86:	47b8      	blx	r7
   3bc88:	3001      	adds	r0, #1
   3bc8a:	f43f af55 	beq.w	3bb38 <_printf_float+0xbc>
   3bc8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3bc92:	429a      	cmp	r2, r3
   3bc94:	db02      	blt.n	3bc9c <_printf_float+0x220>
   3bc96:	6823      	ldr	r3, [r4, #0]
   3bc98:	07d8      	lsls	r0, r3, #31
   3bc9a:	d50f      	bpl.n	3bcbc <_printf_float+0x240>
   3bc9c:	4631      	mov	r1, r6
   3bc9e:	4628      	mov	r0, r5
   3bca0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3bca4:	47b8      	blx	r7
   3bca6:	3001      	adds	r0, #1
   3bca8:	f43f af46 	beq.w	3bb38 <_printf_float+0xbc>
   3bcac:	f04f 0800 	mov.w	r8, #0
   3bcb0:	f104 091a 	add.w	r9, r4, #26
   3bcb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3bcb6:	3b01      	subs	r3, #1
   3bcb8:	4543      	cmp	r3, r8
   3bcba:	dc09      	bgt.n	3bcd0 <_printf_float+0x254>
   3bcbc:	6823      	ldr	r3, [r4, #0]
   3bcbe:	079b      	lsls	r3, r3, #30
   3bcc0:	f100 8101 	bmi.w	3bec6 <_printf_float+0x44a>
   3bcc4:	68e0      	ldr	r0, [r4, #12]
   3bcc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3bcc8:	4298      	cmp	r0, r3
   3bcca:	bfb8      	it	lt
   3bccc:	4618      	movlt	r0, r3
   3bcce:	e735      	b.n	3bb3c <_printf_float+0xc0>
   3bcd0:	2301      	movs	r3, #1
   3bcd2:	464a      	mov	r2, r9
   3bcd4:	4631      	mov	r1, r6
   3bcd6:	4628      	mov	r0, r5
   3bcd8:	47b8      	blx	r7
   3bcda:	3001      	adds	r0, #1
   3bcdc:	f43f af2c 	beq.w	3bb38 <_printf_float+0xbc>
   3bce0:	f108 0801 	add.w	r8, r8, #1
   3bce4:	e7e6      	b.n	3bcb4 <_printf_float+0x238>
   3bce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3bce8:	2b00      	cmp	r3, #0
   3bcea:	dc2b      	bgt.n	3bd44 <_printf_float+0x2c8>
   3bcec:	2301      	movs	r3, #1
   3bcee:	4a26      	ldr	r2, [pc, #152]	; (3bd88 <_printf_float+0x30c>)
   3bcf0:	4631      	mov	r1, r6
   3bcf2:	4628      	mov	r0, r5
   3bcf4:	47b8      	blx	r7
   3bcf6:	3001      	adds	r0, #1
   3bcf8:	f43f af1e 	beq.w	3bb38 <_printf_float+0xbc>
   3bcfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3bd00:	4313      	orrs	r3, r2
   3bd02:	d102      	bne.n	3bd0a <_printf_float+0x28e>
   3bd04:	6823      	ldr	r3, [r4, #0]
   3bd06:	07d9      	lsls	r1, r3, #31
   3bd08:	d5d8      	bpl.n	3bcbc <_printf_float+0x240>
   3bd0a:	4631      	mov	r1, r6
   3bd0c:	4628      	mov	r0, r5
   3bd0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3bd12:	47b8      	blx	r7
   3bd14:	3001      	adds	r0, #1
   3bd16:	f43f af0f 	beq.w	3bb38 <_printf_float+0xbc>
   3bd1a:	f04f 0900 	mov.w	r9, #0
   3bd1e:	f104 0a1a 	add.w	sl, r4, #26
   3bd22:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3bd24:	425b      	negs	r3, r3
   3bd26:	454b      	cmp	r3, r9
   3bd28:	dc01      	bgt.n	3bd2e <_printf_float+0x2b2>
   3bd2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3bd2c:	e794      	b.n	3bc58 <_printf_float+0x1dc>
   3bd2e:	2301      	movs	r3, #1
   3bd30:	4652      	mov	r2, sl
   3bd32:	4631      	mov	r1, r6
   3bd34:	4628      	mov	r0, r5
   3bd36:	47b8      	blx	r7
   3bd38:	3001      	adds	r0, #1
   3bd3a:	f43f aefd 	beq.w	3bb38 <_printf_float+0xbc>
   3bd3e:	f109 0901 	add.w	r9, r9, #1
   3bd42:	e7ee      	b.n	3bd22 <_printf_float+0x2a6>
   3bd44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3bd46:	6da3      	ldr	r3, [r4, #88]	; 0x58
   3bd48:	429a      	cmp	r2, r3
   3bd4a:	bfa8      	it	ge
   3bd4c:	461a      	movge	r2, r3
   3bd4e:	2a00      	cmp	r2, #0
   3bd50:	4691      	mov	r9, r2
   3bd52:	dd07      	ble.n	3bd64 <_printf_float+0x2e8>
   3bd54:	4613      	mov	r3, r2
   3bd56:	4631      	mov	r1, r6
   3bd58:	4642      	mov	r2, r8
   3bd5a:	4628      	mov	r0, r5
   3bd5c:	47b8      	blx	r7
   3bd5e:	3001      	adds	r0, #1
   3bd60:	f43f aeea 	beq.w	3bb38 <_printf_float+0xbc>
   3bd64:	f104 031a 	add.w	r3, r4, #26
   3bd68:	f04f 0b00 	mov.w	fp, #0
   3bd6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3bd70:	9304      	str	r3, [sp, #16]
   3bd72:	e015      	b.n	3bda0 <_printf_float+0x324>
   3bd74:	7fefffff 	.word	0x7fefffff
   3bd78:	00049251 	.word	0x00049251
   3bd7c:	00044027 	.word	0x00044027
   3bd80:	00049255 	.word	0x00049255
   3bd84:	00049259 	.word	0x00049259
   3bd88:	00048cfb 	.word	0x00048cfb
   3bd8c:	2301      	movs	r3, #1
   3bd8e:	9a04      	ldr	r2, [sp, #16]
   3bd90:	4631      	mov	r1, r6
   3bd92:	4628      	mov	r0, r5
   3bd94:	47b8      	blx	r7
   3bd96:	3001      	adds	r0, #1
   3bd98:	f43f aece 	beq.w	3bb38 <_printf_float+0xbc>
   3bd9c:	f10b 0b01 	add.w	fp, fp, #1
   3bda0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   3bda4:	ebaa 0309 	sub.w	r3, sl, r9
   3bda8:	455b      	cmp	r3, fp
   3bdaa:	dcef      	bgt.n	3bd8c <_printf_float+0x310>
   3bdac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3bdb0:	429a      	cmp	r2, r3
   3bdb2:	db1b      	blt.n	3bdec <_printf_float+0x370>
   3bdb4:	6823      	ldr	r3, [r4, #0]
   3bdb6:	07da      	lsls	r2, r3, #31
   3bdb8:	d418      	bmi.n	3bdec <_printf_float+0x370>
   3bdba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3bdbe:	4592      	cmp	sl, r2
   3bdc0:	db1c      	blt.n	3bdfc <_printf_float+0x380>
   3bdc2:	eba3 090a 	sub.w	r9, r3, sl
   3bdc6:	f1b9 0f00 	cmp.w	r9, #0
   3bdca:	dd08      	ble.n	3bdde <_printf_float+0x362>
   3bdcc:	464b      	mov	r3, r9
   3bdce:	eb08 020a 	add.w	r2, r8, sl
   3bdd2:	4631      	mov	r1, r6
   3bdd4:	4628      	mov	r0, r5
   3bdd6:	47b8      	blx	r7
   3bdd8:	3001      	adds	r0, #1
   3bdda:	f43f aead 	beq.w	3bb38 <_printf_float+0xbc>
   3bdde:	f04f 0800 	mov.w	r8, #0
   3bde2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3bde6:	f104 0a1a 	add.w	sl, r4, #26
   3bdea:	e014      	b.n	3be16 <_printf_float+0x39a>
   3bdec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3bdf0:	4631      	mov	r1, r6
   3bdf2:	4628      	mov	r0, r5
   3bdf4:	47b8      	blx	r7
   3bdf6:	3001      	adds	r0, #1
   3bdf8:	d1df      	bne.n	3bdba <_printf_float+0x33e>
   3bdfa:	e69d      	b.n	3bb38 <_printf_float+0xbc>
   3bdfc:	eba3 0902 	sub.w	r9, r3, r2
   3be00:	e7e1      	b.n	3bdc6 <_printf_float+0x34a>
   3be02:	2301      	movs	r3, #1
   3be04:	4652      	mov	r2, sl
   3be06:	4631      	mov	r1, r6
   3be08:	4628      	mov	r0, r5
   3be0a:	47b8      	blx	r7
   3be0c:	3001      	adds	r0, #1
   3be0e:	f43f ae93 	beq.w	3bb38 <_printf_float+0xbc>
   3be12:	f108 0801 	add.w	r8, r8, #1
   3be16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3be1a:	1a9b      	subs	r3, r3, r2
   3be1c:	eba3 0309 	sub.w	r3, r3, r9
   3be20:	4543      	cmp	r3, r8
   3be22:	dcee      	bgt.n	3be02 <_printf_float+0x386>
   3be24:	e74a      	b.n	3bcbc <_printf_float+0x240>
   3be26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3be28:	2a01      	cmp	r2, #1
   3be2a:	dc01      	bgt.n	3be30 <_printf_float+0x3b4>
   3be2c:	07db      	lsls	r3, r3, #31
   3be2e:	d537      	bpl.n	3bea0 <_printf_float+0x424>
   3be30:	2301      	movs	r3, #1
   3be32:	4642      	mov	r2, r8
   3be34:	4631      	mov	r1, r6
   3be36:	4628      	mov	r0, r5
   3be38:	47b8      	blx	r7
   3be3a:	3001      	adds	r0, #1
   3be3c:	f43f ae7c 	beq.w	3bb38 <_printf_float+0xbc>
   3be40:	4631      	mov	r1, r6
   3be42:	4628      	mov	r0, r5
   3be44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3be48:	47b8      	blx	r7
   3be4a:	3001      	adds	r0, #1
   3be4c:	f43f ae74 	beq.w	3bb38 <_printf_float+0xbc>
   3be50:	2200      	movs	r2, #0
   3be52:	2300      	movs	r3, #0
   3be54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3be58:	f7e0 ff16 	bl	1cc88 <__aeabi_dcmpeq>
   3be5c:	b9d8      	cbnz	r0, 3be96 <_printf_float+0x41a>
   3be5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3be60:	f108 0201 	add.w	r2, r8, #1
   3be64:	3b01      	subs	r3, #1
   3be66:	4631      	mov	r1, r6
   3be68:	4628      	mov	r0, r5
   3be6a:	47b8      	blx	r7
   3be6c:	3001      	adds	r0, #1
   3be6e:	d10e      	bne.n	3be8e <_printf_float+0x412>
   3be70:	e662      	b.n	3bb38 <_printf_float+0xbc>
   3be72:	2301      	movs	r3, #1
   3be74:	4652      	mov	r2, sl
   3be76:	4631      	mov	r1, r6
   3be78:	4628      	mov	r0, r5
   3be7a:	47b8      	blx	r7
   3be7c:	3001      	adds	r0, #1
   3be7e:	f43f ae5b 	beq.w	3bb38 <_printf_float+0xbc>
   3be82:	f108 0801 	add.w	r8, r8, #1
   3be86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3be88:	3b01      	subs	r3, #1
   3be8a:	4543      	cmp	r3, r8
   3be8c:	dcf1      	bgt.n	3be72 <_printf_float+0x3f6>
   3be8e:	464b      	mov	r3, r9
   3be90:	f104 0250 	add.w	r2, r4, #80	; 0x50
   3be94:	e6e1      	b.n	3bc5a <_printf_float+0x1de>
   3be96:	f04f 0800 	mov.w	r8, #0
   3be9a:	f104 0a1a 	add.w	sl, r4, #26
   3be9e:	e7f2      	b.n	3be86 <_printf_float+0x40a>
   3bea0:	2301      	movs	r3, #1
   3bea2:	4642      	mov	r2, r8
   3bea4:	e7df      	b.n	3be66 <_printf_float+0x3ea>
   3bea6:	2301      	movs	r3, #1
   3bea8:	464a      	mov	r2, r9
   3beaa:	4631      	mov	r1, r6
   3beac:	4628      	mov	r0, r5
   3beae:	47b8      	blx	r7
   3beb0:	3001      	adds	r0, #1
   3beb2:	f43f ae41 	beq.w	3bb38 <_printf_float+0xbc>
   3beb6:	f108 0801 	add.w	r8, r8, #1
   3beba:	68e3      	ldr	r3, [r4, #12]
   3bebc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3bebe:	1a9b      	subs	r3, r3, r2
   3bec0:	4543      	cmp	r3, r8
   3bec2:	dcf0      	bgt.n	3bea6 <_printf_float+0x42a>
   3bec4:	e6fe      	b.n	3bcc4 <_printf_float+0x248>
   3bec6:	f04f 0800 	mov.w	r8, #0
   3beca:	f104 0919 	add.w	r9, r4, #25
   3bece:	e7f4      	b.n	3beba <_printf_float+0x43e>

0003bed0 <_printf_i>:
   3bed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3bed4:	4606      	mov	r6, r0
   3bed6:	460c      	mov	r4, r1
   3bed8:	f101 0043 	add.w	r0, r1, #67	; 0x43
   3bedc:	7e09      	ldrb	r1, [r1, #24]
   3bede:	b085      	sub	sp, #20
   3bee0:	4698      	mov	r8, r3
   3bee2:	296e      	cmp	r1, #110	; 0x6e
   3bee4:	4617      	mov	r7, r2
   3bee6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3bee8:	f000 80ba 	beq.w	3c060 <_printf_i+0x190>
   3beec:	d824      	bhi.n	3bf38 <_printf_i+0x68>
   3beee:	2963      	cmp	r1, #99	; 0x63
   3bef0:	d039      	beq.n	3bf66 <_printf_i+0x96>
   3bef2:	d80a      	bhi.n	3bf0a <_printf_i+0x3a>
   3bef4:	2900      	cmp	r1, #0
   3bef6:	f000 80c3 	beq.w	3c080 <_printf_i+0x1b0>
   3befa:	2958      	cmp	r1, #88	; 0x58
   3befc:	f000 8091 	beq.w	3c022 <_printf_i+0x152>
   3bf00:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3bf04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
   3bf08:	e035      	b.n	3bf76 <_printf_i+0xa6>
   3bf0a:	2964      	cmp	r1, #100	; 0x64
   3bf0c:	d001      	beq.n	3bf12 <_printf_i+0x42>
   3bf0e:	2969      	cmp	r1, #105	; 0x69
   3bf10:	d1f6      	bne.n	3bf00 <_printf_i+0x30>
   3bf12:	6825      	ldr	r5, [r4, #0]
   3bf14:	681a      	ldr	r2, [r3, #0]
   3bf16:	f015 0f80 	tst.w	r5, #128	; 0x80
   3bf1a:	f102 0104 	add.w	r1, r2, #4
   3bf1e:	d02c      	beq.n	3bf7a <_printf_i+0xaa>
   3bf20:	6812      	ldr	r2, [r2, #0]
   3bf22:	6019      	str	r1, [r3, #0]
   3bf24:	2a00      	cmp	r2, #0
   3bf26:	da03      	bge.n	3bf30 <_printf_i+0x60>
   3bf28:	232d      	movs	r3, #45	; 0x2d
   3bf2a:	4252      	negs	r2, r2
   3bf2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3bf30:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 3c0f0 <_printf_i+0x220>
   3bf34:	230a      	movs	r3, #10
   3bf36:	e03f      	b.n	3bfb8 <_printf_i+0xe8>
   3bf38:	2973      	cmp	r1, #115	; 0x73
   3bf3a:	f000 80a5 	beq.w	3c088 <_printf_i+0x1b8>
   3bf3e:	d808      	bhi.n	3bf52 <_printf_i+0x82>
   3bf40:	296f      	cmp	r1, #111	; 0x6f
   3bf42:	d021      	beq.n	3bf88 <_printf_i+0xb8>
   3bf44:	2970      	cmp	r1, #112	; 0x70
   3bf46:	d1db      	bne.n	3bf00 <_printf_i+0x30>
   3bf48:	6822      	ldr	r2, [r4, #0]
   3bf4a:	f042 0220 	orr.w	r2, r2, #32
   3bf4e:	6022      	str	r2, [r4, #0]
   3bf50:	e003      	b.n	3bf5a <_printf_i+0x8a>
   3bf52:	2975      	cmp	r1, #117	; 0x75
   3bf54:	d018      	beq.n	3bf88 <_printf_i+0xb8>
   3bf56:	2978      	cmp	r1, #120	; 0x78
   3bf58:	d1d2      	bne.n	3bf00 <_printf_i+0x30>
   3bf5a:	2278      	movs	r2, #120	; 0x78
   3bf5c:	f8df c194 	ldr.w	ip, [pc, #404]	; 3c0f4 <_printf_i+0x224>
   3bf60:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
   3bf64:	e061      	b.n	3c02a <_printf_i+0x15a>
   3bf66:	681a      	ldr	r2, [r3, #0]
   3bf68:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3bf6c:	1d11      	adds	r1, r2, #4
   3bf6e:	6019      	str	r1, [r3, #0]
   3bf70:	6813      	ldr	r3, [r2, #0]
   3bf72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   3bf76:	2301      	movs	r3, #1
   3bf78:	e093      	b.n	3c0a2 <_printf_i+0x1d2>
   3bf7a:	6812      	ldr	r2, [r2, #0]
   3bf7c:	f015 0f40 	tst.w	r5, #64	; 0x40
   3bf80:	6019      	str	r1, [r3, #0]
   3bf82:	bf18      	it	ne
   3bf84:	b212      	sxthne	r2, r2
   3bf86:	e7cd      	b.n	3bf24 <_printf_i+0x54>
   3bf88:	f8d4 c000 	ldr.w	ip, [r4]
   3bf8c:	681a      	ldr	r2, [r3, #0]
   3bf8e:	f01c 0f80 	tst.w	ip, #128	; 0x80
   3bf92:	f102 0504 	add.w	r5, r2, #4
   3bf96:	601d      	str	r5, [r3, #0]
   3bf98:	d001      	beq.n	3bf9e <_printf_i+0xce>
   3bf9a:	6812      	ldr	r2, [r2, #0]
   3bf9c:	e003      	b.n	3bfa6 <_printf_i+0xd6>
   3bf9e:	f01c 0f40 	tst.w	ip, #64	; 0x40
   3bfa2:	d0fa      	beq.n	3bf9a <_printf_i+0xca>
   3bfa4:	8812      	ldrh	r2, [r2, #0]
   3bfa6:	296f      	cmp	r1, #111	; 0x6f
   3bfa8:	f8df c144 	ldr.w	ip, [pc, #324]	; 3c0f0 <_printf_i+0x220>
   3bfac:	bf0c      	ite	eq
   3bfae:	2308      	moveq	r3, #8
   3bfb0:	230a      	movne	r3, #10
   3bfb2:	2100      	movs	r1, #0
   3bfb4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   3bfb8:	6865      	ldr	r5, [r4, #4]
   3bfba:	2d00      	cmp	r5, #0
   3bfbc:	60a5      	str	r5, [r4, #8]
   3bfbe:	bfa2      	ittt	ge
   3bfc0:	6821      	ldrge	r1, [r4, #0]
   3bfc2:	f021 0104 	bicge.w	r1, r1, #4
   3bfc6:	6021      	strge	r1, [r4, #0]
   3bfc8:	b90a      	cbnz	r2, 3bfce <_printf_i+0xfe>
   3bfca:	2d00      	cmp	r5, #0
   3bfcc:	d046      	beq.n	3c05c <_printf_i+0x18c>
   3bfce:	4605      	mov	r5, r0
   3bfd0:	4293      	cmp	r3, r2
   3bfd2:	fbb2 f1f3 	udiv	r1, r2, r3
   3bfd6:	fb03 2e11 	mls	lr, r3, r1, r2
   3bfda:	f81c e00e 	ldrb.w	lr, [ip, lr]
   3bfde:	f805 ed01 	strb.w	lr, [r5, #-1]!
   3bfe2:	d939      	bls.n	3c058 <_printf_i+0x188>
   3bfe4:	2b08      	cmp	r3, #8
   3bfe6:	d10b      	bne.n	3c000 <_printf_i+0x130>
   3bfe8:	6823      	ldr	r3, [r4, #0]
   3bfea:	07da      	lsls	r2, r3, #31
   3bfec:	d508      	bpl.n	3c000 <_printf_i+0x130>
   3bfee:	6923      	ldr	r3, [r4, #16]
   3bff0:	6862      	ldr	r2, [r4, #4]
   3bff2:	429a      	cmp	r2, r3
   3bff4:	bfde      	ittt	le
   3bff6:	2330      	movle	r3, #48	; 0x30
   3bff8:	f805 3c01 	strble.w	r3, [r5, #-1]
   3bffc:	f105 35ff 	addle.w	r5, r5, #4294967295
   3c000:	1b40      	subs	r0, r0, r5
   3c002:	6120      	str	r0, [r4, #16]
   3c004:	f8cd 8000 	str.w	r8, [sp]
   3c008:	463b      	mov	r3, r7
   3c00a:	aa03      	add	r2, sp, #12
   3c00c:	4621      	mov	r1, r4
   3c00e:	4630      	mov	r0, r6
   3c010:	f004 fbe5 	bl	407de <_printf_common>
   3c014:	3001      	adds	r0, #1
   3c016:	d149      	bne.n	3c0ac <_printf_i+0x1dc>
   3c018:	f04f 30ff 	mov.w	r0, #4294967295
   3c01c:	b005      	add	sp, #20
   3c01e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3c022:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 3c0f0 <_printf_i+0x220>
   3c026:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
   3c02a:	681d      	ldr	r5, [r3, #0]
   3c02c:	6821      	ldr	r1, [r4, #0]
   3c02e:	f855 2b04 	ldr.w	r2, [r5], #4
   3c032:	601d      	str	r5, [r3, #0]
   3c034:	060d      	lsls	r5, r1, #24
   3c036:	d50b      	bpl.n	3c050 <_printf_i+0x180>
   3c038:	07cd      	lsls	r5, r1, #31
   3c03a:	bf44      	itt	mi
   3c03c:	f041 0120 	orrmi.w	r1, r1, #32
   3c040:	6021      	strmi	r1, [r4, #0]
   3c042:	b91a      	cbnz	r2, 3c04c <_printf_i+0x17c>
   3c044:	6823      	ldr	r3, [r4, #0]
   3c046:	f023 0320 	bic.w	r3, r3, #32
   3c04a:	6023      	str	r3, [r4, #0]
   3c04c:	2310      	movs	r3, #16
   3c04e:	e7b0      	b.n	3bfb2 <_printf_i+0xe2>
   3c050:	064b      	lsls	r3, r1, #25
   3c052:	bf48      	it	mi
   3c054:	b292      	uxthmi	r2, r2
   3c056:	e7ef      	b.n	3c038 <_printf_i+0x168>
   3c058:	460a      	mov	r2, r1
   3c05a:	e7b9      	b.n	3bfd0 <_printf_i+0x100>
   3c05c:	4605      	mov	r5, r0
   3c05e:	e7c1      	b.n	3bfe4 <_printf_i+0x114>
   3c060:	681a      	ldr	r2, [r3, #0]
   3c062:	f8d4 c000 	ldr.w	ip, [r4]
   3c066:	1d15      	adds	r5, r2, #4
   3c068:	6961      	ldr	r1, [r4, #20]
   3c06a:	f01c 0f80 	tst.w	ip, #128	; 0x80
   3c06e:	601d      	str	r5, [r3, #0]
   3c070:	6813      	ldr	r3, [r2, #0]
   3c072:	d001      	beq.n	3c078 <_printf_i+0x1a8>
   3c074:	6019      	str	r1, [r3, #0]
   3c076:	e003      	b.n	3c080 <_printf_i+0x1b0>
   3c078:	f01c 0f40 	tst.w	ip, #64	; 0x40
   3c07c:	d0fa      	beq.n	3c074 <_printf_i+0x1a4>
   3c07e:	8019      	strh	r1, [r3, #0]
   3c080:	2300      	movs	r3, #0
   3c082:	4605      	mov	r5, r0
   3c084:	6123      	str	r3, [r4, #16]
   3c086:	e7bd      	b.n	3c004 <_printf_i+0x134>
   3c088:	681a      	ldr	r2, [r3, #0]
   3c08a:	1d11      	adds	r1, r2, #4
   3c08c:	6019      	str	r1, [r3, #0]
   3c08e:	2100      	movs	r1, #0
   3c090:	6815      	ldr	r5, [r2, #0]
   3c092:	6862      	ldr	r2, [r4, #4]
   3c094:	4628      	mov	r0, r5
   3c096:	f004 faa5 	bl	405e4 <memchr>
   3c09a:	b108      	cbz	r0, 3c0a0 <_printf_i+0x1d0>
   3c09c:	1b40      	subs	r0, r0, r5
   3c09e:	6060      	str	r0, [r4, #4]
   3c0a0:	6863      	ldr	r3, [r4, #4]
   3c0a2:	6123      	str	r3, [r4, #16]
   3c0a4:	2300      	movs	r3, #0
   3c0a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3c0aa:	e7ab      	b.n	3c004 <_printf_i+0x134>
   3c0ac:	6923      	ldr	r3, [r4, #16]
   3c0ae:	462a      	mov	r2, r5
   3c0b0:	4639      	mov	r1, r7
   3c0b2:	4630      	mov	r0, r6
   3c0b4:	47c0      	blx	r8
   3c0b6:	3001      	adds	r0, #1
   3c0b8:	d0ae      	beq.n	3c018 <_printf_i+0x148>
   3c0ba:	6823      	ldr	r3, [r4, #0]
   3c0bc:	079b      	lsls	r3, r3, #30
   3c0be:	d413      	bmi.n	3c0e8 <_printf_i+0x218>
   3c0c0:	68e0      	ldr	r0, [r4, #12]
   3c0c2:	9b03      	ldr	r3, [sp, #12]
   3c0c4:	4298      	cmp	r0, r3
   3c0c6:	bfb8      	it	lt
   3c0c8:	4618      	movlt	r0, r3
   3c0ca:	e7a7      	b.n	3c01c <_printf_i+0x14c>
   3c0cc:	2301      	movs	r3, #1
   3c0ce:	464a      	mov	r2, r9
   3c0d0:	4639      	mov	r1, r7
   3c0d2:	4630      	mov	r0, r6
   3c0d4:	47c0      	blx	r8
   3c0d6:	3001      	adds	r0, #1
   3c0d8:	d09e      	beq.n	3c018 <_printf_i+0x148>
   3c0da:	3501      	adds	r5, #1
   3c0dc:	68e3      	ldr	r3, [r4, #12]
   3c0de:	9a03      	ldr	r2, [sp, #12]
   3c0e0:	1a9b      	subs	r3, r3, r2
   3c0e2:	42ab      	cmp	r3, r5
   3c0e4:	dcf2      	bgt.n	3c0cc <_printf_i+0x1fc>
   3c0e6:	e7eb      	b.n	3c0c0 <_printf_i+0x1f0>
   3c0e8:	2500      	movs	r5, #0
   3c0ea:	f104 0919 	add.w	r9, r4, #25
   3c0ee:	e7f5      	b.n	3c0dc <_printf_i+0x20c>
   3c0f0:	0004925d 	.word	0x0004925d
   3c0f4:	0004926e 	.word	0x0004926e

0003c0f8 <srand>:
   3c0f8:	b538      	push	{r3, r4, r5, lr}
   3c0fa:	4b0d      	ldr	r3, [pc, #52]	; (3c130 <srand+0x38>)
   3c0fc:	4605      	mov	r5, r0
   3c0fe:	681c      	ldr	r4, [r3, #0]
   3c100:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3c102:	b97b      	cbnz	r3, 3c124 <srand+0x2c>
   3c104:	2018      	movs	r0, #24
   3c106:	f7ff fad9 	bl	3b6bc <malloc>
   3c10a:	4a0a      	ldr	r2, [pc, #40]	; (3c134 <srand+0x3c>)
   3c10c:	4b0a      	ldr	r3, [pc, #40]	; (3c138 <srand+0x40>)
   3c10e:	63a0      	str	r0, [r4, #56]	; 0x38
   3c110:	e9c0 2300 	strd	r2, r3, [r0]
   3c114:	4b09      	ldr	r3, [pc, #36]	; (3c13c <srand+0x44>)
   3c116:	2201      	movs	r2, #1
   3c118:	6083      	str	r3, [r0, #8]
   3c11a:	230b      	movs	r3, #11
   3c11c:	8183      	strh	r3, [r0, #12]
   3c11e:	2300      	movs	r3, #0
   3c120:	e9c0 2304 	strd	r2, r3, [r0, #16]
   3c124:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3c126:	2200      	movs	r2, #0
   3c128:	611d      	str	r5, [r3, #16]
   3c12a:	615a      	str	r2, [r3, #20]
   3c12c:	bd38      	pop	{r3, r4, r5, pc}
   3c12e:	bf00      	nop
   3c130:	20032100 	.word	0x20032100
   3c134:	abcd330e 	.word	0xabcd330e
   3c138:	e66d1234 	.word	0xe66d1234
   3c13c:	0005deec 	.word	0x0005deec

0003c140 <rand>:
   3c140:	4b13      	ldr	r3, [pc, #76]	; (3c190 <rand+0x50>)
   3c142:	b510      	push	{r4, lr}
   3c144:	681c      	ldr	r4, [r3, #0]
   3c146:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3c148:	b97b      	cbnz	r3, 3c16a <rand+0x2a>
   3c14a:	2018      	movs	r0, #24
   3c14c:	f7ff fab6 	bl	3b6bc <malloc>
   3c150:	4a10      	ldr	r2, [pc, #64]	; (3c194 <rand+0x54>)
   3c152:	4b11      	ldr	r3, [pc, #68]	; (3c198 <rand+0x58>)
   3c154:	63a0      	str	r0, [r4, #56]	; 0x38
   3c156:	e9c0 2300 	strd	r2, r3, [r0]
   3c15a:	4b10      	ldr	r3, [pc, #64]	; (3c19c <rand+0x5c>)
   3c15c:	2201      	movs	r2, #1
   3c15e:	6083      	str	r3, [r0, #8]
   3c160:	230b      	movs	r3, #11
   3c162:	8183      	strh	r3, [r0, #12]
   3c164:	2300      	movs	r3, #0
   3c166:	e9c0 2304 	strd	r2, r3, [r0, #16]
   3c16a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   3c16c:	480c      	ldr	r0, [pc, #48]	; (3c1a0 <rand+0x60>)
   3c16e:	690a      	ldr	r2, [r1, #16]
   3c170:	694b      	ldr	r3, [r1, #20]
   3c172:	4c0c      	ldr	r4, [pc, #48]	; (3c1a4 <rand+0x64>)
   3c174:	4350      	muls	r0, r2
   3c176:	fb04 0003 	mla	r0, r4, r3, r0
   3c17a:	fba2 3404 	umull	r3, r4, r2, r4
   3c17e:	1c5a      	adds	r2, r3, #1
   3c180:	4404      	add	r4, r0
   3c182:	f144 0000 	adc.w	r0, r4, #0
   3c186:	e9c1 2004 	strd	r2, r0, [r1, #16]
   3c18a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   3c18e:	bd10      	pop	{r4, pc}
   3c190:	20032100 	.word	0x20032100
   3c194:	abcd330e 	.word	0xabcd330e
   3c198:	e66d1234 	.word	0xe66d1234
   3c19c:	0005deec 	.word	0x0005deec
   3c1a0:	5851f42d 	.word	0x5851f42d
   3c1a4:	4c957f2d 	.word	0x4c957f2d

0003c1a8 <realloc>:
   3c1a8:	4b02      	ldr	r3, [pc, #8]	; (3c1b4 <realloc+0xc>)
   3c1aa:	460a      	mov	r2, r1
   3c1ac:	4601      	mov	r1, r0
   3c1ae:	6818      	ldr	r0, [r3, #0]
   3c1b0:	f005 ba27 	b.w	41602 <_realloc_r>
   3c1b4:	20032100 	.word	0x20032100

0003c1b8 <_sbrk_r>:
   3c1b8:	b538      	push	{r3, r4, r5, lr}
   3c1ba:	2300      	movs	r3, #0
   3c1bc:	4c05      	ldr	r4, [pc, #20]	; (3c1d4 <_sbrk_r+0x1c>)
   3c1be:	4605      	mov	r5, r0
   3c1c0:	4608      	mov	r0, r1
   3c1c2:	6023      	str	r3, [r4, #0]
   3c1c4:	f7e9 f860 	bl	25288 <_sbrk>
   3c1c8:	1c43      	adds	r3, r0, #1
   3c1ca:	d102      	bne.n	3c1d2 <_sbrk_r+0x1a>
   3c1cc:	6823      	ldr	r3, [r4, #0]
   3c1ce:	b103      	cbz	r3, 3c1d2 <_sbrk_r+0x1a>
   3c1d0:	602b      	str	r3, [r5, #0]
   3c1d2:	bd38      	pop	{r3, r4, r5, pc}
   3c1d4:	2002be8c 	.word	0x2002be8c

0003c1d8 <sniprintf>:
   3c1d8:	b40c      	push	{r2, r3}
   3c1da:	4b18      	ldr	r3, [pc, #96]	; (3c23c <sniprintf+0x64>)
   3c1dc:	b530      	push	{r4, r5, lr}
   3c1de:	1e0c      	subs	r4, r1, #0
   3c1e0:	b09d      	sub	sp, #116	; 0x74
   3c1e2:	681d      	ldr	r5, [r3, #0]
   3c1e4:	da08      	bge.n	3c1f8 <sniprintf+0x20>
   3c1e6:	238b      	movs	r3, #139	; 0x8b
   3c1e8:	f04f 30ff 	mov.w	r0, #4294967295
   3c1ec:	602b      	str	r3, [r5, #0]
   3c1ee:	b01d      	add	sp, #116	; 0x74
   3c1f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3c1f4:	b002      	add	sp, #8
   3c1f6:	4770      	bx	lr
   3c1f8:	f44f 7302 	mov.w	r3, #520	; 0x208
   3c1fc:	9002      	str	r0, [sp, #8]
   3c1fe:	9006      	str	r0, [sp, #24]
   3c200:	a902      	add	r1, sp, #8
   3c202:	f8ad 3014 	strh.w	r3, [sp, #20]
   3c206:	bf14      	ite	ne
   3c208:	f104 33ff 	addne.w	r3, r4, #4294967295
   3c20c:	4623      	moveq	r3, r4
   3c20e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   3c210:	4628      	mov	r0, r5
   3c212:	9304      	str	r3, [sp, #16]
   3c214:	9307      	str	r3, [sp, #28]
   3c216:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3c21a:	f8ad 3016 	strh.w	r3, [sp, #22]
   3c21e:	ab21      	add	r3, sp, #132	; 0x84
   3c220:	9301      	str	r3, [sp, #4]
   3c222:	f000 ff3d 	bl	3d0a0 <_svfiprintf_r>
   3c226:	1c43      	adds	r3, r0, #1
   3c228:	bfbc      	itt	lt
   3c22a:	238b      	movlt	r3, #139	; 0x8b
   3c22c:	602b      	strlt	r3, [r5, #0]
   3c22e:	2c00      	cmp	r4, #0
   3c230:	d0dd      	beq.n	3c1ee <sniprintf+0x16>
   3c232:	9b02      	ldr	r3, [sp, #8]
   3c234:	2200      	movs	r2, #0
   3c236:	701a      	strb	r2, [r3, #0]
   3c238:	e7d9      	b.n	3c1ee <sniprintf+0x16>
   3c23a:	bf00      	nop
   3c23c:	20032100 	.word	0x20032100

0003c240 <siscanf>:
   3c240:	b40e      	push	{r1, r2, r3}
   3c242:	b530      	push	{r4, r5, lr}
   3c244:	b09c      	sub	sp, #112	; 0x70
   3c246:	f44f 7201 	mov.w	r2, #516	; 0x204
   3c24a:	ac1f      	add	r4, sp, #124	; 0x7c
   3c24c:	f8ad 2014 	strh.w	r2, [sp, #20]
   3c250:	9002      	str	r0, [sp, #8]
   3c252:	f854 5b04 	ldr.w	r5, [r4], #4
   3c256:	9006      	str	r0, [sp, #24]
   3c258:	f7e0 ff64 	bl	1d124 <strlen>
   3c25c:	4b0b      	ldr	r3, [pc, #44]	; (3c28c <siscanf+0x4c>)
   3c25e:	462a      	mov	r2, r5
   3c260:	9003      	str	r0, [sp, #12]
   3c262:	a902      	add	r1, sp, #8
   3c264:	930b      	str	r3, [sp, #44]	; 0x2c
   3c266:	2300      	movs	r3, #0
   3c268:	9007      	str	r0, [sp, #28]
   3c26a:	930f      	str	r3, [sp, #60]	; 0x3c
   3c26c:	9314      	str	r3, [sp, #80]	; 0x50
   3c26e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3c272:	4807      	ldr	r0, [pc, #28]	; (3c290 <siscanf+0x50>)
   3c274:	f8ad 3016 	strh.w	r3, [sp, #22]
   3c278:	4623      	mov	r3, r4
   3c27a:	6800      	ldr	r0, [r0, #0]
   3c27c:	9401      	str	r4, [sp, #4]
   3c27e:	f001 f807 	bl	3d290 <__ssvfiscanf_r>
   3c282:	b01c      	add	sp, #112	; 0x70
   3c284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3c288:	b003      	add	sp, #12
   3c28a:	4770      	bx	lr
   3c28c:	00040925 	.word	0x00040925
   3c290:	20032100 	.word	0x20032100

0003c294 <strtod>:
   3c294:	460a      	mov	r2, r1
   3c296:	4601      	mov	r1, r0
   3c298:	4802      	ldr	r0, [pc, #8]	; (3c2a4 <strtod+0x10>)
   3c29a:	4b03      	ldr	r3, [pc, #12]	; (3c2a8 <strtod+0x14>)
   3c29c:	6800      	ldr	r0, [r0, #0]
   3c29e:	f7e2 bd83 	b.w	1eda8 <_strtod_l>
   3c2a2:	bf00      	nop
   3c2a4:	20032100 	.word	0x20032100
   3c2a8:	20032164 	.word	0x20032164

0003c2ac <_strtol_l.isra.0>:
   3c2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3c2b0:	4686      	mov	lr, r0
   3c2b2:	4f39      	ldr	r7, [pc, #228]	; (3c398 <_strtol_l.isra.0+0xec>)
   3c2b4:	4608      	mov	r0, r1
   3c2b6:	4605      	mov	r5, r0
   3c2b8:	f815 4b01 	ldrb.w	r4, [r5], #1
   3c2bc:	5de6      	ldrb	r6, [r4, r7]
   3c2be:	f016 0608 	ands.w	r6, r6, #8
   3c2c2:	d135      	bne.n	3c330 <_strtol_l.isra.0+0x84>
   3c2c4:	2c2d      	cmp	r4, #45	; 0x2d
   3c2c6:	d135      	bne.n	3c334 <_strtol_l.isra.0+0x88>
   3c2c8:	782c      	ldrb	r4, [r5, #0]
   3c2ca:	f04f 0801 	mov.w	r8, #1
   3c2ce:	1c85      	adds	r5, r0, #2
   3c2d0:	2b00      	cmp	r3, #0
   3c2d2:	d05c      	beq.n	3c38e <_strtol_l.isra.0+0xe2>
   3c2d4:	2b10      	cmp	r3, #16
   3c2d6:	d109      	bne.n	3c2ec <_strtol_l.isra.0+0x40>
   3c2d8:	2c30      	cmp	r4, #48	; 0x30
   3c2da:	d107      	bne.n	3c2ec <_strtol_l.isra.0+0x40>
   3c2dc:	7828      	ldrb	r0, [r5, #0]
   3c2de:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3c2e2:	2858      	cmp	r0, #88	; 0x58
   3c2e4:	d14e      	bne.n	3c384 <_strtol_l.isra.0+0xd8>
   3c2e6:	786c      	ldrb	r4, [r5, #1]
   3c2e8:	2310      	movs	r3, #16
   3c2ea:	3502      	adds	r5, #2
   3c2ec:	f1b8 0f00 	cmp.w	r8, #0
   3c2f0:	f04f 0700 	mov.w	r7, #0
   3c2f4:	bf14      	ite	ne
   3c2f6:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   3c2fa:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   3c2fe:	4638      	mov	r0, r7
   3c300:	fbbc f9f3 	udiv	r9, ip, r3
   3c304:	fb03 ca19 	mls	sl, r3, r9, ip
   3c308:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   3c30c:	2e09      	cmp	r6, #9
   3c30e:	d817      	bhi.n	3c340 <_strtol_l.isra.0+0x94>
   3c310:	4634      	mov	r4, r6
   3c312:	42a3      	cmp	r3, r4
   3c314:	dd23      	ble.n	3c35e <_strtol_l.isra.0+0xb2>
   3c316:	1c7e      	adds	r6, r7, #1
   3c318:	d007      	beq.n	3c32a <_strtol_l.isra.0+0x7e>
   3c31a:	4581      	cmp	r9, r0
   3c31c:	d31c      	bcc.n	3c358 <_strtol_l.isra.0+0xac>
   3c31e:	d101      	bne.n	3c324 <_strtol_l.isra.0+0x78>
   3c320:	45a2      	cmp	sl, r4
   3c322:	db19      	blt.n	3c358 <_strtol_l.isra.0+0xac>
   3c324:	fb00 4003 	mla	r0, r0, r3, r4
   3c328:	2701      	movs	r7, #1
   3c32a:	f815 4b01 	ldrb.w	r4, [r5], #1
   3c32e:	e7eb      	b.n	3c308 <_strtol_l.isra.0+0x5c>
   3c330:	4628      	mov	r0, r5
   3c332:	e7c0      	b.n	3c2b6 <_strtol_l.isra.0+0xa>
   3c334:	2c2b      	cmp	r4, #43	; 0x2b
   3c336:	46b0      	mov	r8, r6
   3c338:	bf04      	itt	eq
   3c33a:	782c      	ldrbeq	r4, [r5, #0]
   3c33c:	1c85      	addeq	r5, r0, #2
   3c33e:	e7c7      	b.n	3c2d0 <_strtol_l.isra.0+0x24>
   3c340:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   3c344:	2e19      	cmp	r6, #25
   3c346:	d801      	bhi.n	3c34c <_strtol_l.isra.0+0xa0>
   3c348:	3c37      	subs	r4, #55	; 0x37
   3c34a:	e7e2      	b.n	3c312 <_strtol_l.isra.0+0x66>
   3c34c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   3c350:	2e19      	cmp	r6, #25
   3c352:	d804      	bhi.n	3c35e <_strtol_l.isra.0+0xb2>
   3c354:	3c57      	subs	r4, #87	; 0x57
   3c356:	e7dc      	b.n	3c312 <_strtol_l.isra.0+0x66>
   3c358:	f04f 37ff 	mov.w	r7, #4294967295
   3c35c:	e7e5      	b.n	3c32a <_strtol_l.isra.0+0x7e>
   3c35e:	1c7b      	adds	r3, r7, #1
   3c360:	d106      	bne.n	3c370 <_strtol_l.isra.0+0xc4>
   3c362:	2322      	movs	r3, #34	; 0x22
   3c364:	4660      	mov	r0, ip
   3c366:	f8ce 3000 	str.w	r3, [lr]
   3c36a:	b942      	cbnz	r2, 3c37e <_strtol_l.isra.0+0xd2>
   3c36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3c370:	f1b8 0f00 	cmp.w	r8, #0
   3c374:	d000      	beq.n	3c378 <_strtol_l.isra.0+0xcc>
   3c376:	4240      	negs	r0, r0
   3c378:	2a00      	cmp	r2, #0
   3c37a:	d0f7      	beq.n	3c36c <_strtol_l.isra.0+0xc0>
   3c37c:	b107      	cbz	r7, 3c380 <_strtol_l.isra.0+0xd4>
   3c37e:	1e69      	subs	r1, r5, #1
   3c380:	6011      	str	r1, [r2, #0]
   3c382:	e7f3      	b.n	3c36c <_strtol_l.isra.0+0xc0>
   3c384:	2430      	movs	r4, #48	; 0x30
   3c386:	2b00      	cmp	r3, #0
   3c388:	d1b0      	bne.n	3c2ec <_strtol_l.isra.0+0x40>
   3c38a:	2308      	movs	r3, #8
   3c38c:	e7ae      	b.n	3c2ec <_strtol_l.isra.0+0x40>
   3c38e:	2c30      	cmp	r4, #48	; 0x30
   3c390:	d0a4      	beq.n	3c2dc <_strtol_l.isra.0+0x30>
   3c392:	230a      	movs	r3, #10
   3c394:	e7aa      	b.n	3c2ec <_strtol_l.isra.0+0x40>
   3c396:	bf00      	nop
   3c398:	00049140 	.word	0x00049140

0003c39c <strtol>:
   3c39c:	4613      	mov	r3, r2
   3c39e:	460a      	mov	r2, r1
   3c3a0:	4601      	mov	r1, r0
   3c3a2:	4802      	ldr	r0, [pc, #8]	; (3c3ac <strtol+0x10>)
   3c3a4:	6800      	ldr	r0, [r0, #0]
   3c3a6:	f7ff bf81 	b.w	3c2ac <_strtol_l.isra.0>
   3c3aa:	bf00      	nop
   3c3ac:	20032100 	.word	0x20032100

0003c3b0 <_strtoul_l.isra.0>:
   3c3b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3c3b4:	4686      	mov	lr, r0
   3c3b6:	4f37      	ldr	r7, [pc, #220]	; (3c494 <_strtoul_l.isra.0+0xe4>)
   3c3b8:	4608      	mov	r0, r1
   3c3ba:	4605      	mov	r5, r0
   3c3bc:	f815 4b01 	ldrb.w	r4, [r5], #1
   3c3c0:	5de6      	ldrb	r6, [r4, r7]
   3c3c2:	f016 0608 	ands.w	r6, r6, #8
   3c3c6:	d131      	bne.n	3c42c <_strtoul_l.isra.0+0x7c>
   3c3c8:	2c2d      	cmp	r4, #45	; 0x2d
   3c3ca:	d131      	bne.n	3c430 <_strtoul_l.isra.0+0x80>
   3c3cc:	782c      	ldrb	r4, [r5, #0]
   3c3ce:	f04f 0801 	mov.w	r8, #1
   3c3d2:	1c85      	adds	r5, r0, #2
   3c3d4:	2b00      	cmp	r3, #0
   3c3d6:	d059      	beq.n	3c48c <_strtoul_l.isra.0+0xdc>
   3c3d8:	2b10      	cmp	r3, #16
   3c3da:	d109      	bne.n	3c3f0 <_strtoul_l.isra.0+0x40>
   3c3dc:	2c30      	cmp	r4, #48	; 0x30
   3c3de:	d107      	bne.n	3c3f0 <_strtoul_l.isra.0+0x40>
   3c3e0:	7828      	ldrb	r0, [r5, #0]
   3c3e2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3c3e6:	2858      	cmp	r0, #88	; 0x58
   3c3e8:	d14b      	bne.n	3c482 <_strtoul_l.isra.0+0xd2>
   3c3ea:	786c      	ldrb	r4, [r5, #1]
   3c3ec:	2310      	movs	r3, #16
   3c3ee:	3502      	adds	r5, #2
   3c3f0:	f04f 3cff 	mov.w	ip, #4294967295
   3c3f4:	2600      	movs	r6, #0
   3c3f6:	fbbc fcf3 	udiv	ip, ip, r3
   3c3fa:	fb03 f90c 	mul.w	r9, r3, ip
   3c3fe:	4630      	mov	r0, r6
   3c400:	ea6f 0909 	mvn.w	r9, r9
   3c404:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   3c408:	2f09      	cmp	r7, #9
   3c40a:	d817      	bhi.n	3c43c <_strtoul_l.isra.0+0x8c>
   3c40c:	463c      	mov	r4, r7
   3c40e:	42a3      	cmp	r3, r4
   3c410:	dd23      	ble.n	3c45a <_strtoul_l.isra.0+0xaa>
   3c412:	2e00      	cmp	r6, #0
   3c414:	db1e      	blt.n	3c454 <_strtoul_l.isra.0+0xa4>
   3c416:	4584      	cmp	ip, r0
   3c418:	d31c      	bcc.n	3c454 <_strtoul_l.isra.0+0xa4>
   3c41a:	d101      	bne.n	3c420 <_strtoul_l.isra.0+0x70>
   3c41c:	45a1      	cmp	r9, r4
   3c41e:	db19      	blt.n	3c454 <_strtoul_l.isra.0+0xa4>
   3c420:	fb00 4003 	mla	r0, r0, r3, r4
   3c424:	2601      	movs	r6, #1
   3c426:	f815 4b01 	ldrb.w	r4, [r5], #1
   3c42a:	e7eb      	b.n	3c404 <_strtoul_l.isra.0+0x54>
   3c42c:	4628      	mov	r0, r5
   3c42e:	e7c4      	b.n	3c3ba <_strtoul_l.isra.0+0xa>
   3c430:	2c2b      	cmp	r4, #43	; 0x2b
   3c432:	46b0      	mov	r8, r6
   3c434:	bf04      	itt	eq
   3c436:	782c      	ldrbeq	r4, [r5, #0]
   3c438:	1c85      	addeq	r5, r0, #2
   3c43a:	e7cb      	b.n	3c3d4 <_strtoul_l.isra.0+0x24>
   3c43c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   3c440:	2f19      	cmp	r7, #25
   3c442:	d801      	bhi.n	3c448 <_strtoul_l.isra.0+0x98>
   3c444:	3c37      	subs	r4, #55	; 0x37
   3c446:	e7e2      	b.n	3c40e <_strtoul_l.isra.0+0x5e>
   3c448:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   3c44c:	2f19      	cmp	r7, #25
   3c44e:	d804      	bhi.n	3c45a <_strtoul_l.isra.0+0xaa>
   3c450:	3c57      	subs	r4, #87	; 0x57
   3c452:	e7dc      	b.n	3c40e <_strtoul_l.isra.0+0x5e>
   3c454:	f04f 36ff 	mov.w	r6, #4294967295
   3c458:	e7e5      	b.n	3c426 <_strtoul_l.isra.0+0x76>
   3c45a:	2e00      	cmp	r6, #0
   3c45c:	da07      	bge.n	3c46e <_strtoul_l.isra.0+0xbe>
   3c45e:	2322      	movs	r3, #34	; 0x22
   3c460:	f04f 30ff 	mov.w	r0, #4294967295
   3c464:	f8ce 3000 	str.w	r3, [lr]
   3c468:	b942      	cbnz	r2, 3c47c <_strtoul_l.isra.0+0xcc>
   3c46a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3c46e:	f1b8 0f00 	cmp.w	r8, #0
   3c472:	d000      	beq.n	3c476 <_strtoul_l.isra.0+0xc6>
   3c474:	4240      	negs	r0, r0
   3c476:	2a00      	cmp	r2, #0
   3c478:	d0f7      	beq.n	3c46a <_strtoul_l.isra.0+0xba>
   3c47a:	b106      	cbz	r6, 3c47e <_strtoul_l.isra.0+0xce>
   3c47c:	1e69      	subs	r1, r5, #1
   3c47e:	6011      	str	r1, [r2, #0]
   3c480:	e7f3      	b.n	3c46a <_strtoul_l.isra.0+0xba>
   3c482:	2430      	movs	r4, #48	; 0x30
   3c484:	2b00      	cmp	r3, #0
   3c486:	d1b3      	bne.n	3c3f0 <_strtoul_l.isra.0+0x40>
   3c488:	2308      	movs	r3, #8
   3c48a:	e7b1      	b.n	3c3f0 <_strtoul_l.isra.0+0x40>
   3c48c:	2c30      	cmp	r4, #48	; 0x30
   3c48e:	d0a7      	beq.n	3c3e0 <_strtoul_l.isra.0+0x30>
   3c490:	230a      	movs	r3, #10
   3c492:	e7ad      	b.n	3c3f0 <_strtoul_l.isra.0+0x40>
   3c494:	00049140 	.word	0x00049140

0003c498 <strtoul>:
   3c498:	4613      	mov	r3, r2
   3c49a:	460a      	mov	r2, r1
   3c49c:	4601      	mov	r1, r0
   3c49e:	4802      	ldr	r0, [pc, #8]	; (3c4a8 <strtoul+0x10>)
   3c4a0:	6800      	ldr	r0, [r0, #0]
   3c4a2:	f7ff bf85 	b.w	3c3b0 <_strtoul_l.isra.0>
   3c4a6:	bf00      	nop
   3c4a8:	20032100 	.word	0x20032100

0003c4ac <vsniprintf>:
   3c4ac:	b507      	push	{r0, r1, r2, lr}
   3c4ae:	9300      	str	r3, [sp, #0]
   3c4b0:	4613      	mov	r3, r2
   3c4b2:	460a      	mov	r2, r1
   3c4b4:	4601      	mov	r1, r0
   3c4b6:	4803      	ldr	r0, [pc, #12]	; (3c4c4 <vsniprintf+0x18>)
   3c4b8:	6800      	ldr	r0, [r0, #0]
   3c4ba:	f004 fb10 	bl	40ade <_vsniprintf_r>
   3c4be:	b003      	add	sp, #12
   3c4c0:	f85d fb04 	ldr.w	pc, [sp], #4
   3c4c4:	20032100 	.word	0x20032100

0003c4c8 <_vsiprintf_r>:
   3c4c8:	b500      	push	{lr}
   3c4ca:	b09b      	sub	sp, #108	; 0x6c
   3c4cc:	9100      	str	r1, [sp, #0]
   3c4ce:	9104      	str	r1, [sp, #16]
   3c4d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   3c4d4:	9105      	str	r1, [sp, #20]
   3c4d6:	9102      	str	r1, [sp, #8]
   3c4d8:	4905      	ldr	r1, [pc, #20]	; (3c4f0 <_vsiprintf_r+0x28>)
   3c4da:	9103      	str	r1, [sp, #12]
   3c4dc:	4669      	mov	r1, sp
   3c4de:	f000 fddf 	bl	3d0a0 <_svfiprintf_r>
   3c4e2:	9b00      	ldr	r3, [sp, #0]
   3c4e4:	2200      	movs	r2, #0
   3c4e6:	701a      	strb	r2, [r3, #0]
   3c4e8:	b01b      	add	sp, #108	; 0x6c
   3c4ea:	f85d fb04 	ldr.w	pc, [sp], #4
   3c4ee:	bf00      	nop
   3c4f0:	ffff0208 	.word	0xffff0208

0003c4f4 <vsiprintf>:
   3c4f4:	4613      	mov	r3, r2
   3c4f6:	460a      	mov	r2, r1
   3c4f8:	4601      	mov	r1, r0
   3c4fa:	4802      	ldr	r0, [pc, #8]	; (3c504 <vsiprintf+0x10>)
   3c4fc:	6800      	ldr	r0, [r0, #0]
   3c4fe:	f7ff bfe3 	b.w	3c4c8 <_vsiprintf_r>
   3c502:	bf00      	nop
   3c504:	20032100 	.word	0x20032100

0003c508 <__swbuf_r>:
   3c508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c50a:	460e      	mov	r6, r1
   3c50c:	4614      	mov	r4, r2
   3c50e:	4605      	mov	r5, r0
   3c510:	b118      	cbz	r0, 3c51a <__swbuf_r+0x12>
   3c512:	6983      	ldr	r3, [r0, #24]
   3c514:	b90b      	cbnz	r3, 3c51a <__swbuf_r+0x12>
   3c516:	f000 f9ff 	bl	3c918 <__sinit>
   3c51a:	4b21      	ldr	r3, [pc, #132]	; (3c5a0 <__swbuf_r+0x98>)
   3c51c:	429c      	cmp	r4, r3
   3c51e:	d12b      	bne.n	3c578 <__swbuf_r+0x70>
   3c520:	686c      	ldr	r4, [r5, #4]
   3c522:	69a3      	ldr	r3, [r4, #24]
   3c524:	60a3      	str	r3, [r4, #8]
   3c526:	89a3      	ldrh	r3, [r4, #12]
   3c528:	071a      	lsls	r2, r3, #28
   3c52a:	d52f      	bpl.n	3c58c <__swbuf_r+0x84>
   3c52c:	6923      	ldr	r3, [r4, #16]
   3c52e:	b36b      	cbz	r3, 3c58c <__swbuf_r+0x84>
   3c530:	6923      	ldr	r3, [r4, #16]
   3c532:	b2f6      	uxtb	r6, r6
   3c534:	6820      	ldr	r0, [r4, #0]
   3c536:	4637      	mov	r7, r6
   3c538:	1ac0      	subs	r0, r0, r3
   3c53a:	6963      	ldr	r3, [r4, #20]
   3c53c:	4283      	cmp	r3, r0
   3c53e:	dc04      	bgt.n	3c54a <__swbuf_r+0x42>
   3c540:	4621      	mov	r1, r4
   3c542:	4628      	mov	r0, r5
   3c544:	f000 f96a 	bl	3c81c <_fflush_r>
   3c548:	bb30      	cbnz	r0, 3c598 <__swbuf_r+0x90>
   3c54a:	68a3      	ldr	r3, [r4, #8]
   3c54c:	3001      	adds	r0, #1
   3c54e:	3b01      	subs	r3, #1
   3c550:	60a3      	str	r3, [r4, #8]
   3c552:	6823      	ldr	r3, [r4, #0]
   3c554:	1c5a      	adds	r2, r3, #1
   3c556:	6022      	str	r2, [r4, #0]
   3c558:	701e      	strb	r6, [r3, #0]
   3c55a:	6963      	ldr	r3, [r4, #20]
   3c55c:	4283      	cmp	r3, r0
   3c55e:	d004      	beq.n	3c56a <__swbuf_r+0x62>
   3c560:	89a3      	ldrh	r3, [r4, #12]
   3c562:	07db      	lsls	r3, r3, #31
   3c564:	d506      	bpl.n	3c574 <__swbuf_r+0x6c>
   3c566:	2e0a      	cmp	r6, #10
   3c568:	d104      	bne.n	3c574 <__swbuf_r+0x6c>
   3c56a:	4621      	mov	r1, r4
   3c56c:	4628      	mov	r0, r5
   3c56e:	f000 f955 	bl	3c81c <_fflush_r>
   3c572:	b988      	cbnz	r0, 3c598 <__swbuf_r+0x90>
   3c574:	4638      	mov	r0, r7
   3c576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3c578:	4b0a      	ldr	r3, [pc, #40]	; (3c5a4 <__swbuf_r+0x9c>)
   3c57a:	429c      	cmp	r4, r3
   3c57c:	d101      	bne.n	3c582 <__swbuf_r+0x7a>
   3c57e:	68ac      	ldr	r4, [r5, #8]
   3c580:	e7cf      	b.n	3c522 <__swbuf_r+0x1a>
   3c582:	4b09      	ldr	r3, [pc, #36]	; (3c5a8 <__swbuf_r+0xa0>)
   3c584:	429c      	cmp	r4, r3
   3c586:	bf08      	it	eq
   3c588:	68ec      	ldreq	r4, [r5, #12]
   3c58a:	e7ca      	b.n	3c522 <__swbuf_r+0x1a>
   3c58c:	4621      	mov	r1, r4
   3c58e:	4628      	mov	r0, r5
   3c590:	f000 f81e 	bl	3c5d0 <__swsetup_r>
   3c594:	2800      	cmp	r0, #0
   3c596:	d0cb      	beq.n	3c530 <__swbuf_r+0x28>
   3c598:	f04f 37ff 	mov.w	r7, #4294967295
   3c59c:	e7ea      	b.n	3c574 <__swbuf_r+0x6c>
   3c59e:	bf00      	nop
   3c5a0:	00042ba4 	.word	0x00042ba4
   3c5a4:	00042bc4 	.word	0x00042bc4
   3c5a8:	00042b84 	.word	0x00042b84

0003c5ac <_write_r>:
   3c5ac:	b538      	push	{r3, r4, r5, lr}
   3c5ae:	4605      	mov	r5, r0
   3c5b0:	4c06      	ldr	r4, [pc, #24]	; (3c5cc <_write_r+0x20>)
   3c5b2:	4608      	mov	r0, r1
   3c5b4:	4611      	mov	r1, r2
   3c5b6:	2200      	movs	r2, #0
   3c5b8:	6022      	str	r2, [r4, #0]
   3c5ba:	461a      	mov	r2, r3
   3c5bc:	f001 fea9 	bl	3e312 <_write>
   3c5c0:	1c43      	adds	r3, r0, #1
   3c5c2:	d102      	bne.n	3c5ca <_write_r+0x1e>
   3c5c4:	6823      	ldr	r3, [r4, #0]
   3c5c6:	b103      	cbz	r3, 3c5ca <_write_r+0x1e>
   3c5c8:	602b      	str	r3, [r5, #0]
   3c5ca:	bd38      	pop	{r3, r4, r5, pc}
   3c5cc:	2002be8c 	.word	0x2002be8c

0003c5d0 <__swsetup_r>:
   3c5d0:	4b32      	ldr	r3, [pc, #200]	; (3c69c <__swsetup_r+0xcc>)
   3c5d2:	b570      	push	{r4, r5, r6, lr}
   3c5d4:	681d      	ldr	r5, [r3, #0]
   3c5d6:	4606      	mov	r6, r0
   3c5d8:	460c      	mov	r4, r1
   3c5da:	b125      	cbz	r5, 3c5e6 <__swsetup_r+0x16>
   3c5dc:	69ab      	ldr	r3, [r5, #24]
   3c5de:	b913      	cbnz	r3, 3c5e6 <__swsetup_r+0x16>
   3c5e0:	4628      	mov	r0, r5
   3c5e2:	f000 f999 	bl	3c918 <__sinit>
   3c5e6:	4b2e      	ldr	r3, [pc, #184]	; (3c6a0 <__swsetup_r+0xd0>)
   3c5e8:	429c      	cmp	r4, r3
   3c5ea:	d10f      	bne.n	3c60c <__swsetup_r+0x3c>
   3c5ec:	686c      	ldr	r4, [r5, #4]
   3c5ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3c5f2:	b29a      	uxth	r2, r3
   3c5f4:	0715      	lsls	r5, r2, #28
   3c5f6:	d42c      	bmi.n	3c652 <__swsetup_r+0x82>
   3c5f8:	06d0      	lsls	r0, r2, #27
   3c5fa:	d411      	bmi.n	3c620 <__swsetup_r+0x50>
   3c5fc:	2209      	movs	r2, #9
   3c5fe:	6032      	str	r2, [r6, #0]
   3c600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3c604:	f04f 30ff 	mov.w	r0, #4294967295
   3c608:	81a3      	strh	r3, [r4, #12]
   3c60a:	e03e      	b.n	3c68a <__swsetup_r+0xba>
   3c60c:	4b25      	ldr	r3, [pc, #148]	; (3c6a4 <__swsetup_r+0xd4>)
   3c60e:	429c      	cmp	r4, r3
   3c610:	d101      	bne.n	3c616 <__swsetup_r+0x46>
   3c612:	68ac      	ldr	r4, [r5, #8]
   3c614:	e7eb      	b.n	3c5ee <__swsetup_r+0x1e>
   3c616:	4b24      	ldr	r3, [pc, #144]	; (3c6a8 <__swsetup_r+0xd8>)
   3c618:	429c      	cmp	r4, r3
   3c61a:	bf08      	it	eq
   3c61c:	68ec      	ldreq	r4, [r5, #12]
   3c61e:	e7e6      	b.n	3c5ee <__swsetup_r+0x1e>
   3c620:	0751      	lsls	r1, r2, #29
   3c622:	d512      	bpl.n	3c64a <__swsetup_r+0x7a>
   3c624:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3c626:	b141      	cbz	r1, 3c63a <__swsetup_r+0x6a>
   3c628:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3c62c:	4299      	cmp	r1, r3
   3c62e:	d002      	beq.n	3c636 <__swsetup_r+0x66>
   3c630:	4630      	mov	r0, r6
   3c632:	f7ff f853 	bl	3b6dc <_free_r>
   3c636:	2300      	movs	r3, #0
   3c638:	6363      	str	r3, [r4, #52]	; 0x34
   3c63a:	89a3      	ldrh	r3, [r4, #12]
   3c63c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   3c640:	81a3      	strh	r3, [r4, #12]
   3c642:	2300      	movs	r3, #0
   3c644:	6063      	str	r3, [r4, #4]
   3c646:	6923      	ldr	r3, [r4, #16]
   3c648:	6023      	str	r3, [r4, #0]
   3c64a:	89a3      	ldrh	r3, [r4, #12]
   3c64c:	f043 0308 	orr.w	r3, r3, #8
   3c650:	81a3      	strh	r3, [r4, #12]
   3c652:	6923      	ldr	r3, [r4, #16]
   3c654:	b94b      	cbnz	r3, 3c66a <__swsetup_r+0x9a>
   3c656:	89a3      	ldrh	r3, [r4, #12]
   3c658:	f403 7320 	and.w	r3, r3, #640	; 0x280
   3c65c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   3c660:	d003      	beq.n	3c66a <__swsetup_r+0x9a>
   3c662:	4621      	mov	r1, r4
   3c664:	4630      	mov	r0, r6
   3c666:	f000 fc0d 	bl	3ce84 <__smakebuf_r>
   3c66a:	89a2      	ldrh	r2, [r4, #12]
   3c66c:	f012 0301 	ands.w	r3, r2, #1
   3c670:	d00c      	beq.n	3c68c <__swsetup_r+0xbc>
   3c672:	2300      	movs	r3, #0
   3c674:	60a3      	str	r3, [r4, #8]
   3c676:	6963      	ldr	r3, [r4, #20]
   3c678:	425b      	negs	r3, r3
   3c67a:	61a3      	str	r3, [r4, #24]
   3c67c:	6923      	ldr	r3, [r4, #16]
   3c67e:	b953      	cbnz	r3, 3c696 <__swsetup_r+0xc6>
   3c680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3c684:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   3c688:	d1ba      	bne.n	3c600 <__swsetup_r+0x30>
   3c68a:	bd70      	pop	{r4, r5, r6, pc}
   3c68c:	0792      	lsls	r2, r2, #30
   3c68e:	bf58      	it	pl
   3c690:	6963      	ldrpl	r3, [r4, #20]
   3c692:	60a3      	str	r3, [r4, #8]
   3c694:	e7f2      	b.n	3c67c <__swsetup_r+0xac>
   3c696:	2000      	movs	r0, #0
   3c698:	e7f7      	b.n	3c68a <__swsetup_r+0xba>
   3c69a:	bf00      	nop
   3c69c:	20032100 	.word	0x20032100
   3c6a0:	00042ba4 	.word	0x00042ba4
   3c6a4:	00042bc4 	.word	0x00042bc4
   3c6a8:	00042b84 	.word	0x00042b84

0003c6ac <__chk_fail>:
   3c6ac:	b500      	push	{lr}
   3c6ae:	b08d      	sub	sp, #52	; 0x34
   3c6b0:	4b0f      	ldr	r3, [pc, #60]	; (3c6f0 <__chk_fail+0x44>)
   3c6b2:	466a      	mov	r2, sp
   3c6b4:	f103 0628 	add.w	r6, r3, #40	; 0x28
   3c6b8:	4615      	mov	r5, r2
   3c6ba:	6818      	ldr	r0, [r3, #0]
   3c6bc:	3308      	adds	r3, #8
   3c6be:	f853 1c04 	ldr.w	r1, [r3, #-4]
   3c6c2:	4614      	mov	r4, r2
   3c6c4:	42b3      	cmp	r3, r6
   3c6c6:	c403      	stmia	r4!, {r0, r1}
   3c6c8:	4622      	mov	r2, r4
   3c6ca:	d1f6      	bne.n	3c6ba <__chk_fail+0xe>
   3c6cc:	6818      	ldr	r0, [r3, #0]
   3c6ce:	889b      	ldrh	r3, [r3, #4]
   3c6d0:	6020      	str	r0, [r4, #0]
   3c6d2:	4628      	mov	r0, r5
   3c6d4:	80a3      	strh	r3, [r4, #4]
   3c6d6:	f7e0 fd25 	bl	1d124 <strlen>
   3c6da:	4629      	mov	r1, r5
   3c6dc:	4602      	mov	r2, r0
   3c6de:	2002      	movs	r0, #2
   3c6e0:	f001 fe17 	bl	3e312 <_write>
   3c6e4:	2006      	movs	r0, #6
   3c6e6:	f001 f879 	bl	3d7dc <raise>
   3c6ea:	207f      	movs	r0, #127	; 0x7f
   3c6ec:	f7e8 fdc4 	bl	25278 <_exit>
   3c6f0:	0004927f 	.word	0x0004927f

0003c6f4 <_close_r>:
   3c6f4:	b538      	push	{r3, r4, r5, lr}
   3c6f6:	2300      	movs	r3, #0
   3c6f8:	4c05      	ldr	r4, [pc, #20]	; (3c710 <_close_r+0x1c>)
   3c6fa:	4605      	mov	r5, r0
   3c6fc:	4608      	mov	r0, r1
   3c6fe:	6023      	str	r3, [r4, #0]
   3c700:	f001 fe0b 	bl	3e31a <_close>
   3c704:	1c43      	adds	r3, r0, #1
   3c706:	d102      	bne.n	3c70e <_close_r+0x1a>
   3c708:	6823      	ldr	r3, [r4, #0]
   3c70a:	b103      	cbz	r3, 3c70e <_close_r+0x1a>
   3c70c:	602b      	str	r3, [r5, #0]
   3c70e:	bd38      	pop	{r3, r4, r5, pc}
   3c710:	2002be8c 	.word	0x2002be8c

0003c714 <__sflush_r>:
   3c714:	898a      	ldrh	r2, [r1, #12]
   3c716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c71a:	4605      	mov	r5, r0
   3c71c:	0710      	lsls	r0, r2, #28
   3c71e:	460c      	mov	r4, r1
   3c720:	d458      	bmi.n	3c7d4 <__sflush_r+0xc0>
   3c722:	684b      	ldr	r3, [r1, #4]
   3c724:	2b00      	cmp	r3, #0
   3c726:	dc05      	bgt.n	3c734 <__sflush_r+0x20>
   3c728:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   3c72a:	2b00      	cmp	r3, #0
   3c72c:	dc02      	bgt.n	3c734 <__sflush_r+0x20>
   3c72e:	2000      	movs	r0, #0
   3c730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3c734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3c736:	2e00      	cmp	r6, #0
   3c738:	d0f9      	beq.n	3c72e <__sflush_r+0x1a>
   3c73a:	2300      	movs	r3, #0
   3c73c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   3c740:	682f      	ldr	r7, [r5, #0]
   3c742:	602b      	str	r3, [r5, #0]
   3c744:	d032      	beq.n	3c7ac <__sflush_r+0x98>
   3c746:	6d60      	ldr	r0, [r4, #84]	; 0x54
   3c748:	89a3      	ldrh	r3, [r4, #12]
   3c74a:	075a      	lsls	r2, r3, #29
   3c74c:	d505      	bpl.n	3c75a <__sflush_r+0x46>
   3c74e:	6863      	ldr	r3, [r4, #4]
   3c750:	1ac0      	subs	r0, r0, r3
   3c752:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3c754:	b10b      	cbz	r3, 3c75a <__sflush_r+0x46>
   3c756:	6c23      	ldr	r3, [r4, #64]	; 0x40
   3c758:	1ac0      	subs	r0, r0, r3
   3c75a:	2300      	movs	r3, #0
   3c75c:	4602      	mov	r2, r0
   3c75e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3c760:	4628      	mov	r0, r5
   3c762:	6a21      	ldr	r1, [r4, #32]
   3c764:	47b0      	blx	r6
   3c766:	1c43      	adds	r3, r0, #1
   3c768:	89a3      	ldrh	r3, [r4, #12]
   3c76a:	d106      	bne.n	3c77a <__sflush_r+0x66>
   3c76c:	6829      	ldr	r1, [r5, #0]
   3c76e:	291d      	cmp	r1, #29
   3c770:	d82c      	bhi.n	3c7cc <__sflush_r+0xb8>
   3c772:	4a29      	ldr	r2, [pc, #164]	; (3c818 <__sflush_r+0x104>)
   3c774:	40ca      	lsrs	r2, r1
   3c776:	07d6      	lsls	r6, r2, #31
   3c778:	d528      	bpl.n	3c7cc <__sflush_r+0xb8>
   3c77a:	2200      	movs	r2, #0
   3c77c:	04d9      	lsls	r1, r3, #19
   3c77e:	6062      	str	r2, [r4, #4]
   3c780:	6922      	ldr	r2, [r4, #16]
   3c782:	6022      	str	r2, [r4, #0]
   3c784:	d504      	bpl.n	3c790 <__sflush_r+0x7c>
   3c786:	1c42      	adds	r2, r0, #1
   3c788:	d101      	bne.n	3c78e <__sflush_r+0x7a>
   3c78a:	682b      	ldr	r3, [r5, #0]
   3c78c:	b903      	cbnz	r3, 3c790 <__sflush_r+0x7c>
   3c78e:	6560      	str	r0, [r4, #84]	; 0x54
   3c790:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3c792:	602f      	str	r7, [r5, #0]
   3c794:	2900      	cmp	r1, #0
   3c796:	d0ca      	beq.n	3c72e <__sflush_r+0x1a>
   3c798:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3c79c:	4299      	cmp	r1, r3
   3c79e:	d002      	beq.n	3c7a6 <__sflush_r+0x92>
   3c7a0:	4628      	mov	r0, r5
   3c7a2:	f7fe ff9b 	bl	3b6dc <_free_r>
   3c7a6:	2000      	movs	r0, #0
   3c7a8:	6360      	str	r0, [r4, #52]	; 0x34
   3c7aa:	e7c1      	b.n	3c730 <__sflush_r+0x1c>
   3c7ac:	6a21      	ldr	r1, [r4, #32]
   3c7ae:	2301      	movs	r3, #1
   3c7b0:	4628      	mov	r0, r5
   3c7b2:	47b0      	blx	r6
   3c7b4:	1c41      	adds	r1, r0, #1
   3c7b6:	d1c7      	bne.n	3c748 <__sflush_r+0x34>
   3c7b8:	682b      	ldr	r3, [r5, #0]
   3c7ba:	2b00      	cmp	r3, #0
   3c7bc:	d0c4      	beq.n	3c748 <__sflush_r+0x34>
   3c7be:	2b1d      	cmp	r3, #29
   3c7c0:	d001      	beq.n	3c7c6 <__sflush_r+0xb2>
   3c7c2:	2b16      	cmp	r3, #22
   3c7c4:	d101      	bne.n	3c7ca <__sflush_r+0xb6>
   3c7c6:	602f      	str	r7, [r5, #0]
   3c7c8:	e7b1      	b.n	3c72e <__sflush_r+0x1a>
   3c7ca:	89a3      	ldrh	r3, [r4, #12]
   3c7cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3c7d0:	81a3      	strh	r3, [r4, #12]
   3c7d2:	e7ad      	b.n	3c730 <__sflush_r+0x1c>
   3c7d4:	690f      	ldr	r7, [r1, #16]
   3c7d6:	2f00      	cmp	r7, #0
   3c7d8:	d0a9      	beq.n	3c72e <__sflush_r+0x1a>
   3c7da:	0793      	lsls	r3, r2, #30
   3c7dc:	680e      	ldr	r6, [r1, #0]
   3c7de:	600f      	str	r7, [r1, #0]
   3c7e0:	bf0c      	ite	eq
   3c7e2:	694b      	ldreq	r3, [r1, #20]
   3c7e4:	2300      	movne	r3, #0
   3c7e6:	eba6 0807 	sub.w	r8, r6, r7
   3c7ea:	608b      	str	r3, [r1, #8]
   3c7ec:	f1b8 0f00 	cmp.w	r8, #0
   3c7f0:	dd9d      	ble.n	3c72e <__sflush_r+0x1a>
   3c7f2:	4643      	mov	r3, r8
   3c7f4:	463a      	mov	r2, r7
   3c7f6:	6a21      	ldr	r1, [r4, #32]
   3c7f8:	4628      	mov	r0, r5
   3c7fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   3c7fc:	47b0      	blx	r6
   3c7fe:	2800      	cmp	r0, #0
   3c800:	dc06      	bgt.n	3c810 <__sflush_r+0xfc>
   3c802:	89a3      	ldrh	r3, [r4, #12]
   3c804:	f04f 30ff 	mov.w	r0, #4294967295
   3c808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3c80c:	81a3      	strh	r3, [r4, #12]
   3c80e:	e78f      	b.n	3c730 <__sflush_r+0x1c>
   3c810:	4407      	add	r7, r0
   3c812:	eba8 0800 	sub.w	r8, r8, r0
   3c816:	e7e9      	b.n	3c7ec <__sflush_r+0xd8>
   3c818:	20400001 	.word	0x20400001

0003c81c <_fflush_r>:
   3c81c:	b538      	push	{r3, r4, r5, lr}
   3c81e:	690b      	ldr	r3, [r1, #16]
   3c820:	4605      	mov	r5, r0
   3c822:	460c      	mov	r4, r1
   3c824:	b913      	cbnz	r3, 3c82c <_fflush_r+0x10>
   3c826:	2500      	movs	r5, #0
   3c828:	4628      	mov	r0, r5
   3c82a:	bd38      	pop	{r3, r4, r5, pc}
   3c82c:	b118      	cbz	r0, 3c836 <_fflush_r+0x1a>
   3c82e:	6983      	ldr	r3, [r0, #24]
   3c830:	b90b      	cbnz	r3, 3c836 <_fflush_r+0x1a>
   3c832:	f000 f871 	bl	3c918 <__sinit>
   3c836:	4b14      	ldr	r3, [pc, #80]	; (3c888 <_fflush_r+0x6c>)
   3c838:	429c      	cmp	r4, r3
   3c83a:	d11b      	bne.n	3c874 <_fflush_r+0x58>
   3c83c:	686c      	ldr	r4, [r5, #4]
   3c83e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3c842:	2b00      	cmp	r3, #0
   3c844:	d0ef      	beq.n	3c826 <_fflush_r+0xa>
   3c846:	6e62      	ldr	r2, [r4, #100]	; 0x64
   3c848:	07d0      	lsls	r0, r2, #31
   3c84a:	d404      	bmi.n	3c856 <_fflush_r+0x3a>
   3c84c:	0599      	lsls	r1, r3, #22
   3c84e:	d402      	bmi.n	3c856 <_fflush_r+0x3a>
   3c850:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3c852:	f004 fb3f 	bl	40ed4 <__retarget_lock_acquire_recursive>
   3c856:	4628      	mov	r0, r5
   3c858:	4621      	mov	r1, r4
   3c85a:	f7ff ff5b 	bl	3c714 <__sflush_r>
   3c85e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3c860:	4605      	mov	r5, r0
   3c862:	07da      	lsls	r2, r3, #31
   3c864:	d4e0      	bmi.n	3c828 <_fflush_r+0xc>
   3c866:	89a3      	ldrh	r3, [r4, #12]
   3c868:	059b      	lsls	r3, r3, #22
   3c86a:	d4dd      	bmi.n	3c828 <_fflush_r+0xc>
   3c86c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3c86e:	f004 fb32 	bl	40ed6 <__retarget_lock_release_recursive>
   3c872:	e7d9      	b.n	3c828 <_fflush_r+0xc>
   3c874:	4b05      	ldr	r3, [pc, #20]	; (3c88c <_fflush_r+0x70>)
   3c876:	429c      	cmp	r4, r3
   3c878:	d101      	bne.n	3c87e <_fflush_r+0x62>
   3c87a:	68ac      	ldr	r4, [r5, #8]
   3c87c:	e7df      	b.n	3c83e <_fflush_r+0x22>
   3c87e:	4b04      	ldr	r3, [pc, #16]	; (3c890 <_fflush_r+0x74>)
   3c880:	429c      	cmp	r4, r3
   3c882:	bf08      	it	eq
   3c884:	68ec      	ldreq	r4, [r5, #12]
   3c886:	e7da      	b.n	3c83e <_fflush_r+0x22>
   3c888:	00042ba4 	.word	0x00042ba4
   3c88c:	00042bc4 	.word	0x00042bc4
   3c890:	00042b84 	.word	0x00042b84

0003c894 <std>:
   3c894:	2300      	movs	r3, #0
   3c896:	b510      	push	{r4, lr}
   3c898:	4604      	mov	r4, r0
   3c89a:	6083      	str	r3, [r0, #8]
   3c89c:	8181      	strh	r1, [r0, #12]
   3c89e:	4619      	mov	r1, r3
   3c8a0:	6643      	str	r3, [r0, #100]	; 0x64
   3c8a2:	81c2      	strh	r2, [r0, #14]
   3c8a4:	2208      	movs	r2, #8
   3c8a6:	6183      	str	r3, [r0, #24]
   3c8a8:	e9c0 3300 	strd	r3, r3, [r0]
   3c8ac:	e9c0 3304 	strd	r3, r3, [r0, #16]
   3c8b0:	305c      	adds	r0, #92	; 0x5c
   3c8b2:	f003 fed3 	bl	4065c <memset>
   3c8b6:	4b05      	ldr	r3, [pc, #20]	; (3c8cc <std+0x38>)
   3c8b8:	6224      	str	r4, [r4, #32]
   3c8ba:	6263      	str	r3, [r4, #36]	; 0x24
   3c8bc:	4b04      	ldr	r3, [pc, #16]	; (3c8d0 <std+0x3c>)
   3c8be:	62a3      	str	r3, [r4, #40]	; 0x28
   3c8c0:	4b04      	ldr	r3, [pc, #16]	; (3c8d4 <std+0x40>)
   3c8c2:	62e3      	str	r3, [r4, #44]	; 0x2c
   3c8c4:	4b04      	ldr	r3, [pc, #16]	; (3c8d8 <std+0x44>)
   3c8c6:	6323      	str	r3, [r4, #48]	; 0x30
   3c8c8:	bd10      	pop	{r4, pc}
   3c8ca:	bf00      	nop
   3c8cc:	00040903 	.word	0x00040903
   3c8d0:	00040929 	.word	0x00040929
   3c8d4:	00040961 	.word	0x00040961
   3c8d8:	00040985 	.word	0x00040985

0003c8dc <_cleanup_r>:
   3c8dc:	4901      	ldr	r1, [pc, #4]	; (3c8e4 <_cleanup_r+0x8>)
   3c8de:	f004 b9d5 	b.w	40c8c <_fwalk_reent>
   3c8e2:	bf00      	nop
   3c8e4:	0003c81d 	.word	0x0003c81d

0003c8e8 <__sfp_lock_acquire>:
   3c8e8:	4801      	ldr	r0, [pc, #4]	; (3c8f0 <__sfp_lock_acquire+0x8>)
   3c8ea:	f004 baf3 	b.w	40ed4 <__retarget_lock_acquire_recursive>
   3c8ee:	bf00      	nop
   3c8f0:	2002be98 	.word	0x2002be98

0003c8f4 <__sfp_lock_release>:
   3c8f4:	4801      	ldr	r0, [pc, #4]	; (3c8fc <__sfp_lock_release+0x8>)
   3c8f6:	f004 baee 	b.w	40ed6 <__retarget_lock_release_recursive>
   3c8fa:	bf00      	nop
   3c8fc:	2002be98 	.word	0x2002be98

0003c900 <__sinit_lock_acquire>:
   3c900:	4801      	ldr	r0, [pc, #4]	; (3c908 <__sinit_lock_acquire+0x8>)
   3c902:	f004 bae7 	b.w	40ed4 <__retarget_lock_acquire_recursive>
   3c906:	bf00      	nop
   3c908:	2002be93 	.word	0x2002be93

0003c90c <__sinit_lock_release>:
   3c90c:	4801      	ldr	r0, [pc, #4]	; (3c914 <__sinit_lock_release+0x8>)
   3c90e:	f004 bae2 	b.w	40ed6 <__retarget_lock_release_recursive>
   3c912:	bf00      	nop
   3c914:	2002be93 	.word	0x2002be93

0003c918 <__sinit>:
   3c918:	b510      	push	{r4, lr}
   3c91a:	4604      	mov	r4, r0
   3c91c:	f7ff fff0 	bl	3c900 <__sinit_lock_acquire>
   3c920:	69a3      	ldr	r3, [r4, #24]
   3c922:	b11b      	cbz	r3, 3c92c <__sinit+0x14>
   3c924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3c928:	f7ff bff0 	b.w	3c90c <__sinit_lock_release>
   3c92c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   3c930:	6523      	str	r3, [r4, #80]	; 0x50
   3c932:	4620      	mov	r0, r4
   3c934:	4b12      	ldr	r3, [pc, #72]	; (3c980 <__sinit+0x68>)
   3c936:	4a13      	ldr	r2, [pc, #76]	; (3c984 <__sinit+0x6c>)
   3c938:	681b      	ldr	r3, [r3, #0]
   3c93a:	62a2      	str	r2, [r4, #40]	; 0x28
   3c93c:	42a3      	cmp	r3, r4
   3c93e:	bf04      	itt	eq
   3c940:	2301      	moveq	r3, #1
   3c942:	61a3      	streq	r3, [r4, #24]
   3c944:	f000 f820 	bl	3c988 <__sfp>
   3c948:	6060      	str	r0, [r4, #4]
   3c94a:	4620      	mov	r0, r4
   3c94c:	f000 f81c 	bl	3c988 <__sfp>
   3c950:	60a0      	str	r0, [r4, #8]
   3c952:	4620      	mov	r0, r4
   3c954:	f000 f818 	bl	3c988 <__sfp>
   3c958:	2200      	movs	r2, #0
   3c95a:	60e0      	str	r0, [r4, #12]
   3c95c:	2104      	movs	r1, #4
   3c95e:	6860      	ldr	r0, [r4, #4]
   3c960:	f7ff ff98 	bl	3c894 <std>
   3c964:	2201      	movs	r2, #1
   3c966:	2109      	movs	r1, #9
   3c968:	68a0      	ldr	r0, [r4, #8]
   3c96a:	f7ff ff93 	bl	3c894 <std>
   3c96e:	2202      	movs	r2, #2
   3c970:	2112      	movs	r1, #18
   3c972:	68e0      	ldr	r0, [r4, #12]
   3c974:	f7ff ff8e 	bl	3c894 <std>
   3c978:	2301      	movs	r3, #1
   3c97a:	61a3      	str	r3, [r4, #24]
   3c97c:	e7d2      	b.n	3c924 <__sinit+0xc>
   3c97e:	bf00      	nop
   3c980:	00042b58 	.word	0x00042b58
   3c984:	0003c8dd 	.word	0x0003c8dd

0003c988 <__sfp>:
   3c988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c98a:	4607      	mov	r7, r0
   3c98c:	f7ff ffac 	bl	3c8e8 <__sfp_lock_acquire>
   3c990:	4b1e      	ldr	r3, [pc, #120]	; (3ca0c <__sfp+0x84>)
   3c992:	681e      	ldr	r6, [r3, #0]
   3c994:	69b3      	ldr	r3, [r6, #24]
   3c996:	b913      	cbnz	r3, 3c99e <__sfp+0x16>
   3c998:	4630      	mov	r0, r6
   3c99a:	f7ff ffbd 	bl	3c918 <__sinit>
   3c99e:	3648      	adds	r6, #72	; 0x48
   3c9a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   3c9a4:	3b01      	subs	r3, #1
   3c9a6:	d503      	bpl.n	3c9b0 <__sfp+0x28>
   3c9a8:	6833      	ldr	r3, [r6, #0]
   3c9aa:	b30b      	cbz	r3, 3c9f0 <__sfp+0x68>
   3c9ac:	6836      	ldr	r6, [r6, #0]
   3c9ae:	e7f7      	b.n	3c9a0 <__sfp+0x18>
   3c9b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   3c9b4:	b9d5      	cbnz	r5, 3c9ec <__sfp+0x64>
   3c9b6:	4b16      	ldr	r3, [pc, #88]	; (3ca10 <__sfp+0x88>)
   3c9b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   3c9bc:	6665      	str	r5, [r4, #100]	; 0x64
   3c9be:	60e3      	str	r3, [r4, #12]
   3c9c0:	f004 fa87 	bl	40ed2 <__retarget_lock_init_recursive>
   3c9c4:	f7ff ff96 	bl	3c8f4 <__sfp_lock_release>
   3c9c8:	6025      	str	r5, [r4, #0]
   3c9ca:	61a5      	str	r5, [r4, #24]
   3c9cc:	2208      	movs	r2, #8
   3c9ce:	4629      	mov	r1, r5
   3c9d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   3c9d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
   3c9d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
   3c9dc:	f003 fe3e 	bl	4065c <memset>
   3c9e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   3c9e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   3c9e8:	4620      	mov	r0, r4
   3c9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3c9ec:	3468      	adds	r4, #104	; 0x68
   3c9ee:	e7d9      	b.n	3c9a4 <__sfp+0x1c>
   3c9f0:	2104      	movs	r1, #4
   3c9f2:	4638      	mov	r0, r7
   3c9f4:	f004 f934 	bl	40c60 <__sfmoreglue>
   3c9f8:	4604      	mov	r4, r0
   3c9fa:	6030      	str	r0, [r6, #0]
   3c9fc:	2800      	cmp	r0, #0
   3c9fe:	d1d5      	bne.n	3c9ac <__sfp+0x24>
   3ca00:	f7ff ff78 	bl	3c8f4 <__sfp_lock_release>
   3ca04:	230c      	movs	r3, #12
   3ca06:	603b      	str	r3, [r7, #0]
   3ca08:	e7ee      	b.n	3c9e8 <__sfp+0x60>
   3ca0a:	bf00      	nop
   3ca0c:	00042b58 	.word	0x00042b58
   3ca10:	ffff0001 	.word	0xffff0001

0003ca14 <__gethex>:
   3ca14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ca18:	b08b      	sub	sp, #44	; 0x2c
   3ca1a:	468b      	mov	fp, r1
   3ca1c:	4690      	mov	r8, r2
   3ca1e:	9306      	str	r3, [sp, #24]
   3ca20:	4bb5      	ldr	r3, [pc, #724]	; (3ccf8 <__gethex+0x2e4>)
   3ca22:	9002      	str	r0, [sp, #8]
   3ca24:	681b      	ldr	r3, [r3, #0]
   3ca26:	4618      	mov	r0, r3
   3ca28:	9303      	str	r3, [sp, #12]
   3ca2a:	f7e0 fb7b 	bl	1d124 <strlen>
   3ca2e:	9b03      	ldr	r3, [sp, #12]
   3ca30:	f8db 2000 	ldr.w	r2, [fp]
   3ca34:	4403      	add	r3, r0
   3ca36:	9001      	str	r0, [sp, #4]
   3ca38:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   3ca3c:	9307      	str	r3, [sp, #28]
   3ca3e:	1c93      	adds	r3, r2, #2
   3ca40:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   3ca44:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   3ca48:	32fe      	adds	r2, #254	; 0xfe
   3ca4a:	eb02 0a03 	add.w	sl, r2, r3
   3ca4e:	461f      	mov	r7, r3
   3ca50:	f813 0b01 	ldrb.w	r0, [r3], #1
   3ca54:	2830      	cmp	r0, #48	; 0x30
   3ca56:	d0f8      	beq.n	3ca4a <__gethex+0x36>
   3ca58:	f004 f970 	bl	40d3c <__hexdig_fun>
   3ca5c:	4604      	mov	r4, r0
   3ca5e:	2800      	cmp	r0, #0
   3ca60:	d167      	bne.n	3cb32 <__gethex+0x11e>
   3ca62:	9a01      	ldr	r2, [sp, #4]
   3ca64:	4638      	mov	r0, r7
   3ca66:	9903      	ldr	r1, [sp, #12]
   3ca68:	f003 ffd1 	bl	40a0e <strncmp>
   3ca6c:	4605      	mov	r5, r0
   3ca6e:	2800      	cmp	r0, #0
   3ca70:	d162      	bne.n	3cb38 <__gethex+0x124>
   3ca72:	9b01      	ldr	r3, [sp, #4]
   3ca74:	5cf8      	ldrb	r0, [r7, r3]
   3ca76:	18fe      	adds	r6, r7, r3
   3ca78:	f004 f960 	bl	40d3c <__hexdig_fun>
   3ca7c:	2800      	cmp	r0, #0
   3ca7e:	d05d      	beq.n	3cb3c <__gethex+0x128>
   3ca80:	4633      	mov	r3, r6
   3ca82:	7818      	ldrb	r0, [r3, #0]
   3ca84:	461f      	mov	r7, r3
   3ca86:	3301      	adds	r3, #1
   3ca88:	2830      	cmp	r0, #48	; 0x30
   3ca8a:	d0fa      	beq.n	3ca82 <__gethex+0x6e>
   3ca8c:	f004 f956 	bl	40d3c <__hexdig_fun>
   3ca90:	fab0 f480 	clz	r4, r0
   3ca94:	4635      	mov	r5, r6
   3ca96:	f04f 0a01 	mov.w	sl, #1
   3ca9a:	0964      	lsrs	r4, r4, #5
   3ca9c:	463a      	mov	r2, r7
   3ca9e:	4616      	mov	r6, r2
   3caa0:	3201      	adds	r2, #1
   3caa2:	7830      	ldrb	r0, [r6, #0]
   3caa4:	f004 f94a 	bl	40d3c <__hexdig_fun>
   3caa8:	2800      	cmp	r0, #0
   3caaa:	d1f8      	bne.n	3ca9e <__gethex+0x8a>
   3caac:	9a01      	ldr	r2, [sp, #4]
   3caae:	4630      	mov	r0, r6
   3cab0:	9903      	ldr	r1, [sp, #12]
   3cab2:	f003 ffac 	bl	40a0e <strncmp>
   3cab6:	b950      	cbnz	r0, 3cace <__gethex+0xba>
   3cab8:	b955      	cbnz	r5, 3cad0 <__gethex+0xbc>
   3caba:	9b01      	ldr	r3, [sp, #4]
   3cabc:	18f5      	adds	r5, r6, r3
   3cabe:	462a      	mov	r2, r5
   3cac0:	4616      	mov	r6, r2
   3cac2:	3201      	adds	r2, #1
   3cac4:	7830      	ldrb	r0, [r6, #0]
   3cac6:	f004 f939 	bl	40d3c <__hexdig_fun>
   3caca:	2800      	cmp	r0, #0
   3cacc:	d1f8      	bne.n	3cac0 <__gethex+0xac>
   3cace:	b10d      	cbz	r5, 3cad4 <__gethex+0xc0>
   3cad0:	1bad      	subs	r5, r5, r6
   3cad2:	00ad      	lsls	r5, r5, #2
   3cad4:	7833      	ldrb	r3, [r6, #0]
   3cad6:	2b50      	cmp	r3, #80	; 0x50
   3cad8:	d001      	beq.n	3cade <__gethex+0xca>
   3cada:	2b70      	cmp	r3, #112	; 0x70
   3cadc:	d13c      	bne.n	3cb58 <__gethex+0x144>
   3cade:	7873      	ldrb	r3, [r6, #1]
   3cae0:	2b2b      	cmp	r3, #43	; 0x2b
   3cae2:	d02d      	beq.n	3cb40 <__gethex+0x12c>
   3cae4:	2b2d      	cmp	r3, #45	; 0x2d
   3cae6:	d02f      	beq.n	3cb48 <__gethex+0x134>
   3cae8:	1c71      	adds	r1, r6, #1
   3caea:	f04f 0900 	mov.w	r9, #0
   3caee:	7808      	ldrb	r0, [r1, #0]
   3caf0:	f004 f924 	bl	40d3c <__hexdig_fun>
   3caf4:	1e43      	subs	r3, r0, #1
   3caf6:	b2db      	uxtb	r3, r3
   3caf8:	2b18      	cmp	r3, #24
   3cafa:	d82d      	bhi.n	3cb58 <__gethex+0x144>
   3cafc:	f1a0 0210 	sub.w	r2, r0, #16
   3cb00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   3cb04:	f004 f91a 	bl	40d3c <__hexdig_fun>
   3cb08:	1e43      	subs	r3, r0, #1
   3cb0a:	b2db      	uxtb	r3, r3
   3cb0c:	2b18      	cmp	r3, #24
   3cb0e:	d91e      	bls.n	3cb4e <__gethex+0x13a>
   3cb10:	f1b9 0f00 	cmp.w	r9, #0
   3cb14:	d000      	beq.n	3cb18 <__gethex+0x104>
   3cb16:	4252      	negs	r2, r2
   3cb18:	4415      	add	r5, r2
   3cb1a:	f8cb 1000 	str.w	r1, [fp]
   3cb1e:	b1ec      	cbz	r4, 3cb5c <__gethex+0x148>
   3cb20:	f1ba 0f00 	cmp.w	sl, #0
   3cb24:	bf14      	ite	ne
   3cb26:	2700      	movne	r7, #0
   3cb28:	2706      	moveq	r7, #6
   3cb2a:	4638      	mov	r0, r7
   3cb2c:	b00b      	add	sp, #44	; 0x2c
   3cb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cb32:	2400      	movs	r4, #0
   3cb34:	4625      	mov	r5, r4
   3cb36:	e7b1      	b.n	3ca9c <__gethex+0x88>
   3cb38:	463e      	mov	r6, r7
   3cb3a:	4625      	mov	r5, r4
   3cb3c:	2401      	movs	r4, #1
   3cb3e:	e7c9      	b.n	3cad4 <__gethex+0xc0>
   3cb40:	f04f 0900 	mov.w	r9, #0
   3cb44:	1cb1      	adds	r1, r6, #2
   3cb46:	e7d2      	b.n	3caee <__gethex+0xda>
   3cb48:	f04f 0901 	mov.w	r9, #1
   3cb4c:	e7fa      	b.n	3cb44 <__gethex+0x130>
   3cb4e:	230a      	movs	r3, #10
   3cb50:	fb03 0202 	mla	r2, r3, r2, r0
   3cb54:	3a10      	subs	r2, #16
   3cb56:	e7d3      	b.n	3cb00 <__gethex+0xec>
   3cb58:	4631      	mov	r1, r6
   3cb5a:	e7de      	b.n	3cb1a <__gethex+0x106>
   3cb5c:	1bf3      	subs	r3, r6, r7
   3cb5e:	4621      	mov	r1, r4
   3cb60:	3b01      	subs	r3, #1
   3cb62:	2b07      	cmp	r3, #7
   3cb64:	dc4f      	bgt.n	3cc06 <__gethex+0x1f2>
   3cb66:	9802      	ldr	r0, [sp, #8]
   3cb68:	f04f 0b00 	mov.w	fp, #0
   3cb6c:	f004 fa04 	bl	40f78 <_Balloc>
   3cb70:	9b01      	ldr	r3, [sp, #4]
   3cb72:	f100 0914 	add.w	r9, r0, #20
   3cb76:	4604      	mov	r4, r0
   3cb78:	f1c3 0301 	rsb	r3, r3, #1
   3cb7c:	46da      	mov	sl, fp
   3cb7e:	f8cd 9010 	str.w	r9, [sp, #16]
   3cb82:	9308      	str	r3, [sp, #32]
   3cb84:	42b7      	cmp	r7, r6
   3cb86:	d341      	bcc.n	3cc0c <__gethex+0x1f8>
   3cb88:	9804      	ldr	r0, [sp, #16]
   3cb8a:	f840 ab04 	str.w	sl, [r0], #4
   3cb8e:	eba0 0009 	sub.w	r0, r0, r9
   3cb92:	1080      	asrs	r0, r0, #2
   3cb94:	0147      	lsls	r7, r0, #5
   3cb96:	6120      	str	r0, [r4, #16]
   3cb98:	4650      	mov	r0, sl
   3cb9a:	f004 fab3 	bl	41104 <__hi0bits>
   3cb9e:	f8d8 6000 	ldr.w	r6, [r8]
   3cba2:	1a3f      	subs	r7, r7, r0
   3cba4:	42b7      	cmp	r7, r6
   3cba6:	dd63      	ble.n	3cc70 <__gethex+0x25c>
   3cba8:	1bbf      	subs	r7, r7, r6
   3cbaa:	4620      	mov	r0, r4
   3cbac:	4639      	mov	r1, r7
   3cbae:	f004 fcf9 	bl	415a4 <__any_on>
   3cbb2:	4682      	mov	sl, r0
   3cbb4:	b1a8      	cbz	r0, 3cbe2 <__gethex+0x1ce>
   3cbb6:	1e7b      	subs	r3, r7, #1
   3cbb8:	f04f 0a01 	mov.w	sl, #1
   3cbbc:	1159      	asrs	r1, r3, #5
   3cbbe:	f003 021f 	and.w	r2, r3, #31
   3cbc2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   3cbc6:	fa0a f202 	lsl.w	r2, sl, r2
   3cbca:	420a      	tst	r2, r1
   3cbcc:	d009      	beq.n	3cbe2 <__gethex+0x1ce>
   3cbce:	4553      	cmp	r3, sl
   3cbd0:	dd05      	ble.n	3cbde <__gethex+0x1ca>
   3cbd2:	1eb9      	subs	r1, r7, #2
   3cbd4:	4620      	mov	r0, r4
   3cbd6:	f004 fce5 	bl	415a4 <__any_on>
   3cbda:	2800      	cmp	r0, #0
   3cbdc:	d145      	bne.n	3cc6a <__gethex+0x256>
   3cbde:	f04f 0a02 	mov.w	sl, #2
   3cbe2:	443d      	add	r5, r7
   3cbe4:	4639      	mov	r1, r7
   3cbe6:	4620      	mov	r0, r4
   3cbe8:	f004 f86e 	bl	40cc8 <rshift>
   3cbec:	f8d8 3008 	ldr.w	r3, [r8, #8]
   3cbf0:	42ab      	cmp	r3, r5
   3cbf2:	da4b      	bge.n	3cc8c <__gethex+0x278>
   3cbf4:	4621      	mov	r1, r4
   3cbf6:	9802      	ldr	r0, [sp, #8]
   3cbf8:	f004 f9f2 	bl	40fe0 <_Bfree>
   3cbfc:	2300      	movs	r3, #0
   3cbfe:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3cc00:	27a3      	movs	r7, #163	; 0xa3
   3cc02:	6013      	str	r3, [r2, #0]
   3cc04:	e791      	b.n	3cb2a <__gethex+0x116>
   3cc06:	3101      	adds	r1, #1
   3cc08:	105b      	asrs	r3, r3, #1
   3cc0a:	e7aa      	b.n	3cb62 <__gethex+0x14e>
   3cc0c:	1e73      	subs	r3, r6, #1
   3cc0e:	9a07      	ldr	r2, [sp, #28]
   3cc10:	9305      	str	r3, [sp, #20]
   3cc12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   3cc16:	4293      	cmp	r3, r2
   3cc18:	d017      	beq.n	3cc4a <__gethex+0x236>
   3cc1a:	f1bb 0f20 	cmp.w	fp, #32
   3cc1e:	d106      	bne.n	3cc2e <__gethex+0x21a>
   3cc20:	9b04      	ldr	r3, [sp, #16]
   3cc22:	f843 ab04 	str.w	sl, [r3], #4
   3cc26:	f04f 0a00 	mov.w	sl, #0
   3cc2a:	9304      	str	r3, [sp, #16]
   3cc2c:	46d3      	mov	fp, sl
   3cc2e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   3cc32:	f004 f883 	bl	40d3c <__hexdig_fun>
   3cc36:	f000 000f 	and.w	r0, r0, #15
   3cc3a:	9b05      	ldr	r3, [sp, #20]
   3cc3c:	fa00 f00b 	lsl.w	r0, r0, fp
   3cc40:	f10b 0b04 	add.w	fp, fp, #4
   3cc44:	ea4a 0a00 	orr.w	sl, sl, r0
   3cc48:	e00d      	b.n	3cc66 <__gethex+0x252>
   3cc4a:	9b05      	ldr	r3, [sp, #20]
   3cc4c:	9a08      	ldr	r2, [sp, #32]
   3cc4e:	4413      	add	r3, r2
   3cc50:	42bb      	cmp	r3, r7
   3cc52:	d3e2      	bcc.n	3cc1a <__gethex+0x206>
   3cc54:	4618      	mov	r0, r3
   3cc56:	9a01      	ldr	r2, [sp, #4]
   3cc58:	9903      	ldr	r1, [sp, #12]
   3cc5a:	9309      	str	r3, [sp, #36]	; 0x24
   3cc5c:	f003 fed7 	bl	40a0e <strncmp>
   3cc60:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3cc62:	2800      	cmp	r0, #0
   3cc64:	d1d9      	bne.n	3cc1a <__gethex+0x206>
   3cc66:	461e      	mov	r6, r3
   3cc68:	e78c      	b.n	3cb84 <__gethex+0x170>
   3cc6a:	f04f 0a03 	mov.w	sl, #3
   3cc6e:	e7b8      	b.n	3cbe2 <__gethex+0x1ce>
   3cc70:	da09      	bge.n	3cc86 <__gethex+0x272>
   3cc72:	1bf7      	subs	r7, r6, r7
   3cc74:	4621      	mov	r1, r4
   3cc76:	9802      	ldr	r0, [sp, #8]
   3cc78:	463a      	mov	r2, r7
   3cc7a:	1bed      	subs	r5, r5, r7
   3cc7c:	f004 fb2a 	bl	412d4 <__lshift>
   3cc80:	4604      	mov	r4, r0
   3cc82:	f100 0914 	add.w	r9, r0, #20
   3cc86:	f04f 0a00 	mov.w	sl, #0
   3cc8a:	e7af      	b.n	3cbec <__gethex+0x1d8>
   3cc8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   3cc90:	42ab      	cmp	r3, r5
   3cc92:	dd6d      	ble.n	3cd70 <__gethex+0x35c>
   3cc94:	1b5d      	subs	r5, r3, r5
   3cc96:	42ae      	cmp	r6, r5
   3cc98:	dc30      	bgt.n	3ccfc <__gethex+0x2e8>
   3cc9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   3cc9e:	2b02      	cmp	r3, #2
   3cca0:	d022      	beq.n	3cce8 <__gethex+0x2d4>
   3cca2:	2b03      	cmp	r3, #3
   3cca4:	d024      	beq.n	3ccf0 <__gethex+0x2dc>
   3cca6:	2b01      	cmp	r3, #1
   3cca8:	d115      	bne.n	3ccd6 <__gethex+0x2c2>
   3ccaa:	42ae      	cmp	r6, r5
   3ccac:	d113      	bne.n	3ccd6 <__gethex+0x2c2>
   3ccae:	2e01      	cmp	r6, #1
   3ccb0:	d10b      	bne.n	3ccca <__gethex+0x2b6>
   3ccb2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   3ccb6:	2762      	movs	r7, #98	; 0x62
   3ccb8:	9a06      	ldr	r2, [sp, #24]
   3ccba:	6013      	str	r3, [r2, #0]
   3ccbc:	2301      	movs	r3, #1
   3ccbe:	6123      	str	r3, [r4, #16]
   3ccc0:	f8c9 3000 	str.w	r3, [r9]
   3ccc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3ccc6:	601c      	str	r4, [r3, #0]
   3ccc8:	e72f      	b.n	3cb2a <__gethex+0x116>
   3ccca:	1e71      	subs	r1, r6, #1
   3cccc:	4620      	mov	r0, r4
   3ccce:	f004 fc69 	bl	415a4 <__any_on>
   3ccd2:	2800      	cmp	r0, #0
   3ccd4:	d1ed      	bne.n	3ccb2 <__gethex+0x29e>
   3ccd6:	4621      	mov	r1, r4
   3ccd8:	9802      	ldr	r0, [sp, #8]
   3ccda:	f004 f981 	bl	40fe0 <_Bfree>
   3ccde:	2300      	movs	r3, #0
   3cce0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3cce2:	2750      	movs	r7, #80	; 0x50
   3cce4:	6013      	str	r3, [r2, #0]
   3cce6:	e720      	b.n	3cb2a <__gethex+0x116>
   3cce8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3ccea:	2b00      	cmp	r3, #0
   3ccec:	d1f3      	bne.n	3ccd6 <__gethex+0x2c2>
   3ccee:	e7e0      	b.n	3ccb2 <__gethex+0x29e>
   3ccf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3ccf2:	2b00      	cmp	r3, #0
   3ccf4:	d1dd      	bne.n	3ccb2 <__gethex+0x29e>
   3ccf6:	e7ee      	b.n	3ccd6 <__gethex+0x2c2>
   3ccf8:	00042be4 	.word	0x00042be4
   3ccfc:	1e6f      	subs	r7, r5, #1
   3ccfe:	f1ba 0f00 	cmp.w	sl, #0
   3cd02:	d132      	bne.n	3cd6a <__gethex+0x356>
   3cd04:	b127      	cbz	r7, 3cd10 <__gethex+0x2fc>
   3cd06:	4639      	mov	r1, r7
   3cd08:	4620      	mov	r0, r4
   3cd0a:	f004 fc4b 	bl	415a4 <__any_on>
   3cd0e:	4682      	mov	sl, r0
   3cd10:	117a      	asrs	r2, r7, #5
   3cd12:	2301      	movs	r3, #1
   3cd14:	f007 071f 	and.w	r7, r7, #31
   3cd18:	4629      	mov	r1, r5
   3cd1a:	4620      	mov	r0, r4
   3cd1c:	1b76      	subs	r6, r6, r5
   3cd1e:	fa03 f707 	lsl.w	r7, r3, r7
   3cd22:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
   3cd26:	421f      	tst	r7, r3
   3cd28:	f04f 0702 	mov.w	r7, #2
   3cd2c:	bf18      	it	ne
   3cd2e:	f04a 0a02 	orrne.w	sl, sl, #2
   3cd32:	f003 ffc9 	bl	40cc8 <rshift>
   3cd36:	f8d8 5004 	ldr.w	r5, [r8, #4]
   3cd3a:	f1ba 0f00 	cmp.w	sl, #0
   3cd3e:	d048      	beq.n	3cdd2 <__gethex+0x3be>
   3cd40:	f8d8 300c 	ldr.w	r3, [r8, #12]
   3cd44:	2b02      	cmp	r3, #2
   3cd46:	d015      	beq.n	3cd74 <__gethex+0x360>
   3cd48:	2b03      	cmp	r3, #3
   3cd4a:	d017      	beq.n	3cd7c <__gethex+0x368>
   3cd4c:	2b01      	cmp	r3, #1
   3cd4e:	d109      	bne.n	3cd64 <__gethex+0x350>
   3cd50:	f01a 0f02 	tst.w	sl, #2
   3cd54:	d006      	beq.n	3cd64 <__gethex+0x350>
   3cd56:	f8d9 3000 	ldr.w	r3, [r9]
   3cd5a:	ea4a 0a03 	orr.w	sl, sl, r3
   3cd5e:	f01a 0f01 	tst.w	sl, #1
   3cd62:	d10e      	bne.n	3cd82 <__gethex+0x36e>
   3cd64:	f047 0710 	orr.w	r7, r7, #16
   3cd68:	e033      	b.n	3cdd2 <__gethex+0x3be>
   3cd6a:	f04f 0a01 	mov.w	sl, #1
   3cd6e:	e7cf      	b.n	3cd10 <__gethex+0x2fc>
   3cd70:	2701      	movs	r7, #1
   3cd72:	e7e2      	b.n	3cd3a <__gethex+0x326>
   3cd74:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3cd76:	f1c3 0301 	rsb	r3, r3, #1
   3cd7a:	9315      	str	r3, [sp, #84]	; 0x54
   3cd7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3cd7e:	2b00      	cmp	r3, #0
   3cd80:	d0f0      	beq.n	3cd64 <__gethex+0x350>
   3cd82:	f8d4 9010 	ldr.w	r9, [r4, #16]
   3cd86:	f104 0314 	add.w	r3, r4, #20
   3cd8a:	f04f 0c00 	mov.w	ip, #0
   3cd8e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
   3cd92:	eb03 010a 	add.w	r1, r3, sl
   3cd96:	4618      	mov	r0, r3
   3cd98:	f853 2b04 	ldr.w	r2, [r3], #4
   3cd9c:	f1b2 3fff 	cmp.w	r2, #4294967295
   3cda0:	d01c      	beq.n	3cddc <__gethex+0x3c8>
   3cda2:	3201      	adds	r2, #1
   3cda4:	6002      	str	r2, [r0, #0]
   3cda6:	2f02      	cmp	r7, #2
   3cda8:	f104 0314 	add.w	r3, r4, #20
   3cdac:	d138      	bne.n	3ce20 <__gethex+0x40c>
   3cdae:	f8d8 2000 	ldr.w	r2, [r8]
   3cdb2:	3a01      	subs	r2, #1
   3cdb4:	42b2      	cmp	r2, r6
   3cdb6:	d10a      	bne.n	3cdce <__gethex+0x3ba>
   3cdb8:	1171      	asrs	r1, r6, #5
   3cdba:	2201      	movs	r2, #1
   3cdbc:	f006 061f 	and.w	r6, r6, #31
   3cdc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   3cdc4:	fa02 f606 	lsl.w	r6, r2, r6
   3cdc8:	421e      	tst	r6, r3
   3cdca:	bf18      	it	ne
   3cdcc:	4617      	movne	r7, r2
   3cdce:	f047 0720 	orr.w	r7, r7, #32
   3cdd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3cdd4:	601c      	str	r4, [r3, #0]
   3cdd6:	9b06      	ldr	r3, [sp, #24]
   3cdd8:	601d      	str	r5, [r3, #0]
   3cdda:	e6a6      	b.n	3cb2a <__gethex+0x116>
   3cddc:	4299      	cmp	r1, r3
   3cdde:	f843 cc04 	str.w	ip, [r3, #-4]
   3cde2:	d8d8      	bhi.n	3cd96 <__gethex+0x382>
   3cde4:	68a3      	ldr	r3, [r4, #8]
   3cde6:	4599      	cmp	r9, r3
   3cde8:	db12      	blt.n	3ce10 <__gethex+0x3fc>
   3cdea:	6861      	ldr	r1, [r4, #4]
   3cdec:	9802      	ldr	r0, [sp, #8]
   3cdee:	3101      	adds	r1, #1
   3cdf0:	f004 f8c2 	bl	40f78 <_Balloc>
   3cdf4:	6922      	ldr	r2, [r4, #16]
   3cdf6:	4683      	mov	fp, r0
   3cdf8:	f104 010c 	add.w	r1, r4, #12
   3cdfc:	3202      	adds	r2, #2
   3cdfe:	300c      	adds	r0, #12
   3ce00:	0092      	lsls	r2, r2, #2
   3ce02:	f003 fc0b 	bl	4061c <memcpy>
   3ce06:	4621      	mov	r1, r4
   3ce08:	465c      	mov	r4, fp
   3ce0a:	9802      	ldr	r0, [sp, #8]
   3ce0c:	f004 f8e8 	bl	40fe0 <_Bfree>
   3ce10:	6923      	ldr	r3, [r4, #16]
   3ce12:	1c5a      	adds	r2, r3, #1
   3ce14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   3ce18:	6122      	str	r2, [r4, #16]
   3ce1a:	2201      	movs	r2, #1
   3ce1c:	615a      	str	r2, [r3, #20]
   3ce1e:	e7c2      	b.n	3cda6 <__gethex+0x392>
   3ce20:	6922      	ldr	r2, [r4, #16]
   3ce22:	454a      	cmp	r2, r9
   3ce24:	dd0b      	ble.n	3ce3e <__gethex+0x42a>
   3ce26:	2101      	movs	r1, #1
   3ce28:	4620      	mov	r0, r4
   3ce2a:	f003 ff4d 	bl	40cc8 <rshift>
   3ce2e:	3501      	adds	r5, #1
   3ce30:	f8d8 3008 	ldr.w	r3, [r8, #8]
   3ce34:	42ab      	cmp	r3, r5
   3ce36:	f6ff aedd 	blt.w	3cbf4 <__gethex+0x1e0>
   3ce3a:	2701      	movs	r7, #1
   3ce3c:	e7c7      	b.n	3cdce <__gethex+0x3ba>
   3ce3e:	f016 061f 	ands.w	r6, r6, #31
   3ce42:	d0fa      	beq.n	3ce3a <__gethex+0x426>
   3ce44:	449a      	add	sl, r3
   3ce46:	f1c6 0620 	rsb	r6, r6, #32
   3ce4a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
   3ce4e:	f004 f959 	bl	41104 <__hi0bits>
   3ce52:	42b0      	cmp	r0, r6
   3ce54:	dbe7      	blt.n	3ce26 <__gethex+0x412>
   3ce56:	e7f0      	b.n	3ce3a <__gethex+0x426>

0003ce58 <_localeconv_r>:
   3ce58:	4800      	ldr	r0, [pc, #0]	; (3ce5c <_localeconv_r+0x4>)
   3ce5a:	4770      	bx	lr
   3ce5c:	20032254 	.word	0x20032254

0003ce60 <_lseek_r>:
   3ce60:	b538      	push	{r3, r4, r5, lr}
   3ce62:	4605      	mov	r5, r0
   3ce64:	4c06      	ldr	r4, [pc, #24]	; (3ce80 <_lseek_r+0x20>)
   3ce66:	4608      	mov	r0, r1
   3ce68:	4611      	mov	r1, r2
   3ce6a:	2200      	movs	r2, #0
   3ce6c:	6022      	str	r2, [r4, #0]
   3ce6e:	461a      	mov	r2, r3
   3ce70:	f001 fa56 	bl	3e320 <_lseek>
   3ce74:	1c43      	adds	r3, r0, #1
   3ce76:	d102      	bne.n	3ce7e <_lseek_r+0x1e>
   3ce78:	6823      	ldr	r3, [r4, #0]
   3ce7a:	b103      	cbz	r3, 3ce7e <_lseek_r+0x1e>
   3ce7c:	602b      	str	r3, [r5, #0]
   3ce7e:	bd38      	pop	{r3, r4, r5, pc}
   3ce80:	2002be8c 	.word	0x2002be8c

0003ce84 <__smakebuf_r>:
   3ce84:	898b      	ldrh	r3, [r1, #12]
   3ce86:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3ce88:	079d      	lsls	r5, r3, #30
   3ce8a:	4606      	mov	r6, r0
   3ce8c:	460c      	mov	r4, r1
   3ce8e:	d507      	bpl.n	3cea0 <__smakebuf_r+0x1c>
   3ce90:	f104 0347 	add.w	r3, r4, #71	; 0x47
   3ce94:	6023      	str	r3, [r4, #0]
   3ce96:	6123      	str	r3, [r4, #16]
   3ce98:	2301      	movs	r3, #1
   3ce9a:	6163      	str	r3, [r4, #20]
   3ce9c:	b002      	add	sp, #8
   3ce9e:	bd70      	pop	{r4, r5, r6, pc}
   3cea0:	ab01      	add	r3, sp, #4
   3cea2:	466a      	mov	r2, sp
   3cea4:	f004 f818 	bl	40ed8 <__swhatbuf_r>
   3cea8:	9900      	ldr	r1, [sp, #0]
   3ceaa:	4605      	mov	r5, r0
   3ceac:	4630      	mov	r0, r6
   3ceae:	f7fe fc63 	bl	3b778 <_malloc_r>
   3ceb2:	b948      	cbnz	r0, 3cec8 <__smakebuf_r+0x44>
   3ceb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3ceb8:	059a      	lsls	r2, r3, #22
   3ceba:	d4ef      	bmi.n	3ce9c <__smakebuf_r+0x18>
   3cebc:	f023 0303 	bic.w	r3, r3, #3
   3cec0:	f043 0302 	orr.w	r3, r3, #2
   3cec4:	81a3      	strh	r3, [r4, #12]
   3cec6:	e7e3      	b.n	3ce90 <__smakebuf_r+0xc>
   3cec8:	4b0d      	ldr	r3, [pc, #52]	; (3cf00 <__smakebuf_r+0x7c>)
   3ceca:	62b3      	str	r3, [r6, #40]	; 0x28
   3cecc:	89a3      	ldrh	r3, [r4, #12]
   3cece:	6020      	str	r0, [r4, #0]
   3ced0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3ced4:	6120      	str	r0, [r4, #16]
   3ced6:	81a3      	strh	r3, [r4, #12]
   3ced8:	9b00      	ldr	r3, [sp, #0]
   3ceda:	6163      	str	r3, [r4, #20]
   3cedc:	9b01      	ldr	r3, [sp, #4]
   3cede:	b15b      	cbz	r3, 3cef8 <__smakebuf_r+0x74>
   3cee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   3cee4:	4630      	mov	r0, r6
   3cee6:	f000 fca5 	bl	3d834 <_isatty_r>
   3ceea:	b128      	cbz	r0, 3cef8 <__smakebuf_r+0x74>
   3ceec:	89a3      	ldrh	r3, [r4, #12]
   3ceee:	f023 0303 	bic.w	r3, r3, #3
   3cef2:	f043 0301 	orr.w	r3, r3, #1
   3cef6:	81a3      	strh	r3, [r4, #12]
   3cef8:	89a3      	ldrh	r3, [r4, #12]
   3cefa:	431d      	orrs	r5, r3
   3cefc:	81a5      	strh	r5, [r4, #12]
   3cefe:	e7cd      	b.n	3ce9c <__smakebuf_r+0x18>
   3cf00:	0003c8dd 	.word	0x0003c8dd

0003cf04 <__malloc_lock>:
   3cf04:	4801      	ldr	r0, [pc, #4]	; (3cf0c <__malloc_lock+0x8>)
   3cf06:	f003 bfe5 	b.w	40ed4 <__retarget_lock_acquire_recursive>
   3cf0a:	bf00      	nop
   3cf0c:	2002be94 	.word	0x2002be94

0003cf10 <__malloc_unlock>:
   3cf10:	4801      	ldr	r0, [pc, #4]	; (3cf18 <__malloc_unlock+0x8>)
   3cf12:	f003 bfe0 	b.w	40ed6 <__retarget_lock_release_recursive>
   3cf16:	bf00      	nop
   3cf18:	2002be94 	.word	0x2002be94

0003cf1c <__pow5mult>:
   3cf1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3cf20:	4615      	mov	r5, r2
   3cf22:	f012 0203 	ands.w	r2, r2, #3
   3cf26:	4606      	mov	r6, r0
   3cf28:	460f      	mov	r7, r1
   3cf2a:	d007      	beq.n	3cf3c <__pow5mult+0x20>
   3cf2c:	3a01      	subs	r2, #1
   3cf2e:	4c21      	ldr	r4, [pc, #132]	; (3cfb4 <__pow5mult+0x98>)
   3cf30:	2300      	movs	r3, #0
   3cf32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   3cf36:	f004 f86a 	bl	4100e <__multadd>
   3cf3a:	4607      	mov	r7, r0
   3cf3c:	10ad      	asrs	r5, r5, #2
   3cf3e:	d035      	beq.n	3cfac <__pow5mult+0x90>
   3cf40:	6a74      	ldr	r4, [r6, #36]	; 0x24
   3cf42:	b93c      	cbnz	r4, 3cf54 <__pow5mult+0x38>
   3cf44:	2010      	movs	r0, #16
   3cf46:	f7fe fbb9 	bl	3b6bc <malloc>
   3cf4a:	6270      	str	r0, [r6, #36]	; 0x24
   3cf4c:	6004      	str	r4, [r0, #0]
   3cf4e:	60c4      	str	r4, [r0, #12]
   3cf50:	e9c0 4401 	strd	r4, r4, [r0, #4]
   3cf54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   3cf58:	f8d8 4008 	ldr.w	r4, [r8, #8]
   3cf5c:	b94c      	cbnz	r4, 3cf72 <__pow5mult+0x56>
   3cf5e:	f240 2171 	movw	r1, #625	; 0x271
   3cf62:	4630      	mov	r0, r6
   3cf64:	f004 f91e 	bl	411a4 <__i2b>
   3cf68:	2300      	movs	r3, #0
   3cf6a:	4604      	mov	r4, r0
   3cf6c:	f8c8 0008 	str.w	r0, [r8, #8]
   3cf70:	6003      	str	r3, [r0, #0]
   3cf72:	f04f 0800 	mov.w	r8, #0
   3cf76:	07eb      	lsls	r3, r5, #31
   3cf78:	d50a      	bpl.n	3cf90 <__pow5mult+0x74>
   3cf7a:	4639      	mov	r1, r7
   3cf7c:	4622      	mov	r2, r4
   3cf7e:	4630      	mov	r0, r6
   3cf80:	f004 f919 	bl	411b6 <__multiply>
   3cf84:	4681      	mov	r9, r0
   3cf86:	4639      	mov	r1, r7
   3cf88:	4630      	mov	r0, r6
   3cf8a:	464f      	mov	r7, r9
   3cf8c:	f004 f828 	bl	40fe0 <_Bfree>
   3cf90:	106d      	asrs	r5, r5, #1
   3cf92:	d00b      	beq.n	3cfac <__pow5mult+0x90>
   3cf94:	6820      	ldr	r0, [r4, #0]
   3cf96:	b938      	cbnz	r0, 3cfa8 <__pow5mult+0x8c>
   3cf98:	4622      	mov	r2, r4
   3cf9a:	4621      	mov	r1, r4
   3cf9c:	4630      	mov	r0, r6
   3cf9e:	f004 f90a 	bl	411b6 <__multiply>
   3cfa2:	6020      	str	r0, [r4, #0]
   3cfa4:	f8c0 8000 	str.w	r8, [r0]
   3cfa8:	4604      	mov	r4, r0
   3cfaa:	e7e4      	b.n	3cf76 <__pow5mult+0x5a>
   3cfac:	4638      	mov	r0, r7
   3cfae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3cfb2:	bf00      	nop
   3cfb4:	00042bf0 	.word	0x00042bf0

0003cfb8 <__ulp>:
   3cfb8:	4b10      	ldr	r3, [pc, #64]	; (3cffc <__ulp+0x44>)
   3cfba:	ee10 2a90 	vmov	r2, s1
   3cfbe:	401a      	ands	r2, r3
   3cfc0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   3cfc4:	2b00      	cmp	r3, #0
   3cfc6:	dd04      	ble.n	3cfd2 <__ulp+0x1a>
   3cfc8:	2000      	movs	r0, #0
   3cfca:	4619      	mov	r1, r3
   3cfcc:	ec41 0b10 	vmov	d0, r0, r1
   3cfd0:	4770      	bx	lr
   3cfd2:	425b      	negs	r3, r3
   3cfd4:	2000      	movs	r0, #0
   3cfd6:	2100      	movs	r1, #0
   3cfd8:	151b      	asrs	r3, r3, #20
   3cfda:	2b13      	cmp	r3, #19
   3cfdc:	dc04      	bgt.n	3cfe8 <__ulp+0x30>
   3cfde:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   3cfe2:	fa42 f103 	asr.w	r1, r2, r3
   3cfe6:	e7f1      	b.n	3cfcc <__ulp+0x14>
   3cfe8:	3b14      	subs	r3, #20
   3cfea:	2b1e      	cmp	r3, #30
   3cfec:	bfd6      	itet	le
   3cfee:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   3cff2:	2301      	movgt	r3, #1
   3cff4:	fa22 f303 	lsrle.w	r3, r2, r3
   3cff8:	4618      	mov	r0, r3
   3cffa:	e7e7      	b.n	3cfcc <__ulp+0x14>
   3cffc:	7ff00000 	.word	0x7ff00000

0003d000 <__b2d>:
   3d000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d002:	6905      	ldr	r5, [r0, #16]
   3d004:	f100 0714 	add.w	r7, r0, #20
   3d008:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   3d00c:	f855 4c04 	ldr.w	r4, [r5, #-4]
   3d010:	1f2e      	subs	r6, r5, #4
   3d012:	4620      	mov	r0, r4
   3d014:	f004 f876 	bl	41104 <__hi0bits>
   3d018:	f1c0 0320 	rsb	r3, r0, #32
   3d01c:	280a      	cmp	r0, #10
   3d01e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 3d09c <__b2d+0x9c>
   3d022:	600b      	str	r3, [r1, #0]
   3d024:	dc15      	bgt.n	3d052 <__b2d+0x52>
   3d026:	f1c0 0e0b 	rsb	lr, r0, #11
   3d02a:	42b7      	cmp	r7, r6
   3d02c:	f100 0015 	add.w	r0, r0, #21
   3d030:	fa24 f10e 	lsr.w	r1, r4, lr
   3d034:	fa04 f000 	lsl.w	r0, r4, r0
   3d038:	ea41 030c 	orr.w	r3, r1, ip
   3d03c:	bf34      	ite	cc
   3d03e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   3d042:	2100      	movcs	r1, #0
   3d044:	fa21 f10e 	lsr.w	r1, r1, lr
   3d048:	ea40 0201 	orr.w	r2, r0, r1
   3d04c:	ec43 2b10 	vmov	d0, r2, r3
   3d050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3d052:	42b7      	cmp	r7, r6
   3d054:	bf3a      	itte	cc
   3d056:	f1a5 0608 	subcc.w	r6, r5, #8
   3d05a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   3d05e:	2100      	movcs	r1, #0
   3d060:	380b      	subs	r0, #11
   3d062:	d017      	beq.n	3d094 <__b2d+0x94>
   3d064:	f1c0 0c20 	rsb	ip, r0, #32
   3d068:	fa04 f500 	lsl.w	r5, r4, r0
   3d06c:	42be      	cmp	r6, r7
   3d06e:	fa01 f000 	lsl.w	r0, r1, r0
   3d072:	fa21 f40c 	lsr.w	r4, r1, ip
   3d076:	ea45 0504 	orr.w	r5, r5, r4
   3d07a:	bf8c      	ite	hi
   3d07c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   3d080:	2400      	movls	r4, #0
   3d082:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   3d086:	fa24 f40c 	lsr.w	r4, r4, ip
   3d08a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   3d08e:	ea40 0204 	orr.w	r2, r0, r4
   3d092:	e7db      	b.n	3d04c <__b2d+0x4c>
   3d094:	ea44 030c 	orr.w	r3, r4, ip
   3d098:	460a      	mov	r2, r1
   3d09a:	e7d7      	b.n	3d04c <__b2d+0x4c>
   3d09c:	3ff00000 	.word	0x3ff00000

0003d0a0 <_svfiprintf_r>:
   3d0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d0a4:	461e      	mov	r6, r3
   3d0a6:	898b      	ldrh	r3, [r1, #12]
   3d0a8:	b09d      	sub	sp, #116	; 0x74
   3d0aa:	4607      	mov	r7, r0
   3d0ac:	061b      	lsls	r3, r3, #24
   3d0ae:	460d      	mov	r5, r1
   3d0b0:	4614      	mov	r4, r2
   3d0b2:	d50e      	bpl.n	3d0d2 <_svfiprintf_r+0x32>
   3d0b4:	690b      	ldr	r3, [r1, #16]
   3d0b6:	b963      	cbnz	r3, 3d0d2 <_svfiprintf_r+0x32>
   3d0b8:	2140      	movs	r1, #64	; 0x40
   3d0ba:	f7fe fb5d 	bl	3b778 <_malloc_r>
   3d0be:	6028      	str	r0, [r5, #0]
   3d0c0:	6128      	str	r0, [r5, #16]
   3d0c2:	b920      	cbnz	r0, 3d0ce <_svfiprintf_r+0x2e>
   3d0c4:	230c      	movs	r3, #12
   3d0c6:	603b      	str	r3, [r7, #0]
   3d0c8:	f04f 30ff 	mov.w	r0, #4294967295
   3d0cc:	e0c9      	b.n	3d262 <_svfiprintf_r+0x1c2>
   3d0ce:	2340      	movs	r3, #64	; 0x40
   3d0d0:	616b      	str	r3, [r5, #20]
   3d0d2:	2300      	movs	r3, #0
   3d0d4:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 3d27c <_svfiprintf_r+0x1dc>
   3d0d8:	f04f 0a01 	mov.w	sl, #1
   3d0dc:	9603      	str	r6, [sp, #12]
   3d0de:	9309      	str	r3, [sp, #36]	; 0x24
   3d0e0:	2320      	movs	r3, #32
   3d0e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3d0e6:	2330      	movs	r3, #48	; 0x30
   3d0e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3d0ec:	4623      	mov	r3, r4
   3d0ee:	461e      	mov	r6, r3
   3d0f0:	f813 2b01 	ldrb.w	r2, [r3], #1
   3d0f4:	b10a      	cbz	r2, 3d0fa <_svfiprintf_r+0x5a>
   3d0f6:	2a25      	cmp	r2, #37	; 0x25
   3d0f8:	d1f9      	bne.n	3d0ee <_svfiprintf_r+0x4e>
   3d0fa:	ebb6 0b04 	subs.w	fp, r6, r4
   3d0fe:	d00b      	beq.n	3d118 <_svfiprintf_r+0x78>
   3d100:	465b      	mov	r3, fp
   3d102:	4622      	mov	r2, r4
   3d104:	4629      	mov	r1, r5
   3d106:	4638      	mov	r0, r7
   3d108:	f004 faa1 	bl	4164e <__ssputs_r>
   3d10c:	3001      	adds	r0, #1
   3d10e:	f000 80a3 	beq.w	3d258 <_svfiprintf_r+0x1b8>
   3d112:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3d114:	445b      	add	r3, fp
   3d116:	9309      	str	r3, [sp, #36]	; 0x24
   3d118:	7833      	ldrb	r3, [r6, #0]
   3d11a:	2b00      	cmp	r3, #0
   3d11c:	f000 809c 	beq.w	3d258 <_svfiprintf_r+0x1b8>
   3d120:	2300      	movs	r3, #0
   3d122:	f04f 32ff 	mov.w	r2, #4294967295
   3d126:	3601      	adds	r6, #1
   3d128:	9304      	str	r3, [sp, #16]
   3d12a:	9307      	str	r3, [sp, #28]
   3d12c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3d130:	931a      	str	r3, [sp, #104]	; 0x68
   3d132:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3d136:	4634      	mov	r4, r6
   3d138:	2205      	movs	r2, #5
   3d13a:	4850      	ldr	r0, [pc, #320]	; (3d27c <_svfiprintf_r+0x1dc>)
   3d13c:	f814 1b01 	ldrb.w	r1, [r4], #1
   3d140:	f003 fa50 	bl	405e4 <memchr>
   3d144:	9b04      	ldr	r3, [sp, #16]
   3d146:	b9c0      	cbnz	r0, 3d17a <_svfiprintf_r+0xda>
   3d148:	06d9      	lsls	r1, r3, #27
   3d14a:	bf44      	itt	mi
   3d14c:	2220      	movmi	r2, #32
   3d14e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3d152:	071a      	lsls	r2, r3, #28
   3d154:	bf44      	itt	mi
   3d156:	222b      	movmi	r2, #43	; 0x2b
   3d158:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3d15c:	7832      	ldrb	r2, [r6, #0]
   3d15e:	2a2a      	cmp	r2, #42	; 0x2a
   3d160:	d013      	beq.n	3d18a <_svfiprintf_r+0xea>
   3d162:	4634      	mov	r4, r6
   3d164:	9a07      	ldr	r2, [sp, #28]
   3d166:	2000      	movs	r0, #0
   3d168:	260a      	movs	r6, #10
   3d16a:	4621      	mov	r1, r4
   3d16c:	f811 3b01 	ldrb.w	r3, [r1], #1
   3d170:	3b30      	subs	r3, #48	; 0x30
   3d172:	2b09      	cmp	r3, #9
   3d174:	d94b      	bls.n	3d20e <_svfiprintf_r+0x16e>
   3d176:	b970      	cbnz	r0, 3d196 <_svfiprintf_r+0xf6>
   3d178:	e014      	b.n	3d1a4 <_svfiprintf_r+0x104>
   3d17a:	eba0 0009 	sub.w	r0, r0, r9
   3d17e:	4626      	mov	r6, r4
   3d180:	fa0a f000 	lsl.w	r0, sl, r0
   3d184:	4318      	orrs	r0, r3
   3d186:	9004      	str	r0, [sp, #16]
   3d188:	e7d5      	b.n	3d136 <_svfiprintf_r+0x96>
   3d18a:	9a03      	ldr	r2, [sp, #12]
   3d18c:	1d11      	adds	r1, r2, #4
   3d18e:	6812      	ldr	r2, [r2, #0]
   3d190:	2a00      	cmp	r2, #0
   3d192:	9103      	str	r1, [sp, #12]
   3d194:	db01      	blt.n	3d19a <_svfiprintf_r+0xfa>
   3d196:	9207      	str	r2, [sp, #28]
   3d198:	e004      	b.n	3d1a4 <_svfiprintf_r+0x104>
   3d19a:	4252      	negs	r2, r2
   3d19c:	f043 0302 	orr.w	r3, r3, #2
   3d1a0:	9207      	str	r2, [sp, #28]
   3d1a2:	9304      	str	r3, [sp, #16]
   3d1a4:	7823      	ldrb	r3, [r4, #0]
   3d1a6:	2b2e      	cmp	r3, #46	; 0x2e
   3d1a8:	d10c      	bne.n	3d1c4 <_svfiprintf_r+0x124>
   3d1aa:	7863      	ldrb	r3, [r4, #1]
   3d1ac:	2b2a      	cmp	r3, #42	; 0x2a
   3d1ae:	d133      	bne.n	3d218 <_svfiprintf_r+0x178>
   3d1b0:	9b03      	ldr	r3, [sp, #12]
   3d1b2:	3402      	adds	r4, #2
   3d1b4:	1d1a      	adds	r2, r3, #4
   3d1b6:	681b      	ldr	r3, [r3, #0]
   3d1b8:	2b00      	cmp	r3, #0
   3d1ba:	9203      	str	r2, [sp, #12]
   3d1bc:	bfb8      	it	lt
   3d1be:	f04f 33ff 	movlt.w	r3, #4294967295
   3d1c2:	9305      	str	r3, [sp, #20]
   3d1c4:	4e2e      	ldr	r6, [pc, #184]	; (3d280 <_svfiprintf_r+0x1e0>)
   3d1c6:	2203      	movs	r2, #3
   3d1c8:	7821      	ldrb	r1, [r4, #0]
   3d1ca:	4630      	mov	r0, r6
   3d1cc:	f003 fa0a 	bl	405e4 <memchr>
   3d1d0:	b138      	cbz	r0, 3d1e2 <_svfiprintf_r+0x142>
   3d1d2:	2340      	movs	r3, #64	; 0x40
   3d1d4:	1b80      	subs	r0, r0, r6
   3d1d6:	3401      	adds	r4, #1
   3d1d8:	fa03 f000 	lsl.w	r0, r3, r0
   3d1dc:	9b04      	ldr	r3, [sp, #16]
   3d1de:	4303      	orrs	r3, r0
   3d1e0:	9304      	str	r3, [sp, #16]
   3d1e2:	f814 1b01 	ldrb.w	r1, [r4], #1
   3d1e6:	2206      	movs	r2, #6
   3d1e8:	4826      	ldr	r0, [pc, #152]	; (3d284 <_svfiprintf_r+0x1e4>)
   3d1ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3d1ee:	f003 f9f9 	bl	405e4 <memchr>
   3d1f2:	2800      	cmp	r0, #0
   3d1f4:	d038      	beq.n	3d268 <_svfiprintf_r+0x1c8>
   3d1f6:	4b24      	ldr	r3, [pc, #144]	; (3d288 <_svfiprintf_r+0x1e8>)
   3d1f8:	bb13      	cbnz	r3, 3d240 <_svfiprintf_r+0x1a0>
   3d1fa:	9b03      	ldr	r3, [sp, #12]
   3d1fc:	3307      	adds	r3, #7
   3d1fe:	f023 0307 	bic.w	r3, r3, #7
   3d202:	3308      	adds	r3, #8
   3d204:	9303      	str	r3, [sp, #12]
   3d206:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3d208:	4443      	add	r3, r8
   3d20a:	9309      	str	r3, [sp, #36]	; 0x24
   3d20c:	e76e      	b.n	3d0ec <_svfiprintf_r+0x4c>
   3d20e:	fb06 3202 	mla	r2, r6, r2, r3
   3d212:	2001      	movs	r0, #1
   3d214:	460c      	mov	r4, r1
   3d216:	e7a8      	b.n	3d16a <_svfiprintf_r+0xca>
   3d218:	2300      	movs	r3, #0
   3d21a:	3401      	adds	r4, #1
   3d21c:	260a      	movs	r6, #10
   3d21e:	4619      	mov	r1, r3
   3d220:	9305      	str	r3, [sp, #20]
   3d222:	4620      	mov	r0, r4
   3d224:	f810 2b01 	ldrb.w	r2, [r0], #1
   3d228:	3a30      	subs	r2, #48	; 0x30
   3d22a:	2a09      	cmp	r2, #9
   3d22c:	d903      	bls.n	3d236 <_svfiprintf_r+0x196>
   3d22e:	2b00      	cmp	r3, #0
   3d230:	d0c8      	beq.n	3d1c4 <_svfiprintf_r+0x124>
   3d232:	9105      	str	r1, [sp, #20]
   3d234:	e7c6      	b.n	3d1c4 <_svfiprintf_r+0x124>
   3d236:	fb06 2101 	mla	r1, r6, r1, r2
   3d23a:	2301      	movs	r3, #1
   3d23c:	4604      	mov	r4, r0
   3d23e:	e7f0      	b.n	3d222 <_svfiprintf_r+0x182>
   3d240:	ab03      	add	r3, sp, #12
   3d242:	462a      	mov	r2, r5
   3d244:	a904      	add	r1, sp, #16
   3d246:	4638      	mov	r0, r7
   3d248:	9300      	str	r3, [sp, #0]
   3d24a:	4b10      	ldr	r3, [pc, #64]	; (3d28c <_svfiprintf_r+0x1ec>)
   3d24c:	f7fe fc16 	bl	3ba7c <_printf_float>
   3d250:	f1b0 3fff 	cmp.w	r0, #4294967295
   3d254:	4680      	mov	r8, r0
   3d256:	d1d6      	bne.n	3d206 <_svfiprintf_r+0x166>
   3d258:	89ab      	ldrh	r3, [r5, #12]
   3d25a:	065b      	lsls	r3, r3, #25
   3d25c:	f53f af34 	bmi.w	3d0c8 <_svfiprintf_r+0x28>
   3d260:	9809      	ldr	r0, [sp, #36]	; 0x24
   3d262:	b01d      	add	sp, #116	; 0x74
   3d264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d268:	ab03      	add	r3, sp, #12
   3d26a:	462a      	mov	r2, r5
   3d26c:	a904      	add	r1, sp, #16
   3d26e:	4638      	mov	r0, r7
   3d270:	9300      	str	r3, [sp, #0]
   3d272:	4b06      	ldr	r3, [pc, #24]	; (3d28c <_svfiprintf_r+0x1ec>)
   3d274:	f7fe fe2c 	bl	3bed0 <_printf_i>
   3d278:	e7ea      	b.n	3d250 <_svfiprintf_r+0x1b0>
   3d27a:	bf00      	nop
   3d27c:	00049240 	.word	0x00049240
   3d280:	00049246 	.word	0x00049246
   3d284:	0004924a 	.word	0x0004924a
   3d288:	0003ba7d 	.word	0x0003ba7d
   3d28c:	0004164f 	.word	0x0004164f

0003d290 <__ssvfiscanf_r>:
   3d290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d294:	460c      	mov	r4, r1
   3d296:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   3d29a:	2100      	movs	r1, #0
   3d29c:	4606      	mov	r6, r0
   3d29e:	f10d 0804 	add.w	r8, sp, #4
   3d2a2:	4f9b      	ldr	r7, [pc, #620]	; (3d510 <__ssvfiscanf_r+0x280>)
   3d2a4:	f8df 9274 	ldr.w	r9, [pc, #628]	; 3d51c <__ssvfiscanf_r+0x28c>
   3d2a8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   3d2ac:	9300      	str	r3, [sp, #0]
   3d2ae:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   3d2b2:	4998      	ldr	r1, [pc, #608]	; (3d514 <__ssvfiscanf_r+0x284>)
   3d2b4:	91a0      	str	r1, [sp, #640]	; 0x280
   3d2b6:	4998      	ldr	r1, [pc, #608]	; (3d518 <__ssvfiscanf_r+0x288>)
   3d2b8:	91a1      	str	r1, [sp, #644]	; 0x284
   3d2ba:	f892 a000 	ldrb.w	sl, [r2]
   3d2be:	f1ba 0f00 	cmp.w	sl, #0
   3d2c2:	f000 8122 	beq.w	3d50a <__ssvfiscanf_r+0x27a>
   3d2c6:	f81a 3007 	ldrb.w	r3, [sl, r7]
   3d2ca:	1c55      	adds	r5, r2, #1
   3d2cc:	f013 0308 	ands.w	r3, r3, #8
   3d2d0:	d019      	beq.n	3d306 <__ssvfiscanf_r+0x76>
   3d2d2:	6863      	ldr	r3, [r4, #4]
   3d2d4:	2b00      	cmp	r3, #0
   3d2d6:	dd0f      	ble.n	3d2f8 <__ssvfiscanf_r+0x68>
   3d2d8:	6823      	ldr	r3, [r4, #0]
   3d2da:	781a      	ldrb	r2, [r3, #0]
   3d2dc:	5cba      	ldrb	r2, [r7, r2]
   3d2de:	0712      	lsls	r2, r2, #28
   3d2e0:	d401      	bmi.n	3d2e6 <__ssvfiscanf_r+0x56>
   3d2e2:	462a      	mov	r2, r5
   3d2e4:	e7e9      	b.n	3d2ba <__ssvfiscanf_r+0x2a>
   3d2e6:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3d2e8:	3301      	adds	r3, #1
   3d2ea:	3201      	adds	r2, #1
   3d2ec:	6023      	str	r3, [r4, #0]
   3d2ee:	9245      	str	r2, [sp, #276]	; 0x114
   3d2f0:	6862      	ldr	r2, [r4, #4]
   3d2f2:	3a01      	subs	r2, #1
   3d2f4:	6062      	str	r2, [r4, #4]
   3d2f6:	e7ec      	b.n	3d2d2 <__ssvfiscanf_r+0x42>
   3d2f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3d2fa:	4621      	mov	r1, r4
   3d2fc:	4630      	mov	r0, r6
   3d2fe:	4798      	blx	r3
   3d300:	2800      	cmp	r0, #0
   3d302:	d0e9      	beq.n	3d2d8 <__ssvfiscanf_r+0x48>
   3d304:	e7ed      	b.n	3d2e2 <__ssvfiscanf_r+0x52>
   3d306:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   3d30a:	d17f      	bne.n	3d40c <__ssvfiscanf_r+0x17c>
   3d30c:	9341      	str	r3, [sp, #260]	; 0x104
   3d30e:	9343      	str	r3, [sp, #268]	; 0x10c
   3d310:	7853      	ldrb	r3, [r2, #1]
   3d312:	2b2a      	cmp	r3, #42	; 0x2a
   3d314:	bf04      	itt	eq
   3d316:	2310      	moveq	r3, #16
   3d318:	1c95      	addeq	r5, r2, #2
   3d31a:	f04f 020a 	mov.w	r2, #10
   3d31e:	bf08      	it	eq
   3d320:	9341      	streq	r3, [sp, #260]	; 0x104
   3d322:	46ab      	mov	fp, r5
   3d324:	f81b 1b01 	ldrb.w	r1, [fp], #1
   3d328:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   3d32c:	2b09      	cmp	r3, #9
   3d32e:	d921      	bls.n	3d374 <__ssvfiscanf_r+0xe4>
   3d330:	2203      	movs	r2, #3
   3d332:	487a      	ldr	r0, [pc, #488]	; (3d51c <__ssvfiscanf_r+0x28c>)
   3d334:	f003 f956 	bl	405e4 <memchr>
   3d338:	b138      	cbz	r0, 3d34a <__ssvfiscanf_r+0xba>
   3d33a:	eba0 0309 	sub.w	r3, r0, r9
   3d33e:	2001      	movs	r0, #1
   3d340:	465d      	mov	r5, fp
   3d342:	4098      	lsls	r0, r3
   3d344:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3d346:	4318      	orrs	r0, r3
   3d348:	9041      	str	r0, [sp, #260]	; 0x104
   3d34a:	f815 3b01 	ldrb.w	r3, [r5], #1
   3d34e:	2b67      	cmp	r3, #103	; 0x67
   3d350:	d848      	bhi.n	3d3e4 <__ssvfiscanf_r+0x154>
   3d352:	2b65      	cmp	r3, #101	; 0x65
   3d354:	f080 809f 	bcs.w	3d496 <__ssvfiscanf_r+0x206>
   3d358:	2b47      	cmp	r3, #71	; 0x47
   3d35a:	d812      	bhi.n	3d382 <__ssvfiscanf_r+0xf2>
   3d35c:	2b45      	cmp	r3, #69	; 0x45
   3d35e:	f080 809a 	bcs.w	3d496 <__ssvfiscanf_r+0x206>
   3d362:	2b00      	cmp	r3, #0
   3d364:	d06b      	beq.n	3d43e <__ssvfiscanf_r+0x1ae>
   3d366:	2b25      	cmp	r3, #37	; 0x25
   3d368:	d050      	beq.n	3d40c <__ssvfiscanf_r+0x17c>
   3d36a:	2303      	movs	r3, #3
   3d36c:	9347      	str	r3, [sp, #284]	; 0x11c
   3d36e:	230a      	movs	r3, #10
   3d370:	9342      	str	r3, [sp, #264]	; 0x108
   3d372:	e016      	b.n	3d3a2 <__ssvfiscanf_r+0x112>
   3d374:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   3d376:	465d      	mov	r5, fp
   3d378:	fb02 1303 	mla	r3, r2, r3, r1
   3d37c:	3b30      	subs	r3, #48	; 0x30
   3d37e:	9343      	str	r3, [sp, #268]	; 0x10c
   3d380:	e7cf      	b.n	3d322 <__ssvfiscanf_r+0x92>
   3d382:	2b5b      	cmp	r3, #91	; 0x5b
   3d384:	d067      	beq.n	3d456 <__ssvfiscanf_r+0x1c6>
   3d386:	d827      	bhi.n	3d3d8 <__ssvfiscanf_r+0x148>
   3d388:	2b58      	cmp	r3, #88	; 0x58
   3d38a:	d1ee      	bne.n	3d36a <__ssvfiscanf_r+0xda>
   3d38c:	9a41      	ldr	r2, [sp, #260]	; 0x104
   3d38e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   3d392:	9241      	str	r2, [sp, #260]	; 0x104
   3d394:	2210      	movs	r2, #16
   3d396:	2b6f      	cmp	r3, #111	; 0x6f
   3d398:	9242      	str	r2, [sp, #264]	; 0x108
   3d39a:	bf34      	ite	cc
   3d39c:	2303      	movcc	r3, #3
   3d39e:	2304      	movcs	r3, #4
   3d3a0:	9347      	str	r3, [sp, #284]	; 0x11c
   3d3a2:	6863      	ldr	r3, [r4, #4]
   3d3a4:	2b00      	cmp	r3, #0
   3d3a6:	dd78      	ble.n	3d49a <__ssvfiscanf_r+0x20a>
   3d3a8:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3d3aa:	0659      	lsls	r1, r3, #25
   3d3ac:	d404      	bmi.n	3d3b8 <__ssvfiscanf_r+0x128>
   3d3ae:	6823      	ldr	r3, [r4, #0]
   3d3b0:	781a      	ldrb	r2, [r3, #0]
   3d3b2:	5cba      	ldrb	r2, [r7, r2]
   3d3b4:	0712      	lsls	r2, r2, #28
   3d3b6:	d477      	bmi.n	3d4a8 <__ssvfiscanf_r+0x218>
   3d3b8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   3d3ba:	2b02      	cmp	r3, #2
   3d3bc:	f300 8087 	bgt.w	3d4ce <__ssvfiscanf_r+0x23e>
   3d3c0:	466b      	mov	r3, sp
   3d3c2:	4622      	mov	r2, r4
   3d3c4:	a941      	add	r1, sp, #260	; 0x104
   3d3c6:	4630      	mov	r0, r6
   3d3c8:	f000 f8ac 	bl	3d524 <_scanf_chars>
   3d3cc:	2801      	cmp	r0, #1
   3d3ce:	f000 809c 	beq.w	3d50a <__ssvfiscanf_r+0x27a>
   3d3d2:	2802      	cmp	r0, #2
   3d3d4:	d185      	bne.n	3d2e2 <__ssvfiscanf_r+0x52>
   3d3d6:	e02f      	b.n	3d438 <__ssvfiscanf_r+0x1a8>
   3d3d8:	2b63      	cmp	r3, #99	; 0x63
   3d3da:	d047      	beq.n	3d46c <__ssvfiscanf_r+0x1dc>
   3d3dc:	2b64      	cmp	r3, #100	; 0x64
   3d3de:	d1c4      	bne.n	3d36a <__ssvfiscanf_r+0xda>
   3d3e0:	220a      	movs	r2, #10
   3d3e2:	e7d8      	b.n	3d396 <__ssvfiscanf_r+0x106>
   3d3e4:	2b70      	cmp	r3, #112	; 0x70
   3d3e6:	d02d      	beq.n	3d444 <__ssvfiscanf_r+0x1b4>
   3d3e8:	d808      	bhi.n	3d3fc <__ssvfiscanf_r+0x16c>
   3d3ea:	2b6e      	cmp	r3, #110	; 0x6e
   3d3ec:	d044      	beq.n	3d478 <__ssvfiscanf_r+0x1e8>
   3d3ee:	d82e      	bhi.n	3d44e <__ssvfiscanf_r+0x1be>
   3d3f0:	2b69      	cmp	r3, #105	; 0x69
   3d3f2:	d1ba      	bne.n	3d36a <__ssvfiscanf_r+0xda>
   3d3f4:	2300      	movs	r3, #0
   3d3f6:	9342      	str	r3, [sp, #264]	; 0x108
   3d3f8:	2303      	movs	r3, #3
   3d3fa:	e7d1      	b.n	3d3a0 <__ssvfiscanf_r+0x110>
   3d3fc:	2b75      	cmp	r3, #117	; 0x75
   3d3fe:	d0ef      	beq.n	3d3e0 <__ssvfiscanf_r+0x150>
   3d400:	2b78      	cmp	r3, #120	; 0x78
   3d402:	d0c3      	beq.n	3d38c <__ssvfiscanf_r+0xfc>
   3d404:	2b73      	cmp	r3, #115	; 0x73
   3d406:	d1b0      	bne.n	3d36a <__ssvfiscanf_r+0xda>
   3d408:	2302      	movs	r3, #2
   3d40a:	e7c9      	b.n	3d3a0 <__ssvfiscanf_r+0x110>
   3d40c:	6863      	ldr	r3, [r4, #4]
   3d40e:	2b00      	cmp	r3, #0
   3d410:	dd0c      	ble.n	3d42c <__ssvfiscanf_r+0x19c>
   3d412:	6823      	ldr	r3, [r4, #0]
   3d414:	781a      	ldrb	r2, [r3, #0]
   3d416:	4552      	cmp	r2, sl
   3d418:	d177      	bne.n	3d50a <__ssvfiscanf_r+0x27a>
   3d41a:	3301      	adds	r3, #1
   3d41c:	6862      	ldr	r2, [r4, #4]
   3d41e:	6023      	str	r3, [r4, #0]
   3d420:	3a01      	subs	r2, #1
   3d422:	9b45      	ldr	r3, [sp, #276]	; 0x114
   3d424:	6062      	str	r2, [r4, #4]
   3d426:	3301      	adds	r3, #1
   3d428:	9345      	str	r3, [sp, #276]	; 0x114
   3d42a:	e75a      	b.n	3d2e2 <__ssvfiscanf_r+0x52>
   3d42c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3d42e:	4621      	mov	r1, r4
   3d430:	4630      	mov	r0, r6
   3d432:	4798      	blx	r3
   3d434:	2800      	cmp	r0, #0
   3d436:	d0ec      	beq.n	3d412 <__ssvfiscanf_r+0x182>
   3d438:	9844      	ldr	r0, [sp, #272]	; 0x110
   3d43a:	2800      	cmp	r0, #0
   3d43c:	d15b      	bne.n	3d4f6 <__ssvfiscanf_r+0x266>
   3d43e:	f04f 30ff 	mov.w	r0, #4294967295
   3d442:	e05e      	b.n	3d502 <__ssvfiscanf_r+0x272>
   3d444:	9a41      	ldr	r2, [sp, #260]	; 0x104
   3d446:	f042 0220 	orr.w	r2, r2, #32
   3d44a:	9241      	str	r2, [sp, #260]	; 0x104
   3d44c:	e79e      	b.n	3d38c <__ssvfiscanf_r+0xfc>
   3d44e:	2308      	movs	r3, #8
   3d450:	9342      	str	r3, [sp, #264]	; 0x108
   3d452:	2304      	movs	r3, #4
   3d454:	e7a4      	b.n	3d3a0 <__ssvfiscanf_r+0x110>
   3d456:	4629      	mov	r1, r5
   3d458:	4640      	mov	r0, r8
   3d45a:	f004 f9ad 	bl	417b8 <__sccl>
   3d45e:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3d460:	4605      	mov	r5, r0
   3d462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3d466:	9341      	str	r3, [sp, #260]	; 0x104
   3d468:	2301      	movs	r3, #1
   3d46a:	e799      	b.n	3d3a0 <__ssvfiscanf_r+0x110>
   3d46c:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3d46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3d472:	9341      	str	r3, [sp, #260]	; 0x104
   3d474:	2300      	movs	r3, #0
   3d476:	e793      	b.n	3d3a0 <__ssvfiscanf_r+0x110>
   3d478:	9841      	ldr	r0, [sp, #260]	; 0x104
   3d47a:	06c3      	lsls	r3, r0, #27
   3d47c:	f53f af31 	bmi.w	3d2e2 <__ssvfiscanf_r+0x52>
   3d480:	9b00      	ldr	r3, [sp, #0]
   3d482:	07c0      	lsls	r0, r0, #31
   3d484:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3d486:	f103 0104 	add.w	r1, r3, #4
   3d48a:	9100      	str	r1, [sp, #0]
   3d48c:	681b      	ldr	r3, [r3, #0]
   3d48e:	bf4c      	ite	mi
   3d490:	801a      	strhmi	r2, [r3, #0]
   3d492:	601a      	strpl	r2, [r3, #0]
   3d494:	e725      	b.n	3d2e2 <__ssvfiscanf_r+0x52>
   3d496:	2305      	movs	r3, #5
   3d498:	e782      	b.n	3d3a0 <__ssvfiscanf_r+0x110>
   3d49a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3d49c:	4621      	mov	r1, r4
   3d49e:	4630      	mov	r0, r6
   3d4a0:	4798      	blx	r3
   3d4a2:	2800      	cmp	r0, #0
   3d4a4:	d080      	beq.n	3d3a8 <__ssvfiscanf_r+0x118>
   3d4a6:	e7c7      	b.n	3d438 <__ssvfiscanf_r+0x1a8>
   3d4a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3d4aa:	3201      	adds	r2, #1
   3d4ac:	9245      	str	r2, [sp, #276]	; 0x114
   3d4ae:	6862      	ldr	r2, [r4, #4]
   3d4b0:	3a01      	subs	r2, #1
   3d4b2:	2a00      	cmp	r2, #0
   3d4b4:	6062      	str	r2, [r4, #4]
   3d4b6:	dd02      	ble.n	3d4be <__ssvfiscanf_r+0x22e>
   3d4b8:	3301      	adds	r3, #1
   3d4ba:	6023      	str	r3, [r4, #0]
   3d4bc:	e777      	b.n	3d3ae <__ssvfiscanf_r+0x11e>
   3d4be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3d4c0:	4621      	mov	r1, r4
   3d4c2:	4630      	mov	r0, r6
   3d4c4:	4798      	blx	r3
   3d4c6:	2800      	cmp	r0, #0
   3d4c8:	f43f af71 	beq.w	3d3ae <__ssvfiscanf_r+0x11e>
   3d4cc:	e7b4      	b.n	3d438 <__ssvfiscanf_r+0x1a8>
   3d4ce:	2b04      	cmp	r3, #4
   3d4d0:	dc06      	bgt.n	3d4e0 <__ssvfiscanf_r+0x250>
   3d4d2:	466b      	mov	r3, sp
   3d4d4:	4622      	mov	r2, r4
   3d4d6:	a941      	add	r1, sp, #260	; 0x104
   3d4d8:	4630      	mov	r0, r6
   3d4da:	f000 f87b 	bl	3d5d4 <_scanf_i>
   3d4de:	e775      	b.n	3d3cc <__ssvfiscanf_r+0x13c>
   3d4e0:	4b0f      	ldr	r3, [pc, #60]	; (3d520 <__ssvfiscanf_r+0x290>)
   3d4e2:	2b00      	cmp	r3, #0
   3d4e4:	f43f aefd 	beq.w	3d2e2 <__ssvfiscanf_r+0x52>
   3d4e8:	466b      	mov	r3, sp
   3d4ea:	4622      	mov	r2, r4
   3d4ec:	a941      	add	r1, sp, #260	; 0x104
   3d4ee:	4630      	mov	r0, r6
   3d4f0:	e000      	b.n	3d4f4 <__ssvfiscanf_r+0x264>
   3d4f2:	bf00      	nop
   3d4f4:	e76a      	b.n	3d3cc <__ssvfiscanf_r+0x13c>
   3d4f6:	89a3      	ldrh	r3, [r4, #12]
   3d4f8:	f013 0f40 	tst.w	r3, #64	; 0x40
   3d4fc:	bf18      	it	ne
   3d4fe:	f04f 30ff 	movne.w	r0, #4294967295
   3d502:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   3d506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d50a:	9844      	ldr	r0, [sp, #272]	; 0x110
   3d50c:	e7f9      	b.n	3d502 <__ssvfiscanf_r+0x272>
   3d50e:	bf00      	nop
   3d510:	00049140 	.word	0x00049140
   3d514:	00041705 	.word	0x00041705
   3d518:	0004177f 	.word	0x0004177f
   3d51c:	00049246 	.word	0x00049246
   3d520:	00000000 	.word	0x00000000

0003d524 <_scanf_chars>:
   3d524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3d528:	4615      	mov	r5, r2
   3d52a:	688a      	ldr	r2, [r1, #8]
   3d52c:	4680      	mov	r8, r0
   3d52e:	460c      	mov	r4, r1
   3d530:	b932      	cbnz	r2, 3d540 <_scanf_chars+0x1c>
   3d532:	698a      	ldr	r2, [r1, #24]
   3d534:	2a00      	cmp	r2, #0
   3d536:	bf0c      	ite	eq
   3d538:	2201      	moveq	r2, #1
   3d53a:	f04f 32ff 	movne.w	r2, #4294967295
   3d53e:	608a      	str	r2, [r1, #8]
   3d540:	6822      	ldr	r2, [r4, #0]
   3d542:	2700      	movs	r7, #0
   3d544:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3d5d0 <_scanf_chars+0xac>
   3d548:	06d1      	lsls	r1, r2, #27
   3d54a:	bf5f      	itttt	pl
   3d54c:	681a      	ldrpl	r2, [r3, #0]
   3d54e:	1d11      	addpl	r1, r2, #4
   3d550:	6019      	strpl	r1, [r3, #0]
   3d552:	6816      	ldrpl	r6, [r2, #0]
   3d554:	69a0      	ldr	r0, [r4, #24]
   3d556:	b188      	cbz	r0, 3d57c <_scanf_chars+0x58>
   3d558:	2801      	cmp	r0, #1
   3d55a:	d107      	bne.n	3d56c <_scanf_chars+0x48>
   3d55c:	682b      	ldr	r3, [r5, #0]
   3d55e:	781a      	ldrb	r2, [r3, #0]
   3d560:	6963      	ldr	r3, [r4, #20]
   3d562:	5c9b      	ldrb	r3, [r3, r2]
   3d564:	b953      	cbnz	r3, 3d57c <_scanf_chars+0x58>
   3d566:	bb27      	cbnz	r7, 3d5b2 <_scanf_chars+0x8e>
   3d568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3d56c:	2802      	cmp	r0, #2
   3d56e:	d120      	bne.n	3d5b2 <_scanf_chars+0x8e>
   3d570:	682b      	ldr	r3, [r5, #0]
   3d572:	781b      	ldrb	r3, [r3, #0]
   3d574:	f813 3009 	ldrb.w	r3, [r3, r9]
   3d578:	071b      	lsls	r3, r3, #28
   3d57a:	d41a      	bmi.n	3d5b2 <_scanf_chars+0x8e>
   3d57c:	6823      	ldr	r3, [r4, #0]
   3d57e:	3701      	adds	r7, #1
   3d580:	06da      	lsls	r2, r3, #27
   3d582:	bf5e      	ittt	pl
   3d584:	682b      	ldrpl	r3, [r5, #0]
   3d586:	781b      	ldrbpl	r3, [r3, #0]
   3d588:	f806 3b01 	strbpl.w	r3, [r6], #1
   3d58c:	682a      	ldr	r2, [r5, #0]
   3d58e:	686b      	ldr	r3, [r5, #4]
   3d590:	3201      	adds	r2, #1
   3d592:	3b01      	subs	r3, #1
   3d594:	602a      	str	r2, [r5, #0]
   3d596:	68a2      	ldr	r2, [r4, #8]
   3d598:	606b      	str	r3, [r5, #4]
   3d59a:	3a01      	subs	r2, #1
   3d59c:	60a2      	str	r2, [r4, #8]
   3d59e:	b142      	cbz	r2, 3d5b2 <_scanf_chars+0x8e>
   3d5a0:	2b00      	cmp	r3, #0
   3d5a2:	dcd7      	bgt.n	3d554 <_scanf_chars+0x30>
   3d5a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   3d5a8:	4629      	mov	r1, r5
   3d5aa:	4640      	mov	r0, r8
   3d5ac:	4798      	blx	r3
   3d5ae:	2800      	cmp	r0, #0
   3d5b0:	d0d0      	beq.n	3d554 <_scanf_chars+0x30>
   3d5b2:	6823      	ldr	r3, [r4, #0]
   3d5b4:	f013 0310 	ands.w	r3, r3, #16
   3d5b8:	d105      	bne.n	3d5c6 <_scanf_chars+0xa2>
   3d5ba:	68e2      	ldr	r2, [r4, #12]
   3d5bc:	3201      	adds	r2, #1
   3d5be:	60e2      	str	r2, [r4, #12]
   3d5c0:	69a2      	ldr	r2, [r4, #24]
   3d5c2:	b102      	cbz	r2, 3d5c6 <_scanf_chars+0xa2>
   3d5c4:	7033      	strb	r3, [r6, #0]
   3d5c6:	6923      	ldr	r3, [r4, #16]
   3d5c8:	2000      	movs	r0, #0
   3d5ca:	441f      	add	r7, r3
   3d5cc:	6127      	str	r7, [r4, #16]
   3d5ce:	e7cb      	b.n	3d568 <_scanf_chars+0x44>
   3d5d0:	00049140 	.word	0x00049140

0003d5d4 <_scanf_i>:
   3d5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d5d8:	4699      	mov	r9, r3
   3d5da:	b087      	sub	sp, #28
   3d5dc:	4b72      	ldr	r3, [pc, #456]	; (3d7a8 <_scanf_i+0x1d4>)
   3d5de:	460c      	mov	r4, r1
   3d5e0:	4682      	mov	sl, r0
   3d5e2:	4616      	mov	r6, r2
   3d5e4:	4627      	mov	r7, r4
   3d5e6:	f04f 0b00 	mov.w	fp, #0
   3d5ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   3d5ee:	ab03      	add	r3, sp, #12
   3d5f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   3d5f4:	4b6d      	ldr	r3, [pc, #436]	; (3d7ac <_scanf_i+0x1d8>)
   3d5f6:	69a1      	ldr	r1, [r4, #24]
   3d5f8:	4a6d      	ldr	r2, [pc, #436]	; (3d7b0 <_scanf_i+0x1dc>)
   3d5fa:	2903      	cmp	r1, #3
   3d5fc:	bf18      	it	ne
   3d5fe:	461a      	movne	r2, r3
   3d600:	68a3      	ldr	r3, [r4, #8]
   3d602:	9201      	str	r2, [sp, #4]
   3d604:	1e5a      	subs	r2, r3, #1
   3d606:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   3d60a:	bf89      	itett	hi
   3d60c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   3d610:	f04f 0800 	movls.w	r8, #0
   3d614:	eb03 0805 	addhi.w	r8, r3, r5
   3d618:	f240 135d 	movwhi	r3, #349	; 0x15d
   3d61c:	bf88      	it	hi
   3d61e:	60a3      	strhi	r3, [r4, #8]
   3d620:	f857 3b1c 	ldr.w	r3, [r7], #28
   3d624:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   3d628:	463d      	mov	r5, r7
   3d62a:	6023      	str	r3, [r4, #0]
   3d62c:	6831      	ldr	r1, [r6, #0]
   3d62e:	ab03      	add	r3, sp, #12
   3d630:	2202      	movs	r2, #2
   3d632:	7809      	ldrb	r1, [r1, #0]
   3d634:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   3d638:	f002 ffd4 	bl	405e4 <memchr>
   3d63c:	b328      	cbz	r0, 3d68a <_scanf_i+0xb6>
   3d63e:	f1bb 0f01 	cmp.w	fp, #1
   3d642:	d159      	bne.n	3d6f8 <_scanf_i+0x124>
   3d644:	6862      	ldr	r2, [r4, #4]
   3d646:	b92a      	cbnz	r2, 3d654 <_scanf_i+0x80>
   3d648:	6822      	ldr	r2, [r4, #0]
   3d64a:	2308      	movs	r3, #8
   3d64c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   3d650:	6063      	str	r3, [r4, #4]
   3d652:	6022      	str	r2, [r4, #0]
   3d654:	6822      	ldr	r2, [r4, #0]
   3d656:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   3d65a:	6022      	str	r2, [r4, #0]
   3d65c:	68a2      	ldr	r2, [r4, #8]
   3d65e:	1e51      	subs	r1, r2, #1
   3d660:	60a1      	str	r1, [r4, #8]
   3d662:	b192      	cbz	r2, 3d68a <_scanf_i+0xb6>
   3d664:	6832      	ldr	r2, [r6, #0]
   3d666:	1c51      	adds	r1, r2, #1
   3d668:	6031      	str	r1, [r6, #0]
   3d66a:	7812      	ldrb	r2, [r2, #0]
   3d66c:	f805 2b01 	strb.w	r2, [r5], #1
   3d670:	6872      	ldr	r2, [r6, #4]
   3d672:	3a01      	subs	r2, #1
   3d674:	2a00      	cmp	r2, #0
   3d676:	6072      	str	r2, [r6, #4]
   3d678:	dc07      	bgt.n	3d68a <_scanf_i+0xb6>
   3d67a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   3d67e:	4631      	mov	r1, r6
   3d680:	4650      	mov	r0, sl
   3d682:	4790      	blx	r2
   3d684:	2800      	cmp	r0, #0
   3d686:	f040 8085 	bne.w	3d794 <_scanf_i+0x1c0>
   3d68a:	f10b 0b01 	add.w	fp, fp, #1
   3d68e:	f1bb 0f03 	cmp.w	fp, #3
   3d692:	d1cb      	bne.n	3d62c <_scanf_i+0x58>
   3d694:	6863      	ldr	r3, [r4, #4]
   3d696:	b90b      	cbnz	r3, 3d69c <_scanf_i+0xc8>
   3d698:	230a      	movs	r3, #10
   3d69a:	6063      	str	r3, [r4, #4]
   3d69c:	6863      	ldr	r3, [r4, #4]
   3d69e:	f04f 0b00 	mov.w	fp, #0
   3d6a2:	4944      	ldr	r1, [pc, #272]	; (3d7b4 <_scanf_i+0x1e0>)
   3d6a4:	6960      	ldr	r0, [r4, #20]
   3d6a6:	1ac9      	subs	r1, r1, r3
   3d6a8:	f004 f886 	bl	417b8 <__sccl>
   3d6ac:	68a3      	ldr	r3, [r4, #8]
   3d6ae:	6822      	ldr	r2, [r4, #0]
   3d6b0:	2b00      	cmp	r3, #0
   3d6b2:	d03d      	beq.n	3d730 <_scanf_i+0x15c>
   3d6b4:	6831      	ldr	r1, [r6, #0]
   3d6b6:	6960      	ldr	r0, [r4, #20]
   3d6b8:	f891 c000 	ldrb.w	ip, [r1]
   3d6bc:	f810 000c 	ldrb.w	r0, [r0, ip]
   3d6c0:	2800      	cmp	r0, #0
   3d6c2:	d035      	beq.n	3d730 <_scanf_i+0x15c>
   3d6c4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   3d6c8:	d124      	bne.n	3d714 <_scanf_i+0x140>
   3d6ca:	0510      	lsls	r0, r2, #20
   3d6cc:	d522      	bpl.n	3d714 <_scanf_i+0x140>
   3d6ce:	f10b 0b01 	add.w	fp, fp, #1
   3d6d2:	f1b8 0f00 	cmp.w	r8, #0
   3d6d6:	d003      	beq.n	3d6e0 <_scanf_i+0x10c>
   3d6d8:	3301      	adds	r3, #1
   3d6da:	f108 38ff 	add.w	r8, r8, #4294967295
   3d6de:	60a3      	str	r3, [r4, #8]
   3d6e0:	6873      	ldr	r3, [r6, #4]
   3d6e2:	3b01      	subs	r3, #1
   3d6e4:	2b00      	cmp	r3, #0
   3d6e6:	6073      	str	r3, [r6, #4]
   3d6e8:	dd1b      	ble.n	3d722 <_scanf_i+0x14e>
   3d6ea:	6833      	ldr	r3, [r6, #0]
   3d6ec:	3301      	adds	r3, #1
   3d6ee:	6033      	str	r3, [r6, #0]
   3d6f0:	68a3      	ldr	r3, [r4, #8]
   3d6f2:	3b01      	subs	r3, #1
   3d6f4:	60a3      	str	r3, [r4, #8]
   3d6f6:	e7d9      	b.n	3d6ac <_scanf_i+0xd8>
   3d6f8:	f1bb 0f02 	cmp.w	fp, #2
   3d6fc:	d1ae      	bne.n	3d65c <_scanf_i+0x88>
   3d6fe:	6822      	ldr	r2, [r4, #0]
   3d700:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   3d704:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   3d708:	d1bf      	bne.n	3d68a <_scanf_i+0xb6>
   3d70a:	2310      	movs	r3, #16
   3d70c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   3d710:	6063      	str	r3, [r4, #4]
   3d712:	e7a2      	b.n	3d65a <_scanf_i+0x86>
   3d714:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   3d718:	6022      	str	r2, [r4, #0]
   3d71a:	780b      	ldrb	r3, [r1, #0]
   3d71c:	f805 3b01 	strb.w	r3, [r5], #1
   3d720:	e7de      	b.n	3d6e0 <_scanf_i+0x10c>
   3d722:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   3d726:	4631      	mov	r1, r6
   3d728:	4650      	mov	r0, sl
   3d72a:	4798      	blx	r3
   3d72c:	2800      	cmp	r0, #0
   3d72e:	d0df      	beq.n	3d6f0 <_scanf_i+0x11c>
   3d730:	6823      	ldr	r3, [r4, #0]
   3d732:	05d9      	lsls	r1, r3, #23
   3d734:	d50d      	bpl.n	3d752 <_scanf_i+0x17e>
   3d736:	42bd      	cmp	r5, r7
   3d738:	d909      	bls.n	3d74e <_scanf_i+0x17a>
   3d73a:	f105 38ff 	add.w	r8, r5, #4294967295
   3d73e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   3d742:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   3d746:	4632      	mov	r2, r6
   3d748:	4645      	mov	r5, r8
   3d74a:	4650      	mov	r0, sl
   3d74c:	4798      	blx	r3
   3d74e:	42bd      	cmp	r5, r7
   3d750:	d028      	beq.n	3d7a4 <_scanf_i+0x1d0>
   3d752:	6822      	ldr	r2, [r4, #0]
   3d754:	f012 0210 	ands.w	r2, r2, #16
   3d758:	d113      	bne.n	3d782 <_scanf_i+0x1ae>
   3d75a:	702a      	strb	r2, [r5, #0]
   3d75c:	4639      	mov	r1, r7
   3d75e:	6863      	ldr	r3, [r4, #4]
   3d760:	4650      	mov	r0, sl
   3d762:	9e01      	ldr	r6, [sp, #4]
   3d764:	47b0      	blx	r6
   3d766:	f8d9 3000 	ldr.w	r3, [r9]
   3d76a:	6821      	ldr	r1, [r4, #0]
   3d76c:	1d1a      	adds	r2, r3, #4
   3d76e:	f011 0f20 	tst.w	r1, #32
   3d772:	f8c9 2000 	str.w	r2, [r9]
   3d776:	681b      	ldr	r3, [r3, #0]
   3d778:	d00f      	beq.n	3d79a <_scanf_i+0x1c6>
   3d77a:	6018      	str	r0, [r3, #0]
   3d77c:	68e3      	ldr	r3, [r4, #12]
   3d77e:	3301      	adds	r3, #1
   3d780:	60e3      	str	r3, [r4, #12]
   3d782:	1bed      	subs	r5, r5, r7
   3d784:	2000      	movs	r0, #0
   3d786:	44ab      	add	fp, r5
   3d788:	6925      	ldr	r5, [r4, #16]
   3d78a:	445d      	add	r5, fp
   3d78c:	6125      	str	r5, [r4, #16]
   3d78e:	b007      	add	sp, #28
   3d790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d794:	f04f 0b00 	mov.w	fp, #0
   3d798:	e7ca      	b.n	3d730 <_scanf_i+0x15c>
   3d79a:	07ca      	lsls	r2, r1, #31
   3d79c:	bf4c      	ite	mi
   3d79e:	8018      	strhmi	r0, [r3, #0]
   3d7a0:	6018      	strpl	r0, [r3, #0]
   3d7a2:	e7eb      	b.n	3d77c <_scanf_i+0x1a8>
   3d7a4:	2001      	movs	r0, #1
   3d7a6:	e7f2      	b.n	3d78e <_scanf_i+0x1ba>
   3d7a8:	00041db0 	.word	0x00041db0
   3d7ac:	00040adb 	.word	0x00040adb
   3d7b0:	00040ad7 	.word	0x00040ad7
   3d7b4:	000492d0 	.word	0x000492d0

0003d7b8 <_read_r>:
   3d7b8:	b538      	push	{r3, r4, r5, lr}
   3d7ba:	4605      	mov	r5, r0
   3d7bc:	4c06      	ldr	r4, [pc, #24]	; (3d7d8 <_read_r+0x20>)
   3d7be:	4608      	mov	r0, r1
   3d7c0:	4611      	mov	r1, r2
   3d7c2:	2200      	movs	r2, #0
   3d7c4:	6022      	str	r2, [r4, #0]
   3d7c6:	461a      	mov	r2, r3
   3d7c8:	f000 fd9f 	bl	3e30a <_read>
   3d7cc:	1c43      	adds	r3, r0, #1
   3d7ce:	d102      	bne.n	3d7d6 <_read_r+0x1e>
   3d7d0:	6823      	ldr	r3, [r4, #0]
   3d7d2:	b103      	cbz	r3, 3d7d6 <_read_r+0x1e>
   3d7d4:	602b      	str	r3, [r5, #0]
   3d7d6:	bd38      	pop	{r3, r4, r5, pc}
   3d7d8:	2002be8c 	.word	0x2002be8c

0003d7dc <raise>:
   3d7dc:	4b02      	ldr	r3, [pc, #8]	; (3d7e8 <raise+0xc>)
   3d7de:	4601      	mov	r1, r0
   3d7e0:	6818      	ldr	r0, [r3, #0]
   3d7e2:	f004 b81a 	b.w	4181a <_raise_r>
   3d7e6:	bf00      	nop
   3d7e8:	20032100 	.word	0x20032100

0003d7ec <_kill_r>:
   3d7ec:	b538      	push	{r3, r4, r5, lr}
   3d7ee:	2300      	movs	r3, #0
   3d7f0:	4c06      	ldr	r4, [pc, #24]	; (3d80c <_kill_r+0x20>)
   3d7f2:	4605      	mov	r5, r0
   3d7f4:	4608      	mov	r0, r1
   3d7f6:	4611      	mov	r1, r2
   3d7f8:	6023      	str	r3, [r4, #0]
   3d7fa:	f000 fd95 	bl	3e328 <_kill>
   3d7fe:	1c43      	adds	r3, r0, #1
   3d800:	d102      	bne.n	3d808 <_kill_r+0x1c>
   3d802:	6823      	ldr	r3, [r4, #0]
   3d804:	b103      	cbz	r3, 3d808 <_kill_r+0x1c>
   3d806:	602b      	str	r3, [r5, #0]
   3d808:	bd38      	pop	{r3, r4, r5, pc}
   3d80a:	bf00      	nop
   3d80c:	2002be8c 	.word	0x2002be8c

0003d810 <_fstat_r>:
   3d810:	b538      	push	{r3, r4, r5, lr}
   3d812:	2300      	movs	r3, #0
   3d814:	4c06      	ldr	r4, [pc, #24]	; (3d830 <_fstat_r+0x20>)
   3d816:	4605      	mov	r5, r0
   3d818:	4608      	mov	r0, r1
   3d81a:	4611      	mov	r1, r2
   3d81c:	6023      	str	r3, [r4, #0]
   3d81e:	f000 fd87 	bl	3e330 <_fstat>
   3d822:	1c43      	adds	r3, r0, #1
   3d824:	d102      	bne.n	3d82c <_fstat_r+0x1c>
   3d826:	6823      	ldr	r3, [r4, #0]
   3d828:	b103      	cbz	r3, 3d82c <_fstat_r+0x1c>
   3d82a:	602b      	str	r3, [r5, #0]
   3d82c:	bd38      	pop	{r3, r4, r5, pc}
   3d82e:	bf00      	nop
   3d830:	2002be8c 	.word	0x2002be8c

0003d834 <_isatty_r>:
   3d834:	b538      	push	{r3, r4, r5, lr}
   3d836:	2300      	movs	r3, #0
   3d838:	4c05      	ldr	r4, [pc, #20]	; (3d850 <_isatty_r+0x1c>)
   3d83a:	4605      	mov	r5, r0
   3d83c:	4608      	mov	r0, r1
   3d83e:	6023      	str	r3, [r4, #0]
   3d840:	f000 fd70 	bl	3e324 <_isatty>
   3d844:	1c43      	adds	r3, r0, #1
   3d846:	d102      	bne.n	3d84e <_isatty_r+0x1a>
   3d848:	6823      	ldr	r3, [r4, #0]
   3d84a:	b103      	cbz	r3, 3d84e <_isatty_r+0x1a>
   3d84c:	602b      	str	r3, [r5, #0]
   3d84e:	bd38      	pop	{r3, r4, r5, pc}
   3d850:	2002be8c 	.word	0x2002be8c

0003d854 <cloud_send>:
	if (backend == NULL || backend->api == NULL ||
   3d854:	b120      	cbz	r0, 3d860 <cloud_send+0xc>
   3d856:	6803      	ldr	r3, [r0, #0]
   3d858:	b113      	cbz	r3, 3d860 <cloud_send+0xc>
	    backend->api->send == NULL) {
   3d85a:	691b      	ldr	r3, [r3, #16]
	if (backend == NULL || backend->api == NULL ||
   3d85c:	b103      	cbz	r3, 3d860 <cloud_send+0xc>
	return backend->api->send(backend, msg);
   3d85e:	4718      	bx	r3
}
   3d860:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3d864:	4770      	bx	lr

0003d866 <atomic_set>:
   3d866:	e8d0 3fef 	ldaex	r3, [r0]
   3d86a:	e8c0 1fe2 	stlex	r2, r1, [r0]
   3d86e:	2a00      	cmp	r2, #0
   3d870:	d1f9      	bne.n	3d866 <atomic_set>
}
   3d872:	4618      	mov	r0, r3
   3d874:	4770      	bx	lr

0003d876 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3d876:	e8d0 0faf 	lda	r0, [r0]
}
   3d87a:	4770      	bx	lr

0003d87c <cloud_reboot_handler>:
	error_handler(ERROR_CLOUD, -ETIMEDOUT);
   3d87c:	f06f 0173 	mvn.w	r1, #115	; 0x73
   3d880:	2000      	movs	r0, #0
   3d882:	f7e3 b96b 	b.w	20b5c <error_handler>

0003d886 <cloud_error_handler>:
	error_handler(ERROR_CLOUD, err);
   3d886:	4601      	mov	r1, r0
   3d888:	2000      	movs	r0, #0
   3d88a:	f7e3 b967 	b.w	20b5c <error_handler>

0003d88e <bsd_recoverable_error_handler>:
{
   3d88e:	b508      	push	{r3, lr}
   3d890:	f7e5 fc84 	bl	2319c <z_impl_log_panic>
}
   3d894:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_reboot(0);
   3d898:	2000      	movs	r0, #0
   3d89a:	f7e6 b8a1 	b.w	239e0 <sys_reboot>

0003d89e <sensor_channel_get>:
	return api->channel_get(dev, chan, val);
   3d89e:	6843      	ldr	r3, [r0, #4]
   3d8a0:	68db      	ldr	r3, [r3, #12]
   3d8a2:	4718      	bx	r3

0003d8a4 <ui_led_set_color>:
}
   3d8a4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3d8a8:	4770      	bx	lr

0003d8aa <json_value_string_compare>:
{
   3d8aa:	b510      	push	{r4, lr}
   3d8ac:	460c      	mov	r4, r1
	char *json_str = cJSON_GetStringValue(obj);
   3d8ae:	f001 fd57 	bl	3f360 <cJSON_GetStringValue>
	if ((json_str == NULL) || (str == NULL)) {
   3d8b2:	b130      	cbz	r0, 3d8c2 <json_value_string_compare+0x18>
   3d8b4:	b134      	cbz	r4, 3d8c4 <json_value_string_compare+0x1a>
	return (strcmp(json_str, str) == 0);
   3d8b6:	4621      	mov	r1, r4
   3d8b8:	f7df fc2a 	bl	1d110 <strcmp>
   3d8bc:	fab0 f080 	clz	r0, r0
   3d8c0:	0940      	lsrs	r0, r0, #5
}
   3d8c2:	bd10      	pop	{r4, pc}
		return false;
   3d8c4:	4620      	mov	r0, r4
   3d8c6:	e7fc      	b.n	3d8c2 <json_value_string_compare+0x18>

0003d8c8 <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   3d8c8:	b108      	cbz	r0, 3d8ce <json_object_decode+0x6>
   3d8ca:	f001 bcf8 	b.w	3f2be <cJSON_GetObjectItem>
}
   3d8ce:	4770      	bx	lr

0003d8d0 <add_array_obj>:
{
   3d8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3d8d4:	4681      	mov	r9, r0
   3d8d6:	4688      	mov	r8, r1
   3d8d8:	4617      	mov	r7, r2
	if ((obj == NULL) || (item_name == NULL)) {
   3d8da:	461e      	mov	r6, r3
   3d8dc:	b32b      	cbz	r3, 3d92a <add_array_obj+0x5a>
	obj_to_add = cJSON_CreateArray();
   3d8de:	f7e9 faa9 	bl	26e34 <cJSON_CreateArray>
	if (obj_to_add == NULL) {
   3d8e2:	4604      	mov	r4, r0
   3d8e4:	b1d0      	cbz	r0, 3d91c <add_array_obj+0x4c>
	for (u32_t cnt = 0; cnt < item_cnt; ++cnt) {
   3d8e6:	2500      	movs	r5, #0
   3d8e8:	4545      	cmp	r5, r8
   3d8ea:	d10d      	bne.n	3d908 <add_array_obj+0x38>
	if (cJSON_GetArraySize(obj_to_add) == 0) {
   3d8ec:	4620      	mov	r0, r4
   3d8ee:	f001 fcde 	bl	3f2ae <cJSON_GetArraySize>
   3d8f2:	b908      	cbnz	r0, 3d8f8 <add_array_obj+0x28>
		obj_to_add->type = cJSON_NULL;
   3d8f4:	2304      	movs	r3, #4
   3d8f6:	60e3      	str	r3, [r4, #12]
	cJSON_AddItemToObject(obj, item_name, obj_to_add);
   3d8f8:	4630      	mov	r0, r6
   3d8fa:	4622      	mov	r2, r4
   3d8fc:	4639      	mov	r1, r7
   3d8fe:	f001 fced 	bl	3f2dc <cJSON_AddItemToObject>
	return 0;
   3d902:	2000      	movs	r0, #0
}
   3d904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (items[cnt] != NULL) {
   3d908:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
   3d90c:	b158      	cbz	r0, 3d926 <add_array_obj+0x56>
			str = cJSON_CreateString(items[cnt]);
   3d90e:	f7e9 fa79 	bl	26e04 <cJSON_CreateString>
			if (str == NULL) {
   3d912:	4601      	mov	r1, r0
				cJSON_Delete(obj_to_add);
   3d914:	4620      	mov	r0, r4
			if (str == NULL) {
   3d916:	b921      	cbnz	r1, 3d922 <add_array_obj+0x52>
				cJSON_Delete(obj_to_add);
   3d918:	f7e9 f9d4 	bl	26cc4 <cJSON_Delete>
		return -ENOMEM;
   3d91c:	f06f 000b 	mvn.w	r0, #11
   3d920:	e7f0      	b.n	3d904 <add_array_obj+0x34>
			cJSON_AddItemToArray(obj_to_add, str);
   3d922:	f001 fcd9 	bl	3f2d8 <cJSON_AddItemToArray>
	for (u32_t cnt = 0; cnt < item_cnt; ++cnt) {
   3d926:	3501      	adds	r5, #1
   3d928:	e7de      	b.n	3d8e8 <add_array_obj+0x18>
		return -EINVAL;
   3d92a:	f06f 0015 	mvn.w	r0, #21
   3d92e:	e7e9      	b.n	3d904 <add_array_obj+0x34>

0003d930 <env_sensors_get_air_quality>:
}
   3d930:	f04f 30ff 	mov.w	r0, #4294967295
   3d934:	4770      	bx	lr

0003d936 <get_bit_ptr>:
{
   3d936:	b570      	push	{r4, r5, r6, lr}
   3d938:	250c      	movs	r5, #12
   3d93a:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   3d93c:	f990 000b 	ldrsb.w	r0, [r0, #11]
   3d940:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   3d942:	4288      	cmp	r0, r1
	*word = &bitarray[bn / 32];
   3d944:	4610      	mov	r0, r2
   3d946:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   3d94a:	bfb8      	it	lt
   3d94c:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   3d94e:	2a00      	cmp	r2, #0
   3d950:	bfb8      	it	lt
   3d952:	f102 001f 	addlt.w	r0, r2, #31
   3d956:	1140      	asrs	r0, r0, #5
   3d958:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   3d95c:	6019      	str	r1, [r3, #0]
}
   3d95e:	f002 001f 	and.w	r0, r2, #31
   3d962:	bd70      	pop	{r4, r5, r6, pc}

0003d964 <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   3d964:	f04f 0320 	mov.w	r3, #32
   3d968:	f3ef 8011 	mrs	r0, BASEPRI
   3d96c:	f383 8811 	msr	BASEPRI, r3
   3d970:	f3bf 8f6f 	isb	sy
}
   3d974:	4770      	bx	lr

0003d976 <pool_irq_unlock.isra.4>:
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   3d976:	07c3      	lsls	r3, r0, #31
   3d978:	d503      	bpl.n	3d982 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   3d97a:	f381 8811 	msr	BASEPRI, r1
   3d97e:	f3bf 8f6f 	isb	sy
}
   3d982:	4770      	bx	lr

0003d984 <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   3d984:	23ff      	movs	r3, #255	; 0xff
{
   3d986:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   3d98a:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   3d98c:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   3d98e:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   3d990:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   3d992:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   3d996:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   3d998:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   3d99a:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   3d99e:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   3d9a2:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   3d9a4:	4598      	cmp	r8, r3
   3d9a6:	dc05      	bgt.n	3d9b4 <z_sys_mem_pool_base_init+0x30>
   3d9a8:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   3d9aa:	4619      	mov	r1, r3
   3d9ac:	428f      	cmp	r7, r1
   3d9ae:	dc20      	bgt.n	3d9f2 <z_sys_mem_pool_base_init+0x6e>
}
   3d9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   3d9b4:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   3d9b8:	fb09 fe03 	mul.w	lr, r9, r3
   3d9bc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   3d9c0:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   3d9c2:	eb0a 040e 	add.w	r4, sl, lr
   3d9c6:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   3d9ca:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   3d9ce:	d805      	bhi.n	3d9dc <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   3d9d0:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   3d9d2:	0892      	lsrs	r2, r2, #2
   3d9d4:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   3d9d8:	3301      	adds	r3, #1
   3d9da:	e7e3      	b.n	3d9a4 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   3d9dc:	f115 041f 	adds.w	r4, r5, #31
   3d9e0:	bf48      	it	mi
   3d9e2:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   3d9e6:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   3d9e8:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   3d9ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   3d9f0:	e7ef      	b.n	3d9d2 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   3d9f2:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   3d9f4:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   3d9f6:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   3d9fa:	18ec      	adds	r4, r5, r3
	node->next = list;
   3d9fc:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   3da00:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   3da02:	3101      	adds	r1, #1
   3da04:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   3da06:	6895      	ldr	r5, [r2, #8]
   3da08:	4433      	add	r3, r6
   3da0a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   3da0c:	6094      	str	r4, [r2, #8]
   3da0e:	e7cd      	b.n	3d9ac <z_sys_mem_pool_base_init+0x28>

0003da10 <z_sys_mem_pool_block_alloc>:
{
   3da10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3da14:	b087      	sub	sp, #28
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   3da16:	7a84      	ldrb	r4, [r0, #10]
{
   3da18:	af00      	add	r7, sp, #0
   3da1a:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   3da1e:	00a3      	lsls	r3, r4, #2
   3da20:	3307      	adds	r3, #7
   3da22:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   3da26:	ebad 0d03 	sub.w	sp, sp, r3
   3da2a:	46ea      	mov	sl, sp
	lsizes[0] = p->max_sz;
   3da2c:	4653      	mov	r3, sl
   3da2e:	6842      	ldr	r2, [r0, #4]
{
   3da30:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   3da32:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   3da36:	2200      	movs	r2, #0
   3da38:	4294      	cmp	r4, r2
   3da3a:	f102 39ff 	add.w	r9, r2, #4294967295
   3da3e:	dd09      	ble.n	3da54 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   3da40:	b122      	cbz	r2, 3da4c <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   3da42:	6818      	ldr	r0, [r3, #0]
   3da44:	0880      	lsrs	r0, r0, #2
   3da46:	f020 0003 	bic.w	r0, r0, #3
   3da4a:	6058      	str	r0, [r3, #4]
		if (lsizes[i] < size) {
   3da4c:	f853 0f04 	ldr.w	r0, [r3, #4]!
   3da50:	4288      	cmp	r0, r1
   3da52:	d208      	bcs.n	3da66 <z_sys_mem_pool_block_alloc+0x56>
	if (alloc_l < 0) {
   3da54:	f1b9 3fff 	cmp.w	r9, #4294967295
   3da58:	d107      	bne.n	3da6a <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   3da5a:	2300      	movs	r3, #0
   3da5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   3da5e:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
   3da60:	f06f 000b 	mvn.w	r0, #11
   3da64:	e02c      	b.n	3dac0 <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
   3da66:	3201      	adds	r2, #1
   3da68:	e7e6      	b.n	3da38 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   3da6a:	7c28      	ldrb	r0, [r5, #16]
   3da6c:	f010 0001 	ands.w	r0, r0, #1
   3da70:	d001      	beq.n	3da76 <z_sys_mem_pool_block_alloc+0x66>
   3da72:	f7ff ff77 	bl	3d964 <pool_irq_lock.isra.2.part.3>
   3da76:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   3da78:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   3da7a:	464e      	mov	r6, r9
   3da7c:	68ea      	ldr	r2, [r5, #12]
   3da7e:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   3da82:	461a      	mov	r2, r3
   3da84:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   3da88:	4294      	cmp	r4, r2
   3da8a:	d11d      	bne.n	3dac8 <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
   3da8c:	3e01      	subs	r6, #1
   3da8e:	1c72      	adds	r2, r6, #1
   3da90:	f1a3 030c 	sub.w	r3, r3, #12
   3da94:	d1f5      	bne.n	3da82 <z_sys_mem_pool_block_alloc+0x72>
   3da96:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   3da98:	4641      	mov	r1, r8
   3da9a:	7c28      	ldrb	r0, [r5, #16]
   3da9c:	f7ff ff6b 	bl	3d976 <pool_irq_unlock.isra.4>
	*data_p = data;
   3daa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   3daa2:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   3daa4:	2c00      	cmp	r4, #0
   3daa6:	d0db      	beq.n	3da60 <z_sys_mem_pool_block_alloc+0x50>
	*level_p = alloc_l;
   3daa8:	68bb      	ldr	r3, [r7, #8]
	return 0;
   3daaa:	2000      	movs	r0, #0
	*level_p = alloc_l;
   3daac:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   3dab0:	682b      	ldr	r3, [r5, #0]
   3dab2:	1ae4      	subs	r4, r4, r3
   3dab4:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   3dab8:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   3dabc:	687b      	ldr	r3, [r7, #4]
   3dabe:	601c      	str	r4, [r3, #0]
}
   3dac0:	371c      	adds	r7, #28
   3dac2:	46bd      	mov	sp, r7
   3dac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   3dac8:	e9d4 3200 	ldrd	r3, r2, [r4]
   3dacc:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3dace:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3dad0:	2300      	movs	r3, #0
	node->prev = NULL;
   3dad2:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   3dad6:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   3dad8:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   3dadc:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   3dade:	f107 0b14 	add.w	fp, r7, #20
   3dae2:	fb92 f2f1 	sdiv	r2, r2, r1
   3dae6:	465b      	mov	r3, fp
   3dae8:	4631      	mov	r1, r6
   3daea:	4628      	mov	r0, r5
   3daec:	f7ff ff23 	bl	3d936 <get_bit_ptr>
	*word |= (1<<bit);
   3daf0:	2201      	movs	r2, #1
   3daf2:	6979      	ldr	r1, [r7, #20]
   3daf4:	fa02 f000 	lsl.w	r0, r2, r0
   3daf8:	680b      	ldr	r3, [r1, #0]
   3dafa:	603a      	str	r2, [r7, #0]
   3dafc:	4303      	orrs	r3, r0
   3dafe:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   3db00:	454e      	cmp	r6, r9
   3db02:	dac9      	bge.n	3da98 <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   3db04:	682a      	ldr	r2, [r5, #0]
   3db06:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   3db0a:	1aa2      	subs	r2, r4, r2
   3db0c:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   3db10:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   3db12:	465b      	mov	r3, fp
   3db14:	0092      	lsls	r2, r2, #2
   3db16:	4631      	mov	r1, r6
   3db18:	4628      	mov	r0, r5
   3db1a:	f7ff ff0c 	bl	3d936 <get_bit_ptr>
	*word |= (1<<bit);
   3db1e:	697a      	ldr	r2, [r7, #20]
   3db20:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   3db22:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   3db24:	fa03 f000 	lsl.w	r0, r3, r0
   3db28:	6813      	ldr	r3, [r2, #0]
   3db2a:	4303      	orrs	r3, r0
   3db2c:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   3db2e:	230c      	movs	r3, #12
   3db30:	2203      	movs	r2, #3
   3db32:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
   3db36:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   3db3a:	f101 0e04 	add.w	lr, r1, #4
   3db3e:	1823      	adds	r3, r4, r0
   3db40:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   3db42:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   3db44:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   3db48:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   3db4a:	688a      	ldr	r2, [r1, #8]
   3db4c:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   3db4e:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   3db50:	608b      	str	r3, [r1, #8]
   3db52:	3a01      	subs	r2, #1
   3db54:	4403      	add	r3, r0
   3db56:	60fa      	str	r2, [r7, #12]
   3db58:	d1f3      	bne.n	3db42 <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
   3db5a:	4641      	mov	r1, r8
   3db5c:	7c28      	ldrb	r0, [r5, #16]
   3db5e:	f7ff ff0a 	bl	3d976 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   3db62:	7c2b      	ldrb	r3, [r5, #16]
   3db64:	07db      	lsls	r3, r3, #31
   3db66:	d503      	bpl.n	3db70 <z_sys_mem_pool_block_alloc+0x160>
   3db68:	f7ff fefc 	bl	3d964 <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   3db6c:	4680      	mov	r8, r0
   3db6e:	e7c7      	b.n	3db00 <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
   3db70:	68f8      	ldr	r0, [r7, #12]
   3db72:	e7fb      	b.n	3db6c <z_sys_mem_pool_block_alloc+0x15c>

0003db74 <arch_printk_char_out>:
}
   3db74:	2000      	movs	r0, #0
   3db76:	4770      	bx	lr

0003db78 <print_err>:
{
   3db78:	b570      	push	{r4, r5, r6, lr}
   3db7a:	460d      	mov	r5, r1
   3db7c:	4604      	mov	r4, r0
	out('E', ctx);
   3db7e:	2045      	movs	r0, #69	; 0x45
   3db80:	47a0      	blx	r4
	out('R', ctx);
   3db82:	4629      	mov	r1, r5
   3db84:	2052      	movs	r0, #82	; 0x52
   3db86:	47a0      	blx	r4
	out('R', ctx);
   3db88:	4629      	mov	r1, r5
   3db8a:	4623      	mov	r3, r4
}
   3db8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   3db90:	2052      	movs	r0, #82	; 0x52
   3db92:	4718      	bx	r3

0003db94 <str_out>:
{
   3db94:	b530      	push	{r4, r5, lr}
   3db96:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   3db98:	680c      	ldr	r4, [r1, #0]
   3db9a:	1c55      	adds	r5, r2, #1
   3db9c:	b114      	cbz	r4, 3dba4 <str_out+0x10>
   3db9e:	684b      	ldr	r3, [r1, #4]
   3dba0:	4293      	cmp	r3, r2
   3dba2:	dc01      	bgt.n	3dba8 <str_out+0x14>
		ctx->count++;
   3dba4:	608d      	str	r5, [r1, #8]
}
   3dba6:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   3dba8:	3b01      	subs	r3, #1
   3dbaa:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   3dbac:	bf08      	it	eq
   3dbae:	2200      	moveq	r2, #0
   3dbb0:	608d      	str	r5, [r1, #8]
   3dbb2:	bf0c      	ite	eq
   3dbb4:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   3dbb6:	54a0      	strbne	r0, [r4, r2]
   3dbb8:	e7f5      	b.n	3dba6 <str_out+0x12>

0003dbba <z_vprintk>:
{
   3dbba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   3dbbe:	f04f 0800 	mov.w	r8, #0
{
   3dbc2:	4606      	mov	r6, r0
   3dbc4:	460f      	mov	r7, r1
   3dbc6:	461c      	mov	r4, r3
	int min_width = -1;
   3dbc8:	f04f 3aff 	mov.w	sl, #4294967295
	enum pad_type padding = PAD_NONE;
   3dbcc:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
   3dbce:	4645      	mov	r5, r8
{
   3dbd0:	b08b      	sub	sp, #44	; 0x2c
   3dbd2:	9202      	str	r2, [sp, #8]
	while (*fmt) {
   3dbd4:	9b02      	ldr	r3, [sp, #8]
   3dbd6:	7818      	ldrb	r0, [r3, #0]
   3dbd8:	b910      	cbnz	r0, 3dbe0 <z_vprintk+0x26>
}
   3dbda:	b00b      	add	sp, #44	; 0x2c
   3dbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
   3dbe0:	b945      	cbnz	r5, 3dbf4 <z_vprintk+0x3a>
			if (*fmt != '%') {
   3dbe2:	2825      	cmp	r0, #37	; 0x25
   3dbe4:	f000 814b 	beq.w	3de7e <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   3dbe8:	4639      	mov	r1, r7
   3dbea:	47b0      	blx	r6
		++fmt;
   3dbec:	9b02      	ldr	r3, [sp, #8]
   3dbee:	3301      	adds	r3, #1
   3dbf0:	9302      	str	r3, [sp, #8]
   3dbf2:	e7ef      	b.n	3dbd4 <z_vprintk+0x1a>
			switch (*fmt) {
   3dbf4:	2864      	cmp	r0, #100	; 0x64
   3dbf6:	d06d      	beq.n	3dcd4 <z_vprintk+0x11a>
   3dbf8:	d819      	bhi.n	3dc2e <z_vprintk+0x74>
   3dbfa:	2839      	cmp	r0, #57	; 0x39
   3dbfc:	d80a      	bhi.n	3dc14 <z_vprintk+0x5a>
   3dbfe:	2831      	cmp	r0, #49	; 0x31
   3dc00:	d25f      	bcs.n	3dcc2 <z_vprintk+0x108>
   3dc02:	282d      	cmp	r0, #45	; 0x2d
   3dc04:	f000 8141 	beq.w	3de8a <z_vprintk+0x2d0>
   3dc08:	2830      	cmp	r0, #48	; 0x30
   3dc0a:	d04b      	beq.n	3dca4 <z_vprintk+0xea>
   3dc0c:	2825      	cmp	r0, #37	; 0x25
   3dc0e:	d107      	bne.n	3dc20 <z_vprintk+0x66>
				out((int)'%', ctx);
   3dc10:	4639      	mov	r1, r7
   3dc12:	e132      	b.n	3de7a <z_vprintk+0x2c0>
			switch (*fmt) {
   3dc14:	2858      	cmp	r0, #88	; 0x58
   3dc16:	f000 80bb 	beq.w	3dd90 <z_vprintk+0x1d6>
   3dc1a:	2863      	cmp	r0, #99	; 0x63
   3dc1c:	f000 812a 	beq.w	3de74 <z_vprintk+0x2ba>
				out((int)'%', ctx);
   3dc20:	4639      	mov	r1, r7
   3dc22:	2025      	movs	r0, #37	; 0x25
   3dc24:	47b0      	blx	r6
				out((int)*fmt, ctx);
   3dc26:	9b02      	ldr	r3, [sp, #8]
   3dc28:	4639      	mov	r1, r7
   3dc2a:	7818      	ldrb	r0, [r3, #0]
   3dc2c:	e125      	b.n	3de7a <z_vprintk+0x2c0>
			switch (*fmt) {
   3dc2e:	2870      	cmp	r0, #112	; 0x70
   3dc30:	f000 80a4 	beq.w	3dd7c <z_vprintk+0x1c2>
   3dc34:	d811      	bhi.n	3dc5a <z_vprintk+0xa0>
   3dc36:	2869      	cmp	r0, #105	; 0x69
   3dc38:	d04c      	beq.n	3dcd4 <z_vprintk+0x11a>
   3dc3a:	286c      	cmp	r0, #108	; 0x6c
   3dc3c:	d105      	bne.n	3dc4a <z_vprintk+0x90>
				} else if (*fmt == 'l' && length_mod == 'l') {
   3dc3e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   3dc42:	d12a      	bne.n	3dc9a <z_vprintk+0xe0>
					length_mod = 'L';
   3dc44:	f04f 084c 	mov.w	r8, #76	; 0x4c
   3dc48:	e7d0      	b.n	3dbec <z_vprintk+0x32>
			switch (*fmt) {
   3dc4a:	2868      	cmp	r0, #104	; 0x68
   3dc4c:	d1e8      	bne.n	3dc20 <z_vprintk+0x66>
				if (*fmt == 'h' && length_mod == 'h') {
   3dc4e:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   3dc52:	d122      	bne.n	3dc9a <z_vprintk+0xe0>
					length_mod = 'H';
   3dc54:	f04f 0848 	mov.w	r8, #72	; 0x48
   3dc58:	e7c8      	b.n	3dbec <z_vprintk+0x32>
			switch (*fmt) {
   3dc5a:	2875      	cmp	r0, #117	; 0x75
   3dc5c:	d072      	beq.n	3dd44 <z_vprintk+0x18a>
   3dc5e:	d818      	bhi.n	3dc92 <z_vprintk+0xd8>
   3dc60:	2873      	cmp	r0, #115	; 0x73
   3dc62:	d1dd      	bne.n	3dc20 <z_vprintk+0x66>
				char *s = va_arg(ap, char *);
   3dc64:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   3dc68:	46ab      	mov	fp, r5
   3dc6a:	465b      	mov	r3, fp
   3dc6c:	f81b 0b01 	ldrb.w	r0, [fp], #1
   3dc70:	2800      	cmp	r0, #0
   3dc72:	f040 80fc 	bne.w	3de6e <z_vprintk+0x2b4>
				if (padding == PAD_SPACE_AFTER) {
   3dc76:	f1b9 0f03 	cmp.w	r9, #3
   3dc7a:	f040 810c 	bne.w	3de96 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   3dc7e:	1b5d      	subs	r5, r3, r5
   3dc80:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   3dc84:	2d00      	cmp	r5, #0
   3dc86:	dd49      	ble.n	3dd1c <z_vprintk+0x162>
						out(' ', ctx);
   3dc88:	4639      	mov	r1, r7
   3dc8a:	2020      	movs	r0, #32
   3dc8c:	47b0      	blx	r6
   3dc8e:	3d01      	subs	r5, #1
   3dc90:	e7f8      	b.n	3dc84 <z_vprintk+0xca>
			switch (*fmt) {
   3dc92:	2878      	cmp	r0, #120	; 0x78
   3dc94:	d07c      	beq.n	3dd90 <z_vprintk+0x1d6>
   3dc96:	287a      	cmp	r0, #122	; 0x7a
   3dc98:	d1c2      	bne.n	3dc20 <z_vprintk+0x66>
				} else if (length_mod == 0) {
   3dc9a:	f1b8 0f00 	cmp.w	r8, #0
   3dc9e:	d1bf      	bne.n	3dc20 <z_vprintk+0x66>
   3dca0:	4680      	mov	r8, r0
   3dca2:	e7a3      	b.n	3dbec <z_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
   3dca4:	f1ba 0f00 	cmp.w	sl, #0
   3dca8:	da0e      	bge.n	3dcc8 <z_vprintk+0x10e>
   3dcaa:	f1b9 0f00 	cmp.w	r9, #0
   3dcae:	f000 80ef 	beq.w	3de90 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   3dcb2:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   3dcb6:	f1b9 0f00 	cmp.w	r9, #0
   3dcba:	bf08      	it	eq
   3dcbc:	f04f 0902 	moveq.w	r9, #2
   3dcc0:	e794      	b.n	3dbec <z_vprintk+0x32>
				if (min_width < 0) {
   3dcc2:	f1ba 0f00 	cmp.w	sl, #0
   3dcc6:	dbf4      	blt.n	3dcb2 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   3dcc8:	230a      	movs	r3, #10
   3dcca:	fb03 0a0a 	mla	sl, r3, sl, r0
   3dcce:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   3dcd2:	e7f0      	b.n	3dcb6 <z_vprintk+0xfc>
				if (length_mod == 'z') {
   3dcd4:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   3dcd8:	d102      	bne.n	3dce0 <z_vprintk+0x126>
					d = va_arg(ap, int);
   3dcda:	f854 5b04 	ldr.w	r5, [r4], #4
   3dcde:	e020      	b.n	3dd22 <z_vprintk+0x168>
				} else if (length_mod == 'l') {
   3dce0:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   3dce4:	d0f9      	beq.n	3dcda <z_vprintk+0x120>
				} else if (length_mod == 'L') {
   3dce6:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   3dcea:	d1f6      	bne.n	3dcda <z_vprintk+0x120>
					long long lld = va_arg(ap, long long);
   3dcec:	3407      	adds	r4, #7
   3dcee:	f024 0407 	bic.w	r4, r4, #7
   3dcf2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   3dcf6:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   3dcfa:	9106      	str	r1, [sp, #24]
   3dcfc:	f143 0100 	adc.w	r1, r3, #0
   3dd00:	9107      	str	r1, [sp, #28]
   3dd02:	2100      	movs	r1, #0
   3dd04:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   3dd08:	f04f 30ff 	mov.w	r0, #4294967295
   3dd0c:	4561      	cmp	r1, ip
   3dd0e:	bf08      	it	eq
   3dd10:	4558      	cmpeq	r0, fp
   3dd12:	d205      	bcs.n	3dd20 <z_vprintk+0x166>
						print_err(out, ctx);
   3dd14:	4639      	mov	r1, r7
   3dd16:	4630      	mov	r0, r6
   3dd18:	f7ff ff2e 	bl	3db78 <print_err>
			might_format = 0;
   3dd1c:	2500      	movs	r5, #0
				break;
   3dd1e:	e765      	b.n	3dbec <z_vprintk+0x32>
					d = lld;
   3dd20:	4615      	mov	r5, r2
				if (d < 0) {
   3dd22:	2d00      	cmp	r5, #0
   3dd24:	da05      	bge.n	3dd32 <z_vprintk+0x178>
					out((int)'-', ctx);
   3dd26:	4639      	mov	r1, r7
   3dd28:	202d      	movs	r0, #45	; 0x2d
   3dd2a:	47b0      	blx	r6
					d = -d;
   3dd2c:	426d      	negs	r5, r5
					min_width--;
   3dd2e:	f10a 3aff 	add.w	sl, sl, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
   3dd32:	464b      	mov	r3, r9
   3dd34:	462a      	mov	r2, r5
   3dd36:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   3dd3a:	4639      	mov	r1, r7
   3dd3c:	4630      	mov	r0, r6
   3dd3e:	f7e5 f8f1 	bl	22f24 <_printk_dec_ulong>
				break;
   3dd42:	e7eb      	b.n	3dd1c <z_vprintk+0x162>
				if (length_mod == 'z') {
   3dd44:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   3dd48:	d102      	bne.n	3dd50 <z_vprintk+0x196>
					u = va_arg(ap, unsigned int);
   3dd4a:	f854 2b04 	ldr.w	r2, [r4], #4
   3dd4e:	e011      	b.n	3dd74 <z_vprintk+0x1ba>
				} else if (length_mod == 'l') {
   3dd50:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   3dd54:	d0f9      	beq.n	3dd4a <z_vprintk+0x190>
				} else if (length_mod == 'L') {
   3dd56:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   3dd5a:	d1f6      	bne.n	3dd4a <z_vprintk+0x190>
					if (llu > ~0UL) {
   3dd5c:	2100      	movs	r1, #0
   3dd5e:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
   3dd62:	3407      	adds	r4, #7
   3dd64:	f024 0407 	bic.w	r4, r4, #7
   3dd68:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   3dd6c:	4299      	cmp	r1, r3
   3dd6e:	bf08      	it	eq
   3dd70:	4290      	cmpeq	r0, r2
   3dd72:	d3cf      	bcc.n	3dd14 <z_vprintk+0x15a>
				_printk_dec_ulong(out, ctx, u, padding,
   3dd74:	f8cd a000 	str.w	sl, [sp]
   3dd78:	464b      	mov	r3, r9
   3dd7a:	e7de      	b.n	3dd3a <z_vprintk+0x180>
				out('0', ctx);
   3dd7c:	4639      	mov	r1, r7
   3dd7e:	2030      	movs	r0, #48	; 0x30
   3dd80:	47b0      	blx	r6
				out('x', ctx);
   3dd82:	4639      	mov	r1, r7
   3dd84:	2078      	movs	r0, #120	; 0x78
   3dd86:	47b0      	blx	r6
					min_width = 8;
   3dd88:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   3dd8c:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   3dd90:	9b02      	ldr	r3, [sp, #8]
   3dd92:	781b      	ldrb	r3, [r3, #0]
   3dd94:	2b70      	cmp	r3, #112	; 0x70
   3dd96:	d104      	bne.n	3dda2 <z_vprintk+0x1e8>
					x = va_arg(ap, unsigned int);
   3dd98:	f854 3b04 	ldr.w	r3, [r4], #4
   3dd9c:	9304      	str	r3, [sp, #16]
   3dd9e:	2300      	movs	r3, #0
   3dda0:	e00d      	b.n	3ddbe <z_vprintk+0x204>
				} else if (length_mod == 'l') {
   3dda2:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   3dda6:	d0f7      	beq.n	3dd98 <z_vprintk+0x1de>
				} else if (length_mod == 'L') {
   3dda8:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   3ddac:	d1f4      	bne.n	3dd98 <z_vprintk+0x1de>
					x = va_arg(ap, unsigned long long);
   3ddae:	3407      	adds	r4, #7
   3ddb0:	f024 0307 	bic.w	r3, r4, #7
   3ddb4:	461c      	mov	r4, r3
   3ddb6:	f854 2b08 	ldr.w	r2, [r4], #8
   3ddba:	685b      	ldr	r3, [r3, #4]
   3ddbc:	9204      	str	r2, [sp, #16]
	int digits = 0;
   3ddbe:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   3ddc0:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   3ddc2:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   3ddc6:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   3ddc8:	9105      	str	r1, [sp, #20]
		shift -= 4;
   3ddca:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   3ddce:	9804      	ldr	r0, [sp, #16]
   3ddd0:	f1cb 0c20 	rsb	ip, fp, #32
   3ddd4:	f1ab 0120 	sub.w	r1, fp, #32
   3ddd8:	fa20 f00b 	lsr.w	r0, r0, fp
   3dddc:	fa03 fc0c 	lsl.w	ip, r3, ip
   3dde0:	ea40 000c 	orr.w	r0, r0, ip
   3dde4:	fa23 f101 	lsr.w	r1, r3, r1
   3dde8:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   3ddea:	f010 000f 	ands.w	r0, r0, #15
   3ddee:	d106      	bne.n	3ddfe <z_vprintk+0x244>
   3ddf0:	9905      	ldr	r1, [sp, #20]
   3ddf2:	b911      	cbnz	r1, 3ddfa <z_vprintk+0x240>
   3ddf4:	f1bb 0f00 	cmp.w	fp, #0
   3ddf8:	d122      	bne.n	3de40 <z_vprintk+0x286>
			nibble += nibble > 9 ? 87 : 48;
   3ddfa:	2130      	movs	r1, #48	; 0x30
   3ddfc:	e003      	b.n	3de06 <z_vprintk+0x24c>
   3ddfe:	2809      	cmp	r0, #9
   3de00:	bf8c      	ite	hi
   3de02:	2157      	movhi	r1, #87	; 0x57
   3de04:	2130      	movls	r1, #48	; 0x30
   3de06:	4408      	add	r0, r1
			out((int)nibble, ctx);
   3de08:	b240      	sxtb	r0, r0
   3de0a:	4639      	mov	r1, r7
   3de0c:	9308      	str	r3, [sp, #32]
   3de0e:	9205      	str	r2, [sp, #20]
   3de10:	47b0      	blx	r6
			digits++;
   3de12:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   3de14:	9a05      	ldr	r2, [sp, #20]
			digits++;
   3de16:	3301      	adds	r3, #1
   3de18:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   3de1a:	9b08      	ldr	r3, [sp, #32]
   3de1c:	f1bb 0f00 	cmp.w	fp, #0
   3de20:	d123      	bne.n	3de6a <z_vprintk+0x2b0>
	if (padding == PAD_SPACE_AFTER) {
   3de22:	f1b9 0f03 	cmp.w	r9, #3
   3de26:	f47f af79 	bne.w	3dd1c <z_vprintk+0x162>
		remaining = min_width * 2 - digits;
   3de2a:	9b03      	ldr	r3, [sp, #12]
   3de2c:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   3de30:	2d00      	cmp	r5, #0
   3de32:	f77f af73 	ble.w	3dd1c <z_vprintk+0x162>
			out(' ', ctx);
   3de36:	4639      	mov	r1, r7
   3de38:	2020      	movs	r0, #32
   3de3a:	47b0      	blx	r6
   3de3c:	3d01      	subs	r5, #1
   3de3e:	e7f7      	b.n	3de30 <z_vprintk+0x276>
		if (remaining-- <= min_width) {
   3de40:	1e51      	subs	r1, r2, #1
   3de42:	4592      	cmp	sl, r2
   3de44:	9108      	str	r1, [sp, #32]
   3de46:	db07      	blt.n	3de58 <z_vprintk+0x29e>
			if (padding == PAD_ZERO_BEFORE) {
   3de48:	f1b9 0f01 	cmp.w	r9, #1
   3de4c:	d106      	bne.n	3de5c <z_vprintk+0x2a2>
				out('0', ctx);
   3de4e:	4639      	mov	r1, r7
   3de50:	2030      	movs	r0, #48	; 0x30
   3de52:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   3de54:	47b0      	blx	r6
   3de56:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   3de58:	9a08      	ldr	r2, [sp, #32]
   3de5a:	e7b6      	b.n	3ddca <z_vprintk+0x210>
			} else if (padding == PAD_SPACE_BEFORE) {
   3de5c:	f1b9 0f02 	cmp.w	r9, #2
   3de60:	d1fa      	bne.n	3de58 <z_vprintk+0x29e>
   3de62:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   3de64:	4639      	mov	r1, r7
   3de66:	2020      	movs	r0, #32
   3de68:	e7f4      	b.n	3de54 <z_vprintk+0x29a>
			found_largest_digit = 1;
   3de6a:	9505      	str	r5, [sp, #20]
   3de6c:	e7ad      	b.n	3ddca <z_vprintk+0x210>
					out((int)(*s++), ctx);
   3de6e:	4639      	mov	r1, r7
   3de70:	47b0      	blx	r6
   3de72:	e6fa      	b.n	3dc6a <z_vprintk+0xb0>
				out(c, ctx);
   3de74:	4639      	mov	r1, r7
   3de76:	f854 0b04 	ldr.w	r0, [r4], #4
				out((int)'%', ctx);
   3de7a:	47b0      	blx	r6
   3de7c:	e74e      	b.n	3dd1c <z_vprintk+0x162>
				length_mod = 0;
   3de7e:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   3de80:	46a9      	mov	r9, r5
				min_width = -1;
   3de82:	f04f 3aff 	mov.w	sl, #4294967295
				might_format = 1;
   3de86:	2501      	movs	r5, #1
   3de88:	e6b0      	b.n	3dbec <z_vprintk+0x32>
				padding = PAD_SPACE_AFTER;
   3de8a:	f04f 0903 	mov.w	r9, #3
   3de8e:	e6ad      	b.n	3dbec <z_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
   3de90:	f04f 0901 	mov.w	r9, #1
   3de94:	e6aa      	b.n	3dbec <z_vprintk+0x32>
			might_format = 0;
   3de96:	4605      	mov	r5, r0
   3de98:	e6a8      	b.n	3dbec <z_vprintk+0x32>

0003de9a <printk>:
{
   3de9a:	b40f      	push	{r0, r1, r2, r3}
   3de9c:	b507      	push	{r0, r1, r2, lr}
   3de9e:	a904      	add	r1, sp, #16
   3dea0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   3dea4:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   3dea6:	f7e5 f88f 	bl	22fc8 <vprintk>
}
   3deaa:	b003      	add	sp, #12
   3deac:	f85d eb04 	ldr.w	lr, [sp], #4
   3deb0:	b004      	add	sp, #16
   3deb2:	4770      	bx	lr

0003deb4 <snprintk>:
{
   3deb4:	b40c      	push	{r2, r3}
   3deb6:	b507      	push	{r0, r1, r2, lr}
   3deb8:	ab04      	add	r3, sp, #16
   3deba:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   3debe:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   3dec0:	f7e5 f890 	bl	22fe4 <vsnprintk>
}
   3dec4:	b003      	add	sp, #12
   3dec6:	f85d eb04 	ldr.w	lr, [sp], #4
   3deca:	b002      	add	sp, #8
   3decc:	4770      	bx	lr

0003dece <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   3dece:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   3ded0:	f7fc f96c 	bl	3a1ac <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   3ded4:	2000      	movs	r0, #0
   3ded6:	bd08      	pop	{r3, pc}

0003ded8 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, s32_t timeout)
{
   3ded8:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   3deda:	f7fc f9b1 	bl	3a240 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   3dede:	f110 0f0b 	cmn.w	r0, #11
   3dee2:	d005      	beq.n	3def0 <sys_sem_take+0x18>
   3dee4:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   3dee8:	bf08      	it	eq
   3deea:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   3deee:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   3def0:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   3def4:	e7fb      	b.n	3deee <sys_sem_take+0x16>

0003def6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   3def6:	4604      	mov	r4, r0
   3def8:	b508      	push	{r3, lr}
   3defa:	4608      	mov	r0, r1
   3defc:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   3defe:	461a      	mov	r2, r3
   3df00:	47a0      	blx	r4
	return z_impl_k_current_get();
   3df02:	f7fc f94d 	bl	3a1a0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   3df06:	f7e6 feeb 	bl	24ce0 <z_impl_k_thread_abort>

0003df0a <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   3df0a:	b510      	push	{r4, lr}
   3df0c:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   3df0e:	f04f 31ff 	mov.w	r1, #4294967295
   3df12:	4620      	mov	r0, r4
   3df14:	f7fa ff5c 	bl	38dd0 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   3df18:	4603      	mov	r3, r0
   3df1a:	2800      	cmp	r0, #0
   3df1c:	d0f7      	beq.n	3df0e <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   3df1e:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3df20:	3308      	adds	r3, #8
   3df22:	e8d3 1fef 	ldaex	r1, [r3]
   3df26:	f021 0c01 	bic.w	ip, r1, #1
   3df2a:	e8c3 cfee 	stlex	lr, ip, [r3]
   3df2e:	f1be 0f00 	cmp.w	lr, #0
   3df32:	d1f6      	bne.n	3df22 <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   3df34:	07cb      	lsls	r3, r1, #31
   3df36:	d500      	bpl.n	3df3a <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   3df38:	4790      	blx	r2
	z_impl_k_yield();
   3df3a:	f7fb ffb3 	bl	39ea4 <z_impl_k_yield>
   3df3e:	e7e6      	b.n	3df0e <z_work_q_main+0x4>

0003df40 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   3df40:	4040      	eors	r0, r0
   3df42:	f380 8811 	msr	BASEPRI, r0
   3df46:	f04f 0004 	mov.w	r0, #4
   3df4a:	df02      	svc	2
}
   3df4c:	4770      	bx	lr

0003df4e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_ASSET_TRACKER_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM(CONFIG_ASSET_TRACKER_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   3df4e:	4770      	bx	lr

0003df50 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   3df50:	f7f9 bfa0 	b.w	37e94 <SystemInit>

0003df54 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   3df54:	6843      	ldr	r3, [r0, #4]
}
   3df56:	7958      	ldrb	r0, [r3, #5]
   3df58:	4770      	bx	lr

0003df5a <k_cycle_get_32_wrapper>:
   3df5a:	f7e6 b875 	b.w	24048 <z_timer_cycle_get_32>

0003df5e <dummy_timestamp>:
   3df5e:	2000      	movs	r0, #0
   3df60:	4770      	bx	lr

0003df62 <log_string_sync>:
{
   3df62:	b40e      	push	{r1, r2, r3}
   3df64:	b503      	push	{r0, r1, lr}
   3df66:	aa03      	add	r2, sp, #12
   3df68:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   3df6c:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap);
   3df6e:	f7e5 f86b 	bl	23048 <log_generic>
}
   3df72:	b002      	add	sp, #8
   3df74:	f85d eb04 	ldr.w	lr, [sp], #4
   3df78:	b003      	add	sp, #12
   3df7a:	4770      	bx	lr

0003df7c <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
   3df7c:	b508      	push	{r3, lr}
				K_THREAD_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   3df7e:	f7e5 f8d9 	bl	23134 <log_init>
	}

	return 0;
}
   3df82:	2000      	movs	r0, #0
   3df84:	bd08      	pop	{r3, pc}

0003df86 <log_strdup>:
}
   3df86:	4770      	bx	lr

0003df88 <out_func>:
{
   3df88:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((u8_t *)&c, 1, out_ctx->control_block->ctx);
   3df8a:	e9d1 3200 	ldrd	r3, r2, [r1]
{
   3df8e:	9001      	str	r0, [sp, #4]
		out_ctx->func((u8_t *)&c, 1, out_ctx->control_block->ctx);
   3df90:	6852      	ldr	r2, [r2, #4]
   3df92:	2101      	movs	r1, #1
   3df94:	a801      	add	r0, sp, #4
   3df96:	4798      	blx	r3
}
   3df98:	2000      	movs	r0, #0
   3df9a:	b003      	add	sp, #12
   3df9c:	f85d fb04 	ldr.w	pc, [sp], #4

0003dfa0 <buffer_write>:
{
   3dfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3dfa2:	4606      	mov	r6, r0
   3dfa4:	460d      	mov	r5, r1
   3dfa6:	4614      	mov	r4, r2
   3dfa8:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   3dfaa:	4621      	mov	r1, r4
   3dfac:	4628      	mov	r0, r5
   3dfae:	463a      	mov	r2, r7
   3dfb0:	47b0      	blx	r6
	} while (len != 0);
   3dfb2:	1a24      	subs	r4, r4, r0
		buf += processed;
   3dfb4:	4405      	add	r5, r0
	} while (len != 0);
   3dfb6:	d1f8      	bne.n	3dfaa <buffer_write+0xa>
}
   3dfb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003dfba <log_output_flush>:
		     log_output->control_block->offset,
   3dfba:	6842      	ldr	r2, [r0, #4]
{
   3dfbc:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   3dfbe:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   3dfc2:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   3dfc4:	6881      	ldr	r1, [r0, #8]
   3dfc6:	6800      	ldr	r0, [r0, #0]
   3dfc8:	f7ff ffea 	bl	3dfa0 <buffer_write>
	log_output->control_block->offset = 0;
   3dfcc:	2200      	movs	r2, #0
   3dfce:	6863      	ldr	r3, [r4, #4]
   3dfd0:	601a      	str	r2, [r3, #0]
}
   3dfd2:	bd10      	pop	{r4, pc}

0003dfd4 <char_out>:
{
   3dfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3dfd6:	460d      	mov	r5, r1
   3dfd8:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   3dfda:	4604      	mov	r4, r0
   3dfdc:	1847      	adds	r7, r0, r1
   3dfde:	42bc      	cmp	r4, r7
   3dfe0:	d101      	bne.n	3dfe6 <char_out+0x12>
}
   3dfe2:	4628      	mov	r0, r5
   3dfe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   3dfe6:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   3dfea:	6873      	ldr	r3, [r6, #4]
   3dfec:	4630      	mov	r0, r6
   3dfee:	685b      	ldr	r3, [r3, #4]
   3dff0:	4798      	blx	r3
   3dff2:	e7f4      	b.n	3dfde <char_out+0xa>

0003dff4 <boot_flag_read.constprop.6>:
static int boot_flag_read(int flag, u8_t bank_id)
   3dff4:	b507      	push	{r0, r1, r2, lr}
	rc = flash_area_open(bank_id, &fa);
   3dff6:	2002      	movs	r0, #2
   3dff8:	a901      	add	r1, sp, #4
   3dffa:	f7e5 fcdd 	bl	239b8 <flash_area_open>
	if (rc) {
   3dffe:	b950      	cbnz	r0, 3e016 <boot_flag_read.constprop.6+0x22>
	rc = boot_flag_offs(flag, fa, &offs);
   3e000:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   3e002:	2301      	movs	r3, #1
		*offs = IMAGE_OK_OFFS(fa);
   3e004:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   3e006:	f10d 0203 	add.w	r2, sp, #3
   3e00a:	3918      	subs	r1, #24
   3e00c:	f000 f891 	bl	3e132 <flash_area_read>
	if (rc != 0) {
   3e010:	b908      	cbnz	r0, 3e016 <boot_flag_read.constprop.6+0x22>
	return flag_val;
   3e012:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
   3e016:	b003      	add	sp, #12
   3e018:	f85d fb04 	ldr.w	pc, [sp], #4

0003e01c <boot_flag_write.constprop.7>:
static int boot_flag_write(int flag, u8_t bank_id)
   3e01c:	b513      	push	{r0, r1, r4, lr}
	rc = flash_area_open(bank_id, &fa);
   3e01e:	a901      	add	r1, sp, #4
   3e020:	f7e5 fcca 	bl	239b8 <flash_area_open>
	if (rc) {
   3e024:	4604      	mov	r4, r0
   3e026:	b948      	cbnz	r0, 3e03c <boot_flag_write.constprop.7+0x20>
	rc = boot_flag_offs(flag, fa, &offs);
   3e028:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   3e02a:	2201      	movs	r2, #1
		*offs = IMAGE_OK_OFFS(fa);
   3e02c:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   3e02e:	3918      	subs	r1, #24
   3e030:	f7e5 fb30 	bl	23694 <boot_write_trailer_byte>
   3e034:	4604      	mov	r4, r0
	flash_area_close(fa);
   3e036:	9801      	ldr	r0, [sp, #4]
   3e038:	f000 f87a 	bl	3e130 <flash_area_close>
}
   3e03c:	4620      	mov	r0, r4
   3e03e:	b002      	add	sp, #8
   3e040:	bd10      	pop	{r4, pc}

0003e042 <boot_write_img_confirmed>:
{
	return boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) == BOOT_FLAG_SET;
}

int boot_write_img_confirmed(void)
{
   3e042:	b513      	push	{r0, r1, r4, lr}
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   3e044:	f7ff ffd6 	bl	3dff4 <boot_flag_read.constprop.6>
	rc = flash_area_open(bank_id, &fa);
   3e048:	a901      	add	r1, sp, #4
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   3e04a:	4604      	mov	r4, r0
	rc = flash_area_open(bank_id, &fa);
   3e04c:	2002      	movs	r0, #2
   3e04e:	f7e5 fcb3 	bl	239b8 <flash_area_open>
	if (rc) {
   3e052:	2800      	cmp	r0, #0
		return -EINVAL;
   3e054:	bf0c      	ite	eq
   3e056:	23ff      	moveq	r3, #255	; 0xff
   3e058:	f06f 0315 	mvnne.w	r3, #21
	int rc;

	if (boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) !=
   3e05c:	42a3      	cmp	r3, r4
   3e05e:	d104      	bne.n	3e06a <boot_write_img_confirmed+0x28>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   3e060:	2002      	movs	r0, #2
   3e062:	f7ff ffdb 	bl	3e01c <boot_flag_write.constprop.7>
	}

	rc = boot_image_ok_write(FLASH_AREA_IMAGE_PRIMARY);

	return rc;
}
   3e066:	b002      	add	sp, #8
   3e068:	bd10      	pop	{r4, pc}
		return 0;
   3e06a:	2000      	movs	r0, #0
   3e06c:	e7fb      	b.n	3e066 <boot_write_img_confirmed+0x24>

0003e06e <flash_img_buffered_write>:

int flash_img_buffered_write(struct flash_img_context *ctx, u8_t *data,
			     size_t len, bool flush)
{
   3e06e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e072:	4604      	mov	r4, r0
   3e074:	4689      	mov	r9, r1
   3e076:	4616      	mov	r6, r2
   3e078:	4698      	mov	r8, r3
	int processed = 0;
   3e07a:	2700      	movs	r7, #0
	while ((len - processed) >=
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
		       buf_empty_bytes);

		ctx->buf_bytes = CONFIG_IMG_BLOCK_BUF_SIZE;
   3e07c:	f44f 7a00 	mov.w	sl, #512	; 0x200
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
   3e080:	f8b4 0208 	ldrh.w	r0, [r4, #520]	; 0x208
	while ((len - processed) >=
   3e084:	1bf2      	subs	r2, r6, r7
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
   3e086:	f5c0 7b00 	rsb	fp, r0, #512	; 0x200
	while ((len - processed) >=
   3e08a:	455a      	cmp	r2, fp
   3e08c:	d222      	bcs.n	3e0d4 <flash_img_buffered_write+0x66>

		processed += buf_empty_bytes;
	}

	/* place rest of the data into ctx->buf */
	if (processed < len) {
   3e08e:	42b7      	cmp	r7, r6
   3e090:	d20a      	bcs.n	3e0a8 <flash_img_buffered_write+0x3a>
   3e092:	eb09 0107 	add.w	r1, r9, r7
   3e096:	4420      	add	r0, r4
   3e098:	f002 fac0 	bl	4061c <memcpy>
		memcpy(ctx->buf + ctx->buf_bytes,
		       data + processed, len - processed);
		ctx->buf_bytes += len - processed;
   3e09c:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
   3e0a0:	441e      	add	r6, r3
   3e0a2:	1bf6      	subs	r6, r6, r7
   3e0a4:	f8a4 6208 	strh.w	r6, [r4, #520]	; 0x208
	}

	if (!flush) {
   3e0a8:	f1b8 0f00 	cmp.w	r8, #0
   3e0ac:	d02a      	beq.n	3e104 <flash_img_buffered_write+0x96>
		return rc;
	}

	if (ctx->buf_bytes > 0) {
   3e0ae:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
   3e0b2:	b9f3      	cbnz	r3, 3e0f2 <flash_img_buffered_write+0x84>
		}
	}
#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	/* erase the image trailer area if it was not erased */
	rc = flash_progressive_erase(ctx,
				BOOT_TRAILER_IMG_STATUS_OFFS(ctx->flash_area));
   3e0b4:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	rc = flash_progressive_erase(ctx,
   3e0b8:	4620      	mov	r0, r4
				BOOT_TRAILER_IMG_STATUS_OFFS(ctx->flash_area));
   3e0ba:	6899      	ldr	r1, [r3, #8]
	rc = flash_progressive_erase(ctx,
   3e0bc:	3920      	subs	r1, #32
   3e0be:	f7e5 fb43 	bl	23748 <flash_progressive_erase>
	if (rc) {
   3e0c2:	4605      	mov	r5, r0
   3e0c4:	b9d8      	cbnz	r0, 3e0fe <flash_img_buffered_write+0x90>
		return rc;
	}
#endif

	flash_area_close(ctx->flash_area);
   3e0c6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
   3e0ca:	f000 f831 	bl	3e130 <flash_area_close>
	ctx->flash_area = NULL;
   3e0ce:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200

	return rc;
   3e0d2:	e014      	b.n	3e0fe <flash_img_buffered_write+0x90>
   3e0d4:	465a      	mov	r2, fp
   3e0d6:	eb09 0107 	add.w	r1, r9, r7
   3e0da:	4420      	add	r0, r4
   3e0dc:	f002 fa9e 	bl	4061c <memcpy>
		ctx->buf_bytes = CONFIG_IMG_BLOCK_BUF_SIZE;
   3e0e0:	f8a4 a208 	strh.w	sl, [r4, #520]	; 0x208
		rc = flash_sync(ctx);
   3e0e4:	4620      	mov	r0, r4
   3e0e6:	f7e5 fb8d 	bl	23804 <flash_sync>
		if (rc) {
   3e0ea:	4605      	mov	r5, r0
   3e0ec:	b938      	cbnz	r0, 3e0fe <flash_img_buffered_write+0x90>
		processed += buf_empty_bytes;
   3e0ee:	445f      	add	r7, fp
   3e0f0:	e7c6      	b.n	3e080 <flash_img_buffered_write+0x12>
		rc = flash_sync(ctx);
   3e0f2:	4620      	mov	r0, r4
   3e0f4:	f7e5 fb86 	bl	23804 <flash_sync>
		if (rc) {
   3e0f8:	4605      	mov	r5, r0
   3e0fa:	2800      	cmp	r0, #0
   3e0fc:	d0da      	beq.n	3e0b4 <flash_img_buffered_write+0x46>
}
   3e0fe:	4628      	mov	r0, r5
   3e100:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e104:	4645      	mov	r5, r8
   3e106:	e7fa      	b.n	3e0fe <flash_img_buffered_write+0x90>

0003e108 <flash_img_bytes_written>:

size_t flash_img_bytes_written(struct flash_img_context *ctx)
{
	return ctx->bytes_written;
}
   3e108:	f8d0 0204 	ldr.w	r0, [r0, #516]	; 0x204
   3e10c:	4770      	bx	lr

0003e10e <flash_img_init>:

int flash_img_init(struct flash_img_context *ctx)
{
	ctx->bytes_written = 0;
   3e10e:	2300      	movs	r3, #0
   3e110:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
	ctx->buf_bytes = 0U;
   3e114:	f8a0 3208 	strh.w	r3, [r0, #520]	; 0x208
#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	ctx->off_last = -1;
   3e118:	f04f 33ff 	mov.w	r3, #4294967295
#endif
	return flash_area_open(FLASH_AREA_IMAGE_SECONDARY,
   3e11c:	f500 7100 	add.w	r1, r0, #512	; 0x200
	ctx->off_last = -1;
   3e120:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
	return flash_area_open(FLASH_AREA_IMAGE_SECONDARY,
   3e124:	2006      	movs	r0, #6
   3e126:	f7e5 bc47 	b.w	239b8 <flash_area_open>

0003e12a <z_impl_flash_write_protection_set>:
						   bool enable)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->driver_api;

	return api->write_protection(dev, enable);
   3e12a:	6843      	ldr	r3, [r0, #4]
   3e12c:	68db      	ldr	r3, [r3, #12]
   3e12e:	4718      	bx	r3

0003e130 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   3e130:	4770      	bx	lr

0003e132 <flash_area_read>:
}
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   3e132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3e136:	461e      	mov	r6, r3
	struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   3e138:	6883      	ldr	r3, [r0, #8]
{
   3e13a:	4605      	mov	r5, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3e13c:	428b      	cmp	r3, r1
{
   3e13e:	460c      	mov	r4, r1
   3e140:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3e142:	d30f      	bcc.n	3e164 <flash_area_read+0x32>
   3e144:	1872      	adds	r2, r6, r1
   3e146:	4293      	cmp	r3, r2
   3e148:	d30c      	bcc.n	3e164 <flash_area_read+0x32>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   3e14a:	68c0      	ldr	r0, [r0, #12]
   3e14c:	f7f9 ff2c 	bl	37fa8 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   3e150:	6869      	ldr	r1, [r5, #4]
   3e152:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   3e154:	6843      	ldr	r3, [r0, #4]
   3e156:	463a      	mov	r2, r7
   3e158:	681c      	ldr	r4, [r3, #0]
   3e15a:	4633      	mov	r3, r6
   3e15c:	46a4      	mov	ip, r4
}
   3e15e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3e162:	4760      	bx	ip
   3e164:	f06f 0015 	mvn.w	r0, #21
   3e168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003e16c <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   3e16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e170:	4698      	mov	r8, r3
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   3e172:	6883      	ldr	r3, [r0, #8]
{
   3e174:	4607      	mov	r7, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3e176:	428b      	cmp	r3, r1
{
   3e178:	460d      	mov	r5, r1
   3e17a:	4691      	mov	r9, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3e17c:	d31c      	bcc.n	3e1b8 <flash_area_write+0x4c>
   3e17e:	eb08 0201 	add.w	r2, r8, r1
   3e182:	4293      	cmp	r3, r2
   3e184:	d318      	bcc.n	3e1b8 <flash_area_write+0x4c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   3e186:	68c0      	ldr	r0, [r0, #12]
   3e188:	f7f9 ff0e 	bl	37fa8 <z_impl_device_get_binding>
   3e18c:	4606      	mov	r6, r0
	return z_impl_flash_write_protection_set(dev, enable);
   3e18e:	2100      	movs	r1, #0
   3e190:	f7ff ffcb 	bl	3e12a <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   3e194:	4604      	mov	r4, r0
   3e196:	b960      	cbnz	r0, 3e1b2 <flash_area_write+0x46>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   3e198:	6879      	ldr	r1, [r7, #4]
   3e19a:	4429      	add	r1, r5
	return api->write(dev, offset, data, len);
   3e19c:	6873      	ldr	r3, [r6, #4]
   3e19e:	464a      	mov	r2, r9
   3e1a0:	685c      	ldr	r4, [r3, #4]
   3e1a2:	4630      	mov	r0, r6
   3e1a4:	4643      	mov	r3, r8
   3e1a6:	47a0      	blx	r4
   3e1a8:	4604      	mov	r4, r0
   3e1aa:	2101      	movs	r1, #1
   3e1ac:	4630      	mov	r0, r6
   3e1ae:	f7ff ffbc 	bl	3e12a <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   3e1b2:	4620      	mov	r0, r4
   3e1b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   3e1b8:	f06f 0415 	mvn.w	r4, #21
   3e1bc:	e7f9      	b.n	3e1b2 <flash_area_write+0x46>

0003e1be <flash_area_erase>:
int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   3e1be:	6883      	ldr	r3, [r0, #8]
{
   3e1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3e1c4:	428b      	cmp	r3, r1
{
   3e1c6:	4607      	mov	r7, r0
   3e1c8:	460d      	mov	r5, r1
   3e1ca:	4690      	mov	r8, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3e1cc:	d31a      	bcc.n	3e204 <flash_area_erase+0x46>
   3e1ce:	440a      	add	r2, r1
   3e1d0:	4293      	cmp	r3, r2
   3e1d2:	d317      	bcc.n	3e204 <flash_area_erase+0x46>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   3e1d4:	68c0      	ldr	r0, [r0, #12]
   3e1d6:	f7f9 fee7 	bl	37fa8 <z_impl_device_get_binding>
   3e1da:	4606      	mov	r6, r0
   3e1dc:	2100      	movs	r1, #0
   3e1de:	f7ff ffa4 	bl	3e12a <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   3e1e2:	4604      	mov	r4, r0
   3e1e4:	b958      	cbnz	r0, 3e1fe <flash_area_erase+0x40>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   3e1e6:	6879      	ldr	r1, [r7, #4]
   3e1e8:	4429      	add	r1, r5
	return api->erase(dev, offset, size);
   3e1ea:	6873      	ldr	r3, [r6, #4]
   3e1ec:	4642      	mov	r2, r8
   3e1ee:	689b      	ldr	r3, [r3, #8]
   3e1f0:	4630      	mov	r0, r6
   3e1f2:	4798      	blx	r3
   3e1f4:	4604      	mov	r4, r0
   3e1f6:	2101      	movs	r1, #1
   3e1f8:	4630      	mov	r0, r6
   3e1fa:	f7ff ff96 	bl	3e12a <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   3e1fe:	4620      	mov	r0, r4
   3e200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   3e204:	f06f 0415 	mvn.w	r4, #21
   3e208:	e7f9      	b.n	3e1fe <flash_area_erase+0x40>

0003e20a <flash_area_align>:

u8_t flash_area_align(const struct flash_area *fa)
{
   3e20a:	b508      	push	{r3, lr}
	struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   3e20c:	68c0      	ldr	r0, [r0, #12]
   3e20e:	f7f9 fecb 	bl	37fa8 <z_impl_device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->driver_api;

	return api->write_block_size;
   3e212:	6843      	ldr	r3, [r0, #4]

	return flash_get_write_block_size(dev);
}
   3e214:	7d18      	ldrb	r0, [r3, #20]
   3e216:	bd08      	pop	{r3, pc}

0003e218 <flash_area_get_device>:
	return 1;
}

struct device *flash_area_get_device(const struct flash_area *fa)
{
	return device_get_binding(fa->fa_dev_name);
   3e218:	68c0      	ldr	r0, [r0, #12]
   3e21a:	f7f9 bec5 	b.w	37fa8 <z_impl_device_get_binding>

0003e21e <uart_poll_out>:
   3e21e:	6843      	ldr	r3, [r0, #4]
   3e220:	685b      	ldr	r3, [r3, #4]
   3e222:	4718      	bx	r3

0003e224 <debug_hook_out_nop>:
}
   3e224:	2000      	movs	r0, #0
   3e226:	4770      	bx	lr

0003e228 <clkstarted_handle>:
{
   3e228:	b538      	push	{r3, r4, r5, lr}
	sub_data->started = true;
   3e22a:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   3e22c:	6883      	ldr	r3, [r0, #8]
{
   3e22e:	4605      	mov	r5, r0
	sub_data->started = true;
   3e230:	fb04 3401 	mla	r4, r4, r1, r3
   3e234:	2301      	movs	r3, #1
   3e236:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   3e238:	f04f 0320 	mov.w	r3, #32
   3e23c:	f3ef 8111 	mrs	r1, BASEPRI
   3e240:	f383 8811 	msr	BASEPRI, r3
   3e244:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   3e248:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   3e24a:	b12b      	cbz	r3, 3e258 <clkstarted_handle+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3e24c:	6860      	ldr	r0, [r4, #4]
   3e24e:	681a      	ldr	r2, [r3, #0]
   3e250:	4283      	cmp	r3, r0
	list->head = node;
   3e252:	6022      	str	r2, [r4, #0]
	list->tail = node;
   3e254:	bf08      	it	eq
   3e256:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   3e258:	f381 8811 	msr	BASEPRI, r1
   3e25c:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
   3e260:	b903      	cbnz	r3, 3e264 <clkstarted_handle+0x3c>
}
   3e262:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   3e264:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   3e268:	4628      	mov	r0, r5
   3e26a:	4790      	blx	r2
   3e26c:	e7e4      	b.n	3e238 <clkstarted_handle+0x10>

0003e26e <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   3e26e:	2200      	movs	r2, #0
   3e270:	f7e5 bc40 	b.w	23af4 <clock_async_start>

0003e274 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   3e274:	4770      	bx	lr

0003e276 <sys_clock_disable>:
   3e276:	4770      	bx	lr

0003e278 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   3e278:	f7e5 bf38 	b.w	240ec <_DoInit>

0003e27c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
   3e27c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   3e27e:	f7ff fffb 	bl	3e278 <SEGGER_RTT_Init>

	return 0;
}
   3e282:	2000      	movs	r0, #0
   3e284:	bd08      	pop	{r3, pc}

0003e286 <z_irq_spurious>:
	z_arm_reserved();
   3e286:	f7e6 b843 	b.w	24310 <z_arm_bus_fault>

0003e28a <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   3e28a:	6d83      	ldr	r3, [r0, #88]	; 0x58
   3e28c:	f383 880b 	msr	PSPLIM, r3
}
   3e290:	4770      	bx	lr

0003e292 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   3e292:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   3e294:	6800      	ldr	r0, [r0, #0]
   3e296:	f7e6 b951 	b.w	2453c <z_arm_fatal_error>

0003e29a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   3e29a:	b508      	push	{r3, lr}
	handler();
   3e29c:	f7e6 f842 	bl	24324 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   3e2a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   3e2a4:	f7e5 bfa8 	b.w	241f8 <z_arm_exc_exit>

0003e2a8 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   3e2a8:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   3e2aa:	2100      	movs	r1, #0
   3e2ac:	a801      	add	r0, sp, #4
   3e2ae:	f7e6 ff75 	bl	2519c <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   3e2b2:	b003      	add	sp, #12
   3e2b4:	f85d fb04 	ldr.w	pc, [sp], #4

0003e2b8 <mpu_configure_region>:
{
   3e2b8:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   3e2ba:	684b      	ldr	r3, [r1, #4]
{
   3e2bc:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   3e2be:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   3e2c0:	f89d 2008 	ldrb.w	r2, [sp, #8]
   3e2c4:	890d      	ldrh	r5, [r1, #8]
   3e2c6:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   3e2c8:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3e2ca:	f024 041f 	bic.w	r4, r4, #31
   3e2ce:	3b01      	subs	r3, #1
	p_attr->rbar = attr->rbar &
   3e2d0:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3e2d4:	4423      	add	r3, r4
	p_attr->mair_idx = attr->mair_idx;
   3e2d6:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3e2da:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   3e2de:	4669      	mov	r1, sp
	p_attr->mair_idx = attr->mair_idx;
   3e2e0:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3e2e4:	9303      	str	r3, [sp, #12]
   3e2e6:	f7e6 fd7b 	bl	24de0 <region_allocate_and_init>
}
   3e2ea:	b005      	add	sp, #20
   3e2ec:	bd30      	pop	{r4, r5, pc}

0003e2ee <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   3e2ee:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   3e2f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   3e2f6:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   3e2f8:	bf08      	it	eq
   3e2fa:	f06f 0015 	mvneq.w	r0, #21
   3e2fe:	4770      	bx	lr

0003e300 <_stdout_hook_default>:
}
   3e300:	f04f 30ff 	mov.w	r0, #4294967295
   3e304:	4770      	bx	lr

0003e306 <_stdin_hook_default>:
}
   3e306:	2000      	movs	r0, #0
   3e308:	4770      	bx	lr

0003e30a <_read>:
{
   3e30a:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   3e30c:	4611      	mov	r1, r2
   3e30e:	f7e6 bf87 	b.w	25220 <z_impl_zephyr_read_stdin>

0003e312 <_write>:
{
   3e312:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   3e314:	4611      	mov	r1, r2
   3e316:	f7e6 bf97 	b.w	25248 <z_impl_zephyr_write_stdout>

0003e31a <_close>:
   3e31a:	f04f 30ff 	mov.w	r0, #4294967295
   3e31e:	4770      	bx	lr

0003e320 <_lseek>:
}
   3e320:	2000      	movs	r0, #0
   3e322:	4770      	bx	lr

0003e324 <_isatty>:
}
   3e324:	2001      	movs	r0, #1
   3e326:	4770      	bx	lr

0003e328 <_kill>:
}
   3e328:	2000      	movs	r0, #0
   3e32a:	4770      	bx	lr

0003e32c <_getpid>:
}
   3e32c:	2000      	movs	r0, #0
   3e32e:	4770      	bx	lr

0003e330 <_fstat>:
	st->st_mode = S_IFCHR;
   3e330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   3e334:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   3e336:	604b      	str	r3, [r1, #4]
}
   3e338:	4770      	bx	lr

0003e33a <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   3e33a:	f7f9 be5b 	b.w	37ff4 <z_impl_z_errno>

0003e33e <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   3e33e:	b508      	push	{r3, lr}
	net_if_init();
   3e340:	f7e7 f84a 	bl	253d8 <net_if_init>
	net_if_post_init();
   3e344:	f7e7 f85c 	bl	25400 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   3e348:	2000      	movs	r0, #0
   3e34a:	bd08      	pop	{r3, pc}

0003e34c <net_if_l2>:
	if (!iface || !iface->if_dev) {
   3e34c:	b110      	cbz	r0, 3e354 <net_if_l2+0x8>
   3e34e:	6800      	ldr	r0, [r0, #0]
   3e350:	b100      	cbz	r0, 3e354 <net_if_l2+0x8>
	return iface->if_dev->l2;
   3e352:	6840      	ldr	r0, [r0, #4]
}
   3e354:	4770      	bx	lr

0003e356 <l2_flags_get>:
{
   3e356:	b510      	push	{r4, lr}
   3e358:	4602      	mov	r2, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   3e35a:	f7ff fff7 	bl	3e34c <net_if_l2>
   3e35e:	b128      	cbz	r0, 3e36c <l2_flags_get+0x16>
   3e360:	68c3      	ldr	r3, [r0, #12]
   3e362:	b11b      	cbz	r3, 3e36c <l2_flags_get+0x16>
}
   3e364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   3e368:	4610      	mov	r0, r2
   3e36a:	4718      	bx	r3
}
   3e36c:	2000      	movs	r0, #0
   3e36e:	bd10      	pop	{r4, pc}

0003e370 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, u16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   3e370:	e9d0 2300 	ldrd	r2, r3, [r0]
   3e374:	1a9b      	subs	r3, r3, r2
   3e376:	2b01      	cmp	r3, #1
{
   3e378:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   3e37a:	d90c      	bls.n	3e396 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   3e37c:	4614      	mov	r4, r2
   3e37e:	1c53      	adds	r3, r2, #1
   3e380:	6003      	str	r3, [r0, #0]
   3e382:	f814 3b02 	ldrb.w	r3, [r4], #2
   3e386:	021b      	lsls	r3, r3, #8
   3e388:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   3e38a:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   3e38c:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   3e38e:	7852      	ldrb	r2, [r2, #1]
   3e390:	4313      	orrs	r3, r2
   3e392:	800b      	strh	r3, [r1, #0]
}
   3e394:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3e396:	f06f 0015 	mvn.w	r0, #21
   3e39a:	e7fb      	b.n	3e394 <unpack_uint16+0x24>

0003e39c <packet_length_decode>:
int packet_length_decode(struct buf_ctx *buf, u32_t *length)
{
	u8_t shift = 0U;
	u8_t bytes = 0U;

	*length = 0U;
   3e39c:	2300      	movs	r3, #0
{
   3e39e:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		if (bytes > MQTT_MAX_LENGTH_BYTES) {
			return -EINVAL;
		}

		if (buf->cur >= buf->end) {
   3e3a0:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   3e3a2:	600b      	str	r3, [r1, #0]
		if (buf->cur >= buf->end) {
   3e3a4:	6804      	ldr	r4, [r0, #0]
   3e3a6:	42bc      	cmp	r4, r7
   3e3a8:	d215      	bcs.n	3e3d6 <packet_length_decode+0x3a>
			return -EAGAIN;
		}

		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3e3aa:	4625      	mov	r5, r4
   3e3ac:	f815 2b01 	ldrb.w	r2, [r5], #1
   3e3b0:	680e      	ldr	r6, [r1, #0]
   3e3b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
								<< shift;
   3e3b6:	409a      	lsls	r2, r3
		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3e3b8:	4432      	add	r2, r6
   3e3ba:	600a      	str	r2, [r1, #0]
		shift += MQTT_LENGTH_SHIFT;
		bytes++;
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   3e3bc:	6005      	str	r5, [r0, #0]
   3e3be:	f994 2000 	ldrsb.w	r2, [r4]
   3e3c2:	2a00      	cmp	r2, #0
   3e3c4:	db01      	blt.n	3e3ca <packet_length_decode+0x2e>

	MQTT_TRC("length:0x%08x", *length);

	return 0;
   3e3c6:	2000      	movs	r0, #0
}
   3e3c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (bytes > MQTT_MAX_LENGTH_BYTES) {
   3e3ca:	3307      	adds	r3, #7
   3e3cc:	2b23      	cmp	r3, #35	; 0x23
   3e3ce:	d1e9      	bne.n	3e3a4 <packet_length_decode+0x8>
			return -EINVAL;
   3e3d0:	f06f 0015 	mvn.w	r0, #21
   3e3d4:	e7f8      	b.n	3e3c8 <packet_length_decode+0x2c>
			return -EAGAIN;
   3e3d6:	f06f 000a 	mvn.w	r0, #10
   3e3da:	e7f5      	b.n	3e3c8 <packet_length_decode+0x2c>

0003e3dc <fixed_header_decode>:

int fixed_header_decode(struct buf_ctx *buf, u8_t *type_and_flags,
			u32_t *length)
{
   3e3dc:	b430      	push	{r4, r5}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3e3de:	e9d0 3500 	ldrd	r3, r5, [r0]
   3e3e2:	429d      	cmp	r5, r3
   3e3e4:	d007      	beq.n	3e3f6 <fixed_header_decode+0x1a>
	*val = *(buf->cur++);
   3e3e6:	1c5d      	adds	r5, r3, #1
   3e3e8:	6005      	str	r5, [r0, #0]
   3e3ea:	781b      	ldrb	r3, [r3, #0]
   3e3ec:	700b      	strb	r3, [r1, #0]
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   3e3ee:	bc30      	pop	{r4, r5}
	return packet_length_decode(buf, length);
   3e3f0:	4611      	mov	r1, r2
   3e3f2:	f7ff bfd3 	b.w	3e39c <packet_length_decode>
}
   3e3f6:	f06f 0015 	mvn.w	r0, #21
   3e3fa:	bc30      	pop	{r4, r5}
   3e3fc:	4770      	bx	lr

0003e3fe <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   3e3fe:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3e400:	e9d1 3500 	ldrd	r3, r5, [r1]
   3e404:	429d      	cmp	r5, r3
   3e406:	d102      	bne.n	3e40e <connect_ack_decode+0x10>
		return -EINVAL;
   3e408:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   3e40c:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   3e40e:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3e410:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   3e412:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3e414:	d0f8      	beq.n	3e408 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   3e416:	461d      	mov	r5, r3
   3e418:	f815 4b02 	ldrb.w	r4, [r5], #2
   3e41c:	600d      	str	r5, [r1, #0]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3e41e:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
	*val = *(buf->cur++);
   3e422:	785b      	ldrb	r3, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3e424:	2904      	cmp	r1, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   3e426:	bf04      	itt	eq
   3e428:	f004 0401 	andeq.w	r4, r4, #1
		param->session_present_flag =
   3e42c:	7014      	strbeq	r4, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   3e42e:	7053      	strb	r3, [r2, #1]
	return 0;
   3e430:	2000      	movs	r0, #0
   3e432:	e7eb      	b.n	3e40c <connect_ack_decode+0xe>

0003e434 <publish_decode>:

int publish_decode(u8_t flags, u32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   3e434:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3e438:	461c      	mov	r4, r3
	int err_code;
	u32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   3e43a:	7d9b      	ldrb	r3, [r3, #22]
{
   3e43c:	4688      	mov	r8, r1
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   3e43e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   3e442:	f360 0341 	bfi	r3, r0, #1, #1
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   3e446:	f3c0 0041 	ubfx	r0, r0, #1, #2
   3e44a:	7220      	strb	r0, [r4, #8]
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   3e44c:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   3e44e:	f10d 0106 	add.w	r1, sp, #6
   3e452:	4610      	mov	r0, r2
{
   3e454:	4616      	mov	r6, r2
	err_code = unpack_uint16(buf, &utf8_strlen);
   3e456:	f7ff ff8b 	bl	3e370 <unpack_uint16>
	if (err_code != 0) {
   3e45a:	4607      	mov	r7, r0
   3e45c:	b940      	cbnz	r0, 3e470 <publish_decode+0x3c>
	if ((buf->end - buf->cur) < utf8_strlen) {
   3e45e:	6833      	ldr	r3, [r6, #0]
   3e460:	6872      	ldr	r2, [r6, #4]
   3e462:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   3e466:	1ad2      	subs	r2, r2, r3
   3e468:	42aa      	cmp	r2, r5
   3e46a:	da05      	bge.n	3e478 <publish_decode+0x44>
		return -EINVAL;
   3e46c:	f06f 0715 	mvn.w	r7, #21

	param->message.payload.data = NULL;
	param->message.payload.len = var_length - var_header_length;

	return 0;
}
   3e470:	4638      	mov	r0, r7
   3e472:	b002      	add	sp, #8
   3e474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	str->size = utf8_strlen;
   3e478:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   3e47a:	b15d      	cbz	r5, 3e494 <publish_decode+0x60>
		str->utf8 = buf->cur;
   3e47c:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   3e47e:	442b      	add	r3, r5
   3e480:	6033      	str	r3, [r6, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3e482:	7a23      	ldrb	r3, [r4, #8]
   3e484:	b943      	cbnz	r3, 3e498 <publish_decode+0x64>
	var_header_length = param->message.topic.topic.size + sizeof(u16_t);
   3e486:	3502      	adds	r5, #2
	param->message.payload.data = NULL;
   3e488:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   3e48a:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   3e48e:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   3e490:	6125      	str	r5, [r4, #16]
	return 0;
   3e492:	e7ed      	b.n	3e470 <publish_decode+0x3c>
		str->utf8 = NULL;
   3e494:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   3e496:	e7f4      	b.n	3e482 <publish_decode+0x4e>
		err_code = unpack_uint16(buf, &param->message_id);
   3e498:	f104 0114 	add.w	r1, r4, #20
   3e49c:	4630      	mov	r0, r6
   3e49e:	f7ff ff67 	bl	3e370 <unpack_uint16>
		if (err_code != 0) {
   3e4a2:	b908      	cbnz	r0, 3e4a8 <publish_decode+0x74>
		var_header_length += sizeof(u16_t);
   3e4a4:	3504      	adds	r5, #4
   3e4a6:	e7ef      	b.n	3e488 <publish_decode+0x54>
   3e4a8:	4607      	mov	r7, r0
   3e4aa:	e7e1      	b.n	3e470 <publish_decode+0x3c>

0003e4ac <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3e4ac:	f7ff bf60 	b.w	3e370 <unpack_uint16>

0003e4b0 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3e4b0:	f7ff bf5e 	b.w	3e370 <unpack_uint16>

0003e4b4 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3e4b4:	f7ff bf5c 	b.w	3e370 <unpack_uint16>

0003e4b8 <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3e4b8:	f7ff bf5a 	b.w	3e370 <unpack_uint16>

0003e4bc <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   3e4bc:	b538      	push	{r3, r4, r5, lr}
   3e4be:	4605      	mov	r5, r0
   3e4c0:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   3e4c2:	f7ff ff55 	bl	3e370 <unpack_uint16>
	if (err_code != 0) {
   3e4c6:	b930      	cbnz	r0, 3e4d6 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   3e4c8:	e9d5 2300 	ldrd	r2, r3, [r5]
   3e4cc:	1a99      	subs	r1, r3, r2
	str->len = length;
   3e4ce:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   3e4d0:	b111      	cbz	r1, 3e4d8 <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   3e4d2:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   3e4d4:	602b      	str	r3, [r5, #0]
}
   3e4d6:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   3e4d8:	6060      	str	r0, [r4, #4]
   3e4da:	e7fc      	b.n	3e4d6 <subscribe_ack_decode+0x1a>

0003e4dc <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3e4dc:	f7ff bf48 	b.w	3e370 <unpack_uint16>

0003e4e0 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   3e4e0:	e9d1 3200 	ldrd	r3, r2, [r1]
   3e4e4:	1ad2      	subs	r2, r2, r3
   3e4e6:	2a01      	cmp	r2, #1
   3e4e8:	d909      	bls.n	3e4fe <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   3e4ea:	1c5a      	adds	r2, r3, #1
   3e4ec:	600a      	str	r2, [r1, #0]
   3e4ee:	0a02      	lsrs	r2, r0, #8
   3e4f0:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   3e4f2:	680b      	ldr	r3, [r1, #0]
   3e4f4:	1c5a      	adds	r2, r3, #1
   3e4f6:	600a      	str	r2, [r1, #0]
   3e4f8:	7018      	strb	r0, [r3, #0]
	return 0;
   3e4fa:	2000      	movs	r0, #0
   3e4fc:	4770      	bx	lr
		return -ENOMEM;
   3e4fe:	f06f 000b 	mvn.w	r0, #11
}
   3e502:	4770      	bx	lr

0003e504 <pack_utf8_str>:
{
   3e504:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3e506:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   3e50a:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3e50c:	6840      	ldr	r0, [r0, #4]
   3e50e:	1a9b      	subs	r3, r3, r2
   3e510:	1c82      	adds	r2, r0, #2
   3e512:	4293      	cmp	r3, r2
{
   3e514:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3e516:	d30d      	bcc.n	3e534 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   3e518:	b280      	uxth	r0, r0
   3e51a:	f7ff ffe1 	bl	3e4e0 <pack_uint16>
   3e51e:	e9d5 1200 	ldrd	r1, r2, [r5]
   3e522:	6820      	ldr	r0, [r4, #0]
   3e524:	f002 f87a 	bl	4061c <memcpy>
	return 0;
   3e528:	2000      	movs	r0, #0
	buf->cur += str->size;
   3e52a:	6823      	ldr	r3, [r4, #0]
   3e52c:	686a      	ldr	r2, [r5, #4]
   3e52e:	4413      	add	r3, r2
   3e530:	6023      	str	r3, [r4, #0]
}
   3e532:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   3e534:	f06f 000b 	mvn.w	r0, #11
   3e538:	e7fb      	b.n	3e532 <pack_utf8_str+0x2e>

0003e53a <mqtt_encode_fixed_header>:
{
   3e53a:	b570      	push	{r4, r5, r6, lr}
	u32_t length = buf->cur - start;
   3e53c:	6815      	ldr	r5, [r2, #0]
   3e53e:	1a6d      	subs	r5, r5, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   3e540:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
   3e544:	d227      	bcs.n	3e596 <mqtt_encode_fixed_header+0x5c>
   3e546:	462c      	mov	r4, r5
   3e548:	2600      	movs	r6, #0
	} while (length > 0);
   3e54a:	09e4      	lsrs	r4, r4, #7
   3e54c:	b2f3      	uxtb	r3, r6
		if (buf != NULL) {
   3e54e:	f106 0601 	add.w	r6, r6, #1
	} while (length > 0);
   3e552:	d1fa      	bne.n	3e54a <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(u8_t);
   3e554:	3302      	adds	r3, #2
	buf->cur = start - fixed_header_length;
   3e556:	b2db      	uxtb	r3, r3
   3e558:	425b      	negs	r3, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3e55a:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   3e55c:	18cc      	adds	r4, r1, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3e55e:	42b4      	cmp	r4, r6
	buf->cur = start - fixed_header_length;
   3e560:	6014      	str	r4, [r2, #0]
	*(buf->cur++) = val;
   3e562:	bf1e      	ittt	ne
   3e564:	3401      	addne	r4, #1
   3e566:	6014      	strne	r4, [r2, #0]
   3e568:	54c8      	strbne	r0, [r1, r3]
	return 0;
   3e56a:	4628      	mov	r0, r5
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   3e56c:	6811      	ldr	r1, [r2, #0]
   3e56e:	f000 047f 	and.w	r4, r0, #127	; 0x7f
   3e572:	700c      	strb	r4, [r1, #0]
			if (length > 0) {
   3e574:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   3e576:	bf1f      	itttt	ne
   3e578:	6814      	ldrne	r4, [r2, #0]
   3e57a:	7821      	ldrbne	r1, [r4, #0]
   3e57c:	f061 017f 	ornne	r1, r1, #127	; 0x7f
   3e580:	7021      	strbne	r1, [r4, #0]
			buf->cur++;
   3e582:	6811      	ldr	r1, [r2, #0]
   3e584:	3101      	adds	r1, #1
   3e586:	6011      	str	r1, [r2, #0]
	} while (length > 0);
   3e588:	2800      	cmp	r0, #0
   3e58a:	d1ef      	bne.n	3e56c <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   3e58c:	440b      	add	r3, r1
	buf->end = buf->cur + length + fixed_header_length;
   3e58e:	4429      	add	r1, r5
	buf->cur = buf->cur - fixed_header_length;
   3e590:	6013      	str	r3, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   3e592:	6051      	str	r1, [r2, #4]
}
   3e594:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   3e596:	f06f 0079 	mvn.w	r0, #121	; 0x79
   3e59a:	e7fb      	b.n	3e594 <mqtt_encode_fixed_header+0x5a>

0003e59c <mqtt_message_id_only_enc>:
{
   3e59c:	b570      	push	{r4, r5, r6, lr}
   3e59e:	4606      	mov	r6, r0
   3e5a0:	4615      	mov	r5, r2
	if (message_id == 0U) {
   3e5a2:	4608      	mov	r0, r1
   3e5a4:	b169      	cbz	r1, 3e5c2 <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e5a6:	6814      	ldr	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   3e5a8:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e5aa:	3405      	adds	r4, #5
   3e5ac:	6014      	str	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   3e5ae:	f7ff ff97 	bl	3e4e0 <pack_uint16>
	if (err_code != 0) {
   3e5b2:	b940      	cbnz	r0, 3e5c6 <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3e5b4:	462a      	mov	r2, r5
   3e5b6:	4621      	mov	r1, r4
   3e5b8:	4630      	mov	r0, r6
}
   3e5ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3e5be:	f7ff bfbc 	b.w	3e53a <mqtt_encode_fixed_header>
		return -EINVAL;
   3e5c2:	f06f 0015 	mvn.w	r0, #21
}
   3e5c6:	bd70      	pop	{r4, r5, r6, pc}

0003e5c8 <publish_encode>:
{
   3e5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e5cc:	4607      	mov	r7, r0
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3e5ce:	7d80      	ldrb	r0, [r0, #22]
   3e5d0:	7a3c      	ldrb	r4, [r7, #8]
{
   3e5d2:	460d      	mov	r5, r1
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3e5d4:	f000 0801 	and.w	r8, r0, #1
   3e5d8:	f3c0 0940 	ubfx	r9, r0, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   3e5dc:	b10c      	cbz	r4, 3e5e2 <publish_encode+0x1a>
   3e5de:	8abb      	ldrh	r3, [r7, #20]
   3e5e0:	b35b      	cbz	r3, 3e63a <publish_encode+0x72>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e5e2:	682e      	ldr	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3e5e4:	4629      	mov	r1, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e5e6:	3605      	adds	r6, #5
   3e5e8:	602e      	str	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3e5ea:	4638      	mov	r0, r7
   3e5ec:	f7ff ff8a 	bl	3e504 <pack_utf8_str>
	if (err_code != 0) {
   3e5f0:	b9a8      	cbnz	r0, 3e61e <publish_encode+0x56>
	if (param->message.topic.qos) {
   3e5f2:	7a3b      	ldrb	r3, [r7, #8]
   3e5f4:	b9ab      	cbnz	r3, 3e622 <publish_encode+0x5a>
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3e5f6:	0060      	lsls	r0, r4, #1
   3e5f8:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   3e5fc:	693a      	ldr	r2, [r7, #16]
   3e5fe:	682b      	ldr	r3, [r5, #0]
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3e600:	ea40 0009 	orr.w	r0, r0, r9
   3e604:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   3e608:	4413      	add	r3, r2
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3e60a:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	buf->cur += param->message.payload.len;
   3e60e:	602b      	str	r3, [r5, #0]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   3e610:	462a      	mov	r2, r5
   3e612:	4631      	mov	r1, r6
   3e614:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3e618:	f7ff ff8f 	bl	3e53a <mqtt_encode_fixed_header>
	if (err_code != 0) {
   3e61c:	b140      	cbz	r0, 3e630 <publish_encode+0x68>
}
   3e61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   3e622:	4629      	mov	r1, r5
   3e624:	8ab8      	ldrh	r0, [r7, #20]
   3e626:	f7ff ff5b 	bl	3e4e0 <pack_uint16>
		if (err_code != 0) {
   3e62a:	2800      	cmp	r0, #0
   3e62c:	d0e3      	beq.n	3e5f6 <publish_encode+0x2e>
   3e62e:	e7f6      	b.n	3e61e <publish_encode+0x56>
	buf->end -= param->message.payload.len;
   3e630:	686b      	ldr	r3, [r5, #4]
   3e632:	693a      	ldr	r2, [r7, #16]
   3e634:	1a9b      	subs	r3, r3, r2
   3e636:	606b      	str	r3, [r5, #4]
	return 0;
   3e638:	e7f1      	b.n	3e61e <publish_encode+0x56>
		return -EINVAL;
   3e63a:	f06f 0015 	mvn.w	r0, #21
   3e63e:	e7ee      	b.n	3e61e <publish_encode+0x56>

0003e640 <publish_ack_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   3e640:	460a      	mov	r2, r1
   3e642:	8801      	ldrh	r1, [r0, #0]
   3e644:	2040      	movs	r0, #64	; 0x40
   3e646:	f7ff bfa9 	b.w	3e59c <mqtt_message_id_only_enc>

0003e64a <subscribe_encode>:
{
   3e64a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e64e:	4607      	mov	r7, r0
	if (param->message_id == 0U) {
   3e650:	88c0      	ldrh	r0, [r0, #6]
{
   3e652:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   3e654:	b330      	cbz	r0, 3e6a4 <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e656:	680e      	ldr	r6, [r1, #0]
   3e658:	3605      	adds	r6, #5
   3e65a:	600e      	str	r6, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   3e65c:	f7ff ff40 	bl	3e4e0 <pack_uint16>
	if (err_code != 0) {
   3e660:	4604      	mov	r4, r0
   3e662:	bb08      	cbnz	r0, 3e6a8 <subscribe_encode+0x5e>
   3e664:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < param->list_count; i++) {
   3e668:	88bb      	ldrh	r3, [r7, #4]
   3e66a:	42a3      	cmp	r3, r4
   3e66c:	dc06      	bgt.n	3e67c <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3e66e:	462a      	mov	r2, r5
   3e670:	4631      	mov	r1, r6
}
   3e672:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3e676:	2082      	movs	r0, #130	; 0x82
   3e678:	f7ff bf5f 	b.w	3e53a <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3e67c:	fb09 f804 	mul.w	r8, r9, r4
   3e680:	6838      	ldr	r0, [r7, #0]
   3e682:	4629      	mov	r1, r5
   3e684:	4440      	add	r0, r8
   3e686:	f7ff ff3d 	bl	3e504 <pack_utf8_str>
		if (err_code != 0) {
   3e68a:	b980      	cbnz	r0, 3e6ae <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   3e68c:	683b      	ldr	r3, [r7, #0]
   3e68e:	4443      	add	r3, r8
   3e690:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3e692:	e9d5 3100 	ldrd	r3, r1, [r5]
   3e696:	4299      	cmp	r1, r3
   3e698:	d00b      	beq.n	3e6b2 <subscribe_encode+0x68>
	*(buf->cur++) = val;
   3e69a:	1c59      	adds	r1, r3, #1
   3e69c:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   3e69e:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   3e6a0:	701a      	strb	r2, [r3, #0]
		if (err_code != 0) {
   3e6a2:	e7e1      	b.n	3e668 <subscribe_encode+0x1e>
		return -EINVAL;
   3e6a4:	f06f 0415 	mvn.w	r4, #21
}
   3e6a8:	4620      	mov	r0, r4
   3e6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3e6ae:	4604      	mov	r4, r0
   3e6b0:	e7fa      	b.n	3e6a8 <subscribe_encode+0x5e>
		return -ENOMEM;
   3e6b2:	f06f 040b 	mvn.w	r4, #11
   3e6b6:	e7f7      	b.n	3e6a8 <subscribe_encode+0x5e>

0003e6b8 <unsubscribe_encode>:
{
   3e6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e6bc:	680d      	ldr	r5, [r1, #0]
{
   3e6be:	4607      	mov	r7, r0
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e6c0:	3505      	adds	r5, #5
   3e6c2:	600d      	str	r5, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   3e6c4:	88c0      	ldrh	r0, [r0, #6]
{
   3e6c6:	460e      	mov	r6, r1
	err_code = pack_uint16(param->message_id, buf);
   3e6c8:	f7ff ff0a 	bl	3e4e0 <pack_uint16>
	if (err_code != 0) {
   3e6cc:	4604      	mov	r4, r0
   3e6ce:	b9a8      	cbnz	r0, 3e6fc <unsubscribe_encode+0x44>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3e6d0:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   3e6d4:	88bb      	ldrh	r3, [r7, #4]
   3e6d6:	42a3      	cmp	r3, r4
   3e6d8:	dc06      	bgt.n	3e6e8 <unsubscribe_encode+0x30>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3e6da:	4632      	mov	r2, r6
   3e6dc:	4629      	mov	r1, r5
}
   3e6de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3e6e2:	20a2      	movs	r0, #162	; 0xa2
   3e6e4:	f7ff bf29 	b.w	3e53a <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3e6e8:	6838      	ldr	r0, [r7, #0]
   3e6ea:	4631      	mov	r1, r6
   3e6ec:	fb08 0004 	mla	r0, r8, r4, r0
   3e6f0:	f7ff ff08 	bl	3e504 <pack_utf8_str>
		if (err_code != 0) {
   3e6f4:	b908      	cbnz	r0, 3e6fa <unsubscribe_encode+0x42>
	for (i = 0; i < param->list_count; i++) {
   3e6f6:	3401      	adds	r4, #1
   3e6f8:	e7ec      	b.n	3e6d4 <unsubscribe_encode+0x1c>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3e6fa:	4604      	mov	r4, r0
}
   3e6fc:	4620      	mov	r0, r4
   3e6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003e702 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, u32_t length)
{
   3e702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e704:	460d      	mov	r5, r1
	int len;

	/* Calculate how much data we need to read from the transport,
	 * given the already buffered data.
	 */
	remaining = length - (buf->end - buf->cur);
   3e706:	e9d1 4100 	ldrd	r4, r1, [r1]
   3e70a:	1b0c      	subs	r4, r1, r4
   3e70c:	1b14      	subs	r4, r2, r4
	if (remaining <= 0) {
   3e70e:	2c00      	cmp	r4, #0
{
   3e710:	4606      	mov	r6, r0
	if (remaining <= 0) {
   3e712:	dd14      	ble.n	3e73e <mqtt_read_message_chunk+0x3c>
		return 0;
	}

	/* Check if read does not exceed the buffer. */
	if (buf->end + remaining > client->rx_buf + client->rx_buf_size) {
   3e714:	e9d0 3719 	ldrd	r3, r7, [r0, #100]	; 0x64
   3e718:	190a      	adds	r2, r1, r4
   3e71a:	443b      	add	r3, r7
   3e71c:	429a      	cmp	r2, r3
   3e71e:	d810      	bhi.n	3e742 <mqtt_read_message_chunk+0x40>
		MQTT_ERR("[CID %p]: Buffer too small to receive the message",
			 client);
		return -ENOMEM;
	}

	len = mqtt_transport_read(client, buf->end, remaining, false);
   3e720:	2300      	movs	r3, #0
   3e722:	4622      	mov	r2, r4
   3e724:	f7e7 f858 	bl	257d8 <mqtt_transport_read>
	if (len < 0) {
   3e728:	2800      	cmp	r0, #0
   3e72a:	db09      	blt.n	3e740 <mqtt_read_message_chunk+0x3e>
		MQTT_TRC("[CID %p]: Transport read error: %d", client, len);
		return len;
	}

	if (len == 0) {
   3e72c:	d00c      	beq.n	3e748 <mqtt_read_message_chunk+0x46>
		MQTT_TRC("[CID %p]: Connection closed.", client);
		return -ENOTCONN;
	}

	client->internal.rx_buf_datalen += len;
   3e72e:	69f3      	ldr	r3, [r6, #28]
	buf->end += len;

	if (len < remaining) {
   3e730:	4284      	cmp	r4, r0
	client->internal.rx_buf_datalen += len;
   3e732:	4403      	add	r3, r0
   3e734:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   3e736:	686b      	ldr	r3, [r5, #4]
   3e738:	4403      	add	r3, r0
   3e73a:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   3e73c:	dc07      	bgt.n	3e74e <mqtt_read_message_chunk+0x4c>
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
   3e73e:	2000      	movs	r0, #0
}
   3e740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOMEM;
   3e742:	f06f 000b 	mvn.w	r0, #11
   3e746:	e7fb      	b.n	3e740 <mqtt_read_message_chunk+0x3e>
		return -ENOTCONN;
   3e748:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   3e74c:	e7f8      	b.n	3e740 <mqtt_read_message_chunk+0x3e>
		return -EAGAIN;
   3e74e:	f06f 000a 	mvn.w	r0, #10
   3e752:	e7f5      	b.n	3e740 <mqtt_read_message_chunk+0x3e>

0003e754 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   3e754:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	u8_t type_and_flags;
	u32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   3e756:	6e43      	ldr	r3, [r0, #100]	; 0x64
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3e758:	69c2      	ldr	r2, [r0, #28]
{
   3e75a:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   3e75c:	9302      	str	r3, [sp, #8]
{
   3e75e:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3e760:	4413      	add	r3, r2
	u8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   3e762:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3e764:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   3e766:	a902      	add	r1, sp, #8
   3e768:	4628      	mov	r0, r5
   3e76a:	f7ff ffca 	bl	3e702 <mqtt_read_message_chunk>
		if (err_code < 0) {
   3e76e:	1e04      	subs	r4, r0, #0
   3e770:	db2b      	blt.n	3e7ca <mqtt_handle_rx+0x76>
		buf->cur = client->rx_buf;
   3e772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3e774:	aa01      	add	r2, sp, #4
   3e776:	f10d 0103 	add.w	r1, sp, #3
   3e77a:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   3e77c:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3e77e:	f7ff fe2d 	bl	3e3dc <fixed_header_decode>
	} while (err_code == -EAGAIN);
   3e782:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3e786:	4604      	mov	r4, r0
		chunk_size = 1U;
   3e788:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   3e78c:	d0eb      	beq.n	3e766 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   3e78e:	2800      	cmp	r0, #0
   3e790:	db1f      	blt.n	3e7d2 <mqtt_handle_rx+0x7e>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   3e792:	f89d 6003 	ldrb.w	r6, [sp, #3]
   3e796:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   3e79a:	2b30      	cmp	r3, #48	; 0x30
   3e79c:	d11c      	bne.n	3e7d8 <mqtt_handle_rx+0x84>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(u16_t));
   3e79e:	2202      	movs	r2, #2
   3e7a0:	a902      	add	r1, sp, #8
   3e7a2:	4628      	mov	r0, r5
   3e7a4:	f7ff ffad 	bl	3e702 <mqtt_read_message_chunk>
	if (err_code < 0) {
   3e7a8:	1e04      	subs	r4, r0, #0
   3e7aa:	db0e      	blt.n	3e7ca <mqtt_handle_rx+0x76>
	variable_header_length = *buf->cur << 8; /* MSB */
   3e7ac:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3e7ae:	f016 0f06 	tst.w	r6, #6
   3e7b2:	881a      	ldrh	r2, [r3, #0]
   3e7b4:	ba52      	rev16	r2, r2
   3e7b6:	b292      	uxth	r2, r2
	variable_header_length += sizeof(u16_t);
   3e7b8:	bf0c      	ite	eq
   3e7ba:	3202      	addeq	r2, #2
		variable_header_length += sizeof(u16_t);
   3e7bc:	3204      	addne	r2, #4
		err_code = mqtt_read_publish_var_header(client, type_and_flags,
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   3e7be:	a902      	add	r1, sp, #8
   3e7c0:	4628      	mov	r0, r5
   3e7c2:	f7ff ff9e 	bl	3e702 <mqtt_read_message_chunk>
	}

	if (err_code < 0) {
   3e7c6:	1e04      	subs	r4, r0, #0
   3e7c8:	da08      	bge.n	3e7dc <mqtt_handle_rx+0x88>
		return (err_code == -EAGAIN) ? 0 : err_code;
   3e7ca:	f114 0f0b 	cmn.w	r4, #11
   3e7ce:	d100      	bne.n	3e7d2 <mqtt_handle_rx+0x7e>
   3e7d0:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   3e7d2:	4620      	mov	r0, r4
   3e7d4:	b00c      	add	sp, #48	; 0x30
   3e7d6:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   3e7d8:	9a01      	ldr	r2, [sp, #4]
   3e7da:	e7f0      	b.n	3e7be <mqtt_handle_rx+0x6a>
	evt.result = 0;
   3e7dc:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   3e7de:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3e7e2:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   3e7e4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   3e7e8:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   3e7ea:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   3e7ec:	d05e      	beq.n	3e8ac <mqtt_handle_rx+0x158>
   3e7ee:	d813      	bhi.n	3e818 <mqtt_handle_rx+0xc4>
   3e7f0:	2b30      	cmp	r3, #48	; 0x30
   3e7f2:	d045      	beq.n	3e880 <mqtt_handle_rx+0x12c>
   3e7f4:	d804      	bhi.n	3e800 <mqtt_handle_rx+0xac>
   3e7f6:	2b20      	cmp	r3, #32
   3e7f8:	d02a      	beq.n	3e850 <mqtt_handle_rx+0xfc>
	client->internal.rx_buf_datalen = 0U;
   3e7fa:	2400      	movs	r4, #0
   3e7fc:	61ec      	str	r4, [r5, #28]
	return 0;
   3e7fe:	e7e8      	b.n	3e7d2 <mqtt_handle_rx+0x7e>
	switch (type_and_flags & 0xF0) {
   3e800:	2b40      	cmp	r3, #64	; 0x40
   3e802:	d049      	beq.n	3e898 <mqtt_handle_rx+0x144>
   3e804:	2b50      	cmp	r3, #80	; 0x50
   3e806:	d1f8      	bne.n	3e7fa <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_PUBREC;
   3e808:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   3e80a:	a905      	add	r1, sp, #20
   3e80c:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   3e80e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   3e812:	f7ff fe4d 	bl	3e4b0 <publish_receive_decode>
   3e816:	e046      	b.n	3e8a6 <mqtt_handle_rx+0x152>
	switch (type_and_flags & 0xF0) {
   3e818:	2b90      	cmp	r3, #144	; 0x90
   3e81a:	d04f      	beq.n	3e8bc <mqtt_handle_rx+0x168>
   3e81c:	d809      	bhi.n	3e832 <mqtt_handle_rx+0xde>
   3e81e:	2b70      	cmp	r3, #112	; 0x70
   3e820:	d1eb      	bne.n	3e7fa <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_PUBCOMP;
   3e822:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3e824:	a905      	add	r1, sp, #20
   3e826:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   3e828:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3e82c:	f7ff fe44 	bl	3e4b8 <publish_complete_decode>
   3e830:	e039      	b.n	3e8a6 <mqtt_handle_rx+0x152>
	switch (type_and_flags & 0xF0) {
   3e832:	2bb0      	cmp	r3, #176	; 0xb0
   3e834:	d04a      	beq.n	3e8cc <mqtt_handle_rx+0x178>
   3e836:	2bd0      	cmp	r3, #208	; 0xd0
   3e838:	d1df      	bne.n	3e7fa <mqtt_handle_rx+0xa6>
		if (client->unacked_ping <= 0) {
   3e83a:	f995 3077 	ldrsb.w	r3, [r5, #119]	; 0x77
   3e83e:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   3e840:	bfca      	itet	gt
   3e842:	f103 33ff 	addgt.w	r3, r3, #4294967295
			client->unacked_ping = 0;
   3e846:	f885 2077 	strble.w	r2, [r5, #119]	; 0x77
			client->unacked_ping--;
   3e84a:	f885 3077 	strbgt.w	r3, [r5, #119]	; 0x77
	if (err_code < 0) {
   3e84e:	e7d4      	b.n	3e7fa <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_CONNACK;
   3e850:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   3e854:	a902      	add	r1, sp, #8
   3e856:	aa05      	add	r2, sp, #20
   3e858:	4628      	mov	r0, r5
   3e85a:	f7ff fdd0 	bl	3e3fe <connect_ack_decode>
		if (err_code == 0) {
   3e85e:	4604      	mov	r4, r0
   3e860:	bb10      	cbnz	r0, 3e8a8 <mqtt_handle_rx+0x154>
			if (evt.param.connack.return_code ==
   3e862:	f89d 2015 	ldrb.w	r2, [sp, #21]
   3e866:	b91a      	cbnz	r2, 3e870 <mqtt_handle_rx+0x11c>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   3e868:	69ab      	ldr	r3, [r5, #24]
   3e86a:	f043 0304 	orr.w	r3, r3, #4
   3e86e:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   3e870:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   3e872:	a904      	add	r1, sp, #16
   3e874:	4628      	mov	r0, r5
   3e876:	f000 f84d 	bl	3e914 <event_notify>
	if (err_code < 0) {
   3e87a:	2c00      	cmp	r4, #0
   3e87c:	dabd      	bge.n	3e7fa <mqtt_handle_rx+0xa6>
   3e87e:	e7a8      	b.n	3e7d2 <mqtt_handle_rx+0x7e>
		evt.type = MQTT_EVT_PUBLISH;
   3e880:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   3e882:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   3e884:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   3e888:	ab05      	add	r3, sp, #20
   3e88a:	f7ff fdd3 	bl	3e434 <publish_decode>
		client->internal.remaining_payload =
   3e88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   3e890:	4604      	mov	r4, r0
		evt.result = err_code;
   3e892:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   3e894:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   3e896:	e7ec      	b.n	3e872 <mqtt_handle_rx+0x11e>
		evt.type = MQTT_EVT_PUBACK;
   3e898:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3e89a:	a905      	add	r1, sp, #20
   3e89c:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   3e89e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3e8a2:	f7ff fe03 	bl	3e4ac <publish_ack_decode>
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3e8a6:	4604      	mov	r4, r0
		evt.result = err_code;
   3e8a8:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   3e8aa:	e7e2      	b.n	3e872 <mqtt_handle_rx+0x11e>
		evt.type = MQTT_EVT_PUBREL;
   3e8ac:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3e8ae:	a905      	add	r1, sp, #20
   3e8b0:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   3e8b2:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3e8b6:	f7ff fdfd 	bl	3e4b4 <publish_release_decode>
   3e8ba:	e7f4      	b.n	3e8a6 <mqtt_handle_rx+0x152>
		evt.type = MQTT_EVT_SUBACK;
   3e8bc:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3e8be:	a905      	add	r1, sp, #20
   3e8c0:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   3e8c2:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3e8c6:	f7ff fdf9 	bl	3e4bc <subscribe_ack_decode>
   3e8ca:	e7ec      	b.n	3e8a6 <mqtt_handle_rx+0x152>
		evt.type = MQTT_EVT_UNSUBACK;
   3e8cc:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3e8ce:	a905      	add	r1, sp, #20
   3e8d0:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   3e8d4:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3e8d8:	f7ff fe00 	bl	3e4dc <unsubscribe_ack_decode>
   3e8dc:	e7e3      	b.n	3e8a6 <mqtt_handle_rx+0x152>

0003e8de <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   3e8de:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   3e8e0:	6a80      	ldr	r0, [r0, #40]	; 0x28
   3e8e2:	f7e6 fe45 	bl	25570 <close>
	if (ret < 0) {
   3e8e6:	2800      	cmp	r0, #0
   3e8e8:	da04      	bge.n	3e8f4 <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   3e8ea:	f7ff fd26 	bl	3e33a <__errno>
   3e8ee:	6800      	ldr	r0, [r0, #0]
   3e8f0:	4240      	negs	r0, r0
	}

	return 0;
}
   3e8f2:	bd08      	pop	{r3, pc}
	return 0;
   3e8f4:	2000      	movs	r0, #0
   3e8f6:	e7fc      	b.n	3e8f2 <mqtt_client_tcp_disconnect+0x14>

0003e8f8 <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   3e8f8:	b538      	push	{r3, r4, r5, lr}
   3e8fa:	4604      	mov	r4, r0
   3e8fc:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   3e8fe:	6f02      	ldr	r2, [r0, #112]	; 0x70
   3e900:	2100      	movs	r1, #0
   3e902:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   3e904:	f001 feaa 	bl	4065c <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   3e908:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	buf->end = client->tx_buf + client->tx_buf_size;
   3e90a:	6f22      	ldr	r2, [r4, #112]	; 0x70
	buf->cur = client->tx_buf;
   3e90c:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   3e90e:	4413      	add	r3, r2
   3e910:	606b      	str	r3, [r5, #4]
}
   3e912:	bd38      	pop	{r3, r4, r5, pc}

0003e914 <event_notify>:
	/* Reset internal state. */
	client_reset(client);
}

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   3e914:	b538      	push	{r3, r4, r5, lr}
	if (client->evt_cb != NULL) {
   3e916:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
   3e918:	4604      	mov	r4, r0
   3e91a:	460d      	mov	r5, r1
	if (client->evt_cb != NULL) {
   3e91c:	b153      	cbz	r3, 3e934 <event_notify+0x20>
		mqtt_mutex_unlock(client);
   3e91e:	f7e6 ff71 	bl	25804 <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   3e922:	4620      	mov	r0, r4
   3e924:	6e23      	ldr	r3, [r4, #96]	; 0x60
   3e926:	4629      	mov	r1, r5
   3e928:	4798      	blx	r3

		mqtt_mutex_lock(client);
   3e92a:	4620      	mov	r0, r4
	}
}
   3e92c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mqtt_mutex_lock(client);
   3e930:	f7e6 bf94 	b.w	2585c <mqtt_mutex_lock>
}
   3e934:	bd38      	pop	{r3, r4, r5, pc}

0003e936 <client_disconnect>:

static void client_disconnect(struct mqtt_client *client, int result)
{
   3e936:	b530      	push	{r4, r5, lr}
   3e938:	4604      	mov	r4, r0
   3e93a:	b089      	sub	sp, #36	; 0x24
   3e93c:	460d      	mov	r5, r1
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   3e93e:	f7e6 ff57 	bl	257f0 <mqtt_transport_disconnect>
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3e942:	69a3      	ldr	r3, [r4, #24]
	event_notify(client, &evt);
   3e944:	4669      	mov	r1, sp
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3e946:	f013 0304 	ands.w	r3, r3, #4
		evt.type = MQTT_EVT_DISCONNECT;
   3e94a:	bf12      	itee	ne
   3e94c:	2301      	movne	r3, #1
		evt.type = MQTT_EVT_CONNACK;
   3e94e:	f88d 3000 	strbeq.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   3e952:	f06f 036e 	mvneq.w	r3, #110	; 0x6e
	event_notify(client, &evt);
   3e956:	4620      	mov	r0, r4
		evt.type = MQTT_EVT_DISCONNECT;
   3e958:	bf16      	itet	ne
   3e95a:	f88d 3000 	strbne.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   3e95e:	9307      	streq	r3, [sp, #28]
		evt.result = result;
   3e960:	9507      	strne	r5, [sp, #28]
	event_notify(client, &evt);
   3e962:	f7ff ffd7 	bl	3e914 <event_notify>
	MQTT_STATE_INIT(client);
   3e966:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   3e968:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   3e96c:	e9c4 3307 	strd	r3, r3, [r4, #28]
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	disconnect_event_notify(client, result);
}
   3e970:	b009      	add	sp, #36	; 0x24
   3e972:	bd30      	pop	{r4, r5, pc}

0003e974 <client_write>:
	return err_code;
}

static int client_write(struct mqtt_client *client, const u8_t *data,
			u32_t datalen)
{
   3e974:	b538      	push	{r3, r4, r5, lr}
   3e976:	4605      	mov	r5, r0
	int err_code;

	MQTT_TRC("[%p]: Transport writing %d bytes.", client, datalen);

	err_code = mqtt_transport_write(client, data, datalen);
   3e978:	f7e6 ff22 	bl	257c0 <mqtt_transport_write>
	if (err_code < 0) {
   3e97c:	1e04      	subs	r4, r0, #0
   3e97e:	da05      	bge.n	3e98c <client_write+0x18>
		MQTT_TRC("TCP write failed, errno = %d, "
			 "closing connection", errno);
		client_disconnect(client, err_code);
   3e980:	4621      	mov	r1, r4
   3e982:	4628      	mov	r0, r5
   3e984:	f7ff ffd7 	bl	3e936 <client_disconnect>

	MQTT_TRC("[%p]: Transport write complete.", client);
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();

	return 0;
}
   3e988:	4620      	mov	r0, r4
   3e98a:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_uptime_get();
   3e98c:	f001 fdc0 	bl	40510 <z_impl_k_uptime_get>
	return 0;
   3e990:	2400      	movs	r4, #0
	return (u32_t)k_uptime_get();
   3e992:	6168      	str	r0, [r5, #20]
   3e994:	e7f8      	b.n	3e988 <client_write+0x14>

0003e996 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   3e996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3e99a:	460f      	mov	r7, r1
   3e99c:	4690      	mov	r8, r2
   3e99e:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   3e9a0:	4605      	mov	r5, r0
   3e9a2:	b320      	cbz	r0, 3e9ee <read_publish_payload+0x58>

	mqtt_mutex_lock(client);
   3e9a4:	f7e6 ff5a 	bl	2585c <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   3e9a8:	6a2c      	ldr	r4, [r5, #32]
   3e9aa:	b1b4      	cbz	r4, 3e9da <read_publish_payload+0x44>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   3e9ac:	4544      	cmp	r4, r8
   3e9ae:	4622      	mov	r2, r4
   3e9b0:	4633      	mov	r3, r6
   3e9b2:	bf28      	it	cs
   3e9b4:	4642      	movcs	r2, r8
   3e9b6:	4639      	mov	r1, r7
   3e9b8:	4628      	mov	r0, r5
   3e9ba:	f7e6 ff0d 	bl	257d8 <mqtt_transport_read>
   3e9be:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   3e9c0:	b916      	cbnz	r6, 3e9c8 <read_publish_payload+0x32>
   3e9c2:	f110 0f0b 	cmn.w	r0, #11
   3e9c6:	d008      	beq.n	3e9da <read_publish_payload+0x44>
		goto exit;
	}

	if (ret <= 0) {
   3e9c8:	2c00      	cmp	r4, #0
   3e9ca:	dc0c      	bgt.n	3e9e6 <read_publish_payload+0x50>
		if (ret == 0) {
			ret = -ENOTCONN;
   3e9cc:	bf08      	it	eq
   3e9ce:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret);
   3e9d2:	4628      	mov	r0, r5
   3e9d4:	4621      	mov	r1, r4
   3e9d6:	f7ff ffae 	bl	3e936 <client_disconnect>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   3e9da:	4628      	mov	r0, r5
   3e9dc:	f7e6 ff12 	bl	25804 <mqtt_mutex_unlock>

	return ret;
}
   3e9e0:	4620      	mov	r0, r4
   3e9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	client->internal.remaining_payload -= ret;
   3e9e6:	6a2b      	ldr	r3, [r5, #32]
   3e9e8:	1b1b      	subs	r3, r3, r4
   3e9ea:	622b      	str	r3, [r5, #32]
   3e9ec:	e7f5      	b.n	3e9da <read_publish_payload+0x44>
	NULL_PARAM_CHECK(client);
   3e9ee:	f06f 0415 	mvn.w	r4, #21
   3e9f2:	e7f5      	b.n	3e9e0 <read_publish_payload+0x4a>

0003e9f4 <mqtt_client_init>:
{
   3e9f4:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   3e9f6:	4604      	mov	r4, r0
   3e9f8:	b1a8      	cbz	r0, 3ea26 <mqtt_client_init+0x32>
   3e9fa:	227c      	movs	r2, #124	; 0x7c
   3e9fc:	2100      	movs	r1, #0
   3e9fe:	f001 fe2d 	bl	4065c <memset>
	MQTT_STATE_INIT(client);
   3ea02:	2300      	movs	r3, #0
   3ea04:	61a3      	str	r3, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   3ea06:	4620      	mov	r0, r4
   3ea08:	f001 fc7f 	bl	4030a <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   3ea0c:	2304      	movs	r3, #4
   3ea0e:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	client->clean_session = 1U;
   3ea12:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   3ea16:	f043 0302 	orr.w	r3, r3, #2
   3ea1a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	client->keepalive = MQTT_KEEPALIVE;
   3ea1e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   3ea22:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
}
   3ea26:	bd10      	pop	{r4, pc}

0003ea28 <mqtt_connect>:
{
   3ea28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3ea2a:	4604      	mov	r4, r0
   3ea2c:	2800      	cmp	r0, #0
   3ea2e:	d03c      	beq.n	3eaaa <mqtt_connect+0x82>
	NULL_PARAM_CHECK(client->client_id.utf8);
   3ea30:	6c43      	ldr	r3, [r0, #68]	; 0x44
   3ea32:	2b00      	cmp	r3, #0
   3ea34:	d039      	beq.n	3eaaa <mqtt_connect+0x82>
	mqtt_mutex_lock(client);
   3ea36:	f7e6 ff11 	bl	2585c <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   3ea3a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   3ea3c:	b393      	cbz	r3, 3eaa4 <mqtt_connect+0x7c>
   3ea3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3ea40:	b383      	cbz	r3, 3eaa4 <mqtt_connect+0x7c>
	err_code = mqtt_transport_connect(client);
   3ea42:	4620      	mov	r0, r4
   3ea44:	f7e6 feb4 	bl	257b0 <mqtt_transport_connect>
	if (err_code < 0) {
   3ea48:	1e05      	subs	r5, r0, #0
   3ea4a:	db25      	blt.n	3ea98 <mqtt_connect+0x70>
	tx_buf_init(client, &packet);
   3ea4c:	4669      	mov	r1, sp
   3ea4e:	4620      	mov	r0, r4
   3ea50:	f7ff ff52 	bl	3e8f8 <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3ea54:	69a3      	ldr	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   3ea56:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3ea58:	f043 0302 	orr.w	r3, r3, #2
   3ea5c:	61a3      	str	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   3ea5e:	4620      	mov	r0, r4
   3ea60:	f7e6 fce2 	bl	25428 <connect_request_encode>
	if (err_code < 0) {
   3ea64:	1e05      	subs	r5, r0, #0
   3ea66:	db13      	blt.n	3ea90 <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   3ea68:	e9dd 1200 	ldrd	r1, r2, [sp]
   3ea6c:	4620      	mov	r0, r4
   3ea6e:	1a52      	subs	r2, r2, r1
   3ea70:	f7e6 fea6 	bl	257c0 <mqtt_transport_write>
	if (err_code < 0) {
   3ea74:	1e05      	subs	r5, r0, #0
   3ea76:	db0b      	blt.n	3ea90 <mqtt_connect+0x68>
	return z_impl_k_uptime_get();
   3ea78:	f001 fd4a 	bl	40510 <z_impl_k_uptime_get>
	client->unacked_ping = 0;
   3ea7c:	2500      	movs	r5, #0
   3ea7e:	6160      	str	r0, [r4, #20]
   3ea80:	f884 5077 	strb.w	r5, [r4, #119]	; 0x77
	mqtt_mutex_unlock(client);
   3ea84:	4620      	mov	r0, r4
   3ea86:	f7e6 febd 	bl	25804 <mqtt_mutex_unlock>
}
   3ea8a:	4628      	mov	r0, r5
   3ea8c:	b003      	add	sp, #12
   3ea8e:	bd30      	pop	{r4, r5, pc}
	client_disconnect(client, err_code);
   3ea90:	4629      	mov	r1, r5
   3ea92:	4620      	mov	r0, r4
   3ea94:	f7ff ff4f 	bl	3e936 <client_disconnect>
	MQTT_STATE_INIT(client);
   3ea98:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   3ea9a:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   3ea9e:	e9c4 3307 	strd	r3, r3, [r4, #28]
   3eaa2:	e7ef      	b.n	3ea84 <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   3eaa4:	f06f 050b 	mvn.w	r5, #11
   3eaa8:	e7f6      	b.n	3ea98 <mqtt_connect+0x70>
	NULL_PARAM_CHECK(client);
   3eaaa:	f06f 0515 	mvn.w	r5, #21
   3eaae:	e7ec      	b.n	3ea8a <mqtt_connect+0x62>

0003eab0 <mqtt_publish>:
{
   3eab0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3eab2:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3eab4:	4605      	mov	r5, r0
   3eab6:	b330      	cbz	r0, 3eb06 <mqtt_publish+0x56>
	NULL_PARAM_CHECK(param);
   3eab8:	b329      	cbz	r1, 3eb06 <mqtt_publish+0x56>
	mqtt_mutex_lock(client);
   3eaba:	f7e6 fecf 	bl	2585c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3eabe:	4669      	mov	r1, sp
   3eac0:	4628      	mov	r0, r5
   3eac2:	f7ff ff19 	bl	3e8f8 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3eac6:	69ab      	ldr	r3, [r5, #24]
   3eac8:	075b      	lsls	r3, r3, #29
   3eaca:	d519      	bpl.n	3eb00 <mqtt_publish+0x50>
	err_code = publish_encode(param, &packet);
   3eacc:	4669      	mov	r1, sp
   3eace:	4630      	mov	r0, r6
   3ead0:	f7ff fd7a 	bl	3e5c8 <publish_encode>
	if (err_code < 0) {
   3ead4:	1e04      	subs	r4, r0, #0
   3ead6:	db0d      	blt.n	3eaf4 <mqtt_publish+0x44>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3ead8:	e9dd 1200 	ldrd	r1, r2, [sp]
   3eadc:	4628      	mov	r0, r5
   3eade:	1a52      	subs	r2, r2, r1
   3eae0:	f7ff ff48 	bl	3e974 <client_write>
	if (err_code < 0) {
   3eae4:	1e04      	subs	r4, r0, #0
   3eae6:	db05      	blt.n	3eaf4 <mqtt_publish+0x44>
	err_code = client_write(client, param->message.payload.data,
   3eae8:	e9d6 1203 	ldrd	r1, r2, [r6, #12]
   3eaec:	4628      	mov	r0, r5
   3eaee:	f7ff ff41 	bl	3e974 <client_write>
   3eaf2:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3eaf4:	4628      	mov	r0, r5
   3eaf6:	f7e6 fe85 	bl	25804 <mqtt_mutex_unlock>
}
   3eafa:	4620      	mov	r0, r4
   3eafc:	b002      	add	sp, #8
   3eafe:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTCONN;
   3eb00:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3eb04:	e7f6      	b.n	3eaf4 <mqtt_publish+0x44>
	NULL_PARAM_CHECK(client);
   3eb06:	f06f 0415 	mvn.w	r4, #21
   3eb0a:	e7f6      	b.n	3eafa <mqtt_publish+0x4a>

0003eb0c <mqtt_publish_qos1_ack>:
{
   3eb0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3eb0e:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   3eb10:	4605      	mov	r5, r0
   3eb12:	b1f8      	cbz	r0, 3eb54 <mqtt_publish_qos1_ack+0x48>
	NULL_PARAM_CHECK(param);
   3eb14:	b1f1      	cbz	r1, 3eb54 <mqtt_publish_qos1_ack+0x48>
	mqtt_mutex_lock(client);
   3eb16:	f7e6 fea1 	bl	2585c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3eb1a:	4669      	mov	r1, sp
   3eb1c:	4628      	mov	r0, r5
   3eb1e:	f7ff feeb 	bl	3e8f8 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3eb22:	69ab      	ldr	r3, [r5, #24]
   3eb24:	075b      	lsls	r3, r3, #29
   3eb26:	d512      	bpl.n	3eb4e <mqtt_publish_qos1_ack+0x42>
	err_code = publish_ack_encode(param, &packet);
   3eb28:	4620      	mov	r0, r4
   3eb2a:	4669      	mov	r1, sp
   3eb2c:	f7ff fd88 	bl	3e640 <publish_ack_encode>
	if (err_code < 0) {
   3eb30:	1e04      	subs	r4, r0, #0
   3eb32:	db06      	blt.n	3eb42 <mqtt_publish_qos1_ack+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3eb34:	e9dd 1200 	ldrd	r1, r2, [sp]
   3eb38:	4628      	mov	r0, r5
   3eb3a:	1a52      	subs	r2, r2, r1
   3eb3c:	f7ff ff1a 	bl	3e974 <client_write>
   3eb40:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3eb42:	4628      	mov	r0, r5
   3eb44:	f7e6 fe5e 	bl	25804 <mqtt_mutex_unlock>
}
   3eb48:	4620      	mov	r0, r4
   3eb4a:	b003      	add	sp, #12
   3eb4c:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3eb4e:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3eb52:	e7f6      	b.n	3eb42 <mqtt_publish_qos1_ack+0x36>
	NULL_PARAM_CHECK(client);
   3eb54:	f06f 0415 	mvn.w	r4, #21
   3eb58:	e7f6      	b.n	3eb48 <mqtt_publish_qos1_ack+0x3c>

0003eb5a <mqtt_disconnect>:
{
   3eb5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3eb5c:	4604      	mov	r4, r0
   3eb5e:	b310      	cbz	r0, 3eba6 <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   3eb60:	f7e6 fe7c 	bl	2585c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3eb64:	4669      	mov	r1, sp
   3eb66:	4620      	mov	r0, r4
   3eb68:	f7ff fec6 	bl	3e8f8 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3eb6c:	69a3      	ldr	r3, [r4, #24]
   3eb6e:	075b      	lsls	r3, r3, #29
   3eb70:	d516      	bpl.n	3eba0 <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   3eb72:	4668      	mov	r0, sp
   3eb74:	f7e6 fcd8 	bl	25528 <disconnect_encode>
	if (err_code < 0) {
   3eb78:	1e05      	subs	r5, r0, #0
   3eb7a:	db0b      	blt.n	3eb94 <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3eb7c:	e9dd 1200 	ldrd	r1, r2, [sp]
   3eb80:	4620      	mov	r0, r4
   3eb82:	1a52      	subs	r2, r2, r1
   3eb84:	f7ff fef6 	bl	3e974 <client_write>
	if (err_code < 0) {
   3eb88:	1e05      	subs	r5, r0, #0
   3eb8a:	db03      	blt.n	3eb94 <mqtt_disconnect+0x3a>
	client_disconnect(client, 0);
   3eb8c:	2100      	movs	r1, #0
   3eb8e:	4620      	mov	r0, r4
   3eb90:	f7ff fed1 	bl	3e936 <client_disconnect>
	mqtt_mutex_unlock(client);
   3eb94:	4620      	mov	r0, r4
   3eb96:	f7e6 fe35 	bl	25804 <mqtt_mutex_unlock>
}
   3eb9a:	4628      	mov	r0, r5
   3eb9c:	b003      	add	sp, #12
   3eb9e:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3eba0:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   3eba4:	e7f6      	b.n	3eb94 <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   3eba6:	f06f 0515 	mvn.w	r5, #21
   3ebaa:	e7f6      	b.n	3eb9a <mqtt_disconnect+0x40>

0003ebac <mqtt_subscribe>:
{
   3ebac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3ebae:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   3ebb0:	4605      	mov	r5, r0
   3ebb2:	b1f8      	cbz	r0, 3ebf4 <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   3ebb4:	b1f1      	cbz	r1, 3ebf4 <mqtt_subscribe+0x48>
	mqtt_mutex_lock(client);
   3ebb6:	f7e6 fe51 	bl	2585c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3ebba:	4669      	mov	r1, sp
   3ebbc:	4628      	mov	r0, r5
   3ebbe:	f7ff fe9b 	bl	3e8f8 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3ebc2:	69ab      	ldr	r3, [r5, #24]
   3ebc4:	075b      	lsls	r3, r3, #29
   3ebc6:	d512      	bpl.n	3ebee <mqtt_subscribe+0x42>
	err_code = subscribe_encode(param, &packet);
   3ebc8:	4620      	mov	r0, r4
   3ebca:	4669      	mov	r1, sp
   3ebcc:	f7ff fd3d 	bl	3e64a <subscribe_encode>
	if (err_code < 0) {
   3ebd0:	1e04      	subs	r4, r0, #0
   3ebd2:	db06      	blt.n	3ebe2 <mqtt_subscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3ebd4:	e9dd 1200 	ldrd	r1, r2, [sp]
   3ebd8:	4628      	mov	r0, r5
   3ebda:	1a52      	subs	r2, r2, r1
   3ebdc:	f7ff feca 	bl	3e974 <client_write>
   3ebe0:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3ebe2:	4628      	mov	r0, r5
   3ebe4:	f7e6 fe0e 	bl	25804 <mqtt_mutex_unlock>
}
   3ebe8:	4620      	mov	r0, r4
   3ebea:	b003      	add	sp, #12
   3ebec:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3ebee:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3ebf2:	e7f6      	b.n	3ebe2 <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   3ebf4:	f06f 0415 	mvn.w	r4, #21
   3ebf8:	e7f6      	b.n	3ebe8 <mqtt_subscribe+0x3c>

0003ebfa <mqtt_unsubscribe>:
{
   3ebfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3ebfc:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   3ebfe:	4605      	mov	r5, r0
   3ec00:	b1f8      	cbz	r0, 3ec42 <mqtt_unsubscribe+0x48>
	NULL_PARAM_CHECK(param);
   3ec02:	b1f1      	cbz	r1, 3ec42 <mqtt_unsubscribe+0x48>
	mqtt_mutex_lock(client);
   3ec04:	f7e6 fe2a 	bl	2585c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3ec08:	4669      	mov	r1, sp
   3ec0a:	4628      	mov	r0, r5
   3ec0c:	f7ff fe74 	bl	3e8f8 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3ec10:	69ab      	ldr	r3, [r5, #24]
   3ec12:	075b      	lsls	r3, r3, #29
   3ec14:	d512      	bpl.n	3ec3c <mqtt_unsubscribe+0x42>
	err_code = unsubscribe_encode(param, &packet);
   3ec16:	4620      	mov	r0, r4
   3ec18:	4669      	mov	r1, sp
   3ec1a:	f7ff fd4d 	bl	3e6b8 <unsubscribe_encode>
	if (err_code < 0) {
   3ec1e:	1e04      	subs	r4, r0, #0
   3ec20:	db06      	blt.n	3ec30 <mqtt_unsubscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3ec22:	e9dd 1200 	ldrd	r1, r2, [sp]
   3ec26:	4628      	mov	r0, r5
   3ec28:	1a52      	subs	r2, r2, r1
   3ec2a:	f7ff fea3 	bl	3e974 <client_write>
   3ec2e:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3ec30:	4628      	mov	r0, r5
   3ec32:	f7e6 fde7 	bl	25804 <mqtt_mutex_unlock>
}
   3ec36:	4620      	mov	r0, r4
   3ec38:	b003      	add	sp, #12
   3ec3a:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3ec3c:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3ec40:	e7f6      	b.n	3ec30 <mqtt_unsubscribe+0x36>
	NULL_PARAM_CHECK(client);
   3ec42:	f06f 0415 	mvn.w	r4, #21
   3ec46:	e7f6      	b.n	3ec36 <mqtt_unsubscribe+0x3c>

0003ec48 <mqtt_ping>:
{
   3ec48:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3ec4a:	4604      	mov	r4, r0
   3ec4c:	b320      	cbz	r0, 3ec98 <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   3ec4e:	f7e6 fe05 	bl	2585c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3ec52:	4669      	mov	r1, sp
   3ec54:	4620      	mov	r0, r4
   3ec56:	f7ff fe4f 	bl	3e8f8 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3ec5a:	69a3      	ldr	r3, [r4, #24]
   3ec5c:	075b      	lsls	r3, r3, #29
   3ec5e:	d518      	bpl.n	3ec92 <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   3ec60:	4668      	mov	r0, sp
   3ec62:	f7e6 fc73 	bl	2554c <ping_request_encode>
	if (err_code < 0) {
   3ec66:	1e05      	subs	r5, r0, #0
   3ec68:	db0d      	blt.n	3ec86 <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3ec6a:	e9dd 1200 	ldrd	r1, r2, [sp]
   3ec6e:	4620      	mov	r0, r4
   3ec70:	1a52      	subs	r2, r2, r1
   3ec72:	f7ff fe7f 	bl	3e974 <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   3ec76:	f994 3077 	ldrsb.w	r3, [r4, #119]	; 0x77
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3ec7a:	4605      	mov	r5, r0
	if (client->unacked_ping >= INT8_MAX) {
   3ec7c:	2b7f      	cmp	r3, #127	; 0x7f
   3ec7e:	d002      	beq.n	3ec86 <mqtt_ping+0x3e>
		client->unacked_ping++;
   3ec80:	3301      	adds	r3, #1
   3ec82:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
	mqtt_mutex_unlock(client);
   3ec86:	4620      	mov	r0, r4
   3ec88:	f7e6 fdbc 	bl	25804 <mqtt_mutex_unlock>
}
   3ec8c:	4628      	mov	r0, r5
   3ec8e:	b003      	add	sp, #12
   3ec90:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3ec92:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   3ec96:	e7f6      	b.n	3ec86 <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   3ec98:	f06f 0515 	mvn.w	r5, #21
   3ec9c:	e7f6      	b.n	3ec8c <mqtt_ping+0x44>

0003ec9e <mqtt_live>:
{
   3ec9e:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   3eca0:	4606      	mov	r6, r0
   3eca2:	b300      	cbz	r0, 3ece6 <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   3eca4:	f7e6 fdda 	bl	2585c <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   3eca8:	6974      	ldr	r4, [r6, #20]
   3ecaa:	f001 fc31 	bl	40510 <z_impl_k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline u32_t mqtt_elapsed_time_in_ms_get(u32_t last_activity)
{
	s32_t diff = k_uptime_get_32() - last_activity;
   3ecae:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   3ecb0:	f8b6 4074 	ldrh.w	r4, [r6, #116]	; 0x74

	if (diff < 0) {
		return 0;
   3ecb4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   3ecb8:	b19c      	cbz	r4, 3ece2 <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   3ecba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3ecbe:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   3ecc0:	4284      	cmp	r4, r0
   3ecc2:	d80d      	bhi.n	3ece0 <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   3ecc4:	4630      	mov	r0, r6
   3ecc6:	f7ff ffbf 	bl	3ec48 <mqtt_ping>
		ping_sent = true;
   3ecca:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   3eccc:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   3ecce:	4630      	mov	r0, r6
   3ecd0:	f7e6 fd98 	bl	25804 <mqtt_mutex_unlock>
		return -EAGAIN;
   3ecd4:	2c00      	cmp	r4, #0
   3ecd6:	bf08      	it	eq
   3ecd8:	f06f 050a 	mvneq.w	r5, #10
}
   3ecdc:	4628      	mov	r0, r5
   3ecde:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   3ece0:	2400      	movs	r4, #0
	int err_code = 0;
   3ece2:	4625      	mov	r5, r4
   3ece4:	e7f3      	b.n	3ecce <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   3ece6:	f06f 0515 	mvn.w	r5, #21
   3ecea:	e7f7      	b.n	3ecdc <mqtt_live+0x3e>

0003ecec <mqtt_keepalive_time_left>:
{
   3ecec:	b538      	push	{r3, r4, r5, lr}
   3ecee:	4605      	mov	r5, r0
	u32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   3ecf0:	6944      	ldr	r4, [r0, #20]
   3ecf2:	f001 fc0d 	bl	40510 <z_impl_k_uptime_get>
	s32_t diff = k_uptime_get_32() - last_activity;
   3ecf6:	1b04      	subs	r4, r0, r4
	u32_t keepalive_ms = 1000U * client->keepalive;
   3ecf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   3ecfc:	f8b5 2074 	ldrh.w	r2, [r5, #116]	; 0x74
		return 0;
   3ed00:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   3ed04:	4350      	muls	r0, r2
	if (client->keepalive == 0) {
   3ed06:	b11a      	cbz	r2, 3ed10 <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   3ed08:	42a0      	cmp	r0, r4
   3ed0a:	d904      	bls.n	3ed16 <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   3ed0c:	1b00      	subs	r0, r0, r4
}
   3ed0e:	bd38      	pop	{r3, r4, r5, pc}
		return UINT32_MAX;
   3ed10:	f04f 30ff 	mov.w	r0, #4294967295
   3ed14:	e7fb      	b.n	3ed0e <mqtt_keepalive_time_left+0x22>
		return 0;
   3ed16:	2000      	movs	r0, #0
   3ed18:	e7f9      	b.n	3ed0e <mqtt_keepalive_time_left+0x22>

0003ed1a <mqtt_input>:
{
   3ed1a:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3ed1c:	4605      	mov	r5, r0
   3ed1e:	b1d0      	cbz	r0, 3ed56 <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   3ed20:	f7e6 fd9c 	bl	2585c <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   3ed24:	69ab      	ldr	r3, [r5, #24]
   3ed26:	079b      	lsls	r3, r3, #30
   3ed28:	d50f      	bpl.n	3ed4a <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   3ed2a:	6a2b      	ldr	r3, [r5, #32]
   3ed2c:	b983      	cbnz	r3, 3ed50 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   3ed2e:	4628      	mov	r0, r5
   3ed30:	f7ff fd10 	bl	3e754 <mqtt_handle_rx>
	if (err_code < 0) {
   3ed34:	1e04      	subs	r4, r0, #0
   3ed36:	da03      	bge.n	3ed40 <mqtt_input+0x26>
		client_disconnect(client, err_code);
   3ed38:	4621      	mov	r1, r4
   3ed3a:	4628      	mov	r0, r5
   3ed3c:	f7ff fdfb 	bl	3e936 <client_disconnect>
	mqtt_mutex_unlock(client);
   3ed40:	4628      	mov	r0, r5
   3ed42:	f7e6 fd5f 	bl	25804 <mqtt_mutex_unlock>
}
   3ed46:	4620      	mov	r0, r4
   3ed48:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   3ed4a:	f06f 040c 	mvn.w	r4, #12
   3ed4e:	e7f7      	b.n	3ed40 <mqtt_input+0x26>
		return -EBUSY;
   3ed50:	f06f 040f 	mvn.w	r4, #15
   3ed54:	e7f4      	b.n	3ed40 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   3ed56:	f06f 0415 	mvn.w	r4, #21
   3ed5a:	e7f4      	b.n	3ed46 <mqtt_input+0x2c>

0003ed5c <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   3ed5c:	2301      	movs	r3, #1
   3ed5e:	f7ff be1a 	b.w	3e996 <read_publish_payload>

0003ed62 <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, u8_t *buffer,
				 size_t length)
{
   3ed62:	b570      	push	{r4, r5, r6, lr}
   3ed64:	4606      	mov	r6, r0
   3ed66:	460c      	mov	r4, r1
	u8_t *end = buffer + length;
   3ed68:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   3ed6a:	42ac      	cmp	r4, r5
   3ed6c:	d301      	bcc.n	3ed72 <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   3ed6e:	2000      	movs	r0, #0
}
   3ed70:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   3ed72:	1b2a      	subs	r2, r5, r4
   3ed74:	4621      	mov	r1, r4
   3ed76:	4630      	mov	r0, r6
   3ed78:	f7ff fff0 	bl	3ed5c <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   3ed7c:	2800      	cmp	r0, #0
   3ed7e:	dbf7      	blt.n	3ed70 <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   3ed80:	d001      	beq.n	3ed86 <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   3ed82:	4404      	add	r4, r0
   3ed84:	e7f1      	b.n	3ed6a <mqtt_readall_publish_payload+0x8>
			return -EIO;
   3ed86:	f06f 0004 	mvn.w	r0, #4
   3ed8a:	e7f1      	b.n	3ed70 <mqtt_readall_publish_payload+0xe>

0003ed8c <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   3ed8c:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tls.sock);
	ret = close(client->transport.tls.sock);
   3ed8e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   3ed90:	f7e6 fd84 	bl	2589c <close>
	if (ret < 0) {
   3ed94:	2800      	cmp	r0, #0
   3ed96:	da04      	bge.n	3eda2 <mqtt_client_tls_disconnect+0x16>
		return -errno;
   3ed98:	f7ff facf 	bl	3e33a <__errno>
   3ed9c:	6800      	ldr	r0, [r0, #0]
   3ed9e:	4240      	negs	r0, r0
	}

	return 0;
}
   3eda0:	bd08      	pop	{r3, pc}
	return 0;
   3eda2:	2000      	movs	r0, #0
   3eda4:	e7fc      	b.n	3eda0 <mqtt_client_tls_disconnect+0x14>

0003eda6 <gpio_nrfx_write>:
{
   3eda6:	b510      	push	{r4, lr}
	return port->config->config_info;
   3eda8:	6804      	ldr	r4, [r0, #0]
   3edaa:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3edac:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   3edae:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3edb0:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   3edb2:	69c0      	ldr	r0, [r0, #28]
   3edb4:	d103      	bne.n	3edbe <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   3edb6:	4058      	eors	r0, r3
    p_reg->OUT = value;
   3edb8:	6060      	str	r0, [r4, #4]
}
   3edba:	2000      	movs	r0, #0
   3edbc:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   3edbe:	3300      	adds	r3, #0
   3edc0:	f04f 0101 	mov.w	r1, #1
   3edc4:	bf18      	it	ne
   3edc6:	2301      	movne	r3, #1
   3edc8:	40d0      	lsrs	r0, r2
   3edca:	f000 0001 	and.w	r0, r0, #1
   3edce:	4091      	lsls	r1, r2
   3edd0:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   3edd2:	bf14      	ite	ne
   3edd4:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   3edd6:	60e1      	streq	r1, [r4, #12]
   3edd8:	e7ef      	b.n	3edba <gpio_nrfx_write+0x14>

0003edda <gpio_nrfx_read>:
{
   3edda:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   3eddc:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   3edde:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ede0:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   3ede2:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ede4:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   3ede6:	2901      	cmp	r1, #1
    return p_reg->DIR;
   3ede8:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   3edea:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   3edec:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   3edee:	ea80 0004 	eor.w	r0, r0, r4
   3edf2:	ea84 0405 	eor.w	r4, r4, r5
   3edf6:	ea04 0406 	and.w	r4, r4, r6
   3edfa:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   3edfe:	bf1c      	itt	ne
   3ee00:	40d0      	lsrne	r0, r2
   3ee02:	f000 0001 	andne.w	r0, r0, #1
   3ee06:	6018      	str	r0, [r3, #0]
}
   3ee08:	2000      	movs	r0, #0
   3ee0a:	bd70      	pop	{r4, r5, r6, pc}

0003ee0c <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   3ee0c:	2901      	cmp	r1, #1
{
   3ee0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   3ee12:	bf18      	it	ne
   3ee14:	b2d4      	uxtbne	r4, r2
{
   3ee16:	4606      	mov	r6, r0
		to_pin   = pin;
   3ee18:	bf12      	itee	ne
   3ee1a:	4625      	movne	r5, r4
		to_pin   = 31U;
   3ee1c:	251f      	moveq	r5, #31
		from_pin = 0U;
   3ee1e:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   3ee20:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   3ee24:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   3ee26:	42ac      	cmp	r4, r5
   3ee28:	d902      	bls.n	3ee30 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   3ee2a:	2000      	movs	r0, #0
}
   3ee2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   3ee30:	68fb      	ldr	r3, [r7, #12]
   3ee32:	fa08 f204 	lsl.w	r2, r8, r4
   3ee36:	ea23 0302 	bic.w	r3, r3, r2
   3ee3a:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   3ee3c:	4621      	mov	r1, r4
   3ee3e:	4630      	mov	r0, r6
   3ee40:	f7e6 ffa0 	bl	25d84 <gpiote_pin_int_cfg>
		if (res != 0) {
   3ee44:	2800      	cmp	r0, #0
   3ee46:	d1f1      	bne.n	3ee2c <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   3ee48:	3401      	adds	r4, #1
   3ee4a:	b2e4      	uxtb	r4, r4
   3ee4c:	e7eb      	b.n	3ee26 <gpio_nrfx_pin_disable_callback+0x1a>

0003ee4e <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   3ee4e:	2901      	cmp	r1, #1
{
   3ee50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   3ee54:	bf18      	it	ne
   3ee56:	b2d4      	uxtbne	r4, r2
{
   3ee58:	4606      	mov	r6, r0
		to_pin   = pin;
   3ee5a:	bf12      	itee	ne
   3ee5c:	4625      	movne	r5, r4
		to_pin   = 31U;
   3ee5e:	251f      	moveq	r5, #31
		from_pin = 0U;
   3ee60:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   3ee62:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   3ee66:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   3ee68:	42ac      	cmp	r4, r5
   3ee6a:	d902      	bls.n	3ee72 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   3ee6c:	2000      	movs	r0, #0
}
   3ee6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   3ee72:	68fb      	ldr	r3, [r7, #12]
   3ee74:	fa08 f204 	lsl.w	r2, r8, r4
   3ee78:	4313      	orrs	r3, r2
   3ee7a:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   3ee7c:	4621      	mov	r1, r4
   3ee7e:	4630      	mov	r0, r6
   3ee80:	f7e6 ff80 	bl	25d84 <gpiote_pin_int_cfg>
		if (res != 0) {
   3ee84:	2800      	cmp	r0, #0
   3ee86:	d1f2      	bne.n	3ee6e <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   3ee88:	3401      	adds	r4, #1
   3ee8a:	b2e4      	uxtb	r4, r4
   3ee8c:	e7ec      	b.n	3ee68 <gpio_nrfx_pin_enable_callback+0x1a>

0003ee8e <flash_nrf_write_protection>:
}
   3ee8e:	2000      	movs	r0, #0
   3ee90:	4770      	bx	lr

0003ee92 <is_regular_addr_valid>:
{
   3ee92:	b538      	push	{r3, r4, r5, lr}
   3ee94:	4604      	mov	r4, r0
   3ee96:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   3ee98:	f001 f9ff 	bl	4029a <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   3ee9c:	4284      	cmp	r4, r0
   3ee9e:	d209      	bcs.n	3eeb4 <is_regular_addr_valid+0x22>
   3eea0:	2c00      	cmp	r4, #0
   3eea2:	db07      	blt.n	3eeb4 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   3eea4:	42a8      	cmp	r0, r5
   3eea6:	d305      	bcc.n	3eeb4 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   3eea8:	442c      	add	r4, r5
	    len > flash_size ||
   3eeaa:	4284      	cmp	r4, r0
   3eeac:	bf8c      	ite	hi
   3eeae:	2000      	movhi	r0, #0
   3eeb0:	2001      	movls	r0, #1
}
   3eeb2:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   3eeb4:	2000      	movs	r0, #0
   3eeb6:	e7fc      	b.n	3eeb2 <is_regular_addr_valid+0x20>

0003eeb8 <flash_nrf_read>:
{
   3eeb8:	b570      	push	{r4, r5, r6, lr}
   3eeba:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   3eebc:	4619      	mov	r1, r3
   3eebe:	4628      	mov	r0, r5
{
   3eec0:	4616      	mov	r6, r2
   3eec2:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   3eec4:	f7ff ffe5 	bl	3ee92 <is_regular_addr_valid>
   3eec8:	b170      	cbz	r0, 3eee8 <flash_nrf_read+0x30>
	if (!len) {
   3eeca:	b184      	cbz	r4, 3eeee <flash_nrf_read+0x36>
	if (addr < PM_APP_ADDRESS) {
   3eecc:	f5b5 3fe1 	cmp.w	r5, #115200	; 0x1c200
		return spm_request_read(data, addr, len);
   3eed0:	4622      	mov	r2, r4
   3eed2:	4629      	mov	r1, r5
   3eed4:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   3eed6:	da03      	bge.n	3eee0 <flash_nrf_read+0x28>
}
   3eed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return spm_request_read(data, addr, len);
   3eedc:	f7d9 b880 	b.w	17fe0 <spm_request_read>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3eee0:	f001 fb9c 	bl	4061c <memcpy>
   3eee4:	2000      	movs	r0, #0
}
   3eee6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3eee8:	f06f 0015 	mvn.w	r0, #21
   3eeec:	e7fb      	b.n	3eee6 <flash_nrf_read+0x2e>
		return 0;
   3eeee:	4620      	mov	r0, r4
   3eef0:	e7f9      	b.n	3eee6 <flash_nrf_read+0x2e>

0003eef2 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   3eef2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3eef6:	461d      	mov	r5, r3
	off_t group_offs = 0;
	u32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   3eef8:	6843      	ldr	r3, [r0, #4]
{
   3eefa:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   3eefc:	691b      	ldr	r3, [r3, #16]
   3eefe:	4669      	mov	r1, sp
{
   3ef00:	4616      	mov	r6, r2
	api->page_layout(dev, &layout, &layout_size);
   3ef02:	aa01      	add	r2, sp, #4
   3ef04:	4798      	blx	r3

	while (layout_size--) {
   3ef06:	e9dd 1200 	ldrd	r1, r2, [sp]
   3ef0a:	2300      	movs	r3, #0
	off_t end = 0;
   3ef0c:	4618      	mov	r0, r3
	off_t group_offs = 0;
   3ef0e:	469e      	mov	lr, r3
	size_t page_count = 0;
   3ef10:	469c      	mov	ip, r3
   3ef12:	3a01      	subs	r2, #1
	while (layout_size--) {
   3ef14:	1c57      	adds	r7, r2, #1
   3ef16:	d102      	bne.n	3ef1e <flash_get_page_info+0x2c>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   3ef18:	f06f 0015 	mvn.w	r0, #21
   3ef1c:	e01a      	b.n	3ef54 <flash_get_page_info+0x62>
		if (use_addr) {
   3ef1e:	f8d1 8000 	ldr.w	r8, [r1]
   3ef22:	b1d6      	cbz	r6, 3ef5a <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   3ef24:	684f      	ldr	r7, [r1, #4]
   3ef26:	fb07 0008 	mla	r0, r7, r8, r0
		if (offs < end) {
   3ef2a:	42a0      	cmp	r0, r4
   3ef2c:	f102 37ff 	add.w	r7, r2, #4294967295
   3ef30:	dd18      	ble.n	3ef64 <flash_get_page_info+0x72>
   3ef32:	9201      	str	r2, [sp, #4]
   3ef34:	b103      	cbz	r3, 3ef38 <flash_get_page_info+0x46>
   3ef36:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   3ef38:	9b00      	ldr	r3, [sp, #0]
   3ef3a:	685b      	ldr	r3, [r3, #4]
   3ef3c:	606b      	str	r3, [r5, #4]
			if (use_addr) {
   3ef3e:	b176      	cbz	r6, 3ef5e <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   3ef40:	eba4 040e 	sub.w	r4, r4, lr
   3ef44:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   3ef48:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   3ef4a:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   3ef4e:	4464      	add	r4, ip
			info->start_offset = group_offs +
   3ef50:	602b      	str	r3, [r5, #0]
			info->index = page_count + num_in_group;
   3ef52:	60ac      	str	r4, [r5, #8]
}
   3ef54:	b002      	add	sp, #8
   3ef56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   3ef5a:	4440      	add	r0, r8
   3ef5c:	e7e5      	b.n	3ef2a <flash_get_page_info+0x38>
				num_in_group = offs - page_count;
   3ef5e:	eba4 040c 	sub.w	r4, r4, ip
   3ef62:	e7f1      	b.n	3ef48 <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   3ef64:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   3ef66:	44c4      	add	ip, r8
		group_offs += layout->pages_count * layout->pages_size;
   3ef68:	fb03 ee08 	mla	lr, r3, r8, lr
		layout++;
   3ef6c:	3108      	adds	r1, #8
   3ef6e:	2301      	movs	r3, #1
   3ef70:	463a      	mov	r2, r7
   3ef72:	e7cf      	b.n	3ef14 <flash_get_page_info+0x22>

0003ef74 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(struct device *dev, off_t offs,
				      struct flash_pages_info *info)
{
	return flash_get_page_info(dev, offs, true, info);
   3ef74:	4613      	mov	r3, r2
   3ef76:	2201      	movs	r2, #1
   3ef78:	f7ff bfbb 	b.w	3eef2 <flash_get_page_info>

0003ef7c <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   3ef7c:	6882      	ldr	r2, [r0, #8]
	return dev->config->config_info;
   3ef7e:	6803      	ldr	r3, [r0, #0]
	if (data->int_driven->disable_tx_irq &&
   3ef80:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   3ef82:	689b      	ldr	r3, [r3, #8]
	if (data->int_driven->disable_tx_irq &&
   3ef84:	7b91      	ldrb	r1, [r2, #14]
	return config->uarte_regs;
   3ef86:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   3ef88:	b159      	cbz	r1, 3efa2 <uarte_nrfx_isr_int+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3ef8a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   3ef8e:	b141      	cbz	r1, 3efa2 <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   3ef90:	f44f 7180 	mov.w	r1, #256	; 0x100
   3ef94:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3ef98:	2101      	movs	r1, #1
   3ef9a:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   3ef9c:	2300      	movs	r3, #0
   3ef9e:	7393      	strb	r3, [r2, #14]
		return;
   3efa0:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3efa2:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   3efa6:	b111      	cbz	r1, 3efae <uarte_nrfx_isr_int+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3efa8:	2100      	movs	r1, #0
   3efaa:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   3efae:	6813      	ldr	r3, [r2, #0]
   3efb0:	b10b      	cbz	r3, 3efb6 <uarte_nrfx_isr_int+0x3a>
		data->int_driven->cb(data->int_driven->cb_data);
   3efb2:	6850      	ldr	r0, [r2, #4]
   3efb4:	4718      	bx	r3
}
   3efb6:	4770      	bx	lr

0003efb8 <uarte_nrfx_config_get>:
{
   3efb8:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   3efba:	6882      	ldr	r2, [r0, #8]
   3efbc:	e892 0003 	ldmia.w	r2, {r0, r1}
   3efc0:	e883 0003 	stmia.w	r3, {r0, r1}
}
   3efc4:	2000      	movs	r0, #0
   3efc6:	4770      	bx	lr

0003efc8 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   3efc8:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3efca:	689b      	ldr	r3, [r3, #8]
   3efcc:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   3efce:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   3efd2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   3efd6:	4770      	bx	lr

0003efd8 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   3efd8:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   3efda:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   3efdc:	689b      	ldr	r3, [r3, #8]
   3efde:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3efe0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3efe4:	b138      	cbz	r0, 3eff6 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   3efe6:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3efe8:	2000      	movs	r0, #0
   3efea:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3efec:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3efee:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3eff2:	601a      	str	r2, [r3, #0]
	return 0;
   3eff4:	4770      	bx	lr
		return -1;
   3eff6:	f04f 30ff 	mov.w	r0, #4294967295
}
   3effa:	4770      	bx	lr

0003effc <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3effc:	2200      	movs	r2, #0
	return dev->config->config_info;
   3effe:	6803      	ldr	r3, [r0, #0]
{
   3f000:	b082      	sub	sp, #8
	return config->uarte_regs;
   3f002:	689b      	ldr	r3, [r3, #8]
{
   3f004:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   3f008:	681b      	ldr	r3, [r3, #0]
   3f00a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3f00e:	f10d 0207 	add.w	r2, sp, #7
   3f012:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3f016:	2201      	movs	r2, #1
   3f018:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f01c:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f01e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   3f022:	2900      	cmp	r1, #0
   3f024:	d0fb      	beq.n	3f01e <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f026:	60da      	str	r2, [r3, #12]
}
   3f028:	b002      	add	sp, #8
   3f02a:	4770      	bx	lr

0003f02c <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   3f02c:	6803      	ldr	r3, [r0, #0]
{
   3f02e:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   3f030:	689b      	ldr	r3, [r3, #8]
   3f032:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f034:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   3f038:	b1bb      	cbz	r3, 3f06a <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   3f03a:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   3f03c:	68ab      	ldr	r3, [r5, #8]
   3f03e:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f040:	2300      	movs	r3, #0
   3f042:	4290      	cmp	r0, r2
   3f044:	bfa8      	it	ge
   3f046:	4610      	movge	r0, r2
   3f048:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   3f04c:	68aa      	ldr	r2, [r5, #8]
   3f04e:	4283      	cmp	r3, r0
   3f050:	6892      	ldr	r2, [r2, #8]
   3f052:	db06      	blt.n	3f062 <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f054:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3f056:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3f05a:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f05e:	60a3      	str	r3, [r4, #8]
}
   3f060:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   3f062:	5cce      	ldrb	r6, [r1, r3]
   3f064:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   3f066:	3301      	adds	r3, #1
   3f068:	e7f0      	b.n	3f04c <uarte_nrfx_fifo_fill+0x20>
		return 0;
   3f06a:	4618      	mov	r0, r3
   3f06c:	e7f8      	b.n	3f060 <uarte_nrfx_fifo_fill+0x34>

0003f06e <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   3f06e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3f070:	689b      	ldr	r3, [r3, #8]
   3f072:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f074:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3f078:	b143      	cbz	r3, 3f08c <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   3f07a:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f07c:	2000      	movs	r0, #0
   3f07e:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f082:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   3f084:	7b1b      	ldrb	r3, [r3, #12]
   3f086:	700b      	strb	r3, [r1, #0]
   3f088:	6010      	str	r0, [r2, #0]
   3f08a:	4770      	bx	lr
	int num_rx = 0;
   3f08c:	4618      	mov	r0, r3
}
   3f08e:	4770      	bx	lr

0003f090 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   3f090:	2100      	movs	r1, #0
	return dev->config->config_info;
   3f092:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   3f094:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   3f096:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   3f098:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   3f09a:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   3f09c:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   3f09e:	f44f 7280 	mov.w	r2, #256	; 0x100
   3f0a2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3f0a6:	4770      	bx	lr

0003f0a8 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   3f0a8:	2201      	movs	r2, #1
   3f0aa:	6883      	ldr	r3, [r0, #8]
   3f0ac:	689b      	ldr	r3, [r3, #8]
   3f0ae:	739a      	strb	r2, [r3, #14]
}
   3f0b0:	4770      	bx	lr

0003f0b2 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   3f0b2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3f0b4:	689b      	ldr	r3, [r3, #8]
   3f0b6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f0b8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   3f0bc:	b118      	cbz	r0, 3f0c6 <uarte_nrfx_irq_tx_ready_complete+0x14>
    return p_reg->INTENSET & mask;
   3f0be:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   3f0c2:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   3f0c6:	4770      	bx	lr

0003f0c8 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   3f0c8:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3f0ca:	689b      	ldr	r3, [r3, #8]
   3f0cc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f0ce:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   3f0d2:	3000      	adds	r0, #0
   3f0d4:	bf18      	it	ne
   3f0d6:	2001      	movne	r0, #1
   3f0d8:	4770      	bx	lr

0003f0da <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   3f0da:	2210      	movs	r2, #16
	return dev->config->config_info;
   3f0dc:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3f0de:	689b      	ldr	r3, [r3, #8]
   3f0e0:	681b      	ldr	r3, [r3, #0]
   3f0e2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3f0e6:	4770      	bx	lr

0003f0e8 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   3f0e8:	2210      	movs	r2, #16
	return dev->config->config_info;
   3f0ea:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3f0ec:	689b      	ldr	r3, [r3, #8]
   3f0ee:	681b      	ldr	r3, [r3, #0]
   3f0f0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3f0f4:	4770      	bx	lr

0003f0f6 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   3f0f6:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   3f0fa:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3f0fc:	689b      	ldr	r3, [r3, #8]
   3f0fe:	681b      	ldr	r3, [r3, #0]
   3f100:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3f104:	4770      	bx	lr

0003f106 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   3f106:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   3f10a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3f10c:	689b      	ldr	r3, [r3, #8]
   3f10e:	681b      	ldr	r3, [r3, #0]
   3f110:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3f114:	4770      	bx	lr

0003f116 <uarte_nrfx_irq_update>:
}
   3f116:	2001      	movs	r0, #1
   3f118:	4770      	bx	lr

0003f11a <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   3f11a:	6883      	ldr	r3, [r0, #8]
   3f11c:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   3f11e:	e9c3 1200 	strd	r1, r2, [r3]
}
   3f122:	4770      	bx	lr

0003f124 <uarte_nrfx_irq_is_pending>:
{
   3f124:	b508      	push	{r3, lr}
	return dev->config->config_info;
   3f126:	6803      	ldr	r3, [r0, #0]
{
   3f128:	4602      	mov	r2, r0
	return config->uarte_regs;
   3f12a:	689b      	ldr	r3, [r3, #8]
   3f12c:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   3f12e:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   3f132:	05db      	lsls	r3, r3, #23
   3f134:	d405      	bmi.n	3f142 <uarte_nrfx_irq_is_pending+0x1e>
   3f136:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   3f13a:	f010 0010 	ands.w	r0, r0, #16
   3f13e:	d106      	bne.n	3f14e <uarte_nrfx_irq_is_pending+0x2a>
}
   3f140:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   3f142:	f7ff ffb6 	bl	3f0b2 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   3f146:	2800      	cmp	r0, #0
   3f148:	d0f5      	beq.n	3f136 <uarte_nrfx_irq_is_pending+0x12>
		||
   3f14a:	2001      	movs	r0, #1
   3f14c:	e7f8      	b.n	3f140 <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   3f14e:	4610      	mov	r0, r2
   3f150:	f7ff ffba 	bl	3f0c8 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   3f154:	3000      	adds	r0, #0
   3f156:	bf18      	it	ne
   3f158:	2001      	movne	r0, #1
   3f15a:	e7f1      	b.n	3f140 <uarte_nrfx_irq_is_pending+0x1c>

0003f15c <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   3f15c:	2000      	movs	r0, #0
   3f15e:	4770      	bx	lr

0003f160 <parse_hex4>:
    for (i = 0; i < 4; i++)
   3f160:	2200      	movs	r2, #0
    unsigned int h = 0;
   3f162:	4613      	mov	r3, r2
{
   3f164:	b510      	push	{r4, lr}
        if ((input[i] >= '0') && (input[i] <= '9'))
   3f166:	5c81      	ldrb	r1, [r0, r2]
   3f168:	f1a1 0430 	sub.w	r4, r1, #48	; 0x30
   3f16c:	2c09      	cmp	r4, #9
   3f16e:	d80a      	bhi.n	3f186 <parse_hex4+0x26>
            h += (unsigned int) input[i] - '0';
   3f170:	3b30      	subs	r3, #48	; 0x30
        if (i < 3)
   3f172:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
   3f174:	440b      	add	r3, r1
    for (i = 0; i < 4; i++)
   3f176:	f102 0201 	add.w	r2, r2, #1
            h = h << 4;
   3f17a:	bf18      	it	ne
   3f17c:	011b      	lslne	r3, r3, #4
    for (i = 0; i < 4; i++)
   3f17e:	2a04      	cmp	r2, #4
   3f180:	d1f1      	bne.n	3f166 <parse_hex4+0x6>
}
   3f182:	4618      	mov	r0, r3
   3f184:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   3f186:	f1a1 0441 	sub.w	r4, r1, #65	; 0x41
   3f18a:	2c05      	cmp	r4, #5
   3f18c:	d801      	bhi.n	3f192 <parse_hex4+0x32>
            h += (unsigned int) 10 + input[i] - 'A';
   3f18e:	3b37      	subs	r3, #55	; 0x37
   3f190:	e7ef      	b.n	3f172 <parse_hex4+0x12>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   3f192:	f1a1 0461 	sub.w	r4, r1, #97	; 0x61
   3f196:	2c05      	cmp	r4, #5
   3f198:	d801      	bhi.n	3f19e <parse_hex4+0x3e>
            h += (unsigned int) 10 + input[i] - 'a';
   3f19a:	3b57      	subs	r3, #87	; 0x57
   3f19c:	e7e9      	b.n	3f172 <parse_hex4+0x12>
            return 0;
   3f19e:	2300      	movs	r3, #0
   3f1a0:	e7ef      	b.n	3f182 <parse_hex4+0x22>

0003f1a2 <buffer_skip_whitespace>:
{
   3f1a2:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   3f1a4:	b140      	cbz	r0, 3f1b8 <buffer_skip_whitespace+0x16>
   3f1a6:	6801      	ldr	r1, [r0, #0]
   3f1a8:	b171      	cbz	r1, 3f1c8 <buffer_skip_whitespace+0x26>
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   3f1aa:	6842      	ldr	r2, [r0, #4]
   3f1ac:	6883      	ldr	r3, [r0, #8]
   3f1ae:	4293      	cmp	r3, r2
   3f1b0:	d206      	bcs.n	3f1c0 <buffer_skip_whitespace+0x1e>
   3f1b2:	5ccc      	ldrb	r4, [r1, r3]
   3f1b4:	2c20      	cmp	r4, #32
   3f1b6:	d900      	bls.n	3f1ba <buffer_skip_whitespace+0x18>
}
   3f1b8:	bd10      	pop	{r4, pc}
       buffer->offset++;
   3f1ba:	3301      	adds	r3, #1
   3f1bc:	6083      	str	r3, [r0, #8]
   3f1be:	e7f5      	b.n	3f1ac <buffer_skip_whitespace+0xa>
    if (buffer->offset == buffer->length)
   3f1c0:	d1fa      	bne.n	3f1b8 <buffer_skip_whitespace+0x16>
        buffer->offset--;
   3f1c2:	3a01      	subs	r2, #1
   3f1c4:	6082      	str	r2, [r0, #8]
   3f1c6:	e7f7      	b.n	3f1b8 <buffer_skip_whitespace+0x16>
        return NULL;
   3f1c8:	4608      	mov	r0, r1
   3f1ca:	e7f5      	b.n	3f1b8 <buffer_skip_whitespace+0x16>

0003f1cc <update_offset>:
{
   3f1cc:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   3f1ce:	4604      	mov	r4, r0
   3f1d0:	b140      	cbz	r0, 3f1e4 <update_offset+0x18>
   3f1d2:	6803      	ldr	r3, [r0, #0]
   3f1d4:	b133      	cbz	r3, 3f1e4 <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   3f1d6:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   3f1d8:	4418      	add	r0, r3
   3f1da:	f7dd ffa3 	bl	1d124 <strlen>
   3f1de:	68a3      	ldr	r3, [r4, #8]
   3f1e0:	4418      	add	r0, r3
   3f1e2:	60a0      	str	r0, [r4, #8]
}
   3f1e4:	bd10      	pop	{r4, pc}

0003f1e6 <add_item_to_array>:
    if ((item == NULL) || (array == NULL))
   3f1e6:	b161      	cbz	r1, 3f202 <add_item_to_array+0x1c>
   3f1e8:	b160      	cbz	r0, 3f204 <add_item_to_array+0x1e>
    child = array->child;
   3f1ea:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   3f1ec:	b91b      	cbnz	r3, 3f1f6 <add_item_to_array+0x10>
        array->child = item;
   3f1ee:	6081      	str	r1, [r0, #8]
    item->prev = prev;
   3f1f0:	2001      	movs	r0, #1
   3f1f2:	4770      	bx	lr
        while (child->next)
   3f1f4:	4613      	mov	r3, r2
   3f1f6:	681a      	ldr	r2, [r3, #0]
   3f1f8:	2a00      	cmp	r2, #0
   3f1fa:	d1fb      	bne.n	3f1f4 <add_item_to_array+0xe>
    prev->next = item;
   3f1fc:	6019      	str	r1, [r3, #0]
    item->prev = prev;
   3f1fe:	604b      	str	r3, [r1, #4]
   3f200:	e7f6      	b.n	3f1f0 <add_item_to_array+0xa>
        return false;
   3f202:	4608      	mov	r0, r1
}
   3f204:	4770      	bx	lr

0003f206 <cJSON_New_Item.isra.1>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   3f206:	b510      	push	{r4, lr}
   3f208:	4603      	mov	r3, r0
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   3f20a:	2028      	movs	r0, #40	; 0x28
   3f20c:	4798      	blx	r3
    if (node)
   3f20e:	4604      	mov	r4, r0
   3f210:	b118      	cbz	r0, 3f21a <cJSON_New_Item.isra.1+0x14>
__ssp_bos_icheck3(memset, void *, int)
   3f212:	2228      	movs	r2, #40	; 0x28
   3f214:	2100      	movs	r1, #0
   3f216:	f001 fa21 	bl	4065c <memset>
}
   3f21a:	4620      	mov	r0, r4
   3f21c:	bd10      	pop	{r4, pc}

0003f21e <ensure>:
{
   3f21e:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   3f220:	4604      	mov	r4, r0
   3f222:	b1b8      	cbz	r0, 3f254 <ensure+0x36>
   3f224:	6805      	ldr	r5, [r0, #0]
   3f226:	b165      	cbz	r5, 3f242 <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   3f228:	6842      	ldr	r2, [r0, #4]
   3f22a:	b112      	cbz	r2, 3f232 <ensure+0x14>
   3f22c:	6883      	ldr	r3, [r0, #8]
   3f22e:	429a      	cmp	r2, r3
   3f230:	d910      	bls.n	3f254 <ensure+0x36>
    if (needed > INT_MAX)
   3f232:	2900      	cmp	r1, #0
   3f234:	db0e      	blt.n	3f254 <ensure+0x36>
    needed += p->offset + 1;
   3f236:	68a0      	ldr	r0, [r4, #8]
   3f238:	4401      	add	r1, r0
   3f23a:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   3f23c:	429a      	cmp	r2, r3
   3f23e:	d302      	bcc.n	3f246 <ensure+0x28>
        return p->buffer + p->offset;
   3f240:	4405      	add	r5, r0
}
   3f242:	4628      	mov	r0, r5
   3f244:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   3f246:	6922      	ldr	r2, [r4, #16]
   3f248:	b922      	cbnz	r2, 3f254 <ensure+0x36>
    if (needed > (INT_MAX / 2))
   3f24a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   3f24e:	d303      	bcc.n	3f258 <ensure+0x3a>
        if (needed <= INT_MAX)
   3f250:	2b00      	cmp	r3, #0
   3f252:	da0f      	bge.n	3f274 <ensure+0x56>
        return NULL;
   3f254:	2500      	movs	r5, #0
   3f256:	e7f4      	b.n	3f242 <ensure+0x24>
        newsize = needed + 1;
   3f258:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   3f25a:	6a23      	ldr	r3, [r4, #32]
   3f25c:	b16b      	cbz	r3, 3f27a <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   3f25e:	4628      	mov	r0, r5
   3f260:	4631      	mov	r1, r6
   3f262:	4798      	blx	r3
        if (newbuffer == NULL)
   3f264:	4605      	mov	r5, r0
   3f266:	b9b0      	cbnz	r0, 3f296 <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   3f268:	69e3      	ldr	r3, [r4, #28]
   3f26a:	6820      	ldr	r0, [r4, #0]
   3f26c:	4798      	blx	r3
            p->buffer = NULL;
   3f26e:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   3f272:	e7e6      	b.n	3f242 <ensure+0x24>
            newsize = INT_MAX;
   3f274:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   3f278:	e7ef      	b.n	3f25a <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   3f27a:	69a3      	ldr	r3, [r4, #24]
   3f27c:	4630      	mov	r0, r6
   3f27e:	4798      	blx	r3
        if (!newbuffer)
   3f280:	4605      	mov	r5, r0
   3f282:	2800      	cmp	r0, #0
   3f284:	d0f0      	beq.n	3f268 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   3f286:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3f288:	6821      	ldr	r1, [r4, #0]
   3f28a:	3201      	adds	r2, #1
   3f28c:	f001 f9c6 	bl	4061c <memcpy>
        p->hooks.deallocate(p->buffer);
   3f290:	69e3      	ldr	r3, [r4, #28]
   3f292:	6820      	ldr	r0, [r4, #0]
   3f294:	4798      	blx	r3
    return newbuffer + p->offset;
   3f296:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   3f298:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   3f29c:	441d      	add	r5, r3
   3f29e:	e7d0      	b.n	3f242 <ensure+0x24>

0003f2a0 <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   3f2a0:	2200      	movs	r2, #0
   3f2a2:	4611      	mov	r1, r2
   3f2a4:	f7e7 bd32 	b.w	26d0c <cJSON_ParseWithOpts>

0003f2a8 <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   3f2a8:	2100      	movs	r1, #0
   3f2aa:	f7e7 bc5d 	b.w	26b68 <print.constprop.14>

0003f2ae <cJSON_GetArraySize>:
    if (array == NULL)
   3f2ae:	b110      	cbz	r0, 3f2b6 <cJSON_GetArraySize+0x8>
    child = array->child;
   3f2b0:	6883      	ldr	r3, [r0, #8]
    size_t size = 0;
   3f2b2:	2000      	movs	r0, #0
    while(child != NULL)
   3f2b4:	b903      	cbnz	r3, 3f2b8 <cJSON_GetArraySize+0xa>
}
   3f2b6:	4770      	bx	lr
        size++;
   3f2b8:	3001      	adds	r0, #1
        child = child->next;
   3f2ba:	681b      	ldr	r3, [r3, #0]
   3f2bc:	e7fa      	b.n	3f2b4 <cJSON_GetArraySize+0x6>

0003f2be <cJSON_GetObjectItem>:
    return get_object_item(object, string, false);
   3f2be:	2200      	movs	r2, #0
   3f2c0:	f7e7 b9e2 	b.w	26688 <get_object_item>

0003f2c4 <cJSON_GetObjectItemCaseSensitive>:
    return get_object_item(object, string, true);
   3f2c4:	2201      	movs	r2, #1
   3f2c6:	f7e7 b9df 	b.w	26688 <get_object_item>

0003f2ca <cJSON_HasObjectItem>:
{
   3f2ca:	b508      	push	{r3, lr}
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
   3f2cc:	f7ff fff7 	bl	3f2be <cJSON_GetObjectItem>
}
   3f2d0:	3000      	adds	r0, #0
   3f2d2:	bf18      	it	ne
   3f2d4:	2001      	movne	r0, #1
   3f2d6:	bd08      	pop	{r3, pc}

0003f2d8 <cJSON_AddItemToArray>:
    add_item_to_array(array, item);
   3f2d8:	f7ff bf85 	b.w	3f1e6 <add_item_to_array>

0003f2dc <cJSON_AddItemToObject>:
    add_item_to_object(object, string, item, &global_hooks, false);
   3f2dc:	2300      	movs	r3, #0
   3f2de:	f7e7 bca5 	b.w	26c2c <add_item_to_object.constprop.12>

0003f2e2 <cJSON_DetachItemViaPointer>:
    if ((parent == NULL) || (item == NULL))
   3f2e2:	b180      	cbz	r0, 3f306 <cJSON_DetachItemViaPointer+0x24>
   3f2e4:	b169      	cbz	r1, 3f302 <cJSON_DetachItemViaPointer+0x20>
    if (item->prev != NULL)
   3f2e6:	684a      	ldr	r2, [r1, #4]
   3f2e8:	b10a      	cbz	r2, 3f2ee <cJSON_DetachItemViaPointer+0xc>
   3f2ea:	680b      	ldr	r3, [r1, #0]
        item->prev->next = item->next;
   3f2ec:	6013      	str	r3, [r2, #0]
    if (item->next != NULL)
   3f2ee:	680b      	ldr	r3, [r1, #0]
   3f2f0:	b103      	cbz	r3, 3f2f4 <cJSON_DetachItemViaPointer+0x12>
        item->next->prev = item->prev;
   3f2f2:	605a      	str	r2, [r3, #4]
    if (item == parent->child)
   3f2f4:	6882      	ldr	r2, [r0, #8]
   3f2f6:	428a      	cmp	r2, r1
        parent->child = item->next;
   3f2f8:	bf08      	it	eq
   3f2fa:	6083      	streq	r3, [r0, #8]
    item->prev = NULL;
   3f2fc:	2300      	movs	r3, #0
    item->next = NULL;
   3f2fe:	e9c1 3300 	strd	r3, r3, [r1]
}
   3f302:	4608      	mov	r0, r1
   3f304:	4770      	bx	lr
        return NULL;
   3f306:	4601      	mov	r1, r0
   3f308:	e7fb      	b.n	3f302 <cJSON_DetachItemViaPointer+0x20>

0003f30a <cJSON_DetachItemFromObject>:
{
   3f30a:	b510      	push	{r4, lr}
   3f30c:	4604      	mov	r4, r0
    cJSON *to_detach = cJSON_GetObjectItem(object, string);
   3f30e:	f7ff ffd6 	bl	3f2be <cJSON_GetObjectItem>
    return cJSON_DetachItemViaPointer(object, to_detach);
   3f312:	4601      	mov	r1, r0
   3f314:	4620      	mov	r0, r4
}
   3f316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return cJSON_DetachItemViaPointer(object, to_detach);
   3f31a:	f7ff bfe2 	b.w	3f2e2 <cJSON_DetachItemViaPointer>

0003f31e <cJSON_IsTrue>:
    return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
    if (item == NULL)
   3f31e:	b118      	cbz	r0, 3f328 <cJSON_IsTrue+0xa>
    {
        return false;
    }

    return (item->type & 0xff) == cJSON_True;
   3f320:	7b00      	ldrb	r0, [r0, #12]
   3f322:	1e83      	subs	r3, r0, #2
   3f324:	4258      	negs	r0, r3
   3f326:	4158      	adcs	r0, r3
}
   3f328:	4770      	bx	lr

0003f32a <cJSON_IsBool>:


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
    if (item == NULL)
   3f32a:	b120      	cbz	r0, 3f336 <cJSON_IsBool+0xc>
    {
        return false;
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
   3f32c:	68c0      	ldr	r0, [r0, #12]
   3f32e:	f010 0003 	ands.w	r0, r0, #3
   3f332:	bf18      	it	ne
   3f334:	2001      	movne	r0, #1
}
   3f336:	4770      	bx	lr

0003f338 <cJSON_IsNull>:
CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)
{
    if (item == NULL)
   3f338:	b118      	cbz	r0, 3f342 <cJSON_IsNull+0xa>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_NULL;
   3f33a:	7b00      	ldrb	r0, [r0, #12]
   3f33c:	1f03      	subs	r3, r0, #4
   3f33e:	4258      	negs	r0, r3
   3f340:	4158      	adcs	r0, r3
}
   3f342:	4770      	bx	lr

0003f344 <cJSON_IsNumber>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
    if (item == NULL)
   3f344:	b120      	cbz	r0, 3f350 <cJSON_IsNumber+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Number;
   3f346:	7b00      	ldrb	r0, [r0, #12]
   3f348:	f1a0 0308 	sub.w	r3, r0, #8
   3f34c:	4258      	negs	r0, r3
   3f34e:	4158      	adcs	r0, r3
}
   3f350:	4770      	bx	lr

0003f352 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
    if (item == NULL)
   3f352:	b120      	cbz	r0, 3f35e <cJSON_IsString+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_String;
   3f354:	7b00      	ldrb	r0, [r0, #12]
   3f356:	f1a0 0310 	sub.w	r3, r0, #16
   3f35a:	4258      	negs	r0, r3
   3f35c:	4158      	adcs	r0, r3
}
   3f35e:	4770      	bx	lr

0003f360 <cJSON_GetStringValue>:
CJSON_PUBLIC(char *) cJSON_GetStringValue(cJSON *item) {
   3f360:	b508      	push	{r3, lr}
   3f362:	4602      	mov	r2, r0
    if (!cJSON_IsString(item)) {
   3f364:	f7ff fff5 	bl	3f352 <cJSON_IsString>
   3f368:	b100      	cbz	r0, 3f36c <cJSON_GetStringValue+0xc>
    return item->valuestring;
   3f36a:	6910      	ldr	r0, [r2, #16]
}
   3f36c:	bd08      	pop	{r3, pc}

0003f36e <cJSON_IsObject>:
    return (item->type & 0xFF) == cJSON_Array;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
    if (item == NULL)
   3f36e:	b120      	cbz	r0, 3f37a <cJSON_IsObject+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Object;
   3f370:	7b00      	ldrb	r0, [r0, #12]
   3f372:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
   3f376:	4258      	negs	r0, r3
   3f378:	4158      	adcs	r0, r3
}
   3f37a:	4770      	bx	lr

0003f37c <free_fn_hook>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }
   3f37c:	f000 bfab 	b.w	402d6 <k_free>

0003f380 <malloc_fn_hook>:
static void *malloc_fn_hook(size_t sz) { return k_malloc(sz); }
   3f380:	f7f9 b99a 	b.w	386b8 <k_malloc>

0003f384 <bsdlib_shutdown>:

int bsdlib_shutdown(void)
{
   3f384:	b508      	push	{r3, lr}
	bsd_shutdown();
   3f386:	f7f2 fb2b 	bl	319e0 <bsd_shutdown>

	return 0;
}
   3f38a:	2000      	movs	r0, #0
   3f38c:	bd08      	pop	{r3, pc}

0003f38e <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   3f38e:	4668      	mov	r0, sp
   3f390:	f020 0107 	bic.w	r1, r0, #7
   3f394:	468d      	mov	sp, r1
   3f396:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   3f398:	f7f2 fcee 	bl	31d78 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   3f39c:	f7e5 f842 	bl	24424 <_arch_isr_direct_pm>
   3f3a0:	f7e4 ff2a 	bl	241f8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   3f3a4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3f3a8:	4685      	mov	sp, r0
   3f3aa:	4770      	bx	lr

0003f3ac <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   3f3ac:	4668      	mov	r0, sp
   3f3ae:	f020 0107 	bic.w	r1, r0, #7
   3f3b2:	468d      	mov	sp, r1
   3f3b4:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   3f3b6:	f7f3 f8e3 	bl	32580 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   3f3ba:	f7e5 f833 	bl	24424 <_arch_isr_direct_pm>
   3f3be:	f7e4 ff1b 	bl	241f8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   3f3c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3f3c6:	4685      	mov	sp, r0
   3f3c8:	4770      	bx	lr

0003f3ca <trace_task_create>:
{
   3f3ca:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   3f3cc:	201d      	movs	r0, #29
   3f3ce:	2200      	movs	r2, #0
   3f3d0:	2106      	movs	r1, #6
   3f3d2:	f7e4 fff5 	bl	243c0 <z_arm_irq_priority_set>
}
   3f3d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   3f3da:	201d      	movs	r0, #29
   3f3dc:	f7e4 bfe0 	b.w	243a0 <arch_irq_enable>

0003f3e0 <read_task_create>:
{
   3f3e0:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   3f3e2:	201c      	movs	r0, #28
   3f3e4:	2200      	movs	r2, #0
   3f3e6:	2106      	movs	r1, #6
   3f3e8:	f7e4 ffea 	bl	243c0 <z_arm_irq_priority_set>
}
   3f3ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   3f3f0:	201c      	movs	r0, #28
   3f3f2:	f7e4 bfd5 	b.w	243a0 <arch_irq_enable>

0003f3f6 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   3f3f6:	2000      	movs	r0, #0
   3f3f8:	4770      	bx	lr

0003f3fa <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   3f3fa:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   3f3fe:	bf18      	it	ne
   3f400:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   3f402:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   3f404:	bf48      	it	mi
   3f406:	f043 0308 	orrmi.w	r3, r3, #8
}
   3f40a:	4618      	mov	r0, r3
   3f40c:	4770      	bx	lr

0003f40e <z_to_nrf_family>:
	switch (z_family) {
   3f40e:	2803      	cmp	r0, #3
   3f410:	d00f      	beq.n	3f432 <z_to_nrf_family+0x24>
   3f412:	d808      	bhi.n	3f426 <z_to_nrf_family+0x18>
   3f414:	2801      	cmp	r0, #1
   3f416:	d00e      	beq.n	3f436 <z_to_nrf_family+0x28>
   3f418:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   3f41a:	bf08      	it	eq
   3f41c:	200a      	moveq	r0, #10
   3f41e:	bf18      	it	ne
   3f420:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   3f424:	4770      	bx	lr
	switch (z_family) {
   3f426:	2866      	cmp	r0, #102	; 0x66
   3f428:	d006      	beq.n	3f438 <z_to_nrf_family+0x2a>
   3f42a:	2867      	cmp	r0, #103	; 0x67
		return -EAFNOSUPPORT;
   3f42c:	bf08      	it	eq
   3f42e:	2001      	moveq	r0, #1
   3f430:	e7f5      	b.n	3f41e <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   3f432:	2005      	movs	r0, #5
   3f434:	4770      	bx	lr
		return NRF_AF_INET;
   3f436:	2002      	movs	r0, #2
}
   3f438:	4770      	bx	lr

0003f43a <z_to_nrf_protocol>:
	switch (proto) {
   3f43a:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   3f43e:	d01d      	beq.n	3f47c <z_to_nrf_protocol+0x42>
   3f440:	dc08      	bgt.n	3f454 <z_to_nrf_protocol+0x1a>
   3f442:	2806      	cmp	r0, #6
   3f444:	d01d      	beq.n	3f482 <z_to_nrf_protocol+0x48>
   3f446:	2811      	cmp	r0, #17
   3f448:	d01d      	beq.n	3f486 <z_to_nrf_protocol+0x4c>
   3f44a:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   3f44c:	bf18      	it	ne
   3f44e:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   3f452:	4770      	bx	lr
	switch (proto) {
   3f454:	f240 2301 	movw	r3, #513	; 0x201
   3f458:	4298      	cmp	r0, r3
   3f45a:	d015      	beq.n	3f488 <z_to_nrf_protocol+0x4e>
   3f45c:	dc06      	bgt.n	3f46c <z_to_nrf_protocol+0x32>
   3f45e:	f240 1311 	movw	r3, #273	; 0x111
   3f462:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   3f464:	bf08      	it	eq
   3f466:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   3f46a:	e7ef      	b.n	3f44c <z_to_nrf_protocol+0x12>
	switch (proto) {
   3f46c:	f240 2302 	movw	r3, #514	; 0x202
   3f470:	4298      	cmp	r0, r3
   3f472:	d009      	beq.n	3f488 <z_to_nrf_protocol+0x4e>
   3f474:	f240 2303 	movw	r3, #515	; 0x203
   3f478:	4298      	cmp	r0, r3
   3f47a:	e7e7      	b.n	3f44c <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   3f47c:	f44f 7082 	mov.w	r0, #260	; 0x104
   3f480:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   3f482:	2001      	movs	r0, #1
   3f484:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   3f486:	2002      	movs	r0, #2
}
   3f488:	4770      	bx	lr

0003f48a <nrf91_bsdlib_socket_offload_init>:
}
   3f48a:	2000      	movs	r0, #0
   3f48c:	4770      	bx	lr

0003f48e <nrf91_socket_offload_freeaddrinfo>:
{
   3f48e:	b538      	push	{r3, r4, r5, lr}
   3f490:	4604      	mov	r4, r0
	while (next != NULL) {
   3f492:	b904      	cbnz	r4, 3f496 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   3f494:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   3f496:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   3f498:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   3f49a:	f000 ff1c 	bl	402d6 <k_free>
		k_free(this);
   3f49e:	4620      	mov	r0, r4
   3f4a0:	f000 ff19 	bl	402d6 <k_free>
		next = next->ai_next;
   3f4a4:	462c      	mov	r4, r5
   3f4a6:	e7f4      	b.n	3f492 <nrf91_socket_offload_freeaddrinfo+0x4>

0003f4a8 <z_to_nrf_addrinfo_hints>:
{
   3f4a8:	b538      	push	{r3, r4, r5, lr}
   3f4aa:	460c      	mov	r4, r1
   3f4ac:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   3f4ae:	221c      	movs	r2, #28
   3f4b0:	2100      	movs	r1, #0
   3f4b2:	1d20      	adds	r0, r4, #4
   3f4b4:	f001 f8d2 	bl	4065c <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   3f4b8:	2300      	movs	r3, #0
   3f4ba:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   3f4bc:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   3f4be:	2b03      	cmp	r3, #3
   3f4c0:	d003      	beq.n	3f4ca <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   3f4c2:	2b04      	cmp	r3, #4
   3f4c4:	bf08      	it	eq
   3f4c6:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   3f4ca:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   3f4cc:	88a8      	ldrh	r0, [r5, #4]
   3f4ce:	f7ff ff9e 	bl	3f40e <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   3f4d2:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   3f4d6:	d00b      	beq.n	3f4f0 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   3f4d8:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   3f4da:	68e8      	ldr	r0, [r5, #12]
   3f4dc:	f7ff ffad 	bl	3f43a <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   3f4e0:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   3f4e4:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   3f4e6:	d003      	beq.n	3f4f0 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   3f4e8:	69a8      	ldr	r0, [r5, #24]
   3f4ea:	b108      	cbz	r0, 3f4f0 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   3f4ec:	61a0      	str	r0, [r4, #24]
	return 0;
   3f4ee:	2000      	movs	r0, #0
}
   3f4f0:	bd38      	pop	{r3, r4, r5, pc}

0003f4f2 <nrf91_socket_offload_send>:
{
   3f4f2:	b570      	push	{r4, r5, r6, lr}
   3f4f4:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   3f4f6:	4618      	mov	r0, r3
{
   3f4f8:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   3f4fa:	f7ff ff7e 	bl	3f3fa <z_to_nrf_flags>
   3f4fe:	462a      	mov	r2, r5
   3f500:	4603      	mov	r3, r0
   3f502:	4620      	mov	r0, r4
}
   3f504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   3f508:	f7f4 be52 	b.w	341b0 <nrf_send>

0003f50c <nrf91_socket_offload_recv>:
{
   3f50c:	b570      	push	{r4, r5, r6, lr}
   3f50e:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   3f510:	4618      	mov	r0, r3
{
   3f512:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   3f514:	f7ff ff71 	bl	3f3fa <z_to_nrf_flags>
   3f518:	462a      	mov	r2, r5
   3f51a:	4603      	mov	r3, r0
   3f51c:	4620      	mov	r0, r4
}
   3f51e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   3f522:	f7f4 be91 	b.w	34248 <nrf_recv>

0003f526 <nrf91_socket_offload_getsockopt>:
{
   3f526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f52a:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   3f52c:	2300      	movs	r3, #0
{
   3f52e:	b086      	sub	sp, #24
   3f530:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   3f534:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3f538:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   3f53c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   3f540:	4607      	mov	r7, r0
   3f542:	460c      	mov	r4, r1
   3f544:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3f546:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   3f548:	d002      	beq.n	3f550 <nrf91_socket_offload_getsockopt+0x2a>
   3f54a:	dc2b      	bgt.n	3f5a4 <nrf91_socket_offload_getsockopt+0x7e>
   3f54c:	2901      	cmp	r1, #1
   3f54e:	d13d      	bne.n	3f5cc <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3f550:	aa02      	add	r2, sp, #8
   3f552:	4631      	mov	r1, r6
   3f554:	4620      	mov	r0, r4
   3f556:	f7e7 fead 	bl	272b4 <z_to_nrf_optname>
   3f55a:	2800      	cmp	r0, #0
   3f55c:	db36      	blt.n	3f5cc <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   3f55e:	2c01      	cmp	r4, #1
   3f560:	d128      	bne.n	3f5b4 <nrf91_socket_offload_getsockopt+0x8e>
   3f562:	2e14      	cmp	r6, #20
   3f564:	d126      	bne.n	3f5b4 <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   3f566:	2308      	movs	r3, #8
   3f568:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   3f56a:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3f56c:	aa03      	add	r2, sp, #12
   3f56e:	9200      	str	r2, [sp, #0]
   3f570:	4638      	mov	r0, r7
   3f572:	9a02      	ldr	r2, [sp, #8]
   3f574:	4621      	mov	r1, r4
   3f576:	f7f4 fefd 	bl	34374 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   3f57a:	4607      	mov	r7, r0
   3f57c:	b970      	cbnz	r0, 3f59c <nrf91_socket_offload_getsockopt+0x76>
   3f57e:	b16d      	cbz	r5, 3f59c <nrf91_socket_offload_getsockopt+0x76>
		*optlen = nrf_optlen;
   3f580:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   3f582:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   3f584:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   3f588:	d108      	bne.n	3f59c <nrf91_socket_offload_getsockopt+0x76>
			if (optname == SO_ERROR) {
   3f58a:	2e04      	cmp	r6, #4
   3f58c:	d114      	bne.n	3f5b8 <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   3f58e:	6828      	ldr	r0, [r5, #0]
   3f590:	f7e7 fd62 	bl	27058 <bsd_os_errno_set>
				*(int *)optval = errno;
   3f594:	f7fe fed1 	bl	3e33a <__errno>
   3f598:	6803      	ldr	r3, [r0, #0]
   3f59a:	602b      	str	r3, [r5, #0]
}
   3f59c:	4638      	mov	r0, r7
   3f59e:	b006      	add	sp, #24
   3f5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   3f5a4:	f240 2302 	movw	r3, #514	; 0x202
   3f5a8:	4299      	cmp	r1, r3
   3f5aa:	d0d1      	beq.n	3f550 <nrf91_socket_offload_getsockopt+0x2a>
   3f5ac:	f240 2303 	movw	r3, #515	; 0x203
   3f5b0:	4299      	cmp	r1, r3
   3f5b2:	e7cc      	b.n	3f54e <nrf91_socket_offload_getsockopt+0x28>
   3f5b4:	462b      	mov	r3, r5
   3f5b6:	e7d9      	b.n	3f56c <nrf91_socket_offload_getsockopt+0x46>
			} else if (optname == SO_RCVTIMEO) {
   3f5b8:	2e14      	cmp	r6, #20
   3f5ba:	d1ef      	bne.n	3f59c <nrf91_socket_offload_getsockopt+0x76>
				((struct timeval *)optval)->tv_sec =
   3f5bc:	9b04      	ldr	r3, [sp, #16]
   3f5be:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   3f5c0:	9b05      	ldr	r3, [sp, #20]
   3f5c2:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   3f5c4:	2308      	movs	r3, #8
   3f5c6:	f8c8 3000 	str.w	r3, [r8]
   3f5ca:	e7e7      	b.n	3f59c <nrf91_socket_offload_getsockopt+0x76>
	errno = ENOPROTOOPT;
   3f5cc:	f7fe feb5 	bl	3e33a <__errno>
   3f5d0:	236d      	movs	r3, #109	; 0x6d
	return retval;
   3f5d2:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   3f5d6:	6003      	str	r3, [r0, #0]
	return retval;
   3f5d8:	e7e0      	b.n	3f59c <nrf91_socket_offload_getsockopt+0x76>

0003f5da <nrf91_socket_offload_poll>:
{
   3f5da:	b5f0      	push	{r4, r5, r6, r7, lr}
   3f5dc:	b091      	sub	sp, #68	; 0x44
   3f5de:	4605      	mov	r5, r0
   3f5e0:	460c      	mov	r4, r1
   3f5e2:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   3f5e4:	2100      	movs	r1, #0
   3f5e6:	2240      	movs	r2, #64	; 0x40
   3f5e8:	4668      	mov	r0, sp
   3f5ea:	f001 f837 	bl	4065c <memset>
	for (int i = 0; i < nfds; i++) {
   3f5ee:	466a      	mov	r2, sp
   3f5f0:	2100      	movs	r1, #0
		if (fds[i].events & POLLIN) {
   3f5f2:	1d2f      	adds	r7, r5, #4
	for (int i = 0; i < nfds; i++) {
   3f5f4:	42a1      	cmp	r1, r4
   3f5f6:	db0c      	blt.n	3f612 <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   3f5f8:	4632      	mov	r2, r6
   3f5fa:	4621      	mov	r1, r4
   3f5fc:	4668      	mov	r0, sp
   3f5fe:	f7f4 fed9 	bl	343b4 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   3f602:	2200      	movs	r2, #0
   3f604:	462b      	mov	r3, r5
		fds[i].revents = 0;
   3f606:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   3f608:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   3f60a:	42a2      	cmp	r2, r4
   3f60c:	db1a      	blt.n	3f644 <nrf91_socket_offload_poll+0x6a>
}
   3f60e:	b011      	add	sp, #68	; 0x44
   3f610:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   3f612:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   3f616:	f837 0031 	ldrh.w	r0, [r7, r1, lsl #3]
		tmp[i].handle = fds[i].fd;
   3f61a:	6013      	str	r3, [r2, #0]
		if (fds[i].events & POLLIN) {
   3f61c:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   3f61e:	bf48      	it	mi
   3f620:	8893      	ldrhmi	r3, [r2, #4]
	for (int i = 0; i < nfds; i++) {
   3f622:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   3f626:	bf44      	itt	mi
   3f628:	f043 0301 	orrmi.w	r3, r3, #1
   3f62c:	8093      	strhmi	r3, [r2, #4]
		if (fds[i].events & POLLOUT) {
   3f62e:	0743      	lsls	r3, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   3f630:	bf48      	it	mi
   3f632:	8893      	ldrhmi	r3, [r2, #4]
   3f634:	f102 0208 	add.w	r2, r2, #8
   3f638:	bf44      	itt	mi
   3f63a:	f043 0302 	orrmi.w	r3, r3, #2
   3f63e:	f822 3c04 	strhmi.w	r3, [r2, #-4]
   3f642:	e7d7      	b.n	3f5f4 <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   3f644:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   3f648:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   3f64a:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   3f64c:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   3f64e:	bf48      	it	mi
   3f650:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   3f652:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   3f654:	bf48      	it	mi
   3f656:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   3f658:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   3f65c:	bf44      	itt	mi
   3f65e:	f045 0504 	orrmi.w	r5, r5, #4
   3f662:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   3f664:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   3f666:	bf48      	it	mi
   3f668:	88dd      	ldrhmi	r5, [r3, #6]
   3f66a:	f103 0308 	add.w	r3, r3, #8
   3f66e:	bf44      	itt	mi
   3f670:	f045 0508 	orrmi.w	r5, r5, #8
   3f674:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   3f678:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   3f67a:	bf42      	ittt	mi
   3f67c:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   3f680:	f045 0520 	orrmi.w	r5, r5, #32
   3f684:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   3f688:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   3f68a:	bf42      	ittt	mi
   3f68c:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   3f690:	f041 0110 	orrmi.w	r1, r1, #16
   3f694:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   3f698:	e7b7      	b.n	3f60a <nrf91_socket_offload_poll+0x30>

0003f69a <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   3f69a:	f7f4 be17 	b.w	342cc <nrf_listen>

0003f69e <nrf91_socket_offload_close>:
	return nrf_close(sd);
   3f69e:	f7f4 bd5d 	b.w	3415c <nrf_close>

0003f6a2 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   3f6a2:	2903      	cmp	r1, #3
{
   3f6a4:	b508      	push	{r3, lr}
	switch (cmd) {
   3f6a6:	d00b      	beq.n	3f6c0 <nrf91_socket_offload_fcntl+0x1e>
   3f6a8:	2904      	cmp	r1, #4
   3f6aa:	d111      	bne.n	3f6d0 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   3f6ac:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   3f6ae:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   3f6b2:	d10d      	bne.n	3f6d0 <nrf91_socket_offload_fcntl+0x2e>
}
   3f6b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   3f6b8:	1392      	asrs	r2, r2, #14
   3f6ba:	2101      	movs	r1, #1
   3f6bc:	f7f4 be7c 	b.w	343b8 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   3f6c0:	2200      	movs	r2, #0
   3f6c2:	2102      	movs	r1, #2
   3f6c4:	f7f4 fe78 	bl	343b8 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   3f6c8:	0380      	lsls	r0, r0, #14
   3f6ca:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   3f6ce:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   3f6d0:	f7fe fe33 	bl	3e33a <__errno>
   3f6d4:	2316      	movs	r3, #22
   3f6d6:	6003      	str	r3, [r0, #0]
	return retval;
   3f6d8:	f04f 30ff 	mov.w	r0, #4294967295
   3f6dc:	e7f7      	b.n	3f6ce <nrf91_socket_offload_fcntl+0x2c>

0003f6de <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   3f6de:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   3f6e0:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   3f6e2:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   3f6e4:	4603      	mov	r3, r0
{
   3f6e6:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   3f6e8:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3f6ec:	f101 0210 	add.w	r2, r1, #16
   3f6f0:	f102 0410 	add.w	r4, r2, #16
   3f6f4:	f852 5b04 	ldr.w	r5, [r2], #4
   3f6f8:	42a2      	cmp	r2, r4
   3f6fa:	f843 5b04 	str.w	r5, [r3], #4
   3f6fe:	d1f9      	bne.n	3f6f4 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   3f700:	6a0b      	ldr	r3, [r1, #32]
   3f702:	7503      	strb	r3, [r0, #20]
}
   3f704:	bd30      	pop	{r4, r5, pc}

0003f706 <nrf91_socket_offload_getaddrinfo>:
{
   3f706:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3f70a:	4614      	mov	r4, r2
   3f70c:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   3f70e:	2100      	movs	r1, #0
{
   3f710:	b093      	sub	sp, #76	; 0x4c
   3f712:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   3f714:	2220      	movs	r2, #32
   3f716:	a802      	add	r0, sp, #8
{
   3f718:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   3f71a:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   3f71c:	f000 ff9e 	bl	4065c <memset>
	if (hints != NULL) {
   3f720:	b194      	cbz	r4, 3f748 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   3f722:	a902      	add	r1, sp, #8
   3f724:	4620      	mov	r0, r4
   3f726:	f7ff febf 	bl	3f4a8 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   3f72a:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   3f72e:	f000 80bf 	beq.w	3f8b0 <nrf91_socket_offload_getaddrinfo+0x1aa>
		} else if (error == -EAFNOSUPPORT) {
   3f732:	306a      	adds	r0, #106	; 0x6a
   3f734:	f000 80bf 	beq.w	3f8b6 <nrf91_socket_offload_getaddrinfo+0x1b0>
		if (hints->ai_next != NULL) {
   3f738:	69e0      	ldr	r0, [r4, #28]
   3f73a:	b120      	cbz	r0, 3f746 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   3f73c:	ac0a      	add	r4, sp, #40	; 0x28
   3f73e:	4621      	mov	r1, r4
   3f740:	f7ff feb2 	bl	3f4a8 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   3f744:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   3f746:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   3f748:	4628      	mov	r0, r5
   3f74a:	ab01      	add	r3, sp, #4
   3f74c:	4622      	mov	r2, r4
   3f74e:	4631      	mov	r1, r6
   3f750:	f7f4 fe2c 	bl	343ac <nrf_getaddrinfo>
	if (retval != 0) {
   3f754:	4605      	mov	r5, r0
   3f756:	b1b0      	cbz	r0, 3f786 <nrf91_socket_offload_getaddrinfo+0x80>
	switch (nrf_error) {
   3f758:	2823      	cmp	r0, #35	; 0x23
   3f75a:	f000 80af 	beq.w	3f8bc <nrf91_socket_offload_getaddrinfo+0x1b6>
   3f75e:	dc0a      	bgt.n	3f776 <nrf91_socket_offload_getaddrinfo+0x70>
		return DNS_EAI_SYSTEM;
   3f760:	280c      	cmp	r0, #12
   3f762:	bf08      	it	eq
   3f764:	f06f 0509 	mvneq.w	r5, #9
   3f768:	bf18      	it	ne
   3f76a:	f06f 050a 	mvnne.w	r5, #10
}
   3f76e:	4628      	mov	r0, r5
   3f770:	b013      	add	sp, #76	; 0x4c
   3f772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   3f776:	282f      	cmp	r0, #47	; 0x2f
   3f778:	f000 80a3 	beq.w	3f8c2 <nrf91_socket_offload_getaddrinfo+0x1bc>
		return DNS_EAI_SYSTEM;
   3f77c:	2873      	cmp	r0, #115	; 0x73
   3f77e:	bf08      	it	eq
   3f780:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   3f784:	e7f0      	b.n	3f768 <nrf91_socket_offload_getaddrinfo+0x62>
	struct addrinfo *latest_z_res = NULL;
   3f786:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   3f788:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   3f78a:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   3f78c:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   3f78e:	b91e      	cbnz	r6, 3f798 <nrf91_socket_offload_getaddrinfo+0x92>
	nrf_freeaddrinfo(nrf_res);
   3f790:	9801      	ldr	r0, [sp, #4]
   3f792:	f7f4 fe0d 	bl	343b0 <nrf_freeaddrinfo>
	return retval;
   3f796:	e7ea      	b.n	3f76e <nrf91_socket_offload_getaddrinfo+0x68>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   3f798:	2020      	movs	r0, #32
   3f79a:	f7f8 ff8d 	bl	386b8 <k_malloc>
		if (next_z_res == NULL) {
   3f79e:	4604      	mov	r4, r0
   3f7a0:	2800      	cmp	r0, #0
   3f7a2:	d07a      	beq.n	3f89a <nrf91_socket_offload_getaddrinfo+0x194>
	family = nrf_to_z_family(nrf_in->ai_family);
   3f7a4:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   3f7a6:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   3f7a8:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   3f7aa:	e9c0 9906 	strd	r9, r9, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   3f7ae:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   3f7b2:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   3f7b4:	d033      	beq.n	3f81e <nrf91_socket_offload_getaddrinfo+0x118>
   3f7b6:	dc09      	bgt.n	3f7cc <nrf91_socket_offload_getaddrinfo+0xc6>
   3f7b8:	2a01      	cmp	r2, #1
   3f7ba:	d032      	beq.n	3f822 <nrf91_socket_offload_getaddrinfo+0x11c>
   3f7bc:	2a02      	cmp	r2, #2
   3f7be:	d032      	beq.n	3f826 <nrf91_socket_offload_getaddrinfo+0x120>
			k_free(next_z_res);
   3f7c0:	4620      	mov	r0, r4
   3f7c2:	f000 fd88 	bl	402d6 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   3f7c6:	f06f 0508 	mvn.w	r5, #8
   3f7ca:	e068      	b.n	3f89e <nrf91_socket_offload_getaddrinfo+0x198>
	switch (nrf_family) {
   3f7cc:	2a0a      	cmp	r2, #10
   3f7ce:	d02c      	beq.n	3f82a <nrf91_socket_offload_getaddrinfo+0x124>
   3f7d0:	2a66      	cmp	r2, #102	; 0x66
   3f7d2:	d1f5      	bne.n	3f7c0 <nrf91_socket_offload_getaddrinfo+0xba>
		return AF_LTE;
   3f7d4:	4613      	mov	r3, r2
	z_out->ai_family = family;
   3f7d6:	6063      	str	r3, [r4, #4]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   3f7d8:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   3f7da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   3f7de:	d045      	beq.n	3f86c <nrf91_socket_offload_getaddrinfo+0x166>
   3f7e0:	dc25      	bgt.n	3f82e <nrf91_socket_offload_getaddrinfo+0x128>
   3f7e2:	2b01      	cmp	r3, #1
   3f7e4:	d047      	beq.n	3f876 <nrf91_socket_offload_getaddrinfo+0x170>
   3f7e6:	2b02      	cmp	r3, #2
   3f7e8:	d043      	beq.n	3f872 <nrf91_socket_offload_getaddrinfo+0x16c>
   3f7ea:	bb43      	cbnz	r3, 3f83e <nrf91_socket_offload_getaddrinfo+0x138>
	if (nrf_in->ai_family == NRF_AF_INET) {
   3f7ec:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   3f7ee:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   3f7f0:	d143      	bne.n	3f87a <nrf91_socket_offload_getaddrinfo+0x174>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   3f7f2:	2008      	movs	r0, #8
   3f7f4:	f7f8 ff60 	bl	386b8 <k_malloc>
   3f7f8:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   3f7fa:	2800      	cmp	r0, #0
   3f7fc:	d04a      	beq.n	3f894 <nrf91_socket_offload_getaddrinfo+0x18e>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   3f7fe:	2308      	movs	r3, #8
   3f800:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   3f802:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   3f804:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3f806:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   3f808:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   3f80a:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3f80c:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   3f80e:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   3f810:	f1b8 0f00 	cmp.w	r8, #0
   3f814:	d149      	bne.n	3f8aa <nrf91_socket_offload_getaddrinfo+0x1a4>
			*res = next_z_res;
   3f816:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   3f818:	69f6      	ldr	r6, [r6, #28]
   3f81a:	46a0      	mov	r8, r4
   3f81c:	e7b7      	b.n	3f78e <nrf91_socket_offload_getaddrinfo+0x88>
		return AF_PACKET;
   3f81e:	2303      	movs	r3, #3
   3f820:	e7d9      	b.n	3f7d6 <nrf91_socket_offload_getaddrinfo+0xd0>
		return AF_LOCAL;
   3f822:	2367      	movs	r3, #103	; 0x67
   3f824:	e7d7      	b.n	3f7d6 <nrf91_socket_offload_getaddrinfo+0xd0>
		return AF_INET;
   3f826:	2301      	movs	r3, #1
   3f828:	e7d5      	b.n	3f7d6 <nrf91_socket_offload_getaddrinfo+0xd0>
		return AF_INET6;
   3f82a:	2302      	movs	r3, #2
   3f82c:	e7d3      	b.n	3f7d6 <nrf91_socket_offload_getaddrinfo+0xd0>
	switch (proto) {
   3f82e:	f240 2101 	movw	r1, #513	; 0x201
   3f832:	428b      	cmp	r3, r1
   3f834:	d0da      	beq.n	3f7ec <nrf91_socket_offload_getaddrinfo+0xe6>
   3f836:	dc0d      	bgt.n	3f854 <nrf91_socket_offload_getaddrinfo+0x14e>
   3f838:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   3f83c:	d013      	beq.n	3f866 <nrf91_socket_offload_getaddrinfo+0x160>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   3f83e:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   3f842:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   3f844:	2300      	movs	r3, #0
   3f846:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   3f848:	4620      	mov	r0, r4
   3f84a:	f000 fd44 	bl	402d6 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   3f84e:	f06f 0506 	mvn.w	r5, #6
   3f852:	e024      	b.n	3f89e <nrf91_socket_offload_getaddrinfo+0x198>
	switch (proto) {
   3f854:	f240 2102 	movw	r1, #514	; 0x202
   3f858:	428b      	cmp	r3, r1
   3f85a:	d0c7      	beq.n	3f7ec <nrf91_socket_offload_getaddrinfo+0xe6>
   3f85c:	f240 2103 	movw	r1, #515	; 0x203
   3f860:	428b      	cmp	r3, r1
   3f862:	d0c3      	beq.n	3f7ec <nrf91_socket_offload_getaddrinfo+0xe6>
   3f864:	e7eb      	b.n	3f83e <nrf91_socket_offload_getaddrinfo+0x138>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   3f866:	f240 1311 	movw	r3, #273	; 0x111
   3f86a:	e7bf      	b.n	3f7ec <nrf91_socket_offload_getaddrinfo+0xe6>
   3f86c:	f44f 7381 	mov.w	r3, #258	; 0x102
   3f870:	e7bc      	b.n	3f7ec <nrf91_socket_offload_getaddrinfo+0xe6>
   3f872:	2311      	movs	r3, #17
   3f874:	e7ba      	b.n	3f7ec <nrf91_socket_offload_getaddrinfo+0xe6>
   3f876:	2306      	movs	r3, #6
   3f878:	e7b8      	b.n	3f7ec <nrf91_socket_offload_getaddrinfo+0xe6>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   3f87a:	2a0a      	cmp	r2, #10
   3f87c:	d1e4      	bne.n	3f848 <nrf91_socket_offload_getaddrinfo+0x142>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   3f87e:	2018      	movs	r0, #24
   3f880:	f7f8 ff1a 	bl	386b8 <k_malloc>
   3f884:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   3f886:	b128      	cbz	r0, 3f894 <nrf91_socket_offload_getaddrinfo+0x18e>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   3f888:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   3f88a:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   3f88c:	6123      	str	r3, [r4, #16]
		nrf_to_z_ipv6(z_out->ai_addr,
   3f88e:	f7ff ff26 	bl	3f6de <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   3f892:	e7bd      	b.n	3f810 <nrf91_socket_offload_getaddrinfo+0x10a>
			k_free(next_z_res);
   3f894:	4620      	mov	r0, r4
   3f896:	f000 fd1e 	bl	402d6 <k_free>
			retval = DNS_EAI_MEMORY;
   3f89a:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   3f89e:	6838      	ldr	r0, [r7, #0]
   3f8a0:	f7ff fdf5 	bl	3f48e <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   3f8a4:	2300      	movs	r3, #0
   3f8a6:	603b      	str	r3, [r7, #0]
   3f8a8:	e772      	b.n	3f790 <nrf91_socket_offload_getaddrinfo+0x8a>
			latest_z_res->ai_next = next_z_res;
   3f8aa:	f8c8 401c 	str.w	r4, [r8, #28]
   3f8ae:	e7b3      	b.n	3f818 <nrf91_socket_offload_getaddrinfo+0x112>
			return DNS_EAI_SOCKTYPE;
   3f8b0:	f06f 0506 	mvn.w	r5, #6
   3f8b4:	e75b      	b.n	3f76e <nrf91_socket_offload_getaddrinfo+0x68>
			return DNS_EAI_ADDRFAMILY;
   3f8b6:	f06f 0508 	mvn.w	r5, #8
   3f8ba:	e758      	b.n	3f76e <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_AGAIN;
   3f8bc:	f06f 0502 	mvn.w	r5, #2
   3f8c0:	e755      	b.n	3f76e <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_NONAME;
   3f8c2:	f06f 0501 	mvn.w	r5, #1
   3f8c6:	e752      	b.n	3f76e <nrf91_socket_offload_getaddrinfo+0x68>

0003f8c8 <z_to_nrf_ipv6>:
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   3f8c8:	2224      	movs	r2, #36	; 0x24
{
   3f8ca:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   3f8cc:	700a      	strb	r2, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   3f8ce:	8842      	ldrh	r2, [r0, #2]
{
   3f8d0:	4604      	mov	r4, r0
	nrf_out->sin6_port = ptr->sin6_port;
   3f8d2:	810a      	strh	r2, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   3f8d4:	220a      	movs	r2, #10
{
   3f8d6:	460b      	mov	r3, r1
	nrf_out->sin6_family = NRF_AF_INET6;
   3f8d8:	604a      	str	r2, [r1, #4]
   3f8da:	f101 0610 	add.w	r6, r1, #16
   3f8de:	1d02      	adds	r2, r0, #4
   3f8e0:	f100 0714 	add.w	r7, r0, #20
   3f8e4:	4635      	mov	r5, r6
   3f8e6:	6810      	ldr	r0, [r2, #0]
   3f8e8:	6851      	ldr	r1, [r2, #4]
   3f8ea:	3208      	adds	r2, #8
   3f8ec:	c503      	stmia	r5!, {r0, r1}
   3f8ee:	42ba      	cmp	r2, r7
   3f8f0:	462e      	mov	r6, r5
   3f8f2:	d1f7      	bne.n	3f8e4 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   3f8f4:	7d22      	ldrb	r2, [r4, #20]
   3f8f6:	621a      	str	r2, [r3, #32]
}
   3f8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003f8fa <nrf91_socket_offload_sendto>:
{
   3f8fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3f8fe:	b08d      	sub	sp, #52	; 0x34
   3f900:	9c14      	ldr	r4, [sp, #80]	; 0x50
   3f902:	4605      	mov	r5, r0
   3f904:	460e      	mov	r6, r1
   3f906:	4617      	mov	r7, r2
   3f908:	4698      	mov	r8, r3
	if (to == NULL) {
   3f90a:	b96c      	cbnz	r4, 3f928 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   3f90c:	4618      	mov	r0, r3
   3f90e:	f7ff fd74 	bl	3f3fa <z_to_nrf_flags>
   3f912:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   3f916:	4603      	mov	r3, r0
   3f918:	463a      	mov	r2, r7
   3f91a:	4631      	mov	r1, r6
   3f91c:	4628      	mov	r0, r5
   3f91e:	f7f4 fc2b 	bl	34178 <nrf_sendto>
}
   3f922:	b00d      	add	sp, #52	; 0x34
   3f924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   3f928:	8823      	ldrh	r3, [r4, #0]
   3f92a:	2b01      	cmp	r3, #1
   3f92c:	d110      	bne.n	3f950 <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   3f92e:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3f930:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   3f932:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   3f936:	2302      	movs	r3, #2
   3f938:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3f93a:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   3f93c:	4640      	mov	r0, r8
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3f93e:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3f940:	f88d 100c 	strb.w	r1, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   3f944:	f7ff fd59 	bl	3f3fa <z_to_nrf_flags>
   3f948:	ab03      	add	r3, sp, #12
   3f94a:	9101      	str	r1, [sp, #4]
   3f94c:	9300      	str	r3, [sp, #0]
   3f94e:	e7e2      	b.n	3f916 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   3f950:	2b02      	cmp	r3, #2
   3f952:	d10c      	bne.n	3f96e <nrf91_socket_offload_sendto+0x74>
		z_to_nrf_ipv6(to, &ipv6);
   3f954:	f10d 090c 	add.w	r9, sp, #12
   3f958:	4649      	mov	r1, r9
   3f95a:	4620      	mov	r0, r4
   3f95c:	f7ff ffb4 	bl	3f8c8 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   3f960:	4640      	mov	r0, r8
   3f962:	f7ff fd4a 	bl	3f3fa <z_to_nrf_flags>
   3f966:	2324      	movs	r3, #36	; 0x24
   3f968:	e9cd 9300 	strd	r9, r3, [sp]
   3f96c:	e7d3      	b.n	3f916 <nrf91_socket_offload_sendto+0x1c>
	errno = ENOTSUP;
   3f96e:	f7fe fce4 	bl	3e33a <__errno>
   3f972:	2386      	movs	r3, #134	; 0x86
   3f974:	6003      	str	r3, [r0, #0]
	return retval;
   3f976:	f04f 30ff 	mov.w	r0, #4294967295
   3f97a:	e7d2      	b.n	3f922 <nrf91_socket_offload_sendto+0x28>

0003f97c <nrf91_socket_offload_recvfrom>:
{
   3f97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f980:	4605      	mov	r5, r0
   3f982:	b08c      	sub	sp, #48	; 0x30
   3f984:	4618      	mov	r0, r3
   3f986:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   3f98a:	4690      	mov	r8, r2
	if (from == NULL) {
   3f98c:	f7ff fd35 	bl	3f3fa <z_to_nrf_flags>
   3f990:	4603      	mov	r3, r0
   3f992:	b954      	cbnz	r4, 3f9aa <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   3f994:	4628      	mov	r0, r5
   3f996:	e9cd 4400 	strd	r4, r4, [sp]
   3f99a:	4642      	mov	r2, r8
   3f99c:	f7f4 fc38 	bl	34210 <nrf_recvfrom>
   3f9a0:	4605      	mov	r5, r0
}
   3f9a2:	4628      	mov	r0, r5
   3f9a4:	b00c      	add	sp, #48	; 0x30
   3f9a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   3f9aa:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   3f9ac:	af03      	add	r7, sp, #12
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   3f9ae:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   3f9b0:	aa02      	add	r2, sp, #8
   3f9b2:	9201      	str	r2, [sp, #4]
   3f9b4:	4628      	mov	r0, r5
   3f9b6:	9700      	str	r7, [sp, #0]
   3f9b8:	4642      	mov	r2, r8
   3f9ba:	f7f4 fc29 	bl	34210 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   3f9be:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   3f9c0:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   3f9c2:	2b02      	cmp	r3, #2
   3f9c4:	d109      	bne.n	3f9da <nrf91_socket_offload_recvfrom+0x5e>
	ptr->sin_port = nrf_in->sin_port;
   3f9c6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   3f9ca:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   3f9cc:	2301      	movs	r3, #1
   3f9ce:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3f9d0:	9b06      	ldr	r3, [sp, #24]
   3f9d2:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   3f9d4:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   3f9d6:	6033      	str	r3, [r6, #0]
	return retval;
   3f9d8:	e7e3      	b.n	3f9a2 <nrf91_socket_offload_recvfrom+0x26>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   3f9da:	2b0a      	cmp	r3, #10
   3f9dc:	d1e1      	bne.n	3f9a2 <nrf91_socket_offload_recvfrom+0x26>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   3f9de:	4639      	mov	r1, r7
   3f9e0:	4620      	mov	r0, r4
   3f9e2:	f7ff fe7c 	bl	3f6de <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   3f9e6:	2318      	movs	r3, #24
   3f9e8:	e7f5      	b.n	3f9d6 <nrf91_socket_offload_recvfrom+0x5a>

0003f9ea <nrf91_socket_offload_connect>:
{
   3f9ea:	b530      	push	{r4, r5, lr}
	if (addr->sa_family == AF_INET) {
   3f9ec:	880c      	ldrh	r4, [r1, #0]
{
   3f9ee:	b08b      	sub	sp, #44	; 0x2c
	if (addr->sa_family == AF_INET) {
   3f9f0:	2c01      	cmp	r4, #1
{
   3f9f2:	4605      	mov	r5, r0
   3f9f4:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   3f9f6:	d10e      	bne.n	3fa16 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   3f9f8:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3f9fa:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3f9fc:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3fa00:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3fa02:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   3fa04:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3fa06:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3fa0a:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   3fa0c:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   3fa0e:	f7f4 fc4b 	bl	342a8 <nrf_connect>
}
   3fa12:	b00b      	add	sp, #44	; 0x2c
   3fa14:	bd30      	pop	{r4, r5, pc}
	} else if (addr->sa_family == AF_INET6) {
   3fa16:	2c02      	cmp	r4, #2
   3fa18:	d107      	bne.n	3fa2a <nrf91_socket_offload_connect+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   3fa1a:	a901      	add	r1, sp, #4
   3fa1c:	4618      	mov	r0, r3
   3fa1e:	f7ff ff53 	bl	3f8c8 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   3fa22:	2224      	movs	r2, #36	; 0x24
   3fa24:	a901      	add	r1, sp, #4
   3fa26:	4628      	mov	r0, r5
   3fa28:	e7f1      	b.n	3fa0e <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   3fa2a:	f7f4 fc3d 	bl	342a8 <nrf_connect>
		if (retval < 0) {
   3fa2e:	2800      	cmp	r0, #0
   3fa30:	daef      	bge.n	3fa12 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   3fa32:	f7fe fc82 	bl	3e33a <__errno>
   3fa36:	2386      	movs	r3, #134	; 0x86
   3fa38:	6003      	str	r3, [r0, #0]
   3fa3a:	f04f 30ff 	mov.w	r0, #4294967295
   3fa3e:	e7e8      	b.n	3fa12 <nrf91_socket_offload_connect+0x28>

0003fa40 <nrf91_socket_offload_accept>:
{
   3fa40:	b5f0      	push	{r4, r5, r6, r7, lr}
   3fa42:	4616      	mov	r6, r2
   3fa44:	b08b      	sub	sp, #44	; 0x2c
	if ((addr != NULL) && (addrlen != NULL)) {
   3fa46:	460c      	mov	r4, r1
   3fa48:	b1f1      	cbz	r1, 3fa88 <nrf91_socket_offload_accept+0x48>
   3fa4a:	b302      	cbz	r2, 3fa8e <nrf91_socket_offload_accept+0x4e>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   3fa4c:	6813      	ldr	r3, [r2, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   3fa4e:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   3fa50:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   3fa52:	bf0c      	ite	eq
   3fa54:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   3fa56:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   3fa58:	ad01      	add	r5, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   3fa5a:	9300      	str	r3, [sp, #0]
	retval = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   3fa5c:	4629      	mov	r1, r5
   3fa5e:	f7f4 fc45 	bl	342ec <nrf_accept>
	if (retval < 0) {
   3fa62:	1e07      	subs	r7, r0, #0
   3fa64:	db22      	blt.n	3faac <nrf91_socket_offload_accept+0x6c>
	if ((addr != NULL) && (addrlen != NULL)) {
   3fa66:	b164      	cbz	r4, 3fa82 <nrf91_socket_offload_accept+0x42>
   3fa68:	b15e      	cbz	r6, 3fa82 <nrf91_socket_offload_accept+0x42>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   3fa6a:	686b      	ldr	r3, [r5, #4]
   3fa6c:	2b02      	cmp	r3, #2
   3fa6e:	d110      	bne.n	3fa92 <nrf91_socket_offload_accept+0x52>
			*addrlen = sizeof(struct sockaddr_in);
   3fa70:	2308      	movs	r3, #8
   3fa72:	6033      	str	r3, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   3fa74:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   3fa78:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   3fa7a:	2301      	movs	r3, #1
   3fa7c:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3fa7e:	9b04      	ldr	r3, [sp, #16]
   3fa80:	6063      	str	r3, [r4, #4]
}
   3fa82:	4638      	mov	r0, r7
   3fa84:	b00b      	add	sp, #44	; 0x2c
   3fa86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   3fa88:	460a      	mov	r2, r1
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   3fa8a:	460d      	mov	r5, r1
   3fa8c:	e7e6      	b.n	3fa5c <nrf91_socket_offload_accept+0x1c>
   3fa8e:	4615      	mov	r5, r2
   3fa90:	e7e4      	b.n	3fa5c <nrf91_socket_offload_accept+0x1c>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   3fa92:	2b0a      	cmp	r3, #10
   3fa94:	d106      	bne.n	3faa4 <nrf91_socket_offload_accept+0x64>
			*addrlen = sizeof(struct sockaddr_in6);
   3fa96:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   3fa98:	a901      	add	r1, sp, #4
			*addrlen = sizeof(struct sockaddr_in6);
   3fa9a:	6033      	str	r3, [r6, #0]
			nrf_to_z_ipv6(
   3fa9c:	4620      	mov	r0, r4
   3fa9e:	f7ff fe1e 	bl	3f6de <nrf_to_z_ipv6>
   3faa2:	e7ee      	b.n	3fa82 <nrf91_socket_offload_accept+0x42>
	errno = ENOTSUP;
   3faa4:	f7fe fc49 	bl	3e33a <__errno>
   3faa8:	2386      	movs	r3, #134	; 0x86
   3faaa:	6003      	str	r3, [r0, #0]
		return -1;
   3faac:	f04f 37ff 	mov.w	r7, #4294967295
   3fab0:	e7e7      	b.n	3fa82 <nrf91_socket_offload_accept+0x42>

0003fab2 <nrf91_socket_offload_socket>:
{
   3fab2:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   3fab4:	b280      	uxth	r0, r0
   3fab6:	f7ff fcaa 	bl	3f40e <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   3faba:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   3fabe:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   3fac0:	d106      	bne.n	3fad0 <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   3fac2:	f7fe fc3a 	bl	3e33a <__errno>
   3fac6:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   3fac8:	6003      	str	r3, [r0, #0]
}
   3faca:	f04f 30ff 	mov.w	r0, #4294967295
   3face:	bd10      	pop	{r4, pc}
	switch (socktype) {
   3fad0:	2903      	cmp	r1, #3
   3fad2:	d003      	beq.n	3fadc <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   3fad4:	2904      	cmp	r1, #4
   3fad6:	bf08      	it	eq
   3fad8:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   3fadc:	4610      	mov	r0, r2
   3fade:	f7ff fcac 	bl	3f43a <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   3fae2:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   3fae6:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   3fae8:	d103      	bne.n	3faf2 <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   3faea:	f7fe fc26 	bl	3e33a <__errno>
   3faee:	237b      	movs	r3, #123	; 0x7b
   3faf0:	e7ea      	b.n	3fac8 <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   3faf2:	4620      	mov	r0, r4
}
   3faf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   3faf8:	f7f4 bb1e 	b.w	34138 <nrf_socket>

0003fafc <nrf91_socket_offload_setsockopt>:
{
   3fafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   3fb00:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   3fb04:	b086      	sub	sp, #24
   3fb06:	4680      	mov	r8, r0
   3fb08:	460c      	mov	r4, r1
   3fb0a:	4617      	mov	r7, r2
   3fb0c:	461d      	mov	r5, r3
   3fb0e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   3fb10:	d002      	beq.n	3fb18 <nrf91_socket_offload_setsockopt+0x1c>
   3fb12:	dc1c      	bgt.n	3fb4e <nrf91_socket_offload_setsockopt+0x52>
   3fb14:	2901      	cmp	r1, #1
   3fb16:	d122      	bne.n	3fb5e <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3fb18:	aa03      	add	r2, sp, #12
   3fb1a:	4639      	mov	r1, r7
   3fb1c:	4620      	mov	r0, r4
   3fb1e:	f7e7 fbc9 	bl	272b4 <z_to_nrf_optname>
   3fb22:	2800      	cmp	r0, #0
   3fb24:	db1b      	blt.n	3fb5e <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   3fb26:	2c01      	cmp	r4, #1
   3fb28:	d107      	bne.n	3fb3a <nrf91_socket_offload_setsockopt+0x3e>
   3fb2a:	2f14      	cmp	r7, #20
   3fb2c:	d105      	bne.n	3fb3a <nrf91_socket_offload_setsockopt+0x3e>
		nrf_optlen = sizeof(struct nrf_timeval);
   3fb2e:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   3fb30:	682b      	ldr	r3, [r5, #0]
   3fb32:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3fb34:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   3fb36:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3fb38:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3fb3a:	9600      	str	r6, [sp, #0]
   3fb3c:	462b      	mov	r3, r5
   3fb3e:	9a03      	ldr	r2, [sp, #12]
   3fb40:	4621      	mov	r1, r4
   3fb42:	4640      	mov	r0, r8
   3fb44:	f7f4 fbfa 	bl	3433c <nrf_setsockopt>
}
   3fb48:	b006      	add	sp, #24
   3fb4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   3fb4e:	f240 2302 	movw	r3, #514	; 0x202
   3fb52:	4299      	cmp	r1, r3
   3fb54:	d0e0      	beq.n	3fb18 <nrf91_socket_offload_setsockopt+0x1c>
   3fb56:	f240 2303 	movw	r3, #515	; 0x203
   3fb5a:	4299      	cmp	r1, r3
   3fb5c:	e7db      	b.n	3fb16 <nrf91_socket_offload_setsockopt+0x1a>
	errno = ENOPROTOOPT;
   3fb5e:	f7fe fbec 	bl	3e33a <__errno>
   3fb62:	236d      	movs	r3, #109	; 0x6d
   3fb64:	6003      	str	r3, [r0, #0]
   3fb66:	f04f 30ff 	mov.w	r0, #4294967295
   3fb6a:	e7ed      	b.n	3fb48 <nrf91_socket_offload_setsockopt+0x4c>

0003fb6c <nrf91_socket_offload_bind>:
{
   3fb6c:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   3fb6e:	880a      	ldrh	r2, [r1, #0]
{
   3fb70:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   3fb72:	2a01      	cmp	r2, #1
{
   3fb74:	4604      	mov	r4, r0
   3fb76:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   3fb78:	d10e      	bne.n	3fb98 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   3fb7a:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3fb7c:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3fb7e:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3fb82:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3fb84:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   3fb86:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3fb88:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3fb8c:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   3fb8e:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3fb90:	f7f4 fbc2 	bl	34318 <nrf_bind>
}
   3fb94:	b00a      	add	sp, #40	; 0x28
   3fb96:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   3fb98:	2a02      	cmp	r2, #2
   3fb9a:	d107      	bne.n	3fbac <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   3fb9c:	a901      	add	r1, sp, #4
   3fb9e:	4618      	mov	r0, r3
   3fba0:	f7ff fe92 	bl	3f8c8 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3fba4:	2224      	movs	r2, #36	; 0x24
   3fba6:	a901      	add	r1, sp, #4
   3fba8:	4620      	mov	r0, r4
   3fbaa:	e7f1      	b.n	3fb90 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   3fbac:	f7fe fbc5 	bl	3e33a <__errno>
   3fbb0:	2386      	movs	r3, #134	; 0x86
   3fbb2:	6003      	str	r3, [r0, #0]
   3fbb4:	f04f 30ff 	mov.w	r0, #4294967295
   3fbb8:	e7ec      	b.n	3fb94 <nrf91_socket_offload_bind+0x28>

0003fbba <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   3fbba:	ea40 0301 	orr.w	r3, r0, r1
   3fbbe:	f033 030f 	bics.w	r3, r3, #15
   3fbc2:	d101      	bne.n	3fbc8 <dk_set_leds_state+0xe>
   3fbc4:	f7e7 bbea 	b.w	2739c <dk_set_leds_state.part.7>
}
   3fbc8:	f06f 0015 	mvn.w	r0, #21
   3fbcc:	4770      	bx	lr

0003fbce <dk_set_leds>:
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
   3fbce:	210f      	movs	r1, #15
   3fbd0:	f7ff bff3 	b.w	3fbba <dk_set_leds_state>

0003fbd4 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   3fbd4:	6843      	ldr	r3, [r0, #4]
   3fbd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   3fbd8:	b103      	cbz	r3, 3fbdc <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   3fbda:	4718      	bx	r3
}
   3fbdc:	4770      	bx	lr

0003fbde <response_handler>:
	write_uart_string(response);
   3fbde:	4608      	mov	r0, r1
   3fbe0:	f7e8 bb02 	b.w	281e8 <write_uart_string>

0003fbe4 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   3fbe4:	280d      	cmp	r0, #13
   3fbe6:	d004      	beq.n	3fbf2 <is_lfcr+0xe>
   3fbe8:	f1a0 030a 	sub.w	r3, r0, #10
   3fbec:	4258      	negs	r0, r3
   3fbee:	4158      	adcs	r0, r3
   3fbf0:	4770      	bx	lr
		return true;
   3fbf2:	2001      	movs	r0, #1
}
   3fbf4:	4770      	bx	lr

0003fbf6 <skip_command_prefix>:
{
   3fbf6:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   3fbf8:	6802      	ldr	r2, [r0, #0]
{
   3fbfa:	4601      	mov	r1, r0
	*cmd += sizeof("AT") - 1;
   3fbfc:	1c93      	adds	r3, r2, #2
   3fbfe:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   3fc00:	7894      	ldrb	r4, [r2, #2]
   3fc02:	4620      	mov	r0, r4
   3fc04:	f7ff ffee 	bl	3fbe4 <is_lfcr>
   3fc08:	b910      	cbnz	r0, 3fc10 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   3fc0a:	b10c      	cbz	r4, 3fc10 <skip_command_prefix+0x1a>
	(*cmd)++;
   3fc0c:	3203      	adds	r2, #3
   3fc0e:	600a      	str	r2, [r1, #0]
}
   3fc10:	bd10      	pop	{r4, pc}

0003fc12 <at_params_list_init>:
{
   3fc12:	b538      	push	{r3, r4, r5, lr}
   3fc14:	460d      	mov	r5, r1
	if (list == NULL) {
   3fc16:	4604      	mov	r4, r0
   3fc18:	b140      	cbz	r0, 3fc2c <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   3fc1a:	210c      	movs	r1, #12
   3fc1c:	4628      	mov	r0, r5
   3fc1e:	f000 fb5f 	bl	402e0 <k_calloc>
   3fc22:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   3fc24:	b128      	cbz	r0, 3fc32 <at_params_list_init+0x20>
	return 0;
   3fc26:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   3fc28:	6025      	str	r5, [r4, #0]
}
   3fc2a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3fc2c:	f06f 0015 	mvn.w	r0, #21
   3fc30:	e7fb      	b.n	3fc2a <at_params_list_init+0x18>
		return -ENOMEM;
   3fc32:	f06f 000b 	mvn.w	r0, #11
   3fc36:	e7f8      	b.n	3fc2a <at_params_list_init+0x18>

0003fc38 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   3fc38:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   3fc3a:	4604      	mov	r4, r0
   3fc3c:	b148      	cbz	r0, 3fc52 <at_params_list_free+0x1a>
   3fc3e:	6843      	ldr	r3, [r0, #4]
   3fc40:	b13b      	cbz	r3, 3fc52 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   3fc42:	2500      	movs	r5, #0
	at_params_list_clear(list);
   3fc44:	f7e8 ff10 	bl	28a68 <at_params_list_clear>
	list->param_count = 0;
   3fc48:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   3fc4a:	6860      	ldr	r0, [r4, #4]
   3fc4c:	f000 fb43 	bl	402d6 <k_free>
	list->params = NULL;
   3fc50:	6065      	str	r5, [r4, #4]
}
   3fc52:	bd38      	pop	{r3, r4, r5, pc}

0003fc54 <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   3fc54:	b538      	push	{r3, r4, r5, lr}
   3fc56:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   3fc58:	b910      	cbnz	r0, 3fc60 <at_params_short_put+0xc>
		return -EINVAL;
   3fc5a:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
}
   3fc5e:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   3fc60:	6843      	ldr	r3, [r0, #4]
   3fc62:	2b00      	cmp	r3, #0
   3fc64:	d0f9      	beq.n	3fc5a <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   3fc66:	f7e8 fe93 	bl	28990 <at_params_get>
	if (param == NULL) {
   3fc6a:	4604      	mov	r4, r0
   3fc6c:	2800      	cmp	r0, #0
   3fc6e:	d0f4      	beq.n	3fc5a <at_params_short_put+0x6>
	at_param_clear(param);
   3fc70:	f7e8 fed8 	bl	28a24 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   3fc74:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   3fc76:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   3fc78:	7023      	strb	r3, [r4, #0]
	return 0;
   3fc7a:	2000      	movs	r0, #0
   3fc7c:	e7ef      	b.n	3fc5e <at_params_short_put+0xa>

0003fc7e <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   3fc7e:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   3fc80:	b910      	cbnz	r0, 3fc88 <at_params_empty_put+0xa>
		return -EINVAL;
   3fc82:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   3fc86:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   3fc88:	6843      	ldr	r3, [r0, #4]
   3fc8a:	2b00      	cmp	r3, #0
   3fc8c:	d0f9      	beq.n	3fc82 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   3fc8e:	f7e8 fe7f 	bl	28990 <at_params_get>
	if (param == NULL) {
   3fc92:	4604      	mov	r4, r0
   3fc94:	2800      	cmp	r0, #0
   3fc96:	d0f4      	beq.n	3fc82 <at_params_empty_put+0x4>
	at_param_clear(param);
   3fc98:	f7e8 fec4 	bl	28a24 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   3fc9c:	2305      	movs	r3, #5
	param->value.int_val = 0;
   3fc9e:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   3fca0:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   3fca2:	60a0      	str	r0, [r4, #8]
	return 0;
   3fca4:	e7ef      	b.n	3fc86 <at_params_empty_put+0x8>

0003fca6 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   3fca6:	b538      	push	{r3, r4, r5, lr}
   3fca8:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   3fcaa:	b910      	cbnz	r0, 3fcb2 <at_params_int_put+0xc>
		return -EINVAL;
   3fcac:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   3fcb0:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   3fcb2:	6843      	ldr	r3, [r0, #4]
   3fcb4:	2b00      	cmp	r3, #0
   3fcb6:	d0f9      	beq.n	3fcac <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   3fcb8:	f7e8 fe6a 	bl	28990 <at_params_get>
	if (param == NULL) {
   3fcbc:	4604      	mov	r4, r0
   3fcbe:	2800      	cmp	r0, #0
   3fcc0:	d0f4      	beq.n	3fcac <at_params_int_put+0x6>
	at_param_clear(param);
   3fcc2:	f7e8 feaf 	bl	28a24 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   3fcc6:	2302      	movs	r3, #2
	param->value.int_val = value;
   3fcc8:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   3fcca:	7023      	strb	r3, [r4, #0]
	return 0;
   3fccc:	2000      	movs	r0, #0
   3fcce:	e7ef      	b.n	3fcb0 <at_params_int_put+0xa>

0003fcd0 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   3fcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3fcd2:	4616      	mov	r6, r2
   3fcd4:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   3fcd6:	b910      	cbnz	r0, 3fcde <at_params_string_put+0xe>
		return -EINVAL;
   3fcd8:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   3fcdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   3fcde:	6843      	ldr	r3, [r0, #4]
   3fce0:	2b00      	cmp	r3, #0
   3fce2:	d0f9      	beq.n	3fcd8 <at_params_string_put+0x8>
   3fce4:	2a00      	cmp	r2, #0
   3fce6:	d0f7      	beq.n	3fcd8 <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3fce8:	f7e8 fe52 	bl	28990 <at_params_get>
	if (param == NULL) {
   3fcec:	4604      	mov	r4, r0
   3fcee:	2800      	cmp	r0, #0
   3fcf0:	d0f2      	beq.n	3fcd8 <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   3fcf2:	1c68      	adds	r0, r5, #1
   3fcf4:	f7f8 fce0 	bl	386b8 <k_malloc>
	if (param_value == NULL) {
   3fcf8:	4607      	mov	r7, r0
   3fcfa:	b160      	cbz	r0, 3fd16 <at_params_string_put+0x46>
   3fcfc:	462a      	mov	r2, r5
   3fcfe:	4631      	mov	r1, r6
   3fd00:	f000 fc8c 	bl	4061c <memcpy>
	at_param_clear(param);
   3fd04:	4620      	mov	r0, r4
   3fd06:	f7e8 fe8d 	bl	28a24 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   3fd0a:	2303      	movs	r3, #3
	param->size = str_len;
   3fd0c:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   3fd0e:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   3fd10:	60a7      	str	r7, [r4, #8]
	return 0;
   3fd12:	2000      	movs	r0, #0
   3fd14:	e7e2      	b.n	3fcdc <at_params_string_put+0xc>
		return -ENOMEM;
   3fd16:	f06f 000b 	mvn.w	r0, #11
   3fd1a:	e7df      	b.n	3fcdc <at_params_string_put+0xc>

0003fd1c <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const u32_t *array, size_t array_len)
{
   3fd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3fd1e:	4616      	mov	r6, r2
   3fd20:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   3fd22:	b910      	cbnz	r0, 3fd2a <at_params_array_put+0xe>
		return -EINVAL;
   3fd24:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   3fd28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   3fd2a:	6843      	ldr	r3, [r0, #4]
   3fd2c:	2b00      	cmp	r3, #0
   3fd2e:	d0f9      	beq.n	3fd24 <at_params_array_put+0x8>
   3fd30:	2a00      	cmp	r2, #0
   3fd32:	d0f7      	beq.n	3fd24 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3fd34:	f7e8 fe2c 	bl	28990 <at_params_get>
	if (param == NULL) {
   3fd38:	4604      	mov	r4, r0
   3fd3a:	2800      	cmp	r0, #0
   3fd3c:	d0f2      	beq.n	3fd24 <at_params_array_put+0x8>
	u32_t *param_value = (u32_t *)k_malloc(array_len);
   3fd3e:	4628      	mov	r0, r5
   3fd40:	f7f8 fcba 	bl	386b8 <k_malloc>
	if (param_value == NULL) {
   3fd44:	4607      	mov	r7, r0
   3fd46:	b160      	cbz	r0, 3fd62 <at_params_array_put+0x46>
   3fd48:	462a      	mov	r2, r5
   3fd4a:	4631      	mov	r1, r6
   3fd4c:	f000 fc66 	bl	4061c <memcpy>
	at_param_clear(param);
   3fd50:	4620      	mov	r0, r4
   3fd52:	f7e8 fe67 	bl	28a24 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   3fd56:	2304      	movs	r3, #4
	param->size = array_len;
   3fd58:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   3fd5a:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   3fd5c:	60a7      	str	r7, [r4, #8]
	return 0;
   3fd5e:	2000      	movs	r0, #0
   3fd60:	e7e2      	b.n	3fd28 <at_params_array_put+0xc>
		return -ENOMEM;
   3fd62:	f06f 000b 	mvn.w	r0, #11
   3fd66:	e7df      	b.n	3fd28 <at_params_array_put+0xc>

0003fd68 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   3fd68:	b510      	push	{r4, lr}
   3fd6a:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3fd6c:	b910      	cbnz	r0, 3fd74 <at_params_short_get+0xc>
		return -EINVAL;
   3fd6e:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
	return 0;
}
   3fd72:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3fd74:	6843      	ldr	r3, [r0, #4]
   3fd76:	2b00      	cmp	r3, #0
   3fd78:	d0f9      	beq.n	3fd6e <at_params_short_get+0x6>
   3fd7a:	2a00      	cmp	r2, #0
   3fd7c:	d0f7      	beq.n	3fd6e <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3fd7e:	f7e8 fe07 	bl	28990 <at_params_get>
	if (param == NULL) {
   3fd82:	2800      	cmp	r0, #0
   3fd84:	d0f3      	beq.n	3fd6e <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   3fd86:	7803      	ldrb	r3, [r0, #0]
   3fd88:	2b01      	cmp	r3, #1
   3fd8a:	d1f0      	bne.n	3fd6e <at_params_short_get+0x6>
	*value = (u16_t)param->value.int_val;
   3fd8c:	6883      	ldr	r3, [r0, #8]
	return 0;
   3fd8e:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   3fd90:	8023      	strh	r3, [r4, #0]
	return 0;
   3fd92:	e7ee      	b.n	3fd72 <at_params_short_get+0xa>

0003fd94 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      u32_t *value)
{
   3fd94:	b510      	push	{r4, lr}
   3fd96:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3fd98:	b910      	cbnz	r0, 3fda0 <at_params_int_get+0xc>
		return -EINVAL;
   3fd9a:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   3fd9e:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3fda0:	6843      	ldr	r3, [r0, #4]
   3fda2:	2b00      	cmp	r3, #0
   3fda4:	d0f9      	beq.n	3fd9a <at_params_int_get+0x6>
   3fda6:	2a00      	cmp	r2, #0
   3fda8:	d0f7      	beq.n	3fd9a <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3fdaa:	f7e8 fdf1 	bl	28990 <at_params_get>
	if (param == NULL) {
   3fdae:	2800      	cmp	r0, #0
   3fdb0:	d0f3      	beq.n	3fd9a <at_params_int_get+0x6>
	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   3fdb2:	7803      	ldrb	r3, [r0, #0]
   3fdb4:	3b01      	subs	r3, #1
   3fdb6:	2b01      	cmp	r3, #1
   3fdb8:	d8ef      	bhi.n	3fd9a <at_params_int_get+0x6>
	*value = param->value.int_val;
   3fdba:	6883      	ldr	r3, [r0, #8]
	return 0;
   3fdbc:	2000      	movs	r0, #0
	*value = param->value.int_val;
   3fdbe:	6023      	str	r3, [r4, #0]
	return 0;
   3fdc0:	e7ed      	b.n	3fd9e <at_params_int_get+0xa>

0003fdc2 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   3fdc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3fdc4:	4616      	mov	r6, r2
   3fdc6:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   3fdc8:	b910      	cbnz	r0, 3fdd0 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   3fdca:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   3fdce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   3fdd0:	6843      	ldr	r3, [r0, #4]
   3fdd2:	2b00      	cmp	r3, #0
   3fdd4:	d0f9      	beq.n	3fdca <at_params_string_get+0x8>
   3fdd6:	2a00      	cmp	r2, #0
   3fdd8:	d0f7      	beq.n	3fdca <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   3fdda:	2c00      	cmp	r4, #0
   3fddc:	d0f5      	beq.n	3fdca <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   3fdde:	f7e8 fdd7 	bl	28990 <at_params_get>
	if (param == NULL) {
   3fde2:	4607      	mov	r7, r0
   3fde4:	2800      	cmp	r0, #0
   3fde6:	d0f0      	beq.n	3fdca <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   3fde8:	7803      	ldrb	r3, [r0, #0]
   3fdea:	2b03      	cmp	r3, #3
   3fdec:	d1ed      	bne.n	3fdca <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   3fdee:	f7e8 fdf1 	bl	289d4 <at_param_size>
	if (*len < param_len) {
   3fdf2:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   3fdf4:	4605      	mov	r5, r0
	if (*len < param_len) {
   3fdf6:	4283      	cmp	r3, r0
   3fdf8:	d307      	bcc.n	3fe0a <at_params_string_get+0x48>
   3fdfa:	4602      	mov	r2, r0
   3fdfc:	68b9      	ldr	r1, [r7, #8]
   3fdfe:	4630      	mov	r0, r6
   3fe00:	f000 fc0c 	bl	4061c <memcpy>
	*len = param_len;
   3fe04:	6025      	str	r5, [r4, #0]
	return 0;
   3fe06:	2000      	movs	r0, #0
   3fe08:	e7e1      	b.n	3fdce <at_params_string_get+0xc>
		return -ENOMEM;
   3fe0a:	f06f 000b 	mvn.w	r0, #11
   3fe0e:	e7de      	b.n	3fdce <at_params_string_get+0xc>

0003fe10 <at_params_valid_count_get>:

	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
   3fe10:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   3fe12:	4605      	mov	r5, r0
   3fe14:	b180      	cbz	r0, 3fe38 <at_params_valid_count_get+0x28>
   3fe16:	6843      	ldr	r3, [r0, #4]
   3fe18:	b173      	cbz	r3, 3fe38 <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   3fe1a:	2100      	movs	r1, #0
   3fe1c:	f7e8 fdb8 	bl	28990 <at_params_get>
	size_t valid_i = 0;
   3fe20:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   3fe22:	b108      	cbz	r0, 3fe28 <at_params_valid_count_get+0x18>
   3fe24:	7803      	ldrb	r3, [r0, #0]
   3fe26:	b90b      	cbnz	r3, 3fe2c <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   3fe28:	4620      	mov	r0, r4
   3fe2a:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   3fe2c:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   3fe2e:	4621      	mov	r1, r4
   3fe30:	4628      	mov	r0, r5
   3fe32:	f7e8 fdad 	bl	28990 <at_params_get>
   3fe36:	e7f4      	b.n	3fe22 <at_params_valid_count_get+0x12>
		return -EINVAL;
   3fe38:	f06f 0415 	mvn.w	r4, #21
   3fe3c:	e7f4      	b.n	3fe28 <at_params_valid_count_get+0x18>

0003fe3e <response_is_valid>:
{
   3fe3e:	b570      	push	{r4, r5, r6, lr}
   3fe40:	4606      	mov	r6, r0
	if ((response_len < strlen(check)) ||
   3fe42:	4610      	mov	r0, r2
{
   3fe44:	460d      	mov	r5, r1
   3fe46:	4614      	mov	r4, r2
	if ((response_len < strlen(check)) ||
   3fe48:	f7dd f96c 	bl	1d124 <strlen>
   3fe4c:	42a8      	cmp	r0, r5
   3fe4e:	d808      	bhi.n	3fe62 <response_is_valid+0x24>
	    (memcmp(response, check, response_len) != 0)) {
   3fe50:	462a      	mov	r2, r5
   3fe52:	4621      	mov	r1, r4
   3fe54:	4630      	mov	r0, r6
   3fe56:	f000 fbd3 	bl	40600 <memcmp>
	if ((response_len < strlen(check)) ||
   3fe5a:	fab0 f080 	clz	r0, r0
   3fe5e:	0940      	lsrs	r0, r0, #5
}
   3fe60:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   3fe62:	2000      	movs	r0, #0
   3fe64:	e7fc      	b.n	3fe60 <response_is_valid+0x22>

0003fe66 <lte_lc_init_and_connect>:
{
   3fe66:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   3fe68:	f7e8 fe36 	bl	28ad8 <w_lte_lc_init>
	if (ret) {
   3fe6c:	b918      	cbnz	r0, 3fe76 <lte_lc_init_and_connect+0x10>
}
   3fe6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect();
   3fe72:	f7e8 bf57 	b.w	28d24 <w_lte_lc_connect>
}
   3fe76:	bd08      	pop	{r3, pc}

0003fe78 <json_add_str>:
{
   3fe78:	b538      	push	{r3, r4, r5, lr}
   3fe7a:	460d      	mov	r5, r1
	if (parent == NULL || str == NULL || item == NULL) {
   3fe7c:	4604      	mov	r4, r0
   3fe7e:	b158      	cbz	r0, 3fe98 <json_add_str+0x20>
   3fe80:	b152      	cbz	r2, 3fe98 <json_add_str+0x20>
	json_str = cJSON_CreateString(item);
   3fe82:	4610      	mov	r0, r2
   3fe84:	f7e6 ffbe 	bl	26e04 <cJSON_CreateString>
	if (json_str == NULL) {
   3fe88:	4602      	mov	r2, r0
   3fe8a:	b140      	cbz	r0, 3fe9e <json_add_str+0x26>
	cJSON_AddItemToObject(parent, str, item);
   3fe8c:	4620      	mov	r0, r4
   3fe8e:	4629      	mov	r1, r5
   3fe90:	f7ff fa24 	bl	3f2dc <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   3fe94:	2000      	movs	r0, #0
}
   3fe96:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3fe98:	f06f 0015 	mvn.w	r0, #21
   3fe9c:	e7fb      	b.n	3fe96 <json_add_str+0x1e>
		return -ENOMEM;
   3fe9e:	f06f 000b 	mvn.w	r0, #11
   3fea2:	e7f8      	b.n	3fe96 <json_add_str+0x1e>

0003fea4 <json_add_data>:
{
   3fea4:	b5f0      	push	{r4, r5, r6, r7, lr}
   3fea6:	4604      	mov	r4, r0
   3fea8:	b09b      	sub	sp, #108	; 0x6c
	if (param == NULL || json_obj == NULL) {
   3feaa:	460f      	mov	r7, r1
   3feac:	b921      	cbnz	r1, 3feb8 <json_add_data+0x14>
		return -EINVAL;
   3feae:	f06f 0615 	mvn.w	r6, #21
}
   3feb2:	4630      	mov	r0, r6
   3feb4:	b01b      	add	sp, #108	; 0x6c
   3feb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(data_name, 0, MODEM_INFO_MAX_RESPONSE_SIZE);
   3feb8:	2264      	movs	r2, #100	; 0x64
   3feba:	2100      	movs	r1, #0
   3febc:	a801      	add	r0, sp, #4
   3febe:	f000 fbcd 	bl	4065c <memset>
	ret = modem_info_name_get(param->type,
   3fec2:	a901      	add	r1, sp, #4
   3fec4:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   3fec8:	f7e9 fa86 	bl	293d8 <modem_info_name_get>
	if (ret < 0) {
   3fecc:	1e05      	subs	r5, r0, #0
   3fece:	dbee      	blt.n	3feae <json_add_data+0xa>
	data_type = modem_info_type_get(param->type);
   3fed0:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   3fed4:	f7e9 fa76 	bl	293c4 <modem_info_type_get>
	if (data_type == AT_PARAM_TYPE_STRING &&
   3fed8:	2803      	cmp	r0, #3
   3feda:	d113      	bne.n	3ff04 <json_add_data+0x60>
   3fedc:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   3fee0:	2b03      	cmp	r3, #3
   3fee2:	d00f      	beq.n	3ff04 <json_add_data+0x60>
		total_len += strlen(param->value_string);
   3fee4:	3402      	adds	r4, #2
   3fee6:	4620      	mov	r0, r4
   3fee8:	f7dd f91c 	bl	1d124 <strlen>
		ret += json_add_str(json_obj, data_name, param->value_string);
   3feec:	4622      	mov	r2, r4
		total_len += strlen(param->value_string);
   3feee:	4606      	mov	r6, r0
		ret += json_add_str(json_obj, data_name, param->value_string);
   3fef0:	a901      	add	r1, sp, #4
   3fef2:	4638      	mov	r0, r7
   3fef4:	f7ff ffc0 	bl	3fe78 <json_add_str>
   3fef8:	4428      	add	r0, r5
	if (ret < 0) {
   3fefa:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   3fefe:	bf28      	it	cs
   3ff00:	4606      	movcs	r6, r0
   3ff02:	e7d6      	b.n	3feb2 <json_add_data+0xe>
		ret += json_add_num(json_obj, data_name, param->value);
   3ff04:	8820      	ldrh	r0, [r4, #0]
   3ff06:	f7dc fbdd 	bl	1c6c4 <__aeabi_ui2d>
	json_num = cJSON_CreateNumber(num);
   3ff0a:	ec41 0b10 	vmov	d0, r0, r1
   3ff0e:	f7dd fc7b 	bl	1d808 <cJSON_CreateNumber>
	if (json_num == NULL) {
   3ff12:	4602      	mov	r2, r0
   3ff14:	b138      	cbz	r0, 3ff26 <json_add_data+0x82>
	cJSON_AddItemToObject(parent, str, item);
   3ff16:	4638      	mov	r0, r7
   3ff18:	a901      	add	r1, sp, #4
   3ff1a:	f7ff f9df 	bl	3f2dc <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_num);
   3ff1e:	2000      	movs	r0, #0
		ret += json_add_num(json_obj, data_name, param->value);
   3ff20:	4428      	add	r0, r5
		total_len += sizeof(u16_t);
   3ff22:	2602      	movs	r6, #2
   3ff24:	e7e9      	b.n	3fefa <json_add_data+0x56>
		return -ENOMEM;
   3ff26:	f06f 000b 	mvn.w	r0, #11
   3ff2a:	e7f9      	b.n	3ff20 <json_add_data+0x7c>

0003ff2c <sim_data_add>:
{
   3ff2c:	b570      	push	{r4, r5, r6, lr}
   3ff2e:	460d      	mov	r5, r1
	if (sim == NULL || json_obj == NULL) {
   3ff30:	4606      	mov	r6, r0
   3ff32:	b180      	cbz	r0, 3ff56 <sim_data_add+0x2a>
   3ff34:	b179      	cbz	r1, 3ff56 <sim_data_add+0x2a>
	total_len = json_add_data(&sim->uicc, json_obj);
   3ff36:	f7ff ffb5 	bl	3fea4 <json_add_data>
	total_len += json_add_data(&sim->iccid, json_obj);
   3ff3a:	4629      	mov	r1, r5
	total_len = json_add_data(&sim->uicc, json_obj);
   3ff3c:	4604      	mov	r4, r0
	total_len += json_add_data(&sim->iccid, json_obj);
   3ff3e:	f106 0070 	add.w	r0, r6, #112	; 0x70
   3ff42:	f7ff ffaf 	bl	3fea4 <json_add_data>
	total_len += json_add_data(&sim->imsi, json_obj);
   3ff46:	4629      	mov	r1, r5
	total_len += json_add_data(&sim->iccid, json_obj);
   3ff48:	4404      	add	r4, r0
	total_len += json_add_data(&sim->imsi, json_obj);
   3ff4a:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   3ff4e:	f7ff ffa9 	bl	3fea4 <json_add_data>
   3ff52:	4420      	add	r0, r4
}
   3ff54:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3ff56:	f06f 0015 	mvn.w	r0, #21
   3ff5a:	e7fb      	b.n	3ff54 <sim_data_add+0x28>

0003ff5c <cloud_notify_event>:
 */
static inline void cloud_notify_event(struct cloud_backend *backend,
				      struct cloud_event *evt,
				      void *user_data)
{
	if (backend->config->handler) {
   3ff5c:	6843      	ldr	r3, [r0, #4]
   3ff5e:	685b      	ldr	r3, [r3, #4]
   3ff60:	b103      	cbz	r3, 3ff64 <cloud_notify_event+0x8>
		backend->config->handler(backend, evt, user_data);
   3ff62:	4718      	bx	r3
	}
}
   3ff64:	4770      	bx	lr

0003ff66 <user_data_set>:
}

static int user_data_set(const struct cloud_backend *const backend,
			 void *user_data)
{
	backend->config->user_data = user_data;
   3ff66:	6843      	ldr	r3, [r0, #4]

	return 0;
}
   3ff68:	2000      	movs	r0, #0
	backend->config->user_data = user_data;
   3ff6a:	60d9      	str	r1, [r3, #12]
}
   3ff6c:	4770      	bx	lr

0003ff6e <ping>:
{
   3ff6e:	b508      	push	{r3, lr}
	nct_process();
   3ff70:	f7eb fc74 	bl	2b85c <nct_process>
}
   3ff74:	2000      	movs	r0, #0
   3ff76:	bd08      	pop	{r3, pc}

0003ff78 <keepalive_time_left>:
	return nct_keepalive_time_left();
   3ff78:	f7eb bc7c 	b.w	2b874 <nct_keepalive_time_left>

0003ff7c <input>:
   3ff7c:	b508      	push	{r3, lr}
   3ff7e:	f7eb fc6d 	bl	2b85c <nct_process>
   3ff82:	2000      	movs	r0, #0
   3ff84:	bd08      	pop	{r3, pc}

0003ff86 <disconnect>:
	return nrf_cloud_disconnect();
   3ff86:	f7e9 bfff 	b.w	29f88 <nrf_cloud_disconnect>

0003ff8a <json_add_str>:
{
   3ff8a:	b538      	push	{r3, r4, r5, lr}
   3ff8c:	4604      	mov	r4, r0
	json_str = cJSON_CreateString(item);
   3ff8e:	4610      	mov	r0, r2
{
   3ff90:	460d      	mov	r5, r1
	json_str = cJSON_CreateString(item);
   3ff92:	f7e6 ff37 	bl	26e04 <cJSON_CreateString>
	if (json_str == NULL) {
   3ff96:	4602      	mov	r2, r0
   3ff98:	b128      	cbz	r0, 3ffa6 <json_add_str+0x1c>
	cJSON_AddItemToObject(parent, str, item);
   3ff9a:	4620      	mov	r0, r4
   3ff9c:	4629      	mov	r1, r5
   3ff9e:	f7ff f99d 	bl	3f2dc <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   3ffa2:	2000      	movs	r0, #0
}
   3ffa4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   3ffa6:	f06f 000b 	mvn.w	r0, #11
   3ffaa:	e7fb      	b.n	3ffa4 <json_add_str+0x1a>

0003ffac <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   3ffac:	b108      	cbz	r0, 3ffb2 <json_object_decode+0x6>
   3ffae:	f7ff b986 	b.w	3f2be <cJSON_GetObjectItem>
}
   3ffb2:	4770      	bx	lr

0003ffb4 <json_add_null>:
{
   3ffb4:	b538      	push	{r3, r4, r5, lr}
   3ffb6:	4604      	mov	r4, r0
   3ffb8:	460d      	mov	r5, r1
	json_null = cJSON_CreateNull();
   3ffba:	f7e6 ff17 	bl	26dec <cJSON_CreateNull>
	if (json_null == NULL) {
   3ffbe:	4602      	mov	r2, r0
   3ffc0:	b128      	cbz	r0, 3ffce <json_add_null+0x1a>
	cJSON_AddItemToObject(parent, str, item);
   3ffc2:	4620      	mov	r0, r4
   3ffc4:	4629      	mov	r1, r5
   3ffc6:	f7ff f989 	bl	3f2dc <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_null);
   3ffca:	2000      	movs	r0, #0
}
   3ffcc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   3ffce:	f06f 000b 	mvn.w	r0, #11
   3ffd2:	e7fb      	b.n	3ffcc <json_add_null+0x18>

0003ffd4 <json_decode_and_alloc>:
{
   3ffd4:	b538      	push	{r3, r4, r5, lr}
   3ffd6:	460d      	mov	r5, r1
	if (obj == NULL || (obj->type != cJSON_String)) {
   3ffd8:	4604      	mov	r4, r0
   3ffda:	b110      	cbz	r0, 3ffe2 <json_decode_and_alloc+0xe>
   3ffdc:	68c3      	ldr	r3, [r0, #12]
   3ffde:	2b10      	cmp	r3, #16
   3ffe0:	d004      	beq.n	3ffec <json_decode_and_alloc+0x18>
		data->ptr = NULL;
   3ffe2:	2300      	movs	r3, #0
		return -ENOENT;
   3ffe4:	f06f 0001 	mvn.w	r0, #1
		data->ptr = NULL;
   3ffe8:	606b      	str	r3, [r5, #4]
}
   3ffea:	bd38      	pop	{r3, r4, r5, pc}
	data->len = strlen(obj->valuestring);
   3ffec:	6900      	ldr	r0, [r0, #16]
   3ffee:	f7dd f899 	bl	1d124 <strlen>
   3fff2:	6028      	str	r0, [r5, #0]
	data->ptr = nrf_cloud_malloc(data->len + 1);
   3fff4:	3001      	adds	r0, #1
   3fff6:	f7f8 fb5f 	bl	386b8 <k_malloc>
   3fffa:	6068      	str	r0, [r5, #4]
	if (data->ptr == NULL) {
   3fffc:	b130      	cbz	r0, 4000c <CONFIG_FLASH_LOAD_OFFSET+0xc>
	strncpy((char *)data->ptr, obj->valuestring, data->len + 1);
   3fffe:	682a      	ldr	r2, [r5, #0]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   40000:	6921      	ldr	r1, [r4, #16]
   40002:	3201      	adds	r2, #1
   40004:	f000 fd15 	bl	40a32 <strncpy>
	return 0;
   40008:	2000      	movs	r0, #0
   4000a:	e7ee      	b.n	3ffea <json_decode_and_alloc+0x16>
		return -ENOMEM;
   4000c:	f06f 000b 	mvn.w	r0, #11
   40010:	e7eb      	b.n	3ffea <json_decode_and_alloc+0x16>

00040012 <nrf_codec_init>:
{
   40012:	b508      	push	{r3, lr}
	cJSON_Init();
   40014:	f7e6 ff26 	bl	26e64 <cJSON_Init>
}
   40018:	2000      	movs	r0, #0
   4001a:	bd08      	pop	{r3, pc}

0004001c <cc_disconnection_handler>:
}

static int cc_disconnection_handler(const struct nct_evt *nct_evt)
{
	return 0; /* Nothing to do */
}
   4001c:	2000      	movs	r0, #0
   4001e:	4770      	bx	lr

00040020 <disconnection_handler>:
{
   40020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct nrf_cloud_evt evt = {
   40022:	2210      	movs	r2, #16
   40024:	2100      	movs	r1, #0
   40026:	4668      	mov	r0, sp
   40028:	f000 fb18 	bl	4065c <memset>
   4002c:	2308      	movs	r3, #8
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   4002e:	4669      	mov	r1, sp
   40030:	2001      	movs	r0, #1
	const struct nrf_cloud_evt evt = {
   40032:	f88d 3000 	strb.w	r3, [sp]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   40036:	f7e9 fee3 	bl	29e00 <nfsm_set_current_state_and_notify>
}
   4003a:	2000      	movs	r0, #0
   4003c:	b005      	add	sp, #20
   4003e:	f85d fb04 	ldr.w	pc, [sp], #4

00040042 <dc_rx_data_handler>:
	}
	return 0;
}

static int dc_rx_data_handler(const struct nct_evt *nct_evt)
{
   40042:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct nrf_cloud_evt cloud_evt = {
   40044:	2400      	movs	r4, #0
   40046:	2306      	movs	r3, #6
   40048:	e9cd 4400 	strd	r4, r4, [sp]
   4004c:	f88d 3000 	strb.w	r3, [sp]
   40050:	6843      	ldr	r3, [r0, #4]
   40052:	e893 0003 	ldmia.w	r3, {r0, r1}
   40056:	ab04      	add	r3, sp, #16
   40058:	e903 0003 	stmdb	r3, {r0, r1}
		.type = NRF_CLOUD_EVT_RX_DATA,
		.data = nct_evt->param.dc->data,
	};

	/* All data is forwared to the app */
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   4005c:	f7e9 feca 	bl	29df4 <nfsm_get_current_state>
   40060:	4669      	mov	r1, sp
   40062:	f7e9 fecd 	bl	29e00 <nfsm_set_current_state_and_notify>

	return 0;
}
   40066:	4620      	mov	r0, r4
   40068:	b004      	add	sp, #16
   4006a:	bd10      	pop	{r4, pc}

0004006c <dc_connection_handler>:
{
   4006c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (nct_evt->status == 0) {
   4006e:	6801      	ldr	r1, [r0, #0]
   40070:	b951      	cbnz	r1, 40088 <dc_connection_handler+0x1c>
		struct nrf_cloud_evt evt = {
   40072:	2210      	movs	r2, #16
   40074:	4668      	mov	r0, sp
   40076:	f000 faf1 	bl	4065c <memset>
   4007a:	2304      	movs	r3, #4
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   4007c:	4669      	mov	r1, sp
   4007e:	2009      	movs	r0, #9
		struct nrf_cloud_evt evt = {
   40080:	f88d 3000 	strb.w	r3, [sp]
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   40084:	f7e9 febc 	bl	29e00 <nfsm_set_current_state_and_notify>
}
   40088:	2000      	movs	r0, #0
   4008a:	b005      	add	sp, #20
   4008c:	f85d fb04 	ldr.w	pc, [sp], #4

00040090 <cc_tx_ack_in_state_requested_handler>:
{
   40090:	b508      	push	{r3, lr}
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   40092:	f241 632e 	movw	r3, #5678	; 0x162e
   40096:	6842      	ldr	r2, [r0, #4]
   40098:	429a      	cmp	r2, r3
   4009a:	d103      	bne.n	400a4 <cc_tx_ack_in_state_requested_handler+0x14>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   4009c:	2100      	movs	r1, #0
   4009e:	2005      	movs	r0, #5
   400a0:	f7e9 feae 	bl	29e00 <nfsm_set_current_state_and_notify>
}
   400a4:	2000      	movs	r0, #0
   400a6:	bd08      	pop	{r3, pc}

000400a8 <cc_tx_ack_handler>:
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   400a8:	f241 622e 	movw	r2, #5678	; 0x162e
   400ac:	6843      	ldr	r3, [r0, #4]
{
   400ae:	b510      	push	{r4, lr}
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   400b0:	4293      	cmp	r3, r2
   400b2:	d105      	bne.n	400c0 <cc_tx_ack_handler+0x18>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   400b4:	2100      	movs	r1, #0
   400b6:	2005      	movs	r0, #5
   400b8:	f7e9 fea2 	bl	29e00 <nfsm_set_current_state_and_notify>
	return 0;
   400bc:	2400      	movs	r4, #0
   400be:	e00b      	b.n	400d8 <cc_tx_ack_handler+0x30>
	if (nct_evt->param.data_id == PAIRING_STATUS_REPORT_ID) {
   400c0:	f641 62d2 	movw	r2, #7890	; 0x1ed2
   400c4:	4293      	cmp	r3, r2
   400c6:	d1f9      	bne.n	400bc <cc_tx_ack_handler+0x14>
		err = nct_dc_connect();
   400c8:	f7eb fb4a 	bl	2b760 <nct_dc_connect>
		if (err) {
   400cc:	4604      	mov	r4, r0
   400ce:	b918      	cbnz	r0, 400d8 <cc_tx_ack_handler+0x30>
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTING, NULL);
   400d0:	4601      	mov	r1, r0
   400d2:	2008      	movs	r0, #8
   400d4:	f7e9 fe94 	bl	29e00 <nfsm_set_current_state_and_notify>
}
   400d8:	4620      	mov	r0, r4
   400da:	bd10      	pop	{r4, pc}

000400dc <connection_handler>:
{
   400dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (nct_evt->status != 0) {
   400de:	6803      	ldr	r3, [r0, #0]
   400e0:	b153      	cbz	r3, 400f8 <connection_handler+0x1c>
		evt.type = NRF_CLOUD_EVT_ERROR;
   400e2:	23ff      	movs	r3, #255	; 0xff
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   400e4:	4669      	mov	r1, sp
   400e6:	2002      	movs	r0, #2
		evt.type = NRF_CLOUD_EVT_ERROR;
   400e8:	f88d 3000 	strb.w	r3, [sp]
		return 0;
   400ec:	2400      	movs	r4, #0
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   400ee:	f7e9 fe87 	bl	29e00 <nfsm_set_current_state_and_notify>
}
   400f2:	4620      	mov	r0, r4
   400f4:	b004      	add	sp, #16
   400f6:	bd10      	pop	{r4, pc}
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   400f8:	2301      	movs	r3, #1
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   400fa:	4669      	mov	r1, sp
   400fc:	2002      	movs	r0, #2
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   400fe:	f88d 3000 	strb.w	r3, [sp]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   40102:	f7e9 fe7d 	bl	29e00 <nfsm_set_current_state_and_notify>
	err = nct_cc_connect();
   40106:	f7eb f9cf 	bl	2b4a8 <nct_cc_connect>
	if (err) {
   4010a:	4604      	mov	r4, r0
   4010c:	2800      	cmp	r0, #0
   4010e:	d1f0      	bne.n	400f2 <connection_handler+0x16>
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTING, NULL);
   40110:	4601      	mov	r1, r0
   40112:	2003      	movs	r0, #3
   40114:	f7e9 fe74 	bl	29e00 <nfsm_set_current_state_and_notify>
	return 0;
   40118:	e7eb      	b.n	400f2 <connection_handler+0x16>

0004011a <dc_disconnection_handler>:
   4011a:	2000      	movs	r0, #0
   4011c:	4770      	bx	lr

0004011e <dc_tx_ack_handler>:
   4011e:	2000      	movs	r0, #0
   40120:	4770      	bx	lr

00040122 <nfsm_init>:
}
   40122:	2000      	movs	r0, #0
   40124:	4770      	bx	lr

00040126 <nct_dc_send>:
	return dc_send(dc_data, MQTT_QOS_1_AT_LEAST_ONCE);
   40126:	2101      	movs	r1, #1
   40128:	f7ea bd96 	b.w	2ac58 <dc_send>

0004012c <nct_dc_stream>:
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
   4012c:	2100      	movs	r1, #0
   4012e:	f7ea bd93 	b.w	2ac58 <dc_send>

00040132 <nrf_cloud_agps_request_all>:
	return nrf_cloud_agps_request(NULL, 0);
   40132:	2100      	movs	r1, #0
   40134:	4608      	mov	r0, r1
   40136:	f7eb bc05 	b.w	2b944 <nrf_cloud_agps_request>

0004013a <error_evt_send.isra.1>:
static int error_evt_send(const struct download_client *dl, int error)
   4013a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct download_client_evt evt = {
   4013c:	2300      	movs	r3, #0
   4013e:	9301      	str	r3, [sp, #4]
   40140:	9303      	str	r3, [sp, #12]
   40142:	2301      	movs	r3, #1
		.error = -error
   40144:	4249      	negs	r1, r1
	const struct download_client_evt evt = {
   40146:	f88d 3004 	strb.w	r3, [sp, #4]
   4014a:	9102      	str	r1, [sp, #8]
	return dl->callback(&evt);
   4014c:	6803      	ldr	r3, [r0, #0]
   4014e:	a801      	add	r0, sp, #4
   40150:	4798      	blx	r3
}
   40152:	b005      	add	sp, #20
   40154:	f85d fb04 	ldr.w	pc, [sp], #4

00040158 <download_client_file_size_get>:
	k_thread_resume(client->tid);
}

int download_client_file_size_get(struct download_client *client, size_t *size)
{
	if (!client || !size) {
   40158:	b130      	cbz	r0, 40168 <download_client_file_size_get+0x10>
   4015a:	b129      	cbz	r1, 40168 <download_client_file_size_get+0x10>
		return -EINVAL;
	}

	*size = client->file_size;
   4015c:	f241 0308 	movw	r3, #4104	; 0x1008
   40160:	58c3      	ldr	r3, [r0, r3]

	return 0;
   40162:	2000      	movs	r0, #0
	*size = client->file_size;
   40164:	600b      	str	r3, [r1, #0]
	return 0;
   40166:	4770      	bx	lr
		return -EINVAL;
   40168:	f06f 0015 	mvn.w	r0, #21
}
   4016c:	4770      	bx	lr

0004016e <dfu_target_callback_handler>:
	switch (evt) {
   4016e:	b118      	cbz	r0, 40178 <dfu_target_callback_handler+0xa>
   40170:	2801      	cmp	r0, #1
   40172:	d004      	beq.n	4017e <dfu_target_callback_handler+0x10>
		send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   40174:	2004      	movs	r0, #4
   40176:	e000      	b.n	4017a <dfu_target_callback_handler+0xc>
		send_evt(FOTA_DOWNLOAD_EVT_ERASE_PENDING);
   40178:	2002      	movs	r0, #2
		send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   4017a:	f7ec bf33 	b.w	2cfe4 <send_evt>
		send_evt(FOTA_DOWNLOAD_EVT_ERASE_DONE);
   4017e:	2003      	movs	r0, #3
   40180:	e7fb      	b.n	4017a <dfu_target_callback_handler+0xc>

00040182 <aws_jobs_cmp>:

bool aws_jobs_cmp(const char *sub, const char *pub, size_t pub_len,
		 const u8_t *suffix)
{
   40182:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   40186:	460c      	mov	r4, r1
   40188:	4690      	mov	r8, r2
   4018a:	461d      	mov	r5, r3
	int ret;

	if (sub == NULL || pub == NULL || suffix == NULL ||
   4018c:	4606      	mov	r6, r0
   4018e:	b328      	cbz	r0, 401dc <aws_jobs_cmp+0x5a>
   40190:	b331      	cbz	r1, 401e0 <aws_jobs_cmp+0x5e>
   40192:	b33b      	cbz	r3, 401e4 <aws_jobs_cmp+0x62>
   40194:	7803      	ldrb	r3, [r0, #0]
   40196:	b33b      	cbz	r3, 401e8 <aws_jobs_cmp+0x66>
	    sub[0] == '\0' || pub[0] == '\0') {
   40198:	780b      	ldrb	r3, [r1, #0]
   4019a:	b32b      	cbz	r3, 401e8 <aws_jobs_cmp+0x66>
		return false;
	}

	size_t sub_len = strlen(sub);
   4019c:	f7dc ffc2 	bl	1d124 <strlen>
   401a0:	4607      	mov	r7, r0
	size_t suff_len = strlen(suffix);
   401a2:	4628      	mov	r0, r5
   401a4:	f7dc ffbe 	bl	1d124 <strlen>

	if (sub[sub_len - 1] == '#') {
   401a8:	19f3      	adds	r3, r6, r7
   401aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
	size_t suff_len = strlen(suffix);
   401ae:	4681      	mov	r9, r0
	if (sub[sub_len - 1] == '#') {
   401b0:	2b23      	cmp	r3, #35	; 0x23
		/* Strip trailing '/#' */
		sub_len -= 2;
   401b2:	bf08      	it	eq
   401b4:	3f02      	subeq	r7, #2
	}

	ret = strncmp(sub, pub, sub_len);
   401b6:	463a      	mov	r2, r7
   401b8:	4621      	mov	r1, r4
   401ba:	4630      	mov	r0, r6
   401bc:	f000 fc27 	bl	40a0e <strncmp>
	if (ret == 0 && suff_len > 0) {
   401c0:	b948      	cbnz	r0, 401d6 <aws_jobs_cmp+0x54>
   401c2:	f1b9 0f00 	cmp.w	r9, #0
   401c6:	d006      	beq.n	401d6 <aws_jobs_cmp+0x54>
		/* Everything up until suffix is correct, check suffix */
		return strncmp(&pub[pub_len - suff_len], suffix, suff_len) == 0;
   401c8:	eba8 0009 	sub.w	r0, r8, r9
   401cc:	464a      	mov	r2, r9
   401ce:	4629      	mov	r1, r5
   401d0:	4420      	add	r0, r4
   401d2:	f000 fc1c 	bl	40a0e <strncmp>
	} else {
		return ret == 0;
   401d6:	fab0 f080 	clz	r0, r0
   401da:	0940      	lsrs	r0, r0, #5
	}
}
   401dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return false;
   401e0:	4608      	mov	r0, r1
   401e2:	e7fb      	b.n	401dc <aws_jobs_cmp+0x5a>
   401e4:	4618      	mov	r0, r3
   401e6:	e7f9      	b.n	401dc <aws_jobs_cmp+0x5a>
   401e8:	4618      	mov	r0, r3
   401ea:	e7f7      	b.n	401dc <aws_jobs_cmp+0x5a>

000401ec <strncpy_nullterm>:
{
   401ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   401ee:	4604      	mov	r4, r0
	size_t len = strlen(src) + 1;
   401f0:	4608      	mov	r0, r1
{
   401f2:	4615      	mov	r5, r2
   401f4:	460f      	mov	r7, r1
	size_t len = strlen(src) + 1;
   401f6:	f7dc ff95 	bl	1d124 <strlen>
   401fa:	1c46      	adds	r6, r0, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   401fc:	42ae      	cmp	r6, r5
   401fe:	4632      	mov	r2, r6
   40200:	4620      	mov	r0, r4
   40202:	bf28      	it	cs
   40204:	462a      	movcs	r2, r5
   40206:	4639      	mov	r1, r7
   40208:	f000 fa08 	bl	4061c <memcpy>
	if (len > maxlen) {
   4020c:	42ae      	cmp	r6, r5
		dst[maxlen - 1] = '\0';
   4020e:	bf82      	ittt	hi
   40210:	2300      	movhi	r3, #0
   40212:	1964      	addhi	r4, r4, r5
   40214:	f804 3c01 	strbhi.w	r3, [r4, #-1]
}
   40218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004021a <sensor_sim_attr_set>:
}
   4021a:	2000      	movs	r0, #0
   4021c:	4770      	bx	lr

0004021e <sensor_sim_thread>:
{
   4021e:	b570      	push	{r4, r5, r6, lr}
   40220:	4604      	mov	r4, r0
	struct sensor_sim_data *drv_data = dev->driver_data;
   40222:	6885      	ldr	r5, [r0, #8]
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   40224:	f105 0634 	add.w	r6, r5, #52	; 0x34
	return z_impl_k_sleep(ms);
   40228:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   4022c:	f7f9 ff7c 	bl	3a128 <z_impl_k_sleep>
		if (drv_data->drdy_handler != NULL) {
   40230:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   40232:	2b00      	cmp	r3, #0
   40234:	d0f8      	beq.n	40228 <sensor_sim_thread+0xa>
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   40236:	4631      	mov	r1, r6
   40238:	4620      	mov	r0, r4
   4023a:	4798      	blx	r3
   4023c:	e7f4      	b.n	40228 <sensor_sim_thread+0xa>

0004023e <notify_event>:
	if (drv_data->handler) {
   4023e:	6883      	ldr	r3, [r0, #8]
   40240:	685b      	ldr	r3, [r3, #4]
   40242:	b103      	cbz	r3, 40246 <notify_event+0x8>
		drv_data->handler(dev, evt);
   40244:	4718      	bx	r3
}
   40246:	4770      	bx	lr

00040248 <stop_work_fn>:
{
   40248:	b510      	push	{r4, lr}
	struct device *dev = drv_data->dev;
   4024a:	f6a0 1014 	subw	r0, r0, #2324	; 0x914
{
   4024e:	b0b0      	sub	sp, #192	; 0xc0
	struct device *dev = drv_data->dev;
   40250:	6804      	ldr	r4, [r0, #0]
	struct gps_event evt = {
   40252:	22c0      	movs	r2, #192	; 0xc0
   40254:	2100      	movs	r1, #0
   40256:	4668      	mov	r0, sp
   40258:	f000 fa00 	bl	4065c <memset>
   4025c:	2301      	movs	r3, #1
	notify_event(dev, &evt);
   4025e:	4669      	mov	r1, sp
   40260:	4620      	mov	r0, r4
	struct gps_event evt = {
   40262:	f88d 3000 	strb.w	r3, [sp]
	notify_event(dev, &evt);
   40266:	f7ff ffea 	bl	4023e <notify_event>
}
   4026a:	b030      	add	sp, #192	; 0xc0
   4026c:	bd10      	pop	{r4, pc}

0004026e <start_work_fn>:
{
   4026e:	b530      	push	{r4, r5, lr}
   40270:	4605      	mov	r5, r0
	struct device *dev = drv_data->dev;
   40272:	f6a0 03f4 	subw	r3, r0, #2292	; 0x8f4
{
   40276:	b0b1      	sub	sp, #196	; 0xc4
	struct device *dev = drv_data->dev;
   40278:	681c      	ldr	r4, [r3, #0]
	struct gps_event evt = {
   4027a:	22c0      	movs	r2, #192	; 0xc0
   4027c:	2100      	movs	r1, #0
   4027e:	4668      	mov	r0, sp
   40280:	f000 f9ec 	bl	4065c <memset>
	start(dev, &drv_data->current_cfg);
   40284:	f6a5 01ec 	subw	r1, r5, #2284	; 0x8ec
   40288:	4620      	mov	r0, r4
   4028a:	f7ef f837 	bl	2f2fc <start>
	notify_event(dev, &evt);
   4028e:	4669      	mov	r1, sp
   40290:	4620      	mov	r0, r4
   40292:	f7ff ffd4 	bl	4023e <notify_event>
}
   40296:	b031      	add	sp, #196	; 0xc4
   40298:	bd30      	pop	{r4, r5, pc}

0004029a <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   4029a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   4029e:	4770      	bx	lr

000402a0 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   402a0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   402a4:	4770      	bx	lr

000402a6 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   402a6:	f44f 7080 	mov.w	r0, #256	; 0x100
   402aa:	4770      	bx	lr

000402ac <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   402ac:	f7fd bfe2 	b.w	3e274 <z_clock_idle_exit>

000402b0 <k_mem_pool_malloc>:
{
   402b0:	b507      	push	{r0, r1, r2, lr}
   402b2:	2204      	movs	r2, #4
   402b4:	188a      	adds	r2, r1, r2
   402b6:	d204      	bcs.n	402c2 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   402b8:	2300      	movs	r3, #0
   402ba:	4669      	mov	r1, sp
   402bc:	f7f8 f936 	bl	3852c <k_mem_pool_alloc>
   402c0:	b118      	cbz	r0, 402ca <k_mem_pool_malloc+0x1a>
		return NULL;
   402c2:	2000      	movs	r0, #0
}
   402c4:	b003      	add	sp, #12
   402c6:	f85d fb04 	ldr.w	pc, [sp], #4
   402ca:	e9dd 3200 	ldrd	r3, r2, [sp]
   402ce:	601a      	str	r2, [r3, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   402d0:	9800      	ldr	r0, [sp, #0]
   402d2:	3004      	adds	r0, #4
   402d4:	e7f6      	b.n	402c4 <k_mem_pool_malloc+0x14>

000402d6 <k_free>:
	if (ptr != NULL) {
   402d6:	b110      	cbz	r0, 402de <k_free+0x8>
		k_mem_pool_free_id(ptr);
   402d8:	3804      	subs	r0, #4
   402da:	f7f8 b98f 	b.w	385fc <k_mem_pool_free_id>
}
   402de:	4770      	bx	lr

000402e0 <k_calloc>:
{
   402e0:	b538      	push	{r3, r4, r5, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   402e2:	fb01 f400 	mul.w	r4, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   402e6:	b118      	cbz	r0, 402f0 <k_calloc+0x10>
   402e8:	fbb4 f0f0 	udiv	r0, r4, r0
   402ec:	4281      	cmp	r1, r0
   402ee:	d10a      	bne.n	40306 <k_calloc+0x26>
	ret = k_malloc(bounds);
   402f0:	4620      	mov	r0, r4
   402f2:	f7f8 f9e1 	bl	386b8 <k_malloc>
	if (ret != NULL) {
   402f6:	4605      	mov	r5, r0
   402f8:	b118      	cbz	r0, 40302 <k_calloc+0x22>
__ssp_bos_icheck3(memset, void *, int)
   402fa:	4622      	mov	r2, r4
   402fc:	2100      	movs	r1, #0
   402fe:	f000 f9ad 	bl	4065c <memset>
}
   40302:	4628      	mov	r0, r5
   40304:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   40306:	2500      	movs	r5, #0
   40308:	e7fb      	b.n	40302 <k_calloc+0x22>

0004030a <z_impl_k_mutex_init>:
{
   4030a:	4603      	mov	r3, r0
	mutex->owner = NULL;
   4030c:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   4030e:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   40312:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   40316:	4770      	bx	lr

00040318 <z_queue_node_peek>:
{
   40318:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   4031a:	4604      	mov	r4, r0
   4031c:	b130      	cbz	r0, 4032c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   4031e:	6802      	ldr	r2, [r0, #0]
   40320:	0793      	lsls	r3, r2, #30
   40322:	d003      	beq.n	4032c <z_queue_node_peek+0x14>
		ret = anode->data;
   40324:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   40326:	b109      	cbz	r1, 4032c <z_queue_node_peek+0x14>
			k_free(anode);
   40328:	f7ff ffd5 	bl	402d6 <k_free>
}
   4032c:	4620      	mov	r0, r4
   4032e:	bd10      	pop	{r4, pc}

00040330 <z_impl_k_queue_init>:
	list->head = NULL;
   40330:	2300      	movs	r3, #0
	list->tail = NULL;
   40332:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   40336:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   40338:	f100 030c 	add.w	r3, r0, #12
   4033c:	e9c0 3303 	strd	r3, r3, [r0, #12]
}
   40340:	4770      	bx	lr

00040342 <k_queue_append>:
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   40342:	460a      	mov	r2, r1
   40344:	2300      	movs	r3, #0
   40346:	6841      	ldr	r1, [r0, #4]
   40348:	f7f8 bcba 	b.w	38cc0 <queue_insert>

0004034c <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   4034c:	7b43      	ldrb	r3, [r0, #13]
   4034e:	06db      	lsls	r3, r3, #27
   40350:	bf03      	ittte	eq
   40352:	6980      	ldreq	r0, [r0, #24]
   40354:	fab0 f080 	clzeq	r0, r0
   40358:	0940      	lsreq	r0, r0, #5
   4035a:	2000      	movne	r0, #0
}
   4035c:	4770      	bx	lr

0004035e <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   4035e:	f990 000e 	ldrsb.w	r0, [r0, #14]
   40362:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   40366:	4298      	cmp	r0, r3
   40368:	bfac      	ite	ge
   4036a:	2000      	movge	r0, #0
   4036c:	2001      	movlt	r0, #1
   4036e:	4770      	bx	lr

00040370 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   40370:	4603      	mov	r3, r0
   40372:	b920      	cbnz	r0, 4037e <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   40374:	f3ef 8205 	mrs	r2, IPSR
   40378:	b90a      	cbnz	r2, 4037e <z_reschedule_irqlock+0xe>
   4037a:	f7e3 bff7 	b.w	2436c <arch_swap>
   4037e:	f383 8811 	msr	BASEPRI, r3
   40382:	f3bf 8f6f 	isb	sy
}
   40386:	4770      	bx	lr

00040388 <z_reschedule_unlocked>:
	__asm__ volatile(
   40388:	f04f 0320 	mov.w	r3, #32
   4038c:	f3ef 8011 	mrs	r0, BASEPRI
   40390:	f383 8811 	msr	BASEPRI, r3
   40394:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   40398:	f7ff bfea 	b.w	40370 <z_reschedule_irqlock>

0004039c <z_priq_dumb_best>:
	return list->head == list;
   4039c:	6803      	ldr	r3, [r0, #0]
}
   4039e:	4298      	cmp	r0, r3
   403a0:	bf14      	ite	ne
   403a2:	4618      	movne	r0, r3
   403a4:	2000      	moveq	r0, #0
   403a6:	4770      	bx	lr

000403a8 <z_unpend_all>:
{
   403a8:	b570      	push	{r4, r5, r6, lr}
   403aa:	4606      	mov	r6, r0
	int need_sched = 0;
   403ac:	2500      	movs	r5, #0
   403ae:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   403b0:	42a6      	cmp	r6, r4
   403b2:	d000      	beq.n	403b6 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   403b4:	b90c      	cbnz	r4, 403ba <z_unpend_all+0x12>
}
   403b6:	4628      	mov	r0, r5
   403b8:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(thread);
   403ba:	4620      	mov	r0, r4
   403bc:	f7f8 ff58 	bl	39270 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   403c0:	4620      	mov	r0, r4
   403c2:	f7ff ffc3 	bl	4034c <z_is_thread_ready>
		need_sched = 1;
   403c6:	2501      	movs	r5, #1
   403c8:	2800      	cmp	r0, #0
   403ca:	d0f0      	beq.n	403ae <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   403cc:	4620      	mov	r0, r4
   403ce:	f7f9 f857 	bl	39480 <z_add_thread_to_ready_q>
   403d2:	e7ec      	b.n	403ae <z_unpend_all+0x6>

000403d4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   403d4:	b15a      	cbz	r2, 403ee <z_impl_k_sem_init+0x1a>
   403d6:	428a      	cmp	r2, r1
   403d8:	d309      	bcc.n	403ee <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   403da:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   403de:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   403e2:	e9c0 0000 	strd	r0, r0, [r0]
   403e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   403ea:	2000      	movs	r0, #0
   403ec:	4770      	bx	lr
		return -EINVAL;
   403ee:	f06f 0015 	mvn.w	r0, #21
}
   403f2:	4770      	bx	lr

000403f4 <k_is_in_isr>:
   403f4:	f3ef 8005 	mrs	r0, IPSR
}
   403f8:	3000      	adds	r0, #0
   403fa:	bf18      	it	ne
   403fc:	2001      	movne	r0, #1
   403fe:	4770      	bx	lr

00040400 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   40400:	f7e2 be18 	b.w	23034 <arch_busy_wait>

00040404 <z_impl_k_thread_name_set>:
}
   40404:	f06f 0057 	mvn.w	r0, #87	; 0x57
   40408:	4770      	bx	lr

0004040a <k_thread_name_get>:
}
   4040a:	2000      	movs	r0, #0
   4040c:	4770      	bx	lr

0004040e <z_new_thread_init>:
{
   4040e:	b510      	push	{r4, lr}
	thread_base->user_options = (u8_t)options;
   40410:	9c02      	ldr	r4, [sp, #8]
	thread_base->prio = priority;
   40412:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   40414:	7304      	strb	r4, [r0, #12]
	thread_base->sched_locked = 0U;
   40416:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   40418:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   4041a:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   4041c:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   4041e:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   40422:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   40426:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   4042a:	bd10      	pop	{r4, pc}

0004042c <z_thread_single_resume>:
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   4042c:	7b42      	ldrb	r2, [r0, #13]
   4042e:	f022 0110 	bic.w	r1, r2, #16
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   40432:	0712      	lsls	r2, r2, #28
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   40434:	7341      	strb	r1, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   40436:	d103      	bne.n	40440 <z_thread_single_resume+0x14>
	if (z_is_thread_ready(thread)) {
   40438:	6983      	ldr	r3, [r0, #24]
   4043a:	b90b      	cbnz	r3, 40440 <z_thread_single_resume+0x14>
		z_add_thread_to_ready_q(thread);
   4043c:	f7f9 b820 	b.w	39480 <z_add_thread_to_ready_q>
}
   40440:	4770      	bx	lr

00040442 <k_work_submit_to_queue>:
{
   40442:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   40444:	f101 0308 	add.w	r3, r1, #8
   40448:	e8d3 2fef 	ldaex	r2, [r3]
   4044c:	f042 0c01 	orr.w	ip, r2, #1
   40450:	e8c3 cfee 	stlex	lr, ip, [r3]
   40454:	f1be 0f00 	cmp.w	lr, #0
   40458:	d1f6      	bne.n	40448 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   4045a:	07d3      	lsls	r3, r2, #31
   4045c:	d403      	bmi.n	40466 <k_work_submit_to_queue+0x24>
}
   4045e:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   40462:	f7ff bf6e 	b.w	40342 <k_queue_append>
}
   40466:	f85d fb04 	ldr.w	pc, [sp], #4

0004046a <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   4046a:	f1a0 010c 	sub.w	r1, r0, #12
   4046e:	6900      	ldr	r0, [r0, #16]
   40470:	f7ff bfe7 	b.w	40442 <k_work_submit_to_queue>

00040474 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   40474:	69c3      	ldr	r3, [r0, #28]
{
   40476:	b570      	push	{r4, r5, r6, lr}
   40478:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   4047a:	2b00      	cmp	r3, #0
   4047c:	d039      	beq.n	404f2 <work_cancel+0x7e>
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   4047e:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   40482:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   40486:	07db      	lsls	r3, r3, #31
   40488:	d52f      	bpl.n	404ea <work_cancel+0x76>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   4048a:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   4048c:	69c2      	ldr	r2, [r0, #28]
   4048e:	6813      	ldr	r3, [r2, #0]
   40490:	b913      	cbnz	r3, 40498 <work_cancel+0x24>
			return -EINVAL;
   40492:	f06f 0015 	mvn.w	r0, #21
}
   40496:	bd70      	pop	{r4, r5, r6, pc}
   40498:	429c      	cmp	r4, r3
   4049a:	d121      	bne.n	404e0 <work_cancel+0x6c>
Z_GENLIST_REMOVE(sflist, sfnode)
   4049c:	6823      	ldr	r3, [r4, #0]
   4049e:	6856      	ldr	r6, [r2, #4]
   404a0:	f023 0003 	bic.w	r0, r3, #3
   404a4:	b991      	cbnz	r1, 404cc <work_cancel+0x58>
   404a6:	42b4      	cmp	r4, r6
	list->head = node;
   404a8:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   404aa:	d100      	bne.n	404ae <work_cancel+0x3a>
	list->tail = node;
   404ac:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   404ae:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   404b0:	f003 0303 	and.w	r3, r3, #3
   404b4:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   404b6:	2000      	movs	r0, #0
   404b8:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   404ba:	e8d5 3fef 	ldaex	r3, [r5]
   404be:	f023 0301 	bic.w	r3, r3, #1
   404c2:	e8c5 3fe2 	stlex	r2, r3, [r5]
   404c6:	2a00      	cmp	r2, #0
   404c8:	d0e5      	beq.n	40496 <work_cancel+0x22>
   404ca:	e7f6      	b.n	404ba <work_cancel+0x46>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   404cc:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   404ce:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   404d0:	f003 0303 	and.w	r3, r3, #3
   404d4:	ea43 0300 	orr.w	r3, r3, r0
   404d8:	600b      	str	r3, [r1, #0]
	list->tail = node;
   404da:	bf08      	it	eq
   404dc:	6051      	streq	r1, [r2, #4]
   404de:	e7e6      	b.n	404ae <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   404e0:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   404e2:	4619      	mov	r1, r3
   404e4:	f020 0303 	bic.w	r3, r0, #3
   404e8:	e7d2      	b.n	40490 <work_cancel+0x1c>
		(void)z_abort_timeout(&work->timeout);
   404ea:	300c      	adds	r0, #12
   404ec:	f7fa fb1e 	bl	3ab2c <z_abort_timeout>
   404f0:	e7e1      	b.n	404b6 <work_cancel+0x42>
		return -EAGAIN;
   404f2:	f06f 000a 	mvn.w	r0, #10
   404f6:	e7ce      	b.n	40496 <work_cancel+0x22>

000404f8 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   404f8:	2300      	movs	r3, #0
   404fa:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   404fe:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   40502:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   40504:	61c3      	str	r3, [r0, #28]
}
   40506:	4770      	bx	lr

00040508 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   40508:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   4050a:	f7fa fd07 	bl	3af1c <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   4050e:	bd08      	pop	{r3, pc}

00040510 <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   40510:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   40512:	f7fa fd03 	bl	3af1c <z_tick_get>
			return (t * to_hz + off) / from_hz;
   40516:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   4051a:	fba0 2304 	umull	r2, r3, r0, r4
   4051e:	fb04 3301 	mla	r3, r4, r1, r3
   40522:	0bd0      	lsrs	r0, r2, #15
}
   40524:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   40528:	0bd9      	lsrs	r1, r3, #15
   4052a:	bd10      	pop	{r4, pc}

0004052c <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   4052c:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   4052e:	6884      	ldr	r4, [r0, #8]
{
   40530:	4605      	mov	r5, r0
   40532:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   40534:	b19c      	cbz	r4, 4055e <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   40536:	68a3      	ldr	r3, [r4, #8]
   40538:	b95b      	cbnz	r3, 40552 <signal_poll_event+0x26>
	int retcode = 0;
   4053a:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   4053c:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   4053e:	2300      	movs	r3, #0
   40540:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   40542:	68eb      	ldr	r3, [r5, #12]
   40544:	f3c3 3204 	ubfx	r2, r3, #12, #5
   40548:	4316      	orrs	r6, r2
   4054a:	f366 3310 	bfi	r3, r6, #12, #5
   4054e:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   40550:	e004      	b.n	4055c <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   40552:	4798      	blx	r3
		poller->is_polling = false;
   40554:	2300      	movs	r3, #0
		if (retcode < 0) {
   40556:	2800      	cmp	r0, #0
		poller->is_polling = false;
   40558:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   4055a:	daf0      	bge.n	4053e <signal_poll_event+0x12>
}
   4055c:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   4055e:	4620      	mov	r0, r4
   40560:	e7ed      	b.n	4053e <signal_poll_event+0x12>

00040562 <add_event>:
{
   40562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   40564:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   40566:	e9d0 2300 	ldrd	r2, r3, [r0]
   4056a:	4290      	cmp	r0, r2
   4056c:	4604      	mov	r4, r0
   4056e:	460d      	mov	r5, r1
   40570:	d106      	bne.n	40580 <add_event+0x1e>
	node->prev = list->tail;
   40572:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   40574:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   40576:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   40578:	6863      	ldr	r3, [r4, #4]
   4057a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   4057c:	6065      	str	r5, [r4, #4]
}
   4057e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   40580:	2b00      	cmp	r3, #0
   40582:	d0f6      	beq.n	40572 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   40584:	689b      	ldr	r3, [r3, #8]
   40586:	6879      	ldr	r1, [r7, #4]
   40588:	6858      	ldr	r0, [r3, #4]
   4058a:	f7ff fee8 	bl	4035e <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   4058e:	2800      	cmp	r0, #0
   40590:	d1ef      	bne.n	40572 <add_event+0x10>
	return list->head == list;
   40592:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   40594:	42b4      	cmp	r4, r6
   40596:	d0ec      	beq.n	40572 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   40598:	2e00      	cmp	r6, #0
   4059a:	d0ea      	beq.n	40572 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   4059c:	68b3      	ldr	r3, [r6, #8]
   4059e:	6878      	ldr	r0, [r7, #4]
   405a0:	6859      	ldr	r1, [r3, #4]
   405a2:	f7ff fedc 	bl	4035e <z_is_t1_higher_prio_than_t2>
   405a6:	b128      	cbz	r0, 405b4 <add_event+0x52>
	node->prev = successor->prev;
   405a8:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   405aa:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   405ae:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   405b0:	6075      	str	r5, [r6, #4]
			return;
   405b2:	e7e4      	b.n	4057e <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   405b4:	6863      	ldr	r3, [r4, #4]
   405b6:	429e      	cmp	r6, r3
   405b8:	d0db      	beq.n	40572 <add_event+0x10>
   405ba:	6836      	ldr	r6, [r6, #0]
   405bc:	e7ec      	b.n	40598 <add_event+0x36>

000405be <z_handle_obj_poll_events>:
	return list->head == list;
   405be:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   405c0:	4298      	cmp	r0, r3
   405c2:	d009      	beq.n	405d8 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   405c4:	e9d3 2000 	ldrd	r2, r0, [r3]
   405c8:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   405ca:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   405cc:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   405ce:	4618      	mov	r0, r3
	node->prev = NULL;
   405d0:	e9c3 2200 	strd	r2, r2, [r3]
   405d4:	f7ff bfaa 	b.w	4052c <signal_poll_event>
	}
}
   405d8:	4770      	bx	lr

000405da <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   405da:	4770      	bx	lr

000405dc <atoi>:
   405dc:	220a      	movs	r2, #10
   405de:	2100      	movs	r1, #0
   405e0:	f7fb bedc 	b.w	3c39c <strtol>

000405e4 <memchr>:
   405e4:	b2c9      	uxtb	r1, r1
   405e6:	4402      	add	r2, r0
   405e8:	b510      	push	{r4, lr}
   405ea:	4290      	cmp	r0, r2
   405ec:	4603      	mov	r3, r0
   405ee:	d101      	bne.n	405f4 <memchr+0x10>
   405f0:	2300      	movs	r3, #0
   405f2:	e003      	b.n	405fc <memchr+0x18>
   405f4:	781c      	ldrb	r4, [r3, #0]
   405f6:	3001      	adds	r0, #1
   405f8:	428c      	cmp	r4, r1
   405fa:	d1f6      	bne.n	405ea <memchr+0x6>
   405fc:	4618      	mov	r0, r3
   405fe:	bd10      	pop	{r4, pc}

00040600 <memcmp>:
   40600:	b530      	push	{r4, r5, lr}
   40602:	3901      	subs	r1, #1
   40604:	2400      	movs	r4, #0
   40606:	42a2      	cmp	r2, r4
   40608:	d101      	bne.n	4060e <memcmp+0xe>
   4060a:	2000      	movs	r0, #0
   4060c:	e005      	b.n	4061a <memcmp+0x1a>
   4060e:	5d03      	ldrb	r3, [r0, r4]
   40610:	3401      	adds	r4, #1
   40612:	5d0d      	ldrb	r5, [r1, r4]
   40614:	42ab      	cmp	r3, r5
   40616:	d0f6      	beq.n	40606 <memcmp+0x6>
   40618:	1b58      	subs	r0, r3, r5
   4061a:	bd30      	pop	{r4, r5, pc}

0004061c <memcpy>:
   4061c:	440a      	add	r2, r1
   4061e:	1e43      	subs	r3, r0, #1
   40620:	4291      	cmp	r1, r2
   40622:	d100      	bne.n	40626 <memcpy+0xa>
   40624:	4770      	bx	lr
   40626:	b510      	push	{r4, lr}
   40628:	f811 4b01 	ldrb.w	r4, [r1], #1
   4062c:	4291      	cmp	r1, r2
   4062e:	f803 4f01 	strb.w	r4, [r3, #1]!
   40632:	d1f9      	bne.n	40628 <memcpy+0xc>
   40634:	bd10      	pop	{r4, pc}

00040636 <__memcpy_chk>:
   40636:	429a      	cmp	r2, r3
   40638:	b508      	push	{r3, lr}
   4063a:	d901      	bls.n	40640 <__memcpy_chk+0xa>
   4063c:	f7fc f836 	bl	3c6ac <__chk_fail>
   40640:	4281      	cmp	r1, r0
   40642:	d804      	bhi.n	4064e <__memcpy_chk+0x18>
   40644:	188b      	adds	r3, r1, r2
   40646:	4298      	cmp	r0, r3
   40648:	d3f8      	bcc.n	4063c <__memcpy_chk+0x6>
   4064a:	4281      	cmp	r1, r0
   4064c:	d102      	bne.n	40654 <__memcpy_chk+0x1e>
   4064e:	1883      	adds	r3, r0, r2
   40650:	4299      	cmp	r1, r3
   40652:	d3f3      	bcc.n	4063c <__memcpy_chk+0x6>
   40654:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   40658:	f7ff bfe0 	b.w	4061c <memcpy>

0004065c <memset>:
   4065c:	4402      	add	r2, r0
   4065e:	4603      	mov	r3, r0
   40660:	4293      	cmp	r3, r2
   40662:	d100      	bne.n	40666 <memset+0xa>
   40664:	4770      	bx	lr
   40666:	f803 1b01 	strb.w	r1, [r3], #1
   4066a:	e7f9      	b.n	40660 <memset+0x4>

0004066c <__sfputc_r>:
   4066c:	6893      	ldr	r3, [r2, #8]
   4066e:	3b01      	subs	r3, #1
   40670:	2b00      	cmp	r3, #0
   40672:	6093      	str	r3, [r2, #8]
   40674:	b410      	push	{r4}
   40676:	da08      	bge.n	4068a <__sfputc_r+0x1e>
   40678:	6994      	ldr	r4, [r2, #24]
   4067a:	42a3      	cmp	r3, r4
   4067c:	db01      	blt.n	40682 <__sfputc_r+0x16>
   4067e:	290a      	cmp	r1, #10
   40680:	d103      	bne.n	4068a <__sfputc_r+0x1e>
   40682:	f85d 4b04 	ldr.w	r4, [sp], #4
   40686:	f7fb bf3f 	b.w	3c508 <__swbuf_r>
   4068a:	6813      	ldr	r3, [r2, #0]
   4068c:	1c58      	adds	r0, r3, #1
   4068e:	6010      	str	r0, [r2, #0]
   40690:	4608      	mov	r0, r1
   40692:	7019      	strb	r1, [r3, #0]
   40694:	f85d 4b04 	ldr.w	r4, [sp], #4
   40698:	4770      	bx	lr

0004069a <__sfputs_r>:
   4069a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4069c:	4606      	mov	r6, r0
   4069e:	460f      	mov	r7, r1
   406a0:	4614      	mov	r4, r2
   406a2:	18d5      	adds	r5, r2, r3
   406a4:	42ac      	cmp	r4, r5
   406a6:	d101      	bne.n	406ac <__sfputs_r+0x12>
   406a8:	2000      	movs	r0, #0
   406aa:	e007      	b.n	406bc <__sfputs_r+0x22>
   406ac:	463a      	mov	r2, r7
   406ae:	f814 1b01 	ldrb.w	r1, [r4], #1
   406b2:	4630      	mov	r0, r6
   406b4:	f7ff ffda 	bl	4066c <__sfputc_r>
   406b8:	1c43      	adds	r3, r0, #1
   406ba:	d1f3      	bne.n	406a4 <__sfputs_r+0xa>
   406bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000406be <__cvt>:
   406be:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   406c2:	ec55 4b10 	vmov	r4, r5, d0
   406c6:	2d00      	cmp	r5, #0
   406c8:	460e      	mov	r6, r1
   406ca:	4691      	mov	r9, r2
   406cc:	4619      	mov	r1, r3
   406ce:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   406d2:	f04f 0200 	mov.w	r2, #0
   406d6:	da03      	bge.n	406e0 <__cvt+0x22>
   406d8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   406dc:	222d      	movs	r2, #45	; 0x2d
   406de:	461d      	mov	r5, r3
   406e0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   406e2:	700a      	strb	r2, [r1, #0]
   406e4:	f027 0720 	bic.w	r7, r7, #32
   406e8:	2f46      	cmp	r7, #70	; 0x46
   406ea:	d004      	beq.n	406f6 <__cvt+0x38>
   406ec:	2f45      	cmp	r7, #69	; 0x45
   406ee:	d100      	bne.n	406f2 <__cvt+0x34>
   406f0:	3601      	adds	r6, #1
   406f2:	2102      	movs	r1, #2
   406f4:	e000      	b.n	406f8 <__cvt+0x3a>
   406f6:	2103      	movs	r1, #3
   406f8:	ab03      	add	r3, sp, #12
   406fa:	4632      	mov	r2, r6
   406fc:	9301      	str	r3, [sp, #4]
   406fe:	ab02      	add	r3, sp, #8
   40700:	ec45 4b10 	vmov	d0, r4, r5
   40704:	9300      	str	r3, [sp, #0]
   40706:	4653      	mov	r3, sl
   40708:	f7df f916 	bl	1f938 <_dtoa_r>
   4070c:	2f47      	cmp	r7, #71	; 0x47
   4070e:	4680      	mov	r8, r0
   40710:	d102      	bne.n	40718 <__cvt+0x5a>
   40712:	f019 0f01 	tst.w	r9, #1
   40716:	d022      	beq.n	4075e <__cvt+0xa0>
   40718:	2f46      	cmp	r7, #70	; 0x46
   4071a:	eb08 0906 	add.w	r9, r8, r6
   4071e:	d111      	bne.n	40744 <__cvt+0x86>
   40720:	f898 3000 	ldrb.w	r3, [r8]
   40724:	2b30      	cmp	r3, #48	; 0x30
   40726:	d10a      	bne.n	4073e <__cvt+0x80>
   40728:	2200      	movs	r2, #0
   4072a:	2300      	movs	r3, #0
   4072c:	4620      	mov	r0, r4
   4072e:	4629      	mov	r1, r5
   40730:	f7dc faaa 	bl	1cc88 <__aeabi_dcmpeq>
   40734:	b918      	cbnz	r0, 4073e <__cvt+0x80>
   40736:	f1c6 0601 	rsb	r6, r6, #1
   4073a:	f8ca 6000 	str.w	r6, [sl]
   4073e:	f8da 3000 	ldr.w	r3, [sl]
   40742:	4499      	add	r9, r3
   40744:	2200      	movs	r2, #0
   40746:	2300      	movs	r3, #0
   40748:	4620      	mov	r0, r4
   4074a:	4629      	mov	r1, r5
   4074c:	f7dc fa9c 	bl	1cc88 <__aeabi_dcmpeq>
   40750:	b108      	cbz	r0, 40756 <__cvt+0x98>
   40752:	f8cd 900c 	str.w	r9, [sp, #12]
   40756:	2230      	movs	r2, #48	; 0x30
   40758:	9b03      	ldr	r3, [sp, #12]
   4075a:	454b      	cmp	r3, r9
   4075c:	d308      	bcc.n	40770 <__cvt+0xb2>
   4075e:	9b03      	ldr	r3, [sp, #12]
   40760:	4640      	mov	r0, r8
   40762:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   40764:	eba3 0308 	sub.w	r3, r3, r8
   40768:	6013      	str	r3, [r2, #0]
   4076a:	b004      	add	sp, #16
   4076c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   40770:	1c59      	adds	r1, r3, #1
   40772:	9103      	str	r1, [sp, #12]
   40774:	701a      	strb	r2, [r3, #0]
   40776:	e7ef      	b.n	40758 <__cvt+0x9a>

00040778 <__exponent>:
   40778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4077a:	2900      	cmp	r1, #0
   4077c:	7002      	strb	r2, [r0, #0]
   4077e:	bfba      	itte	lt
   40780:	4249      	neglt	r1, r1
   40782:	232d      	movlt	r3, #45	; 0x2d
   40784:	232b      	movge	r3, #43	; 0x2b
   40786:	2909      	cmp	r1, #9
   40788:	7043      	strb	r3, [r0, #1]
   4078a:	dd22      	ble.n	407d2 <__exponent+0x5a>
   4078c:	f10d 0307 	add.w	r3, sp, #7
   40790:	260a      	movs	r6, #10
   40792:	461f      	mov	r7, r3
   40794:	2963      	cmp	r1, #99	; 0x63
   40796:	f103 35ff 	add.w	r5, r3, #4294967295
   4079a:	fb91 f2f6 	sdiv	r2, r1, r6
   4079e:	fb06 1412 	mls	r4, r6, r2, r1
   407a2:	f104 0430 	add.w	r4, r4, #48	; 0x30
   407a6:	f803 4c01 	strb.w	r4, [r3, #-1]
   407aa:	dc0a      	bgt.n	407c2 <__exponent+0x4a>
   407ac:	3230      	adds	r2, #48	; 0x30
   407ae:	3b02      	subs	r3, #2
   407b0:	f805 2c01 	strb.w	r2, [r5, #-1]
   407b4:	1c82      	adds	r2, r0, #2
   407b6:	42bb      	cmp	r3, r7
   407b8:	4614      	mov	r4, r2
   407ba:	d305      	bcc.n	407c8 <__exponent+0x50>
   407bc:	1a20      	subs	r0, r4, r0
   407be:	b003      	add	sp, #12
   407c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   407c2:	462b      	mov	r3, r5
   407c4:	4611      	mov	r1, r2
   407c6:	e7e5      	b.n	40794 <__exponent+0x1c>
   407c8:	f813 1b01 	ldrb.w	r1, [r3], #1
   407cc:	f802 1b01 	strb.w	r1, [r2], #1
   407d0:	e7f1      	b.n	407b6 <__exponent+0x3e>
   407d2:	2330      	movs	r3, #48	; 0x30
   407d4:	1d04      	adds	r4, r0, #4
   407d6:	4419      	add	r1, r3
   407d8:	7083      	strb	r3, [r0, #2]
   407da:	70c1      	strb	r1, [r0, #3]
   407dc:	e7ee      	b.n	407bc <__exponent+0x44>

000407de <_printf_common>:
   407de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   407e2:	4691      	mov	r9, r2
   407e4:	461f      	mov	r7, r3
   407e6:	688a      	ldr	r2, [r1, #8]
   407e8:	4606      	mov	r6, r0
   407ea:	690b      	ldr	r3, [r1, #16]
   407ec:	460c      	mov	r4, r1
   407ee:	f8dd 8020 	ldr.w	r8, [sp, #32]
   407f2:	4293      	cmp	r3, r2
   407f4:	bfb8      	it	lt
   407f6:	4613      	movlt	r3, r2
   407f8:	f8c9 3000 	str.w	r3, [r9]
   407fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   40800:	b112      	cbz	r2, 40808 <_printf_common+0x2a>
   40802:	3301      	adds	r3, #1
   40804:	f8c9 3000 	str.w	r3, [r9]
   40808:	6823      	ldr	r3, [r4, #0]
   4080a:	0699      	lsls	r1, r3, #26
   4080c:	bf42      	ittt	mi
   4080e:	f8d9 3000 	ldrmi.w	r3, [r9]
   40812:	3302      	addmi	r3, #2
   40814:	f8c9 3000 	strmi.w	r3, [r9]
   40818:	6825      	ldr	r5, [r4, #0]
   4081a:	f015 0506 	ands.w	r5, r5, #6
   4081e:	d107      	bne.n	40830 <_printf_common+0x52>
   40820:	f104 0a19 	add.w	sl, r4, #25
   40824:	68e3      	ldr	r3, [r4, #12]
   40826:	f8d9 2000 	ldr.w	r2, [r9]
   4082a:	1a9b      	subs	r3, r3, r2
   4082c:	42ab      	cmp	r3, r5
   4082e:	dc2b      	bgt.n	40888 <_printf_common+0xaa>
   40830:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   40834:	6822      	ldr	r2, [r4, #0]
   40836:	3300      	adds	r3, #0
   40838:	bf18      	it	ne
   4083a:	2301      	movne	r3, #1
   4083c:	0692      	lsls	r2, r2, #26
   4083e:	d430      	bmi.n	408a2 <_printf_common+0xc4>
   40840:	f104 0243 	add.w	r2, r4, #67	; 0x43
   40844:	4639      	mov	r1, r7
   40846:	4630      	mov	r0, r6
   40848:	47c0      	blx	r8
   4084a:	3001      	adds	r0, #1
   4084c:	d023      	beq.n	40896 <_printf_common+0xb8>
   4084e:	6823      	ldr	r3, [r4, #0]
   40850:	341a      	adds	r4, #26
   40852:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   40856:	f003 0306 	and.w	r3, r3, #6
   4085a:	f8d9 2000 	ldr.w	r2, [r9]
   4085e:	f04f 0900 	mov.w	r9, #0
   40862:	2b04      	cmp	r3, #4
   40864:	f854 3c12 	ldr.w	r3, [r4, #-18]
   40868:	bf08      	it	eq
   4086a:	1aad      	subeq	r5, r5, r2
   4086c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   40870:	bf14      	ite	ne
   40872:	2500      	movne	r5, #0
   40874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   40878:	4293      	cmp	r3, r2
   4087a:	bfc4      	itt	gt
   4087c:	1a9b      	subgt	r3, r3, r2
   4087e:	18ed      	addgt	r5, r5, r3
   40880:	454d      	cmp	r5, r9
   40882:	d11a      	bne.n	408ba <_printf_common+0xdc>
   40884:	2000      	movs	r0, #0
   40886:	e008      	b.n	4089a <_printf_common+0xbc>
   40888:	2301      	movs	r3, #1
   4088a:	4652      	mov	r2, sl
   4088c:	4639      	mov	r1, r7
   4088e:	4630      	mov	r0, r6
   40890:	47c0      	blx	r8
   40892:	3001      	adds	r0, #1
   40894:	d103      	bne.n	4089e <_printf_common+0xc0>
   40896:	f04f 30ff 	mov.w	r0, #4294967295
   4089a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   4089e:	3501      	adds	r5, #1
   408a0:	e7c0      	b.n	40824 <_printf_common+0x46>
   408a2:	18e1      	adds	r1, r4, r3
   408a4:	1c5a      	adds	r2, r3, #1
   408a6:	2030      	movs	r0, #48	; 0x30
   408a8:	3302      	adds	r3, #2
   408aa:	4422      	add	r2, r4
   408ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   408b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   408b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   408b8:	e7c2      	b.n	40840 <_printf_common+0x62>
   408ba:	2301      	movs	r3, #1
   408bc:	4622      	mov	r2, r4
   408be:	4639      	mov	r1, r7
   408c0:	4630      	mov	r0, r6
   408c2:	47c0      	blx	r8
   408c4:	3001      	adds	r0, #1
   408c6:	d0e6      	beq.n	40896 <_printf_common+0xb8>
   408c8:	f109 0901 	add.w	r9, r9, #1
   408cc:	e7d8      	b.n	40880 <_printf_common+0xa2>

000408ce <__sprintf_chk>:
   408ce:	b408      	push	{r3}
   408d0:	b517      	push	{r0, r1, r2, r4, lr}
   408d2:	ab05      	add	r3, sp, #20
   408d4:	1e14      	subs	r4, r2, #0
   408d6:	f853 1b04 	ldr.w	r1, [r3], #4
   408da:	9301      	str	r3, [sp, #4]
   408dc:	da07      	bge.n	408ee <__sprintf_chk+0x20>
   408de:	461a      	mov	r2, r3
   408e0:	f7fb fe08 	bl	3c4f4 <vsiprintf>
   408e4:	b003      	add	sp, #12
   408e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   408ea:	b001      	add	sp, #4
   408ec:	4770      	bx	lr
   408ee:	460a      	mov	r2, r1
   408f0:	4621      	mov	r1, r4
   408f2:	f7fb fddb 	bl	3c4ac <vsniprintf>
   408f6:	2800      	cmp	r0, #0
   408f8:	dbf4      	blt.n	408e4 <__sprintf_chk+0x16>
   408fa:	42a0      	cmp	r0, r4
   408fc:	d3f2      	bcc.n	408e4 <__sprintf_chk+0x16>
   408fe:	f7fb fed5 	bl	3c6ac <__chk_fail>

00040902 <__sread>:
   40902:	b510      	push	{r4, lr}
   40904:	460c      	mov	r4, r1
   40906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   4090a:	f7fc ff55 	bl	3d7b8 <_read_r>
   4090e:	2800      	cmp	r0, #0
   40910:	bfab      	itete	ge
   40912:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   40914:	89a3      	ldrhlt	r3, [r4, #12]
   40916:	181b      	addge	r3, r3, r0
   40918:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   4091c:	bfac      	ite	ge
   4091e:	6563      	strge	r3, [r4, #84]	; 0x54
   40920:	81a3      	strhlt	r3, [r4, #12]
   40922:	bd10      	pop	{r4, pc}

00040924 <__seofread>:
   40924:	2000      	movs	r0, #0
   40926:	4770      	bx	lr

00040928 <__swrite>:
   40928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4092c:	461f      	mov	r7, r3
   4092e:	898b      	ldrh	r3, [r1, #12]
   40930:	4605      	mov	r5, r0
   40932:	460c      	mov	r4, r1
   40934:	05db      	lsls	r3, r3, #23
   40936:	4616      	mov	r6, r2
   40938:	d505      	bpl.n	40946 <__swrite+0x1e>
   4093a:	2302      	movs	r3, #2
   4093c:	2200      	movs	r2, #0
   4093e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   40942:	f7fc fa8d 	bl	3ce60 <_lseek_r>
   40946:	89a3      	ldrh	r3, [r4, #12]
   40948:	4632      	mov	r2, r6
   4094a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   4094e:	4628      	mov	r0, r5
   40950:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   40954:	81a3      	strh	r3, [r4, #12]
   40956:	463b      	mov	r3, r7
   40958:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   4095c:	f7fb be26 	b.w	3c5ac <_write_r>

00040960 <__sseek>:
   40960:	b510      	push	{r4, lr}
   40962:	460c      	mov	r4, r1
   40964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   40968:	f7fc fa7a 	bl	3ce60 <_lseek_r>
   4096c:	1c43      	adds	r3, r0, #1
   4096e:	89a3      	ldrh	r3, [r4, #12]
   40970:	bf15      	itete	ne
   40972:	6560      	strne	r0, [r4, #84]	; 0x54
   40974:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   40978:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   4097c:	81a3      	strheq	r3, [r4, #12]
   4097e:	bf18      	it	ne
   40980:	81a3      	strhne	r3, [r4, #12]
   40982:	bd10      	pop	{r4, pc}

00040984 <__sclose>:
   40984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   40988:	f7fb beb4 	b.w	3c6f4 <_close_r>

0004098c <strcat>:
   4098c:	4603      	mov	r3, r0
   4098e:	b510      	push	{r4, lr}
   40990:	461a      	mov	r2, r3
   40992:	f812 4b01 	ldrb.w	r4, [r2], #1
   40996:	b93c      	cbnz	r4, 409a8 <strcat+0x1c>
   40998:	3b01      	subs	r3, #1
   4099a:	f811 2b01 	ldrb.w	r2, [r1], #1
   4099e:	f803 2f01 	strb.w	r2, [r3, #1]!
   409a2:	2a00      	cmp	r2, #0
   409a4:	d1f9      	bne.n	4099a <strcat+0xe>
   409a6:	bd10      	pop	{r4, pc}
   409a8:	4613      	mov	r3, r2
   409aa:	e7f1      	b.n	40990 <strcat+0x4>

000409ac <strchr>:
   409ac:	b2c9      	uxtb	r1, r1
   409ae:	4603      	mov	r3, r0
   409b0:	f810 2b01 	ldrb.w	r2, [r0], #1
   409b4:	b11a      	cbz	r2, 409be <strchr+0x12>
   409b6:	428a      	cmp	r2, r1
   409b8:	d1f9      	bne.n	409ae <strchr+0x2>
   409ba:	4618      	mov	r0, r3
   409bc:	4770      	bx	lr
   409be:	2900      	cmp	r1, #0
   409c0:	bf18      	it	ne
   409c2:	2300      	movne	r3, #0
   409c4:	e7f9      	b.n	409ba <strchr+0xe>

000409c6 <strcpy>:
   409c6:	4603      	mov	r3, r0
   409c8:	f811 2b01 	ldrb.w	r2, [r1], #1
   409cc:	f803 2b01 	strb.w	r2, [r3], #1
   409d0:	2a00      	cmp	r2, #0
   409d2:	d1f9      	bne.n	409c8 <strcpy+0x2>
   409d4:	4770      	bx	lr

000409d6 <__strcpy_chk>:
   409d6:	b570      	push	{r4, r5, r6, lr}
   409d8:	4605      	mov	r5, r0
   409da:	4608      	mov	r0, r1
   409dc:	4616      	mov	r6, r2
   409de:	460c      	mov	r4, r1
   409e0:	f7dc fba0 	bl	1d124 <strlen>
   409e4:	1c42      	adds	r2, r0, #1
   409e6:	42b2      	cmp	r2, r6
   409e8:	d901      	bls.n	409ee <__strcpy_chk+0x18>
   409ea:	f7fb fe5f 	bl	3c6ac <__chk_fail>
   409ee:	42ac      	cmp	r4, r5
   409f0:	d804      	bhi.n	409fc <__strcpy_chk+0x26>
   409f2:	18a3      	adds	r3, r4, r2
   409f4:	429d      	cmp	r5, r3
   409f6:	d3f8      	bcc.n	409ea <__strcpy_chk+0x14>
   409f8:	42ac      	cmp	r4, r5
   409fa:	d102      	bne.n	40a02 <__strcpy_chk+0x2c>
   409fc:	18ab      	adds	r3, r5, r2
   409fe:	429c      	cmp	r4, r3
   40a00:	d3f3      	bcc.n	409ea <__strcpy_chk+0x14>
   40a02:	4621      	mov	r1, r4
   40a04:	4628      	mov	r0, r5
   40a06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   40a0a:	f7ff be07 	b.w	4061c <memcpy>

00040a0e <strncmp>:
   40a0e:	b510      	push	{r4, lr}
   40a10:	b16a      	cbz	r2, 40a2e <strncmp+0x20>
   40a12:	3901      	subs	r1, #1
   40a14:	1884      	adds	r4, r0, r2
   40a16:	f810 3b01 	ldrb.w	r3, [r0], #1
   40a1a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   40a1e:	4293      	cmp	r3, r2
   40a20:	d103      	bne.n	40a2a <strncmp+0x1c>
   40a22:	42a0      	cmp	r0, r4
   40a24:	d001      	beq.n	40a2a <strncmp+0x1c>
   40a26:	2b00      	cmp	r3, #0
   40a28:	d1f5      	bne.n	40a16 <strncmp+0x8>
   40a2a:	1a98      	subs	r0, r3, r2
   40a2c:	bd10      	pop	{r4, pc}
   40a2e:	4610      	mov	r0, r2
   40a30:	e7fc      	b.n	40a2c <strncmp+0x1e>

00040a32 <strncpy>:
   40a32:	3901      	subs	r1, #1
   40a34:	4603      	mov	r3, r0
   40a36:	b510      	push	{r4, lr}
   40a38:	b132      	cbz	r2, 40a48 <strncpy+0x16>
   40a3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   40a3e:	3a01      	subs	r2, #1
   40a40:	f803 4b01 	strb.w	r4, [r3], #1
   40a44:	2c00      	cmp	r4, #0
   40a46:	d1f7      	bne.n	40a38 <strncpy+0x6>
   40a48:	441a      	add	r2, r3
   40a4a:	2100      	movs	r1, #0
   40a4c:	4293      	cmp	r3, r2
   40a4e:	d100      	bne.n	40a52 <strncpy+0x20>
   40a50:	bd10      	pop	{r4, pc}
   40a52:	f803 1b01 	strb.w	r1, [r3], #1
   40a56:	e7f9      	b.n	40a4c <strncpy+0x1a>

00040a58 <strnlen>:
   40a58:	4602      	mov	r2, r0
   40a5a:	4401      	add	r1, r0
   40a5c:	b510      	push	{r4, lr}
   40a5e:	428a      	cmp	r2, r1
   40a60:	4613      	mov	r3, r2
   40a62:	d003      	beq.n	40a6c <strnlen+0x14>
   40a64:	781c      	ldrb	r4, [r3, #0]
   40a66:	3201      	adds	r2, #1
   40a68:	2c00      	cmp	r4, #0
   40a6a:	d1f8      	bne.n	40a5e <strnlen+0x6>
   40a6c:	1a18      	subs	r0, r3, r0
   40a6e:	bd10      	pop	{r4, pc}

00040a70 <strstr>:
   40a70:	b5f0      	push	{r4, r5, r6, r7, lr}
   40a72:	780c      	ldrb	r4, [r1, #0]
   40a74:	b164      	cbz	r4, 40a90 <strstr+0x20>
   40a76:	4603      	mov	r3, r0
   40a78:	781a      	ldrb	r2, [r3, #0]
   40a7a:	4618      	mov	r0, r3
   40a7c:	1c5e      	adds	r6, r3, #1
   40a7e:	b90a      	cbnz	r2, 40a84 <strstr+0x14>
   40a80:	4610      	mov	r0, r2
   40a82:	e005      	b.n	40a90 <strstr+0x20>
   40a84:	4294      	cmp	r4, r2
   40a86:	d108      	bne.n	40a9a <strstr+0x2a>
   40a88:	460d      	mov	r5, r1
   40a8a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   40a8e:	b902      	cbnz	r2, 40a92 <strstr+0x22>
   40a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   40a92:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   40a96:	4297      	cmp	r7, r2
   40a98:	d0f7      	beq.n	40a8a <strstr+0x1a>
   40a9a:	4633      	mov	r3, r6
   40a9c:	e7ec      	b.n	40a78 <strstr+0x8>

00040a9e <sulp>:
   40a9e:	b570      	push	{r4, r5, r6, lr}
   40aa0:	4604      	mov	r4, r0
   40aa2:	460d      	mov	r5, r1
   40aa4:	4616      	mov	r6, r2
   40aa6:	ec45 4b10 	vmov	d0, r4, r5
   40aaa:	f7fc fa85 	bl	3cfb8 <__ulp>
   40aae:	ec51 0b10 	vmov	r0, r1, d0
   40ab2:	b17e      	cbz	r6, 40ad4 <sulp+0x36>
   40ab4:	f3c5 530a 	ubfx	r3, r5, #20, #11
   40ab8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   40abc:	2b00      	cmp	r3, #0
   40abe:	dd09      	ble.n	40ad4 <sulp+0x36>
   40ac0:	051b      	lsls	r3, r3, #20
   40ac2:	2400      	movs	r4, #0
   40ac4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   40ac8:	4622      	mov	r2, r4
   40aca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   40ace:	462b      	mov	r3, r5
   40ad0:	f7db fe72 	bl	1c7b8 <__aeabi_dmul>
   40ad4:	bd70      	pop	{r4, r5, r6, pc}

00040ad6 <_strtol_r>:
   40ad6:	f7fb bbe9 	b.w	3c2ac <_strtol_l.isra.0>

00040ada <_strtoul_r>:
   40ada:	f7fb bc69 	b.w	3c3b0 <_strtoul_l.isra.0>

00040ade <_vsniprintf_r>:
   40ade:	b530      	push	{r4, r5, lr}
   40ae0:	1e14      	subs	r4, r2, #0
   40ae2:	4605      	mov	r5, r0
   40ae4:	b09b      	sub	sp, #108	; 0x6c
   40ae6:	4618      	mov	r0, r3
   40ae8:	da05      	bge.n	40af6 <_vsniprintf_r+0x18>
   40aea:	238b      	movs	r3, #139	; 0x8b
   40aec:	f04f 30ff 	mov.w	r0, #4294967295
   40af0:	602b      	str	r3, [r5, #0]
   40af2:	b01b      	add	sp, #108	; 0x6c
   40af4:	bd30      	pop	{r4, r5, pc}
   40af6:	f44f 7302 	mov.w	r3, #520	; 0x208
   40afa:	9100      	str	r1, [sp, #0]
   40afc:	9104      	str	r1, [sp, #16]
   40afe:	4602      	mov	r2, r0
   40b00:	f8ad 300c 	strh.w	r3, [sp, #12]
   40b04:	bf14      	ite	ne
   40b06:	f104 33ff 	addne.w	r3, r4, #4294967295
   40b0a:	4623      	moveq	r3, r4
   40b0c:	4669      	mov	r1, sp
   40b0e:	4628      	mov	r0, r5
   40b10:	9302      	str	r3, [sp, #8]
   40b12:	9305      	str	r3, [sp, #20]
   40b14:	f64f 73ff 	movw	r3, #65535	; 0xffff
   40b18:	f8ad 300e 	strh.w	r3, [sp, #14]
   40b1c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   40b1e:	f7fc fabf 	bl	3d0a0 <_svfiprintf_r>
   40b22:	1c43      	adds	r3, r0, #1
   40b24:	bfbc      	itt	lt
   40b26:	238b      	movlt	r3, #139	; 0x8b
   40b28:	602b      	strlt	r3, [r5, #0]
   40b2a:	2c00      	cmp	r4, #0
   40b2c:	d0e1      	beq.n	40af2 <_vsniprintf_r+0x14>
   40b2e:	9b00      	ldr	r3, [sp, #0]
   40b30:	2200      	movs	r2, #0
   40b32:	701a      	strb	r2, [r3, #0]
   40b34:	e7dd      	b.n	40af2 <_vsniprintf_r+0x14>

00040b36 <abort>:
   40b36:	b508      	push	{r3, lr}
   40b38:	2006      	movs	r0, #6
   40b3a:	f7fc fe4f 	bl	3d7dc <raise>
   40b3e:	2001      	movs	r0, #1
   40b40:	f7e4 fb9a 	bl	25278 <_exit>

00040b44 <quorem>:
   40b44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40b48:	6903      	ldr	r3, [r0, #16]
   40b4a:	4680      	mov	r8, r0
   40b4c:	690c      	ldr	r4, [r1, #16]
   40b4e:	42a3      	cmp	r3, r4
   40b50:	f2c0 8084 	blt.w	40c5c <quorem+0x118>
   40b54:	3c01      	subs	r4, #1
   40b56:	f108 0514 	add.w	r5, r8, #20
   40b5a:	f101 0714 	add.w	r7, r1, #20
   40b5e:	00a0      	lsls	r0, r4, #2
   40b60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   40b64:	182b      	adds	r3, r5, r0
   40b66:	eb07 0900 	add.w	r9, r7, r0
   40b6a:	9301      	str	r3, [sp, #4]
   40b6c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   40b70:	3301      	adds	r3, #1
   40b72:	429a      	cmp	r2, r3
   40b74:	fbb2 f6f3 	udiv	r6, r2, r3
   40b78:	d333      	bcc.n	40be2 <quorem+0x9e>
   40b7a:	f04f 0a00 	mov.w	sl, #0
   40b7e:	46bc      	mov	ip, r7
   40b80:	46ae      	mov	lr, r5
   40b82:	46d3      	mov	fp, sl
   40b84:	f85c 2b04 	ldr.w	r2, [ip], #4
   40b88:	b293      	uxth	r3, r2
   40b8a:	45e1      	cmp	r9, ip
   40b8c:	ea4f 4212 	mov.w	r2, r2, lsr #16
   40b90:	fb06 a303 	mla	r3, r6, r3, sl
   40b94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   40b98:	b29b      	uxth	r3, r3
   40b9a:	fb06 a202 	mla	r2, r6, r2, sl
   40b9e:	ebab 0303 	sub.w	r3, fp, r3
   40ba2:	f8de b000 	ldr.w	fp, [lr]
   40ba6:	ea4f 4a12 	mov.w	sl, r2, lsr #16
   40baa:	fa1f fb8b 	uxth.w	fp, fp
   40bae:	445b      	add	r3, fp
   40bb0:	fa1f fb82 	uxth.w	fp, r2
   40bb4:	f8de 2000 	ldr.w	r2, [lr]
   40bb8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
   40bbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
   40bc0:	b29b      	uxth	r3, r3
   40bc2:	ea4f 4b22 	mov.w	fp, r2, asr #16
   40bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   40bca:	f84e 3b04 	str.w	r3, [lr], #4
   40bce:	d2d9      	bcs.n	40b84 <quorem+0x40>
   40bd0:	582b      	ldr	r3, [r5, r0]
   40bd2:	b933      	cbnz	r3, 40be2 <quorem+0x9e>
   40bd4:	9b01      	ldr	r3, [sp, #4]
   40bd6:	3b04      	subs	r3, #4
   40bd8:	429d      	cmp	r5, r3
   40bda:	461a      	mov	r2, r3
   40bdc:	d332      	bcc.n	40c44 <quorem+0x100>
   40bde:	f8c8 4010 	str.w	r4, [r8, #16]
   40be2:	4640      	mov	r0, r8
   40be4:	f000 fbc9 	bl	4137a <__mcmp>
   40be8:	2800      	cmp	r0, #0
   40bea:	db27      	blt.n	40c3c <quorem+0xf8>
   40bec:	3601      	adds	r6, #1
   40bee:	4628      	mov	r0, r5
   40bf0:	f04f 0c00 	mov.w	ip, #0
   40bf4:	f857 1b04 	ldr.w	r1, [r7], #4
   40bf8:	f8d0 e000 	ldr.w	lr, [r0]
   40bfc:	b28b      	uxth	r3, r1
   40bfe:	45b9      	cmp	r9, r7
   40c00:	fa1f f28e 	uxth.w	r2, lr
   40c04:	ebac 0303 	sub.w	r3, ip, r3
   40c08:	4413      	add	r3, r2
   40c0a:	ea4f 4211 	mov.w	r2, r1, lsr #16
   40c0e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   40c12:	eb02 4223 	add.w	r2, r2, r3, asr #16
   40c16:	b29b      	uxth	r3, r3
   40c18:	ea4f 4c22 	mov.w	ip, r2, asr #16
   40c1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   40c20:	f840 3b04 	str.w	r3, [r0], #4
   40c24:	d2e6      	bcs.n	40bf4 <quorem+0xb0>
   40c26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   40c2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   40c2e:	b92a      	cbnz	r2, 40c3c <quorem+0xf8>
   40c30:	3b04      	subs	r3, #4
   40c32:	429d      	cmp	r5, r3
   40c34:	461a      	mov	r2, r3
   40c36:	d30b      	bcc.n	40c50 <quorem+0x10c>
   40c38:	f8c8 4010 	str.w	r4, [r8, #16]
   40c3c:	4630      	mov	r0, r6
   40c3e:	b003      	add	sp, #12
   40c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40c44:	6812      	ldr	r2, [r2, #0]
   40c46:	3b04      	subs	r3, #4
   40c48:	2a00      	cmp	r2, #0
   40c4a:	d1c8      	bne.n	40bde <quorem+0x9a>
   40c4c:	3c01      	subs	r4, #1
   40c4e:	e7c3      	b.n	40bd8 <quorem+0x94>
   40c50:	6812      	ldr	r2, [r2, #0]
   40c52:	3b04      	subs	r3, #4
   40c54:	2a00      	cmp	r2, #0
   40c56:	d1ef      	bne.n	40c38 <quorem+0xf4>
   40c58:	3c01      	subs	r4, #1
   40c5a:	e7ea      	b.n	40c32 <quorem+0xee>
   40c5c:	2000      	movs	r0, #0
   40c5e:	e7ee      	b.n	40c3e <quorem+0xfa>

00040c60 <__sfmoreglue>:
   40c60:	b570      	push	{r4, r5, r6, lr}
   40c62:	1e4a      	subs	r2, r1, #1
   40c64:	2568      	movs	r5, #104	; 0x68
   40c66:	460e      	mov	r6, r1
   40c68:	4355      	muls	r5, r2
   40c6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
   40c6e:	f7fa fd83 	bl	3b778 <_malloc_r>
   40c72:	4604      	mov	r4, r0
   40c74:	b140      	cbz	r0, 40c88 <__sfmoreglue+0x28>
   40c76:	2100      	movs	r1, #0
   40c78:	f105 0268 	add.w	r2, r5, #104	; 0x68
   40c7c:	e9c0 1600 	strd	r1, r6, [r0]
   40c80:	300c      	adds	r0, #12
   40c82:	60a0      	str	r0, [r4, #8]
   40c84:	f7ff fcea 	bl	4065c <memset>
   40c88:	4620      	mov	r0, r4
   40c8a:	bd70      	pop	{r4, r5, r6, pc}

00040c8c <_fwalk_reent>:
   40c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   40c90:	4680      	mov	r8, r0
   40c92:	4689      	mov	r9, r1
   40c94:	f100 0448 	add.w	r4, r0, #72	; 0x48
   40c98:	2600      	movs	r6, #0
   40c9a:	b914      	cbnz	r4, 40ca2 <_fwalk_reent+0x16>
   40c9c:	4630      	mov	r0, r6
   40c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   40ca2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
   40ca6:	3f01      	subs	r7, #1
   40ca8:	d501      	bpl.n	40cae <_fwalk_reent+0x22>
   40caa:	6824      	ldr	r4, [r4, #0]
   40cac:	e7f5      	b.n	40c9a <_fwalk_reent+0xe>
   40cae:	89ab      	ldrh	r3, [r5, #12]
   40cb0:	2b01      	cmp	r3, #1
   40cb2:	d907      	bls.n	40cc4 <_fwalk_reent+0x38>
   40cb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   40cb8:	3301      	adds	r3, #1
   40cba:	d003      	beq.n	40cc4 <_fwalk_reent+0x38>
   40cbc:	4629      	mov	r1, r5
   40cbe:	4640      	mov	r0, r8
   40cc0:	47c8      	blx	r9
   40cc2:	4306      	orrs	r6, r0
   40cc4:	3568      	adds	r5, #104	; 0x68
   40cc6:	e7ee      	b.n	40ca6 <_fwalk_reent+0x1a>

00040cc8 <rshift>:
   40cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   40cca:	114b      	asrs	r3, r1, #5
   40ccc:	6906      	ldr	r6, [r0, #16]
   40cce:	f100 0414 	add.w	r4, r0, #20
   40cd2:	429e      	cmp	r6, r3
   40cd4:	dd30      	ble.n	40d38 <rshift+0x70>
   40cd6:	f011 011f 	ands.w	r1, r1, #31
   40cda:	eb04 0686 	add.w	r6, r4, r6, lsl #2
   40cde:	eb04 0283 	add.w	r2, r4, r3, lsl #2
   40ce2:	d108      	bne.n	40cf6 <rshift+0x2e>
   40ce4:	4621      	mov	r1, r4
   40ce6:	42b2      	cmp	r2, r6
   40ce8:	460b      	mov	r3, r1
   40cea:	d211      	bcs.n	40d10 <rshift+0x48>
   40cec:	f852 3b04 	ldr.w	r3, [r2], #4
   40cf0:	f841 3b04 	str.w	r3, [r1], #4
   40cf4:	e7f7      	b.n	40ce6 <rshift+0x1e>
   40cf6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
   40cfa:	f1c1 0c20 	rsb	ip, r1, #32
   40cfe:	3204      	adds	r2, #4
   40d00:	4623      	mov	r3, r4
   40d02:	40cd      	lsrs	r5, r1
   40d04:	4296      	cmp	r6, r2
   40d06:	4617      	mov	r7, r2
   40d08:	d80c      	bhi.n	40d24 <rshift+0x5c>
   40d0a:	601d      	str	r5, [r3, #0]
   40d0c:	b105      	cbz	r5, 40d10 <rshift+0x48>
   40d0e:	3304      	adds	r3, #4
   40d10:	1b1a      	subs	r2, r3, r4
   40d12:	42a3      	cmp	r3, r4
   40d14:	ea4f 02a2 	mov.w	r2, r2, asr #2
   40d18:	bf08      	it	eq
   40d1a:	2300      	moveq	r3, #0
   40d1c:	6102      	str	r2, [r0, #16]
   40d1e:	bf08      	it	eq
   40d20:	6143      	streq	r3, [r0, #20]
   40d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   40d24:	683f      	ldr	r7, [r7, #0]
   40d26:	fa07 f70c 	lsl.w	r7, r7, ip
   40d2a:	433d      	orrs	r5, r7
   40d2c:	f843 5b04 	str.w	r5, [r3], #4
   40d30:	f852 5b04 	ldr.w	r5, [r2], #4
   40d34:	40cd      	lsrs	r5, r1
   40d36:	e7e5      	b.n	40d04 <rshift+0x3c>
   40d38:	4623      	mov	r3, r4
   40d3a:	e7e9      	b.n	40d10 <rshift+0x48>

00040d3c <__hexdig_fun>:
   40d3c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   40d40:	2b09      	cmp	r3, #9
   40d42:	d802      	bhi.n	40d4a <__hexdig_fun+0xe>
   40d44:	3820      	subs	r0, #32
   40d46:	b2c0      	uxtb	r0, r0
   40d48:	4770      	bx	lr
   40d4a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   40d4e:	2b05      	cmp	r3, #5
   40d50:	d801      	bhi.n	40d56 <__hexdig_fun+0x1a>
   40d52:	3847      	subs	r0, #71	; 0x47
   40d54:	e7f7      	b.n	40d46 <__hexdig_fun+0xa>
   40d56:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   40d5a:	2b05      	cmp	r3, #5
   40d5c:	d801      	bhi.n	40d62 <__hexdig_fun+0x26>
   40d5e:	3827      	subs	r0, #39	; 0x27
   40d60:	e7f1      	b.n	40d46 <__hexdig_fun+0xa>
   40d62:	2000      	movs	r0, #0
   40d64:	4770      	bx	lr

00040d66 <L_shift>:
   40d66:	f1c2 0208 	rsb	r2, r2, #8
   40d6a:	0092      	lsls	r2, r2, #2
   40d6c:	b570      	push	{r4, r5, r6, lr}
   40d6e:	f1c2 0620 	rsb	r6, r2, #32
   40d72:	6843      	ldr	r3, [r0, #4]
   40d74:	6804      	ldr	r4, [r0, #0]
   40d76:	fa03 f506 	lsl.w	r5, r3, r6
   40d7a:	40d3      	lsrs	r3, r2
   40d7c:	432c      	orrs	r4, r5
   40d7e:	6004      	str	r4, [r0, #0]
   40d80:	f840 3f04 	str.w	r3, [r0, #4]!
   40d84:	4288      	cmp	r0, r1
   40d86:	d3f4      	bcc.n	40d72 <L_shift+0xc>
   40d88:	bd70      	pop	{r4, r5, r6, pc}

00040d8a <__match>:
   40d8a:	6803      	ldr	r3, [r0, #0]
   40d8c:	3301      	adds	r3, #1
   40d8e:	b530      	push	{r4, r5, lr}
   40d90:	f811 4b01 	ldrb.w	r4, [r1], #1
   40d94:	b914      	cbnz	r4, 40d9c <__match+0x12>
   40d96:	6003      	str	r3, [r0, #0]
   40d98:	2001      	movs	r0, #1
   40d9a:	bd30      	pop	{r4, r5, pc}
   40d9c:	f813 2b01 	ldrb.w	r2, [r3], #1
   40da0:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   40da4:	2d19      	cmp	r5, #25
   40da6:	bf98      	it	ls
   40da8:	3220      	addls	r2, #32
   40daa:	42a2      	cmp	r2, r4
   40dac:	d0f0      	beq.n	40d90 <__match+0x6>
   40dae:	2000      	movs	r0, #0
   40db0:	e7f3      	b.n	40d9a <__match+0x10>

00040db2 <__hexnan>:
   40db2:	680b      	ldr	r3, [r1, #0]
   40db4:	6801      	ldr	r1, [r0, #0]
   40db6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40dba:	115f      	asrs	r7, r3, #5
   40dbc:	f013 031f 	ands.w	r3, r3, #31
   40dc0:	f04f 0500 	mov.w	r5, #0
   40dc4:	b087      	sub	sp, #28
   40dc6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
   40dca:	4682      	mov	sl, r0
   40dcc:	4690      	mov	r8, r2
   40dce:	46ab      	mov	fp, r5
   40dd0:	bf18      	it	ne
   40dd2:	3704      	addne	r7, #4
   40dd4:	9301      	str	r3, [sp, #4]
   40dd6:	9502      	str	r5, [sp, #8]
   40dd8:	1f3e      	subs	r6, r7, #4
   40dda:	f847 5c04 	str.w	r5, [r7, #-4]
   40dde:	46b1      	mov	r9, r6
   40de0:	4634      	mov	r4, r6
   40de2:	1c4b      	adds	r3, r1, #1
   40de4:	784a      	ldrb	r2, [r1, #1]
   40de6:	9303      	str	r3, [sp, #12]
   40de8:	b342      	cbz	r2, 40e3c <__hexnan+0x8a>
   40dea:	4610      	mov	r0, r2
   40dec:	9105      	str	r1, [sp, #20]
   40dee:	9204      	str	r2, [sp, #16]
   40df0:	f7ff ffa4 	bl	40d3c <__hexdig_fun>
   40df4:	2800      	cmp	r0, #0
   40df6:	d143      	bne.n	40e80 <__hexnan+0xce>
   40df8:	9a04      	ldr	r2, [sp, #16]
   40dfa:	9905      	ldr	r1, [sp, #20]
   40dfc:	2a20      	cmp	r2, #32
   40dfe:	d818      	bhi.n	40e32 <__hexnan+0x80>
   40e00:	9b02      	ldr	r3, [sp, #8]
   40e02:	459b      	cmp	fp, r3
   40e04:	dd13      	ble.n	40e2e <__hexnan+0x7c>
   40e06:	454c      	cmp	r4, r9
   40e08:	d206      	bcs.n	40e18 <__hexnan+0x66>
   40e0a:	2d07      	cmp	r5, #7
   40e0c:	dc04      	bgt.n	40e18 <__hexnan+0x66>
   40e0e:	462a      	mov	r2, r5
   40e10:	4649      	mov	r1, r9
   40e12:	4620      	mov	r0, r4
   40e14:	f7ff ffa7 	bl	40d66 <L_shift>
   40e18:	4544      	cmp	r4, r8
   40e1a:	d943      	bls.n	40ea4 <__hexnan+0xf2>
   40e1c:	2300      	movs	r3, #0
   40e1e:	f1a4 0904 	sub.w	r9, r4, #4
   40e22:	f8cd b008 	str.w	fp, [sp, #8]
   40e26:	f844 3c04 	str.w	r3, [r4, #-4]
   40e2a:	461d      	mov	r5, r3
   40e2c:	464c      	mov	r4, r9
   40e2e:	9903      	ldr	r1, [sp, #12]
   40e30:	e7d7      	b.n	40de2 <__hexnan+0x30>
   40e32:	2a29      	cmp	r2, #41	; 0x29
   40e34:	d149      	bne.n	40eca <__hexnan+0x118>
   40e36:	3102      	adds	r1, #2
   40e38:	f8ca 1000 	str.w	r1, [sl]
   40e3c:	f1bb 0f00 	cmp.w	fp, #0
   40e40:	d043      	beq.n	40eca <__hexnan+0x118>
   40e42:	454c      	cmp	r4, r9
   40e44:	d206      	bcs.n	40e54 <__hexnan+0xa2>
   40e46:	2d07      	cmp	r5, #7
   40e48:	dc04      	bgt.n	40e54 <__hexnan+0xa2>
   40e4a:	462a      	mov	r2, r5
   40e4c:	4649      	mov	r1, r9
   40e4e:	4620      	mov	r0, r4
   40e50:	f7ff ff89 	bl	40d66 <L_shift>
   40e54:	4544      	cmp	r4, r8
   40e56:	d927      	bls.n	40ea8 <__hexnan+0xf6>
   40e58:	4643      	mov	r3, r8
   40e5a:	f854 2b04 	ldr.w	r2, [r4], #4
   40e5e:	42a6      	cmp	r6, r4
   40e60:	f843 2b04 	str.w	r2, [r3], #4
   40e64:	d2f9      	bcs.n	40e5a <__hexnan+0xa8>
   40e66:	2200      	movs	r2, #0
   40e68:	f843 2b04 	str.w	r2, [r3], #4
   40e6c:	429e      	cmp	r6, r3
   40e6e:	d2fb      	bcs.n	40e68 <__hexnan+0xb6>
   40e70:	6833      	ldr	r3, [r6, #0]
   40e72:	b91b      	cbnz	r3, 40e7c <__hexnan+0xca>
   40e74:	4546      	cmp	r6, r8
   40e76:	d126      	bne.n	40ec6 <__hexnan+0x114>
   40e78:	2301      	movs	r3, #1
   40e7a:	6033      	str	r3, [r6, #0]
   40e7c:	2005      	movs	r0, #5
   40e7e:	e025      	b.n	40ecc <__hexnan+0x11a>
   40e80:	3501      	adds	r5, #1
   40e82:	f10b 0b01 	add.w	fp, fp, #1
   40e86:	2d08      	cmp	r5, #8
   40e88:	dd05      	ble.n	40e96 <__hexnan+0xe4>
   40e8a:	4544      	cmp	r4, r8
   40e8c:	d9cf      	bls.n	40e2e <__hexnan+0x7c>
   40e8e:	2300      	movs	r3, #0
   40e90:	3c04      	subs	r4, #4
   40e92:	2501      	movs	r5, #1
   40e94:	6023      	str	r3, [r4, #0]
   40e96:	6822      	ldr	r2, [r4, #0]
   40e98:	f000 000f 	and.w	r0, r0, #15
   40e9c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
   40ea0:	6020      	str	r0, [r4, #0]
   40ea2:	e7c4      	b.n	40e2e <__hexnan+0x7c>
   40ea4:	2508      	movs	r5, #8
   40ea6:	e7c2      	b.n	40e2e <__hexnan+0x7c>
   40ea8:	9b01      	ldr	r3, [sp, #4]
   40eaa:	2b00      	cmp	r3, #0
   40eac:	d0e0      	beq.n	40e70 <__hexnan+0xbe>
   40eae:	f04f 32ff 	mov.w	r2, #4294967295
   40eb2:	f1c3 0320 	rsb	r3, r3, #32
   40eb6:	fa22 f303 	lsr.w	r3, r2, r3
   40eba:	f857 2c04 	ldr.w	r2, [r7, #-4]
   40ebe:	401a      	ands	r2, r3
   40ec0:	f847 2c04 	str.w	r2, [r7, #-4]
   40ec4:	e7d4      	b.n	40e70 <__hexnan+0xbe>
   40ec6:	3e04      	subs	r6, #4
   40ec8:	e7d2      	b.n	40e70 <__hexnan+0xbe>
   40eca:	2004      	movs	r0, #4
   40ecc:	b007      	add	sp, #28
   40ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00040ed2 <__retarget_lock_init_recursive>:
   40ed2:	4770      	bx	lr

00040ed4 <__retarget_lock_acquire_recursive>:
   40ed4:	4770      	bx	lr

00040ed6 <__retarget_lock_release_recursive>:
   40ed6:	4770      	bx	lr

00040ed8 <__swhatbuf_r>:
   40ed8:	b570      	push	{r4, r5, r6, lr}
   40eda:	460e      	mov	r6, r1
   40edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   40ee0:	b096      	sub	sp, #88	; 0x58
   40ee2:	4614      	mov	r4, r2
   40ee4:	2900      	cmp	r1, #0
   40ee6:	461d      	mov	r5, r3
   40ee8:	da07      	bge.n	40efa <__swhatbuf_r+0x22>
   40eea:	2300      	movs	r3, #0
   40eec:	602b      	str	r3, [r5, #0]
   40eee:	89b3      	ldrh	r3, [r6, #12]
   40ef0:	061a      	lsls	r2, r3, #24
   40ef2:	d410      	bmi.n	40f16 <__swhatbuf_r+0x3e>
   40ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   40ef8:	e00e      	b.n	40f18 <__swhatbuf_r+0x40>
   40efa:	466a      	mov	r2, sp
   40efc:	f7fc fc88 	bl	3d810 <_fstat_r>
   40f00:	2800      	cmp	r0, #0
   40f02:	dbf2      	blt.n	40eea <__swhatbuf_r+0x12>
   40f04:	9a01      	ldr	r2, [sp, #4]
   40f06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   40f0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   40f0e:	425a      	negs	r2, r3
   40f10:	415a      	adcs	r2, r3
   40f12:	602a      	str	r2, [r5, #0]
   40f14:	e7ee      	b.n	40ef4 <__swhatbuf_r+0x1c>
   40f16:	2340      	movs	r3, #64	; 0x40
   40f18:	2000      	movs	r0, #0
   40f1a:	6023      	str	r3, [r4, #0]
   40f1c:	b016      	add	sp, #88	; 0x58
   40f1e:	bd70      	pop	{r4, r5, r6, pc}

00040f20 <__ascii_mbtowc>:
   40f20:	b082      	sub	sp, #8
   40f22:	b901      	cbnz	r1, 40f26 <__ascii_mbtowc+0x6>
   40f24:	a901      	add	r1, sp, #4
   40f26:	b142      	cbz	r2, 40f3a <__ascii_mbtowc+0x1a>
   40f28:	b14b      	cbz	r3, 40f3e <__ascii_mbtowc+0x1e>
   40f2a:	7813      	ldrb	r3, [r2, #0]
   40f2c:	600b      	str	r3, [r1, #0]
   40f2e:	7812      	ldrb	r2, [r2, #0]
   40f30:	1c10      	adds	r0, r2, #0
   40f32:	bf18      	it	ne
   40f34:	2001      	movne	r0, #1
   40f36:	b002      	add	sp, #8
   40f38:	4770      	bx	lr
   40f3a:	4610      	mov	r0, r2
   40f3c:	e7fb      	b.n	40f36 <__ascii_mbtowc+0x16>
   40f3e:	f06f 0001 	mvn.w	r0, #1
   40f42:	e7f8      	b.n	40f36 <__ascii_mbtowc+0x16>

00040f44 <memmove>:
   40f44:	4288      	cmp	r0, r1
   40f46:	eb01 0302 	add.w	r3, r1, r2
   40f4a:	b510      	push	{r4, lr}
   40f4c:	d902      	bls.n	40f54 <memmove+0x10>
   40f4e:	4283      	cmp	r3, r0
   40f50:	461c      	mov	r4, r3
   40f52:	d807      	bhi.n	40f64 <memmove+0x20>
   40f54:	1e42      	subs	r2, r0, #1
   40f56:	4299      	cmp	r1, r3
   40f58:	d008      	beq.n	40f6c <memmove+0x28>
   40f5a:	f811 4b01 	ldrb.w	r4, [r1], #1
   40f5e:	f802 4f01 	strb.w	r4, [r2, #1]!
   40f62:	e7f8      	b.n	40f56 <memmove+0x12>
   40f64:	1883      	adds	r3, r0, r2
   40f66:	1a9a      	subs	r2, r3, r2
   40f68:	429a      	cmp	r2, r3
   40f6a:	d100      	bne.n	40f6e <memmove+0x2a>
   40f6c:	bd10      	pop	{r4, pc}
   40f6e:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   40f72:	f803 1d01 	strb.w	r1, [r3, #-1]!
   40f76:	e7f7      	b.n	40f68 <memmove+0x24>

00040f78 <_Balloc>:
   40f78:	b570      	push	{r4, r5, r6, lr}
   40f7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
   40f7c:	4604      	mov	r4, r0
   40f7e:	460e      	mov	r6, r1
   40f80:	b93d      	cbnz	r5, 40f92 <_Balloc+0x1a>
   40f82:	2010      	movs	r0, #16
   40f84:	f7fa fb9a 	bl	3b6bc <malloc>
   40f88:	6260      	str	r0, [r4, #36]	; 0x24
   40f8a:	6005      	str	r5, [r0, #0]
   40f8c:	60c5      	str	r5, [r0, #12]
   40f8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
   40f92:	6a65      	ldr	r5, [r4, #36]	; 0x24
   40f94:	68eb      	ldr	r3, [r5, #12]
   40f96:	b183      	cbz	r3, 40fba <_Balloc+0x42>
   40f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
   40f9a:	68db      	ldr	r3, [r3, #12]
   40f9c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   40fa0:	b9b8      	cbnz	r0, 40fd2 <_Balloc+0x5a>
   40fa2:	2101      	movs	r1, #1
   40fa4:	4620      	mov	r0, r4
   40fa6:	fa01 f506 	lsl.w	r5, r1, r6
   40faa:	1d6a      	adds	r2, r5, #5
   40fac:	0092      	lsls	r2, r2, #2
   40fae:	f000 fb1a 	bl	415e6 <_calloc_r>
   40fb2:	b160      	cbz	r0, 40fce <_Balloc+0x56>
   40fb4:	e9c0 6501 	strd	r6, r5, [r0, #4]
   40fb8:	e00e      	b.n	40fd8 <_Balloc+0x60>
   40fba:	2221      	movs	r2, #33	; 0x21
   40fbc:	2104      	movs	r1, #4
   40fbe:	4620      	mov	r0, r4
   40fc0:	f000 fb11 	bl	415e6 <_calloc_r>
   40fc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   40fc6:	60e8      	str	r0, [r5, #12]
   40fc8:	68db      	ldr	r3, [r3, #12]
   40fca:	2b00      	cmp	r3, #0
   40fcc:	d1e4      	bne.n	40f98 <_Balloc+0x20>
   40fce:	2000      	movs	r0, #0
   40fd0:	bd70      	pop	{r4, r5, r6, pc}
   40fd2:	6802      	ldr	r2, [r0, #0]
   40fd4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   40fd8:	2300      	movs	r3, #0
   40fda:	e9c0 3303 	strd	r3, r3, [r0, #12]
   40fde:	e7f7      	b.n	40fd0 <_Balloc+0x58>

00040fe0 <_Bfree>:
   40fe0:	b570      	push	{r4, r5, r6, lr}
   40fe2:	6a44      	ldr	r4, [r0, #36]	; 0x24
   40fe4:	4606      	mov	r6, r0
   40fe6:	460d      	mov	r5, r1
   40fe8:	b93c      	cbnz	r4, 40ffa <_Bfree+0x1a>
   40fea:	2010      	movs	r0, #16
   40fec:	f7fa fb66 	bl	3b6bc <malloc>
   40ff0:	6270      	str	r0, [r6, #36]	; 0x24
   40ff2:	6004      	str	r4, [r0, #0]
   40ff4:	60c4      	str	r4, [r0, #12]
   40ff6:	e9c0 4401 	strd	r4, r4, [r0, #4]
   40ffa:	b13d      	cbz	r5, 4100c <_Bfree+0x2c>
   40ffc:	6a73      	ldr	r3, [r6, #36]	; 0x24
   40ffe:	686a      	ldr	r2, [r5, #4]
   41000:	68db      	ldr	r3, [r3, #12]
   41002:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   41006:	6029      	str	r1, [r5, #0]
   41008:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   4100c:	bd70      	pop	{r4, r5, r6, pc}

0004100e <__multadd>:
   4100e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41012:	f101 0c14 	add.w	ip, r1, #20
   41016:	461f      	mov	r7, r3
   41018:	4606      	mov	r6, r0
   4101a:	460c      	mov	r4, r1
   4101c:	690d      	ldr	r5, [r1, #16]
   4101e:	2300      	movs	r3, #0
   41020:	f8dc 0000 	ldr.w	r0, [ip]
   41024:	3301      	adds	r3, #1
   41026:	b281      	uxth	r1, r0
   41028:	429d      	cmp	r5, r3
   4102a:	ea4f 4010 	mov.w	r0, r0, lsr #16
   4102e:	fb02 7101 	mla	r1, r2, r1, r7
   41032:	ea4f 4711 	mov.w	r7, r1, lsr #16
   41036:	b289      	uxth	r1, r1
   41038:	fb02 7000 	mla	r0, r2, r0, r7
   4103c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   41040:	ea4f 4710 	mov.w	r7, r0, lsr #16
   41044:	f84c 1b04 	str.w	r1, [ip], #4
   41048:	dcea      	bgt.n	41020 <__multadd+0x12>
   4104a:	b1d7      	cbz	r7, 41082 <__multadd+0x74>
   4104c:	68a3      	ldr	r3, [r4, #8]
   4104e:	42ab      	cmp	r3, r5
   41050:	dc12      	bgt.n	41078 <__multadd+0x6a>
   41052:	6861      	ldr	r1, [r4, #4]
   41054:	4630      	mov	r0, r6
   41056:	3101      	adds	r1, #1
   41058:	f7ff ff8e 	bl	40f78 <_Balloc>
   4105c:	6922      	ldr	r2, [r4, #16]
   4105e:	4680      	mov	r8, r0
   41060:	f104 010c 	add.w	r1, r4, #12
   41064:	3202      	adds	r2, #2
   41066:	300c      	adds	r0, #12
   41068:	0092      	lsls	r2, r2, #2
   4106a:	f7ff fad7 	bl	4061c <memcpy>
   4106e:	4621      	mov	r1, r4
   41070:	4644      	mov	r4, r8
   41072:	4630      	mov	r0, r6
   41074:	f7ff ffb4 	bl	40fe0 <_Bfree>
   41078:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   4107c:	3501      	adds	r5, #1
   4107e:	615f      	str	r7, [r3, #20]
   41080:	6125      	str	r5, [r4, #16]
   41082:	4620      	mov	r0, r4
   41084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00041088 <__s2b>:
   41088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4108c:	4615      	mov	r5, r2
   4108e:	461f      	mov	r7, r3
   41090:	2209      	movs	r2, #9
   41092:	3308      	adds	r3, #8
   41094:	460c      	mov	r4, r1
   41096:	4606      	mov	r6, r0
   41098:	2100      	movs	r1, #0
   4109a:	fb93 f3f2 	sdiv	r3, r3, r2
   4109e:	2201      	movs	r2, #1
   410a0:	429a      	cmp	r2, r3
   410a2:	db20      	blt.n	410e6 <__s2b+0x5e>
   410a4:	4630      	mov	r0, r6
   410a6:	f7ff ff67 	bl	40f78 <_Balloc>
   410aa:	9b08      	ldr	r3, [sp, #32]
   410ac:	2d09      	cmp	r5, #9
   410ae:	6143      	str	r3, [r0, #20]
   410b0:	f04f 0301 	mov.w	r3, #1
   410b4:	6103      	str	r3, [r0, #16]
   410b6:	dd19      	ble.n	410ec <__s2b+0x64>
   410b8:	f104 0909 	add.w	r9, r4, #9
   410bc:	442c      	add	r4, r5
   410be:	46c8      	mov	r8, r9
   410c0:	f818 3b01 	ldrb.w	r3, [r8], #1
   410c4:	4601      	mov	r1, r0
   410c6:	220a      	movs	r2, #10
   410c8:	4630      	mov	r0, r6
   410ca:	3b30      	subs	r3, #48	; 0x30
   410cc:	f7ff ff9f 	bl	4100e <__multadd>
   410d0:	45a0      	cmp	r8, r4
   410d2:	d1f5      	bne.n	410c0 <__s2b+0x38>
   410d4:	f1a5 0408 	sub.w	r4, r5, #8
   410d8:	444c      	add	r4, r9
   410da:	1b2d      	subs	r5, r5, r4
   410dc:	1963      	adds	r3, r4, r5
   410de:	42bb      	cmp	r3, r7
   410e0:	db07      	blt.n	410f2 <__s2b+0x6a>
   410e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   410e6:	0052      	lsls	r2, r2, #1
   410e8:	3101      	adds	r1, #1
   410ea:	e7d9      	b.n	410a0 <__s2b+0x18>
   410ec:	340a      	adds	r4, #10
   410ee:	2509      	movs	r5, #9
   410f0:	e7f3      	b.n	410da <__s2b+0x52>
   410f2:	f814 3b01 	ldrb.w	r3, [r4], #1
   410f6:	4601      	mov	r1, r0
   410f8:	220a      	movs	r2, #10
   410fa:	4630      	mov	r0, r6
   410fc:	3b30      	subs	r3, #48	; 0x30
   410fe:	f7ff ff86 	bl	4100e <__multadd>
   41102:	e7eb      	b.n	410dc <__s2b+0x54>

00041104 <__hi0bits>:
   41104:	0c02      	lsrs	r2, r0, #16
   41106:	4603      	mov	r3, r0
   41108:	0412      	lsls	r2, r2, #16
   4110a:	b9ca      	cbnz	r2, 41140 <__hi0bits+0x3c>
   4110c:	0403      	lsls	r3, r0, #16
   4110e:	2010      	movs	r0, #16
   41110:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   41114:	bf04      	itt	eq
   41116:	021b      	lsleq	r3, r3, #8
   41118:	3008      	addeq	r0, #8
   4111a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   4111e:	bf04      	itt	eq
   41120:	011b      	lsleq	r3, r3, #4
   41122:	3004      	addeq	r0, #4
   41124:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   41128:	bf04      	itt	eq
   4112a:	009b      	lsleq	r3, r3, #2
   4112c:	3002      	addeq	r0, #2
   4112e:	2b00      	cmp	r3, #0
   41130:	db05      	blt.n	4113e <__hi0bits+0x3a>
   41132:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   41136:	f100 0001 	add.w	r0, r0, #1
   4113a:	bf08      	it	eq
   4113c:	2020      	moveq	r0, #32
   4113e:	4770      	bx	lr
   41140:	2000      	movs	r0, #0
   41142:	e7e5      	b.n	41110 <__hi0bits+0xc>

00041144 <__lo0bits>:
   41144:	6803      	ldr	r3, [r0, #0]
   41146:	4601      	mov	r1, r0
   41148:	f013 0207 	ands.w	r2, r3, #7
   4114c:	d00b      	beq.n	41166 <__lo0bits+0x22>
   4114e:	07da      	lsls	r2, r3, #31
   41150:	d424      	bmi.n	4119c <__lo0bits+0x58>
   41152:	0798      	lsls	r0, r3, #30
   41154:	bf47      	ittee	mi
   41156:	085b      	lsrmi	r3, r3, #1
   41158:	2001      	movmi	r0, #1
   4115a:	089b      	lsrpl	r3, r3, #2
   4115c:	2002      	movpl	r0, #2
   4115e:	bf4c      	ite	mi
   41160:	600b      	strmi	r3, [r1, #0]
   41162:	600b      	strpl	r3, [r1, #0]
   41164:	4770      	bx	lr
   41166:	b298      	uxth	r0, r3
   41168:	b9b0      	cbnz	r0, 41198 <__lo0bits+0x54>
   4116a:	0c1b      	lsrs	r3, r3, #16
   4116c:	2010      	movs	r0, #16
   4116e:	f013 0fff 	tst.w	r3, #255	; 0xff
   41172:	bf04      	itt	eq
   41174:	0a1b      	lsreq	r3, r3, #8
   41176:	3008      	addeq	r0, #8
   41178:	071a      	lsls	r2, r3, #28
   4117a:	bf04      	itt	eq
   4117c:	091b      	lsreq	r3, r3, #4
   4117e:	3004      	addeq	r0, #4
   41180:	079a      	lsls	r2, r3, #30
   41182:	bf04      	itt	eq
   41184:	089b      	lsreq	r3, r3, #2
   41186:	3002      	addeq	r0, #2
   41188:	07da      	lsls	r2, r3, #31
   4118a:	d403      	bmi.n	41194 <__lo0bits+0x50>
   4118c:	085b      	lsrs	r3, r3, #1
   4118e:	f100 0001 	add.w	r0, r0, #1
   41192:	d005      	beq.n	411a0 <__lo0bits+0x5c>
   41194:	600b      	str	r3, [r1, #0]
   41196:	4770      	bx	lr
   41198:	4610      	mov	r0, r2
   4119a:	e7e8      	b.n	4116e <__lo0bits+0x2a>
   4119c:	2000      	movs	r0, #0
   4119e:	4770      	bx	lr
   411a0:	2020      	movs	r0, #32
   411a2:	4770      	bx	lr

000411a4 <__i2b>:
   411a4:	b510      	push	{r4, lr}
   411a6:	460c      	mov	r4, r1
   411a8:	2101      	movs	r1, #1
   411aa:	f7ff fee5 	bl	40f78 <_Balloc>
   411ae:	2201      	movs	r2, #1
   411b0:	6144      	str	r4, [r0, #20]
   411b2:	6102      	str	r2, [r0, #16]
   411b4:	bd10      	pop	{r4, pc}

000411b6 <__multiply>:
   411b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   411ba:	4690      	mov	r8, r2
   411bc:	690a      	ldr	r2, [r1, #16]
   411be:	460c      	mov	r4, r1
   411c0:	f8d8 3010 	ldr.w	r3, [r8, #16]
   411c4:	429a      	cmp	r2, r3
   411c6:	bfbe      	ittt	lt
   411c8:	460b      	movlt	r3, r1
   411ca:	4644      	movlt	r4, r8
   411cc:	4698      	movlt	r8, r3
   411ce:	6927      	ldr	r7, [r4, #16]
   411d0:	68a3      	ldr	r3, [r4, #8]
   411d2:	f8d8 9010 	ldr.w	r9, [r8, #16]
   411d6:	6861      	ldr	r1, [r4, #4]
   411d8:	eb07 0609 	add.w	r6, r7, r9
   411dc:	42b3      	cmp	r3, r6
   411de:	bfb8      	it	lt
   411e0:	3101      	addlt	r1, #1
   411e2:	f7ff fec9 	bl	40f78 <_Balloc>
   411e6:	f100 0514 	add.w	r5, r0, #20
   411ea:	2200      	movs	r2, #0
   411ec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
   411f0:	462b      	mov	r3, r5
   411f2:	4573      	cmp	r3, lr
   411f4:	d316      	bcc.n	41224 <__multiply+0x6e>
   411f6:	f104 0314 	add.w	r3, r4, #20
   411fa:	f108 0214 	add.w	r2, r8, #20
   411fe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   41202:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   41206:	9300      	str	r3, [sp, #0]
   41208:	9b00      	ldr	r3, [sp, #0]
   4120a:	9201      	str	r2, [sp, #4]
   4120c:	4293      	cmp	r3, r2
   4120e:	d80c      	bhi.n	4122a <__multiply+0x74>
   41210:	2e00      	cmp	r6, #0
   41212:	dd03      	ble.n	4121c <__multiply+0x66>
   41214:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   41218:	2b00      	cmp	r3, #0
   4121a:	d059      	beq.n	412d0 <__multiply+0x11a>
   4121c:	6106      	str	r6, [r0, #16]
   4121e:	b003      	add	sp, #12
   41220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41224:	f843 2b04 	str.w	r2, [r3], #4
   41228:	e7e3      	b.n	411f2 <__multiply+0x3c>
   4122a:	f8b2 a000 	ldrh.w	sl, [r2]
   4122e:	f1ba 0f00 	cmp.w	sl, #0
   41232:	d023      	beq.n	4127c <__multiply+0xc6>
   41234:	f104 0914 	add.w	r9, r4, #20
   41238:	46ac      	mov	ip, r5
   4123a:	f04f 0800 	mov.w	r8, #0
   4123e:	f859 1b04 	ldr.w	r1, [r9], #4
   41242:	f8dc b000 	ldr.w	fp, [ip]
   41246:	b28b      	uxth	r3, r1
   41248:	454f      	cmp	r7, r9
   4124a:	fa1f fb8b 	uxth.w	fp, fp
   4124e:	fb0a b303 	mla	r3, sl, r3, fp
   41252:	ea4f 4b11 	mov.w	fp, r1, lsr #16
   41256:	f8dc 1000 	ldr.w	r1, [ip]
   4125a:	4443      	add	r3, r8
   4125c:	ea4f 4811 	mov.w	r8, r1, lsr #16
   41260:	fb0a 810b 	mla	r1, sl, fp, r8
   41264:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   41268:	b29b      	uxth	r3, r3
   4126a:	ea4f 4811 	mov.w	r8, r1, lsr #16
   4126e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   41272:	f84c 3b04 	str.w	r3, [ip], #4
   41276:	d8e2      	bhi.n	4123e <__multiply+0x88>
   41278:	f8cc 8000 	str.w	r8, [ip]
   4127c:	9b01      	ldr	r3, [sp, #4]
   4127e:	3204      	adds	r2, #4
   41280:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   41284:	f1b9 0f00 	cmp.w	r9, #0
   41288:	d020      	beq.n	412cc <__multiply+0x116>
   4128a:	682b      	ldr	r3, [r5, #0]
   4128c:	f104 0814 	add.w	r8, r4, #20
   41290:	46ac      	mov	ip, r5
   41292:	f04f 0a00 	mov.w	sl, #0
   41296:	f8b8 1000 	ldrh.w	r1, [r8]
   4129a:	b29b      	uxth	r3, r3
   4129c:	f8bc b002 	ldrh.w	fp, [ip, #2]
   412a0:	fb09 b101 	mla	r1, r9, r1, fp
   412a4:	448a      	add	sl, r1
   412a6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   412aa:	f84c 3b04 	str.w	r3, [ip], #4
   412ae:	f858 3b04 	ldr.w	r3, [r8], #4
   412b2:	f8bc 1000 	ldrh.w	r1, [ip]
   412b6:	0c1b      	lsrs	r3, r3, #16
   412b8:	4547      	cmp	r7, r8
   412ba:	fb09 1303 	mla	r3, r9, r3, r1
   412be:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   412c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   412c6:	d8e6      	bhi.n	41296 <__multiply+0xe0>
   412c8:	f8cc 3000 	str.w	r3, [ip]
   412cc:	3504      	adds	r5, #4
   412ce:	e79b      	b.n	41208 <__multiply+0x52>
   412d0:	3e01      	subs	r6, #1
   412d2:	e79d      	b.n	41210 <__multiply+0x5a>

000412d4 <__lshift>:
   412d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   412d8:	460c      	mov	r4, r1
   412da:	ea4f 1a62 	mov.w	sl, r2, asr #5
   412de:	4607      	mov	r7, r0
   412e0:	4616      	mov	r6, r2
   412e2:	6923      	ldr	r3, [r4, #16]
   412e4:	6849      	ldr	r1, [r1, #4]
   412e6:	eb0a 0903 	add.w	r9, sl, r3
   412ea:	68a3      	ldr	r3, [r4, #8]
   412ec:	f109 0501 	add.w	r5, r9, #1
   412f0:	42ab      	cmp	r3, r5
   412f2:	db33      	blt.n	4135c <__lshift+0x88>
   412f4:	4638      	mov	r0, r7
   412f6:	f7ff fe3f 	bl	40f78 <_Balloc>
   412fa:	2300      	movs	r3, #0
   412fc:	4680      	mov	r8, r0
   412fe:	f100 0114 	add.w	r1, r0, #20
   41302:	f100 0210 	add.w	r2, r0, #16
   41306:	4618      	mov	r0, r3
   41308:	4553      	cmp	r3, sl
   4130a:	db2a      	blt.n	41362 <__lshift+0x8e>
   4130c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   41310:	f104 0314 	add.w	r3, r4, #20
   41314:	6920      	ldr	r0, [r4, #16]
   41316:	f016 021f 	ands.w	r2, r6, #31
   4131a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   4131e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   41322:	d022      	beq.n	4136a <__lshift+0x96>
   41324:	f1c2 0e20 	rsb	lr, r2, #32
   41328:	2000      	movs	r0, #0
   4132a:	681e      	ldr	r6, [r3, #0]
   4132c:	4096      	lsls	r6, r2
   4132e:	4330      	orrs	r0, r6
   41330:	f841 0b04 	str.w	r0, [r1], #4
   41334:	f853 0b04 	ldr.w	r0, [r3], #4
   41338:	459c      	cmp	ip, r3
   4133a:	fa20 f00e 	lsr.w	r0, r0, lr
   4133e:	d8f4      	bhi.n	4132a <__lshift+0x56>
   41340:	6008      	str	r0, [r1, #0]
   41342:	b108      	cbz	r0, 41348 <__lshift+0x74>
   41344:	f109 0502 	add.w	r5, r9, #2
   41348:	3d01      	subs	r5, #1
   4134a:	4638      	mov	r0, r7
   4134c:	4621      	mov	r1, r4
   4134e:	f8c8 5010 	str.w	r5, [r8, #16]
   41352:	f7ff fe45 	bl	40fe0 <_Bfree>
   41356:	4640      	mov	r0, r8
   41358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   4135c:	3101      	adds	r1, #1
   4135e:	005b      	lsls	r3, r3, #1
   41360:	e7c6      	b.n	412f0 <__lshift+0x1c>
   41362:	f842 0f04 	str.w	r0, [r2, #4]!
   41366:	3301      	adds	r3, #1
   41368:	e7ce      	b.n	41308 <__lshift+0x34>
   4136a:	3904      	subs	r1, #4
   4136c:	f853 2b04 	ldr.w	r2, [r3], #4
   41370:	459c      	cmp	ip, r3
   41372:	f841 2f04 	str.w	r2, [r1, #4]!
   41376:	d8f9      	bhi.n	4136c <__lshift+0x98>
   41378:	e7e6      	b.n	41348 <__lshift+0x74>

0004137a <__mcmp>:
   4137a:	6903      	ldr	r3, [r0, #16]
   4137c:	690a      	ldr	r2, [r1, #16]
   4137e:	1a9b      	subs	r3, r3, r2
   41380:	b530      	push	{r4, r5, lr}
   41382:	d10c      	bne.n	4139e <__mcmp+0x24>
   41384:	0092      	lsls	r2, r2, #2
   41386:	3014      	adds	r0, #20
   41388:	3114      	adds	r1, #20
   4138a:	1884      	adds	r4, r0, r2
   4138c:	4411      	add	r1, r2
   4138e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   41392:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   41396:	4295      	cmp	r5, r2
   41398:	d003      	beq.n	413a2 <__mcmp+0x28>
   4139a:	d305      	bcc.n	413a8 <__mcmp+0x2e>
   4139c:	2301      	movs	r3, #1
   4139e:	4618      	mov	r0, r3
   413a0:	bd30      	pop	{r4, r5, pc}
   413a2:	42a0      	cmp	r0, r4
   413a4:	d3f3      	bcc.n	4138e <__mcmp+0x14>
   413a6:	e7fa      	b.n	4139e <__mcmp+0x24>
   413a8:	f04f 33ff 	mov.w	r3, #4294967295
   413ac:	e7f7      	b.n	4139e <__mcmp+0x24>

000413ae <__mdiff>:
   413ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   413b2:	460d      	mov	r5, r1
   413b4:	4607      	mov	r7, r0
   413b6:	4611      	mov	r1, r2
   413b8:	4614      	mov	r4, r2
   413ba:	4628      	mov	r0, r5
   413bc:	f7ff ffdd 	bl	4137a <__mcmp>
   413c0:	1e06      	subs	r6, r0, #0
   413c2:	d108      	bne.n	413d6 <__mdiff+0x28>
   413c4:	4631      	mov	r1, r6
   413c6:	4638      	mov	r0, r7
   413c8:	f7ff fdd6 	bl	40f78 <_Balloc>
   413cc:	2301      	movs	r3, #1
   413ce:	e9c0 3604 	strd	r3, r6, [r0, #16]
   413d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   413d6:	bfa3      	ittte	ge
   413d8:	4623      	movge	r3, r4
   413da:	462c      	movge	r4, r5
   413dc:	2600      	movge	r6, #0
   413de:	2601      	movlt	r6, #1
   413e0:	bfa8      	it	ge
   413e2:	461d      	movge	r5, r3
   413e4:	6861      	ldr	r1, [r4, #4]
   413e6:	4638      	mov	r0, r7
   413e8:	f7ff fdc6 	bl	40f78 <_Balloc>
   413ec:	f105 0914 	add.w	r9, r5, #20
   413f0:	60c6      	str	r6, [r0, #12]
   413f2:	f104 0214 	add.w	r2, r4, #20
   413f6:	6926      	ldr	r6, [r4, #16]
   413f8:	f100 0114 	add.w	r1, r0, #20
   413fc:	692b      	ldr	r3, [r5, #16]
   413fe:	f04f 0e00 	mov.w	lr, #0
   41402:	eb02 0786 	add.w	r7, r2, r6, lsl #2
   41406:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   4140a:	f852 ab04 	ldr.w	sl, [r2], #4
   4140e:	f859 5b04 	ldr.w	r5, [r9], #4
   41412:	fa1f f38a 	uxth.w	r3, sl
   41416:	4694      	mov	ip, r2
   41418:	b2ac      	uxth	r4, r5
   4141a:	45c8      	cmp	r8, r9
   4141c:	4473      	add	r3, lr
   4141e:	eba3 0304 	sub.w	r3, r3, r4
   41422:	ea4f 4415 	mov.w	r4, r5, lsr #16
   41426:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
   4142a:	eb04 4423 	add.w	r4, r4, r3, asr #16
   4142e:	b29b      	uxth	r3, r3
   41430:	ea4f 4e24 	mov.w	lr, r4, asr #16
   41434:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   41438:	f841 4b04 	str.w	r4, [r1], #4
   4143c:	d8e5      	bhi.n	4140a <__mdiff+0x5c>
   4143e:	45bc      	cmp	ip, r7
   41440:	d304      	bcc.n	4144c <__mdiff+0x9e>
   41442:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   41446:	b183      	cbz	r3, 4146a <__mdiff+0xbc>
   41448:	6106      	str	r6, [r0, #16]
   4144a:	e7c2      	b.n	413d2 <__mdiff+0x24>
   4144c:	f85c 4b04 	ldr.w	r4, [ip], #4
   41450:	b2a2      	uxth	r2, r4
   41452:	4472      	add	r2, lr
   41454:	1413      	asrs	r3, r2, #16
   41456:	b292      	uxth	r2, r2
   41458:	eb03 4314 	add.w	r3, r3, r4, lsr #16
   4145c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   41460:	ea4f 4e23 	mov.w	lr, r3, asr #16
   41464:	f841 2b04 	str.w	r2, [r1], #4
   41468:	e7e9      	b.n	4143e <__mdiff+0x90>
   4146a:	3e01      	subs	r6, #1
   4146c:	e7e9      	b.n	41442 <__mdiff+0x94>

0004146e <__d2b>:
   4146e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   41472:	ec59 8b10 	vmov	r8, r9, d0
   41476:	f3c9 540a 	ubfx	r4, r9, #20, #11
   4147a:	460e      	mov	r6, r1
   4147c:	2101      	movs	r1, #1
   4147e:	4615      	mov	r5, r2
   41480:	f7ff fd7a 	bl	40f78 <_Balloc>
   41484:	f3c9 0313 	ubfx	r3, r9, #0, #20
   41488:	4607      	mov	r7, r0
   4148a:	bb2c      	cbnz	r4, 414d8 <__d2b+0x6a>
   4148c:	9301      	str	r3, [sp, #4]
   4148e:	f1b8 0300 	subs.w	r3, r8, #0
   41492:	d026      	beq.n	414e2 <__d2b+0x74>
   41494:	4668      	mov	r0, sp
   41496:	9300      	str	r3, [sp, #0]
   41498:	f7ff fe54 	bl	41144 <__lo0bits>
   4149c:	9900      	ldr	r1, [sp, #0]
   4149e:	b1f0      	cbz	r0, 414de <__d2b+0x70>
   414a0:	9a01      	ldr	r2, [sp, #4]
   414a2:	f1c0 0320 	rsb	r3, r0, #32
   414a6:	fa02 f303 	lsl.w	r3, r2, r3
   414aa:	40c2      	lsrs	r2, r0
   414ac:	430b      	orrs	r3, r1
   414ae:	9201      	str	r2, [sp, #4]
   414b0:	617b      	str	r3, [r7, #20]
   414b2:	9b01      	ldr	r3, [sp, #4]
   414b4:	2b00      	cmp	r3, #0
   414b6:	61bb      	str	r3, [r7, #24]
   414b8:	bf14      	ite	ne
   414ba:	2102      	movne	r1, #2
   414bc:	2101      	moveq	r1, #1
   414be:	6139      	str	r1, [r7, #16]
   414c0:	b1c4      	cbz	r4, 414f4 <__d2b+0x86>
   414c2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   414c6:	4404      	add	r4, r0
   414c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   414cc:	6034      	str	r4, [r6, #0]
   414ce:	6028      	str	r0, [r5, #0]
   414d0:	4638      	mov	r0, r7
   414d2:	b003      	add	sp, #12
   414d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   414d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   414dc:	e7d6      	b.n	4148c <__d2b+0x1e>
   414de:	6179      	str	r1, [r7, #20]
   414e0:	e7e7      	b.n	414b2 <__d2b+0x44>
   414e2:	a801      	add	r0, sp, #4
   414e4:	f7ff fe2e 	bl	41144 <__lo0bits>
   414e8:	9b01      	ldr	r3, [sp, #4]
   414ea:	2101      	movs	r1, #1
   414ec:	3020      	adds	r0, #32
   414ee:	617b      	str	r3, [r7, #20]
   414f0:	6139      	str	r1, [r7, #16]
   414f2:	e7e5      	b.n	414c0 <__d2b+0x52>
   414f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   414f8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   414fc:	6030      	str	r0, [r6, #0]
   414fe:	6918      	ldr	r0, [r3, #16]
   41500:	f7ff fe00 	bl	41104 <__hi0bits>
   41504:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   41508:	e7e1      	b.n	414ce <__d2b+0x60>

0004150a <__ratio>:
   4150a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4150e:	4688      	mov	r8, r1
   41510:	4681      	mov	r9, r0
   41512:	4669      	mov	r1, sp
   41514:	f7fb fd74 	bl	3d000 <__b2d>
   41518:	a901      	add	r1, sp, #4
   4151a:	4640      	mov	r0, r8
   4151c:	ec57 6b10 	vmov	r6, r7, d0
   41520:	f7fb fd6e 	bl	3d000 <__b2d>
   41524:	f8d9 3010 	ldr.w	r3, [r9, #16]
   41528:	f8d8 2010 	ldr.w	r2, [r8, #16]
   4152c:	463d      	mov	r5, r7
   4152e:	4630      	mov	r0, r6
   41530:	eba3 0c02 	sub.w	ip, r3, r2
   41534:	e9dd 3200 	ldrd	r3, r2, [sp]
   41538:	ec5b ab10 	vmov	sl, fp, d0
   4153c:	1a9b      	subs	r3, r3, r2
   4153e:	4659      	mov	r1, fp
   41540:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   41544:	2b00      	cmp	r3, #0
   41546:	bfcd      	iteet	gt
   41548:	463a      	movgt	r2, r7
   4154a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   4154e:	465a      	movle	r2, fp
   41550:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
   41554:	bfd8      	it	le
   41556:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
   4155a:	ee10 2a10 	vmov	r2, s0
   4155e:	460b      	mov	r3, r1
   41560:	4629      	mov	r1, r5
   41562:	f7db fa53 	bl	1ca0c <__aeabi_ddiv>
   41566:	ec41 0b10 	vmov	d0, r0, r1
   4156a:	b003      	add	sp, #12
   4156c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00041570 <__copybits>:
   41570:	3901      	subs	r1, #1
   41572:	f102 0314 	add.w	r3, r2, #20
   41576:	1149      	asrs	r1, r1, #5
   41578:	b510      	push	{r4, lr}
   4157a:	3101      	adds	r1, #1
   4157c:	6914      	ldr	r4, [r2, #16]
   4157e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   41582:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   41586:	42a3      	cmp	r3, r4
   41588:	4602      	mov	r2, r0
   4158a:	d303      	bcc.n	41594 <__copybits+0x24>
   4158c:	2300      	movs	r3, #0
   4158e:	428a      	cmp	r2, r1
   41590:	d305      	bcc.n	4159e <__copybits+0x2e>
   41592:	bd10      	pop	{r4, pc}
   41594:	f853 2b04 	ldr.w	r2, [r3], #4
   41598:	f840 2b04 	str.w	r2, [r0], #4
   4159c:	e7f3      	b.n	41586 <__copybits+0x16>
   4159e:	f842 3b04 	str.w	r3, [r2], #4
   415a2:	e7f4      	b.n	4158e <__copybits+0x1e>

000415a4 <__any_on>:
   415a4:	f100 0214 	add.w	r2, r0, #20
   415a8:	114b      	asrs	r3, r1, #5
   415aa:	6900      	ldr	r0, [r0, #16]
   415ac:	4298      	cmp	r0, r3
   415ae:	b510      	push	{r4, lr}
   415b0:	db11      	blt.n	415d6 <__any_on+0x32>
   415b2:	dd0a      	ble.n	415ca <__any_on+0x26>
   415b4:	f011 011f 	ands.w	r1, r1, #31
   415b8:	d007      	beq.n	415ca <__any_on+0x26>
   415ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   415be:	fa24 f001 	lsr.w	r0, r4, r1
   415c2:	fa00 f101 	lsl.w	r1, r0, r1
   415c6:	428c      	cmp	r4, r1
   415c8:	d10b      	bne.n	415e2 <__any_on+0x3e>
   415ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   415ce:	4293      	cmp	r3, r2
   415d0:	d803      	bhi.n	415da <__any_on+0x36>
   415d2:	2000      	movs	r0, #0
   415d4:	bd10      	pop	{r4, pc}
   415d6:	4603      	mov	r3, r0
   415d8:	e7f7      	b.n	415ca <__any_on+0x26>
   415da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   415de:	2900      	cmp	r1, #0
   415e0:	d0f5      	beq.n	415ce <__any_on+0x2a>
   415e2:	2001      	movs	r0, #1
   415e4:	e7f6      	b.n	415d4 <__any_on+0x30>

000415e6 <_calloc_r>:
   415e6:	b538      	push	{r3, r4, r5, lr}
   415e8:	fb02 f401 	mul.w	r4, r2, r1
   415ec:	4621      	mov	r1, r4
   415ee:	f7fa f8c3 	bl	3b778 <_malloc_r>
   415f2:	4605      	mov	r5, r0
   415f4:	b118      	cbz	r0, 415fe <_calloc_r+0x18>
   415f6:	4622      	mov	r2, r4
   415f8:	2100      	movs	r1, #0
   415fa:	f7ff f82f 	bl	4065c <memset>
   415fe:	4628      	mov	r0, r5
   41600:	bd38      	pop	{r3, r4, r5, pc}

00041602 <_realloc_r>:
   41602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41604:	4607      	mov	r7, r0
   41606:	4614      	mov	r4, r2
   41608:	460e      	mov	r6, r1
   4160a:	b921      	cbnz	r1, 41616 <_realloc_r+0x14>
   4160c:	4611      	mov	r1, r2
   4160e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   41612:	f7fa b8b1 	b.w	3b778 <_malloc_r>
   41616:	b922      	cbnz	r2, 41622 <_realloc_r+0x20>
   41618:	4625      	mov	r5, r4
   4161a:	f7fa f85f 	bl	3b6dc <_free_r>
   4161e:	4628      	mov	r0, r5
   41620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   41622:	f000 f968 	bl	418f6 <_malloc_usable_size_r>
   41626:	42a0      	cmp	r0, r4
   41628:	d20f      	bcs.n	4164a <_realloc_r+0x48>
   4162a:	4621      	mov	r1, r4
   4162c:	4638      	mov	r0, r7
   4162e:	f7fa f8a3 	bl	3b778 <_malloc_r>
   41632:	4605      	mov	r5, r0
   41634:	2800      	cmp	r0, #0
   41636:	d0f2      	beq.n	4161e <_realloc_r+0x1c>
   41638:	4631      	mov	r1, r6
   4163a:	4622      	mov	r2, r4
   4163c:	f7fe ffee 	bl	4061c <memcpy>
   41640:	4631      	mov	r1, r6
   41642:	4638      	mov	r0, r7
   41644:	f7fa f84a 	bl	3b6dc <_free_r>
   41648:	e7e9      	b.n	4161e <_realloc_r+0x1c>
   4164a:	4635      	mov	r5, r6
   4164c:	e7e7      	b.n	4161e <_realloc_r+0x1c>

0004164e <__ssputs_r>:
   4164e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   41652:	688e      	ldr	r6, [r1, #8]
   41654:	4682      	mov	sl, r0
   41656:	460c      	mov	r4, r1
   41658:	4691      	mov	r9, r2
   4165a:	429e      	cmp	r6, r3
   4165c:	4698      	mov	r8, r3
   4165e:	d838      	bhi.n	416d2 <__ssputs_r+0x84>
   41660:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   41664:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   41668:	d031      	beq.n	416ce <__ssputs_r+0x80>
   4166a:	6962      	ldr	r2, [r4, #20]
   4166c:	3301      	adds	r3, #1
   4166e:	6825      	ldr	r5, [r4, #0]
   41670:	6909      	ldr	r1, [r1, #16]
   41672:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   41676:	1a6f      	subs	r7, r5, r1
   41678:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   4167c:	443b      	add	r3, r7
   4167e:	1055      	asrs	r5, r2, #1
   41680:	429d      	cmp	r5, r3
   41682:	bf38      	it	cc
   41684:	461d      	movcc	r5, r3
   41686:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   4168a:	d030      	beq.n	416ee <__ssputs_r+0xa0>
   4168c:	4629      	mov	r1, r5
   4168e:	f7fa f873 	bl	3b778 <_malloc_r>
   41692:	4606      	mov	r6, r0
   41694:	b950      	cbnz	r0, 416ac <__ssputs_r+0x5e>
   41696:	230c      	movs	r3, #12
   41698:	f04f 30ff 	mov.w	r0, #4294967295
   4169c:	f8ca 3000 	str.w	r3, [sl]
   416a0:	89a3      	ldrh	r3, [r4, #12]
   416a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   416a6:	81a3      	strh	r3, [r4, #12]
   416a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   416ac:	463a      	mov	r2, r7
   416ae:	6921      	ldr	r1, [r4, #16]
   416b0:	f7fe ffb4 	bl	4061c <memcpy>
   416b4:	89a3      	ldrh	r3, [r4, #12]
   416b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   416ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   416be:	81a3      	strh	r3, [r4, #12]
   416c0:	6126      	str	r6, [r4, #16]
   416c2:	443e      	add	r6, r7
   416c4:	6165      	str	r5, [r4, #20]
   416c6:	1bed      	subs	r5, r5, r7
   416c8:	6026      	str	r6, [r4, #0]
   416ca:	4646      	mov	r6, r8
   416cc:	60a5      	str	r5, [r4, #8]
   416ce:	4546      	cmp	r6, r8
   416d0:	d900      	bls.n	416d4 <__ssputs_r+0x86>
   416d2:	4646      	mov	r6, r8
   416d4:	4632      	mov	r2, r6
   416d6:	4649      	mov	r1, r9
   416d8:	6820      	ldr	r0, [r4, #0]
   416da:	f7ff fc33 	bl	40f44 <memmove>
   416de:	68a3      	ldr	r3, [r4, #8]
   416e0:	2000      	movs	r0, #0
   416e2:	1b9b      	subs	r3, r3, r6
   416e4:	60a3      	str	r3, [r4, #8]
   416e6:	6823      	ldr	r3, [r4, #0]
   416e8:	441e      	add	r6, r3
   416ea:	6026      	str	r6, [r4, #0]
   416ec:	e7dc      	b.n	416a8 <__ssputs_r+0x5a>
   416ee:	462a      	mov	r2, r5
   416f0:	f7ff ff87 	bl	41602 <_realloc_r>
   416f4:	4606      	mov	r6, r0
   416f6:	2800      	cmp	r0, #0
   416f8:	d1e2      	bne.n	416c0 <__ssputs_r+0x72>
   416fa:	6921      	ldr	r1, [r4, #16]
   416fc:	4650      	mov	r0, sl
   416fe:	f7f9 ffed 	bl	3b6dc <_free_r>
   41702:	e7c8      	b.n	41696 <__ssputs_r+0x48>

00041704 <_sungetc_r>:
   41704:	b538      	push	{r3, r4, r5, lr}
   41706:	1c4b      	adds	r3, r1, #1
   41708:	4614      	mov	r4, r2
   4170a:	d103      	bne.n	41714 <_sungetc_r+0x10>
   4170c:	f04f 35ff 	mov.w	r5, #4294967295
   41710:	4628      	mov	r0, r5
   41712:	bd38      	pop	{r3, r4, r5, pc}
   41714:	8993      	ldrh	r3, [r2, #12]
   41716:	b2cd      	uxtb	r5, r1
   41718:	f023 0320 	bic.w	r3, r3, #32
   4171c:	8193      	strh	r3, [r2, #12]
   4171e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   41720:	6852      	ldr	r2, [r2, #4]
   41722:	b18b      	cbz	r3, 41748 <_sungetc_r+0x44>
   41724:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   41726:	4293      	cmp	r3, r2
   41728:	dd08      	ble.n	4173c <_sungetc_r+0x38>
   4172a:	6823      	ldr	r3, [r4, #0]
   4172c:	1e5a      	subs	r2, r3, #1
   4172e:	6022      	str	r2, [r4, #0]
   41730:	f803 5c01 	strb.w	r5, [r3, #-1]
   41734:	6863      	ldr	r3, [r4, #4]
   41736:	3301      	adds	r3, #1
   41738:	6063      	str	r3, [r4, #4]
   4173a:	e7e9      	b.n	41710 <_sungetc_r+0xc>
   4173c:	4621      	mov	r1, r4
   4173e:	f000 f896 	bl	4186e <__submore>
   41742:	2800      	cmp	r0, #0
   41744:	d0f1      	beq.n	4172a <_sungetc_r+0x26>
   41746:	e7e1      	b.n	4170c <_sungetc_r+0x8>
   41748:	6921      	ldr	r1, [r4, #16]
   4174a:	6823      	ldr	r3, [r4, #0]
   4174c:	b151      	cbz	r1, 41764 <_sungetc_r+0x60>
   4174e:	4299      	cmp	r1, r3
   41750:	d208      	bcs.n	41764 <_sungetc_r+0x60>
   41752:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   41756:	42a9      	cmp	r1, r5
   41758:	d104      	bne.n	41764 <_sungetc_r+0x60>
   4175a:	3b01      	subs	r3, #1
   4175c:	3201      	adds	r2, #1
   4175e:	6023      	str	r3, [r4, #0]
   41760:	6062      	str	r2, [r4, #4]
   41762:	e7d5      	b.n	41710 <_sungetc_r+0xc>
   41764:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   41768:	f104 0344 	add.w	r3, r4, #68	; 0x44
   4176c:	6363      	str	r3, [r4, #52]	; 0x34
   4176e:	2303      	movs	r3, #3
   41770:	63a3      	str	r3, [r4, #56]	; 0x38
   41772:	4623      	mov	r3, r4
   41774:	f803 5f46 	strb.w	r5, [r3, #70]!
   41778:	6023      	str	r3, [r4, #0]
   4177a:	2301      	movs	r3, #1
   4177c:	e7dc      	b.n	41738 <_sungetc_r+0x34>

0004177e <__ssrefill_r>:
   4177e:	b510      	push	{r4, lr}
   41780:	460c      	mov	r4, r1
   41782:	6b49      	ldr	r1, [r1, #52]	; 0x34
   41784:	b169      	cbz	r1, 417a2 <__ssrefill_r+0x24>
   41786:	f104 0344 	add.w	r3, r4, #68	; 0x44
   4178a:	4299      	cmp	r1, r3
   4178c:	d001      	beq.n	41792 <__ssrefill_r+0x14>
   4178e:	f7f9 ffa5 	bl	3b6dc <_free_r>
   41792:	2000      	movs	r0, #0
   41794:	6c23      	ldr	r3, [r4, #64]	; 0x40
   41796:	6360      	str	r0, [r4, #52]	; 0x34
   41798:	6063      	str	r3, [r4, #4]
   4179a:	b113      	cbz	r3, 417a2 <__ssrefill_r+0x24>
   4179c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   4179e:	6023      	str	r3, [r4, #0]
   417a0:	bd10      	pop	{r4, pc}
   417a2:	6923      	ldr	r3, [r4, #16]
   417a4:	f04f 30ff 	mov.w	r0, #4294967295
   417a8:	6023      	str	r3, [r4, #0]
   417aa:	2300      	movs	r3, #0
   417ac:	6063      	str	r3, [r4, #4]
   417ae:	89a3      	ldrh	r3, [r4, #12]
   417b0:	f043 0320 	orr.w	r3, r3, #32
   417b4:	81a3      	strh	r3, [r4, #12]
   417b6:	e7f3      	b.n	417a0 <__ssrefill_r+0x22>

000417b8 <__sccl>:
   417b8:	b570      	push	{r4, r5, r6, lr}
   417ba:	780b      	ldrb	r3, [r1, #0]
   417bc:	1e44      	subs	r4, r0, #1
   417be:	f100 05ff 	add.w	r5, r0, #255	; 0xff
   417c2:	2b5e      	cmp	r3, #94	; 0x5e
   417c4:	bf13      	iteet	ne
   417c6:	1c4a      	addne	r2, r1, #1
   417c8:	1c8a      	addeq	r2, r1, #2
   417ca:	784b      	ldrbeq	r3, [r1, #1]
   417cc:	2100      	movne	r1, #0
   417ce:	bf08      	it	eq
   417d0:	2101      	moveq	r1, #1
   417d2:	f804 1f01 	strb.w	r1, [r4, #1]!
   417d6:	42ac      	cmp	r4, r5
   417d8:	d1fb      	bne.n	417d2 <__sccl+0x1a>
   417da:	b913      	cbnz	r3, 417e2 <__sccl+0x2a>
   417dc:	3a01      	subs	r2, #1
   417de:	4610      	mov	r0, r2
   417e0:	bd70      	pop	{r4, r5, r6, pc}
   417e2:	f081 0401 	eor.w	r4, r1, #1
   417e6:	1c51      	adds	r1, r2, #1
   417e8:	54c4      	strb	r4, [r0, r3]
   417ea:	f811 5c01 	ldrb.w	r5, [r1, #-1]
   417ee:	1e4e      	subs	r6, r1, #1
   417f0:	460a      	mov	r2, r1
   417f2:	2d2d      	cmp	r5, #45	; 0x2d
   417f4:	d006      	beq.n	41804 <__sccl+0x4c>
   417f6:	2d5d      	cmp	r5, #93	; 0x5d
   417f8:	d0f1      	beq.n	417de <__sccl+0x26>
   417fa:	b90d      	cbnz	r5, 41800 <__sccl+0x48>
   417fc:	4632      	mov	r2, r6
   417fe:	e7ee      	b.n	417de <__sccl+0x26>
   41800:	462b      	mov	r3, r5
   41802:	e7f0      	b.n	417e6 <__sccl+0x2e>
   41804:	780e      	ldrb	r6, [r1, #0]
   41806:	2e5d      	cmp	r6, #93	; 0x5d
   41808:	d0fa      	beq.n	41800 <__sccl+0x48>
   4180a:	42b3      	cmp	r3, r6
   4180c:	dcf8      	bgt.n	41800 <__sccl+0x48>
   4180e:	3301      	adds	r3, #1
   41810:	429e      	cmp	r6, r3
   41812:	54c4      	strb	r4, [r0, r3]
   41814:	dcfb      	bgt.n	4180e <__sccl+0x56>
   41816:	3102      	adds	r1, #2
   41818:	e7e7      	b.n	417ea <__sccl+0x32>

0004181a <_raise_r>:
   4181a:	291f      	cmp	r1, #31
   4181c:	b538      	push	{r3, r4, r5, lr}
   4181e:	4604      	mov	r4, r0
   41820:	460d      	mov	r5, r1
   41822:	d904      	bls.n	4182e <_raise_r+0x14>
   41824:	2316      	movs	r3, #22
   41826:	6003      	str	r3, [r0, #0]
   41828:	f04f 30ff 	mov.w	r0, #4294967295
   4182c:	bd38      	pop	{r3, r4, r5, pc}
   4182e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   41830:	b112      	cbz	r2, 41838 <_raise_r+0x1e>
   41832:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   41836:	b94b      	cbnz	r3, 4184c <_raise_r+0x32>
   41838:	4620      	mov	r0, r4
   4183a:	f000 f816 	bl	4186a <_getpid_r>
   4183e:	462a      	mov	r2, r5
   41840:	4601      	mov	r1, r0
   41842:	4620      	mov	r0, r4
   41844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   41848:	f7fb bfd0 	b.w	3d7ec <_kill_r>
   4184c:	2b01      	cmp	r3, #1
   4184e:	d00a      	beq.n	41866 <_raise_r+0x4c>
   41850:	1c59      	adds	r1, r3, #1
   41852:	d103      	bne.n	4185c <_raise_r+0x42>
   41854:	2316      	movs	r3, #22
   41856:	6003      	str	r3, [r0, #0]
   41858:	2001      	movs	r0, #1
   4185a:	e7e7      	b.n	4182c <_raise_r+0x12>
   4185c:	2400      	movs	r4, #0
   4185e:	4628      	mov	r0, r5
   41860:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   41864:	4798      	blx	r3
   41866:	2000      	movs	r0, #0
   41868:	e7e0      	b.n	4182c <_raise_r+0x12>

0004186a <_getpid_r>:
   4186a:	f7fc bd5f 	b.w	3e32c <_getpid>

0004186e <__submore>:
   4186e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41872:	460c      	mov	r4, r1
   41874:	6b49      	ldr	r1, [r1, #52]	; 0x34
   41876:	f104 0344 	add.w	r3, r4, #68	; 0x44
   4187a:	4299      	cmp	r1, r3
   4187c:	d11a      	bne.n	418b4 <__submore+0x46>
   4187e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   41882:	f7f9 ff79 	bl	3b778 <_malloc_r>
   41886:	b918      	cbnz	r0, 41890 <__submore+0x22>
   41888:	f04f 30ff 	mov.w	r0, #4294967295
   4188c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   41890:	f44f 6380 	mov.w	r3, #1024	; 0x400
   41894:	6360      	str	r0, [r4, #52]	; 0x34
   41896:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   4189a:	63a3      	str	r3, [r4, #56]	; 0x38
   4189c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   418a0:	7083      	strb	r3, [r0, #2]
   418a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   418a6:	7043      	strb	r3, [r0, #1]
   418a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   418ac:	7003      	strb	r3, [r0, #0]
   418ae:	6020      	str	r0, [r4, #0]
   418b0:	2000      	movs	r0, #0
   418b2:	e7eb      	b.n	4188c <__submore+0x1e>
   418b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   418b6:	0077      	lsls	r7, r6, #1
   418b8:	463a      	mov	r2, r7
   418ba:	f7ff fea2 	bl	41602 <_realloc_r>
   418be:	4605      	mov	r5, r0
   418c0:	2800      	cmp	r0, #0
   418c2:	d0e1      	beq.n	41888 <__submore+0x1a>
   418c4:	eb00 0806 	add.w	r8, r0, r6
   418c8:	4601      	mov	r1, r0
   418ca:	4632      	mov	r2, r6
   418cc:	4640      	mov	r0, r8
   418ce:	f7fe fea5 	bl	4061c <memcpy>
   418d2:	f8c4 8000 	str.w	r8, [r4]
   418d6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   418da:	e7e9      	b.n	418b0 <__submore+0x42>

000418dc <__ascii_wctomb>:
   418dc:	b149      	cbz	r1, 418f2 <__ascii_wctomb+0x16>
   418de:	2aff      	cmp	r2, #255	; 0xff
   418e0:	bf8d      	iteet	hi
   418e2:	238a      	movhi	r3, #138	; 0x8a
   418e4:	700a      	strbls	r2, [r1, #0]
   418e6:	2001      	movls	r0, #1
   418e8:	6003      	strhi	r3, [r0, #0]
   418ea:	bf88      	it	hi
   418ec:	f04f 30ff 	movhi.w	r0, #4294967295
   418f0:	4770      	bx	lr
   418f2:	4608      	mov	r0, r1
   418f4:	4770      	bx	lr

000418f6 <_malloc_usable_size_r>:
   418f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
   418fa:	1f18      	subs	r0, r3, #4
   418fc:	2b00      	cmp	r3, #0
   418fe:	bfbc      	itt	lt
   41900:	580b      	ldrlt	r3, [r1, r0]
   41902:	18c0      	addlt	r0, r0, r3
   41904:	4770      	bx	lr
