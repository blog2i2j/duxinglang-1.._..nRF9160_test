
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

0000c000 <_vector_table>:
    c000:	20023b00 	.word	0x20023b00
    c004:	0000fe81 	.word	0x0000fe81
    c008:	00023769 	.word	0x00023769
    c00c:	0000fb39 	.word	0x0000fb39
    c010:	0000fb39 	.word	0x0000fb39
    c014:	0000fb39 	.word	0x0000fb39
    c018:	0000fb39 	.word	0x0000fb39
    c01c:	0000fb39 	.word	0x0000fb39
    c020:	0000fb39 	.word	0x0000fb39
    c024:	0000fb39 	.word	0x0000fb39
    c028:	0000fb39 	.word	0x0000fb39
    c02c:	0000fb01 	.word	0x0000fb01
    c030:	0000fb39 	.word	0x0000fb39
    c034:	0000fb39 	.word	0x0000fb39
    c038:	0000fa51 	.word	0x0000fa51
    c03c:	00023757 	.word	0x00023757

0000c040 <_irq_vector_table>:
    c040:	0000fb65 0000fb65 0000fb65 0000fb65     e...e...e...e...
    c050:	0000fb65 0000fb65 0000fb65 0000fb65     e...e...e...e...
    c060:	0000fb65 0000fb65 0000fb65 0000fb65     e...e...e...e...
    c070:	0000fb65 0000fb65 0000fb65 0000fb65     e...e...e...e...
    c080:	0000fb65 0000fb65 0000fb65 0000fb65     e...e...e...e...
    c090:	0000fb65 0000fb65 0000fb65 0000fb65     e...e...e...e...
    c0a0:	0000fb65 0000fb65 0000fb65 0000fb65     e...e...e...e...
    c0b0:	00010ff5 00023bc9 0000fb65 0000fb65     .....;..e...e...
    c0c0:	0000fb65 0000fb65 0000fb65 0000fb65     e...e...e...e...
    c0d0:	0000fb65 0000fb65 0000fb65 0000fb65     e...e...e...e...
    c0e0:	0000fb65 0000fb65 00023beb 0000fb65     e...e....;..e...
    c0f0:	0000fb65 0000fb65 0000fb65 0000fb65     e...e...e...e...
    c100:	0000fb65 0000fb65 0000fb65 0000fb65     e...e...e...e...
    c110:	0000fb65 0000fb65 0000fb65 0000fb65     e...e...e...e...
    c120:	0000fb65 0000fb65 0000fb65 0000fb65     e...e...e...e...
    c130:	0000fb65 0000fb65 0000fb65 0000fb65     e...e...e...e...
    c140:	0000fb65                                e...

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b01 0001be40     ...(L....[..@...
    c210:	00000001 0000c000 20024910 0001145d     .........I. ]...

Disassembly of section _TEXT_SECTION_NAME_2:

0000c220 <__aeabi_drsub>:
    c220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c224:	e002      	b.n	c22c <__adddf3>
    c226:	bf00      	nop

0000c228 <__aeabi_dsub>:
    c228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c22c <__adddf3>:
    c22c:	b530      	push	{r4, r5, lr}
    c22e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c232:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c236:	ea94 0f05 	teq	r4, r5
    c23a:	bf08      	it	eq
    c23c:	ea90 0f02 	teqeq	r0, r2
    c240:	bf1f      	itttt	ne
    c242:	ea54 0c00 	orrsne.w	ip, r4, r0
    c246:	ea55 0c02 	orrsne.w	ip, r5, r2
    c24a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c24e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c252:	f000 80e2 	beq.w	c41a <__adddf3+0x1ee>
    c256:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c25a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c25e:	bfb8      	it	lt
    c260:	426d      	neglt	r5, r5
    c262:	dd0c      	ble.n	c27e <__adddf3+0x52>
    c264:	442c      	add	r4, r5
    c266:	ea80 0202 	eor.w	r2, r0, r2
    c26a:	ea81 0303 	eor.w	r3, r1, r3
    c26e:	ea82 0000 	eor.w	r0, r2, r0
    c272:	ea83 0101 	eor.w	r1, r3, r1
    c276:	ea80 0202 	eor.w	r2, r0, r2
    c27a:	ea81 0303 	eor.w	r3, r1, r3
    c27e:	2d36      	cmp	r5, #54	; 0x36
    c280:	bf88      	it	hi
    c282:	bd30      	pophi	{r4, r5, pc}
    c284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c288:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c28c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c294:	d002      	beq.n	c29c <__adddf3+0x70>
    c296:	4240      	negs	r0, r0
    c298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c29c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2a8:	d002      	beq.n	c2b0 <__adddf3+0x84>
    c2aa:	4252      	negs	r2, r2
    c2ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2b0:	ea94 0f05 	teq	r4, r5
    c2b4:	f000 80a7 	beq.w	c406 <__adddf3+0x1da>
    c2b8:	f1a4 0401 	sub.w	r4, r4, #1
    c2bc:	f1d5 0e20 	rsbs	lr, r5, #32
    c2c0:	db0d      	blt.n	c2de <__adddf3+0xb2>
    c2c2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2c6:	fa22 f205 	lsr.w	r2, r2, r5
    c2ca:	1880      	adds	r0, r0, r2
    c2cc:	f141 0100 	adc.w	r1, r1, #0
    c2d0:	fa03 f20e 	lsl.w	r2, r3, lr
    c2d4:	1880      	adds	r0, r0, r2
    c2d6:	fa43 f305 	asr.w	r3, r3, r5
    c2da:	4159      	adcs	r1, r3
    c2dc:	e00e      	b.n	c2fc <__adddf3+0xd0>
    c2de:	f1a5 0520 	sub.w	r5, r5, #32
    c2e2:	f10e 0e20 	add.w	lr, lr, #32
    c2e6:	2a01      	cmp	r2, #1
    c2e8:	fa03 fc0e 	lsl.w	ip, r3, lr
    c2ec:	bf28      	it	cs
    c2ee:	f04c 0c02 	orrcs.w	ip, ip, #2
    c2f2:	fa43 f305 	asr.w	r3, r3, r5
    c2f6:	18c0      	adds	r0, r0, r3
    c2f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c2fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c300:	d507      	bpl.n	c312 <__adddf3+0xe6>
    c302:	f04f 0e00 	mov.w	lr, #0
    c306:	f1dc 0c00 	rsbs	ip, ip, #0
    c30a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c30e:	eb6e 0101 	sbc.w	r1, lr, r1
    c312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c316:	d31b      	bcc.n	c350 <__adddf3+0x124>
    c318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c31c:	d30c      	bcc.n	c338 <__adddf3+0x10c>
    c31e:	0849      	lsrs	r1, r1, #1
    c320:	ea5f 0030 	movs.w	r0, r0, rrx
    c324:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c328:	f104 0401 	add.w	r4, r4, #1
    c32c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c334:	f080 809a 	bcs.w	c46c <__adddf3+0x240>
    c338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c33c:	bf08      	it	eq
    c33e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c342:	f150 0000 	adcs.w	r0, r0, #0
    c346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c34a:	ea41 0105 	orr.w	r1, r1, r5
    c34e:	bd30      	pop	{r4, r5, pc}
    c350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c354:	4140      	adcs	r0, r0
    c356:	eb41 0101 	adc.w	r1, r1, r1
    c35a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c35e:	f1a4 0401 	sub.w	r4, r4, #1
    c362:	d1e9      	bne.n	c338 <__adddf3+0x10c>
    c364:	f091 0f00 	teq	r1, #0
    c368:	bf04      	itt	eq
    c36a:	4601      	moveq	r1, r0
    c36c:	2000      	moveq	r0, #0
    c36e:	fab1 f381 	clz	r3, r1
    c372:	bf08      	it	eq
    c374:	3320      	addeq	r3, #32
    c376:	f1a3 030b 	sub.w	r3, r3, #11
    c37a:	f1b3 0220 	subs.w	r2, r3, #32
    c37e:	da0c      	bge.n	c39a <__adddf3+0x16e>
    c380:	320c      	adds	r2, #12
    c382:	dd08      	ble.n	c396 <__adddf3+0x16a>
    c384:	f102 0c14 	add.w	ip, r2, #20
    c388:	f1c2 020c 	rsb	r2, r2, #12
    c38c:	fa01 f00c 	lsl.w	r0, r1, ip
    c390:	fa21 f102 	lsr.w	r1, r1, r2
    c394:	e00c      	b.n	c3b0 <__adddf3+0x184>
    c396:	f102 0214 	add.w	r2, r2, #20
    c39a:	bfd8      	it	le
    c39c:	f1c2 0c20 	rsble	ip, r2, #32
    c3a0:	fa01 f102 	lsl.w	r1, r1, r2
    c3a4:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3a8:	bfdc      	itt	le
    c3aa:	ea41 010c 	orrle.w	r1, r1, ip
    c3ae:	4090      	lslle	r0, r2
    c3b0:	1ae4      	subs	r4, r4, r3
    c3b2:	bfa2      	ittt	ge
    c3b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3b8:	4329      	orrge	r1, r5
    c3ba:	bd30      	popge	{r4, r5, pc}
    c3bc:	ea6f 0404 	mvn.w	r4, r4
    c3c0:	3c1f      	subs	r4, #31
    c3c2:	da1c      	bge.n	c3fe <__adddf3+0x1d2>
    c3c4:	340c      	adds	r4, #12
    c3c6:	dc0e      	bgt.n	c3e6 <__adddf3+0x1ba>
    c3c8:	f104 0414 	add.w	r4, r4, #20
    c3cc:	f1c4 0220 	rsb	r2, r4, #32
    c3d0:	fa20 f004 	lsr.w	r0, r0, r4
    c3d4:	fa01 f302 	lsl.w	r3, r1, r2
    c3d8:	ea40 0003 	orr.w	r0, r0, r3
    c3dc:	fa21 f304 	lsr.w	r3, r1, r4
    c3e0:	ea45 0103 	orr.w	r1, r5, r3
    c3e4:	bd30      	pop	{r4, r5, pc}
    c3e6:	f1c4 040c 	rsb	r4, r4, #12
    c3ea:	f1c4 0220 	rsb	r2, r4, #32
    c3ee:	fa20 f002 	lsr.w	r0, r0, r2
    c3f2:	fa01 f304 	lsl.w	r3, r1, r4
    c3f6:	ea40 0003 	orr.w	r0, r0, r3
    c3fa:	4629      	mov	r1, r5
    c3fc:	bd30      	pop	{r4, r5, pc}
    c3fe:	fa21 f004 	lsr.w	r0, r1, r4
    c402:	4629      	mov	r1, r5
    c404:	bd30      	pop	{r4, r5, pc}
    c406:	f094 0f00 	teq	r4, #0
    c40a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c40e:	bf06      	itte	eq
    c410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c414:	3401      	addeq	r4, #1
    c416:	3d01      	subne	r5, #1
    c418:	e74e      	b.n	c2b8 <__adddf3+0x8c>
    c41a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c41e:	bf18      	it	ne
    c420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c424:	d029      	beq.n	c47a <__adddf3+0x24e>
    c426:	ea94 0f05 	teq	r4, r5
    c42a:	bf08      	it	eq
    c42c:	ea90 0f02 	teqeq	r0, r2
    c430:	d005      	beq.n	c43e <__adddf3+0x212>
    c432:	ea54 0c00 	orrs.w	ip, r4, r0
    c436:	bf04      	itt	eq
    c438:	4619      	moveq	r1, r3
    c43a:	4610      	moveq	r0, r2
    c43c:	bd30      	pop	{r4, r5, pc}
    c43e:	ea91 0f03 	teq	r1, r3
    c442:	bf1e      	ittt	ne
    c444:	2100      	movne	r1, #0
    c446:	2000      	movne	r0, #0
    c448:	bd30      	popne	{r4, r5, pc}
    c44a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c44e:	d105      	bne.n	c45c <__adddf3+0x230>
    c450:	0040      	lsls	r0, r0, #1
    c452:	4149      	adcs	r1, r1
    c454:	bf28      	it	cs
    c456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c45a:	bd30      	pop	{r4, r5, pc}
    c45c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c460:	bf3c      	itt	cc
    c462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c466:	bd30      	popcc	{r4, r5, pc}
    c468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c46c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c474:	f04f 0000 	mov.w	r0, #0
    c478:	bd30      	pop	{r4, r5, pc}
    c47a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c47e:	bf1a      	itte	ne
    c480:	4619      	movne	r1, r3
    c482:	4610      	movne	r0, r2
    c484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c488:	bf1c      	itt	ne
    c48a:	460b      	movne	r3, r1
    c48c:	4602      	movne	r2, r0
    c48e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c492:	bf06      	itte	eq
    c494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c498:	ea91 0f03 	teqeq	r1, r3
    c49c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4a0:	bd30      	pop	{r4, r5, pc}
    c4a2:	bf00      	nop

0000c4a4 <__aeabi_ui2d>:
    c4a4:	f090 0f00 	teq	r0, #0
    c4a8:	bf04      	itt	eq
    c4aa:	2100      	moveq	r1, #0
    c4ac:	4770      	bxeq	lr
    c4ae:	b530      	push	{r4, r5, lr}
    c4b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4b8:	f04f 0500 	mov.w	r5, #0
    c4bc:	f04f 0100 	mov.w	r1, #0
    c4c0:	e750      	b.n	c364 <__adddf3+0x138>
    c4c2:	bf00      	nop

0000c4c4 <__aeabi_i2d>:
    c4c4:	f090 0f00 	teq	r0, #0
    c4c8:	bf04      	itt	eq
    c4ca:	2100      	moveq	r1, #0
    c4cc:	4770      	bxeq	lr
    c4ce:	b530      	push	{r4, r5, lr}
    c4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4dc:	bf48      	it	mi
    c4de:	4240      	negmi	r0, r0
    c4e0:	f04f 0100 	mov.w	r1, #0
    c4e4:	e73e      	b.n	c364 <__adddf3+0x138>
    c4e6:	bf00      	nop

0000c4e8 <__aeabi_f2d>:
    c4e8:	0042      	lsls	r2, r0, #1
    c4ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c4ee:	ea4f 0131 	mov.w	r1, r1, rrx
    c4f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c4f6:	bf1f      	itttt	ne
    c4f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c4fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c504:	4770      	bxne	lr
    c506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c50a:	bf08      	it	eq
    c50c:	4770      	bxeq	lr
    c50e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c512:	bf04      	itt	eq
    c514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c518:	4770      	bxeq	lr
    c51a:	b530      	push	{r4, r5, lr}
    c51c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c528:	e71c      	b.n	c364 <__adddf3+0x138>
    c52a:	bf00      	nop

0000c52c <__aeabi_ul2d>:
    c52c:	ea50 0201 	orrs.w	r2, r0, r1
    c530:	bf08      	it	eq
    c532:	4770      	bxeq	lr
    c534:	b530      	push	{r4, r5, lr}
    c536:	f04f 0500 	mov.w	r5, #0
    c53a:	e00a      	b.n	c552 <__aeabi_l2d+0x16>

0000c53c <__aeabi_l2d>:
    c53c:	ea50 0201 	orrs.w	r2, r0, r1
    c540:	bf08      	it	eq
    c542:	4770      	bxeq	lr
    c544:	b530      	push	{r4, r5, lr}
    c546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c54a:	d502      	bpl.n	c552 <__aeabi_l2d+0x16>
    c54c:	4240      	negs	r0, r0
    c54e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c552:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c556:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c55a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c55e:	f43f aed8 	beq.w	c312 <__adddf3+0xe6>
    c562:	f04f 0203 	mov.w	r2, #3
    c566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c56a:	bf18      	it	ne
    c56c:	3203      	addne	r2, #3
    c56e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c572:	bf18      	it	ne
    c574:	3203      	addne	r2, #3
    c576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c57a:	f1c2 0320 	rsb	r3, r2, #32
    c57e:	fa00 fc03 	lsl.w	ip, r0, r3
    c582:	fa20 f002 	lsr.w	r0, r0, r2
    c586:	fa01 fe03 	lsl.w	lr, r1, r3
    c58a:	ea40 000e 	orr.w	r0, r0, lr
    c58e:	fa21 f102 	lsr.w	r1, r1, r2
    c592:	4414      	add	r4, r2
    c594:	e6bd      	b.n	c312 <__adddf3+0xe6>
    c596:	bf00      	nop

0000c598 <__aeabi_ldivmod>:
    c598:	b97b      	cbnz	r3, c5ba <__aeabi_ldivmod+0x22>
    c59a:	b972      	cbnz	r2, c5ba <__aeabi_ldivmod+0x22>
    c59c:	2900      	cmp	r1, #0
    c59e:	bfbe      	ittt	lt
    c5a0:	2000      	movlt	r0, #0
    c5a2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    c5a6:	e006      	blt.n	c5b6 <__aeabi_ldivmod+0x1e>
    c5a8:	bf08      	it	eq
    c5aa:	2800      	cmpeq	r0, #0
    c5ac:	bf1c      	itt	ne
    c5ae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    c5b2:	f04f 30ff 	movne.w	r0, #4294967295
    c5b6:	f000 b9c7 	b.w	c948 <__aeabi_idiv0>
    c5ba:	f1ad 0c08 	sub.w	ip, sp, #8
    c5be:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c5c2:	2900      	cmp	r1, #0
    c5c4:	db09      	blt.n	c5da <__aeabi_ldivmod+0x42>
    c5c6:	2b00      	cmp	r3, #0
    c5c8:	db1a      	blt.n	c600 <__aeabi_ldivmod+0x68>
    c5ca:	f000 f84d 	bl	c668 <__udivmoddi4>
    c5ce:	f8dd e004 	ldr.w	lr, [sp, #4]
    c5d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c5d6:	b004      	add	sp, #16
    c5d8:	4770      	bx	lr
    c5da:	4240      	negs	r0, r0
    c5dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c5e0:	2b00      	cmp	r3, #0
    c5e2:	db1b      	blt.n	c61c <__aeabi_ldivmod+0x84>
    c5e4:	f000 f840 	bl	c668 <__udivmoddi4>
    c5e8:	f8dd e004 	ldr.w	lr, [sp, #4]
    c5ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c5f0:	b004      	add	sp, #16
    c5f2:	4240      	negs	r0, r0
    c5f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c5f8:	4252      	negs	r2, r2
    c5fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c5fe:	4770      	bx	lr
    c600:	4252      	negs	r2, r2
    c602:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c606:	f000 f82f 	bl	c668 <__udivmoddi4>
    c60a:	f8dd e004 	ldr.w	lr, [sp, #4]
    c60e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c612:	b004      	add	sp, #16
    c614:	4240      	negs	r0, r0
    c616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c61a:	4770      	bx	lr
    c61c:	4252      	negs	r2, r2
    c61e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c622:	f000 f821 	bl	c668 <__udivmoddi4>
    c626:	f8dd e004 	ldr.w	lr, [sp, #4]
    c62a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c62e:	b004      	add	sp, #16
    c630:	4252      	negs	r2, r2
    c632:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c636:	4770      	bx	lr

0000c638 <__aeabi_uldivmod>:
    c638:	b953      	cbnz	r3, c650 <__aeabi_uldivmod+0x18>
    c63a:	b94a      	cbnz	r2, c650 <__aeabi_uldivmod+0x18>
    c63c:	2900      	cmp	r1, #0
    c63e:	bf08      	it	eq
    c640:	2800      	cmpeq	r0, #0
    c642:	bf1c      	itt	ne
    c644:	f04f 31ff 	movne.w	r1, #4294967295
    c648:	f04f 30ff 	movne.w	r0, #4294967295
    c64c:	f000 b97c 	b.w	c948 <__aeabi_idiv0>
    c650:	f1ad 0c08 	sub.w	ip, sp, #8
    c654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c658:	f000 f806 	bl	c668 <__udivmoddi4>
    c65c:	f8dd e004 	ldr.w	lr, [sp, #4]
    c660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c664:	b004      	add	sp, #16
    c666:	4770      	bx	lr

0000c668 <__udivmoddi4>:
    c668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c66c:	468c      	mov	ip, r1
    c66e:	9d08      	ldr	r5, [sp, #32]
    c670:	4604      	mov	r4, r0
    c672:	468a      	mov	sl, r1
    c674:	2b00      	cmp	r3, #0
    c676:	d14a      	bne.n	c70e <__udivmoddi4+0xa6>
    c678:	428a      	cmp	r2, r1
    c67a:	4617      	mov	r7, r2
    c67c:	d962      	bls.n	c744 <__udivmoddi4+0xdc>
    c67e:	fab2 f682 	clz	r6, r2
    c682:	b14e      	cbz	r6, c698 <__udivmoddi4+0x30>
    c684:	f1c6 0e20 	rsb	lr, r6, #32
    c688:	fa01 f306 	lsl.w	r3, r1, r6
    c68c:	40b7      	lsls	r7, r6
    c68e:	40b4      	lsls	r4, r6
    c690:	fa20 fe0e 	lsr.w	lr, r0, lr
    c694:	ea4e 0a03 	orr.w	sl, lr, r3
    c698:	ea4f 4817 	mov.w	r8, r7, lsr #16
    c69c:	0c23      	lsrs	r3, r4, #16
    c69e:	fa1f f987 	uxth.w	r9, r7
    c6a2:	fbba fef8 	udiv	lr, sl, r8
    c6a6:	fb08 aa1e 	mls	sl, r8, lr, sl
    c6aa:	fb0e f209 	mul.w	r2, lr, r9
    c6ae:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
    c6b2:	429a      	cmp	r2, r3
    c6b4:	d90b      	bls.n	c6ce <__udivmoddi4+0x66>
    c6b6:	18fb      	adds	r3, r7, r3
    c6b8:	f10e 31ff 	add.w	r1, lr, #4294967295
    c6bc:	bf2c      	ite	cs
    c6be:	2001      	movcs	r0, #1
    c6c0:	2000      	movcc	r0, #0
    c6c2:	429a      	cmp	r2, r3
    c6c4:	d902      	bls.n	c6cc <__udivmoddi4+0x64>
    c6c6:	2800      	cmp	r0, #0
    c6c8:	f000 812a 	beq.w	c920 <__udivmoddi4+0x2b8>
    c6cc:	468e      	mov	lr, r1
    c6ce:	1a9a      	subs	r2, r3, r2
    c6d0:	b2a3      	uxth	r3, r4
    c6d2:	fbb2 f0f8 	udiv	r0, r2, r8
    c6d6:	fb08 2210 	mls	r2, r8, r0, r2
    c6da:	fb00 f909 	mul.w	r9, r0, r9
    c6de:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
    c6e2:	45a1      	cmp	r9, r4
    c6e4:	d907      	bls.n	c6f6 <__udivmoddi4+0x8e>
    c6e6:	193c      	adds	r4, r7, r4
    c6e8:	f100 33ff 	add.w	r3, r0, #4294967295
    c6ec:	d202      	bcs.n	c6f4 <__udivmoddi4+0x8c>
    c6ee:	45a1      	cmp	r9, r4
    c6f0:	f200 8110 	bhi.w	c914 <__udivmoddi4+0x2ac>
    c6f4:	4618      	mov	r0, r3
    c6f6:	eba4 0409 	sub.w	r4, r4, r9
    c6fa:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    c6fe:	2100      	movs	r1, #0
    c700:	b11d      	cbz	r5, c70a <__udivmoddi4+0xa2>
    c702:	40f4      	lsrs	r4, r6
    c704:	2300      	movs	r3, #0
    c706:	e9c5 4300 	strd	r4, r3, [r5]
    c70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c70e:	428b      	cmp	r3, r1
    c710:	d908      	bls.n	c724 <__udivmoddi4+0xbc>
    c712:	2d00      	cmp	r5, #0
    c714:	f000 80f2 	beq.w	c8fc <__udivmoddi4+0x294>
    c718:	2100      	movs	r1, #0
    c71a:	e9c5 0c00 	strd	r0, ip, [r5]
    c71e:	4608      	mov	r0, r1
    c720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c724:	fab3 f183 	clz	r1, r3
    c728:	2900      	cmp	r1, #0
    c72a:	d14e      	bne.n	c7ca <__udivmoddi4+0x162>
    c72c:	4563      	cmp	r3, ip
    c72e:	f0c0 80e8 	bcc.w	c902 <__udivmoddi4+0x29a>
    c732:	4282      	cmp	r2, r0
    c734:	f240 80e5 	bls.w	c902 <__udivmoddi4+0x29a>
    c738:	4608      	mov	r0, r1
    c73a:	2d00      	cmp	r5, #0
    c73c:	d0e5      	beq.n	c70a <__udivmoddi4+0xa2>
    c73e:	e9c5 4a00 	strd	r4, sl, [r5]
    c742:	e7e2      	b.n	c70a <__udivmoddi4+0xa2>
    c744:	b902      	cbnz	r2, c748 <__udivmoddi4+0xe0>
    c746:	deff      	udf	#255	; 0xff
    c748:	fab2 f682 	clz	r6, r2
    c74c:	2e00      	cmp	r6, #0
    c74e:	f040 8099 	bne.w	c884 <__udivmoddi4+0x21c>
    c752:	1a8b      	subs	r3, r1, r2
    c754:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    c758:	fa1f f882 	uxth.w	r8, r2
    c75c:	2101      	movs	r1, #1
    c75e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    c762:	fbb3 f2fe 	udiv	r2, r3, lr
    c766:	fb0e 3012 	mls	r0, lr, r2, r3
    c76a:	fb08 f902 	mul.w	r9, r8, r2
    c76e:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
    c772:	45e1      	cmp	r9, ip
    c774:	d908      	bls.n	c788 <__udivmoddi4+0x120>
    c776:	eb17 0c0c 	adds.w	ip, r7, ip
    c77a:	f102 33ff 	add.w	r3, r2, #4294967295
    c77e:	d202      	bcs.n	c786 <__udivmoddi4+0x11e>
    c780:	45e1      	cmp	r9, ip
    c782:	f200 80ca 	bhi.w	c91a <__udivmoddi4+0x2b2>
    c786:	461a      	mov	r2, r3
    c788:	ebac 0c09 	sub.w	ip, ip, r9
    c78c:	b2a3      	uxth	r3, r4
    c78e:	fbbc f0fe 	udiv	r0, ip, lr
    c792:	fb0e cc10 	mls	ip, lr, r0, ip
    c796:	fb08 f800 	mul.w	r8, r8, r0
    c79a:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
    c79e:	45a0      	cmp	r8, r4
    c7a0:	d90e      	bls.n	c7c0 <__udivmoddi4+0x158>
    c7a2:	193c      	adds	r4, r7, r4
    c7a4:	f100 33ff 	add.w	r3, r0, #4294967295
    c7a8:	bf2c      	ite	cs
    c7aa:	f04f 0c01 	movcs.w	ip, #1
    c7ae:	f04f 0c00 	movcc.w	ip, #0
    c7b2:	45a0      	cmp	r8, r4
    c7b4:	d903      	bls.n	c7be <__udivmoddi4+0x156>
    c7b6:	f1bc 0f00 	cmp.w	ip, #0
    c7ba:	f000 80a8 	beq.w	c90e <__udivmoddi4+0x2a6>
    c7be:	4618      	mov	r0, r3
    c7c0:	eba4 0408 	sub.w	r4, r4, r8
    c7c4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    c7c8:	e79a      	b.n	c700 <__udivmoddi4+0x98>
    c7ca:	f1c1 0420 	rsb	r4, r1, #32
    c7ce:	408b      	lsls	r3, r1
    c7d0:	fa02 fe01 	lsl.w	lr, r2, r1
    c7d4:	fa0c f601 	lsl.w	r6, ip, r1
    c7d8:	40e2      	lsrs	r2, r4
    c7da:	fa20 f704 	lsr.w	r7, r0, r4
    c7de:	fa2c fc04 	lsr.w	ip, ip, r4
    c7e2:	fa00 f801 	lsl.w	r8, r0, r1
    c7e6:	4313      	orrs	r3, r2
    c7e8:	433e      	orrs	r6, r7
    c7ea:	0c1f      	lsrs	r7, r3, #16
    c7ec:	0c32      	lsrs	r2, r6, #16
    c7ee:	fa1f f983 	uxth.w	r9, r3
    c7f2:	fbbc f0f7 	udiv	r0, ip, r7
    c7f6:	fb07 cc10 	mls	ip, r7, r0, ip
    c7fa:	fb00 fa09 	mul.w	sl, r0, r9
    c7fe:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    c802:	45e2      	cmp	sl, ip
    c804:	d908      	bls.n	c818 <__udivmoddi4+0x1b0>
    c806:	eb13 0c0c 	adds.w	ip, r3, ip
    c80a:	f100 32ff 	add.w	r2, r0, #4294967295
    c80e:	d202      	bcs.n	c816 <__udivmoddi4+0x1ae>
    c810:	45e2      	cmp	sl, ip
    c812:	f200 8089 	bhi.w	c928 <__udivmoddi4+0x2c0>
    c816:	4610      	mov	r0, r2
    c818:	ebac 0c0a 	sub.w	ip, ip, sl
    c81c:	b2b6      	uxth	r6, r6
    c81e:	fbbc faf7 	udiv	sl, ip, r7
    c822:	fb07 cc1a 	mls	ip, r7, sl, ip
    c826:	fb0a f909 	mul.w	r9, sl, r9
    c82a:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
    c82e:	4591      	cmp	r9, r2
    c830:	d906      	bls.n	c840 <__udivmoddi4+0x1d8>
    c832:	189a      	adds	r2, r3, r2
    c834:	f10a 36ff 	add.w	r6, sl, #4294967295
    c838:	d201      	bcs.n	c83e <__udivmoddi4+0x1d6>
    c83a:	4591      	cmp	r9, r2
    c83c:	d87a      	bhi.n	c934 <__udivmoddi4+0x2cc>
    c83e:	46b2      	mov	sl, r6
    c840:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
    c844:	eba2 0209 	sub.w	r2, r2, r9
    c848:	fba0 670e 	umull	r6, r7, r0, lr
    c84c:	42ba      	cmp	r2, r7
    c84e:	46b4      	mov	ip, r6
    c850:	46b9      	mov	r9, r7
    c852:	d302      	bcc.n	c85a <__udivmoddi4+0x1f2>
    c854:	d107      	bne.n	c866 <__udivmoddi4+0x1fe>
    c856:	45b0      	cmp	r8, r6
    c858:	d205      	bcs.n	c866 <__udivmoddi4+0x1fe>
    c85a:	ebb6 0c0e 	subs.w	ip, r6, lr
    c85e:	eb67 0303 	sbc.w	r3, r7, r3
    c862:	3801      	subs	r0, #1
    c864:	4699      	mov	r9, r3
    c866:	2d00      	cmp	r5, #0
    c868:	d06b      	beq.n	c942 <__udivmoddi4+0x2da>
    c86a:	ebb8 030c 	subs.w	r3, r8, ip
    c86e:	eb62 0209 	sbc.w	r2, r2, r9
    c872:	fa02 f404 	lsl.w	r4, r2, r4
    c876:	40cb      	lsrs	r3, r1
    c878:	40ca      	lsrs	r2, r1
    c87a:	2100      	movs	r1, #0
    c87c:	431c      	orrs	r4, r3
    c87e:	e9c5 4200 	strd	r4, r2, [r5]
    c882:	e742      	b.n	c70a <__udivmoddi4+0xa2>
    c884:	40b7      	lsls	r7, r6
    c886:	f1c6 0220 	rsb	r2, r6, #32
    c88a:	fa01 f306 	lsl.w	r3, r1, r6
    c88e:	40b4      	lsls	r4, r6
    c890:	fa21 fc02 	lsr.w	ip, r1, r2
    c894:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c898:	fa20 f202 	lsr.w	r2, r0, r2
    c89c:	fa1f f887 	uxth.w	r8, r7
    c8a0:	fbbc f1fe 	udiv	r1, ip, lr
    c8a4:	431a      	orrs	r2, r3
    c8a6:	fb0e cc11 	mls	ip, lr, r1, ip
    c8aa:	fb01 f008 	mul.w	r0, r1, r8
    c8ae:	0c13      	lsrs	r3, r2, #16
    c8b0:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
    c8b4:	4560      	cmp	r0, ip
    c8b6:	d907      	bls.n	c8c8 <__udivmoddi4+0x260>
    c8b8:	eb17 0c0c 	adds.w	ip, r7, ip
    c8bc:	f101 33ff 	add.w	r3, r1, #4294967295
    c8c0:	d201      	bcs.n	c8c6 <__udivmoddi4+0x25e>
    c8c2:	4560      	cmp	r0, ip
    c8c4:	d833      	bhi.n	c92e <__udivmoddi4+0x2c6>
    c8c6:	4619      	mov	r1, r3
    c8c8:	ebac 0c00 	sub.w	ip, ip, r0
    c8cc:	b292      	uxth	r2, r2
    c8ce:	fbbc f0fe 	udiv	r0, ip, lr
    c8d2:	fb0e cc10 	mls	ip, lr, r0, ip
    c8d6:	fb00 f308 	mul.w	r3, r0, r8
    c8da:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    c8de:	4563      	cmp	r3, ip
    c8e0:	d907      	bls.n	c8f2 <__udivmoddi4+0x28a>
    c8e2:	eb17 0c0c 	adds.w	ip, r7, ip
    c8e6:	f100 32ff 	add.w	r2, r0, #4294967295
    c8ea:	d201      	bcs.n	c8f0 <__udivmoddi4+0x288>
    c8ec:	4563      	cmp	r3, ip
    c8ee:	d825      	bhi.n	c93c <__udivmoddi4+0x2d4>
    c8f0:	4610      	mov	r0, r2
    c8f2:	ebac 0303 	sub.w	r3, ip, r3
    c8f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c8fa:	e730      	b.n	c75e <__udivmoddi4+0xf6>
    c8fc:	4629      	mov	r1, r5
    c8fe:	4628      	mov	r0, r5
    c900:	e703      	b.n	c70a <__udivmoddi4+0xa2>
    c902:	1a84      	subs	r4, r0, r2
    c904:	eb6c 0303 	sbc.w	r3, ip, r3
    c908:	2001      	movs	r0, #1
    c90a:	469a      	mov	sl, r3
    c90c:	e715      	b.n	c73a <__udivmoddi4+0xd2>
    c90e:	3802      	subs	r0, #2
    c910:	443c      	add	r4, r7
    c912:	e755      	b.n	c7c0 <__udivmoddi4+0x158>
    c914:	3802      	subs	r0, #2
    c916:	443c      	add	r4, r7
    c918:	e6ed      	b.n	c6f6 <__udivmoddi4+0x8e>
    c91a:	3a02      	subs	r2, #2
    c91c:	44bc      	add	ip, r7
    c91e:	e733      	b.n	c788 <__udivmoddi4+0x120>
    c920:	f1ae 0e02 	sub.w	lr, lr, #2
    c924:	443b      	add	r3, r7
    c926:	e6d2      	b.n	c6ce <__udivmoddi4+0x66>
    c928:	3802      	subs	r0, #2
    c92a:	449c      	add	ip, r3
    c92c:	e774      	b.n	c818 <__udivmoddi4+0x1b0>
    c92e:	3902      	subs	r1, #2
    c930:	44bc      	add	ip, r7
    c932:	e7c9      	b.n	c8c8 <__udivmoddi4+0x260>
    c934:	f1aa 0a02 	sub.w	sl, sl, #2
    c938:	441a      	add	r2, r3
    c93a:	e781      	b.n	c840 <__udivmoddi4+0x1d8>
    c93c:	3802      	subs	r0, #2
    c93e:	44bc      	add	ip, r7
    c940:	e7d7      	b.n	c8f2 <__udivmoddi4+0x28a>
    c942:	4629      	mov	r1, r5
    c944:	e6e1      	b.n	c70a <__udivmoddi4+0xa2>
    c946:	bf00      	nop

0000c948 <__aeabi_idiv0>:
    c948:	4770      	bx	lr
    c94a:	bf00      	nop

0000c94c <ocrypto_bigint_add128>:
    c94c:	b470      	push	{r4, r5, r6}
    c94e:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
    c952:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c956:	185b      	adds	r3, r3, r1
    c958:	eb54 040c 	adcs.w	r4, r4, ip
    c95c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c960:	414d      	adcs	r5, r1
    c962:	eb56 060c 	adcs.w	r6, r6, ip
    c966:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
    c96a:	4180      	sbcs	r0, r0
    c96c:	3001      	adds	r0, #1
    c96e:	bc70      	pop	{r4, r5, r6}
    c970:	4770      	bx	lr

0000c972 <ocrypto_bigint_sub128>:
    c972:	b470      	push	{r4, r5, r6}
    c974:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
    c978:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c97c:	1a5b      	subs	r3, r3, r1
    c97e:	eb74 040c 	sbcs.w	r4, r4, ip
    c982:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c986:	418d      	sbcs	r5, r1
    c988:	eb76 060c 	sbcs.w	r6, r6, ip
    c98c:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
    c990:	4180      	sbcs	r0, r0
    c992:	4240      	negs	r0, r0
    c994:	bc70      	pop	{r4, r5, r6}
    c996:	4770      	bx	lr

0000c998 <ocrypto_bigint_add256>:
    c998:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c99c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    c9a0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c9a4:	185b      	adds	r3, r3, r1
    c9a6:	eb54 040c 	adcs.w	r4, r4, ip
    c9aa:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c9ae:	414d      	adcs	r5, r1
    c9b0:	eb56 060c 	adcs.w	r6, r6, ip
    c9b4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c9b8:	414f      	adcs	r7, r1
    c9ba:	eb58 080c 	adcs.w	r8, r8, ip
    c9be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c9c2:	eb59 0901 	adcs.w	r9, r9, r1
    c9c6:	eb5a 0a0c 	adcs.w	sl, sl, ip
    c9ca:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    c9ce:	4180      	sbcs	r0, r0
    c9d0:	3001      	adds	r0, #1
    c9d2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c9d6:	4770      	bx	lr

0000c9d8 <ocrypto_bigint_sub256>:
    c9d8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c9dc:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    c9e0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c9e4:	1a5b      	subs	r3, r3, r1
    c9e6:	eb74 040c 	sbcs.w	r4, r4, ip
    c9ea:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c9ee:	418d      	sbcs	r5, r1
    c9f0:	eb76 060c 	sbcs.w	r6, r6, ip
    c9f4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c9f8:	418f      	sbcs	r7, r1
    c9fa:	eb78 080c 	sbcs.w	r8, r8, ip
    c9fe:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ca02:	eb79 0901 	sbcs.w	r9, r9, r1
    ca06:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    ca0a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    ca0e:	4180      	sbcs	r0, r0
    ca10:	4240      	negs	r0, r0
    ca12:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    ca16:	4770      	bx	lr

0000ca18 <ocrypto_bigint_cadd256>:
    ca18:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    ca1c:	4252      	negs	r2, r2
    ca1e:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    ca22:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    ca26:	4017      	ands	r7, r2
    ca28:	19db      	adds	r3, r3, r7
    ca2a:	ea18 0802 	ands.w	r8, r8, r2
    ca2e:	eb54 0408 	adcs.w	r4, r4, r8
    ca32:	ea19 0902 	ands.w	r9, r9, r2
    ca36:	eb55 0509 	adcs.w	r5, r5, r9
    ca3a:	ea1a 0a02 	ands.w	sl, sl, r2
    ca3e:	eb56 060a 	adcs.w	r6, r6, sl
    ca42:	c078      	stmia	r0!, {r3, r4, r5, r6}
    ca44:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    ca48:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    ca4c:	4017      	ands	r7, r2
    ca4e:	417b      	adcs	r3, r7
    ca50:	ea18 0802 	ands.w	r8, r8, r2
    ca54:	eb54 0408 	adcs.w	r4, r4, r8
    ca58:	ea19 0902 	ands.w	r9, r9, r2
    ca5c:	eb55 0509 	adcs.w	r5, r5, r9
    ca60:	ea1a 0a02 	ands.w	sl, sl, r2
    ca64:	eb56 060a 	adcs.w	r6, r6, sl
    ca68:	c078      	stmia	r0!, {r3, r4, r5, r6}
    ca6a:	4180      	sbcs	r0, r0
    ca6c:	3001      	adds	r0, #1
    ca6e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    ca72:	4770      	bx	lr

0000ca74 <ocrypto_bigint_csub256>:
    ca74:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    ca78:	4252      	negs	r2, r2
    ca7a:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    ca7e:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    ca82:	4017      	ands	r7, r2
    ca84:	1bdb      	subs	r3, r3, r7
    ca86:	ea18 0802 	ands.w	r8, r8, r2
    ca8a:	eb74 0408 	sbcs.w	r4, r4, r8
    ca8e:	ea19 0902 	ands.w	r9, r9, r2
    ca92:	eb75 0509 	sbcs.w	r5, r5, r9
    ca96:	ea1a 0a02 	ands.w	sl, sl, r2
    ca9a:	eb76 060a 	sbcs.w	r6, r6, sl
    ca9e:	c078      	stmia	r0!, {r3, r4, r5, r6}
    caa0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    caa4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    caa8:	4017      	ands	r7, r2
    caaa:	41bb      	sbcs	r3, r7
    caac:	ea18 0802 	ands.w	r8, r8, r2
    cab0:	eb74 0408 	sbcs.w	r4, r4, r8
    cab4:	ea19 0902 	ands.w	r9, r9, r2
    cab8:	eb75 0509 	sbcs.w	r5, r5, r9
    cabc:	ea1a 0a02 	ands.w	sl, sl, r2
    cac0:	eb76 060a 	sbcs.w	r6, r6, sl
    cac4:	c078      	stmia	r0!, {r3, r4, r5, r6}
    cac6:	4180      	sbcs	r0, r0
    cac8:	4240      	negs	r0, r0
    caca:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cace:	4770      	bx	lr

0000cad0 <cswap64>:
    cad0:	e890 0030 	ldmia.w	r0, {r4, r5}
    cad4:	e891 00c0 	ldmia.w	r1, {r6, r7}
    cad8:	1ba3      	subs	r3, r4, r6
    cada:	4013      	ands	r3, r2
    cadc:	1ae4      	subs	r4, r4, r3
    cade:	18f6      	adds	r6, r6, r3
    cae0:	1beb      	subs	r3, r5, r7
    cae2:	4013      	ands	r3, r2
    cae4:	1aed      	subs	r5, r5, r3
    cae6:	18ff      	adds	r7, r7, r3
    cae8:	c030      	stmia	r0!, {r4, r5}
    caea:	c1c0      	stmia	r1!, {r6, r7}
    caec:	4770      	bx	lr

0000caee <ocrypto_bigint_cswap256>:
    caee:	b5f0      	push	{r4, r5, r6, r7, lr}
    caf0:	4252      	negs	r2, r2
    caf2:	f7ff ffed 	bl	cad0 <cswap64>
    caf6:	f7ff ffeb 	bl	cad0 <cswap64>
    cafa:	f7ff ffe9 	bl	cad0 <cswap64>
    cafe:	f7ff ffe7 	bl	cad0 <cswap64>
    cb02:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cb04 <ocrypto_bigint_mul128>:
    cb04:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cb08:	c93a      	ldmia	r1, {r1, r3, r4, r5}
    cb0a:	6816      	ldr	r6, [r2, #0]
    cb0c:	fba1 9a06 	umull	r9, sl, r1, r6
    cb10:	f04f 0c00 	mov.w	ip, #0
    cb14:	fbe3 ac06 	umlal	sl, ip, r3, r6
    cb18:	f04f 0700 	mov.w	r7, #0
    cb1c:	fbe4 c706 	umlal	ip, r7, r4, r6
    cb20:	f04f 0800 	mov.w	r8, #0
    cb24:	fbe5 7806 	umlal	r7, r8, r5, r6
    cb28:	f840 9b04 	str.w	r9, [r0], #4
    cb2c:	6856      	ldr	r6, [r2, #4]
    cb2e:	f04f 0900 	mov.w	r9, #0
    cb32:	fbe1 a906 	umlal	sl, r9, r1, r6
    cb36:	eb1c 0c09 	adds.w	ip, ip, r9
    cb3a:	f04f 0900 	mov.w	r9, #0
    cb3e:	eb49 0909 	adc.w	r9, r9, r9
    cb42:	fbe3 c906 	umlal	ip, r9, r3, r6
    cb46:	eb17 0709 	adds.w	r7, r7, r9
    cb4a:	f04f 0900 	mov.w	r9, #0
    cb4e:	eb49 0909 	adc.w	r9, r9, r9
    cb52:	fbe4 7906 	umlal	r7, r9, r4, r6
    cb56:	eb18 0809 	adds.w	r8, r8, r9
    cb5a:	f04f 0900 	mov.w	r9, #0
    cb5e:	eb49 0909 	adc.w	r9, r9, r9
    cb62:	fbe5 8906 	umlal	r8, r9, r5, r6
    cb66:	f840 ab04 	str.w	sl, [r0], #4
    cb6a:	6896      	ldr	r6, [r2, #8]
    cb6c:	f04f 0a00 	mov.w	sl, #0
    cb70:	fbe1 ca06 	umlal	ip, sl, r1, r6
    cb74:	eb17 070a 	adds.w	r7, r7, sl
    cb78:	f04f 0a00 	mov.w	sl, #0
    cb7c:	eb4a 0a0a 	adc.w	sl, sl, sl
    cb80:	fbe3 7a06 	umlal	r7, sl, r3, r6
    cb84:	eb18 080a 	adds.w	r8, r8, sl
    cb88:	f04f 0a00 	mov.w	sl, #0
    cb8c:	eb4a 0a0a 	adc.w	sl, sl, sl
    cb90:	fbe4 8a06 	umlal	r8, sl, r4, r6
    cb94:	eb19 090a 	adds.w	r9, r9, sl
    cb98:	f04f 0a00 	mov.w	sl, #0
    cb9c:	eb4a 0a0a 	adc.w	sl, sl, sl
    cba0:	fbe5 9a06 	umlal	r9, sl, r5, r6
    cba4:	f840 cb04 	str.w	ip, [r0], #4
    cba8:	68d6      	ldr	r6, [r2, #12]
    cbaa:	f04f 0c00 	mov.w	ip, #0
    cbae:	fbe1 7c06 	umlal	r7, ip, r1, r6
    cbb2:	eb18 080c 	adds.w	r8, r8, ip
    cbb6:	f04f 0c00 	mov.w	ip, #0
    cbba:	eb4c 0c0c 	adc.w	ip, ip, ip
    cbbe:	fbe3 8c06 	umlal	r8, ip, r3, r6
    cbc2:	eb19 090c 	adds.w	r9, r9, ip
    cbc6:	f04f 0c00 	mov.w	ip, #0
    cbca:	eb4c 0c0c 	adc.w	ip, ip, ip
    cbce:	fbe4 9c06 	umlal	r9, ip, r4, r6
    cbd2:	eb1a 0a0c 	adds.w	sl, sl, ip
    cbd6:	f04f 0c00 	mov.w	ip, #0
    cbda:	eb4c 0c0c 	adc.w	ip, ip, ip
    cbde:	fbe5 ac06 	umlal	sl, ip, r5, r6
    cbe2:	e880 1780 	stmia.w	r0, {r7, r8, r9, sl, ip}
    cbe6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cbea:	4770      	bx	lr

0000cbec <ocrypto_bigint_sqr256>:
    cbec:	460a      	mov	r2, r1

0000cbee <ocrypto_bigint_mul256>:
    cbee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbf2:	ec41 0a14 	vmov	s8, s9, r0, r1
    cbf6:	ec92 0a08 	vldmia	r2, {s0-s7}
    cbfa:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    cbfc:	ee10 0a10 	vmov	r0, s0
    cc00:	fba1 7800 	umull	r7, r8, r1, r0
    cc04:	f04f 0900 	mov.w	r9, #0
    cc08:	fbe2 8900 	umlal	r8, r9, r2, r0
    cc0c:	f04f 0a00 	mov.w	sl, #0
    cc10:	fbe3 9a00 	umlal	r9, sl, r3, r0
    cc14:	f04f 0b00 	mov.w	fp, #0
    cc18:	fbe4 ab00 	umlal	sl, fp, r4, r0
    cc1c:	ee12 0a10 	vmov	r0, s4
    cc20:	f04f 0c00 	mov.w	ip, #0
    cc24:	fbe1 bc00 	umlal	fp, ip, r1, r0
    cc28:	f04f 0e00 	mov.w	lr, #0
    cc2c:	fbe2 ce00 	umlal	ip, lr, r2, r0
    cc30:	f04f 0500 	mov.w	r5, #0
    cc34:	fbe3 e500 	umlal	lr, r5, r3, r0
    cc38:	f04f 0600 	mov.w	r6, #0
    cc3c:	fbe4 5600 	umlal	r5, r6, r4, r0
    cc40:	ee05 7a10 	vmov	s10, r7
    cc44:	ee10 0a90 	vmov	r0, s1
    cc48:	f04f 0700 	mov.w	r7, #0
    cc4c:	fbe1 8700 	umlal	r8, r7, r1, r0
    cc50:	eb19 0907 	adds.w	r9, r9, r7
    cc54:	f04f 0700 	mov.w	r7, #0
    cc58:	eb47 0707 	adc.w	r7, r7, r7
    cc5c:	fbe2 9700 	umlal	r9, r7, r2, r0
    cc60:	eb1a 0a07 	adds.w	sl, sl, r7
    cc64:	f04f 0700 	mov.w	r7, #0
    cc68:	eb47 0707 	adc.w	r7, r7, r7
    cc6c:	fbe3 a700 	umlal	sl, r7, r3, r0
    cc70:	eb1b 0b07 	adds.w	fp, fp, r7
    cc74:	f04f 0700 	mov.w	r7, #0
    cc78:	eb47 0707 	adc.w	r7, r7, r7
    cc7c:	fbe4 b700 	umlal	fp, r7, r4, r0
    cc80:	ee12 0a90 	vmov	r0, s5
    cc84:	eb1c 0c07 	adds.w	ip, ip, r7
    cc88:	f04f 0700 	mov.w	r7, #0
    cc8c:	eb47 0707 	adc.w	r7, r7, r7
    cc90:	fbe1 c700 	umlal	ip, r7, r1, r0
    cc94:	eb1e 0e07 	adds.w	lr, lr, r7
    cc98:	f04f 0700 	mov.w	r7, #0
    cc9c:	eb47 0707 	adc.w	r7, r7, r7
    cca0:	fbe2 e700 	umlal	lr, r7, r2, r0
    cca4:	19ed      	adds	r5, r5, r7
    cca6:	f04f 0700 	mov.w	r7, #0
    ccaa:	eb47 0707 	adc.w	r7, r7, r7
    ccae:	fbe3 5700 	umlal	r5, r7, r3, r0
    ccb2:	19f6      	adds	r6, r6, r7
    ccb4:	f04f 0700 	mov.w	r7, #0
    ccb8:	eb47 0707 	adc.w	r7, r7, r7
    ccbc:	fbe4 6700 	umlal	r6, r7, r4, r0
    ccc0:	ee05 8a90 	vmov	s11, r8
    ccc4:	ee11 0a10 	vmov	r0, s2
    ccc8:	f04f 0800 	mov.w	r8, #0
    cccc:	fbe1 9800 	umlal	r9, r8, r1, r0
    ccd0:	eb1a 0a08 	adds.w	sl, sl, r8
    ccd4:	f04f 0800 	mov.w	r8, #0
    ccd8:	eb48 0808 	adc.w	r8, r8, r8
    ccdc:	fbe2 a800 	umlal	sl, r8, r2, r0
    cce0:	eb1b 0b08 	adds.w	fp, fp, r8
    cce4:	f04f 0800 	mov.w	r8, #0
    cce8:	eb48 0808 	adc.w	r8, r8, r8
    ccec:	fbe3 b800 	umlal	fp, r8, r3, r0
    ccf0:	eb1c 0c08 	adds.w	ip, ip, r8
    ccf4:	f04f 0800 	mov.w	r8, #0
    ccf8:	eb48 0808 	adc.w	r8, r8, r8
    ccfc:	fbe4 c800 	umlal	ip, r8, r4, r0
    cd00:	ee13 0a10 	vmov	r0, s6
    cd04:	eb1e 0e08 	adds.w	lr, lr, r8
    cd08:	f04f 0800 	mov.w	r8, #0
    cd0c:	eb48 0808 	adc.w	r8, r8, r8
    cd10:	fbe1 e800 	umlal	lr, r8, r1, r0
    cd14:	eb15 0508 	adds.w	r5, r5, r8
    cd18:	f04f 0800 	mov.w	r8, #0
    cd1c:	eb48 0808 	adc.w	r8, r8, r8
    cd20:	fbe2 5800 	umlal	r5, r8, r2, r0
    cd24:	eb16 0608 	adds.w	r6, r6, r8
    cd28:	f04f 0800 	mov.w	r8, #0
    cd2c:	eb48 0808 	adc.w	r8, r8, r8
    cd30:	fbe3 6800 	umlal	r6, r8, r3, r0
    cd34:	eb17 0708 	adds.w	r7, r7, r8
    cd38:	f04f 0800 	mov.w	r8, #0
    cd3c:	eb48 0808 	adc.w	r8, r8, r8
    cd40:	fbe4 7800 	umlal	r7, r8, r4, r0
    cd44:	ee06 9a10 	vmov	s12, r9
    cd48:	ee11 0a90 	vmov	r0, s3
    cd4c:	f04f 0900 	mov.w	r9, #0
    cd50:	fbe1 a900 	umlal	sl, r9, r1, r0
    cd54:	eb1b 0b09 	adds.w	fp, fp, r9
    cd58:	f04f 0900 	mov.w	r9, #0
    cd5c:	eb49 0909 	adc.w	r9, r9, r9
    cd60:	fbe2 b900 	umlal	fp, r9, r2, r0
    cd64:	eb1c 0c09 	adds.w	ip, ip, r9
    cd68:	f04f 0900 	mov.w	r9, #0
    cd6c:	eb49 0909 	adc.w	r9, r9, r9
    cd70:	fbe3 c900 	umlal	ip, r9, r3, r0
    cd74:	eb1e 0e09 	adds.w	lr, lr, r9
    cd78:	f04f 0900 	mov.w	r9, #0
    cd7c:	eb49 0909 	adc.w	r9, r9, r9
    cd80:	fbe4 e900 	umlal	lr, r9, r4, r0
    cd84:	ee13 0a90 	vmov	r0, s7
    cd88:	eb15 0509 	adds.w	r5, r5, r9
    cd8c:	f04f 0900 	mov.w	r9, #0
    cd90:	eb49 0909 	adc.w	r9, r9, r9
    cd94:	fbe1 5900 	umlal	r5, r9, r1, r0
    cd98:	eb16 0609 	adds.w	r6, r6, r9
    cd9c:	f04f 0900 	mov.w	r9, #0
    cda0:	eb49 0909 	adc.w	r9, r9, r9
    cda4:	fbe2 6900 	umlal	r6, r9, r2, r0
    cda8:	eb17 0709 	adds.w	r7, r7, r9
    cdac:	f04f 0900 	mov.w	r9, #0
    cdb0:	eb49 0909 	adc.w	r9, r9, r9
    cdb4:	fbe3 7900 	umlal	r7, r9, r3, r0
    cdb8:	eb18 0809 	adds.w	r8, r8, r9
    cdbc:	f04f 0900 	mov.w	r9, #0
    cdc0:	eb49 0909 	adc.w	r9, r9, r9
    cdc4:	fbe4 8900 	umlal	r8, r9, r4, r0
    cdc8:	ee06 aa90 	vmov	s13, sl
    cdcc:	ee14 1a90 	vmov	r1, s9
    cdd0:	f101 0110 	add.w	r1, r1, #16
    cdd4:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    cdd6:	ee10 0a10 	vmov	r0, s0
    cdda:	f04f 0a00 	mov.w	sl, #0
    cdde:	fbe1 ba00 	umlal	fp, sl, r1, r0
    cde2:	eb1c 0c0a 	adds.w	ip, ip, sl
    cde6:	f04f 0a00 	mov.w	sl, #0
    cdea:	eb4a 0a0a 	adc.w	sl, sl, sl
    cdee:	fbe2 ca00 	umlal	ip, sl, r2, r0
    cdf2:	eb1e 0e0a 	adds.w	lr, lr, sl
    cdf6:	f04f 0a00 	mov.w	sl, #0
    cdfa:	eb4a 0a0a 	adc.w	sl, sl, sl
    cdfe:	fbe3 ea00 	umlal	lr, sl, r3, r0
    ce02:	eb15 050a 	adds.w	r5, r5, sl
    ce06:	f04f 0a00 	mov.w	sl, #0
    ce0a:	eb4a 0a0a 	adc.w	sl, sl, sl
    ce0e:	fbe4 5a00 	umlal	r5, sl, r4, r0
    ce12:	ee12 0a10 	vmov	r0, s4
    ce16:	eb16 060a 	adds.w	r6, r6, sl
    ce1a:	f04f 0a00 	mov.w	sl, #0
    ce1e:	eb4a 0a0a 	adc.w	sl, sl, sl
    ce22:	fbe1 6a00 	umlal	r6, sl, r1, r0
    ce26:	eb17 070a 	adds.w	r7, r7, sl
    ce2a:	f04f 0a00 	mov.w	sl, #0
    ce2e:	eb4a 0a0a 	adc.w	sl, sl, sl
    ce32:	fbe2 7a00 	umlal	r7, sl, r2, r0
    ce36:	eb18 080a 	adds.w	r8, r8, sl
    ce3a:	f04f 0a00 	mov.w	sl, #0
    ce3e:	eb4a 0a0a 	adc.w	sl, sl, sl
    ce42:	fbe3 8a00 	umlal	r8, sl, r3, r0
    ce46:	eb19 090a 	adds.w	r9, r9, sl
    ce4a:	f04f 0a00 	mov.w	sl, #0
    ce4e:	eb4a 0a0a 	adc.w	sl, sl, sl
    ce52:	fbe4 9a00 	umlal	r9, sl, r4, r0
    ce56:	ee07 ba10 	vmov	s14, fp
    ce5a:	ee10 0a90 	vmov	r0, s1
    ce5e:	f04f 0b00 	mov.w	fp, #0
    ce62:	fbe1 cb00 	umlal	ip, fp, r1, r0
    ce66:	eb1e 0e0b 	adds.w	lr, lr, fp
    ce6a:	f04f 0b00 	mov.w	fp, #0
    ce6e:	eb4b 0b0b 	adc.w	fp, fp, fp
    ce72:	fbe2 eb00 	umlal	lr, fp, r2, r0
    ce76:	eb15 050b 	adds.w	r5, r5, fp
    ce7a:	f04f 0b00 	mov.w	fp, #0
    ce7e:	eb4b 0b0b 	adc.w	fp, fp, fp
    ce82:	fbe3 5b00 	umlal	r5, fp, r3, r0
    ce86:	eb16 060b 	adds.w	r6, r6, fp
    ce8a:	f04f 0b00 	mov.w	fp, #0
    ce8e:	eb4b 0b0b 	adc.w	fp, fp, fp
    ce92:	fbe4 6b00 	umlal	r6, fp, r4, r0
    ce96:	ee12 0a90 	vmov	r0, s5
    ce9a:	eb17 070b 	adds.w	r7, r7, fp
    ce9e:	f04f 0b00 	mov.w	fp, #0
    cea2:	eb4b 0b0b 	adc.w	fp, fp, fp
    cea6:	fbe1 7b00 	umlal	r7, fp, r1, r0
    ceaa:	eb18 080b 	adds.w	r8, r8, fp
    ceae:	f04f 0b00 	mov.w	fp, #0
    ceb2:	eb4b 0b0b 	adc.w	fp, fp, fp
    ceb6:	fbe2 8b00 	umlal	r8, fp, r2, r0
    ceba:	eb19 090b 	adds.w	r9, r9, fp
    cebe:	f04f 0b00 	mov.w	fp, #0
    cec2:	eb4b 0b0b 	adc.w	fp, fp, fp
    cec6:	fbe3 9b00 	umlal	r9, fp, r3, r0
    ceca:	eb1a 0a0b 	adds.w	sl, sl, fp
    cece:	f04f 0b00 	mov.w	fp, #0
    ced2:	eb4b 0b0b 	adc.w	fp, fp, fp
    ced6:	fbe4 ab00 	umlal	sl, fp, r4, r0
    ceda:	ee07 ca90 	vmov	s15, ip
    cede:	ee11 0a10 	vmov	r0, s2
    cee2:	f04f 0c00 	mov.w	ip, #0
    cee6:	fbe1 ec00 	umlal	lr, ip, r1, r0
    ceea:	eb15 050c 	adds.w	r5, r5, ip
    ceee:	f04f 0c00 	mov.w	ip, #0
    cef2:	eb4c 0c0c 	adc.w	ip, ip, ip
    cef6:	fbe2 5c00 	umlal	r5, ip, r2, r0
    cefa:	eb16 060c 	adds.w	r6, r6, ip
    cefe:	f04f 0c00 	mov.w	ip, #0
    cf02:	eb4c 0c0c 	adc.w	ip, ip, ip
    cf06:	fbe3 6c00 	umlal	r6, ip, r3, r0
    cf0a:	eb17 070c 	adds.w	r7, r7, ip
    cf0e:	f04f 0c00 	mov.w	ip, #0
    cf12:	eb4c 0c0c 	adc.w	ip, ip, ip
    cf16:	fbe4 7c00 	umlal	r7, ip, r4, r0
    cf1a:	ee13 0a10 	vmov	r0, s6
    cf1e:	eb18 080c 	adds.w	r8, r8, ip
    cf22:	f04f 0c00 	mov.w	ip, #0
    cf26:	eb4c 0c0c 	adc.w	ip, ip, ip
    cf2a:	fbe1 8c00 	umlal	r8, ip, r1, r0
    cf2e:	eb19 090c 	adds.w	r9, r9, ip
    cf32:	f04f 0c00 	mov.w	ip, #0
    cf36:	eb4c 0c0c 	adc.w	ip, ip, ip
    cf3a:	fbe2 9c00 	umlal	r9, ip, r2, r0
    cf3e:	eb1a 0a0c 	adds.w	sl, sl, ip
    cf42:	f04f 0c00 	mov.w	ip, #0
    cf46:	eb4c 0c0c 	adc.w	ip, ip, ip
    cf4a:	fbe3 ac00 	umlal	sl, ip, r3, r0
    cf4e:	eb1b 0b0c 	adds.w	fp, fp, ip
    cf52:	f04f 0c00 	mov.w	ip, #0
    cf56:	eb4c 0c0c 	adc.w	ip, ip, ip
    cf5a:	fbe4 bc00 	umlal	fp, ip, r4, r0
    cf5e:	ee08 ea10 	vmov	s16, lr
    cf62:	ee11 0a90 	vmov	r0, s3
    cf66:	f04f 0e00 	mov.w	lr, #0
    cf6a:	fbe1 5e00 	umlal	r5, lr, r1, r0
    cf6e:	eb16 060e 	adds.w	r6, r6, lr
    cf72:	f04f 0e00 	mov.w	lr, #0
    cf76:	eb4e 0e0e 	adc.w	lr, lr, lr
    cf7a:	fbe2 6e00 	umlal	r6, lr, r2, r0
    cf7e:	eb17 070e 	adds.w	r7, r7, lr
    cf82:	f04f 0e00 	mov.w	lr, #0
    cf86:	eb4e 0e0e 	adc.w	lr, lr, lr
    cf8a:	fbe3 7e00 	umlal	r7, lr, r3, r0
    cf8e:	eb18 080e 	adds.w	r8, r8, lr
    cf92:	f04f 0e00 	mov.w	lr, #0
    cf96:	eb4e 0e0e 	adc.w	lr, lr, lr
    cf9a:	fbe4 8e00 	umlal	r8, lr, r4, r0
    cf9e:	ee13 0a90 	vmov	r0, s7
    cfa2:	eb19 090e 	adds.w	r9, r9, lr
    cfa6:	f04f 0e00 	mov.w	lr, #0
    cfaa:	eb4e 0e0e 	adc.w	lr, lr, lr
    cfae:	fbe1 9e00 	umlal	r9, lr, r1, r0
    cfb2:	eb1a 0a0e 	adds.w	sl, sl, lr
    cfb6:	f04f 0e00 	mov.w	lr, #0
    cfba:	eb4e 0e0e 	adc.w	lr, lr, lr
    cfbe:	fbe2 ae00 	umlal	sl, lr, r2, r0
    cfc2:	eb1b 0b0e 	adds.w	fp, fp, lr
    cfc6:	f04f 0e00 	mov.w	lr, #0
    cfca:	eb4e 0e0e 	adc.w	lr, lr, lr
    cfce:	fbe3 be00 	umlal	fp, lr, r3, r0
    cfd2:	eb1c 0c0e 	adds.w	ip, ip, lr
    cfd6:	f04f 0e00 	mov.w	lr, #0
    cfda:	eb4e 0e0e 	adc.w	lr, lr, lr
    cfde:	fbe4 ce00 	umlal	ip, lr, r4, r0
    cfe2:	ee14 0a10 	vmov	r0, s8
    cfe6:	eca0 5a07 	vstmia	r0!, {s10-s16}
    cfea:	e880 5fe0 	stmia.w	r0, {r5, r6, r7, r8, r9, sl, fp, ip, lr}
    cfee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cff2:	bf00      	nop

0000cff4 <ocrypto_constant_time_equal>:
    cff4:	b430      	push	{r4, r5}
    cff6:	f04f 0300 	mov.w	r3, #0

0000cffa <constant_time_equal_loop>:
    cffa:	f810 4b01 	ldrb.w	r4, [r0], #1
    cffe:	f811 5b01 	ldrb.w	r5, [r1], #1
    d002:	3a01      	subs	r2, #1
    d004:	ea84 0405 	eor.w	r4, r4, r5
    d008:	ea43 0304 	orr.w	r3, r3, r4
    d00c:	d1f5      	bne.n	cffa <constant_time_equal_loop>
    d00e:	f1a3 0301 	sub.w	r3, r3, #1
    d012:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    d016:	bc30      	pop	{r4, r5}
    d018:	4770      	bx	lr

0000d01a <ocrypto_constant_time_is_zero>:
    d01a:	f04f 0300 	mov.w	r3, #0

0000d01e <constant_time_is_zero_loop>:
    d01e:	f810 2b01 	ldrb.w	r2, [r0], #1
    d022:	3901      	subs	r1, #1
    d024:	ea43 0302 	orr.w	r3, r3, r2
    d028:	d1f9      	bne.n	d01e <constant_time_is_zero_loop>
    d02a:	f1a3 0301 	sub.w	r3, r3, #1
    d02e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    d032:	4770      	bx	lr

0000d034 <ocrypto_constant_time_copy>:
    d034:	f811 3b01 	ldrb.w	r3, [r1], #1
    d038:	f800 3b01 	strb.w	r3, [r0], #1
    d03c:	3a01      	subs	r2, #1
    d03e:	d1f9      	bne.n	d034 <ocrypto_constant_time_copy>
    d040:	4770      	bx	lr

0000d042 <ocrypto_constant_time_fill_zero>:
    d042:	2200      	movs	r2, #0

0000d044 <constant_time_fill_zero_loop>:
    d044:	f800 2b01 	strb.w	r2, [r0], #1
    d048:	3901      	subs	r1, #1
    d04a:	d1fb      	bne.n	d044 <constant_time_fill_zero_loop>
    d04c:	4770      	bx	lr
    d04e:	bf00      	nop

0000d050 <ocrypto_mod_p256_add>:
    d050:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d054:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    d058:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d05c:	185b      	adds	r3, r3, r1
    d05e:	eb54 040c 	adcs.w	r4, r4, ip
    d062:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d066:	414d      	adcs	r5, r1
    d068:	eb56 060c 	adcs.w	r6, r6, ip
    d06c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d070:	414f      	adcs	r7, r1
    d072:	eb58 080c 	adcs.w	r8, r8, ip
    d076:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d07a:	eb59 0901 	adcs.w	r9, r9, r1
    d07e:	eb5a 0a0c 	adcs.w	sl, sl, ip
    d082:	4189      	sbcs	r1, r1
    d084:	f1b3 33ff 	subs.w	r3, r3, #4294967295
    d088:	f174 34ff 	sbcs.w	r4, r4, #4294967295
    d08c:	f175 35ff 	sbcs.w	r5, r5, #4294967295
    d090:	f176 0600 	sbcs.w	r6, r6, #0
    d094:	f177 0700 	sbcs.w	r7, r7, #0
    d098:	f178 0800 	sbcs.w	r8, r8, #0
    d09c:	f179 0901 	sbcs.w	r9, r9, #1
    d0a0:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
    d0a4:	f151 0100 	adcs.w	r1, r1, #0
    d0a8:	424a      	negs	r2, r1
    d0aa:	185b      	adds	r3, r3, r1
    d0ac:	414c      	adcs	r4, r1
    d0ae:	414d      	adcs	r5, r1
    d0b0:	f156 0600 	adcs.w	r6, r6, #0
    d0b4:	f157 0700 	adcs.w	r7, r7, #0
    d0b8:	f158 0800 	adcs.w	r8, r8, #0
    d0bc:	eb59 0902 	adcs.w	r9, r9, r2
    d0c0:	eb5a 0a01 	adcs.w	sl, sl, r1
    d0c4:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    d0c8:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d0cc:	4770      	bx	lr

0000d0ce <ocrypto_mod_p256_sub>:
    d0ce:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d0d2:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    d0d6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d0da:	1a5b      	subs	r3, r3, r1
    d0dc:	eb74 040c 	sbcs.w	r4, r4, ip
    d0e0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d0e4:	418d      	sbcs	r5, r1
    d0e6:	eb76 060c 	sbcs.w	r6, r6, ip
    d0ea:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d0ee:	418f      	sbcs	r7, r1
    d0f0:	eb78 080c 	sbcs.w	r8, r8, ip
    d0f4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d0f8:	eb79 0901 	sbcs.w	r9, r9, r1
    d0fc:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    d100:	4189      	sbcs	r1, r1
    d102:	424a      	negs	r2, r1
    d104:	185b      	adds	r3, r3, r1
    d106:	414c      	adcs	r4, r1
    d108:	414d      	adcs	r5, r1
    d10a:	f156 0600 	adcs.w	r6, r6, #0
    d10e:	f157 0700 	adcs.w	r7, r7, #0
    d112:	f158 0800 	adcs.w	r8, r8, #0
    d116:	eb59 0902 	adcs.w	r9, r9, r2
    d11a:	eb5a 0a01 	adcs.w	sl, sl, r1
    d11e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    d122:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d126:	4770      	bx	lr

0000d128 <ocrypto_mod_p256_square>:
    d128:	460a      	mov	r2, r1

0000d12a <ocrypto_mod_p256_mul>:
    d12a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d12e:	ec41 0a14 	vmov	s8, s9, r0, r1
    d132:	ec92 0a08 	vldmia	r2, {s0-s7}
    d136:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    d138:	ee10 0a10 	vmov	r0, s0
    d13c:	fba1 7800 	umull	r7, r8, r1, r0
    d140:	f04f 0900 	mov.w	r9, #0
    d144:	fbe2 8900 	umlal	r8, r9, r2, r0
    d148:	f04f 0a00 	mov.w	sl, #0
    d14c:	fbe3 9a00 	umlal	r9, sl, r3, r0
    d150:	f04f 0b00 	mov.w	fp, #0
    d154:	fbe4 ab00 	umlal	sl, fp, r4, r0
    d158:	ee12 0a10 	vmov	r0, s4
    d15c:	f04f 0c00 	mov.w	ip, #0
    d160:	fbe1 bc00 	umlal	fp, ip, r1, r0
    d164:	f04f 0e00 	mov.w	lr, #0
    d168:	fbe2 ce00 	umlal	ip, lr, r2, r0
    d16c:	f04f 0500 	mov.w	r5, #0
    d170:	fbe3 e500 	umlal	lr, r5, r3, r0
    d174:	f04f 0600 	mov.w	r6, #0
    d178:	fbe4 5600 	umlal	r5, r6, r4, r0
    d17c:	ee05 7a10 	vmov	s10, r7
    d180:	ee10 0a90 	vmov	r0, s1
    d184:	f04f 0700 	mov.w	r7, #0
    d188:	fbe1 8700 	umlal	r8, r7, r1, r0
    d18c:	eb19 0907 	adds.w	r9, r9, r7
    d190:	f04f 0700 	mov.w	r7, #0
    d194:	eb47 0707 	adc.w	r7, r7, r7
    d198:	fbe2 9700 	umlal	r9, r7, r2, r0
    d19c:	eb1a 0a07 	adds.w	sl, sl, r7
    d1a0:	f04f 0700 	mov.w	r7, #0
    d1a4:	eb47 0707 	adc.w	r7, r7, r7
    d1a8:	fbe3 a700 	umlal	sl, r7, r3, r0
    d1ac:	eb1b 0b07 	adds.w	fp, fp, r7
    d1b0:	f04f 0700 	mov.w	r7, #0
    d1b4:	eb47 0707 	adc.w	r7, r7, r7
    d1b8:	fbe4 b700 	umlal	fp, r7, r4, r0
    d1bc:	ee12 0a90 	vmov	r0, s5
    d1c0:	eb1c 0c07 	adds.w	ip, ip, r7
    d1c4:	f04f 0700 	mov.w	r7, #0
    d1c8:	eb47 0707 	adc.w	r7, r7, r7
    d1cc:	fbe1 c700 	umlal	ip, r7, r1, r0
    d1d0:	eb1e 0e07 	adds.w	lr, lr, r7
    d1d4:	f04f 0700 	mov.w	r7, #0
    d1d8:	eb47 0707 	adc.w	r7, r7, r7
    d1dc:	fbe2 e700 	umlal	lr, r7, r2, r0
    d1e0:	19ed      	adds	r5, r5, r7
    d1e2:	f04f 0700 	mov.w	r7, #0
    d1e6:	eb47 0707 	adc.w	r7, r7, r7
    d1ea:	fbe3 5700 	umlal	r5, r7, r3, r0
    d1ee:	19f6      	adds	r6, r6, r7
    d1f0:	f04f 0700 	mov.w	r7, #0
    d1f4:	eb47 0707 	adc.w	r7, r7, r7
    d1f8:	fbe4 6700 	umlal	r6, r7, r4, r0
    d1fc:	ee05 8a90 	vmov	s11, r8
    d200:	ee11 0a10 	vmov	r0, s2
    d204:	f04f 0800 	mov.w	r8, #0
    d208:	fbe1 9800 	umlal	r9, r8, r1, r0
    d20c:	eb1a 0a08 	adds.w	sl, sl, r8
    d210:	f04f 0800 	mov.w	r8, #0
    d214:	eb48 0808 	adc.w	r8, r8, r8
    d218:	fbe2 a800 	umlal	sl, r8, r2, r0
    d21c:	eb1b 0b08 	adds.w	fp, fp, r8
    d220:	f04f 0800 	mov.w	r8, #0
    d224:	eb48 0808 	adc.w	r8, r8, r8
    d228:	fbe3 b800 	umlal	fp, r8, r3, r0
    d22c:	eb1c 0c08 	adds.w	ip, ip, r8
    d230:	f04f 0800 	mov.w	r8, #0
    d234:	eb48 0808 	adc.w	r8, r8, r8
    d238:	fbe4 c800 	umlal	ip, r8, r4, r0
    d23c:	ee13 0a10 	vmov	r0, s6
    d240:	eb1e 0e08 	adds.w	lr, lr, r8
    d244:	f04f 0800 	mov.w	r8, #0
    d248:	eb48 0808 	adc.w	r8, r8, r8
    d24c:	fbe1 e800 	umlal	lr, r8, r1, r0
    d250:	eb15 0508 	adds.w	r5, r5, r8
    d254:	f04f 0800 	mov.w	r8, #0
    d258:	eb48 0808 	adc.w	r8, r8, r8
    d25c:	fbe2 5800 	umlal	r5, r8, r2, r0
    d260:	eb16 0608 	adds.w	r6, r6, r8
    d264:	f04f 0800 	mov.w	r8, #0
    d268:	eb48 0808 	adc.w	r8, r8, r8
    d26c:	fbe3 6800 	umlal	r6, r8, r3, r0
    d270:	eb17 0708 	adds.w	r7, r7, r8
    d274:	f04f 0800 	mov.w	r8, #0
    d278:	eb48 0808 	adc.w	r8, r8, r8
    d27c:	fbe4 7800 	umlal	r7, r8, r4, r0
    d280:	ee06 9a10 	vmov	s12, r9
    d284:	ee11 0a90 	vmov	r0, s3
    d288:	f04f 0900 	mov.w	r9, #0
    d28c:	fbe1 a900 	umlal	sl, r9, r1, r0
    d290:	eb1b 0b09 	adds.w	fp, fp, r9
    d294:	f04f 0900 	mov.w	r9, #0
    d298:	eb49 0909 	adc.w	r9, r9, r9
    d29c:	fbe2 b900 	umlal	fp, r9, r2, r0
    d2a0:	eb1c 0c09 	adds.w	ip, ip, r9
    d2a4:	f04f 0900 	mov.w	r9, #0
    d2a8:	eb49 0909 	adc.w	r9, r9, r9
    d2ac:	fbe3 c900 	umlal	ip, r9, r3, r0
    d2b0:	eb1e 0e09 	adds.w	lr, lr, r9
    d2b4:	f04f 0900 	mov.w	r9, #0
    d2b8:	eb49 0909 	adc.w	r9, r9, r9
    d2bc:	fbe4 e900 	umlal	lr, r9, r4, r0
    d2c0:	ee13 0a90 	vmov	r0, s7
    d2c4:	eb15 0509 	adds.w	r5, r5, r9
    d2c8:	f04f 0900 	mov.w	r9, #0
    d2cc:	eb49 0909 	adc.w	r9, r9, r9
    d2d0:	fbe1 5900 	umlal	r5, r9, r1, r0
    d2d4:	eb16 0609 	adds.w	r6, r6, r9
    d2d8:	f04f 0900 	mov.w	r9, #0
    d2dc:	eb49 0909 	adc.w	r9, r9, r9
    d2e0:	fbe2 6900 	umlal	r6, r9, r2, r0
    d2e4:	eb17 0709 	adds.w	r7, r7, r9
    d2e8:	f04f 0900 	mov.w	r9, #0
    d2ec:	eb49 0909 	adc.w	r9, r9, r9
    d2f0:	fbe3 7900 	umlal	r7, r9, r3, r0
    d2f4:	eb18 0809 	adds.w	r8, r8, r9
    d2f8:	f04f 0900 	mov.w	r9, #0
    d2fc:	eb49 0909 	adc.w	r9, r9, r9
    d300:	fbe4 8900 	umlal	r8, r9, r4, r0
    d304:	ee06 aa90 	vmov	s13, sl
    d308:	ee14 1a90 	vmov	r1, s9
    d30c:	f101 0110 	add.w	r1, r1, #16
    d310:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    d312:	ee10 0a10 	vmov	r0, s0
    d316:	f04f 0a00 	mov.w	sl, #0
    d31a:	fbe1 ba00 	umlal	fp, sl, r1, r0
    d31e:	eb1c 0c0a 	adds.w	ip, ip, sl
    d322:	f04f 0a00 	mov.w	sl, #0
    d326:	eb4a 0a0a 	adc.w	sl, sl, sl
    d32a:	fbe2 ca00 	umlal	ip, sl, r2, r0
    d32e:	eb1e 0e0a 	adds.w	lr, lr, sl
    d332:	f04f 0a00 	mov.w	sl, #0
    d336:	eb4a 0a0a 	adc.w	sl, sl, sl
    d33a:	fbe3 ea00 	umlal	lr, sl, r3, r0
    d33e:	eb15 050a 	adds.w	r5, r5, sl
    d342:	f04f 0a00 	mov.w	sl, #0
    d346:	eb4a 0a0a 	adc.w	sl, sl, sl
    d34a:	fbe4 5a00 	umlal	r5, sl, r4, r0
    d34e:	ee12 0a10 	vmov	r0, s4
    d352:	eb16 060a 	adds.w	r6, r6, sl
    d356:	f04f 0a00 	mov.w	sl, #0
    d35a:	eb4a 0a0a 	adc.w	sl, sl, sl
    d35e:	fbe1 6a00 	umlal	r6, sl, r1, r0
    d362:	eb17 070a 	adds.w	r7, r7, sl
    d366:	f04f 0a00 	mov.w	sl, #0
    d36a:	eb4a 0a0a 	adc.w	sl, sl, sl
    d36e:	fbe2 7a00 	umlal	r7, sl, r2, r0
    d372:	eb18 080a 	adds.w	r8, r8, sl
    d376:	f04f 0a00 	mov.w	sl, #0
    d37a:	eb4a 0a0a 	adc.w	sl, sl, sl
    d37e:	fbe3 8a00 	umlal	r8, sl, r3, r0
    d382:	eb19 090a 	adds.w	r9, r9, sl
    d386:	f04f 0a00 	mov.w	sl, #0
    d38a:	eb4a 0a0a 	adc.w	sl, sl, sl
    d38e:	fbe4 9a00 	umlal	r9, sl, r4, r0
    d392:	ee07 ba10 	vmov	s14, fp
    d396:	ee10 0a90 	vmov	r0, s1
    d39a:	f04f 0b00 	mov.w	fp, #0
    d39e:	fbe1 cb00 	umlal	ip, fp, r1, r0
    d3a2:	eb1e 0e0b 	adds.w	lr, lr, fp
    d3a6:	f04f 0b00 	mov.w	fp, #0
    d3aa:	eb4b 0b0b 	adc.w	fp, fp, fp
    d3ae:	fbe2 eb00 	umlal	lr, fp, r2, r0
    d3b2:	eb15 050b 	adds.w	r5, r5, fp
    d3b6:	f04f 0b00 	mov.w	fp, #0
    d3ba:	eb4b 0b0b 	adc.w	fp, fp, fp
    d3be:	fbe3 5b00 	umlal	r5, fp, r3, r0
    d3c2:	eb16 060b 	adds.w	r6, r6, fp
    d3c6:	f04f 0b00 	mov.w	fp, #0
    d3ca:	eb4b 0b0b 	adc.w	fp, fp, fp
    d3ce:	fbe4 6b00 	umlal	r6, fp, r4, r0
    d3d2:	ee12 0a90 	vmov	r0, s5
    d3d6:	eb17 070b 	adds.w	r7, r7, fp
    d3da:	f04f 0b00 	mov.w	fp, #0
    d3de:	eb4b 0b0b 	adc.w	fp, fp, fp
    d3e2:	fbe1 7b00 	umlal	r7, fp, r1, r0
    d3e6:	eb18 080b 	adds.w	r8, r8, fp
    d3ea:	f04f 0b00 	mov.w	fp, #0
    d3ee:	eb4b 0b0b 	adc.w	fp, fp, fp
    d3f2:	fbe2 8b00 	umlal	r8, fp, r2, r0
    d3f6:	eb19 090b 	adds.w	r9, r9, fp
    d3fa:	f04f 0b00 	mov.w	fp, #0
    d3fe:	eb4b 0b0b 	adc.w	fp, fp, fp
    d402:	fbe3 9b00 	umlal	r9, fp, r3, r0
    d406:	eb1a 0a0b 	adds.w	sl, sl, fp
    d40a:	f04f 0b00 	mov.w	fp, #0
    d40e:	eb4b 0b0b 	adc.w	fp, fp, fp
    d412:	fbe4 ab00 	umlal	sl, fp, r4, r0
    d416:	ee07 ca90 	vmov	s15, ip
    d41a:	ee11 0a10 	vmov	r0, s2
    d41e:	f04f 0c00 	mov.w	ip, #0
    d422:	fbe1 ec00 	umlal	lr, ip, r1, r0
    d426:	eb15 050c 	adds.w	r5, r5, ip
    d42a:	f04f 0c00 	mov.w	ip, #0
    d42e:	eb4c 0c0c 	adc.w	ip, ip, ip
    d432:	fbe2 5c00 	umlal	r5, ip, r2, r0
    d436:	eb16 060c 	adds.w	r6, r6, ip
    d43a:	f04f 0c00 	mov.w	ip, #0
    d43e:	eb4c 0c0c 	adc.w	ip, ip, ip
    d442:	fbe3 6c00 	umlal	r6, ip, r3, r0
    d446:	eb17 070c 	adds.w	r7, r7, ip
    d44a:	f04f 0c00 	mov.w	ip, #0
    d44e:	eb4c 0c0c 	adc.w	ip, ip, ip
    d452:	fbe4 7c00 	umlal	r7, ip, r4, r0
    d456:	ee13 0a10 	vmov	r0, s6
    d45a:	eb18 080c 	adds.w	r8, r8, ip
    d45e:	f04f 0c00 	mov.w	ip, #0
    d462:	eb4c 0c0c 	adc.w	ip, ip, ip
    d466:	fbe1 8c00 	umlal	r8, ip, r1, r0
    d46a:	eb19 090c 	adds.w	r9, r9, ip
    d46e:	f04f 0c00 	mov.w	ip, #0
    d472:	eb4c 0c0c 	adc.w	ip, ip, ip
    d476:	fbe2 9c00 	umlal	r9, ip, r2, r0
    d47a:	eb1a 0a0c 	adds.w	sl, sl, ip
    d47e:	f04f 0c00 	mov.w	ip, #0
    d482:	eb4c 0c0c 	adc.w	ip, ip, ip
    d486:	fbe3 ac00 	umlal	sl, ip, r3, r0
    d48a:	eb1b 0b0c 	adds.w	fp, fp, ip
    d48e:	f04f 0c00 	mov.w	ip, #0
    d492:	eb4c 0c0c 	adc.w	ip, ip, ip
    d496:	fbe4 bc00 	umlal	fp, ip, r4, r0
    d49a:	ee08 ea10 	vmov	s16, lr
    d49e:	ee11 0a90 	vmov	r0, s3
    d4a2:	f04f 0e00 	mov.w	lr, #0
    d4a6:	fbe1 5e00 	umlal	r5, lr, r1, r0
    d4aa:	eb16 060e 	adds.w	r6, r6, lr
    d4ae:	f04f 0e00 	mov.w	lr, #0
    d4b2:	eb4e 0e0e 	adc.w	lr, lr, lr
    d4b6:	fbe2 6e00 	umlal	r6, lr, r2, r0
    d4ba:	eb17 070e 	adds.w	r7, r7, lr
    d4be:	f04f 0e00 	mov.w	lr, #0
    d4c2:	eb4e 0e0e 	adc.w	lr, lr, lr
    d4c6:	fbe3 7e00 	umlal	r7, lr, r3, r0
    d4ca:	eb18 080e 	adds.w	r8, r8, lr
    d4ce:	f04f 0e00 	mov.w	lr, #0
    d4d2:	eb4e 0e0e 	adc.w	lr, lr, lr
    d4d6:	fbe4 8e00 	umlal	r8, lr, r4, r0
    d4da:	ee13 0a90 	vmov	r0, s7
    d4de:	eb19 090e 	adds.w	r9, r9, lr
    d4e2:	f04f 0e00 	mov.w	lr, #0
    d4e6:	eb4e 0e0e 	adc.w	lr, lr, lr
    d4ea:	fbe1 9e00 	umlal	r9, lr, r1, r0
    d4ee:	eb1a 0a0e 	adds.w	sl, sl, lr
    d4f2:	f04f 0e00 	mov.w	lr, #0
    d4f6:	eb4e 0e0e 	adc.w	lr, lr, lr
    d4fa:	fbe2 ae00 	umlal	sl, lr, r2, r0
    d4fe:	eb1b 0b0e 	adds.w	fp, fp, lr
    d502:	f04f 0e00 	mov.w	lr, #0
    d506:	eb4e 0e0e 	adc.w	lr, lr, lr
    d50a:	fbe3 be00 	umlal	fp, lr, r3, r0
    d50e:	eb1c 0c0e 	adds.w	ip, ip, lr
    d512:	f04f 0e00 	mov.w	lr, #0
    d516:	eb4e 0e0e 	adc.w	lr, lr, lr
    d51a:	fbe4 ce00 	umlal	ip, lr, r4, r0
    d51e:	ec53 2a17 	vmov	r2, r3, s14, s15
    d522:	ee18 4a10 	vmov	r4, s16
    d526:	eb12 020a 	adds.w	r2, r2, sl
    d52a:	eb53 030b 	adcs.w	r3, r3, fp
    d52e:	eb54 040c 	adcs.w	r4, r4, ip
    d532:	eb55 050e 	adcs.w	r5, r5, lr
    d536:	2000      	movs	r0, #0
    d538:	f140 0000 	adc.w	r0, r0, #0
    d53c:	eb12 020b 	adds.w	r2, r2, fp
    d540:	eb53 030c 	adcs.w	r3, r3, ip
    d544:	eb54 040e 	adcs.w	r4, r4, lr
    d548:	eb55 050e 	adcs.w	r5, r5, lr
    d54c:	4146      	adcs	r6, r0
    d54e:	2000      	movs	r0, #0
    d550:	4147      	adcs	r7, r0
    d552:	eb58 0800 	adcs.w	r8, r8, r0
    d556:	eb59 090a 	adcs.w	r9, r9, sl
    d55a:	f140 0000 	adc.w	r0, r0, #0
    d55e:	ebb2 020e 	subs.w	r2, r2, lr
    d562:	f173 0300 	sbcs.w	r3, r3, #0
    d566:	f174 0400 	sbcs.w	r4, r4, #0
    d56a:	eb75 050a 	sbcs.w	r5, r5, sl
    d56e:	eb76 060b 	sbcs.w	r6, r6, fp
    d572:	eb77 070c 	sbcs.w	r7, r7, ip
    d576:	eb78 080a 	sbcs.w	r8, r8, sl
    d57a:	eb79 090c 	sbcs.w	r9, r9, ip
    d57e:	f160 0000 	sbc.w	r0, r0, #0
    d582:	ebb5 050b 	subs.w	r5, r5, fp
    d586:	eb76 060c 	sbcs.w	r6, r6, ip
    d58a:	eb77 070e 	sbcs.w	r7, r7, lr
    d58e:	eb78 080b 	sbcs.w	r8, r8, fp
    d592:	eb79 090e 	sbcs.w	r9, r9, lr
    d596:	f160 0000 	sbc.w	r0, r0, #0
    d59a:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    d59e:	ea7f 0c0c 	mvns.w	ip, ip
    d5a2:	f1dc 0e00 	rsbs	lr, ip, #0
    d5a6:	ebb2 020c 	subs.w	r2, r2, ip
    d5aa:	eb73 030c 	sbcs.w	r3, r3, ip
    d5ae:	eb74 040c 	sbcs.w	r4, r4, ip
    d5b2:	f175 0500 	sbcs.w	r5, r5, #0
    d5b6:	f176 0600 	sbcs.w	r6, r6, #0
    d5ba:	f177 0700 	sbcs.w	r7, r7, #0
    d5be:	eb78 080e 	sbcs.w	r8, r8, lr
    d5c2:	eb79 090c 	sbcs.w	r9, r9, ip
    d5c6:	f160 0000 	sbc.w	r0, r0, #0
    d5ca:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    d5ce:	f1dc 0e00 	rsbs	lr, ip, #0
    d5d2:	eb12 020c 	adds.w	r2, r2, ip
    d5d6:	eb53 030c 	adcs.w	r3, r3, ip
    d5da:	eb54 040c 	adcs.w	r4, r4, ip
    d5de:	f155 0500 	adcs.w	r5, r5, #0
    d5e2:	f156 0600 	adcs.w	r6, r6, #0
    d5e6:	f157 0700 	adcs.w	r7, r7, #0
    d5ea:	eb58 080e 	adcs.w	r8, r8, lr
    d5ee:	eb59 090c 	adcs.w	r9, r9, ip
    d5f2:	f140 0000 	adc.w	r0, r0, #0
    d5f6:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    d5fa:	f1dc 0e00 	rsbs	lr, ip, #0
    d5fe:	eb12 020c 	adds.w	r2, r2, ip
    d602:	eb53 030c 	adcs.w	r3, r3, ip
    d606:	eb54 040c 	adcs.w	r4, r4, ip
    d60a:	f155 0500 	adcs.w	r5, r5, #0
    d60e:	f156 0600 	adcs.w	r6, r6, #0
    d612:	f157 0700 	adcs.w	r7, r7, #0
    d616:	eb58 080e 	adcs.w	r8, r8, lr
    d61a:	eb59 090c 	adcs.w	r9, r9, ip
    d61e:	ec5b aa15 	vmov	sl, fp, s10, s11
    d622:	ec51 0a16 	vmov	r0, r1, s12, s13
    d626:	eb1a 0a06 	adds.w	sl, sl, r6
    d62a:	eb5b 0b07 	adcs.w	fp, fp, r7
    d62e:	eb50 0008 	adcs.w	r0, r0, r8
    d632:	eb51 0109 	adcs.w	r1, r1, r9
    d636:	f05f 0c00 	movs.w	ip, #0
    d63a:	f14c 0c00 	adc.w	ip, ip, #0
    d63e:	eb1a 0a07 	adds.w	sl, sl, r7
    d642:	eb5b 0b08 	adcs.w	fp, fp, r8
    d646:	eb50 0009 	adcs.w	r0, r0, r9
    d64a:	eb51 0109 	adcs.w	r1, r1, r9
    d64e:	eb52 020c 	adcs.w	r2, r2, ip
    d652:	f05f 0c00 	movs.w	ip, #0
    d656:	eb53 030c 	adcs.w	r3, r3, ip
    d65a:	eb54 040c 	adcs.w	r4, r4, ip
    d65e:	4175      	adcs	r5, r6
    d660:	f14c 0c00 	adc.w	ip, ip, #0
    d664:	ebba 0a09 	subs.w	sl, sl, r9
    d668:	f17b 0b00 	sbcs.w	fp, fp, #0
    d66c:	f170 0000 	sbcs.w	r0, r0, #0
    d670:	41b1      	sbcs	r1, r6
    d672:	41ba      	sbcs	r2, r7
    d674:	eb73 0308 	sbcs.w	r3, r3, r8
    d678:	41b4      	sbcs	r4, r6
    d67a:	eb75 0508 	sbcs.w	r5, r5, r8
    d67e:	f16c 0c00 	sbc.w	ip, ip, #0
    d682:	1bc9      	subs	r1, r1, r7
    d684:	eb72 0208 	sbcs.w	r2, r2, r8
    d688:	eb73 0309 	sbcs.w	r3, r3, r9
    d68c:	41bc      	sbcs	r4, r7
    d68e:	eb75 0509 	sbcs.w	r5, r5, r9
    d692:	f16c 0c00 	sbc.w	ip, ip, #0
    d696:	ea5f 78ec 	movs.w	r8, ip, asr #31
    d69a:	ea7f 0808 	mvns.w	r8, r8
    d69e:	f1d8 0900 	rsbs	r9, r8, #0
    d6a2:	ebba 0a08 	subs.w	sl, sl, r8
    d6a6:	eb7b 0b08 	sbcs.w	fp, fp, r8
    d6aa:	eb70 0008 	sbcs.w	r0, r0, r8
    d6ae:	f171 0100 	sbcs.w	r1, r1, #0
    d6b2:	f172 0200 	sbcs.w	r2, r2, #0
    d6b6:	f173 0300 	sbcs.w	r3, r3, #0
    d6ba:	eb74 0409 	sbcs.w	r4, r4, r9
    d6be:	eb75 0508 	sbcs.w	r5, r5, r8
    d6c2:	f16c 0c00 	sbc.w	ip, ip, #0
    d6c6:	ea5f 78ec 	movs.w	r8, ip, asr #31
    d6ca:	f1d8 0900 	rsbs	r9, r8, #0
    d6ce:	eb1a 0a08 	adds.w	sl, sl, r8
    d6d2:	eb5b 0b08 	adcs.w	fp, fp, r8
    d6d6:	eb50 0008 	adcs.w	r0, r0, r8
    d6da:	f151 0100 	adcs.w	r1, r1, #0
    d6de:	f152 0200 	adcs.w	r2, r2, #0
    d6e2:	f153 0300 	adcs.w	r3, r3, #0
    d6e6:	eb54 0409 	adcs.w	r4, r4, r9
    d6ea:	eb55 0508 	adcs.w	r5, r5, r8
    d6ee:	f14c 0c00 	adc.w	ip, ip, #0
    d6f2:	ea5f 78ec 	movs.w	r8, ip, asr #31
    d6f6:	f1d8 0900 	rsbs	r9, r8, #0
    d6fa:	eb1a 0a08 	adds.w	sl, sl, r8
    d6fe:	eb5b 0b08 	adcs.w	fp, fp, r8
    d702:	eb50 0008 	adcs.w	r0, r0, r8
    d706:	f151 0100 	adcs.w	r1, r1, #0
    d70a:	f152 0200 	adcs.w	r2, r2, #0
    d70e:	f153 0300 	adcs.w	r3, r3, #0
    d712:	eb54 0409 	adcs.w	r4, r4, r9
    d716:	eb55 0508 	adcs.w	r5, r5, r8
    d71a:	ee14 7a10 	vmov	r7, s8
    d71e:	e8a7 0c00 	stmia.w	r7!, {sl, fp}
    d722:	e887 003f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5}
    d726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d72a:	bf00      	nop

0000d72c <__aeabi_dmul>:
    d72c:	b570      	push	{r4, r5, r6, lr}
    d72e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    d736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    d73a:	bf1d      	ittte	ne
    d73c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    d740:	ea94 0f0c 	teqne	r4, ip
    d744:	ea95 0f0c 	teqne	r5, ip
    d748:	f000 f8de 	bleq	d908 <__aeabi_dmul+0x1dc>
    d74c:	442c      	add	r4, r5
    d74e:	ea81 0603 	eor.w	r6, r1, r3
    d752:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    d756:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    d75a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    d75e:	bf18      	it	ne
    d760:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    d764:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d76c:	d038      	beq.n	d7e0 <__aeabi_dmul+0xb4>
    d76e:	fba0 ce02 	umull	ip, lr, r0, r2
    d772:	f04f 0500 	mov.w	r5, #0
    d776:	fbe1 e502 	umlal	lr, r5, r1, r2
    d77a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    d77e:	fbe0 e503 	umlal	lr, r5, r0, r3
    d782:	f04f 0600 	mov.w	r6, #0
    d786:	fbe1 5603 	umlal	r5, r6, r1, r3
    d78a:	f09c 0f00 	teq	ip, #0
    d78e:	bf18      	it	ne
    d790:	f04e 0e01 	orrne.w	lr, lr, #1
    d794:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    d798:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    d79c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    d7a0:	d204      	bcs.n	d7ac <__aeabi_dmul+0x80>
    d7a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    d7a6:	416d      	adcs	r5, r5
    d7a8:	eb46 0606 	adc.w	r6, r6, r6
    d7ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    d7b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    d7b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    d7b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    d7bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    d7c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    d7c4:	bf88      	it	hi
    d7c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    d7ca:	d81e      	bhi.n	d80a <__aeabi_dmul+0xde>
    d7cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    d7d0:	bf08      	it	eq
    d7d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    d7d6:	f150 0000 	adcs.w	r0, r0, #0
    d7da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d7de:	bd70      	pop	{r4, r5, r6, pc}
    d7e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    d7e4:	ea46 0101 	orr.w	r1, r6, r1
    d7e8:	ea40 0002 	orr.w	r0, r0, r2
    d7ec:	ea81 0103 	eor.w	r1, r1, r3
    d7f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    d7f4:	bfc2      	ittt	gt
    d7f6:	ebd4 050c 	rsbsgt	r5, r4, ip
    d7fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    d7fe:	bd70      	popgt	{r4, r5, r6, pc}
    d800:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d804:	f04f 0e00 	mov.w	lr, #0
    d808:	3c01      	subs	r4, #1
    d80a:	f300 80ab 	bgt.w	d964 <__aeabi_dmul+0x238>
    d80e:	f114 0f36 	cmn.w	r4, #54	; 0x36
    d812:	bfde      	ittt	le
    d814:	2000      	movle	r0, #0
    d816:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    d81a:	bd70      	pople	{r4, r5, r6, pc}
    d81c:	f1c4 0400 	rsb	r4, r4, #0
    d820:	3c20      	subs	r4, #32
    d822:	da35      	bge.n	d890 <__aeabi_dmul+0x164>
    d824:	340c      	adds	r4, #12
    d826:	dc1b      	bgt.n	d860 <__aeabi_dmul+0x134>
    d828:	f104 0414 	add.w	r4, r4, #20
    d82c:	f1c4 0520 	rsb	r5, r4, #32
    d830:	fa00 f305 	lsl.w	r3, r0, r5
    d834:	fa20 f004 	lsr.w	r0, r0, r4
    d838:	fa01 f205 	lsl.w	r2, r1, r5
    d83c:	ea40 0002 	orr.w	r0, r0, r2
    d840:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    d844:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    d848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    d84c:	fa21 f604 	lsr.w	r6, r1, r4
    d850:	eb42 0106 	adc.w	r1, r2, r6
    d854:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    d858:	bf08      	it	eq
    d85a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d85e:	bd70      	pop	{r4, r5, r6, pc}
    d860:	f1c4 040c 	rsb	r4, r4, #12
    d864:	f1c4 0520 	rsb	r5, r4, #32
    d868:	fa00 f304 	lsl.w	r3, r0, r4
    d86c:	fa20 f005 	lsr.w	r0, r0, r5
    d870:	fa01 f204 	lsl.w	r2, r1, r4
    d874:	ea40 0002 	orr.w	r0, r0, r2
    d878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d87c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    d880:	f141 0100 	adc.w	r1, r1, #0
    d884:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    d888:	bf08      	it	eq
    d88a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d88e:	bd70      	pop	{r4, r5, r6, pc}
    d890:	f1c4 0520 	rsb	r5, r4, #32
    d894:	fa00 f205 	lsl.w	r2, r0, r5
    d898:	ea4e 0e02 	orr.w	lr, lr, r2
    d89c:	fa20 f304 	lsr.w	r3, r0, r4
    d8a0:	fa01 f205 	lsl.w	r2, r1, r5
    d8a4:	ea43 0302 	orr.w	r3, r3, r2
    d8a8:	fa21 f004 	lsr.w	r0, r1, r4
    d8ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d8b0:	fa21 f204 	lsr.w	r2, r1, r4
    d8b4:	ea20 0002 	bic.w	r0, r0, r2
    d8b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    d8bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    d8c0:	bf08      	it	eq
    d8c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d8c6:	bd70      	pop	{r4, r5, r6, pc}
    d8c8:	f094 0f00 	teq	r4, #0
    d8cc:	d10f      	bne.n	d8ee <__aeabi_dmul+0x1c2>
    d8ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    d8d2:	0040      	lsls	r0, r0, #1
    d8d4:	eb41 0101 	adc.w	r1, r1, r1
    d8d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d8dc:	bf08      	it	eq
    d8de:	3c01      	subeq	r4, #1
    d8e0:	d0f7      	beq.n	d8d2 <__aeabi_dmul+0x1a6>
    d8e2:	ea41 0106 	orr.w	r1, r1, r6
    d8e6:	f095 0f00 	teq	r5, #0
    d8ea:	bf18      	it	ne
    d8ec:	4770      	bxne	lr
    d8ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    d8f2:	0052      	lsls	r2, r2, #1
    d8f4:	eb43 0303 	adc.w	r3, r3, r3
    d8f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    d8fc:	bf08      	it	eq
    d8fe:	3d01      	subeq	r5, #1
    d900:	d0f7      	beq.n	d8f2 <__aeabi_dmul+0x1c6>
    d902:	ea43 0306 	orr.w	r3, r3, r6
    d906:	4770      	bx	lr
    d908:	ea94 0f0c 	teq	r4, ip
    d90c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    d910:	bf18      	it	ne
    d912:	ea95 0f0c 	teqne	r5, ip
    d916:	d00c      	beq.n	d932 <__aeabi_dmul+0x206>
    d918:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d91c:	bf18      	it	ne
    d91e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d922:	d1d1      	bne.n	d8c8 <__aeabi_dmul+0x19c>
    d924:	ea81 0103 	eor.w	r1, r1, r3
    d928:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d92c:	f04f 0000 	mov.w	r0, #0
    d930:	bd70      	pop	{r4, r5, r6, pc}
    d932:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d936:	bf06      	itte	eq
    d938:	4610      	moveq	r0, r2
    d93a:	4619      	moveq	r1, r3
    d93c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d940:	d019      	beq.n	d976 <__aeabi_dmul+0x24a>
    d942:	ea94 0f0c 	teq	r4, ip
    d946:	d102      	bne.n	d94e <__aeabi_dmul+0x222>
    d948:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    d94c:	d113      	bne.n	d976 <__aeabi_dmul+0x24a>
    d94e:	ea95 0f0c 	teq	r5, ip
    d952:	d105      	bne.n	d960 <__aeabi_dmul+0x234>
    d954:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    d958:	bf1c      	itt	ne
    d95a:	4610      	movne	r0, r2
    d95c:	4619      	movne	r1, r3
    d95e:	d10a      	bne.n	d976 <__aeabi_dmul+0x24a>
    d960:	ea81 0103 	eor.w	r1, r1, r3
    d964:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d968:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d96c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d970:	f04f 0000 	mov.w	r0, #0
    d974:	bd70      	pop	{r4, r5, r6, pc}
    d976:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d97a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    d97e:	bd70      	pop	{r4, r5, r6, pc}

0000d980 <__aeabi_ddiv>:
    d980:	b570      	push	{r4, r5, r6, lr}
    d982:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d986:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    d98a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    d98e:	bf1d      	ittte	ne
    d990:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    d994:	ea94 0f0c 	teqne	r4, ip
    d998:	ea95 0f0c 	teqne	r5, ip
    d99c:	f000 f8a7 	bleq	daee <__aeabi_ddiv+0x16e>
    d9a0:	eba4 0405 	sub.w	r4, r4, r5
    d9a4:	ea81 0e03 	eor.w	lr, r1, r3
    d9a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d9ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
    d9b0:	f000 8088 	beq.w	dac4 <__aeabi_ddiv+0x144>
    d9b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    d9b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d9bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    d9c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    d9c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
    d9c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    d9cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    d9d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
    d9d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    d9d8:	429d      	cmp	r5, r3
    d9da:	bf08      	it	eq
    d9dc:	4296      	cmpeq	r6, r2
    d9de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    d9e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
    d9e6:	d202      	bcs.n	d9ee <__aeabi_ddiv+0x6e>
    d9e8:	085b      	lsrs	r3, r3, #1
    d9ea:	ea4f 0232 	mov.w	r2, r2, rrx
    d9ee:	1ab6      	subs	r6, r6, r2
    d9f0:	eb65 0503 	sbc.w	r5, r5, r3
    d9f4:	085b      	lsrs	r3, r3, #1
    d9f6:	ea4f 0232 	mov.w	r2, r2, rrx
    d9fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    d9fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    da02:	ebb6 0e02 	subs.w	lr, r6, r2
    da06:	eb75 0e03 	sbcs.w	lr, r5, r3
    da0a:	bf22      	ittt	cs
    da0c:	1ab6      	subcs	r6, r6, r2
    da0e:	4675      	movcs	r5, lr
    da10:	ea40 000c 	orrcs.w	r0, r0, ip
    da14:	085b      	lsrs	r3, r3, #1
    da16:	ea4f 0232 	mov.w	r2, r2, rrx
    da1a:	ebb6 0e02 	subs.w	lr, r6, r2
    da1e:	eb75 0e03 	sbcs.w	lr, r5, r3
    da22:	bf22      	ittt	cs
    da24:	1ab6      	subcs	r6, r6, r2
    da26:	4675      	movcs	r5, lr
    da28:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    da2c:	085b      	lsrs	r3, r3, #1
    da2e:	ea4f 0232 	mov.w	r2, r2, rrx
    da32:	ebb6 0e02 	subs.w	lr, r6, r2
    da36:	eb75 0e03 	sbcs.w	lr, r5, r3
    da3a:	bf22      	ittt	cs
    da3c:	1ab6      	subcs	r6, r6, r2
    da3e:	4675      	movcs	r5, lr
    da40:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    da44:	085b      	lsrs	r3, r3, #1
    da46:	ea4f 0232 	mov.w	r2, r2, rrx
    da4a:	ebb6 0e02 	subs.w	lr, r6, r2
    da4e:	eb75 0e03 	sbcs.w	lr, r5, r3
    da52:	bf22      	ittt	cs
    da54:	1ab6      	subcs	r6, r6, r2
    da56:	4675      	movcs	r5, lr
    da58:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    da5c:	ea55 0e06 	orrs.w	lr, r5, r6
    da60:	d018      	beq.n	da94 <__aeabi_ddiv+0x114>
    da62:	ea4f 1505 	mov.w	r5, r5, lsl #4
    da66:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    da6a:	ea4f 1606 	mov.w	r6, r6, lsl #4
    da6e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    da72:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    da76:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    da7a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    da7e:	d1c0      	bne.n	da02 <__aeabi_ddiv+0x82>
    da80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    da84:	d10b      	bne.n	da9e <__aeabi_ddiv+0x11e>
    da86:	ea41 0100 	orr.w	r1, r1, r0
    da8a:	f04f 0000 	mov.w	r0, #0
    da8e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    da92:	e7b6      	b.n	da02 <__aeabi_ddiv+0x82>
    da94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    da98:	bf04      	itt	eq
    da9a:	4301      	orreq	r1, r0
    da9c:	2000      	moveq	r0, #0
    da9e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    daa2:	bf88      	it	hi
    daa4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    daa8:	f63f aeaf 	bhi.w	d80a <__aeabi_dmul+0xde>
    daac:	ebb5 0c03 	subs.w	ip, r5, r3
    dab0:	bf04      	itt	eq
    dab2:	ebb6 0c02 	subseq.w	ip, r6, r2
    dab6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    daba:	f150 0000 	adcs.w	r0, r0, #0
    dabe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    dac2:	bd70      	pop	{r4, r5, r6, pc}
    dac4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    dac8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    dacc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    dad0:	bfc2      	ittt	gt
    dad2:	ebd4 050c 	rsbsgt	r5, r4, ip
    dad6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    dada:	bd70      	popgt	{r4, r5, r6, pc}
    dadc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    dae0:	f04f 0e00 	mov.w	lr, #0
    dae4:	3c01      	subs	r4, #1
    dae6:	e690      	b.n	d80a <__aeabi_dmul+0xde>
    dae8:	ea45 0e06 	orr.w	lr, r5, r6
    daec:	e68d      	b.n	d80a <__aeabi_dmul+0xde>
    daee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    daf2:	ea94 0f0c 	teq	r4, ip
    daf6:	bf08      	it	eq
    daf8:	ea95 0f0c 	teqeq	r5, ip
    dafc:	f43f af3b 	beq.w	d976 <__aeabi_dmul+0x24a>
    db00:	ea94 0f0c 	teq	r4, ip
    db04:	d10a      	bne.n	db1c <__aeabi_ddiv+0x19c>
    db06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    db0a:	f47f af34 	bne.w	d976 <__aeabi_dmul+0x24a>
    db0e:	ea95 0f0c 	teq	r5, ip
    db12:	f47f af25 	bne.w	d960 <__aeabi_dmul+0x234>
    db16:	4610      	mov	r0, r2
    db18:	4619      	mov	r1, r3
    db1a:	e72c      	b.n	d976 <__aeabi_dmul+0x24a>
    db1c:	ea95 0f0c 	teq	r5, ip
    db20:	d106      	bne.n	db30 <__aeabi_ddiv+0x1b0>
    db22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    db26:	f43f aefd 	beq.w	d924 <__aeabi_dmul+0x1f8>
    db2a:	4610      	mov	r0, r2
    db2c:	4619      	mov	r1, r3
    db2e:	e722      	b.n	d976 <__aeabi_dmul+0x24a>
    db30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    db34:	bf18      	it	ne
    db36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    db3a:	f47f aec5 	bne.w	d8c8 <__aeabi_dmul+0x19c>
    db3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    db42:	f47f af0d 	bne.w	d960 <__aeabi_dmul+0x234>
    db46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    db4a:	f47f aeeb 	bne.w	d924 <__aeabi_dmul+0x1f8>
    db4e:	e712      	b.n	d976 <__aeabi_dmul+0x24a>

0000db50 <__gedf2>:
    db50:	f04f 3cff 	mov.w	ip, #4294967295
    db54:	e006      	b.n	db64 <__cmpdf2+0x4>
    db56:	bf00      	nop

0000db58 <__ledf2>:
    db58:	f04f 0c01 	mov.w	ip, #1
    db5c:	e002      	b.n	db64 <__cmpdf2+0x4>
    db5e:	bf00      	nop

0000db60 <__cmpdf2>:
    db60:	f04f 0c01 	mov.w	ip, #1
    db64:	f84d cd04 	str.w	ip, [sp, #-4]!
    db68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    db6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    db70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    db74:	bf18      	it	ne
    db76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    db7a:	d01b      	beq.n	dbb4 <__cmpdf2+0x54>
    db7c:	b001      	add	sp, #4
    db7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    db82:	bf0c      	ite	eq
    db84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    db88:	ea91 0f03 	teqne	r1, r3
    db8c:	bf02      	ittt	eq
    db8e:	ea90 0f02 	teqeq	r0, r2
    db92:	2000      	moveq	r0, #0
    db94:	4770      	bxeq	lr
    db96:	f110 0f00 	cmn.w	r0, #0
    db9a:	ea91 0f03 	teq	r1, r3
    db9e:	bf58      	it	pl
    dba0:	4299      	cmppl	r1, r3
    dba2:	bf08      	it	eq
    dba4:	4290      	cmpeq	r0, r2
    dba6:	bf2c      	ite	cs
    dba8:	17d8      	asrcs	r0, r3, #31
    dbaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    dbae:	f040 0001 	orr.w	r0, r0, #1
    dbb2:	4770      	bx	lr
    dbb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    dbb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    dbbc:	d102      	bne.n	dbc4 <__cmpdf2+0x64>
    dbbe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    dbc2:	d107      	bne.n	dbd4 <__cmpdf2+0x74>
    dbc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    dbc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    dbcc:	d1d6      	bne.n	db7c <__cmpdf2+0x1c>
    dbce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    dbd2:	d0d3      	beq.n	db7c <__cmpdf2+0x1c>
    dbd4:	f85d 0b04 	ldr.w	r0, [sp], #4
    dbd8:	4770      	bx	lr
    dbda:	bf00      	nop

0000dbdc <__aeabi_cdrcmple>:
    dbdc:	4684      	mov	ip, r0
    dbde:	4610      	mov	r0, r2
    dbe0:	4662      	mov	r2, ip
    dbe2:	468c      	mov	ip, r1
    dbe4:	4619      	mov	r1, r3
    dbe6:	4663      	mov	r3, ip
    dbe8:	e000      	b.n	dbec <__aeabi_cdcmpeq>
    dbea:	bf00      	nop

0000dbec <__aeabi_cdcmpeq>:
    dbec:	b501      	push	{r0, lr}
    dbee:	f7ff ffb7 	bl	db60 <__cmpdf2>
    dbf2:	2800      	cmp	r0, #0
    dbf4:	bf48      	it	mi
    dbf6:	f110 0f00 	cmnmi.w	r0, #0
    dbfa:	bd01      	pop	{r0, pc}

0000dbfc <__aeabi_dcmpeq>:
    dbfc:	f84d ed08 	str.w	lr, [sp, #-8]!
    dc00:	f7ff fff4 	bl	dbec <__aeabi_cdcmpeq>
    dc04:	bf0c      	ite	eq
    dc06:	2001      	moveq	r0, #1
    dc08:	2000      	movne	r0, #0
    dc0a:	f85d fb08 	ldr.w	pc, [sp], #8
    dc0e:	bf00      	nop

0000dc10 <__aeabi_dcmplt>:
    dc10:	f84d ed08 	str.w	lr, [sp, #-8]!
    dc14:	f7ff ffea 	bl	dbec <__aeabi_cdcmpeq>
    dc18:	bf34      	ite	cc
    dc1a:	2001      	movcc	r0, #1
    dc1c:	2000      	movcs	r0, #0
    dc1e:	f85d fb08 	ldr.w	pc, [sp], #8
    dc22:	bf00      	nop

0000dc24 <__aeabi_dcmple>:
    dc24:	f84d ed08 	str.w	lr, [sp, #-8]!
    dc28:	f7ff ffe0 	bl	dbec <__aeabi_cdcmpeq>
    dc2c:	bf94      	ite	ls
    dc2e:	2001      	movls	r0, #1
    dc30:	2000      	movhi	r0, #0
    dc32:	f85d fb08 	ldr.w	pc, [sp], #8
    dc36:	bf00      	nop

0000dc38 <__aeabi_dcmpge>:
    dc38:	f84d ed08 	str.w	lr, [sp, #-8]!
    dc3c:	f7ff ffce 	bl	dbdc <__aeabi_cdrcmple>
    dc40:	bf94      	ite	ls
    dc42:	2001      	movls	r0, #1
    dc44:	2000      	movhi	r0, #0
    dc46:	f85d fb08 	ldr.w	pc, [sp], #8
    dc4a:	bf00      	nop

0000dc4c <__aeabi_dcmpgt>:
    dc4c:	f84d ed08 	str.w	lr, [sp, #-8]!
    dc50:	f7ff ffc4 	bl	dbdc <__aeabi_cdrcmple>
    dc54:	bf34      	ite	cc
    dc56:	2001      	movcc	r0, #1
    dc58:	2000      	movcs	r0, #0
    dc5a:	f85d fb08 	ldr.w	pc, [sp], #8
    dc5e:	bf00      	nop

0000dc60 <__aeabi_dcmpun>:
    dc60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    dc64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    dc68:	d102      	bne.n	dc70 <__aeabi_dcmpun+0x10>
    dc6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    dc6e:	d10a      	bne.n	dc86 <__aeabi_dcmpun+0x26>
    dc70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    dc74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    dc78:	d102      	bne.n	dc80 <__aeabi_dcmpun+0x20>
    dc7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    dc7e:	d102      	bne.n	dc86 <__aeabi_dcmpun+0x26>
    dc80:	f04f 0000 	mov.w	r0, #0
    dc84:	4770      	bx	lr
    dc86:	f04f 0001 	mov.w	r0, #1
    dc8a:	4770      	bx	lr

0000dc8c <__aeabi_d2iz>:
    dc8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    dc90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    dc94:	d215      	bcs.n	dcc2 <__aeabi_d2iz+0x36>
    dc96:	d511      	bpl.n	dcbc <__aeabi_d2iz+0x30>
    dc98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    dc9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    dca0:	d912      	bls.n	dcc8 <__aeabi_d2iz+0x3c>
    dca2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    dca6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    dcaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    dcae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    dcb2:	fa23 f002 	lsr.w	r0, r3, r2
    dcb6:	bf18      	it	ne
    dcb8:	4240      	negne	r0, r0
    dcba:	4770      	bx	lr
    dcbc:	f04f 0000 	mov.w	r0, #0
    dcc0:	4770      	bx	lr
    dcc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    dcc6:	d105      	bne.n	dcd4 <__aeabi_d2iz+0x48>
    dcc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    dccc:	bf08      	it	eq
    dcce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    dcd2:	4770      	bx	lr
    dcd4:	f04f 0000 	mov.w	r0, #0
    dcd8:	4770      	bx	lr
    dcda:	bf00      	nop

0000dcdc <strcmp>:
    dcdc:	f810 2b01 	ldrb.w	r2, [r0], #1
    dce0:	f811 3b01 	ldrb.w	r3, [r1], #1
    dce4:	2a01      	cmp	r2, #1
    dce6:	bf28      	it	cs
    dce8:	429a      	cmpcs	r2, r3
    dcea:	d0f7      	beq.n	dcdc <strcmp>
    dcec:	1ad0      	subs	r0, r2, r3
    dcee:	4770      	bx	lr

0000dcf0 <strlen>:
    dcf0:	4603      	mov	r3, r0
    dcf2:	f813 2b01 	ldrb.w	r2, [r3], #1
    dcf6:	2a00      	cmp	r2, #0
    dcf8:	d1fb      	bne.n	dcf2 <strlen+0x2>
    dcfa:	1a18      	subs	r0, r3, r0
    dcfc:	3801      	subs	r0, #1
    dcfe:	4770      	bx	lr

0000dd00 <_dtoa_r>:
    dd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd04:	6a45      	ldr	r5, [r0, #36]	; 0x24
    dd06:	b097      	sub	sp, #92	; 0x5c
    dd08:	4604      	mov	r4, r0
    dd0a:	9106      	str	r1, [sp, #24]
    dd0c:	920b      	str	r2, [sp, #44]	; 0x2c
    dd0e:	9312      	str	r3, [sp, #72]	; 0x48
    dd10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
    dd14:	ec57 6b10 	vmov	r6, r7, d0
    dd18:	e9cd 6700 	strd	r6, r7, [sp]
    dd1c:	b93d      	cbnz	r5, dd2e <_dtoa_r+0x2e>
    dd1e:	2010      	movs	r0, #16
    dd20:	f014 fb5e 	bl	223e0 <malloc>
    dd24:	6260      	str	r0, [r4, #36]	; 0x24
    dd26:	6005      	str	r5, [r0, #0]
    dd28:	60c5      	str	r5, [r0, #12]
    dd2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
    dd2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dd30:	6819      	ldr	r1, [r3, #0]
    dd32:	b151      	cbz	r1, dd4a <_dtoa_r+0x4a>
    dd34:	685a      	ldr	r2, [r3, #4]
    dd36:	2301      	movs	r3, #1
    dd38:	4620      	mov	r0, r4
    dd3a:	4093      	lsls	r3, r2
    dd3c:	604a      	str	r2, [r1, #4]
    dd3e:	608b      	str	r3, [r1, #8]
    dd40:	f017 f8fa 	bl	24f38 <_Bfree>
    dd44:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dd46:	2200      	movs	r2, #0
    dd48:	601a      	str	r2, [r3, #0]
    dd4a:	1e3b      	subs	r3, r7, #0
    dd4c:	bfb7      	itett	lt
    dd4e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    dd52:	2300      	movge	r3, #0
    dd54:	2201      	movlt	r2, #1
    dd56:	9301      	strlt	r3, [sp, #4]
    dd58:	bfac      	ite	ge
    dd5a:	f8c8 3000 	strge.w	r3, [r8]
    dd5e:	f8c8 2000 	strlt.w	r2, [r8]
    dd62:	4baf      	ldr	r3, [pc, #700]	; (e020 <_dtoa_r+0x320>)
    dd64:	f8dd 8004 	ldr.w	r8, [sp, #4]
    dd68:	ea33 0308 	bics.w	r3, r3, r8
    dd6c:	d114      	bne.n	dd98 <_dtoa_r+0x98>
    dd6e:	f242 730f 	movw	r3, #9999	; 0x270f
    dd72:	9a12      	ldr	r2, [sp, #72]	; 0x48
    dd74:	6013      	str	r3, [r2, #0]
    dd76:	9b00      	ldr	r3, [sp, #0]
    dd78:	b923      	cbnz	r3, dd84 <_dtoa_r+0x84>
    dd7a:	f3c8 0013 	ubfx	r0, r8, #0, #20
    dd7e:	2800      	cmp	r0, #0
    dd80:	f000 853e 	beq.w	e800 <_dtoa_r+0xb00>
    dd84:	9b21      	ldr	r3, [sp, #132]	; 0x84
    dd86:	f8df b2ac 	ldr.w	fp, [pc, #684]	; e034 <_dtoa_r+0x334>
    dd8a:	2b00      	cmp	r3, #0
    dd8c:	f000 8540 	beq.w	e810 <_dtoa_r+0xb10>
    dd90:	f10b 0303 	add.w	r3, fp, #3
    dd94:	f000 bd3a 	b.w	e80c <_dtoa_r+0xb0c>
    dd98:	e9dd 6700 	ldrd	r6, r7, [sp]
    dd9c:	2200      	movs	r2, #0
    dd9e:	2300      	movs	r3, #0
    dda0:	4630      	mov	r0, r6
    dda2:	4639      	mov	r1, r7
    dda4:	f7ff ff2a 	bl	dbfc <__aeabi_dcmpeq>
    dda8:	4681      	mov	r9, r0
    ddaa:	b168      	cbz	r0, ddc8 <_dtoa_r+0xc8>
    ddac:	2301      	movs	r3, #1
    ddae:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ddb0:	6013      	str	r3, [r2, #0]
    ddb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ddb4:	2b00      	cmp	r3, #0
    ddb6:	f000 8520 	beq.w	e7fa <_dtoa_r+0xafa>
    ddba:	4b9a      	ldr	r3, [pc, #616]	; (e024 <_dtoa_r+0x324>)
    ddbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
    ddbe:	f103 3bff 	add.w	fp, r3, #4294967295
    ddc2:	6013      	str	r3, [r2, #0]
    ddc4:	f000 bd24 	b.w	e810 <_dtoa_r+0xb10>
    ddc8:	f3c8 550a 	ubfx	r5, r8, #20, #11
    ddcc:	aa14      	add	r2, sp, #80	; 0x50
    ddce:	a915      	add	r1, sp, #84	; 0x54
    ddd0:	4620      	mov	r0, r4
    ddd2:	ec47 6b10 	vmov	d0, r6, r7
    ddd6:	f017 fabd 	bl	25354 <__d2b>
    ddda:	9004      	str	r0, [sp, #16]
    dddc:	2d00      	cmp	r5, #0
    ddde:	d07a      	beq.n	ded6 <_dtoa_r+0x1d6>
    dde0:	f3c7 0313 	ubfx	r3, r7, #0, #20
    dde4:	46b2      	mov	sl, r6
    dde6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
    ddea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
    ddee:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
    ddf2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
    ddf6:	2200      	movs	r2, #0
    ddf8:	4b8b      	ldr	r3, [pc, #556]	; (e028 <_dtoa_r+0x328>)
    ddfa:	4650      	mov	r0, sl
    ddfc:	4659      	mov	r1, fp
    ddfe:	f7fe fa13 	bl	c228 <__aeabi_dsub>
    de02:	a381      	add	r3, pc, #516	; (adr r3, e008 <_dtoa_r+0x308>)
    de04:	e9d3 2300 	ldrd	r2, r3, [r3]
    de08:	f7ff fc90 	bl	d72c <__aeabi_dmul>
    de0c:	a380      	add	r3, pc, #512	; (adr r3, e010 <_dtoa_r+0x310>)
    de0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    de12:	f7fe fa0b 	bl	c22c <__adddf3>
    de16:	4606      	mov	r6, r0
    de18:	460f      	mov	r7, r1
    de1a:	4628      	mov	r0, r5
    de1c:	f7fe fb52 	bl	c4c4 <__aeabi_i2d>
    de20:	a37d      	add	r3, pc, #500	; (adr r3, e018 <_dtoa_r+0x318>)
    de22:	e9d3 2300 	ldrd	r2, r3, [r3]
    de26:	f7ff fc81 	bl	d72c <__aeabi_dmul>
    de2a:	4602      	mov	r2, r0
    de2c:	460b      	mov	r3, r1
    de2e:	4630      	mov	r0, r6
    de30:	4639      	mov	r1, r7
    de32:	f7fe f9fb 	bl	c22c <__adddf3>
    de36:	4606      	mov	r6, r0
    de38:	460f      	mov	r7, r1
    de3a:	f7ff ff27 	bl	dc8c <__aeabi_d2iz>
    de3e:	2200      	movs	r2, #0
    de40:	4682      	mov	sl, r0
    de42:	2300      	movs	r3, #0
    de44:	4630      	mov	r0, r6
    de46:	4639      	mov	r1, r7
    de48:	f7ff fee2 	bl	dc10 <__aeabi_dcmplt>
    de4c:	b148      	cbz	r0, de62 <_dtoa_r+0x162>
    de4e:	4650      	mov	r0, sl
    de50:	f7fe fb38 	bl	c4c4 <__aeabi_i2d>
    de54:	4632      	mov	r2, r6
    de56:	463b      	mov	r3, r7
    de58:	f7ff fed0 	bl	dbfc <__aeabi_dcmpeq>
    de5c:	b908      	cbnz	r0, de62 <_dtoa_r+0x162>
    de5e:	f10a 3aff 	add.w	sl, sl, #4294967295
    de62:	f1ba 0f16 	cmp.w	sl, #22
    de66:	d857      	bhi.n	df18 <_dtoa_r+0x218>
    de68:	4970      	ldr	r1, [pc, #448]	; (e02c <_dtoa_r+0x32c>)
    de6a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
    de6e:	e9dd 2300 	ldrd	r2, r3, [sp]
    de72:	e9d1 0100 	ldrd	r0, r1, [r1]
    de76:	f7ff fee9 	bl	dc4c <__aeabi_dcmpgt>
    de7a:	2800      	cmp	r0, #0
    de7c:	d04e      	beq.n	df1c <_dtoa_r+0x21c>
    de7e:	f10a 3aff 	add.w	sl, sl, #4294967295
    de82:	2300      	movs	r3, #0
    de84:	930f      	str	r3, [sp, #60]	; 0x3c
    de86:	9b14      	ldr	r3, [sp, #80]	; 0x50
    de88:	1b5d      	subs	r5, r3, r5
    de8a:	f1b5 0801 	subs.w	r8, r5, #1
    de8e:	bf49      	itett	mi
    de90:	f1c5 0301 	rsbmi	r3, r5, #1
    de94:	2300      	movpl	r3, #0
    de96:	f04f 0800 	movmi.w	r8, #0
    de9a:	9305      	strmi	r3, [sp, #20]
    de9c:	bf58      	it	pl
    de9e:	9305      	strpl	r3, [sp, #20]
    dea0:	f1ba 0f00 	cmp.w	sl, #0
    dea4:	db3c      	blt.n	df20 <_dtoa_r+0x220>
    dea6:	2300      	movs	r3, #0
    dea8:	44d0      	add	r8, sl
    deaa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    deae:	9307      	str	r3, [sp, #28]
    deb0:	9b06      	ldr	r3, [sp, #24]
    deb2:	2b09      	cmp	r3, #9
    deb4:	f200 808e 	bhi.w	dfd4 <_dtoa_r+0x2d4>
    deb8:	2b05      	cmp	r3, #5
    deba:	bfc5      	ittet	gt
    debc:	3b04      	subgt	r3, #4
    debe:	2500      	movgt	r5, #0
    dec0:	2501      	movle	r5, #1
    dec2:	9306      	strgt	r3, [sp, #24]
    dec4:	9b06      	ldr	r3, [sp, #24]
    dec6:	3b02      	subs	r3, #2
    dec8:	2b03      	cmp	r3, #3
    deca:	f200 808f 	bhi.w	dfec <_dtoa_r+0x2ec>
    dece:	e8df f003 	tbb	[pc, r3]
    ded2:	7f7d      	.short	0x7f7d
    ded4:	7131      	.short	0x7131
    ded6:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
    deda:	441d      	add	r5, r3
    dedc:	f205 4032 	addw	r0, r5, #1074	; 0x432
    dee0:	2820      	cmp	r0, #32
    dee2:	dd13      	ble.n	df0c <_dtoa_r+0x20c>
    dee4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
    dee8:	9b00      	ldr	r3, [sp, #0]
    deea:	fa08 f800 	lsl.w	r8, r8, r0
    deee:	f205 4012 	addw	r0, r5, #1042	; 0x412
    def2:	fa23 f000 	lsr.w	r0, r3, r0
    def6:	ea48 0000 	orr.w	r0, r8, r0
    defa:	f7fe fad3 	bl	c4a4 <__aeabi_ui2d>
    defe:	2301      	movs	r3, #1
    df00:	4682      	mov	sl, r0
    df02:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
    df06:	3d01      	subs	r5, #1
    df08:	9313      	str	r3, [sp, #76]	; 0x4c
    df0a:	e774      	b.n	ddf6 <_dtoa_r+0xf6>
    df0c:	f1c0 0020 	rsb	r0, r0, #32
    df10:	9b00      	ldr	r3, [sp, #0]
    df12:	fa03 f000 	lsl.w	r0, r3, r0
    df16:	e7f0      	b.n	defa <_dtoa_r+0x1fa>
    df18:	2301      	movs	r3, #1
    df1a:	e7b3      	b.n	de84 <_dtoa_r+0x184>
    df1c:	900f      	str	r0, [sp, #60]	; 0x3c
    df1e:	e7b2      	b.n	de86 <_dtoa_r+0x186>
    df20:	9b05      	ldr	r3, [sp, #20]
    df22:	eba3 030a 	sub.w	r3, r3, sl
    df26:	9305      	str	r3, [sp, #20]
    df28:	f1ca 0300 	rsb	r3, sl, #0
    df2c:	9307      	str	r3, [sp, #28]
    df2e:	2300      	movs	r3, #0
    df30:	930e      	str	r3, [sp, #56]	; 0x38
    df32:	e7bd      	b.n	deb0 <_dtoa_r+0x1b0>
    df34:	2301      	movs	r3, #1
    df36:	930a      	str	r3, [sp, #40]	; 0x28
    df38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    df3a:	2b00      	cmp	r3, #0
    df3c:	dd59      	ble.n	dff2 <_dtoa_r+0x2f2>
    df3e:	4699      	mov	r9, r3
    df40:	9302      	str	r3, [sp, #8]
    df42:	2200      	movs	r2, #0
    df44:	6a66      	ldr	r6, [r4, #36]	; 0x24
    df46:	6072      	str	r2, [r6, #4]
    df48:	2204      	movs	r2, #4
    df4a:	f102 0014 	add.w	r0, r2, #20
    df4e:	6871      	ldr	r1, [r6, #4]
    df50:	4298      	cmp	r0, r3
    df52:	d953      	bls.n	dffc <_dtoa_r+0x2fc>
    df54:	4620      	mov	r0, r4
    df56:	f016 ffbb 	bl	24ed0 <_Balloc>
    df5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    df5c:	f1b9 0f0e 	cmp.w	r9, #14
    df60:	6030      	str	r0, [r6, #0]
    df62:	f8d3 b000 	ldr.w	fp, [r3]
    df66:	f200 80e8 	bhi.w	e13a <_dtoa_r+0x43a>
    df6a:	2d00      	cmp	r5, #0
    df6c:	f000 80e5 	beq.w	e13a <_dtoa_r+0x43a>
    df70:	f1ba 0f00 	cmp.w	sl, #0
    df74:	ed9d 7b00 	vldr	d7, [sp]
    df78:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
    df7c:	dd76      	ble.n	e06c <_dtoa_r+0x36c>
    df7e:	f00a 030f 	and.w	r3, sl, #15
    df82:	4a2a      	ldr	r2, [pc, #168]	; (e02c <_dtoa_r+0x32c>)
    df84:	ea4f 162a 	mov.w	r6, sl, asr #4
    df88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    df8c:	06f0      	lsls	r0, r6, #27
    df8e:	ed93 7b00 	vldr	d7, [r3]
    df92:	ed8d 7b08 	vstr	d7, [sp, #32]
    df96:	d567      	bpl.n	e068 <_dtoa_r+0x368>
    df98:	4b25      	ldr	r3, [pc, #148]	; (e030 <_dtoa_r+0x330>)
    df9a:	f006 060f 	and.w	r6, r6, #15
    df9e:	2503      	movs	r5, #3
    dfa0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    dfa4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    dfa8:	f7ff fcea 	bl	d980 <__aeabi_ddiv>
    dfac:	e9cd 0100 	strd	r0, r1, [sp]
    dfb0:	4f1f      	ldr	r7, [pc, #124]	; (e030 <_dtoa_r+0x330>)
    dfb2:	e04e      	b.n	e052 <_dtoa_r+0x352>
    dfb4:	2301      	movs	r3, #1
    dfb6:	930a      	str	r3, [sp, #40]	; 0x28
    dfb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dfba:	4453      	add	r3, sl
    dfbc:	f103 0901 	add.w	r9, r3, #1
    dfc0:	9302      	str	r3, [sp, #8]
    dfc2:	464b      	mov	r3, r9
    dfc4:	2b01      	cmp	r3, #1
    dfc6:	bfb8      	it	lt
    dfc8:	2301      	movlt	r3, #1
    dfca:	e7ba      	b.n	df42 <_dtoa_r+0x242>
    dfcc:	2300      	movs	r3, #0
    dfce:	e7b2      	b.n	df36 <_dtoa_r+0x236>
    dfd0:	2300      	movs	r3, #0
    dfd2:	e7f0      	b.n	dfb6 <_dtoa_r+0x2b6>
    dfd4:	2501      	movs	r5, #1
    dfd6:	2300      	movs	r3, #0
    dfd8:	950a      	str	r5, [sp, #40]	; 0x28
    dfda:	9306      	str	r3, [sp, #24]
    dfdc:	f04f 33ff 	mov.w	r3, #4294967295
    dfe0:	2200      	movs	r2, #0
    dfe2:	9302      	str	r3, [sp, #8]
    dfe4:	4699      	mov	r9, r3
    dfe6:	2312      	movs	r3, #18
    dfe8:	920b      	str	r2, [sp, #44]	; 0x2c
    dfea:	e7aa      	b.n	df42 <_dtoa_r+0x242>
    dfec:	2301      	movs	r3, #1
    dfee:	930a      	str	r3, [sp, #40]	; 0x28
    dff0:	e7f4      	b.n	dfdc <_dtoa_r+0x2dc>
    dff2:	2301      	movs	r3, #1
    dff4:	9302      	str	r3, [sp, #8]
    dff6:	4699      	mov	r9, r3
    dff8:	461a      	mov	r2, r3
    dffa:	e7f5      	b.n	dfe8 <_dtoa_r+0x2e8>
    dffc:	3101      	adds	r1, #1
    dffe:	0052      	lsls	r2, r2, #1
    e000:	6071      	str	r1, [r6, #4]
    e002:	e7a2      	b.n	df4a <_dtoa_r+0x24a>
    e004:	f3af 8000 	nop.w
    e008:	636f4361 	.word	0x636f4361
    e00c:	3fd287a7 	.word	0x3fd287a7
    e010:	8b60c8b3 	.word	0x8b60c8b3
    e014:	3fc68a28 	.word	0x3fc68a28
    e018:	509f79fb 	.word	0x509f79fb
    e01c:	3fd34413 	.word	0x3fd34413
    e020:	7ff00000 	.word	0x7ff00000
    e024:	000270ab 	.word	0x000270ab
    e028:	3ff80000 	.word	0x3ff80000
    e02c:	00025940 	.word	0x00025940
    e030:	00025918 	.word	0x00025918
    e034:	00027ab3 	.word	0x00027ab3
    e038:	07f1      	lsls	r1, r6, #31
    e03a:	d508      	bpl.n	e04e <_dtoa_r+0x34e>
    e03c:	3501      	adds	r5, #1
    e03e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    e042:	e9d7 2300 	ldrd	r2, r3, [r7]
    e046:	f7ff fb71 	bl	d72c <__aeabi_dmul>
    e04a:	e9cd 0108 	strd	r0, r1, [sp, #32]
    e04e:	1076      	asrs	r6, r6, #1
    e050:	3708      	adds	r7, #8
    e052:	2e00      	cmp	r6, #0
    e054:	d1f0      	bne.n	e038 <_dtoa_r+0x338>
    e056:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    e05a:	e9dd 0100 	ldrd	r0, r1, [sp]
    e05e:	f7ff fc8f 	bl	d980 <__aeabi_ddiv>
    e062:	e9cd 0100 	strd	r0, r1, [sp]
    e066:	e01a      	b.n	e09e <_dtoa_r+0x39e>
    e068:	2502      	movs	r5, #2
    e06a:	e7a1      	b.n	dfb0 <_dtoa_r+0x2b0>
    e06c:	f000 80a0 	beq.w	e1b0 <_dtoa_r+0x4b0>
    e070:	f1ca 0600 	rsb	r6, sl, #0
    e074:	4b9f      	ldr	r3, [pc, #636]	; (e2f4 <_dtoa_r+0x5f4>)
    e076:	4fa0      	ldr	r7, [pc, #640]	; (e2f8 <_dtoa_r+0x5f8>)
    e078:	2502      	movs	r5, #2
    e07a:	f006 020f 	and.w	r2, r6, #15
    e07e:	1136      	asrs	r6, r6, #4
    e080:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    e084:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    e088:	e9d3 2300 	ldrd	r2, r3, [r3]
    e08c:	f7ff fb4e 	bl	d72c <__aeabi_dmul>
    e090:	2300      	movs	r3, #0
    e092:	e9cd 0100 	strd	r0, r1, [sp]
    e096:	2e00      	cmp	r6, #0
    e098:	d17f      	bne.n	e19a <_dtoa_r+0x49a>
    e09a:	2b00      	cmp	r3, #0
    e09c:	d1e1      	bne.n	e062 <_dtoa_r+0x362>
    e09e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e0a0:	2b00      	cmp	r3, #0
    e0a2:	f000 8087 	beq.w	e1b4 <_dtoa_r+0x4b4>
    e0a6:	2200      	movs	r2, #0
    e0a8:	4b94      	ldr	r3, [pc, #592]	; (e2fc <_dtoa_r+0x5fc>)
    e0aa:	e9dd 6700 	ldrd	r6, r7, [sp]
    e0ae:	4630      	mov	r0, r6
    e0b0:	4639      	mov	r1, r7
    e0b2:	f7ff fdad 	bl	dc10 <__aeabi_dcmplt>
    e0b6:	2800      	cmp	r0, #0
    e0b8:	d07c      	beq.n	e1b4 <_dtoa_r+0x4b4>
    e0ba:	f1b9 0f00 	cmp.w	r9, #0
    e0be:	d079      	beq.n	e1b4 <_dtoa_r+0x4b4>
    e0c0:	9b02      	ldr	r3, [sp, #8]
    e0c2:	2b00      	cmp	r3, #0
    e0c4:	dd35      	ble.n	e132 <_dtoa_r+0x432>
    e0c6:	f10a 33ff 	add.w	r3, sl, #4294967295
    e0ca:	4639      	mov	r1, r7
    e0cc:	2200      	movs	r2, #0
    e0ce:	4630      	mov	r0, r6
    e0d0:	9308      	str	r3, [sp, #32]
    e0d2:	3501      	adds	r5, #1
    e0d4:	4b8a      	ldr	r3, [pc, #552]	; (e300 <_dtoa_r+0x600>)
    e0d6:	f7ff fb29 	bl	d72c <__aeabi_dmul>
    e0da:	9f02      	ldr	r7, [sp, #8]
    e0dc:	e9cd 0100 	strd	r0, r1, [sp]
    e0e0:	4628      	mov	r0, r5
    e0e2:	f7fe f9ef 	bl	c4c4 <__aeabi_i2d>
    e0e6:	e9dd 2300 	ldrd	r2, r3, [sp]
    e0ea:	f7ff fb1f 	bl	d72c <__aeabi_dmul>
    e0ee:	2200      	movs	r2, #0
    e0f0:	4b84      	ldr	r3, [pc, #528]	; (e304 <_dtoa_r+0x604>)
    e0f2:	f7fe f89b 	bl	c22c <__adddf3>
    e0f6:	4605      	mov	r5, r0
    e0f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    e0fc:	2f00      	cmp	r7, #0
    e0fe:	d15d      	bne.n	e1bc <_dtoa_r+0x4bc>
    e100:	2200      	movs	r2, #0
    e102:	4b81      	ldr	r3, [pc, #516]	; (e308 <_dtoa_r+0x608>)
    e104:	e9dd 0100 	ldrd	r0, r1, [sp]
    e108:	f7fe f88e 	bl	c228 <__aeabi_dsub>
    e10c:	462a      	mov	r2, r5
    e10e:	4633      	mov	r3, r6
    e110:	e9cd 0100 	strd	r0, r1, [sp]
    e114:	f7ff fd9a 	bl	dc4c <__aeabi_dcmpgt>
    e118:	2800      	cmp	r0, #0
    e11a:	f040 8287 	bne.w	e62c <_dtoa_r+0x92c>
    e11e:	462a      	mov	r2, r5
    e120:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    e124:	e9dd 0100 	ldrd	r0, r1, [sp]
    e128:	f7ff fd72 	bl	dc10 <__aeabi_dcmplt>
    e12c:	2800      	cmp	r0, #0
    e12e:	f040 827b 	bne.w	e628 <_dtoa_r+0x928>
    e132:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    e136:	e9cd 2300 	strd	r2, r3, [sp]
    e13a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e13c:	2b00      	cmp	r3, #0
    e13e:	f2c0 814f 	blt.w	e3e0 <_dtoa_r+0x6e0>
    e142:	f1ba 0f0e 	cmp.w	sl, #14
    e146:	f300 814b 	bgt.w	e3e0 <_dtoa_r+0x6e0>
    e14a:	4b6a      	ldr	r3, [pc, #424]	; (e2f4 <_dtoa_r+0x5f4>)
    e14c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    e150:	ed93 7b00 	vldr	d7, [r3]
    e154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e156:	2b00      	cmp	r3, #0
    e158:	ed8d 7b02 	vstr	d7, [sp, #8]
    e15c:	f280 80d8 	bge.w	e310 <_dtoa_r+0x610>
    e160:	f1b9 0f00 	cmp.w	r9, #0
    e164:	f300 80d4 	bgt.w	e310 <_dtoa_r+0x610>
    e168:	f040 825d 	bne.w	e626 <_dtoa_r+0x926>
    e16c:	2200      	movs	r2, #0
    e16e:	4b66      	ldr	r3, [pc, #408]	; (e308 <_dtoa_r+0x608>)
    e170:	464f      	mov	r7, r9
    e172:	464e      	mov	r6, r9
    e174:	ec51 0b17 	vmov	r0, r1, d7
    e178:	f7ff fad8 	bl	d72c <__aeabi_dmul>
    e17c:	e9dd 2300 	ldrd	r2, r3, [sp]
    e180:	f7ff fd5a 	bl	dc38 <__aeabi_dcmpge>
    e184:	2800      	cmp	r0, #0
    e186:	f040 8233 	bne.w	e5f0 <_dtoa_r+0x8f0>
    e18a:	2331      	movs	r3, #49	; 0x31
    e18c:	f10b 0501 	add.w	r5, fp, #1
    e190:	f10a 0a01 	add.w	sl, sl, #1
    e194:	f88b 3000 	strb.w	r3, [fp]
    e198:	e22e      	b.n	e5f8 <_dtoa_r+0x8f8>
    e19a:	07f2      	lsls	r2, r6, #31
    e19c:	d505      	bpl.n	e1aa <_dtoa_r+0x4aa>
    e19e:	3501      	adds	r5, #1
    e1a0:	e9d7 2300 	ldrd	r2, r3, [r7]
    e1a4:	f7ff fac2 	bl	d72c <__aeabi_dmul>
    e1a8:	2301      	movs	r3, #1
    e1aa:	1076      	asrs	r6, r6, #1
    e1ac:	3708      	adds	r7, #8
    e1ae:	e772      	b.n	e096 <_dtoa_r+0x396>
    e1b0:	2502      	movs	r5, #2
    e1b2:	e774      	b.n	e09e <_dtoa_r+0x39e>
    e1b4:	f8cd a020 	str.w	sl, [sp, #32]
    e1b8:	464f      	mov	r7, r9
    e1ba:	e791      	b.n	e0e0 <_dtoa_r+0x3e0>
    e1bc:	4b4d      	ldr	r3, [pc, #308]	; (e2f4 <_dtoa_r+0x5f4>)
    e1be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    e1c2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    e1c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e1c8:	2b00      	cmp	r3, #0
    e1ca:	d047      	beq.n	e25c <_dtoa_r+0x55c>
    e1cc:	4602      	mov	r2, r0
    e1ce:	460b      	mov	r3, r1
    e1d0:	2000      	movs	r0, #0
    e1d2:	494e      	ldr	r1, [pc, #312]	; (e30c <_dtoa_r+0x60c>)
    e1d4:	f7ff fbd4 	bl	d980 <__aeabi_ddiv>
    e1d8:	462a      	mov	r2, r5
    e1da:	465d      	mov	r5, fp
    e1dc:	4633      	mov	r3, r6
    e1de:	f7fe f823 	bl	c228 <__aeabi_dsub>
    e1e2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    e1e6:	e9dd 0100 	ldrd	r0, r1, [sp]
    e1ea:	f7ff fd4f 	bl	dc8c <__aeabi_d2iz>
    e1ee:	4606      	mov	r6, r0
    e1f0:	f7fe f968 	bl	c4c4 <__aeabi_i2d>
    e1f4:	4602      	mov	r2, r0
    e1f6:	3630      	adds	r6, #48	; 0x30
    e1f8:	460b      	mov	r3, r1
    e1fa:	e9dd 0100 	ldrd	r0, r1, [sp]
    e1fe:	f7fe f813 	bl	c228 <__aeabi_dsub>
    e202:	f805 6b01 	strb.w	r6, [r5], #1
    e206:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    e20a:	e9cd 0100 	strd	r0, r1, [sp]
    e20e:	f7ff fcff 	bl	dc10 <__aeabi_dcmplt>
    e212:	2800      	cmp	r0, #0
    e214:	d162      	bne.n	e2dc <_dtoa_r+0x5dc>
    e216:	2000      	movs	r0, #0
    e218:	4938      	ldr	r1, [pc, #224]	; (e2fc <_dtoa_r+0x5fc>)
    e21a:	e9dd 2300 	ldrd	r2, r3, [sp]
    e21e:	f7fe f803 	bl	c228 <__aeabi_dsub>
    e222:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    e226:	f7ff fcf3 	bl	dc10 <__aeabi_dcmplt>
    e22a:	2800      	cmp	r0, #0
    e22c:	f040 80b7 	bne.w	e39e <_dtoa_r+0x69e>
    e230:	eba5 030b 	sub.w	r3, r5, fp
    e234:	429f      	cmp	r7, r3
    e236:	f77f af7c 	ble.w	e132 <_dtoa_r+0x432>
    e23a:	2200      	movs	r2, #0
    e23c:	4b30      	ldr	r3, [pc, #192]	; (e300 <_dtoa_r+0x600>)
    e23e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    e242:	f7ff fa73 	bl	d72c <__aeabi_dmul>
    e246:	2200      	movs	r2, #0
    e248:	4b2d      	ldr	r3, [pc, #180]	; (e300 <_dtoa_r+0x600>)
    e24a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    e24e:	e9dd 0100 	ldrd	r0, r1, [sp]
    e252:	f7ff fa6b 	bl	d72c <__aeabi_dmul>
    e256:	e9cd 0100 	strd	r0, r1, [sp]
    e25a:	e7c4      	b.n	e1e6 <_dtoa_r+0x4e6>
    e25c:	462a      	mov	r2, r5
    e25e:	4633      	mov	r3, r6
    e260:	eb0b 0507 	add.w	r5, fp, r7
    e264:	465e      	mov	r6, fp
    e266:	f7ff fa61 	bl	d72c <__aeabi_dmul>
    e26a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    e26e:	e9dd 0100 	ldrd	r0, r1, [sp]
    e272:	f7ff fd0b 	bl	dc8c <__aeabi_d2iz>
    e276:	4607      	mov	r7, r0
    e278:	f7fe f924 	bl	c4c4 <__aeabi_i2d>
    e27c:	4602      	mov	r2, r0
    e27e:	3730      	adds	r7, #48	; 0x30
    e280:	460b      	mov	r3, r1
    e282:	e9dd 0100 	ldrd	r0, r1, [sp]
    e286:	f7fd ffcf 	bl	c228 <__aeabi_dsub>
    e28a:	f806 7b01 	strb.w	r7, [r6], #1
    e28e:	42ae      	cmp	r6, r5
    e290:	f04f 0200 	mov.w	r2, #0
    e294:	e9cd 0100 	strd	r0, r1, [sp]
    e298:	d125      	bne.n	e2e6 <_dtoa_r+0x5e6>
    e29a:	4b1c      	ldr	r3, [pc, #112]	; (e30c <_dtoa_r+0x60c>)
    e29c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    e2a0:	f7fd ffc4 	bl	c22c <__adddf3>
    e2a4:	4602      	mov	r2, r0
    e2a6:	460b      	mov	r3, r1
    e2a8:	e9dd 0100 	ldrd	r0, r1, [sp]
    e2ac:	f7ff fcce 	bl	dc4c <__aeabi_dcmpgt>
    e2b0:	2800      	cmp	r0, #0
    e2b2:	d174      	bne.n	e39e <_dtoa_r+0x69e>
    e2b4:	2000      	movs	r0, #0
    e2b6:	4915      	ldr	r1, [pc, #84]	; (e30c <_dtoa_r+0x60c>)
    e2b8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    e2bc:	f7fd ffb4 	bl	c228 <__aeabi_dsub>
    e2c0:	4602      	mov	r2, r0
    e2c2:	460b      	mov	r3, r1
    e2c4:	e9dd 0100 	ldrd	r0, r1, [sp]
    e2c8:	f7ff fca2 	bl	dc10 <__aeabi_dcmplt>
    e2cc:	2800      	cmp	r0, #0
    e2ce:	f43f af30 	beq.w	e132 <_dtoa_r+0x432>
    e2d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    e2d6:	1e6a      	subs	r2, r5, #1
    e2d8:	2b30      	cmp	r3, #48	; 0x30
    e2da:	d002      	beq.n	e2e2 <_dtoa_r+0x5e2>
    e2dc:	f8dd a020 	ldr.w	sl, [sp, #32]
    e2e0:	e04b      	b.n	e37a <_dtoa_r+0x67a>
    e2e2:	4615      	mov	r5, r2
    e2e4:	e7f5      	b.n	e2d2 <_dtoa_r+0x5d2>
    e2e6:	4b06      	ldr	r3, [pc, #24]	; (e300 <_dtoa_r+0x600>)
    e2e8:	f7ff fa20 	bl	d72c <__aeabi_dmul>
    e2ec:	e9cd 0100 	strd	r0, r1, [sp]
    e2f0:	e7bd      	b.n	e26e <_dtoa_r+0x56e>
    e2f2:	bf00      	nop
    e2f4:	00025940 	.word	0x00025940
    e2f8:	00025918 	.word	0x00025918
    e2fc:	3ff00000 	.word	0x3ff00000
    e300:	40240000 	.word	0x40240000
    e304:	401c0000 	.word	0x401c0000
    e308:	40140000 	.word	0x40140000
    e30c:	3fe00000 	.word	0x3fe00000
    e310:	e9dd 6700 	ldrd	r6, r7, [sp]
    e314:	465d      	mov	r5, fp
    e316:	4630      	mov	r0, r6
    e318:	4639      	mov	r1, r7
    e31a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    e31e:	f7ff fb2f 	bl	d980 <__aeabi_ddiv>
    e322:	f7ff fcb3 	bl	dc8c <__aeabi_d2iz>
    e326:	4680      	mov	r8, r0
    e328:	f7fe f8cc 	bl	c4c4 <__aeabi_i2d>
    e32c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    e330:	f7ff f9fc 	bl	d72c <__aeabi_dmul>
    e334:	4602      	mov	r2, r0
    e336:	4630      	mov	r0, r6
    e338:	f108 0630 	add.w	r6, r8, #48	; 0x30
    e33c:	460b      	mov	r3, r1
    e33e:	4639      	mov	r1, r7
    e340:	f7fd ff72 	bl	c228 <__aeabi_dsub>
    e344:	f805 6b01 	strb.w	r6, [r5], #1
    e348:	eba5 060b 	sub.w	r6, r5, fp
    e34c:	4602      	mov	r2, r0
    e34e:	460b      	mov	r3, r1
    e350:	45b1      	cmp	r9, r6
    e352:	d138      	bne.n	e3c6 <_dtoa_r+0x6c6>
    e354:	f7fd ff6a 	bl	c22c <__adddf3>
    e358:	4606      	mov	r6, r0
    e35a:	460f      	mov	r7, r1
    e35c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    e360:	f7ff fc74 	bl	dc4c <__aeabi_dcmpgt>
    e364:	b9c8      	cbnz	r0, e39a <_dtoa_r+0x69a>
    e366:	4630      	mov	r0, r6
    e368:	4639      	mov	r1, r7
    e36a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    e36e:	f7ff fc45 	bl	dbfc <__aeabi_dcmpeq>
    e372:	b110      	cbz	r0, e37a <_dtoa_r+0x67a>
    e374:	f018 0f01 	tst.w	r8, #1
    e378:	d10f      	bne.n	e39a <_dtoa_r+0x69a>
    e37a:	9904      	ldr	r1, [sp, #16]
    e37c:	4620      	mov	r0, r4
    e37e:	f016 fddb 	bl	24f38 <_Bfree>
    e382:	2300      	movs	r3, #0
    e384:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e386:	702b      	strb	r3, [r5, #0]
    e388:	f10a 0301 	add.w	r3, sl, #1
    e38c:	6013      	str	r3, [r2, #0]
    e38e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    e390:	2b00      	cmp	r3, #0
    e392:	f000 823d 	beq.w	e810 <_dtoa_r+0xb10>
    e396:	601d      	str	r5, [r3, #0]
    e398:	e23a      	b.n	e810 <_dtoa_r+0xb10>
    e39a:	f8cd a020 	str.w	sl, [sp, #32]
    e39e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    e3a2:	1e6b      	subs	r3, r5, #1
    e3a4:	2a39      	cmp	r2, #57	; 0x39
    e3a6:	d108      	bne.n	e3ba <_dtoa_r+0x6ba>
    e3a8:	459b      	cmp	fp, r3
    e3aa:	d10a      	bne.n	e3c2 <_dtoa_r+0x6c2>
    e3ac:	9b08      	ldr	r3, [sp, #32]
    e3ae:	3301      	adds	r3, #1
    e3b0:	9308      	str	r3, [sp, #32]
    e3b2:	2330      	movs	r3, #48	; 0x30
    e3b4:	f88b 3000 	strb.w	r3, [fp]
    e3b8:	465b      	mov	r3, fp
    e3ba:	781a      	ldrb	r2, [r3, #0]
    e3bc:	3201      	adds	r2, #1
    e3be:	701a      	strb	r2, [r3, #0]
    e3c0:	e78c      	b.n	e2dc <_dtoa_r+0x5dc>
    e3c2:	461d      	mov	r5, r3
    e3c4:	e7eb      	b.n	e39e <_dtoa_r+0x69e>
    e3c6:	2200      	movs	r2, #0
    e3c8:	4b9a      	ldr	r3, [pc, #616]	; (e634 <_dtoa_r+0x934>)
    e3ca:	f7ff f9af 	bl	d72c <__aeabi_dmul>
    e3ce:	2200      	movs	r2, #0
    e3d0:	2300      	movs	r3, #0
    e3d2:	4606      	mov	r6, r0
    e3d4:	460f      	mov	r7, r1
    e3d6:	f7ff fc11 	bl	dbfc <__aeabi_dcmpeq>
    e3da:	2800      	cmp	r0, #0
    e3dc:	d09b      	beq.n	e316 <_dtoa_r+0x616>
    e3de:	e7cc      	b.n	e37a <_dtoa_r+0x67a>
    e3e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e3e2:	2a00      	cmp	r2, #0
    e3e4:	f000 808b 	beq.w	e4fe <_dtoa_r+0x7fe>
    e3e8:	9a06      	ldr	r2, [sp, #24]
    e3ea:	2a01      	cmp	r2, #1
    e3ec:	dc6e      	bgt.n	e4cc <_dtoa_r+0x7cc>
    e3ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e3f0:	2a00      	cmp	r2, #0
    e3f2:	d067      	beq.n	e4c4 <_dtoa_r+0x7c4>
    e3f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
    e3f8:	9f07      	ldr	r7, [sp, #28]
    e3fa:	9d05      	ldr	r5, [sp, #20]
    e3fc:	9a05      	ldr	r2, [sp, #20]
    e3fe:	2101      	movs	r1, #1
    e400:	4620      	mov	r0, r4
    e402:	4498      	add	r8, r3
    e404:	441a      	add	r2, r3
    e406:	9205      	str	r2, [sp, #20]
    e408:	f016 fe38 	bl	2507c <__i2b>
    e40c:	4606      	mov	r6, r0
    e40e:	2d00      	cmp	r5, #0
    e410:	dd0c      	ble.n	e42c <_dtoa_r+0x72c>
    e412:	f1b8 0f00 	cmp.w	r8, #0
    e416:	dd09      	ble.n	e42c <_dtoa_r+0x72c>
    e418:	4545      	cmp	r5, r8
    e41a:	462b      	mov	r3, r5
    e41c:	9a05      	ldr	r2, [sp, #20]
    e41e:	bfa8      	it	ge
    e420:	4643      	movge	r3, r8
    e422:	1ad2      	subs	r2, r2, r3
    e424:	1aed      	subs	r5, r5, r3
    e426:	eba8 0803 	sub.w	r8, r8, r3
    e42a:	9205      	str	r2, [sp, #20]
    e42c:	9b07      	ldr	r3, [sp, #28]
    e42e:	b1eb      	cbz	r3, e46c <_dtoa_r+0x76c>
    e430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e432:	2b00      	cmp	r3, #0
    e434:	d067      	beq.n	e506 <_dtoa_r+0x806>
    e436:	b18f      	cbz	r7, e45c <_dtoa_r+0x75c>
    e438:	4631      	mov	r1, r6
    e43a:	463a      	mov	r2, r7
    e43c:	4620      	mov	r0, r4
    e43e:	f013 ffd7 	bl	223f0 <__pow5mult>
    e442:	9a04      	ldr	r2, [sp, #16]
    e444:	4601      	mov	r1, r0
    e446:	4606      	mov	r6, r0
    e448:	4620      	mov	r0, r4
    e44a:	f016 fe20 	bl	2508e <__multiply>
    e44e:	9904      	ldr	r1, [sp, #16]
    e450:	9008      	str	r0, [sp, #32]
    e452:	4620      	mov	r0, r4
    e454:	f016 fd70 	bl	24f38 <_Bfree>
    e458:	9b08      	ldr	r3, [sp, #32]
    e45a:	9304      	str	r3, [sp, #16]
    e45c:	9b07      	ldr	r3, [sp, #28]
    e45e:	1bda      	subs	r2, r3, r7
    e460:	d004      	beq.n	e46c <_dtoa_r+0x76c>
    e462:	9904      	ldr	r1, [sp, #16]
    e464:	4620      	mov	r0, r4
    e466:	f013 ffc3 	bl	223f0 <__pow5mult>
    e46a:	9004      	str	r0, [sp, #16]
    e46c:	2101      	movs	r1, #1
    e46e:	4620      	mov	r0, r4
    e470:	f016 fe04 	bl	2507c <__i2b>
    e474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e476:	4607      	mov	r7, r0
    e478:	2b00      	cmp	r3, #0
    e47a:	f000 81cd 	beq.w	e818 <_dtoa_r+0xb18>
    e47e:	461a      	mov	r2, r3
    e480:	4601      	mov	r1, r0
    e482:	4620      	mov	r0, r4
    e484:	f013 ffb4 	bl	223f0 <__pow5mult>
    e488:	9b06      	ldr	r3, [sp, #24]
    e48a:	4607      	mov	r7, r0
    e48c:	2b01      	cmp	r3, #1
    e48e:	dc40      	bgt.n	e512 <_dtoa_r+0x812>
    e490:	9b00      	ldr	r3, [sp, #0]
    e492:	2b00      	cmp	r3, #0
    e494:	d139      	bne.n	e50a <_dtoa_r+0x80a>
    e496:	9b01      	ldr	r3, [sp, #4]
    e498:	f3c3 0313 	ubfx	r3, r3, #0, #20
    e49c:	2b00      	cmp	r3, #0
    e49e:	d136      	bne.n	e50e <_dtoa_r+0x80e>
    e4a0:	9b01      	ldr	r3, [sp, #4]
    e4a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    e4a6:	0d1b      	lsrs	r3, r3, #20
    e4a8:	051b      	lsls	r3, r3, #20
    e4aa:	b12b      	cbz	r3, e4b8 <_dtoa_r+0x7b8>
    e4ac:	9b05      	ldr	r3, [sp, #20]
    e4ae:	f108 0801 	add.w	r8, r8, #1
    e4b2:	3301      	adds	r3, #1
    e4b4:	9305      	str	r3, [sp, #20]
    e4b6:	2301      	movs	r3, #1
    e4b8:	9307      	str	r3, [sp, #28]
    e4ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e4bc:	2b00      	cmp	r3, #0
    e4be:	d12a      	bne.n	e516 <_dtoa_r+0x816>
    e4c0:	2001      	movs	r0, #1
    e4c2:	e030      	b.n	e526 <_dtoa_r+0x826>
    e4c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e4c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    e4ca:	e795      	b.n	e3f8 <_dtoa_r+0x6f8>
    e4cc:	9b07      	ldr	r3, [sp, #28]
    e4ce:	f109 37ff 	add.w	r7, r9, #4294967295
    e4d2:	42bb      	cmp	r3, r7
    e4d4:	bfb7      	itett	lt
    e4d6:	9b07      	ldrlt	r3, [sp, #28]
    e4d8:	1bdf      	subge	r7, r3, r7
    e4da:	9707      	strlt	r7, [sp, #28]
    e4dc:	1afa      	sublt	r2, r7, r3
    e4de:	bfbf      	itttt	lt
    e4e0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    e4e2:	2700      	movlt	r7, #0
    e4e4:	189b      	addlt	r3, r3, r2
    e4e6:	930e      	strlt	r3, [sp, #56]	; 0x38
    e4e8:	f1b9 0f00 	cmp.w	r9, #0
    e4ec:	bfb3      	iteet	lt
    e4ee:	9b05      	ldrlt	r3, [sp, #20]
    e4f0:	464b      	movge	r3, r9
    e4f2:	9d05      	ldrge	r5, [sp, #20]
    e4f4:	eba3 0509 	sublt.w	r5, r3, r9
    e4f8:	bfb8      	it	lt
    e4fa:	2300      	movlt	r3, #0
    e4fc:	e77e      	b.n	e3fc <_dtoa_r+0x6fc>
    e4fe:	9f07      	ldr	r7, [sp, #28]
    e500:	9d05      	ldr	r5, [sp, #20]
    e502:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    e504:	e783      	b.n	e40e <_dtoa_r+0x70e>
    e506:	9a07      	ldr	r2, [sp, #28]
    e508:	e7ab      	b.n	e462 <_dtoa_r+0x762>
    e50a:	2300      	movs	r3, #0
    e50c:	e7d4      	b.n	e4b8 <_dtoa_r+0x7b8>
    e50e:	9b00      	ldr	r3, [sp, #0]
    e510:	e7d2      	b.n	e4b8 <_dtoa_r+0x7b8>
    e512:	2300      	movs	r3, #0
    e514:	9307      	str	r3, [sp, #28]
    e516:	693b      	ldr	r3, [r7, #16]
    e518:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    e51c:	6918      	ldr	r0, [r3, #16]
    e51e:	f016 fd5f 	bl	24fe0 <__hi0bits>
    e522:	f1c0 0020 	rsb	r0, r0, #32
    e526:	4440      	add	r0, r8
    e528:	f010 001f 	ands.w	r0, r0, #31
    e52c:	d047      	beq.n	e5be <_dtoa_r+0x8be>
    e52e:	f1c0 0320 	rsb	r3, r0, #32
    e532:	2b04      	cmp	r3, #4
    e534:	dd3b      	ble.n	e5ae <_dtoa_r+0x8ae>
    e536:	f1c0 001c 	rsb	r0, r0, #28
    e53a:	9b05      	ldr	r3, [sp, #20]
    e53c:	4405      	add	r5, r0
    e53e:	4403      	add	r3, r0
    e540:	4480      	add	r8, r0
    e542:	9305      	str	r3, [sp, #20]
    e544:	9b05      	ldr	r3, [sp, #20]
    e546:	2b00      	cmp	r3, #0
    e548:	dd05      	ble.n	e556 <_dtoa_r+0x856>
    e54a:	461a      	mov	r2, r3
    e54c:	9904      	ldr	r1, [sp, #16]
    e54e:	4620      	mov	r0, r4
    e550:	f016 fe32 	bl	251b8 <__lshift>
    e554:	9004      	str	r0, [sp, #16]
    e556:	f1b8 0f00 	cmp.w	r8, #0
    e55a:	dd05      	ble.n	e568 <_dtoa_r+0x868>
    e55c:	4639      	mov	r1, r7
    e55e:	4642      	mov	r2, r8
    e560:	4620      	mov	r0, r4
    e562:	f016 fe29 	bl	251b8 <__lshift>
    e566:	4607      	mov	r7, r0
    e568:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e56a:	b353      	cbz	r3, e5c2 <_dtoa_r+0x8c2>
    e56c:	4639      	mov	r1, r7
    e56e:	9804      	ldr	r0, [sp, #16]
    e570:	f016 fe76 	bl	25260 <__mcmp>
    e574:	2800      	cmp	r0, #0
    e576:	da24      	bge.n	e5c2 <_dtoa_r+0x8c2>
    e578:	2300      	movs	r3, #0
    e57a:	220a      	movs	r2, #10
    e57c:	9904      	ldr	r1, [sp, #16]
    e57e:	4620      	mov	r0, r4
    e580:	f016 fcf1 	bl	24f66 <__multadd>
    e584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e586:	f10a 3aff 	add.w	sl, sl, #4294967295
    e58a:	9004      	str	r0, [sp, #16]
    e58c:	2b00      	cmp	r3, #0
    e58e:	f000 814a 	beq.w	e826 <_dtoa_r+0xb26>
    e592:	2300      	movs	r3, #0
    e594:	4631      	mov	r1, r6
    e596:	220a      	movs	r2, #10
    e598:	4620      	mov	r0, r4
    e59a:	f016 fce4 	bl	24f66 <__multadd>
    e59e:	9b02      	ldr	r3, [sp, #8]
    e5a0:	4606      	mov	r6, r0
    e5a2:	2b00      	cmp	r3, #0
    e5a4:	dc4e      	bgt.n	e644 <_dtoa_r+0x944>
    e5a6:	9b06      	ldr	r3, [sp, #24]
    e5a8:	2b02      	cmp	r3, #2
    e5aa:	dd4b      	ble.n	e644 <_dtoa_r+0x944>
    e5ac:	e011      	b.n	e5d2 <_dtoa_r+0x8d2>
    e5ae:	d0c9      	beq.n	e544 <_dtoa_r+0x844>
    e5b0:	331c      	adds	r3, #28
    e5b2:	9a05      	ldr	r2, [sp, #20]
    e5b4:	441a      	add	r2, r3
    e5b6:	441d      	add	r5, r3
    e5b8:	4498      	add	r8, r3
    e5ba:	9205      	str	r2, [sp, #20]
    e5bc:	e7c2      	b.n	e544 <_dtoa_r+0x844>
    e5be:	4603      	mov	r3, r0
    e5c0:	e7f6      	b.n	e5b0 <_dtoa_r+0x8b0>
    e5c2:	f1b9 0f00 	cmp.w	r9, #0
    e5c6:	dc37      	bgt.n	e638 <_dtoa_r+0x938>
    e5c8:	9b06      	ldr	r3, [sp, #24]
    e5ca:	2b02      	cmp	r3, #2
    e5cc:	dd34      	ble.n	e638 <_dtoa_r+0x938>
    e5ce:	f8cd 9008 	str.w	r9, [sp, #8]
    e5d2:	9b02      	ldr	r3, [sp, #8]
    e5d4:	b963      	cbnz	r3, e5f0 <_dtoa_r+0x8f0>
    e5d6:	4639      	mov	r1, r7
    e5d8:	2205      	movs	r2, #5
    e5da:	4620      	mov	r0, r4
    e5dc:	f016 fcc3 	bl	24f66 <__multadd>
    e5e0:	4601      	mov	r1, r0
    e5e2:	4607      	mov	r7, r0
    e5e4:	9804      	ldr	r0, [sp, #16]
    e5e6:	f016 fe3b 	bl	25260 <__mcmp>
    e5ea:	2800      	cmp	r0, #0
    e5ec:	f73f adcd 	bgt.w	e18a <_dtoa_r+0x48a>
    e5f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e5f2:	465d      	mov	r5, fp
    e5f4:	ea6f 0a03 	mvn.w	sl, r3
    e5f8:	f04f 0900 	mov.w	r9, #0
    e5fc:	4639      	mov	r1, r7
    e5fe:	4620      	mov	r0, r4
    e600:	f016 fc9a 	bl	24f38 <_Bfree>
    e604:	2e00      	cmp	r6, #0
    e606:	f43f aeb8 	beq.w	e37a <_dtoa_r+0x67a>
    e60a:	f1b9 0f00 	cmp.w	r9, #0
    e60e:	d005      	beq.n	e61c <_dtoa_r+0x91c>
    e610:	45b1      	cmp	r9, r6
    e612:	d003      	beq.n	e61c <_dtoa_r+0x91c>
    e614:	4649      	mov	r1, r9
    e616:	4620      	mov	r0, r4
    e618:	f016 fc8e 	bl	24f38 <_Bfree>
    e61c:	4631      	mov	r1, r6
    e61e:	4620      	mov	r0, r4
    e620:	f016 fc8a 	bl	24f38 <_Bfree>
    e624:	e6a9      	b.n	e37a <_dtoa_r+0x67a>
    e626:	2700      	movs	r7, #0
    e628:	463e      	mov	r6, r7
    e62a:	e7e1      	b.n	e5f0 <_dtoa_r+0x8f0>
    e62c:	f8dd a020 	ldr.w	sl, [sp, #32]
    e630:	463e      	mov	r6, r7
    e632:	e5aa      	b.n	e18a <_dtoa_r+0x48a>
    e634:	40240000 	.word	0x40240000
    e638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e63a:	f8cd 9008 	str.w	r9, [sp, #8]
    e63e:	2b00      	cmp	r3, #0
    e640:	f000 80f8 	beq.w	e834 <_dtoa_r+0xb34>
    e644:	2d00      	cmp	r5, #0
    e646:	dd05      	ble.n	e654 <_dtoa_r+0x954>
    e648:	4631      	mov	r1, r6
    e64a:	462a      	mov	r2, r5
    e64c:	4620      	mov	r0, r4
    e64e:	f016 fdb3 	bl	251b8 <__lshift>
    e652:	4606      	mov	r6, r0
    e654:	9b07      	ldr	r3, [sp, #28]
    e656:	2b00      	cmp	r3, #0
    e658:	d04c      	beq.n	e6f4 <_dtoa_r+0x9f4>
    e65a:	6871      	ldr	r1, [r6, #4]
    e65c:	4620      	mov	r0, r4
    e65e:	f016 fc37 	bl	24ed0 <_Balloc>
    e662:	6932      	ldr	r2, [r6, #16]
    e664:	4605      	mov	r5, r0
    e666:	f106 010c 	add.w	r1, r6, #12
    e66a:	3202      	adds	r2, #2
    e66c:	300c      	adds	r0, #12
    e66e:	0092      	lsls	r2, r2, #2
    e670:	f016 f907 	bl	24882 <memcpy>
    e674:	2201      	movs	r2, #1
    e676:	4629      	mov	r1, r5
    e678:	4620      	mov	r0, r4
    e67a:	f016 fd9d 	bl	251b8 <__lshift>
    e67e:	9b00      	ldr	r3, [sp, #0]
    e680:	46b1      	mov	r9, r6
    e682:	4606      	mov	r6, r0
    e684:	f8cd b014 	str.w	fp, [sp, #20]
    e688:	f003 0301 	and.w	r3, r3, #1
    e68c:	9307      	str	r3, [sp, #28]
    e68e:	4639      	mov	r1, r7
    e690:	9804      	ldr	r0, [sp, #16]
    e692:	f016 fb1c 	bl	24cce <quorem>
    e696:	4649      	mov	r1, r9
    e698:	4605      	mov	r5, r0
    e69a:	f100 0830 	add.w	r8, r0, #48	; 0x30
    e69e:	9804      	ldr	r0, [sp, #16]
    e6a0:	f016 fdde 	bl	25260 <__mcmp>
    e6a4:	4632      	mov	r2, r6
    e6a6:	9000      	str	r0, [sp, #0]
    e6a8:	4639      	mov	r1, r7
    e6aa:	4620      	mov	r0, r4
    e6ac:	f016 fdf2 	bl	25294 <__mdiff>
    e6b0:	68c3      	ldr	r3, [r0, #12]
    e6b2:	4602      	mov	r2, r0
    e6b4:	bb03      	cbnz	r3, e6f8 <_dtoa_r+0x9f8>
    e6b6:	4601      	mov	r1, r0
    e6b8:	9008      	str	r0, [sp, #32]
    e6ba:	9804      	ldr	r0, [sp, #16]
    e6bc:	f016 fdd0 	bl	25260 <__mcmp>
    e6c0:	9a08      	ldr	r2, [sp, #32]
    e6c2:	4603      	mov	r3, r0
    e6c4:	4611      	mov	r1, r2
    e6c6:	4620      	mov	r0, r4
    e6c8:	9308      	str	r3, [sp, #32]
    e6ca:	f016 fc35 	bl	24f38 <_Bfree>
    e6ce:	9b08      	ldr	r3, [sp, #32]
    e6d0:	b9a3      	cbnz	r3, e6fc <_dtoa_r+0x9fc>
    e6d2:	9a06      	ldr	r2, [sp, #24]
    e6d4:	b992      	cbnz	r2, e6fc <_dtoa_r+0x9fc>
    e6d6:	9a07      	ldr	r2, [sp, #28]
    e6d8:	b982      	cbnz	r2, e6fc <_dtoa_r+0x9fc>
    e6da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
    e6de:	d029      	beq.n	e734 <_dtoa_r+0xa34>
    e6e0:	9b00      	ldr	r3, [sp, #0]
    e6e2:	2b00      	cmp	r3, #0
    e6e4:	dd01      	ble.n	e6ea <_dtoa_r+0x9ea>
    e6e6:	f105 0831 	add.w	r8, r5, #49	; 0x31
    e6ea:	9b05      	ldr	r3, [sp, #20]
    e6ec:	1c5d      	adds	r5, r3, #1
    e6ee:	f883 8000 	strb.w	r8, [r3]
    e6f2:	e783      	b.n	e5fc <_dtoa_r+0x8fc>
    e6f4:	4630      	mov	r0, r6
    e6f6:	e7c2      	b.n	e67e <_dtoa_r+0x97e>
    e6f8:	2301      	movs	r3, #1
    e6fa:	e7e3      	b.n	e6c4 <_dtoa_r+0x9c4>
    e6fc:	9a00      	ldr	r2, [sp, #0]
    e6fe:	2a00      	cmp	r2, #0
    e700:	db04      	blt.n	e70c <_dtoa_r+0xa0c>
    e702:	d124      	bne.n	e74e <_dtoa_r+0xa4e>
    e704:	9a06      	ldr	r2, [sp, #24]
    e706:	bb12      	cbnz	r2, e74e <_dtoa_r+0xa4e>
    e708:	9a07      	ldr	r2, [sp, #28]
    e70a:	bb02      	cbnz	r2, e74e <_dtoa_r+0xa4e>
    e70c:	2b00      	cmp	r3, #0
    e70e:	ddec      	ble.n	e6ea <_dtoa_r+0x9ea>
    e710:	2201      	movs	r2, #1
    e712:	9904      	ldr	r1, [sp, #16]
    e714:	4620      	mov	r0, r4
    e716:	f016 fd4f 	bl	251b8 <__lshift>
    e71a:	4639      	mov	r1, r7
    e71c:	9004      	str	r0, [sp, #16]
    e71e:	f016 fd9f 	bl	25260 <__mcmp>
    e722:	2800      	cmp	r0, #0
    e724:	dc03      	bgt.n	e72e <_dtoa_r+0xa2e>
    e726:	d1e0      	bne.n	e6ea <_dtoa_r+0x9ea>
    e728:	f018 0f01 	tst.w	r8, #1
    e72c:	d0dd      	beq.n	e6ea <_dtoa_r+0x9ea>
    e72e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
    e732:	d1d8      	bne.n	e6e6 <_dtoa_r+0x9e6>
    e734:	9b05      	ldr	r3, [sp, #20]
    e736:	9a05      	ldr	r2, [sp, #20]
    e738:	1c5d      	adds	r5, r3, #1
    e73a:	2339      	movs	r3, #57	; 0x39
    e73c:	7013      	strb	r3, [r2, #0]
    e73e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    e742:	1e6a      	subs	r2, r5, #1
    e744:	2b39      	cmp	r3, #57	; 0x39
    e746:	d04e      	beq.n	e7e6 <_dtoa_r+0xae6>
    e748:	3301      	adds	r3, #1
    e74a:	7013      	strb	r3, [r2, #0]
    e74c:	e756      	b.n	e5fc <_dtoa_r+0x8fc>
    e74e:	9a05      	ldr	r2, [sp, #20]
    e750:	2b00      	cmp	r3, #0
    e752:	f102 0501 	add.w	r5, r2, #1
    e756:	dd06      	ble.n	e766 <_dtoa_r+0xa66>
    e758:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
    e75c:	d0ea      	beq.n	e734 <_dtoa_r+0xa34>
    e75e:	f108 0801 	add.w	r8, r8, #1
    e762:	9b05      	ldr	r3, [sp, #20]
    e764:	e7c3      	b.n	e6ee <_dtoa_r+0x9ee>
    e766:	eba5 030b 	sub.w	r3, r5, fp
    e76a:	9a02      	ldr	r2, [sp, #8]
    e76c:	f805 8c01 	strb.w	r8, [r5, #-1]
    e770:	4293      	cmp	r3, r2
    e772:	d021      	beq.n	e7b8 <_dtoa_r+0xab8>
    e774:	2300      	movs	r3, #0
    e776:	220a      	movs	r2, #10
    e778:	9904      	ldr	r1, [sp, #16]
    e77a:	4620      	mov	r0, r4
    e77c:	f016 fbf3 	bl	24f66 <__multadd>
    e780:	45b1      	cmp	r9, r6
    e782:	9004      	str	r0, [sp, #16]
    e784:	f04f 0300 	mov.w	r3, #0
    e788:	f04f 020a 	mov.w	r2, #10
    e78c:	4649      	mov	r1, r9
    e78e:	4620      	mov	r0, r4
    e790:	d105      	bne.n	e79e <_dtoa_r+0xa9e>
    e792:	f016 fbe8 	bl	24f66 <__multadd>
    e796:	4681      	mov	r9, r0
    e798:	4606      	mov	r6, r0
    e79a:	9505      	str	r5, [sp, #20]
    e79c:	e777      	b.n	e68e <_dtoa_r+0x98e>
    e79e:	f016 fbe2 	bl	24f66 <__multadd>
    e7a2:	4631      	mov	r1, r6
    e7a4:	4681      	mov	r9, r0
    e7a6:	2300      	movs	r3, #0
    e7a8:	220a      	movs	r2, #10
    e7aa:	4620      	mov	r0, r4
    e7ac:	f016 fbdb 	bl	24f66 <__multadd>
    e7b0:	4606      	mov	r6, r0
    e7b2:	e7f2      	b.n	e79a <_dtoa_r+0xa9a>
    e7b4:	f04f 0900 	mov.w	r9, #0
    e7b8:	2201      	movs	r2, #1
    e7ba:	9904      	ldr	r1, [sp, #16]
    e7bc:	4620      	mov	r0, r4
    e7be:	f016 fcfb 	bl	251b8 <__lshift>
    e7c2:	4639      	mov	r1, r7
    e7c4:	9004      	str	r0, [sp, #16]
    e7c6:	f016 fd4b 	bl	25260 <__mcmp>
    e7ca:	2800      	cmp	r0, #0
    e7cc:	dcb7      	bgt.n	e73e <_dtoa_r+0xa3e>
    e7ce:	d102      	bne.n	e7d6 <_dtoa_r+0xad6>
    e7d0:	f018 0f01 	tst.w	r8, #1
    e7d4:	d1b3      	bne.n	e73e <_dtoa_r+0xa3e>
    e7d6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    e7da:	1e6a      	subs	r2, r5, #1
    e7dc:	2b30      	cmp	r3, #48	; 0x30
    e7de:	f47f af0d 	bne.w	e5fc <_dtoa_r+0x8fc>
    e7e2:	4615      	mov	r5, r2
    e7e4:	e7f7      	b.n	e7d6 <_dtoa_r+0xad6>
    e7e6:	4593      	cmp	fp, r2
    e7e8:	d105      	bne.n	e7f6 <_dtoa_r+0xaf6>
    e7ea:	2331      	movs	r3, #49	; 0x31
    e7ec:	f10a 0a01 	add.w	sl, sl, #1
    e7f0:	f88b 3000 	strb.w	r3, [fp]
    e7f4:	e702      	b.n	e5fc <_dtoa_r+0x8fc>
    e7f6:	4615      	mov	r5, r2
    e7f8:	e7a1      	b.n	e73e <_dtoa_r+0xa3e>
    e7fa:	f8df b064 	ldr.w	fp, [pc, #100]	; e860 <_dtoa_r+0xb60>
    e7fe:	e007      	b.n	e810 <_dtoa_r+0xb10>
    e800:	9b21      	ldr	r3, [sp, #132]	; 0x84
    e802:	f8df b060 	ldr.w	fp, [pc, #96]	; e864 <_dtoa_r+0xb64>
    e806:	b11b      	cbz	r3, e810 <_dtoa_r+0xb10>
    e808:	f10b 0308 	add.w	r3, fp, #8
    e80c:	9a21      	ldr	r2, [sp, #132]	; 0x84
    e80e:	6013      	str	r3, [r2, #0]
    e810:	4658      	mov	r0, fp
    e812:	b017      	add	sp, #92	; 0x5c
    e814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e818:	9b06      	ldr	r3, [sp, #24]
    e81a:	2b01      	cmp	r3, #1
    e81c:	f77f ae38 	ble.w	e490 <_dtoa_r+0x790>
    e820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e822:	9307      	str	r3, [sp, #28]
    e824:	e64c      	b.n	e4c0 <_dtoa_r+0x7c0>
    e826:	9b02      	ldr	r3, [sp, #8]
    e828:	2b00      	cmp	r3, #0
    e82a:	dc03      	bgt.n	e834 <_dtoa_r+0xb34>
    e82c:	9b06      	ldr	r3, [sp, #24]
    e82e:	2b02      	cmp	r3, #2
    e830:	f73f aecf 	bgt.w	e5d2 <_dtoa_r+0x8d2>
    e834:	465d      	mov	r5, fp
    e836:	4639      	mov	r1, r7
    e838:	9804      	ldr	r0, [sp, #16]
    e83a:	f016 fa48 	bl	24cce <quorem>
    e83e:	f100 0830 	add.w	r8, r0, #48	; 0x30
    e842:	9a02      	ldr	r2, [sp, #8]
    e844:	f805 8b01 	strb.w	r8, [r5], #1
    e848:	eba5 030b 	sub.w	r3, r5, fp
    e84c:	429a      	cmp	r2, r3
    e84e:	ddb1      	ble.n	e7b4 <_dtoa_r+0xab4>
    e850:	2300      	movs	r3, #0
    e852:	220a      	movs	r2, #10
    e854:	9904      	ldr	r1, [sp, #16]
    e856:	4620      	mov	r0, r4
    e858:	f016 fb85 	bl	24f66 <__multadd>
    e85c:	9004      	str	r0, [sp, #16]
    e85e:	e7ea      	b.n	e836 <_dtoa_r+0xb36>
    e860:	000270aa 	.word	0x000270aa
    e864:	00027aaa 	.word	0x00027aaa

0000e868 <close>:
static inline int close(int sock)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->close);

	return socket_ops->close(sock);
    e868:	4b01      	ldr	r3, [pc, #4]	; (e870 <close+0x8>)
    e86a:	681b      	ldr	r3, [r3, #0]
    e86c:	685b      	ldr	r3, [r3, #4]
    e86e:	4718      	bx	r3
    e870:	20020238 	.word	0x20020238

0000e874 <print_satellite_stats>:

static void print_satellite_stats(nrf_gnss_data_frame_t *pvt_data)
{
	u8_t  tracked          = 0;
	u8_t  in_fix           = 0;
	u8_t  unhealthy        = 0;
    e874:	2300      	movs	r3, #0
	u8_t  in_fix           = 0;
    e876:	461a      	mov	r2, r3
	u8_t  tracked          = 0;
    e878:	4619      	mov	r1, r3
{
    e87a:	b570      	push	{r4, r5, r6, lr}
    e87c:	f100 0590 	add.w	r5, r0, #144	; 0x90

	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {

		if ((pvt_data->pvt.sv[i].sv > 0) &&
    e880:	f8b0 4046 	ldrh.w	r4, [r0, #70]	; 0x46
    e884:	3c01      	subs	r4, #1
    e886:	2c1f      	cmp	r4, #31
    e888:	d80c      	bhi.n	e8a4 <print_satellite_stats+0x30>
		    (pvt_data->pvt.sv[i].sv < 33)) {

			tracked++;

			if (pvt_data->pvt.sv[i].flags &
    e88a:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
			tracked++;
    e88e:	3101      	adds	r1, #1
			if (pvt_data->pvt.sv[i].flags &
    e890:	07a6      	lsls	r6, r4, #30
					NRF_GNSS_SV_FLAG_USED_IN_FIX) {
				in_fix++;
    e892:	bf44      	itt	mi
    e894:	3201      	addmi	r2, #1
    e896:	b2d2      	uxtbmi	r2, r2
			}

			if (pvt_data->pvt.sv[i].flags &
    e898:	0724      	lsls	r4, r4, #28
					NRF_GNSS_SV_FLAG_UNHEALTHY) {
				unhealthy++;
    e89a:	bf48      	it	mi
    e89c:	3301      	addmi	r3, #1
			tracked++;
    e89e:	b2c9      	uxtb	r1, r1
				unhealthy++;
    e8a0:	bf48      	it	mi
    e8a2:	b2db      	uxtbmi	r3, r3
    e8a4:	300c      	adds	r0, #12
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
    e8a6:	4285      	cmp	r5, r0
    e8a8:	d1ea      	bne.n	e880 <print_satellite_stats+0xc>
			}
		}
	}

	printk("Tracking: %d Using: %d Unhealthy: %d", tracked,
    e8aa:	480c      	ldr	r0, [pc, #48]	; (e8dc <print_satellite_stats+0x68>)
    e8ac:	f014 fb8c 	bl	22fc8 <printk>
		(void)z_arch_syscall_invoke1((u32_t)&ret64, K_SYSCALL_K_UPTIME_GET);
		return (s64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_get();
    e8b0:	f015 ff45 	bl	2473e <z_impl_k_uptime_get>
						       in_fix,
						       unhealthy);

	printk("\nSeconds since last fix %lld\n",
			(k_uptime_get() - fix_timestamp) / 1000);
    e8b4:	4b0a      	ldr	r3, [pc, #40]	; (e8e0 <print_satellite_stats+0x6c>)
	printk("\nSeconds since last fix %lld\n",
    e8b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
			(k_uptime_get() - fix_timestamp) / 1000);
    e8ba:	e9d3 4500 	ldrd	r4, r5, [r3]
	printk("\nSeconds since last fix %lld\n",
    e8be:	1b00      	subs	r0, r0, r4
    e8c0:	f04f 0300 	mov.w	r3, #0
    e8c4:	eb61 0105 	sbc.w	r1, r1, r5
    e8c8:	f7fd feb6 	bl	c638 <__aeabi_uldivmod>
}
    e8cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printk("\nSeconds since last fix %lld\n",
    e8d0:	4602      	mov	r2, r0
    e8d2:	460b      	mov	r3, r1
    e8d4:	4803      	ldr	r0, [pc, #12]	; (e8e4 <print_satellite_stats+0x70>)
    e8d6:	f014 bb77 	b.w	22fc8 <printk>
    e8da:	bf00      	nop
    e8dc:	00027059 	.word	0x00027059
    e8e0:	20020000 	.word	0x20020000
    e8e4:	0002707e 	.word	0x0002707e

0000e8e8 <bsd_recoverable_error_handler>:
	printf("Err: %lu\n", (unsigned long)error);
    e8e8:	4601      	mov	r1, r0
    e8ea:	4801      	ldr	r0, [pc, #4]	; (e8f0 <bsd_recoverable_error_handler+0x8>)
    e8ec:	f013 bac4 	b.w	21e78 <iprintf>
    e8f0:	00026e70 	.word	0x00026e70

0000e8f4 <process_gps_data>:
		printk("%s\n", nmea_strings[i]);
	}
}

int process_gps_data(nrf_gnss_data_frame_t *gps_data)
{
    e8f4:	b538      	push	{r3, r4, r5, lr}
	int retval;

	retval = nrf_recv(fd, gps_data, sizeof(nrf_gnss_data_frame_t), NRF_MSG_DONTWAIT);
    e8f6:	4601      	mov	r1, r0
{
    e8f8:	4604      	mov	r4, r0
	retval = nrf_recv(fd, gps_data, sizeof(nrf_gnss_data_frame_t), NRF_MSG_DONTWAIT);
    e8fa:	481a      	ldr	r0, [pc, #104]	; (e964 <process_gps_data+0x70>)
    e8fc:	2302      	movs	r3, #2
    e8fe:	22d8      	movs	r2, #216	; 0xd8
    e900:	6800      	ldr	r0, [r0, #0]
    e902:	f004 f863 	bl	129cc <nrf_recv>

	if (retval > 0) {
    e906:	1e05      	subs	r5, r0, #0
    e908:	dd04      	ble.n	e914 <process_gps_data+0x20>

		switch (gps_data->data_id) {
    e90a:	7823      	ldrb	r3, [r4, #0]
    e90c:	2b01      	cmp	r3, #1
    e90e:	d003      	beq.n	e918 <process_gps_data+0x24>
    e910:	2b02      	cmp	r3, #2
    e912:	d017      	beq.n	e944 <process_gps_data+0x50>
			break;
		}
	}

	return retval;
}
    e914:	4628      	mov	r0, r5
    e916:	bd38      	pop	{r3, r4, r5, pc}
			if ((gps_data->pvt.flags &
    e918:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    e91c:	07d2      	lsls	r2, r2, #31
    e91e:	d5f9      	bpl.n	e914 <process_gps_data+0x20>
				if (!got_first_fix) {
    e920:	4a11      	ldr	r2, [pc, #68]	; (e968 <process_gps_data+0x74>)
    e922:	7811      	ldrb	r1, [r2, #0]
    e924:	b901      	cbnz	r1, e928 <process_gps_data+0x34>
					got_first_fix = true;
    e926:	7013      	strb	r3, [r2, #0]
    e928:	f015 ff09 	bl	2473e <z_impl_k_uptime_get>
				fix_timestamp = k_uptime_get();
    e92c:	4b0f      	ldr	r3, [pc, #60]	; (e96c <process_gps_data+0x78>)
				memcpy(&last_fix, gps_data, sizeof(nrf_gnss_data_frame_t));
    e92e:	22d8      	movs	r2, #216	; 0xd8
				fix_timestamp = k_uptime_get();
    e930:	e9c3 0100 	strd	r0, r1, [r3]
				memcpy(&last_fix, gps_data, sizeof(nrf_gnss_data_frame_t));
    e934:	4621      	mov	r1, r4
    e936:	480e      	ldr	r0, [pc, #56]	; (e970 <process_gps_data+0x7c>)
    e938:	f015 ffa3 	bl	24882 <memcpy>
				nmea_string_cnt = 0;
    e93c:	2200      	movs	r2, #0
    e93e:	4b0d      	ldr	r3, [pc, #52]	; (e974 <process_gps_data+0x80>)
    e940:	601a      	str	r2, [r3, #0]
    e942:	e7e7      	b.n	e914 <process_gps_data+0x20>
			if (nmea_string_cnt < 10) {
    e944:	4a0b      	ldr	r2, [pc, #44]	; (e974 <process_gps_data+0x80>)
    e946:	6813      	ldr	r3, [r2, #0]
    e948:	2b09      	cmp	r3, #9
    e94a:	d8e3      	bhi.n	e914 <process_gps_data+0x20>
				memcpy(nmea_strings[nmea_string_cnt++],
    e94c:	1c59      	adds	r1, r3, #1
    e94e:	6011      	str	r1, [r2, #0]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    e950:	f104 0108 	add.w	r1, r4, #8
    e954:	2453      	movs	r4, #83	; 0x53
    e956:	4808      	ldr	r0, [pc, #32]	; (e978 <process_gps_data+0x84>)
    e958:	462a      	mov	r2, r5
    e95a:	fb04 0003 	mla	r0, r4, r3, r0
    e95e:	f015 ff90 	bl	24882 <memcpy>
	return retval;
    e962:	e7d7      	b.n	e914 <process_gps_data+0x20>
    e964:	200200e8 	.word	0x200200e8
    e968:	2002234a 	.word	0x2002234a
    e96c:	20020000 	.word	0x20020000
    e970:	20020008 	.word	0x20020008
    e974:	200200ec 	.word	0x200200ec
    e978:	2002234b 	.word	0x2002234b

0000e97c <main>:

int main(void)
{
    e97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	nrf_gnss_data_frame_t gps_data;
	u8_t		      cnt = 0;

	printk("Staring GPS application\n");
    e980:	488d      	ldr	r0, [pc, #564]	; (ebb8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x158>)
{
    e982:	b0bb      	sub	sp, #236	; 0xec
	printk("Staring GPS application\n");
    e984:	f014 fb20 	bl	22fc8 <printk>
	nrf_gnss_fix_interval_t fix_interval = 1;
    e988:	2301      	movs	r3, #1
    e98a:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_gnss_nmea_mask_t	nmea_mask    = NRF_GNSS_NMEA_GSV_MASK |
    e98e:	231f      	movs	r3, #31
	nrf_gnss_fix_retry_t    fix_retry    = 0;
    e990:	2400      	movs	r4, #0
	return socket_ops->socket(family, type, proto);
    e992:	4e8a      	ldr	r6, [pc, #552]	; (ebbc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x15c>)
	nrf_gnss_nmea_mask_t	nmea_mask    = NRF_GNSS_NMEA_GSV_MASK |
    e994:	f8ad 300e 	strh.w	r3, [sp, #14]
    e998:	6833      	ldr	r3, [r6, #0]
	nrf_gnss_fix_retry_t    fix_retry    = 0;
    e99a:	f8ad 400a 	strh.w	r4, [sp, #10]
	nrf_gnss_delete_mask_t	delete_mask  = 0;
    e99e:	9404      	str	r4, [sp, #16]
    e9a0:	681b      	ldr	r3, [r3, #0]
    e9a2:	f240 2201 	movw	r2, #513	; 0x201
    e9a6:	4621      	mov	r1, r4
    e9a8:	2066      	movs	r0, #102	; 0x66
    e9aa:	4798      	blx	r3
	if (at_sock < 0) {
    e9ac:	1e05      	subs	r5, r0, #0
    e9ae:	db16      	blt.n	e9de <main+0x62>
    e9b0:	f8df 8278 	ldr.w	r8, [pc, #632]	; ec2c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1cc>
		if (memcmp(buf, "OK", 2) != 0) {
    e9b4:	f8df 9278 	ldr.w	r9, [pc, #632]	; ec30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d0>
    e9b8:	ebc4 1744 	rsb	r7, r4, r4, lsl #5
    e9bc:	4447      	add	r7, r8
		bytes_sent = send(at_sock, at_commands[i],
    e9be:	4638      	mov	r0, r7
    e9c0:	f7ff f996 	bl	dcf0 <strlen>
			   int flags)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->send);

	return socket_ops->send(sock, buf, len, flags);
    e9c4:	6833      	ldr	r3, [r6, #0]
    e9c6:	4602      	mov	r2, r0
    e9c8:	f8d3 a02c 	ldr.w	sl, [r3, #44]	; 0x2c
    e9cc:	4639      	mov	r1, r7
    e9ce:	2300      	movs	r3, #0
    e9d0:	4628      	mov	r0, r5
    e9d2:	47d0      	blx	sl
		if (bytes_sent < 0) {
    e9d4:	2800      	cmp	r0, #0
    e9d6:	da06      	bge.n	e9e6 <main+0x6a>
			close(at_sock);
    e9d8:	4628      	mov	r0, r5
    e9da:	f7ff ff45 	bl	e868 <close>
		printk("Failed to enable GPS\n");
    e9de:	4878      	ldr	r0, [pc, #480]	; (ebc0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x160>)
		printk("Failed to start GPS\n");
    e9e0:	f014 faf2 	bl	22fc8 <printk>
    e9e4:	e023      	b.n	ea2e <main+0xb2>
	return socket_ops->recv(sock, buf, max_len, flags);
    e9e6:	6833      	ldr	r3, [r6, #0]
    e9e8:	2202      	movs	r2, #2
    e9ea:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    e9ec:	a902      	add	r1, sp, #8
    e9ee:	2300      	movs	r3, #0
    e9f0:	4628      	mov	r0, r5
    e9f2:	47b8      	blx	r7
		} while (bytes_received == 0);
    e9f4:	2800      	cmp	r0, #0
    e9f6:	d0f6      	beq.n	e9e6 <main+0x6a>
		if (memcmp(buf, "OK", 2) != 0) {
    e9f8:	2202      	movs	r2, #2
    e9fa:	4649      	mov	r1, r9
    e9fc:	a802      	add	r0, sp, #8
    e9fe:	f015 ff31 	bl	24864 <memcmp>
    ea02:	2800      	cmp	r0, #0
    ea04:	d1e8      	bne.n	e9d8 <main+0x5c>
	for (int i = 0; i < ARRAY_SIZE(at_commands); i++) {
    ea06:	3401      	adds	r4, #1
    ea08:	2c04      	cmp	r4, #4
    ea0a:	d1d5      	bne.n	e9b8 <main+0x3c>
	close(at_sock);
    ea0c:	4628      	mov	r0, r5
    ea0e:	f7ff ff2b 	bl	e868 <close>
	fd = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    ea12:	2102      	movs	r1, #2
    ea14:	f44f 7201 	mov.w	r2, #516	; 0x204
    ea18:	2001      	movs	r0, #1
    ea1a:	f003 ff65 	bl	128e8 <nrf_socket>
    ea1e:	4d69      	ldr	r5, [pc, #420]	; (ebc4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x164>)
	if (fd >= 0) {
    ea20:	2800      	cmp	r0, #0
	fd = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    ea22:	4601      	mov	r1, r0
    ea24:	6028      	str	r0, [r5, #0]
	if (fd >= 0) {
    ea26:	da07      	bge.n	ea38 <main+0xbc>
		printk("Could not init socket (err: %d)\n", fd);
    ea28:	4867      	ldr	r0, [pc, #412]	; (ebc8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x168>)
    ea2a:	f014 facd 	bl	22fc8 <printk>

		k_sleep(K_MSEC(500));
	}

	return 0;
}
    ea2e:	f04f 30ff 	mov.w	r0, #4294967295
    ea32:	b03b      	add	sp, #236	; 0xec
    ea34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	retval = nrf_setsockopt(fd,
    ea38:	2602      	movs	r6, #2
		printk("Socket created\n");
    ea3a:	4864      	ldr	r0, [pc, #400]	; (ebcc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x16c>)
    ea3c:	f014 fac4 	bl	22fc8 <printk>
	retval = nrf_setsockopt(fd,
    ea40:	9600      	str	r6, [sp, #0]
    ea42:	f10d 030a 	add.w	r3, sp, #10
    ea46:	4632      	mov	r2, r6
    ea48:	f44f 7101 	mov.w	r1, #516	; 0x204
    ea4c:	6828      	ldr	r0, [r5, #0]
    ea4e:	f004 f821 	bl	12a94 <nrf_setsockopt>
	if (retval != 0) {
    ea52:	b108      	cbz	r0, ea58 <main+0xdc>
		printk("Failed to set fix retry value\n");
    ea54:	485e      	ldr	r0, [pc, #376]	; (ebd0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x170>)
    ea56:	e7c3      	b.n	e9e0 <main+0x64>
	retval = nrf_setsockopt(fd,
    ea58:	9600      	str	r6, [sp, #0]
    ea5a:	ab03      	add	r3, sp, #12
    ea5c:	2201      	movs	r2, #1
    ea5e:	f44f 7101 	mov.w	r1, #516	; 0x204
    ea62:	6828      	ldr	r0, [r5, #0]
    ea64:	f004 f816 	bl	12a94 <nrf_setsockopt>
	if (retval != 0) {
    ea68:	b108      	cbz	r0, ea6e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe>
		printk("Failed to set fix interval value\n");
    ea6a:	485a      	ldr	r0, [pc, #360]	; (ebd4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x174>)
    ea6c:	e7b8      	b.n	e9e0 <main+0x64>
	retval = nrf_setsockopt(fd,
    ea6e:	9600      	str	r6, [sp, #0]
    ea70:	f10d 030e 	add.w	r3, sp, #14
    ea74:	4622      	mov	r2, r4
    ea76:	f44f 7101 	mov.w	r1, #516	; 0x204
    ea7a:	6828      	ldr	r0, [r5, #0]
    ea7c:	f004 f80a 	bl	12a94 <nrf_setsockopt>
	if (retval != 0) {
    ea80:	b108      	cbz	r0, ea86 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x26>
		printk("Failed to set nmea mask\n");
    ea82:	4855      	ldr	r0, [pc, #340]	; (ebd8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x178>)
    ea84:	e7ac      	b.n	e9e0 <main+0x64>
	retval = nrf_setsockopt(fd,
    ea86:	9400      	str	r4, [sp, #0]
    ea88:	6828      	ldr	r0, [r5, #0]
    ea8a:	ab04      	add	r3, sp, #16
    ea8c:	2207      	movs	r2, #7
    ea8e:	f44f 7101 	mov.w	r1, #516	; 0x204
    ea92:	f003 ffff 	bl	12a94 <nrf_setsockopt>
	if (retval != 0) {
    ea96:	4605      	mov	r5, r0
    ea98:	b108      	cbz	r0, ea9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e>
		printk("Failed to start GPS\n");
    ea9a:	4850      	ldr	r0, [pc, #320]	; (ebdc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x17c>)
    ea9c:	e7a0      	b.n	e9e0 <main+0x64>
		if (!got_first_fix) {
    ea9e:	4e50      	ldr	r6, [pc, #320]	; (ebe0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x180>)
	printk("Getting GPS data...\n");
    eaa0:	4850      	ldr	r0, [pc, #320]	; (ebe4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x184>)
    eaa2:	f014 fa91 	bl	22fc8 <printk>
    eaa6:	46b0      	mov	r8, r6
			printk("\033[1;1H");
    eaa8:	4f4f      	ldr	r7, [pc, #316]	; (ebe8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x188>)
		} while (process_gps_data(&gps_data) > 0);
    eaaa:	a804      	add	r0, sp, #16
    eaac:	f7ff ff22 	bl	e8f4 <process_gps_data>
    eab0:	2800      	cmp	r0, #0
    eab2:	dcfa      	bgt.n	eaaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4a>
		if (!got_first_fix) {
    eab4:	7833      	ldrb	r3, [r6, #0]
    eab6:	b98b      	cbnz	r3, eadc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7c>
			printk("\033[1;1H");
    eab8:	4638      	mov	r0, r7
    eaba:	f014 fa85 	bl	22fc8 <printk>
			printk("\033[2J");
    eabe:	484b      	ldr	r0, [pc, #300]	; (ebec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x18c>)
    eac0:	f014 fa82 	bl	22fc8 <printk>
			cnt++;
    eac4:	3501      	adds	r5, #1
			print_satellite_stats(&gps_data);
    eac6:	a804      	add	r0, sp, #16
    eac8:	f7ff fed4 	bl	e874 <print_satellite_stats>
			cnt++;
    eacc:	b2ed      	uxtb	r5, r5
			printk("\nScanning [%c] ",
    eace:	4a48      	ldr	r2, [pc, #288]	; (ebf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x190>)
					update_indicator[cnt%4]);
    ead0:	f005 0303 	and.w	r3, r5, #3
			printk("\nScanning [%c] ",
    ead4:	5cd1      	ldrb	r1, [r2, r3]
    ead6:	4847      	ldr	r0, [pc, #284]	; (ebf4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x194>)
    ead8:	f014 fa76 	bl	22fc8 <printk>
    eadc:	f015 fe2f 	bl	2473e <z_impl_k_uptime_get>
		if (((k_uptime_get() - fix_timestamp) >= 1) &&
    eae0:	4b45      	ldr	r3, [pc, #276]	; (ebf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x198>)
    eae2:	e9d3 2300 	ldrd	r2, r3, [r3]
    eae6:	4299      	cmp	r1, r3
    eae8:	bf08      	it	eq
    eaea:	4290      	cmpeq	r0, r2
    eaec:	d057      	beq.n	eb9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13e>
    eaee:	f898 3000 	ldrb.w	r3, [r8]
    eaf2:	2b00      	cmp	r3, #0
    eaf4:	d053      	beq.n	eb9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13e>
			printk("\033[1;1H");
    eaf6:	4638      	mov	r0, r7
    eaf8:	f014 fa66 	bl	22fc8 <printk>
			printk("\033[2J");
    eafc:	483b      	ldr	r0, [pc, #236]	; (ebec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x18c>)
	printf("Longitude:  %f\n", pvt_data->pvt.longitude);
    eafe:	4c3f      	ldr	r4, [pc, #252]	; (ebfc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x19c>)
			printk("\033[2J");
    eb00:	f014 fa62 	bl	22fc8 <printk>
			print_satellite_stats(&gps_data);
    eb04:	a804      	add	r0, sp, #16
    eb06:	f7ff feb5 	bl	e874 <print_satellite_stats>
			printk("---------------------------------\n");
    eb0a:	483d      	ldr	r0, [pc, #244]	; (ec00 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a0>)
    eb0c:	f014 fa5c 	bl	22fc8 <printk>
	printf("Longitude:  %f\n", pvt_data->pvt.longitude);
    eb10:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    eb14:	483b      	ldr	r0, [pc, #236]	; (ec04 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a4>)
    eb16:	f013 f9af 	bl	21e78 <iprintf>
	printf("Latitude:   %f\n", pvt_data->pvt.latitude);
    eb1a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    eb1e:	483a      	ldr	r0, [pc, #232]	; (ec08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a8>)
    eb20:	f013 f9aa 	bl	21e78 <iprintf>
	printf("Altitude:   %f\n", pvt_data->pvt.altitude);
    eb24:	69a0      	ldr	r0, [r4, #24]
    eb26:	f7fd fcdf 	bl	c4e8 <__aeabi_f2d>
    eb2a:	4602      	mov	r2, r0
    eb2c:	460b      	mov	r3, r1
    eb2e:	4837      	ldr	r0, [pc, #220]	; (ec0c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ac>)
    eb30:	f013 f9a2 	bl	21e78 <iprintf>
	printf("Speed:      %f\n", pvt_data->pvt.speed);
    eb34:	6a20      	ldr	r0, [r4, #32]
    eb36:	f7fd fcd7 	bl	c4e8 <__aeabi_f2d>
    eb3a:	4602      	mov	r2, r0
    eb3c:	460b      	mov	r3, r1
    eb3e:	4834      	ldr	r0, [pc, #208]	; (ec10 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1b0>)
    eb40:	f013 f99a 	bl	21e78 <iprintf>
	printf("Heading:    %f\n", pvt_data->pvt.heading);
    eb44:	6a60      	ldr	r0, [r4, #36]	; 0x24
    eb46:	f7fd fccf 	bl	c4e8 <__aeabi_f2d>
    eb4a:	4602      	mov	r2, r0
    eb4c:	460b      	mov	r3, r1
    eb4e:	4831      	ldr	r0, [pc, #196]	; (ec14 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1b4>)
    eb50:	f013 f992 	bl	21e78 <iprintf>
	printk("Date:       %02u-%02u-%02u\n", pvt_data->pvt.datetime.day,
    eb54:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    eb56:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
    eb5a:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
    eb5e:	482e      	ldr	r0, [pc, #184]	; (ec18 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1b8>)
    eb60:	f014 fa32 	bl	22fc8 <printk>
	printk("Time (UTC): %02u:%02u:%02u\n", pvt_data->pvt.datetime.hour,
    eb64:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    eb68:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    eb6c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    eb70:	482a      	ldr	r0, [pc, #168]	; (ec1c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1bc>)
    eb72:	f014 fa29 	bl	22fc8 <printk>
			printk("\n");
    eb76:	482a      	ldr	r0, [pc, #168]	; (ec20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c0>)
    eb78:	f014 fa26 	bl	22fc8 <printk>
	printk("NMEA strings:\n");
    eb7c:	4829      	ldr	r0, [pc, #164]	; (ec24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c4>)
    eb7e:	f014 fa23 	bl	22fc8 <printk>
	for (int i = 0; i < nmea_string_cnt; ++i) {
    eb82:	2400      	movs	r4, #0
    eb84:	f8df 90ac 	ldr.w	r9, [pc, #172]	; ec34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d4>
		printk("%s\n", nmea_strings[i]);
    eb88:	f8df a0ac 	ldr.w	sl, [pc, #172]	; ec38 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d8>
    eb8c:	f8df b0ac 	ldr.w	fp, [pc, #172]	; ec3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1dc>
	for (int i = 0; i < nmea_string_cnt; ++i) {
    eb90:	f8d9 3000 	ldr.w	r3, [r9]
    eb94:	429c      	cmp	r4, r3
    eb96:	d307      	bcc.n	eba8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x148>
			printk("---------------------------------");
    eb98:	4823      	ldr	r0, [pc, #140]	; (ec28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c8>)
    eb9a:	f014 fa15 	bl	22fc8 <printk>
	return z_impl_k_sleep(ms);
    eb9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    eba2:	f015 fd2b 	bl	245fc <z_impl_k_sleep>
    eba6:	e780      	b.n	eaaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4a>
		printk("%s\n", nmea_strings[i]);
    eba8:	2153      	movs	r1, #83	; 0x53
    ebaa:	4658      	mov	r0, fp
    ebac:	fb01 a104 	mla	r1, r1, r4, sl
    ebb0:	f014 fa0a 	bl	22fc8 <printk>
	for (int i = 0; i < nmea_string_cnt; ++i) {
    ebb4:	3401      	adds	r4, #1
    ebb6:	e7eb      	b.n	eb90 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x130>
    ebb8:	00026e7a 	.word	0x00026e7a
    ebbc:	20020238 	.word	0x20020238
    ebc0:	00026e96 	.word	0x00026e96
    ebc4:	200200e8 	.word	0x200200e8
    ebc8:	00026ebc 	.word	0x00026ebc
    ebcc:	00026eac 	.word	0x00026eac
    ebd0:	00026edd 	.word	0x00026edd
    ebd4:	00026efc 	.word	0x00026efc
    ebd8:	00026f1e 	.word	0x00026f1e
    ebdc:	00026f37 	.word	0x00026f37
    ebe0:	2002234a 	.word	0x2002234a
    ebe4:	00026f4c 	.word	0x00026f4c
    ebe8:	00026f61 	.word	0x00026f61
    ebec:	00026f68 	.word	0x00026f68
    ebf0:	0002709c 	.word	0x0002709c
    ebf4:	00026f6d 	.word	0x00026f6d
    ebf8:	20020000 	.word	0x20020000
    ebfc:	20020008 	.word	0x20020008
    ec00:	00026f7d 	.word	0x00026f7d
    ec04:	00026fa0 	.word	0x00026fa0
    ec08:	00026fb0 	.word	0x00026fb0
    ec0c:	00026fc0 	.word	0x00026fc0
    ec10:	00026fd0 	.word	0x00026fd0
    ec14:	00026fe0 	.word	0x00026fe0
    ec18:	00026ff0 	.word	0x00026ff0
    ec1c:	0002700c 	.word	0x0002700c
    ec20:	000271b2 	.word	0x000271b2
    ec24:	00027028 	.word	0x00027028
    ec28:	00027037 	.word	0x00027037
    ec2c:	00026df4 	.word	0x00026df4
    ec30:	00026e93 	.word	0x00026e93
    ec34:	200200ec 	.word	0x200200ec
    ec38:	2002234b 	.word	0x2002234b
    ec3c:	00027960 	.word	0x00027960

0000ec40 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    ec40:	680b      	ldr	r3, [r1, #0]
    ec42:	3301      	adds	r3, #1
    ec44:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    ec46:	4b01      	ldr	r3, [pc, #4]	; (ec4c <char_out+0xc>)
    ec48:	681b      	ldr	r3, [r3, #0]
    ec4a:	4718      	bx	r3
    ec4c:	20024914 	.word	0x20024914

0000ec50 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    ec50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec54:	b085      	sub	sp, #20
    ec56:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    ec58:	469b      	mov	fp, r3
    ec5a:	2c01      	cmp	r4, #1
    ec5c:	bfb8      	it	lt
    ec5e:	2401      	movlt	r4, #1
    ec60:	2b01      	cmp	r3, #1
    ec62:	bf0c      	ite	eq
    ec64:	2330      	moveq	r3, #48	; 0x30
    ec66:	2320      	movne	r3, #32
    ec68:	4616      	mov	r6, r2
    ec6a:	4682      	mov	sl, r0
    ec6c:	4688      	mov	r8, r1
    ec6e:	2501      	movs	r5, #1
    ec70:	270a      	movs	r7, #10
    ec72:	2200      	movs	r2, #0
    ec74:	f8df 906c 	ldr.w	r9, [pc, #108]	; ece4 <_printk_dec_ulong+0x94>
    ec78:	9302      	str	r3, [sp, #8]
    ec7a:	fbb6 f3f9 	udiv	r3, r6, r9
    ec7e:	9301      	str	r3, [sp, #4]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    ec80:	b90a      	cbnz	r2, ec86 <_printk_dec_ulong+0x36>
    ec82:	45b1      	cmp	r9, r6
    ec84:	d81c      	bhi.n	ecc0 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    ec86:	9b01      	ldr	r3, [sp, #4]
    ec88:	4641      	mov	r1, r8
    ec8a:	f103 0030 	add.w	r0, r3, #48	; 0x30
    ec8e:	47d0      	blx	sl
			found_largest_digit = 1;
    ec90:	2201      	movs	r2, #1
			digits++;
    ec92:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    ec94:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    ec96:	3f01      	subs	r7, #1
		remainder %= pos;
    ec98:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    ec9c:	230a      	movs	r3, #10
	while (pos >= 10) {
    ec9e:	2f01      	cmp	r7, #1
		pos /= 10;
    eca0:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    eca4:	d1e9      	bne.n	ec7a <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    eca6:	4641      	mov	r1, r8
    eca8:	f106 0030 	add.w	r0, r6, #48	; 0x30
    ecac:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    ecae:	f1bb 0f03 	cmp.w	fp, #3
    ecb2:	d102      	bne.n	ecba <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
    ecb4:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    ecb6:	2c00      	cmp	r4, #0
    ecb8:	dc0e      	bgt.n	ecd8 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
    ecba:	b005      	add	sp, #20
    ecbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    ecc0:	42bc      	cmp	r4, r7
    ecc2:	dbe7      	blt.n	ec94 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    ecc4:	f1bb 0f02 	cmp.w	fp, #2
    ecc8:	d8e4      	bhi.n	ec94 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    ecca:	4641      	mov	r1, r8
    eccc:	9802      	ldr	r0, [sp, #8]
    ecce:	9203      	str	r2, [sp, #12]
			digits++;
    ecd0:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    ecd2:	47d0      	blx	sl
			digits++;
    ecd4:	9a03      	ldr	r2, [sp, #12]
    ecd6:	e7dd      	b.n	ec94 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    ecd8:	4641      	mov	r1, r8
    ecda:	2020      	movs	r0, #32
    ecdc:	47d0      	blx	sl
    ecde:	3c01      	subs	r4, #1
    ece0:	e7e9      	b.n	ecb6 <_printk_dec_ulong+0x66>
    ece2:	bf00      	nop
    ece4:	3b9aca00 	.word	0x3b9aca00

0000ece8 <__printk_hook_install>:
	_char_out = fn;
    ece8:	4b01      	ldr	r3, [pc, #4]	; (ecf0 <__printk_hook_install+0x8>)
    ecea:	6018      	str	r0, [r3, #0]
}
    ecec:	4770      	bx	lr
    ecee:	bf00      	nop
    ecf0:	20024914 	.word	0x20024914

0000ecf4 <vprintk>:
	struct out_context ctx = { 0 };
    ecf4:	2300      	movs	r3, #0
{
    ecf6:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    ecf8:	ac02      	add	r4, sp, #8
    ecfa:	f844 3d04 	str.w	r3, [r4, #-4]!
	z_vprintk(char_out, &ctx, fmt, ap);
    ecfe:	4602      	mov	r2, r0
    ed00:	460b      	mov	r3, r1
    ed02:	4803      	ldr	r0, [pc, #12]	; (ed10 <vprintk+0x1c>)
    ed04:	4621      	mov	r1, r4
    ed06:	f013 ffe9 	bl	22cdc <z_vprintk>
}
    ed0a:	b002      	add	sp, #8
    ed0c:	bd10      	pop	{r4, pc}
    ed0e:	bf00      	nop
    ed10:	0000ec41 	.word	0x0000ec41

0000ed14 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    ed14:	f04f 0220 	mov.w	r2, #32
    ed18:	f3ef 8311 	mrs	r3, BASEPRI
    ed1c:	f382 8811 	msr	BASEPRI, r2
    ed20:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    ed24:	2101      	movs	r1, #1
    ed26:	4a04      	ldr	r2, [pc, #16]	; (ed38 <nordicsemi_nrf91_init+0x24>)
    ed28:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    ed2c:	f383 8811 	msr	BASEPRI, r3
    ed30:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    ed34:	2000      	movs	r0, #0
    ed36:	4770      	bx	lr
    ed38:	40039000 	.word	0x40039000

0000ed3c <log_process_thread_timer_expiry_fn>:
		z_arch_syscall_invoke1(*(u32_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    ed3c:	4801      	ldr	r0, [pc, #4]	; (ed44 <log_process_thread_timer_expiry_fn+0x8>)
    ed3e:	f011 be9f 	b.w	20a80 <z_impl_k_sem_give>
    ed42:	bf00      	nop
    ed44:	20024c18 	.word	0x20024c18

0000ed48 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    ed48:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    ed4a:	2200      	movs	r2, #0
{
    ed4c:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
    ed4e:	490d      	ldr	r1, [pc, #52]	; (ed84 <enable_logger+0x3c>)
    ed50:	480d      	ldr	r0, [pc, #52]	; (ed88 <enable_logger+0x40>)
    ed52:	f015 fd02 	bl	2475a <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ed56:	2400      	movs	r4, #0
    ed58:	230e      	movs	r3, #14
    ed5a:	4d0c      	ldr	r5, [pc, #48]	; (ed8c <enable_logger+0x44>)
    ed5c:	e9cd 4302 	strd	r4, r3, [sp, #8]
    ed60:	e9cd 4404 	strd	r4, r4, [sp, #16]
    ed64:	e9cd 4400 	strd	r4, r4, [sp]
    ed68:	4b09      	ldr	r3, [pc, #36]	; (ed90 <enable_logger+0x48>)
    ed6a:	f44f 7240 	mov.w	r2, #768	; 0x300
    ed6e:	4909      	ldr	r1, [pc, #36]	; (ed94 <enable_logger+0x4c>)
    ed70:	4628      	mov	r0, r5
    ed72:	f011 ff15 	bl	20ba0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    ed76:	4908      	ldr	r1, [pc, #32]	; (ed98 <enable_logger+0x50>)
    ed78:	4628      	mov	r0, r5
    ed7a:	f015 fc70 	bl	2465e <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    ed7e:	4620      	mov	r0, r4
    ed80:	b007      	add	sp, #28
    ed82:	bd30      	pop	{r4, r5, pc}
    ed84:	0000ed3d 	.word	0x0000ed3d
    ed88:	20020104 	.word	0x20020104
    ed8c:	2002014c 	.word	0x2002014c
    ed90:	0000f159 	.word	0x0000f159
    ed94:	20022800 	.word	0x20022800
    ed98:	000270bc 	.word	0x000270bc

0000ed9c <log_core_init>:
{
    ed9c:	b508      	push	{r3, lr}
		log_msg_pool_init();
    ed9e:	f000 fa6b 	bl	f278 <log_msg_pool_init>
		log_list_init(&list);
    eda2:	4809      	ldr	r0, [pc, #36]	; (edc8 <log_core_init+0x2c>)
    eda4:	f014 f920 	bl	22fe8 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    eda8:	2304      	movs	r3, #4
    edaa:	2234      	movs	r2, #52	; 0x34
    edac:	4807      	ldr	r0, [pc, #28]	; (edcc <log_core_init+0x30>)
    edae:	4908      	ldr	r1, [pc, #32]	; (edd0 <log_core_init+0x34>)
    edb0:	f015 fb07 	bl	243c2 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    edb4:	4b07      	ldr	r3, [pc, #28]	; (edd4 <log_core_init+0x38>)
    edb6:	4a08      	ldr	r2, [pc, #32]	; (edd8 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    edb8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    edbc:	601a      	str	r2, [r3, #0]
}
    edbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    edc2:	f000 bc93 	b.w	f6ec <log_output_timestamp_freq_set>
    edc6:	bf00      	nop
    edc8:	200200fc 	.word	0x200200fc
    edcc:	20020130 	.word	0x20020130
    edd0:	20024440 	.word	0x20024440
    edd4:	20024918 	.word	0x20024918
    edd8:	00023027 	.word	0x00023027

0000eddc <dropped_notify>:
{
    eddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    edde:	2500      	movs	r5, #0
    ede0:	4b0c      	ldr	r3, [pc, #48]	; (ee14 <dropped_notify+0x38>)
    ede2:	e8d3 7fef 	ldaex	r7, [r3]
    ede6:	e8c3 5fe2 	stlex	r2, r5, [r3]
    edea:	2a00      	cmp	r2, #0
    edec:	d1f9      	bne.n	ede2 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    edee:	4c0a      	ldr	r4, [pc, #40]	; (ee18 <dropped_notify+0x3c>)
    edf0:	4e0a      	ldr	r6, [pc, #40]	; (ee1c <dropped_notify+0x40>)
    edf2:	1b36      	subs	r6, r6, r4
    edf4:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    edf6:	42b5      	cmp	r5, r6
    edf8:	db00      	blt.n	edfc <dropped_notify+0x20>
}
    edfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    edfc:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    edfe:	795b      	ldrb	r3, [r3, #5]
    ee00:	b12b      	cbz	r3, ee0e <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    ee02:	6823      	ldr	r3, [r4, #0]
    ee04:	68db      	ldr	r3, [r3, #12]
    ee06:	b113      	cbz	r3, ee0e <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    ee08:	4639      	mov	r1, r7
    ee0a:	4620      	mov	r0, r4
    ee0c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    ee0e:	3501      	adds	r5, #1
    ee10:	3410      	adds	r4, #16
    ee12:	e7f0      	b.n	edf6 <dropped_notify+0x1a>
    ee14:	200200f4 	.word	0x200200f4
    ee18:	00025908 	.word	0x00025908
    ee1c:	00025918 	.word	0x00025918

0000ee20 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    ee20:	4b04      	ldr	r3, [pc, #16]	; (ee34 <log_dropped+0x14>)
    ee22:	e8d3 2fef 	ldaex	r2, [r3]
    ee26:	3201      	adds	r2, #1
    ee28:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ee2c:	2900      	cmp	r1, #0
    ee2e:	d1f8      	bne.n	ee22 <log_dropped+0x2>
}
    ee30:	4770      	bx	lr
    ee32:	bf00      	nop
    ee34:	200200f4 	.word	0x200200f4

0000ee38 <log_source_name_get>:
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    ee38:	4a04      	ldr	r2, [pc, #16]	; (ee4c <log_source_name_get+0x14>)
    ee3a:	4b05      	ldr	r3, [pc, #20]	; (ee50 <log_source_name_get+0x18>)
    ee3c:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    ee3e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    ee42:	bf34      	ite	cc
    ee44:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    ee48:	2000      	movcs	r0, #0
}
    ee4a:	4770      	bx	lr
    ee4c:	000258c0 	.word	0x000258c0
    ee50:	00025908 	.word	0x00025908

0000ee54 <log_backend_enable>:
	id += backend - log_backend_get(0);
    ee54:	4b09      	ldr	r3, [pc, #36]	; (ee7c <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    ee56:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    ee58:	1ac3      	subs	r3, r0, r3
    ee5a:	111b      	asrs	r3, r3, #4
    ee5c:	3301      	adds	r3, #1
{
    ee5e:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    ee60:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    ee62:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    ee64:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    ee66:	4c06      	ldr	r4, [pc, #24]	; (ee80 <log_backend_enable+0x2c>)
    ee68:	715a      	strb	r2, [r3, #5]
    ee6a:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    ee6c:	6019      	str	r1, [r3, #0]
    ee6e:	b912      	cbnz	r2, ee76 <log_backend_enable+0x22>
	z_impl_k_sem_give(sem);
    ee70:	4804      	ldr	r0, [pc, #16]	; (ee84 <log_backend_enable+0x30>)
    ee72:	f011 fe05 	bl	20a80 <z_impl_k_sem_give>
	backend_attached = true;
    ee76:	2301      	movs	r3, #1
    ee78:	7023      	strb	r3, [r4, #0]
}
    ee7a:	bd10      	pop	{r4, pc}
    ee7c:	00025908 	.word	0x00025908
    ee80:	20022689 	.word	0x20022689
    ee84:	20024c18 	.word	0x20024c18

0000ee88 <log_init>:
{
    ee88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __log_backends_end - __log_backends_start;
    ee8a:	4e14      	ldr	r6, [pc, #80]	; (eedc <log_init+0x54>)
    ee8c:	4b14      	ldr	r3, [pc, #80]	; (eee0 <log_init+0x58>)
    ee8e:	1b9b      	subs	r3, r3, r6
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    ee90:	2b90      	cmp	r3, #144	; 0x90
    ee92:	dd06      	ble.n	eea2 <log_init+0x1a>
    ee94:	4b13      	ldr	r3, [pc, #76]	; (eee4 <log_init+0x5c>)
    ee96:	4a14      	ldr	r2, [pc, #80]	; (eee8 <log_init+0x60>)
    ee98:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    ee9c:	4813      	ldr	r0, [pc, #76]	; (eeec <log_init+0x64>)
    ee9e:	f012 fb45 	bl	2152c <__assert_func>
    eea2:	4a13      	ldr	r2, [pc, #76]	; (eef0 <log_init+0x68>)
    eea4:	e8d2 4fef 	ldaex	r4, [r2]
    eea8:	1c61      	adds	r1, r4, #1
    eeaa:	e8c2 1fe0 	stlex	r0, r1, [r2]
    eeae:	2800      	cmp	r0, #0
    eeb0:	d1f8      	bne.n	eea4 <log_init+0x1c>
	if (atomic_inc(&initialized) != 0) {
    eeb2:	b914      	cbnz	r4, eeba <log_init+0x32>
    eeb4:	111d      	asrs	r5, r3, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    eeb6:	42ac      	cmp	r4, r5
    eeb8:	db00      	blt.n	eebc <log_init+0x34>
}
    eeba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eebc:	0127      	lsls	r7, r4, #4
		if (backend->autostart) {
    eebe:	19f3      	adds	r3, r6, r7
    eec0:	7b1b      	ldrb	r3, [r3, #12]
    eec2:	b143      	cbz	r3, eed6 <log_init+0x4e>
			if (backend->api->init != NULL) {
    eec4:	59f3      	ldr	r3, [r6, r7]
    eec6:	695b      	ldr	r3, [r3, #20]
    eec8:	b103      	cbz	r3, eecc <log_init+0x44>
				backend->api->init();
    eeca:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    eecc:	2204      	movs	r2, #4
    eece:	2100      	movs	r1, #0
    eed0:	19f0      	adds	r0, r6, r7
    eed2:	f7ff ffbf 	bl	ee54 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    eed6:	3401      	adds	r4, #1
    eed8:	e7ed      	b.n	eeb6 <log_init+0x2e>
    eeda:	bf00      	nop
    eedc:	00025908 	.word	0x00025908
    eee0:	00025918 	.word	0x00025918
    eee4:	000270c4 	.word	0x000270c4
    eee8:	000270b3 	.word	0x000270b3
    eeec:	00027111 	.word	0x00027111
    eef0:	200200f8 	.word	0x200200f8

0000eef4 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    eef4:	4b14      	ldr	r3, [pc, #80]	; (ef48 <log_strdup+0x54>)
{
    eef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    eef8:	4298      	cmp	r0, r3
{
    eefa:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    eefc:	d302      	bcc.n	ef04 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    eefe:	4b13      	ldr	r3, [pc, #76]	; (ef4c <log_strdup+0x58>)
    ef00:	4298      	cmp	r0, r3
    ef02:	d31b      	bcc.n	ef3c <log_strdup+0x48>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    ef04:	2200      	movs	r2, #0
    ef06:	a901      	add	r1, sp, #4
    ef08:	4811      	ldr	r0, [pc, #68]	; (ef50 <log_strdup+0x5c>)
    ef0a:	f011 fa33 	bl	20374 <k_mem_slab_alloc>
	if (err != 0) {
    ef0e:	4606      	mov	r6, r0
    ef10:	b9b8      	cbnz	r0, ef42 <log_strdup+0x4e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ef12:	2201      	movs	r2, #1
    ef14:	9b01      	ldr	r3, [sp, #4]
    ef16:	e8d3 1fef 	ldaex	r1, [r3]
    ef1a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    ef1e:	2800      	cmp	r0, #0
    ef20:	d1f9      	bne.n	ef16 <log_strdup+0x22>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    ef22:	9d01      	ldr	r5, [sp, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    ef24:	222d      	movs	r2, #45	; 0x2d
    ef26:	1d2b      	adds	r3, r5, #4
    ef28:	4621      	mov	r1, r4
    ef2a:	4618      	mov	r0, r3
    ef2c:	f015 fe10 	bl	24b50 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    ef30:	227e      	movs	r2, #126	; 0x7e
	return dup->buf;
    ef32:	4604      	mov	r4, r0
	dup->buf[sizeof(dup->buf) - 2] = '~';
    ef34:	f885 2031 	strb.w	r2, [r5, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    ef38:	f885 6032 	strb.w	r6, [r5, #50]	; 0x32
}
    ef3c:	4620      	mov	r0, r4
    ef3e:	b002      	add	sp, #8
    ef40:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
    ef42:	4c04      	ldr	r4, [pc, #16]	; (ef54 <log_strdup+0x60>)
    ef44:	e7fa      	b.n	ef3c <log_strdup+0x48>
    ef46:	bf00      	nop
    ef48:	00025604 	.word	0x00025604
    ef4c:	00027ab8 	.word	0x00027ab8
    ef50:	20020130 	.word	0x20020130
    ef54:	000270f7 	.word	0x000270f7

0000ef58 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    ef58:	b148      	cbz	r0, ef6e <log_is_strdup+0x16>
    ef5a:	4b05      	ldr	r3, [pc, #20]	; (ef70 <log_is_strdup+0x18>)
    ef5c:	4298      	cmp	r0, r3
    ef5e:	d305      	bcc.n	ef6c <log_is_strdup+0x14>
    ef60:	33d0      	adds	r3, #208	; 0xd0
    ef62:	4298      	cmp	r0, r3
    ef64:	bf2c      	ite	cs
    ef66:	2000      	movcs	r0, #0
    ef68:	2001      	movcc	r0, #1
    ef6a:	4770      	bx	lr
    ef6c:	2000      	movs	r0, #0
}
    ef6e:	4770      	bx	lr
    ef70:	20024440 	.word	0x20024440

0000ef74 <z_impl_log_process>:
{
    ef74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    ef78:	4b58      	ldr	r3, [pc, #352]	; (f0dc <z_impl_log_process+0x168>)
{
    ef7a:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
    ef7c:	781b      	ldrb	r3, [r3, #0]
{
    ef7e:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    ef80:	b903      	cbnz	r3, ef84 <z_impl_log_process+0x10>
    ef82:	b340      	cbz	r0, efd6 <z_impl_log_process+0x62>
	__asm__ volatile(
    ef84:	f04f 0320 	mov.w	r3, #32
    ef88:	f3ef 8611 	mrs	r6, BASEPRI
    ef8c:	f383 8811 	msr	BASEPRI, r3
    ef90:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    ef94:	4852      	ldr	r0, [pc, #328]	; (f0e0 <z_impl_log_process+0x16c>)
    ef96:	f014 f837 	bl	23008 <log_list_head_get>
    ef9a:	4605      	mov	r5, r0
	__asm__ volatile(
    ef9c:	f386 8811 	msr	BASEPRI, r6
    efa0:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    efa4:	b158      	cbz	r0, efbe <z_impl_log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    efa6:	4b4f      	ldr	r3, [pc, #316]	; (f0e4 <z_impl_log_process+0x170>)
    efa8:	e8d3 2fef 	ldaex	r2, [r3]
    efac:	3a01      	subs	r2, #1
    efae:	e8c3 2fe1 	stlex	r1, r2, [r3]
    efb2:	2900      	cmp	r1, #0
    efb4:	d1f8      	bne.n	efa8 <z_impl_log_process+0x34>
	if (!bypass) {
    efb6:	b194      	cbz	r4, efde <z_impl_log_process+0x6a>
	log_msg_put(msg);
    efb8:	4628      	mov	r0, r5
    efba:	f014 f912 	bl	231e2 <log_msg_put>
	if (!bypass && dropped_cnt) {
    efbe:	b924      	cbnz	r4, efca <z_impl_log_process+0x56>
    efc0:	4b49      	ldr	r3, [pc, #292]	; (f0e8 <z_impl_log_process+0x174>)
    efc2:	681b      	ldr	r3, [r3, #0]
    efc4:	b10b      	cbz	r3, efca <z_impl_log_process+0x56>
		dropped_notify();
    efc6:	f7ff ff09 	bl	eddc <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    efca:	4845      	ldr	r0, [pc, #276]	; (f0e0 <z_impl_log_process+0x16c>)
    efcc:	f014 f81a 	bl	23004 <log_list_head_peek>
    efd0:	1c04      	adds	r4, r0, #0
    efd2:	bf18      	it	ne
    efd4:	2401      	movne	r4, #1
}
    efd6:	4620      	mov	r0, r4
    efd8:	b005      	add	sp, #20
    efda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    efde:	4b43      	ldr	r3, [pc, #268]	; (f0ec <z_impl_log_process+0x178>)
    efe0:	781b      	ldrb	r3, [r3, #0]
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    efe2:	b9eb      	cbnz	r3, f020 <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    efe4:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    efe6:	07db      	lsls	r3, r3, #31
    efe8:	d41a      	bmi.n	f020 <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
    efea:	f014 f909 	bl	23200 <log_msg_str_get>
    efee:	4681      	mov	r9, r0
	mask = count_s(msg_str, log_msg_nargs_get(msg));
    eff0:	4628      	mov	r0, r5
    eff2:	f014 f8d6 	bl	231a2 <log_msg_nargs_get>
	bool arm = false;
    eff6:	46a2      	mov	sl, r4
	mask = count_s(msg_str, log_msg_nargs_get(msg));
    eff8:	4602      	mov	r2, r0
    effa:	464b      	mov	r3, r9
	u32_t mask = 0;
    effc:	4626      	mov	r6, r4
	u32_t arg = 0;
    effe:	4627      	mov	r7, r4
				mask |= BIT(arg);
    f000:	2101      	movs	r1, #1
	while ((curr = *str++) && arg < nargs) {
    f002:	f813 bb01 	ldrb.w	fp, [r3], #1
    f006:	f1bb 0f00 	cmp.w	fp, #0
    f00a:	d001      	beq.n	f010 <z_impl_log_process+0x9c>
    f00c:	42ba      	cmp	r2, r7
    f00e:	d80e      	bhi.n	f02e <z_impl_log_process+0xba>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    f010:	4b37      	ldr	r3, [pc, #220]	; (f0f0 <z_impl_log_process+0x17c>)
				LOG_ERR(ERR_MSG, idx, msg_str);
    f012:	4a38      	ldr	r2, [pc, #224]	; (f0f4 <z_impl_log_process+0x180>)
    f014:	f8df b0f4 	ldr.w	fp, [pc, #244]	; f10c <z_impl_log_process+0x198>
    f018:	1a9b      	subs	r3, r3, r2
    f01a:	f3c3 0ac9 	ubfx	sl, r3, #3, #10
	while (mask) {
    f01e:	bb36      	cbnz	r6, f06e <z_impl_log_process+0xfa>
    f020:	4e35      	ldr	r6, [pc, #212]	; (f0f8 <z_impl_log_process+0x184>)
    f022:	4f36      	ldr	r7, [pc, #216]	; (f0fc <z_impl_log_process+0x188>)
    f024:	f04f 0800 	mov.w	r8, #0
    f028:	1bbf      	subs	r7, r7, r6
    f02a:	113f      	asrs	r7, r7, #4
    f02c:	e053      	b.n	f0d6 <z_impl_log_process+0x162>
		if (curr == '%') {
    f02e:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    f032:	d102      	bne.n	f03a <z_impl_log_process+0xc6>
			arm = !arm;
    f034:	f08a 0a01 	eor.w	sl, sl, #1
    f038:	e7e3      	b.n	f002 <z_impl_log_process+0x8e>
		} else if (arm && isalpha(curr)) {
    f03a:	f1ba 0f00 	cmp.w	sl, #0
    f03e:	d0e0      	beq.n	f002 <z_impl_log_process+0x8e>
    f040:	e9cd 3102 	strd	r3, r1, [sp, #8]
    f044:	9201      	str	r2, [sp, #4]
    f046:	f012 faa1 	bl	2158c <__locale_ctype_ptr>
    f04a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    f04e:	4458      	add	r0, fp
    f050:	7840      	ldrb	r0, [r0, #1]
    f052:	9903      	ldr	r1, [sp, #12]
    f054:	f010 0f03 	tst.w	r0, #3
    f058:	d0d3      	beq.n	f002 <z_impl_log_process+0x8e>
			if (curr == 's') {
    f05a:	f1bb 0f73 	cmp.w	fp, #115	; 0x73
				mask |= BIT(arg);
    f05e:	bf04      	itt	eq
    f060:	fa01 f007 	lsleq.w	r0, r1, r7
    f064:	4306      	orreq	r6, r0
			arg++;
    f066:	3701      	adds	r7, #1
			arm = false;
    f068:	f04f 0a00 	mov.w	sl, #0
    f06c:	e7c9      	b.n	f002 <z_impl_log_process+0x8e>
		idx = 31 - __builtin_clz(mask);
    f06e:	fab6 f786 	clz	r7, r6
    f072:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    f076:	4639      	mov	r1, r7
    f078:	4628      	mov	r0, r5
    f07a:	f014 f895 	bl	231a8 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    f07e:	4b20      	ldr	r3, [pc, #128]	; (f100 <z_impl_log_process+0x18c>)
		str = (const char *)log_msg_arg_get(msg, idx);
    f080:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    f082:	4298      	cmp	r0, r3
    f084:	d302      	bcc.n	f08c <z_impl_log_process+0x118>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    f086:	4b1f      	ldr	r3, [pc, #124]	; (f104 <z_impl_log_process+0x190>)
    f088:	4298      	cmp	r0, r3
    f08a:	d313      	bcc.n	f0b4 <z_impl_log_process+0x140>
    f08c:	4610      	mov	r0, r2
    f08e:	f7ff ff63 	bl	ef58 <log_is_strdup>
    f092:	b978      	cbnz	r0, f0b4 <z_impl_log_process+0x140>
    f094:	4b1c      	ldr	r3, [pc, #112]	; (f108 <z_impl_log_process+0x194>)
    f096:	429a      	cmp	r2, r3
    f098:	d00c      	beq.n	f0b4 <z_impl_log_process+0x140>
				LOG_ERR(ERR_MSG, idx, msg_str);
    f09a:	2301      	movs	r3, #1
    f09c:	f363 0802 	bfi	r8, r3, #0, #3
    f0a0:	f360 08c5 	bfi	r8, r0, #3, #3
    f0a4:	f36a 188f 	bfi	r8, sl, #6, #10
    f0a8:	4643      	mov	r3, r8
    f0aa:	464a      	mov	r2, r9
    f0ac:	4639      	mov	r1, r7
    f0ae:	4658      	mov	r0, fp
    f0b0:	f013 ffde 	bl	23070 <log_2>
		mask &= ~BIT(idx);
    f0b4:	2301      	movs	r3, #1
    f0b6:	fa03 f707 	lsl.w	r7, r3, r7
    f0ba:	ea26 0607 	bic.w	r6, r6, r7
    f0be:	e7ae      	b.n	f01e <z_impl_log_process+0xaa>
	return backend->cb->active;
    f0c0:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    f0c2:	795b      	ldrb	r3, [r3, #5]
    f0c4:	b123      	cbz	r3, f0d0 <z_impl_log_process+0x15c>
	backend->api->put(backend, msg);
    f0c6:	6833      	ldr	r3, [r6, #0]
    f0c8:	4629      	mov	r1, r5
    f0ca:	681b      	ldr	r3, [r3, #0]
    f0cc:	4630      	mov	r0, r6
    f0ce:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    f0d0:	f108 0801 	add.w	r8, r8, #1
    f0d4:	3610      	adds	r6, #16
    f0d6:	45b8      	cmp	r8, r7
    f0d8:	dbf2      	blt.n	f0c0 <z_impl_log_process+0x14c>
    f0da:	e76d      	b.n	efb8 <z_impl_log_process+0x44>
    f0dc:	20022689 	.word	0x20022689
    f0e0:	200200fc 	.word	0x200200fc
    f0e4:	200200f0 	.word	0x200200f0
    f0e8:	200200f4 	.word	0x200200f4
    f0ec:	2002268a 	.word	0x2002268a
    f0f0:	000258d0 	.word	0x000258d0
    f0f4:	000258c0 	.word	0x000258c0
    f0f8:	00025908 	.word	0x00025908
    f0fc:	00025918 	.word	0x00025918
    f100:	00025604 	.word	0x00025604
    f104:	00027ab8 	.word	0x00027ab8
    f108:	000270f7 	.word	0x000270f7
    f10c:	0002714e 	.word	0x0002714e

0000f110 <z_impl_log_panic>:
{
    f110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    f112:	4f0e      	ldr	r7, [pc, #56]	; (f14c <z_impl_log_panic+0x3c>)
    f114:	783d      	ldrb	r5, [r7, #0]
    f116:	b975      	cbnz	r5, f136 <z_impl_log_panic+0x26>
	log_init();
    f118:	f7ff feb6 	bl	ee88 <log_init>
	return __log_backends_end - __log_backends_start;
    f11c:	4c0c      	ldr	r4, [pc, #48]	; (f150 <z_impl_log_panic+0x40>)
    f11e:	4e0d      	ldr	r6, [pc, #52]	; (f154 <z_impl_log_panic+0x44>)
    f120:	1b36      	subs	r6, r6, r4
    f122:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    f124:	42b5      	cmp	r5, r6
    f126:	db07      	blt.n	f138 <z_impl_log_panic+0x28>
	if (z_syscall_trap()) {
		return (bool) z_arch_syscall_invoke1(*(u32_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    f128:	2000      	movs	r0, #0
    f12a:	f7ff ff23 	bl	ef74 <z_impl_log_process>
		while (log_process(false) == true) {
    f12e:	2800      	cmp	r0, #0
    f130:	d1fa      	bne.n	f128 <z_impl_log_panic+0x18>
	panic_mode = true;
    f132:	2301      	movs	r3, #1
    f134:	703b      	strb	r3, [r7, #0]
}
    f136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    f138:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    f13a:	795b      	ldrb	r3, [r3, #5]
    f13c:	b11b      	cbz	r3, f146 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    f13e:	6823      	ldr	r3, [r4, #0]
    f140:	4620      	mov	r0, r4
    f142:	691b      	ldr	r3, [r3, #16]
    f144:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    f146:	3501      	adds	r5, #1
    f148:	3410      	adds	r4, #16
    f14a:	e7eb      	b.n	f124 <z_impl_log_panic+0x14>
    f14c:	2002268a 	.word	0x2002268a
    f150:	00025908 	.word	0x00025908
    f154:	00025918 	.word	0x00025918

0000f158 <log_process_thread_func>:
{
    f158:	b508      	push	{r3, lr}
	log_init();
    f15a:	f7ff fe95 	bl	ee88 <log_init>
	return z_impl_k_current_get();
    f15e:	f011 fc89 	bl	20a74 <z_impl_k_current_get>
	proc_tid = process_tid;
    f162:	4b0b      	ldr	r3, [pc, #44]	; (f190 <log_process_thread_func+0x38>)
    f164:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    f166:	b130      	cbz	r0, f176 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    f168:	4b0a      	ldr	r3, [pc, #40]	; (f194 <log_process_thread_func+0x3c>)
	    process_tid &&
    f16a:	681b      	ldr	r3, [r3, #0]
    f16c:	2b09      	cmp	r3, #9
    f16e:	dd02      	ble.n	f176 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    f170:	4809      	ldr	r0, [pc, #36]	; (f198 <log_process_thread_func+0x40>)
    f172:	f011 fc85 	bl	20a80 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    f176:	4c08      	ldr	r4, [pc, #32]	; (f198 <log_process_thread_func+0x40>)
    f178:	2000      	movs	r0, #0
    f17a:	f7ff fefb 	bl	ef74 <z_impl_log_process>
		if (log_process(false) == false) {
    f17e:	2800      	cmp	r0, #0
    f180:	d1fa      	bne.n	f178 <log_process_thread_func+0x20>
    f182:	f04f 31ff 	mov.w	r1, #4294967295
    f186:	4620      	mov	r0, r4
    f188:	f011 fca6 	bl	20ad8 <z_impl_k_sem_take>
    f18c:	e7f4      	b.n	f178 <log_process_thread_func+0x20>
    f18e:	bf00      	nop
    f190:	200201fc 	.word	0x200201fc
    f194:	200200f0 	.word	0x200200f0
    f198:	20024c18 	.word	0x20024c18

0000f19c <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    f19c:	4b24      	ldr	r3, [pc, #144]	; (f230 <msg_finalize+0x94>)
{
    f19e:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    f1a0:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    f1a2:	8141      	strh	r1, [r0, #10]
{
    f1a4:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    f1a6:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    f1a8:	4c22      	ldr	r4, [pc, #136]	; (f234 <msg_finalize+0x98>)
    f1aa:	60e8      	str	r0, [r5, #12]
    f1ac:	e8d4 3fef 	ldaex	r3, [r4]
    f1b0:	3301      	adds	r3, #1
    f1b2:	e8c4 3fe2 	stlex	r2, r3, [r4]
    f1b6:	2a00      	cmp	r2, #0
    f1b8:	d1f8      	bne.n	f1ac <msg_finalize+0x10>
	__asm__ volatile(
    f1ba:	f04f 0320 	mov.w	r3, #32
    f1be:	f3ef 8611 	mrs	r6, BASEPRI
    f1c2:	f383 8811 	msr	BASEPRI, r3
    f1c6:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    f1ca:	481b      	ldr	r0, [pc, #108]	; (f238 <msg_finalize+0x9c>)
    f1cc:	4629      	mov	r1, r5
    f1ce:	f013 ff0f 	bl	22ff0 <log_list_add_tail>
	__asm__ volatile(
    f1d2:	f386 8811 	msr	BASEPRI, r6
    f1d6:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    f1da:	4b18      	ldr	r3, [pc, #96]	; (f23c <msg_finalize+0xa0>)
    f1dc:	781a      	ldrb	r2, [r3, #0]
    f1de:	b17a      	cbz	r2, f200 <msg_finalize+0x64>
	__asm__ volatile(
    f1e0:	f04f 0320 	mov.w	r3, #32
    f1e4:	f3ef 8411 	mrs	r4, BASEPRI
    f1e8:	f383 8811 	msr	BASEPRI, r3
    f1ec:	f3bf 8f6f 	isb	sy
    f1f0:	2000      	movs	r0, #0
    f1f2:	f7ff febf 	bl	ef74 <z_impl_log_process>
	__asm__ volatile(
    f1f6:	f384 8811 	msr	BASEPRI, r4
    f1fa:	f3bf 8f6f 	isb	sy
}
    f1fe:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    f200:	490f      	ldr	r1, [pc, #60]	; (f240 <msg_finalize+0xa4>)
    f202:	6823      	ldr	r3, [r4, #0]
    f204:	6809      	ldr	r1, [r1, #0]
    f206:	2900      	cmp	r1, #0
    f208:	d0f9      	beq.n	f1fe <msg_finalize+0x62>
    f20a:	2b01      	cmp	r3, #1
    f20c:	d106      	bne.n	f21c <msg_finalize+0x80>
}
    f20e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_timer_start(timer, duration, period);
    f212:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f216:	480b      	ldr	r0, [pc, #44]	; (f244 <msg_finalize+0xa8>)
    f218:	f011 be64 	b.w	20ee4 <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    f21c:	2b0a      	cmp	r3, #10
    f21e:	d1ee      	bne.n	f1fe <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    f220:	4808      	ldr	r0, [pc, #32]	; (f244 <msg_finalize+0xa8>)
    f222:	f015 faa6 	bl	24772 <z_impl_k_timer_stop>
}
    f226:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_sem_give(sem);
    f22a:	4807      	ldr	r0, [pc, #28]	; (f248 <msg_finalize+0xac>)
    f22c:	f011 bc28 	b.w	20a80 <z_impl_k_sem_give>
    f230:	20024918 	.word	0x20024918
    f234:	200200f0 	.word	0x200200f0
    f238:	200200fc 	.word	0x200200fc
    f23c:	2002268a 	.word	0x2002268a
    f240:	200201fc 	.word	0x200201fc
    f244:	20020104 	.word	0x20020104
    f248:	20024c18 	.word	0x20024c18

0000f24c <log_free>:
{
    f24c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    f24e:	3804      	subs	r0, #4
    f250:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    f252:	e8d0 3fef 	ldaex	r3, [r0]
    f256:	1e5a      	subs	r2, r3, #1
    f258:	e8c0 2fe1 	stlex	r1, r2, [r0]
    f25c:	2900      	cmp	r1, #0
    f25e:	d1f8      	bne.n	f252 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    f260:	2b01      	cmp	r3, #1
    f262:	d103      	bne.n	f26c <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    f264:	a901      	add	r1, sp, #4
    f266:	4803      	ldr	r0, [pc, #12]	; (f274 <log_free+0x28>)
    f268:	f011 f8b2 	bl	203d0 <k_mem_slab_free>
}
    f26c:	b003      	add	sp, #12
    f26e:	f85d fb04 	ldr.w	pc, [sp], #4
    f272:	bf00      	nop
    f274:	20020130 	.word	0x20020130

0000f278 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    f278:	2320      	movs	r3, #32
    f27a:	4902      	ldr	r1, [pc, #8]	; (f284 <log_msg_pool_init+0xc>)
    f27c:	461a      	mov	r2, r3
    f27e:	4802      	ldr	r0, [pc, #8]	; (f288 <log_msg_pool_init+0x10>)
    f280:	f015 b89f 	b.w	243c2 <k_mem_slab_init>
    f284:	20024510 	.word	0x20024510
    f288:	20020200 	.word	0x20020200

0000f28c <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    f28c:	2300      	movs	r3, #0
{
    f28e:	b573      	push	{r0, r1, r4, r5, r6, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    f290:	4e0a      	ldr	r6, [pc, #40]	; (f2bc <log_msg_no_space_handle+0x30>)
	union log_msg_chunk *msg = NULL;
    f292:	ac02      	add	r4, sp, #8
    f294:	f844 3d04 	str.w	r3, [r4, #-4]!
    f298:	2001      	movs	r0, #1
    f29a:	f7ff fe6b 	bl	ef74 <z_impl_log_process>
    f29e:	4605      	mov	r5, r0
			log_dropped();
    f2a0:	f7ff fdbe 	bl	ee20 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    f2a4:	2200      	movs	r2, #0
    f2a6:	4621      	mov	r1, r4
    f2a8:	4630      	mov	r0, r6
    f2aa:	f011 f863 	bl	20374 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    f2ae:	b108      	cbz	r0, f2b4 <log_msg_no_space_handle+0x28>
    f2b0:	2d00      	cmp	r5, #0
    f2b2:	d1f1      	bne.n	f298 <log_msg_no_space_handle+0xc>
	} else {
		log_dropped();
	}
	return msg;

}
    f2b4:	9801      	ldr	r0, [sp, #4]
    f2b6:	b002      	add	sp, #8
    f2b8:	bd70      	pop	{r4, r5, r6, pc}
    f2ba:	bf00      	nop
    f2bc:	20020200 	.word	0x20020200

0000f2c0 <log_msg_chunk_alloc>:
{
    f2c0:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    f2c2:	2200      	movs	r2, #0
    f2c4:	a902      	add	r1, sp, #8
    f2c6:	f841 2d04 	str.w	r2, [r1, #-4]!
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    f2ca:	4805      	ldr	r0, [pc, #20]	; (f2e0 <log_msg_chunk_alloc+0x20>)
    f2cc:	f011 f852 	bl	20374 <k_mem_slab_alloc>
	if (err != 0) {
    f2d0:	b110      	cbz	r0, f2d8 <log_msg_chunk_alloc+0x18>
		msg = log_msg_no_space_handle();
    f2d2:	f7ff ffdb 	bl	f28c <log_msg_no_space_handle>
    f2d6:	9001      	str	r0, [sp, #4]
}
    f2d8:	9801      	ldr	r0, [sp, #4]
    f2da:	b003      	add	sp, #12
    f2dc:	f85d fb04 	ldr.w	pc, [sp], #4
    f2e0:	20020200 	.word	0x20020200

0000f2e4 <msg_free>:
{
    f2e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f2e6:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
    f2e8:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    f2ea:	f014 0401 	ands.w	r4, r4, #1
{
    f2ee:	9001      	str	r0, [sp, #4]
	u32_t nargs = msg->hdr.params.std.nargs;
    f2f0:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    f2f4:	d010      	beq.n	f318 <msg_free+0x34>
	if (msg->hdr.params.generic.ext == 1) {
    f2f6:	9b01      	ldr	r3, [sp, #4]
    f2f8:	7a1a      	ldrb	r2, [r3, #8]
    f2fa:	0792      	lsls	r2, r2, #30
    f2fc:	d506      	bpl.n	f30c <msg_free+0x28>
    f2fe:	695b      	ldr	r3, [r3, #20]
    f300:	ac04      	add	r4, sp, #16
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    f302:	4d11      	ldr	r5, [pc, #68]	; (f348 <msg_free+0x64>)
    f304:	f844 3d04 	str.w	r3, [r4, #-4]!
	while (cont != NULL) {
    f308:	9b03      	ldr	r3, [sp, #12]
    f30a:	b9b3      	cbnz	r3, f33a <msg_free+0x56>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    f30c:	a901      	add	r1, sp, #4
    f30e:	480e      	ldr	r0, [pc, #56]	; (f348 <msg_free+0x64>)
    f310:	f011 f85e 	bl	203d0 <k_mem_slab_free>
}
    f314:	b004      	add	sp, #16
    f316:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
    f318:	2d00      	cmp	r5, #0
    f31a:	d0ec      	beq.n	f2f6 <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
    f31c:	42ac      	cmp	r4, r5
    f31e:	9801      	ldr	r0, [sp, #4]
    f320:	d2e9      	bcs.n	f2f6 <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
    f322:	4621      	mov	r1, r4
    f324:	f013 ff40 	bl	231a8 <log_msg_arg_get>
    f328:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
    f32a:	f7ff fe15 	bl	ef58 <log_is_strdup>
    f32e:	b110      	cbz	r0, f336 <msg_free+0x52>
				log_free(buf);
    f330:	4630      	mov	r0, r6
    f332:	f7ff ff8b 	bl	f24c <log_free>
		for (i = 0; i < nargs; i++) {
    f336:	3401      	adds	r4, #1
    f338:	e7f0      	b.n	f31c <msg_free+0x38>
		next = cont->next;
    f33a:	681e      	ldr	r6, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    f33c:	4621      	mov	r1, r4
    f33e:	4628      	mov	r0, r5
    f340:	f011 f846 	bl	203d0 <k_mem_slab_free>
		cont = next;
    f344:	9603      	str	r6, [sp, #12]
    f346:	e7df      	b.n	f308 <msg_free+0x24>
    f348:	20020200 	.word	0x20020200

0000f34c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    f34c:	b40e      	push	{r1, r2, r3}
    f34e:	b503      	push	{r0, r1, lr}
    f350:	ab03      	add	r3, sp, #12
    f352:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    f356:	4601      	mov	r1, r0
    f358:	4804      	ldr	r0, [pc, #16]	; (f36c <print_formatted+0x20>)
	va_start(args, fmt);
    f35a:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    f35c:	f013 fcbe 	bl	22cdc <z_vprintk>
#endif
	va_end(args);

	return length;
}
    f360:	2000      	movs	r0, #0
    f362:	b002      	add	sp, #8
    f364:	f85d eb04 	ldr.w	lr, [sp], #4
    f368:	b003      	add	sp, #12
    f36a:	4770      	bx	lr
    f36c:	000235b5 	.word	0x000235b5

0000f370 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    f370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    f374:	f011 0402 	ands.w	r4, r1, #2
{
    f378:	b085      	sub	sp, #20
    f37a:	4606      	mov	r6, r0
    f37c:	4690      	mov	r8, r2
    f37e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    f382:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    f386:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    f38a:	d007      	beq.n	f39c <prefix_print+0x2c>
	if (!format) {
    f38c:	f011 0f44 	tst.w	r1, #68	; 0x44
    f390:	d137      	bne.n	f402 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    f392:	461a      	mov	r2, r3
    f394:	4932      	ldr	r1, [pc, #200]	; (f460 <prefix_print+0xf0>)
    f396:	f7ff ffd9 	bl	f34c <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    f39a:	4604      	mov	r4, r0
	if (color) {
    f39c:	f1b9 0f00 	cmp.w	r9, #0
    f3a0:	d00a      	beq.n	f3b8 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    f3a2:	4b30      	ldr	r3, [pc, #192]	; (f464 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    f3a4:	4930      	ldr	r1, [pc, #192]	; (f468 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    f3a6:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    f3aa:	4b30      	ldr	r3, [pc, #192]	; (f46c <prefix_print+0xfc>)
    f3ac:	4630      	mov	r0, r6
    f3ae:	2a00      	cmp	r2, #0
    f3b0:	bf08      	it	eq
    f3b2:	461a      	moveq	r2, r3
    f3b4:	f7ff ffca 	bl	f34c <print_formatted>
	if (level_on) {
    f3b8:	b13d      	cbz	r5, f3ca <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    f3ba:	4b2d      	ldr	r3, [pc, #180]	; (f470 <prefix_print+0x100>)
    f3bc:	492d      	ldr	r1, [pc, #180]	; (f474 <prefix_print+0x104>)
    f3be:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    f3c2:	4630      	mov	r0, r6
    f3c4:	f7ff ffc2 	bl	f34c <print_formatted>
    f3c8:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    f3ca:	f1b8 0f00 	cmp.w	r8, #0
    f3ce:	d044      	beq.n	f45a <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    f3d0:	2301      	movs	r3, #1
    f3d2:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    f3d6:	4b28      	ldr	r3, [pc, #160]	; (f478 <prefix_print+0x108>)
    f3d8:	f017 0f10 	tst.w	r7, #16
    f3dc:	4f27      	ldr	r7, [pc, #156]	; (f47c <prefix_print+0x10c>)
    f3de:	bf18      	it	ne
    f3e0:	461f      	movne	r7, r3
    f3e2:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    f3e6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    f3ea:	f7ff fd25 	bl	ee38 <log_source_name_get>
    f3ee:	4639      	mov	r1, r7
    f3f0:	4602      	mov	r2, r0
    f3f2:	4630      	mov	r0, r6
    f3f4:	f7ff ffaa 	bl	f34c <print_formatted>
    f3f8:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    f3fa:	4420      	add	r0, r4
    f3fc:	b005      	add	sp, #20
    f3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    f402:	4a1f      	ldr	r2, [pc, #124]	; (f480 <prefix_print+0x110>)
    f404:	6811      	ldr	r1, [r2, #0]
    f406:	b331      	cbz	r1, f456 <prefix_print+0xe6>
		timestamp /= timestamp_div;
    f408:	4a1e      	ldr	r2, [pc, #120]	; (f484 <prefix_print+0x114>)
    f40a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    f40e:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    f410:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    f414:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
    f418:	fbb3 f4f1 	udiv	r4, r3, r1
    f41c:	fbb4 f2fe 	udiv	r2, r4, lr
    f420:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    f424:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    f428:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f42c:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    f430:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f434:	fb01 441b 	mls	r4, r1, fp, r4
    f438:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    f43c:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f440:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    f444:	e9cd b101 	strd	fp, r1, [sp, #4]
    f448:	fb0a e113 	mls	r1, sl, r3, lr
    f44c:	9100      	str	r1, [sp, #0]
    f44e:	490e      	ldr	r1, [pc, #56]	; (f488 <prefix_print+0x118>)
    f450:	f7ff ff7c 	bl	f34c <print_formatted>
    f454:	e7a1      	b.n	f39a <prefix_print+0x2a>
		length = 0;
    f456:	4608      	mov	r0, r1
    f458:	e79f      	b.n	f39a <prefix_print+0x2a>
	total += print_formatted(log_output,
    f45a:	4f08      	ldr	r7, [pc, #32]	; (f47c <prefix_print+0x10c>)
    f45c:	e7c1      	b.n	f3e2 <prefix_print+0x72>
    f45e:	bf00      	nop
    f460:	000271ce 	.word	0x000271ce
    f464:	00025a30 	.word	0x00025a30
    f468:	000278b9 	.word	0x000278b9
    f46c:	000271c0 	.word	0x000271c0
    f470:	00025a44 	.word	0x00025a44
    f474:	000271f3 	.word	0x000271f3
    f478:	000271c5 	.word	0x000271c5
    f47c:	000271c9 	.word	0x000271c9
    f480:	2002021c 	.word	0x2002021c
    f484:	20020220 	.word	0x20020220
    f488:	000271d7 	.word	0x000271d7

0000f48c <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    f48c:	b538      	push	{r3, r4, r5, lr}
    f48e:	460c      	mov	r4, r1
	if (color) {
    f490:	07e1      	lsls	r1, r4, #31
{
    f492:	4605      	mov	r5, r0
	if (color) {
    f494:	d503      	bpl.n	f49e <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    f496:	4a08      	ldr	r2, [pc, #32]	; (f4b8 <postfix_print+0x2c>)
    f498:	4908      	ldr	r1, [pc, #32]	; (f4bc <postfix_print+0x30>)
    f49a:	f7ff ff57 	bl	f34c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f49e:	06e2      	lsls	r2, r4, #27
    f4a0:	d408      	bmi.n	f4b4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f4a2:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    f4a4:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    f4a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    f4aa:	bf4c      	ite	mi
    f4ac:	4904      	ldrmi	r1, [pc, #16]	; (f4c0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    f4ae:	4905      	ldrpl	r1, [pc, #20]	; (f4c4 <postfix_print+0x38>)
    f4b0:	f7ff bf4c 	b.w	f34c <print_formatted>
}
    f4b4:	bd38      	pop	{r3, r4, r5, pc}
    f4b6:	bf00      	nop
    f4b8:	000271c0 	.word	0x000271c0
    f4bc:	000278b9 	.word	0x000278b9
    f4c0:	000271b2 	.word	0x000271b2
    f4c4:	000271b1 	.word	0x000271b1

0000f4c8 <hexdump_line_print>:
{
    f4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f4cc:	4698      	mov	r8, r3
    f4ce:	9b08      	ldr	r3, [sp, #32]
    f4d0:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f4d2:	06dd      	lsls	r5, r3, #27
{
    f4d4:	460e      	mov	r6, r1
    f4d6:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f4d8:	d405      	bmi.n	f4e6 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f4da:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    f4dc:	bf4c      	ite	mi
    f4de:	492b      	ldrmi	r1, [pc, #172]	; (f58c <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
    f4e0:	492b      	ldrpl	r1, [pc, #172]	; (f590 <hexdump_line_print+0xc8>)
    f4e2:	f7ff ff33 	bl	f34c <print_formatted>
{
    f4e6:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
    f4e8:	f8df 90ac 	ldr.w	r9, [pc, #172]	; f598 <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
    f4ec:	4545      	cmp	r5, r8
    f4ee:	db2f      	blt.n	f550 <hexdump_line_print+0x88>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f4f0:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    f4f2:	f8df 80a8 	ldr.w	r8, [pc, #168]	; f59c <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
    f4f6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; f5a0 <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
    f4fa:	f8df a09c 	ldr.w	sl, [pc, #156]	; f598 <hexdump_line_print+0xd0>
		if (i < length) {
    f4fe:	42af      	cmp	r7, r5
    f500:	d933      	bls.n	f56a <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
    f502:	5d72      	ldrb	r2, [r6, r5]
    f504:	4649      	mov	r1, r9
    f506:	4620      	mov	r0, r4
    f508:	f7ff ff20 	bl	f34c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f50c:	3501      	adds	r5, #1
    f50e:	2d10      	cmp	r5, #16
    f510:	d124      	bne.n	f55c <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
    f512:	4920      	ldr	r1, [pc, #128]	; (f594 <hexdump_line_print+0xcc>)
    f514:	4620      	mov	r0, r4
    f516:	f7ff ff19 	bl	f34c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f51a:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    f51c:	f8df 8078 	ldr.w	r8, [pc, #120]	; f598 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%c",
    f520:	f8df a080 	ldr.w	sl, [pc, #128]	; f5a4 <hexdump_line_print+0xdc>
		if (i < length) {
    f524:	42af      	cmp	r7, r5
    f526:	d92c      	bls.n	f582 <hexdump_line_print+0xba>
			char c = (char)data[i];
    f528:	f816 9005 	ldrb.w	r9, [r6, r5]
			      isprint((int)c) ? c : '.');
    f52c:	f012 f82e 	bl	2158c <__locale_ctype_ptr>
    f530:	4448      	add	r0, r9
			print_formatted(log_output, "%c",
    f532:	7843      	ldrb	r3, [r0, #1]
    f534:	4651      	mov	r1, sl
    f536:	f013 0f97 	tst.w	r3, #151	; 0x97
    f53a:	bf14      	ite	ne
    f53c:	464a      	movne	r2, r9
    f53e:	222e      	moveq	r2, #46	; 0x2e
    f540:	4620      	mov	r0, r4
    f542:	f7ff ff03 	bl	f34c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f546:	3501      	adds	r5, #1
    f548:	2d10      	cmp	r5, #16
    f54a:	d113      	bne.n	f574 <hexdump_line_print+0xac>
}
    f54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    f550:	4649      	mov	r1, r9
    f552:	4620      	mov	r0, r4
    f554:	f7ff fefa 	bl	f34c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    f558:	3501      	adds	r5, #1
    f55a:	e7c7      	b.n	f4ec <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
    f55c:	076a      	lsls	r2, r5, #29
    f55e:	d1ce      	bne.n	f4fe <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
    f560:	4651      	mov	r1, sl
    f562:	4620      	mov	r0, r4
    f564:	f7ff fef2 	bl	f34c <print_formatted>
    f568:	e7c9      	b.n	f4fe <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
    f56a:	4641      	mov	r1, r8
    f56c:	4620      	mov	r0, r4
    f56e:	f7ff feed 	bl	f34c <print_formatted>
    f572:	e7cb      	b.n	f50c <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
    f574:	076b      	lsls	r3, r5, #29
    f576:	d1d5      	bne.n	f524 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    f578:	4641      	mov	r1, r8
    f57a:	4620      	mov	r0, r4
    f57c:	f7ff fee6 	bl	f34c <print_formatted>
    f580:	e7d0      	b.n	f524 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    f582:	4641      	mov	r1, r8
    f584:	4620      	mov	r0, r4
    f586:	f7ff fee1 	bl	f34c <print_formatted>
    f58a:	e7dc      	b.n	f546 <hexdump_line_print+0x7e>
    f58c:	000271b2 	.word	0x000271b2
    f590:	000271b1 	.word	0x000271b1
    f594:	0002718e 	.word	0x0002718e
    f598:	0002718c 	.word	0x0002718c
    f59c:	0002718a 	.word	0x0002718a
    f5a0:	00027184 	.word	0x00027184
    f5a4:	00027190 	.word	0x00027190

0000f5a8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    f5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f5ac:	4617      	mov	r7, r2
    f5ae:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.level;
    f5b0:	7a8b      	ldrb	r3, [r1, #10]
    f5b2:	43d2      	mvns	r2, r2
	u16_t source_id = (u16_t)log_msg_source_id_get(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	int prefix_offset;

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f5b4:	f013 0407 	ands.w	r4, r3, #7
{
    f5b8:	b08a      	sub	sp, #40	; 0x28
    f5ba:	4605      	mov	r5, r0
    f5bc:	460e      	mov	r6, r1
    f5be:	b2d2      	uxtb	r2, r2
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f5c0:	d01b      	beq.n	f5fa <log_output_msg_process+0x52>
	return msg->hdr.ids.source_id;
    f5c2:	8949      	ldrh	r1, [r1, #10]
    f5c4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f5c8:	0989      	lsrs	r1, r1, #6
    f5ca:	9102      	str	r1, [sp, #8]
    f5cc:	e9cd 4300 	strd	r4, r3, [sp]
    f5d0:	f002 0201 	and.w	r2, r2, #1
    f5d4:	68f3      	ldr	r3, [r6, #12]
    f5d6:	4639      	mov	r1, r7
    f5d8:	f7ff feca 	bl	f370 <prefix_print>
    f5dc:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f5de:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    f5e0:	07da      	lsls	r2, r3, #31
    f5e2:	d40c      	bmi.n	f5fe <log_output_msg_process+0x56>
		std_print(msg, log_output);
    f5e4:	4629      	mov	r1, r5
    f5e6:	4630      	mov	r0, r6
    f5e8:	f013 fe7a 	bl	232e0 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    f5ec:	b34c      	cbz	r4, f642 <log_output_msg_process+0x9a>
		postfix_print(log_output, flags, level);
    f5ee:	4622      	mov	r2, r4
    f5f0:	4639      	mov	r1, r7
    f5f2:	4628      	mov	r0, r5
    f5f4:	f7ff ff4a 	bl	f48c <postfix_print>
    f5f8:	e023      	b.n	f642 <log_output_msg_process+0x9a>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f5fa:	46a1      	mov	r9, r4
    f5fc:	e7ef      	b.n	f5de <log_output_msg_process+0x36>
	} else if (raw_string) {
    f5fe:	bb34      	cbnz	r4, f64e <log_output_msg_process+0xa6>
	size_t offset = 0;
    f600:	4627      	mov	r7, r4
		length = log_output->size;
    f602:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    f604:	aa06      	add	r2, sp, #24
		length = log_output->size;
    f606:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    f608:	68a9      	ldr	r1, [r5, #8]
    f60a:	463b      	mov	r3, r7
    f60c:	4630      	mov	r0, r6
    f60e:	f013 fe53 	bl	232b8 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    f612:	9a06      	ldr	r2, [sp, #24]
    f614:	686b      	ldr	r3, [r5, #4]
    f616:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    f618:	b13a      	cbz	r2, f62a <log_output_msg_process+0x82>
			eol = (log_output->buf[length - 1] == '\n');
    f61a:	68ab      	ldr	r3, [r5, #8]
    f61c:	4413      	add	r3, r2
    f61e:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    f622:	f1a4 030a 	sub.w	r3, r4, #10
    f626:	425c      	negs	r4, r3
    f628:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    f62a:	4628      	mov	r0, r5
    f62c:	f013 ffb5 	bl	2359a <log_output_flush>
		offset += length;
    f630:	9b06      	ldr	r3, [sp, #24]
    f632:	441f      	add	r7, r3
	} while (length > 0);
    f634:	2b00      	cmp	r3, #0
    f636:	d1e4      	bne.n	f602 <log_output_msg_process+0x5a>
	if (eol) {
    f638:	b11c      	cbz	r4, f642 <log_output_msg_process+0x9a>
		print_formatted(log_output, "\r");
    f63a:	4915      	ldr	r1, [pc, #84]	; (f690 <log_output_msg_process+0xe8>)
    f63c:	4628      	mov	r0, r5
    f63e:	f7ff fe85 	bl	f34c <print_formatted>
	}

	log_output_flush(log_output);
    f642:	4628      	mov	r0, r5
    f644:	f013 ffa9 	bl	2359a <log_output_flush>
}
    f648:	b00a      	add	sp, #40	; 0x28
    f64a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    f64e:	4630      	mov	r0, r6
    f650:	f013 fdd6 	bl	23200 <log_msg_str_get>
    f654:	490f      	ldr	r1, [pc, #60]	; (f694 <log_output_msg_process+0xec>)
    f656:	4602      	mov	r2, r0
    f658:	4628      	mov	r0, r5
    f65a:	f7ff fe77 	bl	f34c <print_formatted>
	u32_t offset = 0U;
    f65e:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
    f662:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    f666:	aa05      	add	r2, sp, #20
    f668:	4643      	mov	r3, r8
    f66a:	a906      	add	r1, sp, #24
    f66c:	4630      	mov	r0, r6
		length = sizeof(buf);
    f66e:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    f672:	f013 fe21 	bl	232b8 <log_msg_hexdump_data_get>
		if (length) {
    f676:	9a05      	ldr	r2, [sp, #20]
    f678:	2a00      	cmp	r2, #0
    f67a:	d0b8      	beq.n	f5ee <log_output_msg_process+0x46>
			hexdump_line_print(log_output, buf, length,
    f67c:	464b      	mov	r3, r9
    f67e:	9700      	str	r7, [sp, #0]
    f680:	a906      	add	r1, sp, #24
    f682:	4628      	mov	r0, r5
    f684:	f7ff ff20 	bl	f4c8 <hexdump_line_print>
			offset += length;
    f688:	9b05      	ldr	r3, [sp, #20]
    f68a:	4498      	add	r8, r3
    f68c:	e7eb      	b.n	f666 <log_output_msg_process+0xbe>
    f68e:	bf00      	nop
    f690:	00027193 	.word	0x00027193
    f694:	000278b9 	.word	0x000278b9

0000f698 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    f698:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    f69a:	e9d0 4300 	ldrd	r4, r3, [r0]
    f69e:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    f6a0:	f242 730f 	movw	r3, #9999	; 0x270f
    f6a4:	428b      	cmp	r3, r1
    f6a6:	bf28      	it	cs
    f6a8:	460b      	movcs	r3, r1
    f6aa:	4a0d      	ldr	r2, [pc, #52]	; (f6e0 <log_output_dropped_process+0x48>)
    f6ac:	2105      	movs	r1, #5
    f6ae:	4668      	mov	r0, sp
    f6b0:	f012 fbfa 	bl	21ea8 <sniprintf>
    f6b4:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    f6b6:	462b      	mov	r3, r5
    f6b8:	4620      	mov	r0, r4
    f6ba:	220b      	movs	r2, #11
    f6bc:	4909      	ldr	r1, [pc, #36]	; (f6e4 <log_output_dropped_process+0x4c>)
    f6be:	f013 fe02 	bl	232c6 <buffer_write>
	buffer_write(outf, buf, len, dev);
    f6c2:	462b      	mov	r3, r5
    f6c4:	4632      	mov	r2, r6
    f6c6:	4669      	mov	r1, sp
    f6c8:	4620      	mov	r0, r4
    f6ca:	f013 fdfc 	bl	232c6 <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    f6ce:	462b      	mov	r3, r5
    f6d0:	221b      	movs	r2, #27
    f6d2:	4905      	ldr	r1, [pc, #20]	; (f6e8 <log_output_dropped_process+0x50>)
    f6d4:	4620      	mov	r0, r4
    f6d6:	f013 fdf6 	bl	232c6 <buffer_write>
}
    f6da:	b002      	add	sp, #8
    f6dc:	bd70      	pop	{r4, r5, r6, pc}
    f6de:	bf00      	nop
    f6e0:	0002707b 	.word	0x0002707b
    f6e4:	000271b4 	.word	0x000271b4
    f6e8:	00027195 	.word	0x00027195

0000f6ec <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    f6ec:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    f6ee:	2100      	movs	r1, #0
	timestamp_div = 1U;
    f6f0:	4a07      	ldr	r2, [pc, #28]	; (f710 <log_output_timestamp_freq_set+0x24>)
{
    f6f2:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    f6f4:	4c07      	ldr	r4, [pc, #28]	; (f714 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    f6f6:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    f6f8:	42a0      	cmp	r0, r4
    f6fa:	d804      	bhi.n	f706 <log_output_timestamp_freq_set+0x1a>
    f6fc:	b101      	cbz	r1, f700 <log_output_timestamp_freq_set+0x14>
    f6fe:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    f700:	4b05      	ldr	r3, [pc, #20]	; (f718 <log_output_timestamp_freq_set+0x2c>)
    f702:	6018      	str	r0, [r3, #0]
}
    f704:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    f706:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    f708:	005b      	lsls	r3, r3, #1
    f70a:	2101      	movs	r1, #1
    f70c:	e7f4      	b.n	f6f8 <log_output_timestamp_freq_set+0xc>
    f70e:	bf00      	nop
    f710:	20020220 	.word	0x20020220
    f714:	000f4240 	.word	0x000f4240
    f718:	2002021c 	.word	0x2002021c

0000f71c <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    f71c:	4801      	ldr	r0, [pc, #4]	; (f724 <panic+0x8>)
    f71e:	f013 bf3c 	b.w	2359a <log_output_flush>
    f722:	bf00      	nop
    f724:	00025a70 	.word	0x00025a70

0000f728 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    f728:	4801      	ldr	r0, [pc, #4]	; (f730 <dropped+0x8>)
    f72a:	f7ff bfb5 	b.w	f698 <log_output_dropped_process>
    f72e:	bf00      	nop
    f730:	00025a70 	.word	0x00025a70

0000f734 <log_backend_uart_init>:
{
	log_backend_std_put(&log_output, 0, msg);
}

static void log_backend_uart_init(void)
{
    f734:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) z_arch_syscall_invoke1(*(u32_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    f736:	4806      	ldr	r0, [pc, #24]	; (f750 <log_backend_uart_init+0x1c>)
    f738:	f010 fc88 	bl	2004c <z_impl_device_get_binding>
	struct device *dev;

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);
    f73c:	b928      	cbnz	r0, f74a <log_backend_uart_init+0x16>
    f73e:	4b05      	ldr	r3, [pc, #20]	; (f754 <log_backend_uart_init+0x20>)
    f740:	4a05      	ldr	r2, [pc, #20]	; (f758 <log_backend_uart_init+0x24>)
    f742:	212a      	movs	r1, #42	; 0x2a
    f744:	4805      	ldr	r0, [pc, #20]	; (f75c <log_backend_uart_init+0x28>)
    f746:	f011 fef1 	bl	2152c <__assert_func>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    f74a:	4b05      	ldr	r3, [pc, #20]	; (f760 <log_backend_uart_init+0x2c>)
    f74c:	6058      	str	r0, [r3, #4]

	log_output_ctx_set(&log_output, dev);
}
    f74e:	bd08      	pop	{r3, pc}
    f750:	0002722f 	.word	0x0002722f
    f754:	00027236 	.word	0x00027236
    f758:	00027219 	.word	0x00027219
    f75c:	0002723a 	.word	0x0002723a
    f760:	2002022c 	.word	0x2002022c

0000f764 <put>:
{
    f764:	b510      	push	{r4, lr}
    f766:	460c      	mov	r4, r1
	log_msg_get(msg);
    f768:	4608      	mov	r0, r1
    f76a:	f013 fd11 	bl	23190 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    f76e:	4621      	mov	r1, r4
    f770:	4804      	ldr	r0, [pc, #16]	; (f784 <put+0x20>)
    f772:	220f      	movs	r2, #15
    f774:	f7ff ff18 	bl	f5a8 <log_output_msg_process>
	log_msg_put(msg);
    f778:	4620      	mov	r0, r4
}
    f77a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f77e:	f013 bd30 	b.w	231e2 <log_msg_put>
    f782:	bf00      	nop
    f784:	00025a70 	.word	0x00025a70

0000f788 <socket_offload_register>:
void socket_offload_register(const struct socket_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(socket_ops == NULL);

	socket_ops = ops;
    f788:	4b01      	ldr	r3, [pc, #4]	; (f790 <socket_offload_register+0x8>)
    f78a:	6018      	str	r0, [r3, #0]
}
    f78c:	4770      	bx	lr
    f78e:	bf00      	nop
    f790:	20020238 	.word	0x20020238

0000f794 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    f794:	280a      	cmp	r0, #10
{
    f796:	b538      	push	{r3, r4, r5, lr}
    f798:	4604      	mov	r4, r0
    f79a:	4d07      	ldr	r5, [pc, #28]	; (f7b8 <console_out+0x24>)
	if ('\n' == c) {
    f79c:	d104      	bne.n	f7a8 <console_out+0x14>
    f79e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    f7a0:	6843      	ldr	r3, [r0, #4]
    f7a2:	210d      	movs	r1, #13
    f7a4:	685b      	ldr	r3, [r3, #4]
    f7a6:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    f7a8:	6828      	ldr	r0, [r5, #0]
    f7aa:	6843      	ldr	r3, [r0, #4]
    f7ac:	b2e1      	uxtb	r1, r4
    f7ae:	685b      	ldr	r3, [r3, #4]
    f7b0:	4798      	blx	r3

	return c;
}
    f7b2:	4620      	mov	r0, r4
    f7b4:	bd38      	pop	{r3, r4, r5, pc}
    f7b6:	bf00      	nop
    f7b8:	2002023c 	.word	0x2002023c

0000f7bc <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    f7bc:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    f7be:	4c04      	ldr	r4, [pc, #16]	; (f7d0 <uart_console_hook_install+0x14>)
    f7c0:	4620      	mov	r0, r4
    f7c2:	f001 f83d 	bl	10840 <__stdout_hook_install>
	__printk_hook_install(console_out);
    f7c6:	4620      	mov	r0, r4
}
    f7c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    f7cc:	f7ff ba8c 	b.w	ece8 <__printk_hook_install>
    f7d0:	0000f795 	.word	0x0000f795

0000f7d4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    f7d4:	b508      	push	{r3, lr}
    f7d6:	4804      	ldr	r0, [pc, #16]	; (f7e8 <uart_console_init+0x14>)
    f7d8:	f010 fc38 	bl	2004c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    f7dc:	4b03      	ldr	r3, [pc, #12]	; (f7ec <uart_console_init+0x18>)
    f7de:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    f7e0:	f7ff ffec 	bl	f7bc <uart_console_hook_install>

	return 0;
}
    f7e4:	2000      	movs	r0, #0
    f7e6:	bd08      	pop	{r3, pc}
    f7e8:	0002722f 	.word	0x0002722f
    f7ec:	2002023c 	.word	0x2002023c

0000f7f0 <hfclk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int hfclk_init(struct device *dev)
{
    f7f0:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    f7f2:	2200      	movs	r2, #0
{
    f7f4:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    f7f6:	2101      	movs	r1, #1
    f7f8:	2005      	movs	r0, #5
    f7fa:	f000 f9fd 	bl	fbf8 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    f7fe:	2005      	movs	r0, #5
    f800:	f000 f9ea 	bl	fbd8 <z_arch_irq_enable>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
}

__STATIC_INLINE void nrf_clock_lf_src_set(nrf_clock_lfclk_t source)
{
    NRF_CLOCK->LFCLKSRC = (uint32_t)(source);
    f804:	2202      	movs	r2, #2
    f806:	4b05      	ldr	r3, [pc, #20]	; (f81c <hfclk_init+0x2c>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    f808:	2000      	movs	r0, #0
    f80a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NRF_CLOCK->INTENSET = int_mask;
    f80e:	2203      	movs	r2, #3
    f810:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			(NRF_POWER_INT_USBDETECTED_MASK |
			NRF_POWER_INT_USBREMOVED_MASK |
			NRF_POWER_INT_USBPWRRDY_MASK),
			(0))));

	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    f814:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    f816:	e9c3 0000 	strd	r0, r0, [r3]

	return 0;
}
    f81a:	bd10      	pop	{r4, pc}
    f81c:	40005000 	.word	0x40005000

0000f820 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    f820:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
    f822:	4b10      	ldr	r3, [pc, #64]	; (f864 <nrf_power_clock_isr+0x44>)
    f824:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
    f826:	b162      	cbz	r2, f842 <nrf_power_clock_isr+0x22>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
    f828:	4a0f      	ldr	r2, [pc, #60]	; (f868 <nrf_power_clock_isr+0x48>)
    f82a:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
    f82e:	07d1      	lsls	r1, r2, #31
    f830:	d507      	bpl.n	f842 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
    f832:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
    f834:	480d      	ldr	r0, [pc, #52]	; (f86c <nrf_power_clock_isr+0x4c>)
    f836:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    f838:	6883      	ldr	r3, [r0, #8]
    f83a:	7a5b      	ldrb	r3, [r3, #9]
    f83c:	b90b      	cbnz	r3, f842 <nrf_power_clock_isr+0x22>
			clkstarted_handle(hfclk_dev);
    f83e:	f013 ff6d 	bl	2371c <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
    f842:	4b0b      	ldr	r3, [pc, #44]	; (f870 <nrf_power_clock_isr+0x50>)
    f844:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
    f846:	b15a      	cbz	r2, f860 <nrf_power_clock_isr+0x40>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
    f848:	4a07      	ldr	r2, [pc, #28]	; (f868 <nrf_power_clock_isr+0x48>)
    f84a:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
    f84e:	0792      	lsls	r2, r2, #30
    f850:	d506      	bpl.n	f860 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
    f852:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
    f854:	4807      	ldr	r0, [pc, #28]	; (f874 <nrf_power_clock_isr+0x54>)
    f856:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    f858:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
    f85c:	f013 bf5e 	b.w	2371c <clkstarted_handle>
}
    f860:	bd08      	pop	{r3, pc}
    f862:	bf00      	nop
    f864:	40005100 	.word	0x40005100
    f868:	40005000 	.word	0x40005000
    f86c:	20024b78 	.word	0x20024b78
    f870:	40005104 	.word	0x40005104
    f874:	20024b84 	.word	0x20024b84

0000f878 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    f878:	2200      	movs	r2, #0
    f87a:	4b0d      	ldr	r3, [pc, #52]	; (f8b0 <rtc1_nrf_isr+0x38>)
    f87c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    f880:	f04f 0220 	mov.w	r2, #32
    f884:	f3ef 8111 	mrs	r1, BASEPRI
    f888:	f382 8811 	msr	BASEPRI, r2
    f88c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    f890:	4a08      	ldr	r2, [pc, #32]	; (f8b4 <rtc1_nrf_isr+0x3c>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
    f892:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    f896:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    f898:	1ac0      	subs	r0, r0, r3
    f89a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    f89e:	4403      	add	r3, r0
    f8a0:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    f8a2:	f381 8811 	msr	BASEPRI, r1
    f8a6:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    f8aa:	f011 ba83 	b.w	20db4 <z_clock_announce>
    f8ae:	bf00      	nop
    f8b0:	40015000 	.word	0x40015000
    f8b4:	20020258 	.word	0x20020258

0000f8b8 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    f8b8:	b570      	push	{r4, r5, r6, lr}
    f8ba:	4818      	ldr	r0, [pc, #96]	; (f91c <z_clock_driver_init+0x64>)
    f8bc:	f010 fbc6 	bl	2004c <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    f8c0:	b348      	cbz	r0, f916 <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    f8c2:	6843      	ldr	r3, [r0, #4]
    f8c4:	2100      	movs	r1, #0
    f8c6:	681b      	ldr	r3, [r3, #0]
    f8c8:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    f8ca:	2601      	movs	r6, #1
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    f8cc:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    f8ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f8d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    f8d6:	4d12      	ldr	r5, [pc, #72]	; (f920 <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    f8d8:	4631      	mov	r1, r6
    f8da:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    f8de:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    f8e2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f8e6:	4b0f      	ldr	r3, [pc, #60]	; (f924 <z_clock_driver_init+0x6c>)
    f8e8:	2015      	movs	r0, #21
    f8ea:	601c      	str	r4, [r3, #0]
    f8ec:	4b0e      	ldr	r3, [pc, #56]	; (f928 <z_clock_driver_init+0x70>)
    f8ee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    f8f2:	4622      	mov	r2, r4
    f8f4:	f000 f980 	bl	fbf8 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    f8f8:	2015      	movs	r0, #21
    f8fa:	f000 f96d 	bl	fbd8 <z_arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    f8fe:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    f900:	4b0a      	ldr	r3, [pc, #40]	; (f92c <z_clock_driver_init+0x74>)
    f902:	601e      	str	r6, [r3, #0]
    f904:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    f906:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
    f90a:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f90c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    f910:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
    f914:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    f916:	f04f 30ff 	mov.w	r0, #4294967295
    f91a:	e7fb      	b.n	f914 <z_clock_driver_init+0x5c>
    f91c:	00027292 	.word	0x00027292
    f920:	40015000 	.word	0x40015000
    f924:	40015140 	.word	0x40015140
    f928:	e000e100 	.word	0xe000e100
    f92c:	40015008 	.word	0x40015008

0000f930 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    f930:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    f932:	4e21      	ldr	r6, [pc, #132]	; (f9b8 <z_clock_set_timeout+0x88>)
    f934:	f1b0 3fff 	cmp.w	r0, #4294967295
    f938:	bf08      	it	eq
    f93a:	4630      	moveq	r0, r6
	__asm__ volatile(
    f93c:	f04f 0320 	mov.w	r3, #32
    f940:	f3ef 8411 	mrs	r4, BASEPRI
    f944:	f383 8811 	msr	BASEPRI, r3
    f948:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    f94c:	491b      	ldr	r1, [pc, #108]	; (f9bc <z_clock_set_timeout+0x8c>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    f94e:	4b1c      	ldr	r3, [pc, #112]	; (f9c0 <z_clock_set_timeout+0x90>)
    f950:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
    f954:	681d      	ldr	r5, [r3, #0]
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    f956:	3801      	subs	r0, #1
	return (a - b) & COUNTER_MAX;
    f958:	1b53      	subs	r3, r2, r5
    f95a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
    f95e:	3501      	adds	r5, #1
    f960:	442b      	add	r3, r5
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    f962:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	cyc += last_count;
    f966:	42b0      	cmp	r0, r6
    f968:	bfd4      	ite	le
    f96a:	1818      	addle	r0, r3, r0
    f96c:	1998      	addgt	r0, r3, r6
	return (a - b) & COUNTER_MAX;
    f96e:	1a82      	subs	r2, r0, r2
    f970:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    f974:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    f978:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
    f97a:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
    f97e:	d904      	bls.n	f98a <z_clock_set_timeout+0x5a>
	__asm__ volatile(
    f980:	f384 8811 	msr	BASEPRI, r4
    f984:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    f988:	bd70      	pop	{r4, r5, r6, pc}
     return p_reg->COUNTER;
    f98a:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    f98e:	4a0d      	ldr	r2, [pc, #52]	; (f9c4 <z_clock_set_timeout+0x94>)
	return (a - b) & COUNTER_MAX;
    f990:	1ac3      	subs	r3, r0, r3
    f992:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    f996:	1e5d      	subs	r5, r3, #1
    f998:	4295      	cmp	r5, r2
    f99a:	d905      	bls.n	f9a8 <z_clock_set_timeout+0x78>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f99c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    f9a0:	4b09      	ldr	r3, [pc, #36]	; (f9c8 <z_clock_set_timeout+0x98>)
    f9a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    f9a6:	e7eb      	b.n	f980 <z_clock_set_timeout+0x50>
		} else if (dt == 1) {
    f9a8:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    f9aa:	bf02      	ittt	eq
    f9ac:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f9ae:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    f9b2:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
    f9b6:	e7e3      	b.n	f980 <z_clock_set_timeout+0x50>
    f9b8:	00fffffe 	.word	0x00fffffe
    f9bc:	40015000 	.word	0x40015000
    f9c0:	20020258 	.word	0x20020258
    f9c4:	007ffffe 	.word	0x007ffffe
    f9c8:	e000e100 	.word	0xe000e100

0000f9cc <z_clock_elapsed>:
	__asm__ volatile(
    f9cc:	f04f 0220 	mov.w	r2, #32
    f9d0:	f3ef 8311 	mrs	r3, BASEPRI
    f9d4:	f382 8811 	msr	BASEPRI, r2
    f9d8:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    f9dc:	4a06      	ldr	r2, [pc, #24]	; (f9f8 <z_clock_elapsed+0x2c>)
    f9de:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    f9e2:	4a06      	ldr	r2, [pc, #24]	; (f9fc <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    f9e4:	6812      	ldr	r2, [r2, #0]
    f9e6:	1a80      	subs	r0, r0, r2
    f9e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    f9ec:	f383 8811 	msr	BASEPRI, r3
    f9f0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    f9f4:	4770      	bx	lr
    f9f6:	bf00      	nop
    f9f8:	40015000 	.word	0x40015000
    f9fc:	20020258 	.word	0x20020258

0000fa00 <z_timer_cycle_get_32>:
	__asm__ volatile(
    fa00:	f04f 0320 	mov.w	r3, #32
    fa04:	f3ef 8211 	mrs	r2, BASEPRI
    fa08:	f383 8811 	msr	BASEPRI, r3
    fa0c:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    fa10:	4906      	ldr	r1, [pc, #24]	; (fa2c <z_timer_cycle_get_32+0x2c>)
    fa12:	4b07      	ldr	r3, [pc, #28]	; (fa30 <z_timer_cycle_get_32+0x30>)
    fa14:	6808      	ldr	r0, [r1, #0]
    fa16:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    fa1a:	f382 8811 	msr	BASEPRI, r2
    fa1e:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    fa22:	1a1b      	subs	r3, r3, r0
    fa24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    fa28:	4418      	add	r0, r3
    fa2a:	4770      	bx	lr
    fa2c:	20020258 	.word	0x20020258
    fa30:	40015000 	.word	0x40015000

0000fa34 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    fa34:	4804      	ldr	r0, [pc, #16]	; (fa48 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    fa36:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    fa38:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    fa3a:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    fa3c:	d003      	beq.n	fa46 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    fa3e:	4903      	ldr	r1, [pc, #12]	; (fa4c <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    fa40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    fa44:	600a      	str	r2, [r1, #0]

0000fa46 <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    fa46:	4770      	bx	lr
    ldr r0, =_kernel
    fa48:	200222f4 	.word	0x200222f4
    ldr r1, =_SCS_ICSR
    fa4c:	e000ed04 	.word	0xe000ed04

0000fa50 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    fa50:	4929      	ldr	r1, [pc, #164]	; (faf8 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    fa52:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    fa54:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    fa58:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    fa5a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    fa5e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    fa62:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    fa66:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    fa6a:	d004      	beq.n	fa76 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    fa6c:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    fa70:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    fa74:	e007      	b.n	fa86 <out_fp_endif>

0000fa76 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    fa76:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
    fa7a:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    fa7e:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    fa82:	f050 0004 	orrs.w	r0, r0, #4

0000fa86 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    fa86:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    fa8a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    fa8c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    fa90:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    fa94:	4f19      	ldr	r7, [pc, #100]	; (fafc <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    fa96:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    fa9a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    fa9c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    fa9e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    faa0:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    faa2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    faa4:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    faa6:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    faaa:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    faae:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    fab2:	d105      	bne.n	fac0 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    fab4:	2300      	movs	r3, #0
    vmsr fpscr, r3
    fab6:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    faba:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    fabe:	e005      	b.n	facc <in_fp_endif>

0000fac0 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    fac0:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    fac4:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
    fac8:	ec90 8a10 	vldmia	r0, {s16-s31}

0000facc <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    facc:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    fad0:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    fad4:	f383 8814 	msr	CONTROL, r3
    isb
    fad8:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    fadc:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    fade:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    fae0:	f013 fe49 	bl	23776 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    fae4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    fae8:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    faec:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    faf0:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    faf4:	4770      	bx	lr
    faf6:	0000      	.short	0x0000
    ldr r1, =_kernel
    faf8:	200222f4 	.word	0x200222f4
    ldr v4, =_SCS_ICSR
    fafc:	e000ed04 	.word	0xe000ed04

0000fb00 <z_arm_svc>:
 */
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
    tst lr, #0x4    /* did we come from thread mode ? */
    fb00:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    fb04:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    fb06:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    fb0a:	f3ef 8009 	mrsne	r0, PSP


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    fb0e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
    ldrb r1, [r1, #-2]
    fb10:	f811 1c02 	ldrb.w	r1, [r1, #-2]
    tst r2, #0x1
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    fb14:	2902      	cmp	r1, #2
    beq _oops
    fb16:	d0ff      	beq.n	fb18 <_oops>

0000fb18 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    fb18:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    fb1a:	f013 fe21 	bl	23760 <z_do_kernel_oops>
    pop {r0, pc}
    fb1e:	bd01      	pop	{r0, pc}

0000fb20 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    fb20:	4901      	ldr	r1, [pc, #4]	; (fb28 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    fb22:	2210      	movs	r2, #16
	str r2, [r1]
    fb24:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    fb26:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    fb28:	e000ed10 	.word	0xe000ed10

0000fb2c <z_arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    fb2c:	4040      	eors	r0, r0
	msr BASEPRI, r0
    fb2e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    fb32:	bf30      	wfi

	bx lr
    fb34:	4770      	bx	lr
    fb36:	bf00      	nop

0000fb38 <z_arm_bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    fb38:	4040      	eors	r0, r0
	msr BASEPRI, r0
    fb3a:	f380 8811 	msr	BASEPRI, r0
	/* RETTOBASE flag is not banked between security states.
	 * Therefore, we cannot rely on this flag, to obtain the SP
	 * of the current security state.
	 * Instead, we use the EXC_RETURN.SPSEL flag.
	 */
 	ldr r0, =0x4
    fb3e:	f04f 0004 	mov.w	r0, #4
	mov r1, lr
    fb42:	4671      	mov	r1, lr
	tst r1, r0
    fb44:	4201      	tst	r1, r0
	beq _s_stack_frame_msp
    fb46:	d002      	beq.n	fb4e <_s_stack_frame_msp>
	mrs r0, PSP
    fb48:	f3ef 8009 	mrs	r0, PSP
	bne _s_stack_frame_endif
    fb4c:	d101      	bne.n	fb52 <_s_stack_frame_endif>

0000fb4e <_s_stack_frame_msp>:
_s_stack_frame_msp:
	mrs r0, MSP
    fb4e:	f3ef 8008 	mrs	r0, MSP

0000fb52 <_s_stack_frame_endif>:
	 *
	 * To determine this we need to inspect the EXC_RETURN value
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
    fb52:	4671      	mov	r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    fb54:	b501      	push	{r0, lr}
	bl z_arm_fault
    fb56:	f000 fb83 	bl	10260 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    fb5a:	bd01      	pop	{r0, pc}

0000fb5c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    fb5c:	bf30      	wfi
    b z_SysNmiOnReset
    fb5e:	f7ff bffd 	b.w	fb5c <z_SysNmiOnReset>
    fb62:	bf00      	nop

0000fb64 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    fb64:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    fb66:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    fb68:	4a0b      	ldr	r2, [pc, #44]	; (fb98 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    fb6a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    fb6c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    fb6e:	bf1e      	ittt	ne
	movne	r1, #0
    fb70:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    fb72:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    fb74:	f014 fc23 	blne	243be <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    fb78:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    fb7a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    fb7e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    fb82:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    fb86:	4905      	ldr	r1, [pc, #20]	; (fb9c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    fb88:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    fb8a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    fb8c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    fb8e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    fb92:	4903      	ldr	r1, [pc, #12]	; (fba0 <_isr_wrapper+0x3c>)
	bx r1
    fb94:	4708      	bx	r1
    fb96:	0000      	.short	0x0000
	ldr r2, =_kernel
    fb98:	200222f4 	.word	0x200222f4
	ldr r1, =_sw_isr_table
    fb9c:	00025604 	.word	0x00025604
	ldr r1, =z_arm_int_exit
    fba0:	0000fa35 	.word	0x0000fa35

0000fba4 <z_arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    fba4:	4a09      	ldr	r2, [pc, #36]	; (fbcc <z_arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    fba6:	490a      	ldr	r1, [pc, #40]	; (fbd0 <z_arch_swap+0x2c>)
	_current->arch.basepri = key;
    fba8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    fbaa:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    fbac:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    fbae:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    fbb0:	4908      	ldr	r1, [pc, #32]	; (fbd4 <z_arch_swap+0x30>)
    fbb2:	684b      	ldr	r3, [r1, #4]
    fbb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    fbb8:	604b      	str	r3, [r1, #4]
    fbba:	2300      	movs	r3, #0
    fbbc:	f383 8811 	msr	BASEPRI, r3
    fbc0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    fbc4:	6893      	ldr	r3, [r2, #8]
}
    fbc6:	6e98      	ldr	r0, [r3, #104]	; 0x68
    fbc8:	4770      	bx	lr
    fbca:	bf00      	nop
    fbcc:	200222f4 	.word	0x200222f4
    fbd0:	00026c6c 	.word	0x00026c6c
    fbd4:	e000ed00 	.word	0xe000ed00

0000fbd8 <z_arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    fbd8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    fbda:	2b00      	cmp	r3, #0
    fbdc:	db08      	blt.n	fbf0 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fbde:	2201      	movs	r2, #1
    fbe0:	f000 001f 	and.w	r0, r0, #31
    fbe4:	fa02 f000 	lsl.w	r0, r2, r0
    fbe8:	4a02      	ldr	r2, [pc, #8]	; (fbf4 <z_arch_irq_enable+0x1c>)
    fbea:	095b      	lsrs	r3, r3, #5
    fbec:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    fbf0:	4770      	bx	lr
    fbf2:	bf00      	nop
    fbf4:	e000e100 	.word	0xe000e100

0000fbf8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    fbf8:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    fbfa:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    fbfc:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fc00:	bfa8      	it	ge
    fc02:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    fc06:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fc0a:	bfb8      	it	lt
    fc0c:	4b05      	ldrlt	r3, [pc, #20]	; (fc24 <z_arm_irq_priority_set+0x2c>)
    fc0e:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fc10:	bfab      	itete	ge
    fc12:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fc16:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fc1a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fc1e:	5419      	strblt	r1, [r3, r0]
}
    fc20:	4770      	bx	lr
    fc22:	bf00      	nop
    fc24:	e000ed14 	.word	0xe000ed14

0000fc28 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    fc28:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    fc2a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    fc2c:	4b04      	ldr	r3, [pc, #16]	; (fc40 <_arch_isr_direct_pm+0x18>)
    fc2e:	6a18      	ldr	r0, [r3, #32]
    fc30:	b118      	cbz	r0, fc3a <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    fc32:	2200      	movs	r2, #0
    fc34:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    fc36:	f014 fbc2 	bl	243be <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    fc3a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    fc3c:	bd08      	pop	{r3, pc}
    fc3e:	bf00      	nop
    fc40:	200222f4 	.word	0x200222f4

0000fc44 <z_arch_new_thread>:
 */
void z_arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		       size_t stackSize, k_thread_entry_t pEntry,
		       void *parameter1, void *parameter2, void *parameter3,
		       int priority, unsigned int options)
{
    fc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    fc48:	188c      	adds	r4, r1, r2
{
    fc4a:	4688      	mov	r8, r1
    fc4c:	4617      	mov	r7, r2
    fc4e:	461e      	mov	r6, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    fc50:	2204      	movs	r2, #4
    fc52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fc54:	9909      	ldr	r1, [sp, #36]	; 0x24
    fc56:	4605      	mov	r5, r0
    fc58:	f014 fd25 	bl	246a6 <z_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    fc5c:	2200      	movs	r2, #0
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    fc5e:	490e      	ldr	r1, [pc, #56]	; (fc98 <z_arch_new_thread+0x54>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    fc60:	f1a4 0320 	sub.w	r3, r4, #32
    fc64:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    fc68:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
    fc6c:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    fc70:	e9c5 8716 	strd	r8, r7, [r5, #88]	; 0x58
    fc74:	6199      	str	r1, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    fc76:	9906      	ldr	r1, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    fc78:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    fc7a:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    fc7c:	9907      	ldr	r1, [sp, #28]
    fc7e:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    fc80:	9908      	ldr	r1, [sp, #32]
    fc82:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
    fc84:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    fc88:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    fc8a:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    fc8c:	666a      	str	r2, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
    fc8e:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    fc92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fc96:	bf00      	nop
    fc98:	00022ca9 	.word	0x00022ca9

0000fc9c <z_arch_switch_to_main_thread>:

void z_arch_switch_to_main_thread(struct k_thread *main_thread,
				  k_thread_stack_t *main_stack,
				  size_t main_stack_size,
				  k_thread_entry_t _main)
{
    fc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fca0:	461f      	mov	r7, r3
    fca2:	4606      	mov	r6, r0
    fca4:	460c      	mov	r4, r1
    fca6:	4690      	mov	r8, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    fca8:	2300      	movs	r3, #0
    fcaa:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    fcae:	f3ef 8514 	mrs	r5, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    fcb2:	f025 0504 	bic.w	r5, r5, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    fcb6:	f385 8814 	msr	CONTROL, r5
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    fcba:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    fcbe:	f000 fbdb 	bl	10478 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    fcc2:	4b0b      	ldr	r3, [pc, #44]	; (fcf0 <z_arch_switch_to_main_thread+0x54>)
	start_of_main_stack =
    fcc4:	4444      	add	r4, r8
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    fcc6:	4630      	mov	r0, r6
	_current = main_thread;
    fcc8:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    fcca:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    fcce:	f013 fd52 	bl	23776 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    fcd2:	4638      	mov	r0, r7
    fcd4:	f384 8809 	msr	PSP, r4
    fcd8:	b663      	cpsie	if
    fcda:	f04f 0100 	mov.w	r1, #0
    fcde:	f381 8811 	msr	BASEPRI, r1
    fce2:	f3bf 8f6f 	isb	sy
    fce6:	2100      	movs	r1, #0
    fce8:	2200      	movs	r2, #0
    fcea:	2300      	movs	r3, #0
    fcec:	f012 ffdc 	bl	22ca8 <z_thread_entry>
    fcf0:	200222f4 	.word	0x200222f4

0000fcf4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    fcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fcf8:	4681      	mov	r9, r0
    fcfa:	b08b      	sub	sp, #44	; 0x2c

	if (esf != NULL) {
    fcfc:	460c      	mov	r4, r1
    fcfe:	2900      	cmp	r1, #0
    fd00:	d07f      	beq.n	fe02 <z_arm_fatal_error+0x10e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    fd02:	f04f 0801 	mov.w	r8, #1
    fd06:	f04f 0300 	mov.w	r3, #0
    fd0a:	4a41      	ldr	r2, [pc, #260]	; (fe10 <z_arm_fatal_error+0x11c>)
    fd0c:	4d41      	ldr	r5, [pc, #260]	; (fe14 <z_arm_fatal_error+0x120>)
    fd0e:	f368 0302 	bfi	r3, r8, #0, #3
    fd12:	1aad      	subs	r5, r5, r2
    fd14:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    fd18:	f36f 03c5 	bfc	r3, #3, #3
    fd1c:	f365 138f 	bfi	r3, r5, #6, #10
    fd20:	f8ad 3000 	strh.w	r3, [sp]
    fd24:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    fd28:	483b      	ldr	r0, [pc, #236]	; (fe18 <z_arm_fatal_error+0x124>)
    fd2a:	6809      	ldr	r1, [r1, #0]
    fd2c:	f013 f9b8 	bl	230a0 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    fd30:	f04f 0300 	mov.w	r3, #0
    fd34:	f368 0302 	bfi	r3, r8, #0, #3
    fd38:	f36f 03c5 	bfc	r3, #3, #3
    fd3c:	f365 138f 	bfi	r3, r5, #6, #10
    fd40:	f8ad 3000 	strh.w	r3, [sp]
    fd44:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    fd48:	68e1      	ldr	r1, [r4, #12]
    fd4a:	4834      	ldr	r0, [pc, #208]	; (fe1c <z_arm_fatal_error+0x128>)
    fd4c:	f013 f9a8 	bl	230a0 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    fd50:	f04f 0200 	mov.w	r2, #0
    fd54:	f368 0202 	bfi	r2, r8, #0, #3
    fd58:	f36f 02c5 	bfc	r2, #3, #3
    fd5c:	f365 128f 	bfi	r2, r5, #6, #10
    fd60:	69e1      	ldr	r1, [r4, #28]
    fd62:	482f      	ldr	r0, [pc, #188]	; (fe20 <z_arm_fatal_error+0x12c>)
    fd64:	f013 f970 	bl	23048 <log_1>
    fd68:	4627      	mov	r7, r4
	for (int i = 0; i < 16; i += 4) {
    fd6a:	2600      	movs	r6, #0
		LOG_ERR("s[%d]:  0x%08x  s[%d]:  0x%08x"
    fd6c:	f8df b0bc 	ldr.w	fp, [pc, #188]	; fe2c <z_arm_fatal_error+0x138>
    fd70:	edd7 7a08 	vldr	s15, [r7, #32]
    fd74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fd78:	edcd 7a03 	vstr	s15, [sp, #12]
    fd7c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    fd80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fd84:	edcd 7a05 	vstr	s15, [sp, #20]
    fd88:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    fd8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fd90:	edcd 7a07 	vstr	s15, [sp, #28]
    fd94:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    fd98:	2208      	movs	r2, #8
    fd9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fd9e:	1c73      	adds	r3, r6, #1
    fda0:	f368 0a02 	bfi	sl, r8, #0, #3
    fda4:	9304      	str	r3, [sp, #16]
    fda6:	f36f 0ac5 	bfc	sl, #3, #3
    fdaa:	1cb3      	adds	r3, r6, #2
    fdac:	9306      	str	r3, [sp, #24]
    fdae:	f365 1a8f 	bfi	sl, r5, #6, #10
    fdb2:	1cf3      	adds	r3, r6, #3
    fdb4:	9602      	str	r6, [sp, #8]
    fdb6:	9308      	str	r3, [sp, #32]
    fdb8:	eb0d 0102 	add.w	r1, sp, r2
    fdbc:	4653      	mov	r3, sl
    fdbe:	4658      	mov	r0, fp
	for (int i = 0; i < 16; i += 4) {
    fdc0:	3604      	adds	r6, #4
		LOG_ERR("s[%d]:  0x%08x  s[%d]:  0x%08x"
    fdc2:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    fdc6:	f013 f986 	bl	230d6 <log_n>
	for (int i = 0; i < 16; i += 4) {
    fdca:	2e10      	cmp	r6, #16
    fdcc:	f107 0710 	add.w	r7, r7, #16
    fdd0:	d1ce      	bne.n	fd70 <z_arm_fatal_error+0x7c>
	LOG_ERR("fpscr:  0x%08x\n", esf->fpscr);
    fdd2:	f04f 0200 	mov.w	r2, #0
    fdd6:	f368 0202 	bfi	r2, r8, #0, #3
    fdda:	f36f 02c5 	bfc	r2, #3, #3
    fdde:	f365 128f 	bfi	r2, r5, #6, #10
    fde2:	6e21      	ldr	r1, [r4, #96]	; 0x60
    fde4:	480f      	ldr	r0, [pc, #60]	; (fe24 <z_arm_fatal_error+0x130>)
    fde6:	f013 f92f 	bl	23048 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    fdea:	f04f 0200 	mov.w	r2, #0
    fdee:	f368 0202 	bfi	r2, r8, #0, #3
    fdf2:	f36f 02c5 	bfc	r2, #3, #3
    fdf6:	f365 128f 	bfi	r2, r5, #6, #10
    fdfa:	69a1      	ldr	r1, [r4, #24]
    fdfc:	480a      	ldr	r0, [pc, #40]	; (fe28 <z_arm_fatal_error+0x134>)
    fdfe:	f013 f923 	bl	23048 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    fe02:	4621      	mov	r1, r4
    fe04:	4648      	mov	r0, r9
    fe06:	f010 f96b 	bl	200e0 <z_fatal_error>
}
    fe0a:	b00b      	add	sp, #44	; 0x2c
    fe0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe10:	000258c0 	.word	0x000258c0
    fe14:	000258e8 	.word	0x000258e8
    fe18:	000272be 	.word	0x000272be
    fe1c:	000272ed 	.word	0x000272ed
    fe20:	0002731c 	.word	0x0002731c
    fe24:	0002736b 	.word	0x0002736b
    fe28:	0002737b 	.word	0x0002737b
    fe2c:	0002732b 	.word	0x0002732b

0000fe30 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    fe30:	4a11      	ldr	r2, [pc, #68]	; (fe78 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    fe32:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    fe34:	4b11      	ldr	r3, [pc, #68]	; (fe7c <z_arm_prep_c+0x4c>)
    fe36:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    fe3a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    fe3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fe40:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    fe44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    fe48:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    fe4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    fe50:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    fe54:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    fe58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fe5c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    fe60:	2300      	movs	r3, #0
    fe62:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    fe66:	f010 f9a9 	bl	201bc <z_bss_zero>
	z_data_copy();
    fe6a:	f010 f9b1 	bl	201d0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    fe6e:	f000 fad1 	bl	10414 <z_arm_int_lib_init>
	z_cstart();
    fe72:	f010 f9df 	bl	20234 <z_cstart>
    fe76:	bf00      	nop
    fe78:	0000c000 	.word	0x0000c000
    fe7c:	e000ed00 	.word	0xe000ed00

0000fe80 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    fe80:	f013 f8b0 	bl	22fe4 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    fe84:	2020      	movs	r0, #32
    msr BASEPRI, r0
    fe86:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    fe8a:	4808      	ldr	r0, [pc, #32]	; (feac <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    fe8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    fe90:	1840      	adds	r0, r0, r1
    msr PSP, r0
    fe92:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    fe96:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    fe9a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    fe9c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    fe9e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    fea2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    fea6:	f7ff ffc3 	bl	fe30 <z_arm_prep_c>
    feaa:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    feac:	20023c40 	.word	0x20023c40

0000feb0 <usage_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
    feb0:	b570      	push	{r4, r5, r6, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    feb2:	f04f 0100 	mov.w	r1, #0
    feb6:	2601      	movs	r6, #1
    feb8:	4b40      	ldr	r3, [pc, #256]	; (ffbc <usage_fault.isra.2+0x10c>)
    feba:	4c41      	ldr	r4, [pc, #260]	; (ffc0 <usage_fault.isra.2+0x110>)
    febc:	f366 0102 	bfi	r1, r6, #0, #3
    fec0:	1ae4      	subs	r4, r4, r3
    fec2:	f36f 01c5 	bfc	r1, #3, #3
    fec6:	f3c4 04c9 	ubfx	r4, r4, #3, #10

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    feca:	4d3e      	ldr	r5, [pc, #248]	; (ffc4 <usage_fault.isra.2+0x114>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    fecc:	f364 118f 	bfi	r1, r4, #6, #10
    fed0:	483d      	ldr	r0, [pc, #244]	; (ffc8 <usage_fault.isra.2+0x118>)
    fed2:	f013 f8ac 	bl	2302e <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    fed6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    fed8:	0192      	lsls	r2, r2, #6
    feda:	d50a      	bpl.n	fef2 <usage_fault.isra.2+0x42>
		PR_FAULT_INFO("  Division by zero");
    fedc:	f04f 0100 	mov.w	r1, #0
    fee0:	f366 0102 	bfi	r1, r6, #0, #3
    fee4:	f36f 01c5 	bfc	r1, #3, #3
    fee8:	f364 118f 	bfi	r1, r4, #6, #10
    feec:	4837      	ldr	r0, [pc, #220]	; (ffcc <usage_fault.isra.2+0x11c>)
    feee:	f013 f89e 	bl	2302e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    fef2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fef4:	01db      	lsls	r3, r3, #7
    fef6:	d50b      	bpl.n	ff10 <usage_fault.isra.2+0x60>
		PR_FAULT_INFO("  Unaligned memory access");
    fef8:	f04f 0100 	mov.w	r1, #0
    fefc:	2301      	movs	r3, #1
    fefe:	f363 0102 	bfi	r1, r3, #0, #3
    ff02:	f36f 01c5 	bfc	r1, #3, #3
    ff06:	f364 118f 	bfi	r1, r4, #6, #10
    ff0a:	4831      	ldr	r0, [pc, #196]	; (ffd0 <usage_fault.isra.2+0x120>)
    ff0c:	f013 f88f 	bl	2302e <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    ff10:	4d2c      	ldr	r5, [pc, #176]	; (ffc4 <usage_fault.isra.2+0x114>)
    ff12:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    ff14:	02d6      	lsls	r6, r2, #11
    ff16:	d50b      	bpl.n	ff30 <usage_fault.isra.2+0x80>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    ff18:	f04f 0100 	mov.w	r1, #0
    ff1c:	2301      	movs	r3, #1
    ff1e:	f363 0102 	bfi	r1, r3, #0, #3
    ff22:	f36f 01c5 	bfc	r1, #3, #3
    ff26:	f364 118f 	bfi	r1, r4, #6, #10
    ff2a:	482a      	ldr	r0, [pc, #168]	; (ffd4 <usage_fault.isra.2+0x124>)
    ff2c:	f013 f87f 	bl	2302e <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    ff30:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ff32:	0318      	lsls	r0, r3, #12
    ff34:	d50b      	bpl.n	ff4e <usage_fault.isra.2+0x9e>
		PR_FAULT_INFO("  No coprocessor instructions");
    ff36:	f04f 0100 	mov.w	r1, #0
    ff3a:	2301      	movs	r3, #1
    ff3c:	f363 0102 	bfi	r1, r3, #0, #3
    ff40:	f36f 01c5 	bfc	r1, #3, #3
    ff44:	f364 118f 	bfi	r1, r4, #6, #10
    ff48:	4823      	ldr	r0, [pc, #140]	; (ffd8 <usage_fault.isra.2+0x128>)
    ff4a:	f013 f870 	bl	2302e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    ff4e:	4d1d      	ldr	r5, [pc, #116]	; (ffc4 <usage_fault.isra.2+0x114>)
    ff50:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    ff52:	0351      	lsls	r1, r2, #13
    ff54:	d50b      	bpl.n	ff6e <usage_fault.isra.2+0xbe>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    ff56:	f04f 0100 	mov.w	r1, #0
    ff5a:	2301      	movs	r3, #1
    ff5c:	f363 0102 	bfi	r1, r3, #0, #3
    ff60:	f36f 01c5 	bfc	r1, #3, #3
    ff64:	f364 118f 	bfi	r1, r4, #6, #10
    ff68:	481c      	ldr	r0, [pc, #112]	; (ffdc <usage_fault.isra.2+0x12c>)
    ff6a:	f013 f860 	bl	2302e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    ff6e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ff70:	039a      	lsls	r2, r3, #14
    ff72:	d50b      	bpl.n	ff8c <usage_fault.isra.2+0xdc>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    ff74:	f04f 0100 	mov.w	r1, #0
    ff78:	2301      	movs	r3, #1
    ff7a:	f363 0102 	bfi	r1, r3, #0, #3
    ff7e:	f36f 01c5 	bfc	r1, #3, #3
    ff82:	f364 118f 	bfi	r1, r4, #6, #10
    ff86:	4816      	ldr	r0, [pc, #88]	; (ffe0 <usage_fault.isra.2+0x130>)
    ff88:	f013 f851 	bl	2302e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    ff8c:	4d0d      	ldr	r5, [pc, #52]	; (ffc4 <usage_fault.isra.2+0x114>)
    ff8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ff90:	03db      	lsls	r3, r3, #15
    ff92:	d50b      	bpl.n	ffac <usage_fault.isra.2+0xfc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    ff94:	f04f 0100 	mov.w	r1, #0
    ff98:	2301      	movs	r3, #1
    ff9a:	f363 0102 	bfi	r1, r3, #0, #3
    ff9e:	f36f 01c5 	bfc	r1, #3, #3
    ffa2:	f364 118f 	bfi	r1, r4, #6, #10
    ffa6:	480f      	ldr	r0, [pc, #60]	; (ffe4 <usage_fault.isra.2+0x134>)
    ffa8:	f013 f841 	bl	2302e <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    ffac:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    ffae:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    ffb0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    ffb4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    ffb8:	62ab      	str	r3, [r5, #40]	; 0x28
}
    ffba:	bd70      	pop	{r4, r5, r6, pc}
    ffbc:	000258c0 	.word	0x000258c0
    ffc0:	000258e8 	.word	0x000258e8
    ffc4:	e000ed00 	.word	0xe000ed00
    ffc8:	00027509 	.word	0x00027509
    ffcc:	00027521 	.word	0x00027521
    ffd0:	00027534 	.word	0x00027534
    ffd4:	0002754e 	.word	0x0002754e
    ffd8:	00027578 	.word	0x00027578
    ffdc:	00027596 	.word	0x00027596
    ffe0:	000275bb 	.word	0x000275bb
    ffe4:	000275d5 	.word	0x000275d5

0000ffe8 <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    ffe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ffec:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    ffee:	f04f 0801 	mov.w	r8, #1
    fff2:	f04f 0100 	mov.w	r1, #0
    fff6:	4b3d      	ldr	r3, [pc, #244]	; (100ec <mem_manage_fault.isra.4+0x104>)
    fff8:	4c3d      	ldr	r4, [pc, #244]	; (100f0 <mem_manage_fault.isra.4+0x108>)
    fffa:	f368 0102 	bfi	r1, r8, #0, #3
    fffe:	1ae4      	subs	r4, r4, r3
   10000:	f36f 01c5 	bfc	r1, #3, #3
   10004:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   10008:	4d3a      	ldr	r5, [pc, #232]	; (100f4 <mem_manage_fault.isra.4+0x10c>)
	PR_FAULT_INFO("***** MPU FAULT *****");
   1000a:	f364 118f 	bfi	r1, r4, #6, #10
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1000e:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   10010:	4839      	ldr	r0, [pc, #228]	; (100f8 <mem_manage_fault.isra.4+0x110>)
   10012:	f013 f80c 	bl	2302e <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   10016:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   10018:	06d1      	lsls	r1, r2, #27
   1001a:	d50a      	bpl.n	10032 <mem_manage_fault.isra.4+0x4a>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1001c:	f04f 0100 	mov.w	r1, #0
   10020:	f368 0102 	bfi	r1, r8, #0, #3
   10024:	f36f 01c5 	bfc	r1, #3, #3
   10028:	f364 118f 	bfi	r1, r4, #6, #10
   1002c:	4833      	ldr	r0, [pc, #204]	; (100fc <mem_manage_fault.isra.4+0x114>)
   1002e:	f012 fffe 	bl	2302e <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   10032:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10034:	071a      	lsls	r2, r3, #28
   10036:	d50b      	bpl.n	10050 <mem_manage_fault.isra.4+0x68>
		PR_FAULT_INFO("  Unstacking error");
   10038:	f04f 0100 	mov.w	r1, #0
   1003c:	2301      	movs	r3, #1
   1003e:	f363 0102 	bfi	r1, r3, #0, #3
   10042:	f36f 01c5 	bfc	r1, #3, #3
   10046:	f364 118f 	bfi	r1, r4, #6, #10
   1004a:	482d      	ldr	r0, [pc, #180]	; (10100 <mem_manage_fault.isra.4+0x118>)
   1004c:	f012 ffef 	bl	2302e <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   10050:	4d28      	ldr	r5, [pc, #160]	; (100f4 <mem_manage_fault.isra.4+0x10c>)
   10052:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10054:	079b      	lsls	r3, r3, #30
   10056:	d520      	bpl.n	1009a <mem_manage_fault.isra.4+0xb2>
		PR_FAULT_INFO("  Data Access Violation");
   10058:	f04f 0801 	mov.w	r8, #1
   1005c:	f04f 0100 	mov.w	r1, #0
   10060:	f368 0102 	bfi	r1, r8, #0, #3
   10064:	f36f 01c5 	bfc	r1, #3, #3
   10068:	f364 118f 	bfi	r1, r4, #6, #10
   1006c:	4825      	ldr	r0, [pc, #148]	; (10104 <mem_manage_fault.isra.4+0x11c>)
   1006e:	f012 ffde 	bl	2302e <log_0>
		mmfar = SCB->MMFAR;
   10072:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   10074:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10076:	0618      	lsls	r0, r3, #24
   10078:	d50f      	bpl.n	1009a <mem_manage_fault.isra.4+0xb2>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1007a:	f04f 0200 	mov.w	r2, #0
   1007e:	f368 0202 	bfi	r2, r8, #0, #3
   10082:	f36f 02c5 	bfc	r2, #3, #3
   10086:	f364 128f 	bfi	r2, r4, #6, #10
   1008a:	481f      	ldr	r0, [pc, #124]	; (10108 <mem_manage_fault.isra.4+0x120>)
   1008c:	f012 ffdc 	bl	23048 <log_1>
			if (from_hard_fault) {
   10090:	b11f      	cbz	r7, 1009a <mem_manage_fault.isra.4+0xb2>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   10092:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   10098:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1009a:	4d16      	ldr	r5, [pc, #88]	; (100f4 <mem_manage_fault.isra.4+0x10c>)
   1009c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1009e:	07d2      	lsls	r2, r2, #31
   100a0:	d50b      	bpl.n	100ba <mem_manage_fault.isra.4+0xd2>
		PR_FAULT_INFO("  Instruction Access Violation");
   100a2:	f04f 0100 	mov.w	r1, #0
   100a6:	2301      	movs	r3, #1
   100a8:	f363 0102 	bfi	r1, r3, #0, #3
   100ac:	f36f 01c5 	bfc	r1, #3, #3
   100b0:	f364 118f 	bfi	r1, r4, #6, #10
   100b4:	4815      	ldr	r0, [pc, #84]	; (1010c <mem_manage_fault.isra.4+0x124>)
   100b6:	f012 ffba 	bl	2302e <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   100ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
   100bc:	069b      	lsls	r3, r3, #26
   100be:	d50b      	bpl.n	100d8 <mem_manage_fault.isra.4+0xf0>
		PR_FAULT_INFO(
   100c0:	f04f 0100 	mov.w	r1, #0
   100c4:	2301      	movs	r3, #1
   100c6:	f363 0102 	bfi	r1, r3, #0, #3
   100ca:	f36f 01c5 	bfc	r1, #3, #3
   100ce:	f364 118f 	bfi	r1, r4, #6, #10
   100d2:	480f      	ldr	r0, [pc, #60]	; (10110 <mem_manage_fault.isra.4+0x128>)
   100d4:	f012 ffab 	bl	2302e <log_0>
	*recoverable = memory_fault_recoverable(esf);
   100d8:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   100da:	4b06      	ldr	r3, [pc, #24]	; (100f4 <mem_manage_fault.isra.4+0x10c>)
   100dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   100de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   100e0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   100e4:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   100e6:	7030      	strb	r0, [r6, #0]
}
   100e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   100ec:	000258c0 	.word	0x000258c0
   100f0:	000258e8 	.word	0x000258e8
   100f4:	e000ed00 	.word	0xe000ed00
   100f8:	00027431 	.word	0x00027431
   100fc:	00027447 	.word	0x00027447
   10100:	0002747a 	.word	0x0002747a
   10104:	0002748d 	.word	0x0002748d
   10108:	000274a5 	.word	0x000274a5
   1010c:	000274bb 	.word	0x000274bb
   10110:	000274da 	.word	0x000274da

00010114 <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   10114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10118:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   1011a:	f04f 0801 	mov.w	r8, #1
   1011e:	f04f 0100 	mov.w	r1, #0
   10122:	4b44      	ldr	r3, [pc, #272]	; (10234 <bus_fault.isra.5+0x120>)
   10124:	4c44      	ldr	r4, [pc, #272]	; (10238 <bus_fault.isra.5+0x124>)
   10126:	f368 0102 	bfi	r1, r8, #0, #3
   1012a:	1ae4      	subs	r4, r4, r3
   1012c:	f36f 01c5 	bfc	r1, #3, #3
   10130:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   10134:	4d41      	ldr	r5, [pc, #260]	; (1023c <bus_fault.isra.5+0x128>)
	PR_FAULT_INFO("***** BUS FAULT *****");
   10136:	f364 118f 	bfi	r1, r4, #6, #10
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1013a:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   1013c:	4840      	ldr	r0, [pc, #256]	; (10240 <bus_fault.isra.5+0x12c>)
   1013e:	f012 ff76 	bl	2302e <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   10142:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   10144:	04d1      	lsls	r1, r2, #19
   10146:	d50a      	bpl.n	1015e <bus_fault.isra.5+0x4a>
		PR_FAULT_INFO("  Stacking error");
   10148:	f04f 0100 	mov.w	r1, #0
   1014c:	f368 0102 	bfi	r1, r8, #0, #3
   10150:	f36f 01c5 	bfc	r1, #3, #3
   10154:	f364 118f 	bfi	r1, r4, #6, #10
   10158:	483a      	ldr	r0, [pc, #232]	; (10244 <bus_fault.isra.5+0x130>)
   1015a:	f012 ff68 	bl	2302e <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1015e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10160:	051a      	lsls	r2, r3, #20
   10162:	d50b      	bpl.n	1017c <bus_fault.isra.5+0x68>
		PR_FAULT_INFO("  Unstacking error");
   10164:	f04f 0100 	mov.w	r1, #0
   10168:	2301      	movs	r3, #1
   1016a:	f363 0102 	bfi	r1, r3, #0, #3
   1016e:	f36f 01c5 	bfc	r1, #3, #3
   10172:	f364 118f 	bfi	r1, r4, #6, #10
   10176:	4834      	ldr	r0, [pc, #208]	; (10248 <bus_fault.isra.5+0x134>)
   10178:	f012 ff59 	bl	2302e <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1017c:	4d2f      	ldr	r5, [pc, #188]	; (1023c <bus_fault.isra.5+0x128>)
   1017e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10180:	059b      	lsls	r3, r3, #22
   10182:	d520      	bpl.n	101c6 <bus_fault.isra.5+0xb2>
		PR_FAULT_INFO("  Precise data bus error");
   10184:	f04f 0801 	mov.w	r8, #1
   10188:	f04f 0100 	mov.w	r1, #0
   1018c:	f368 0102 	bfi	r1, r8, #0, #3
   10190:	f36f 01c5 	bfc	r1, #3, #3
   10194:	f364 118f 	bfi	r1, r4, #6, #10
   10198:	482c      	ldr	r0, [pc, #176]	; (1024c <bus_fault.isra.5+0x138>)
   1019a:	f012 ff48 	bl	2302e <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   1019e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   101a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   101a2:	0418      	lsls	r0, r3, #16
   101a4:	d50f      	bpl.n	101c6 <bus_fault.isra.5+0xb2>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   101a6:	f04f 0200 	mov.w	r2, #0
   101aa:	f368 0202 	bfi	r2, r8, #0, #3
   101ae:	f36f 02c5 	bfc	r2, #3, #3
   101b2:	f364 128f 	bfi	r2, r4, #6, #10
   101b6:	4826      	ldr	r0, [pc, #152]	; (10250 <bus_fault.isra.5+0x13c>)
   101b8:	f012 ff46 	bl	23048 <log_1>
			if (from_hard_fault) {
   101bc:	b11f      	cbz	r7, 101c6 <bus_fault.isra.5+0xb2>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   101be:	6aab      	ldr	r3, [r5, #40]	; 0x28
   101c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   101c4:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   101c6:	4d1d      	ldr	r5, [pc, #116]	; (1023c <bus_fault.isra.5+0x128>)
   101c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   101ca:	0559      	lsls	r1, r3, #21
   101cc:	d50b      	bpl.n	101e6 <bus_fault.isra.5+0xd2>
		PR_FAULT_INFO("  Imprecise data bus error");
   101ce:	f04f 0100 	mov.w	r1, #0
   101d2:	2301      	movs	r3, #1
   101d4:	f363 0102 	bfi	r1, r3, #0, #3
   101d8:	f36f 01c5 	bfc	r1, #3, #3
   101dc:	f364 118f 	bfi	r1, r4, #6, #10
   101e0:	481c      	ldr	r0, [pc, #112]	; (10254 <bus_fault.isra.5+0x140>)
   101e2:	f012 ff24 	bl	2302e <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   101e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   101e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
   101ec:	d014      	beq.n	10218 <bus_fault.isra.5+0x104>
		PR_FAULT_INFO("  Instruction bus error");
   101ee:	f04f 0100 	mov.w	r1, #0
   101f2:	2301      	movs	r3, #1
   101f4:	f363 0102 	bfi	r1, r3, #0, #3
   101f8:	f36f 01c5 	bfc	r1, #3, #3
   101fc:	4816      	ldr	r0, [pc, #88]	; (10258 <bus_fault.isra.5+0x144>)
   101fe:	f364 118f 	bfi	r1, r4, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   10202:	f012 ff14 	bl	2302e <log_0>
	*recoverable = memory_fault_recoverable(esf);
   10206:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   10208:	4a0c      	ldr	r2, [pc, #48]	; (1023c <bus_fault.isra.5+0x128>)
   1020a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1020c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   10210:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   10212:	7030      	strb	r0, [r6, #0]
}
   10214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   10218:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1021a:	0492      	lsls	r2, r2, #18
   1021c:	d5f3      	bpl.n	10206 <bus_fault.isra.5+0xf2>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1021e:	f04f 0100 	mov.w	r1, #0
   10222:	2201      	movs	r2, #1
   10224:	f362 0102 	bfi	r1, r2, #0, #3
   10228:	f363 01c5 	bfi	r1, r3, #3, #3
   1022c:	f364 118f 	bfi	r1, r4, #6, #10
   10230:	480a      	ldr	r0, [pc, #40]	; (1025c <bus_fault.isra.5+0x148>)
   10232:	e7e6      	b.n	10202 <bus_fault.isra.5+0xee>
   10234:	000258c0 	.word	0x000258c0
   10238:	000258e8 	.word	0x000258e8
   1023c:	e000ed00 	.word	0xe000ed00
   10240:	000273a9 	.word	0x000273a9
   10244:	000273bf 	.word	0x000273bf
   10248:	0002747a 	.word	0x0002747a
   1024c:	000273d0 	.word	0x000273d0
   10250:	000273e9 	.word	0x000273e9
   10254:	000273fe 	.word	0x000273fe
   10258:	00027419 	.word	0x00027419
   1025c:	000274da 	.word	0x000274da

00010260 <z_arm_fault>:
 * running a Secure Firmware.
 */
void z_arm_fault(z_arch_esf_t *esf, u32_t exc_return)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10260:	4b5a      	ldr	r3, [pc, #360]	; (103cc <z_arm_fault+0x16c>)
{
   10262:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10264:	685c      	ldr	r4, [r3, #4]
				goto _exit_fatal;
			}
		}
	}
#elif defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   10266:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
   1026a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
{
   1026e:	4606      	mov	r6, r0
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   10270:	f040 80aa 	bne.w	103c8 <z_arm_fault+0x168>
			EXC_RETURN_INDICATOR_PREFIX) {
		/* Invalid EXC_RETURN value */
		goto _exit_fatal;
	}
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   10274:	f011 0301 	ands.w	r3, r1, #1
   10278:	f040 80a6 	bne.w	103c8 <z_arm_fault+0x168>
		 * This is a fatal error.
		 */
		goto _exit_fatal;
	}

	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   1027c:	064a      	lsls	r2, r1, #25
   1027e:	d50f      	bpl.n	102a0 <z_arm_fault+0x40>
		 * Note that Non-Secure firmware cannot inspect the Secure
		 * stack to determine the root cause of the fault. Fault
		 * inspection will indicate the Non-Secure instruction
		 * that performed the branch to the Secure domain.
		 */
		PR_FAULT_INFO("Exception occurred in Secure State");
   10280:	2201      	movs	r2, #1
   10282:	f04f 0100 	mov.w	r1, #0
   10286:	f362 0102 	bfi	r1, r2, #0, #3
   1028a:	f363 01c5 	bfi	r1, r3, #3, #3
   1028e:	4a50      	ldr	r2, [pc, #320]	; (103d0 <z_arm_fault+0x170>)
   10290:	4b50      	ldr	r3, [pc, #320]	; (103d4 <z_arm_fault+0x174>)
   10292:	4851      	ldr	r0, [pc, #324]	; (103d8 <z_arm_fault+0x178>)
   10294:	1a9b      	subs	r3, r3, r2
   10296:	08db      	lsrs	r3, r3, #3
   10298:	f363 118f 	bfi	r1, r3, #6, #10
   1029c:	f012 fec7 	bl	2302e <log_0>
	*recoverable = false;
   102a0:	2300      	movs	r3, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   102a2:	f3c4 0008 	ubfx	r0, r4, #0, #9
	*recoverable = false;
   102a6:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   102aa:	1ec3      	subs	r3, r0, #3
   102ac:	2b09      	cmp	r3, #9
   102ae:	d873      	bhi.n	10398 <z_arm_fault+0x138>
   102b0:	e8df f003 	tbb	[pc, r3]
   102b4:	585f5b05 	.word	0x585f5b05
   102b8:	72727272 	.word	0x72727272
   102bc:	6372      	.short	0x6372
	PR_FAULT_INFO("***** HARD FAULT *****");
   102be:	2701      	movs	r7, #1
   102c0:	f04f 0100 	mov.w	r1, #0
	*recoverable = false;
   102c4:	2400      	movs	r4, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
   102c6:	4b42      	ldr	r3, [pc, #264]	; (103d0 <z_arm_fault+0x170>)
   102c8:	4d42      	ldr	r5, [pc, #264]	; (103d4 <z_arm_fault+0x174>)
   102ca:	f367 0102 	bfi	r1, r7, #0, #3
   102ce:	1aed      	subs	r5, r5, r3
   102d0:	f36f 01c5 	bfc	r1, #3, #3
   102d4:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   102d8:	f365 118f 	bfi	r1, r5, #6, #10
   102dc:	483f      	ldr	r0, [pc, #252]	; (103dc <z_arm_fault+0x17c>)
   102de:	f012 fea6 	bl	2302e <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   102e2:	4a3a      	ldr	r2, [pc, #232]	; (103cc <z_arm_fault+0x16c>)
	*recoverable = false;
   102e4:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   102e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   102ea:	f013 0302 	ands.w	r3, r3, #2
   102ee:	d00c      	beq.n	1030a <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   102f0:	f04f 0100 	mov.w	r1, #0
   102f4:	f367 0102 	bfi	r1, r7, #0, #3
   102f8:	f364 01c5 	bfi	r1, r4, #3, #3
   102fc:	4838      	ldr	r0, [pc, #224]	; (103e0 <z_arm_fault+0x180>)
   102fe:	f365 118f 	bfi	r1, r5, #6, #10
	PR_FAULT_INFO(
   10302:	f012 fe94 	bl	2302e <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   10306:	2000      	movs	r0, #0
   10308:	e016      	b.n	10338 <z_arm_fault+0xd8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1030a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   1030c:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
   10310:	d015      	beq.n	1033e <z_arm_fault+0xde>
		PR_EXC("  Fault escalation (see below)");
   10312:	f04f 0100 	mov.w	r1, #0
   10316:	f367 0102 	bfi	r1, r7, #0, #3
   1031a:	f363 01c5 	bfi	r1, r3, #3, #3
   1031e:	f365 118f 	bfi	r1, r5, #6, #10
   10322:	4830      	ldr	r0, [pc, #192]	; (103e4 <z_arm_fault+0x184>)
   10324:	f012 fe83 	bl	2302e <log_0>
		if (SCB_MMFSR != 0) {
   10328:	4b2f      	ldr	r3, [pc, #188]	; (103e8 <z_arm_fault+0x188>)
   1032a:	781b      	ldrb	r3, [r3, #0]
   1032c:	b163      	cbz	r3, 10348 <z_arm_fault+0xe8>
			reason = mem_manage_fault(esf, 1, recoverable);
   1032e:	4638      	mov	r0, r7
   10330:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   10334:	f7ff fe58 	bl	ffe8 <mem_manage_fault.isra.4>
#else
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   10338:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1033c:	b913      	cbnz	r3, 10344 <z_arm_fault+0xe4>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_arm_fatal_error(reason, esf);
   1033e:	4631      	mov	r1, r6
   10340:	f7ff fcd8 	bl	fcf4 <z_arm_fatal_error>
}
   10344:	b003      	add	sp, #12
   10346:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
   10348:	4b28      	ldr	r3, [pc, #160]	; (103ec <z_arm_fault+0x18c>)
   1034a:	781b      	ldrb	r3, [r3, #0]
   1034c:	b12b      	cbz	r3, 1035a <z_arm_fault+0xfa>
			reason = bus_fault(esf, 1, recoverable);
   1034e:	4638      	mov	r0, r7
   10350:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   10354:	f7ff fede 	bl	10114 <bus_fault.isra.5>
   10358:	e7ee      	b.n	10338 <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
   1035a:	4b25      	ldr	r3, [pc, #148]	; (103f0 <z_arm_fault+0x190>)
   1035c:	8818      	ldrh	r0, [r3, #0]
   1035e:	b280      	uxth	r0, r0
   10360:	2800      	cmp	r0, #0
   10362:	d0e9      	beq.n	10338 <z_arm_fault+0xd8>
		reason = usage_fault(esf);
   10364:	f7ff fda4 	bl	feb0 <usage_fault.isra.2>
   10368:	e7e6      	b.n	10338 <z_arm_fault+0xd8>
		reason = mem_manage_fault(esf, 0, recoverable);
   1036a:	f10d 0107 	add.w	r1, sp, #7
   1036e:	2000      	movs	r0, #0
   10370:	e7e0      	b.n	10334 <z_arm_fault+0xd4>
		reason = bus_fault(esf, 0, recoverable);
   10372:	f10d 0107 	add.w	r1, sp, #7
   10376:	2000      	movs	r0, #0
   10378:	e7ec      	b.n	10354 <z_arm_fault+0xf4>
	PR_FAULT_INFO(
   1037a:	2301      	movs	r3, #1
   1037c:	f04f 0100 	mov.w	r1, #0
   10380:	4a13      	ldr	r2, [pc, #76]	; (103d0 <z_arm_fault+0x170>)
   10382:	f363 0102 	bfi	r1, r3, #0, #3
   10386:	4b13      	ldr	r3, [pc, #76]	; (103d4 <z_arm_fault+0x174>)
   10388:	f36f 01c5 	bfc	r1, #3, #3
   1038c:	1a9b      	subs	r3, r3, r2
   1038e:	08db      	lsrs	r3, r3, #3
   10390:	f363 118f 	bfi	r1, r3, #6, #10
   10394:	4817      	ldr	r0, [pc, #92]	; (103f4 <z_arm_fault+0x194>)
   10396:	e7b4      	b.n	10302 <z_arm_fault+0xa2>
	PR_FAULT_INFO("***** %s %d) *****",
   10398:	2201      	movs	r2, #1
   1039a:	f04f 0300 	mov.w	r3, #0
   1039e:	490c      	ldr	r1, [pc, #48]	; (103d0 <z_arm_fault+0x170>)
   103a0:	f362 0302 	bfi	r3, r2, #0, #3
   103a4:	4a0b      	ldr	r2, [pc, #44]	; (103d4 <z_arm_fault+0x174>)
   103a6:	4c14      	ldr	r4, [pc, #80]	; (103f8 <z_arm_fault+0x198>)
   103a8:	1a52      	subs	r2, r2, r1
   103aa:	4914      	ldr	r1, [pc, #80]	; (103fc <z_arm_fault+0x19c>)
   103ac:	08d2      	lsrs	r2, r2, #3
   103ae:	f36f 03c5 	bfc	r3, #3, #3
   103b2:	f362 138f 	bfi	r3, r2, #6, #10
   103b6:	280f      	cmp	r0, #15
   103b8:	bfc8      	it	gt
   103ba:	4621      	movgt	r1, r4
   103bc:	f1a0 0210 	sub.w	r2, r0, #16
   103c0:	480f      	ldr	r0, [pc, #60]	; (10400 <z_arm_fault+0x1a0>)
   103c2:	f012 fe55 	bl	23070 <log_2>
   103c6:	e79e      	b.n	10306 <z_arm_fault+0xa6>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   103c8:	2000      	movs	r0, #0
   103ca:	e7b8      	b.n	1033e <z_arm_fault+0xde>
   103cc:	e000ed00 	.word	0xe000ed00
   103d0:	000258c0 	.word	0x000258c0
   103d4:	000258e8 	.word	0x000258e8
   103d8:	00027600 	.word	0x00027600
   103dc:	00027623 	.word	0x00027623
   103e0:	0002763a 	.word	0x0002763a
   103e4:	0002765b 	.word	0x0002765b
   103e8:	e000ed28 	.word	0xe000ed28
   103ec:	e000ed29 	.word	0xe000ed29
   103f0:	e000ed2a 	.word	0xe000ed2a
   103f4:	0002767a 	.word	0x0002767a
   103f8:	000276c5 	.word	0x000276c5
   103fc:	000276b0 	.word	0x000276b0
   10400:	000276de 	.word	0x000276de

00010404 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   10404:	4a02      	ldr	r2, [pc, #8]	; (10410 <z_arm_fault_init+0xc>)
   10406:	6953      	ldr	r3, [r2, #20]
   10408:	f043 0310 	orr.w	r3, r3, #16
   1040c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   1040e:	4770      	bx	lr
   10410:	e000ed00 	.word	0xe000ed00

00010414 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
   10414:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10416:	2120      	movs	r1, #32
   10418:	4803      	ldr	r0, [pc, #12]	; (10428 <z_arm_int_lib_init+0x14>)
   1041a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1041c:	3301      	adds	r3, #1
   1041e:	2b41      	cmp	r3, #65	; 0x41
   10420:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   10424:	d1f9      	bne.n	1041a <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   10426:	4770      	bx	lr
   10428:	e000e100 	.word	0xe000e100

0001042c <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   1042c:	b538      	push	{r3, r4, r5, lr}
   1042e:	4605      	mov	r5, r0
	__asm__ volatile(
   10430:	f04f 0320 	mov.w	r3, #32
   10434:	f3ef 8411 	mrs	r4, BASEPRI
   10438:	f383 8811 	msr	BASEPRI, r3
   1043c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
   10440:	f014 f912 	bl	24668 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   10444:	4b0a      	ldr	r3, [pc, #40]	; (10470 <z_impl_k_thread_abort+0x44>)
   10446:	689b      	ldr	r3, [r3, #8]
   10448:	42ab      	cmp	r3, r5
   1044a:	d10b      	bne.n	10464 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   1044c:	4b09      	ldr	r3, [pc, #36]	; (10474 <z_impl_k_thread_abort+0x48>)
   1044e:	685a      	ldr	r2, [r3, #4]
   10450:	f3c2 0208 	ubfx	r2, r2, #0, #9
   10454:	b912      	cbnz	r2, 1045c <z_impl_k_thread_abort+0x30>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = z_arch_swap(key);
   10456:	4620      	mov	r0, r4
   10458:	f7ff fba4 	bl	fba4 <z_arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1045c:	685a      	ldr	r2, [r3, #4]
   1045e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   10462:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   10464:	4620      	mov	r0, r4
}
   10466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   1046a:	f014 b815 	b.w	24498 <z_reschedule_irqlock>
   1046e:	bf00      	nop
   10470:	200222f4 	.word	0x200222f4
   10474:	e000ed00 	.word	0xe000ed00

00010478 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   10478:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   1047a:	4b0e      	ldr	r3, [pc, #56]	; (104b4 <z_arm_configure_static_mpu_regions+0x3c>)
{
   1047c:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   1047e:	9302      	str	r3, [sp, #8]
   10480:	4b0d      	ldr	r3, [pc, #52]	; (104b8 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   10482:	4c0e      	ldr	r4, [pc, #56]	; (104bc <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   10484:	9303      	str	r3, [sp, #12]
   10486:	4b0e      	ldr	r3, [pc, #56]	; (104c0 <z_arm_configure_static_mpu_regions+0x48>)
	const struct k_mem_partition *static_regions[] = {
   10488:	a808      	add	r0, sp, #32
		const struct k_mem_partition ramfunc_region =
   1048a:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   1048c:	ab02      	add	r3, sp, #8
   1048e:	f840 3d1c 	str.w	r3, [r0, #-28]!
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   10492:	4a0c      	ldr	r2, [pc, #48]	; (104c4 <z_arm_configure_static_mpu_regions+0x4c>)
   10494:	4623      	mov	r3, r4
   10496:	2101      	movs	r1, #1
   10498:	f000 f956 	bl	10748 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   1049c:	2300      	movs	r3, #0
   1049e:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   104a0:	4b09      	ldr	r3, [pc, #36]	; (104c8 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   104a2:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   104a4:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   104a6:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   104a8:	9305      	str	r3, [sp, #20]
   104aa:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   104ac:	f000 f956 	bl	1075c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   104b0:	b008      	add	sp, #32
   104b2:	bd10      	pop	{r4, pc}
   104b4:	20020000 	.word	0x20020000
   104b8:	00000000 	.word	0x00000000
   104bc:	20040000 	.word	0x20040000
   104c0:	00010006 	.word	0x00010006
   104c4:	20020000 	.word	0x20020000
   104c8:	20020000 	.word	0x20020000

000104cc <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   104cc:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   104ce:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   104d0:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   104d2:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   104d6:	f004 021f 	and.w	r2, r4, #31
   104da:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   104dc:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   104de:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   104e0:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   104e4:	4904      	ldr	r1, [pc, #16]	; (104f8 <region_init+0x2c>)
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   104e6:	f043 0301 	orr.w	r3, r3, #1
   104ea:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
   104ee:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   104f0:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   104f2:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   104f4:	bd10      	pop	{r4, pc}
   104f6:	bf00      	nop
   104f8:	e000ed90 	.word	0xe000ed90

000104fc <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
   104fc:	b508      	push	{r3, lr}
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   104fe:	f04f 0200 	mov.w	r2, #0
   10502:	2301      	movs	r3, #1
   10504:	4908      	ldr	r1, [pc, #32]	; (10528 <region_allocate_and_init.part.0+0x2c>)
   10506:	f363 0202 	bfi	r2, r3, #0, #3
   1050a:	4b08      	ldr	r3, [pc, #32]	; (1052c <region_allocate_and_init.part.0+0x30>)
   1050c:	f36f 02c5 	bfc	r2, #3, #3
   10510:	1a5b      	subs	r3, r3, r1
   10512:	08db      	lsrs	r3, r3, #3
   10514:	4601      	mov	r1, r0
   10516:	f363 128f 	bfi	r2, r3, #6, #10
   1051a:	4805      	ldr	r0, [pc, #20]	; (10530 <region_allocate_and_init.part.0+0x34>)
   1051c:	f012 fd94 	bl	23048 <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   10520:	f06f 0015 	mvn.w	r0, #21
   10524:	bd08      	pop	{r3, pc}
   10526:	bf00      	nop
   10528:	000258c0 	.word	0x000258c0
   1052c:	000258d8 	.word	0x000258d8
   10530:	0002773b 	.word	0x0002773b

00010534 <mpu_configure_regions.constprop.2>:

/* This internal function programs a set of given MPU regions
 * over a background memory area, optionally performing a
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
   10534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10538:	4607      	mov	r7, r0
   1053a:	4688      	mov	r8, r1
   1053c:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1053e:	2600      	movs	r6, #0
	MPU->RNR = index;
   10540:	4d60      	ldr	r5, [pc, #384]	; (106c4 <mpu_configure_regions.constprop.2+0x190>)
static int mpu_configure_regions(const struct k_mem_partition
   10542:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   10544:	4546      	cmp	r6, r8
   10546:	da41      	bge.n	105cc <mpu_configure_regions.constprop.2+0x98>
		if (regions[i]->size == 0U) {
   10548:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   1054c:	f8d3 9004 	ldr.w	r9, [r3, #4]
   10550:	f1b9 0f00 	cmp.w	r9, #0
   10554:	d05d      	beq.n	10612 <mpu_configure_regions.constprop.2+0xde>
		&&
   10556:	f1b9 0f1f 	cmp.w	r9, #31
   1055a:	d924      	bls.n	105a6 <mpu_configure_regions.constprop.2+0x72>
		&&
   1055c:	f019 0f1f 	tst.w	r9, #31
   10560:	d121      	bne.n	105a6 <mpu_configure_regions.constprop.2+0x72>
		((part->start &
   10562:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   10566:	f01a 0f1f 	tst.w	sl, #31
   1056a:	d11c      	bne.n	105a6 <mpu_configure_regions.constprop.2+0x72>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1056c:	4650      	mov	r0, sl
   1056e:	f012 f9bf 	bl	228f0 <arm_cmse_mpu_region_get>
   10572:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10574:	eb09 000a 	add.w	r0, r9, sl
   10578:	3801      	subs	r0, #1
   1057a:	f012 f9b9 	bl	228f0 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1057e:	4583      	cmp	fp, r0
   10580:	d028      	beq.n	105d4 <mpu_configure_regions.constprop.2+0xa0>
	return -EINVAL;
   10582:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   10586:	2301      	movs	r3, #1
   10588:	f04f 0200 	mov.w	r2, #0
   1058c:	494e      	ldr	r1, [pc, #312]	; (106c8 <mpu_configure_regions.constprop.2+0x194>)
   1058e:	f363 0202 	bfi	r2, r3, #0, #3
   10592:	4b4e      	ldr	r3, [pc, #312]	; (106cc <mpu_configure_regions.constprop.2+0x198>)
   10594:	f36f 02c5 	bfc	r2, #3, #3
   10598:	1a5b      	subs	r3, r3, r1
   1059a:	08db      	lsrs	r3, r3, #3
   1059c:	f363 128f 	bfi	r2, r3, #6, #10
   105a0:	4659      	mov	r1, fp
   105a2:	484b      	ldr	r0, [pc, #300]	; (106d0 <mpu_configure_regions.constprop.2+0x19c>)
   105a4:	e00e      	b.n	105c4 <mpu_configure_regions.constprop.2+0x90>
			LOG_ERR("Partition %u: sanity check failed.", i);
   105a6:	2301      	movs	r3, #1
   105a8:	f04f 0200 	mov.w	r2, #0
   105ac:	4946      	ldr	r1, [pc, #280]	; (106c8 <mpu_configure_regions.constprop.2+0x194>)
   105ae:	f363 0202 	bfi	r2, r3, #0, #3
   105b2:	4b46      	ldr	r3, [pc, #280]	; (106cc <mpu_configure_regions.constprop.2+0x198>)
   105b4:	f36f 02c5 	bfc	r2, #3, #3
   105b8:	1a5b      	subs	r3, r3, r1
   105ba:	4631      	mov	r1, r6
   105bc:	08db      	lsrs	r3, r3, #3
   105be:	4845      	ldr	r0, [pc, #276]	; (106d4 <mpu_configure_regions.constprop.2+0x1a0>)
   105c0:	f363 128f 	bfi	r2, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
   105c4:	f012 fd40 	bl	23048 <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   105c8:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   105cc:	4620      	mov	r0, r4
   105ce:	b005      	add	sp, #20
   105d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   105d4:	f11b 0f16 	cmn.w	fp, #22
   105d8:	d0d5      	beq.n	10586 <mpu_configure_regions.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
   105da:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   105dc:	455b      	cmp	r3, fp
   105de:	dbd2      	blt.n	10586 <mpu_configure_regions.constprop.2+0x52>
	MPU->RNR = index;
   105e0:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   105e4:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   105e6:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   105ea:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   105ec:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   105f0:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   105f4:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   105f8:	e9d1 3200 	ldrd	r3, r2, [r1]
   105fc:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   105fe:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   10600:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   10604:	d118      	bne.n	10638 <mpu_configure_regions.constprop.2+0x104>
   10606:	45ca      	cmp	sl, r9
   10608:	d105      	bne.n	10616 <mpu_configure_regions.constprop.2+0xe2>
			mpu_configure_region(u_reg_index, regions[i]);
   1060a:	fa5f f08b 	uxtb.w	r0, fp
   1060e:	f013 f8ba 	bl	23786 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   10612:	3601      	adds	r6, #1
   10614:	e796      	b.n	10544 <mpu_configure_regions.constprop.2+0x10>
	MPU->RNR = index;
   10616:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1061a:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   1061c:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10620:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   10624:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10626:	60ea      	str	r2, [r5, #12]
			reg_index =
   10628:	b2e0      	uxtb	r0, r4
			reg_index =
   1062a:	f013 f8ac 	bl	23786 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1062e:	f110 0f16 	cmn.w	r0, #22
   10632:	d0c9      	beq.n	105c8 <mpu_configure_regions.constprop.2+0x94>
			reg_index++;
   10634:	1c44      	adds	r4, r0, #1
   10636:	e7ec      	b.n	10612 <mpu_configure_regions.constprop.2+0xde>
	MPU->RNR = index;
   10638:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1063c:	692a      	ldr	r2, [r5, #16]
   1063e:	3b01      	subs	r3, #1
   10640:	f023 031f 	bic.w	r3, r3, #31
   10644:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   10648:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   1064a:	45ca      	cmp	sl, r9
   1064c:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1064e:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   10650:	d0eb      	beq.n	1062a <mpu_configure_regions.constprop.2+0xf6>
			reg_index =
   10652:	f013 f898 	bl	23786 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   10656:	f110 0f16 	cmn.w	r0, #22
   1065a:	d0b5      	beq.n	105c8 <mpu_configure_regions.constprop.2+0x94>
	MPU->RNR = index;
   1065c:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   10660:	68ea      	ldr	r2, [r5, #12]
   10662:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   10666:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   1066a:	f362 0304 	bfi	r3, r2, #0, #5
   1066e:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10672:	692b      	ldr	r3, [r5, #16]
   10674:	f89d 2008 	ldrb.w	r2, [sp, #8]
   10678:	085b      	lsrs	r3, r3, #1
   1067a:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   1067e:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10682:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   10686:	e9d3 1300 	ldrd	r1, r3, [r3]
   1068a:	440b      	add	r3, r1
   1068c:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   1068e:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   10692:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   10694:	4453      	add	r3, sl
   10696:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
   1069a:	b2e4      	uxtb	r4, r4
			REGION_LIMIT_ADDR((regions[i]->start +
   1069c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   106a0:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
   106a2:	9303      	str	r3, [sp, #12]
   106a4:	d908      	bls.n	106b8 <mpu_configure_regions.constprop.2+0x184>
   106a6:	4620      	mov	r0, r4
   106a8:	f7ff ff28 	bl	104fc <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
   106ac:	f110 0f16 	cmn.w	r0, #22
   106b0:	4604      	mov	r4, r0
   106b2:	d089      	beq.n	105c8 <mpu_configure_regions.constprop.2+0x94>
			reg_index++;
   106b4:	3401      	adds	r4, #1
   106b6:	e7ac      	b.n	10612 <mpu_configure_regions.constprop.2+0xde>
	region_init(index, region_conf);
   106b8:	4669      	mov	r1, sp
   106ba:	4620      	mov	r0, r4
   106bc:	f7ff ff06 	bl	104cc <region_init>
   106c0:	e7f8      	b.n	106b4 <mpu_configure_regions.constprop.2+0x180>
   106c2:	bf00      	nop
   106c4:	e000ed90 	.word	0xe000ed90
   106c8:	000258c0 	.word	0x000258c0
   106cc:	000258d8 	.word	0x000258d8
   106d0:	00027718 	.word	0x00027718
   106d4:	000276f5 	.word	0x000276f5

000106d8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   106d8:	2205      	movs	r2, #5
   106da:	4b03      	ldr	r3, [pc, #12]	; (106e8 <arm_core_mpu_enable+0x10>)
   106dc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   106de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   106e2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   106e6:	4770      	bx	lr
   106e8:	e000ed90 	.word	0xe000ed90

000106ec <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   106ec:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   106f0:	2200      	movs	r2, #0
   106f2:	4b01      	ldr	r3, [pc, #4]	; (106f8 <arm_core_mpu_disable+0xc>)
   106f4:	605a      	str	r2, [r3, #4]
}
   106f6:	4770      	bx	lr
   106f8:	e000ed90 	.word	0xe000ed90

000106fc <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   106fc:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   106fe:	4d0e      	ldr	r5, [pc, #56]	; (10738 <arm_mpu_init+0x3c>)
   10700:	682e      	ldr	r6, [r5, #0]
   10702:	2e10      	cmp	r6, #16
   10704:	d815      	bhi.n	10732 <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10706:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   10708:	f7ff fff0 	bl	106ec <arm_core_mpu_disable>
	MPU->MAIR0 =
   1070c:	4b0b      	ldr	r3, [pc, #44]	; (1073c <arm_mpu_init+0x40>)
   1070e:	4a0c      	ldr	r2, [pc, #48]	; (10740 <arm_mpu_init+0x44>)
   10710:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10712:	42a6      	cmp	r6, r4
   10714:	d105      	bne.n	10722 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   10716:	4b0b      	ldr	r3, [pc, #44]	; (10744 <arm_mpu_init+0x48>)
   10718:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
   1071a:	f7ff ffdd 	bl	106d8 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   1071e:	2000      	movs	r0, #0
}
   10720:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   10722:	6869      	ldr	r1, [r5, #4]
   10724:	4620      	mov	r0, r4
   10726:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1072a:	f7ff fecf 	bl	104cc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1072e:	3401      	adds	r4, #1
   10730:	e7ef      	b.n	10712 <arm_mpu_init+0x16>
		return -1;
   10732:	f04f 30ff 	mov.w	r0, #4294967295
   10736:	e7f3      	b.n	10720 <arm_mpu_init+0x24>
   10738:	00025a08 	.word	0x00025a08
   1073c:	e000ed90 	.word	0xe000ed90
   10740:	0044ffaa 	.word	0x0044ffaa
   10744:	2002268c 	.word	0x2002268c

00010748 <arm_core_mpu_configure_static_mpu_regions>:
{
   10748:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1074a:	4c03      	ldr	r4, [pc, #12]	; (10758 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   1074c:	7822      	ldrb	r2, [r4, #0]
   1074e:	f7ff fef1 	bl	10534 <mpu_configure_regions.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   10752:	7020      	strb	r0, [r4, #0]
}
   10754:	bd10      	pop	{r4, pc}
   10756:	bf00      	nop
   10758:	2002268c 	.word	0x2002268c

0001075c <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   1075c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10760:	4689      	mov	r9, r1
   10762:	4607      	mov	r7, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10764:	2600      	movs	r6, #0
   10766:	f8df 8090 	ldr.w	r8, [pc, #144]	; 107f8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>
		if (dyn_reg_info[i].index == -EINVAL) {

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1076a:	f8df a090 	ldr.w	sl, [pc, #144]	; 107fc <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
	MPU->RNR = index;
   1076e:	4c21      	ldr	r4, [pc, #132]	; (107f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x98>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10770:	454e      	cmp	r6, r9
   10772:	da19      	bge.n	107a8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
		if (dyn_region_areas[i].size == 0U) {
   10774:	f8d7 b004 	ldr.w	fp, [r7, #4]
   10778:	f1bb 0f00 	cmp.w	fp, #0
   1077c:	d036      	beq.n	107ec <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
			get_region_index(dyn_region_areas[i].start,
   1077e:	683b      	ldr	r3, [r7, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10780:	4618      	mov	r0, r3
   10782:	9301      	str	r3, [sp, #4]
   10784:	f012 f8b4 	bl	228f0 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10788:	9b01      	ldr	r3, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1078a:	4605      	mov	r5, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1078c:	eb0b 0003 	add.w	r0, fp, r3
   10790:	3801      	subs	r0, #1
   10792:	f012 f8ad 	bl	228f0 <arm_cmse_mpu_region_get>
   10796:	2314      	movs	r3, #20
	if (region_start_addr == region_end_addr) {
   10798:	4285      	cmp	r5, r0
   1079a:	fb03 f306 	mul.w	r3, r3, r6
   1079e:	d006      	beq.n	107ae <arm_core_mpu_mark_areas_for_dynamic_regions+0x52>
		dyn_reg_info[i].index =
   107a0:	f06f 0215 	mvn.w	r2, #21
   107a4:	f848 2003 	str.w	r2, [r8, r3]
}
   107a8:	b003      	add	sp, #12
   107aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_reg_info[i].index == -EINVAL) {
   107ae:	f115 0f16 	cmn.w	r5, #22
		dyn_reg_info[i].index =
   107b2:	f848 5003 	str.w	r5, [r8, r3]
		if (dyn_reg_info[i].index == -EINVAL) {
   107b6:	d0f7      	beq.n	107a8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
		if (dyn_reg_info[i].index >= static_regions_num) {
   107b8:	f89a 2000 	ldrb.w	r2, [sl]
   107bc:	42aa      	cmp	r2, r5
   107be:	ddf3      	ble.n	107a8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
	MPU->RNR = index;
   107c0:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
   107c2:	4443      	add	r3, r8
	MPU->RNR = index;
   107c4:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
   107c6:	68e0      	ldr	r0, [r4, #12]
   107c8:	7b19      	ldrb	r1, [r3, #12]
   107ca:	f360 0104 	bfi	r1, r0, #0, #5
   107ce:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   107d0:	6921      	ldr	r1, [r4, #16]
   107d2:	7b18      	ldrb	r0, [r3, #12]
   107d4:	0849      	lsrs	r1, r1, #1
   107d6:	f361 1047 	bfi	r0, r1, #5, #3
   107da:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   107dc:	68e2      	ldr	r2, [r4, #12]
   107de:	f022 021f 	bic.w	r2, r2, #31
   107e2:	605a      	str	r2, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   107e4:	6922      	ldr	r2, [r4, #16]
   107e6:	f022 021f 	bic.w	r2, r2, #31
   107ea:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   107ec:	3601      	adds	r6, #1
   107ee:	370c      	adds	r7, #12
   107f0:	e7be      	b.n	10770 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   107f2:	bf00      	nop
   107f4:	e000ed90 	.word	0xe000ed90
   107f8:	2002025c 	.word	0x2002025c
   107fc:	2002268c 	.word	0x2002268c

00010800 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   10800:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   10802:	4b0c      	ldr	r3, [pc, #48]	; (10834 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
   10804:	460e      	mov	r6, r1
   10806:	781c      	ldrb	r4, [r3, #0]
   10808:	4605      	mov	r5, r0
   1080a:	4623      	mov	r3, r4
  mpu->RLAR = 0U;
   1080c:	2100      	movs	r1, #0
  mpu->RNR = rnr;
   1080e:	4a0a      	ldr	r2, [pc, #40]	; (10838 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   10810:	2b0f      	cmp	r3, #15
   10812:	dd0b      	ble.n	1082c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>

	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
   10814:	4b09      	ldr	r3, [pc, #36]	; (1083c <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
   10816:	1d19      	adds	r1, r3, #4
   10818:	6818      	ldr	r0, [r3, #0]
   1081a:	f7ff fe57 	bl	104cc <region_init>
	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   1081e:	4622      	mov	r2, r4
   10820:	4631      	mov	r1, r6
   10822:	4628      	mov	r0, r5
}
   10824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10828:	f7ff be84 	b.w	10534 <mpu_configure_regions.constprop.2>
   1082c:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   1082e:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   10830:	3301      	adds	r3, #1
   10832:	e7ed      	b.n	10810 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
   10834:	2002268c 	.word	0x2002268c
   10838:	e000ed90 	.word	0xe000ed90
   1083c:	2002025c 	.word	0x2002025c

00010840 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   10840:	4b01      	ldr	r3, [pc, #4]	; (10848 <__stdout_hook_install+0x8>)
   10842:	6018      	str	r0, [r3, #0]
}
   10844:	4770      	bx	lr
   10846:	bf00      	nop
   10848:	20024920 	.word	0x20024920

0001084c <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   1084c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1084e:	4606      	mov	r6, r0
   10850:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   10852:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   10854:	4f06      	ldr	r7, [pc, #24]	; (10870 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   10856:	42ac      	cmp	r4, r5
   10858:	da08      	bge.n	1086c <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   1085a:	683b      	ldr	r3, [r7, #0]
   1085c:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1085e:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   10860:	5530      	strb	r0, [r6, r4]
   10862:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   10866:	d001      	beq.n	1086c <z_impl_zephyr_read_stdin+0x20>
   10868:	280d      	cmp	r0, #13
   1086a:	d1f4      	bne.n	10856 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   1086c:	4620      	mov	r0, r4
   1086e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10870:	2002491c 	.word	0x2002491c

00010874 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   10874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10878:	4606      	mov	r6, r0
   1087a:	460d      	mov	r5, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   1087c:	4604      	mov	r4, r0
   1087e:	4f0a      	ldr	r7, [pc, #40]	; (108a8 <z_impl_zephyr_write_stdout+0x34>)
   10880:	1ba3      	subs	r3, r4, r6
   10882:	429d      	cmp	r5, r3
   10884:	dc02      	bgt.n	1088c <z_impl_zephyr_write_stdout+0x18>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   10886:	4628      	mov	r0, r5
   10888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (*(buf + i) == '\n') {
   1088c:	7823      	ldrb	r3, [r4, #0]
   1088e:	46a0      	mov	r8, r4
   10890:	2b0a      	cmp	r3, #10
   10892:	d102      	bne.n	1089a <z_impl_zephyr_write_stdout+0x26>
			_stdout_hook('\r');
   10894:	683b      	ldr	r3, [r7, #0]
   10896:	200d      	movs	r0, #13
   10898:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   1089a:	683b      	ldr	r3, [r7, #0]
   1089c:	f898 0000 	ldrb.w	r0, [r8]
   108a0:	3401      	adds	r4, #1
   108a2:	4798      	blx	r3
   108a4:	e7ec      	b.n	10880 <z_impl_zephyr_write_stdout+0xc>
   108a6:	bf00      	nop
   108a8:	20024920 	.word	0x20024920

000108ac <_exit>:
	return 0;
}
FUNC_ALIAS(_fstat, fstat, int);

void _exit(int status)
{
   108ac:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   108ae:	2105      	movs	r1, #5
   108b0:	4801      	ldr	r0, [pc, #4]	; (108b8 <_exit+0xc>)
   108b2:	f7ff ffdf 	bl	10874 <z_impl_zephyr_write_stdout>
   108b6:	e7fe      	b.n	108b6 <_exit+0xa>
   108b8:	00027761 	.word	0x00027761

000108bc <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   108bc:	b538      	push	{r3, r4, r5, lr}
   108be:	4605      	mov	r5, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
   108c0:	f04f 31ff 	mov.w	r1, #4294967295
   108c4:	480b      	ldr	r0, [pc, #44]	; (108f4 <_sbrk+0x38>)
   108c6:	f012 f9e0 	bl	22c8a <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   108ca:	4a0b      	ldr	r2, [pc, #44]	; (108f8 <_sbrk+0x3c>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   108cc:	490b      	ldr	r1, [pc, #44]	; (108fc <_sbrk+0x40>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
   108ce:	6814      	ldr	r4, [r2, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   108d0:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
   108d4:	4425      	add	r5, r4
   108d6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   108da:	429d      	cmp	r5, r3
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   108dc:	bf2c      	ite	cs
   108de:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   108e2:	1864      	addcc	r4, r4, r1
	}

	sys_sem_give(&heap_sem);
   108e4:	4803      	ldr	r0, [pc, #12]	; (108f4 <_sbrk+0x38>)
		heap_sz += count;
   108e6:	bf38      	it	cc
   108e8:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
   108ea:	f012 f9c9 	bl	22c80 <sys_sem_give>

	return ret;
}
   108ee:	4620      	mov	r0, r4
   108f0:	bd38      	pop	{r3, r4, r5, pc}
   108f2:	bf00      	nop
   108f4:	20024c30 	.word	0x20024c30
   108f8:	20020270 	.word	0x20020270
   108fc:	20024c9c 	.word	0x20024c9c

00010900 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   10900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10902:	4e09      	ldr	r6, [pc, #36]	; (10928 <net_if_init+0x28>)

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   10904:	2400      	movs	r4, #0
   10906:	4637      	mov	r7, r6
   10908:	4d08      	ldr	r5, [pc, #32]	; (1092c <net_if_init+0x2c>)
   1090a:	1bad      	subs	r5, r5, r6
   1090c:	42ac      	cmp	r4, r5
   1090e:	eb06 0004 	add.w	r0, r6, r4
   10912:	d100      	bne.n	10916 <net_if_init+0x16>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   10914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   10916:	593b      	ldr	r3, [r7, r4]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   10918:	681b      	ldr	r3, [r3, #0]
   1091a:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   1091c:	b113      	cbz	r3, 10924 <net_if_init+0x24>
   1091e:	681b      	ldr	r3, [r3, #0]
   10920:	b103      	cbz	r3, 10924 <net_if_init+0x24>
	api->init(iface);
   10922:	4798      	blx	r3
   10924:	3420      	adds	r4, #32
   10926:	e7f1      	b.n	1090c <net_if_init+0xc>
   10928:	20024c60 	.word	0x20024c60
   1092c:	20024c80 	.word	0x20024c80

00010930 <net_if_post_init>:

void net_if_post_init(void)
{
   10930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10932:	4e0a      	ldr	r6, [pc, #40]	; (1095c <net_if_post_init+0x2c>)
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   10934:	2400      	movs	r4, #0
   10936:	4637      	mov	r7, r6
   10938:	4d09      	ldr	r5, [pc, #36]	; (10960 <net_if_post_init+0x30>)
   1093a:	1bad      	subs	r5, r5, r6
   1093c:	42ac      	cmp	r4, r5
   1093e:	eb04 0306 	add.w	r3, r4, r6
   10942:	d100      	bne.n	10946 <net_if_post_init+0x16>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   10944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return atomic_test_bit(iface->if_dev->flags, value);
   10946:	5938      	ldr	r0, [r7, r4]
   10948:	2103      	movs	r1, #3
   1094a:	300c      	adds	r0, #12
   1094c:	f012 ff6c 	bl	23828 <atomic_test_bit>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   10950:	b910      	cbnz	r0, 10958 <net_if_post_init+0x28>
			net_if_up(iface);
   10952:	4618      	mov	r0, r3
   10954:	f012 ff6e 	bl	23834 <net_if_up>
   10958:	3420      	adds	r4, #32
   1095a:	e7ef      	b.n	1093c <net_if_post_init+0xc>
   1095c:	20024c60 	.word	0x20024c60
   10960:	20024c80 	.word	0x20024c80

00010964 <nrf_gpio_pin_port_decode.isra.6.part.7>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   10964:	b508      	push	{r3, lr}
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   10966:	4a03      	ldr	r2, [pc, #12]	; (10974 <nrf_gpio_pin_port_decode.isra.6.part.7+0x10>)
   10968:	4b03      	ldr	r3, [pc, #12]	; (10978 <nrf_gpio_pin_port_decode.isra.6.part.7+0x14>)
   1096a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   1096e:	4803      	ldr	r0, [pc, #12]	; (1097c <nrf_gpio_pin_port_decode.isra.6.part.7+0x18>)
   10970:	f010 fddc 	bl	2152c <__assert_func>
   10974:	0002776f 	.word	0x0002776f
   10978:	00027788 	.word	0x00027788
   1097c:	00027796 	.word	0x00027796

00010980 <nrf_gpio_cfg_sense_set>:
   10980:	281f      	cmp	r0, #31
        sense_config);
}


__STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t pin_number, nrf_gpio_pin_sense_t sense_config)
{
   10982:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   10984:	d901      	bls.n	1098a <nrf_gpio_cfg_sense_set+0xa>
   10986:	f7ff ffed 	bl	10964 <nrf_gpio_pin_port_decode.isra.6.part.7>
   1098a:	4b08      	ldr	r3, [pc, #32]	; (109ac <nrf_gpio_cfg_sense_set+0x2c>)
   1098c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   10990:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   10994:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   10998:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1099c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   109a0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   109a4:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   109a8:	bd08      	pop	{r3, pc}
   109aa:	bf00      	nop
   109ac:	40842500 	.word	0x40842500

000109b0 <gpiote_pin_int_cfg>:
	}
	return NRF_GPIO_PIN_SENSE_LOW;
}

static int gpiote_pin_int_cfg(struct device *port, u32_t pin)
{
   109b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->config->config_info;
   109b4:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   109b6:	f001 041f 	and.w	r4, r1, #31
   109ba:	689b      	ldr	r3, [r3, #8]
{
   109bc:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   109be:	791b      	ldrb	r3, [r3, #4]
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
   109c0:	4e48      	ldr	r6, [pc, #288]	; (10ae4 <gpiote_pin_int_cfg+0x134>)
   109c2:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   109c6:	2300      	movs	r3, #0
   109c8:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
   109cc:	6887      	ldr	r7, [r0, #8]
   109ce:	b2d2      	uxtb	r2, r2
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   109d0:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   109d4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   109d8:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
   109dc:	428c      	cmp	r4, r1
   109de:	d166      	bne.n	10aae <gpiote_pin_int_cfg+0xfe>
		    && (intenset & BIT(i))) {
   109e0:	fa22 f103 	lsr.w	r1, r2, r3
   109e4:	07c9      	lsls	r1, r1, #31
   109e6:	d562      	bpl.n	10aae <gpiote_pin_int_cfg+0xfe>
   109e8:	009a      	lsls	r2, r3, #2
   109ea:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   109ee:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   109f2:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   109f6:	f021 0101 	bic.w	r1, r1, #1
   109fa:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
   109fe:	2201      	movs	r2, #1
   10a00:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENCLR = mask;
   10a04:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	int res = 0;

	gpiote_channel_free(abs_pin);
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   10a08:	4620      	mov	r0, r4
   10a0a:	2100      	movs	r1, #0
   10a0c:	f7ff ffb8 	bl	10980 <nrf_gpio_cfg_sense_set>

	/* Pins trigger interrupts only if pin has been configured to do so
	 * and callback has been enabled for that pin.
	 */
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   10a10:	68b8      	ldr	r0, [r7, #8]
   10a12:	40e8      	lsrs	r0, r5
   10a14:	f010 0001 	ands.w	r0, r0, #1
   10a18:	d047      	beq.n	10aaa <gpiote_pin_int_cfg+0xfa>
   10a1a:	68f8      	ldr	r0, [r7, #12]
   10a1c:	40e8      	lsrs	r0, r5
   10a1e:	f010 0001 	ands.w	r0, r0, #1
   10a22:	d042      	beq.n	10aaa <gpiote_pin_int_cfg+0xfa>
		if (data->trig_edge & BIT(pin)) {
   10a24:	6978      	ldr	r0, [r7, #20]
   10a26:	40e8      	lsrs	r0, r5
   10a28:	f010 0801 	ands.w	r8, r0, #1
   10a2c:	d04b      	beq.n	10ac6 <gpiote_pin_int_cfg+0x116>
		/* For edge triggering we use GPIOTE channels. */
			nrf_gpiote_polarity_t pol;

			if (data->double_edge & BIT(pin)) {
   10a2e:	69bb      	ldr	r3, [r7, #24]
   10a30:	40eb      	lsrs	r3, r5
   10a32:	07db      	lsls	r3, r3, #31
   10a34:	d43f      	bmi.n	10ab6 <gpiote_pin_int_cfg+0x106>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
			} else if (((data->active_level & BIT(pin)) != 0U)
   10a36:	693b      	ldr	r3, [r7, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   10a38:	69fa      	ldr	r2, [r7, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   10a3a:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   10a3c:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
   10a40:	f003 0301 	and.w	r3, r3, #1
   10a44:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
   10a48:	42ab      	cmp	r3, r5
   10a4a:	bf0c      	ite	eq
   10a4c:	2502      	moveq	r5, #2
   10a4e:	2501      	movne	r5, #1
			} else {
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   10a50:	2200      	movs	r2, #0
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   10a52:	f502 73a2 	add.w	r3, r2, #324	; 0x144
   10a56:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
   10a5a:	f010 0003 	ands.w	r0, r0, #3
   10a5e:	d12c      	bne.n	10aba <gpiote_pin_int_cfg+0x10a>
			nrf_gpiote_events_t evt =
   10a60:	0093      	lsls	r3, r2, #2
   10a62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   10a66:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   10a6a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10a6e:	0224      	lsls	r4, r4, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   10a70:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
   10a74:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   10a78:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10a7c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   10a80:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   10a84:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   10a88:	430d      	orrs	r5, r1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   10a8a:	4917      	ldr	r1, [pc, #92]	; (10ae8 <gpiote_pin_int_cfg+0x138>)
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10a8c:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   10a90:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   10a94:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   10a98:	f041 0101 	orr.w	r1, r1, #1
   10a9c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
   10aa0:	2301      	movs	r3, #1
   10aa2:	fa03 f202 	lsl.w	r2, r3, r2
    NRF_GPIOTE->INTENSET = mask;
   10aa6:	f8c6 2304 	str.w	r2, [r6, #772]	; 0x304

			nrf_gpio_cfg_sense_set(abs_pin, sense);
		}
	}
	return res;
}
   10aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   10aae:	3301      	adds	r3, #1
   10ab0:	2b08      	cmp	r3, #8
   10ab2:	d18d      	bne.n	109d0 <gpiote_pin_int_cfg+0x20>
   10ab4:	e7a8      	b.n	10a08 <gpiote_pin_int_cfg+0x58>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   10ab6:	2503      	movs	r5, #3
   10ab8:	e7ca      	b.n	10a50 <gpiote_pin_int_cfg+0xa0>
   10aba:	3201      	adds	r2, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   10abc:	2a08      	cmp	r2, #8
   10abe:	d1c8      	bne.n	10a52 <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
   10ac0:	f06f 0012 	mvn.w	r0, #18
   10ac4:	e7f1      	b.n	10aaa <gpiote_pin_int_cfg+0xfa>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   10ac6:	693b      	ldr	r3, [r7, #16]
   10ac8:	69fa      	ldr	r2, [r7, #28]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   10aca:	4620      	mov	r0, r4
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   10acc:	4053      	eors	r3, r2
   10ace:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   10ad2:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   10ad6:	bf0c      	ite	eq
   10ad8:	2103      	moveq	r1, #3
   10ada:	2102      	movne	r1, #2
   10adc:	f7ff ff50 	bl	10980 <nrf_gpio_cfg_sense_set>
	int res = 0;
   10ae0:	4640      	mov	r0, r8
   10ae2:	e7e2      	b.n	10aaa <gpiote_pin_int_cfg+0xfa>
   10ae4:	40031000 	.word	0x40031000
   10ae8:	40031100 	.word	0x40031100

00010aec <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   10aec:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   10aee:	4b09      	ldr	r3, [pc, #36]	; (10b14 <gpio_nrfx_init+0x28>)
   10af0:	781a      	ldrb	r2, [r3, #0]
   10af2:	b96a      	cbnz	r2, 10b10 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   10af4:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   10af6:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   10af8:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   10afa:	2105      	movs	r1, #5
   10afc:	f7ff f87c 	bl	fbf8 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   10b00:	2031      	movs	r0, #49	; 0x31
   10b02:	f7ff f869 	bl	fbd8 <z_arch_irq_enable>
   10b06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   10b0a:	4b03      	ldr	r3, [pc, #12]	; (10b18 <gpio_nrfx_init+0x2c>)
   10b0c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   10b10:	2000      	movs	r0, #0
   10b12:	bd08      	pop	{r3, pc}
   10b14:	2002268d 	.word	0x2002268d
   10b18:	40031000 	.word	0x40031000

00010b1c <gpio_nrfx_config>:
{
   10b1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b20:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   10b22:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   10b24:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   10b28:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   10b2c:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   10b2e:	d049      	beq.n	10bc4 <gpio_nrfx_config+0xa8>
   10b30:	dc2c      	bgt.n	10b8c <gpio_nrfx_config+0x70>
   10b32:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   10b36:	d03d      	beq.n	10bb4 <gpio_nrfx_config+0x98>
   10b38:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   10b3c:	d03e      	beq.n	10bbc <gpio_nrfx_config+0xa0>
   10b3e:	bb60      	cbnz	r0, 10b9a <gpio_nrfx_config+0x7e>
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   10b40:	f406 7740 	and.w	r7, r6, #768	; 0x300
   10b44:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   10b48:	d03e      	beq.n	10bc8 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_PULLUP;
   10b4a:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   10b4e:	4263      	negs	r3, r4
   10b50:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   10b52:	2901      	cmp	r1, #1
		from_pin = pin;
   10b54:	bf19      	ittee	ne
   10b56:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
   10b58:	46a1      	movne	r9, r4
		to_pin   = 31U;
   10b5a:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   10b5e:	2400      	moveq	r4, #0
   10b60:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   10b64:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   10b68:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   10b6c:	ea47 070c 	orr.w	r7, r7, ip
   10b70:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10b74:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 10c48 <gpio_nrfx_config+0x12c>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   10b78:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   10b7c:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   10b80:	45a1      	cmp	r9, r4
   10b82:	d223      	bcs.n	10bcc <gpio_nrfx_config+0xb0>
	return 0;
   10b84:	2000      	movs	r0, #0
}
   10b86:	b003      	add	sp, #12
   10b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   10b8c:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   10b90:	d016      	beq.n	10bc0 <gpio_nrfx_config+0xa4>
   10b92:	dc05      	bgt.n	10ba0 <gpio_nrfx_config+0x84>
   10b94:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   10b98:	d00e      	beq.n	10bb8 <gpio_nrfx_config+0x9c>
		return -EINVAL;
   10b9a:	f06f 0015 	mvn.w	r0, #21
   10b9e:	e7f2      	b.n	10b86 <gpio_nrfx_config+0x6a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   10ba0:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   10ba4:	d004      	beq.n	10bb0 <gpio_nrfx_config+0x94>
   10ba6:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   10baa:	d1f6      	bne.n	10b9a <gpio_nrfx_config+0x7e>
		drive = NRF_GPIO_PIN_H0D1;
   10bac:	2007      	movs	r0, #7
		break;
   10bae:	e7c7      	b.n	10b40 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0D1;
   10bb0:	2006      	movs	r0, #6
		break;
   10bb2:	e7c5      	b.n	10b40 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0S1;
   10bb4:	2001      	movs	r0, #1
		break;
   10bb6:	e7c3      	b.n	10b40 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   10bb8:	2003      	movs	r0, #3
		break;
   10bba:	e7c1      	b.n	10b40 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0S1;
   10bbc:	2004      	movs	r0, #4
		break;
   10bbe:	e7bf      	b.n	10b40 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0H1;
   10bc0:	2005      	movs	r0, #5
		break;
   10bc2:	e7bd      	b.n	10b40 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0H1;
   10bc4:	2002      	movs	r0, #2
   10bc6:	e7bb      	b.n	10b40 <gpio_nrfx_config+0x24>
		pull = NRF_GPIO_PIN_PULLUP;
   10bc8:	2303      	movs	r3, #3
   10bca:	e7c2      	b.n	10b52 <gpio_nrfx_config+0x36>
	return port->config->config_info;
   10bcc:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   10bd0:	6892      	ldr	r2, [r2, #8]
   10bd2:	7911      	ldrb	r1, [r2, #4]
   10bd4:	f004 021f 	and.w	r2, r4, #31
   10bd8:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   10bdc:	2a1f      	cmp	r2, #31
   10bde:	dd01      	ble.n	10be4 <gpio_nrfx_config+0xc8>
   10be0:	f7ff fec0 	bl	10964 <nrf_gpio_pin_port_decode.isra.6.part.7>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10be4:	3280      	adds	r2, #128	; 0x80
   10be6:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
   10bea:	68a9      	ldr	r1, [r5, #8]
   10bec:	fa0b f204 	lsl.w	r2, fp, r4
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   10bf0:	2b00      	cmp	r3, #0
   10bf2:	d025      	beq.n	10c40 <gpio_nrfx_config+0x124>
   10bf4:	4311      	orrs	r1, r2
   10bf6:	60a9      	str	r1, [r5, #8]
   10bf8:	6969      	ldr	r1, [r5, #20]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   10bfa:	06b0      	lsls	r0, r6, #26
   10bfc:	bf4c      	ite	mi
   10bfe:	4311      	orrmi	r1, r2
   10c00:	4391      	bicpl	r1, r2
   10c02:	6169      	str	r1, [r5, #20]
   10c04:	69a9      	ldr	r1, [r5, #24]
		WRITE_BIT(data->double_edge, curr_pin,
   10c06:	0670      	lsls	r0, r6, #25
   10c08:	bf4c      	ite	mi
   10c0a:	4311      	orrmi	r1, r2
   10c0c:	4391      	bicpl	r1, r2
   10c0e:	61a9      	str	r1, [r5, #24]
   10c10:	6929      	ldr	r1, [r5, #16]
		WRITE_BIT(data->active_level, curr_pin,
   10c12:	0770      	lsls	r0, r6, #29
   10c14:	bf4c      	ite	mi
   10c16:	4311      	orrmi	r1, r2
   10c18:	4391      	bicpl	r1, r2
   10c1a:	6129      	str	r1, [r5, #16]
   10c1c:	69e9      	ldr	r1, [r5, #28]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   10c1e:	0630      	lsls	r0, r6, #24
   10c20:	bf4c      	ite	mi
   10c22:	430a      	orrmi	r2, r1
   10c24:	ea21 0202 	bicpl.w	r2, r1, r2
   10c28:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   10c2a:	4621      	mov	r1, r4
   10c2c:	4640      	mov	r0, r8
   10c2e:	9301      	str	r3, [sp, #4]
   10c30:	f7ff febe 	bl	109b0 <gpiote_pin_int_cfg>
		if (res != 0) {
   10c34:	2800      	cmp	r0, #0
   10c36:	d1a6      	bne.n	10b86 <gpio_nrfx_config+0x6a>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   10c38:	3401      	adds	r4, #1
   10c3a:	b2e4      	uxtb	r4, r4
   10c3c:	9b01      	ldr	r3, [sp, #4]
   10c3e:	e79f      	b.n	10b80 <gpio_nrfx_config+0x64>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   10c40:	ea21 0102 	bic.w	r1, r1, r2
   10c44:	e7d7      	b.n	10bf6 <gpio_nrfx_config+0xda>
   10c46:	bf00      	nop
   10c48:	40842500 	.word	0x40842500

00010c4c <gpiote_event_handler>:
{
   10c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
   10c50:	4f4a      	ldr	r7, [pc, #296]	; (10d7c <gpiote_event_handler+0x130>)
   10c52:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
   10c54:	2e01      	cmp	r6, #1
   10c56:	d163      	bne.n	10d20 <gpiote_event_handler+0xd4>
	u32_t bit = 1U << pin;
   10c58:	46b0      	mov	r8, r6
	u32_t pin = 0U;
   10c5a:	f04f 0a00 	mov.w	sl, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   10c5e:	4a48      	ldr	r2, [pc, #288]	; (10d80 <gpiote_event_handler+0x134>)
   10c60:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
   10c62:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   10c64:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
   10c66:	f8d2 9008 	ldr.w	r9, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
   10c6a:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
   10c6e:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
   10c70:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   10c74:	430a      	orrs	r2, r1
   10c76:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   10c7a:	f8d9 2000 	ldr.w	r2, [r9]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   10c7e:	691b      	ldr	r3, [r3, #16]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   10c80:	6912      	ldr	r2, [r2, #16]
   10c82:	405c      	eors	r4, r3
   10c84:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
   10c86:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   10c8a:	2d00      	cmp	r5, #0
   10c8c:	d135      	bne.n	10cfa <gpiote_event_handler+0xae>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   10c8e:	603d      	str	r5, [r7, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   10c90:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
   10c92:	2701      	movs	r7, #1
   10c94:	469e      	mov	lr, r3
    return (NRF_GPIOTE->INTENSET & mask);
   10c96:	4d3b      	ldr	r5, [pc, #236]	; (10d84 <gpiote_event_handler+0x138>)
   10c98:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 10d88 <gpiote_event_handler+0x13c>
   10c9c:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
   10ca0:	fa07 f103 	lsl.w	r1, r7, r3
   10ca4:	4211      	tst	r1, r2
   10ca6:	d00f      	beq.n	10cc8 <gpiote_event_handler+0x7c>
   10ca8:	eb03 020c 	add.w	r2, r3, ip
   10cac:	0092      	lsls	r2, r2, #2
   10cae:	6811      	ldr	r1, [r2, #0]
   10cb0:	2901      	cmp	r1, #1
   10cb2:	d109      	bne.n	10cc8 <gpiote_event_handler+0x7c>
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10cb4:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   10cb8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   10cbc:	f8c2 e000 	str.w	lr, [r2]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10cc0:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   10cc4:	4081      	lsls	r1, r0
   10cc6:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   10cc8:	3301      	adds	r3, #1
   10cca:	2b08      	cmp	r3, #8
   10ccc:	d1e6      	bne.n	10c9c <gpiote_event_handler+0x50>
	if (fired_triggers[0]) {
   10cce:	b34c      	cbz	r4, 10d24 <gpiote_event_handler+0xd8>
	struct gpio_nrfx_data *data = get_port_data(port);
   10cd0:	4f2b      	ldr	r7, [pc, #172]	; (10d80 <gpiote_event_handler+0x134>)
   10cd2:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   10cd6:	f8d8 1000 	ldr.w	r1, [r8]
   10cda:	b319      	cbz	r1, 10d24 <gpiote_event_handler+0xd8>

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   10cdc:	680d      	ldr	r5, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
   10cde:	f8d8 300c 	ldr.w	r3, [r8, #12]
   10ce2:	688a      	ldr	r2, [r1, #8]
   10ce4:	4023      	ands	r3, r4
   10ce6:	4213      	tst	r3, r2
   10ce8:	d003      	beq.n	10cf2 <gpiote_event_handler+0xa6>
			cb->handler(port, cb, pins);
   10cea:	684b      	ldr	r3, [r1, #4]
   10cec:	4622      	mov	r2, r4
   10cee:	4638      	mov	r0, r7
   10cf0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   10cf2:	b1bd      	cbz	r5, 10d24 <gpiote_event_handler+0xd8>
   10cf4:	4629      	mov	r1, r5
   10cf6:	682d      	ldr	r5, [r5, #0]
   10cf8:	e7f1      	b.n	10cde <gpiote_event_handler+0x92>
		if (level_pins & bit) {
   10cfa:	ea15 0f08 	tst.w	r5, r8
   10cfe:	d00a      	beq.n	10d16 <gpiote_event_handler+0xca>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10d00:	f899 3004 	ldrb.w	r3, [r9, #4]
   10d04:	f00a 001f 	and.w	r0, sl, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   10d08:	2100      	movs	r1, #0
   10d0a:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   10d0e:	f7ff fe37 	bl	10980 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   10d12:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   10d16:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   10d1a:	ea4f 0848 	mov.w	r8, r8, lsl #1
   10d1e:	e7b4      	b.n	10c8a <gpiote_event_handler+0x3e>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   10d20:	2400      	movs	r4, #0
   10d22:	e7b5      	b.n	10c90 <gpiote_event_handler+0x44>
	if (port_event) {
   10d24:	2e01      	cmp	r6, #1
   10d26:	d10e      	bne.n	10d46 <gpiote_event_handler+0xfa>
	u32_t pin = 0U;
   10d28:	2700      	movs	r7, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   10d2a:	4b15      	ldr	r3, [pc, #84]	; (10d80 <gpiote_event_handler+0x134>)
   10d2c:	689d      	ldr	r5, [r3, #8]
	return port->config->config_info;
   10d2e:	681b      	ldr	r3, [r3, #0]
   10d30:	f8d3 8008 	ldr.w	r8, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   10d34:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
   10d38:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   10d3a:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
   10d3e:	4313      	orrs	r3, r2
   10d40:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   10d44:	b90c      	cbnz	r4, 10d4a <gpiote_event_handler+0xfe>
}
   10d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (level_pins & bit) {
   10d4a:	4226      	tst	r6, r4
   10d4c:	d012      	beq.n	10d74 <gpiote_event_handler+0x128>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   10d4e:	692b      	ldr	r3, [r5, #16]
   10d50:	69ea      	ldr	r2, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10d52:	f898 c004 	ldrb.w	ip, [r8, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   10d56:	4053      	eors	r3, r2
   10d58:	40fb      	lsrs	r3, r7
		return NRF_GPIO_PIN_SENSE_HIGH;
   10d5a:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10d5e:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   10d62:	bf0c      	ite	eq
   10d64:	2103      	moveq	r1, #3
   10d66:	2102      	movne	r1, #2
   10d68:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
   10d6c:	f7ff fe08 	bl	10980 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   10d70:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   10d74:	3701      	adds	r7, #1
		bit <<= 1;
   10d76:	0076      	lsls	r6, r6, #1
   10d78:	e7e4      	b.n	10d44 <gpiote_event_handler+0xf8>
   10d7a:	bf00      	nop
   10d7c:	4003117c 	.word	0x4003117c
   10d80:	20024bd8 	.word	0x20024bd8
   10d84:	40031000 	.word	0x40031000
   10d88:	1000c440 	.word	0x1000c440

00010d8c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   10d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_hwfc_t hwfc;
#ifdef UARTE_CONFIG_STOP_Two
	bool two_stop_bits = false;
#endif

	switch (cfg->stop_bits) {
   10d8e:	794b      	ldrb	r3, [r1, #5]
   10d90:	2b01      	cmp	r3, #1
   10d92:	d029      	beq.n	10de8 <uarte_nrfx_configure+0x5c>
   10d94:	2b03      	cmp	r3, #3
   10d96:	d124      	bne.n	10de2 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		break;
#ifdef UARTE_CONFIG_STOP_Two
	case UART_CFG_STOP_BITS_2:
		two_stop_bits = true;
   10d98:	2601      	movs	r6, #1
#endif
	default:
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   10d9a:	798b      	ldrb	r3, [r1, #6]
   10d9c:	2b03      	cmp	r3, #3
   10d9e:	d120      	bne.n	10de2 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   10da0:	79cd      	ldrb	r5, [r1, #7]
   10da2:	b12d      	cbz	r5, 10db0 <uarte_nrfx_configure+0x24>
   10da4:	2d01      	cmp	r5, #1
   10da6:	d11c      	bne.n	10de2 <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
   10da8:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   10daa:	689b      	ldr	r3, [r3, #8]
   10dac:	791b      	ldrb	r3, [r3, #4]
   10dae:	b1c3      	cbz	r3, 10de2 <uarte_nrfx_configure+0x56>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
   10db0:	790a      	ldrb	r2, [r1, #4]
   10db2:	b112      	cbz	r2, 10dba <uarte_nrfx_configure+0x2e>
   10db4:	2a02      	cmp	r2, #2
   10db6:	d114      	bne.n	10de2 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UARTE_PARITY_INCLUDED;
   10db8:	220e      	movs	r2, #14
	switch (baudrate) {
   10dba:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
   10dbe:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   10dc0:	689b      	ldr	r3, [r3, #8]
   10dc2:	681c      	ldr	r4, [r3, #0]
	switch (baudrate) {
   10dc4:	680b      	ldr	r3, [r1, #0]
   10dc6:	42bb      	cmp	r3, r7
   10dc8:	d074      	beq.n	10eb4 <uarte_nrfx_configure+0x128>
   10dca:	d829      	bhi.n	10e20 <uarte_nrfx_configure+0x94>
   10dcc:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   10dd0:	d06a      	beq.n	10ea8 <uarte_nrfx_configure+0x11c>
   10dd2:	d814      	bhi.n	10dfe <uarte_nrfx_configure+0x72>
   10dd4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   10dd8:	d04f      	beq.n	10e7a <uarte_nrfx_configure+0xee>
   10dda:	d807      	bhi.n	10dec <uarte_nrfx_configure+0x60>
   10ddc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   10de0:	d07d      	beq.n	10ede <uarte_nrfx_configure+0x152>
		return -ENOTSUP;
   10de2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   10de6:	e05b      	b.n	10ea0 <uarte_nrfx_configure+0x114>
	bool two_stop_bits = false;
   10de8:	2600      	movs	r6, #0
   10dea:	e7d6      	b.n	10d9a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   10dec:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   10df0:	d057      	beq.n	10ea2 <uarte_nrfx_configure+0x116>
   10df2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   10df6:	d1f4      	bne.n	10de2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   10df8:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   10dfc:	e03f      	b.n	10e7e <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   10dfe:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   10e02:	d053      	beq.n	10eac <uarte_nrfx_configure+0x120>
   10e04:	d804      	bhi.n	10e10 <uarte_nrfx_configure+0x84>
   10e06:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   10e0a:	d1ea      	bne.n	10de2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   10e0c:	4b35      	ldr	r3, [pc, #212]	; (10ee4 <uarte_nrfx_configure+0x158>)
   10e0e:	e036      	b.n	10e7e <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   10e10:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   10e14:	d04c      	beq.n	10eb0 <uarte_nrfx_configure+0x124>
   10e16:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   10e1a:	d1e2      	bne.n	10de2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   10e1c:	4b32      	ldr	r3, [pc, #200]	; (10ee8 <uarte_nrfx_configure+0x15c>)
   10e1e:	e02e      	b.n	10e7e <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   10e20:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   10e24:	d04f      	beq.n	10ec6 <uarte_nrfx_configure+0x13a>
   10e26:	d812      	bhi.n	10e4e <uarte_nrfx_configure+0xc2>
   10e28:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   10e2c:	42bb      	cmp	r3, r7
   10e2e:	d044      	beq.n	10eba <uarte_nrfx_configure+0x12e>
   10e30:	d805      	bhi.n	10e3e <uarte_nrfx_configure+0xb2>
   10e32:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   10e36:	d1d4      	bne.n	10de2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   10e38:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   10e3c:	e01f      	b.n	10e7e <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   10e3e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   10e42:	d03d      	beq.n	10ec0 <uarte_nrfx_configure+0x134>
   10e44:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   10e48:	d1cb      	bne.n	10de2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   10e4a:	4b28      	ldr	r3, [pc, #160]	; (10eec <uarte_nrfx_configure+0x160>)
   10e4c:	e017      	b.n	10e7e <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   10e4e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   10e52:	d03e      	beq.n	10ed2 <uarte_nrfx_configure+0x146>
   10e54:	d808      	bhi.n	10e68 <uarte_nrfx_configure+0xdc>
   10e56:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   10e5a:	d037      	beq.n	10ecc <uarte_nrfx_configure+0x140>
   10e5c:	4f24      	ldr	r7, [pc, #144]	; (10ef0 <uarte_nrfx_configure+0x164>)
   10e5e:	42bb      	cmp	r3, r7
   10e60:	d1bf      	bne.n	10de2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   10e62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   10e66:	e00a      	b.n	10e7e <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   10e68:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   10e6c:	d034      	beq.n	10ed8 <uarte_nrfx_configure+0x14c>
   10e6e:	4f21      	ldr	r7, [pc, #132]	; (10ef4 <uarte_nrfx_configure+0x168>)
   10e70:	42bb      	cmp	r3, r7
   10e72:	d1b6      	bne.n	10de2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   10e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   10e78:	e001      	b.n	10e7e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00027000;
   10e7a:	f44f 331c 	mov.w	r3, #159744	; 0x27000

__STATIC_INLINE void nrf_uarte_configure(NRF_UARTE_Type   * p_reg,
                                         nrf_uarte_parity_t parity,
                                         nrf_uarte_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   10e7e:	432a      	orrs	r2, r5
}

__STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type   * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   10e80:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   10e84:	f8c4 256c 	str.w	r2, [r4, #1388]	; 0x56c
	}

	nrf_uarte_configure(get_uarte_instance(dev), parity, hwfc);

#ifdef UARTE_CONFIG_STOP_Two
	if (two_stop_bits) {
   10e88:	b12e      	cbz	r6, 10e96 <uarte_nrfx_configure+0x10a>
		/* TODO Change this to nrfx HAL function when available */
		get_uarte_instance(dev)->CONFIG |=
   10e8a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
   10e8e:	f043 0310 	orr.w	r3, r3, #16
   10e92:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
			UARTE_CONFIG_STOP_Two << UARTE_CONFIG_STOP_Pos;
	}
#endif
	get_dev_data(dev)->uart_config = *cfg;
   10e96:	6883      	ldr	r3, [r0, #8]
   10e98:	c903      	ldmia	r1, {r0, r1}
   10e9a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   10e9e:	2000      	movs	r0, #0
}
   10ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   10ea2:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   10ea6:	e7ea      	b.n	10e7e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   10ea8:	4b13      	ldr	r3, [pc, #76]	; (10ef8 <uarte_nrfx_configure+0x16c>)
   10eaa:	e7e8      	b.n	10e7e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   10eac:	4b13      	ldr	r3, [pc, #76]	; (10efc <uarte_nrfx_configure+0x170>)
   10eae:	e7e6      	b.n	10e7e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   10eb0:	4b13      	ldr	r3, [pc, #76]	; (10f00 <uarte_nrfx_configure+0x174>)
   10eb2:	e7e4      	b.n	10e7e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   10eb4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   10eb8:	e7e1      	b.n	10e7e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   10eba:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   10ebe:	e7de      	b.n	10e7e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   10ec0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   10ec4:	e7db      	b.n	10e7e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   10ec6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   10eca:	e7d8      	b.n	10e7e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   10ecc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   10ed0:	e7d5      	b.n	10e7e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   10ed2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   10ed6:	e7d2      	b.n	10e7e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   10ed8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   10edc:	e7cf      	b.n	10e7e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00014000;
   10ede:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   10ee2:	e7cc      	b.n	10e7e <uarte_nrfx_configure+0xf2>
   10ee4:	00275000 	.word	0x00275000
   10ee8:	0075c000 	.word	0x0075c000
   10eec:	013a9000 	.word	0x013a9000
   10ef0:	0003d090 	.word	0x0003d090
   10ef4:	000f4240 	.word	0x000f4240
   10ef8:	0013b000 	.word	0x0013b000
   10efc:	003af000 	.word	0x003af000
   10f00:	004ea000 	.word	0x004ea000

00010f04 <uarte_0_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_0_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_0_CTS_PIN)
		#define UARTE_0_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(0);
   10f04:	b570      	push	{r4, r5, r6, lr}
   10f06:	4606      	mov	r6, r0
   10f08:	2200      	movs	r2, #0
   10f0a:	2101      	movs	r1, #1
   10f0c:	2008      	movs	r0, #8
   10f0e:	f7fe fe73 	bl	fbf8 <z_arm_irq_priority_set>
   10f12:	2008      	movs	r0, #8
   10f14:	f7fe fe60 	bl	fbd8 <z_arch_irq_enable>
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   10f18:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	return dev->config->config_info;
   10f1c:	6833      	ldr	r3, [r6, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   10f1e:	68b5      	ldr	r5, [r6, #8]
	return config->uarte_regs;
   10f20:	689b      	ldr	r3, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10f22:	2103      	movs	r1, #3
   10f24:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   10f26:	4b1a      	ldr	r3, [pc, #104]	; (10f90 <uarte_0_init+0x8c>)
    p_reg->PSEL.TXD = pseltxd;
   10f28:	201d      	movs	r0, #29
   10f2a:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10f2c:	2200      	movs	r2, #0
   10f2e:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
   10f32:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
   10f36:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   10f3a:	201c      	movs	r0, #28
   10f3c:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
   10f40:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   10f44:	6098      	str	r0, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10f46:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
   10f4a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    p_reg->PSEL.RTS = pselrts;
   10f4e:	231b      	movs	r3, #27
   10f50:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   10f54:	231a      	movs	r3, #26
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   10f56:	4629      	mov	r1, r5
   10f58:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   10f5c:	4630      	mov	r0, r6
   10f5e:	f7ff ff15 	bl	10d8c <uarte_nrfx_configure>
	if (err) {
   10f62:	b9a0      	cbnz	r0, 10f8e <uarte_0_init+0x8a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   10f64:	2308      	movs	r3, #8
   10f66:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   10f6a:	f105 030c 	add.w	r3, r5, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10f6e:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

__STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                             uint8_t *        p_buffer,
                                             size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   10f72:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   10f76:	2301      	movs	r3, #1
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   10f78:	68aa      	ldr	r2, [r5, #8]
   10f7a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   10f7e:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10f80:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   10f82:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   10f86:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10f8a:	60a3      	str	r3, [r4, #8]
   10f8c:	60e3      	str	r3, [r4, #12]
	UART_NRF_UARTE_DEVICE(0);
   10f8e:	bd70      	pop	{r4, r5, r6, pc}
   10f90:	40842500 	.word	0x40842500

00010f94 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   10f94:	2200      	movs	r2, #0
{
   10f96:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   10f98:	4611      	mov	r1, r2
   10f9a:	202a      	movs	r0, #42	; 0x2a
   10f9c:	f7fe fe2c 	bl	fbf8 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
   10fa0:	f001 fdbc 	bl	12b1c <bsd_init>
   10fa4:	4b01      	ldr	r3, [pc, #4]	; (10fac <_bsdlib_init+0x18>)
   10fa6:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   10fa8:	2000      	movs	r0, #0
   10faa:	bd08      	pop	{r3, pc}
   10fac:	20020294 	.word	0x20020294

00010fb0 <thread_monitor_entry_get>:
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   10fb0:	2200      	movs	r2, #0
   10fb2:	4b0e      	ldr	r3, [pc, #56]	; (10fec <thread_monitor_entry_get+0x3c>)
{
   10fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
		entry_age = rpc_event_cnt - entry->cnt;
   10fb6:	681c      	ldr	r4, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   10fb8:	4b0d      	ldr	r3, [pc, #52]	; (10ff0 <thread_monitor_entry_get+0x40>)
	int entry_age, oldest_entry_age = 0;
   10fba:	4616      	mov	r6, r2
   10fbc:	461f      	mov	r7, r3
		if (entry->id == id) {
   10fbe:	58bd      	ldr	r5, [r7, r2]
   10fc0:	18b9      	adds	r1, r7, r2
   10fc2:	4285      	cmp	r5, r0
   10fc4:	d00d      	beq.n	10fe2 <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   10fc6:	b175      	cbz	r5, 10fe6 <thread_monitor_entry_get+0x36>
		entry_age = rpc_event_cnt - entry->cnt;
   10fc8:	684d      	ldr	r5, [r1, #4]
   10fca:	3208      	adds	r2, #8
   10fcc:	1b65      	subs	r5, r4, r5
		if (entry_age > oldest_entry_age) {
   10fce:	42b5      	cmp	r5, r6
   10fd0:	bfc4      	itt	gt
   10fd2:	462e      	movgt	r6, r5
   10fd4:	460b      	movgt	r3, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   10fd6:	2a50      	cmp	r2, #80	; 0x50
   10fd8:	d1f1      	bne.n	10fbe <thread_monitor_entry_get+0xe>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   10fda:	4619      	mov	r1, r3
	new_entry->cnt = rpc_event_cnt - 1;
   10fdc:	3c01      	subs	r4, #1
	new_entry->id = id;
   10fde:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   10fe0:	605c      	str	r4, [r3, #4]
}
   10fe2:	4608      	mov	r0, r1
   10fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10fe6:	460b      	mov	r3, r1
   10fe8:	e7f7      	b.n	10fda <thread_monitor_entry_get+0x2a>
   10fea:	bf00      	nop
   10fec:	20020298 	.word	0x20020298
   10ff0:	200202a4 	.word	0x200202a4

00010ff4 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   10ff4:	4668      	mov	r0, sp
   10ff6:	f020 0107 	bic.w	r1, r0, #7
   10ffa:	468d      	mov	sp, r1
   10ffc:	b519      	push	{r0, r3, r4, lr}
   10ffe:	f012 fbae 	bl	2375e <z_arch_isr_direct_header>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11002:	4b0d      	ldr	r3, [pc, #52]	; (11038 <rpc_proxy_irq_handler+0x44>)
   11004:	e8d3 2fef 	ldaex	r2, [r3]
   11008:	3201      	adds	r2, #1
   1100a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1100e:	2900      	cmp	r1, #0
   11010:	d1f8      	bne.n	11004 <rpc_proxy_irq_handler+0x10>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   11012:	f00b fc75 	bl	1c900 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   11016:	4b09      	ldr	r3, [pc, #36]	; (1103c <rpc_proxy_irq_handler+0x48>)
   11018:	681c      	ldr	r4, [r3, #0]
   1101a:	b124      	cbz	r4, 11026 <rpc_proxy_irq_handler+0x32>
   1101c:	1d20      	adds	r0, r4, #4
   1101e:	f00f fd2f 	bl	20a80 <z_impl_k_sem_give>
   11022:	6824      	ldr	r4, [r4, #0]
   11024:	e7f9      	b.n	1101a <rpc_proxy_irq_handler+0x26>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   11026:	f7fe fdff 	bl	fc28 <_arch_isr_direct_pm>

#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1102a:	f7fe fd03 	bl	fa34 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1102e:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   11032:	4685      	mov	sp, r0
   11034:	4770      	bx	lr
   11036:	bf00      	nop
   11038:	20020298 	.word	0x20020298
   1103c:	2002029c 	.word	0x2002029c

00011040 <bsd_os_timedwait>:
{
   11040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11044:	460d      	mov	r5, r1
   11046:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   11048:	f013 fb79 	bl	2473e <z_impl_k_uptime_get>
	if (*timeout == 0) {
   1104c:	682b      	ldr	r3, [r5, #0]
   1104e:	4606      	mov	r6, r0
   11050:	2b00      	cmp	r3, #0
   11052:	460f      	mov	r7, r1
   11054:	d103      	bne.n	1105e <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   11056:	f00f fcbf 	bl	209d8 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   1105a:	203c      	movs	r0, #60	; 0x3c
   1105c:	e06a      	b.n	11134 <bsd_os_timedwait+0xf4>
		*timeout = K_FOREVER;
   1105e:	bfbc      	itt	lt
   11060:	f04f 33ff 	movlt.w	r3, #4294967295
   11064:	602b      	strlt	r3, [r5, #0]
	z_impl_k_sem_init(sem, initial_count, limit);
   11066:	2201      	movs	r2, #1
   11068:	2100      	movs	r1, #0
   1106a:	a802      	add	r0, sp, #8
   1106c:	f013 fae5 	bl	2463a <z_impl_k_sem_init>
   11070:	f10d 0804 	add.w	r8, sp, #4
   11074:	f04f 0320 	mov.w	r3, #32
   11078:	f3ef 8911 	mrs	r9, BASEPRI
   1107c:	f383 8811 	msr	BASEPRI, r3
   11080:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   11084:	f00f fcf6 	bl	20a74 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   11088:	f7ff ff92 	bl	10fb0 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   1108c:	4c32      	ldr	r4, [pc, #200]	; (11158 <bsd_os_timedwait+0x118>)
   1108e:	6843      	ldr	r3, [r0, #4]
   11090:	6822      	ldr	r2, [r4, #0]
   11092:	4293      	cmp	r3, r2
   11094:	f04f 0300 	mov.w	r3, #0
   11098:	d108      	bne.n	110ac <bsd_os_timedwait+0x6c>
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
   1109a:	9301      	str	r3, [sp, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1109c:	4b2f      	ldr	r3, [pc, #188]	; (1115c <bsd_os_timedwait+0x11c>)
   1109e:	685a      	ldr	r2, [r3, #4]
   110a0:	2a00      	cmp	r2, #0
   110a2:	d14a      	bne.n	1113a <bsd_os_timedwait+0xfa>
	list->head = node;
   110a4:	e9c3 8800 	strd	r8, r8, [r3]
		allow_to_sleep = true;
   110a8:	2301      	movs	r3, #1
   110aa:	e000      	b.n	110ae <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   110ac:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   110ae:	f389 8811 	msr	BASEPRI, r9
   110b2:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   110b6:	2b00      	cmp	r3, #0
   110b8:	d03b      	beq.n	11132 <bsd_os_timedwait+0xf2>
	(void)k_sem_take(&thread.sem, *timeout);
   110ba:	6829      	ldr	r1, [r5, #0]
	return z_impl_k_sem_take(sem, timeout);
   110bc:	a802      	add	r0, sp, #8
   110be:	f00f fd0b 	bl	20ad8 <z_impl_k_sem_take>
	__asm__ volatile(
   110c2:	f04f 0320 	mov.w	r3, #32
   110c6:	f3ef 8911 	mrs	r9, BASEPRI
   110ca:	f383 8811 	msr	BASEPRI, r3
   110ce:	f3bf 8f6f 	isb	sy
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   110d2:	2100      	movs	r1, #0
   110d4:	4b21      	ldr	r3, [pc, #132]	; (1115c <bsd_os_timedwait+0x11c>)
   110d6:	681a      	ldr	r2, [r3, #0]
   110d8:	b15a      	cbz	r2, 110f2 <bsd_os_timedwait+0xb2>
   110da:	4542      	cmp	r2, r8
   110dc:	d138      	bne.n	11150 <bsd_os_timedwait+0x110>
   110de:	9801      	ldr	r0, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   110e0:	2900      	cmp	r1, #0
   110e2:	d12f      	bne.n	11144 <bsd_os_timedwait+0x104>
   110e4:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   110e6:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   110e8:	4291      	cmp	r1, r2
   110ea:	d100      	bne.n	110ee <bsd_os_timedwait+0xae>
	list->tail = node;
   110ec:	6058      	str	r0, [r3, #4]
	parent->next = child;
   110ee:	2300      	movs	r3, #0
   110f0:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   110f2:	f00f fcbf 	bl	20a74 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   110f6:	f7ff ff5b 	bl	10fb0 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   110fa:	6823      	ldr	r3, [r4, #0]
   110fc:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   110fe:	f389 8811 	msr	BASEPRI, r9
   11102:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   11106:	682c      	ldr	r4, [r5, #0]
   11108:	1c63      	adds	r3, r4, #1
   1110a:	d012      	beq.n	11132 <bsd_os_timedwait+0xf2>
	return z_impl_k_uptime_get();
   1110c:	f013 fb17 	bl	2473e <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   11110:	1b86      	subs	r6, r0, r6
   11112:	eb61 0707 	sbc.w	r7, r1, r7
   11116:	17e3      	asrs	r3, r4, #31
   11118:	1ba2      	subs	r2, r4, r6
   1111a:	eb63 0307 	sbc.w	r3, r3, r7
   1111e:	4619      	mov	r1, r3
	*timeout = remaining > 0 ? remaining : 0;
   11120:	2a00      	cmp	r2, #0
   11122:	f171 0300 	sbcs.w	r3, r1, #0
	remaining = *timeout - (k_uptime_get() - start);
   11126:	4610      	mov	r0, r2
	*timeout = remaining > 0 ? remaining : 0;
   11128:	bfb8      	it	lt
   1112a:	2000      	movlt	r0, #0
   1112c:	6028      	str	r0, [r5, #0]
	if (*timeout == 0) {
   1112e:	2800      	cmp	r0, #0
   11130:	d093      	beq.n	1105a <bsd_os_timedwait+0x1a>
	return 0;
   11132:	2000      	movs	r0, #0
}
   11134:	b009      	add	sp, #36	; 0x24
   11136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1113a:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   1113e:	f8c3 8004 	str.w	r8, [r3, #4]
   11142:	e7b1      	b.n	110a8 <bsd_os_timedwait+0x68>
	parent->next = child;
   11144:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   11146:	6858      	ldr	r0, [r3, #4]
   11148:	4290      	cmp	r0, r2
	list->tail = node;
   1114a:	bf08      	it	eq
   1114c:	6059      	streq	r1, [r3, #4]
   1114e:	e7ce      	b.n	110ee <bsd_os_timedwait+0xae>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11150:	4611      	mov	r1, r2
   11152:	6812      	ldr	r2, [r2, #0]
   11154:	e7c0      	b.n	110d8 <bsd_os_timedwait+0x98>
   11156:	bf00      	nop
   11158:	20020298 	.word	0x20020298
   1115c:	2002029c 	.word	0x2002029c

00011160 <bsd_os_errno_set>:
	switch (err_code) {
   11160:	282d      	cmp	r0, #45	; 0x2d
{
   11162:	b510      	push	{r4, lr}
   11164:	4604      	mov	r4, r0
	switch (err_code) {
   11166:	f000 808b 	beq.w	11280 <bsd_os_errno_set+0x120>
   1116a:	dc3a      	bgt.n	111e2 <bsd_os_errno_set+0x82>
   1116c:	280e      	cmp	r0, #14
   1116e:	d009      	beq.n	11184 <bsd_os_errno_set+0x24>
   11170:	dc11      	bgt.n	11196 <bsd_os_errno_set+0x36>
   11172:	2808      	cmp	r0, #8
   11174:	d006      	beq.n	11184 <bsd_os_errno_set+0x24>
   11176:	dc09      	bgt.n	1118c <bsd_os_errno_set+0x2c>
   11178:	2802      	cmp	r0, #2
   1117a:	d003      	beq.n	11184 <bsd_os_errno_set+0x24>
   1117c:	2805      	cmp	r0, #5
   1117e:	d001      	beq.n	11184 <bsd_os_errno_set+0x24>
   11180:	2801      	cmp	r0, #1
   11182:	d119      	bne.n	111b8 <bsd_os_errno_set+0x58>
		errno = ENOBUFS;
   11184:	f012 fb3f 	bl	23806 <__errno>
   11188:	6004      	str	r4, [r0, #0]
}
   1118a:	bd10      	pop	{r4, pc}
	switch (err_code) {
   1118c:	280c      	cmp	r0, #12
   1118e:	d0f9      	beq.n	11184 <bsd_os_errno_set+0x24>
   11190:	dc5d      	bgt.n	1124e <bsd_os_errno_set+0xee>
   11192:	2809      	cmp	r0, #9
   11194:	e7f5      	b.n	11182 <bsd_os_errno_set+0x22>
   11196:	2828      	cmp	r0, #40	; 0x28
   11198:	f000 80a9 	beq.w	112ee <bsd_os_errno_set+0x18e>
   1119c:	dc05      	bgt.n	111aa <bsd_os_errno_set+0x4a>
   1119e:	2818      	cmp	r0, #24
   111a0:	d0f0      	beq.n	11184 <bsd_os_errno_set+0x24>
   111a2:	2823      	cmp	r0, #35	; 0x23
   111a4:	d058      	beq.n	11258 <bsd_os_errno_set+0xf8>
   111a6:	2816      	cmp	r0, #22
   111a8:	e7eb      	b.n	11182 <bsd_os_errno_set+0x22>
   111aa:	282a      	cmp	r0, #42	; 0x2a
   111ac:	d05c      	beq.n	11268 <bsd_os_errno_set+0x108>
   111ae:	db57      	blt.n	11260 <bsd_os_errno_set+0x100>
   111b0:	282b      	cmp	r0, #43	; 0x2b
   111b2:	d05d      	beq.n	11270 <bsd_os_errno_set+0x110>
   111b4:	282c      	cmp	r0, #44	; 0x2c
   111b6:	d05f      	beq.n	11278 <bsd_os_errno_set+0x118>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   111b8:	2301      	movs	r3, #1
   111ba:	f04f 0200 	mov.w	r2, #0
   111be:	494e      	ldr	r1, [pc, #312]	; (112f8 <bsd_os_errno_set+0x198>)
   111c0:	f363 0202 	bfi	r2, r3, #0, #3
   111c4:	4b4d      	ldr	r3, [pc, #308]	; (112fc <bsd_os_errno_set+0x19c>)
   111c6:	f36f 02c5 	bfc	r2, #3, #3
   111ca:	1a5b      	subs	r3, r3, r1
   111cc:	08db      	lsrs	r3, r3, #3
   111ce:	f363 128f 	bfi	r2, r3, #6, #10
   111d2:	4621      	mov	r1, r4
   111d4:	484a      	ldr	r0, [pc, #296]	; (11300 <bsd_os_errno_set+0x1a0>)
   111d6:	f011 ff37 	bl	23048 <log_1>
		errno = 0xBAADBAAD;
   111da:	f012 fb14 	bl	23806 <__errno>
   111de:	4b49      	ldr	r3, [pc, #292]	; (11304 <bsd_os_errno_set+0x1a4>)
   111e0:	e038      	b.n	11254 <bsd_os_errno_set+0xf4>
	switch (err_code) {
   111e2:	283c      	cmp	r0, #60	; 0x3c
   111e4:	d064      	beq.n	112b0 <bsd_os_errno_set+0x150>
   111e6:	dc1d      	bgt.n	11224 <bsd_os_errno_set+0xc4>
   111e8:	2833      	cmp	r0, #51	; 0x33
   111ea:	d055      	beq.n	11298 <bsd_os_errno_set+0x138>
   111ec:	dc09      	bgt.n	11202 <bsd_os_errno_set+0xa2>
   111ee:	2830      	cmp	r0, #48	; 0x30
   111f0:	d04a      	beq.n	11288 <bsd_os_errno_set+0x128>
   111f2:	2832      	cmp	r0, #50	; 0x32
   111f4:	d04c      	beq.n	11290 <bsd_os_errno_set+0x130>
   111f6:	282f      	cmp	r0, #47	; 0x2f
   111f8:	d1de      	bne.n	111b8 <bsd_os_errno_set+0x58>
		errno = EAFNOSUPPORT;
   111fa:	f012 fb04 	bl	23806 <__errno>
   111fe:	236a      	movs	r3, #106	; 0x6a
   11200:	e028      	b.n	11254 <bsd_os_errno_set+0xf4>
	switch (err_code) {
   11202:	2836      	cmp	r0, #54	; 0x36
   11204:	d04c      	beq.n	112a0 <bsd_os_errno_set+0x140>
   11206:	dc05      	bgt.n	11214 <bsd_os_errno_set+0xb4>
   11208:	2834      	cmp	r0, #52	; 0x34
   1120a:	d1d5      	bne.n	111b8 <bsd_os_errno_set+0x58>
		errno = ENETRESET;
   1120c:	f012 fafb 	bl	23806 <__errno>
   11210:	237e      	movs	r3, #126	; 0x7e
   11212:	e01f      	b.n	11254 <bsd_os_errno_set+0xf4>
	switch (err_code) {
   11214:	2838      	cmp	r0, #56	; 0x38
   11216:	d047      	beq.n	112a8 <bsd_os_errno_set+0x148>
   11218:	2839      	cmp	r0, #57	; 0x39
   1121a:	d1cd      	bne.n	111b8 <bsd_os_errno_set+0x58>
		errno = ENOTCONN;
   1121c:	f012 faf3 	bl	23806 <__errno>
   11220:	2380      	movs	r3, #128	; 0x80
   11222:	e017      	b.n	11254 <bsd_os_errno_set+0xf4>
	switch (err_code) {
   11224:	287d      	cmp	r0, #125	; 0x7d
   11226:	d04f      	beq.n	112c8 <bsd_os_errno_set+0x168>
   11228:	dc05      	bgt.n	11236 <bsd_os_errno_set+0xd6>
   1122a:	2870      	cmp	r0, #112	; 0x70
   1122c:	d044      	beq.n	112b8 <bsd_os_errno_set+0x158>
   1122e:	2873      	cmp	r0, #115	; 0x73
   11230:	d046      	beq.n	112c0 <bsd_os_errno_set+0x160>
   11232:	2869      	cmp	r0, #105	; 0x69
   11234:	e7a5      	b.n	11182 <bsd_os_errno_set+0x22>
   11236:	287f      	cmp	r0, #127	; 0x7f
   11238:	d04f      	beq.n	112da <bsd_os_errno_set+0x17a>
   1123a:	db49      	blt.n	112d0 <bsd_os_errno_set+0x170>
   1123c:	2880      	cmp	r0, #128	; 0x80
   1123e:	d051      	beq.n	112e4 <bsd_os_errno_set+0x184>
   11240:	2881      	cmp	r0, #129	; 0x81
   11242:	d1b9      	bne.n	111b8 <bsd_os_errno_set+0x58>
		errno = EKEYREJECTED;
   11244:	f012 fadf 	bl	23806 <__errno>
   11248:	f240 73d4 	movw	r3, #2004	; 0x7d4
   1124c:	e002      	b.n	11254 <bsd_os_errno_set+0xf4>
		errno = EACCES;
   1124e:	f012 fada 	bl	23806 <__errno>
   11252:	230d      	movs	r3, #13
		errno = 0xBAADBAAD;
   11254:	6003      	str	r3, [r0, #0]
}
   11256:	e798      	b.n	1118a <bsd_os_errno_set+0x2a>
		errno = EAGAIN;
   11258:	f012 fad5 	bl	23806 <__errno>
   1125c:	230b      	movs	r3, #11
   1125e:	e7f9      	b.n	11254 <bsd_os_errno_set+0xf4>
		errno = EPROTOTYPE;
   11260:	f012 fad1 	bl	23806 <__errno>
   11264:	236b      	movs	r3, #107	; 0x6b
   11266:	e7f5      	b.n	11254 <bsd_os_errno_set+0xf4>
		errno = ENOPROTOOPT;
   11268:	f012 facd 	bl	23806 <__errno>
   1126c:	236d      	movs	r3, #109	; 0x6d
   1126e:	e7f1      	b.n	11254 <bsd_os_errno_set+0xf4>
		errno = EPROTONOSUPPORT;
   11270:	f012 fac9 	bl	23806 <__errno>
   11274:	237b      	movs	r3, #123	; 0x7b
   11276:	e7ed      	b.n	11254 <bsd_os_errno_set+0xf4>
		errno = ESOCKTNOSUPPORT;
   11278:	f012 fac5 	bl	23806 <__errno>
   1127c:	237c      	movs	r3, #124	; 0x7c
   1127e:	e7e9      	b.n	11254 <bsd_os_errno_set+0xf4>
		errno = EOPNOTSUPP;
   11280:	f012 fac1 	bl	23806 <__errno>
   11284:	235f      	movs	r3, #95	; 0x5f
   11286:	e7e5      	b.n	11254 <bsd_os_errno_set+0xf4>
		errno = EADDRINUSE;
   11288:	f012 fabd 	bl	23806 <__errno>
   1128c:	2370      	movs	r3, #112	; 0x70
   1128e:	e7e1      	b.n	11254 <bsd_os_errno_set+0xf4>
		errno = ENETDOWN;
   11290:	f012 fab9 	bl	23806 <__errno>
   11294:	2373      	movs	r3, #115	; 0x73
   11296:	e7dd      	b.n	11254 <bsd_os_errno_set+0xf4>
		errno = ENETUNREACH;
   11298:	f012 fab5 	bl	23806 <__errno>
   1129c:	2372      	movs	r3, #114	; 0x72
   1129e:	e7d9      	b.n	11254 <bsd_os_errno_set+0xf4>
		errno = ECONNRESET;
   112a0:	f012 fab1 	bl	23806 <__errno>
   112a4:	2368      	movs	r3, #104	; 0x68
   112a6:	e7d5      	b.n	11254 <bsd_os_errno_set+0xf4>
		errno = EISCONN;
   112a8:	f012 faad 	bl	23806 <__errno>
   112ac:	237f      	movs	r3, #127	; 0x7f
   112ae:	e7d1      	b.n	11254 <bsd_os_errno_set+0xf4>
		errno = ETIMEDOUT;
   112b0:	f012 faa9 	bl	23806 <__errno>
   112b4:	2374      	movs	r3, #116	; 0x74
   112b6:	e7cd      	b.n	11254 <bsd_os_errno_set+0xf4>
		errno = EHOSTDOWN;
   112b8:	f012 faa5 	bl	23806 <__errno>
   112bc:	2375      	movs	r3, #117	; 0x75
   112be:	e7c9      	b.n	11254 <bsd_os_errno_set+0xf4>
		errno = EINPROGRESS;
   112c0:	f012 faa1 	bl	23806 <__errno>
   112c4:	2377      	movs	r3, #119	; 0x77
   112c6:	e7c5      	b.n	11254 <bsd_os_errno_set+0xf4>
		errno = ECANCELED;
   112c8:	f012 fa9d 	bl	23806 <__errno>
   112cc:	238c      	movs	r3, #140	; 0x8c
   112ce:	e7c1      	b.n	11254 <bsd_os_errno_set+0xf4>
		errno = ENOKEY;
   112d0:	f012 fa99 	bl	23806 <__errno>
   112d4:	f240 73d1 	movw	r3, #2001	; 0x7d1
   112d8:	e7bc      	b.n	11254 <bsd_os_errno_set+0xf4>
		errno = EKEYEXPIRED;
   112da:	f012 fa94 	bl	23806 <__errno>
   112de:	f240 73d2 	movw	r3, #2002	; 0x7d2
   112e2:	e7b7      	b.n	11254 <bsd_os_errno_set+0xf4>
		errno = EKEYREVOKED;
   112e4:	f012 fa8f 	bl	23806 <__errno>
   112e8:	f240 73d3 	movw	r3, #2003	; 0x7d3
   112ec:	e7b2      	b.n	11254 <bsd_os_errno_set+0xf4>
		errno = EMSGSIZE;
   112ee:	f012 fa8a 	bl	23806 <__errno>
   112f2:	237a      	movs	r3, #122	; 0x7a
   112f4:	e7ae      	b.n	11254 <bsd_os_errno_set+0xf4>
   112f6:	bf00      	nop
   112f8:	000258c0 	.word	0x000258c0
   112fc:	000258c0 	.word	0x000258c0
   11300:	000277f6 	.word	0x000277f6
   11304:	baadbaad 	.word	0xbaadbaad

00011308 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1130c:	4b01      	ldr	r3, [pc, #4]	; (11314 <bsd_os_application_irq_set+0xc>)
   1130e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   11312:	4770      	bx	lr
   11314:	e000e100 	.word	0xe000e100

00011318 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1131c:	4b01      	ldr	r3, [pc, #4]	; (11324 <bsd_os_application_irq_clear+0xc>)
   1131e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   11322:	4770      	bx	lr
   11324:	e000e100 	.word	0xe000e100

00011328 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11328:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1132c:	4b01      	ldr	r3, [pc, #4]	; (11334 <bsd_os_trace_irq_set+0xc>)
   1132e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   11332:	4770      	bx	lr
   11334:	e000e100 	.word	0xe000e100

00011338 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11338:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1133c:	4b01      	ldr	r3, [pc, #4]	; (11344 <bsd_os_trace_irq_clear+0xc>)
   1133e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   11342:	4770      	bx	lr
   11344:	e000e100 	.word	0xe000e100

00011348 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   11348:	b508      	push	{r3, lr}
	list->head = NULL;
   1134a:	2300      	movs	r3, #0
   1134c:	4a07      	ldr	r2, [pc, #28]	; (1136c <bsd_os_init+0x24>)
	list->tail = NULL;
   1134e:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11352:	4a07      	ldr	r2, [pc, #28]	; (11370 <bsd_os_init+0x28>)
   11354:	e8d2 1fef 	ldaex	r1, [r2]
   11358:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1135c:	2800      	cmp	r0, #0
   1135e:	d1f9      	bne.n	11354 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   11360:	f012 fc5f 	bl	23c22 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   11364:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   11368:	f012 bc50 	b.w	23c0c <trace_task_create>
   1136c:	2002029c 	.word	0x2002029c
   11370:	20020298 	.word	0x20020298

00011374 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   11374:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   11378:	d03c      	beq.n	113f4 <z_to_nrf_optname+0x80>
   1137a:	dc04      	bgt.n	11386 <z_to_nrf_optname+0x12>
   1137c:	2801      	cmp	r0, #1
   1137e:	d047      	beq.n	11410 <z_to_nrf_optname+0x9c>
			break;
		}
		break;

	default:
		retval = -1;
   11380:	f04f 30ff 	mov.w	r0, #4294967295
		break;
	}

	return retval;
}
   11384:	4770      	bx	lr
	switch (z_in_level) {
   11386:	f240 2302 	movw	r3, #514	; 0x202
   1138a:	4298      	cmp	r0, r3
   1138c:	d052      	beq.n	11434 <z_to_nrf_optname+0xc0>
   1138e:	f240 2303 	movw	r3, #515	; 0x203
   11392:	4298      	cmp	r0, r3
   11394:	d1f4      	bne.n	11380 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   11396:	3901      	subs	r1, #1
   11398:	2913      	cmp	r1, #19
   1139a:	d8f1      	bhi.n	11380 <z_to_nrf_optname+0xc>
   1139c:	a301      	add	r3, pc, #4	; (adr r3, 113a4 <z_to_nrf_optname+0x30>)
   1139e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   113a2:	bf00      	nop
   113a4:	00011441 	.word	0x00011441
   113a8:	00011405 	.word	0x00011405
   113ac:	00011429 	.word	0x00011429
   113b0:	0001141d 	.word	0x0001141d
   113b4:	0001140d 	.word	0x0001140d
   113b8:	0001142d 	.word	0x0001142d
   113bc:	00011431 	.word	0x00011431
   113c0:	00011381 	.word	0x00011381
   113c4:	00011381 	.word	0x00011381
   113c8:	00011381 	.word	0x00011381
   113cc:	00011381 	.word	0x00011381
   113d0:	00011381 	.word	0x00011381
   113d4:	00011381 	.word	0x00011381
   113d8:	00011381 	.word	0x00011381
   113dc:	00011381 	.word	0x00011381
   113e0:	00011381 	.word	0x00011381
   113e4:	00011381 	.word	0x00011381
   113e8:	00011381 	.word	0x00011381
   113ec:	00011381 	.word	0x00011381
   113f0:	00011421 	.word	0x00011421
		switch (z_in_optname) {
   113f4:	3901      	subs	r1, #1
   113f6:	2905      	cmp	r1, #5
   113f8:	d8c2      	bhi.n	11380 <z_to_nrf_optname+0xc>
   113fa:	e8df f001 	tbb	[pc, r1]
   113fe:	0703      	.short	0x0703
   11400:	210f1917 	.word	0x210f1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   11404:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_HOSTNAME;
   11406:	6013      	str	r3, [r2, #0]
	int retval = 0;
   11408:	2000      	movs	r0, #0
			break;
   1140a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_HOSTNAME;
   1140c:	2305      	movs	r3, #5
   1140e:	e7fa      	b.n	11406 <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   11410:	2914      	cmp	r1, #20
   11412:	d005      	beq.n	11420 <z_to_nrf_optname+0xac>
   11414:	2919      	cmp	r1, #25
   11416:	d005      	beq.n	11424 <z_to_nrf_optname+0xb0>
   11418:	2904      	cmp	r1, #4
   1141a:	d1b1      	bne.n	11380 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   1141c:	2304      	movs	r3, #4
   1141e:	e7f2      	b.n	11406 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   11420:	2314      	movs	r3, #20
   11422:	e7f0      	b.n	11406 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   11424:	6011      	str	r1, [r2, #0]
   11426:	e7ef      	b.n	11408 <z_to_nrf_optname+0x94>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   11428:	2303      	movs	r3, #3
   1142a:	e7ec      	b.n	11406 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   1142c:	2306      	movs	r3, #6
   1142e:	e7ea      	b.n	11406 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   11430:	2307      	movs	r3, #7
   11432:	e7e8      	b.n	11406 <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   11434:	2902      	cmp	r1, #2
   11436:	d0e5      	beq.n	11404 <z_to_nrf_optname+0x90>
   11438:	2903      	cmp	r1, #3
   1143a:	d0f5      	beq.n	11428 <z_to_nrf_optname+0xb4>
   1143c:	2901      	cmp	r1, #1
   1143e:	d19f      	bne.n	11380 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   11440:	2301      	movs	r3, #1
   11442:	e7e0      	b.n	11406 <z_to_nrf_optname+0x92>

00011444 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   11444:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   11446:	4b03      	ldr	r3, [pc, #12]	; (11454 <nrf91_socket_iface_init+0x10>)
   11448:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   1144a:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   1144c:	4802      	ldr	r0, [pc, #8]	; (11458 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   1144e:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   11450:	f7fe b99a 	b.w	f788 <socket_offload_register>
   11454:	200202f4 	.word	0x200202f4
   11458:	00025b2c 	.word	0x00025b2c

0001145c <abi_getter>:
extern const struct fw_info_abi * const _ext_abis_start[];
extern const u32_t _ext_abis_size;
__noinit fw_info_abi_getter abi_getter_in;

int abi_getter(u32_t id, u32_t index, const struct fw_info_abi **abi)
{
   1145c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!abi) {
   1145e:	b1da      	cbz	r2, 11498 <abi_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   11460:	2300      	movs	r3, #0
	bool id_found = false;
   11462:	461c      	mov	r4, r3
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   11464:	4e0e      	ldr	r6, [pc, #56]	; (114a0 <abi_getter+0x44>)
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
   11466:	4f0f      	ldr	r7, [pc, #60]	; (114a4 <abi_getter+0x48>)
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   11468:	42b3      	cmp	r3, r6
   1146a:	d306      	bcc.n	1147a <abi_getter+0x1e>
				*abi = ext_abi;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
   1146c:	2c00      	cmp	r4, #0
   1146e:	bf14      	ite	ne
   11470:	f06f 0008 	mvnne.w	r0, #8
   11474:	f06f 0001 	mvneq.w	r0, #1
   11478:	e009      	b.n	1148e <abi_getter+0x32>
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
   1147a:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
		if (ext_abi->abi_id == id) {
   1147e:	f8d5 c00c 	ldr.w	ip, [r5, #12]
   11482:	4560      	cmp	r0, ip
   11484:	d106      	bne.n	11494 <abi_getter+0x38>
			if (index-- == 0) {
   11486:	1e4c      	subs	r4, r1, #1
   11488:	b911      	cbnz	r1, 11490 <abi_getter+0x34>
				return 0;
   1148a:	4608      	mov	r0, r1
				*abi = ext_abi;
   1148c:	6015      	str	r5, [r2, #0]
}
   1148e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
   11490:	4621      	mov	r1, r4
			id_found = true;
   11492:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   11494:	3301      	adds	r3, #1
   11496:	e7e7      	b.n	11468 <abi_getter+0xc>
		return -EFAULT;
   11498:	f06f 000d 	mvn.w	r0, #13
   1149c:	e7f7      	b.n	1148e <abi_getter+0x32>
   1149e:	bf00      	nop
   114a0:	00000000 	.word	0x00000000
   114a4:	00027ab8 	.word	0x00027ab8

000114a8 <ip_client_event_handler>:
   114a8:	1b08f850 	.word	0x1b08f850
   114ac:	f0060c09 	.word	0xf0060c09
   114b0:	bf00bb3d 	.word	0xbf00bb3d

000114b4 <rpc_ip_client_init>:
   114b4:	f00b4801 	.word	0xf00b4801
   114b8:	bf00ba9d 	.word	0xbf00ba9d
   114bc:	00025b6c 	.word	0x00025b6c

000114c0 <rpc_ip_client_request_alloc>:
   114c0:	b5102300 	.word	0xb5102300
   114c4:	9301b082 	.word	0x9301b082
   114c8:	4604b158 	.word	0x4604b158
   114cc:	2004aa01 	.word	0x2004aa01
   114d0:	fcc8f00b 	.word	0xfcc8f00b
   114d4:	9b01b918 	.word	0x9b01b918
   114d8:	3308b10b 	.word	0x3308b10b
   114dc:	b0026023 	.word	0xb0026023
   114e0:	2007bd10 	.word	0x2007bd10
   114e4:	bd10b002 	.word	0xbd10b002

000114e8 <rpc_ip_client_request_send>:
   114e8:	4370f401 	.word	0x4370f401
   114ec:	4fe0f5b3 	.word	0x4fe0f5b3
   114f0:	b160d10b 	.word	0xb160d10b
   114f4:	f8304603 	.word	0xf8304603
   114f8:	20042c08 	.word	0x20042c08
   114fc:	4101ea42 	.word	0x4101ea42
   11500:	1d08f843 	.word	0x1d08f843
   11504:	f00b4619 	.word	0xf00b4619
   11508:	200fbc95 	.word	0x200fbc95
   1150c:	20074770 	.word	0x20074770
   11510:	bf004770 	.word	0xbf004770

00011514 <rpc_ip_client_message_free>:
   11514:	f1a0b120 	.word	0xf1a0b120
   11518:	20040108 	.word	0x20040108
   1151c:	bcd4f00b 	.word	0xbcd4f00b
   11520:	47702007 	.word	0x47702007

00011524 <rpc_ip_client_data_free>:
   11524:	4601b118 	.word	0x4601b118
   11528:	f00b2004 	.word	0xf00b2004
   1152c:	2007bddf 	.word	0x2007bddf
   11530:	bf004770 	.word	0xbf004770

00011534 <symbol_0001c77>:
   11534:	4603b430 	.word	0x4603b430
   11538:	f5b26800 	.word	0xf5b26800
   1153c:	eba03f80 	.word	0xeba03f80
   11540:	d2140101 	.word	0xd2140101
   11544:	dd512902 	.word	0xdd512902
   11548:	60191e41 	.word	0x60191e41
   1154c:	2c01f800 	.word	0x2c01f800
   11550:	24826819 	.word	0x24826819
   11554:	60181e48 	.word	0x60181e48
   11558:	0a122003 	.word	0x0a122003
   1155c:	2c01f801 	.word	0x2c01f801
   11560:	1e51681a 	.word	0x1e51681a
   11564:	f8026019 	.word	0xf8026019
   11568:	bc304c01 	.word	0xbc304c01
   1156c:	f1b24770 	.word	0xf1b24770
   11570:	d21a7f80 	.word	0xd21a7f80
   11574:	dd392903 	.word	0xdd392903
   11578:	1e412483 	.word	0x1e412483
   1157c:	f8006019 	.word	0xf8006019
   11580:	68192c01 	.word	0x68192c01
   11584:	1e4d0a10 	.word	0x1e4d0a10
   11588:	f801601d 	.word	0xf801601d
   1158c:	68190c01 	.word	0x68190c01
   11590:	1e480c12 	.word	0x1e480c12
   11594:	f8016018 	.word	0xf8016018
   11598:	681a2c01 	.word	0x681a2c01
   1159c:	1e512004 	.word	0x1e512004
   115a0:	f8026019 	.word	0xf8026019
   115a4:	bc304c01 	.word	0xbc304c01
   115a8:	29044770 	.word	0x29044770
   115ac:	2484dd1e 	.word	0x2484dd1e
   115b0:	60191e41 	.word	0x60191e41
   115b4:	2c01f800 	.word	0x2c01f800
   115b8:	0a106819 	.word	0x0a106819
   115bc:	601d1e4d 	.word	0x601d1e4d
   115c0:	0c01f801 	.word	0x0c01f801
   115c4:	0c106819 	.word	0x0c106819
   115c8:	601d1e4d 	.word	0x601d1e4d
   115cc:	0c01f801 	.word	0x0c01f801
   115d0:	0e126819 	.word	0x0e126819
   115d4:	60181e48 	.word	0x60181e48
   115d8:	2c01f801 	.word	0x2c01f801
   115dc:	2005681a 	.word	0x2005681a
   115e0:	60191e51 	.word	0x60191e51
   115e4:	4c01f802 	.word	0x4c01f802
   115e8:	4770bc30 	.word	0x4770bc30
   115ec:	006bf06f 	.word	0x006bf06f
   115f0:	bf00e7bb 	.word	0xbf00e7bb

000115f4 <symbol_000646e>:
   115f4:	6804b430 	.word	0x6804b430
   115f8:	46032a7f 	.word	0x46032a7f
   115fc:	0101eba4 	.word	0x0101eba4
   11600:	2900d808 	.word	0x2900d808
   11604:	1e61dd6c 	.word	0x1e61dd6c
   11608:	20016001 	.word	0x20016001
   1160c:	2c01f804 	.word	0x2c01f804
   11610:	4770bc30 	.word	0x4770bc30
   11614:	d80e2aff 	.word	0xd80e2aff
   11618:	dd612901 	.word	0xdd612901
   1161c:	1e602181 	.word	0x1e602181
   11620:	f8046018 	.word	0xf8046018
   11624:	681a2c01 	.word	0x681a2c01
   11628:	1e542002 	.word	0x1e542002
   1162c:	f802601c 	.word	0xf802601c
   11630:	bc301c01 	.word	0xbc301c01
   11634:	f5b24770 	.word	0xf5b24770
   11638:	d31c3f80 	.word	0xd31c3f80
   1163c:	7f80f1b2 	.word	0x7f80f1b2
   11640:	2903d22e 	.word	0x2903d22e
   11644:	2583dd4c 	.word	0x2583dd4c
   11648:	60011e61 	.word	0x60011e61
   1164c:	2c01f804 	.word	0x2c01f804
   11650:	0a106801 	.word	0x0a106801
   11654:	601c1e4c 	.word	0x601c1e4c
   11658:	0c01f801 	.word	0x0c01f801
   1165c:	0c126819 	.word	0x0c126819
   11660:	60181e48 	.word	0x60181e48
   11664:	2c01f801 	.word	0x2c01f801
   11668:	2004681a 	.word	0x2004681a
   1166c:	60191e51 	.word	0x60191e51
   11670:	5c01f802 	.word	0x5c01f802
   11674:	2902e7cc 	.word	0x2902e7cc
   11678:	2582dd32 	.word	0x2582dd32
   1167c:	60011e61 	.word	0x60011e61
   11680:	2c01f804 	.word	0x2c01f804
   11684:	0a126801 	.word	0x0a126801
   11688:	60181e48 	.word	0x60181e48
   1168c:	2c01f801 	.word	0x2c01f801
   11690:	2003681a 	.word	0x2003681a
   11694:	60191e51 	.word	0x60191e51
   11698:	5c01f802 	.word	0x5c01f802
   1169c:	4770bc30 	.word	0x4770bc30
   116a0:	dd1d2904 	.word	0xdd1d2904
   116a4:	1e612584 	.word	0x1e612584
   116a8:	f8046001 	.word	0xf8046001
   116ac:	68012c01 	.word	0x68012c01
   116b0:	1e4c0a10 	.word	0x1e4c0a10
   116b4:	f801601c 	.word	0xf801601c
   116b8:	68190c01 	.word	0x68190c01
   116bc:	1e4c0c10 	.word	0x1e4c0c10
   116c0:	f801601c 	.word	0xf801601c
   116c4:	68190c01 	.word	0x68190c01
   116c8:	1e480e12 	.word	0x1e480e12
   116cc:	f8016018 	.word	0xf8016018
   116d0:	681a2c01 	.word	0x681a2c01
   116d4:	1e512005 	.word	0x1e512005
   116d8:	f8026019 	.word	0xf8026019
   116dc:	e7975c01 	.word	0xe7975c01
   116e0:	006bf06f 	.word	0x006bf06f
   116e4:	bf00e794 	.word	0xbf00e794

000116e8 <symbol_00036c0>:
   116e8:	1a596803 	.word	0x1a596803
   116ec:	dd052900 	.word	0xdd052900
   116f0:	60011e59 	.word	0x60011e59
   116f4:	f8032001 	.word	0xf8032001
   116f8:	47702c01 	.word	0x47702c01
   116fc:	006bf06f 	.word	0x006bf06f
   11700:	bf004770 	.word	0xbf004770

00011704 <symbol_0008475>:
   11704:	6805b5f8 	.word	0x6805b5f8
   11708:	d83f42a9 	.word	0xd83f42a9
   1170c:	1a69460f 	.word	0x1a69460f
   11710:	d83b428b 	.word	0xd83b428b
   11714:	461c4606 	.word	0x461c4606
   11718:	46111ae8 	.word	0x46111ae8
   1171c:	461a6030 	.word	0x461a6030
   11720:	f8aff013 	.word	0xf8aff013
   11724:	46202c00 	.word	0x46202c00
   11728:	2c7fdb15 	.word	0x2c7fdb15
   1172c:	6833d814 	.word	0x6833d814
   11730:	2a001bda 	.word	0x2a001bda
   11734:	2001dd2a 	.word	0x2001dd2a
   11738:	60321e5a 	.word	0x60321e5a
   1173c:	4c01f803 	.word	0x4c01f803
   11740:	34016833 	.word	0x34016833
   11744:	2f001bdf 	.word	0x2f001bdf
   11748:	2206dd20 	.word	0x2206dd20
   1174c:	60311e59 	.word	0x60311e59
   11750:	f8034420 	.word	0xf8034420
   11754:	bdf82c01 	.word	0xbdf82c01
   11758:	d80f2cff 	.word	0xd80f2cff
   1175c:	1bda6833 	.word	0x1bda6833
   11760:	dd132a01 	.word	0xdd132a01
   11764:	1e592281 	.word	0x1e592281
   11768:	f8036031 	.word	0xf8036031
   1176c:	68334c01 	.word	0x68334c01
   11770:	1e592002 	.word	0x1e592002
   11774:	f8036031 	.word	0xf8036031
   11778:	e7e12c01 	.word	0xe7e12c01
   1177c:	46394622 	.word	0x46394622
   11780:	f7ff4630 	.word	0xf7ff4630
   11784:	2800fed7 	.word	0x2800fed7
   11788:	bdf8dada 	.word	0xbdf8dada
   1178c:	006bf06f 	.word	0x006bf06f
   11790:	bf00bdf8 	.word	0xbf00bdf8

00011794 <symbol_0002662>:
   11794:	41f0e92d 	.word	0x41f0e92d
   11798:	8018f8dd 	.word	0x8018f8dd
   1179c:	f1b86805 	.word	0xf1b86805
   117a0:	d1130f00 	.word	0xd1130f00
   117a4:	2c001a6c 	.word	0x2c001a6c
   117a8:	8087f340 	.word	0x8087f340
   117ac:	60041e6c 	.word	0x60041e6c
   117b0:	8c01f805 	.word	0x8c01f805
   117b4:	1a656804 	.word	0x1a656804
   117b8:	dd7e2d00 	.word	0xdd7e2d00
   117bc:	f04f2505 	.word	0xf04f2505
   117c0:	1e660802 	.word	0x1e660802
   117c4:	f8046006 	.word	0xf8046006
   117c8:	68055c01 	.word	0x68055c01
   117cc:	d87442a9 	.word	0xd87442a9
   117d0:	42a31a6c 	.word	0x42a31a6c
   117d4:	4606d871 	.word	0x4606d871
   117d8:	1ae8461c 	.word	0x1ae8461c
   117dc:	6030460f 	.word	0x6030460f
   117e0:	461a4611 	.word	0x461a4611
   117e4:	f84df013 	.word	0xf84df013
   117e8:	46202c00 	.word	0x46202c00
   117ec:	2c7fdb2f 	.word	0x2c7fdb2f
   117f0:	6833d841 	.word	0x6833d841
   117f4:	2a001bda 	.word	0x2a001bda
   117f8:	2001dd5f 	.word	0x2001dd5f
   117fc:	60321e5a 	.word	0x60321e5a
   11800:	4c01f803 	.word	0x4c01f803
   11804:	34016833 	.word	0x34016833
   11808:	2a001bda 	.word	0x2a001bda
   1180c:	2206dd55 	.word	0x2206dd55
   11810:	1e594404 	.word	0x1e594404
   11814:	60312c00 	.word	0x60312c00
   11818:	f8034620 	.word	0xf8034620
   1181c:	db162c01 	.word	0xdb162c01
   11820:	2c7f4444 	.word	0x2c7f4444
   11824:	6833d815 	.word	0x6833d815
   11828:	2a001bda 	.word	0x2a001bda
   1182c:	2001dd45 	.word	0x2001dd45
   11830:	60321e5a 	.word	0x60321e5a
   11834:	4c01f803 	.word	0x4c01f803
   11838:	34016833 	.word	0x34016833
   1183c:	2f001bdf 	.word	0x2f001bdf
   11840:	2230dd3b 	.word	0x2230dd3b
   11844:	60311e59 	.word	0x60311e59
   11848:	f8034420 	.word	0xf8034420
   1184c:	e8bd2c01 	.word	0xe8bd2c01
   11850:	2cff81f0 	.word	0x2cff81f0
   11854:	6833d821 	.word	0x6833d821
   11858:	2a011bda 	.word	0x2a011bda
   1185c:	2281dd2d 	.word	0x2281dd2d
   11860:	60311e59 	.word	0x60311e59
   11864:	4c01f803 	.word	0x4c01f803
   11868:	20026833 	.word	0x20026833
   1186c:	60311e59 	.word	0x60311e59
   11870:	2c01f803 	.word	0x2c01f803
   11874:	2cffe7e0 	.word	0x2cffe7e0
   11878:	6833d817 	.word	0x6833d817
   1187c:	2a011bda 	.word	0x2a011bda
   11880:	2281dd1b 	.word	0x2281dd1b
   11884:	60311e59 	.word	0x60311e59
   11888:	4c01f803 	.word	0x4c01f803
   1188c:	20026833 	.word	0x20026833
   11890:	60311e59 	.word	0x60311e59
   11894:	2c01f803 	.word	0x2c01f803
   11898:	4622e7b4 	.word	0x4622e7b4
   1189c:	46304639 	.word	0x46304639
   118a0:	fe48f7ff 	.word	0xfe48f7ff
   118a4:	dbd22800 	.word	0xdbd22800
   118a8:	4622e7c6 	.word	0x4622e7c6
   118ac:	46304639 	.word	0x46304639
   118b0:	fe40f7ff 	.word	0xfe40f7ff
   118b4:	daa52800 	.word	0xdaa52800
   118b8:	f06fe7c9 	.word	0xf06fe7c9
   118bc:	e7c6006b 	.word	0xe7c6006b

000118c0 <symbol_0005bf5>:
   118c0:	4ff0e92d 	.word	0x4ff0e92d
   118c4:	b0d72400 	.word	0xb0d72400
   118c8:	73abf50d 	.word	0x73abf50d
   118cc:	46914688 	.word	0x46914688
   118d0:	4306e9cd 	.word	0x4306e9cd
   118d4:	f0014607 	.word	0xf0014607
   118d8:	2802f95d 	.word	0x2802f95d
   118dc:	2385d159 	.word	0x2385d159
   118e0:	ae0b6878 	.word	0xae0b6878
   118e4:	46229301 	.word	0x46229301
   118e8:	0188f100 	.word	0x0188f100
   118ec:	ab0a9600 	.word	0xab0a9600
   118f0:	f004940a 	.word	0xf004940a
   118f4:	ad2dfbc5 	.word	0xad2dfbc5
   118f8:	b9684604 	.word	0xb9684604
   118fc:	42a89807 	.word	0x42a89807
   11900:	9a0ad37f 	.word	0x9a0ad37f
   11904:	42931b43 	.word	0x42931b43
   11908:	1a83d37b 	.word	0x1a83d37b
   1190c:	46314618 	.word	0x46314618
   11910:	f0129307 	.word	0xf0129307
   11914:	9c0affb6 	.word	0x9c0affb6
   11918:	db312c00 	.word	0xdb312c00
   1191c:	1b5a9b07 	.word	0x1b5a9b07
   11920:	dd6e2a00 	.word	0xdd6e2a00
   11924:	1e5a2100 	.word	0x1e5a2100
   11928:	0a01f104 	.word	0x0a01f104
   1192c:	a8079207 	.word	0xa8079207
   11930:	1c01f803 	.word	0x1c01f803
   11934:	46294652 	.word	0x46294652
   11938:	fe5cf7ff 	.word	0xfe5cf7ff
   1193c:	db1f1e04 	.word	0xdb1f1e04
   11940:	46292203 	.word	0x46292203
   11944:	f7ffa807 	.word	0xf7ffa807
   11948:	f1b0fecf 	.word	0xf1b0fecf
   1194c:	db1b0b00 	.word	0xdb1b0b00
   11950:	f0014638 	.word	0xf0014638
   11954:	aa08f91f 	.word	0xaa08f91f
   11958:	f00ba909 	.word	0xf00ba909
   1195c:	4603fcd7 	.word	0x4603fcd7
   11960:	2b00b1c8 	.word	0x2b00b1c8
   11964:	f1c3db50 	.word	0xf1c3db50
   11968:	a90602a2 	.word	0xa90602a2
   1196c:	9101e9cd 	.word	0x9101e9cd
   11970:	8000f8cd 	.word	0x8000f8cd
   11974:	4925442a 	.word	0x4925442a
   11978:	f0044825 	.word	0xf0044825
   1197c:	4604ffa1 	.word	0x4604ffa1
   11980:	b0574620 	.word	0xb0574620
   11984:	8ff0e8bd 	.word	0x8ff0e8bd
   11988:	4620465c 	.word	0x4620465c
   1198c:	e8bdb057 	.word	0xe8bdb057
   11990:	4c208ff0 	.word	0x4c208ff0
   11994:	9005e7f4 	.word	0x9005e7f4
   11998:	f0014638 	.word	0xf0014638
   1199c:	2802f8fb 	.word	0x2802f8fb
   119a0:	d01d9b05 	.word	0xd01d9b05
   119a4:	e9dd4618 	.word	0xe9dd4618
   119a8:	90003208 	.word	0x90003208
   119ac:	a8074629 	.word	0xa8074629
   119b0:	fef0f7ff 	.word	0xfef0f7ff
   119b4:	db222800 	.word	0xdb222800
   119b8:	44a34454 	.word	0x44a34454
   119bc:	465a4483 	.word	0x465a4483
   119c0:	a8074629 	.word	0xa8074629
   119c4:	fe16f7ff 	.word	0xfe16f7ff
   119c8:	dbd91e04 	.word	0xdbd91e04
   119cc:	2230a807 	.word	0x2230a807
   119d0:	f7ff4629 	.word	0xf7ff4629
   119d4:	1e03fe89 	.word	0x1e03fe89
   119d8:	44a3db16 	.word	0x44a3db16
   119dc:	e7c0445b 	.word	0xe7c0445b
   119e0:	4632687b 	.word	0x4632687b
   119e4:	a90a7818 	.word	0xa90a7818
   119e8:	fcacf00b 	.word	0xfcacf00b
   119ec:	6833b928 	.word	0x6833b928
   119f0:	46299a0a 	.word	0x46299a0a
   119f4:	f7ffa807 	.word	0xf7ffa807
   119f8:	2800fe85 	.word	0x2800fe85
   119fc:	4604dad3 	.word	0x4604dad3
   11a00:	f06fe7be 	.word	0xf06fe7be
   11a04:	e7bb046b 	.word	0xe7bb046b
   11a08:	e7b9461c 	.word	0xe7b9461c
   11a0c:	00025b7c 	.word	0x00025b7c
   11a10:	00025b98 	.word	0x00025b98
   11a14:	ffffc680 	.word	0xffffc680

00011a18 <authenticated_atcmd_init>:
   11a18:	4c3bb5f0 	.word	0x4c3bb5f0
   11a1c:	6826b0c7 	.word	0x6826b0c7
   11a20:	2701bb16 	.word	0x2701bb16
   11a24:	60274839 	.word	0x60274839
   11a28:	f962f7fc 	.word	0xf962f7fc
   11a2c:	f5c04605 	.word	0xf5c04605
   11a30:	46317380 	.word	0x46317380
   11a34:	7280f44f 	.word	0x7280f44f
   11a38:	9302a806 	.word	0x9302a806
   11a3c:	ff2cf012 	.word	0xff2cf012
   11a40:	4932462a 	.word	0x4932462a
   11a44:	f012a806 	.word	0xf012a806
   11a48:	aa06ff1c 	.word	0xaa06ff1c
   11a4c:	ab029700 	.word	0xab029700
   11a50:	2120442a 	.word	0x2120442a
   11a54:	f00a482e 	.word	0xf00a482e
   11a58:	4606fed5 	.word	0x4606fed5
   11a5c:	2300b138 	.word	0x2300b138
   11a60:	60232023 	.word	0x60232023
   11a64:	bdf0b047 	.word	0xbdf0b047
   11a68:	b047200e 	.word	0xb047200e
   11a6c:	2022bdf0 	.word	0x2022bdf0
   11a70:	60279b02 	.word	0x60279b02
   11a74:	af06441d 	.word	0xaf06441d
   11a78:	5578ab06 	.word	0x5578ab06
   11a7c:	f240442b 	.word	0xf240442b
   11a80:	21022201 	.word	0x21022201
   11a84:	705e2066 	.word	0x705e2066
   11a88:	f9c0f000 	.word	0xf9c0f000
   11a8c:	dbe61e07 	.word	0xdbe61e07
   11a90:	f7fc4820 	.word	0xf7fc4820
   11a94:	4633f92d 	.word	0x4633f92d
   11a98:	491e4602 	.word	0x491e4602
   11a9c:	6600e9cd 	.word	0x6600e9cd
   11aa0:	f0004638 	.word	0xf0004638
   11aa4:	3502f95d 	.word	0x3502f95d
   11aa8:	4633a903 	.word	0x4633a903
   11aac:	e9cd220a 	.word	0xe9cd220a
   11ab0:	46386600 	.word	0x46386600
   11ab4:	fa3cf000 	.word	0xfa3cf000
   11ab8:	6600e9cd 	.word	0x6600e9cd
   11abc:	462aa906 	.word	0x462aa906
   11ac0:	46384633 	.word	0x46384633
   11ac4:	f94cf000 	.word	0xf94cf000
   11ac8:	d00342a8 	.word	0xd00342a8
   11acc:	f0004638 	.word	0xf0004638
   11ad0:	e7c4f9e7 	.word	0xe7c4f9e7
   11ad4:	6600e9cd 	.word	0x6600e9cd
   11ad8:	220a4633 	.word	0x220a4633
   11adc:	4638a903 	.word	0x4638a903
   11ae0:	fa26f000 	.word	0xfa26f000
   11ae4:	ddf12801 	.word	0xddf12801
   11ae8:	2202a803 	.word	0x2202a803
   11aec:	f013490a 	.word	0xf013490a
   11af0:	4605f81d 	.word	0x4605f81d
   11af4:	d1e92800 	.word	0xd1e92800
   11af8:	46382302 	.word	0x46382302
   11afc:	f0006023 	.word	0xf0006023
   11b00:	4628f9cf 	.word	0x4628f9cf
   11b04:	bf00e7ae 	.word	0xbf00e7ae
   11b08:	200202f8 	.word	0x200202f8
   11b0c:	00025bb4 	.word	0x00025bb4
   11b10:	200226b8 	.word	0x200226b8
   11b14:	00025bc4 	.word	0x00025bc4
   11b18:	00025bd4 	.word	0x00025bd4

00011b1c <gnss_client_event_handler>:
   11b1c:	1b08f850 	.word	0x1b08f850
   11b20:	f0060c09 	.word	0xf0060c09
   11b24:	bf00bda5 	.word	0xbf00bda5

00011b28 <rpc_gnss_client_init>:
   11b28:	f00a4801 	.word	0xf00a4801
   11b2c:	bf00bf63 	.word	0xbf00bf63
   11b30:	00025c5c 	.word	0x00025c5c

00011b34 <rpc_gnss_client_request_alloc>:
   11b34:	b5102300 	.word	0xb5102300
   11b38:	9301b082 	.word	0x9301b082
   11b3c:	4604b158 	.word	0x4604b158
   11b40:	2007aa01 	.word	0x2007aa01
   11b44:	f98ef00b 	.word	0xf98ef00b
   11b48:	9b01b918 	.word	0x9b01b918
   11b4c:	3308b10b 	.word	0x3308b10b
   11b50:	b0026023 	.word	0xb0026023
   11b54:	2007bd10 	.word	0x2007bd10
   11b58:	bd10b002 	.word	0xbd10b002

00011b5c <rpc_gnss_client_request_send>:
   11b5c:	4370f401 	.word	0x4370f401
   11b60:	5f80f5b3 	.word	0x5f80f5b3
   11b64:	b160d10b 	.word	0xb160d10b
   11b68:	f8304603 	.word	0xf8304603
   11b6c:	20072c08 	.word	0x20072c08
   11b70:	4101ea42 	.word	0x4101ea42
   11b74:	1d08f843 	.word	0x1d08f843
   11b78:	f00b4619 	.word	0xf00b4619
   11b7c:	200fb95b 	.word	0x200fb95b
   11b80:	20074770 	.word	0x20074770
   11b84:	bf004770 	.word	0xbf004770

00011b88 <rpc_gnss_client_message_free>:
   11b88:	f1a0b120 	.word	0xf1a0b120
   11b8c:	20070108 	.word	0x20070108
   11b90:	b99af00b 	.word	0xb99af00b
   11b94:	47702007 	.word	0x47702007

00011b98 <rpc_gnss_client_data_free>:
   11b98:	4601b118 	.word	0x4601b118
   11b9c:	f00b2007 	.word	0xf00b2007
   11ba0:	2007baa5 	.word	0x2007baa5
   11ba4:	bf004770 	.word	0xbf004770

00011ba8 <eckey_can_do>:
   11ba8:	28023802 	.word	0x28023802
   11bac:	2000bf8c 	.word	0x2000bf8c
   11bb0:	47702001 	.word	0x47702001

00011bb4 <eckey_get_bitlen>:
   11bb4:	47706d80 	.word	0x47706d80

00011bb8 <eckey_debug>:
   11bb8:	4b032202 	.word	0x4b032202
   11bbc:	60883088 	.word	0x60883088
   11bc0:	604b700a 	.word	0x604b700a
   11bc4:	bf004770 	.word	0xbf004770
   11bc8:	00025c6c 	.word	0x00025c6c

00011bcc <eckeydh_can_do>:
   11bcc:	28013802 	.word	0x28013802
   11bd0:	2000bf8c 	.word	0x2000bf8c
   11bd4:	47702001 	.word	0x47702001

00011bd8 <eckey_free_wrap>:
   11bd8:	4604b510 	.word	0x4604b510
   11bdc:	fc48f003 	.word	0xfc48f003
   11be0:	e8bd4620 	.word	0xe8bd4620
   11be4:	f00b4010 	.word	0xf00b4010
   11be8:	bf00bfe9 	.word	0xbf00bfe9

00011bec <eckey_alloc_wrap>:
   11bec:	21acb510 	.word	0x21acb510
   11bf0:	f00b2001 	.word	0xf00b2001
   11bf4:	4604ffcf 	.word	0x4604ffcf
   11bf8:	f003b108 	.word	0xf003b108
   11bfc:	4620fbd3 	.word	0x4620fbd3
   11c00:	bf00bd10 	.word	0xbf00bd10

00011c04 <eckey_check_pair>:
   11c04:	bbacf004 	.word	0xbbacf004

00011c08 <symbol_0005c7f>:
   11c08:	4ff0e92d 	.word	0x4ff0e92d
   11c0c:	c024f8dd 	.word	0xc024f8dd
   11c10:	0f00f1bc 	.word	0x0f00f1bc
   11c14:	4c42d065 	.word	0x4c42d065
   11c18:	540cfba4 	.word	0x540cfba4
   11c1c:	eb040864 	.word	0xeb040864
   11c20:	45c40844 	.word	0x45c40844
   11c24:	3401bf18 	.word	0x3401bf18
   11c28:	4f80f1b4 	.word	0x4f80f1b4
   11c2c:	00a4d271 	.word	0x00a4d271
   11c30:	428c3401 	.word	0x428c3401
   11c34:	2800d869 	.word	0x2800d869
   11c38:	f1b8d067 	.word	0xf1b8d067
   11c3c:	d0610f00 	.word	0xd0610f00
   11c40:	27004686 	.word	0x27004686
   11c44:	1cdc4e37 	.word	0x1cdc4e37
   11c48:	f8142500 	.word	0xf8142500
   11c4c:	f8141c03 	.word	0xf8141c03
   11c50:	f8143c02 	.word	0xf8143c02
   11c54:	ea4fbc01 	.word	0xea4fbc01
   11c58:	010909a1 	.word	0x010909a1
   11c5c:	0130f001 	.word	0x0130f001
   11c60:	1a13eb06 	.word	0x1a13eb06
   11c64:	9009f816 	.word	0x9009f816
   11c68:	f81a009b 	.word	0xf81a009b
   11c6c:	f003a001 	.word	0xf003a001
   11c70:	eb06013c 	.word	0xeb06013c
   11c74:	5c59139b 	.word	0x5c59139b
   11c78:	0507f369 	.word	0x0507f369
   11c7c:	033ff00b 	.word	0x033ff00b
   11c80:	f36a5cf3 	.word	0xf36a5cf3
   11c84:	f361250f 	.word	0xf361250f
   11c88:	37034517 	.word	0x37034517
   11c8c:	651ff363 	.word	0x651ff363
   11c90:	0104f10e 	.word	0x0104f10e
   11c94:	f8ce45b8 	.word	0xf8ce45b8
   11c98:	46235000 	.word	0x46235000
   11c9c:	f104468e 	.word	0xf104468e
   11ca0:	d8d10403 	.word	0xd8d10403
   11ca4:	d91445bc 	.word	0xd91445bc
   11ca8:	4d1e781c 	.word	0x4d1e781c
   11cac:	10a63701 	.word	0x10a63701
   11cb0:	ea4f4567 	.word	0xea4f4567
   11cb4:	f0041404 	.word	0xf0041404
   11cb8:	f8150430 	.word	0xf8150430
   11cbc:	d315e006 	.word	0xd315e006
   11cc0:	5d2b263d 	.word	0x5d2b263d
   11cc4:	e000f881 	.word	0xe000f881
   11cc8:	233d704b 	.word	0x233d704b
   11ccc:	70cb708e 	.word	0x70cb708e
   11cd0:	23003104 	.word	0x23003104
   11cd4:	1a08469c 	.word	0x1a08469c
   11cd8:	700b6010 	.word	0x700b6010
   11cdc:	e8bd4660 	.word	0xe8bd4660
   11ce0:	f8c28ff0 	.word	0xf8c28ff0
   11ce4:	4660c000 	.word	0x4660c000
   11ce8:	8ff0e8bd 	.word	0x8ff0e8bd
   11cec:	f881785b 	.word	0xf881785b
   11cf0:	eb05e000 	.word	0xeb05e000
   11cf4:	5d341613 	.word	0x5d341613
   11cf8:	f003009b 	.word	0xf003009b
   11cfc:	704c033c 	.word	0x704c033c
   11d00:	e7e25cee 	.word	0xe7e25cee
   11d04:	46014647 	.word	0x46014647
   11d08:	6014e7cc 	.word	0x6014e7cc
   11d0c:	0c29f06f 	.word	0x0c29f06f
   11d10:	f04fe7e4 	.word	0xf04fe7e4
   11d14:	f06f33ff 	.word	0xf06f33ff
   11d18:	60130c29 	.word	0x60130c29
   11d1c:	bf00e7de 	.word	0xbf00e7de
   11d20:	aaaaaaab 	.word	0xaaaaaaab
   11d24:	00025cd4 	.word	0x00025cd4

00011d28 <packet_free_cb>:
   11d28:	f0006800 	.word	0xf0006800
   11d2c:	bf00b9eb 	.word	0xbf00b9eb

00011d30 <packet_free_cb>:
   11d30:	4604b510 	.word	0x4604b510
   11d34:	f0066800 	.word	0xf0066800
   11d38:	68a0f9a5 	.word	0x68a0f9a5
   11d3c:	e8bdb118 	.word	0xe8bdb118
   11d40:	f00b4010 	.word	0xf00b4010
   11d44:	bd10bf3b 	.word	0xbd10bf3b

00011d48 <packet_free_cb>:
   11d48:	4604b510 	.word	0x4604b510
   11d4c:	f7ff6800 	.word	0xf7ff6800
   11d50:	68a0ff23 	.word	0x68a0ff23
   11d54:	e8bdb118 	.word	0xe8bdb118
   11d58:	f00b4010 	.word	0xf00b4010
   11d5c:	bd10bf2f 	.word	0xbd10bf2f

00011d60 <at_interface_write>:
   11d60:	b083b5f0 	.word	0xb083b5f0
   11d64:	4615460f 	.word	0x4615460f
   11d68:	f0044606 	.word	0xf0044606
   11d6c:	2800fcf3 	.word	0x2800fcf3
   11d70:	6803d047 	.word	0x6803d047
   11d74:	039b4604 	.word	0x039b4604
   11d78:	6803d543 	.word	0x6803d543
   11d7c:	f4234629 	.word	0xf4234629
   11d80:	60033300 	.word	0x60033300
   11d84:	a8016803 	.word	0xa8016803
   11d88:	1300f443 	.word	0x1300f443
   11d8c:	f0006023 	.word	0xf0006023
   11d90:	bba0f98f 	.word	0xbba0f98f
   11d94:	9b012204 	.word	0x9b012204
   11d98:	7258721a 	.word	0x7258721a
   11d9c:	72d87298 	.word	0x72d87298
   11da0:	b98560de 	.word	0xb98560de
   11da4:	21014618 	.word	0x21014618
   11da8:	f996f000 	.word	0xf996f000
   11dac:	f44fb9d0 	.word	0xf44fb9d0
   11db0:	46303200 	.word	0x46303200
   11db4:	f04f4611 	.word	0xf04f4611
   11db8:	f00433ff 	.word	0xf00433ff
   11dbc:	b9a8fc5f 	.word	0xb9a8fc5f
   11dc0:	b0034628 	.word	0xb0034628
   11dc4:	4639bdf0 	.word	0x4639bdf0
   11dc8:	462a6818 	.word	0x462a6818
   11dcc:	fd59f012 	.word	0xfd59f012
   11dd0:	98012101 	.word	0x98012101
   11dd4:	f980f000 	.word	0xf980f000
   11dd8:	d0e82800 	.word	0xd0e82800
   11ddc:	68189b01 	.word	0x68189b01
   11de0:	f990f000 	.word	0xf990f000
   11de4:	f0009801 	.word	0xf0009801
   11de8:	2023f985 	.word	0x2023f985
   11dec:	f4436823 	.word	0xf4436823
   11df0:	60233300 	.word	0x60233300
   11df4:	f9b4f7ff 	.word	0xf9b4f7ff
   11df8:	30fff04f 	.word	0x30fff04f
   11dfc:	200ce7e1 	.word	0x200ce7e1
   11e00:	2016e7f4 	.word	0x2016e7f4
   11e04:	bf00e7f6 	.word	0xbf00e7f6

00011e08 <at_interface_init>:
   11e08:	b94cf000 	.word	0xb94cf000

00011e0c <at_interface_open>:
   11e0c:	41f0e92d 	.word	0x41f0e92d
   11e10:	b0822500 	.word	0xb0822500
   11e14:	f843ab02 	.word	0xf843ab02
   11e18:	46805d08 	.word	0x46805d08
   11e1c:	4618460f 	.word	0x4618460f
   11e20:	21024616 	.word	0x21024616
   11e24:	f0044a1d 	.word	0xf0044a1d
   11e28:	9b00fb85 	.word	0x9b00fb85
   11e2c:	b30b4604 	.word	0xb30b4604
   11e30:	8703e9c3 	.word	0x8703e9c3
   11e34:	4629615e 	.word	0x4629615e
   11e38:	f000a801 	.word	0xf000a801
   11e3c:	b9e8f939 	.word	0xb9e8f939
   11e40:	9b012204 	.word	0x9b012204
   11e44:	72582105 	.word	0x72582105
   11e48:	72d87298 	.word	0x72d87298
   11e4c:	60dc721a 	.word	0x60dc721a
   11e50:	f0004618 	.word	0xf0004618
   11e54:	b9d8f941 	.word	0xb9d8f941
   11e58:	f04f2202 	.word	0xf04f2202
   11e5c:	461133ff 	.word	0x461133ff
   11e60:	f0044620 	.word	0xf0044620
   11e64:	4605fc0b 	.word	0x4605fc0b
   11e68:	9a00b948 	.word	0x9a00b948
   11e6c:	f4436813 	.word	0xf4436813
   11e70:	60133300 	.word	0x60133300
   11e74:	b0024620 	.word	0xb0024620
   11e78:	81f0e8bd 	.word	0x81f0e8bd
   11e7c:	4620250c 	.word	0x4620250c
   11e80:	fbaef004 	.word	0xfbaef004
   11e84:	f7ff4628 	.word	0xf7ff4628
   11e88:	f04ff96b 	.word	0xf04ff96b
   11e8c:	e7f134ff 	.word	0xe7f134ff
   11e90:	f0009801 	.word	0xf0009801
   11e94:	2523f92f 	.word	0x2523f92f
   11e98:	bf00e7f1 	.word	0xbf00e7f1
   11e9c:	00011d29 	.word	0x00011d29

00011ea0 <at_interface_close>:
   11ea0:	b083b5f0 	.word	0xb083b5f0
   11ea4:	f0044606 	.word	0xf0044606
   11ea8:	2800fc55 	.word	0x2800fc55
   11eac:	230dd03d 	.word	0x230dd03d
   11eb0:	60036807 	.word	0x60036807
   11eb4:	46046803 	.word	0x46046803
   11eb8:	d41f039b 	.word	0xd41f039b
   11ebc:	a8012100 	.word	0xa8012100
   11ec0:	f8f6f000 	.word	0xf8f6f000
   11ec4:	2204bb20 	.word	0x2204bb20
   11ec8:	21069b01 	.word	0x21069b01
   11ecc:	72987258 	.word	0x72987258
   11ed0:	721a72d8 	.word	0x721a72d8
   11ed4:	461860de 	.word	0x461860de
   11ed8:	f8fef000 	.word	0xf8fef000
   11edc:	220eb9d0 	.word	0x220eb9d0
   11ee0:	33fff04f 	.word	0x33fff04f
   11ee4:	46304611 	.word	0x46304611
   11ee8:	fbc8f004 	.word	0xfbc8f004
   11eec:	b9a84605 	.word	0xb9a84605
   11ef0:	f0044630 	.word	0xf0044630
   11ef4:	4628fb75 	.word	0x4628fb75
   11ef8:	bdf0b003 	.word	0xbdf0b003
   11efc:	21006803 	.word	0x21006803
   11f00:	3300f423 	.word	0x3300f423
   11f04:	a8016003 	.word	0xa8016003
   11f08:	f8d2f000 	.word	0xf8d2f000
   11f0c:	d0da2800 	.word	0xd0da2800
   11f10:	e003250c 	.word	0xe003250c
   11f14:	f0009801 	.word	0xf0009801
   11f18:	2523f8ed 	.word	0x2523f8ed
   11f1c:	46286027 	.word	0x46286027
   11f20:	f91ef7ff 	.word	0xf91ef7ff
   11f24:	35fff04f 	.word	0x35fff04f
   11f28:	2516e7e5 	.word	0x2516e7e5
   11f2c:	bf00e7f7 	.word	0xbf00e7f7

00011f30 <at_interface_read>:
   11f30:	41f0e92d 	.word	0x41f0e92d
   11f34:	4688b084 	.word	0x4688b084
   11f38:	461e4615 	.word	0x461e4615
   11f3c:	f0044607 	.word	0xf0044607
   11f40:	2800fc09 	.word	0x2800fc09
   11f44:	2300d049 	.word	0x2300d049
   11f48:	8500e9cd 	.word	0x8500e9cd
   11f4c:	0502f016 	.word	0x0502f016
   11f50:	e9cd4604 	.word	0xe9cd4604
   11f54:	d00e3302 	.word	0xd00e3302
   11f58:	2d00e01e 	.word	0x2d00e01e
   11f5c:	f44fd133 	.word	0xf44fd133
   11f60:	6a233280 	.word	0x6a233280
   11f64:	2b004611 	.word	0x2b004611
   11f68:	f04fbf08 	.word	0xf04fbf08
   11f6c:	463833ff 	.word	0x463833ff
   11f70:	fb84f004 	.word	0xfb84f004
   11f74:	68234605 	.word	0x68234605
   11f78:	f42369e0 	.word	0xf42369e0
   11f7c:	60233380 	.word	0x60233380
   11f80:	46326803 	.word	0x46326803
   11f84:	4669689b 	.word	0x4669689b
   11f88:	f1b04798 	.word	0xf1b04798
   11f8c:	dbe40800 	.word	0xdbe40800
   11f90:	b0044640 	.word	0xb0044640
   11f94:	81f0e8bd 	.word	0x81f0e8bd
   11f98:	69c06803 	.word	0x69c06803
   11f9c:	3380f423 	.word	0x3380f423
   11fa0:	68036023 	.word	0x68036023
   11fa4:	689b4632 	.word	0x689b4632
   11fa8:	47984669 	.word	0x47984669
   11fac:	0800f1b0 	.word	0x0800f1b0
   11fb0:	f1b8daee 	.word	0xf1b8daee
   11fb4:	d1eb3fff 	.word	0xd1eb3fff
   11fb8:	f7ff2023 	.word	0xf7ff2023
   11fbc:	4640f8d1 	.word	0x4640f8d1
   11fc0:	e8bdb004 	.word	0xe8bdb004
   11fc4:	f1b881f0 	.word	0xf1b881f0
   11fc8:	d1e13fff 	.word	0xd1e13fff
   11fcc:	f7ff4628 	.word	0xf7ff4628
   11fd0:	4640f8c7 	.word	0x4640f8c7
   11fd4:	e8bdb004 	.word	0xe8bdb004
   11fd8:	201681f0 	.word	0x201681f0
   11fdc:	f8c0f7ff 	.word	0xf8c0f7ff
   11fe0:	38fff04f 	.word	0x38fff04f
   11fe4:	bf00e7d4 	.word	0xbf00e7d4

00011fe8 <at_interface_getopt>:
   11fe8:	bc12f004 	.word	0xbc12f004

00011fec <at_interface_setopt>:
   11fec:	bbdaf004 	.word	0xbbdaf004

00011ff0 <rpc_at_event_handler>:
   11ff0:	4606b570 	.word	0x4606b570
   11ff4:	68c0b084 	.word	0x68c0b084
   11ff8:	f004460d 	.word	0xf004460d
   11ffc:	4604fbab 	.word	0x4604fbab
   12000:	6803b348 	.word	0x6803b348
   12004:	2b01b29b 	.word	0x2b01b29b
   12008:	6803d01f 	.word	0x6803d01f
   1200c:	2b0db29b 	.word	0x2b0db29b
   12010:	6803d029 	.word	0x6803d029
   12014:	2b02b29b 	.word	0x2b02b29b
   12018:	3d03d02d 	.word	0x3d03d02d
   1201c:	d8172d01 	.word	0xd8172d01
   12020:	68732500 	.word	0x68732500
   12024:	e9cd6832 	.word	0xe9cd6832
   12028:	e9cd5502 	.word	0xe9cd5502
   1202c:	69e02300 	.word	0x69e02300
   12030:	68034669 	.word	0x68034669
   12034:	4798685b 	.word	0x4798685b
   12038:	d0193001 	.word	0xd0193001
   1203c:	68234628 	.word	0x68234628
   12040:	3380f443 	.word	0x3380f443
   12044:	b0046023 	.word	0xb0046023
   12048:	2d02bd70 	.word	0x2d02bd70
   1204c:	6005d1e5 	.word	0x6005d1e5
   12050:	b0042000 	.word	0xb0042000
   12054:	6830bd70 	.word	0x6830bd70
   12058:	d0f92800 	.word	0xd0f92800
   1205c:	f852f000 	.word	0xf852f000
   12060:	b0044620 	.word	0xb0044620
   12064:	2d02bd70 	.word	0x2d02bd70
   12068:	230ed1d7 	.word	0x230ed1d7
   1206c:	e7ef6003 	.word	0xe7ef6003
   12070:	b0042002 	.word	0xb0042002
   12074:	6803bd70 	.word	0x6803bd70
   12078:	d5ce029b 	.word	0xd5ce029b
   1207c:	d1cc2d02 	.word	0xd1cc2d02
   12080:	f4236803 	.word	0xf4236803
   12084:	60031300 	.word	0x60031300
   12088:	f4436803 	.word	0xf4436803
   1208c:	60033300 	.word	0x60033300
   12090:	bf00e7de 	.word	0xbf00e7de

00012094 <at_client_evt_handler>:
   12094:	f850b120 	.word	0xf850b120
   12098:	0c091b08 	.word	0x0c091b08
   1209c:	bfa8f7ff 	.word	0xbfa8f7ff
   120a0:	bf004770 	.word	0xbf004770

000120a4 <rpc_at_client_init>:
   120a4:	f00a4801 	.word	0xf00a4801
   120a8:	bf00bca5 	.word	0xbf00bca5
   120ac:	00025d14 	.word	0x00025d14

000120b0 <rpc_at_client_request_alloc>:
   120b0:	2300b180 	.word	0x2300b180
   120b4:	b082b510 	.word	0xb082b510
   120b8:	4604aa02 	.word	0x4604aa02
   120bc:	3d04f842 	.word	0x3d04f842
   120c0:	f00a2003 	.word	0xf00a2003
   120c4:	b918fecf 	.word	0xb918fecf
   120c8:	b10b9b01 	.word	0xb10b9b01
   120cc:	60233308 	.word	0x60233308
   120d0:	bd10b002 	.word	0xbd10b002
   120d4:	4770200e 	.word	0x4770200e

000120d8 <rpc_at_client_request_send>:
   120d8:	4603b150 	.word	0x4603b150
   120dc:	2c08f830 	.word	0x2c08f830
   120e0:	ea422003 	.word	0xea422003
   120e4:	f8434101 	.word	0xf8434101
   120e8:	46191d08 	.word	0x46191d08
   120ec:	bea2f00a 	.word	0xbea2f00a
   120f0:	4770200e 	.word	0x4770200e

000120f4 <rpc_at_client_message_free>:
   120f4:	f1a0b120 	.word	0xf1a0b120
   120f8:	20030108 	.word	0x20030108
   120fc:	bee4f00a 	.word	0xbee4f00a
   12100:	4770200e 	.word	0x4770200e

00012104 <rpc_at_client_data_free>:
   12104:	4601b118 	.word	0x4601b118
   12108:	f00a2003 	.word	0xf00a2003
   1210c:	200ebfef 	.word	0x200ebfef
   12110:	bf004770 	.word	0xbf004770

00012114 <logobj_event_handler>:
   12114:	4b3bb530 	.word	0x4b3bb530
   12118:	681db085 	.word	0x681db085
   1211c:	d04c2d00 	.word	0xd04c2d00
   12120:	0302f248 	.word	0x0302f248
   12124:	d0534299 	.word	0xd0534299
   12128:	f248d91c 	.word	0xf248d91c
   1212c:	42990303 	.word	0x42990303
   12130:	f249d05a 	.word	0xf249d05a
   12134:	42990301 	.word	0x42990301
   12138:	2400d147 	.word	0x2400d147
   1213c:	68026843 	.word	0x68026843
   12140:	4402e9cd 	.word	0x4402e9cd
   12144:	2300e9cd 	.word	0x2300e9cd
   12148:	466969e8 	.word	0x466969e8
   1214c:	685b6803 	.word	0x685b6803
   12150:	30014798 	.word	0x30014798
   12154:	4620d04e 	.word	0x4620d04e
   12158:	f443682b 	.word	0xf443682b
   1215c:	602b3380 	.word	0x602b3380
   12160:	bd30b005 	.word	0xbd30b005
   12164:	0301f248 	.word	0x0301f248
   12168:	d12e4299 	.word	0xd12e4299
   1216c:	2b0068c3 	.word	0x2b0068c3
   12170:	6828d135 	.word	0x6828d135
   12174:	0080f410 	.word	0x0080f410
   12178:	682bd03e 	.word	0x682bd03e
   1217c:	2b01b29b 	.word	0x2b01b29b
   12180:	682bd105 	.word	0x682bd105
   12184:	041b0c1b 	.word	0x041b0c1b
   12188:	0302f043 	.word	0x0302f043
   1218c:	4b1e602b 	.word	0x4b1e602b
   12190:	f002781a 	.word	0xf002781a
   12194:	2a0001ff 	.word	0x2a0001ff
   12198:	4a1cd031 	.word	0x4a1cd031
   1219c:	b9097811 	.word	0xb9097811
   121a0:	70112101 	.word	0x70112101
   121a4:	70182000 	.word	0x70182000
   121a8:	f423682b 	.word	0xf423682b
   121ac:	602b0380 	.word	0x602b0380
   121b0:	f443682b 	.word	0xf443682b
   121b4:	602b0300 	.word	0x602b0300
   121b8:	6800e7d2 	.word	0x6800e7d2
   121bc:	d0cf2800 	.word	0xd0cf2800
   121c0:	ff60f005 	.word	0xff60f005
   121c4:	b0054628 	.word	0xb0054628
   121c8:	2000bd30 	.word	0x2000bd30
   121cc:	bd30b005 	.word	0xbd30b005
   121d0:	f413682b 	.word	0xf413682b
   121d4:	d00b0380 	.word	0xd00b0380
   121d8:	280068c0 	.word	0x280068c0
   121dc:	230ed0e4 	.word	0x230ed0e4
   121e0:	606b2000 	.word	0x606b2000
   121e4:	bd30b005 	.word	0xbd30b005
   121e8:	2b0168c3 	.word	0x2b0168c3
   121ec:	e7f6d1a5 	.word	0xe7f6d1a5
   121f0:	e7b54618 	.word	0xe7b54618
   121f4:	e7b32002 	.word	0xe7b32002
   121f8:	606b230e 	.word	0x606b230e
   121fc:	4a03e7b0 	.word	0x4a03e7b0
   12200:	e7cf7011 	.word	0xe7cf7011
   12204:	20020300 	.word	0x20020300
   12208:	200226ae 	.word	0x200226ae
   1220c:	200226af 	.word	0x200226af

00012210 <logobj_interface_init>:
   12210:	b5102300 	.word	0xb5102300
   12214:	4a084907 	.word	0x4a084907
   12218:	48094c08 	.word	0x48094c08
   1221c:	60037023 	.word	0x60037023
   12220:	6013700b 	.word	0x6013700b
   12224:	fef2f005 	.word	0xfef2f005
   12228:	bf183000 	.word	0xbf183000
   1222c:	42402001 	.word	0x42402001
   12230:	bf00bd10 	.word	0xbf00bd10
   12234:	200226ae 	.word	0x200226ae
   12238:	200202fc 	.word	0x200202fc
   1223c:	200226af 	.word	0x200226af
   12240:	20020300 	.word	0x20020300

00012244 <logobj_interface_open>:
   12244:	e92d2300 	.word	0xe92d2300
   12248:	286647f0 	.word	0x286647f0
   1224c:	9300b082 	.word	0x9300b082
   12250:	2902d172 	.word	0x2902d172
   12254:	d16f4689 	.word	0xd16f4689
   12258:	2305f240 	.word	0x2305f240
   1225c:	4692429a 	.word	0x4692429a
   12260:	4f48d16a 	.word	0x4f48d16a
   12264:	2d00683d 	.word	0x2d00683d
   12268:	4680d17c 	.word	0x4680d17c
   1226c:	46684a46 	.word	0x46684a46
   12270:	f960f004 	.word	0xf960f004
   12274:	46069b00 	.word	0x46069b00
   12278:	d07d2b00 	.word	0xd07d2b00
   1227c:	22044629 	.word	0x22044629
   12280:	603b4842 	.word	0x603b4842
   12284:	fb08f012 	.word	0xfb08f012
   12288:	46299c00 	.word	0x46299c00
   1228c:	8903e9c4 	.word	0x8903e9c4
   12290:	a014f8c4 	.word	0xa014f8c4
   12294:	f005a801 	.word	0xf005a801
   12298:	2800febf 	.word	0x2800febf
   1229c:	2201d13c 	.word	0x2201d13c
   122a0:	9b012104 	.word	0x9b012104
   122a4:	73584d3a 	.word	0x73584d3a
   122a8:	73d87398 	.word	0x73d87398
   122ac:	72987258 	.word	0x72987258
   122b0:	721972d8 	.word	0x721972d8
   122b4:	731a702a 	.word	0x731a702a
   122b8:	46186822 	.word	0x46186822
   122bc:	0280f442 	.word	0x0280f442
   122c0:	f2476022 	.word	0xf2476022
   122c4:	f0050101 	.word	0xf0050101
   122c8:	bb38febf 	.word	0xbb38febf
   122cc:	0200f44f 	.word	0x0200f44f
   122d0:	33fff04f 	.word	0x33fff04f
   122d4:	46304611 	.word	0x46304611
   122d8:	f9d0f004 	.word	0xf9d0f004
   122dc:	b3104604 	.word	0xb3104604
   122e0:	2e009a00 	.word	0x2e009a00
   122e4:	f4436813 	.word	0xf4436813
   122e8:	60133300 	.word	0x60133300
   122ec:	68139a00 	.word	0x68139a00
   122f0:	0380f423 	.word	0x0380f423
   122f4:	9a006013 	.word	0x9a006013
   122f8:	f4236813 	.word	0xf4236813
   122fc:	60130300 	.word	0x60130300
   12300:	2300da36 	.word	0x2300da36
   12304:	603b4620 	.word	0x603b4620
   12308:	36fff04f 	.word	0x36fff04f
   1230c:	ff28f7fe 	.word	0xff28f7fe
   12310:	b0024630 	.word	0xb0024630
   12314:	87f0e8bd 	.word	0x87f0e8bd
   12318:	e7e1240c 	.word	0xe7e1240c
   1231c:	f0059801 	.word	0xf0059801
   12320:	2405fea9 	.word	0x2405fea9
   12324:	4630e7dc 	.word	0x4630e7dc
   12328:	fa14f004 	.word	0xfa14f004
   1232c:	6844b150 	.word	0x6844b150
   12330:	2300b144 	.word	0x2300b144
   12334:	e7d36043 	.word	0xe7d36043
   12338:	f7fe2016 	.word	0xf7fe2016
   1233c:	f04fff11 	.word	0xf04fff11
   12340:	e7e536ff 	.word	0xe7e536ff
   12344:	68139a00 	.word	0x68139a00
   12348:	3300f443 	.word	0x3300f443
   1234c:	9a006013 	.word	0x9a006013
   12350:	f4236813 	.word	0xf4236813
   12354:	60130380 	.word	0x60130380
   12358:	68139a00 	.word	0x68139a00
   1235c:	0300f423 	.word	0x0300f423
   12360:	e7d56013 	.word	0xe7d56013
   12364:	f7fe2001 	.word	0xf7fe2001
   12368:	f04ffefb 	.word	0xf04ffefb
   1236c:	e7cf36ff 	.word	0xe7cf36ff
   12370:	f0044630 	.word	0xf0044630
   12374:	e7c4f935 	.word	0xe7c4f935
   12378:	f7fe2018 	.word	0xf7fe2018
   1237c:	f04ffef1 	.word	0xf04ffef1
   12380:	e7c536ff 	.word	0xe7c536ff
   12384:	20020300 	.word	0x20020300
   12388:	00011d31 	.word	0x00011d31
   1238c:	200202fc 	.word	0x200202fc
   12390:	200226ae 	.word	0x200226ae

00012394 <logobj_interface_read>:
   12394:	43f0e92d 	.word	0x43f0e92d
   12398:	2900b085 	.word	0x2900b085
   1239c:	2a00d05e 	.word	0x2a00d05e
   123a0:	dd5b4616 	.word	0xdd5b4616
   123a4:	4680461f 	.word	0x4680461f
   123a8:	f004460d 	.word	0xf004460d
   123ac:	4604f9d3 	.word	0x4604f9d3
   123b0:	d0592800 	.word	0xd0592800
   123b4:	07ba69c0 	.word	0x07ba69c0
   123b8:	68db6803 	.word	0x68db6803
   123bc:	4798d524 	.word	0x4798d524
   123c0:	d03b3001 	.word	0xd03b3001
   123c4:	69e06823 	.word	0x69e06823
   123c8:	3380f413 	.word	0x3380f413
   123cc:	2100d038 	.word	0x2100d038
   123d0:	463a6823 	.word	0x463a6823
   123d4:	3380f423 	.word	0x3380f423
   123d8:	e9cd6023 	.word	0xe9cd6023
   123dc:	e9cd1102 	.word	0xe9cd1102
   123e0:	68035600 	.word	0x68035600
   123e4:	689b4669 	.word	0x689b4669
   123e8:	46054798 	.word	0x46054798
   123ec:	680369e0 	.word	0x680369e0
   123f0:	479868db 	.word	0x479868db
   123f4:	d0033001 	.word	0xd0033001
   123f8:	f4436823 	.word	0xf4436823
   123fc:	60233380 	.word	0x60233380
   12400:	b0054628 	.word	0xb0054628
   12404:	83f0e8bd 	.word	0x83f0e8bd
   12408:	f0126822 	.word	0xf0126822
   1240c:	d1d65980 	.word	0xd1d65980
   12410:	1c434798 	.word	0x1c434798
   12414:	f44fd1d6 	.word	0xf44fd1d6
   12418:	6a233280 	.word	0x6a233280
   1241c:	2b004611 	.word	0x2b004611
   12420:	4603bf08 	.word	0x4603bf08
   12424:	f0044640 	.word	0xf0044640
   12428:	b158f929 	.word	0xb158f929
   1242c:	35fff04f 	.word	0x35fff04f
   12430:	fe96f7fe 	.word	0xfe96f7fe
   12434:	b0054628 	.word	0xb0054628
   12438:	83f0e8bd 	.word	0x83f0e8bd
   1243c:	e7f52023 	.word	0xe7f52023
   12440:	e7d4461d 	.word	0xe7d4461d
   12444:	f0044640 	.word	0xf0044640
   12448:	4603f985 	.word	0x4603f985
   1244c:	d0b92800 	.word	0xd0b92800
   12450:	28006840 	.word	0x28006840
   12454:	f8c3d0b6 	.word	0xf8c3d0b6
   12458:	e7e79004 	.word	0xe7e79004
   1245c:	f7fe2016 	.word	0xf7fe2016
   12460:	f04ffe7f 	.word	0xf04ffe7f
   12464:	e7cb35ff 	.word	0xe7cb35ff
   12468:	f7fe2009 	.word	0xf7fe2009
   1246c:	f04ffe79 	.word	0xf04ffe79
   12470:	e7c535ff 	.word	0xe7c535ff

00012474 <logobj_interface_write>:
   12474:	41f0e92d 	.word	0x41f0e92d
   12478:	2900b082 	.word	0x2900b082
   1247c:	2a04d05b 	.word	0x2a04d05b
   12480:	461ed159 	.word	0x461ed159
   12484:	460d4607 	.word	0x460d4607
   12488:	f964f004 	.word	0xf964f004
   1248c:	28004604 	.word	0x28004604
   12490:	07b0d067 	.word	0x07b0d067
   12494:	6823d526 	.word	0x6823d526
   12498:	d55e039b 	.word	0xd55e039b
   1249c:	68232600 	.word	0x68232600
   124a0:	f4232100 	.word	0xf4232100
   124a4:	60233300 	.word	0x60233300
   124a8:	f8d5a801 	.word	0xf8d5a801
   124ac:	f0058000 	.word	0xf0058000
   124b0:	b9f8fdb3 	.word	0xb9f8fdb3
   124b4:	9b012504 	.word	0x9b012504
   124b8:	0103f247 	.word	0x0103f247
   124bc:	800cf8c3 	.word	0x800cf8c3
   124c0:	72987258 	.word	0x72987258
   124c4:	721d72d8 	.word	0x721d72d8
   124c8:	f0054618 	.word	0xf0054618
   124cc:	4680fdbd 	.word	0x4680fdbd
   124d0:	b9cebb40 	.word	0xb9cebb40
   124d4:	68234628 	.word	0x68234628
   124d8:	3300f443 	.word	0x3300f443
   124dc:	b0026023 	.word	0xb0026023
   124e0:	81f0e8bd 	.word	0x81f0e8bd
   124e4:	00d96823 	.word	0x00d96823
   124e8:	6823d4d5 	.word	0x6823d4d5
   124ec:	d536039a 	.word	0xd536039a
   124f0:	e7d42601 	.word	0xe7d42601
   124f4:	6823200c 	.word	0x6823200c
   124f8:	3300f443 	.word	0x3300f443
   124fc:	f7fe6023 	.word	0xf7fe6023
   12500:	f04ffe2f 	.word	0xf04ffe2f
   12504:	e7ea30ff 	.word	0xe7ea30ff
   12508:	3280f44f 	.word	0x3280f44f
   1250c:	33fff04f 	.word	0x33fff04f
   12510:	46384611 	.word	0x46384611
   12514:	f8b2f004 	.word	0xf8b2f004
   12518:	6823b198 	.word	0x6823b198
   1251c:	3300f443 	.word	0x3300f443
   12520:	e7ec6023 	.word	0xe7ec6023
   12524:	f0059801 	.word	0xf0059801
   12528:	6823fda5 	.word	0x6823fda5
   1252c:	f4432005 	.word	0xf4432005
   12530:	60233300 	.word	0x60233300
   12534:	2016e7e3 	.word	0x2016e7e3
   12538:	fe12f7fe 	.word	0xfe12f7fe
   1253c:	30fff04f 	.word	0x30fff04f
   12540:	4638e7cd 	.word	0x4638e7cd
   12544:	f906f004 	.word	0xf906f004
   12548:	28004603 	.word	0x28004603
   1254c:	6840d0c2 	.word	0x6840d0c2
   12550:	d0bf2800 	.word	0xd0bf2800
   12554:	8004f8c3 	.word	0x8004f8c3
   12558:	2073e7df 	.word	0x2073e7df
   1255c:	2009e7cf 	.word	0x2009e7cf
   12560:	2009e7cd 	.word	0x2009e7cd
   12564:	fdfcf7fe 	.word	0xfdfcf7fe
   12568:	30fff04f 	.word	0x30fff04f
   1256c:	bf00e7b7 	.word	0xbf00e7b7

00012570 <logobj_interface_setopt>:
   12570:	2901b5f0 	.word	0x2901b5f0
   12574:	d068b085 	.word	0xd068b085
   12578:	f240461e 	.word	0xf240461e
   1257c:	42992305 	.word	0x42992305
   12580:	8095f040 	.word	0x8095f040
   12584:	46154607 	.word	0x46154607
   12588:	f8e4f004 	.word	0xf8e4f004
   1258c:	28004604 	.word	0x28004604
   12590:	80b2f000 	.word	0x80b2f000
   12594:	d0192d01 	.word	0xd0192d01
   12598:	d0102d02 	.word	0xd0102d02
   1259c:	6803252a 	.word	0x6803252a
   125a0:	0380f423 	.word	0x0380f423
   125a4:	68236023 	.word	0x68236023
   125a8:	f4234628 	.word	0xf4234628
   125ac:	60230300 	.word	0x60230300
   125b0:	fdd6f7fe 	.word	0xfdd6f7fe
   125b4:	35fff04f 	.word	0x35fff04f
   125b8:	b0054628 	.word	0xb0054628
   125bc:	b116bdf0 	.word	0xb116bdf0
   125c0:	2b019b0a 	.word	0x2b019b0a
   125c4:	6823d049 	.word	0x6823d049
   125c8:	e7e92516 	.word	0xe7e92516
   125cc:	d0fa2e00 	.word	0xd0fa2e00
   125d0:	2b049b0a 	.word	0x2b049b0a
   125d4:	2100d1f7 	.word	0x2100d1f7
   125d8:	f005a803 	.word	0xf005a803
   125dc:	4605fd1d 	.word	0x4605fd1d
   125e0:	d16a2800 	.word	0xd16a2800
   125e4:	22089803 	.word	0x22089803
   125e8:	300c4629 	.word	0x300c4629
   125ec:	f954f012 	.word	0xf954f012
   125f0:	46319803 	.word	0x46319803
   125f4:	300c9a0a 	.word	0x300c9a0a
   125f8:	f943f012 	.word	0xf943f012
   125fc:	98032308 	.word	0x98032308
   12600:	0102f247 	.word	0x0102f247
   12604:	72457203 	.word	0x72457203
   12608:	72c57285 	.word	0x72c57285
   1260c:	f4436823 	.word	0xf4436823
   12610:	60230380 	.word	0x60230380
   12614:	fd18f005 	.word	0xfd18f005
   12618:	d1512800 	.word	0xd1512800
   1261c:	0200f44f 	.word	0x0200f44f
   12620:	33fff04f 	.word	0x33fff04f
   12624:	46384611 	.word	0x46384611
   12628:	f828f004 	.word	0xf828f004
   1262c:	28004605 	.word	0x28004605
   12630:	4638d13b 	.word	0x4638d13b
   12634:	f88ef004 	.word	0xf88ef004
   12638:	d04f2800 	.word	0xd04f2800
   1263c:	2b006843 	.word	0x2b006843
   12640:	2200d04c 	.word	0x2200d04c
   12644:	6042461d 	.word	0x6042461d
   12648:	9c0ae02f 	.word	0x9c0ae02f
   1264c:	f0049400 	.word	0xf0049400
   12650:	4605f8a9 	.word	0x4605f8a9
   12654:	b0054628 	.word	0xb0054628
   12658:	2100bdf0 	.word	0x2100bdf0
   1265c:	7835a803 	.word	0x7835a803
   12660:	fcdaf005 	.word	0xfcdaf005
   12664:	2d01bb48 	.word	0x2d01bb48
   12668:	4b26bf08 	.word	0x4b26bf08
   1266c:	0204f04f 	.word	0x0204f04f
   12670:	701dbf08 	.word	0x701dbf08
   12674:	98032300 	.word	0x98032300
   12678:	0101f247 	.word	0x0101f247
   1267c:	60c57243 	.word	0x60c57243
   12680:	72c37283 	.word	0x72c37283
   12684:	68237202 	.word	0x68237202
   12688:	0380f443 	.word	0x0380f443
   1268c:	f0056023 	.word	0xf0056023
   12690:	4606fcdb 	.word	0x4606fcdb
   12694:	f44fb9a0 	.word	0xf44fb9a0
   12698:	f04f0200 	.word	0xf04f0200
   1269c:	461133ff 	.word	0x461133ff
   126a0:	f0034638 	.word	0xf0034638
   126a4:	4605ffeb 	.word	0x4605ffeb
   126a8:	6823b180 	.word	0x6823b180
   126ac:	202ae778 	.word	0x202ae778
   126b0:	fd56f7fe 	.word	0xfd56f7fe
   126b4:	35fff04f 	.word	0x35fff04f
   126b8:	6823e77e 	.word	0x6823e77e
   126bc:	e76f250c 	.word	0xe76f250c
   126c0:	f0059803 	.word	0xf0059803
   126c4:	2505fcd7 	.word	0x2505fcd7
   126c8:	e7696823 	.word	0xe7696823
   126cc:	f0044638 	.word	0xf0044638
   126d0:	b140f841 	.word	0xb140f841
   126d4:	b1356845 	.word	0xb1356845
   126d8:	e7e66046 	.word	0xe7e66046
   126dc:	22044631 	.word	0x22044631
   126e0:	f0124809 	.word	0xf0124809
   126e4:	6823f8ce 	.word	0x6823f8ce
   126e8:	0380f423 	.word	0x0380f423
   126ec:	68236023 	.word	0x68236023
   126f0:	0300f423 	.word	0x0300f423
   126f4:	e75f6023 	.word	0xe75f6023
   126f8:	f7fe2009 	.word	0xf7fe2009
   126fc:	f04ffd31 	.word	0xf04ffd31
   12700:	e75935ff 	.word	0xe75935ff
   12704:	200226ae 	.word	0x200226ae
   12708:	200202fc 	.word	0x200202fc

0001270c <logobj_interface_getopt>:
   1270c:	2901b5f0 	.word	0x2901b5f0
   12710:	9e08b083 	.word	0x9e08b083
   12714:	461fd030 	.word	0x461fd030
   12718:	2305f240 	.word	0x2305f240
   1271c:	d1344299 	.word	0xd1344299
   12720:	f0044615 	.word	0xf0044615
   12724:	2800f817 	.word	0x2800f817
   12728:	2d01d037 	.word	0x2d01d037
   1272c:	2d02d015 	.word	0x2d02d015
   12730:	b387d10b 	.word	0xb387d10b
   12734:	b3736833 	.word	0xb3736833
   12738:	22012300 	.word	0x22012300
   1273c:	491a4618 	.word	0x491a4618
   12740:	70397809 	.word	0x70397809
   12744:	b0036032 	.word	0xb0036032
   12748:	2009bdf0 	.word	0x2009bdf0
   1274c:	fd08f7fe 	.word	0xfd08f7fe
   12750:	33fff04f 	.word	0x33fff04f
   12754:	b0034618 	.word	0xb0034618
   12758:	b1e7bdf0 	.word	0xb1e7bdf0
   1275c:	2b036833 	.word	0x2b036833
   12760:	4638d919 	.word	0x4638d919
   12764:	49112204 	.word	0x49112204
   12768:	f88bf012 	.word	0xf88bf012
   1276c:	22042300 	.word	0x22042300
   12770:	60324618 	.word	0x60324618
   12774:	bdf0b003 	.word	0xbdf0b003
   12778:	f0049600 	.word	0xf0049600
   1277c:	4603f849 	.word	0x4603f849
   12780:	d1e32800 	.word	0xd1e32800
   12784:	b0034618 	.word	0xb0034618
   12788:	202abdf0 	.word	0x202abdf0
   1278c:	fce8f7fe 	.word	0xfce8f7fe
   12790:	33fff04f 	.word	0x33fff04f
   12794:	2016e7de 	.word	0x2016e7de
   12798:	2009e7d8 	.word	0x2009e7d8
   1279c:	fce0f7fe 	.word	0xfce0f7fe
   127a0:	33fff04f 	.word	0x33fff04f
   127a4:	bf00e7d6 	.word	0xbf00e7d6
   127a8:	200226af 	.word	0x200226af
   127ac:	200202fc 	.word	0x200202fc

000127b0 <logobj_interface_close>:
   127b0:	4604b510 	.word	0x4604b510
   127b4:	ffcef003 	.word	0xffcef003
   127b8:	4620b138 	.word	0x4620b138
   127bc:	ff10f003 	.word	0xff10f003
   127c0:	4a052300 	.word	0x4a052300
   127c4:	60134618 	.word	0x60134618
   127c8:	2009bd10 	.word	0x2009bd10
   127cc:	fcc8f7fe 	.word	0xfcc8f7fe
   127d0:	30fff04f 	.word	0x30fff04f
   127d4:	bf00bd10 	.word	0xbf00bd10
   127d8:	20020300 	.word	0x20020300

000127dc <transport_reset>:
   127dc:	47702000 	.word	0x47702000

000127e0 <transport_data_free>:
   127e0:	e9d34b0b 	.word	0xe9d34b0b
   127e4:	44132300 	.word	0x44132300
   127e8:	d20d4298 	.word	0xd20d4298
   127ec:	d80b4282 	.word	0xd80b4282
   127f0:	4604b510 	.word	0x4604b510
   127f4:	feecf005 	.word	0xfeecf005
   127f8:	4a06b140 	.word	0x4a06b140
   127fc:	60026084 	.word	0x60026084
   12800:	4010e8bd 	.word	0x4010e8bd
   12804:	be2cf005 	.word	0xbe2cf005
   12808:	b9eef00b 	.word	0xb9eef00b
   1280c:	bf00bd10 	.word	0xbf00bd10
   12810:	20020304 	.word	0x20020304
   12814:	00020001 	.word	0x00020001

00012818 <rpc_transport_ipc_init>:
   12818:	d02b2800 	.word	0xd02b2800
   1281c:	b089b530 	.word	0xb089b530
   12820:	4669aa01 	.word	0x4669aa01
   12824:	f0054604 	.word	0xf0054604
   12828:	4603fd31 	.word	0x4603fd31
   1282c:	4a13b140 	.word	0x4a13b140
   12830:	0028f104 	.word	0x0028f104
   12834:	e882c803 	.word	0xe882c803
   12838:	46180003 	.word	0x46180003
   1283c:	bd30b009 	.word	0xbd30b009
   12840:	1200e9dd 	.word	0x1200e9dd
   12844:	f0004620 	.word	0xf0004620
   12848:	4603f9ab 	.word	0x4603f9ab
   1284c:	d1ee2800 	.word	0xd1ee2800
   12850:	490c4b0b 	.word	0x490c4b0b
   12854:	4a0d480c 	.word	0x4a0d480c
   12858:	4d0d9303 	.word	0x4d0d9303
   1285c:	91044b0d 	.word	0x91044b0d
   12860:	490d9005 	.word	0x490d9005
   12864:	9307a802 	.word	0x9307a802
   12868:	92029506 	.word	0x92029506
   1286c:	fa3af00a 	.word	0xfa3af00a
   12870:	e7dc4603 	.word	0xe7dc4603
   12874:	4618230e 	.word	0x4618230e
   12878:	bf004770 	.word	0xbf004770
   1287c:	20020304 	.word	0x20020304
   12880:	00018561 	.word	0x00018561
   12884:	00018631 	.word	0x00018631
   12888:	000131bd 	.word	0x000131bd
   1288c:	00018461 	.word	0x00018461
   12890:	000127e1 	.word	0x000127e1
   12894:	000127dd 	.word	0x000127dd
   12898:	2002030c 	.word	0x2002030c

0001289c <rpc_transport_rx_handle>:
   1289c:	b508b160 	.word	0xb508b160
   128a0:	b2db6843 	.word	0xb2db6843
   128a4:	d00e2b02 	.word	0xd00e2b02
   128a8:	0c1b6803 	.word	0x0c1b6803
   128ac:	d0052b02 	.word	0xd0052b02
   128b0:	d00e2b04 	.word	0xd00e2b04
   128b4:	bd082000 	.word	0xbd082000
   128b8:	47702000 	.word	0x47702000
   128bc:	f00b6880 	.word	0xf00b6880
   128c0:	2000f993 	.word	0x2000f993
   128c4:	4601bd08 	.word	0x4601bd08
   128c8:	4008e8bd 	.word	0x4008e8bd
   128cc:	f00a4803 	.word	0xf00a4803
   128d0:	4802b8fb 	.word	0x4802b8fb
   128d4:	fa66f00a 	.word	0xfa66f00a
   128d8:	bd082000 	.word	0xbd082000
   128dc:	2002030c 	.word	0x2002030c
   128e0:	bf004770 	.word	0xbf004770

000128e4 <rpc_transport_ipc_fault_handler>:
   128e4:	b916f000 	.word	0xb916f000

000128e8 <nrf_socket>:
   128e8:	4604b570 	.word	0x4604b570
   128ec:	4616460d 	.word	0x4616460d
   128f0:	f8bef007 	.word	0xf8bef007
   128f4:	6803b130 	.word	0x6803b130
   128f8:	46294632 	.word	0x46294632
   128fc:	e8bd4620 	.word	0xe8bd4620
   12900:	47184070 	.word	0x47184070
   12904:	30fff04f 	.word	0x30fff04f
   12908:	bf00bd70 	.word	0xbf00bd70

0001290c <nrf_close>:
   1290c:	4604b510 	.word	0x4604b510
   12910:	f902f007 	.word	0xf902f007
   12914:	6843b120 	.word	0x6843b120
   12918:	e8bd4620 	.word	0xe8bd4620
   1291c:	47184010 	.word	0x47184010
   12920:	30fff04f 	.word	0x30fff04f
   12924:	bf00bd10 	.word	0xbf00bd10

00012928 <nrf_sendto>:
   12928:	47f0e92d 	.word	0x47f0e92d
   1292c:	e9dd460d 	.word	0xe9dd460d
   12930:	46168908 	.word	0x46168908
   12934:	4604461f 	.word	0x4604461f
   12938:	f8eef007 	.word	0xf8eef007
   1293c:	e9cdb158 	.word	0xe9cdb158
   12940:	f8d08908 	.word	0xf8d08908
   12944:	463be008 	.word	0x463be008
   12948:	46294632 	.word	0x46294632
   1294c:	46f44620 	.word	0x46f44620
   12950:	47f0e8bd 	.word	0x47f0e8bd
   12954:	f04f4760 	.word	0xf04f4760
   12958:	e8bd30ff 	.word	0xe8bd30ff
   1295c:	bf0087f0 	.word	0xbf0087f0

00012960 <nrf_send>:
   12960:	41f0e92d 	.word	0x41f0e92d
   12964:	460eb082 	.word	0x460eb082
   12968:	46984617 	.word	0x46984617
   1296c:	f0074605 	.word	0xf0074605
   12970:	b160f8d3 	.word	0xb160f8d3
   12974:	20004604 	.word	0x20004604
   12978:	0000e9cd 	.word	0x0000e9cd
   1297c:	463a4643 	.word	0x463a4643
   12980:	46284631 	.word	0x46284631
   12984:	47a068a4 	.word	0x47a068a4
   12988:	e8bdb002 	.word	0xe8bdb002
   1298c:	f04f81f0 	.word	0xf04f81f0
   12990:	e7f930ff 	.word	0xe7f930ff

00012994 <nrf_recvfrom>:
   12994:	47f0e92d 	.word	0x47f0e92d
   12998:	e9dd460d 	.word	0xe9dd460d
   1299c:	46168908 	.word	0x46168908
   129a0:	4604461f 	.word	0x4604461f
   129a4:	f8b8f007 	.word	0xf8b8f007
   129a8:	e9cdb158 	.word	0xe9cdb158
   129ac:	f8d08908 	.word	0xf8d08908
   129b0:	463be00c 	.word	0x463be00c
   129b4:	46294632 	.word	0x46294632
   129b8:	46f44620 	.word	0x46f44620
   129bc:	47f0e8bd 	.word	0x47f0e8bd
   129c0:	f04f4760 	.word	0xf04f4760
   129c4:	e8bd30ff 	.word	0xe8bd30ff
   129c8:	bf0087f0 	.word	0xbf0087f0

000129cc <nrf_recv>:
   129cc:	41f0e92d 	.word	0x41f0e92d
   129d0:	460eb082 	.word	0x460eb082
   129d4:	46984617 	.word	0x46984617
   129d8:	f0074605 	.word	0xf0074605
   129dc:	b160f89d 	.word	0xb160f89d
   129e0:	20004604 	.word	0x20004604
   129e4:	0000e9cd 	.word	0x0000e9cd
   129e8:	463a4643 	.word	0x463a4643
   129ec:	46284631 	.word	0x46284631
   129f0:	47a068e4 	.word	0x47a068e4
   129f4:	e8bdb002 	.word	0xe8bdb002
   129f8:	f04f81f0 	.word	0xf04f81f0
   129fc:	e7f930ff 	.word	0xe7f930ff

00012a00 <nrf_connect>:
   12a00:	460db570 	.word	0x460db570
   12a04:	46044616 	.word	0x46044616
   12a08:	f886f007 	.word	0xf886f007
   12a0c:	6943b130 	.word	0x6943b130
   12a10:	46294632 	.word	0x46294632
   12a14:	e8bd4620 	.word	0xe8bd4620
   12a18:	47184070 	.word	0x47184070
   12a1c:	30fff04f 	.word	0x30fff04f
   12a20:	bf00bd70 	.word	0xbf00bd70

00012a24 <nrf_listen>:
   12a24:	460db570 	.word	0x460db570
   12a28:	f0074604 	.word	0xf0074604
   12a2c:	b128f875 	.word	0xb128f875
   12a30:	46296983 	.word	0x46296983
   12a34:	e8bd4620 	.word	0xe8bd4620
   12a38:	47184070 	.word	0x47184070
   12a3c:	30fff04f 	.word	0x30fff04f
   12a40:	bf00bd70 	.word	0xbf00bd70

00012a44 <nrf_accept>:
   12a44:	41f0e92d 	.word	0x41f0e92d
   12a48:	4616460d 	.word	0x4616460d
   12a4c:	f0074604 	.word	0xf0074604
   12a50:	b140f863 	.word	0xb140f863
   12a54:	463269c7 	.word	0x463269c7
   12a58:	46204629 	.word	0x46204629
   12a5c:	e8bd46bc 	.word	0xe8bd46bc
   12a60:	230041f0 	.word	0x230041f0
   12a64:	f04f4760 	.word	0xf04f4760
   12a68:	e8bd30ff 	.word	0xe8bd30ff
   12a6c:	bf0081f0 	.word	0xbf0081f0

00012a70 <nrf_bind>:
   12a70:	460db570 	.word	0x460db570
   12a74:	46044616 	.word	0x46044616
   12a78:	f84ef007 	.word	0xf84ef007
   12a7c:	6903b130 	.word	0x6903b130
   12a80:	46294632 	.word	0x46294632
   12a84:	e8bd4620 	.word	0xe8bd4620
   12a88:	47184070 	.word	0x47184070
   12a8c:	30fff04f 	.word	0x30fff04f
   12a90:	bf00bd70 	.word	0xbf00bd70

00012a94 <nrf_setsockopt>:
   12a94:	41f0e92d 	.word	0x41f0e92d
   12a98:	8018f8dd 	.word	0x8018f8dd
   12a9c:	4616460d 	.word	0x4616460d
   12aa0:	4604461f 	.word	0x4604461f
   12aa4:	f838f007 	.word	0xf838f007
   12aa8:	f8cdb158 	.word	0xf8cdb158
   12aac:	f8d08018 	.word	0xf8d08018
   12ab0:	463be020 	.word	0x463be020
   12ab4:	46294632 	.word	0x46294632
   12ab8:	46f44620 	.word	0x46f44620
   12abc:	41f0e8bd 	.word	0x41f0e8bd
   12ac0:	f04f4760 	.word	0xf04f4760
   12ac4:	e8bd30ff 	.word	0xe8bd30ff
   12ac8:	bf0081f0 	.word	0xbf0081f0

00012acc <nrf_getsockopt>:
   12acc:	41f0e92d 	.word	0x41f0e92d
   12ad0:	8018f8dd 	.word	0x8018f8dd
   12ad4:	4616460d 	.word	0x4616460d
   12ad8:	4604461f 	.word	0x4604461f
   12adc:	f81cf007 	.word	0xf81cf007
   12ae0:	f8cdb158 	.word	0xf8cdb158
   12ae4:	f8d08018 	.word	0xf8d08018
   12ae8:	463be024 	.word	0x463be024
   12aec:	46294632 	.word	0x46294632
   12af0:	46f44620 	.word	0x46f44620
   12af4:	41f0e8bd 	.word	0x41f0e8bd
   12af8:	f04f4760 	.word	0xf04f4760
   12afc:	e8bd30ff 	.word	0xe8bd30ff
   12b00:	bf0081f0 	.word	0xbf0081f0

00012b04 <nrf_getaddrinfo>:
   12b04:	b8f8f00d 	.word	0xb8f8f00d

00012b08 <nrf_freeaddrinfo>:
   12b08:	b8f8f00d 	.word	0xb8f8f00d

00012b0c <nrf_poll>:
   12b0c:	b8f8f00d 	.word	0xb8f8f00d

00012b10 <nrf_fcntl>:
   12b10:	b950f00d 	.word	0xb950f00d

00012b14 <bsd_platform_error_handler>:
   12b14:	f7fbb508 	.word	0xf7fbb508
   12b18:	bd08fee7 	.word	0xbd08fee7

00012b1c <bsd_init>:
   12b1c:	4c06b510 	.word	0x4c06b510
   12b20:	b92b7823 	.word	0xb92b7823
   12b24:	ff38f006 	.word	0xff38f006
   12b28:	2301b908 	.word	0x2301b908
   12b2c:	bd107023 	.word	0xbd107023
   12b30:	30fff04f 	.word	0x30fff04f
   12b34:	bf00bd10 	.word	0xbf00bd10
   12b38:	200226b0 	.word	0x200226b0

00012b3c <symbol_000fa2a>:
   12b3c:	2300b110 	.word	0x2300b110
   12b40:	3300e9c0 	.word	0x3300e9c0
   12b44:	bf004770 	.word	0xbf004770

00012b48 <symbol_00066b4>:
   12b48:	d0052802 	.word	0xd0052802
   12b4c:	28034b03 	.word	0x28034b03
   12b50:	4618bf0c 	.word	0x4618bf0c
   12b54:	47702000 	.word	0x47702000
   12b58:	47704801 	.word	0x47704801
   12b5c:	00025ca4 	.word	0x00025ca4
   12b60:	00025c74 	.word	0x00025c74

00012b64 <symbol_000194a>:
   12b64:	b159b160 	.word	0xb159b160
   12b68:	6806b570 	.word	0x6806b570
   12b6c:	6a4bb966 	.word	0x6a4bb966
   12b70:	460d4604 	.word	0x460d4604
   12b74:	60604798 	.word	0x60604798
   12b78:	6025b120 	.word	0x6025b120
   12b7c:	bd704630 	.word	0xbd704630
   12b80:	47704802 	.word	0x47704802
   12b84:	bd704802 	.word	0xbd704802
   12b88:	bd704800 	.word	0xbd704800
   12b8c:	ffffc180 	.word	0xffffc180
   12b90:	ffffc080 	.word	0xffffc080

00012b94 <symbol_00005ae>:
   12b94:	6800b110 	.word	0x6800b110
   12b98:	7800b100 	.word	0x7800b100
   12b9c:	bf004770 	.word	0xbf004770

00012ba0 <rpc_transport_ipc_rx_init>:
   12ba0:	f0002800 	.word	0xf0002800
   12ba4:	e92d80ff 	.word	0xe92d80ff
   12ba8:	68054ff0 	.word	0x68054ff0
   12bac:	2d00b095 	.word	0x2d00b095
   12bb0:	80eef000 	.word	0x80eef000
   12bb4:	2b006883 	.word	0x2b006883
   12bb8:	80eaf000 	.word	0x80eaf000
   12bbc:	2f006907 	.word	0x2f006907
   12bc0:	80e6f000 	.word	0x80e6f000
   12bc4:	2c006a84 	.word	0x2c006a84
   12bc8:	80e2f000 	.word	0x80e2f000
   12bcc:	2c1b6844 	.word	0x2c1b6844
   12bd0:	80e3f240 	.word	0x80e3f240
   12bd4:	2c0b68c4 	.word	0x2c0b68c4
   12bd8:	80dff240 	.word	0x80dff240
   12bdc:	e014f8d0 	.word	0xe014f8d0
   12be0:	0f17f1be 	.word	0x0f17f1be
   12be4:	80d9f240 	.word	0x80d9f240
   12be8:	46042600 	.word	0x46042600
   12bec:	e9cd486f 	.word	0xe9cd486f
   12bf0:	f8df1200 	.word	0xf8df1200
   12bf4:	496ea1d8 	.word	0x496ea1d8
   12bf8:	6ba08006 	.word	0x6ba08006
   12bfc:	c1d0f8df 	.word	0xc1d0f8df
   12c00:	81d0f8df 	.word	0x81d0f8df
   12c04:	b1d0f8df 	.word	0xb1d0f8df
   12c08:	91d0f8df 	.word	0x91d0f8df
   12c0c:	600e4672 	.word	0x600e4672
   12c10:	0000f8ca 	.word	0x0000f8ca
   12c14:	46384631 	.word	0x46384631
   12c18:	6000f8cc 	.word	0x6000f8cc
   12c1c:	3000f8cb 	.word	0x3000f8cb
   12c20:	6000f8c8 	.word	0x6000f8c8
   12c24:	6000f8c9 	.word	0x6000f8c9
   12c28:	fe36f011 	.word	0xfe36f011
   12c2c:	463869e3 	.word	0x463869e3
   12c30:	69a3603b 	.word	0x69a3603b
   12c34:	f001607b 	.word	0xf001607b
   12c38:	2201fd45 	.word	0x2201fd45
   12c3c:	0c04f04f 	.word	0x0c04f04f
   12c40:	495d4b5c 	.word	0x495d4b5c
   12c44:	5610f8c3 	.word	0x5610f8c3
   12c48:	20806809 	.word	0x20806809
   12c4c:	495b9104 	.word	0x495b9104
   12c50:	e010f8dd 	.word	0xe010f8dd
   12c54:	6614f8c3 	.word	0x6614f8c3
   12c58:	702e6809 	.word	0x702e6809
   12c5c:	706e9103 	.word	0x706e9103
   12c60:	70aa70ee 	.word	0x70aa70ee
   12c64:	6aa19903 	.word	0x6aa19903
   12c68:	e000f8db 	.word	0xe000f8db
   12c6c:	6ae16069 	.word	0x6ae16069
   12c70:	60a99c01 	.word	0x60a99c01
   12c74:	9c0060ec 	.word	0x9c0060ec
   12c78:	61af4951 	.word	0x61af4951
   12c7c:	e014f8c5 	.word	0xe014f8c5
   12c80:	f8c3612c 	.word	0xf8c3612c
   12c84:	680c2590 	.word	0x680c2590
   12c88:	6192f5a1 	.word	0x6192f5a1
   12c8c:	9c059405 	.word	0x9c059405
   12c90:	c598f8c3 	.word	0xc598f8c3
   12c94:	4498f8d1 	.word	0x4498f8d1
   12c98:	6780f44f 	.word	0x6780f44f
   12c9c:	9c069406 	.word	0x9c069406
   12ca0:	f8c32410 	.word	0xf8c32410
   12ca4:	f8d145a0 	.word	0xf8d145a0
   12ca8:	4d4644a0 	.word	0x4d4644a0
   12cac:	9c079407 	.word	0x9c079407
   12cb0:	f8c32440 	.word	0xf8c32440
   12cb4:	f8d145a8 	.word	0xf8d145a8
   12cb8:	940844a8 	.word	0x940844a8
   12cbc:	f8c39c08 	.word	0xf8c39c08
   12cc0:	f8d105ac 	.word	0xf8d105ac
   12cc4:	900904ac 	.word	0x900904ac
   12cc8:	f8c39809 	.word	0xf8c39809
   12ccc:	68086100 	.word	0x68086100
   12cd0:	980a900a 	.word	0x980a900a
   12cd4:	6108f8c3 	.word	0x6108f8c3
   12cd8:	900b6888 	.word	0x900b6888
   12cdc:	f8c3980b 	.word	0xf8c3980b
   12ce0:	69086110 	.word	0x69086110
   12ce4:	980c900c 	.word	0x980c900c
   12ce8:	6118f8c3 	.word	0x6118f8c3
   12cec:	900d6988 	.word	0x900d6988
   12cf0:	f8c3980d 	.word	0xf8c3980d
   12cf4:	69c8611c 	.word	0x69c8611c
   12cf8:	7101f501 	.word	0x7101f501
   12cfc:	980e900e 	.word	0x980e900e
   12d00:	0304f8d3 	.word	0x0304f8d3
   12d04:	f8c34310 	.word	0xf8c34310
   12d08:	680c0304 	.word	0x680c0304
   12d0c:	940f482e 	.word	0x940f482e
   12d10:	f8d39c0f 	.word	0xf8d39c0f
   12d14:	ea444304 	.word	0xea444304
   12d18:	f8c3040c 	.word	0xf8c3040c
   12d1c:	680c4304 	.word	0x680c4304
   12d20:	9c109410 	.word	0x9c109410
   12d24:	4304f8d3 	.word	0x4304f8d3
   12d28:	0410f044 	.word	0x0410f044
   12d2c:	4304f8c3 	.word	0x4304f8c3
   12d30:	9411680c 	.word	0x9411680c
   12d34:	f8d39c11 	.word	0xf8d39c11
   12d38:	f0444304 	.word	0xf0444304
   12d3c:	f8c30440 	.word	0xf8c30440
   12d40:	680c4304 	.word	0x680c4304
   12d44:	9c129412 	.word	0x9c129412
   12d48:	4304f8d3 	.word	0x4304f8d3
   12d4c:	0480f044 	.word	0x0480f044
   12d50:	4304f8c3 	.word	0x4304f8c3
   12d54:	3000f8da 	.word	0x3000f8da
   12d58:	015b6809 	.word	0x015b6809
   12d5c:	b2db9113 	.word	0xb2db9113
   12d60:	f8c89913 	.word	0xf8c89913
   12d64:	f8802000 	.word	0xf8802000
   12d68:	f8c0332a 	.word	0xf8c0332a
   12d6c:	60477184 	.word	0x60477184
   12d70:	f8c59602 	.word	0xf8c59602
   12d74:	f8d56610 	.word	0xf8d56610
   12d78:	93023610 	.word	0x93023610
   12d7c:	f8d89b02 	.word	0xf8d89b02
   12d80:	2b013000 	.word	0x2b013000
   12d84:	f8d9d0fb 	.word	0xf8d9d0fb
   12d88:	b0150000 	.word	0xb0150000
   12d8c:	8ff0e8bd 	.word	0x8ff0e8bd
   12d90:	000ef24c 	.word	0x000ef24c
   12d94:	e8bdb015 	.word	0xe8bdb015
   12d98:	f24c8ff0 	.word	0xf24c8ff0
   12d9c:	b0150009 	.word	0xb0150009
   12da0:	8ff0e8bd 	.word	0x8ff0e8bd
   12da4:	000ef24c 	.word	0x000ef24c
   12da8:	bf004770 	.word	0xbf004770
   12dac:	20022340 	.word	0x20022340
   12db0:	2002031c 	.word	0x2002031c
   12db4:	4002a000 	.word	0x4002a000
   12db8:	4002a610 	.word	0x4002a610
   12dbc:	4002a614 	.word	0x4002a614
   12dc0:	4002a590 	.word	0x4002a590
   12dc4:	40005000 	.word	0x40005000
   12dc8:	e000e100 	.word	0xe000e100
   12dcc:	20020314 	.word	0x20020314
   12dd0:	20020320 	.word	0x20020320
   12dd4:	20020318 	.word	0x20020318
   12dd8:	20020324 	.word	0x20020324
   12ddc:	20020310 	.word	0x20020310

00012de0 <IPC_IRQHandler>:
   12de0:	4ff0e92d 	.word	0x4ff0e92d
   12de4:	6580f44f 	.word	0x6580f44f
   12de8:	b0874ca7 	.word	0xb0874ca7
   12dec:	5084f8c4 	.word	0x5084f8c4
   12df0:	8f4ff3bf 	.word	0x8f4ff3bf
   12df4:	8f6ff3bf 	.word	0x8f6ff3bf
   12df8:	f8c44ea4 	.word	0xf8c44ea4
   12dfc:	f8d65184 	.word	0xf8d65184
   12e00:	061f330c 	.word	0x061f330c
   12e04:	80c8f100 	.word	0x80c8f100
   12e08:	f8d34ba0 	.word	0xf8d34ba0
   12e0c:	07d0230c 	.word	0x07d0230c
   12e10:	80d4f100 	.word	0x80d4f100
   12e14:	230cf8d3 	.word	0x230cf8d3
   12e18:	0240f012 	.word	0x0240f012
   12e1c:	80b6f040 	.word	0x80b6f040
   12e20:	130cf8d3 	.word	0x130cf8d3
   12e24:	f1000749 	.word	0xf1000749
   12e28:	f8d380e6 	.word	0xf8d380e6
   12e2c:	06da330c 	.word	0x06da330c
   12e30:	809df140 	.word	0x809df140
   12e34:	4a952100 	.word	0x4a952100
   12e38:	f8c24b95 	.word	0xf8c24b95
   12e3c:	681b1110 	.word	0x681b1110
   12e40:	9b049304 	.word	0x9b049304
   12e44:	8270f8df 	.word	0x8270f8df
   12e48:	f8df4f92 	.word	0xf8df4f92
   12e4c:	f8d89270 	.word	0xf8d89270
   12e50:	f8daa000 	.word	0xf8daa000
   12e54:	29001000 	.word	0x29001000
   12e58:	2200d03f 	.word	0x2200d03f
   12e5c:	e0024614 	.word	0xe0024614
   12e60:	428c3401 	.word	0x428c3401
   12e64:	eb0ad227 	.word	0xeb0ad227
   12e68:	68ab05c4 	.word	0x68ab05c4
   12e6c:	d0f72b00 	.word	0xd0f72b00
   12e70:	b2f6686e 	.word	0xb2f6686e
   12e74:	d1f32e01 	.word	0xd1f32e01
   12e78:	f8b96868 	.word	0xf8b96868
   12e7c:	ebb33000 	.word	0xebb33000
   12e80:	d1ed4f10 	.word	0xd1ed4f10
   12e84:	3301686a 	.word	0x3301686a
   12e88:	02fff022 	.word	0x02fff022
   12e8c:	0202f042 	.word	0x0202f042
   12e90:	68a8606a 	.word	0x68a8606a
   12e94:	3000f8a9 	.word	0x3000f8a9
   12e98:	fd00f7ff 	.word	0xfd00f7ff
   12e9c:	b9284632 	.word	0xb9284632
   12ea0:	f023686b 	.word	0xf023686b
   12ea4:	f04303ff 	.word	0xf04303ff
   12ea8:	606b0303 	.word	0x606b0303
   12eac:	1000f8da 	.word	0x1000f8da
   12eb0:	428c3401 	.word	0x428c3401
   12eb4:	2a00d3d7 	.word	0x2a00d3d7
   12eb8:	b171d1cd 	.word	0xb171d1cd
   12ebc:	eb0a4613 	.word	0xeb0a4613
   12ec0:	689002c3 	.word	0x689002c3
   12ec4:	b1303301 	.word	0xb1303301
   12ec8:	b004f8d2 	.word	0xb004f8d2
   12ecc:	fb8bfa5f 	.word	0xfb8bfa5f
   12ed0:	0f01f1bb 	.word	0x0f01f1bb
   12ed4:	428bd003 	.word	0x428bd003
   12ed8:	f04fd1f1 	.word	0xf04fd1f1
   12edc:	f8d70b00 	.word	0xf8d70b00
   12ee0:	f8daa000 	.word	0xf8daa000
   12ee4:	2a002000 	.word	0x2a002000
   12ee8:	2100d03d 	.word	0x2100d03d
   12eec:	e002460c 	.word	0xe002460c
   12ef0:	42943401 	.word	0x42943401
   12ef4:	eb0ad227 	.word	0xeb0ad227
   12ef8:	68ab05c4 	.word	0x68ab05c4
   12efc:	d0f72b00 	.word	0xd0f72b00
   12f00:	b2f6686e 	.word	0xb2f6686e
   12f04:	d1f32e01 	.word	0xd1f32e01
   12f08:	f8b96868 	.word	0xf8b96868
   12f0c:	ebb33000 	.word	0xebb33000
   12f10:	d1ed4f10 	.word	0xd1ed4f10
   12f14:	3301686a 	.word	0x3301686a
   12f18:	02fff022 	.word	0x02fff022
   12f1c:	0202f042 	.word	0x0202f042
   12f20:	68a8606a 	.word	0x68a8606a
   12f24:	3000f8a9 	.word	0x3000f8a9
   12f28:	fcb8f7ff 	.word	0xfcb8f7ff
   12f2c:	b9284631 	.word	0xb9284631
   12f30:	f022686a 	.word	0xf022686a
   12f34:	f04303ff 	.word	0xf04303ff
   12f38:	606b0303 	.word	0x606b0303
   12f3c:	2000f8da 	.word	0x2000f8da
   12f40:	42943401 	.word	0x42943401
   12f44:	2900d3d7 	.word	0x2900d3d7
   12f48:	b162d1cd 	.word	0xb162d1cd
   12f4c:	eb0a460b 	.word	0xeb0a460b
   12f50:	688801c3 	.word	0x688801c3
   12f54:	b1203301 	.word	0xb1203301
   12f58:	b2c96849 	.word	0xb2c96849
   12f5c:	f43f2901 	.word	0xf43f2901
   12f60:	4293af76 	.word	0x4293af76
   12f64:	f1bbd1f3 	.word	0xf1bbd1f3
   12f68:	f47f0f00 	.word	0xf47f0f00
   12f6c:	f44faf70 	.word	0xf44faf70
   12f70:	4b496180 	.word	0x4b496180
   12f74:	681b4a44 	.word	0x681b4a44
   12f78:	b2db015b 	.word	0xb2db015b
   12f7c:	332af882 	.word	0x332af882
   12f80:	1184f8c2 	.word	0x1184f8c2
   12f84:	b0076051 	.word	0xb0076051
   12f88:	8ff0e8bd 	.word	0x8ff0e8bd
   12f8c:	4b432206 	.word	0x4b432206
   12f90:	b007601a 	.word	0xb007601a
   12f94:	8ff0e8bd 	.word	0x8ff0e8bd
   12f98:	fc7cf001 	.word	0xfc7cf001
   12f9c:	fde8f001 	.word	0xfde8f001
   12fa0:	d1492800 	.word	0xd1492800
   12fa4:	f8c64b3e 	.word	0xf8c64b3e
   12fa8:	681b011c 	.word	0x681b011c
   12fac:	9b019301 	.word	0x9b019301
   12fb0:	f8d34b36 	.word	0xf8d34b36
   12fb4:	07d0230c 	.word	0x07d0230c
   12fb8:	af2cf57f 	.word	0xaf2cf57f
   12fbc:	f2482000 	.word	0xf2482000
   12fc0:	49380202 	.word	0x49380202
   12fc4:	0100f8c3 	.word	0x0100f8c3
   12fc8:	91026809 	.word	0x91026809
   12fcc:	f8d39902 	.word	0xf8d39902
   12fd0:	42933614 	.word	0x42933614
   12fd4:	d81ed040 	.word	0xd81ed040
   12fd8:	d04f2b00 	.word	0xd04f2b00
   12fdc:	d9422b02 	.word	0xd9422b02
   12fe0:	0201f248 	.word	0x0201f248
   12fe4:	d1494293 	.word	0xd1494293
   12fe8:	22072003 	.word	0x22072003
   12fec:	4b2e492b 	.word	0x4b2e492b
   12ff0:	601a6008 	.word	0x601a6008
   12ff4:	4d29e7cd 	.word	0x4d29e7cd
   12ff8:	f8c36829 	.word	0xf8c36829
   12ffc:	29012108 	.word	0x29012108
   13000:	d05d492a 	.word	0xd05d492a
   13004:	9203680a 	.word	0x9203680a
   13008:	f8d39a03 	.word	0xf8d39a03
   1300c:	06db330c 	.word	0x06db330c
   13010:	af10f53f 	.word	0xaf10f53f
   13014:	4a26e716 	.word	0x4a26e716
   13018:	d8144293 	.word	0xd8144293
   1301c:	6f88f1b3 	.word	0x6f88f1b3
   13020:	f248d814 	.word	0xf248d814
   13024:	42930203 	.word	0x42930203
   13028:	2003d128 	.word	0x2003d128
   1302c:	491b2204 	.word	0x491b2204
   13030:	60084b1d 	.word	0x60084b1d
   13034:	e7ac601a 	.word	0xe7ac601a
   13038:	f88423e0 	.word	0xf88423e0
   1303c:	6065332a 	.word	0x6065332a
   13040:	e8bdb007 	.word	0xe8bdb007
   13044:	4a1b8ff0 	.word	0x4a1b8ff0
   13048:	d1174293 	.word	0xd1174293
   1304c:	49132003 	.word	0x49132003
   13050:	60084a15 	.word	0x60084a15
   13054:	e79c6013 	.word	0xe79c6013
   13058:	22062003 	.word	0x22062003
   1305c:	4b12490f 	.word	0x4b12490f
   13060:	601a6008 	.word	0x601a6008
   13064:	2303e795 	.word	0x2303e795
   13068:	490c4618 	.word	0x490c4618
   1306c:	600b4a0e 	.word	0x600b4a0e
   13070:	b0076013 	.word	0xb0076013
   13074:	4ff0e8bd 	.word	0x4ff0e8bd
   13078:	bc34f7ff 	.word	0xbc34f7ff
   1307c:	49072303 	.word	0x49072303
   13080:	600b4a09 	.word	0x600b4a09
   13084:	e7846013 	.word	0xe7846013
   13088:	e000e100 	.word	0xe000e100
   1308c:	4002a000 	.word	0x4002a000
   13090:	4002a110 	.word	0x4002a110
   13094:	2002031c 	.word	0x2002031c
   13098:	20020314 	.word	0x20020314
   1309c:	20020318 	.word	0x20020318
   130a0:	4002a11c 	.word	0x4002a11c
   130a4:	4002a100 	.word	0x4002a100
   130a8:	20020310 	.word	0x20020310
   130ac:	4002a108 	.word	0x4002a108
   130b0:	04400004 	.word	0x04400004
   130b4:	05500001 	.word	0x05500001
   130b8:	20020320 	.word	0x20020320
   130bc:	20022340 	.word	0x20022340
   130c0:	680b4a37 	.word	0x680b4a37
   130c4:	93056812 	.word	0x93056812
   130c8:	48366893 	.word	0x48366893
   130cc:	60034936 	.word	0x60034936
   130d0:	9a056854 	.word	0x9a056854
   130d4:	b16b600c 	.word	0xb16b600c
   130d8:	681bb164 	.word	0x681bb164
   130dc:	d8022b10 	.word	0xd8022b10
   130e0:	2a106822 	.word	0x2a106822
   130e4:	2103d90c 	.word	0x2103d90c
   130e8:	0206f24c 	.word	0x0206f24c
   130ec:	60294b2f 	.word	0x60294b2f
   130f0:	e74e601a 	.word	0xe74e601a
   130f4:	22102103 	.word	0x22102103
   130f8:	60294b2c 	.word	0x60294b2c
   130fc:	e748601a 	.word	0xe748601a
   13100:	80b4f8df 	.word	0x80b4f8df
   13104:	d0422a00 	.word	0xd0422a00
   13108:	f1042300 	.word	0xf1042300
   1310c:	461e0904 	.word	0x461e0904
   13110:	3601e002 	.word	0x3601e002
   13114:	d22a4296 	.word	0xd22a4296
   13118:	19e100f7 	.word	0x19e100f7
   1311c:	28006888 	.word	0x28006888
   13120:	f8d1d0f7 	.word	0xf8d1d0f7
   13124:	fa5fa004 	.word	0xfa5fa004
   13128:	f1bafa8a 	.word	0xf1bafa8a
   1312c:	d1f00f01 	.word	0xd1f00f01
   13130:	c004f8d1 	.word	0xc004f8d1
   13134:	0000f8b8 	.word	0x0000f8b8
   13138:	4f1cebb0 	.word	0x4f1cebb0
   1313c:	684bd1e9 	.word	0x684bd1e9
   13140:	f0231c42 	.word	0xf0231c42
   13144:	f04303ff 	.word	0xf04303ff
   13148:	604b0302 	.word	0x604b0302
   1314c:	f8a86888 	.word	0xf8a86888
   13150:	f7ff2000 	.word	0xf7ff2000
   13154:	4653fba3 	.word	0x4653fba3
   13158:	f859b938 	.word	0xf859b938
   1315c:	f0222007 	.word	0xf0222007
   13160:	f04202ff 	.word	0xf04202ff
   13164:	f8490203 	.word	0xf8490203
   13168:	68222007 	.word	0x68222007
   1316c:	2b00e7d1 	.word	0x2b00e7d1
   13170:	b912d1c8 	.word	0xb912d1c8
   13174:	4293e00b 	.word	0x4293e00b
   13178:	eb04d009 	.word	0xeb04d009
   1317c:	688801c3 	.word	0x688801c3
   13180:	28003301 	.word	0x28003301
   13184:	6849d0f7 	.word	0x6849d0f7
   13188:	2901b2c9 	.word	0x2901b2c9
   1318c:	2002d1f3 	.word	0x2002d1f3
   13190:	f44f4b07 	.word	0xf44f4b07
   13194:	4a076180 	.word	0x4a076180
   13198:	6028681b 	.word	0x6028681b
   1319c:	bf00e6ec 	.word	0xbf00e6ec
   131a0:	20020324 	.word	0x20020324
   131a4:	20020320 	.word	0x20020320
   131a8:	2002031c 	.word	0x2002031c
   131ac:	20020310 	.word	0x20020310
   131b0:	20020314 	.word	0x20020314
   131b4:	e000e100 	.word	0xe000e100
   131b8:	20022340 	.word	0x20022340

000131bc <rpc_transport_msg_free>:
   131bc:	4b18b430 	.word	0x4b18b430
   131c0:	6825681c 	.word	0x6825681c
   131c4:	68a3b16d 	.word	0x68a3b16d
   131c8:	d0274283 	.word	0xd0274283
   131cc:	e0022300 	.word	0xe0022300
   131d0:	42816889 	.word	0x42816889
   131d4:	3301d019 	.word	0x3301d019
   131d8:	42ab00da 	.word	0x42ab00da
   131dc:	0102eb04 	.word	0x0102eb04
   131e0:	4b10d1f6 	.word	0x4b10d1f6
   131e4:	6825681c 	.word	0x6825681c
   131e8:	68a3b16d 	.word	0x68a3b16d
   131ec:	d0154283 	.word	0xd0154283
   131f0:	e0022300 	.word	0xe0022300
   131f4:	42816889 	.word	0x42816889
   131f8:	3301d007 	.word	0x3301d007
   131fc:	429d00da 	.word	0x429d00da
   13200:	0102eb04 	.word	0x0102eb04
   13204:	bc30d1f6 	.word	0xbc30d1f6
   13208:	32044770 	.word	0x32044770
   1320c:	f02358a3 	.word	0xf02358a3
   13210:	f04303ff 	.word	0xf04303ff
   13214:	50a30303 	.word	0x50a30303
   13218:	4770bc30 	.word	0x4770bc30
   1321c:	e7f52204 	.word	0xe7f52204
   13220:	20020320 	.word	0x20020320
   13224:	2002031c 	.word	0x2002031c

00013228 <block_cipher_df>:
   13228:	4ff0e92d 	.word	0x4ff0e92d
   1322c:	7fc0f5b2 	.word	0x7fc0f5b2
   13230:	7d49f5ad 	.word	0x7d49f5ad
   13234:	8119f200 	.word	0x8119f200
   13238:	460c4692 	.word	0x460c4692
   1323c:	72d0f44f 	.word	0x72d0f44f
   13240:	46812100 	.word	0x46812100
   13244:	f011a860 	.word	0xf011a860
   13248:	a81afb27 	.word	0xa81afb27
   1324c:	fcd8f00a 	.word	0xfcd8f00a
   13250:	23302000 	.word	0x23302000
   13254:	ea4fad66 	.word	0xea4fad66
   13258:	f8ad221a 	.word	0xf8ad221a
   1325c:	f88d0190 	.word	0xf88d0190
   13260:	46212192 	.word	0x46212192
   13264:	46284652 	.word	0x46284652
   13268:	3197f88d 	.word	0x3197f88d
   1326c:	a193f88d 	.word	0xa193f88d
   13270:	f011ae06 	.word	0xf011ae06
   13274:	2280fb06 	.word	0x2280fb06
   13278:	f8054633 	.word	0xf8054633
   1327c:	af0e200a 	.word	0xaf0e200a
   13280:	f8031b99 	.word	0xf8031b99
   13284:	429f1b01 	.word	0x429f1b01
   13288:	f44fd1fa 	.word	0xf44fd1fa
   1328c:	46317280 	.word	0x46317280
   13290:	f00aa81a 	.word	0xf00aa81a
   13294:	4683fcc1 	.word	0x4683fcc1
   13298:	f0402800 	.word	0xf0402800
   1329c:	900180c8 	.word	0x900180c8
   132a0:	0a19f10a 	.word	0x0a19f10a
   132a4:	2210ac02 	.word	0x2210ac02
   132a8:	46202100 	.word	0x46202100
   132ac:	faf4f011 	.word	0xfaf4f011
   132b0:	ad6446d0 	.word	0xad6446d0
   132b4:	f8157822 	.word	0xf8157822
   132b8:	f8943c10 	.word	0xf8943c10
   132bc:	f815c001 	.word	0xf815c001
   132c0:	78a01c0f 	.word	0x78a01c0f
   132c4:	f8154053 	.word	0xf8154053
   132c8:	ea8c2c0e 	.word	0xea8c2c0e
   132cc:	40500c01 	.word	0x40500c01
   132d0:	f81578e1 	.word	0xf81578e1
   132d4:	f8942c0d 	.word	0xf8942c0d
   132d8:	4051e004 	.word	0x4051e004
   132dc:	2c0cf815 	.word	0x2c0cf815
   132e0:	ea8e7023 	.word	0xea8e7023
   132e4:	f8150202 	.word	0xf8150202
   132e8:	f8943c0b 	.word	0xf8943c0b
   132ec:	f884e005 	.word	0xf884e005
   132f0:	ea8ec001 	.word	0xea8ec001
   132f4:	f8150303 	.word	0xf8150303
   132f8:	f894cc0a 	.word	0xf894cc0a
   132fc:	70a0e006 	.word	0x70a0e006
   13300:	0c0cea8e 	.word	0x0c0cea8e
   13304:	0c09f815 	.word	0x0c09f815
   13308:	e007f894 	.word	0xe007f894
   1330c:	ea8e70e1 	.word	0xea8e70e1
   13310:	f8150000 	.word	0xf8150000
   13314:	f8941c08 	.word	0xf8941c08
   13318:	7122e008 	.word	0x7122e008
   1331c:	0101ea8e 	.word	0x0101ea8e
   13320:	2c07f815 	.word	0x2c07f815
   13324:	e009f894 	.word	0xe009f894
   13328:	ea8e7163 	.word	0xea8e7163
   1332c:	7aa30202 	.word	0x7aa30202
   13330:	ec06f815 	.word	0xec06f815
   13334:	c006f884 	.word	0xc006f884
   13338:	030eea83 	.word	0x030eea83
   1333c:	722171e0 	.word	0x722171e0
   13340:	72a37262 	.word	0x72a37262
   13344:	f8157ae1 	.word	0xf8157ae1
   13348:	f8943c05 	.word	0xf8943c05
   1334c:	7b60c00c 	.word	0x7b60c00c
   13350:	f815404b 	.word	0xf815404b
   13354:	f8152c04 	.word	0xf8152c04
   13358:	ea8c1c03 	.word	0xea8c1c03
   1335c:	40410202 	.word	0x40410202
   13360:	c00ef894 	.word	0xc00ef894
   13364:	0c02f815 	.word	0x0c02f815
   13368:	e00ff894 	.word	0xe00ff894
   1336c:	0000ea8c 	.word	0x0000ea8c
   13370:	cc01f815 	.word	0xcc01f815
   13374:	ea8e72e3 	.word	0xea8e72e3
   13378:	73220c0c 	.word	0x73220c0c
   1337c:	73a07361 	.word	0x73a07361
   13380:	46224623 	.word	0x46224623
   13384:	a81a2101 	.word	0xa81a2101
   13388:	c00ff884 	.word	0xc00ff884
   1338c:	fbc2f00b 	.word	0xfbc2f00b
   13390:	0f10f1b8 	.word	0x0f10f1b8
   13394:	bf944683 	.word	0xbf944683
   13398:	0808eba8 	.word	0x0808eba8
   1339c:	0810f1a8 	.word	0x0810f1a8
   133a0:	d1452800 	.word	0xd1452800
   133a4:	f1b83510 	.word	0xf1b83510
   133a8:	d1830f00 	.word	0xd1830f00
   133ac:	22109d01 	.word	0x22109d01
   133b0:	19784621 	.word	0x19784621
   133b4:	fa65f011 	.word	0xfa65f011
   133b8:	3183f89d 	.word	0x3183f89d
   133bc:	0210f105 	.word	0x0210f105
   133c0:	2a303301 	.word	0x2a303301
   133c4:	f88d9201 	.word	0xf88d9201
   133c8:	f47f3183 	.word	0xf47f3183
   133cc:	f44faf6c 	.word	0xf44faf6c
   133d0:	46397280 	.word	0x46397280
   133d4:	f00aa81a 	.word	0xf00aa81a
   133d8:	4683fc1f 	.word	0x4683fc1f
   133dc:	464dbb40 	.word	0x464dbb40
   133e0:	0830f109 	.word	0x0830f109
   133e4:	461aab16 	.word	0x461aab16
   133e8:	a81a2101 	.word	0xa81a2101
   133ec:	fb92f00b 	.word	0xfb92f00b
   133f0:	b9e84683 	.word	0xb9e84683
   133f4:	46282210 	.word	0x46282210
   133f8:	4415a916 	.word	0x4415a916
   133fc:	fa41f011 	.word	0xfa41f011
   13400:	d1ef4545 	.word	0xd1ef4545
   13404:	f00aa81a 	.word	0xf00aa81a
   13408:	a860fc01 	.word	0xa860fc01
   1340c:	71d0f44f 	.word	0x71d0f44f
   13410:	fc38f006 	.word	0xfc38f006
   13414:	21304638 	.word	0x21304638
   13418:	fc34f006 	.word	0xfc34f006
   1341c:	21204630 	.word	0x21204630
   13420:	fc30f006 	.word	0xfc30f006
   13424:	21104620 	.word	0x21104620
   13428:	fc2cf006 	.word	0xfc2cf006
   1342c:	ac02e018 	.word	0xac02e018
   13430:	f00aa81a 	.word	0xf00aa81a
   13434:	a860fbeb 	.word	0xa860fbeb
   13438:	71d0f44f 	.word	0x71d0f44f
   1343c:	fc22f006 	.word	0xfc22f006
   13440:	21304638 	.word	0x21304638
   13444:	fc1ef006 	.word	0xfc1ef006
   13448:	21204630 	.word	0x21204630
   1344c:	fc1af006 	.word	0xfc1af006
   13450:	21104620 	.word	0x21104620
   13454:	fc16f006 	.word	0xfc16f006
   13458:	21304648 	.word	0x21304648
   1345c:	fc12f006 	.word	0xfc12f006
   13460:	f50d4658 	.word	0xf50d4658
   13464:	e8bd7d49 	.word	0xe8bd7d49
   13468:	f06f8ff0 	.word	0xf06f8ff0
   1346c:	e7f70b37 	.word	0xe7f70b37

00013470 <symbol_000078b>:
   13470:	72a0f44f 	.word	0x72a0f44f
   13474:	f0112100 	.word	0xf0112100
   13478:	bf00ba0f 	.word	0xbf00ba0f

0001347c <symbol_0001c64>:
   1347c:	b510b158 	.word	0xb510b158
   13480:	30204604 	.word	0x30204604
   13484:	fbc2f00a 	.word	0xfbc2f00a
   13488:	e8bd4620 	.word	0xe8bd4620
   1348c:	f44f4010 	.word	0xf44f4010
   13490:	f00671a0 	.word	0xf00671a0
   13494:	4770bbf7 	.word	0x4770bbf7

00013498 <symbol_000ccf0>:
   13498:	6983b5f0 	.word	0x6983b5f0
   1349c:	f5b3b0ed 	.word	0xf5b3b0ed
   134a0:	f2007fc0 	.word	0xf2007fc0
   134a4:	f5c380e1 	.word	0xf5c380e1
   134a8:	429373c0 	.word	0x429373c0
   134ac:	80dcf0c0 	.word	0x80dcf0c0
   134b0:	46154604 	.word	0x46154604
   134b4:	f44f460e 	.word	0xf44f460e
   134b8:	210072c0 	.word	0x210072c0
   134bc:	f011a80c 	.word	0xf011a80c
   134c0:	a90cf9eb 	.word	0xa90cf9eb
   134c4:	3138f8d4 	.word	0x3138f8d4
   134c8:	f8d469a2 	.word	0xf8d469a2
   134cc:	4798013c 	.word	0x4798013c
   134d0:	f0402800 	.word	0xf0402800
   134d4:	69a780cc 	.word	0x69a780cc
   134d8:	b94db106 	.word	0xb94db106
   134dc:	463aa90c 	.word	0x463aa90c
   134e0:	f7ff4608 	.word	0xf7ff4608
   134e4:	4605fea1 	.word	0x4605fea1
   134e8:	4628b188 	.word	0x4628b188
   134ec:	bdf0b06d 	.word	0xbdf0b06d
   134f0:	462aab0c 	.word	0x462aab0c
   134f4:	463119d8 	.word	0x463119d8
   134f8:	f9c3f011 	.word	0xf9c3f011
   134fc:	a90c442f 	.word	0xa90c442f
   13500:	4608463a 	.word	0x4608463a
   13504:	fe90f7ff 	.word	0xfe90f7ff
   13508:	28004605 	.word	0x28004605
   1350c:	4668d1ed 	.word	0x4668d1ed
   13510:	46292230 	.word	0x46292230
   13514:	f9c0f011 	.word	0xf9c0f011
   13518:	f104462e 	.word	0xf104462e
   1351c:	7be20720 	.word	0x7be20720
   13520:	0306eb0d 	.word	0x0306eb0d
   13524:	b2d23201 	.word	0xb2d23201
   13528:	2a0073e2 	.word	0x2a0073e2
   1352c:	7ba2d14d 	.word	0x7ba2d14d
   13530:	b2d23201 	.word	0xb2d23201
   13534:	2a0073a2 	.word	0x2a0073a2
   13538:	7b62d147 	.word	0x7b62d147
   1353c:	b2d23201 	.word	0xb2d23201
   13540:	2a007362 	.word	0x2a007362
   13544:	7b22d141 	.word	0x7b22d141
   13548:	b2d23201 	.word	0xb2d23201
   1354c:	2a007322 	.word	0x2a007322
   13550:	7ae2d13b 	.word	0x7ae2d13b
   13554:	b2d23201 	.word	0xb2d23201
   13558:	2a0072e2 	.word	0x2a0072e2
   1355c:	7aa2d135 	.word	0x7aa2d135
   13560:	b2d23201 	.word	0xb2d23201
   13564:	2a0072a2 	.word	0x2a0072a2
   13568:	7a62d12f 	.word	0x7a62d12f
   1356c:	b2d23201 	.word	0xb2d23201
   13570:	bb527262 	.word	0xbb527262
   13574:	32017a22 	.word	0x32017a22
   13578:	7222b2d2 	.word	0x7222b2d2
   1357c:	79e2bb2a 	.word	0x79e2bb2a
   13580:	b2d23201 	.word	0xb2d23201
   13584:	bb0271e2 	.word	0xbb0271e2
   13588:	320179a2 	.word	0x320179a2
   1358c:	71a2b2d2 	.word	0x71a2b2d2
   13590:	7962b9da 	.word	0x7962b9da
   13594:	b2d23201 	.word	0xb2d23201
   13598:	b9b27162 	.word	0xb9b27162
   1359c:	32017922 	.word	0x32017922
   135a0:	7122b2d2 	.word	0x7122b2d2
   135a4:	78e2b98a 	.word	0x78e2b98a
   135a8:	b2d23201 	.word	0xb2d23201
   135ac:	b96270e2 	.word	0xb96270e2
   135b0:	320178a2 	.word	0x320178a2
   135b4:	70a2b2d2 	.word	0x70a2b2d2
   135b8:	7862b93a 	.word	0x7862b93a
   135bc:	b2d23201 	.word	0xb2d23201
   135c0:	b9127062 	.word	0xb9127062
   135c4:	32017822 	.word	0x32017822
   135c8:	46227022 	.word	0x46227022
   135cc:	46382101 	.word	0x46382101
   135d0:	faa0f00b 	.word	0xfaa0f00b
   135d4:	28004605 	.word	0x28004605
   135d8:	3610d187 	.word	0x3610d187
   135dc:	d19e2e30 	.word	0xd19e2e30
   135e0:	9b0c9901 	.word	0x9b0c9901
   135e4:	9a0d9800 	.word	0x9a0d9800
   135e8:	404a4058 	.word	0x404a4058
   135ec:	99029b0e 	.word	0x99029b0e
   135f0:	40599000 	.word	0x40599000
   135f4:	9b0f9803 	.word	0x9b0f9803
   135f8:	40439201 	.word	0x40439201
   135fc:	98049a10 	.word	0x98049a10
   13600:	40509102 	.word	0x40509102
   13604:	9a119905 	.word	0x9a119905
   13608:	40519303 	.word	0x40519303
   1360c:	9a069b12 	.word	0x9a069b12
   13610:	405a9004 	.word	0x405a9004
   13614:	9b139807 	.word	0x9b139807
   13618:	40589105 	.word	0x40589105
   1361c:	9b149908 	.word	0x9b149908
   13620:	40599206 	.word	0x40599206
   13624:	9b159a09 	.word	0x9b159a09
   13628:	405a9007 	.word	0x405a9007
   1362c:	9b16980a 	.word	0x9b16980a
   13630:	40439108 	.word	0x40439108
   13634:	2309e9cd 	.word	0x2309e9cd
   13638:	9b179a0b 	.word	0x9b179a0b
   1363c:	40534638 	.word	0x40534638
   13640:	f44f4669 	.word	0xf44f4669
   13644:	930b7280 	.word	0x930b7280
   13648:	fae6f00a 	.word	0xfae6f00a
   1364c:	28004605 	.word	0x28004605
   13650:	af4bf47f 	.word	0xaf4bf47f
   13654:	a9082210 	.word	0xa9082210
   13658:	f0114620 	.word	0xf0114620
   1365c:	2301f912 	.word	0x2301f912
   13660:	61234628 	.word	0x61234628
   13664:	bdf0b06d 	.word	0xbdf0b06d
   13668:	0537f06f 	.word	0x0537f06f
   1366c:	f06fe73d 	.word	0xf06fe73d
   13670:	e73a0533 	.word	0xe73a0533

00013674 <symbol_0001e1e>:
   13674:	41f0e92d 	.word	0x41f0e92d
   13678:	46164604 	.word	0x46164604
   1367c:	b0882220 	.word	0xb0882220
   13680:	460f18a5 	.word	0x460f18a5
   13684:	21004668 	.word	0x21004668
   13688:	f0114698 	.word	0xf0114698
   1368c:	4628f905 	.word	0x4628f905
   13690:	fab6f00a 	.word	0xfab6f00a
   13694:	f2422220 	.word	0xf2422220
   13698:	f8c47310 	.word	0xf8c47310
   1369c:	e9c47138 	.word	0xe9c47138
   136a0:	46282306 	.word	0x46282306
   136a4:	613cf8c4 	.word	0x613cf8c4
   136a8:	f44f4669 	.word	0xf44f4669
   136ac:	f00a7280 	.word	0xf00a7280
   136b0:	b920fab3 	.word	0xb920fab3
   136b4:	46204641 	.word	0x46204641
   136b8:	f7ff9a0e 	.word	0xf7ff9a0e
   136bc:	b008feed 	.word	0xb008feed
   136c0:	81f0e8bd 	.word	0x81f0e8bd

000136c4 <symbol_000268c>:
   136c4:	4ff0e92d 	.word	0x4ff0e92d
   136c8:	6f80f5b2 	.word	0x6f80f5b2
   136cc:	f200b0f9 	.word	0xf200b0f9
   136d0:	46048226 	.word	0x46048226
   136d4:	460f4615 	.word	0x460f4615
   136d8:	46682230 	.word	0x46682230
   136dc:	f0112100 	.word	0xf0112100
   136e0:	6922f8db 	.word	0x6922f8db
   136e4:	429a69e3 	.word	0x429a69e3
   136e8:	6963dc01 	.word	0x6963dc01
   136ec:	69a3b313 	.word	0x69a3b313
   136f0:	7fc0f5b3 	.word	0x7fc0f5b3
   136f4:	8216f200 	.word	0x8216f200
   136f8:	0a60f10d 	.word	0x0a60f10d
   136fc:	72c0f44f 	.word	0x72c0f44f
   13700:	46502100 	.word	0x46502100
   13704:	f8c8f011 	.word	0xf8c8f011
   13708:	f8d44651 	.word	0xf8d44651
   1370c:	69a23138 	.word	0x69a23138
   13710:	013cf8d4 	.word	0x013cf8d4
   13714:	f06f4798 	.word	0xf06f4798
   13718:	b9380933 	.word	0xb9380933
   1371c:	465169a2 	.word	0x465169a2
   13720:	f7ff4650 	.word	0xf7ff4650
   13724:	4681fd81 	.word	0x4681fd81
   13728:	d0772800 	.word	0xd0772800
   1372c:	b0794648 	.word	0xb0794648
   13730:	8ff0e8bd 	.word	0x8ff0e8bd
   13734:	0820f104 	.word	0x0820f104
   13738:	f0002d00 	.word	0xf0002d00
   1373c:	ae0c812b 	.word	0xae0c812b
   13740:	2d10e00e 	.word	0x2d10e00e
   13744:	bf2846a9 	.word	0xbf2846a9
   13748:	0910f04f 	.word	0x0910f04f
   1374c:	46314638 	.word	0x46314638
   13750:	f011464a 	.word	0xf011464a
   13754:	ebb5f896 	.word	0xebb5f896
   13758:	444f0509 	.word	0x444f0509
   1375c:	811af000 	.word	0x811af000
   13760:	33017be3 	.word	0x33017be3
   13764:	73e3b2db 	.word	0x73e3b2db
   13768:	d14d2b00 	.word	0xd14d2b00
   1376c:	33017ba3 	.word	0x33017ba3
   13770:	73a3b2db 	.word	0x73a3b2db
   13774:	d1472b00 	.word	0xd1472b00
   13778:	33017b63 	.word	0x33017b63
   1377c:	7363b2db 	.word	0x7363b2db
   13780:	d1412b00 	.word	0xd1412b00
   13784:	33017b23 	.word	0x33017b23
   13788:	7323b2db 	.word	0x7323b2db
   1378c:	d13b2b00 	.word	0xd13b2b00
   13790:	33017ae3 	.word	0x33017ae3
   13794:	72e3b2db 	.word	0x72e3b2db
   13798:	d1352b00 	.word	0xd1352b00
   1379c:	33017aa3 	.word	0x33017aa3
   137a0:	72a3b2db 	.word	0x72a3b2db
   137a4:	d12f2b00 	.word	0xd12f2b00
   137a8:	33017a63 	.word	0x33017a63
   137ac:	7263b2db 	.word	0x7263b2db
   137b0:	7a23bb53 	.word	0x7a23bb53
   137b4:	b2db3301 	.word	0xb2db3301
   137b8:	bb2b7223 	.word	0xbb2b7223
   137bc:	330179e3 	.word	0x330179e3
   137c0:	71e3b2db 	.word	0x71e3b2db
   137c4:	79a3bb03 	.word	0x79a3bb03
   137c8:	b2db3301 	.word	0xb2db3301
   137cc:	b9db71a3 	.word	0xb9db71a3
   137d0:	33017963 	.word	0x33017963
   137d4:	7163b2db 	.word	0x7163b2db
   137d8:	7923b9b3 	.word	0x7923b9b3
   137dc:	b2db3301 	.word	0xb2db3301
   137e0:	b98b7123 	.word	0xb98b7123
   137e4:	330178e3 	.word	0x330178e3
   137e8:	70e3b2db 	.word	0x70e3b2db
   137ec:	78a3b963 	.word	0x78a3b963
   137f0:	b2db3301 	.word	0xb2db3301
   137f4:	b93b70a3 	.word	0xb93b70a3
   137f8:	33017863 	.word	0x33017863
   137fc:	7063b2db 	.word	0x7063b2db
   13800:	7823b913 	.word	0x7823b913
   13804:	70233301 	.word	0x70233301
   13808:	46224633 	.word	0x46224633
   1380c:	46402101 	.word	0x46402101
   13810:	f980f00b 	.word	0xf980f00b
   13814:	28004681 	.word	0x28004681
   13818:	e787d093 	.word	0xe787d093
   1381c:	4630ae0c 	.word	0x4630ae0c
   13820:	46492230 	.word	0x46492230
   13824:	f838f011 	.word	0xf838f011
   13828:	f10446cb 	.word	0xf10446cb
   1382c:	7be20820 	.word	0x7be20820
   13830:	030beb06 	.word	0x030beb06
   13834:	b2d23201 	.word	0xb2d23201
   13838:	2a0073e2 	.word	0x2a0073e2
   1383c:	7ba2d14d 	.word	0x7ba2d14d
   13840:	b2d23201 	.word	0xb2d23201
   13844:	2a0073a2 	.word	0x2a0073a2
   13848:	7b62d147 	.word	0x7b62d147
   1384c:	b2d23201 	.word	0xb2d23201
   13850:	2a007362 	.word	0x2a007362
   13854:	7b22d141 	.word	0x7b22d141
   13858:	b2d23201 	.word	0xb2d23201
   1385c:	2a007322 	.word	0x2a007322
   13860:	7ae2d13b 	.word	0x7ae2d13b
   13864:	b2d23201 	.word	0xb2d23201
   13868:	2a0072e2 	.word	0x2a0072e2
   1386c:	7aa2d135 	.word	0x7aa2d135
   13870:	b2d23201 	.word	0xb2d23201
   13874:	2a0072a2 	.word	0x2a0072a2
   13878:	7a62d12f 	.word	0x7a62d12f
   1387c:	b2d23201 	.word	0xb2d23201
   13880:	bb527262 	.word	0xbb527262
   13884:	32017a22 	.word	0x32017a22
   13888:	7222b2d2 	.word	0x7222b2d2
   1388c:	79e2bb2a 	.word	0x79e2bb2a
   13890:	b2d23201 	.word	0xb2d23201
   13894:	bb0271e2 	.word	0xbb0271e2
   13898:	320179a2 	.word	0x320179a2
   1389c:	71a2b2d2 	.word	0x71a2b2d2
   138a0:	7962b9da 	.word	0x7962b9da
   138a4:	b2d23201 	.word	0xb2d23201
   138a8:	b9b27162 	.word	0xb9b27162
   138ac:	32017922 	.word	0x32017922
   138b0:	7122b2d2 	.word	0x7122b2d2
   138b4:	78e2b98a 	.word	0x78e2b98a
   138b8:	b2d23201 	.word	0xb2d23201
   138bc:	b96270e2 	.word	0xb96270e2
   138c0:	320178a2 	.word	0x320178a2
   138c4:	70a2b2d2 	.word	0x70a2b2d2
   138c8:	7862b93a 	.word	0x7862b93a
   138cc:	b2d23201 	.word	0xb2d23201
   138d0:	b9127062 	.word	0xb9127062
   138d4:	32017822 	.word	0x32017822
   138d8:	46227022 	.word	0x46227022
   138dc:	46402101 	.word	0x46402101
   138e0:	f918f00b 	.word	0xf918f00b
   138e4:	28004681 	.word	0x28004681
   138e8:	af20f47f 	.word	0xaf20f47f
   138ec:	0b10f10b 	.word	0x0b10f10b
   138f0:	0f30f1bb 	.word	0x0f30f1bb
   138f4:	6870d19b 	.word	0x6870d19b
   138f8:	3000f8da 	.word	0x3000f8da
   138fc:	f8da6831 	.word	0xf8da6831
   13900:	40592004 	.word	0x40592004
   13904:	f8da4042 	.word	0xf8da4042
   13908:	68b03008 	.word	0x68b03008
   1390c:	ea836031 	.word	0xea836031
   13910:	f8da0100 	.word	0xf8da0100
   13914:	68f0300c 	.word	0x68f0300c
   13918:	40586072 	.word	0x40586072
   1391c:	f8da6932 	.word	0xf8da6932
   13920:	60b13010 	.word	0x60b13010
   13924:	f8da4053 	.word	0xf8da4053
   13928:	69721014 	.word	0x69721014
   1392c:	404a60f0 	.word	0x404a60f0
   13930:	f8da69b0 	.word	0xf8da69b0
   13934:	61331018 	.word	0x61331018
   13938:	f8da4048 	.word	0xf8da4048
   1393c:	69f1301c 	.word	0x69f1301c
   13940:	404b6172 	.word	0x404b6172
   13944:	f8da6a32 	.word	0xf8da6a32
   13948:	61b01020 	.word	0x61b01020
   1394c:	6a704051 	.word	0x6a704051
   13950:	2024f8da 	.word	0x2024f8da
   13954:	405061f3 	.word	0x405061f3
   13958:	3028f8da 	.word	0x3028f8da
   1395c:	62316ab2 	.word	0x62316ab2
   13960:	e9c64053 	.word	0xe9c64053
   13964:	6af20309 	.word	0x6af20309
   13968:	302cf8da 	.word	0x302cf8da
   1396c:	40534631 	.word	0x40534631
   13970:	f44f4640 	.word	0xf44f4640
   13974:	62f37280 	.word	0x62f37280
   13978:	f94ef00a 	.word	0xf94ef00a
   1397c:	28004681 	.word	0x28004681
   13980:	aed4f47f 	.word	0xaed4f47f
   13984:	a9142210 	.word	0xa9142210
   13988:	f0104620 	.word	0xf0104620
   1398c:	2301ff7a 	.word	0x2301ff7a
   13990:	e6d16123 	.word	0xe6d16123
   13994:	0a60f10d 	.word	0x0a60f10d
   13998:	22304650 	.word	0x22304650
   1399c:	f0102100 	.word	0xf0102100
   139a0:	2500ff7b 	.word	0x2500ff7b
   139a4:	eb0a7be2 	.word	0xeb0a7be2
   139a8:	32010305 	.word	0x32010305
   139ac:	73e2b2d2 	.word	0x73e2b2d2
   139b0:	d14d2a00 	.word	0xd14d2a00
   139b4:	32017ba2 	.word	0x32017ba2
   139b8:	73a2b2d2 	.word	0x73a2b2d2
   139bc:	d1472a00 	.word	0xd1472a00
   139c0:	32017b62 	.word	0x32017b62
   139c4:	7362b2d2 	.word	0x7362b2d2
   139c8:	d1412a00 	.word	0xd1412a00
   139cc:	32017b22 	.word	0x32017b22
   139d0:	7322b2d2 	.word	0x7322b2d2
   139d4:	d13b2a00 	.word	0xd13b2a00
   139d8:	32017ae2 	.word	0x32017ae2
   139dc:	72e2b2d2 	.word	0x72e2b2d2
   139e0:	d1352a00 	.word	0xd1352a00
   139e4:	32017aa2 	.word	0x32017aa2
   139e8:	72a2b2d2 	.word	0x72a2b2d2
   139ec:	d12f2a00 	.word	0xd12f2a00
   139f0:	32017a62 	.word	0x32017a62
   139f4:	7262b2d2 	.word	0x7262b2d2
   139f8:	7a22bb52 	.word	0x7a22bb52
   139fc:	b2d23201 	.word	0xb2d23201
   13a00:	bb2a7222 	.word	0xbb2a7222
   13a04:	320179e2 	.word	0x320179e2
   13a08:	71e2b2d2 	.word	0x71e2b2d2
   13a0c:	79a2bb02 	.word	0x79a2bb02
   13a10:	b2d23201 	.word	0xb2d23201
   13a14:	b9da71a2 	.word	0xb9da71a2
   13a18:	32017962 	.word	0x32017962
   13a1c:	7162b2d2 	.word	0x7162b2d2
   13a20:	7922b9b2 	.word	0x7922b9b2
   13a24:	b2d23201 	.word	0xb2d23201
   13a28:	b98a7122 	.word	0xb98a7122
   13a2c:	320178e2 	.word	0x320178e2
   13a30:	70e2b2d2 	.word	0x70e2b2d2
   13a34:	78a2b962 	.word	0x78a2b962
   13a38:	b2d23201 	.word	0xb2d23201
   13a3c:	b93a70a2 	.word	0xb93a70a2
   13a40:	32017862 	.word	0x32017862
   13a44:	7062b2d2 	.word	0x7062b2d2
   13a48:	7822b912 	.word	0x7822b912
   13a4c:	70223201 	.word	0x70223201
   13a50:	21014622 	.word	0x21014622
   13a54:	f00b4640 	.word	0xf00b4640
   13a58:	4681f85d 	.word	0x4681f85d
   13a5c:	f47f2800 	.word	0xf47f2800
   13a60:	3510ae65 	.word	0x3510ae65
   13a64:	d19d2d30 	.word	0xd19d2d30
   13a68:	1200e9da 	.word	0x1200e9da
   13a6c:	98019b00 	.word	0x98019b00
   13a70:	40424059 	.word	0x40424059
   13a74:	3008f8da 	.word	0x3008f8da
   13a78:	f8ca9802 	.word	0xf8ca9802
   13a7c:	ea831000 	.word	0xea831000
   13a80:	f8da0100 	.word	0xf8da0100
   13a84:	9803300c 	.word	0x9803300c
   13a88:	2004f8ca 	.word	0x2004f8ca
   13a8c:	9a044058 	.word	0x9a044058
   13a90:	3010f8da 	.word	0x3010f8da
   13a94:	1008f8ca 	.word	0x1008f8ca
   13a98:	99054053 	.word	0x99054053
   13a9c:	2014f8da 	.word	0x2014f8da
   13aa0:	000cf8ca 	.word	0x000cf8ca
   13aa4:	9806404a 	.word	0x9806404a
   13aa8:	1018f8da 	.word	0x1018f8da
   13aac:	3010f8ca 	.word	0x3010f8ca
   13ab0:	9b074048 	.word	0x9b074048
   13ab4:	101cf8da 	.word	0x101cf8da
   13ab8:	2014f8ca 	.word	0x2014f8ca
   13abc:	f8da404b 	.word	0xf8da404b
   13ac0:	99082020 	.word	0x99082020
   13ac4:	0018f8ca 	.word	0x0018f8ca
   13ac8:	f8da4051 	.word	0xf8da4051
   13acc:	9a090024 	.word	0x9a090024
   13ad0:	301cf8ca 	.word	0x301cf8ca
   13ad4:	f8da4050 	.word	0xf8da4050
   13ad8:	9a0a3028 	.word	0x9a0a3028
   13adc:	1020f8ca 	.word	0x1020f8ca
   13ae0:	e9ca4053 	.word	0xe9ca4053
   13ae4:	9a0b0309 	.word	0x9a0b0309
   13ae8:	302cf8da 	.word	0x302cf8da
   13aec:	40534640 	.word	0x40534640
   13af0:	f44f4651 	.word	0xf44f4651
   13af4:	f8ca7280 	.word	0xf8ca7280
   13af8:	f00a302c 	.word	0xf00a302c
   13afc:	4681f88d 	.word	0x4681f88d
   13b00:	f47f2800 	.word	0xf47f2800
   13b04:	2210ae13 	.word	0x2210ae13
   13b08:	4620a920 	.word	0x4620a920
   13b0c:	feb9f010 	.word	0xfeb9f010
   13b10:	69234648 	.word	0x69234648
   13b14:	61233301 	.word	0x61233301
   13b18:	e8bdb079 	.word	0xe8bdb079
   13b1c:	f06f8ff0 	.word	0xf06f8ff0
   13b20:	e6030935 	.word	0xe6030935
   13b24:	0937f06f 	.word	0x0937f06f
   13b28:	bf00e600 	.word	0xbf00e600

00013b2c <packet_handler_create>:
   13b2c:	b5382801 	.word	0xb5382801
   13b30:	4614460d 	.word	0x4614460d
   13b34:	db11d00d 	.word	0xdb11d00d
   13b38:	dc0f2803 	.word	0xdc0f2803
   13b3c:	f00a2010 	.word	0xf00a2010
   13b40:	2218f81f 	.word	0x2218f81f
   13b44:	4b08b120 	.word	0x4b08b120
   13b48:	44136045 	.word	0x44136045
   13b4c:	60036084 	.word	0x60036084
   13b50:	2014bd38 	.word	0x2014bd38
   13b54:	f814f00a 	.word	0xf814f00a
   13b58:	e7f32230 	.word	0xe7f32230
   13b5c:	f00a200c 	.word	0xf00a200c
   13b60:	2200f80f 	.word	0x2200f80f
   13b64:	bf00e7ee 	.word	0xbf00e7ee
   13b68:	00025d24 	.word	0x00025d24

00013b6c <packet_handler_delete>:
   13b6c:	4604b510 	.word	0x4604b510
   13b70:	691b6803 	.word	0x691b6803
   13b74:	68234798 	.word	0x68234798
   13b78:	695b4620 	.word	0x695b4620
   13b7c:	46204798 	.word	0x46204798
   13b80:	4010e8bd 	.word	0x4010e8bd
   13b84:	b81af00a 	.word	0xb81af00a

00013b88 <symbol_0002469>:
   13b88:	460db570 	.word	0x460db570
   13b8c:	f0014604 	.word	0xf0014604
   13b90:	2d03fc23 	.word	0x2d03fc23
   13b94:	d1257025 	.word	0xd1257025
   13b98:	25012308 	.word	0x25012308
   13b9c:	49154a14 	.word	0x49154a14
   13ba0:	622360a3 	.word	0x622360a3
   13ba4:	62e36523 	.word	0x62e36523
   13ba8:	60e263a3 	.word	0x60e263a3
   13bac:	4a134b12 	.word	0x4a134b12
   13bb0:	48144e13 	.word	0x48144e13
   13bb4:	65606321 	.word	0x65606321
   13bb8:	64a363e2 	.word	0x64a363e2
   13bbc:	61e56065 	.word	0x61e56065
   13bc0:	62a564e5 	.word	0x62a564e5
   13bc4:	e9c46365 	.word	0xe9c46365
   13bc8:	62665510 	.word	0x62665510
   13bcc:	f0061d20 	.word	0xf0061d20
   13bd0:	65a0fde7 	.word	0x65a0fde7
   13bd4:	004cf104 	.word	0x004cf104
   13bd8:	fde2f006 	.word	0xfde2f006
   13bdc:	0517e9c4 	.word	0x0517e9c4
   13be0:	bd702000 	.word	0xbd702000
   13be4:	f0014620 	.word	0xf0014620
   13be8:	4807fbf7 	.word	0x4807fbf7
   13bec:	bf00bd70 	.word	0xbf00bd70
   13bf0:	00025dec 	.word	0x00025dec
   13bf4:	00025d8c 	.word	0x00025d8c
   13bf8:	20024948 	.word	0x20024948
   13bfc:	00025dac 	.word	0x00025dac
   13c00:	00025d6c 	.word	0x00025d6c
   13c04:	00025dcc 	.word	0x00025dcc
   13c08:	ffffb180 	.word	0xffffb180

00013c0c <secure_client_socket>:
   13c0c:	41f0e92d 	.word	0x41f0e92d
   13c10:	680b460c 	.word	0x680b460c
   13c14:	f4236989 	.word	0xf4236989
   13c18:	60233300 	.word	0x60233300
   13c1c:	23006822 	.word	0x23006822
   13c20:	1280f422 	.word	0x1280f422
   13c24:	f2476022 	.word	0xf2476022
   13c28:	68270281 	.word	0x68270281
   13c2c:	f0024606 	.word	0xf0024606
   13c30:	2800fedb 	.word	0x2800fedb
   13c34:	4605d03b 	.word	0x4605d03b
   13c38:	eb064b28 	.word	0xeb064b28
   13c3c:	eb0301c6 	.word	0xeb0301c6
   13c40:	22240181 	.word	0x22240181
   13c44:	f0103014 	.word	0xf0103014
   13c48:	68abfe1c 	.word	0x68abfe1c
   13c4c:	8090f8df 	.word	0x8090f8df
   13c50:	60ab3324 	.word	0x60ab3324
   13c54:	46296823 	.word	0x46296823
   13c58:	0308ea03 	.word	0x0308ea03
   13c5c:	030af043 	.word	0x030af043
   13c60:	f2476023 	.word	0xf2476023
   13c64:	463b0281 	.word	0x463b0281
   13c68:	f0024620 	.word	0xf0024620
   13c6c:	b960fedd 	.word	0xb960fedd
   13c70:	00db6823 	.word	0x00db6823
   13c74:	f04fd40b 	.word	0xf04fd40b
   13c78:	f64f33ff 	.word	0xf64f33ff
   13c7c:	210b72ff 	.word	0x210b72ff
   13c80:	f0024630 	.word	0xf0024630
   13c84:	b128fee5 	.word	0xb128fee5
   13c88:	e8bd6027 	.word	0xe8bd6027
   13c8c:	207381f0 	.word	0x207381f0
   13c90:	81f0e8bd 	.word	0x81f0e8bd
   13c94:	6280f04f 	.word	0x6280f04f
   13c98:	46114630 	.word	0x46114630
   13c9c:	33fff04f 	.word	0x33fff04f
   13ca0:	fed6f002 	.word	0xfed6f002
   13ca4:	2873b130 	.word	0x2873b130
   13ca8:	6027d0ef 	.word	0x6027d0ef
   13cac:	200ce7ed 	.word	0x200ce7ed
   13cb0:	81f0e8bd 	.word	0x81f0e8bd
   13cb4:	f0236823 	.word	0xf0236823
   13cb8:	60236380 	.word	0x60236380
   13cbc:	ea036823 	.word	0xea036823
   13cc0:	f0480808 	.word	0xf0480808
   13cc4:	6023030c 	.word	0x6023030c
   13cc8:	f4436823 	.word	0xf4436823
   13ccc:	60233300 	.word	0x60233300
   13cd0:	f4436823 	.word	0xf4436823
   13cd4:	60231380 	.word	0x60231380
   13cd8:	81f0e8bd 	.word	0x81f0e8bd
   13cdc:	20020328 	.word	0x20020328
   13ce0:	ffff0000 	.word	0xffff0000

00013ce4 <tls_interface_init>:
   13ce4:	47702000 	.word	0x47702000

00013ce8 <tls_interface_open>:
   13ce8:	f020b538 	.word	0xf020b538
   13cec:	2b020308 	.word	0x2b020308
   13cf0:	202fd006 	.word	0x202fd006
   13cf4:	fa34f7fd 	.word	0xfa34f7fd
   13cf8:	35fff04f 	.word	0x35fff04f
   13cfc:	bd384628 	.word	0xbd384628
   13d00:	1e4a4614 	.word	0x1e4a4614
   13d04:	d8282a01 	.word	0xd8282a01
   13d08:	2901bb14 	.word	0x2901bb14
   13d0c:	2301bf06 	.word	0x2301bf06
   13d10:	7482f44f 	.word	0x7482f44f
   13d14:	7487f44f 	.word	0x7487f44f
   13d18:	f002461a 	.word	0xf002461a
   13d1c:	1e05fec5 	.word	0x1e05fec5
   13d20:	4b15db26 	.word	0x4b15db26
   13d24:	00c5eb05 	.word	0x00c5eb05
   13d28:	0080eb03 	.word	0x0080eb03
   13d2c:	49132224 	.word	0x49132224
   13d30:	fda7f010 	.word	0xfda7f010
   13d34:	f0024628 	.word	0xf0024628
   13d38:	6803fd0d 	.word	0x6803fd0d
   13d3c:	f4236144 	.word	0xf4236144
   13d40:	60031380 	.word	0x60031380
   13d44:	f4236803 	.word	0xf4236803
   13d48:	60033300 	.word	0x60033300
   13d4c:	bd384628 	.word	0xbd384628
   13d50:	d0082901 	.word	0xd0082901
   13d54:	7f87f5b4 	.word	0x7f87f5b4
   13d58:	2016d0de 	.word	0x2016d0de
   13d5c:	fa00f7fd 	.word	0xfa00f7fd
   13d60:	35fff04f 	.word	0x35fff04f
   13d64:	f5b4e7ca 	.word	0xf5b4e7ca
   13d68:	d1f67f82 	.word	0xd1f67f82
   13d6c:	e7d3460b 	.word	0xe7d3460b
   13d70:	35fff04f 	.word	0x35fff04f
   13d74:	bf00e7c2 	.word	0xbf00e7c2
   13d78:	20020328 	.word	0x20020328
   13d7c:	00025e0c 	.word	0x00025e0c

00013d80 <tls_interface_close>:
   13d80:	4604b510 	.word	0x4604b510
   13d84:	fce6f002 	.word	0xfce6f002
   13d88:	4620b120 	.word	0x4620b120
   13d8c:	4010e8bd 	.word	0x4010e8bd
   13d90:	bf36f002 	.word	0xbf36f002
   13d94:	f7fd2009 	.word	0xf7fd2009
   13d98:	f04ff9e3 	.word	0xf04ff9e3
   13d9c:	bd1030ff 	.word	0xbd1030ff

00013da0 <tls_interface_sendto>:
   13da0:	47f0e92d 	.word	0x47f0e92d
   13da4:	e9dd460d 	.word	0xe9dd460d
   13da8:	46168908 	.word	0x46168908
   13dac:	4604461f 	.word	0x4604461f
   13db0:	fcd0f002 	.word	0xfcd0f002
   13db4:	d03b2800 	.word	0xd03b2800
   13db8:	b29b6803 	.word	0xb29b6803
   13dbc:	d0392b0c 	.word	0xd0392b0c
   13dc0:	b29b6803 	.word	0xb29b6803
   13dc4:	d1112b0b 	.word	0xd1112b0b
   13dc8:	eb044b20 	.word	0xeb044b20
   13dcc:	f81304c4 	.word	0xf81304c4
   13dd0:	2b023024 	.word	0x2b023024
   13dd4:	6903d038 	.word	0x6903d038
   13dd8:	bf142b01 	.word	0xbf142b01
   13ddc:	202a2039 	.word	0x202a2039
   13de0:	f9bef7fd 	.word	0xf9bef7fd
   13de4:	30fff04f 	.word	0x30fff04f
   13de8:	87f0e8bd 	.word	0x87f0e8bd
   13dec:	2b016903 	.word	0x2b016903
   13df0:	2b02d00b 	.word	0x2b02d00b
   13df4:	2039d001 	.word	0x2039d001
   13df8:	6803e7f2 	.word	0x6803e7f2
   13dfc:	2b02b29b 	.word	0x2b02b29b
   13e00:	6803d007 	.word	0x6803d007
   13e04:	2b04b29b 	.word	0x2b04b29b
   13e08:	6803d003 	.word	0x6803d003
   13e0c:	2b05b29b 	.word	0x2b05b29b
   13e10:	4b0ed1f1 	.word	0x4b0ed1f1
   13e14:	02c4eb04 	.word	0x02c4eb04
   13e18:	3022f813 	.word	0x3022f813
   13e1c:	d1ea2b02 	.word	0xd1ea2b02
   13e20:	46204601 	.word	0x46204601
   13e24:	fef2f7ff 	.word	0xfef2f7ff
   13e28:	d0032800 	.word	0xd0032800
   13e2c:	e7d9dcd8 	.word	0xe7d9dcd8
   13e30:	e7d52009 	.word	0xe7d52009
   13e34:	8908e9cd 	.word	0x8908e9cd
   13e38:	4632463b 	.word	0x4632463b
   13e3c:	46204629 	.word	0x46204629
   13e40:	47f0e8bd 	.word	0x47f0e8bd
   13e44:	bf4cf002 	.word	0xbf4cf002
   13e48:	e7c92023 	.word	0xe7c92023
   13e4c:	20020328 	.word	0x20020328

00013e50 <tls_interface_recvfrom>:
   13e50:	47f0e92d 	.word	0x47f0e92d
   13e54:	e9dd460d 	.word	0xe9dd460d
   13e58:	46168908 	.word	0x46168908
   13e5c:	4604461f 	.word	0x4604461f
   13e60:	fc78f002 	.word	0xfc78f002
   13e64:	d0382800 	.word	0xd0382800
   13e68:	b29b6803 	.word	0xb29b6803
   13e6c:	d00f2b0c 	.word	0xd00f2b0c
   13e70:	b29b6803 	.word	0xb29b6803
   13e74:	d00b2b0d 	.word	0xd00b2b0d
   13e78:	2b016903 	.word	0x2b016903
   13e7c:	2b02d01a 	.word	0x2b02d01a
   13e80:	2023d010 	.word	0x2023d010
   13e84:	f96cf7fd 	.word	0xf96cf7fd
   13e88:	30fff04f 	.word	0x30fff04f
   13e8c:	87f0e8bd 	.word	0x87f0e8bd
   13e90:	8908e9cd 	.word	0x8908e9cd
   13e94:	4632463b 	.word	0x4632463b
   13e98:	46204629 	.word	0x46204629
   13e9c:	47f0e8bd 	.word	0x47f0e8bd
   13ea0:	b858f003 	.word	0xb858f003
   13ea4:	b29b6803 	.word	0xb29b6803
   13ea8:	d0072b02 	.word	0xd0072b02
   13eac:	b29b6803 	.word	0xb29b6803
   13eb0:	d0032b04 	.word	0xd0032b04
   13eb4:	b29b6803 	.word	0xb29b6803
   13eb8:	d1e22b05 	.word	0xd1e22b05
   13ebc:	eb044b08 	.word	0xeb044b08
   13ec0:	f81302c4 	.word	0xf81302c4
   13ec4:	2b023022 	.word	0x2b023022
   13ec8:	4601d1db 	.word	0x4601d1db
   13ecc:	f7ff4620 	.word	0xf7ff4620
   13ed0:	2800fe9d 	.word	0x2800fe9d
   13ed4:	dcd5d0dc 	.word	0xdcd5d0dc
   13ed8:	2009e7d6 	.word	0x2009e7d6
   13edc:	bf00e7d2 	.word	0xbf00e7d2
   13ee0:	20020328 	.word	0x20020328

00013ee4 <tls_interface_bind>:
   13ee4:	43f8e92d 	.word	0x43f8e92d
   13ee8:	4617460c 	.word	0x4617460c
   13eec:	f0024606 	.word	0xf0024606
   13ef0:	2800fc31 	.word	0x2800fc31
   13ef4:	6803d04c 	.word	0x6803d04c
   13ef8:	b29b4605 	.word	0xb29b4605
   13efc:	d1502b02 	.word	0xd1502b02
   13f00:	463a4621 	.word	0x463a4621
   13f04:	f0034630 	.word	0xf0034630
   13f08:	4604f9fb 	.word	0x4604f9fb
   13f0c:	2c00b120 	.word	0x2c00b120
   13f10:	4620dc3f 	.word	0x4620dc3f
   13f14:	83f8e8bd 	.word	0x83f8e8bd
   13f18:	07c6eb06 	.word	0x07c6eb06
   13f1c:	8094f8df 	.word	0x8094f8df
   13f20:	f81800bf 	.word	0xf81800bf
   13f24:	2b013007 	.word	0x2b013007
   13f28:	4603d1f3 	.word	0x4603d1f3
   13f2c:	0281f247 	.word	0x0281f247
   13f30:	463069a9 	.word	0x463069a9
   13f34:	fd58f002 	.word	0xfd58f002
   13f38:	b3b04681 	.word	0xb3b04681
   13f3c:	0107eb08 	.word	0x0107eb08
   13f40:	30142224 	.word	0x30142224
   13f44:	fc9df010 	.word	0xfc9df010
   13f48:	3008f8d9 	.word	0x3008f8d9
   13f4c:	33244649 	.word	0x33244649
   13f50:	3008f8c9 	.word	0x3008f8c9
   13f54:	2304682a 	.word	0x2304682a
   13f58:	04120c12 	.word	0x04120c12
   13f5c:	020af042 	.word	0x020af042
   13f60:	4628602a 	.word	0x4628602a
   13f64:	0281f247 	.word	0x0281f247
   13f68:	fd5ef002 	.word	0xfd5ef002
   13f6c:	682bb9f8 	.word	0x682bb9f8
   13f70:	d41800db 	.word	0xd41800db
   13f74:	f04f4630 	.word	0xf04f4630
   13f78:	f64f33ff 	.word	0xf64f33ff
   13f7c:	210b72ff 	.word	0x210b72ff
   13f80:	fd66f002 	.word	0xfd66f002
   13f84:	d0c42800 	.word	0xd0c42800
   13f88:	46042304 	.word	0x46042304
   13f8c:	e7be602b 	.word	0xe7be602b
   13f90:	46202409 	.word	0x46202409
   13f94:	34fff04f 	.word	0x34fff04f
   13f98:	f8e2f7fd 	.word	0xf8e2f7fd
   13f9c:	e8bd4620 	.word	0xe8bd4620
   13fa0:	242d83f8 	.word	0x242d83f8
   13fa4:	2473e7f5 	.word	0x2473e7f5
   13fa8:	240ce7f3 	.word	0x240ce7f3
   13fac:	4604e7f1 	.word	0x4604e7f1
   13fb0:	bf00e7ad 	.word	0xbf00e7ad
   13fb4:	20020328 	.word	0x20020328

00013fb8 <tls_interface_connect>:
   13fb8:	460eb5f8 	.word	0x460eb5f8
   13fbc:	46044617 	.word	0x46044617
   13fc0:	fbc8f002 	.word	0xfbc8f002
   13fc4:	4b13b1e8 	.word	0x4b13b1e8
   13fc8:	02c4eb04 	.word	0x02c4eb04
   13fcc:	3022f813 	.word	0x3022f813
   13fd0:	d11c2b02 	.word	0xd11c2b02
   13fd4:	46056803 	.word	0x46056803
   13fd8:	2b02b29b 	.word	0x2b02b29b
   13fdc:	6803d003 	.word	0x6803d003
   13fe0:	2b04b29b 	.word	0x2b04b29b
   13fe4:	463ad113 	.word	0x463ad113
   13fe8:	46204631 	.word	0x46204631
   13fec:	f8def003 	.word	0xf8def003
   13ff0:	2800b110 	.word	0x2800b110
   13ff4:	bdf8dc06 	.word	0xbdf8dc06
   13ff8:	46204629 	.word	0x46204629
   13ffc:	fe06f7ff 	.word	0xfe06f7ff
   14000:	2009e7f7 	.word	0x2009e7f7
   14004:	f8acf7fd 	.word	0xf8acf7fd
   14008:	30fff04f 	.word	0x30fff04f
   1400c:	202dbdf8 	.word	0x202dbdf8
   14010:	bf00e7f8 	.word	0xbf00e7f8
   14014:	20020328 	.word	0x20020328

00014018 <tls_interface_listen>:
   14018:	47f0e92d 	.word	0x47f0e92d
   1401c:	4606460f 	.word	0x4606460f
   14020:	fb98f002 	.word	0xfb98f002
   14024:	d06b2800 	.word	0xd06b2800
   14028:	46046903 	.word	0x46046903
   1402c:	d1652b01 	.word	0xd1652b01
   14030:	b29b6803 	.word	0xb29b6803
   14034:	d0562b04 	.word	0xd0562b04
   14038:	b29b6823 	.word	0xb29b6823
   1403c:	d15d2b0b 	.word	0xd15d2b0b
   14040:	f8df00f3 	.word	0xf8df00f3
   14044:	199a90c0 	.word	0x199a90c0
   14048:	2022f819 	.word	0x2022f819
   1404c:	d1552a01 	.word	0xd1552a01
   14050:	44332201 	.word	0x44332201
   14054:	f809009d 	.word	0xf809009d
   14058:	69a12005 	.word	0x69a12005
   1405c:	f2472300 	.word	0xf2472300
   14060:	46300281 	.word	0x46300281
   14064:	8000f8d4 	.word	0x8000f8d4
   14068:	fcbef002 	.word	0xfcbef002
   1406c:	28004682 	.word	0x28004682
   14070:	eb09d042 	.word	0xeb09d042
   14074:	22240105 	.word	0x22240105
   14078:	f0103014 	.word	0xf0103014
   1407c:	f8dafc02 	.word	0xf8dafc02
   14080:	46513008 	.word	0x46513008
   14084:	f8ca3324 	.word	0xf8ca3324
   14088:	68223008 	.word	0x68223008
   1408c:	0c124643 	.word	0x0c124643
   14090:	f0420412 	.word	0xf0420412
   14094:	6022020a 	.word	0x6022020a
   14098:	f2474620 	.word	0xf2474620
   1409c:	f0020281 	.word	0xf0020281
   140a0:	b9e0fcc3 	.word	0xb9e0fcc3
   140a4:	00db6823 	.word	0x00db6823
   140a8:	f04fd40e 	.word	0xf04fd40e
   140ac:	f64f33ff 	.word	0xf64f33ff
   140b0:	210b72ff 	.word	0x210b72ff
   140b4:	f0024630 	.word	0xf0024630
   140b8:	b160fccb 	.word	0xb160fccb
   140bc:	f8c42800 	.word	0xf8c42800
   140c0:	dc028000 	.word	0xdc028000
   140c4:	87f0e8bd 	.word	0x87f0e8bd
   140c8:	f7fd2073 	.word	0xf7fd2073
   140cc:	f04ff849 	.word	0xf04ff849
   140d0:	e8bd30ff 	.word	0xe8bd30ff
   140d4:	463987f0 	.word	0x463987f0
   140d8:	f0034630 	.word	0xf0034630
   140dc:	2800f9a7 	.word	0x2800f9a7
   140e0:	e8bddcf3 	.word	0xe8bddcf3
   140e4:	00f387f0 	.word	0x00f387f0
   140e8:	9018f8df 	.word	0x9018f8df
   140ec:	f819199a 	.word	0xf819199a
   140f0:	2a022022 	.word	0x2a022022
   140f4:	e7abd1a0 	.word	0xe7abd1a0
   140f8:	e7e6200c 	.word	0xe7e6200c
   140fc:	e7e4202d 	.word	0xe7e4202d
   14100:	e7e22009 	.word	0xe7e22009
   14104:	20020328 	.word	0x20020328

00014108 <tls_interface_accept>:
   14108:	460cb5f8 	.word	0x460cb5f8
   1410c:	461f4616 	.word	0x461f4616
   14110:	f0024605 	.word	0xf0024605
   14114:	2800fb1f 	.word	0x2800fb1f
   14118:	6800d03b 	.word	0x6800d03b
   1411c:	2806b280 	.word	0x2806b280
   14120:	4621d137 	.word	0x4621d137
   14124:	4632463b 	.word	0x4632463b
   14128:	f0034628 	.word	0xf0034628
   1412c:	4604f9f5 	.word	0x4604f9f5
   14130:	2c00b118 	.word	0x2c00b118
   14134:	4620dc2e 	.word	0x4620dc2e
   14138:	4628bdf8 	.word	0x4628bdf8
   1413c:	fb0af002 	.word	0xfb0af002
   14140:	4f186803 	.word	0x4f186803
   14144:	3300f423 	.word	0x3300f423
   14148:	68036003 	.word	0x68036003
   1414c:	05c5eb05 	.word	0x05c5eb05
   14150:	1380f423 	.word	0x1380f423
   14154:	60034606 	.word	0x60034606
   14158:	0185eb07 	.word	0x0185eb07
   1415c:	46382224 	.word	0x46382224
   14160:	fb8ff010 	.word	0xfb8ff010
   14164:	703b2302 	.word	0x703b2302
   14168:	46206833 	.word	0x46206833
   1416c:	041b0c1b 	.word	0x041b0c1b
   14170:	030bf043 	.word	0x030bf043
   14174:	f64f6033 	.word	0xf64f6033
   14178:	f04f72ff 	.word	0xf04f72ff
   1417c:	210c33ff 	.word	0x210c33ff
   14180:	fc66f002 	.word	0xfc66f002
   14184:	28004604 	.word	0x28004604
   14188:	2000d0d5 	.word	0x2000d0d5
   1418c:	fd38f002 	.word	0xfd38f002
   14190:	2409e7cf 	.word	0x2409e7cf
   14194:	f04f4620 	.word	0xf04f4620
   14198:	f7fc34ff 	.word	0xf7fc34ff
   1419c:	4620ffe1 	.word	0x4620ffe1
   141a0:	bf00bdf8 	.word	0xbf00bdf8
   141a4:	20020328 	.word	0x20020328

000141a8 <tls_interface_setopt>:
   141a8:	41f0e92d 	.word	0x41f0e92d
   141ac:	7f8df5b1 	.word	0x7f8df5b1
   141b0:	d11d9f06 	.word	0xd11d9f06
   141b4:	b1c3461c 	.word	0xb1c3461c
   141b8:	4605b1bf 	.word	0x4605b1bf
   141bc:	f0024616 	.word	0xf0024616
   141c0:	b1c8fac9 	.word	0xb1c8fac9
   141c4:	b29b6803 	.word	0xb29b6803
   141c8:	d0072b02 	.word	0xd0072b02
   141cc:	b29b6803 	.word	0xb29b6803
   141d0:	d0032b04 	.word	0xd0032b04
   141d4:	b29b6803 	.word	0xb29b6803
   141d8:	d10d2b05 	.word	0xd10d2b05
   141dc:	2e033e01 	.word	0x2e033e01
   141e0:	e8dfd851 	.word	0xe8dfd851
   141e4:	3225f006 	.word	0x3225f006
   141e8:	200e0b18 	.word	0x200e0b18
   141ec:	81f0e8bd 	.word	0x81f0e8bd
   141f0:	41f0e8bd 	.word	0x41f0e8bd
   141f4:	bac8f003 	.word	0xbac8f003
   141f8:	e7f72009 	.word	0xe7f72009
   141fc:	d1392f04 	.word	0xd1392f04
   14200:	2b026823 	.word	0x2b026823
   14204:	4a21d836 	.word	0x4a21d836
   14208:	05c5eb05 	.word	0x05c5eb05
   1420c:	0585eb02 	.word	0x0585eb02
   14210:	200070ab 	.word	0x200070ab
   14214:	2f01e7ea 	.word	0x2f01e7ea
   14218:	7823d12c 	.word	0x7823d12c
   1421c:	d8292b01 	.word	0xd8292b01
   14220:	eb054a1a 	.word	0xeb054a1a
   14224:	eb0205c5 	.word	0xeb0205c5
   14228:	70530285 	.word	0x70530285
   1422c:	e7dd2000 	.word	0xe7dd2000
   14230:	d11f2f04 	.word	0xd11f2f04
   14234:	b1f86820 	.word	0xb1f86820
   14238:	d11b2801 	.word	0xd11b2801
   1423c:	eb054b13 	.word	0xeb054b13
   14240:	f80305c5 	.word	0xf80305c5
   14244:	20000025 	.word	0x20000025
   14248:	ea5fe7d0 	.word	0xea5fe7d0
   1424c:	d0110c97 	.word	0xd0110c97
   14250:	0603f017 	.word	0x0603f017
   14254:	eb05d10e 	.word	0xeb05d10e
   14258:	00ad05c5 	.word	0x00ad05c5
   1425c:	1d284b0b 	.word	0x1d284b0b
   14260:	442b4418 	.word	0x442b4418
   14264:	4621463a 	.word	0x4621463a
   14268:	c003f883 	.word	0xc003f883
   1426c:	fb09f010 	.word	0xfb09f010
   14270:	e7bb4630 	.word	0xe7bb4630
   14274:	e7b92016 	.word	0xe7b92016
   14278:	4b042202 	.word	0x4b042202
   1427c:	05c5eb05 	.word	0x05c5eb05
   14280:	2025f803 	.word	0x2025f803
   14284:	202ae7b2 	.word	0x202ae7b2
   14288:	bf00e7b0 	.word	0xbf00e7b0
   1428c:	20020328 	.word	0x20020328

00014290 <tls_interface_getopt>:
   14290:	41f0e92d 	.word	0x41f0e92d
   14294:	7f8df5b1 	.word	0x7f8df5b1
   14298:	d1129f06 	.word	0xd1129f06
   1429c:	b16b461d 	.word	0xb16b461d
   142a0:	4606b167 	.word	0x4606b167
   142a4:	f0024614 	.word	0xf0024614
   142a8:	2800fa55 	.word	0x2800fa55
   142ac:	3c01d04f 	.word	0x3c01d04f
   142b0:	d8522c03 	.word	0xd8522c03
   142b4:	f004e8df 	.word	0xf004e8df
   142b8:	09152139 	.word	0x09152139
   142bc:	e8bd200e 	.word	0xe8bd200e
   142c0:	e8bd81f0 	.word	0xe8bd81f0
   142c4:	f00341f0 	.word	0xf00341f0
   142c8:	683bbb1b 	.word	0x683bbb1b
   142cc:	d13c2b04 	.word	0xd13c2b04
   142d0:	eb064b23 	.word	0xeb064b23
   142d4:	eb0306c6 	.word	0xeb0306c6
   142d8:	78b30686 	.word	0x78b30686
   142dc:	602b2000 	.word	0x602b2000
   142e0:	683be7ed 	.word	0x683be7ed
   142e4:	d1302b04 	.word	0xd1302b04
   142e8:	eb064b1d 	.word	0xeb064b1d
   142ec:	eb0306c6 	.word	0xeb0306c6
   142f0:	78730686 	.word	0x78730686
   142f4:	602b2000 	.word	0x602b2000
   142f8:	eb06e7e1 	.word	0xeb06e7e1
   142fc:	491806c6 	.word	0x491806c6
   14300:	00b6683b 	.word	0x00b6683b
   14304:	f013198a 	.word	0xf013198a
   14308:	78d00403 	.word	0x78d00403
   1430c:	089bd121 	.word	0x089bd121
   14310:	bf284283 	.word	0xbf284283
   14314:	009a4603 	.word	0x009a4603
   14318:	3604b1db 	.word	0x3604b1db
   1431c:	603a4431 	.word	0x603a4431
   14320:	f0104628 	.word	0xf0104628
   14324:	4620faae 	.word	0x4620faae
   14328:	683be7c9 	.word	0x683be7c9
   1432c:	d10c2b04 	.word	0xd10c2b04
   14330:	eb064b0b 	.word	0xeb064b0b
   14334:	f81306c6 	.word	0xf81306c6
   14338:	20003026 	.word	0x20003026
   1433c:	0301f1a3 	.word	0x0301f1a3
   14340:	f383fab3 	.word	0xf383fab3
   14344:	602b095b 	.word	0x602b095b
   14348:	2016e7b9 	.word	0x2016e7b9
   1434c:	2009e7b7 	.word	0x2009e7b7
   14350:	2800e7b5 	.word	0x2800e7b5
   14354:	6038d1f9 	.word	0x6038d1f9
   14358:	202ae7b1 	.word	0x202ae7b1
   1435c:	bf00e7af 	.word	0xbf00e7af
   14360:	20020328 	.word	0x20020328

00014364 <tls_rpc_ip_event_handler>:
   14364:	f248b538 	.word	0xf248b538
   14368:	42ab0581 	.word	0x42ab0581
   1436c:	d053460c 	.word	0xd053460c
   14370:	0182f249 	.word	0x0182f249
   14374:	d02d428b 	.word	0xd02d428b
   14378:	0102f248 	.word	0x0102f248
   1437c:	d001428b 	.word	0xd001428b
   14380:	bd382001 	.word	0xbd382001
   14384:	d0fb2c00 	.word	0xd0fb2c00
   14388:	f5b36963 	.word	0xf5b36963
   1438c:	d0027f82 	.word	0xd0027f82
   14390:	7f87f5b3 	.word	0x7f87f5b3
   14394:	6823d1f4 	.word	0x6823d1f4
   14398:	5300f023 	.word	0x5300f023
   1439c:	69556023 	.word	0x69556023
   143a0:	d1482d00 	.word	0xd1482d00
   143a4:	0c1b6823 	.word	0x0c1b6823
   143a8:	f043041b 	.word	0xf043041b
   143ac:	60230305 	.word	0x60230305
   143b0:	00da6823 	.word	0x00da6823
   143b4:	4b25d50c 	.word	0x4b25d50c
   143b8:	02c0eb00 	.word	0x02c0eb00
   143bc:	3022f813 	.word	0x3022f813
   143c0:	d1052b02 	.word	0xd1052b02
   143c4:	f7ff4621 	.word	0xf7ff4621
   143c8:	b108fc21 	.word	0xb108fc21
   143cc:	d1352873 	.word	0xd1352873
   143d0:	bd382000 	.word	0xbd382000
   143d4:	d0fb2c00 	.word	0xd0fb2c00
   143d8:	b29b6823 	.word	0xb29b6823
   143dc:	d1f72b0b 	.word	0xd1f72b0b
   143e0:	bb486910 	.word	0xbb486910
   143e4:	f0436823 	.word	0xf0436823
   143e8:	60236380 	.word	0x60236380
   143ec:	00db6823 	.word	0x00db6823
   143f0:	6823d5ee 	.word	0x6823d5ee
   143f4:	6380f023 	.word	0x6380f023
   143f8:	68236023 	.word	0x68236023
   143fc:	041b0c1b 	.word	0x041b0c1b
   14400:	030cf043 	.word	0x030cf043
   14404:	68236023 	.word	0x68236023
   14408:	3300f443 	.word	0x3300f443
   1440c:	68236023 	.word	0x68236023
   14410:	1380f443 	.word	0x1380f443
   14414:	bd386023 	.word	0xbd386023
   14418:	d0d92900 	.word	0xd0d92900
   1441c:	b29b680b 	.word	0xb29b680b
   14420:	d1d52b0a 	.word	0xd1d52b0a
   14424:	b9386950 	.word	0xb9386950
   14428:	0c1b680b 	.word	0x0c1b680b
   1442c:	f043041b 	.word	0xf043041b
   14430:	600b030b 	.word	0x600b030b
   14434:	4628bd38 	.word	0x4628bd38
   14438:	faccf002 	.word	0xfaccf002
   1443c:	68236060 	.word	0x68236060
   14440:	f4432000 	.word	0xf4432000
   14444:	60232380 	.word	0x60232380
   14448:	bf00bd38 	.word	0xbf00bd38
   1444c:	20020328 	.word	0x20020328

00014450 <rpc_gnss_serialize_utc>:
   14450:	b1d84603 	.word	0xb1d84603
   14454:	2000b1d1 	.word	0x2000b1d1
   14458:	70482201 	.word	0x70482201
   1445c:	685a700a 	.word	0x685a700a
   14460:	f8c12010 	.word	0xf8c12010
   14464:	681a2006 	.word	0x681a2006
   14468:	2002f8c1 	.word	0x2002f8c1
   1446c:	200af993 	.word	0x200af993
   14470:	f993730a 	.word	0xf993730a
   14474:	73ca200d 	.word	0x73ca200d
   14478:	200cf993 	.word	0x200cf993
   1447c:	7a1a738a 	.word	0x7a1a738a
   14480:	7ada728a 	.word	0x7ada728a
   14484:	7a5b734a 	.word	0x7a5b734a
   14488:	477072cb 	.word	0x477072cb
   1448c:	30fff04f 	.word	0x30fff04f
   14490:	bf004770 	.word	0xbf004770

00014494 <rpc_gnss_serialize_ephe>:
   14494:	28004603 	.word	0x28004603
   14498:	2900d04b 	.word	0x2900d04b
   1449c:	2000d049 	.word	0x2000d049
   144a0:	70482202 	.word	0x70482202
   144a4:	68da700a 	.word	0x68da700a
   144a8:	f8c12040 	.word	0xf8c12040
   144ac:	f9b3200b 	.word	0xf9b3200b
   144b0:	f8a12008 	.word	0xf8a12008
   144b4:	f9932009 	.word	0xf9932009
   144b8:	720a2006 	.word	0x720a2006
   144bc:	2044f9b3 	.word	0x2044f9b3
   144c0:	f9b3878a 	.word	0xf9b3878a
   144c4:	86ca203e 	.word	0x86ca203e
   144c8:	2042f9b3 	.word	0x2042f9b3
   144cc:	f9b3874a 	.word	0xf9b3874a
   144d0:	868a203c 	.word	0x868a203c
   144d4:	2046f9b3 	.word	0x2046f9b3
   144d8:	f9b387ca 	.word	0xf9b387ca
   144dc:	870a2040 	.word	0x870a2040
   144e0:	201cf9b3 	.word	0x201cf9b3
   144e4:	6a9a830a 	.word	0x6a9a830a
   144e8:	2022f8c1 	.word	0x2022f8c1
   144ec:	744a7c9a 	.word	0x744a7c9a
   144f0:	70ca785a 	.word	0x70ca785a
   144f4:	62ca6b5a 	.word	0x62ca6b5a
   144f8:	202cf9b3 	.word	0x202cf9b3
   144fc:	885a84ca 	.word	0x885a84ca
   14500:	6a1a808a 	.word	0x6a1a808a
   14504:	201af8c1 	.word	0x201af8c1
   14508:	630a6b9a 	.word	0x630a6b9a
   1450c:	f8c16a5a 	.word	0xf8c16a5a
   14510:	6b1a201e 	.word	0x6b1a201e
   14514:	781a628a 	.word	0x781a628a
   14518:	f993708a 	.word	0xf993708a
   1451c:	73ca2010 	.word	0x73ca2010
   14520:	80ca889a 	.word	0x80ca889a
   14524:	824a8a9a 	.word	0x824a8a9a
   14528:	740a7c5a 	.word	0x740a7c5a
   1452c:	614b699b 	.word	0x614b699b
   14530:	f04f4770 	.word	0xf04f4770
   14534:	477030ff 	.word	0x477030ff

00014538 <rpc_gnss_serialize_alm>:
   14538:	b3604603 	.word	0xb3604603
   1453c:	2000b359 	.word	0x2000b359
   14540:	70482203 	.word	0x70482203
   14544:	f9b3700a 	.word	0xf9b3700a
   14548:	2021201c 	.word	0x2021201c
   1454c:	201df8a1 	.word	0x201df8a1
   14550:	201ef9b3 	.word	0x201ef9b3
   14554:	201ff8a1 	.word	0x201ff8a1
   14558:	2006f9b3 	.word	0x2006f9b3
   1455c:	889a810a 	.word	0x889a810a
   14560:	78da80ca 	.word	0x78da80ca
   14564:	699a714a 	.word	0x699a714a
   14568:	2019f8c1 	.word	0x2019f8c1
   1456c:	f8c1691a 	.word	0xf8c1691a
   14570:	f9b32011 	.word	0xf9b32011
   14574:	814a2008 	.word	0x814a2008
   14578:	f8c168da 	.word	0xf8c168da
   1457c:	7a9a200d 	.word	0x7a9a200d
   14580:	781a730a 	.word	0x781a730a
   14584:	789a708a 	.word	0x789a708a
   14588:	695a710a 	.word	0x695a710a
   1458c:	2015f8c1 	.word	0x2015f8c1
   14590:	70cb785b 	.word	0x70cb785b
   14594:	f04f4770 	.word	0xf04f4770
   14598:	477030ff 	.word	0x477030ff

0001459c <rpc_gnss_serialize_klob>:
   1459c:	b1f04603 	.word	0xb1f04603
   145a0:	2000b1e9 	.word	0x2000b1e9
   145a4:	70482204 	.word	0x70482204
   145a8:	f993700a 	.word	0xf993700a
   145ac:	200a2000 	.word	0x200a2000
   145b0:	f993708a 	.word	0xf993708a
   145b4:	70ca2001 	.word	0x70ca2001
   145b8:	2002f993 	.word	0x2002f993
   145bc:	f993710a 	.word	0xf993710a
   145c0:	714a2003 	.word	0x714a2003
   145c4:	2004f993 	.word	0x2004f993
   145c8:	f993718a 	.word	0xf993718a
   145cc:	71ca2005 	.word	0x71ca2005
   145d0:	2006f993 	.word	0x2006f993
   145d4:	f993720a 	.word	0xf993720a
   145d8:	724b3007 	.word	0x724b3007
   145dc:	f04f4770 	.word	0xf04f4770
   145e0:	477030ff 	.word	0x477030ff

000145e4 <rpc_gnss_serialize_nequick>:
   145e4:	b1984603 	.word	0xb1984603
   145e8:	2000b191 	.word	0x2000b191
   145ec:	70482205 	.word	0x70482205
   145f0:	f9b3700a 	.word	0xf9b3700a
   145f4:	200a2000 	.word	0x200a2000
   145f8:	f9b3804a 	.word	0xf9b3804a
   145fc:	808a2002 	.word	0x808a2002
   14600:	2004f9b3 	.word	0x2004f9b3
   14604:	799a80ca 	.word	0x799a80ca
   14608:	79db720a 	.word	0x79db720a
   1460c:	4770724b 	.word	0x4770724b
   14610:	30fff04f 	.word	0x30fff04f
   14614:	bf004770 	.word	0xbf004770

00014618 <rpc_gnss_serialize_time_and_sv_tow>:
   14618:	b309b310 	.word	0xb309b310
   1461c:	2500b470 	.word	0x2500b470
   14620:	460c2606 	.word	0x460c2606
   14624:	700e704d 	.word	0x700e704d
   14628:	8805462b 	.word	0x8805462b
   1462c:	804d4602 	.word	0x804d4602
   14630:	f8c168c5 	.word	0xf8c168c5
   14634:	8905500a 	.word	0x8905500a
   14638:	6840810d 	.word	0x6840810d
   1463c:	8a156048 	.word	0x8a156048
   14640:	0043eb03 	.word	0x0043eb03
   14644:	81c54408 	.word	0x81c54408
   14648:	33017c90 	.word	0x33017c90
   1464c:	74202b20 	.word	0x74202b20
   14650:	0204f102 	.word	0x0204f102
   14654:	0403f104 	.word	0x0403f104
   14658:	206ed1f1 	.word	0x206ed1f1
   1465c:	4770bc70 	.word	0x4770bc70
   14660:	30fff04f 	.word	0x30fff04f
   14664:	bf004770 	.word	0xbf004770

00014668 <rpc_gnss_serialize_location>:
   14668:	b1c84603 	.word	0xb1c84603
   1466c:	2000b1c1 	.word	0x2000b1c1
   14670:	70482207 	.word	0x70482207
   14674:	f9b3700a 	.word	0xf9b3700a
   14678:	20112008 	.word	0x20112008
   1467c:	7b9a814a 	.word	0x7b9a814a
   14680:	681a740a 	.word	0x681a740a
   14684:	2002f8c1 	.word	0x2002f8c1
   14688:	f8c1685a 	.word	0xf8c1685a
   1468c:	7b1a2006 	.word	0x7b1a2006
   14690:	7b5a738a 	.word	0x7b5a738a
   14694:	7a9a73ca 	.word	0x7a9a73ca
   14698:	7adb730a 	.word	0x7adb730a
   1469c:	4770734b 	.word	0x4770734b
   146a0:	30fff04f 	.word	0x30fff04f
   146a4:	bf004770 	.word	0xbf004770

000146a8 <rpc_gnss_serialize_integrity>:
   146a8:	b141b148 	.word	0xb141b148
   146ac:	23082200 	.word	0x23082200
   146b0:	700b704a 	.word	0x700b704a
   146b4:	20066803 	.word	0x20066803
   146b8:	3002f8c1 	.word	0x3002f8c1
   146bc:	f04f4770 	.word	0xf04f4770
   146c0:	477030ff 	.word	0x477030ff

000146c4 <ipc_trace_init>:
   146c4:	60184b01 	.word	0x60184b01
   146c8:	bf004770 	.word	0xbf004770
   146cc:	20020454 	.word	0x20020454

000146d0 <bsd_os_trace_irq_handler>:
   146d0:	4b6cb5f0 	.word	0x4b6cb5f0
   146d4:	781bb083 	.word	0x781bb083
   146d8:	f0002b00 	.word	0xf0002b00
   146dc:	4b6a80ad 	.word	0x4b6a80ad
   146e0:	68a2681c 	.word	0x68a2681c
   146e4:	429a6863 	.word	0x429a6863
   146e8:	f64bd02d 	.word	0xf64bd02d
   146ec:	f8ad63ef 	.word	0xf8ad63ef
   146f0:	78233000 	.word	0x78233000
   146f4:	f88d466e 	.word	0xf88d466e
   146f8:	68633004 	.word	0x68633004
   146fc:	429a2105 	.word	0x429a2105
   14700:	6927bf2a 	.word	0x6927bf2a
   14704:	1abf1a9f 	.word	0x1abf1a9f
   14708:	bf94429a 	.word	0xbf94429a
   1470c:	68e52500 	.word	0x68e52500
   14710:	bf88b2bf 	.word	0xbf88b2bf
   14714:	46301b5b 	.word	0x46301b5b
   14718:	b29dbf88 	.word	0xb29dbf88
   1471c:	7002f8ad 	.word	0x7002f8ad
   14720:	fa8af00f 	.word	0xfa8af00f
   14724:	1002f8bd 	.word	0x1002f8bd
   14728:	f00f68a0 	.word	0xf00f68a0
   1472c:	68a3fa85 	.word	0x68a3fa85
   14730:	441f6922 	.word	0x441f6922
   14734:	bf084297 	.word	0xbf084297
   14738:	60a768e3 	.word	0x60a768e3
   1473c:	60a3bf08 	.word	0x60a3bf08
   14740:	f0402d00 	.word	0xf0402d00
   14744:	4b51808d 	.word	0x4b51808d
   14748:	68a2681c 	.word	0x68a2681c
   1474c:	429a6863 	.word	0x429a6863
   14750:	f64bd02c 	.word	0xf64bd02c
   14754:	f8ad63ef 	.word	0xf8ad63ef
   14758:	78233000 	.word	0x78233000
   1475c:	f88d466e 	.word	0xf88d466e
   14760:	68633004 	.word	0x68633004
   14764:	429a2105 	.word	0x429a2105
   14768:	6927bf2a 	.word	0x6927bf2a
   1476c:	1abf1a9f 	.word	0x1abf1a9f
   14770:	bf94429a 	.word	0xbf94429a
   14774:	68e52500 	.word	0x68e52500
   14778:	bf88b2bf 	.word	0xbf88b2bf
   1477c:	46301b5b 	.word	0x46301b5b
   14780:	b29dbf88 	.word	0xb29dbf88
   14784:	7002f8ad 	.word	0x7002f8ad
   14788:	fa56f00f 	.word	0xfa56f00f
   1478c:	1002f8bd 	.word	0x1002f8bd
   14790:	f00f68a0 	.word	0xf00f68a0
   14794:	68a3fa51 	.word	0x68a3fa51
   14798:	441f6922 	.word	0x441f6922
   1479c:	bf084297 	.word	0xbf084297
   147a0:	60a768e3 	.word	0x60a768e3
   147a4:	60a3bf08 	.word	0x60a3bf08
   147a8:	d1482d00 	.word	0xd1482d00
   147ac:	681c4b38 	.word	0x681c4b38
   147b0:	686368a2 	.word	0x686368a2
   147b4:	d02b429a 	.word	0xd02b429a
   147b8:	63eff64b 	.word	0x63eff64b
   147bc:	3000f8ad 	.word	0x3000f8ad
   147c0:	466e7823 	.word	0x466e7823
   147c4:	3004f88d 	.word	0x3004f88d
   147c8:	21056863 	.word	0x21056863
   147cc:	bf2a429a 	.word	0xbf2a429a
   147d0:	1a9f6927 	.word	0x1a9f6927
   147d4:	429a1abf 	.word	0x429a1abf
   147d8:	2500bf94 	.word	0x2500bf94
   147dc:	b2bf68e5 	.word	0xb2bf68e5
   147e0:	1b5bbf88 	.word	0x1b5bbf88
   147e4:	bf884630 	.word	0xbf884630
   147e8:	f8adb29d 	.word	0xf8adb29d
   147ec:	f00f7002 	.word	0xf00f7002
   147f0:	f8bdfa23 	.word	0xf8bdfa23
   147f4:	68a01002 	.word	0x68a01002
   147f8:	fa1ef00f 	.word	0xfa1ef00f
   147fc:	692268a3 	.word	0x692268a3
   14800:	4297441f 	.word	0x4297441f
   14804:	68e3bf08 	.word	0x68e3bf08
   14808:	bf0860a7 	.word	0xbf0860a7
   1480c:	b90d60a3 	.word	0xb90d60a3
   14810:	bdf0b003 	.word	0xbdf0b003
   14814:	21054630 	.word	0x21054630
   14818:	5002f8ad 	.word	0x5002f8ad
   1481c:	fa0cf00f 	.word	0xfa0cf00f
   14820:	1002f8bd 	.word	0x1002f8bd
   14824:	f00f68e0 	.word	0xf00f68e0
   14828:	f8bdfa07 	.word	0xf8bdfa07
   1482c:	68e32002 	.word	0x68e32002
   14830:	60a34413 	.word	0x60a34413
   14834:	bdf0b003 	.word	0xbdf0b003
   14838:	fd7ef7fc 	.word	0xfd7ef7fc
   1483c:	2105e74f 	.word	0x2105e74f
   14840:	f8ad4630 	.word	0xf8ad4630
   14844:	f00f5002 	.word	0xf00f5002
   14848:	f8bdf9f7 	.word	0xf8bdf9f7
   1484c:	68e01002 	.word	0x68e01002
   14850:	f9f2f00f 	.word	0xf9f2f00f
   14854:	2002f8bd 	.word	0x2002f8bd
   14858:	441368e3 	.word	0x441368e3
   1485c:	e7a560a3 	.word	0xe7a560a3
   14860:	46302105 	.word	0x46302105
   14864:	5002f8ad 	.word	0x5002f8ad
   14868:	f9e6f00f 	.word	0xf9e6f00f
   1486c:	1002f8bd 	.word	0x1002f8bd
   14870:	f00f68e0 	.word	0xf00f68e0
   14874:	f8bdf9e1 	.word	0xf8bdf9e1
   14878:	68e32002 	.word	0x68e32002
   1487c:	60a34413 	.word	0x60a34413
   14880:	bf00e761 	.word	0xbf00e761
   14884:	200226b1 	.word	0x200226b1
   14888:	20020450 	.word	0x20020450
   1488c:	20020448 	.word	0x20020448
   14890:	2002044c 	.word	0x2002044c

00014894 <ipc_trace_handle>:
   14894:	e92d2200 	.word	0xe92d2200
   14898:	4bb04ff0 	.word	0x4bb04ff0
   1489c:	681bb083 	.word	0x681bb083
   148a0:	695c6919 	.word	0x695c6919
   148a4:	741a7c18 	.word	0x741a7c18
   148a8:	745a7c58 	.word	0x745a7c58
   148ac:	749a7c98 	.word	0x749a7c98
   148b0:	74da7cd8 	.word	0x74da7cd8
   148b4:	751a7d18 	.word	0x751a7d18
   148b8:	755a7d58 	.word	0x755a7d58
   148bc:	759a7d98 	.word	0x759a7d98
   148c0:	75da7dd8 	.word	0x75da7dd8
   148c4:	3901b1b9 	.word	0x3901b1b9
   148c8:	d8142903 	.word	0xd8142903
   148cc:	f011e8df 	.word	0xf011e8df
   148d0:	010300d6 	.word	0x010300d6
   148d4:	00160004 	.word	0x00160004
   148d8:	20032501 	.word	0x20032501
   148dc:	f06f2200 	.word	0xf06f2200
   148e0:	4c9f015f 	.word	0x4c9f015f
   148e4:	7a1c7025 	.word	0x7a1c7025
   148e8:	7a587218 	.word	0x7a587218
   148ec:	7a98725a 	.word	0x7a98725a
   148f0:	7ada729a 	.word	0x7ada729a
   148f4:	b00372d9 	.word	0xb00372d9
   148f8:	8ff0e8bd 	.word	0x8ff0e8bd
   148fc:	22002104 	.word	0x22002104
   14900:	005ff06f 	.word	0x005ff06f
   14904:	72197a1c 	.word	0x72197a1c
   14908:	725a7a59 	.word	0x725a7a59
   1490c:	7a9c4994 	.word	0x7a9c4994
   14910:	7adc729a 	.word	0x7adc729a
   14914:	700a72d8 	.word	0x700a72d8
   14918:	2b00780b 	.word	0x2b00780b
   1491c:	8117f000 	.word	0x8117f000
   14920:	681c4b90 	.word	0x681c4b90
   14924:	686368a2 	.word	0x686368a2
   14928:	d02d429a 	.word	0xd02d429a
   1492c:	63eff64b 	.word	0x63eff64b
   14930:	3000f8ad 	.word	0x3000f8ad
   14934:	466e7823 	.word	0x466e7823
   14938:	3004f88d 	.word	0x3004f88d
   1493c:	21056863 	.word	0x21056863
   14940:	bf2a429a 	.word	0xbf2a429a
   14944:	1a9f6927 	.word	0x1a9f6927
   14948:	429a1abf 	.word	0x429a1abf
   1494c:	2500bf94 	.word	0x2500bf94
   14950:	b2bf68e5 	.word	0xb2bf68e5
   14954:	1b5bbf88 	.word	0x1b5bbf88
   14958:	bf884630 	.word	0xbf884630
   1495c:	f8adb29d 	.word	0xf8adb29d
   14960:	f00f7002 	.word	0xf00f7002
   14964:	f8bdf969 	.word	0xf8bdf969
   14968:	68a01002 	.word	0x68a01002
   1496c:	f964f00f 	.word	0xf964f00f
   14970:	692268a3 	.word	0x692268a3
   14974:	4297441f 	.word	0x4297441f
   14978:	68e3bf08 	.word	0x68e3bf08
   1497c:	bf0860a7 	.word	0xbf0860a7
   14980:	2d0060a3 	.word	0x2d0060a3
   14984:	80d2f040 	.word	0x80d2f040
   14988:	681c4b77 	.word	0x681c4b77
   1498c:	686368a2 	.word	0x686368a2
   14990:	d02d429a 	.word	0xd02d429a
   14994:	63eff64b 	.word	0x63eff64b
   14998:	3000f8ad 	.word	0x3000f8ad
   1499c:	466e7823 	.word	0x466e7823
   149a0:	3004f88d 	.word	0x3004f88d
   149a4:	21056863 	.word	0x21056863
   149a8:	bf2a429a 	.word	0xbf2a429a
   149ac:	1a9f6927 	.word	0x1a9f6927
   149b0:	429a1abf 	.word	0x429a1abf
   149b4:	2500bf94 	.word	0x2500bf94
   149b8:	b2bf68e5 	.word	0xb2bf68e5
   149bc:	1b5bbf88 	.word	0x1b5bbf88
   149c0:	bf884630 	.word	0xbf884630
   149c4:	f8adb29d 	.word	0xf8adb29d
   149c8:	f00f7002 	.word	0xf00f7002
   149cc:	f8bdf935 	.word	0xf8bdf935
   149d0:	68a01002 	.word	0x68a01002
   149d4:	f930f00f 	.word	0xf930f00f
   149d8:	692268a3 	.word	0x692268a3
   149dc:	4297441f 	.word	0x4297441f
   149e0:	68e3bf08 	.word	0x68e3bf08
   149e4:	bf0860a7 	.word	0xbf0860a7
   149e8:	2d0060a3 	.word	0x2d0060a3
   149ec:	808df040 	.word	0x808df040
   149f0:	681c4b5e 	.word	0x681c4b5e
   149f4:	686368a2 	.word	0x686368a2
   149f8:	f43f429a 	.word	0xf43f429a
   149fc:	f64baf7c 	.word	0xf64baf7c
   14a00:	f8ad63ef 	.word	0xf8ad63ef
   14a04:	78233000 	.word	0x78233000
   14a08:	f88d466e 	.word	0xf88d466e
   14a0c:	68633004 	.word	0x68633004
   14a10:	429a2105 	.word	0x429a2105
   14a14:	6927bf2a 	.word	0x6927bf2a
   14a18:	1abf1a9f 	.word	0x1abf1a9f
   14a1c:	bf94429a 	.word	0xbf94429a
   14a20:	68e52500 	.word	0x68e52500
   14a24:	bf88b2bf 	.word	0xbf88b2bf
   14a28:	46301b5b 	.word	0x46301b5b
   14a2c:	b29dbf88 	.word	0xb29dbf88
   14a30:	7002f8ad 	.word	0x7002f8ad
   14a34:	f900f00f 	.word	0xf900f00f
   14a38:	1002f8bd 	.word	0x1002f8bd
   14a3c:	f00f68a0 	.word	0xf00f68a0
   14a40:	68a3f8fb 	.word	0x68a3f8fb
   14a44:	441f6922 	.word	0x441f6922
   14a48:	bf084297 	.word	0xbf084297
   14a4c:	60a768e3 	.word	0x60a768e3
   14a50:	60a3bf08 	.word	0x60a3bf08
   14a54:	f43f2d00 	.word	0xf43f2d00
   14a58:	2105af4e 	.word	0x2105af4e
   14a5c:	f8ad4630 	.word	0xf8ad4630
   14a60:	f00f5002 	.word	0xf00f5002
   14a64:	f8bdf8e9 	.word	0xf8bdf8e9
   14a68:	68e01002 	.word	0x68e01002
   14a6c:	f8e4f00f 	.word	0xf8e4f00f
   14a70:	2002f8bd 	.word	0x2002f8bd
   14a74:	441368e3 	.word	0x441368e3
   14a78:	e73c60a3 	.word	0xe73c60a3
   14a7c:	78114a38 	.word	0x78114a38
   14a80:	2100b109 	.word	0x2100b109
   14a84:	68a57011 	.word	0x68a57011
   14a88:	d0392d00 	.word	0xd0392d00
   14a8c:	0c00f04f 	.word	0x0c00f04f
   14a90:	a0d4f8df 	.word	0xa0d4f8df
   14a94:	b0ccf8df 	.word	0xb0ccf8df
   14a98:	46e14934 	.word	0x46e14934
   14a9c:	46624666 	.word	0x46624666
   14aa0:	e000f8d1 	.word	0xe000f8d1
   14aa4:	8000f8da 	.word	0x8000f8da
   14aa8:	7000f8db 	.word	0x7000f8db
   14aac:	2963e008 	.word	0x2963e008
   14ab0:	2961d016 	.word	0x2961d016
   14ab4:	4607bf04 	.word	0x4607bf04
   14ab8:	32012601 	.word	0x32012601
   14abc:	d01342aa 	.word	0xd01342aa
   14ac0:	eb041c91 	.word	0xeb041c91
   14ac4:	68480181 	.word	0x68480181
   14ac8:	29627801 	.word	0x29627801
   14acc:	4680d1ef 	.word	0x4680d1ef
   14ad0:	0901f04f 	.word	0x0901f04f
   14ad4:	f7fce7f1 	.word	0xf7fce7f1
   14ad8:	b003fc27 	.word	0xb003fc27
   14adc:	8ff0e8bd 	.word	0x8ff0e8bd
   14ae0:	f04f4686 	.word	0xf04f4686
   14ae4:	e7e80c01 	.word	0xe7e80c01
   14ae8:	f1b9bba6 	.word	0xf1b9bba6
   14aec:	d0010f00 	.word	0xd0010f00
   14af0:	8000f8ca 	.word	0x8000f8ca
   14af4:	0f00f1bc 	.word	0x0f00f1bc
   14af8:	4a1cd002 	.word	0x4a1cd002
   14afc:	e000f8c2 	.word	0xe000f8c2
   14b00:	22002001 	.word	0x22002001
   14b04:	015ff06f 	.word	0x015ff06f
   14b08:	2105e6ed 	.word	0x2105e6ed
   14b0c:	f8ad4630 	.word	0xf8ad4630
   14b10:	f00f5002 	.word	0xf00f5002
   14b14:	f8bdf891 	.word	0xf8bdf891
   14b18:	68e01002 	.word	0x68e01002
   14b1c:	f88cf00f 	.word	0xf88cf00f
   14b20:	2002f8bd 	.word	0x2002f8bd
   14b24:	441368e3 	.word	0x441368e3
   14b28:	e76160a3 	.word	0xe76160a3
   14b2c:	46302105 	.word	0x46302105
   14b30:	5002f8ad 	.word	0x5002f8ad
   14b34:	f880f00f 	.word	0xf880f00f
   14b38:	1002f8bd 	.word	0x1002f8bd
   14b3c:	f00f68e0 	.word	0xf00f68e0
   14b40:	f8bdf87b 	.word	0xf8bdf87b
   14b44:	68e32002 	.word	0x68e32002
   14b48:	60a34413 	.word	0x60a34413
   14b4c:	f7fce71c 	.word	0xf7fce71c
   14b50:	e6e5fbf3 	.word	0xe6e5fbf3
   14b54:	7000f8cb 	.word	0x7000f8cb
   14b58:	bf00e7c7 	.word	0xbf00e7c7
   14b5c:	20020454 	.word	0x20020454
   14b60:	200226b1 	.word	0x200226b1
   14b64:	20020450 	.word	0x20020450
   14b68:	20020448 	.word	0x20020448
   14b6c:	2002044c 	.word	0x2002044c

00014b70 <rpc_trace_coredump_in_progress>:
   14b70:	78184b01 	.word	0x78184b01
   14b74:	bf004770 	.word	0xbf004770
   14b78:	200226b1 	.word	0x200226b1

00014b7c <ecp_modp>:
   14b7c:	6e4bb570 	.word	0x6e4bb570
   14b80:	2b004604 	.word	0x2b004604
   14b84:	6803d03d 	.word	0x6803d03d
   14b88:	2b00460d 	.word	0x2b00460d
   14b8c:	4620db2f 	.word	0x4620db2f
   14b90:	fe06f005 	.word	0xfe06f005
   14b94:	ebb06dab 	.word	0xebb06dab
   14b98:	d82d0f43 	.word	0xd82d0f43
   14b9c:	46206e6b 	.word	0x46206e6b
   14ba0:	46064798 	.word	0x46064798
   14ba4:	3504bb08 	.word	0x3504bb08
   14ba8:	2100e00a 	.word	0x2100e00a
   14bac:	f0064620 	.word	0xf0064620
   14bb0:	b1a0f8c7 	.word	0xb1a0f8c7
   14bb4:	4621462a 	.word	0x4621462a
   14bb8:	f0064620 	.word	0xf0064620
   14bbc:	b9e8fa79 	.word	0xb9e8fa79
   14bc0:	2b006823 	.word	0x2b006823
   14bc4:	4629dbf1 	.word	0x4629dbf1
   14bc8:	f0064620 	.word	0xf0064620
   14bcc:	2800f851 	.word	0x2800f851
   14bd0:	462adb0b 	.word	0x462adb0b
   14bd4:	46204621 	.word	0x46204621
   14bd8:	f9aaf006 	.word	0xf9aaf006
   14bdc:	4629b970 	.word	0x4629b970
   14be0:	f0064620 	.word	0xf0064620
   14be4:	2800f845 	.word	0x2800f845
   14be8:	4630daf3 	.word	0x4630daf3
   14bec:	2100bd70 	.word	0x2100bd70
   14bf0:	f8a6f006 	.word	0xf8a6f006
   14bf4:	d0ca2800 	.word	0xd0ca2800
   14bf8:	e7f64e05 	.word	0xe7f64e05
   14bfc:	46304606 	.word	0x46304606
   14c00:	1d0abd70 	.word	0x1d0abd70
   14c04:	4070e8bd 	.word	0x4070e8bd
   14c08:	f0074601 	.word	0xf0074601
   14c0c:	bf00b84d 	.word	0xbf00b84d
   14c10:	ffffb080 	.word	0xffffb080

00014c14 <ecp_double_jac>:
   14c14:	43f0e92d 	.word	0x43f0e92d
   14c18:	b08d4606 	.word	0xb08d4606
   14c1c:	46884668 	.word	0x46884668
   14c20:	f0054615 	.word	0xf0054615
   14c24:	a803fb63 	.word	0xa803fb63
   14c28:	fb60f005 	.word	0xfb60f005
   14c2c:	f005a806 	.word	0xf005a806
   14c30:	a809fb5d 	.word	0xa809fb5d
   14c34:	fb5af005 	.word	0xfb5af005
   14c38:	2b0069b3 	.word	0x2b0069b3
   14c3c:	80b2f000 	.word	0x80b2f000
   14c40:	4629462a 	.word	0x4629462a
   14c44:	f006a803 	.word	0xf006a803
   14c48:	4604fb67 	.word	0x4604fb67
   14c4c:	4668b178 	.word	0x4668b178
   14c50:	fb54f005 	.word	0xfb54f005
   14c54:	f005a803 	.word	0xf005a803
   14c58:	a806fb51 	.word	0xa806fb51
   14c5c:	fb4ef005 	.word	0xfb4ef005
   14c60:	f005a809 	.word	0xf005a809
   14c64:	4620fb4b 	.word	0x4620fb4b
   14c68:	e8bdb00d 	.word	0xe8bdb00d
   14c6c:	463183f0 	.word	0x463183f0
   14c70:	f7ffa803 	.word	0xf7ffa803
   14c74:	4604ff83 	.word	0x4604ff83
   14c78:	d1e82800 	.word	0xd1e82800
   14c7c:	a9032203 	.word	0xa9032203
   14c80:	f0064668 	.word	0xf0064668
   14c84:	4604fc41 	.word	0x4604fc41
   14c88:	d1e02800 	.word	0xd1e02800
   14c8c:	e0071d37 	.word	0xe0071d37
   14c90:	4669463a 	.word	0x4669463a
   14c94:	f0064668 	.word	0xf0064668
   14c98:	4604f94b 	.word	0x4604f94b
   14c9c:	d1d62800 	.word	0xd1d62800
   14ca0:	46684639 	.word	0x46684639
   14ca4:	ffe4f005 	.word	0xffe4f005
   14ca8:	daf12800 	.word	0xdaf12800
   14cac:	0910f106 	.word	0x0910f106
   14cb0:	21004648 	.word	0x21004648
   14cb4:	f844f006 	.word	0xf844f006
   14cb8:	f0402800 	.word	0xf0402800
   14cbc:	f10580e2 	.word	0xf10580e2
   14cc0:	464a090c 	.word	0x464a090c
   14cc4:	a8064649 	.word	0xa8064649
   14cc8:	fb26f006 	.word	0xfb26f006
   14ccc:	28004604 	.word	0x28004604
   14cd0:	4631d1bd 	.word	0x4631d1bd
   14cd4:	f7ffa806 	.word	0xf7ffa806
   14cd8:	4604ff51 	.word	0x4604ff51
   14cdc:	d1b62800 	.word	0xd1b62800
   14ce0:	a8062101 	.word	0xa8062101
   14ce4:	fe9ef005 	.word	0xfe9ef005
   14ce8:	b1404604 	.word	0xb1404604
   14cec:	a906e7af 	.word	0xa906e7af
   14cf0:	4608463a 	.word	0x4608463a
   14cf4:	f91cf006 	.word	0xf91cf006
   14cf8:	28004604 	.word	0x28004604
   14cfc:	4639d1a7 	.word	0x4639d1a7
   14d00:	f005a806 	.word	0xf005a806
   14d04:	2800ffb5 	.word	0x2800ffb5
   14d08:	aa06daf1 	.word	0xaa06daf1
   14d0c:	a8034629 	.word	0xa8034629
   14d10:	fb02f006 	.word	0xfb02f006
   14d14:	28004604 	.word	0x28004604
   14d18:	4631d199 	.word	0x4631d199
   14d1c:	f7ffa803 	.word	0xf7ffa803
   14d20:	4604ff2d 	.word	0x4604ff2d
   14d24:	d1922800 	.word	0xd1922800
   14d28:	a8032101 	.word	0xa8032101
   14d2c:	fe7af005 	.word	0xfe7af005
   14d30:	b1404604 	.word	0xb1404604
   14d34:	a903e78b 	.word	0xa903e78b
   14d38:	4608463a 	.word	0x4608463a
   14d3c:	f8f8f006 	.word	0xf8f8f006
   14d40:	28004604 	.word	0x28004604
   14d44:	4639d183 	.word	0x4639d183
   14d48:	f005a803 	.word	0xf005a803
   14d4c:	2800ff91 	.word	0x2800ff91
   14d50:	aa06daf1 	.word	0xaa06daf1
   14d54:	a8094611 	.word	0xa8094611
   14d58:	fadef006 	.word	0xfadef006
   14d5c:	28004604 	.word	0x28004604
   14d60:	af75f47f 	.word	0xaf75f47f
   14d64:	a8094631 	.word	0xa8094631
   14d68:	ff08f7ff 	.word	0xff08f7ff
   14d6c:	28004604 	.word	0x28004604
   14d70:	af6df47f 	.word	0xaf6df47f
   14d74:	a8092101 	.word	0xa8092101
   14d78:	fe54f005 	.word	0xfe54f005
   14d7c:	28004604 	.word	0x28004604
   14d80:	af65f47f 	.word	0xaf65f47f
   14d84:	a8094639 	.word	0xa8094639
   14d88:	ff72f005 	.word	0xff72f005
   14d8c:	f2c02800 	.word	0xf2c02800
   14d90:	a90980c5 	.word	0xa90980c5
   14d94:	4608463a 	.word	0x4608463a
   14d98:	f8caf006 	.word	0xf8caf006
   14d9c:	28004604 	.word	0x28004604
   14da0:	e754d0f0 	.word	0xe754d0f0
   14da4:	0218f105 	.word	0x0218f105
   14da8:	a8034611 	.word	0xa8034611
   14dac:	fab4f006 	.word	0xfab4f006
   14db0:	28004604 	.word	0x28004604
   14db4:	af4bf47f 	.word	0xaf4bf47f
   14db8:	a8034631 	.word	0xa8034631
   14dbc:	fedef7ff 	.word	0xfedef7ff
   14dc0:	28004604 	.word	0x28004604
   14dc4:	af43f47f 	.word	0xaf43f47f
   14dc8:	4629aa03 	.word	0x4629aa03
   14dcc:	f006a806 	.word	0xf006a806
   14dd0:	4604f96f 	.word	0x4604f96f
   14dd4:	f47f2800 	.word	0xf47f2800
   14dd8:	1d37af3a 	.word	0x1d37af3a
   14ddc:	a906e008 	.word	0xa906e008
   14de0:	4608463a 	.word	0x4608463a
   14de4:	f8a4f006 	.word	0xf8a4f006
   14de8:	28004604 	.word	0x28004604
   14dec:	af2ff47f 	.word	0xaf2ff47f
   14df0:	a8064639 	.word	0xa8064639
   14df4:	ff3cf005 	.word	0xff3cf005
   14df8:	daf02800 	.word	0xdaf02800
   14dfc:	4629aa03 	.word	0x4629aa03
   14e00:	f006a809 	.word	0xf006a809
   14e04:	4604f9c9 	.word	0x4604f9c9
   14e08:	e720b170 	.word	0xe720b170
   14e0c:	a8092100 	.word	0xa8092100
   14e10:	ff96f005 	.word	0xff96f005
   14e14:	a909b158 	.word	0xa909b158
   14e18:	4608463a 	.word	0x4608463a
   14e1c:	f948f006 	.word	0xf948f006
   14e20:	28004604 	.word	0x28004604
   14e24:	af13f47f 	.word	0xaf13f47f
   14e28:	2b009b09 	.word	0x2b009b09
   14e2c:	aa09dbee 	.word	0xaa09dbee
   14e30:	a803a906 	.word	0xa803a906
   14e34:	fa70f006 	.word	0xfa70f006
   14e38:	28004604 	.word	0x28004604
   14e3c:	af07f47f 	.word	0xaf07f47f
   14e40:	a8034631 	.word	0xa8034631
   14e44:	fe9af7ff 	.word	0xfe9af7ff
   14e48:	28004604 	.word	0x28004604
   14e4c:	aefff47f 	.word	0xaefff47f
   14e50:	a9032203 	.word	0xa9032203
   14e54:	f0064668 	.word	0xf0064668
   14e58:	4604fb57 	.word	0x4604fb57
   14e5c:	f47f2800 	.word	0xf47f2800
   14e60:	4639aef6 	.word	0x4639aef6
   14e64:	f0054668 	.word	0xf0054668
   14e68:	2800ff03 	.word	0x2800ff03
   14e6c:	af27f6ff 	.word	0xaf27f6ff
   14e70:	4669463a 	.word	0x4669463a
   14e74:	f0064668 	.word	0xf0064668
   14e78:	4604f85b 	.word	0x4604f85b
   14e7c:	d0f02800 	.word	0xd0f02800
   14e80:	f105e6e5 	.word	0xf105e6e5
   14e84:	46110218 	.word	0x46110218
   14e88:	f006a803 	.word	0xf006a803
   14e8c:	4604fa45 	.word	0x4604fa45
   14e90:	f47f2800 	.word	0xf47f2800
   14e94:	4631aedc 	.word	0x4631aedc
   14e98:	f7ffa803 	.word	0xf7ffa803
   14e9c:	4604fe6f 	.word	0x4604fe6f
   14ea0:	f47f2800 	.word	0xf47f2800
   14ea4:	aa03aed4 	.word	0xaa03aed4
   14ea8:	a8064611 	.word	0xa8064611
   14eac:	fa34f006 	.word	0xfa34f006
   14eb0:	28004604 	.word	0x28004604
   14eb4:	aecbf47f 	.word	0xaecbf47f
   14eb8:	a8064631 	.word	0xa8064631
   14ebc:	fe5ef7ff 	.word	0xfe5ef7ff
   14ec0:	28004604 	.word	0x28004604
   14ec4:	aec3f47f 	.word	0xaec3f47f
   14ec8:	a906464a 	.word	0xa906464a
   14ecc:	f006a803 	.word	0xf006a803
   14ed0:	4604fa23 	.word	0x4604fa23
   14ed4:	f47f2800 	.word	0xf47f2800
   14ed8:	4631aeba 	.word	0x4631aeba
   14edc:	f7ffa803 	.word	0xf7ffa803
   14ee0:	4604fe4d 	.word	0x4604fe4d
   14ee4:	f47f2800 	.word	0xf47f2800
   14ee8:	aa03aeb2 	.word	0xaa03aeb2
   14eec:	46684669 	.word	0x46684669
   14ef0:	f8def006 	.word	0xf8def006
   14ef4:	28004604 	.word	0x28004604
   14ef8:	aea9f47f 	.word	0xaea9f47f
   14efc:	46684639 	.word	0x46684639
   14f00:	feb6f005 	.word	0xfeb6f005
   14f04:	f6ff2800 	.word	0xf6ff2800
   14f08:	463aaeda 	.word	0x463aaeda
   14f0c:	46684669 	.word	0x46684669
   14f10:	f80ef006 	.word	0xf80ef006
   14f14:	28004604 	.word	0x28004604
   14f18:	e698d0f0 	.word	0xe698d0f0
   14f1c:	4669466a 	.word	0x4669466a
   14f20:	f006a806 	.word	0xf006a806
   14f24:	4604f9f9 	.word	0x4604f9f9
   14f28:	f47f2800 	.word	0xf47f2800
   14f2c:	4631ae90 	.word	0x4631ae90
   14f30:	f7ffa806 	.word	0xf7ffa806
   14f34:	4604fe23 	.word	0x4604fe23
   14f38:	f47f2800 	.word	0xf47f2800
   14f3c:	a906ae88 	.word	0xa906ae88
   14f40:	4608aa03 	.word	0x4608aa03
   14f44:	f928f006 	.word	0xf928f006
   14f48:	28004604 	.word	0x28004604
   14f4c:	ae7ff47f 	.word	0xae7ff47f
   14f50:	2b009b06 	.word	0x2b009b06
   14f54:	2100da0d 	.word	0x2100da0d
   14f58:	f005a806 	.word	0xf005a806
   14f5c:	b140fef1 	.word	0xb140fef1
   14f60:	463aa906 	.word	0x463aa906
   14f64:	f0064608 	.word	0xf0064608
   14f68:	4604f8a3 	.word	0x4604f8a3
   14f6c:	d0ef2800 	.word	0xd0ef2800
   14f70:	a906e66d 	.word	0xa906e66d
   14f74:	4608aa03 	.word	0x4608aa03
   14f78:	f90ef006 	.word	0xf90ef006
   14f7c:	28004604 	.word	0x28004604
   14f80:	ae65f47f 	.word	0xae65f47f
   14f84:	2b009b06 	.word	0x2b009b06
   14f88:	2100da0d 	.word	0x2100da0d
   14f8c:	f005a806 	.word	0xf005a806
   14f90:	b140fed7 	.word	0xb140fed7
   14f94:	463aa906 	.word	0x463aa906
   14f98:	f0064608 	.word	0xf0064608
   14f9c:	4604f889 	.word	0x4604f889
   14fa0:	d0ef2800 	.word	0xd0ef2800
   14fa4:	a903e653 	.word	0xa903e653
   14fa8:	4608aa06 	.word	0x4608aa06
   14fac:	f8f4f006 	.word	0xf8f4f006
   14fb0:	28004604 	.word	0x28004604
   14fb4:	ae4bf47f 	.word	0xae4bf47f
   14fb8:	2b009b03 	.word	0x2b009b03
   14fbc:	2100da0d 	.word	0x2100da0d
   14fc0:	f005a803 	.word	0xf005a803
   14fc4:	b140febd 	.word	0xb140febd
   14fc8:	463aa903 	.word	0x463aa903
   14fcc:	f0064608 	.word	0xf0064608
   14fd0:	4604f86f 	.word	0x4604f86f
   14fd4:	d0ef2800 	.word	0xd0ef2800
   14fd8:	a903e639 	.word	0xa903e639
   14fdc:	4608466a 	.word	0x4608466a
   14fe0:	f99af006 	.word	0xf99af006
   14fe4:	28004604 	.word	0x28004604
   14fe8:	ae31f47f 	.word	0xae31f47f
   14fec:	a8034631 	.word	0xa8034631
   14ff0:	fdc4f7ff 	.word	0xfdc4f7ff
   14ff4:	28004604 	.word	0x28004604
   14ff8:	ae29f47f 	.word	0xae29f47f
   14ffc:	aa09a903 	.word	0xaa09a903
   15000:	f0064608 	.word	0xf0064608
   15004:	4604f8c9 	.word	0x4604f8c9
   15008:	f47f2800 	.word	0xf47f2800
   1500c:	9b03ae20 	.word	0x9b03ae20
   15010:	da0d2b00 	.word	0xda0d2b00
   15014:	a8032100 	.word	0xa8032100
   15018:	fe92f005 	.word	0xfe92f005
   1501c:	a903b140 	.word	0xa903b140
   15020:	4608463a 	.word	0x4608463a
   15024:	f844f006 	.word	0xf844f006
   15028:	28004604 	.word	0x28004604
   1502c:	e60ed0ef 	.word	0xe60ed0ef
   15030:	0218f105 	.word	0x0218f105
   15034:	a8094649 	.word	0xa8094649
   15038:	f96ef006 	.word	0xf96ef006
   1503c:	28004604 	.word	0x28004604
   15040:	ae05f47f 	.word	0xae05f47f
   15044:	a8094631 	.word	0xa8094631
   15048:	fd98f7ff 	.word	0xfd98f7ff
   1504c:	28004604 	.word	0x28004604
   15050:	adfdf47f 	.word	0xadfdf47f
   15054:	a8092101 	.word	0xa8092101
   15058:	fce4f005 	.word	0xfce4f005
   1505c:	28004604 	.word	0x28004604
   15060:	adf5f47f 	.word	0xadf5f47f
   15064:	a8094639 	.word	0xa8094639
   15068:	fe02f005 	.word	0xfe02f005
   1506c:	db082800 	.word	0xdb082800
   15070:	463aa909 	.word	0x463aa909
   15074:	f0054608 	.word	0xf0054608
   15078:	4604ff5b 	.word	0x4604ff5b
   1507c:	d0f12800 	.word	0xd0f12800
   15080:	a906e5e5 	.word	0xa906e5e5
   15084:	f0054640 	.word	0xf0054640
   15088:	4604f9b5 	.word	0x4604f9b5
   1508c:	f47f2800 	.word	0xf47f2800
   15090:	a903adde 	.word	0xa903adde
   15094:	000cf108 	.word	0x000cf108
   15098:	f9acf005 	.word	0xf9acf005
   1509c:	28004604 	.word	0x28004604
   150a0:	add5f47f 	.word	0xadd5f47f
   150a4:	0018f108 	.word	0x0018f108
   150a8:	f005a909 	.word	0xf005a909
   150ac:	4604f9a3 	.word	0x4604f9a3
   150b0:	bf00e5cd 	.word	0xbf00e5cd

000150b4 <ecp_normalize_jac>:
   150b4:	f101b5f0 	.word	0xf101b5f0
   150b8:	b0870518 	.word	0xb0870518
   150bc:	4607460e 	.word	0x4607460e
   150c0:	46282100 	.word	0x46282100
   150c4:	fe3cf005 	.word	0xfe3cf005
   150c8:	4604b918 	.word	0x4604b918
   150cc:	b0074620 	.word	0xb0074620
   150d0:	4668bdf0 	.word	0x4668bdf0
   150d4:	f90af005 	.word	0xf90af005
   150d8:	f005a803 	.word	0xf005a803
   150dc:	4668f907 	.word	0x4668f907
   150e0:	46291d3a 	.word	0x46291d3a
   150e4:	f936f007 	.word	0xf936f007
   150e8:	b1404604 	.word	0xb1404604
   150ec:	f0054668 	.word	0xf0054668
   150f0:	a803f905 	.word	0xa803f905
   150f4:	f902f005 	.word	0xf902f005
   150f8:	b0074620 	.word	0xb0074620
   150fc:	466abdf0 	.word	0x466abdf0
   15100:	a8034669 	.word	0xa8034669
   15104:	f908f006 	.word	0xf908f006
   15108:	28004604 	.word	0x28004604
   1510c:	4639d1ee 	.word	0x4639d1ee
   15110:	f7ffa803 	.word	0xf7ffa803
   15114:	4604fd33 	.word	0x4604fd33
   15118:	d1e72800 	.word	0xd1e72800
   1511c:	4631aa03 	.word	0x4631aa03
   15120:	f0064630 	.word	0xf0064630
   15124:	4604f8f9 	.word	0x4604f8f9
   15128:	d1df2800 	.word	0xd1df2800
   1512c:	46304639 	.word	0x46304639
   15130:	fd24f7ff 	.word	0xfd24f7ff
   15134:	28004604 	.word	0x28004604
   15138:	360cd1d8 	.word	0x360cd1d8
   1513c:	46304631 	.word	0x46304631
   15140:	f006aa03 	.word	0xf006aa03
   15144:	4604f8e9 	.word	0x4604f8e9
   15148:	d1cf2800 	.word	0xd1cf2800
   1514c:	46304639 	.word	0x46304639
   15150:	fd14f7ff 	.word	0xfd14f7ff
   15154:	28004604 	.word	0x28004604
   15158:	466ad1c8 	.word	0x466ad1c8
   1515c:	46304631 	.word	0x46304631
   15160:	f8daf006 	.word	0xf8daf006
   15164:	28004604 	.word	0x28004604
   15168:	4639d1c0 	.word	0x4639d1c0
   1516c:	f7ff4630 	.word	0xf7ff4630
   15170:	4604fd05 	.word	0x4604fd05
   15174:	d1b92800 	.word	0xd1b92800
   15178:	21014628 	.word	0x21014628
   1517c:	fac6f005 	.word	0xfac6f005
   15180:	e7b34604 	.word	0xe7b34604

00015184 <ecp_normalize_jac_many.part.3>:
   15184:	4ff0e92d 	.word	0x4ff0e92d
   15188:	b08b4682 	.word	0xb08b4682
   1518c:	4610468b 	.word	0x4610468b
   15190:	4616210c 	.word	0x4616210c
   15194:	fcfef008 	.word	0xfcfef008
   15198:	f0002800 	.word	0xf0002800
   1519c:	468080fe 	.word	0x468080fe
   151a0:	f005a801 	.word	0xf005a801
   151a4:	a804f8a3 	.word	0xa804f8a3
   151a8:	f8a0f005 	.word	0xf8a0f005
   151ac:	f005a807 	.word	0xf005a807
   151b0:	f8dbf89d 	.word	0xf8dbf89d
   151b4:	46401000 	.word	0x46401000
   151b8:	f0053118 	.word	0xf0053118
   151bc:	4604f91b 	.word	0x4604f91b
   151c0:	2e01bb60 	.word	0x2e01bb60
   151c4:	46d9d946 	.word	0x46d9d946
   151c8:	f1082701 	.word	0xf1082701
   151cc:	e008050c 	.word	0xe008050c
   151d0:	46514628 	.word	0x46514628
   151d4:	fcd2f7ff 	.word	0xfcd2f7ff
   151d8:	4604350c 	.word	0x4604350c
   151dc:	42beb968 	.word	0x42beb968
   151e0:	f859d038 	.word	0xf859d038
   151e4:	f1a52f04 	.word	0xf1a52f04
   151e8:	3218010c 	.word	0x3218010c
   151ec:	f0064628 	.word	0xf0064628
   151f0:	3701f893 	.word	0x3701f893
   151f4:	28004604 	.word	0x28004604
   151f8:	a801d0ea 	.word	0xa801d0ea
   151fc:	f87ef005 	.word	0xf87ef005
   15200:	f005a804 	.word	0xf005a804
   15204:	a807f87b 	.word	0xa807f87b
   15208:	f878f005 	.word	0xf878f005
   1520c:	a901e010 	.word	0xa901e010
   15210:	f005a804 	.word	0xf005a804
   15214:	4604f8ef 	.word	0x4604f8ef
   15218:	d0532800 	.word	0xd0532800
   1521c:	f005a801 	.word	0xf005a801
   15220:	a804f86d 	.word	0xa804f86d
   15224:	f86af005 	.word	0xf86af005
   15228:	f005a807 	.word	0xf005a807
   1522c:	b156f867 	.word	0xb156f867
   15230:	eb064645 	.word	0xeb064645
   15234:	eb080646 	.word	0xeb080646
   15238:	46280686 	.word	0x46280686
   1523c:	f005350c 	.word	0xf005350c
   15240:	42b5f85d 	.word	0x42b5f85d
   15244:	4640d1f9 	.word	0x4640d1f9
   15248:	fcb8f008 	.word	0xfcb8f008
   1524c:	b00b4620 	.word	0xb00b4620
   15250:	8ff0e8bd 	.word	0x8ff0e8bd
   15254:	0546eb06 	.word	0x0546eb06
   15258:	f1a500ad 	.word	0xf1a500ad
   1525c:	4441010c 	.word	0x4441010c
   15260:	0204f10a 	.word	0x0204f10a
   15264:	f007a801 	.word	0xf007a801
   15268:	4604f875 	.word	0x4604f875
   1526c:	d1d52800 	.word	0xd1d52800
   15270:	4380f106 	.word	0x4380f106
   15274:	3b013d18 	.word	0x3b013d18
   15278:	eb0b4445 	.word	0xeb0b4445
   1527c:	1e770b83 	.word	0x1e770b83
   15280:	d0c42f00 	.word	0xd0c42f00
   15284:	a901462a 	.word	0xa901462a
   15288:	f006a804 	.word	0xf006a804
   1528c:	4604f845 	.word	0x4604f845
   15290:	d1c32800 	.word	0xd1c32800
   15294:	a8044651 	.word	0xa8044651
   15298:	fc70f7ff 	.word	0xfc70f7ff
   1529c:	28004604 	.word	0x28004604
   152a0:	f8dbd1bc 	.word	0xf8dbd1bc
   152a4:	a9012000 	.word	0xa9012000
   152a8:	46083218 	.word	0x46083218
   152ac:	f834f006 	.word	0xf834f006
   152b0:	28004604 	.word	0x28004604
   152b4:	4651d1b2 	.word	0x4651d1b2
   152b8:	f7ffa801 	.word	0xf7ffa801
   152bc:	4604fc5f 	.word	0x4604fc5f
   152c0:	d1ab2800 	.word	0xd1ab2800
   152c4:	4611aa04 	.word	0x4611aa04
   152c8:	f006a807 	.word	0xf006a807
   152cc:	4604f825 	.word	0x4604f825
   152d0:	d1a32800 	.word	0xd1a32800
   152d4:	a8074651 	.word	0xa8074651
   152d8:	fc50f7ff 	.word	0xfc50f7ff
   152dc:	28004604 	.word	0x28004604
   152e0:	f8dbd19c 	.word	0xf8dbd19c
   152e4:	aa071000 	.word	0xaa071000
   152e8:	f0064608 	.word	0xf0064608
   152ec:	4604f815 	.word	0x4604f815
   152f0:	d1932800 	.word	0xd1932800
   152f4:	f8db4651 	.word	0xf8db4651
   152f8:	f7ff0000 	.word	0xf7ff0000
   152fc:	4604fc3f 	.word	0x4604fc3f
   15300:	d18b2800 	.word	0xd18b2800
   15304:	1000f8db 	.word	0x1000f8db
   15308:	310caa07 	.word	0x310caa07
   1530c:	f0064608 	.word	0xf0064608
   15310:	4604f803 	.word	0x4604f803
   15314:	d1812800 	.word	0xd1812800
   15318:	0000f8db 	.word	0x0000f8db
   1531c:	300c4651 	.word	0x300c4651
   15320:	fc2cf7ff 	.word	0xfc2cf7ff
   15324:	28004604 	.word	0x28004604
   15328:	af78f47f 	.word	0xaf78f47f
   1532c:	1000f8db 	.word	0x1000f8db
   15330:	310caa04 	.word	0x310caa04
   15334:	f0054608 	.word	0xf0054608
   15338:	4604ffef 	.word	0x4604ffef
   1533c:	f47f2800 	.word	0xf47f2800
   15340:	f8dbaf6d 	.word	0xf8dbaf6d
   15344:	46510000 	.word	0x46510000
   15348:	f7ff300c 	.word	0xf7ff300c
   1534c:	4604fc17 	.word	0x4604fc17
   15350:	f47f2800 	.word	0xf47f2800
   15354:	f8daaf63 	.word	0xf8daaf63
   15358:	f8db1008 	.word	0xf8db1008
   1535c:	f0040000 	.word	0xf0040000
   15360:	4604ffe7 	.word	0x4604ffe7
   15364:	f47f2800 	.word	0xf47f2800
   15368:	f8dbaf59 	.word	0xf8dbaf59
   1536c:	f8da0000 	.word	0xf8da0000
   15370:	300c1008 	.word	0x300c1008
   15374:	ffdcf004 	.word	0xffdcf004
   15378:	28004604 	.word	0x28004604
   1537c:	af4ef47f 	.word	0xaf4ef47f
   15380:	0000f8db 	.word	0x0000f8db
   15384:	30183d0c 	.word	0x30183d0c
   15388:	0b04f1ab 	.word	0x0b04f1ab
   1538c:	ffb6f004 	.word	0xffb6f004
   15390:	f43f2f00 	.word	0xf43f2f00
   15394:	3f01af43 	.word	0x3f01af43
   15398:	4c01e772 	.word	0x4c01e772
   1539c:	bf00e756 	.word	0xbf00e756
   153a0:	ffffb280 	.word	0xffffb280

000153a4 <symbol_0002b14>:
   153a4:	b510b1b8 	.word	0xb510b1b8
   153a8:	227c4604 	.word	0x227c4604
   153ac:	f00f2100 	.word	0xf00f2100
   153b0:	f104fa73 	.word	0xf104fa73
   153b4:	f004007c 	.word	0xf004007c
   153b8:	f104ff99 	.word	0xf104ff99
   153bc:	f0040088 	.word	0xf0040088
   153c0:	f104ff95 	.word	0xf104ff95
   153c4:	f0040094 	.word	0xf0040094
   153c8:	f104ff91 	.word	0xf104ff91
   153cc:	e8bd00a0 	.word	0xe8bd00a0
   153d0:	f0044010 	.word	0xf0044010
   153d4:	4770bf8b 	.word	0x4770bf8b

000153d8 <symbol_0000ef7>:
   153d8:	d0482800 	.word	0xd0482800
   153dc:	6e03b570 	.word	0x6e03b570
   153e0:	2b014604 	.word	0x2b014604
   153e4:	6f60d123 	.word	0x6f60d123
   153e8:	6fa2b1c8 	.word	0x6fa2b1c8
   153ec:	2600b1aa 	.word	0x2600b1aa
   153f0:	03c6eb06 	.word	0x03c6eb06
   153f4:	0583eb10 	.word	0x0583eb10
   153f8:	4628d035 	.word	0x4628d035
   153fc:	ff7ef004 	.word	0xff7ef004
   15400:	000cf105 	.word	0x000cf105
   15404:	ff7af004 	.word	0xff7af004
   15408:	0018f105 	.word	0x0018f105
   1540c:	ff76f004 	.word	0xff76f004
   15410:	36016fa2 	.word	0x36016fa2
   15414:	6f604296 	.word	0x6f604296
   15418:	f008d3ea 	.word	0xf008d3ea
   1541c:	2200fbcf 	.word	0x2200fbcf
   15420:	037cf104 	.word	0x037cf104
   15424:	34017022 	.word	0x34017022
   15428:	d1fb429c 	.word	0xd1fb429c
   1542c:	3004bd70 	.word	0x3004bd70
   15430:	ff64f004 	.word	0xff64f004
   15434:	0010f104 	.word	0x0010f104
   15438:	ff60f004 	.word	0xff60f004
   1543c:	001cf104 	.word	0x001cf104
   15440:	ff5cf004 	.word	0xff5cf004
   15444:	0028f104 	.word	0x0028f104
   15448:	ff58f004 	.word	0xff58f004
   1544c:	0034f104 	.word	0x0034f104
   15450:	ff54f004 	.word	0xff54f004
   15454:	0040f104 	.word	0x0040f104
   15458:	ff50f004 	.word	0xff50f004
   1545c:	004cf104 	.word	0x004cf104
   15460:	ff4cf004 	.word	0xff4cf004
   15464:	3601e7bf 	.word	0x3601e7bf
   15468:	d3c14296 	.word	0xd3c14296
   1546c:	4770e7d5 	.word	0x4770e7d5

00015470 <symbol_0001d5f>:
   15470:	b510b1a8 	.word	0xb510b1a8
   15474:	f7ff4604 	.word	0xf7ff4604
   15478:	f104ffaf 	.word	0xf104ffaf
   1547c:	f004007c 	.word	0xf004007c
   15480:	f104ff3d 	.word	0xf104ff3d
   15484:	f0040088 	.word	0xf0040088
   15488:	f104ff39 	.word	0xf104ff39
   1548c:	f0040094 	.word	0xf0040094
   15490:	f104ff35 	.word	0xf104ff35
   15494:	e8bd00a0 	.word	0xe8bd00a0
   15498:	f0044010 	.word	0xf0044010
   1549c:	4770bf2f 	.word	0x4770bf2f

000154a0 <symbol_000d41f>:
   154a0:	2101b510 	.word	0x2101b510
   154a4:	f0054604 	.word	0xf0054604
   154a8:	b100f931 	.word	0xb100f931
   154ac:	2101bd10 	.word	0x2101bd10
   154b0:	000cf104 	.word	0x000cf104
   154b4:	f92af005 	.word	0xf92af005
   154b8:	d1f72800 	.word	0xd1f72800
   154bc:	f1044601 	.word	0xf1044601
   154c0:	e8bd0018 	.word	0xe8bd0018
   154c4:	f0054010 	.word	0xf0054010
   154c8:	bf00b921 	.word	0xbf00b921

000154cc <ecp_add_mixed>:
   154cc:	47f0e92d 	.word	0x47f0e92d
   154d0:	0518f102 	.word	0x0518f102
   154d4:	4681b096 	.word	0x4681b096
   154d8:	46284688 	.word	0x46284688
   154dc:	46172100 	.word	0x46172100
   154e0:	f005461e 	.word	0xf005461e
   154e4:	2800fc2d 	.word	0x2800fc2d
   154e8:	6a33d048 	.word	0x6a33d048
   154ec:	f106b18b 	.word	0xf106b18b
   154f0:	46200418 	.word	0x46200418
   154f4:	f0052100 	.word	0xf0052100
   154f8:	2800fc23 	.word	0x2800fc23
   154fc:	80d7f000 	.word	0x80d7f000
   15500:	b1336a33 	.word	0xb1336a33
   15504:	21014620 	.word	0x21014620
   15508:	fc1af005 	.word	0xfc1af005
   1550c:	f0402800 	.word	0xf0402800
   15510:	a80180e7 	.word	0xa80180e7
   15514:	feeaf004 	.word	0xfeeaf004
   15518:	f004a804 	.word	0xf004a804
   1551c:	a807fee7 	.word	0xa807fee7
   15520:	fee4f004 	.word	0xfee4f004
   15524:	f004a80a 	.word	0xf004a80a
   15528:	a80dfee1 	.word	0xa80dfee1
   1552c:	fedef004 	.word	0xfedef004
   15530:	f004a810 	.word	0xf004a810
   15534:	a813fedb 	.word	0xa813fedb
   15538:	fed8f004 	.word	0xfed8f004
   1553c:	4629462a 	.word	0x4629462a
   15540:	f005a801 	.word	0xf005a801
   15544:	4604fee9 	.word	0x4604fee9
   15548:	a801b380 	.word	0xa801b380
   1554c:	fed6f004 	.word	0xfed6f004
   15550:	f004a804 	.word	0xf004a804
   15554:	a807fed3 	.word	0xa807fed3
   15558:	fed0f004 	.word	0xfed0f004
   1555c:	f004a80a 	.word	0xf004a80a
   15560:	a80dfecd 	.word	0xa80dfecd
   15564:	fecaf004 	.word	0xfecaf004
   15568:	f004a810 	.word	0xf004a810
   1556c:	a813fec7 	.word	0xa813fec7
   15570:	fec4f004 	.word	0xfec4f004
   15574:	b0164620 	.word	0xb0164620
   15578:	87f0e8bd 	.word	0x87f0e8bd
   1557c:	46404631 	.word	0x46404631
   15580:	ff38f004 	.word	0xff38f004
   15584:	28004604 	.word	0x28004604
   15588:	f106d1f4 	.word	0xf106d1f4
   1558c:	f108010c 	.word	0xf108010c
   15590:	f004000c 	.word	0xf004000c
   15594:	4604ff2f 	.word	0x4604ff2f
   15598:	d1eb2800 	.word	0xd1eb2800
   1559c:	0118f106 	.word	0x0118f106
   155a0:	0018f108 	.word	0x0018f108
   155a4:	ff26f004 	.word	0xff26f004
   155a8:	e7e34604 	.word	0xe7e34604
   155ac:	a8014649 	.word	0xa8014649
   155b0:	fae4f7ff 	.word	0xfae4f7ff
   155b4:	28004604 	.word	0x28004604
   155b8:	462ad1c7 	.word	0x462ad1c7
   155bc:	a804a901 	.word	0xa804a901
   155c0:	feaaf005 	.word	0xfeaaf005
   155c4:	28004604 	.word	0x28004604
   155c8:	4649d1bf 	.word	0x4649d1bf
   155cc:	f7ffa804 	.word	0xf7ffa804
   155d0:	4604fad5 	.word	0x4604fad5
   155d4:	d1b82800 	.word	0xd1b82800
   155d8:	4632a901 	.word	0x4632a901
   155dc:	f0054608 	.word	0xf0054608
   155e0:	4604fe9b 	.word	0x4604fe9b
   155e4:	d1b02800 	.word	0xd1b02800
   155e8:	a8014649 	.word	0xa8014649
   155ec:	fac6f7ff 	.word	0xfac6f7ff
   155f0:	28004604 	.word	0x28004604
   155f4:	a904d1a9 	.word	0xa904d1a9
   155f8:	020cf106 	.word	0x020cf106
   155fc:	f0054608 	.word	0xf0054608
   15600:	4604fe8b 	.word	0x4604fe8b
   15604:	d1a02800 	.word	0xd1a02800
   15608:	a8044649 	.word	0xa8044649
   1560c:	fab6f7ff 	.word	0xfab6f7ff
   15610:	28004604 	.word	0x28004604
   15614:	a901d199 	.word	0xa901d199
   15618:	4608463a 	.word	0x4608463a
   1561c:	fdbcf005 	.word	0xfdbcf005
   15620:	28004604 	.word	0x28004604
   15624:	f109d191 	.word	0xf109d191
   15628:	e00c0604 	.word	0xe00c0604
   1562c:	a8012100 	.word	0xa8012100
   15630:	fb86f005 	.word	0xfb86f005
   15634:	a901b150 	.word	0xa901b150
   15638:	46084632 	.word	0x46084632
   1563c:	fd38f005 	.word	0xfd38f005
   15640:	28004604 	.word	0x28004604
   15644:	9b01d181 	.word	0x9b01d181
   15648:	dbef2b00 	.word	0xdbef2b00
   1564c:	f107a904 	.word	0xf107a904
   15650:	4632060c 	.word	0x4632060c
   15654:	f0054608 	.word	0xf0054608
   15658:	4604fd9f 	.word	0x4604fd9f
   1565c:	f47f2800 	.word	0xf47f2800
   15660:	f109af74 	.word	0xf109af74
   15664:	e00d0a04 	.word	0xe00d0a04
   15668:	a8042100 	.word	0xa8042100
   1566c:	fb68f005 	.word	0xfb68f005
   15670:	a904b158 	.word	0xa904b158
   15674:	46084652 	.word	0x46084652
   15678:	fd1af005 	.word	0xfd1af005
   1567c:	28004604 	.word	0x28004604
   15680:	af63f47f 	.word	0xaf63f47f
   15684:	2b009b04 	.word	0x2b009b04
   15688:	2100dbee 	.word	0x2100dbee
   1568c:	f005a801 	.word	0xf005a801
   15690:	4601fb57 	.word	0x4601fb57
   15694:	a804bb30 	.word	0xa804bb30
   15698:	fb52f005 	.word	0xfb52f005
   1569c:	d17f2800 	.word	0xd17f2800
   156a0:	4641463a 	.word	0x4641463a
   156a4:	f7ff4648 	.word	0xf7ff4648
   156a8:	4604fab5 	.word	0x4604fab5
   156ac:	4639e74d 	.word	0x4639e74d
   156b0:	f0044640 	.word	0xf0044640
   156b4:	4604fe9f 	.word	0x4604fe9f
   156b8:	f47f2800 	.word	0xf47f2800
   156bc:	f107af5b 	.word	0xf107af5b
   156c0:	f108010c 	.word	0xf108010c
   156c4:	f004000c 	.word	0xf004000c
   156c8:	4604fe95 	.word	0x4604fe95
   156cc:	f47f2800 	.word	0xf47f2800
   156d0:	4629af51 	.word	0x4629af51
   156d4:	0018f108 	.word	0x0018f108
   156d8:	fe8cf004 	.word	0xfe8cf004
   156dc:	e7494604 	.word	0xe7494604
   156e0:	e7474c8b 	.word	0xe7474c8b
   156e4:	aa014629 	.word	0xaa014629
   156e8:	f005a813 	.word	0xf005a813
   156ec:	4604fe15 	.word	0x4604fe15
   156f0:	f47f2800 	.word	0xf47f2800
   156f4:	4649af2a 	.word	0x4649af2a
   156f8:	f7ffa813 	.word	0xf7ffa813
   156fc:	4604fa3f 	.word	0x4604fa3f
   15700:	f47f2800 	.word	0xf47f2800
   15704:	aa01af22 	.word	0xaa01af22
   15708:	a8074611 	.word	0xa8074611
   1570c:	fe04f005 	.word	0xfe04f005
   15710:	28004604 	.word	0x28004604
   15714:	af19f47f 	.word	0xaf19f47f
   15718:	a8074649 	.word	0xa8074649
   1571c:	fa2ef7ff 	.word	0xfa2ef7ff
   15720:	28004604 	.word	0x28004604
   15724:	af11f47f 	.word	0xaf11f47f
   15728:	a907aa01 	.word	0xa907aa01
   1572c:	f005a80a 	.word	0xf005a80a
   15730:	4604fdf3 	.word	0x4604fdf3
   15734:	f47f2800 	.word	0xf47f2800
   15738:	4649af08 	.word	0x4649af08
   1573c:	f7ffa80a 	.word	0xf7ffa80a
   15740:	4604fa1d 	.word	0x4604fa1d
   15744:	f47f2800 	.word	0xf47f2800
   15748:	a907af00 	.word	0xa907af00
   1574c:	4608463a 	.word	0x4608463a
   15750:	fde2f005 	.word	0xfde2f005
   15754:	28004604 	.word	0x28004604
   15758:	aef7f47f 	.word	0xaef7f47f
   1575c:	a8074649 	.word	0xa8074649
   15760:	fa0cf7ff 	.word	0xfa0cf7ff
   15764:	28004604 	.word	0x28004604
   15768:	aeeff47f 	.word	0xaeeff47f
   1576c:	a9072202 	.word	0xa9072202
   15770:	f005a801 	.word	0xf005a801
   15774:	4604fec9 	.word	0x4604fec9
   15778:	f47f2800 	.word	0xf47f2800
   1577c:	f109aee6 	.word	0xf109aee6
   15780:	46290504 	.word	0x46290504
   15784:	f005a801 	.word	0xf005a801
   15788:	2800fa73 	.word	0x2800fa73
   1578c:	a901db0d 	.word	0xa901db0d
   15790:	4608462a 	.word	0x4608462a
   15794:	fbccf005 	.word	0xfbccf005
   15798:	28004604 	.word	0x28004604
   1579c:	e6d4d0f1 	.word	0xe6d4d0f1
   157a0:	f7ff4640 	.word	0xf7ff4640
   157a4:	4604fe7d 	.word	0x4604fe7d
   157a8:	aa04e6cf 	.word	0xaa04e6cf
   157ac:	a80d4611 	.word	0xa80d4611
   157b0:	fdb2f005 	.word	0xfdb2f005
   157b4:	28004604 	.word	0x28004604
   157b8:	aec7f47f 	.word	0xaec7f47f
   157bc:	a80d4649 	.word	0xa80d4649
   157c0:	f9dcf7ff 	.word	0xf9dcf7ff
   157c4:	28004604 	.word	0x28004604
   157c8:	aebff47f 	.word	0xaebff47f
   157cc:	aa01a90d 	.word	0xaa01a90d
   157d0:	f0054608 	.word	0xf0054608
   157d4:	4604fce1 	.word	0x4604fce1
   157d8:	f47f2800 	.word	0xf47f2800
   157dc:	9b0daeb6 	.word	0x9b0daeb6
   157e0:	da0d2b00 	.word	0xda0d2b00
   157e4:	a80d2100 	.word	0xa80d2100
   157e8:	faaaf005 	.word	0xfaaaf005
   157ec:	a90db140 	.word	0xa90db140
   157f0:	4608462a 	.word	0x4608462a
   157f4:	fc5cf005 	.word	0xfc5cf005
   157f8:	28004604 	.word	0x28004604
   157fc:	e6a4d0ef 	.word	0xe6a4d0ef
   15800:	aa0aa90d 	.word	0xaa0aa90d
   15804:	f0054608 	.word	0xf0054608
   15808:	4604fcc7 	.word	0x4604fcc7
   1580c:	f47f2800 	.word	0xf47f2800
   15810:	9b0dae9c 	.word	0x9b0dae9c
   15814:	da0d2b00 	.word	0xda0d2b00
   15818:	a80d2100 	.word	0xa80d2100
   1581c:	fa90f005 	.word	0xfa90f005
   15820:	a90db140 	.word	0xa90db140
   15824:	4608462a 	.word	0x4608462a
   15828:	fc42f005 	.word	0xfc42f005
   1582c:	28004604 	.word	0x28004604
   15830:	e68ad0ef 	.word	0xe68ad0ef
   15834:	aa0da907 	.word	0xaa0da907
   15838:	f0054608 	.word	0xf0054608
   1583c:	4604fcad 	.word	0x4604fcad
   15840:	f47f2800 	.word	0xf47f2800
   15844:	9b07ae82 	.word	0x9b07ae82
   15848:	da0d2b00 	.word	0xda0d2b00
   1584c:	a8072100 	.word	0xa8072100
   15850:	fa76f005 	.word	0xfa76f005
   15854:	a907b140 	.word	0xa907b140
   15858:	4608462a 	.word	0x4608462a
   1585c:	fc28f005 	.word	0xfc28f005
   15860:	28004604 	.word	0x28004604
   15864:	e670d0ef 	.word	0xe670d0ef
   15868:	aa04a907 	.word	0xaa04a907
   1586c:	f0054608 	.word	0xf0054608
   15870:	4604fd53 	.word	0x4604fd53
   15874:	f47f2800 	.word	0xf47f2800
   15878:	4649ae68 	.word	0x4649ae68
   1587c:	f7ffa807 	.word	0xf7ffa807
   15880:	4604f97d 	.word	0x4604f97d
   15884:	f47f2800 	.word	0xf47f2800
   15888:	a90aae60 	.word	0xa90aae60
   1588c:	46084632 	.word	0x46084632
   15890:	fd42f005 	.word	0xfd42f005
   15894:	28004604 	.word	0x28004604
   15898:	ae57f47f 	.word	0xae57f47f
   1589c:	a80a4649 	.word	0xa80a4649
   158a0:	f96cf7ff 	.word	0xf96cf7ff
   158a4:	28004604 	.word	0x28004604
   158a8:	ae4ff47f 	.word	0xae4ff47f
   158ac:	a907aa0a 	.word	0xa907aa0a
   158b0:	f005a810 	.word	0xf005a810
   158b4:	4604fc71 	.word	0x4604fc71
   158b8:	f47f2800 	.word	0xf47f2800
   158bc:	9b10ae46 	.word	0x9b10ae46
   158c0:	da0d2b00 	.word	0xda0d2b00
   158c4:	a8102100 	.word	0xa8102100
   158c8:	fa3af005 	.word	0xfa3af005
   158cc:	a910b140 	.word	0xa910b140
   158d0:	4608462a 	.word	0x4608462a
   158d4:	fbecf005 	.word	0xfbecf005
   158d8:	28004604 	.word	0x28004604
   158dc:	e634d0ef 	.word	0xe634d0ef
   158e0:	4640a90d 	.word	0x4640a90d
   158e4:	fd86f004 	.word	0xfd86f004
   158e8:	28004604 	.word	0x28004604
   158ec:	ae2df47f 	.word	0xae2df47f
   158f0:	f108a910 	.word	0xf108a910
   158f4:	f004000c 	.word	0xf004000c
   158f8:	4604fd7d 	.word	0x4604fd7d
   158fc:	f47f2800 	.word	0xf47f2800
   15900:	f108ae24 	.word	0xf108ae24
   15904:	a9130018 	.word	0xa9130018
   15908:	fd74f004 	.word	0xfd74f004
   1590c:	e61c4604 	.word	0xe61c4604
   15910:	ffffb080 	.word	0xffffb080

00015914 <ecp_mul_comb>:
   15914:	4ff0e92d 	.word	0x4ff0e92d
   15918:	46984605 	.word	0x46984605
   1591c:	034cf105 	.word	0x034cf105
   15920:	b0e5461c 	.word	0xb0e5461c
   15924:	9104a80d 	.word	0x9104a80d
   15928:	93084617 	.word	0x93084617
   1592c:	fcdef004 	.word	0xfcdef004
   15930:	f004a810 	.word	0xf004a810
   15934:	4620fcdb 	.word	0x4620fcdb
   15938:	f0042100 	.word	0xf0042100
   1593c:	2801ff21 	.word	0x2801ff21
   15940:	f0409007 	.word	0xf0409007
   15944:	6deb81c9 	.word	0x6deb81c9
   15948:	090cf108 	.word	0x090cf108
   1594c:	7fc0f5b3 	.word	0x7fc0f5b3
   15950:	2605bf2c 	.word	0x2605bf2c
   15954:	46482604 	.word	0x46482604
   15958:	0134f105 	.word	0x0134f105
   1595c:	f04fbf2c 	.word	0xf04fbf2c
   15960:	f04f0a06 	.word	0xf04f0a06
   15964:	46b30a05 	.word	0x46b30a05
   15968:	f982f005 	.word	0xf982f005
   1596c:	d0722800 	.word	0xd0722800
   15970:	42a66dec 	.word	0x42a66dec
   15974:	2301d245 	.word	0x2301d245
   15978:	32fff10b 	.word	0x32fff10b
   1597c:	93024093 	.word	0x93024093
   15980:	b2db4434 	.word	0xb2db4434
   15984:	93033c01 	.word	0x93033c01
   15988:	fbb42300 	.word	0xfbb42300
   1598c:	9802f4f6 	.word	0x9802f4f6
   15990:	93059206 	.word	0x93059206
   15994:	f0082124 	.word	0xf0082124
   15998:	9001f8fd 	.word	0x9001f8fd
   1599c:	d0402800 	.word	0xd0402800
   159a0:	f0044641 	.word	0xf0044641
   159a4:	f8ddfd27 	.word	0xf8ddfd27
   159a8:	4683a004 	.word	0x4683a004
   159ac:	f0002800 	.word	0xf0002800
   159b0:	9b058086 	.word	0x9b058086
   159b4:	d17b2b00 	.word	0xd17b2b00
   159b8:	9c012500 	.word	0x9c012500
   159bc:	35019e03 	.word	0x35019e03
   159c0:	4620b154 	.word	0x4620b154
   159c4:	fc9af004 	.word	0xfc9af004
   159c8:	000cf104 	.word	0x000cf104
   159cc:	fc96f004 	.word	0xfc96f004
   159d0:	0018f104 	.word	0x0018f104
   159d4:	fc92f004 	.word	0xfc92f004
   159d8:	429eb2eb 	.word	0x429eb2eb
   159dc:	0424f104 	.word	0x0424f104
   159e0:	9801d8ed 	.word	0x9801d8ed
   159e4:	f8eaf008 	.word	0xf8eaf008
   159e8:	f004a80d 	.word	0xf004a80d
   159ec:	a810fc87 	.word	0xa810fc87
   159f0:	fc84f004 	.word	0xfc84f004
   159f4:	0f00f1bb 	.word	0x0f00f1bb
   159f8:	4658d11b 	.word	0x4658d11b
   159fc:	e8bdb065 	.word	0xe8bdb065
   15a00:	26028ff0 	.word	0x26028ff0
   15a04:	22012300 	.word	0x22012300
   15a08:	21244630 	.word	0x21244630
   15a0c:	6602e9cd 	.word	0x6602e9cd
   15a10:	3205e9cd 	.word	0x3205e9cd
   15a14:	f8bef008 	.word	0xf8bef008
   15a18:	08643401 	.word	0x08643401
   15a1c:	28009001 	.word	0x28009001
   15a20:	a80dd1be 	.word	0xa80dd1be
   15a24:	fc6af004 	.word	0xfc6af004
   15a28:	f004a810 	.word	0xf004a810
   15a2c:	f8dffc67 	.word	0xf8dffc67
   15a30:	9c04b644 	.word	0x9c04b644
   15a34:	d0e02c00 	.word	0xd0e02c00
   15a38:	f0044620 	.word	0xf0044620
   15a3c:	f104fc5f 	.word	0xf104fc5f
   15a40:	f004000c 	.word	0xf004000c
   15a44:	f104fc5b 	.word	0xf104fc5b
   15a48:	f0040018 	.word	0xf0040018
   15a4c:	4658fc57 	.word	0x4658fc57
   15a50:	e8bdb065 	.word	0xe8bdb065
   15a54:	f1058ff0 	.word	0xf1058ff0
   15a58:	46400128 	.word	0x46400128
   15a5c:	f908f005 	.word	0xf908f005
   15a60:	d1852800 	.word	0xd1852800
   15a64:	459a6deb 	.word	0x459a6deb
   15a68:	82f4f0c0 	.word	0x82f4f0c0
   15a6c:	1c5c2602 	.word	0x1c5c2602
   15a70:	e9cd2301 	.word	0xe9cd2301
   15a74:	08646602 	.word	0x08646602
   15a78:	6f6b9306 	.word	0x6f6b9306
   15a7c:	2b009301 	.word	0x2b009301
   15a80:	80eaf000 	.word	0x80eaf000
   15a84:	46382100 	.word	0x46382100
   15a88:	fe7af004 	.word	0xfe7af004
   15a8c:	46804639 	.word	0x46804639
   15a90:	f004a80d 	.word	0xf004a80d
   15a94:	4683fcaf 	.word	0x4683fcaf
   15a98:	463ab950 	.word	0x463ab950
   15a9c:	a8109908 	.word	0xa8109908
   15aa0:	fb7af005 	.word	0xfb7af005
   15aa4:	28004683 	.word	0x28004683
   15aa8:	9b07d036 	.word	0x9b07d036
   15aac:	d0832b00 	.word	0xd0832b00
   15ab0:	f004a80d 	.word	0xf004a80d
   15ab4:	a810fc23 	.word	0xa810fc23
   15ab8:	fc20f004 	.word	0xfc20f004
   15abc:	4649e7b9 	.word	0x4649e7b9
   15ac0:	000cf10a 	.word	0x000cf10a
   15ac4:	fc96f004 	.word	0xfc96f004
   15ac8:	28004683 	.word	0x28004683
   15acc:	af71f47f 	.word	0xaf71f47f
   15ad0:	f1089b01 	.word	0xf1089b01
   15ad4:	f1030118 	.word	0xf1030118
   15ad8:	f0040018 	.word	0xf0040018
   15adc:	4683fc8b 	.word	0x4683fc8b
   15ae0:	f47f2800 	.word	0xf47f2800
   15ae4:	462aaf66 	.word	0x462aaf66
   15ae8:	0901f04f 	.word	0x0901f04f
   15aec:	46254651 	.word	0x46254651
   15af0:	464c4682 	.word	0x464c4682
   15af4:	96094690 	.word	0x96094690
   15af8:	9e06970a 	.word	0x9e06970a
   15afc:	eb049f01 	.word	0xeb049f01
   15b00:	eb0704c4 	.word	0xeb0704c4
   15b04:	46200484 	.word	0x46200484
   15b08:	fc74f004 	.word	0xfc74f004
   15b0c:	f0002800 	.word	0xf0002800
   15b10:	468380a7 	.word	0x468380a7
   15b14:	e74d9b05 	.word	0xe74d9b05
   15b18:	33fff118 	.word	0x33fff118
   15b1c:	2301bf18 	.word	0x2301bf18
   15b20:	461aa910 	.word	0x461aa910
   15b24:	9302a80d 	.word	0x9302a80d
   15b28:	fd92f004 	.word	0xfd92f004
   15b2c:	28004683 	.word	0x28004683
   15b30:	a822d1bb 	.word	0xa822d1bb
   15b34:	46591c62 	.word	0x46591c62
   15b38:	feaef00e 	.word	0xfeaef00e
   15b3c:	f10db3d4 	.word	0xf10db3d4
   15b40:	46d80988 	.word	0x46d80988
   15b44:	46c246cb 	.word	0x46c246cb
   15b48:	46512700 	.word	0x46512700
   15b4c:	f004a80d 	.word	0xf004a80d
   15b50:	f89bfe17 	.word	0xf89bfe17
   15b54:	40b83000 	.word	0x40b83000
   15b58:	43033701 	.word	0x43033701
   15b5c:	44a242b7 	.word	0x44a242b7
   15b60:	3000f88b 	.word	0x3000f88b
   15b64:	f108d1f1 	.word	0xf108d1f1
   15b68:	45a00801 	.word	0x45a00801
   15b6c:	0b01f10b 	.word	0x0b01f10b
   15b70:	2300d1e9 	.word	0x2300d1e9
   15b74:	0c01f04f 	.word	0x0c01f04f
   15b78:	1088f89d 	.word	0x1088f89d
   15b7c:	6f01f819 	.word	0x6f01f819
   15b80:	0c01f10c 	.word	0x0c01f10c
   15b84:	0203ea86 	.word	0x0203ea86
   15b88:	f00043d0 	.word	0xf00043d0
   15b8c:	fb000001 	.word	0xfb000001
   15b90:	b252f701 	.word	0xb252f701
   15b94:	4033b27f 	.word	0x4033b27f
   15b98:	0607ea02 	.word	0x0607ea02
   15b9c:	ea41407a 	.word	0xea41407a
   15ba0:	433310c0 	.word	0x433310c0
   15ba4:	45e0b2d1 	.word	0x45e0b2d1
   15ba8:	0c01f809 	.word	0x0c01f809
   15bac:	f889b2db 	.word	0xf889b2db
   15bb0:	d2e31000 	.word	0xd2e31000
   15bb4:	a8192600 	.word	0xa8192600
   15bb8:	fb98f004 	.word	0xfb98f004
   15bbc:	f004a81c 	.word	0xf004a81c
   15bc0:	a81ffb95 	.word	0xa81ffb95
   15bc4:	fb92f004 	.word	0xfb92f004
   15bc8:	f813ab22 	.word	0xf813ab22
   15bcc:	44239004 	.word	0x44239004
   15bd0:	9b049306 	.word	0x9b049306
   15bd4:	469b4632 	.word	0x469b4632
   15bd8:	95059f01 	.word	0x95059f01
   15bdc:	9f03463d 	.word	0x9f03463d
   15be0:	0845f3c9 	.word	0x0845f3c9
   15be4:	0a0cf103 	.word	0x0a0cf103
   15be8:	0408eba2 	.word	0x0408eba2
   15bec:	f484fab4 	.word	0xf484fab4
   15bf0:	46290964 	.word	0x46290964
   15bf4:	46584622 	.word	0x46584622
   15bf8:	fd2af004 	.word	0xfd2af004
   15bfc:	f1053601 	.word	0xf1053601
   15c00:	3524010c 	.word	0x3524010c
   15c04:	d16a2800 	.word	0xd16a2800
   15c08:	46504622 	.word	0x46504622
   15c0c:	fd20f004 	.word	0xfd20f004
   15c10:	2800b2f2 	.word	0x2800b2f2
   15c14:	42bad163 	.word	0x42bad163
   15c18:	9d05d3e6 	.word	0x9d05d3e6
   15c1c:	1d2ba816 	.word	0x1d2ba816
   15c20:	9308461c 	.word	0x9308461c
   15c24:	fb62f004 	.word	0xfb62f004
   15c28:	4621a816 	.word	0x4621a816
   15c2c:	f0054652 	.word	0xf0054652
   15c30:	4683fab3 	.word	0x4683fab3
   15c34:	f0002800 	.word	0xf0002800
   15c38:	a81680c3 	.word	0xa81680c3
   15c3c:	fb5ef004 	.word	0xfb5ef004
   15c40:	f004a819 	.word	0xf004a819
   15c44:	a81cfb5b 	.word	0xa81cfb5b
   15c48:	fb58f004 	.word	0xfb58f004
   15c4c:	f004a81f 	.word	0xf004a81f
   15c50:	9b07fb55 	.word	0x9b07fb55
   15c54:	e6ac9305 	.word	0xe6ac9305
   15c58:	98022301 	.word	0x98022301
   15c5c:	e6999305 	.word	0xe6999305
   15c60:	0b59ea4f 	.word	0x0b59ea4f
   15c64:	0bcbeb0b 	.word	0x0bcbeb0b
   15c68:	0b8beb07 	.word	0x0b8beb07
   15c6c:	010cf10b 	.word	0x010cf10b
   15c70:	000cf104 	.word	0x000cf104
   15c74:	fbbef004 	.word	0xfbbef004
   15c78:	f47f2800 	.word	0xf47f2800
   15c7c:	f10baf4a 	.word	0xf10baf4a
   15c80:	f1040118 	.word	0xf1040118
   15c84:	f0040018 	.word	0xf0040018
   15c88:	2800fbb5 	.word	0x2800fbb5
   15c8c:	af41f47f 	.word	0xaf41f47f
   15c90:	4683b165 	.word	0x4683b165
   15c94:	46214622 	.word	0x46214622
   15c98:	f7fe4640 	.word	0xf7fe4640
   15c9c:	f10bffbb 	.word	0xf10bffbb
   15ca0:	28000b01 	.word	0x28000b01
   15ca4:	af35f47f 	.word	0xaf35f47f
   15ca8:	d1f345ab 	.word	0xd1f345ab
   15cac:	0949ea4f 	.word	0x0949ea4f
   15cb0:	f989fa5f 	.word	0xf989fa5f
   15cb4:	0301f10a 	.word	0x0301f10a
   15cb8:	f842aa22 	.word	0xf842aa22
   15cbc:	fa5f402a 	.word	0xfa5f402a
   15cc0:	fa39fa83 	.word	0xfa39fa83
   15cc4:	464cf306 	.word	0x464cf306
   15cc8:	ea4fd10b 	.word	0xea4fd10b
   15ccc:	eb010159 	.word	0xeb010159
   15cd0:	eb0701c1 	.word	0xeb0701c1
   15cd4:	e7120181 	.word	0xe7120181
   15cd8:	b39cf8df 	.word	0xb39cf8df
   15cdc:	4683e68d 	.word	0x4683e68d
   15ce0:	4652e7ae 	.word	0x4652e7ae
   15ce4:	462c2a01 	.word	0x462c2a01
   15ce8:	46459e09 	.word	0x46459e09
   15cec:	d9619f0a 	.word	0xd9619f0a
   15cf0:	4640a922 	.word	0x4640a922
   15cf4:	fa46f7ff 	.word	0xfa46f7ff
   15cf8:	f1bb4683 	.word	0xf1bb4683
   15cfc:	f47f0f00 	.word	0xf47f0f00
   15d00:	2301ae58 	.word	0x2301ae58
   15d04:	46da9a01 	.word	0x46da9a01
   15d08:	970b3a24 	.word	0x970b3a24
   15d0c:	461f4693 	.word	0x461f4693
   15d10:	4609e9cd 	.word	0x4609e9cd
   15d14:	eb03b303 	.word	0xeb03b303
   15d18:	ea4f03c3 	.word	0xea4f03c3
   15d1c:	9b010883 	.word	0x9b010883
   15d20:	0424f1a8 	.word	0x0424f1a8
   15d24:	eb03441c 	.word	0xeb03441c
   15d28:	e0050908 	.word	0xe0050908
   15d2c:	45a3aa22 	.word	0x45a3aa22
   15d30:	602af842 	.word	0x602af842
   15d34:	d00f469a 	.word	0xd00f469a
   15d38:	0604eb08 	.word	0x0604eb08
   15d3c:	4622464b 	.word	0x4622464b
   15d40:	46284631 	.word	0x46284631
   15d44:	fbc2f7ff 	.word	0xfbc2f7ff
   15d48:	0301f10a 	.word	0x0301f10a
   15d4c:	b2db3c24 	.word	0xb2db3c24
   15d50:	d0eb2800 	.word	0xd0eb2800
   15d54:	e6dd4683 	.word	0xe6dd4683
   15d58:	9a06007b 	.word	0x9a06007b
   15d5c:	fa37b2df 	.word	0xfa37b2df
   15d60:	463bf202 	.word	0x463bf202
   15d64:	f1bad0d6 	.word	0xf1bad0d6
   15d68:	e9dd0f01 	.word	0xe9dd0f01
   15d6c:	9f0b4609 	.word	0x9f0b4609
   15d70:	8167f240 	.word	0x8167f240
   15d74:	a9224652 	.word	0xa9224652
   15d78:	f7ff4628 	.word	0xf7ff4628
   15d7c:	4683fa03 	.word	0x4683fa03
   15d80:	f1bb9b05 	.word	0xf1bb9b05
   15d84:	f47f0f00 	.word	0xf47f0f00
   15d88:	b123ae15 	.word	0xb123ae15
   15d8c:	676b9b01 	.word	0x676b9b01
   15d90:	67ab9b02 	.word	0x67ab9b02
   15d94:	4619e676 	.word	0x4619e676
   15d98:	f0044638 	.word	0xf0044638
   15d9c:	4639fcf1 	.word	0x4639fcf1
   15da0:	a80d4680 	.word	0xa80d4680
   15da4:	fb26f004 	.word	0xfb26f004
   15da8:	28004683 	.word	0x28004683
   15dac:	ae04f47f 	.word	0xae04f47f
   15db0:	e6729007 	.word	0xe6729007
   15db4:	46289922 	.word	0x46289922
   15db8:	f97cf7ff 	.word	0xf97cf7ff
   15dbc:	e79c4683 	.word	0xe79c4683
   15dc0:	46504601 	.word	0x46504601
   15dc4:	ffbcf004 	.word	0xffbcf004
   15dc8:	bf181c02 	.word	0xbf181c02
   15dcc:	a9162201 	.word	0xa9162201
   15dd0:	12d9ea02 	.word	0x12d9ea02
   15dd4:	f0044650 	.word	0xf0044650
   15dd8:	4683fc3b 	.word	0x4683fc3b
   15ddc:	f004a816 	.word	0xf004a816
   15de0:	f1bbfa8d 	.word	0xf1bbfa8d
   15de4:	f47f0f00 	.word	0xf47f0f00
   15de8:	9b04af2b 	.word	0x9b04af2b
   15dec:	f1032101 	.word	0xf1032101
   15df0:	46200418 	.word	0x46200418
   15df4:	fc8af004 	.word	0xfc8af004
   15df8:	28004683 	.word	0x28004683
   15dfc:	af20f47f 	.word	0xaf20f47f
   15e00:	2b009b6e 	.word	0x2b009b6e
   15e04:	8082f000 	.word	0x8082f000
   15e08:	6dab260c 	.word	0x6dab260c
   15e0c:	3307a813 	.word	0x3307a813
   15e10:	f00408df 	.word	0xf00408df
   15e14:	a816fa6b 	.word	0xa816fa6b
   15e18:	fa68f004 	.word	0xfa68f004
   15e1c:	8020f8dd 	.word	0x8020f8dd
   15e20:	9a6e9b6f 	.word	0x9a6e9b6f
   15e24:	a8134639 	.word	0xa8134639
   15e28:	f9e2f006 	.word	0xf9e2f006
   15e2c:	2101e006 	.word	0x2101e006
   15e30:	f004a813 	.word	0xf004a813
   15e34:	2800fead 	.word	0x2800fead
   15e38:	80c8f040 	.word	0x80c8f040
   15e3c:	a8134641 	.word	0xa8134641
   15e40:	ff16f004 	.word	0xff16f004
   15e44:	daf22800 	.word	0xdaf22800
   15e48:	f0003e01 	.word	0xf0003e01
   15e4c:	21018100 	.word	0x21018100
   15e50:	f004a813 	.word	0xf004a813
   15e54:	2800ff75 	.word	0x2800ff75
   15e58:	aa13dde2 	.word	0xaa13dde2
   15e5c:	46204621 	.word	0x46204621
   15e60:	fa5af005 	.word	0xfa5af005
   15e64:	b1304683 	.word	0xb1304683
   15e68:	f004a813 	.word	0xf004a813
   15e6c:	a816fa47 	.word	0xa816fa47
   15e70:	fa44f004 	.word	0xfa44f004
   15e74:	4620e6e4 	.word	0x4620e6e4
   15e78:	f7fe4629 	.word	0xf7fe4629
   15e7c:	4683fe7f 	.word	0x4683fe7f
   15e80:	d1f12800 	.word	0xd1f12800
   15e84:	4611aa13 	.word	0x4611aa13
   15e88:	f005a816 	.word	0xf005a816
   15e8c:	4683fa45 	.word	0x4683fa45
   15e90:	d1e92800 	.word	0xd1e92800
   15e94:	a8164629 	.word	0xa8164629
   15e98:	fe70f7fe 	.word	0xfe70f7fe
   15e9c:	28004683 	.word	0x28004683
   15ea0:	9804d1e2 	.word	0x9804d1e2
   15ea4:	4601aa16 	.word	0x4601aa16
   15ea8:	fa36f005 	.word	0xfa36f005
   15eac:	28004683 	.word	0x28004683
   15eb0:	4629d1da 	.word	0x4629d1da
   15eb4:	f7fe9804 	.word	0xf7fe9804
   15eb8:	4683fe61 	.word	0x4683fe61
   15ebc:	d1d32800 	.word	0xd1d32800
   15ec0:	aa13a916 	.word	0xaa13a916
   15ec4:	f0054608 	.word	0xf0054608
   15ec8:	4683fa27 	.word	0x4683fa27
   15ecc:	d1cb2800 	.word	0xd1cb2800
   15ed0:	a8164629 	.word	0xa8164629
   15ed4:	fe52f7fe 	.word	0xfe52f7fe
   15ed8:	28004683 	.word	0x28004683
   15edc:	aa16d1c4 	.word	0xaa16d1c4
   15ee0:	46504651 	.word	0x46504651
   15ee4:	fa18f005 	.word	0xfa18f005
   15ee8:	28004683 	.word	0x28004683
   15eec:	4629d1bc 	.word	0x4629d1bc
   15ef0:	f7fe4650 	.word	0xf7fe4650
   15ef4:	4683fe43 	.word	0x4683fe43
   15ef8:	f004a813 	.word	0xf004a813
   15efc:	a816f9ff 	.word	0xa816f9ff
   15f00:	f9fcf004 	.word	0xf9fcf004
   15f04:	0f00f1bb 	.word	0x0f00f1bb
   15f08:	ae9af47f 	.word	0xae9af47f
   15f0c:	f8dd46ab 	.word	0xf8dd46ab
   15f10:	f8dd8018 	.word	0xf8dd8018
   15f14:	f8cd900c 	.word	0xf8cd900c
   15f18:	f8dda018 	.word	0xf8dda018
   15f1c:	ab22a010 	.word	0xab22a010
   15f20:	d0554543 	.word	0xd0554543
   15f24:	46514652 	.word	0x46514652
   15f28:	f7fe4658 	.word	0xf7fe4658
   15f2c:	4602fe73 	.word	0x4602fe73
   15f30:	d1492800 	.word	0xd1492800
   15f34:	46044606 	.word	0x46044606
   15f38:	3d01f818 	.word	0x3d01f818
   15f3c:	93059d01 	.word	0x93059d01
   15f40:	0745f3c3 	.word	0x0745f3c3
   15f44:	fab41be4 	.word	0xfab41be4
   15f48:	0964f484 	.word	0x0964f484
   15f4c:	46224629 	.word	0x46224629
   15f50:	f004a819 	.word	0xf004a819
   15f54:	3601fb7d 	.word	0x3601fb7d
   15f58:	010cf105 	.word	0x010cf105
   15f5c:	28003524 	.word	0x28003524
   15f60:	aebdf47f 	.word	0xaebdf47f
   15f64:	a81c4622 	.word	0xa81c4622
   15f68:	fb72f004 	.word	0xfb72f004
   15f6c:	2800b2f4 	.word	0x2800b2f4
   15f70:	aeb5f47f 	.word	0xaeb5f47f
   15f74:	d8e545a1 	.word	0xd8e545a1
   15f78:	f004a816 	.word	0xf004a816
   15f7c:	aa1cf9b7 	.word	0xaa1cf9b7
   15f80:	a8169908 	.word	0xa8169908
   15f84:	f908f005 	.word	0xf908f005
   15f88:	4683b108 	.word	0x4683b108
   15f8c:	4601e655 	.word	0x4601e655
   15f90:	f004a81c 	.word	0xf004a81c
   15f94:	1c02fed5 	.word	0x1c02fed5
   15f98:	2201bf18 	.word	0x2201bf18
   15f9c:	a9169b05 	.word	0xa9169b05
   15fa0:	12d3ea02 	.word	0x12d3ea02
   15fa4:	f004a81c 	.word	0xf004a81c
   15fa8:	9005fb53 	.word	0x9005fb53
   15fac:	f004a816 	.word	0xf004a816
   15fb0:	9a05f9a5 	.word	0x9a05f9a5
   15fb4:	4652b942 	.word	0x4652b942
   15fb8:	4651ab19 	.word	0x4651ab19
   15fbc:	f7ff4658 	.word	0xf7ff4658
   15fc0:	4602fa85 	.word	0x4602fa85
   15fc4:	d0aa2800 	.word	0xd0aa2800
   15fc8:	e6394693 	.word	0xe6394693
   15fcc:	e74b4683 	.word	0xe74b4683
   15fd0:	f8dda819 	.word	0xf8dda819
   15fd4:	f004a018 	.word	0xf004a018
   15fd8:	a81cf991 	.word	0xa81cf991
   15fdc:	f98ef004 	.word	0xf98ef004
   15fe0:	f004a81f 	.word	0xf004a81f
   15fe4:	a819f98b 	.word	0xa819f98b
   15fe8:	f980f004 	.word	0xf980f004
   15fec:	99084652 	.word	0x99084652
   15ff0:	f005a819 	.word	0xf005a819
   15ff4:	465df8d1 	.word	0x465df8d1
   15ff8:	b1184683 	.word	0xb1184683
   15ffc:	f004a819 	.word	0xf004a819
   16000:	e552f97d 	.word	0xe552f97d
   16004:	46504659 	.word	0x46504659
   16008:	fe9af004 	.word	0xfe9af004
   1600c:	a9199b02 	.word	0xa9199b02
   16010:	bf082800 	.word	0xbf082800
   16014:	46502300 	.word	0x46502300
   16018:	f004461a 	.word	0xf004461a
   1601c:	4683fb19 	.word	0x4683fb19
   16020:	f004a819 	.word	0xf004a819
   16024:	f1bbf96b 	.word	0xf1bbf96b
   16028:	f47f0f00 	.word	0xf47f0f00
   1602c:	4628ad3e 	.word	0x4628ad3e
   16030:	f7ff9904 	.word	0xf7ff9904
   16034:	9b07f83f 	.word	0x9b07f83f
   16038:	2b004683 	.word	0x2b004683
   1603c:	acd4f47f 	.word	0xacd4f47f
   16040:	9922e4ba 	.word	0x9922e4ba
   16044:	f7ff4628 	.word	0xf7ff4628
   16048:	4683f835 	.word	0x4683f835
   1604c:	f8dfe698 	.word	0xf8dfe698
   16050:	e5f5b02c 	.word	0xe5f5b02c
   16054:	f10a2201 	.word	0xf10a2201
   16058:	eb0a31ff 	.word	0xeb0a31ff
   1605c:	fa020403 	.word	0xfa020403
   16060:	3c01f301 	.word	0x3c01f301
   16064:	b2db9302 	.word	0xb2db9302
   16068:	fbb49106 	.word	0xfbb49106
   1606c:	4656f4fa 	.word	0x4656f4fa
   16070:	e5029303 	.word	0xe5029303
   16074:	ffffb280 	.word	0xffffb280
   16078:	ffffb080 	.word	0xffffb080
   1607c:	ffffb300 	.word	0xffffb300

00016080 <symbol_000637b>:
   16080:	43f8e92d 	.word	0x43f8e92d
   16084:	e9dd2a01 	.word	0xe9dd2a01
   16088:	d8437808 	.word	0xd8437808
   1608c:	4681460d 	.word	0x4681460d
   16090:	f1052100 	.word	0xf1052100
   16094:	461e0018 	.word	0x461e0018
   16098:	f0044614 	.word	0xf0044614
   1609c:	b938fe51 	.word	0xb938fe51
   160a0:	0f00f1b8 	.word	0x0f00f1b8
   160a4:	2301d038 	.word	0x2301d038
   160a8:	60337038 	.word	0x60337038
   160ac:	83f8e8bd 	.word	0x83f8e8bd
   160b0:	0004f109 	.word	0x0004f109
   160b4:	fba2f004 	.word	0xfba2f004
   160b8:	b9c44681 	.word	0xb9c44681
   160bc:	33010043 	.word	0x33010043
   160c0:	60334598 	.word	0x60334598
   160c4:	2304d328 	.word	0x2304d328
   160c8:	46024639 	.word	0x46024639
   160cc:	3b01f801 	.word	0x3b01f801
   160d0:	f0044628 	.word	0xf0044628
   160d4:	2800fc55 	.word	0x2800fc55
   160d8:	f109d1e8 	.word	0xf109d1e8
   160dc:	f1050101 	.word	0xf1050101
   160e0:	4439000c 	.word	0x4439000c
   160e4:	e8bd464a 	.word	0xe8bd464a
   160e8:	f00443f8 	.word	0xf00443f8
   160ec:	1c43bc49 	.word	0x1c43bc49
   160f0:	60334598 	.word	0x60334598
   160f4:	2100d310 	.word	0x2100d310
   160f8:	000cf105 	.word	0x000cf105
   160fc:	fb40f004 	.word	0xfb40f004
   16100:	30024639 	.word	0x30024639
   16104:	0b01f801 	.word	0x0b01f801
   16108:	4628464a 	.word	0x4628464a
   1610c:	43f8e8bd 	.word	0x43f8e8bd
   16110:	bc36f004 	.word	0xbc36f004
   16114:	e7c94801 	.word	0xe7c94801
   16118:	e7c74801 	.word	0xe7c74801
   1611c:	ffffb080 	.word	0xffffb080
   16120:	ffffb100 	.word	0xffffb100

00016124 <symbol_0007a22>:
   16124:	d0412b00 	.word	0xd0412b00
   16128:	461eb5f8 	.word	0x461eb5f8
   1612c:	46147813 	.word	0x46147813
   16130:	b9ab460d 	.word	0xb9ab460d
   16134:	d1352e01 	.word	0xd1352e01
   16138:	46284631 	.word	0x46284631
   1613c:	fae6f004 	.word	0xfae6f004
   16140:	bdf8b100 	.word	0xbdf8b100
   16144:	f1054631 	.word	0xf1054631
   16148:	f004000c 	.word	0xf004000c
   1614c:	2800fadf 	.word	0x2800fadf
   16150:	4601d1f7 	.word	0x4601d1f7
   16154:	0018f105 	.word	0x0018f105
   16158:	40f8e8bd 	.word	0x40f8e8bd
   1615c:	bad6f004 	.word	0xbad6f004
   16160:	f0043004 	.word	0xf0043004
   16164:	7823fb4b 	.word	0x7823fb4b
   16168:	2b044607 	.word	0x2b044607
   1616c:	0043d11c 	.word	0x0043d11c
   16170:	429e3301 	.word	0x429e3301
   16174:	4602d116 	.word	0x4602d116
   16178:	46281c61 	.word	0x46281c61
   1617c:	fb6ef004 	.word	0xfb6ef004
   16180:	d1de2800 	.word	0xd1de2800
   16184:	44211c79 	.word	0x44211c79
   16188:	f105463a 	.word	0xf105463a
   1618c:	f004000c 	.word	0xf004000c
   16190:	2800fb65 	.word	0x2800fb65
   16194:	f105d1d5 	.word	0xf105d1d5
   16198:	21010018 	.word	0x21010018
   1619c:	40f8e8bd 	.word	0x40f8e8bd
   161a0:	bab4f004 	.word	0xbab4f004
   161a4:	bdf84802 	.word	0xbdf84802
   161a8:	bdf84802 	.word	0xbdf84802
   161ac:	47704800 	.word	0x47704800
   161b0:	ffffb080 	.word	0xffffb080
   161b4:	ffffb180 	.word	0xffffb180

000161b8 <symbol_000e8bc>:
   161b8:	41f0e92d 	.word	0x41f0e92d
   161bc:	b086460c 	.word	0xb086460c
   161c0:	21014605 	.word	0x21014605
   161c4:	0018f104 	.word	0x0018f104
   161c8:	fdbaf004 	.word	0xfdbaf004
   161cc:	f0402800 	.word	0xf0402800
   161d0:	6b2b809f 	.word	0x6b2b809f
   161d4:	f0002b00 	.word	0xf0002b00
   161d8:	6beb80a0 	.word	0x6beb80a0
   161dc:	f0002b00 	.word	0xf0002b00
   161e0:	4601809c 	.word	0x4601809c
   161e4:	46204606 	.word	0x46204606
   161e8:	fdaaf004 	.word	0xfdaaf004
   161ec:	f2c02800 	.word	0xf2c02800
   161f0:	f104808f 	.word	0xf104808f
   161f4:	4631070c 	.word	0x4631070c
   161f8:	f0044638 	.word	0xf0044638
   161fc:	2800fda1 	.word	0x2800fda1
   16200:	8086f2c0 	.word	0x8086f2c0
   16204:	0804f105 	.word	0x0804f105
   16208:	46204641 	.word	0x46204641
   1620c:	fd30f004 	.word	0xfd30f004
   16210:	da7d2800 	.word	0xda7d2800
   16214:	46384641 	.word	0x46384641
   16218:	fd2af004 	.word	0xfd2af004
   1621c:	da772800 	.word	0xda772800
   16220:	f0044668 	.word	0xf0044668
   16224:	a803f863 	.word	0xa803f863
   16228:	f860f004 	.word	0xf860f004
   1622c:	4639463a 	.word	0x4639463a
   16230:	f0054668 	.word	0xf0054668
   16234:	4606f871 	.word	0x4606f871
   16238:	4668b148 	.word	0x4668b148
   1623c:	f85ef004 	.word	0xf85ef004
   16240:	f004a803 	.word	0xf004a803
   16244:	4630f85b 	.word	0x4630f85b
   16248:	e8bdb006 	.word	0xe8bdb006
   1624c:	462981f0 	.word	0x462981f0
   16250:	f7fe4668 	.word	0xf7fe4668
   16254:	4606fc93 	.word	0x4606fc93
   16258:	d1ee2800 	.word	0xd1ee2800
   1625c:	46214622 	.word	0x46214622
   16260:	f005a803 	.word	0xf005a803
   16264:	4606f859 	.word	0x4606f859
   16268:	d1e62800 	.word	0xd1e62800
   1626c:	a8034629 	.word	0xa8034629
   16270:	fc84f7fe 	.word	0xfc84f7fe
   16274:	28004606 	.word	0x28004606
   16278:	69abd1df 	.word	0x69abd1df
   1627c:	d04e2b00 	.word	0xd04e2b00
   16280:	f105a903 	.word	0xf105a903
   16284:	46080210 	.word	0x46080210
   16288:	ff12f004 	.word	0xff12f004
   1628c:	28004606 	.word	0x28004606
   16290:	e007d1d3 	.word	0xe007d1d3
   16294:	4642a903 	.word	0x4642a903
   16298:	f0044608 	.word	0xf0044608
   1629c:	4606fe49 	.word	0x4606fe49
   162a0:	d1ca2800 	.word	0xd1ca2800
   162a4:	a8034641 	.word	0xa8034641
   162a8:	fce2f004 	.word	0xfce2f004
   162ac:	daf12800 	.word	0xdaf12800
   162b0:	4622a903 	.word	0x4622a903
   162b4:	f0054608 	.word	0xf0054608
   162b8:	4606f82f 	.word	0x4606f82f
   162bc:	d1bc2800 	.word	0xd1bc2800
   162c0:	a8034629 	.word	0xa8034629
   162c4:	fc5af7fe 	.word	0xfc5af7fe
   162c8:	28004606 	.word	0x28004606
   162cc:	a903d1b5 	.word	0xa903d1b5
   162d0:	021cf105 	.word	0x021cf105
   162d4:	f0044608 	.word	0xf0044608
   162d8:	4606feeb 	.word	0x4606feeb
   162dc:	d1ac2800 	.word	0xd1ac2800
   162e0:	a903e007 	.word	0xa903e007
   162e4:	46084642 	.word	0x46084642
   162e8:	fe22f004 	.word	0xfe22f004
   162ec:	28004606 	.word	0x28004606
   162f0:	4641d1a3 	.word	0x4641d1a3
   162f4:	f004a803 	.word	0xf004a803
   162f8:	2800fcbb 	.word	0x2800fcbb
   162fc:	a903daf1 	.word	0xa903daf1
   16300:	f0044668 	.word	0xf0044668
   16304:	4e14fcb5 	.word	0x4e14fcb5
   16308:	bf082800 	.word	0xbf082800
   1630c:	e7942600 	.word	0xe7942600
   16310:	46304e11 	.word	0x46304e11
   16314:	e8bdb006 	.word	0xe8bdb006
   16318:	4e1081f0 	.word	0x4e1081f0
   1631c:	a903e793 	.word	0xa903e793
   16320:	46082203 	.word	0x46082203
   16324:	ffacf004 	.word	0xffacf004
   16328:	28004606 	.word	0x28004606
   1632c:	e00ed185 	.word	0xe00ed185
   16330:	a8032100 	.word	0xa8032100
   16334:	fd04f004 	.word	0xfd04f004
   16338:	d0b92800 	.word	0xd0b92800
   1633c:	4642a903 	.word	0x4642a903
   16340:	f0044608 	.word	0xf0044608
   16344:	4606feb5 	.word	0x4606feb5
   16348:	f47f2800 	.word	0xf47f2800
   1634c:	9b03af76 	.word	0x9b03af76
   16350:	dbed2b00 	.word	0xdbed2b00
   16354:	bf00e7ac 	.word	0xbf00e7ac
   16358:	ffffb380 	.word	0xffffb380
   1635c:	ffffb080 	.word	0xffffb080

00016360 <symbol_0001f66>:
   16360:	43f0e92d 	.word	0x43f0e92d
   16364:	b0ab7803 	.word	0xb0ab7803
   16368:	f0002b00 	.word	0xf0002b00
   1636c:	780a80c4 	.word	0x780a80c4
   16370:	f040429a 	.word	0xf040429a
   16374:	f10180c0 	.word	0xf10180c0
   16378:	460c0788 	.word	0x460c0788
   1637c:	46394605 	.word	0x46394605
   16380:	f0043088 	.word	0xf0043088
   16384:	2800fc75 	.word	0x2800fc75
   16388:	80b5f040 	.word	0x80b5f040
   1638c:	0994f104 	.word	0x0994f104
   16390:	f1054649 	.word	0xf1054649
   16394:	f0040094 	.word	0xf0040094
   16398:	2800fc6b 	.word	0x2800fc6b
   1639c:	80abf040 	.word	0x80abf040
   163a0:	08a0f104 	.word	0x08a0f104
   163a4:	00a0f105 	.word	0x00a0f105
   163a8:	f0044641 	.word	0xf0044641
   163ac:	4606fc61 	.word	0x4606fc61
   163b0:	f0402800 	.word	0xf0402800
   163b4:	462580a0 	.word	0x462580a0
   163b8:	f003a802 	.word	0xf003a802
   163bc:	a805ff97 	.word	0xa805ff97
   163c0:	ff94f003 	.word	0xff94f003
   163c4:	f003a808 	.word	0xf003a808
   163c8:	4631ff91 	.word	0x4631ff91
   163cc:	a80b227c 	.word	0xa80b227c
   163d0:	fa62f00e 	.word	0xfa62f00e
   163d4:	1b7cf815 	.word	0x1b7cf815
   163d8:	f7fda80b 	.word	0xf7fda80b
   163dc:	f104fbd5 	.word	0xf104fbd5
   163e0:	21010040 	.word	0x21010040
   163e4:	f0043428 	.word	0xf0043428
   163e8:	2800fcab 	.word	0x2800fcab
   163ec:	8081f040 	.word	0x8081f040
   163f0:	2b009b17 	.word	0x2b009b17
   163f4:	9b1ad07d 	.word	0x9b1ad07d
   163f8:	d07a2b00 	.word	0xd07a2b00
   163fc:	46282101 	.word	0x46282101
   16400:	fc9ef004 	.word	0xfc9ef004
   16404:	f2c02800 	.word	0xf2c02800
   16408:	a91e8083 	.word	0xa91e8083
   1640c:	f0044628 	.word	0xf0044628
   16410:	2800fc2f 	.word	0x2800fc2f
   16414:	4621da7c 	.word	0x4621da7c
   16418:	f7ffa80b 	.word	0xf7ffa80b
   1641c:	4606fecd 	.word	0x4606fecd
   16420:	9b17b980 	.word	0x9b17b980
   16424:	d0642b00 	.word	0xd0642b00
   16428:	2b009b1a 	.word	0x2b009b1a
   1642c:	e9cdd061 	.word	0xe9cdd061
   16430:	46230000 	.word	0x46230000
   16434:	a902462a 	.word	0xa902462a
   16438:	f7ffa80b 	.word	0xf7ffa80b
   1643c:	4606fa6b 	.word	0x4606fa6b
   16440:	d04c2800 	.word	0xd04c2800
   16444:	f003a802 	.word	0xf003a802
   16448:	a805ff59 	.word	0xa805ff59
   1644c:	ff56f003 	.word	0xff56f003
   16450:	f003a808 	.word	0xf003a808
   16454:	9b23ff53 	.word	0x9b23ff53
   16458:	d1262b01 	.word	0xd1262b01
   1645c:	b1c89828 	.word	0xb1c89828
   16460:	b1aa9a29 	.word	0xb1aa9a29
   16464:	eb052500 	.word	0xeb052500
   16468:	eb1003c5 	.word	0xeb1003c5
   1646c:	d0320483 	.word	0xd0320483
   16470:	f0034620 	.word	0xf0034620
   16474:	f104ff43 	.word	0xf104ff43
   16478:	f003000c 	.word	0xf003000c
   1647c:	f104ff3f 	.word	0xf104ff3f
   16480:	f0030018 	.word	0xf0030018
   16484:	9a29ff3b 	.word	0x9a29ff3b
   16488:	42953501 	.word	0x42953501
   1648c:	d3ea9828 	.word	0xd3ea9828
   16490:	fb94f007 	.word	0xfb94f007
   16494:	ab0b2200 	.word	0xab0b2200
   16498:	a92a701a 	.word	0xa92a701a
   1649c:	428b3301 	.word	0x428b3301
   164a0:	4630d1fa 	.word	0x4630d1fa
   164a4:	e8bdb02b 	.word	0xe8bdb02b
   164a8:	a80c83f0 	.word	0xa80c83f0
   164ac:	ff26f003 	.word	0xff26f003
   164b0:	f003a80f 	.word	0xf003a80f
   164b4:	a812ff23 	.word	0xa812ff23
   164b8:	ff20f003 	.word	0xff20f003
   164bc:	f003a815 	.word	0xf003a815
   164c0:	a818ff1d 	.word	0xa818ff1d
   164c4:	ff1af003 	.word	0xff1af003
   164c8:	f003a81b 	.word	0xf003a81b
   164cc:	a81eff17 	.word	0xa81eff17
   164d0:	ff14f003 	.word	0xff14f003
   164d4:	3501e7c2 	.word	0x3501e7c2
   164d8:	d3c44295 	.word	0xd3c44295
   164dc:	4639e7d8 	.word	0x4639e7d8
   164e0:	f004a802 	.word	0xf004a802
   164e4:	b920fbc5 	.word	0xb920fbc5
   164e8:	a8054649 	.word	0xa8054649
   164ec:	fbc0f004 	.word	0xfbc0f004
   164f0:	4e08b130 	.word	0x4e08b130
   164f4:	4e07e7a6 	.word	0x4e07e7a6
   164f8:	b02b4630 	.word	0xb02b4630
   164fc:	83f0e8bd 	.word	0x83f0e8bd
   16500:	a8084641 	.word	0xa8084641
   16504:	fbb4f004 	.word	0xfbb4f004
   16508:	28004606 	.word	0x28004606
   1650c:	e7f0d09a 	.word	0xe7f0d09a
   16510:	e7974e01 	.word	0xe7974e01
   16514:	ffffb080 	.word	0xffffb080
   16518:	ffffb380 	.word	0xffffb380

0001651c <interface_init>:
   1651c:	f44fb508 	.word	0xf44fb508
   16520:	21007290 	.word	0x21007290
   16524:	f00e4802 	.word	0xf00e4802
   16528:	2000f9b7 	.word	0x2000f9b7
   1652c:	bf00bd08 	.word	0xbf00bd08
   16530:	200226d8 	.word	0x200226d8

00016534 <interface_socket_allocate>:
   16534:	4b29b5f8 	.word	0x4b29b5f8
   16538:	681d4606 	.word	0x681d4606
   1653c:	b1e54608 	.word	0xb1e54608
   16540:	2c006a5c 	.word	0x2c006a5c
   16544:	6c9cd03d 	.word	0x6c9cd03d
   16548:	d03c2c00 	.word	0xd03c2c00
   1654c:	2c006edc 	.word	0x2c006edc
   16550:	f8d3d03b 	.word	0xf8d3d03b
   16554:	b1791090 	.word	0xb1791090
   16558:	10b4f8d3 	.word	0x10b4f8d3
   1655c:	f8d3b3b9 	.word	0xf8d3b3b9
   16560:	b3b110d8 	.word	0xb3b110d8
   16564:	10fcf8d3 	.word	0x10fcf8d3
   16568:	f04fb3a9 	.word	0xf04fb3a9
   1656c:	200c35ff 	.word	0x200c35ff
   16570:	fdf6f7fa 	.word	0xfdf6f7fa
   16574:	bdf84628 	.word	0xbdf84628
   16578:	f04f2504 	.word	0xf04f2504
   1657c:	f04f0c01 	.word	0xf04f0c01
   16580:	eb0537ff 	.word	0xeb0537ff
   16584:	00a404c5 	.word	0x00a404c5
   16588:	c004f843 	.word	0xc004f843
   1658c:	4611441c 	.word	0x4611441c
   16590:	462261a7 	.word	0x462261a7
   16594:	facaf7fd 	.word	0xfacaf7fd
   16598:	61e04603 	.word	0x61e04603
   1659c:	681bb158 	.word	0x681bb158
   165a0:	4798681b 	.word	0x4798681b
   165a4:	6034b910 	.word	0x6034b910
   165a8:	bdf84628 	.word	0xbdf84628
   165ac:	f7fd69e0 	.word	0xf7fd69e0
   165b0:	2300fadd 	.word	0x2300fadd
   165b4:	462061e3 	.word	0x462061e3
   165b8:	21002224 	.word	0x21002224
   165bc:	f96cf00e 	.word	0xf96cf00e
   165c0:	2501e7d3 	.word	0x2501e7d3
   165c4:	2502e7d9 	.word	0x2502e7d9
   165c8:	2503e7d7 	.word	0x2503e7d7
   165cc:	2505e7d5 	.word	0x2505e7d5
   165d0:	2506e7d3 	.word	0x2506e7d3
   165d4:	2507e7d1 	.word	0x2507e7d1
   165d8:	bf00e7cf 	.word	0xbf00e7cf
   165dc:	200226d8 	.word	0x200226d8

000165e0 <interface_socket_free>:
   165e0:	d9002807 	.word	0xd9002807
   165e4:	b5104770 	.word	0xb5104770
   165e8:	eb004c07 	.word	0xeb004c07
   165ec:	eb0400c0 	.word	0xeb0400c0
   165f0:	69e00480 	.word	0x69e00480
   165f4:	f7fdb108 	.word	0xf7fdb108
   165f8:	4620fab9 	.word	0x4620fab9
   165fc:	4010e8bd 	.word	0x4010e8bd
   16600:	21002224 	.word	0x21002224
   16604:	b948f00e 	.word	0xb948f00e
   16608:	200226d8 	.word	0x200226d8

0001660c <interface_socket_packet_handler_update>:
   1660c:	e92d2807 	.word	0xe92d2807
   16610:	d81e43f8 	.word	0xd81e43f8
   16614:	08c0ea4f 	.word	0x08c0ea4f
   16618:	eb084e17 	.word	0xeb084e17
   1661c:	009b0300 	.word	0x009b0300
   16620:	18f558f4 	.word	0x18f558f4
   16624:	460bb1ac 	.word	0x460bb1ac
   16628:	46114604 	.word	0x46114604
   1662c:	462a4618 	.word	0x462a4618
   16630:	901cf8d5 	.word	0x901cf8d5
   16634:	fa7af7fd 	.word	0xfa7af7fd
   16638:	b1d061e8 	.word	0xb1d061e8
   1663c:	681b6803 	.word	0x681b6803
   16640:	46074798 	.word	0x46074798
   16644:	4648b948 	.word	0x4648b948
   16648:	fa90f7fd 	.word	0xfa90f7fd
   1664c:	e8bd4638 	.word	0xe8bd4638
   16650:	270583f8 	.word	0x270583f8
   16654:	e8bd4638 	.word	0xe8bd4638
   16658:	69e883f8 	.word	0x69e883f8
   1665c:	fa86f7fd 	.word	0xfa86f7fd
   16660:	0004eb08 	.word	0x0004eb08
   16664:	0680eb06 	.word	0x0680eb06
   16668:	901cf8c6 	.word	0x901cf8c6
   1666c:	e8bd4638 	.word	0xe8bd4638
   16670:	270483f8 	.word	0x270483f8
   16674:	bf00e7f4 	.word	0xbf00e7f4
   16678:	200226d8 	.word	0x200226d8

0001667c <interface_socket_wait>:
   1667c:	eb00b5f0 	.word	0xeb00b5f0
   16680:	4c0e00c0 	.word	0x4c0e00c0
   16684:	58250080 	.word	0x58250080
   16688:	4015b083 	.word	0x4015b083
   1668c:	9301428d 	.word	0x9301428d
   16690:	d0104404 	.word	0xd0104404
   16694:	b9736863 	.word	0xb9736863
   16698:	4616460f 	.word	0x4616460f
   1669c:	e0064625 	.word	0xe0064625
   166a0:	b943686b 	.word	0xb943686b
   166a4:	4620a901 	.word	0x4620a901
   166a8:	fccaf7fa 	.word	0xfccaf7fa
   166ac:	682bb920 	.word	0x682bb920
   166b0:	42bb4033 	.word	0x42bb4033
   166b4:	2000d1f4 	.word	0x2000d1f4
   166b8:	bdf0b003 	.word	0xbdf0b003
   166bc:	200226d8 	.word	0x200226d8

000166c0 <interface_from_internal_id_search>:
   166c0:	681a4b23 	.word	0x681a4b23
   166c4:	699ab112 	.word	0x699ab112
   166c8:	d0324282 	.word	0xd0324282
   166cc:	b1126a5a 	.word	0xb1126a5a
   166d0:	42826bda 	.word	0x42826bda
   166d4:	6c9ad02f 	.word	0x6c9ad02f
   166d8:	6e1ab112 	.word	0x6e1ab112
   166dc:	d02c4282 	.word	0xd02c4282
   166e0:	b11a6eda 	.word	0xb11a6eda
   166e4:	2084f8d3 	.word	0x2084f8d3
   166e8:	d0284282 	.word	0xd0284282
   166ec:	2090f8d3 	.word	0x2090f8d3
   166f0:	f8d3b11a 	.word	0xf8d3b11a
   166f4:	428220a8 	.word	0x428220a8
   166f8:	f8d3d023 	.word	0xf8d3d023
   166fc:	b11a20b4 	.word	0xb11a20b4
   16700:	20ccf8d3 	.word	0x20ccf8d3
   16704:	d01e4282 	.word	0xd01e4282
   16708:	20d8f8d3 	.word	0x20d8f8d3
   1670c:	f8d3b11a 	.word	0xf8d3b11a
   16710:	428220f0 	.word	0x428220f0
   16714:	f8d3d019 	.word	0xf8d3d019
   16718:	b13a20fc 	.word	0xb13a20fc
   1671c:	3114f8d3 	.word	0x3114f8d3
   16720:	bf144283 	.word	0xbf144283
   16724:	30fff04f 	.word	0x30fff04f
   16728:	47702007 	.word	0x47702007
   1672c:	30fff04f 	.word	0x30fff04f
   16730:	20004770 	.word	0x20004770
   16734:	20014770 	.word	0x20014770
   16738:	20024770 	.word	0x20024770
   1673c:	20034770 	.word	0x20034770
   16740:	20044770 	.word	0x20044770
   16744:	20054770 	.word	0x20054770
   16748:	20064770 	.word	0x20064770
   1674c:	bf004770 	.word	0xbf004770
   16750:	200226d8 	.word	0x200226d8

00016754 <interface_socket_from_handle_get>:
   16754:	d8072807 	.word	0xd8072807
   16758:	00c0eb00 	.word	0x00c0eb00
   1675c:	00804b03 	.word	0x00804b03
   16760:	b10a581a 	.word	0xb10a581a
   16764:	47704418 	.word	0x47704418
   16768:	47702000 	.word	0x47702000
   1676c:	200226d8 	.word	0x200226d8

00016770 <interface_socket_event_get>:
   16770:	2807b119 	.word	0x2807b119
   16774:	2310d902 	.word	0x2310d902
   16778:	4770600b 	.word	0x4770600b
   1677c:	00c0eb00 	.word	0x00c0eb00
   16780:	00804b07 	.word	0x00804b07
   16784:	2a00581a 	.word	0x2a00581a
   16788:	581bd0f5 	.word	0x581bd0f5
   1678c:	f0030c1b 	.word	0xf0030c1b
   16790:	2a0a020a 	.word	0x2a0a020a
   16794:	f003bf14 	.word	0xf003bf14
   16798:	f003030f 	.word	0xf003030f
   1679c:	e7eb030d 	.word	0xe7eb030d
   167a0:	200226d8 	.word	0x200226d8

000167a4 <interface_socket_setopt>:
   167a4:	b5702807 	.word	0xb5702807
   167a8:	eb00d827 	.word	0xeb00d827
   167ac:	4c1600c0 	.word	0x4c1600c0
   167b0:	58250080 	.word	0x58250080
   167b4:	2901b30d 	.word	0x2901b30d
   167b8:	2a14d119 	.word	0x2a14d119
   167bc:	b183d117 	.word	0xb183d117
   167c0:	2a089a04 	.word	0x2a089a04
   167c4:	f44fd10d 	.word	0xf44fd10d
   167c8:	685a757a 	.word	0x685a757a
   167cc:	68194e0f 	.word	0x68194e0f
   167d0:	2302fba6 	.word	0x2302fba6
   167d4:	fb05099b 	.word	0xfb05099b
   167d8:	44203301 	.word	0x44203301
   167dc:	20006203 	.word	0x20006203
   167e0:	2016bd70 	.word	0x2016bd70
   167e4:	fcbcf7fa 	.word	0xfcbcf7fa
   167e8:	30fff04f 	.word	0x30fff04f
   167ec:	202abd70 	.word	0x202abd70
   167f0:	fcb6f7fa 	.word	0xfcb6f7fa
   167f4:	30fff04f 	.word	0x30fff04f
   167f8:	2009bd70 	.word	0x2009bd70
   167fc:	fcb0f7fa 	.word	0xfcb0f7fa
   16800:	30fff04f 	.word	0x30fff04f
   16804:	bf00bd70 	.word	0xbf00bd70
   16808:	200226d8 	.word	0x200226d8
   1680c:	10624dd3 	.word	0x10624dd3

00016810 <interface_socket_getopt>:
   16810:	2807b570 	.word	0x2807b570
   16814:	d8219d04 	.word	0xd8219d04
   16818:	eb004c13 	.word	0xeb004c13
   1681c:	008000c0 	.word	0x008000c0
   16820:	44045826 	.word	0x44045826
   16824:	2901b1d6 	.word	0x2901b1d6
   16828:	2a04d112 	.word	0x2a04d112
   1682c:	b14bd110 	.word	0xb14bd110
   16830:	682ab145 	.word	0x682ab145
   16834:	d1052a04 	.word	0xd1052a04
   16838:	68612200 	.word	0x68612200
   1683c:	60194610 	.word	0x60194610
   16840:	bd706062 	.word	0xbd706062
   16844:	f7fa2016 	.word	0xf7fa2016
   16848:	f04ffc8b 	.word	0xf04ffc8b
   1684c:	bd7030ff 	.word	0xbd7030ff
   16850:	f7fa202a 	.word	0xf7fa202a
   16854:	f04ffc85 	.word	0xf04ffc85
   16858:	bd7030ff 	.word	0xbd7030ff
   1685c:	f7fa2009 	.word	0xf7fa2009
   16860:	f04ffc7f 	.word	0xf04ffc7f
   16864:	bd7030ff 	.word	0xbd7030ff
   16868:	200226d8 	.word	0x200226d8

0001686c <interface_socket_fcntl>:
   1686c:	b5102807 	.word	0xb5102807
   16870:	eb00d818 	.word	0xeb00d818
   16874:	4c1100c0 	.word	0x4c1100c0
   16878:	58e00083 	.word	0x58e00083
   1687c:	2901b190 	.word	0x2901b190
   16880:	2902d005 	.word	0x2902d005
   16884:	58e0d114 	.word	0x58e0d114
   16888:	7000f3c0 	.word	0x7000f3c0
   1688c:	f012bd10 	.word	0xf012bd10
   16890:	58e20001 	.word	0x58e20001
   16894:	2000bf1a 	.word	0x2000bf1a
   16898:	5280f042 	.word	0x5280f042
   1689c:	5280f022 	.word	0x5280f022
   168a0:	bd1050e2 	.word	0xbd1050e2
   168a4:	f7fa2009 	.word	0xf7fa2009
   168a8:	f04ffc5b 	.word	0xf04ffc5b
   168ac:	bd1030ff 	.word	0xbd1030ff
   168b0:	f7fa2016 	.word	0xf7fa2016
   168b4:	f04ffc55 	.word	0xf04ffc55
   168b8:	bd1030ff 	.word	0xbd1030ff
   168bc:	200226d8 	.word	0x200226d8

000168c0 <symbol_00026c2>:
   168c0:	4ff0e92d 	.word	0x4ff0e92d
   168c4:	2100460e 	.word	0x2100460e
   168c8:	b0854605 	.word	0xb0854605
   168cc:	93004608 	.word	0x93004608
   168d0:	461c4617 	.word	0x461c4617
   168d4:	aa034613 	.word	0xaa034613
   168d8:	9038f8dd 	.word	0x9038f8dd
   168dc:	f994f7fb 	.word	0xf994f7fb
   168e0:	f7f74628 	.word	0xf7f74628
   168e4:	4682fa05 	.word	0x4682fa05
   168e8:	f7f74630 	.word	0xf7f74630
   168ec:	9903fa01 	.word	0x9903fa01
   168f0:	eb031c4b 	.word	0xeb031c4b
   168f4:	44531391 	.word	0x44531391
   168f8:	9b0f4418 	.word	0x9b0f4418
   168fc:	d8534298 	.word	0xd8534298
   16900:	f0072001 	.word	0xf0072001
   16904:	4682f947 	.word	0x4682f947
   16908:	d0522800 	.word	0xd0522800
   1690c:	94009903 	.word	0x94009903
   16910:	aa03463b 	.word	0xaa03463b
   16914:	f978f7fb 	.word	0xf978f7fb
   16918:	28004680 	.word	0x28004680
   1691c:	4628d13d 	.word	0x4628d13d
   16920:	f9e6f7f7 	.word	0xf9e6f7f7
   16924:	46024629 	.word	0x46024629
   16928:	f00d4648 	.word	0xf00d4648
   1692c:	4628ffaa 	.word	0x4628ffaa
   16930:	f9def7f7 	.word	0xf9def7f7
   16934:	eb099b03 	.word	0xeb099b03
   16938:	b19b0400 	.word	0xb19b0400
   1693c:	270a46d3 	.word	0x270a46d3
   16940:	bf282b40 	.word	0xbf282b40
   16944:	461d2340 	.word	0x461d2340
   16948:	461a4659 	.word	0x461a4659
   1694c:	f00d4620 	.word	0xf00d4620
   16950:	9b03ff98 	.word	0x9b03ff98
   16954:	1b5b442c 	.word	0x1b5b442c
   16958:	44ab7027 	.word	0x44ab7027
   1695c:	93033401 	.word	0x93033401
   16960:	d1ed2b00 	.word	0xd1ed2b00
   16964:	f7f74630 	.word	0xf7f74630
   16968:	4631f9c3 	.word	0x4631f9c3
   1696c:	46204602 	.word	0x46204602
   16970:	ff87f00d 	.word	0xff87f00d
   16974:	f7f74630 	.word	0xf7f74630
   16978:	2100f9bb 	.word	0x2100f9bb
   1697c:	18234602 	.word	0x18234602
   16980:	330154a1 	.word	0x330154a1
   16984:	eba39a10 	.word	0xeba39a10
   16988:	46500309 	.word	0x46500309
   1698c:	f0076013 	.word	0xf0076013
   16990:	4640f915 	.word	0x4640f915
   16994:	e8bdb005 	.word	0xe8bdb005
   16998:	46508ff0 	.word	0x46508ff0
   1699c:	f90ef007 	.word	0xf90ef007
   169a0:	b0054640 	.word	0xb0054640
   169a4:	8ff0e8bd 	.word	0x8ff0e8bd
   169a8:	f06f9b10 	.word	0xf06f9b10
   169ac:	60180829 	.word	0x60180829
   169b0:	f8dfe7ef 	.word	0xf8dfe7ef
   169b4:	e7ec8004 	.word	0xe7ec8004
   169b8:	ffffee80 	.word	0xffffee80

000169bc <ip_recvd_packet_free_cb>:
   169bc:	4604b510 	.word	0x4604b510
   169c0:	f7fa6800 	.word	0xf7fa6800
   169c4:	68a0fdaf 	.word	0x68a0fdaf
   169c8:	e8bdb118 	.word	0xe8bdb118
   169cc:	f0074010 	.word	0xf0074010
   169d0:	bd10b8f5 	.word	0xbd10b8f5

000169d4 <rpc_error_to_nrf_bsd_error>:
   169d4:	bf9a2810 	.word	0xbf9a2810
   169d8:	f8534b02 	.word	0xf8534b02
   169dc:	202d0020 	.word	0x202d0020
   169e0:	bf004770 	.word	0xbf004770
   169e4:	00025e30 	.word	0x00025e30

000169e8 <ip_interface_request_create>:
   169e8:	2500b570 	.word	0x2500b570
   169ec:	ac02b082 	.word	0xac02b082
   169f0:	5d04f844 	.word	0x5d04f844
   169f4:	460d4606 	.word	0x460d4606
   169f8:	46194620 	.word	0x46194620
   169fc:	f7fa4614 	.word	0xf7fa4614
   16a00:	b960fd5f 	.word	0xb960fd5f
   16a04:	22089b01 	.word	0x22089b01
   16a08:	72987258 	.word	0x72987258
   16a0c:	461872d8 	.word	0x461872d8
   16a10:	4406ea44 	.word	0x4406ea44
   16a14:	611d60dc 	.word	0x611d60dc
   16a18:	b002721a 	.word	0xb002721a
   16a1c:	9b01bd70 	.word	0x9b01bd70
   16a20:	b0024618 	.word	0xb0024618
   16a24:	bf00bd70 	.word	0xbf00bd70

00016a28 <ip_interface_request_send>:
   16a28:	460cb570 	.word	0x460cb570
   16a2c:	46114605 	.word	0x46114605
   16a30:	461e4620 	.word	0x461e4620
   16a34:	fd58f7fa 	.word	0xfd58f7fa
   16a38:	bd70b900 	.word	0xbd70b900
   16a3c:	b1086820 	.word	0xb1086820
   16a40:	fd70f7fa 	.word	0xfd70f7fa
   16a44:	f7fa4620 	.word	0xf7fa4620
   16a48:	602efd65 	.word	0x602efd65
   16a4c:	bd702023 	.word	0xbd702023

00016a50 <ip_interface_wait>:
   16a50:	4605b538 	.word	0x4605b538
   16a54:	fe12f7ff 	.word	0xfe12f7ff
   16a58:	b1084604 	.word	0xb1084604
   16a5c:	bd384620 	.word	0xbd384620
   16a60:	f7ff4628 	.word	0xf7ff4628
   16a64:	2800fe77 	.word	0x2800fe77
   16a68:	6844d0f8 	.word	0x6844d0f8
   16a6c:	d0f52c00 	.word	0xd0f52c00
   16a70:	60432300 	.word	0x60432300
   16a74:	bd384620 	.word	0xbd384620

00016a78 <ip_interface_init>:
   16a78:	2300b538 	.word	0x2300b538
   16a7c:	4c084d07 	.word	0x4c084d07
   16a80:	22204619 	.word	0x22204619
   16a84:	602b4807 	.word	0x602b4807
   16a88:	f00d6023 	.word	0xf00d6023
   16a8c:	f7faff05 	.word	0xf7faff05
   16a90:	3000fd11 	.word	0x3000fd11
   16a94:	2001bf18 	.word	0x2001bf18
   16a98:	bd384240 	.word	0xbd384240
   16a9c:	20020468 	.word	0x20020468
   16aa0:	20020464 	.word	0x20020464
   16aa4:	20020470 	.word	0x20020470

00016aa8 <ip_interface_open>:
   16aa8:	41f0e92d 	.word	0x41f0e92d
   16aac:	20004606 	.word	0x20004606
   16ab0:	0308f026 	.word	0x0308f026
   16ab4:	2b02b082 	.word	0x2b02b082
   16ab8:	4617460c 	.word	0x4617460c
   16abc:	d0029000 	.word	0xd0029000
   16ac0:	f0402e05 	.word	0xf0402e05
   16ac4:	1e638084 	.word	0x1e638084
   16ac8:	d85c2b02 	.word	0xd85c2b02
   16acc:	d1542f00 	.word	0xd1542f00
   16ad0:	d0672c01 	.word	0xd0672c01
   16ad4:	bf182c03 	.word	0xbf182c03
   16ad8:	4a482702 	.word	0x4a482702
   16adc:	46684621 	.word	0x46684621
   16ae0:	fd28f7ff 	.word	0xfd28f7ff
   16ae4:	46809b00 	.word	0x46809b00
   16ae8:	d0592b00 	.word	0xd0592b00
   16aec:	a8022100 	.word	0xa8022100
   16af0:	1d04f840 	.word	0x1d04f840
   16af4:	6403e9c3 	.word	0x6403e9c3
   16af8:	f7fa615f 	.word	0xf7fa615f
   16afc:	2800fce1 	.word	0x2800fce1
   16b00:	f247d14b 	.word	0xf247d14b
   16b04:	f04f0201 	.word	0xf04f0201
   16b08:	210833ff 	.word	0x210833ff
   16b0c:	ea429d01 	.word	0xea429d01
   16b10:	60ea4208 	.word	0x60ea4208
   16b14:	72a87268 	.word	0x72a87268
   16b18:	722972e8 	.word	0x722972e8
   16b1c:	746b742b 	.word	0x746b742b
   16b20:	74eb74ab 	.word	0x74eb74ab
   16b24:	2e0568ab 	.word	0x2e0568ab
   16b28:	030cf103 	.word	0x030cf103
   16b2c:	d00360ab 	.word	0xd00360ab
   16b30:	bf142e0a 	.word	0xbf142e0a
   16b34:	26022601 	.word	0x26022601
   16b38:	61ef616e 	.word	0x61ef616e
   16b3c:	f24761ac 	.word	0xf24761ac
   16b40:	46280101 	.word	0x46280101
   16b44:	f7fa9f00 	.word	0xf7fa9f00
   16b48:	4606fccf 	.word	0x4606fccf
   16b4c:	6828b360 	.word	0x6828b360
   16b50:	f7fab108 	.word	0xf7fab108
   16b54:	4628fce7 	.word	0x4628fce7
   16b58:	fcdcf7fa 	.word	0xfcdcf7fa
   16b5c:	25232301 	.word	0x25232301
   16b60:	4640603b 	.word	0x4640603b
   16b64:	fd3cf7ff 	.word	0xfd3cf7ff
   16b68:	f7fa4628 	.word	0xf7fa4628
   16b6c:	f04ffaf9 	.word	0xf04ffaf9
   16b70:	464038ff 	.word	0x464038ff
   16b74:	e8bdb002 	.word	0xe8bdb002
   16b78:	2c0181f0 	.word	0x2c0181f0
   16b7c:	2c02d009 	.word	0x2c02d009
   16b80:	2f02d109 	.word	0x2f02d109
   16b84:	2016d0a9 	.word	0x2016d0a9
   16b88:	faeaf7fa 	.word	0xfaeaf7fa
   16b8c:	38fff04f 	.word	0x38fff04f
   16b90:	2f01e7ef 	.word	0x2f01e7ef
   16b94:	2702d1f7 	.word	0x2702d1f7
   16b98:	9d01e79f 	.word	0x9d01e79f
   16b9c:	d1c12d00 	.word	0xd1c12d00
   16ba0:	e7de250c 	.word	0xe7de250c
   16ba4:	e7984627 	.word	0xe7984627
   16ba8:	33fff04f 	.word	0x33fff04f
   16bac:	72fff64f 	.word	0x72fff64f
   16bb0:	46402102 	.word	0x46402102
   16bb4:	fd62f7ff 	.word	0xfd62f7ff
   16bb8:	28004605 	.word	0x28004605
   16bbc:	4640d1d1 	.word	0x4640d1d1
   16bc0:	fdc8f7ff 	.word	0xfdc8f7ff
   16bc4:	6845b148 	.word	0x6845b148
   16bc8:	6046b13d 	.word	0x6046b13d
   16bcc:	202fe7c9 	.word	0x202fe7c9
   16bd0:	fac6f7fa 	.word	0xfac6f7fa
   16bd4:	38fff04f 	.word	0x38fff04f
   16bd8:	3c02e7cb 	.word	0x3c02e7cb
   16bdc:	d8c82c01 	.word	0xd8c82c01
   16be0:	9b004640 	.word	0x9b004640
   16be4:	f442681a 	.word	0xf442681a
   16be8:	601a3200 	.word	0x601a3200
   16bec:	f442681a 	.word	0xf442681a
   16bf0:	601a1280 	.word	0x601a1280
   16bf4:	e8bdb002 	.word	0xe8bdb002
   16bf8:	bf0081f0 	.word	0xbf0081f0
   16bfc:	000169bd 	.word	0x000169bd

00016c00 <ip_interface_close>:
   16c00:	41f0e92d 	.word	0x41f0e92d
   16c04:	4606b082 	.word	0x4606b082
   16c08:	fda4f7ff 	.word	0xfda4f7ff
   16c0c:	d0632800 	.word	0xd0632800
   16c10:	21004604 	.word	0x21004604
   16c14:	6827a802 	.word	0x6827a802
   16c18:	1d04f840 	.word	0x1d04f840
   16c1c:	8018f8d4 	.word	0x8018f8d4
   16c20:	fc4ef7fa 	.word	0xfc4ef7fa
   16c24:	d13a2800 	.word	0xd13a2800
   16c28:	0309f247 	.word	0x0309f247
   16c2c:	9d012208 	.word	0x9d012208
   16c30:	4306ea43 	.word	0x4306ea43
   16c34:	f8c560eb 	.word	0xf8c560eb
   16c38:	72688010 	.word	0x72688010
   16c3c:	72e872a8 	.word	0x72e872a8
   16c40:	6823722a 	.word	0x6823722a
   16c44:	0109f247 	.word	0x0109f247
   16c48:	041b0c1b 	.word	0x041b0c1b
   16c4c:	030df043 	.word	0x030df043
   16c50:	68236023 	.word	0x68236023
   16c54:	f4234628 	.word	0xf4234628
   16c58:	60233300 	.word	0x60233300
   16c5c:	f4236823 	.word	0xf4236823
   16c60:	60231380 	.word	0x60231380
   16c64:	fc40f7fa 	.word	0xfc40f7fa
   16c68:	f04fbb40 	.word	0xf04fbb40
   16c6c:	f64f33ff 	.word	0xf64f33ff
   16c70:	210e72ff 	.word	0x210e72ff
   16c74:	f7ff4630 	.word	0xf7ff4630
   16c78:	4604fd01 	.word	0x4604fd01
   16c7c:	4c17b1a0 	.word	0x4c17b1a0
   16c80:	0026f854 	.word	0x0026f854
   16c84:	f7fab120 	.word	0xf7fab120
   16c88:	2300fc45 	.word	0x2300fc45
   16c8c:	3026f844 	.word	0x3026f844
   16c90:	f7ff4630 	.word	0xf7ff4630
   16c94:	2000fca5 	.word	0x2000fca5
   16c98:	e8bdb002 	.word	0xe8bdb002
   16c9c:	9d0181f0 	.word	0x9d0181f0
   16ca0:	2d00200c 	.word	0x2d00200c
   16ca4:	e012d1cd 	.word	0xe012d1cd
   16ca8:	f7ff4630 	.word	0xf7ff4630
   16cac:	2800fd53 	.word	0x2800fd53
   16cb0:	6843d0e5 	.word	0x6843d0e5
   16cb4:	d0e22b00 	.word	0xd0e22b00
   16cb8:	e7e06044 	.word	0xe7e06044
   16cbc:	b1086828 	.word	0xb1086828
   16cc0:	fc30f7fa 	.word	0xfc30f7fa
   16cc4:	f7fa4628 	.word	0xf7fa4628
   16cc8:	2023fc25 	.word	0x2023fc25
   16ccc:	f7fa6027 	.word	0xf7fa6027
   16cd0:	f04ffa47 	.word	0xf04ffa47
   16cd4:	e7df30ff 	.word	0xe7df30ff
   16cd8:	e7f82009 	.word	0xe7f82009
   16cdc:	20020470 	.word	0x20020470

00016ce0 <ip_interface_sendto>:
   16ce0:	4ff0e92d 	.word	0x4ff0e92d
   16ce4:	b0892500 	.word	0xb0892500
   16ce8:	46149103 	.word	0x46149103
   16cec:	95079301 	.word	0x95079301
   16cf0:	9e124607 	.word	0x9e124607
   16cf4:	fd2ef7ff 	.word	0xfd2ef7ff
   16cf8:	f0002800 	.word	0xf0002800
   16cfc:	f5b48124 	.word	0xf5b48124
   16d00:	f3005f80 	.word	0xf3005f80
   16d04:	69038118 	.word	0x69038118
   16d08:	2b014605 	.word	0x2b014605
   16d0c:	80d1f000 	.word	0x80d1f000
   16d10:	0390682a 	.word	0x0390682a
   16d14:	682ad423 	.word	0x682ad423
   16d18:	d4060091 	.word	0xd4060091
   16d1c:	f0002b01 	.word	0xf0002b01
   16d20:	682b80ed 	.word	0x682b80ed
   16d24:	f140031a 	.word	0xf140031a
   16d28:	682b8102 	.word	0x682b8102
   16d2c:	f140031b 	.word	0xf140031b
   16d30:	68a88106 	.word	0x68a88106
   16d34:	9218f8df 	.word	0x9218f8df
   16d38:	f0402800 	.word	0xf0402800
   16d3c:	682b8096 	.word	0x682b8096
   16d40:	f1400118 	.word	0xf1400118
   16d44:	682b8082 	.word	0x682b8082
   16d48:	6300f023 	.word	0x6300f023
   16d4c:	f859602b 	.word	0xf859602b
   16d50:	28000027 	.word	0x28000027
   16d54:	4620d17c 	.word	0x4620d17c
   16d58:	e8bdb009 	.word	0xe8bdb009
   16d5c:	f2478ff0 	.word	0xf2478ff0
   16d60:	f04f0806 	.word	0xf04f0806
   16d64:	043b0a0c 	.word	0x043b0a0c
   16d68:	91e4f8df 	.word	0x91e4f8df
   16d6c:	46219304 	.word	0x46219304
   16d70:	f7faa807 	.word	0xf7faa807
   16d74:	2804fba5 	.word	0x2804fba5
   16d78:	2800d0f9 	.word	0x2800d0f9
   16d7c:	9b07d171 	.word	0x9b07d171
   16d80:	a008f883 	.word	0xa008f883
   16d84:	72987258 	.word	0x72987258
   16d88:	b33e72d8 	.word	0xb33e72d8
   16d8c:	687168ea 	.word	0x687168ea
   16d90:	d10a428a 	.word	0xd10a428a
   16d94:	f1032a02 	.word	0xf1032a02
   16d98:	7831001c 	.word	0x7831001c
   16d9c:	8090f000 	.word	0x8090f000
   16da0:	d1022a0a 	.word	0xd1022a0a
   16da4:	f0002924 	.word	0xf0002924
   16da8:	681880af 	.word	0x681880af
   16dac:	f7fab110 	.word	0xf7fab110
   16db0:	9b07fbb9 	.word	0x9b07fbb9
   16db4:	f7fa4618 	.word	0xf7fa4618
   16db8:	2016fbad 	.word	0x2016fbad
   16dbc:	031a682b 	.word	0x031a682b
   16dc0:	682bd453 	.word	0x682bd453
   16dc4:	2b0db29b 	.word	0x2b0db29b
   16dc8:	682bd0b6 	.word	0x682bd0b6
   16dcc:	1300f423 	.word	0x1300f423
   16dd0:	682b602b 	.word	0x682b602b
   16dd4:	3300f443 	.word	0x3300f443
   16dd8:	e7ad602b 	.word	0xe7ad602b
   16ddc:	99014642 	.word	0x99014642
   16de0:	69a96159 	.word	0x69a96159
   16de4:	61199804 	.word	0x61199804
   16de8:	43029903 	.word	0x43029903
   16dec:	605c60da 	.word	0x605c60da
   16df0:	6818b119 	.word	0x6818b119
   16df4:	f00d4622 	.word	0xf00d4622
   16df8:	682bfd44 	.word	0x682bfd44
   16dfc:	93054641 	.word	0x93054641
   16e00:	f423682b 	.word	0xf423682b
   16e04:	602b3300 	.word	0x602b3300
   16e08:	f443682b 	.word	0xf443682b
   16e0c:	602b1300 	.word	0x602b1300
   16e10:	46189b07 	.word	0x46189b07
   16e14:	f7fa9302 	.word	0xf7fa9302
   16e18:	9b02fb67 	.word	0x9b02fb67
   16e1c:	bb584683 	.word	0xbb584683
   16e20:	3200f44f 	.word	0x3200f44f
   16e24:	33fff04f 	.word	0x33fff04f
   16e28:	46384611 	.word	0x46384611
   16e2c:	fc26f7ff 	.word	0xfc26f7ff
   16e30:	682bb370 	.word	0x682bb370
   16e34:	d4370319 	.word	0xd4370319
   16e38:	d1bf280c 	.word	0xd1bf280c
   16e3c:	0027f859 	.word	0x0027f859
   16e40:	d0942800 	.word	0xd0942800
   16e44:	fb66f7fa 	.word	0xfb66f7fa
   16e48:	f859e791 	.word	0xf859e791
   16e4c:	69840027 	.word	0x69840027
   16e50:	fb60f7fa 	.word	0xfb60f7fa
   16e54:	46202300 	.word	0x46202300
   16e58:	3027f849 	.word	0x3027f849
   16e5c:	e8bdb009 	.word	0xe8bdb009
   16e60:	682b8ff0 	.word	0x682b8ff0
   16e64:	031a200c 	.word	0x031a200c
   16e68:	f7fad5ab 	.word	0xf7fad5ab
   16e6c:	f04ff979 	.word	0xf04ff979
   16e70:	f85934ff 	.word	0xf85934ff
   16e74:	e76c0027 	.word	0xe76c0027
   16e78:	469b6818 	.word	0x469b6818
   16e7c:	f7fab108 	.word	0xf7fab108
   16e80:	4658fb51 	.word	0x4658fb51
   16e84:	fb46f7fa 	.word	0xfb46f7fa
   16e88:	20239b05 	.word	0x20239b05
   16e8c:	e795602b 	.word	0xe795602b
   16e90:	f7ff4638 	.word	0xf7ff4638
   16e94:	4603fc5f 	.word	0x4603fc5f
   16e98:	6840b1f0 	.word	0x6840b1f0
   16e9c:	f8c3b1e0 	.word	0xf8c3b1e0
   16ea0:	682bb004 	.word	0x682bb004
   16ea4:	d5c70319 	.word	0xd5c70319
   16ea8:	682b68a8 	.word	0x682b68a8
   16eac:	d588031e 	.word	0xd588031e
   16eb0:	2e00e742 	.word	0x2e00e742
   16eb4:	af2cf43f 	.word	0xaf2cf43f
   16eb8:	f8df2016 	.word	0xf8df2016
   16ebc:	e7d49094 	.word	0xe7d49094
   16ec0:	f47f2910 	.word	0xf47f2910
   16ec4:	2204af72 	.word	0x2204af72
   16ec8:	835a8931 	.word	0x835a8931
   16ecc:	f1068319 	.word	0xf1068319
   16ed0:	f00d010c 	.word	0xf00d010c
   16ed4:	e01efcd6 	.word	0xe01efcd6
   16ed8:	031b682b 	.word	0x031b682b
   16edc:	af2ff53f 	.word	0xaf2ff53f
   16ee0:	b29b682b 	.word	0xb29b682b
   16ee4:	f43f2b0d 	.word	0xf43f2b0d
   16ee8:	682baf2a 	.word	0x682baf2a
   16eec:	1300f423 	.word	0x1300f423
   16ef0:	682b602b 	.word	0x682b602b
   16ef4:	3300f443 	.word	0x3300f443
   16ef8:	e720602b 	.word	0xe720602b
   16efc:	b29b682b 	.word	0xb29b682b
   16f00:	f47f2b05 	.word	0xf47f2b05
   16f04:	e70caf12 	.word	0xe70caf12
   16f08:	89312210 	.word	0x89312210
   16f0c:	8319835a 	.word	0x8319835a
   16f10:	f00d18b1 	.word	0xf00d18b1
   16f14:	f247fcb6 	.word	0xf247fcb6
   16f18:	9b070207 	.word	0x9b070207
   16f1c:	68994690 	.word	0x68994690
   16f20:	31048b58 	.word	0x31048b58
   16f24:	98014401 	.word	0x98014401
   16f28:	61586099 	.word	0x61586099
   16f2c:	2023e759 	.word	0x2023e759
   16f30:	901cf8df 	.word	0x901cf8df
   16f34:	2028e799 	.word	0x2028e799
   16f38:	9014f8df 	.word	0x9014f8df
   16f3c:	2039e795 	.word	0x2039e795
   16f40:	900cf8df 	.word	0x900cf8df
   16f44:	2009e791 	.word	0x2009e791
   16f48:	9004f8df 	.word	0x9004f8df
   16f4c:	bf00e78d 	.word	0xbf00e78d
   16f50:	20020470 	.word	0x20020470

00016f54 <ip_interface_recvfrom>:
   16f54:	4ff0e92d 	.word	0x4ff0e92d
   16f58:	2a00b085 	.word	0x2a00b085
   16f5c:	8110f000 	.word	0x8110f000
   16f60:	4699468a 	.word	0x4699468a
   16f64:	46164607 	.word	0x46164607
   16f68:	fbf4f7ff 	.word	0xfbf4f7ff
   16f6c:	28004604 	.word	0x28004604
   16f70:	810df000 	.word	0x810df000
   16f74:	02d96803 	.word	0x02d96803
   16f78:	f019d565 	.word	0xf019d565
   16f7c:	bf180f02 	.word	0xbf180f02
   16f80:	0800f04f 	.word	0x0800f04f
   16f84:	3bfff04f 	.word	0x3bfff04f
   16f88:	6803bf08 	.word	0x6803bf08
   16f8c:	0510f009 	.word	0x0510f009
   16f90:	f083bf04 	.word	0xf083bf04
   16f94:	f3c85880 	.word	0xf3c85880
   16f98:	68237800 	.word	0x68237800
   16f9c:	d56d03da 	.word	0xd56d03da
   16fa0:	69e06823 	.word	0x69e06823
   16fa4:	3380f423 	.word	0x3380f423
   16fa8:	68036023 	.word	0x68036023
   16fac:	479868db 	.word	0x479868db
   16fb0:	3ffff1b0 	.word	0x3ffff1b0
   16fb4:	f0004683 	.word	0xf0004683
   16fb8:	42868081 	.word	0x42868081
   16fbc:	6923dd03 	.word	0x6923dd03
   16fc0:	f0002b01 	.word	0xf0002b01
   16fc4:	250080a7 	.word	0x250080a7
   16fc8:	9b0f69e0 	.word	0x9b0f69e0
   16fcc:	681bb103 	.word	0x681bb103
   16fd0:	e9cd9a0e 	.word	0xe9cd9a0e
   16fd4:	e9cda600 	.word	0xe9cda600
   16fd8:	68032302 	.word	0x68032302
   16fdc:	689b464a 	.word	0x689b464a
   16fe0:	47984669 	.word	0x47984669
   16fe4:	69e04683 	.word	0x69e04683
   16fe8:	3ffff1bb 	.word	0x3ffff1bb
   16fec:	bf186803 	.word	0xbf186803
   16ff0:	68db2601 	.word	0x68db2601
   16ff4:	2600bf0a 	.word	0x2600bf0a
   16ff8:	0800f04f 	.word	0x0800f04f
   16ffc:	0823f04f 	.word	0x0823f04f
   17000:	30014798 	.word	0x30014798
   17004:	2d00d135 	.word	0x2d00d135
   17008:	80b6f000 	.word	0x80b6f000
   1700c:	f0002e00 	.word	0xf0002e00
   17010:	682380a6 	.word	0x682380a6
   17014:	d5060319 	.word	0xd5060319
   17018:	b29b6823 	.word	0xb29b6823
   1701c:	d0022b0d 	.word	0xd0022b0d
   17020:	2b016923 	.word	0x2b016923
   17024:	6823d025 	.word	0x6823d025
   17028:	4f80f013 	.word	0x4f80f013
   1702c:	f0406823 	.word	0xf0406823
   17030:	031a80b1 	.word	0x031a80b1
   17034:	f1b8d475 	.word	0xf1b8d475
   17038:	f0400f00 	.word	0xf0400f00
   1703c:	4658808a 	.word	0x4658808a
   17040:	e8bdb005 	.word	0xe8bdb005
   17044:	68038ff0 	.word	0x68038ff0
   17048:	2b06b29b 	.word	0x2b06b29b
   1704c:	6803d073 	.word	0x6803d073
   17050:	2b07b29b 	.word	0x2b07b29b
   17054:	f04fbf0c 	.word	0xf04fbf0c
   17058:	f04f0809 	.word	0xf04f0809
   1705c:	69e00839 	.word	0x69e00839
   17060:	68db6803 	.word	0x68db6803
   17064:	f1b04798 	.word	0xf1b04798
   17068:	46833fff 	.word	0x46833fff
   1706c:	f04fd0db 	.word	0xf04fd0db
   17070:	68233bff 	.word	0x68233bff
   17074:	3380f443 	.word	0x3380f443
   17078:	e7dc6023 	.word	0xe7dc6023
   1707c:	0f00f1b8 	.word	0x0f00f1b8
   17080:	8081f000 	.word	0x8081f000
   17084:	3280f44f 	.word	0x3280f44f
   17088:	46116a23 	.word	0x46116a23
   1708c:	bf082b00 	.word	0xbf082b00
   17090:	33fff04f 	.word	0x33fff04f
   17094:	f7ff4638 	.word	0xf7ff4638
   17098:	4680faf1 	.word	0x4680faf1
   1709c:	6823b358 	.word	0x6823b358
   170a0:	031b69e0 	.word	0x031b69e0
   170a4:	6823d521 	.word	0x6823d521
   170a8:	2b0db29b 	.word	0x2b0db29b
   170ac:	6925d01d 	.word	0x6925d01d
   170b0:	0501f1a5 	.word	0x0501f1a5
   170b4:	f585fab5 	.word	0xf585fab5
   170b8:	e786096d 	.word	0xe786096d
   170bc:	03186823 	.word	0x03186823
   170c0:	6823d5dc 	.word	0x6823d5dc
   170c4:	2b0db29b 	.word	0x2b0db29b
   170c8:	6923d0d8 	.word	0x6923d0d8
   170cc:	2b0169e0 	.word	0x2b0169e0
   170d0:	f04fd034 	.word	0xf04fd034
   170d4:	68230839 	.word	0x68230839
   170d8:	041b0c1b 	.word	0x041b0c1b
   170dc:	030df043 	.word	0x030df043
   170e0:	68236023 	.word	0x68236023
   170e4:	1380f423 	.word	0x1380f423
   170e8:	68036023 	.word	0x68036023
   170ec:	479868db 	.word	0x479868db
   170f0:	d1be3001 	.word	0xd1be3001
   170f4:	4638e797 	.word	0x4638e797
   170f8:	fb2cf7ff 	.word	0xfb2cf7ff
   170fc:	f8d0b138 	.word	0xf8d0b138
   17100:	f1b88004 	.word	0xf1b88004
   17104:	d0020f00 	.word	0xd0020f00
   17108:	60432300 	.word	0x60432300
   1710c:	f04fe7c7 	.word	0xf04fe7c7
   17110:	e7420801 	.word	0xe7420801
   17114:	6823b11d 	.word	0x6823b11d
   17118:	d5b300db 	.word	0xd5b300db
   1711c:	69e0e753 	.word	0x69e0e753
   17120:	6823e753 	.word	0x6823e753
   17124:	2b0db29b 	.word	0x2b0db29b
   17128:	68a3d185 	.word	0x68a3d185
   1712c:	d0822b00 	.word	0xd0822b00
   17130:	8008f8d4 	.word	0x8008f8d4
   17134:	f04fe77f 	.word	0xf04fe77f
   17138:	e7900809 	.word	0xe7900809
   1713c:	68db6803 	.word	0x68db6803
   17140:	30014798 	.word	0x30014798
   17144:	f04fd00b 	.word	0xf04fd00b
   17148:	68230823 	.word	0x68230823
   1714c:	3380f443 	.word	0x3380f443
   17150:	46406023 	.word	0x46406023
   17154:	f804f7fa 	.word	0xf804f7fa
   17158:	3bfff04f 	.word	0x3bfff04f
   1715c:	6823e76f 	.word	0x6823e76f
   17160:	0b00f04f 	.word	0x0b00f04f
   17164:	041b0c1b 	.word	0x041b0c1b
   17168:	030df043 	.word	0x030df043
   1716c:	68236023 	.word	0x68236023
   17170:	1380f423 	.word	0x1380f423
   17174:	e7626023 	.word	0xe7626023
   17178:	f47f2e00 	.word	0xf47f2e00
   1717c:	e752af4a 	.word	0xe752af4a
   17180:	0816f04f 	.word	0x0816f04f
   17184:	f04fe7e5 	.word	0xf04fe7e5
   17188:	69e00823 	.word	0x69e00823
   1718c:	f04fe7ad 	.word	0xf04fe7ad
   17190:	e7de0809 	.word	0xe7de0809
   17194:	4380f023 	.word	0x4380f023
   17198:	68236023 	.word	0x68236023
   1719c:	0869f04f 	.word	0x0869f04f
   171a0:	041b0c1b 	.word	0x041b0c1b
   171a4:	030df043 	.word	0x030df043
   171a8:	e7d26023 	.word	0xe7d26023

000171ac <ip_interface_connect>:
   171ac:	41f0e92d 	.word	0x41f0e92d
   171b0:	2900b082 	.word	0x2900b082
   171b4:	2a00d044 	.word	0x2a00d044
   171b8:	4606d042 	.word	0x4606d042
   171bc:	f7ff460f 	.word	0xf7ff460f
   171c0:	4605fac9 	.word	0x4605fac9
   171c4:	f0002800 	.word	0xf0002800
   171c8:	68038096 	.word	0x68038096
   171cc:	2b02b29b 	.word	0x2b02b29b
   171d0:	6803d004 	.word	0x6803d004
   171d4:	2b04b29b 	.word	0x2b04b29b
   171d8:	808df040 	.word	0x808df040
   171dc:	f0116829 	.word	0xf0116829
   171e0:	f0405100 	.word	0xf0405100
   171e4:	a8028084 	.word	0xa8028084
   171e8:	1d04f840 	.word	0x1d04f840
   171ec:	8018f8d5 	.word	0x8018f8d5
   171f0:	f966f7fa 	.word	0xf966f7fa
   171f4:	2108bb70 	.word	0x2108bb70
   171f8:	9c010433 	.word	0x9c010433
   171fc:	42e0f443 	.word	0x42e0f443
   17200:	0202f042 	.word	0x0202f042
   17204:	f8c460e2 	.word	0xf8c460e2
   17208:	72608010 	.word	0x72608010
   1720c:	72e072a0 	.word	0x72e072a0
   17210:	f4437221 	.word	0xf4437221
   17214:	f04343e0 	.word	0xf04343e0
   17218:	60e30302 	.word	0x60e30302
   1721c:	69aa68a3 	.word	0x69aa68a3
   17220:	61223304 	.word	0x61223304
   17224:	68eb60a3 	.word	0x68eb60a3
   17228:	4293687a 	.word	0x4293687a
   1722c:	2b02d108 	.word	0x2b02d108
   17230:	0018f104 	.word	0x0018f104
   17234:	d03a783a 	.word	0xd03a783a
   17238:	d1012b0a 	.word	0xd1012b0a
   1723c:	d00e2a24 	.word	0xd00e2a24
   17240:	46202416 	.word	0x46202416
   17244:	ff8cf7f9 	.word	0xff8cf7f9
   17248:	34fff04f 	.word	0x34fff04f
   1724c:	b0024620 	.word	0xb0024620
   17250:	81f0e8bd 	.word	0x81f0e8bd
   17254:	2c009c01 	.word	0x2c009c01
   17258:	0433d04f 	.word	0x0433d04f
   1725c:	2210e7d9 	.word	0x2210e7d9
   17260:	18b9893b 	.word	0x18b9893b
   17264:	82a382e2 	.word	0x82a382e2
   17268:	fb0bf00d 	.word	0xfb0bf00d
   1726c:	8ae268a3 	.word	0x8ae268a3
   17270:	0102f247 	.word	0x0102f247
   17274:	60a34413 	.word	0x60a34413
   17278:	682b682f 	.word	0x682b682f
   1727c:	f0434620 	.word	0xf0434620
   17280:	602b5300 	.word	0x602b5300
   17284:	f930f7fa 	.word	0xf930f7fa
   17288:	682bb9e0 	.word	0x682bb9e0
   1728c:	5880f013 	.word	0x5880f013
   17290:	f04fd12f 	.word	0xf04fd12f
   17294:	f64f33ff 	.word	0xf64f33ff
   17298:	210572ff 	.word	0x210572ff
   1729c:	f7ff4630 	.word	0xf7ff4630
   172a0:	4604f9ed 	.word	0x4604f9ed
   172a4:	2c73b1c0 	.word	0x2c73b1c0
   172a8:	602fd0cb 	.word	0x602fd0cb
   172ac:	2a10e7c9 	.word	0x2a10e7c9
   172b0:	2204d1c6 	.word	0x2204d1c6
   172b4:	f107893b 	.word	0xf107893b
   172b8:	82e2010c 	.word	0x82e2010c
   172bc:	f00d82a3 	.word	0xf00d82a3
   172c0:	e7d3fae0 	.word	0xe7d3fae0
   172c4:	b1086820 	.word	0xb1086820
   172c8:	f92cf7fa 	.word	0xf92cf7fa
   172cc:	f7fa4620 	.word	0xf7fa4620
   172d0:	2423f921 	.word	0x2423f921
   172d4:	e7b4602f 	.word	0xe7b4602f
   172d8:	f7ff4630 	.word	0xf7ff4630
   172dc:	2800fa3b 	.word	0x2800fa3b
   172e0:	6844d0b4 	.word	0x6844d0b4
   172e4:	d0b12c00 	.word	0xd0b12c00
   172e8:	8004f8c0 	.word	0x8004f8c0
   172ec:	2472e7db 	.word	0x2472e7db
   172f0:	2473e7a7 	.word	0x2473e7a7
   172f4:	2409e7a5 	.word	0x2409e7a5
   172f8:	240ce7a3 	.word	0x240ce7a3
   172fc:	bf00e7a1 	.word	0xbf00e7a1

00017300 <ip_interface_bind>:
   17300:	41f0e92d 	.word	0x41f0e92d
   17304:	b389b082 	.word	0xb389b082
   17308:	4607b382 	.word	0x4607b382
   1730c:	f7ff460e 	.word	0xf7ff460e
   17310:	4605fa21 	.word	0x4605fa21
   17314:	d07b2800 	.word	0xd07b2800
   17318:	b29b6803 	.word	0xb29b6803
   1731c:	d1772b02 	.word	0xd1772b02
   17320:	a8022100 	.word	0xa8022100
   17324:	1d04f840 	.word	0x1d04f840
   17328:	8018f8d5 	.word	0x8018f8d5
   1732c:	f8c8f7fa 	.word	0xf8c8f7fa
   17330:	f247bb30 	.word	0xf247bb30
   17334:	22080305 	.word	0x22080305
   17338:	ea439c01 	.word	0xea439c01
   1733c:	60e34307 	.word	0x60e34307
   17340:	8010f8c4 	.word	0x8010f8c4
   17344:	72a07260 	.word	0x72a07260
   17348:	722272e0 	.word	0x722272e0
   1734c:	330468a3 	.word	0x330468a3
   17350:	68eb60a3 	.word	0x68eb60a3
   17354:	42936872 	.word	0x42936872
   17358:	2b02d108 	.word	0x2b02d108
   1735c:	0018f104 	.word	0x0018f104
   17360:	d03c7832 	.word	0xd03c7832
   17364:	d1012b0a 	.word	0xd1012b0a
   17368:	d00e2a24 	.word	0xd00e2a24
   1736c:	46202416 	.word	0x46202416
   17370:	fef6f7f9 	.word	0xfef6f7f9
   17374:	34fff04f 	.word	0x34fff04f
   17378:	b0024620 	.word	0xb0024620
   1737c:	81f0e8bd 	.word	0x81f0e8bd
   17380:	2c009c01 	.word	0x2c009c01
   17384:	240cd1e2 	.word	0x240cd1e2
   17388:	2210e7f1 	.word	0x2210e7f1
   1738c:	18b18933 	.word	0x18b18933
   17390:	82a382e2 	.word	0x82a382e2
   17394:	fa75f00d 	.word	0xfa75f00d
   17398:	8ae268a3 	.word	0x8ae268a3
   1739c:	0105f247 	.word	0x0105f247
   173a0:	60a34413 	.word	0x60a34413
   173a4:	4620682b 	.word	0x4620682b
   173a8:	041b0c1b 	.word	0x041b0c1b
   173ac:	0303f043 	.word	0x0303f043
   173b0:	682e602b 	.word	0x682e602b
   173b4:	f898f7fa 	.word	0xf898f7fa
   173b8:	b9d84680 	.word	0xb9d84680
   173bc:	33fff04f 	.word	0x33fff04f
   173c0:	72fff64f 	.word	0x72fff64f
   173c4:	46382104 	.word	0x46382104
   173c8:	f958f7ff 	.word	0xf958f7ff
   173cc:	b3084604 	.word	0xb3084604
   173d0:	0c1b682b 	.word	0x0c1b682b
   173d4:	f043041b 	.word	0xf043041b
   173d8:	602b0302 	.word	0x602b0302
   173dc:	2a10e7c7 	.word	0x2a10e7c7
   173e0:	2204d1c4 	.word	0x2204d1c4
   173e4:	f1068933 	.word	0xf1068933
   173e8:	82e2010c 	.word	0x82e2010c
   173ec:	f00d82a3 	.word	0xf00d82a3
   173f0:	e7d1fa48 	.word	0xe7d1fa48
   173f4:	b1086820 	.word	0xb1086820
   173f8:	f894f7fa 	.word	0xf894f7fa
   173fc:	04360c36 	.word	0x04360c36
   17400:	f0464620 	.word	0xf0464620
   17404:	f7fa0602 	.word	0xf7fa0602
   17408:	2423f885 	.word	0x2423f885
   1740c:	e7ae602e 	.word	0xe7ae602e
   17410:	e7ac2409 	.word	0xe7ac2409
   17414:	f7ff4638 	.word	0xf7ff4638
   17418:	2800f99d 	.word	0x2800f99d
   1741c:	6844d0ac 	.word	0x6844d0ac
   17420:	d0a92c00 	.word	0xd0a92c00
   17424:	8004f8c0 	.word	0x8004f8c0
   17428:	bf00e7d2 	.word	0xbf00e7d2

0001742c <ip_interface_listen>:
   1742c:	41f0e92d 	.word	0x41f0e92d
   17430:	4606b082 	.word	0x4606b082
   17434:	f98ef7ff 	.word	0xf98ef7ff
   17438:	d0672800 	.word	0xd0672800
   1743c:	46056803 	.word	0x46056803
   17440:	2b04b29b 	.word	0x2b04b29b
   17444:	2100d162 	.word	0x2100d162
   17448:	46304a32 	.word	0x46304a32
   1744c:	f8def7ff 	.word	0xf8def7ff
   17450:	28004601 	.word	0x28004601
   17454:	a802d15c 	.word	0xa802d15c
   17458:	1d04f840 	.word	0x1d04f840
   1745c:	f7fa69af 	.word	0xf7fa69af
   17460:	bba8f82f 	.word	0xbba8f82f
   17464:	0308f247 	.word	0x0308f247
   17468:	9c012208 	.word	0x9c012208
   1746c:	4306ea43 	.word	0x4306ea43
   17470:	612760e3 	.word	0x612760e3
   17474:	72a07260 	.word	0x72a07260
   17478:	722272e0 	.word	0x722272e0
   1747c:	f24768a3 	.word	0xf24768a3
   17480:	33040108 	.word	0x33040108
   17484:	682b60a3 	.word	0x682b60a3
   17488:	0c1b4620 	.word	0x0c1b4620
   1748c:	f043041b 	.word	0xf043041b
   17490:	602b0306 	.word	0x602b0306
   17494:	f7fa682f 	.word	0xf7fa682f
   17498:	4680f827 	.word	0x4680f827
   1749c:	f04fb9e8 	.word	0xf04fb9e8
   174a0:	f64f33ff 	.word	0xf64f33ff
   174a4:	210772ff 	.word	0x210772ff
   174a8:	f7ff4630 	.word	0xf7ff4630
   174ac:	4604f8e7 	.word	0x4604f8e7
   174b0:	682bb308 	.word	0x682bb308
   174b4:	041b0c1b 	.word	0x041b0c1b
   174b8:	0304f043 	.word	0x0304f043
   174bc:	4620602b 	.word	0x4620602b
   174c0:	fe4ef7f9 	.word	0xfe4ef7f9
   174c4:	34fff04f 	.word	0x34fff04f
   174c8:	b0024620 	.word	0xb0024620
   174cc:	81f0e8bd 	.word	0x81f0e8bd
   174d0:	2c009c01 	.word	0x2c009c01
   174d4:	240cd1d2 	.word	0x240cd1d2
   174d8:	6820e7f1 	.word	0x6820e7f1
   174dc:	f7fab108 	.word	0xf7fab108
   174e0:	0c3ff821 	.word	0x0c3ff821
   174e4:	4620043f 	.word	0x4620043f
   174e8:	0704f047 	.word	0x0704f047
   174ec:	f812f7fa 	.word	0xf812f7fa
   174f0:	602f2423 	.word	0x602f2423
   174f4:	4630e7e3 	.word	0x4630e7e3
   174f8:	f92cf7ff 	.word	0xf92cf7ff
   174fc:	d0e32800 	.word	0xd0e32800
   17500:	2c006844 	.word	0x2c006844
   17504:	f8c0d0e0 	.word	0xf8c0d0e0
   17508:	e7d28004 	.word	0xe7d28004
   1750c:	e7d62409 	.word	0xe7d62409
   17510:	e7d42423 	.word	0xe7d42423
   17514:	000169bd 	.word	0x000169bd

00017518 <ip_interface_accept>:
   17518:	4ff0e92d 	.word	0x4ff0e92d
   1751c:	b0852500 	.word	0xb0852500
   17520:	4690460f 	.word	0x4690460f
   17524:	46069502 	.word	0x46069502
   17528:	f914f7ff 	.word	0xf914f7ff
   1752c:	28004604 	.word	0x28004604
   17530:	811cf000 	.word	0x811cf000
   17534:	b29b6803 	.word	0xb29b6803
   17538:	d10a2b07 	.word	0xd10a2b07
   1753c:	68056803 	.word	0x68056803
   17540:	d41600db 	.word	0xd41600db
   17544:	3580f415 	.word	0x3580f415
   17548:	6805d019 	.word	0x6805d019
   1754c:	3580f415 	.word	0x3580f415
   17550:	f04fd124 	.word	0xf04fd124
   17554:	9b020909 	.word	0x9b020909
   17558:	4628b113 	.word	0x4628b113
   1755c:	f840f7ff 	.word	0xf840f7ff
   17560:	f04f4648 	.word	0xf04f4648
   17564:	f7f939ff 	.word	0xf7f939ff
   17568:	4648fdfb 	.word	0x4648fdfb
   1756c:	e8bdb005 	.word	0xe8bdb005
   17570:	f4158ff0 	.word	0xf4158ff0
   17574:	d16d3580 	.word	0xd16d3580
   17578:	0923f04f 	.word	0x0923f04f
   1757c:	f44fe7eb 	.word	0xf44fe7eb
   17580:	f04f3280 	.word	0xf04f3280
   17584:	461133ff 	.word	0x461133ff
   17588:	f7ff4630 	.word	0xf7ff4630
   1758c:	4681f877 	.word	0x4681f877
   17590:	d07e2800 	.word	0xd07e2800
   17594:	f4156825 	.word	0xf4156825
   17598:	d0dc3580 	.word	0xd0dc3580
   1759c:	30fff04f 	.word	0x30fff04f
   175a0:	e9cd2300 	.word	0xe9cd2300
   175a4:	4a750300 	.word	0x4a750300
   175a8:	a8026921 	.word	0xa8026921
   175ac:	ffc2f7fe 	.word	0xffc2f7fe
   175b0:	46059b02 	.word	0x46059b02
   175b4:	f0002b00 	.word	0xf0002b00
   175b8:	210080dd 	.word	0x210080dd
   175bc:	a8046962 	.word	0xa8046962
   175c0:	68e2615a 	.word	0x68e2615a
   175c4:	1d04f840 	.word	0x1d04f840
   175c8:	692260da 	.word	0x692260da
   175cc:	f8d4611a 	.word	0xf8d4611a
   175d0:	f7f99018 	.word	0xf7f99018
   175d4:	2800ff75 	.word	0x2800ff75
   175d8:	f247d143 	.word	0xf247d143
   175dc:	2108030c 	.word	0x2108030c
   175e0:	b00cf8dd 	.word	0xb00cf8dd
   175e4:	4306ea43 	.word	0x4306ea43
   175e8:	300cf8cb 	.word	0x300cf8cb
   175ec:	9010f8cb 	.word	0x9010f8cb
   175f0:	0009f88b 	.word	0x0009f88b
   175f4:	000af88b 	.word	0x000af88b
   175f8:	000bf88b 	.word	0x000bf88b
   175fc:	1008f88b 	.word	0x1008f88b
   17600:	f2476823 	.word	0xf2476823
   17604:	0c1b010c 	.word	0x0c1b010c
   17608:	f043041b 	.word	0xf043041b
   1760c:	60230308 	.word	0x60230308
   17610:	f8d44658 	.word	0xf8d44658
   17614:	f7f99000 	.word	0xf7f99000
   17618:	4682ff67 	.word	0x4682ff67
   1761c:	6822bb48 	.word	0x6822bb48
   17620:	f04f9900 	.word	0xf04f9900
   17624:	400a33ff 	.word	0x400a33ff
   17628:	21096022 	.word	0x21096022
   1762c:	72fff64f 	.word	0x72fff64f
   17630:	f7ff4630 	.word	0xf7ff4630
   17634:	4681f823 	.word	0x4681f823
   17638:	f0002800 	.word	0xf0002800
   1763c:	68238085 	.word	0x68238085
   17640:	431a9a01 	.word	0x431a9a01
   17644:	68236022 	.word	0x68236022
   17648:	041b0c1b 	.word	0x041b0c1b
   1764c:	0307f043 	.word	0x0307f043
   17650:	e7806023 	.word	0xe7806023
   17654:	5280f06f 	.word	0x5280f06f
   17658:	5380f04f 	.word	0x5380f04f
   1765c:	2300e9cd 	.word	0x2300e9cd
   17660:	f8dde7a1 	.word	0xf8dde7a1
   17664:	f04fb00c 	.word	0xf04fb00c
   17668:	f1bb090c 	.word	0xf1bb090c
   1766c:	d1c70f00 	.word	0xd1c70f00
   17670:	f8dbe771 	.word	0xf8dbe771
   17674:	b1080000 	.word	0xb1080000
   17678:	ff54f7f9 	.word	0xff54f7f9
   1767c:	4919ea4f 	.word	0x4919ea4f
   17680:	ea4f4658 	.word	0xea4f4658
   17684:	f7f94909 	.word	0xf7f94909
   17688:	f049ff45 	.word	0xf049ff45
   1768c:	60230307 	.word	0x60230307
   17690:	4630e772 	.word	0x4630e772
   17694:	f85ef7ff 	.word	0xf85ef7ff
   17698:	f8d0b130 	.word	0xf8d0b130
   1769c:	f1b99004 	.word	0xf1b99004
   176a0:	d0010f00 	.word	0xd0010f00
   176a4:	e7756045 	.word	0xe7756045
   176a8:	03d96823 	.word	0x03d96823
   176ac:	af76f53f 	.word	0xaf76f53f
   176b0:	99024d33 	.word	0x99024d33
   176b4:	3026f855 	.word	0x3026f855
   176b8:	618b699b 	.word	0x618b699b
   176bc:	68cbb147 	.word	0x68cbb147
   176c0:	d0242b0a 	.word	0xd0242b0a
   176c4:	d1032b02 	.word	0xd1032b02
   176c8:	2000f8d8 	.word	0x2000f8d8
   176cc:	d0322a10 	.word	0xd0322a10
   176d0:	482c680a 	.word	0x482c680a
   176d4:	f0424002 	.word	0xf0424002
   176d8:	600a0205 	.word	0x600a0205
   176dc:	68119a02 	.word	0x68119a02
   176e0:	3100f441 	.word	0x3100f441
   176e4:	68116011 	.word	0x68116011
   176e8:	1180f441 	.word	0x1180f441
   176ec:	68236011 	.word	0x68236011
   176f0:	f0434003 	.word	0xf0434003
   176f4:	60230307 	.word	0x60230307
   176f8:	0026f855 	.word	0x0026f855
   176fc:	ff0af7f9 	.word	0xff0af7f9
   17700:	46482300 	.word	0x46482300
   17704:	3026f845 	.word	0x3026f845
   17708:	e8bdb005 	.word	0xe8bdb005
   1770c:	f8d88ff0 	.word	0xf8d88ff0
   17710:	2a242000 	.word	0x2a242000
   17714:	703ad1dc 	.word	0x703ad1dc
   17718:	607b2210 	.word	0x607b2210
   1771c:	3026f855 	.word	0x3026f855
   17720:	0010f107 	.word	0x0010f107
   17724:	813b8b9b 	.word	0x813b8b9b
   17728:	1026f855 	.word	0x1026f855
   1772c:	f00d3120 	.word	0xf00d3120
   17730:	9902f8a8 	.word	0x9902f8a8
   17734:	703ae7cc 	.word	0x703ae7cc
   17738:	f855607b 	.word	0xf855607b
   1773c:	f1073026 	.word	0xf1073026
   17740:	8b9b000c 	.word	0x8b9b000c
   17744:	e7ee2204 	.word	0xe7ee2204
   17748:	f7ff4630 	.word	0xf7ff4630
   1774c:	b138f803 	.word	0xb138f803
   17750:	9004f8d0 	.word	0x9004f8d0
   17754:	0f00f1b9 	.word	0x0f00f1b9
   17758:	f8c0d002 	.word	0xf8c0d002
   1775c:	e76ea004 	.word	0xe76ea004
   17760:	9a016823 	.word	0x9a016823
   17764:	431346a9 	.word	0x431346a9
   17768:	e7a16023 	.word	0xe7a16023
   1776c:	f04f4605 	.word	0xf04f4605
   17770:	e6f00909 	.word	0xe6f00909
   17774:	090cf04f 	.word	0x090cf04f
   17778:	bf00e6f2 	.word	0xbf00e6f2
   1777c:	000169bd 	.word	0x000169bd
   17780:	20020470 	.word	0x20020470
   17784:	ffff0000 	.word	0xffff0000

00017788 <ip_interface_setopt>:
   17788:	41f0e92d 	.word	0x41f0e92d
   1778c:	b0842901 	.word	0xb0842901
   17790:	809cf040 	.word	0x809cf040
   17794:	4690460e 	.word	0x4690460e
   17798:	4607461d 	.word	0x4607461d
   1779c:	ffdaf7fe 	.word	0xffdaf7fe
   177a0:	28004604 	.word	0x28004604
   177a4:	80a5f000 	.word	0x80a5f000
   177a8:	0f19f1b8 	.word	0x0f19f1b8
   177ac:	2d00d16e 	.word	0x2d00d16e
   177b0:	8092f000 	.word	0x8092f000
   177b4:	f7f64628 	.word	0xf7f64628
   177b8:	9b0afa9b 	.word	0x9b0afa9b
   177bc:	f0404298 	.word	0xf0404298
   177c0:	6823808b 	.word	0x6823808b
   177c4:	2b02b29b 	.word	0x2b02b29b
   177c8:	4629d173 	.word	0x4629d173
   177cc:	f00768e0 	.word	0xf00768e0
   177d0:	9002feb9 	.word	0x9002feb9
   177d4:	bf083001 	.word	0xbf083001
   177d8:	d04e2516 	.word	0xd04e2516
   177dc:	025b6823 	.word	0x025b6823
   177e0:	6823d44a 	.word	0x6823d44a
   177e4:	0300f413 	.word	0x0300f413
   177e8:	6826d146 	.word	0x6826d146
   177ec:	a8046822 	.word	0xa8046822
   177f0:	0280f442 	.word	0x0280f442
   177f4:	21046022 	.word	0x21046022
   177f8:	3d04f840 	.word	0x3d04f840
   177fc:	8018f8d4 	.word	0x8018f8d4
   17800:	fe5ef7f9 	.word	0xfe5ef7f9
   17804:	d14e2800 	.word	0xd14e2800
   17808:	0203f247 	.word	0x0203f247
   1780c:	21082300 	.word	0x21082300
   17810:	ea429d03 	.word	0xea429d03
   17814:	60ea4207 	.word	0x60ea4207
   17818:	8010f8c5 	.word	0x8010f8c5
   1781c:	726b7229 	.word	0x726b7229
   17820:	72eb72ab 	.word	0x72eb72ab
   17824:	0c08f04f 	.word	0x0c08f04f
   17828:	20102300 	.word	0x20102300
   1782c:	68aa2130 	.word	0x68aa2130
   17830:	4462756b 	.word	0x4462756b
   17834:	75ab60aa 	.word	0x75ab60aa
   17838:	76ab75eb 	.word	0x76ab75eb
   1783c:	f88576eb 	.word	0xf88576eb
   17840:	7628c014 	.word	0x7628c014
   17844:	22047669 	.word	0x22047669
   17848:	010ceb0d 	.word	0x010ceb0d
   1784c:	f00d6828 	.word	0xf00d6828
   17850:	f247f818 	.word	0xf247f818
   17854:	46280103 	.word	0x46280103
   17858:	fe46f7f9 	.word	0xfe46f7f9
   1785c:	bb504680 	.word	0xbb504680
   17860:	0200f44f 	.word	0x0200f44f
   17864:	33fff04f 	.word	0x33fff04f
   17868:	46384611 	.word	0x46384611
   1786c:	ff06f7fe 	.word	0xff06f7fe
   17870:	b3984605 	.word	0xb3984605
   17874:	e0006026 	.word	0xe0006026
   17878:	46282523 	.word	0x46282523
   1787c:	fc70f7f9 	.word	0xfc70f7f9
   17880:	35fff04f 	.word	0x35fff04f
   17884:	b0044628 	.word	0xb0044628
   17888:	81f0e8bd 	.word	0x81f0e8bd
   1788c:	46429b0a 	.word	0x46429b0a
   17890:	46319300 	.word	0x46319300
   17894:	4638462b 	.word	0x4638462b
   17898:	ff84f7fe 	.word	0xff84f7fe
   1789c:	46284605 	.word	0x46284605
   178a0:	e8bdb004 	.word	0xe8bdb004
   178a4:	9d0381f0 	.word	0x9d0381f0
   178a8:	d1bb2d00 	.word	0xd1bb2d00
   178ac:	250c6026 	.word	0x250c6026
   178b0:	2509e7e3 	.word	0x2509e7e3
   178b4:	6828e7e1 	.word	0x6828e7e1
   178b8:	f7f9b108 	.word	0xf7f9b108
   178bc:	4628fe33 	.word	0x4628fe33
   178c0:	fe28f7f9 	.word	0xfe28f7f9
   178c4:	60262523 	.word	0x60262523
   178c8:	e7d66026 	.word	0xe7d66026
   178cc:	f7f9202a 	.word	0xf7f9202a
   178d0:	f04ffc47 	.word	0xf04ffc47
   178d4:	e7d535ff 	.word	0xe7d535ff
   178d8:	e7ce250e 	.word	0xe7ce250e
   178dc:	f7fe4638 	.word	0xf7fe4638
   178e0:	b120ff39 	.word	0xb120ff39
   178e4:	b1156845 	.word	0xb1156845
   178e8:	8004f8c0 	.word	0x8004f8c0
   178ec:	6026e7c2 	.word	0x6026e7c2
   178f0:	2009e7c8 	.word	0x2009e7c8
   178f4:	fc34f7f9 	.word	0xfc34f7f9
   178f8:	35fff04f 	.word	0x35fff04f
   178fc:	bf00e7c2 	.word	0xbf00e7c2

00017900 <ip_interface_getopt>:
   17900:	bf86f7fe 	.word	0xbf86f7fe

00017904 <ip_interface_getaddrinfo>:
   17904:	4ff0e92d 	.word	0x4ff0e92d
   17908:	0c00f04f 	.word	0x0c00f04f
   1790c:	4e722401 	.word	0x4e722401
   17910:	a1d0f8df 	.word	0xa1d0f8df
   17914:	91d0f8df 	.word	0x91d0f8df
   17918:	4607b085 	.word	0x4607b085
   1791c:	93014615 	.word	0x93014615
   17920:	c000f8a6 	.word	0xc000f8a6
   17924:	4000f8ca 	.word	0x4000f8ca
   17928:	4000f8c9 	.word	0x4000f8c9
   1792c:	4608b171 	.word	0x4608b171
   17930:	4661220a 	.word	0x4661220a
   17934:	faecf00a 	.word	0xfaecf00a
   17938:	73fef64f 	.word	0x73fef64f
   1793c:	429a1e42 	.word	0x429a1e42
   17940:	8083f200 	.word	0x8083f200
   17944:	ea430203 	.word	0xea430203
   17948:	80302020 	.word	0x80302020
   1794c:	819cf8df 	.word	0x819cf8df
   17950:	3000f8d8 	.word	0x3000f8d8
   17954:	d1742b00 	.word	0xd1742b00
   17958:	60134a60 	.word	0x60134a60
   1795c:	60134a60 	.word	0x60134a60
   17960:	d0622f00 	.word	0xd0622f00
   17964:	f7f64638 	.word	0xf7f64638
   17968:	4683f9c3 	.word	0x4683f9c3
   1796c:	69eab125 	.word	0x69eab125
   17970:	6851b112 	.word	0x6851b112
   17974:	d06c2966 	.word	0xd06c2966
   17978:	32fff04f 	.word	0x32fff04f
   1797c:	ae042100 	.word	0xae042100
   17980:	1d04f846 	.word	0x1d04f846
   17984:	46594630 	.word	0x46594630
   17988:	f7f99200 	.word	0xf7f99200
   1798c:	9a00fd99 	.word	0x9a00fd99
   17990:	d14c2800 	.word	0xd14c2800
   17994:	010df247 	.word	0x010df247
   17998:	0c08f04f 	.word	0x0c08f04f
   1799c:	ea419c03 	.word	0xea419c03
   179a0:	60e14102 	.word	0x60e14102
   179a4:	72606122 	.word	0x72606122
   179a8:	72e072a0 	.word	0x72e072a0
   179ac:	c008f884 	.word	0xc008f884
   179b0:	d0762d00 	.word	0xd0762d00
   179b4:	f022686a 	.word	0xf022686a
   179b8:	29020108 	.word	0x29020108
   179bc:	2a05d05c 	.word	0x2a05d05c
   179c0:	68a9d178 	.word	0x68a9d178
   179c4:	f8c92902 	.word	0xf8c92902
   179c8:	d0611000 	.word	0xd0611000
   179cc:	68ea61a2 	.word	0x68ea61a2
   179d0:	68aa6222 	.word	0x68aa6222
   179d4:	682a61e2 	.word	0x682a61e2
   179d8:	68a26162 	.word	0x68a26162
   179dc:	60a23210 	.word	0x60a23210
   179e0:	6820b12f 	.word	0x6820b12f
   179e4:	465ab118 	.word	0x465ab118
   179e8:	f00c4639 	.word	0xf00c4639
   179ec:	2301ff4a 	.word	0x2301ff4a
   179f0:	010df247 	.word	0x010df247
   179f4:	f8c84620 	.word	0xf8c84620
   179f8:	f7f93000 	.word	0xf7f93000
   179fc:	2800fd75 	.word	0x2800fd75
   17a00:	f04fd156 	.word	0xf04fd156
   17a04:	930333ff 	.word	0x930333ff
   17a08:	46204631 	.word	0x46204631
   17a0c:	fb18f7f9 	.word	0xfb18f7f9
   17a10:	3000f8d8 	.word	0x3000f8d8
   17a14:	d0f72b01 	.word	0xd0f72b01
   17a18:	68184b31 	.word	0x68184b31
   17a1c:	d13b2800 	.word	0xd13b2800
   17a20:	9a014b2e 	.word	0x9a014b2e
   17a24:	6013681b 	.word	0x6013681b
   17a28:	46bbe00c 	.word	0x46bbe00c
   17a2c:	9c03e79e 	.word	0x9c03e79e
   17a30:	d1bd2c00 	.word	0xd1bd2c00
   17a34:	2300200c 	.word	0x2300200c
   17a38:	3000f8c8 	.word	0x3000f8c8
   17a3c:	e8bdb005 	.word	0xe8bdb005
   17a40:	20738ff0 	.word	0x20738ff0
   17a44:	e8bdb005 	.word	0xe8bdb005
   17a48:	20168ff0 	.word	0x20168ff0
   17a4c:	e8bdb005 	.word	0xe8bdb005
   17a50:	68918ff0 	.word	0x68918ff0
   17a54:	7f00f5b1 	.word	0x7f00f5b1
   17a58:	f240d18e 	.word	0xf240d18e
   17a5c:	68d02102 	.word	0x68d02102
   17a60:	d1894288 	.word	0xd1894288
   17a64:	29006991 	.word	0x29006991
   17a68:	6868d086 	.word	0x6868d086
   17a6c:	fd6af007 	.word	0xfd6af007
   17a70:	d0811c43 	.word	0xd0811c43
   17a74:	e7814602 	.word	0xe7814602
   17a78:	290268a9 	.word	0x290268a9
   17a7c:	1000f8c9 	.word	0x1000f8c9
   17a80:	2a05d006 	.word	0x2a05d006
   17a84:	2a0ad0a2 	.word	0x2a0ad0a2
   17a88:	2201bf14 	.word	0x2201bf14
   17a8c:	e79d2202 	.word	0xe79d2202
   17a90:	f8ca2102 	.word	0xf8ca2102
   17a94:	e7f41000 	.word	0xe7f41000
   17a98:	68184b11 	.word	0x68184b11
   17a9c:	d0d12800 	.word	0xd0d12800
   17aa0:	4629e7c9 	.word	0x4629e7c9
   17aa4:	f1042210 	.word	0xf1042210
   17aa8:	f00c0014 	.word	0xf00c0014
   17aac:	e794fef5 	.word	0xe794fef5
   17ab0:	e7c02023 	.word	0xe7c02023
   17ab4:	f7f9202f 	.word	0xf7f9202f
   17ab8:	68a2fb53 	.word	0x68a2fb53
   17abc:	60a23210 	.word	0x60a23210
   17ac0:	f04fb917 	.word	0xf04fb917
   17ac4:	e7b630ff 	.word	0xe7b630ff
   17ac8:	28006820 	.word	0x28006820
   17acc:	465ad0f9 	.word	0x465ad0f9
   17ad0:	f00c4639 	.word	0xf00c4639
   17ad4:	e7f4fed6 	.word	0xe7f4fed6
   17ad8:	20022342 	.word	0x20022342
   17adc:	20020468 	.word	0x20020468
   17ae0:	20020460 	.word	0x20020460
   17ae4:	20020458 	.word	0x20020458
   17ae8:	2002045c 	.word	0x2002045c
   17aec:	20020464 	.word	0x20020464

00017af0 <ip_interface_freeaddrinfo>:
   17af0:	4c0bb538 	.word	0x4c0bb538
   17af4:	2b026823 	.word	0x2b026823
   17af8:	bd38d000 	.word	0xbd38d000
   17afc:	4605b130 	.word	0x4605b130
   17b00:	f0066940 	.word	0xf0066940
   17b04:	4628f85b 	.word	0x4628f85b
   17b08:	f858f006 	.word	0xf858f006
   17b0c:	4a052300 	.word	0x4a052300
   17b10:	60234905 	.word	0x60234905
   17b14:	68086013 	.word	0x68086013
   17b18:	4038e8bd 	.word	0x4038e8bd
   17b1c:	bd02f7f9 	.word	0xbd02f7f9
   17b20:	20020464 	.word	0x20020464
   17b24:	20020460 	.word	0x20020460
   17b28:	2002046c 	.word	0x2002046c

00017b2c <rpc_ip_event_handler>:
   17b2c:	4ff0e92d 	.word	0x4ff0e92d
   17b30:	4310f401 	.word	0x4310f401
   17b34:	4f10f5b3 	.word	0x4f10f5b3
   17b38:	b0894605 	.word	0xb0894605
   17b3c:	68c0460e 	.word	0x68c0460e
   17b40:	0c04d05e 	.word	0x0c04d05e
   17b44:	f7fe4620 	.word	0xf7fe4620
   17b48:	f248fe05 	.word	0xf248fe05
   17b4c:	429e030d 	.word	0x429e030d
   17b50:	46a04607 	.word	0x46a04607
   17b54:	2f00d041 	.word	0x2f00d041
   17b58:	4640d04e 	.word	0x4640d04e
   17b5c:	462a4633 	.word	0x462a4633
   17b60:	f7fc4639 	.word	0xf7fc4639
   17b64:	2800fbff 	.word	0x2800fbff
   17b68:	f248d042 	.word	0xf248d042
   17b6c:	429e0307 	.word	0x429e0307
   17b70:	f248d961 	.word	0xf248d961
   17b74:	429e030c 	.word	0x429e030c
   17b78:	816bf000 	.word	0x816bf000
   17b7c:	8106f240 	.word	0x8106f240
   17b80:	0302f249 	.word	0x0302f249
   17b84:	f000429e 	.word	0xf000429e
   17b88:	f249808c 	.word	0xf249808c
   17b8c:	429e0303 	.word	0x429e0303
   17b90:	8180f000 	.word	0x8180f000
   17b94:	0301f249 	.word	0x0301f249
   17b98:	d12d429e 	.word	0xd12d429e
   17b9c:	f414683c 	.word	0xf414683c
   17ba0:	f0001480 	.word	0xf0001480
   17ba4:	68ab81c3 	.word	0x68ab81c3
   17ba8:	f2002b04 	.word	0xf2002b04
   17bac:	240081eb 	.word	0x240081eb
   17bb0:	68294626 	.word	0x68294626
   17bb4:	e9cd686a 	.word	0xe9cd686a
   17bb8:	e9cd6406 	.word	0xe9cd6406
   17bbc:	69f81204 	.word	0x69f81204
   17bc0:	6803a904 	.word	0x6803a904
   17bc4:	4798685b 	.word	0x4798685b
   17bc8:	f0003001 	.word	0xf0003001
   17bcc:	683b81cc 	.word	0x683b81cc
   17bd0:	f4432000 	.word	0xf4432000
   17bd4:	603b3380 	.word	0x603b3380
   17bd8:	f8dfe00b 	.word	0xf8dfe00b
   17bdc:	682f9344 	.word	0x682f9344
   17be0:	3000f8d9 	.word	0x3000f8d9
   17be4:	d0152b01 	.word	0xd0152b01
   17be8:	4638b117 	.word	0x4638b117
   17bec:	fc9af7f9 	.word	0xfc9af7f9
   17bf0:	b0092000 	.word	0xb0092000
   17bf4:	8ff0e8bd 	.word	0x8ff0e8bd
   17bf8:	28006828 	.word	0x28006828
   17bfc:	e7f7d1f6 	.word	0xe7f7d1f6
   17c00:	fd5ef7fe 	.word	0xfd5ef7fe
   17c04:	f7fe4680 	.word	0xf7fe4680
   17c08:	4607fda5 	.word	0x4607fda5
   17c0c:	2f004644 	.word	0x2f004644
   17c10:	e7f1d1a3 	.word	0xe7f1d1a3
   17c14:	2b00696b 	.word	0x2b00696b
   17c18:	2b10d048 	.word	0x2b10d048
   17c1c:	4ababf96 	.word	0x4ababf96
   17c20:	f852212d 	.word	0xf852212d
   17c24:	23021023 	.word	0x23021023
   17c28:	60114ab8 	.word	0x60114ab8
   17c2c:	3000f8c9 	.word	0x3000f8c9
   17c30:	d1da2f00 	.word	0xd1da2f00
   17c34:	f248e7dc 	.word	0xf248e7dc
   17c38:	429e0306 	.word	0x429e0306
   17c3c:	80e6f080 	.word	0x80e6f080
   17c40:	0302f248 	.word	0x0302f248
   17c44:	f000429e 	.word	0xf000429e
   17c48:	d91880c8 	.word	0xd91880c8
   17c4c:	0303f248 	.word	0x0303f248
   17c50:	f000429e 	.word	0xf000429e
   17c54:	f2488112 	.word	0xf2488112
   17c58:	429e0305 	.word	0x429e0305
   17c5c:	683bd1cc 	.word	0x683bd1cc
   17c60:	2b03b29b 	.word	0x2b03b29b
   17c64:	696bd1c4 	.word	0x696bd1c4
   17c68:	f0002b00 	.word	0xf0002b00
   17c6c:	2b10817e 	.word	0x2b10817e
   17c70:	813bf200 	.word	0x813bf200
   17c74:	f8524aa4 	.word	0xf8524aa4
   17c78:	607b3023 	.word	0x607b3023
   17c7c:	f248e7b8 	.word	0xf248e7b8
   17c80:	429e0301 	.word	0x429e0301
   17c84:	683bd1b8 	.word	0x683bd1b8
   17c88:	d1b12b01 	.word	0xd1b12b01
   17c8c:	28006968 	.word	0x28006968
   17c90:	8173f000 	.word	0x8173f000
   17c94:	f2002810 	.word	0xf2002810
   17c98:	4b9b8128 	.word	0x4b9b8128
   17c9c:	3020f853 	.word	0x3020f853
   17ca0:	683be7eb 	.word	0x683be7eb
   17ca4:	2b07b29b 	.word	0x2b07b29b
   17ca8:	e790d1a2 	.word	0xe790d1a2
   17cac:	601f4b98 	.word	0x601f4b98
   17cb0:	016369ac 	.word	0x016369ac
   17cb4:	93034618 	.word	0x93034618
   17cb8:	ff62f005 	.word	0xff62f005
   17cbc:	28009002 	.word	0x28009002
   17cc0:	8103f000 	.word	0x8103f000
   17cc4:	192800e5 	.word	0x192800e5
   17cc8:	f0050080 	.word	0xf0050080
   17ccc:	2800ff59 	.word	0x2800ff59
   17cd0:	810df000 	.word	0x810df000
   17cd4:	d0782c00 	.word	0xd0782c00
   17cd8:	0210f105 	.word	0x0210f105
   17cdc:	93011883 	.word	0x93011883
   17ce0:	24049b02 	.word	0x24049b02
   17ce4:	a23cf8df 	.word	0xa23cf8df
   17ce8:	b23cf8df 	.word	0xb23cf8df
   17cec:	0810f100 	.word	0x0810f100
   17cf0:	0620f103 	.word	0x0620f103
   17cf4:	220ae01d 	.word	0x220ae01d
   17cf8:	2c0cf848 	.word	0x2c0cf848
   17cfc:	0224f04f 	.word	0x0224f04f
   17d00:	f8084640 	.word	0xf8084640
   17d04:	f8282c10 	.word	0xf8282c10
   17d08:	f8563c08 	.word	0xf8563c08
   17d0c:	f00c2c10 	.word	0xf00c2c10
   17d10:	f856fdb8 	.word	0xf856fdb8
   17d14:	f1083c10 	.word	0xf1083c10
   17d18:	441c0808 	.word	0x441c0808
   17d1c:	f846193b 	.word	0xf846193b
   17d20:	9b013c08 	.word	0x9b013c08
   17d24:	6c04f846 	.word	0x6c04f846
   17d28:	442c4598 	.word	0x442c4598
   17d2c:	0620f106 	.word	0x0620f106
   17d30:	593bd045 	.word	0x593bd045
   17d34:	f846193a 	.word	0xf846193a
   17d38:	68533c20 	.word	0x68533c20
   17d3c:	1000f8da 	.word	0x1000f8da
   17d40:	bf142b02 	.word	0xbf142b02
   17d44:	200a2002 	.word	0x200a2002
   17d48:	3000f8db 	.word	0x3000f8db
   17d4c:	0107e946 	.word	0x0107e946
   17d50:	3c14f846 	.word	0x3c14f846
   17d54:	f1a88a10 	.word	0xf1a88a10
   17d58:	f8460310 	.word	0xf8460310
   17d5c:	8a550c10 	.word	0x8a550c10
   17d60:	3c0cf846 	.word	0x3c0cf846
   17d64:	34144b6b 	.word	0x34144b6b
   17d68:	eb072804 	.word	0xeb072804
   17d6c:	881b0104 	.word	0x881b0104
   17d70:	2210d1c1 	.word	0x2210d1c1
   17d74:	f8282002 	.word	0xf8282002
   17d78:	f8483c08 	.word	0xf8483c08
   17d7c:	f8080c0c 	.word	0xf8080c0c
   17d80:	f8562c10 	.word	0xf8562c10
   17d84:	f1a82c10 	.word	0xf1a82c10
   17d88:	e7c00004 	.word	0xe7c00004
   17d8c:	0308f248 	.word	0x0308f248
   17d90:	d04e429e 	.word	0xd04e429e
   17d94:	0309f248 	.word	0x0309f248
   17d98:	f47f429e 	.word	0xf47f429e
   17d9c:	683baf2d 	.word	0x683baf2d
   17da0:	2b0db29b 	.word	0x2b0db29b
   17da4:	af24f47f 	.word	0xaf24f47f
   17da8:	28006968 	.word	0x28006968
   17dac:	af72f47f 	.word	0xaf72f47f
   17db0:	0c1b683b 	.word	0x0c1b683b
   17db4:	f043041b 	.word	0xf043041b
   17db8:	603b030e 	.word	0x603b030e
   17dbc:	2200e719 	.word	0x2200e719
   17dc0:	1302e9dd 	.word	0x1302e9dd
   17dc4:	f843440b 	.word	0xf843440b
   17dc8:	22022c04 	.word	0x22022c04
   17dcc:	f8c94b52 	.word	0xf8c94b52
   17dd0:	9a022000 	.word	0x9a022000
   17dd4:	601a2000 	.word	0x601a2000
   17dd8:	683be70b 	.word	0x683be70b
   17ddc:	f57f0099 	.word	0xf57f0099
   17de0:	683baf07 	.word	0x683baf07
   17de4:	5300f023 	.word	0x5300f023
   17de8:	6968603b 	.word	0x6968603b
   17dec:	f0002800 	.word	0xf0002800
   17df0:	281080a2 	.word	0x281080a2
   17df4:	232dbf8e 	.word	0x232dbf8e
   17df8:	f8534b43 	.word	0xf8534b43
   17dfc:	20003020 	.word	0x20003020
   17e00:	683b607b 	.word	0x683b607b
   17e04:	2380f443 	.word	0x2380f443
   17e08:	e6f2603b 	.word	0xe6f2603b
   17e0c:	029a683b 	.word	0x029a683b
   17e10:	aeeef57f 	.word	0xaeeef57f
   17e14:	2b00696b 	.word	0x2b00696b
   17e18:	809cf000 	.word	0x809cf000
   17e1c:	f47f2b6b 	.word	0xf47f2b6b
   17e20:	693baf26 	.word	0x693baf26
   17e24:	f0002b01 	.word	0xf0002b01
   17e28:	230c80b1 	.word	0x230c80b1
   17e2c:	607b2000 	.word	0x607b2000
   17e30:	683be6df 	.word	0x683be6df
   17e34:	2b06b29b 	.word	0x2b06b29b
   17e38:	aedaf47f 	.word	0xaedaf47f
   17e3c:	28006968 	.word	0x28006968
   17e40:	af28f47f 	.word	0xaf28f47f
   17e44:	0c1b683b 	.word	0x0c1b683b
   17e48:	f043041b 	.word	0xf043041b
   17e4c:	603b0307 	.word	0x603b0307
   17e50:	683be6cf 	.word	0x683be6cf
   17e54:	2b08b29b 	.word	0x2b08b29b
   17e58:	aecaf47f 	.word	0xaecaf47f
   17e5c:	2b00696b 	.word	0x2b00696b
   17e60:	af05f47f 	.word	0xaf05f47f
   17e64:	20014b2d 	.word	0x20014b2d
   17e68:	5024f843 	.word	0x5024f843
   17e6c:	0c1b683b 	.word	0x0c1b683b
   17e70:	f043041b 	.word	0xf043041b
   17e74:	603b0309 	.word	0x603b0309
   17e78:	683be6bb 	.word	0x683be6bb
   17e7c:	f57f025b 	.word	0xf57f025b
   17e80:	6968aeb7 	.word	0x6968aeb7
   17e84:	f47f2800 	.word	0xf47f2800
   17e88:	683baf05 	.word	0x683baf05
   17e8c:	0300f443 	.word	0x0300f443
   17e90:	e6ae603b 	.word	0xe6ae603b
   17e94:	f443683b 	.word	0xf443683b
   17e98:	603b2300 	.word	0x603b2300
   17e9c:	f423683b 	.word	0xf423683b
   17ea0:	603b1300 	.word	0x603b1300
   17ea4:	f423683b 	.word	0xf423683b
   17ea8:	603b3300 	.word	0x603b3300
   17eac:	2b6c692b 	.word	0x2b6c692b
   17eb0:	2b10d021 	.word	0x2b10d021
   17eb4:	232dbf8c 	.word	0x232dbf8c
   17eb8:	f04f4a13 	.word	0xf04f4a13
   17ebc:	bf980000 	.word	0xbf980000
   17ec0:	3023f852 	.word	0x3023f852
   17ec4:	60bb607b 	.word	0x60bb607b
   17ec8:	f005e693 	.word	0xf005e693
   17ecc:	200cfe77 	.word	0x200cfe77
   17ed0:	490e2302 	.word	0x490e2302
   17ed4:	60084a10 	.word	0x60084a10
   17ed8:	9902682f 	.word	0x9902682f
   17edc:	f8c96011 	.word	0xf8c96011
   17ee0:	2f003000 	.word	0x2f003000
   17ee4:	ae81f47f 	.word	0xae81f47f
   17ee8:	232de682 	.word	0x232de682
   17eec:	220ce6c5 	.word	0x220ce6c5
   17ef0:	601a4b06 	.word	0x601a4b06
   17ef4:	2239e769 	.word	0x2239e769
   17ef8:	2000683b 	.word	0x2000683b
   17efc:	4380f043 	.word	0x4380f043
   17f00:	607a603b 	.word	0x607a603b
   17f04:	e67460ba 	.word	0xe67460ba
   17f08:	00025e30 	.word	0x00025e30
   17f0c:	20020460 	.word	0x20020460
   17f10:	2002046c 	.word	0x2002046c
   17f14:	20022342 	.word	0x20022342
   17f18:	20020468 	.word	0x20020468
   17f1c:	20020470 	.word	0x20020470
   17f20:	20020464 	.word	0x20020464
   17f24:	2002045c 	.word	0x2002045c
   17f28:	20020458 	.word	0x20020458
   17f2c:	f7f96828 	.word	0xf7f96828
   17f30:	4620faf9 	.word	0x4620faf9
   17f34:	683be65d 	.word	0x683be65d
   17f38:	3300f443 	.word	0x3300f443
   17f3c:	683b603b 	.word	0x683b603b
   17f40:	1380f443 	.word	0x1380f443
   17f44:	683b603b 	.word	0x683b603b
   17f48:	041b0c1b 	.word	0x041b0c1b
   17f4c:	0305f043 	.word	0x0305f043
   17f50:	e64e603b 	.word	0xe64e603b
   17f54:	4a28683b 	.word	0x4a28683b
   17f58:	3300f443 	.word	0x3300f443
   17f5c:	2001603b 	.word	0x2001603b
   17f60:	5024f842 	.word	0x5024f842
   17f64:	2002e645 	.word	0x2002e645
   17f68:	683be643 	.word	0x683be643
   17f6c:	0c1b2000 	.word	0x0c1b2000
   17f70:	f043041b 	.word	0xf043041b
   17f74:	603b0304 	.word	0x603b0304
   17f78:	2302e63b 	.word	0x2302e63b
   17f7c:	69ab603b 	.word	0x69ab603b
   17f80:	e63661bb 	.word	0xe63661bb
   17f84:	b94c8a6c 	.word	0xb94c8a6c
   17f88:	e6124626 	.word	0xe6124626
   17f8c:	683b220c 	.word	0x683b220c
   17f90:	f0432000 	.word	0xf0432000
   17f94:	603b6300 	.word	0x603b6300
   17f98:	e62a607a 	.word	0xe62a607a
   17f9c:	f0052024 	.word	0xf0052024
   17fa0:	4606fdef 	.word	0x4606fdef
   17fa4:	8a6ab158 	.word	0x8a6ab158
   17fa8:	d0182a10 	.word	0xd0182a10
   17fac:	d00a2a04 	.word	0xd00a2a04
   17fb0:	f7f96828 	.word	0xf7f96828
   17fb4:	4630fab7 	.word	0x4630fab7
   17fb8:	fe00f005 	.word	0xfe00f005
   17fbc:	6828e618 	.word	0x6828e618
   17fc0:	fab0f7f9 	.word	0xfab0f7f9
   17fc4:	2302e614 	.word	0x2302e614
   17fc8:	60432410 	.word	0x60432410
   17fcc:	8a2b7004 	.word	0x8a2b7004
   17fd0:	0114f105 	.word	0x0114f105
   17fd4:	300c8103 	.word	0x300c8103
   17fd8:	fc53f00c 	.word	0xfc53f00c
   17fdc:	230ae5e9 	.word	0x230ae5e9
   17fe0:	60432424 	.word	0x60432424
   17fe4:	8a2b7004 	.word	0x8a2b7004
   17fe8:	0114f105 	.word	0x0114f105
   17fec:	30108103 	.word	0x30108103
   17ff0:	fc47f00c 	.word	0xfc47f00c
   17ff4:	bf00e5dd 	.word	0xbf00e5dd
   17ff8:	20020470 	.word	0x20020470

00017ffc <rpc_logobj_client_evt_handler>:
   17ffc:	f850b120 	.word	0xf850b120
   18000:	0c091b08 	.word	0x0c091b08
   18004:	b886f7fa 	.word	0xb886f7fa
   18008:	bf004770 	.word	0xbf004770

0001800c <rpc_logobj_client_init>:
   1800c:	f0044801 	.word	0xf0044801
   18010:	bf00bcf1 	.word	0xbf00bcf1
   18014:	00025e74 	.word	0x00025e74

00018018 <rpc_logobj_client_request_alloc>:
   18018:	b5102300 	.word	0xb5102300
   1801c:	9301b082 	.word	0x9301b082
   18020:	b170b961 	.word	0xb170b961
   18024:	aa014604 	.word	0xaa014604
   18028:	f0042009 	.word	0xf0042009
   1802c:	b918ff1b 	.word	0xb918ff1b
   18030:	b10b9b01 	.word	0xb10b9b01
   18034:	60233308 	.word	0x60233308
   18038:	bd10b002 	.word	0xbd10b002
   1803c:	b002200f 	.word	0xb002200f
   18040:	200ebd10 	.word	0x200ebd10
   18044:	bd10b002 	.word	0xbd10b002

00018048 <rpc_logobj_client_request_send>:
   18048:	4370f401 	.word	0x4370f401
   1804c:	4fe0f5b3 	.word	0x4fe0f5b3
   18050:	b160d10b 	.word	0xb160d10b
   18054:	f8304603 	.word	0xf8304603
   18058:	20092c08 	.word	0x20092c08
   1805c:	4101ea42 	.word	0x4101ea42
   18060:	1d08f843 	.word	0x1d08f843
   18064:	f0044619 	.word	0xf0044619
   18068:	200fbee5 	.word	0x200fbee5
   1806c:	200e4770 	.word	0x200e4770
   18070:	bf004770 	.word	0xbf004770

00018074 <rpc_logobj_client_message_free>:
   18074:	f1a0b120 	.word	0xf1a0b120
   18078:	20090108 	.word	0x20090108
   1807c:	bf24f004 	.word	0xbf24f004
   18080:	4770200e 	.word	0x4770200e

00018084 <rpc_logobj_client_data_free>:
   18084:	4601b118 	.word	0x4601b118
   18088:	f0052009 	.word	0xf0052009
   1808c:	200eb82f 	.word	0x200eb82f
   18090:	bf004770 	.word	0xbf004770

00018094 <datagram_handler_init>:
   18094:	4604b510 	.word	0x4604b510
   18098:	f005200c 	.word	0xf005200c
   1809c:	60e0fd71 	.word	0x60e0fd71
   180a0:	e8bdb118 	.word	0xe8bdb118
   180a4:	f0004010 	.word	0xf0004010
   180a8:	2004b8bd 	.word	0x2004b8bd
   180ac:	bf00bd10 	.word	0xbf00bd10

000180b0 <datagram_handler_put>:
   180b0:	4606b570 	.word	0x4606b570
   180b4:	460d2014 	.word	0x460d2014
   180b8:	fd62f005 	.word	0xfd62f005
   180bc:	682bb178 	.word	0x682bb178
   180c0:	60434604 	.word	0x60434604
   180c4:	4601686b 	.word	0x4601686b
   180c8:	68eb6083 	.word	0x68eb6083
   180cc:	68ab60c3 	.word	0x68ab60c3
   180d0:	68f06103 	.word	0x68f06103
   180d4:	f8b0f000 	.word	0xf8b0f000
   180d8:	6868b920 	.word	0x6868b920
   180dc:	f04fbd70 	.word	0xf04fbd70
   180e0:	bd7030ff 	.word	0xbd7030ff
   180e4:	f0054620 	.word	0xf0054620
   180e8:	f04ffd69 	.word	0xf04ffd69
   180ec:	bd7030ff 	.word	0xbd7030ff

000180f0 <datagram_handler_get>:
   180f0:	4606b5f0 	.word	0x4606b5f0
   180f4:	68c0b085 	.word	0x68c0b085
   180f8:	4617460c 	.word	0x4617460c
   180fc:	f8bcf000 	.word	0xf8bcf000
   18100:	d0372800 	.word	0xd0372800
   18104:	46056882 	.word	0x46056882
   18108:	0300e9d4 	.word	0x0300e9d4
   1810c:	bf28429a 	.word	0xbf28429a
   18110:	6062461a 	.word	0x6062461a
   18114:	6869b110 	.word	0x6869b110
   18118:	fbb3f00c 	.word	0xfbb3f00c
   1811c:	b11868a0 	.word	0xb11868a0
   18120:	b10b692b 	.word	0xb10b692b
   18124:	b9e268ea 	.word	0xb9e268ea
   18128:	60e32300 	.word	0x60e32300
   1812c:	d502073b 	.word	0xd502073b
   18130:	b0056860 	.word	0xb0056860
   18134:	68f0bdf0 	.word	0x68f0bdf0
   18138:	f894f000 	.word	0xf894f000
   1813c:	28004605 	.word	0x28004605
   18140:	e9d0d0f6 	.word	0xe9d0d0f6
   18144:	69023101 	.word	0x69023101
   18148:	68c39300 	.word	0x68c39300
   1814c:	1201e9cd 	.word	0x1201e9cd
   18150:	46689303 	.word	0x46689303
   18154:	3101e9d6 	.word	0x3101e9d6
   18158:	46284798 	.word	0x46284798
   1815c:	fd2ef005 	.word	0xfd2ef005
   18160:	68e3e7e6 	.word	0x68e3e7e6
   18164:	bf28429a 	.word	0xbf28429a
   18168:	60e2461a 	.word	0x60e2461a
   1816c:	f00c6929 	.word	0xf00c6929
   18170:	e7dbfb88 	.word	0xe7dbfb88
   18174:	30fff04f 	.word	0x30fff04f
   18178:	bf00e7db 	.word	0xbf00e7db

0001817c <datagram_handler_available>:
   1817c:	68c0b508 	.word	0x68c0b508
   18180:	f87af000 	.word	0xf87af000
   18184:	6880b108 	.word	0x6880b108
   18188:	f04fbd08 	.word	0xf04fbd08
   1818c:	bd0830ff 	.word	0xbd0830ff

00018190 <datagram_handler_flush>:
   18190:	4605b530 	.word	0x4605b530
   18194:	b08568c0 	.word	0xb08568c0
   18198:	e01ab9a8 	.word	0xe01ab9a8
   1819c:	f00068e8 	.word	0xf00068e8
   181a0:	4604f861 	.word	0x4604f861
   181a4:	e9d0b170 	.word	0xe9d0b170
   181a8:	e9d40101 	.word	0xe9d40101
   181ac:	e9cd3203 	.word	0xe9cd3203
   181b0:	e9cd0100 	.word	0xe9cd0100
   181b4:	e9d52302 	.word	0xe9d52302
   181b8:	46683101 	.word	0x46683101
   181bc:	46204798 	.word	0x46204798
   181c0:	fcfcf005 	.word	0xfcfcf005
   181c4:	f00068e8 	.word	0xf00068e8
   181c8:	2800f85d 	.word	0x2800f85d
   181cc:	b005d1e6 	.word	0xb005d1e6
   181d0:	2008bd30 	.word	0x2008bd30
   181d4:	bd30b005 	.word	0xbd30b005

000181d8 <datagram_handler_free>:
   181d8:	4605b530 	.word	0x4605b530
   181dc:	b08568c0 	.word	0xb08568c0
   181e0:	e01cb9a0 	.word	0xe01cb9a0
   181e4:	f83ef000 	.word	0xf83ef000
   181e8:	b1704604 	.word	0xb1704604
   181ec:	0101e9d0 	.word	0x0101e9d0
   181f0:	3203e9d4 	.word	0x3203e9d4
   181f4:	0100e9cd 	.word	0x0100e9cd
   181f8:	2302e9cd 	.word	0x2302e9cd
   181fc:	3101e9d5 	.word	0x3101e9d5
   18200:	47984668 	.word	0x47984668
   18204:	f0054620 	.word	0xf0054620
   18208:	68e8fcd9 	.word	0x68e8fcd9
   1820c:	f83af000 	.word	0xf83af000
   18210:	68e84604 	.word	0x68e84604
   18214:	d1e52c00 	.word	0xd1e52c00
   18218:	fcd0f005 	.word	0xfcd0f005
   1821c:	b00560ec 	.word	0xb00560ec
   18220:	bf00bd30 	.word	0xbf00bd30

00018224 <linked_list_init>:
   18224:	2300b128 	.word	0x2300b128
   18228:	e9c06003 	.word	0xe9c06003
   1822c:	46183301 	.word	0x46183301
   18230:	20074770 	.word	0x20074770
   18234:	bf004770 	.word	0xbf004770

00018238 <linked_list_push>:
   18238:	46036802 	.word	0x46036802
   1823c:	d00e3201 	.word	0xd00e3201
   18240:	600a2200 	.word	0x600a2200
   18244:	b13a6802 	.word	0xb13a6802
   18248:	60116882 	.word	0x60116882
   1824c:	681a6081 	.word	0x681a6081
   18250:	32012000 	.word	0x32012000
   18254:	4770601a 	.word	0x4770601a
   18258:	1101e9c0 	.word	0x1101e9c0
   1825c:	2004e7f7 	.word	0x2004e7f7
   18260:	bf004770 	.word	0xbf004770

00018264 <linked_list_pop>:
   18264:	68004603 	.word	0x68004603
   18268:	6858b128 	.word	0x6858b128
   1826c:	6801681a 	.word	0x6801681a
   18270:	60593a01 	.word	0x60593a01
   18274:	4770601a 	.word	0x4770601a

00018278 <linked_list_peek>:
   18278:	b10b6803 	.word	0xb10b6803
   1827c:	47706840 	.word	0x47706840
   18280:	47704618 	.word	0x47704618

00018284 <linked_list_size_get>:
   18284:	47706800 	.word	0x47706800

00018288 <linked_list_get_next>:
   18288:	47706800 	.word	0x47706800

0001828c <rpc_transport_ipc_tx_init>:
   1828c:	f0002800 	.word	0xf0002800
   18290:	290080b8 	.word	0x290080b8
   18294:	80b5f000 	.word	0x80b5f000
   18298:	f0002a00 	.word	0xf0002a00
   1829c:	e92d80b2 	.word	0xe92d80b2
   182a0:	6a044ff0 	.word	0x6a044ff0
   182a4:	2c00b085 	.word	0x2c00b085
   182a8:	80a6f000 	.word	0x80a6f000
   182ac:	28006a40 	.word	0x28006a40
   182b0:	80a2f000 	.word	0x80a2f000
   182b4:	4587f642 	.word	0x4587f642
   182b8:	0a00f04f 	.word	0x0a00f04f
   182bc:	42a84e55 	.word	0x42a84e55
   182c0:	a000f886 	.word	0xa000f886
   182c4:	80a0f240 	.word	0x80a0f240
   182c8:	f8df2708 	.word	0xf8df2708
   182cc:	46209180 	.word	0x46209180
   182d0:	460d4616 	.word	0x460d4616
   182d4:	46512244 	.word	0x46512244
   182d8:	4000f8c9 	.word	0x4000f8c9
   182dc:	fadcf00c 	.word	0xfadcf00c
   182e0:	2000f8d9 	.word	0x2000f8d9
   182e4:	0344f104 	.word	0x0344f104
   182e8:	8164f8df 	.word	0x8164f8df
   182ec:	a001f882 	.word	0xa001f882
   182f0:	a002f882 	.word	0xa002f882
   182f4:	a003f882 	.word	0xa003f882
   182f8:	46187017 	.word	0x46187017
   182fc:	46512244 	.word	0x46512244
   18300:	3000f8c8 	.word	0x3000f8c8
   18304:	fac8f00c 	.word	0xfac8f00c
   18308:	2000f8d8 	.word	0x2000f8d8
   1830c:	0388f104 	.word	0x0388f104
   18310:	b140f8df 	.word	0xb140f8df
   18314:	f8827017 	.word	0xf8827017
   18318:	f882a001 	.word	0xf882a001
   1831c:	f882a002 	.word	0xf882a002
   18320:	4618a003 	.word	0x4618a003
   18324:	7200f44f 	.word	0x7200f44f
   18328:	f8cb4651 	.word	0xf8cb4651
   1832c:	f00c3000 	.word	0xf00c3000
   18330:	4b39fab3 	.word	0x4b39fab3
   18334:	7c22f504 	.word	0x7c22f504
   18338:	c000f8c3 	.word	0xc000f8c3
   1833c:	46604651 	.word	0x46604651
   18340:	7200f44f 	.word	0x7200f44f
   18344:	faa8f00c 	.word	0xfaa8f00c
   18348:	5c20f44f 	.word	0x5c20f44f
   1834c:	f04f2106 	.word	0xf04f2106
   18350:	f44f0e01 	.word	0xf44f0e01
   18354:	f44f3001 	.word	0xf44f3001
   18358:	4b303288 	.word	0x4b303288
   1835c:	6491f504 	.word	0x6491f504
   18360:	4c2f605c 	.word	0x4c2f605c
   18364:	c008f8c3 	.word	0xc008f8c3
   18368:	f8a38199 	.word	0xf8a38199
   1836c:	4619e000 	.word	0x4619e000
   18370:	4b2c611c 	.word	0x4b2c611c
   18374:	c0e0f8df 	.word	0xc0e0f8df
   18378:	482b6120 	.word	0x482b6120
   1837c:	f5036063 	.word	0xf5036063
   18380:	60a073c0 	.word	0x60a073c0
   18384:	c000f8c4 	.word	0xc000f8c4
   18388:	60e34828 	.word	0x60e34828
   1838c:	f0056162 	.word	0xf0056162
   18390:	2800fadd 	.word	0x2800fadd
   18394:	f04fd132 	.word	0xf04fd132
   18398:	24200c02 	.word	0x24200c02
   1839c:	1000f8d9 	.word	0x1000f8d9
   183a0:	2000f8db 	.word	0x2000f8db
   183a4:	4b1c6029 	.word	0x4b1c6029
   183a8:	1000f8d8 	.word	0x1000f8d8
   183ac:	e0acf8df 	.word	0xe0acf8df
   183b0:	60314d1f 	.word	0x60314d1f
   183b4:	2000f8ce 	.word	0x2000f8ce
   183b8:	491e681b 	.word	0x491e681b
   183bc:	7200f502 	.word	0x7200f502
   183c0:	4e1d602a 	.word	0x4e1d602a
   183c4:	4d1e4a1d 	.word	0x4d1e4a1d
   183c8:	f503600b 	.word	0xf503600b
   183cc:	491d7300 	.word	0x491d7300
   183d0:	80286033 	.word	0x80286033
   183d4:	c514f8c2 	.word	0xc514f8c2
   183d8:	4b1b6809 	.word	0x4b1b6809
   183dc:	99039103 	.word	0x99039103
   183e0:	751cf8c2 	.word	0x751cf8c2
   183e4:	443b6819 	.word	0x443b6819
   183e8:	99029102 	.word	0x99029102
   183ec:	4524f8c2 	.word	0x4524f8c2
   183f0:	9301681b 	.word	0x9301681b
   183f4:	e0019b01 	.word	0xe0019b01
   183f8:	0007f24c 	.word	0x0007f24c
   183fc:	e8bdb005 	.word	0xe8bdb005
   18400:	f24c8ff0 	.word	0xf24c8ff0
   18404:	4770000e 	.word	0x4770000e
   18408:	0004f24c 	.word	0x0004f24c
   1840c:	e8bdb005 	.word	0xe8bdb005
   18410:	bf008ff0 	.word	0xbf008ff0
   18414:	200226b2 	.word	0x200226b2
   18418:	200204c0 	.word	0x200204c0
   1841c:	200204ac 	.word	0x200204ac
   18420:	200204d0 	.word	0x200204d0
   18424:	00040080 	.word	0x00040080
   18428:	00040100 	.word	0x00040100
   1842c:	20020498 	.word	0x20020498
   18430:	200204a4 	.word	0x200204a4
   18434:	200204a0 	.word	0x200204a0
   18438:	2002049c 	.word	0x2002049c
   1843c:	4002a000 	.word	0x4002a000
   18440:	20022344 	.word	0x20022344
   18444:	4002a514 	.word	0x4002a514
   18448:	4002a51c 	.word	0x4002a51c
   1844c:	200204cc 	.word	0x200204cc
   18450:	200204c4 	.word	0x200204c4
   18454:	200204c8 	.word	0x200204c8
   18458:	00080040 	.word	0x00080040
   1845c:	200204a8 	.word	0x200204a8

00018460 <rpc_transport_ipc_tx_send>:
   18460:	d05f2800 	.word	0xd05f2800
   18464:	4b33b470 	.word	0x4b33b470
   18468:	681ab083 	.word	0x681ab083
   1846c:	42824b32 	.word	0x42824b32
   18470:	681bd81e 	.word	0x681bd81e
   18474:	42834931 	.word	0x42834931
   18478:	d8036809 	.word	0xd8036809
   1847c:	68244c30 	.word	0x68244c30
   18480:	d8474284 	.word	0xd8474284
   18484:	d90e4281 	.word	0xd90e4281
   18488:	781b4b2e 	.word	0x781b4b2e
   1848c:	d14c2b00 	.word	0xd14c2b00
   18490:	492d1a83 	.word	0x492d1a83
   18494:	069b099e 	.word	0x069b099e
   18498:	4c2c680a 	.word	0x4c2c680a
   1849c:	0103f04f 	.word	0x0103f04f
   184a0:	0502f04f 	.word	0x0502f04f
   184a4:	f24cd014 	.word	0xf24cd014
   184a8:	b0030010 	.word	0xb0030010
   184ac:	4770bc70 	.word	0x4770bc70
   184b0:	4298681b 	.word	0x4298681b
   184b4:	4a22d3f7 	.word	0x4a22d3f7
   184b8:	42906812 	.word	0x42906812
   184bc:	2101d2f3 	.word	0x2101d2f3
   184c0:	4a231ac3 	.word	0x4a231ac3
   184c4:	069b099e 	.word	0x069b099e
   184c8:	6812460d 	.word	0x6812460d
   184cc:	d1ea4c21 	.word	0xd1ea4c21
   184d0:	b2db6843 	.word	0xb2db6843
   184d4:	d120429d 	.word	0xd120429d
   184d8:	eb022020 	.word	0xeb022020
   184dc:	4d1e02c6 	.word	0x4d1e02c6
   184e0:	882e6853 	.word	0x882e6853
   184e4:	ea43b29b 	.word	0xea43b29b
   184e8:	f0234306 	.word	0xf0234306
   184ec:	f04303ff 	.word	0xf04303ff
   184f0:	60530301 	.word	0x60530301
   184f4:	3801bf00 	.word	0x3801bf00
   184f8:	2201d1fc 	.word	0x2201d1fc
   184fc:	f8434b17 	.word	0xf8434b17
   18500:	68222021 	.word	0x68222021
   18504:	9201882b 	.word	0x9201882b
   18508:	33019a01 	.word	0x33019a01
   1850c:	b003802b 	.word	0xb003802b
   18510:	4770bc70 	.word	0x4770bc70
   18514:	d9d24281 	.word	0xd9d24281
   18518:	f24ce7b6 	.word	0xf24ce7b6
   1851c:	b0030007 	.word	0xb0030007
   18520:	4770bc70 	.word	0x4770bc70
   18524:	000ef24c 	.word	0x000ef24c
   18528:	f24c4770 	.word	0xf24c4770
   1852c:	b003000f 	.word	0xb003000f
   18530:	4770bc70 	.word	0x4770bc70
   18534:	200204a8 	.word	0x200204a8
   18538:	200204a0 	.word	0x200204a0
   1853c:	200204a4 	.word	0x200204a4
   18540:	2002049c 	.word	0x2002049c
   18544:	200226b2 	.word	0x200226b2
   18548:	200204cc 	.word	0x200204cc
   1854c:	4002a00c 	.word	0x4002a00c
   18550:	200204c4 	.word	0x200204c4
   18554:	4002a004 	.word	0x4002a004
   18558:	20022344 	.word	0x20022344
   1855c:	4002a000 	.word	0x4002a000

00018560 <rpc_transport_ipc_tx_rpc_data_alloc>:
   18560:	781b4b18 	.word	0x781b4b18
   18564:	b4f0bb63 	.word	0xb4f0bb63
   18568:	f0034a17 	.word	0xf0034a17
   1856c:	681400ff 	.word	0x681400ff
   18570:	68254b16 	.word	0x68254b16
   18574:	b1a5681e 	.word	0xb1a5681e
   18578:	00c14607 	.word	0x00c14607
   1857c:	685a1863 	.word	0x685a1863
   18580:	2a03b2d2 	.word	0x2a03b2d2
   18584:	609fd104 	.word	0x609fd104
   18588:	f022685a 	.word	0xf022685a
   1858c:	605a02ff 	.word	0x605a02ff
   18590:	f012685a 	.word	0xf012685a
   18594:	d1010fff 	.word	0xd1010fff
   18598:	b12b689b 	.word	0xb12b689b
   1859c:	42a83001 	.word	0x42a83001
   185a0:	2000d1eb 	.word	0x2000d1eb
   185a4:	4770bcf0 	.word	0x4770bcf0
   185a8:	1080eb06 	.word	0x1080eb06
   185ac:	60884421 	.word	0x60884421
   185b0:	f0236843 	.word	0xf0236843
   185b4:	f04303ff 	.word	0xf04303ff
   185b8:	60430302 	.word	0x60430302
   185bc:	4770bcf0 	.word	0x4770bcf0
   185c0:	47702000 	.word	0x47702000
   185c4:	200226b2 	.word	0x200226b2
   185c8:	200204cc 	.word	0x200204cc
   185cc:	200204c8 	.word	0x200204c8

000185d0 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   185d0:	4a15b4f0 	.word	0x4a15b4f0
   185d4:	68144b15 	.word	0x68144b15
   185d8:	6825681e 	.word	0x6825681e
   185dc:	2000b1ad 	.word	0x2000b1ad
   185e0:	00c14607 	.word	0x00c14607
   185e4:	685a1863 	.word	0x685a1863
   185e8:	2a03b2d2 	.word	0x2a03b2d2
   185ec:	609fd104 	.word	0x609fd104
   185f0:	f022685a 	.word	0xf022685a
   185f4:	605a02ff 	.word	0x605a02ff
   185f8:	f012685a 	.word	0xf012685a
   185fc:	d1010fff 	.word	0xd1010fff
   18600:	b12b689b 	.word	0xb12b689b
   18604:	42853001 	.word	0x42853001
   18608:	2000d1eb 	.word	0x2000d1eb
   1860c:	4770bcf0 	.word	0x4770bcf0
   18610:	1080eb06 	.word	0x1080eb06
   18614:	60884421 	.word	0x60884421
   18618:	f0236843 	.word	0xf0236843
   1861c:	f04303ff 	.word	0xf04303ff
   18620:	60430301 	.word	0x60430301
   18624:	4770bcf0 	.word	0x4770bcf0
   18628:	200204c4 	.word	0x200204c4
   1862c:	200204c0 	.word	0x200204c0

00018630 <rpc_transport_ipc_tx_data_alloc>:
   18630:	781b4b03 	.word	0x781b4b03
   18634:	f005b90b 	.word	0xf005b90b
   18638:	2000bacd 	.word	0x2000bacd
   1863c:	bf004770 	.word	0xbf004770
   18640:	200226b2 	.word	0x200226b2

00018644 <null_handler_init>:
   18644:	47702000 	.word	0x47702000

00018648 <null_handler_put>:
   18648:	460cb510 	.word	0x460cb510
   1864c:	3101e9d0 	.word	0x3101e9d0
   18650:	47984620 	.word	0x47984620
   18654:	bd106860 	.word	0xbd106860

00018658 <null_handler_get>:
   18658:	30fff04f 	.word	0x30fff04f
   1865c:	bf004770 	.word	0xbf004770

00018660 <null_handler_available>:
   18660:	30fff04f 	.word	0x30fff04f
   18664:	bf004770 	.word	0xbf004770

00018668 <null_handler_flush>:
   18668:	47702000 	.word	0x47702000

0001866c <null_handler_free>:
   1866c:	bf004770 	.word	0xbf004770

00018670 <rpc_gnss_event_handler>:
   18670:	4b5db5f0 	.word	0x4b5db5f0
   18674:	68004606 	.word	0x68004606
   18678:	6802881b 	.word	0x6802881b
   1867c:	ebb34c5b 	.word	0xebb34c5b
   18680:	b0854f12 	.word	0xb0854f12
   18684:	6020460d 	.word	0x6020460d
   18688:	f505d033 	.word	0xf505d033
   1868c:	33ff433f 	.word	0x33ff433f
   18690:	2b02b29b 	.word	0x2b02b29b
   18694:	4c56d80e 	.word	0x4c56d80e
   18698:	075a6823 	.word	0x075a6823
   1869c:	6823d40d 	.word	0x6823d40d
   186a0:	d503079b 	.word	0xd503079b
   186a4:	0303f244 	.word	0x0303f244
   186a8:	d006429d 	.word	0xd006429d
   186ac:	b1086830 	.word	0xb1086830
   186b0:	fa72f7f9 	.word	0xfa72f7f9
   186b4:	b0052000 	.word	0xb0052000
   186b8:	2002bdf0 	.word	0x2002bdf0
   186bc:	fa60f005 	.word	0xfa60f005
   186c0:	28004607 	.word	0x28004607
   186c4:	2302d0f2 	.word	0x2302d0f2
   186c8:	68318005 	.word	0x68318005
   186cc:	48496872 	.word	0x48496872
   186d0:	0086e88d 	.word	0x0086e88d
   186d4:	93036800 	.word	0x93036800
   186d8:	46696803 	.word	0x46696803
   186dc:	4798685b 	.word	0x4798685b
   186e0:	d06d3001 	.word	0xd06d3001
   186e4:	68232000 	.word	0x68232000
   186e8:	3380f443 	.word	0x3380f443
   186ec:	b0056023 	.word	0xb0056023
   186f0:	4c3fbdf0 	.word	0x4c3fbdf0
   186f4:	01da6823 	.word	0x01da6823
   186f8:	f242d523 	.word	0xf242d523
   186fc:	42991302 	.word	0x42991302
   18700:	6843d11f 	.word	0x6843d11f
   18704:	6823b91b 	.word	0x6823b91b
   18708:	7300f043 	.word	0x7300f043
   1870c:	68236023 	.word	0x68236023
   18710:	7380f023 	.word	0x7380f023
   18714:	68236023 	.word	0x68236023
   18718:	d430025b 	.word	0xd430025b
   1871c:	0305f242 	.word	0x0305f242
   18720:	d12c429d 	.word	0xd12c429d
   18724:	02996823 	.word	0x02996823
   18728:	6843d529 	.word	0x6843d529
   1872c:	d1552b00 	.word	0xd1552b00
   18730:	f4236823 	.word	0xf4236823
   18734:	60231300 	.word	0x60231300
   18738:	f4436823 	.word	0xf4436823
   1873c:	60233300 	.word	0x60233300
   18740:	6823e01d 	.word	0x6823e01d
   18744:	d50e025f 	.word	0xd50e025f
   18748:	1303f242 	.word	0x1303f242
   1874c:	d10a429d 	.word	0xd10a429d
   18750:	b91b6843 	.word	0xb91b6843
   18754:	f4436823 	.word	0xf4436823
   18758:	60230300 	.word	0x60230300
   1875c:	f4236823 	.word	0xf4236823
   18760:	60230380 	.word	0x60230380
   18764:	f242e00b 	.word	0xf242e00b
   18768:	429d0301 	.word	0x429d0301
   1876c:	6843d10a 	.word	0x6843d10a
   18770:	6823b92b 	.word	0x6823b92b
   18774:	041b0c1b 	.word	0x041b0c1b
   18778:	0302f043 	.word	0x0302f043
   1877c:	f7f96023 	.word	0xf7f96023
   18780:	e782fa0b 	.word	0xe782fa0b
   18784:	0304f242 	.word	0x0304f242
   18788:	d1c7429d 	.word	0xd1c7429d
   1878c:	b9936843 	.word	0xb9936843
   18790:	f4436823 	.word	0xf4436823
   18794:	60230300 	.word	0x60230300
   18798:	b29b6823 	.word	0xb29b6823
   1879c:	68232b03 	.word	0x68232b03
   187a0:	b29bd016 	.word	0xb29bd016
   187a4:	d1d92b04 	.word	0xd1d92b04
   187a8:	0c1b6823 	.word	0x0c1b6823
   187ac:	f043041b 	.word	0xf043041b
   187b0:	60230302 	.word	0x60230302
   187b4:	6823e7d2 	.word	0x6823e7d2
   187b8:	2b03b29b 	.word	0x2b03b29b
   187bc:	e7f3d1ce 	.word	0xe7f3d1ce
   187c0:	f0054638 	.word	0xf0054638
   187c4:	6830f9fb 	.word	0x6830f9fb
   187c8:	f47f2800 	.word	0xf47f2800
   187cc:	e771af71 	.word	0xe771af71
   187d0:	041b0c1b 	.word	0x041b0c1b
   187d4:	0304f043 	.word	0x0304f043
   187d8:	e7bf6023 	.word	0xe7bf6023
   187dc:	f4236823 	.word	0xf4236823
   187e0:	60231300 	.word	0x60231300
   187e4:	bf00e7cb 	.word	0xbf00e7cb
   187e8:	20022346 	.word	0x20022346
   187ec:	20020490 	.word	0x20020490
   187f0:	200204e8 	.word	0x200204e8
   187f4:	200204ec 	.word	0x200204ec

000187f8 <gnss_interface_write>:
   187f8:	43f0e92d 	.word	0x43f0e92d
   187fc:	b09f4a75 	.word	0xb09f4a75
   18800:	9d264290 	.word	0x9d264290
   18804:	80d3f040 	.word	0x80d3f040
   18808:	f0002900 	.word	0xf0002900
   1880c:	2d0080c8 	.word	0x2d0080c8
   18810:	80c5f000 	.word	0x80c5f000
   18814:	2a029a27 	.word	0x2a029a27
   18818:	80c1f040 	.word	0x80c1f040
   1881c:	68224c6e 	.word	0x68224c6e
   18820:	2a02b292 	.word	0x2a02b292
   18824:	6822d004 	.word	0x6822d004
   18828:	2a04b292 	.word	0x2a04b292
   1882c:	80c5f040 	.word	0x80c5f040
   18830:	f1000798 	.word	0xf1000798
   18834:	682080c8 	.word	0x682080c8
   18838:	3000f410 	.word	0x3000f410
   1883c:	6822d065 	.word	0x6822d065
   18840:	f422882b 	.word	0xf422882b
   18844:	60223200 	.word	0x60223200
   18848:	3b016822 	.word	0x3b016822
   1884c:	1200f442 	.word	0x1200f442
   18850:	2b076022 	.word	0x2b076022
   18854:	80a3f200 	.word	0x80a3f200
   18858:	f003e8df 	.word	0xf003e8df
   1885c:	696e7378 	.word	0x696e7378
   18860:	045f5a64 	.word	0x045f5a64
   18864:	a9024608 	.word	0xa9024608
   18868:	ff1ef7fb 	.word	0xff1ef7fb
   1886c:	46682172 	.word	0x46682172
   18870:	f960f7f9 	.word	0xf960f7f9
   18874:	98004605 	.word	0x98004605
   18878:	d16c2d00 	.word	0xd16c2d00
   1887c:	d06a2800 	.word	0xd06a2800
   18880:	0605f241 	.word	0x0605f241
   18884:	0c49f04f 	.word	0x0c49f04f
   18888:	f04f2272 	.word	0xf04f2272
   1888c:	f04f0e76 	.word	0xf04f0e76
   18890:	f04f0943 	.word	0xf04f0943
   18894:	4f510854 	.word	0x4f510854
   18898:	883ba91e 	.word	0x883ba91e
   1889c:	c00ff880 	.word	0xc00ff880
   188a0:	b29b3301 	.word	0xb29b3301
   188a4:	4c03ea46 	.word	0x4c03ea46
   188a8:	cd74f841 	.word	0xcd74f841
   188ac:	71857145 	.word	0x71857145
   188b0:	720571c5 	.word	0x720571c5
   188b4:	72857245 	.word	0x72857245
   188b8:	710272c5 	.word	0x710272c5
   188bc:	900cf880 	.word	0x900cf880
   188c0:	800df880 	.word	0x800df880
   188c4:	e00ef880 	.word	0xe00ef880
   188c8:	803b6800 	.word	0x803b6800
   188cc:	ffd9f00b 	.word	0xffd9f00b
   188d0:	46314b43 	.word	0x46314b43
   188d4:	601d9800 	.word	0x601d9800
   188d8:	f940f7f9 	.word	0xf940f7f9
   188dc:	d1472800 	.word	0xd1472800
   188e0:	02996823 	.word	0x02996823
   188e4:	4e3fd50d 	.word	0x4e3fd50d
   188e8:	e0014d3a 	.word	0xe0014d3a
   188ec:	d14f2800 	.word	0xd14f2800
   188f0:	46284631 	.word	0x46284631
   188f4:	fba4f7f8 	.word	0xfba4f7f8
   188f8:	029a6823 	.word	0x029a6823
   188fc:	2800d4f6 	.word	0x2800d4f6
   18900:	6823d146 	.word	0x6823d146
   18904:	d53e039b 	.word	0xd53e039b
   18908:	b01f2000 	.word	0xb01f2000
   1890c:	83f0e8bd 	.word	0x83f0e8bd
   18910:	a9024608 	.word	0xa9024608
   18914:	fe80f7fb 	.word	0xfe80f7fb
   18918:	4608e7a8 	.word	0x4608e7a8
   1891c:	f7fba902 	.word	0xf7fba902
   18920:	e7a3fea3 	.word	0xe7a3fea3
   18924:	a9024608 	.word	0xa9024608
   18928:	fe5cf7fb 	.word	0xfe5cf7fb
   1892c:	4608e79e 	.word	0x4608e79e
   18930:	f7fba902 	.word	0xf7fba902
   18934:	e799fe33 	.word	0xe799fe33
   18938:	a9024608 	.word	0xa9024608
   1893c:	fdfcf7fb 	.word	0xfdfcf7fb
   18940:	4608e794 	.word	0x4608e794
   18944:	f7fba902 	.word	0xf7fba902
   18948:	e78ffda5 	.word	0xe78ffda5
   1894c:	a9024608 	.word	0xa9024608
   18950:	fd7ef7fb 	.word	0xfd7ef7fb
   18954:	6803e78a 	.word	0x6803e78a
   18958:	4618b11b 	.word	0x4618b11b
   1895c:	f91cf7f9 	.word	0xf91cf7f9
   18960:	f7f99800 	.word	0xf7f99800
   18964:	2023f911 	.word	0x2023f911
   18968:	fbfaf7f8 	.word	0xfbfaf7f8
   1896c:	30fff04f 	.word	0x30fff04f
   18970:	f4236823 	.word	0xf4236823
   18974:	60231300 	.word	0x60231300
   18978:	f4436823 	.word	0xf4436823
   1897c:	60233300 	.word	0x60233300
   18980:	e8bdb01f 	.word	0xe8bdb01f
   18984:	200583f0 	.word	0x200583f0
   18988:	f4436823 	.word	0xf4436823
   1898c:	60233300 	.word	0x60233300
   18990:	fbe6f7f8 	.word	0xfbe6f7f8
   18994:	30fff04f 	.word	0x30fff04f
   18998:	e8bdb01f 	.word	0xe8bdb01f
   1899c:	201683f0 	.word	0x201683f0
   189a0:	fbdef7f8 	.word	0xfbdef7f8
   189a4:	30fff04f 	.word	0x30fff04f
   189a8:	e8bdb01f 	.word	0xe8bdb01f
   189ac:	200983f0 	.word	0x200983f0
   189b0:	fbd6f7f8 	.word	0xfbd6f7f8
   189b4:	30fff04f 	.word	0x30fff04f
   189b8:	2039e7a7 	.word	0x2039e7a7
   189bc:	fbd0f7f8 	.word	0xfbd0f7f8
   189c0:	30fff04f 	.word	0x30fff04f
   189c4:	202de7a1 	.word	0x202de7a1
   189c8:	fbcaf7f8 	.word	0xfbcaf7f8
   189cc:	30fff04f 	.word	0x30fff04f
   189d0:	bf00e79b 	.word	0xbf00e79b
   189d4:	49765443 	.word	0x49765443
   189d8:	200204e8 	.word	0x200204e8
   189dc:	20022346 	.word	0x20022346
   189e0:	20020490 	.word	0x20020490
   189e4:	2002494c 	.word	0x2002494c

000189e8 <gnss_interface_read>:
   189e8:	4ff0e92d 	.word	0x4ff0e92d
   189ec:	b0b74c4a 	.word	0xb0b74c4a
   189f0:	f04042a0 	.word	0xf04042a0
   189f4:	468881ec 	.word	0x468881ec
   189f8:	f0002900 	.word	0xf0002900
   189fc:	2ad781e2 	.word	0x2ad781e2
   18a00:	81dff240 	.word	0x81dff240
   18a04:	46994d45 	.word	0x46994d45
   18a08:	b29b682b 	.word	0xb29b682b
   18a0c:	d0042b04 	.word	0xd0042b04
   18a10:	b29b682b 	.word	0xb29b682b
   18a14:	f0402b02 	.word	0xf0402b02
   18a18:	210281e0 	.word	0x210281e0
   18a1c:	240020b6 	.word	0x240020b6
   18a20:	f10d682b 	.word	0xf10d682b
   18a24:	f423020e 	.word	0xf423020e
   18a28:	602b3380 	.word	0x602b3380
   18a2c:	a0f4f8df 	.word	0xa0f4f8df
   18a30:	4f3bab08 	.word	0x4f3bab08
   18a34:	90054e38 	.word	0x90054e38
   18a38:	93049107 	.word	0x93049107
   18a3c:	ea099206 	.word	0xea099206
   18a40:	f8da0b01 	.word	0xf8da0b01
   18a44:	464a0000 	.word	0x464a0000
   18a48:	a9046803 	.word	0xa9046803
   18a4c:	4798689b 	.word	0x4798689b
   18a50:	da112800 	.word	0xda112800
   18a54:	0f00f1bb 	.word	0x0f00f1bb
   18a58:	682bd138 	.word	0x682bd138
   18a5c:	d4f003d8 	.word	0xd4f003d8
   18a60:	e7eeb10c 	.word	0xe7eeb10c
   18a64:	4639b930 	.word	0x4639b930
   18a68:	f7f84630 	.word	0xf7f84630
   18a6c:	682bfae9 	.word	0x682bfae9
   18a70:	d5f703d9 	.word	0xd5f703d9
   18a74:	e7e44604 	.word	0xe7e44604
   18a78:	0202f244 	.word	0x0202f244
   18a7c:	300ef8bd 	.word	0x300ef8bd
   18a80:	d0394293 	.word	0xd0394293
   18a84:	0201f244 	.word	0x0201f244
   18a88:	d04d4293 	.word	0xd04d4293
   18a8c:	0203f244 	.word	0x0203f244
   18a90:	f0404293 	.word	0xf0404293
   18a94:	22018196 	.word	0x22018196
   18a98:	9b082414 	.word	0x9b082414
   18a9c:	2000f888 	.word	0x2000f888
   18aa0:	f8c89a09 	.word	0xf8c89a09
   18aa4:	f8bd3008 	.word	0xf8bd3008
   18aa8:	e9c83028 	.word	0xe9c83028
   18aac:	f8da2303 	.word	0xf8da2303
   18ab0:	68030000 	.word	0x68030000
   18ab4:	479868db 	.word	0x479868db
   18ab8:	dd032800 	.word	0xdd032800
   18abc:	f443682b 	.word	0xf443682b
   18ac0:	602b3380 	.word	0x602b3380
   18ac4:	b0374620 	.word	0xb0374620
   18ac8:	8ff0e8bd 	.word	0x8ff0e8bd
   18acc:	46031c42 	.word	0x46031c42
   18ad0:	b93cd1d2 	.word	0xb93cd1d2
   18ad4:	2023461c 	.word	0x2023461c
   18ad8:	fb42f7f8 	.word	0xfb42f7f8
   18adc:	b0374620 	.word	0xb0374620
   18ae0:	8ff0e8bd 	.word	0x8ff0e8bd
   18ae4:	46209001 	.word	0x46209001
   18ae8:	fb3af7f8 	.word	0xfb3af7f8
   18aec:	461c9b01 	.word	0x461c9b01
   18af0:	b0374620 	.word	0xb0374620
   18af4:	8ff0e8bd 	.word	0x8ff0e8bd
   18af8:	f7f5a808 	.word	0xf7f5a808
   18afc:	2302f8f9 	.word	0x2302f8f9
   18b00:	b2a41c44 	.word	0xb2a41c44
   18b04:	3b08f808 	.word	0x3b08f808
   18b08:	a9084622 	.word	0xa9084622
   18b0c:	f00b4640 	.word	0xf00b4640
   18b10:	3408feb8 	.word	0x3408feb8
   18b14:	bf00e7cb 	.word	0xbf00e7cb
   18b18:	49765443 	.word	0x49765443
   18b1c:	200204e8 	.word	0x200204e8
   18b20:	2002494c 	.word	0x2002494c
   18b24:	200204ec 	.word	0x200204ec
   18b28:	a8092401 	.word	0xa8092401
   18b2c:	e9c8c80f 	.word	0xe9c8c80f
   18b30:	e9c80102 	.word	0xe9c80102
   18b34:	990d2304 	.word	0x990d2304
   18b38:	f8889a0e 	.word	0xf8889a0e
   18b3c:	9b0f4000 	.word	0x9b0f4000
   18b40:	1018f8c8 	.word	0x1018f8c8
   18b44:	f8c89910 	.word	0xf8c89910
   18b48:	f8c8201c 	.word	0xf8c8201c
   18b4c:	f89d3020 	.word	0xf89d3020
   18b50:	f8dd205d 	.word	0xf8dd205d
   18b54:	f8c8304d 	.word	0xf8c8304d
   18b58:	f8dd1024 	.word	0xf8dd1024
   18b5c:	f8881051 	.word	0xf8881051
   18b60:	f8dd2044 	.word	0xf8dd2044
   18b64:	f8c82055 	.word	0xf8c82055
   18b68:	f8dd3034 	.word	0xf8dd3034
   18b6c:	f8c83059 	.word	0xf8c83059
   18b70:	f8bd1038 	.word	0xf8bd1038
   18b74:	f8c81044 	.word	0xf8c81044
   18b78:	f8c8203c 	.word	0xf8c8203c
   18b7c:	f8dd3040 	.word	0xf8dd3040
   18b80:	f89d2046 	.word	0xf89d2046
   18b84:	f8a8304a 	.word	0xf8a8304a
   18b88:	f8881028 	.word	0xf8881028
   18b8c:	f8c8302e 	.word	0xf8c8302e
   18b90:	f89d202a 	.word	0xf89d202a
   18b94:	f89d004b 	.word	0xf89d004b
   18b98:	9b18204c 	.word	0x9b18204c
   18b9c:	406cf89d 	.word	0x406cf89d
   18ba0:	2002ea40 	.word	0x2002ea40
   18ba4:	206bf89d 	.word	0x206bf89d
   18ba8:	210ff3c3 	.word	0x210ff3c3
   18bac:	ea429b1d 	.word	0xea429b1d
   18bb0:	f8a82204 	.word	0xf8a82204
   18bb4:	f8a80030 	.word	0xf8a80030
   18bb8:	f8bd104a 	.word	0xf8bd104a
   18bbc:	f3c3105e 	.word	0xf3c3105e
   18bc0:	f8a8230f 	.word	0xf8a8230f
   18bc4:	f89d2056 	.word	0xf89d2056
   18bc8:	f8a82060 	.word	0xf8a82060
   18bcc:	f8dd3062 	.word	0xf8dd3062
   18bd0:	f8a83063 	.word	0xf8a83063
   18bd4:	f8881046 	.word	0xf8881046
   18bd8:	f8bd2048 	.word	0xf8bd2048
   18bdc:	f89d2068 	.word	0xf89d2068
   18be0:	f8c81067 	.word	0xf8c81067
   18be4:	f89d304c 	.word	0xf89d304c
   18be8:	f888306a 	.word	0xf888306a
   18bec:	f8a81050 	.word	0xf8a81050
   18bf0:	f8882052 	.word	0xf8882052
   18bf4:	f8bd3054 	.word	0xf8bd3054
   18bf8:	f8dd3072 	.word	0xf8dd3072
   18bfc:	f89d106d 	.word	0xf89d106d
   18c00:	f8c82071 	.word	0xf8c82071
   18c04:	f8881058 	.word	0xf8881058
   18c08:	f89d205c 	.word	0xf89d205c
   18c0c:	f8dd1074 	.word	0xf8dd1074
   18c10:	f8a82077 	.word	0xf8a82077
   18c14:	f89d305e 	.word	0xf89d305e
   18c18:	f888307b 	.word	0xf888307b
   18c1c:	f8c81060 	.word	0xf8c81060
   18c20:	f8882064 	.word	0xf8882064
   18c24:	f89d3068 	.word	0xf89d3068
   18c28:	f89d3080 	.word	0xf89d3080
   18c2c:	9a22107f 	.word	0x9a22107f
   18c30:	0094f89d 	.word	0x0094f89d
   18c34:	2103ea41 	.word	0x2103ea41
   18c38:	3093f89d 	.word	0x3093f89d
   18c3c:	220ff3c2 	.word	0x220ff3c2
   18c40:	106ef8a8 	.word	0x106ef8a8
   18c44:	107cf8bd 	.word	0x107cf8bd
   18c48:	2300ea43 	.word	0x2300ea43
   18c4c:	207af8a8 	.word	0x207af8a8
   18c50:	207ef89d 	.word	0x207ef89d
   18c54:	3086f8a8 	.word	0x3086f8a8
   18c58:	3081f8dd 	.word	0x3081f8dd
   18c5c:	106af8a8 	.word	0x106af8a8
   18c60:	206cf888 	.word	0x206cf888
   18c64:	2086f8bd 	.word	0x2086f8bd
   18c68:	1085f89d 	.word	0x1085f89d
   18c6c:	3070f8c8 	.word	0x3070f8c8
   18c70:	3088f89d 	.word	0x3088f89d
   18c74:	1074f888 	.word	0x1074f888
   18c78:	2076f8a8 	.word	0x2076f8a8
   18c7c:	3078f888 	.word	0x3078f888
   18c80:	3090f8bd 	.word	0x3090f8bd
   18c84:	108bf8dd 	.word	0x108bf8dd
   18c88:	208ff89d 	.word	0x208ff89d
   18c8c:	107cf8c8 	.word	0x107cf8c8
   18c90:	2080f888 	.word	0x2080f888
   18c94:	1092f89d 	.word	0x1092f89d
   18c98:	2095f8dd 	.word	0x2095f8dd
   18c9c:	3082f8a8 	.word	0x3082f8a8
   18ca0:	3099f89d 	.word	0x3099f89d
   18ca4:	1084f888 	.word	0x1084f888
   18ca8:	2088f8c8 	.word	0x2088f8c8
   18cac:	308cf888 	.word	0x308cf888
   18cb0:	009af8bd 	.word	0x009af8bd
   18cb4:	f89d9b27 	.word	0xf89d9b27
   18cb8:	f89d40a8 	.word	0xf89d40a8
   18cbc:	f3c320a7 	.word	0xf3c320a7
   18cc0:	9b2c210f 	.word	0x9b2c210f
   18cc4:	2204ea42 	.word	0x2204ea42
   18cc8:	1092f8a8 	.word	0x1092f8a8
   18ccc:	109cf89d 	.word	0x109cf89d
   18cd0:	209ef8a8 	.word	0x209ef8a8
   18cd4:	230ff3c3 	.word	0x230ff3c3
   18cd8:	209ff8dd 	.word	0x209ff8dd
   18cdc:	008ef8a8 	.word	0x008ef8a8
   18ce0:	30aaf8a8 	.word	0x30aaf8a8
   18ce4:	1090f888 	.word	0x1090f888
   18ce8:	30a3f89d 	.word	0x30a3f89d
   18cec:	10a4f8bd 	.word	0x10a4f8bd
   18cf0:	2094f8c8 	.word	0x2094f8c8
   18cf4:	20a6f89d 	.word	0x20a6f89d
   18cf8:	3098f888 	.word	0x3098f888
   18cfc:	30a9f8dd 	.word	0x30a9f8dd
   18d00:	109af8a8 	.word	0x109af8a8
   18d04:	209cf888 	.word	0x209cf888
   18d08:	20aef8bd 	.word	0x20aef8bd
   18d0c:	10adf89d 	.word	0x10adf89d
   18d10:	30a0f8c8 	.word	0x30a0f8c8
   18d14:	30b0f89d 	.word	0x30b0f89d
   18d18:	10a4f888 	.word	0x10a4f888
   18d1c:	20a6f8a8 	.word	0x20a6f8a8
   18d20:	30a8f888 	.word	0x30a8f888
   18d24:	30b8f8bd 	.word	0x30b8f8bd
   18d28:	10b3f8dd 	.word	0x10b3f8dd
   18d2c:	20b7f89d 	.word	0x20b7f89d
   18d30:	10acf8c8 	.word	0x10acf8c8
   18d34:	20b0f888 	.word	0x20b0f888
   18d38:	30b2f8a8 	.word	0x30b2f8a8
   18d3c:	30bcf89d 	.word	0x30bcf89d
   18d40:	10bbf89d 	.word	0x10bbf89d
   18d44:	00d0f89d 	.word	0x00d0f89d
   18d48:	ea419a31 	.word	0xea419a31
   18d4c:	f89d2103 	.word	0xf89d2103
   18d50:	f89d30cf 	.word	0xf89d30cf
   18d54:	ea4340ba 	.word	0xea4340ba
   18d58:	f3c22300 	.word	0xf3c22300
   18d5c:	f8a8220f 	.word	0xf8a8220f
   18d60:	f8a810b6 	.word	0xf8a810b6
   18d64:	f88830ce 	.word	0xf88830ce
   18d68:	f8a840b4 	.word	0xf8a840b4
   18d6c:	f8bd20c2 	.word	0xf8bd20c2
   18d70:	f89d20c2 	.word	0xf89d20c2
   18d74:	f89d10c1 	.word	0xf89d10c1
   18d78:	f8dd30c4 	.word	0xf8dd30c4
   18d7c:	f88800bd 	.word	0xf88800bd
   18d80:	f8a810bc 	.word	0xf8a810bc
   18d84:	f8c820be 	.word	0xf8c820be
   18d88:	f88800b8 	.word	0xf88800b8
   18d8c:	f8bd30c0 	.word	0xf8bd30c0
   18d90:	f8dd30cc 	.word	0xf8dd30cc
   18d94:	f89d10c7 	.word	0xf89d10c7
   18d98:	f8c820cb 	.word	0xf8c820cb
   18d9c:	f88810c4 	.word	0xf88810c4
   18da0:	f89d20c8 	.word	0xf89d20c8
   18da4:	f8dd10ce 	.word	0xf8dd10ce
   18da8:	f8a820d1 	.word	0xf8a820d1
   18dac:	f89d30ca 	.word	0xf89d30ca
   18db0:	f88830d5 	.word	0xf88830d5
   18db4:	f8c810cc 	.word	0xf8c810cc
   18db8:	f88820d0 	.word	0xf88820d0
   18dbc:	24d830d4 	.word	0x24d830d4
   18dc0:	2016e675 	.word	0x2016e675
   18dc4:	f9ccf7f8 	.word	0xf9ccf7f8
   18dc8:	34fff04f 	.word	0x34fff04f
   18dcc:	2009e67a 	.word	0x2009e67a
   18dd0:	f9c6f7f8 	.word	0xf9c6f7f8
   18dd4:	34fff04f 	.word	0x34fff04f
   18dd8:	2039e674 	.word	0x2039e674
   18ddc:	f9c0f7f8 	.word	0xf9c0f7f8
   18de0:	34fff04f 	.word	0x34fff04f
   18de4:	bf00e66e 	.word	0xbf00e66e

00018de8 <gnss_interface_setopt>:
   18de8:	47f0e92d 	.word	0x47f0e92d
   18dec:	1402f241 	.word	0x1402f241
   18df0:	b0864222 	.word	0xb0864222
   18df4:	d0044d9b 	.word	0xd0044d9b
   18df8:	b2a4682c 	.word	0xb2a4682c
   18dfc:	f0402c02 	.word	0xf0402c02
   18e00:	682c8104 	.word	0x682c8104
   18e04:	f1000264 	.word	0xf1000264
   18e08:	f5b18127 	.word	0xf5b18127
   18e0c:	f0407f01 	.word	0xf0407f01
   18e10:	4995811d 	.word	0x4995811d
   18e14:	f0404288 	.word	0xf0404288
   18e18:	3a018113 	.word	0x3a018113
   18e1c:	f2002a08 	.word	0xf2002a08
   18e20:	e8df80ec 	.word	0xe8df80ec
   18e24:	0075f012 	.word	0x0075f012
   18e28:	00c200d8 	.word	0x00c200d8
   18e2c:	008100cc 	.word	0x008100cc
   18e30:	0098008c 	.word	0x0098008c
   18e34:	000900af 	.word	0x000900af
   18e38:	2a019a0e 	.word	0x2a019a0e
   18e3c:	80ddf040 	.word	0x80ddf040
   18e40:	1603f241 	.word	0x1603f241
   18e44:	46372240 	.word	0x46372240
   18e48:	9202781b 	.word	0x9202781b
   18e4c:	3015f88d 	.word	0x3015f88d
   18e50:	2112682b 	.word	0x2112682b
   18e54:	0380f443 	.word	0x0380f443
   18e58:	602b4668 	.word	0x602b4668
   18e5c:	fe6af7f8 	.word	0xfe6af7f8
   18e60:	98004604 	.word	0x98004604
   18e64:	f0402c00 	.word	0xf0402c00
   18e68:	280080d6 	.word	0x280080d6
   18e6c:	80d3f000 	.word	0x80d3f000
   18e70:	f04f2212 	.word	0xf04f2212
   18e74:	f04f0876 	.word	0xf04f0876
   18e78:	f04f0e49 	.word	0xf04f0e49
   18e7c:	f04f0a43 	.word	0xf04f0a43
   18e80:	f8df0954 	.word	0xf8df0954
   18e84:	a906c1ec 	.word	0xa906c1ec
   18e88:	3000f8bc 	.word	0x3000f8bc
   18e8c:	800ef880 	.word	0x800ef880
   18e90:	b29b3301 	.word	0xb29b3301
   18e94:	4603ea46 	.word	0x4603ea46
   18e98:	6d14f841 	.word	0x6d14f841
   18e9c:	71847144 	.word	0x71847144
   18ea0:	720471c4 	.word	0x720471c4
   18ea4:	72847244 	.word	0x72847244
   18ea8:	710272c4 	.word	0x710272c4
   18eac:	a00cf880 	.word	0xa00cf880
   18eb0:	900df880 	.word	0x900df880
   18eb4:	e00ff880 	.word	0xe00ff880
   18eb8:	81b8f8df 	.word	0x81b8f8df
   18ebc:	f8ac6800 	.word	0xf8ac6800
   18ec0:	f00b3000 	.word	0xf00b3000
   18ec4:	4639fcde 	.word	0x4639fcde
   18ec8:	f8c89800 	.word	0xf8c89800
   18ecc:	f7f84000 	.word	0xf7f84000
   18ed0:	2800fe45 	.word	0x2800fe45
   18ed4:	80aaf040 	.word	0x80aaf040
   18ed8:	4e634f64 	.word	0x4e634f64
   18edc:	46304639 	.word	0x46304639
   18ee0:	f8aef7f8 	.word	0xf8aef7f8
   18ee4:	f414682c 	.word	0xf414682c
   18ee8:	d1f70480 	.word	0xd1f70480
   18eec:	0000f8d8 	.word	0x0000f8d8
   18ef0:	f7f8b118 	.word	0xf7f8b118
   18ef4:	f8c8fe51 	.word	0xf8c8fe51
   18ef8:	682b4000 	.word	0x682b4000
   18efc:	d576021b 	.word	0xd576021b
   18f00:	682b2000 	.word	0x682b2000
   18f04:	0300f423 	.word	0x0300f423
   18f08:	b006602b 	.word	0xb006602b
   18f0c:	87f0e8bd 	.word	0x87f0e8bd
   18f10:	2a029a0e 	.word	0x2a029a0e
   18f14:	2208d171 	.word	0x2208d171
   18f18:	1603f241 	.word	0x1603f241
   18f1c:	9202881b 	.word	0x9202881b
   18f20:	300ff8ad 	.word	0x300ff8ad
   18f24:	e7934637 	.word	0xe7934637
   18f28:	2a019a0e 	.word	0x2a019a0e
   18f2c:	f241d165 	.word	0xf241d165
   18f30:	781b1603 	.word	0x781b1603
   18f34:	f88d9202 	.word	0xf88d9202
   18f38:	4637300c 	.word	0x4637300c
   18f3c:	9a0ee788 	.word	0x9a0ee788
   18f40:	d15a2a01 	.word	0xd15a2a01
   18f44:	f2412202 	.word	0xf2412202
   18f48:	781b1603 	.word	0x781b1603
   18f4c:	f88d9202 	.word	0xf88d9202
   18f50:	4637300d 	.word	0x4637300d
   18f54:	682ae77c 	.word	0x682ae77c
   18f58:	2a02b292 	.word	0x2a02b292
   18f5c:	9a0ed155 	.word	0x9a0ed155
   18f60:	d14a2a04 	.word	0xd14a2a04
   18f64:	f2412101 	.word	0xf2412101
   18f68:	682a0604 	.word	0x682a0604
   18f6c:	0c136818 	.word	0x0c136818
   18f70:	f043041b 	.word	0xf043041b
   18f74:	f8cd0303 	.word	0xf8cd0303
   18f78:	602b0009 	.word	0x602b0009
   18f7c:	1008f88d 	.word	0x1008f88d
   18f80:	e7654637 	.word	0xe7654637
   18f84:	b29b682b 	.word	0xb29b682b
   18f88:	d13e2b04 	.word	0xd13e2b04
   18f8c:	f2412300 	.word	0xf2412300
   18f90:	f88d0604 	.word	0xf88d0604
   18f94:	f88d3008 	.word	0xf88d3008
   18f98:	f88d3009 	.word	0xf88d3009
   18f9c:	f88d300a 	.word	0xf88d300a
   18fa0:	f88d300b 	.word	0xf88d300b
   18fa4:	4637300c 	.word	0x4637300c
   18fa8:	9a0ee752 	.word	0x9a0ee752
   18fac:	d1242a01 	.word	0xd1242a01
   18fb0:	2b01781b 	.word	0x2b01781b
   18fb4:	f241d121 	.word	0xf241d121
   18fb8:	46371603 	.word	0x46371603
   18fbc:	9a0ee748 	.word	0x9a0ee748
   18fc0:	d11a2a02 	.word	0xd11a2a02
   18fc4:	f2412220 	.word	0xf2412220
   18fc8:	881b1603 	.word	0x881b1603
   18fcc:	f8ad9202 	.word	0xf8ad9202
   18fd0:	46373013 	.word	0x46373013
   18fd4:	9a0ee73c 	.word	0x9a0ee73c
   18fd8:	d10e2a02 	.word	0xd10e2a02
   18fdc:	f2412210 	.word	0xf2412210
   18fe0:	881b1603 	.word	0x881b1603
   18fe4:	f8ad9202 	.word	0xf8ad9202
   18fe8:	46373011 	.word	0x46373011
   18fec:	200ee730 	.word	0x200ee730
   18ff0:	f8b6f7f8 	.word	0xf8b6f7f8
   18ff4:	30fff04f 	.word	0x30fff04f
   18ff8:	2016e783 	.word	0x2016e783
   18ffc:	f8b0f7f8 	.word	0xf8b0f7f8
   19000:	30fff04f 	.word	0x30fff04f
   19004:	e8bdb006 	.word	0xe8bdb006
   19008:	200e87f0 	.word	0x200e87f0
   1900c:	f8a8f7f8 	.word	0xf8a8f7f8
   19010:	30fff04f 	.word	0x30fff04f
   19014:	6803e779 	.word	0x6803e779
   19018:	4618b11b 	.word	0x4618b11b
   1901c:	fdbcf7f8 	.word	0xfdbcf7f8
   19020:	f7f89800 	.word	0xf7f89800
   19024:	2023fdb1 	.word	0x2023fdb1
   19028:	f89af7f8 	.word	0xf89af7f8
   1902c:	200e682b 	.word	0x200e682b
   19030:	0380f423 	.word	0x0380f423
   19034:	f7f8602b 	.word	0xf7f8602b
   19038:	f04ff893 	.word	0xf04ff893
   1903c:	e76430ff 	.word	0xe76430ff
   19040:	f7f82009 	.word	0xf7f82009
   19044:	f04ff88d 	.word	0xf04ff88d
   19048:	e75e30ff 	.word	0xe75e30ff
   1904c:	f7f8202a 	.word	0xf7f8202a
   19050:	f04ff887 	.word	0xf04ff887
   19054:	e75830ff 	.word	0xe75830ff
   19058:	f7f82073 	.word	0xf7f82073
   1905c:	f04ff881 	.word	0xf04ff881
   19060:	e75230ff 	.word	0xe75230ff
   19064:	200204e8 	.word	0x200204e8
   19068:	49765443 	.word	0x49765443
   1906c:	2002494c 	.word	0x2002494c
   19070:	20022346 	.word	0x20022346
   19074:	20020490 	.word	0x20020490

00019078 <gnss_interface_getopt>:
   19078:	4ff0e92d 	.word	0x4ff0e92d
   1907c:	b0874c81 	.word	0xb0874c81
   19080:	46986825 	.word	0x46986825
   19084:	2d02b2ad 	.word	0x2d02b2ad
   19088:	f0409b10 	.word	0xf0409b10
   1908c:	682580dc 	.word	0x682580dc
   19090:	f10003ee 	.word	0xf10003ee
   19094:	682580f0 	.word	0x682580f0
   19098:	f10001ed 	.word	0xf10001ed
   1909c:	f5b180e6 	.word	0xf5b180e6
   190a0:	f0407f01 	.word	0xf0407f01
   190a4:	497880d6 	.word	0x497880d6
   190a8:	f0404288 	.word	0xf0404288
   190ac:	f1b880d8 	.word	0xf1b880d8
   190b0:	d00b0f00 	.word	0xd00b0f00
   190b4:	1e57b153 	.word	0x1e57b153
   190b8:	d8072f05 	.word	0xd8072f05
   190bc:	f007e8df 	.word	0xf007e8df
   190c0:	0f030f0f 	.word	0x0f030f0f
   190c4:	681b0303 	.word	0x681b0303
   190c8:	d00b2b01 	.word	0xd00b2b01
   190cc:	f7f82016 	.word	0xf7f82016
   190d0:	f04ff847 	.word	0xf04ff847
   190d4:	462835ff 	.word	0x462835ff
   190d8:	e8bdb007 	.word	0xe8bdb007
   190dc:	681b8ff0 	.word	0x681b8ff0
   190e0:	d1f32b02 	.word	0xd1f32b02
   190e4:	22126823 	.word	0x22126823
   190e8:	7380f043 	.word	0x7380f043
   190ec:	a8012100 	.word	0xa8012100
   190f0:	f00b6023 	.word	0xf00b6023
   190f4:	2112fbd1 	.word	0x2112fbd1
   190f8:	f7f84668 	.word	0xf7f84668
   190fc:	4605fd1b 	.word	0x4605fd1b
   19100:	2d009800 	.word	0x2d009800
   19104:	808af040 	.word	0x808af040
   19108:	f0002800 	.word	0xf0002800
   1910c:	f2418087 	.word	0xf2418087
   19110:	f04f1602 	.word	0xf04f1602
   19114:	22120e49 	.word	0x22120e49
   19118:	0976f04f 	.word	0x0976f04f
   1911c:	0b43f04f 	.word	0x0b43f04f
   19120:	0a54f04f 	.word	0x0a54f04f
   19124:	c168f8df 	.word	0xc168f8df
   19128:	e00ff880 	.word	0xe00ff880
   1912c:	3000f8bc 	.word	0x3000f8bc
   19130:	900ef880 	.word	0x900ef880
   19134:	b29b3301 	.word	0xb29b3301
   19138:	4e03ea46 	.word	0x4e03ea46
   1913c:	e004f8cd 	.word	0xe004f8cd
   19140:	71857145 	.word	0x71857145
   19144:	720571c5 	.word	0x720571c5
   19148:	72857245 	.word	0x72857245
   1914c:	a90172c5 	.word	0xa90172c5
   19150:	f8807102 	.word	0xf8807102
   19154:	f880b00c 	.word	0xf880b00c
   19158:	f8dfa00d 	.word	0xf8dfa00d
   1915c:	68009138 	.word	0x68009138
   19160:	3000f8ac 	.word	0x3000f8ac
   19164:	fb8df00b 	.word	0xfb8df00b
   19168:	98004631 	.word	0x98004631
   1916c:	5000f8c9 	.word	0x5000f8c9
   19170:	fcf4f7f8 	.word	0xfcf4f7f8
   19174:	d15c2800 	.word	0xd15c2800
   19178:	4d434e44 	.word	0x4d434e44
   1917c:	46284631 	.word	0x46284631
   19180:	ff5ef7f7 	.word	0xff5ef7f7
   19184:	01db6823 	.word	0x01db6823
   19188:	f8d9d4f8 	.word	0xf8d9d4f8
   1918c:	b1d80000 	.word	0xb1d80000
   19190:	f0156825 	.word	0xf0156825
   19194:	d00f7500 	.word	0xd00f7500
   19198:	d8372f05 	.word	0xd8372f05
   1919c:	f007e8df 	.word	0xf007e8df
   191a0:	2b26201a 	.word	0x2b26201a
   191a4:	25000331 	.word	0x25000331
   191a8:	f8887b43 	.word	0xf8887b43
   191ac:	f7f83000 	.word	0xf7f83000
   191b0:	2300fcf3 	.word	0x2300fcf3
   191b4:	3000f8c9 	.word	0x3000f8c9
   191b8:	f0236823 	.word	0xf0236823
   191bc:	60237300 	.word	0x60237300
   191c0:	b0074628 	.word	0xb0074628
   191c4:	8ff0e8bd 	.word	0x8ff0e8bd
   191c8:	46056823 	.word	0x46056823
   191cc:	7300f023 	.word	0x7300f023
   191d0:	e7f56023 	.word	0xe7f56023
   191d4:	300ff8b0 	.word	0x300ff8b0
   191d8:	f8a82500 	.word	0xf8a82500
   191dc:	e7e63000 	.word	0xe7e63000
   191e0:	3011f8b0 	.word	0x3011f8b0
   191e4:	f8a82500 	.word	0xf8a82500
   191e8:	e7e03000 	.word	0xe7e03000
   191ec:	25007b83 	.word	0x25007b83
   191f0:	3000f888 	.word	0x3000f888
   191f4:	f8b0e7db 	.word	0xf8b0e7db
   191f8:	25003013 	.word	0x25003013
   191fc:	3000f8a8 	.word	0x3000f8a8
   19200:	7b03e7d5 	.word	0x7b03e7d5
   19204:	f8882500 	.word	0xf8882500
   19208:	e7d03000 	.word	0xe7d03000
   1920c:	f7f72016 	.word	0xf7f72016
   19210:	f04fffa7 	.word	0xf04fffa7
   19214:	f8d935ff 	.word	0xf8d935ff
   19218:	e7c80000 	.word	0xe7c80000
   1921c:	b11b6803 	.word	0xb11b6803
   19220:	f7f84618 	.word	0xf7f84618
   19224:	9800fcb9 	.word	0x9800fcb9
   19228:	fcaef7f8 	.word	0xfcaef7f8
   1922c:	f7f72023 	.word	0xf7f72023
   19230:	6823ff97 	.word	0x6823ff97
   19234:	f023200e 	.word	0xf023200e
   19238:	60237380 	.word	0x60237380
   1923c:	35fff04f 	.word	0x35fff04f
   19240:	ff8ef7f7 	.word	0xff8ef7f7
   19244:	200ee747 	.word	0x200ee747
   19248:	ff8af7f7 	.word	0xff8af7f7
   1924c:	35fff04f 	.word	0x35fff04f
   19250:	202ae741 	.word	0x202ae741
   19254:	ff84f7f7 	.word	0xff84f7f7
   19258:	35fff04f 	.word	0x35fff04f
   1925c:	2009e73b 	.word	0x2009e73b
   19260:	ff7ef7f7 	.word	0xff7ef7f7
   19264:	35fff04f 	.word	0x35fff04f
   19268:	2073e735 	.word	0x2073e735
   1926c:	ff78f7f7 	.word	0xff78f7f7
   19270:	35fff04f 	.word	0x35fff04f
   19274:	2005e72f 	.word	0x2005e72f
   19278:	ff72f7f7 	.word	0xff72f7f7
   1927c:	35fff04f 	.word	0x35fff04f
   19280:	bf00e729 	.word	0xbf00e729
   19284:	200204e8 	.word	0x200204e8
   19288:	49765443 	.word	0x49765443
   1928c:	2002494c 	.word	0x2002494c
   19290:	20022346 	.word	0x20022346
   19294:	20020490 	.word	0x20020490

00019298 <gnss_interface_init>:
   19298:	b5382100 	.word	0xb5382100
   1929c:	4d0a4c09 	.word	0x4d0a4c09
   192a0:	480a6822 	.word	0x480a6822
   192a4:	402a4b0a 	.word	0x402a4b0a
   192a8:	80016022 	.word	0x80016022
   192ac:	f7f86019 	.word	0xf7f86019
   192b0:	b928fc3b 	.word	0xb928fc3b
   192b4:	402b6823 	.word	0x402b6823
   192b8:	0301f043 	.word	0x0301f043
   192bc:	bd386023 	.word	0xbd386023
   192c0:	bd382003 	.word	0xbd382003
   192c4:	200204e8 	.word	0x200204e8
   192c8:	ffff0000 	.word	0xffff0000
   192cc:	20022346 	.word	0x20022346
   192d0:	20020490 	.word	0x20020490

000192d4 <gnss_interface_open>:
   192d4:	b5102801 	.word	0xb5102801
   192d8:	f5b2d120 	.word	0xf5b2d120
   192dc:	d11d7f01 	.word	0xd11d7f01
   192e0:	d11b2902 	.word	0xd11b2902
   192e4:	68234c13 	.word	0x68234c13
   192e8:	2b01b29b 	.word	0x2b01b29b
   192ec:	6823d11c 	.word	0x6823d11c
   192f0:	0c1b4608 	.word	0x0c1b4608
   192f4:	f043041b 	.word	0xf043041b
   192f8:	22000302 	.word	0x22000302
   192fc:	6023490e 	.word	0x6023490e
   19300:	fc14f7fa 	.word	0xfc14f7fa
   19304:	60104a0d 	.word	0x60104a0d
   19308:	6823b170 	.word	0x6823b170
   1930c:	f4436802 	.word	0xf4436802
   19310:	68123300 	.word	0x68123300
   19314:	47906023 	.word	0x47906023
   19318:	bd104809 	.word	0xbd104809
   1931c:	f7f72016 	.word	0xf7f72016
   19320:	f04fff1f 	.word	0xf04fff1f
   19324:	bd1030ff 	.word	0xbd1030ff
   19328:	f7f7200e 	.word	0xf7f7200e
   1932c:	f04fff19 	.word	0xf04fff19
   19330:	bd1030ff 	.word	0xbd1030ff
   19334:	200204e8 	.word	0x200204e8
   19338:	00011d49 	.word	0x00011d49
   1933c:	200204ec 	.word	0x200204ec
   19340:	49765443 	.word	0x49765443

00019344 <gnss_interface_close>:
   19344:	4b13b530 	.word	0x4b13b530
   19348:	4298b083 	.word	0x4298b083
   1934c:	4c12d11c 	.word	0x4c12d11c
   19350:	b29b6823 	.word	0xb29b6823
   19354:	d00f2b04 	.word	0xd00f2b04
   19358:	68284d10 	.word	0x68284d10
   1935c:	f7fab118 	.word	0xf7fab118
   19360:	2300fc05 	.word	0x2300fc05
   19364:	2000602b 	.word	0x2000602b
   19368:	0c1b6823 	.word	0x0c1b6823
   1936c:	f043041b 	.word	0xf043041b
   19370:	60230301 	.word	0x60230301
   19374:	bd30b003 	.word	0xbd30b003
   19378:	22082300 	.word	0x22082300
   1937c:	f44f9300 	.word	0xf44f9300
   19380:	f7f97101 	.word	0xf7f97101
   19384:	e7e7fb87 	.word	0xe7e7fb87
   19388:	f7f72009 	.word	0xf7f72009
   1938c:	f04ffee9 	.word	0xf04ffee9
   19390:	e7ef30ff 	.word	0xe7ef30ff
   19394:	49765443 	.word	0x49765443
   19398:	200204e8 	.word	0x200204e8
   1939c:	200204ec 	.word	0x200204ec

000193a0 <rpc_dfu_event_handler>:
   193a0:	4a08b508 	.word	0x4a08b508
   193a4:	881268c1 	.word	0x881268c1
   193a8:	ebb24603 	.word	0xebb24603
   193ac:	d0054f11 	.word	0xd0054f11
   193b0:	b1106800 	.word	0xb1106800
   193b4:	f81ef004 	.word	0xf81ef004
   193b8:	bd082000 	.word	0xbd082000
   193bc:	20014a02 	.word	0x20014a02
   193c0:	bd086013 	.word	0xbd086013
   193c4:	20022348 	.word	0x20022348
   193c8:	20020494 	.word	0x20020494

000193cc <mfu_interface_init>:
   193cc:	b5102300 	.word	0xb5102300
   193d0:	49094808 	.word	0x49094808
   193d4:	4c0a4a09 	.word	0x4c0a4a09
   193d8:	600b8003 	.word	0x600b8003
   193dc:	60236013 	.word	0x60236013
   193e0:	ffd2f003 	.word	0xffd2f003
   193e4:	2301b910 	.word	0x2301b910
   193e8:	bd106023 	.word	0xbd106023
   193ec:	30fff04f 	.word	0x30fff04f
   193f0:	bf00bd10 	.word	0xbf00bd10
   193f4:	20022348 	.word	0x20022348
   193f8:	20020494 	.word	0x20020494
   193fc:	200204f8 	.word	0x200204f8
   19400:	200204f0 	.word	0x200204f0

00019404 <mfu_interface_open>:
   19404:	b5082801 	.word	0xb5082801
   19408:	f240d10b 	.word	0xf240d10b
   1940c:	429a2303 	.word	0x429a2303
   19410:	4b09d107 	.word	0x4b09d107
   19414:	2a01681a 	.word	0x2a01681a
   19418:	2202d109 	.word	0x2202d109
   1941c:	4807601a 	.word	0x4807601a
   19420:	2016bd08 	.word	0x2016bd08
   19424:	fe9cf7f7 	.word	0xfe9cf7f7
   19428:	30fff04f 	.word	0x30fff04f
   1942c:	f7f7bd08 	.word	0xf7f7bd08
   19430:	f04ffe97 	.word	0xf04ffe97
   19434:	bd0830ff 	.word	0xbd0830ff
   19438:	200204f0 	.word	0x200204f0
   1943c:	49765432 	.word	0x49765432

00019440 <mfu_interface_close>:
   19440:	4c32b5f0 	.word	0x4c32b5f0
   19444:	6823b083 	.word	0x6823b083
   19448:	2a011e9a 	.word	0x2a011e9a
   1944c:	2b03d857 	.word	0x2b03d857
   19450:	2301d004 	.word	0x2301d004
   19454:	60232000 	.word	0x60232000
   19458:	bdf0b003 	.word	0xbdf0b003
   1945c:	46682100 	.word	0x46682100
   19460:	ff98f003 	.word	0xff98f003
   19464:	28004603 	.word	0x28004603
   19468:	2104d13d 	.word	0x2104d13d
   1946c:	98004e28 	.word	0x98004e28
   19470:	72018832 	.word	0x72018832
   19474:	b2923201 	.word	0xb2923201
   19478:	f0410411 	.word	0xf0410411
   1947c:	4d250106 	.word	0x4d250106
   19480:	710360c1 	.word	0x710360c1
   19484:	71837143 	.word	0x71837143
   19488:	724371c3 	.word	0x724371c3
   1948c:	72c37283 	.word	0x72c37283
   19490:	80322106 	.word	0x80322106
   19494:	f003602b 	.word	0xf003602b
   19498:	b9d8ff91 	.word	0xb9d8ff91
   1949c:	33fff04f 	.word	0x33fff04f
   194a0:	4627ae02 	.word	0x4627ae02
   194a4:	3d04f846 	.word	0x3d04f846
   194a8:	4631e004 	.word	0x4631e004
   194ac:	f7f74638 	.word	0xf7f74638
   194b0:	b9f0fdc7 	.word	0xb9f0fdc7
   194b4:	28006828 	.word	0x28006828
   194b8:	6905d0f7 	.word	0x6905d0f7
   194bc:	ff92f003 	.word	0xff92f003
   194c0:	d0c62d00 	.word	0xd0c62d00
   194c4:	20084b14 	.word	0x20084b14
   194c8:	f7f7601d 	.word	0xf7f7601d
   194cc:	f04ffe49 	.word	0xf04ffe49
   194d0:	e7c130ff 	.word	0xe7c130ff
   194d4:	68039800 	.word	0x68039800
   194d8:	4618b11b 	.word	0x4618b11b
   194dc:	ff8af003 	.word	0xff8af003
   194e0:	f0039800 	.word	0xf0039800
   194e4:	200cff7f 	.word	0x200cff7f
   194e8:	fe3af7f7 	.word	0xfe3af7f7
   194ec:	30fff04f 	.word	0x30fff04f
   194f0:	203ce7b2 	.word	0x203ce7b2
   194f4:	fe34f7f7 	.word	0xfe34f7f7
   194f8:	30fff04f 	.word	0x30fff04f
   194fc:	2001e7ac 	.word	0x2001e7ac
   19500:	fe2ef7f7 	.word	0xfe2ef7f7
   19504:	30fff04f 	.word	0x30fff04f
   19508:	bf00e7a6 	.word	0xbf00e7a6
   1950c:	200204f0 	.word	0x200204f0
   19510:	20022348 	.word	0x20022348
   19514:	20020494 	.word	0x20020494
   19518:	200204f4 	.word	0x200204f4

0001951c <mfu_interface_sendto>:
   1951c:	47f0e92d 	.word	0x47f0e92d
   19520:	46154e5a 	.word	0x46154e5a
   19524:	b0826833 	.word	0xb0826833
   19528:	2a011e9a 	.word	0x2a011e9a
   1952c:	80a7f200 	.word	0x80a7f200
   19530:	2900460f 	.word	0x2900460f
   19534:	809df000 	.word	0x809df000
   19538:	f0002d00 	.word	0xf0002d00
   1953c:	2b02809a 	.word	0x2b02809a
   19540:	d04e46e8 	.word	0xd04e46e8
   19544:	46294640 	.word	0x46294640
   19548:	ff24f003 	.word	0xff24f003
   1954c:	b1404606 	.word	0xb1404606
   19550:	f7f7200c 	.word	0xf7f7200c
   19554:	f04ffe05 	.word	0xf04ffe05
   19558:	462835ff 	.word	0x462835ff
   1955c:	e8bdb002 	.word	0xe8bdb002
   19560:	9b0087f0 	.word	0x9b0087f0
   19564:	68184639 	.word	0x68184639
   19568:	f00b462a 	.word	0xf00b462a
   1956c:	2104f98a 	.word	0x2104f98a
   19570:	98004c47 	.word	0x98004c47
   19574:	60458823 	.word	0x60458823
   19578:	b29b3301 	.word	0xb29b3301
   1957c:	8023041a 	.word	0x8023041a
   19580:	4c44430a 	.word	0x4c44430a
   19584:	724660c2 	.word	0x724660c2
   19588:	72c67286 	.word	0x72c67286
   1958c:	60267201 	.word	0x60267201
   19590:	ff14f003 	.word	0xff14f003
   19594:	d1622800 	.word	0xd1622800
   19598:	33fff04f 	.word	0x33fff04f
   1959c:	4f3bae02 	.word	0x4f3bae02
   195a0:	3d04f846 	.word	0x3d04f846
   195a4:	4631e004 	.word	0x4631e004
   195a8:	f7f74638 	.word	0xf7f74638
   195ac:	b978fd49 	.word	0xb978fd49
   195b0:	28006820 	.word	0x28006820
   195b4:	6904d0f7 	.word	0x6904d0f7
   195b8:	ff14f003 	.word	0xff14f003
   195bc:	d0cc2c00 	.word	0xd0cc2c00
   195c0:	20084b35 	.word	0x20084b35
   195c4:	f04f601c 	.word	0xf04f601c
   195c8:	f7f735ff 	.word	0xf7f735ff
   195cc:	e7c4fdc9 	.word	0xe7c4fdc9
   195d0:	35fff04f 	.word	0x35fff04f
   195d4:	f7f7203c 	.word	0xf7f7203c
   195d8:	4628fdc3 	.word	0x4628fdc3
   195dc:	e8bdb002 	.word	0xe8bdb002
   195e0:	464087f0 	.word	0x464087f0
   195e4:	f0032100 	.word	0xf0032100
   195e8:	4602fed5 	.word	0x4602fed5
   195ec:	d1af2800 	.word	0xd1af2800
   195f0:	0c08f04f 	.word	0x0c08f04f
   195f4:	48294926 	.word	0x48294926
   195f8:	6804880b 	.word	0x6804880b
   195fc:	98003301 	.word	0x98003301
   19600:	800bb29b 	.word	0x800bb29b
   19604:	f043041b 	.word	0xf043041b
   19608:	61040303 	.word	0x61040303
   1960c:	60c34c21 	.word	0x60c34c21
   19610:	71427102 	.word	0x71427102
   19614:	71c27182 	.word	0x71c27182
   19618:	72827242 	.word	0x72827242
   1961c:	f88072c2 	.word	0xf88072c2
   19620:	2103c008 	.word	0x2103c008
   19624:	f0036022 	.word	0xf0036022
   19628:	b9c0fec9 	.word	0xb9c0fec9
   1962c:	33fff04f 	.word	0x33fff04f
   19630:	0908f10d 	.word	0x0908f10d
   19634:	3d04f849 	.word	0x3d04f849
   19638:	e00546b2 	.word	0xe00546b2
   1963c:	46504649 	.word	0x46504649
   19640:	fcfef7f7 	.word	0xfcfef7f7
   19644:	d1c32800 	.word	0xd1c32800
   19648:	28006820 	.word	0x28006820
   1964c:	6904d0f6 	.word	0x6904d0f6
   19650:	fec8f003 	.word	0xfec8f003
   19654:	d1b32c00 	.word	0xd1b32c00
   19658:	60332303 	.word	0x60332303
   1965c:	9800e772 	.word	0x9800e772
   19660:	b11b6803 	.word	0xb11b6803
   19664:	f0034618 	.word	0xf0034618
   19668:	9800fec5 	.word	0x9800fec5
   1966c:	febaf003 	.word	0xfebaf003
   19670:	2016e76e 	.word	0x2016e76e
   19674:	fd74f7f7 	.word	0xfd74f7f7
   19678:	35fff04f 	.word	0x35fff04f
   1967c:	2001e76d 	.word	0x2001e76d
   19680:	fd6ef7f7 	.word	0xfd6ef7f7
   19684:	35fff04f 	.word	0x35fff04f
   19688:	bf00e767 	.word	0xbf00e767
   1968c:	200204f0 	.word	0x200204f0
   19690:	20022348 	.word	0x20022348
   19694:	20020494 	.word	0x20020494
   19698:	200204f4 	.word	0x200204f4
   1969c:	200204f8 	.word	0x200204f8

000196a0 <mfu_interface_setopt>:
   196a0:	4846b5f0 	.word	0x4846b5f0
   196a4:	6800b083 	.word	0x6800b083
   196a8:	28013802 	.word	0x28013802
   196ac:	f240d877 	.word	0xf240d877
   196b0:	42812003 	.word	0x42812003
   196b4:	3a04d16d 	.word	0x3a04d16d
   196b8:	d85c2a03 	.word	0xd85c2a03
   196bc:	f002e8df 	.word	0xf002e8df
   196c0:	514e024b 	.word	0x514e024b
   196c4:	46252407 	.word	0x46252407
   196c8:	46682100 	.word	0x46682100
   196cc:	fe62f003 	.word	0xfe62f003
   196d0:	28004603 	.word	0x28004603
   196d4:	2704d138 	.word	0x2704d138
   196d8:	98004e39 	.word	0x98004e39
   196dc:	46298832 	.word	0x46298832
   196e0:	b2923201 	.word	0xb2923201
   196e4:	4502ea44 	.word	0x4502ea44
   196e8:	60c54c36 	.word	0x60c54c36
   196ec:	71437103 	.word	0x71437103
   196f0:	71c37183 	.word	0x71c37183
   196f4:	72837243 	.word	0x72837243
   196f8:	720772c3 	.word	0x720772c3
   196fc:	60238032 	.word	0x60238032
   19700:	fe5cf003 	.word	0xfe5cf003
   19704:	f04fb9b8 	.word	0xf04fb9b8
   19708:	ad0233ff 	.word	0xad0233ff
   1970c:	f8454e2b 	.word	0xf8454e2b
   19710:	e0053d04 	.word	0xe0053d04
   19714:	46304629 	.word	0x46304629
   19718:	fc92f7f7 	.word	0xfc92f7f7
   1971c:	d1312800 	.word	0xd1312800
   19720:	28006820 	.word	0x28006820
   19724:	6904d0f6 	.word	0x6904d0f6
   19728:	fe5cf003 	.word	0xfe5cf003
   1972c:	d13c2c00 	.word	0xd13c2c00
   19730:	b0034620 	.word	0xb0034620
   19734:	9800bdf0 	.word	0x9800bdf0
   19738:	b11b6803 	.word	0xb11b6803
   1973c:	f0034618 	.word	0xf0034618
   19740:	9800fe59 	.word	0x9800fe59
   19744:	fe4ef003 	.word	0xfe4ef003
   19748:	f7f7200c 	.word	0xf7f7200c
   1974c:	f04ffd09 	.word	0xf04ffd09
   19750:	b00330ff 	.word	0xb00330ff
   19754:	2405bdf0 	.word	0x2405bdf0
   19758:	e7b54625 	.word	0xe7b54625
   1975c:	46252408 	.word	0x46252408
   19760:	b1b3e7b2 	.word	0xb1b3e7b2
   19764:	2a049a08 	.word	0x2a049a08
   19768:	2000d113 	.word	0x2000d113
   1976c:	4b16681a 	.word	0x4b16681a
   19770:	b003601a 	.word	0xb003601a
   19774:	202abdf0 	.word	0x202abdf0
   19778:	fcf2f7f7 	.word	0xfcf2f7f7
   1977c:	30fff04f 	.word	0x30fff04f
   19780:	bdf0b003 	.word	0xbdf0b003
   19784:	f7f7203c 	.word	0xf7f7203c
   19788:	f04ffceb 	.word	0xf04ffceb
   1978c:	b00330ff 	.word	0xb00330ff
   19790:	2016bdf0 	.word	0x2016bdf0
   19794:	fce4f7f7 	.word	0xfce4f7f7
   19798:	30fff04f 	.word	0x30fff04f
   1979c:	2001e7c9 	.word	0x2001e7c9
   197a0:	fcdef7f7 	.word	0xfcdef7f7
   197a4:	30fff04f 	.word	0x30fff04f
   197a8:	4b08e7c3 	.word	0x4b08e7c3
   197ac:	601c2008 	.word	0x601c2008
   197b0:	fcd6f7f7 	.word	0xfcd6f7f7
   197b4:	30fff04f 	.word	0x30fff04f
   197b8:	bf00e7bb 	.word	0xbf00e7bb
   197bc:	200204f0 	.word	0x200204f0
   197c0:	20022348 	.word	0x20022348
   197c4:	20020494 	.word	0x20020494
   197c8:	200204f8 	.word	0x200204f8
   197cc:	200204f4 	.word	0x200204f4

000197d0 <mfu_interface_getopt>:
   197d0:	2003f240 	.word	0x2003f240
   197d4:	41f0e92d 	.word	0x41f0e92d
   197d8:	b0824281 	.word	0xb0824281
   197dc:	f0409e08 	.word	0xf0409e08
   197e0:	461d80ae 	.word	0x461d80ae
   197e4:	f0002b00 	.word	0xf0002b00
   197e8:	2e0080aa 	.word	0x2e0080aa
   197ec:	80a7f000 	.word	0x80a7f000
   197f0:	681b4b5e 	.word	0x681b4b5e
   197f4:	2b013b02 	.word	0x2b013b02
   197f8:	80a7f200 	.word	0x80a7f200
   197fc:	2a133a01 	.word	0x2a133a01
   19800:	e8dfd879 	.word	0xe8dfd879
   19804:	5f17f002 	.word	0x5f17f002
   19808:	78787878 	.word	0x78787878
   1980c:	78787872 	.word	0x78787872
   19810:	78787878 	.word	0x78787878
   19814:	78787878 	.word	0x78787878
   19818:	68330a78 	.word	0x68330a78
   1981c:	f0402b04 	.word	0xf0402b04
   19820:	2200808e 	.word	0x2200808e
   19824:	4b524610 	.word	0x4b524610
   19828:	601a6819 	.word	0x601a6819
   1982c:	b0026029 	.word	0xb0026029
   19830:	81f0e8bd 	.word	0x81f0e8bd
   19834:	2b246833 	.word	0x2b246833
   19838:	8081f040 	.word	0x8081f040
   1983c:	46a02401 	.word	0x46a02401
   19840:	46682100 	.word	0x46682100
   19844:	fda6f003 	.word	0xfda6f003
   19848:	d1462800 	.word	0xd1462800
   1984c:	9b004949 	.word	0x9b004949
   19850:	f1b8880a 	.word	0xf1b8880a
   19854:	f1020f03 	.word	0xf1020f03
   19858:	b2920201 	.word	0xb2920201
   1985c:	4402ea44 	.word	0x4402ea44
   19860:	800a7118 	.word	0x800a7118
   19864:	715860dc 	.word	0x715860dc
   19868:	71d87198 	.word	0x71d87198
   1986c:	2104d04b 	.word	0x2104d04b
   19870:	4f412200 	.word	0x4f412200
   19874:	46186099 	.word	0x46186099
   19878:	603a4641 	.word	0x603a4641
   1987c:	fd9ef003 	.word	0xfd9ef003
   19880:	d14d2800 	.word	0xd14d2800
   19884:	33fff04f 	.word	0x33fff04f
   19888:	f844ac02 	.word	0xf844ac02
   1988c:	f8df3d04 	.word	0xf8df3d04
   19890:	e00580dc 	.word	0xe00580dc
   19894:	46404621 	.word	0x46404621
   19898:	fbd2f7f7 	.word	0xfbd2f7f7
   1989c:	d1372800 	.word	0xd1372800
   198a0:	29006839 	.word	0x29006839
   198a4:	690cd0f6 	.word	0x690cd0f6
   198a8:	d1542c00 	.word	0xd1542c00
   198ac:	31146832 	.word	0x31146832
   198b0:	f00a4628 	.word	0xf00a4628
   198b4:	6838ffe6 	.word	0x6838ffe6
   198b8:	fd94f003 	.word	0xfd94f003
   198bc:	b0024620 	.word	0xb0024620
   198c0:	81f0e8bd 	.word	0x81f0e8bd
   198c4:	2b046833 	.word	0x2b046833
   198c8:	2402d139 	.word	0x2402d139
   198cc:	46682100 	.word	0x46682100
   198d0:	f00346a0 	.word	0xf00346a0
   198d4:	2800fd5f 	.word	0x2800fd5f
   198d8:	200cd0b8 	.word	0x200cd0b8
   198dc:	fc40f7f7 	.word	0xfc40f7f7
   198e0:	30fff04f 	.word	0x30fff04f
   198e4:	e8bdb002 	.word	0xe8bdb002
   198e8:	683381f0 	.word	0x683381f0
   198ec:	d1262b04 	.word	0xd1262b04
   198f0:	46a02409 	.word	0x46a02409
   198f4:	202ae7a4 	.word	0x202ae7a4
   198f8:	fc32f7f7 	.word	0xfc32f7f7
   198fc:	30fff04f 	.word	0x30fff04f
   19900:	e8bdb002 	.word	0xe8bdb002
   19904:	4a1d81f0 	.word	0x4a1d81f0
   19908:	68122108 	.word	0x68122108
   1990c:	e7af611a 	.word	0xe7af611a
   19910:	f7f7203c 	.word	0xf7f7203c
   19914:	f04ffc25 	.word	0xf04ffc25
   19918:	b00230ff 	.word	0xb00230ff
   1991c:	81f0e8bd 	.word	0x81f0e8bd
   19920:	68039800 	.word	0x68039800
   19924:	4618b11b 	.word	0x4618b11b
   19928:	fd64f003 	.word	0xfd64f003
   1992c:	f0039800 	.word	0xf0039800
   19930:	200cfd59 	.word	0x200cfd59
   19934:	fc14f7f7 	.word	0xfc14f7f7
   19938:	30fff04f 	.word	0x30fff04f
   1993c:	2016e7d2 	.word	0x2016e7d2
   19940:	fc0ef7f7 	.word	0xfc0ef7f7
   19944:	30fff04f 	.word	0x30fff04f
   19948:	2001e771 	.word	0x2001e771
   1994c:	fc08f7f7 	.word	0xfc08f7f7
   19950:	30fff04f 	.word	0x30fff04f
   19954:	4b06e76b 	.word	0x4b06e76b
   19958:	601c2008 	.word	0x601c2008
   1995c:	fc00f7f7 	.word	0xfc00f7f7
   19960:	f0036838 	.word	0xf0036838
   19964:	f04ffd3f 	.word	0xf04ffd3f
   19968:	e76030ff 	.word	0xe76030ff
   1996c:	200204f0 	.word	0x200204f0
   19970:	200204f4 	.word	0x200204f4
   19974:	20022348 	.word	0x20022348
   19978:	20020494 	.word	0x20020494
   1997c:	200204f8 	.word	0x200204f8

00019980 <unimplemented_method>:
   19980:	b508b40f 	.word	0xb508b40f
   19984:	f7f7202d 	.word	0xf7f7202d
   19988:	e8bdfbeb 	.word	0xe8bdfbeb
   1998c:	f04f4008 	.word	0xf04f4008
   19990:	b00430ff 	.word	0xb00430ff
   19994:	bf004770 	.word	0xbf004770

00019998 <bsd_platform_init>:
   19998:	b093b5f0 	.word	0xb093b5f0
   1999c:	ff62f003 	.word	0xff62f003
   199a0:	d1522800 	.word	0xd1522800
   199a4:	a801492b 	.word	0xa801492b
   199a8:	ffd0f003 	.word	0xffd0f003
   199ac:	d14c2800 	.word	0xd14c2800
   199b0:	fccaf7f7 	.word	0xfccaf7f7
   199b4:	f814f003 	.word	0xf814f003
   199b8:	d1462800 	.word	0xd1462800
   199bc:	f44f2320 	.word	0xf44f2320
   199c0:	22084180 	.word	0x22084180
   199c4:	5c40f44f 	.word	0x5c40f44f
   199c8:	4e244f23 	.word	0x4e244f23
   199cc:	93059303 	.word	0x93059303
   199d0:	4d239307 	.word	0x4d239307
   199d4:	910d9109 	.word	0x910d9109
   199d8:	49234c22 	.word	0x49234c22
   199dc:	e9cd4b23 	.word	0xe9cd4b23
   199e0:	eb0d0010 	.word	0xeb0d0010
   199e4:	f8cd0002 	.word	0xf8cd0002
   199e8:	e9cdc02c 	.word	0xe9cdc02c
   199ec:	9702220e 	.word	0x9702220e
   199f0:	95069604 	.word	0x95069604
   199f4:	910a9408 	.word	0x910a9408
   199f8:	f7f8930c 	.word	0xf7f8930c
   199fc:	b108ff0d 	.word	0xb108ff0d
   19a00:	bdf0b013 	.word	0xbdf0b013
   19a04:	fd8af7fc 	.word	0xfd8af7fc
   19a08:	f7f8b9f8 	.word	0xf7f8b9f8
   19a0c:	b9e0f9fd 	.word	0xb9e0f9fd
   19a10:	f832f7fd 	.word	0xf832f7fd
   19a14:	f7fab9c8 	.word	0xf7fab9c8
   19a18:	b9b0f965 	.word	0xb9b0f965
   19a1c:	fcd6f7ff 	.word	0xfcd6f7ff
   19a20:	f7f7b998 	.word	0xf7f7b998
   19a24:	b980fff9 	.word	0xb980fff9
   19a28:	f8e6f000 	.word	0xf8e6f000
   19a2c:	f005b968 	.word	0xf005b968
   19a30:	b950f90f 	.word	0xb950f90f
   19a34:	fc30f7ff 	.word	0xfc30f7ff
   19a38:	f7f8b938 	.word	0xf7f8b938
   19a3c:	3000fbe9 	.word	0x3000fbe9
   19a40:	2001bf18 	.word	0x2001bf18
   19a44:	b0134240 	.word	0xb0134240
   19a48:	f04fbdf0 	.word	0xf04fbdf0
   19a4c:	b01330ff 	.word	0xb01330ff
   19a50:	bf00bdf0 	.word	0xbf00bdf0
   19a54:	00025fe0 	.word	0x00025fe0
   19a58:	20010000 	.word	0x20010000
   19a5c:	20010040 	.word	0x20010040
   19a60:	20010020 	.word	0x20010020
   19a64:	20017060 	.word	0x20017060
   19a68:	20010060 	.word	0x20010060
   19a6c:	20013060 	.word	0x20013060

00019a70 <bsd_platform_af_method_table_get>:
   19a70:	d02a2805 	.word	0xd02a2805
   19a74:	d914b508 	.word	0xd914b508
   19a78:	d016280a 	.word	0xd016280a
   19a7c:	d10b2866 	.word	0xd10b2866
   19a80:	2302f240 	.word	0x2302f240
   19a84:	d032429a 	.word	0xd032429a
   19a88:	2305f240 	.word	0x2305f240
   19a8c:	d032429a 	.word	0xd032429a
   19a90:	2301f240 	.word	0x2301f240
   19a94:	d02c429a 	.word	0xd02c429a
   19a98:	f7f72016 	.word	0xf7f72016
   19a9c:	2000fb61 	.word	0x2000fb61
   19aa0:	2801bd08 	.word	0x2801bd08
   19aa4:	2802d016 	.word	0x2802d016
   19aa8:	f5a2d1f6 	.word	0xf5a2d1f6
   19aac:	2a0a7282 	.word	0x2a0a7282
   19ab0:	2301d819 	.word	0x2301d819
   19ab4:	4103f240 	.word	0x4103f240
   19ab8:	fa034810 	.word	0xfa034810
   19abc:	420af202 	.word	0x420af202
   19ac0:	0328f100 	.word	0x0328f100
   19ac4:	4618bf18 	.word	0x4618bf18
   19ac8:	2903bd08 	.word	0x2903bd08
   19acc:	bf18480c 	.word	0xbf18480c
   19ad0:	47702000 	.word	0x47702000
   19ad4:	2303f240 	.word	0x2303f240
   19ad8:	d006429a 	.word	0xd006429a
   19adc:	7f01f5b2 	.word	0x7f01f5b2
   19ae0:	4808d1da 	.word	0x4808d1da
   19ae4:	4805bd08 	.word	0x4805bd08
   19ae8:	4807bd08 	.word	0x4807bd08
   19aec:	4807bd08 	.word	0x4807bd08
   19af0:	4807bd08 	.word	0x4807bd08
   19af4:	4807bd08 	.word	0x4807bd08
   19af8:	bf00bd08 	.word	0xbf00bd08
   19afc:	00025eac 	.word	0x00025eac
   19b00:	00025f9c 	.word	0x00025f9c
   19b04:	00025f4c 	.word	0x00025f4c
   19b08:	00025efc 	.word	0x00025efc
   19b0c:	00025f24 	.word	0x00025f24
   19b10:	00025e84 	.word	0x00025e84
   19b14:	00025f74 	.word	0x00025f74

00019b18 <bsd_platform_fd_method_table_get>:
   19b18:	4605b538 	.word	0x4605b538
   19b1c:	fe1af7fc 	.word	0xfe1af7fc
   19b20:	b9504604 	.word	0xb9504604
   19b24:	43ab4b2a 	.word	0x43ab4b2a
   19b28:	4b2ad032 	.word	0x4b2ad032
   19b2c:	d04343ab 	.word	0xd04343ab
   19b30:	43ab4b29 	.word	0x43ab4b29
   19b34:	4829d146 	.word	0x4829d146
   19b38:	68c3bd38 	.word	0x68c3bd38
   19b3c:	2b056942 	.word	0x2b056942
   19b40:	d911d034 	.word	0xd911d034
   19b44:	d0132b0a 	.word	0xd0132b0a
   19b48:	d12a2b66 	.word	0xd12a2b66
   19b4c:	2302f240 	.word	0x2302f240
   19b50:	d031429a 	.word	0xd031429a
   19b54:	2305f240 	.word	0x2305f240
   19b58:	d031429a 	.word	0xd031429a
   19b5c:	2301f240 	.word	0x2301f240
   19b60:	d11e429a 	.word	0xd11e429a
   19b64:	bd38481e 	.word	0xbd38481e
   19b68:	d0132b01 	.word	0xd0132b01
   19b6c:	d1182b02 	.word	0xd1182b02
   19b70:	7282f5a2 	.word	0x7282f5a2
   19b74:	d8212a0a 	.word	0xd8212a0a
   19b78:	f2402301 	.word	0xf2402301
   19b7c:	48194103 	.word	0x48194103
   19b80:	f202fa03 	.word	0xf202fa03
   19b84:	f100420a 	.word	0xf100420a
   19b88:	bf180428 	.word	0xbf180428
   19b8c:	bd384620 	.word	0xbd384620
   19b90:	bd384815 	.word	0xbd384815
   19b94:	2303f240 	.word	0x2303f240
   19b98:	d0f9429a 	.word	0xd0f9429a
   19b9c:	7f01f5b2 	.word	0x7f01f5b2
   19ba0:	2016d0c9 	.word	0x2016d0c9
   19ba4:	fadcf7f7 	.word	0xfadcf7f7
   19ba8:	bd382000 	.word	0xbd382000
   19bac:	480f6903 	.word	0x480f6903
   19bb0:	bf182b03 	.word	0xbf182b03
   19bb4:	bd382000 	.word	0xbd382000
   19bb8:	bd38480d 	.word	0xbd38480d
   19bbc:	bd384809 	.word	0xbd384809
   19bc0:	bd38480c 	.word	0xbd38480c
   19bc4:	f7f72009 	.word	0xf7f72009
   19bc8:	4620facb 	.word	0x4620facb
   19bcc:	bf00bd38 	.word	0xbf00bd38
   19bd0:	49765432 	.word	0x49765432
   19bd4:	789a0000 	.word	0x789a0000
   19bd8:	49765443 	.word	0x49765443
   19bdc:	00025f4c 	.word	0x00025f4c
   19be0:	00025e84 	.word	0x00025e84
   19be4:	00025eac 	.word	0x00025eac
   19be8:	00025efc 	.word	0x00025efc
   19bec:	00025f9c 	.word	0x00025f9c
   19bf0:	00025f24 	.word	0x00025f24
   19bf4:	00025f74 	.word	0x00025f74

00019bf8 <nrf_inbuilt_key_init>:
   19bf8:	b086b570 	.word	0xb086b570
   19bfc:	a802491d 	.word	0xa802491d
   19c00:	fea4f003 	.word	0xfea4f003
   19c04:	4601bb00 	.word	0x4601bb00
   19c08:	f2404604 	.word	0xf2404604
   19c0c:	20662201 	.word	0x20662201
   19c10:	f8fcf7f8 	.word	0xf8fcf7f8
   19c14:	28004e18 	.word	0x28004e18
   19c18:	60304605 	.word	0x60304605
   19c1c:	4817db10 	.word	0x4817db10
   19c20:	f866f7f4 	.word	0xf866f7f4
   19c24:	46024623 	.word	0x46024623
   19c28:	46284914 	.word	0x46284914
   19c2c:	94009401 	.word	0x94009401
   19c30:	f896f7f8 	.word	0xf896f7f8
   19c34:	48114605 	.word	0x48114605
   19c38:	f85af7f4 	.word	0xf85af7f4
   19c3c:	d00742a8 	.word	0xd00742a8
   19c40:	46202405 	.word	0x46202405
   19c44:	bd70b006 	.word	0xbd70b006
   19c48:	46202469 	.word	0x46202469
   19c4c:	bd70b006 	.word	0xbd70b006
   19c50:	e9cd6830 	.word	0xe9cd6830
   19c54:	a9034400 	.word	0xa9034400
   19c58:	220a4623 	.word	0x220a4623
   19c5c:	f968f7f8 	.word	0xf968f7f8
   19c60:	dded2801 	.word	0xdded2801
   19c64:	2202a803 	.word	0x2202a803
   19c68:	f00a4905 	.word	0xf00a4905
   19c6c:	2800ff5f 	.word	0x2800ff5f
   19c70:	e7e5d0e7 	.word	0xe7e5d0e7
   19c74:	20024954 	.word	0x20024954
   19c78:	20024950 	.word	0x20024950
   19c7c:	00025ff4 	.word	0x00025ff4
   19c80:	00025bd4 	.word	0x00025bd4

00019c84 <symbol_0005436>:
   19c84:	460a4b02 	.word	0x460a4b02
   19c88:	2100681b 	.word	0x2100681b
   19c8c:	bf004718 	.word	0xbf004718
   19c90:	20024968 	.word	0x20024968

00019c94 <mpi_mul_hlp>:
   19c94:	e92d280f 	.word	0xe92d280f
   19c98:	46864ff0 	.word	0x46864ff0
   19c9c:	82e0f240 	.word	0x82e0f240
   19ca0:	0800f04f 	.word	0x0800f04f
   19ca4:	f1014684 	.word	0xf1014684
   19ca8:	f1020440 	.word	0xf1020440
   19cac:	f8540040 	.word	0xf8540040
   19cb0:	f8506c40 	.word	0xf8506c40
   19cb4:	fba35c40 	.word	0xfba35c40
   19cb8:	eb186706 	.word	0xeb186706
   19cbc:	bf2c0806 	.word	0xbf2c0806
   19cc0:	0901f04f 	.word	0x0901f04f
   19cc4:	0900f04f 	.word	0x0900f04f
   19cc8:	0508eb15 	.word	0x0508eb15
   19ccc:	f04f444f 	.word	0xf04f444f
   19cd0:	bf280900 	.word	0xbf280900
   19cd4:	0901f04f 	.word	0x0901f04f
   19cd8:	5c40f840 	.word	0x5c40f840
   19cdc:	6c3cf854 	.word	0x6c3cf854
   19ce0:	fba344b9 	.word	0xfba344b9
   19ce4:	eb19ab06 	.word	0xeb19ab06
   19ce8:	bf2c090a 	.word	0xbf2c090a
   19cec:	0801f04f 	.word	0x0801f04f
   19cf0:	0800f04f 	.word	0x0800f04f
   19cf4:	6c3cf850 	.word	0x6c3cf850
   19cf8:	050beb08 	.word	0x050beb08
   19cfc:	0609eb16 	.word	0x0609eb16
   19d00:	0800f04f 	.word	0x0800f04f
   19d04:	f04fbf28 	.word	0xf04fbf28
   19d08:	f8400801 	.word	0xf8400801
   19d0c:	f8546c3c 	.word	0xf8546c3c
   19d10:	44a86c38 	.word	0x44a86c38
   19d14:	6706fba3 	.word	0x6706fba3
   19d18:	0806eb18 	.word	0x0806eb18
   19d1c:	f04fbf2c 	.word	0xf04fbf2c
   19d20:	f04f0901 	.word	0xf04f0901
   19d24:	f8500900 	.word	0xf8500900
   19d28:	444f5c38 	.word	0x444f5c38
   19d2c:	0508eb15 	.word	0x0508eb15
   19d30:	0900f04f 	.word	0x0900f04f
   19d34:	f04fbf28 	.word	0xf04fbf28
   19d38:	f8400901 	.word	0xf8400901
   19d3c:	f8545c38 	.word	0xf8545c38
   19d40:	44b96c34 	.word	0x44b96c34
   19d44:	ab06fba3 	.word	0xab06fba3
   19d48:	090aeb19 	.word	0x090aeb19
   19d4c:	f04fbf2c 	.word	0xf04fbf2c
   19d50:	f04f0801 	.word	0xf04f0801
   19d54:	f8500800 	.word	0xf8500800
   19d58:	eb086c34 	.word	0xeb086c34
   19d5c:	eb16050b 	.word	0xeb16050b
   19d60:	f04f0609 	.word	0xf04f0609
   19d64:	bf280800 	.word	0xbf280800
   19d68:	0801f04f 	.word	0x0801f04f
   19d6c:	6c34f840 	.word	0x6c34f840
   19d70:	6c30f854 	.word	0x6c30f854
   19d74:	fba344a8 	.word	0xfba344a8
   19d78:	eb186706 	.word	0xeb186706
   19d7c:	bf2c0806 	.word	0xbf2c0806
   19d80:	0901f04f 	.word	0x0901f04f
   19d84:	0900f04f 	.word	0x0900f04f
   19d88:	5c30f850 	.word	0x5c30f850
   19d8c:	eb15444f 	.word	0xeb15444f
   19d90:	f04f0508 	.word	0xf04f0508
   19d94:	bf280900 	.word	0xbf280900
   19d98:	0901f04f 	.word	0x0901f04f
   19d9c:	5c30f840 	.word	0x5c30f840
   19da0:	6c2cf854 	.word	0x6c2cf854
   19da4:	fba344b9 	.word	0xfba344b9
   19da8:	eb19ab06 	.word	0xeb19ab06
   19dac:	bf2c090a 	.word	0xbf2c090a
   19db0:	0801f04f 	.word	0x0801f04f
   19db4:	0800f04f 	.word	0x0800f04f
   19db8:	6c2cf850 	.word	0x6c2cf850
   19dbc:	050beb08 	.word	0x050beb08
   19dc0:	0609eb16 	.word	0x0609eb16
   19dc4:	0800f04f 	.word	0x0800f04f
   19dc8:	f04fbf28 	.word	0xf04fbf28
   19dcc:	f8400801 	.word	0xf8400801
   19dd0:	f8546c2c 	.word	0xf8546c2c
   19dd4:	44a86c28 	.word	0x44a86c28
   19dd8:	6706fba3 	.word	0x6706fba3
   19ddc:	0806eb18 	.word	0x0806eb18
   19de0:	f04fbf2c 	.word	0xf04fbf2c
   19de4:	f04f0901 	.word	0xf04f0901
   19de8:	f8500900 	.word	0xf8500900
   19dec:	444f5c28 	.word	0x444f5c28
   19df0:	0508eb15 	.word	0x0508eb15
   19df4:	0900f04f 	.word	0x0900f04f
   19df8:	f04fbf28 	.word	0xf04fbf28
   19dfc:	f8400901 	.word	0xf8400901
   19e00:	f8545c28 	.word	0xf8545c28
   19e04:	44b96c24 	.word	0x44b96c24
   19e08:	ab06fba3 	.word	0xab06fba3
   19e0c:	090aeb19 	.word	0x090aeb19
   19e10:	f04fbf2c 	.word	0xf04fbf2c
   19e14:	f04f0801 	.word	0xf04f0801
   19e18:	f8500800 	.word	0xf8500800
   19e1c:	eb086c24 	.word	0xeb086c24
   19e20:	eb16050b 	.word	0xeb16050b
   19e24:	f04f0609 	.word	0xf04f0609
   19e28:	bf280800 	.word	0xbf280800
   19e2c:	0801f04f 	.word	0x0801f04f
   19e30:	6c24f840 	.word	0x6c24f840
   19e34:	6c20f854 	.word	0x6c20f854
   19e38:	fba344a8 	.word	0xfba344a8
   19e3c:	eb186706 	.word	0xeb186706
   19e40:	bf2c0806 	.word	0xbf2c0806
   19e44:	0901f04f 	.word	0x0901f04f
   19e48:	0900f04f 	.word	0x0900f04f
   19e4c:	5c20f850 	.word	0x5c20f850
   19e50:	eb15444f 	.word	0xeb15444f
   19e54:	f04f0508 	.word	0xf04f0508
   19e58:	bf280900 	.word	0xbf280900
   19e5c:	0901f04f 	.word	0x0901f04f
   19e60:	5c20f840 	.word	0x5c20f840
   19e64:	6c1cf854 	.word	0x6c1cf854
   19e68:	fba344b9 	.word	0xfba344b9
   19e6c:	eb19ab06 	.word	0xeb19ab06
   19e70:	bf2c090a 	.word	0xbf2c090a
   19e74:	0801f04f 	.word	0x0801f04f
   19e78:	0800f04f 	.word	0x0800f04f
   19e7c:	6c1cf850 	.word	0x6c1cf850
   19e80:	050beb08 	.word	0x050beb08
   19e84:	0609eb16 	.word	0x0609eb16
   19e88:	0800f04f 	.word	0x0800f04f
   19e8c:	f04fbf28 	.word	0xf04fbf28
   19e90:	f8400801 	.word	0xf8400801
   19e94:	f8546c1c 	.word	0xf8546c1c
   19e98:	44a86c18 	.word	0x44a86c18
   19e9c:	6706fba3 	.word	0x6706fba3
   19ea0:	0806eb18 	.word	0x0806eb18
   19ea4:	f04fbf2c 	.word	0xf04fbf2c
   19ea8:	f04f0901 	.word	0xf04f0901
   19eac:	f8500900 	.word	0xf8500900
   19eb0:	444f5c18 	.word	0x444f5c18
   19eb4:	0508eb15 	.word	0x0508eb15
   19eb8:	0900f04f 	.word	0x0900f04f
   19ebc:	f04fbf28 	.word	0xf04fbf28
   19ec0:	f8400901 	.word	0xf8400901
   19ec4:	f8545c18 	.word	0xf8545c18
   19ec8:	44b96c14 	.word	0x44b96c14
   19ecc:	ab06fba3 	.word	0xab06fba3
   19ed0:	090aeb19 	.word	0x090aeb19
   19ed4:	f04fbf2c 	.word	0xf04fbf2c
   19ed8:	f04f0801 	.word	0xf04f0801
   19edc:	f8500800 	.word	0xf8500800
   19ee0:	eb086c14 	.word	0xeb086c14
   19ee4:	eb16050b 	.word	0xeb16050b
   19ee8:	f04f0609 	.word	0xf04f0609
   19eec:	bf280800 	.word	0xbf280800
   19ef0:	0801f04f 	.word	0x0801f04f
   19ef4:	6c14f840 	.word	0x6c14f840
   19ef8:	6c10f854 	.word	0x6c10f854
   19efc:	fba344a8 	.word	0xfba344a8
   19f00:	eb186706 	.word	0xeb186706
   19f04:	bf2c0806 	.word	0xbf2c0806
   19f08:	0901f04f 	.word	0x0901f04f
   19f0c:	0900f04f 	.word	0x0900f04f
   19f10:	5c10f850 	.word	0x5c10f850
   19f14:	eb15444f 	.word	0xeb15444f
   19f18:	f04f0508 	.word	0xf04f0508
   19f1c:	bf280900 	.word	0xbf280900
   19f20:	0901f04f 	.word	0x0901f04f
   19f24:	5c10f840 	.word	0x5c10f840
   19f28:	6c0cf854 	.word	0x6c0cf854
   19f2c:	fba344b9 	.word	0xfba344b9
   19f30:	eb19ab06 	.word	0xeb19ab06
   19f34:	bf2c090a 	.word	0xbf2c090a
   19f38:	0801f04f 	.word	0x0801f04f
   19f3c:	0800f04f 	.word	0x0800f04f
   19f40:	6c0cf850 	.word	0x6c0cf850
   19f44:	050beb08 	.word	0x050beb08
   19f48:	0609eb16 	.word	0x0609eb16
   19f4c:	0800f04f 	.word	0x0800f04f
   19f50:	f04fbf28 	.word	0xf04fbf28
   19f54:	f8400801 	.word	0xf8400801
   19f58:	f8546c0c 	.word	0xf8546c0c
   19f5c:	44a86c08 	.word	0x44a86c08
   19f60:	6706fba3 	.word	0x6706fba3
   19f64:	0806eb18 	.word	0x0806eb18
   19f68:	f04fbf2c 	.word	0xf04fbf2c
   19f6c:	f04f0901 	.word	0xf04f0901
   19f70:	f8500900 	.word	0xf8500900
   19f74:	444f5c08 	.word	0x444f5c08
   19f78:	0508eb15 	.word	0x0508eb15
   19f7c:	0900f04f 	.word	0x0900f04f
   19f80:	f04fbf28 	.word	0xf04fbf28
   19f84:	f8400901 	.word	0xf8400901
   19f88:	f8545c08 	.word	0xf8545c08
   19f8c:	44b96c04 	.word	0x44b96c04
   19f90:	ab06fba3 	.word	0xab06fba3
   19f94:	090aeb19 	.word	0x090aeb19
   19f98:	f04fbf2c 	.word	0xf04fbf2c
   19f9c:	f04f0801 	.word	0xf04f0801
   19fa0:	f8500800 	.word	0xf8500800
   19fa4:	eb086c04 	.word	0xeb086c04
   19fa8:	eb16050b 	.word	0xeb16050b
   19fac:	f04f0609 	.word	0xf04f0609
   19fb0:	bf280800 	.word	0xbf280800
   19fb4:	0801f04f 	.word	0x0801f04f
   19fb8:	0c10f1ac 	.word	0x0c10f1ac
   19fbc:	0f0ff1bc 	.word	0x0f0ff1bc
   19fc0:	6c04f840 	.word	0x6c04f840
   19fc4:	f10444a8 	.word	0xf10444a8
   19fc8:	f1000440 	.word	0xf1000440
   19fcc:	f63f0040 	.word	0xf63f0040
   19fd0:	f1aeae6e 	.word	0xf1aeae6e
   19fd4:	09000010 	.word	0x09000010
   19fd8:	01803001 	.word	0x01803001
   19fdc:	44024401 	.word	0x44024401
   19fe0:	000ff00e 	.word	0x000ff00e
   19fe4:	68172807 	.word	0x68172807
   19fe8:	8092f240 	.word	0x8092f240
   19fec:	6856680c 	.word	0x6856680c
   19ff0:	9a04fba3 	.word	0x9a04fba3
   19ff4:	0809eb18 	.word	0x0809eb18
   19ff8:	f04fbf2c 	.word	0xf04fbf2c
   19ffc:	f04f0c01 	.word	0xf04f0c01
   1a000:	eb170c00 	.word	0xeb170c00
   1a004:	bf2c0708 	.word	0xbf2c0708
   1a008:	24002401 	.word	0x24002401
   1a00c:	684f6017 	.word	0x684f6017
   1a010:	050ceb0a 	.word	0x050ceb0a
   1a014:	8907fba3 	.word	0x8907fba3
   1a018:	eb14442c 	.word	0xeb14442c
   1a01c:	bf2c0408 	.word	0xbf2c0408
   1a020:	25002501 	.word	0x25002501
   1a024:	eb0519a6 	.word	0xeb0519a6
   1a028:	f04f0709 	.word	0xf04f0709
   1a02c:	bf280500 	.word	0xbf280500
   1a030:	60562501 	.word	0x60562501
   1a034:	443d688e 	.word	0x443d688e
   1a038:	7806fba3 	.word	0x7806fba3
   1a03c:	bf2c19ed 	.word	0xbf2c19ed
   1a040:	24002401 	.word	0x24002401
   1a044:	eb086896 	.word	0xeb086896
   1a048:	19ad0704 	.word	0x19ad0704
   1a04c:	0400f04f 	.word	0x0400f04f
   1a050:	2401bf28 	.word	0x2401bf28
   1a054:	68ce6095 	.word	0x68ce6095
   1a058:	fba3443c 	.word	0xfba3443c
   1a05c:	19e47806 	.word	0x19e47806
   1a060:	2501bf2c 	.word	0x2501bf2c
   1a064:	68d62500 	.word	0x68d62500
   1a068:	0705eb08 	.word	0x0705eb08
   1a06c:	f04f19a4 	.word	0xf04f19a4
   1a070:	bf280500 	.word	0xbf280500
   1a074:	60d42501 	.word	0x60d42501
   1a078:	443d690e 	.word	0x443d690e
   1a07c:	7806fba3 	.word	0x7806fba3
   1a080:	bf2c19ed 	.word	0xbf2c19ed
   1a084:	24002401 	.word	0x24002401
   1a088:	eb086916 	.word	0xeb086916
   1a08c:	19ad0704 	.word	0x19ad0704
   1a090:	0400f04f 	.word	0x0400f04f
   1a094:	2401bf28 	.word	0x2401bf28
   1a098:	694e6115 	.word	0x694e6115
   1a09c:	fba3443c 	.word	0xfba3443c
   1a0a0:	19e47806 	.word	0x19e47806
   1a0a4:	2501bf2c 	.word	0x2501bf2c
   1a0a8:	69562500 	.word	0x69562500
   1a0ac:	0705eb08 	.word	0x0705eb08
   1a0b0:	f04f19a4 	.word	0xf04f19a4
   1a0b4:	bf280500 	.word	0xbf280500
   1a0b8:	61542501 	.word	0x61542501
   1a0bc:	443d698e 	.word	0x443d698e
   1a0c0:	7806fba3 	.word	0x7806fba3
   1a0c4:	bf2c19ed 	.word	0xbf2c19ed
   1a0c8:	24002401 	.word	0x24002401
   1a0cc:	eb086996 	.word	0xeb086996
   1a0d0:	19ad0704 	.word	0x19ad0704
   1a0d4:	0400f04f 	.word	0x0400f04f
   1a0d8:	2401bf28 	.word	0x2401bf28
   1a0dc:	69ce6195 	.word	0x69ce6195
   1a0e0:	fba3443c 	.word	0xfba3443c
   1a0e4:	eb149a06 	.word	0xeb149a06
   1a0e8:	bf2c0409 	.word	0xbf2c0409
   1a0ec:	0801f04f 	.word	0x0801f04f
   1a0f0:	0800f04f 	.word	0x0800f04f
   1a0f4:	eb0869d6 	.word	0xeb0869d6
   1a0f8:	19a4050a 	.word	0x19a4050a
   1a0fc:	0800f04f 	.word	0x0800f04f
   1a100:	f04fbf28 	.word	0xf04fbf28
   1a104:	61d40801 	.word	0x61d40801
   1a108:	44a83120 	.word	0x44a83120
   1a10c:	32203808 	.word	0x32203808
   1a110:	f0002800 	.word	0xf0002800
   1a114:	680c8097 	.word	0x680c8097
   1a118:	fba36816 	.word	0xfba36816
   1a11c:	eb199a04 	.word	0xeb199a04
   1a120:	bf2c0808 	.word	0xbf2c0808
   1a124:	24002401 	.word	0x24002401
   1a128:	0608eb16 	.word	0x0608eb16
   1a12c:	0500f04f 	.word	0x0500f04f
   1a130:	2501bf28 	.word	0x2501bf28
   1a134:	28014454 	.word	0x28014454
   1a138:	0804eb05 	.word	0x0804eb05
   1a13c:	d07f6016 	.word	0xd07f6016
   1a140:	6856684c 	.word	0x6856684c
   1a144:	9a04fba3 	.word	0x9a04fba3
   1a148:	0808eb19 	.word	0x0808eb19
   1a14c:	2401bf2c 	.word	0x2401bf2c
   1a150:	eb162400 	.word	0xeb162400
   1a154:	f04f0608 	.word	0xf04f0608
   1a158:	bf280500 	.word	0xbf280500
   1a15c:	44542501 	.word	0x44542501
   1a160:	eb052802 	.word	0xeb052802
   1a164:	60560804 	.word	0x60560804
   1a168:	688cd06a 	.word	0x688cd06a
   1a16c:	fba36896 	.word	0xfba36896
   1a170:	eb199a04 	.word	0xeb199a04
   1a174:	bf2c0808 	.word	0xbf2c0808
   1a178:	24002401 	.word	0x24002401
   1a17c:	0608eb16 	.word	0x0608eb16
   1a180:	0500f04f 	.word	0x0500f04f
   1a184:	2501bf28 	.word	0x2501bf28
   1a188:	28034454 	.word	0x28034454
   1a18c:	0804eb05 	.word	0x0804eb05
   1a190:	d0556096 	.word	0xd0556096
   1a194:	68d668cc 	.word	0x68d668cc
   1a198:	9a04fba3 	.word	0x9a04fba3
   1a19c:	0808eb19 	.word	0x0808eb19
   1a1a0:	2401bf2c 	.word	0x2401bf2c
   1a1a4:	eb162400 	.word	0xeb162400
   1a1a8:	f04f0608 	.word	0xf04f0608
   1a1ac:	bf280500 	.word	0xbf280500
   1a1b0:	44542501 	.word	0x44542501
   1a1b4:	eb052804 	.word	0xeb052804
   1a1b8:	60d60804 	.word	0x60d60804
   1a1bc:	690cd040 	.word	0x690cd040
   1a1c0:	fba36916 	.word	0xfba36916
   1a1c4:	eb199a04 	.word	0xeb199a04
   1a1c8:	bf2c0408 	.word	0xbf2c0408
   1a1cc:	0801f04f 	.word	0x0801f04f
   1a1d0:	0800f04f 	.word	0x0800f04f
   1a1d4:	eb0a19a6 	.word	0xeb0a19a6
   1a1d8:	f04f0508 	.word	0xf04f0508
   1a1dc:	bf280800 	.word	0xbf280800
   1a1e0:	0801f04f 	.word	0x0801f04f
   1a1e4:	44a82805 	.word	0x44a82805
   1a1e8:	d0296116 	.word	0xd0296116
   1a1ec:	6956694c 	.word	0x6956694c
   1a1f0:	9a04fba3 	.word	0x9a04fba3
   1a1f4:	0409eb18 	.word	0x0409eb18
   1a1f8:	f04fbf2c 	.word	0xf04fbf2c
   1a1fc:	f04f0801 	.word	0xf04f0801
   1a200:	19a60800 	.word	0x19a60800
   1a204:	0508eb0a 	.word	0x0508eb0a
   1a208:	0800f04f 	.word	0x0800f04f
   1a20c:	f04fbf28 	.word	0xf04fbf28
   1a210:	28060801 	.word	0x28060801
   1a214:	615644a8 	.word	0x615644a8
   1a218:	698cd012 	.word	0x698cd012
   1a21c:	fba36991 	.word	0xfba36991
   1a220:	eb144504 	.word	0xeb144504
   1a224:	bf2c0808 	.word	0xbf2c0808
   1a228:	23002301 	.word	0x23002301
   1a22c:	0108eb11 	.word	0x0108eb11
   1a230:	0400f04f 	.word	0x0400f04f
   1a234:	2401bf28 	.word	0x2401bf28
   1a238:	eb04442b 	.word	0xeb04442b
   1a23c:	61910803 	.word	0x61910803
   1a240:	0280eb02 	.word	0x0280eb02
   1a244:	23006815 	.word	0x23006815
   1a248:	0508eb15 	.word	0x0508eb15
   1a24c:	2301bf28 	.word	0x2301bf28
   1a250:	5b04f842 	.word	0x5b04f842
   1a254:	0801f04f 	.word	0x0801f04f
   1a258:	d1f32b00 	.word	0xd1f32b00
   1a25c:	8ff0e8bd 	.word	0x8ff0e8bd
   1a260:	0800f04f 	.word	0x0800f04f
   1a264:	bf00e6be 	.word	0xbf00e6be

0001a268 <symbol_0002616>:
   1a268:	2b006843 	.word	0x2b006843
   1a26c:	b430d033 	.word	0xb430d033
   1a270:	4280f103 	.word	0x4280f103
   1a274:	3a016885 	.word	0x3a016885
   1a278:	4022f855 	.word	0x4022f855
   1a27c:	0282eb05 	.word	0x0282eb05
   1a280:	e009b11c 	.word	0xe009b11c
   1a284:	4d04f852 	.word	0x4d04f852
   1a288:	3b01b934 	.word	0x3b01b934
   1a28c:	688bd1fa 	.word	0x688bd1fa
   1a290:	b9d06818 	.word	0xb9d06818
   1a294:	4770bc30 	.word	0x4770bc30
   1a298:	6812688a 	.word	0x6812688a
   1a29c:	2b01b192 	.word	0x2b01b192
   1a2a0:	6800d810 	.word	0x6800d810
   1a2a4:	2800680b 	.word	0x2800680b
   1a2a8:	2b00dd01 	.word	0x2b00dd01
   1a2ac:	2b00db11 	.word	0x2b00db11
   1a2b0:	2800dd01 	.word	0x2800dd01
   1a2b4:	682bdb16 	.word	0x682bdb16
   1a2b8:	d8eb4293 	.word	0xd8eb4293
   1a2bc:	bc30d306 	.word	0xbc30d306
   1a2c0:	47702000 	.word	0x47702000
   1a2c4:	bc306800 	.word	0xbc306800
   1a2c8:	68084770 	.word	0x68084770
   1a2cc:	bc304240 	.word	0xbc304240
   1a2d0:	20014770 	.word	0x20014770
   1a2d4:	688be7de 	.word	0x688be7de
   1a2d8:	b9006818 	.word	0xb9006818
   1a2dc:	68084770 	.word	0x68084770
   1a2e0:	e7fb4240 	.word	0xe7fb4240
   1a2e4:	30fff04f 	.word	0x30fff04f
   1a2e8:	bf00e7d4 	.word	0xbf00e7d4

0001a2ec <symbol_00038d0>:
   1a2ec:	2300b120 	.word	0x2300b120
   1a2f0:	e9c02201 	.word	0xe9c02201
   1a2f4:	60832300 	.word	0x60832300
   1a2f8:	bf004770 	.word	0xbf004770

0001a2fc <symbol_000fb6e>:
   1a2fc:	b510b1b0 	.word	0xb510b1b0
   1a300:	68804604 	.word	0x68804604
   1a304:	6862b160 	.word	0x6862b160
   1a308:	b13a1e53 	.word	0xb13a1e53
   1a30c:	3b012200 	.word	0x3b012200
   1a310:	60021c59 	.word	0x60021c59
   1a314:	0004f100 	.word	0x0004f100
   1a318:	68a0d1f9 	.word	0x68a0d1f9
   1a31c:	fc4ef003 	.word	0xfc4ef003
   1a320:	22012300 	.word	0x22012300
   1a324:	2300e9c4 	.word	0x2300e9c4
   1a328:	bd1060a3 	.word	0xbd1060a3
   1a32c:	bf004770 	.word	0xbf004770

0001a330 <symbol_0006423>:
   1a330:	6842b570 	.word	0x6842b570
   1a334:	428a4605 	.word	0x428a4605
   1a338:	d807460c 	.word	0xd807460c
   1a33c:	7310f242 	.word	0x7310f242
   1a340:	d8514299 	.word	0xd8514299
   1a344:	d335428a 	.word	0xd335428a
   1a348:	bd702000 	.word	0xbd702000
   1a34c:	d0101e51 	.word	0xd0101e51
   1a350:	f8536883 	.word	0xf8536883
   1a354:	28000021 	.word	0x28000021
   1a358:	f102d149 	.word	0xf102d149
   1a35c:	3a014280 	.word	0x3a014280
   1a360:	0382eb03 	.word	0x0382eb03
   1a364:	f853e003 	.word	0xf853e003
   1a368:	b9180d04 	.word	0xb9180d04
   1a36c:	1e4a4611 	.word	0x1e4a4611
   1a370:	2101d1f9 	.word	0x2101d1f9
   1a374:	bf38428c 	.word	0xbf38428c
   1a378:	2104460c 	.word	0x2104460c
   1a37c:	f0034620 	.word	0xf0034620
   1a380:	4606fc09 	.word	0x4606fc09
   1a384:	68a9b380 	.word	0x68a9b380
   1a388:	00a2b181 	.word	0x00a2b181
   1a38c:	fa79f00a 	.word	0xfa79f00a
   1a390:	2001e9d5 	.word	0x2001e9d5
   1a394:	b13a1e53 	.word	0xb13a1e53
   1a398:	3b012200 	.word	0x3b012200
   1a39c:	60021c59 	.word	0x60021c59
   1a3a0:	0004f100 	.word	0x0004f100
   1a3a4:	68a8d1f9 	.word	0x68a8d1f9
   1a3a8:	fc08f003 	.word	0xfc08f003
   1a3ac:	4601e9c5 	.word	0x4601e9c5
   1a3b0:	bd702000 	.word	0xbd702000
   1a3b4:	46202104 	.word	0x46202104
   1a3b8:	fbecf003 	.word	0xfbecf003
   1a3bc:	b1984606 	.word	0xb1984606
   1a3c0:	290068a9 	.word	0x290068a9
   1a3c4:	686ad0f2 	.word	0x686ad0f2
   1a3c8:	f00a0092 	.word	0xf00a0092
   1a3cc:	e9d5fa5a 	.word	0xe9d5fa5a
   1a3d0:	1e532001 	.word	0x1e532001
   1a3d4:	d0e72a00 	.word	0xd0e72a00
   1a3d8:	3b012200 	.word	0x3b012200
   1a3dc:	60021c59 	.word	0x60021c59
   1a3e0:	0004f100 	.word	0x0004f100
   1a3e4:	e7ded1f9 	.word	0xe7ded1f9
   1a3e8:	000ff06f 	.word	0x000ff06f
   1a3ec:	4611bd70 	.word	0x4611bd70
   1a3f0:	bf00e7c0 	.word	0xbf00e7c0

0001a3f4 <symbol_00084df>:
   1a3f4:	d0524288 	.word	0xd0524288
   1a3f8:	688ab5f8 	.word	0x688ab5f8
   1a3fc:	4605460e 	.word	0x4605460e
   1a400:	d04e2a00 	.word	0xd04e2a00
   1a404:	1e4b6849 	.word	0x1e4b6849
   1a408:	f852d00e 	.word	0xf852d00e
   1a40c:	28000023 	.word	0x28000023
   1a410:	f101d13b 	.word	0xf101d13b
   1a414:	39014180 	.word	0x39014180
   1a418:	0281eb02 	.word	0x0281eb02
   1a41c:	f852e002 	.word	0xf852e002
   1a420:	bb900d04 	.word	0xbb900d04
   1a424:	d1fa3b01 	.word	0xd1fa3b01
   1a428:	68332401 	.word	0x68332401
   1a42c:	686a602b 	.word	0x686a602b
   1a430:	d30c42a2 	.word	0xd30c42a2
   1a434:	009268af 	.word	0x009268af
   1a438:	46382100 	.word	0x46382100
   1a43c:	fa2cf00a 	.word	0xfa2cf00a
   1a440:	68b100a2 	.word	0x68b100a2
   1a444:	f00a68a8 	.word	0xf00a68a8
   1a448:	2000fa1c 	.word	0x2000fa1c
   1a44c:	2104bdf8 	.word	0x2104bdf8
   1a450:	f0034620 	.word	0xf0034620
   1a454:	4607fb9f 	.word	0x4607fb9f
   1a458:	68a9b1f0 	.word	0x68a9b1f0
   1a45c:	686ab189 	.word	0x686ab189
   1a460:	f00a0092 	.word	0xf00a0092
   1a464:	e9d5fa0e 	.word	0xe9d5fa0e
   1a468:	1e532001 	.word	0x1e532001
   1a46c:	2200b13a 	.word	0x2200b13a
   1a470:	1c593b01 	.word	0x1c593b01
   1a474:	f1006002 	.word	0xf1006002
   1a478:	d1f90004 	.word	0xd1f90004
   1a47c:	f00368a8 	.word	0xf00368a8
   1a480:	4622fb9d 	.word	0x4622fb9d
   1a484:	4701e9c5 	.word	0x4701e9c5
   1a488:	f242e7d5 	.word	0xf242e7d5
   1a48c:	68317210 	.word	0x68317210
   1a490:	42941c5c 	.word	0x42941c5c
   1a494:	d9ca6029 	.word	0xd9ca6029
   1a498:	000ff06f 	.word	0x000ff06f
   1a49c:	2000bdf8 	.word	0x2000bdf8
   1a4a0:	28004770 	.word	0x28004770
   1a4a4:	6880d0d1 	.word	0x6880d0d1
   1a4a8:	6869b158 	.word	0x6869b158
   1a4ac:	b1311e4b 	.word	0xb1311e4b
   1a4b0:	1c5c3b01 	.word	0x1c5c3b01
   1a4b4:	f1006002 	.word	0xf1006002
   1a4b8:	d1f90004 	.word	0xd1f90004
   1a4bc:	f00368a8 	.word	0xf00368a8
   1a4c0:	2000fb7d 	.word	0x2000fb7d
   1a4c4:	e9c52301 	.word	0xe9c52301
   1a4c8:	60a83000 	.word	0x60a83000
   1a4cc:	bf00bdf8 	.word	0xbf00bdf8

0001a4d0 <symbol_000fa6b>:
   1a4d0:	684bb5f0 	.word	0x684bb5f0
   1a4d4:	b085460d 	.word	0xb085460d
   1a4d8:	46064614 	.word	0x46064614
   1a4dc:	b17b6851 	.word	0xb17b6851
   1a4e0:	f10368a8 	.word	0xf10368a8
   1a4e4:	3a014280 	.word	0x3a014280
   1a4e8:	7022f850 	.word	0x7022f850
   1a4ec:	0082eb00 	.word	0x0082eb00
   1a4f0:	e04fb127 	.word	0xe04fb127
   1a4f4:	2d04f850 	.word	0x2d04f850
   1a4f8:	d14b2a00 	.word	0xd14b2a00
   1a4fc:	d1f93b01 	.word	0xd1f93b01
   1a500:	f101b189 	.word	0xf101b189
   1a504:	68a74080 	.word	0x68a74080
   1a508:	f8573801 	.word	0xf8573801
   1a50c:	2a002020 	.word	0x2a002020
   1a510:	8099f040 	.word	0x8099f040
   1a514:	0080eb07 	.word	0x0080eb07
   1a518:	f850e003 	.word	0xf850e003
   1a51c:	2a002d04 	.word	0x2a002d04
   1a520:	3901d142 	.word	0x3901d142
   1a524:	2300d1f9 	.word	0x2300d1f9
   1a528:	42b42201 	.word	0x42b42201
   1a52c:	2301e9cd 	.word	0x2301e9cd
   1a530:	d07f9303 	.word	0xd07f9303
   1a534:	d00542b5 	.word	0xd00542b5
   1a538:	46304629 	.word	0x46304629
   1a53c:	ff5af7ff 	.word	0xff5af7ff
   1a540:	b9a84607 	.word	0xb9a84607
   1a544:	60332301 	.word	0x60332301
   1a548:	b1806860 	.word	0xb1806860
   1a54c:	c008f8d4 	.word	0xc008f8d4
   1a550:	4380f100 	.word	0x4380f100
   1a554:	f85c3b01 	.word	0xf85c3b01
   1a558:	eb0c2023 	.word	0xeb0c2023
   1a55c:	b1220383 	.word	0xb1220383
   1a560:	f853e042 	.word	0xf853e042
   1a564:	2a002d04 	.word	0x2a002d04
   1a568:	3801d13e 	.word	0x3801d13e
   1a56c:	2700d1f9 	.word	0x2700d1f9
   1a570:	b1609803 	.word	0xb1609803
   1a574:	1e539a02 	.word	0x1e539a02
   1a578:	2200b13a 	.word	0x2200b13a
   1a57c:	1c593b01 	.word	0x1c593b01
   1a580:	f1006002 	.word	0xf1006002
   1a584:	d1f90004 	.word	0xd1f90004
   1a588:	f0039803 	.word	0xf0039803
   1a58c:	4638fb17 	.word	0x4638fb17
   1a590:	bdf0b005 	.word	0xbdf0b005
   1a594:	d0c62900 	.word	0xd0c62900
   1a598:	4080f101 	.word	0x4080f101
   1a59c:	380168a7 	.word	0x380168a7
   1a5a0:	2020f857 	.word	0x2020f857
   1a5a4:	d0b52a00 	.word	0xd0b52a00
   1a5a8:	d8bc428b 	.word	0xd8bc428b
   1a5ac:	2b00d34b 	.word	0x2b00d34b
   1a5b0:	68a8d0b9 	.word	0x68a8d0b9
   1a5b4:	4180f103 	.word	0x4180f103
   1a5b8:	f8503901 	.word	0xf8503901
   1a5bc:	f857c021 	.word	0xf857c021
   1a5c0:	0089e021 	.word	0x0089e021
   1a5c4:	440845e6 	.word	0x440845e6
   1a5c8:	0201eb07 	.word	0x0201eb07
   1a5cc:	d83ad3ab 	.word	0xd83ad3ab
   1a5d0:	e0064601 	.word	0xe0064601
   1a5d4:	7d04f851 	.word	0x7d04f851
   1a5d8:	0d04f852 	.word	0x0d04f852
   1a5dc:	d8a24287 	.word	0xd8a24287
   1a5e0:	3b01d331 	.word	0x3b01d331
   1a5e4:	e79ed1f6 	.word	0xe79ed1f6
   1a5e8:	462b2500 	.word	0x462b2500
   1a5ec:	f85168b1 	.word	0xf85168b1
   1a5f0:	35016b04 	.word	0x35016b04
   1a5f4:	f8411af2 	.word	0xf8411af2
   1a5f8:	f85c2c04 	.word	0xf85c2c04
   1a5fc:	460c7b04 	.word	0x460c7b04
   1a600:	bf2c42ba 	.word	0xbf2c42ba
   1a604:	0e00f04f 	.word	0x0e00f04f
   1a608:	0e01f04f 	.word	0x0e01f04f
   1a60c:	429e1bd2 	.word	0x429e1bd2
   1a610:	4673bf2c 	.word	0x4673bf2c
   1a614:	0301f10e 	.word	0x0301f10e
   1a618:	f8414285 	.word	0xf8414285
   1a61c:	d3e62c04 	.word	0xd3e62c04
   1a620:	e7a4b90b 	.word	0xe7a4b90b
   1a624:	68222301 	.word	0x68222301
   1a628:	429a1ad1 	.word	0x429a1ad1
   1a62c:	1b04f844 	.word	0x1b04f844
   1a630:	e79cd3f8 	.word	0xe79cd3f8
   1a634:	a8014621 	.word	0xa8014621
   1a638:	fedcf7ff 	.word	0xfedcf7ff
   1a63c:	28004607 	.word	0x28004607
   1a640:	ac01d196 	.word	0xac01d196
   1a644:	f06fe776 	.word	0xf06fe776
   1a648:	46380709 	.word	0x46380709
   1a64c:	bdf0b005 	.word	0xbdf0b005

0001a650 <symbol_0006ccd>:
   1a650:	7310f242 	.word	0x7310f242
   1a654:	41f0e92d 	.word	0x41f0e92d
   1a658:	4256684f 	.word	0x4256684f
   1a65c:	429f4316 	.word	0x429f4316
   1a660:	16c0f3c6 	.word	0x16c0f3c6
   1a664:	6842d84f 	.word	0x6842d84f
   1a668:	42974604 	.word	0x42974604
   1a66c:	d82c460d 	.word	0xd82c460d
   1a670:	68236829 	.word	0x68236829
   1a674:	f106fb01 	.word	0xf106fb01
   1a678:	0701f1c6 	.word	0x0701f1c6
   1a67c:	1307fb03 	.word	0x1307fb03
   1a680:	686b6023 	.word	0x686b6023
   1a684:	2300b18b 	.word	0x2300b18b
   1a688:	68aa68a1 	.word	0x68aa68a1
   1a68c:	0023f851 	.word	0x0023f851
   1a690:	2023f852 	.word	0x2023f852
   1a694:	f007fb00 	.word	0xf007fb00
   1a698:	0206fb02 	.word	0x0206fb02
   1a69c:	2023f841 	.word	0x2023f841
   1a6a0:	3301686a 	.word	0x3301686a
   1a6a4:	d8ef429a 	.word	0xd8ef429a
   1a6a8:	42936862 	.word	0x42936862
   1a6ac:	009ad20a 	.word	0x009ad20a
   1a6b0:	330168a0 	.word	0x330168a0
   1a6b4:	fb075881 	.word	0xfb075881
   1a6b8:	5081f101 	.word	0x5081f101
   1a6bc:	32046861 	.word	0x32046861
   1a6c0:	d8f54299 	.word	0xd8f54299
   1a6c4:	e8bd2000 	.word	0xe8bd2000
   1a6c8:	210481f0 	.word	0x210481f0
   1a6cc:	f0034638 	.word	0xf0034638
   1a6d0:	4680fa61 	.word	0x4680fa61
   1a6d4:	68a1b1b8 	.word	0x68a1b1b8
   1a6d8:	6862b189 	.word	0x6862b189
   1a6dc:	f00a0092 	.word	0xf00a0092
   1a6e0:	e9d4f8d0 	.word	0xe9d4f8d0
   1a6e4:	1e532001 	.word	0x1e532001
   1a6e8:	2200b13a 	.word	0x2200b13a
   1a6ec:	1c593b01 	.word	0x1c593b01
   1a6f0:	f1006002 	.word	0xf1006002
   1a6f4:	d1f90004 	.word	0xd1f90004
   1a6f8:	f00368a0 	.word	0xf00368a0
   1a6fc:	463afa5f 	.word	0x463afa5f
   1a700:	7801e9c4 	.word	0x7801e9c4
   1a704:	f06fe7b4 	.word	0xf06fe7b4
   1a708:	e7dc000f 	.word	0xe7dc000f

0001a70c <symbol_000b345>:
   1a70c:	6845b5f8 	.word	0x6845b5f8
   1a710:	460e4604 	.word	0x460e4604
   1a714:	6887b19d 	.word	0x6887b19d
   1a718:	463800aa 	.word	0x463800aa
   1a71c:	f00a2100 	.word	0xf00a2100
   1a720:	2e00f8bb 	.word	0x2e00f8bb
   1a724:	2301bfac 	.word	0x2301bfac
   1a728:	33fff04f 	.word	0x33fff04f
   1a72c:	71e6ea86 	.word	0x71e6ea86
   1a730:	eba168a2 	.word	0xeba168a2
   1a734:	601171e6 	.word	0x601171e6
   1a738:	20006023 	.word	0x20006023
   1a73c:	2104bdf8 	.word	0x2104bdf8
   1a740:	f0032001 	.word	0xf0032001
   1a744:	4607fa27 	.word	0x4607fa27
   1a748:	68a1b1b8 	.word	0x68a1b1b8
   1a74c:	6862b181 	.word	0x6862b181
   1a750:	f00a0092 	.word	0xf00a0092
   1a754:	e9d4f896 	.word	0xe9d4f896
   1a758:	1e532001 	.word	0x1e532001
   1a75c:	3b01b132 	.word	0x3b01b132
   1a760:	60051c5a 	.word	0x60051c5a
   1a764:	0004f100 	.word	0x0004f100
   1a768:	68a0d1f9 	.word	0x68a0d1f9
   1a76c:	fa26f003 	.word	0xfa26f003
   1a770:	22042301 	.word	0x22042301
   1a774:	3701e9c4 	.word	0x3701e9c4
   1a778:	f06fe7cf 	.word	0xf06fe7cf
   1a77c:	bdf8000f 	.word	0xbdf8000f

0001a780 <symbol_0007f0f>:
   1a780:	ebb16843 	.word	0xebb16843
   1a784:	d2091f43 	.word	0xd2091f43
   1a788:	094a6883 	.word	0x094a6883
   1a78c:	0022f853 	.word	0x0022f853
   1a790:	011ff001 	.word	0x011ff001
   1a794:	f00040c8 	.word	0xf00040c8
   1a798:	47700001 	.word	0x47700001
   1a79c:	47702000 	.word	0x47702000

0001a7a0 <symbol_00030c0>:
   1a7a0:	b3136843 	.word	0xb3136843
   1a7a4:	6882b410 	.word	0x6882b410
   1a7a8:	d0241e58 	.word	0xd0241e58
   1a7ac:	1020f852 	.word	0x1020f852
   1a7b0:	f103b9e9 	.word	0xf103b9e9
   1a7b4:	3b014380 	.word	0x3b014380
   1a7b8:	0383eb02 	.word	0x0383eb02
   1a7bc:	f853e002 	.word	0xf853e002
   1a7c0:	b9a11d04 	.word	0xb9a11d04
   1a7c4:	d1fa3801 	.word	0xd1fa3801
   1a7c8:	68112420 	.word	0x68112420
   1a7cc:	f04f2200 	.word	0xf04f2200
   1a7d0:	e0024300 	.word	0xe0024300
   1a7d4:	2a203201 	.word	0x2a203201
   1a7d8:	420bd004 	.word	0x420bd004
   1a7dc:	0353ea4f 	.word	0x0353ea4f
   1a7e0:	1aa0d0f8 	.word	0x1aa0d0f8
   1a7e4:	4b04f85d 	.word	0x4b04f85d
   1a7e8:	46184770 	.word	0x46184770
   1a7ec:	01404770 	.word	0x01404770
   1a7f0:	0420f100 	.word	0x0420f100
   1a7f4:	6811e7ea 	.word	0x6811e7ea
   1a7f8:	e7e72420 	.word	0xe7e72420

0001a7fc <symbol_000b7da>:
   1a7fc:	b3236843 	.word	0xb3236843
   1a800:	6882b410 	.word	0x6882b410
   1a804:	d0261e58 	.word	0xd0261e58
   1a808:	1020f852 	.word	0x1020f852
   1a80c:	f103b9f9 	.word	0xf103b9f9
   1a810:	3b014380 	.word	0x3b014380
   1a814:	0383eb02 	.word	0x0383eb02
   1a818:	f853e002 	.word	0xf853e002
   1a81c:	b9b11d04 	.word	0xb9b11d04
   1a820:	d1fa3801 	.word	0xd1fa3801
   1a824:	68112420 	.word	0x68112420
   1a828:	f04f2200 	.word	0xf04f2200
   1a82c:	e0024300 	.word	0xe0024300
   1a830:	2a203201 	.word	0x2a203201
   1a834:	420bd004 	.word	0x420bd004
   1a838:	0353ea4f 	.word	0x0353ea4f
   1a83c:	1aa0d0f8 	.word	0x1aa0d0f8
   1a840:	08c03007 	.word	0x08c03007
   1a844:	4b04f85d 	.word	0x4b04f85d
   1a848:	46184770 	.word	0x46184770
   1a84c:	01404770 	.word	0x01404770
   1a850:	0420f100 	.word	0x0420f100
   1a854:	6811e7e8 	.word	0x6811e7e8
   1a858:	e7e52420 	.word	0xe7e52420

0001a85c <symbol_000eaf4>:
   1a85c:	43f8e92d 	.word	0x43f8e92d
   1a860:	460f4605 	.word	0x460f4605
   1a864:	2a004616 	.word	0x2a004616
   1a868:	780cd07e 	.word	0x780cd07e
   1a86c:	b124460b 	.word	0xb124460b
   1a870:	f813e07e 	.word	0xf813e07e
   1a874:	2a002f01 	.word	0x2a002f01
   1a878:	3401d146 	.word	0x3401d146
   1a87c:	d1f842a6 	.word	0xd1f842a6
   1a880:	8004f8d5 	.word	0x8004f8d5
   1a884:	0f00f1b8 	.word	0x0f00f1b8
   1a888:	2104d169 	.word	0x2104d169
   1a88c:	f0032001 	.word	0xf0032001
   1a890:	4681f981 	.word	0x4681f981
   1a894:	d06d2800 	.word	0xd06d2800
   1a898:	b18968a9 	.word	0xb18968a9
   1a89c:	0092686a 	.word	0x0092686a
   1a8a0:	ffeff009 	.word	0xffeff009
   1a8a4:	2001e9d5 	.word	0x2001e9d5
   1a8a8:	b13a1e53 	.word	0xb13a1e53
   1a8ac:	3b014642 	.word	0x3b014642
   1a8b0:	60021c59 	.word	0x60021c59
   1a8b4:	0004f100 	.word	0x0004f100
   1a8b8:	68a8d1f9 	.word	0x68a8d1f9
   1a8bc:	f97ef003 	.word	0xf97ef003
   1a8c0:	22042301 	.word	0x22042301
   1a8c4:	3901e9c5 	.word	0x3901e9c5
   1a8c8:	46482100 	.word	0x46482100
   1a8cc:	ffe4f009 	.word	0xffe4f009
   1a8d0:	22012300 	.word	0x22012300
   1a8d4:	42a668a9 	.word	0x42a668a9
   1a8d8:	602a600b 	.word	0x602a600b
   1a8dc:	eb07d911 	.word	0xeb07d911
   1a8e0:	1b340c06 	.word	0x1b340c06
   1a8e4:	f02368ae 	.word	0xf02368ae
   1a8e8:	00df0103 	.word	0x00df0103
   1a8ec:	0d01f81c 	.word	0x0d01f81c
   1a8f0:	f0075872 	.word	0xf0075872
   1a8f4:	40b80718 	.word	0x40b80718
   1a8f8:	43023301 	.word	0x43023301
   1a8fc:	507242a3 	.word	0x507242a3
   1a900:	2000d1f0 	.word	0x2000d1f0
   1a904:	83f8e8bd 	.word	0x83f8e8bd
   1a908:	f0121b32 	.word	0xf0121b32
   1a90c:	bf180803 	.word	0xbf180803
   1a910:	0801f04f 	.word	0x0801f04f
   1a914:	7310f242 	.word	0x7310f242
   1a918:	0892eb08 	.word	0x0892eb08
   1a91c:	d8294598 	.word	0xd8294598
   1a920:	4598686b 	.word	0x4598686b
   1a924:	2104d929 	.word	0x2104d929
   1a928:	f0034640 	.word	0xf0034640
   1a92c:	4681f933 	.word	0x4681f933
   1a930:	68a9b300 	.word	0x68a9b300
   1a934:	686ab189 	.word	0x686ab189
   1a938:	f0090092 	.word	0xf0090092
   1a93c:	e9d5ffa2 	.word	0xe9d5ffa2
   1a940:	1e532001 	.word	0x1e532001
   1a944:	2200b13a 	.word	0x2200b13a
   1a948:	1c593b01 	.word	0x1c593b01
   1a94c:	f1006002 	.word	0xf1006002
   1a950:	d1f90004 	.word	0xd1f90004
   1a954:	f00368a8 	.word	0xf00368a8
   1a958:	e9c5f931 	.word	0xe9c5f931
   1a95c:	ea4f8901 	.word	0xea4f8901
   1a960:	f8d50288 	.word	0xf8d50288
   1a964:	e7af9008 	.word	0xe7af9008
   1a968:	8004f8d0 	.word	0x8004f8d0
   1a96c:	e7894614 	.word	0xe7894614
   1a970:	e7ca2400 	.word	0xe7ca2400
   1a974:	000ff06f 	.word	0x000ff06f
   1a978:	4698e7c4 	.word	0x4698e7c4
   1a97c:	bf00e782 	.word	0xbf00e782

0001a980 <symbol_000116e>:
   1a980:	41f0e92d 	.word	0x41f0e92d
   1a984:	46886844 	.word	0x46886844
   1a988:	d03e2c00 	.word	0xd03e2c00
   1a98c:	1e624615 	.word	0x1e624615
   1a990:	68804607 	.word	0x68804607
   1a994:	f850d040 	.word	0xf850d040
   1a998:	bb991022 	.word	0xbb991022
   1a99c:	4380f104 	.word	0x4380f104
   1a9a0:	eb003b01 	.word	0xeb003b01
   1a9a4:	e0020383 	.word	0xe0020383
   1a9a8:	1d04f853 	.word	0x1d04f853
   1a9ac:	3a01bb51 	.word	0x3a01bb51
   1a9b0:	2627d1fa 	.word	0x2627d1fa
   1a9b4:	22006801 	.word	0x22006801
   1a9b8:	4300f04f 	.word	0x4300f04f
   1a9bc:	3201e002 	.word	0x3201e002
   1a9c0:	d0032a20 	.word	0xd0032a20
   1a9c4:	ea4f420b 	.word	0xea4f420b
   1a9c8:	d0f80353 	.word	0xd0f80353
   1a9cc:	08f61ab6 	.word	0x08f61ab6
   1a9d0:	d32442b5 	.word	0xd32442b5
   1a9d4:	2100462a 	.word	0x2100462a
   1a9d8:	f0094640 	.word	0xf0094640
   1a9dc:	b176ff5d 	.word	0xb176ff5d
   1a9e0:	44a82300 	.word	0x44a82300
   1a9e4:	f02368b9 	.word	0xf02368b9
   1a9e8:	588c0203 	.word	0x588c0203
   1a9ec:	f00500dd 	.word	0xf00500dd
   1a9f0:	33010518 	.word	0x33010518
   1a9f4:	42b340ec 	.word	0x42b340ec
   1a9f8:	4d01f808 	.word	0x4d01f808
   1a9fc:	2000d1f2 	.word	0x2000d1f2
   1aa00:	81f0e8bd 	.word	0x81f0e8bd
   1aa04:	36270156 	.word	0x36270156
   1aa08:	4608e7d5 	.word	0x4608e7d5
   1aa0c:	f0094621 	.word	0xf0094621
   1aa10:	4620ff43 	.word	0x4620ff43
   1aa14:	81f0e8bd 	.word	0x81f0e8bd
   1aa18:	26276801 	.word	0x26276801
   1aa1c:	f06fe7cb 	.word	0xf06fe7cb
   1aa20:	e7ed0007 	.word	0xe7ed0007

0001aa24 <symbol_0004fb7>:
   1aa24:	41f0e92d 	.word	0x41f0e92d
   1aa28:	46046843 	.word	0x46046843
   1aa2c:	f001094d 	.word	0xf001094d
   1aa30:	b343061f 	.word	0xb343061f
   1aa34:	f8d01e5a 	.word	0xf8d01e5a
   1aa38:	f000e008 	.word	0xf000e008
   1aa3c:	f85e8099 	.word	0xf85e8099
   1aa40:	f1bcc022 	.word	0xf1bcc022
   1aa44:	f0400f00 	.word	0xf0400f00
   1aa48:	f103809c 	.word	0xf103809c
   1aa4c:	38014080 	.word	0x38014080
   1aa50:	0080eb0e 	.word	0x0080eb0e
   1aa54:	f850e003 	.word	0xf850e003
   1aa58:	2f007d04 	.word	0x2f007d04
   1aa5c:	3a01d15e 	.word	0x3a01d15e
   1aa60:	f04fd1f9 	.word	0xf04fd1f9
   1aa64:	f8de0820 	.word	0xf8de0820
   1aa68:	20007000 	.word	0x20007000
   1aa6c:	4200f04f 	.word	0x4200f04f
   1aa70:	3001e002 	.word	0x3001e002
   1aa74:	d0052820 	.word	0xd0052820
   1aa78:	ea4f423a 	.word	0xea4f423a
   1aa7c:	d0f80252 	.word	0xd0f80252
   1aa80:	0c00eba8 	.word	0x0c00eba8
   1aa84:	ebb14461 	.word	0xebb14461
   1aa88:	d90b1f43 	.word	0xd90b1f43
   1aa8c:	021ff011 	.word	0x021ff011
   1aa90:	2201bf18 	.word	0x2201bf18
   1aa94:	7010f242 	.word	0x7010f242
   1aa98:	1751eb02 	.word	0x1751eb02
   1aa9c:	d86d4287 	.word	0xd86d4287
   1aaa0:	d840429f 	.word	0xd840429f
   1aaa4:	429db1f5 	.word	0x429db1f5
   1aaa8:	f06fd25d 	.word	0xf06fd25d
   1aaac:	1b7f4740 	.word	0x1b7f4740
   1aab0:	ebc719da 	.word	0xebc719da
   1aab4:	00927787 	.word	0x00927787
   1aab8:	68a000bf 	.word	0x68a000bf
   1aabc:	19c13b01 	.word	0x19c13b01
   1aac0:	44115880 	.word	0x44115880
   1aac4:	f841429d 	.word	0xf841429d
   1aac8:	f1a20c04 	.word	0xf1a20c04
   1aacc:	d1f40204 	.word	0xd1f40204
   1aad0:	f1032100 	.word	0xf1032100
   1aad4:	3b014380 	.word	0x3b014380
   1aad8:	68a2009b 	.word	0x68a2009b
   1aadc:	3b0450d1 	.word	0x3b0450d1
   1aae0:	d1fa1d1a 	.word	0xd1fa1d1a
   1aae4:	6863b1be 	.word	0x6863b1be
   1aae8:	d214429d 	.word	0xd214429d
   1aaec:	f1c62700 	.word	0xf1c62700
   1aaf0:	00ab0c20 	.word	0x00ab0c20
   1aaf4:	350168a0 	.word	0x350168a0
   1aaf8:	fa0158c1 	.word	0xfa0158c1
   1aafc:	50c2f206 	.word	0x50c2f206
   1ab00:	58c268a0 	.word	0x58c268a0
   1ab04:	50c2433a 	.word	0x50c2433a
   1ab08:	fa216862 	.word	0xfa216862
   1ab0c:	42aaf70c 	.word	0x42aaf70c
   1ab10:	0304f103 	.word	0x0304f103
   1ab14:	2000d8ee 	.word	0x2000d8ee
   1ab18:	81f0e8bd 	.word	0x81f0e8bd
   1ab1c:	1c42ea4f 	.word	0x1c42ea4f
   1ab20:	0820f10c 	.word	0x0820f10c
   1ab24:	2104e7a1 	.word	0x2104e7a1
   1ab28:	f0034638 	.word	0xf0034638
   1ab2c:	4680f833 	.word	0x4680f833
   1ab30:	68a1b320 	.word	0x68a1b320
   1ab34:	6862b189 	.word	0x6862b189
   1ab38:	f0090092 	.word	0xf0090092
   1ab3c:	e9d4fea2 	.word	0xe9d4fea2
   1ab40:	1e532001 	.word	0x1e532001
   1ab44:	2200b13a 	.word	0x2200b13a
   1ab48:	1c593b01 	.word	0x1c593b01
   1ab4c:	f1006002 	.word	0xf1006002
   1ab50:	d1f90004 	.word	0xd1f90004
   1ab54:	f00368a0 	.word	0xf00368a0
   1ab58:	463bf831 	.word	0x463bf831
   1ab5c:	7801e9c4 	.word	0x7801e9c4
   1ab60:	d0bf2d00 	.word	0xd0bf2d00
   1ab64:	2b00e79f 	.word	0x2b00e79f
   1ab68:	2e00d1b2 	.word	0x2e00d1b2
   1ab6c:	e7d2d1bb 	.word	0xe7d2d1bb
   1ab70:	7000f8de 	.word	0x7000f8de
   1ab74:	f04f4694 	.word	0xf04f4694
   1ab78:	e7760820 	.word	0xe7760820
   1ab7c:	000ff06f 	.word	0x000ff06f
   1ab80:	0152e7ca 	.word	0x0152e7ca
   1ab84:	f1024667 	.word	0xf1024667
   1ab88:	46940820 	.word	0x46940820
   1ab8c:	bf00e76d 	.word	0xbf00e76d

0001ab90 <symbol_0000994>:
   1ab90:	6844b5f8 	.word	0x6844b5f8
   1ab94:	42ac094d 	.word	0x42ac094d
   1ab98:	f001d33a 	.word	0xf001d33a
   1ab9c:	d032011f 	.word	0xd032011f
   1aba0:	2300b1b5 	.word	0x2300b1b5
   1aba4:	688400aa 	.word	0x688400aa
   1aba8:	320458a6 	.word	0x320458a6
   1abac:	6023f844 	.word	0x6023f844
   1abb0:	33016844 	.word	0x33016844
   1abb4:	429e1b66 	.word	0x429e1b66
   1abb8:	429cd8f5 	.word	0x429cd8f5
   1abbc:	2500d908 	.word	0x2500d908
   1abc0:	6884009a 	.word	0x6884009a
   1abc4:	50a53301 	.word	0x50a53301
   1abc8:	32046844 	.word	0x32046844
   1abcc:	d8f8429c 	.word	0xd8f8429c
   1abd0:	b1b4b1b9 	.word	0xb1b4b1b9
   1abd4:	f1042700 	.word	0xf1042700
   1abd8:	3b014380 	.word	0x3b014380
   1abdc:	f1c1009b 	.word	0xf1c1009b
   1abe0:	68860c20 	.word	0x68860c20
   1abe4:	58f53c01 	.word	0x58f53c01
   1abe8:	f201fa25 	.word	0xf201fa25
   1abec:	688650f2 	.word	0x688650f2
   1abf0:	ea4258f2 	.word	0xea4258f2
   1abf4:	50f20207 	.word	0x50f20207
   1abf8:	f70cfa05 	.word	0xf70cfa05
   1abfc:	0304f1a3 	.word	0x0304f1a3
   1ac00:	2000d1ef 	.word	0x2000d1ef
   1ac04:	b919bdf8 	.word	0xb919bdf8
   1ac08:	d0fa2c00 	.word	0xd0fa2c00
   1ac0c:	e7d6460b 	.word	0xe7d6460b
   1ac10:	b1644605 	.word	0xb1644605
   1ac14:	00a26886 	.word	0x00a26886
   1ac18:	21004630 	.word	0x21004630
   1ac1c:	fe3cf009 	.word	0xfe3cf009
   1ac20:	22012300 	.word	0x22012300
   1ac24:	461868a9 	.word	0x461868a9
   1ac28:	602a600b 	.word	0x602a600b
   1ac2c:	2104bdf8 	.word	0x2104bdf8
   1ac30:	f0022001 	.word	0xf0022001
   1ac34:	4606ffaf 	.word	0x4606ffaf
   1ac38:	68a9b1b8 	.word	0x68a9b1b8
   1ac3c:	686ab181 	.word	0x686ab181
   1ac40:	f0090092 	.word	0xf0090092
   1ac44:	e9d5fe1e 	.word	0xe9d5fe1e
   1ac48:	1e532001 	.word	0x1e532001
   1ac4c:	3b01b132 	.word	0x3b01b132
   1ac50:	60041c5a 	.word	0x60041c5a
   1ac54:	0004f100 	.word	0x0004f100
   1ac58:	68a8d1f9 	.word	0x68a8d1f9
   1ac5c:	ffaef002 	.word	0xffaef002
   1ac60:	22042301 	.word	0x22042301
   1ac64:	3601e9c5 	.word	0x3601e9c5
   1ac68:	f06fe7d6 	.word	0xf06fe7d6
   1ac6c:	bdf8000f 	.word	0xbdf8000f

0001ac70 <symbol_000242f>:
   1ac70:	6843b470 	.word	0x6843b470
   1ac74:	b173684a 	.word	0xb173684a
   1ac78:	f1036884 	.word	0xf1036884
   1ac7c:	3d014580 	.word	0x3d014580
   1ac80:	6025f854 	.word	0x6025f854
   1ac84:	0485eb04 	.word	0x0485eb04
   1ac88:	e01ab11e 	.word	0xe01ab11e
   1ac8c:	5d04f854 	.word	0x5d04f854
   1ac90:	3b01b9bd 	.word	0x3b01b9bd
   1ac94:	b18ad1fa 	.word	0xb18ad1fa
   1ac98:	4480f102 	.word	0x4480f102
   1ac9c:	3c01688e 	.word	0x3c01688e
   1aca0:	5024f856 	.word	0x5024f856
   1aca4:	eb06b9cd 	.word	0xeb06b9cd
   1aca8:	e0020484 	.word	0xe0020484
   1acac:	5d04f854 	.word	0x5d04f854
   1acb0:	3a01b98d 	.word	0x3a01b98d
   1acb4:	2b00d1fa 	.word	0x2b00d1fa
   1acb8:	6802d037 	.word	0x6802d037
   1acbc:	bc704610 	.word	0xbc704610
   1acc0:	2a004770 	.word	0x2a004770
   1acc4:	f102d0f9 	.word	0xf102d0f9
   1acc8:	688e4480 	.word	0x688e4480
   1accc:	f8563c01 	.word	0xf8563c01
   1acd0:	2d005024 	.word	0x2d005024
   1acd4:	4293d0e7 	.word	0x4293d0e7
   1acd8:	4293d8ef 	.word	0x4293d8ef
   1acdc:	d2036809 	.word	0xd2036809
   1ace0:	424abc70 	.word	0x424abc70
   1ace4:	47704610 	.word	0x47704610
   1ace8:	2a006802 	.word	0x2a006802
   1acec:	2900dd01 	.word	0x2900dd01
   1acf0:	2900db24 	.word	0x2900db24
   1acf4:	2a00dd01 	.word	0x2a00dd01
   1acf8:	b1b3db1d 	.word	0xb1b3db1d
   1acfc:	f1036884 	.word	0xf1036884
   1ad00:	39014180 	.word	0x39014180
   1ad04:	5021f854 	.word	0x5021f854
   1ad08:	0021f856 	.word	0x0021f856
   1ad0c:	42850089 	.word	0x42850089
   1ad10:	4431440c 	.word	0x4431440c
   1ad14:	d30cd8d2 	.word	0xd30cd8d2
   1ad18:	d0063b01 	.word	0xd0063b01
   1ad1c:	5d04f854 	.word	0x5d04f854
   1ad20:	0d04f851 	.word	0x0d04f851
   1ad24:	d9f64285 	.word	0xd9f64285
   1ad28:	461ae7c8 	.word	0x461ae7c8
   1ad2c:	4610bc70 	.word	0x4610bc70
   1ad30:	42524770 	.word	0x42524770
   1ad34:	f04fe7c2 	.word	0xf04fe7c2
   1ad38:	e7bf32ff 	.word	0xe7bf32ff
   1ad3c:	e7bd2201 	.word	0xe7bd2201

0001ad40 <symbol_000ccad>:
   1ad40:	2900b4f0 	.word	0x2900b4f0
   1ad44:	68434605 	.word	0x68434605
   1ad48:	2b00db32 	.word	0x2b00db32
   1ad4c:	6886d042 	.word	0x6886d042
   1ad50:	4280f103 	.word	0x4280f103
   1ad54:	f8563a01 	.word	0xf8563a01
   1ad58:	eb060022 	.word	0xeb060022
   1ad5c:	b9680282 	.word	0xb9680282
   1ad60:	30fff04f 	.word	0x30fff04f
   1ad64:	e0022701 	.word	0xe0022701
   1ad68:	4d04f852 	.word	0x4d04f852
   1ad6c:	3b01b93c 	.word	0x3b01b93c
   1ad70:	2900d1fa 	.word	0x2900d1fa
   1ad74:	2000bf08 	.word	0x2000bf08
   1ad78:	4770bcf0 	.word	0x4770bcf0
   1ad7c:	b1a12701 	.word	0xb1a12701
   1ad80:	d8122b01 	.word	0xd8122b01
   1ad84:	28006828 	.word	0x28006828
   1ad88:	1c7bdd01 	.word	0x1c7bdd01
   1ad8c:	2f01d01e 	.word	0x2f01d01e
   1ad90:	2800d101 	.word	0x2800d101
   1ad94:	2900db24 	.word	0x2900db24
   1ad98:	bfb86833 	.word	0xbfb86833
   1ad9c:	42994249 	.word	0x42994249
   1ada0:	d815d3ea 	.word	0xd815d3ea
   1ada4:	2000bcf0 	.word	0x2000bcf0
   1ada8:	68284770 	.word	0x68284770
   1adac:	4770bcf0 	.word	0x4770bcf0
   1adb0:	6886b163 	.word	0x6886b163
   1adb4:	4280f103 	.word	0x4280f103
   1adb8:	f8563a01 	.word	0xf8563a01
   1adbc:	eb060022 	.word	0xeb060022
   1adc0:	b9500282 	.word	0xb9500282
   1adc4:	f04f2001 	.word	0xf04f2001
   1adc8:	e7d037ff 	.word	0xe7d037ff
   1adcc:	e7d32001 	.word	0xe7d32001
   1add0:	e7d14240 	.word	0xe7d14240
   1add4:	30fff04f 	.word	0x30fff04f
   1add8:	f04fe7cb 	.word	0xf04fe7cb
   1addc:	e7cf37ff 	.word	0xe7cf37ff
   1ade0:	30fff04f 	.word	0x30fff04f
   1ade4:	bf00e7c8 	.word	0xbf00e7c8

0001ade8 <symbol_000c914>:
   1ade8:	e92d4290 	.word	0xe92d4290
   1adec:	460747f0 	.word	0x460747f0
   1adf0:	d006460c 	.word	0xd006460c
   1adf4:	46154288 	.word	0x46154288
   1adf8:	f7ffd002 	.word	0xf7ffd002
   1adfc:	b9a0fafb 	.word	0xb9a0fafb
   1ae00:	2301462c 	.word	0x2301462c
   1ae04:	6865603b 	.word	0x6865603b
   1ae08:	68a3b175 	.word	0x68a3b175
   1ae0c:	4280f105 	.word	0x4280f105
   1ae10:	f8533a01 	.word	0xf8533a01
   1ae14:	eb031022 	.word	0xeb031022
   1ae18:	b1190282 	.word	0xb1190282
   1ae1c:	f852e007 	.word	0xf852e007
   1ae20:	b9211d04 	.word	0xb9211d04
   1ae24:	d1fa3d01 	.word	0xd1fa3d01
   1ae28:	e8bd2000 	.word	0xe8bd2000
   1ae2c:	f24287f0 	.word	0xf24287f0
   1ae30:	42957210 	.word	0x42957210
   1ae34:	687ad875 	.word	0x687ad875
   1ae38:	d27642aa 	.word	0xd27642aa
   1ae3c:	46282104 	.word	0x46282104
   1ae40:	fea8f002 	.word	0xfea8f002
   1ae44:	28004606 	.word	0x28004606
   1ae48:	68b9d06b 	.word	0x68b9d06b
   1ae4c:	687ab189 	.word	0x687ab189
   1ae50:	f0090092 	.word	0xf0090092
   1ae54:	e9d7fd16 	.word	0xe9d7fd16
   1ae58:	1e532001 	.word	0x1e532001
   1ae5c:	2200b13a 	.word	0x2200b13a
   1ae60:	1c593b01 	.word	0x1c593b01
   1ae64:	f1006002 	.word	0xf1006002
   1ae68:	d1f90004 	.word	0xd1f90004
   1ae6c:	f00268b8 	.word	0xf00268b8
   1ae70:	e9c7fea5 	.word	0xe9c7fea5
   1ae74:	68a35601 	.word	0x68a35601
   1ae78:	ea4f2400 	.word	0xea4f2400
   1ae7c:	f1a30a85 	.word	0xf1a30a85
   1ae80:	eb060c04 	.word	0xeb060c04
   1ae84:	2200000a 	.word	0x2200000a
   1ae88:	f10c6833 	.word	0xf10c6833
   1ae8c:	f8dc0c04 	.word	0xf8dc0c04
   1ae90:	191b1000 	.word	0x191b1000
   1ae94:	bf284614 	.word	0xbf284614
   1ae98:	185b2201 	.word	0x185b2201
   1ae9c:	2401bf28 	.word	0x2401bf28
   1aea0:	3b04f846 	.word	0x3b04f846
   1aea4:	44144286 	.word	0x44144286
   1aea8:	2c00d1ed 	.word	0x2c00d1ed
   1aeac:	f242d0bc 	.word	0xf242d0bc
   1aeb0:	f04f7810 	.word	0xf04f7810
   1aeb4:	e00f0900 	.word	0xe00f0900
   1aeb8:	eb0568bd 	.word	0xeb0568bd
   1aebc:	6803000a 	.word	0x6803000a
   1aec0:	191c2200 	.word	0x191c2200
   1aec4:	2201bf28 	.word	0x2201bf28
   1aec8:	4b04f840 	.word	0x4b04f840
   1aecc:	0a04f10a 	.word	0x0a04f10a
   1aed0:	24014635 	.word	0x24014635
   1aed4:	d0a72a00 	.word	0xd0a72a00
   1aed8:	1c6e687b 	.word	0x1c6e687b
   1aedc:	d8ee42ab 	.word	0xd8ee42ab
   1aee0:	d81e4546 	.word	0xd81e4546
   1aee4:	d2e742b3 	.word	0xd2e742b3
   1aee8:	46302104 	.word	0x46302104
   1aeec:	fe52f002 	.word	0xfe52f002
   1aef0:	b1b04605 	.word	0xb1b04605
   1aef4:	b18968b9 	.word	0xb18968b9
   1aef8:	0092687a 	.word	0x0092687a
   1aefc:	fcc1f009 	.word	0xfcc1f009
   1af00:	2001e9d7 	.word	0x2001e9d7
   1af04:	b13a1e53 	.word	0xb13a1e53
   1af08:	1c5a3b01 	.word	0x1c5a3b01
   1af0c:	9000f8c0 	.word	0x9000f8c0
   1af10:	0004f100 	.word	0x0004f100
   1af14:	68b8d1f8 	.word	0x68b8d1f8
   1af18:	fe50f002 	.word	0xfe50f002
   1af1c:	6501e9c7 	.word	0x6501e9c7
   1af20:	f06fe7cb 	.word	0xf06fe7cb
   1af24:	e8bd000f 	.word	0xe8bd000f
   1af28:	68be87f0 	.word	0x68be87f0
   1af2c:	bf00e7a4 	.word	0xbf00e7a4

0001af30 <symbol_0004fdf>:
   1af30:	684bb5f0 	.word	0x684bb5f0
   1af34:	b085460d 	.word	0xb085460d
   1af38:	46064614 	.word	0x46064614
   1af3c:	b17b6851 	.word	0xb17b6851
   1af40:	f10368a8 	.word	0xf10368a8
   1af44:	3a014280 	.word	0x3a014280
   1af48:	7022f850 	.word	0x7022f850
   1af4c:	0082eb00 	.word	0x0082eb00
   1af50:	e04fb127 	.word	0xe04fb127
   1af54:	2d04f850 	.word	0x2d04f850
   1af58:	d14b2a00 	.word	0xd14b2a00
   1af5c:	d1f93b01 	.word	0xd1f93b01
   1af60:	f101b189 	.word	0xf101b189
   1af64:	68a74080 	.word	0x68a74080
   1af68:	f8573801 	.word	0xf8573801
   1af6c:	2a002020 	.word	0x2a002020
   1af70:	8099f040 	.word	0x8099f040
   1af74:	0080eb07 	.word	0x0080eb07
   1af78:	f850e003 	.word	0xf850e003
   1af7c:	2a002d04 	.word	0x2a002d04
   1af80:	3901d142 	.word	0x3901d142
   1af84:	2300d1f9 	.word	0x2300d1f9
   1af88:	42b42201 	.word	0x42b42201
   1af8c:	2301e9cd 	.word	0x2301e9cd
   1af90:	d07f9303 	.word	0xd07f9303
   1af94:	d00542b5 	.word	0xd00542b5
   1af98:	46304629 	.word	0x46304629
   1af9c:	fa2af7ff 	.word	0xfa2af7ff
   1afa0:	b9a84607 	.word	0xb9a84607
   1afa4:	60332301 	.word	0x60332301
   1afa8:	b1806860 	.word	0xb1806860
   1afac:	c008f8d4 	.word	0xc008f8d4
   1afb0:	4380f100 	.word	0x4380f100
   1afb4:	f85c3b01 	.word	0xf85c3b01
   1afb8:	eb0c2023 	.word	0xeb0c2023
   1afbc:	b1220383 	.word	0xb1220383
   1afc0:	f853e042 	.word	0xf853e042
   1afc4:	2a002d04 	.word	0x2a002d04
   1afc8:	3801d13e 	.word	0x3801d13e
   1afcc:	2700d1f9 	.word	0x2700d1f9
   1afd0:	b1609803 	.word	0xb1609803
   1afd4:	1e539a02 	.word	0x1e539a02
   1afd8:	2200b13a 	.word	0x2200b13a
   1afdc:	1c593b01 	.word	0x1c593b01
   1afe0:	f1006002 	.word	0xf1006002
   1afe4:	d1f90004 	.word	0xd1f90004
   1afe8:	f0029803 	.word	0xf0029803
   1afec:	4638fde7 	.word	0x4638fde7
   1aff0:	bdf0b005 	.word	0xbdf0b005
   1aff4:	d0c62900 	.word	0xd0c62900
   1aff8:	4080f101 	.word	0x4080f101
   1affc:	380168a7 	.word	0x380168a7
   1b000:	2020f857 	.word	0x2020f857
   1b004:	d0b52a00 	.word	0xd0b52a00
   1b008:	d8bc428b 	.word	0xd8bc428b
   1b00c:	2b00d34b 	.word	0x2b00d34b
   1b010:	68a8d0b9 	.word	0x68a8d0b9
   1b014:	4180f103 	.word	0x4180f103
   1b018:	f8503901 	.word	0xf8503901
   1b01c:	f857c021 	.word	0xf857c021
   1b020:	0089e021 	.word	0x0089e021
   1b024:	440845e6 	.word	0x440845e6
   1b028:	0201eb07 	.word	0x0201eb07
   1b02c:	d83ad3ab 	.word	0xd83ad3ab
   1b030:	e0064601 	.word	0xe0064601
   1b034:	7d04f851 	.word	0x7d04f851
   1b038:	0d04f852 	.word	0x0d04f852
   1b03c:	d8a24287 	.word	0xd8a24287
   1b040:	3b01d331 	.word	0x3b01d331
   1b044:	e79ed1f6 	.word	0xe79ed1f6
   1b048:	462b2500 	.word	0x462b2500
   1b04c:	f85168b1 	.word	0xf85168b1
   1b050:	35016b04 	.word	0x35016b04
   1b054:	f8411af2 	.word	0xf8411af2
   1b058:	f85c2c04 	.word	0xf85c2c04
   1b05c:	460c7b04 	.word	0x460c7b04
   1b060:	bf2c42ba 	.word	0xbf2c42ba
   1b064:	0e00f04f 	.word	0x0e00f04f
   1b068:	0e01f04f 	.word	0x0e01f04f
   1b06c:	429e1bd2 	.word	0x429e1bd2
   1b070:	4673bf2c 	.word	0x4673bf2c
   1b074:	0301f10e 	.word	0x0301f10e
   1b078:	f8414285 	.word	0xf8414285
   1b07c:	d3e62c04 	.word	0xd3e62c04
   1b080:	e7a4b90b 	.word	0xe7a4b90b
   1b084:	68222301 	.word	0x68222301
   1b088:	429a1ad1 	.word	0x429a1ad1
   1b08c:	1b04f844 	.word	0x1b04f844
   1b090:	e79cd3f8 	.word	0xe79cd3f8
   1b094:	a8014621 	.word	0xa8014621
   1b098:	f9acf7ff 	.word	0xf9acf7ff
   1b09c:	28004607 	.word	0x28004607
   1b0a0:	ac01d196 	.word	0xac01d196
   1b0a4:	f06fe776 	.word	0xf06fe776
   1b0a8:	46380709 	.word	0x46380709
   1b0ac:	bdf0b005 	.word	0xbdf0b005

0001b0b0 <symbol_0005cc7>:
   1b0b0:	41f0e92d 	.word	0x41f0e92d
   1b0b4:	6813680c 	.word	0x6813680c
   1b0b8:	fb034605 	.word	0xfb034605
   1b0bc:	2b00f304 	.word	0x2b00f304
   1b0c0:	684bda39 	.word	0x684bda39
   1b0c4:	460e4617 	.word	0x460e4617
   1b0c8:	b1836852 	.word	0xb1836852
   1b0cc:	f1036889 	.word	0xf1036889
   1b0d0:	38014080 	.word	0x38014080
   1b0d4:	c020f851 	.word	0xc020f851
   1b0d8:	0180eb01 	.word	0x0180eb01
   1b0dc:	0f00f1bc 	.word	0x0f00f1bc
   1b0e0:	e02ed003 	.word	0xe02ed003
   1b0e4:	0d04f851 	.word	0x0d04f851
   1b0e8:	3b01bb58 	.word	0x3b01bb58
   1b0ec:	b17ad1fa 	.word	0xb17ad1fa
   1b0f0:	4180f102 	.word	0x4180f102
   1b0f4:	c008f8d7 	.word	0xc008f8d7
   1b0f8:	f85c3901 	.word	0xf85c3901
   1b0fc:	b9780021 	.word	0xb9780021
   1b100:	0181eb0c 	.word	0x0181eb0c
   1b104:	f851e002 	.word	0xf851e002
   1b108:	bb280d04 	.word	0xbb280d04
   1b10c:	d1fa3a01 	.word	0xd1fa3a01
   1b110:	4631463a 	.word	0x4631463a
   1b114:	f7ff4628 	.word	0xf7ff4628
   1b118:	b148ff0b 	.word	0xb148ff0b
   1b11c:	81f0e8bd 	.word	0x81f0e8bd
   1b120:	46394632 	.word	0x46394632
   1b124:	f7ff4628 	.word	0xf7ff4628
   1b128:	2800ff03 	.word	0x2800ff03
   1b12c:	4264d1f6 	.word	0x4264d1f6
   1b130:	e8bd602c 	.word	0xe8bd602c
   1b134:	f7ff81f0 	.word	0xf7ff81f0
   1b138:	2800fe57 	.word	0x2800fe57
   1b13c:	602cd1ee 	.word	0x602cd1ee
   1b140:	2a00e7f7 	.word	0x2a00e7f7
   1b144:	f102d0e4 	.word	0xf102d0e4
   1b148:	f8d74180 	.word	0xf8d74180
   1b14c:	3901c008 	.word	0x3901c008
   1b150:	0021f85c 	.word	0x0021f85c
   1b154:	d0d32800 	.word	0xd0d32800
   1b158:	d8d94293 	.word	0xd8d94293
   1b15c:	2b00d3e0 	.word	0x2b00d3e0
   1b160:	68b0d0d6 	.word	0x68b0d0d6
   1b164:	4180f103 	.word	0x4180f103
   1b168:	f8503901 	.word	0xf8503901
   1b16c:	f85c8021 	.word	0xf85c8021
   1b170:	0089e021 	.word	0x0089e021
   1b174:	440845f0 	.word	0x440845f0
   1b178:	0201eb0c 	.word	0x0201eb0c
   1b17c:	d3cfd8c8 	.word	0xd3cfd8c8
   1b180:	e0064601 	.word	0xe0064601
   1b184:	cd04f851 	.word	0xcd04f851
   1b188:	0d04f852 	.word	0x0d04f852
   1b18c:	d8bf4584 	.word	0xd8bf4584
   1b190:	3b01d3c6 	.word	0x3b01d3c6
   1b194:	e7bbd1f6 	.word	0xe7bbd1f6

0001b198 <symbol_000d773>:
   1b198:	41f0e92d 	.word	0x41f0e92d
   1b19c:	6813680c 	.word	0x6813680c
   1b1a0:	fb034605 	.word	0xfb034605
   1b1a4:	2b00f304 	.word	0x2b00f304
   1b1a8:	684bdd64 	.word	0x684bdd64
   1b1ac:	460e4617 	.word	0x460e4617
   1b1b0:	b1836852 	.word	0xb1836852
   1b1b4:	f1036889 	.word	0xf1036889
   1b1b8:	38014080 	.word	0x38014080
   1b1bc:	c020f851 	.word	0xc020f851
   1b1c0:	0180eb01 	.word	0x0180eb01
   1b1c4:	0f00f1bc 	.word	0x0f00f1bc
   1b1c8:	e01fd003 	.word	0xe01fd003
   1b1cc:	0d04f851 	.word	0x0d04f851
   1b1d0:	3b01b9e0 	.word	0x3b01b9e0
   1b1d4:	b182d1fa 	.word	0xb182d1fa
   1b1d8:	4180f102 	.word	0x4180f102
   1b1dc:	c008f8d7 	.word	0xc008f8d7
   1b1e0:	f85c3901 	.word	0xf85c3901
   1b1e4:	28000021 	.word	0x28000021
   1b1e8:	eb0cd13b 	.word	0xeb0cd13b
   1b1ec:	e0020181 	.word	0xe0020181
   1b1f0:	0d04f851 	.word	0x0d04f851
   1b1f4:	3a01b9a8 	.word	0x3a01b9a8
   1b1f8:	463ad1fa 	.word	0x463ad1fa
   1b1fc:	46284631 	.word	0x46284631
   1b200:	fe96f7ff 	.word	0xfe96f7ff
   1b204:	602cb900 	.word	0x602cb900
   1b208:	81f0e8bd 	.word	0x81f0e8bd
   1b20c:	d0f42a00 	.word	0xd0f42a00
   1b210:	4180f102 	.word	0x4180f102
   1b214:	c008f8d7 	.word	0xc008f8d7
   1b218:	f85c3901 	.word	0xf85c3901
   1b21c:	28000021 	.word	0x28000021
   1b220:	4293d0e3 	.word	0x4293d0e3
   1b224:	d31cd8e9 	.word	0xd31cd8e9
   1b228:	d0e62b00 	.word	0xd0e62b00
   1b22c:	f10368b0 	.word	0xf10368b0
   1b230:	39014180 	.word	0x39014180
   1b234:	8021f850 	.word	0x8021f850
   1b238:	e021f85c 	.word	0xe021f85c
   1b23c:	45f00089 	.word	0x45f00089
   1b240:	eb0c4408 	.word	0xeb0c4408
   1b244:	d8d80201 	.word	0xd8d80201
   1b248:	4601d30b 	.word	0x4601d30b
   1b24c:	f851e006 	.word	0xf851e006
   1b250:	f852cd04 	.word	0xf852cd04
   1b254:	45840d04 	.word	0x45840d04
   1b258:	d302d8cf 	.word	0xd302d8cf
   1b25c:	d1f63b01 	.word	0xd1f63b01
   1b260:	4632e7cb 	.word	0x4632e7cb
   1b264:	46284639 	.word	0x46284639
   1b268:	fe62f7ff 	.word	0xfe62f7ff
   1b26c:	d1cb2800 	.word	0xd1cb2800
   1b270:	e7c84264 	.word	0xe7c84264
   1b274:	fdb8f7ff 	.word	0xfdb8f7ff
   1b278:	d0c42800 	.word	0xd0c42800
   1b27c:	81f0e8bd 	.word	0x81f0e8bd

0001b280 <symbol_000f268>:
   1b280:	bfac2a00 	.word	0xbfac2a00
   1b284:	f04f2301 	.word	0xf04f2301
   1b288:	b5f033ff 	.word	0xb5f033ff
   1b28c:	680d2601 	.word	0x680d2601
   1b290:	7ce2ea82 	.word	0x7ce2ea82
   1b294:	f703fb05 	.word	0xf703fb05
   1b298:	ebacb085 	.word	0xebacb085
   1b29c:	2f007ce2 	.word	0x2f007ce2
   1b2a0:	e9cd9602 	.word	0xe9cd9602
   1b2a4:	f8cdc300 	.word	0xf8cdc300
   1b2a8:	4606d00c 	.word	0x4606d00c
   1b2ac:	684bdd2c 	.word	0x684bdd2c
   1b2b0:	b173460c 	.word	0xb173460c
   1b2b4:	f10368a7 	.word	0xf10368a7
   1b2b8:	39014180 	.word	0x39014180
   1b2bc:	0021f857 	.word	0x0021f857
   1b2c0:	0181eb07 	.word	0x0181eb07
   1b2c4:	e00eb118 	.word	0xe00eb118
   1b2c8:	0d04f851 	.word	0x0d04f851
   1b2cc:	3b01b958 	.word	0x3b01b958
   1b2d0:	b982d1fa 	.word	0xb982d1fa
   1b2d4:	aa014621 	.word	0xaa014621
   1b2d8:	f7ff4630 	.word	0xf7ff4630
   1b2dc:	b900f8f9 	.word	0xb900f8f9
   1b2e0:	b0056035 	.word	0xb0056035
   1b2e4:	2a00bdf0 	.word	0x2a00bdf0
   1b2e8:	2b01d0f4 	.word	0x2b01d0f4
   1b2ec:	683bd8f2 	.word	0x683bd8f2
   1b2f0:	d3ef459c 	.word	0xd3ef459c
   1b2f4:	4622d9ee 	.word	0x4622d9ee
   1b2f8:	4630a901 	.word	0x4630a901
   1b2fc:	fe18f7ff 	.word	0xfe18f7ff
   1b300:	d1ee2800 	.word	0xd1ee2800
   1b304:	e7eb426d 	.word	0xe7eb426d
   1b308:	f7ffaa01 	.word	0xf7ffaa01
   1b30c:	2800fd6d 	.word	0x2800fd6d
   1b310:	b005d0e6 	.word	0xb005d0e6
   1b314:	bf00bdf0 	.word	0xbf00bdf0

0001b318 <symbol_000b923>:
   1b318:	47f0e92d 	.word	0x47f0e92d
   1b31c:	23004606 	.word	0x23004606
   1b320:	b0862001 	.word	0xb0862001
   1b324:	4690428e 	.word	0x4690428e
   1b328:	90039000 	.word	0x90039000
   1b32c:	3301e9cd 	.word	0x3301e9cd
   1b330:	3304e9cd 	.word	0x3304e9cd
   1b334:	80d1f000 	.word	0x80d1f000
   1b338:	4546460f 	.word	0x4546460f
   1b33c:	80d5f000 	.word	0x80d5f000
   1b340:	b185687d 	.word	0xb185687d
   1b344:	f10568bb 	.word	0xf10568bb
   1b348:	3a014280 	.word	0x3a014280
   1b34c:	1022f853 	.word	0x1022f853
   1b350:	0382eb03 	.word	0x0382eb03
   1b354:	e0bab129 	.word	0xe0bab129
   1b358:	2d04f853 	.word	0x2d04f853
   1b35c:	f0402a00 	.word	0xf0402a00
   1b360:	3d0180b6 	.word	0x3d0180b6
   1b364:	f8d8d1f8 	.word	0xf8d8d1f8
   1b368:	25004004 	.word	0x25004004
   1b36c:	d03d2c00 	.word	0xd03d2c00
   1b370:	3008f8d8 	.word	0x3008f8d8
   1b374:	4280f104 	.word	0x4280f104
   1b378:	f8533a01 	.word	0xf8533a01
   1b37c:	eb031022 	.word	0xeb031022
   1b380:	b1190382 	.word	0xb1190382
   1b384:	f853e004 	.word	0xf853e004
   1b388:	b90a2d04 	.word	0xb90a2d04
   1b38c:	d1fa3c01 	.word	0xd1fa3c01
   1b390:	7310f242 	.word	0x7310f242
   1b394:	0905eb04 	.word	0x0905eb04
   1b398:	f2004599 	.word	0xf2004599
   1b39c:	f8d680b0 	.word	0xf8d680b0
   1b3a0:	45d1a004 	.word	0x45d1a004
   1b3a4:	2104d925 	.word	0x2104d925
   1b3a8:	f0024648 	.word	0xf0024648
   1b3ac:	4682fbf3 	.word	0x4682fbf3
   1b3b0:	f0002800 	.word	0xf0002800
   1b3b4:	68b180a4 	.word	0x68b180a4
   1b3b8:	6872b189 	.word	0x6872b189
   1b3bc:	f0090092 	.word	0xf0090092
   1b3c0:	e9d6fa60 	.word	0xe9d6fa60
   1b3c4:	1e532001 	.word	0x1e532001
   1b3c8:	2200b13a 	.word	0x2200b13a
   1b3cc:	1c593b01 	.word	0x1c593b01
   1b3d0:	f1006002 	.word	0xf1006002
   1b3d4:	d1f90004 	.word	0xd1f90004
   1b3d8:	f00268b0 	.word	0xf00268b0
   1b3dc:	e9c6fbef 	.word	0xe9c6fbef
   1b3e0:	ea4f9a01 	.word	0xea4f9a01
   1b3e4:	f8d60289 	.word	0xf8d60289
   1b3e8:	e0259008 	.word	0xe0259008
   1b3ec:	f8d64625 	.word	0xf8d64625
   1b3f0:	f1baa004 	.word	0xf1baa004
   1b3f4:	f0400f00 	.word	0xf0400f00
   1b3f8:	21048085 	.word	0x21048085
   1b3fc:	f0022001 	.word	0xf0022001
   1b400:	4681fbc9 	.word	0x4681fbc9
   1b404:	d07a2800 	.word	0xd07a2800
   1b408:	b18968b1 	.word	0xb18968b1
   1b40c:	00926872 	.word	0x00926872
   1b410:	fa37f009 	.word	0xfa37f009
   1b414:	2001e9d6 	.word	0x2001e9d6
   1b418:	b13a1e53 	.word	0xb13a1e53
   1b41c:	3b014652 	.word	0x3b014652
   1b420:	60021c59 	.word	0x60021c59
   1b424:	0004f100 	.word	0x0004f100
   1b428:	68b0d1f9 	.word	0x68b0d1f9
   1b42c:	fbc6f002 	.word	0xfbc6f002
   1b430:	22042301 	.word	0x22042301
   1b434:	3901e9c6 	.word	0x3901e9c6
   1b438:	46482100 	.word	0x46482100
   1b43c:	fa2cf009 	.word	0xfa2cf009
   1b440:	23012100 	.word	0x23012100
   1b444:	601168b2 	.word	0x601168b2
   1b448:	b19c6033 	.word	0xb19c6033
   1b44c:	4980f104 	.word	0x4980f104
   1b450:	39fff109 	.word	0x39fff109
   1b454:	0989ea4f 	.word	0x0989ea4f
   1b458:	3008f8d8 	.word	0x3008f8d8
   1b45c:	f85368b2 	.word	0xf85368b2
   1b460:	444a3009 	.word	0x444a3009
   1b464:	462868b9 	.word	0x462868b9
   1b468:	fc14f7fe 	.word	0xfc14f7fe
   1b46c:	f1a93c01 	.word	0xf1a93c01
   1b470:	d1f10904 	.word	0xd1f10904
   1b474:	683a2400 	.word	0x683a2400
   1b478:	3000f8d8 	.word	0x3000f8d8
   1b47c:	f302fb03 	.word	0xf302fb03
   1b480:	98056033 	.word	0x98056033
   1b484:	9a04b160 	.word	0x9a04b160
   1b488:	b13a1e53 	.word	0xb13a1e53
   1b48c:	3b012200 	.word	0x3b012200
   1b490:	60021c5d 	.word	0x60021c5d
   1b494:	0004f100 	.word	0x0004f100
   1b498:	9805d1f9 	.word	0x9805d1f9
   1b49c:	fb8ef002 	.word	0xfb8ef002
   1b4a0:	23012200 	.word	0x23012200
   1b4a4:	e9cd9802 	.word	0xe9cd9802
   1b4a8:	92053203 	.word	0x92053203
   1b4ac:	9901b158 	.word	0x9901b158
   1b4b0:	b1311e4b 	.word	0xb1311e4b
   1b4b4:	1c593b01 	.word	0x1c593b01
   1b4b8:	f1006002 	.word	0xf1006002
   1b4bc:	d1f90004 	.word	0xd1f90004
   1b4c0:	f0029802 	.word	0xf0029802
   1b4c4:	4620fb7b 	.word	0x4620fb7b
   1b4c8:	e8bdb006 	.word	0xe8bdb006
   1b4cc:	f8d887f0 	.word	0xf8d887f0
   1b4d0:	2c004004 	.word	0x2c004004
   1b4d4:	af4cf47f 	.word	0xaf4cf47f
   1b4d8:	4668e75a 	.word	0x4668e75a
   1b4dc:	ff8af7fe 	.word	0xff8af7fe
   1b4e0:	28004604 	.word	0x28004604
   1b4e4:	466fd1cd 	.word	0x466fd1cd
   1b4e8:	a803e727 	.word	0xa803e727
   1b4ec:	f7fe4631 	.word	0xf7fe4631
   1b4f0:	4604ff81 	.word	0x4604ff81
   1b4f4:	d1c42800 	.word	0xd1c42800
   1b4f8:	080cf10d 	.word	0x080cf10d
   1b4fc:	f06fe720 	.word	0xf06fe720
   1b500:	e7be040f 	.word	0xe7be040f
   1b504:	e76c46d1 	.word	0xe76c46d1

0001b508 <symbol_0008c0f>:
   1b508:	b5002301 	.word	0xb5002301
   1b50c:	9200b085 	.word	0x9200b085
   1b510:	e9cdaa01 	.word	0xe9cdaa01
   1b514:	f8cd3301 	.word	0xf8cd3301
   1b518:	f7ffd00c 	.word	0xf7ffd00c
   1b51c:	b005fefd 	.word	0xb005fefd
   1b520:	fb04f85d 	.word	0xfb04f85d

0001b524 <symbol_0007bb0>:
   1b524:	4ff0e92d 	.word	0x4ff0e92d
   1b528:	b0a3685e 	.word	0xb0a3685e
   1b52c:	f8d3b196 	.word	0xf8d3b196
   1b530:	f1068008 	.word	0xf1068008
   1b534:	f1094980 	.word	0xf1094980
   1b538:	f85839ff 	.word	0xf85839ff
   1b53c:	eb085029 	.word	0xeb085029
   1b540:	b96d0e89 	.word	0xb96d0e89
   1b544:	463746f4 	.word	0x463746f4
   1b548:	f85ce002 	.word	0xf85ce002
   1b54c:	b93c4d04 	.word	0xb93c4d04
   1b550:	d1fa3f01 	.word	0xd1fa3f01
   1b554:	060bf06f 	.word	0x060bf06f
   1b558:	b0234630 	.word	0xb0234630
   1b55c:	8ff0e8bd 	.word	0x8ff0e8bd
   1b560:	2d00681d 	.word	0x2d00681d
   1b564:	4614d0f6 	.word	0x4614d0f6
   1b568:	2200468a 	.word	0x2200468a
   1b56c:	469b2101 	.word	0x469b2101
   1b570:	46056863 	.word	0x46056863
   1b574:	91139110 	.word	0x91139110
   1b578:	91199116 	.word	0x91199116
   1b57c:	e9cd911c 	.word	0xe9cd911c
   1b580:	e9cd2211 	.word	0xe9cd2211
   1b584:	e9cd2214 	.word	0xe9cd2214
   1b588:	e9cd2217 	.word	0xe9cd2217
   1b58c:	e9cd221a 	.word	0xe9cd221a
   1b590:	2b00221d 	.word	0x2b00221d
   1b594:	821af000 	.word	0x821af000
   1b598:	f10368a2 	.word	0xf10368a2
   1b59c:	39014180 	.word	0x39014180
   1b5a0:	0021f852 	.word	0x0021f852
   1b5a4:	0281eb02 	.word	0x0281eb02
   1b5a8:	e07bb120 	.word	0xe07bb120
   1b5ac:	1d04f852 	.word	0x1d04f852
   1b5b0:	d1772900 	.word	0xd1772900
   1b5b4:	d1f93b01 	.word	0xd1f93b01
   1b5b8:	2029f858 	.word	0x2029f858
   1b5bc:	d1772a00 	.word	0xd1772a00
   1b5c0:	e0034672 	.word	0xe0034672
   1b5c4:	1d04f852 	.word	0x1d04f852
   1b5c8:	d16f2900 	.word	0xd16f2900
   1b5cc:	d1f93e01 	.word	0xd1f93e01
   1b5d0:	4621a810 	.word	0x4621a810
   1b5d4:	ff0ef7fe 	.word	0xff0ef7fe
   1b5d8:	28004606 	.word	0x28004606
   1b5dc:	8092f000 	.word	0x8092f000
   1b5e0:	98122700 	.word	0x98122700
   1b5e4:	9a11b160 	.word	0x9a11b160
   1b5e8:	b13a1e53 	.word	0xb13a1e53
   1b5ec:	3b012200 	.word	0x3b012200
   1b5f0:	60021c5c 	.word	0x60021c5c
   1b5f4:	0004f100 	.word	0x0004f100
   1b5f8:	9812d1f9 	.word	0x9812d1f9
   1b5fc:	fadef002 	.word	0xfadef002
   1b600:	23012200 	.word	0x23012200
   1b604:	e9cd9815 	.word	0xe9cd9815
   1b608:	92123210 	.word	0x92123210
   1b60c:	9914b158 	.word	0x9914b158
   1b610:	b1311e4b 	.word	0xb1311e4b
   1b614:	1c593b01 	.word	0x1c593b01
   1b618:	f1006002 	.word	0xf1006002
   1b61c:	d1f90004 	.word	0xd1f90004
   1b620:	f0029815 	.word	0xf0029815
   1b624:	2200facb 	.word	0x2200facb
   1b628:	98182301 	.word	0x98182301
   1b62c:	3213e9cd 	.word	0x3213e9cd
   1b630:	b1589215 	.word	0xb1589215
   1b634:	1e4b9917 	.word	0x1e4b9917
   1b638:	3b01b131 	.word	0x3b01b131
   1b63c:	60021c5d 	.word	0x60021c5d
   1b640:	0004f100 	.word	0x0004f100
   1b644:	9818d1f9 	.word	0x9818d1f9
   1b648:	fab8f002 	.word	0xfab8f002
   1b64c:	23012200 	.word	0x23012200
   1b650:	e9cd981b 	.word	0xe9cd981b
   1b654:	92183216 	.word	0x92183216
   1b658:	991ab158 	.word	0x991ab158
   1b65c:	b1311e4b 	.word	0xb1311e4b
   1b660:	1c5c3b01 	.word	0x1c5c3b01
   1b664:	f1006002 	.word	0xf1006002
   1b668:	d1f90004 	.word	0xd1f90004
   1b66c:	f002981b 	.word	0xf002981b
   1b670:	2100faa5 	.word	0x2100faa5
   1b674:	911b2301 	.word	0x911b2301
   1b678:	3119e9cd 	.word	0x3119e9cd
   1b67c:	f43f2f00 	.word	0xf43f2f00
   1b680:	9a1daf6b 	.word	0x9a1daf6b
   1b684:	b1321e53 	.word	0xb1321e53
   1b688:	3b01463a 	.word	0x3b01463a
   1b68c:	60111c58 	.word	0x60111c58
   1b690:	0204f102 	.word	0x0204f102
   1b694:	4638d1f9 	.word	0x4638d1f9
   1b698:	fa90f002 	.word	0xfa90f002
   1b69c:	b0234630 	.word	0xb0234630
   1b6a0:	8ff0e8bd 	.word	0x8ff0e8bd
   1b6a4:	2029f858 	.word	0x2029f858
   1b6a8:	d0892a00 	.word	0xd0892a00
   1b6ac:	d38f429e 	.word	0xd38f429e
   1b6b0:	f200429e 	.word	0xf200429e
   1b6b4:	2b008190 	.word	0x2b008190
   1b6b8:	68a1d08a 	.word	0x68a1d08a
   1b6bc:	4280f103 	.word	0x4280f103
   1b6c0:	f8513a01 	.word	0xf8513a01
   1b6c4:	f8580022 	.word	0xf8580022
   1b6c8:	00926022 	.word	0x00926022
   1b6cc:	44114286 	.word	0x44114286
   1b6d0:	f4ff4490 	.word	0xf4ff4490
   1b6d4:	f200af7d 	.word	0xf200af7d
   1b6d8:	460a817e 	.word	0x460a817e
   1b6dc:	f852e008 	.word	0xf852e008
   1b6e0:	f8580d04 	.word	0xf8580d04
   1b6e4:	42881d04 	.word	0x42881d04
   1b6e8:	af72f63f 	.word	0xaf72f63f
   1b6ec:	8173f0c0 	.word	0x8173f0c0
   1b6f0:	d1f43b01 	.word	0xd1f43b01
   1b6f4:	4621a810 	.word	0x4621a810
   1b6f8:	fe7cf7fe 	.word	0xfe7cf7fe
   1b6fc:	28004606 	.word	0x28004606
   1b700:	af6ef47f 	.word	0xaf6ef47f
   1b704:	4659a813 	.word	0x4659a813
   1b708:	fe74f7fe 	.word	0xfe74f7fe
   1b70c:	28004606 	.word	0x28004606
   1b710:	af66f47f 	.word	0xaf66f47f
   1b714:	7210f242 	.word	0x7210f242
   1b718:	68672301 	.word	0x68672301
   1b71c:	37029313 	.word	0x37029313
   1b720:	93104297 	.word	0x93104297
   1b724:	8193f200 	.word	0x8193f200
   1b728:	805cf8dd 	.word	0x805cf8dd
   1b72c:	d91d4547 	.word	0xd91d4547
   1b730:	46382104 	.word	0x46382104
   1b734:	fa2ef002 	.word	0xfa2ef002
   1b738:	28004681 	.word	0x28004681
   1b73c:	8187f000 	.word	0x8187f000
   1b740:	b1819918 	.word	0xb1819918
   1b744:	00929a17 	.word	0x00929a17
   1b748:	f89bf009 	.word	0xf89bf009
   1b74c:	2017e9dd 	.word	0x2017e9dd
   1b750:	b1321e53 	.word	0xb1321e53
   1b754:	1c5a3b01 	.word	0x1c5a3b01
   1b758:	f1006006 	.word	0xf1006006
   1b75c:	d1f90004 	.word	0xd1f90004
   1b760:	f0029818 	.word	0xf0029818
   1b764:	46b8fa2b 	.word	0x46b8fa2b
   1b768:	7917e9cd 	.word	0x7917e9cd
   1b76c:	0f00f1b8 	.word	0x0f00f1b8
   1b770:	8171f000 	.word	0x8171f000
   1b774:	ea4f9e18 	.word	0xea4f9e18
   1b778:	27000288 	.word	0x27000288
   1b77c:	46394630 	.word	0x46394630
   1b780:	f88af009 	.word	0xf88af009
   1b784:	9b182201 	.word	0x9b182201
   1b788:	9b1a601f 	.word	0x9b1a601f
   1b78c:	42939216 	.word	0x42939216
   1b790:	81b2f240 	.word	0x81b2f240
   1b794:	20032104 	.word	0x20032104
   1b798:	f9fcf002 	.word	0xf9fcf002
   1b79c:	28004607 	.word	0x28004607
   1b7a0:	8155f000 	.word	0x8155f000
   1b7a4:	9a142303 	.word	0x9a142303
   1b7a8:	301de9cd 	.word	0x301de9cd
   1b7ac:	2a009203 	.word	0x2a009203
   1b7b0:	8171f000 	.word	0x8171f000
   1b7b4:	0901f1b2 	.word	0x0901f1b2
   1b7b8:	f0009915 	.word	0xf0009915
   1b7bc:	f85181cf 	.word	0xf85181cf
   1b7c0:	28000029 	.word	0x28000029
   1b7c4:	81c5f040 	.word	0x81c5f040
   1b7c8:	4280f102 	.word	0x4280f102
   1b7cc:	464b3a01 	.word	0x464b3a01
   1b7d0:	0282eb01 	.word	0x0282eb01
   1b7d4:	f852e004 	.word	0xf852e004
   1b7d8:	28000d04 	.word	0x28000d04
   1b7dc:	81aef040 	.word	0x81aef040
   1b7e0:	d1f83b01 	.word	0xd1f83b01
   1b7e4:	68082620 	.word	0x68082620
   1b7e8:	f04f2200 	.word	0xf04f2200
   1b7ec:	e0024100 	.word	0xe0024100
   1b7f0:	2a203201 	.word	0x2a203201
   1b7f4:	4201d004 	.word	0x4201d004
   1b7f8:	0151ea4f 	.word	0x0151ea4f
   1b7fc:	1ab3d0f8 	.word	0x1ab3d0f8
   1b800:	031ff003 	.word	0x031ff003
   1b804:	f0402b1f 	.word	0xf0402b1f
   1b808:	2300819f 	.word	0x2300819f
   1b80c:	9b119302 	.word	0x9b119302
   1b810:	9304a813 	.word	0x9304a813
   1b814:	eba33b01 	.word	0xeba33b01
   1b818:	93010809 	.word	0x93010809
   1b81c:	1348ea4f 	.word	0x1348ea4f
   1b820:	93054619 	.word	0x93054619
   1b824:	f8fef7ff 	.word	0xf8fef7ff
   1b828:	28004606 	.word	0x28004606
   1b82c:	aed9f47f 	.word	0xaed9f47f
   1b830:	0888ea4f 	.word	0x0888ea4f
   1b834:	9818e00d 	.word	0x9818e00d
   1b838:	f850a910 	.word	0xf850a910
   1b83c:	aa133008 	.word	0xaa133008
   1b840:	f8403301 	.word	0xf8403301
   1b844:	46083008 	.word	0x46083008
   1b848:	fca6f7ff 	.word	0xfca6f7ff
   1b84c:	f0402800 	.word	0xf0402800
   1b850:	a9138179 	.word	0xa9138179
   1b854:	f7ffa810 	.word	0xf7ffa810
   1b858:	2800fa0b 	.word	0x2800fa0b
   1b85c:	9905daeb 	.word	0x9905daeb
   1b860:	f7ffa813 	.word	0xf7ffa813
   1b864:	4606f995 	.word	0x4606f995
   1b868:	f47f2800 	.word	0xf47f2800
   1b86c:	f06faeba 	.word	0xf06faeba
   1b870:	9a030303 	.word	0x9a030303
   1b874:	b508e9cd 	.word	0xb508e9cd
   1b878:	4780f102 	.word	0x4780f102
   1b87c:	fb039a04 	.word	0xfb039a04
   1b880:	f102f309 	.word	0xf102f309
   1b884:	3a024280 	.word	0x3a024280
   1b888:	46150092 	.word	0x46150092
   1b88c:	ea4f9305 	.word	0xea4f9305
   1b890:	93030389 	.word	0x93030389
   1b894:	63c9ebc9 	.word	0x63c9ebc9
   1b898:	e9cd3f02 	.word	0xe9cd3f02
   1b89c:	e9cd3006 	.word	0xe9cd3006
   1b8a0:	00b9a40a 	.word	0x00b9a40a
   1b8a4:	9b019104 	.word	0x9b019104
   1b8a8:	f240454b 	.word	0xf240454b
   1b8ac:	98038173 	.word	0x98038173
   1b8b0:	9a159912 	.word	0x9a159912
   1b8b4:	0a04f105 	.word	0x0a04f105
   1b8b8:	f8515812 	.word	0xf8515812
   1b8bc:	9805300a 	.word	0x9805300a
   1b8c0:	eb004293 	.word	0xeb004293
   1b8c4:	9e180405 	.word	0x9e180405
   1b8c8:	814cf0c0 	.word	0x814cf0c0
   1b8cc:	33fff04f 	.word	0x33fff04f
   1b8d0:	26015133 	.word	0x26015133
   1b8d4:	9f1e9a18 	.word	0x9f1e9a18
   1b8d8:	f1a55913 	.word	0xf1a55913
   1b8dc:	44330b04 	.word	0x44330b04
   1b8e0:	e04b5113 	.word	0xe04b5113
   1b8e4:	806cf8dd 	.word	0x806cf8dd
   1b8e8:	46400092 	.word	0x46400092
   1b8ec:	f0082100 	.word	0xf0082100
   1b8f0:	2200ffd3 	.word	0x2200ffd3
   1b8f4:	601a9b1b 	.word	0x601a9b1b
   1b8f8:	f1b99619 	.word	0xf1b99619
   1b8fc:	f0000f00 	.word	0xf0000f00
   1b900:	9b1580f9 	.word	0x9b1580f9
   1b904:	589b9a04 	.word	0x589b9a04
   1b908:	99039a1b 	.word	0x99039a1b
   1b90c:	9a156013 	.word	0x9a156013
   1b910:	58529b1b 	.word	0x58529b1b
   1b914:	605aa919 	.word	0x605aa919
   1b918:	f10d9b18 	.word	0xf10d9b18
   1b91c:	591b083c 	.word	0x591b083c
   1b920:	4608aa1f 	.word	0x4608aa1f
   1b924:	e9cd930f 	.word	0xe9cd930f
   1b928:	f8cd661f 	.word	0xf8cd661f
   1b92c:	f7ff8084 	.word	0xf7ff8084
   1b930:	2800fcf3 	.word	0x2800fcf3
   1b934:	8106f040 	.word	0x8106f040
   1b938:	2a009a1d 	.word	0x2a009a1d
   1b93c:	80c2f000 	.word	0x80c2f000
   1b940:	21000092 	.word	0x21000092
   1b944:	f0084638 	.word	0xf0084638
   1b948:	2300ffa7 	.word	0x2300ffa7
   1b94c:	9b01603b 	.word	0x9b01603b
   1b950:	2b01961c 	.word	0x2b01961c
   1b954:	9b12a91c 	.word	0x9b12a91c
   1b958:	80edf000 	.word	0x80edf000
   1b95c:	300bf853 	.word	0x300bf853
   1b960:	603ba819 	.word	0x603ba819
   1b964:	595b9b12 	.word	0x595b9b12
   1b968:	9b12607b 	.word	0x9b12607b
   1b96c:	300af853 	.word	0x300af853
   1b970:	f7ff60bb 	.word	0xf7ff60bb
   1b974:	2800f97d 	.word	0x2800f97d
   1b978:	811cf340 	.word	0x811cf340
   1b97c:	59139a18 	.word	0x59139a18
   1b980:	51133b01 	.word	0x51133b01
   1b984:	2a009a1a 	.word	0x2a009a1a
   1b988:	2104d1ac 	.word	0x2104d1ac
   1b98c:	f0022001 	.word	0xf0022001
   1b990:	4680f901 	.word	0x4680f901
   1b994:	f0002800 	.word	0xf0002800
   1b998:	991b8140 	.word	0x991b8140
   1b99c:	9a1ab191 	.word	0x9a1ab191
   1b9a0:	f0080092 	.word	0xf0080092
   1b9a4:	e9ddff6e 	.word	0xe9ddff6e
   1b9a8:	4602101a 	.word	0x4602101a
   1b9ac:	b1391e4b 	.word	0xb1391e4b
   1b9b0:	3b012100 	.word	0x3b012100
   1b9b4:	1c596011 	.word	0x1c596011
   1b9b8:	0204f102 	.word	0x0204f102
   1b9bc:	981bd1f8 	.word	0x981bd1f8
   1b9c0:	f8fcf002 	.word	0xf8fcf002
   1b9c4:	e9cd2204 	.word	0xe9cd2204
   1b9c8:	e78e681a 	.word	0xe78e681a
   1b9cc:	2029f858 	.word	0x2029f858
   1b9d0:	f43f2a00 	.word	0xf43f2a00
   1b9d4:	b355adf5 	.word	0xb355adf5
   1b9d8:	b9ee686e 	.word	0xb9ee686e
   1b9dc:	20012104 	.word	0x20012104
   1b9e0:	f8d8f002 	.word	0xf8d8f002
   1b9e4:	b3904607 	.word	0xb3904607
   1b9e8:	b18168a9 	.word	0xb18168a9
   1b9ec:	0092686a 	.word	0x0092686a
   1b9f0:	ff47f008 	.word	0xff47f008
   1b9f4:	2001e9d5 	.word	0x2001e9d5
   1b9f8:	b1321e53 	.word	0xb1321e53
   1b9fc:	1c593b01 	.word	0x1c593b01
   1ba00:	f1006006 	.word	0xf1006006
   1ba04:	d1f90004 	.word	0xd1f90004
   1ba08:	f00268a8 	.word	0xf00268a8
   1ba0c:	2301f8d7 	.word	0x2301f8d7
   1ba10:	e9c52204 	.word	0xe9c52204
   1ba14:	e0013701 	.word	0xe0013701
   1ba18:	00b268af 	.word	0x00b268af
   1ba1c:	46382100 	.word	0x46382100
   1ba20:	ff3af008 	.word	0xff3af008
   1ba24:	23012100 	.word	0x23012100
   1ba28:	601168aa 	.word	0x601168aa
   1ba2c:	f1ba602b 	.word	0xf1ba602b
   1ba30:	d0070f00 	.word	0xd0070f00
   1ba34:	46504621 	.word	0x46504621
   1ba38:	fcdcf7fe 	.word	0xfcdcf7fe
   1ba3c:	28004606 	.word	0x28004606
   1ba40:	adcef47f 	.word	0xadcef47f
   1ba44:	46302600 	.word	0x46302600
   1ba48:	e8bdb023 	.word	0xe8bdb023
   1ba4c:	27008ff0 	.word	0x27008ff0
   1ba50:	060ff06f 	.word	0x060ff06f
   1ba54:	2104e5c5 	.word	0x2104e5c5
   1ba58:	f0022001 	.word	0xf0022001
   1ba5c:	4606f89b 	.word	0x4606f89b
   1ba60:	d0f42800 	.word	0xd0f42800
   1ba64:	b1899918 	.word	0xb1899918
   1ba68:	00929a17 	.word	0x00929a17
   1ba6c:	ff09f008 	.word	0xff09f008
   1ba70:	3017e9dd 	.word	0x3017e9dd
   1ba74:	b13b1e5a 	.word	0xb13b1e5a
   1ba78:	3a014643 	.word	0x3a014643
   1ba7c:	60031c57 	.word	0x60031c57
   1ba80:	0004f100 	.word	0x0004f100
   1ba84:	9818d1f9 	.word	0x9818d1f9
   1ba88:	f898f002 	.word	0xf898f002
   1ba8c:	22042301 	.word	0x22042301
   1ba90:	3617e9cd 	.word	0x3617e9cd
   1ba94:	231fe671 	.word	0x231fe671
   1ba98:	93024619 	.word	0x93024619
   1ba9c:	f7fea810 	.word	0xf7fea810
   1baa0:	4606ffc1 	.word	0x4606ffc1
   1baa4:	f47f2800 	.word	0xf47f2800
   1baa8:	9902ad9c 	.word	0x9902ad9c
   1baac:	f7fea813 	.word	0xf7fea813
   1bab0:	4606ffb9 	.word	0x4606ffb9
   1bab4:	f47f2800 	.word	0xf47f2800
   1bab8:	9b14ad94 	.word	0x9b14ad94
   1babc:	f1039303 	.word	0xf1039303
   1bac0:	e6a439ff 	.word	0xe6a439ff
   1bac4:	20012104 	.word	0x20012104
   1bac8:	f002920d 	.word	0xf002920d
   1bacc:	4603f863 	.word	0x4603f863
   1bad0:	f0002800 	.word	0xf0002800
   1bad4:	b14780a2 	.word	0xb14780a2
   1bad8:	46399a0d 	.word	0x46399a0d
   1badc:	f008900c 	.word	0xf008900c
   1bae0:	4638fed0 	.word	0x4638fed0
   1bae4:	f86af002 	.word	0xf86af002
   1bae8:	461f9b0c 	.word	0x461f9b0c
   1baec:	e9cd2204 	.word	0xe9cd2204
   1baf0:	e726631d 	.word	0xe726631d
   1baf4:	e707464b 	.word	0xe707464b
   1baf8:	20022104 	.word	0x20022104
   1bafc:	f84af002 	.word	0xf84af002
   1bb00:	28004606 	.word	0x28004606
   1bb04:	991bd0a3 	.word	0x991bd0a3
   1bb08:	9a1ab189 	.word	0x9a1ab189
   1bb0c:	f0080092 	.word	0xf0080092
   1bb10:	e9ddfeb8 	.word	0xe9ddfeb8
   1bb14:	4618131a 	.word	0x4618131a
   1bb18:	b1311e4a 	.word	0xb1311e4a
   1bb1c:	1c503a01 	.word	0x1c503a01
   1bb20:	f103601f 	.word	0xf103601f
   1bb24:	d1f90304 	.word	0xd1f90304
   1bb28:	f002981b 	.word	0xf002981b
   1bb2c:	2302f847 	.word	0x2302f847
   1bb30:	361ae9cd 	.word	0x361ae9cd
   1bb34:	595be62e 	.word	0x595be62e
   1bb38:	e715a819 	.word	0xe715a819
   1bb3c:	f103015b 	.word	0xf103015b
   1bb40:	e6510620 	.word	0xe6510620
   1bb44:	e54c4606 	.word	0xe54c4606
   1bb48:	031ff1c3 	.word	0x031ff1c3
   1bb4c:	46199302 	.word	0x46199302
   1bb50:	ea4fe7a4 	.word	0xea4fe7a4
   1bb54:	f1031349 	.word	0xf1031349
   1bb58:	e6450620 	.word	0xe6450620
   1bb5c:	26206808 	.word	0x26206808
   1bb60:	e641464b 	.word	0xe641464b
   1bb64:	b192594f 	.word	0xb192594f
   1bb68:	f04f469c 	.word	0xf04f469c
   1bb6c:	46610b00 	.word	0x46610b00
   1bb70:	ea4b465b 	.word	0xea4b465b
   1bb74:	f7f00007 	.word	0xf7f00007
   1bb78:	2300fd5f 	.word	0x2300fd5f
   1bb7c:	32fff04f 	.word	0x32fff04f
   1bb80:	bf08428b 	.word	0xbf08428b
   1bb84:	d2004282 	.word	0xd2004282
   1bb88:	51304610 	.word	0x51304610
   1bb8c:	f04fe6a1 	.word	0xf04fe6a1
   1bb90:	e7fa30ff 	.word	0xe7fa30ff
   1bb94:	6b07e9dd 	.word	0x6b07e9dd
   1bb98:	5a09e9dd 	.word	0x5a09e9dd
   1bb9c:	2d009c0b 	.word	0x2d009c0b
   1bba0:	a916d05f 	.word	0xa916d05f
   1bba4:	f7fe4628 	.word	0xf7fe4628
   1bba8:	2800fc25 	.word	0x2800fc25
   1bbac:	4606d053 	.word	0x4606d053
   1bbb0:	e5169f1e 	.word	0xe5169f1e
   1bbb4:	9b182501 	.word	0x9b182501
   1bbb8:	591baa1f 	.word	0x591baa1f
   1bbbc:	a819a913 	.word	0xa819a913
   1bbc0:	f8cd930f 	.word	0xf8cd930f
   1bbc4:	e9cd8084 	.word	0xe9cd8084
   1bbc8:	f7ff551f 	.word	0xf7ff551f
   1bbcc:	2800fba5 	.word	0x2800fba5
   1bbd0:	9b06d1b8 	.word	0x9b06d1b8
   1bbd4:	f1039a01 	.word	0xf1039a01
   1bbd8:	3b016300 	.word	0x3b016300
   1bbdc:	015e4413 	.word	0x015e4413
   1bbe0:	a8194631 	.word	0xa8194631
   1bbe4:	ff1ef7fe 	.word	0xff1ef7fe
   1bbe8:	d1ab2800 	.word	0xd1ab2800
   1bbec:	aa19a910 	.word	0xaa19a910
   1bbf0:	f7ff4608 	.word	0xf7ff4608
   1bbf4:	4603fad1 	.word	0x4603fad1
   1bbf8:	a91fbb58 	.word	0xa91fbb58
   1bbfc:	930fa810 	.word	0x930fa810
   1bc00:	551fe9cd 	.word	0x551fe9cd
   1bc04:	8084f8cd 	.word	0x8084f8cd
   1bc08:	fb2ef7fe 	.word	0xfb2ef7fe
   1bc0c:	db072800 	.word	0xdb072800
   1bc10:	465d9b01 	.word	0x465d9b01
   1bc14:	93013b01 	.word	0x93013b01
   1bc18:	f06fe645 	.word	0xf06fe645
   1bc1c:	e4e0060f 	.word	0xe4e0060f
   1bc20:	a819a913 	.word	0xa819a913
   1bc24:	fbe6f7fe 	.word	0xfbe6f7fe
   1bc28:	d18b2800 	.word	0xd18b2800
   1bc2c:	a8194631 	.word	0xa8194631
   1bc30:	fef8f7fe 	.word	0xfef8f7fe
   1bc34:	d1852800 	.word	0xd1852800
   1bc38:	aa19a910 	.word	0xaa19a910
   1bc3c:	f7ff4608 	.word	0xf7ff4608
   1bc40:	2800fa37 	.word	0x2800fa37
   1bc44:	af7ef47f 	.word	0xaf7ef47f
   1bc48:	59139a18 	.word	0x59139a18
   1bc4c:	51133b01 	.word	0x51133b01
   1bc50:	4606e7de 	.word	0x4606e7de
   1bc54:	f8dbe4c5 	.word	0xf8dbe4c5
   1bc58:	68223000 	.word	0x68223000
   1bc5c:	f302fb03 	.word	0xf302fb03
   1bc60:	f1ba602b 	.word	0xf1ba602b
   1bc64:	d0050f00 	.word	0xd0050f00
   1bc68:	a8109902 	.word	0xa8109902
   1bc6c:	ff90f7fe 	.word	0xff90f7fe
   1bc70:	b1084606 	.word	0xb1084606
   1bc74:	e4b49f1e 	.word	0xe4b49f1e
   1bc78:	a9106823 	.word	0xa9106823
   1bc7c:	93104650 	.word	0x93104650
   1bc80:	fbb8f7fe 	.word	0xfbb8f7fe
   1bc84:	28004606 	.word	0x28004606
   1bc88:	2401d1f4 	.word	0x2401d1f4
   1bc8c:	a91fab0f 	.word	0xa91fab0f
   1bc90:	960f4650 	.word	0x960f4650
   1bc94:	441fe9cd 	.word	0x441fe9cd
   1bc98:	f7fe9321 	.word	0xf7fe9321
   1bc9c:	2800fae5 	.word	0x2800fae5
   1bca0:	f8cad1e8 	.word	0xf8cad1e8
   1bca4:	e7e54000 	.word	0xe7e54000

0001bca8 <symbol_000dbba>:
   1bca8:	41f0e92d 	.word	0x41f0e92d
   1bcac:	46176853 	.word	0x46176853
   1bcb0:	6894b183 	.word	0x6894b183
   1bcb4:	4580f103 	.word	0x4580f103
   1bcb8:	f8543d01 	.word	0xf8543d01
   1bcbc:	eb042025 	.word	0xeb042025
   1bcc0:	b12a0485 	.word	0xb12a0485
   1bcc4:	f854e11a 	.word	0xf854e11a
   1bcc8:	2d005d04 	.word	0x2d005d04
   1bccc:	8116f040 	.word	0x8116f040
   1bcd0:	d1f83b01 	.word	0xd1f83b01
   1bcd4:	4606460a 	.word	0x4606460a
   1bcd8:	463b4601 	.word	0x463b4601
   1bcdc:	f7ff2000 	.word	0xf7ff2000
   1bce0:	2800fc21 	.word	0x2800fc21
   1bce4:	f06fd151 	.word	0xf06fd151
   1bce8:	68714840 	.word	0x68714840
   1bcec:	68b0b191 	.word	0x68b0b191
   1bcf0:	0308eb01 	.word	0x0308eb01
   1bcf4:	c023f850 	.word	0xc023f850
   1bcf8:	0283eb00 	.word	0x0283eb00
   1bcfc:	0f00f1bc 	.word	0x0f00f1bc
   1bd00:	4614d156 	.word	0x4614d156
   1bd04:	e003460b 	.word	0xe003460b
   1bd08:	5d04f854 	.word	0x5d04f854
   1bd0c:	d14f2d00 	.word	0xd14f2d00
   1bd10:	d1f93b01 	.word	0xd1f93b01
   1bd14:	4440f06f 	.word	0x4440f06f
   1bd18:	46304639 	.word	0x46304639
   1bd1c:	ffa8f7fe 	.word	0xffa8f7fe
   1bd20:	db422800 	.word	0xdb422800
   1bd24:	683b6835 	.word	0x683b6835
   1bd28:	f305fb03 	.word	0xf305fb03
   1bd2c:	dd2e2b00 	.word	0xdd2e2b00
   1bd30:	687a6873 	.word	0x687a6873
   1bd34:	68b1b183 	.word	0x68b1b183
   1bd38:	f8511918 	.word	0xf8511918
   1bd3c:	eb01c020 	.word	0xeb01c020
   1bd40:	f1bc0180 	.word	0xf1bc0180
   1bd44:	d0050f00 	.word	0xd0050f00
   1bd48:	f851e090 	.word	0xf851e090
   1bd4c:	28000d04 	.word	0x28000d04
   1bd50:	808cf040 	.word	0x808cf040
   1bd54:	d1f83b01 	.word	0xd1f83b01
   1bd58:	f8d7b18a 	.word	0xf8d7b18a
   1bd5c:	1911c008 	.word	0x1911c008
   1bd60:	0021f85c 	.word	0x0021f85c
   1bd64:	f0402800 	.word	0xf0402800
   1bd68:	eb0c80be 	.word	0xeb0c80be
   1bd6c:	e0040181 	.word	0xe0040181
   1bd70:	0d04f851 	.word	0x0d04f851
   1bd74:	f0402800 	.word	0xf0402800
   1bd78:	3a018083 	.word	0x3a018083
   1bd7c:	463ad1f8 	.word	0x463ad1f8
   1bd80:	46304631 	.word	0x46304631
   1bd84:	f8d4f7ff 	.word	0xf8d4f7ff
   1bd88:	e8bdb140 	.word	0xe8bdb140
   1bd8c:	463a81f0 	.word	0x463a81f0
   1bd90:	46304631 	.word	0x46304631
   1bd94:	f828f7ff 	.word	0xf828f7ff
   1bd98:	d1f62800 	.word	0xd1f62800
   1bd9c:	46396035 	.word	0x46396035
   1bda0:	f7fe4630 	.word	0xf7fe4630
   1bda4:	2800ff65 	.word	0x2800ff65
   1bda8:	2000dabc 	.word	0x2000dabc
   1bdac:	81f0e8bd 	.word	0x81f0e8bd
   1bdb0:	2c006834 	.word	0x2c006834
   1bdb4:	683bdaae 	.word	0x683bdaae
   1bdb8:	f304fb03 	.word	0xf304fb03
   1bdbc:	da232b00 	.word	0xda232b00
   1bdc0:	0f00f1bc 	.word	0x0f00f1bc
   1bdc4:	4613d129 	.word	0x4613d129
   1bdc8:	f853e002 	.word	0xf853e002
   1bdcc:	bb222d04 	.word	0xbb222d04
   1bdd0:	d1fa3901 	.word	0xd1fa3901
   1bdd4:	b173687b 	.word	0xb173687b
   1bdd8:	c008f8d7 	.word	0xc008f8d7
   1bddc:	0208eb03 	.word	0x0208eb03
   1bde0:	5022f85c 	.word	0x5022f85c
   1bde4:	0282eb0c 	.word	0x0282eb0c
   1bde8:	e071b11d 	.word	0xe071b11d
   1bdec:	5d04f852 	.word	0x5d04f852
   1bdf0:	3b01bb05 	.word	0x3b01bb05
   1bdf4:	463ad1fa 	.word	0x463ad1fa
   1bdf8:	46304631 	.word	0x46304631
   1bdfc:	f898f7ff 	.word	0xf898f7ff
   1be00:	d1c22800 	.word	0xd1c22800
   1be04:	e7706034 	.word	0xe7706034
   1be08:	4631463a 	.word	0x4631463a
   1be0c:	f7fe4630 	.word	0xf7fe4630
   1be10:	2800ffeb 	.word	0x2800ffeb
   1be14:	e8bdd0f6 	.word	0xe8bdd0f6
   1be18:	687b81f0 	.word	0x687b81f0
   1be1c:	d0ea2b00 	.word	0xd0ea2b00
   1be20:	c008f8d7 	.word	0xc008f8d7
   1be24:	0208eb03 	.word	0x0208eb03
   1be28:	5022f85c 	.word	0x5022f85c
   1be2c:	0282eb0c 	.word	0x0282eb0c
   1be30:	d0de2d00 	.word	0xd0de2d00
   1be34:	d8de4299 	.word	0xd8de4299
   1be38:	2900d34a 	.word	0x2900d34a
   1be3c:	eb01d0db 	.word	0xeb01d0db
   1be40:	f8500308 	.word	0xf8500308
   1be44:	f85c2023 	.word	0xf85c2023
   1be48:	009b5023 	.word	0x009b5023
   1be4c:	44184295 	.word	0x44184295
   1be50:	d3d04463 	.word	0xd3d04463
   1be54:	e03bd907 	.word	0xe03bd907
   1be58:	5d04f850 	.word	0x5d04f850
   1be5c:	2d04f853 	.word	0x2d04f853
   1be60:	d8c84295 	.word	0xd8c84295
   1be64:	3901d334 	.word	0x3901d334
   1be68:	e7c4d1f6 	.word	0xe7c4d1f6
   1be6c:	d0862a00 	.word	0xd0862a00
   1be70:	c008f8d7 	.word	0xc008f8d7
   1be74:	f85c1911 	.word	0xf85c1911
   1be78:	28000021 	.word	0x28000021
   1be7c:	af75f43f 	.word	0xaf75f43f
   1be80:	f63f4293 	.word	0xf63f4293
   1be84:	d32eaf7c 	.word	0xd32eaf7c
   1be88:	f43f2b00 	.word	0xf43f2b00
   1be8c:	68b1af78 	.word	0x68b1af78
   1be90:	f851191a 	.word	0xf851191a
   1be94:	f85c0022 	.word	0xf85c0022
   1be98:	0092e022 	.word	0x0092e022
   1be9c:	44114586 	.word	0x44114586
   1bea0:	f4ff4462 	.word	0xf4ff4462
   1bea4:	d908af6c 	.word	0xd908af6c
   1bea8:	f851e01d 	.word	0xf851e01d
   1beac:	f852cd04 	.word	0xf852cd04
   1beb0:	45840d04 	.word	0x45840d04
   1beb4:	af63f63f 	.word	0xaf63f63f
   1beb8:	3b01d315 	.word	0x3b01d315
   1bebc:	463ad1f5 	.word	0x463ad1f5
   1bec0:	46304631 	.word	0x46304631
   1bec4:	f834f7ff 	.word	0xf834f7ff
   1bec8:	f47f2800 	.word	0xf47f2800
   1becc:	e765af5e 	.word	0xe765af5e
   1bed0:	46394632 	.word	0x46394632
   1bed4:	f7ff4630 	.word	0xf7ff4630
   1bed8:	2800f82b 	.word	0x2800f82b
   1bedc:	af55f47f 	.word	0xaf55f47f
   1bee0:	60344264 	.word	0x60344264
   1bee4:	4632e701 	.word	0x4632e701
   1bee8:	46304639 	.word	0x46304639
   1beec:	f820f7ff 	.word	0xf820f7ff
   1bef0:	f47f2800 	.word	0xf47f2800
   1bef4:	426daf4a 	.word	0x426daf4a
   1bef8:	e70d6035 	.word	0xe70d6035
   1befc:	2b00683b 	.word	0x2b00683b
   1bf00:	aee8f6bf 	.word	0xaee8f6bf
   1bf04:	0009f06f 	.word	0x0009f06f
   1bf08:	bf00e73f 	.word	0xbf00e73f

0001bf0c <symbol_0005f38>:
   1bf0c:	41f0e92d 	.word	0x41f0e92d
   1bf10:	2501460f 	.word	0x2501460f
   1bf14:	68bb2100 	.word	0x68bb2100
   1bf18:	4604b086 	.word	0x4604b086
   1bf1c:	95004616 	.word	0x95004616
   1bf20:	e9cd9503 	.word	0xe9cd9503
   1bf24:	e9cd1101 	.word	0xe9cd1101
   1bf28:	2b001104 	.word	0x2b001104
   1bf2c:	6879d040 	.word	0x6879d040
   1bf30:	d0111e4a 	.word	0xd0111e4a
   1bf34:	0022f853 	.word	0x0022f853
   1bf38:	f0402800 	.word	0xf0402800
   1bf3c:	f10180c4 	.word	0xf10180c4
   1bf40:	39014180 	.word	0x39014180
   1bf44:	0381eb03 	.word	0x0381eb03
   1bf48:	f853e004 	.word	0xf853e004
   1bf4c:	29001d04 	.word	0x29001d04
   1bf50:	80b9f040 	.word	0x80b9f040
   1bf54:	d1f83a01 	.word	0xd1f83a01
   1bf58:	683b2501 	.word	0x683b2501
   1bf5c:	21049300 	.word	0x21049300
   1bf60:	f0014628 	.word	0xf0014628
   1bf64:	4680fe17 	.word	0x4680fe17
   1bf68:	f0002800 	.word	0xf0002800
   1bf6c:	9902813c 	.word	0x9902813c
   1bf70:	9a01b189 	.word	0x9a01b189
   1bf74:	f0080092 	.word	0xf0080092
   1bf78:	e9ddfc84 	.word	0xe9ddfc84
   1bf7c:	1e532001 	.word	0x1e532001
   1bf80:	2200b13a 	.word	0x2200b13a
   1bf84:	1c593b01 	.word	0x1c593b01
   1bf88:	f1006002 	.word	0xf1006002
   1bf8c:	d1f90004 	.word	0xd1f90004
   1bf90:	f0019802 	.word	0xf0019802
   1bf94:	e9cdfe13 	.word	0xe9cdfe13
   1bf98:	00ad5801 	.word	0x00ad5801
   1bf9c:	2100462a 	.word	0x2100462a
   1bfa0:	f0084640 	.word	0xf0084640
   1bfa4:	462afc79 	.word	0x462afc79
   1bfa8:	980268b9 	.word	0x980268b9
   1bfac:	fc69f008 	.word	0xfc69f008
   1bfb0:	a8034631 	.word	0xa8034631
   1bfb4:	fa1ef7fe 	.word	0xfa1ef7fe
   1bfb8:	28004607 	.word	0x28004607
   1bfbc:	9e01d15d 	.word	0x9e01d15d
   1bfc0:	f0002e00 	.word	0xf0002e00
   1bfc4:	4601810e 	.word	0x4601810e
   1bfc8:	3d049d02 	.word	0x3d049d02
   1bfcc:	f8552200 	.word	0xf8552200
   1bfd0:	e0040f04 	.word	0xe0040f04
   1bfd4:	f1012a20 	.word	0xf1012a20
   1bfd8:	f0000101 	.word	0xf0000101
   1bfdc:	fa208081 	.word	0xfa208081
   1bfe0:	f013f302 	.word	0xf013f302
   1bfe4:	f1020301 	.word	0xf1020301
   1bfe8:	d0f30201 	.word	0xd0f30201
   1bfec:	b1b59d04 	.word	0xb1b59d04
   1bff0:	46842000 	.word	0x46842000
   1bff4:	3f049f05 	.word	0x3f049f05
   1bff8:	f8572200 	.word	0xf8572200
   1bffc:	e0036f04 	.word	0xe0036f04
   1c000:	f1002a20 	.word	0xf1002a20
   1c004:	d0710001 	.word	0xd0710001
   1c008:	f302fa26 	.word	0xf302fa26
   1c00c:	0301f013 	.word	0x0301f013
   1c010:	0201f102 	.word	0x0201f102
   1c014:	4281d0f4 	.word	0x4281d0f4
   1c018:	4601bf28 	.word	0x4601bf28
   1c01c:	4668460d 	.word	0x4668460d
   1c020:	f7fe4629 	.word	0xf7fe4629
   1c024:	4607fdb5 	.word	0x4607fdb5
   1c028:	4629bb38 	.word	0x4629bb38
   1c02c:	f7fea803 	.word	0xf7fea803
   1c030:	4607fdaf 	.word	0x4607fdaf
   1c034:	2301bb08 	.word	0x2301bb08
   1c038:	4640f06f 	.word	0x4640f06f
   1c03c:	93009303 	.word	0x93009303
   1c040:	b17f9f01 	.word	0xb17f9f01
   1c044:	19ba9802 	.word	0x19ba9802
   1c048:	3022f850 	.word	0x3022f850
   1c04c:	0282eb00 	.word	0x0282eb00
   1c050:	d1512b00 	.word	0xd1512b00
   1c054:	e003463b 	.word	0xe003463b
   1c058:	1d04f852 	.word	0x1d04f852
   1c05c:	d14b2900 	.word	0xd14b2900
   1c060:	d1f93b01 	.word	0xd1f93b01
   1c064:	a8034629 	.word	0xa8034629
   1c068:	fcdcf7fe 	.word	0xfcdcf7fe
   1c06c:	b9204607 	.word	0xb9204607
   1c070:	4620a903 	.word	0x4620a903
   1c074:	f9bef7fe 	.word	0xf9bef7fe
   1c078:	98024607 	.word	0x98024607
   1c07c:	9a01b160 	.word	0x9a01b160
   1c080:	b13a1e53 	.word	0xb13a1e53
   1c084:	3b012200 	.word	0x3b012200
   1c088:	60021c5c 	.word	0x60021c5c
   1c08c:	0004f100 	.word	0x0004f100
   1c090:	9802d1f9 	.word	0x9802d1f9
   1c094:	fd92f001 	.word	0xfd92f001
   1c098:	23012200 	.word	0x23012200
   1c09c:	e9cd9805 	.word	0xe9cd9805
   1c0a0:	92023200 	.word	0x92023200
   1c0a4:	9904b158 	.word	0x9904b158
   1c0a8:	b1311e4b 	.word	0xb1311e4b
   1c0ac:	1c593b01 	.word	0x1c593b01
   1c0b0:	f1006002 	.word	0xf1006002
   1c0b4:	d1f90004 	.word	0xd1f90004
   1c0b8:	f0019805 	.word	0xf0019805
   1c0bc:	4638fd7f 	.word	0x4638fd7f
   1c0c0:	e8bdb006 	.word	0xe8bdb006
   1c0c4:	f24281f0 	.word	0xf24281f0
   1c0c8:	68397310 	.word	0x68397310
   1c0cc:	429d1c55 	.word	0x429d1c55
   1c0d0:	f2009100 	.word	0xf2009100
   1c0d4:	2d008083 	.word	0x2d008083
   1c0d8:	af41f47f 	.word	0xaf41f47f
   1c0dc:	e75d46a8 	.word	0xe75d46a8
   1c0e0:	42be3701 	.word	0x42be3701
   1c0e4:	af72f47f 	.word	0xaf72f47f
   1c0e8:	e77f4619 	.word	0xe77f4619
   1c0ec:	0c01f10c 	.word	0x0c01f10c
   1c0f0:	d18145ac 	.word	0xd18145ac
   1c0f4:	e792461d 	.word	0xe792461d
   1c0f8:	2b009b00 	.word	0x2b009b00
   1c0fc:	2100d0b2 	.word	0x2100d0b2
   1c100:	f1a0468e 	.word	0xf1a0468e
   1c104:	22000c04 	.word	0x22000c04
   1c108:	0f04f85c 	.word	0x0f04f85c
   1c10c:	2a20e003 	.word	0x2a20e003
   1c110:	0101f101 	.word	0x0101f101
   1c114:	fa20d042 	.word	0xfa20d042
   1c118:	f013f302 	.word	0xf013f302
   1c11c:	f1020301 	.word	0xf1020301
   1c120:	d0f40201 	.word	0xd0f40201
   1c124:	f7fe4668 	.word	0xf7fe4668
   1c128:	4607fd33 	.word	0x4607fd33
   1c12c:	d1a42800 	.word	0xd1a42800
   1c130:	c010f8dd 	.word	0xc010f8dd
   1c134:	0f00f1bc 	.word	0x0f00f1bc
   1c138:	4601d04e 	.word	0x4601d04e
   1c13c:	9f054686 	.word	0x9f054686
   1c140:	22003f04 	.word	0x22003f04
   1c144:	0f04f857 	.word	0x0f04f857
   1c148:	2a20e003 	.word	0x2a20e003
   1c14c:	0101f101 	.word	0x0101f101
   1c150:	fa20d02a 	.word	0xfa20d02a
   1c154:	f013f302 	.word	0xf013f302
   1c158:	f1020301 	.word	0xf1020301
   1c15c:	d0f40201 	.word	0xd0f40201
   1c160:	f7fea803 	.word	0xf7fea803
   1c164:	4607fd15 	.word	0x4607fd15
   1c168:	d1862800 	.word	0xd1862800
   1c16c:	4668a903 	.word	0x4668a903
   1c170:	fd7ef7fe 	.word	0xfd7ef7fe
   1c174:	db1d2800 	.word	0xdb1d2800
   1c178:	4669aa03 	.word	0x4669aa03
   1c17c:	f7fe4668 	.word	0xf7fe4668
   1c180:	4607fed7 	.word	0x4607fed7
   1c184:	f47f2800 	.word	0xf47f2800
   1c188:	2101af78 	.word	0x2101af78
   1c18c:	f7fe4668 	.word	0xf7fe4668
   1c190:	4607fcff 	.word	0x4607fcff
   1c194:	f43f2800 	.word	0xf43f2800
   1c198:	e76eaf53 	.word	0xe76eaf53
   1c19c:	0e01f10e 	.word	0x0e01f10e
   1c1a0:	d1b045be 	.word	0xd1b045be
   1c1a4:	e7bd4619 	.word	0xe7bd4619
   1c1a8:	0e01f10e 	.word	0x0e01f10e
   1c1ac:	d1c845e6 	.word	0xd1c845e6
   1c1b0:	e7d54619 	.word	0xe7d54619
   1c1b4:	466aa903 	.word	0x466aa903
   1c1b8:	f7fe4608 	.word	0xf7fe4608
   1c1bc:	4607feb9 	.word	0x4607feb9
   1c1c0:	f47f2800 	.word	0xf47f2800
   1c1c4:	2101af5a 	.word	0x2101af5a
   1c1c8:	f7fea803 	.word	0xf7fea803
   1c1cc:	4607fce1 	.word	0x4607fce1
   1c1d0:	f43f2800 	.word	0xf43f2800
   1c1d4:	e750af35 	.word	0xe750af35
   1c1d8:	e7c14661 	.word	0xe7c14661
   1c1dc:	070ff06f 	.word	0x070ff06f
   1c1e0:	4631e75a 	.word	0x4631e75a
   1c1e4:	9802e702 	.word	0x9802e702
   1c1e8:	070ff06f 	.word	0x070ff06f
   1c1ec:	bf00e746 	.word	0xbf00e746

0001c1f0 <symbol_000644e>:
   1c1f0:	43f0e92d 	.word	0x43f0e92d
   1c1f4:	6f80f5b1 	.word	0x6f80f5b1
   1c1f8:	4d04f2ad 	.word	0x4d04f2ad
   1c1fc:	80a5f200 	.word	0x80a5f200
   1c200:	4617460d 	.word	0x4617460d
   1c204:	46694606 	.word	0x46694606
   1c208:	462a4618 	.word	0x462a4618
   1c20c:	460747b8 	.word	0x460747b8
   1c210:	4638b120 	.word	0x4638b120
   1c214:	4d04f20d 	.word	0x4d04f20d
   1c218:	83f0e8bd 	.word	0x83f0e8bd
   1c21c:	f0002d00 	.word	0xf0002d00
   1c220:	f89d808a 	.word	0xf89d808a
   1c224:	2b003000 	.word	0x2b003000
   1c228:	8089f040 	.word	0x8089f040
   1c22c:	4604466b 	.word	0x4604466b
   1c230:	f813e003 	.word	0xf813e003
   1c234:	2a002f01 	.word	0x2a002f01
   1c238:	3401d14d 	.word	0x3401d14d
   1c23c:	d1f842a5 	.word	0xd1f842a5
   1c240:	8004f8d6 	.word	0x8004f8d6
   1c244:	0f00f1b8 	.word	0x0f00f1b8
   1c248:	2104d170 	.word	0x2104d170
   1c24c:	f0012001 	.word	0xf0012001
   1c250:	4681fca1 	.word	0x4681fca1
   1c254:	d0752800 	.word	0xd0752800
   1c258:	b18968b1 	.word	0xb18968b1
   1c25c:	00926872 	.word	0x00926872
   1c260:	fb0ff008 	.word	0xfb0ff008
   1c264:	2001e9d6 	.word	0x2001e9d6
   1c268:	b13a1e53 	.word	0xb13a1e53
   1c26c:	3b014642 	.word	0x3b014642
   1c270:	60021c59 	.word	0x60021c59
   1c274:	0004f100 	.word	0x0004f100
   1c278:	68b0d1f9 	.word	0x68b0d1f9
   1c27c:	fc9ef001 	.word	0xfc9ef001
   1c280:	22042301 	.word	0x22042301
   1c284:	3901e9c6 	.word	0x3901e9c6
   1c288:	46482100 	.word	0x46482100
   1c28c:	fb04f008 	.word	0xfb04f008
   1c290:	22012300 	.word	0x22012300
   1c294:	42a568b1 	.word	0x42a568b1
   1c298:	6032600b 	.word	0x6032600b
   1c29c:	eb0dd9b9 	.word	0xeb0dd9b9
   1c2a0:	1b2c0205 	.word	0x1b2c0205
   1c2a4:	f02368b1 	.word	0xf02368b1
   1c2a8:	ea4f0803 	.word	0xea4f0803
   1c2ac:	f8120ec3 	.word	0xf8120ec3
   1c2b0:	f851cd01 	.word	0xf851cd01
   1c2b4:	f00e0008 	.word	0xf00e0008
   1c2b8:	fa0c0e18 	.word	0xfa0c0e18
   1c2bc:	3301fc0e 	.word	0x3301fc0e
   1c2c0:	000cea40 	.word	0x000cea40
   1c2c4:	f84142a3 	.word	0xf84142a3
   1c2c8:	d1eb0008 	.word	0xd1eb0008
   1c2cc:	f20d4638 	.word	0xf20d4638
   1c2d0:	e8bd4d04 	.word	0xe8bd4d04
   1c2d4:	1b2a83f0 	.word	0x1b2a83f0
   1c2d8:	0803f012 	.word	0x0803f012
   1c2dc:	f04fbf18 	.word	0xf04fbf18
   1c2e0:	f2420801 	.word	0xf2420801
   1c2e4:	eb087310 	.word	0xeb087310
   1c2e8:	45980892 	.word	0x45980892
   1c2ec:	6873d82a 	.word	0x6873d82a
   1c2f0:	d92d4598 	.word	0xd92d4598
   1c2f4:	46402104 	.word	0x46402104
   1c2f8:	fc4cf001 	.word	0xfc4cf001
   1c2fc:	b3084681 	.word	0xb3084681
   1c300:	b18968b1 	.word	0xb18968b1
   1c304:	00926872 	.word	0x00926872
   1c308:	fabbf008 	.word	0xfabbf008
   1c30c:	2001e9d6 	.word	0x2001e9d6
   1c310:	b13a1e53 	.word	0xb13a1e53
   1c314:	3b012200 	.word	0x3b012200
   1c318:	60021c59 	.word	0x60021c59
   1c31c:	0004f100 	.word	0x0004f100
   1c320:	68b0d1f9 	.word	0x68b0d1f9
   1c324:	fc4af001 	.word	0xfc4af001
   1c328:	8901e9c6 	.word	0x8901e9c6
   1c32c:	0288ea4f 	.word	0x0288ea4f
   1c330:	9008f8d6 	.word	0x9008f8d6
   1c334:	f8d6e7a8 	.word	0xf8d6e7a8
   1c338:	462c8004 	.word	0x462c8004
   1c33c:	462ae782 	.word	0x462ae782
   1c340:	e7c94604 	.word	0xe7c94604
   1c344:	070ff06f 	.word	0x070ff06f
   1c348:	f06fe763 	.word	0xf06fe763
   1c34c:	e7600703 	.word	0xe7600703
   1c350:	e7774698 	.word	0xe7774698

0001c354 <symbol_0004482>:
   1c354:	43f0e92d 	.word	0x43f0e92d
   1c358:	b0a16853 	.word	0xb0a16853
   1c35c:	6894b17b 	.word	0x6894b17b
   1c360:	4c80f103 	.word	0x4c80f103
   1c364:	3cfff10c 	.word	0x3cfff10c
   1c368:	502cf854 	.word	0x502cf854
   1c36c:	048ceb04 	.word	0x048ceb04
   1c370:	e00ab11d 	.word	0xe00ab11d
   1c374:	5d04f854 	.word	0x5d04f854
   1c378:	3b01b93d 	.word	0x3b01b93d
   1c37c:	f06fd1fa 	.word	0xf06fd1fa
   1c380:	46200403 	.word	0x46200403
   1c384:	e8bdb021 	.word	0xe8bdb021
   1c388:	681383f0 	.word	0x681383f0
   1c38c:	ddf62b00 	.word	0xddf62b00
   1c390:	23002401 	.word	0x23002401
   1c394:	a8024606 	.word	0xa8024606
   1c398:	94089405 	.word	0x94089405
   1c39c:	940e940b 	.word	0x940e940b
   1c3a0:	94119402 	.word	0x94119402
   1c3a4:	94179414 	.word	0x94179414
   1c3a8:	460f941a 	.word	0x460f941a
   1c3ac:	e9cd4615 	.word	0xe9cd4615
   1c3b0:	e9cd3306 	.word	0xe9cd3306
   1c3b4:	e9cd3309 	.word	0xe9cd3309
   1c3b8:	e9cd330c 	.word	0xe9cd330c
   1c3bc:	e9cd330f 	.word	0xe9cd330f
   1c3c0:	e9cd3303 	.word	0xe9cd3303
   1c3c4:	e9cd3312 	.word	0xe9cd3312
   1c3c8:	e9cd3315 	.word	0xe9cd3315
   1c3cc:	e9cd3318 	.word	0xe9cd3318
   1c3d0:	f7ff331b 	.word	0xf7ff331b
   1c3d4:	4604fd9b 	.word	0x4604fd9b
   1c3d8:	9b03b9a0 	.word	0x9b03b9a0
   1c3dc:	9904b183 	.word	0x9904b183
   1c3e0:	4480f103 	.word	0x4480f103
   1c3e4:	f8513c01 	.word	0xf8513c01
   1c3e8:	eb012024 	.word	0xeb012024
   1c3ec:	b12a0484 	.word	0xb12a0484
   1c3f0:	f854e0b5 	.word	0xf854e0b5
   1c3f4:	2a002d04 	.word	0x2a002d04
   1c3f8:	80b1f040 	.word	0x80b1f040
   1c3fc:	d1f83b01 	.word	0xd1f83b01
   1c400:	040df06f 	.word	0x040df06f
   1c404:	b1609807 	.word	0xb1609807
   1c408:	1e539a06 	.word	0x1e539a06
   1c40c:	2200b13a 	.word	0x2200b13a
   1c410:	1c593b01 	.word	0x1c593b01
   1c414:	f1006002 	.word	0xf1006002
   1c418:	d1f90004 	.word	0xd1f90004
   1c41c:	f0019807 	.word	0xf0019807
   1c420:	2200fbcd 	.word	0x2200fbcd
   1c424:	980a2301 	.word	0x980a2301
   1c428:	3205e9cd 	.word	0x3205e9cd
   1c42c:	b1589207 	.word	0xb1589207
   1c430:	1e4b9909 	.word	0x1e4b9909
   1c434:	3b01b131 	.word	0x3b01b131
   1c438:	60021c5f 	.word	0x60021c5f
   1c43c:	0004f100 	.word	0x0004f100
   1c440:	980ad1f9 	.word	0x980ad1f9
   1c444:	fbbaf001 	.word	0xfbbaf001
   1c448:	23012200 	.word	0x23012200
   1c44c:	e9cd980d 	.word	0xe9cd980d
   1c450:	920a3208 	.word	0x920a3208
   1c454:	990cb158 	.word	0x990cb158
   1c458:	b1311e4b 	.word	0xb1311e4b
   1c45c:	1c5e3b01 	.word	0x1c5e3b01
   1c460:	f1006002 	.word	0xf1006002
   1c464:	d1f90004 	.word	0xd1f90004
   1c468:	f001980d 	.word	0xf001980d
   1c46c:	2200fba7 	.word	0x2200fba7
   1c470:	98102301 	.word	0x98102301
   1c474:	320be9cd 	.word	0x320be9cd
   1c478:	b158920d 	.word	0xb158920d
   1c47c:	1e4b990f 	.word	0x1e4b990f
   1c480:	3b01b131 	.word	0x3b01b131
   1c484:	60021c5d 	.word	0x60021c5d
   1c488:	0004f100 	.word	0x0004f100
   1c48c:	9810d1f9 	.word	0x9810d1f9
   1c490:	fb94f001 	.word	0xfb94f001
   1c494:	23012200 	.word	0x23012200
   1c498:	e9cd9804 	.word	0xe9cd9804
   1c49c:	9210320e 	.word	0x9210320e
   1c4a0:	9903b158 	.word	0x9903b158
   1c4a4:	b1311e4b 	.word	0xb1311e4b
   1c4a8:	1c593b01 	.word	0x1c593b01
   1c4ac:	f1006002 	.word	0xf1006002
   1c4b0:	d1f90004 	.word	0xd1f90004
   1c4b4:	f0019804 	.word	0xf0019804
   1c4b8:	2200fb81 	.word	0x2200fb81
   1c4bc:	98132301 	.word	0x98132301
   1c4c0:	3202e9cd 	.word	0x3202e9cd
   1c4c4:	b1589204 	.word	0xb1589204
   1c4c8:	1e4b9912 	.word	0x1e4b9912
   1c4cc:	3b01b131 	.word	0x3b01b131
   1c4d0:	60021c5f 	.word	0x60021c5f
   1c4d4:	0004f100 	.word	0x0004f100
   1c4d8:	9813d1f9 	.word	0x9813d1f9
   1c4dc:	fb6ef001 	.word	0xfb6ef001
   1c4e0:	23012200 	.word	0x23012200
   1c4e4:	e9cd9816 	.word	0xe9cd9816
   1c4e8:	92133211 	.word	0x92133211
   1c4ec:	9915b158 	.word	0x9915b158
   1c4f0:	b1311e4b 	.word	0xb1311e4b
   1c4f4:	1c5e3b01 	.word	0x1c5e3b01
   1c4f8:	f1006002 	.word	0xf1006002
   1c4fc:	d1f90004 	.word	0xd1f90004
   1c500:	f0019816 	.word	0xf0019816
   1c504:	2200fb5b 	.word	0x2200fb5b
   1c508:	98192301 	.word	0x98192301
   1c50c:	3214e9cd 	.word	0x3214e9cd
   1c510:	b1589216 	.word	0xb1589216
   1c514:	1e4b9918 	.word	0x1e4b9918
   1c518:	3b01b131 	.word	0x3b01b131
   1c51c:	60021c5d 	.word	0x60021c5d
   1c520:	0004f100 	.word	0x0004f100
   1c524:	9819d1f9 	.word	0x9819d1f9
   1c528:	fb48f001 	.word	0xfb48f001
   1c52c:	23012200 	.word	0x23012200
   1c530:	e9cd981c 	.word	0xe9cd981c
   1c534:	92193217 	.word	0x92193217
   1c538:	f43f2800 	.word	0xf43f2800
   1c53c:	991baf22 	.word	0x991baf22
   1c540:	b1311e4b 	.word	0xb1311e4b
   1c544:	1c593b01 	.word	0x1c593b01
   1c548:	f1006002 	.word	0xf1006002
   1c54c:	d1f90004 	.word	0xd1f90004
   1c550:	f001981c 	.word	0xf001981c
   1c554:	4620fb33 	.word	0x4620fb33
   1c558:	e8bdb021 	.word	0xe8bdb021
   1c55c:	2b0183f0 	.word	0x2b0183f0
   1c560:	d96b9a02 	.word	0xd96b9a02
   1c564:	f47f2a00 	.word	0xf47f2a00
   1c568:	4639af4b 	.word	0x4639af4b
   1c56c:	462aa805 	.word	0x462aa805
   1c570:	fb9af7ff 	.word	0xfb9af7ff
   1c574:	28004604 	.word	0x28004604
   1c578:	af44f47f 	.word	0xaf44f47f
   1c57c:	a905a808 	.word	0xa905a808
   1c580:	ff38f7fd 	.word	0xff38f7fd
   1c584:	28004604 	.word	0x28004604
   1c588:	af3cf47f 	.word	0xaf3cf47f
   1c58c:	4629a811 	.word	0x4629a811
   1c590:	ff30f7fd 	.word	0xff30f7fd
   1c594:	28004604 	.word	0x28004604
   1c598:	af34f47f 	.word	0xaf34f47f
   1c59c:	4629a814 	.word	0x4629a814
   1c5a0:	ff28f7fd 	.word	0xff28f7fd
   1c5a4:	28004604 	.word	0x28004604
   1c5a8:	af2cf47f 	.word	0xaf2cf47f
   1c5ac:	2101a80b 	.word	0x2101a80b
   1c5b0:	f8acf7fe 	.word	0xf8acf7fe
   1c5b4:	28004604 	.word	0x28004604
   1c5b8:	af24f47f 	.word	0xaf24f47f
   1c5bc:	a80e4601 	.word	0xa80e4601
   1c5c0:	f8a4f7fe 	.word	0xf8a4f7fe
   1c5c4:	28004604 	.word	0x28004604
   1c5c8:	af1cf47f 	.word	0xaf1cf47f
   1c5cc:	a8174601 	.word	0xa8174601
   1c5d0:	f89cf7fe 	.word	0xf89cf7fe
   1c5d4:	28004604 	.word	0x28004604
   1c5d8:	af14f47f 	.word	0xaf14f47f
   1c5dc:	2101a81a 	.word	0x2101a81a
   1c5e0:	f894f7fe 	.word	0xf894f7fe
   1c5e4:	28004604 	.word	0x28004604
   1c5e8:	af0cf47f 	.word	0xaf0cf47f
   1c5ec:	f04f4681 	.word	0xf04f4681
   1c5f0:	af010801 	.word	0xaf010801
   1c5f4:	681b9b0a 	.word	0x681b9b0a
   1c5f8:	d42c07da 	.word	0xd42c07da
   1c5fc:	a8082101 	.word	0xa8082101
   1c600:	fac6f7fe 	.word	0xfac6f7fe
   1c604:	28004604 	.word	0x28004604
   1c608:	aefcf47f 	.word	0xaefcf47f
   1c60c:	681b9b0d 	.word	0x681b9b0d
   1c610:	d44407d8 	.word	0xd44407d8
   1c614:	681b9b10 	.word	0x681b9b10
   1c618:	d44007d9 	.word	0xd44007d9
   1c61c:	a80b2101 	.word	0xa80b2101
   1c620:	fab6f7fe 	.word	0xfab6f7fe
   1c624:	28004604 	.word	0x28004604
   1c628:	aeecf47f 	.word	0xaeecf47f
   1c62c:	a80e2101 	.word	0xa80e2101
   1c630:	faaef7fe 	.word	0xfaaef7fe
   1c634:	28004604 	.word	0x28004604
   1c638:	e6e3d0dc 	.word	0xe6e3d0dc
   1c63c:	f6ff2a00 	.word	0xf6ff2a00
   1c640:	680baedf 	.word	0x680baedf
   1c644:	d88d2b01 	.word	0xd88d2b01
   1c648:	d18e2b00 	.word	0xd18e2b00
   1c64c:	2a004252 	.word	0x2a004252
   1c650:	aed6f47f 	.word	0xaed6f47f
   1c654:	9b16e789 	.word	0x9b16e789
   1c658:	07d8681b 	.word	0x07d8681b
   1c65c:	2101d443 	.word	0x2101d443
   1c660:	f7fea814 	.word	0xf7fea814
   1c664:	4604fa95 	.word	0x4604fa95
   1c668:	f47f2800 	.word	0xf47f2800
   1c66c:	9b19aecb 	.word	0x9b19aecb
   1c670:	07db681b 	.word	0x07db681b
   1c674:	9b1cd425 	.word	0x9b1cd425
   1c678:	07dc681b 	.word	0x07dc681b
   1c67c:	2101d421 	.word	0x2101d421
   1c680:	f7fea817 	.word	0xf7fea817
   1c684:	4604fa85 	.word	0x4604fa85
   1c688:	f47f2800 	.word	0xf47f2800
   1c68c:	2101aebb 	.word	0x2101aebb
   1c690:	f7fea81a 	.word	0xf7fea81a
   1c694:	4604fa7d 	.word	0x4604fa7d
   1c698:	d0dc2800 	.word	0xd0dc2800
   1c69c:	a90be6b2 	.word	0xa90be6b2
   1c6a0:	4608aa11 	.word	0x4608aa11
   1c6a4:	fd04f7fe 	.word	0xfd04f7fe
   1c6a8:	28004604 	.word	0x28004604
   1c6ac:	aeaaf47f 	.word	0xaeaaf47f
   1c6b0:	aa05a90e 	.word	0xaa05a90e
   1c6b4:	f7fe4608 	.word	0xf7fe4608
   1c6b8:	4604fd6f 	.word	0x4604fd6f
   1c6bc:	d0ad2800 	.word	0xd0ad2800
   1c6c0:	a917e6a0 	.word	0xa917e6a0
   1c6c4:	4608aa11 	.word	0x4608aa11
   1c6c8:	fcf2f7fe 	.word	0xfcf2f7fe
   1c6cc:	28004604 	.word	0x28004604
   1c6d0:	ae98f47f 	.word	0xae98f47f
   1c6d4:	aa05a91a 	.word	0xaa05a91a
   1c6d8:	f7fe4608 	.word	0xf7fe4608
   1c6dc:	4604fd5d 	.word	0x4604fd5d
   1c6e0:	d0cc2800 	.word	0xd0cc2800
   1c6e4:	a914e68e 	.word	0xa914e68e
   1c6e8:	f7fea808 	.word	0xf7fea808
   1c6ec:	2800fac1 	.word	0x2800fac1
   1c6f0:	a908db3d 	.word	0xa908db3d
   1c6f4:	4608aa14 	.word	0x4608aa14
   1c6f8:	fd4ef7fe 	.word	0xfd4ef7fe
   1c6fc:	28004604 	.word	0x28004604
   1c700:	ae80f47f 	.word	0xae80f47f
   1c704:	aa17a90b 	.word	0xaa17a90b
   1c708:	f7fe4608 	.word	0xf7fe4608
   1c70c:	4604fd45 	.word	0x4604fd45
   1c710:	f47f2800 	.word	0xf47f2800
   1c714:	a90eae77 	.word	0xa90eae77
   1c718:	4608aa1a 	.word	0x4608aa1a
   1c71c:	fd3cf7fe 	.word	0xfd3cf7fe
   1c720:	28004604 	.word	0x28004604
   1c724:	ae6ef47f 	.word	0xae6ef47f
   1c728:	a808a91d 	.word	0xa808a91d
   1c72c:	9004f8cd 	.word	0x9004f8cd
   1c730:	881de9cd 	.word	0x881de9cd
   1c734:	f7fd971f 	.word	0xf7fd971f
   1c738:	2800fd97 	.word	0x2800fd97
   1c73c:	af5af47f 	.word	0xaf5af47f
   1c740:	f04f4680 	.word	0xf04f4680
   1c744:	a91d0901 	.word	0xa91d0901
   1c748:	f8cda817 	.word	0xf8cda817
   1c74c:	e9cd8004 	.word	0xe9cd8004
   1c750:	971f991d 	.word	0x971f991d
   1c754:	fd88f7fd 	.word	0xfd88f7fd
   1c758:	da232800 	.word	0xda232800
   1c75c:	462aa917 	.word	0x462aa917
   1c760:	f7fe4608 	.word	0xf7fe4608
   1c764:	4604fca5 	.word	0x4604fca5
   1c768:	d0ec2800 	.word	0xd0ec2800
   1c76c:	a914e64a 	.word	0xa914e64a
   1c770:	4608aa08 	.word	0x4608aa08
   1c774:	fd10f7fe 	.word	0xfd10f7fe
   1c778:	28004604 	.word	0x28004604
   1c77c:	ae42f47f 	.word	0xae42f47f
   1c780:	aa0ba917 	.word	0xaa0ba917
   1c784:	f7fe4608 	.word	0xf7fe4608
   1c788:	4604fd07 	.word	0x4604fd07
   1c78c:	f47f2800 	.word	0xf47f2800
   1c790:	a91aae39 	.word	0xa91aae39
   1c794:	4608aa0e 	.word	0x4608aa0e
   1c798:	fcfef7fe 	.word	0xfcfef7fe
   1c79c:	28004604 	.word	0x28004604
   1c7a0:	e62fd0c2 	.word	0xe62fd0c2
   1c7a4:	a8174629 	.word	0xa8174629
   1c7a8:	fa62f7fe 	.word	0xfa62f7fe
   1c7ac:	db082800 	.word	0xdb082800
   1c7b0:	462aa917 	.word	0x462aa917
   1c7b4:	f7fe4608 	.word	0xf7fe4608
   1c7b8:	4604fcef 	.word	0x4604fcef
   1c7bc:	d0f12800 	.word	0xd0f12800
   1c7c0:	a917e620 	.word	0xa917e620
   1c7c4:	f7fd4630 	.word	0xf7fd4630
   1c7c8:	4604fe15 	.word	0x4604fe15
   1c7cc:	bf00e61a 	.word	0xbf00e61a

0001c7d0 <entropy_callback>:
   1c7d0:	4c0ab538 	.word	0x4c0ab538
   1c7d4:	78254b0a 	.word	0x78254b0a
   1c7d8:	bf282a07 	.word	0xbf282a07
   1c7dc:	46082207 	.word	0x46082207
   1c7e0:	1145eb03 	.word	0x1145eb03
   1c7e4:	f84df008 	.word	0xf84df008
   1c7e8:	20007823 	.word	0x20007823
   1c7ec:	b2db3301 	.word	0xb2db3301
   1c7f0:	bf082b07 	.word	0xbf082b07
   1c7f4:	70232300 	.word	0x70232300
   1c7f8:	bf00bd38 	.word	0xbf00bd38
   1c7fc:	200226b3 	.word	0x200226b3
   1c800:	00026000 	.word	0x00026000

0001c804 <es256_key_generate>:
   1c804:	b0e5b5f0 	.word	0xb0e5b5f0
   1c808:	71a8f89d 	.word	0x71a8f89d
   1c80c:	b152b158 	.word	0xb152b158
   1c810:	291fb14b 	.word	0x291fb14b
   1c814:	6819d907 	.word	0x6819d907
   1c818:	d904293f 	.word	0xd904293f
   1c81c:	2955b13f 	.word	0x2955b13f
   1c820:	240cd805 	.word	0x240cd805
   1c824:	2416e000 	.word	0x2416e000
   1c828:	b0654620 	.word	0xb0654620
   1c82c:	461dbdf0 	.word	0x461dbdf0
   1c830:	21002304 	.word	0x21002304
   1c834:	46164604 	.word	0x46164604
   1c838:	f44fa814 	.word	0xf44fa814
   1c83c:	f88d72a0 	.word	0xf88d72a0
   1c840:	f008300c 	.word	0xf008300c
   1c844:	a814f829 	.word	0xa814f829
   1c848:	fe12f7f6 	.word	0xfe12f7f6
   1c84c:	49292300 	.word	0x49292300
   1c850:	a814461a 	.word	0xa814461a
   1c854:	f7f69300 	.word	0xf7f69300
   1c858:	a814ff0d 	.word	0xa814ff0d
   1c85c:	46212220 	.word	0x46212220
   1c860:	ff30f7f6 	.word	0xff30f7f6
   1c864:	a814b9b8 	.word	0xa814b9b8
   1c868:	fe08f7f6 	.word	0xfe08f7f6
   1c86c:	f10d4621 	.word	0xf10d4621
   1c870:	f004000d 	.word	0xf004000d
   1c874:	4604fb65 	.word	0x4604fb65
   1c878:	b1c7b9b8 	.word	0xb1c7b9b8
   1c87c:	f7f6a814 	.word	0xf7f6a814
   1c880:	2002f95d 	.word	0x2002f95d
   1c884:	f960f7f6 	.word	0xf960f7f6
   1c888:	a8144601 	.word	0xa8144601
   1c88c:	f96af7f6 	.word	0xf96af7f6
   1c890:	240eb1a8 	.word	0x240eb1a8
   1c894:	4a18e7c8 	.word	0x4a18e7c8
   1c898:	78114b18 	.word	0x78114b18
   1c89c:	22074620 	.word	0x22074620
   1c8a0:	1141eb03 	.word	0x1141eb03
   1c8a4:	ffedf007 	.word	0xffedf007
   1c8a8:	2423e7dd 	.word	0x2423e7dd
   1c8ac:	a903e7bc 	.word	0xa903e7bc
   1c8b0:	22401c70 	.word	0x22401c70
   1c8b4:	ffe5f007 	.word	0xffe5f007
   1c8b8:	602b2341 	.word	0x602b2341
   1c8bc:	2103e7b4 	.word	0x2103e7b4
   1c8c0:	f7f79815 	.word	0xf7f79815
   1c8c4:	2800f961 	.word	0x2800f961
   1c8c8:	9815d1e3 	.word	0x9815d1e3
   1c8cc:	f100aa03 	.word	0xf100aa03
   1c8d0:	23410188 	.word	0x23410188
   1c8d4:	fc26f7f9 	.word	0xfc26f7f9
   1c8d8:	d1da2800 	.word	0xd1da2800
   1c8dc:	a8144631 	.word	0xa8144631
   1c8e0:	f7f4682a 	.word	0xf7f4682a
   1c8e4:	23b2ffed 	.word	0x23b2ffed
   1c8e8:	602b4604 	.word	0x602b4604
   1c8ec:	d09b2800 	.word	0xd09b2800
   1c8f0:	bf00e7cf 	.word	0xbf00e7cf
   1c8f4:	0001c7d1 	.word	0x0001c7d1
   1c8f8:	200226b3 	.word	0x200226b3
   1c8fc:	00026000 	.word	0x00026000

0001c900 <bsd_os_application_irq_handler>:
   1c900:	41f0e92d 	.word	0x41f0e92d
   1c904:	f7f44c33 	.word	0xf7f44c33
   1c908:	f04ffd07 	.word	0xf04ffd07
   1c90c:	4d320803 	.word	0x4d320803
   1c910:	f1044f32 	.word	0xf1044f32
   1c914:	e0040680 	.word	0xe0040680
   1c918:	d0062b04 	.word	0xd0062b04
   1c91c:	42b43408 	.word	0x42b43408
   1c920:	f814d03b 	.word	0xf814d03b
   1c924:	2b023c04 	.word	0x2b023c04
   1c928:	6820d1f6 	.word	0x6820d1f6
   1c92c:	6803882a 	.word	0x6803882a
   1c930:	429ab29b 	.word	0x429ab29b
   1c934:	8a2ad033 	.word	0x8a2ad033
   1c938:	d032429a 	.word	0xd032429a
   1c93c:	429a8c2a 	.word	0x429a8c2a
   1c940:	8e2ad031 	.word	0x8e2ad031
   1c944:	d030429a 	.word	0xd030429a
   1c948:	2040f8b5 	.word	0x2040f8b5
   1c94c:	d036429a 	.word	0xd036429a
   1c950:	2050f8b5 	.word	0x2050f8b5
   1c954:	d034429a 	.word	0xd034429a
   1c958:	2060f8b5 	.word	0x2060f8b5
   1c95c:	d032429a 	.word	0xd032429a
   1c960:	2070f8b5 	.word	0x2070f8b5
   1c964:	d030429a 	.word	0xd030429a
   1c968:	2080f8b5 	.word	0x2080f8b5
   1c96c:	d02e429a 	.word	0xd02e429a
   1c970:	2090f8b5 	.word	0x2090f8b5
   1c974:	bf08429a 	.word	0xbf08429a
   1c978:	d1cf2309 	.word	0xd1cf2309
   1c97c:	1303eb05 	.word	0x1303eb05
   1c980:	68d9685a 	.word	0x68d9685a
   1c984:	b9904790 	.word	0xb9904790
   1c988:	68202201 	.word	0x68202201
   1c98c:	2c04f804 	.word	0x2c04f804
   1c990:	340868fb 	.word	0x340868fb
   1c994:	42b44798 	.word	0x42b44798
   1c998:	e8bdd1c3 	.word	0xe8bdd1c3
   1c99c:	230081f0 	.word	0x230081f0
   1c9a0:	2301e7ec 	.word	0x2301e7ec
   1c9a4:	2302e7ea 	.word	0x2302e7ea
   1c9a8:	2303e7e8 	.word	0x2303e7e8
   1c9ac:	2802e7e6 	.word	0x2802e7e6
   1c9b0:	2304bf0a 	.word	0x2304bf0a
   1c9b4:	8c04f804 	.word	0x8c04f804
   1c9b8:	3c04f804 	.word	0x3c04f804
   1c9bc:	2304e7ae 	.word	0x2304e7ae
   1c9c0:	2305e7dc 	.word	0x2305e7dc
   1c9c4:	2306e7da 	.word	0x2306e7da
   1c9c8:	2307e7d8 	.word	0x2307e7d8
   1c9cc:	2308e7d6 	.word	0x2308e7d6
   1c9d0:	bf00e7d4 	.word	0xbf00e7d4
   1c9d4:	20021638 	.word	0x20021638
   1c9d8:	200214fc 	.word	0x200214fc
   1c9dc:	2002159c 	.word	0x2002159c

0001c9e0 <rpc_framework_init>:
   1c9e0:	22a0b508 	.word	0x22a0b508
   1c9e4:	48022100 	.word	0x48022100
   1c9e8:	ff56f007 	.word	0xff56f007
   1c9ec:	bd082000 	.word	0xbd082000
   1c9f0:	200214fc 	.word	0x200214fc

0001c9f4 <rpc_client_register>:
   1c9f4:	2b008803 	.word	0x2b008803
   1c9f8:	6842d045 	.word	0x6842d045
   1c9fc:	2a004601 	.word	0x2a004601
   1ca00:	4a30d050 	.word	0x4a30d050
   1ca04:	42838810 	.word	0x42838810
   1ca08:	e92dd03d 	.word	0xe92dd03d
   1ca0c:	8a1447f0 	.word	0x8a1447f0
   1ca10:	d03542a3 	.word	0xd03542a3
   1ca14:	42ab8c15 	.word	0x42ab8c15
   1ca18:	8e16d032 	.word	0x8e16d032
   1ca1c:	d02f42b3 	.word	0xd02f42b3
   1ca20:	7040f8b2 	.word	0x7040f8b2
   1ca24:	d02b42bb 	.word	0xd02b42bb
   1ca28:	c050f8b2 	.word	0xc050f8b2
   1ca2c:	d0274563 	.word	0xd0274563
   1ca30:	e060f8b2 	.word	0xe060f8b2
   1ca34:	d0234573 	.word	0xd0234573
   1ca38:	8070f8b2 	.word	0x8070f8b2
   1ca3c:	d01f4543 	.word	0xd01f4543
   1ca40:	9080f8b2 	.word	0x9080f8b2
   1ca44:	d01b454b 	.word	0xd01b454b
   1ca48:	a090f8b2 	.word	0xa090f8b2
   1ca4c:	d0174553 	.word	0xd0174553
   1ca50:	b35cb1e0 	.word	0xb35cb1e0
   1ca54:	b36eb365 	.word	0xb36eb365
   1ca58:	f1bcb377 	.word	0xf1bcb377
   1ca5c:	d02d0f00 	.word	0xd02d0f00
   1ca60:	0f00f1be 	.word	0x0f00f1be
   1ca64:	f1b8d020 	.word	0xf1b8d020
   1ca68:	d0290f00 	.word	0xd0290f00
   1ca6c:	0f00f1b9 	.word	0x0f00f1b9
   1ca70:	2009d00b 	.word	0x2009d00b
   1ca74:	0f00f1ba 	.word	0x0f00f1ba
   1ca78:	2004d008 	.word	0x2004d008
   1ca7c:	87f0e8bd 	.word	0x87f0e8bd
   1ca80:	e8bd2007 	.word	0xe8bd2007
   1ca84:	200787f0 	.word	0x200787f0
   1ca88:	20084770 	.word	0x20084770
   1ca8c:	52130100 	.word	0x52130100
   1ca90:	4402684b 	.word	0x4402684b
   1ca94:	688b6053 	.word	0x688b6053
   1ca98:	60932000 	.word	0x60932000
   1ca9c:	60d368cb 	.word	0x60d368cb
   1caa0:	87f0e8bd 	.word	0x87f0e8bd
   1caa4:	4770200e 	.word	0x4770200e
   1caa8:	e7ef2006 	.word	0xe7ef2006
   1caac:	e7ed2001 	.word	0xe7ed2001
   1cab0:	e7eb2002 	.word	0xe7eb2002
   1cab4:	e7e92003 	.word	0xe7e92003
   1cab8:	e7e72004 	.word	0xe7e72004
   1cabc:	e7e52005 	.word	0xe7e52005
   1cac0:	e7e32007 	.word	0xe7e32007
   1cac4:	200214fc 	.word	0x200214fc

0001cac8 <rpc_transport_input>:
   1cac8:	4a82b538 	.word	0x4a82b538
   1cacc:	8810680b 	.word	0x8810680b
   1cad0:	4298b29b 	.word	0x4298b29b
   1cad4:	8a10d027 	.word	0x8a10d027
   1cad8:	d0244298 	.word	0xd0244298
   1cadc:	42988c10 	.word	0x42988c10
   1cae0:	8e10d021 	.word	0x8e10d021
   1cae4:	d01e4298 	.word	0xd01e4298
   1cae8:	0040f8b2 	.word	0x0040f8b2
   1caec:	d01a4298 	.word	0xd01a4298
   1caf0:	0050f8b2 	.word	0x0050f8b2
   1caf4:	d0164298 	.word	0xd0164298
   1caf8:	0060f8b2 	.word	0x0060f8b2
   1cafc:	d0124298 	.word	0xd0124298
   1cb00:	0070f8b2 	.word	0x0070f8b2
   1cb04:	d00e4298 	.word	0xd00e4298
   1cb08:	0080f8b2 	.word	0x0080f8b2
   1cb0c:	d00a4298 	.word	0xd00a4298
   1cb10:	2090f8b2 	.word	0x2090f8b2
   1cb14:	d006429a 	.word	0xd006429a
   1cb18:	b1186888 	.word	0xb1186888
   1cb1c:	691b4b6e 	.word	0x691b4b6e
   1cb20:	20004798 	.word	0x20004798
   1cb24:	6888bd38 	.word	0x6888bd38
   1cb28:	f0002800 	.word	0xf0002800
   1cb2c:	4a6b8098 	.word	0x4a6b8098
   1cb30:	2c006814 	.word	0x2c006814
   1cb34:	6894d03c 	.word	0x6894d03c
   1cb38:	f0002c00 	.word	0xf0002c00
   1cb3c:	6914809a 	.word	0x6914809a
   1cb40:	f0002c00 	.word	0xf0002c00
   1cb44:	6994809a 	.word	0x6994809a
   1cb48:	f0002c00 	.word	0xf0002c00
   1cb4c:	6a14809a 	.word	0x6a14809a
   1cb50:	f0002c00 	.word	0xf0002c00
   1cb54:	6a94809a 	.word	0x6a94809a
   1cb58:	f0002c00 	.word	0xf0002c00
   1cb5c:	6b148084 	.word	0x6b148084
   1cb60:	f0002c00 	.word	0xf0002c00
   1cb64:	6b948098 	.word	0x6b948098
   1cb68:	f0002c00 	.word	0xf0002c00
   1cb6c:	6c148096 	.word	0x6c148096
   1cb70:	f0002c00 	.word	0xf0002c00
   1cb74:	6c948096 	.word	0x6c948096
   1cb78:	f0002c00 	.word	0xf0002c00
   1cb7c:	6d148096 	.word	0x6d148096
   1cb80:	f0002c00 	.word	0xf0002c00
   1cb84:	6d948096 	.word	0x6d948096
   1cb88:	f0002c00 	.word	0xf0002c00
   1cb8c:	6e148098 	.word	0x6e148098
   1cb90:	f0002c00 	.word	0xf0002c00
   1cb94:	6e948098 	.word	0x6e948098
   1cb98:	f0002c00 	.word	0xf0002c00
   1cb9c:	6f148096 	.word	0x6f148096
   1cba0:	f0002c00 	.word	0xf0002c00
   1cba4:	6f948094 	.word	0x6f948094
   1cba8:	2001b10c 	.word	0x2001b10c
   1cbac:	240fbd38 	.word	0x240fbd38
   1cbb0:	05c4eb02 	.word	0x05c4eb02
   1cbb4:	0034f842 	.word	0x0034f842
   1cbb8:	4b4980ab 	.word	0x4b4980ab
   1cbbc:	2a01781a 	.word	0x2a01781a
   1cbc0:	7a1ad053 	.word	0x7a1ad053
   1cbc4:	d0412a01 	.word	0xd0412a01
   1cbc8:	2a017c1a 	.word	0x2a017c1a
   1cbcc:	7e1ad04f 	.word	0x7e1ad04f
   1cbd0:	d0502a01 	.word	0xd0502a01
   1cbd4:	2020f893 	.word	0x2020f893
   1cbd8:	d0502a01 	.word	0xd0502a01
   1cbdc:	2028f893 	.word	0x2028f893
   1cbe0:	d0502a01 	.word	0xd0502a01
   1cbe4:	2030f893 	.word	0x2030f893
   1cbe8:	d03a2a01 	.word	0xd03a2a01
   1cbec:	2038f893 	.word	0x2038f893
   1cbf0:	d04c2a01 	.word	0xd04c2a01
   1cbf4:	2040f893 	.word	0x2040f893
   1cbf8:	d04a2a01 	.word	0xd04a2a01
   1cbfc:	2048f893 	.word	0x2048f893
   1cc00:	d04c2a01 	.word	0xd04c2a01
   1cc04:	2050f893 	.word	0x2050f893
   1cc08:	d04c2a01 	.word	0xd04c2a01
   1cc0c:	2058f893 	.word	0x2058f893
   1cc10:	d04c2a01 	.word	0xd04c2a01
   1cc14:	2060f893 	.word	0x2060f893
   1cc18:	d04c2a01 	.word	0xd04c2a01
   1cc1c:	2068f893 	.word	0x2068f893
   1cc20:	d04a2a01 	.word	0xd04a2a01
   1cc24:	2070f893 	.word	0x2070f893
   1cc28:	d04a2a01 	.word	0xd04a2a01
   1cc2c:	2078f893 	.word	0x2078f893
   1cc30:	d00a2a01 	.word	0xd00a2a01
   1cc34:	d0b82c10 	.word	0xd0b82c10
   1cc38:	4b282200 	.word	0x4b282200
   1cc3c:	eb032001 	.word	0xeb032001
   1cc40:	808a01c4 	.word	0x808a01c4
   1cc44:	2034f843 	.word	0x2034f843
   1cc48:	220fbd38 	.word	0x220fbd38
   1cc4c:	eb032402 	.word	0xeb032402
   1cc50:	f80300c2 	.word	0xf80300c2
   1cc54:	60414032 	.word	0x60414032
   1cc58:	fb56f7f4 	.word	0xfb56f7f4
   1cc5c:	2410e7a5 	.word	0x2410e7a5
   1cc60:	2206e7ab 	.word	0x2206e7ab
   1cc64:	2405e7f2 	.word	0x2405e7f2
   1cc68:	2200e7a2 	.word	0x2200e7a2
   1cc6c:	2202e7ee 	.word	0x2202e7ee
   1cc70:	2401e7ec 	.word	0x2401e7ec
   1cc74:	2203e79c 	.word	0x2203e79c
   1cc78:	2402e7e8 	.word	0x2402e7e8
   1cc7c:	2204e798 	.word	0x2204e798
   1cc80:	2403e7e4 	.word	0x2403e7e4
   1cc84:	2205e794 	.word	0x2205e794
   1cc88:	2404e7e0 	.word	0x2404e7e0
   1cc8c:	2207e790 	.word	0x2207e790
   1cc90:	2208e7dc 	.word	0x2208e7dc
   1cc94:	2406e7da 	.word	0x2406e7da
   1cc98:	2407e78a 	.word	0x2407e78a
   1cc9c:	2209e788 	.word	0x2209e788
   1cca0:	2408e7d4 	.word	0x2408e7d4
   1cca4:	220ae784 	.word	0x220ae784
   1cca8:	2409e7d0 	.word	0x2409e7d0
   1ccac:	220be780 	.word	0x220be780
   1ccb0:	240ae7cc 	.word	0x240ae7cc
   1ccb4:	220ce77c 	.word	0x220ce77c
   1ccb8:	220de7c8 	.word	0x220de7c8
   1ccbc:	240be7c6 	.word	0x240be7c6
   1ccc0:	220ee776 	.word	0x220ee776
   1ccc4:	240ce7c2 	.word	0x240ce7c2
   1ccc8:	240de772 	.word	0x240de772
   1cccc:	240ee770 	.word	0x240ee770
   1ccd0:	bf00e76e 	.word	0xbf00e76e
   1ccd4:	200214fc 	.word	0x200214fc
   1ccd8:	2002159c 	.word	0x2002159c
   1ccdc:	200215b4 	.word	0x200215b4
   1cce0:	20021634 	.word	0x20021634

0001cce4 <rpc_transport_register>:
   1cce4:	2900b4f0 	.word	0x2900b4f0
   1cce8:	2800d052 	.word	0x2800d052
   1ccec:	6883d050 	.word	0x6883d050
   1ccf0:	d04d2b00 	.word	0xd04d2b00
   1ccf4:	2b006903 	.word	0x2b006903
   1ccf8:	6843d04a 	.word	0x6843d04a
   1ccfc:	d0472b00 	.word	0xd0472b00
   1cd00:	2b0068c3 	.word	0x2b0068c3
   1cd04:	6803d044 	.word	0x6803d044
   1cd08:	d0412b00 	.word	0xd0412b00
   1cd0c:	2b006943 	.word	0x2b006943
   1cd10:	2601d03e 	.word	0x2601d03e
   1cd14:	46042500 	.word	0x46042500
   1cd18:	4a1f460f 	.word	0x4a1f460f
   1cd1c:	f8df4b1f 	.word	0xf8df4b1f
   1cd20:	7416c080 	.word	0x7416c080
   1cd24:	f8827616 	.word	0xf8827616
   1cd28:	f8826020 	.word	0xf8826020
   1cd2c:	f8826028 	.word	0xf8826028
   1cd30:	f8826030 	.word	0xf8826030
   1cd34:	f8826038 	.word	0xf8826038
   1cd38:	f8826040 	.word	0xf8826040
   1cd3c:	f8826048 	.word	0xf8826048
   1cd40:	f8826050 	.word	0xf8826050
   1cd44:	f8826058 	.word	0xf8826058
   1cd48:	f8826060 	.word	0xf8826060
   1cd4c:	f8826068 	.word	0xf8826068
   1cd50:	f8826070 	.word	0xf8826070
   1cd54:	611d6078 	.word	0x611d6078
   1cd58:	621d619d 	.word	0x621d619d
   1cd5c:	631d629d 	.word	0x631d629d
   1cd60:	641d639d 	.word	0x641d639d
   1cd64:	651d649d 	.word	0x651d649d
   1cd68:	661d659d 	.word	0x661d659d
   1cd6c:	671d669d 	.word	0x671d669d
   1cd70:	7016679d 	.word	0x7016679d
   1cd74:	601d7216 	.word	0x601d7216
   1cd78:	cc0f609d 	.word	0xcc0f609d
   1cd7c:	000fe8ac 	.word	0x000fe8ac
   1cd80:	0003e894 	.word	0x0003e894
   1cd84:	0003e88c 	.word	0x0003e88c
   1cd88:	4628603e 	.word	0x4628603e
   1cd8c:	4770bcf0 	.word	0x4770bcf0
   1cd90:	4628250e 	.word	0x4628250e
   1cd94:	4770bcf0 	.word	0x4770bcf0
   1cd98:	20021634 	.word	0x20021634
   1cd9c:	200215b4 	.word	0x200215b4
   1cda0:	2002159c 	.word	0x2002159c

0001cda4 <rpc_transport_unregister>:
   1cda4:	d03a2800 	.word	0xd03a2800
   1cda8:	47f0e92d 	.word	0x47f0e92d
   1cdac:	4c1d4680 	.word	0x4c1d4680
   1cdb0:	05a0f104 	.word	0x05a0f104
   1cdb4:	341068a3 	.word	0x341068a3
   1cdb8:	4798b103 	.word	0x4798b103
   1cdbc:	d1f942ac 	.word	0xd1f942ac
   1cdc0:	0901f04f 	.word	0x0901f04f
   1cdc4:	4c182600 	.word	0x4c182600
   1cdc8:	f8df4d18 	.word	0xf8df4d18
   1cdcc:	f104a064 	.word	0xf104a064
   1cdd0:	f8140780 	.word	0xf8140780
   1cdd4:	2b013c04 	.word	0x2b013c04
   1cdd8:	f8dad005 	.word	0xf8dad005
   1cddc:	6820300c 	.word	0x6820300c
   1cde0:	f8044798 	.word	0xf8044798
   1cde4:	f8559c04 	.word	0xf8559c04
   1cde8:	34080c04 	.word	0x34080c04
   1cdec:	f8dab128 	.word	0xf8dab128
   1cdf0:	47983010 	.word	0x47983010
   1cdf4:	f845802e 	.word	0xf845802e
   1cdf8:	42bc6c04 	.word	0x42bc6c04
   1cdfc:	0508f105 	.word	0x0508f105
   1ce00:	f8d8d1e7 	.word	0xf8d8d1e7
   1ce04:	22180000 	.word	0x22180000
   1ce08:	eb003801 	.word	0xeb003801
   1ce0c:	eb0a0040 	.word	0xeb0a0040
   1ce10:	210000c0 	.word	0x210000c0
   1ce14:	fd40f007 	.word	0xfd40f007
   1ce18:	e8bd2000 	.word	0xe8bd2000
   1ce1c:	200e87f0 	.word	0x200e87f0
   1ce20:	bf004770 	.word	0xbf004770
   1ce24:	200214fc 	.word	0x200214fc
   1ce28:	20021638 	.word	0x20021638
   1ce2c:	200215b8 	.word	0x200215b8
   1ce30:	2002159c 	.word	0x2002159c

0001ce34 <rpc_message_send>:
   1ce34:	b171b168 	.word	0xb171b168
   1ce38:	68534a09 	.word	0x68534a09
   1ce3c:	684bb16b 	.word	0x684bb16b
   1ce40:	f0238008 	.word	0xf0238008
   1ce44:	f04303ff 	.word	0xf04303ff
   1ce48:	68120302 	.word	0x68120302
   1ce4c:	4608604b 	.word	0x4608604b
   1ce50:	20074710 	.word	0x20074710
   1ce54:	200e4770 	.word	0x200e4770
   1ce58:	20084770 	.word	0x20084770
   1ce5c:	bf004770 	.word	0xbf004770
   1ce60:	2002159c 	.word	0x2002159c

0001ce64 <rpc_message_alloc>:
   1ce64:	b330b35a 	.word	0xb330b35a
   1ce68:	e92d2300 	.word	0xe92d2300
   1ce6c:	4f1541f0 	.word	0x4f1541f0
   1ce70:	687b6013 	.word	0x687b6013
   1ce74:	4615b30b 	.word	0x4615b30b
   1ce78:	4606460c 	.word	0x4606460c
   1ce7c:	4798b959 	.word	0x4798b959
   1ce80:	b1a84603 	.word	0xb1a84603
   1ce84:	60dc46a0 	.word	0x60dc46a0
   1ce88:	8008f8c3 	.word	0x8008f8c3
   1ce8c:	602b801e 	.word	0x602b801e
   1ce90:	e8bd2000 	.word	0xe8bd2000
   1ce94:	68bb81f0 	.word	0x68bb81f0
   1ce98:	47984608 	.word	0x47984608
   1ce9c:	b1384680 	.word	0xb1384680
   1cea0:	4798687b 	.word	0x4798687b
   1cea4:	28004603 	.word	0x28004603
   1cea8:	693bd1ed 	.word	0x693bd1ed
   1ceac:	47984640 	.word	0x47984640
   1ceb0:	e8bd2004 	.word	0xe8bd2004
   1ceb4:	200781f0 	.word	0x200781f0
   1ceb8:	20084770 	.word	0x20084770
   1cebc:	200ee7f9 	.word	0x200ee7f9
   1cec0:	bf004770 	.word	0xbf004770
   1cec4:	2002159c 	.word	0x2002159c

0001cec8 <rpc_message_free>:
   1cec8:	f0002800 	.word	0xf0002800
   1cecc:	2900808c 	.word	0x2900808c
   1ced0:	80e9f000 	.word	0x80e9f000
   1ced4:	4a83b538 	.word	0x4a83b538
   1ced8:	2b006853 	.word	0x2b006853
   1cedc:	8085f000 	.word	0x8085f000
   1cee0:	46084c81 	.word	0x46084c81
   1cee4:	42996863 	.word	0x42996863
   1cee8:	8085f000 	.word	0x8085f000
   1ceec:	429868e3 	.word	0x429868e3
   1cef0:	808ef000 	.word	0x808ef000
   1cef4:	42986963 	.word	0x42986963
   1cef8:	8090f000 	.word	0x8090f000
   1cefc:	429869e3 	.word	0x429869e3
   1cf00:	8092f000 	.word	0x8092f000
   1cf04:	42986a63 	.word	0x42986a63
   1cf08:	8095f000 	.word	0x8095f000
   1cf0c:	42986ae3 	.word	0x42986ae3
   1cf10:	8098f000 	.word	0x8098f000
   1cf14:	42986b63 	.word	0x42986b63
   1cf18:	809bf000 	.word	0x809bf000
   1cf1c:	42986be3 	.word	0x42986be3
   1cf20:	809ef000 	.word	0x809ef000
   1cf24:	42986c63 	.word	0x42986c63
   1cf28:	80a1f000 	.word	0x80a1f000
   1cf2c:	42986ce3 	.word	0x42986ce3
   1cf30:	80a4f000 	.word	0x80a4f000
   1cf34:	42986d63 	.word	0x42986d63
   1cf38:	80a7f000 	.word	0x80a7f000
   1cf3c:	42986de3 	.word	0x42986de3
   1cf40:	80aaf000 	.word	0x80aaf000
   1cf44:	42986e63 	.word	0x42986e63
   1cf48:	80aff000 	.word	0x80aff000
   1cf4c:	42986ee3 	.word	0x42986ee3
   1cf50:	80b2f000 	.word	0x80b2f000
   1cf54:	42986f63 	.word	0x42986f63
   1cf58:	80b5f000 	.word	0x80b5f000
   1cf5c:	42836fe3 	.word	0x42836fe3
   1cf60:	80b8f000 	.word	0x80b8f000
   1cf64:	479868d3 	.word	0x479868d3
   1cf68:	2b047823 	.word	0x2b047823
   1cf6c:	7a23d03f 	.word	0x7a23d03f
   1cf70:	d03c2b04 	.word	0xd03c2b04
   1cf74:	2b047c23 	.word	0x2b047c23
   1cf78:	7e23d039 	.word	0x7e23d039
   1cf7c:	d0362b04 	.word	0xd0362b04
   1cf80:	3020f894 	.word	0x3020f894
   1cf84:	d0322b04 	.word	0xd0322b04
   1cf88:	3028f894 	.word	0x3028f894
   1cf8c:	d02e2b04 	.word	0xd02e2b04
   1cf90:	3030f894 	.word	0x3030f894
   1cf94:	d02a2b04 	.word	0xd02a2b04
   1cf98:	3038f894 	.word	0x3038f894
   1cf9c:	d0262b04 	.word	0xd0262b04
   1cfa0:	3040f894 	.word	0x3040f894
   1cfa4:	d0222b04 	.word	0xd0222b04
   1cfa8:	3048f894 	.word	0x3048f894
   1cfac:	d01e2b04 	.word	0xd01e2b04
   1cfb0:	3050f894 	.word	0x3050f894
   1cfb4:	d01a2b04 	.word	0xd01a2b04
   1cfb8:	3058f894 	.word	0x3058f894
   1cfbc:	d0162b04 	.word	0xd0162b04
   1cfc0:	3060f894 	.word	0x3060f894
   1cfc4:	d0122b04 	.word	0xd0122b04
   1cfc8:	3068f894 	.word	0x3068f894
   1cfcc:	d00e2b04 	.word	0xd00e2b04
   1cfd0:	3070f894 	.word	0x3070f894
   1cfd4:	d00a2b04 	.word	0xd00a2b04
   1cfd8:	3078f894 	.word	0x3078f894
   1cfdc:	bf182b04 	.word	0xbf182b04
   1cfe0:	d0042000 	.word	0xd0042000
   1cfe4:	2007bd38 	.word	0x2007bd38
   1cfe8:	20084770 	.word	0x20084770
   1cfec:	f7f4bd38 	.word	0xf7f4bd38
   1cff0:	2000f98b 	.word	0x2000f98b
   1cff4:	7821bd38 	.word	0x7821bd38
   1cff8:	f47f2903 	.word	0xf47f2903
   1cffc:	2100af77 	.word	0x2100af77
   1d000:	46182501 	.word	0x46182501
   1d004:	f80468d2 	.word	0xf80468d2
   1d008:	47905031 	.word	0x47905031
   1d00c:	bd382000 	.word	0xbd382000
   1d010:	29037a21 	.word	0x29037a21
   1d014:	af6ef47f 	.word	0xaf6ef47f
   1d018:	e7f12101 	.word	0xe7f12101
   1d01c:	29037c21 	.word	0x29037c21
   1d020:	af6cf47f 	.word	0xaf6cf47f
   1d024:	e7eb2102 	.word	0xe7eb2102
   1d028:	29037e21 	.word	0x29037e21
   1d02c:	6a63d0e8 	.word	0x6a63d0e8
   1d030:	f47f4298 	.word	0xf47f4298
   1d034:	f894af6b 	.word	0xf894af6b
   1d038:	29031020 	.word	0x29031020
   1d03c:	af66f47f 	.word	0xaf66f47f
   1d040:	e7dd2104 	.word	0xe7dd2104
   1d044:	1028f894 	.word	0x1028f894
   1d048:	f47f2903 	.word	0xf47f2903
   1d04c:	2105af63 	.word	0x2105af63
   1d050:	f894e7d6 	.word	0xf894e7d6
   1d054:	29031030 	.word	0x29031030
   1d058:	af60f47f 	.word	0xaf60f47f
   1d05c:	e7cf2106 	.word	0xe7cf2106
   1d060:	1038f894 	.word	0x1038f894
   1d064:	f47f2903 	.word	0xf47f2903
   1d068:	2107af5d 	.word	0x2107af5d
   1d06c:	f894e7c8 	.word	0xf894e7c8
   1d070:	29031040 	.word	0x29031040
   1d074:	af5af47f 	.word	0xaf5af47f
   1d078:	e7c12108 	.word	0xe7c12108
   1d07c:	1048f894 	.word	0x1048f894
   1d080:	f47f2903 	.word	0xf47f2903
   1d084:	2109af57 	.word	0x2109af57
   1d088:	f894e7ba 	.word	0xf894e7ba
   1d08c:	29031050 	.word	0x29031050
   1d090:	af54f47f 	.word	0xaf54f47f
   1d094:	e7b3210a 	.word	0xe7b3210a
   1d098:	1058f894 	.word	0x1058f894
   1d09c:	f47f2903 	.word	0xf47f2903
   1d0a0:	210baf51 	.word	0x210baf51
   1d0a4:	200ee7ac 	.word	0x200ee7ac
   1d0a8:	f8944770 	.word	0xf8944770
   1d0ac:	29031060 	.word	0x29031060
   1d0b0:	af4cf47f 	.word	0xaf4cf47f
   1d0b4:	e7a3210c 	.word	0xe7a3210c
   1d0b8:	1068f894 	.word	0x1068f894
   1d0bc:	f47f2903 	.word	0xf47f2903
   1d0c0:	210daf49 	.word	0x210daf49
   1d0c4:	f894e79c 	.word	0xf894e79c
   1d0c8:	29031070 	.word	0x29031070
   1d0cc:	af46f47f 	.word	0xaf46f47f
   1d0d0:	e795210e 	.word	0xe795210e
   1d0d4:	3078f894 	.word	0x3078f894
   1d0d8:	f47f2b03 	.word	0xf47f2b03
   1d0dc:	4603af43 	.word	0x4603af43
   1d0e0:	e78d210f 	.word	0xe78d210f
   1d0e4:	2002159c 	.word	0x2002159c
   1d0e8:	20021634 	.word	0x20021634

0001d0ec <rpc_message_data_free>:
   1d0ec:	f0002800 	.word	0xf0002800
   1d0f0:	29008091 	.word	0x29008091
   1d0f4:	80e4f000 	.word	0x80e4f000
   1d0f8:	4a81b538 	.word	0x4a81b538
   1d0fc:	2b006853 	.word	0x2b006853
   1d100:	808af000 	.word	0x808af000
   1d104:	681c4b7f 	.word	0x681c4b7f
   1d108:	f00042a1 	.word	0xf00042a1
   1d10c:	689c8087 	.word	0x689c8087
   1d110:	f00042a1 	.word	0xf00042a1
   1d114:	691c808f 	.word	0x691c808f
   1d118:	f00042a1 	.word	0xf00042a1
   1d11c:	699c8091 	.word	0x699c8091
   1d120:	f00042a1 	.word	0xf00042a1
   1d124:	6a1c8093 	.word	0x6a1c8093
   1d128:	f00042a1 	.word	0xf00042a1
   1d12c:	6a9c8095 	.word	0x6a9c8095
   1d130:	f00042a1 	.word	0xf00042a1
   1d134:	6b1c8097 	.word	0x6b1c8097
   1d138:	f00042a1 	.word	0xf00042a1
   1d13c:	6b9c8099 	.word	0x6b9c8099
   1d140:	f00042a1 	.word	0xf00042a1
   1d144:	6c1c809b 	.word	0x6c1c809b
   1d148:	f00042a1 	.word	0xf00042a1
   1d14c:	6c9c809d 	.word	0x6c9c809d
   1d150:	f00042a1 	.word	0xf00042a1
   1d154:	6d1c80a0 	.word	0x6d1c80a0
   1d158:	f00042a1 	.word	0xf00042a1
   1d15c:	6d9c80a3 	.word	0x6d9c80a3
   1d160:	f00042a1 	.word	0xf00042a1
   1d164:	6e1c80a6 	.word	0x6e1c80a6
   1d168:	f00042a1 	.word	0xf00042a1
   1d16c:	6e9c80ab 	.word	0x6e9c80ab
   1d170:	f00042a1 	.word	0xf00042a1
   1d174:	6f1c80ae 	.word	0x6f1c80ae
   1d178:	f00042a1 	.word	0xf00042a1
   1d17c:	6f9c80b1 	.word	0x6f9c80b1
   1d180:	f000428c 	.word	0xf000428c
   1d184:	691380b4 	.word	0x691380b4
   1d188:	47984608 	.word	0x47984608
   1d18c:	781a4b5e 	.word	0x781a4b5e
   1d190:	d03b2a04 	.word	0xd03b2a04
   1d194:	2a047a1a 	.word	0x2a047a1a
   1d198:	7c1ad038 	.word	0x7c1ad038
   1d19c:	d0352a04 	.word	0xd0352a04
   1d1a0:	2a047e1a 	.word	0x2a047e1a
   1d1a4:	f893d032 	.word	0xf893d032
   1d1a8:	2a042020 	.word	0x2a042020
   1d1ac:	f893d02e 	.word	0xf893d02e
   1d1b0:	2a042028 	.word	0x2a042028
   1d1b4:	f893d02a 	.word	0xf893d02a
   1d1b8:	2a042030 	.word	0x2a042030
   1d1bc:	f893d026 	.word	0xf893d026
   1d1c0:	2a042038 	.word	0x2a042038
   1d1c4:	f893d022 	.word	0xf893d022
   1d1c8:	2a042040 	.word	0x2a042040
   1d1cc:	f893d01e 	.word	0xf893d01e
   1d1d0:	2a042048 	.word	0x2a042048
   1d1d4:	f893d01a 	.word	0xf893d01a
   1d1d8:	2a042050 	.word	0x2a042050
   1d1dc:	f893d016 	.word	0xf893d016
   1d1e0:	2a042058 	.word	0x2a042058
   1d1e4:	f893d012 	.word	0xf893d012
   1d1e8:	2a042060 	.word	0x2a042060
   1d1ec:	f893d00e 	.word	0xf893d00e
   1d1f0:	2a042068 	.word	0x2a042068
   1d1f4:	f893d00a 	.word	0xf893d00a
   1d1f8:	2a042070 	.word	0x2a042070
   1d1fc:	f893d006 	.word	0xf893d006
   1d200:	2b043078 	.word	0x2b043078
   1d204:	2000bf18 	.word	0x2000bf18
   1d208:	bd38d000 	.word	0xbd38d000
   1d20c:	f87cf7f4 	.word	0xf87cf7f4
   1d210:	bd382000 	.word	0xbd382000
   1d214:	47702007 	.word	0x47702007
   1d218:	bd382008 	.word	0xbd382008
   1d21c:	4284889c 	.word	0x4284889c
   1d220:	af75f47f 	.word	0xaf75f47f
   1d224:	20002400 	.word	0x20002400
   1d228:	05c4eb03 	.word	0x05c4eb03
   1d22c:	0034f843 	.word	0x0034f843
   1d230:	e7a880a8 	.word	0xe7a880a8
   1d234:	4284899c 	.word	0x4284899c
   1d238:	af6df47f 	.word	0xaf6df47f
   1d23c:	e7f22401 	.word	0xe7f22401
   1d240:	42848a9c 	.word	0x42848a9c
   1d244:	af6bf47f 	.word	0xaf6bf47f
   1d248:	e7ec2402 	.word	0xe7ec2402
   1d24c:	42848b9c 	.word	0x42848b9c
   1d250:	af69f47f 	.word	0xaf69f47f
   1d254:	e7e62403 	.word	0xe7e62403
   1d258:	42848c9c 	.word	0x42848c9c
   1d25c:	af67f47f 	.word	0xaf67f47f
   1d260:	e7e02404 	.word	0xe7e02404
   1d264:	42848d9c 	.word	0x42848d9c
   1d268:	af65f47f 	.word	0xaf65f47f
   1d26c:	e7da2405 	.word	0xe7da2405
   1d270:	42848e9c 	.word	0x42848e9c
   1d274:	af63f47f 	.word	0xaf63f47f
   1d278:	e7d42406 	.word	0xe7d42406
   1d27c:	42848f9c 	.word	0x42848f9c
   1d280:	af61f47f 	.word	0xaf61f47f
   1d284:	e7ce2407 	.word	0xe7ce2407
   1d288:	4044f8b3 	.word	0x4044f8b3
   1d28c:	f47f4284 	.word	0xf47f4284
   1d290:	2408af5e 	.word	0x2408af5e
   1d294:	f8b3e7c7 	.word	0xf8b3e7c7
   1d298:	4284404c 	.word	0x4284404c
   1d29c:	af5bf47f 	.word	0xaf5bf47f
   1d2a0:	e7c02409 	.word	0xe7c02409
   1d2a4:	4054f8b3 	.word	0x4054f8b3
   1d2a8:	f47f4284 	.word	0xf47f4284
   1d2ac:	240aaf58 	.word	0x240aaf58
   1d2b0:	f8b3e7b9 	.word	0xf8b3e7b9
   1d2b4:	4284405c 	.word	0x4284405c
   1d2b8:	af55f47f 	.word	0xaf55f47f
   1d2bc:	e7b2240b 	.word	0xe7b2240b
   1d2c0:	4770200e 	.word	0x4770200e
   1d2c4:	4064f8b3 	.word	0x4064f8b3
   1d2c8:	f47f4284 	.word	0xf47f4284
   1d2cc:	240caf50 	.word	0x240caf50
   1d2d0:	f8b3e7a9 	.word	0xf8b3e7a9
   1d2d4:	4284406c 	.word	0x4284406c
   1d2d8:	af4df47f 	.word	0xaf4df47f
   1d2dc:	e7a2240d 	.word	0xe7a2240d
   1d2e0:	4074f8b3 	.word	0x4074f8b3
   1d2e4:	f47f4284 	.word	0xf47f4284
   1d2e8:	240eaf4a 	.word	0x240eaf4a
   1d2ec:	f8b3e79b 	.word	0xf8b3e79b
   1d2f0:	4284407c 	.word	0x4284407c
   1d2f4:	240fbf08 	.word	0x240fbf08
   1d2f8:	af45f47f 	.word	0xaf45f47f
   1d2fc:	bf00e793 	.word	0xbf00e793
   1d300:	2002159c 	.word	0x2002159c
   1d304:	200215b4 	.word	0x200215b4
   1d308:	20021634 	.word	0x20021634

0001d30c <symbol_000fb79>:
   1d30c:	b4302801 	.word	0xb4302801
   1d310:	d1034b0a 	.word	0xd1034b0a
   1d314:	7c1de00a 	.word	0x7c1de00a
   1d318:	d0084285 	.word	0xd0084285
   1d31c:	4f14f853 	.word	0x4f14f853
   1d320:	d1f82c00 	.word	0xd1f82c00
   1d324:	002df06f 	.word	0x002df06f
   1d328:	4770bc30 	.word	0x4770bc30
   1d32c:	600c4c04 	.word	0x600c4c04
   1d330:	2000685b 	.word	0x2000685b
   1d334:	6013bc30 	.word	0x6013bc30
   1d338:	bf004770 	.word	0xbf004770
   1d33c:	00026120 	.word	0x00026120
   1d340:	000260ec 	.word	0x000260ec

0001d344 <symbol_000494c>:
   1d344:	b4302803 	.word	0xb4302803
   1d348:	d1034b0a 	.word	0xd1034b0a
   1d34c:	7c1de00a 	.word	0x7c1de00a
   1d350:	d0084285 	.word	0xd0084285
   1d354:	4f14f853 	.word	0x4f14f853
   1d358:	d1f82c00 	.word	0xd1f82c00
   1d35c:	002df06f 	.word	0x002df06f
   1d360:	4770bc30 	.word	0x4770bc30
   1d364:	600c4c04 	.word	0x600c4c04
   1d368:	2000685b 	.word	0x2000685b
   1d36c:	6013bc30 	.word	0x6013bc30
   1d370:	bf004770 	.word	0xbf004770
   1d374:	000260f8 	.word	0x000260f8
   1d378:	000260e0 	.word	0x000260e0

0001d37c <dfu_client_event_handler>:
   1d37c:	1b08f850 	.word	0x1b08f850
   1d380:	f7fc0c09 	.word	0xf7fc0c09
   1d384:	bf00b80d 	.word	0xbf00b80d

0001d388 <rpc_dfu_client_init>:
   1d388:	f7ff4801 	.word	0xf7ff4801
   1d38c:	bf00bb33 	.word	0xbf00bb33
   1d390:	00026170 	.word	0x00026170

0001d394 <rpc_dfu_client_request_alloc>:
   1d394:	b5102300 	.word	0xb5102300
   1d398:	9301b082 	.word	0x9301b082
   1d39c:	4604b158 	.word	0x4604b158
   1d3a0:	2006aa01 	.word	0x2006aa01
   1d3a4:	fd5ef7ff 	.word	0xfd5ef7ff
   1d3a8:	9b01b918 	.word	0x9b01b918
   1d3ac:	3308b10b 	.word	0x3308b10b
   1d3b0:	b0026023 	.word	0xb0026023
   1d3b4:	2007bd10 	.word	0x2007bd10
   1d3b8:	bd10b002 	.word	0xbd10b002

0001d3bc <rpc_dfu_client_request_send>:
   1d3bc:	4f70f411 	.word	0x4f70f411
   1d3c0:	b160d10b 	.word	0xb160d10b
   1d3c4:	f8304603 	.word	0xf8304603
   1d3c8:	20062c08 	.word	0x20062c08
   1d3cc:	4101ea42 	.word	0x4101ea42
   1d3d0:	1d08f843 	.word	0x1d08f843
   1d3d4:	f7ff4619 	.word	0xf7ff4619
   1d3d8:	200fbd2d 	.word	0x200fbd2d
   1d3dc:	20074770 	.word	0x20074770
   1d3e0:	bf004770 	.word	0xbf004770

0001d3e4 <rpc_dfu_client_message_free>:
   1d3e4:	f1a0b120 	.word	0xf1a0b120
   1d3e8:	20060108 	.word	0x20060108
   1d3ec:	bd6cf7ff 	.word	0xbd6cf7ff
   1d3f0:	47702007 	.word	0x47702007

0001d3f4 <rpc_dfu_client_data_free>:
   1d3f4:	4601b118 	.word	0x4601b118
   1d3f8:	f7ff2006 	.word	0xf7ff2006
   1d3fc:	2007be77 	.word	0x2007be77
   1d400:	bf004770 	.word	0xbf004770

0001d404 <mem_free>:
   1d404:	4ff0e92d 	.word	0x4ff0e92d
   1d408:	c0ccf8df 	.word	0xc0ccf8df
   1d40c:	9000b083 	.word	0x9000b083
   1d410:	0b3cf10c 	.word	0x0b3cf10c
   1d414:	3008f8dc 	.word	0x3008f8dc
   1d418:	f8dcb12b 	.word	0xf8dcb12b
   1d41c:	9c002000 	.word	0x9c002000
   1d420:	42a07810 	.word	0x42a07810
   1d424:	f10cd006 	.word	0xf10cd006
   1d428:	45e30c0c 	.word	0x45e30c0c
   1d42c:	b003d1f2 	.word	0xb003d1f2
   1d430:	8ff0e8bd 	.word	0x8ff0e8bd
   1d434:	a004f8dc 	.word	0xa004f8dc
   1d438:	080aeb03 	.word	0x080aeb03
   1d43c:	d2f245c2 	.word	0xd2f245c2
   1d440:	f8cd6853 	.word	0xf8cd6853
   1d444:	46d6c004 	.word	0x46d6c004
   1d448:	f8d2469c 	.word	0xf8d2469c
   1d44c:	89979010 	.word	0x89979010
   1d450:	000aebae 	.word	0x000aebae
   1d454:	f8b9b3df 	.word	0xf8b9b3df
   1d458:	42902002 	.word	0x42902002
   1d45c:	4665d31c 	.word	0x4665d31c
   1d460:	f1092400 	.word	0xf1092400
   1d464:	e0030304 	.word	0xe0030304
   1d468:	3304885a 	.word	0x3304885a
   1d46c:	d8154282 	.word	0xd8154282
   1d470:	6c04f833 	.word	0x6c04f833
   1d474:	42a73401 	.word	0x42a73401
   1d478:	5506fb02 	.word	0x5506fb02
   1d47c:	0002eba0 	.word	0x0002eba0
   1d480:	d1f1461e 	.word	0xd1f1461e
   1d484:	42812000 	.word	0x42812000
   1d488:	f10ed00d 	.word	0xf10ed00d
   1d48c:	45f00e01 	.word	0x45f00e01
   1d490:	f8ddd1de 	.word	0xf8ddd1de
   1d494:	e7c6c004 	.word	0xe7c6c004
   1d498:	464e4665 	.word	0x464e4665
   1d49c:	fb008833 	.word	0xfb008833
   1d4a0:	42815003 	.word	0x42815003
   1d4a4:	f5bed1f1 	.word	0xf5bed1f1
   1d4a8:	f8dd7f00 	.word	0xf8dd7f00
   1d4ac:	d0bac004 	.word	0xd0bac004
   1d4b0:	4a082301 	.word	0x4a082301
   1d4b4:	115eea4f 	.word	0x115eea4f
   1d4b8:	0021f852 	.word	0x0021f852
   1d4bc:	0e1ff00e 	.word	0x0e1ff00e
   1d4c0:	fe0efa03 	.word	0xfe0efa03
   1d4c4:	0000ea4e 	.word	0x0000ea4e
   1d4c8:	0021f842 	.word	0x0021f842
   1d4cc:	4638e7af 	.word	0x4638e7af
   1d4d0:	bf00e7d9 	.word	0xbf00e7d9
   1d4d4:	200216b4 	.word	0x200216b4
   1d4d8:	200216f8 	.word	0x200216f8

0001d4dc <mem_alloc.constprop.5>:
   1d4dc:	d0502800 	.word	0xd0502800
   1d4e0:	f8d34b6d 	.word	0xf8d34b6d
   1d4e4:	42902088 	.word	0x42902088
   1d4e8:	e92dd84b 	.word	0xe92dd84b
   1d4ec:	f8d34ff0 	.word	0xf8d34ff0
   1d4f0:	b083b08c 	.word	0xb083b08c
   1d4f4:	0f00f1bb 	.word	0x0f00f1bb
   1d4f8:	f10bd054 	.word	0xf10bd054
   1d4fc:	469132ff 	.word	0x469132ff
   1d500:	f04f2600 	.word	0xf04f2600
   1d504:	4f650812 	.word	0x4f650812
   1d508:	f10b9201 	.word	0xf10b9201
   1d50c:	eb060e11 	.word	0xeb060e11
   1d510:	f8530209 	.word	0xf8530209
   1d514:	32014038 	.word	0x32014038
   1d518:	eb040852 	.word	0xeb040852
   1d51c:	f1020c44 	.word	0xf1020c44
   1d520:	f8530112 	.word	0xf8530112
   1d524:	f8575031 	.word	0xf8575031
   1d528:	f853a02c 	.word	0xf853a02c
   1d52c:	eb03403e 	.word	0xeb03403e
   1d530:	f8dc0cc8 	.word	0xf8dc0cc8
   1d534:	eb05c004 	.word	0xeb05c004
   1d538:	eb040545 	.word	0xeb040545
   1d53c:	f8da0444 	.word	0xf8da0444
   1d540:	f857a010 	.word	0xf857a010
   1d544:	f8575025 	.word	0xf8575025
   1d548:	f83a4024 	.word	0xf83a4024
   1d54c:	eb03a02c 	.word	0xeb03a02c
   1d550:	eb0301c1 	.word	0xeb0301c1
   1d554:	68490cce 	.word	0x68490cce
   1d558:	6924692d 	.word	0x6924692d
   1d55c:	c004f8dc 	.word	0xc004f8dc
   1d560:	f8354550 	.word	0xf8354550
   1d564:	f8345021 	.word	0xf8345021
   1d568:	d915102c 	.word	0xd915102c
   1d56c:	d2114288 	.word	0xd2114288
   1d570:	d90842a8 	.word	0xd90842a8
   1d574:	45b11c56 	.word	0x45b11c56
   1d578:	8087f0c0 	.word	0x8087f0c0
   1d57c:	0813f102 	.word	0x0813f102
   1d580:	2000e7c5 	.word	0x2000e7c5
   1d584:	f1024770 	.word	0xf1024770
   1d588:	454e39ff 	.word	0x454e39ff
   1d58c:	f102d87d 	.word	0xf102d87d
   1d590:	e7bc0e11 	.word	0xe7bc0e11
   1d594:	0601f109 	.word	0x0601f109
   1d598:	d00745b3 	.word	0xd00745b3
   1d59c:	d0012e10 	.word	0xd0012e10
   1d5a0:	d80845b3 	.word	0xd80845b3
   1d5a4:	b0032000 	.word	0xb0032000
   1d5a8:	8ff0e8bd 	.word	0x8ff0e8bd
   1d5ac:	2a109a01 	.word	0x2a109a01
   1d5b0:	4616bf18 	.word	0x4616bf18
   1d5b4:	f8dfd0f6 	.word	0xf8dfd0f6
   1d5b8:	eb03c0e8 	.word	0xeb03c0e8
   1d5bc:	e9d808c6 	.word	0xe9d808c6
   1d5c0:	eb022424 	.word	0xeb022424
   1d5c4:	f8570242 	.word	0xf8570242
   1d5c8:	eb073022 	.word	0xeb073022
   1d5cc:	f8d20282 	.word	0xf8d20282
   1d5d0:	691de004 	.word	0x691de004
   1d5d4:	d0562c00 	.word	0xd0562c00
   1d5d8:	4670462a 	.word	0x4670462a
   1d5dc:	eb0500a4 	.word	0xeb0500a4
   1d5e0:	88510904 	.word	0x88510904
   1d5e4:	45913204 	.word	0x45913204
   1d5e8:	d1fa4408 	.word	0xd1fa4408
   1d5ec:	f8b11929 	.word	0xf8b11929
   1d5f0:	4482a002 	.word	0x4482a002
   1d5f4:	d9184582 	.word	0xd9184582
   1d5f8:	f85c0941 	.word	0xf85c0941
   1d5fc:	f0002021 	.word	0xf0002021
   1d600:	fa22041f 	.word	0xfa22041f
   1d604:	f019f904 	.word	0xf019f904
   1d608:	d0070f01 	.word	0xd0070f01
   1d60c:	f85ce013 	.word	0xf85ce013
   1d610:	fa222021 	.word	0xfa222021
   1d614:	f019f904 	.word	0xf019f904
   1d618:	d10c0f01 	.word	0xd10c0f01
   1d61c:	45823001 	.word	0x45823001
   1d620:	1150ea4f 	.word	0x1150ea4f
   1d624:	041ff000 	.word	0x041ff000
   1d628:	3601d1f1 	.word	0x3601d1f1
   1d62c:	f108455e 	.word	0xf108455e
   1d630:	d3c40808 	.word	0xd3c40808
   1d634:	2601e7b6 	.word	0x2601e7b6
   1d638:	f404fa06 	.word	0xf404fa06
   1d63c:	ea22899e 	.word	0xea22899e
   1d640:	eba00204 	.word	0xeba00204
   1d644:	f84c000e 	.word	0xf84c000e
   1d648:	685c2021 	.word	0x685c2021
   1d64c:	d0a92e00 	.word	0xd0a92e00
   1d650:	4282886a 	.word	0x4282886a
   1d654:	2100d811 	.word	0x2100d811
   1d658:	e0031d2b 	.word	0xe0031d2b
   1d65c:	3304885a 	.word	0x3304885a
   1d660:	d80a4282 	.word	0xd80a4282
   1d664:	5c04f833 	.word	0x5c04f833
   1d668:	428e3101 	.word	0x428e3101
   1d66c:	4405fb02 	.word	0x4405fb02
   1d670:	0002eba0 	.word	0x0002eba0
   1d674:	d1f1461d 	.word	0xd1f1461d
   1d678:	882be794 	.word	0x882be794
   1d67c:	4003fb00 	.word	0x4003fb00
   1d680:	e8bdb003 	.word	0xe8bdb003
   1d684:	46708ff0 	.word	0x46708ff0
   1d688:	f1bbe7b0 	.word	0xf1bbe7b0
   1d68c:	bf080f10 	.word	0xbf080f10
   1d690:	d090260f 	.word	0xd090260f
   1d694:	bf00e786 	.word	0xbf00e786
   1d698:	20021734 	.word	0x20021734
   1d69c:	200216f8 	.word	0x200216f8
   1d6a0:	200216b4 	.word	0x200216b4

0001d6a4 <mem_alloc.constprop.4>:
   1d6a4:	d04c2800 	.word	0xd04c2800
   1d6a8:	681a4b6b 	.word	0x681a4b6b
   1d6ac:	d8484290 	.word	0xd8484290
   1d6b0:	4ff0e92d 	.word	0x4ff0e92d
   1d6b4:	b083685f 	.word	0xb083685f
   1d6b8:	2f009700 	.word	0x2f009700
   1d6bc:	1e7ad051 	.word	0x1e7ad051
   1d6c0:	21004696 	.word	0x21004696
   1d6c4:	0c01f04f 	.word	0x0c01f04f
   1d6c8:	92014c64 	.word	0x92014c64
   1d6cc:	020eeb01 	.word	0x020eeb01
   1d6d0:	f8533201 	.word	0xf8533201
   1d6d4:	0852503c 	.word	0x0852503c
   1d6d8:	0801f102 	.word	0x0801f102
   1d6dc:	0545eb05 	.word	0x0545eb05
   1d6e0:	9037f853 	.word	0x9037f853
   1d6e4:	a025f854 	.word	0xa025f854
   1d6e8:	6038f853 	.word	0x6038f853
   1d6ec:	0549eb09 	.word	0x0549eb09
   1d6f0:	09cceb03 	.word	0x09cceb03
   1d6f4:	9004f8d9 	.word	0x9004f8d9
   1d6f8:	0646eb06 	.word	0x0646eb06
   1d6fc:	a010f8da 	.word	0xa010f8da
   1d700:	6026f854 	.word	0x6026f854
   1d704:	5025f854 	.word	0x5025f854
   1d708:	a029f83a 	.word	0xa029f83a
   1d70c:	0bc8eb03 	.word	0x0bc8eb03
   1d710:	09c7eb03 	.word	0x09c7eb03
   1d714:	f8db6936 	.word	0xf8db6936
   1d718:	692db004 	.word	0x692db004
   1d71c:	9004f8d9 	.word	0x9004f8d9
   1d720:	f8364550 	.word	0xf8364550
   1d724:	f835602b 	.word	0xf835602b
   1d728:	d9135029 	.word	0xd9135029
   1d72c:	d21042a8 	.word	0xd21042a8
   1d730:	d90842b0 	.word	0xd90842b0
   1d734:	464145c6 	.word	0x464145c6
   1d738:	8087f0c0 	.word	0x8087f0c0
   1d73c:	0c01f108 	.word	0x0c01f108
   1d740:	2000e7c4 	.word	0x2000e7c4
   1d744:	f1024770 	.word	0xf1024770
   1d748:	45713eff 	.word	0x45713eff
   1d74c:	4617d87d 	.word	0x4617d87d
   1d750:	4639e7bc 	.word	0x4639e7bc
   1d754:	428a9a00 	.word	0x428a9a00
   1d758:	2910d007 	.word	0x2910d007
   1d75c:	428ad001 	.word	0x428ad001
   1d760:	2000d808 	.word	0x2000d808
   1d764:	e8bdb003 	.word	0xe8bdb003
   1d768:	9a018ff0 	.word	0x9a018ff0
   1d76c:	bf182a10 	.word	0xbf182a10
   1d770:	d0f64611 	.word	0xd0f64611
   1d774:	c0e8f8df 	.word	0xc0e8f8df
   1d778:	9000f8dd 	.word	0x9000f8dd
   1d77c:	08c1eb03 	.word	0x08c1eb03
   1d780:	2602e9d8 	.word	0x2602e9d8
   1d784:	0242eb02 	.word	0x0242eb02
   1d788:	3022f854 	.word	0x3022f854
   1d78c:	0282eb04 	.word	0x0282eb04
   1d790:	e004f8d2 	.word	0xe004f8d2
   1d794:	2e00691f 	.word	0x2e00691f
   1d798:	463ad055 	.word	0x463ad055
   1d79c:	00b64670 	.word	0x00b64670
   1d7a0:	0a06eb07 	.word	0x0a06eb07
   1d7a4:	32048855 	.word	0x32048855
   1d7a8:	44284592 	.word	0x44284592
   1d7ac:	19bdd1fa 	.word	0x19bdd1fa
   1d7b0:	b002f8b5 	.word	0xb002f8b5
   1d7b4:	45834483 	.word	0x45834483
   1d7b8:	0945d918 	.word	0x0945d918
   1d7bc:	2025f85c 	.word	0x2025f85c
   1d7c0:	061ff000 	.word	0x061ff000
   1d7c4:	fa06fa22 	.word	0xfa06fa22
   1d7c8:	0f01f01a 	.word	0x0f01f01a
   1d7cc:	e013d007 	.word	0xe013d007
   1d7d0:	2025f85c 	.word	0x2025f85c
   1d7d4:	fa06fa22 	.word	0xfa06fa22
   1d7d8:	0f01f01a 	.word	0x0f01f01a
   1d7dc:	3001d10c 	.word	0x3001d10c
   1d7e0:	ea4f4583 	.word	0xea4f4583
   1d7e4:	f0001550 	.word	0xf0001550
   1d7e8:	d1f1061f 	.word	0xd1f1061f
   1d7ec:	45493101 	.word	0x45493101
   1d7f0:	0808f108 	.word	0x0808f108
   1d7f4:	e7b4d3c4 	.word	0xe7b4d3c4
   1d7f8:	40b12101 	.word	0x40b12101
   1d7fc:	ea22899e 	.word	0xea22899e
   1d800:	eba00201 	.word	0xeba00201
   1d804:	f84c000e 	.word	0xf84c000e
   1d808:	685c2025 	.word	0x685c2025
   1d80c:	d0a82e00 	.word	0xd0a82e00
   1d810:	4282887a 	.word	0x4282887a
   1d814:	2100d811 	.word	0x2100d811
   1d818:	e0031d3b 	.word	0xe0031d3b
   1d81c:	3304885a 	.word	0x3304885a
   1d820:	d80a4282 	.word	0xd80a4282
   1d824:	5c04f833 	.word	0x5c04f833
   1d828:	428e3101 	.word	0x428e3101
   1d82c:	0002eba0 	.word	0x0002eba0
   1d830:	4405fb02 	.word	0x4405fb02
   1d834:	d1f1461f 	.word	0xd1f1461f
   1d838:	883be793 	.word	0x883be793
   1d83c:	4003fb00 	.word	0x4003fb00
   1d840:	e8bdb003 	.word	0xe8bdb003
   1d844:	46708ff0 	.word	0x46708ff0
   1d848:	9a00e7b1 	.word	0x9a00e7b1
   1d84c:	bf082a10 	.word	0xbf082a10
   1d850:	d08f210f 	.word	0xd08f210f
   1d854:	bf00e785 	.word	0xbf00e785
   1d858:	20021734 	.word	0x20021734
   1d85c:	200216f8 	.word	0x200216f8
   1d860:	200216b4 	.word	0x200216b4

0001d864 <nrf_mem_init>:
   1d864:	2200b570 	.word	0x2200b570
   1d868:	48332501 	.word	0x48332501
   1d86c:	f8500951 	.word	0xf8500951
   1d870:	f0024021 	.word	0xf0024021
   1d874:	fa05031f 	.word	0xfa05031f
   1d878:	3201f303 	.word	0x3201f303
   1d87c:	f5b24323 	.word	0xf5b24323
   1d880:	f8407f00 	.word	0xf8407f00
   1d884:	d1f13021 	.word	0xd1f13021
   1d888:	4b2c2400 	.word	0x4b2c2400
   1d88c:	223c4621 	.word	0x223c4621
   1d890:	601c482b 	.word	0x601c482b
   1d894:	f800f007 	.word	0xf800f007
   1d898:	22052110 	.word	0x22052110
   1d89c:	4e2a4b29 	.word	0x4e2a4b29
   1d8a0:	4400e9c3 	.word	0x4400e9c3
   1d8a4:	615960d9 	.word	0x615960d9
   1d8a8:	625961d9 	.word	0x625961d9
   1d8ac:	635962d9 	.word	0x635962d9
   1d8b0:	645963d9 	.word	0x645963d9
   1d8b4:	655964d9 	.word	0x655964d9
   1d8b8:	665965d9 	.word	0x665965d9
   1d8bc:	675966d9 	.word	0x675966d9
   1d8c0:	609a67d9 	.word	0x609a67d9
   1d8c4:	619a611a 	.word	0x619a611a
   1d8c8:	629a621a 	.word	0x629a621a
   1d8cc:	639a631a 	.word	0x639a631a
   1d8d0:	649a641a 	.word	0x649a641a
   1d8d4:	659a651a 	.word	0x659a651a
   1d8d8:	669a661a 	.word	0x669a661a
   1d8dc:	679a671a 	.word	0x679a671a
   1d8e0:	2120e9c3 	.word	0x2120e9c3
   1d8e4:	4422e9c3 	.word	0x4422e9c3
   1d8e8:	2124e9c3 	.word	0x2124e9c3
   1d8ec:	2126e9c3 	.word	0x2126e9c3
   1d8f0:	2128e9c3 	.word	0x2128e9c3
   1d8f4:	212ae9c3 	.word	0x212ae9c3
   1d8f8:	212ce9c3 	.word	0x212ce9c3
   1d8fc:	212ee9c3 	.word	0x212ee9c3
   1d900:	2130e9c3 	.word	0x2130e9c3
   1d904:	2132e9c3 	.word	0x2132e9c3
   1d908:	2134e9c3 	.word	0x2134e9c3
   1d90c:	2136e9c3 	.word	0x2136e9c3
   1d910:	2138e9c3 	.word	0x2138e9c3
   1d914:	213ae9c3 	.word	0x213ae9c3
   1d918:	213ce9c3 	.word	0x213ce9c3
   1d91c:	213ee9c3 	.word	0x213ee9c3
   1d920:	1104f8c3 	.word	0x1104f8c3
   1d924:	2100f8c3 	.word	0x2100f8c3
   1d928:	110cf8c3 	.word	0x110cf8c3
   1d92c:	2108f8c3 	.word	0x2108f8c3
   1d930:	70354620 	.word	0x70354620
   1d934:	bf00bd70 	.word	0xbf00bd70
   1d938:	200216b4 	.word	0x200216b4
   1d93c:	200216f4 	.word	0x200216f4
   1d940:	200216f8 	.word	0x200216f8
   1d944:	20021734 	.word	0x20021734
   1d948:	200226b4 	.word	0x200226b4

0001d94c <nrf_mem_register>:
   1d94c:	4ff0e92d 	.word	0x4ff0e92d
   1d950:	b0874b87 	.word	0xb0874b87
   1d954:	2b00781b 	.word	0x2b00781b
   1d958:	808cf000 	.word	0x808cf000
   1d95c:	b321b328 	.word	0xb321b328
   1d960:	f8df780b 	.word	0xf8df780b
   1d964:	eb038218 	.word	0xeb038218
   1d968:	eb081303 	.word	0xeb081303
   1d96c:	685b03c3 	.word	0x685b03c3
   1d970:	c00cf8b1 	.word	0xc00cf8b1
   1d974:	2b104463 	.word	0x2b104463
   1d978:	f04fd811 	.word	0xf04fd811
   1d97c:	46890a00 	.word	0x46890a00
   1d980:	4f7d4b7c 	.word	0x4f7d4b7c
   1d984:	ea4f681b 	.word	0xea4f681b
   1d988:	93000e8c 	.word	0x93000e8c
   1d98c:	b19168b9 	.word	0xb19168b9
   1d990:	0a01f10a 	.word	0x0a01f10a
   1d994:	0f05f1ba 	.word	0x0f05f1ba
   1d998:	070cf107 	.word	0x070cf107
   1d99c:	f248d1f6 	.word	0xf248d1f6
   1d9a0:	46581b07 	.word	0x46581b07
   1d9a4:	e8bdb007 	.word	0xe8bdb007
   1d9a8:	f2488ff0 	.word	0xf2488ff0
   1d9ac:	46581b0e 	.word	0x46581b0e
   1d9b0:	e8bdb007 	.word	0xe8bdb007
   1d9b4:	f1bc8ff0 	.word	0xf1bc8ff0
   1d9b8:	d0610f00 	.word	0xd0610f00
   1d9bc:	460c460d 	.word	0x460c460d
   1d9c0:	3010f8d9 	.word	0x3010f8d9
   1d9c4:	0b03eb0e 	.word	0x0b03eb0e
   1d9c8:	f833885a 	.word	0xf833885a
   1d9cc:	44156b04 	.word	0x44156b04
   1d9d0:	fb02459b 	.word	0xfb02459b
   1d9d4:	d1f74406 	.word	0xd1f74406
   1d9d8:	3008f8d9 	.word	0x3008f8d9
   1d9dc:	d3d742a3 	.word	0xd3d742a3
   1d9e0:	442b9b00 	.word	0x442b9b00
   1d9e4:	7f00f5b3 	.word	0x7f00f5b3
   1d9e8:	4c63d2d2 	.word	0x4c63d2d2
   1d9ec:	024aeb0a 	.word	0x024aeb0a
   1d9f0:	f8c00092 	.word	0xf8c00092
   1d9f4:	18a0a000 	.word	0x18a0a000
   1d9f8:	9002f844 	.word	0x9002f844
   1d9fc:	468b9a00 	.word	0x468b9a00
   1da00:	2501e9c0 	.word	0x2501e9c0
   1da04:	2001f899 	.word	0x2001f899
   1da08:	2a01485a 	.word	0x2a01485a
   1da0c:	d0c86003 	.word	0xd0c86003
   1da10:	300cf8b9 	.word	0x300cf8b9
   1da14:	d0c42b00 	.word	0xd0c42b00
   1da18:	f8cd2500 	.word	0xf8cd2500
   1da1c:	f8cd9004 	.word	0xf8cd9004
   1da20:	f8cda00c 	.word	0xf8cda00c
   1da24:	9b01b014 	.word	0x9b01b014
   1da28:	691a781f 	.word	0x691a781f
   1da2c:	eb03013b 	.word	0xeb03013b
   1da30:	93000907 	.word	0x93000907
   1da34:	03c9eb08 	.word	0x03c9eb08
   1da38:	f8326859 	.word	0xf8326859
   1da3c:	91024025 	.word	0x91024025
   1da40:	9a03bb39 	.word	0x9a03bb39
   1da44:	609a60dd 	.word	0x609a60dd
   1da48:	443b9b00 	.word	0x443b9b00
   1da4c:	eb08461f 	.word	0xeb08461f
   1da50:	684b01c3 	.word	0x684b01c3
   1da54:	2037f858 	.word	0x2037f858
   1da58:	42943301 	.word	0x42943301
   1da5c:	d912604b 	.word	0xd912604b
   1da60:	f8489b01 	.word	0xf8489b01
   1da64:	899b4037 	.word	0x899b4037
   1da68:	429d3501 	.word	0x429d3501
   1da6c:	f8ddd3db 	.word	0xf8ddd3db
   1da70:	e796b014 	.word	0xe796b014
   1da74:	1b08f248 	.word	0x1b08f248
   1da78:	b0074658 	.word	0xb0074658
   1da7c:	8ff0e8bd 	.word	0x8ff0e8bd
   1da80:	46659b00 	.word	0x46659b00
   1da84:	9b01e7ae 	.word	0x9b01e7ae
   1da88:	899b3501 	.word	0x899b3501
   1da8c:	d8ca42ab 	.word	0xd8ca42ab
   1da90:	2600e7ed 	.word	0x2600e7ed
   1da94:	3afff101 	.word	0x3afff101
   1da98:	eb069504 	.word	0xeb069504
   1da9c:	eb09000a 	.word	0xeb09000a
   1daa0:	32010206 	.word	0x32010206
   1daa4:	f8583001 	.word	0xf8583001
   1daa8:	0840c032 	.word	0x0840c032
   1daac:	eb094d32 	.word	0xeb094d32
   1dab0:	eb090100 	.word	0xeb090100
   1dab4:	3101030a 	.word	0x3101030a
   1dab8:	eb0c3301 	.word	0xeb0c3301
   1dabc:	f8580c4c 	.word	0xf8580c4c
   1dac0:	f855e031 	.word	0xf855e031
   1dac4:	f858b02c 	.word	0xf858b02c
   1dac8:	eb08c033 	.word	0xeb08c033
   1dacc:	eb0e02c2 	.word	0xeb0e02c2
   1dad0:	eb0c0e4e 	.word	0xeb0c0e4e
   1dad4:	f8db0c4c 	.word	0xf8db0c4c
   1dad8:	6852b010 	.word	0x6852b010
   1dadc:	e02ef855 	.word	0xe02ef855
   1dae0:	c02cf855 	.word	0xc02cf855
   1dae4:	01c1eb08 	.word	0x01c1eb08
   1dae8:	03c3eb08 	.word	0x03c3eb08
   1daec:	2022f83b 	.word	0x2022f83b
   1daf0:	e010f8de 	.word	0xe010f8de
   1daf4:	f8dc6849 	.word	0xf8dc6849
   1daf8:	685bc010 	.word	0x685bc010
   1dafc:	f83e4294 	.word	0xf83e4294
   1db00:	f83c1021 	.word	0xf83c1021
   1db04:	d92d3023 	.word	0xd92d3023
   1db08:	d22d429c 	.word	0xd22d429c
   1db0c:	d924428c 	.word	0xd924428c
   1db10:	45b21c46 	.word	0x45b21c46
   1db14:	2610d2c1 	.word	0x2610d2c1
   1db18:	9a029d04 	.word	0x9a029d04
   1db1c:	d91142b2 	.word	0xd91142b2
   1db20:	443b9b00 	.word	0x443b9b00
   1db24:	4433441a 	.word	0x4433441a
   1db28:	0ac2eb08 	.word	0x0ac2eb08
   1db2c:	09c3eb08 	.word	0x09c3eb08
   1db30:	46512208 	.word	0x46512208
   1db34:	0002eb0a 	.word	0x0002eb0a
   1db38:	0a08f1aa 	.word	0x0a08f1aa
   1db3c:	fea1f006 	.word	0xfea1f006
   1db40:	d1f545d1 	.word	0xd1f545d1
   1db44:	99039b00 	.word	0x99039b00
   1db48:	4433443b 	.word	0x4433443b
   1db4c:	eb083301 	.word	0xeb083301
   1db50:	f84802c3 	.word	0xf84802c3
   1db54:	60551033 	.word	0x60551033
   1db58:	f100e776 	.word	0xf100e776
   1db5c:	45563aff 	.word	0x45563aff
   1db60:	e7d8d99b 	.word	0xe7d8d99b
   1db64:	e7d89d04 	.word	0xe7d89d04
   1db68:	f10a9d04 	.word	0xf10a9d04
   1db6c:	e7d40601 	.word	0xe7d40601
   1db70:	200226b4 	.word	0x200226b4
   1db74:	200216f4 	.word	0x200216f4
   1db78:	200216f8 	.word	0x200216f8
   1db7c:	20021734 	.word	0x20021734

0001db80 <nrf_malloc>:
   1db80:	781b4b03 	.word	0x781b4b03
   1db84:	f7ffb10b 	.word	0xf7ffb10b
   1db88:	4618bd8d 	.word	0x4618bd8d
   1db8c:	bf004770 	.word	0xbf004770
   1db90:	200226b4 	.word	0x200226b4

0001db94 <nrf_calloc>:
   1db94:	4b08b538 	.word	0x4b08b538
   1db98:	b155781d 	.word	0xb155781d
   1db9c:	f400fb01 	.word	0xf400fb01
   1dba0:	f7ff4620 	.word	0xf7ff4620
   1dba4:	4605fd7f 	.word	0x4605fd7f
   1dba8:	4622b118 	.word	0x4622b118
   1dbac:	f0062100 	.word	0xf0062100
   1dbb0:	4628fe73 	.word	0x4628fe73
   1dbb4:	bf00bd38 	.word	0xbf00bd38
   1dbb8:	200226b4 	.word	0x200226b4

0001dbbc <nrf_free>:
   1dbbc:	781b4b04 	.word	0x781b4b04
   1dbc0:	b118b123 	.word	0xb118b123
   1dbc4:	20004601 	.word	0x20004601
   1dbc8:	bc1cf7ff 	.word	0xbc1cf7ff
   1dbcc:	bf004770 	.word	0xbf004770
   1dbd0:	200226b4 	.word	0x200226b4

0001dbd4 <nrf_shared_malloc>:
   1dbd4:	781b4b03 	.word	0x781b4b03
   1dbd8:	f7ffb10b 	.word	0xf7ffb10b
   1dbdc:	4618bc7f 	.word	0x4618bc7f
   1dbe0:	bf004770 	.word	0xbf004770
   1dbe4:	200226b4 	.word	0x200226b4

0001dbe8 <nrf_shared_free>:
   1dbe8:	781b4b04 	.word	0x781b4b04
   1dbec:	b118b123 	.word	0xb118b123
   1dbf0:	20014601 	.word	0x20014601
   1dbf4:	bc06f7ff 	.word	0xbc06f7ff
   1dbf8:	bf004770 	.word	0xbf004770
   1dbfc:	200226b4 	.word	0x200226b4

0001dc00 <symbol_0003897>:
   1dc00:	728cf44f 	.word	0x728cf44f
   1dc04:	f0062100 	.word	0xf0062100
   1dc08:	bf00be47 	.word	0xbf00be47

0001dc0c <symbol_0006f61>:
   1dc0c:	f44fb118 	.word	0xf44fb118
   1dc10:	f7fc718c 	.word	0xf7fc718c
   1dc14:	4770b837 	.word	0x4770b837

0001dc18 <symbol_000468b>:
   1dc18:	f0002ac0 	.word	0xf0002ac0
   1dc1c:	f5b28184 	.word	0xf5b28184
   1dc20:	f0007f80 	.word	0xf0007f80
   1dc24:	2a80817d 	.word	0x2a80817d
   1dc28:	f06fd002 	.word	0xf06fd002
   1dc2c:	4770001f 	.word	0x4770001f
   1dc30:	6003230a 	.word	0x6003230a
   1dc34:	4ff0e92d 	.word	0x4ff0e92d
   1dc38:	f04f4607 	.word	0xf04f4607
   1dc3c:	f1000c00 	.word	0xf1000c00
   1dc40:	b0850408 	.word	0xb0850408
   1dc44:	f8470952 	.word	0xf8470952
   1dc48:	788b4f04 	.word	0x788b4f04
   1dc4c:	780e784d 	.word	0x780e784d
   1dc50:	ea43041b 	.word	0xea43041b
   1dc54:	78cd2305 	.word	0x78cd2305
   1dc58:	f10c4333 	.word	0xf10c4333
   1dc5c:	ea430c01 	.word	0xea430c01
   1dc60:	45946305 	.word	0x45946305
   1dc64:	3f04f847 	.word	0x3f04f847
   1dc68:	0104f101 	.word	0x0104f101
   1dc6c:	6803d3ed 	.word	0x6803d3ed
   1dc70:	f0002b0c 	.word	0xf0002b0c
   1dc74:	2b0e81bf 	.word	0x2b0e81bf
   1dc78:	8158f000 	.word	0x8158f000
   1dc7c:	f0402b0a 	.word	0xf0402b0a
   1dc80:	6944814b 	.word	0x6944814b
   1dc84:	f3c44bd8 	.word	0xf3c44bd8
   1dc88:	68812207 	.word	0x68812207
   1dc8c:	0e255c9a 	.word	0x0e255c9a
   1dc90:	f0815d5e 	.word	0xf0815d5e
   1dc94:	b2e50101 	.word	0xb2e50101
   1dc98:	404a5d5d 	.word	0x404a5d5d
   1dc9c:	4107f3c4 	.word	0x4107f3c4
   1dca0:	4206ea82 	.word	0x4206ea82
   1dca4:	ea825c5e 	.word	0xea825c5e
   1dca8:	68c16505 	.word	0x68c16505
   1dcac:	2206ea85 	.word	0x2206ea85
   1dcb0:	40516907 	.word	0x40516907
   1dcb4:	0907ea81 	.word	0x0907ea81
   1dcb8:	0404ea89 	.word	0x0404ea89
   1dcbc:	2507f3c4 	.word	0x2507f3c4
   1dcc0:	0e265d5d 	.word	0x0e265d5d
   1dcc4:	f0825d9e 	.word	0xf0825d9e
   1dcc8:	ea850c02 	.word	0xea850c02
   1dccc:	ea85050c 	.word	0xea85050c
   1dcd0:	b2e64506 	.word	0xb2e64506
   1dcd4:	c006f813 	.word	0xc006f813
   1dcd8:	4607f3c4 	.word	0x4607f3c4
   1dcdc:	ea855d9e 	.word	0xea855d9e
   1dce0:	ea85650c 	.word	0xea85650c
   1dce4:	406f2506 	.word	0x406f2506
   1dce8:	0c04ea87 	.word	0x0c04ea87
   1dcec:	2607f3cc 	.word	0x2607f3cc
   1dcf0:	ea4f5d9e 	.word	0xea4f5d9e
   1dcf4:	f8136e1c 	.word	0xf8136e1c
   1dcf8:	f085e00e 	.word	0xf085e00e
   1dcfc:	ea860804 	.word	0xea860804
   1dd00:	ea860608 	.word	0xea860608
   1dd04:	fa5f460e 	.word	0xfa5f460e
   1dd08:	f813fe8c 	.word	0xf813fe8c
   1dd0c:	6182e00e 	.word	0x6182e00e
   1dd10:	4207f3cc 	.word	0x4207f3cc
   1dd14:	660eea86 	.word	0x660eea86
   1dd18:	e002f813 	.word	0xe002f813
   1dd1c:	0201ea85 	.word	0x0201ea85
   1dd20:	260eea86 	.word	0x260eea86
   1dd24:	0802ea86 	.word	0x0802ea86
   1dd28:	0e04ea88 	.word	0x0e04ea88
   1dd2c:	f3ce61c1 	.word	0xf3ce61c1
   1dd30:	5c592107 	.word	0x5c592107
   1dd34:	6a1eea4f 	.word	0x6a1eea4f
   1dd38:	a00af813 	.word	0xa00af813
   1dd3c:	0b08f086 	.word	0x0b08f086
   1dd40:	010bea81 	.word	0x010bea81
   1dd44:	410aea81 	.word	0x410aea81
   1dd48:	fa8efa5f 	.word	0xfa8efa5f
   1dd4c:	a00af813 	.word	0xa00af813
   1dd50:	f3ce6244 	.word	0xf3ce6244
   1dd54:	5d1c4407 	.word	0x5d1c4407
   1dd58:	610aea81 	.word	0x610aea81
   1dd5c:	2104ea81 	.word	0x2104ea81
   1dd60:	0a07ea81 	.word	0x0a07ea81
   1dd64:	040eea8a 	.word	0x040eea8a
   1dd68:	630762c2 	.word	0x630762c2
   1dd6c:	2207f3c4 	.word	0x2207f3c4
   1dd70:	0707ea88 	.word	0x0707ea88
   1dd74:	680ee9c0 	.word	0x680ee9c0
   1dd78:	9020f8c0 	.word	0x9020f8c0
   1dd7c:	f8c06285 	.word	0xf8c06285
   1dd80:	f8c0c034 	.word	0xf8c0c034
   1dd84:	6407e044 	.word	0x6407e044
   1dd88:	f8136481 	.word	0xf8136481
   1dd8c:	0e22c002 	.word	0x0e22c002
   1dd90:	f0815c9a 	.word	0xf0815c9a
   1dd94:	ea8c0510 	.word	0xea8c0510
   1dd98:	ea8c0c05 	.word	0xea8c0c05
   1dd9c:	b2e24c02 	.word	0xb2e24c02
   1dda0:	f3c45c9d 	.word	0xf3c45c9d
   1dda4:	5c9a4207 	.word	0x5c9a4207
   1dda8:	6c05ea8c 	.word	0x6c05ea8c
   1ddac:	2c02ea8c 	.word	0x2c02ea8c
   1ddb0:	0108ea81 	.word	0x0108ea81
   1ddb4:	090cea81 	.word	0x090cea81
   1ddb8:	0209ea8e 	.word	0x0209ea8e
   1ddbc:	2507f3c2 	.word	0x2507f3c2
   1ddc0:	0e155d5e 	.word	0x0e155d5e
   1ddc4:	f08c5d5d 	.word	0xf08c5d5d
   1ddc8:	407e0720 	.word	0x407e0720
   1ddcc:	4605ea86 	.word	0x4605ea86
   1ddd0:	5d5db2d5 	.word	0x5d5db2d5
   1ddd4:	f3c264c1 	.word	0xf3c264c1
   1ddd8:	5c594107 	.word	0x5c594107
   1dddc:	6605ea86 	.word	0x6605ea86
   1dde0:	2601ea86 	.word	0x2601ea86
   1dde4:	0e06ea8a 	.word	0x0e06ea8a
   1dde8:	080eea82 	.word	0x080eea82
   1ddec:	2107f3c8 	.word	0x2107f3c8
   1ddf0:	ea4f5c5f 	.word	0xea4f5c5f
   1ddf4:	5c596118 	.word	0x5c596118
   1ddf8:	0540f086 	.word	0x0540f086
   1ddfc:	ea87406f 	.word	0xea87406f
   1de00:	fa5f4701 	.word	0xfa5f4701
   1de04:	5c59f188 	.word	0x5c59f188
   1de08:	0509ea8a 	.word	0x0509ea8a
   1de0c:	6701ea87 	.word	0x6701ea87
   1de10:	4107f3c8 	.word	0x4107f3c8
   1de14:	f8c05c59 	.word	0xf8c05c59
   1de18:	ea87a050 	.word	0xea87a050
   1de1c:	ea892701 	.word	0xea892701
   1de20:	66050a06 	.word	0x66050a06
   1de24:	0507ea8a 	.word	0x0507ea8a
   1de28:	0105ea82 	.word	0x0105ea82
   1de2c:	f3c16544 	.word	0xf3c16544
   1de30:	5d1c2407 	.word	0x5d1c2407
   1de34:	6b11ea4f 	.word	0x6b11ea4f
   1de38:	b00bf813 	.word	0xb00bf813
   1de3c:	f0876642 	.word	0xf0876642
   1de40:	40620280 	.word	0x40620280
   1de44:	ea82b2cc 	.word	0xea82b2cc
   1de48:	f813420b 	.word	0xf813420b
   1de4c:	f3c1b004 	.word	0xf3c1b004
   1de50:	5d1c4407 	.word	0x5d1c4407
   1de54:	620bea82 	.word	0x620bea82
   1de58:	2204ea82 	.word	0x2204ea82
   1de5c:	0402ea8e 	.word	0x0402ea8e
   1de60:	c058f8c0 	.word	0xc058f8c0
   1de64:	0c04ea81 	.word	0x0c04ea81
   1de68:	67c56686 	.word	0x67c56686
   1de6c:	0605ea8e 	.word	0x0605ea8e
   1de70:	40556787 	.word	0x40556787
   1de74:	2707f3cc 	.word	0x2707f3cc
   1de78:	ae1be9c0 	.word	0xae1be9c0
   1de7c:	1084f8c0 	.word	0x1084f8c0
   1de80:	2088f8c0 	.word	0x2088f8c0
   1de84:	6080f8c0 	.word	0x6080f8c0
   1de88:	905cf8c0 	.word	0x905cf8c0
   1de8c:	8074f8c0 	.word	0x8074f8c0
   1de90:	508cf8c0 	.word	0x508cf8c0
   1de94:	f0825dde 	.word	0xf0825dde
   1de98:	ea4f021b 	.word	0xea4f021b
   1de9c:	f813671c 	.word	0xf813671c
   1dea0:	4056e007 	.word	0x4056e007
   1dea4:	f28cfa5f 	.word	0xf28cfa5f
   1dea8:	f3cc5c9f 	.word	0xf3cc5c9f
   1deac:	5c9a4207 	.word	0x5c9a4207
   1deb0:	460eea86 	.word	0x460eea86
   1deb4:	6607ea86 	.word	0x6607ea86
   1deb8:	2602ea86 	.word	0x2602ea86
   1debc:	40694075 	.word	0x40694075
   1dec0:	2207f3c1 	.word	0x2207f3c1
   1dec4:	0e0f5c9a 	.word	0x0e0f5c9a
   1dec8:	f0865ddf 	.word	0xf0865ddf
   1decc:	ea820e36 	.word	0xea820e36
   1ded0:	ea82020e 	.word	0xea82020e
   1ded4:	b2cf4207 	.word	0xb2cf4207
   1ded8:	e007f813 	.word	0xe007f813
   1dedc:	4707f3c1 	.word	0x4707f3c1
   1dee0:	ea825ddf 	.word	0xea825ddf
   1dee4:	ea83630e 	.word	0xea83630e
   1dee8:	ea832307 	.word	0xea832307
   1deec:	ea820204 	.word	0xea820204
   1def0:	e9c00e01 	.word	0xe9c00e01
   1def4:	e9c06526 	.word	0xe9c06526
   1def8:	f8c02e2c 	.word	0xf8c02e2c
   1defc:	ea834090 	.word	0xea834090
   1df00:	406c0705 	.word	0x406c0705
   1df04:	c094f8c0 	.word	0xc094f8c0
   1df08:	10a4f8c0 	.word	0x10a4f8c0
   1df0c:	30a8f8c0 	.word	0x30a8f8c0
   1df10:	70acf8c0 	.word	0x70acf8c0
   1df14:	40a0f8c0 	.word	0x40a0f8c0
   1df18:	b0052000 	.word	0xb0052000
   1df1c:	8ff0e8bd 	.word	0x8ff0e8bd
   1df20:	6003230e 	.word	0x6003230e
   1df24:	230ce686 	.word	0x230ce686
   1df28:	e6836003 	.word	0xe6836003
   1df2c:	ce03e9d0 	.word	0xce03e9d0
   1df30:	8907e9d0 	.word	0x8907e9d0
   1df34:	7205e9d0 	.word	0x7205e9d0
   1df38:	68836a46 	.word	0x68836a46
   1df3c:	f8df4670 	.word	0xf8df4670
   1df40:	4d29a0b0 	.word	0x4d29a0b0
   1df44:	c000f8cd 	.word	0xc000f8cd
   1df48:	bf04f85a 	.word	0xbf04f85a
   1df4c:	2c07f3c6 	.word	0x2c07f3c6
   1df50:	e00cf815 	.word	0xe00cf815
   1df54:	6c16ea4f 	.word	0x6c16ea4f
   1df58:	030bea83 	.word	0x030bea83
   1df5c:	b00cf815 	.word	0xb00cf815
   1df60:	fc86fa5f 	.word	0xfc86fa5f
   1df64:	0303ea8e 	.word	0x0303ea8e
   1df68:	c00cf815 	.word	0xc00cf815
   1df6c:	4e07f3c6 	.word	0x4e07f3c6
   1df70:	430bea83 	.word	0x430bea83
   1df74:	e00ef815 	.word	0xe00ef815
   1df78:	630cea83 	.word	0x630cea83
   1df7c:	ea839900 	.word	0xea839900
   1df80:	4059230e 	.word	0x4059230e
   1df84:	40474048 	.word	0x40474048
   1df88:	fc87fa5f 	.word	0xfc87fa5f
   1df8c:	e00cf815 	.word	0xe00cf815
   1df90:	6c17ea4f 	.word	0x6c17ea4f
   1df94:	b00cf815 	.word	0xb00cf815
   1df98:	2c07f3c7 	.word	0x2c07f3c7
   1df9c:	0202ea8e 	.word	0x0202ea8e
   1dfa0:	c00cf815 	.word	0xc00cf815
   1dfa4:	4e07f3c7 	.word	0x4e07f3c7
   1dfa8:	620bea82 	.word	0x620bea82
   1dfac:	e00ef815 	.word	0xe00ef815
   1dfb0:	220cea82 	.word	0x220cea82
   1dfb4:	420eea82 	.word	0x420eea82
   1dfb8:	0802ea88 	.word	0x0802ea88
   1dfbc:	3108e9c4 	.word	0x3108e9c4
   1dfc0:	490a9100 	.word	0x490a9100
   1dfc4:	0908ea89 	.word	0x0908ea89
   1dfc8:	0609ea86 	.word	0x0609ea86
   1dfcc:	e9c4458a 	.word	0xe9c4458a
   1dfd0:	e9c4070a 	.word	0xe9c4070a
   1dfd4:	e9c4960e 	.word	0xe9c4960e
   1dfd8:	f104280c 	.word	0xf104280c
   1dfdc:	d1b30420 	.word	0xd1b30420
   1dfe0:	b0052000 	.word	0xb0052000
   1dfe4:	8ff0e8bd 	.word	0x8ff0e8bd
   1dfe8:	00026180 	.word	0x00026180
   1dfec:	00026698 	.word	0x00026698
   1dff0:	0002667c 	.word	0x0002667c
   1dff4:	4bb269c2 	.word	0x4bb269c2
   1dff8:	2407f3c2 	.word	0x2407f3c2
   1dffc:	5d1d6881 	.word	0x5d1d6881
   1e000:	5d1e0e14 	.word	0x5d1e0e14
   1e004:	0101f081 	.word	0x0101f081
   1e008:	5d1cb2d4 	.word	0x5d1cb2d4
   1e00c:	f3c2404d 	.word	0xf3c2404d
   1e010:	5c594107 	.word	0x5c594107
   1e014:	4506ea85 	.word	0x4506ea85
   1e018:	ea8568c7 	.word	0xea8568c7
   1e01c:	ea856504 	.word	0xea856504
   1e020:	69012501 	.word	0x69012501
   1e024:	6946406f 	.word	0x6946406f
   1e028:	0907ea81 	.word	0x0907ea81
   1e02c:	ea866984 	.word	0xea866984
   1e030:	ea840609 	.word	0xea840609
   1e034:	ea820806 	.word	0xea820806
   1e038:	f3c20208 	.word	0xf3c20208
   1e03c:	f8132407 	.word	0xf8132407
   1e040:	ea4fe004 	.word	0xea4fe004
   1e044:	f8136c12 	.word	0xf8136c12
   1e048:	f085a00c 	.word	0xf085a00c
   1e04c:	fa5f0402 	.word	0xfa5f0402
   1e050:	ea8efc82 	.word	0xea8efc82
   1e054:	f8130404 	.word	0xf8130404
   1e058:	f3c2e00c 	.word	0xf3c2e00c
   1e05c:	f8134c07 	.word	0xf8134c07
   1e060:	ea84c00c 	.word	0xea84c00c
   1e064:	ea84440a 	.word	0xea84440a
   1e068:	ea84640e 	.word	0xea84640e
   1e06c:	4061240c 	.word	0x4061240c
   1e070:	460c9401 	.word	0x460c9401
   1e074:	62056981 	.word	0x62056981
   1e078:	ea824061 	.word	0xea824061
   1e07c:	91030c01 	.word	0x91030c01
   1e080:	2e07f3cc 	.word	0x2e07f3cc
   1e084:	f8139901 	.word	0xf8139901
   1e088:	ea4fe00e 	.word	0xea4fe00e
   1e08c:	f8136a1c 	.word	0xf8136a1c
   1e090:	f081a00a 	.word	0xf081a00a
   1e094:	ea8e0b04 	.word	0xea8e0b04
   1e098:	ea8e0e0b 	.word	0xea8e0e0b
   1e09c:	fa5f4a0a 	.word	0xfa5f4a0a
   1e0a0:	f813fe8c 	.word	0xf813fe8c
   1e0a4:	e9c0e00e 	.word	0xe9c0e00e
   1e0a8:	ea8a960a 	.word	0xea8a960a
   1e0ac:	f3cc650e 	.word	0xf3cc650e
   1e0b0:	f8134e07 	.word	0xf8134e07
   1e0b4:	ea87e00e 	.word	0xea87e00e
   1e0b8:	ea850a01 	.word	0xea850a01
   1e0bc:	ea8a250e 	.word	0xea8a250e
   1e0c0:	ea860e05 	.word	0xea860e05
   1e0c4:	9100010e 	.word	0x9100010e
   1e0c8:	ea864621 	.word	0xea864621
   1e0cc:	9c000904 	.word	0x9c000904
   1e0d0:	820ce9c0 	.word	0x820ce9c0
   1e0d4:	0604ea82 	.word	0x0604ea82
   1e0d8:	f8c06247 	.word	0xf8c06247
   1e0dc:	9102a03c 	.word	0x9102a03c
   1e0e0:	9f036401 	.word	0x9f036401
   1e0e4:	2407f3c6 	.word	0x2407f3c6
   1e0e8:	080eea81 	.word	0x080eea81
   1e0ec:	7c12e9c0 	.word	0x7c12e9c0
   1e0f0:	ea4f5d1c 	.word	0xea4f5d1c
   1e0f4:	e9c06c16 	.word	0xe9c06c16
   1e0f8:	f8c05e14 	.word	0xf8c05e14
   1e0fc:	f0858058 	.word	0xf0858058
   1e100:	f8130508 	.word	0xf8130508
   1e104:	fa5f800c 	.word	0xfa5f800c
   1e108:	9901fc86 	.word	0x9901fc86
   1e10c:	c00cf813 	.word	0xc00cf813
   1e110:	f3c64065 	.word	0xf3c64065
   1e114:	5d1c4407 	.word	0x5d1c4407
   1e118:	4508ea85 	.word	0x4508ea85
   1e11c:	ea856381 	.word	0xea856381
   1e120:	9902650c 	.word	0x9902650c
   1e124:	2504ea85 	.word	0x2504ea85
   1e128:	91014069 	.word	0x91014069
   1e12c:	69844639 	.word	0x69844639
   1e130:	9044f8c0 	.word	0x9044f8c0
   1e134:	0805ea84 	.word	0x0805ea84
   1e138:	0908ea86 	.word	0x0908ea86
   1e13c:	2407f3c9 	.word	0x2407f3c9
   1e140:	a004f813 	.word	0xa004f813
   1e144:	6419ea4f 	.word	0x6419ea4f
   1e148:	f0855d1c 	.word	0xf0855d1c
   1e14c:	ea8a0c10 	.word	0xea8a0c10
   1e150:	fa5f0c0c 	.word	0xfa5f0c0c
   1e154:	f813fa89 	.word	0xf813fa89
   1e158:	ea8ca00a 	.word	0xea8ca00a
   1e15c:	f3c94c04 	.word	0xf3c94c04
   1e160:	5d1c4407 	.word	0x5d1c4407
   1e164:	6c0aea8c 	.word	0x6c0aea8c
   1e168:	0e05ea8e 	.word	0x0e05ea8e
   1e16c:	2c04ea8c 	.word	0x2c04ea8c
   1e170:	040cea8e 	.word	0x040cea8e
   1e174:	f8c04062 	.word	0xf8c04062
   1e178:	f3c2e06c 	.word	0xf3c2e06c
   1e17c:	f8132e07 	.word	0xf8132e07
   1e180:	ea4fe00e 	.word	0xea4fe00e
   1e184:	f8136a12 	.word	0xf8136a12
   1e188:	f08ca00a 	.word	0xf08ca00a
   1e18c:	ea8e0b20 	.word	0xea8e0b20
   1e190:	ea8e0e0b 	.word	0xea8e0e0b
   1e194:	fa5f4a0a 	.word	0xfa5f4a0a
   1e198:	f813fe82 	.word	0xf813fe82
   1e19c:	9f00e00e 	.word	0x9f00e00e
   1e1a0:	6a0eea8a 	.word	0x6a0eea8a
   1e1a4:	4e07f3c2 	.word	0x4e07f3c2
   1e1a8:	b00ef813 	.word	0xb00ef813
   1e1ac:	0e07ea81 	.word	0x0e07ea81
   1e1b0:	ea8a9901 	.word	0xea8a9901
   1e1b4:	ea812b0b 	.word	0xea812b0b
   1e1b8:	9f000a0b 	.word	0x9f000a0b
   1e1bc:	e060f8c0 	.word	0xe060f8c0
   1e1c0:	0e0aea88 	.word	0x0e0aea88
   1e1c4:	664665c7 	.word	0x664665c7
   1e1c8:	907cf8c0 	.word	0x907cf8c0
   1e1cc:	060eea82 	.word	0x060eea82
   1e1d0:	ea876701 	.word	0xea876701
   1e1d4:	404f0904 	.word	0x404f0904
   1e1d8:	66854061 	.word	0x66854061
   1e1dc:	1088f8c0 	.word	0x1088f8c0
   1e1e0:	2507f3c6 	.word	0x2507f3c6
   1e1e4:	0109ea88 	.word	0x0109ea88
   1e1e8:	1090f8c0 	.word	0x1090f8c0
   1e1ec:	0e315d5d 	.word	0x0e315d5d
   1e1f0:	f8c05c59 	.word	0xf8c05c59
   1e1f4:	f8c04084 	.word	0xf8c04084
   1e1f8:	ea84b098 	.word	0xea84b098
   1e1fc:	6747040b 	.word	0x6747040b
   1e200:	0b40f08b 	.word	0x0b40f08b
   1e204:	5ddfb2f7 	.word	0x5ddfb2f7
   1e208:	60acf8c0 	.word	0x60acf8c0
   1e20c:	050bea85 	.word	0x050bea85
   1e210:	4607f3c6 	.word	0x4607f3c6
   1e214:	4501ea85 	.word	0x4501ea85
   1e218:	ea855d99 	.word	0xea855d99
   1e21c:	ea856507 	.word	0xea856507
   1e220:	f8c02501 	.word	0xf8c02501
   1e224:	406c409c 	.word	0x406c409c
   1e228:	0604ea89 	.word	0x0604ea89
   1e22c:	2094f8c0 	.word	0x2094f8c0
   1e230:	f3c24072 	.word	0xf3c24072
   1e234:	f8c02107 	.word	0xf8c02107
   1e238:	5c59c080 	.word	0x5c59c080
   1e23c:	0c0aea89 	.word	0x0c0aea89
   1e240:	f8c00e17 	.word	0xf8c00e17
   1e244:	f8c0908c 	.word	0xf8c0908c
   1e248:	f813c0a4 	.word	0xf813c0a4
   1e24c:	f0859007 	.word	0xf0859007
   1e250:	b2d70c80 	.word	0xb2d70c80
   1e254:	010cea81 	.word	0x010cea81
   1e258:	c007f813 	.word	0xc007f813
   1e25c:	4707f3c2 	.word	0x4707f3c2
   1e260:	ea815ddf 	.word	0xea815ddf
   1e264:	ea814109 	.word	0xea814109
   1e268:	ea83630c 	.word	0xea83630c
   1e26c:	f8c02307 	.word	0xf8c02307
   1e270:	ea838078 	.word	0xea838078
   1e274:	ea830c0a 	.word	0xea830c0a
   1e278:	f8c00808 	.word	0xf8c00808
   1e27c:	ea8ee0a8 	.word	0xea8ee0a8
   1e280:	ea880706 	.word	0xea880706
   1e284:	ea8c0b02 	.word	0xea8c0b02
   1e288:	ea830906 	.word	0xea830906
   1e28c:	ea8a0e04 	.word	0xea8a0e04
   1e290:	f8c00104 	.word	0xf8c00104
   1e294:	e9c0a0a0 	.word	0xe9c0a0a0
   1e298:	f8c07230 	.word	0xf8c07230
   1e29c:	e9c060bc 	.word	0xe9c060bc
   1e2a0:	e9c0542c 	.word	0xe9c0542c
   1e2a4:	f8c08b36 	.word	0xf8c08b36
   1e2a8:	e9c030c8 	.word	0xe9c030c8
   1e2ac:	f8c0c934 	.word	0xf8c0c934
   1e2b0:	f8c0e0cc 	.word	0xf8c0e0cc
   1e2b4:	200010b8 	.word	0x200010b8
   1e2b8:	e8bdb005 	.word	0xe8bdb005
   1e2bc:	bf008ff0 	.word	0xbf008ff0
   1e2c0:	00026180 	.word	0x00026180

0001e2c4 <symbol_000e9b3>:
   1e2c4:	4ff0e92d 	.word	0x4ff0e92d
   1e2c8:	0400e9d0 	.word	0x0400e9d0
   1e2cc:	46061040 	.word	0x46061040
   1e2d0:	f8d16823 	.word	0xf8d16823
   1e2d4:	b089a000 	.word	0xb089a000
   1e2d8:	0a03ea8a 	.word	0x0a03ea8a
   1e2dc:	800cf8d1 	.word	0x800cf8d1
   1e2e0:	3e0168e3 	.word	0x3e0168e3
   1e2e4:	68659006 	.word	0x68659006
   1e2e8:	68a0684f 	.word	0x68a0684f
   1e2ec:	688a9205 	.word	0x688a9205
   1e2f0:	0803ea88 	.word	0x0803ea88
   1e2f4:	f1042e00 	.word	0xf1042e00
   1e2f8:	96010310 	.word	0x96010310
   1e2fc:	0507ea85 	.word	0x0507ea85
   1e300:	0200ea82 	.word	0x0200ea82
   1e304:	f8df9304 	.word	0xf8df9304
   1e308:	f340b3e8 	.word	0xf340b3e8
   1e30c:	462b80db 	.word	0x462b80db
   1e310:	0930f104 	.word	0x0930f104
   1e314:	f18afa5f 	.word	0xf18afa5f
   1e318:	f788fa5f 	.word	0xf788fa5f
   1e31c:	b2d4b2de 	.word	0xb2d4b2de
   1e320:	0021f85b 	.word	0x0021f85b
   1e324:	5027f85b 	.word	0x5027f85b
   1e328:	7026f85b 	.word	0x7026f85b
   1e32c:	6024f85b 	.word	0x6024f85b
   1e330:	4c20f859 	.word	0x4c20f859
   1e334:	6118ea4f 	.word	0x6118ea4f
   1e338:	0c04ea80 	.word	0x0c04ea80
   1e33c:	0c14f859 	.word	0x0c14f859
   1e340:	1021f85b 	.word	0x1021f85b
   1e344:	0e00ea85 	.word	0x0e00ea85
   1e348:	f85b0e10 	.word	0xf85b0e10
   1e34c:	f3c35020 	.word	0xf3c35020
   1e350:	ea8c2407 	.word	0xea8c2407
   1e354:	f3c22c31 	.word	0xf3c22c31
   1e358:	f3c24107 	.word	0xf3c24107
   1e35c:	f85b2207 	.word	0xf85b2207
   1e360:	f85b4024 	.word	0xf85b4024
   1e364:	ea8e0022 	.word	0xea8e0022
   1e368:	0e1d2235 	.word	0x0e1d2235
   1e36c:	4307f3c3 	.word	0x4307f3c3
   1e370:	3023f85b 	.word	0x3023f85b
   1e374:	6c34ea8c 	.word	0x6c34ea8c
   1e378:	4c18f859 	.word	0x4c18f859
   1e37c:	f85b9302 	.word	0xf85b9302
   1e380:	f8595025 	.word	0xf8595025
   1e384:	ea4f3c1c 	.word	0xea4f3c1c
   1e388:	f85b6e1a 	.word	0xf85b6e1a
   1e38c:	4066e02e 	.word	0x4066e02e
   1e390:	f3ca405f 	.word	0xf3ca405f
   1e394:	ea862407 	.word	0xea862407
   1e398:	f3c82635 	.word	0xf3c82635
   1e39c:	f3c82507 	.word	0xf3c82507
   1e3a0:	ea874807 	.word	0xea874807
   1e3a4:	f85b273e 	.word	0xf85b273e
   1e3a8:	f85b4024 	.word	0xf85b4024
   1e3ac:	f85be025 	.word	0xf85be025
   1e3b0:	9b025028 	.word	0x9b025028
   1e3b4:	6030ea87 	.word	0x6030ea87
   1e3b8:	4035ea80 	.word	0x4035ea80
   1e3bc:	1021f85b 	.word	0x1021f85b
   1e3c0:	6434ea82 	.word	0x6434ea82
   1e3c4:	4433ea84 	.word	0x4433ea84
   1e3c8:	ea8cb2c3 	.word	0xea8cb2c3
   1e3cc:	f85b4131 	.word	0xf85b4131
   1e3d0:	f3ca3023 	.word	0xf3ca3023
   1e3d4:	f85b4a07 	.word	0xf85b4a07
   1e3d8:	b2ca702a 	.word	0xb2ca702a
   1e3dc:	6c14ea4f 	.word	0x6c14ea4f
   1e3e0:	2022f85b 	.word	0x2022f85b
   1e3e4:	663eea86 	.word	0x663eea86
   1e3e8:	f8599302 	.word	0xf8599302
   1e3ec:	ea863c10 	.word	0xea863c10
   1e3f0:	f85b4637 	.word	0xf85b4637
   1e3f4:	f3c0e02c 	.word	0xf3c0e02c
   1e3f8:	f85b2707 	.word	0xf85b2707
   1e3fc:	ea82c027 	.word	0xea82c027
   1e400:	f3c60a03 	.word	0xf3c60a03
   1e404:	f3c64507 	.word	0xf3c64507
   1e408:	f85b2207 	.word	0xf85b2207
   1e40c:	f85b3022 	.word	0xf85b3022
   1e410:	ea8a5025 	.word	0xea8a5025
   1e414:	f3c42a3e 	.word	0xf3c42a3e
   1e418:	0e0f4207 	.word	0x0e0f4207
   1e41c:	6a3cea8a 	.word	0x6a3cea8a
   1e420:	7027f85b 	.word	0x7027f85b
   1e424:	ea8a9303 	.word	0xea8a9303
   1e428:	f85b4a35 	.word	0xf85b4a35
   1e42c:	f8598022 	.word	0xf8598022
   1e430:	9b025c0c 	.word	0x9b025c0c
   1e434:	406bb2f2 	.word	0x406bb2f2
   1e438:	2022f85b 	.word	0x2022f85b
   1e43c:	2337ea83 	.word	0x2337ea83
   1e440:	7c08f859 	.word	0x7c08f859
   1e444:	fc84fa5f 	.word	0xfc84fa5f
   1e448:	2407f3c4 	.word	0x2407f3c4
   1e44c:	502cf85b 	.word	0x502cf85b
   1e450:	0e364057 	.word	0x0e364057
   1e454:	2024f85b 	.word	0x2024f85b
   1e458:	4c04f859 	.word	0x4c04f859
   1e45c:	6e10ea4f 	.word	0x6e10ea4f
   1e460:	6026f85b 	.word	0x6026f85b
   1e464:	f85b406c 	.word	0xf85b406c
   1e468:	ea84e02e 	.word	0xea84e02e
   1e46c:	f3c12636 	.word	0xf3c12636
   1e470:	f3c12407 	.word	0xf3c12407
   1e474:	f85b4107 	.word	0xf85b4107
   1e478:	ea871021 	.word	0xea871021
   1e47c:	ea8e2e3e 	.word	0xea8e2e3e
   1e480:	f3c06232 	.word	0xf3c06232
   1e484:	f85b4007 	.word	0xf85b4007
   1e488:	9d034024 	.word	0x9d034024
   1e48c:	4231ea82 	.word	0x4231ea82
   1e490:	f85b9901 	.word	0xf85b9901
   1e494:	ea830020 	.word	0xea830020
   1e498:	ea866335 	.word	0xea866335
   1e49c:	39016634 	.word	0x39016634
   1e4a0:	4338ea83 	.word	0x4338ea83
   1e4a4:	0920f109 	.word	0x0920f109
   1e4a8:	4830ea86 	.word	0x4830ea86
   1e4ac:	f47f9101 	.word	0xf47f9101
   1e4b0:	461daf31 	.word	0x461daf31
   1e4b4:	99049b06 	.word	0x99049b06
   1e4b8:	6300f103 	.word	0x6300f103
   1e4bc:	eb013b01 	.word	0xeb013b01
   1e4c0:	93041343 	.word	0x93041343
   1e4c4:	fa5f2400 	.word	0xfa5f2400
   1e4c8:	f85bf38a 	.word	0xf85bf38a
   1e4cc:	9b047023 	.word	0x9b047023
   1e4d0:	fa5f46a1 	.word	0xfa5f46a1
   1e4d4:	6819fc85 	.word	0x6819fc85
   1e4d8:	6318ea4f 	.word	0x6318ea4f
   1e4dc:	46a69407 	.word	0x46a69407
   1e4e0:	402cf85b 	.word	0x402cf85b
   1e4e4:	c023f85b 	.word	0xc023f85b
   1e4e8:	f3c54079 	.word	0xf3c54079
   1e4ec:	f85b2307 	.word	0xf85b2307
   1e4f0:	f3c23023 	.word	0xf3c23023
   1e4f4:	ea814707 	.word	0xea814707
   1e4f8:	fa5f213c 	.word	0xfa5f213c
   1e4fc:	f85bfc82 	.word	0xf85bfc82
   1e500:	f85b002c 	.word	0xf85b002c
   1e504:	ea817027 	.word	0xea817027
   1e508:	90036133 	.word	0x90036133
   1e50c:	4037ea81 	.word	0x4037ea81
   1e510:	fa5f9f04 	.word	0xfa5f9f04
   1e514:	f85bf688 	.word	0xf85bf688
   1e518:	68fb6026 	.word	0x68fb6026
   1e51c:	40739001 	.word	0x40739001
   1e520:	f85b0e16 	.word	0xf85b0e16
   1e524:	98046026 	.word	0x98046026
   1e528:	2636ea83 	.word	0x2636ea83
   1e52c:	f85b0e2b 	.word	0xf85b0e2b
   1e530:	f3c53023 	.word	0xf3c53023
   1e534:	496d4507 	.word	0x496d4507
   1e538:	7025f85b 	.word	0x7025f85b
   1e53c:	f89d9306 	.word	0xf89d9306
   1e540:	6843c004 	.word	0x6843c004
   1e544:	651aea4f 	.word	0x651aea4f
   1e548:	5025f85b 	.word	0x5025f85b
   1e54c:	2207f3c2 	.word	0x2207f3c2
   1e550:	2022f85b 	.word	0x2022f85b
   1e554:	c00cf811 	.word	0xc00cf811
   1e558:	69044063 	.word	0x69044063
   1e55c:	2535ea83 	.word	0x2535ea83
   1e560:	2307f3ca 	.word	0x2307f3ca
   1e564:	3023f85b 	.word	0x3023f85b
   1e568:	0c04ea8c 	.word	0x0c04ea8c
   1e56c:	6532ea85 	.word	0x6532ea85
   1e570:	68829c03 	.word	0x68829c03
   1e574:	6633ea86 	.word	0x6633ea86
   1e578:	f3c84660 	.word	0xf3c84660
   1e57c:	ea842307 	.word	0xea842307
   1e580:	9c060c02 	.word	0x9c060c02
   1e584:	3023f85b 	.word	0x3023f85b
   1e588:	4a07f3ca 	.word	0x4a07f3ca
   1e58c:	202af85b 	.word	0x202af85b
   1e590:	2c34ea8c 	.word	0x2c34ea8c
   1e594:	4807f3c8 	.word	0x4807f3c8
   1e598:	4637ea86 	.word	0x4637ea86
   1e59c:	6c33ea8c 	.word	0x6c33ea8c
   1e5a0:	7028f85b 	.word	0x7028f85b
   1e5a4:	4232ea8c 	.word	0x4232ea8c
   1e5a8:	4537ea85 	.word	0x4537ea85
   1e5ac:	4c07f3c2 	.word	0x4c07f3c2
   1e5b0:	5ccb0e33 	.word	0x5ccb0e33
   1e5b4:	a00cf811 	.word	0xa00cf811
   1e5b8:	fc85fa5f 	.word	0xfc85fa5f
   1e5bc:	400cf811 	.word	0x400cf811
   1e5c0:	2707f3c5 	.word	0x2707f3c5
   1e5c4:	464c9403 	.word	0x464c9403
   1e5c8:	ea805dcf 	.word	0xea805dcf
   1e5cc:	98016303 	.word	0x98016303
   1e5d0:	2307ea83 	.word	0x2307ea83
   1e5d4:	fb82fa5f 	.word	0xfb82fa5f
   1e5d8:	430aea83 	.word	0x430aea83
   1e5dc:	b00bf811 	.word	0xb00bf811
   1e5e0:	6c10ea4f 	.word	0x6c10ea4f
   1e5e4:	f3639804 	.word	0xf3639804
   1e5e8:	f8110407 	.word	0xf8110407
   1e5ec:	f8cd800c 	.word	0xf8cd800c
   1e5f0:	9402b018 	.word	0x9402b018
   1e5f4:	2c07f3c2 	.word	0x2c07f3c2
   1e5f8:	ea4f9c03 	.word	0xea4f9c03
   1e5fc:	69426b12 	.word	0x69426b12
   1e600:	c00cf811 	.word	0xc00cf811
   1e604:	f3c64062 	.word	0xf3c64062
   1e608:	5dcf4707 	.word	0x5dcf4707
   1e60c:	6808ea82 	.word	0x6808ea82
   1e610:	6a15ea4f 	.word	0x6a15ea4f
   1e614:	ea886982 	.word	0xea886982
   1e618:	9c062c0c 	.word	0x9c062c0c
   1e61c:	f886fa5f 	.word	0xf886fa5f
   1e620:	4707ea8c 	.word	0x4707ea8c
   1e624:	8008f811 	.word	0x8008f811
   1e628:	c00af811 	.word	0xc00af811
   1e62c:	a01cf8d0 	.word	0xa01cf8d0
   1e630:	40629801 	.word	0x40629801
   1e634:	0a0aea88 	.word	0x0a0aea88
   1e638:	620cea82 	.word	0x620cea82
   1e63c:	4807f3c0 	.word	0x4807f3c0
   1e640:	2c07f3c0 	.word	0x2c07f3c0
   1e644:	f8112000 	.word	0xf8112000
   1e648:	f3c6b00b 	.word	0xf3c6b00b
   1e64c:	5d8e2607 	.word	0x5d8e2607
   1e650:	6b0bea8a 	.word	0x6b0bea8a
   1e654:	4507f3c5 	.word	0x4507f3c5
   1e658:	a00cf811 	.word	0xa00cf811
   1e65c:	f8115d4d 	.word	0xf8115d4d
   1e660:	ea821008 	.word	0xea821008
   1e664:	ea8b2606 	.word	0xea8b2606
   1e668:	9c022b0a 	.word	0x9c022b0a
   1e66c:	4b05ea8b 	.word	0x4b05ea8b
   1e670:	4601ea86 	.word	0x4601ea86
   1e674:	2c13ea4f 	.word	0x2c13ea4f
   1e678:	ea4f0a31 	.word	0xea4f0a31
   1e67c:	f366221b 	.word	0xf366221b
   1e680:	f36b0e07 	.word	0xf36b0e07
   1e684:	f36c0007 	.word	0xf36c0007
   1e688:	ea4f240f 	.word	0xea4f240f
   1e68c:	f3624c13 	.word	0xf3624c13
   1e690:	f361200f 	.word	0xf361200f
   1e694:	f36c2e0f 	.word	0xf36c2e0f
   1e698:	0c314417 	.word	0x0c314417
   1e69c:	4e17f361 	.word	0x4e17f361
   1e6a0:	46204601 	.word	0x46204601
   1e6a4:	f3630e1b 	.word	0xf3630e1b
   1e6a8:	9b05601f 	.word	0x9b05601f
   1e6ac:	60180a3d 	.word	0x60180a3d
   1e6b0:	f3672000 	.word	0xf3672000
   1e6b4:	ea4f0907 	.word	0xea4f0907
   1e6b8:	f365421b 	.word	0xf365421b
   1e6bc:	0c3d290f 	.word	0x0c3d290f
   1e6c0:	4917f365 	.word	0x4917f365
   1e6c4:	0e360e3f 	.word	0x0e360e3f
   1e6c8:	4117f362 	.word	0x4117f362
   1e6cc:	6b1bea4f 	.word	0x6b1bea4f
   1e6d0:	691ff367 	.word	0x691ff367
   1e6d4:	6e1ff366 	.word	0x6e1ff366
   1e6d8:	611ff36b 	.word	0x611ff36b
   1e6dc:	9004f8c3 	.word	0x9004f8c3
   1e6e0:	e008f8c3 	.word	0xe008f8c3
   1e6e4:	b00960d9 	.word	0xb00960d9
   1e6e8:	8ff0e8bd 	.word	0x8ff0e8bd
   1e6ec:	00026180 	.word	0x00026180
   1e6f0:	00026280 	.word	0x00026280

0001e6f4 <symbol_000e471>:
   1e6f4:	4ff0e92d 	.word	0x4ff0e92d
   1e6f8:	3500e9d0 	.word	0x3500e9d0
   1e6fc:	682fb089 	.word	0x682fb089
   1e700:	f8d1105b 	.word	0xf8d1105b
   1e704:	9306a000 	.word	0x9306a000
   1e708:	684c3b01 	.word	0x684c3b01
   1e70c:	ea8a9301 	.word	0xea8a9301
   1e710:	68eb0a07 	.word	0x68eb0a07
   1e714:	68c9688f 	.word	0x68c9688f
   1e718:	40596868 	.word	0x40596868
   1e71c:	68ae9b01 	.word	0x68ae9b01
   1e720:	2b009205 	.word	0x2b009205
   1e724:	0210f105 	.word	0x0210f105
   1e728:	0004ea80 	.word	0x0004ea80
   1e72c:	0706ea87 	.word	0x0706ea87
   1e730:	f8df9204 	.word	0xf8df9204
   1e734:	f340b3dc 	.word	0xf340b3dc
   1e738:	46d180d7 	.word	0x46d180d7
   1e73c:	0830f105 	.word	0x0830f105
   1e740:	f489fa5f 	.word	0xf489fa5f
   1e744:	5024f85b 	.word	0x5024f85b
   1e748:	6c20f858 	.word	0x6c20f858
   1e74c:	fc80fa5f 	.word	0xfc80fa5f
   1e750:	f85b0e04 	.word	0xf85b0e04
   1e754:	f85bc02c 	.word	0xf85bc02c
   1e758:	406e4024 	.word	0x406e4024
   1e75c:	5c1cf858 	.word	0x5c1cf858
   1e760:	2e07f3c1 	.word	0x2e07f3c1
   1e764:	a02ef85b 	.word	0xa02ef85b
   1e768:	0505ea8c 	.word	0x0505ea8c
   1e76c:	2e34ea86 	.word	0x2e34ea86
   1e770:	b2fbb2ca 	.word	0xb2fbb2ca
   1e774:	6c17ea4f 	.word	0x6c17ea4f
   1e778:	4407f3c7 	.word	0x4407f3c7
   1e77c:	2707f3c7 	.word	0x2707f3c7
   1e780:	6027f85b 	.word	0x6027f85b
   1e784:	2022f85b 	.word	0x2022f85b
   1e788:	7c14f858 	.word	0x7c14f858
   1e78c:	3023f85b 	.word	0x3023f85b
   1e790:	ea4f407a 	.word	0xea4f407a
   1e794:	f85b6719 	.word	0xf85b6719
   1e798:	f85b7027 	.word	0xf85b7027
   1e79c:	ea82c02c 	.word	0xea82c02c
   1e7a0:	ea822237 	.word	0xea822237
   1e7a4:	f8586636 	.word	0xf8586636
   1e7a8:	ea852c18 	.word	0xea852c18
   1e7ac:	ea8e2c3c 	.word	0xea8e2c3c
   1e7b0:	0e0d6e3a 	.word	0x0e0d6e3a
   1e7b4:	0a02ea83 	.word	0x0a02ea83
   1e7b8:	2307f3c9 	.word	0x2307f3c9
   1e7bc:	3023f85b 	.word	0x3023f85b
   1e7c0:	5025f85b 	.word	0x5025f85b
   1e7c4:	4107f3c1 	.word	0x4107f3c1
   1e7c8:	1021f85b 	.word	0x1021f85b
   1e7cc:	2707f3c0 	.word	0x2707f3c0
   1e7d0:	2535ea8a 	.word	0x2535ea8a
   1e7d4:	4a07f3c0 	.word	0x4a07f3c0
   1e7d8:	6033ea8c 	.word	0x6033ea8c
   1e7dc:	4031ea80 	.word	0x4031ea80
   1e7e0:	4024f85b 	.word	0x4024f85b
   1e7e4:	ea8e0e03 	.word	0xea8e0e03
   1e7e8:	f85b4434 	.word	0xf85b4434
   1e7ec:	b2e13023 	.word	0xb2e13023
   1e7f0:	f3c99302 	.word	0xf3c99302
   1e7f4:	f8584907 	.word	0xf8584907
   1e7f8:	f85b3c10 	.word	0xf85b3c10
   1e7fc:	f85b1021 	.word	0xf85b1021
   1e800:	f3c42029 	.word	0xf3c42029
   1e804:	f85b2c07 	.word	0xf85b2c07
   1e808:	f85b9027 	.word	0xf85b9027
   1e80c:	4059702a 	.word	0x4059702a
   1e810:	302cf85b 	.word	0x302cf85b
   1e814:	4637ea86 	.word	0x4637ea86
   1e818:	6539ea85 	.word	0x6539ea85
   1e81c:	4532ea85 	.word	0x4532ea85
   1e820:	2707f3c6 	.word	0x2707f3c6
   1e824:	9b029303 	.word	0x9b029303
   1e828:	4e07f3c5 	.word	0x4e07f3c5
   1e82c:	7027f85b 	.word	0x7027f85b
   1e830:	902ef85b 	.word	0x902ef85b
   1e834:	4c07f3c6 	.word	0x4c07f3c6
   1e838:	ea4fb2c2 	.word	0xea4fb2c2
   1e83c:	ea816e15 	.word	0xea816e15
   1e840:	b2e92333 	.word	0xb2e92333
   1e844:	a02cf85b 	.word	0xa02cf85b
   1e848:	6337ea83 	.word	0x6337ea83
   1e84c:	2022f85b 	.word	0x2022f85b
   1e850:	e02ef85b 	.word	0xe02ef85b
   1e854:	1021f85b 	.word	0x1021f85b
   1e858:	7c0cf858 	.word	0x7c0cf858
   1e85c:	6c16ea4f 	.word	0x6c16ea4f
   1e860:	b2f6407a 	.word	0xb2f6407a
   1e864:	2e3eea82 	.word	0x2e3eea82
   1e868:	2026f85b 	.word	0x2026f85b
   1e86c:	6c08f858 	.word	0x6c08f858
   1e870:	4939ea83 	.word	0x4939ea83
   1e874:	40710e23 	.word	0x40710e23
   1e878:	6023f85b 	.word	0x6023f85b
   1e87c:	3c04f858 	.word	0x3c04f858
   1e880:	702cf85b 	.word	0x702cf85b
   1e884:	f3c54053 	.word	0xf3c54053
   1e888:	ea832507 	.word	0xea832507
   1e88c:	f85b2636 	.word	0xf85b2636
   1e890:	f3c05025 	.word	0xf3c05025
   1e894:	f3c02307 	.word	0xf3c02307
   1e898:	ea814007 	.word	0xea814007
   1e89c:	f85b2137 	.word	0xf85b2137
   1e8a0:	f85b7023 	.word	0xf85b7023
   1e8a4:	ea863020 	.word	0xea863020
   1e8a8:	ea816635 	.word	0xea816635
   1e8ac:	f3c46737 	.word	0xf3c46737
   1e8b0:	9a034407 	.word	0x9a034407
   1e8b4:	4133ea86 	.word	0x4133ea86
   1e8b8:	f85b9b01 	.word	0xf85b9b01
   1e8bc:	ea8e4024 	.word	0xea8e4024
   1e8c0:	3b016e32 	.word	0x3b016e32
   1e8c4:	403aea8e 	.word	0x403aea8e
   1e8c8:	4734ea87 	.word	0x4734ea87
   1e8cc:	0820f108 	.word	0x0820f108
   1e8d0:	f47f9301 	.word	0xf47f9301
   1e8d4:	46caaf35 	.word	0x46caaf35
   1e8d8:	9a049b06 	.word	0x9a049b06
   1e8dc:	6300f103 	.word	0x6300f103
   1e8e0:	eb023b01 	.word	0xeb023b01
   1e8e4:	93041343 	.word	0x93041343
   1e8e8:	f38afa5f 	.word	0xf38afa5f
   1e8ec:	5023f85b 	.word	0x5023f85b
   1e8f0:	fa5f9b04 	.word	0xfa5f9b04
   1e8f4:	681cf881 	.word	0x681cf881
   1e8f8:	f85b0e03 	.word	0xf85b0e03
   1e8fc:	f85b2028 	.word	0xf85b2028
   1e900:	f3c18023 	.word	0xf3c18023
   1e904:	f85b2307 	.word	0xf85b2307
   1e908:	406c3023 	.word	0x406c3023
   1e90c:	4507f3c7 	.word	0x4507f3c7
   1e910:	5025f85b 	.word	0x5025f85b
   1e914:	2438ea84 	.word	0x2438ea84
   1e918:	f887fa5f 	.word	0xf887fa5f
   1e91c:	6028f85b 	.word	0x6028f85b
   1e920:	6433ea84 	.word	0x6433ea84
   1e924:	4535ea84 	.word	0x4535ea84
   1e928:	462e9602 	.word	0x462e9602
   1e92c:	fa5f9c04 	.word	0xfa5f9c04
   1e930:	f85bf980 	.word	0xf85bf980
   1e934:	68639029 	.word	0x68639029
   1e938:	f85b0e3c 	.word	0xf85b0e3c
   1e93c:	96014024 	.word	0x96014024
   1e940:	0303ea89 	.word	0x0303ea89
   1e944:	ea839e04 	.word	0xea839e04
   1e948:	f3c72434 	.word	0xf3c72434
   1e94c:	0e0b2707 	.word	0x0e0b2707
   1e950:	f85b4d6e 	.word	0xf85b4d6e
   1e954:	f89d9027 	.word	0xf89d9027
   1e958:	f85b8004 	.word	0xf85b8004
   1e95c:	68f37023 	.word	0x68f37023
   1e960:	0e00f04f 	.word	0x0e00f04f
   1e964:	8008f815 	.word	0x8008f815
   1e968:	69324053 	.word	0x69324053
   1e96c:	4107f3c1 	.word	0x4107f3c1
   1e970:	0802ea88 	.word	0x0802ea88
   1e974:	97034642 	.word	0x97034642
   1e978:	7021f85b 	.word	0x7021f85b
   1e97c:	611aea4f 	.word	0x611aea4f
   1e980:	1021f85b 	.word	0x1021f85b
   1e984:	e018f8cd 	.word	0xe018f8cd
   1e988:	2331ea83 	.word	0x2331ea83
   1e98c:	6939ea83 	.word	0x6939ea83
   1e990:	2307f3ca 	.word	0x2307f3ca
   1e994:	3023f85b 	.word	0x3023f85b
   1e998:	9e0268b1 	.word	0x9e0268b1
   1e99c:	6333ea84 	.word	0x6333ea84
   1e9a0:	4737ea83 	.word	0x4737ea83
   1e9a4:	0801ea86 	.word	0x0801ea86
   1e9a8:	2307f3c0 	.word	0x2307f3c0
   1e9ac:	f3ca9e03 	.word	0xf3ca9e03
   1e9b0:	f3c04a07 	.word	0xf3c04a07
   1e9b4:	f85b4007 	.word	0xf85b4007
   1e9b8:	f85b102a 	.word	0xf85b102a
   1e9bc:	f8cd4023 	.word	0xf8cd4023
   1e9c0:	f85be01c 	.word	0xf85be01c
   1e9c4:	0e383020 	.word	0x0e383020
   1e9c8:	ea885c28 	.word	0xea885c28
   1e9cc:	ea892836 	.word	0xea892836
   1e9d0:	ea884933 	.word	0xea884933
   1e9d4:	ea886834 	.word	0xea886834
   1e9d8:	f3c94131 	.word	0xf3c94131
   1e9dc:	ea822407 	.word	0xea822407
   1e9e0:	9a016000 	.word	0x9a016000
   1e9e4:	8004f815 	.word	0x8004f815
   1e9e8:	4307f3c1 	.word	0x4307f3c1
   1e9ec:	6a11ea4f 	.word	0x6a11ea4f
   1e9f0:	f8155cec 	.word	0xf8155cec
   1e9f4:	f3c2b00a 	.word	0xf3c2b00a
   1e9f8:	9a042a07 	.word	0x9a042a07
   1e9fc:	ea80b2fb 	.word	0xea80b2fb
   1ea00:	ea802008 	.word	0xea802008
   1ea04:	5ceb4004 	.word	0x5ceb4004
   1ea08:	f8156954 	.word	0xf8156954
   1ea0c:	f3c9a00a 	.word	0xf3c9a00a
   1ea10:	40634807 	.word	0x40634807
   1ea14:	6008f815 	.word	0x6008f815
   1ea18:	6b0bea83 	.word	0x6b0bea83
   1ea1c:	2b0aea8b 	.word	0x2b0aea8b
   1ea20:	4b06ea8b 	.word	0x4b06ea8b
   1ea24:	260046f4 	.word	0x260046f4
   1ea28:	f881fa5f 	.word	0xf881fa5f
   1ea2c:	f8156994 	.word	0xf8156994
   1ea30:	ea4f8008 	.word	0xea4f8008
   1ea34:	f8d26319 	.word	0xf8d26319
   1ea38:	5ceba01c 	.word	0x5ceba01c
   1ea3c:	fa5f9a01 	.word	0xfa5f9a01
   1ea40:	f815f989 	.word	0xf815f989
   1ea44:	ea889009 	.word	0xea889009
   1ea48:	ea880804 	.word	0xea880804
   1ea4c:	0e136803 	.word	0x0e136803
   1ea50:	090aea89 	.word	0x090aea89
   1ea54:	a003f815 	.word	0xa003f815
   1ea58:	4307f3c2 	.word	0x4307f3c2
   1ea5c:	f3c75cec 	.word	0xf3c75cec
   1ea60:	5ceb2307 	.word	0x5ceb2307
   1ea64:	2107f3c1 	.word	0x2107f3c1
   1ea68:	ea885c69 	.word	0xea885c69
   1ea6c:	ea882803 	.word	0xea882803
   1ea70:	ea894804 	.word	0xea894804
   1ea74:	ea4f690a 	.word	0xea4f690a
   1ea78:	ea89241b 	.word	0xea89241b
   1ea7c:	f36b2901 	.word	0xf36b2901
   1ea80:	ea4f0c07 	.word	0xea4f0c07
   1ea84:	f3682118 	.word	0xf3682118
   1ea88:	22000607 	.word	0x22000607
   1ea8c:	260ff361 	.word	0x260ff361
   1ea90:	2c0ff364 	.word	0x2c0ff364
   1ea94:	441bea4f 	.word	0x441bea4f
   1ea98:	4c17f364 	.word	0x4c17f364
   1ea9c:	f3c74634 	.word	0xf3c74634
   1eaa0:	5ded4707 	.word	0x5ded4707
   1eaa4:	0e07f360 	.word	0x0e07f360
   1eaa8:	4905ea89 	.word	0x4905ea89
   1eaac:	2319ea4f 	.word	0x2319ea4f
   1eab0:	f3690a05 	.word	0xf3690a05
   1eab4:	ea4f0207 	.word	0xea4f0207
   1eab8:	f3634118 	.word	0xf3634118
   1eabc:	f365220f 	.word	0xf365220f
   1eac0:	0c052e0f 	.word	0x0c052e0f
   1eac4:	4417f361 	.word	0x4417f361
   1eac8:	4e17f365 	.word	0x4e17f365
   1eacc:	46110e00 	.word	0x46110e00
   1ead0:	6e1ff360 	.word	0x6e1ff360
   1ead4:	ea4f4620 	.word	0xea4f4620
   1ead8:	ea4f4319 	.word	0xea4f4319
   1eadc:	f3636818 	.word	0xf3636818
   1eae0:	9b054117 	.word	0x9b054117
   1eae4:	601ff368 	.word	0x601ff368
   1eae8:	20006098 	.word	0x20006098
   1eaec:	6b1bea4f 	.word	0x6b1bea4f
   1eaf0:	6919ea4f 	.word	0x6919ea4f
   1eaf4:	6c1ff36b 	.word	0x6c1ff36b
   1eaf8:	611ff369 	.word	0x611ff369
   1eafc:	e000f8c3 	.word	0xe000f8c3
   1eb00:	c004f8c3 	.word	0xc004f8c3
   1eb04:	b00960d9 	.word	0xb00960d9
   1eb08:	8ff0e8bd 	.word	0x8ff0e8bd
   1eb0c:	000266a8 	.word	0x000266a8
   1eb10:	000267a8 	.word	0x000267a8

0001eb14 <symbol_0005bab>:
   1eb14:	4614b410 	.word	0x4614b410
   1eb18:	461a2901 	.word	0x461a2901
   1eb1c:	d0034621 	.word	0xd0034621
   1eb20:	4b04f85d 	.word	0x4b04f85d
   1eb24:	bde6f7ff 	.word	0xbde6f7ff
   1eb28:	4b04f85d 	.word	0x4b04f85d
   1eb2c:	bbcaf7ff 	.word	0xbbcaf7ff

0001eb30 <ok_rsp_parser>:
   1eb30:	47702000 	.word	0x47702000

0001eb34 <pdn_state_get_parser>:
   1eb34:	b5702200 	.word	0xb5702200
   1eb38:	b084780b 	.word	0xb084780b
   1eb3c:	e9cd460e 	.word	0xe9cd460e
   1eb40:	e9cd2200 	.word	0xe9cd2200
   1eb44:	b3232202 	.word	0xb3232202
   1eb48:	2b20460c 	.word	0x2b20460c
   1eb4c:	d01b460d 	.word	0xd01b460d
   1eb50:	3201700b 	.word	0x3201700b
   1eb54:	3f01f814 	.word	0x3f01f814
   1eb58:	460d18b1 	.word	0x460d18b1
   1eb5c:	d1f42b00 	.word	0xd1f42b00
   1eb60:	4b0d2200 	.word	0x4b0d2200
   1eb64:	f853702a 	.word	0xf853702a
   1eb68:	4a0c3020 	.word	0x4a0c3020
   1eb6c:	2110681b 	.word	0x2110681b
   1eb70:	f0034668 	.word	0xf0034668
   1eb74:	4669f999 	.word	0x4669f999
   1eb78:	f0054630 	.word	0xf0054630
   1eb7c:	3000fffe 	.word	0x3000fffe
   1eb80:	2001bf18 	.word	0x2001bf18
   1eb84:	bd70b004 	.word	0xbd70b004
   1eb88:	3f01f814 	.word	0x3f01f814
   1eb8c:	d1dc2b00 	.word	0xd1dc2b00
   1eb90:	460de7e6 	.word	0x460de7e6
   1eb94:	bf00e7e4 	.word	0xbf00e7e4
   1eb98:	20021948 	.word	0x20021948
   1eb9c:	00026c4c 	.word	0x00026c4c

0001eba0 <pdn_id_get_parser>:
   1eba0:	780bb570 	.word	0x780bb570
   1eba4:	b3134606 	.word	0xb3134606
   1eba8:	24004608 	.word	0x24004608
   1ebac:	2b20460a 	.word	0x2b20460a
   1ebb0:	d0174615 	.word	0xd0174615
   1ebb4:	34017013 	.word	0x34017013
   1ebb8:	3f01f810 	.word	0x3f01f810
   1ebbc:	4615190a 	.word	0x4615190a
   1ebc0:	d1f42b00 	.word	0xd1f42b00
   1ebc4:	46082300 	.word	0x46082300
   1ebc8:	213a702b 	.word	0x213a702b
   1ebcc:	ffa1f005 	.word	0xffa1f005
   1ebd0:	3001b130 	.word	0x3001b130
   1ebd4:	fe1ff005 	.word	0xfe1ff005
   1ebd8:	f8534b06 	.word	0xf8534b06
   1ebdc:	60583026 	.word	0x60583026
   1ebe0:	bd702000 	.word	0xbd702000
   1ebe4:	3f01f810 	.word	0x3f01f810
   1ebe8:	d1e02b00 	.word	0xd1e02b00
   1ebec:	460de7ea 	.word	0x460de7ea
   1ebf0:	bf00e7e8 	.word	0xbf00e7e8
   1ebf4:	20021948 	.word	0x20021948

0001ebf8 <context_create_parser>:
   1ebf8:	780bb570 	.word	0x780bb570
   1ebfc:	b3134606 	.word	0xb3134606
   1ec00:	24004608 	.word	0x24004608
   1ec04:	2b20460a 	.word	0x2b20460a
   1ec08:	d0174615 	.word	0xd0174615
   1ec0c:	34017013 	.word	0x34017013
   1ec10:	3f01f810 	.word	0x3f01f810
   1ec14:	4615190a 	.word	0x4615190a
   1ec18:	d1f42b00 	.word	0xd1f42b00
   1ec1c:	46082300 	.word	0x46082300
   1ec20:	213a702b 	.word	0x213a702b
   1ec24:	ff75f005 	.word	0xff75f005
   1ec28:	4b08b130 	.word	0x4b08b130
   1ec2c:	f8533001 	.word	0xf8533001
   1ec30:	f0054026 	.word	0xf0054026
   1ec34:	6020fdf0 	.word	0x6020fdf0
   1ec38:	bd702000 	.word	0xbd702000
   1ec3c:	3f01f810 	.word	0x3f01f810
   1ec40:	d1e02b00 	.word	0xd1e02b00
   1ec44:	460de7ea 	.word	0x460de7ea
   1ec48:	bf00e7e8 	.word	0xbf00e7e8
   1ec4c:	20021948 	.word	0x20021948

0001ec50 <pdn_interface_init>:
   1ec50:	33fff04f 	.word	0x33fff04f
   1ec54:	4c09b510 	.word	0x4c09b510
   1ec58:	21002228 	.word	0x21002228
   1ec5c:	60234808 	.word	0x60234808
   1ec60:	fe1af005 	.word	0xfe1af005
   1ec64:	2201f240 	.word	0x2201f240
   1ec68:	20662100 	.word	0x20662100
   1ec6c:	f8cef7f3 	.word	0xf8cef7f3
   1ec70:	60202800 	.word	0x60202800
   1ec74:	2003bfb4 	.word	0x2003bfb4
   1ec78:	bd102000 	.word	0xbd102000
   1ec7c:	20021844 	.word	0x20021844
   1ec80:	20021948 	.word	0x20021948

0001ec84 <pdn_interface_open>:
   1ec84:	43f0e92d 	.word	0x43f0e92d
   1ec88:	b0832866 	.word	0xb0832866
   1ec8c:	80bcf040 	.word	0x80bcf040
   1ec90:	7f00f5b1 	.word	0x7f00f5b1
   1ec94:	80aaf040 	.word	0x80aaf040
   1ec98:	2302f240 	.word	0x2302f240
   1ec9c:	f040429a 	.word	0xf040429a
   1eca0:	4c6280a5 	.word	0x4c6280a5
   1eca4:	b34d6825 	.word	0xb34d6825
   1eca8:	2b006863 	.word	0x2b006863
   1ecac:	8098f000 	.word	0x8098f000
   1ecb0:	2b0068a3 	.word	0x2b0068a3
   1ecb4:	8096f000 	.word	0x8096f000
   1ecb8:	2b0068e3 	.word	0x2b0068e3
   1ecbc:	8094f000 	.word	0x8094f000
   1ecc0:	2b006923 	.word	0x2b006923
   1ecc4:	8098f000 	.word	0x8098f000
   1ecc8:	2b006963 	.word	0x2b006963
   1eccc:	8098f000 	.word	0x8098f000
   1ecd0:	2b0069a3 	.word	0x2b0069a3
   1ecd4:	8096f000 	.word	0x8096f000
   1ecd8:	2b0069e3 	.word	0x2b0069e3
   1ecdc:	808ef000 	.word	0x808ef000
   1ece0:	b1536a23 	.word	0xb1536a23
   1ece4:	25096a63 	.word	0x25096a63
   1ece8:	200cb143 	.word	0x200cb143
   1ecec:	fa38f7f2 	.word	0xfa38f7f2
   1ecf0:	30fff04f 	.word	0x30fff04f
   1ecf4:	e8bdb003 	.word	0xe8bdb003
   1ecf8:	250883f0 	.word	0x250883f0
   1ecfc:	f7fe2074 	.word	0xf7fe2074
   1ed00:	f844ff3f 	.word	0xf844ff3f
   1ed04:	28000025 	.word	0x28000025
   1ed08:	2274d0ef 	.word	0x2274d0ef
   1ed0c:	f0052100 	.word	0xf0052100
   1ed10:	2101fdc3 	.word	0x2101fdc3
   1ed14:	f04f2003 	.word	0xf04f2003
   1ed18:	f85437ff 	.word	0xf85437ff
   1ed1c:	4a443025 	.word	0x4a443025
   1ed20:	f8546099 	.word	0xf8546099
   1ed24:	f44f3025 	.word	0xf44f3025
   1ed28:	67187180 	.word	0x67187180
   1ed2c:	4841605f 	.word	0x4841605f
   1ed30:	810cf8df 	.word	0x810cf8df
   1ed34:	f8b8f003 	.word	0xf8b8f003
   1ed38:	f8d8483e 	.word	0xf8d8483e
   1ed3c:	26009000 	.word	0x26009000
   1ed40:	ffd6f7ee 	.word	0xffd6f7ee
   1ed44:	46024633 	.word	0x46024633
   1ed48:	4648493a 	.word	0x4648493a
   1ed4c:	96009601 	.word	0x96009601
   1ed50:	f806f7f3 	.word	0xf806f7f3
   1ed54:	48374681 	.word	0x48374681
   1ed58:	ffcaf7ee 	.word	0xffcaf7ee
   1ed5c:	d1594548 	.word	0xd1594548
   1ed60:	e9cd4633 	.word	0xe9cd4633
   1ed64:	f44f6600 	.word	0xf44f6600
   1ed68:	49327280 	.word	0x49327280
   1ed6c:	0000f8d8 	.word	0x0000f8d8
   1ed70:	f8def7f3 	.word	0xf8def7f3
   1ed74:	48304606 	.word	0x48304606
   1ed78:	ffbaf7ee 	.word	0xffbaf7ee
   1ed7c:	db154286 	.word	0xdb154286
   1ed80:	492c4602 	.word	0x492c4602
   1ed84:	f005482c 	.word	0xf005482c
   1ed88:	b978fed1 	.word	0xb978fed1
   1ed8c:	46284929 	.word	0x46284929
   1ed90:	ff32f7ff 	.word	0xff32f7ff
   1ed94:	2202b9b0 	.word	0x2202b9b0
   1ed98:	3025f854 	.word	0x3025f854
   1ed9c:	40f1f045 	.word	0x40f1f045
   1eda0:	10d0f440 	.word	0x10d0f440
   1eda4:	b003609a 	.word	0xb003609a
   1eda8:	83f0e8bd 	.word	0x83f0e8bd
   1edac:	f7ee4823 	.word	0xf7ee4823
   1edb0:	4920ff9f 	.word	0x4920ff9f
   1edb4:	48214602 	.word	0x48214602
   1edb8:	feb8f005 	.word	0xfeb8f005
   1edbc:	2008b960 	.word	0x2008b960
   1edc0:	f9cef7f2 	.word	0xf9cef7f2
   1edc4:	0025f854 	.word	0x0025f854
   1edc8:	fef8f7fe 	.word	0xfef8f7fe
   1edcc:	f04f2300 	.word	0xf04f2300
   1edd0:	f84430ff 	.word	0xf84430ff
   1edd4:	e78d3025 	.word	0xe78d3025
   1edd8:	f7f22005 	.word	0xf7f22005
   1eddc:	e7f1f9c1 	.word	0xe7f1f9c1
   1ede0:	e78b2501 	.word	0xe78b2501
   1ede4:	e7892502 	.word	0xe7892502
   1ede8:	e7872503 	.word	0xe7872503
   1edec:	f7f22016 	.word	0xf7f22016
   1edf0:	f04ff9b7 	.word	0xf04ff9b7
   1edf4:	e77d30ff 	.word	0xe77d30ff
   1edf8:	e77f2504 	.word	0xe77f2504
   1edfc:	e77d2507 	.word	0xe77d2507
   1ee00:	e77b2505 	.word	0xe77b2505
   1ee04:	e7792506 	.word	0xe7792506
   1ee08:	f7f2202f 	.word	0xf7f2202f
   1ee0c:	f04ff9a9 	.word	0xf04ff9a9
   1ee10:	e76f30ff 	.word	0xe76f30ff
   1ee14:	f7f22005 	.word	0xf7f22005
   1ee18:	f854f9a3 	.word	0xf854f9a3
   1ee1c:	f7fe0025 	.word	0xf7fe0025
   1ee20:	f844fecd 	.word	0xf844fecd
   1ee24:	46386025 	.word	0x46386025
   1ee28:	bf00e764 	.word	0xbf00e764
   1ee2c:	20021948 	.word	0x20021948
   1ee30:	00026c28 	.word	0x00026c28
   1ee34:	20021848 	.word	0x20021848
   1ee38:	00026c38 	.word	0x00026c38
   1ee3c:	00026c44 	.word	0x00026c44
   1ee40:	20021844 	.word	0x20021844

0001ee44 <pdn_interface_connect>:
   1ee44:	4ff0e92d 	.word	0x4ff0e92d
   1ee48:	2900b083 	.word	0x2900b083
   1ee4c:	813ef000 	.word	0x813ef000
   1ee50:	46912a64 	.word	0x46912a64
   1ee54:	813af200 	.word	0x813af200
   1ee58:	46084605 	.word	0x46084605
   1ee5c:	f7ee4688 	.word	0xf7ee4688
   1ee60:	2864ff47 	.word	0x2864ff47
   1ee64:	8132f200 	.word	0x8132f200
   1ee68:	43ab4ba5 	.word	0x43ab4ba5
   1ee6c:	8125f040 	.word	0x8125f040
   1ee70:	45f1f025 	.word	0x45f1f025
   1ee74:	15d0f425 	.word	0x15d0f425
   1ee78:	f3002d09 	.word	0xf3002d09
   1ee7c:	4fa1811e 	.word	0x4fa1811e
   1ee80:	3025f857 	.word	0x3025f857
   1ee84:	f0002b00 	.word	0xf0002b00
   1ee88:	689a8118 	.word	0x689a8118
   1ee8c:	f0002a00 	.word	0xf0002a00
   1ee90:	2d008114 	.word	0x2d008114
   1ee94:	8111f2c0 	.word	0x8111f2c0
   1ee98:	2b02689b 	.word	0x2b02689b
   1ee9c:	810df040 	.word	0x810df040
   1eea0:	4a9a4e99 	.word	0x4a9a4e99
   1eea4:	7180f44f 	.word	0x7180f44f
   1eea8:	f0024630 	.word	0xf0024630
   1eeac:	f857fffd 	.word	0xf857fffd
   1eeb0:	46043025 	.word	0x46043025
   1eeb4:	7180f5c0 	.word	0x7180f5c0
   1eeb8:	4a95681b 	.word	0x4a95681b
   1eebc:	f0021830 	.word	0xf0021830
   1eec0:	f857fff3 	.word	0xf857fff3
   1eec4:	44043025 	.word	0x44043025
   1eec8:	f0036f1b 	.word	0xf0036f1b
   1eecc:	2a030203 	.word	0x2a030203
   1eed0:	80eaf000 	.word	0x80eaf000
   1eed4:	eb06079b 	.word	0xeb06079b
   1eed8:	f5c40004 	.word	0xf5c40004
   1eedc:	bf4c7180 	.word	0xbf4c7180
   1eee0:	4b8d4b8c 	.word	0x4b8d4b8c
   1eee4:	f0024a8d 	.word	0xf0024a8d
   1eee8:	4404ffdf 	.word	0x4404ffdf
   1eeec:	4a8c4643 	.word	0x4a8c4643
   1eef0:	7180f5c4 	.word	0x7180f5c4
   1eef4:	f0021930 	.word	0xf0021930
   1eef8:	4420ffd7 	.word	0x4420ffd7
   1eefc:	7f80f5b0 	.word	0x7f80f5b0
   1ef00:	80f7f300 	.word	0x80f7f300
   1ef04:	a238f8df 	.word	0xa238f8df
   1ef08:	f8da487f 	.word	0xf8da487f
   1ef0c:	2400b000 	.word	0x2400b000
   1ef10:	feeef7ee 	.word	0xfeeef7ee
   1ef14:	46024623 	.word	0x46024623
   1ef18:	4658497b 	.word	0x4658497b
   1ef1c:	94009401 	.word	0x94009401
   1ef20:	ff1ef7f2 	.word	0xff1ef7f2
   1ef24:	48784683 	.word	0x48784683
   1ef28:	fee2f7ee 	.word	0xfee2f7ee
   1ef2c:	d0084558 	.word	0xd0084558
   1ef30:	f7f22005 	.word	0xf7f22005
   1ef34:	f04ff915 	.word	0xf04ff915
   1ef38:	462034ff 	.word	0x462034ff
   1ef3c:	e8bdb003 	.word	0xe8bdb003
   1ef40:	46238ff0 	.word	0x46238ff0
   1ef44:	4400e9cd 	.word	0x4400e9cd
   1ef48:	7280f44f 	.word	0x7280f44f
   1ef4c:	f8da496e 	.word	0xf8da496e
   1ef50:	f7f20000 	.word	0xf7f20000
   1ef54:	4604ffed 	.word	0x4604ffed
   1ef58:	f7ee4872 	.word	0xf7ee4872
   1ef5c:	4284fec9 	.word	0x4284fec9
   1ef60:	8091f2c0 	.word	0x8091f2c0
   1ef64:	49684602 	.word	0x49684602
   1ef68:	f005486e 	.word	0xf005486e
   1ef6c:	2800fddf 	.word	0x2800fddf
   1ef70:	8089f040 	.word	0x8089f040
   1ef74:	46284964 	.word	0x46284964
   1ef78:	fddaf7ff 	.word	0xfddaf7ff
   1ef7c:	28004604 	.word	0x28004604
   1ef80:	4a69d1db 	.word	0x4a69d1db
   1ef84:	7180f44f 	.word	0x7180f44f
   1ef88:	f002485f 	.word	0xf002485f
   1ef8c:	f857ff8d 	.word	0xf857ff8d
   1ef90:	f5c03025 	.word	0xf5c03025
   1ef94:	681b7180 	.word	0x681b7180
   1ef98:	44304a64 	.word	0x44304a64
   1ef9c:	ff84f002 	.word	0xff84f002
   1efa0:	f8da4859 	.word	0xf8da4859
   1efa4:	f7eeb000 	.word	0xf7eeb000
   1efa8:	4623fea3 	.word	0x4623fea3
   1efac:	49564602 	.word	0x49564602
   1efb0:	94014658 	.word	0x94014658
   1efb4:	f7f29400 	.word	0xf7f29400
   1efb8:	4683fed3 	.word	0x4683fed3
   1efbc:	f7ee4852 	.word	0xf7ee4852
   1efc0:	4558fe97 	.word	0x4558fe97
   1efc4:	4623d1b4 	.word	0x4623d1b4
   1efc8:	7280f44f 	.word	0x7280f44f
   1efcc:	f8da494e 	.word	0xf8da494e
   1efd0:	e9cd0000 	.word	0xe9cd0000
   1efd4:	f7f24400 	.word	0xf7f24400
   1efd8:	4683ffab 	.word	0x4683ffab
   1efdc:	f7ee4851 	.word	0xf7ee4851
   1efe0:	4583fe87 	.word	0x4583fe87
   1efe4:	4602db4f 	.word	0x4602db4f
   1efe8:	484e4947 	.word	0x484e4947
   1efec:	fd9ef005 	.word	0xfd9ef005
   1eff0:	d1482800 	.word	0xd1482800
   1eff4:	f8572103 	.word	0xf8572103
   1eff8:	464a3025 	.word	0x464a3025
   1effc:	f8576099 	.word	0xf8576099
   1f000:	46410025 	.word	0x46410025
   1f004:	f005300c 	.word	0xf005300c
   1f008:	4a49fc3c 	.word	0x4a49fc3c
   1f00c:	7180f44f 	.word	0x7180f44f
   1f010:	f002483d 	.word	0xf002483d
   1f014:	4601ff49 	.word	0x4601ff49
   1f018:	3025f857 	.word	0x3025f857
   1f01c:	7180f5c1 	.word	0x7180f5c1
   1f020:	4a42681b 	.word	0x4a42681b
   1f024:	f0021830 	.word	0xf0021830
   1f028:	4837ff3f 	.word	0x4837ff3f
   1f02c:	6000f8da 	.word	0x6000f8da
   1f030:	fe5ef7ee 	.word	0xfe5ef7ee
   1f034:	46024623 	.word	0x46024623
   1f038:	46304933 	.word	0x46304933
   1f03c:	94009401 	.word	0x94009401
   1f040:	fe8ef7f2 	.word	0xfe8ef7f2
   1f044:	48304606 	.word	0x48304606
   1f048:	fe52f7ee 	.word	0xfe52f7ee
   1f04c:	d15342b0 	.word	0xd15342b0
   1f050:	f44f4623 	.word	0xf44f4623
   1f054:	492c7280 	.word	0x492c7280
   1f058:	0000f8da 	.word	0x0000f8da
   1f05c:	4400e9cd 	.word	0x4400e9cd
   1f060:	ff66f7f2 	.word	0xff66f7f2
   1f064:	48334606 	.word	0x48334606
   1f068:	fe42f7ee 	.word	0xfe42f7ee
   1f06c:	db334286 	.word	0xdb334286
   1f070:	49254602 	.word	0x49254602
   1f074:	f005482f 	.word	0xf005482f
   1f078:	bb68fd59 	.word	0xbb68fd59
   1f07c:	49224628 	.word	0x49224628
   1f080:	fd8ef7ff 	.word	0xfd8ef7ff
   1f084:	482ce759 	.word	0x482ce759
   1f088:	fe32f7ee 	.word	0xfe32f7ee
   1f08c:	4602491e 	.word	0x4602491e
   1f090:	f0054829 	.word	0xf0054829
   1f094:	2800fd4b 	.word	0x2800fd4b
   1f098:	af4af47f 	.word	0xaf4af47f
   1f09c:	f7f22008 	.word	0xf7f22008
   1f0a0:	f04ff85f 	.word	0xf04ff85f
   1f0a4:	e74834ff 	.word	0xe74834ff
   1f0a8:	7180f5c4 	.word	0x7180f5c4
   1f0ac:	4b231930 	.word	0x4b231930
   1f0b0:	f0024a1a 	.word	0xf0024a1a
   1f0b4:	4404fef9 	.word	0x4404fef9
   1f0b8:	f04fe718 	.word	0xf04fe718
   1f0bc:	200934ff 	.word	0x200934ff
   1f0c0:	f84ef7f2 	.word	0xf84ef7f2
   1f0c4:	b0034620 	.word	0xb0034620
   1f0c8:	8ff0e8bd 	.word	0x8ff0e8bd
   1f0cc:	f7f22016 	.word	0xf7f22016
   1f0d0:	f04ff847 	.word	0xf04ff847
   1f0d4:	e73034ff 	.word	0xe73034ff
   1f0d8:	f7ee4817 	.word	0xf7ee4817
   1f0dc:	490afe09 	.word	0x490afe09
   1f0e0:	48154602 	.word	0x48154602
   1f0e4:	fd22f005 	.word	0xfd22f005
   1f0e8:	2008b930 	.word	0x2008b930
   1f0ec:	f838f7f2 	.word	0xf838f7f2
   1f0f0:	f04fe723 	.word	0xf04fe723
   1f0f4:	e72034ff 	.word	0xe72034ff
   1f0f8:	f7f22005 	.word	0xf7f22005
   1f0fc:	e71cf831 	.word	0xe71cf831
   1f100:	789a0000 	.word	0x789a0000
   1f104:	20021948 	.word	0x20021948
   1f108:	20021848 	.word	0x20021848
   1f10c:	00026bb4 	.word	0x00026bb4
   1f110:	00026bc0 	.word	0x00026bc0
   1f114:	00026bd4 	.word	0x00026bd4
   1f118:	00026bdc 	.word	0x00026bdc
   1f11c:	00026bcc 	.word	0x00026bcc
   1f120:	00026c0c 	.word	0x00026c0c
   1f124:	00025bd4 	.word	0x00025bd4
   1f128:	00026be0 	.word	0x00026be0
   1f12c:	00026bec 	.word	0x00026bec
   1f130:	00026bf0 	.word	0x00026bf0
   1f134:	00026c00 	.word	0x00026c00
   1f138:	00026c44 	.word	0x00026c44
   1f13c:	00026bc4 	.word	0x00026bc4
   1f140:	20021844 	.word	0x20021844

0001f144 <pdn_interface_close>:
   1f144:	43f0e92d 	.word	0x43f0e92d
   1f148:	b0834b63 	.word	0xb0834b63
   1f14c:	f0404383 	.word	0xf0404383
   1f150:	f020809d 	.word	0xf020809d
   1f154:	f42444f1 	.word	0xf42444f1
   1f158:	2c0914d0 	.word	0x2c0914d0
   1f15c:	8096f300 	.word	0x8096f300
   1f160:	f8554d5e 	.word	0xf8554d5e
   1f164:	28000024 	.word	0x28000024
   1f168:	8090f000 	.word	0x8090f000
   1f16c:	2b006883 	.word	0x2b006883
   1f170:	808cf000 	.word	0x808cf000
   1f174:	2b036883 	.word	0x2b036883
   1f178:	f7fed008 	.word	0xf7fed008
   1f17c:	2300fd1f 	.word	0x2300fd1f
   1f180:	f8454618 	.word	0xf8454618
   1f184:	b0033024 	.word	0xb0033024
   1f188:	83f0e8bd 	.word	0x83f0e8bd
   1f18c:	4a554e54 	.word	0x4a554e54
   1f190:	7180f44f 	.word	0x7180f44f
   1f194:	f0024630 	.word	0xf0024630
   1f198:	f855fe87 	.word	0xf855fe87
   1f19c:	f5c03024 	.word	0xf5c03024
   1f1a0:	681b7180 	.word	0x681b7180
   1f1a4:	44304a50 	.word	0x44304a50
   1f1a8:	814cf8df 	.word	0x814cf8df
   1f1ac:	fe7cf002 	.word	0xfe7cf002
   1f1b0:	f8d84630 	.word	0xf8d84630
   1f1b4:	27009000 	.word	0x27009000
   1f1b8:	fd9af7ee 	.word	0xfd9af7ee
   1f1bc:	46024631 	.word	0x46024631
   1f1c0:	4648463b 	.word	0x4648463b
   1f1c4:	97009701 	.word	0x97009701
   1f1c8:	fdcaf7f2 	.word	0xfdcaf7f2
   1f1cc:	46304681 	.word	0x46304681
   1f1d0:	fd8ef7ee 	.word	0xfd8ef7ee
   1f1d4:	d1764548 	.word	0xd1764548
   1f1d8:	e9cd463b 	.word	0xe9cd463b
   1f1dc:	f44f7700 	.word	0xf44f7700
   1f1e0:	46317280 	.word	0x46317280
   1f1e4:	0000f8d8 	.word	0x0000f8d8
   1f1e8:	fea2f7f2 	.word	0xfea2f7f2
   1f1ec:	483f4607 	.word	0x483f4607
   1f1f0:	fd7ef7ee 	.word	0xfd7ef7ee
   1f1f4:	da4f4287 	.word	0xda4f4287
   1f1f8:	f7ee483d 	.word	0xf7ee483d
   1f1fc:	4938fd79 	.word	0x4938fd79
   1f200:	483b4602 	.word	0x483b4602
   1f204:	fc92f005 	.word	0xfc92f005
   1f208:	d15c2800 	.word	0xd15c2800
   1f20c:	f7f12008 	.word	0xf7f12008
   1f210:	4a38ffa7 	.word	0x4a38ffa7
   1f214:	7180f44f 	.word	0x7180f44f
   1f218:	f0024831 	.word	0xf0024831
   1f21c:	4601fe45 	.word	0x4601fe45
   1f220:	3024f855 	.word	0x3024f855
   1f224:	7180f5c1 	.word	0x7180f5c1
   1f228:	4a2f681b 	.word	0x4a2f681b
   1f22c:	f0021830 	.word	0xf0021830
   1f230:	482bfe3b 	.word	0x482bfe3b
   1f234:	7000f8d8 	.word	0x7000f8d8
   1f238:	f7ee2600 	.word	0xf7ee2600
   1f23c:	4633fd59 	.word	0x4633fd59
   1f240:	49274602 	.word	0x49274602
   1f244:	96014638 	.word	0x96014638
   1f248:	f7f29600 	.word	0xf7f29600
   1f24c:	4607fd89 	.word	0x4607fd89
   1f250:	f7ee4823 	.word	0xf7ee4823
   1f254:	42b8fd4d 	.word	0x42b8fd4d
   1f258:	4633d139 	.word	0x4633d139
   1f25c:	6600e9cd 	.word	0x6600e9cd
   1f260:	7280f44f 	.word	0x7280f44f
   1f264:	f8d8491e 	.word	0xf8d8491e
   1f268:	f7f20000 	.word	0xf7f20000
   1f26c:	4606fe61 	.word	0x4606fe61
   1f270:	f7ee481e 	.word	0xf7ee481e
   1f274:	4286fd3d 	.word	0x4286fd3d
   1f278:	4602db16 	.word	0x4602db16
   1f27c:	481b4918 	.word	0x481b4918
   1f280:	fc54f005 	.word	0xfc54f005
   1f284:	f855b980 	.word	0xf855b980
   1f288:	e7760024 	.word	0xe7760024
   1f28c:	f7f12009 	.word	0xf7f12009
   1f290:	f04fff67 	.word	0xf04fff67
   1f294:	e77630ff 	.word	0xe77630ff
   1f298:	46314602 	.word	0x46314602
   1f29c:	f0054813 	.word	0xf0054813
   1f2a0:	2800fc45 	.word	0x2800fc45
   1f2a4:	e7a7d0b5 	.word	0xe7a7d0b5
   1f2a8:	f7ee4811 	.word	0xf7ee4811
   1f2ac:	490cfd21 	.word	0x490cfd21
   1f2b0:	480f4602 	.word	0x480f4602
   1f2b4:	fc3af005 	.word	0xfc3af005
   1f2b8:	2008b948 	.word	0x2008b948
   1f2bc:	ff50f7f1 	.word	0xff50f7f1
   1f2c0:	0024f855 	.word	0x0024f855
   1f2c4:	2005e759 	.word	0x2005e759
   1f2c8:	ff4af7f1 	.word	0xff4af7f1
   1f2cc:	2005e7a1 	.word	0x2005e7a1
   1f2d0:	ff46f7f1 	.word	0xff46f7f1
   1f2d4:	bf00e7d7 	.word	0xbf00e7d7
   1f2d8:	789a0000 	.word	0x789a0000
   1f2dc:	20021948 	.word	0x20021948
   1f2e0:	20021848 	.word	0x20021848
   1f2e4:	00026ba8 	.word	0x00026ba8
   1f2e8:	00026bec 	.word	0x00026bec
   1f2ec:	00025bd4 	.word	0x00025bd4
   1f2f0:	00026c44 	.word	0x00026c44
   1f2f4:	00026bb4 	.word	0x00026bb4
   1f2f8:	20021844 	.word	0x20021844

0001f2fc <pdn_interface_setopt>:
   1f2fc:	f240b510 	.word	0xf240b510
   1f300:	42a12402 	.word	0x42a12402
   1f304:	b153d10b 	.word	0xb153d10b
   1f308:	b1419902 	.word	0xb1419902
   1f30c:	43814925 	.word	0x43814925
   1f310:	2009d00b 	.word	0x2009d00b
   1f314:	ff24f7f1 	.word	0xff24f7f1
   1f318:	30fff04f 	.word	0x30fff04f
   1f31c:	2016bd10 	.word	0x2016bd10
   1f320:	ff1ef7f1 	.word	0xff1ef7f1
   1f324:	30fff04f 	.word	0x30fff04f
   1f328:	f020bd10 	.word	0xf020bd10
   1f32c:	f42040f1 	.word	0xf42040f1
   1f330:	280910d0 	.word	0x280910d0
   1f334:	491cdced 	.word	0x491cdced
   1f338:	1020f851 	.word	0x1020f851
   1f33c:	d0e82900 	.word	0xd0e82900
   1f340:	2c00688c 	.word	0x2c00688c
   1f344:	2800d0e5 	.word	0x2800d0e5
   1f348:	2a01dbe3 	.word	0x2a01dbe3
   1f34c:	202dd001 	.word	0x202dd001
   1f350:	688ae7e6 	.word	0x688ae7e6
   1f354:	688ab1fa 	.word	0x688ab1fa
   1f358:	d01c2a03 	.word	0xd01c2a03
   1f35c:	2a04688a 	.word	0x2a04688a
   1f360:	9a02d019 	.word	0x9a02d019
   1f364:	1e420890 	.word	0x1e420890
   1f368:	d8d82a01 	.word	0xd8d82a01
   1f36c:	07929a02 	.word	0x07929a02
   1f370:	681ad1d5 	.word	0x681ad1d5
   1f374:	d0102a02 	.word	0xd0102a02
   1f378:	d1d02a0a 	.word	0xd1d02a0a
   1f37c:	28022202 	.word	0x28022202
   1f380:	685bd106 	.word	0x685bd106
   1f384:	d00a2b02 	.word	0xd00a2b02
   1f388:	d1c82b0a 	.word	0xd1c82b0a
   1f38c:	0202f042 	.word	0x0202f042
   1f390:	2000670a 	.word	0x2000670a
   1f394:	200ee7c4 	.word	0x200ee7c4
   1f398:	2201e7c2 	.word	0x2201e7c2
   1f39c:	f042e7ef 	.word	0xf042e7ef
   1f3a0:	e7f50201 	.word	0xe7f50201
   1f3a4:	789a0000 	.word	0x789a0000
   1f3a8:	20021948 	.word	0x20021948

0001f3ac <pdn_interface_getopt>:
   1f3ac:	43f0e92d 	.word	0x43f0e92d
   1f3b0:	2402f240 	.word	0x2402f240
   1f3b4:	42a1b083 	.word	0x42a1b083
   1f3b8:	f0409d0a 	.word	0xf0409d0a
   1f3bc:	461e80a9 	.word	0x461e80a9
   1f3c0:	f0002b00 	.word	0xf0002b00
   1f3c4:	2d0080a5 	.word	0x2d0080a5
   1f3c8:	80a2f000 	.word	0x80a2f000
   1f3cc:	43834b56 	.word	0x43834b56
   1f3d0:	8084f040 	.word	0x8084f040
   1f3d4:	44f1f020 	.word	0x44f1f020
   1f3d8:	14d0f424 	.word	0x14d0f424
   1f3dc:	dc7d2c09 	.word	0xdc7d2c09
   1f3e0:	f8534b52 	.word	0xf8534b52
   1f3e4:	2b003024 	.word	0x2b003024
   1f3e8:	6899d078 	.word	0x6899d078
   1f3ec:	d0752900 	.word	0xd0752900
   1f3f0:	db732c00 	.word	0xdb732c00
   1f3f4:	d00e2a02 	.word	0xd00e2a02
   1f3f8:	d0082a03 	.word	0xd0082a03
   1f3fc:	d0152a01 	.word	0xd0152a01
   1f400:	f7f1202d 	.word	0xf7f1202d
   1f404:	2000fead 	.word	0x2000fead
   1f408:	e8bdb003 	.word	0xe8bdb003
   1f40c:	682b83f0 	.word	0x682b83f0
   1f410:	2016bb23 	.word	0x2016bb23
   1f414:	682ae7f5 	.word	0x682ae7f5
   1f418:	d0fa2a00 	.word	0xd0fa2a00
   1f41c:	20002201 	.word	0x20002201
   1f420:	7033681b 	.word	0x7033681b
   1f424:	b003602a 	.word	0xb003602a
   1f428:	83f0e8bd 	.word	0x83f0e8bd
   1f42c:	2a00689a 	.word	0x2a00689a
   1f430:	689ad052 	.word	0x689ad052
   1f434:	d04f2a04 	.word	0xd04f2a04
   1f438:	2a07682a 	.word	0x2a07682a
   1f43c:	f012d9e9 	.word	0xf012d9e9
   1f440:	d1e60203 	.word	0xd1e60203
   1f444:	07996f1b 	.word	0x07996f1b
   1f448:	2104d45d 	.word	0x2104d45d
   1f44c:	d50207db 	.word	0xd50207db
   1f450:	50b32302 	.word	0x50b32302
   1f454:	602a460a 	.word	0x602a460a
   1f458:	e7d52000 	.word	0xe7d52000
   1f45c:	f44f4a34 	.word	0xf44f4a34
   1f460:	48347180 	.word	0x48347180
   1f464:	80d8f8df 	.word	0x80d8f8df
   1f468:	fd1ef002 	.word	0xfd1ef002
   1f46c:	f8d84831 	.word	0xf8d84831
   1f470:	27009000 	.word	0x27009000
   1f474:	fc3cf7ee 	.word	0xfc3cf7ee
   1f478:	4602463b 	.word	0x4602463b
   1f47c:	4648492d 	.word	0x4648492d
   1f480:	97009701 	.word	0x97009701
   1f484:	fc6cf7f2 	.word	0xfc6cf7f2
   1f488:	482a4681 	.word	0x482a4681
   1f48c:	fc30f7ee 	.word	0xfc30f7ee
   1f490:	d1434548 	.word	0xd1434548
   1f494:	e9cd463b 	.word	0xe9cd463b
   1f498:	f44f7700 	.word	0xf44f7700
   1f49c:	49257280 	.word	0x49257280
   1f4a0:	0000f8d8 	.word	0x0000f8d8
   1f4a4:	fd44f7f2 	.word	0xfd44f7f2
   1f4a8:	48234607 	.word	0x48234607
   1f4ac:	fc20f7ee 	.word	0xfc20f7ee
   1f4b0:	db194287 	.word	0xdb194287
   1f4b4:	491f4602 	.word	0x491f4602
   1f4b8:	f005481f 	.word	0xf005481f
   1f4bc:	4607fb37 	.word	0x4607fb37
   1f4c0:	4620b990 	.word	0x4620b990
   1f4c4:	f7ff491b 	.word	0xf7ff491b
   1f4c8:	2800fb35 	.word	0x2800fb35
   1f4cc:	2301db99 	.word	0x2301db99
   1f4d0:	46387030 	.word	0x46387030
   1f4d4:	e797602b 	.word	0xe797602b
   1f4d8:	e792200e 	.word	0xe792200e
   1f4dc:	f7f12009 	.word	0xf7f12009
   1f4e0:	f04ffe3f 	.word	0xf04ffe3f
   1f4e4:	e78f30ff 	.word	0xe78f30ff
   1f4e8:	f7ee4814 	.word	0xf7ee4814
   1f4ec:	4911fc01 	.word	0x4911fc01
   1f4f0:	48124602 	.word	0x48124602
   1f4f4:	fb1af005 	.word	0xfb1af005
   1f4f8:	2008b980 	.word	0x2008b980
   1f4fc:	fe30f7f1 	.word	0xfe30f7f1
   1f500:	30fff04f 	.word	0x30fff04f
   1f504:	220ae77d 	.word	0x220ae77d
   1f508:	60322108 	.word	0x60322108
   1f50c:	e79d2204 	.word	0xe79d2204
   1f510:	f7f12016 	.word	0xf7f12016
   1f514:	f04ffe25 	.word	0xf04ffe25
   1f518:	e77530ff 	.word	0xe77530ff
   1f51c:	f7f12005 	.word	0xf7f12005
   1f520:	f04ffe1f 	.word	0xf04ffe1f
   1f524:	e76c30ff 	.word	0xe76c30ff
   1f528:	789a0000 	.word	0x789a0000
   1f52c:	20021948 	.word	0x20021948
   1f530:	00026c14 	.word	0x00026c14
   1f534:	20021848 	.word	0x20021848
   1f538:	00026c20 	.word	0x00026c20
   1f53c:	00026c44 	.word	0x00026c44
   1f540:	20021844 	.word	0x20021844

0001f544 <pdn_interface_pdn_id_get>:
   1f544:	f0002900 	.word	0xf0002900
   1f548:	e92d83b9 	.word	0xe92d83b9
   1f54c:	4ca343f0 	.word	0x4ca343f0
   1f550:	b0832802 	.word	0xb0832802
   1f554:	6823460d 	.word	0x6823460d
   1f558:	8094f000 	.word	0x8094f000
   1f55c:	d03f280a 	.word	0xd03f280a
   1f560:	689bb11b 	.word	0x689bb11b
   1f564:	f0002b03 	.word	0xf0002b03
   1f568:	68638127 	.word	0x68638127
   1f56c:	689bb11b 	.word	0x689bb11b
   1f570:	f0002b03 	.word	0xf0002b03
   1f574:	68a38110 	.word	0x68a38110
   1f578:	689bb11b 	.word	0x689bb11b
   1f57c:	f0002b03 	.word	0xf0002b03
   1f580:	68e380f9 	.word	0x68e380f9
   1f584:	689bb11b 	.word	0x689bb11b
   1f588:	f0002b03 	.word	0xf0002b03
   1f58c:	692380e2 	.word	0x692380e2
   1f590:	689bb11b 	.word	0x689bb11b
   1f594:	f0002b03 	.word	0xf0002b03
   1f598:	69638123 	.word	0x69638123
   1f59c:	689bb11b 	.word	0x689bb11b
   1f5a0:	f0002b03 	.word	0xf0002b03
   1f5a4:	69a38161 	.word	0x69a38161
   1f5a8:	689bb11b 	.word	0x689bb11b
   1f5ac:	f0002b03 	.word	0xf0002b03
   1f5b0:	69e3814a 	.word	0x69e3814a
   1f5b4:	689bb11b 	.word	0x689bb11b
   1f5b8:	f0002b03 	.word	0xf0002b03
   1f5bc:	6a238133 	.word	0x6a238133
   1f5c0:	689bb11b 	.word	0x689bb11b
   1f5c4:	f0002b03 	.word	0xf0002b03
   1f5c8:	6a63811c 	.word	0x6a63811c
   1f5cc:	689bb11b 	.word	0x689bb11b
   1f5d0:	f0002b03 	.word	0xf0002b03
   1f5d4:	f04f80ad 	.word	0xf04f80ad
   1f5d8:	b00330ff 	.word	0xb00330ff
   1f5dc:	83f0e8bd 	.word	0x83f0e8bd
   1f5e0:	689bb11b 	.word	0x689bb11b
   1f5e4:	f0002b03 	.word	0xf0002b03
   1f5e8:	68638335 	.word	0x68638335
   1f5ec:	689bb11b 	.word	0x689bb11b
   1f5f0:	f0002b03 	.word	0xf0002b03
   1f5f4:	68a382fd 	.word	0x68a382fd
   1f5f8:	689bb11b 	.word	0x689bb11b
   1f5fc:	f0002b03 	.word	0xf0002b03
   1f600:	68e382d5 	.word	0x68e382d5
   1f604:	689eb11b 	.word	0x689eb11b
   1f608:	f0002e03 	.word	0xf0002e03
   1f60c:	692381f0 	.word	0x692381f0
   1f610:	689bb11b 	.word	0x689bb11b
   1f614:	f0002b03 	.word	0xf0002b03
   1f618:	69638203 	.word	0x69638203
   1f61c:	689bb11b 	.word	0x689bb11b
   1f620:	f0002b03 	.word	0xf0002b03
   1f624:	69a38215 	.word	0x69a38215
   1f628:	689bb11b 	.word	0x689bb11b
   1f62c:	f0002b03 	.word	0xf0002b03
   1f630:	69e38227 	.word	0x69e38227
   1f634:	689bb11b 	.word	0x689bb11b
   1f638:	f0002b03 	.word	0xf0002b03
   1f63c:	6a238239 	.word	0x6a238239
   1f640:	689bb11b 	.word	0x689bb11b
   1f644:	f0002b03 	.word	0xf0002b03
   1f648:	6a63824d 	.word	0x6a63824d
   1f64c:	d0c22b00 	.word	0xd0c22b00
   1f650:	2b03689b 	.word	0x2b03689b
   1f654:	4628d1bf 	.word	0x4628d1bf
   1f658:	fb4af7ee 	.word	0xfb4af7ee
   1f65c:	6a604606 	.word	0x6a604606
   1f660:	f7ee300c 	.word	0xf7ee300c
   1f664:	42b0fb45 	.word	0x42b0fb45
   1f668:	6a61d1b5 	.word	0x6a61d1b5
   1f66c:	310c4628 	.word	0x310c4628
   1f670:	fb34f7ee 	.word	0xfb34f7ee
   1f674:	d1ae2800 	.word	0xd1ae2800
   1f678:	6f1a6a63 	.word	0x6f1a6a63
   1f67c:	d5aa0792 	.word	0xd5aa0792
   1f680:	e11a2609 	.word	0xe11a2609
   1f684:	689bb11b 	.word	0x689bb11b
   1f688:	f0002b03 	.word	0xf0002b03
   1f68c:	686382fd 	.word	0x686382fd
   1f690:	689bb11b 	.word	0x689bb11b
   1f694:	f0002b03 	.word	0xf0002b03
   1f698:	68a382c5 	.word	0x68a382c5
   1f69c:	689bb11b 	.word	0x689bb11b
   1f6a0:	f0002b03 	.word	0xf0002b03
   1f6a4:	68e38269 	.word	0x68e38269
   1f6a8:	689eb11b 	.word	0x689eb11b
   1f6ac:	f0002e03 	.word	0xf0002e03
   1f6b0:	692380ec 	.word	0x692380ec
   1f6b4:	689bb11b 	.word	0x689bb11b
   1f6b8:	f0002b03 	.word	0xf0002b03
   1f6bc:	6963814a 	.word	0x6963814a
   1f6c0:	689bb11b 	.word	0x689bb11b
   1f6c4:	f0002b03 	.word	0xf0002b03
   1f6c8:	69a3815e 	.word	0x69a3815e
   1f6cc:	689bb11b 	.word	0x689bb11b
   1f6d0:	f0002b03 	.word	0xf0002b03
   1f6d4:	69e38172 	.word	0x69e38172
   1f6d8:	689bb11b 	.word	0x689bb11b
   1f6dc:	f0002b03 	.word	0xf0002b03
   1f6e0:	6a23821b 	.word	0x6a23821b
   1f6e4:	689bb11b 	.word	0x689bb11b
   1f6e8:	f0002b03 	.word	0xf0002b03
   1f6ec:	6a63822d 	.word	0x6a63822d
   1f6f0:	f43f2b00 	.word	0xf43f2b00
   1f6f4:	689baf70 	.word	0x689baf70
   1f6f8:	f47f2b03 	.word	0xf47f2b03
   1f6fc:	4628af6c 	.word	0x4628af6c
   1f700:	faf6f7ee 	.word	0xfaf6f7ee
   1f704:	6a604606 	.word	0x6a604606
   1f708:	f7ee300c 	.word	0xf7ee300c
   1f70c:	4286faf1 	.word	0x4286faf1
   1f710:	af61f47f 	.word	0xaf61f47f
   1f714:	46286a61 	.word	0x46286a61
   1f718:	f7ee310c 	.word	0xf7ee310c
   1f71c:	2800fadf 	.word	0x2800fadf
   1f720:	af59f47f 	.word	0xaf59f47f
   1f724:	6f1a6a63 	.word	0x6f1a6a63
   1f728:	f57f07d2 	.word	0xf57f07d2
   1f72c:	e7a7af54 	.word	0xe7a7af54
   1f730:	f7ee4628 	.word	0xf7ee4628
   1f734:	4606fadd 	.word	0x4606fadd
   1f738:	300c6a60 	.word	0x300c6a60
   1f73c:	fad8f7ee 	.word	0xfad8f7ee
   1f740:	f47f42b0 	.word	0xf47f42b0
   1f744:	6a61af48 	.word	0x6a61af48
   1f748:	310c4628 	.word	0x310c4628
   1f74c:	fac6f7ee 	.word	0xfac6f7ee
   1f750:	4628e741 	.word	0x4628e741
   1f754:	faccf7ee 	.word	0xfaccf7ee
   1f758:	68e04606 	.word	0x68e04606
   1f75c:	f7ee300c 	.word	0xf7ee300c
   1f760:	4286fac7 	.word	0x4286fac7
   1f764:	af13f47f 	.word	0xaf13f47f
   1f768:	462868e1 	.word	0x462868e1
   1f76c:	f7ee310c 	.word	0xf7ee310c
   1f770:	e70cfab5 	.word	0xe70cfab5
   1f774:	f7ee4628 	.word	0xf7ee4628
   1f778:	4606fabb 	.word	0x4606fabb
   1f77c:	300c68a0 	.word	0x300c68a0
   1f780:	fab6f7ee 	.word	0xfab6f7ee
   1f784:	f47f4286 	.word	0xf47f4286
   1f788:	68a1aefc 	.word	0x68a1aefc
   1f78c:	310c4628 	.word	0x310c4628
   1f790:	faa4f7ee 	.word	0xfaa4f7ee
   1f794:	4628e6f5 	.word	0x4628e6f5
   1f798:	faaaf7ee 	.word	0xfaaaf7ee
   1f79c:	68604606 	.word	0x68604606
   1f7a0:	f7ee300c 	.word	0xf7ee300c
   1f7a4:	4286faa5 	.word	0x4286faa5
   1f7a8:	aee5f47f 	.word	0xaee5f47f
   1f7ac:	46286861 	.word	0x46286861
   1f7b0:	f7ee310c 	.word	0xf7ee310c
   1f7b4:	e6defa93 	.word	0xe6defa93
   1f7b8:	f7ee4608 	.word	0xf7ee4608
   1f7bc:	4606fa99 	.word	0x4606fa99
   1f7c0:	300c6820 	.word	0x300c6820
   1f7c4:	fa94f7ee 	.word	0xfa94f7ee
   1f7c8:	f47f4286 	.word	0xf47f4286
   1f7cc:	6821aece 	.word	0x6821aece
   1f7d0:	310c4628 	.word	0x310c4628
   1f7d4:	fa82f7ee 	.word	0xfa82f7ee
   1f7d8:	bf00e6c7 	.word	0xbf00e6c7
   1f7dc:	20021948 	.word	0x20021948
   1f7e0:	f7ee4628 	.word	0xf7ee4628
   1f7e4:	4606fa85 	.word	0x4606fa85
   1f7e8:	300c6920 	.word	0x300c6920
   1f7ec:	fa80f7ee 	.word	0xfa80f7ee
   1f7f0:	f47f4286 	.word	0xf47f4286
   1f7f4:	6921aed2 	.word	0x6921aed2
   1f7f8:	310c4628 	.word	0x310c4628
   1f7fc:	fa6ef7ee 	.word	0xfa6ef7ee
   1f800:	4628e6cb 	.word	0x4628e6cb
   1f804:	fa74f7ee 	.word	0xfa74f7ee
   1f808:	6a204606 	.word	0x6a204606
   1f80c:	f7ee300c 	.word	0xf7ee300c
   1f810:	4286fa6f 	.word	0x4286fa6f
   1f814:	aed9f47f 	.word	0xaed9f47f
   1f818:	46286a21 	.word	0x46286a21
   1f81c:	f7ee310c 	.word	0xf7ee310c
   1f820:	e6d2fa5d 	.word	0xe6d2fa5d
   1f824:	f7ee4628 	.word	0xf7ee4628
   1f828:	4606fa63 	.word	0x4606fa63
   1f82c:	300c69e0 	.word	0x300c69e0
   1f830:	fa5ef7ee 	.word	0xfa5ef7ee
   1f834:	f47f4286 	.word	0xf47f4286
   1f838:	69e1aec2 	.word	0x69e1aec2
   1f83c:	310c4628 	.word	0x310c4628
   1f840:	fa4cf7ee 	.word	0xfa4cf7ee
   1f844:	4628e6bb 	.word	0x4628e6bb
   1f848:	fa52f7ee 	.word	0xfa52f7ee
   1f84c:	69a04606 	.word	0x69a04606
   1f850:	f7ee300c 	.word	0xf7ee300c
   1f854:	4286fa4d 	.word	0x4286fa4d
   1f858:	aeabf47f 	.word	0xaeabf47f
   1f85c:	462869a1 	.word	0x462869a1
   1f860:	f7ee310c 	.word	0xf7ee310c
   1f864:	e6a4fa3b 	.word	0xe6a4fa3b
   1f868:	f7ee4628 	.word	0xf7ee4628
   1f86c:	4606fa41 	.word	0x4606fa41
   1f870:	300c6960 	.word	0x300c6960
   1f874:	fa3cf7ee 	.word	0xfa3cf7ee
   1f878:	f47f4286 	.word	0xf47f4286
   1f87c:	6961ae94 	.word	0x6961ae94
   1f880:	310c4628 	.word	0x310c4628
   1f884:	fa2af7ee 	.word	0xfa2af7ee
   1f888:	4628e68d 	.word	0x4628e68d
   1f88c:	fa30f7ee 	.word	0xfa30f7ee
   1f890:	68e04607 	.word	0x68e04607
   1f894:	f7ee300c 	.word	0xf7ee300c
   1f898:	4287fa2b 	.word	0x4287fa2b
   1f89c:	af09f47f 	.word	0xaf09f47f
   1f8a0:	462868e1 	.word	0x462868e1
   1f8a4:	f7ee310c 	.word	0xf7ee310c
   1f8a8:	2800fa19 	.word	0x2800fa19
   1f8ac:	af01f47f 	.word	0xaf01f47f
   1f8b0:	6f1a68e3 	.word	0x6f1a68e3
   1f8b4:	f57f07d1 	.word	0xf57f07d1
   1f8b8:	6858aefc 	.word	0x6858aefc
   1f8bc:	f47f1c43 	.word	0xf47f1c43
   1f8c0:	4dc6ae8c 	.word	0x4dc6ae8c
   1f8c4:	f44f4ac6 	.word	0xf44f4ac6
   1f8c8:	46287180 	.word	0x46287180
   1f8cc:	faecf002 	.word	0xfaecf002
   1f8d0:	3026f854 	.word	0x3026f854
   1f8d4:	7180f5c0 	.word	0x7180f5c0
   1f8d8:	4ac2681b 	.word	0x4ac2681b
   1f8dc:	f8df4428 	.word	0xf8df4428
   1f8e0:	f002830c 	.word	0xf002830c
   1f8e4:	4628fae1 	.word	0x4628fae1
   1f8e8:	9000f8d8 	.word	0x9000f8d8
   1f8ec:	f7ee2700 	.word	0xf7ee2700
   1f8f0:	4629f9ff 	.word	0x4629f9ff
   1f8f4:	463b4602 	.word	0x463b4602
   1f8f8:	97014648 	.word	0x97014648
   1f8fc:	f7f29700 	.word	0xf7f29700
   1f900:	4681fa2f 	.word	0x4681fa2f
   1f904:	f7ee4628 	.word	0xf7ee4628
   1f908:	4548f9f3 	.word	0x4548f9f3
   1f90c:	81e9f040 	.word	0x81e9f040
   1f910:	f44f463b 	.word	0xf44f463b
   1f914:	e9cd7280 	.word	0xe9cd7280
   1f918:	46297700 	.word	0x46297700
   1f91c:	0000f8d8 	.word	0x0000f8d8
   1f920:	fb06f7f2 	.word	0xfb06f7f2
   1f924:	48b04607 	.word	0x48b04607
   1f928:	f9e2f7ee 	.word	0xf9e2f7ee
   1f92c:	46024287 	.word	0x46024287
   1f930:	81c7f2c0 	.word	0x81c7f2c0
   1f934:	48ac4629 	.word	0x48ac4629
   1f938:	f8f8f005 	.word	0xf8f8f005
   1f93c:	f0402800 	.word	0xf0402800
   1f940:	462981c0 	.word	0x462981c0
   1f944:	f7ff4630 	.word	0xf7ff4630
   1f948:	f854f92b 	.word	0xf854f92b
   1f94c:	68583026 	.word	0x68583026
   1f950:	4628e643 	.word	0x4628e643
   1f954:	f9ccf7ee 	.word	0xf9ccf7ee
   1f958:	69204606 	.word	0x69204606
   1f95c:	f7ee300c 	.word	0xf7ee300c
   1f960:	4286f9c7 	.word	0x4286f9c7
   1f964:	aeabf47f 	.word	0xaeabf47f
   1f968:	46286921 	.word	0x46286921
   1f96c:	f7ee310c 	.word	0xf7ee310c
   1f970:	2800f9b5 	.word	0x2800f9b5
   1f974:	aea3f47f 	.word	0xaea3f47f
   1f978:	6f1a6923 	.word	0x6f1a6923
   1f97c:	f57f07d2 	.word	0xf57f07d2
   1f980:	2604ae9e 	.word	0x2604ae9e
   1f984:	4628e799 	.word	0x4628e799
   1f988:	f9b2f7ee 	.word	0xf9b2f7ee
   1f98c:	69604606 	.word	0x69604606
   1f990:	f7ee300c 	.word	0xf7ee300c
   1f994:	4286f9ad 	.word	0x4286f9ad
   1f998:	ae97f47f 	.word	0xae97f47f
   1f99c:	46286961 	.word	0x46286961
   1f9a0:	f7ee310c 	.word	0xf7ee310c
   1f9a4:	2800f99b 	.word	0x2800f99b
   1f9a8:	ae8ff47f 	.word	0xae8ff47f
   1f9ac:	6f1a6963 	.word	0x6f1a6963
   1f9b0:	f57f07d7 	.word	0xf57f07d7
   1f9b4:	2605ae8a 	.word	0x2605ae8a
   1f9b8:	4628e77f 	.word	0x4628e77f
   1f9bc:	f998f7ee 	.word	0xf998f7ee
   1f9c0:	69a04606 	.word	0x69a04606
   1f9c4:	f7ee300c 	.word	0xf7ee300c
   1f9c8:	4286f993 	.word	0x4286f993
   1f9cc:	ae83f47f 	.word	0xae83f47f
   1f9d0:	462869a1 	.word	0x462869a1
   1f9d4:	f7ee310c 	.word	0xf7ee310c
   1f9d8:	2800f981 	.word	0x2800f981
   1f9dc:	ae7bf47f 	.word	0xae7bf47f
   1f9e0:	6f1a69a3 	.word	0x6f1a69a3
   1f9e4:	f57f07d6 	.word	0xf57f07d6
   1f9e8:	2606ae76 	.word	0x2606ae76
   1f9ec:	4628e765 	.word	0x4628e765
   1f9f0:	f97ef7ee 	.word	0xf97ef7ee
   1f9f4:	68e04607 	.word	0x68e04607
   1f9f8:	f7ee300c 	.word	0xf7ee300c
   1f9fc:	4287f979 	.word	0x4287f979
   1fa00:	ae05f47f 	.word	0xae05f47f
   1fa04:	462868e1 	.word	0x462868e1
   1fa08:	f7ee310c 	.word	0xf7ee310c
   1fa0c:	2800f967 	.word	0x2800f967
   1fa10:	adfdf47f 	.word	0xadfdf47f
   1fa14:	6f1a68e3 	.word	0x6f1a68e3
   1fa18:	f53f0791 	.word	0xf53f0791
   1fa1c:	e5f6af4e 	.word	0xe5f6af4e
   1fa20:	f7ee4628 	.word	0xf7ee4628
   1fa24:	4606f965 	.word	0x4606f965
   1fa28:	300c6920 	.word	0x300c6920
   1fa2c:	f960f7ee 	.word	0xf960f7ee
   1fa30:	f47f4286 	.word	0xf47f4286
   1fa34:	6921adf2 	.word	0x6921adf2
   1fa38:	310c4628 	.word	0x310c4628
   1fa3c:	f94ef7ee 	.word	0xf94ef7ee
   1fa40:	f47f2800 	.word	0xf47f2800
   1fa44:	6923adea 	.word	0x6923adea
   1fa48:	07926f1a 	.word	0x07926f1a
   1fa4c:	e5e4d499 	.word	0xe5e4d499
   1fa50:	f7ee4628 	.word	0xf7ee4628
   1fa54:	4606f94d 	.word	0x4606f94d
   1fa58:	300c6960 	.word	0x300c6960
   1fa5c:	f948f7ee 	.word	0xf948f7ee
   1fa60:	f47f4286 	.word	0xf47f4286
   1fa64:	6961ade0 	.word	0x6961ade0
   1fa68:	310c4628 	.word	0x310c4628
   1fa6c:	f936f7ee 	.word	0xf936f7ee
   1fa70:	f47f2800 	.word	0xf47f2800
   1fa74:	6963add8 	.word	0x6963add8
   1fa78:	07976f1a 	.word	0x07976f1a
   1fa7c:	e5d2d49b 	.word	0xe5d2d49b
   1fa80:	f7ee4628 	.word	0xf7ee4628
   1fa84:	4606f935 	.word	0x4606f935
   1fa88:	300c69a0 	.word	0x300c69a0
   1fa8c:	f930f7ee 	.word	0xf930f7ee
   1fa90:	f47f4286 	.word	0xf47f4286
   1fa94:	69a1adce 	.word	0x69a1adce
   1fa98:	310c4628 	.word	0x310c4628
   1fa9c:	f91ef7ee 	.word	0xf91ef7ee
   1faa0:	f47f2800 	.word	0xf47f2800
   1faa4:	69a3adc6 	.word	0x69a3adc6
   1faa8:	07966f1a 	.word	0x07966f1a
   1faac:	e5c0d49d 	.word	0xe5c0d49d
   1fab0:	f7ee4628 	.word	0xf7ee4628
   1fab4:	4606f91d 	.word	0x4606f91d
   1fab8:	300c69e0 	.word	0x300c69e0
   1fabc:	f918f7ee 	.word	0xf918f7ee
   1fac0:	f47f4286 	.word	0xf47f4286
   1fac4:	69e1adbc 	.word	0x69e1adbc
   1fac8:	310c4628 	.word	0x310c4628
   1facc:	f906f7ee 	.word	0xf906f7ee
   1fad0:	f47f2800 	.word	0xf47f2800
   1fad4:	69e3adb4 	.word	0x69e3adb4
   1fad8:	07906f1a 	.word	0x07906f1a
   1fadc:	adaff57f 	.word	0xadaff57f
   1fae0:	e6ea2607 	.word	0xe6ea2607
   1fae4:	f7ee4628 	.word	0xf7ee4628
   1fae8:	4606f903 	.word	0x4606f903
   1faec:	300c6a20 	.word	0x300c6a20
   1faf0:	f8fef7ee 	.word	0xf8fef7ee
   1faf4:	f47f4286 	.word	0xf47f4286
   1faf8:	6a21ada8 	.word	0x6a21ada8
   1fafc:	310c4628 	.word	0x310c4628
   1fb00:	f8ecf7ee 	.word	0xf8ecf7ee
   1fb04:	f47f2800 	.word	0xf47f2800
   1fb08:	6a23ada0 	.word	0x6a23ada0
   1fb0c:	07916f1a 	.word	0x07916f1a
   1fb10:	ad9bf57f 	.word	0xad9bf57f
   1fb14:	e6d02608 	.word	0xe6d02608
   1fb18:	f7ee4628 	.word	0xf7ee4628
   1fb1c:	4606f8e9 	.word	0x4606f8e9
   1fb20:	300c69e0 	.word	0x300c69e0
   1fb24:	f8e4f7ee 	.word	0xf8e4f7ee
   1fb28:	f47f4286 	.word	0xf47f4286
   1fb2c:	69e1adda 	.word	0x69e1adda
   1fb30:	310c4628 	.word	0x310c4628
   1fb34:	f8d2f7ee 	.word	0xf8d2f7ee
   1fb38:	f47f2800 	.word	0xf47f2800
   1fb3c:	69e3add2 	.word	0x69e3add2
   1fb40:	07d06f1a 	.word	0x07d06f1a
   1fb44:	e5ccd4cc 	.word	0xe5ccd4cc
   1fb48:	f7ee4628 	.word	0xf7ee4628
   1fb4c:	4606f8d1 	.word	0x4606f8d1
   1fb50:	300c6a20 	.word	0x300c6a20
   1fb54:	f8ccf7ee 	.word	0xf8ccf7ee
   1fb58:	f47f4286 	.word	0xf47f4286
   1fb5c:	6a21adc8 	.word	0x6a21adc8
   1fb60:	310c4628 	.word	0x310c4628
   1fb64:	f8baf7ee 	.word	0xf8baf7ee
   1fb68:	f47f2800 	.word	0xf47f2800
   1fb6c:	6a23adc0 	.word	0x6a23adc0
   1fb70:	07d16f1a 	.word	0x07d16f1a
   1fb74:	e5bad4ce 	.word	0xe5bad4ce
   1fb78:	f7ee4628 	.word	0xf7ee4628
   1fb7c:	4606f8b9 	.word	0x4606f8b9
   1fb80:	300c68a0 	.word	0x300c68a0
   1fb84:	f8b4f7ee 	.word	0xf8b4f7ee
   1fb88:	f47f4286 	.word	0xf47f4286
   1fb8c:	68a1ad8c 	.word	0x68a1ad8c
   1fb90:	310c4628 	.word	0x310c4628
   1fb94:	f8a2f7ee 	.word	0xf8a2f7ee
   1fb98:	f47f2800 	.word	0xf47f2800
   1fb9c:	68a3ad84 	.word	0x68a3ad84
   1fba0:	07d06f1a 	.word	0x07d06f1a
   1fba4:	ad7ff57f 	.word	0xad7ff57f
   1fba8:	e6862602 	.word	0xe6862602
   1fbac:	f7ee4628 	.word	0xf7ee4628
   1fbb0:	4606f89f 	.word	0x4606f89f
   1fbb4:	300c68a0 	.word	0x300c68a0
   1fbb8:	f89af7ee 	.word	0xf89af7ee
   1fbbc:	f47f4286 	.word	0xf47f4286
   1fbc0:	68a1ad20 	.word	0x68a1ad20
   1fbc4:	310c4628 	.word	0x310c4628
   1fbc8:	f888f7ee 	.word	0xf888f7ee
   1fbcc:	f47f2800 	.word	0xf47f2800
   1fbd0:	68a3ad18 	.word	0x68a3ad18
   1fbd4:	07906f1a 	.word	0x07906f1a
   1fbd8:	e512d4e6 	.word	0xe512d4e6
   1fbdc:	20021848 	.word	0x20021848
   1fbe0:	00026bf0 	.word	0x00026bf0
   1fbe4:	00026bec 	.word	0x00026bec
   1fbe8:	00026c00 	.word	0x00026c00
   1fbec:	20021844 	.word	0x20021844
   1fbf0:	f7ee4628 	.word	0xf7ee4628
   1fbf4:	4606f87d 	.word	0x4606f87d
   1fbf8:	300c6860 	.word	0x300c6860
   1fbfc:	f878f7ee 	.word	0xf878f7ee
   1fc00:	f47f4286 	.word	0xf47f4286
   1fc04:	6861acf8 	.word	0x6861acf8
   1fc08:	310c4628 	.word	0x310c4628
   1fc0c:	f866f7ee 	.word	0xf866f7ee
   1fc10:	f47f2800 	.word	0xf47f2800
   1fc14:	6863acf0 	.word	0x6863acf0
   1fc18:	07966f1a 	.word	0x07966f1a
   1fc1c:	acebf57f 	.word	0xacebf57f
   1fc20:	e64a2601 	.word	0xe64a2601
   1fc24:	f7ee4628 	.word	0xf7ee4628
   1fc28:	4606f863 	.word	0x4606f863
   1fc2c:	300c6860 	.word	0x300c6860
   1fc30:	f85ef7ee 	.word	0xf85ef7ee
   1fc34:	f47f4286 	.word	0xf47f4286
   1fc38:	6861ad30 	.word	0x6861ad30
   1fc3c:	310c4628 	.word	0x310c4628
   1fc40:	f84cf7ee 	.word	0xf84cf7ee
   1fc44:	f47f2800 	.word	0xf47f2800
   1fc48:	6863ad28 	.word	0x6863ad28
   1fc4c:	07d66f1a 	.word	0x07d66f1a
   1fc50:	e522d4e6 	.word	0xe522d4e6
   1fc54:	f7ee4608 	.word	0xf7ee4608
   1fc58:	4606f84b 	.word	0x4606f84b
   1fc5c:	300c6820 	.word	0x300c6820
   1fc60:	f846f7ee 	.word	0xf846f7ee
   1fc64:	f47f4286 	.word	0xf47f4286
   1fc68:	6821acc0 	.word	0x6821acc0
   1fc6c:	310c4628 	.word	0x310c4628
   1fc70:	f834f7ee 	.word	0xf834f7ee
   1fc74:	28004606 	.word	0x28004606
   1fc78:	acb7f47f 	.word	0xacb7f47f
   1fc7c:	6f1a6823 	.word	0x6f1a6823
   1fc80:	f53f0797 	.word	0xf53f0797
   1fc84:	e4b0ae1a 	.word	0xe4b0ae1a
   1fc88:	f7ee4608 	.word	0xf7ee4608
   1fc8c:	4606f831 	.word	0x4606f831
   1fc90:	300c6820 	.word	0x300c6820
   1fc94:	f82cf7ee 	.word	0xf82cf7ee
   1fc98:	f47f4286 	.word	0xf47f4286
   1fc9c:	6821acf8 	.word	0x6821acf8
   1fca0:	310c4628 	.word	0x310c4628
   1fca4:	f81af7ee 	.word	0xf81af7ee
   1fca8:	28004606 	.word	0x28004606
   1fcac:	aceff47f 	.word	0xaceff47f
   1fcb0:	6f1a6823 	.word	0x6f1a6823
   1fcb4:	f53f07d7 	.word	0xf53f07d7
   1fcb8:	e4e8ae00 	.word	0xe4e8ae00
   1fcbc:	30fff04f 	.word	0x30fff04f
   1fcc0:	480b4770 	.word	0x480b4770
   1fcc4:	f814f7ee 	.word	0xf814f7ee
   1fcc8:	4602490a 	.word	0x4602490a
   1fccc:	f0044808 	.word	0xf0044808
   1fcd0:	b930ff2d 	.word	0xb930ff2d
   1fcd4:	f7f12008 	.word	0xf7f12008
   1fcd8:	f854fa43 	.word	0xf854fa43
   1fcdc:	68583026 	.word	0x68583026
   1fce0:	2005e47b 	.word	0x2005e47b
   1fce4:	fa3cf7f1 	.word	0xfa3cf7f1
   1fce8:	3026f854 	.word	0x3026f854
   1fcec:	e4746858 	.word	0xe4746858
   1fcf0:	00026c44 	.word	0x00026c44
   1fcf4:	20021848 	.word	0x20021848

0001fcf8 <bsd_platform_getaddrinfo>:
   1fcf8:	be04f7f7 	.word	0xbe04f7f7

0001fcfc <bsd_platform_freeaddrinfo>:
   1fcfc:	bef8f7f7 	.word	0xbef8f7f7

0001fd00 <bsd_platform_poll>:
   1fd00:	43f0e92d 	.word	0x43f0e92d
   1fd04:	72e2ea42 	.word	0x72e2ea42
   1fd08:	9200b083 	.word	0x9200b083
   1fd0c:	d0482800 	.word	0xd0482800
   1fd10:	2b071e4b 	.word	0x2b071e4b
   1fd14:	4680d845 	.word	0x4680d845
   1fd18:	24004605 	.word	0x24004605
   1fd1c:	07c1eb00 	.word	0x07c1eb00
   1fd20:	682888ab 	.word	0x682888ab
   1fd24:	0303f003 	.word	0x0303f003
   1fd28:	f043a901 	.word	0xf043a901
   1fd2c:	f7f6061c 	.word	0xf7f6061c
   1fd30:	9b01fd1f 	.word	0x9b01fd1f
   1fd34:	40333508 	.word	0x40333508
   1fd38:	3c02f825 	.word	0x3c02f825
   1fd3c:	3401b103 	.word	0x3401b103
   1fd40:	d1ed42af 	.word	0xd1ed42af
   1fd44:	4669bb9c 	.word	0x4669bb9c
   1fd48:	f7f14640 	.word	0xf7f14640
   1fd4c:	4607f979 	.word	0x4607f979
   1fd50:	283cb108 	.word	0x283cb108
   1fd54:	46c1d11d 	.word	0x46c1d11d
   1fd58:	f8b92600 	.word	0xf8b92600
   1fd5c:	f8d93004 	.word	0xf8d93004
   1fd60:	f0030000 	.word	0xf0030000
   1fd64:	a9010303 	.word	0xa9010303
   1fd68:	041cf043 	.word	0x041cf043
   1fd6c:	fd00f7f6 	.word	0xfd00f7f6
   1fd70:	f1099b01 	.word	0xf1099b01
   1fd74:	40230908 	.word	0x40230908
   1fd78:	3c02f829 	.word	0x3c02f829
   1fd7c:	3601b103 	.word	0x3601b103
   1fd80:	d1ea454d 	.word	0xd1ea454d
   1fd84:	2f00b90e 	.word	0x2f00b90e
   1fd88:	4630d0dd 	.word	0x4630d0dd
   1fd8c:	e8bdb003 	.word	0xe8bdb003
   1fd90:	202383f0 	.word	0x202383f0
   1fd94:	f9e4f7f1 	.word	0xf9e4f7f1
   1fd98:	30fff04f 	.word	0x30fff04f
   1fd9c:	e8bdb003 	.word	0xe8bdb003
   1fda0:	201683f0 	.word	0x201683f0
   1fda4:	f9dcf7f1 	.word	0xf9dcf7f1
   1fda8:	30fff04f 	.word	0x30fff04f
   1fdac:	4620e7ee 	.word	0x4620e7ee
   1fdb0:	bf00e7ec 	.word	0xbf00e7ec

0001fdb4 <bsd_platform_fcntl>:
   1fdb4:	4b06b508 	.word	0x4b06b508
   1fdb8:	d0034383 	.word	0xd0034383
   1fdbc:	4008e8bd 	.word	0x4008e8bd
   1fdc0:	bd54f7f6 	.word	0xbd54f7f6
   1fdc4:	f7f1202d 	.word	0xf7f1202d
   1fdc8:	f04ff9cb 	.word	0xf04ff9cb
   1fdcc:	bd0830ff 	.word	0xbd0830ff
   1fdd0:	49765432 	.word	0x49765432

0001fdd4 <stream_handler_init>:
   1fdd4:	4604b510 	.word	0x4604b510
   1fdd8:	f7fd200c 	.word	0xf7fd200c
   1fddc:	60e0fed1 	.word	0x60e0fed1
   1fde0:	2300b128 	.word	0x2300b128
   1fde4:	e8bd6123 	.word	0xe8bd6123
   1fde8:	f7f84010 	.word	0xf7f84010
   1fdec:	2004ba1b 	.word	0x2004ba1b
   1fdf0:	bf00bd10 	.word	0xbf00bd10

0001fdf4 <stream_handler_put>:
   1fdf4:	4606b570 	.word	0x4606b570
   1fdf8:	460d2014 	.word	0x460d2014
   1fdfc:	fec0f7fd 	.word	0xfec0f7fd
   1fe00:	682bb178 	.word	0x682bb178
   1fe04:	60434604 	.word	0x60434604
   1fe08:	4601686b 	.word	0x4601686b
   1fe0c:	68eb6083 	.word	0x68eb6083
   1fe10:	68ab60c3 	.word	0x68ab60c3
   1fe14:	68f06103 	.word	0x68f06103
   1fe18:	fa0ef7f8 	.word	0xfa0ef7f8
   1fe1c:	6868b920 	.word	0x6868b920
   1fe20:	f04fbd70 	.word	0xf04fbd70
   1fe24:	bd7030ff 	.word	0xbd7030ff
   1fe28:	f7fd4620 	.word	0xf7fd4620
   1fe2c:	f04ffec7 	.word	0xf04ffec7
   1fe30:	bd7030ff 	.word	0xbd7030ff

0001fe34 <stream_handler_get>:
   1fe34:	4ff0e92d 	.word	0x4ff0e92d
   1fe38:	b0874682 	.word	0xb0874682
   1fe3c:	468968c0 	.word	0x468968c0
   1fe40:	f7f84693 	.word	0xf7f84693
   1fe44:	2800fa19 	.word	0x2800fa19
   1fe48:	4605d072 	.word	0x4605d072
   1fe4c:	0008f8d9 	.word	0x0008f8d9
   1fe50:	692bb120 	.word	0x692bb120
   1fe54:	68eab113 	.word	0x68eab113
   1fe58:	d15c2a00 	.word	0xd15c2a00
   1fe5c:	f8c92300 	.word	0xf8c92300
   1fe60:	f8d9300c 	.word	0xf8d9300c
   1fe64:	f8d92000 	.word	0xf8d92000
   1fe68:	f8da8004 	.word	0xf8da8004
   1fe6c:	92011010 	.word	0x92011010
   1fe70:	0f00f1b8 	.word	0x0f00f1b8
   1fe74:	f00bd05a 	.word	0xf00bd05a
   1fe78:	24000308 	.word	0x24000308
   1fe7c:	e0109300 	.word	0xe0109300
   1fe80:	3010f8da 	.word	0x3010f8da
   1fe84:	f8ca443b 	.word	0xf8ca443b
   1fe88:	46283010 	.word	0x46283010
   1fe8c:	f9fcf7f8 	.word	0xf9fcf7f8
   1fe90:	4605443c 	.word	0x4605443c
   1fe94:	d0382800 	.word	0xd0382800
   1fe98:	d93645a0 	.word	0xd93645a0
   1fe9c:	f8d92100 	.word	0xf8d92100
   1fea0:	68ae2000 	.word	0x68ae2000
   1fea4:	0b04eba8 	.word	0x0b04eba8
   1fea8:	455e1a76 	.word	0x455e1a76
   1feac:	bf284637 	.word	0xbf284637
   1feb0:	b132465f 	.word	0xb132465f
   1feb4:	9b016868 	.word	0x9b016868
   1feb8:	463a4401 	.word	0x463a4401
   1febc:	f0041918 	.word	0xf0041918
   1fec0:	9b00fce0 	.word	0x9b00fce0
   1fec4:	d1e02b00 	.word	0xd1e02b00
   1fec8:	d8d9455e 	.word	0xd8d9455e
   1fecc:	000cf8da 	.word	0x000cf8da
   1fed0:	f9c8f7f8 	.word	0xf9c8f7f8
   1fed4:	b1704606 	.word	0xb1704606
   1fed8:	2301e9d0 	.word	0x2301e9d0
   1fedc:	0103e9d0 	.word	0x0103e9d0
   1fee0:	2302e9cd 	.word	0x2302e9cd
   1fee4:	1004e9cd 	.word	0x1004e9cd
   1fee8:	3101e9da 	.word	0x3101e9da
   1feec:	4798a802 	.word	0x4798a802
   1fef0:	f7fd4630 	.word	0xf7fd4630
   1fef4:	2300fe63 	.word	0x2300fe63
   1fef8:	f8ca4628 	.word	0xf8ca4628
   1fefc:	f7f83010 	.word	0xf7f83010
   1ff00:	443cf9c3 	.word	0x443cf9c3
   1ff04:	28004605 	.word	0x28004605
   1ff08:	4620d1c6 	.word	0x4620d1c6
   1ff0c:	4004f8c9 	.word	0x4004f8c9
   1ff10:	e8bdb007 	.word	0xe8bdb007
   1ff14:	f8d98ff0 	.word	0xf8d98ff0
   1ff18:	429a300c 	.word	0x429a300c
   1ff1c:	461abf28 	.word	0x461abf28
   1ff20:	200cf8c9 	.word	0x200cf8c9
   1ff24:	f0046929 	.word	0xf0046929
   1ff28:	e79afcac 	.word	0xe79afcac
   1ff2c:	e7ec4644 	.word	0xe7ec4644
   1ff30:	30fff04f 	.word	0x30fff04f
   1ff34:	bf00e7ec 	.word	0xbf00e7ec

0001ff38 <stream_handler_available>:
   1ff38:	4604b510 	.word	0x4604b510
   1ff3c:	f7f868c0 	.word	0xf7f868c0
   1ff40:	b150f99b 	.word	0xb150f99b
   1ff44:	42646924 	.word	0x42646924
   1ff48:	441c6883 	.word	0x441c6883
   1ff4c:	f99cf7f8 	.word	0xf99cf7f8
   1ff50:	d1f92800 	.word	0xd1f92800
   1ff54:	70e4ea24 	.word	0x70e4ea24
   1ff58:	f04fbd10 	.word	0xf04fbd10
   1ff5c:	bd1030ff 	.word	0xbd1030ff

0001ff60 <stream_handler_flush>:
   1ff60:	4605b530 	.word	0x4605b530
   1ff64:	b08568c0 	.word	0xb08568c0
   1ff68:	e01ab9a8 	.word	0xe01ab9a8
   1ff6c:	f7f868e8 	.word	0xf7f868e8
   1ff70:	4604f979 	.word	0x4604f979
   1ff74:	e9d0b170 	.word	0xe9d0b170
   1ff78:	e9d40101 	.word	0xe9d40101
   1ff7c:	e9cd3203 	.word	0xe9cd3203
   1ff80:	e9cd0100 	.word	0xe9cd0100
   1ff84:	e9d52302 	.word	0xe9d52302
   1ff88:	46683101 	.word	0x46683101
   1ff8c:	46204798 	.word	0x46204798
   1ff90:	fe14f7fd 	.word	0xfe14f7fd
   1ff94:	f7f868e8 	.word	0xf7f868e8
   1ff98:	2800f975 	.word	0x2800f975
   1ff9c:	b005d1e6 	.word	0xb005d1e6
   1ffa0:	2008bd30 	.word	0x2008bd30
   1ffa4:	bd30b005 	.word	0xbd30b005

0001ffa8 <stream_handler_free>:
   1ffa8:	4605b530 	.word	0x4605b530
   1ffac:	b08568c0 	.word	0xb08568c0
   1ffb0:	e01cb9a0 	.word	0xe01cb9a0
   1ffb4:	f956f7f8 	.word	0xf956f7f8
   1ffb8:	b1704604 	.word	0xb1704604
   1ffbc:	0101e9d0 	.word	0x0101e9d0
   1ffc0:	3203e9d4 	.word	0x3203e9d4
   1ffc4:	0100e9cd 	.word	0x0100e9cd
   1ffc8:	2302e9cd 	.word	0x2302e9cd
   1ffcc:	3101e9d5 	.word	0x3101e9d5
   1ffd0:	47984668 	.word	0x47984668
   1ffd4:	f7fd4620 	.word	0xf7fd4620
   1ffd8:	68e8fdf1 	.word	0x68e8fdf1
   1ffdc:	f952f7f8 	.word	0xf952f7f8
   1ffe0:	68e84604 	.word	0x68e84604
   1ffe4:	d1e52c00 	.word	0xd1e52c00
   1ffe8:	fde8f7fd 	.word	0xfde8f7fd
   1ffec:	b00560ec 	.word	0xb00560ec
   1fff0:	bf00bd30 	.word	0xbf00bd30

0001fff4 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1fff4:	4a07      	ldr	r2, [pc, #28]	; (20014 <__kernel_ram_size+0x14>)
   1fff6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1fffa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1fffe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   20002:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   20006:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   2000a:	4b03      	ldr	r3, [pc, #12]	; (20018 <__kernel_ram_size+0x18>)
   2000c:	4a03      	ldr	r2, [pc, #12]	; (2001c <__kernel_ram_size+0x1c>)
   2000e:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   20010:	4770      	bx	lr
   20012:	bf00      	nop
   20014:	e000ed00 	.word	0xe000ed00
   20018:	2002496c 	.word	0x2002496c
   2001c:	03d09000 	.word	0x03d09000

00020020 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   20020:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   20022:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   20024:	4b08      	ldr	r3, [pc, #32]	; (20048 <z_sys_device_do_config_level+0x28>)
   20026:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2002a:	3001      	adds	r0, #1
   2002c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   20030:	42a5      	cmp	r5, r4
   20032:	d800      	bhi.n	20036 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   20034:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   20036:	6823      	ldr	r3, [r4, #0]
   20038:	4620      	mov	r0, r4
   2003a:	685b      	ldr	r3, [r3, #4]
   2003c:	4798      	blx	r3
		if (retval != 0) {
   2003e:	b100      	cbz	r0, 20042 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   20040:	6066      	str	r6, [r4, #4]
								info++) {
   20042:	340c      	adds	r4, #12
   20044:	e7f4      	b.n	20030 <z_sys_device_do_config_level+0x10>
   20046:	bf00      	nop
   20048:	00026c58 	.word	0x00026c58

0002004c <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   2004c:	4b10      	ldr	r3, [pc, #64]	; (20090 <z_impl_device_get_binding+0x44>)
{
   2004e:	b570      	push	{r4, r5, r6, lr}
   20050:	4605      	mov	r5, r0
   20052:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   20054:	4c0f      	ldr	r4, [pc, #60]	; (20094 <z_impl_device_get_binding+0x48>)
   20056:	429c      	cmp	r4, r3
   20058:	d104      	bne.n	20064 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   2005a:	4c0e      	ldr	r4, [pc, #56]	; (20094 <z_impl_device_get_binding+0x48>)
   2005c:	42b4      	cmp	r4, r6
   2005e:	d109      	bne.n	20074 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   20060:	2400      	movs	r4, #0
   20062:	e012      	b.n	2008a <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   20064:	6862      	ldr	r2, [r4, #4]
   20066:	b11a      	cbz	r2, 20070 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   20068:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   2006a:	6812      	ldr	r2, [r2, #0]
   2006c:	42aa      	cmp	r2, r5
   2006e:	d00c      	beq.n	2008a <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   20070:	340c      	adds	r4, #12
   20072:	e7f0      	b.n	20056 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   20074:	6863      	ldr	r3, [r4, #4]
   20076:	b90b      	cbnz	r3, 2007c <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   20078:	340c      	adds	r4, #12
   2007a:	e7ef      	b.n	2005c <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   2007c:	6823      	ldr	r3, [r4, #0]
   2007e:	4628      	mov	r0, r5
   20080:	6819      	ldr	r1, [r3, #0]
   20082:	f7ed fe2b 	bl	dcdc <strcmp>
   20086:	2800      	cmp	r0, #0
   20088:	d1f6      	bne.n	20078 <z_impl_device_get_binding+0x2c>
}
   2008a:	4620      	mov	r0, r4
   2008c:	bd70      	pop	{r4, r5, r6, pc}
   2008e:	bf00      	nop
   20090:	20024bfc 	.word	0x20024bfc
   20094:	20024b48 	.word	0x20024b48

00020098 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   20098:	4b01      	ldr	r3, [pc, #4]	; (200a0 <z_impl_z_errno+0x8>)
   2009a:	6898      	ldr	r0, [r3, #8]
}
   2009c:	3054      	adds	r0, #84	; 0x54
   2009e:	4770      	bx	lr
   200a0:	200222f4 	.word	0x200222f4

000200a4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   200a4:	b510      	push	{r4, lr}
   200a6:	4604      	mov	r4, r0
	z_impl_log_panic();
   200a8:	f7ef f832 	bl	f110 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   200ac:	2301      	movs	r3, #1
   200ae:	f04f 0100 	mov.w	r1, #0
   200b2:	4a08      	ldr	r2, [pc, #32]	; (200d4 <k_sys_fatal_error_handler+0x30>)
   200b4:	f363 0102 	bfi	r1, r3, #0, #3
   200b8:	4b07      	ldr	r3, [pc, #28]	; (200d8 <k_sys_fatal_error_handler+0x34>)
   200ba:	f36f 01c5 	bfc	r1, #3, #3
   200be:	1a9b      	subs	r3, r3, r2
   200c0:	08db      	lsrs	r3, r3, #3
   200c2:	4806      	ldr	r0, [pc, #24]	; (200dc <k_sys_fatal_error_handler+0x38>)
   200c4:	f363 118f 	bfi	r1, r3, #6, #10
   200c8:	f002 ffb1 	bl	2302e <log_0>
	z_arch_system_halt(reason);
   200cc:	4620      	mov	r0, r4
   200ce:	f004 f96d 	bl	243ac <z_arch_system_halt>
   200d2:	bf00      	nop
   200d4:	000258c0 	.word	0x000258c0
   200d8:	000258e8 	.word	0x000258e8
   200dc:	0002782f 	.word	0x0002782f

000200e0 <z_fatal_error>:
	z_arch_system_halt(reason);
}
/* LCOV_EXCL_STOP */

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   200e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   200e4:	4606      	mov	r6, r0
   200e6:	4688      	mov	r8, r1
	return z_impl_k_current_get();
   200e8:	f000 fcc4 	bl	20a74 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s", reason, reason_to_str(reason));
   200ec:	2201      	movs	r2, #1
   200ee:	f04f 0300 	mov.w	r3, #0
   200f2:	4c1e      	ldr	r4, [pc, #120]	; (2016c <z_fatal_error+0x8c>)
   200f4:	f362 0302 	bfi	r3, r2, #0, #3
   200f8:	4a1d      	ldr	r2, [pc, #116]	; (20170 <z_fatal_error+0x90>)
   200fa:	2e04      	cmp	r6, #4
   200fc:	eba4 0402 	sub.w	r4, r4, r2
   20100:	bf98      	it	ls
   20102:	4a1c      	ldrls	r2, [pc, #112]	; (20174 <z_fatal_error+0x94>)
   20104:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   20108:	f36f 03c5 	bfc	r3, #3, #3
   2010c:	4607      	mov	r7, r0
   2010e:	f364 138f 	bfi	r3, r4, #6, #10
   20112:	bf94      	ite	ls
   20114:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   20118:	4a17      	ldrhi	r2, [pc, #92]	; (20178 <z_fatal_error+0x98>)
   2011a:	4818      	ldr	r0, [pc, #96]	; (2017c <z_fatal_error+0x9c>)
   2011c:	4631      	mov	r1, r6
   2011e:	f002 ffa7 	bl	23070 <log_2>
	 * if (k_is_in_isr()) {
	 *     LOG_ERR("Fault during interrupt handling\n");
	 * }
	 */

	LOG_ERR("Current thread: %p (%s)", thread,
   20122:	f04f 0500 	mov.w	r5, #0
   20126:	2301      	movs	r3, #1
   20128:	f363 0502 	bfi	r5, r3, #0, #3
   2012c:	f36f 05c5 	bfc	r5, #3, #3
	const char *thread_name = k_thread_name_get(thread);
   20130:	4638      	mov	r0, r7
	LOG_ERR("Current thread: %p (%s)", thread,
   20132:	f364 158f 	bfi	r5, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   20136:	f004 fa95 	bl	24664 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   2013a:	b1a8      	cbz	r0, 20168 <z_fatal_error+0x88>
   2013c:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   2013e:	4b10      	ldr	r3, [pc, #64]	; (20180 <z_fatal_error+0xa0>)
   20140:	2a00      	cmp	r2, #0
   20142:	bf08      	it	eq
   20144:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   20146:	f7ee fed5 	bl	eef4 <log_strdup>
   2014a:	462b      	mov	r3, r5
   2014c:	4602      	mov	r2, r0
   2014e:	4639      	mov	r1, r7
   20150:	480c      	ldr	r0, [pc, #48]	; (20184 <z_fatal_error+0xa4>)
   20152:	f002 ff8d 	bl	23070 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   20156:	4641      	mov	r1, r8
   20158:	4630      	mov	r0, r6
   2015a:	f7ff ffa3 	bl	200a4 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
   2015e:	4638      	mov	r0, r7
		/* FIXME: #17656 */
		__ASSERT(!k_is_in_isr(),
			 "Attempted to recover from a fatal error in ISR");
	}
	k_thread_abort(thread);
}
   20160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20164:	f7f0 b962 	b.w	1042c <z_impl_k_thread_abort>
		thread_name = "unknown";
   20168:	4805      	ldr	r0, [pc, #20]	; (20180 <z_fatal_error+0xa0>)
   2016a:	e7ec      	b.n	20146 <z_fatal_error+0x66>
   2016c:	000258e8 	.word	0x000258e8
   20170:	000258c0 	.word	0x000258c0
   20174:	00026c70 	.word	0x00026c70
   20178:	00027888 	.word	0x00027888
   2017c:	0002789e 	.word	0x0002789e
   20180:	00027896 	.word	0x00027896
   20184:	000278bc 	.word	0x000278bc

00020188 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   20188:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   2018a:	4d0b      	ldr	r5, [pc, #44]	; (201b8 <idle+0x30>)
	__asm__ volatile(
   2018c:	f04f 0220 	mov.w	r2, #32
   20190:	f3ef 8311 	mrs	r3, BASEPRI
   20194:	f382 8811 	msr	BASEPRI, r2
   20198:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   2019c:	f004 faa1 	bl	246e2 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   201a0:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   201a2:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   201a4:	2802      	cmp	r0, #2
   201a6:	bfd8      	it	le
   201a8:	4608      	movle	r0, r1
   201aa:	f004 faaa 	bl	24702 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   201ae:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	z_arch_cpu_idle();
   201b0:	f7ef fcbc 	bl	fb2c <z_arch_cpu_idle>
   201b4:	e7ea      	b.n	2018c <idle+0x4>
   201b6:	bf00      	nop
   201b8:	200222f4 	.word	0x200222f4

000201bc <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   201bc:	4802      	ldr	r0, [pc, #8]	; (201c8 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   201be:	4a03      	ldr	r2, [pc, #12]	; (201cc <z_bss_zero+0x10>)
   201c0:	2100      	movs	r1, #0
   201c2:	1a12      	subs	r2, r2, r0
   201c4:	f004 bb68 	b.w	24898 <memset>
   201c8:	20020000 	.word	0x20020000
   201cc:	200227fc 	.word	0x200227fc

000201d0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   201d0:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   201d2:	4806      	ldr	r0, [pc, #24]	; (201ec <z_data_copy+0x1c>)
   201d4:	4a06      	ldr	r2, [pc, #24]	; (201f0 <z_data_copy+0x20>)
   201d6:	4907      	ldr	r1, [pc, #28]	; (201f4 <z_data_copy+0x24>)
   201d8:	1a12      	subs	r2, r2, r0
   201da:	f004 fb52 	bl	24882 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   201de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   201e2:	4a05      	ldr	r2, [pc, #20]	; (201f8 <z_data_copy+0x28>)
   201e4:	4905      	ldr	r1, [pc, #20]	; (201fc <z_data_copy+0x2c>)
   201e6:	4806      	ldr	r0, [pc, #24]	; (20200 <z_data_copy+0x30>)
   201e8:	f004 bb4b 	b.w	24882 <memcpy>
   201ec:	20024914 	.word	0x20024914
   201f0:	20024c9c 	.word	0x20024c9c
   201f4:	00027ab8 	.word	0x00027ab8
   201f8:	00000000 	.word	0x00000000
   201fc:	00027ab8 	.word	0x00027ab8
   20200:	20020000 	.word	0x20020000

00020204 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   20204:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   20206:	2002      	movs	r0, #2
   20208:	f7ff ff0a 	bl	20020 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   2020c:	4807      	ldr	r0, [pc, #28]	; (2022c <bg_thread_main+0x28>)
   2020e:	f002 fedb 	bl	22fc8 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   20212:	2003      	movs	r0, #3
   20214:	f7ff ff04 	bl	20020 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   20218:	f000 fcf2 	bl	20c00 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   2021c:	f7ee fbae 	bl	e97c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   20220:	4a03      	ldr	r2, [pc, #12]	; (20230 <bg_thread_main+0x2c>)
   20222:	7b13      	ldrb	r3, [r2, #12]
   20224:	f023 0301 	bic.w	r3, r3, #1
   20228:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2022a:	bd08      	pop	{r3, pc}
   2022c:	000278d4 	.word	0x000278d4
   20230:	20021a20 	.word	0x20021a20

00020234 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   20234:	b580      	push	{r7, lr}
   20236:	b0b2      	sub	sp, #200	; 0xc8
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   20238:	f7ee fdb0 	bl	ed9c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   2023c:	4b33      	ldr	r3, [pc, #204]	; (2030c <z_cstart+0xd8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2023e:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   20242:	2400      	movs	r4, #0
   20244:	23e0      	movs	r3, #224	; 0xe0
   20246:	4d32      	ldr	r5, [pc, #200]	; (20310 <z_cstart+0xdc>)

	/* perform any architecture-specific initialization */
	z_arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   20248:	2701      	movs	r7, #1
   2024a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   2024e:	77ec      	strb	r4, [r5, #31]
   20250:	762c      	strb	r4, [r5, #24]
   20252:	766c      	strb	r4, [r5, #25]
   20254:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   20256:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   20258:	4e2e      	ldr	r6, [pc, #184]	; (20314 <z_cstart+0xe0>)
   2025a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2025e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void z_arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   20260:	f7f0 f8d0 	bl	10404 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   20264:	f7ef fc5c 	bl	fb20 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   20268:	f04f 33ff 	mov.w	r3, #4294967295
   2026c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2026e:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   20270:	ab06      	add	r3, sp, #24
   20272:	22b0      	movs	r2, #176	; 0xb0
   20274:	4621      	mov	r1, r4
   20276:	4618      	mov	r0, r3
   20278:	f004 fb0e 	bl	24898 <memset>
	_current = &dummy_thread;
   2027c:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2027e:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   20280:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   20284:	f7ff fecc 	bl	20020 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   20288:	4638      	mov	r0, r7
   2028a:	f7ff fec9 	bl	20020 <z_sys_device_do_config_level>
	_kernel.ready_q.cache = &z_main_thread;
   2028e:	4d22      	ldr	r5, [pc, #136]	; (20318 <z_cstart+0xe4>)
	z_sched_init();
   20290:	f000 fb96 	bl	209c0 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   20294:	4b21      	ldr	r3, [pc, #132]	; (2031c <z_cstart+0xe8>)
   20296:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2029a:	e9cd 7304 	strd	r7, r3, [sp, #16]
   2029e:	e9cd 4402 	strd	r4, r4, [sp, #8]
   202a2:	4b1f      	ldr	r3, [pc, #124]	; (20320 <z_cstart+0xec>)
   202a4:	e9cd 4400 	strd	r4, r4, [sp]
   202a8:	491e      	ldr	r1, [pc, #120]	; (20324 <z_cstart+0xf0>)
   202aa:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   202ac:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   202ae:	f000 fc5d 	bl	20b6c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   202b2:	7b6b      	ldrb	r3, [r5, #13]
   202b4:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   202b8:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   202bc:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   202be:	d104      	bne.n	202ca <z_cstart+0x96>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   202c0:	69ab      	ldr	r3, [r5, #24]
   202c2:	b913      	cbnz	r3, 202ca <z_cstart+0x96>
		z_add_thread_to_ready_q(thread);
   202c4:	4628      	mov	r0, r5
   202c6:	f000 f9fb 	bl	206c0 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   202ca:	4b17      	ldr	r3, [pc, #92]	; (20328 <z_cstart+0xf4>)
   202cc:	2201      	movs	r2, #1
   202ce:	9305      	str	r3, [sp, #20]
   202d0:	230f      	movs	r3, #15
   202d2:	e9cd 3203 	strd	r3, r2, [sp, #12]
   202d6:	2300      	movs	r3, #0
   202d8:	4d14      	ldr	r5, [pc, #80]	; (2032c <z_cstart+0xf8>)
   202da:	e9cd 3301 	strd	r3, r3, [sp, #4]
   202de:	9300      	str	r3, [sp, #0]
   202e0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   202e4:	4b12      	ldr	r3, [pc, #72]	; (20330 <z_cstart+0xfc>)
   202e6:	4913      	ldr	r1, [pc, #76]	; (20334 <z_cstart+0x100>)
   202e8:	4628      	mov	r0, r5
   202ea:	f000 fc3f 	bl	20b6c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   202ee:	7b6b      	ldrb	r3, [r5, #13]
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   202f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   202f4:	f023 0304 	bic.w	r3, r3, #4
   202f8:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   202fa:	4b0f      	ldr	r3, [pc, #60]	; (20338 <z_cstart+0x104>)
   202fc:	4909      	ldr	r1, [pc, #36]	; (20324 <z_cstart+0xf0>)
	list->tail = (sys_dnode_t *)list;
   202fe:	e9c6 3306 	strd	r3, r3, [r6, #24]
   20302:	4805      	ldr	r0, [pc, #20]	; (20318 <z_cstart+0xe4>)
   20304:	4b06      	ldr	r3, [pc, #24]	; (20320 <z_cstart+0xec>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   20306:	60f5      	str	r5, [r6, #12]
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   20308:	f7ef fcc8 	bl	fc9c <z_arch_switch_to_main_thread>
   2030c:	20024440 	.word	0x20024440
   20310:	e000ed00 	.word	0xe000ed00
   20314:	200222f4 	.word	0x200222f4
   20318:	20021a20 	.word	0x20021a20
   2031c:	0002791e 	.word	0x0002791e
   20320:	00020205 	.word	0x00020205
   20324:	20022b00 	.word	0x20022b00
   20328:	00027923 	.word	0x00027923
   2032c:	20021970 	.word	0x20021970
   20330:	00020189 	.word	0x00020189
   20334:	20023b00 	.word	0x20023b00
   20338:	2002230c 	.word	0x2002230c

0002033c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   2033c:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   2033e:	2400      	movs	r4, #0
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20340:	4b0a      	ldr	r3, [pc, #40]	; (2036c <init_mem_slab_module+0x30>)
   20342:	480b      	ldr	r0, [pc, #44]	; (20370 <init_mem_slab_module+0x34>)
   20344:	4283      	cmp	r3, r0
   20346:	d301      	bcc.n	2034c <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   20348:	2000      	movs	r0, #0
   2034a:	bd70      	pop	{r4, r5, r6, pc}
	for (j = 0U; j < slab->num_blocks; j++) {
   2034c:	2100      	movs	r1, #0
	p = slab->buffer;
   2034e:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   20350:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   20352:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   20354:	42a9      	cmp	r1, r5
   20356:	d101      	bne.n	2035c <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20358:	331c      	adds	r3, #28
   2035a:	e7f3      	b.n	20344 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   2035c:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2035e:	3101      	adds	r1, #1
		*(char **)p = slab->free_list;
   20360:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   20362:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   20364:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
   20366:	4432      	add	r2, r6
   20368:	e7f4      	b.n	20354 <init_mem_slab_module+0x18>
   2036a:	bf00      	nop
   2036c:	20024bfc 	.word	0x20024bfc
   20370:	20024bfc 	.word	0x20024bfc

00020374 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   20374:	b510      	push	{r4, lr}
   20376:	4613      	mov	r3, r2
   20378:	460c      	mov	r4, r1
   2037a:	f04f 0220 	mov.w	r2, #32
   2037e:	f3ef 8111 	mrs	r1, BASEPRI
   20382:	f382 8811 	msr	BASEPRI, r2
   20386:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   2038a:	6942      	ldr	r2, [r0, #20]
   2038c:	b162      	cbz	r2, 203a8 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   2038e:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   20390:	6943      	ldr	r3, [r0, #20]
   20392:	681b      	ldr	r3, [r3, #0]
   20394:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   20396:	6983      	ldr	r3, [r0, #24]
   20398:	3301      	adds	r3, #1
   2039a:	6183      	str	r3, [r0, #24]
		result = 0;
   2039c:	2000      	movs	r0, #0
	__asm__ volatile(
   2039e:	f381 8811 	msr	BASEPRI, r1
   203a2:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   203a6:	e00d      	b.n	203c4 <k_mem_slab_alloc+0x50>
	} else if (timeout == K_NO_WAIT) {
   203a8:	b91b      	cbnz	r3, 203b2 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   203aa:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   203ac:	f06f 000b 	mvn.w	r0, #11
   203b0:	e7f5      	b.n	2039e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   203b2:	4602      	mov	r2, r0
   203b4:	4804      	ldr	r0, [pc, #16]	; (203c8 <k_mem_slab_alloc+0x54>)
   203b6:	f000 fac1 	bl	2093c <z_pend_curr>
		if (result == 0) {
   203ba:	b918      	cbnz	r0, 203c4 <k_mem_slab_alloc+0x50>
			*mem = _current->base.swap_data;
   203bc:	4b03      	ldr	r3, [pc, #12]	; (203cc <k_mem_slab_alloc+0x58>)
   203be:	689b      	ldr	r3, [r3, #8]
   203c0:	695b      	ldr	r3, [r3, #20]
   203c2:	6023      	str	r3, [r4, #0]
}
   203c4:	bd10      	pop	{r4, pc}
   203c6:	bf00      	nop
   203c8:	200226b5 	.word	0x200226b5
   203cc:	200222f4 	.word	0x200222f4

000203d0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   203d0:	b570      	push	{r4, r5, r6, lr}
   203d2:	4604      	mov	r4, r0
   203d4:	460d      	mov	r5, r1
	__asm__ volatile(
   203d6:	f04f 0320 	mov.w	r3, #32
   203da:	f3ef 8611 	mrs	r6, BASEPRI
   203de:	f383 8811 	msr	BASEPRI, r3
   203e2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   203e6:	f004 f8c6 	bl	24576 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   203ea:	b180      	cbz	r0, 2040e <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
z_arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   203ec:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   203ee:	682a      	ldr	r2, [r5, #0]
   203f0:	6681      	str	r1, [r0, #104]	; 0x68
	thread->base.swap_data = data;
   203f2:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   203f4:	7b42      	ldrb	r2, [r0, #13]
   203f6:	06d2      	lsls	r2, r2, #27
   203f8:	d103      	bne.n	20402 <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
   203fa:	6983      	ldr	r3, [r0, #24]
   203fc:	b90b      	cbnz	r3, 20402 <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
   203fe:	f000 f95f 	bl	206c0 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   20402:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   20404:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   20408:	4807      	ldr	r0, [pc, #28]	; (20428 <k_mem_slab_free+0x58>)
   2040a:	f004 b836 	b.w	2447a <z_reschedule>
		**(char ***)mem = slab->free_list;
   2040e:	682b      	ldr	r3, [r5, #0]
   20410:	6962      	ldr	r2, [r4, #20]
   20412:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   20414:	682b      	ldr	r3, [r5, #0]
   20416:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   20418:	69a3      	ldr	r3, [r4, #24]
   2041a:	3b01      	subs	r3, #1
   2041c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2041e:	f386 8811 	msr	BASEPRI, r6
   20422:	f3bf 8f6f 	isb	sy
}
   20426:	bd70      	pop	{r4, r5, r6, pc}
   20428:	200226b5 	.word	0x200226b5

0002042c <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   2042c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   2042e:	4c07      	ldr	r4, [pc, #28]	; (2044c <init_static_pools+0x20>)
   20430:	4d07      	ldr	r5, [pc, #28]	; (20450 <init_static_pools+0x24>)
   20432:	42ac      	cmp	r4, r5
   20434:	d301      	bcc.n	2043a <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   20436:	2000      	movs	r0, #0
   20438:	bd38      	pop	{r3, r4, r5, pc}
   2043a:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   2043e:	4620      	mov	r0, r4
   20440:	e9c4 3305 	strd	r3, r3, [r4, #20]
   20444:	f002 fa83 	bl	2294e <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   20448:	341c      	adds	r4, #28
   2044a:	e7f2      	b.n	20432 <init_static_pools+0x6>
   2044c:	20024bfc 	.word	0x20024bfc
   20450:	20024c18 	.word	0x20024c18

00020454 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   20454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(z_arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   20458:	1e1c      	subs	r4, r3, #0
{
   2045a:	b085      	sub	sp, #20
   2045c:	4607      	mov	r7, r0
   2045e:	460d      	mov	r5, r1
   20460:	4692      	mov	sl, r2
	if (timeout > 0) {
   20462:	dd3b      	ble.n	204dc <k_mem_pool_alloc+0x88>
	return z_impl_k_uptime_get();
   20464:	f004 f96b 	bl	2473e <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   20468:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
   2046c:	4b1d      	ldr	r3, [pc, #116]	; (204e4 <k_mem_pool_alloc+0x90>)
   2046e:	4e1e      	ldr	r6, [pc, #120]	; (204e8 <k_mem_pool_alloc+0x94>)
   20470:	1afb      	subs	r3, r7, r3
   20472:	109b      	asrs	r3, r3, #2
   20474:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   20476:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   2047a:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   2047c:	ab03      	add	r3, sp, #12
   2047e:	aa02      	add	r2, sp, #8
   20480:	9500      	str	r5, [sp, #0]
   20482:	4651      	mov	r1, sl
   20484:	4638      	mov	r0, r7
   20486:	f002 faae 	bl	229e6 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   2048a:	796b      	ldrb	r3, [r5, #5]
   2048c:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   2048e:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   20490:	f362 0303 	bfi	r3, r2, #0, #4
   20494:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   20496:	686b      	ldr	r3, [r5, #4]
   20498:	9a03      	ldr	r2, [sp, #12]
   2049a:	f362 331f 	bfi	r3, r2, #12, #20
   2049e:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   204a0:	b1c8      	cbz	r0, 204d6 <k_mem_pool_alloc+0x82>
   204a2:	b1c4      	cbz	r4, 204d6 <k_mem_pool_alloc+0x82>
   204a4:	f110 0f0c 	cmn.w	r0, #12
   204a8:	d115      	bne.n	204d6 <k_mem_pool_alloc+0x82>
	__asm__ volatile(
   204aa:	f04f 0320 	mov.w	r3, #32
   204ae:	f3ef 8011 	mrs	r0, BASEPRI
   204b2:	f383 8811 	msr	BASEPRI, r3
   204b6:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(z_arch_irq_lock(), wait_q, timeout);
   204ba:	4622      	mov	r2, r4
   204bc:	4659      	mov	r1, fp
   204be:	f000 fa19 	bl	208f4 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   204c2:	1c63      	adds	r3, r4, #1
   204c4:	d0da      	beq.n	2047c <k_mem_pool_alloc+0x28>
   204c6:	f004 f93a 	bl	2473e <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   204ca:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   204ce:	2c00      	cmp	r4, #0
   204d0:	dcd4      	bgt.n	2047c <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
   204d2:	f06f 000a 	mvn.w	r0, #10
}
   204d6:	b005      	add	sp, #20
   204d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   204dc:	f04f 0800 	mov.w	r8, #0
   204e0:	e7c4      	b.n	2046c <k_mem_pool_alloc+0x18>
   204e2:	bf00      	nop
   204e4:	20024bfc 	.word	0x20024bfc
   204e8:	b6db6db7 	.word	0xb6db6db7

000204ec <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   204ec:	b570      	push	{r4, r5, r6, lr}
   204ee:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   204f0:	6802      	ldr	r2, [r0, #0]
   204f2:	7841      	ldrb	r1, [r0, #1]
   204f4:	4e11      	ldr	r6, [pc, #68]	; (2053c <k_mem_pool_free_id+0x50>)
   204f6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   204fa:	00a4      	lsls	r4, r4, #2
   204fc:	0b12      	lsrs	r2, r2, #12
   204fe:	f001 010f 	and.w	r1, r1, #15
   20502:	1930      	adds	r0, r6, r4
   20504:	f002 fb27 	bl	22b56 <z_sys_mem_pool_block_free>
   20508:	f04f 0320 	mov.w	r3, #32
   2050c:	f3ef 8511 	mrs	r5, BASEPRI
   20510:	f383 8811 	msr	BASEPRI, r3
   20514:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   20518:	f104 0014 	add.w	r0, r4, #20
   2051c:	4430      	add	r0, r6
   2051e:	f004 f857 	bl	245d0 <z_unpend_all>

	if (need_sched != 0) {
   20522:	b128      	cbz	r0, 20530 <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
   20524:	4629      	mov	r1, r5
	} else {
		k_spin_unlock(&lock, key);
	}
}
   20526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   2052a:	4805      	ldr	r0, [pc, #20]	; (20540 <k_mem_pool_free_id+0x54>)
   2052c:	f003 bfa5 	b.w	2447a <z_reschedule>
	__asm__ volatile(
   20530:	f385 8811 	msr	BASEPRI, r5
   20534:	f3bf 8f6f 	isb	sy
}
   20538:	bd70      	pop	{r4, r5, r6, pc}
   2053a:	bf00      	nop
   2053c:	20024bfc 	.word	0x20024bfc
   20540:	200226b5 	.word	0x200226b5

00020544 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   20544:	4601      	mov	r1, r0
   20546:	4801      	ldr	r0, [pc, #4]	; (2054c <k_malloc+0x8>)
   20548:	f003 bf4d 	b.w	243e6 <k_mem_pool_malloc>
   2054c:	20024bfc 	.word	0x20024bfc

00020550 <resched.part.15>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   20550:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   20554:	280d      	cmp	r0, #13
   20556:	d809      	bhi.n	2056c <resched.part.15+0x1c>
   20558:	b128      	cbz	r0, 20566 <resched.part.15+0x16>
   2055a:	4b05      	ldr	r3, [pc, #20]	; (20570 <resched.part.15+0x20>)
   2055c:	6858      	ldr	r0, [r3, #4]
   2055e:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   20562:	f3c0 20c0 	ubfx	r0, r0, #11, #1
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
}
   20566:	f080 0001 	eor.w	r0, r0, #1
   2056a:	4770      	bx	lr
   2056c:	2001      	movs	r0, #1
   2056e:	e7fa      	b.n	20566 <resched.part.15+0x16>
   20570:	e000ed00 	.word	0xe000ed00

00020574 <z_reset_time_slice>:
{
   20574:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   20576:	4c08      	ldr	r4, [pc, #32]	; (20598 <z_reset_time_slice+0x24>)
   20578:	6823      	ldr	r3, [r4, #0]
   2057a:	b15b      	cbz	r3, 20594 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   2057c:	f7ef fa26 	bl	f9cc <z_clock_elapsed>
   20580:	6823      	ldr	r3, [r4, #0]
   20582:	4a06      	ldr	r2, [pc, #24]	; (2059c <z_reset_time_slice+0x28>)
   20584:	4418      	add	r0, r3
   20586:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   20588:	2100      	movs	r1, #0
}
   2058a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   2058e:	4618      	mov	r0, r3
   20590:	f004 b8b7 	b.w	24702 <z_set_timeout_expiry>
}
   20594:	bd10      	pop	{r4, pc}
   20596:	bf00      	nop
   20598:	20022330 	.word	0x20022330
   2059c:	200222f4 	.word	0x200222f4

000205a0 <k_sched_time_slice_set>:
{
   205a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   205a2:	460d      	mov	r5, r1
	__asm__ volatile(
   205a4:	f04f 0320 	mov.w	r3, #32
   205a8:	f3ef 8411 	mrs	r4, BASEPRI
   205ac:	f383 8811 	msr	BASEPRI, r3
   205b0:	f3bf 8f6f 	isb	sy

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
   205b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   205b8:	f240 36e7 	movw	r6, #999	; 0x3e7
   205bc:	2700      	movs	r7, #0
		_current_cpu->slice_ticks = 0;
   205be:	2200      	movs	r2, #0
   205c0:	fbc1 6700 	smlal	r6, r7, r1, r0
   205c4:	4b09      	ldr	r3, [pc, #36]	; (205ec <k_sched_time_slice_set+0x4c>)
   205c6:	4630      	mov	r0, r6
   205c8:	611a      	str	r2, [r3, #16]
   205ca:	4639      	mov	r1, r7
   205cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   205d0:	2300      	movs	r3, #0
   205d2:	f7eb ffe1 	bl	c598 <__aeabi_ldivmod>
   205d6:	4b06      	ldr	r3, [pc, #24]	; (205f0 <k_sched_time_slice_set+0x50>)
   205d8:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   205da:	4b06      	ldr	r3, [pc, #24]	; (205f4 <k_sched_time_slice_set+0x54>)
   205dc:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   205de:	f7ff ffc9 	bl	20574 <z_reset_time_slice>
	__asm__ volatile(
   205e2:	f384 8811 	msr	BASEPRI, r4
   205e6:	f3bf 8f6f 	isb	sy
}
   205ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   205ec:	200222f4 	.word	0x200222f4
   205f0:	20022330 	.word	0x20022330
   205f4:	2002232c 	.word	0x2002232c

000205f8 <k_sched_lock>:
	__asm__ volatile(
   205f8:	f04f 0320 	mov.w	r3, #32
   205fc:	f3ef 8111 	mrs	r1, BASEPRI
   20600:	f383 8811 	msr	BASEPRI, r3
   20604:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   20608:	4b04      	ldr	r3, [pc, #16]	; (2061c <k_sched_lock+0x24>)
   2060a:	689a      	ldr	r2, [r3, #8]
   2060c:	7bd3      	ldrb	r3, [r2, #15]
   2060e:	3b01      	subs	r3, #1
   20610:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   20612:	f381 8811 	msr	BASEPRI, r1
   20616:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   2061a:	4770      	bx	lr
   2061c:	200222f4 	.word	0x200222f4

00020620 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   20620:	4b09      	ldr	r3, [pc, #36]	; (20648 <z_priq_dumb_remove+0x28>)
   20622:	f103 0228 	add.w	r2, r3, #40	; 0x28
   20626:	4282      	cmp	r2, r0
   20628:	d105      	bne.n	20636 <z_priq_dumb_remove+0x16>
   2062a:	689b      	ldr	r3, [r3, #8]
   2062c:	428b      	cmp	r3, r1
   2062e:	d102      	bne.n	20636 <z_priq_dumb_remove+0x16>
   20630:	7b4b      	ldrb	r3, [r1, #13]
   20632:	06db      	lsls	r3, r3, #27
   20634:	d107      	bne.n	20646 <z_priq_dumb_remove+0x26>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   20636:	e9d1 2300 	ldrd	r2, r3, [r1]
   2063a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2063c:	680a      	ldr	r2, [r1, #0]
   2063e:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   20640:	2300      	movs	r3, #0
	node->prev = NULL;
   20642:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   20646:	4770      	bx	lr
   20648:	200222f4 	.word	0x200222f4

0002064c <update_cache>:
{
   2064c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   2064e:	4c0d      	ldr	r4, [pc, #52]	; (20684 <update_cache+0x38>)
{
   20650:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   20652:	f104 0028 	add.w	r0, r4, #40	; 0x28
   20656:	f003 ff57 	bl	24508 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   2065a:	4605      	mov	r5, r0
   2065c:	b900      	cbnz	r0, 20660 <update_cache+0x14>
   2065e:	68e5      	ldr	r5, [r4, #12]
   20660:	68a3      	ldr	r3, [r4, #8]
	if (preempt_ok != 0) {
   20662:	b94a      	cbnz	r2, 20678 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   20664:	7b5a      	ldrb	r2, [r3, #13]
   20666:	06d2      	lsls	r2, r2, #27
   20668:	d106      	bne.n	20678 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2066a:	69aa      	ldr	r2, [r5, #24]
   2066c:	b922      	cbnz	r2, 20678 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
   2066e:	89da      	ldrh	r2, [r3, #14]
   20670:	2a7f      	cmp	r2, #127	; 0x7f
   20672:	d901      	bls.n	20678 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   20674:	6263      	str	r3, [r4, #36]	; 0x24
}
   20676:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   20678:	429d      	cmp	r5, r3
   2067a:	d001      	beq.n	20680 <update_cache+0x34>
			z_reset_time_slice();
   2067c:	f7ff ff7a 	bl	20574 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
   20680:	6265      	str	r5, [r4, #36]	; 0x24
}
   20682:	e7f8      	b.n	20676 <update_cache+0x2a>
   20684:	200222f4 	.word	0x200222f4

00020688 <k_sched_unlock>:
{
   20688:	b510      	push	{r4, lr}
	__asm__ volatile(
   2068a:	f04f 0320 	mov.w	r3, #32
   2068e:	f3ef 8411 	mrs	r4, BASEPRI
   20692:	f383 8811 	msr	BASEPRI, r3
   20696:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   2069a:	4b08      	ldr	r3, [pc, #32]	; (206bc <k_sched_unlock+0x34>)
		update_cache(0);
   2069c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   2069e:	689a      	ldr	r2, [r3, #8]
   206a0:	7bd3      	ldrb	r3, [r2, #15]
   206a2:	3301      	adds	r3, #1
   206a4:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   206a6:	f7ff ffd1 	bl	2064c <update_cache>
	__asm__ volatile(
   206aa:	f384 8811 	msr	BASEPRI, r4
   206ae:	f3bf 8f6f 	isb	sy
}
   206b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   206b6:	f003 beff 	b.w	244b8 <z_reschedule_unlocked>
   206ba:	bf00      	nop
   206bc:	200222f4 	.word	0x200222f4

000206c0 <z_add_thread_to_ready_q>:
{
   206c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   206c2:	f04f 0320 	mov.w	r3, #32
   206c6:	f3ef 8411 	mrs	r4, BASEPRI
   206ca:	f383 8811 	msr	BASEPRI, r3
   206ce:	f3bf 8f6f 	isb	sy
	return list->head == list;
   206d2:	4a16      	ldr	r2, [pc, #88]	; (2072c <z_add_thread_to_ready_q+0x6c>)
   206d4:	4611      	mov	r1, r2
   206d6:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   206da:	428b      	cmp	r3, r1
   206dc:	d00c      	beq.n	206f8 <z_add_thread_to_ready_q+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   206de:	b15b      	cbz	r3, 206f8 <z_add_thread_to_ready_q+0x38>
   206e0:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   206e2:	f990 500e 	ldrsb.w	r5, [r0, #14]
   206e6:	f993 700e 	ldrsb.w	r7, [r3, #14]
   206ea:	42af      	cmp	r7, r5
   206ec:	dc0b      	bgt.n	20706 <z_add_thread_to_ready_q+0x46>
	return (node == list->tail) ? NULL : node->next;
   206ee:	42b3      	cmp	r3, r6
   206f0:	d002      	beq.n	206f8 <z_add_thread_to_ready_q+0x38>
   206f2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   206f4:	2b00      	cmp	r3, #0
   206f6:	d1f6      	bne.n	206e6 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
   206f8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   206fa:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   206fc:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   206fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   20700:	6018      	str	r0, [r3, #0]
	list->tail = node;
   20702:	62d0      	str	r0, [r2, #44]	; 0x2c
   20704:	e005      	b.n	20712 <z_add_thread_to_ready_q+0x52>
	node->prev = successor->prev;
   20706:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   20708:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   2070c:	685a      	ldr	r2, [r3, #4]
   2070e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   20710:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   20712:	7b43      	ldrb	r3, [r0, #13]
   20714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20718:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   2071a:	2000      	movs	r0, #0
   2071c:	f7ff ff96 	bl	2064c <update_cache>
	__asm__ volatile(
   20720:	f384 8811 	msr	BASEPRI, r4
   20724:	f3bf 8f6f 	isb	sy
}
   20728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2072a:	bf00      	nop
   2072c:	200222f4 	.word	0x200222f4

00020730 <z_move_thread_to_end_of_prio_q>:
{
   20730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20732:	4604      	mov	r4, r0
	__asm__ volatile(
   20734:	f04f 0320 	mov.w	r3, #32
   20738:	f3ef 8511 	mrs	r5, BASEPRI
   2073c:	f383 8811 	msr	BASEPRI, r3
   20740:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   20744:	7b43      	ldrb	r3, [r0, #13]
   20746:	065a      	lsls	r2, r3, #25
   20748:	d503      	bpl.n	20752 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2074a:	4601      	mov	r1, r0
   2074c:	4818      	ldr	r0, [pc, #96]	; (207b0 <z_move_thread_to_end_of_prio_q+0x80>)
   2074e:	f7ff ff67 	bl	20620 <z_priq_dumb_remove>
	return list->head == list;
   20752:	4a18      	ldr	r2, [pc, #96]	; (207b4 <z_move_thread_to_end_of_prio_q+0x84>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20754:	f102 0128 	add.w	r1, r2, #40	; 0x28
   20758:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   2075c:	428b      	cmp	r3, r1
   2075e:	d00b      	beq.n	20778 <z_move_thread_to_end_of_prio_q+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20760:	b153      	cbz	r3, 20778 <z_move_thread_to_end_of_prio_q+0x48>
	if (t1->base.prio < t2->base.prio) {
   20762:	f994 600e 	ldrsb.w	r6, [r4, #14]
   20766:	f993 700e 	ldrsb.w	r7, [r3, #14]
   2076a:	42b7      	cmp	r7, r6
   2076c:	dc0a      	bgt.n	20784 <z_move_thread_to_end_of_prio_q+0x54>
	return (node == list->tail) ? NULL : node->next;
   2076e:	4283      	cmp	r3, r0
   20770:	d002      	beq.n	20778 <z_move_thread_to_end_of_prio_q+0x48>
   20772:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20774:	2b00      	cmp	r3, #0
   20776:	d1f6      	bne.n	20766 <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
   20778:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   2077c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2077e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20780:	62d4      	str	r4, [r2, #44]	; 0x2c
   20782:	e005      	b.n	20790 <z_move_thread_to_end_of_prio_q+0x60>
	node->prev = successor->prev;
   20784:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   20786:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   2078a:	6859      	ldr	r1, [r3, #4]
   2078c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   2078e:	605c      	str	r4, [r3, #4]
   20790:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   20792:	6890      	ldr	r0, [r2, #8]
   20794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20798:	7363      	strb	r3, [r4, #13]
   2079a:	1b03      	subs	r3, r0, r4
   2079c:	4258      	negs	r0, r3
   2079e:	4158      	adcs	r0, r3
   207a0:	f7ff ff54 	bl	2064c <update_cache>
	__asm__ volatile(
   207a4:	f385 8811 	msr	BASEPRI, r5
   207a8:	f3bf 8f6f 	isb	sy
}
   207ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   207ae:	bf00      	nop
   207b0:	2002231c 	.word	0x2002231c
   207b4:	200222f4 	.word	0x200222f4

000207b8 <z_time_slice>:
	if (pending_current == _current) {
   207b8:	4a15      	ldr	r2, [pc, #84]	; (20810 <z_time_slice+0x58>)
   207ba:	4916      	ldr	r1, [pc, #88]	; (20814 <z_time_slice+0x5c>)
{
   207bc:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   207be:	680c      	ldr	r4, [r1, #0]
   207c0:	6893      	ldr	r3, [r2, #8]
   207c2:	42a3      	cmp	r3, r4
   207c4:	4614      	mov	r4, r2
   207c6:	d103      	bne.n	207d0 <z_time_slice+0x18>
}
   207c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   207cc:	f7ff bed2 	b.w	20574 <z_reset_time_slice>
	pending_current = NULL;
   207d0:	2500      	movs	r5, #0
   207d2:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   207d4:	4910      	ldr	r1, [pc, #64]	; (20818 <z_time_slice+0x60>)
   207d6:	6809      	ldr	r1, [r1, #0]
   207d8:	b1b9      	cbz	r1, 2080a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   207da:	89d9      	ldrh	r1, [r3, #14]
   207dc:	297f      	cmp	r1, #127	; 0x7f
   207de:	d814      	bhi.n	2080a <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   207e0:	490e      	ldr	r1, [pc, #56]	; (2081c <z_time_slice+0x64>)
   207e2:	f993 500e 	ldrsb.w	r5, [r3, #14]
   207e6:	6809      	ldr	r1, [r1, #0]
   207e8:	428d      	cmp	r5, r1
   207ea:	db0e      	blt.n	2080a <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
   207ec:	490c      	ldr	r1, [pc, #48]	; (20820 <z_time_slice+0x68>)
   207ee:	428b      	cmp	r3, r1
   207f0:	d00b      	beq.n	2080a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   207f2:	6999      	ldr	r1, [r3, #24]
   207f4:	b949      	cbnz	r1, 2080a <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   207f6:	6911      	ldr	r1, [r2, #16]
   207f8:	4281      	cmp	r1, r0
   207fa:	dc03      	bgt.n	20804 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   207fc:	4618      	mov	r0, r3
   207fe:	f7ff ff97 	bl	20730 <z_move_thread_to_end_of_prio_q>
   20802:	e7e1      	b.n	207c8 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   20804:	1a09      	subs	r1, r1, r0
   20806:	6111      	str	r1, [r2, #16]
}
   20808:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   2080a:	2300      	movs	r3, #0
   2080c:	6123      	str	r3, [r4, #16]
   2080e:	e7fb      	b.n	20808 <z_time_slice+0x50>
   20810:	200222f4 	.word	0x200222f4
   20814:	20022328 	.word	0x20022328
   20818:	20022330 	.word	0x20022330
   2081c:	2002232c 	.word	0x2002232c
   20820:	20021970 	.word	0x20021970

00020824 <z_remove_thread_from_ready_q>:
{
   20824:	b538      	push	{r3, r4, r5, lr}
   20826:	4604      	mov	r4, r0
	__asm__ volatile(
   20828:	f04f 0320 	mov.w	r3, #32
   2082c:	f3ef 8511 	mrs	r5, BASEPRI
   20830:	f383 8811 	msr	BASEPRI, r3
   20834:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   20838:	7b43      	ldrb	r3, [r0, #13]
   2083a:	065a      	lsls	r2, r3, #25
   2083c:	d507      	bpl.n	2084e <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2083e:	4601      	mov	r1, r0
   20840:	4809      	ldr	r0, [pc, #36]	; (20868 <z_remove_thread_from_ready_q+0x44>)
   20842:	f7ff feed 	bl	20620 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   20846:	7b63      	ldrb	r3, [r4, #13]
   20848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   2084c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   2084e:	4b07      	ldr	r3, [pc, #28]	; (2086c <z_remove_thread_from_ready_q+0x48>)
   20850:	6898      	ldr	r0, [r3, #8]
   20852:	1b03      	subs	r3, r0, r4
   20854:	4258      	negs	r0, r3
   20856:	4158      	adcs	r0, r3
   20858:	f7ff fef8 	bl	2064c <update_cache>
	__asm__ volatile(
   2085c:	f385 8811 	msr	BASEPRI, r5
   20860:	f3bf 8f6f 	isb	sy
}
   20864:	bd38      	pop	{r3, r4, r5, pc}
   20866:	bf00      	nop
   20868:	2002231c 	.word	0x2002231c
   2086c:	200222f4 	.word	0x200222f4

00020870 <pend>:
{
   20870:	b570      	push	{r4, r5, r6, lr}
   20872:	4604      	mov	r4, r0
   20874:	460d      	mov	r5, r1
   20876:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   20878:	f7ff ffd4 	bl	20824 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   2087c:	7b63      	ldrb	r3, [r4, #13]
   2087e:	f043 0302 	orr.w	r3, r3, #2
   20882:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   20884:	b1ed      	cbz	r5, 208c2 <pend+0x52>
	return list->head == list;
   20886:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   20888:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2088a:	429d      	cmp	r5, r3
   2088c:	d00c      	beq.n	208a8 <pend+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2088e:	b15b      	cbz	r3, 208a8 <pend+0x38>
	if (t1->base.prio < t2->base.prio) {
   20890:	f994 200e 	ldrsb.w	r2, [r4, #14]
   20894:	f993 100e 	ldrsb.w	r1, [r3, #14]
   20898:	4291      	cmp	r1, r2
   2089a:	dc0c      	bgt.n	208b6 <pend+0x46>
	return (node == list->tail) ? NULL : node->next;
   2089c:	6869      	ldr	r1, [r5, #4]
   2089e:	428b      	cmp	r3, r1
   208a0:	d002      	beq.n	208a8 <pend+0x38>
   208a2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   208a4:	2b00      	cmp	r3, #0
   208a6:	d1f5      	bne.n	20894 <pend+0x24>
	node->prev = list->tail;
   208a8:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   208aa:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   208ac:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   208ae:	686b      	ldr	r3, [r5, #4]
   208b0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   208b2:	606c      	str	r4, [r5, #4]
   208b4:	e005      	b.n	208c2 <pend+0x52>
	node->prev = successor->prev;
   208b6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   208b8:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   208bc:	685a      	ldr	r2, [r3, #4]
   208be:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   208c0:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   208c2:	1c73      	adds	r3, r6, #1
   208c4:	d013      	beq.n	208ee <pend+0x7e>
   208c6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   208ca:	f240 30e7 	movw	r0, #999	; 0x3e7
   208ce:	2100      	movs	r1, #0
   208d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   208d4:	fbc5 0106 	smlal	r0, r1, r5, r6
   208d8:	2300      	movs	r3, #0
   208da:	f7eb fe5d 	bl	c598 <__aeabi_ldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   208de:	4904      	ldr	r1, [pc, #16]	; (208f0 <pend+0x80>)
   208e0:	1c42      	adds	r2, r0, #1
   208e2:	f104 0018 	add.w	r0, r4, #24
}
   208e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   208ea:	f000 ba1f 	b.w	20d2c <z_add_timeout>
   208ee:	bd70      	pop	{r4, r5, r6, pc}
   208f0:	00024515 	.word	0x00024515

000208f4 <z_pend_curr_irqlock>:
{
   208f4:	b570      	push	{r4, r5, r6, lr}
   208f6:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   208f8:	4d0e      	ldr	r5, [pc, #56]	; (20934 <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
   208fa:	4c0f      	ldr	r4, [pc, #60]	; (20938 <z_pend_curr_irqlock+0x44>)
	pend(_current, wait_q, timeout);
   208fc:	68a8      	ldr	r0, [r5, #8]
   208fe:	f7ff ffb7 	bl	20870 <pend>
	pending_current = _current;
   20902:	68ab      	ldr	r3, [r5, #8]
   20904:	4630      	mov	r0, r6
   20906:	6023      	str	r3, [r4, #0]
   20908:	f7ef f94c 	bl	fba4 <z_arch_swap>
	__asm__ volatile(
   2090c:	f04f 0220 	mov.w	r2, #32
   20910:	f3ef 8311 	mrs	r3, BASEPRI
   20914:	f382 8811 	msr	BASEPRI, r2
   20918:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
   2091c:	6822      	ldr	r2, [r4, #0]
   2091e:	68a9      	ldr	r1, [r5, #8]
   20920:	4291      	cmp	r1, r2
			pending_current = NULL;
   20922:	bf04      	itt	eq
   20924:	2200      	moveq	r2, #0
   20926:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   20928:	f383 8811 	msr	BASEPRI, r3
   2092c:	f3bf 8f6f 	isb	sy
}
   20930:	bd70      	pop	{r4, r5, r6, pc}
   20932:	bf00      	nop
   20934:	200222f4 	.word	0x200222f4
   20938:	20022328 	.word	0x20022328

0002093c <z_pend_curr>:
{
   2093c:	b510      	push	{r4, lr}
   2093e:	460c      	mov	r4, r1
   20940:	4611      	mov	r1, r2
	pending_current = _current;
   20942:	4a06      	ldr	r2, [pc, #24]	; (2095c <z_pend_curr+0x20>)
   20944:	6890      	ldr	r0, [r2, #8]
   20946:	4a06      	ldr	r2, [pc, #24]	; (20960 <z_pend_curr+0x24>)
   20948:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   2094a:	461a      	mov	r2, r3
   2094c:	f7ff ff90 	bl	20870 <pend>
   20950:	4620      	mov	r0, r4
}
   20952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20956:	f7ef b925 	b.w	fba4 <z_arch_swap>
   2095a:	bf00      	nop
   2095c:	200222f4 	.word	0x200222f4
   20960:	20022328 	.word	0x20022328

00020964 <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   20964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
   20966:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   20968:	f003 fee5 	bl	24736 <z_tick_get_32>
   2096c:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   2096e:	f04f 0320 	mov.w	r3, #32
   20972:	f3ef 8711 	mrs	r7, BASEPRI
   20976:	f383 8811 	msr	BASEPRI, r3
   2097a:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   2097e:	4d0d      	ldr	r5, [pc, #52]	; (209b4 <z_tick_sleep.part.19+0x50>)
   20980:	4b0d      	ldr	r3, [pc, #52]	; (209b8 <z_tick_sleep.part.19+0x54>)
   20982:	68a8      	ldr	r0, [r5, #8]
   20984:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   20986:	f7ff ff4d 	bl	20824 <z_remove_thread_from_ready_q>
   2098a:	68a8      	ldr	r0, [r5, #8]
   2098c:	490b      	ldr	r1, [pc, #44]	; (209bc <z_tick_sleep.part.19+0x58>)
   2098e:	4632      	mov	r2, r6
   20990:	3018      	adds	r0, #24
   20992:	f000 f9cb 	bl	20d2c <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
   20996:	68aa      	ldr	r2, [r5, #8]
   20998:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2099a:	7b53      	ldrb	r3, [r2, #13]
   2099c:	f043 0310 	orr.w	r3, r3, #16
   209a0:	7353      	strb	r3, [r2, #13]
   209a2:	f7ef f8ff 	bl	fba4 <z_arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   209a6:	f003 fec6 	bl	24736 <z_tick_get_32>
   209aa:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   209ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   209b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   209b2:	bf00      	nop
   209b4:	200222f4 	.word	0x200222f4
   209b8:	20022328 	.word	0x20022328
   209bc:	00024515 	.word	0x00024515

000209c0 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   209c0:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   209c2:	4b04      	ldr	r3, [pc, #16]	; (209d4 <z_sched_init+0x14>)
   209c4:	4608      	mov	r0, r1
   209c6:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   209ca:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   209ce:	f7ff bde7 	b.w	205a0 <k_sched_time_slice_set>
   209d2:	bf00      	nop
   209d4:	200222f4 	.word	0x200222f4

000209d8 <z_impl_k_yield>:
{
   209d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   209da:	4c24      	ldr	r4, [pc, #144]	; (20a6c <z_impl_k_yield+0x94>)
   209dc:	4b24      	ldr	r3, [pc, #144]	; (20a70 <z_impl_k_yield+0x98>)
   209de:	68a2      	ldr	r2, [r4, #8]
   209e0:	429a      	cmp	r2, r3
   209e2:	d036      	beq.n	20a52 <z_impl_k_yield+0x7a>
   209e4:	f04f 0320 	mov.w	r3, #32
   209e8:	f3ef 8611 	mrs	r6, BASEPRI
   209ec:	f383 8811 	msr	BASEPRI, r3
   209f0:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   209f4:	f104 0528 	add.w	r5, r4, #40	; 0x28
   209f8:	68a1      	ldr	r1, [r4, #8]
   209fa:	4628      	mov	r0, r5
   209fc:	f7ff fe10 	bl	20620 <z_priq_dumb_remove>
	return list->head == list;
   20a00:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   20a02:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20a04:	42aa      	cmp	r2, r5
   20a06:	d00c      	beq.n	20a22 <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20a08:	b15a      	cbz	r2, 20a22 <z_impl_k_yield+0x4a>
   20a0a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   20a0c:	f993 100e 	ldrsb.w	r1, [r3, #14]
   20a10:	f992 700e 	ldrsb.w	r7, [r2, #14]
   20a14:	428f      	cmp	r7, r1
   20a16:	dc0b      	bgt.n	20a30 <z_impl_k_yield+0x58>
	return (node == list->tail) ? NULL : node->next;
   20a18:	4282      	cmp	r2, r0
   20a1a:	d002      	beq.n	20a22 <z_impl_k_yield+0x4a>
   20a1c:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20a1e:	2a00      	cmp	r2, #0
   20a20:	d1f6      	bne.n	20a10 <z_impl_k_yield+0x38>
	node->prev = list->tail;
   20a22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   20a24:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
   20a26:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   20a28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   20a2a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   20a2c:	62e3      	str	r3, [r4, #44]	; 0x2c
   20a2e:	e005      	b.n	20a3c <z_impl_k_yield+0x64>
	node->prev = successor->prev;
   20a30:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   20a32:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   20a36:	6851      	ldr	r1, [r2, #4]
   20a38:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   20a3a:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   20a3c:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   20a3e:	2001      	movs	r0, #1
   20a40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   20a44:	735a      	strb	r2, [r3, #13]
   20a46:	f7ff fe01 	bl	2064c <update_cache>
	__asm__ volatile(
   20a4a:	f386 8811 	msr	BASEPRI, r6
   20a4e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   20a52:	f04f 0320 	mov.w	r3, #32
   20a56:	f3ef 8011 	mrs	r0, BASEPRI
   20a5a:	f383 8811 	msr	BASEPRI, r3
   20a5e:	f3bf 8f6f 	isb	sy
}
   20a62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   20a66:	f7ef b89d 	b.w	fba4 <z_arch_swap>
   20a6a:	bf00      	nop
   20a6c:	200222f4 	.word	0x200222f4
   20a70:	20021970 	.word	0x20021970

00020a74 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   20a74:	4b01      	ldr	r3, [pc, #4]	; (20a7c <z_impl_k_current_get+0x8>)
   20a76:	6898      	ldr	r0, [r3, #8]
   20a78:	4770      	bx	lr
   20a7a:	bf00      	nop
   20a7c:	200222f4 	.word	0x200222f4

00020a80 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   20a80:	b570      	push	{r4, r5, r6, lr}
   20a82:	4604      	mov	r4, r0
   20a84:	f04f 0320 	mov.w	r3, #32
   20a88:	f3ef 8611 	mrs	r6, BASEPRI
   20a8c:	f383 8811 	msr	BASEPRI, r3
   20a90:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   20a94:	f003 fd6f 	bl	24576 <z_unpend_first_thread>
	if (thread != NULL) {
   20a98:	4605      	mov	r5, r0
   20a9a:	b170      	cbz	r0, 20aba <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   20a9c:	7b43      	ldrb	r3, [r0, #13]
   20a9e:	06db      	lsls	r3, r3, #27
   20aa0:	d103      	bne.n	20aaa <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
   20aa2:	6983      	ldr	r3, [r0, #24]
   20aa4:	b90b      	cbnz	r3, 20aaa <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
   20aa6:	f7ff fe0b 	bl	206c0 <z_add_thread_to_ready_q>
   20aaa:	2300      	movs	r3, #0
   20aac:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   20aae:	4631      	mov	r1, r6
}
   20ab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   20ab4:	4807      	ldr	r0, [pc, #28]	; (20ad4 <z_impl_k_sem_give+0x54>)
   20ab6:	f003 bce0 	b.w	2447a <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   20aba:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   20abe:	429a      	cmp	r2, r3
   20ac0:	bf18      	it	ne
   20ac2:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   20ac4:	2102      	movs	r1, #2
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   20ac6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   20ac8:	f104 0010 	add.w	r0, r4, #16
   20acc:	f003 fe93 	bl	247f6 <z_handle_obj_poll_events>
   20ad0:	e7ed      	b.n	20aae <z_impl_k_sem_give+0x2e>
   20ad2:	bf00      	nop
   20ad4:	200226b5 	.word	0x200226b5

00020ad8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   20ad8:	b410      	push	{r4}
   20ada:	4602      	mov	r2, r0
   20adc:	460b      	mov	r3, r1
   20ade:	f04f 0020 	mov.w	r0, #32
   20ae2:	f3ef 8111 	mrs	r1, BASEPRI
   20ae6:	f380 8811 	msr	BASEPRI, r0
   20aea:	f3bf 8f6f 	isb	sy
	__ASSERT(((z_arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   20aee:	6894      	ldr	r4, [r2, #8]
   20af0:	b14c      	cbz	r4, 20b06 <z_impl_k_sem_take+0x2e>
		sem->count--;
   20af2:	3c01      	subs	r4, #1
   20af4:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   20af6:	f381 8811 	msr	BASEPRI, r1
   20afa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   20afe:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   20b00:	f85d 4b04 	ldr.w	r4, [sp], #4
   20b04:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   20b06:	b933      	cbnz	r3, 20b16 <z_impl_k_sem_take+0x3e>
   20b08:	f381 8811 	msr	BASEPRI, r1
   20b0c:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   20b10:	f06f 000f 	mvn.w	r0, #15
   20b14:	e7f4      	b.n	20b00 <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   20b16:	4802      	ldr	r0, [pc, #8]	; (20b20 <z_impl_k_sem_take+0x48>)
}
   20b18:	f85d 4b04 	ldr.w	r4, [sp], #4
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   20b1c:	f7ff bf0e 	b.w	2093c <z_pend_curr>
   20b20:	200226b5 	.word	0x200226b5

00020b24 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   20b24:	b510      	push	{r4, lr}
   20b26:	4602      	mov	r2, r0
	__asm__ volatile(
   20b28:	f04f 0320 	mov.w	r3, #32
   20b2c:	f3ef 8411 	mrs	r4, BASEPRI
   20b30:	f383 8811 	msr	BASEPRI, r3
   20b34:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   20b38:	7b43      	ldrb	r3, [r0, #13]
   20b3a:	0759      	lsls	r1, r3, #29
   20b3c:	d404      	bmi.n	20b48 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
   20b3e:	f384 8811 	msr	BASEPRI, r4
   20b42:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   20b46:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20b48:	f023 0304 	bic.w	r3, r3, #4
   20b4c:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   20b4e:	f003 fd7d 	bl	2464c <z_is_thread_ready>
   20b52:	b110      	cbz	r0, 20b5a <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   20b54:	4610      	mov	r0, r2
   20b56:	f7ff fdb3 	bl	206c0 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   20b5a:	4621      	mov	r1, r4
}
   20b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   20b60:	4801      	ldr	r0, [pc, #4]	; (20b68 <z_impl_k_thread_start+0x44>)
   20b62:	f003 bc8a 	b.w	2447a <z_reschedule>
   20b66:	bf00      	nop
   20b68:	200226b5 	.word	0x200226b5

00020b6c <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   20b6c:	b530      	push	{r4, r5, lr}
   20b6e:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20b70:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   20b72:	4604      	mov	r4, r0
	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20b74:	9504      	str	r5, [sp, #16]
   20b76:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   20b78:	9503      	str	r5, [sp, #12]
   20b7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   20b7c:	9502      	str	r5, [sp, #8]
   20b7e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   20b80:	9501      	str	r5, [sp, #4]
   20b82:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   20b84:	9500      	str	r5, [sp, #0]
   20b86:	f7ef f85d 	bl	fc44 <z_arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   20b8a:	4b04      	ldr	r3, [pc, #16]	; (20b9c <z_setup_new_thread+0x30>)
   20b8c:	689b      	ldr	r3, [r3, #8]
   20b8e:	b913      	cbnz	r3, 20b96 <z_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   20b90:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   20b92:	b007      	add	sp, #28
   20b94:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   20b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   20b98:	e7fa      	b.n	20b90 <z_setup_new_thread+0x24>
   20b9a:	bf00      	nop
   20b9c:	200222f4 	.word	0x200222f4

00020ba0 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   20ba0:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20ba2:	2600      	movs	r6, #0
{
   20ba4:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20ba6:	9605      	str	r6, [sp, #20]
   20ba8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
{
   20baa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20bac:	9604      	str	r6, [sp, #16]
   20bae:	9e0d      	ldr	r6, [sp, #52]	; 0x34
{
   20bb0:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20bb2:	9603      	str	r6, [sp, #12]
   20bb4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   20bb6:	9602      	str	r6, [sp, #8]
   20bb8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   20bba:	9601      	str	r6, [sp, #4]
   20bbc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   20bbe:	9600      	str	r6, [sp, #0]
   20bc0:	f7ff ffd4 	bl	20b6c <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   20bc4:	1c6b      	adds	r3, r5, #1
   20bc6:	d003      	beq.n	20bd0 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   20bc8:	b92d      	cbnz	r5, 20bd6 <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
   20bca:	4620      	mov	r0, r4
   20bcc:	f7ff ffaa 	bl	20b24 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   20bd0:	4620      	mov	r0, r4
   20bd2:	b006      	add	sp, #24
   20bd4:	bd70      	pop	{r4, r5, r6, pc}
   20bd6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   20bda:	f240 30e7 	movw	r0, #999	; 0x3e7
   20bde:	2100      	movs	r1, #0
   20be0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20be4:	2300      	movs	r3, #0
   20be6:	fbc6 0105 	smlal	r0, r1, r6, r5
   20bea:	f7eb fcd5 	bl	c598 <__aeabi_ldivmod>
   20bee:	4903      	ldr	r1, [pc, #12]	; (20bfc <z_impl_k_thread_create+0x5c>)
   20bf0:	1c42      	adds	r2, r0, #1
   20bf2:	f104 0018 	add.w	r0, r4, #24
   20bf6:	f000 f899 	bl	20d2c <z_add_timeout>
   20bfa:	e7e9      	b.n	20bd0 <z_impl_k_thread_create+0x30>
   20bfc:	00024515 	.word	0x00024515

00020c00 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   20c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   20c04:	4e28      	ldr	r6, [pc, #160]	; (20ca8 <z_init_static_threads+0xa8>)
   20c06:	4d29      	ldr	r5, [pc, #164]	; (20cac <z_init_static_threads+0xac>)
   20c08:	46b0      	mov	r8, r6
{
   20c0a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   20c0c:	42b5      	cmp	r5, r6
   20c0e:	f105 0430 	add.w	r4, r5, #48	; 0x30
   20c12:	d310      	bcc.n	20c36 <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   20c14:	f7ff fcf0 	bl	205f8 <k_sched_lock>
   20c18:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   20c1c:	f240 36e7 	movw	r6, #999	; 0x3e7
   20c20:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   20c22:	4c22      	ldr	r4, [pc, #136]	; (20cac <z_init_static_threads+0xac>)
   20c24:	f8df a088 	ldr.w	sl, [pc, #136]	; 20cb0 <z_init_static_threads+0xb0>
   20c28:	4544      	cmp	r4, r8
   20c2a:	d321      	bcc.n	20c70 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   20c2c:	b007      	add	sp, #28
   20c2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   20c32:	f7ff bd29 	b.w	20688 <k_sched_unlock>
		z_setup_new_thread(
   20c36:	f854 3c04 	ldr.w	r3, [r4, #-4]
   20c3a:	9305      	str	r3, [sp, #20]
   20c3c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   20c40:	9304      	str	r3, [sp, #16]
   20c42:	f854 3c14 	ldr.w	r3, [r4, #-20]
   20c46:	9303      	str	r3, [sp, #12]
   20c48:	f854 3c18 	ldr.w	r3, [r4, #-24]
   20c4c:	9302      	str	r3, [sp, #8]
   20c4e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   20c52:	9301      	str	r3, [sp, #4]
   20c54:	f854 3c20 	ldr.w	r3, [r4, #-32]
   20c58:	9300      	str	r3, [sp, #0]
   20c5a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   20c5e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   20c62:	f7ff ff83 	bl	20b6c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   20c66:	f854 3c30 	ldr.w	r3, [r4, #-48]
   20c6a:	64dd      	str	r5, [r3, #76]	; 0x4c
   20c6c:	4625      	mov	r5, r4
   20c6e:	e7cd      	b.n	20c0c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   20c70:	6a61      	ldr	r1, [r4, #36]	; 0x24
   20c72:	1c4b      	adds	r3, r1, #1
   20c74:	d004      	beq.n	20c80 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   20c76:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   20c78:	b921      	cbnz	r1, 20c84 <z_init_static_threads+0x84>
   20c7a:	4628      	mov	r0, r5
   20c7c:	f7ff ff52 	bl	20b24 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   20c80:	3430      	adds	r4, #48	; 0x30
   20c82:	e7d1      	b.n	20c28 <z_init_static_threads+0x28>
   20c84:	46b3      	mov	fp, r6
   20c86:	46bc      	mov	ip, r7
   20c88:	fbc9 bc01 	smlal	fp, ip, r9, r1
   20c8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20c90:	2300      	movs	r3, #0
   20c92:	4658      	mov	r0, fp
   20c94:	4661      	mov	r1, ip
   20c96:	f7eb fc7f 	bl	c598 <__aeabi_ldivmod>
   20c9a:	4651      	mov	r1, sl
   20c9c:	1c42      	adds	r2, r0, #1
   20c9e:	f105 0018 	add.w	r0, r5, #24
   20ca2:	f000 f843 	bl	20d2c <z_add_timeout>
   20ca6:	e7eb      	b.n	20c80 <z_init_static_threads+0x80>
   20ca8:	20024bfc 	.word	0x20024bfc
   20cac:	20024bfc 	.word	0x20024bfc
   20cb0:	00024515 	.word	0x00024515

00020cb4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   20cb4:	4b03      	ldr	r3, [pc, #12]	; (20cc4 <elapsed+0x10>)
   20cb6:	681b      	ldr	r3, [r3, #0]
   20cb8:	b90b      	cbnz	r3, 20cbe <elapsed+0xa>
   20cba:	f7ee be87 	b.w	f9cc <z_clock_elapsed>
}
   20cbe:	2000      	movs	r0, #0
   20cc0:	4770      	bx	lr
   20cc2:	bf00      	nop
   20cc4:	20022334 	.word	0x20022334

00020cc8 <remove_timeout>:
{
   20cc8:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20cca:	b140      	cbz	r0, 20cde <remove_timeout+0x16>
   20ccc:	4a08      	ldr	r2, [pc, #32]	; (20cf0 <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
   20cce:	6852      	ldr	r2, [r2, #4]
   20cd0:	4290      	cmp	r0, r2
   20cd2:	d004      	beq.n	20cde <remove_timeout+0x16>
	if (next(t) != NULL) {
   20cd4:	b11b      	cbz	r3, 20cde <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   20cd6:	689a      	ldr	r2, [r3, #8]
   20cd8:	6881      	ldr	r1, [r0, #8]
   20cda:	440a      	add	r2, r1
   20cdc:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   20cde:	6842      	ldr	r2, [r0, #4]
   20ce0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   20ce2:	6803      	ldr	r3, [r0, #0]
   20ce4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20ce6:	2300      	movs	r3, #0
	node->prev = NULL;
   20ce8:	e9c0 3300 	strd	r3, r3, [r0]
}
   20cec:	4770      	bx	lr
   20cee:	bf00      	nop
   20cf0:	20024970 	.word	0x20024970

00020cf4 <next_timeout>:
	return list->head == list;
   20cf4:	4b0b      	ldr	r3, [pc, #44]	; (20d24 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   20cf6:	b510      	push	{r4, lr}
   20cf8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20cfa:	429c      	cmp	r4, r3
   20cfc:	bf08      	it	eq
   20cfe:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   20d00:	f7ff ffd8 	bl	20cb4 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   20d04:	b154      	cbz	r4, 20d1c <next_timeout+0x28>
   20d06:	68a3      	ldr	r3, [r4, #8]
   20d08:	1a18      	subs	r0, r3, r0
   20d0a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   20d0e:	4b06      	ldr	r3, [pc, #24]	; (20d28 <next_timeout+0x34>)
   20d10:	691b      	ldr	r3, [r3, #16]
   20d12:	b113      	cbz	r3, 20d1a <next_timeout+0x26>
   20d14:	4298      	cmp	r0, r3
   20d16:	bfa8      	it	ge
   20d18:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   20d1a:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   20d1c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   20d20:	e7f5      	b.n	20d0e <next_timeout+0x1a>
   20d22:	bf00      	nop
   20d24:	20024970 	.word	0x20024970
   20d28:	200222f4 	.word	0x200222f4

00020d2c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   20d2c:	b570      	push	{r4, r5, r6, lr}
   20d2e:	4604      	mov	r4, r0
   20d30:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   20d32:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
   20d34:	f04f 0320 	mov.w	r3, #32
   20d38:	f3ef 8511 	mrs	r5, BASEPRI
   20d3c:	f383 8811 	msr	BASEPRI, r3
   20d40:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   20d44:	f7ff ffb6 	bl	20cb4 <elapsed>
   20d48:	2e01      	cmp	r6, #1
   20d4a:	bfac      	ite	ge
   20d4c:	1980      	addge	r0, r0, r6
   20d4e:	3001      	addlt	r0, #1
	return list->head == list;
   20d50:	4b17      	ldr	r3, [pc, #92]	; (20db0 <z_add_timeout+0x84>)
   20d52:	60a0      	str	r0, [r4, #8]
   20d54:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20d56:	429a      	cmp	r2, r3
   20d58:	d001      	beq.n	20d5e <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20d5a:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   20d5c:	b932      	cbnz	r2, 20d6c <z_add_timeout+0x40>
	node->prev = list->tail;
   20d5e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   20d60:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   20d62:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   20d64:	685a      	ldr	r2, [r3, #4]
   20d66:	6014      	str	r4, [r2, #0]
	list->tail = node;
   20d68:	605c      	str	r4, [r3, #4]
   20d6a:	e00b      	b.n	20d84 <z_add_timeout+0x58>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   20d6c:	6890      	ldr	r0, [r2, #8]
   20d6e:	68a1      	ldr	r1, [r4, #8]
   20d70:	4288      	cmp	r0, r1
   20d72:	dd16      	ble.n	20da2 <z_add_timeout+0x76>
				t->dticks -= to->dticks;
   20d74:	1a41      	subs	r1, r0, r1
   20d76:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   20d78:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   20d7a:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   20d7e:	6851      	ldr	r1, [r2, #4]
   20d80:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   20d82:	6054      	str	r4, [r2, #4]
	return list->head == list;
   20d84:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20d86:	429a      	cmp	r2, r3
   20d88:	d006      	beq.n	20d98 <z_add_timeout+0x6c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   20d8a:	4294      	cmp	r4, r2
   20d8c:	d104      	bne.n	20d98 <z_add_timeout+0x6c>
			z_clock_set_timeout(next_timeout(), false);
   20d8e:	f7ff ffb1 	bl	20cf4 <next_timeout>
   20d92:	2100      	movs	r1, #0
   20d94:	f7ee fdcc 	bl	f930 <z_clock_set_timeout>
	__asm__ volatile(
   20d98:	f385 8811 	msr	BASEPRI, r5
   20d9c:	f3bf 8f6f 	isb	sy
		}
	}
}
   20da0:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   20da2:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   20da4:	4296      	cmp	r6, r2
   20da6:	60a1      	str	r1, [r4, #8]
   20da8:	d0d9      	beq.n	20d5e <z_add_timeout+0x32>
   20daa:	6812      	ldr	r2, [r2, #0]
   20dac:	e7d6      	b.n	20d5c <z_add_timeout+0x30>
   20dae:	bf00      	nop
   20db0:	20024970 	.word	0x20024970

00020db4 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   20db4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   20db8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   20dba:	f7ff fcfd 	bl	207b8 <z_time_slice>
	__asm__ volatile(
   20dbe:	f04f 0320 	mov.w	r3, #32
   20dc2:	f3ef 8511 	mrs	r5, BASEPRI
   20dc6:	f383 8811 	msr	BASEPRI, r3
   20dca:	f3bf 8f6f 	isb	sy
   20dce:	4f21      	ldr	r7, [pc, #132]	; (20e54 <z_clock_announce+0xa0>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   20dd0:	4e21      	ldr	r6, [pc, #132]	; (20e58 <z_clock_announce+0xa4>)
   20dd2:	46b8      	mov	r8, r7
	return list->head == list;
   20dd4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 20e5c <z_clock_announce+0xa8>
   20dd8:	6034      	str	r4, [r6, #0]
   20dda:	f8d9 4000 	ldr.w	r4, [r9]
   20dde:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20de0:	454c      	cmp	r4, r9
   20de2:	e9d7 bc00 	ldrd	fp, ip, [r7]
   20de6:	d005      	beq.n	20df4 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   20de8:	b124      	cbz	r4, 20df4 <z_clock_announce+0x40>
   20dea:	68a3      	ldr	r3, [r4, #8]
   20dec:	4293      	cmp	r3, r2
   20dee:	dd14      	ble.n	20e1a <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   20df0:	1a9b      	subs	r3, r3, r2
   20df2:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   20df4:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   20df6:	eb1b 0002 	adds.w	r0, fp, r2
   20dfa:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   20dfe:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   20e02:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   20e04:	f7ff ff76 	bl	20cf4 <next_timeout>
   20e08:	4621      	mov	r1, r4
   20e0a:	f7ee fd91 	bl	f930 <z_clock_set_timeout>
	__asm__ volatile(
   20e0e:	f385 8811 	msr	BASEPRI, r5
   20e12:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   20e16:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   20e1a:	eb1b 0003 	adds.w	r0, fp, r3
   20e1e:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   20e22:	1ad3      	subs	r3, r2, r3
   20e24:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   20e26:	2300      	movs	r3, #0
		curr_tick += dt;
   20e28:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   20e2c:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   20e2e:	4620      	mov	r0, r4
   20e30:	f7ff ff4a 	bl	20cc8 <remove_timeout>
   20e34:	f385 8811 	msr	BASEPRI, r5
   20e38:	f3bf 8f6f 	isb	sy
		t->fn(t);
   20e3c:	68e3      	ldr	r3, [r4, #12]
   20e3e:	4798      	blx	r3
	__asm__ volatile(
   20e40:	f04f 0320 	mov.w	r3, #32
   20e44:	f3ef 8511 	mrs	r5, BASEPRI
   20e48:	f383 8811 	msr	BASEPRI, r3
   20e4c:	f3bf 8f6f 	isb	sy
   20e50:	e7c3      	b.n	20dda <z_clock_announce+0x26>
   20e52:	bf00      	nop
   20e54:	200200e0 	.word	0x200200e0
   20e58:	20022334 	.word	0x20022334
   20e5c:	20024970 	.word	0x20024970

00020e60 <z_tick_get>:

s64_t z_tick_get(void)
{
   20e60:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   20e64:	f04f 0320 	mov.w	r3, #32
   20e68:	f3ef 8411 	mrs	r4, BASEPRI
   20e6c:	f383 8811 	msr	BASEPRI, r3
   20e70:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   20e74:	f7ee fdaa 	bl	f9cc <z_clock_elapsed>
   20e78:	4b07      	ldr	r3, [pc, #28]	; (20e98 <z_tick_get+0x38>)
   20e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   20e7e:	eb12 0b00 	adds.w	fp, r2, r0
   20e82:	f143 0c00 	adc.w	ip, r3, #0
   20e86:	4658      	mov	r0, fp
   20e88:	4661      	mov	r1, ip
	__asm__ volatile(
   20e8a:	f384 8811 	msr	BASEPRI, r4
   20e8e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   20e92:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   20e96:	bf00      	nop
   20e98:	200200e0 	.word	0x200200e0

00020e9c <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   20e9c:	6a02      	ldr	r2, [r0, #32]
{
   20e9e:	b538      	push	{r3, r4, r5, lr}
	if (timer->period > 0) {
   20ea0:	2a00      	cmp	r2, #0
{
   20ea2:	4604      	mov	r4, r0
	if (timer->period > 0) {
   20ea4:	dd02      	ble.n	20eac <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20ea6:	490e      	ldr	r1, [pc, #56]	; (20ee0 <z_timer_expiration_handler+0x44>)
   20ea8:	f7ff ff40 	bl	20d2c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   20eac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20eae:	3301      	adds	r3, #1
   20eb0:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   20eb2:	69a3      	ldr	r3, [r4, #24]
   20eb4:	b10b      	cbz	r3, 20eba <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   20eb6:	4620      	mov	r0, r4
   20eb8:	4798      	blx	r3
	return list->head == list;
   20eba:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20ebe:	42a5      	cmp	r5, r4
   20ec0:	d00d      	beq.n	20ede <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   20ec2:	b165      	cbz	r5, 20ede <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   20ec4:	4628      	mov	r0, r5
   20ec6:	f003 fabf 	bl	24448 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   20eca:	7b6b      	ldrb	r3, [r5, #13]
   20ecc:	06db      	lsls	r3, r3, #27
   20ece:	d104      	bne.n	20eda <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   20ed0:	69ab      	ldr	r3, [r5, #24]
   20ed2:	b913      	cbnz	r3, 20eda <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   20ed4:	4628      	mov	r0, r5
   20ed6:	f7ff fbf3 	bl	206c0 <z_add_thread_to_ready_q>
   20eda:	2300      	movs	r3, #0
   20edc:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	z_arch_thread_return_value_set(thread, 0);
}
   20ede:	bd38      	pop	{r3, r4, r5, pc}
   20ee0:	00020e9d 	.word	0x00020e9d

00020ee4 <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   20ee4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20ee8:	f240 36e7 	movw	r6, #999	; 0x3e7
   20eec:	2700      	movs	r7, #0
   20eee:	4604      	mov	r4, r0
   20ef0:	4688      	mov	r8, r1
   20ef2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   20ef6:	4630      	mov	r0, r6
   20ef8:	4639      	mov	r1, r7
   20efa:	2300      	movs	r3, #0
   20efc:	fbc5 0102 	smlal	r0, r1, r5, r2
   20f00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20f04:	f7eb fb48 	bl	c598 <__aeabi_ldivmod>
   20f08:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = z_ms_to_ticks(period);
   20f0a:	9000      	str	r0, [sp, #0]
   20f0c:	4630      	mov	r0, r6
   20f0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20f12:	2300      	movs	r3, #0
   20f14:	fbc5 0108 	smlal	r0, r1, r5, r8
   20f18:	f7eb fb3e 	bl	c598 <__aeabi_ldivmod>
	duration_in_ticks = z_ms_to_ticks(duration);
   20f1c:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   20f1e:	4620      	mov	r0, r4
   20f20:	f003 fbc9 	bl	246b6 <z_abort_timeout>
	timer->period = period_in_ticks;
   20f24:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20f26:	4620      	mov	r0, r4
	timer->period = period_in_ticks;
   20f28:	6223      	str	r3, [r4, #32]
	timer->status = 0U;
   20f2a:	2300      	movs	r3, #0
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20f2c:	9a01      	ldr	r2, [sp, #4]
   20f2e:	4903      	ldr	r1, [pc, #12]	; (20f3c <z_impl_k_timer_start+0x58>)
	timer->status = 0U;
   20f30:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   20f32:	b002      	add	sp, #8
   20f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20f38:	f7ff bef8 	b.w	20d2c <z_add_timeout>
   20f3c:	00020e9d 	.word	0x00020e9d

00020f40 <ocrypto_ecdsa_p256_public_key>:
   20f40:	b530      	push	{r4, r5, lr}
   20f42:	b099      	sub	sp, #100	; 0x64
   20f44:	4605      	mov	r5, r0
   20f46:	4668      	mov	r0, sp
   20f48:	f000 f8f2 	bl	21130 <ocrypto_sc_p256_from32bytes>
   20f4c:	4669      	mov	r1, sp
   20f4e:	a808      	add	r0, sp, #32
   20f50:	f000 fae6 	bl	21520 <ocrypto_curve_p256_scalarmult_base>
   20f54:	4604      	mov	r4, r0
   20f56:	a908      	add	r1, sp, #32
   20f58:	4628      	mov	r0, r5
   20f5a:	f000 fa21 	bl	213a0 <ocrypto_curve_p256_to64bytes>
   20f5e:	4620      	mov	r0, r4
   20f60:	b019      	add	sp, #100	; 0x64
   20f62:	bd30      	pop	{r4, r5, pc}

00020f64 <ocrypto_mod_p256_cneg>:
   20f64:	b570      	push	{r4, r5, r6, lr}
   20f66:	b088      	sub	sp, #32
   20f68:	4604      	mov	r4, r0
   20f6a:	460d      	mov	r5, r1
   20f6c:	4668      	mov	r0, sp
   20f6e:	2120      	movs	r1, #32
   20f70:	4616      	mov	r6, r2
   20f72:	f7ec f866 	bl	d042 <ocrypto_constant_time_fill_zero>
   20f76:	2300      	movs	r3, #0
   20f78:	4629      	mov	r1, r5
   20f7a:	4620      	mov	r0, r4
   20f7c:	2220      	movs	r2, #32
   20f7e:	9300      	str	r3, [sp, #0]
   20f80:	f7ec f858 	bl	d034 <ocrypto_constant_time_copy>
   20f84:	462a      	mov	r2, r5
   20f86:	4669      	mov	r1, sp
   20f88:	4668      	mov	r0, sp
   20f8a:	f7ec f8a0 	bl	d0ce <ocrypto_mod_p256_sub>
   20f8e:	4632      	mov	r2, r6
   20f90:	4669      	mov	r1, sp
   20f92:	4620      	mov	r0, r4
   20f94:	f7eb fdab 	bl	caee <ocrypto_bigint_cswap256>
   20f98:	b008      	add	sp, #32
   20f9a:	bd70      	pop	{r4, r5, r6, pc}

00020f9c <ocrypto_mod_p256_toBytes>:
   20f9c:	69cb      	ldr	r3, [r1, #28]
   20f9e:	ba1b      	rev	r3, r3
   20fa0:	6003      	str	r3, [r0, #0]
   20fa2:	698b      	ldr	r3, [r1, #24]
   20fa4:	ba1b      	rev	r3, r3
   20fa6:	6043      	str	r3, [r0, #4]
   20fa8:	694b      	ldr	r3, [r1, #20]
   20faa:	ba1b      	rev	r3, r3
   20fac:	6083      	str	r3, [r0, #8]
   20fae:	690b      	ldr	r3, [r1, #16]
   20fb0:	ba1b      	rev	r3, r3
   20fb2:	60c3      	str	r3, [r0, #12]
   20fb4:	68cb      	ldr	r3, [r1, #12]
   20fb6:	ba1b      	rev	r3, r3
   20fb8:	6103      	str	r3, [r0, #16]
   20fba:	688b      	ldr	r3, [r1, #8]
   20fbc:	ba1b      	rev	r3, r3
   20fbe:	6143      	str	r3, [r0, #20]
   20fc0:	684b      	ldr	r3, [r1, #4]
   20fc2:	ba1b      	rev	r3, r3
   20fc4:	6183      	str	r3, [r0, #24]
   20fc6:	680b      	ldr	r3, [r1, #0]
   20fc8:	ba1b      	rev	r3, r3
   20fca:	61c3      	str	r3, [r0, #28]
   20fcc:	4770      	bx	lr
   20fce:	bf00      	nop

00020fd0 <ocrypto_mod_p256_invert>:
   20fd0:	b570      	push	{r4, r5, r6, lr}
   20fd2:	460d      	mov	r5, r1
   20fd4:	2405      	movs	r4, #5
   20fd6:	b098      	sub	sp, #96	; 0x60
   20fd8:	4606      	mov	r6, r0
   20fda:	a810      	add	r0, sp, #64	; 0x40
   20fdc:	f7ec f8a4 	bl	d128 <ocrypto_mod_p256_square>
   20fe0:	462a      	mov	r2, r5
   20fe2:	a910      	add	r1, sp, #64	; 0x40
   20fe4:	4668      	mov	r0, sp
   20fe6:	f7ec f8a0 	bl	d12a <ocrypto_mod_p256_mul>
   20fea:	4669      	mov	r1, sp
   20fec:	a810      	add	r0, sp, #64	; 0x40
   20fee:	f7ec f89b 	bl	d128 <ocrypto_mod_p256_square>
   20ff2:	a910      	add	r1, sp, #64	; 0x40
   20ff4:	4608      	mov	r0, r1
   20ff6:	f7ec f897 	bl	d128 <ocrypto_mod_p256_square>
   20ffa:	466a      	mov	r2, sp
   20ffc:	a910      	add	r1, sp, #64	; 0x40
   20ffe:	a808      	add	r0, sp, #32
   21000:	f7ec f893 	bl	d12a <ocrypto_mod_p256_mul>
   21004:	a908      	add	r1, sp, #32
   21006:	a810      	add	r0, sp, #64	; 0x40
   21008:	f7ec f88e 	bl	d128 <ocrypto_mod_p256_square>
   2100c:	a910      	add	r1, sp, #64	; 0x40
   2100e:	4608      	mov	r0, r1
   21010:	f7ec f88a 	bl	d128 <ocrypto_mod_p256_square>
   21014:	a910      	add	r1, sp, #64	; 0x40
   21016:	4608      	mov	r0, r1
   21018:	f7ec f886 	bl	d128 <ocrypto_mod_p256_square>
   2101c:	a910      	add	r1, sp, #64	; 0x40
   2101e:	4608      	mov	r0, r1
   21020:	f7ec f882 	bl	d128 <ocrypto_mod_p256_square>
   21024:	a910      	add	r1, sp, #64	; 0x40
   21026:	aa08      	add	r2, sp, #32
   21028:	4608      	mov	r0, r1
   2102a:	f7ec f87e 	bl	d12a <ocrypto_mod_p256_mul>
   2102e:	a910      	add	r1, sp, #64	; 0x40
   21030:	4608      	mov	r0, r1
   21032:	f7ec f879 	bl	d128 <ocrypto_mod_p256_square>
   21036:	a910      	add	r1, sp, #64	; 0x40
   21038:	4608      	mov	r0, r1
   2103a:	f7ec f875 	bl	d128 <ocrypto_mod_p256_square>
   2103e:	a910      	add	r1, sp, #64	; 0x40
   21040:	466a      	mov	r2, sp
   21042:	a808      	add	r0, sp, #32
   21044:	f7ec f871 	bl	d12a <ocrypto_mod_p256_mul>
   21048:	a908      	add	r1, sp, #32
   2104a:	a810      	add	r0, sp, #64	; 0x40
   2104c:	f7ec f86c 	bl	d128 <ocrypto_mod_p256_square>
   21050:	a910      	add	r1, sp, #64	; 0x40
   21052:	4608      	mov	r0, r1
   21054:	f7ec f868 	bl	d128 <ocrypto_mod_p256_square>
   21058:	3c01      	subs	r4, #1
   2105a:	a910      	add	r1, sp, #64	; 0x40
   2105c:	d1f5      	bne.n	2104a <ocrypto_mod_p256_invert+0x7a>
   2105e:	aa08      	add	r2, sp, #32
   21060:	4608      	mov	r0, r1
   21062:	f7ec f862 	bl	d12a <ocrypto_mod_p256_mul>
   21066:	2405      	movs	r4, #5
   21068:	a910      	add	r1, sp, #64	; 0x40
   2106a:	4608      	mov	r0, r1
   2106c:	f7ec f85c 	bl	d128 <ocrypto_mod_p256_square>
   21070:	a910      	add	r1, sp, #64	; 0x40
   21072:	4608      	mov	r0, r1
   21074:	f7ec f858 	bl	d128 <ocrypto_mod_p256_square>
   21078:	3c01      	subs	r4, #1
   2107a:	d1f5      	bne.n	21068 <ocrypto_mod_p256_invert+0x98>
   2107c:	a910      	add	r1, sp, #64	; 0x40
   2107e:	aa08      	add	r2, sp, #32
   21080:	4608      	mov	r0, r1
   21082:	f7ec f852 	bl	d12a <ocrypto_mod_p256_mul>
   21086:	a910      	add	r1, sp, #64	; 0x40
   21088:	a808      	add	r0, sp, #32
   2108a:	f7ec f84d 	bl	d128 <ocrypto_mod_p256_square>
   2108e:	a908      	add	r1, sp, #32
   21090:	4608      	mov	r0, r1
   21092:	f7ec f849 	bl	d128 <ocrypto_mod_p256_square>
   21096:	a908      	add	r1, sp, #32
   21098:	466a      	mov	r2, sp
   2109a:	4668      	mov	r0, sp
   2109c:	f7ec f845 	bl	d12a <ocrypto_mod_p256_mul>
   210a0:	2410      	movs	r4, #16
   210a2:	4669      	mov	r1, sp
   210a4:	a810      	add	r0, sp, #64	; 0x40
   210a6:	f7ec f83f 	bl	d128 <ocrypto_mod_p256_square>
   210aa:	a910      	add	r1, sp, #64	; 0x40
   210ac:	4608      	mov	r0, r1
   210ae:	f7ec f83b 	bl	d128 <ocrypto_mod_p256_square>
   210b2:	3c01      	subs	r4, #1
   210b4:	a910      	add	r1, sp, #64	; 0x40
   210b6:	d1f5      	bne.n	210a4 <ocrypto_mod_p256_invert+0xd4>
   210b8:	462a      	mov	r2, r5
   210ba:	4608      	mov	r0, r1
   210bc:	f7ec f835 	bl	d12a <ocrypto_mod_p256_mul>
   210c0:	2440      	movs	r4, #64	; 0x40
   210c2:	a910      	add	r1, sp, #64	; 0x40
   210c4:	4608      	mov	r0, r1
   210c6:	f7ec f82f 	bl	d128 <ocrypto_mod_p256_square>
   210ca:	a910      	add	r1, sp, #64	; 0x40
   210cc:	4608      	mov	r0, r1
   210ce:	f7ec f82b 	bl	d128 <ocrypto_mod_p256_square>
   210d2:	3c01      	subs	r4, #1
   210d4:	d1f5      	bne.n	210c2 <ocrypto_mod_p256_invert+0xf2>
   210d6:	a910      	add	r1, sp, #64	; 0x40
   210d8:	466a      	mov	r2, sp
   210da:	4608      	mov	r0, r1
   210dc:	f7ec f825 	bl	d12a <ocrypto_mod_p256_mul>
   210e0:	2410      	movs	r4, #16
   210e2:	a910      	add	r1, sp, #64	; 0x40
   210e4:	4608      	mov	r0, r1
   210e6:	f7ec f81f 	bl	d128 <ocrypto_mod_p256_square>
   210ea:	a910      	add	r1, sp, #64	; 0x40
   210ec:	4608      	mov	r0, r1
   210ee:	f7ec f81b 	bl	d128 <ocrypto_mod_p256_square>
   210f2:	3c01      	subs	r4, #1
   210f4:	d1f5      	bne.n	210e2 <ocrypto_mod_p256_invert+0x112>
   210f6:	a910      	add	r1, sp, #64	; 0x40
   210f8:	466a      	mov	r2, sp
   210fa:	4608      	mov	r0, r1
   210fc:	f7ec f815 	bl	d12a <ocrypto_mod_p256_mul>
   21100:	2410      	movs	r4, #16
   21102:	a910      	add	r1, sp, #64	; 0x40
   21104:	4608      	mov	r0, r1
   21106:	f7ec f80f 	bl	d128 <ocrypto_mod_p256_square>
   2110a:	a910      	add	r1, sp, #64	; 0x40
   2110c:	4608      	mov	r0, r1
   2110e:	f7ec f80b 	bl	d128 <ocrypto_mod_p256_square>
   21112:	3c01      	subs	r4, #1
   21114:	d1f5      	bne.n	21102 <ocrypto_mod_p256_invert+0x132>
   21116:	a910      	add	r1, sp, #64	; 0x40
   21118:	aa08      	add	r2, sp, #32
   2111a:	4608      	mov	r0, r1
   2111c:	f7ec f805 	bl	d12a <ocrypto_mod_p256_mul>
   21120:	462a      	mov	r2, r5
   21122:	a910      	add	r1, sp, #64	; 0x40
   21124:	4630      	mov	r0, r6
   21126:	f7ec f800 	bl	d12a <ocrypto_mod_p256_mul>
   2112a:	b018      	add	sp, #96	; 0x60
   2112c:	bd70      	pop	{r4, r5, r6, pc}
   2112e:	bf00      	nop

00021130 <ocrypto_sc_p256_from32bytes>:
   21130:	b538      	push	{r3, r4, r5, lr}
   21132:	460b      	mov	r3, r1
   21134:	680a      	ldr	r2, [r1, #0]
   21136:	4d12      	ldr	r5, [pc, #72]	; (21180 <ocrypto_sc_p256_from32bytes+0x50>)
   21138:	ba12      	rev	r2, r2
   2113a:	61c2      	str	r2, [r0, #28]
   2113c:	684a      	ldr	r2, [r1, #4]
   2113e:	4601      	mov	r1, r0
   21140:	ba12      	rev	r2, r2
   21142:	6182      	str	r2, [r0, #24]
   21144:	689a      	ldr	r2, [r3, #8]
   21146:	4604      	mov	r4, r0
   21148:	ba12      	rev	r2, r2
   2114a:	6142      	str	r2, [r0, #20]
   2114c:	68da      	ldr	r2, [r3, #12]
   2114e:	ba12      	rev	r2, r2
   21150:	6102      	str	r2, [r0, #16]
   21152:	691a      	ldr	r2, [r3, #16]
   21154:	ba12      	rev	r2, r2
   21156:	60c2      	str	r2, [r0, #12]
   21158:	695a      	ldr	r2, [r3, #20]
   2115a:	ba12      	rev	r2, r2
   2115c:	6082      	str	r2, [r0, #8]
   2115e:	699a      	ldr	r2, [r3, #24]
   21160:	ba12      	rev	r2, r2
   21162:	6042      	str	r2, [r0, #4]
   21164:	69db      	ldr	r3, [r3, #28]
   21166:	462a      	mov	r2, r5
   21168:	ba1b      	rev	r3, r3
   2116a:	6003      	str	r3, [r0, #0]
   2116c:	f7eb fc34 	bl	c9d8 <ocrypto_bigint_sub256>
   21170:	4629      	mov	r1, r5
   21172:	4602      	mov	r2, r0
   21174:	4620      	mov	r0, r4
   21176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2117a:	f7eb bc4d 	b.w	ca18 <ocrypto_bigint_cadd256>
   2117e:	bf00      	nop
   21180:	00026c84 	.word	0x00026c84

00021184 <p256_zdblu>:
   21184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21188:	4607      	mov	r7, r0
   2118a:	460d      	mov	r5, r1
   2118c:	4690      	mov	r8, r2
   2118e:	b088      	sub	sp, #32
   21190:	f102 0120 	add.w	r1, r2, #32
   21194:	4668      	mov	r0, sp
   21196:	f107 0620 	add.w	r6, r7, #32
   2119a:	f7eb ffc5 	bl	d128 <ocrypto_mod_p256_square>
   2119e:	466a      	mov	r2, sp
   211a0:	4669      	mov	r1, sp
   211a2:	4668      	mov	r0, sp
   211a4:	f7eb ff54 	bl	d050 <ocrypto_mod_p256_add>
   211a8:	4630      	mov	r0, r6
   211aa:	4669      	mov	r1, sp
   211ac:	f7eb ffbc 	bl	d128 <ocrypto_mod_p256_square>
   211b0:	4632      	mov	r2, r6
   211b2:	4631      	mov	r1, r6
   211b4:	4630      	mov	r0, r6
   211b6:	f105 0420 	add.w	r4, r5, #32
   211ba:	f7eb ff49 	bl	d050 <ocrypto_mod_p256_add>
   211be:	466a      	mov	r2, sp
   211c0:	4669      	mov	r1, sp
   211c2:	4668      	mov	r0, sp
   211c4:	f7eb ff44 	bl	d050 <ocrypto_mod_p256_add>
   211c8:	4620      	mov	r0, r4
   211ca:	4641      	mov	r1, r8
   211cc:	f7eb ffac 	bl	d128 <ocrypto_mod_p256_square>
   211d0:	466a      	mov	r2, sp
   211d2:	4641      	mov	r1, r8
   211d4:	4638      	mov	r0, r7
   211d6:	f7eb ffa8 	bl	d12a <ocrypto_mod_p256_mul>
   211da:	4622      	mov	r2, r4
   211dc:	4621      	mov	r1, r4
   211de:	4668      	mov	r0, sp
   211e0:	f7eb ff36 	bl	d050 <ocrypto_mod_p256_add>
   211e4:	4622      	mov	r2, r4
   211e6:	4669      	mov	r1, sp
   211e8:	4668      	mov	r0, sp
   211ea:	f7eb ff31 	bl	d050 <ocrypto_mod_p256_add>
   211ee:	4669      	mov	r1, sp
   211f0:	4668      	mov	r0, sp
   211f2:	4a11      	ldr	r2, [pc, #68]	; (21238 <p256_zdblu+0xb4>)
   211f4:	f7eb ff2c 	bl	d050 <ocrypto_mod_p256_add>
   211f8:	4669      	mov	r1, sp
   211fa:	4628      	mov	r0, r5
   211fc:	f7eb ff94 	bl	d128 <ocrypto_mod_p256_square>
   21200:	463a      	mov	r2, r7
   21202:	4629      	mov	r1, r5
   21204:	4628      	mov	r0, r5
   21206:	f7eb ff62 	bl	d0ce <ocrypto_mod_p256_sub>
   2120a:	463a      	mov	r2, r7
   2120c:	4629      	mov	r1, r5
   2120e:	4628      	mov	r0, r5
   21210:	f7eb ff5d 	bl	d0ce <ocrypto_mod_p256_sub>
   21214:	462a      	mov	r2, r5
   21216:	4639      	mov	r1, r7
   21218:	4620      	mov	r0, r4
   2121a:	f7eb ff58 	bl	d0ce <ocrypto_mod_p256_sub>
   2121e:	466a      	mov	r2, sp
   21220:	4621      	mov	r1, r4
   21222:	4620      	mov	r0, r4
   21224:	f7eb ff81 	bl	d12a <ocrypto_mod_p256_mul>
   21228:	4632      	mov	r2, r6
   2122a:	4621      	mov	r1, r4
   2122c:	4620      	mov	r0, r4
   2122e:	f7eb ff4e 	bl	d0ce <ocrypto_mod_p256_sub>
   21232:	b008      	add	sp, #32
   21234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21238:	00026d24 	.word	0x00026d24

0002123c <p256_zaddc>:
   2123c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2123e:	4604      	mov	r4, r0
   21240:	460e      	mov	r6, r1
   21242:	b099      	sub	sp, #100	; 0x64
   21244:	460a      	mov	r2, r1
   21246:	4601      	mov	r1, r0
   21248:	4668      	mov	r0, sp
   2124a:	f7eb ff40 	bl	d0ce <ocrypto_mod_p256_sub>
   2124e:	4669      	mov	r1, sp
   21250:	4668      	mov	r0, sp
   21252:	f7eb ff69 	bl	d128 <ocrypto_mod_p256_square>
   21256:	466a      	mov	r2, sp
   21258:	4621      	mov	r1, r4
   2125a:	a808      	add	r0, sp, #32
   2125c:	f106 0520 	add.w	r5, r6, #32
   21260:	f104 0720 	add.w	r7, r4, #32
   21264:	f7eb ff61 	bl	d12a <ocrypto_mod_p256_mul>
   21268:	466a      	mov	r2, sp
   2126a:	4631      	mov	r1, r6
   2126c:	4668      	mov	r0, sp
   2126e:	f7eb ff5c 	bl	d12a <ocrypto_mod_p256_mul>
   21272:	4639      	mov	r1, r7
   21274:	462a      	mov	r2, r5
   21276:	a810      	add	r0, sp, #64	; 0x40
   21278:	f7eb feea 	bl	d050 <ocrypto_mod_p256_add>
   2127c:	462a      	mov	r2, r5
   2127e:	4639      	mov	r1, r7
   21280:	4628      	mov	r0, r5
   21282:	f7eb ff24 	bl	d0ce <ocrypto_mod_p256_sub>
   21286:	4629      	mov	r1, r5
   21288:	4630      	mov	r0, r6
   2128a:	f7eb ff4d 	bl	d128 <ocrypto_mod_p256_square>
   2128e:	466a      	mov	r2, sp
   21290:	a908      	add	r1, sp, #32
   21292:	4620      	mov	r0, r4
   21294:	f7eb fedc 	bl	d050 <ocrypto_mod_p256_add>
   21298:	4622      	mov	r2, r4
   2129a:	4631      	mov	r1, r6
   2129c:	4630      	mov	r0, r6
   2129e:	f7eb ff16 	bl	d0ce <ocrypto_mod_p256_sub>
   212a2:	466a      	mov	r2, sp
   212a4:	a908      	add	r1, sp, #32
   212a6:	4668      	mov	r0, sp
   212a8:	f7eb ff11 	bl	d0ce <ocrypto_mod_p256_sub>
   212ac:	466a      	mov	r2, sp
   212ae:	4639      	mov	r1, r7
   212b0:	4638      	mov	r0, r7
   212b2:	f7eb ff3a 	bl	d12a <ocrypto_mod_p256_mul>
   212b6:	4632      	mov	r2, r6
   212b8:	a908      	add	r1, sp, #32
   212ba:	4668      	mov	r0, sp
   212bc:	f7eb ff07 	bl	d0ce <ocrypto_mod_p256_sub>
   212c0:	466a      	mov	r2, sp
   212c2:	4629      	mov	r1, r5
   212c4:	4628      	mov	r0, r5
   212c6:	f7eb ff30 	bl	d12a <ocrypto_mod_p256_mul>
   212ca:	463a      	mov	r2, r7
   212cc:	4629      	mov	r1, r5
   212ce:	4628      	mov	r0, r5
   212d0:	f7eb fefd 	bl	d0ce <ocrypto_mod_p256_sub>
   212d4:	a910      	add	r1, sp, #64	; 0x40
   212d6:	4668      	mov	r0, sp
   212d8:	f7eb ff26 	bl	d128 <ocrypto_mod_p256_square>
   212dc:	4622      	mov	r2, r4
   212de:	4669      	mov	r1, sp
   212e0:	4620      	mov	r0, r4
   212e2:	f7eb fef4 	bl	d0ce <ocrypto_mod_p256_sub>
   212e6:	a908      	add	r1, sp, #32
   212e8:	4622      	mov	r2, r4
   212ea:	4608      	mov	r0, r1
   212ec:	f7eb feef 	bl	d0ce <ocrypto_mod_p256_sub>
   212f0:	a910      	add	r1, sp, #64	; 0x40
   212f2:	aa08      	add	r2, sp, #32
   212f4:	4608      	mov	r0, r1
   212f6:	f7eb ff18 	bl	d12a <ocrypto_mod_p256_mul>
   212fa:	463a      	mov	r2, r7
   212fc:	a910      	add	r1, sp, #64	; 0x40
   212fe:	4638      	mov	r0, r7
   21300:	f7eb fee5 	bl	d0ce <ocrypto_mod_p256_sub>
   21304:	b019      	add	sp, #100	; 0x64
   21306:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021308 <p256_zaddu>:
   21308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2130c:	460c      	mov	r4, r1
   2130e:	4605      	mov	r5, r0
   21310:	4690      	mov	r8, r2
   21312:	b088      	sub	sp, #32
   21314:	4622      	mov	r2, r4
   21316:	4601      	mov	r1, r0
   21318:	4668      	mov	r0, sp
   2131a:	f7eb fed8 	bl	d0ce <ocrypto_mod_p256_sub>
   2131e:	4669      	mov	r1, sp
   21320:	4668      	mov	r0, sp
   21322:	f7eb ff01 	bl	d128 <ocrypto_mod_p256_square>
   21326:	466a      	mov	r2, sp
   21328:	4629      	mov	r1, r5
   2132a:	4628      	mov	r0, r5
   2132c:	f104 0620 	add.w	r6, r4, #32
   21330:	f7eb fefb 	bl	d12a <ocrypto_mod_p256_mul>
   21334:	f105 0720 	add.w	r7, r5, #32
   21338:	466a      	mov	r2, sp
   2133a:	4621      	mov	r1, r4
   2133c:	4668      	mov	r0, sp
   2133e:	f7eb fef4 	bl	d12a <ocrypto_mod_p256_mul>
   21342:	4632      	mov	r2, r6
   21344:	4630      	mov	r0, r6
   21346:	4639      	mov	r1, r7
   21348:	f7eb fec1 	bl	d0ce <ocrypto_mod_p256_sub>
   2134c:	4631      	mov	r1, r6
   2134e:	4620      	mov	r0, r4
   21350:	f7eb feea 	bl	d128 <ocrypto_mod_p256_square>
   21354:	462a      	mov	r2, r5
   21356:	4621      	mov	r1, r4
   21358:	4620      	mov	r0, r4
   2135a:	f7eb feb8 	bl	d0ce <ocrypto_mod_p256_sub>
   2135e:	466a      	mov	r2, sp
   21360:	4621      	mov	r1, r4
   21362:	4620      	mov	r0, r4
   21364:	f7eb feb3 	bl	d0ce <ocrypto_mod_p256_sub>
   21368:	466a      	mov	r2, sp
   2136a:	4629      	mov	r1, r5
   2136c:	4640      	mov	r0, r8
   2136e:	f7eb feae 	bl	d0ce <ocrypto_mod_p256_sub>
   21372:	4642      	mov	r2, r8
   21374:	4639      	mov	r1, r7
   21376:	4638      	mov	r0, r7
   21378:	f7eb fed7 	bl	d12a <ocrypto_mod_p256_mul>
   2137c:	4622      	mov	r2, r4
   2137e:	4629      	mov	r1, r5
   21380:	4668      	mov	r0, sp
   21382:	f7eb fea4 	bl	d0ce <ocrypto_mod_p256_sub>
   21386:	466a      	mov	r2, sp
   21388:	4631      	mov	r1, r6
   2138a:	4630      	mov	r0, r6
   2138c:	f7eb fecd 	bl	d12a <ocrypto_mod_p256_mul>
   21390:	463a      	mov	r2, r7
   21392:	4631      	mov	r1, r6
   21394:	4630      	mov	r0, r6
   21396:	f7eb fe9a 	bl	d0ce <ocrypto_mod_p256_sub>
   2139a:	b008      	add	sp, #32
   2139c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000213a0 <ocrypto_curve_p256_to64bytes>:
   213a0:	b538      	push	{r3, r4, r5, lr}
   213a2:	4604      	mov	r4, r0
   213a4:	460d      	mov	r5, r1
   213a6:	f7ff fdf9 	bl	20f9c <ocrypto_mod_p256_toBytes>
   213aa:	f105 0120 	add.w	r1, r5, #32
   213ae:	f104 0020 	add.w	r0, r4, #32
   213b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   213b6:	f7ff bdf1 	b.w	20f9c <ocrypto_mod_p256_toBytes>
   213ba:	bf00      	nop

000213bc <ocrypto_curve_p256_scalarmult>:
   213bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   213c0:	b0b8      	sub	sp, #224	; 0xe0
   213c2:	468a      	mov	sl, r1
   213c4:	4681      	mov	r9, r0
   213c6:	4611      	mov	r1, r2
   213c8:	a810      	add	r0, sp, #64	; 0x40
   213ca:	4a51      	ldr	r2, [pc, #324]	; (21510 <ocrypto_curve_p256_scalarmult+0x154>)
   213cc:	f7eb fb04 	bl	c9d8 <ocrypto_bigint_sub256>
   213d0:	4950      	ldr	r1, [pc, #320]	; (21514 <ocrypto_curve_p256_scalarmult+0x158>)
   213d2:	4602      	mov	r2, r0
   213d4:	a810      	add	r0, sp, #64	; 0x40
   213d6:	f7eb fb1f 	bl	ca18 <ocrypto_bigint_cadd256>
   213da:	4680      	mov	r8, r0
   213dc:	9f17      	ldr	r7, [sp, #92]	; 0x5c
   213de:	494c      	ldr	r1, [pc, #304]	; (21510 <ocrypto_curve_p256_scalarmult+0x154>)
   213e0:	ea08 77d7 	and.w	r7, r8, r7, lsr #31
   213e4:	f1c7 0201 	rsb	r2, r7, #1
   213e8:	a810      	add	r0, sp, #64	; 0x40
   213ea:	f7eb fb15 	bl	ca18 <ocrypto_bigint_cadd256>
   213ee:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   213f0:	4652      	mov	r2, sl
   213f2:	43ed      	mvns	r5, r5
   213f4:	a928      	add	r1, sp, #160	; 0xa0
   213f6:	a818      	add	r0, sp, #96	; 0x60
   213f8:	f7ff fec4 	bl	21184 <p256_zdblu>
   213fc:	0fed      	lsrs	r5, r5, #31
   213fe:	a920      	add	r1, sp, #128	; 0x80
   21400:	f1c5 0201 	rsb	r2, r5, #1
   21404:	4608      	mov	r0, r1
   21406:	f7ff fdad 	bl	20f64 <ocrypto_mod_p256_cneg>
   2140a:	26fe      	movs	r6, #254	; 0xfe
   2140c:	f1c8 0801 	rsb	r8, r8, #1
   21410:	466a      	mov	r2, sp
   21412:	a918      	add	r1, sp, #96	; 0x60
   21414:	a828      	add	r0, sp, #160	; 0xa0
   21416:	f7ff ff77 	bl	21308 <p256_zaddu>
   2141a:	1173      	asrs	r3, r6, #5
   2141c:	aa38      	add	r2, sp, #224	; 0xe0
   2141e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   21422:	f853 4ca0 	ldr.w	r4, [r3, #-160]
   21426:	f006 031f 	and.w	r3, r6, #31
   2142a:	40dc      	lsrs	r4, r3
   2142c:	f004 0401 	and.w	r4, r4, #1
   21430:	4065      	eors	r5, r4
   21432:	462a      	mov	r2, r5
   21434:	a928      	add	r1, sp, #160	; 0xa0
   21436:	a818      	add	r0, sp, #96	; 0x60
   21438:	f7eb fb59 	bl	caee <ocrypto_bigint_cswap256>
   2143c:	462a      	mov	r2, r5
   2143e:	a930      	add	r1, sp, #192	; 0xc0
   21440:	a820      	add	r0, sp, #128	; 0x80
   21442:	f7eb fb54 	bl	caee <ocrypto_bigint_cswap256>
   21446:	3e01      	subs	r6, #1
   21448:	a928      	add	r1, sp, #160	; 0xa0
   2144a:	a818      	add	r0, sp, #96	; 0x60
   2144c:	f7ff fef6 	bl	2123c <p256_zaddc>
   21450:	1c73      	adds	r3, r6, #1
   21452:	4625      	mov	r5, r4
   21454:	d1dc      	bne.n	21410 <ocrypto_curve_p256_scalarmult+0x54>
   21456:	f1c4 0201 	rsb	r2, r4, #1
   2145a:	a808      	add	r0, sp, #32
   2145c:	a920      	add	r1, sp, #128	; 0x80
   2145e:	f7ff fd81 	bl	20f64 <ocrypto_mod_p256_cneg>
   21462:	407d      	eors	r5, r7
   21464:	466a      	mov	r2, sp
   21466:	a918      	add	r1, sp, #96	; 0x60
   21468:	a828      	add	r0, sp, #160	; 0xa0
   2146a:	f7ff ff4d 	bl	21308 <p256_zaddu>
   2146e:	a928      	add	r1, sp, #160	; 0xa0
   21470:	462a      	mov	r2, r5
   21472:	a818      	add	r0, sp, #96	; 0x60
   21474:	f7eb fb3b 	bl	caee <ocrypto_bigint_cswap256>
   21478:	462a      	mov	r2, r5
   2147a:	a930      	add	r1, sp, #192	; 0xc0
   2147c:	a820      	add	r0, sp, #128	; 0x80
   2147e:	f7eb fb36 	bl	caee <ocrypto_bigint_cswap256>
   21482:	a908      	add	r1, sp, #32
   21484:	466a      	mov	r2, sp
   21486:	4608      	mov	r0, r1
   21488:	f7eb fe4f 	bl	d12a <ocrypto_mod_p256_mul>
   2148c:	a908      	add	r1, sp, #32
   2148e:	4608      	mov	r0, r1
   21490:	f7ff fd9e 	bl	20fd0 <ocrypto_mod_p256_invert>
   21494:	a908      	add	r1, sp, #32
   21496:	f109 0420 	add.w	r4, r9, #32
   2149a:	f10a 0220 	add.w	r2, sl, #32
   2149e:	4608      	mov	r0, r1
   214a0:	f7eb fe43 	bl	d12a <ocrypto_mod_p256_mul>
   214a4:	a920      	add	r1, sp, #128	; 0x80
   214a6:	aa08      	add	r2, sp, #32
   214a8:	4620      	mov	r0, r4
   214aa:	f7eb fe3e 	bl	d12a <ocrypto_mod_p256_mul>
   214ae:	aa08      	add	r2, sp, #32
   214b0:	a918      	add	r1, sp, #96	; 0x60
   214b2:	4668      	mov	r0, sp
   214b4:	f7eb fe39 	bl	d12a <ocrypto_mod_p256_mul>
   214b8:	4669      	mov	r1, sp
   214ba:	4668      	mov	r0, sp
   214bc:	f7eb fe34 	bl	d128 <ocrypto_mod_p256_square>
   214c0:	aa18      	add	r2, sp, #96	; 0x60
   214c2:	4669      	mov	r1, sp
   214c4:	a808      	add	r0, sp, #32
   214c6:	f7eb fe30 	bl	d12a <ocrypto_mod_p256_mul>
   214ca:	4621      	mov	r1, r4
   214cc:	4668      	mov	r0, sp
   214ce:	f7eb fe2b 	bl	d128 <ocrypto_mod_p256_square>
   214d2:	aa08      	add	r2, sp, #32
   214d4:	4669      	mov	r1, sp
   214d6:	4610      	mov	r0, r2
   214d8:	f7eb fdf9 	bl	d0ce <ocrypto_mod_p256_sub>
   214dc:	a908      	add	r1, sp, #32
   214de:	4a0e      	ldr	r2, [pc, #56]	; (21518 <ocrypto_curve_p256_scalarmult+0x15c>)
   214e0:	4668      	mov	r0, sp
   214e2:	f7eb fdf4 	bl	d0ce <ocrypto_mod_p256_sub>
   214e6:	4620      	mov	r0, r4
   214e8:	2120      	movs	r1, #32
   214ea:	f7eb fd96 	bl	d01a <ocrypto_constant_time_is_zero>
   214ee:	a908      	add	r1, sp, #32
   214f0:	4243      	negs	r3, r0
   214f2:	4602      	mov	r2, r0
   214f4:	4668      	mov	r0, sp
   214f6:	ea43 0808 	orr.w	r8, r3, r8
   214fa:	f7eb faf8 	bl	caee <ocrypto_bigint_cswap256>
   214fe:	4648      	mov	r0, r9
   21500:	4669      	mov	r1, sp
   21502:	4a06      	ldr	r2, [pc, #24]	; (2151c <ocrypto_curve_p256_scalarmult+0x160>)
   21504:	f7eb fe11 	bl	d12a <ocrypto_mod_p256_mul>
   21508:	4640      	mov	r0, r8
   2150a:	b038      	add	sp, #224	; 0xe0
   2150c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21510:	00026d64 	.word	0x00026d64
   21514:	00026ce4 	.word	0x00026ce4
   21518:	00026d44 	.word	0x00026d44
   2151c:	00026d04 	.word	0x00026d04

00021520 <ocrypto_curve_p256_scalarmult_base>:
   21520:	460a      	mov	r2, r1
   21522:	4901      	ldr	r1, [pc, #4]	; (21528 <ocrypto_curve_p256_scalarmult_base+0x8>)
   21524:	f7ff bf4a 	b.w	213bc <ocrypto_curve_p256_scalarmult>
   21528:	00026ca4 	.word	0x00026ca4

0002152c <__assert_func>:
   2152c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2152e:	461c      	mov	r4, r3
   21530:	4b09      	ldr	r3, [pc, #36]	; (21558 <__assert_func+0x2c>)
   21532:	4605      	mov	r5, r0
   21534:	681b      	ldr	r3, [r3, #0]
   21536:	68d8      	ldr	r0, [r3, #12]
   21538:	b152      	cbz	r2, 21550 <__assert_func+0x24>
   2153a:	4b08      	ldr	r3, [pc, #32]	; (2155c <__assert_func+0x30>)
   2153c:	9100      	str	r1, [sp, #0]
   2153e:	4908      	ldr	r1, [pc, #32]	; (21560 <__assert_func+0x34>)
   21540:	e9cd 3201 	strd	r3, r2, [sp, #4]
   21544:	462b      	mov	r3, r5
   21546:	4622      	mov	r2, r4
   21548:	f000 f80e 	bl	21568 <fiprintf>
   2154c:	f003 fbb8 	bl	24cc0 <abort>
   21550:	4b04      	ldr	r3, [pc, #16]	; (21564 <__assert_func+0x38>)
   21552:	461a      	mov	r2, r3
   21554:	e7f2      	b.n	2153c <__assert_func+0x10>
   21556:	bf00      	nop
   21558:	20024978 	.word	0x20024978
   2155c:	00027928 	.word	0x00027928
   21560:	00027935 	.word	0x00027935
   21564:	000271b3 	.word	0x000271b3

00021568 <fiprintf>:
   21568:	b40e      	push	{r1, r2, r3}
   2156a:	b503      	push	{r0, r1, lr}
   2156c:	ab03      	add	r3, sp, #12
   2156e:	4601      	mov	r1, r0
   21570:	4805      	ldr	r0, [pc, #20]	; (21588 <fiprintf+0x20>)
   21572:	f853 2b04 	ldr.w	r2, [r3], #4
   21576:	6800      	ldr	r0, [r0, #0]
   21578:	9301      	str	r3, [sp, #4]
   2157a:	f000 f815 	bl	215a8 <_vfiprintf_r>
   2157e:	b002      	add	sp, #8
   21580:	f85d eb04 	ldr.w	lr, [sp], #4
   21584:	b003      	add	sp, #12
   21586:	4770      	bx	lr
   21588:	20024978 	.word	0x20024978

0002158c <__locale_ctype_ptr>:
   2158c:	4b04      	ldr	r3, [pc, #16]	; (215a0 <__locale_ctype_ptr+0x14>)
   2158e:	4a05      	ldr	r2, [pc, #20]	; (215a4 <__locale_ctype_ptr+0x18>)
   21590:	681b      	ldr	r3, [r3, #0]
   21592:	6a1b      	ldr	r3, [r3, #32]
   21594:	2b00      	cmp	r3, #0
   21596:	bf08      	it	eq
   21598:	4613      	moveq	r3, r2
   2159a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   2159e:	4770      	bx	lr
   215a0:	20024978 	.word	0x20024978
   215a4:	200249dc 	.word	0x200249dc

000215a8 <_vfiprintf_r>:
   215a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   215ac:	460c      	mov	r4, r1
   215ae:	b09d      	sub	sp, #116	; 0x74
   215b0:	4617      	mov	r7, r2
   215b2:	461d      	mov	r5, r3
   215b4:	4606      	mov	r6, r0
   215b6:	b118      	cbz	r0, 215c0 <_vfiprintf_r+0x18>
   215b8:	6983      	ldr	r3, [r0, #24]
   215ba:	b90b      	cbnz	r3, 215c0 <_vfiprintf_r+0x18>
   215bc:	f000 fe56 	bl	2226c <__sinit>
   215c0:	4b7c      	ldr	r3, [pc, #496]	; (217b4 <_vfiprintf_r+0x20c>)
   215c2:	429c      	cmp	r4, r3
   215c4:	d158      	bne.n	21678 <_vfiprintf_r+0xd0>
   215c6:	6874      	ldr	r4, [r6, #4]
   215c8:	89a3      	ldrh	r3, [r4, #12]
   215ca:	0718      	lsls	r0, r3, #28
   215cc:	d55e      	bpl.n	2168c <_vfiprintf_r+0xe4>
   215ce:	6923      	ldr	r3, [r4, #16]
   215d0:	2b00      	cmp	r3, #0
   215d2:	d05b      	beq.n	2168c <_vfiprintf_r+0xe4>
   215d4:	2300      	movs	r3, #0
   215d6:	f04f 0b01 	mov.w	fp, #1
   215da:	9503      	str	r5, [sp, #12]
   215dc:	9309      	str	r3, [sp, #36]	; 0x24
   215de:	2320      	movs	r3, #32
   215e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   215e4:	2330      	movs	r3, #48	; 0x30
   215e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   215ea:	46b8      	mov	r8, r7
   215ec:	4645      	mov	r5, r8
   215ee:	f815 3b01 	ldrb.w	r3, [r5], #1
   215f2:	b10b      	cbz	r3, 215f8 <_vfiprintf_r+0x50>
   215f4:	2b25      	cmp	r3, #37	; 0x25
   215f6:	d154      	bne.n	216a2 <_vfiprintf_r+0xfa>
   215f8:	ebb8 0a07 	subs.w	sl, r8, r7
   215fc:	d00b      	beq.n	21616 <_vfiprintf_r+0x6e>
   215fe:	4653      	mov	r3, sl
   21600:	463a      	mov	r2, r7
   21602:	4621      	mov	r1, r4
   21604:	4630      	mov	r0, r6
   21606:	f003 f966 	bl	248d6 <__sfputs_r>
   2160a:	3001      	adds	r0, #1
   2160c:	f000 80c2 	beq.w	21794 <_vfiprintf_r+0x1ec>
   21610:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21612:	4453      	add	r3, sl
   21614:	9309      	str	r3, [sp, #36]	; 0x24
   21616:	f898 3000 	ldrb.w	r3, [r8]
   2161a:	2b00      	cmp	r3, #0
   2161c:	f000 80ba 	beq.w	21794 <_vfiprintf_r+0x1ec>
   21620:	2300      	movs	r3, #0
   21622:	f04f 32ff 	mov.w	r2, #4294967295
   21626:	9304      	str	r3, [sp, #16]
   21628:	9307      	str	r3, [sp, #28]
   2162a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2162e:	931a      	str	r3, [sp, #104]	; 0x68
   21630:	e9cd 2305 	strd	r2, r3, [sp, #20]
   21634:	46a8      	mov	r8, r5
   21636:	2205      	movs	r2, #5
   21638:	485f      	ldr	r0, [pc, #380]	; (217b8 <_vfiprintf_r+0x210>)
   2163a:	f818 1b01 	ldrb.w	r1, [r8], #1
   2163e:	f003 f903 	bl	24848 <memchr>
   21642:	9b04      	ldr	r3, [sp, #16]
   21644:	bb78      	cbnz	r0, 216a6 <_vfiprintf_r+0xfe>
   21646:	06d9      	lsls	r1, r3, #27
   21648:	bf44      	itt	mi
   2164a:	2220      	movmi	r2, #32
   2164c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   21650:	071a      	lsls	r2, r3, #28
   21652:	bf44      	itt	mi
   21654:	222b      	movmi	r2, #43	; 0x2b
   21656:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2165a:	782a      	ldrb	r2, [r5, #0]
   2165c:	2a2a      	cmp	r2, #42	; 0x2a
   2165e:	d02a      	beq.n	216b6 <_vfiprintf_r+0x10e>
   21660:	46a8      	mov	r8, r5
   21662:	9a07      	ldr	r2, [sp, #28]
   21664:	2000      	movs	r0, #0
   21666:	250a      	movs	r5, #10
   21668:	4641      	mov	r1, r8
   2166a:	f811 3b01 	ldrb.w	r3, [r1], #1
   2166e:	3b30      	subs	r3, #48	; 0x30
   21670:	2b09      	cmp	r3, #9
   21672:	d969      	bls.n	21748 <_vfiprintf_r+0x1a0>
   21674:	b360      	cbz	r0, 216d0 <_vfiprintf_r+0x128>
   21676:	e024      	b.n	216c2 <_vfiprintf_r+0x11a>
   21678:	4b50      	ldr	r3, [pc, #320]	; (217bc <_vfiprintf_r+0x214>)
   2167a:	429c      	cmp	r4, r3
   2167c:	d101      	bne.n	21682 <_vfiprintf_r+0xda>
   2167e:	68b4      	ldr	r4, [r6, #8]
   21680:	e7a2      	b.n	215c8 <_vfiprintf_r+0x20>
   21682:	4b4f      	ldr	r3, [pc, #316]	; (217c0 <_vfiprintf_r+0x218>)
   21684:	429c      	cmp	r4, r3
   21686:	bf08      	it	eq
   21688:	68f4      	ldreq	r4, [r6, #12]
   2168a:	e79d      	b.n	215c8 <_vfiprintf_r+0x20>
   2168c:	4621      	mov	r1, r4
   2168e:	4630      	mov	r0, r6
   21690:	f000 fca6 	bl	21fe0 <__swsetup_r>
   21694:	2800      	cmp	r0, #0
   21696:	d09d      	beq.n	215d4 <_vfiprintf_r+0x2c>
   21698:	f04f 30ff 	mov.w	r0, #4294967295
   2169c:	b01d      	add	sp, #116	; 0x74
   2169e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   216a2:	46a8      	mov	r8, r5
   216a4:	e7a2      	b.n	215ec <_vfiprintf_r+0x44>
   216a6:	4a44      	ldr	r2, [pc, #272]	; (217b8 <_vfiprintf_r+0x210>)
   216a8:	4645      	mov	r5, r8
   216aa:	1a80      	subs	r0, r0, r2
   216ac:	fa0b f000 	lsl.w	r0, fp, r0
   216b0:	4318      	orrs	r0, r3
   216b2:	9004      	str	r0, [sp, #16]
   216b4:	e7be      	b.n	21634 <_vfiprintf_r+0x8c>
   216b6:	9a03      	ldr	r2, [sp, #12]
   216b8:	1d11      	adds	r1, r2, #4
   216ba:	6812      	ldr	r2, [r2, #0]
   216bc:	2a00      	cmp	r2, #0
   216be:	9103      	str	r1, [sp, #12]
   216c0:	db01      	blt.n	216c6 <_vfiprintf_r+0x11e>
   216c2:	9207      	str	r2, [sp, #28]
   216c4:	e004      	b.n	216d0 <_vfiprintf_r+0x128>
   216c6:	4252      	negs	r2, r2
   216c8:	f043 0302 	orr.w	r3, r3, #2
   216cc:	9207      	str	r2, [sp, #28]
   216ce:	9304      	str	r3, [sp, #16]
   216d0:	f898 3000 	ldrb.w	r3, [r8]
   216d4:	2b2e      	cmp	r3, #46	; 0x2e
   216d6:	d10e      	bne.n	216f6 <_vfiprintf_r+0x14e>
   216d8:	f898 3001 	ldrb.w	r3, [r8, #1]
   216dc:	2b2a      	cmp	r3, #42	; 0x2a
   216de:	d138      	bne.n	21752 <_vfiprintf_r+0x1aa>
   216e0:	9b03      	ldr	r3, [sp, #12]
   216e2:	f108 0802 	add.w	r8, r8, #2
   216e6:	1d1a      	adds	r2, r3, #4
   216e8:	681b      	ldr	r3, [r3, #0]
   216ea:	2b00      	cmp	r3, #0
   216ec:	9203      	str	r2, [sp, #12]
   216ee:	bfb8      	it	lt
   216f0:	f04f 33ff 	movlt.w	r3, #4294967295
   216f4:	9305      	str	r3, [sp, #20]
   216f6:	4d33      	ldr	r5, [pc, #204]	; (217c4 <_vfiprintf_r+0x21c>)
   216f8:	2203      	movs	r2, #3
   216fa:	f898 1000 	ldrb.w	r1, [r8]
   216fe:	4628      	mov	r0, r5
   21700:	f003 f8a2 	bl	24848 <memchr>
   21704:	b140      	cbz	r0, 21718 <_vfiprintf_r+0x170>
   21706:	2340      	movs	r3, #64	; 0x40
   21708:	1b40      	subs	r0, r0, r5
   2170a:	f108 0801 	add.w	r8, r8, #1
   2170e:	fa03 f000 	lsl.w	r0, r3, r0
   21712:	9b04      	ldr	r3, [sp, #16]
   21714:	4303      	orrs	r3, r0
   21716:	9304      	str	r3, [sp, #16]
   21718:	f898 1000 	ldrb.w	r1, [r8]
   2171c:	2206      	movs	r2, #6
   2171e:	482a      	ldr	r0, [pc, #168]	; (217c8 <_vfiprintf_r+0x220>)
   21720:	f108 0701 	add.w	r7, r8, #1
   21724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   21728:	f003 f88e 	bl	24848 <memchr>
   2172c:	2800      	cmp	r0, #0
   2172e:	d037      	beq.n	217a0 <_vfiprintf_r+0x1f8>
   21730:	4b26      	ldr	r3, [pc, #152]	; (217cc <_vfiprintf_r+0x224>)
   21732:	bb1b      	cbnz	r3, 2177c <_vfiprintf_r+0x1d4>
   21734:	9b03      	ldr	r3, [sp, #12]
   21736:	3307      	adds	r3, #7
   21738:	f023 0307 	bic.w	r3, r3, #7
   2173c:	3308      	adds	r3, #8
   2173e:	9303      	str	r3, [sp, #12]
   21740:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21742:	444b      	add	r3, r9
   21744:	9309      	str	r3, [sp, #36]	; 0x24
   21746:	e750      	b.n	215ea <_vfiprintf_r+0x42>
   21748:	fb05 3202 	mla	r2, r5, r2, r3
   2174c:	2001      	movs	r0, #1
   2174e:	4688      	mov	r8, r1
   21750:	e78a      	b.n	21668 <_vfiprintf_r+0xc0>
   21752:	2300      	movs	r3, #0
   21754:	f108 0801 	add.w	r8, r8, #1
   21758:	250a      	movs	r5, #10
   2175a:	4619      	mov	r1, r3
   2175c:	9305      	str	r3, [sp, #20]
   2175e:	4640      	mov	r0, r8
   21760:	f810 2b01 	ldrb.w	r2, [r0], #1
   21764:	3a30      	subs	r2, #48	; 0x30
   21766:	2a09      	cmp	r2, #9
   21768:	d903      	bls.n	21772 <_vfiprintf_r+0x1ca>
   2176a:	2b00      	cmp	r3, #0
   2176c:	d0c3      	beq.n	216f6 <_vfiprintf_r+0x14e>
   2176e:	9105      	str	r1, [sp, #20]
   21770:	e7c1      	b.n	216f6 <_vfiprintf_r+0x14e>
   21772:	fb05 2101 	mla	r1, r5, r1, r2
   21776:	2301      	movs	r3, #1
   21778:	4680      	mov	r8, r0
   2177a:	e7f0      	b.n	2175e <_vfiprintf_r+0x1b6>
   2177c:	ab03      	add	r3, sp, #12
   2177e:	4622      	mov	r2, r4
   21780:	a904      	add	r1, sp, #16
   21782:	4630      	mov	r0, r6
   21784:	9300      	str	r3, [sp, #0]
   21786:	4b12      	ldr	r3, [pc, #72]	; (217d0 <_vfiprintf_r+0x228>)
   21788:	f000 f824 	bl	217d4 <_printf_float>
   2178c:	f1b0 3fff 	cmp.w	r0, #4294967295
   21790:	4681      	mov	r9, r0
   21792:	d1d5      	bne.n	21740 <_vfiprintf_r+0x198>
   21794:	89a3      	ldrh	r3, [r4, #12]
   21796:	065b      	lsls	r3, r3, #25
   21798:	f53f af7e 	bmi.w	21698 <_vfiprintf_r+0xf0>
   2179c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2179e:	e77d      	b.n	2169c <_vfiprintf_r+0xf4>
   217a0:	ab03      	add	r3, sp, #12
   217a2:	4622      	mov	r2, r4
   217a4:	a904      	add	r1, sp, #16
   217a6:	4630      	mov	r0, r6
   217a8:	9300      	str	r3, [sp, #0]
   217aa:	4b09      	ldr	r3, [pc, #36]	; (217d0 <_vfiprintf_r+0x228>)
   217ac:	f000 fa52 	bl	21c54 <_printf_i>
   217b0:	e7ec      	b.n	2178c <_vfiprintf_r+0x1e4>
   217b2:	bf00      	nop
   217b4:	00026da8 	.word	0x00026da8
   217b8:	0002796a 	.word	0x0002796a
   217bc:	00026dc8 	.word	0x00026dc8
   217c0:	00026d88 	.word	0x00026d88
   217c4:	00027970 	.word	0x00027970
   217c8:	00027974 	.word	0x00027974
   217cc:	000217d5 	.word	0x000217d5
   217d0:	000248d7 	.word	0x000248d7

000217d4 <_printf_float>:
   217d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   217d8:	b08d      	sub	sp, #52	; 0x34
   217da:	460c      	mov	r4, r1
   217dc:	4616      	mov	r6, r2
   217de:	461f      	mov	r7, r3
   217e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   217e4:	4605      	mov	r5, r0
   217e6:	f000 fdad 	bl	22344 <_localeconv_r>
   217ea:	6803      	ldr	r3, [r0, #0]
   217ec:	4618      	mov	r0, r3
   217ee:	9304      	str	r3, [sp, #16]
   217f0:	f7ec fa7e 	bl	dcf0 <strlen>
   217f4:	2300      	movs	r3, #0
   217f6:	9005      	str	r0, [sp, #20]
   217f8:	930a      	str	r3, [sp, #40]	; 0x28
   217fa:	f8d8 3000 	ldr.w	r3, [r8]
   217fe:	f894 a018 	ldrb.w	sl, [r4, #24]
   21802:	3307      	adds	r3, #7
   21804:	f8d4 b000 	ldr.w	fp, [r4]
   21808:	f023 0307 	bic.w	r3, r3, #7
   2180c:	f103 0208 	add.w	r2, r3, #8
   21810:	f8c8 2000 	str.w	r2, [r8]
   21814:	e9d3 2300 	ldrd	r2, r3, [r3]
   21818:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   2181c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
   21820:	f04f 32ff 	mov.w	r2, #4294967295
   21824:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   21828:	f8cd 8018 	str.w	r8, [sp, #24]
   2182c:	9307      	str	r3, [sp, #28]
   2182e:	4ba7      	ldr	r3, [pc, #668]	; (21acc <_printf_float+0x2f8>)
   21830:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   21834:	f7ec fa14 	bl	dc60 <__aeabi_dcmpun>
   21838:	bb70      	cbnz	r0, 21898 <_printf_float+0xc4>
   2183a:	f04f 32ff 	mov.w	r2, #4294967295
   2183e:	4ba3      	ldr	r3, [pc, #652]	; (21acc <_printf_float+0x2f8>)
   21840:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   21844:	f7ec f9ee 	bl	dc24 <__aeabi_dcmple>
   21848:	bb30      	cbnz	r0, 21898 <_printf_float+0xc4>
   2184a:	2200      	movs	r2, #0
   2184c:	2300      	movs	r3, #0
   2184e:	4640      	mov	r0, r8
   21850:	4649      	mov	r1, r9
   21852:	f7ec f9dd 	bl	dc10 <__aeabi_dcmplt>
   21856:	b110      	cbz	r0, 2185e <_printf_float+0x8a>
   21858:	232d      	movs	r3, #45	; 0x2d
   2185a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2185e:	4a9c      	ldr	r2, [pc, #624]	; (21ad0 <_printf_float+0x2fc>)
   21860:	4b9c      	ldr	r3, [pc, #624]	; (21ad4 <_printf_float+0x300>)
   21862:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   21866:	bf8c      	ite	hi
   21868:	4690      	movhi	r8, r2
   2186a:	4698      	movls	r8, r3
   2186c:	f04f 0900 	mov.w	r9, #0
   21870:	2303      	movs	r3, #3
   21872:	f02b 0204 	bic.w	r2, fp, #4
   21876:	6123      	str	r3, [r4, #16]
   21878:	6022      	str	r2, [r4, #0]
   2187a:	9700      	str	r7, [sp, #0]
   2187c:	4633      	mov	r3, r6
   2187e:	aa0b      	add	r2, sp, #44	; 0x2c
   21880:	4621      	mov	r1, r4
   21882:	4628      	mov	r0, r5
   21884:	f003 f8cd 	bl	24a22 <_printf_common>
   21888:	3001      	adds	r0, #1
   2188a:	f040 808d 	bne.w	219a8 <_printf_float+0x1d4>
   2188e:	f04f 30ff 	mov.w	r0, #4294967295
   21892:	b00d      	add	sp, #52	; 0x34
   21894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21898:	4642      	mov	r2, r8
   2189a:	464b      	mov	r3, r9
   2189c:	4640      	mov	r0, r8
   2189e:	4649      	mov	r1, r9
   218a0:	f7ec f9de 	bl	dc60 <__aeabi_dcmpun>
   218a4:	b110      	cbz	r0, 218ac <_printf_float+0xd8>
   218a6:	4a8c      	ldr	r2, [pc, #560]	; (21ad8 <_printf_float+0x304>)
   218a8:	4b8c      	ldr	r3, [pc, #560]	; (21adc <_printf_float+0x308>)
   218aa:	e7da      	b.n	21862 <_printf_float+0x8e>
   218ac:	6861      	ldr	r1, [r4, #4]
   218ae:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   218b2:	a80a      	add	r0, sp, #40	; 0x28
   218b4:	1c4b      	adds	r3, r1, #1
   218b6:	d13e      	bne.n	21936 <_printf_float+0x162>
   218b8:	2306      	movs	r3, #6
   218ba:	6063      	str	r3, [r4, #4]
   218bc:	2300      	movs	r3, #0
   218be:	6022      	str	r2, [r4, #0]
   218c0:	f8cd a004 	str.w	sl, [sp, #4]
   218c4:	6861      	ldr	r1, [r4, #4]
   218c6:	e9cd 0302 	strd	r0, r3, [sp, #8]
   218ca:	ab09      	add	r3, sp, #36	; 0x24
   218cc:	4628      	mov	r0, r5
   218ce:	9300      	str	r3, [sp, #0]
   218d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   218d4:	ec49 8b10 	vmov	d0, r8, r9
   218d8:	f003 f80f 	bl	248fa <__cvt>
   218dc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
   218e0:	4680      	mov	r8, r0
   218e2:	2b47      	cmp	r3, #71	; 0x47
   218e4:	d109      	bne.n	218fa <_printf_float+0x126>
   218e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   218e8:	1cd8      	adds	r0, r3, #3
   218ea:	db02      	blt.n	218f2 <_printf_float+0x11e>
   218ec:	6862      	ldr	r2, [r4, #4]
   218ee:	4293      	cmp	r3, r2
   218f0:	dd47      	ble.n	21982 <_printf_float+0x1ae>
   218f2:	f1aa 0a02 	sub.w	sl, sl, #2
   218f6:	fa5f fa8a 	uxtb.w	sl, sl
   218fa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   218fe:	9909      	ldr	r1, [sp, #36]	; 0x24
   21900:	d824      	bhi.n	2194c <_printf_float+0x178>
   21902:	3901      	subs	r1, #1
   21904:	4652      	mov	r2, sl
   21906:	f104 0050 	add.w	r0, r4, #80	; 0x50
   2190a:	9109      	str	r1, [sp, #36]	; 0x24
   2190c:	f003 f856 	bl	249bc <__exponent>
   21910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21912:	4681      	mov	r9, r0
   21914:	1813      	adds	r3, r2, r0
   21916:	2a01      	cmp	r2, #1
   21918:	6123      	str	r3, [r4, #16]
   2191a:	dc02      	bgt.n	21922 <_printf_float+0x14e>
   2191c:	6822      	ldr	r2, [r4, #0]
   2191e:	07d1      	lsls	r1, r2, #31
   21920:	d501      	bpl.n	21926 <_printf_float+0x152>
   21922:	3301      	adds	r3, #1
   21924:	6123      	str	r3, [r4, #16]
   21926:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   2192a:	2b00      	cmp	r3, #0
   2192c:	d0a5      	beq.n	2187a <_printf_float+0xa6>
   2192e:	232d      	movs	r3, #45	; 0x2d
   21930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   21934:	e7a1      	b.n	2187a <_printf_float+0xa6>
   21936:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   2193a:	f000 8177 	beq.w	21c2c <_printf_float+0x458>
   2193e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   21942:	d1bb      	bne.n	218bc <_printf_float+0xe8>
   21944:	2900      	cmp	r1, #0
   21946:	d1b9      	bne.n	218bc <_printf_float+0xe8>
   21948:	2301      	movs	r3, #1
   2194a:	e7b6      	b.n	218ba <_printf_float+0xe6>
   2194c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   21950:	d119      	bne.n	21986 <_printf_float+0x1b2>
   21952:	2900      	cmp	r1, #0
   21954:	6863      	ldr	r3, [r4, #4]
   21956:	dd0c      	ble.n	21972 <_printf_float+0x19e>
   21958:	6121      	str	r1, [r4, #16]
   2195a:	b913      	cbnz	r3, 21962 <_printf_float+0x18e>
   2195c:	6822      	ldr	r2, [r4, #0]
   2195e:	07d2      	lsls	r2, r2, #31
   21960:	d502      	bpl.n	21968 <_printf_float+0x194>
   21962:	3301      	adds	r3, #1
   21964:	440b      	add	r3, r1
   21966:	6123      	str	r3, [r4, #16]
   21968:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2196a:	f04f 0900 	mov.w	r9, #0
   2196e:	65a3      	str	r3, [r4, #88]	; 0x58
   21970:	e7d9      	b.n	21926 <_printf_float+0x152>
   21972:	b913      	cbnz	r3, 2197a <_printf_float+0x1a6>
   21974:	6822      	ldr	r2, [r4, #0]
   21976:	07d0      	lsls	r0, r2, #31
   21978:	d501      	bpl.n	2197e <_printf_float+0x1aa>
   2197a:	3302      	adds	r3, #2
   2197c:	e7f3      	b.n	21966 <_printf_float+0x192>
   2197e:	2301      	movs	r3, #1
   21980:	e7f1      	b.n	21966 <_printf_float+0x192>
   21982:	f04f 0a67 	mov.w	sl, #103	; 0x67
   21986:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   2198a:	4293      	cmp	r3, r2
   2198c:	db05      	blt.n	2199a <_printf_float+0x1c6>
   2198e:	6822      	ldr	r2, [r4, #0]
   21990:	6123      	str	r3, [r4, #16]
   21992:	07d1      	lsls	r1, r2, #31
   21994:	d5e8      	bpl.n	21968 <_printf_float+0x194>
   21996:	3301      	adds	r3, #1
   21998:	e7e5      	b.n	21966 <_printf_float+0x192>
   2199a:	2b00      	cmp	r3, #0
   2199c:	bfd4      	ite	le
   2199e:	f1c3 0302 	rsble	r3, r3, #2
   219a2:	2301      	movgt	r3, #1
   219a4:	4413      	add	r3, r2
   219a6:	e7de      	b.n	21966 <_printf_float+0x192>
   219a8:	6823      	ldr	r3, [r4, #0]
   219aa:	055a      	lsls	r2, r3, #21
   219ac:	d407      	bmi.n	219be <_printf_float+0x1ea>
   219ae:	6923      	ldr	r3, [r4, #16]
   219b0:	4642      	mov	r2, r8
   219b2:	4631      	mov	r1, r6
   219b4:	4628      	mov	r0, r5
   219b6:	47b8      	blx	r7
   219b8:	3001      	adds	r0, #1
   219ba:	d12b      	bne.n	21a14 <_printf_float+0x240>
   219bc:	e767      	b.n	2188e <_printf_float+0xba>
   219be:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   219c2:	f240 80dc 	bls.w	21b7e <_printf_float+0x3aa>
   219c6:	2200      	movs	r2, #0
   219c8:	2300      	movs	r3, #0
   219ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   219ce:	f7ec f915 	bl	dbfc <__aeabi_dcmpeq>
   219d2:	2800      	cmp	r0, #0
   219d4:	d033      	beq.n	21a3e <_printf_float+0x26a>
   219d6:	2301      	movs	r3, #1
   219d8:	4a41      	ldr	r2, [pc, #260]	; (21ae0 <_printf_float+0x30c>)
   219da:	4631      	mov	r1, r6
   219dc:	4628      	mov	r0, r5
   219de:	47b8      	blx	r7
   219e0:	3001      	adds	r0, #1
   219e2:	f43f af54 	beq.w	2188e <_printf_float+0xba>
   219e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   219ea:	429a      	cmp	r2, r3
   219ec:	db02      	blt.n	219f4 <_printf_float+0x220>
   219ee:	6823      	ldr	r3, [r4, #0]
   219f0:	07d8      	lsls	r0, r3, #31
   219f2:	d50f      	bpl.n	21a14 <_printf_float+0x240>
   219f4:	4631      	mov	r1, r6
   219f6:	4628      	mov	r0, r5
   219f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   219fc:	47b8      	blx	r7
   219fe:	3001      	adds	r0, #1
   21a00:	f43f af45 	beq.w	2188e <_printf_float+0xba>
   21a04:	f04f 0800 	mov.w	r8, #0
   21a08:	f104 091a 	add.w	r9, r4, #26
   21a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21a0e:	3b01      	subs	r3, #1
   21a10:	4543      	cmp	r3, r8
   21a12:	dc09      	bgt.n	21a28 <_printf_float+0x254>
   21a14:	6823      	ldr	r3, [r4, #0]
   21a16:	079b      	lsls	r3, r3, #30
   21a18:	f100 8103 	bmi.w	21c22 <_printf_float+0x44e>
   21a1c:	68e0      	ldr	r0, [r4, #12]
   21a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21a20:	4298      	cmp	r0, r3
   21a22:	bfb8      	it	lt
   21a24:	4618      	movlt	r0, r3
   21a26:	e734      	b.n	21892 <_printf_float+0xbe>
   21a28:	2301      	movs	r3, #1
   21a2a:	464a      	mov	r2, r9
   21a2c:	4631      	mov	r1, r6
   21a2e:	4628      	mov	r0, r5
   21a30:	47b8      	blx	r7
   21a32:	3001      	adds	r0, #1
   21a34:	f43f af2b 	beq.w	2188e <_printf_float+0xba>
   21a38:	f108 0801 	add.w	r8, r8, #1
   21a3c:	e7e6      	b.n	21a0c <_printf_float+0x238>
   21a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21a40:	2b00      	cmp	r3, #0
   21a42:	dc2b      	bgt.n	21a9c <_printf_float+0x2c8>
   21a44:	2301      	movs	r3, #1
   21a46:	4a26      	ldr	r2, [pc, #152]	; (21ae0 <_printf_float+0x30c>)
   21a48:	4631      	mov	r1, r6
   21a4a:	4628      	mov	r0, r5
   21a4c:	47b8      	blx	r7
   21a4e:	3001      	adds	r0, #1
   21a50:	f43f af1d 	beq.w	2188e <_printf_float+0xba>
   21a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21a56:	b923      	cbnz	r3, 21a62 <_printf_float+0x28e>
   21a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21a5a:	b913      	cbnz	r3, 21a62 <_printf_float+0x28e>
   21a5c:	6823      	ldr	r3, [r4, #0]
   21a5e:	07d9      	lsls	r1, r3, #31
   21a60:	d5d8      	bpl.n	21a14 <_printf_float+0x240>
   21a62:	4631      	mov	r1, r6
   21a64:	4628      	mov	r0, r5
   21a66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   21a6a:	47b8      	blx	r7
   21a6c:	3001      	adds	r0, #1
   21a6e:	f43f af0e 	beq.w	2188e <_printf_float+0xba>
   21a72:	f04f 0900 	mov.w	r9, #0
   21a76:	f104 0a1a 	add.w	sl, r4, #26
   21a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21a7c:	425b      	negs	r3, r3
   21a7e:	454b      	cmp	r3, r9
   21a80:	dc01      	bgt.n	21a86 <_printf_float+0x2b2>
   21a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21a84:	e794      	b.n	219b0 <_printf_float+0x1dc>
   21a86:	2301      	movs	r3, #1
   21a88:	4652      	mov	r2, sl
   21a8a:	4631      	mov	r1, r6
   21a8c:	4628      	mov	r0, r5
   21a8e:	47b8      	blx	r7
   21a90:	3001      	adds	r0, #1
   21a92:	f43f aefc 	beq.w	2188e <_printf_float+0xba>
   21a96:	f109 0901 	add.w	r9, r9, #1
   21a9a:	e7ee      	b.n	21a7a <_printf_float+0x2a6>
   21a9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21a9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   21aa0:	429a      	cmp	r2, r3
   21aa2:	bfa8      	it	ge
   21aa4:	461a      	movge	r2, r3
   21aa6:	2a00      	cmp	r2, #0
   21aa8:	4691      	mov	r9, r2
   21aaa:	dd07      	ble.n	21abc <_printf_float+0x2e8>
   21aac:	4613      	mov	r3, r2
   21aae:	4631      	mov	r1, r6
   21ab0:	4642      	mov	r2, r8
   21ab2:	4628      	mov	r0, r5
   21ab4:	47b8      	blx	r7
   21ab6:	3001      	adds	r0, #1
   21ab8:	f43f aee9 	beq.w	2188e <_printf_float+0xba>
   21abc:	f104 031a 	add.w	r3, r4, #26
   21ac0:	f04f 0b00 	mov.w	fp, #0
   21ac4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   21ac8:	9306      	str	r3, [sp, #24]
   21aca:	e015      	b.n	21af8 <_printf_float+0x324>
   21acc:	7fefffff 	.word	0x7fefffff
   21ad0:	00027211 	.word	0x00027211
   21ad4:	0002797b 	.word	0x0002797b
   21ad8:	00027983 	.word	0x00027983
   21adc:	0002797f 	.word	0x0002797f
   21ae0:	000270aa 	.word	0x000270aa
   21ae4:	2301      	movs	r3, #1
   21ae6:	9a06      	ldr	r2, [sp, #24]
   21ae8:	4631      	mov	r1, r6
   21aea:	4628      	mov	r0, r5
   21aec:	47b8      	blx	r7
   21aee:	3001      	adds	r0, #1
   21af0:	f43f aecd 	beq.w	2188e <_printf_float+0xba>
   21af4:	f10b 0b01 	add.w	fp, fp, #1
   21af8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   21afc:	ebaa 0309 	sub.w	r3, sl, r9
   21b00:	455b      	cmp	r3, fp
   21b02:	dcef      	bgt.n	21ae4 <_printf_float+0x310>
   21b04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   21b08:	44d0      	add	r8, sl
   21b0a:	429a      	cmp	r2, r3
   21b0c:	db15      	blt.n	21b3a <_printf_float+0x366>
   21b0e:	6823      	ldr	r3, [r4, #0]
   21b10:	07da      	lsls	r2, r3, #31
   21b12:	d412      	bmi.n	21b3a <_printf_float+0x366>
   21b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21b16:	9909      	ldr	r1, [sp, #36]	; 0x24
   21b18:	eba3 020a 	sub.w	r2, r3, sl
   21b1c:	eba3 0a01 	sub.w	sl, r3, r1
   21b20:	4592      	cmp	sl, r2
   21b22:	bfa8      	it	ge
   21b24:	4692      	movge	sl, r2
   21b26:	f1ba 0f00 	cmp.w	sl, #0
   21b2a:	dc0e      	bgt.n	21b4a <_printf_float+0x376>
   21b2c:	f04f 0800 	mov.w	r8, #0
   21b30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   21b34:	f104 091a 	add.w	r9, r4, #26
   21b38:	e019      	b.n	21b6e <_printf_float+0x39a>
   21b3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   21b3e:	4631      	mov	r1, r6
   21b40:	4628      	mov	r0, r5
   21b42:	47b8      	blx	r7
   21b44:	3001      	adds	r0, #1
   21b46:	d1e5      	bne.n	21b14 <_printf_float+0x340>
   21b48:	e6a1      	b.n	2188e <_printf_float+0xba>
   21b4a:	4653      	mov	r3, sl
   21b4c:	4642      	mov	r2, r8
   21b4e:	4631      	mov	r1, r6
   21b50:	4628      	mov	r0, r5
   21b52:	47b8      	blx	r7
   21b54:	3001      	adds	r0, #1
   21b56:	d1e9      	bne.n	21b2c <_printf_float+0x358>
   21b58:	e699      	b.n	2188e <_printf_float+0xba>
   21b5a:	2301      	movs	r3, #1
   21b5c:	464a      	mov	r2, r9
   21b5e:	4631      	mov	r1, r6
   21b60:	4628      	mov	r0, r5
   21b62:	47b8      	blx	r7
   21b64:	3001      	adds	r0, #1
   21b66:	f43f ae92 	beq.w	2188e <_printf_float+0xba>
   21b6a:	f108 0801 	add.w	r8, r8, #1
   21b6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   21b72:	1a9b      	subs	r3, r3, r2
   21b74:	eba3 030a 	sub.w	r3, r3, sl
   21b78:	4543      	cmp	r3, r8
   21b7a:	dcee      	bgt.n	21b5a <_printf_float+0x386>
   21b7c:	e74a      	b.n	21a14 <_printf_float+0x240>
   21b7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21b80:	2a01      	cmp	r2, #1
   21b82:	dc01      	bgt.n	21b88 <_printf_float+0x3b4>
   21b84:	07db      	lsls	r3, r3, #31
   21b86:	d53a      	bpl.n	21bfe <_printf_float+0x42a>
   21b88:	2301      	movs	r3, #1
   21b8a:	4642      	mov	r2, r8
   21b8c:	4631      	mov	r1, r6
   21b8e:	4628      	mov	r0, r5
   21b90:	47b8      	blx	r7
   21b92:	3001      	adds	r0, #1
   21b94:	f43f ae7b 	beq.w	2188e <_printf_float+0xba>
   21b98:	4631      	mov	r1, r6
   21b9a:	4628      	mov	r0, r5
   21b9c:	f108 0801 	add.w	r8, r8, #1
   21ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   21ba4:	47b8      	blx	r7
   21ba6:	3001      	adds	r0, #1
   21ba8:	f43f ae71 	beq.w	2188e <_printf_float+0xba>
   21bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21bae:	2200      	movs	r2, #0
   21bb0:	f103 3aff 	add.w	sl, r3, #4294967295
   21bb4:	2300      	movs	r3, #0
   21bb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   21bba:	f7ec f81f 	bl	dbfc <__aeabi_dcmpeq>
   21bbe:	b9c8      	cbnz	r0, 21bf4 <_printf_float+0x420>
   21bc0:	4653      	mov	r3, sl
   21bc2:	4642      	mov	r2, r8
   21bc4:	4631      	mov	r1, r6
   21bc6:	4628      	mov	r0, r5
   21bc8:	47b8      	blx	r7
   21bca:	3001      	adds	r0, #1
   21bcc:	d10e      	bne.n	21bec <_printf_float+0x418>
   21bce:	e65e      	b.n	2188e <_printf_float+0xba>
   21bd0:	2301      	movs	r3, #1
   21bd2:	4652      	mov	r2, sl
   21bd4:	4631      	mov	r1, r6
   21bd6:	4628      	mov	r0, r5
   21bd8:	47b8      	blx	r7
   21bda:	3001      	adds	r0, #1
   21bdc:	f43f ae57 	beq.w	2188e <_printf_float+0xba>
   21be0:	f108 0801 	add.w	r8, r8, #1
   21be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21be6:	3b01      	subs	r3, #1
   21be8:	4543      	cmp	r3, r8
   21bea:	dcf1      	bgt.n	21bd0 <_printf_float+0x3fc>
   21bec:	464b      	mov	r3, r9
   21bee:	f104 0250 	add.w	r2, r4, #80	; 0x50
   21bf2:	e6de      	b.n	219b2 <_printf_float+0x1de>
   21bf4:	f04f 0800 	mov.w	r8, #0
   21bf8:	f104 0a1a 	add.w	sl, r4, #26
   21bfc:	e7f2      	b.n	21be4 <_printf_float+0x410>
   21bfe:	2301      	movs	r3, #1
   21c00:	e7df      	b.n	21bc2 <_printf_float+0x3ee>
   21c02:	2301      	movs	r3, #1
   21c04:	464a      	mov	r2, r9
   21c06:	4631      	mov	r1, r6
   21c08:	4628      	mov	r0, r5
   21c0a:	47b8      	blx	r7
   21c0c:	3001      	adds	r0, #1
   21c0e:	f43f ae3e 	beq.w	2188e <_printf_float+0xba>
   21c12:	f108 0801 	add.w	r8, r8, #1
   21c16:	68e3      	ldr	r3, [r4, #12]
   21c18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   21c1a:	1a9b      	subs	r3, r3, r2
   21c1c:	4543      	cmp	r3, r8
   21c1e:	dcf0      	bgt.n	21c02 <_printf_float+0x42e>
   21c20:	e6fc      	b.n	21a1c <_printf_float+0x248>
   21c22:	f04f 0800 	mov.w	r8, #0
   21c26:	f104 0919 	add.w	r9, r4, #25
   21c2a:	e7f4      	b.n	21c16 <_printf_float+0x442>
   21c2c:	2900      	cmp	r1, #0
   21c2e:	f43f ae8b 	beq.w	21948 <_printf_float+0x174>
   21c32:	2300      	movs	r3, #0
   21c34:	6022      	str	r2, [r4, #0]
   21c36:	f8cd a004 	str.w	sl, [sp, #4]
   21c3a:	e9cd 0302 	strd	r0, r3, [sp, #8]
   21c3e:	ab09      	add	r3, sp, #36	; 0x24
   21c40:	4628      	mov	r0, r5
   21c42:	9300      	str	r3, [sp, #0]
   21c44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   21c48:	ec49 8b10 	vmov	d0, r8, r9
   21c4c:	f002 fe55 	bl	248fa <__cvt>
   21c50:	4680      	mov	r8, r0
   21c52:	e648      	b.n	218e6 <_printf_float+0x112>

00021c54 <_printf_i>:
   21c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21c58:	f101 0c43 	add.w	ip, r1, #67	; 0x43
   21c5c:	460c      	mov	r4, r1
   21c5e:	7e09      	ldrb	r1, [r1, #24]
   21c60:	b085      	sub	sp, #20
   21c62:	4617      	mov	r7, r2
   21c64:	4606      	mov	r6, r0
   21c66:	296e      	cmp	r1, #110	; 0x6e
   21c68:	4698      	mov	r8, r3
   21c6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   21c6c:	f000 80b3 	beq.w	21dd6 <_printf_i+0x182>
   21c70:	d822      	bhi.n	21cb8 <_printf_i+0x64>
   21c72:	2963      	cmp	r1, #99	; 0x63
   21c74:	d036      	beq.n	21ce4 <_printf_i+0x90>
   21c76:	d80a      	bhi.n	21c8e <_printf_i+0x3a>
   21c78:	2900      	cmp	r1, #0
   21c7a:	f000 80b9 	beq.w	21df0 <_printf_i+0x19c>
   21c7e:	2958      	cmp	r1, #88	; 0x58
   21c80:	f000 8083 	beq.w	21d8a <_printf_i+0x136>
   21c84:	f104 0542 	add.w	r5, r4, #66	; 0x42
   21c88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
   21c8c:	e032      	b.n	21cf4 <_printf_i+0xa0>
   21c8e:	2964      	cmp	r1, #100	; 0x64
   21c90:	d001      	beq.n	21c96 <_printf_i+0x42>
   21c92:	2969      	cmp	r1, #105	; 0x69
   21c94:	d1f6      	bne.n	21c84 <_printf_i+0x30>
   21c96:	6820      	ldr	r0, [r4, #0]
   21c98:	6813      	ldr	r3, [r2, #0]
   21c9a:	0605      	lsls	r5, r0, #24
   21c9c:	f103 0104 	add.w	r1, r3, #4
   21ca0:	d52a      	bpl.n	21cf8 <_printf_i+0xa4>
   21ca2:	681b      	ldr	r3, [r3, #0]
   21ca4:	6011      	str	r1, [r2, #0]
   21ca6:	2b00      	cmp	r3, #0
   21ca8:	da03      	bge.n	21cb2 <_printf_i+0x5e>
   21caa:	222d      	movs	r2, #45	; 0x2d
   21cac:	425b      	negs	r3, r3
   21cae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
   21cb2:	486f      	ldr	r0, [pc, #444]	; (21e70 <_printf_i+0x21c>)
   21cb4:	220a      	movs	r2, #10
   21cb6:	e039      	b.n	21d2c <_printf_i+0xd8>
   21cb8:	2973      	cmp	r1, #115	; 0x73
   21cba:	f000 809d 	beq.w	21df8 <_printf_i+0x1a4>
   21cbe:	d808      	bhi.n	21cd2 <_printf_i+0x7e>
   21cc0:	296f      	cmp	r1, #111	; 0x6f
   21cc2:	d020      	beq.n	21d06 <_printf_i+0xb2>
   21cc4:	2970      	cmp	r1, #112	; 0x70
   21cc6:	d1dd      	bne.n	21c84 <_printf_i+0x30>
   21cc8:	6823      	ldr	r3, [r4, #0]
   21cca:	f043 0320 	orr.w	r3, r3, #32
   21cce:	6023      	str	r3, [r4, #0]
   21cd0:	e003      	b.n	21cda <_printf_i+0x86>
   21cd2:	2975      	cmp	r1, #117	; 0x75
   21cd4:	d017      	beq.n	21d06 <_printf_i+0xb2>
   21cd6:	2978      	cmp	r1, #120	; 0x78
   21cd8:	d1d4      	bne.n	21c84 <_printf_i+0x30>
   21cda:	2378      	movs	r3, #120	; 0x78
   21cdc:	4865      	ldr	r0, [pc, #404]	; (21e74 <_printf_i+0x220>)
   21cde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   21ce2:	e055      	b.n	21d90 <_printf_i+0x13c>
   21ce4:	6813      	ldr	r3, [r2, #0]
   21ce6:	f104 0542 	add.w	r5, r4, #66	; 0x42
   21cea:	1d19      	adds	r1, r3, #4
   21cec:	681b      	ldr	r3, [r3, #0]
   21cee:	6011      	str	r1, [r2, #0]
   21cf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   21cf4:	2301      	movs	r3, #1
   21cf6:	e08c      	b.n	21e12 <_printf_i+0x1be>
   21cf8:	681b      	ldr	r3, [r3, #0]
   21cfa:	f010 0f40 	tst.w	r0, #64	; 0x40
   21cfe:	6011      	str	r1, [r2, #0]
   21d00:	bf18      	it	ne
   21d02:	b21b      	sxthne	r3, r3
   21d04:	e7cf      	b.n	21ca6 <_printf_i+0x52>
   21d06:	6813      	ldr	r3, [r2, #0]
   21d08:	6825      	ldr	r5, [r4, #0]
   21d0a:	1d18      	adds	r0, r3, #4
   21d0c:	6010      	str	r0, [r2, #0]
   21d0e:	0628      	lsls	r0, r5, #24
   21d10:	d501      	bpl.n	21d16 <_printf_i+0xc2>
   21d12:	681b      	ldr	r3, [r3, #0]
   21d14:	e002      	b.n	21d1c <_printf_i+0xc8>
   21d16:	0668      	lsls	r0, r5, #25
   21d18:	d5fb      	bpl.n	21d12 <_printf_i+0xbe>
   21d1a:	881b      	ldrh	r3, [r3, #0]
   21d1c:	296f      	cmp	r1, #111	; 0x6f
   21d1e:	4854      	ldr	r0, [pc, #336]	; (21e70 <_printf_i+0x21c>)
   21d20:	bf14      	ite	ne
   21d22:	220a      	movne	r2, #10
   21d24:	2208      	moveq	r2, #8
   21d26:	2100      	movs	r1, #0
   21d28:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   21d2c:	6865      	ldr	r5, [r4, #4]
   21d2e:	2d00      	cmp	r5, #0
   21d30:	60a5      	str	r5, [r4, #8]
   21d32:	f2c0 8095 	blt.w	21e60 <_printf_i+0x20c>
   21d36:	6821      	ldr	r1, [r4, #0]
   21d38:	f021 0104 	bic.w	r1, r1, #4
   21d3c:	6021      	str	r1, [r4, #0]
   21d3e:	2b00      	cmp	r3, #0
   21d40:	d13d      	bne.n	21dbe <_printf_i+0x16a>
   21d42:	2d00      	cmp	r5, #0
   21d44:	f040 808e 	bne.w	21e64 <_printf_i+0x210>
   21d48:	4665      	mov	r5, ip
   21d4a:	2a08      	cmp	r2, #8
   21d4c:	d10b      	bne.n	21d66 <_printf_i+0x112>
   21d4e:	6823      	ldr	r3, [r4, #0]
   21d50:	07db      	lsls	r3, r3, #31
   21d52:	d508      	bpl.n	21d66 <_printf_i+0x112>
   21d54:	6923      	ldr	r3, [r4, #16]
   21d56:	6862      	ldr	r2, [r4, #4]
   21d58:	429a      	cmp	r2, r3
   21d5a:	bfde      	ittt	le
   21d5c:	2330      	movle	r3, #48	; 0x30
   21d5e:	f805 3c01 	strble.w	r3, [r5, #-1]
   21d62:	f105 35ff 	addle.w	r5, r5, #4294967295
   21d66:	ebac 0305 	sub.w	r3, ip, r5
   21d6a:	6123      	str	r3, [r4, #16]
   21d6c:	f8cd 8000 	str.w	r8, [sp]
   21d70:	463b      	mov	r3, r7
   21d72:	aa03      	add	r2, sp, #12
   21d74:	4621      	mov	r1, r4
   21d76:	4630      	mov	r0, r6
   21d78:	f002 fe53 	bl	24a22 <_printf_common>
   21d7c:	3001      	adds	r0, #1
   21d7e:	d14d      	bne.n	21e1c <_printf_i+0x1c8>
   21d80:	f04f 30ff 	mov.w	r0, #4294967295
   21d84:	b005      	add	sp, #20
   21d86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21d8a:	4839      	ldr	r0, [pc, #228]	; (21e70 <_printf_i+0x21c>)
   21d8c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
   21d90:	6813      	ldr	r3, [r2, #0]
   21d92:	6821      	ldr	r1, [r4, #0]
   21d94:	1d1d      	adds	r5, r3, #4
   21d96:	681b      	ldr	r3, [r3, #0]
   21d98:	6015      	str	r5, [r2, #0]
   21d9a:	060a      	lsls	r2, r1, #24
   21d9c:	d50b      	bpl.n	21db6 <_printf_i+0x162>
   21d9e:	07ca      	lsls	r2, r1, #31
   21da0:	bf44      	itt	mi
   21da2:	f041 0120 	orrmi.w	r1, r1, #32
   21da6:	6021      	strmi	r1, [r4, #0]
   21da8:	b91b      	cbnz	r3, 21db2 <_printf_i+0x15e>
   21daa:	6822      	ldr	r2, [r4, #0]
   21dac:	f022 0220 	bic.w	r2, r2, #32
   21db0:	6022      	str	r2, [r4, #0]
   21db2:	2210      	movs	r2, #16
   21db4:	e7b7      	b.n	21d26 <_printf_i+0xd2>
   21db6:	064d      	lsls	r5, r1, #25
   21db8:	bf48      	it	mi
   21dba:	b29b      	uxthmi	r3, r3
   21dbc:	e7ef      	b.n	21d9e <_printf_i+0x14a>
   21dbe:	4665      	mov	r5, ip
   21dc0:	fbb3 f1f2 	udiv	r1, r3, r2
   21dc4:	fb02 3311 	mls	r3, r2, r1, r3
   21dc8:	5cc3      	ldrb	r3, [r0, r3]
   21dca:	f805 3d01 	strb.w	r3, [r5, #-1]!
   21dce:	460b      	mov	r3, r1
   21dd0:	2900      	cmp	r1, #0
   21dd2:	d1f5      	bne.n	21dc0 <_printf_i+0x16c>
   21dd4:	e7b9      	b.n	21d4a <_printf_i+0xf6>
   21dd6:	6813      	ldr	r3, [r2, #0]
   21dd8:	6825      	ldr	r5, [r4, #0]
   21dda:	1d18      	adds	r0, r3, #4
   21ddc:	6961      	ldr	r1, [r4, #20]
   21dde:	6010      	str	r0, [r2, #0]
   21de0:	0628      	lsls	r0, r5, #24
   21de2:	681b      	ldr	r3, [r3, #0]
   21de4:	d501      	bpl.n	21dea <_printf_i+0x196>
   21de6:	6019      	str	r1, [r3, #0]
   21de8:	e002      	b.n	21df0 <_printf_i+0x19c>
   21dea:	066a      	lsls	r2, r5, #25
   21dec:	d5fb      	bpl.n	21de6 <_printf_i+0x192>
   21dee:	8019      	strh	r1, [r3, #0]
   21df0:	2300      	movs	r3, #0
   21df2:	4665      	mov	r5, ip
   21df4:	6123      	str	r3, [r4, #16]
   21df6:	e7b9      	b.n	21d6c <_printf_i+0x118>
   21df8:	6813      	ldr	r3, [r2, #0]
   21dfa:	1d19      	adds	r1, r3, #4
   21dfc:	6011      	str	r1, [r2, #0]
   21dfe:	2100      	movs	r1, #0
   21e00:	681d      	ldr	r5, [r3, #0]
   21e02:	6862      	ldr	r2, [r4, #4]
   21e04:	4628      	mov	r0, r5
   21e06:	f002 fd1f 	bl	24848 <memchr>
   21e0a:	b108      	cbz	r0, 21e10 <_printf_i+0x1bc>
   21e0c:	1b40      	subs	r0, r0, r5
   21e0e:	6060      	str	r0, [r4, #4]
   21e10:	6863      	ldr	r3, [r4, #4]
   21e12:	6123      	str	r3, [r4, #16]
   21e14:	2300      	movs	r3, #0
   21e16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   21e1a:	e7a7      	b.n	21d6c <_printf_i+0x118>
   21e1c:	6923      	ldr	r3, [r4, #16]
   21e1e:	462a      	mov	r2, r5
   21e20:	4639      	mov	r1, r7
   21e22:	4630      	mov	r0, r6
   21e24:	47c0      	blx	r8
   21e26:	3001      	adds	r0, #1
   21e28:	d0aa      	beq.n	21d80 <_printf_i+0x12c>
   21e2a:	6823      	ldr	r3, [r4, #0]
   21e2c:	079b      	lsls	r3, r3, #30
   21e2e:	d413      	bmi.n	21e58 <_printf_i+0x204>
   21e30:	68e0      	ldr	r0, [r4, #12]
   21e32:	9b03      	ldr	r3, [sp, #12]
   21e34:	4298      	cmp	r0, r3
   21e36:	bfb8      	it	lt
   21e38:	4618      	movlt	r0, r3
   21e3a:	e7a3      	b.n	21d84 <_printf_i+0x130>
   21e3c:	2301      	movs	r3, #1
   21e3e:	464a      	mov	r2, r9
   21e40:	4639      	mov	r1, r7
   21e42:	4630      	mov	r0, r6
   21e44:	47c0      	blx	r8
   21e46:	3001      	adds	r0, #1
   21e48:	d09a      	beq.n	21d80 <_printf_i+0x12c>
   21e4a:	3501      	adds	r5, #1
   21e4c:	68e3      	ldr	r3, [r4, #12]
   21e4e:	9a03      	ldr	r2, [sp, #12]
   21e50:	1a9b      	subs	r3, r3, r2
   21e52:	42ab      	cmp	r3, r5
   21e54:	dcf2      	bgt.n	21e3c <_printf_i+0x1e8>
   21e56:	e7eb      	b.n	21e30 <_printf_i+0x1dc>
   21e58:	2500      	movs	r5, #0
   21e5a:	f104 0919 	add.w	r9, r4, #25
   21e5e:	e7f5      	b.n	21e4c <_printf_i+0x1f8>
   21e60:	2b00      	cmp	r3, #0
   21e62:	d1ac      	bne.n	21dbe <_printf_i+0x16a>
   21e64:	7803      	ldrb	r3, [r0, #0]
   21e66:	f104 0542 	add.w	r5, r4, #66	; 0x42
   21e6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   21e6e:	e76c      	b.n	21d4a <_printf_i+0xf6>
   21e70:	00027987 	.word	0x00027987
   21e74:	00027998 	.word	0x00027998

00021e78 <iprintf>:
   21e78:	b40f      	push	{r0, r1, r2, r3}
   21e7a:	4b0a      	ldr	r3, [pc, #40]	; (21ea4 <iprintf+0x2c>)
   21e7c:	b513      	push	{r0, r1, r4, lr}
   21e7e:	681c      	ldr	r4, [r3, #0]
   21e80:	b124      	cbz	r4, 21e8c <iprintf+0x14>
   21e82:	69a3      	ldr	r3, [r4, #24]
   21e84:	b913      	cbnz	r3, 21e8c <iprintf+0x14>
   21e86:	4620      	mov	r0, r4
   21e88:	f000 f9f0 	bl	2226c <__sinit>
   21e8c:	ab05      	add	r3, sp, #20
   21e8e:	9a04      	ldr	r2, [sp, #16]
   21e90:	68a1      	ldr	r1, [r4, #8]
   21e92:	4620      	mov	r0, r4
   21e94:	9301      	str	r3, [sp, #4]
   21e96:	f7ff fb87 	bl	215a8 <_vfiprintf_r>
   21e9a:	b002      	add	sp, #8
   21e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21ea0:	b004      	add	sp, #16
   21ea2:	4770      	bx	lr
   21ea4:	20024978 	.word	0x20024978

00021ea8 <sniprintf>:
   21ea8:	b40c      	push	{r2, r3}
   21eaa:	4b18      	ldr	r3, [pc, #96]	; (21f0c <sniprintf+0x64>)
   21eac:	b530      	push	{r4, r5, lr}
   21eae:	1e0c      	subs	r4, r1, #0
   21eb0:	b09d      	sub	sp, #116	; 0x74
   21eb2:	681d      	ldr	r5, [r3, #0]
   21eb4:	da08      	bge.n	21ec8 <sniprintf+0x20>
   21eb6:	238b      	movs	r3, #139	; 0x8b
   21eb8:	f04f 30ff 	mov.w	r0, #4294967295
   21ebc:	602b      	str	r3, [r5, #0]
   21ebe:	b01d      	add	sp, #116	; 0x74
   21ec0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   21ec4:	b002      	add	sp, #8
   21ec6:	4770      	bx	lr
   21ec8:	f44f 7302 	mov.w	r3, #520	; 0x208
   21ecc:	9002      	str	r0, [sp, #8]
   21ece:	9006      	str	r0, [sp, #24]
   21ed0:	a902      	add	r1, sp, #8
   21ed2:	f8ad 3014 	strh.w	r3, [sp, #20]
   21ed6:	bf14      	ite	ne
   21ed8:	f104 33ff 	addne.w	r3, r4, #4294967295
   21edc:	4623      	moveq	r3, r4
   21ede:	9a20      	ldr	r2, [sp, #128]	; 0x80
   21ee0:	4628      	mov	r0, r5
   21ee2:	9304      	str	r3, [sp, #16]
   21ee4:	9307      	str	r3, [sp, #28]
   21ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21eea:	f8ad 3016 	strh.w	r3, [sp, #22]
   21eee:	ab21      	add	r3, sp, #132	; 0x84
   21ef0:	9301      	str	r3, [sp, #4]
   21ef2:	f000 fb73 	bl	225dc <_svfiprintf_r>
   21ef6:	1c43      	adds	r3, r0, #1
   21ef8:	bfbc      	itt	lt
   21efa:	238b      	movlt	r3, #139	; 0x8b
   21efc:	602b      	strlt	r3, [r5, #0]
   21efe:	2c00      	cmp	r4, #0
   21f00:	d0dd      	beq.n	21ebe <sniprintf+0x16>
   21f02:	9b02      	ldr	r3, [sp, #8]
   21f04:	2200      	movs	r2, #0
   21f06:	701a      	strb	r2, [r3, #0]
   21f08:	e7d9      	b.n	21ebe <sniprintf+0x16>
   21f0a:	bf00      	nop
   21f0c:	20024978 	.word	0x20024978

00021f10 <strtol>:
   21f10:	4b08      	ldr	r3, [pc, #32]	; (21f34 <strtol+0x24>)
   21f12:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21f14:	681c      	ldr	r4, [r3, #0]
   21f16:	4d08      	ldr	r5, [pc, #32]	; (21f38 <strtol+0x28>)
   21f18:	6a23      	ldr	r3, [r4, #32]
   21f1a:	2b00      	cmp	r3, #0
   21f1c:	bf08      	it	eq
   21f1e:	462b      	moveq	r3, r5
   21f20:	9300      	str	r3, [sp, #0]
   21f22:	4613      	mov	r3, r2
   21f24:	460a      	mov	r2, r1
   21f26:	4601      	mov	r1, r0
   21f28:	4620      	mov	r0, r4
   21f2a:	f002 fe40 	bl	24bae <_strtol_l.isra.0>
   21f2e:	b003      	add	sp, #12
   21f30:	bd30      	pop	{r4, r5, pc}
   21f32:	bf00      	nop
   21f34:	20024978 	.word	0x20024978
   21f38:	200249dc 	.word	0x200249dc

00021f3c <__swbuf_r>:
   21f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21f3e:	460e      	mov	r6, r1
   21f40:	4614      	mov	r4, r2
   21f42:	4605      	mov	r5, r0
   21f44:	b118      	cbz	r0, 21f4e <__swbuf_r+0x12>
   21f46:	6983      	ldr	r3, [r0, #24]
   21f48:	b90b      	cbnz	r3, 21f4e <__swbuf_r+0x12>
   21f4a:	f000 f98f 	bl	2226c <__sinit>
   21f4e:	4b21      	ldr	r3, [pc, #132]	; (21fd4 <__swbuf_r+0x98>)
   21f50:	429c      	cmp	r4, r3
   21f52:	d12a      	bne.n	21faa <__swbuf_r+0x6e>
   21f54:	686c      	ldr	r4, [r5, #4]
   21f56:	69a3      	ldr	r3, [r4, #24]
   21f58:	60a3      	str	r3, [r4, #8]
   21f5a:	89a3      	ldrh	r3, [r4, #12]
   21f5c:	071a      	lsls	r2, r3, #28
   21f5e:	d52e      	bpl.n	21fbe <__swbuf_r+0x82>
   21f60:	6923      	ldr	r3, [r4, #16]
   21f62:	b363      	cbz	r3, 21fbe <__swbuf_r+0x82>
   21f64:	6923      	ldr	r3, [r4, #16]
   21f66:	b2f6      	uxtb	r6, r6
   21f68:	6820      	ldr	r0, [r4, #0]
   21f6a:	4637      	mov	r7, r6
   21f6c:	1ac0      	subs	r0, r0, r3
   21f6e:	6963      	ldr	r3, [r4, #20]
   21f70:	4283      	cmp	r3, r0
   21f72:	dc04      	bgt.n	21f7e <__swbuf_r+0x42>
   21f74:	4621      	mov	r1, r4
   21f76:	4628      	mov	r0, r5
   21f78:	f000 f924 	bl	221c4 <_fflush_r>
   21f7c:	bb28      	cbnz	r0, 21fca <__swbuf_r+0x8e>
   21f7e:	68a3      	ldr	r3, [r4, #8]
   21f80:	3001      	adds	r0, #1
   21f82:	3b01      	subs	r3, #1
   21f84:	60a3      	str	r3, [r4, #8]
   21f86:	6823      	ldr	r3, [r4, #0]
   21f88:	1c5a      	adds	r2, r3, #1
   21f8a:	6022      	str	r2, [r4, #0]
   21f8c:	701e      	strb	r6, [r3, #0]
   21f8e:	6963      	ldr	r3, [r4, #20]
   21f90:	4283      	cmp	r3, r0
   21f92:	d004      	beq.n	21f9e <__swbuf_r+0x62>
   21f94:	89a3      	ldrh	r3, [r4, #12]
   21f96:	07db      	lsls	r3, r3, #31
   21f98:	d519      	bpl.n	21fce <__swbuf_r+0x92>
   21f9a:	2e0a      	cmp	r6, #10
   21f9c:	d117      	bne.n	21fce <__swbuf_r+0x92>
   21f9e:	4621      	mov	r1, r4
   21fa0:	4628      	mov	r0, r5
   21fa2:	f000 f90f 	bl	221c4 <_fflush_r>
   21fa6:	b190      	cbz	r0, 21fce <__swbuf_r+0x92>
   21fa8:	e00f      	b.n	21fca <__swbuf_r+0x8e>
   21faa:	4b0b      	ldr	r3, [pc, #44]	; (21fd8 <__swbuf_r+0x9c>)
   21fac:	429c      	cmp	r4, r3
   21fae:	d101      	bne.n	21fb4 <__swbuf_r+0x78>
   21fb0:	68ac      	ldr	r4, [r5, #8]
   21fb2:	e7d0      	b.n	21f56 <__swbuf_r+0x1a>
   21fb4:	4b09      	ldr	r3, [pc, #36]	; (21fdc <__swbuf_r+0xa0>)
   21fb6:	429c      	cmp	r4, r3
   21fb8:	bf08      	it	eq
   21fba:	68ec      	ldreq	r4, [r5, #12]
   21fbc:	e7cb      	b.n	21f56 <__swbuf_r+0x1a>
   21fbe:	4621      	mov	r1, r4
   21fc0:	4628      	mov	r0, r5
   21fc2:	f000 f80d 	bl	21fe0 <__swsetup_r>
   21fc6:	2800      	cmp	r0, #0
   21fc8:	d0cc      	beq.n	21f64 <__swbuf_r+0x28>
   21fca:	f04f 37ff 	mov.w	r7, #4294967295
   21fce:	4638      	mov	r0, r7
   21fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21fd2:	bf00      	nop
   21fd4:	00026da8 	.word	0x00026da8
   21fd8:	00026dc8 	.word	0x00026dc8
   21fdc:	00026d88 	.word	0x00026d88

00021fe0 <__swsetup_r>:
   21fe0:	4b32      	ldr	r3, [pc, #200]	; (220ac <__swsetup_r+0xcc>)
   21fe2:	b570      	push	{r4, r5, r6, lr}
   21fe4:	681d      	ldr	r5, [r3, #0]
   21fe6:	4606      	mov	r6, r0
   21fe8:	460c      	mov	r4, r1
   21fea:	b125      	cbz	r5, 21ff6 <__swsetup_r+0x16>
   21fec:	69ab      	ldr	r3, [r5, #24]
   21fee:	b913      	cbnz	r3, 21ff6 <__swsetup_r+0x16>
   21ff0:	4628      	mov	r0, r5
   21ff2:	f000 f93b 	bl	2226c <__sinit>
   21ff6:	4b2e      	ldr	r3, [pc, #184]	; (220b0 <__swsetup_r+0xd0>)
   21ff8:	429c      	cmp	r4, r3
   21ffa:	d10f      	bne.n	2201c <__swsetup_r+0x3c>
   21ffc:	686c      	ldr	r4, [r5, #4]
   21ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22002:	b29a      	uxth	r2, r3
   22004:	0715      	lsls	r5, r2, #28
   22006:	d42c      	bmi.n	22062 <__swsetup_r+0x82>
   22008:	06d0      	lsls	r0, r2, #27
   2200a:	d411      	bmi.n	22030 <__swsetup_r+0x50>
   2200c:	2209      	movs	r2, #9
   2200e:	6032      	str	r2, [r6, #0]
   22010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22014:	f04f 30ff 	mov.w	r0, #4294967295
   22018:	81a3      	strh	r3, [r4, #12]
   2201a:	e03e      	b.n	2209a <__swsetup_r+0xba>
   2201c:	4b25      	ldr	r3, [pc, #148]	; (220b4 <__swsetup_r+0xd4>)
   2201e:	429c      	cmp	r4, r3
   22020:	d101      	bne.n	22026 <__swsetup_r+0x46>
   22022:	68ac      	ldr	r4, [r5, #8]
   22024:	e7eb      	b.n	21ffe <__swsetup_r+0x1e>
   22026:	4b24      	ldr	r3, [pc, #144]	; (220b8 <__swsetup_r+0xd8>)
   22028:	429c      	cmp	r4, r3
   2202a:	bf08      	it	eq
   2202c:	68ec      	ldreq	r4, [r5, #12]
   2202e:	e7e6      	b.n	21ffe <__swsetup_r+0x1e>
   22030:	0751      	lsls	r1, r2, #29
   22032:	d512      	bpl.n	2205a <__swsetup_r+0x7a>
   22034:	6b61      	ldr	r1, [r4, #52]	; 0x34
   22036:	b141      	cbz	r1, 2204a <__swsetup_r+0x6a>
   22038:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2203c:	4299      	cmp	r1, r3
   2203e:	d002      	beq.n	22046 <__swsetup_r+0x66>
   22040:	4630      	mov	r0, r6
   22042:	f000 fa23 	bl	2248c <_free_r>
   22046:	2300      	movs	r3, #0
   22048:	6363      	str	r3, [r4, #52]	; 0x34
   2204a:	89a3      	ldrh	r3, [r4, #12]
   2204c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   22050:	81a3      	strh	r3, [r4, #12]
   22052:	2300      	movs	r3, #0
   22054:	6063      	str	r3, [r4, #4]
   22056:	6923      	ldr	r3, [r4, #16]
   22058:	6023      	str	r3, [r4, #0]
   2205a:	89a3      	ldrh	r3, [r4, #12]
   2205c:	f043 0308 	orr.w	r3, r3, #8
   22060:	81a3      	strh	r3, [r4, #12]
   22062:	6923      	ldr	r3, [r4, #16]
   22064:	b94b      	cbnz	r3, 2207a <__swsetup_r+0x9a>
   22066:	89a3      	ldrh	r3, [r4, #12]
   22068:	f403 7320 	and.w	r3, r3, #640	; 0x280
   2206c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   22070:	d003      	beq.n	2207a <__swsetup_r+0x9a>
   22072:	4621      	mov	r1, r4
   22074:	4630      	mov	r0, r6
   22076:	f000 f973 	bl	22360 <__smakebuf_r>
   2207a:	89a2      	ldrh	r2, [r4, #12]
   2207c:	f012 0301 	ands.w	r3, r2, #1
   22080:	d00c      	beq.n	2209c <__swsetup_r+0xbc>
   22082:	2300      	movs	r3, #0
   22084:	60a3      	str	r3, [r4, #8]
   22086:	6963      	ldr	r3, [r4, #20]
   22088:	425b      	negs	r3, r3
   2208a:	61a3      	str	r3, [r4, #24]
   2208c:	6923      	ldr	r3, [r4, #16]
   2208e:	b953      	cbnz	r3, 220a6 <__swsetup_r+0xc6>
   22090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22094:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   22098:	d1ba      	bne.n	22010 <__swsetup_r+0x30>
   2209a:	bd70      	pop	{r4, r5, r6, pc}
   2209c:	0792      	lsls	r2, r2, #30
   2209e:	bf58      	it	pl
   220a0:	6963      	ldrpl	r3, [r4, #20]
   220a2:	60a3      	str	r3, [r4, #8]
   220a4:	e7f2      	b.n	2208c <__swsetup_r+0xac>
   220a6:	2000      	movs	r0, #0
   220a8:	e7f7      	b.n	2209a <__swsetup_r+0xba>
   220aa:	bf00      	nop
   220ac:	20024978 	.word	0x20024978
   220b0:	00026da8 	.word	0x00026da8
   220b4:	00026dc8 	.word	0x00026dc8
   220b8:	00026d88 	.word	0x00026d88

000220bc <__sflush_r>:
   220bc:	898a      	ldrh	r2, [r1, #12]
   220be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   220c2:	4605      	mov	r5, r0
   220c4:	0710      	lsls	r0, r2, #28
   220c6:	460c      	mov	r4, r1
   220c8:	d458      	bmi.n	2217c <__sflush_r+0xc0>
   220ca:	684b      	ldr	r3, [r1, #4]
   220cc:	2b00      	cmp	r3, #0
   220ce:	dc05      	bgt.n	220dc <__sflush_r+0x20>
   220d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   220d2:	2b00      	cmp	r3, #0
   220d4:	dc02      	bgt.n	220dc <__sflush_r+0x20>
   220d6:	2000      	movs	r0, #0
   220d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   220dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   220de:	2e00      	cmp	r6, #0
   220e0:	d0f9      	beq.n	220d6 <__sflush_r+0x1a>
   220e2:	2300      	movs	r3, #0
   220e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   220e8:	682f      	ldr	r7, [r5, #0]
   220ea:	6a21      	ldr	r1, [r4, #32]
   220ec:	602b      	str	r3, [r5, #0]
   220ee:	d032      	beq.n	22156 <__sflush_r+0x9a>
   220f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
   220f2:	89a3      	ldrh	r3, [r4, #12]
   220f4:	075a      	lsls	r2, r3, #29
   220f6:	d505      	bpl.n	22104 <__sflush_r+0x48>
   220f8:	6863      	ldr	r3, [r4, #4]
   220fa:	1ac0      	subs	r0, r0, r3
   220fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   220fe:	b10b      	cbz	r3, 22104 <__sflush_r+0x48>
   22100:	6c23      	ldr	r3, [r4, #64]	; 0x40
   22102:	1ac0      	subs	r0, r0, r3
   22104:	2300      	movs	r3, #0
   22106:	4602      	mov	r2, r0
   22108:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2210a:	4628      	mov	r0, r5
   2210c:	6a21      	ldr	r1, [r4, #32]
   2210e:	47b0      	blx	r6
   22110:	1c43      	adds	r3, r0, #1
   22112:	89a3      	ldrh	r3, [r4, #12]
   22114:	d106      	bne.n	22124 <__sflush_r+0x68>
   22116:	6829      	ldr	r1, [r5, #0]
   22118:	291d      	cmp	r1, #29
   2211a:	d847      	bhi.n	221ac <__sflush_r+0xf0>
   2211c:	4a28      	ldr	r2, [pc, #160]	; (221c0 <__sflush_r+0x104>)
   2211e:	40ca      	lsrs	r2, r1
   22120:	07d6      	lsls	r6, r2, #31
   22122:	d543      	bpl.n	221ac <__sflush_r+0xf0>
   22124:	2200      	movs	r2, #0
   22126:	04d9      	lsls	r1, r3, #19
   22128:	6062      	str	r2, [r4, #4]
   2212a:	6922      	ldr	r2, [r4, #16]
   2212c:	6022      	str	r2, [r4, #0]
   2212e:	d504      	bpl.n	2213a <__sflush_r+0x7e>
   22130:	1c42      	adds	r2, r0, #1
   22132:	d101      	bne.n	22138 <__sflush_r+0x7c>
   22134:	682b      	ldr	r3, [r5, #0]
   22136:	b903      	cbnz	r3, 2213a <__sflush_r+0x7e>
   22138:	6560      	str	r0, [r4, #84]	; 0x54
   2213a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2213c:	602f      	str	r7, [r5, #0]
   2213e:	2900      	cmp	r1, #0
   22140:	d0c9      	beq.n	220d6 <__sflush_r+0x1a>
   22142:	f104 0344 	add.w	r3, r4, #68	; 0x44
   22146:	4299      	cmp	r1, r3
   22148:	d002      	beq.n	22150 <__sflush_r+0x94>
   2214a:	4628      	mov	r0, r5
   2214c:	f000 f99e 	bl	2248c <_free_r>
   22150:	2000      	movs	r0, #0
   22152:	6360      	str	r0, [r4, #52]	; 0x34
   22154:	e7c0      	b.n	220d8 <__sflush_r+0x1c>
   22156:	2301      	movs	r3, #1
   22158:	4628      	mov	r0, r5
   2215a:	47b0      	blx	r6
   2215c:	1c41      	adds	r1, r0, #1
   2215e:	d1c8      	bne.n	220f2 <__sflush_r+0x36>
   22160:	682b      	ldr	r3, [r5, #0]
   22162:	2b00      	cmp	r3, #0
   22164:	d0c5      	beq.n	220f2 <__sflush_r+0x36>
   22166:	2b1d      	cmp	r3, #29
   22168:	d001      	beq.n	2216e <__sflush_r+0xb2>
   2216a:	2b16      	cmp	r3, #22
   2216c:	d101      	bne.n	22172 <__sflush_r+0xb6>
   2216e:	602f      	str	r7, [r5, #0]
   22170:	e7b1      	b.n	220d6 <__sflush_r+0x1a>
   22172:	89a3      	ldrh	r3, [r4, #12]
   22174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22178:	81a3      	strh	r3, [r4, #12]
   2217a:	e7ad      	b.n	220d8 <__sflush_r+0x1c>
   2217c:	690f      	ldr	r7, [r1, #16]
   2217e:	2f00      	cmp	r7, #0
   22180:	d0a9      	beq.n	220d6 <__sflush_r+0x1a>
   22182:	0793      	lsls	r3, r2, #30
   22184:	680e      	ldr	r6, [r1, #0]
   22186:	600f      	str	r7, [r1, #0]
   22188:	bf0c      	ite	eq
   2218a:	694b      	ldreq	r3, [r1, #20]
   2218c:	2300      	movne	r3, #0
   2218e:	eba6 0807 	sub.w	r8, r6, r7
   22192:	608b      	str	r3, [r1, #8]
   22194:	f1b8 0f00 	cmp.w	r8, #0
   22198:	dd9d      	ble.n	220d6 <__sflush_r+0x1a>
   2219a:	4643      	mov	r3, r8
   2219c:	463a      	mov	r2, r7
   2219e:	6a21      	ldr	r1, [r4, #32]
   221a0:	4628      	mov	r0, r5
   221a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   221a4:	47b0      	blx	r6
   221a6:	2800      	cmp	r0, #0
   221a8:	dc06      	bgt.n	221b8 <__sflush_r+0xfc>
   221aa:	89a3      	ldrh	r3, [r4, #12]
   221ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   221b0:	f04f 30ff 	mov.w	r0, #4294967295
   221b4:	81a3      	strh	r3, [r4, #12]
   221b6:	e78f      	b.n	220d8 <__sflush_r+0x1c>
   221b8:	4407      	add	r7, r0
   221ba:	eba8 0800 	sub.w	r8, r8, r0
   221be:	e7e9      	b.n	22194 <__sflush_r+0xd8>
   221c0:	20400001 	.word	0x20400001

000221c4 <_fflush_r>:
   221c4:	b538      	push	{r3, r4, r5, lr}
   221c6:	690b      	ldr	r3, [r1, #16]
   221c8:	4605      	mov	r5, r0
   221ca:	460c      	mov	r4, r1
   221cc:	b1db      	cbz	r3, 22206 <_fflush_r+0x42>
   221ce:	b118      	cbz	r0, 221d8 <_fflush_r+0x14>
   221d0:	6983      	ldr	r3, [r0, #24]
   221d2:	b90b      	cbnz	r3, 221d8 <_fflush_r+0x14>
   221d4:	f000 f84a 	bl	2226c <__sinit>
   221d8:	4b0c      	ldr	r3, [pc, #48]	; (2220c <_fflush_r+0x48>)
   221da:	429c      	cmp	r4, r3
   221dc:	d109      	bne.n	221f2 <_fflush_r+0x2e>
   221de:	686c      	ldr	r4, [r5, #4]
   221e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   221e4:	b17b      	cbz	r3, 22206 <_fflush_r+0x42>
   221e6:	4621      	mov	r1, r4
   221e8:	4628      	mov	r0, r5
   221ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   221ee:	f7ff bf65 	b.w	220bc <__sflush_r>
   221f2:	4b07      	ldr	r3, [pc, #28]	; (22210 <_fflush_r+0x4c>)
   221f4:	429c      	cmp	r4, r3
   221f6:	d101      	bne.n	221fc <_fflush_r+0x38>
   221f8:	68ac      	ldr	r4, [r5, #8]
   221fa:	e7f1      	b.n	221e0 <_fflush_r+0x1c>
   221fc:	4b05      	ldr	r3, [pc, #20]	; (22214 <_fflush_r+0x50>)
   221fe:	429c      	cmp	r4, r3
   22200:	bf08      	it	eq
   22202:	68ec      	ldreq	r4, [r5, #12]
   22204:	e7ec      	b.n	221e0 <_fflush_r+0x1c>
   22206:	2000      	movs	r0, #0
   22208:	bd38      	pop	{r3, r4, r5, pc}
   2220a:	bf00      	nop
   2220c:	00026da8 	.word	0x00026da8
   22210:	00026dc8 	.word	0x00026dc8
   22214:	00026d88 	.word	0x00026d88

00022218 <std>:
   22218:	2300      	movs	r3, #0
   2221a:	b510      	push	{r4, lr}
   2221c:	4604      	mov	r4, r0
   2221e:	6083      	str	r3, [r0, #8]
   22220:	8181      	strh	r1, [r0, #12]
   22222:	4619      	mov	r1, r3
   22224:	6643      	str	r3, [r0, #100]	; 0x64
   22226:	81c2      	strh	r2, [r0, #14]
   22228:	2208      	movs	r2, #8
   2222a:	6183      	str	r3, [r0, #24]
   2222c:	e9c0 3300 	strd	r3, r3, [r0]
   22230:	e9c0 3304 	strd	r3, r3, [r0, #16]
   22234:	305c      	adds	r0, #92	; 0x5c
   22236:	f002 fb2f 	bl	24898 <memset>
   2223a:	4b05      	ldr	r3, [pc, #20]	; (22250 <std+0x38>)
   2223c:	6224      	str	r4, [r4, #32]
   2223e:	6263      	str	r3, [r4, #36]	; 0x24
   22240:	4b04      	ldr	r3, [pc, #16]	; (22254 <std+0x3c>)
   22242:	62a3      	str	r3, [r4, #40]	; 0x28
   22244:	4b04      	ldr	r3, [pc, #16]	; (22258 <std+0x40>)
   22246:	62e3      	str	r3, [r4, #44]	; 0x2c
   22248:	4b04      	ldr	r3, [pc, #16]	; (2225c <std+0x44>)
   2224a:	6323      	str	r3, [r4, #48]	; 0x30
   2224c:	bd10      	pop	{r4, pc}
   2224e:	bf00      	nop
   22250:	00025563 	.word	0x00025563
   22254:	00025585 	.word	0x00025585
   22258:	000255bd 	.word	0x000255bd
   2225c:	000255e1 	.word	0x000255e1

00022260 <_cleanup_r>:
   22260:	4901      	ldr	r1, [pc, #4]	; (22268 <_cleanup_r+0x8>)
   22262:	f002 bdda 	b.w	24e1a <_fwalk_reent>
   22266:	bf00      	nop
   22268:	000221c5 	.word	0x000221c5

0002226c <__sinit>:
   2226c:	6983      	ldr	r3, [r0, #24]
   2226e:	b510      	push	{r4, lr}
   22270:	4604      	mov	r4, r0
   22272:	bb33      	cbnz	r3, 222c2 <__sinit+0x56>
   22274:	6503      	str	r3, [r0, #80]	; 0x50
   22276:	4a13      	ldr	r2, [pc, #76]	; (222c4 <__sinit+0x58>)
   22278:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
   2227c:	4b12      	ldr	r3, [pc, #72]	; (222c8 <__sinit+0x5c>)
   2227e:	6282      	str	r2, [r0, #40]	; 0x28
   22280:	681b      	ldr	r3, [r3, #0]
   22282:	4298      	cmp	r0, r3
   22284:	bf04      	itt	eq
   22286:	2301      	moveq	r3, #1
   22288:	6183      	streq	r3, [r0, #24]
   2228a:	f000 f81f 	bl	222cc <__sfp>
   2228e:	6060      	str	r0, [r4, #4]
   22290:	4620      	mov	r0, r4
   22292:	f000 f81b 	bl	222cc <__sfp>
   22296:	60a0      	str	r0, [r4, #8]
   22298:	4620      	mov	r0, r4
   2229a:	f000 f817 	bl	222cc <__sfp>
   2229e:	2200      	movs	r2, #0
   222a0:	60e0      	str	r0, [r4, #12]
   222a2:	2104      	movs	r1, #4
   222a4:	6860      	ldr	r0, [r4, #4]
   222a6:	f7ff ffb7 	bl	22218 <std>
   222aa:	2201      	movs	r2, #1
   222ac:	2109      	movs	r1, #9
   222ae:	68a0      	ldr	r0, [r4, #8]
   222b0:	f7ff ffb2 	bl	22218 <std>
   222b4:	2202      	movs	r2, #2
   222b6:	2112      	movs	r1, #18
   222b8:	68e0      	ldr	r0, [r4, #12]
   222ba:	f7ff ffad 	bl	22218 <std>
   222be:	2301      	movs	r3, #1
   222c0:	61a3      	str	r3, [r4, #24]
   222c2:	bd10      	pop	{r4, pc}
   222c4:	00022261 	.word	0x00022261
   222c8:	00026d84 	.word	0x00026d84

000222cc <__sfp>:
   222cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   222ce:	4b1b      	ldr	r3, [pc, #108]	; (2233c <__sfp+0x70>)
   222d0:	4607      	mov	r7, r0
   222d2:	681e      	ldr	r6, [r3, #0]
   222d4:	69b3      	ldr	r3, [r6, #24]
   222d6:	b913      	cbnz	r3, 222de <__sfp+0x12>
   222d8:	4630      	mov	r0, r6
   222da:	f7ff ffc7 	bl	2226c <__sinit>
   222de:	3648      	adds	r6, #72	; 0x48
   222e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   222e4:	3b01      	subs	r3, #1
   222e6:	d503      	bpl.n	222f0 <__sfp+0x24>
   222e8:	6833      	ldr	r3, [r6, #0]
   222ea:	b133      	cbz	r3, 222fa <__sfp+0x2e>
   222ec:	6836      	ldr	r6, [r6, #0]
   222ee:	e7f7      	b.n	222e0 <__sfp+0x14>
   222f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   222f4:	b16d      	cbz	r5, 22312 <__sfp+0x46>
   222f6:	3468      	adds	r4, #104	; 0x68
   222f8:	e7f4      	b.n	222e4 <__sfp+0x18>
   222fa:	2104      	movs	r1, #4
   222fc:	4638      	mov	r0, r7
   222fe:	f002 fd76 	bl	24dee <__sfmoreglue>
   22302:	6030      	str	r0, [r6, #0]
   22304:	2800      	cmp	r0, #0
   22306:	d1f1      	bne.n	222ec <__sfp+0x20>
   22308:	230c      	movs	r3, #12
   2230a:	4604      	mov	r4, r0
   2230c:	603b      	str	r3, [r7, #0]
   2230e:	4620      	mov	r0, r4
   22310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22312:	4b0b      	ldr	r3, [pc, #44]	; (22340 <__sfp+0x74>)
   22314:	2208      	movs	r2, #8
   22316:	6665      	str	r5, [r4, #100]	; 0x64
   22318:	4629      	mov	r1, r5
   2231a:	60a5      	str	r5, [r4, #8]
   2231c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   22320:	e9c4 5500 	strd	r5, r5, [r4]
   22324:	e9c4 3503 	strd	r3, r5, [r4, #12]
   22328:	e9c4 5505 	strd	r5, r5, [r4, #20]
   2232c:	f002 fab4 	bl	24898 <memset>
   22330:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   22334:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   22338:	e7e9      	b.n	2230e <__sfp+0x42>
   2233a:	bf00      	nop
   2233c:	00026d84 	.word	0x00026d84
   22340:	ffff0001 	.word	0xffff0001

00022344 <_localeconv_r>:
   22344:	4b04      	ldr	r3, [pc, #16]	; (22358 <_localeconv_r+0x14>)
   22346:	681b      	ldr	r3, [r3, #0]
   22348:	6a18      	ldr	r0, [r3, #32]
   2234a:	4b04      	ldr	r3, [pc, #16]	; (2235c <_localeconv_r+0x18>)
   2234c:	2800      	cmp	r0, #0
   2234e:	bf08      	it	eq
   22350:	4618      	moveq	r0, r3
   22352:	30f0      	adds	r0, #240	; 0xf0
   22354:	4770      	bx	lr
   22356:	bf00      	nop
   22358:	20024978 	.word	0x20024978
   2235c:	200249dc 	.word	0x200249dc

00022360 <__smakebuf_r>:
   22360:	898b      	ldrh	r3, [r1, #12]
   22362:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22364:	079d      	lsls	r5, r3, #30
   22366:	4606      	mov	r6, r0
   22368:	460c      	mov	r4, r1
   2236a:	d507      	bpl.n	2237c <__smakebuf_r+0x1c>
   2236c:	f104 0347 	add.w	r3, r4, #71	; 0x47
   22370:	6023      	str	r3, [r4, #0]
   22372:	6123      	str	r3, [r4, #16]
   22374:	2301      	movs	r3, #1
   22376:	6163      	str	r3, [r4, #20]
   22378:	b002      	add	sp, #8
   2237a:	bd70      	pop	{r4, r5, r6, pc}
   2237c:	ab01      	add	r3, sp, #4
   2237e:	466a      	mov	r2, sp
   22380:	f002 fd69 	bl	24e56 <__swhatbuf_r>
   22384:	9900      	ldr	r1, [sp, #0]
   22386:	4605      	mov	r5, r0
   22388:	4630      	mov	r0, r6
   2238a:	f000 f8cd 	bl	22528 <_malloc_r>
   2238e:	b948      	cbnz	r0, 223a4 <__smakebuf_r+0x44>
   22390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22394:	059a      	lsls	r2, r3, #22
   22396:	d4ef      	bmi.n	22378 <__smakebuf_r+0x18>
   22398:	f023 0303 	bic.w	r3, r3, #3
   2239c:	f043 0302 	orr.w	r3, r3, #2
   223a0:	81a3      	strh	r3, [r4, #12]
   223a2:	e7e3      	b.n	2236c <__smakebuf_r+0xc>
   223a4:	4b0d      	ldr	r3, [pc, #52]	; (223dc <__smakebuf_r+0x7c>)
   223a6:	62b3      	str	r3, [r6, #40]	; 0x28
   223a8:	89a3      	ldrh	r3, [r4, #12]
   223aa:	6020      	str	r0, [r4, #0]
   223ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   223b0:	6120      	str	r0, [r4, #16]
   223b2:	81a3      	strh	r3, [r4, #12]
   223b4:	9b00      	ldr	r3, [sp, #0]
   223b6:	6163      	str	r3, [r4, #20]
   223b8:	9b01      	ldr	r3, [sp, #4]
   223ba:	b15b      	cbz	r3, 223d4 <__smakebuf_r+0x74>
   223bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   223c0:	4630      	mov	r0, r6
   223c2:	f000 fa61 	bl	22888 <_isatty_r>
   223c6:	b128      	cbz	r0, 223d4 <__smakebuf_r+0x74>
   223c8:	89a3      	ldrh	r3, [r4, #12]
   223ca:	f023 0303 	bic.w	r3, r3, #3
   223ce:	f043 0301 	orr.w	r3, r3, #1
   223d2:	81a3      	strh	r3, [r4, #12]
   223d4:	89a3      	ldrh	r3, [r4, #12]
   223d6:	431d      	orrs	r5, r3
   223d8:	81a5      	strh	r5, [r4, #12]
   223da:	e7cd      	b.n	22378 <__smakebuf_r+0x18>
   223dc:	00022261 	.word	0x00022261

000223e0 <malloc>:
   223e0:	4b02      	ldr	r3, [pc, #8]	; (223ec <malloc+0xc>)
   223e2:	4601      	mov	r1, r0
   223e4:	6818      	ldr	r0, [r3, #0]
   223e6:	f000 b89f 	b.w	22528 <_malloc_r>
   223ea:	bf00      	nop
   223ec:	20024978 	.word	0x20024978

000223f0 <__pow5mult>:
   223f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   223f4:	4615      	mov	r5, r2
   223f6:	f012 0203 	ands.w	r2, r2, #3
   223fa:	4606      	mov	r6, r0
   223fc:	460f      	mov	r7, r1
   223fe:	d007      	beq.n	22410 <__pow5mult+0x20>
   22400:	3a01      	subs	r2, #1
   22402:	4c21      	ldr	r4, [pc, #132]	; (22488 <__pow5mult+0x98>)
   22404:	2300      	movs	r3, #0
   22406:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   2240a:	f002 fdac 	bl	24f66 <__multadd>
   2240e:	4607      	mov	r7, r0
   22410:	10ad      	asrs	r5, r5, #2
   22412:	d035      	beq.n	22480 <__pow5mult+0x90>
   22414:	6a74      	ldr	r4, [r6, #36]	; 0x24
   22416:	b93c      	cbnz	r4, 22428 <__pow5mult+0x38>
   22418:	2010      	movs	r0, #16
   2241a:	f7ff ffe1 	bl	223e0 <malloc>
   2241e:	6270      	str	r0, [r6, #36]	; 0x24
   22420:	6004      	str	r4, [r0, #0]
   22422:	60c4      	str	r4, [r0, #12]
   22424:	e9c0 4401 	strd	r4, r4, [r0, #4]
   22428:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   2242c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   22430:	b94c      	cbnz	r4, 22446 <__pow5mult+0x56>
   22432:	f240 2171 	movw	r1, #625	; 0x271
   22436:	4630      	mov	r0, r6
   22438:	f002 fe20 	bl	2507c <__i2b>
   2243c:	2300      	movs	r3, #0
   2243e:	4604      	mov	r4, r0
   22440:	f8c8 0008 	str.w	r0, [r8, #8]
   22444:	6003      	str	r3, [r0, #0]
   22446:	f04f 0800 	mov.w	r8, #0
   2244a:	07eb      	lsls	r3, r5, #31
   2244c:	d50a      	bpl.n	22464 <__pow5mult+0x74>
   2244e:	4639      	mov	r1, r7
   22450:	4622      	mov	r2, r4
   22452:	4630      	mov	r0, r6
   22454:	f002 fe1b 	bl	2508e <__multiply>
   22458:	4681      	mov	r9, r0
   2245a:	4639      	mov	r1, r7
   2245c:	4630      	mov	r0, r6
   2245e:	464f      	mov	r7, r9
   22460:	f002 fd6a 	bl	24f38 <_Bfree>
   22464:	106d      	asrs	r5, r5, #1
   22466:	d00b      	beq.n	22480 <__pow5mult+0x90>
   22468:	6820      	ldr	r0, [r4, #0]
   2246a:	b938      	cbnz	r0, 2247c <__pow5mult+0x8c>
   2246c:	4622      	mov	r2, r4
   2246e:	4621      	mov	r1, r4
   22470:	4630      	mov	r0, r6
   22472:	f002 fe0c 	bl	2508e <__multiply>
   22476:	6020      	str	r0, [r4, #0]
   22478:	f8c0 8000 	str.w	r8, [r0]
   2247c:	4604      	mov	r4, r0
   2247e:	e7e4      	b.n	2244a <__pow5mult+0x5a>
   22480:	4638      	mov	r0, r7
   22482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22486:	bf00      	nop
   22488:	00026de8 	.word	0x00026de8

0002248c <_free_r>:
   2248c:	b538      	push	{r3, r4, r5, lr}
   2248e:	4605      	mov	r5, r0
   22490:	2900      	cmp	r1, #0
   22492:	d045      	beq.n	22520 <_free_r+0x94>
   22494:	f851 3c04 	ldr.w	r3, [r1, #-4]
   22498:	1f0c      	subs	r4, r1, #4
   2249a:	2b00      	cmp	r3, #0
   2249c:	bfb8      	it	lt
   2249e:	18e4      	addlt	r4, r4, r3
   224a0:	f003 f8a2 	bl	255e8 <__malloc_lock>
   224a4:	4a1f      	ldr	r2, [pc, #124]	; (22524 <_free_r+0x98>)
   224a6:	6813      	ldr	r3, [r2, #0]
   224a8:	4610      	mov	r0, r2
   224aa:	b933      	cbnz	r3, 224ba <_free_r+0x2e>
   224ac:	6063      	str	r3, [r4, #4]
   224ae:	6014      	str	r4, [r2, #0]
   224b0:	4628      	mov	r0, r5
   224b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   224b6:	f003 b898 	b.w	255ea <__malloc_unlock>
   224ba:	42a3      	cmp	r3, r4
   224bc:	d90c      	bls.n	224d8 <_free_r+0x4c>
   224be:	6821      	ldr	r1, [r4, #0]
   224c0:	1862      	adds	r2, r4, r1
   224c2:	4293      	cmp	r3, r2
   224c4:	bf02      	ittt	eq
   224c6:	681a      	ldreq	r2, [r3, #0]
   224c8:	685b      	ldreq	r3, [r3, #4]
   224ca:	1852      	addeq	r2, r2, r1
   224cc:	6063      	str	r3, [r4, #4]
   224ce:	bf08      	it	eq
   224d0:	6022      	streq	r2, [r4, #0]
   224d2:	6004      	str	r4, [r0, #0]
   224d4:	e7ec      	b.n	224b0 <_free_r+0x24>
   224d6:	4613      	mov	r3, r2
   224d8:	685a      	ldr	r2, [r3, #4]
   224da:	b10a      	cbz	r2, 224e0 <_free_r+0x54>
   224dc:	42a2      	cmp	r2, r4
   224de:	d9fa      	bls.n	224d6 <_free_r+0x4a>
   224e0:	6819      	ldr	r1, [r3, #0]
   224e2:	1858      	adds	r0, r3, r1
   224e4:	42a0      	cmp	r0, r4
   224e6:	d10b      	bne.n	22500 <_free_r+0x74>
   224e8:	6820      	ldr	r0, [r4, #0]
   224ea:	4401      	add	r1, r0
   224ec:	1858      	adds	r0, r3, r1
   224ee:	6019      	str	r1, [r3, #0]
   224f0:	4282      	cmp	r2, r0
   224f2:	d1dd      	bne.n	224b0 <_free_r+0x24>
   224f4:	6810      	ldr	r0, [r2, #0]
   224f6:	6852      	ldr	r2, [r2, #4]
   224f8:	4401      	add	r1, r0
   224fa:	605a      	str	r2, [r3, #4]
   224fc:	6019      	str	r1, [r3, #0]
   224fe:	e7d7      	b.n	224b0 <_free_r+0x24>
   22500:	d902      	bls.n	22508 <_free_r+0x7c>
   22502:	230c      	movs	r3, #12
   22504:	602b      	str	r3, [r5, #0]
   22506:	e7d3      	b.n	224b0 <_free_r+0x24>
   22508:	6820      	ldr	r0, [r4, #0]
   2250a:	1821      	adds	r1, r4, r0
   2250c:	428a      	cmp	r2, r1
   2250e:	bf02      	ittt	eq
   22510:	6811      	ldreq	r1, [r2, #0]
   22512:	6852      	ldreq	r2, [r2, #4]
   22514:	1809      	addeq	r1, r1, r0
   22516:	6062      	str	r2, [r4, #4]
   22518:	bf08      	it	eq
   2251a:	6021      	streq	r1, [r4, #0]
   2251c:	605c      	str	r4, [r3, #4]
   2251e:	e7c7      	b.n	224b0 <_free_r+0x24>
   22520:	bd38      	pop	{r3, r4, r5, pc}
   22522:	bf00      	nop
   22524:	20022338 	.word	0x20022338

00022528 <_malloc_r>:
   22528:	b570      	push	{r4, r5, r6, lr}
   2252a:	1ccd      	adds	r5, r1, #3
   2252c:	4606      	mov	r6, r0
   2252e:	f025 0503 	bic.w	r5, r5, #3
   22532:	3508      	adds	r5, #8
   22534:	2d0c      	cmp	r5, #12
   22536:	bf38      	it	cc
   22538:	250c      	movcc	r5, #12
   2253a:	2d00      	cmp	r5, #0
   2253c:	db01      	blt.n	22542 <_malloc_r+0x1a>
   2253e:	42a9      	cmp	r1, r5
   22540:	d903      	bls.n	2254a <_malloc_r+0x22>
   22542:	230c      	movs	r3, #12
   22544:	6033      	str	r3, [r6, #0]
   22546:	2000      	movs	r0, #0
   22548:	bd70      	pop	{r4, r5, r6, pc}
   2254a:	f003 f84d 	bl	255e8 <__malloc_lock>
   2254e:	4a21      	ldr	r2, [pc, #132]	; (225d4 <_malloc_r+0xac>)
   22550:	6814      	ldr	r4, [r2, #0]
   22552:	4621      	mov	r1, r4
   22554:	b991      	cbnz	r1, 2257c <_malloc_r+0x54>
   22556:	4c20      	ldr	r4, [pc, #128]	; (225d8 <_malloc_r+0xb0>)
   22558:	6823      	ldr	r3, [r4, #0]
   2255a:	b91b      	cbnz	r3, 22564 <_malloc_r+0x3c>
   2255c:	4630      	mov	r0, r6
   2255e:	f000 f935 	bl	227cc <_sbrk_r>
   22562:	6020      	str	r0, [r4, #0]
   22564:	4629      	mov	r1, r5
   22566:	4630      	mov	r0, r6
   22568:	f000 f930 	bl	227cc <_sbrk_r>
   2256c:	1c43      	adds	r3, r0, #1
   2256e:	d124      	bne.n	225ba <_malloc_r+0x92>
   22570:	230c      	movs	r3, #12
   22572:	4630      	mov	r0, r6
   22574:	6033      	str	r3, [r6, #0]
   22576:	f003 f838 	bl	255ea <__malloc_unlock>
   2257a:	e7e4      	b.n	22546 <_malloc_r+0x1e>
   2257c:	680b      	ldr	r3, [r1, #0]
   2257e:	1b5b      	subs	r3, r3, r5
   22580:	d418      	bmi.n	225b4 <_malloc_r+0x8c>
   22582:	2b0b      	cmp	r3, #11
   22584:	d90f      	bls.n	225a6 <_malloc_r+0x7e>
   22586:	18cc      	adds	r4, r1, r3
   22588:	600b      	str	r3, [r1, #0]
   2258a:	50cd      	str	r5, [r1, r3]
   2258c:	4630      	mov	r0, r6
   2258e:	f003 f82c 	bl	255ea <__malloc_unlock>
   22592:	f104 000b 	add.w	r0, r4, #11
   22596:	1d23      	adds	r3, r4, #4
   22598:	f020 0007 	bic.w	r0, r0, #7
   2259c:	1ac3      	subs	r3, r0, r3
   2259e:	d0d3      	beq.n	22548 <_malloc_r+0x20>
   225a0:	425a      	negs	r2, r3
   225a2:	50e2      	str	r2, [r4, r3]
   225a4:	e7d0      	b.n	22548 <_malloc_r+0x20>
   225a6:	428c      	cmp	r4, r1
   225a8:	684b      	ldr	r3, [r1, #4]
   225aa:	bf1a      	itte	ne
   225ac:	6063      	strne	r3, [r4, #4]
   225ae:	460c      	movne	r4, r1
   225b0:	6013      	streq	r3, [r2, #0]
   225b2:	e7eb      	b.n	2258c <_malloc_r+0x64>
   225b4:	460c      	mov	r4, r1
   225b6:	6849      	ldr	r1, [r1, #4]
   225b8:	e7cc      	b.n	22554 <_malloc_r+0x2c>
   225ba:	1cc4      	adds	r4, r0, #3
   225bc:	f024 0403 	bic.w	r4, r4, #3
   225c0:	42a0      	cmp	r0, r4
   225c2:	d005      	beq.n	225d0 <_malloc_r+0xa8>
   225c4:	1a21      	subs	r1, r4, r0
   225c6:	4630      	mov	r0, r6
   225c8:	f000 f900 	bl	227cc <_sbrk_r>
   225cc:	3001      	adds	r0, #1
   225ce:	d0cf      	beq.n	22570 <_malloc_r+0x48>
   225d0:	6025      	str	r5, [r4, #0]
   225d2:	e7db      	b.n	2258c <_malloc_r+0x64>
   225d4:	20022338 	.word	0x20022338
   225d8:	2002233c 	.word	0x2002233c

000225dc <_svfiprintf_r>:
   225dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   225e0:	461d      	mov	r5, r3
   225e2:	898b      	ldrh	r3, [r1, #12]
   225e4:	b09d      	sub	sp, #116	; 0x74
   225e6:	4680      	mov	r8, r0
   225e8:	061f      	lsls	r7, r3, #24
   225ea:	460c      	mov	r4, r1
   225ec:	4616      	mov	r6, r2
   225ee:	d50f      	bpl.n	22610 <_svfiprintf_r+0x34>
   225f0:	690b      	ldr	r3, [r1, #16]
   225f2:	b96b      	cbnz	r3, 22610 <_svfiprintf_r+0x34>
   225f4:	2140      	movs	r1, #64	; 0x40
   225f6:	f7ff ff97 	bl	22528 <_malloc_r>
   225fa:	6020      	str	r0, [r4, #0]
   225fc:	6120      	str	r0, [r4, #16]
   225fe:	b928      	cbnz	r0, 2260c <_svfiprintf_r+0x30>
   22600:	230c      	movs	r3, #12
   22602:	f8c8 3000 	str.w	r3, [r8]
   22606:	f04f 30ff 	mov.w	r0, #4294967295
   2260a:	e0c8      	b.n	2279e <_svfiprintf_r+0x1c2>
   2260c:	2340      	movs	r3, #64	; 0x40
   2260e:	6163      	str	r3, [r4, #20]
   22610:	2300      	movs	r3, #0
   22612:	f04f 0b01 	mov.w	fp, #1
   22616:	9503      	str	r5, [sp, #12]
   22618:	9309      	str	r3, [sp, #36]	; 0x24
   2261a:	2320      	movs	r3, #32
   2261c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   22620:	2330      	movs	r3, #48	; 0x30
   22622:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   22626:	4637      	mov	r7, r6
   22628:	463d      	mov	r5, r7
   2262a:	f815 3b01 	ldrb.w	r3, [r5], #1
   2262e:	b10b      	cbz	r3, 22634 <_svfiprintf_r+0x58>
   22630:	2b25      	cmp	r3, #37	; 0x25
   22632:	d13e      	bne.n	226b2 <_svfiprintf_r+0xd6>
   22634:	ebb7 0a06 	subs.w	sl, r7, r6
   22638:	d00b      	beq.n	22652 <_svfiprintf_r+0x76>
   2263a:	4653      	mov	r3, sl
   2263c:	4632      	mov	r2, r6
   2263e:	4621      	mov	r1, r4
   22640:	4640      	mov	r0, r8
   22642:	f002 ff0a 	bl	2545a <__ssputs_r>
   22646:	3001      	adds	r0, #1
   22648:	f000 80a4 	beq.w	22794 <_svfiprintf_r+0x1b8>
   2264c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2264e:	4453      	add	r3, sl
   22650:	9309      	str	r3, [sp, #36]	; 0x24
   22652:	783b      	ldrb	r3, [r7, #0]
   22654:	2b00      	cmp	r3, #0
   22656:	f000 809d 	beq.w	22794 <_svfiprintf_r+0x1b8>
   2265a:	2300      	movs	r3, #0
   2265c:	f04f 32ff 	mov.w	r2, #4294967295
   22660:	9304      	str	r3, [sp, #16]
   22662:	9307      	str	r3, [sp, #28]
   22664:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   22668:	931a      	str	r3, [sp, #104]	; 0x68
   2266a:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2266e:	462f      	mov	r7, r5
   22670:	2205      	movs	r2, #5
   22672:	4851      	ldr	r0, [pc, #324]	; (227b8 <_svfiprintf_r+0x1dc>)
   22674:	f817 1b01 	ldrb.w	r1, [r7], #1
   22678:	f002 f8e6 	bl	24848 <memchr>
   2267c:	9b04      	ldr	r3, [sp, #16]
   2267e:	b9d0      	cbnz	r0, 226b6 <_svfiprintf_r+0xda>
   22680:	06d9      	lsls	r1, r3, #27
   22682:	bf44      	itt	mi
   22684:	2220      	movmi	r2, #32
   22686:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2268a:	071a      	lsls	r2, r3, #28
   2268c:	bf44      	itt	mi
   2268e:	222b      	movmi	r2, #43	; 0x2b
   22690:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   22694:	782a      	ldrb	r2, [r5, #0]
   22696:	2a2a      	cmp	r2, #42	; 0x2a
   22698:	d015      	beq.n	226c6 <_svfiprintf_r+0xea>
   2269a:	462f      	mov	r7, r5
   2269c:	9a07      	ldr	r2, [sp, #28]
   2269e:	2000      	movs	r0, #0
   226a0:	250a      	movs	r5, #10
   226a2:	4639      	mov	r1, r7
   226a4:	f811 3b01 	ldrb.w	r3, [r1], #1
   226a8:	3b30      	subs	r3, #48	; 0x30
   226aa:	2b09      	cmp	r3, #9
   226ac:	d94d      	bls.n	2274a <_svfiprintf_r+0x16e>
   226ae:	b1b8      	cbz	r0, 226e0 <_svfiprintf_r+0x104>
   226b0:	e00f      	b.n	226d2 <_svfiprintf_r+0xf6>
   226b2:	462f      	mov	r7, r5
   226b4:	e7b8      	b.n	22628 <_svfiprintf_r+0x4c>
   226b6:	4a40      	ldr	r2, [pc, #256]	; (227b8 <_svfiprintf_r+0x1dc>)
   226b8:	463d      	mov	r5, r7
   226ba:	1a80      	subs	r0, r0, r2
   226bc:	fa0b f000 	lsl.w	r0, fp, r0
   226c0:	4318      	orrs	r0, r3
   226c2:	9004      	str	r0, [sp, #16]
   226c4:	e7d3      	b.n	2266e <_svfiprintf_r+0x92>
   226c6:	9a03      	ldr	r2, [sp, #12]
   226c8:	1d11      	adds	r1, r2, #4
   226ca:	6812      	ldr	r2, [r2, #0]
   226cc:	2a00      	cmp	r2, #0
   226ce:	9103      	str	r1, [sp, #12]
   226d0:	db01      	blt.n	226d6 <_svfiprintf_r+0xfa>
   226d2:	9207      	str	r2, [sp, #28]
   226d4:	e004      	b.n	226e0 <_svfiprintf_r+0x104>
   226d6:	4252      	negs	r2, r2
   226d8:	f043 0302 	orr.w	r3, r3, #2
   226dc:	9207      	str	r2, [sp, #28]
   226de:	9304      	str	r3, [sp, #16]
   226e0:	783b      	ldrb	r3, [r7, #0]
   226e2:	2b2e      	cmp	r3, #46	; 0x2e
   226e4:	d10c      	bne.n	22700 <_svfiprintf_r+0x124>
   226e6:	787b      	ldrb	r3, [r7, #1]
   226e8:	2b2a      	cmp	r3, #42	; 0x2a
   226ea:	d133      	bne.n	22754 <_svfiprintf_r+0x178>
   226ec:	9b03      	ldr	r3, [sp, #12]
   226ee:	3702      	adds	r7, #2
   226f0:	1d1a      	adds	r2, r3, #4
   226f2:	681b      	ldr	r3, [r3, #0]
   226f4:	2b00      	cmp	r3, #0
   226f6:	9203      	str	r2, [sp, #12]
   226f8:	bfb8      	it	lt
   226fa:	f04f 33ff 	movlt.w	r3, #4294967295
   226fe:	9305      	str	r3, [sp, #20]
   22700:	4d2e      	ldr	r5, [pc, #184]	; (227bc <_svfiprintf_r+0x1e0>)
   22702:	2203      	movs	r2, #3
   22704:	7839      	ldrb	r1, [r7, #0]
   22706:	4628      	mov	r0, r5
   22708:	f002 f89e 	bl	24848 <memchr>
   2270c:	b138      	cbz	r0, 2271e <_svfiprintf_r+0x142>
   2270e:	2340      	movs	r3, #64	; 0x40
   22710:	1b40      	subs	r0, r0, r5
   22712:	3701      	adds	r7, #1
   22714:	fa03 f000 	lsl.w	r0, r3, r0
   22718:	9b04      	ldr	r3, [sp, #16]
   2271a:	4303      	orrs	r3, r0
   2271c:	9304      	str	r3, [sp, #16]
   2271e:	7839      	ldrb	r1, [r7, #0]
   22720:	2206      	movs	r2, #6
   22722:	4827      	ldr	r0, [pc, #156]	; (227c0 <_svfiprintf_r+0x1e4>)
   22724:	1c7e      	adds	r6, r7, #1
   22726:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2272a:	f002 f88d 	bl	24848 <memchr>
   2272e:	2800      	cmp	r0, #0
   22730:	d038      	beq.n	227a4 <_svfiprintf_r+0x1c8>
   22732:	4b24      	ldr	r3, [pc, #144]	; (227c4 <_svfiprintf_r+0x1e8>)
   22734:	bb13      	cbnz	r3, 2277c <_svfiprintf_r+0x1a0>
   22736:	9b03      	ldr	r3, [sp, #12]
   22738:	3307      	adds	r3, #7
   2273a:	f023 0307 	bic.w	r3, r3, #7
   2273e:	3308      	adds	r3, #8
   22740:	9303      	str	r3, [sp, #12]
   22742:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22744:	444b      	add	r3, r9
   22746:	9309      	str	r3, [sp, #36]	; 0x24
   22748:	e76d      	b.n	22626 <_svfiprintf_r+0x4a>
   2274a:	fb05 3202 	mla	r2, r5, r2, r3
   2274e:	2001      	movs	r0, #1
   22750:	460f      	mov	r7, r1
   22752:	e7a6      	b.n	226a2 <_svfiprintf_r+0xc6>
   22754:	2300      	movs	r3, #0
   22756:	3701      	adds	r7, #1
   22758:	250a      	movs	r5, #10
   2275a:	4619      	mov	r1, r3
   2275c:	9305      	str	r3, [sp, #20]
   2275e:	4638      	mov	r0, r7
   22760:	f810 2b01 	ldrb.w	r2, [r0], #1
   22764:	3a30      	subs	r2, #48	; 0x30
   22766:	2a09      	cmp	r2, #9
   22768:	d903      	bls.n	22772 <_svfiprintf_r+0x196>
   2276a:	2b00      	cmp	r3, #0
   2276c:	d0c8      	beq.n	22700 <_svfiprintf_r+0x124>
   2276e:	9105      	str	r1, [sp, #20]
   22770:	e7c6      	b.n	22700 <_svfiprintf_r+0x124>
   22772:	fb05 2101 	mla	r1, r5, r1, r2
   22776:	2301      	movs	r3, #1
   22778:	4607      	mov	r7, r0
   2277a:	e7f0      	b.n	2275e <_svfiprintf_r+0x182>
   2277c:	ab03      	add	r3, sp, #12
   2277e:	4622      	mov	r2, r4
   22780:	a904      	add	r1, sp, #16
   22782:	4640      	mov	r0, r8
   22784:	9300      	str	r3, [sp, #0]
   22786:	4b10      	ldr	r3, [pc, #64]	; (227c8 <_svfiprintf_r+0x1ec>)
   22788:	f7ff f824 	bl	217d4 <_printf_float>
   2278c:	f1b0 3fff 	cmp.w	r0, #4294967295
   22790:	4681      	mov	r9, r0
   22792:	d1d6      	bne.n	22742 <_svfiprintf_r+0x166>
   22794:	89a3      	ldrh	r3, [r4, #12]
   22796:	065b      	lsls	r3, r3, #25
   22798:	f53f af35 	bmi.w	22606 <_svfiprintf_r+0x2a>
   2279c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2279e:	b01d      	add	sp, #116	; 0x74
   227a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   227a4:	ab03      	add	r3, sp, #12
   227a6:	4622      	mov	r2, r4
   227a8:	a904      	add	r1, sp, #16
   227aa:	4640      	mov	r0, r8
   227ac:	9300      	str	r3, [sp, #0]
   227ae:	4b06      	ldr	r3, [pc, #24]	; (227c8 <_svfiprintf_r+0x1ec>)
   227b0:	f7ff fa50 	bl	21c54 <_printf_i>
   227b4:	e7ea      	b.n	2278c <_svfiprintf_r+0x1b0>
   227b6:	bf00      	nop
   227b8:	0002796a 	.word	0x0002796a
   227bc:	00027970 	.word	0x00027970
   227c0:	00027974 	.word	0x00027974
   227c4:	000217d5 	.word	0x000217d5
   227c8:	0002545b 	.word	0x0002545b

000227cc <_sbrk_r>:
   227cc:	b538      	push	{r3, r4, r5, lr}
   227ce:	2300      	movs	r3, #0
   227d0:	4c05      	ldr	r4, [pc, #20]	; (227e8 <_sbrk_r+0x1c>)
   227d2:	4605      	mov	r5, r0
   227d4:	4608      	mov	r0, r1
   227d6:	6023      	str	r3, [r4, #0]
   227d8:	f7ee f870 	bl	108bc <_sbrk>
   227dc:	1c43      	adds	r3, r0, #1
   227de:	d102      	bne.n	227e6 <_sbrk_r+0x1a>
   227e0:	6823      	ldr	r3, [r4, #0]
   227e2:	b103      	cbz	r3, 227e6 <_sbrk_r+0x1a>
   227e4:	602b      	str	r3, [r5, #0]
   227e6:	bd38      	pop	{r3, r4, r5, pc}
   227e8:	200227f8 	.word	0x200227f8

000227ec <raise>:
   227ec:	4b02      	ldr	r3, [pc, #8]	; (227f8 <raise+0xc>)
   227ee:	4601      	mov	r1, r0
   227f0:	6818      	ldr	r0, [r3, #0]
   227f2:	f002 be8c 	b.w	2550e <_raise_r>
   227f6:	bf00      	nop
   227f8:	20024978 	.word	0x20024978

000227fc <_kill_r>:
   227fc:	b538      	push	{r3, r4, r5, lr}
   227fe:	2300      	movs	r3, #0
   22800:	4c06      	ldr	r4, [pc, #24]	; (2281c <_kill_r+0x20>)
   22802:	4605      	mov	r5, r0
   22804:	4608      	mov	r0, r1
   22806:	4611      	mov	r1, r2
   22808:	6023      	str	r3, [r4, #0]
   2280a:	f000 fff3 	bl	237f4 <_kill>
   2280e:	1c43      	adds	r3, r0, #1
   22810:	d102      	bne.n	22818 <_kill_r+0x1c>
   22812:	6823      	ldr	r3, [r4, #0]
   22814:	b103      	cbz	r3, 22818 <_kill_r+0x1c>
   22816:	602b      	str	r3, [r5, #0]
   22818:	bd38      	pop	{r3, r4, r5, pc}
   2281a:	bf00      	nop
   2281c:	200227f8 	.word	0x200227f8

00022820 <_write_r>:
   22820:	b538      	push	{r3, r4, r5, lr}
   22822:	4605      	mov	r5, r0
   22824:	4c06      	ldr	r4, [pc, #24]	; (22840 <_write_r+0x20>)
   22826:	4608      	mov	r0, r1
   22828:	4611      	mov	r1, r2
   2282a:	2200      	movs	r2, #0
   2282c:	6022      	str	r2, [r4, #0]
   2282e:	461a      	mov	r2, r3
   22830:	f000 ffd5 	bl	237de <_write>
   22834:	1c43      	adds	r3, r0, #1
   22836:	d102      	bne.n	2283e <_write_r+0x1e>
   22838:	6823      	ldr	r3, [r4, #0]
   2283a:	b103      	cbz	r3, 2283e <_write_r+0x1e>
   2283c:	602b      	str	r3, [r5, #0]
   2283e:	bd38      	pop	{r3, r4, r5, pc}
   22840:	200227f8 	.word	0x200227f8

00022844 <_close_r>:
   22844:	b538      	push	{r3, r4, r5, lr}
   22846:	2300      	movs	r3, #0
   22848:	4c05      	ldr	r4, [pc, #20]	; (22860 <_close_r+0x1c>)
   2284a:	4605      	mov	r5, r0
   2284c:	4608      	mov	r0, r1
   2284e:	6023      	str	r3, [r4, #0]
   22850:	f000 ffc9 	bl	237e6 <_close>
   22854:	1c43      	adds	r3, r0, #1
   22856:	d102      	bne.n	2285e <_close_r+0x1a>
   22858:	6823      	ldr	r3, [r4, #0]
   2285a:	b103      	cbz	r3, 2285e <_close_r+0x1a>
   2285c:	602b      	str	r3, [r5, #0]
   2285e:	bd38      	pop	{r3, r4, r5, pc}
   22860:	200227f8 	.word	0x200227f8

00022864 <_fstat_r>:
   22864:	b538      	push	{r3, r4, r5, lr}
   22866:	2300      	movs	r3, #0
   22868:	4c06      	ldr	r4, [pc, #24]	; (22884 <_fstat_r+0x20>)
   2286a:	4605      	mov	r5, r0
   2286c:	4608      	mov	r0, r1
   2286e:	4611      	mov	r1, r2
   22870:	6023      	str	r3, [r4, #0]
   22872:	f000 ffc3 	bl	237fc <_fstat>
   22876:	1c43      	adds	r3, r0, #1
   22878:	d102      	bne.n	22880 <_fstat_r+0x1c>
   2287a:	6823      	ldr	r3, [r4, #0]
   2287c:	b103      	cbz	r3, 22880 <_fstat_r+0x1c>
   2287e:	602b      	str	r3, [r5, #0]
   22880:	bd38      	pop	{r3, r4, r5, pc}
   22882:	bf00      	nop
   22884:	200227f8 	.word	0x200227f8

00022888 <_isatty_r>:
   22888:	b538      	push	{r3, r4, r5, lr}
   2288a:	2300      	movs	r3, #0
   2288c:	4c05      	ldr	r4, [pc, #20]	; (228a4 <_isatty_r+0x1c>)
   2288e:	4605      	mov	r5, r0
   22890:	4608      	mov	r0, r1
   22892:	6023      	str	r3, [r4, #0]
   22894:	f000 ffac 	bl	237f0 <_isatty>
   22898:	1c43      	adds	r3, r0, #1
   2289a:	d102      	bne.n	228a2 <_isatty_r+0x1a>
   2289c:	6823      	ldr	r3, [r4, #0]
   2289e:	b103      	cbz	r3, 228a2 <_isatty_r+0x1a>
   228a0:	602b      	str	r3, [r5, #0]
   228a2:	bd38      	pop	{r3, r4, r5, pc}
   228a4:	200227f8 	.word	0x200227f8

000228a8 <_lseek_r>:
   228a8:	b538      	push	{r3, r4, r5, lr}
   228aa:	4605      	mov	r5, r0
   228ac:	4c06      	ldr	r4, [pc, #24]	; (228c8 <_lseek_r+0x20>)
   228ae:	4608      	mov	r0, r1
   228b0:	4611      	mov	r1, r2
   228b2:	2200      	movs	r2, #0
   228b4:	6022      	str	r2, [r4, #0]
   228b6:	461a      	mov	r2, r3
   228b8:	f000 ff98 	bl	237ec <_lseek>
   228bc:	1c43      	adds	r3, r0, #1
   228be:	d102      	bne.n	228c6 <_lseek_r+0x1e>
   228c0:	6823      	ldr	r3, [r4, #0]
   228c2:	b103      	cbz	r3, 228c6 <_lseek_r+0x1e>
   228c4:	602b      	str	r3, [r5, #0]
   228c6:	bd38      	pop	{r3, r4, r5, pc}
   228c8:	200227f8 	.word	0x200227f8

000228cc <_read_r>:
   228cc:	b538      	push	{r3, r4, r5, lr}
   228ce:	4605      	mov	r5, r0
   228d0:	4c06      	ldr	r4, [pc, #24]	; (228ec <_read_r+0x20>)
   228d2:	4608      	mov	r0, r1
   228d4:	4611      	mov	r1, r2
   228d6:	2200      	movs	r2, #0
   228d8:	6022      	str	r2, [r4, #0]
   228da:	461a      	mov	r2, r3
   228dc:	f000 ff7b 	bl	237d6 <_read>
   228e0:	1c43      	adds	r3, r0, #1
   228e2:	d102      	bne.n	228ea <_read_r+0x1e>
   228e4:	6823      	ldr	r3, [r4, #0]
   228e6:	b103      	cbz	r3, 228ea <_read_r+0x1e>
   228e8:	602b      	str	r3, [r5, #0]
   228ea:	bd38      	pop	{r3, r4, r5, pc}
   228ec:	200227f8 	.word	0x200227f8

000228f0 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   228f0:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   228f4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   228f8:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   228fa:	bf08      	it	eq
   228fc:	f06f 0015 	mvneq.w	r0, #21
   22900:	4770      	bx	lr

00022902 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   22902:	b570      	push	{r4, r5, r6, lr}
   22904:	250c      	movs	r5, #12
   22906:	434d      	muls	r5, r1
   22908:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   2290a:	f990 000b 	ldrsb.w	r0, [r0, #11]
   2290e:	1974      	adds	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   22910:	4288      	cmp	r0, r1
   22912:	bfa8      	it	ge
   22914:	4621      	movge	r1, r4

	*word = &bitarray[bn / 32];
   22916:	f04f 0420 	mov.w	r4, #32
   2291a:	fb92 f4f4 	sdiv	r4, r2, r4
		p->levels[level].bits : p->levels[level].bits_p;
   2291e:	bfb8      	it	lt
   22920:	5971      	ldrlt	r1, [r6, r5]

	return bn & 0x1f;
}
   22922:	f002 001f 	and.w	r0, r2, #31
	*word = &bitarray[bn / 32];
   22926:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   2292a:	6019      	str	r1, [r3, #0]
}
   2292c:	bd70      	pop	{r4, r5, r6, pc}

0002292e <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   2292e:	f04f 0320 	mov.w	r3, #32
   22932:	f3ef 8011 	mrs	r0, BASEPRI
   22936:	f383 8811 	msr	BASEPRI, r3
   2293a:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
   2293e:	4770      	bx	lr

00022940 <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   22940:	07c3      	lsls	r3, r0, #31
   22942:	d503      	bpl.n	2294c <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   22944:	f381 8811 	msr	BASEPRI, r1
   22948:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   2294c:	4770      	bx	lr

0002294e <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   2294e:	23ff      	movs	r3, #255	; 0xff
{
   22950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   22954:	6845      	ldr	r5, [r0, #4]
	for (i = 0; i < p->n_levels; i++) {
   22956:	2200      	movs	r2, #0
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   22958:	4629      	mov	r1, r5
		sys_dlist_init(&p->levels[i].free_list);
   2295a:	f04f 0a0c 	mov.w	sl, #12
			bits += (nblocks + 31)/32;
   2295e:	f04f 0b20 	mov.w	fp, #32
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   22962:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   22964:	6804      	ldr	r4, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   22966:	fb05 fc07 	mul.w	ip, r5, r7
	p->max_inline_level = -1;
   2296a:	72c3      	strb	r3, [r0, #11]
	for (i = 0; i < p->n_levels; i++) {
   2296c:	7a83      	ldrb	r3, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   2296e:	4464      	add	r4, ip
	for (i = 0; i < p->n_levels; i++) {
   22970:	9301      	str	r3, [sp, #4]
   22972:	9b01      	ldr	r3, [sp, #4]
   22974:	4293      	cmp	r3, r2
   22976:	dc08      	bgt.n	2298a <z_sys_mem_pool_base_init+0x3c>
   22978:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   2297a:	4619      	mov	r1, r3
   2297c:	428f      	cmp	r7, r1
   2297e:	eb05 0c03 	add.w	ip, r5, r3
   22982:	dc21      	bgt.n	229c8 <z_sys_mem_pool_base_init+0x7a>
}
   22984:	b003      	add	sp, #12
   22986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   2298a:	fbbc f3f1 	udiv	r3, ip, r1
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   2298e:	2b20      	cmp	r3, #32
			bits += (nblocks + 31)/32;
   22990:	bf84      	itt	hi
   22992:	331f      	addhi	r3, #31
   22994:	fb93 f3fb 	sdivhi	r3, r3, fp
		sys_dlist_init(&p->levels[i].free_list);
   22998:	fb0a fe02 	mul.w	lr, sl, r2
   2299c:	f8d0 800c 	ldr.w	r8, [r0, #12]
		sz = WB_DN(sz / 4);
   229a0:	ea4f 0191 	mov.w	r1, r1, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
   229a4:	eb08 060e 	add.w	r6, r8, lr
   229a8:	f106 0904 	add.w	r9, r6, #4
	list->tail = (sys_dnode_t *)list;
   229ac:	e9c6 9901 	strd	r9, r9, [r6, #4]
		sz = WB_DN(sz / 4);
   229b0:	f021 0103 	bic.w	r1, r1, #3
			p->max_inline_level = i;
   229b4:	bf94      	ite	ls
   229b6:	72c2      	strbls	r2, [r0, #11]
			p->levels[i].bits_p = bits;
   229b8:	f848 400e 	strhi.w	r4, [r8, lr]
	for (i = 0; i < p->n_levels; i++) {
   229bc:	f102 0201 	add.w	r2, r2, #1
			bits += (nblocks + 31)/32;
   229c0:	bf88      	it	hi
   229c2:	eb04 0483 	addhi.w	r4, r4, r3, lsl #2
   229c6:	e7d4      	b.n	22972 <z_sys_mem_pool_base_init+0x24>
		sys_dlist_append(&p->levels[0].free_list, block);
   229c8:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   229ca:	6806      	ldr	r6, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   229cc:	f102 0e04 	add.w	lr, r2, #4
	return (u8_t *)p->buf + lsz * block;
   229d0:	18f4      	adds	r4, r6, r3
	node->next = list;
   229d2:	f846 e003 	str.w	lr, [r6, r3]
	node->prev = list->tail;
   229d6:	6893      	ldr	r3, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   229d8:	3101      	adds	r1, #1
   229da:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   229dc:	6893      	ldr	r3, [r2, #8]
   229de:	601c      	str	r4, [r3, #0]
	list->tail = node;
   229e0:	6094      	str	r4, [r2, #8]
   229e2:	4663      	mov	r3, ip
   229e4:	e7ca      	b.n	2297c <z_sys_mem_pool_base_init+0x2e>

000229e6 <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   229e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   229ea:	b089      	sub	sp, #36	; 0x24
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   229ec:	7a84      	ldrb	r4, [r0, #10]
{
   229ee:	af00      	add	r7, sp, #0
   229f0:	e9c7 3202 	strd	r3, r2, [r7, #8]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   229f4:	00a3      	lsls	r3, r4, #2
   229f6:	330a      	adds	r3, #10
   229f8:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   229fc:	ebad 0d03 	sub.w	sp, sp, r3
   22a00:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   22a02:	4653      	mov	r3, sl
   22a04:	6842      	ldr	r2, [r0, #4]
{
   22a06:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   22a08:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   22a0c:	2200      	movs	r2, #0
   22a0e:	4294      	cmp	r4, r2
   22a10:	f102 39ff 	add.w	r9, r2, #4294967295
   22a14:	dd09      	ble.n	22a2a <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   22a16:	b122      	cbz	r2, 22a22 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   22a18:	6818      	ldr	r0, [r3, #0]
   22a1a:	0880      	lsrs	r0, r0, #2
   22a1c:	f020 0003 	bic.w	r0, r0, #3
   22a20:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
   22a22:	f853 0f04 	ldr.w	r0, [r3, #4]!
   22a26:	4288      	cmp	r0, r1
   22a28:	d208      	bcs.n	22a3c <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
   22a2a:	f1b9 3fff 	cmp.w	r9, #4294967295
   22a2e:	d107      	bne.n	22a40 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   22a30:	2300      	movs	r3, #0
   22a32:	6cba      	ldr	r2, [r7, #72]	; 0x48
   22a34:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
   22a36:	f06f 000b 	mvn.w	r0, #11
   22a3a:	e047      	b.n	22acc <z_sys_mem_pool_block_alloc+0xe6>
	for (i = 0; i < p->n_levels; i++) {
   22a3c:	3201      	adds	r2, #1
   22a3e:	e7e6      	b.n	22a0e <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   22a40:	7c28      	ldrb	r0, [r5, #16]
   22a42:	f010 0001 	ands.w	r0, r0, #1
   22a46:	d001      	beq.n	22a4c <z_sys_mem_pool_block_alloc+0x66>
   22a48:	f7ff ff71 	bl	2292e <pool_irq_lock.isra.2.part.3>
   22a4c:	230c      	movs	r3, #12
	block = sys_dlist_get(&p->levels[l].free_list);
   22a4e:	46c8      	mov	r8, r9
   22a50:	fb03 f309 	mul.w	r3, r3, r9
   22a54:	1d1a      	adds	r2, r3, #4
   22a56:	68eb      	ldr	r3, [r5, #12]
	key = pool_irq_lock(p);
   22a58:	6178      	str	r0, [r7, #20]
   22a5a:	4413      	add	r3, r2
	return list->head == list;
   22a5c:	681c      	ldr	r4, [r3, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   22a5e:	42a3      	cmp	r3, r4
   22a60:	d070      	beq.n	22b44 <z_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
   22a62:	e9d4 2300 	ldrd	r2, r3, [r4]
   22a66:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   22a68:	6822      	ldr	r2, [r4, #0]
		data = block_alloc(p, i, lsizes[i]);
   22a6a:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
   22a6e:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   22a70:	2300      	movs	r3, #0
	node->prev = NULL;
   22a72:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   22a76:	682b      	ldr	r3, [r5, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   22a78:	f107 0b1c 	add.w	fp, r7, #28
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   22a7c:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   22a7e:	fb92 f2f1 	sdiv	r2, r2, r1
   22a82:	465b      	mov	r3, fp
   22a84:	4641      	mov	r1, r8
   22a86:	4628      	mov	r0, r5
   22a88:	f7ff ff3b 	bl	22902 <get_bit_ptr>
	*word |= (1<<bit);
   22a8c:	2201      	movs	r2, #1
   22a8e:	69f9      	ldr	r1, [r7, #28]
   22a90:	fa02 f000 	lsl.w	r0, r2, r0
   22a94:	680b      	ldr	r3, [r1, #0]
   22a96:	eb0a 0688 	add.w	r6, sl, r8, lsl #2
   22a9a:	4303      	orrs	r3, r0
   22a9c:	600b      	str	r3, [r1, #0]
   22a9e:	607a      	str	r2, [r7, #4]
			for (from_l = i; from_l < alloc_l; from_l++) {
   22aa0:	45c8      	cmp	r8, r9
   22aa2:	db17      	blt.n	22ad4 <z_sys_mem_pool_block_alloc+0xee>
	pool_irq_unlock(p, key);
   22aa4:	6979      	ldr	r1, [r7, #20]
   22aa6:	7c28      	ldrb	r0, [r5, #16]
   22aa8:	f7ff ff4a 	bl	22940 <pool_irq_unlock.isra.4>
	*data_p = data;
   22aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   22aae:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   22ab0:	2c00      	cmp	r4, #0
   22ab2:	d0c0      	beq.n	22a36 <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
   22ab4:	68fb      	ldr	r3, [r7, #12]
	*block_p = block_num(p, data, lsizes[alloc_l]);

	return 0;
   22ab6:	2000      	movs	r0, #0
	*level_p = alloc_l;
   22ab8:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   22abc:	682b      	ldr	r3, [r5, #0]
   22abe:	1ae4      	subs	r4, r4, r3
   22ac0:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   22ac4:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   22ac8:	68bb      	ldr	r3, [r7, #8]
   22aca:	601c      	str	r4, [r3, #0]
}
   22acc:	3724      	adds	r7, #36	; 0x24
   22ace:	46bd      	mov	sp, r7
   22ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   22ad4:	682b      	ldr	r3, [r5, #0]
	bn = block_num(p, block, lsizes[l]);
   22ad6:	6832      	ldr	r2, [r6, #0]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   22ad8:	1ae3      	subs	r3, r4, r3
   22ada:	fb93 f2f2 	sdiv	r2, r3, r2
	set_alloc_bit(p, l + 1, 4*bn);
   22ade:	f108 0801 	add.w	r8, r8, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   22ae2:	465b      	mov	r3, fp
   22ae4:	0092      	lsls	r2, r2, #2
   22ae6:	4641      	mov	r1, r8
   22ae8:	4628      	mov	r0, r5
   22aea:	f7ff ff0a 	bl	22902 <get_bit_ptr>
	*word |= (1<<bit);
   22aee:	69fa      	ldr	r2, [r7, #28]
   22af0:	687b      	ldr	r3, [r7, #4]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   22af2:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   22af4:	fa03 f000 	lsl.w	r0, r3, r0
   22af8:	6813      	ldr	r3, [r2, #0]
   22afa:	4303      	orrs	r3, r0
   22afc:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   22afe:	230c      	movs	r3, #12
   22b00:	2203      	movs	r2, #3
   22b02:	fb03 1108 	mla	r1, r3, r8, r1
		int lsz = lsizes[l + 1];
   22b06:	f856 0f04 	ldr.w	r0, [r6, #4]!
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   22b0a:	f101 0e04 	add.w	lr, r1, #4
   22b0e:	1823      	adds	r3, r4, r0
   22b10:	613a      	str	r2, [r7, #16]
	node->prev = list->tail;
   22b12:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   22b14:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   22b18:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   22b1a:	688a      	ldr	r2, [r1, #8]
   22b1c:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   22b1e:	693a      	ldr	r2, [r7, #16]
	list->tail = node;
   22b20:	608b      	str	r3, [r1, #8]
   22b22:	3a01      	subs	r2, #1
   22b24:	4403      	add	r3, r0
   22b26:	613a      	str	r2, [r7, #16]
   22b28:	d1f3      	bne.n	22b12 <z_sys_mem_pool_block_alloc+0x12c>
				pool_irq_unlock(p, key);
   22b2a:	6979      	ldr	r1, [r7, #20]
   22b2c:	7c28      	ldrb	r0, [r5, #16]
   22b2e:	f7ff ff07 	bl	22940 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   22b32:	7c2b      	ldrb	r3, [r5, #16]
   22b34:	07db      	lsls	r3, r3, #31
   22b36:	d503      	bpl.n	22b40 <z_sys_mem_pool_block_alloc+0x15a>
   22b38:	f7ff fef9 	bl	2292e <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   22b3c:	6178      	str	r0, [r7, #20]
   22b3e:	e7af      	b.n	22aa0 <z_sys_mem_pool_block_alloc+0xba>
		return 0;
   22b40:	6938      	ldr	r0, [r7, #16]
   22b42:	e7fb      	b.n	22b3c <z_sys_mem_pool_block_alloc+0x156>
	for (i = alloc_l; i >= 0; i--) {
   22b44:	f108 38ff 	add.w	r8, r8, #4294967295
   22b48:	f1b8 3fff 	cmp.w	r8, #4294967295
   22b4c:	f1a4 030c 	sub.w	r3, r4, #12
   22b50:	d184      	bne.n	22a5c <z_sys_mem_pool_block_alloc+0x76>
   22b52:	2400      	movs	r4, #0
   22b54:	e7a6      	b.n	22aa4 <z_sys_mem_pool_block_alloc+0xbe>

00022b56 <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   22b56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b5a:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   22b5c:	7a83      	ldrb	r3, [r0, #10]
{
   22b5e:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   22b60:	009b      	lsls	r3, r3, #2
   22b62:	330a      	adds	r3, #10
   22b64:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   22b68:	ebad 0d03 	sub.w	sp, sp, r3
   22b6c:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   22b6e:	6843      	ldr	r3, [r0, #4]
{
   22b70:	4605      	mov	r5, r0
   22b72:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   22b74:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   22b76:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   22b7a:	4281      	cmp	r1, r0
   22b7c:	d214      	bcs.n	22ba8 <z_sys_mem_pool_block_free+0x52>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   22b7e:	7c28      	ldrb	r0, [r5, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   22b80:	460e      	mov	r6, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   22b82:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   22b86:	4690      	mov	r8, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   22b88:	d001      	beq.n	22b8e <z_sys_mem_pool_block_free+0x38>
   22b8a:	f7ff fed0 	bl	2292e <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   22b8e:	4604      	mov	r4, r0
	while (level >= 0) {
   22b90:	2e00      	cmp	r6, #0
   22b92:	da11      	bge.n	22bb8 <z_sys_mem_pool_block_free+0x62>
	return -1;
   22b94:	f04f 34ff 	mov.w	r4, #4294967295
	pool_irq_unlock(p, key);
   22b98:	4621      	mov	r1, r4
   22b9a:	7c28      	ldrb	r0, [r5, #16]
   22b9c:	f7ff fed0 	bl	22940 <pool_irq_unlock.isra.4>
}
   22ba0:	3714      	adds	r7, #20
   22ba2:	46bd      	mov	sp, r7
   22ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   22ba8:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   22baa:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   22bac:	089b      	lsrs	r3, r3, #2
   22bae:	f023 0303 	bic.w	r3, r3, #3
   22bb2:	f844 3f04 	str.w	r3, [r4, #4]!
   22bb6:	e7e0      	b.n	22b7a <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   22bb8:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   22bbc:	4642      	mov	r2, r8
	return (u8_t *)p->buf + lsz * block;
   22bbe:	fb03 fa08 	mul.w	sl, r3, r8
		int i, lsz = lsizes[level];
   22bc2:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   22bc4:	682b      	ldr	r3, [r5, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   22bc6:	4631      	mov	r1, r6
	return (u8_t *)p->buf + lsz * block;
   22bc8:	eb03 090a 	add.w	r9, r3, sl
   22bcc:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   22bce:	4628      	mov	r0, r5
   22bd0:	f107 030c 	add.w	r3, r7, #12
   22bd4:	f7ff fe95 	bl	22902 <get_bit_ptr>
	*word &= ~(1<<bit);
   22bd8:	2301      	movs	r3, #1
   22bda:	68fa      	ldr	r2, [r7, #12]
   22bdc:	fa03 f000 	lsl.w	r0, r3, r0
   22be0:	6813      	ldr	r3, [r2, #0]
	node->next = list;
   22be2:	6839      	ldr	r1, [r7, #0]
   22be4:	ea23 0300 	bic.w	r3, r3, r0
   22be8:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   22bea:	220c      	movs	r2, #12
   22bec:	68eb      	ldr	r3, [r5, #12]
   22bee:	fb02 3306 	mla	r3, r2, r6, r3
   22bf2:	1d1a      	adds	r2, r3, #4
   22bf4:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   22bf8:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   22bfa:	4621      	mov	r1, r4
   22bfc:	f8c9 2004 	str.w	r2, [r9, #4]
	list->tail->next = node;
   22c00:	689a      	ldr	r2, [r3, #8]
   22c02:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   22c06:	f8c3 9008 	str.w	r9, [r3, #8]
   22c0a:	7c28      	ldrb	r0, [r5, #16]
   22c0c:	f7ff fe98 	bl	22940 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   22c10:	7c28      	ldrb	r0, [r5, #16]
   22c12:	f010 0001 	ands.w	r0, r0, #1
   22c16:	d001      	beq.n	22c1c <z_sys_mem_pool_block_free+0xc6>
   22c18:	f7ff fe89 	bl	2292e <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   22c1c:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   22c1e:	2e00      	cmp	r6, #0
   22c20:	d0ba      	beq.n	22b98 <z_sys_mem_pool_block_free+0x42>
	int bit = get_bit_ptr(p, level, bn, &word);
   22c22:	f107 030c 	add.w	r3, r7, #12
   22c26:	4642      	mov	r2, r8
   22c28:	4631      	mov	r1, r6
   22c2a:	4628      	mov	r0, r5
   22c2c:	f7ff fe69 	bl	22902 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   22c30:	2304      	movs	r3, #4
   22c32:	fb90 f0f3 	sdiv	r0, r0, r3
   22c36:	68fb      	ldr	r3, [r7, #12]
   22c38:	0080      	lsls	r0, r0, #2
   22c3a:	681b      	ldr	r3, [r3, #0]
   22c3c:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   22c40:	f010 000f 	ands.w	r0, r0, #15
   22c44:	d1a8      	bne.n	22b98 <z_sys_mem_pool_block_free+0x42>
	node->next = NULL;
   22c46:	4686      	mov	lr, r0
			int b = (bn & ~3) + i;
   22c48:	f028 0a03 	bic.w	sl, r8, #3
	return (u8_t *)p->buf + lsz * block;
   22c4c:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   22c4e:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   22c52:	4353      	muls	r3, r2
   22c54:	682a      	ldr	r2, [r5, #0]
		for (i = 0; i < 4; i++) {
   22c56:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   22c58:	eb02 0c03 	add.w	ip, r2, r3
	node->prev->next = node->next;
   22c5c:	58d1      	ldr	r1, [r2, r3]
   22c5e:	f8dc 9004 	ldr.w	r9, [ip, #4]
		for (i = 0; i < 4; i++) {
   22c62:	2804      	cmp	r0, #4
   22c64:	f8c9 1000 	str.w	r1, [r9]
	node->next->prev = node->prev;
   22c68:	58d1      	ldr	r1, [r2, r3]
   22c6a:	f8c1 9004 	str.w	r9, [r1, #4]
	node->next = NULL;
   22c6e:	f842 e003 	str.w	lr, [r2, r3]
	node->prev = NULL;
   22c72:	f8cc e004 	str.w	lr, [ip, #4]
   22c76:	d1e9      	bne.n	22c4c <z_sys_mem_pool_block_free+0xf6>
		level = level - 1;
   22c78:	3e01      	subs	r6, #1
		bn = bn / 4;
   22c7a:	fb98 f8f0 	sdiv	r8, r8, r0
   22c7e:	e787      	b.n	22b90 <z_sys_mem_pool_block_free+0x3a>

00022c80 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   22c80:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   22c82:	f7fd fefd 	bl	20a80 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   22c86:	2000      	movs	r0, #0
   22c88:	bd08      	pop	{r3, pc}

00022c8a <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, s32_t timeout)
{
   22c8a:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   22c8c:	f7fd ff24 	bl	20ad8 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   22c90:	f110 0f0b 	cmn.w	r0, #11
   22c94:	d005      	beq.n	22ca2 <sys_sem_take+0x18>
   22c96:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   22c9a:	bf08      	it	eq
   22c9c:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   22ca0:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   22ca2:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   22ca6:	e7fb      	b.n	22ca0 <sys_sem_take+0x16>

00022ca8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   22ca8:	4604      	mov	r4, r0
   22caa:	b508      	push	{r3, lr}
   22cac:	4608      	mov	r0, r1
   22cae:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   22cb0:	461a      	mov	r2, r3
   22cb2:	47a0      	blx	r4
	return z_impl_k_current_get();
   22cb4:	f7fd fede 	bl	20a74 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   22cb8:	f7ed fbb8 	bl	1042c <z_impl_k_thread_abort>

00022cbc <z_arch_printk_char_out>:
}
   22cbc:	2000      	movs	r0, #0
   22cbe:	4770      	bx	lr

00022cc0 <print_err>:
{
   22cc0:	b570      	push	{r4, r5, r6, lr}
   22cc2:	460d      	mov	r5, r1
   22cc4:	4604      	mov	r4, r0
	out('E', ctx);
   22cc6:	2045      	movs	r0, #69	; 0x45
   22cc8:	47a0      	blx	r4
	out('R', ctx);
   22cca:	4629      	mov	r1, r5
   22ccc:	2052      	movs	r0, #82	; 0x52
   22cce:	47a0      	blx	r4
	out('R', ctx);
   22cd0:	4629      	mov	r1, r5
   22cd2:	4623      	mov	r3, r4
}
   22cd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   22cd8:	2052      	movs	r0, #82	; 0x52
   22cda:	4718      	bx	r3

00022cdc <z_vprintk>:
{
   22cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   22ce0:	2700      	movs	r7, #0
{
   22ce2:	4605      	mov	r5, r0
   22ce4:	460e      	mov	r6, r1
   22ce6:	4692      	mov	sl, r2
   22ce8:	461c      	mov	r4, r3
	int min_width = -1;
   22cea:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
   22cee:	46b8      	mov	r8, r7
	int might_format = 0; /* 1 if encountered a '%' */
   22cf0:	46bb      	mov	fp, r7
{
   22cf2:	b089      	sub	sp, #36	; 0x24
	while (*fmt) {
   22cf4:	f89a 0000 	ldrb.w	r0, [sl]
   22cf8:	b910      	cbnz	r0, 22d00 <z_vprintk+0x24>
}
   22cfa:	b009      	add	sp, #36	; 0x24
   22cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
   22d00:	f1bb 0f00 	cmp.w	fp, #0
   22d04:	d107      	bne.n	22d16 <z_vprintk+0x3a>
			if (*fmt != '%') {
   22d06:	2825      	cmp	r0, #37	; 0x25
   22d08:	f000 814e 	beq.w	22fa8 <z_vprintk+0x2cc>
				out((int)*fmt, ctx);
   22d0c:	4631      	mov	r1, r6
   22d0e:	47a8      	blx	r5
		++fmt;
   22d10:	f10a 0a01 	add.w	sl, sl, #1
   22d14:	e7ee      	b.n	22cf4 <z_vprintk+0x18>
			switch (*fmt) {
   22d16:	2864      	cmp	r0, #100	; 0x64
   22d18:	d068      	beq.n	22dec <z_vprintk+0x110>
   22d1a:	d81a      	bhi.n	22d52 <z_vprintk+0x76>
   22d1c:	2839      	cmp	r0, #57	; 0x39
   22d1e:	d80b      	bhi.n	22d38 <z_vprintk+0x5c>
   22d20:	2831      	cmp	r0, #49	; 0x31
   22d22:	d25a      	bcs.n	22dda <z_vprintk+0xfe>
   22d24:	282d      	cmp	r0, #45	; 0x2d
   22d26:	f000 8146 	beq.w	22fb6 <z_vprintk+0x2da>
   22d2a:	2830      	cmp	r0, #48	; 0x30
   22d2c:	d046      	beq.n	22dbc <z_vprintk+0xe0>
   22d2e:	2825      	cmp	r0, #37	; 0x25
   22d30:	d108      	bne.n	22d44 <z_vprintk+0x68>
				out((int)'%', ctx);
   22d32:	4631      	mov	r1, r6
				out((int)*fmt, ctx);
   22d34:	47a8      	blx	r5
   22d36:	e07a      	b.n	22e2e <z_vprintk+0x152>
			switch (*fmt) {
   22d38:	2858      	cmp	r0, #88	; 0x58
   22d3a:	f000 80b4 	beq.w	22ea6 <z_vprintk+0x1ca>
   22d3e:	2863      	cmp	r0, #99	; 0x63
   22d40:	f000 812c 	beq.w	22f9c <z_vprintk+0x2c0>
				out((int)'%', ctx);
   22d44:	4631      	mov	r1, r6
   22d46:	2025      	movs	r0, #37	; 0x25
   22d48:	47a8      	blx	r5
				out((int)*fmt, ctx);
   22d4a:	4631      	mov	r1, r6
   22d4c:	f89a 0000 	ldrb.w	r0, [sl]
   22d50:	e7f0      	b.n	22d34 <z_vprintk+0x58>
			switch (*fmt) {
   22d52:	2870      	cmp	r0, #112	; 0x70
   22d54:	f000 809d 	beq.w	22e92 <z_vprintk+0x1b6>
   22d58:	d80d      	bhi.n	22d76 <z_vprintk+0x9a>
   22d5a:	2869      	cmp	r0, #105	; 0x69
   22d5c:	d046      	beq.n	22dec <z_vprintk+0x110>
   22d5e:	286c      	cmp	r0, #108	; 0x6c
   22d60:	d103      	bne.n	22d6a <z_vprintk+0x8e>
				} else if (*fmt == 'l' && length_mod == 'l') {
   22d62:	2f6c      	cmp	r7, #108	; 0x6c
   22d64:	d126      	bne.n	22db4 <z_vprintk+0xd8>
					length_mod = 'L';
   22d66:	274c      	movs	r7, #76	; 0x4c
   22d68:	e7d2      	b.n	22d10 <z_vprintk+0x34>
			switch (*fmt) {
   22d6a:	2868      	cmp	r0, #104	; 0x68
   22d6c:	d1ea      	bne.n	22d44 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   22d6e:	2f68      	cmp	r7, #104	; 0x68
   22d70:	d120      	bne.n	22db4 <z_vprintk+0xd8>
					length_mod = 'H';
   22d72:	2748      	movs	r7, #72	; 0x48
   22d74:	e7cc      	b.n	22d10 <z_vprintk+0x34>
			switch (*fmt) {
   22d76:	2875      	cmp	r0, #117	; 0x75
   22d78:	d070      	beq.n	22e5c <z_vprintk+0x180>
   22d7a:	d817      	bhi.n	22dac <z_vprintk+0xd0>
   22d7c:	2873      	cmp	r0, #115	; 0x73
   22d7e:	d1e1      	bne.n	22d44 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   22d80:	6822      	ldr	r2, [r4, #0]
   22d82:	f104 0b04 	add.w	fp, r4, #4
   22d86:	4611      	mov	r1, r2
				while (*s) {
   22d88:	460c      	mov	r4, r1
   22d8a:	f814 0b01 	ldrb.w	r0, [r4], #1
   22d8e:	2800      	cmp	r0, #0
   22d90:	f040 80f9 	bne.w	22f86 <z_vprintk+0x2aa>
				if (padding == PAD_SPACE_AFTER) {
   22d94:	f1b8 0f03 	cmp.w	r8, #3
   22d98:	f040 8113 	bne.w	22fc2 <z_vprintk+0x2e6>
					int remaining = min_width - (s - start);
   22d9c:	1a8c      	subs	r4, r1, r2
   22d9e:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
   22da2:	2c00      	cmp	r4, #0
   22da4:	f300 80f5 	bgt.w	22f92 <z_vprintk+0x2b6>
				int c = va_arg(ap, int);
   22da8:	465c      	mov	r4, fp
   22daa:	e040      	b.n	22e2e <z_vprintk+0x152>
			switch (*fmt) {
   22dac:	2878      	cmp	r0, #120	; 0x78
   22dae:	d07a      	beq.n	22ea6 <z_vprintk+0x1ca>
   22db0:	287a      	cmp	r0, #122	; 0x7a
   22db2:	d1c7      	bne.n	22d44 <z_vprintk+0x68>
				} else if (length_mod == 0) {
   22db4:	2f00      	cmp	r7, #0
   22db6:	d1c5      	bne.n	22d44 <z_vprintk+0x68>
   22db8:	4607      	mov	r7, r0
   22dba:	e7a9      	b.n	22d10 <z_vprintk+0x34>
				if (min_width < 0 && padding == PAD_NONE) {
   22dbc:	f1b9 0f00 	cmp.w	r9, #0
   22dc0:	da0e      	bge.n	22de0 <z_vprintk+0x104>
   22dc2:	f1b8 0f00 	cmp.w	r8, #0
   22dc6:	f000 80f9 	beq.w	22fbc <z_vprintk+0x2e0>
					min_width = *fmt - '0';
   22dca:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   22dce:	f1b8 0f00 	cmp.w	r8, #0
   22dd2:	bf08      	it	eq
   22dd4:	f04f 0802 	moveq.w	r8, #2
   22dd8:	e79a      	b.n	22d10 <z_vprintk+0x34>
				if (min_width < 0) {
   22dda:	f1b9 0f00 	cmp.w	r9, #0
   22dde:	dbf4      	blt.n	22dca <z_vprintk+0xee>
					min_width = 10 * min_width + *fmt - '0';
   22de0:	220a      	movs	r2, #10
   22de2:	fb02 0909 	mla	r9, r2, r9, r0
   22de6:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   22dea:	e7f0      	b.n	22dce <z_vprintk+0xf2>
				if (length_mod == 'z') {
   22dec:	2f7a      	cmp	r7, #122	; 0x7a
   22dee:	d103      	bne.n	22df8 <z_vprintk+0x11c>
					d = va_arg(ap, int);
   22df0:	f8d4 b000 	ldr.w	fp, [r4]
   22df4:	3404      	adds	r4, #4
   22df6:	e01e      	b.n	22e36 <z_vprintk+0x15a>
				} else if (length_mod == 'l') {
   22df8:	2f6c      	cmp	r7, #108	; 0x6c
   22dfa:	d0f9      	beq.n	22df0 <z_vprintk+0x114>
				} else if (length_mod == 'L') {
   22dfc:	2f4c      	cmp	r7, #76	; 0x4c
   22dfe:	d1f7      	bne.n	22df0 <z_vprintk+0x114>
					if (lld > __LONG_MAX__ ||
   22e00:	f04f 0c00 	mov.w	ip, #0
   22e04:	f04f 3bff 	mov.w	fp, #4294967295
					long long lld = va_arg(ap, long long);
   22e08:	3407      	adds	r4, #7
   22e0a:	f024 0307 	bic.w	r3, r4, #7
   22e0e:	f103 0408 	add.w	r4, r3, #8
   22e12:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (lld > __LONG_MAX__ ||
   22e16:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
   22e1a:	f143 0100 	adc.w	r1, r3, #0
   22e1e:	458c      	cmp	ip, r1
   22e20:	bf08      	it	eq
   22e22:	4583      	cmpeq	fp, r0
   22e24:	d206      	bcs.n	22e34 <z_vprintk+0x158>
						print_err(out, ctx);
   22e26:	4631      	mov	r1, r6
   22e28:	4628      	mov	r0, r5
   22e2a:	f7ff ff49 	bl	22cc0 <print_err>
			might_format = 0;
   22e2e:	f04f 0b00 	mov.w	fp, #0
				break;
   22e32:	e76d      	b.n	22d10 <z_vprintk+0x34>
					d = lld;
   22e34:	4693      	mov	fp, r2
				if (d < 0) {
   22e36:	f1bb 0f00 	cmp.w	fp, #0
   22e3a:	da06      	bge.n	22e4a <z_vprintk+0x16e>
					out((int)'-', ctx);
   22e3c:	4631      	mov	r1, r6
   22e3e:	202d      	movs	r0, #45	; 0x2d
   22e40:	47a8      	blx	r5
					d = -d;
   22e42:	f1cb 0b00 	rsb	fp, fp, #0
					min_width--;
   22e46:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
   22e4a:	4643      	mov	r3, r8
   22e4c:	465a      	mov	r2, fp
   22e4e:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   22e52:	4631      	mov	r1, r6
   22e54:	4628      	mov	r0, r5
   22e56:	f7eb fefb 	bl	ec50 <_printk_dec_ulong>
   22e5a:	e7e8      	b.n	22e2e <z_vprintk+0x152>
				if (length_mod == 'z') {
   22e5c:	2f7a      	cmp	r7, #122	; 0x7a
   22e5e:	d102      	bne.n	22e66 <z_vprintk+0x18a>
					u = va_arg(ap, unsigned int);
   22e60:	6822      	ldr	r2, [r4, #0]
   22e62:	3404      	adds	r4, #4
   22e64:	e011      	b.n	22e8a <z_vprintk+0x1ae>
				} else if (length_mod == 'l') {
   22e66:	2f6c      	cmp	r7, #108	; 0x6c
   22e68:	d0fa      	beq.n	22e60 <z_vprintk+0x184>
				} else if (length_mod == 'L') {
   22e6a:	2f4c      	cmp	r7, #76	; 0x4c
   22e6c:	d1f8      	bne.n	22e60 <z_vprintk+0x184>
					if (llu > ~0UL) {
   22e6e:	2100      	movs	r1, #0
   22e70:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
   22e74:	3407      	adds	r4, #7
   22e76:	f024 0307 	bic.w	r3, r4, #7
   22e7a:	f103 0408 	add.w	r4, r3, #8
   22e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > ~0UL) {
   22e82:	4299      	cmp	r1, r3
   22e84:	bf08      	it	eq
   22e86:	4290      	cmpeq	r0, r2
   22e88:	d3cd      	bcc.n	22e26 <z_vprintk+0x14a>
				_printk_dec_ulong(out, ctx, u, padding,
   22e8a:	f8cd 9000 	str.w	r9, [sp]
   22e8e:	4643      	mov	r3, r8
   22e90:	e7df      	b.n	22e52 <z_vprintk+0x176>
				  out('0', ctx);
   22e92:	4631      	mov	r1, r6
   22e94:	2030      	movs	r0, #48	; 0x30
   22e96:	47a8      	blx	r5
				  out('x', ctx);
   22e98:	4631      	mov	r1, r6
   22e9a:	2078      	movs	r0, #120	; 0x78
   22e9c:	47a8      	blx	r5
				  min_width = 8;
   22e9e:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
   22ea2:	f04f 0801 	mov.w	r8, #1
				if (*fmt == 'p') {
   22ea6:	f89a 2000 	ldrb.w	r2, [sl]
   22eaa:	2a70      	cmp	r2, #112	; 0x70
   22eac:	d105      	bne.n	22eba <z_vprintk+0x1de>
					x = va_arg(ap, unsigned int);
   22eae:	6823      	ldr	r3, [r4, #0]
   22eb0:	3404      	adds	r4, #4
   22eb2:	9304      	str	r3, [sp, #16]
   22eb4:	2300      	movs	r3, #0
   22eb6:	9302      	str	r3, [sp, #8]
   22eb8:	e00c      	b.n	22ed4 <z_vprintk+0x1f8>
				} else if (length_mod == 'l') {
   22eba:	2f6c      	cmp	r7, #108	; 0x6c
   22ebc:	d0f7      	beq.n	22eae <z_vprintk+0x1d2>
				} else if (length_mod == 'L') {
   22ebe:	2f4c      	cmp	r7, #76	; 0x4c
   22ec0:	d1f5      	bne.n	22eae <z_vprintk+0x1d2>
					x = va_arg(ap, unsigned long long);
   22ec2:	3407      	adds	r4, #7
   22ec4:	f024 0207 	bic.w	r2, r4, #7
   22ec8:	6813      	ldr	r3, [r2, #0]
   22eca:	f102 0408 	add.w	r4, r2, #8
   22ece:	9304      	str	r3, [sp, #16]
   22ed0:	6853      	ldr	r3, [r2, #4]
   22ed2:	9302      	str	r3, [sp, #8]
	int digits = 0;
   22ed4:	2200      	movs	r2, #0
	int remaining = 16; /* 16 digits max */
   22ed6:	2310      	movs	r3, #16
	int digits = 0;
   22ed8:	9203      	str	r2, [sp, #12]
	int found_largest_digit = 0;
   22eda:	9205      	str	r2, [sp, #20]
	int shift = sizeof(num) * 8;
   22edc:	2240      	movs	r2, #64	; 0x40
		shift -= 4;
   22ede:	3a04      	subs	r2, #4
		nibble = (num >> shift) & 0xf;
   22ee0:	9902      	ldr	r1, [sp, #8]
   22ee2:	9804      	ldr	r0, [sp, #16]
   22ee4:	f1c2 0c20 	rsb	ip, r2, #32
   22ee8:	f1a2 0e20 	sub.w	lr, r2, #32
   22eec:	40d0      	lsrs	r0, r2
   22eee:	fa01 fc0c 	lsl.w	ip, r1, ip
   22ef2:	ea40 000c 	orr.w	r0, r0, ip
   22ef6:	fa21 fe0e 	lsr.w	lr, r1, lr
   22efa:	ea40 000e 	orr.w	r0, r0, lr
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   22efe:	f010 000f 	ands.w	r0, r0, #15
   22f02:	d108      	bne.n	22f16 <z_vprintk+0x23a>
   22f04:	9905      	ldr	r1, [sp, #20]
   22f06:	b901      	cbnz	r1, 22f0a <z_vprintk+0x22e>
   22f08:	bb42      	cbnz	r2, 22f5c <z_vprintk+0x280>
			nibble += nibble > 9 ? 87 : 48;
   22f0a:	f04f 0c30 	mov.w	ip, #48	; 0x30
   22f0e:	e008      	b.n	22f22 <z_vprintk+0x246>
			found_largest_digit = 1;
   22f10:	f8cd b014 	str.w	fp, [sp, #20]
   22f14:	e7e3      	b.n	22ede <z_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
   22f16:	2809      	cmp	r0, #9
   22f18:	bf8c      	ite	hi
   22f1a:	f04f 0c57 	movhi.w	ip, #87	; 0x57
   22f1e:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
   22f22:	4631      	mov	r1, r6
   22f24:	4460      	add	r0, ip
   22f26:	e9cd 2305 	strd	r2, r3, [sp, #20]
   22f2a:	47a8      	blx	r5
			digits++;
   22f2c:	9b03      	ldr	r3, [sp, #12]
   22f2e:	3301      	adds	r3, #1
   22f30:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   22f32:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   22f36:	2a00      	cmp	r2, #0
   22f38:	d1ea      	bne.n	22f10 <z_vprintk+0x234>
	if (padding == PAD_SPACE_AFTER) {
   22f3a:	f1b8 0f03 	cmp.w	r8, #3
   22f3e:	f47f af76 	bne.w	22e2e <z_vprintk+0x152>
		remaining = min_width * 2 - digits;
   22f42:	9b03      	ldr	r3, [sp, #12]
   22f44:	ebc3 0b49 	rsb	fp, r3, r9, lsl #1
		while (remaining-- > 0) {
   22f48:	f1bb 0f00 	cmp.w	fp, #0
   22f4c:	f77f af6f 	ble.w	22e2e <z_vprintk+0x152>
			out(' ', ctx);
   22f50:	4631      	mov	r1, r6
   22f52:	2020      	movs	r0, #32
   22f54:	47a8      	blx	r5
   22f56:	f10b 3bff 	add.w	fp, fp, #4294967295
   22f5a:	e7f5      	b.n	22f48 <z_vprintk+0x26c>
		if (remaining-- <= min_width) {
   22f5c:	1e59      	subs	r1, r3, #1
   22f5e:	4599      	cmp	r9, r3
   22f60:	9106      	str	r1, [sp, #24]
   22f62:	db07      	blt.n	22f74 <z_vprintk+0x298>
			if (padding == PAD_ZERO_BEFORE) {
   22f64:	f1b8 0f01 	cmp.w	r8, #1
   22f68:	d106      	bne.n	22f78 <z_vprintk+0x29c>
				out('0', ctx);
   22f6a:	4631      	mov	r1, r6
   22f6c:	2030      	movs	r0, #48	; 0x30
   22f6e:	9207      	str	r2, [sp, #28]
				out(' ', ctx);
   22f70:	47a8      	blx	r5
   22f72:	9a07      	ldr	r2, [sp, #28]
					x = va_arg(ap, unsigned int);
   22f74:	9b06      	ldr	r3, [sp, #24]
   22f76:	e7b2      	b.n	22ede <z_vprintk+0x202>
			} else if (padding == PAD_SPACE_BEFORE) {
   22f78:	f1b8 0f02 	cmp.w	r8, #2
   22f7c:	d1fa      	bne.n	22f74 <z_vprintk+0x298>
   22f7e:	9207      	str	r2, [sp, #28]
				out(' ', ctx);
   22f80:	4631      	mov	r1, r6
   22f82:	2020      	movs	r0, #32
   22f84:	e7f4      	b.n	22f70 <z_vprintk+0x294>
					out((int)(*s++), ctx);
   22f86:	4631      	mov	r1, r6
   22f88:	9202      	str	r2, [sp, #8]
   22f8a:	47a8      	blx	r5
   22f8c:	4621      	mov	r1, r4
   22f8e:	9a02      	ldr	r2, [sp, #8]
   22f90:	e6fa      	b.n	22d88 <z_vprintk+0xac>
						out(' ', ctx);
   22f92:	4631      	mov	r1, r6
   22f94:	2020      	movs	r0, #32
   22f96:	47a8      	blx	r5
   22f98:	3c01      	subs	r4, #1
   22f9a:	e702      	b.n	22da2 <z_vprintk+0xc6>
				out(c, ctx);
   22f9c:	4631      	mov	r1, r6
   22f9e:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
   22fa0:	f104 0b04 	add.w	fp, r4, #4
				out(c, ctx);
   22fa4:	47a8      	blx	r5
   22fa6:	e6ff      	b.n	22da8 <z_vprintk+0xcc>
				length_mod = 0;
   22fa8:	465f      	mov	r7, fp
				padding = PAD_NONE;
   22faa:	46d8      	mov	r8, fp
				min_width = -1;
   22fac:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
   22fb0:	f04f 0b01 	mov.w	fp, #1
   22fb4:	e6ac      	b.n	22d10 <z_vprintk+0x34>
				padding = PAD_SPACE_AFTER;
   22fb6:	f04f 0803 	mov.w	r8, #3
   22fba:	e6a9      	b.n	22d10 <z_vprintk+0x34>
					padding = PAD_ZERO_BEFORE;
   22fbc:	f04f 0801 	mov.w	r8, #1
   22fc0:	e6a6      	b.n	22d10 <z_vprintk+0x34>
				char *s = va_arg(ap, char *);
   22fc2:	465c      	mov	r4, fp
			might_format = 0;
   22fc4:	4683      	mov	fp, r0
   22fc6:	e6a3      	b.n	22d10 <z_vprintk+0x34>

00022fc8 <printk>:
{
   22fc8:	b40f      	push	{r0, r1, r2, r3}
   22fca:	b507      	push	{r0, r1, r2, lr}
   22fcc:	a904      	add	r1, sp, #16
   22fce:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   22fd2:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   22fd4:	f7eb fe8e 	bl	ecf4 <vprintk>
}
   22fd8:	b003      	add	sp, #12
   22fda:	f85d eb04 	ldr.w	lr, [sp], #4
   22fde:	b004      	add	sp, #16
   22fe0:	4770      	bx	lr

00022fe2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   22fe2:	4770      	bx	lr

00022fe4 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   22fe4:	f7fd b806 	b.w	1fff4 <SystemInit>

00022fe8 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   22fe8:	2300      	movs	r3, #0
	list->head = NULL;
   22fea:	e9c0 3300 	strd	r3, r3, [r0]
}
   22fee:	4770      	bx	lr

00022ff0 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   22ff0:	6803      	ldr	r3, [r0, #0]
   22ff2:	b923      	cbnz	r3, 22ffe <log_list_add_tail+0xe>
		list->head = msg;
   22ff4:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   22ff6:	2300      	movs	r3, #0
	list->tail = msg;
   22ff8:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   22ffa:	600b      	str	r3, [r1, #0]
}
   22ffc:	4770      	bx	lr
		list->tail->next = msg;
   22ffe:	6843      	ldr	r3, [r0, #4]
   23000:	6019      	str	r1, [r3, #0]
   23002:	e7f8      	b.n	22ff6 <log_list_add_tail+0x6>

00023004 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   23004:	6800      	ldr	r0, [r0, #0]
   23006:	4770      	bx	lr

00023008 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   23008:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   2300a:	b10b      	cbz	r3, 23010 <log_list_head_get+0x8>
		list->head = list->head->next;
   2300c:	681a      	ldr	r2, [r3, #0]
   2300e:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   23010:	4618      	mov	r0, r3
   23012:	4770      	bx	lr

00023014 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   23014:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   23016:	f7ec f953 	bl	f2c0 <log_msg_chunk_alloc>

	if (msg != NULL) {
   2301a:	b118      	cbz	r0, 23024 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   2301c:	2301      	movs	r3, #1
   2301e:	6043      	str	r3, [r0, #4]
   23020:	2300      	movs	r3, #0
   23022:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.raw = 0U;
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   23024:	bd08      	pop	{r3, pc}

00023026 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t z_arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   23026:	f7ec bceb 	b.w	fa00 <z_timer_cycle_get_32>

0002302a <dummy_timestamp>:
   2302a:	2000      	movs	r0, #0
   2302c:	4770      	bx	lr

0002302e <log_0>:
{
   2302e:	b538      	push	{r3, r4, r5, lr}
   23030:	4605      	mov	r5, r0
   23032:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   23034:	f7ff ffee 	bl	23014 <z_log_msg_std_alloc>

	if (msg != NULL) {
   23038:	b128      	cbz	r0, 23046 <log_0+0x18>
		msg->str = str;
   2303a:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   2303c:	4621      	mov	r1, r4
}
   2303e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   23042:	f7ec b8ab 	b.w	f19c <msg_finalize>
}
   23046:	bd38      	pop	{r3, r4, r5, pc}

00023048 <log_1>:
{
   23048:	b570      	push	{r4, r5, r6, lr}
   2304a:	4604      	mov	r4, r0
   2304c:	460e      	mov	r6, r1
   2304e:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   23050:	f7ff ffe0 	bl	23014 <z_log_msg_std_alloc>

	if (msg != NULL) {
   23054:	b158      	cbz	r0, 2306e <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   23056:	2201      	movs	r2, #1
		msg->str = str;
   23058:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   2305a:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
   2305c:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   2305e:	f362 1407 	bfi	r4, r2, #4, #4
   23062:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
   23064:	4629      	mov	r1, r5
}
   23066:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   2306a:	f7ec b897 	b.w	f19c <msg_finalize>
}
   2306e:	bd70      	pop	{r4, r5, r6, pc}

00023070 <log_2>:
{
   23070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23074:	4605      	mov	r5, r0
   23076:	4688      	mov	r8, r1
   23078:	4617      	mov	r7, r2
   2307a:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2307c:	f7ff ffca 	bl	23014 <z_log_msg_std_alloc>

	if (msg != NULL) {
   23080:	b160      	cbz	r0, 2309c <log_2+0x2c>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   23082:	2302      	movs	r3, #2
		msg->str = str;
   23084:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   23086:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   23088:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   2308c:	f363 1507 	bfi	r5, r3, #4, #4
   23090:	7245      	strb	r5, [r0, #9]
		msg_finalize(msg, src_level);
   23092:	4631      	mov	r1, r6
}
   23094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   23098:	f7ec b880 	b.w	f19c <msg_finalize>
}
   2309c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000230a0 <log_3>:
{
   230a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   230a4:	4605      	mov	r5, r0
   230a6:	4689      	mov	r9, r1
   230a8:	4690      	mov	r8, r2
   230aa:	461f      	mov	r7, r3
   230ac:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   230b0:	f7ff ffb0 	bl	23014 <z_log_msg_std_alloc>

	if (msg != NULL) {
   230b4:	b168      	cbz	r0, 230d2 <log_3+0x32>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   230b6:	2303      	movs	r3, #3
		msg->str = str;
   230b8:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   230ba:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   230bc:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   230c0:	f363 1507 	bfi	r5, r3, #4, #4
   230c4:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[2] = arg3;
   230c6:	61c7      	str	r7, [r0, #28]
		msg_finalize(msg, src_level);
   230c8:	4631      	mov	r1, r6
}
   230ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   230ce:	f7ec b865 	b.w	f19c <msg_finalize>
}
   230d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000230d6 <log_n>:
{
   230d6:	b510      	push	{r4, lr}
   230d8:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   230da:	f000 f893 	bl	23204 <log_msg_create_n>
		if (msg == NULL) {
   230de:	b120      	cbz	r0, 230ea <log_n+0x14>
		msg_finalize(msg, src_level);
   230e0:	4621      	mov	r1, r4
}
   230e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   230e6:	f7ec b859 	b.w	f19c <msg_finalize>
}
   230ea:	bd10      	pop	{r4, pc}

000230ec <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   230ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   230f0:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   230f2:	8903      	ldrh	r3, [r0, #8]
{
   230f4:	460e      	mov	r6, r1
	u32_t available_len = msg->hdr.params.hexdump.length;
   230f6:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   230f8:	42a3      	cmp	r3, r4
{
   230fa:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   230fe:	d803      	bhi.n	23108 <log_msg_hexdump_data_op+0x1c>
		*length = 0;
   23100:	2300      	movs	r3, #0
   23102:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   23104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   23108:	6811      	ldr	r1, [r2, #0]
   2310a:	4421      	add	r1, r4
   2310c:	4299      	cmp	r1, r3
		*length = available_len - offset;
   2310e:	bf84      	itt	hi
   23110:	1b19      	subhi	r1, r3, r4
   23112:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   23114:	2b0c      	cmp	r3, #12
	req_len = *length;
   23116:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2311a:	d928      	bls.n	2316e <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
   2311c:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   2311e:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   23122:	d82b      	bhi.n	2317c <log_msg_hexdump_data_op+0x90>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   23124:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   23126:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   23128:	454b      	cmp	r3, r9
   2312a:	bf28      	it	cs
   2312c:	464b      	movcs	r3, r9
   2312e:	4420      	add	r0, r4
   23130:	461d      	mov	r5, r3
   23132:	461a      	mov	r2, r3
		if (put_op) {
   23134:	b1ff      	cbz	r7, 23176 <log_msg_hexdump_data_op+0x8a>
   23136:	4631      	mov	r1, r6
   23138:	f001 fba3 	bl	24882 <memcpy>
		req_len -= cpy_len;
   2313c:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   23140:	442e      	add	r6, r5
	while (req_len > 0) {
   23142:	f1b9 0f00 	cmp.w	r9, #0
   23146:	d0dd      	beq.n	23104 <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   23148:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2314c:	454d      	cmp	r5, r9
   2314e:	bf28      	it	cs
   23150:	464d      	movcs	r5, r9
   23152:	1d20      	adds	r0, r4, #4
   23154:	4440      	add	r0, r8
   23156:	462a      	mov	r2, r5
		if (put_op) {
   23158:	b1bf      	cbz	r7, 2318a <log_msg_hexdump_data_op+0x9e>
   2315a:	4631      	mov	r1, r6
   2315c:	f001 fb91 	bl	24882 <memcpy>
		req_len -= cpy_len;
   23160:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   23164:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   23168:	442e      	add	r6, r5
		offset = 0;
   2316a:	2400      	movs	r4, #0
   2316c:	e7e9      	b.n	23142 <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
   2316e:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   23170:	f04f 0800 	mov.w	r8, #0
   23174:	e7d8      	b.n	23128 <log_msg_hexdump_data_op+0x3c>
   23176:	4601      	mov	r1, r0
   23178:	4630      	mov	r0, r6
   2317a:	e7dd      	b.n	23138 <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
   2317c:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   2317e:	2c1b      	cmp	r4, #27
   23180:	d9df      	bls.n	23142 <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
   23182:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   23186:	3c1c      	subs	r4, #28
   23188:	e7f9      	b.n	2317e <log_msg_hexdump_data_op+0x92>
   2318a:	4601      	mov	r1, r0
   2318c:	4630      	mov	r0, r6
   2318e:	e7e5      	b.n	2315c <log_msg_hexdump_data_op+0x70>

00023190 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   23190:	3004      	adds	r0, #4
   23192:	e8d0 3fef 	ldaex	r3, [r0]
   23196:	3301      	adds	r3, #1
   23198:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2319c:	2a00      	cmp	r2, #0
   2319e:	d1f8      	bne.n	23192 <log_msg_get+0x2>
}
   231a0:	4770      	bx	lr

000231a2 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   231a2:	7a40      	ldrb	r0, [r0, #9]
}
   231a4:	0900      	lsrs	r0, r0, #4
   231a6:	4770      	bx	lr

000231a8 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   231a8:	7a43      	ldrb	r3, [r0, #9]
   231aa:	091b      	lsrs	r3, r3, #4
   231ac:	428b      	cmp	r3, r1
   231ae:	d916      	bls.n	231de <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   231b0:	2b03      	cmp	r3, #3
   231b2:	d803      	bhi.n	231bc <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
   231b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   231b8:	6948      	ldr	r0, [r1, #20]
   231ba:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   231bc:	2901      	cmp	r1, #1
   231be:	d803      	bhi.n	231c8 <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
   231c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   231c4:	6988      	ldr	r0, [r1, #24]
   231c6:	4770      	bx	lr
	cont = msg->payload.ext.next;
   231c8:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   231ca:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   231cc:	2906      	cmp	r1, #6
   231ce:	d803      	bhi.n	231d8 <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
   231d0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   231d4:	6848      	ldr	r0, [r1, #4]
   231d6:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   231d8:	3907      	subs	r1, #7
		cont = cont->next;
   231da:	681b      	ldr	r3, [r3, #0]
   231dc:	e7f6      	b.n	231cc <log_msg_arg_get+0x24>
		return 0;
   231de:	2000      	movs	r0, #0
}
   231e0:	4770      	bx	lr

000231e2 <log_msg_put>:
{
   231e2:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   231e4:	1d02      	adds	r2, r0, #4
   231e6:	e8d2 1fef 	ldaex	r1, [r2]
   231ea:	3901      	subs	r1, #1
   231ec:	e8c2 1fec 	stlex	ip, r1, [r2]
   231f0:	f1bc 0f00 	cmp.w	ip, #0
   231f4:	d1f7      	bne.n	231e6 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   231f6:	685b      	ldr	r3, [r3, #4]
   231f8:	b90b      	cbnz	r3, 231fe <log_msg_put+0x1c>
		msg_free(msg);
   231fa:	f7ec b873 	b.w	f2e4 <msg_free>
}
   231fe:	4770      	bx	lr

00023200 <log_msg_str_get>:
}
   23200:	6900      	ldr	r0, [r0, #16]
   23202:	4770      	bx	lr

00023204 <log_msg_create_n>:
{
   23204:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23208:	4682      	mov	sl, r0
   2320a:	4688      	mov	r8, r1
   2320c:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   2320e:	f7ec f857 	bl	f2c0 <log_msg_chunk_alloc>
	if (msg != NULL) {
   23212:	4604      	mov	r4, r0
   23214:	b360      	cbz	r0, 23270 <log_msg_create_n+0x6c>
		msg->hdr.ref_cnt = 1;
   23216:	2301      	movs	r3, #1
   23218:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   2321a:	2d03      	cmp	r5, #3
   2321c:	6043      	str	r3, [r0, #4]
   2321e:	8106      	strh	r6, [r0, #8]
   23220:	d90f      	bls.n	23242 <log_msg_create_n+0x3e>
	msg->hdr.params.std.nargs = 0U;
   23222:	7a42      	ldrb	r2, [r0, #9]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   23224:	f1a5 0902 	sub.w	r9, r5, #2
	msg->hdr.params.std.nargs = 0U;
   23228:	f366 1207 	bfi	r2, r6, #4, #4
   2322c:	7242      	strb	r2, [r0, #9]
	msg->hdr.params.generic.ext = 1;
   2322e:	7a02      	ldrb	r2, [r0, #8]
	next = &msg->payload.ext.next;
   23230:	f100 0b14 	add.w	fp, r0, #20
	msg->hdr.params.generic.ext = 1;
   23234:	f042 0202 	orr.w	r2, r2, #2
   23238:	7202      	strb	r2, [r0, #8]
	*next = NULL;
   2323a:	6146      	str	r6, [r0, #20]
	while (n > 0) {
   2323c:	f1b9 0f00 	cmp.w	r9, #0
   23240:	dc0e      	bgt.n	23260 <log_msg_create_n+0x5c>
		msg->hdr.params.std.nargs = nargs;
   23242:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   23244:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   23246:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   2324a:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   2324e:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   23250:	d818      	bhi.n	23284 <log_msg_create_n+0x80>
   23252:	00aa      	lsls	r2, r5, #2
   23254:	4641      	mov	r1, r8
   23256:	f104 0014 	add.w	r0, r4, #20
   2325a:	f001 fb12 	bl	24882 <memcpy>
   2325e:	e007      	b.n	23270 <log_msg_create_n+0x6c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   23260:	f7ec f82e 	bl	f2c0 <log_msg_chunk_alloc>
		if (cont == NULL) {
   23264:	4607      	mov	r7, r0
   23266:	b930      	cbnz	r0, 23276 <log_msg_create_n+0x72>
			msg_free(msg);
   23268:	4620      	mov	r0, r4
   2326a:	f7ec f83b 	bl	f2e4 <msg_free>
			return NULL;
   2326e:	463c      	mov	r4, r7
}
   23270:	4620      	mov	r0, r4
   23272:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   23276:	f8cb 0000 	str.w	r0, [fp]
   2327a:	f1a9 0907 	sub.w	r9, r9, #7
		cont->next = NULL;
   2327e:	6006      	str	r6, [r0, #0]
		next = &cont->next;
   23280:	4683      	mov	fp, r0
   23282:	e7db      	b.n	2323c <log_msg_create_n+0x38>
   23284:	f8d8 3000 	ldr.w	r3, [r8]
	struct log_msg_cont *cont = msg->payload.ext.next;
   23288:	6967      	ldr	r7, [r4, #20]
   2328a:	61a3      	str	r3, [r4, #24]
   2328c:	f8d8 3004 	ldr.w	r3, [r8, #4]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   23290:	3d02      	subs	r5, #2
   23292:	61e3      	str	r3, [r4, #28]
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   23294:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   23298:	2d07      	cmp	r5, #7
   2329a:	462e      	mov	r6, r5
   2329c:	bf28      	it	cs
   2329e:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   232a0:	ea4f 0986 	mov.w	r9, r6, lsl #2
   232a4:	4641      	mov	r1, r8
   232a6:	1d38      	adds	r0, r7, #4
   232a8:	464a      	mov	r2, r9
   232aa:	f001 faea 	bl	24882 <memcpy>
	while (nargs != 0U) {
   232ae:	1bad      	subs	r5, r5, r6
		args += cpy_args;
   232b0:	44c8      	add	r8, r9
		cont = cont->next;
   232b2:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
   232b4:	d1f0      	bne.n	23298 <log_msg_create_n+0x94>
   232b6:	e7db      	b.n	23270 <log_msg_create_n+0x6c>

000232b8 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   232b8:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   232ba:	2400      	movs	r4, #0
   232bc:	9400      	str	r4, [sp, #0]
   232be:	f7ff ff15 	bl	230ec <log_msg_hexdump_data_op>
}
   232c2:	b002      	add	sp, #8
   232c4:	bd10      	pop	{r4, pc}

000232c6 <buffer_write>:
{
   232c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   232c8:	4606      	mov	r6, r0
   232ca:	460d      	mov	r5, r1
   232cc:	4614      	mov	r4, r2
   232ce:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   232d0:	4621      	mov	r1, r4
   232d2:	4628      	mov	r0, r5
   232d4:	463a      	mov	r2, r7
   232d6:	47b0      	blx	r6
	} while (len != 0);
   232d8:	1a24      	subs	r4, r4, r0
		buf += processed;
   232da:	4405      	add	r5, r0
	} while (len != 0);
   232dc:	d1f8      	bne.n	232d0 <buffer_write+0xa>
}
   232de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000232e0 <std_print>:
{
   232e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   232e4:	b08e      	sub	sp, #56	; 0x38
   232e6:	af0e      	add	r7, sp, #56	; 0x38
   232e8:	4681      	mov	r9, r0
   232ea:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   232ec:	f7ff ff88 	bl	23200 <log_msg_str_get>
   232f0:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   232f2:	4648      	mov	r0, r9
   232f4:	f7ff ff55 	bl	231a2 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   232f8:	f04f 0800 	mov.w	r8, #0
	u32_t nargs = log_msg_nargs_get(msg);
   232fc:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   232fe:	0083      	lsls	r3, r0, #2
   23300:	330e      	adds	r3, #14
   23302:	f023 0307 	bic.w	r3, r3, #7
   23306:	ebad 0d03 	sub.w	sp, sp, r3
   2330a:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   2330c:	45d0      	cmp	r8, sl
   2330e:	d116      	bne.n	2333e <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   23310:	4648      	mov	r0, r9
   23312:	f7ff ff46 	bl	231a2 <log_msg_nargs_get>
   23316:	280f      	cmp	r0, #15
   23318:	d81e      	bhi.n	23358 <std_print+0x78>
   2331a:	e8df f010 	tbh	[pc, r0, lsl #1]
   2331e:	0019      	.short	0x0019
   23320:	00260020 	.word	0x00260020
   23324:	0036002d 	.word	0x0036002d
   23328:	004e0041 	.word	0x004e0041
   2332c:	006e005d 	.word	0x006e005d
   23330:	00960081 	.word	0x00960081
   23334:	00c600ad 	.word	0x00c600ad
   23338:	00fe00e1 	.word	0x00fe00e1
   2333c:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   2333e:	4641      	mov	r1, r8
   23340:	4648      	mov	r0, r9
   23342:	f7ff ff31 	bl	231a8 <log_msg_arg_get>
   23346:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
   2334a:	f108 0801 	add.w	r8, r8, #1
   2334e:	e7dd      	b.n	2330c <std_print+0x2c>
		print_formatted(log_output, str);
   23350:	4631      	mov	r1, r6
   23352:	4628      	mov	r0, r5
   23354:	f7eb fffa 	bl	f34c <print_formatted>
}
   23358:	46bd      	mov	sp, r7
   2335a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   2335e:	6822      	ldr	r2, [r4, #0]
   23360:	4631      	mov	r1, r6
   23362:	4628      	mov	r0, r5
   23364:	f7eb fff2 	bl	f34c <print_formatted>
		break;
   23368:	e7f6      	b.n	23358 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   2336a:	e9d4 2300 	ldrd	r2, r3, [r4]
   2336e:	4631      	mov	r1, r6
   23370:	4628      	mov	r0, r5
   23372:	f7eb ffeb 	bl	f34c <print_formatted>
		break;
   23376:	e7ef      	b.n	23358 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   23378:	68a3      	ldr	r3, [r4, #8]
   2337a:	4631      	mov	r1, r6
   2337c:	9300      	str	r3, [sp, #0]
   2337e:	e9d4 2300 	ldrd	r2, r3, [r4]
   23382:	4628      	mov	r0, r5
   23384:	f7eb ffe2 	bl	f34c <print_formatted>
		break;
   23388:	e7e6      	b.n	23358 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2338a:	68e3      	ldr	r3, [r4, #12]
   2338c:	4631      	mov	r1, r6
   2338e:	9301      	str	r3, [sp, #4]
   23390:	68a3      	ldr	r3, [r4, #8]
   23392:	4628      	mov	r0, r5
   23394:	9300      	str	r3, [sp, #0]
   23396:	e9d4 2300 	ldrd	r2, r3, [r4]
   2339a:	f7eb ffd7 	bl	f34c <print_formatted>
		break;
   2339e:	e7db      	b.n	23358 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   233a0:	6923      	ldr	r3, [r4, #16]
   233a2:	4631      	mov	r1, r6
   233a4:	9302      	str	r3, [sp, #8]
   233a6:	68e3      	ldr	r3, [r4, #12]
   233a8:	4628      	mov	r0, r5
   233aa:	9301      	str	r3, [sp, #4]
   233ac:	68a3      	ldr	r3, [r4, #8]
   233ae:	9300      	str	r3, [sp, #0]
   233b0:	e9d4 2300 	ldrd	r2, r3, [r4]
   233b4:	f7eb ffca 	bl	f34c <print_formatted>
		break;
   233b8:	e7ce      	b.n	23358 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   233ba:	6963      	ldr	r3, [r4, #20]
   233bc:	4631      	mov	r1, r6
   233be:	9303      	str	r3, [sp, #12]
   233c0:	6923      	ldr	r3, [r4, #16]
   233c2:	4628      	mov	r0, r5
   233c4:	9302      	str	r3, [sp, #8]
   233c6:	68e3      	ldr	r3, [r4, #12]
   233c8:	9301      	str	r3, [sp, #4]
   233ca:	68a3      	ldr	r3, [r4, #8]
   233cc:	9300      	str	r3, [sp, #0]
   233ce:	e9d4 2300 	ldrd	r2, r3, [r4]
   233d2:	f7eb ffbb 	bl	f34c <print_formatted>
		break;
   233d6:	e7bf      	b.n	23358 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   233d8:	69a3      	ldr	r3, [r4, #24]
   233da:	4631      	mov	r1, r6
   233dc:	9304      	str	r3, [sp, #16]
   233de:	6963      	ldr	r3, [r4, #20]
   233e0:	4628      	mov	r0, r5
   233e2:	9303      	str	r3, [sp, #12]
   233e4:	6923      	ldr	r3, [r4, #16]
   233e6:	9302      	str	r3, [sp, #8]
   233e8:	68e3      	ldr	r3, [r4, #12]
   233ea:	9301      	str	r3, [sp, #4]
   233ec:	68a3      	ldr	r3, [r4, #8]
   233ee:	9300      	str	r3, [sp, #0]
   233f0:	e9d4 2300 	ldrd	r2, r3, [r4]
   233f4:	f7eb ffaa 	bl	f34c <print_formatted>
		break;
   233f8:	e7ae      	b.n	23358 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   233fa:	69e3      	ldr	r3, [r4, #28]
   233fc:	4631      	mov	r1, r6
   233fe:	9305      	str	r3, [sp, #20]
   23400:	69a3      	ldr	r3, [r4, #24]
   23402:	4628      	mov	r0, r5
   23404:	9304      	str	r3, [sp, #16]
   23406:	6963      	ldr	r3, [r4, #20]
   23408:	9303      	str	r3, [sp, #12]
   2340a:	6923      	ldr	r3, [r4, #16]
   2340c:	9302      	str	r3, [sp, #8]
   2340e:	68e3      	ldr	r3, [r4, #12]
   23410:	9301      	str	r3, [sp, #4]
   23412:	68a3      	ldr	r3, [r4, #8]
   23414:	9300      	str	r3, [sp, #0]
   23416:	e9d4 2300 	ldrd	r2, r3, [r4]
   2341a:	f7eb ff97 	bl	f34c <print_formatted>
		break;
   2341e:	e79b      	b.n	23358 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23420:	6a23      	ldr	r3, [r4, #32]
   23422:	4631      	mov	r1, r6
   23424:	9306      	str	r3, [sp, #24]
   23426:	69e3      	ldr	r3, [r4, #28]
   23428:	4628      	mov	r0, r5
   2342a:	9305      	str	r3, [sp, #20]
   2342c:	69a3      	ldr	r3, [r4, #24]
   2342e:	9304      	str	r3, [sp, #16]
   23430:	6963      	ldr	r3, [r4, #20]
   23432:	9303      	str	r3, [sp, #12]
   23434:	6923      	ldr	r3, [r4, #16]
   23436:	9302      	str	r3, [sp, #8]
   23438:	68e3      	ldr	r3, [r4, #12]
   2343a:	9301      	str	r3, [sp, #4]
   2343c:	68a3      	ldr	r3, [r4, #8]
   2343e:	9300      	str	r3, [sp, #0]
   23440:	e9d4 2300 	ldrd	r2, r3, [r4]
   23444:	f7eb ff82 	bl	f34c <print_formatted>
		break;
   23448:	e786      	b.n	23358 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2344a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2344c:	4631      	mov	r1, r6
   2344e:	9307      	str	r3, [sp, #28]
   23450:	6a23      	ldr	r3, [r4, #32]
   23452:	4628      	mov	r0, r5
   23454:	9306      	str	r3, [sp, #24]
   23456:	69e3      	ldr	r3, [r4, #28]
   23458:	9305      	str	r3, [sp, #20]
   2345a:	69a3      	ldr	r3, [r4, #24]
   2345c:	9304      	str	r3, [sp, #16]
   2345e:	6963      	ldr	r3, [r4, #20]
   23460:	9303      	str	r3, [sp, #12]
   23462:	6923      	ldr	r3, [r4, #16]
   23464:	9302      	str	r3, [sp, #8]
   23466:	68e3      	ldr	r3, [r4, #12]
   23468:	9301      	str	r3, [sp, #4]
   2346a:	68a3      	ldr	r3, [r4, #8]
   2346c:	9300      	str	r3, [sp, #0]
   2346e:	e9d4 2300 	ldrd	r2, r3, [r4]
   23472:	f7eb ff6b 	bl	f34c <print_formatted>
		break;
   23476:	e76f      	b.n	23358 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23478:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2347a:	4631      	mov	r1, r6
   2347c:	9308      	str	r3, [sp, #32]
   2347e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23480:	4628      	mov	r0, r5
   23482:	9307      	str	r3, [sp, #28]
   23484:	6a23      	ldr	r3, [r4, #32]
   23486:	9306      	str	r3, [sp, #24]
   23488:	69e3      	ldr	r3, [r4, #28]
   2348a:	9305      	str	r3, [sp, #20]
   2348c:	69a3      	ldr	r3, [r4, #24]
   2348e:	9304      	str	r3, [sp, #16]
   23490:	6963      	ldr	r3, [r4, #20]
   23492:	9303      	str	r3, [sp, #12]
   23494:	6923      	ldr	r3, [r4, #16]
   23496:	9302      	str	r3, [sp, #8]
   23498:	68e3      	ldr	r3, [r4, #12]
   2349a:	9301      	str	r3, [sp, #4]
   2349c:	68a3      	ldr	r3, [r4, #8]
   2349e:	9300      	str	r3, [sp, #0]
   234a0:	e9d4 2300 	ldrd	r2, r3, [r4]
   234a4:	f7eb ff52 	bl	f34c <print_formatted>
		break;
   234a8:	e756      	b.n	23358 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   234aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   234ac:	4631      	mov	r1, r6
   234ae:	9309      	str	r3, [sp, #36]	; 0x24
   234b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   234b2:	4628      	mov	r0, r5
   234b4:	9308      	str	r3, [sp, #32]
   234b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   234b8:	9307      	str	r3, [sp, #28]
   234ba:	6a23      	ldr	r3, [r4, #32]
   234bc:	9306      	str	r3, [sp, #24]
   234be:	69e3      	ldr	r3, [r4, #28]
   234c0:	9305      	str	r3, [sp, #20]
   234c2:	69a3      	ldr	r3, [r4, #24]
   234c4:	9304      	str	r3, [sp, #16]
   234c6:	6963      	ldr	r3, [r4, #20]
   234c8:	9303      	str	r3, [sp, #12]
   234ca:	6923      	ldr	r3, [r4, #16]
   234cc:	9302      	str	r3, [sp, #8]
   234ce:	68e3      	ldr	r3, [r4, #12]
   234d0:	9301      	str	r3, [sp, #4]
   234d2:	68a3      	ldr	r3, [r4, #8]
   234d4:	9300      	str	r3, [sp, #0]
   234d6:	e9d4 2300 	ldrd	r2, r3, [r4]
   234da:	f7eb ff37 	bl	f34c <print_formatted>
		break;
   234de:	e73b      	b.n	23358 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   234e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   234e2:	4631      	mov	r1, r6
   234e4:	930a      	str	r3, [sp, #40]	; 0x28
   234e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   234e8:	4628      	mov	r0, r5
   234ea:	9309      	str	r3, [sp, #36]	; 0x24
   234ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   234ee:	9308      	str	r3, [sp, #32]
   234f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   234f2:	9307      	str	r3, [sp, #28]
   234f4:	6a23      	ldr	r3, [r4, #32]
   234f6:	9306      	str	r3, [sp, #24]
   234f8:	69e3      	ldr	r3, [r4, #28]
   234fa:	9305      	str	r3, [sp, #20]
   234fc:	69a3      	ldr	r3, [r4, #24]
   234fe:	9304      	str	r3, [sp, #16]
   23500:	6963      	ldr	r3, [r4, #20]
   23502:	9303      	str	r3, [sp, #12]
   23504:	6923      	ldr	r3, [r4, #16]
   23506:	9302      	str	r3, [sp, #8]
   23508:	68e3      	ldr	r3, [r4, #12]
   2350a:	9301      	str	r3, [sp, #4]
   2350c:	68a3      	ldr	r3, [r4, #8]
   2350e:	9300      	str	r3, [sp, #0]
   23510:	e9d4 2300 	ldrd	r2, r3, [r4]
   23514:	f7eb ff1a 	bl	f34c <print_formatted>
		break;
   23518:	e71e      	b.n	23358 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2351a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2351c:	4631      	mov	r1, r6
   2351e:	930b      	str	r3, [sp, #44]	; 0x2c
   23520:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23522:	4628      	mov	r0, r5
   23524:	930a      	str	r3, [sp, #40]	; 0x28
   23526:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23528:	9309      	str	r3, [sp, #36]	; 0x24
   2352a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2352c:	9308      	str	r3, [sp, #32]
   2352e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23530:	9307      	str	r3, [sp, #28]
   23532:	6a23      	ldr	r3, [r4, #32]
   23534:	9306      	str	r3, [sp, #24]
   23536:	69e3      	ldr	r3, [r4, #28]
   23538:	9305      	str	r3, [sp, #20]
   2353a:	69a3      	ldr	r3, [r4, #24]
   2353c:	9304      	str	r3, [sp, #16]
   2353e:	6963      	ldr	r3, [r4, #20]
   23540:	9303      	str	r3, [sp, #12]
   23542:	6923      	ldr	r3, [r4, #16]
   23544:	9302      	str	r3, [sp, #8]
   23546:	68e3      	ldr	r3, [r4, #12]
   23548:	9301      	str	r3, [sp, #4]
   2354a:	68a3      	ldr	r3, [r4, #8]
   2354c:	9300      	str	r3, [sp, #0]
   2354e:	e9d4 2300 	ldrd	r2, r3, [r4]
   23552:	f7eb fefb 	bl	f34c <print_formatted>
		break;
   23556:	e6ff      	b.n	23358 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23558:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2355a:	4631      	mov	r1, r6
   2355c:	930c      	str	r3, [sp, #48]	; 0x30
   2355e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23560:	4628      	mov	r0, r5
   23562:	930b      	str	r3, [sp, #44]	; 0x2c
   23564:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23566:	930a      	str	r3, [sp, #40]	; 0x28
   23568:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2356a:	9309      	str	r3, [sp, #36]	; 0x24
   2356c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2356e:	9308      	str	r3, [sp, #32]
   23570:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23572:	9307      	str	r3, [sp, #28]
   23574:	6a23      	ldr	r3, [r4, #32]
   23576:	9306      	str	r3, [sp, #24]
   23578:	69e3      	ldr	r3, [r4, #28]
   2357a:	9305      	str	r3, [sp, #20]
   2357c:	69a3      	ldr	r3, [r4, #24]
   2357e:	9304      	str	r3, [sp, #16]
   23580:	6963      	ldr	r3, [r4, #20]
   23582:	9303      	str	r3, [sp, #12]
   23584:	6923      	ldr	r3, [r4, #16]
   23586:	9302      	str	r3, [sp, #8]
   23588:	68e3      	ldr	r3, [r4, #12]
   2358a:	9301      	str	r3, [sp, #4]
   2358c:	68a3      	ldr	r3, [r4, #8]
   2358e:	9300      	str	r3, [sp, #0]
   23590:	e9d4 2300 	ldrd	r2, r3, [r4]
   23594:	f7eb feda 	bl	f34c <print_formatted>
}
   23598:	e6de      	b.n	23358 <std_print+0x78>

0002359a <log_output_flush>:
		     log_output->control_block->offset,
   2359a:	6842      	ldr	r2, [r0, #4]
{
   2359c:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   2359e:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   235a2:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   235a4:	6881      	ldr	r1, [r0, #8]
   235a6:	6800      	ldr	r0, [r0, #0]
   235a8:	f7ff fe8d 	bl	232c6 <buffer_write>
	log_output->control_block->offset = 0;
   235ac:	2200      	movs	r2, #0
   235ae:	6863      	ldr	r3, [r4, #4]
   235b0:	601a      	str	r2, [r3, #0]
}
   235b2:	bd10      	pop	{r4, pc}

000235b4 <out_func>:
{
   235b4:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   235b6:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   235ba:	681b      	ldr	r3, [r3, #0]
   235bc:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
   235be:	684a      	ldr	r2, [r1, #4]
   235c0:	6813      	ldr	r3, [r2, #0]
   235c2:	3301      	adds	r3, #1
   235c4:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
   235c6:	68ca      	ldr	r2, [r1, #12]
   235c8:	4293      	cmp	r3, r2
   235ca:	d102      	bne.n	235d2 <out_func+0x1e>
		log_output_flush(out_ctx);
   235cc:	4608      	mov	r0, r1
   235ce:	f7ff ffe4 	bl	2359a <log_output_flush>
}
   235d2:	2000      	movs	r0, #0
   235d4:	bd08      	pop	{r3, pc}

000235d6 <char_out>:
{
   235d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   235d8:	460d      	mov	r5, r1
   235da:	4616      	mov	r6, r2
   235dc:	4604      	mov	r4, r0
   235de:	1847      	adds	r7, r0, r1
	for (size_t i = 0; i < length; i++) {
   235e0:	42bc      	cmp	r4, r7
   235e2:	d101      	bne.n	235e8 <char_out+0x12>
}
   235e4:	4628      	mov	r0, r5
   235e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   235e8:	f814 1b01 	ldrb.w	r1, [r4], #1
   235ec:	6873      	ldr	r3, [r6, #4]
   235ee:	4630      	mov	r0, r6
   235f0:	685b      	ldr	r3, [r3, #4]
   235f2:	4798      	blx	r3
   235f4:	e7f4      	b.n	235e0 <char_out+0xa>

000235f6 <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
   235f6:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
   235f8:	7a5a      	ldrb	r2, [r3, #9]
   235fa:	b932      	cbnz	r2, 2360a <get_status+0x14>
	if (data->ref > 0) {
   235fc:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
   23600:	2800      	cmp	r0, #0
   23602:	bfcc      	ite	gt
   23604:	2000      	movgt	r0, #0
   23606:	2001      	movle	r0, #1
   23608:	4770      	bx	lr
   2360a:	2002      	movs	r0, #2
}
   2360c:	4770      	bx	lr

0002360e <clock_stop>:
	const struct nrf_clock_control_config *config =
   2360e:	6802      	ldr	r2, [r0, #0]
{
   23610:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
   23612:	6896      	ldr	r6, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
   23614:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
   23616:	f04f 0320 	mov.w	r3, #32
   2361a:	f3ef 8511 	mrs	r5, BASEPRI
   2361e:	f383 8811 	msr	BASEPRI, r3
   23622:	f3bf 8f6f 	isb	sy
	data->ref--;
   23626:	7a23      	ldrb	r3, [r4, #8]
   23628:	3b01      	subs	r3, #1
   2362a:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
   2362c:	2b00      	cmp	r3, #0
	data->ref--;
   2362e:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
   23630:	d11c      	bne.n	2366c <clock_stop+0x5e>
   23632:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
   23636:	6873      	ldr	r3, [r6, #4]
				config->stop_handler(dev) : true;
   23638:	b9a3      	cbnz	r3, 23664 <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   2363a:	2201      	movs	r2, #1
   2363c:	7af3      	ldrb	r3, [r6, #11]
   2363e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23642:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   23646:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   23648:	2200      	movs	r2, #0
   2364a:	8933      	ldrh	r3, [r6, #8]
   2364c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23650:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   23654:	601a      	str	r2, [r3, #0]
		data->started = false;
   23656:	2000      	movs	r0, #0
   23658:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   2365a:	f385 8811 	msr	BASEPRI, r5
   2365e:	f3bf 8f6f 	isb	sy
}
   23662:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
   23664:	4798      	blx	r3
   23666:	2800      	cmp	r0, #0
   23668:	d1e7      	bne.n	2363a <clock_stop+0x2c>
   2366a:	e7f4      	b.n	23656 <clock_stop+0x48>
   2366c:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
   23670:	bfbc      	itt	lt
   23672:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
   23674:	f06f 0077 	mvnlt.w	r0, #119	; 0x77
   23678:	e7ef      	b.n	2365a <clock_stop+0x4c>

0002367a <clock_async_start>:
{
   2367a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
   2367c:	6803      	ldr	r3, [r0, #0]
{
   2367e:	4606      	mov	r6, r0
   23680:	4614      	mov	r4, r2
	const struct nrf_clock_control_config *config =
   23682:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
   23684:	6885      	ldr	r5, [r0, #8]
	__asm__ volatile(
   23686:	f04f 0320 	mov.w	r3, #32
   2368a:	f3ef 8211 	mrs	r2, BASEPRI
   2368e:	f383 8811 	msr	BASEPRI, r3
   23692:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   23696:	7a2b      	ldrb	r3, [r5, #8]
   23698:	3301      	adds	r3, #1
   2369a:	b25b      	sxtb	r3, r3
   2369c:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
   2369e:	f382 8811 	msr	BASEPRI, r2
   236a2:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
   236a6:	7a6a      	ldrb	r2, [r5, #9]
   236a8:	b132      	cbz	r2, 236b8 <clock_async_start+0x3e>
		if (data) {
   236aa:	b90c      	cbnz	r4, 236b0 <clock_async_start+0x36>
	return 0;
   236ac:	2000      	movs	r0, #0
}
   236ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
   236b0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   236b4:	4798      	blx	r3
   236b6:	e7f9      	b.n	236ac <clock_async_start+0x32>
		if (ref == 1) {
   236b8:	2b01      	cmp	r3, #1
   236ba:	d108      	bne.n	236ce <clock_async_start+0x54>
			do_start =  (config->start_handler) ?
   236bc:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
   236be:	b943      	cbnz	r3, 236d2 <clock_async_start+0x58>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   236c0:	2201      	movs	r2, #1
   236c2:	7abb      	ldrb	r3, [r7, #10]
   236c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   236c8:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   236cc:	601a      	str	r2, [r3, #0]
		if (data) {
   236ce:	b94c      	cbnz	r4, 236e4 <clock_async_start+0x6a>
   236d0:	e7ec      	b.n	236ac <clock_async_start+0x32>
					config->start_handler(dev) : true;
   236d2:	4798      	blx	r3
   236d4:	2800      	cmp	r0, #0
   236d6:	d1f3      	bne.n	236c0 <clock_async_start+0x46>
			} else if (data) {
   236d8:	2c00      	cmp	r4, #0
   236da:	d0e7      	beq.n	236ac <clock_async_start+0x32>
				data->cb(dev, data->user_data);
   236dc:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   236e0:	4630      	mov	r0, r6
   236e2:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
   236e4:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
   236e6:	429c      	cmp	r4, r3
   236e8:	d00d      	beq.n	23706 <clock_async_start+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   236ea:	b113      	cbz	r3, 236f2 <clock_async_start+0x78>
	return node->next;
   236ec:	681b      	ldr	r3, [r3, #0]
	} while (item);
   236ee:	2b00      	cmp	r3, #0
   236f0:	d1f9      	bne.n	236e6 <clock_async_start+0x6c>
	parent->next = child;
   236f2:	2000      	movs	r0, #0
   236f4:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   236f6:	686b      	ldr	r3, [r5, #4]
   236f8:	b913      	cbnz	r3, 23700 <clock_async_start+0x86>
	list->head = node;
   236fa:	e9c5 4400 	strd	r4, r4, [r5]
   236fe:	e7d5      	b.n	236ac <clock_async_start+0x32>
	parent->next = child;
   23700:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23702:	606c      	str	r4, [r5, #4]
   23704:	e7d3      	b.n	236ae <clock_async_start+0x34>
				return -EALREADY;
   23706:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2370a:	e7d0      	b.n	236ae <clock_async_start+0x34>

0002370c <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   2370c:	2200      	movs	r2, #0
   2370e:	f7ff bfb4 	b.w	2367a <clock_async_start>

00023712 <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   23712:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
   23714:	2000      	movs	r0, #0
	list->tail = NULL;
   23716:	e9c3 0000 	strd	r0, r0, [r3]
}
   2371a:	4770      	bx	lr

0002371c <clkstarted_handle>:
{
   2371c:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
   2371e:	6884      	ldr	r4, [r0, #8]
{
   23720:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
   23722:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   23724:	b12b      	cbz	r3, 23732 <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23726:	6861      	ldr	r1, [r4, #4]
	return node->next;
   23728:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2372a:	428b      	cmp	r3, r1
	list->head = node;
   2372c:	6022      	str	r2, [r4, #0]
	list->tail = node;
   2372e:	bf08      	it	eq
   23730:	6062      	streq	r2, [r4, #4]
	data->started = true;
   23732:	2201      	movs	r2, #1
   23734:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
   23736:	b903      	cbnz	r3, 2373a <clkstarted_handle+0x1e>
}
   23738:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   2373a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   2373e:	4628      	mov	r0, r5
   23740:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
   23742:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   23744:	2b00      	cmp	r3, #0
   23746:	d0f7      	beq.n	23738 <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23748:	6861      	ldr	r1, [r4, #4]
	return node->next;
   2374a:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2374c:	428b      	cmp	r3, r1
	list->head = node;
   2374e:	6022      	str	r2, [r4, #0]
	list->tail = node;
   23750:	bf08      	it	eq
   23752:	6062      	streq	r2, [r4, #4]
   23754:	e7ef      	b.n	23736 <clkstarted_handle+0x1a>

00023756 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   23756:	4770      	bx	lr

00023758 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   23758:	4770      	bx	lr

0002375a <z_irq_spurious>:
	z_arm_reserved();
   2375a:	f7ec b9ed 	b.w	fb38 <z_arm_bus_fault>

0002375e <z_arch_isr_direct_header>:
#endif

void z_arch_isr_direct_header(void)
{
	sys_trace_isr_enter();
}
   2375e:	4770      	bx	lr

00023760 <z_do_kernel_oops>:

void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   23760:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   23762:	6800      	ldr	r0, [r0, #0]
   23764:	f7ec bac6 	b.w	fcf4 <z_arm_fatal_error>

00023768 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   23768:	b508      	push	{r3, lr}
	handler();
   2376a:	f7ec f9f7 	bl	fb5c <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   2376e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   23772:	f7ec b95f 	b.w	fa34 <z_arm_exc_exit>

00023776 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   23776:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   23778:	2100      	movs	r1, #0
   2377a:	a801      	add	r0, sp, #4
   2377c:	f7ed f840 	bl	10800 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   23780:	b003      	add	sp, #12
   23782:	f85d fb04 	ldr.w	pc, [sp], #4

00023786 <mpu_configure_region>:
{
   23786:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   23788:	684b      	ldr	r3, [r1, #4]
{
   2378a:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   2378c:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   2378e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   23792:	890d      	ldrh	r5, [r1, #8]
   23794:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   23796:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   23798:	f024 041f 	bic.w	r4, r4, #31
   2379c:	3b01      	subs	r3, #1
   2379e:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   237a0:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   237a4:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   237a8:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   237ac:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   237ae:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   237b2:	9303      	str	r3, [sp, #12]
   237b4:	4604      	mov	r4, r0
   237b6:	d905      	bls.n	237c4 <mpu_configure_region+0x3e>
   237b8:	f7ec fea0 	bl	104fc <region_allocate_and_init.part.0>
   237bc:	4604      	mov	r4, r0
}
   237be:	4620      	mov	r0, r4
   237c0:	b005      	add	sp, #20
   237c2:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   237c4:	4669      	mov	r1, sp
   237c6:	f7ec fe81 	bl	104cc <region_init>
	return region_allocate_and_init(index,
   237ca:	e7f8      	b.n	237be <mpu_configure_region+0x38>

000237cc <_stdout_hook_default>:
}
   237cc:	f04f 30ff 	mov.w	r0, #4294967295
   237d0:	4770      	bx	lr

000237d2 <_stdin_hook_default>:
}
   237d2:	2000      	movs	r0, #0
   237d4:	4770      	bx	lr

000237d6 <_read>:
{
   237d6:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   237d8:	4611      	mov	r1, r2
   237da:	f7ed b837 	b.w	1084c <z_impl_zephyr_read_stdin>

000237de <_write>:
{
   237de:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   237e0:	4611      	mov	r1, r2
   237e2:	f7ed b847 	b.w	10874 <z_impl_zephyr_write_stdout>

000237e6 <_close>:
   237e6:	f04f 30ff 	mov.w	r0, #4294967295
   237ea:	4770      	bx	lr

000237ec <_lseek>:
}
   237ec:	2000      	movs	r0, #0
   237ee:	4770      	bx	lr

000237f0 <_isatty>:
}
   237f0:	2001      	movs	r0, #1
   237f2:	4770      	bx	lr

000237f4 <_kill>:
}
   237f4:	2000      	movs	r0, #0
   237f6:	4770      	bx	lr

000237f8 <_getpid>:
}
   237f8:	2000      	movs	r0, #0
   237fa:	4770      	bx	lr

000237fc <_fstat>:
	st->st_mode = S_IFCHR;
   237fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   23800:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   23802:	604b      	str	r3, [r1, #4]
}
   23804:	4770      	bx	lr

00023806 <__errno>:
	if (z_syscall_trap()) {
		return (int *) z_arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   23806:	f7fc bc47 	b.w	20098 <z_impl_z_errno>

0002380a <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   2380a:	b508      	push	{r3, lr}
	net_if_init();
   2380c:	f7ed f878 	bl	10900 <net_if_init>
	net_if_post_init();
   23810:	f7ed f88e 	bl	10930 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   23814:	2000      	movs	r0, #0
   23816:	bd08      	pop	{r3, pc}

00023818 <l2_flags_get>:
	return iface->if_dev->l2;
   23818:	6803      	ldr	r3, [r0, #0]
   2381a:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   2381c:	b113      	cbz	r3, 23824 <l2_flags_get+0xc>
   2381e:	68db      	ldr	r3, [r3, #12]
   23820:	b103      	cbz	r3, 23824 <l2_flags_get+0xc>
		flags = net_if_l2(iface)->get_flags(iface);
   23822:	4718      	bx	r3
}
   23824:	2000      	movs	r0, #0
   23826:	4770      	bx	lr

00023828 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23828:	e8d0 0faf 	lda	r0, [r0]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2382c:	4108      	asrs	r0, r1
}
   2382e:	f000 0001 	and.w	r0, r0, #1
   23832:	4770      	bx	lr

00023834 <net_if_up>:
{
   23834:	b510      	push	{r4, lr}
   23836:	4604      	mov	r4, r0
	return atomic_test_bit(iface->if_dev->flags, value);
   23838:	6800      	ldr	r0, [r0, #0]
   2383a:	2100      	movs	r1, #0
   2383c:	300c      	adds	r0, #12
   2383e:	f7ff fff3 	bl	23828 <atomic_test_bit>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   23842:	b9d8      	cbnz	r0, 2387c <net_if_up+0x48>
	     net_if_is_socket_offloaded(iface))) {
   23844:	6823      	ldr	r3, [r4, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   23846:	7e9a      	ldrb	r2, [r3, #26]
   23848:	b14a      	cbz	r2, 2385e <net_if_up+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2384a:	330c      	adds	r3, #12
   2384c:	e8d3 2fef 	ldaex	r2, [r3]
   23850:	f042 0201 	orr.w	r2, r2, #1
   23854:	e8c3 2fe1 	stlex	r1, r2, [r3]
   23858:	2900      	cmp	r1, #0
   2385a:	d1f7      	bne.n	2384c <net_if_up+0x18>
}
   2385c:	bd10      	pop	{r4, pc}
	return iface->if_dev->l2;
   2385e:	685b      	ldr	r3, [r3, #4]
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   23860:	b973      	cbnz	r3, 23880 <net_if_up+0x4c>
   23862:	6823      	ldr	r3, [r4, #0]
   23864:	330c      	adds	r3, #12
   23866:	e8d3 2fef 	ldaex	r2, [r3]
   2386a:	f042 0201 	orr.w	r2, r2, #1
   2386e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   23872:	2900      	cmp	r1, #0
   23874:	d1f7      	bne.n	23866 <net_if_up+0x32>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   23876:	4620      	mov	r0, r4
   23878:	f7ff ffce 	bl	23818 <l2_flags_get>
		return 0;
   2387c:	2000      	movs	r0, #0
   2387e:	e7ed      	b.n	2385c <net_if_up+0x28>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   23880:	689b      	ldr	r3, [r3, #8]
   23882:	2b00      	cmp	r3, #0
   23884:	d0ed      	beq.n	23862 <net_if_up+0x2e>
	status = net_if_l2(iface)->enable(iface, true);
   23886:	2101      	movs	r1, #1
   23888:	4620      	mov	r0, r4
   2388a:	4798      	blx	r3
	if (status < 0) {
   2388c:	2800      	cmp	r0, #0
   2388e:	dae8      	bge.n	23862 <net_if_up+0x2e>
   23890:	e7e4      	b.n	2385c <net_if_up+0x28>

00023892 <gpio_nrfx_write>:
{
   23892:	b510      	push	{r4, lr}
	return port->config->config_info;
   23894:	6804      	ldr	r4, [r0, #0]
   23896:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   23898:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2389a:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2389c:	6824      	ldr	r4, [r4, #0]
   2389e:	69c0      	ldr	r0, [r0, #28]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   238a0:	d103      	bne.n	238aa <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   238a2:	4058      	eors	r0, r3
    p_reg->OUT = value;
   238a4:	6060      	str	r0, [r4, #4]
}
   238a6:	2000      	movs	r0, #0
   238a8:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   238aa:	3300      	adds	r3, #0
   238ac:	f04f 0101 	mov.w	r1, #1
   238b0:	bf18      	it	ne
   238b2:	2301      	movne	r3, #1
   238b4:	40d0      	lsrs	r0, r2
   238b6:	f000 0001 	and.w	r0, r0, #1
   238ba:	4091      	lsls	r1, r2
   238bc:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   238be:	bf14      	ite	ne
   238c0:	60a1      	strne	r1, [r4, #8]
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   238c2:	60e1      	streq	r1, [r4, #12]
   238c4:	e7ef      	b.n	238a6 <gpio_nrfx_write+0x14>

000238c6 <gpio_nrfx_read>:
{
   238c6:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   238c8:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   238ca:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   238cc:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   238ce:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   238d0:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   238d2:	2901      	cmp	r1, #1
    return p_reg->DIR;
   238d4:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   238d6:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   238d8:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   238da:	ea80 0004 	eor.w	r0, r0, r4
   238de:	ea84 0405 	eor.w	r4, r4, r5
   238e2:	ea04 0406 	and.w	r4, r4, r6
   238e6:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   238ea:	bf1c      	itt	ne
   238ec:	40d0      	lsrne	r0, r2
   238ee:	f000 0001 	andne.w	r0, r0, #1
   238f2:	6018      	str	r0, [r3, #0]
}
   238f4:	2000      	movs	r0, #0
   238f6:	bd70      	pop	{r4, r5, r6, pc}

000238f8 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   238f8:	6883      	ldr	r3, [r0, #8]
{
   238fa:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   238fc:	6818      	ldr	r0, [r3, #0]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   238fe:	b158      	cbz	r0, 23918 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23900:	2400      	movs	r4, #0
   23902:	4281      	cmp	r1, r0
   23904:	d113      	bne.n	2392e <gpio_nrfx_manage_callback+0x36>
   23906:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   23908:	b95c      	cbnz	r4, 23922 <gpio_nrfx_manage_callback+0x2a>
   2390a:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   2390c:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   2390e:	42a1      	cmp	r1, r4
   23910:	d100      	bne.n	23914 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   23912:	6058      	str	r0, [r3, #4]
	parent->next = child;
   23914:	2000      	movs	r0, #0
   23916:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   23918:	b972      	cbnz	r2, 23938 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   2391a:	2000      	movs	r0, #0
}
   2391c:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2391e:	4628      	mov	r0, r5
   23920:	e7ef      	b.n	23902 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   23922:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   23924:	6858      	ldr	r0, [r3, #4]
   23926:	4281      	cmp	r1, r0
	list->tail = node;
   23928:	bf08      	it	eq
   2392a:	605c      	streq	r4, [r3, #4]
   2392c:	e7f2      	b.n	23914 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   2392e:	6805      	ldr	r5, [r0, #0]
   23930:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23932:	2d00      	cmp	r5, #0
   23934:	d1f3      	bne.n	2391e <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   23936:	b13a      	cbz	r2, 23948 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   23938:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   2393a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2393c:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   2393e:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   23940:	2800      	cmp	r0, #0
   23942:	d1ea      	bne.n	2391a <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   23944:	6059      	str	r1, [r3, #4]
   23946:	e7e9      	b.n	2391c <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   23948:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2394c:	e7e6      	b.n	2391c <gpio_nrfx_manage_callback+0x24>

0002394e <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2394e:	2901      	cmp	r1, #1
{
   23950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   23954:	bf18      	it	ne
   23956:	b2d4      	uxtbne	r4, r2
{
   23958:	4606      	mov	r6, r0
		to_pin   = pin;
   2395a:	bf12      	itee	ne
   2395c:	4625      	movne	r5, r4
		to_pin   = 31U;
   2395e:	251f      	moveq	r5, #31
		from_pin = 0U;
   23960:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   23962:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   23966:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   23968:	42ac      	cmp	r4, r5
   2396a:	d902      	bls.n	23972 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   2396c:	2000      	movs	r0, #0
}
   2396e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   23972:	68fb      	ldr	r3, [r7, #12]
   23974:	fa08 f204 	lsl.w	r2, r8, r4
   23978:	ea23 0302 	bic.w	r3, r3, r2
   2397c:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   2397e:	4621      	mov	r1, r4
   23980:	4630      	mov	r0, r6
   23982:	f7ed f815 	bl	109b0 <gpiote_pin_int_cfg>
		if (res != 0) {
   23986:	2800      	cmp	r0, #0
   23988:	d1f1      	bne.n	2396e <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2398a:	3401      	adds	r4, #1
   2398c:	b2e4      	uxtb	r4, r4
   2398e:	e7eb      	b.n	23968 <gpio_nrfx_pin_disable_callback+0x1a>

00023990 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   23990:	2901      	cmp	r1, #1
{
   23992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   23996:	bf18      	it	ne
   23998:	b2d4      	uxtbne	r4, r2
{
   2399a:	4606      	mov	r6, r0
		to_pin   = pin;
   2399c:	bf12      	itee	ne
   2399e:	4625      	movne	r5, r4
		to_pin   = 31U;
   239a0:	251f      	moveq	r5, #31
		from_pin = 0U;
   239a2:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   239a4:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   239a8:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   239aa:	42ac      	cmp	r4, r5
   239ac:	d902      	bls.n	239b4 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   239ae:	2000      	movs	r0, #0
}
   239b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   239b4:	68fb      	ldr	r3, [r7, #12]
   239b6:	fa08 f204 	lsl.w	r2, r8, r4
   239ba:	4313      	orrs	r3, r2
   239bc:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   239be:	4621      	mov	r1, r4
   239c0:	4630      	mov	r0, r6
   239c2:	f7ec fff5 	bl	109b0 <gpiote_pin_int_cfg>
		if (res != 0) {
   239c6:	2800      	cmp	r0, #0
   239c8:	d1f2      	bne.n	239b0 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   239ca:	3401      	adds	r4, #1
   239cc:	b2e4      	uxtb	r4, r4
   239ce:	e7ec      	b.n	239aa <gpio_nrfx_pin_enable_callback+0x1a>

000239d0 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   239d0:	6883      	ldr	r3, [r0, #8]
   239d2:	689b      	ldr	r3, [r3, #8]
   239d4:	7b9a      	ldrb	r2, [r3, #14]
   239d6:	b172      	cbz	r2, 239f6 <uarte_nrfx_isr_int+0x26>
	return dev->config->config_info;
   239d8:	6802      	ldr	r2, [r0, #0]
	return config->uarte_regs;
   239da:	6892      	ldr	r2, [r2, #8]
   239dc:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   239de:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (data->int_driven->disable_tx_irq &&
   239e2:	b141      	cbz	r1, 239f6 <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   239e4:	f44f 7180 	mov.w	r1, #256	; 0x100
   239e8:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   239ec:	2101      	movs	r1, #1
   239ee:	60d1      	str	r1, [r2, #12]
		data->int_driven->disable_tx_irq = false;
   239f0:	2200      	movs	r2, #0
   239f2:	739a      	strb	r2, [r3, #14]
		return;
   239f4:	4770      	bx	lr
	if (data->int_driven->cb) {
   239f6:	681a      	ldr	r2, [r3, #0]
   239f8:	b10a      	cbz	r2, 239fe <uarte_nrfx_isr_int+0x2e>
		data->int_driven->cb(data->int_driven->cb_data);
   239fa:	6858      	ldr	r0, [r3, #4]
   239fc:	4710      	bx	r2
}
   239fe:	4770      	bx	lr

00023a00 <uarte_nrfx_config_get>:
{
   23a00:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   23a02:	6882      	ldr	r2, [r0, #8]
   23a04:	e892 0003 	ldmia.w	r2, {r0, r1}
   23a08:	e883 0003 	stmia.w	r3, {r0, r1}
}
   23a0c:	2000      	movs	r0, #0
   23a0e:	4770      	bx	lr

00023a10 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   23a10:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   23a12:	689b      	ldr	r3, [r3, #8]
   23a14:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23a16:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   23a1a:	b118      	cbz	r0, 23a24 <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   23a1c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   23a20:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   23a24:	4770      	bx	lr

00023a26 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   23a26:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   23a28:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   23a2a:	689b      	ldr	r3, [r3, #8]
   23a2c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23a2e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   23a32:	b138      	cbz	r0, 23a44 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   23a34:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23a36:	2000      	movs	r0, #0
   23a38:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23a3a:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23a3c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23a40:	601a      	str	r2, [r3, #0]
	return 0;
   23a42:	4770      	bx	lr
		return -1;
   23a44:	f04f 30ff 	mov.w	r0, #4294967295
}
   23a48:	4770      	bx	lr

00023a4a <uarte_nrfx_poll_out>:
{
   23a4a:	b082      	sub	sp, #8
   23a4c:	aa02      	add	r2, sp, #8
   23a4e:	f802 1d01 	strb.w	r1, [r2, #-1]!
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23a52:	2100      	movs	r1, #0
	return dev->config->config_info;
   23a54:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   23a56:	689b      	ldr	r3, [r3, #8]
   23a58:	681b      	ldr	r3, [r3, #0]
   23a5a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   23a5e:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   23a62:	2201      	movs	r2, #1
   23a64:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23a68:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23a6a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   23a6e:	2900      	cmp	r1, #0
   23a70:	d0fb      	beq.n	23a6a <uarte_nrfx_poll_out+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23a72:	60da      	str	r2, [r3, #12]
}
   23a74:	b002      	add	sp, #8
   23a76:	4770      	bx	lr

00023a78 <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   23a78:	6803      	ldr	r3, [r0, #0]
{
   23a7a:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   23a7c:	689b      	ldr	r3, [r3, #8]
   23a7e:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23a80:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   23a84:	b1bb      	cbz	r3, 23ab6 <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   23a86:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   23a88:	68ab      	ldr	r3, [r5, #8]
   23a8a:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23a8c:	2300      	movs	r3, #0
   23a8e:	4290      	cmp	r0, r2
   23a90:	bfa8      	it	ge
   23a92:	4610      	movge	r0, r2
   23a94:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   23a98:	68aa      	ldr	r2, [r5, #8]
	for (int i = 0; i < len; i++) {
   23a9a:	4283      	cmp	r3, r0
   23a9c:	6892      	ldr	r2, [r2, #8]
   23a9e:	db06      	blt.n	23aae <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23aa0:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   23aa2:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   23aa6:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23aaa:	60a3      	str	r3, [r4, #8]
}
   23aac:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   23aae:	5cce      	ldrb	r6, [r1, r3]
   23ab0:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   23ab2:	3301      	adds	r3, #1
   23ab4:	e7f0      	b.n	23a98 <uarte_nrfx_fifo_fill+0x20>
		return 0;
   23ab6:	4618      	mov	r0, r3
   23ab8:	e7f8      	b.n	23aac <uarte_nrfx_fifo_fill+0x34>

00023aba <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   23aba:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   23abc:	689b      	ldr	r3, [r3, #8]
   23abe:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23ac0:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   23ac4:	b143      	cbz	r3, 23ad8 <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   23ac6:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23ac8:	2000      	movs	r0, #0
   23aca:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23ace:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   23ad0:	7b1b      	ldrb	r3, [r3, #12]
   23ad2:	700b      	strb	r3, [r1, #0]
   23ad4:	6010      	str	r0, [r2, #0]
   23ad6:	4770      	bx	lr
	int num_rx = 0;
   23ad8:	4618      	mov	r0, r3
}
   23ada:	4770      	bx	lr

00023adc <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   23adc:	2100      	movs	r1, #0
	return dev->config->config_info;
   23ade:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   23ae0:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   23ae2:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   23ae4:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   23ae6:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   23ae8:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   23aea:	f44f 7280 	mov.w	r2, #256	; 0x100
   23aee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   23af2:	4770      	bx	lr

00023af4 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   23af4:	2201      	movs	r2, #1
   23af6:	6883      	ldr	r3, [r0, #8]
   23af8:	689b      	ldr	r3, [r3, #8]
   23afa:	739a      	strb	r2, [r3, #14]
}
   23afc:	4770      	bx	lr

00023afe <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   23afe:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   23b00:	689b      	ldr	r3, [r3, #8]
   23b02:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23b04:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   23b08:	b118      	cbz	r0, 23b12 <uarte_nrfx_irq_tx_ready_complete+0x14>
    return (bool)(p_reg->INTENSET & mask);
   23b0a:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   23b0e:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   23b12:	4770      	bx	lr

00023b14 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   23b14:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   23b16:	689b      	ldr	r3, [r3, #8]
   23b18:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23b1a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   23b1e:	3000      	adds	r0, #0
   23b20:	bf18      	it	ne
   23b22:	2001      	movne	r0, #1
   23b24:	4770      	bx	lr

00023b26 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   23b26:	2210      	movs	r2, #16
	return dev->config->config_info;
   23b28:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   23b2a:	689b      	ldr	r3, [r3, #8]
   23b2c:	681b      	ldr	r3, [r3, #0]
   23b2e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   23b32:	4770      	bx	lr

00023b34 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   23b34:	2210      	movs	r2, #16
	return dev->config->config_info;
   23b36:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   23b38:	689b      	ldr	r3, [r3, #8]
   23b3a:	681b      	ldr	r3, [r3, #0]
   23b3c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   23b40:	4770      	bx	lr

00023b42 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   23b42:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   23b46:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   23b48:	689b      	ldr	r3, [r3, #8]
   23b4a:	681b      	ldr	r3, [r3, #0]
   23b4c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   23b50:	4770      	bx	lr

00023b52 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   23b52:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   23b56:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   23b58:	689b      	ldr	r3, [r3, #8]
   23b5a:	681b      	ldr	r3, [r3, #0]
   23b5c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   23b60:	4770      	bx	lr

00023b62 <uarte_nrfx_irq_update>:
}
   23b62:	2001      	movs	r0, #1
   23b64:	4770      	bx	lr

00023b66 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   23b66:	6883      	ldr	r3, [r0, #8]
   23b68:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   23b6a:	e9c3 1200 	strd	r1, r2, [r3]
}
   23b6e:	4770      	bx	lr

00023b70 <uarte_nrfx_irq_is_pending>:
{
   23b70:	b508      	push	{r3, lr}
	return dev->config->config_info;
   23b72:	6803      	ldr	r3, [r0, #0]
{
   23b74:	4602      	mov	r2, r0
	return config->uarte_regs;
   23b76:	689b      	ldr	r3, [r3, #8]
   23b78:	6819      	ldr	r1, [r3, #0]
    return (bool)(p_reg->INTENSET & mask);
   23b7a:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   23b7e:	05db      	lsls	r3, r3, #23
   23b80:	d405      	bmi.n	23b8e <uarte_nrfx_irq_is_pending+0x1e>
   23b82:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   23b86:	f010 0010 	ands.w	r0, r0, #16
   23b8a:	d106      	bne.n	23b9a <uarte_nrfx_irq_is_pending+0x2a>
}
   23b8c:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   23b8e:	f7ff ffb6 	bl	23afe <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   23b92:	2800      	cmp	r0, #0
   23b94:	d0f5      	beq.n	23b82 <uarte_nrfx_irq_is_pending+0x12>
		||
   23b96:	2001      	movs	r0, #1
   23b98:	e7f8      	b.n	23b8c <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   23b9a:	4610      	mov	r0, r2
   23b9c:	f7ff ffba 	bl	23b14 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   23ba0:	3000      	adds	r0, #0
   23ba2:	bf18      	it	ne
   23ba4:	2001      	movne	r0, #1
   23ba6:	e7f1      	b.n	23b8c <uarte_nrfx_irq_is_pending+0x1c>

00023ba8 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   23ba8:	2000      	movs	r0, #0
   23baa:	4770      	bx	lr

00023bac <entropy_cc310_rng_get_entropy>:
{
   23bac:	b513      	push	{r0, r1, r4, lr}
   23bae:	4614      	mov	r4, r2
   23bb0:	4608      	mov	r0, r1
	res = spm_request_random_number(buffer, length, &olen);
   23bb2:	aa01      	add	r2, sp, #4
   23bb4:	4621      	mov	r1, r4
   23bb6:	f7e4 fa1b 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   23bba:	9b01      	ldr	r3, [sp, #4]
   23bbc:	429c      	cmp	r4, r3
}
   23bbe:	bf18      	it	ne
   23bc0:	f06f 0015 	mvnne.w	r0, #21
   23bc4:	b002      	add	sp, #8
   23bc6:	bd10      	pop	{r4, pc}

00023bc8 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   23bc8:	4668      	mov	r0, sp
   23bca:	f020 0107 	bic.w	r1, r0, #7
   23bce:	468d      	mov	sp, r1
   23bd0:	b501      	push	{r0, lr}
   23bd2:	f7ff fdc4 	bl	2375e <z_arch_isr_direct_header>
	bsd_os_trace_irq_handler();
   23bd6:	f7f0 fd7b 	bl	146d0 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   23bda:	f7ec f825 	bl	fc28 <_arch_isr_direct_pm>
   23bde:	f7eb ff29 	bl	fa34 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   23be2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   23be6:	4685      	mov	sp, r0
   23be8:	4770      	bx	lr

00023bea <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   23bea:	4668      	mov	r0, sp
   23bec:	f020 0107 	bic.w	r1, r0, #7
   23bf0:	468d      	mov	sp, r1
   23bf2:	b501      	push	{r0, lr}
   23bf4:	f7ff fdb3 	bl	2375e <z_arch_isr_direct_header>
	IPC_IRQHandler();
   23bf8:	f7ef f8f2 	bl	12de0 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   23bfc:	f7ec f814 	bl	fc28 <_arch_isr_direct_pm>
   23c00:	f7eb ff18 	bl	fa34 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   23c04:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   23c08:	4685      	mov	sp, r0
   23c0a:	4770      	bx	lr

00023c0c <trace_task_create>:
{
   23c0c:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   23c0e:	201d      	movs	r0, #29
   23c10:	2200      	movs	r2, #0
   23c12:	2106      	movs	r1, #6
   23c14:	f7eb fff0 	bl	fbf8 <z_arm_irq_priority_set>
}
   23c18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   23c1c:	201d      	movs	r0, #29
   23c1e:	f7eb bfdb 	b.w	fbd8 <z_arch_irq_enable>

00023c22 <read_task_create>:
{
   23c22:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   23c24:	201c      	movs	r0, #28
   23c26:	2200      	movs	r2, #0
   23c28:	2106      	movs	r1, #6
   23c2a:	f7eb ffe5 	bl	fbf8 <z_arm_irq_priority_set>
}
   23c2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   23c32:	201c      	movs	r0, #28
   23c34:	f7eb bfd0 	b.w	fbd8 <z_arch_irq_enable>

00023c38 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   23c38:	2000      	movs	r0, #0
   23c3a:	4770      	bx	lr

00023c3c <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   23c3c:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   23c40:	bf18      	it	ne
   23c42:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   23c44:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   23c46:	bf48      	it	mi
   23c48:	f043 0308 	orrmi.w	r3, r3, #8
}
   23c4c:	4618      	mov	r0, r3
   23c4e:	4770      	bx	lr

00023c50 <z_to_nrf_family>:
	switch (z_family) {
   23c50:	2803      	cmp	r0, #3
   23c52:	d00f      	beq.n	23c74 <z_to_nrf_family+0x24>
   23c54:	d806      	bhi.n	23c64 <z_to_nrf_family+0x14>
   23c56:	2801      	cmp	r0, #1
   23c58:	d00e      	beq.n	23c78 <z_to_nrf_family+0x28>
   23c5a:	2802      	cmp	r0, #2
   23c5c:	d008      	beq.n	23c70 <z_to_nrf_family+0x20>
		return -EAFNOSUPPORT;
   23c5e:	f06f 0069 	mvn.w	r0, #105	; 0x69
   23c62:	4770      	bx	lr
	switch (z_family) {
   23c64:	2866      	cmp	r0, #102	; 0x66
   23c66:	d008      	beq.n	23c7a <z_to_nrf_family+0x2a>
   23c68:	2867      	cmp	r0, #103	; 0x67
   23c6a:	d1f8      	bne.n	23c5e <z_to_nrf_family+0xe>
		return NRF_AF_LOCAL;
   23c6c:	2001      	movs	r0, #1
   23c6e:	4770      	bx	lr
		return NRF_AF_INET6;
   23c70:	200a      	movs	r0, #10
   23c72:	4770      	bx	lr
		return NRF_AF_PACKET;
   23c74:	2005      	movs	r0, #5
   23c76:	4770      	bx	lr
		return NRF_AF_INET;
   23c78:	2002      	movs	r0, #2
}
   23c7a:	4770      	bx	lr

00023c7c <z_to_nrf_protocol>:
	switch (proto) {
   23c7c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   23c80:	d01d      	beq.n	23cbe <z_to_nrf_protocol+0x42>
   23c82:	dc05      	bgt.n	23c90 <z_to_nrf_protocol+0x14>
   23c84:	2806      	cmp	r0, #6
   23c86:	d020      	beq.n	23cca <z_to_nrf_protocol+0x4e>
   23c88:	2811      	cmp	r0, #17
   23c8a:	d016      	beq.n	23cba <z_to_nrf_protocol+0x3e>
   23c8c:	b948      	cbnz	r0, 23ca2 <z_to_nrf_protocol+0x26>
   23c8e:	4770      	bx	lr
   23c90:	f240 2301 	movw	r3, #513	; 0x201
   23c94:	4298      	cmp	r0, r3
   23c96:	d00f      	beq.n	23cb8 <z_to_nrf_protocol+0x3c>
   23c98:	dc06      	bgt.n	23ca8 <z_to_nrf_protocol+0x2c>
   23c9a:	f240 1311 	movw	r3, #273	; 0x111
   23c9e:	4298      	cmp	r0, r3
   23ca0:	d010      	beq.n	23cc4 <z_to_nrf_protocol+0x48>
		return -EPROTONOSUPPORT;
   23ca2:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   23ca6:	4770      	bx	lr
	switch (proto) {
   23ca8:	f240 2302 	movw	r3, #514	; 0x202
   23cac:	4298      	cmp	r0, r3
   23cae:	d003      	beq.n	23cb8 <z_to_nrf_protocol+0x3c>
   23cb0:	f240 2303 	movw	r3, #515	; 0x203
   23cb4:	4298      	cmp	r0, r3
   23cb6:	d1f4      	bne.n	23ca2 <z_to_nrf_protocol+0x26>
}
   23cb8:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   23cba:	2002      	movs	r0, #2
   23cbc:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   23cbe:	f44f 7082 	mov.w	r0, #260	; 0x104
   23cc2:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   23cc4:	f44f 7087 	mov.w	r0, #270	; 0x10e
   23cc8:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   23cca:	2001      	movs	r0, #1
   23ccc:	e7f4      	b.n	23cb8 <z_to_nrf_protocol+0x3c>

00023cce <nrf91_bsdlib_socket_offload_init>:
}
   23cce:	2000      	movs	r0, #0
   23cd0:	4770      	bx	lr

00023cd2 <nrf91_socket_offload_freeaddrinfo>:
{
   23cd2:	b538      	push	{r3, r4, r5, lr}
   23cd4:	4604      	mov	r4, r0
	while (next != NULL) {
   23cd6:	b904      	cbnz	r4, 23cda <nrf91_socket_offload_freeaddrinfo+0x8>
}
   23cd8:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   23cda:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   23cdc:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   23cde:	f000 fb95 	bl	2440c <k_free>
		k_free(this);
   23ce2:	4620      	mov	r0, r4
   23ce4:	f000 fb92 	bl	2440c <k_free>
		next = next->ai_next;
   23ce8:	462c      	mov	r4, r5
   23cea:	e7f4      	b.n	23cd6 <nrf91_socket_offload_freeaddrinfo+0x4>

00023cec <z_to_nrf_addrinfo_hints>:
{
   23cec:	b538      	push	{r3, r4, r5, lr}
   23cee:	460c      	mov	r4, r1
   23cf0:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   23cf2:	221c      	movs	r2, #28
   23cf4:	2100      	movs	r1, #0
   23cf6:	1d20      	adds	r0, r4, #4
   23cf8:	f000 fdce 	bl	24898 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   23cfc:	2300      	movs	r3, #0
   23cfe:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   23d00:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   23d02:	2b03      	cmp	r3, #3
   23d04:	d003      	beq.n	23d0e <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   23d06:	2b04      	cmp	r3, #4
   23d08:	bf08      	it	eq
   23d0a:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   23d0e:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   23d10:	88a8      	ldrh	r0, [r5, #4]
   23d12:	f7ff ff9d 	bl	23c50 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   23d16:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   23d1a:	d00b      	beq.n	23d34 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   23d1c:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   23d1e:	68e8      	ldr	r0, [r5, #12]
   23d20:	f7ff ffac 	bl	23c7c <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   23d24:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   23d28:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   23d2a:	d003      	beq.n	23d34 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   23d2c:	69a8      	ldr	r0, [r5, #24]
   23d2e:	b108      	cbz	r0, 23d34 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   23d30:	61a0      	str	r0, [r4, #24]
	return 0;
   23d32:	2000      	movs	r0, #0
}
   23d34:	bd38      	pop	{r3, r4, r5, pc}

00023d36 <nrf91_socket_offload_send>:
{
   23d36:	b570      	push	{r4, r5, r6, lr}
   23d38:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   23d3a:	4618      	mov	r0, r3
{
   23d3c:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   23d3e:	f7ff ff7d 	bl	23c3c <z_to_nrf_flags>
   23d42:	462a      	mov	r2, r5
   23d44:	4603      	mov	r3, r0
   23d46:	4620      	mov	r0, r4
}
   23d48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   23d4c:	f7ee be08 	b.w	12960 <nrf_send>

00023d50 <nrf91_socket_offload_recv>:
{
   23d50:	b570      	push	{r4, r5, r6, lr}
   23d52:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   23d54:	4618      	mov	r0, r3
{
   23d56:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   23d58:	f7ff ff70 	bl	23c3c <z_to_nrf_flags>
   23d5c:	462a      	mov	r2, r5
   23d5e:	4603      	mov	r3, r0
   23d60:	4620      	mov	r0, r4
}
   23d62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   23d66:	f7ee be31 	b.w	129cc <nrf_recv>

00023d6a <nrf91_socket_offload_getsockopt>:
{
   23d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23d6e:	461c      	mov	r4, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   23d70:	2300      	movs	r3, #0
{
   23d72:	b086      	sub	sp, #24
   23d74:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   23d78:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   23d7c:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   23d80:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   23d84:	4607      	mov	r7, r0
   23d86:	460d      	mov	r5, r1
   23d88:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   23d8a:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   23d8c:	d00d      	beq.n	23daa <nrf91_socket_offload_getsockopt+0x40>
   23d8e:	dc08      	bgt.n	23da2 <nrf91_socket_offload_getsockopt+0x38>
   23d90:	2901      	cmp	r1, #1
   23d92:	d00a      	beq.n	23daa <nrf91_socket_offload_getsockopt+0x40>
	errno = ENOPROTOOPT;
   23d94:	f7ff fd37 	bl	23806 <__errno>
   23d98:	236d      	movs	r3, #109	; 0x6d
	return retval;
   23d9a:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   23d9e:	6003      	str	r3, [r0, #0]
	return retval;
   23da0:	e029      	b.n	23df6 <nrf91_socket_offload_getsockopt+0x8c>
	switch (z_in_level) {
   23da2:	f2a1 2302 	subw	r3, r1, #514	; 0x202
   23da6:	2b01      	cmp	r3, #1
   23da8:	d8f4      	bhi.n	23d94 <nrf91_socket_offload_getsockopt+0x2a>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   23daa:	aa02      	add	r2, sp, #8
   23dac:	4631      	mov	r1, r6
   23dae:	4628      	mov	r0, r5
   23db0:	f7ed fae0 	bl	11374 <z_to_nrf_optname>
   23db4:	2800      	cmp	r0, #0
   23db6:	dbed      	blt.n	23d94 <nrf91_socket_offload_getsockopt+0x2a>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   23db8:	2d01      	cmp	r5, #1
   23dba:	d120      	bne.n	23dfe <nrf91_socket_offload_getsockopt+0x94>
   23dbc:	2e14      	cmp	r6, #20
   23dbe:	d11e      	bne.n	23dfe <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   23dc0:	2308      	movs	r3, #8
   23dc2:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   23dc4:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   23dc6:	aa03      	add	r2, sp, #12
   23dc8:	9200      	str	r2, [sp, #0]
   23dca:	4638      	mov	r0, r7
   23dcc:	9a02      	ldr	r2, [sp, #8]
   23dce:	4629      	mov	r1, r5
   23dd0:	f7ee fe7c 	bl	12acc <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   23dd4:	4607      	mov	r7, r0
   23dd6:	b970      	cbnz	r0, 23df6 <nrf91_socket_offload_getsockopt+0x8c>
   23dd8:	b16c      	cbz	r4, 23df6 <nrf91_socket_offload_getsockopt+0x8c>
		*optlen = nrf_optlen;
   23dda:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   23ddc:	2d01      	cmp	r5, #1
		*optlen = nrf_optlen;
   23dde:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   23de2:	d108      	bne.n	23df6 <nrf91_socket_offload_getsockopt+0x8c>
			if (optname == SO_ERROR) {
   23de4:	2e04      	cmp	r6, #4
   23de6:	d10c      	bne.n	23e02 <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   23de8:	6820      	ldr	r0, [r4, #0]
   23dea:	f7ed f9b9 	bl	11160 <bsd_os_errno_set>
				*(int *)optval = errno;
   23dee:	f7ff fd0a 	bl	23806 <__errno>
   23df2:	6803      	ldr	r3, [r0, #0]
   23df4:	6023      	str	r3, [r4, #0]
}
   23df6:	4638      	mov	r0, r7
   23df8:	b006      	add	sp, #24
   23dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23dfe:	4623      	mov	r3, r4
   23e00:	e7e1      	b.n	23dc6 <nrf91_socket_offload_getsockopt+0x5c>
			} else if (optname == SO_RCVTIMEO) {
   23e02:	2e14      	cmp	r6, #20
   23e04:	d1f7      	bne.n	23df6 <nrf91_socket_offload_getsockopt+0x8c>
				((struct timeval *)optval)->tv_sec =
   23e06:	9b04      	ldr	r3, [sp, #16]
   23e08:	6023      	str	r3, [r4, #0]
				((struct timeval *)optval)->tv_usec =
   23e0a:	9b05      	ldr	r3, [sp, #20]
   23e0c:	6063      	str	r3, [r4, #4]
				*optlen = sizeof(struct timeval);
   23e0e:	2308      	movs	r3, #8
   23e10:	f8c8 3000 	str.w	r3, [r8]
   23e14:	e7ef      	b.n	23df6 <nrf91_socket_offload_getsockopt+0x8c>

00023e16 <nrf91_socket_offload_poll>:
{
   23e16:	b5f0      	push	{r4, r5, r6, r7, lr}
   23e18:	b091      	sub	sp, #68	; 0x44
   23e1a:	4605      	mov	r5, r0
   23e1c:	460c      	mov	r4, r1
   23e1e:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   23e20:	2100      	movs	r1, #0
   23e22:	2240      	movs	r2, #64	; 0x40
   23e24:	4668      	mov	r0, sp
   23e26:	f000 fd37 	bl	24898 <memset>
	for (int i = 0; i < nfds; i++) {
   23e2a:	2204      	movs	r2, #4
   23e2c:	2100      	movs	r1, #0
   23e2e:	42a1      	cmp	r1, r4
   23e30:	db0c      	blt.n	23e4c <nrf91_socket_offload_poll+0x36>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   23e32:	4632      	mov	r2, r6
   23e34:	4621      	mov	r1, r4
   23e36:	4668      	mov	r0, sp
   23e38:	f7ee fe68 	bl	12b0c <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   23e3c:	2200      	movs	r2, #0
   23e3e:	462b      	mov	r3, r5
		fds[i].revents = 0;
   23e40:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   23e42:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   23e44:	42a2      	cmp	r2, r4
   23e46:	db1b      	blt.n	23e80 <nrf91_socket_offload_poll+0x6a>
}
   23e48:	b011      	add	sp, #68	; 0x44
   23e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   23e4c:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   23e50:	5aa8      	ldrh	r0, [r5, r2]
		tmp[i].handle = fds[i].fd;
   23e52:	f84d 3031 	str.w	r3, [sp, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   23e56:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   23e58:	bf48      	it	mi
   23e5a:	f83d 3002 	ldrhmi.w	r3, [sp, r2]
	for (int i = 0; i < nfds; i++) {
   23e5e:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   23e62:	bf44      	itt	mi
   23e64:	f043 0301 	orrmi.w	r3, r3, #1
   23e68:	f82d 3002 	strhmi.w	r3, [sp, r2]
		if (fds[i].events & POLLOUT) {
   23e6c:	0747      	lsls	r7, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   23e6e:	bf42      	ittt	mi
   23e70:	f83d 3002 	ldrhmi.w	r3, [sp, r2]
   23e74:	f043 0302 	orrmi.w	r3, r3, #2
   23e78:	f82d 3002 	strhmi.w	r3, [sp, r2]
   23e7c:	3208      	adds	r2, #8
   23e7e:	e7d6      	b.n	23e2e <nrf91_socket_offload_poll+0x18>
		if (tmp[i].returned & NRF_POLLIN) {
   23e80:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   23e84:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   23e86:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   23e88:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   23e8a:	bf48      	it	mi
   23e8c:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   23e8e:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   23e90:	bf48      	it	mi
   23e92:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   23e94:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   23e98:	bf44      	itt	mi
   23e9a:	f045 0504 	orrmi.w	r5, r5, #4
   23e9e:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   23ea0:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   23ea2:	bf48      	it	mi
   23ea4:	88dd      	ldrhmi	r5, [r3, #6]
   23ea6:	f103 0308 	add.w	r3, r3, #8
   23eaa:	bf44      	itt	mi
   23eac:	f045 0508 	orrmi.w	r5, r5, #8
   23eb0:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   23eb4:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   23eb6:	bf42      	ittt	mi
   23eb8:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   23ebc:	f045 0520 	orrmi.w	r5, r5, #32
   23ec0:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   23ec4:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   23ec6:	bf42      	ittt	mi
   23ec8:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   23ecc:	f041 0110 	orrmi.w	r1, r1, #16
   23ed0:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   23ed4:	e7b6      	b.n	23e44 <nrf91_socket_offload_poll+0x2e>

00023ed6 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   23ed6:	f7ee bda5 	b.w	12a24 <nrf_listen>

00023eda <nrf91_socket_offload_close>:
	return nrf_close(sd);
   23eda:	f7ee bd17 	b.w	1290c <nrf_close>

00023ede <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   23ede:	2903      	cmp	r1, #3
{
   23ee0:	b508      	push	{r3, lr}
	switch (cmd) {
   23ee2:	d00b      	beq.n	23efc <nrf91_socket_offload_fcntl+0x1e>
   23ee4:	2904      	cmp	r1, #4
   23ee6:	d111      	bne.n	23f0c <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   23ee8:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   23eea:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   23eee:	d10d      	bne.n	23f0c <nrf91_socket_offload_fcntl+0x2e>
}
   23ef0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   23ef4:	1392      	asrs	r2, r2, #14
   23ef6:	2101      	movs	r1, #1
   23ef8:	f7ee be0a 	b.w	12b10 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   23efc:	2200      	movs	r2, #0
   23efe:	2102      	movs	r1, #2
   23f00:	f7ee fe06 	bl	12b10 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   23f04:	0380      	lsls	r0, r0, #14
   23f06:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   23f0a:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   23f0c:	f7ff fc7b 	bl	23806 <__errno>
   23f10:	2316      	movs	r3, #22
   23f12:	6003      	str	r3, [r0, #0]
	return retval;
   23f14:	f04f 30ff 	mov.w	r0, #4294967295
   23f18:	e7f7      	b.n	23f0a <nrf91_socket_offload_fcntl+0x2c>

00023f1a <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   23f1a:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   23f1c:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   23f1e:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   23f20:	4603      	mov	r3, r0
{
   23f22:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   23f24:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23f28:	f101 0210 	add.w	r2, r1, #16
   23f2c:	f102 0410 	add.w	r4, r2, #16
   23f30:	f852 5b04 	ldr.w	r5, [r2], #4
   23f34:	42a2      	cmp	r2, r4
   23f36:	f843 5b04 	str.w	r5, [r3], #4
   23f3a:	d1f9      	bne.n	23f30 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   23f3c:	6a0b      	ldr	r3, [r1, #32]
   23f3e:	7503      	strb	r3, [r0, #20]
}
   23f40:	bd30      	pop	{r4, r5, pc}

00023f42 <nrf91_socket_offload_getaddrinfo>:
{
   23f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23f46:	4614      	mov	r4, r2
   23f48:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   23f4a:	2100      	movs	r1, #0
{
   23f4c:	b092      	sub	sp, #72	; 0x48
   23f4e:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   23f50:	2220      	movs	r2, #32
   23f52:	a802      	add	r0, sp, #8
{
   23f54:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   23f56:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   23f58:	f000 fc9e 	bl	24898 <memset>
	if (hints != NULL) {
   23f5c:	b19c      	cbz	r4, 23f86 <nrf91_socket_offload_getaddrinfo+0x44>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   23f5e:	a902      	add	r1, sp, #8
   23f60:	4620      	mov	r0, r4
   23f62:	f7ff fec3 	bl	23cec <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   23f66:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   23f6a:	f000 80b0 	beq.w	240ce <nrf91_socket_offload_getaddrinfo+0x18c>
		} else if (error == -EAFNOSUPPORT) {
   23f6e:	306a      	adds	r0, #106	; 0x6a
   23f70:	f000 80b0 	beq.w	240d4 <nrf91_socket_offload_getaddrinfo+0x192>
		if (hints->ai_next != NULL) {
   23f74:	69e0      	ldr	r0, [r4, #28]
   23f76:	b120      	cbz	r0, 23f82 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   23f78:	ac0a      	add	r4, sp, #40	; 0x28
   23f7a:	4621      	mov	r1, r4
   23f7c:	f7ff feb6 	bl	23cec <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   23f80:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   23f82:	aa02      	add	r2, sp, #8
   23f84:	e000      	b.n	23f88 <nrf91_socket_offload_getaddrinfo+0x46>
	struct nrf_addrinfo *nrf_hints_ptr = NULL;
   23f86:	4622      	mov	r2, r4
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   23f88:	4631      	mov	r1, r6
   23f8a:	4628      	mov	r0, r5
   23f8c:	ab01      	add	r3, sp, #4
   23f8e:	f7ee fdb9 	bl	12b04 <nrf_getaddrinfo>
	*res = NULL;
   23f92:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   23f94:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   23f96:	f8c8 7000 	str.w	r7, [r8]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   23f9a:	4605      	mov	r5, r0
   23f9c:	2800      	cmp	r0, #0
   23f9e:	d04c      	beq.n	2403a <nrf91_socket_offload_getaddrinfo+0xf8>
		nrf91_socket_offload_freeaddrinfo(*res);
   23fa0:	f8d8 0000 	ldr.w	r0, [r8]
   23fa4:	f7ff fe95 	bl	23cd2 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   23fa8:	2300      	movs	r3, #0
   23faa:	f8c8 3000 	str.w	r3, [r8]
   23fae:	e046      	b.n	2403e <nrf91_socket_offload_getaddrinfo+0xfc>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   23fb0:	2020      	movs	r0, #32
   23fb2:	f7fc fac7 	bl	20544 <k_malloc>
		if (next_z_res == NULL) {
   23fb6:	4604      	mov	r4, r0
   23fb8:	2800      	cmp	r0, #0
   23fba:	f000 8083 	beq.w	240c4 <nrf91_socket_offload_getaddrinfo+0x182>
	family = nrf_to_z_family(nrf_in->ai_family);
   23fbe:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   23fc0:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   23fc2:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   23fc4:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   23fc8:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   23fca:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   23fcc:	d03e      	beq.n	2404c <nrf91_socket_offload_getaddrinfo+0x10a>
   23fce:	dc09      	bgt.n	23fe4 <nrf91_socket_offload_getaddrinfo+0xa2>
   23fd0:	2a01      	cmp	r2, #1
   23fd2:	d00d      	beq.n	23ff0 <nrf91_socket_offload_getaddrinfo+0xae>
   23fd4:	2a02      	cmp	r2, #2
   23fd6:	d03d      	beq.n	24054 <nrf91_socket_offload_getaddrinfo+0x112>
			k_free(next_z_res);
   23fd8:	4620      	mov	r0, r4
   23fda:	f000 fa17 	bl	2440c <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   23fde:	f06f 0508 	mvn.w	r5, #8
   23fe2:	e7dd      	b.n	23fa0 <nrf91_socket_offload_getaddrinfo+0x5e>
	switch (nrf_family) {
   23fe4:	2a0a      	cmp	r2, #10
   23fe6:	d033      	beq.n	24050 <nrf91_socket_offload_getaddrinfo+0x10e>
   23fe8:	2a66      	cmp	r2, #102	; 0x66
   23fea:	d1f5      	bne.n	23fd8 <nrf91_socket_offload_getaddrinfo+0x96>
		return AF_LTE;
   23fec:	4613      	mov	r3, r2
   23fee:	e000      	b.n	23ff2 <nrf91_socket_offload_getaddrinfo+0xb0>
		return AF_LOCAL;
   23ff0:	2367      	movs	r3, #103	; 0x67
	z_out->ai_family = family;
   23ff2:	6063      	str	r3, [r4, #4]
	switch (proto) {
   23ff4:	68f3      	ldr	r3, [r6, #12]
   23ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   23ffa:	d04c      	beq.n	24096 <nrf91_socket_offload_getaddrinfo+0x154>
   23ffc:	dc2c      	bgt.n	24058 <nrf91_socket_offload_getaddrinfo+0x116>
   23ffe:	2b01      	cmp	r3, #1
   24000:	d04e      	beq.n	240a0 <nrf91_socket_offload_getaddrinfo+0x15e>
   24002:	2b02      	cmp	r3, #2
   24004:	d04a      	beq.n	2409c <nrf91_socket_offload_getaddrinfo+0x15a>
   24006:	2b00      	cmp	r3, #0
   24008:	d12e      	bne.n	24068 <nrf91_socket_offload_getaddrinfo+0x126>
	if (nrf_in->ai_family == NRF_AF_INET) {
   2400a:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2400c:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   2400e:	d149      	bne.n	240a4 <nrf91_socket_offload_getaddrinfo+0x162>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   24010:	2008      	movs	r0, #8
   24012:	f7fc fa97 	bl	20544 <k_malloc>
   24016:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   24018:	2800      	cmp	r0, #0
   2401a:	d050      	beq.n	240be <nrf91_socket_offload_getaddrinfo+0x17c>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   2401c:	2308      	movs	r3, #8
   2401e:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   24020:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   24022:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   24024:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   24026:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   24028:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2402a:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   2402c:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   2402e:	2f00      	cmp	r7, #0
   24030:	d14b      	bne.n	240ca <nrf91_socket_offload_getaddrinfo+0x188>
			*res = next_z_res;
   24032:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   24036:	4627      	mov	r7, r4
   24038:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   2403a:	2e00      	cmp	r6, #0
   2403c:	d1b8      	bne.n	23fb0 <nrf91_socket_offload_getaddrinfo+0x6e>
	nrf_freeaddrinfo(nrf_res);
   2403e:	9801      	ldr	r0, [sp, #4]
   24040:	f7ee fd62 	bl	12b08 <nrf_freeaddrinfo>
}
   24044:	4628      	mov	r0, r5
   24046:	b012      	add	sp, #72	; 0x48
   24048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return AF_PACKET;
   2404c:	2303      	movs	r3, #3
   2404e:	e7d0      	b.n	23ff2 <nrf91_socket_offload_getaddrinfo+0xb0>
		return AF_INET6;
   24050:	2302      	movs	r3, #2
   24052:	e7ce      	b.n	23ff2 <nrf91_socket_offload_getaddrinfo+0xb0>
		return AF_INET;
   24054:	2301      	movs	r3, #1
   24056:	e7cc      	b.n	23ff2 <nrf91_socket_offload_getaddrinfo+0xb0>
	switch (proto) {
   24058:	f240 2101 	movw	r1, #513	; 0x201
   2405c:	428b      	cmp	r3, r1
   2405e:	d0d4      	beq.n	2400a <nrf91_socket_offload_getaddrinfo+0xc8>
   24060:	dc0d      	bgt.n	2407e <nrf91_socket_offload_getaddrinfo+0x13c>
   24062:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   24066:	d013      	beq.n	24090 <nrf91_socket_offload_getaddrinfo+0x14e>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   24068:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   2406c:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   2406e:	2300      	movs	r3, #0
   24070:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   24072:	4620      	mov	r0, r4
   24074:	f000 f9ca 	bl	2440c <k_free>
			retval = DNS_EAI_SOCKTYPE;
   24078:	f06f 0506 	mvn.w	r5, #6
   2407c:	e790      	b.n	23fa0 <nrf91_socket_offload_getaddrinfo+0x5e>
	switch (proto) {
   2407e:	f240 2102 	movw	r1, #514	; 0x202
   24082:	428b      	cmp	r3, r1
   24084:	d0c1      	beq.n	2400a <nrf91_socket_offload_getaddrinfo+0xc8>
   24086:	f240 2103 	movw	r1, #515	; 0x203
   2408a:	428b      	cmp	r3, r1
   2408c:	d0bd      	beq.n	2400a <nrf91_socket_offload_getaddrinfo+0xc8>
   2408e:	e7eb      	b.n	24068 <nrf91_socket_offload_getaddrinfo+0x126>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   24090:	f240 1311 	movw	r3, #273	; 0x111
   24094:	e7b9      	b.n	2400a <nrf91_socket_offload_getaddrinfo+0xc8>
   24096:	f44f 7381 	mov.w	r3, #258	; 0x102
   2409a:	e7b6      	b.n	2400a <nrf91_socket_offload_getaddrinfo+0xc8>
   2409c:	2311      	movs	r3, #17
   2409e:	e7b4      	b.n	2400a <nrf91_socket_offload_getaddrinfo+0xc8>
   240a0:	2306      	movs	r3, #6
   240a2:	e7b2      	b.n	2400a <nrf91_socket_offload_getaddrinfo+0xc8>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   240a4:	2a0a      	cmp	r2, #10
   240a6:	d1e4      	bne.n	24072 <nrf91_socket_offload_getaddrinfo+0x130>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   240a8:	2018      	movs	r0, #24
   240aa:	f7fc fa4b 	bl	20544 <k_malloc>
   240ae:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   240b0:	b128      	cbz	r0, 240be <nrf91_socket_offload_getaddrinfo+0x17c>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   240b2:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   240b4:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   240b6:	6123      	str	r3, [r4, #16]
		nrf_to_z_ipv6(z_out->ai_addr,
   240b8:	f7ff ff2f 	bl	23f1a <nrf_to_z_ipv6>
   240bc:	e7b7      	b.n	2402e <nrf91_socket_offload_getaddrinfo+0xec>
			k_free(next_z_res);
   240be:	4620      	mov	r0, r4
   240c0:	f000 f9a4 	bl	2440c <k_free>
			retval = DNS_EAI_MEMORY;
   240c4:	f06f 0509 	mvn.w	r5, #9
   240c8:	e76a      	b.n	23fa0 <nrf91_socket_offload_getaddrinfo+0x5e>
			latest_z_res->ai_next = next_z_res;
   240ca:	61fc      	str	r4, [r7, #28]
   240cc:	e7b3      	b.n	24036 <nrf91_socket_offload_getaddrinfo+0xf4>
			return DNS_EAI_SOCKTYPE;
   240ce:	f06f 0506 	mvn.w	r5, #6
   240d2:	e7b7      	b.n	24044 <nrf91_socket_offload_getaddrinfo+0x102>
			return DNS_EAI_ADDRFAMILY;
   240d4:	f06f 0508 	mvn.w	r5, #8
   240d8:	e7b4      	b.n	24044 <nrf91_socket_offload_getaddrinfo+0x102>

000240da <z_to_nrf_ipv6>:
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   240da:	2224      	movs	r2, #36	; 0x24
{
   240dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   240de:	700a      	strb	r2, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   240e0:	8842      	ldrh	r2, [r0, #2]
{
   240e2:	4604      	mov	r4, r0
	nrf_out->sin6_port = ptr->sin6_port;
   240e4:	810a      	strh	r2, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   240e6:	220a      	movs	r2, #10
{
   240e8:	460b      	mov	r3, r1
	nrf_out->sin6_family = NRF_AF_INET6;
   240ea:	604a      	str	r2, [r1, #4]
   240ec:	f101 0610 	add.w	r6, r1, #16
   240f0:	1d02      	adds	r2, r0, #4
   240f2:	f100 0714 	add.w	r7, r0, #20
   240f6:	4635      	mov	r5, r6
   240f8:	6810      	ldr	r0, [r2, #0]
   240fa:	6851      	ldr	r1, [r2, #4]
   240fc:	3208      	adds	r2, #8
   240fe:	c503      	stmia	r5!, {r0, r1}
   24100:	42ba      	cmp	r2, r7
   24102:	462e      	mov	r6, r5
   24104:	d1f7      	bne.n	240f6 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   24106:	7d22      	ldrb	r2, [r4, #20]
   24108:	621a      	str	r2, [r3, #32]
}
   2410a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002410c <nrf91_socket_offload_sendto>:
{
   2410c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24110:	b08d      	sub	sp, #52	; 0x34
   24112:	9c14      	ldr	r4, [sp, #80]	; 0x50
   24114:	4605      	mov	r5, r0
   24116:	460e      	mov	r6, r1
   24118:	4617      	mov	r7, r2
   2411a:	4698      	mov	r8, r3
	if (to == NULL) {
   2411c:	b96c      	cbnz	r4, 2413a <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2411e:	4618      	mov	r0, r3
   24120:	f7ff fd8c 	bl	23c3c <z_to_nrf_flags>
   24124:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   24128:	4603      	mov	r3, r0
   2412a:	463a      	mov	r2, r7
   2412c:	4631      	mov	r1, r6
   2412e:	4628      	mov	r0, r5
   24130:	f7ee fbfa 	bl	12928 <nrf_sendto>
}
   24134:	b00d      	add	sp, #52	; 0x34
   24136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   2413a:	8823      	ldrh	r3, [r4, #0]
   2413c:	2b01      	cmp	r3, #1
   2413e:	d110      	bne.n	24162 <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   24140:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   24142:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   24144:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   24148:	2302      	movs	r3, #2
   2414a:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2414c:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2414e:	4640      	mov	r0, r8
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   24150:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   24152:	f88d 100c 	strb.w	r1, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   24156:	f7ff fd71 	bl	23c3c <z_to_nrf_flags>
   2415a:	ab03      	add	r3, sp, #12
   2415c:	9101      	str	r1, [sp, #4]
   2415e:	9300      	str	r3, [sp, #0]
   24160:	e7e2      	b.n	24128 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   24162:	2b02      	cmp	r3, #2
   24164:	d10c      	bne.n	24180 <nrf91_socket_offload_sendto+0x74>
		z_to_nrf_ipv6(to, &ipv6);
   24166:	f10d 090c 	add.w	r9, sp, #12
   2416a:	4649      	mov	r1, r9
   2416c:	4620      	mov	r0, r4
   2416e:	f7ff ffb4 	bl	240da <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   24172:	4640      	mov	r0, r8
   24174:	f7ff fd62 	bl	23c3c <z_to_nrf_flags>
   24178:	2324      	movs	r3, #36	; 0x24
   2417a:	e9cd 9300 	strd	r9, r3, [sp]
   2417e:	e7d3      	b.n	24128 <nrf91_socket_offload_sendto+0x1c>
	errno = ENOTSUP;
   24180:	f7ff fb41 	bl	23806 <__errno>
   24184:	2386      	movs	r3, #134	; 0x86
   24186:	6003      	str	r3, [r0, #0]
	return retval;
   24188:	f04f 30ff 	mov.w	r0, #4294967295
   2418c:	e7d2      	b.n	24134 <nrf91_socket_offload_sendto+0x28>

0002418e <nrf91_socket_offload_recvfrom>:
{
   2418e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24192:	4680      	mov	r8, r0
   24194:	b08d      	sub	sp, #52	; 0x34
   24196:	4618      	mov	r0, r3
   24198:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   2419c:	4691      	mov	r9, r2
   2419e:	f7ff fd4d 	bl	23c3c <z_to_nrf_flags>
   241a2:	4603      	mov	r3, r0
	if (from == NULL) {
   241a4:	b954      	cbnz	r4, 241bc <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   241a6:	e9cd 4400 	strd	r4, r4, [sp]
   241aa:	464a      	mov	r2, r9
   241ac:	4640      	mov	r0, r8
   241ae:	f7ee fbf1 	bl	12994 <nrf_recvfrom>
   241b2:	4605      	mov	r5, r0
}
   241b4:	4628      	mov	r0, r5
   241b6:	b00d      	add	sp, #52	; 0x34
   241b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   241bc:	2224      	movs	r2, #36	; 0x24
   241be:	ad0c      	add	r5, sp, #48	; 0x30
   241c0:	f845 2d28 	str.w	r2, [r5, #-40]!
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   241c4:	af03      	add	r7, sp, #12
   241c6:	9501      	str	r5, [sp, #4]
   241c8:	9700      	str	r7, [sp, #0]
   241ca:	464a      	mov	r2, r9
   241cc:	4640      	mov	r0, r8
   241ce:	f7ee fbe1 	bl	12994 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   241d2:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   241d4:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   241d6:	2b02      	cmp	r3, #2
   241d8:	d109      	bne.n	241ee <nrf91_socket_offload_recvfrom+0x60>
	ptr->sin_port = nrf_in->sin_port;
   241da:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   241de:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   241e0:	2301      	movs	r3, #1
   241e2:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   241e4:	9b06      	ldr	r3, [sp, #24]
   241e6:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   241e8:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   241ea:	6033      	str	r3, [r6, #0]
	return retval;
   241ec:	e7e2      	b.n	241b4 <nrf91_socket_offload_recvfrom+0x26>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   241ee:	2b0a      	cmp	r3, #10
   241f0:	d1e0      	bne.n	241b4 <nrf91_socket_offload_recvfrom+0x26>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   241f2:	4639      	mov	r1, r7
   241f4:	4620      	mov	r0, r4
   241f6:	f7ff fe90 	bl	23f1a <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   241fa:	2318      	movs	r3, #24
   241fc:	e7f5      	b.n	241ea <nrf91_socket_offload_recvfrom+0x5c>

000241fe <nrf91_socket_offload_connect>:
{
   241fe:	b530      	push	{r4, r5, lr}
	if (addr->sa_family == AF_INET) {
   24200:	880c      	ldrh	r4, [r1, #0]
{
   24202:	b08b      	sub	sp, #44	; 0x2c
	if (addr->sa_family == AF_INET) {
   24204:	2c01      	cmp	r4, #1
{
   24206:	4605      	mov	r5, r0
   24208:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   2420a:	d10e      	bne.n	2422a <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   2420c:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2420e:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   24210:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   24214:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   24216:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   24218:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2421a:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2421e:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   24220:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   24222:	f7ee fbed 	bl	12a00 <nrf_connect>
}
   24226:	b00b      	add	sp, #44	; 0x2c
   24228:	bd30      	pop	{r4, r5, pc}
	} else if (addr->sa_family == AF_INET6) {
   2422a:	2c02      	cmp	r4, #2
   2422c:	d107      	bne.n	2423e <nrf91_socket_offload_connect+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   2422e:	a901      	add	r1, sp, #4
   24230:	4618      	mov	r0, r3
   24232:	f7ff ff52 	bl	240da <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   24236:	2224      	movs	r2, #36	; 0x24
   24238:	a901      	add	r1, sp, #4
   2423a:	4628      	mov	r0, r5
   2423c:	e7f1      	b.n	24222 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   2423e:	f7ee fbdf 	bl	12a00 <nrf_connect>
		if (retval < 0) {
   24242:	2800      	cmp	r0, #0
   24244:	daef      	bge.n	24226 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   24246:	f7ff fade 	bl	23806 <__errno>
   2424a:	2386      	movs	r3, #134	; 0x86
   2424c:	6003      	str	r3, [r0, #0]
   2424e:	f04f 30ff 	mov.w	r0, #4294967295
   24252:	e7e8      	b.n	24226 <nrf91_socket_offload_connect+0x28>

00024254 <nrf91_socket_offload_accept>:
{
   24254:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   24256:	2708      	movs	r7, #8
{
   24258:	b085      	sub	sp, #20
   2425a:	4616      	mov	r6, r2
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   2425c:	aa04      	add	r2, sp, #16
{
   2425e:	460c      	mov	r4, r1
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   24260:	f842 7d0c 	str.w	r7, [r2, #-12]!
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   24264:	eb0d 0107 	add.w	r1, sp, r7
   24268:	f7ee fbec 	bl	12a44 <nrf_accept>
	if (retval < 0) {
   2426c:	1e05      	subs	r5, r0, #0
   2426e:	db1a      	blt.n	242a6 <nrf91_socket_offload_accept+0x52>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   24270:	9b03      	ldr	r3, [sp, #12]
   24272:	2b02      	cmp	r3, #2
   24274:	d10a      	bne.n	2428c <nrf91_socket_offload_accept+0x38>
	ptr->sin_port = nrf_in->sin_port;
   24276:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   2427a:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   2427c:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   2427e:	2301      	movs	r3, #1
   24280:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   24282:	9b05      	ldr	r3, [sp, #20]
   24284:	6063      	str	r3, [r4, #4]
}
   24286:	4628      	mov	r0, r5
   24288:	b005      	add	sp, #20
   2428a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   2428c:	2b0a      	cmp	r3, #10
   2428e:	d106      	bne.n	2429e <nrf91_socket_offload_accept+0x4a>
		*addrlen = sizeof(struct sockaddr_in6);
   24290:	2318      	movs	r3, #24
		nrf_to_z_ipv6(addr, (const struct nrf_sockaddr_in6 *)&nrf_addr);
   24292:	a902      	add	r1, sp, #8
		*addrlen = sizeof(struct sockaddr_in6);
   24294:	6033      	str	r3, [r6, #0]
		nrf_to_z_ipv6(addr, (const struct nrf_sockaddr_in6 *)&nrf_addr);
   24296:	4620      	mov	r0, r4
   24298:	f7ff fe3f 	bl	23f1a <nrf_to_z_ipv6>
   2429c:	e7f3      	b.n	24286 <nrf91_socket_offload_accept+0x32>
	errno = ENOTSUP;
   2429e:	f7ff fab2 	bl	23806 <__errno>
   242a2:	2386      	movs	r3, #134	; 0x86
   242a4:	6003      	str	r3, [r0, #0]
		return -1;
   242a6:	f04f 35ff 	mov.w	r5, #4294967295
   242aa:	e7ec      	b.n	24286 <nrf91_socket_offload_accept+0x32>

000242ac <nrf91_socket_offload_socket>:
{
   242ac:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   242ae:	b280      	uxth	r0, r0
   242b0:	f7ff fcce 	bl	23c50 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   242b4:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   242b8:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   242ba:	d106      	bne.n	242ca <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   242bc:	f7ff faa3 	bl	23806 <__errno>
   242c0:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   242c2:	6003      	str	r3, [r0, #0]
}
   242c4:	f04f 30ff 	mov.w	r0, #4294967295
   242c8:	bd10      	pop	{r4, pc}
	switch (socktype) {
   242ca:	2903      	cmp	r1, #3
   242cc:	d003      	beq.n	242d6 <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   242ce:	2904      	cmp	r1, #4
   242d0:	bf08      	it	eq
   242d2:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   242d6:	4610      	mov	r0, r2
   242d8:	f7ff fcd0 	bl	23c7c <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   242dc:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   242e0:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   242e2:	d103      	bne.n	242ec <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   242e4:	f7ff fa8f 	bl	23806 <__errno>
   242e8:	237b      	movs	r3, #123	; 0x7b
   242ea:	e7ea      	b.n	242c2 <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   242ec:	4620      	mov	r0, r4
}
   242ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   242f2:	f7ee baf9 	b.w	128e8 <nrf_socket>

000242f6 <nrf91_socket_offload_setsockopt>:
{
   242f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   242fa:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   242fe:	b086      	sub	sp, #24
   24300:	4680      	mov	r8, r0
   24302:	460c      	mov	r4, r1
   24304:	4617      	mov	r7, r2
   24306:	461d      	mov	r5, r3
   24308:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   2430a:	d00d      	beq.n	24328 <nrf91_socket_offload_setsockopt+0x32>
   2430c:	dc08      	bgt.n	24320 <nrf91_socket_offload_setsockopt+0x2a>
   2430e:	2901      	cmp	r1, #1
   24310:	d00a      	beq.n	24328 <nrf91_socket_offload_setsockopt+0x32>
	errno = ENOPROTOOPT;
   24312:	f7ff fa78 	bl	23806 <__errno>
   24316:	236d      	movs	r3, #109	; 0x6d
   24318:	6003      	str	r3, [r0, #0]
   2431a:	f04f 30ff 	mov.w	r0, #4294967295
   2431e:	e01b      	b.n	24358 <nrf91_socket_offload_setsockopt+0x62>
	switch (z_in_level) {
   24320:	f2a1 2302 	subw	r3, r1, #514	; 0x202
   24324:	2b01      	cmp	r3, #1
   24326:	d8f4      	bhi.n	24312 <nrf91_socket_offload_setsockopt+0x1c>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   24328:	aa03      	add	r2, sp, #12
   2432a:	4639      	mov	r1, r7
   2432c:	4620      	mov	r0, r4
   2432e:	f7ed f821 	bl	11374 <z_to_nrf_optname>
   24332:	2800      	cmp	r0, #0
   24334:	dbed      	blt.n	24312 <nrf91_socket_offload_setsockopt+0x1c>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   24336:	2c01      	cmp	r4, #1
   24338:	d107      	bne.n	2434a <nrf91_socket_offload_setsockopt+0x54>
   2433a:	2f14      	cmp	r7, #20
   2433c:	d105      	bne.n	2434a <nrf91_socket_offload_setsockopt+0x54>
		nrf_optlen = sizeof(struct nrf_timeval);
   2433e:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   24340:	682b      	ldr	r3, [r5, #0]
   24342:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   24344:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   24346:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   24348:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2434a:	9600      	str	r6, [sp, #0]
   2434c:	462b      	mov	r3, r5
   2434e:	9a03      	ldr	r2, [sp, #12]
   24350:	4621      	mov	r1, r4
   24352:	4640      	mov	r0, r8
   24354:	f7ee fb9e 	bl	12a94 <nrf_setsockopt>
}
   24358:	b006      	add	sp, #24
   2435a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002435e <nrf91_socket_offload_bind>:
{
   2435e:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   24360:	880a      	ldrh	r2, [r1, #0]
{
   24362:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   24364:	2a01      	cmp	r2, #1
{
   24366:	4604      	mov	r4, r0
   24368:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   2436a:	d10e      	bne.n	2438a <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   2436c:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2436e:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   24370:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   24374:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   24376:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   24378:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2437a:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2437e:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   24380:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   24382:	f7ee fb75 	bl	12a70 <nrf_bind>
}
   24386:	b00a      	add	sp, #40	; 0x28
   24388:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2438a:	2a02      	cmp	r2, #2
   2438c:	d107      	bne.n	2439e <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   2438e:	a901      	add	r1, sp, #4
   24390:	4618      	mov	r0, r3
   24392:	f7ff fea2 	bl	240da <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   24396:	2224      	movs	r2, #36	; 0x24
   24398:	a901      	add	r1, sp, #4
   2439a:	4620      	mov	r0, r4
   2439c:	e7f1      	b.n	24382 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   2439e:	f7ff fa32 	bl	23806 <__errno>
   243a2:	2386      	movs	r3, #134	; 0x86
   243a4:	6003      	str	r3, [r0, #0]
   243a6:	f04f 30ff 	mov.w	r0, #4294967295
   243aa:	e7ec      	b.n	24386 <nrf91_socket_offload_bind+0x28>

000243ac <z_arch_system_halt>:
	__asm__ volatile(
   243ac:	f04f 0220 	mov.w	r2, #32
   243b0:	f3ef 8311 	mrs	r3, BASEPRI
   243b4:	f382 8811 	msr	BASEPRI, r2
   243b8:	f3bf 8f6f 	isb	sy
   243bc:	e7fe      	b.n	243bc <z_arch_system_halt+0x10>

000243be <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   243be:	f7ff b9cb 	b.w	23758 <z_clock_idle_exit>

000243c2 <k_mem_slab_init>:
{
   243c2:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   243c4:	2400      	movs	r4, #0
	slab->block_size = block_size;
   243c6:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
   243ca:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
   243ce:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   243d0:	42a3      	cmp	r3, r4
   243d2:	d102      	bne.n	243da <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
   243d4:	e9c0 0000 	strd	r0, r0, [r0]
}
   243d8:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   243da:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   243dc:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   243de:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   243e0:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   243e2:	4411      	add	r1, r2
   243e4:	e7f4      	b.n	243d0 <k_mem_slab_init+0xe>

000243e6 <k_mem_pool_malloc>:
{
   243e6:	b507      	push	{r0, r1, r2, lr}
   243e8:	2204      	movs	r2, #4
   243ea:	188a      	adds	r2, r1, r2
   243ec:	d204      	bcs.n	243f8 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   243ee:	2300      	movs	r3, #0
   243f0:	4669      	mov	r1, sp
   243f2:	f7fc f82f 	bl	20454 <k_mem_pool_alloc>
   243f6:	b118      	cbz	r0, 24400 <k_mem_pool_malloc+0x1a>
		return NULL;
   243f8:	2000      	movs	r0, #0
}
   243fa:	b003      	add	sp, #12
   243fc:	f85d fb04 	ldr.w	pc, [sp], #4
   24400:	e9dd 3200 	ldrd	r3, r2, [sp]
   24404:	601a      	str	r2, [r3, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   24406:	9800      	ldr	r0, [sp, #0]
   24408:	3004      	adds	r0, #4
   2440a:	e7f6      	b.n	243fa <k_mem_pool_malloc+0x14>

0002440c <k_free>:
	if (ptr != NULL) {
   2440c:	b110      	cbz	r0, 24414 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   2440e:	3804      	subs	r0, #4
   24410:	f7fc b86c 	b.w	204ec <k_mem_pool_free_id>
}
   24414:	4770      	bx	lr

00024416 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   24416:	7b43      	ldrb	r3, [r0, #13]
   24418:	06db      	lsls	r3, r3, #27
   2441a:	bf03      	ittte	eq
   2441c:	6980      	ldreq	r0, [r0, #24]
   2441e:	fab0 f080 	clzeq	r0, r0
   24422:	0940      	lsreq	r0, r0, #5
   24424:	2000      	movne	r0, #0
}
   24426:	4770      	bx	lr

00024428 <z_find_first_thread_to_unpend>:
{
   24428:	b510      	push	{r4, lr}
   2442a:	f04f 0320 	mov.w	r3, #32
   2442e:	f3ef 8411 	mrs	r4, BASEPRI
   24432:	f383 8811 	msr	BASEPRI, r3
   24436:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   2443a:	f000 f865 	bl	24508 <z_priq_dumb_best>
	__asm__ volatile(
   2443e:	f384 8811 	msr	BASEPRI, r4
   24442:	f3bf 8f6f 	isb	sy
}
   24446:	bd10      	pop	{r4, pc}

00024448 <z_unpend_thread_no_timeout>:
{
   24448:	b538      	push	{r3, r4, r5, lr}
   2444a:	4604      	mov	r4, r0
	__asm__ volatile(
   2444c:	f04f 0320 	mov.w	r3, #32
   24450:	f3ef 8511 	mrs	r5, BASEPRI
   24454:	f383 8811 	msr	BASEPRI, r3
   24458:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2445c:	4601      	mov	r1, r0
   2445e:	6880      	ldr	r0, [r0, #8]
   24460:	f7fc f8de 	bl	20620 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   24464:	7b63      	ldrb	r3, [r4, #13]
   24466:	f023 0302 	bic.w	r3, r3, #2
   2446a:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   2446c:	f385 8811 	msr	BASEPRI, r5
   24470:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   24474:	2300      	movs	r3, #0
   24476:	60a3      	str	r3, [r4, #8]
}
   24478:	bd38      	pop	{r3, r4, r5, pc}

0002447a <z_reschedule>:
{
   2447a:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
   2447c:	b939      	cbnz	r1, 2448e <z_reschedule+0x14>
   2447e:	f7fc f867 	bl	20550 <resched.part.15>
	if (resched(key.key)) {
   24482:	b120      	cbz	r0, 2448e <z_reschedule+0x14>
}
   24484:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   24488:	4608      	mov	r0, r1
   2448a:	f7eb bb8b 	b.w	fba4 <z_arch_swap>
   2448e:	f381 8811 	msr	BASEPRI, r1
   24492:	f3bf 8f6f 	isb	sy
   24496:	bd08      	pop	{r3, pc}

00024498 <z_reschedule_irqlock>:
{
   24498:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
   2449a:	4602      	mov	r2, r0
   2449c:	b938      	cbnz	r0, 244ae <z_reschedule_irqlock+0x16>
   2449e:	f7fc f857 	bl	20550 <resched.part.15>
	if (resched(key)) {
   244a2:	b120      	cbz	r0, 244ae <z_reschedule_irqlock+0x16>
}
   244a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   244a8:	4610      	mov	r0, r2
   244aa:	f7eb bb7b 	b.w	fba4 <z_arch_swap>
   244ae:	f382 8811 	msr	BASEPRI, r2
   244b2:	f3bf 8f6f 	isb	sy
   244b6:	bd08      	pop	{r3, pc}

000244b8 <z_reschedule_unlocked>:
	__asm__ volatile(
   244b8:	f04f 0320 	mov.w	r3, #32
   244bc:	f3ef 8011 	mrs	r0, BASEPRI
   244c0:	f383 8811 	msr	BASEPRI, r3
   244c4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
   244c8:	f7ff bfe6 	b.w	24498 <z_reschedule_irqlock>

000244cc <z_unpend_thread>:
{
   244cc:	b538      	push	{r3, r4, r5, lr}
   244ce:	4604      	mov	r4, r0
   244d0:	f04f 0320 	mov.w	r3, #32
   244d4:	f3ef 8511 	mrs	r5, BASEPRI
   244d8:	f383 8811 	msr	BASEPRI, r3
   244dc:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   244e0:	4601      	mov	r1, r0
   244e2:	6880      	ldr	r0, [r0, #8]
   244e4:	f7fc f89c 	bl	20620 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   244e8:	7b63      	ldrb	r3, [r4, #13]
   244ea:	f023 0302 	bic.w	r3, r3, #2
   244ee:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   244f0:	f385 8811 	msr	BASEPRI, r5
   244f4:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   244f8:	2300      	movs	r3, #0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   244fa:	f104 0018 	add.w	r0, r4, #24
   244fe:	60a3      	str	r3, [r4, #8]
}
   24500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   24504:	f000 b8d7 	b.w	246b6 <z_abort_timeout>

00024508 <z_priq_dumb_best>:
	return list->head == list;
   24508:	6803      	ldr	r3, [r0, #0]
}
   2450a:	4298      	cmp	r0, r3
   2450c:	bf14      	ite	ne
   2450e:	4618      	movne	r0, r3
   24510:	2000      	moveq	r0, #0
   24512:	4770      	bx	lr

00024514 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   24514:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   24518:	b570      	push	{r4, r5, r6, lr}
   2451a:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   2451c:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   24520:	b1cb      	cbz	r3, 24556 <z_thread_timeout+0x42>
	__asm__ volatile(
   24522:	f04f 0320 	mov.w	r3, #32
   24526:	f3ef 8611 	mrs	r6, BASEPRI
   2452a:	f383 8811 	msr	BASEPRI, r3
   2452e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   24532:	4629      	mov	r1, r5
   24534:	f850 0c10 	ldr.w	r0, [r0, #-16]
   24538:	f7fc f872 	bl	20620 <z_priq_dumb_remove>
   2453c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   24540:	f023 0302 	bic.w	r3, r3, #2
   24544:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   24548:	f386 8811 	msr	BASEPRI, r6
   2454c:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   24550:	2300      	movs	r3, #0
   24552:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   24556:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   2455a:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2455c:	f023 0314 	bic.w	r3, r3, #20
   24560:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   24564:	f7ff ff57 	bl	24416 <z_is_thread_ready>
   24568:	b120      	cbz	r0, 24574 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   2456a:	4628      	mov	r0, r5
}
   2456c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   24570:	f7fc b8a6 	b.w	206c0 <z_add_thread_to_ready_q>
   24574:	bd70      	pop	{r4, r5, r6, pc}

00024576 <z_unpend_first_thread>:
{
   24576:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   24578:	f04f 0320 	mov.w	r3, #32
   2457c:	f3ef 8211 	mrs	r2, BASEPRI
   24580:	f383 8811 	msr	BASEPRI, r3
   24584:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   24588:	f7ff ffbe 	bl	24508 <z_priq_dumb_best>
   2458c:	4604      	mov	r4, r0
	__asm__ volatile(
   2458e:	f382 8811 	msr	BASEPRI, r2
   24592:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   24596:	b1c8      	cbz	r0, 245cc <z_unpend_first_thread+0x56>
	__asm__ volatile(
   24598:	f04f 0320 	mov.w	r3, #32
   2459c:	f3ef 8511 	mrs	r5, BASEPRI
   245a0:	f383 8811 	msr	BASEPRI, r3
   245a4:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   245a8:	4601      	mov	r1, r0
   245aa:	6880      	ldr	r0, [r0, #8]
   245ac:	f7fc f838 	bl	20620 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   245b0:	7b63      	ldrb	r3, [r4, #13]
   245b2:	f023 0302 	bic.w	r3, r3, #2
   245b6:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   245b8:	f385 8811 	msr	BASEPRI, r5
   245bc:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   245c0:	2300      	movs	r3, #0
   245c2:	f104 0018 	add.w	r0, r4, #24
   245c6:	60a3      	str	r3, [r4, #8]
   245c8:	f000 f875 	bl	246b6 <z_abort_timeout>
}
   245cc:	4620      	mov	r0, r4
   245ce:	bd38      	pop	{r3, r4, r5, pc}

000245d0 <z_unpend_all>:
{
   245d0:	b570      	push	{r4, r5, r6, lr}
   245d2:	4606      	mov	r6, r0
	int need_sched = 0;
   245d4:	2500      	movs	r5, #0
   245d6:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   245d8:	42a6      	cmp	r6, r4
   245da:	d000      	beq.n	245de <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   245dc:	b90c      	cbnz	r4, 245e2 <z_unpend_all+0x12>
}
   245de:	4628      	mov	r0, r5
   245e0:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   245e2:	4620      	mov	r0, r4
   245e4:	f7ff ff72 	bl	244cc <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   245e8:	4620      	mov	r0, r4
   245ea:	f7ff ff14 	bl	24416 <z_is_thread_ready>
		need_sched = 1;
   245ee:	2501      	movs	r5, #1
   245f0:	2800      	cmp	r0, #0
   245f2:	d0f0      	beq.n	245d6 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   245f4:	4620      	mov	r0, r4
   245f6:	f7fc f863 	bl	206c0 <z_add_thread_to_ready_q>
   245fa:	e7ec      	b.n	245d6 <z_unpend_all+0x6>

000245fc <z_impl_k_sleep>:
{
   245fc:	b538      	push	{r3, r4, r5, lr}
   245fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   24602:	f240 34e7 	movw	r4, #999	; 0x3e7
   24606:	2500      	movs	r5, #0
   24608:	fbc1 4500 	smlal	r4, r5, r1, r0
   2460c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24610:	4620      	mov	r0, r4
   24612:	2300      	movs	r3, #0
   24614:	4629      	mov	r1, r5
   24616:	f7e7 ffbf 	bl	c598 <__aeabi_ldivmod>
	if (ticks == 0) {
   2461a:	4604      	mov	r4, r0
   2461c:	b948      	cbnz	r0, 24632 <z_impl_k_sleep+0x36>
	z_impl_k_yield();
   2461e:	f7fc f9db 	bl	209d8 <z_impl_k_yield>
}

static inline u64_t __ticks_to_ms(s64_t ticks)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	return (u64_t)ticks * MSEC_PER_SEC /
   24622:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24626:	fb84 2302 	smull	r2, r3, r4, r2
   2462a:	0bd0      	lsrs	r0, r2, #15
}
   2462c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   24630:	bd38      	pop	{r3, r4, r5, pc}
   24632:	f7fc f997 	bl	20964 <z_tick_sleep.part.19>
   24636:	4604      	mov	r4, r0
   24638:	e7f3      	b.n	24622 <z_impl_k_sleep+0x26>

0002463a <z_impl_k_sem_init>:
	sys_dlist_init(&sem->poll_events);
   2463a:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2463e:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   24642:	e9c0 0000 	strd	r0, r0, [r0]
   24646:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2464a:	4770      	bx	lr

0002464c <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2464c:	7b43      	ldrb	r3, [r0, #13]
   2464e:	06db      	lsls	r3, r3, #27
   24650:	bf03      	ittte	eq
   24652:	6980      	ldreq	r0, [r0, #24]
   24654:	fab0 f080 	clzeq	r0, r0
   24658:	0940      	lsreq	r0, r0, #5
   2465a:	2000      	movne	r0, #0
}
   2465c:	4770      	bx	lr

0002465e <z_impl_k_thread_name_set>:
}
   2465e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   24662:	4770      	bx	lr

00024664 <k_thread_name_get>:
}
   24664:	2000      	movs	r0, #0
   24666:	4770      	bx	lr

00024668 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   24668:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   2466a:	b510      	push	{r4, lr}
   2466c:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   2466e:	b103      	cbz	r3, 24672 <z_thread_single_abort+0xa>
		thread->fn_abort();
   24670:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   24672:	4620      	mov	r0, r4
   24674:	f7ff ffea 	bl	2464c <z_is_thread_ready>
   24678:	b138      	cbz	r0, 2468a <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   2467a:	4620      	mov	r0, r4
   2467c:	f7fc f8d2 	bl	20824 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   24680:	7b63      	ldrb	r3, [r4, #13]
   24682:	f043 0308 	orr.w	r3, r3, #8
   24686:	7363      	strb	r3, [r4, #13]
}
   24688:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   2468a:	7b63      	ldrb	r3, [r4, #13]
   2468c:	079b      	lsls	r3, r3, #30
   2468e:	d502      	bpl.n	24696 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   24690:	4620      	mov	r0, r4
   24692:	f7ff fed9 	bl	24448 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   24696:	69a3      	ldr	r3, [r4, #24]
   24698:	2b00      	cmp	r3, #0
   2469a:	d0f1      	beq.n	24680 <z_thread_single_abort+0x18>
   2469c:	f104 0018 	add.w	r0, r4, #24
   246a0:	f000 f809 	bl	246b6 <z_abort_timeout>
   246a4:	e7ec      	b.n	24680 <z_thread_single_abort+0x18>

000246a6 <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   246a6:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
   246a8:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   246aa:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   246ac:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   246ae:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   246b0:	e9c0 3306 	strd	r3, r3, [r0, #24]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   246b4:	4770      	bx	lr

000246b6 <z_abort_timeout>:
{
   246b6:	b510      	push	{r4, lr}
	__asm__ volatile(
   246b8:	f04f 0220 	mov.w	r2, #32
   246bc:	f3ef 8411 	mrs	r4, BASEPRI
   246c0:	f382 8811 	msr	BASEPRI, r2
   246c4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   246c8:	6803      	ldr	r3, [r0, #0]
   246ca:	b13b      	cbz	r3, 246dc <z_abort_timeout+0x26>
			remove_timeout(to);
   246cc:	f7fc fafc 	bl	20cc8 <remove_timeout>
			ret = 0;
   246d0:	2000      	movs	r0, #0
	__asm__ volatile(
   246d2:	f384 8811 	msr	BASEPRI, r4
   246d6:	f3bf 8f6f 	isb	sy
}
   246da:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   246dc:	f06f 0015 	mvn.w	r0, #21
   246e0:	e7f7      	b.n	246d2 <z_abort_timeout+0x1c>

000246e2 <z_get_next_timeout_expiry>:
{
   246e2:	b510      	push	{r4, lr}
	__asm__ volatile(
   246e4:	f04f 0320 	mov.w	r3, #32
   246e8:	f3ef 8411 	mrs	r4, BASEPRI
   246ec:	f383 8811 	msr	BASEPRI, r3
   246f0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   246f4:	f7fc fafe 	bl	20cf4 <next_timeout>
	__asm__ volatile(
   246f8:	f384 8811 	msr	BASEPRI, r4
   246fc:	f3bf 8f6f 	isb	sy
}
   24700:	bd10      	pop	{r4, pc}

00024702 <z_set_timeout_expiry>:
{
   24702:	b570      	push	{r4, r5, r6, lr}
   24704:	4604      	mov	r4, r0
   24706:	460e      	mov	r6, r1
	__asm__ volatile(
   24708:	f04f 0320 	mov.w	r3, #32
   2470c:	f3ef 8511 	mrs	r5, BASEPRI
   24710:	f383 8811 	msr	BASEPRI, r3
   24714:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   24718:	f7fc faec 	bl	20cf4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2471c:	2801      	cmp	r0, #1
   2471e:	dd05      	ble.n	2472c <z_set_timeout_expiry+0x2a>
   24720:	42a0      	cmp	r0, r4
   24722:	dd03      	ble.n	2472c <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   24724:	4631      	mov	r1, r6
   24726:	4620      	mov	r0, r4
   24728:	f7eb f902 	bl	f930 <z_clock_set_timeout>
	__asm__ volatile(
   2472c:	f385 8811 	msr	BASEPRI, r5
   24730:	f3bf 8f6f 	isb	sy
}
   24734:	bd70      	pop	{r4, r5, r6, pc}

00024736 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   24736:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   24738:	f7fc fb92 	bl	20e60 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   2473c:	bd08      	pop	{r3, pc}

0002473e <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   2473e:	b510      	push	{r4, lr}
	return __ticks_to_ms(z_tick_get());
   24740:	f7fc fb8e 	bl	20e60 <z_tick_get>
   24744:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   24748:	fba0 2304 	umull	r2, r3, r0, r4
   2474c:	fb04 3301 	mla	r3, r4, r1, r3
   24750:	0bd0      	lsrs	r0, r2, #15
}
   24752:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   24756:	0bd9      	lsrs	r1, r3, #15
   24758:	bd10      	pop	{r4, pc}

0002475a <k_timer_init>:
	timer->status = 0U;
   2475a:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2475c:	e9c0 1206 	strd	r1, r2, [r0, #24]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   24760:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   24764:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   24766:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   2476a:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   2476e:	6283      	str	r3, [r0, #40]	; 0x28
}
   24770:	4770      	bx	lr

00024772 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   24772:	b510      	push	{r4, lr}
   24774:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   24776:	f7ff ff9e 	bl	246b6 <z_abort_timeout>

	if (inactive) {
   2477a:	bb00      	cbnz	r0, 247be <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
   2477c:	69e3      	ldr	r3, [r4, #28]
   2477e:	b10b      	cbz	r3, 24784 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   24780:	4620      	mov	r0, r4
   24782:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   24784:	f104 0010 	add.w	r0, r4, #16
   24788:	2100      	movs	r1, #0
   2478a:	f7ff fe4d 	bl	24428 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   2478e:	4604      	mov	r4, r0
   24790:	b1a8      	cbz	r0, 247be <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
   24792:	f7ff fe59 	bl	24448 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   24796:	7b63      	ldrb	r3, [r4, #13]
   24798:	06db      	lsls	r3, r3, #27
   2479a:	d104      	bne.n	247a6 <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
   2479c:	69a3      	ldr	r3, [r4, #24]
   2479e:	b913      	cbnz	r3, 247a6 <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
   247a0:	4620      	mov	r0, r4
   247a2:	f7fb ff8d 	bl	206c0 <z_add_thread_to_ready_q>
	__asm__ volatile(
   247a6:	f04f 0320 	mov.w	r3, #32
   247aa:	f3ef 8011 	mrs	r0, BASEPRI
   247ae:	f383 8811 	msr	BASEPRI, r3
   247b2:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
   247b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(z_arch_irq_lock());
   247ba:	f7ff be6d 	b.w	24498 <z_reschedule_irqlock>
   247be:	bd10      	pop	{r4, pc}

000247c0 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   247c0:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   247c2:	6884      	ldr	r4, [r0, #8]
{
   247c4:	4605      	mov	r5, r0
   247c6:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   247c8:	b19c      	cbz	r4, 247f2 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   247ca:	68a3      	ldr	r3, [r4, #8]
   247cc:	b95b      	cbnz	r3, 247e6 <signal_poll_event+0x26>
	int retcode = 0;
   247ce:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   247d0:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   247d2:	2300      	movs	r3, #0
   247d4:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   247d6:	68eb      	ldr	r3, [r5, #12]
   247d8:	f3c3 3204 	ubfx	r2, r3, #12, #5
   247dc:	4316      	orrs	r6, r2
   247de:	f366 3310 	bfi	r3, r6, #12, #5
   247e2:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   247e4:	e004      	b.n	247f0 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   247e6:	4798      	blx	r3
		poller->is_polling = false;
   247e8:	2300      	movs	r3, #0
		if (retcode < 0) {
   247ea:	2800      	cmp	r0, #0
		poller->is_polling = false;
   247ec:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   247ee:	daf0      	bge.n	247d2 <signal_poll_event+0x12>
}
   247f0:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   247f2:	4620      	mov	r0, r4
   247f4:	e7ed      	b.n	247d2 <signal_poll_event+0x12>

000247f6 <z_handle_obj_poll_events>:
	return list->head == list;
   247f6:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   247f8:	4298      	cmp	r0, r3
   247fa:	d00a      	beq.n	24812 <z_handle_obj_poll_events+0x1c>
	node->prev->next = node->next;
   247fc:	e9d3 0200 	ldrd	r0, r2, [r3]
   24800:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   24802:	6818      	ldr	r0, [r3, #0]
   24804:	6042      	str	r2, [r0, #4]
	node->next = NULL;
   24806:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   24808:	4618      	mov	r0, r3
	node->prev = NULL;
   2480a:	e9c3 2200 	strd	r2, r2, [r3]
   2480e:	f7ff bfd7 	b.w	247c0 <signal_poll_event>
	}
}
   24812:	4770      	bx	lr

00024814 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   24814:	4770      	bx	lr

00024816 <atoi>:
   24816:	220a      	movs	r2, #10
   24818:	2100      	movs	r1, #0
   2481a:	f7fd bb79 	b.w	21f10 <strtol>

0002481e <__locale_ctype_ptr_l>:
   2481e:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   24822:	4770      	bx	lr

00024824 <__ascii_mbtowc>:
   24824:	b082      	sub	sp, #8
   24826:	b901      	cbnz	r1, 2482a <__ascii_mbtowc+0x6>
   24828:	a901      	add	r1, sp, #4
   2482a:	b142      	cbz	r2, 2483e <__ascii_mbtowc+0x1a>
   2482c:	b14b      	cbz	r3, 24842 <__ascii_mbtowc+0x1e>
   2482e:	7813      	ldrb	r3, [r2, #0]
   24830:	600b      	str	r3, [r1, #0]
   24832:	7812      	ldrb	r2, [r2, #0]
   24834:	1c10      	adds	r0, r2, #0
   24836:	bf18      	it	ne
   24838:	2001      	movne	r0, #1
   2483a:	b002      	add	sp, #8
   2483c:	4770      	bx	lr
   2483e:	4610      	mov	r0, r2
   24840:	e7fb      	b.n	2483a <__ascii_mbtowc+0x16>
   24842:	f06f 0001 	mvn.w	r0, #1
   24846:	e7f8      	b.n	2483a <__ascii_mbtowc+0x16>

00024848 <memchr>:
   24848:	b2c9      	uxtb	r1, r1
   2484a:	4402      	add	r2, r0
   2484c:	b510      	push	{r4, lr}
   2484e:	4290      	cmp	r0, r2
   24850:	4603      	mov	r3, r0
   24852:	d101      	bne.n	24858 <memchr+0x10>
   24854:	2300      	movs	r3, #0
   24856:	e003      	b.n	24860 <memchr+0x18>
   24858:	781c      	ldrb	r4, [r3, #0]
   2485a:	3001      	adds	r0, #1
   2485c:	428c      	cmp	r4, r1
   2485e:	d1f6      	bne.n	2484e <memchr+0x6>
   24860:	4618      	mov	r0, r3
   24862:	bd10      	pop	{r4, pc}

00024864 <memcmp>:
   24864:	b530      	push	{r4, r5, lr}
   24866:	2400      	movs	r4, #0
   24868:	42a2      	cmp	r2, r4
   2486a:	d101      	bne.n	24870 <memcmp+0xc>
   2486c:	2000      	movs	r0, #0
   2486e:	e007      	b.n	24880 <memcmp+0x1c>
   24870:	5d03      	ldrb	r3, [r0, r4]
   24872:	3401      	adds	r4, #1
   24874:	190d      	adds	r5, r1, r4
   24876:	f815 5c01 	ldrb.w	r5, [r5, #-1]
   2487a:	42ab      	cmp	r3, r5
   2487c:	d0f4      	beq.n	24868 <memcmp+0x4>
   2487e:	1b58      	subs	r0, r3, r5
   24880:	bd30      	pop	{r4, r5, pc}

00024882 <memcpy>:
   24882:	1e43      	subs	r3, r0, #1
   24884:	440a      	add	r2, r1
   24886:	b510      	push	{r4, lr}
   24888:	4291      	cmp	r1, r2
   2488a:	d100      	bne.n	2488e <memcpy+0xc>
   2488c:	bd10      	pop	{r4, pc}
   2488e:	f811 4b01 	ldrb.w	r4, [r1], #1
   24892:	f803 4f01 	strb.w	r4, [r3, #1]!
   24896:	e7f7      	b.n	24888 <memcpy+0x6>

00024898 <memset>:
   24898:	4402      	add	r2, r0
   2489a:	4603      	mov	r3, r0
   2489c:	4293      	cmp	r3, r2
   2489e:	d100      	bne.n	248a2 <memset+0xa>
   248a0:	4770      	bx	lr
   248a2:	f803 1b01 	strb.w	r1, [r3], #1
   248a6:	e7f9      	b.n	2489c <memset+0x4>

000248a8 <__sfputc_r>:
   248a8:	6893      	ldr	r3, [r2, #8]
   248aa:	3b01      	subs	r3, #1
   248ac:	2b00      	cmp	r3, #0
   248ae:	6093      	str	r3, [r2, #8]
   248b0:	b410      	push	{r4}
   248b2:	da08      	bge.n	248c6 <__sfputc_r+0x1e>
   248b4:	6994      	ldr	r4, [r2, #24]
   248b6:	42a3      	cmp	r3, r4
   248b8:	db01      	blt.n	248be <__sfputc_r+0x16>
   248ba:	290a      	cmp	r1, #10
   248bc:	d103      	bne.n	248c6 <__sfputc_r+0x1e>
   248be:	f85d 4b04 	ldr.w	r4, [sp], #4
   248c2:	f7fd bb3b 	b.w	21f3c <__swbuf_r>
   248c6:	6813      	ldr	r3, [r2, #0]
   248c8:	1c58      	adds	r0, r3, #1
   248ca:	6010      	str	r0, [r2, #0]
   248cc:	4608      	mov	r0, r1
   248ce:	7019      	strb	r1, [r3, #0]
   248d0:	f85d 4b04 	ldr.w	r4, [sp], #4
   248d4:	4770      	bx	lr

000248d6 <__sfputs_r>:
   248d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   248d8:	4606      	mov	r6, r0
   248da:	460f      	mov	r7, r1
   248dc:	4614      	mov	r4, r2
   248de:	18d5      	adds	r5, r2, r3
   248e0:	42ac      	cmp	r4, r5
   248e2:	d101      	bne.n	248e8 <__sfputs_r+0x12>
   248e4:	2000      	movs	r0, #0
   248e6:	e007      	b.n	248f8 <__sfputs_r+0x22>
   248e8:	463a      	mov	r2, r7
   248ea:	f814 1b01 	ldrb.w	r1, [r4], #1
   248ee:	4630      	mov	r0, r6
   248f0:	f7ff ffda 	bl	248a8 <__sfputc_r>
   248f4:	1c43      	adds	r3, r0, #1
   248f6:	d1f3      	bne.n	248e0 <__sfputs_r+0xa>
   248f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000248fa <__cvt>:
   248fa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   248fe:	ec55 4b10 	vmov	r4, r5, d0
   24902:	2d00      	cmp	r5, #0
   24904:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   24906:	460e      	mov	r6, r1
   24908:	4691      	mov	r9, r2
   2490a:	4619      	mov	r1, r3
   2490c:	bfb8      	it	lt
   2490e:	4622      	movlt	r2, r4
   24910:	462b      	mov	r3, r5
   24912:	f027 0720 	bic.w	r7, r7, #32
   24916:	bfb6      	itet	lt
   24918:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
   2491c:	2300      	movge	r3, #0
   2491e:	4614      	movlt	r4, r2
   24920:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   24924:	bfbc      	itt	lt
   24926:	461d      	movlt	r5, r3
   24928:	232d      	movlt	r3, #45	; 0x2d
   2492a:	2f46      	cmp	r7, #70	; 0x46
   2492c:	700b      	strb	r3, [r1, #0]
   2492e:	d004      	beq.n	2493a <__cvt+0x40>
   24930:	2f45      	cmp	r7, #69	; 0x45
   24932:	d100      	bne.n	24936 <__cvt+0x3c>
   24934:	3601      	adds	r6, #1
   24936:	2102      	movs	r1, #2
   24938:	e000      	b.n	2493c <__cvt+0x42>
   2493a:	2103      	movs	r1, #3
   2493c:	ab03      	add	r3, sp, #12
   2493e:	4632      	mov	r2, r6
   24940:	9301      	str	r3, [sp, #4]
   24942:	ab02      	add	r3, sp, #8
   24944:	ec45 4b10 	vmov	d0, r4, r5
   24948:	9300      	str	r3, [sp, #0]
   2494a:	4653      	mov	r3, sl
   2494c:	f7e9 f9d8 	bl	dd00 <_dtoa_r>
   24950:	2f47      	cmp	r7, #71	; 0x47
   24952:	4680      	mov	r8, r0
   24954:	d102      	bne.n	2495c <__cvt+0x62>
   24956:	f019 0f01 	tst.w	r9, #1
   2495a:	d026      	beq.n	249aa <__cvt+0xb0>
   2495c:	2f46      	cmp	r7, #70	; 0x46
   2495e:	eb08 0906 	add.w	r9, r8, r6
   24962:	d111      	bne.n	24988 <__cvt+0x8e>
   24964:	f898 3000 	ldrb.w	r3, [r8]
   24968:	2b30      	cmp	r3, #48	; 0x30
   2496a:	d10a      	bne.n	24982 <__cvt+0x88>
   2496c:	2200      	movs	r2, #0
   2496e:	2300      	movs	r3, #0
   24970:	4620      	mov	r0, r4
   24972:	4629      	mov	r1, r5
   24974:	f7e9 f942 	bl	dbfc <__aeabi_dcmpeq>
   24978:	b918      	cbnz	r0, 24982 <__cvt+0x88>
   2497a:	f1c6 0601 	rsb	r6, r6, #1
   2497e:	f8ca 6000 	str.w	r6, [sl]
   24982:	f8da 3000 	ldr.w	r3, [sl]
   24986:	4499      	add	r9, r3
   24988:	2200      	movs	r2, #0
   2498a:	2300      	movs	r3, #0
   2498c:	4620      	mov	r0, r4
   2498e:	4629      	mov	r1, r5
   24990:	f7e9 f934 	bl	dbfc <__aeabi_dcmpeq>
   24994:	b938      	cbnz	r0, 249a6 <__cvt+0xac>
   24996:	2230      	movs	r2, #48	; 0x30
   24998:	9b03      	ldr	r3, [sp, #12]
   2499a:	454b      	cmp	r3, r9
   2499c:	d205      	bcs.n	249aa <__cvt+0xb0>
   2499e:	1c59      	adds	r1, r3, #1
   249a0:	9103      	str	r1, [sp, #12]
   249a2:	701a      	strb	r2, [r3, #0]
   249a4:	e7f8      	b.n	24998 <__cvt+0x9e>
   249a6:	f8cd 900c 	str.w	r9, [sp, #12]
   249aa:	9b03      	ldr	r3, [sp, #12]
   249ac:	4640      	mov	r0, r8
   249ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   249b0:	eba3 0308 	sub.w	r3, r3, r8
   249b4:	6013      	str	r3, [r2, #0]
   249b6:	b004      	add	sp, #16
   249b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000249bc <__exponent>:
   249bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   249be:	2900      	cmp	r1, #0
   249c0:	4604      	mov	r4, r0
   249c2:	bfba      	itte	lt
   249c4:	4249      	neglt	r1, r1
   249c6:	232d      	movlt	r3, #45	; 0x2d
   249c8:	232b      	movge	r3, #43	; 0x2b
   249ca:	f804 2b02 	strb.w	r2, [r4], #2
   249ce:	2909      	cmp	r1, #9
   249d0:	7043      	strb	r3, [r0, #1]
   249d2:	dd20      	ble.n	24a16 <__exponent+0x5a>
   249d4:	f10d 0307 	add.w	r3, sp, #7
   249d8:	260a      	movs	r6, #10
   249da:	461f      	mov	r7, r3
   249dc:	1e5a      	subs	r2, r3, #1
   249de:	fb91 f5f6 	sdiv	r5, r1, r6
   249e2:	fb06 1115 	mls	r1, r6, r5, r1
   249e6:	2d09      	cmp	r5, #9
   249e8:	f101 0130 	add.w	r1, r1, #48	; 0x30
   249ec:	f803 1c01 	strb.w	r1, [r3, #-1]
   249f0:	4629      	mov	r1, r5
   249f2:	dc09      	bgt.n	24a08 <__exponent+0x4c>
   249f4:	3130      	adds	r1, #48	; 0x30
   249f6:	3b02      	subs	r3, #2
   249f8:	f802 1c01 	strb.w	r1, [r2, #-1]
   249fc:	42bb      	cmp	r3, r7
   249fe:	4622      	mov	r2, r4
   24a00:	d304      	bcc.n	24a0c <__exponent+0x50>
   24a02:	1a10      	subs	r0, r2, r0
   24a04:	b003      	add	sp, #12
   24a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24a08:	4613      	mov	r3, r2
   24a0a:	e7e7      	b.n	249dc <__exponent+0x20>
   24a0c:	f813 2b01 	ldrb.w	r2, [r3], #1
   24a10:	f804 2b01 	strb.w	r2, [r4], #1
   24a14:	e7f2      	b.n	249fc <__exponent+0x40>
   24a16:	2330      	movs	r3, #48	; 0x30
   24a18:	1d02      	adds	r2, r0, #4
   24a1a:	4419      	add	r1, r3
   24a1c:	7083      	strb	r3, [r0, #2]
   24a1e:	70c1      	strb	r1, [r0, #3]
   24a20:	e7ef      	b.n	24a02 <__exponent+0x46>

00024a22 <_printf_common>:
   24a22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24a26:	4691      	mov	r9, r2
   24a28:	461f      	mov	r7, r3
   24a2a:	688a      	ldr	r2, [r1, #8]
   24a2c:	4606      	mov	r6, r0
   24a2e:	690b      	ldr	r3, [r1, #16]
   24a30:	460c      	mov	r4, r1
   24a32:	f8dd 8020 	ldr.w	r8, [sp, #32]
   24a36:	4293      	cmp	r3, r2
   24a38:	bfb8      	it	lt
   24a3a:	4613      	movlt	r3, r2
   24a3c:	f8c9 3000 	str.w	r3, [r9]
   24a40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   24a44:	b112      	cbz	r2, 24a4c <_printf_common+0x2a>
   24a46:	3301      	adds	r3, #1
   24a48:	f8c9 3000 	str.w	r3, [r9]
   24a4c:	6823      	ldr	r3, [r4, #0]
   24a4e:	0699      	lsls	r1, r3, #26
   24a50:	bf42      	ittt	mi
   24a52:	f8d9 3000 	ldrmi.w	r3, [r9]
   24a56:	3302      	addmi	r3, #2
   24a58:	f8c9 3000 	strmi.w	r3, [r9]
   24a5c:	6825      	ldr	r5, [r4, #0]
   24a5e:	f015 0506 	ands.w	r5, r5, #6
   24a62:	d107      	bne.n	24a74 <_printf_common+0x52>
   24a64:	f104 0a19 	add.w	sl, r4, #25
   24a68:	68e3      	ldr	r3, [r4, #12]
   24a6a:	f8d9 2000 	ldr.w	r2, [r9]
   24a6e:	1a9b      	subs	r3, r3, r2
   24a70:	42ab      	cmp	r3, r5
   24a72:	dc2b      	bgt.n	24acc <_printf_common+0xaa>
   24a74:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   24a78:	6822      	ldr	r2, [r4, #0]
   24a7a:	3300      	adds	r3, #0
   24a7c:	bf18      	it	ne
   24a7e:	2301      	movne	r3, #1
   24a80:	0692      	lsls	r2, r2, #26
   24a82:	d430      	bmi.n	24ae6 <_printf_common+0xc4>
   24a84:	f104 0243 	add.w	r2, r4, #67	; 0x43
   24a88:	4639      	mov	r1, r7
   24a8a:	4630      	mov	r0, r6
   24a8c:	47c0      	blx	r8
   24a8e:	3001      	adds	r0, #1
   24a90:	d023      	beq.n	24ada <_printf_common+0xb8>
   24a92:	6823      	ldr	r3, [r4, #0]
   24a94:	341a      	adds	r4, #26
   24a96:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   24a9a:	f003 0306 	and.w	r3, r3, #6
   24a9e:	f8d9 2000 	ldr.w	r2, [r9]
   24aa2:	f04f 0900 	mov.w	r9, #0
   24aa6:	2b04      	cmp	r3, #4
   24aa8:	f854 3c12 	ldr.w	r3, [r4, #-18]
   24aac:	bf08      	it	eq
   24aae:	1aad      	subeq	r5, r5, r2
   24ab0:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   24ab4:	bf14      	ite	ne
   24ab6:	2500      	movne	r5, #0
   24ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   24abc:	4293      	cmp	r3, r2
   24abe:	bfc4      	itt	gt
   24ac0:	1a9b      	subgt	r3, r3, r2
   24ac2:	18ed      	addgt	r5, r5, r3
   24ac4:	454d      	cmp	r5, r9
   24ac6:	d11a      	bne.n	24afe <_printf_common+0xdc>
   24ac8:	2000      	movs	r0, #0
   24aca:	e008      	b.n	24ade <_printf_common+0xbc>
   24acc:	2301      	movs	r3, #1
   24ace:	4652      	mov	r2, sl
   24ad0:	4639      	mov	r1, r7
   24ad2:	4630      	mov	r0, r6
   24ad4:	47c0      	blx	r8
   24ad6:	3001      	adds	r0, #1
   24ad8:	d103      	bne.n	24ae2 <_printf_common+0xc0>
   24ada:	f04f 30ff 	mov.w	r0, #4294967295
   24ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24ae2:	3501      	adds	r5, #1
   24ae4:	e7c0      	b.n	24a68 <_printf_common+0x46>
   24ae6:	18e1      	adds	r1, r4, r3
   24ae8:	1c5a      	adds	r2, r3, #1
   24aea:	2030      	movs	r0, #48	; 0x30
   24aec:	3302      	adds	r3, #2
   24aee:	4422      	add	r2, r4
   24af0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   24af4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   24af8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   24afc:	e7c2      	b.n	24a84 <_printf_common+0x62>
   24afe:	2301      	movs	r3, #1
   24b00:	4622      	mov	r2, r4
   24b02:	4639      	mov	r1, r7
   24b04:	4630      	mov	r0, r6
   24b06:	47c0      	blx	r8
   24b08:	3001      	adds	r0, #1
   24b0a:	d0e6      	beq.n	24ada <_printf_common+0xb8>
   24b0c:	f109 0901 	add.w	r9, r9, #1
   24b10:	e7d8      	b.n	24ac4 <_printf_common+0xa2>

00024b12 <strchr>:
   24b12:	b2c9      	uxtb	r1, r1
   24b14:	4603      	mov	r3, r0
   24b16:	f810 2b01 	ldrb.w	r2, [r0], #1
   24b1a:	b11a      	cbz	r2, 24b24 <strchr+0x12>
   24b1c:	428a      	cmp	r2, r1
   24b1e:	d1f9      	bne.n	24b14 <strchr+0x2>
   24b20:	4618      	mov	r0, r3
   24b22:	4770      	bx	lr
   24b24:	2900      	cmp	r1, #0
   24b26:	bf18      	it	ne
   24b28:	2300      	movne	r3, #0
   24b2a:	e7f9      	b.n	24b20 <strchr+0xe>

00024b2c <strncmp>:
   24b2c:	b510      	push	{r4, lr}
   24b2e:	b16a      	cbz	r2, 24b4c <strncmp+0x20>
   24b30:	3901      	subs	r1, #1
   24b32:	1884      	adds	r4, r0, r2
   24b34:	f810 3b01 	ldrb.w	r3, [r0], #1
   24b38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   24b3c:	4293      	cmp	r3, r2
   24b3e:	d103      	bne.n	24b48 <strncmp+0x1c>
   24b40:	42a0      	cmp	r0, r4
   24b42:	d001      	beq.n	24b48 <strncmp+0x1c>
   24b44:	2b00      	cmp	r3, #0
   24b46:	d1f5      	bne.n	24b34 <strncmp+0x8>
   24b48:	1a98      	subs	r0, r3, r2
   24b4a:	bd10      	pop	{r4, pc}
   24b4c:	4610      	mov	r0, r2
   24b4e:	e7fc      	b.n	24b4a <strncmp+0x1e>

00024b50 <strncpy>:
   24b50:	b570      	push	{r4, r5, r6, lr}
   24b52:	3901      	subs	r1, #1
   24b54:	4604      	mov	r4, r0
   24b56:	b902      	cbnz	r2, 24b5a <strncpy+0xa>
   24b58:	bd70      	pop	{r4, r5, r6, pc}
   24b5a:	4623      	mov	r3, r4
   24b5c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   24b60:	1e56      	subs	r6, r2, #1
   24b62:	f803 5b01 	strb.w	r5, [r3], #1
   24b66:	b92d      	cbnz	r5, 24b74 <strncpy+0x24>
   24b68:	4414      	add	r4, r2
   24b6a:	42a3      	cmp	r3, r4
   24b6c:	d0f4      	beq.n	24b58 <strncpy+0x8>
   24b6e:	f803 5b01 	strb.w	r5, [r3], #1
   24b72:	e7fa      	b.n	24b6a <strncpy+0x1a>
   24b74:	461c      	mov	r4, r3
   24b76:	4632      	mov	r2, r6
   24b78:	e7ed      	b.n	24b56 <strncpy+0x6>

00024b7a <strstr>:
   24b7a:	b5f0      	push	{r4, r5, r6, r7, lr}
   24b7c:	7803      	ldrb	r3, [r0, #0]
   24b7e:	b17b      	cbz	r3, 24ba0 <strstr+0x26>
   24b80:	4604      	mov	r4, r0
   24b82:	7823      	ldrb	r3, [r4, #0]
   24b84:	4620      	mov	r0, r4
   24b86:	1c66      	adds	r6, r4, #1
   24b88:	b17b      	cbz	r3, 24baa <strstr+0x30>
   24b8a:	1e4a      	subs	r2, r1, #1
   24b8c:	1e63      	subs	r3, r4, #1
   24b8e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   24b92:	b14d      	cbz	r5, 24ba8 <strstr+0x2e>
   24b94:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   24b98:	4634      	mov	r4, r6
   24b9a:	42af      	cmp	r7, r5
   24b9c:	d0f7      	beq.n	24b8e <strstr+0x14>
   24b9e:	e7f0      	b.n	24b82 <strstr+0x8>
   24ba0:	780b      	ldrb	r3, [r1, #0]
   24ba2:	2b00      	cmp	r3, #0
   24ba4:	bf18      	it	ne
   24ba6:	2000      	movne	r0, #0
   24ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24baa:	4618      	mov	r0, r3
   24bac:	e7fc      	b.n	24ba8 <strstr+0x2e>

00024bae <_strtol_l.isra.0>:
   24bae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24bb2:	4680      	mov	r8, r0
   24bb4:	4689      	mov	r9, r1
   24bb6:	4692      	mov	sl, r2
   24bb8:	461e      	mov	r6, r3
   24bba:	460f      	mov	r7, r1
   24bbc:	463d      	mov	r5, r7
   24bbe:	9808      	ldr	r0, [sp, #32]
   24bc0:	f815 4b01 	ldrb.w	r4, [r5], #1
   24bc4:	f7ff fe2b 	bl	2481e <__locale_ctype_ptr_l>
   24bc8:	4420      	add	r0, r4
   24bca:	7843      	ldrb	r3, [r0, #1]
   24bcc:	f013 0308 	ands.w	r3, r3, #8
   24bd0:	d133      	bne.n	24c3a <_strtol_l.isra.0+0x8c>
   24bd2:	2c2d      	cmp	r4, #45	; 0x2d
   24bd4:	d133      	bne.n	24c3e <_strtol_l.isra.0+0x90>
   24bd6:	1cbd      	adds	r5, r7, #2
   24bd8:	787c      	ldrb	r4, [r7, #1]
   24bda:	2201      	movs	r2, #1
   24bdc:	2e00      	cmp	r6, #0
   24bde:	d05e      	beq.n	24c9e <_strtol_l.isra.0+0xf0>
   24be0:	2e10      	cmp	r6, #16
   24be2:	d109      	bne.n	24bf8 <_strtol_l.isra.0+0x4a>
   24be4:	2c30      	cmp	r4, #48	; 0x30
   24be6:	d107      	bne.n	24bf8 <_strtol_l.isra.0+0x4a>
   24be8:	782b      	ldrb	r3, [r5, #0]
   24bea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   24bee:	2b58      	cmp	r3, #88	; 0x58
   24bf0:	d150      	bne.n	24c94 <_strtol_l.isra.0+0xe6>
   24bf2:	786c      	ldrb	r4, [r5, #1]
   24bf4:	2610      	movs	r6, #16
   24bf6:	3502      	adds	r5, #2
   24bf8:	2a00      	cmp	r2, #0
   24bfa:	f04f 0700 	mov.w	r7, #0
   24bfe:	bf14      	ite	ne
   24c00:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
   24c04:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
   24c08:	4638      	mov	r0, r7
   24c0a:	fbb1 fcf6 	udiv	ip, r1, r6
   24c0e:	fb06 1e1c 	mls	lr, r6, ip, r1
   24c12:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   24c16:	2b09      	cmp	r3, #9
   24c18:	d817      	bhi.n	24c4a <_strtol_l.isra.0+0x9c>
   24c1a:	461c      	mov	r4, r3
   24c1c:	42a6      	cmp	r6, r4
   24c1e:	dd23      	ble.n	24c68 <_strtol_l.isra.0+0xba>
   24c20:	1c7b      	adds	r3, r7, #1
   24c22:	d007      	beq.n	24c34 <_strtol_l.isra.0+0x86>
   24c24:	4584      	cmp	ip, r0
   24c26:	d31c      	bcc.n	24c62 <_strtol_l.isra.0+0xb4>
   24c28:	d101      	bne.n	24c2e <_strtol_l.isra.0+0x80>
   24c2a:	45a6      	cmp	lr, r4
   24c2c:	db19      	blt.n	24c62 <_strtol_l.isra.0+0xb4>
   24c2e:	fb00 4006 	mla	r0, r0, r6, r4
   24c32:	2701      	movs	r7, #1
   24c34:	f815 4b01 	ldrb.w	r4, [r5], #1
   24c38:	e7eb      	b.n	24c12 <_strtol_l.isra.0+0x64>
   24c3a:	462f      	mov	r7, r5
   24c3c:	e7be      	b.n	24bbc <_strtol_l.isra.0+0xe>
   24c3e:	2c2b      	cmp	r4, #43	; 0x2b
   24c40:	461a      	mov	r2, r3
   24c42:	bf04      	itt	eq
   24c44:	1cbd      	addeq	r5, r7, #2
   24c46:	787c      	ldrbeq	r4, [r7, #1]
   24c48:	e7c8      	b.n	24bdc <_strtol_l.isra.0+0x2e>
   24c4a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   24c4e:	2b19      	cmp	r3, #25
   24c50:	d801      	bhi.n	24c56 <_strtol_l.isra.0+0xa8>
   24c52:	3c37      	subs	r4, #55	; 0x37
   24c54:	e7e2      	b.n	24c1c <_strtol_l.isra.0+0x6e>
   24c56:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   24c5a:	2b19      	cmp	r3, #25
   24c5c:	d804      	bhi.n	24c68 <_strtol_l.isra.0+0xba>
   24c5e:	3c57      	subs	r4, #87	; 0x57
   24c60:	e7dc      	b.n	24c1c <_strtol_l.isra.0+0x6e>
   24c62:	f04f 37ff 	mov.w	r7, #4294967295
   24c66:	e7e5      	b.n	24c34 <_strtol_l.isra.0+0x86>
   24c68:	1c7b      	adds	r3, r7, #1
   24c6a:	d108      	bne.n	24c7e <_strtol_l.isra.0+0xd0>
   24c6c:	2322      	movs	r3, #34	; 0x22
   24c6e:	4608      	mov	r0, r1
   24c70:	f8c8 3000 	str.w	r3, [r8]
   24c74:	f1ba 0f00 	cmp.w	sl, #0
   24c78:	d107      	bne.n	24c8a <_strtol_l.isra.0+0xdc>
   24c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24c7e:	b102      	cbz	r2, 24c82 <_strtol_l.isra.0+0xd4>
   24c80:	4240      	negs	r0, r0
   24c82:	f1ba 0f00 	cmp.w	sl, #0
   24c86:	d0f8      	beq.n	24c7a <_strtol_l.isra.0+0xcc>
   24c88:	b10f      	cbz	r7, 24c8e <_strtol_l.isra.0+0xe0>
   24c8a:	f105 39ff 	add.w	r9, r5, #4294967295
   24c8e:	f8ca 9000 	str.w	r9, [sl]
   24c92:	e7f2      	b.n	24c7a <_strtol_l.isra.0+0xcc>
   24c94:	2430      	movs	r4, #48	; 0x30
   24c96:	2e00      	cmp	r6, #0
   24c98:	d1ae      	bne.n	24bf8 <_strtol_l.isra.0+0x4a>
   24c9a:	2608      	movs	r6, #8
   24c9c:	e7ac      	b.n	24bf8 <_strtol_l.isra.0+0x4a>
   24c9e:	2c30      	cmp	r4, #48	; 0x30
   24ca0:	d0a2      	beq.n	24be8 <_strtol_l.isra.0+0x3a>
   24ca2:	260a      	movs	r6, #10
   24ca4:	e7a8      	b.n	24bf8 <_strtol_l.isra.0+0x4a>

00024ca6 <__ascii_wctomb>:
   24ca6:	b149      	cbz	r1, 24cbc <__ascii_wctomb+0x16>
   24ca8:	2aff      	cmp	r2, #255	; 0xff
   24caa:	bf8d      	iteet	hi
   24cac:	238a      	movhi	r3, #138	; 0x8a
   24cae:	700a      	strbls	r2, [r1, #0]
   24cb0:	2001      	movls	r0, #1
   24cb2:	6003      	strhi	r3, [r0, #0]
   24cb4:	bf88      	it	hi
   24cb6:	f04f 30ff 	movhi.w	r0, #4294967295
   24cba:	4770      	bx	lr
   24cbc:	4608      	mov	r0, r1
   24cbe:	4770      	bx	lr

00024cc0 <abort>:
   24cc0:	b508      	push	{r3, lr}
   24cc2:	2006      	movs	r0, #6
   24cc4:	f7fd fd92 	bl	227ec <raise>
   24cc8:	2001      	movs	r0, #1
   24cca:	f7eb fdef 	bl	108ac <_exit>

00024cce <quorem>:
   24cce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24cd2:	6903      	ldr	r3, [r0, #16]
   24cd4:	4680      	mov	r8, r0
   24cd6:	690c      	ldr	r4, [r1, #16]
   24cd8:	42a3      	cmp	r3, r4
   24cda:	f2c0 8086 	blt.w	24dea <quorem+0x11c>
   24cde:	3c01      	subs	r4, #1
   24ce0:	f101 0714 	add.w	r7, r1, #20
   24ce4:	f100 0614 	add.w	r6, r0, #20
   24ce8:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
   24cec:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   24cf0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   24cf4:	3501      	adds	r5, #1
   24cf6:	eb06 030c 	add.w	r3, r6, ip
   24cfa:	eb07 090c 	add.w	r9, r7, ip
   24cfe:	9301      	str	r3, [sp, #4]
   24d00:	fbb0 f5f5 	udiv	r5, r0, r5
   24d04:	b3a5      	cbz	r5, 24d70 <quorem+0xa2>
   24d06:	f04f 0a00 	mov.w	sl, #0
   24d0a:	4638      	mov	r0, r7
   24d0c:	46b6      	mov	lr, r6
   24d0e:	46d3      	mov	fp, sl
   24d10:	f850 2b04 	ldr.w	r2, [r0], #4
   24d14:	b293      	uxth	r3, r2
   24d16:	4581      	cmp	r9, r0
   24d18:	ea4f 4212 	mov.w	r2, r2, lsr #16
   24d1c:	fb05 a303 	mla	r3, r5, r3, sl
   24d20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   24d24:	b29b      	uxth	r3, r3
   24d26:	fb05 a202 	mla	r2, r5, r2, sl
   24d2a:	ebab 0303 	sub.w	r3, fp, r3
   24d2e:	f8de b000 	ldr.w	fp, [lr]
   24d32:	ea4f 4a12 	mov.w	sl, r2, lsr #16
   24d36:	fa1f fb8b 	uxth.w	fp, fp
   24d3a:	445b      	add	r3, fp
   24d3c:	fa1f fb82 	uxth.w	fp, r2
   24d40:	f8de 2000 	ldr.w	r2, [lr]
   24d44:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
   24d48:	eb02 4223 	add.w	r2, r2, r3, asr #16
   24d4c:	b29b      	uxth	r3, r3
   24d4e:	ea4f 4b22 	mov.w	fp, r2, asr #16
   24d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   24d56:	f84e 3b04 	str.w	r3, [lr], #4
   24d5a:	d2d9      	bcs.n	24d10 <quorem+0x42>
   24d5c:	f856 300c 	ldr.w	r3, [r6, ip]
   24d60:	b933      	cbnz	r3, 24d70 <quorem+0xa2>
   24d62:	9b01      	ldr	r3, [sp, #4]
   24d64:	3b04      	subs	r3, #4
   24d66:	429e      	cmp	r6, r3
   24d68:	461a      	mov	r2, r3
   24d6a:	d332      	bcc.n	24dd2 <quorem+0x104>
   24d6c:	f8c8 4010 	str.w	r4, [r8, #16]
   24d70:	4640      	mov	r0, r8
   24d72:	f000 fa75 	bl	25260 <__mcmp>
   24d76:	2800      	cmp	r0, #0
   24d78:	db27      	blt.n	24dca <quorem+0xfc>
   24d7a:	3501      	adds	r5, #1
   24d7c:	4630      	mov	r0, r6
   24d7e:	f04f 0c00 	mov.w	ip, #0
   24d82:	f857 1b04 	ldr.w	r1, [r7], #4
   24d86:	f8d0 e000 	ldr.w	lr, [r0]
   24d8a:	b28b      	uxth	r3, r1
   24d8c:	45b9      	cmp	r9, r7
   24d8e:	fa1f f28e 	uxth.w	r2, lr
   24d92:	ebac 0303 	sub.w	r3, ip, r3
   24d96:	4413      	add	r3, r2
   24d98:	ea4f 4211 	mov.w	r2, r1, lsr #16
   24d9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   24da0:	eb02 4223 	add.w	r2, r2, r3, asr #16
   24da4:	b29b      	uxth	r3, r3
   24da6:	ea4f 4c22 	mov.w	ip, r2, asr #16
   24daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   24dae:	f840 3b04 	str.w	r3, [r0], #4
   24db2:	d2e6      	bcs.n	24d82 <quorem+0xb4>
   24db4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   24db8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
   24dbc:	b92a      	cbnz	r2, 24dca <quorem+0xfc>
   24dbe:	3b04      	subs	r3, #4
   24dc0:	429e      	cmp	r6, r3
   24dc2:	461a      	mov	r2, r3
   24dc4:	d30b      	bcc.n	24dde <quorem+0x110>
   24dc6:	f8c8 4010 	str.w	r4, [r8, #16]
   24dca:	4628      	mov	r0, r5
   24dcc:	b003      	add	sp, #12
   24dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24dd2:	6812      	ldr	r2, [r2, #0]
   24dd4:	3b04      	subs	r3, #4
   24dd6:	2a00      	cmp	r2, #0
   24dd8:	d1c8      	bne.n	24d6c <quorem+0x9e>
   24dda:	3c01      	subs	r4, #1
   24ddc:	e7c3      	b.n	24d66 <quorem+0x98>
   24dde:	6812      	ldr	r2, [r2, #0]
   24de0:	3b04      	subs	r3, #4
   24de2:	2a00      	cmp	r2, #0
   24de4:	d1ef      	bne.n	24dc6 <quorem+0xf8>
   24de6:	3c01      	subs	r4, #1
   24de8:	e7ea      	b.n	24dc0 <quorem+0xf2>
   24dea:	2000      	movs	r0, #0
   24dec:	e7ee      	b.n	24dcc <quorem+0xfe>

00024dee <__sfmoreglue>:
   24dee:	b570      	push	{r4, r5, r6, lr}
   24df0:	1e4a      	subs	r2, r1, #1
   24df2:	2568      	movs	r5, #104	; 0x68
   24df4:	460e      	mov	r6, r1
   24df6:	4355      	muls	r5, r2
   24df8:	f105 0174 	add.w	r1, r5, #116	; 0x74
   24dfc:	f7fd fb94 	bl	22528 <_malloc_r>
   24e00:	4604      	mov	r4, r0
   24e02:	b140      	cbz	r0, 24e16 <__sfmoreglue+0x28>
   24e04:	2100      	movs	r1, #0
   24e06:	f105 0268 	add.w	r2, r5, #104	; 0x68
   24e0a:	e9c0 1600 	strd	r1, r6, [r0]
   24e0e:	300c      	adds	r0, #12
   24e10:	60a0      	str	r0, [r4, #8]
   24e12:	f7ff fd41 	bl	24898 <memset>
   24e16:	4620      	mov	r0, r4
   24e18:	bd70      	pop	{r4, r5, r6, pc}

00024e1a <_fwalk_reent>:
   24e1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24e1e:	4680      	mov	r8, r0
   24e20:	4689      	mov	r9, r1
   24e22:	f100 0448 	add.w	r4, r0, #72	; 0x48
   24e26:	2600      	movs	r6, #0
   24e28:	b914      	cbnz	r4, 24e30 <_fwalk_reent+0x16>
   24e2a:	4630      	mov	r0, r6
   24e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24e30:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
   24e34:	3f01      	subs	r7, #1
   24e36:	d501      	bpl.n	24e3c <_fwalk_reent+0x22>
   24e38:	6824      	ldr	r4, [r4, #0]
   24e3a:	e7f5      	b.n	24e28 <_fwalk_reent+0xe>
   24e3c:	89ab      	ldrh	r3, [r5, #12]
   24e3e:	2b01      	cmp	r3, #1
   24e40:	d907      	bls.n	24e52 <_fwalk_reent+0x38>
   24e42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   24e46:	3301      	adds	r3, #1
   24e48:	d003      	beq.n	24e52 <_fwalk_reent+0x38>
   24e4a:	4629      	mov	r1, r5
   24e4c:	4640      	mov	r0, r8
   24e4e:	47c8      	blx	r9
   24e50:	4306      	orrs	r6, r0
   24e52:	3568      	adds	r5, #104	; 0x68
   24e54:	e7ee      	b.n	24e34 <_fwalk_reent+0x1a>

00024e56 <__swhatbuf_r>:
   24e56:	b570      	push	{r4, r5, r6, lr}
   24e58:	460e      	mov	r6, r1
   24e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   24e5e:	b096      	sub	sp, #88	; 0x58
   24e60:	4614      	mov	r4, r2
   24e62:	2900      	cmp	r1, #0
   24e64:	461d      	mov	r5, r3
   24e66:	da07      	bge.n	24e78 <__swhatbuf_r+0x22>
   24e68:	2300      	movs	r3, #0
   24e6a:	602b      	str	r3, [r5, #0]
   24e6c:	89b3      	ldrh	r3, [r6, #12]
   24e6e:	061a      	lsls	r2, r3, #24
   24e70:	d410      	bmi.n	24e94 <__swhatbuf_r+0x3e>
   24e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
   24e76:	e00e      	b.n	24e96 <__swhatbuf_r+0x40>
   24e78:	466a      	mov	r2, sp
   24e7a:	f7fd fcf3 	bl	22864 <_fstat_r>
   24e7e:	2800      	cmp	r0, #0
   24e80:	dbf2      	blt.n	24e68 <__swhatbuf_r+0x12>
   24e82:	9a01      	ldr	r2, [sp, #4]
   24e84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   24e88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   24e8c:	425a      	negs	r2, r3
   24e8e:	415a      	adcs	r2, r3
   24e90:	602a      	str	r2, [r5, #0]
   24e92:	e7ee      	b.n	24e72 <__swhatbuf_r+0x1c>
   24e94:	2340      	movs	r3, #64	; 0x40
   24e96:	2000      	movs	r0, #0
   24e98:	6023      	str	r3, [r4, #0]
   24e9a:	b016      	add	sp, #88	; 0x58
   24e9c:	bd70      	pop	{r4, r5, r6, pc}

00024e9e <memmove>:
   24e9e:	4288      	cmp	r0, r1
   24ea0:	eb01 0302 	add.w	r3, r1, r2
   24ea4:	b510      	push	{r4, lr}
   24ea6:	d807      	bhi.n	24eb8 <memmove+0x1a>
   24ea8:	1e42      	subs	r2, r0, #1
   24eaa:	4299      	cmp	r1, r3
   24eac:	d00a      	beq.n	24ec4 <memmove+0x26>
   24eae:	f811 4b01 	ldrb.w	r4, [r1], #1
   24eb2:	f802 4f01 	strb.w	r4, [r2, #1]!
   24eb6:	e7f8      	b.n	24eaa <memmove+0xc>
   24eb8:	4283      	cmp	r3, r0
   24eba:	d9f5      	bls.n	24ea8 <memmove+0xa>
   24ebc:	1881      	adds	r1, r0, r2
   24ebe:	1ad2      	subs	r2, r2, r3
   24ec0:	42d3      	cmn	r3, r2
   24ec2:	d100      	bne.n	24ec6 <memmove+0x28>
   24ec4:	bd10      	pop	{r4, pc}
   24ec6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   24eca:	f801 4d01 	strb.w	r4, [r1, #-1]!
   24ece:	e7f7      	b.n	24ec0 <memmove+0x22>

00024ed0 <_Balloc>:
   24ed0:	b570      	push	{r4, r5, r6, lr}
   24ed2:	6a45      	ldr	r5, [r0, #36]	; 0x24
   24ed4:	4604      	mov	r4, r0
   24ed6:	460e      	mov	r6, r1
   24ed8:	b93d      	cbnz	r5, 24eea <_Balloc+0x1a>
   24eda:	2010      	movs	r0, #16
   24edc:	f7fd fa80 	bl	223e0 <malloc>
   24ee0:	6260      	str	r0, [r4, #36]	; 0x24
   24ee2:	6005      	str	r5, [r0, #0]
   24ee4:	60c5      	str	r5, [r0, #12]
   24ee6:	e9c0 5501 	strd	r5, r5, [r0, #4]
   24eea:	6a65      	ldr	r5, [r4, #36]	; 0x24
   24eec:	68eb      	ldr	r3, [r5, #12]
   24eee:	b183      	cbz	r3, 24f12 <_Balloc+0x42>
   24ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24ef2:	68db      	ldr	r3, [r3, #12]
   24ef4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   24ef8:	b9b8      	cbnz	r0, 24f2a <_Balloc+0x5a>
   24efa:	2101      	movs	r1, #1
   24efc:	4620      	mov	r0, r4
   24efe:	fa01 f506 	lsl.w	r5, r1, r6
   24f02:	1d6a      	adds	r2, r5, #5
   24f04:	0092      	lsls	r2, r2, #2
   24f06:	f000 fa74 	bl	253f2 <_calloc_r>
   24f0a:	b160      	cbz	r0, 24f26 <_Balloc+0x56>
   24f0c:	e9c0 6501 	strd	r6, r5, [r0, #4]
   24f10:	e00e      	b.n	24f30 <_Balloc+0x60>
   24f12:	2221      	movs	r2, #33	; 0x21
   24f14:	2104      	movs	r1, #4
   24f16:	4620      	mov	r0, r4
   24f18:	f000 fa6b 	bl	253f2 <_calloc_r>
   24f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24f1e:	60e8      	str	r0, [r5, #12]
   24f20:	68db      	ldr	r3, [r3, #12]
   24f22:	2b00      	cmp	r3, #0
   24f24:	d1e4      	bne.n	24ef0 <_Balloc+0x20>
   24f26:	2000      	movs	r0, #0
   24f28:	bd70      	pop	{r4, r5, r6, pc}
   24f2a:	6802      	ldr	r2, [r0, #0]
   24f2c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   24f30:	2300      	movs	r3, #0
   24f32:	e9c0 3303 	strd	r3, r3, [r0, #12]
   24f36:	e7f7      	b.n	24f28 <_Balloc+0x58>

00024f38 <_Bfree>:
   24f38:	b570      	push	{r4, r5, r6, lr}
   24f3a:	6a44      	ldr	r4, [r0, #36]	; 0x24
   24f3c:	4606      	mov	r6, r0
   24f3e:	460d      	mov	r5, r1
   24f40:	b93c      	cbnz	r4, 24f52 <_Bfree+0x1a>
   24f42:	2010      	movs	r0, #16
   24f44:	f7fd fa4c 	bl	223e0 <malloc>
   24f48:	6270      	str	r0, [r6, #36]	; 0x24
   24f4a:	6004      	str	r4, [r0, #0]
   24f4c:	60c4      	str	r4, [r0, #12]
   24f4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
   24f52:	b13d      	cbz	r5, 24f64 <_Bfree+0x2c>
   24f54:	6a73      	ldr	r3, [r6, #36]	; 0x24
   24f56:	686a      	ldr	r2, [r5, #4]
   24f58:	68db      	ldr	r3, [r3, #12]
   24f5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   24f5e:	6029      	str	r1, [r5, #0]
   24f60:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   24f64:	bd70      	pop	{r4, r5, r6, pc}

00024f66 <__multadd>:
   24f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24f6a:	f101 0c14 	add.w	ip, r1, #20
   24f6e:	461f      	mov	r7, r3
   24f70:	4606      	mov	r6, r0
   24f72:	460c      	mov	r4, r1
   24f74:	690d      	ldr	r5, [r1, #16]
   24f76:	2300      	movs	r3, #0
   24f78:	f8dc 0000 	ldr.w	r0, [ip]
   24f7c:	3301      	adds	r3, #1
   24f7e:	b281      	uxth	r1, r0
   24f80:	429d      	cmp	r5, r3
   24f82:	ea4f 4010 	mov.w	r0, r0, lsr #16
   24f86:	fb02 7101 	mla	r1, r2, r1, r7
   24f8a:	ea4f 4711 	mov.w	r7, r1, lsr #16
   24f8e:	b289      	uxth	r1, r1
   24f90:	fb02 7000 	mla	r0, r2, r0, r7
   24f94:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   24f98:	ea4f 4710 	mov.w	r7, r0, lsr #16
   24f9c:	f84c 1b04 	str.w	r1, [ip], #4
   24fa0:	dcea      	bgt.n	24f78 <__multadd+0x12>
   24fa2:	b1d7      	cbz	r7, 24fda <__multadd+0x74>
   24fa4:	68a3      	ldr	r3, [r4, #8]
   24fa6:	42ab      	cmp	r3, r5
   24fa8:	dc12      	bgt.n	24fd0 <__multadd+0x6a>
   24faa:	6861      	ldr	r1, [r4, #4]
   24fac:	4630      	mov	r0, r6
   24fae:	3101      	adds	r1, #1
   24fb0:	f7ff ff8e 	bl	24ed0 <_Balloc>
   24fb4:	6922      	ldr	r2, [r4, #16]
   24fb6:	4680      	mov	r8, r0
   24fb8:	f104 010c 	add.w	r1, r4, #12
   24fbc:	3202      	adds	r2, #2
   24fbe:	300c      	adds	r0, #12
   24fc0:	0092      	lsls	r2, r2, #2
   24fc2:	f7ff fc5e 	bl	24882 <memcpy>
   24fc6:	4621      	mov	r1, r4
   24fc8:	4644      	mov	r4, r8
   24fca:	4630      	mov	r0, r6
   24fcc:	f7ff ffb4 	bl	24f38 <_Bfree>
   24fd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   24fd4:	3501      	adds	r5, #1
   24fd6:	615f      	str	r7, [r3, #20]
   24fd8:	6125      	str	r5, [r4, #16]
   24fda:	4620      	mov	r0, r4
   24fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024fe0 <__hi0bits>:
   24fe0:	0c02      	lsrs	r2, r0, #16
   24fe2:	4603      	mov	r3, r0
   24fe4:	0412      	lsls	r2, r2, #16
   24fe6:	b9b2      	cbnz	r2, 25016 <__hi0bits+0x36>
   24fe8:	0403      	lsls	r3, r0, #16
   24fea:	2010      	movs	r0, #16
   24fec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   24ff0:	bf04      	itt	eq
   24ff2:	021b      	lsleq	r3, r3, #8
   24ff4:	3008      	addeq	r0, #8
   24ff6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   24ffa:	bf04      	itt	eq
   24ffc:	011b      	lsleq	r3, r3, #4
   24ffe:	3004      	addeq	r0, #4
   25000:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   25004:	bf04      	itt	eq
   25006:	009b      	lsleq	r3, r3, #2
   25008:	3002      	addeq	r0, #2
   2500a:	2b00      	cmp	r3, #0
   2500c:	db06      	blt.n	2501c <__hi0bits+0x3c>
   2500e:	005b      	lsls	r3, r3, #1
   25010:	d503      	bpl.n	2501a <__hi0bits+0x3a>
   25012:	3001      	adds	r0, #1
   25014:	4770      	bx	lr
   25016:	2000      	movs	r0, #0
   25018:	e7e8      	b.n	24fec <__hi0bits+0xc>
   2501a:	2020      	movs	r0, #32
   2501c:	4770      	bx	lr

0002501e <__lo0bits>:
   2501e:	6803      	ldr	r3, [r0, #0]
   25020:	4601      	mov	r1, r0
   25022:	f013 0207 	ands.w	r2, r3, #7
   25026:	d00b      	beq.n	25040 <__lo0bits+0x22>
   25028:	07da      	lsls	r2, r3, #31
   2502a:	d423      	bmi.n	25074 <__lo0bits+0x56>
   2502c:	0798      	lsls	r0, r3, #30
   2502e:	bf47      	ittee	mi
   25030:	085b      	lsrmi	r3, r3, #1
   25032:	2001      	movmi	r0, #1
   25034:	089b      	lsrpl	r3, r3, #2
   25036:	2002      	movpl	r0, #2
   25038:	bf4c      	ite	mi
   2503a:	600b      	strmi	r3, [r1, #0]
   2503c:	600b      	strpl	r3, [r1, #0]
   2503e:	4770      	bx	lr
   25040:	b298      	uxth	r0, r3
   25042:	b9a8      	cbnz	r0, 25070 <__lo0bits+0x52>
   25044:	0c1b      	lsrs	r3, r3, #16
   25046:	2010      	movs	r0, #16
   25048:	f013 0fff 	tst.w	r3, #255	; 0xff
   2504c:	bf04      	itt	eq
   2504e:	0a1b      	lsreq	r3, r3, #8
   25050:	3008      	addeq	r0, #8
   25052:	071a      	lsls	r2, r3, #28
   25054:	bf04      	itt	eq
   25056:	091b      	lsreq	r3, r3, #4
   25058:	3004      	addeq	r0, #4
   2505a:	079a      	lsls	r2, r3, #30
   2505c:	bf04      	itt	eq
   2505e:	089b      	lsreq	r3, r3, #2
   25060:	3002      	addeq	r0, #2
   25062:	07da      	lsls	r2, r3, #31
   25064:	d402      	bmi.n	2506c <__lo0bits+0x4e>
   25066:	085b      	lsrs	r3, r3, #1
   25068:	d006      	beq.n	25078 <__lo0bits+0x5a>
   2506a:	3001      	adds	r0, #1
   2506c:	600b      	str	r3, [r1, #0]
   2506e:	4770      	bx	lr
   25070:	4610      	mov	r0, r2
   25072:	e7e9      	b.n	25048 <__lo0bits+0x2a>
   25074:	2000      	movs	r0, #0
   25076:	4770      	bx	lr
   25078:	2020      	movs	r0, #32
   2507a:	4770      	bx	lr

0002507c <__i2b>:
   2507c:	b510      	push	{r4, lr}
   2507e:	460c      	mov	r4, r1
   25080:	2101      	movs	r1, #1
   25082:	f7ff ff25 	bl	24ed0 <_Balloc>
   25086:	2201      	movs	r2, #1
   25088:	6144      	str	r4, [r0, #20]
   2508a:	6102      	str	r2, [r0, #16]
   2508c:	bd10      	pop	{r4, pc}

0002508e <__multiply>:
   2508e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25092:	4614      	mov	r4, r2
   25094:	690a      	ldr	r2, [r1, #16]
   25096:	4688      	mov	r8, r1
   25098:	6923      	ldr	r3, [r4, #16]
   2509a:	429a      	cmp	r2, r3
   2509c:	bfbe      	ittt	lt
   2509e:	460b      	movlt	r3, r1
   250a0:	46a0      	movlt	r8, r4
   250a2:	461c      	movlt	r4, r3
   250a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
   250a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   250ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
   250b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
   250b4:	eb07 0609 	add.w	r6, r7, r9
   250b8:	42b3      	cmp	r3, r6
   250ba:	bfb8      	it	lt
   250bc:	3101      	addlt	r1, #1
   250be:	f7ff ff07 	bl	24ed0 <_Balloc>
   250c2:	f100 0514 	add.w	r5, r0, #20
   250c6:	2200      	movs	r2, #0
   250c8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
   250cc:	462b      	mov	r3, r5
   250ce:	4573      	cmp	r3, lr
   250d0:	d316      	bcc.n	25100 <__multiply+0x72>
   250d2:	f108 0114 	add.w	r1, r8, #20
   250d6:	f104 0214 	add.w	r2, r4, #20
   250da:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   250de:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   250e2:	9300      	str	r3, [sp, #0]
   250e4:	9b00      	ldr	r3, [sp, #0]
   250e6:	9201      	str	r2, [sp, #4]
   250e8:	4293      	cmp	r3, r2
   250ea:	d80c      	bhi.n	25106 <__multiply+0x78>
   250ec:	2e00      	cmp	r6, #0
   250ee:	dd03      	ble.n	250f8 <__multiply+0x6a>
   250f0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   250f4:	2b00      	cmp	r3, #0
   250f6:	d05d      	beq.n	251b4 <__multiply+0x126>
   250f8:	6106      	str	r6, [r0, #16]
   250fa:	b003      	add	sp, #12
   250fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25100:	f843 2b04 	str.w	r2, [r3], #4
   25104:	e7e3      	b.n	250ce <__multiply+0x40>
   25106:	f8b2 b000 	ldrh.w	fp, [r2]
   2510a:	f1bb 0f00 	cmp.w	fp, #0
   2510e:	d023      	beq.n	25158 <__multiply+0xca>
   25110:	4689      	mov	r9, r1
   25112:	46ac      	mov	ip, r5
   25114:	f04f 0800 	mov.w	r8, #0
   25118:	f859 4b04 	ldr.w	r4, [r9], #4
   2511c:	f8dc a000 	ldr.w	sl, [ip]
   25120:	b2a3      	uxth	r3, r4
   25122:	454f      	cmp	r7, r9
   25124:	fa1f fa8a 	uxth.w	sl, sl
   25128:	fb0b a303 	mla	r3, fp, r3, sl
   2512c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   25130:	f8dc 4000 	ldr.w	r4, [ip]
   25134:	4443      	add	r3, r8
   25136:	ea4f 4814 	mov.w	r8, r4, lsr #16
   2513a:	fb0b 840a 	mla	r4, fp, sl, r8
   2513e:	46e2      	mov	sl, ip
   25140:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   25144:	b29b      	uxth	r3, r3
   25146:	ea4f 4814 	mov.w	r8, r4, lsr #16
   2514a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   2514e:	f84a 3b04 	str.w	r3, [sl], #4
   25152:	d82b      	bhi.n	251ac <__multiply+0x11e>
   25154:	f8cc 8004 	str.w	r8, [ip, #4]
   25158:	9b01      	ldr	r3, [sp, #4]
   2515a:	3204      	adds	r2, #4
   2515c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   25160:	f1ba 0f00 	cmp.w	sl, #0
   25164:	d020      	beq.n	251a8 <__multiply+0x11a>
   25166:	682b      	ldr	r3, [r5, #0]
   25168:	4689      	mov	r9, r1
   2516a:	46a8      	mov	r8, r5
   2516c:	f04f 0b00 	mov.w	fp, #0
   25170:	f8b9 c000 	ldrh.w	ip, [r9]
   25174:	b29b      	uxth	r3, r3
   25176:	f8b8 4002 	ldrh.w	r4, [r8, #2]
   2517a:	fb0a 440c 	mla	r4, sl, ip, r4
   2517e:	46c4      	mov	ip, r8
   25180:	445c      	add	r4, fp
   25182:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   25186:	f84c 3b04 	str.w	r3, [ip], #4
   2518a:	f859 3b04 	ldr.w	r3, [r9], #4
   2518e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
   25192:	0c1b      	lsrs	r3, r3, #16
   25194:	454f      	cmp	r7, r9
   25196:	fb0a b303 	mla	r3, sl, r3, fp
   2519a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
   2519e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   251a2:	d805      	bhi.n	251b0 <__multiply+0x122>
   251a4:	f8c8 3004 	str.w	r3, [r8, #4]
   251a8:	3504      	adds	r5, #4
   251aa:	e79b      	b.n	250e4 <__multiply+0x56>
   251ac:	46d4      	mov	ip, sl
   251ae:	e7b3      	b.n	25118 <__multiply+0x8a>
   251b0:	46e0      	mov	r8, ip
   251b2:	e7dd      	b.n	25170 <__multiply+0xe2>
   251b4:	3e01      	subs	r6, #1
   251b6:	e799      	b.n	250ec <__multiply+0x5e>

000251b8 <__lshift>:
   251b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   251bc:	460c      	mov	r4, r1
   251be:	ea4f 1a62 	mov.w	sl, r2, asr #5
   251c2:	4607      	mov	r7, r0
   251c4:	4616      	mov	r6, r2
   251c6:	6923      	ldr	r3, [r4, #16]
   251c8:	6849      	ldr	r1, [r1, #4]
   251ca:	eb0a 0903 	add.w	r9, sl, r3
   251ce:	68a3      	ldr	r3, [r4, #8]
   251d0:	f109 0501 	add.w	r5, r9, #1
   251d4:	42ab      	cmp	r3, r5
   251d6:	db32      	blt.n	2523e <__lshift+0x86>
   251d8:	4638      	mov	r0, r7
   251da:	f7ff fe79 	bl	24ed0 <_Balloc>
   251de:	2300      	movs	r3, #0
   251e0:	4680      	mov	r8, r0
   251e2:	f100 0114 	add.w	r1, r0, #20
   251e6:	461a      	mov	r2, r3
   251e8:	4553      	cmp	r3, sl
   251ea:	db2b      	blt.n	25244 <__lshift+0x8c>
   251ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   251f0:	f104 0314 	add.w	r3, r4, #20
   251f4:	6920      	ldr	r0, [r4, #16]
   251f6:	f016 021f 	ands.w	r2, r6, #31
   251fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   251fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   25202:	d025      	beq.n	25250 <__lshift+0x98>
   25204:	f1c2 0e20 	rsb	lr, r2, #32
   25208:	2000      	movs	r0, #0
   2520a:	681e      	ldr	r6, [r3, #0]
   2520c:	468a      	mov	sl, r1
   2520e:	4096      	lsls	r6, r2
   25210:	4330      	orrs	r0, r6
   25212:	f84a 0b04 	str.w	r0, [sl], #4
   25216:	f853 0b04 	ldr.w	r0, [r3], #4
   2521a:	459c      	cmp	ip, r3
   2521c:	fa20 f00e 	lsr.w	r0, r0, lr
   25220:	d814      	bhi.n	2524c <__lshift+0x94>
   25222:	6048      	str	r0, [r1, #4]
   25224:	b108      	cbz	r0, 2522a <__lshift+0x72>
   25226:	f109 0502 	add.w	r5, r9, #2
   2522a:	3d01      	subs	r5, #1
   2522c:	4638      	mov	r0, r7
   2522e:	4621      	mov	r1, r4
   25230:	f8c8 5010 	str.w	r5, [r8, #16]
   25234:	f7ff fe80 	bl	24f38 <_Bfree>
   25238:	4640      	mov	r0, r8
   2523a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2523e:	3101      	adds	r1, #1
   25240:	005b      	lsls	r3, r3, #1
   25242:	e7c7      	b.n	251d4 <__lshift+0x1c>
   25244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   25248:	3301      	adds	r3, #1
   2524a:	e7cd      	b.n	251e8 <__lshift+0x30>
   2524c:	4651      	mov	r1, sl
   2524e:	e7dc      	b.n	2520a <__lshift+0x52>
   25250:	3904      	subs	r1, #4
   25252:	f853 2b04 	ldr.w	r2, [r3], #4
   25256:	459c      	cmp	ip, r3
   25258:	f841 2f04 	str.w	r2, [r1, #4]!
   2525c:	d8f9      	bhi.n	25252 <__lshift+0x9a>
   2525e:	e7e4      	b.n	2522a <__lshift+0x72>

00025260 <__mcmp>:
   25260:	6903      	ldr	r3, [r0, #16]
   25262:	690a      	ldr	r2, [r1, #16]
   25264:	1a9b      	subs	r3, r3, r2
   25266:	b530      	push	{r4, r5, lr}
   25268:	d10c      	bne.n	25284 <__mcmp+0x24>
   2526a:	0092      	lsls	r2, r2, #2
   2526c:	3014      	adds	r0, #20
   2526e:	3114      	adds	r1, #20
   25270:	1884      	adds	r4, r0, r2
   25272:	4411      	add	r1, r2
   25274:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   25278:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2527c:	4295      	cmp	r5, r2
   2527e:	d003      	beq.n	25288 <__mcmp+0x28>
   25280:	d305      	bcc.n	2528e <__mcmp+0x2e>
   25282:	2301      	movs	r3, #1
   25284:	4618      	mov	r0, r3
   25286:	bd30      	pop	{r4, r5, pc}
   25288:	42a0      	cmp	r0, r4
   2528a:	d3f3      	bcc.n	25274 <__mcmp+0x14>
   2528c:	e7fa      	b.n	25284 <__mcmp+0x24>
   2528e:	f04f 33ff 	mov.w	r3, #4294967295
   25292:	e7f7      	b.n	25284 <__mcmp+0x24>

00025294 <__mdiff>:
   25294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25298:	460d      	mov	r5, r1
   2529a:	4607      	mov	r7, r0
   2529c:	4611      	mov	r1, r2
   2529e:	4614      	mov	r4, r2
   252a0:	4628      	mov	r0, r5
   252a2:	f7ff ffdd 	bl	25260 <__mcmp>
   252a6:	1e06      	subs	r6, r0, #0
   252a8:	d108      	bne.n	252bc <__mdiff+0x28>
   252aa:	4631      	mov	r1, r6
   252ac:	4638      	mov	r0, r7
   252ae:	f7ff fe0f 	bl	24ed0 <_Balloc>
   252b2:	2301      	movs	r3, #1
   252b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
   252b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   252bc:	bfa3      	ittte	ge
   252be:	4623      	movge	r3, r4
   252c0:	462c      	movge	r4, r5
   252c2:	2600      	movge	r6, #0
   252c4:	2601      	movlt	r6, #1
   252c6:	bfa8      	it	ge
   252c8:	461d      	movge	r5, r3
   252ca:	6861      	ldr	r1, [r4, #4]
   252cc:	4638      	mov	r0, r7
   252ce:	f7ff fdff 	bl	24ed0 <_Balloc>
   252d2:	f105 0914 	add.w	r9, r5, #20
   252d6:	60c6      	str	r6, [r0, #12]
   252d8:	f104 0214 	add.w	r2, r4, #20
   252dc:	6926      	ldr	r6, [r4, #16]
   252de:	f100 0114 	add.w	r1, r0, #20
   252e2:	692b      	ldr	r3, [r5, #16]
   252e4:	f04f 0e00 	mov.w	lr, #0
   252e8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
   252ec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   252f0:	f852 ab04 	ldr.w	sl, [r2], #4
   252f4:	f859 5b04 	ldr.w	r5, [r9], #4
   252f8:	fa1f f38a 	uxth.w	r3, sl
   252fc:	4694      	mov	ip, r2
   252fe:	b2ac      	uxth	r4, r5
   25300:	45c8      	cmp	r8, r9
   25302:	4473      	add	r3, lr
   25304:	eba3 0304 	sub.w	r3, r3, r4
   25308:	ea4f 4415 	mov.w	r4, r5, lsr #16
   2530c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
   25310:	eb04 4423 	add.w	r4, r4, r3, asr #16
   25314:	b29b      	uxth	r3, r3
   25316:	ea4f 4e24 	mov.w	lr, r4, asr #16
   2531a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   2531e:	f841 4b04 	str.w	r4, [r1], #4
   25322:	d8e5      	bhi.n	252f0 <__mdiff+0x5c>
   25324:	45bc      	cmp	ip, r7
   25326:	d304      	bcc.n	25332 <__mdiff+0x9e>
   25328:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   2532c:	b183      	cbz	r3, 25350 <__mdiff+0xbc>
   2532e:	6106      	str	r6, [r0, #16]
   25330:	e7c2      	b.n	252b8 <__mdiff+0x24>
   25332:	f85c 4b04 	ldr.w	r4, [ip], #4
   25336:	b2a2      	uxth	r2, r4
   25338:	4472      	add	r2, lr
   2533a:	1413      	asrs	r3, r2, #16
   2533c:	b292      	uxth	r2, r2
   2533e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
   25342:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   25346:	ea4f 4e23 	mov.w	lr, r3, asr #16
   2534a:	f841 2b04 	str.w	r2, [r1], #4
   2534e:	e7e9      	b.n	25324 <__mdiff+0x90>
   25350:	3e01      	subs	r6, #1
   25352:	e7e9      	b.n	25328 <__mdiff+0x94>

00025354 <__d2b>:
   25354:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   25358:	ec59 8b10 	vmov	r8, r9, d0
   2535c:	f3c9 540a 	ubfx	r4, r9, #20, #11
   25360:	460e      	mov	r6, r1
   25362:	2101      	movs	r1, #1
   25364:	4615      	mov	r5, r2
   25366:	f7ff fdb3 	bl	24ed0 <_Balloc>
   2536a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   2536e:	4607      	mov	r7, r0
   25370:	bb34      	cbnz	r4, 253c0 <__d2b+0x6c>
   25372:	9301      	str	r3, [sp, #4]
   25374:	f1b8 0300 	subs.w	r3, r8, #0
   25378:	d027      	beq.n	253ca <__d2b+0x76>
   2537a:	a802      	add	r0, sp, #8
   2537c:	f840 3d08 	str.w	r3, [r0, #-8]!
   25380:	f7ff fe4d 	bl	2501e <__lo0bits>
   25384:	9900      	ldr	r1, [sp, #0]
   25386:	b1f0      	cbz	r0, 253c6 <__d2b+0x72>
   25388:	9a01      	ldr	r2, [sp, #4]
   2538a:	f1c0 0320 	rsb	r3, r0, #32
   2538e:	fa02 f303 	lsl.w	r3, r2, r3
   25392:	40c2      	lsrs	r2, r0
   25394:	430b      	orrs	r3, r1
   25396:	9201      	str	r2, [sp, #4]
   25398:	617b      	str	r3, [r7, #20]
   2539a:	9b01      	ldr	r3, [sp, #4]
   2539c:	2b00      	cmp	r3, #0
   2539e:	61bb      	str	r3, [r7, #24]
   253a0:	bf14      	ite	ne
   253a2:	2102      	movne	r1, #2
   253a4:	2101      	moveq	r1, #1
   253a6:	6139      	str	r1, [r7, #16]
   253a8:	b1c4      	cbz	r4, 253dc <__d2b+0x88>
   253aa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   253ae:	4404      	add	r4, r0
   253b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   253b4:	6034      	str	r4, [r6, #0]
   253b6:	6028      	str	r0, [r5, #0]
   253b8:	4638      	mov	r0, r7
   253ba:	b003      	add	sp, #12
   253bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   253c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   253c4:	e7d5      	b.n	25372 <__d2b+0x1e>
   253c6:	6179      	str	r1, [r7, #20]
   253c8:	e7e7      	b.n	2539a <__d2b+0x46>
   253ca:	a801      	add	r0, sp, #4
   253cc:	f7ff fe27 	bl	2501e <__lo0bits>
   253d0:	9b01      	ldr	r3, [sp, #4]
   253d2:	2101      	movs	r1, #1
   253d4:	3020      	adds	r0, #32
   253d6:	617b      	str	r3, [r7, #20]
   253d8:	6139      	str	r1, [r7, #16]
   253da:	e7e5      	b.n	253a8 <__d2b+0x54>
   253dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   253e0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   253e4:	6030      	str	r0, [r6, #0]
   253e6:	6918      	ldr	r0, [r3, #16]
   253e8:	f7ff fdfa 	bl	24fe0 <__hi0bits>
   253ec:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   253f0:	e7e1      	b.n	253b6 <__d2b+0x62>

000253f2 <_calloc_r>:
   253f2:	b538      	push	{r3, r4, r5, lr}
   253f4:	fb02 f401 	mul.w	r4, r2, r1
   253f8:	4621      	mov	r1, r4
   253fa:	f7fd f895 	bl	22528 <_malloc_r>
   253fe:	4605      	mov	r5, r0
   25400:	b118      	cbz	r0, 2540a <_calloc_r+0x18>
   25402:	4622      	mov	r2, r4
   25404:	2100      	movs	r1, #0
   25406:	f7ff fa47 	bl	24898 <memset>
   2540a:	4628      	mov	r0, r5
   2540c:	bd38      	pop	{r3, r4, r5, pc}

0002540e <_realloc_r>:
   2540e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25410:	4607      	mov	r7, r0
   25412:	4614      	mov	r4, r2
   25414:	460e      	mov	r6, r1
   25416:	b921      	cbnz	r1, 25422 <_realloc_r+0x14>
   25418:	4611      	mov	r1, r2
   2541a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2541e:	f7fd b883 	b.w	22528 <_malloc_r>
   25422:	b922      	cbnz	r2, 2542e <_realloc_r+0x20>
   25424:	4625      	mov	r5, r4
   25426:	f7fd f831 	bl	2248c <_free_r>
   2542a:	4628      	mov	r0, r5
   2542c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2542e:	f000 f8dd 	bl	255ec <_malloc_usable_size_r>
   25432:	42a0      	cmp	r0, r4
   25434:	d20f      	bcs.n	25456 <_realloc_r+0x48>
   25436:	4621      	mov	r1, r4
   25438:	4638      	mov	r0, r7
   2543a:	f7fd f875 	bl	22528 <_malloc_r>
   2543e:	4605      	mov	r5, r0
   25440:	2800      	cmp	r0, #0
   25442:	d0f2      	beq.n	2542a <_realloc_r+0x1c>
   25444:	4631      	mov	r1, r6
   25446:	4622      	mov	r2, r4
   25448:	f7ff fa1b 	bl	24882 <memcpy>
   2544c:	4631      	mov	r1, r6
   2544e:	4638      	mov	r0, r7
   25450:	f7fd f81c 	bl	2248c <_free_r>
   25454:	e7e9      	b.n	2542a <_realloc_r+0x1c>
   25456:	4635      	mov	r5, r6
   25458:	e7e7      	b.n	2542a <_realloc_r+0x1c>

0002545a <__ssputs_r>:
   2545a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2545e:	688e      	ldr	r6, [r1, #8]
   25460:	4682      	mov	sl, r0
   25462:	460c      	mov	r4, r1
   25464:	4690      	mov	r8, r2
   25466:	429e      	cmp	r6, r3
   25468:	4699      	mov	r9, r3
   2546a:	d837      	bhi.n	254dc <__ssputs_r+0x82>
   2546c:	898a      	ldrh	r2, [r1, #12]
   2546e:	f412 6f90 	tst.w	r2, #1152	; 0x480
   25472:	d031      	beq.n	254d8 <__ssputs_r+0x7e>
   25474:	6825      	ldr	r5, [r4, #0]
   25476:	2302      	movs	r3, #2
   25478:	6909      	ldr	r1, [r1, #16]
   2547a:	1a6f      	subs	r7, r5, r1
   2547c:	6965      	ldr	r5, [r4, #20]
   2547e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   25482:	fb95 f5f3 	sdiv	r5, r5, r3
   25486:	f109 0301 	add.w	r3, r9, #1
   2548a:	443b      	add	r3, r7
   2548c:	429d      	cmp	r5, r3
   2548e:	bf38      	it	cc
   25490:	461d      	movcc	r5, r3
   25492:	0553      	lsls	r3, r2, #21
   25494:	d530      	bpl.n	254f8 <__ssputs_r+0x9e>
   25496:	4629      	mov	r1, r5
   25498:	f7fd f846 	bl	22528 <_malloc_r>
   2549c:	4606      	mov	r6, r0
   2549e:	b950      	cbnz	r0, 254b6 <__ssputs_r+0x5c>
   254a0:	230c      	movs	r3, #12
   254a2:	f04f 30ff 	mov.w	r0, #4294967295
   254a6:	f8ca 3000 	str.w	r3, [sl]
   254aa:	89a3      	ldrh	r3, [r4, #12]
   254ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   254b0:	81a3      	strh	r3, [r4, #12]
   254b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   254b6:	463a      	mov	r2, r7
   254b8:	6921      	ldr	r1, [r4, #16]
   254ba:	f7ff f9e2 	bl	24882 <memcpy>
   254be:	89a3      	ldrh	r3, [r4, #12]
   254c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   254c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   254c8:	81a3      	strh	r3, [r4, #12]
   254ca:	6126      	str	r6, [r4, #16]
   254cc:	443e      	add	r6, r7
   254ce:	6165      	str	r5, [r4, #20]
   254d0:	1bed      	subs	r5, r5, r7
   254d2:	6026      	str	r6, [r4, #0]
   254d4:	464e      	mov	r6, r9
   254d6:	60a5      	str	r5, [r4, #8]
   254d8:	454e      	cmp	r6, r9
   254da:	d900      	bls.n	254de <__ssputs_r+0x84>
   254dc:	464e      	mov	r6, r9
   254de:	4632      	mov	r2, r6
   254e0:	4641      	mov	r1, r8
   254e2:	6820      	ldr	r0, [r4, #0]
   254e4:	f7ff fcdb 	bl	24e9e <memmove>
   254e8:	68a3      	ldr	r3, [r4, #8]
   254ea:	2000      	movs	r0, #0
   254ec:	1b9b      	subs	r3, r3, r6
   254ee:	60a3      	str	r3, [r4, #8]
   254f0:	6823      	ldr	r3, [r4, #0]
   254f2:	441e      	add	r6, r3
   254f4:	6026      	str	r6, [r4, #0]
   254f6:	e7dc      	b.n	254b2 <__ssputs_r+0x58>
   254f8:	462a      	mov	r2, r5
   254fa:	f7ff ff88 	bl	2540e <_realloc_r>
   254fe:	4606      	mov	r6, r0
   25500:	2800      	cmp	r0, #0
   25502:	d1e2      	bne.n	254ca <__ssputs_r+0x70>
   25504:	6921      	ldr	r1, [r4, #16]
   25506:	4650      	mov	r0, sl
   25508:	f7fc ffc0 	bl	2248c <_free_r>
   2550c:	e7c8      	b.n	254a0 <__ssputs_r+0x46>

0002550e <_raise_r>:
   2550e:	291f      	cmp	r1, #31
   25510:	b538      	push	{r3, r4, r5, lr}
   25512:	4604      	mov	r4, r0
   25514:	460d      	mov	r5, r1
   25516:	d904      	bls.n	25522 <_raise_r+0x14>
   25518:	2316      	movs	r3, #22
   2551a:	6003      	str	r3, [r0, #0]
   2551c:	f04f 30ff 	mov.w	r0, #4294967295
   25520:	bd38      	pop	{r3, r4, r5, pc}
   25522:	6c42      	ldr	r2, [r0, #68]	; 0x44
   25524:	b112      	cbz	r2, 2552c <_raise_r+0x1e>
   25526:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   2552a:	b94b      	cbnz	r3, 25540 <_raise_r+0x32>
   2552c:	4620      	mov	r0, r4
   2552e:	f000 f816 	bl	2555e <_getpid_r>
   25532:	462a      	mov	r2, r5
   25534:	4601      	mov	r1, r0
   25536:	4620      	mov	r0, r4
   25538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2553c:	f7fd b95e 	b.w	227fc <_kill_r>
   25540:	2b01      	cmp	r3, #1
   25542:	d00a      	beq.n	2555a <_raise_r+0x4c>
   25544:	1c59      	adds	r1, r3, #1
   25546:	d103      	bne.n	25550 <_raise_r+0x42>
   25548:	2316      	movs	r3, #22
   2554a:	6003      	str	r3, [r0, #0]
   2554c:	2001      	movs	r0, #1
   2554e:	e7e7      	b.n	25520 <_raise_r+0x12>
   25550:	2400      	movs	r4, #0
   25552:	4628      	mov	r0, r5
   25554:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   25558:	4798      	blx	r3
   2555a:	2000      	movs	r0, #0
   2555c:	e7e0      	b.n	25520 <_raise_r+0x12>

0002555e <_getpid_r>:
   2555e:	f7fe b94b 	b.w	237f8 <_getpid>

00025562 <__sread>:
   25562:	b510      	push	{r4, lr}
   25564:	460c      	mov	r4, r1
   25566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2556a:	f7fd f9af 	bl	228cc <_read_r>
   2556e:	2800      	cmp	r0, #0
   25570:	bfab      	itete	ge
   25572:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   25574:	89a3      	ldrhlt	r3, [r4, #12]
   25576:	181b      	addge	r3, r3, r0
   25578:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   2557c:	bfac      	ite	ge
   2557e:	6563      	strge	r3, [r4, #84]	; 0x54
   25580:	81a3      	strhlt	r3, [r4, #12]
   25582:	bd10      	pop	{r4, pc}

00025584 <__swrite>:
   25584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25588:	461f      	mov	r7, r3
   2558a:	898b      	ldrh	r3, [r1, #12]
   2558c:	4605      	mov	r5, r0
   2558e:	460c      	mov	r4, r1
   25590:	05db      	lsls	r3, r3, #23
   25592:	4616      	mov	r6, r2
   25594:	d505      	bpl.n	255a2 <__swrite+0x1e>
   25596:	2302      	movs	r3, #2
   25598:	2200      	movs	r2, #0
   2559a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2559e:	f7fd f983 	bl	228a8 <_lseek_r>
   255a2:	89a3      	ldrh	r3, [r4, #12]
   255a4:	4632      	mov	r2, r6
   255a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   255aa:	4628      	mov	r0, r5
   255ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   255b0:	81a3      	strh	r3, [r4, #12]
   255b2:	463b      	mov	r3, r7
   255b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   255b8:	f7fd b932 	b.w	22820 <_write_r>

000255bc <__sseek>:
   255bc:	b510      	push	{r4, lr}
   255be:	460c      	mov	r4, r1
   255c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   255c4:	f7fd f970 	bl	228a8 <_lseek_r>
   255c8:	1c43      	adds	r3, r0, #1
   255ca:	89a3      	ldrh	r3, [r4, #12]
   255cc:	bf15      	itete	ne
   255ce:	6560      	strne	r0, [r4, #84]	; 0x54
   255d0:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   255d4:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   255d8:	81a3      	strheq	r3, [r4, #12]
   255da:	bf18      	it	ne
   255dc:	81a3      	strhne	r3, [r4, #12]
   255de:	bd10      	pop	{r4, pc}

000255e0 <__sclose>:
   255e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   255e4:	f7fd b92e 	b.w	22844 <_close_r>

000255e8 <__malloc_lock>:
   255e8:	4770      	bx	lr

000255ea <__malloc_unlock>:
   255ea:	4770      	bx	lr

000255ec <_malloc_usable_size_r>:
   255ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
   255f0:	1f18      	subs	r0, r3, #4
   255f2:	2b00      	cmp	r3, #0
   255f4:	bfbc      	itt	lt
   255f6:	580b      	ldrlt	r3, [r1, r0]
   255f8:	18c0      	addlt	r0, r0, r3
   255fa:	4770      	bx	lr
