
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

0000c000 <_vector_table>:
    c000:	20027f48 	.word	0x20027f48
    c004:	0000de7d 	.word	0x0000de7d
    c008:	00022e3d 	.word	0x00022e3d
    c00c:	0000dbed 	.word	0x0000dbed
    c010:	0000dbed 	.word	0x0000dbed
    c014:	0000dbed 	.word	0x0000dbed
    c018:	0000dbed 	.word	0x0000dbed
    c01c:	0000dbed 	.word	0x0000dbed
    c020:	0000dbed 	.word	0x0000dbed
    c024:	0000dbed 	.word	0x0000dbed
    c028:	0000dbed 	.word	0x0000dbed
    c02c:	0000dbb5 	.word	0x0000dbb5
    c030:	0000dbed 	.word	0x0000dbed
    c034:	0000dbed 	.word	0x0000dbed
    c038:	0000db05 	.word	0x0000db05
    c03c:	0000d7f9 	.word	0x0000d7f9

0000c040 <_irq_vector_table>:
    c040:	0000dc19 0000dc19 0000dc19 0000dc19     ................
    c050:	0000dc19 0000dc19 0000dc19 0000dc19     ................
    c060:	0000dc19 0000dc19 0000dc19 0000dc19     ................
    c070:	0000dc19 0000dc19 0000dc19 0000dc19     ................
    c080:	0000dc19 0000dc19 0000dc19 0000dc19     ................
    c090:	0000dc19 0000dc19 0000dc19 0000dc19     ................
    c0a0:	0000dc19 0000dc19 0000dc19 0000dc19     ................
    c0b0:	0000f801 000234fb 0000dc19 0000dc19     .....4..........
    c0c0:	0000dc19 0000dc19 0000dc19 0000dc19     ................
    c0d0:	0000dc19 0000dc19 0000dc19 0000dc19     ................
    c0e0:	0000dc19 0000dc19 0002351d 0000dc19     .........5......
    c0f0:	0000dc19 0000dc19 0000dc19 0000dc19     ................
    c100:	0000dc19 0000dc19 0000dc19 0000dc19     ................
    c110:	0000dc19 0000dc19 0000dc19 0000dc19     ................
    c120:	0000dc19 0000dc19 0000dc19 0000dc19     ................
    c130:	0000dc19 0000dc19 0000dc19 0000dc19     ................
    c140:	0000dc19                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b01 0001a818     ...(L....[......
    c210:	00000001 0000c000 20028c88 0000ffad     ........... ....

Disassembly of section _TEXT_SECTION_NAME_2:

0000c220 <__aeabi_ldivmod>:
    c220:	b97b      	cbnz	r3, c242 <__aeabi_ldivmod+0x22>
    c222:	b972      	cbnz	r2, c242 <__aeabi_ldivmod+0x22>
    c224:	2900      	cmp	r1, #0
    c226:	bfbe      	ittt	lt
    c228:	2000      	movlt	r0, #0
    c22a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    c22e:	e006      	blt.n	c23e <__aeabi_ldivmod+0x1e>
    c230:	bf08      	it	eq
    c232:	2800      	cmpeq	r0, #0
    c234:	bf1c      	itt	ne
    c236:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    c23a:	f04f 30ff 	movne.w	r0, #4294967295
    c23e:	f000 b9bb 	b.w	c5b8 <__aeabi_idiv0>
    c242:	f1ad 0c08 	sub.w	ip, sp, #8
    c246:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c24a:	2900      	cmp	r1, #0
    c24c:	db09      	blt.n	c262 <__aeabi_ldivmod+0x42>
    c24e:	2b00      	cmp	r3, #0
    c250:	db1a      	blt.n	c288 <__aeabi_ldivmod+0x68>
    c252:	f000 f84d 	bl	c2f0 <__udivmoddi4>
    c256:	f8dd e004 	ldr.w	lr, [sp, #4]
    c25a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c25e:	b004      	add	sp, #16
    c260:	4770      	bx	lr
    c262:	4240      	negs	r0, r0
    c264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c268:	2b00      	cmp	r3, #0
    c26a:	db1b      	blt.n	c2a4 <__aeabi_ldivmod+0x84>
    c26c:	f000 f840 	bl	c2f0 <__udivmoddi4>
    c270:	f8dd e004 	ldr.w	lr, [sp, #4]
    c274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c278:	b004      	add	sp, #16
    c27a:	4240      	negs	r0, r0
    c27c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c280:	4252      	negs	r2, r2
    c282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c286:	4770      	bx	lr
    c288:	4252      	negs	r2, r2
    c28a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c28e:	f000 f82f 	bl	c2f0 <__udivmoddi4>
    c292:	f8dd e004 	ldr.w	lr, [sp, #4]
    c296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c29a:	b004      	add	sp, #16
    c29c:	4240      	negs	r0, r0
    c29e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2a2:	4770      	bx	lr
    c2a4:	4252      	negs	r2, r2
    c2a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2aa:	f000 f821 	bl	c2f0 <__udivmoddi4>
    c2ae:	f8dd e004 	ldr.w	lr, [sp, #4]
    c2b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c2b6:	b004      	add	sp, #16
    c2b8:	4252      	negs	r2, r2
    c2ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2be:	4770      	bx	lr

0000c2c0 <__aeabi_uldivmod>:
    c2c0:	b953      	cbnz	r3, c2d8 <__aeabi_uldivmod+0x18>
    c2c2:	b94a      	cbnz	r2, c2d8 <__aeabi_uldivmod+0x18>
    c2c4:	2900      	cmp	r1, #0
    c2c6:	bf08      	it	eq
    c2c8:	2800      	cmpeq	r0, #0
    c2ca:	bf1c      	itt	ne
    c2cc:	f04f 31ff 	movne.w	r1, #4294967295
    c2d0:	f04f 30ff 	movne.w	r0, #4294967295
    c2d4:	f000 b970 	b.w	c5b8 <__aeabi_idiv0>
    c2d8:	f1ad 0c08 	sub.w	ip, sp, #8
    c2dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c2e0:	f000 f806 	bl	c2f0 <__udivmoddi4>
    c2e4:	f8dd e004 	ldr.w	lr, [sp, #4]
    c2e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c2ec:	b004      	add	sp, #16
    c2ee:	4770      	bx	lr

0000c2f0 <__udivmoddi4>:
    c2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c2f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c2f6:	4604      	mov	r4, r0
    c2f8:	4689      	mov	r9, r1
    c2fa:	2b00      	cmp	r3, #0
    c2fc:	f040 8083 	bne.w	c406 <__udivmoddi4+0x116>
    c300:	428a      	cmp	r2, r1
    c302:	4615      	mov	r5, r2
    c304:	d945      	bls.n	c392 <__udivmoddi4+0xa2>
    c306:	fab2 f282 	clz	r2, r2
    c30a:	b14a      	cbz	r2, c320 <__udivmoddi4+0x30>
    c30c:	f1c2 0720 	rsb	r7, r2, #32
    c310:	fa01 f302 	lsl.w	r3, r1, r2
    c314:	4095      	lsls	r5, r2
    c316:	4094      	lsls	r4, r2
    c318:	fa20 f707 	lsr.w	r7, r0, r7
    c31c:	ea47 0903 	orr.w	r9, r7, r3
    c320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c324:	0c23      	lsrs	r3, r4, #16
    c326:	fa1f f885 	uxth.w	r8, r5
    c32a:	fbb9 fcfe 	udiv	ip, r9, lr
    c32e:	fb0e 991c 	mls	r9, lr, ip, r9
    c332:	fb0c f108 	mul.w	r1, ip, r8
    c336:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    c33a:	4299      	cmp	r1, r3
    c33c:	d90a      	bls.n	c354 <__udivmoddi4+0x64>
    c33e:	18eb      	adds	r3, r5, r3
    c340:	bf2c      	ite	cs
    c342:	2001      	movcs	r0, #1
    c344:	2000      	movcc	r0, #0
    c346:	4299      	cmp	r1, r3
    c348:	d902      	bls.n	c350 <__udivmoddi4+0x60>
    c34a:	2800      	cmp	r0, #0
    c34c:	f000 811d 	beq.w	c58a <__udivmoddi4+0x29a>
    c350:	f10c 3cff 	add.w	ip, ip, #4294967295
    c354:	1a59      	subs	r1, r3, r1
    c356:	b2a3      	uxth	r3, r4
    c358:	fbb1 f0fe 	udiv	r0, r1, lr
    c35c:	fb0e 1110 	mls	r1, lr, r0, r1
    c360:	fb00 f808 	mul.w	r8, r0, r8
    c364:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c368:	45a0      	cmp	r8, r4
    c36a:	d905      	bls.n	c378 <__udivmoddi4+0x88>
    c36c:	192c      	adds	r4, r5, r4
    c36e:	d202      	bcs.n	c376 <__udivmoddi4+0x86>
    c370:	45a0      	cmp	r8, r4
    c372:	f200 810e 	bhi.w	c592 <__udivmoddi4+0x2a2>
    c376:	3801      	subs	r0, #1
    c378:	eba4 0408 	sub.w	r4, r4, r8
    c37c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c380:	2700      	movs	r7, #0
    c382:	b11e      	cbz	r6, c38c <__udivmoddi4+0x9c>
    c384:	40d4      	lsrs	r4, r2
    c386:	2300      	movs	r3, #0
    c388:	e9c6 4300 	strd	r4, r3, [r6]
    c38c:	4639      	mov	r1, r7
    c38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c392:	2a00      	cmp	r2, #0
    c394:	d051      	beq.n	c43a <__udivmoddi4+0x14a>
    c396:	fab2 f282 	clz	r2, r2
    c39a:	2a00      	cmp	r2, #0
    c39c:	f040 80af 	bne.w	c4fe <__udivmoddi4+0x20e>
    c3a0:	1b49      	subs	r1, r1, r5
    c3a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c3a6:	fa1f f885 	uxth.w	r8, r5
    c3aa:	2701      	movs	r7, #1
    c3ac:	0c23      	lsrs	r3, r4, #16
    c3ae:	fbb1 fcfe 	udiv	ip, r1, lr
    c3b2:	fb0e 111c 	mls	r1, lr, ip, r1
    c3b6:	fb08 f00c 	mul.w	r0, r8, ip
    c3ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c3be:	4298      	cmp	r0, r3
    c3c0:	d90a      	bls.n	c3d8 <__udivmoddi4+0xe8>
    c3c2:	18eb      	adds	r3, r5, r3
    c3c4:	bf2c      	ite	cs
    c3c6:	2101      	movcs	r1, #1
    c3c8:	2100      	movcc	r1, #0
    c3ca:	4298      	cmp	r0, r3
    c3cc:	d902      	bls.n	c3d4 <__udivmoddi4+0xe4>
    c3ce:	2900      	cmp	r1, #0
    c3d0:	f000 80d7 	beq.w	c582 <__udivmoddi4+0x292>
    c3d4:	f10c 3cff 	add.w	ip, ip, #4294967295
    c3d8:	1a19      	subs	r1, r3, r0
    c3da:	b2a3      	uxth	r3, r4
    c3dc:	fbb1 f0fe 	udiv	r0, r1, lr
    c3e0:	fb0e 1110 	mls	r1, lr, r0, r1
    c3e4:	fb08 f800 	mul.w	r8, r8, r0
    c3e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c3ec:	45a0      	cmp	r8, r4
    c3ee:	d905      	bls.n	c3fc <__udivmoddi4+0x10c>
    c3f0:	192c      	adds	r4, r5, r4
    c3f2:	d202      	bcs.n	c3fa <__udivmoddi4+0x10a>
    c3f4:	45a0      	cmp	r8, r4
    c3f6:	f200 80c1 	bhi.w	c57c <__udivmoddi4+0x28c>
    c3fa:	3801      	subs	r0, #1
    c3fc:	eba4 0408 	sub.w	r4, r4, r8
    c400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c404:	e7bd      	b.n	c382 <__udivmoddi4+0x92>
    c406:	428b      	cmp	r3, r1
    c408:	d908      	bls.n	c41c <__udivmoddi4+0x12c>
    c40a:	2e00      	cmp	r6, #0
    c40c:	d074      	beq.n	c4f8 <__udivmoddi4+0x208>
    c40e:	2700      	movs	r7, #0
    c410:	e9c6 0100 	strd	r0, r1, [r6]
    c414:	4638      	mov	r0, r7
    c416:	4639      	mov	r1, r7
    c418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c41c:	fab3 f783 	clz	r7, r3
    c420:	b967      	cbnz	r7, c43c <__udivmoddi4+0x14c>
    c422:	428b      	cmp	r3, r1
    c424:	f0c0 80a4 	bcc.w	c570 <__udivmoddi4+0x280>
    c428:	4282      	cmp	r2, r0
    c42a:	f240 80a1 	bls.w	c570 <__udivmoddi4+0x280>
    c42e:	4638      	mov	r0, r7
    c430:	2e00      	cmp	r6, #0
    c432:	d0ab      	beq.n	c38c <__udivmoddi4+0x9c>
    c434:	e9c6 4900 	strd	r4, r9, [r6]
    c438:	e7a8      	b.n	c38c <__udivmoddi4+0x9c>
    c43a:	deff      	udf	#255	; 0xff
    c43c:	f1c7 0520 	rsb	r5, r7, #32
    c440:	40bb      	lsls	r3, r7
    c442:	fa02 fc07 	lsl.w	ip, r2, r7
    c446:	fa01 f407 	lsl.w	r4, r1, r7
    c44a:	40ea      	lsrs	r2, r5
    c44c:	fa20 f805 	lsr.w	r8, r0, r5
    c450:	40e9      	lsrs	r1, r5
    c452:	fa00 fe07 	lsl.w	lr, r0, r7
    c456:	431a      	orrs	r2, r3
    c458:	ea48 0404 	orr.w	r4, r8, r4
    c45c:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c460:	0c20      	lsrs	r0, r4, #16
    c462:	fa1f f982 	uxth.w	r9, r2
    c466:	fbb1 faf8 	udiv	sl, r1, r8
    c46a:	fb08 111a 	mls	r1, r8, sl, r1
    c46e:	fb0a fb09 	mul.w	fp, sl, r9
    c472:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c476:	458b      	cmp	fp, r1
    c478:	d90a      	bls.n	c490 <__udivmoddi4+0x1a0>
    c47a:	1851      	adds	r1, r2, r1
    c47c:	bf2c      	ite	cs
    c47e:	2301      	movcs	r3, #1
    c480:	2300      	movcc	r3, #0
    c482:	458b      	cmp	fp, r1
    c484:	d902      	bls.n	c48c <__udivmoddi4+0x19c>
    c486:	2b00      	cmp	r3, #0
    c488:	f000 8088 	beq.w	c59c <__udivmoddi4+0x2ac>
    c48c:	f10a 3aff 	add.w	sl, sl, #4294967295
    c490:	eba1 010b 	sub.w	r1, r1, fp
    c494:	b2a4      	uxth	r4, r4
    c496:	fbb1 f0f8 	udiv	r0, r1, r8
    c49a:	fb08 1110 	mls	r1, r8, r0, r1
    c49e:	fb00 f909 	mul.w	r9, r0, r9
    c4a2:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    c4a6:	4589      	cmp	r9, r1
    c4a8:	d904      	bls.n	c4b4 <__udivmoddi4+0x1c4>
    c4aa:	1851      	adds	r1, r2, r1
    c4ac:	d201      	bcs.n	c4b2 <__udivmoddi4+0x1c2>
    c4ae:	4589      	cmp	r9, r1
    c4b0:	d87b      	bhi.n	c5aa <__udivmoddi4+0x2ba>
    c4b2:	3801      	subs	r0, #1
    c4b4:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c4b8:	eba1 0109 	sub.w	r1, r1, r9
    c4bc:	fba0 890c 	umull	r8, r9, r0, ip
    c4c0:	4549      	cmp	r1, r9
    c4c2:	4644      	mov	r4, r8
    c4c4:	464b      	mov	r3, r9
    c4c6:	d302      	bcc.n	c4ce <__udivmoddi4+0x1de>
    c4c8:	d106      	bne.n	c4d8 <__udivmoddi4+0x1e8>
    c4ca:	45c6      	cmp	lr, r8
    c4cc:	d204      	bcs.n	c4d8 <__udivmoddi4+0x1e8>
    c4ce:	3801      	subs	r0, #1
    c4d0:	ebb8 040c 	subs.w	r4, r8, ip
    c4d4:	eb69 0302 	sbc.w	r3, r9, r2
    c4d8:	2e00      	cmp	r6, #0
    c4da:	d05d      	beq.n	c598 <__udivmoddi4+0x2a8>
    c4dc:	ebbe 0204 	subs.w	r2, lr, r4
    c4e0:	eb61 0103 	sbc.w	r1, r1, r3
    c4e4:	fa01 f505 	lsl.w	r5, r1, r5
    c4e8:	fa22 f307 	lsr.w	r3, r2, r7
    c4ec:	40f9      	lsrs	r1, r7
    c4ee:	2700      	movs	r7, #0
    c4f0:	431d      	orrs	r5, r3
    c4f2:	e9c6 5100 	strd	r5, r1, [r6]
    c4f6:	e749      	b.n	c38c <__udivmoddi4+0x9c>
    c4f8:	4637      	mov	r7, r6
    c4fa:	4630      	mov	r0, r6
    c4fc:	e746      	b.n	c38c <__udivmoddi4+0x9c>
    c4fe:	f1c2 0020 	rsb	r0, r2, #32
    c502:	4095      	lsls	r5, r2
    c504:	fa01 f702 	lsl.w	r7, r1, r2
    c508:	fa21 f300 	lsr.w	r3, r1, r0
    c50c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c510:	fa24 f100 	lsr.w	r1, r4, r0
    c514:	fa1f f885 	uxth.w	r8, r5
    c518:	4094      	lsls	r4, r2
    c51a:	4339      	orrs	r1, r7
    c51c:	fbb3 f0fe 	udiv	r0, r3, lr
    c520:	0c0f      	lsrs	r7, r1, #16
    c522:	fb0e 3310 	mls	r3, lr, r0, r3
    c526:	fb00 fc08 	mul.w	ip, r0, r8
    c52a:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    c52e:	459c      	cmp	ip, r3
    c530:	d907      	bls.n	c542 <__udivmoddi4+0x252>
    c532:	18eb      	adds	r3, r5, r3
    c534:	bf2c      	ite	cs
    c536:	2701      	movcs	r7, #1
    c538:	2700      	movcc	r7, #0
    c53a:	459c      	cmp	ip, r3
    c53c:	d900      	bls.n	c540 <__udivmoddi4+0x250>
    c53e:	b38f      	cbz	r7, c5a4 <__udivmoddi4+0x2b4>
    c540:	3801      	subs	r0, #1
    c542:	eba3 030c 	sub.w	r3, r3, ip
    c546:	b289      	uxth	r1, r1
    c548:	fbb3 f7fe 	udiv	r7, r3, lr
    c54c:	fb0e 3317 	mls	r3, lr, r7, r3
    c550:	fb07 fc08 	mul.w	ip, r7, r8
    c554:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c558:	458c      	cmp	ip, r1
    c55a:	d904      	bls.n	c566 <__udivmoddi4+0x276>
    c55c:	1869      	adds	r1, r5, r1
    c55e:	d201      	bcs.n	c564 <__udivmoddi4+0x274>
    c560:	458c      	cmp	ip, r1
    c562:	d825      	bhi.n	c5b0 <__udivmoddi4+0x2c0>
    c564:	3f01      	subs	r7, #1
    c566:	eba1 010c 	sub.w	r1, r1, ip
    c56a:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    c56e:	e71d      	b.n	c3ac <__udivmoddi4+0xbc>
    c570:	1a84      	subs	r4, r0, r2
    c572:	eb61 0303 	sbc.w	r3, r1, r3
    c576:	2001      	movs	r0, #1
    c578:	4699      	mov	r9, r3
    c57a:	e759      	b.n	c430 <__udivmoddi4+0x140>
    c57c:	3802      	subs	r0, #2
    c57e:	442c      	add	r4, r5
    c580:	e73c      	b.n	c3fc <__udivmoddi4+0x10c>
    c582:	f1ac 0c02 	sub.w	ip, ip, #2
    c586:	442b      	add	r3, r5
    c588:	e726      	b.n	c3d8 <__udivmoddi4+0xe8>
    c58a:	f1ac 0c02 	sub.w	ip, ip, #2
    c58e:	442b      	add	r3, r5
    c590:	e6e0      	b.n	c354 <__udivmoddi4+0x64>
    c592:	3802      	subs	r0, #2
    c594:	442c      	add	r4, r5
    c596:	e6ef      	b.n	c378 <__udivmoddi4+0x88>
    c598:	4637      	mov	r7, r6
    c59a:	e6f7      	b.n	c38c <__udivmoddi4+0x9c>
    c59c:	f1aa 0a02 	sub.w	sl, sl, #2
    c5a0:	4411      	add	r1, r2
    c5a2:	e775      	b.n	c490 <__udivmoddi4+0x1a0>
    c5a4:	3802      	subs	r0, #2
    c5a6:	442b      	add	r3, r5
    c5a8:	e7cb      	b.n	c542 <__udivmoddi4+0x252>
    c5aa:	3802      	subs	r0, #2
    c5ac:	4411      	add	r1, r2
    c5ae:	e781      	b.n	c4b4 <__udivmoddi4+0x1c4>
    c5b0:	3f02      	subs	r7, #2
    c5b2:	4429      	add	r1, r5
    c5b4:	e7d7      	b.n	c566 <__udivmoddi4+0x276>
    c5b6:	bf00      	nop

0000c5b8 <__aeabi_idiv0>:
    c5b8:	4770      	bx	lr
    c5ba:	bf00      	nop

0000c5bc <ocrypto_bigint_add128>:
    c5bc:	b470      	push	{r4, r5, r6}
    c5be:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
    c5c2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c5c6:	185b      	adds	r3, r3, r1
    c5c8:	eb54 040c 	adcs.w	r4, r4, ip
    c5cc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c5d0:	414d      	adcs	r5, r1
    c5d2:	eb56 060c 	adcs.w	r6, r6, ip
    c5d6:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
    c5da:	4180      	sbcs	r0, r0
    c5dc:	3001      	adds	r0, #1
    c5de:	bc70      	pop	{r4, r5, r6}
    c5e0:	4770      	bx	lr

0000c5e2 <ocrypto_bigint_sub128>:
    c5e2:	b470      	push	{r4, r5, r6}
    c5e4:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
    c5e8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c5ec:	1a5b      	subs	r3, r3, r1
    c5ee:	eb74 040c 	sbcs.w	r4, r4, ip
    c5f2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c5f6:	418d      	sbcs	r5, r1
    c5f8:	eb76 060c 	sbcs.w	r6, r6, ip
    c5fc:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
    c600:	4180      	sbcs	r0, r0
    c602:	4240      	negs	r0, r0
    c604:	bc70      	pop	{r4, r5, r6}
    c606:	4770      	bx	lr

0000c608 <ocrypto_bigint_add256>:
    c608:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c60c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    c610:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c614:	185b      	adds	r3, r3, r1
    c616:	eb54 040c 	adcs.w	r4, r4, ip
    c61a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c61e:	414d      	adcs	r5, r1
    c620:	eb56 060c 	adcs.w	r6, r6, ip
    c624:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c628:	414f      	adcs	r7, r1
    c62a:	eb58 080c 	adcs.w	r8, r8, ip
    c62e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c632:	eb59 0901 	adcs.w	r9, r9, r1
    c636:	eb5a 0a0c 	adcs.w	sl, sl, ip
    c63a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    c63e:	4180      	sbcs	r0, r0
    c640:	3001      	adds	r0, #1
    c642:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c646:	4770      	bx	lr

0000c648 <ocrypto_bigint_sub256>:
    c648:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c64c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    c650:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c654:	1a5b      	subs	r3, r3, r1
    c656:	eb74 040c 	sbcs.w	r4, r4, ip
    c65a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c65e:	418d      	sbcs	r5, r1
    c660:	eb76 060c 	sbcs.w	r6, r6, ip
    c664:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c668:	418f      	sbcs	r7, r1
    c66a:	eb78 080c 	sbcs.w	r8, r8, ip
    c66e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c672:	eb79 0901 	sbcs.w	r9, r9, r1
    c676:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    c67a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    c67e:	4180      	sbcs	r0, r0
    c680:	4240      	negs	r0, r0
    c682:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c686:	4770      	bx	lr

0000c688 <ocrypto_bigint_cadd256>:
    c688:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c68c:	4252      	negs	r2, r2
    c68e:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c692:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c696:	4017      	ands	r7, r2
    c698:	19db      	adds	r3, r3, r7
    c69a:	ea18 0802 	ands.w	r8, r8, r2
    c69e:	eb54 0408 	adcs.w	r4, r4, r8
    c6a2:	ea19 0902 	ands.w	r9, r9, r2
    c6a6:	eb55 0509 	adcs.w	r5, r5, r9
    c6aa:	ea1a 0a02 	ands.w	sl, sl, r2
    c6ae:	eb56 060a 	adcs.w	r6, r6, sl
    c6b2:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c6b4:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c6b8:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c6bc:	4017      	ands	r7, r2
    c6be:	417b      	adcs	r3, r7
    c6c0:	ea18 0802 	ands.w	r8, r8, r2
    c6c4:	eb54 0408 	adcs.w	r4, r4, r8
    c6c8:	ea19 0902 	ands.w	r9, r9, r2
    c6cc:	eb55 0509 	adcs.w	r5, r5, r9
    c6d0:	ea1a 0a02 	ands.w	sl, sl, r2
    c6d4:	eb56 060a 	adcs.w	r6, r6, sl
    c6d8:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c6da:	4180      	sbcs	r0, r0
    c6dc:	3001      	adds	r0, #1
    c6de:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c6e2:	4770      	bx	lr

0000c6e4 <ocrypto_bigint_csub256>:
    c6e4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c6e8:	4252      	negs	r2, r2
    c6ea:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c6ee:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c6f2:	4017      	ands	r7, r2
    c6f4:	1bdb      	subs	r3, r3, r7
    c6f6:	ea18 0802 	ands.w	r8, r8, r2
    c6fa:	eb74 0408 	sbcs.w	r4, r4, r8
    c6fe:	ea19 0902 	ands.w	r9, r9, r2
    c702:	eb75 0509 	sbcs.w	r5, r5, r9
    c706:	ea1a 0a02 	ands.w	sl, sl, r2
    c70a:	eb76 060a 	sbcs.w	r6, r6, sl
    c70e:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c710:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c714:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c718:	4017      	ands	r7, r2
    c71a:	41bb      	sbcs	r3, r7
    c71c:	ea18 0802 	ands.w	r8, r8, r2
    c720:	eb74 0408 	sbcs.w	r4, r4, r8
    c724:	ea19 0902 	ands.w	r9, r9, r2
    c728:	eb75 0509 	sbcs.w	r5, r5, r9
    c72c:	ea1a 0a02 	ands.w	sl, sl, r2
    c730:	eb76 060a 	sbcs.w	r6, r6, sl
    c734:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c736:	4180      	sbcs	r0, r0
    c738:	4240      	negs	r0, r0
    c73a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c73e:	4770      	bx	lr

0000c740 <cswap64>:
    c740:	e890 0030 	ldmia.w	r0, {r4, r5}
    c744:	e891 00c0 	ldmia.w	r1, {r6, r7}
    c748:	1ba3      	subs	r3, r4, r6
    c74a:	4013      	ands	r3, r2
    c74c:	1ae4      	subs	r4, r4, r3
    c74e:	18f6      	adds	r6, r6, r3
    c750:	1beb      	subs	r3, r5, r7
    c752:	4013      	ands	r3, r2
    c754:	1aed      	subs	r5, r5, r3
    c756:	18ff      	adds	r7, r7, r3
    c758:	c030      	stmia	r0!, {r4, r5}
    c75a:	c1c0      	stmia	r1!, {r6, r7}
    c75c:	4770      	bx	lr

0000c75e <ocrypto_bigint_cswap256>:
    c75e:	b5f0      	push	{r4, r5, r6, r7, lr}
    c760:	4252      	negs	r2, r2
    c762:	f7ff ffed 	bl	c740 <cswap64>
    c766:	f7ff ffeb 	bl	c740 <cswap64>
    c76a:	f7ff ffe9 	bl	c740 <cswap64>
    c76e:	f7ff ffe7 	bl	c740 <cswap64>
    c772:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c774 <ocrypto_bigint_mul128>:
    c774:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c778:	c93a      	ldmia	r1, {r1, r3, r4, r5}
    c77a:	6816      	ldr	r6, [r2, #0]
    c77c:	fba1 9a06 	umull	r9, sl, r1, r6
    c780:	f04f 0c00 	mov.w	ip, #0
    c784:	fbe3 ac06 	umlal	sl, ip, r3, r6
    c788:	f04f 0700 	mov.w	r7, #0
    c78c:	fbe4 c706 	umlal	ip, r7, r4, r6
    c790:	f04f 0800 	mov.w	r8, #0
    c794:	fbe5 7806 	umlal	r7, r8, r5, r6
    c798:	f840 9b04 	str.w	r9, [r0], #4
    c79c:	6856      	ldr	r6, [r2, #4]
    c79e:	f04f 0900 	mov.w	r9, #0
    c7a2:	fbe1 a906 	umlal	sl, r9, r1, r6
    c7a6:	eb1c 0c09 	adds.w	ip, ip, r9
    c7aa:	f04f 0900 	mov.w	r9, #0
    c7ae:	eb49 0909 	adc.w	r9, r9, r9
    c7b2:	fbe3 c906 	umlal	ip, r9, r3, r6
    c7b6:	eb17 0709 	adds.w	r7, r7, r9
    c7ba:	f04f 0900 	mov.w	r9, #0
    c7be:	eb49 0909 	adc.w	r9, r9, r9
    c7c2:	fbe4 7906 	umlal	r7, r9, r4, r6
    c7c6:	eb18 0809 	adds.w	r8, r8, r9
    c7ca:	f04f 0900 	mov.w	r9, #0
    c7ce:	eb49 0909 	adc.w	r9, r9, r9
    c7d2:	fbe5 8906 	umlal	r8, r9, r5, r6
    c7d6:	f840 ab04 	str.w	sl, [r0], #4
    c7da:	6896      	ldr	r6, [r2, #8]
    c7dc:	f04f 0a00 	mov.w	sl, #0
    c7e0:	fbe1 ca06 	umlal	ip, sl, r1, r6
    c7e4:	eb17 070a 	adds.w	r7, r7, sl
    c7e8:	f04f 0a00 	mov.w	sl, #0
    c7ec:	eb4a 0a0a 	adc.w	sl, sl, sl
    c7f0:	fbe3 7a06 	umlal	r7, sl, r3, r6
    c7f4:	eb18 080a 	adds.w	r8, r8, sl
    c7f8:	f04f 0a00 	mov.w	sl, #0
    c7fc:	eb4a 0a0a 	adc.w	sl, sl, sl
    c800:	fbe4 8a06 	umlal	r8, sl, r4, r6
    c804:	eb19 090a 	adds.w	r9, r9, sl
    c808:	f04f 0a00 	mov.w	sl, #0
    c80c:	eb4a 0a0a 	adc.w	sl, sl, sl
    c810:	fbe5 9a06 	umlal	r9, sl, r5, r6
    c814:	f840 cb04 	str.w	ip, [r0], #4
    c818:	68d6      	ldr	r6, [r2, #12]
    c81a:	f04f 0c00 	mov.w	ip, #0
    c81e:	fbe1 7c06 	umlal	r7, ip, r1, r6
    c822:	eb18 080c 	adds.w	r8, r8, ip
    c826:	f04f 0c00 	mov.w	ip, #0
    c82a:	eb4c 0c0c 	adc.w	ip, ip, ip
    c82e:	fbe3 8c06 	umlal	r8, ip, r3, r6
    c832:	eb19 090c 	adds.w	r9, r9, ip
    c836:	f04f 0c00 	mov.w	ip, #0
    c83a:	eb4c 0c0c 	adc.w	ip, ip, ip
    c83e:	fbe4 9c06 	umlal	r9, ip, r4, r6
    c842:	eb1a 0a0c 	adds.w	sl, sl, ip
    c846:	f04f 0c00 	mov.w	ip, #0
    c84a:	eb4c 0c0c 	adc.w	ip, ip, ip
    c84e:	fbe5 ac06 	umlal	sl, ip, r5, r6
    c852:	e880 1780 	stmia.w	r0, {r7, r8, r9, sl, ip}
    c856:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c85a:	4770      	bx	lr

0000c85c <ocrypto_bigint_sqr256>:
    c85c:	460a      	mov	r2, r1

0000c85e <ocrypto_bigint_mul256>:
    c85e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c862:	ec41 0a14 	vmov	s8, s9, r0, r1
    c866:	ec92 0a08 	vldmia	r2, {s0-s7}
    c86a:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    c86c:	ee10 0a10 	vmov	r0, s0
    c870:	fba1 7800 	umull	r7, r8, r1, r0
    c874:	f04f 0900 	mov.w	r9, #0
    c878:	fbe2 8900 	umlal	r8, r9, r2, r0
    c87c:	f04f 0a00 	mov.w	sl, #0
    c880:	fbe3 9a00 	umlal	r9, sl, r3, r0
    c884:	f04f 0b00 	mov.w	fp, #0
    c888:	fbe4 ab00 	umlal	sl, fp, r4, r0
    c88c:	ee12 0a10 	vmov	r0, s4
    c890:	f04f 0c00 	mov.w	ip, #0
    c894:	fbe1 bc00 	umlal	fp, ip, r1, r0
    c898:	f04f 0e00 	mov.w	lr, #0
    c89c:	fbe2 ce00 	umlal	ip, lr, r2, r0
    c8a0:	f04f 0500 	mov.w	r5, #0
    c8a4:	fbe3 e500 	umlal	lr, r5, r3, r0
    c8a8:	f04f 0600 	mov.w	r6, #0
    c8ac:	fbe4 5600 	umlal	r5, r6, r4, r0
    c8b0:	ee05 7a10 	vmov	s10, r7
    c8b4:	ee10 0a90 	vmov	r0, s1
    c8b8:	f04f 0700 	mov.w	r7, #0
    c8bc:	fbe1 8700 	umlal	r8, r7, r1, r0
    c8c0:	eb19 0907 	adds.w	r9, r9, r7
    c8c4:	f04f 0700 	mov.w	r7, #0
    c8c8:	eb47 0707 	adc.w	r7, r7, r7
    c8cc:	fbe2 9700 	umlal	r9, r7, r2, r0
    c8d0:	eb1a 0a07 	adds.w	sl, sl, r7
    c8d4:	f04f 0700 	mov.w	r7, #0
    c8d8:	eb47 0707 	adc.w	r7, r7, r7
    c8dc:	fbe3 a700 	umlal	sl, r7, r3, r0
    c8e0:	eb1b 0b07 	adds.w	fp, fp, r7
    c8e4:	f04f 0700 	mov.w	r7, #0
    c8e8:	eb47 0707 	adc.w	r7, r7, r7
    c8ec:	fbe4 b700 	umlal	fp, r7, r4, r0
    c8f0:	ee12 0a90 	vmov	r0, s5
    c8f4:	eb1c 0c07 	adds.w	ip, ip, r7
    c8f8:	f04f 0700 	mov.w	r7, #0
    c8fc:	eb47 0707 	adc.w	r7, r7, r7
    c900:	fbe1 c700 	umlal	ip, r7, r1, r0
    c904:	eb1e 0e07 	adds.w	lr, lr, r7
    c908:	f04f 0700 	mov.w	r7, #0
    c90c:	eb47 0707 	adc.w	r7, r7, r7
    c910:	fbe2 e700 	umlal	lr, r7, r2, r0
    c914:	19ed      	adds	r5, r5, r7
    c916:	f04f 0700 	mov.w	r7, #0
    c91a:	eb47 0707 	adc.w	r7, r7, r7
    c91e:	fbe3 5700 	umlal	r5, r7, r3, r0
    c922:	19f6      	adds	r6, r6, r7
    c924:	f04f 0700 	mov.w	r7, #0
    c928:	eb47 0707 	adc.w	r7, r7, r7
    c92c:	fbe4 6700 	umlal	r6, r7, r4, r0
    c930:	ee05 8a90 	vmov	s11, r8
    c934:	ee11 0a10 	vmov	r0, s2
    c938:	f04f 0800 	mov.w	r8, #0
    c93c:	fbe1 9800 	umlal	r9, r8, r1, r0
    c940:	eb1a 0a08 	adds.w	sl, sl, r8
    c944:	f04f 0800 	mov.w	r8, #0
    c948:	eb48 0808 	adc.w	r8, r8, r8
    c94c:	fbe2 a800 	umlal	sl, r8, r2, r0
    c950:	eb1b 0b08 	adds.w	fp, fp, r8
    c954:	f04f 0800 	mov.w	r8, #0
    c958:	eb48 0808 	adc.w	r8, r8, r8
    c95c:	fbe3 b800 	umlal	fp, r8, r3, r0
    c960:	eb1c 0c08 	adds.w	ip, ip, r8
    c964:	f04f 0800 	mov.w	r8, #0
    c968:	eb48 0808 	adc.w	r8, r8, r8
    c96c:	fbe4 c800 	umlal	ip, r8, r4, r0
    c970:	ee13 0a10 	vmov	r0, s6
    c974:	eb1e 0e08 	adds.w	lr, lr, r8
    c978:	f04f 0800 	mov.w	r8, #0
    c97c:	eb48 0808 	adc.w	r8, r8, r8
    c980:	fbe1 e800 	umlal	lr, r8, r1, r0
    c984:	eb15 0508 	adds.w	r5, r5, r8
    c988:	f04f 0800 	mov.w	r8, #0
    c98c:	eb48 0808 	adc.w	r8, r8, r8
    c990:	fbe2 5800 	umlal	r5, r8, r2, r0
    c994:	eb16 0608 	adds.w	r6, r6, r8
    c998:	f04f 0800 	mov.w	r8, #0
    c99c:	eb48 0808 	adc.w	r8, r8, r8
    c9a0:	fbe3 6800 	umlal	r6, r8, r3, r0
    c9a4:	eb17 0708 	adds.w	r7, r7, r8
    c9a8:	f04f 0800 	mov.w	r8, #0
    c9ac:	eb48 0808 	adc.w	r8, r8, r8
    c9b0:	fbe4 7800 	umlal	r7, r8, r4, r0
    c9b4:	ee06 9a10 	vmov	s12, r9
    c9b8:	ee11 0a90 	vmov	r0, s3
    c9bc:	f04f 0900 	mov.w	r9, #0
    c9c0:	fbe1 a900 	umlal	sl, r9, r1, r0
    c9c4:	eb1b 0b09 	adds.w	fp, fp, r9
    c9c8:	f04f 0900 	mov.w	r9, #0
    c9cc:	eb49 0909 	adc.w	r9, r9, r9
    c9d0:	fbe2 b900 	umlal	fp, r9, r2, r0
    c9d4:	eb1c 0c09 	adds.w	ip, ip, r9
    c9d8:	f04f 0900 	mov.w	r9, #0
    c9dc:	eb49 0909 	adc.w	r9, r9, r9
    c9e0:	fbe3 c900 	umlal	ip, r9, r3, r0
    c9e4:	eb1e 0e09 	adds.w	lr, lr, r9
    c9e8:	f04f 0900 	mov.w	r9, #0
    c9ec:	eb49 0909 	adc.w	r9, r9, r9
    c9f0:	fbe4 e900 	umlal	lr, r9, r4, r0
    c9f4:	ee13 0a90 	vmov	r0, s7
    c9f8:	eb15 0509 	adds.w	r5, r5, r9
    c9fc:	f04f 0900 	mov.w	r9, #0
    ca00:	eb49 0909 	adc.w	r9, r9, r9
    ca04:	fbe1 5900 	umlal	r5, r9, r1, r0
    ca08:	eb16 0609 	adds.w	r6, r6, r9
    ca0c:	f04f 0900 	mov.w	r9, #0
    ca10:	eb49 0909 	adc.w	r9, r9, r9
    ca14:	fbe2 6900 	umlal	r6, r9, r2, r0
    ca18:	eb17 0709 	adds.w	r7, r7, r9
    ca1c:	f04f 0900 	mov.w	r9, #0
    ca20:	eb49 0909 	adc.w	r9, r9, r9
    ca24:	fbe3 7900 	umlal	r7, r9, r3, r0
    ca28:	eb18 0809 	adds.w	r8, r8, r9
    ca2c:	f04f 0900 	mov.w	r9, #0
    ca30:	eb49 0909 	adc.w	r9, r9, r9
    ca34:	fbe4 8900 	umlal	r8, r9, r4, r0
    ca38:	ee06 aa90 	vmov	s13, sl
    ca3c:	ee14 1a90 	vmov	r1, s9
    ca40:	f101 0110 	add.w	r1, r1, #16
    ca44:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    ca46:	ee10 0a10 	vmov	r0, s0
    ca4a:	f04f 0a00 	mov.w	sl, #0
    ca4e:	fbe1 ba00 	umlal	fp, sl, r1, r0
    ca52:	eb1c 0c0a 	adds.w	ip, ip, sl
    ca56:	f04f 0a00 	mov.w	sl, #0
    ca5a:	eb4a 0a0a 	adc.w	sl, sl, sl
    ca5e:	fbe2 ca00 	umlal	ip, sl, r2, r0
    ca62:	eb1e 0e0a 	adds.w	lr, lr, sl
    ca66:	f04f 0a00 	mov.w	sl, #0
    ca6a:	eb4a 0a0a 	adc.w	sl, sl, sl
    ca6e:	fbe3 ea00 	umlal	lr, sl, r3, r0
    ca72:	eb15 050a 	adds.w	r5, r5, sl
    ca76:	f04f 0a00 	mov.w	sl, #0
    ca7a:	eb4a 0a0a 	adc.w	sl, sl, sl
    ca7e:	fbe4 5a00 	umlal	r5, sl, r4, r0
    ca82:	ee12 0a10 	vmov	r0, s4
    ca86:	eb16 060a 	adds.w	r6, r6, sl
    ca8a:	f04f 0a00 	mov.w	sl, #0
    ca8e:	eb4a 0a0a 	adc.w	sl, sl, sl
    ca92:	fbe1 6a00 	umlal	r6, sl, r1, r0
    ca96:	eb17 070a 	adds.w	r7, r7, sl
    ca9a:	f04f 0a00 	mov.w	sl, #0
    ca9e:	eb4a 0a0a 	adc.w	sl, sl, sl
    caa2:	fbe2 7a00 	umlal	r7, sl, r2, r0
    caa6:	eb18 080a 	adds.w	r8, r8, sl
    caaa:	f04f 0a00 	mov.w	sl, #0
    caae:	eb4a 0a0a 	adc.w	sl, sl, sl
    cab2:	fbe3 8a00 	umlal	r8, sl, r3, r0
    cab6:	eb19 090a 	adds.w	r9, r9, sl
    caba:	f04f 0a00 	mov.w	sl, #0
    cabe:	eb4a 0a0a 	adc.w	sl, sl, sl
    cac2:	fbe4 9a00 	umlal	r9, sl, r4, r0
    cac6:	ee07 ba10 	vmov	s14, fp
    caca:	ee10 0a90 	vmov	r0, s1
    cace:	f04f 0b00 	mov.w	fp, #0
    cad2:	fbe1 cb00 	umlal	ip, fp, r1, r0
    cad6:	eb1e 0e0b 	adds.w	lr, lr, fp
    cada:	f04f 0b00 	mov.w	fp, #0
    cade:	eb4b 0b0b 	adc.w	fp, fp, fp
    cae2:	fbe2 eb00 	umlal	lr, fp, r2, r0
    cae6:	eb15 050b 	adds.w	r5, r5, fp
    caea:	f04f 0b00 	mov.w	fp, #0
    caee:	eb4b 0b0b 	adc.w	fp, fp, fp
    caf2:	fbe3 5b00 	umlal	r5, fp, r3, r0
    caf6:	eb16 060b 	adds.w	r6, r6, fp
    cafa:	f04f 0b00 	mov.w	fp, #0
    cafe:	eb4b 0b0b 	adc.w	fp, fp, fp
    cb02:	fbe4 6b00 	umlal	r6, fp, r4, r0
    cb06:	ee12 0a90 	vmov	r0, s5
    cb0a:	eb17 070b 	adds.w	r7, r7, fp
    cb0e:	f04f 0b00 	mov.w	fp, #0
    cb12:	eb4b 0b0b 	adc.w	fp, fp, fp
    cb16:	fbe1 7b00 	umlal	r7, fp, r1, r0
    cb1a:	eb18 080b 	adds.w	r8, r8, fp
    cb1e:	f04f 0b00 	mov.w	fp, #0
    cb22:	eb4b 0b0b 	adc.w	fp, fp, fp
    cb26:	fbe2 8b00 	umlal	r8, fp, r2, r0
    cb2a:	eb19 090b 	adds.w	r9, r9, fp
    cb2e:	f04f 0b00 	mov.w	fp, #0
    cb32:	eb4b 0b0b 	adc.w	fp, fp, fp
    cb36:	fbe3 9b00 	umlal	r9, fp, r3, r0
    cb3a:	eb1a 0a0b 	adds.w	sl, sl, fp
    cb3e:	f04f 0b00 	mov.w	fp, #0
    cb42:	eb4b 0b0b 	adc.w	fp, fp, fp
    cb46:	fbe4 ab00 	umlal	sl, fp, r4, r0
    cb4a:	ee07 ca90 	vmov	s15, ip
    cb4e:	ee11 0a10 	vmov	r0, s2
    cb52:	f04f 0c00 	mov.w	ip, #0
    cb56:	fbe1 ec00 	umlal	lr, ip, r1, r0
    cb5a:	eb15 050c 	adds.w	r5, r5, ip
    cb5e:	f04f 0c00 	mov.w	ip, #0
    cb62:	eb4c 0c0c 	adc.w	ip, ip, ip
    cb66:	fbe2 5c00 	umlal	r5, ip, r2, r0
    cb6a:	eb16 060c 	adds.w	r6, r6, ip
    cb6e:	f04f 0c00 	mov.w	ip, #0
    cb72:	eb4c 0c0c 	adc.w	ip, ip, ip
    cb76:	fbe3 6c00 	umlal	r6, ip, r3, r0
    cb7a:	eb17 070c 	adds.w	r7, r7, ip
    cb7e:	f04f 0c00 	mov.w	ip, #0
    cb82:	eb4c 0c0c 	adc.w	ip, ip, ip
    cb86:	fbe4 7c00 	umlal	r7, ip, r4, r0
    cb8a:	ee13 0a10 	vmov	r0, s6
    cb8e:	eb18 080c 	adds.w	r8, r8, ip
    cb92:	f04f 0c00 	mov.w	ip, #0
    cb96:	eb4c 0c0c 	adc.w	ip, ip, ip
    cb9a:	fbe1 8c00 	umlal	r8, ip, r1, r0
    cb9e:	eb19 090c 	adds.w	r9, r9, ip
    cba2:	f04f 0c00 	mov.w	ip, #0
    cba6:	eb4c 0c0c 	adc.w	ip, ip, ip
    cbaa:	fbe2 9c00 	umlal	r9, ip, r2, r0
    cbae:	eb1a 0a0c 	adds.w	sl, sl, ip
    cbb2:	f04f 0c00 	mov.w	ip, #0
    cbb6:	eb4c 0c0c 	adc.w	ip, ip, ip
    cbba:	fbe3 ac00 	umlal	sl, ip, r3, r0
    cbbe:	eb1b 0b0c 	adds.w	fp, fp, ip
    cbc2:	f04f 0c00 	mov.w	ip, #0
    cbc6:	eb4c 0c0c 	adc.w	ip, ip, ip
    cbca:	fbe4 bc00 	umlal	fp, ip, r4, r0
    cbce:	ee08 ea10 	vmov	s16, lr
    cbd2:	ee11 0a90 	vmov	r0, s3
    cbd6:	f04f 0e00 	mov.w	lr, #0
    cbda:	fbe1 5e00 	umlal	r5, lr, r1, r0
    cbde:	eb16 060e 	adds.w	r6, r6, lr
    cbe2:	f04f 0e00 	mov.w	lr, #0
    cbe6:	eb4e 0e0e 	adc.w	lr, lr, lr
    cbea:	fbe2 6e00 	umlal	r6, lr, r2, r0
    cbee:	eb17 070e 	adds.w	r7, r7, lr
    cbf2:	f04f 0e00 	mov.w	lr, #0
    cbf6:	eb4e 0e0e 	adc.w	lr, lr, lr
    cbfa:	fbe3 7e00 	umlal	r7, lr, r3, r0
    cbfe:	eb18 080e 	adds.w	r8, r8, lr
    cc02:	f04f 0e00 	mov.w	lr, #0
    cc06:	eb4e 0e0e 	adc.w	lr, lr, lr
    cc0a:	fbe4 8e00 	umlal	r8, lr, r4, r0
    cc0e:	ee13 0a90 	vmov	r0, s7
    cc12:	eb19 090e 	adds.w	r9, r9, lr
    cc16:	f04f 0e00 	mov.w	lr, #0
    cc1a:	eb4e 0e0e 	adc.w	lr, lr, lr
    cc1e:	fbe1 9e00 	umlal	r9, lr, r1, r0
    cc22:	eb1a 0a0e 	adds.w	sl, sl, lr
    cc26:	f04f 0e00 	mov.w	lr, #0
    cc2a:	eb4e 0e0e 	adc.w	lr, lr, lr
    cc2e:	fbe2 ae00 	umlal	sl, lr, r2, r0
    cc32:	eb1b 0b0e 	adds.w	fp, fp, lr
    cc36:	f04f 0e00 	mov.w	lr, #0
    cc3a:	eb4e 0e0e 	adc.w	lr, lr, lr
    cc3e:	fbe3 be00 	umlal	fp, lr, r3, r0
    cc42:	eb1c 0c0e 	adds.w	ip, ip, lr
    cc46:	f04f 0e00 	mov.w	lr, #0
    cc4a:	eb4e 0e0e 	adc.w	lr, lr, lr
    cc4e:	fbe4 ce00 	umlal	ip, lr, r4, r0
    cc52:	ee14 0a10 	vmov	r0, s8
    cc56:	eca0 5a07 	vstmia	r0!, {s10-s16}
    cc5a:	e880 5fe0 	stmia.w	r0, {r5, r6, r7, r8, r9, sl, fp, ip, lr}
    cc5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc62:	bf00      	nop

0000cc64 <ocrypto_constant_time_equal>:
    cc64:	b430      	push	{r4, r5}
    cc66:	f04f 0300 	mov.w	r3, #0

0000cc6a <constant_time_equal_loop>:
    cc6a:	f810 4b01 	ldrb.w	r4, [r0], #1
    cc6e:	f811 5b01 	ldrb.w	r5, [r1], #1
    cc72:	3a01      	subs	r2, #1
    cc74:	ea84 0405 	eor.w	r4, r4, r5
    cc78:	ea43 0304 	orr.w	r3, r3, r4
    cc7c:	d1f5      	bne.n	cc6a <constant_time_equal_loop>
    cc7e:	f1a3 0301 	sub.w	r3, r3, #1
    cc82:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    cc86:	bc30      	pop	{r4, r5}
    cc88:	4770      	bx	lr

0000cc8a <ocrypto_constant_time_is_zero>:
    cc8a:	f04f 0300 	mov.w	r3, #0

0000cc8e <constant_time_is_zero_loop>:
    cc8e:	f810 2b01 	ldrb.w	r2, [r0], #1
    cc92:	3901      	subs	r1, #1
    cc94:	ea43 0302 	orr.w	r3, r3, r2
    cc98:	d1f9      	bne.n	cc8e <constant_time_is_zero_loop>
    cc9a:	f1a3 0301 	sub.w	r3, r3, #1
    cc9e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    cca2:	4770      	bx	lr

0000cca4 <ocrypto_constant_time_copy>:
    cca4:	f811 3b01 	ldrb.w	r3, [r1], #1
    cca8:	f800 3b01 	strb.w	r3, [r0], #1
    ccac:	3a01      	subs	r2, #1
    ccae:	d1f9      	bne.n	cca4 <ocrypto_constant_time_copy>
    ccb0:	4770      	bx	lr

0000ccb2 <ocrypto_constant_time_fill_zero>:
    ccb2:	2200      	movs	r2, #0

0000ccb4 <constant_time_fill_zero_loop>:
    ccb4:	f800 2b01 	strb.w	r2, [r0], #1
    ccb8:	3901      	subs	r1, #1
    ccba:	d1fb      	bne.n	ccb4 <constant_time_fill_zero_loop>
    ccbc:	4770      	bx	lr
    ccbe:	bf00      	nop

0000ccc0 <ocrypto_mod_p256_add>:
    ccc0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    ccc4:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    ccc8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cccc:	185b      	adds	r3, r3, r1
    ccce:	eb54 040c 	adcs.w	r4, r4, ip
    ccd2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ccd6:	414d      	adcs	r5, r1
    ccd8:	eb56 060c 	adcs.w	r6, r6, ip
    ccdc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cce0:	414f      	adcs	r7, r1
    cce2:	eb58 080c 	adcs.w	r8, r8, ip
    cce6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ccea:	eb59 0901 	adcs.w	r9, r9, r1
    ccee:	eb5a 0a0c 	adcs.w	sl, sl, ip
    ccf2:	4189      	sbcs	r1, r1
    ccf4:	f1b3 33ff 	subs.w	r3, r3, #4294967295
    ccf8:	f174 34ff 	sbcs.w	r4, r4, #4294967295
    ccfc:	f175 35ff 	sbcs.w	r5, r5, #4294967295
    cd00:	f176 0600 	sbcs.w	r6, r6, #0
    cd04:	f177 0700 	sbcs.w	r7, r7, #0
    cd08:	f178 0800 	sbcs.w	r8, r8, #0
    cd0c:	f179 0901 	sbcs.w	r9, r9, #1
    cd10:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
    cd14:	f151 0100 	adcs.w	r1, r1, #0
    cd18:	424a      	negs	r2, r1
    cd1a:	185b      	adds	r3, r3, r1
    cd1c:	414c      	adcs	r4, r1
    cd1e:	414d      	adcs	r5, r1
    cd20:	f156 0600 	adcs.w	r6, r6, #0
    cd24:	f157 0700 	adcs.w	r7, r7, #0
    cd28:	f158 0800 	adcs.w	r8, r8, #0
    cd2c:	eb59 0902 	adcs.w	r9, r9, r2
    cd30:	eb5a 0a01 	adcs.w	sl, sl, r1
    cd34:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    cd38:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cd3c:	4770      	bx	lr

0000cd3e <ocrypto_mod_p256_sub>:
    cd3e:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cd42:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    cd46:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cd4a:	1a5b      	subs	r3, r3, r1
    cd4c:	eb74 040c 	sbcs.w	r4, r4, ip
    cd50:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cd54:	418d      	sbcs	r5, r1
    cd56:	eb76 060c 	sbcs.w	r6, r6, ip
    cd5a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cd5e:	418f      	sbcs	r7, r1
    cd60:	eb78 080c 	sbcs.w	r8, r8, ip
    cd64:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cd68:	eb79 0901 	sbcs.w	r9, r9, r1
    cd6c:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    cd70:	4189      	sbcs	r1, r1
    cd72:	424a      	negs	r2, r1
    cd74:	185b      	adds	r3, r3, r1
    cd76:	414c      	adcs	r4, r1
    cd78:	414d      	adcs	r5, r1
    cd7a:	f156 0600 	adcs.w	r6, r6, #0
    cd7e:	f157 0700 	adcs.w	r7, r7, #0
    cd82:	f158 0800 	adcs.w	r8, r8, #0
    cd86:	eb59 0902 	adcs.w	r9, r9, r2
    cd8a:	eb5a 0a01 	adcs.w	sl, sl, r1
    cd8e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    cd92:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cd96:	4770      	bx	lr

0000cd98 <ocrypto_mod_p256_square>:
    cd98:	460a      	mov	r2, r1

0000cd9a <ocrypto_mod_p256_mul>:
    cd9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd9e:	ec41 0a14 	vmov	s8, s9, r0, r1
    cda2:	ec92 0a08 	vldmia	r2, {s0-s7}
    cda6:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    cda8:	ee10 0a10 	vmov	r0, s0
    cdac:	fba1 7800 	umull	r7, r8, r1, r0
    cdb0:	f04f 0900 	mov.w	r9, #0
    cdb4:	fbe2 8900 	umlal	r8, r9, r2, r0
    cdb8:	f04f 0a00 	mov.w	sl, #0
    cdbc:	fbe3 9a00 	umlal	r9, sl, r3, r0
    cdc0:	f04f 0b00 	mov.w	fp, #0
    cdc4:	fbe4 ab00 	umlal	sl, fp, r4, r0
    cdc8:	ee12 0a10 	vmov	r0, s4
    cdcc:	f04f 0c00 	mov.w	ip, #0
    cdd0:	fbe1 bc00 	umlal	fp, ip, r1, r0
    cdd4:	f04f 0e00 	mov.w	lr, #0
    cdd8:	fbe2 ce00 	umlal	ip, lr, r2, r0
    cddc:	f04f 0500 	mov.w	r5, #0
    cde0:	fbe3 e500 	umlal	lr, r5, r3, r0
    cde4:	f04f 0600 	mov.w	r6, #0
    cde8:	fbe4 5600 	umlal	r5, r6, r4, r0
    cdec:	ee05 7a10 	vmov	s10, r7
    cdf0:	ee10 0a90 	vmov	r0, s1
    cdf4:	f04f 0700 	mov.w	r7, #0
    cdf8:	fbe1 8700 	umlal	r8, r7, r1, r0
    cdfc:	eb19 0907 	adds.w	r9, r9, r7
    ce00:	f04f 0700 	mov.w	r7, #0
    ce04:	eb47 0707 	adc.w	r7, r7, r7
    ce08:	fbe2 9700 	umlal	r9, r7, r2, r0
    ce0c:	eb1a 0a07 	adds.w	sl, sl, r7
    ce10:	f04f 0700 	mov.w	r7, #0
    ce14:	eb47 0707 	adc.w	r7, r7, r7
    ce18:	fbe3 a700 	umlal	sl, r7, r3, r0
    ce1c:	eb1b 0b07 	adds.w	fp, fp, r7
    ce20:	f04f 0700 	mov.w	r7, #0
    ce24:	eb47 0707 	adc.w	r7, r7, r7
    ce28:	fbe4 b700 	umlal	fp, r7, r4, r0
    ce2c:	ee12 0a90 	vmov	r0, s5
    ce30:	eb1c 0c07 	adds.w	ip, ip, r7
    ce34:	f04f 0700 	mov.w	r7, #0
    ce38:	eb47 0707 	adc.w	r7, r7, r7
    ce3c:	fbe1 c700 	umlal	ip, r7, r1, r0
    ce40:	eb1e 0e07 	adds.w	lr, lr, r7
    ce44:	f04f 0700 	mov.w	r7, #0
    ce48:	eb47 0707 	adc.w	r7, r7, r7
    ce4c:	fbe2 e700 	umlal	lr, r7, r2, r0
    ce50:	19ed      	adds	r5, r5, r7
    ce52:	f04f 0700 	mov.w	r7, #0
    ce56:	eb47 0707 	adc.w	r7, r7, r7
    ce5a:	fbe3 5700 	umlal	r5, r7, r3, r0
    ce5e:	19f6      	adds	r6, r6, r7
    ce60:	f04f 0700 	mov.w	r7, #0
    ce64:	eb47 0707 	adc.w	r7, r7, r7
    ce68:	fbe4 6700 	umlal	r6, r7, r4, r0
    ce6c:	ee05 8a90 	vmov	s11, r8
    ce70:	ee11 0a10 	vmov	r0, s2
    ce74:	f04f 0800 	mov.w	r8, #0
    ce78:	fbe1 9800 	umlal	r9, r8, r1, r0
    ce7c:	eb1a 0a08 	adds.w	sl, sl, r8
    ce80:	f04f 0800 	mov.w	r8, #0
    ce84:	eb48 0808 	adc.w	r8, r8, r8
    ce88:	fbe2 a800 	umlal	sl, r8, r2, r0
    ce8c:	eb1b 0b08 	adds.w	fp, fp, r8
    ce90:	f04f 0800 	mov.w	r8, #0
    ce94:	eb48 0808 	adc.w	r8, r8, r8
    ce98:	fbe3 b800 	umlal	fp, r8, r3, r0
    ce9c:	eb1c 0c08 	adds.w	ip, ip, r8
    cea0:	f04f 0800 	mov.w	r8, #0
    cea4:	eb48 0808 	adc.w	r8, r8, r8
    cea8:	fbe4 c800 	umlal	ip, r8, r4, r0
    ceac:	ee13 0a10 	vmov	r0, s6
    ceb0:	eb1e 0e08 	adds.w	lr, lr, r8
    ceb4:	f04f 0800 	mov.w	r8, #0
    ceb8:	eb48 0808 	adc.w	r8, r8, r8
    cebc:	fbe1 e800 	umlal	lr, r8, r1, r0
    cec0:	eb15 0508 	adds.w	r5, r5, r8
    cec4:	f04f 0800 	mov.w	r8, #0
    cec8:	eb48 0808 	adc.w	r8, r8, r8
    cecc:	fbe2 5800 	umlal	r5, r8, r2, r0
    ced0:	eb16 0608 	adds.w	r6, r6, r8
    ced4:	f04f 0800 	mov.w	r8, #0
    ced8:	eb48 0808 	adc.w	r8, r8, r8
    cedc:	fbe3 6800 	umlal	r6, r8, r3, r0
    cee0:	eb17 0708 	adds.w	r7, r7, r8
    cee4:	f04f 0800 	mov.w	r8, #0
    cee8:	eb48 0808 	adc.w	r8, r8, r8
    ceec:	fbe4 7800 	umlal	r7, r8, r4, r0
    cef0:	ee06 9a10 	vmov	s12, r9
    cef4:	ee11 0a90 	vmov	r0, s3
    cef8:	f04f 0900 	mov.w	r9, #0
    cefc:	fbe1 a900 	umlal	sl, r9, r1, r0
    cf00:	eb1b 0b09 	adds.w	fp, fp, r9
    cf04:	f04f 0900 	mov.w	r9, #0
    cf08:	eb49 0909 	adc.w	r9, r9, r9
    cf0c:	fbe2 b900 	umlal	fp, r9, r2, r0
    cf10:	eb1c 0c09 	adds.w	ip, ip, r9
    cf14:	f04f 0900 	mov.w	r9, #0
    cf18:	eb49 0909 	adc.w	r9, r9, r9
    cf1c:	fbe3 c900 	umlal	ip, r9, r3, r0
    cf20:	eb1e 0e09 	adds.w	lr, lr, r9
    cf24:	f04f 0900 	mov.w	r9, #0
    cf28:	eb49 0909 	adc.w	r9, r9, r9
    cf2c:	fbe4 e900 	umlal	lr, r9, r4, r0
    cf30:	ee13 0a90 	vmov	r0, s7
    cf34:	eb15 0509 	adds.w	r5, r5, r9
    cf38:	f04f 0900 	mov.w	r9, #0
    cf3c:	eb49 0909 	adc.w	r9, r9, r9
    cf40:	fbe1 5900 	umlal	r5, r9, r1, r0
    cf44:	eb16 0609 	adds.w	r6, r6, r9
    cf48:	f04f 0900 	mov.w	r9, #0
    cf4c:	eb49 0909 	adc.w	r9, r9, r9
    cf50:	fbe2 6900 	umlal	r6, r9, r2, r0
    cf54:	eb17 0709 	adds.w	r7, r7, r9
    cf58:	f04f 0900 	mov.w	r9, #0
    cf5c:	eb49 0909 	adc.w	r9, r9, r9
    cf60:	fbe3 7900 	umlal	r7, r9, r3, r0
    cf64:	eb18 0809 	adds.w	r8, r8, r9
    cf68:	f04f 0900 	mov.w	r9, #0
    cf6c:	eb49 0909 	adc.w	r9, r9, r9
    cf70:	fbe4 8900 	umlal	r8, r9, r4, r0
    cf74:	ee06 aa90 	vmov	s13, sl
    cf78:	ee14 1a90 	vmov	r1, s9
    cf7c:	f101 0110 	add.w	r1, r1, #16
    cf80:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    cf82:	ee10 0a10 	vmov	r0, s0
    cf86:	f04f 0a00 	mov.w	sl, #0
    cf8a:	fbe1 ba00 	umlal	fp, sl, r1, r0
    cf8e:	eb1c 0c0a 	adds.w	ip, ip, sl
    cf92:	f04f 0a00 	mov.w	sl, #0
    cf96:	eb4a 0a0a 	adc.w	sl, sl, sl
    cf9a:	fbe2 ca00 	umlal	ip, sl, r2, r0
    cf9e:	eb1e 0e0a 	adds.w	lr, lr, sl
    cfa2:	f04f 0a00 	mov.w	sl, #0
    cfa6:	eb4a 0a0a 	adc.w	sl, sl, sl
    cfaa:	fbe3 ea00 	umlal	lr, sl, r3, r0
    cfae:	eb15 050a 	adds.w	r5, r5, sl
    cfb2:	f04f 0a00 	mov.w	sl, #0
    cfb6:	eb4a 0a0a 	adc.w	sl, sl, sl
    cfba:	fbe4 5a00 	umlal	r5, sl, r4, r0
    cfbe:	ee12 0a10 	vmov	r0, s4
    cfc2:	eb16 060a 	adds.w	r6, r6, sl
    cfc6:	f04f 0a00 	mov.w	sl, #0
    cfca:	eb4a 0a0a 	adc.w	sl, sl, sl
    cfce:	fbe1 6a00 	umlal	r6, sl, r1, r0
    cfd2:	eb17 070a 	adds.w	r7, r7, sl
    cfd6:	f04f 0a00 	mov.w	sl, #0
    cfda:	eb4a 0a0a 	adc.w	sl, sl, sl
    cfde:	fbe2 7a00 	umlal	r7, sl, r2, r0
    cfe2:	eb18 080a 	adds.w	r8, r8, sl
    cfe6:	f04f 0a00 	mov.w	sl, #0
    cfea:	eb4a 0a0a 	adc.w	sl, sl, sl
    cfee:	fbe3 8a00 	umlal	r8, sl, r3, r0
    cff2:	eb19 090a 	adds.w	r9, r9, sl
    cff6:	f04f 0a00 	mov.w	sl, #0
    cffa:	eb4a 0a0a 	adc.w	sl, sl, sl
    cffe:	fbe4 9a00 	umlal	r9, sl, r4, r0
    d002:	ee07 ba10 	vmov	s14, fp
    d006:	ee10 0a90 	vmov	r0, s1
    d00a:	f04f 0b00 	mov.w	fp, #0
    d00e:	fbe1 cb00 	umlal	ip, fp, r1, r0
    d012:	eb1e 0e0b 	adds.w	lr, lr, fp
    d016:	f04f 0b00 	mov.w	fp, #0
    d01a:	eb4b 0b0b 	adc.w	fp, fp, fp
    d01e:	fbe2 eb00 	umlal	lr, fp, r2, r0
    d022:	eb15 050b 	adds.w	r5, r5, fp
    d026:	f04f 0b00 	mov.w	fp, #0
    d02a:	eb4b 0b0b 	adc.w	fp, fp, fp
    d02e:	fbe3 5b00 	umlal	r5, fp, r3, r0
    d032:	eb16 060b 	adds.w	r6, r6, fp
    d036:	f04f 0b00 	mov.w	fp, #0
    d03a:	eb4b 0b0b 	adc.w	fp, fp, fp
    d03e:	fbe4 6b00 	umlal	r6, fp, r4, r0
    d042:	ee12 0a90 	vmov	r0, s5
    d046:	eb17 070b 	adds.w	r7, r7, fp
    d04a:	f04f 0b00 	mov.w	fp, #0
    d04e:	eb4b 0b0b 	adc.w	fp, fp, fp
    d052:	fbe1 7b00 	umlal	r7, fp, r1, r0
    d056:	eb18 080b 	adds.w	r8, r8, fp
    d05a:	f04f 0b00 	mov.w	fp, #0
    d05e:	eb4b 0b0b 	adc.w	fp, fp, fp
    d062:	fbe2 8b00 	umlal	r8, fp, r2, r0
    d066:	eb19 090b 	adds.w	r9, r9, fp
    d06a:	f04f 0b00 	mov.w	fp, #0
    d06e:	eb4b 0b0b 	adc.w	fp, fp, fp
    d072:	fbe3 9b00 	umlal	r9, fp, r3, r0
    d076:	eb1a 0a0b 	adds.w	sl, sl, fp
    d07a:	f04f 0b00 	mov.w	fp, #0
    d07e:	eb4b 0b0b 	adc.w	fp, fp, fp
    d082:	fbe4 ab00 	umlal	sl, fp, r4, r0
    d086:	ee07 ca90 	vmov	s15, ip
    d08a:	ee11 0a10 	vmov	r0, s2
    d08e:	f04f 0c00 	mov.w	ip, #0
    d092:	fbe1 ec00 	umlal	lr, ip, r1, r0
    d096:	eb15 050c 	adds.w	r5, r5, ip
    d09a:	f04f 0c00 	mov.w	ip, #0
    d09e:	eb4c 0c0c 	adc.w	ip, ip, ip
    d0a2:	fbe2 5c00 	umlal	r5, ip, r2, r0
    d0a6:	eb16 060c 	adds.w	r6, r6, ip
    d0aa:	f04f 0c00 	mov.w	ip, #0
    d0ae:	eb4c 0c0c 	adc.w	ip, ip, ip
    d0b2:	fbe3 6c00 	umlal	r6, ip, r3, r0
    d0b6:	eb17 070c 	adds.w	r7, r7, ip
    d0ba:	f04f 0c00 	mov.w	ip, #0
    d0be:	eb4c 0c0c 	adc.w	ip, ip, ip
    d0c2:	fbe4 7c00 	umlal	r7, ip, r4, r0
    d0c6:	ee13 0a10 	vmov	r0, s6
    d0ca:	eb18 080c 	adds.w	r8, r8, ip
    d0ce:	f04f 0c00 	mov.w	ip, #0
    d0d2:	eb4c 0c0c 	adc.w	ip, ip, ip
    d0d6:	fbe1 8c00 	umlal	r8, ip, r1, r0
    d0da:	eb19 090c 	adds.w	r9, r9, ip
    d0de:	f04f 0c00 	mov.w	ip, #0
    d0e2:	eb4c 0c0c 	adc.w	ip, ip, ip
    d0e6:	fbe2 9c00 	umlal	r9, ip, r2, r0
    d0ea:	eb1a 0a0c 	adds.w	sl, sl, ip
    d0ee:	f04f 0c00 	mov.w	ip, #0
    d0f2:	eb4c 0c0c 	adc.w	ip, ip, ip
    d0f6:	fbe3 ac00 	umlal	sl, ip, r3, r0
    d0fa:	eb1b 0b0c 	adds.w	fp, fp, ip
    d0fe:	f04f 0c00 	mov.w	ip, #0
    d102:	eb4c 0c0c 	adc.w	ip, ip, ip
    d106:	fbe4 bc00 	umlal	fp, ip, r4, r0
    d10a:	ee08 ea10 	vmov	s16, lr
    d10e:	ee11 0a90 	vmov	r0, s3
    d112:	f04f 0e00 	mov.w	lr, #0
    d116:	fbe1 5e00 	umlal	r5, lr, r1, r0
    d11a:	eb16 060e 	adds.w	r6, r6, lr
    d11e:	f04f 0e00 	mov.w	lr, #0
    d122:	eb4e 0e0e 	adc.w	lr, lr, lr
    d126:	fbe2 6e00 	umlal	r6, lr, r2, r0
    d12a:	eb17 070e 	adds.w	r7, r7, lr
    d12e:	f04f 0e00 	mov.w	lr, #0
    d132:	eb4e 0e0e 	adc.w	lr, lr, lr
    d136:	fbe3 7e00 	umlal	r7, lr, r3, r0
    d13a:	eb18 080e 	adds.w	r8, r8, lr
    d13e:	f04f 0e00 	mov.w	lr, #0
    d142:	eb4e 0e0e 	adc.w	lr, lr, lr
    d146:	fbe4 8e00 	umlal	r8, lr, r4, r0
    d14a:	ee13 0a90 	vmov	r0, s7
    d14e:	eb19 090e 	adds.w	r9, r9, lr
    d152:	f04f 0e00 	mov.w	lr, #0
    d156:	eb4e 0e0e 	adc.w	lr, lr, lr
    d15a:	fbe1 9e00 	umlal	r9, lr, r1, r0
    d15e:	eb1a 0a0e 	adds.w	sl, sl, lr
    d162:	f04f 0e00 	mov.w	lr, #0
    d166:	eb4e 0e0e 	adc.w	lr, lr, lr
    d16a:	fbe2 ae00 	umlal	sl, lr, r2, r0
    d16e:	eb1b 0b0e 	adds.w	fp, fp, lr
    d172:	f04f 0e00 	mov.w	lr, #0
    d176:	eb4e 0e0e 	adc.w	lr, lr, lr
    d17a:	fbe3 be00 	umlal	fp, lr, r3, r0
    d17e:	eb1c 0c0e 	adds.w	ip, ip, lr
    d182:	f04f 0e00 	mov.w	lr, #0
    d186:	eb4e 0e0e 	adc.w	lr, lr, lr
    d18a:	fbe4 ce00 	umlal	ip, lr, r4, r0
    d18e:	ec53 2a17 	vmov	r2, r3, s14, s15
    d192:	ee18 4a10 	vmov	r4, s16
    d196:	eb12 020a 	adds.w	r2, r2, sl
    d19a:	eb53 030b 	adcs.w	r3, r3, fp
    d19e:	eb54 040c 	adcs.w	r4, r4, ip
    d1a2:	eb55 050e 	adcs.w	r5, r5, lr
    d1a6:	2000      	movs	r0, #0
    d1a8:	f140 0000 	adc.w	r0, r0, #0
    d1ac:	eb12 020b 	adds.w	r2, r2, fp
    d1b0:	eb53 030c 	adcs.w	r3, r3, ip
    d1b4:	eb54 040e 	adcs.w	r4, r4, lr
    d1b8:	eb55 050e 	adcs.w	r5, r5, lr
    d1bc:	4146      	adcs	r6, r0
    d1be:	2000      	movs	r0, #0
    d1c0:	4147      	adcs	r7, r0
    d1c2:	eb58 0800 	adcs.w	r8, r8, r0
    d1c6:	eb59 090a 	adcs.w	r9, r9, sl
    d1ca:	f140 0000 	adc.w	r0, r0, #0
    d1ce:	ebb2 020e 	subs.w	r2, r2, lr
    d1d2:	f173 0300 	sbcs.w	r3, r3, #0
    d1d6:	f174 0400 	sbcs.w	r4, r4, #0
    d1da:	eb75 050a 	sbcs.w	r5, r5, sl
    d1de:	eb76 060b 	sbcs.w	r6, r6, fp
    d1e2:	eb77 070c 	sbcs.w	r7, r7, ip
    d1e6:	eb78 080a 	sbcs.w	r8, r8, sl
    d1ea:	eb79 090c 	sbcs.w	r9, r9, ip
    d1ee:	f160 0000 	sbc.w	r0, r0, #0
    d1f2:	ebb5 050b 	subs.w	r5, r5, fp
    d1f6:	eb76 060c 	sbcs.w	r6, r6, ip
    d1fa:	eb77 070e 	sbcs.w	r7, r7, lr
    d1fe:	eb78 080b 	sbcs.w	r8, r8, fp
    d202:	eb79 090e 	sbcs.w	r9, r9, lr
    d206:	f160 0000 	sbc.w	r0, r0, #0
    d20a:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    d20e:	ea7f 0c0c 	mvns.w	ip, ip
    d212:	f1dc 0e00 	rsbs	lr, ip, #0
    d216:	ebb2 020c 	subs.w	r2, r2, ip
    d21a:	eb73 030c 	sbcs.w	r3, r3, ip
    d21e:	eb74 040c 	sbcs.w	r4, r4, ip
    d222:	f175 0500 	sbcs.w	r5, r5, #0
    d226:	f176 0600 	sbcs.w	r6, r6, #0
    d22a:	f177 0700 	sbcs.w	r7, r7, #0
    d22e:	eb78 080e 	sbcs.w	r8, r8, lr
    d232:	eb79 090c 	sbcs.w	r9, r9, ip
    d236:	f160 0000 	sbc.w	r0, r0, #0
    d23a:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    d23e:	f1dc 0e00 	rsbs	lr, ip, #0
    d242:	eb12 020c 	adds.w	r2, r2, ip
    d246:	eb53 030c 	adcs.w	r3, r3, ip
    d24a:	eb54 040c 	adcs.w	r4, r4, ip
    d24e:	f155 0500 	adcs.w	r5, r5, #0
    d252:	f156 0600 	adcs.w	r6, r6, #0
    d256:	f157 0700 	adcs.w	r7, r7, #0
    d25a:	eb58 080e 	adcs.w	r8, r8, lr
    d25e:	eb59 090c 	adcs.w	r9, r9, ip
    d262:	f140 0000 	adc.w	r0, r0, #0
    d266:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    d26a:	f1dc 0e00 	rsbs	lr, ip, #0
    d26e:	eb12 020c 	adds.w	r2, r2, ip
    d272:	eb53 030c 	adcs.w	r3, r3, ip
    d276:	eb54 040c 	adcs.w	r4, r4, ip
    d27a:	f155 0500 	adcs.w	r5, r5, #0
    d27e:	f156 0600 	adcs.w	r6, r6, #0
    d282:	f157 0700 	adcs.w	r7, r7, #0
    d286:	eb58 080e 	adcs.w	r8, r8, lr
    d28a:	eb59 090c 	adcs.w	r9, r9, ip
    d28e:	ec5b aa15 	vmov	sl, fp, s10, s11
    d292:	ec51 0a16 	vmov	r0, r1, s12, s13
    d296:	eb1a 0a06 	adds.w	sl, sl, r6
    d29a:	eb5b 0b07 	adcs.w	fp, fp, r7
    d29e:	eb50 0008 	adcs.w	r0, r0, r8
    d2a2:	eb51 0109 	adcs.w	r1, r1, r9
    d2a6:	f05f 0c00 	movs.w	ip, #0
    d2aa:	f14c 0c00 	adc.w	ip, ip, #0
    d2ae:	eb1a 0a07 	adds.w	sl, sl, r7
    d2b2:	eb5b 0b08 	adcs.w	fp, fp, r8
    d2b6:	eb50 0009 	adcs.w	r0, r0, r9
    d2ba:	eb51 0109 	adcs.w	r1, r1, r9
    d2be:	eb52 020c 	adcs.w	r2, r2, ip
    d2c2:	f05f 0c00 	movs.w	ip, #0
    d2c6:	eb53 030c 	adcs.w	r3, r3, ip
    d2ca:	eb54 040c 	adcs.w	r4, r4, ip
    d2ce:	4175      	adcs	r5, r6
    d2d0:	f14c 0c00 	adc.w	ip, ip, #0
    d2d4:	ebba 0a09 	subs.w	sl, sl, r9
    d2d8:	f17b 0b00 	sbcs.w	fp, fp, #0
    d2dc:	f170 0000 	sbcs.w	r0, r0, #0
    d2e0:	41b1      	sbcs	r1, r6
    d2e2:	41ba      	sbcs	r2, r7
    d2e4:	eb73 0308 	sbcs.w	r3, r3, r8
    d2e8:	41b4      	sbcs	r4, r6
    d2ea:	eb75 0508 	sbcs.w	r5, r5, r8
    d2ee:	f16c 0c00 	sbc.w	ip, ip, #0
    d2f2:	1bc9      	subs	r1, r1, r7
    d2f4:	eb72 0208 	sbcs.w	r2, r2, r8
    d2f8:	eb73 0309 	sbcs.w	r3, r3, r9
    d2fc:	41bc      	sbcs	r4, r7
    d2fe:	eb75 0509 	sbcs.w	r5, r5, r9
    d302:	f16c 0c00 	sbc.w	ip, ip, #0
    d306:	ea5f 78ec 	movs.w	r8, ip, asr #31
    d30a:	ea7f 0808 	mvns.w	r8, r8
    d30e:	f1d8 0900 	rsbs	r9, r8, #0
    d312:	ebba 0a08 	subs.w	sl, sl, r8
    d316:	eb7b 0b08 	sbcs.w	fp, fp, r8
    d31a:	eb70 0008 	sbcs.w	r0, r0, r8
    d31e:	f171 0100 	sbcs.w	r1, r1, #0
    d322:	f172 0200 	sbcs.w	r2, r2, #0
    d326:	f173 0300 	sbcs.w	r3, r3, #0
    d32a:	eb74 0409 	sbcs.w	r4, r4, r9
    d32e:	eb75 0508 	sbcs.w	r5, r5, r8
    d332:	f16c 0c00 	sbc.w	ip, ip, #0
    d336:	ea5f 78ec 	movs.w	r8, ip, asr #31
    d33a:	f1d8 0900 	rsbs	r9, r8, #0
    d33e:	eb1a 0a08 	adds.w	sl, sl, r8
    d342:	eb5b 0b08 	adcs.w	fp, fp, r8
    d346:	eb50 0008 	adcs.w	r0, r0, r8
    d34a:	f151 0100 	adcs.w	r1, r1, #0
    d34e:	f152 0200 	adcs.w	r2, r2, #0
    d352:	f153 0300 	adcs.w	r3, r3, #0
    d356:	eb54 0409 	adcs.w	r4, r4, r9
    d35a:	eb55 0508 	adcs.w	r5, r5, r8
    d35e:	f14c 0c00 	adc.w	ip, ip, #0
    d362:	ea5f 78ec 	movs.w	r8, ip, asr #31
    d366:	f1d8 0900 	rsbs	r9, r8, #0
    d36a:	eb1a 0a08 	adds.w	sl, sl, r8
    d36e:	eb5b 0b08 	adcs.w	fp, fp, r8
    d372:	eb50 0008 	adcs.w	r0, r0, r8
    d376:	f151 0100 	adcs.w	r1, r1, #0
    d37a:	f152 0200 	adcs.w	r2, r2, #0
    d37e:	f153 0300 	adcs.w	r3, r3, #0
    d382:	eb54 0409 	adcs.w	r4, r4, r9
    d386:	eb55 0508 	adcs.w	r5, r5, r8
    d38a:	ee14 7a10 	vmov	r7, s8
    d38e:	e8a7 0c00 	stmia.w	r7!, {sl, fp}
    d392:	e887 003f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5}
    d396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d39a:	bf00      	nop

0000d39c <bsd_recoverable_error_handler>:
#include <string.h>

/**@brief Recoverable BSD library error. */
void bsd_recoverable_error_handler(uint32_t err)
{
	printk("bsdlib recoverable error: %u\n", err);
    d39c:	4601      	mov	r1, r0
    d39e:	4801      	ldr	r0, [pc, #4]	; (d3a4 <bsd_recoverable_error_handler+0x8>)
    d3a0:	f015 bcc5 	b.w	22d2e <printk>
    d3a4:	0002559c 	.word	0x0002559c

0000d3a8 <main>:
}

void main(void)
{
	printk("The AT host sample started\n");
    d3a8:	4801      	ldr	r0, [pc, #4]	; (d3b0 <main+0x8>)
    d3aa:	f015 bcc0 	b.w	22d2e <printk>
    d3ae:	bf00      	nop
    d3b0:	000255ba 	.word	0x000255ba

0000d3b4 <z_sys_mem_pool_block_free>:
	return 0;
}

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
    d3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d3b8:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    d3ba:	7a83      	ldrb	r3, [r0, #10]
{
    d3bc:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    d3be:	009b      	lsls	r3, r3, #2
    d3c0:	3307      	adds	r3, #7
    d3c2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    d3c6:	ebad 0d03 	sub.w	sp, sp, r3
    d3ca:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
    d3cc:	6843      	ldr	r3, [r0, #4]
{
    d3ce:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
    d3d0:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
    d3d2:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
    d3d4:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
    d3d8:	4281      	cmp	r1, r0
    d3da:	d222      	bcs.n	d422 <z_sys_mem_pool_block_free+0x6e>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    d3dc:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
    d3de:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    d3e0:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
    d3e4:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    d3e6:	d001      	beq.n	d3ec <z_sys_mem_pool_block_free+0x38>
    d3e8:	f015 f9f4 	bl	227d4 <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
    d3ec:	4604      	mov	r4, r0
	while (level >= 0) {
    d3ee:	f1b8 0f00 	cmp.w	r8, #0
    d3f2:	da1e      	bge.n	d432 <z_sys_mem_pool_block_free+0x7e>
	__ASSERT(0, "out of levels");
    d3f4:	23b0      	movs	r3, #176	; 0xb0
    d3f6:	4a43      	ldr	r2, [pc, #268]	; (d504 <z_sys_mem_pool_block_free+0x150>)
    d3f8:	4943      	ldr	r1, [pc, #268]	; (d508 <z_sys_mem_pool_block_free+0x154>)
    d3fa:	4844      	ldr	r0, [pc, #272]	; (d50c <z_sys_mem_pool_block_free+0x158>)
    d3fc:	f015 fc97 	bl	22d2e <printk>
    d400:	4843      	ldr	r0, [pc, #268]	; (d510 <z_sys_mem_pool_block_free+0x15c>)
    d402:	f015 fc94 	bl	22d2e <printk>
    d406:	21b0      	movs	r1, #176	; 0xb0
    d408:	483e      	ldr	r0, [pc, #248]	; (d504 <z_sys_mem_pool_block_free+0x150>)
    d40a:	f015 fc9d 	bl	22d48 <assert_post_action>
	return -1;
    d40e:	f04f 34ff 	mov.w	r4, #4294967295
	pool_irq_unlock(p, key);
    d412:	4621      	mov	r1, r4
    d414:	7c30      	ldrb	r0, [r6, #16]
    d416:	f015 f9e6 	bl	227e6 <pool_irq_unlock.isra.4>
}
    d41a:	3714      	adds	r7, #20
    d41c:	46bd      	mov	sp, r7
    d41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
    d422:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
    d424:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
    d426:	089b      	lsrs	r3, r3, #2
    d428:	f023 0303 	bic.w	r3, r3, #3
    d42c:	f844 3f04 	str.w	r3, [r4, #4]!
    d430:	e7d2      	b.n	d3d8 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
    d432:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
    d436:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
    d438:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
    d43c:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
    d43e:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
    d440:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
    d442:	eb03 090a 	add.w	r9, r3, sl
    d446:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
    d448:	4630      	mov	r0, r6
    d44a:	f107 030c 	add.w	r3, r7, #12
    d44e:	f015 f9aa 	bl	227a6 <get_bit_ptr>
	*word &= ~(1<<bit);
    d452:	2301      	movs	r3, #1
    d454:	68fa      	ldr	r2, [r7, #12]
    d456:	fa03 f000 	lsl.w	r0, r3, r0
    d45a:	6813      	ldr	r3, [r2, #0]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    d45c:	6839      	ldr	r1, [r7, #0]
    d45e:	ea23 0300 	bic.w	r3, r3, r0
    d462:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
    d464:	220c      	movs	r2, #12
    d466:	68f3      	ldr	r3, [r6, #12]
    d468:	fb02 3308 	mla	r3, r2, r8, r3
    d46c:	1d1a      	adds	r2, r3, #4
    d46e:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
    d472:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
    d474:	4621      	mov	r1, r4
    d476:	f8c9 2004 	str.w	r2, [r9, #4]

	list->tail->next = node;
    d47a:	689a      	ldr	r2, [r3, #8]
    d47c:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
    d480:	f8c3 9008 	str.w	r9, [r3, #8]
    d484:	7c30      	ldrb	r0, [r6, #16]
    d486:	f015 f9ae 	bl	227e6 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    d48a:	7c30      	ldrb	r0, [r6, #16]
    d48c:	f010 0001 	ands.w	r0, r0, #1
    d490:	d001      	beq.n	d496 <z_sys_mem_pool_block_free+0xe2>
    d492:	f015 f99f 	bl	227d4 <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
    d496:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
    d498:	f1b8 0f00 	cmp.w	r8, #0
    d49c:	d0b9      	beq.n	d412 <z_sys_mem_pool_block_free+0x5e>
	int bit = get_bit_ptr(p, level, bn, &word);
    d49e:	f107 030c 	add.w	r3, r7, #12
    d4a2:	462a      	mov	r2, r5
    d4a4:	4641      	mov	r1, r8
    d4a6:	4630      	mov	r0, r6
    d4a8:	f015 f97d 	bl	227a6 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
    d4ac:	68fb      	ldr	r3, [r7, #12]
    d4ae:	2800      	cmp	r0, #0
    d4b0:	bfb8      	it	lt
    d4b2:	3003      	addlt	r0, #3
    d4b4:	681b      	ldr	r3, [r3, #0]
    d4b6:	f020 0003 	bic.w	r0, r0, #3
    d4ba:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
    d4be:	f010 000f 	ands.w	r0, r0, #15
    d4c2:	d1a6      	bne.n	d412 <z_sys_mem_pool_block_free+0x5e>
	node->next = NULL;
    d4c4:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
    d4c6:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
    d4ca:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
    d4cc:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
    d4d0:	4353      	muls	r3, r2
    d4d2:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
    d4d4:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
    d4d6:	18d1      	adds	r1, r2, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    d4d8:	f8d1 9004 	ldr.w	r9, [r1, #4]
    d4dc:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
    d4e0:	2804      	cmp	r0, #4
    d4e2:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
    d4e6:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
    d4ea:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
    d4ee:	f8c1 c004 	str.w	ip, [r1, #4]
    d4f2:	d1ea      	bne.n	d4ca <z_sys_mem_pool_block_free+0x116>
		bn = bn / 4;
    d4f4:	2d00      	cmp	r5, #0
    d4f6:	bfb8      	it	lt
    d4f8:	3503      	addlt	r5, #3
		level = level - 1;
    d4fa:	f108 38ff 	add.w	r8, r8, #4294967295
		bn = bn / 4;
    d4fe:	10ad      	asrs	r5, r5, #2
    d500:	e775      	b.n	d3ee <z_sys_mem_pool_block_free+0x3a>
    d502:	bf00      	nop
    d504:	000255d6 	.word	0x000255d6
    d508:	000261cb 	.word	0x000261cb
    d50c:	000255f3 	.word	0x000255f3
    d510:	00025610 	.word	0x00025610

0000d514 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    d514:	680b      	ldr	r3, [r1, #0]
    d516:	3301      	adds	r3, #1
    d518:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    d51a:	4b01      	ldr	r3, [pc, #4]	; (d520 <char_out+0xc>)
    d51c:	681b      	ldr	r3, [r3, #0]
    d51e:	4718      	bx	r3
    d520:	2002a1cc 	.word	0x2002a1cc

0000d524 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    d524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d528:	b085      	sub	sp, #20
    d52a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    d52c:	469b      	mov	fp, r3
    d52e:	2c01      	cmp	r4, #1
    d530:	bfb8      	it	lt
    d532:	2401      	movlt	r4, #1
    d534:	2b01      	cmp	r3, #1
    d536:	bf0c      	ite	eq
    d538:	2330      	moveq	r3, #48	; 0x30
    d53a:	2320      	movne	r3, #32
    d53c:	4616      	mov	r6, r2
    d53e:	4682      	mov	sl, r0
    d540:	4688      	mov	r8, r1
    d542:	2501      	movs	r5, #1
    d544:	270a      	movs	r7, #10
    d546:	2200      	movs	r2, #0
    d548:	f8df 906c 	ldr.w	r9, [pc, #108]	; d5b8 <_printk_dec_ulong+0x94>
    d54c:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    d54e:	fbb6 f3f9 	udiv	r3, r6, r9
    d552:	9301      	str	r3, [sp, #4]
    d554:	b90a      	cbnz	r2, d55a <_printk_dec_ulong+0x36>
    d556:	45b1      	cmp	r9, r6
    d558:	d81c      	bhi.n	d594 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    d55a:	9b01      	ldr	r3, [sp, #4]
    d55c:	4641      	mov	r1, r8
    d55e:	f103 0030 	add.w	r0, r3, #48	; 0x30
    d562:	47d0      	blx	sl
			found_largest_digit = 1;
    d564:	2201      	movs	r2, #1
			digits++;
    d566:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    d568:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    d56a:	3f01      	subs	r7, #1
		remainder %= pos;
    d56c:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    d570:	230a      	movs	r3, #10
	while (pos >= 10) {
    d572:	2f01      	cmp	r7, #1
		pos /= 10;
    d574:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    d578:	d1e9      	bne.n	d54e <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    d57a:	4641      	mov	r1, r8
    d57c:	f106 0030 	add.w	r0, r6, #48	; 0x30
    d580:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    d582:	f1bb 0f03 	cmp.w	fp, #3
    d586:	d102      	bne.n	d58e <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
    d588:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    d58a:	2c00      	cmp	r4, #0
    d58c:	dc0e      	bgt.n	d5ac <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
    d58e:	b005      	add	sp, #20
    d590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    d594:	42bc      	cmp	r4, r7
    d596:	dbe7      	blt.n	d568 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    d598:	f1bb 0f02 	cmp.w	fp, #2
    d59c:	d8e4      	bhi.n	d568 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    d59e:	4641      	mov	r1, r8
    d5a0:	9802      	ldr	r0, [sp, #8]
    d5a2:	9203      	str	r2, [sp, #12]
			digits++;
    d5a4:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    d5a6:	47d0      	blx	sl
			digits++;
    d5a8:	9a03      	ldr	r2, [sp, #12]
    d5aa:	e7dd      	b.n	d568 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    d5ac:	4641      	mov	r1, r8
    d5ae:	2020      	movs	r0, #32
    d5b0:	47d0      	blx	sl
    d5b2:	3c01      	subs	r4, #1
    d5b4:	e7e9      	b.n	d58a <_printk_dec_ulong+0x66>
    d5b6:	bf00      	nop
    d5b8:	3b9aca00 	.word	0x3b9aca00

0000d5bc <__printk_hook_install>:
	_char_out = fn;
    d5bc:	4b01      	ldr	r3, [pc, #4]	; (d5c4 <__printk_hook_install+0x8>)
    d5be:	6018      	str	r0, [r3, #0]
}
    d5c0:	4770      	bx	lr
    d5c2:	bf00      	nop
    d5c4:	2002a1cc 	.word	0x2002a1cc

0000d5c8 <vprintk>:
	struct out_context ctx = { 0 };
    d5c8:	2300      	movs	r3, #0
{
    d5ca:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
    d5cc:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    d5ce:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    d5d0:	4803      	ldr	r0, [pc, #12]	; (d5e0 <vprintk+0x18>)
    d5d2:	460b      	mov	r3, r1
    d5d4:	a901      	add	r1, sp, #4
    d5d6:	f015 fa3a 	bl	22a4e <z_vprintk>
}
    d5da:	b003      	add	sp, #12
    d5dc:	f85d fb04 	ldr.w	pc, [sp], #4
    d5e0:	0000d515 	.word	0x0000d515

0000d5e4 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    d5e4:	f04f 0220 	mov.w	r2, #32
    d5e8:	f3ef 8311 	mrs	r3, BASEPRI
    d5ec:	f382 8811 	msr	BASEPRI, r2
    d5f0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    d5f4:	2101      	movs	r1, #1
    d5f6:	4a04      	ldr	r2, [pc, #16]	; (d608 <nordicsemi_nrf91_init+0x24>)
    d5f8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    d5fc:	f383 8811 	msr	BASEPRI, r3
    d600:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    d604:	2000      	movs	r0, #0
    d606:	4770      	bx	lr
    d608:	40039000 	.word	0x40039000

0000d60c <socket_offload_register>:

/* Only one provider may register socket operations upon boot. */
const struct socket_offload *socket_ops;

void socket_offload_register(const struct socket_offload *ops)
{
    d60c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
    d60e:	4605      	mov	r5, r0
    d610:	b948      	cbnz	r0, d626 <socket_offload_register+0x1a>
    d612:	490c      	ldr	r1, [pc, #48]	; (d644 <socket_offload_register+0x38>)
    d614:	480c      	ldr	r0, [pc, #48]	; (d648 <socket_offload_register+0x3c>)
    d616:	2311      	movs	r3, #17
    d618:	4a0c      	ldr	r2, [pc, #48]	; (d64c <socket_offload_register+0x40>)
    d61a:	f015 fb88 	bl	22d2e <printk>
    d61e:	2111      	movs	r1, #17
    d620:	480a      	ldr	r0, [pc, #40]	; (d64c <socket_offload_register+0x40>)
    d622:	f015 fb91 	bl	22d48 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops == NULL);
    d626:	4c0a      	ldr	r4, [pc, #40]	; (d650 <socket_offload_register+0x44>)
    d628:	6822      	ldr	r2, [r4, #0]
    d62a:	b14a      	cbz	r2, d640 <socket_offload_register+0x34>
    d62c:	4909      	ldr	r1, [pc, #36]	; (d654 <socket_offload_register+0x48>)
    d62e:	4806      	ldr	r0, [pc, #24]	; (d648 <socket_offload_register+0x3c>)
    d630:	2312      	movs	r3, #18
    d632:	4a06      	ldr	r2, [pc, #24]	; (d64c <socket_offload_register+0x40>)
    d634:	f015 fb7b 	bl	22d2e <printk>
    d638:	2112      	movs	r1, #18
    d63a:	4804      	ldr	r0, [pc, #16]	; (d64c <socket_offload_register+0x40>)
    d63c:	f015 fb84 	bl	22d48 <assert_post_action>

	socket_ops = ops;
    d640:	6025      	str	r5, [r4, #0]
}
    d642:	bd38      	pop	{r3, r4, r5, pc}
    d644:	00025e0d 	.word	0x00025e0d
    d648:	000255f3 	.word	0x000255f3
    d64c:	0002562f 	.word	0x0002562f
    d650:	20020008 	.word	0x20020008
    d654:	00025663 	.word	0x00025663

0000d658 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    d658:	280a      	cmp	r0, #10
{
    d65a:	b538      	push	{r3, r4, r5, lr}
    d65c:	4604      	mov	r4, r0
    d65e:	4d07      	ldr	r5, [pc, #28]	; (d67c <console_out+0x24>)
	if ('\n' == c) {
    d660:	d104      	bne.n	d66c <console_out+0x14>
    d662:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    d664:	6843      	ldr	r3, [r0, #4]
    d666:	210d      	movs	r1, #13
    d668:	685b      	ldr	r3, [r3, #4]
    d66a:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    d66c:	6828      	ldr	r0, [r5, #0]
    d66e:	6843      	ldr	r3, [r0, #4]
    d670:	b2e1      	uxtb	r1, r4
    d672:	685b      	ldr	r3, [r3, #4]
    d674:	4798      	blx	r3

	return c;
}
    d676:	4620      	mov	r0, r4
    d678:	bd38      	pop	{r3, r4, r5, pc}
    d67a:	bf00      	nop
    d67c:	2002000c 	.word	0x2002000c

0000d680 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    d680:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    d682:	4c04      	ldr	r4, [pc, #16]	; (d694 <uart_console_hook_install+0x14>)
    d684:	4620      	mov	r0, r4
    d686:	f001 fbef 	bl	ee68 <__stdout_hook_install>
	__printk_hook_install(console_out);
    d68a:	4620      	mov	r0, r4
}
    d68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    d690:	f7ff bf94 	b.w	d5bc <__printk_hook_install>
    d694:	0000d659 	.word	0x0000d659

0000d698 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    d698:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) z_arch_syscall_invoke1(*(u32_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    d69a:	4804      	ldr	r0, [pc, #16]	; (d6ac <uart_console_init+0x14>)
    d69c:	f011 fcb2 	bl	1f004 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    d6a0:	4b03      	ldr	r3, [pc, #12]	; (d6b0 <uart_console_init+0x18>)
    d6a2:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    d6a4:	f7ff ffec 	bl	d680 <uart_console_hook_install>

	return 0;
}
    d6a8:	2000      	movs	r0, #0
    d6aa:	bd08      	pop	{r3, pc}
    d6ac:	0002567d 	.word	0x0002567d
    d6b0:	2002000c 	.word	0x2002000c

0000d6b4 <hfclk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int hfclk_init(struct device *dev)
{
    d6b4:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    d6b6:	2200      	movs	r2, #0
{
    d6b8:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    d6ba:	2101      	movs	r1, #1
    d6bc:	2005      	movs	r0, #5
    d6be:	f000 faf5 	bl	dcac <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    d6c2:	2005      	movs	r0, #5
    d6c4:	f000 fae2 	bl	dc8c <z_arch_irq_enable>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
}

__STATIC_INLINE void nrf_clock_lf_src_set(nrf_clock_lfclk_t source)
{
    NRF_CLOCK->LFCLKSRC = (uint32_t)(source);
    d6c8:	2202      	movs	r2, #2
    d6ca:	4b05      	ldr	r3, [pc, #20]	; (d6e0 <hfclk_init+0x2c>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    d6cc:	2000      	movs	r0, #0
    d6ce:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NRF_CLOCK->INTENSET = int_mask;
    d6d2:	2203      	movs	r2, #3
    d6d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			(NRF_POWER_INT_USBDETECTED_MASK |
			NRF_POWER_INT_USBREMOVED_MASK |
			NRF_POWER_INT_USBPWRRDY_MASK),
			(0))));

	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    d6d8:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    d6da:	e9c3 0000 	strd	r0, r0, [r3]

	return 0;
}
    d6de:	bd10      	pop	{r4, pc}
    d6e0:	40005000 	.word	0x40005000

0000d6e4 <clock_async_start>:
{
    d6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
    d6e6:	6803      	ldr	r3, [r0, #0]
{
    d6e8:	4606      	mov	r6, r0
	const struct nrf_clock_control_config *config =
    d6ea:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
    d6ec:	6885      	ldr	r5, [r0, #8]
	__ASSERT_NO_MSG((data == NULL) ||
    d6ee:	4614      	mov	r4, r2
    d6f0:	b15a      	cbz	r2, d70a <clock_async_start+0x26>
    d6f2:	6853      	ldr	r3, [r2, #4]
    d6f4:	b94b      	cbnz	r3, d70a <clock_async_start+0x26>
    d6f6:	4927      	ldr	r1, [pc, #156]	; (d794 <clock_async_start+0xb0>)
    d6f8:	4827      	ldr	r0, [pc, #156]	; (d798 <clock_async_start+0xb4>)
    d6fa:	2392      	movs	r3, #146	; 0x92
    d6fc:	4a27      	ldr	r2, [pc, #156]	; (d79c <clock_async_start+0xb8>)
    d6fe:	f015 fb16 	bl	22d2e <printk>
    d702:	2192      	movs	r1, #146	; 0x92
    d704:	4825      	ldr	r0, [pc, #148]	; (d79c <clock_async_start+0xb8>)
    d706:	f015 fb1f 	bl	22d48 <assert_post_action>
	__asm__ volatile(
    d70a:	f04f 0320 	mov.w	r3, #32
    d70e:	f3ef 8211 	mrs	r2, BASEPRI
    d712:	f383 8811 	msr	BASEPRI, r3
    d716:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    d71a:	7a2b      	ldrb	r3, [r5, #8]
    d71c:	3301      	adds	r3, #1
    d71e:	b25b      	sxtb	r3, r3
    d720:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
    d722:	f382 8811 	msr	BASEPRI, r2
    d726:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
    d72a:	7a6a      	ldrb	r2, [r5, #9]
    d72c:	b13a      	cbz	r2, d73e <clock_async_start+0x5a>
		if (data) {
    d72e:	b90c      	cbnz	r4, d734 <clock_async_start+0x50>
	return 0;
    d730:	2000      	movs	r0, #0
}
    d732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
    d734:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    d738:	4630      	mov	r0, r6
    d73a:	4798      	blx	r3
    d73c:	e7f8      	b.n	d730 <clock_async_start+0x4c>
		if (ref == 1) {
    d73e:	2b01      	cmp	r3, #1
    d740:	d108      	bne.n	d754 <clock_async_start+0x70>
			do_start =  (config->start_handler) ?
    d742:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
    d744:	b943      	cbnz	r3, d758 <clock_async_start+0x74>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    d746:	2201      	movs	r2, #1
    d748:	7abb      	ldrb	r3, [r7, #10]
    d74a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d74e:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
    d752:	601a      	str	r2, [r3, #0]
		if (data) {
    d754:	b954      	cbnz	r4, d76c <clock_async_start+0x88>
    d756:	e7eb      	b.n	d730 <clock_async_start+0x4c>
					config->start_handler(dev) : true;
    d758:	4630      	mov	r0, r6
    d75a:	4798      	blx	r3
    d75c:	2800      	cmp	r0, #0
    d75e:	d1f2      	bne.n	d746 <clock_async_start+0x62>
			} else if (data) {
    d760:	2c00      	cmp	r4, #0
    d762:	d0e5      	beq.n	d730 <clock_async_start+0x4c>
				data->cb(dev, data->user_data);
    d764:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    d768:	4630      	mov	r0, r6
    d76a:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
    d76c:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
    d76e:	429c      	cmp	r4, r3
    d770:	d00d      	beq.n	d78e <clock_async_start+0xaa>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    d772:	b113      	cbz	r3, d77a <clock_async_start+0x96>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d774:	681b      	ldr	r3, [r3, #0]
	} while (item);
    d776:	2b00      	cmp	r3, #0
    d778:	d1f9      	bne.n	d76e <clock_async_start+0x8a>
	parent->next = child;
    d77a:	2000      	movs	r0, #0
    d77c:	6020      	str	r0, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    d77e:	686b      	ldr	r3, [r5, #4]
    d780:	b913      	cbnz	r3, d788 <clock_async_start+0xa4>
	list->head = node;
    d782:	e9c5 4400 	strd	r4, r4, [r5]
    d786:	e7d3      	b.n	d730 <clock_async_start+0x4c>
	parent->next = child;
    d788:	601c      	str	r4, [r3, #0]
	list->tail = node;
    d78a:	606c      	str	r4, [r5, #4]
    d78c:	e7d1      	b.n	d732 <clock_async_start+0x4e>
				return -EALREADY;
    d78e:	f06f 0044 	mvn.w	r0, #68	; 0x44
    d792:	e7ce      	b.n	d732 <clock_async_start+0x4e>
    d794:	000256b8 	.word	0x000256b8
    d798:	000255f3 	.word	0x000255f3
    d79c:	00025684 	.word	0x00025684

0000d7a0 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    d7a0:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
    d7a2:	4b10      	ldr	r3, [pc, #64]	; (d7e4 <nrf_power_clock_isr+0x44>)
    d7a4:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
    d7a6:	b162      	cbz	r2, d7c2 <nrf_power_clock_isr+0x22>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
    d7a8:	4a0f      	ldr	r2, [pc, #60]	; (d7e8 <nrf_power_clock_isr+0x48>)
    d7aa:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
    d7ae:	07d1      	lsls	r1, r2, #31
    d7b0:	d507      	bpl.n	d7c2 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
    d7b2:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
    d7b4:	480d      	ldr	r0, [pc, #52]	; (d7ec <nrf_power_clock_isr+0x4c>)
    d7b6:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    d7b8:	6883      	ldr	r3, [r0, #8]
    d7ba:	7a5b      	ldrb	r3, [r3, #9]
    d7bc:	b90b      	cbnz	r3, d7c2 <nrf_power_clock_isr+0x22>
			clkstarted_handle(hfclk_dev);
    d7be:	f015 fb16 	bl	22dee <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
    d7c2:	4b0b      	ldr	r3, [pc, #44]	; (d7f0 <nrf_power_clock_isr+0x50>)
    d7c4:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
    d7c6:	b15a      	cbz	r2, d7e0 <nrf_power_clock_isr+0x40>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
    d7c8:	4a07      	ldr	r2, [pc, #28]	; (d7e8 <nrf_power_clock_isr+0x48>)
    d7ca:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
    d7ce:	0792      	lsls	r2, r2, #30
    d7d0:	d506      	bpl.n	d7e0 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
    d7d2:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
    d7d4:	4807      	ldr	r0, [pc, #28]	; (d7f4 <nrf_power_clock_isr+0x54>)
    d7d6:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    d7d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
    d7dc:	f015 bb07 	b.w	22dee <clkstarted_handle>
}
    d7e0:	bd08      	pop	{r3, pc}
    d7e2:	bf00      	nop
    d7e4:	40005100 	.word	0x40005100
    d7e8:	40005000 	.word	0x40005000
    d7ec:	2002a258 	.word	0x2002a258
    d7f0:	40005104 	.word	0x40005104
    d7f4:	2002a264 	.word	0x2002a264

0000d7f8 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    d7f8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    d7fa:	4c06      	ldr	r4, [pc, #24]	; (d814 <z_clock_isr+0x1c>)
    d7fc:	4906      	ldr	r1, [pc, #24]	; (d818 <z_clock_isr+0x20>)
    d7fe:	4622      	mov	r2, r4
    d800:	4806      	ldr	r0, [pc, #24]	; (d81c <z_clock_isr+0x24>)
    d802:	2317      	movs	r3, #23
    d804:	f015 fa93 	bl	22d2e <printk>
    d808:	4620      	mov	r0, r4
}
    d80a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    d80e:	2117      	movs	r1, #23
    d810:	f015 ba9a 	b.w	22d48 <assert_post_action>
    d814:	00025724 	.word	0x00025724
    d818:	000261cb 	.word	0x000261cb
    d81c:	000255f3 	.word	0x000255f3

0000d820 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    d820:	2200      	movs	r2, #0
{
    d822:	b538      	push	{r3, r4, r5, lr}
	RTC->EVENTS_COMPARE[0] = 0;
    d824:	4b21      	ldr	r3, [pc, #132]	; (d8ac <rtc1_nrf_isr+0x8c>)
    d826:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    d82a:	f04f 0320 	mov.w	r3, #32
    d82e:	f3ef 8511 	mrs	r5, BASEPRI
    d832:	f383 8811 	msr	BASEPRI, r3
    d836:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = z_arch_irq_lock();

#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    d83a:	481d      	ldr	r0, [pc, #116]	; (d8b0 <rtc1_nrf_isr+0x90>)
    d83c:	f013 fd30 	bl	212a0 <z_spin_lock_valid>
    d840:	b960      	cbnz	r0, d85c <rtc1_nrf_isr+0x3c>
    d842:	491c      	ldr	r1, [pc, #112]	; (d8b4 <rtc1_nrf_isr+0x94>)
    d844:	235f      	movs	r3, #95	; 0x5f
    d846:	4a1c      	ldr	r2, [pc, #112]	; (d8b8 <rtc1_nrf_isr+0x98>)
    d848:	481c      	ldr	r0, [pc, #112]	; (d8bc <rtc1_nrf_isr+0x9c>)
    d84a:	f015 fa70 	bl	22d2e <printk>
    d84e:	481c      	ldr	r0, [pc, #112]	; (d8c0 <rtc1_nrf_isr+0xa0>)
    d850:	f015 fa6d 	bl	22d2e <printk>
    d854:	215f      	movs	r1, #95	; 0x5f
    d856:	4818      	ldr	r0, [pc, #96]	; (d8b8 <rtc1_nrf_isr+0x98>)
    d858:	f015 fa76 	bl	22d48 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
    d85c:	4814      	ldr	r0, [pc, #80]	; (d8b0 <rtc1_nrf_isr+0x90>)
    d85e:	f013 fd3d 	bl	212dc <z_spin_lock_set_owner>
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
    d862:	4b12      	ldr	r3, [pc, #72]	; (d8ac <rtc1_nrf_isr+0x8c>)

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    d864:	4a17      	ldr	r2, [pc, #92]	; (d8c4 <rtc1_nrf_isr+0xa4>)
    d866:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
    d86a:	6813      	ldr	r3, [r2, #0]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    d86c:	4810      	ldr	r0, [pc, #64]	; (d8b0 <rtc1_nrf_isr+0x90>)
	return (a - b) & COUNTER_MAX;
    d86e:	1ae4      	subs	r4, r4, r3
    d870:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    d874:	4423      	add	r3, r4
    d876:	6013      	str	r3, [r2, #0]
    d878:	f013 fd20 	bl	212bc <z_spin_unlock_valid>
    d87c:	b960      	cbnz	r0, d898 <rtc1_nrf_isr+0x78>
    d87e:	4912      	ldr	r1, [pc, #72]	; (d8c8 <rtc1_nrf_isr+0xa8>)
    d880:	2372      	movs	r3, #114	; 0x72
    d882:	4a0d      	ldr	r2, [pc, #52]	; (d8b8 <rtc1_nrf_isr+0x98>)
    d884:	480d      	ldr	r0, [pc, #52]	; (d8bc <rtc1_nrf_isr+0x9c>)
    d886:	f015 fa52 	bl	22d2e <printk>
    d88a:	4810      	ldr	r0, [pc, #64]	; (d8cc <rtc1_nrf_isr+0xac>)
    d88c:	f015 fa4f 	bl	22d2e <printk>
    d890:	2172      	movs	r1, #114	; 0x72
    d892:	4809      	ldr	r0, [pc, #36]	; (d8b8 <rtc1_nrf_isr+0x98>)
    d894:	f015 fa58 	bl	22d48 <assert_post_action>
	__asm__ volatile(
    d898:	f385 8811 	msr	BASEPRI, r5
    d89c:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    d8a0:	4620      	mov	r0, r4
}
    d8a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    d8a6:	f014 b83f 	b.w	21928 <z_clock_announce>
    d8aa:	bf00      	nop
    d8ac:	40015000 	.word	0x40015000
    d8b0:	2002002c 	.word	0x2002002c
    d8b4:	0002576e 	.word	0x0002576e
    d8b8:	0002574f 	.word	0x0002574f
    d8bc:	000255f3 	.word	0x000255f3
    d8c0:	00025783 	.word	0x00025783
    d8c4:	20020028 	.word	0x20020028
    d8c8:	00025798 	.word	0x00025798
    d8cc:	000257af 	.word	0x000257af

0000d8d0 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    d8d0:	b570      	push	{r4, r5, r6, lr}
    d8d2:	4818      	ldr	r0, [pc, #96]	; (d934 <z_clock_driver_init+0x64>)
    d8d4:	f011 fb96 	bl	1f004 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    d8d8:	b348      	cbz	r0, d92e <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    d8da:	6843      	ldr	r3, [r0, #4]
    d8dc:	2100      	movs	r1, #0
    d8de:	681b      	ldr	r3, [r3, #0]
    d8e0:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    d8e2:	2601      	movs	r6, #1
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    d8e4:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    d8e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d8ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    d8ee:	4d12      	ldr	r5, [pc, #72]	; (d938 <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    d8f0:	4631      	mov	r1, r6
    d8f2:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    d8f6:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    d8fa:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d8fe:	4b0f      	ldr	r3, [pc, #60]	; (d93c <z_clock_driver_init+0x6c>)
    d900:	2015      	movs	r0, #21
    d902:	601c      	str	r4, [r3, #0]
    d904:	4b0e      	ldr	r3, [pc, #56]	; (d940 <z_clock_driver_init+0x70>)
    d906:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    d90a:	4622      	mov	r2, r4
    d90c:	f000 f9ce 	bl	dcac <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    d910:	2015      	movs	r0, #21
    d912:	f000 f9bb 	bl	dc8c <z_arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    d916:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    d918:	4b0a      	ldr	r3, [pc, #40]	; (d944 <z_clock_driver_init+0x74>)
    d91a:	601e      	str	r6, [r3, #0]
    d91c:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    d91e:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
    d922:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    d924:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    d928:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
    d92c:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    d92e:	f04f 30ff 	mov.w	r0, #4294967295
    d932:	e7fb      	b.n	d92c <z_clock_driver_init+0x5c>
    d934:	00025706 	.word	0x00025706
    d938:	40015000 	.word	0x40015000
    d93c:	40015140 	.word	0x40015140
    d940:	e000e100 	.word	0xe000e100
    d944:	40015008 	.word	0x40015008

0000d948 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    d948:	b538      	push	{r3, r4, r5, lr}
    d94a:	4b34      	ldr	r3, [pc, #208]	; (da1c <z_clock_set_timeout+0xd4>)
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    d94c:	f1b0 3fff 	cmp.w	r0, #4294967295
    d950:	bf08      	it	eq
    d952:	4618      	moveq	r0, r3
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    d954:	1e44      	subs	r4, r0, #1
    d956:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    d95a:	429c      	cmp	r4, r3
    d95c:	bfa8      	it	ge
    d95e:	461c      	movge	r4, r3
	__asm__ volatile(
    d960:	f04f 0320 	mov.w	r3, #32
    d964:	f3ef 8511 	mrs	r5, BASEPRI
    d968:	f383 8811 	msr	BASEPRI, r3
    d96c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    d970:	482b      	ldr	r0, [pc, #172]	; (da20 <z_clock_set_timeout+0xd8>)
    d972:	f013 fc95 	bl	212a0 <z_spin_lock_valid>
    d976:	b960      	cbnz	r0, d992 <z_clock_set_timeout+0x4a>
    d978:	492a      	ldr	r1, [pc, #168]	; (da24 <z_clock_set_timeout+0xdc>)
    d97a:	235f      	movs	r3, #95	; 0x5f
    d97c:	4a2a      	ldr	r2, [pc, #168]	; (da28 <z_clock_set_timeout+0xe0>)
    d97e:	482b      	ldr	r0, [pc, #172]	; (da2c <z_clock_set_timeout+0xe4>)
    d980:	f015 f9d5 	bl	22d2e <printk>
    d984:	482a      	ldr	r0, [pc, #168]	; (da30 <z_clock_set_timeout+0xe8>)
    d986:	f015 f9d2 	bl	22d2e <printk>
    d98a:	215f      	movs	r1, #95	; 0x5f
    d98c:	4826      	ldr	r0, [pc, #152]	; (da28 <z_clock_set_timeout+0xe0>)
    d98e:	f015 f9db 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
    d992:	4823      	ldr	r0, [pc, #140]	; (da20 <z_clock_set_timeout+0xd8>)
    d994:	f013 fca2 	bl	212dc <z_spin_lock_set_owner>
     return p_reg->COUNTER;
    d998:	4a26      	ldr	r2, [pc, #152]	; (da34 <z_clock_set_timeout+0xec>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    d99a:	4927      	ldr	r1, [pc, #156]	; (da38 <z_clock_set_timeout+0xf0>)
    d99c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    d9a0:	6809      	ldr	r1, [r1, #0]
	return (a - b) & COUNTER_MAX;
    d9a2:	1a58      	subs	r0, r3, r1
    d9a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
    d9a8:	3101      	adds	r1, #1
    d9aa:	4408      	add	r0, r1
    d9ac:	4420      	add	r0, r4
	return (a - b) & COUNTER_MAX;
    d9ae:	1ac3      	subs	r3, r0, r3
    d9b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d9b4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    d9b8:	2b02      	cmp	r3, #2
    p_reg->CC[ch] = cc_val;
    d9ba:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    d9be:	d915      	bls.n	d9ec <z_clock_set_timeout+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    d9c0:	4817      	ldr	r0, [pc, #92]	; (da20 <z_clock_set_timeout+0xd8>)
    d9c2:	f013 fc7b 	bl	212bc <z_spin_unlock_valid>
    d9c6:	b960      	cbnz	r0, d9e2 <z_clock_set_timeout+0x9a>
    d9c8:	491c      	ldr	r1, [pc, #112]	; (da3c <z_clock_set_timeout+0xf4>)
    d9ca:	2372      	movs	r3, #114	; 0x72
    d9cc:	4a16      	ldr	r2, [pc, #88]	; (da28 <z_clock_set_timeout+0xe0>)
    d9ce:	4817      	ldr	r0, [pc, #92]	; (da2c <z_clock_set_timeout+0xe4>)
    d9d0:	f015 f9ad 	bl	22d2e <printk>
    d9d4:	481a      	ldr	r0, [pc, #104]	; (da40 <z_clock_set_timeout+0xf8>)
    d9d6:	f015 f9aa 	bl	22d2e <printk>
    d9da:	2172      	movs	r1, #114	; 0x72
    d9dc:	4812      	ldr	r0, [pc, #72]	; (da28 <z_clock_set_timeout+0xe0>)
    d9de:	f015 f9b3 	bl	22d48 <assert_post_action>
	__asm__ volatile(
    d9e2:	f385 8811 	msr	BASEPRI, r5
    d9e6:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    d9ea:	bd38      	pop	{r3, r4, r5, pc}
     return p_reg->COUNTER;
    d9ec:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    d9f0:	4914      	ldr	r1, [pc, #80]	; (da44 <z_clock_set_timeout+0xfc>)
	return (a - b) & COUNTER_MAX;
    d9f2:	1ac3      	subs	r3, r0, r3
    d9f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    d9f8:	1e5c      	subs	r4, r3, #1
    d9fa:	428c      	cmp	r4, r1
    d9fc:	d905      	bls.n	da0a <z_clock_set_timeout+0xc2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d9fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    da02:	4b11      	ldr	r3, [pc, #68]	; (da48 <z_clock_set_timeout+0x100>)
    da04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    da08:	e7da      	b.n	d9c0 <z_clock_set_timeout+0x78>
		} else if (dt == 1) {
    da0a:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    da0c:	bf02      	ittt	eq
    da0e:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    da10:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    da14:	f8c2 0540 	streq.w	r0, [r2, #1344]	; 0x540
    da18:	e7d2      	b.n	d9c0 <z_clock_set_timeout+0x78>
    da1a:	bf00      	nop
    da1c:	00fffffe 	.word	0x00fffffe
    da20:	2002002c 	.word	0x2002002c
    da24:	0002576e 	.word	0x0002576e
    da28:	0002574f 	.word	0x0002574f
    da2c:	000255f3 	.word	0x000255f3
    da30:	00025783 	.word	0x00025783
    da34:	40015000 	.word	0x40015000
    da38:	20020028 	.word	0x20020028
    da3c:	00025798 	.word	0x00025798
    da40:	000257af 	.word	0x000257af
    da44:	007ffffe 	.word	0x007ffffe
    da48:	e000e100 	.word	0xe000e100

0000da4c <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
    da4c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    da4e:	f04f 0320 	mov.w	r3, #32
    da52:	f3ef 8511 	mrs	r5, BASEPRI
    da56:	f383 8811 	msr	BASEPRI, r3
    da5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    da5e:	4819      	ldr	r0, [pc, #100]	; (dac4 <z_clock_elapsed+0x78>)
    da60:	f013 fc1e 	bl	212a0 <z_spin_lock_valid>
    da64:	b960      	cbnz	r0, da80 <z_clock_elapsed+0x34>
    da66:	4918      	ldr	r1, [pc, #96]	; (dac8 <z_clock_elapsed+0x7c>)
    da68:	235f      	movs	r3, #95	; 0x5f
    da6a:	4a18      	ldr	r2, [pc, #96]	; (dacc <z_clock_elapsed+0x80>)
    da6c:	4818      	ldr	r0, [pc, #96]	; (dad0 <z_clock_elapsed+0x84>)
    da6e:	f015 f95e 	bl	22d2e <printk>
    da72:	4818      	ldr	r0, [pc, #96]	; (dad4 <z_clock_elapsed+0x88>)
    da74:	f015 f95b 	bl	22d2e <printk>
    da78:	215f      	movs	r1, #95	; 0x5f
    da7a:	4814      	ldr	r0, [pc, #80]	; (dacc <z_clock_elapsed+0x80>)
    da7c:	f015 f964 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
    da80:	4810      	ldr	r0, [pc, #64]	; (dac4 <z_clock_elapsed+0x78>)
    da82:	f013 fc2b 	bl	212dc <z_spin_lock_set_owner>
     return p_reg->COUNTER;
    da86:	4b14      	ldr	r3, [pc, #80]	; (dad8 <z_clock_elapsed+0x8c>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    da88:	480e      	ldr	r0, [pc, #56]	; (dac4 <z_clock_elapsed+0x78>)
    da8a:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    da8e:	4b13      	ldr	r3, [pc, #76]	; (dadc <z_clock_elapsed+0x90>)
	return (a - b) & COUNTER_MAX;
    da90:	681b      	ldr	r3, [r3, #0]
    da92:	1ae4      	subs	r4, r4, r3
    da94:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    da98:	f013 fc10 	bl	212bc <z_spin_unlock_valid>
    da9c:	b960      	cbnz	r0, dab8 <z_clock_elapsed+0x6c>
    da9e:	4910      	ldr	r1, [pc, #64]	; (dae0 <z_clock_elapsed+0x94>)
    daa0:	2372      	movs	r3, #114	; 0x72
    daa2:	4a0a      	ldr	r2, [pc, #40]	; (dacc <z_clock_elapsed+0x80>)
    daa4:	480a      	ldr	r0, [pc, #40]	; (dad0 <z_clock_elapsed+0x84>)
    daa6:	f015 f942 	bl	22d2e <printk>
    daaa:	480e      	ldr	r0, [pc, #56]	; (dae4 <z_clock_elapsed+0x98>)
    daac:	f015 f93f 	bl	22d2e <printk>
    dab0:	2172      	movs	r1, #114	; 0x72
    dab2:	4806      	ldr	r0, [pc, #24]	; (dacc <z_clock_elapsed+0x80>)
    dab4:	f015 f948 	bl	22d48 <assert_post_action>
	__asm__ volatile(
    dab8:	f385 8811 	msr	BASEPRI, r5
    dabc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    dac0:	4620      	mov	r0, r4
    dac2:	bd38      	pop	{r3, r4, r5, pc}
    dac4:	2002002c 	.word	0x2002002c
    dac8:	0002576e 	.word	0x0002576e
    dacc:	0002574f 	.word	0x0002574f
    dad0:	000255f3 	.word	0x000255f3
    dad4:	00025783 	.word	0x00025783
    dad8:	40015000 	.word	0x40015000
    dadc:	20020028 	.word	0x20020028
    dae0:	00025798 	.word	0x00025798
    dae4:	000257af 	.word	0x000257af

0000dae8 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    dae8:	4804      	ldr	r0, [pc, #16]	; (dafc <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    daea:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    daec:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    daee:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    daf0:	d003      	beq.n	dafa <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    daf2:	4903      	ldr	r1, [pc, #12]	; (db00 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    daf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    daf8:	600a      	str	r2, [r1, #0]

0000dafa <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    dafa:	4770      	bx	lr
    ldr r0, =_kernel
    dafc:	20025ab4 	.word	0x20025ab4
    ldr r1, =_SCS_ICSR
    db00:	e000ed04 	.word	0xe000ed04

0000db04 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    db04:	4929      	ldr	r1, [pc, #164]	; (dbac <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    db06:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    db08:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    db0c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    db0e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    db12:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    db16:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    db1a:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    db1e:	d004      	beq.n	db2a <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    db20:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    db24:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    db28:	e007      	b.n	db3a <out_fp_endif>

0000db2a <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    db2a:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
    db2e:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    db32:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    db36:	f050 0004 	orrs.w	r0, r0, #4

0000db3a <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    db3a:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    db3e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    db40:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    db44:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    db48:	4f19      	ldr	r7, [pc, #100]	; (dbb0 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    db4a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    db4e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    db50:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    db52:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    db54:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    db56:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    db58:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    db5a:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    db5e:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    db62:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    db66:	d105      	bne.n	db74 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    db68:	2300      	movs	r3, #0
    vmsr fpscr, r3
    db6a:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    db6e:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    db72:	e005      	b.n	db80 <in_fp_endif>

0000db74 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    db74:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    db78:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
    db7c:	ec90 8a10 	vldmia	r0, {s16-s31}

0000db80 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    db80:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    db84:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    db88:	f383 8814 	msr	CONTROL, r3
    isb
    db8c:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    db90:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    db92:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    db94:	f015 f959 	bl	22e4a <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    db98:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    db9c:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    dba0:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    dba4:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    dba8:	4770      	bx	lr
    dbaa:	0000      	.short	0x0000
    ldr r1, =_kernel
    dbac:	20025ab4 	.word	0x20025ab4
    ldr v4, =_SCS_ICSR
    dbb0:	e000ed04 	.word	0xe000ed04

0000dbb4 <z_arm_svc>:
 */
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
    tst lr, #0x4    /* did we come from thread mode ? */
    dbb4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    dbb8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    dbba:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    dbbe:	f3ef 8009 	mrsne	r0, PSP


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    dbc2:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
    ldrb r1, [r1, #-2]
    dbc4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
    tst r2, #0x1
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    dbc8:	2902      	cmp	r1, #2
    beq _oops
    dbca:	d0ff      	beq.n	dbcc <_oops>

0000dbcc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    dbcc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    dbce:	f015 f931 	bl	22e34 <z_do_kernel_oops>
    pop {r0, pc}
    dbd2:	bd01      	pop	{r0, pc}

0000dbd4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    dbd4:	4901      	ldr	r1, [pc, #4]	; (dbdc <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    dbd6:	2210      	movs	r2, #16
	str r2, [r1]
    dbd8:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    dbda:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    dbdc:	e000ed10 	.word	0xe000ed10

0000dbe0 <z_arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    dbe0:	4040      	eors	r0, r0
	msr BASEPRI, r0
    dbe2:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    dbe6:	bf30      	wfi

	bx lr
    dbe8:	4770      	bx	lr
    dbea:	bf00      	nop

0000dbec <z_arm_bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    dbec:	4040      	eors	r0, r0
	msr BASEPRI, r0
    dbee:	f380 8811 	msr	BASEPRI, r0
	/* RETTOBASE flag is not banked between security states.
	 * Therefore, we cannot rely on this flag, to obtain the SP
	 * of the current security state.
	 * Instead, we use the EXC_RETURN.SPSEL flag.
	 */
 	ldr r0, =0x4
    dbf2:	f04f 0004 	mov.w	r0, #4
	mov r1, lr
    dbf6:	4671      	mov	r1, lr
	tst r1, r0
    dbf8:	4201      	tst	r1, r0
	beq _s_stack_frame_msp
    dbfa:	d002      	beq.n	dc02 <_s_stack_frame_msp>
	mrs r0, PSP
    dbfc:	f3ef 8009 	mrs	r0, PSP
	bne _s_stack_frame_endif
    dc00:	d101      	bne.n	dc06 <_s_stack_frame_endif>

0000dc02 <_s_stack_frame_msp>:
_s_stack_frame_msp:
	mrs r0, MSP
    dc02:	f3ef 8008 	mrs	r0, MSP

0000dc06 <_s_stack_frame_endif>:
	 *
	 * To determine this we need to inspect the EXC_RETURN value
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
    dc06:	4671      	mov	r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    dc08:	b501      	push	{r0, lr}
	bl z_arm_fault
    dc0a:	f000 f9b7 	bl	df7c <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    dc0e:	bd01      	pop	{r0, pc}

0000dc10 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    dc10:	bf30      	wfi
    b z_SysNmiOnReset
    dc12:	f7ff bffd 	b.w	dc10 <z_SysNmiOnReset>
    dc16:	bf00      	nop

0000dc18 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    dc18:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    dc1a:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    dc1c:	4a0b      	ldr	r2, [pc, #44]	; (dc4c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    dc1e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    dc20:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    dc22:	bf1e      	ittt	ne
	movne	r1, #0
    dc24:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    dc26:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    dc28:	f016 f885 	blne	23d36 <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    dc2c:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    dc2e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    dc32:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    dc36:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    dc3a:	4905      	ldr	r1, [pc, #20]	; (dc50 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    dc3c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    dc3e:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    dc40:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    dc42:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    dc46:	4903      	ldr	r1, [pc, #12]	; (dc54 <_isr_wrapper+0x3c>)
	bx r1
    dc48:	4708      	bx	r1
    dc4a:	0000      	.short	0x0000
	ldr r2, =_kernel
    dc4c:	20025ab4 	.word	0x20025ab4
	ldr r1, =_sw_isr_table
    dc50:	00023fa4 	.word	0x00023fa4
	ldr r1, =z_arm_int_exit
    dc54:	0000dae9 	.word	0x0000dae9

0000dc58 <z_arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    dc58:	4a09      	ldr	r2, [pc, #36]	; (dc80 <z_arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    dc5a:	490a      	ldr	r1, [pc, #40]	; (dc84 <z_arch_swap+0x2c>)
	_current->arch.basepri = key;
    dc5c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    dc5e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    dc60:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    dc62:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    dc64:	4908      	ldr	r1, [pc, #32]	; (dc88 <z_arch_swap+0x30>)
    dc66:	684b      	ldr	r3, [r1, #4]
    dc68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    dc6c:	604b      	str	r3, [r1, #4]
    dc6e:	2300      	movs	r3, #0
    dc70:	f383 8811 	msr	BASEPRI, r3
    dc74:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    dc78:	6893      	ldr	r3, [r2, #8]
}
    dc7a:	6e98      	ldr	r0, [r3, #104]	; 0x68
    dc7c:	4770      	bx	lr
    dc7e:	bf00      	nop
    dc80:	20025ab4 	.word	0x20025ab4
    dc84:	00025498 	.word	0x00025498
    dc88:	e000ed00 	.word	0xe000ed00

0000dc8c <z_arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    dc8c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    dc8e:	2b00      	cmp	r3, #0
    dc90:	db08      	blt.n	dca4 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    dc92:	2201      	movs	r2, #1
    dc94:	f000 001f 	and.w	r0, r0, #31
    dc98:	fa02 f000 	lsl.w	r0, r2, r0
    dc9c:	4a02      	ldr	r2, [pc, #8]	; (dca8 <z_arch_irq_enable+0x1c>)
    dc9e:	095b      	lsrs	r3, r3, #5
    dca0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    dca4:	4770      	bx	lr
    dca6:	bf00      	nop
    dca8:	e000e100 	.word	0xe000e100

0000dcac <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
    dcac:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    dcae:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
    dcb0:	2c07      	cmp	r4, #7
{
    dcb2:	4605      	mov	r5, r0
    dcb4:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
    dcb6:	d90e      	bls.n	dcd6 <z_arm_irq_priority_set+0x2a>
    dcb8:	2360      	movs	r3, #96	; 0x60
    dcba:	4a10      	ldr	r2, [pc, #64]	; (dcfc <z_arm_irq_priority_set+0x50>)
    dcbc:	4910      	ldr	r1, [pc, #64]	; (dd00 <z_arm_irq_priority_set+0x54>)
    dcbe:	4811      	ldr	r0, [pc, #68]	; (dd04 <z_arm_irq_priority_set+0x58>)
    dcc0:	f015 f835 	bl	22d2e <printk>
    dcc4:	4631      	mov	r1, r6
    dcc6:	4810      	ldr	r0, [pc, #64]	; (dd08 <z_arm_irq_priority_set+0x5c>)
    dcc8:	2207      	movs	r2, #7
    dcca:	f015 f830 	bl	22d2e <printk>
    dcce:	2160      	movs	r1, #96	; 0x60
    dcd0:	480a      	ldr	r0, [pc, #40]	; (dcfc <z_arm_irq_priority_set+0x50>)
    dcd2:	f015 f839 	bl	22d48 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    dcd6:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    dcd8:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dcda:	bfa8      	it	ge
    dcdc:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    dce0:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dce4:	bfb8      	it	lt
    dce6:	4b09      	ldrlt	r3, [pc, #36]	; (dd0c <z_arm_irq_priority_set+0x60>)
    dce8:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dcea:	bfab      	itete	ge
    dcec:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dcf0:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dcf4:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dcf8:	555c      	strblt	r4, [r3, r5]
}
    dcfa:	bd70      	pop	{r4, r5, r6, pc}
    dcfc:	000257c2 	.word	0x000257c2
    dd00:	000257e9 	.word	0x000257e9
    dd04:	000255f3 	.word	0x000255f3
    dd08:	00025804 	.word	0x00025804
    dd0c:	e000ed14 	.word	0xe000ed14

0000dd10 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    dd10:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    dd12:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    dd14:	4b04      	ldr	r3, [pc, #16]	; (dd28 <_arch_isr_direct_pm+0x18>)
    dd16:	6a18      	ldr	r0, [r3, #32]
    dd18:	b118      	cbz	r0, dd22 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    dd1a:	2200      	movs	r2, #0
    dd1c:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    dd1e:	f016 f80a 	bl	23d36 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    dd22:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    dd24:	bd08      	pop	{r3, pc}
    dd26:	bf00      	nop
    dd28:	20025ab4 	.word	0x20025ab4

0000dd2c <z_arch_new_thread>:
 */
void z_arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		       size_t stackSize, k_thread_entry_t pEntry,
		       void *parameter1, void *parameter2, void *parameter3,
		       int priority, unsigned int options)
{
    dd2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dd30:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    dd32:	4605      	mov	r5, r0
	char *pStackMem = Z_THREAD_STACK_BUFFER(stack);
	char *stackEnd;
	/* Offset between the top of stack and the high end of stack area. */
	u32_t top_of_stack_offset = 0U;

	Z_ASSERT_VALID_PRIO(priority, pEntry);
    dd34:	2e0f      	cmp	r6, #15
{
    dd36:	4689      	mov	r9, r1
    dd38:	4690      	mov	r8, r2
    dd3a:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(priority, pEntry);
    dd3c:	d127      	bne.n	dd8e <z_arch_new_thread+0x62>
    dd3e:	4b1f      	ldr	r3, [pc, #124]	; (ddbc <z_arch_new_thread+0x90>)
    dd40:	429f      	cmp	r7, r3
    dd42:	d128      	bne.n	dd96 <z_arch_new_thread+0x6a>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    dd44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dd46:	2204      	movs	r2, #4
    dd48:	4631      	mov	r1, r6
    dd4a:	4628      	mov	r0, r5
    dd4c:	f016 f8b4 	bl	23eb8 <z_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    dd50:	2200      	movs	r2, #0
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    dd52:	eb09 0408 	add.w	r4, r9, r8
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    dd56:	491a      	ldr	r1, [pc, #104]	; (ddc0 <z_arch_new_thread+0x94>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    dd58:	f1a4 0320 	sub.w	r3, r4, #32
    dd5c:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    dd60:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
    dd64:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    dd68:	e9c5 9816 	strd	r9, r8, [r5, #88]	; 0x58
    dd6c:	6199      	str	r1, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    dd6e:	9908      	ldr	r1, [sp, #32]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    dd70:	601f      	str	r7, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    dd72:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    dd74:	9909      	ldr	r1, [sp, #36]	; 0x24
    dd76:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    dd78:	990a      	ldr	r1, [sp, #40]	; 0x28
    dd7a:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
    dd7c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    dd80:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    dd82:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    dd84:	666a      	str	r2, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
    dd86:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    dd8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(priority, pEntry);
    dd8e:	f106 0310 	add.w	r3, r6, #16
    dd92:	2b1e      	cmp	r3, #30
    dd94:	d9d6      	bls.n	dd44 <z_arch_new_thread+0x18>
    dd96:	232e      	movs	r3, #46	; 0x2e
    dd98:	4a0a      	ldr	r2, [pc, #40]	; (ddc4 <z_arch_new_thread+0x98>)
    dd9a:	490b      	ldr	r1, [pc, #44]	; (ddc8 <z_arch_new_thread+0x9c>)
    dd9c:	480b      	ldr	r0, [pc, #44]	; (ddcc <z_arch_new_thread+0xa0>)
    dd9e:	f014 ffc6 	bl	22d2e <printk>
    dda2:	4631      	mov	r1, r6
    dda4:	f06f 030f 	mvn.w	r3, #15
    dda8:	220e      	movs	r2, #14
    ddaa:	4809      	ldr	r0, [pc, #36]	; (ddd0 <z_arch_new_thread+0xa4>)
    ddac:	f014 ffbf 	bl	22d2e <printk>
    ddb0:	212e      	movs	r1, #46	; 0x2e
    ddb2:	4804      	ldr	r0, [pc, #16]	; (ddc4 <z_arch_new_thread+0x98>)
    ddb4:	f014 ffc8 	bl	22d48 <assert_post_action>
    ddb8:	e7c4      	b.n	dd44 <z_arch_new_thread+0x18>
    ddba:	bf00      	nop
    ddbc:	0001f0d1 	.word	0x0001f0d1
    ddc0:	000229e5 	.word	0x000229e5
    ddc4:	00025839 	.word	0x00025839
    ddc8:	0002585c 	.word	0x0002585c
    ddcc:	000255f3 	.word	0x000255f3
    ddd0:	000258e9 	.word	0x000258e9

0000ddd4 <z_arch_switch_to_main_thread>:

void z_arch_switch_to_main_thread(struct k_thread *main_thread,
				  k_thread_stack_t *main_stack,
				  size_t main_stack_size,
				  k_thread_entry_t _main)
{
    ddd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ddd8:	461f      	mov	r7, r3
    ddda:	4606      	mov	r6, r0
    dddc:	460c      	mov	r4, r1
    ddde:	4690      	mov	r8, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    dde0:	2300      	movs	r3, #0
    dde2:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    dde6:	f3ef 8514 	mrs	r5, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    ddea:	f025 0504 	bic.w	r5, r5, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    ddee:	f385 8814 	msr	CONTROL, r5
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    ddf2:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    ddf6:	f000 f965 	bl	e0c4 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    ddfa:	4b0b      	ldr	r3, [pc, #44]	; (de28 <z_arch_switch_to_main_thread+0x54>)
	start_of_main_stack =
    ddfc:	4444      	add	r4, r8
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    ddfe:	4630      	mov	r0, r6
	_current = main_thread;
    de00:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    de02:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    de06:	f015 f820 	bl	22e4a <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    de0a:	4638      	mov	r0, r7
    de0c:	f384 8809 	msr	PSP, r4
    de10:	b663      	cpsie	if
    de12:	f04f 0100 	mov.w	r1, #0
    de16:	f381 8811 	msr	BASEPRI, r1
    de1a:	f3bf 8f6f 	isb	sy
    de1e:	2100      	movs	r1, #0
    de20:	2200      	movs	r2, #0
    de22:	2300      	movs	r3, #0
    de24:	f014 fdde 	bl	229e4 <z_thread_entry>
	"bl z_thread_entry\n\t"	/* z_thread_entry(_main, 0, 0, 0); */
	:
	: "r" (_main), "r" (start_of_main_stack)
	);

	CODE_UNREACHABLE;
    de28:	20025ab4 	.word	0x20025ab4

0000de2c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    de2c:	4a11      	ldr	r2, [pc, #68]	; (de74 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    de2e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    de30:	4b11      	ldr	r3, [pc, #68]	; (de78 <z_arm_prep_c+0x4c>)
    de32:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    de36:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    de38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    de3c:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    de40:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    de44:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    de48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    de4c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    de50:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    de54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    de58:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    de5c:	2300      	movs	r3, #0
    de5e:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    de62:	f011 f94f 	bl	1f104 <z_bss_zero>
	z_data_copy();
    de66:	f011 f957 	bl	1f118 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    de6a:	f000 f8e1 	bl	e030 <z_arm_int_lib_init>
	z_cstart();
    de6e:	f011 f985 	bl	1f17c <z_cstart>
    de72:	bf00      	nop
    de74:	0000c000 	.word	0x0000c000
    de78:	e000ed00 	.word	0xe000ed00

0000de7c <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    de7c:	f014 ff6b 	bl	22d56 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    de80:	2020      	movs	r0, #32
    msr BASEPRI, r0
    de82:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    de86:	4808      	ldr	r0, [pc, #32]	; (dea8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    de88:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    de8c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    de8e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    de92:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    de96:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    de98:	4308      	orrs	r0, r1
    msr CONTROL, r0
    de9a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    de9e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    dea2:	f7ff ffc3 	bl	de2c <z_arm_prep_c>
    dea6:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    dea8:	20028088 	.word	0x20028088

0000deac <bus_fault.isra.2>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    deac:	4b0d      	ldr	r3, [pc, #52]	; (dee4 <bus_fault.isra.2+0x38>)
    deae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    deb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    deb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    deb4:	0592      	lsls	r2, r2, #22
    deb6:	d508      	bpl.n	deca <bus_fault.isra.2+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    deb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    deba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    debc:	0412      	lsls	r2, r2, #16
    debe:	d504      	bpl.n	deca <bus_fault.isra.2+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    dec0:	b118      	cbz	r0, deca <bus_fault.isra.2+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    dec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dec4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    dec8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    deca:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    decc:	4b05      	ldr	r3, [pc, #20]	; (dee4 <bus_fault.isra.2+0x38>)
    dece:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    ded0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ded2:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    ded4:	bf58      	it	pl
    ded6:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    ded8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    deda:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    dede:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    dee0:	7008      	strb	r0, [r1, #0]

	return reason;
}
    dee2:	4770      	bx	lr
    dee4:	e000ed00 	.word	0xe000ed00

0000dee8 <usage_fault.isra.3>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    dee8:	4b07      	ldr	r3, [pc, #28]	; (df08 <usage_fault.isra.3+0x20>)

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;

	return reason;
}
    deea:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    deec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    deee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    def0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    def2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    def4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    def6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    def8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    defa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    defc:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    df00:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    df04:	629a      	str	r2, [r3, #40]	; 0x28
}
    df06:	4770      	bx	lr
    df08:	e000ed00 	.word	0xe000ed00

0000df0c <mem_manage_fault.isra.6>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    df0c:	4b16      	ldr	r3, [pc, #88]	; (df68 <mem_manage_fault.isra.6+0x5c>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    df0e:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    df10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    df12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    df14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    df16:	460c      	mov	r4, r1
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    df18:	0791      	lsls	r1, r2, #30
    df1a:	d508      	bpl.n	df2e <mem_manage_fault.isra.6+0x22>
		mmfar = SCB->MMFAR;
    df1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    df1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    df20:	0612      	lsls	r2, r2, #24
    df22:	d504      	bpl.n	df2e <mem_manage_fault.isra.6+0x22>
			if (from_hard_fault) {
    df24:	b118      	cbz	r0, df2e <mem_manage_fault.isra.6+0x22>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    df26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    df28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    df2c:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    df2e:	4b0e      	ldr	r3, [pc, #56]	; (df68 <mem_manage_fault.isra.6+0x5c>)
    df30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    df32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    df34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df36:	06db      	lsls	r3, r3, #27
    df38:	d50e      	bpl.n	df58 <mem_manage_fault.isra.6+0x4c>
	__ASSERT(0,
    df3a:	490c      	ldr	r1, [pc, #48]	; (df6c <mem_manage_fault.isra.6+0x60>)
    df3c:	f240 133d 	movw	r3, #317	; 0x13d
    df40:	4a0b      	ldr	r2, [pc, #44]	; (df70 <mem_manage_fault.isra.6+0x64>)
    df42:	480c      	ldr	r0, [pc, #48]	; (df74 <mem_manage_fault.isra.6+0x68>)
    df44:	f014 fef3 	bl	22d2e <printk>
    df48:	480b      	ldr	r0, [pc, #44]	; (df78 <mem_manage_fault.isra.6+0x6c>)
    df4a:	f014 fef0 	bl	22d2e <printk>
    df4e:	f240 113d 	movw	r1, #317	; 0x13d
    df52:	4807      	ldr	r0, [pc, #28]	; (df70 <mem_manage_fault.isra.6+0x64>)
    df54:	f014 fef8 	bl	22d48 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
    df58:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    df5a:	4a03      	ldr	r2, [pc, #12]	; (df68 <mem_manage_fault.isra.6+0x5c>)
    df5c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    df5e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    df62:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    df64:	7020      	strb	r0, [r4, #0]
}
    df66:	bd10      	pop	{r4, pc}
    df68:	e000ed00 	.word	0xe000ed00
    df6c:	000261cb 	.word	0x000261cb
    df70:	0002591a 	.word	0x0002591a
    df74:	000255f3 	.word	0x000255f3
    df78:	00025945 	.word	0x00025945

0000df7c <z_arm_fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void z_arm_fault(z_arch_esf_t *esf, u32_t exc_return)
{
    df7c:	b513      	push	{r0, r1, r4, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    df7e:	4a24      	ldr	r2, [pc, #144]	; (e010 <z_arm_fault+0x94>)
{
    df80:	4604      	mov	r4, r0
				goto _exit_fatal;
			}
		}
	}
#elif defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    df82:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
    df86:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    df8a:	6853      	ldr	r3, [r2, #4]
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    df8c:	d13a      	bne.n	e004 <z_arm_fault+0x88>
			EXC_RETURN_INDICATOR_PREFIX) {
		/* Invalid EXC_RETURN value */
		goto _exit_fatal;
	}
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    df8e:	f011 0001 	ands.w	r0, r1, #1
    df92:	d137      	bne.n	e004 <z_arm_fault+0x88>
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    df94:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    df98:	3b03      	subs	r3, #3
	*recoverable = false;
    df9a:	f88d 0007 	strb.w	r0, [sp, #7]
	switch (fault) {
    df9e:	2b03      	cmp	r3, #3
    dfa0:	d812      	bhi.n	dfc8 <z_arm_fault+0x4c>
    dfa2:	e8df f003 	tbb	[pc, r3]
    dfa6:	2702      	.short	0x2702
    dfa8:	242b      	.short	0x242b
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    dfaa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    dfac:	079b      	lsls	r3, r3, #30
    dfae:	d40b      	bmi.n	dfc8 <z_arm_fault+0x4c>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    dfb0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    dfb2:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    dfb6:	d007      	beq.n	dfc8 <z_arm_fault+0x4c>
		if (SCB_MMFSR != 0) {
    dfb8:	4b16      	ldr	r3, [pc, #88]	; (e014 <z_arm_fault+0x98>)
    dfba:	781b      	ldrb	r3, [r3, #0]
    dfbc:	b14b      	cbz	r3, dfd2 <z_arm_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
    dfbe:	2001      	movs	r0, #1
    dfc0:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    dfc4:	f7ff ffa2 	bl	df0c <mem_manage_fault.isra.6>
#else
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    dfc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dfcc:	b1db      	cbz	r3, e006 <z_arm_fault+0x8a>
#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_arm_fatal_error(reason, esf);
}
    dfce:	b002      	add	sp, #8
    dfd0:	bd10      	pop	{r4, pc}
		} else if (SCB_BFSR != 0) {
    dfd2:	4b11      	ldr	r3, [pc, #68]	; (e018 <z_arm_fault+0x9c>)
    dfd4:	781b      	ldrb	r3, [r3, #0]
    dfd6:	b12b      	cbz	r3, dfe4 <z_arm_fault+0x68>
			reason = bus_fault(esf, 1, recoverable);
    dfd8:	2001      	movs	r0, #1
    dfda:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    dfde:	f7ff ff65 	bl	deac <bus_fault.isra.2>
		break;
    dfe2:	e7f1      	b.n	dfc8 <z_arm_fault+0x4c>
		} else if (SCB_UFSR != 0) {
    dfe4:	4b0d      	ldr	r3, [pc, #52]	; (e01c <z_arm_fault+0xa0>)
    dfe6:	8818      	ldrh	r0, [r3, #0]
    dfe8:	b280      	uxth	r0, r0
    dfea:	2800      	cmp	r0, #0
    dfec:	d0ec      	beq.n	dfc8 <z_arm_fault+0x4c>
		reason = usage_fault(esf);
    dfee:	f7ff ff7b 	bl	dee8 <usage_fault.isra.3>
		break;
    dff2:	e7e9      	b.n	dfc8 <z_arm_fault+0x4c>
		reason = mem_manage_fault(esf, 0, recoverable);
    dff4:	f10d 0107 	add.w	r1, sp, #7
    dff8:	2000      	movs	r0, #0
    dffa:	e7e3      	b.n	dfc4 <z_arm_fault+0x48>
		reason = bus_fault(esf, 0, recoverable);
    dffc:	f10d 0107 	add.w	r1, sp, #7
    e000:	2000      	movs	r0, #0
    e002:	e7ec      	b.n	dfde <z_arm_fault+0x62>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    e004:	2000      	movs	r0, #0
	z_arm_fatal_error(reason, esf);
    e006:	4621      	mov	r1, r4
    e008:	f014 ff12 	bl	22e30 <z_arm_fatal_error>
    e00c:	e7df      	b.n	dfce <z_arm_fault+0x52>
    e00e:	bf00      	nop
    e010:	e000ed00 	.word	0xe000ed00
    e014:	e000ed28 	.word	0xe000ed28
    e018:	e000ed29 	.word	0xe000ed29
    e01c:	e000ed2a 	.word	0xe000ed2a

0000e020 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e020:	4a02      	ldr	r2, [pc, #8]	; (e02c <z_arm_fault_init+0xc>)
    e022:	6953      	ldr	r3, [r2, #20]
    e024:	f043 0310 	orr.w	r3, r3, #16
    e028:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    e02a:	4770      	bx	lr
    e02c:	e000ed00 	.word	0xe000ed00

0000e030 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    e030:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e032:	2120      	movs	r1, #32
    e034:	4803      	ldr	r0, [pc, #12]	; (e044 <z_arm_int_lib_init+0x14>)
    e036:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e038:	3301      	adds	r3, #1
    e03a:	2b41      	cmp	r3, #65	; 0x41
    e03c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    e040:	d1f9      	bne.n	e036 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e042:	4770      	bx	lr
    e044:	e000e100 	.word	0xe000e100

0000e048 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    e048:	b538      	push	{r3, r4, r5, lr}
    e04a:	4604      	mov	r4, r0
	__asm__ volatile(
    e04c:	f04f 0320 	mov.w	r3, #32
    e050:	f3ef 8511 	mrs	r5, BASEPRI
    e054:	f383 8811 	msr	BASEPRI, r3
    e058:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
    e05c:	7b03      	ldrb	r3, [r0, #12]
    e05e:	07db      	lsls	r3, r3, #31
    e060:	d50c      	bpl.n	e07c <z_impl_k_thread_abort+0x34>
    e062:	4912      	ldr	r1, [pc, #72]	; (e0ac <z_impl_k_thread_abort+0x64>)
    e064:	2325      	movs	r3, #37	; 0x25
    e066:	4a12      	ldr	r2, [pc, #72]	; (e0b0 <z_impl_k_thread_abort+0x68>)
    e068:	4812      	ldr	r0, [pc, #72]	; (e0b4 <z_impl_k_thread_abort+0x6c>)
    e06a:	f014 fe60 	bl	22d2e <printk>
    e06e:	4812      	ldr	r0, [pc, #72]	; (e0b8 <z_impl_k_thread_abort+0x70>)
    e070:	f014 fe5d 	bl	22d2e <printk>
    e074:	2125      	movs	r1, #37	; 0x25
    e076:	480e      	ldr	r0, [pc, #56]	; (e0b0 <z_impl_k_thread_abort+0x68>)
    e078:	f014 fe66 	bl	22d48 <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
    e07c:	4620      	mov	r0, r4
    e07e:	f015 fefc 	bl	23e7a <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    e082:	4b0e      	ldr	r3, [pc, #56]	; (e0bc <z_impl_k_thread_abort+0x74>)
    e084:	689b      	ldr	r3, [r3, #8]
    e086:	42a3      	cmp	r3, r4
    e088:	d10b      	bne.n	e0a2 <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    e08a:	4b0d      	ldr	r3, [pc, #52]	; (e0c0 <z_impl_k_thread_abort+0x78>)
    e08c:	685a      	ldr	r2, [r3, #4]
    e08e:	f3c2 0208 	ubfx	r2, r2, #0, #9
    e092:	b912      	cbnz	r2, e09a <z_impl_k_thread_abort+0x52>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = z_arch_swap(key);
    e094:	4628      	mov	r0, r5
    e096:	f7ff fddf 	bl	dc58 <z_arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e09a:	685a      	ldr	r2, [r3, #4]
    e09c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    e0a0:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    e0a2:	4628      	mov	r0, r5
}
    e0a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    e0a8:	f015 be8c 	b.w	23dc4 <z_reschedule_irqlock>
    e0ac:	000259b1 	.word	0x000259b1
    e0b0:	0002597f 	.word	0x0002597f
    e0b4:	000255f3 	.word	0x000255f3
    e0b8:	000259df 	.word	0x000259df
    e0bc:	20025ab4 	.word	0x20025ab4
    e0c0:	e000ed00 	.word	0xe000ed00

0000e0c4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e0c4:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    e0c6:	4b0e      	ldr	r3, [pc, #56]	; (e100 <z_arm_configure_static_mpu_regions+0x3c>)
{
    e0c8:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    e0ca:	9302      	str	r3, [sp, #8]
    e0cc:	4b0d      	ldr	r3, [pc, #52]	; (e104 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e0ce:	4c0e      	ldr	r4, [pc, #56]	; (e108 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    e0d0:	9303      	str	r3, [sp, #12]
    e0d2:	4b0e      	ldr	r3, [pc, #56]	; (e10c <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e0d4:	4a0e      	ldr	r2, [pc, #56]	; (e110 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    e0d6:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    e0d8:	ab02      	add	r3, sp, #8
    e0da:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e0dc:	a801      	add	r0, sp, #4
    e0de:	4623      	mov	r3, r4
    e0e0:	2101      	movs	r1, #1
    e0e2:	f000 f935 	bl	e350 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    e0e6:	2300      	movs	r3, #0
    e0e8:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    e0ea:	4b0a      	ldr	r3, [pc, #40]	; (e114 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e0ec:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    e0ee:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e0f0:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    e0f2:	9305      	str	r3, [sp, #20]
    e0f4:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e0f6:	f000 f94f 	bl	e398 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e0fa:	b008      	add	sp, #32
    e0fc:	bd10      	pop	{r4, pc}
    e0fe:	bf00      	nop
    e100:	20020000 	.word	0x20020000
    e104:	00000000 	.word	0x00000000
    e108:	20040000 	.word	0x20040000
    e10c:	00010006 	.word	0x00010006
    e110:	20020000 	.word	0x20020000
    e114:	20020000 	.word	0x20020000

0000e118 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    e118:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e11a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    e11c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e11e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    e122:	f004 031f 	and.w	r3, r4, #31
    e126:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e128:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e12a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e12c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    e130:	4904      	ldr	r1, [pc, #16]	; (e144 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e132:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    e136:	f043 0301 	orr.w	r3, r3, #1
    e13a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    e13c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    e13e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    e140:	bd10      	pop	{r4, pc}
    e142:	bf00      	nop
    e144:	e000ed90 	.word	0xe000ed90

0000e148 <mpu_configure_regions.constprop.2>:

/* This internal function programs a set of given MPU regions
 * over a background memory area, optionally performing a
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
    e148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e14c:	4680      	mov	r8, r0
    e14e:	4689      	mov	r9, r1
    e150:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    e152:	2700      	movs	r7, #0
	MPU->RNR = index;
    e154:	4d48      	ldr	r5, [pc, #288]	; (e278 <mpu_configure_regions.constprop.2+0x130>)
static int mpu_configure_regions(const struct k_mem_partition
    e156:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    e158:	454f      	cmp	r7, r9
    e15a:	da07      	bge.n	e16c <mpu_configure_regions.constprop.2+0x24>
		if (regions[i]->size == 0U) {
    e15c:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
    e160:	685e      	ldr	r6, [r3, #4]
    e162:	b3c6      	cbz	r6, e1d6 <mpu_configure_regions.constprop.2+0x8e>
		&&
    e164:	2e1f      	cmp	r6, #31
    e166:	d805      	bhi.n	e174 <mpu_configure_regions.constprop.2+0x2c>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    e168:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e16c:	4620      	mov	r0, r4
    e16e:	b005      	add	sp, #20
    e170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    e174:	06f2      	lsls	r2, r6, #27
    e176:	d1f7      	bne.n	e168 <mpu_configure_regions.constprop.2+0x20>
		((part->start &
    e178:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    e17c:	f01a 0f1f 	tst.w	sl, #31
    e180:	d1f2      	bne.n	e168 <mpu_configure_regions.constprop.2+0x20>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e182:	4650      	mov	r0, sl
    e184:	f014 fb06 	bl	22794 <arm_cmse_mpu_region_get>
    e188:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e18a:	eb06 000a 	add.w	r0, r6, sl
    e18e:	3801      	subs	r0, #1
    e190:	f014 fb00 	bl	22794 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e194:	4583      	cmp	fp, r0
    e196:	d1e7      	bne.n	e168 <mpu_configure_regions.constprop.2+0x20>
		if ((u_reg_index == -EINVAL) ||
    e198:	f11b 0f16 	cmn.w	fp, #22
    e19c:	d0e4      	beq.n	e168 <mpu_configure_regions.constprop.2+0x20>
			(u_reg_index > (reg_index - 1))) {
    e19e:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    e1a0:	455b      	cmp	r3, fp
    e1a2:	dbe1      	blt.n	e168 <mpu_configure_regions.constprop.2+0x20>
	MPU->RNR = index;
    e1a4:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e1a8:	68e8      	ldr	r0, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e1aa:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	MPU->RNR = index;
    e1ae:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e1b2:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e1b4:	f020 001f 	bic.w	r0, r0, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e1b8:	e9d1 3200 	ldrd	r3, r2, [r1]
    e1bc:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    e1be:	4298      	cmp	r0, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e1c0:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e1c4:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    e1c8:	d118      	bne.n	e1fc <mpu_configure_regions.constprop.2+0xb4>
    e1ca:	4556      	cmp	r6, sl
    e1cc:	d105      	bne.n	e1da <mpu_configure_regions.constprop.2+0x92>
			mpu_configure_region(u_reg_index, regions[i]);
    e1ce:	fa5f f08b 	uxtb.w	r0, fp
    e1d2:	f014 fe42 	bl	22e5a <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e1d6:	3701      	adds	r7, #1
    e1d8:	e7be      	b.n	e158 <mpu_configure_regions.constprop.2+0x10>
	MPU->RNR = index;
    e1da:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e1de:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    e1e0:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e1e4:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    e1e8:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e1ea:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    e1ec:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    e1ee:	f014 fe34 	bl	22e5a <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e1f2:	f110 0f16 	cmn.w	r0, #22
    e1f6:	d0b7      	beq.n	e168 <mpu_configure_regions.constprop.2+0x20>
			reg_index++;
    e1f8:	1c44      	adds	r4, r0, #1
    e1fa:	e7ec      	b.n	e1d6 <mpu_configure_regions.constprop.2+0x8e>
	MPU->RNR = index;
    e1fc:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e200:	692a      	ldr	r2, [r5, #16]
    e202:	3b01      	subs	r3, #1
    e204:	f023 031f 	bic.w	r3, r3, #31
    e208:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e20c:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    e20e:	4556      	cmp	r6, sl
    e210:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e212:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    e214:	d0eb      	beq.n	e1ee <mpu_configure_regions.constprop.2+0xa6>
				mpu_configure_region(reg_index, regions[i]);
    e216:	f014 fe20 	bl	22e5a <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e21a:	f110 0f16 	cmn.w	r0, #22
    e21e:	d0a3      	beq.n	e168 <mpu_configure_regions.constprop.2+0x20>
	MPU->RNR = index;
    e220:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    e224:	68ea      	ldr	r2, [r5, #12]
    e226:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    e22a:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
    e22c:	f362 0304 	bfi	r3, r2, #0, #5
    e230:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e234:	692b      	ldr	r3, [r5, #16]
    e236:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e23a:	085b      	lsrs	r3, r3, #1
    e23c:	f363 1247 	bfi	r2, r3, #5, #3
    e240:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    e244:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
    e248:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
    e24a:	e9d2 3200 	ldrd	r3, r2, [r2]
    e24e:	4413      	add	r3, r2
    e250:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    e252:	f023 031f 	bic.w	r3, r3, #31
    e256:	441e      	add	r6, r3
    e258:	eba6 060a 	sub.w	r6, r6, sl
    e25c:	b2c4      	uxtb	r4, r0
    e25e:	f026 061f 	bic.w	r6, r6, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    e262:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    e264:	9603      	str	r6, [sp, #12]
    e266:	f63f af7f 	bhi.w	e168 <mpu_configure_regions.constprop.2+0x20>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    e26a:	4620      	mov	r0, r4
    e26c:	4669      	mov	r1, sp
    e26e:	f7ff ff53 	bl	e118 <region_init>
			reg_index++;
    e272:	3401      	adds	r4, #1
    e274:	e7af      	b.n	e1d6 <mpu_configure_regions.constprop.2+0x8e>
    e276:	bf00      	nop
    e278:	e000ed90 	.word	0xe000ed90

0000e27c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e27c:	2205      	movs	r2, #5
    e27e:	4b03      	ldr	r3, [pc, #12]	; (e28c <arm_core_mpu_enable+0x10>)
    e280:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    e282:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e286:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e28a:	4770      	bx	lr
    e28c:	e000ed90 	.word	0xe000ed90

0000e290 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e290:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e294:	2200      	movs	r2, #0
    e296:	4b01      	ldr	r3, [pc, #4]	; (e29c <arm_core_mpu_disable+0xc>)
    e298:	605a      	str	r2, [r3, #4]
}
    e29a:	4770      	bx	lr
    e29c:	e000ed90 	.word	0xe000ed90

0000e2a0 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    e2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e2a2:	4f21      	ldr	r7, [pc, #132]	; (e328 <arm_mpu_init+0x88>)
    e2a4:	683e      	ldr	r6, [r7, #0]
    e2a6:	2e10      	cmp	r6, #16
    e2a8:	d913      	bls.n	e2d2 <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    e2aa:	f240 1307 	movw	r3, #263	; 0x107
    e2ae:	4a1f      	ldr	r2, [pc, #124]	; (e32c <arm_mpu_init+0x8c>)
    e2b0:	491f      	ldr	r1, [pc, #124]	; (e330 <arm_mpu_init+0x90>)
    e2b2:	4820      	ldr	r0, [pc, #128]	; (e334 <arm_mpu_init+0x94>)
    e2b4:	f014 fd3b 	bl	22d2e <printk>
    e2b8:	2210      	movs	r2, #16
    e2ba:	4631      	mov	r1, r6
    e2bc:	481e      	ldr	r0, [pc, #120]	; (e338 <arm_mpu_init+0x98>)
    e2be:	f014 fd36 	bl	22d2e <printk>
    e2c2:	481a      	ldr	r0, [pc, #104]	; (e32c <arm_mpu_init+0x8c>)
    e2c4:	f240 1107 	movw	r1, #263	; 0x107
    e2c8:	f014 fd3e 	bl	22d48 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    e2cc:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    e2d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e2d2:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    e2d4:	f7ff ffdc 	bl	e290 <arm_core_mpu_disable>
	MPU->MAIR0 =
    e2d8:	4d18      	ldr	r5, [pc, #96]	; (e33c <arm_mpu_init+0x9c>)
    e2da:	4a19      	ldr	r2, [pc, #100]	; (e340 <arm_mpu_init+0xa0>)
    e2dc:	632a      	str	r2, [r5, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e2de:	42a6      	cmp	r6, r4
    e2e0:	d119      	bne.n	e316 <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
    e2e2:	4b18      	ldr	r3, [pc, #96]	; (e344 <arm_mpu_init+0xa4>)
    e2e4:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
    e2e6:	f7ff ffc9 	bl	e27c <arm_core_mpu_enable>
	__ASSERT(
    e2ea:	682b      	ldr	r3, [r5, #0]
    e2ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e2f0:	2b10      	cmp	r3, #16
    e2f2:	d00e      	beq.n	e312 <arm_mpu_init+0x72>
    e2f4:	4914      	ldr	r1, [pc, #80]	; (e348 <arm_mpu_init+0xa8>)
    e2f6:	f44f 7394 	mov.w	r3, #296	; 0x128
    e2fa:	4a0c      	ldr	r2, [pc, #48]	; (e32c <arm_mpu_init+0x8c>)
    e2fc:	480d      	ldr	r0, [pc, #52]	; (e334 <arm_mpu_init+0x94>)
    e2fe:	f014 fd16 	bl	22d2e <printk>
    e302:	4812      	ldr	r0, [pc, #72]	; (e34c <arm_mpu_init+0xac>)
    e304:	f014 fd13 	bl	22d2e <printk>
    e308:	f44f 7194 	mov.w	r1, #296	; 0x128
    e30c:	4807      	ldr	r0, [pc, #28]	; (e32c <arm_mpu_init+0x8c>)
    e30e:	f014 fd1b 	bl	22d48 <assert_post_action>
	return 0;
    e312:	2000      	movs	r0, #0
    e314:	e7dc      	b.n	e2d0 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e316:	6879      	ldr	r1, [r7, #4]
    e318:	4620      	mov	r0, r4
    e31a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    e31e:	f7ff fefb 	bl	e118 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e322:	3401      	adds	r4, #1
    e324:	e7db      	b.n	e2de <arm_mpu_init+0x3e>
    e326:	bf00      	nop
    e328:	00024284 	.word	0x00024284
    e32c:	00025a82 	.word	0x00025a82
    e330:	000261cb 	.word	0x000261cb
    e334:	000255f3 	.word	0x000255f3
    e338:	00025ab3 	.word	0x00025ab3
    e33c:	e000ed90 	.word	0xe000ed90
    e340:	0044ffaa 	.word	0x0044ffaa
    e344:	20025bda 	.word	0x20025bda
    e348:	00025ae7 	.word	0x00025ae7
    e34c:	00025b38 	.word	0x00025b38

0000e350 <arm_core_mpu_configure_static_mpu_regions>:
{
    e350:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e352:	4c0c      	ldr	r4, [pc, #48]	; (e384 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    e354:	460d      	mov	r5, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    e356:	7822      	ldrb	r2, [r4, #0]
    e358:	f7ff fef6 	bl	e148 <mpu_configure_regions.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e35c:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    e35e:	3016      	adds	r0, #22
    e360:	d10f      	bne.n	e382 <arm_core_mpu_configure_static_mpu_regions+0x32>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e362:	23cd      	movs	r3, #205	; 0xcd
    e364:	4a08      	ldr	r2, [pc, #32]	; (e388 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    e366:	4909      	ldr	r1, [pc, #36]	; (e38c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    e368:	4809      	ldr	r0, [pc, #36]	; (e390 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    e36a:	f014 fce0 	bl	22d2e <printk>
    e36e:	4629      	mov	r1, r5
    e370:	4808      	ldr	r0, [pc, #32]	; (e394 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    e372:	f014 fcdc 	bl	22d2e <printk>
}
    e376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e37a:	21cd      	movs	r1, #205	; 0xcd
    e37c:	4802      	ldr	r0, [pc, #8]	; (e388 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    e37e:	f014 bce3 	b.w	22d48 <assert_post_action>
}
    e382:	bd38      	pop	{r3, r4, r5, pc}
    e384:	20025bda 	.word	0x20025bda
    e388:	00025a82 	.word	0x00025a82
    e38c:	000261cb 	.word	0x000261cb
    e390:	000255f3 	.word	0x000255f3
    e394:	00025a27 	.word	0x00025a27

0000e398 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e39c:	4c2d      	ldr	r4, [pc, #180]	; (e454 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>)
    e39e:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e3a0:	4680      	mov	r8, r0
    e3a2:	2700      	movs	r7, #0
    e3a4:	46a2      	mov	sl, r4
	attr->rbar = MPU->RBAR &
    e3a6:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
    e3aa:	4d2b      	ldr	r5, [pc, #172]	; (e458 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e3ac:	454f      	cmp	r7, r9
    e3ae:	db02      	blt.n	e3b6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1e>
}
    e3b0:	b003      	add	sp, #12
    e3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    e3b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e3ba:	9301      	str	r3, [sp, #4]
    e3bc:	2b00      	cmp	r3, #0
    e3be:	d044      	beq.n	e44a <arm_core_mpu_mark_areas_for_dynamic_regions+0xb2>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e3c0:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e3c4:	4608      	mov	r0, r1
    e3c6:	9100      	str	r1, [sp, #0]
    e3c8:	f014 f9e4 	bl	22794 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e3cc:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e3d0:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e3d2:	1858      	adds	r0, r3, r1
    e3d4:	3801      	subs	r0, #1
    e3d6:	f014 f9dd 	bl	22794 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e3da:	4286      	cmp	r6, r0
    e3dc:	4a1f      	ldr	r2, [pc, #124]	; (e45c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
    e3de:	d016      	beq.n	e40e <arm_core_mpu_mark_areas_for_dynamic_regions+0x76>
		dyn_reg_info[i].index =
    e3e0:	2314      	movs	r3, #20
    e3e2:	435f      	muls	r7, r3
    e3e4:	f06f 0315 	mvn.w	r3, #21
    e3e8:	f84a 3007 	str.w	r3, [sl, r7]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e3ec:	23dd      	movs	r3, #221	; 0xdd
    e3ee:	4a1c      	ldr	r2, [pc, #112]	; (e460 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    e3f0:	491c      	ldr	r1, [pc, #112]	; (e464 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    e3f2:	481d      	ldr	r0, [pc, #116]	; (e468 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    e3f4:	f014 fc9b 	bl	22d2e <printk>
    e3f8:	4649      	mov	r1, r9
    e3fa:	481c      	ldr	r0, [pc, #112]	; (e46c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    e3fc:	f014 fc97 	bl	22d2e <printk>
    e400:	21dd      	movs	r1, #221	; 0xdd
    e402:	4817      	ldr	r0, [pc, #92]	; (e460 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
}
    e404:	b003      	add	sp, #12
    e406:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e40a:	f014 bc9d 	b.w	22d48 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e40e:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
    e412:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e414:	d0ea      	beq.n	e3ec <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e416:	7813      	ldrb	r3, [r2, #0]
    e418:	42b3      	cmp	r3, r6
    e41a:	dde7      	ble.n	e3ec <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    e41c:	fb0b a307 	mla	r3, fp, r7, sl
	MPU->RNR = index;
    e420:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
    e422:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    e424:	68e8      	ldr	r0, [r5, #12]
    e426:	7b19      	ldrb	r1, [r3, #12]
    e428:	f360 0104 	bfi	r1, r0, #0, #5
    e42c:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e42e:	6929      	ldr	r1, [r5, #16]
    e430:	7b18      	ldrb	r0, [r3, #12]
    e432:	0849      	lsrs	r1, r1, #1
    e434:	f361 1047 	bfi	r0, r1, #5, #3
    e438:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e43a:	68eb      	ldr	r3, [r5, #12]
    e43c:	f023 031f 	bic.w	r3, r3, #31
    e440:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e442:	692b      	ldr	r3, [r5, #16]
    e444:	f023 031f 	bic.w	r3, r3, #31
    e448:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e44a:	3701      	adds	r7, #1
    e44c:	3414      	adds	r4, #20
    e44e:	f108 080c 	add.w	r8, r8, #12
    e452:	e7ab      	b.n	e3ac <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    e454:	20020030 	.word	0x20020030
    e458:	e000ed90 	.word	0xe000ed90
    e45c:	20025bda 	.word	0x20025bda
    e460:	00025a82 	.word	0x00025a82
    e464:	000261cb 	.word	0x000261cb
    e468:	000255f3 	.word	0x000255f3
    e46c:	00025a53 	.word	0x00025a53

0000e470 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    e470:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    e472:	4b15      	ldr	r3, [pc, #84]	; (e4c8 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    e474:	460c      	mov	r4, r1
    e476:	781d      	ldrb	r5, [r3, #0]
    e478:	4606      	mov	r6, r0
    e47a:	462b      	mov	r3, r5
  mpu->RLAR = 0U;
    e47c:	2100      	movs	r1, #0
  mpu->RNR = rnr;
    e47e:	4a13      	ldr	r2, [pc, #76]	; (e4cc <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    e480:	2b0f      	cmp	r3, #15
    e482:	dd1b      	ble.n	e4bc <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>

	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
    e484:	4912      	ldr	r1, [pc, #72]	; (e4d0 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    e486:	f851 0b04 	ldr.w	r0, [r1], #4
    e48a:	f7ff fe45 	bl	e118 <region_init>
	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    e48e:	462a      	mov	r2, r5
    e490:	4621      	mov	r1, r4
    e492:	4630      	mov	r0, r6
    e494:	f7ff fe58 	bl	e148 <mpu_configure_regions.constprop.2>
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    e498:	3016      	adds	r0, #22
    e49a:	d113      	bne.n	e4c4 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    e49c:	23ec      	movs	r3, #236	; 0xec
    e49e:	4a0d      	ldr	r2, [pc, #52]	; (e4d4 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
    e4a0:	490d      	ldr	r1, [pc, #52]	; (e4d8 <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
    e4a2:	480e      	ldr	r0, [pc, #56]	; (e4dc <arm_core_mpu_configure_dynamic_mpu_regions+0x6c>)
    e4a4:	f014 fc43 	bl	22d2e <printk>
    e4a8:	4621      	mov	r1, r4
    e4aa:	480d      	ldr	r0, [pc, #52]	; (e4e0 <arm_core_mpu_configure_dynamic_mpu_regions+0x70>)
    e4ac:	f014 fc3f 	bl	22d2e <printk>
}
    e4b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    e4b4:	21ec      	movs	r1, #236	; 0xec
    e4b6:	4807      	ldr	r0, [pc, #28]	; (e4d4 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
    e4b8:	f014 bc46 	b.w	22d48 <assert_post_action>
    e4bc:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    e4be:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    e4c0:	3301      	adds	r3, #1
    e4c2:	e7dd      	b.n	e480 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
}
    e4c4:	bd70      	pop	{r4, r5, r6, pc}
    e4c6:	bf00      	nop
    e4c8:	20025bda 	.word	0x20025bda
    e4cc:	e000ed90 	.word	0xe000ed90
    e4d0:	20020030 	.word	0x20020030
    e4d4:	00025a82 	.word	0x00025a82
    e4d8:	000261cb 	.word	0x000261cb
    e4dc:	000255f3 	.word	0x000255f3
    e4e0:	000259fa 	.word	0x000259fa

0000e4e4 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    e4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4e8:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    e4ea:	2300      	movs	r3, #0
{
    e4ec:	b0a3      	sub	sp, #140	; 0x8c
    e4ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
	count = 0;
    e4f2:	9301      	str	r3, [sp, #4]

	while ((c = *format++)) {
    e4f4:	4613      	mov	r3, r2
    e4f6:	f813 0b01 	ldrb.w	r0, [r3], #1
    e4fa:	9308      	str	r3, [sp, #32]
    e4fc:	b158      	cbz	r0, e516 <z_prf+0x32>
		if (c != '%') {
    e4fe:	2825      	cmp	r0, #37	; 0x25
    e500:	f000 8085 	beq.w	e60e <z_prf+0x12a>
			PUTC(c);
    e504:	9903      	ldr	r1, [sp, #12]
    e506:	9b02      	ldr	r3, [sp, #8]
    e508:	4798      	blx	r3
    e50a:	3001      	adds	r0, #1
    e50c:	f040 8417 	bne.w	ed3e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2de>
    e510:	f04f 33ff 	mov.w	r3, #4294967295
    e514:	9301      	str	r3, [sp, #4]
		}
	}
	return count;

#undef PUTC
}
    e516:	9801      	ldr	r0, [sp, #4]
    e518:	b023      	add	sp, #140	; 0x8c
    e51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    e51e:	2c23      	cmp	r4, #35	; 0x23
    e520:	d06c      	beq.n	e5fc <z_prf+0x118>
    e522:	d861      	bhi.n	e5e8 <z_prf+0x104>
    e524:	2c00      	cmp	r4, #0
    e526:	d0f6      	beq.n	e516 <z_prf+0x32>
					fspace = true;
    e528:	2c20      	cmp	r4, #32
    e52a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e52c:	bf08      	it	eq
    e52e:	2301      	moveq	r3, #1
    e530:	930e      	str	r3, [sp, #56]	; 0x38
					fminus = true;
    e532:	f8cd 8020 	str.w	r8, [sp, #32]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    e536:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e53a:	48b7      	ldr	r0, [pc, #732]	; (e818 <z_prf+0x334>)
    e53c:	f818 4b01 	ldrb.w	r4, [r8], #1
    e540:	4621      	mov	r1, r4
    e542:	f014 fd65 	bl	23010 <strchr>
    e546:	2800      	cmp	r0, #0
    e548:	d1e9      	bne.n	e51e <z_prf+0x3a>
			if (c == '*') {
    e54a:	2c2a      	cmp	r4, #42	; 0x2a
    e54c:	d166      	bne.n	e61c <z_prf+0x138>
				width = va_arg(vargs, int);
    e54e:	f856 3b04 	ldr.w	r3, [r6], #4
				c = *format++;
    e552:	f898 4000 	ldrb.w	r4, [r8]
				if (width < 0) {
    e556:	2b00      	cmp	r3, #0
				width = va_arg(vargs, int);
    e558:	9309      	str	r3, [sp, #36]	; 0x24
					width = -width;
    e55a:	bfbf      	itttt	lt
    e55c:	425b      	neglt	r3, r3
    e55e:	9309      	strlt	r3, [sp, #36]	; 0x24
					fminus = true;
    e560:	2301      	movlt	r3, #1
    e562:	930f      	strlt	r3, [sp, #60]	; 0x3c
				c = *format++;
    e564:	9b08      	ldr	r3, [sp, #32]
    e566:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    e56a:	2c2e      	cmp	r4, #46	; 0x2e
    e56c:	d17b      	bne.n	e666 <z_prf+0x182>
				if (c == '*') {
    e56e:	f898 3000 	ldrb.w	r3, [r8]
    e572:	2b2a      	cmp	r3, #42	; 0x2a
    e574:	d174      	bne.n	e660 <z_prf+0x17c>
					precision = va_arg(vargs, int);
    e576:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
    e57a:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    e57e:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
    e582:	4621      	mov	r1, r4
    e584:	48a5      	ldr	r0, [pc, #660]	; (e81c <z_prf+0x338>)
    e586:	4627      	mov	r7, r4
    e588:	f014 fd42 	bl	23010 <strchr>
    e58c:	2800      	cmp	r0, #0
    e58e:	d06d      	beq.n	e66c <z_prf+0x188>
				c = *format++;
    e590:	4643      	mov	r3, r8
    e592:	f813 4b01 	ldrb.w	r4, [r3], #1
				} else if (i == 'h' && c == 'h') {
    e596:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    e598:	9308      	str	r3, [sp, #32]
				} else if (i == 'h' && c == 'h') {
    e59a:	d107      	bne.n	e5ac <z_prf+0xc8>
    e59c:	2c68      	cmp	r4, #104	; 0x68
    e59e:	d105      	bne.n	e5ac <z_prf+0xc8>
					i = 'H';
    e5a0:	2748      	movs	r7, #72	; 0x48
					c = *format++;
    e5a2:	f108 0302 	add.w	r3, r8, #2
    e5a6:	f898 4001 	ldrb.w	r4, [r8, #1]
    e5aa:	9308      	str	r3, [sp, #32]
			switch (c) {
    e5ac:	2c67      	cmp	r4, #103	; 0x67
    e5ae:	d87b      	bhi.n	e6a8 <z_prf+0x1c4>
    e5b0:	2c65      	cmp	r4, #101	; 0x65
    e5b2:	f080 8135 	bcs.w	e820 <z_prf+0x33c>
    e5b6:	2c47      	cmp	r4, #71	; 0x47
    e5b8:	d85c      	bhi.n	e674 <z_prf+0x190>
    e5ba:	2c45      	cmp	r4, #69	; 0x45
    e5bc:	f080 8130 	bcs.w	e820 <z_prf+0x33c>
    e5c0:	2c00      	cmp	r4, #0
    e5c2:	d0a8      	beq.n	e516 <z_prf+0x32>
    e5c4:	2c25      	cmp	r4, #37	; 0x25
    e5c6:	f000 83b6 	beq.w	ed36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2d6>
				PUTC('%');
    e5ca:	9903      	ldr	r1, [sp, #12]
    e5cc:	2025      	movs	r0, #37	; 0x25
    e5ce:	9b02      	ldr	r3, [sp, #8]
    e5d0:	4798      	blx	r3
    e5d2:	3001      	adds	r0, #1
    e5d4:	d09c      	beq.n	e510 <z_prf+0x2c>
				PUTC(c);
    e5d6:	9903      	ldr	r1, [sp, #12]
    e5d8:	4620      	mov	r0, r4
    e5da:	9b02      	ldr	r3, [sp, #8]
    e5dc:	4798      	blx	r3
    e5de:	3001      	adds	r0, #1
    e5e0:	d096      	beq.n	e510 <z_prf+0x2c>
				count += 2;
    e5e2:	9b01      	ldr	r3, [sp, #4]
    e5e4:	3302      	adds	r3, #2
    e5e6:	e3ac      	b.n	ed42 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2e2>
				switch (c) {
    e5e8:	2c2d      	cmp	r4, #45	; 0x2d
    e5ea:	d00a      	beq.n	e602 <z_prf+0x11e>
    e5ec:	2c30      	cmp	r4, #48	; 0x30
    e5ee:	d00b      	beq.n	e608 <z_prf+0x124>
					fplus = true;
    e5f0:	2c2b      	cmp	r4, #43	; 0x2b
    e5f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e5f4:	bf08      	it	eq
    e5f6:	2301      	moveq	r3, #1
    e5f8:	930b      	str	r3, [sp, #44]	; 0x2c
    e5fa:	e79a      	b.n	e532 <z_prf+0x4e>
					falt = true;
    e5fc:	f04f 0b01 	mov.w	fp, #1
    e600:	e797      	b.n	e532 <z_prf+0x4e>
					fminus = true;
    e602:	2301      	movs	r3, #1
    e604:	930f      	str	r3, [sp, #60]	; 0x3c
    e606:	e794      	b.n	e532 <z_prf+0x4e>
					fzero = true;
    e608:	2301      	movs	r3, #1
    e60a:	930a      	str	r3, [sp, #40]	; 0x28
    e60c:	e791      	b.n	e532 <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
    e60e:	2300      	movs	r3, #0
    e610:	930a      	str	r3, [sp, #40]	; 0x28
    e612:	930e      	str	r3, [sp, #56]	; 0x38
    e614:	930b      	str	r3, [sp, #44]	; 0x2c
    e616:	930f      	str	r3, [sp, #60]	; 0x3c
    e618:	469b      	mov	fp, r3
    e61a:	e78c      	b.n	e536 <z_prf+0x52>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    e61c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    e620:	2b09      	cmp	r3, #9
				width = 0;
    e622:	9009      	str	r0, [sp, #36]	; 0x24
			} else if (!isdigit(c)) {
    e624:	d8a1      	bhi.n	e56a <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    e626:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    e628:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e62c:	f818 4b01 	ldrb.w	r4, [r8], #1
    e630:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    e634:	2b09      	cmp	r3, #9
    e636:	d898      	bhi.n	e56a <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    e638:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e63a:	fb02 4403 	mla	r4, r2, r3, r4
    e63e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    e642:	e9cd 8308 	strd	r8, r3, [sp, #32]
    e646:	e7ef      	b.n	e628 <z_prf+0x144>
    e648:	4690      	mov	r8, r2
    e64a:	fb01 3505 	mla	r5, r1, r5, r3
    e64e:	3d30      	subs	r5, #48	; 0x30
	while (isdigit(*p)) {
    e650:	4642      	mov	r2, r8
    e652:	f812 3b01 	ldrb.w	r3, [r2], #1
    e656:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    e65a:	2809      	cmp	r0, #9
    e65c:	d9f4      	bls.n	e648 <z_prf+0x164>
    e65e:	e78e      	b.n	e57e <z_prf+0x9a>
	int i = 0;
    e660:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    e662:	210a      	movs	r1, #10
    e664:	e7f4      	b.n	e650 <z_prf+0x16c>
			precision = -1;
    e666:	f04f 35ff 	mov.w	r5, #4294967295
    e66a:	e78a      	b.n	e582 <z_prf+0x9e>
    e66c:	f8cd 8020 	str.w	r8, [sp, #32]
			i = 0;
    e670:	4607      	mov	r7, r0
    e672:	e79b      	b.n	e5ac <z_prf+0xc8>
			switch (c) {
    e674:	2c63      	cmp	r4, #99	; 0x63
    e676:	d059      	beq.n	e72c <z_prf+0x248>
    e678:	d820      	bhi.n	e6bc <z_prf+0x1d8>
    e67a:	2c58      	cmp	r4, #88	; 0x58
    e67c:	d1a5      	bne.n	e5ca <z_prf+0xe6>
				if (c == 'o') {
    e67e:	2c6f      	cmp	r4, #111	; 0x6f
    e680:	f106 0904 	add.w	r9, r6, #4
    e684:	6831      	ldr	r1, [r6, #0]
    e686:	f040 8328 	bne.w	ecda <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x27a>
	if (alt_form) {
    e68a:	f1bb 0f00 	cmp.w	fp, #0
    e68e:	f000 8317 	beq.w	ecc0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x260>
		*buf++ = '0';
    e692:	2330      	movs	r3, #48	; 0x30
    e694:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		if (!value) {
    e698:	2900      	cmp	r1, #0
    e69a:	f040 831b 	bne.w	ecd4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x274>
			*buf++ = 0;
    e69e:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
			prefix = 0;
    e6a2:	460f      	mov	r7, r1
			return 1;
    e6a4:	2601      	movs	r6, #1
    e6a6:	e025      	b.n	e6f4 <z_prf+0x210>
			switch (c) {
    e6a8:	2c70      	cmp	r4, #112	; 0x70
    e6aa:	f000 82f5 	beq.w	ec98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x238>
    e6ae:	d827      	bhi.n	e700 <z_prf+0x21c>
    e6b0:	2c6e      	cmp	r4, #110	; 0x6e
    e6b2:	f000 82de 	beq.w	ec72 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x212>
    e6b6:	d8e2      	bhi.n	e67e <z_prf+0x19a>
    e6b8:	2c69      	cmp	r4, #105	; 0x69
    e6ba:	d186      	bne.n	e5ca <z_prf+0xe6>
				switch (i) {
    e6bc:	6837      	ldr	r7, [r6, #0]
    e6be:	f106 0904 	add.w	r9, r6, #4
	if (value < 0) {
    e6c2:	2f00      	cmp	r7, #0
    e6c4:	f280 809a 	bge.w	e7fc <z_prf+0x318>
		*buf++ = '-';
    e6c8:	232d      	movs	r3, #45	; 0x2d
		value = -value;
    e6ca:	4279      	negs	r1, r7
		*buf++ = '-';
    e6cc:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		*buf++ = ' ';
    e6d0:	f10d 066d 	add.w	r6, sp, #109	; 0x6d
	return _to_x(buf, value, 10);
    e6d4:	4630      	mov	r0, r6
    e6d6:	220a      	movs	r2, #10
    e6d8:	f014 fd16 	bl	23108 <_to_x>
				if (fplus || fspace || val < 0) {
    e6dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	return (buf + _to_udec(buf, value)) - start;
    e6de:	4406      	add	r6, r0
    e6e0:	a81b      	add	r0, sp, #108	; 0x6c
    e6e2:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
    e6e4:	2b00      	cmp	r3, #0
    e6e6:	f040 832f 	bne.w	ed48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2e8>
    e6ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e6ec:	2b00      	cmp	r3, #0
    e6ee:	f040 832b 	bne.w	ed48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2e8>
    e6f2:	0fff      	lsrs	r7, r7, #31
			if (precision >= 0) {
    e6f4:	2d00      	cmp	r5, #0
    e6f6:	da21      	bge.n	e73c <z_prf+0x258>
			zero.predot = zero.postdot = zero.trail = 0;
    e6f8:	2500      	movs	r5, #0
    e6fa:	46ab      	mov	fp, r5
    e6fc:	46a8      	mov	r8, r5
    e6fe:	e0e1      	b.n	e8c4 <z_prf+0x3e0>
			switch (c) {
    e700:	2c75      	cmp	r4, #117	; 0x75
    e702:	d0bc      	beq.n	e67e <z_prf+0x19a>
    e704:	2c78      	cmp	r4, #120	; 0x78
    e706:	d0ba      	beq.n	e67e <z_prf+0x19a>
    e708:	2c73      	cmp	r4, #115	; 0x73
    e70a:	f47f af5e 	bne.w	e5ca <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
    e70e:	46b1      	mov	r9, r6
					precision = INT_MAX;
    e710:	2d00      	cmp	r5, #0
    e712:	bfb8      	it	lt
    e714:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    e718:	2600      	movs	r6, #0
				cptr = va_arg(vargs, char *);
    e71a:	f859 3b04 	ldr.w	r3, [r9], #4
				for (clen = 0; clen < precision; clen++) {
    e71e:	42b5      	cmp	r5, r6
    e720:	f040 82c9 	bne.w	ecb6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x256>
    e724:	462e      	mov	r6, r5
    e726:	2500      	movs	r5, #0
    e728:	462f      	mov	r7, r5
    e72a:	e008      	b.n	e73e <z_prf+0x25a>
				break;
    e72c:	2700      	movs	r7, #0
				buf[0] = va_arg(vargs, int);
    e72e:	46b1      	mov	r9, r6
				break;
    e730:	463d      	mov	r5, r7
				clen = 1;
    e732:	2601      	movs	r6, #1
				buf[0] = va_arg(vargs, int);
    e734:	f859 3b04 	ldr.w	r3, [r9], #4
    e738:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				break;
    e73c:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = precision - clen + prefix;
    e73e:	19ea      	adds	r2, r5, r7
			zero.predot = zero.postdot = zero.trail = 0;
    e740:	2500      	movs	r5, #0
    e742:	46ab      	mov	fp, r5
    e744:	46a8      	mov	r8, r5
				zero_head = precision - clen + prefix;
    e746:	1b92      	subs	r2, r2, r6
			if (zero_head < 0) {
    e748:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
    e74c:	1991      	adds	r1, r2, r6
    e74e:	9106      	str	r1, [sp, #24]
    e750:	9909      	ldr	r1, [sp, #36]	; 0x24
    e752:	1990      	adds	r0, r2, r6
    e754:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
    e756:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e758:	b911      	cbnz	r1, e760 <z_prf+0x27c>
    e75a:	2c00      	cmp	r4, #0
    e75c:	f300 8311 	bgt.w	ed82 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x322>
			while (prefix-- > 0) {
    e760:	eb03 0a07 	add.w	sl, r3, r7
    e764:	4553      	cmp	r3, sl
    e766:	f040 8311 	bne.w	ed8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x32c>
			while (zero_head-- > 0) {
    e76a:	f112 32ff 	adds.w	r2, r2, #4294967295
    e76e:	f080 831b 	bcs.w	eda8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x348>
			clen -= prefix;
    e772:	1bf6      	subs	r6, r6, r7
			if (zero.predot) {
    e774:	f1b8 0f00 	cmp.w	r8, #0
    e778:	d011      	beq.n	e79e <z_prf+0x2ba>
				c = *cptr;
    e77a:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c)) {
    e77e:	eb0a 0706 	add.w	r7, sl, r6
    e782:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    e786:	2b09      	cmp	r3, #9
    e788:	eba7 060a 	sub.w	r6, r7, sl
    e78c:	f240 8317 	bls.w	edbe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x35e>
    e790:	4647      	mov	r7, r8
				while (zero.predot-- > 0) {
    e792:	f117 37ff 	adds.w	r7, r7, #4294967295
    e796:	f080 831b 	bcs.w	edd0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x370>
				clen -= zero.predot;
    e79a:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.postdot) {
    e79e:	f1bb 0f00 	cmp.w	fp, #0
    e7a2:	d015      	beq.n	e7d0 <z_prf+0x2ec>
    e7a4:	eb0a 0706 	add.w	r7, sl, r6
					c = *cptr++;
    e7a8:	f81a 8b01 	ldrb.w	r8, [sl], #1
					PUTC(c);
    e7ac:	9903      	ldr	r1, [sp, #12]
    e7ae:	4640      	mov	r0, r8
    e7b0:	9b02      	ldr	r3, [sp, #8]
    e7b2:	4798      	blx	r3
    e7b4:	3001      	adds	r0, #1
    e7b6:	f43f aeab 	beq.w	e510 <z_prf+0x2c>
				} while (c != '.');
    e7ba:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
    e7be:	eba7 060a 	sub.w	r6, r7, sl
    e7c2:	d1f1      	bne.n	e7a8 <z_prf+0x2c4>
				while (zero.postdot-- > 0) {
    e7c4:	465f      	mov	r7, fp
    e7c6:	2f00      	cmp	r7, #0
    e7c8:	f300 830b 	bgt.w	ede2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x382>
				clen -= zero.postdot;
    e7cc:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.trail) {
    e7d0:	b195      	cbz	r5, e7f8 <z_prf+0x314>
				c = *cptr;
    e7d2:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c) || c == '.') {
    e7d6:	eb0a 0706 	add.w	r7, sl, r6
    e7da:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    e7de:	2b09      	cmp	r3, #9
    e7e0:	eba7 060a 	sub.w	r6, r7, sl
    e7e4:	f240 8308 	bls.w	edf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x398>
    e7e8:	282e      	cmp	r0, #46	; 0x2e
    e7ea:	f000 8305 	beq.w	edf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x398>
				while (zero.trail-- > 0) {
    e7ee:	462f      	mov	r7, r5
    e7f0:	2f00      	cmp	r7, #0
    e7f2:	f300 830a 	bgt.w	ee0a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3aa>
				clen -= zero.trail;
    e7f6:	1b76      	subs	r6, r6, r5
    e7f8:	4456      	add	r6, sl
    e7fa:	e319      	b.n	ee30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3d0>
	} else if (fplus) {
    e7fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e7fe:	b123      	cbz	r3, e80a <z_prf+0x326>
		*buf++ = '+';
    e800:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    e802:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    e806:	4639      	mov	r1, r7
    e808:	e762      	b.n	e6d0 <z_prf+0x1ec>
	} else if (fspace) {
    e80a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e80c:	b10b      	cbz	r3, e812 <z_prf+0x32e>
		*buf++ = ' ';
    e80e:	2320      	movs	r3, #32
    e810:	e7f7      	b.n	e802 <z_prf+0x31e>
	} else if (fspace) {
    e812:	4639      	mov	r1, r7
    e814:	ae1b      	add	r6, sp, #108	; 0x6c
    e816:	e75d      	b.n	e6d4 <z_prf+0x1f0>
    e818:	00025b59 	.word	0x00025b59
    e81c:	00025b5f 	.word	0x00025b5f
				u.d = va_arg(vargs, double);
    e820:	f106 0907 	add.w	r9, r6, #7
    e824:	f029 0907 	bic.w	r9, r9, #7
    e828:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    e82c:	02d8      	lsls	r0, r3, #11
    e82e:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    e832:	02d6      	lsls	r6, r2, #11
    e834:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	if (sign) {
    e838:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
    e83a:	f3c3 510a 	ubfx	r1, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    e83e:	9604      	str	r6, [sp, #16]
    e840:	9005      	str	r0, [sp, #20]
	if (sign) {
    e842:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    e846:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    e84a:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
	if (sign) {
    e84e:	da41      	bge.n	e8d4 <z_prf+0x3f0>
		*buf++ = '-';
    e850:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    e852:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    e856:	f10d 076d 	add.w	r7, sp, #109	; 0x6d
	if (exp == 0x7ff) {
    e85a:	f240 73ff 	movw	r3, #2047	; 0x7ff
    e85e:	4299      	cmp	r1, r3
    e860:	d153      	bne.n	e90a <z_prf+0x426>
		if (!fract) {
    e862:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e866:	430a      	orrs	r2, r1
    e868:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    e86c:	f107 0303 	add.w	r3, r7, #3
    e870:	d140      	bne.n	e8f4 <z_prf+0x410>
			if (isupper(c)) {
    e872:	2c19      	cmp	r4, #25
    e874:	d838      	bhi.n	e8e8 <z_prf+0x404>
				*buf++ = 'I';
    e876:	2249      	movs	r2, #73	; 0x49
    e878:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
    e87a:	224e      	movs	r2, #78	; 0x4e
    e87c:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
    e87e:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
    e880:	2500      	movs	r5, #0
			zero.predot = zero.postdot = zero.trail = 0;
    e882:	46ab      	mov	fp, r5
    e884:	46a8      	mov	r8, r5
		return buf - start;
    e886:	ae1b      	add	r6, sp, #108	; 0x6c
				*buf++ = 'n';
    e888:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
    e88a:	70fd      	strb	r5, [r7, #3]
		return buf - start;
    e88c:	1b9b      	subs	r3, r3, r6
				if (fplus || fspace || (buf[0] == '-')) {
    e88e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e890:	2a00      	cmp	r2, #0
    e892:	f040 81ec 	bne.w	ec6e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x20e>
    e896:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e898:	2a00      	cmp	r2, #0
    e89a:	f040 81e8 	bne.w	ec6e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x20e>
    e89e:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
    e8a2:	f1a7 022d 	sub.w	r2, r7, #45	; 0x2d
    e8a6:	4257      	negs	r7, r2
    e8a8:	4157      	adcs	r7, r2
				clen += zero.predot + zero.postdot + zero.trail;
    e8aa:	eb05 0608 	add.w	r6, r5, r8
    e8ae:	4433      	add	r3, r6
    e8b0:	eb03 060b 	add.w	r6, r3, fp
				if (!isdigit(buf[prefix])) {
    e8b4:	ab22      	add	r3, sp, #136	; 0x88
    e8b6:	443b      	add	r3, r7
    e8b8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    e8bc:	3b30      	subs	r3, #48	; 0x30
    e8be:	2b09      	cmp	r3, #9
    e8c0:	f200 8246 	bhi.w	ed50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2f0>
			} else if (fzero) {
    e8c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e8c6:	2b00      	cmp	r3, #0
    e8c8:	f000 8245 	beq.w	ed56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2f6>
    e8cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e8ce:	1b9a      	subs	r2, r3, r6
    e8d0:	ab1b      	add	r3, sp, #108	; 0x6c
    e8d2:	e739      	b.n	e748 <z_prf+0x264>
	} else if (fplus) {
    e8d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e8d6:	b10b      	cbz	r3, e8dc <z_prf+0x3f8>
		*buf++ = '+';
    e8d8:	232b      	movs	r3, #43	; 0x2b
    e8da:	e7ba      	b.n	e852 <z_prf+0x36e>
	} else if (fspace) {
    e8dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e8de:	b10b      	cbz	r3, e8e4 <z_prf+0x400>
		*buf++ = ' ';
    e8e0:	2320      	movs	r3, #32
    e8e2:	e7b6      	b.n	e852 <z_prf+0x36e>
	} else if (fspace) {
    e8e4:	af1b      	add	r7, sp, #108	; 0x6c
    e8e6:	e7b8      	b.n	e85a <z_prf+0x376>
				*buf++ = 'i';
    e8e8:	2269      	movs	r2, #105	; 0x69
    e8ea:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
    e8ec:	226e      	movs	r2, #110	; 0x6e
    e8ee:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
    e8f0:	2266      	movs	r2, #102	; 0x66
    e8f2:	e7c5      	b.n	e880 <z_prf+0x39c>
			if (isupper(c)) {
    e8f4:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    e8f6:	bf99      	ittee	ls
    e8f8:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    e8fa:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    e8fc:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    e8fe:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    e900:	bf94      	ite	ls
    e902:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
    e904:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
    e906:	7079      	strb	r1, [r7, #1]
    e908:	e7ba      	b.n	e880 <z_prf+0x39c>
	if ((exp | fract) != 0) {
    e90a:	9b04      	ldr	r3, [sp, #16]
    e90c:	9805      	ldr	r0, [sp, #20]
    e90e:	430b      	orrs	r3, r1
    e910:	9310      	str	r3, [sp, #64]	; 0x40
    e912:	17cb      	asrs	r3, r1, #31
    e914:	4303      	orrs	r3, r0
		c = 'f';
    e916:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
    e918:	9311      	str	r3, [sp, #68]	; 0x44
		c = 'f';
    e91a:	bf08      	it	eq
    e91c:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    e91e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    e922:	4313      	orrs	r3, r2
    e924:	f000 8111 	beq.w	eb4a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xea>
		if (exp == 0) {
    e928:	2900      	cmp	r1, #0
    e92a:	f000 809b 	beq.w	ea64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4>
		fract |= HIGHBIT64;
    e92e:	2600      	movs	r6, #0
    e930:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    e932:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    e936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e93a:	9317      	str	r3, [sp, #92]	; 0x5c
	while (exp <= -3) {
    e93c:	f118 0f02 	cmn.w	r8, #2
    e940:	f2c0 80a4 	blt.w	ea8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2c>
	while (exp > 0) {
    e944:	f1b8 0f00 	cmp.w	r8, #0
    e948:	f300 80dd 	bgt.w	eb06 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa6>
		_rlrshift(&fract);
    e94c:	a816      	add	r0, sp, #88	; 0x58
		exp++;
    e94e:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    e952:	f014 fbfb 	bl	2314c <_rlrshift>
	while (exp < (0 + 4)) {
    e956:	f1b8 0f04 	cmp.w	r8, #4
    e95a:	d1f7      	bne.n	e94c <z_prf+0x468>
		precision = 6;		/* Default precision if none given */
    e95c:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    e95e:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    e962:	bfb8      	it	lt
    e964:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    e966:	2b47      	cmp	r3, #71	; 0x47
    e968:	f040 80f8 	bne.w	eb5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfc>
		if (decexp < (-4 + 1) || decexp > precision) {
    e96c:	1cf1      	adds	r1, r6, #3
    e96e:	db02      	blt.n	e976 <z_prf+0x492>
    e970:	42b5      	cmp	r5, r6
    e972:	f280 80ed 	bge.w	eb50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf0>
			c += 'e' - 'g';
    e976:	3c02      	subs	r4, #2
    e978:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
    e97a:	2d00      	cmp	r5, #0
    e97c:	f000 80f4 	beq.w	eb68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x108>
				precision--;
    e980:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
    e982:	f1bb 0f00 	cmp.w	fp, #0
    e986:	f040 80ef 	bne.w	eb68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x108>
    e98a:	2d00      	cmp	r5, #0
    e98c:	bfd4      	ite	le
    e98e:	f04f 0a00 	movle.w	sl, #0
    e992:	f04f 0a01 	movgt.w	sl, #1
	if (c == 'f') {
    e996:	2c66      	cmp	r4, #102	; 0x66
    e998:	f040 80e8 	bne.w	eb6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c>
		if (exp < 0) {
    e99c:	eb15 0806 	adds.w	r8, r5, r6
    e9a0:	f140 80ec 	bpl.w	eb7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11c>
	digit_count = 16;
    e9a4:	2310      	movs	r3, #16
    e9a6:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    e9a8:	f04f 0800 	mov.w	r8, #0
	digit_count = 16;
    e9ac:	9315      	str	r3, [sp, #84]	; 0x54
	ltemp = 0x0800000000000000;
    e9ae:	2200      	movs	r2, #0
    e9b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    e9b4:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	while (exp--) {
    e9b8:	f118 38ff 	adds.w	r8, r8, #4294967295
    e9bc:	f080 80e0 	bcs.w	eb80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x120>
	fract += ltemp;
    e9c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e9c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    e9c4:	9919      	ldr	r1, [sp, #100]	; 0x64
    e9c6:	189b      	adds	r3, r3, r2
    e9c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    e9ca:	eb41 0202 	adc.w	r2, r1, r2
    e9ce:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
	if ((fract >> 32) & 0xF0000000) {
    e9d2:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    e9d6:	9312      	str	r3, [sp, #72]	; 0x48
    e9d8:	2300      	movs	r3, #0
    e9da:	9313      	str	r3, [sp, #76]	; 0x4c
    e9dc:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    e9e0:	4313      	orrs	r3, r2
    e9e2:	d006      	beq.n	e9f2 <z_prf+0x50e>
		_ldiv5(&fract);
    e9e4:	a816      	add	r0, sp, #88	; 0x58
    e9e6:	f014 fbc2 	bl	2316e <_ldiv5>
		_rlrshift(&fract);
    e9ea:	a816      	add	r0, sp, #88	; 0x58
    e9ec:	f014 fbae 	bl	2314c <_rlrshift>
		decexp++;
    e9f0:	3601      	adds	r6, #1
	if (c == 'f') {
    e9f2:	2c66      	cmp	r4, #102	; 0x66
    e9f4:	f040 80e1 	bne.w	ebba <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x15a>
		if (decexp > 0) {
    e9f8:	2e00      	cmp	r6, #0
    e9fa:	f340 80c8 	ble.w	eb8e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12e>
			while (decexp > 0 && digit_count > 0) {
    e9fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ea00:	2b00      	cmp	r3, #0
    ea02:	dd07      	ble.n	ea14 <z_prf+0x530>
				*buf++ = _get_digit(&fract, &digit_count);
    ea04:	a915      	add	r1, sp, #84	; 0x54
    ea06:	a816      	add	r0, sp, #88	; 0x58
    ea08:	f014 fbdc 	bl	231c4 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    ea0c:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    ea0e:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    ea12:	d1f4      	bne.n	e9fe <z_prf+0x51a>
			zp->predot = decexp;
    ea14:	46b0      	mov	r8, r6
    ea16:	463b      	mov	r3, r7
			decexp = 0;
    ea18:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    ea1a:	f1bb 0f00 	cmp.w	fp, #0
    ea1e:	d101      	bne.n	ea24 <z_prf+0x540>
    ea20:	2d00      	cmp	r5, #0
    ea22:	dd15      	ble.n	ea50 <z_prf+0x56c>
			*buf++ = '.';
    ea24:	222e      	movs	r2, #46	; 0x2e
    ea26:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
    ea2a:	2e00      	cmp	r6, #0
    ea2c:	f000 80c0 	beq.w	ebb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x150>
    ea30:	2d00      	cmp	r5, #0
    ea32:	f340 80bf 	ble.w	ebb4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x154>
			zp->postdot = -decexp;
    ea36:	f1c6 0b00 	rsb	fp, r6, #0
    ea3a:	45ab      	cmp	fp, r5
    ea3c:	bfa8      	it	ge
    ea3e:	46ab      	movge	fp, r5
			precision -= zp->postdot;
    ea40:	eba5 050b 	sub.w	r5, r5, fp
		while (precision > 0 && digit_count > 0) {
    ea44:	2d00      	cmp	r5, #0
    ea46:	dd03      	ble.n	ea50 <z_prf+0x56c>
    ea48:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ea4a:	2a00      	cmp	r2, #0
    ea4c:	f300 80a6 	bgt.w	eb9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13c>
	if (prune_zero) {
    ea50:	f1ba 0f00 	cmp.w	sl, #0
    ea54:	f040 80c6 	bne.w	ebe4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x184>
	*buf = 0;
    ea58:	2200      	movs	r2, #0
	return buf - start;
    ea5a:	ae1b      	add	r6, sp, #108	; 0x6c
	*buf = 0;
    ea5c:	701a      	strb	r2, [r3, #0]
	return buf - start;
    ea5e:	1b9b      	subs	r3, r3, r6
    ea60:	e715      	b.n	e88e <z_prf+0x3aa>
				exp--;
    ea62:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    ea64:	9b04      	ldr	r3, [sp, #16]
    ea66:	18db      	adds	r3, r3, r3
    ea68:	9304      	str	r3, [sp, #16]
    ea6a:	9b05      	ldr	r3, [sp, #20]
    ea6c:	415b      	adcs	r3, r3
    ea6e:	9305      	str	r3, [sp, #20]
    ea70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ea74:	2a00      	cmp	r2, #0
    ea76:	f173 0300 	sbcs.w	r3, r3, #0
    ea7a:	daf2      	bge.n	ea62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
    ea7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ea80:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    ea84:	e753      	b.n	e92e <z_prf+0x44a>
			_rlrshift(&fract);
    ea86:	a816      	add	r0, sp, #88	; 0x58
    ea88:	f014 fb60 	bl	2314c <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    ea8c:	e9dd ec16 	ldrd	lr, ip, [sp, #88]	; 0x58
    ea90:	2300      	movs	r3, #0
    ea92:	2100      	movs	r1, #0
    ea94:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    ea98:	930d      	str	r3, [sp, #52]	; 0x34
    ea9a:	48bb      	ldr	r0, [pc, #748]	; (ed88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x328>)
    ea9c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    eaa0:	4299      	cmp	r1, r3
    eaa2:	bf08      	it	eq
    eaa4:	4290      	cmpeq	r0, r2
    eaa6:	f108 0801 	add.w	r8, r8, #1
    eaaa:	d3ec      	bcc.n	ea86 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x26>
		fract *= 5U;
    eaac:	2005      	movs	r0, #5
    eaae:	fbae 2300 	umull	r2, r3, lr, r0
    eab2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    eab6:	9b07      	ldr	r3, [sp, #28]
		decexp--;
    eab8:	3e01      	subs	r6, #1
		fract *= 5U;
    eaba:	fb00 330c 	mla	r3, r0, ip, r3
		decexp--;
    eabe:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
    eac2:	9307      	str	r3, [sp, #28]
    eac4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    eac8:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    eacc:	2100      	movs	r1, #0
    eace:	2300      	movs	r3, #0
    ead0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ead4:	9807      	ldr	r0, [sp, #28]
    ead6:	428b      	cmp	r3, r1
    ead8:	bf08      	it	eq
    eada:	4282      	cmpeq	r2, r0
    eadc:	d208      	bcs.n	eaf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x90>
    eade:	f1bc 0f00 	cmp.w	ip, #0
    eae2:	f43f af2b 	beq.w	e93c <z_prf+0x458>
    eae6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    eaea:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    eaee:	e725      	b.n	e93c <z_prf+0x458>
			fract <<= 1;
    eaf0:	9b06      	ldr	r3, [sp, #24]
			exp--;
    eaf2:	f108 38ff 	add.w	r8, r8, #4294967295
			fract <<= 1;
    eaf6:	18db      	adds	r3, r3, r3
    eaf8:	9306      	str	r3, [sp, #24]
    eafa:	9b07      	ldr	r3, [sp, #28]
    eafc:	f04f 0c01 	mov.w	ip, #1
    eb00:	415b      	adcs	r3, r3
    eb02:	9307      	str	r3, [sp, #28]
			exp--;
    eb04:	e7e2      	b.n	eacc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>
		_ldiv5(&fract);
    eb06:	a816      	add	r0, sp, #88	; 0x58
    eb08:	f014 fb31 	bl	2316e <_ldiv5>
		exp--;
    eb0c:	e9dd ae16 	ldrd	sl, lr, [sp, #88]	; 0x58
		decexp++;
    eb10:	f04f 0c00 	mov.w	ip, #0
		exp--;
    eb14:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
    eb18:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    eb1a:	2300      	movs	r3, #0
    eb1c:	2100      	movs	r1, #0
    eb1e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    eb22:	4299      	cmp	r1, r3
    eb24:	bf08      	it	eq
    eb26:	4570      	cmpeq	r0, lr
    eb28:	d206      	bcs.n	eb38 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd8>
    eb2a:	f1bc 0f00 	cmp.w	ip, #0
    eb2e:	f43f af09 	beq.w	e944 <z_prf+0x460>
    eb32:	e9cd ae16 	strd	sl, lr, [sp, #88]	; 0x58
    eb36:	e705      	b.n	e944 <z_prf+0x460>
			fract <<= 1;
    eb38:	eb1a 0a0a 	adds.w	sl, sl, sl
    eb3c:	eb4e 0e0e 	adc.w	lr, lr, lr
			exp--;
    eb40:	f108 38ff 	add.w	r8, r8, #4294967295
    eb44:	f04f 0c01 	mov.w	ip, #1
    eb48:	e7e7      	b.n	eb1a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xba>
	if ((exp | fract) != 0) {
    eb4a:	2600      	movs	r6, #0
    eb4c:	46b0      	mov	r8, r6
    eb4e:	e6fd      	b.n	e94c <z_prf+0x468>
			precision -= decexp;
    eb50:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
    eb52:	f1bb 0f00 	cmp.w	fp, #0
    eb56:	d104      	bne.n	eb62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x102>
			c = 'f';
    eb58:	2466      	movs	r4, #102	; 0x66
    eb5a:	e716      	b.n	e98a <z_prf+0x4a6>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    eb5c:	f04f 0a00 	mov.w	sl, #0
    eb60:	e719      	b.n	e996 <z_prf+0x4b2>
    eb62:	f04f 0a00 	mov.w	sl, #0
    eb66:	e719      	b.n	e99c <z_prf+0x4b8>
    eb68:	f04f 0a00 	mov.w	sl, #0
		exp = precision + 1;
    eb6c:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
    eb70:	2310      	movs	r3, #16
    eb72:	4598      	cmp	r8, r3
    eb74:	9315      	str	r3, [sp, #84]	; 0x54
	if (exp > 16) {
    eb76:	bfa8      	it	ge
    eb78:	4698      	movge	r8, r3
    eb7a:	e718      	b.n	e9ae <z_prf+0x4ca>
		if (exp < 0) {
    eb7c:	2466      	movs	r4, #102	; 0x66
    eb7e:	e7f7      	b.n	eb70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x110>
		_ldiv5(&ltemp);
    eb80:	a818      	add	r0, sp, #96	; 0x60
    eb82:	f014 faf4 	bl	2316e <_ldiv5>
		_rlrshift(&ltemp);
    eb86:	a818      	add	r0, sp, #96	; 0x60
    eb88:	f014 fae0 	bl	2314c <_rlrshift>
    eb8c:	e714      	b.n	e9b8 <z_prf+0x4d4>
			*buf++ = '0';
    eb8e:	463b      	mov	r3, r7
    eb90:	2230      	movs	r2, #48	; 0x30
			zero.predot = zero.postdot = zero.trail = 0;
    eb92:	f04f 0800 	mov.w	r8, #0
			*buf++ = '0';
    eb96:	f803 2b01 	strb.w	r2, [r3], #1
    eb9a:	e73e      	b.n	ea1a <z_prf+0x536>
			*buf++ = _get_digit(&fract, &digit_count);
    eb9c:	a915      	add	r1, sp, #84	; 0x54
    eb9e:	a816      	add	r0, sp, #88	; 0x58
    eba0:	9306      	str	r3, [sp, #24]
    eba2:	f014 fb0f 	bl	231c4 <_get_digit>
    eba6:	9b06      	ldr	r3, [sp, #24]
			precision--;
    eba8:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    ebaa:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    ebae:	e749      	b.n	ea44 <z_prf+0x560>
			zero.predot = zero.postdot = zero.trail = 0;
    ebb0:	46b3      	mov	fp, r6
    ebb2:	e747      	b.n	ea44 <z_prf+0x560>
    ebb4:	f04f 0b00 	mov.w	fp, #0
    ebb8:	e74a      	b.n	ea50 <z_prf+0x56c>
		*buf = _get_digit(&fract, &digit_count);
    ebba:	a915      	add	r1, sp, #84	; 0x54
    ebbc:	a816      	add	r0, sp, #88	; 0x58
    ebbe:	f014 fb01 	bl	231c4 <_get_digit>
		if (*buf++ != '0') {
    ebc2:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    ebc4:	7038      	strb	r0, [r7, #0]
			decexp--;
    ebc6:	bf18      	it	ne
    ebc8:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (falt || (precision > 0)) {
    ebcc:	f1bb 0f00 	cmp.w	fp, #0
    ebd0:	d138      	bne.n	ec44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1e4>
    ebd2:	2d00      	cmp	r5, #0
    ebd4:	dc36      	bgt.n	ec44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1e4>
		if (*buf++ != '0') {
    ebd6:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
    ebd8:	f1ba 0f00 	cmp.w	sl, #0
    ebdc:	d044      	beq.n	ec68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x208>
			zero.predot = zero.postdot = zero.trail = 0;
    ebde:	f04f 0b00 	mov.w	fp, #0
    ebe2:	46d8      	mov	r8, fp
		while (*--buf == '0')
    ebe4:	461a      	mov	r2, r3
    ebe6:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    ebea:	2930      	cmp	r1, #48	; 0x30
    ebec:	d0fa      	beq.n	ebe4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x184>
		if (*buf != '.') {
    ebee:	292e      	cmp	r1, #46	; 0x2e
    ebf0:	bf18      	it	ne
    ebf2:	4613      	movne	r3, r2
    ebf4:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
    ebf6:	f004 02df 	and.w	r2, r4, #223	; 0xdf
    ebfa:	2a45      	cmp	r2, #69	; 0x45
    ebfc:	f47f af2c 	bne.w	ea58 <z_prf+0x574>
		if (decexp < 0) {
    ec00:	2e00      	cmp	r6, #0
			*buf++ = '-';
    ec02:	bfb4      	ite	lt
    ec04:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    ec06:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
    ec08:	4619      	mov	r1, r3
			decexp = -decexp;
    ec0a:	bfb8      	it	lt
    ec0c:	4276      	neglt	r6, r6
		if (decexp >= 100) {
    ec0e:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    ec10:	f801 4b02 	strb.w	r4, [r1], #2
			*buf++ = '-';
    ec14:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
    ec16:	dd08      	ble.n	ec2a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ca>
			*buf++ = (decexp / 100) + '0';
    ec18:	2064      	movs	r0, #100	; 0x64
    ec1a:	fb96 f2f0 	sdiv	r2, r6, r0
			decexp %= 100;
    ec1e:	fb00 6612 	mls	r6, r0, r2, r6
			*buf++ = (decexp / 100) + '0';
    ec22:	f102 0430 	add.w	r4, r2, #48	; 0x30
    ec26:	1cd9      	adds	r1, r3, #3
    ec28:	709c      	strb	r4, [r3, #2]
		*buf++ = (decexp / 10) + '0';
    ec2a:	200a      	movs	r0, #10
    ec2c:	fb96 f2f0 	sdiv	r2, r6, r0
    ec30:	460b      	mov	r3, r1
		decexp %= 10;
    ec32:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
    ec36:	f102 0430 	add.w	r4, r2, #48	; 0x30
		*buf++ = decexp + '0';
    ec3a:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    ec3c:	f803 4b02 	strb.w	r4, [r3], #2
		*buf++ = decexp + '0';
    ec40:	704e      	strb	r6, [r1, #1]
    ec42:	e709      	b.n	ea58 <z_prf+0x574>
			*buf++ = '.';
    ec44:	222e      	movs	r2, #46	; 0x2e
    ec46:	1cbb      	adds	r3, r7, #2
    ec48:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    ec4a:	2d00      	cmp	r5, #0
    ec4c:	ddc4      	ble.n	ebd8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x178>
    ec4e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ec50:	2a00      	cmp	r2, #0
    ec52:	ddc1      	ble.n	ebd8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x178>
			*buf++ = _get_digit(&fract, &digit_count);
    ec54:	a915      	add	r1, sp, #84	; 0x54
    ec56:	a816      	add	r0, sp, #88	; 0x58
    ec58:	9306      	str	r3, [sp, #24]
    ec5a:	f014 fab3 	bl	231c4 <_get_digit>
    ec5e:	9b06      	ldr	r3, [sp, #24]
			precision--;
    ec60:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    ec62:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    ec66:	e7f0      	b.n	ec4a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ea>
			zero.predot = zero.postdot = zero.trail = 0;
    ec68:	46d3      	mov	fp, sl
    ec6a:	46d0      	mov	r8, sl
    ec6c:	e7c3      	b.n	ebf6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x196>
					prefix = 1;
    ec6e:	2701      	movs	r7, #1
    ec70:	e61b      	b.n	e8aa <z_prf+0x3c6>
				switch (i) {
    ec72:	46b1      	mov	r9, r6
    ec74:	2f68      	cmp	r7, #104	; 0x68
    ec76:	f859 3b04 	ldr.w	r3, [r9], #4
    ec7a:	d005      	beq.n	ec88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x228>
    ec7c:	dc01      	bgt.n	ec82 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x222>
    ec7e:	2f48      	cmp	r7, #72	; 0x48
    ec80:	d007      	beq.n	ec92 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x232>
					*va_arg(vargs, int *) = count;
    ec82:	9a01      	ldr	r2, [sp, #4]
    ec84:	601a      	str	r2, [r3, #0]
					break;
    ec86:	e001      	b.n	ec8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x22c>
					*va_arg(vargs, short *) = count;
    ec88:	9a01      	ldr	r2, [sp, #4]
    ec8a:	801a      	strh	r2, [r3, #0]
				continue;
    ec8c:	464e      	mov	r6, r9
    ec8e:	9a08      	ldr	r2, [sp, #32]
    ec90:	e430      	b.n	e4f4 <z_prf+0x10>
					*va_arg(vargs, char *) = count;
    ec92:	9a01      	ldr	r2, [sp, #4]
    ec94:	701a      	strb	r2, [r3, #0]
					break;
    ec96:	e7f9      	b.n	ec8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x22c>
				val = (uintptr_t) va_arg(vargs, void *);
    ec98:	46b1      	mov	r9, r6
		*buf++ = '0';
    ec9a:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
    ec9e:	2210      	movs	r2, #16
    eca0:	f859 1b04 	ldr.w	r1, [r9], #4
    eca4:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
		*buf++ = '0';
    eca8:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
    ecac:	f014 fa2c 	bl	23108 <_to_x>
				prefix = 2;
    ecb0:	2702      	movs	r7, #2
	return len + (buf - buf0);
    ecb2:	1c86      	adds	r6, r0, #2
				break;
    ecb4:	e51e      	b.n	e6f4 <z_prf+0x210>
					if (cptr[clen] == '\0') {
    ecb6:	5d9a      	ldrb	r2, [r3, r6]
    ecb8:	2a00      	cmp	r2, #0
    ecba:	d047      	beq.n	ed4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2ec>
				for (clen = 0; clen < precision; clen++) {
    ecbc:	3601      	adds	r6, #1
    ecbe:	e52e      	b.n	e71e <z_prf+0x23a>
	if (alt_form) {
    ecc0:	ac1b      	add	r4, sp, #108	; 0x6c
	return (buf - buf0) + _to_x(buf, value, 8);
    ecc2:	2208      	movs	r2, #8
    ecc4:	4620      	mov	r0, r4
    ecc6:	f014 fa1f 	bl	23108 <_to_x>
    ecca:	ae1b      	add	r6, sp, #108	; 0x6c
    eccc:	1ba6      	subs	r6, r4, r6
    ecce:	4406      	add	r6, r0
			prefix = 0;
    ecd0:	2700      	movs	r7, #0
    ecd2:	e50f      	b.n	e6f4 <z_prf+0x210>
		*buf++ = '0';
    ecd4:	f10d 046d 	add.w	r4, sp, #109	; 0x6d
    ecd8:	e7f3      	b.n	ecc2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x262>
				} else if (c == 'u') {
    ecda:	2c75      	cmp	r4, #117	; 0x75
    ecdc:	d105      	bne.n	ecea <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x28a>
	return _to_x(buf, value, 10);
    ecde:	220a      	movs	r2, #10
    ece0:	a81b      	add	r0, sp, #108	; 0x6c
    ece2:	f014 fa11 	bl	23108 <_to_x>
    ece6:	4606      	mov	r6, r0
    ece8:	e7f2      	b.n	ecd0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x270>
	if (alt_form) {
    ecea:	f1bb 0f00 	cmp.w	fp, #0
    ecee:	d012      	beq.n	ed16 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2b6>
		*buf++ = '0';
    ecf0:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
    ecf4:	f10d 086e 	add.w	r8, sp, #110	; 0x6e
		*buf++ = '0';
    ecf8:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
    ecfc:	2210      	movs	r2, #16
    ecfe:	4640      	mov	r0, r8
    ed00:	f014 fa02 	bl	23108 <_to_x>
	if (prefix == 'X') {
    ed04:	2c58      	cmp	r4, #88	; 0x58
    ed06:	d009      	beq.n	ed1c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2bc>
	return len + (buf - buf0);
    ed08:	ae1b      	add	r6, sp, #108	; 0x6c
    ed0a:	eba8 0606 	sub.w	r6, r8, r6
    ed0e:	4406      	add	r6, r0
						prefix = 2;
    ed10:	ea4f 074b 	mov.w	r7, fp, lsl #1
    ed14:	e4ee      	b.n	e6f4 <z_prf+0x210>
	if (alt_form) {
    ed16:	f10d 086c 	add.w	r8, sp, #108	; 0x6c
    ed1a:	e7ef      	b.n	ecfc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x29c>
	if (prefix == 'X') {
    ed1c:	aa1b      	add	r2, sp, #108	; 0x6c
		if (*buf >= 'a' && *buf <= 'z') {
    ed1e:	7813      	ldrb	r3, [r2, #0]
    ed20:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    ed24:	2919      	cmp	r1, #25
			*buf += 'A' - 'a';
    ed26:	bf9c      	itt	ls
    ed28:	3b20      	subls	r3, #32
    ed2a:	7013      	strbls	r3, [r2, #0]
	} while (*buf++);
    ed2c:	f812 3b01 	ldrb.w	r3, [r2], #1
    ed30:	2b00      	cmp	r3, #0
    ed32:	d1f4      	bne.n	ed1e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2be>
    ed34:	e7e8      	b.n	ed08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2a8>
				PUTC('%');
    ed36:	9903      	ldr	r1, [sp, #12]
    ed38:	4620      	mov	r0, r4
    ed3a:	f7ff bbe4 	b.w	e506 <z_prf+0x22>
				count++;
    ed3e:	9b01      	ldr	r3, [sp, #4]
    ed40:	3301      	adds	r3, #1
				count += 2;
    ed42:	9301      	str	r3, [sp, #4]
				continue;
    ed44:	46b1      	mov	r9, r6
    ed46:	e7a1      	b.n	ec8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x22c>
					prefix = 1;
    ed48:	2701      	movs	r7, #1
    ed4a:	e4d3      	b.n	e6f4 <z_prf+0x210>
    ed4c:	4615      	mov	r5, r2
    ed4e:	e4eb      	b.n	e728 <z_prf+0x244>
			cptr = buf;
    ed50:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = 0;
    ed52:	2200      	movs	r2, #0
    ed54:	e4fa      	b.n	e74c <z_prf+0x268>
    ed56:	ab1b      	add	r3, sp, #108	; 0x6c
    ed58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ed5a:	e4f7      	b.n	e74c <z_prf+0x268>
    ed5c:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
					PUTC(' ');
    ed60:	9903      	ldr	r1, [sp, #12]
    ed62:	9b02      	ldr	r3, [sp, #8]
    ed64:	2020      	movs	r0, #32
    ed66:	4798      	blx	r3
    ed68:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
    ed6c:	3001      	adds	r0, #1
    ed6e:	f43f abcf 	beq.w	e510 <z_prf+0x2c>
				while (width-- > 0) {
    ed72:	f11a 3aff 	adds.w	sl, sl, #4294967295
    ed76:	d2f1      	bcs.n	ed5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2fc>
				count += width;
    ed78:	9901      	ldr	r1, [sp, #4]
    ed7a:	4421      	add	r1, r4
    ed7c:	9101      	str	r1, [sp, #4]
				while (width-- > 0) {
    ed7e:	4654      	mov	r4, sl
    ed80:	e4ee      	b.n	e760 <z_prf+0x27c>
    ed82:	46a2      	mov	sl, r4
    ed84:	e7f5      	b.n	ed72 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x312>
    ed86:	bf00      	nop
    ed88:	33333332 	.word	0x33333332
				PUTC(*cptr++);
    ed8c:	f813 0b01 	ldrb.w	r0, [r3], #1
    ed90:	9903      	ldr	r1, [sp, #12]
    ed92:	9309      	str	r3, [sp, #36]	; 0x24
    ed94:	9b02      	ldr	r3, [sp, #8]
    ed96:	920a      	str	r2, [sp, #40]	; 0x28
    ed98:	4798      	blx	r3
    ed9a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
    ed9e:	3001      	adds	r0, #1
    eda0:	f47f ace0 	bne.w	e764 <z_prf+0x280>
    eda4:	f7ff bbb4 	b.w	e510 <z_prf+0x2c>
				PUTC('0');
    eda8:	9903      	ldr	r1, [sp, #12]
    edaa:	2030      	movs	r0, #48	; 0x30
    edac:	9b02      	ldr	r3, [sp, #8]
    edae:	9209      	str	r2, [sp, #36]	; 0x24
    edb0:	4798      	blx	r3
    edb2:	3001      	adds	r0, #1
    edb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    edb6:	f47f acd8 	bne.w	e76a <z_prf+0x286>
    edba:	f7ff bba9 	b.w	e510 <z_prf+0x2c>
					PUTC(c);
    edbe:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    edc2:	4798      	blx	r3
    edc4:	3001      	adds	r0, #1
    edc6:	f43f aba3 	beq.w	e510 <z_prf+0x2c>
					c = *++cptr;
    edca:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
    edce:	e4d8      	b.n	e782 <z_prf+0x29e>
					PUTC('0');
    edd0:	9903      	ldr	r1, [sp, #12]
    edd2:	2030      	movs	r0, #48	; 0x30
    edd4:	9b02      	ldr	r3, [sp, #8]
    edd6:	4798      	blx	r3
    edd8:	3001      	adds	r0, #1
    edda:	f47f acda 	bne.w	e792 <z_prf+0x2ae>
    edde:	f7ff bb97 	b.w	e510 <z_prf+0x2c>
					PUTC('0');
    ede2:	9903      	ldr	r1, [sp, #12]
    ede4:	2030      	movs	r0, #48	; 0x30
    ede6:	9b02      	ldr	r3, [sp, #8]
    ede8:	4798      	blx	r3
    edea:	3001      	adds	r0, #1
    edec:	f107 37ff 	add.w	r7, r7, #4294967295
    edf0:	f47f ace9 	bne.w	e7c6 <z_prf+0x2e2>
    edf4:	f7ff bb8c 	b.w	e510 <z_prf+0x2c>
					PUTC(c);
    edf8:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    edfc:	4798      	blx	r3
    edfe:	3001      	adds	r0, #1
    ee00:	f43f ab86 	beq.w	e510 <z_prf+0x2c>
					c = *++cptr;
    ee04:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
    ee08:	e4e7      	b.n	e7da <z_prf+0x2f6>
					PUTC('0');
    ee0a:	9903      	ldr	r1, [sp, #12]
    ee0c:	2030      	movs	r0, #48	; 0x30
    ee0e:	9b02      	ldr	r3, [sp, #8]
    ee10:	4798      	blx	r3
    ee12:	3001      	adds	r0, #1
    ee14:	f107 37ff 	add.w	r7, r7, #4294967295
    ee18:	f47f acea 	bne.w	e7f0 <z_prf+0x30c>
    ee1c:	f7ff bb78 	b.w	e510 <z_prf+0x2c>
				PUTC(*cptr++);
    ee20:	9903      	ldr	r1, [sp, #12]
    ee22:	f81a 0b01 	ldrb.w	r0, [sl], #1
    ee26:	9b02      	ldr	r3, [sp, #8]
    ee28:	4798      	blx	r3
    ee2a:	3001      	adds	r0, #1
    ee2c:	f43f ab70 	beq.w	e510 <z_prf+0x2c>
    ee30:	eba6 030a 	sub.w	r3, r6, sl
			while (clen-- > 0) {
    ee34:	2b00      	cmp	r3, #0
    ee36:	dcf3      	bgt.n	ee20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3c0>
			count += clen;
    ee38:	9b01      	ldr	r3, [sp, #4]
    ee3a:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
    ee3c:	2c00      	cmp	r4, #0
			count += clen;
    ee3e:	4413      	add	r3, r2
    ee40:	9301      	str	r3, [sp, #4]
			if (width > 0) {
    ee42:	f77f af23 	ble.w	ec8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x22c>
    ee46:	4625      	mov	r5, r4
    ee48:	e006      	b.n	ee58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3f8>
					PUTC(' ');
    ee4a:	9903      	ldr	r1, [sp, #12]
    ee4c:	2020      	movs	r0, #32
    ee4e:	9b02      	ldr	r3, [sp, #8]
    ee50:	4798      	blx	r3
    ee52:	3001      	adds	r0, #1
    ee54:	f43f ab5c 	beq.w	e510 <z_prf+0x2c>
				while (width-- > 0) {
    ee58:	f115 35ff 	adds.w	r5, r5, #4294967295
    ee5c:	d2f5      	bcs.n	ee4a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3ea>
				count += width;
    ee5e:	9b01      	ldr	r3, [sp, #4]
    ee60:	4423      	add	r3, r4
    ee62:	9301      	str	r3, [sp, #4]
    ee64:	e712      	b.n	ec8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x22c>
    ee66:	bf00      	nop

0000ee68 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    ee68:	4b01      	ldr	r3, [pc, #4]	; (ee70 <__stdout_hook_install+0x8>)
    ee6a:	6018      	str	r0, [r3, #0]
}
    ee6c:	4770      	bx	lr
    ee6e:	bf00      	nop
    ee70:	2002a1d0 	.word	0x2002a1d0

0000ee74 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    ee74:	b40c      	push	{r2, r3}
    ee76:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    ee78:	b909      	cbnz	r1, ee7e <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    ee7a:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
    ee7e:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    ee82:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    ee84:	9a06      	ldr	r2, [sp, #24]
    ee86:	a902      	add	r1, sp, #8
    ee88:	4805      	ldr	r0, [pc, #20]	; (eea0 <snprintf+0x2c>)
	va_start(vargs, format);
    ee8a:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    ee8c:	f7ff fb2a 	bl	e4e4 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    ee90:	2200      	movs	r2, #0
    ee92:	9b02      	ldr	r3, [sp, #8]
    ee94:	701a      	strb	r2, [r3, #0]
	return r;
}
    ee96:	b005      	add	sp, #20
    ee98:	f85d eb04 	ldr.w	lr, [sp], #4
    ee9c:	b002      	add	sp, #8
    ee9e:	4770      	bx	lr
    eea0:	000231f9 	.word	0x000231f9

0000eea4 <sprintf>:

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
    eea4:	b40e      	push	{r1, r2, r3}
    eea6:	b50f      	push	{r0, r1, r2, r3, lr}

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    eea8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
    eeac:	ab05      	add	r3, sp, #20
    eeae:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
    eeb2:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    eeb4:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    eeb6:	4806      	ldr	r0, [pc, #24]	; (eed0 <sprintf+0x2c>)
    eeb8:	a902      	add	r1, sp, #8
	va_start(vargs, format);
    eeba:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    eebc:	f7ff fb12 	bl	e4e4 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    eec0:	2200      	movs	r2, #0
    eec2:	9b02      	ldr	r3, [sp, #8]
    eec4:	701a      	strb	r2, [r3, #0]
	return r;
}
    eec6:	b004      	add	sp, #16
    eec8:	f85d eb04 	ldr.w	lr, [sp], #4
    eecc:	b003      	add	sp, #12
    eece:	4770      	bx	lr
    eed0:	000231f9 	.word	0x000231f9

0000eed4 <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
    eed4:	b538      	push	{r3, r4, r5, lr}
    eed6:	460d      	mov	r5, r1
	NET_ASSERT(iface);
    eed8:	4604      	mov	r4, r0
    eeda:	b958      	cbnz	r0, eef4 <net_if_flag_is_set+0x20>
    eedc:	4909      	ldr	r1, [pc, #36]	; (ef04 <net_if_flag_is_set+0x30>)
    eede:	480a      	ldr	r0, [pc, #40]	; (ef08 <net_if_flag_is_set+0x34>)
    eee0:	f240 2311 	movw	r3, #529	; 0x211
    eee4:	4a09      	ldr	r2, [pc, #36]	; (ef0c <net_if_flag_is_set+0x38>)
    eee6:	f013 ff22 	bl	22d2e <printk>
    eeea:	f240 2111 	movw	r1, #529	; 0x211
    eeee:	4807      	ldr	r0, [pc, #28]	; (ef0c <net_if_flag_is_set+0x38>)
    eef0:	f013 ff2a 	bl	22d48 <assert_post_action>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    eef4:	6823      	ldr	r3, [r4, #0]
    eef6:	330c      	adds	r3, #12
    eef8:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    eefc:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
    eefe:	f000 0001 	and.w	r0, r0, #1
    ef02:	bd38      	pop	{r3, r4, r5, pc}
    ef04:	00025b84 	.word	0x00025b84
    ef08:	000255f3 	.word	0x000255f3
    ef0c:	00025b63 	.word	0x00025b63

0000ef10 <net_if_flag_set.constprop.25>:
static inline void net_if_flag_set(struct net_if *iface,
    ef10:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
    ef12:	4604      	mov	r4, r0
    ef14:	b958      	cbnz	r0, ef2e <net_if_flag_set.constprop.25+0x1e>
    ef16:	490b      	ldr	r1, [pc, #44]	; (ef44 <net_if_flag_set.constprop.25+0x34>)
    ef18:	480b      	ldr	r0, [pc, #44]	; (ef48 <net_if_flag_set.constprop.25+0x38>)
    ef1a:	f240 13e3 	movw	r3, #483	; 0x1e3
    ef1e:	4a0b      	ldr	r2, [pc, #44]	; (ef4c <net_if_flag_set.constprop.25+0x3c>)
    ef20:	f013 ff05 	bl	22d2e <printk>
    ef24:	f240 11e3 	movw	r1, #483	; 0x1e3
    ef28:	4808      	ldr	r0, [pc, #32]	; (ef4c <net_if_flag_set.constprop.25+0x3c>)
    ef2a:	f013 ff0d 	bl	22d48 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ef2e:	6823      	ldr	r3, [r4, #0]
    ef30:	330c      	adds	r3, #12
    ef32:	e8d3 2fef 	ldaex	r2, [r3]
    ef36:	f042 0201 	orr.w	r2, r2, #1
    ef3a:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ef3e:	2900      	cmp	r1, #0
    ef40:	d1f7      	bne.n	ef32 <net_if_flag_set.constprop.25+0x22>
}
    ef42:	bd10      	pop	{r4, pc}
    ef44:	00025b84 	.word	0x00025b84
    ef48:	000255f3 	.word	0x000255f3
    ef4c:	00025b63 	.word	0x00025b63

0000ef50 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
    ef50:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
    ef52:	2100      	movs	r1, #0
{
    ef54:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
    ef56:	f7ff ffbd 	bl	eed4 <net_if_flag_is_set>
    ef5a:	b928      	cbnz	r0, ef68 <net_if_up+0x18>
	}

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
    ef5c:	682b      	ldr	r3, [r5, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
    ef5e:	7e9a      	ldrb	r2, [r3, #26]
    ef60:	b122      	cbz	r2, ef6c <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
    ef62:	4628      	mov	r0, r5
    ef64:	f7ff ffd4 	bl	ef10 <net_if_flag_set.constprop.25>
		return 0;
    ef68:	2000      	movs	r0, #0
    ef6a:	e01f      	b.n	efac <net_if_up+0x5c>
 *
 * @return a pointer to the iface L2
 */
static inline const struct net_l2 * const net_if_l2(struct net_if *iface)
{
	return iface->if_dev->l2;
    ef6c:	685b      	ldr	r3, [r3, #4]
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
    ef6e:	b9ab      	cbnz	r3, ef9c <net_if_up+0x4c>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
    ef70:	682b      	ldr	r3, [r5, #0]
    ef72:	691b      	ldr	r3, [r3, #16]
    ef74:	b95b      	cbnz	r3, ef8e <net_if_up+0x3e>
    ef76:	490e      	ldr	r1, [pc, #56]	; (efb0 <net_if_up+0x60>)
    ef78:	480e      	ldr	r0, [pc, #56]	; (efb4 <net_if_up+0x64>)
    ef7a:	f640 5389 	movw	r3, #3465	; 0xd89
    ef7e:	4a0e      	ldr	r2, [pc, #56]	; (efb8 <net_if_up+0x68>)
    ef80:	f013 fed5 	bl	22d2e <printk>
    ef84:	f640 5189 	movw	r1, #3465	; 0xd89
    ef88:	480b      	ldr	r0, [pc, #44]	; (efb8 <net_if_up+0x68>)
    ef8a:	f013 fedd 	bl	22d48 <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
    ef8e:	4628      	mov	r0, r5
    ef90:	f7ff ffbe 	bl	ef10 <net_if_flag_set.constprop.25>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
    ef94:	4628      	mov	r0, r5
    ef96:	f014 f943 	bl	23220 <l2_flags_get>
    ef9a:	e7e5      	b.n	ef68 <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
    ef9c:	689b      	ldr	r3, [r3, #8]
    ef9e:	2b00      	cmp	r3, #0
    efa0:	d0e6      	beq.n	ef70 <net_if_up+0x20>
	status = net_if_l2(iface)->enable(iface, true);
    efa2:	2101      	movs	r1, #1
    efa4:	4628      	mov	r0, r5
    efa6:	4798      	blx	r3
	if (status < 0) {
    efa8:	2800      	cmp	r0, #0
    efaa:	dae1      	bge.n	ef70 <net_if_up+0x20>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
    efac:	bd38      	pop	{r3, r4, r5, pc}
    efae:	bf00      	nop
    efb0:	00025b8a 	.word	0x00025b8a
    efb4:	000255f3 	.word	0x000255f3
    efb8:	00025bbb 	.word	0x00025bbb

0000efbc <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
    efbc:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
    efbe:	4c07      	ldr	r4, [pc, #28]	; (efdc <net_if_init+0x20>)
    efc0:	4d07      	ldr	r5, [pc, #28]	; (efe0 <net_if_init+0x24>)
    efc2:	42ac      	cmp	r4, r5
    efc4:	d100      	bne.n	efc8 <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
    efc6:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
    efc8:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
    efca:	681b      	ldr	r3, [r3, #0]
    efcc:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
    efce:	b11b      	cbz	r3, efd8 <net_if_init+0x1c>
    efd0:	681b      	ldr	r3, [r3, #0]
    efd2:	b10b      	cbz	r3, efd8 <net_if_init+0x1c>
	api->init(iface);
    efd4:	4620      	mov	r0, r4
    efd6:	4798      	blx	r3
	     iface++, if_count++) {
    efd8:	3420      	adds	r4, #32
    efda:	e7f2      	b.n	efc2 <net_if_init+0x6>
    efdc:	2002a3c0 	.word	0x2002a3c0
    efe0:	2002a3e0 	.word	0x2002a3e0

0000efe4 <net_if_post_init>:

void net_if_post_init(void)
{
    efe4:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    efe6:	4c07      	ldr	r4, [pc, #28]	; (f004 <net_if_post_init+0x20>)
    efe8:	4d07      	ldr	r5, [pc, #28]	; (f008 <net_if_post_init+0x24>)
    efea:	42ac      	cmp	r4, r5
    efec:	d100      	bne.n	eff0 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
    efee:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
    eff0:	2103      	movs	r1, #3
    eff2:	4620      	mov	r0, r4
    eff4:	f7ff ff6e 	bl	eed4 <net_if_flag_is_set>
    eff8:	b910      	cbnz	r0, f000 <net_if_post_init+0x1c>
			net_if_up(iface);
    effa:	4620      	mov	r0, r4
    effc:	f7ff ffa8 	bl	ef50 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    f000:	3420      	adds	r4, #32
    f002:	e7f2      	b.n	efea <net_if_post_init+0x6>
    f004:	2002a3c0 	.word	0x2002a3c0
    f008:	2002a3e0 	.word	0x2002a3e0

0000f00c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    f00c:	b570      	push	{r4, r5, r6, lr}
    f00e:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    f010:	6884      	ldr	r4, [r0, #8]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    f012:	460d      	mov	r5, r1
    f014:	b961      	cbnz	r1, f030 <gpio_nrfx_manage_callback+0x24>
    f016:	4922      	ldr	r1, [pc, #136]	; (f0a0 <gpio_nrfx_manage_callback+0x94>)
    f018:	231c      	movs	r3, #28
    f01a:	4a22      	ldr	r2, [pc, #136]	; (f0a4 <gpio_nrfx_manage_callback+0x98>)
    f01c:	4822      	ldr	r0, [pc, #136]	; (f0a8 <gpio_nrfx_manage_callback+0x9c>)
    f01e:	f013 fe86 	bl	22d2e <printk>
    f022:	4822      	ldr	r0, [pc, #136]	; (f0ac <gpio_nrfx_manage_callback+0xa0>)
    f024:	f013 fe83 	bl	22d2e <printk>
    f028:	211c      	movs	r1, #28
    f02a:	481e      	ldr	r0, [pc, #120]	; (f0a4 <gpio_nrfx_manage_callback+0x98>)
    f02c:	f013 fe8c 	bl	22d48 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    f030:	686b      	ldr	r3, [r5, #4]
    f032:	b963      	cbnz	r3, f04e <gpio_nrfx_manage_callback+0x42>
    f034:	491e      	ldr	r1, [pc, #120]	; (f0b0 <gpio_nrfx_manage_callback+0xa4>)
    f036:	231d      	movs	r3, #29
    f038:	4a1a      	ldr	r2, [pc, #104]	; (f0a4 <gpio_nrfx_manage_callback+0x98>)
    f03a:	481b      	ldr	r0, [pc, #108]	; (f0a8 <gpio_nrfx_manage_callback+0x9c>)
    f03c:	f013 fe77 	bl	22d2e <printk>
    f040:	481c      	ldr	r0, [pc, #112]	; (f0b4 <gpio_nrfx_manage_callback+0xa8>)
    f042:	f013 fe74 	bl	22d2e <printk>
    f046:	211d      	movs	r1, #29
    f048:	4816      	ldr	r0, [pc, #88]	; (f0a4 <gpio_nrfx_manage_callback+0x98>)
    f04a:	f013 fe7d 	bl	22d48 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    f04e:	6823      	ldr	r3, [r4, #0]

	if (!sys_slist_is_empty(callbacks)) {
    f050:	b15b      	cbz	r3, f06a <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f052:	2200      	movs	r2, #0
    f054:	429d      	cmp	r5, r3
    f056:	d113      	bne.n	f080 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    f058:	682b      	ldr	r3, [r5, #0]
    f05a:	b95a      	cbnz	r2, f074 <gpio_nrfx_manage_callback+0x68>
    f05c:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    f05e:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    f060:	4295      	cmp	r5, r2
    f062:	d100      	bne.n	f066 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    f064:	6063      	str	r3, [r4, #4]
	parent->next = child;
    f066:	2300      	movs	r3, #0
    f068:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    f06a:	b976      	cbnz	r6, f08a <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    f06c:	2000      	movs	r0, #0
				     callback, set);
}
    f06e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f070:	460b      	mov	r3, r1
    f072:	e7ef      	b.n	f054 <gpio_nrfx_manage_callback+0x48>
	parent->next = child;
    f074:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    f076:	6863      	ldr	r3, [r4, #4]
    f078:	429d      	cmp	r5, r3
	list->tail = node;
    f07a:	bf08      	it	eq
    f07c:	6062      	streq	r2, [r4, #4]
    f07e:	e7f2      	b.n	f066 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    f080:	6819      	ldr	r1, [r3, #0]
	return node->next;
    f082:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f084:	2900      	cmp	r1, #0
    f086:	d1f3      	bne.n	f070 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    f088:	b13e      	cbz	r6, f09a <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    f08a:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    f08c:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
    f08e:	6860      	ldr	r0, [r4, #4]
	list->head = node;
    f090:	6025      	str	r5, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    f092:	2800      	cmp	r0, #0
    f094:	d1ea      	bne.n	f06c <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    f096:	6065      	str	r5, [r4, #4]
    f098:	e7e9      	b.n	f06e <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    f09a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    f09e:	e7e6      	b.n	f06e <gpio_nrfx_manage_callback+0x62>
    f0a0:	00025c04 	.word	0x00025c04
    f0a4:	00025bde 	.word	0x00025bde
    f0a8:	000255f3 	.word	0x000255f3
    f0ac:	00025c0d 	.word	0x00025c0d
    f0b0:	00025c1c 	.word	0x00025c1c
    f0b4:	00025c2e 	.word	0x00025c2e

0000f0b8 <nrf_gpio_pin_port_decode.isra.8.part.9>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
    f0b8:	b510      	push	{r4, lr}
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    f0ba:	4c07      	ldr	r4, [pc, #28]	; (f0d8 <nrf_gpio_pin_port_decode.isra.8.part.9+0x20>)
    f0bc:	4907      	ldr	r1, [pc, #28]	; (f0dc <nrf_gpio_pin_port_decode.isra.8.part.9+0x24>)
    f0be:	4622      	mov	r2, r4
    f0c0:	4807      	ldr	r0, [pc, #28]	; (f0e0 <nrf_gpio_pin_port_decode.isra.8.part.9+0x28>)
    f0c2:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
    f0c6:	f013 fe32 	bl	22d2e <printk>
    f0ca:	4620      	mov	r0, r4
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
    f0cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    f0d0:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
    f0d4:	f013 be38 	b.w	22d48 <assert_post_action>
    f0d8:	00025c76 	.word	0x00025c76
    f0dc:	00025cb5 	.word	0x00025cb5
    f0e0:	000255f3 	.word	0x000255f3

0000f0e4 <nrf_gpio_cfg_sense_set>:
    f0e4:	281f      	cmp	r0, #31
        sense_config);
}


__STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t pin_number, nrf_gpio_pin_sense_t sense_config)
{
    f0e6:	b538      	push	{r3, r4, r5, lr}
    f0e8:	4604      	mov	r4, r0
    f0ea:	460d      	mov	r5, r1
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    f0ec:	d901      	bls.n	f0f2 <nrf_gpio_cfg_sense_set+0xe>
    f0ee:	f7ff ffe3 	bl	f0b8 <nrf_gpio_pin_port_decode.isra.8.part.9>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    f0f2:	4808      	ldr	r0, [pc, #32]	; (f114 <nrf_gpio_cfg_sense_set+0x30>)
    f0f4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    f0f8:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    f0fc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    f100:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    f104:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    f108:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    f10c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    f110:	bd38      	pop	{r3, r4, r5, pc}
    f112:	bf00      	nop
    f114:	40842500 	.word	0x40842500

0000f118 <gpiote_pin_int_cfg>:
{
    f118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->config->config_info;
    f11c:	6803      	ldr	r3, [r0, #0]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f11e:	f001 041f 	and.w	r4, r1, #31
    f122:	689b      	ldr	r3, [r3, #8]
{
    f124:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f126:	791b      	ldrb	r3, [r3, #4]
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
    f128:	4e4b      	ldr	r6, [pc, #300]	; (f258 <gpiote_pin_int_cfg+0x140>)
    f12a:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f12e:	2300      	movs	r3, #0
    f130:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
    f134:	6887      	ldr	r7, [r0, #8]
    f136:	b2d2      	uxtb	r2, r2
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f138:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    f13c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
    f140:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
    f144:	428c      	cmp	r4, r1
    f146:	d16c      	bne.n	f222 <gpiote_pin_int_cfg+0x10a>
		    && (intenset & BIT(i))) {
    f148:	fa22 f103 	lsr.w	r1, r2, r3
    f14c:	07c9      	lsls	r1, r1, #31
    f14e:	d568      	bpl.n	f222 <gpiote_pin_int_cfg+0x10a>
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    f150:	009a      	lsls	r2, r3, #2
    f152:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    f156:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    f15a:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    f15e:	f021 0101 	bic.w	r1, r1, #1
    f162:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
    f166:	2201      	movs	r2, #1
    f168:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENCLR = mask;
    f16c:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    f170:	4620      	mov	r0, r4
    f172:	2100      	movs	r1, #0
    f174:	f7ff ffb6 	bl	f0e4 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    f178:	68b8      	ldr	r0, [r7, #8]
    f17a:	40e8      	lsrs	r0, r5
    f17c:	f010 0001 	ands.w	r0, r0, #1
    f180:	d04d      	beq.n	f21e <gpiote_pin_int_cfg+0x106>
    f182:	68f8      	ldr	r0, [r7, #12]
    f184:	40e8      	lsrs	r0, r5
    f186:	f010 0001 	ands.w	r0, r0, #1
    f18a:	d048      	beq.n	f21e <gpiote_pin_int_cfg+0x106>
		if (data->trig_edge & BIT(pin)) {
    f18c:	6978      	ldr	r0, [r7, #20]
    f18e:	40e8      	lsrs	r0, r5
    f190:	f010 0801 	ands.w	r8, r0, #1
    f194:	d051      	beq.n	f23a <gpiote_pin_int_cfg+0x122>
			if (data->double_edge & BIT(pin)) {
    f196:	69bb      	ldr	r3, [r7, #24]
    f198:	40eb      	lsrs	r3, r5
    f19a:	07db      	lsls	r3, r3, #31
    f19c:	d445      	bmi.n	f22a <gpiote_pin_int_cfg+0x112>
			} else if (((data->active_level & BIT(pin)) != 0U)
    f19e:	693b      	ldr	r3, [r7, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    f1a0:	69fa      	ldr	r2, [r7, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
    f1a2:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    f1a4:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
    f1a8:	f003 0301 	and.w	r3, r3, #1
    f1ac:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    f1b0:	42ab      	cmp	r3, r5
    f1b2:	bf14      	ite	ne
    f1b4:	2501      	movne	r5, #1
    f1b6:	2502      	moveq	r5, #2
    f1b8:	2100      	movs	r1, #0
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    f1ba:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    f1be:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
    f1c2:	f010 0003 	ands.w	r0, r0, #3
    f1c6:	d132      	bne.n	f22e <gpiote_pin_int_cfg+0x116>
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f1c8:	008b      	lsls	r3, r1, #2
    f1ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f1ce:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    f1d2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f1d6:	0224      	lsls	r4, r4, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f1d8:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
    f1dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    f1e0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f1e4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    f1e8:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    f1ec:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    f1f0:	4315      	orrs	r5, r2
			nrf_gpiote_events_t evt =
    f1f2:	f101 0240 	add.w	r2, r1, #64	; 0x40
    f1f6:	0092      	lsls	r2, r2, #2
    return ((uint32_t)NRF_GPIOTE + event);
    f1f8:	b292      	uxth	r2, r2
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    f1fa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    f1fe:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f202:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    f206:	6010      	str	r0, [r2, #0]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    f208:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    f20c:	f042 0201 	orr.w	r2, r2, #1
    f210:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
    f214:	2301      	movs	r3, #1
    f216:	fa03 f101 	lsl.w	r1, r3, r1
    NRF_GPIOTE->INTENSET = mask;
    f21a:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
    f21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f222:	3301      	adds	r3, #1
    f224:	2b08      	cmp	r3, #8
    f226:	d187      	bne.n	f138 <gpiote_pin_int_cfg+0x20>
    f228:	e7a2      	b.n	f170 <gpiote_pin_int_cfg+0x58>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    f22a:	2503      	movs	r5, #3
    f22c:	e7c4      	b.n	f1b8 <gpiote_pin_int_cfg+0xa0>
    f22e:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    f230:	2908      	cmp	r1, #8
    f232:	d1c2      	bne.n	f1ba <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
    f234:	f06f 0012 	mvn.w	r0, #18
    f238:	e7f1      	b.n	f21e <gpiote_pin_int_cfg+0x106>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f23a:	693b      	ldr	r3, [r7, #16]
    f23c:	69fa      	ldr	r2, [r7, #28]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    f23e:	4620      	mov	r0, r4
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f240:	4053      	eors	r3, r2
    f242:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    f246:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    f24a:	bf0c      	ite	eq
    f24c:	2103      	moveq	r1, #3
    f24e:	2102      	movne	r1, #2
    f250:	f7ff ff48 	bl	f0e4 <nrf_gpio_cfg_sense_set>
	int res = 0;
    f254:	4640      	mov	r0, r8
    f256:	e7e2      	b.n	f21e <gpiote_pin_int_cfg+0x106>
    f258:	40031000 	.word	0x40031000

0000f25c <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    f25c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    f25e:	4b09      	ldr	r3, [pc, #36]	; (f284 <gpio_nrfx_init+0x28>)
    f260:	781a      	ldrb	r2, [r3, #0]
    f262:	b96a      	cbnz	r2, f280 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    f264:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    f266:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
    f268:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    f26a:	2105      	movs	r1, #5
    f26c:	f7fe fd1e 	bl	dcac <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    f270:	2031      	movs	r0, #49	; 0x31
    f272:	f7fe fd0b 	bl	dc8c <z_arch_irq_enable>
    f276:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    f27a:	4b03      	ldr	r3, [pc, #12]	; (f288 <gpio_nrfx_init+0x2c>)
    f27c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    f280:	2000      	movs	r0, #0
    f282:	bd08      	pop	{r3, pc}
    f284:	20025bdb 	.word	0x20025bdb
    f288:	40031000 	.word	0x40031000

0000f28c <gpio_nrfx_config>:
{
    f28c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f290:	4607      	mov	r7, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    f292:	6884      	ldr	r4, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f294:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    f298:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    f29c:	461d      	mov	r5, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f29e:	d041      	beq.n	f324 <gpio_nrfx_config+0x98>
    f2a0:	dc09      	bgt.n	f2b6 <gpio_nrfx_config+0x2a>
    f2a2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    f2a6:	d03f      	beq.n	f328 <gpio_nrfx_config+0x9c>
    f2a8:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    f2ac:	d03e      	beq.n	f32c <gpio_nrfx_config+0xa0>
    f2ae:	b190      	cbz	r0, f2d6 <gpio_nrfx_config+0x4a>
		return -EINVAL;
    f2b0:	f06f 0015 	mvn.w	r0, #21
    f2b4:	e033      	b.n	f31e <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f2b6:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    f2ba:	d039      	beq.n	f330 <gpio_nrfx_config+0xa4>
    f2bc:	dc04      	bgt.n	f2c8 <gpio_nrfx_config+0x3c>
    f2be:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    f2c2:	d1f5      	bne.n	f2b0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    f2c4:	2003      	movs	r0, #3
    f2c6:	e006      	b.n	f2d6 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f2c8:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    f2cc:	d032      	beq.n	f334 <gpio_nrfx_config+0xa8>
    f2ce:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    f2d2:	d1ed      	bne.n	f2b0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
    f2d4:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    f2d6:	f405 7640 	and.w	r6, r5, #768	; 0x300
    f2da:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    f2de:	d02b      	beq.n	f338 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_NOPULL;
    f2e0:	f5a6 7600 	sub.w	r6, r6, #512	; 0x200
    f2e4:	4273      	negs	r3, r6
    f2e6:	4173      	adcs	r3, r6
	if (access_op == GPIO_ACCESS_BY_PORT) {
    f2e8:	2901      	cmp	r1, #1
		from_pin = pin;
    f2ea:	bf19      	ittee	ne
    f2ec:	fa5f f982 	uxtbne.w	r9, r2
		to_pin   = pin;
    f2f0:	46c8      	movne	r8, r9
		to_pin   = 31U;
    f2f2:	f04f 081f 	moveq.w	r8, #31
		from_pin = 0U;
    f2f6:	f04f 0900 	moveq.w	r9, #0
    f2fa:	f04f 0a01 	mov.w	sl, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    f2fe:	f005 0c01 	and.w	ip, r5, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    f302:	ea4f 064c 	mov.w	r6, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    f306:	ea46 060c 	orr.w	r6, r6, ip
    f30a:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
    f30e:	ea40 0683 	orr.w	r6, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    f312:	f005 0302 	and.w	r3, r5, #2
    f316:	9301      	str	r3, [sp, #4]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    f318:	45c8      	cmp	r8, r9
    f31a:	d20f      	bcs.n	f33c <gpio_nrfx_config+0xb0>
	return 0;
    f31c:	2000      	movs	r0, #0
}
    f31e:	b003      	add	sp, #12
    f320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
    f324:	2002      	movs	r0, #2
    f326:	e7d6      	b.n	f2d6 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
    f328:	2001      	movs	r0, #1
    f32a:	e7d4      	b.n	f2d6 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
    f32c:	2004      	movs	r0, #4
    f32e:	e7d2      	b.n	f2d6 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
    f330:	2005      	movs	r0, #5
    f332:	e7d0      	b.n	f2d6 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
    f334:	2006      	movs	r0, #6
    f336:	e7ce      	b.n	f2d6 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
    f338:	2303      	movs	r3, #3
    f33a:	e7d5      	b.n	f2e8 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
    f33c:	683b      	ldr	r3, [r7, #0]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    f33e:	689b      	ldr	r3, [r3, #8]
    f340:	7919      	ldrb	r1, [r3, #4]
    f342:	f009 031f 	and.w	r3, r9, #31
    f346:	ea43 1b41 	orr.w	fp, r3, r1, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    f34a:	f1bb 0f1f 	cmp.w	fp, #31
    f34e:	dd01      	ble.n	f354 <gpio_nrfx_config+0xc8>
    f350:	f7ff feb2 	bl	f0b8 <nrf_gpio_pin_port_decode.isra.8.part.9>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f354:	4a19      	ldr	r2, [pc, #100]	; (f3bc <gpio_nrfx_config+0x130>)
    f356:	f10b 0380 	add.w	r3, fp, #128	; 0x80
    f35a:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    f35e:	9a01      	ldr	r2, [sp, #4]
    f360:	fa0a f309 	lsl.w	r3, sl, r9
    f364:	68a1      	ldr	r1, [r4, #8]
    f366:	b32a      	cbz	r2, f3b4 <gpio_nrfx_config+0x128>
    f368:	4319      	orrs	r1, r3
    f36a:	60a1      	str	r1, [r4, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    f36c:	6961      	ldr	r1, [r4, #20]
    f36e:	06a8      	lsls	r0, r5, #26
    f370:	bf4c      	ite	mi
    f372:	4319      	orrmi	r1, r3
    f374:	4399      	bicpl	r1, r3
    f376:	6161      	str	r1, [r4, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    f378:	69a1      	ldr	r1, [r4, #24]
    f37a:	066a      	lsls	r2, r5, #25
    f37c:	bf4c      	ite	mi
    f37e:	4319      	orrmi	r1, r3
    f380:	4399      	bicpl	r1, r3
    f382:	61a1      	str	r1, [r4, #24]
		WRITE_BIT(data->active_level, curr_pin,
    f384:	6921      	ldr	r1, [r4, #16]
    f386:	0768      	lsls	r0, r5, #29
    f388:	bf4c      	ite	mi
    f38a:	4319      	orrmi	r1, r3
    f38c:	4399      	bicpl	r1, r3
    f38e:	6121      	str	r1, [r4, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    f390:	69e1      	ldr	r1, [r4, #28]
    f392:	062a      	lsls	r2, r5, #24
    f394:	bf4c      	ite	mi
    f396:	430b      	orrmi	r3, r1
    f398:	ea21 0303 	bicpl.w	r3, r1, r3
    f39c:	61e3      	str	r3, [r4, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    f39e:	4649      	mov	r1, r9
    f3a0:	4638      	mov	r0, r7
    f3a2:	f7ff feb9 	bl	f118 <gpiote_pin_int_cfg>
		if (res != 0) {
    f3a6:	2800      	cmp	r0, #0
    f3a8:	d1b9      	bne.n	f31e <gpio_nrfx_config+0x92>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    f3aa:	f109 0201 	add.w	r2, r9, #1
    f3ae:	fa5f f982 	uxtb.w	r9, r2
    f3b2:	e7b1      	b.n	f318 <gpio_nrfx_config+0x8c>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    f3b4:	ea21 0103 	bic.w	r1, r1, r3
    f3b8:	e7d7      	b.n	f36a <gpio_nrfx_config+0xde>
    f3ba:	bf00      	nop
    f3bc:	40842500 	.word	0x40842500

0000f3c0 <gpiote_event_handler>:
{
    f3c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    f3c4:	4b56      	ldr	r3, [pc, #344]	; (f520 <gpiote_event_handler+0x160>)
    f3c6:	681e      	ldr	r6, [r3, #0]
	if (port_event) {
    f3c8:	4698      	mov	r8, r3
    f3ca:	2e01      	cmp	r6, #1
    f3cc:	d15d      	bne.n	f48a <gpiote_event_handler+0xca>
	u32_t bit = 1U << pin;
    f3ce:	4637      	mov	r7, r6
	u32_t pin = 0U;
    f3d0:	f04f 0a00 	mov.w	sl, #0
	struct gpio_nrfx_data *data = get_port_data(port);
    f3d4:	4a53      	ldr	r2, [pc, #332]	; (f524 <gpiote_event_handler+0x164>)
    f3d6:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
    f3d8:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    f3da:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
    f3dc:	f8d2 9008 	ldr.w	r9, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
    f3e0:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
    f3e4:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
    f3e6:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    f3ea:	430a      	orrs	r2, r1
    f3ec:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    f3f0:	f8d9 2000 	ldr.w	r2, [r9]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    f3f4:	691b      	ldr	r3, [r3, #16]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    f3f6:	6912      	ldr	r2, [r2, #16]
    f3f8:	405c      	eors	r4, r3
    f3fa:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
    f3fc:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
    f400:	bb95      	cbnz	r5, f468 <gpiote_event_handler+0xa8>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    f402:	f8c8 5000 	str.w	r5, [r8]
	u32_t fired_triggers[GPIO_COUNT] = {0};
    f406:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
    f408:	2701      	movs	r7, #1
    f40a:	469c      	mov	ip, r3
    return (NRF_GPIOTE->INTENSET & mask);
    f40c:	4846      	ldr	r0, [pc, #280]	; (f528 <gpiote_event_handler+0x168>)
    f40e:	4d47      	ldr	r5, [pc, #284]	; (f52c <gpiote_event_handler+0x16c>)
    f410:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    f414:	fa07 f103 	lsl.w	r1, r7, r3
    f418:	4211      	tst	r1, r2
    f41a:	d00d      	beq.n	f438 <gpiote_event_handler+0x78>
    f41c:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
    f420:	2a01      	cmp	r2, #1
    f422:	d109      	bne.n	f438 <gpiote_event_handler+0x78>
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f424:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    f428:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    f42c:	f845 c023 	str.w	ip, [r5, r3, lsl #2]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f430:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    f434:	408a      	lsls	r2, r1
    f436:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f438:	3301      	adds	r3, #1
    f43a:	2b08      	cmp	r3, #8
    f43c:	d1e8      	bne.n	f410 <gpiote_event_handler+0x50>
	if (fired_triggers[0]) {
    f43e:	bb34      	cbnz	r4, f48e <gpiote_event_handler+0xce>
	if (port_event) {
    f440:	2e01      	cmp	r6, #1
    f442:	d10f      	bne.n	f464 <gpiote_event_handler+0xa4>
	u32_t pin = 0U;
    f444:	f04f 0800 	mov.w	r8, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
    f448:	4b36      	ldr	r3, [pc, #216]	; (f524 <gpiote_event_handler+0x164>)
    f44a:	689d      	ldr	r5, [r3, #8]
	return port->config->config_info;
    f44c:	681b      	ldr	r3, [r3, #0]
    f44e:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    f450:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
    f454:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
    f456:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
    f45a:	4313      	orrs	r3, r2
    f45c:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
    f460:	2c00      	cmp	r4, #0
    f462:	d142      	bne.n	f4ea <gpiote_event_handler+0x12a>
}
    f464:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (level_pins & bit) {
    f468:	423d      	tst	r5, r7
    f46a:	d00a      	beq.n	f482 <gpiote_event_handler+0xc2>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f46c:	f899 3004 	ldrb.w	r3, [r9, #4]
    f470:	f00a 001f 	and.w	r0, sl, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    f474:	2100      	movs	r1, #0
    f476:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    f47a:	f7ff fe33 	bl	f0e4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    f47e:	ea25 0507 	bic.w	r5, r5, r7
		++pin;
    f482:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
    f486:	007f      	lsls	r7, r7, #1
    f488:	e7ba      	b.n	f400 <gpiote_event_handler+0x40>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    f48a:	2400      	movs	r4, #0
    f48c:	e7bb      	b.n	f406 <gpiote_event_handler+0x46>
	struct gpio_nrfx_data *data = get_port_data(port);
    f48e:	4b25      	ldr	r3, [pc, #148]	; (f524 <gpiote_event_handler+0x164>)
    f490:	f8d3 9008 	ldr.w	r9, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    f494:	f8d9 5000 	ldr.w	r5, [r9]
    f498:	2d00      	cmp	r5, #0
    f49a:	d0d1      	beq.n	f440 <gpiote_event_handler+0x80>
			cb->handler(port, cb, pins);
    f49c:	4698      	mov	r8, r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    f49e:	682f      	ldr	r7, [r5, #0]
			__ASSERT(cb->handler, "No callback handler!");
    f4a0:	f8df a094 	ldr.w	sl, [pc, #148]	; f538 <gpiote_event_handler+0x178>
    f4a4:	f8df b094 	ldr.w	fp, [pc, #148]	; f53c <gpiote_event_handler+0x17c>
		if ((cb->pin_mask & pins) & data->int_en) {
    f4a8:	f8d9 300c 	ldr.w	r3, [r9, #12]
    f4ac:	68aa      	ldr	r2, [r5, #8]
    f4ae:	4023      	ands	r3, r4
    f4b0:	4213      	tst	r3, r2
    f4b2:	d015      	beq.n	f4e0 <gpiote_event_handler+0x120>
			__ASSERT(cb->handler, "No callback handler!");
    f4b4:	686b      	ldr	r3, [r5, #4]
    f4b6:	b973      	cbnz	r3, f4d6 <gpiote_event_handler+0x116>
    f4b8:	4659      	mov	r1, fp
    f4ba:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
    f4be:	4652      	mov	r2, sl
    f4c0:	481b      	ldr	r0, [pc, #108]	; (f530 <gpiote_event_handler+0x170>)
    f4c2:	f013 fc34 	bl	22d2e <printk>
    f4c6:	481b      	ldr	r0, [pc, #108]	; (f534 <gpiote_event_handler+0x174>)
    f4c8:	f013 fc31 	bl	22d2e <printk>
    f4cc:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
    f4d0:	4650      	mov	r0, sl
    f4d2:	f013 fc39 	bl	22d48 <assert_post_action>
			cb->handler(port, cb, pins);
    f4d6:	686b      	ldr	r3, [r5, #4]
    f4d8:	4622      	mov	r2, r4
    f4da:	4629      	mov	r1, r5
    f4dc:	4640      	mov	r0, r8
    f4de:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    f4e0:	2f00      	cmp	r7, #0
    f4e2:	d0ad      	beq.n	f440 <gpiote_event_handler+0x80>
    f4e4:	463d      	mov	r5, r7
    f4e6:	683f      	ldr	r7, [r7, #0]
    f4e8:	e7de      	b.n	f4a8 <gpiote_event_handler+0xe8>
		if (level_pins & bit) {
    f4ea:	4226      	tst	r6, r4
    f4ec:	d013      	beq.n	f516 <gpiote_event_handler+0x156>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f4ee:	692b      	ldr	r3, [r5, #16]
    f4f0:	69ea      	ldr	r2, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f4f2:	f897 c004 	ldrb.w	ip, [r7, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f4f6:	4053      	eors	r3, r2
    f4f8:	fa23 f308 	lsr.w	r3, r3, r8
		return NRF_GPIO_PIN_SENSE_HIGH;
    f4fc:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f500:	f008 001f 	and.w	r0, r8, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    f504:	bf0c      	ite	eq
    f506:	2103      	moveq	r1, #3
    f508:	2102      	movne	r1, #2
    f50a:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
    f50e:	f7ff fde9 	bl	f0e4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    f512:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    f516:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
    f51a:	0076      	lsls	r6, r6, #1
    f51c:	e7a0      	b.n	f460 <gpiote_event_handler+0xa0>
    f51e:	bf00      	nop
    f520:	4003117c 	.word	0x4003117c
    f524:	2002a2ac 	.word	0x2002a2ac
    f528:	40031000 	.word	0x40031000
    f52c:	40031100 	.word	0x40031100
    f530:	000255f3 	.word	0x000255f3
    f534:	00025c2e 	.word	0x00025c2e
    f538:	00025c45 	.word	0x00025c45
    f53c:	00025c6a 	.word	0x00025c6a

0000f540 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    f540:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_hwfc_t hwfc;
#ifdef UARTE_CONFIG_STOP_Two
	bool two_stop_bits = false;
#endif

	switch (cfg->stop_bits) {
    f542:	794b      	ldrb	r3, [r1, #5]
    f544:	2b01      	cmp	r3, #1
    f546:	d029      	beq.n	f59c <uarte_nrfx_configure+0x5c>
    f548:	2b03      	cmp	r3, #3
    f54a:	d124      	bne.n	f596 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		break;
#ifdef UARTE_CONFIG_STOP_Two
	case UART_CFG_STOP_BITS_2:
		two_stop_bits = true;
    f54c:	2601      	movs	r6, #1
#endif
	default:
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    f54e:	798b      	ldrb	r3, [r1, #6]
    f550:	2b03      	cmp	r3, #3
    f552:	d120      	bne.n	f596 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    f554:	79cd      	ldrb	r5, [r1, #7]
    f556:	b12d      	cbz	r5, f564 <uarte_nrfx_configure+0x24>
    f558:	2d01      	cmp	r5, #1
    f55a:	d11c      	bne.n	f596 <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
    f55c:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    f55e:	689b      	ldr	r3, [r3, #8]
    f560:	791b      	ldrb	r3, [r3, #4]
    f562:	b1c3      	cbz	r3, f596 <uarte_nrfx_configure+0x56>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
    f564:	790a      	ldrb	r2, [r1, #4]
    f566:	b112      	cbz	r2, f56e <uarte_nrfx_configure+0x2e>
    f568:	2a02      	cmp	r2, #2
    f56a:	d114      	bne.n	f596 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UARTE_PARITY_INCLUDED;
    f56c:	220e      	movs	r2, #14
	switch (baudrate) {
    f56e:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
    f572:	6804      	ldr	r4, [r0, #0]
		break;
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    f574:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    f576:	68a4      	ldr	r4, [r4, #8]
	switch (baudrate) {
    f578:	42bb      	cmp	r3, r7
	return config->uarte_regs;
    f57a:	6824      	ldr	r4, [r4, #0]
	switch (baudrate) {
    f57c:	d068      	beq.n	f650 <uarte_nrfx_configure+0x110>
    f57e:	d829      	bhi.n	f5d4 <uarte_nrfx_configure+0x94>
    f580:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    f584:	d067      	beq.n	f656 <uarte_nrfx_configure+0x116>
    f586:	d814      	bhi.n	f5b2 <uarte_nrfx_configure+0x72>
    f588:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    f58c:	d065      	beq.n	f65a <uarte_nrfx_configure+0x11a>
    f58e:	d807      	bhi.n	f5a0 <uarte_nrfx_configure+0x60>
    f590:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    f594:	d064      	beq.n	f660 <uarte_nrfx_configure+0x120>
		return -ENOTSUP;
    f596:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f59a:	e058      	b.n	f64e <uarte_nrfx_configure+0x10e>
	bool two_stop_bits = false;
    f59c:	2600      	movs	r6, #0
    f59e:	e7d6      	b.n	f54e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    f5a0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    f5a4:	d05f      	beq.n	f666 <uarte_nrfx_configure+0x126>
    f5a6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    f5aa:	d1f4      	bne.n	f596 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    f5ac:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    f5b0:	e03c      	b.n	f62c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    f5b2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    f5b6:	d059      	beq.n	f66c <uarte_nrfx_configure+0x12c>
    f5b8:	d804      	bhi.n	f5c4 <uarte_nrfx_configure+0x84>
    f5ba:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    f5be:	d1ea      	bne.n	f596 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    f5c0:	4b35      	ldr	r3, [pc, #212]	; (f698 <uarte_nrfx_configure+0x158>)
    f5c2:	e033      	b.n	f62c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    f5c4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    f5c8:	d052      	beq.n	f670 <uarte_nrfx_configure+0x130>
    f5ca:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    f5ce:	d1e2      	bne.n	f596 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    f5d0:	4b32      	ldr	r3, [pc, #200]	; (f69c <uarte_nrfx_configure+0x15c>)
    f5d2:	e02b      	b.n	f62c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    f5d4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    f5d8:	d04c      	beq.n	f674 <uarte_nrfx_configure+0x134>
    f5da:	d812      	bhi.n	f602 <uarte_nrfx_configure+0xc2>
    f5dc:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    f5e0:	42bb      	cmp	r3, r7
    f5e2:	d04a      	beq.n	f67a <uarte_nrfx_configure+0x13a>
    f5e4:	d805      	bhi.n	f5f2 <uarte_nrfx_configure+0xb2>
    f5e6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    f5ea:	d1d4      	bne.n	f596 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    f5ec:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    f5f0:	e01c      	b.n	f62c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    f5f2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    f5f6:	d043      	beq.n	f680 <uarte_nrfx_configure+0x140>
    f5f8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    f5fc:	d1cb      	bne.n	f596 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    f5fe:	4b28      	ldr	r3, [pc, #160]	; (f6a0 <uarte_nrfx_configure+0x160>)
    f600:	e014      	b.n	f62c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    f602:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    f606:	d03e      	beq.n	f686 <uarte_nrfx_configure+0x146>
    f608:	d808      	bhi.n	f61c <uarte_nrfx_configure+0xdc>
    f60a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    f60e:	d03d      	beq.n	f68c <uarte_nrfx_configure+0x14c>
    f610:	4f24      	ldr	r7, [pc, #144]	; (f6a4 <uarte_nrfx_configure+0x164>)
    f612:	42bb      	cmp	r3, r7
    f614:	d1bf      	bne.n	f596 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    f616:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    f61a:	e007      	b.n	f62c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    f61c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    f620:	d037      	beq.n	f692 <uarte_nrfx_configure+0x152>
    f622:	4f21      	ldr	r7, [pc, #132]	; (f6a8 <uarte_nrfx_configure+0x168>)
    f624:	42bb      	cmp	r3, r7
    f626:	d1b6      	bne.n	f596 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    f628:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000

__STATIC_INLINE void nrf_uarte_configure(NRF_UARTE_Type   * p_reg,
                                         nrf_uarte_parity_t parity,
                                         nrf_uarte_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    f62c:	432a      	orrs	r2, r5
}

__STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type   * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    f62e:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    f632:	f8c4 256c 	str.w	r2, [r4, #1388]	; 0x56c
	}

	nrf_uarte_configure(get_uarte_instance(dev), parity, hwfc);

#ifdef UARTE_CONFIG_STOP_Two
	if (two_stop_bits) {
    f636:	b12e      	cbz	r6, f644 <uarte_nrfx_configure+0x104>
		/* TODO Change this to nrfx HAL function when available */
		get_uarte_instance(dev)->CONFIG |=
    f638:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
    f63c:	f043 0310 	orr.w	r3, r3, #16
    f640:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
			UARTE_CONFIG_STOP_Two << UARTE_CONFIG_STOP_Pos;
	}
#endif
	get_dev_data(dev)->uart_config = *cfg;
    f644:	6883      	ldr	r3, [r0, #8]
    f646:	c903      	ldmia	r1, {r0, r1}
    f648:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    f64c:	2000      	movs	r0, #0
}
    f64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    f650:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    f654:	e7ea      	b.n	f62c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    f656:	4b15      	ldr	r3, [pc, #84]	; (f6ac <uarte_nrfx_configure+0x16c>)
    f658:	e7e8      	b.n	f62c <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00027000;
    f65a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    f65e:	e7e5      	b.n	f62c <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
    f660:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    f664:	e7e2      	b.n	f62c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    f666:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    f66a:	e7df      	b.n	f62c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    f66c:	4b10      	ldr	r3, [pc, #64]	; (f6b0 <uarte_nrfx_configure+0x170>)
    f66e:	e7dd      	b.n	f62c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    f670:	4b10      	ldr	r3, [pc, #64]	; (f6b4 <uarte_nrfx_configure+0x174>)
    f672:	e7db      	b.n	f62c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    f674:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    f678:	e7d8      	b.n	f62c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    f67a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    f67e:	e7d5      	b.n	f62c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    f680:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    f684:	e7d2      	b.n	f62c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    f686:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    f68a:	e7cf      	b.n	f62c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    f68c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    f690:	e7cc      	b.n	f62c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    f692:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    f696:	e7c9      	b.n	f62c <uarte_nrfx_configure+0xec>
    f698:	00275000 	.word	0x00275000
    f69c:	0075c000 	.word	0x0075c000
    f6a0:	013a9000 	.word	0x013a9000
    f6a4:	0003d090 	.word	0x0003d090
    f6a8:	000f4240 	.word	0x000f4240
    f6ac:	0013b000 	.word	0x0013b000
    f6b0:	003af000 	.word	0x003af000
    f6b4:	004ea000 	.word	0x004ea000

0000f6b8 <uarte_0_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_0_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_0_CTS_PIN)
		#define UARTE_0_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(0);
    f6b8:	b570      	push	{r4, r5, r6, lr}
    f6ba:	4606      	mov	r6, r0
    f6bc:	2200      	movs	r2, #0
    f6be:	2101      	movs	r1, #1
    f6c0:	2008      	movs	r0, #8
    f6c2:	f7fe faf3 	bl	dcac <z_arm_irq_priority_set>
    f6c6:	2008      	movs	r0, #8
    f6c8:	f7fe fae0 	bl	dc8c <z_arch_irq_enable>
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    f6cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	return dev->config->config_info;
    f6d0:	6833      	ldr	r3, [r6, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    f6d2:	68b5      	ldr	r5, [r6, #8]
	return config->uarte_regs;
    f6d4:	689b      	ldr	r3, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f6d6:	2103      	movs	r1, #3
    f6d8:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
    f6da:	4b1a      	ldr	r3, [pc, #104]	; (f744 <uarte_0_init+0x8c>)
    p_reg->PSEL.TXD = pseltxd;
    f6dc:	201d      	movs	r0, #29
    f6de:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f6e0:	2200      	movs	r2, #0
    f6e2:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
    f6e6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    f6ea:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    f6ee:	201c      	movs	r0, #28
    f6f0:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
    f6f4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    f6f8:	6098      	str	r0, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f6fa:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
    f6fe:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    p_reg->PSEL.RTS = pselrts;
    f702:	231b      	movs	r3, #27
    f704:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    f708:	231a      	movs	r3, #26
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    f70a:	4629      	mov	r1, r5
    f70c:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    f710:	4630      	mov	r0, r6
    f712:	f7ff ff15 	bl	f540 <uarte_nrfx_configure>
	if (err) {
    f716:	b9a0      	cbnz	r0, f742 <uarte_0_init+0x8a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    f718:	2308      	movs	r3, #8
    f71a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    f71e:	f105 030c 	add.w	r3, r5, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f722:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

__STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                             uint8_t *        p_buffer,
                                             size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    f726:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    f72a:	2301      	movs	r3, #1
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
    f72c:	68aa      	ldr	r2, [r5, #8]
    f72e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    f732:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f734:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    f736:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    f73a:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f73e:	60a3      	str	r3, [r4, #8]
    f740:	60e3      	str	r3, [r4, #12]
	UART_NRF_UARTE_DEVICE(0);
    f742:	bd70      	pop	{r4, r5, r6, pc}
    f744:	40842500 	.word	0x40842500

0000f748 <entropy_cc310_rng_get_entropy>:
#include "nrf_cc310_platform_entropy.h"
#endif

static int entropy_cc310_rng_get_entropy(struct device *dev, u8_t *buffer,
					 u16_t length)
{
    f748:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f74a:	460d      	mov	r5, r1
    f74c:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
    f74e:	b948      	cbnz	r0, f764 <entropy_cc310_rng_get_entropy+0x1c>
    f750:	4910      	ldr	r1, [pc, #64]	; (f794 <entropy_cc310_rng_get_entropy+0x4c>)
    f752:	4811      	ldr	r0, [pc, #68]	; (f798 <entropy_cc310_rng_get_entropy+0x50>)
    f754:	231e      	movs	r3, #30
    f756:	4a11      	ldr	r2, [pc, #68]	; (f79c <entropy_cc310_rng_get_entropy+0x54>)
    f758:	f013 fae9 	bl	22d2e <printk>
    f75c:	211e      	movs	r1, #30
    f75e:	480f      	ldr	r0, [pc, #60]	; (f79c <entropy_cc310_rng_get_entropy+0x54>)
    f760:	f013 faf2 	bl	22d48 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
    f764:	b94d      	cbnz	r5, f77a <entropy_cc310_rng_get_entropy+0x32>
    f766:	490e      	ldr	r1, [pc, #56]	; (f7a0 <entropy_cc310_rng_get_entropy+0x58>)
    f768:	480b      	ldr	r0, [pc, #44]	; (f798 <entropy_cc310_rng_get_entropy+0x50>)
    f76a:	231f      	movs	r3, #31
    f76c:	4a0b      	ldr	r2, [pc, #44]	; (f79c <entropy_cc310_rng_get_entropy+0x54>)
    f76e:	f013 fade 	bl	22d2e <printk>
    f772:	211f      	movs	r1, #31
    f774:	4809      	ldr	r0, [pc, #36]	; (f79c <entropy_cc310_rng_get_entropy+0x54>)
    f776:	f013 fae7 	bl	22d48 <assert_post_action>

#if defined(CONFIG_SPM)
	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	res = spm_request_random_number(buffer, length, &olen);
    f77a:	aa01      	add	r2, sp, #4
    f77c:	4621      	mov	r1, r4
    f77e:	4628      	mov	r0, r5
    f780:	f7f8 fc36 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
    f784:	9b01      	ldr	r3, [sp, #4]
		return -EINVAL;
    f786:	429c      	cmp	r4, r3
		return -EINVAL;
	}
#endif

	return res;
}
    f788:	bf18      	it	ne
    f78a:	f06f 0015 	mvnne.w	r0, #21
    f78e:	b003      	add	sp, #12
    f790:	bd30      	pop	{r4, r5, pc}
    f792:	bf00      	nop
    f794:	00025d06 	.word	0x00025d06
    f798:	000255f3 	.word	0x000255f3
    f79c:	00025cca 	.word	0x00025cca
    f7a0:	00025d19 	.word	0x00025d19

0000f7a4 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
    f7a4:	2200      	movs	r2, #0
{
    f7a6:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
    f7a8:	4611      	mov	r1, r2
    f7aa:	202a      	movs	r0, #42	; 0x2a
    f7ac:	f7fe fa7e 	bl	dcac <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
    f7b0:	f002 f990 	bl	11ad4 <bsd_init>
    f7b4:	4b01      	ldr	r3, [pc, #4]	; (f7bc <_bsdlib_init+0x18>)
    f7b6:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
    f7b8:	2000      	movs	r0, #0
    f7ba:	bd08      	pop	{r3, pc}
    f7bc:	20020064 	.word	0x20020064

0000f7c0 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
    f7c0:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
    f7c2:	4b0d      	ldr	r3, [pc, #52]	; (f7f8 <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
    f7c4:	4c0d      	ldr	r4, [pc, #52]	; (f7fc <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
    f7c6:	681a      	ldr	r2, [r3, #0]
    f7c8:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
    f7ca:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
    f7cc:	4623      	mov	r3, r4
		if (entry->id == id) {
    f7ce:	6819      	ldr	r1, [r3, #0]
    f7d0:	4281      	cmp	r1, r0
    f7d2:	d00e      	beq.n	f7f2 <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
    f7d4:	b151      	cbz	r1, f7ec <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
    f7d6:	6859      	ldr	r1, [r3, #4]
    f7d8:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
    f7da:	42b1      	cmp	r1, r6
    f7dc:	bfc4      	itt	gt
    f7de:	461c      	movgt	r4, r3
    f7e0:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    f7e2:	3d01      	subs	r5, #1
    f7e4:	f103 0308 	add.w	r3, r3, #8
    f7e8:	d1f1      	bne.n	f7ce <thread_monitor_entry_get+0xe>
    f7ea:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
    f7ec:	3a01      	subs	r2, #1
	new_entry->id = id;
    f7ee:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
    f7f0:	605a      	str	r2, [r3, #4]

	return new_entry;
}
    f7f2:	4618      	mov	r0, r3
    f7f4:	bd70      	pop	{r4, r5, r6, pc}
    f7f6:	bf00      	nop
    f7f8:	20020068 	.word	0x20020068
    f7fc:	20020074 	.word	0x20020074

0000f800 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
    f800:	4668      	mov	r0, sp
    f802:	f020 0107 	bic.w	r1, r0, #7
    f806:	468d      	mov	sp, r1
    f808:	b519      	push	{r0, r3, r4, lr}
    f80a:	f013 fb10 	bl	22e2e <z_arch_isr_direct_header>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    f80e:	4b0d      	ldr	r3, [pc, #52]	; (f844 <rpc_proxy_irq_handler+0x44>)
    f810:	e8d3 2fef 	ldaex	r2, [r3]
    f814:	3201      	adds	r2, #1
    f816:	e8c3 2fe1 	stlex	r1, r2, [r3]
    f81a:	2900      	cmp	r1, #0
    f81c:	d1f8      	bne.n	f810 <rpc_proxy_irq_handler+0x10>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
    f81e:	f00c f84b 	bl	1b8b8 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
    f822:	4b09      	ldr	r3, [pc, #36]	; (f848 <rpc_proxy_irq_handler+0x48>)
    f824:	681c      	ldr	r4, [r3, #0]
    f826:	b93c      	cbnz	r4, f838 <rpc_proxy_irq_handler+0x38>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
    f828:	f7fe fa72 	bl	dd10 <_arch_isr_direct_pm>

#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
    f82c:	f7fe f95c 	bl	dae8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
    f830:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
    f834:	4685      	mov	sp, r0
    f836:	4770      	bx	lr
		z_arch_syscall_invoke1(*(u32_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    f838:	1d20      	adds	r0, r4, #4
    f83a:	f011 fc21 	bl	21080 <z_impl_k_sem_give>
    f83e:	6824      	ldr	r4, [r4, #0]
	return node->next;
    f840:	e7f1      	b.n	f826 <rpc_proxy_irq_handler+0x26>
    f842:	bf00      	nop
    f844:	20020068 	.word	0x20020068
    f848:	2002006c 	.word	0x2002006c

0000f84c <bsd_os_timedwait>:
{
    f84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f850:	4688      	mov	r8, r1
    f852:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
    f854:	f014 fb3c 	bl	23ed0 <z_impl_k_uptime_get>
	if (*timeout == 0) {
    f858:	f8d8 3000 	ldr.w	r3, [r8]
    f85c:	4606      	mov	r6, r0
    f85e:	2b00      	cmp	r3, #0
    f860:	460f      	mov	r7, r1
    f862:	d103      	bne.n	f86c <bsd_os_timedwait+0x20>
	z_impl_k_yield();
    f864:	f011 fa82 	bl	20d6c <z_impl_k_yield>
		return NRF_ETIMEDOUT;
    f868:	203c      	movs	r0, #60	; 0x3c
    f86a:	e06e      	b.n	f94a <bsd_os_timedwait+0xfe>
		*timeout = K_FOREVER;
    f86c:	bfbc      	itt	lt
    f86e:	f04f 33ff 	movlt.w	r3, #4294967295
    f872:	f8c8 3000 	strlt.w	r3, [r8]
	z_impl_k_sem_init(sem, initial_count, limit);
    f876:	2201      	movs	r2, #1
    f878:	2100      	movs	r1, #0
    f87a:	a802      	add	r0, sp, #8
    f87c:	f011 fbca 	bl	21014 <z_impl_k_sem_init>
    f880:	f10d 0a04 	add.w	sl, sp, #4
    f884:	f04f 0320 	mov.w	r3, #32
    f888:	f3ef 8b11 	mrs	fp, BASEPRI
    f88c:	f383 8811 	msr	BASEPRI, r3
    f890:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    f894:	f011 fbb8 	bl	21008 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    f898:	f7ff ff92 	bl	f7c0 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
    f89c:	4933      	ldr	r1, [pc, #204]	; (f96c <bsd_os_timedwait+0x120>)
    f89e:	6843      	ldr	r3, [r0, #4]
    f8a0:	680a      	ldr	r2, [r1, #0]
    f8a2:	4689      	mov	r9, r1
    f8a4:	4293      	cmp	r3, r2
    f8a6:	f04f 0300 	mov.w	r3, #0
    f8aa:	d108      	bne.n	f8be <bsd_os_timedwait+0x72>
	parent->next = child;
    f8ac:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
    f8ae:	4b30      	ldr	r3, [pc, #192]	; (f970 <bsd_os_timedwait+0x124>)
    f8b0:	685a      	ldr	r2, [r3, #4]
    f8b2:	2a00      	cmp	r2, #0
    f8b4:	d14c      	bne.n	f950 <bsd_os_timedwait+0x104>
	list->head = node;
    f8b6:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
    f8ba:	2301      	movs	r3, #1
    f8bc:	e000      	b.n	f8c0 <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
    f8be:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
    f8c0:	f38b 8811 	msr	BASEPRI, fp
    f8c4:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
    f8c8:	2b00      	cmp	r3, #0
    f8ca:	d03d      	beq.n	f948 <bsd_os_timedwait+0xfc>
	(void)k_sem_take(&thread.sem, *timeout);
    f8cc:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
    f8d0:	a802      	add	r0, sp, #8
    f8d2:	f011 fc1d 	bl	21110 <z_impl_k_sem_take>
	__asm__ volatile(
    f8d6:	f04f 0320 	mov.w	r3, #32
    f8da:	f3ef 8b11 	mrs	fp, BASEPRI
    f8de:	f383 8811 	msr	BASEPRI, r3
    f8e2:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f8e6:	2000      	movs	r0, #0
    f8e8:	4b21      	ldr	r3, [pc, #132]	; (f970 <bsd_os_timedwait+0x124>)
    f8ea:	681a      	ldr	r2, [r3, #0]
    f8ec:	b152      	cbz	r2, f904 <bsd_os_timedwait+0xb8>
    f8ee:	4552      	cmp	r2, sl
    f8f0:	d139      	bne.n	f966 <bsd_os_timedwait+0x11a>
Z_GENLIST_REMOVE(slist, snode)
    f8f2:	9901      	ldr	r1, [sp, #4]
    f8f4:	bb88      	cbnz	r0, f95a <bsd_os_timedwait+0x10e>
    f8f6:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    f8f8:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    f8fa:	4290      	cmp	r0, r2
    f8fc:	d100      	bne.n	f900 <bsd_os_timedwait+0xb4>
	list->tail = node;
    f8fe:	6059      	str	r1, [r3, #4]
	parent->next = child;
    f900:	2300      	movs	r3, #0
    f902:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
    f904:	f011 fb80 	bl	21008 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    f908:	f7ff ff5a 	bl	f7c0 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
    f90c:	f8d9 3000 	ldr.w	r3, [r9]
    f910:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
    f912:	f38b 8811 	msr	BASEPRI, fp
    f916:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
    f91a:	f8d8 9000 	ldr.w	r9, [r8]
    f91e:	f1b9 3fff 	cmp.w	r9, #4294967295
    f922:	d011      	beq.n	f948 <bsd_os_timedwait+0xfc>
	return z_impl_k_uptime_get();
    f924:	f014 fad4 	bl	23ed0 <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
    f928:	eb16 0209 	adds.w	r2, r6, r9
    f92c:	eb47 73e9 	adc.w	r3, r7, r9, asr #31
    f930:	1a14      	subs	r4, r2, r0
    f932:	eb63 0501 	sbc.w	r5, r3, r1
	*timeout = remaining > 0 ? remaining : 0;
    f936:	2c00      	cmp	r4, #0
    f938:	f175 0300 	sbcs.w	r3, r5, #0
    f93c:	bfb8      	it	lt
    f93e:	2400      	movlt	r4, #0
    f940:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
    f944:	2c00      	cmp	r4, #0
    f946:	d08f      	beq.n	f868 <bsd_os_timedwait+0x1c>
	return 0;
    f948:	2000      	movs	r0, #0
}
    f94a:	b009      	add	sp, #36	; 0x24
    f94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f950:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    f954:	f8c3 a004 	str.w	sl, [r3, #4]
    f958:	e7af      	b.n	f8ba <bsd_os_timedwait+0x6e>
	parent->next = child;
    f95a:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    f95c:	6859      	ldr	r1, [r3, #4]
    f95e:	4291      	cmp	r1, r2
	list->tail = node;
    f960:	bf08      	it	eq
    f962:	6058      	streq	r0, [r3, #4]
    f964:	e7cc      	b.n	f900 <bsd_os_timedwait+0xb4>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f966:	4610      	mov	r0, r2
    f968:	6812      	ldr	r2, [r2, #0]
    f96a:	e7bf      	b.n	f8ec <bsd_os_timedwait+0xa0>
    f96c:	20020068 	.word	0x20020068
    f970:	2002006c 	.word	0x2002006c

0000f974 <bsd_os_errno_set>:
	switch (err_code) {
    f974:	282d      	cmp	r0, #45	; 0x2d
{
    f976:	b510      	push	{r4, lr}
    f978:	4604      	mov	r4, r0
	switch (err_code) {
    f97a:	d00c      	beq.n	f996 <bsd_os_errno_set+0x22>
    f97c:	dc39      	bgt.n	f9f2 <bsd_os_errno_set+0x7e>
    f97e:	280e      	cmp	r0, #14
    f980:	d009      	beq.n	f996 <bsd_os_errno_set+0x22>
    f982:	dc11      	bgt.n	f9a8 <bsd_os_errno_set+0x34>
    f984:	2808      	cmp	r0, #8
    f986:	d006      	beq.n	f996 <bsd_os_errno_set+0x22>
    f988:	dc09      	bgt.n	f99e <bsd_os_errno_set+0x2a>
    f98a:	2802      	cmp	r0, #2
    f98c:	d003      	beq.n	f996 <bsd_os_errno_set+0x22>
    f98e:	2805      	cmp	r0, #5
    f990:	d001      	beq.n	f996 <bsd_os_errno_set+0x22>
    f992:	2801      	cmp	r0, #1
    f994:	d119      	bne.n	f9ca <bsd_os_errno_set+0x56>
		errno = ETIMEDOUT;
    f996:	f013 fdae 	bl	234f6 <z_errno>
    f99a:	6004      	str	r4, [r0, #0]
}
    f99c:	bd10      	pop	{r4, pc}
	switch (err_code) {
    f99e:	280c      	cmp	r0, #12
    f9a0:	d0f9      	beq.n	f996 <bsd_os_errno_set+0x22>
    f9a2:	dc58      	bgt.n	fa56 <bsd_os_errno_set+0xe2>
    f9a4:	2809      	cmp	r0, #9
    f9a6:	e7f5      	b.n	f994 <bsd_os_errno_set+0x20>
    f9a8:	2828      	cmp	r0, #40	; 0x28
    f9aa:	f000 8084 	beq.w	fab6 <bsd_os_errno_set+0x142>
    f9ae:	dc05      	bgt.n	f9bc <bsd_os_errno_set+0x48>
    f9b0:	2818      	cmp	r0, #24
    f9b2:	d0f0      	beq.n	f996 <bsd_os_errno_set+0x22>
    f9b4:	2823      	cmp	r0, #35	; 0x23
    f9b6:	d053      	beq.n	fa60 <bsd_os_errno_set+0xec>
    f9b8:	2816      	cmp	r0, #22
    f9ba:	e7eb      	b.n	f994 <bsd_os_errno_set+0x20>
    f9bc:	282a      	cmp	r0, #42	; 0x2a
    f9be:	d0ea      	beq.n	f996 <bsd_os_errno_set+0x22>
    f9c0:	db52      	blt.n	fa68 <bsd_os_errno_set+0xf4>
    f9c2:	282b      	cmp	r0, #43	; 0x2b
    f9c4:	d0e7      	beq.n	f996 <bsd_os_errno_set+0x22>
    f9c6:	282c      	cmp	r0, #44	; 0x2c
    f9c8:	d052      	beq.n	fa70 <bsd_os_errno_set+0xfc>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
    f9ca:	f44f 73a2 	mov.w	r3, #324	; 0x144
    f9ce:	4a3c      	ldr	r2, [pc, #240]	; (fac0 <bsd_os_errno_set+0x14c>)
    f9d0:	493c      	ldr	r1, [pc, #240]	; (fac4 <bsd_os_errno_set+0x150>)
    f9d2:	483d      	ldr	r0, [pc, #244]	; (fac8 <bsd_os_errno_set+0x154>)
    f9d4:	f013 f9ab 	bl	22d2e <printk>
    f9d8:	4621      	mov	r1, r4
    f9da:	483c      	ldr	r0, [pc, #240]	; (facc <bsd_os_errno_set+0x158>)
    f9dc:	f013 f9a7 	bl	22d2e <printk>
    f9e0:	f44f 71a2 	mov.w	r1, #324	; 0x144
    f9e4:	4836      	ldr	r0, [pc, #216]	; (fac0 <bsd_os_errno_set+0x14c>)
    f9e6:	f013 f9af 	bl	22d48 <assert_post_action>
		errno = 0xBAADBAAD;
    f9ea:	f013 fd84 	bl	234f6 <z_errno>
    f9ee:	4b38      	ldr	r3, [pc, #224]	; (fad0 <bsd_os_errno_set+0x15c>)
    f9f0:	e034      	b.n	fa5c <bsd_os_errno_set+0xe8>
	switch (err_code) {
    f9f2:	283c      	cmp	r0, #60	; 0x3c
    f9f4:	d0cf      	beq.n	f996 <bsd_os_errno_set+0x22>
    f9f6:	dc15      	bgt.n	fa24 <bsd_os_errno_set+0xb0>
    f9f8:	2833      	cmp	r0, #51	; 0x33
    f9fa:	d0cc      	beq.n	f996 <bsd_os_errno_set+0x22>
    f9fc:	dc05      	bgt.n	fa0a <bsd_os_errno_set+0x96>
    f9fe:	2830      	cmp	r0, #48	; 0x30
    fa00:	d0c9      	beq.n	f996 <bsd_os_errno_set+0x22>
    fa02:	2832      	cmp	r0, #50	; 0x32
    fa04:	d038      	beq.n	fa78 <bsd_os_errno_set+0x104>
    fa06:	282f      	cmp	r0, #47	; 0x2f
    fa08:	e7c4      	b.n	f994 <bsd_os_errno_set+0x20>
    fa0a:	2836      	cmp	r0, #54	; 0x36
    fa0c:	d0c3      	beq.n	f996 <bsd_os_errno_set+0x22>
    fa0e:	dc01      	bgt.n	fa14 <bsd_os_errno_set+0xa0>
    fa10:	2834      	cmp	r0, #52	; 0x34
    fa12:	e7bf      	b.n	f994 <bsd_os_errno_set+0x20>
    fa14:	2838      	cmp	r0, #56	; 0x38
    fa16:	d0be      	beq.n	f996 <bsd_os_errno_set+0x22>
    fa18:	2839      	cmp	r0, #57	; 0x39
    fa1a:	d1d6      	bne.n	f9ca <bsd_os_errno_set+0x56>
		errno = ENOTCONN;
    fa1c:	f013 fd6b 	bl	234f6 <z_errno>
    fa20:	2339      	movs	r3, #57	; 0x39
    fa22:	e01b      	b.n	fa5c <bsd_os_errno_set+0xe8>
	switch (err_code) {
    fa24:	287d      	cmp	r0, #125	; 0x7d
    fa26:	d033      	beq.n	fa90 <bsd_os_errno_set+0x11c>
    fa28:	dc09      	bgt.n	fa3e <bsd_os_errno_set+0xca>
    fa2a:	2870      	cmp	r0, #112	; 0x70
    fa2c:	d028      	beq.n	fa80 <bsd_os_errno_set+0x10c>
    fa2e:	2873      	cmp	r0, #115	; 0x73
    fa30:	d02a      	beq.n	fa88 <bsd_os_errno_set+0x114>
    fa32:	2869      	cmp	r0, #105	; 0x69
    fa34:	d1c9      	bne.n	f9ca <bsd_os_errno_set+0x56>
		errno = ENOBUFS;
    fa36:	f013 fd5e 	bl	234f6 <z_errno>
    fa3a:	2337      	movs	r3, #55	; 0x37
    fa3c:	e00e      	b.n	fa5c <bsd_os_errno_set+0xe8>
	switch (err_code) {
    fa3e:	287f      	cmp	r0, #127	; 0x7f
    fa40:	d02f      	beq.n	faa2 <bsd_os_errno_set+0x12e>
    fa42:	db29      	blt.n	fa98 <bsd_os_errno_set+0x124>
    fa44:	2880      	cmp	r0, #128	; 0x80
    fa46:	d031      	beq.n	faac <bsd_os_errno_set+0x138>
    fa48:	2881      	cmp	r0, #129	; 0x81
    fa4a:	d1be      	bne.n	f9ca <bsd_os_errno_set+0x56>
		errno = EKEYREJECTED;
    fa4c:	f013 fd53 	bl	234f6 <z_errno>
    fa50:	f240 73d4 	movw	r3, #2004	; 0x7d4
    fa54:	e002      	b.n	fa5c <bsd_os_errno_set+0xe8>
		errno = EACCES;
    fa56:	f013 fd4e 	bl	234f6 <z_errno>
    fa5a:	230d      	movs	r3, #13
		errno = 0xBAADBAAD;
    fa5c:	6003      	str	r3, [r0, #0]
}
    fa5e:	e79d      	b.n	f99c <bsd_os_errno_set+0x28>
		errno = EAGAIN;
    fa60:	f013 fd49 	bl	234f6 <z_errno>
    fa64:	230b      	movs	r3, #11
    fa66:	e7f9      	b.n	fa5c <bsd_os_errno_set+0xe8>
		errno = EPROTOTYPE;
    fa68:	f013 fd45 	bl	234f6 <z_errno>
    fa6c:	2329      	movs	r3, #41	; 0x29
    fa6e:	e7f5      	b.n	fa5c <bsd_os_errno_set+0xe8>
		errno = ESOCKTNOSUPPORT;
    fa70:	f013 fd41 	bl	234f6 <z_errno>
    fa74:	232c      	movs	r3, #44	; 0x2c
    fa76:	e7f1      	b.n	fa5c <bsd_os_errno_set+0xe8>
		errno = ENETDOWN;
    fa78:	f013 fd3d 	bl	234f6 <z_errno>
    fa7c:	233e      	movs	r3, #62	; 0x3e
    fa7e:	e7ed      	b.n	fa5c <bsd_os_errno_set+0xe8>
		errno = EHOSTDOWN;
    fa80:	f013 fd39 	bl	234f6 <z_errno>
    fa84:	2343      	movs	r3, #67	; 0x43
    fa86:	e7e9      	b.n	fa5c <bsd_os_errno_set+0xe8>
		errno = EINPROGRESS;
    fa88:	f013 fd35 	bl	234f6 <z_errno>
    fa8c:	2344      	movs	r3, #68	; 0x44
    fa8e:	e7e5      	b.n	fa5c <bsd_os_errno_set+0xe8>
		errno = ECANCELED;
    fa90:	f013 fd31 	bl	234f6 <z_errno>
    fa94:	2348      	movs	r3, #72	; 0x48
    fa96:	e7e1      	b.n	fa5c <bsd_os_errno_set+0xe8>
		errno = ENOKEY;
    fa98:	f013 fd2d 	bl	234f6 <z_errno>
    fa9c:	f240 73d1 	movw	r3, #2001	; 0x7d1
    faa0:	e7dc      	b.n	fa5c <bsd_os_errno_set+0xe8>
		errno = EKEYEXPIRED;
    faa2:	f013 fd28 	bl	234f6 <z_errno>
    faa6:	f240 73d2 	movw	r3, #2002	; 0x7d2
    faaa:	e7d7      	b.n	fa5c <bsd_os_errno_set+0xe8>
		errno = EKEYREVOKED;
    faac:	f013 fd23 	bl	234f6 <z_errno>
    fab0:	f240 73d3 	movw	r3, #2003	; 0x7d3
    fab4:	e7d2      	b.n	fa5c <bsd_os_errno_set+0xe8>
		errno = EMSGSIZE;
    fab6:	f013 fd1e 	bl	234f6 <z_errno>
    faba:	2324      	movs	r3, #36	; 0x24
    fabc:	e7ce      	b.n	fa5c <bsd_os_errno_set+0xe8>
    fabe:	bf00      	nop
    fac0:	00025d39 	.word	0x00025d39
    fac4:	000261cb 	.word	0x000261cb
    fac8:	000255f3 	.word	0x000255f3
    facc:	00025d69 	.word	0x00025d69
    fad0:	baadbaad 	.word	0xbaadbaad

0000fad4 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    fad8:	4b01      	ldr	r3, [pc, #4]	; (fae0 <bsd_os_application_irq_set+0xc>)
    fada:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    fade:	4770      	bx	lr
    fae0:	e000e100 	.word	0xe000e100

0000fae4 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    fae8:	4b01      	ldr	r3, [pc, #4]	; (faf0 <bsd_os_application_irq_clear+0xc>)
    faea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    faee:	4770      	bx	lr
    faf0:	e000e100 	.word	0xe000e100

0000faf4 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    faf4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    faf8:	4b01      	ldr	r3, [pc, #4]	; (fb00 <bsd_os_trace_irq_set+0xc>)
    fafa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    fafe:	4770      	bx	lr
    fb00:	e000e100 	.word	0xe000e100

0000fb04 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fb04:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    fb08:	4b01      	ldr	r3, [pc, #4]	; (fb10 <bsd_os_trace_irq_clear+0xc>)
    fb0a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    fb0e:	4770      	bx	lr
    fb10:	e000e100 	.word	0xe000e100

0000fb14 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
    fb14:	b508      	push	{r3, lr}
	list->head = NULL;
    fb16:	2300      	movs	r3, #0
    fb18:	4a07      	ldr	r2, [pc, #28]	; (fb38 <bsd_os_init+0x24>)
	list->tail = NULL;
    fb1a:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    fb1e:	4a07      	ldr	r2, [pc, #28]	; (fb3c <bsd_os_init+0x28>)
    fb20:	e8d2 1fef 	ldaex	r1, [r2]
    fb24:	e8c2 3fe0 	stlex	r0, r3, [r2]
    fb28:	2800      	cmp	r0, #0
    fb2a:	d1f9      	bne.n	fb20 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
    fb2c:	f013 fd12 	bl	23554 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
    fb30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
    fb34:	f013 bd03 	b.w	2353e <trace_task_create>
    fb38:	2002006c 	.word	0x2002006c
    fb3c:	20020068 	.word	0x20020068

0000fb40 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
    fb40:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
    fb44:	d03c      	beq.n	fbc0 <z_to_nrf_optname+0x80>
    fb46:	dc04      	bgt.n	fb52 <z_to_nrf_optname+0x12>
    fb48:	2801      	cmp	r0, #1
    fb4a:	d044      	beq.n	fbd6 <z_to_nrf_optname+0x96>
			break;
		}
		break;

	default:
		retval = -1;
    fb4c:	f04f 30ff 	mov.w	r0, #4294967295
		break;
	}

	return retval;
}
    fb50:	4770      	bx	lr
	switch (z_in_level) {
    fb52:	f240 2302 	movw	r3, #514	; 0x202
    fb56:	4298      	cmp	r0, r3
    fb58:	d052      	beq.n	fc00 <z_to_nrf_optname+0xc0>
    fb5a:	f240 2303 	movw	r3, #515	; 0x203
    fb5e:	4298      	cmp	r0, r3
    fb60:	d1f4      	bne.n	fb4c <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
    fb62:	3901      	subs	r1, #1
    fb64:	2913      	cmp	r1, #19
    fb66:	d8f1      	bhi.n	fb4c <z_to_nrf_optname+0xc>
    fb68:	a301      	add	r3, pc, #4	; (adr r3, fb70 <z_to_nrf_optname+0x30>)
    fb6a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    fb6e:	bf00      	nop
    fb70:	0000fc0d 	.word	0x0000fc0d
    fb74:	0000fbd1 	.word	0x0000fbd1
    fb78:	0000fbf1 	.word	0x0000fbf1
    fb7c:	0000fbe3 	.word	0x0000fbe3
    fb80:	0000fbf5 	.word	0x0000fbf5
    fb84:	0000fbf9 	.word	0x0000fbf9
    fb88:	0000fbfd 	.word	0x0000fbfd
    fb8c:	0000fb4d 	.word	0x0000fb4d
    fb90:	0000fb4d 	.word	0x0000fb4d
    fb94:	0000fb4d 	.word	0x0000fb4d
    fb98:	0000fb4d 	.word	0x0000fb4d
    fb9c:	0000fb4d 	.word	0x0000fb4d
    fba0:	0000fb4d 	.word	0x0000fb4d
    fba4:	0000fb4d 	.word	0x0000fb4d
    fba8:	0000fb4d 	.word	0x0000fb4d
    fbac:	0000fb4d 	.word	0x0000fb4d
    fbb0:	0000fb4d 	.word	0x0000fb4d
    fbb4:	0000fb4d 	.word	0x0000fb4d
    fbb8:	0000fb4d 	.word	0x0000fb4d
    fbbc:	0000fbe7 	.word	0x0000fbe7
		switch (z_in_optname) {
    fbc0:	3901      	subs	r1, #1
    fbc2:	2905      	cmp	r1, #5
    fbc4:	d8c2      	bhi.n	fb4c <z_to_nrf_optname+0xc>
    fbc6:	e8df f001 	tbb	[pc, r1]
    fbca:	1503      	.short	0x1503
    fbcc:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
    fbd0:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
    fbd2:	6013      	str	r3, [r2, #0]
    fbd4:	e00a      	b.n	fbec <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
    fbd6:	2914      	cmp	r1, #20
    fbd8:	d005      	beq.n	fbe6 <z_to_nrf_optname+0xa6>
    fbda:	2919      	cmp	r1, #25
    fbdc:	d005      	beq.n	fbea <z_to_nrf_optname+0xaa>
    fbde:	2904      	cmp	r1, #4
    fbe0:	d1b4      	bne.n	fb4c <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
    fbe2:	2304      	movs	r3, #4
    fbe4:	e7f5      	b.n	fbd2 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
    fbe6:	2314      	movs	r3, #20
    fbe8:	e7f3      	b.n	fbd2 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
    fbea:	6011      	str	r1, [r2, #0]
	int retval = 0;
    fbec:	2000      	movs	r0, #0
			break;
    fbee:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
    fbf0:	2303      	movs	r3, #3
    fbf2:	e7ee      	b.n	fbd2 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
    fbf4:	2305      	movs	r3, #5
    fbf6:	e7ec      	b.n	fbd2 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
    fbf8:	2306      	movs	r3, #6
    fbfa:	e7ea      	b.n	fbd2 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
    fbfc:	2307      	movs	r3, #7
    fbfe:	e7e8      	b.n	fbd2 <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
    fc00:	2902      	cmp	r1, #2
    fc02:	d0e5      	beq.n	fbd0 <z_to_nrf_optname+0x90>
    fc04:	2903      	cmp	r1, #3
    fc06:	d0f3      	beq.n	fbf0 <z_to_nrf_optname+0xb0>
    fc08:	2901      	cmp	r1, #1
    fc0a:	d19f      	bne.n	fb4c <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
    fc0c:	2301      	movs	r3, #1
    fc0e:	e7e0      	b.n	fbd2 <z_to_nrf_optname+0x92>

0000fc10 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
    fc10:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
    fc12:	4b03      	ldr	r3, [pc, #12]	; (fc20 <nrf91_socket_iface_init+0x10>)
    fc14:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
    fc16:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
    fc18:	4802      	ldr	r0, [pc, #8]	; (fc24 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
    fc1a:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
    fc1c:	f7fd bcf6 	b.w	d60c <socket_offload_register>
    fc20:	200200c4 	.word	0x200200c4
    fc24:	00024358 	.word	0x00024358

0000fc28 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
    fc28:	4b0b      	ldr	r3, [pc, #44]	; (fc58 <find_node+0x30>)
{
    fc2a:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
    fc2c:	681b      	ldr	r3, [r3, #0]
    fc2e:	b153      	cbz	r3, fc46 <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    fc30:	2500      	movs	r5, #0
    fc32:	461c      	mov	r4, r3
    fc34:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
    fc36:	6866      	ldr	r6, [r4, #4]
    fc38:	428e      	cmp	r6, r1
    fc3a:	d106      	bne.n	fc4a <find_node+0x22>
    fc3c:	68a6      	ldr	r6, [r4, #8]
    fc3e:	4296      	cmp	r6, r2
    fc40:	d103      	bne.n	fc4a <find_node+0x22>
			*prev_out = prev;
			return curr;
    fc42:	4623      	mov	r3, r4
			*prev_out = prev;
    fc44:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
    fc46:	4618      	mov	r0, r3
    fc48:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
    fc4a:	2b00      	cmp	r3, #0
    fc4c:	d0fb      	beq.n	fc46 <find_node+0x1e>
    fc4e:	4625      	mov	r5, r4
    fc50:	461c      	mov	r4, r3
    fc52:	681b      	ldr	r3, [r3, #0]
    fc54:	e7ef      	b.n	fc36 <find_node+0xe>
    fc56:	bf00      	nop
    fc58:	200200c8 	.word	0x200200c8

0000fc5c <module_init>:

	k_mutex_unlock(&list_mtx);
}

static int module_init(struct device *dev)
{
    fc5c:	b510      	push	{r4, lr}
	list->head = NULL;
    fc5e:	2400      	movs	r4, #0
    fc60:	4b03      	ldr	r3, [pc, #12]	; (fc70 <module_init+0x14>)
	ARG_UNUSED(dev);

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
    fc62:	4804      	ldr	r0, [pc, #16]	; (fc74 <module_init+0x18>)
	list->tail = NULL;
    fc64:	e9c3 4400 	strd	r4, r4, [r3]
    fc68:	f000 fbe6 	bl	10438 <at_cmd_set_notification_handler>
	return 0;
}
    fc6c:	4620      	mov	r0, r4
    fc6e:	bd10      	pop	{r4, pc}
    fc70:	200200c8 	.word	0x200200c8
    fc74:	0000fc79 	.word	0x0000fc79

0000fc78 <notif_dispatch>:
{
    fc78:	b538      	push	{r3, r4, r5, lr}
    fc7a:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    fc7c:	f04f 31ff 	mov.w	r1, #4294967295
    fc80:	480a      	ldr	r0, [pc, #40]	; (fcac <notif_dispatch+0x34>)
    fc82:	f00f fe77 	bl	1f974 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
    fc86:	4b0a      	ldr	r3, [pc, #40]	; (fcb0 <notif_dispatch+0x38>)
    fc88:	681b      	ldr	r3, [r3, #0]
    fc8a:	b923      	cbnz	r3, fc96 <notif_dispatch+0x1e>
}
    fc8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_mutex_unlock(mutex);
    fc90:	4806      	ldr	r0, [pc, #24]	; (fcac <notif_dispatch+0x34>)
    fc92:	f00f bf49 	b.w	1fb28 <z_impl_k_mutex_unlock>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    fc96:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
    fc98:	689a      	ldr	r2, [r3, #8]
    fc9a:	4629      	mov	r1, r5
    fc9c:	6858      	ldr	r0, [r3, #4]
    fc9e:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
    fca0:	2c00      	cmp	r4, #0
    fca2:	d0f3      	beq.n	fc8c <notif_dispatch+0x14>
    fca4:	4623      	mov	r3, r4
    fca6:	6824      	ldr	r4, [r4, #0]
    fca8:	e7f6      	b.n	fc98 <notif_dispatch+0x20>
    fcaa:	bf00      	nop
    fcac:	2002a364 	.word	0x2002a364
    fcb0:	200200c8 	.word	0x200200c8

0000fcb4 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
    fcb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    fcb6:	4606      	mov	r6, r0
	if (handler == NULL) {
    fcb8:	460d      	mov	r5, r1
    fcba:	b369      	cbz	r1, fd18 <at_notif_register_handler+0x64>
	return z_impl_k_mutex_lock(mutex, timeout);
    fcbc:	f04f 31ff 	mov.w	r1, #4294967295
    fcc0:	4817      	ldr	r0, [pc, #92]	; (fd20 <at_notif_register_handler+0x6c>)
    fcc2:	f00f fe57 	bl	1f974 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
    fcc6:	462a      	mov	r2, r5
    fcc8:	4631      	mov	r1, r6
    fcca:	a801      	add	r0, sp, #4
    fccc:	f7ff ffac 	bl	fc28 <find_node>
    fcd0:	4604      	mov	r4, r0
    fcd2:	b120      	cbz	r0, fcde <at_notif_register_handler+0x2a>
	z_impl_k_mutex_unlock(mutex);
    fcd4:	4812      	ldr	r0, [pc, #72]	; (fd20 <at_notif_register_handler+0x6c>)
    fcd6:	f00f ff27 	bl	1fb28 <z_impl_k_mutex_unlock>
	return 0;
    fcda:	2000      	movs	r0, #0
		LOG_DBG("context=0x%08X, handler=0x%08X", (u32_t)context,
			(u32_t)handler);
		return -EINVAL;
	}
	return append_notif_handler(context, handler);
    fcdc:	e009      	b.n	fcf2 <at_notif_register_handler+0x3e>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
    fcde:	200c      	movs	r0, #12
    fce0:	f00f fce0 	bl	1f6a4 <k_malloc>
    fce4:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
    fce6:	b930      	cbnz	r0, fcf6 <at_notif_register_handler+0x42>
    fce8:	480d      	ldr	r0, [pc, #52]	; (fd20 <at_notif_register_handler+0x6c>)
    fcea:	f00f ff1d 	bl	1fb28 <z_impl_k_mutex_unlock>
		return -ENOBUFS;
    fcee:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    fcf2:	b002      	add	sp, #8
    fcf4:	bd70      	pop	{r4, r5, r6, pc}
	memset(to_ins, 0, sizeof(struct notif_handler));
    fcf6:	220c      	movs	r2, #12
    fcf8:	4621      	mov	r1, r4
    fcfa:	f013 f9e3 	bl	230c4 <memset>
	to_ins->ctx     = ctx;
    fcfe:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
    fd00:	4a08      	ldr	r2, [pc, #32]	; (fd24 <at_notif_register_handler+0x70>)
	parent->next = child;
    fd02:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
    fd04:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
    fd06:	e9c3 6501 	strd	r6, r5, [r3, #4]
    fd0a:	b911      	cbnz	r1, fd12 <at_notif_register_handler+0x5e>
	list->head = node;
    fd0c:	e9c2 3300 	strd	r3, r3, [r2]
    fd10:	e7e0      	b.n	fcd4 <at_notif_register_handler+0x20>
	parent->next = child;
    fd12:	600b      	str	r3, [r1, #0]
	list->tail = node;
    fd14:	6053      	str	r3, [r2, #4]
    fd16:	e7dd      	b.n	fcd4 <at_notif_register_handler+0x20>
		return -EINVAL;
    fd18:	f06f 0015 	mvn.w	r0, #21
    fd1c:	e7e9      	b.n	fcf2 <at_notif_register_handler+0x3e>
    fd1e:	bf00      	nop
    fd20:	2002a364 	.word	0x2002a364
    fd24:	200200c8 	.word	0x200200c8

0000fd28 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(char *str)
{
    fd28:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
    fd2a:	4d05      	ldr	r5, [pc, #20]	; (fd40 <write_uart_string+0x18>)
    fd2c:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
    fd2e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    fd32:	b901      	cbnz	r1, fd36 <write_uart_string+0xe>
	}
}
    fd34:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
    fd36:	6828      	ldr	r0, [r5, #0]
    fd38:	6843      	ldr	r3, [r0, #4]
    fd3a:	685b      	ldr	r3, [r3, #4]
    fd3c:	4798      	blx	r3
    fd3e:	e7f6      	b.n	fd2e <write_uart_string+0x6>
    fd40:	200201a4 	.word	0x200201a4

0000fd44 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
    fd44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
    fd46:	491a      	ldr	r1, [pc, #104]	; (fdb0 <cmd_send+0x6c>)
    fd48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    fd4c:	f10d 0303 	add.w	r3, sp, #3
    fd50:	4608      	mov	r0, r1
    fd52:	f000 fb4f 	bl	103f4 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
    fd56:	1e02      	subs	r2, r0, #0
    fd58:	da04      	bge.n	fd64 <cmd_send+0x20>
		LOG_ERR("Error while processing AT command: %d", err);
		state = AT_CMD_ERROR;
    fd5a:	2301      	movs	r3, #1
    fd5c:	f88d 3003 	strb.w	r3, [sp, #3]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
    fd60:	4814      	ldr	r0, [pc, #80]	; (fdb4 <cmd_send+0x70>)
    fd62:	e013      	b.n	fd8c <cmd_send+0x48>
	switch (state) {
    fd64:	f89d 3003 	ldrb.w	r3, [sp, #3]
    fd68:	2b03      	cmp	r3, #3
    fd6a:	d811      	bhi.n	fd90 <cmd_send+0x4c>
    fd6c:	a101      	add	r1, pc, #4	; (adr r1, fd74 <cmd_send+0x30>)
    fd6e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    fd72:	bf00      	nop
    fd74:	0000fd85 	.word	0x0000fd85
    fd78:	0000fd61 	.word	0x0000fd61
    fd7c:	0000fd9f 	.word	0x0000fd9f
    fd80:	0000fdab 	.word	0x0000fdab
		write_uart_string(at_buf);
    fd84:	480a      	ldr	r0, [pc, #40]	; (fdb0 <cmd_send+0x6c>)
    fd86:	f7ff ffcf 	bl	fd28 <write_uart_string>
		write_uart_string(OK_STR);
    fd8a:	480b      	ldr	r0, [pc, #44]	; (fdb8 <cmd_send+0x74>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
    fd8c:	f7ff ffcc 	bl	fd28 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
    fd90:	4b0a      	ldr	r3, [pc, #40]	; (fdbc <cmd_send+0x78>)
    fd92:	6818      	ldr	r0, [r3, #0]
		z_arch_syscall_invoke1(*(u32_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
    fd94:	f013 ffbb 	bl	23d0e <z_impl_uart_irq_rx_enable>
}
    fd98:	b007      	add	sp, #28
    fd9a:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
    fd9e:	4908      	ldr	r1, [pc, #32]	; (fdc0 <cmd_send+0x7c>)
		sprintf(str, "+CME ERROR: %d\r\n", err);
    fda0:	a801      	add	r0, sp, #4
    fda2:	f7ff f87f 	bl	eea4 <sprintf>
		write_uart_string(str);
    fda6:	a801      	add	r0, sp, #4
    fda8:	e7f0      	b.n	fd8c <cmd_send+0x48>
		sprintf(str, "+CME ERROR: %d\r\n", err);
    fdaa:	4906      	ldr	r1, [pc, #24]	; (fdc4 <cmd_send+0x80>)
    fdac:	e7f8      	b.n	fda0 <cmd_send+0x5c>
    fdae:	bf00      	nop
    fdb0:	20025bfc 	.word	0x20025bfc
    fdb4:	00025da2 	.word	0x00025da2
    fdb8:	00025d9d 	.word	0x00025d9d
    fdbc:	200201a4 	.word	0x200201a4
    fdc0:	00025daa 	.word	0x00025daa
    fdc4:	00025dbb 	.word	0x00025dbb

0000fdc8 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(struct device *dev)
{
    fdc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fdca:	4605      	mov	r5, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
    fdcc:	6843      	ldr	r3, [r0, #4]
    fdce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fdd0:	b103      	cbz	r3, fdd4 <isr+0xc>
		return api->irq_update(dev);
    fdd2:	4798      	blx	r3
	if (api->irq_rx_ready) {
    fdd4:	686b      	ldr	r3, [r5, #4]
    fdd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    fdd8:	b193      	cbz	r3, fe00 <isr+0x38>
		return api->irq_rx_ready(dev);
    fdda:	4628      	mov	r0, r5
    fddc:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
    fdde:	b178      	cbz	r0, fe00 <isr+0x38>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    fde0:	4f3a      	ldr	r7, [pc, #232]	; (fecc <isr+0x104>)
		if (at_cmd_len > 0) {
    fde2:	4c3b      	ldr	r4, [pc, #236]	; (fed0 <isr+0x108>)
    fde4:	463e      	mov	r6, r7
    fde6:	e8d7 3faf 	lda	r3, [r7]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
    fdea:	07db      	lsls	r3, r3, #31
    fdec:	d408      	bmi.n	fe00 <isr+0x38>
	if (api->fifo_read) {
    fdee:	686b      	ldr	r3, [r5, #4]
    fdf0:	699b      	ldr	r3, [r3, #24]
    fdf2:	b12b      	cbz	r3, fe00 <isr+0x38>
		return api->fifo_read(dev, rx_data, size);
    fdf4:	2201      	movs	r2, #1
    fdf6:	f10d 0107 	add.w	r1, sp, #7
    fdfa:	4628      	mov	r0, r5
    fdfc:	4798      	blx	r3
    fdfe:	b908      	cbnz	r0, fe04 <isr+0x3c>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
    fe00:	b003      	add	sp, #12
    fe02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uart_rx_handler(character);
    fe04:	f89d 3007 	ldrb.w	r3, [sp, #7]
	switch (character) {
    fe08:	2b08      	cmp	r3, #8
    fe0a:	d001      	beq.n	fe10 <isr+0x48>
    fe0c:	2b7f      	cmp	r3, #127	; 0x7f
    fe0e:	d105      	bne.n	fe1c <isr+0x54>
		if (at_cmd_len > 0) {
    fe10:	6823      	ldr	r3, [r4, #0]
    fe12:	2b00      	cmp	r3, #0
    fe14:	d0e7      	beq.n	fde6 <isr+0x1e>
			at_cmd_len--;
    fe16:	3b01      	subs	r3, #1
    fe18:	6023      	str	r3, [r4, #0]
    fe1a:	e7e4      	b.n	fde6 <isr+0x1e>
	if (!inside_quotes) {
    fe1c:	492d      	ldr	r1, [pc, #180]	; (fed4 <isr+0x10c>)
    fe1e:	780a      	ldrb	r2, [r1, #0]
    fe20:	2a00      	cmp	r2, #0
    fe22:	d140      	bne.n	fea6 <isr+0xde>
		switch (character) {
    fe24:	2b0a      	cmp	r3, #10
    fe26:	d031      	beq.n	fe8c <isr+0xc4>
    fe28:	2b0d      	cmp	r3, #13
    fe2a:	d025      	beq.n	fe78 <isr+0xb0>
    fe2c:	2b00      	cmp	r3, #0
    fe2e:	d138      	bne.n	fea2 <isr+0xda>
			if (term_mode == MODE_NULL_TERM) {
    fe30:	4b29      	ldr	r3, [pc, #164]	; (fed8 <isr+0x110>)
    fe32:	781b      	ldrb	r3, [r3, #0]
    fe34:	2b00      	cmp	r3, #0
    fe36:	d1d6      	bne.n	fde6 <isr+0x1e>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
    fe38:	2300      	movs	r3, #0
    fe3a:	6820      	ldr	r0, [r4, #0]
    fe3c:	4a27      	ldr	r2, [pc, #156]	; (fedc <isr+0x114>)
	inside_quotes = false;
    fe3e:	700b      	strb	r3, [r1, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
    fe40:	5413      	strb	r3, [r2, r0]
	cr_state = false;
    fe42:	4827      	ldr	r0, [pc, #156]	; (fee0 <isr+0x118>)
	at_cmd_len = 0;
    fe44:	6023      	str	r3, [r4, #0]
	cr_state = false;
    fe46:	7003      	strb	r3, [r0, #0]
	if (at_buf[0]) {
    fe48:	7813      	ldrb	r3, [r2, #0]
    fe4a:	2b00      	cmp	r3, #0
    fe4c:	d0cb      	beq.n	fde6 <isr+0x1e>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
    fe4e:	4b25      	ldr	r3, [pc, #148]	; (fee4 <isr+0x11c>)
    fe50:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
    fe52:	6843      	ldr	r3, [r0, #4]
    fe54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    fe56:	b103      	cbz	r3, fe5a <isr+0x92>
		api->irq_rx_disable(dev);
    fe58:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    fe5a:	e8d6 3fef 	ldaex	r3, [r6]
    fe5e:	f043 0201 	orr.w	r2, r3, #1
    fe62:	e8c6 2fe1 	stlex	r1, r2, [r6]
    fe66:	2900      	cmp	r1, #0
    fe68:	d1f7      	bne.n	fe5a <isr+0x92>
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    fe6a:	07da      	lsls	r2, r3, #31
    fe6c:	d4bb      	bmi.n	fde6 <isr+0x1e>
		k_queue_append(&work_q->queue, work);
    fe6e:	491e      	ldr	r1, [pc, #120]	; (fee8 <isr+0x120>)
    fe70:	481e      	ldr	r0, [pc, #120]	; (feec <isr+0x124>)
    fe72:	f013 ff90 	bl	23d96 <k_queue_append>
    fe76:	e7b6      	b.n	fde6 <isr+0x1e>
			if (term_mode == MODE_CR) {
    fe78:	4b17      	ldr	r3, [pc, #92]	; (fed8 <isr+0x110>)
    fe7a:	781b      	ldrb	r3, [r3, #0]
    fe7c:	2b01      	cmp	r3, #1
    fe7e:	d0db      	beq.n	fe38 <isr+0x70>
			if (term_mode == MODE_CR_LF) {
    fe80:	2b03      	cmp	r3, #3
    fe82:	d1b0      	bne.n	fde6 <isr+0x1e>
				cr_state = true;
    fe84:	2201      	movs	r2, #1
    fe86:	4b16      	ldr	r3, [pc, #88]	; (fee0 <isr+0x118>)
    fe88:	701a      	strb	r2, [r3, #0]
    fe8a:	e7ac      	b.n	fde6 <isr+0x1e>
			if (term_mode == MODE_LF) {
    fe8c:	4b12      	ldr	r3, [pc, #72]	; (fed8 <isr+0x110>)
    fe8e:	781b      	ldrb	r3, [r3, #0]
    fe90:	2b02      	cmp	r3, #2
    fe92:	d0d1      	beq.n	fe38 <isr+0x70>
			if (term_mode == MODE_CR_LF && cr_state) {
    fe94:	2b03      	cmp	r3, #3
    fe96:	d1a6      	bne.n	fde6 <isr+0x1e>
    fe98:	4b11      	ldr	r3, [pc, #68]	; (fee0 <isr+0x118>)
    fe9a:	781b      	ldrb	r3, [r3, #0]
    fe9c:	2b00      	cmp	r3, #0
    fe9e:	d1cb      	bne.n	fe38 <isr+0x70>
    fea0:	e7a1      	b.n	fde6 <isr+0x1e>
		cr_state = false;
    fea2:	480f      	ldr	r0, [pc, #60]	; (fee0 <isr+0x118>)
    fea4:	7002      	strb	r2, [r0, #0]
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
    fea6:	f8d4 c000 	ldr.w	ip, [r4]
    feaa:	f10c 0001 	add.w	r0, ip, #1
    feae:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    feb2:	d298      	bcs.n	fde6 <isr+0x1e>
	at_buf[at_cmd_len] = character;
    feb4:	f8df e024 	ldr.w	lr, [pc, #36]	; fedc <isr+0x114>
	if (character == '"') {
    feb8:	2b22      	cmp	r3, #34	; 0x22
	at_buf[at_cmd_len] = character;
    feba:	f80e 300c 	strb.w	r3, [lr, ip]
	at_cmd_len++;
    febe:	6020      	str	r0, [r4, #0]
	if (character == '"') {
    fec0:	d191      	bne.n	fde6 <isr+0x1e>
	if (!inside_quotes) {
    fec2:	f082 0201 	eor.w	r2, r2, #1
		inside_quotes = !inside_quotes;
    fec6:	700a      	strb	r2, [r1, #0]
    fec8:	e78d      	b.n	fde6 <isr+0x1e>
    feca:	bf00      	nop
    fecc:	200201a0 	.word	0x200201a0
    fed0:	200200d0 	.word	0x200200d0
    fed4:	20026bfd 	.word	0x20026bfd
    fed8:	20026bfe 	.word	0x20026bfe
    fedc:	20025bfc 	.word	0x20025bfc
    fee0:	20026bfc 	.word	0x20026bfc
    fee4:	200201a4 	.word	0x200201a4
    fee8:	20020198 	.word	0x20020198
    feec:	200200d4 	.word	0x200200d4

0000fef0 <at_host_init>:

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
    fef0:	2201      	movs	r2, #1
    fef2:	4b25      	ldr	r3, [pc, #148]	; (ff88 <at_host_init+0x98>)
{
    fef4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
    fef6:	4925      	ldr	r1, [pc, #148]	; (ff8c <at_host_init+0x9c>)
    fef8:	2000      	movs	r0, #0
		term_mode = mode;
    fefa:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
    fefc:	f7ff feda 	bl	fcb4 <at_notif_register_handler>
	if (err != 0) {
    ff00:	4605      	mov	r5, r0
    ff02:	bb20      	cbnz	r0, ff4e <at_host_init+0x5e>
    ff04:	4822      	ldr	r0, [pc, #136]	; (ff90 <at_host_init+0xa0>)
    ff06:	f00f f87d 	bl	1f004 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
    ff0a:	4c22      	ldr	r4, [pc, #136]	; (ff94 <at_host_init+0xa4>)
    ff0c:	6020      	str	r0, [r4, #0]
	if (uart_dev == NULL) {
    ff0e:	b1e0      	cbz	r0, ff4a <at_host_init+0x5a>
	return z_impl_k_uptime_get();
    ff10:	f013 ffde 	bl	23ed0 <z_impl_k_uptime_get>
    ff14:	4606      	mov	r6, r0
		err = uart_err_check(uart_dev);
    ff16:	6820      	ldr	r0, [r4, #0]
	if (api->err_check != NULL) {
    ff18:	6843      	ldr	r3, [r0, #4]
    ff1a:	689b      	ldr	r3, [r3, #8]
    ff1c:	b1d3      	cbz	r3, ff54 <at_host_init+0x64>
		return api->err_check(dev);
    ff1e:	4798      	blx	r3
		if (err) {
    ff20:	b1c0      	cbz	r0, ff54 <at_host_init+0x64>
    ff22:	f013 ffd5 	bl	23ed0 <z_impl_k_uptime_get>
			if (k_uptime_get_32() - start_time >
    ff26:	1b80      	subs	r0, r0, r6
    ff28:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    ff2c:	d80d      	bhi.n	ff4a <at_host_init+0x5a>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
    ff2e:	6820      	ldr	r0, [r4, #0]
	if (api->fifo_read) {
    ff30:	6843      	ldr	r3, [r0, #4]
    ff32:	699b      	ldr	r3, [r3, #24]
    ff34:	b12b      	cbz	r3, ff42 <at_host_init+0x52>
		return api->fifo_read(dev, rx_data, size);
    ff36:	2201      	movs	r2, #1
    ff38:	f10d 0107 	add.w	r1, sp, #7
    ff3c:	4798      	blx	r3
    ff3e:	2800      	cmp	r0, #0
    ff40:	d1f5      	bne.n	ff2e <at_host_init+0x3e>
	return z_impl_k_sleep(ms);
    ff42:	200a      	movs	r0, #10
    ff44:	f013 ff74 	bl	23e30 <z_impl_k_sleep>
    ff48:	e7e5      	b.n	ff16 <at_host_init+0x26>

	/* Initialize the UART module */
	err = at_uart_init(uart_dev_name);
	if (err) {
		LOG_ERR("UART could not be initialized: %d", err);
		return -EFAULT;
    ff4a:	f06f 050d 	mvn.w	r5, #13
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
    ff4e:	4628      	mov	r0, r5
    ff50:	b002      	add	sp, #8
    ff52:	bd70      	pop	{r4, r5, r6, pc}
	uart_irq_callback_set(uart_dev, isr);
    ff54:	6822      	ldr	r2, [r4, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    ff56:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    ff58:	b123      	cbz	r3, ff64 <at_host_init+0x74>
    ff5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    ff5c:	b113      	cbz	r3, ff64 <at_host_init+0x74>
		api->irq_callback_set(dev, cb, user_data);
    ff5e:	490e      	ldr	r1, [pc, #56]	; (ff98 <at_host_init+0xa8>)
    ff60:	4610      	mov	r0, r2
    ff62:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    ff64:	2200      	movs	r2, #0
    ff66:	4b0d      	ldr	r3, [pc, #52]	; (ff9c <at_host_init+0xac>)
    ff68:	490d      	ldr	r1, [pc, #52]	; (ffa0 <at_host_init+0xb0>)
    ff6a:	601a      	str	r2, [r3, #0]
    ff6c:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
    ff70:	480c      	ldr	r0, [pc, #48]	; (ffa4 <at_host_init+0xb4>)
    ff72:	230a      	movs	r3, #10
    ff74:	f44f 7200 	mov.w	r2, #512	; 0x200
    ff78:	490b      	ldr	r1, [pc, #44]	; (ffa8 <at_host_init+0xb8>)
    ff7a:	f011 faf3 	bl	21564 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
    ff7e:	6820      	ldr	r0, [r4, #0]
    ff80:	f013 fec5 	bl	23d0e <z_impl_uart_irq_rx_enable>
	return err;
    ff84:	e7e3      	b.n	ff4e <at_host_init+0x5e>
    ff86:	bf00      	nop
    ff88:	20026bfe 	.word	0x20026bfe
    ff8c:	00023d19 	.word	0x00023d19
    ff90:	0002567d 	.word	0x0002567d
    ff94:	200201a4 	.word	0x200201a4
    ff98:	0000fdc9 	.word	0x0000fdc9
    ff9c:	20020198 	.word	0x20020198
    ffa0:	0000fd45 	.word	0x0000fd45
    ffa4:	200200d4 	.word	0x200200d4
    ffa8:	20026d48 	.word	0x20026d48

0000ffac <abi_getter>:
extern const struct fw_info_abi * const _ext_abis_start[];
extern const u32_t _ext_abis_size;
__noinit fw_info_abi_getter abi_getter_in;

int abi_getter(u32_t id, u32_t index, const struct fw_info_abi **abi)
{
    ffac:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!abi) {
    ffae:	b1da      	cbz	r2, ffe8 <abi_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    ffb0:	2300      	movs	r3, #0
	bool id_found = false;
    ffb2:	461c      	mov	r4, r3
    ffb4:	4d0e      	ldr	r5, [pc, #56]	; (fff0 <abi_getter+0x44>)
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    ffb6:	4f0f      	ldr	r7, [pc, #60]	; (fff4 <abi_getter+0x48>)
    ffb8:	42bb      	cmp	r3, r7
    ffba:	d306      	bcc.n	ffca <abi_getter+0x1e>
				*abi = ext_abi;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
    ffbc:	2c00      	cmp	r4, #0
    ffbe:	bf14      	ite	ne
    ffc0:	f06f 0008 	mvnne.w	r0, #8
    ffc4:	f06f 0001 	mvneq.w	r0, #1
    ffc8:	e009      	b.n	ffde <abi_getter+0x32>
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
    ffca:	f855 6b04 	ldr.w	r6, [r5], #4
		if (ext_abi->abi_id == id) {
    ffce:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    ffd2:	4560      	cmp	r0, ip
    ffd4:	d106      	bne.n	ffe4 <abi_getter+0x38>
			if (index-- == 0) {
    ffd6:	1e4c      	subs	r4, r1, #1
    ffd8:	b911      	cbnz	r1, ffe0 <abi_getter+0x34>
				return 0;
    ffda:	4608      	mov	r0, r1
				*abi = ext_abi;
    ffdc:	6016      	str	r6, [r2, #0]
}
    ffde:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
    ffe0:	4621      	mov	r1, r4
			id_found = true;
    ffe2:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    ffe4:	3301      	adds	r3, #1
    ffe6:	e7e7      	b.n	ffb8 <abi_getter+0xc>
		return -EFAULT;
    ffe8:	f06f 000d 	mvn.w	r0, #13
    ffec:	e7f7      	b.n	ffde <abi_getter+0x32>
    ffee:	bf00      	nop
    fff0:	000265e8 	.word	0x000265e8
    fff4:	00000000 	.word	0x00000000

0000fff8 <close>:

	return socket_ops->socket(family, type, proto);
}

static inline int close(int sock)
{
    fff8:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
    fffa:	4c10      	ldr	r4, [pc, #64]	; (1003c <close+0x44>)
{
    fffc:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
    fffe:	6823      	ldr	r3, [r4, #0]
   10000:	b94b      	cbnz	r3, 10016 <close+0x1e>
   10002:	490f      	ldr	r1, [pc, #60]	; (10040 <close+0x48>)
   10004:	480f      	ldr	r0, [pc, #60]	; (10044 <close+0x4c>)
   10006:	2321      	movs	r3, #33	; 0x21
   10008:	4a0f      	ldr	r2, [pc, #60]	; (10048 <close+0x50>)
   1000a:	f012 fe90 	bl	22d2e <printk>
   1000e:	2121      	movs	r1, #33	; 0x21
   10010:	480d      	ldr	r0, [pc, #52]	; (10048 <close+0x50>)
   10012:	f012 fe99 	bl	22d48 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   10016:	6823      	ldr	r3, [r4, #0]
   10018:	685b      	ldr	r3, [r3, #4]
   1001a:	b94b      	cbnz	r3, 10030 <close+0x38>
   1001c:	490b      	ldr	r1, [pc, #44]	; (1004c <close+0x54>)
   1001e:	4809      	ldr	r0, [pc, #36]	; (10044 <close+0x4c>)
   10020:	2322      	movs	r3, #34	; 0x22
   10022:	4a09      	ldr	r2, [pc, #36]	; (10048 <close+0x50>)
   10024:	f012 fe83 	bl	22d2e <printk>
   10028:	2122      	movs	r1, #34	; 0x22
   1002a:	4807      	ldr	r0, [pc, #28]	; (10048 <close+0x50>)
   1002c:	f012 fe8c 	bl	22d48 <assert_post_action>

	return socket_ops->close(sock);
   10030:	6823      	ldr	r3, [r4, #0]
   10032:	4628      	mov	r0, r5
}
   10034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   10038:	685b      	ldr	r3, [r3, #4]
   1003a:	4718      	bx	r3
   1003c:	20020008 	.word	0x20020008
   10040:	00025e06 	.word	0x00025e06
   10044:	000255f3 	.word	0x000255f3
   10048:	00025ddd 	.word	0x00025ddd
   1004c:	00025e11 	.word	0x00025e11

00010050 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   10050:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   10052:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   10054:	b118      	cbz	r0, 1005e <callback_worker+0xe>
		data->callback(data->data);
   10056:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   1005a:	300c      	adds	r0, #12
   1005c:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   1005e:	a901      	add	r1, sp, #4
   10060:	4802      	ldr	r0, [pc, #8]	; (1006c <callback_worker+0x1c>)
   10062:	f00f f9c5 	bl	1f3f0 <k_mem_slab_free>
}
   10066:	b003      	add	sp, #12
   10068:	f85d fb04 	ldr.w	pc, [sp], #4
   1006c:	2002a300 	.word	0x2002a300

00010070 <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   10070:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10074:	4607      	mov	r7, r0
   10076:	460d      	mov	r5, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   10078:	f012 ffd8 	bl	2302c <strlen>
}

static inline ssize_t send(int sock, const void *buf, size_t len,
			   int flags)
{
	__ASSERT_NO_MSG(socket_ops);
   1007c:	4c1e      	ldr	r4, [pc, #120]	; (100f8 <at_write+0x88>)
	struct return_state_object ret;

	LOG_DBG("Sending command %s", log_strdup(cmd));

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   1007e:	4b1f      	ldr	r3, [pc, #124]	; (100fc <at_write+0x8c>)
	int bytes_to_send = strlen(cmd);
   10080:	4680      	mov	r8, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   10082:	681e      	ldr	r6, [r3, #0]
   10084:	6823      	ldr	r3, [r4, #0]
   10086:	b94b      	cbnz	r3, 1009c <at_write+0x2c>
   10088:	491d      	ldr	r1, [pc, #116]	; (10100 <at_write+0x90>)
   1008a:	481e      	ldr	r0, [pc, #120]	; (10104 <at_write+0x94>)
   1008c:	237e      	movs	r3, #126	; 0x7e
   1008e:	4a1e      	ldr	r2, [pc, #120]	; (10108 <at_write+0x98>)
   10090:	f012 fe4d 	bl	22d2e <printk>
   10094:	217e      	movs	r1, #126	; 0x7e
   10096:	481c      	ldr	r0, [pc, #112]	; (10108 <at_write+0x98>)
   10098:	f012 fe56 	bl	22d48 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   1009c:	6823      	ldr	r3, [r4, #0]
   1009e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   100a0:	b94b      	cbnz	r3, 100b6 <at_write+0x46>
   100a2:	491a      	ldr	r1, [pc, #104]	; (1010c <at_write+0x9c>)
   100a4:	4817      	ldr	r0, [pc, #92]	; (10104 <at_write+0x94>)
   100a6:	237f      	movs	r3, #127	; 0x7f
   100a8:	4a17      	ldr	r2, [pc, #92]	; (10108 <at_write+0x98>)
   100aa:	f012 fe40 	bl	22d2e <printk>
   100ae:	217f      	movs	r1, #127	; 0x7f
   100b0:	4815      	ldr	r0, [pc, #84]	; (10108 <at_write+0x98>)
   100b2:	f012 fe49 	bl	22d48 <assert_post_action>

	return socket_ops->send(sock, buf, len, flags);
   100b6:	6823      	ldr	r3, [r4, #0]
   100b8:	4642      	mov	r2, r8
   100ba:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   100bc:	4639      	mov	r1, r7
   100be:	2300      	movs	r3, #0
   100c0:	4630      	mov	r0, r6
   100c2:	47a0      	blx	r4

	if (bytes_sent == -1) {
   100c4:	3001      	adds	r0, #1
   100c6:	d10f      	bne.n	100e8 <at_write+0x78>
	if (z_syscall_trap()) {
		return (int *) z_arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   100c8:	f00e ffc2 	bl	1f050 <z_impl_z_errno>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
		ret.code  = -errno;
   100cc:	6803      	ldr	r3, [r0, #0]
   100ce:	425b      	negs	r3, r3
   100d0:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
   100d2:	2301      	movs	r3, #1
   100d4:	f88d 3004 	strb.w	r3, [sp, #4]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
   100d8:	b115      	cbz	r5, 100e0 <at_write+0x70>
		*state = ret.state;
   100da:	f89d 3004 	ldrb.w	r3, [sp, #4]
   100de:	702b      	strb	r3, [r5, #0]
	}

	return ret.code;
}
   100e0:	9800      	ldr	r0, [sp, #0]
   100e2:	b002      	add	sp, #8
   100e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (z_syscall_trap()) {
		return (int) z_arch_syscall_invoke3(*(u32_t *)&q, *(u32_t *)&data, *(u32_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(q, data, timeout);
   100e8:	f04f 32ff 	mov.w	r2, #4294967295
   100ec:	4669      	mov	r1, sp
   100ee:	4808      	ldr	r0, [pc, #32]	; (10110 <at_write+0xa0>)
   100f0:	f00f fb8e 	bl	1f810 <z_impl_k_msgq_get>
   100f4:	e7f0      	b.n	100d8 <at_write+0x68>
   100f6:	bf00      	nop
   100f8:	20020008 	.word	0x20020008
   100fc:	200201a8 	.word	0x200201a8
   10100:	00025e06 	.word	0x00025e06
   10104:	000255f3 	.word	0x000255f3
   10108:	00025ddd 	.word	0x00025ddd
   1010c:	00025dcc 	.word	0x00025dcc
   10110:	2002a378 	.word	0x2002a378

00010114 <open_socket>:
{
   10114:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(socket_ops);
   10116:	4c16      	ldr	r4, [pc, #88]	; (10170 <open_socket+0x5c>)
   10118:	6823      	ldr	r3, [r4, #0]
   1011a:	b94b      	cbnz	r3, 10130 <open_socket+0x1c>
   1011c:	4915      	ldr	r1, [pc, #84]	; (10174 <open_socket+0x60>)
   1011e:	4816      	ldr	r0, [pc, #88]	; (10178 <open_socket+0x64>)
   10120:	2319      	movs	r3, #25
   10122:	4a16      	ldr	r2, [pc, #88]	; (1017c <open_socket+0x68>)
   10124:	f012 fe03 	bl	22d2e <printk>
   10128:	2119      	movs	r1, #25
   1012a:	4814      	ldr	r0, [pc, #80]	; (1017c <open_socket+0x68>)
   1012c:	f012 fe0c 	bl	22d48 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   10130:	6823      	ldr	r3, [r4, #0]
   10132:	681b      	ldr	r3, [r3, #0]
   10134:	b94b      	cbnz	r3, 1014a <open_socket+0x36>
   10136:	4912      	ldr	r1, [pc, #72]	; (10180 <open_socket+0x6c>)
   10138:	480f      	ldr	r0, [pc, #60]	; (10178 <open_socket+0x64>)
   1013a:	231a      	movs	r3, #26
   1013c:	4a0f      	ldr	r2, [pc, #60]	; (1017c <open_socket+0x68>)
   1013e:	f012 fdf6 	bl	22d2e <printk>
   10142:	211a      	movs	r1, #26
   10144:	480d      	ldr	r0, [pc, #52]	; (1017c <open_socket+0x68>)
   10146:	f012 fdff 	bl	22d48 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   1014a:	6823      	ldr	r3, [r4, #0]
   1014c:	f240 2201 	movw	r2, #513	; 0x201
   10150:	681b      	ldr	r3, [r3, #0]
   10152:	2100      	movs	r1, #0
   10154:	2066      	movs	r0, #102	; 0x66
   10156:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, 0, NPROTO_AT);
   10158:	4b0a      	ldr	r3, [pc, #40]	; (10184 <open_socket+0x70>)
   1015a:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   1015c:	3001      	adds	r0, #1
   1015e:	d104      	bne.n	1016a <open_socket+0x56>
   10160:	f00e ff76 	bl	1f050 <z_impl_z_errno>
		return -errno;
   10164:	6800      	ldr	r0, [r0, #0]
   10166:	4240      	negs	r0, r0
}
   10168:	bd10      	pop	{r4, pc}
	return 0;
   1016a:	2000      	movs	r0, #0
   1016c:	e7fc      	b.n	10168 <open_socket+0x54>
   1016e:	bf00      	nop
   10170:	20020008 	.word	0x20020008
   10174:	00025e06 	.word	0x00025e06
   10178:	000255f3 	.word	0x000255f3
   1017c:	00025ddd 	.word	0x00025ddd
   10180:	00025e23 	.word	0x00025e23
   10184:	200201a8 	.word	0x200201a8

00010188 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   10188:	b510      	push	{r4, lr}
   1018a:	b086      	sub	sp, #24
	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   1018c:	f7ff ffc2 	bl	10114 <open_socket>
	if (err) {
   10190:	4604      	mov	r4, r0
   10192:	b968      	cbnz	r0, 101b0 <at_cmd_driver_init+0x28>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10194:	230a      	movs	r3, #10
   10196:	e9cd 0004 	strd	r0, r0, [sp, #16]
   1019a:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1019e:	e9cd 0000 	strd	r0, r0, [sp]
   101a2:	4b05      	ldr	r3, [pc, #20]	; (101b8 <at_cmd_driver_init+0x30>)
   101a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   101a8:	4904      	ldr	r1, [pc, #16]	; (101bc <at_cmd_driver_init+0x34>)
   101aa:	4805      	ldr	r0, [pc, #20]	; (101c0 <at_cmd_driver_init+0x38>)
   101ac:	f011 f8f4 	bl	21398 <z_impl_k_thread_create>
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   101b0:	4620      	mov	r0, r4
   101b2:	b006      	add	sp, #24
   101b4:	bd10      	pop	{r4, pc}
   101b6:	bf00      	nop
   101b8:	000101c5 	.word	0x000101c5
   101bc:	20026f48 	.word	0x20026f48
   101c0:	200201bc 	.word	0x200201bc

000101c4 <socket_thread_fn>:
{
   101c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
		bytes_read = recv(common_socket_fd, item->data,
   101c8:	4e77      	ldr	r6, [pc, #476]	; (103a8 <socket_thread_fn+0x1e4>)
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   101ca:	f8df 8224 	ldr.w	r8, [pc, #548]	; 103f0 <socket_thread_fn+0x22c>
   101ce:	4637      	mov	r7, r6
   101d0:	f04f 32ff 	mov.w	r2, #4294967295
   101d4:	a901      	add	r1, sp, #4
   101d6:	4640      	mov	r0, r8
   101d8:	f00f f8a8 	bl	1f32c <k_mem_slab_alloc>
		ret.code  = 0;
   101dc:	2300      	movs	r3, #0
		item->callback = NULL;
   101de:	9d01      	ldr	r5, [sp, #4]
	__ASSERT_NO_MSG(socket_ops);
   101e0:	4c72      	ldr	r4, [pc, #456]	; (103ac <socket_thread_fn+0x1e8>)
   101e2:	f8c5 3a98 	str.w	r3, [r5, #2712]	; 0xa98
		ret.code  = 0;
   101e6:	9302      	str	r3, [sp, #8]
		ret.state = AT_CMD_OK;
   101e8:	f88d 300c 	strb.w	r3, [sp, #12]
   101ec:	6823      	ldr	r3, [r4, #0]
		bytes_read = recv(common_socket_fd, item->data,
   101ee:	f8d6 9000 	ldr.w	r9, [r6]
   101f2:	350c      	adds	r5, #12
   101f4:	b94b      	cbnz	r3, 1020a <socket_thread_fn+0x46>
   101f6:	496e      	ldr	r1, [pc, #440]	; (103b0 <socket_thread_fn+0x1ec>)
   101f8:	486e      	ldr	r0, [pc, #440]	; (103b4 <socket_thread_fn+0x1f0>)
   101fa:	2369      	movs	r3, #105	; 0x69
   101fc:	4a6e      	ldr	r2, [pc, #440]	; (103b8 <socket_thread_fn+0x1f4>)
   101fe:	f012 fd96 	bl	22d2e <printk>
   10202:	2169      	movs	r1, #105	; 0x69
   10204:	486c      	ldr	r0, [pc, #432]	; (103b8 <socket_thread_fn+0x1f4>)
   10206:	f012 fd9f 	bl	22d48 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   1020a:	6823      	ldr	r3, [r4, #0]
   1020c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1020e:	b94b      	cbnz	r3, 10224 <socket_thread_fn+0x60>
   10210:	496a      	ldr	r1, [pc, #424]	; (103bc <socket_thread_fn+0x1f8>)
   10212:	4868      	ldr	r0, [pc, #416]	; (103b4 <socket_thread_fn+0x1f0>)
   10214:	236a      	movs	r3, #106	; 0x6a
   10216:	4a68      	ldr	r2, [pc, #416]	; (103b8 <socket_thread_fn+0x1f4>)
   10218:	f012 fd89 	bl	22d2e <printk>
   1021c:	216a      	movs	r1, #106	; 0x6a
   1021e:	4866      	ldr	r0, [pc, #408]	; (103b8 <socket_thread_fn+0x1f4>)
   10220:	f012 fd92 	bl	22d48 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   10224:	6823      	ldr	r3, [r4, #0]
   10226:	f640 228c 	movw	r2, #2700	; 0xa8c
   1022a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1022c:	4629      	mov	r1, r5
   1022e:	2300      	movs	r3, #0
   10230:	4648      	mov	r0, r9
   10232:	47a0      	blx	r4
		if (bytes_read < 0) {
   10234:	2800      	cmp	r0, #0
   10236:	da2e      	bge.n	10296 <socket_thread_fn+0xd2>
			if ((close(common_socket_fd) == 0) &&
   10238:	6838      	ldr	r0, [r7, #0]
   1023a:	f7ff fedd 	bl	fff8 <close>
   1023e:	bb20      	cbnz	r0, 1028a <socket_thread_fn+0xc6>
			    (open_socket() == 0)) {
   10240:	f7ff ff68 	bl	10114 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   10244:	bb08      	cbnz	r0, 1028a <socket_thread_fn+0xc6>
				ret.state = AT_CMD_ERROR;
   10246:	2301      	movs	r3, #1
   10248:	f88d 300c 	strb.w	r3, [sp, #12]
   1024c:	f00e ff00 	bl	1f050 <z_impl_z_errno>
				ret.code  = -errno;
   10250:	6803      	ldr	r3, [r0, #0]
   10252:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   10254:	9302      	str	r3, [sp, #8]
		if (item->callback == NULL) {
   10256:	9901      	ldr	r1, [sp, #4]
   10258:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   1025c:	2b00      	cmp	r3, #0
   1025e:	d17a      	bne.n	10356 <socket_thread_fn+0x192>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   10260:	a901      	add	r1, sp, #4
   10262:	4640      	mov	r0, r8
   10264:	f00f f8c4 	bl	1f3f0 <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
   10268:	4b55      	ldr	r3, [pc, #340]	; (103c0 <socket_thread_fn+0x1fc>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   1026a:	689b      	ldr	r3, [r3, #8]
   1026c:	2b00      	cmp	r3, #0
   1026e:	d1af      	bne.n	101d0 <socket_thread_fn+0xc>
   10270:	f89d 200c 	ldrb.w	r2, [sp, #12]
   10274:	2a04      	cmp	r2, #4
   10276:	d0ab      	beq.n	101d0 <socket_thread_fn+0xc>
			current_cmd_handler = NULL;
   10278:	4a52      	ldr	r2, [pc, #328]	; (103c4 <socket_thread_fn+0x200>)
   1027a:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(q, data, timeout);
   1027c:	f04f 32ff 	mov.w	r2, #4294967295
   10280:	a902      	add	r1, sp, #8
   10282:	4851      	ldr	r0, [pc, #324]	; (103c8 <socket_thread_fn+0x204>)
   10284:	f00f fa1e 	bl	1f6c4 <z_impl_k_msgq_put>
   10288:	e7a2      	b.n	101d0 <socket_thread_fn+0xc>
			close(common_socket_fd);
   1028a:	6838      	ldr	r0, [r7, #0]
   1028c:	f7ff feb4 	bl	fff8 <close>
}
   10290:	b004      	add	sp, #16
   10292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (bytes_read == sizeof(item->data) ||
   10296:	f640 238c 	movw	r3, #2700	; 0xa8c
   1029a:	4298      	cmp	r0, r3
   1029c:	d007      	beq.n	102ae <socket_thread_fn+0xea>
   1029e:	f8dd 9004 	ldr.w	r9, [sp, #4]
			   item->data[bytes_read - 1] != '\0') {
   102a2:	4448      	add	r0, r9
		} else if (bytes_read == sizeof(item->data) ||
   102a4:	f890 a00b 	ldrb.w	sl, [r0, #11]
   102a8:	f1ba 0f00 	cmp.w	sl, #0
   102ac:	d002      	beq.n	102b4 <socket_thread_fn+0xf0>
			ret.code  = -ENOBUFS;
   102ae:	f06f 0336 	mvn.w	r3, #54	; 0x36
   102b2:	e7cf      	b.n	10254 <socket_thread_fn+0x90>
	ret->state = AT_CMD_NOTIFICATION;
   102b4:	2304      	movs	r3, #4
		payload_len = get_return_code(item->data, &ret);
   102b6:	f109 040c 	add.w	r4, r9, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   102ba:	4944      	ldr	r1, [pc, #272]	; (103cc <socket_thread_fn+0x208>)
   102bc:	4620      	mov	r0, r4
	ret->state = AT_CMD_NOTIFICATION;
   102be:	f88d 300c 	strb.w	r3, [sp, #12]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   102c2:	f012 fe88 	bl	22fd6 <strstr>
		if (tmpstr) {
   102c6:	4605      	mov	r5, r0
   102c8:	b1e8      	cbz	r0, 10306 <socket_thread_fn+0x142>
			ret->state = AT_CMD_OK;
   102ca:	f88d a00c 	strb.w	sl, [sp, #12]
			ret->code  = 0;
   102ce:	f8cd a008 	str.w	sl, [sp, #8]
		buf[new_len++] = '\0';
   102d2:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   102d4:	1b2a      	subs	r2, r5, r4
		buf[new_len++] = '\0';
   102d6:	3201      	adds	r2, #1
   102d8:	702b      	strb	r3, [r5, #0]
		if (ret.state != AT_CMD_NOTIFICATION) {
   102da:	f89d 300c 	ldrb.w	r3, [sp, #12]
   102de:	9901      	ldr	r1, [sp, #4]
   102e0:	2b04      	cmp	r3, #4
   102e2:	d04e      	beq.n	10382 <socket_thread_fn+0x1be>
			if ((response_buf_len > 0) &&
   102e4:	4d3a      	ldr	r5, [pc, #232]	; (103d0 <socket_thread_fn+0x20c>)
   102e6:	682b      	ldr	r3, [r5, #0]
   102e8:	2b00      	cmp	r3, #0
   102ea:	d052      	beq.n	10392 <socket_thread_fn+0x1ce>
			    (response_buf != NULL)) {
   102ec:	4c39      	ldr	r4, [pc, #228]	; (103d4 <socket_thread_fn+0x210>)
   102ee:	6820      	ldr	r0, [r4, #0]
			if ((response_buf_len > 0) &&
   102f0:	2800      	cmp	r0, #0
   102f2:	d04e      	beq.n	10392 <socket_thread_fn+0x1ce>
				if (response_buf_len > payload_len) {
   102f4:	4293      	cmp	r3, r2
   102f6:	d92a      	bls.n	1034e <socket_thread_fn+0x18a>
					memcpy(response_buf, item->data,
   102f8:	310c      	adds	r1, #12
   102fa:	f012 feb9 	bl	23070 <memcpy>
				response_buf_len = 0;
   102fe:	2300      	movs	r3, #0
   10300:	602b      	str	r3, [r5, #0]
				response_buf     = NULL;
   10302:	6023      	str	r3, [r4, #0]
				goto next;
   10304:	e7a7      	b.n	10256 <socket_thread_fn+0x92>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   10306:	4934      	ldr	r1, [pc, #208]	; (103d8 <socket_thread_fn+0x214>)
   10308:	4620      	mov	r0, r4
   1030a:	f012 fe64 	bl	22fd6 <strstr>
		if (tmpstr) {
   1030e:	4605      	mov	r5, r0
   10310:	b140      	cbz	r0, 10324 <socket_thread_fn+0x160>
			ret->state = AT_CMD_ERROR_CMS;
   10312:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   10314:	f109 0017 	add.w	r0, r9, #23
			ret->state = AT_CMD_ERROR_CME;
   10318:	f88d 300c 	strb.w	r3, [sp, #12]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   1031c:	f012 fdbf 	bl	22e9e <atoi>
   10320:	9002      	str	r0, [sp, #8]
			break;
   10322:	e7d6      	b.n	102d2 <socket_thread_fn+0x10e>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   10324:	492d      	ldr	r1, [pc, #180]	; (103dc <socket_thread_fn+0x218>)
   10326:	4620      	mov	r0, r4
   10328:	f012 fe55 	bl	22fd6 <strstr>
		if (tmpstr) {
   1032c:	4605      	mov	r5, r0
   1032e:	b108      	cbz	r0, 10334 <socket_thread_fn+0x170>
			ret->state = AT_CMD_ERROR_CME;
   10330:	2303      	movs	r3, #3
   10332:	e7ef      	b.n	10314 <socket_thread_fn+0x150>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   10334:	492a      	ldr	r1, [pc, #168]	; (103e0 <socket_thread_fn+0x21c>)
   10336:	4620      	mov	r0, r4
   10338:	f012 fe4d 	bl	22fd6 <strstr>
		if (tmpstr) {
   1033c:	4605      	mov	r5, r0
   1033e:	b368      	cbz	r0, 1039c <socket_thread_fn+0x1d8>
			ret->state = AT_CMD_ERROR;
   10340:	2301      	movs	r3, #1
   10342:	f88d 300c 	strb.w	r3, [sp, #12]
			ret->code  = -ENOEXEC;
   10346:	f06f 0307 	mvn.w	r3, #7
   1034a:	9302      	str	r3, [sp, #8]
			break;
   1034c:	e7c1      	b.n	102d2 <socket_thread_fn+0x10e>
					ret.code  = -EMSGSIZE;
   1034e:	f06f 0323 	mvn.w	r3, #35	; 0x23
   10352:	9302      	str	r3, [sp, #8]
   10354:	e7d3      	b.n	102fe <socket_thread_fn+0x13a>
   10356:	4b23      	ldr	r3, [pc, #140]	; (103e4 <socket_thread_fn+0x220>)
   10358:	2200      	movs	r2, #0
   1035a:	604b      	str	r3, [r1, #4]
   1035c:	460b      	mov	r3, r1
   1035e:	600a      	str	r2, [r1, #0]
   10360:	f843 2f08 	str.w	r2, [r3, #8]!
   10364:	e8d3 2fef 	ldaex	r2, [r3]
   10368:	f042 0001 	orr.w	r0, r2, #1
   1036c:	e8c3 0fe4 	stlex	r4, r0, [r3]
   10370:	2c00      	cmp	r4, #0
   10372:	d1f7      	bne.n	10364 <socket_thread_fn+0x1a0>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   10374:	07d3      	lsls	r3, r2, #31
   10376:	f53f af77 	bmi.w	10268 <socket_thread_fn+0xa4>
		k_queue_append(&work_q->queue, work);
   1037a:	481b      	ldr	r0, [pc, #108]	; (103e8 <socket_thread_fn+0x224>)
   1037c:	f013 fd0b 	bl	23d96 <k_queue_append>
   10380:	e772      	b.n	10268 <socket_thread_fn+0xa4>
		if (payload_len == 0) {
   10382:	2a00      	cmp	r2, #0
   10384:	f43f af67 	beq.w	10256 <socket_thread_fn+0x92>
			item->callback = notification_handler;
   10388:	4b18      	ldr	r3, [pc, #96]	; (103ec <socket_thread_fn+0x228>)
			item->callback = current_cmd_handler;
   1038a:	681b      	ldr	r3, [r3, #0]
   1038c:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
   10390:	e761      	b.n	10256 <socket_thread_fn+0x92>
		if (payload_len == 0) {
   10392:	2a00      	cmp	r2, #0
   10394:	f43f af5f 	beq.w	10256 <socket_thread_fn+0x92>
			item->callback = current_cmd_handler;
   10398:	4b0a      	ldr	r3, [pc, #40]	; (103c4 <socket_thread_fn+0x200>)
   1039a:	e7f6      	b.n	1038a <socket_thread_fn+0x1c6>
		new_len = strlen(buf) + 1;
   1039c:	4620      	mov	r0, r4
   1039e:	f012 fe45 	bl	2302c <strlen>
   103a2:	1c42      	adds	r2, r0, #1
   103a4:	e799      	b.n	102da <socket_thread_fn+0x116>
   103a6:	bf00      	nop
   103a8:	200201a8 	.word	0x200201a8
   103ac:	20020008 	.word	0x20020008
   103b0:	00025e06 	.word	0x00025e06
   103b4:	000255f3 	.word	0x000255f3
   103b8:	00025ddd 	.word	0x00025ddd
   103bc:	00025e36 	.word	0x00025e36
   103c0:	2002a338 	.word	0x2002a338
   103c4:	200201ac 	.word	0x200201ac
   103c8:	2002a378 	.word	0x2002a378
   103cc:	00025e47 	.word	0x00025e47
   103d0:	200201b8 	.word	0x200201b8
   103d4:	200201b4 	.word	0x200201b4
   103d8:	00025e4a 	.word	0x00025e4a
   103dc:	00025e56 	.word	0x00025e56
   103e0:	00025e62 	.word	0x00025e62
   103e4:	00010051 	.word	0x00010051
   103e8:	20025afc 	.word	0x20025afc
   103ec:	200201b0 	.word	0x200201b0
   103f0:	2002a300 	.word	0x2002a300

000103f4 <at_cmd_write>:
{
   103f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   103f8:	4605      	mov	r5, r0
   103fa:	4688      	mov	r8, r1
   103fc:	4617      	mov	r7, r2
   103fe:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   10400:	4c0a      	ldr	r4, [pc, #40]	; (1042c <at_cmd_write+0x38>)
   10402:	f04f 31ff 	mov.w	r1, #4294967295
   10406:	4620      	mov	r0, r4
   10408:	f010 fe82 	bl	21110 <z_impl_k_sem_take>
	response_buf     = buf;
   1040c:	4b08      	ldr	r3, [pc, #32]	; (10430 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   1040e:	4631      	mov	r1, r6
	response_buf     = buf;
   10410:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   10414:	4b07      	ldr	r3, [pc, #28]	; (10434 <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   10416:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   10418:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   1041a:	f7ff fe29 	bl	10070 <at_write>
   1041e:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   10420:	4620      	mov	r0, r4
   10422:	f010 fe2d 	bl	21080 <z_impl_k_sem_give>
}
   10426:	4628      	mov	r0, r5
   10428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1042c:	2002a338 	.word	0x2002a338
   10430:	200201b4 	.word	0x200201b4
   10434:	200201b8 	.word	0x200201b8

00010438 <at_cmd_set_notification_handler>:
{
   10438:	b538      	push	{r3, r4, r5, lr}
   1043a:	4605      	mov	r5, r0
	return z_impl_k_sem_take(sem, timeout);
   1043c:	4c06      	ldr	r4, [pc, #24]	; (10458 <at_cmd_set_notification_handler+0x20>)
   1043e:	f04f 31ff 	mov.w	r1, #4294967295
   10442:	4620      	mov	r0, r4
   10444:	f010 fe64 	bl	21110 <z_impl_k_sem_take>
	notification_handler = handler;
   10448:	4b04      	ldr	r3, [pc, #16]	; (1045c <at_cmd_set_notification_handler+0x24>)
   1044a:	601d      	str	r5, [r3, #0]
	z_impl_k_sem_give(sem);
   1044c:	4620      	mov	r0, r4
}
   1044e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10452:	f010 be15 	b.w	21080 <z_impl_k_sem_give>
   10456:	bf00      	nop
   10458:	2002a338 	.word	0x2002a338
   1045c:	200201b0 	.word	0x200201b0

00010460 <ip_client_event_handler>:
   10460:	1b08f850 	.word	0x1b08f850
   10464:	f0060c09 	.word	0xf0060c09
   10468:	bf00bb3d 	.word	0xbf00bb3d

0001046c <rpc_ip_client_init>:
   1046c:	f00b4801 	.word	0xf00b4801
   10470:	bf00ba9d 	.word	0xbf00ba9d
   10474:	00024398 	.word	0x00024398

00010478 <rpc_ip_client_request_alloc>:
   10478:	b5102300 	.word	0xb5102300
   1047c:	9301b082 	.word	0x9301b082
   10480:	4604b158 	.word	0x4604b158
   10484:	2004aa01 	.word	0x2004aa01
   10488:	fcc8f00b 	.word	0xfcc8f00b
   1048c:	9b01b918 	.word	0x9b01b918
   10490:	3308b10b 	.word	0x3308b10b
   10494:	b0026023 	.word	0xb0026023
   10498:	2007bd10 	.word	0x2007bd10
   1049c:	bd10b002 	.word	0xbd10b002

000104a0 <rpc_ip_client_request_send>:
   104a0:	4370f401 	.word	0x4370f401
   104a4:	4fe0f5b3 	.word	0x4fe0f5b3
   104a8:	b160d10b 	.word	0xb160d10b
   104ac:	f8304603 	.word	0xf8304603
   104b0:	20042c08 	.word	0x20042c08
   104b4:	4101ea42 	.word	0x4101ea42
   104b8:	1d08f843 	.word	0x1d08f843
   104bc:	f00b4619 	.word	0xf00b4619
   104c0:	200fbc95 	.word	0x200fbc95
   104c4:	20074770 	.word	0x20074770
   104c8:	bf004770 	.word	0xbf004770

000104cc <rpc_ip_client_message_free>:
   104cc:	f1a0b120 	.word	0xf1a0b120
   104d0:	20040108 	.word	0x20040108
   104d4:	bcd4f00b 	.word	0xbcd4f00b
   104d8:	47702007 	.word	0x47702007

000104dc <rpc_ip_client_data_free>:
   104dc:	4601b118 	.word	0x4601b118
   104e0:	f00b2004 	.word	0xf00b2004
   104e4:	2007bddf 	.word	0x2007bddf
   104e8:	bf004770 	.word	0xbf004770

000104ec <symbol_0001c77>:
   104ec:	4603b430 	.word	0x4603b430
   104f0:	f5b26800 	.word	0xf5b26800
   104f4:	eba03f80 	.word	0xeba03f80
   104f8:	d2140101 	.word	0xd2140101
   104fc:	dd512902 	.word	0xdd512902
   10500:	60191e41 	.word	0x60191e41
   10504:	2c01f800 	.word	0x2c01f800
   10508:	24826819 	.word	0x24826819
   1050c:	60181e48 	.word	0x60181e48
   10510:	0a122003 	.word	0x0a122003
   10514:	2c01f801 	.word	0x2c01f801
   10518:	1e51681a 	.word	0x1e51681a
   1051c:	f8026019 	.word	0xf8026019
   10520:	bc304c01 	.word	0xbc304c01
   10524:	f1b24770 	.word	0xf1b24770
   10528:	d21a7f80 	.word	0xd21a7f80
   1052c:	dd392903 	.word	0xdd392903
   10530:	1e412483 	.word	0x1e412483
   10534:	f8006019 	.word	0xf8006019
   10538:	68192c01 	.word	0x68192c01
   1053c:	1e4d0a10 	.word	0x1e4d0a10
   10540:	f801601d 	.word	0xf801601d
   10544:	68190c01 	.word	0x68190c01
   10548:	1e480c12 	.word	0x1e480c12
   1054c:	f8016018 	.word	0xf8016018
   10550:	681a2c01 	.word	0x681a2c01
   10554:	1e512004 	.word	0x1e512004
   10558:	f8026019 	.word	0xf8026019
   1055c:	bc304c01 	.word	0xbc304c01
   10560:	29044770 	.word	0x29044770
   10564:	2484dd1e 	.word	0x2484dd1e
   10568:	60191e41 	.word	0x60191e41
   1056c:	2c01f800 	.word	0x2c01f800
   10570:	0a106819 	.word	0x0a106819
   10574:	601d1e4d 	.word	0x601d1e4d
   10578:	0c01f801 	.word	0x0c01f801
   1057c:	0c106819 	.word	0x0c106819
   10580:	601d1e4d 	.word	0x601d1e4d
   10584:	0c01f801 	.word	0x0c01f801
   10588:	0e126819 	.word	0x0e126819
   1058c:	60181e48 	.word	0x60181e48
   10590:	2c01f801 	.word	0x2c01f801
   10594:	2005681a 	.word	0x2005681a
   10598:	60191e51 	.word	0x60191e51
   1059c:	4c01f802 	.word	0x4c01f802
   105a0:	4770bc30 	.word	0x4770bc30
   105a4:	006bf06f 	.word	0x006bf06f
   105a8:	bf00e7bb 	.word	0xbf00e7bb

000105ac <symbol_000646e>:
   105ac:	6804b430 	.word	0x6804b430
   105b0:	46032a7f 	.word	0x46032a7f
   105b4:	0101eba4 	.word	0x0101eba4
   105b8:	2900d808 	.word	0x2900d808
   105bc:	1e61dd6c 	.word	0x1e61dd6c
   105c0:	20016001 	.word	0x20016001
   105c4:	2c01f804 	.word	0x2c01f804
   105c8:	4770bc30 	.word	0x4770bc30
   105cc:	d80e2aff 	.word	0xd80e2aff
   105d0:	dd612901 	.word	0xdd612901
   105d4:	1e602181 	.word	0x1e602181
   105d8:	f8046018 	.word	0xf8046018
   105dc:	681a2c01 	.word	0x681a2c01
   105e0:	1e542002 	.word	0x1e542002
   105e4:	f802601c 	.word	0xf802601c
   105e8:	bc301c01 	.word	0xbc301c01
   105ec:	f5b24770 	.word	0xf5b24770
   105f0:	d31c3f80 	.word	0xd31c3f80
   105f4:	7f80f1b2 	.word	0x7f80f1b2
   105f8:	2903d22e 	.word	0x2903d22e
   105fc:	2583dd4c 	.word	0x2583dd4c
   10600:	60011e61 	.word	0x60011e61
   10604:	2c01f804 	.word	0x2c01f804
   10608:	0a106801 	.word	0x0a106801
   1060c:	601c1e4c 	.word	0x601c1e4c
   10610:	0c01f801 	.word	0x0c01f801
   10614:	0c126819 	.word	0x0c126819
   10618:	60181e48 	.word	0x60181e48
   1061c:	2c01f801 	.word	0x2c01f801
   10620:	2004681a 	.word	0x2004681a
   10624:	60191e51 	.word	0x60191e51
   10628:	5c01f802 	.word	0x5c01f802
   1062c:	2902e7cc 	.word	0x2902e7cc
   10630:	2582dd32 	.word	0x2582dd32
   10634:	60011e61 	.word	0x60011e61
   10638:	2c01f804 	.word	0x2c01f804
   1063c:	0a126801 	.word	0x0a126801
   10640:	60181e48 	.word	0x60181e48
   10644:	2c01f801 	.word	0x2c01f801
   10648:	2003681a 	.word	0x2003681a
   1064c:	60191e51 	.word	0x60191e51
   10650:	5c01f802 	.word	0x5c01f802
   10654:	4770bc30 	.word	0x4770bc30
   10658:	dd1d2904 	.word	0xdd1d2904
   1065c:	1e612584 	.word	0x1e612584
   10660:	f8046001 	.word	0xf8046001
   10664:	68012c01 	.word	0x68012c01
   10668:	1e4c0a10 	.word	0x1e4c0a10
   1066c:	f801601c 	.word	0xf801601c
   10670:	68190c01 	.word	0x68190c01
   10674:	1e4c0c10 	.word	0x1e4c0c10
   10678:	f801601c 	.word	0xf801601c
   1067c:	68190c01 	.word	0x68190c01
   10680:	1e480e12 	.word	0x1e480e12
   10684:	f8016018 	.word	0xf8016018
   10688:	681a2c01 	.word	0x681a2c01
   1068c:	1e512005 	.word	0x1e512005
   10690:	f8026019 	.word	0xf8026019
   10694:	e7975c01 	.word	0xe7975c01
   10698:	006bf06f 	.word	0x006bf06f
   1069c:	bf00e794 	.word	0xbf00e794

000106a0 <symbol_00036c0>:
   106a0:	1a596803 	.word	0x1a596803
   106a4:	dd052900 	.word	0xdd052900
   106a8:	60011e59 	.word	0x60011e59
   106ac:	f8032001 	.word	0xf8032001
   106b0:	47702c01 	.word	0x47702c01
   106b4:	006bf06f 	.word	0x006bf06f
   106b8:	bf004770 	.word	0xbf004770

000106bc <symbol_0008475>:
   106bc:	6805b5f8 	.word	0x6805b5f8
   106c0:	d83f42a9 	.word	0xd83f42a9
   106c4:	1a69460f 	.word	0x1a69460f
   106c8:	d83b428b 	.word	0xd83b428b
   106cc:	461c4606 	.word	0x461c4606
   106d0:	46111ae8 	.word	0x46111ae8
   106d4:	461a6030 	.word	0x461a6030
   106d8:	fccaf012 	.word	0xfccaf012
   106dc:	46202c00 	.word	0x46202c00
   106e0:	2c7fdb15 	.word	0x2c7fdb15
   106e4:	6833d814 	.word	0x6833d814
   106e8:	2a001bda 	.word	0x2a001bda
   106ec:	2001dd2a 	.word	0x2001dd2a
   106f0:	60321e5a 	.word	0x60321e5a
   106f4:	4c01f803 	.word	0x4c01f803
   106f8:	34016833 	.word	0x34016833
   106fc:	2f001bdf 	.word	0x2f001bdf
   10700:	2206dd20 	.word	0x2206dd20
   10704:	60311e59 	.word	0x60311e59
   10708:	f8034420 	.word	0xf8034420
   1070c:	bdf82c01 	.word	0xbdf82c01
   10710:	d80f2cff 	.word	0xd80f2cff
   10714:	1bda6833 	.word	0x1bda6833
   10718:	dd132a01 	.word	0xdd132a01
   1071c:	1e592281 	.word	0x1e592281
   10720:	f8036031 	.word	0xf8036031
   10724:	68334c01 	.word	0x68334c01
   10728:	1e592002 	.word	0x1e592002
   1072c:	f8036031 	.word	0xf8036031
   10730:	e7e12c01 	.word	0xe7e12c01
   10734:	46394622 	.word	0x46394622
   10738:	f7ff4630 	.word	0xf7ff4630
   1073c:	2800fed7 	.word	0x2800fed7
   10740:	bdf8dada 	.word	0xbdf8dada
   10744:	006bf06f 	.word	0x006bf06f
   10748:	bf00bdf8 	.word	0xbf00bdf8

0001074c <symbol_0002662>:
   1074c:	41f0e92d 	.word	0x41f0e92d
   10750:	8018f8dd 	.word	0x8018f8dd
   10754:	f1b86805 	.word	0xf1b86805
   10758:	d1130f00 	.word	0xd1130f00
   1075c:	2c001a6c 	.word	0x2c001a6c
   10760:	8087f340 	.word	0x8087f340
   10764:	60041e6c 	.word	0x60041e6c
   10768:	8c01f805 	.word	0x8c01f805
   1076c:	1a656804 	.word	0x1a656804
   10770:	dd7e2d00 	.word	0xdd7e2d00
   10774:	f04f2505 	.word	0xf04f2505
   10778:	1e660802 	.word	0x1e660802
   1077c:	f8046006 	.word	0xf8046006
   10780:	68055c01 	.word	0x68055c01
   10784:	d87442a9 	.word	0xd87442a9
   10788:	42a31a6c 	.word	0x42a31a6c
   1078c:	4606d871 	.word	0x4606d871
   10790:	1ae8461c 	.word	0x1ae8461c
   10794:	6030460f 	.word	0x6030460f
   10798:	461a4611 	.word	0x461a4611
   1079c:	fc68f012 	.word	0xfc68f012
   107a0:	46202c00 	.word	0x46202c00
   107a4:	2c7fdb2f 	.word	0x2c7fdb2f
   107a8:	6833d841 	.word	0x6833d841
   107ac:	2a001bda 	.word	0x2a001bda
   107b0:	2001dd5f 	.word	0x2001dd5f
   107b4:	60321e5a 	.word	0x60321e5a
   107b8:	4c01f803 	.word	0x4c01f803
   107bc:	34016833 	.word	0x34016833
   107c0:	2a001bda 	.word	0x2a001bda
   107c4:	2206dd55 	.word	0x2206dd55
   107c8:	1e594404 	.word	0x1e594404
   107cc:	60312c00 	.word	0x60312c00
   107d0:	f8034620 	.word	0xf8034620
   107d4:	db162c01 	.word	0xdb162c01
   107d8:	2c7f4444 	.word	0x2c7f4444
   107dc:	6833d815 	.word	0x6833d815
   107e0:	2a001bda 	.word	0x2a001bda
   107e4:	2001dd45 	.word	0x2001dd45
   107e8:	60321e5a 	.word	0x60321e5a
   107ec:	4c01f803 	.word	0x4c01f803
   107f0:	34016833 	.word	0x34016833
   107f4:	2f001bdf 	.word	0x2f001bdf
   107f8:	2230dd3b 	.word	0x2230dd3b
   107fc:	60311e59 	.word	0x60311e59
   10800:	f8034420 	.word	0xf8034420
   10804:	e8bd2c01 	.word	0xe8bd2c01
   10808:	2cff81f0 	.word	0x2cff81f0
   1080c:	6833d821 	.word	0x6833d821
   10810:	2a011bda 	.word	0x2a011bda
   10814:	2281dd2d 	.word	0x2281dd2d
   10818:	60311e59 	.word	0x60311e59
   1081c:	4c01f803 	.word	0x4c01f803
   10820:	20026833 	.word	0x20026833
   10824:	60311e59 	.word	0x60311e59
   10828:	2c01f803 	.word	0x2c01f803
   1082c:	2cffe7e0 	.word	0x2cffe7e0
   10830:	6833d817 	.word	0x6833d817
   10834:	2a011bda 	.word	0x2a011bda
   10838:	2281dd1b 	.word	0x2281dd1b
   1083c:	60311e59 	.word	0x60311e59
   10840:	4c01f803 	.word	0x4c01f803
   10844:	20026833 	.word	0x20026833
   10848:	60311e59 	.word	0x60311e59
   1084c:	2c01f803 	.word	0x2c01f803
   10850:	4622e7b4 	.word	0x4622e7b4
   10854:	46304639 	.word	0x46304639
   10858:	fe48f7ff 	.word	0xfe48f7ff
   1085c:	dbd22800 	.word	0xdbd22800
   10860:	4622e7c6 	.word	0x4622e7c6
   10864:	46304639 	.word	0x46304639
   10868:	fe40f7ff 	.word	0xfe40f7ff
   1086c:	daa52800 	.word	0xdaa52800
   10870:	f06fe7c9 	.word	0xf06fe7c9
   10874:	e7c6006b 	.word	0xe7c6006b

00010878 <symbol_0005bf5>:
   10878:	4ff0e92d 	.word	0x4ff0e92d
   1087c:	b0d72400 	.word	0xb0d72400
   10880:	73abf50d 	.word	0x73abf50d
   10884:	46914688 	.word	0x46914688
   10888:	4306e9cd 	.word	0x4306e9cd
   1088c:	f0014607 	.word	0xf0014607
   10890:	2802f95d 	.word	0x2802f95d
   10894:	2385d159 	.word	0x2385d159
   10898:	ae0b6878 	.word	0xae0b6878
   1089c:	46229301 	.word	0x46229301
   108a0:	0188f100 	.word	0x0188f100
   108a4:	ab0a9600 	.word	0xab0a9600
   108a8:	f004940a 	.word	0xf004940a
   108ac:	ad2dfbc5 	.word	0xad2dfbc5
   108b0:	b9684604 	.word	0xb9684604
   108b4:	42a89807 	.word	0x42a89807
   108b8:	9a0ad37f 	.word	0x9a0ad37f
   108bc:	42931b43 	.word	0x42931b43
   108c0:	1a83d37b 	.word	0x1a83d37b
   108c4:	46314618 	.word	0x46314618
   108c8:	f0129307 	.word	0xf0129307
   108cc:	9c0afbd1 	.word	0x9c0afbd1
   108d0:	db312c00 	.word	0xdb312c00
   108d4:	1b5a9b07 	.word	0x1b5a9b07
   108d8:	dd6e2a00 	.word	0xdd6e2a00
   108dc:	1e5a2100 	.word	0x1e5a2100
   108e0:	0a01f104 	.word	0x0a01f104
   108e4:	a8079207 	.word	0xa8079207
   108e8:	1c01f803 	.word	0x1c01f803
   108ec:	46294652 	.word	0x46294652
   108f0:	fe5cf7ff 	.word	0xfe5cf7ff
   108f4:	db1f1e04 	.word	0xdb1f1e04
   108f8:	46292203 	.word	0x46292203
   108fc:	f7ffa807 	.word	0xf7ffa807
   10900:	f1b0fecf 	.word	0xf1b0fecf
   10904:	db1b0b00 	.word	0xdb1b0b00
   10908:	f0014638 	.word	0xf0014638
   1090c:	aa08f91f 	.word	0xaa08f91f
   10910:	f00ba909 	.word	0xf00ba909
   10914:	4603fcd7 	.word	0x4603fcd7
   10918:	2b00b1c8 	.word	0x2b00b1c8
   1091c:	f1c3db50 	.word	0xf1c3db50
   10920:	a90602a2 	.word	0xa90602a2
   10924:	9101e9cd 	.word	0x9101e9cd
   10928:	8000f8cd 	.word	0x8000f8cd
   1092c:	4925442a 	.word	0x4925442a
   10930:	f0044825 	.word	0xf0044825
   10934:	4604ffa1 	.word	0x4604ffa1
   10938:	b0574620 	.word	0xb0574620
   1093c:	8ff0e8bd 	.word	0x8ff0e8bd
   10940:	4620465c 	.word	0x4620465c
   10944:	e8bdb057 	.word	0xe8bdb057
   10948:	4c208ff0 	.word	0x4c208ff0
   1094c:	9005e7f4 	.word	0x9005e7f4
   10950:	f0014638 	.word	0xf0014638
   10954:	2802f8fb 	.word	0x2802f8fb
   10958:	d01d9b05 	.word	0xd01d9b05
   1095c:	e9dd4618 	.word	0xe9dd4618
   10960:	90003208 	.word	0x90003208
   10964:	a8074629 	.word	0xa8074629
   10968:	fef0f7ff 	.word	0xfef0f7ff
   1096c:	db222800 	.word	0xdb222800
   10970:	44a34454 	.word	0x44a34454
   10974:	465a4483 	.word	0x465a4483
   10978:	a8074629 	.word	0xa8074629
   1097c:	fe16f7ff 	.word	0xfe16f7ff
   10980:	dbd91e04 	.word	0xdbd91e04
   10984:	2230a807 	.word	0x2230a807
   10988:	f7ff4629 	.word	0xf7ff4629
   1098c:	1e03fe89 	.word	0x1e03fe89
   10990:	44a3db16 	.word	0x44a3db16
   10994:	e7c0445b 	.word	0xe7c0445b
   10998:	4632687b 	.word	0x4632687b
   1099c:	a90a7818 	.word	0xa90a7818
   109a0:	fcacf00b 	.word	0xfcacf00b
   109a4:	6833b928 	.word	0x6833b928
   109a8:	46299a0a 	.word	0x46299a0a
   109ac:	f7ffa807 	.word	0xf7ffa807
   109b0:	2800fe85 	.word	0x2800fe85
   109b4:	4604dad3 	.word	0x4604dad3
   109b8:	f06fe7be 	.word	0xf06fe7be
   109bc:	e7bb046b 	.word	0xe7bb046b
   109c0:	e7b9461c 	.word	0xe7b9461c
   109c4:	000243a8 	.word	0x000243a8
   109c8:	000243c4 	.word	0x000243c4
   109cc:	ffffc680 	.word	0xffffc680

000109d0 <authenticated_atcmd_init>:
   109d0:	4c3bb5f0 	.word	0x4c3bb5f0
   109d4:	6826b0c7 	.word	0x6826b0c7
   109d8:	2701bb16 	.word	0x2701bb16
   109dc:	60274839 	.word	0x60274839
   109e0:	fb24f012 	.word	0xfb24f012
   109e4:	f5c04605 	.word	0xf5c04605
   109e8:	46317380 	.word	0x46317380
   109ec:	7280f44f 	.word	0x7280f44f
   109f0:	9302a806 	.word	0x9302a806
   109f4:	fb66f012 	.word	0xfb66f012
   109f8:	4932462a 	.word	0x4932462a
   109fc:	f012a806 	.word	0xf012a806
   10a00:	aa06fb37 	.word	0xaa06fb37
   10a04:	ab029700 	.word	0xab029700
   10a08:	2120442a 	.word	0x2120442a
   10a0c:	f00a482e 	.word	0xf00a482e
   10a10:	4606fed5 	.word	0x4606fed5
   10a14:	2300b138 	.word	0x2300b138
   10a18:	60232023 	.word	0x60232023
   10a1c:	bdf0b047 	.word	0xbdf0b047
   10a20:	b047200e 	.word	0xb047200e
   10a24:	2022bdf0 	.word	0x2022bdf0
   10a28:	60279b02 	.word	0x60279b02
   10a2c:	af06441d 	.word	0xaf06441d
   10a30:	5578ab06 	.word	0x5578ab06
   10a34:	f240442b 	.word	0xf240442b
   10a38:	21022201 	.word	0x21022201
   10a3c:	705e2066 	.word	0x705e2066
   10a40:	f9c0f000 	.word	0xf9c0f000
   10a44:	dbe61e07 	.word	0xdbe61e07
   10a48:	f0124820 	.word	0xf0124820
   10a4c:	4633faef 	.word	0x4633faef
   10a50:	491e4602 	.word	0x491e4602
   10a54:	6600e9cd 	.word	0x6600e9cd
   10a58:	f0004638 	.word	0xf0004638
   10a5c:	3502f95d 	.word	0x3502f95d
   10a60:	4633a903 	.word	0x4633a903
   10a64:	e9cd220a 	.word	0xe9cd220a
   10a68:	46386600 	.word	0x46386600
   10a6c:	fa3cf000 	.word	0xfa3cf000
   10a70:	6600e9cd 	.word	0x6600e9cd
   10a74:	462aa906 	.word	0x462aa906
   10a78:	46384633 	.word	0x46384633
   10a7c:	f94cf000 	.word	0xf94cf000
   10a80:	d00342a8 	.word	0xd00342a8
   10a84:	f0004638 	.word	0xf0004638
   10a88:	e7c4f9e7 	.word	0xe7c4f9e7
   10a8c:	6600e9cd 	.word	0x6600e9cd
   10a90:	220a4633 	.word	0x220a4633
   10a94:	4638a903 	.word	0x4638a903
   10a98:	fa26f000 	.word	0xfa26f000
   10a9c:	ddf12801 	.word	0xddf12801
   10aa0:	2202a803 	.word	0x2202a803
   10aa4:	f012490a 	.word	0xf012490a
   10aa8:	4605fad4 	.word	0x4605fad4
   10aac:	d1e92800 	.word	0xd1e92800
   10ab0:	46382302 	.word	0x46382302
   10ab4:	f0006023 	.word	0xf0006023
   10ab8:	4628f9cf 	.word	0x4628f9cf
   10abc:	bf00e7ae 	.word	0xbf00e7ae
   10ac0:	2002026c 	.word	0x2002026c
   10ac4:	000243e0 	.word	0x000243e0
   10ac8:	20026c08 	.word	0x20026c08
   10acc:	000243f0 	.word	0x000243f0
   10ad0:	00024400 	.word	0x00024400

00010ad4 <gnss_client_event_handler>:
   10ad4:	1b08f850 	.word	0x1b08f850
   10ad8:	f0060c09 	.word	0xf0060c09
   10adc:	bf00bda5 	.word	0xbf00bda5

00010ae0 <rpc_gnss_client_init>:
   10ae0:	f00a4801 	.word	0xf00a4801
   10ae4:	bf00bf63 	.word	0xbf00bf63
   10ae8:	00024488 	.word	0x00024488

00010aec <rpc_gnss_client_request_alloc>:
   10aec:	b5102300 	.word	0xb5102300
   10af0:	9301b082 	.word	0x9301b082
   10af4:	4604b158 	.word	0x4604b158
   10af8:	2007aa01 	.word	0x2007aa01
   10afc:	f98ef00b 	.word	0xf98ef00b
   10b00:	9b01b918 	.word	0x9b01b918
   10b04:	3308b10b 	.word	0x3308b10b
   10b08:	b0026023 	.word	0xb0026023
   10b0c:	2007bd10 	.word	0x2007bd10
   10b10:	bd10b002 	.word	0xbd10b002

00010b14 <rpc_gnss_client_request_send>:
   10b14:	4370f401 	.word	0x4370f401
   10b18:	5f80f5b3 	.word	0x5f80f5b3
   10b1c:	b160d10b 	.word	0xb160d10b
   10b20:	f8304603 	.word	0xf8304603
   10b24:	20072c08 	.word	0x20072c08
   10b28:	4101ea42 	.word	0x4101ea42
   10b2c:	1d08f843 	.word	0x1d08f843
   10b30:	f00b4619 	.word	0xf00b4619
   10b34:	200fb95b 	.word	0x200fb95b
   10b38:	20074770 	.word	0x20074770
   10b3c:	bf004770 	.word	0xbf004770

00010b40 <rpc_gnss_client_message_free>:
   10b40:	f1a0b120 	.word	0xf1a0b120
   10b44:	20070108 	.word	0x20070108
   10b48:	b99af00b 	.word	0xb99af00b
   10b4c:	47702007 	.word	0x47702007

00010b50 <rpc_gnss_client_data_free>:
   10b50:	4601b118 	.word	0x4601b118
   10b54:	f00b2007 	.word	0xf00b2007
   10b58:	2007baa5 	.word	0x2007baa5
   10b5c:	bf004770 	.word	0xbf004770

00010b60 <eckey_can_do>:
   10b60:	28023802 	.word	0x28023802
   10b64:	2000bf8c 	.word	0x2000bf8c
   10b68:	47702001 	.word	0x47702001

00010b6c <eckey_get_bitlen>:
   10b6c:	47706d80 	.word	0x47706d80

00010b70 <eckey_debug>:
   10b70:	4b032202 	.word	0x4b032202
   10b74:	60883088 	.word	0x60883088
   10b78:	604b700a 	.word	0x604b700a
   10b7c:	bf004770 	.word	0xbf004770
   10b80:	00024498 	.word	0x00024498

00010b84 <eckeydh_can_do>:
   10b84:	28013802 	.word	0x28013802
   10b88:	2000bf8c 	.word	0x2000bf8c
   10b8c:	47702001 	.word	0x47702001

00010b90 <eckey_free_wrap>:
   10b90:	4604b510 	.word	0x4604b510
   10b94:	fc48f003 	.word	0xfc48f003
   10b98:	e8bd4620 	.word	0xe8bd4620
   10b9c:	f00b4010 	.word	0xf00b4010
   10ba0:	bf00bfe9 	.word	0xbf00bfe9

00010ba4 <eckey_alloc_wrap>:
   10ba4:	21acb510 	.word	0x21acb510
   10ba8:	f00b2001 	.word	0xf00b2001
   10bac:	4604ffcf 	.word	0x4604ffcf
   10bb0:	f003b108 	.word	0xf003b108
   10bb4:	4620fbd3 	.word	0x4620fbd3
   10bb8:	bf00bd10 	.word	0xbf00bd10

00010bbc <eckey_check_pair>:
   10bbc:	bbacf004 	.word	0xbbacf004

00010bc0 <symbol_0005c7f>:
   10bc0:	4ff0e92d 	.word	0x4ff0e92d
   10bc4:	c024f8dd 	.word	0xc024f8dd
   10bc8:	0f00f1bc 	.word	0x0f00f1bc
   10bcc:	4c42d065 	.word	0x4c42d065
   10bd0:	540cfba4 	.word	0x540cfba4
   10bd4:	eb040864 	.word	0xeb040864
   10bd8:	45c40844 	.word	0x45c40844
   10bdc:	3401bf18 	.word	0x3401bf18
   10be0:	4f80f1b4 	.word	0x4f80f1b4
   10be4:	00a4d271 	.word	0x00a4d271
   10be8:	428c3401 	.word	0x428c3401
   10bec:	2800d869 	.word	0x2800d869
   10bf0:	f1b8d067 	.word	0xf1b8d067
   10bf4:	d0610f00 	.word	0xd0610f00
   10bf8:	27004686 	.word	0x27004686
   10bfc:	1cdc4e37 	.word	0x1cdc4e37
   10c00:	f8142500 	.word	0xf8142500
   10c04:	f8141c03 	.word	0xf8141c03
   10c08:	f8143c02 	.word	0xf8143c02
   10c0c:	ea4fbc01 	.word	0xea4fbc01
   10c10:	010909a1 	.word	0x010909a1
   10c14:	0130f001 	.word	0x0130f001
   10c18:	1a13eb06 	.word	0x1a13eb06
   10c1c:	9009f816 	.word	0x9009f816
   10c20:	f81a009b 	.word	0xf81a009b
   10c24:	f003a001 	.word	0xf003a001
   10c28:	eb06013c 	.word	0xeb06013c
   10c2c:	5c59139b 	.word	0x5c59139b
   10c30:	0507f369 	.word	0x0507f369
   10c34:	033ff00b 	.word	0x033ff00b
   10c38:	f36a5cf3 	.word	0xf36a5cf3
   10c3c:	f361250f 	.word	0xf361250f
   10c40:	37034517 	.word	0x37034517
   10c44:	651ff363 	.word	0x651ff363
   10c48:	0104f10e 	.word	0x0104f10e
   10c4c:	f8ce45b8 	.word	0xf8ce45b8
   10c50:	46235000 	.word	0x46235000
   10c54:	f104468e 	.word	0xf104468e
   10c58:	d8d10403 	.word	0xd8d10403
   10c5c:	d91445bc 	.word	0xd91445bc
   10c60:	4d1e781c 	.word	0x4d1e781c
   10c64:	10a63701 	.word	0x10a63701
   10c68:	ea4f4567 	.word	0xea4f4567
   10c6c:	f0041404 	.word	0xf0041404
   10c70:	f8150430 	.word	0xf8150430
   10c74:	d315e006 	.word	0xd315e006
   10c78:	5d2b263d 	.word	0x5d2b263d
   10c7c:	e000f881 	.word	0xe000f881
   10c80:	233d704b 	.word	0x233d704b
   10c84:	70cb708e 	.word	0x70cb708e
   10c88:	23003104 	.word	0x23003104
   10c8c:	1a08469c 	.word	0x1a08469c
   10c90:	700b6010 	.word	0x700b6010
   10c94:	e8bd4660 	.word	0xe8bd4660
   10c98:	f8c28ff0 	.word	0xf8c28ff0
   10c9c:	4660c000 	.word	0x4660c000
   10ca0:	8ff0e8bd 	.word	0x8ff0e8bd
   10ca4:	f881785b 	.word	0xf881785b
   10ca8:	eb05e000 	.word	0xeb05e000
   10cac:	5d341613 	.word	0x5d341613
   10cb0:	f003009b 	.word	0xf003009b
   10cb4:	704c033c 	.word	0x704c033c
   10cb8:	e7e25cee 	.word	0xe7e25cee
   10cbc:	46014647 	.word	0x46014647
   10cc0:	6014e7cc 	.word	0x6014e7cc
   10cc4:	0c29f06f 	.word	0x0c29f06f
   10cc8:	f04fe7e4 	.word	0xf04fe7e4
   10ccc:	f06f33ff 	.word	0xf06f33ff
   10cd0:	60130c29 	.word	0x60130c29
   10cd4:	bf00e7de 	.word	0xbf00e7de
   10cd8:	aaaaaaab 	.word	0xaaaaaaab
   10cdc:	00024500 	.word	0x00024500

00010ce0 <packet_free_cb>:
   10ce0:	f0006800 	.word	0xf0006800
   10ce4:	bf00b9eb 	.word	0xbf00b9eb

00010ce8 <packet_free_cb>:
   10ce8:	4604b510 	.word	0x4604b510
   10cec:	f0066800 	.word	0xf0066800
   10cf0:	68a0f9a5 	.word	0x68a0f9a5
   10cf4:	e8bdb118 	.word	0xe8bdb118
   10cf8:	f00b4010 	.word	0xf00b4010
   10cfc:	bd10bf3b 	.word	0xbd10bf3b

00010d00 <packet_free_cb>:
   10d00:	4604b510 	.word	0x4604b510
   10d04:	f7ff6800 	.word	0xf7ff6800
   10d08:	68a0ff23 	.word	0x68a0ff23
   10d0c:	e8bdb118 	.word	0xe8bdb118
   10d10:	f00b4010 	.word	0xf00b4010
   10d14:	bd10bf2f 	.word	0xbd10bf2f

00010d18 <at_interface_write>:
   10d18:	b083b5f0 	.word	0xb083b5f0
   10d1c:	4615460f 	.word	0x4615460f
   10d20:	f0044606 	.word	0xf0044606
   10d24:	2800fcf3 	.word	0x2800fcf3
   10d28:	6803d047 	.word	0x6803d047
   10d2c:	039b4604 	.word	0x039b4604
   10d30:	6803d543 	.word	0x6803d543
   10d34:	f4234629 	.word	0xf4234629
   10d38:	60033300 	.word	0x60033300
   10d3c:	a8016803 	.word	0xa8016803
   10d40:	1300f443 	.word	0x1300f443
   10d44:	f0006023 	.word	0xf0006023
   10d48:	bba0f98f 	.word	0xbba0f98f
   10d4c:	9b012204 	.word	0x9b012204
   10d50:	7258721a 	.word	0x7258721a
   10d54:	72d87298 	.word	0x72d87298
   10d58:	b98560de 	.word	0xb98560de
   10d5c:	21014618 	.word	0x21014618
   10d60:	f996f000 	.word	0xf996f000
   10d64:	f44fb9d0 	.word	0xf44fb9d0
   10d68:	46303200 	.word	0x46303200
   10d6c:	f04f4611 	.word	0xf04f4611
   10d70:	f00433ff 	.word	0xf00433ff
   10d74:	b9a8fc5f 	.word	0xb9a8fc5f
   10d78:	b0034628 	.word	0xb0034628
   10d7c:	4639bdf0 	.word	0x4639bdf0
   10d80:	462a6818 	.word	0x462a6818
   10d84:	f974f012 	.word	0xf974f012
   10d88:	98012101 	.word	0x98012101
   10d8c:	f980f000 	.word	0xf980f000
   10d90:	d0e82800 	.word	0xd0e82800
   10d94:	68189b01 	.word	0x68189b01
   10d98:	f990f000 	.word	0xf990f000
   10d9c:	f0009801 	.word	0xf0009801
   10da0:	2023f985 	.word	0x2023f985
   10da4:	f4436823 	.word	0xf4436823
   10da8:	60233300 	.word	0x60233300
   10dac:	fde2f7fe 	.word	0xfde2f7fe
   10db0:	30fff04f 	.word	0x30fff04f
   10db4:	200ce7e1 	.word	0x200ce7e1
   10db8:	2016e7f4 	.word	0x2016e7f4
   10dbc:	bf00e7f6 	.word	0xbf00e7f6

00010dc0 <at_interface_init>:
   10dc0:	b94cf000 	.word	0xb94cf000

00010dc4 <at_interface_open>:
   10dc4:	41f0e92d 	.word	0x41f0e92d
   10dc8:	b0822500 	.word	0xb0822500
   10dcc:	f843ab02 	.word	0xf843ab02
   10dd0:	46805d08 	.word	0x46805d08
   10dd4:	4618460f 	.word	0x4618460f
   10dd8:	21024616 	.word	0x21024616
   10ddc:	f0044a1d 	.word	0xf0044a1d
   10de0:	9b00fb85 	.word	0x9b00fb85
   10de4:	b30b4604 	.word	0xb30b4604
   10de8:	8703e9c3 	.word	0x8703e9c3
   10dec:	4629615e 	.word	0x4629615e
   10df0:	f000a801 	.word	0xf000a801
   10df4:	b9e8f939 	.word	0xb9e8f939
   10df8:	9b012204 	.word	0x9b012204
   10dfc:	72582105 	.word	0x72582105
   10e00:	72d87298 	.word	0x72d87298
   10e04:	60dc721a 	.word	0x60dc721a
   10e08:	f0004618 	.word	0xf0004618
   10e0c:	b9d8f941 	.word	0xb9d8f941
   10e10:	f04f2202 	.word	0xf04f2202
   10e14:	461133ff 	.word	0x461133ff
   10e18:	f0044620 	.word	0xf0044620
   10e1c:	4605fc0b 	.word	0x4605fc0b
   10e20:	9a00b948 	.word	0x9a00b948
   10e24:	f4436813 	.word	0xf4436813
   10e28:	60133300 	.word	0x60133300
   10e2c:	b0024620 	.word	0xb0024620
   10e30:	81f0e8bd 	.word	0x81f0e8bd
   10e34:	4620250c 	.word	0x4620250c
   10e38:	fbaef004 	.word	0xfbaef004
   10e3c:	f7fe4628 	.word	0xf7fe4628
   10e40:	f04ffd99 	.word	0xf04ffd99
   10e44:	e7f134ff 	.word	0xe7f134ff
   10e48:	f0009801 	.word	0xf0009801
   10e4c:	2523f92f 	.word	0x2523f92f
   10e50:	bf00e7f1 	.word	0xbf00e7f1
   10e54:	00010ce1 	.word	0x00010ce1

00010e58 <at_interface_close>:
   10e58:	b083b5f0 	.word	0xb083b5f0
   10e5c:	f0044606 	.word	0xf0044606
   10e60:	2800fc55 	.word	0x2800fc55
   10e64:	230dd03d 	.word	0x230dd03d
   10e68:	60036807 	.word	0x60036807
   10e6c:	46046803 	.word	0x46046803
   10e70:	d41f039b 	.word	0xd41f039b
   10e74:	a8012100 	.word	0xa8012100
   10e78:	f8f6f000 	.word	0xf8f6f000
   10e7c:	2204bb20 	.word	0x2204bb20
   10e80:	21069b01 	.word	0x21069b01
   10e84:	72987258 	.word	0x72987258
   10e88:	721a72d8 	.word	0x721a72d8
   10e8c:	461860de 	.word	0x461860de
   10e90:	f8fef000 	.word	0xf8fef000
   10e94:	220eb9d0 	.word	0x220eb9d0
   10e98:	33fff04f 	.word	0x33fff04f
   10e9c:	46304611 	.word	0x46304611
   10ea0:	fbc8f004 	.word	0xfbc8f004
   10ea4:	b9a84605 	.word	0xb9a84605
   10ea8:	f0044630 	.word	0xf0044630
   10eac:	4628fb75 	.word	0x4628fb75
   10eb0:	bdf0b003 	.word	0xbdf0b003
   10eb4:	21006803 	.word	0x21006803
   10eb8:	3300f423 	.word	0x3300f423
   10ebc:	a8016003 	.word	0xa8016003
   10ec0:	f8d2f000 	.word	0xf8d2f000
   10ec4:	d0da2800 	.word	0xd0da2800
   10ec8:	e003250c 	.word	0xe003250c
   10ecc:	f0009801 	.word	0xf0009801
   10ed0:	2523f8ed 	.word	0x2523f8ed
   10ed4:	46286027 	.word	0x46286027
   10ed8:	fd4cf7fe 	.word	0xfd4cf7fe
   10edc:	35fff04f 	.word	0x35fff04f
   10ee0:	2516e7e5 	.word	0x2516e7e5
   10ee4:	bf00e7f7 	.word	0xbf00e7f7

00010ee8 <at_interface_read>:
   10ee8:	41f0e92d 	.word	0x41f0e92d
   10eec:	4688b084 	.word	0x4688b084
   10ef0:	461e4615 	.word	0x461e4615
   10ef4:	f0044607 	.word	0xf0044607
   10ef8:	2800fc09 	.word	0x2800fc09
   10efc:	2300d049 	.word	0x2300d049
   10f00:	8500e9cd 	.word	0x8500e9cd
   10f04:	0502f016 	.word	0x0502f016
   10f08:	e9cd4604 	.word	0xe9cd4604
   10f0c:	d00e3302 	.word	0xd00e3302
   10f10:	2d00e01e 	.word	0x2d00e01e
   10f14:	f44fd133 	.word	0xf44fd133
   10f18:	6a233280 	.word	0x6a233280
   10f1c:	2b004611 	.word	0x2b004611
   10f20:	f04fbf08 	.word	0xf04fbf08
   10f24:	463833ff 	.word	0x463833ff
   10f28:	fb84f004 	.word	0xfb84f004
   10f2c:	68234605 	.word	0x68234605
   10f30:	f42369e0 	.word	0xf42369e0
   10f34:	60233380 	.word	0x60233380
   10f38:	46326803 	.word	0x46326803
   10f3c:	4669689b 	.word	0x4669689b
   10f40:	f1b04798 	.word	0xf1b04798
   10f44:	dbe40800 	.word	0xdbe40800
   10f48:	b0044640 	.word	0xb0044640
   10f4c:	81f0e8bd 	.word	0x81f0e8bd
   10f50:	69c06803 	.word	0x69c06803
   10f54:	3380f423 	.word	0x3380f423
   10f58:	68036023 	.word	0x68036023
   10f5c:	689b4632 	.word	0x689b4632
   10f60:	47984669 	.word	0x47984669
   10f64:	0800f1b0 	.word	0x0800f1b0
   10f68:	f1b8daee 	.word	0xf1b8daee
   10f6c:	d1eb3fff 	.word	0xd1eb3fff
   10f70:	f7fe2023 	.word	0xf7fe2023
   10f74:	4640fcff 	.word	0x4640fcff
   10f78:	e8bdb004 	.word	0xe8bdb004
   10f7c:	f1b881f0 	.word	0xf1b881f0
   10f80:	d1e13fff 	.word	0xd1e13fff
   10f84:	f7fe4628 	.word	0xf7fe4628
   10f88:	4640fcf5 	.word	0x4640fcf5
   10f8c:	e8bdb004 	.word	0xe8bdb004
   10f90:	201681f0 	.word	0x201681f0
   10f94:	fceef7fe 	.word	0xfceef7fe
   10f98:	38fff04f 	.word	0x38fff04f
   10f9c:	bf00e7d4 	.word	0xbf00e7d4

00010fa0 <at_interface_getopt>:
   10fa0:	bc12f004 	.word	0xbc12f004

00010fa4 <at_interface_setopt>:
   10fa4:	bbdaf004 	.word	0xbbdaf004

00010fa8 <rpc_at_event_handler>:
   10fa8:	4606b570 	.word	0x4606b570
   10fac:	68c0b084 	.word	0x68c0b084
   10fb0:	f004460d 	.word	0xf004460d
   10fb4:	4604fbab 	.word	0x4604fbab
   10fb8:	6803b348 	.word	0x6803b348
   10fbc:	2b01b29b 	.word	0x2b01b29b
   10fc0:	6803d01f 	.word	0x6803d01f
   10fc4:	2b0db29b 	.word	0x2b0db29b
   10fc8:	6803d029 	.word	0x6803d029
   10fcc:	2b02b29b 	.word	0x2b02b29b
   10fd0:	3d03d02d 	.word	0x3d03d02d
   10fd4:	d8172d01 	.word	0xd8172d01
   10fd8:	68732500 	.word	0x68732500
   10fdc:	e9cd6832 	.word	0xe9cd6832
   10fe0:	e9cd5502 	.word	0xe9cd5502
   10fe4:	69e02300 	.word	0x69e02300
   10fe8:	68034669 	.word	0x68034669
   10fec:	4798685b 	.word	0x4798685b
   10ff0:	d0193001 	.word	0xd0193001
   10ff4:	68234628 	.word	0x68234628
   10ff8:	3380f443 	.word	0x3380f443
   10ffc:	b0046023 	.word	0xb0046023
   11000:	2d02bd70 	.word	0x2d02bd70
   11004:	6005d1e5 	.word	0x6005d1e5
   11008:	b0042000 	.word	0xb0042000
   1100c:	6830bd70 	.word	0x6830bd70
   11010:	d0f92800 	.word	0xd0f92800
   11014:	f852f000 	.word	0xf852f000
   11018:	b0044620 	.word	0xb0044620
   1101c:	2d02bd70 	.word	0x2d02bd70
   11020:	230ed1d7 	.word	0x230ed1d7
   11024:	e7ef6003 	.word	0xe7ef6003
   11028:	b0042002 	.word	0xb0042002
   1102c:	6803bd70 	.word	0x6803bd70
   11030:	d5ce029b 	.word	0xd5ce029b
   11034:	d1cc2d02 	.word	0xd1cc2d02
   11038:	f4236803 	.word	0xf4236803
   1103c:	60031300 	.word	0x60031300
   11040:	f4436803 	.word	0xf4436803
   11044:	60033300 	.word	0x60033300
   11048:	bf00e7de 	.word	0xbf00e7de

0001104c <at_client_evt_handler>:
   1104c:	f850b120 	.word	0xf850b120
   11050:	0c091b08 	.word	0x0c091b08
   11054:	bfa8f7ff 	.word	0xbfa8f7ff
   11058:	bf004770 	.word	0xbf004770

0001105c <rpc_at_client_init>:
   1105c:	f00a4801 	.word	0xf00a4801
   11060:	bf00bca5 	.word	0xbf00bca5
   11064:	00024540 	.word	0x00024540

00011068 <rpc_at_client_request_alloc>:
   11068:	2300b180 	.word	0x2300b180
   1106c:	b082b510 	.word	0xb082b510
   11070:	4604aa02 	.word	0x4604aa02
   11074:	3d04f842 	.word	0x3d04f842
   11078:	f00a2003 	.word	0xf00a2003
   1107c:	b918fecf 	.word	0xb918fecf
   11080:	b10b9b01 	.word	0xb10b9b01
   11084:	60233308 	.word	0x60233308
   11088:	bd10b002 	.word	0xbd10b002
   1108c:	4770200e 	.word	0x4770200e

00011090 <rpc_at_client_request_send>:
   11090:	4603b150 	.word	0x4603b150
   11094:	2c08f830 	.word	0x2c08f830
   11098:	ea422003 	.word	0xea422003
   1109c:	f8434101 	.word	0xf8434101
   110a0:	46191d08 	.word	0x46191d08
   110a4:	bea2f00a 	.word	0xbea2f00a
   110a8:	4770200e 	.word	0x4770200e

000110ac <rpc_at_client_message_free>:
   110ac:	f1a0b120 	.word	0xf1a0b120
   110b0:	20030108 	.word	0x20030108
   110b4:	bee4f00a 	.word	0xbee4f00a
   110b8:	4770200e 	.word	0x4770200e

000110bc <rpc_at_client_data_free>:
   110bc:	4601b118 	.word	0x4601b118
   110c0:	f00a2003 	.word	0xf00a2003
   110c4:	200ebfef 	.word	0x200ebfef
   110c8:	bf004770 	.word	0xbf004770

000110cc <logobj_event_handler>:
   110cc:	4b3bb530 	.word	0x4b3bb530
   110d0:	681db085 	.word	0x681db085
   110d4:	d04c2d00 	.word	0xd04c2d00
   110d8:	0302f248 	.word	0x0302f248
   110dc:	d0534299 	.word	0xd0534299
   110e0:	f248d91c 	.word	0xf248d91c
   110e4:	42990303 	.word	0x42990303
   110e8:	f249d05a 	.word	0xf249d05a
   110ec:	42990301 	.word	0x42990301
   110f0:	2400d147 	.word	0x2400d147
   110f4:	68026843 	.word	0x68026843
   110f8:	4402e9cd 	.word	0x4402e9cd
   110fc:	2300e9cd 	.word	0x2300e9cd
   11100:	466969e8 	.word	0x466969e8
   11104:	685b6803 	.word	0x685b6803
   11108:	30014798 	.word	0x30014798
   1110c:	4620d04e 	.word	0x4620d04e
   11110:	f443682b 	.word	0xf443682b
   11114:	602b3380 	.word	0x602b3380
   11118:	bd30b005 	.word	0xbd30b005
   1111c:	0301f248 	.word	0x0301f248
   11120:	d12e4299 	.word	0xd12e4299
   11124:	2b0068c3 	.word	0x2b0068c3
   11128:	6828d135 	.word	0x6828d135
   1112c:	0080f410 	.word	0x0080f410
   11130:	682bd03e 	.word	0x682bd03e
   11134:	2b01b29b 	.word	0x2b01b29b
   11138:	682bd105 	.word	0x682bd105
   1113c:	041b0c1b 	.word	0x041b0c1b
   11140:	0302f043 	.word	0x0302f043
   11144:	4b1e602b 	.word	0x4b1e602b
   11148:	f002781a 	.word	0xf002781a
   1114c:	2a0001ff 	.word	0x2a0001ff
   11150:	4a1cd031 	.word	0x4a1cd031
   11154:	b9097811 	.word	0xb9097811
   11158:	70112101 	.word	0x70112101
   1115c:	70182000 	.word	0x70182000
   11160:	f423682b 	.word	0xf423682b
   11164:	602b0380 	.word	0x602b0380
   11168:	f443682b 	.word	0xf443682b
   1116c:	602b0300 	.word	0x602b0300
   11170:	6800e7d2 	.word	0x6800e7d2
   11174:	d0cf2800 	.word	0xd0cf2800
   11178:	ff60f005 	.word	0xff60f005
   1117c:	b0054628 	.word	0xb0054628
   11180:	2000bd30 	.word	0x2000bd30
   11184:	bd30b005 	.word	0xbd30b005
   11188:	f413682b 	.word	0xf413682b
   1118c:	d00b0380 	.word	0xd00b0380
   11190:	280068c0 	.word	0x280068c0
   11194:	230ed0e4 	.word	0x230ed0e4
   11198:	606b2000 	.word	0x606b2000
   1119c:	bd30b005 	.word	0xbd30b005
   111a0:	2b0168c3 	.word	0x2b0168c3
   111a4:	e7f6d1a5 	.word	0xe7f6d1a5
   111a8:	e7b54618 	.word	0xe7b54618
   111ac:	e7b32002 	.word	0xe7b32002
   111b0:	606b230e 	.word	0x606b230e
   111b4:	4a03e7b0 	.word	0x4a03e7b0
   111b8:	e7cf7011 	.word	0xe7cf7011
   111bc:	20020274 	.word	0x20020274
   111c0:	20026bff 	.word	0x20026bff
   111c4:	20026c00 	.word	0x20026c00

000111c8 <logobj_interface_init>:
   111c8:	b5102300 	.word	0xb5102300
   111cc:	4a084907 	.word	0x4a084907
   111d0:	48094c08 	.word	0x48094c08
   111d4:	60037023 	.word	0x60037023
   111d8:	6013700b 	.word	0x6013700b
   111dc:	fef2f005 	.word	0xfef2f005
   111e0:	bf183000 	.word	0xbf183000
   111e4:	42402001 	.word	0x42402001
   111e8:	bf00bd10 	.word	0xbf00bd10
   111ec:	20026bff 	.word	0x20026bff
   111f0:	20020270 	.word	0x20020270
   111f4:	20026c00 	.word	0x20026c00
   111f8:	20020274 	.word	0x20020274

000111fc <logobj_interface_open>:
   111fc:	e92d2300 	.word	0xe92d2300
   11200:	286647f0 	.word	0x286647f0
   11204:	9300b082 	.word	0x9300b082
   11208:	2902d172 	.word	0x2902d172
   1120c:	d16f4689 	.word	0xd16f4689
   11210:	2305f240 	.word	0x2305f240
   11214:	4692429a 	.word	0x4692429a
   11218:	4f48d16a 	.word	0x4f48d16a
   1121c:	2d00683d 	.word	0x2d00683d
   11220:	4680d17c 	.word	0x4680d17c
   11224:	46684a46 	.word	0x46684a46
   11228:	f960f004 	.word	0xf960f004
   1122c:	46069b00 	.word	0x46069b00
   11230:	d07d2b00 	.word	0xd07d2b00
   11234:	22044629 	.word	0x22044629
   11238:	603b4842 	.word	0x603b4842
   1123c:	ff42f011 	.word	0xff42f011
   11240:	46299c00 	.word	0x46299c00
   11244:	8903e9c4 	.word	0x8903e9c4
   11248:	a014f8c4 	.word	0xa014f8c4
   1124c:	f005a801 	.word	0xf005a801
   11250:	2800febf 	.word	0x2800febf
   11254:	2201d13c 	.word	0x2201d13c
   11258:	9b012104 	.word	0x9b012104
   1125c:	73584d3a 	.word	0x73584d3a
   11260:	73d87398 	.word	0x73d87398
   11264:	72987258 	.word	0x72987258
   11268:	721972d8 	.word	0x721972d8
   1126c:	731a702a 	.word	0x731a702a
   11270:	46186822 	.word	0x46186822
   11274:	0280f442 	.word	0x0280f442
   11278:	f2476022 	.word	0xf2476022
   1127c:	f0050101 	.word	0xf0050101
   11280:	bb38febf 	.word	0xbb38febf
   11284:	0200f44f 	.word	0x0200f44f
   11288:	33fff04f 	.word	0x33fff04f
   1128c:	46304611 	.word	0x46304611
   11290:	f9d0f004 	.word	0xf9d0f004
   11294:	b3104604 	.word	0xb3104604
   11298:	2e009a00 	.word	0x2e009a00
   1129c:	f4436813 	.word	0xf4436813
   112a0:	60133300 	.word	0x60133300
   112a4:	68139a00 	.word	0x68139a00
   112a8:	0380f423 	.word	0x0380f423
   112ac:	9a006013 	.word	0x9a006013
   112b0:	f4236813 	.word	0xf4236813
   112b4:	60130300 	.word	0x60130300
   112b8:	2300da36 	.word	0x2300da36
   112bc:	603b4620 	.word	0x603b4620
   112c0:	36fff04f 	.word	0x36fff04f
   112c4:	fb56f7fe 	.word	0xfb56f7fe
   112c8:	b0024630 	.word	0xb0024630
   112cc:	87f0e8bd 	.word	0x87f0e8bd
   112d0:	e7e1240c 	.word	0xe7e1240c
   112d4:	f0059801 	.word	0xf0059801
   112d8:	2405fea9 	.word	0x2405fea9
   112dc:	4630e7dc 	.word	0x4630e7dc
   112e0:	fa14f004 	.word	0xfa14f004
   112e4:	6844b150 	.word	0x6844b150
   112e8:	2300b144 	.word	0x2300b144
   112ec:	e7d36043 	.word	0xe7d36043
   112f0:	f7fe2016 	.word	0xf7fe2016
   112f4:	f04ffb3f 	.word	0xf04ffb3f
   112f8:	e7e536ff 	.word	0xe7e536ff
   112fc:	68139a00 	.word	0x68139a00
   11300:	3300f443 	.word	0x3300f443
   11304:	9a006013 	.word	0x9a006013
   11308:	f4236813 	.word	0xf4236813
   1130c:	60130380 	.word	0x60130380
   11310:	68139a00 	.word	0x68139a00
   11314:	0300f423 	.word	0x0300f423
   11318:	e7d56013 	.word	0xe7d56013
   1131c:	f7fe2001 	.word	0xf7fe2001
   11320:	f04ffb29 	.word	0xf04ffb29
   11324:	e7cf36ff 	.word	0xe7cf36ff
   11328:	f0044630 	.word	0xf0044630
   1132c:	e7c4f935 	.word	0xe7c4f935
   11330:	f7fe2018 	.word	0xf7fe2018
   11334:	f04ffb1f 	.word	0xf04ffb1f
   11338:	e7c536ff 	.word	0xe7c536ff
   1133c:	20020274 	.word	0x20020274
   11340:	00010ce9 	.word	0x00010ce9
   11344:	20020270 	.word	0x20020270
   11348:	20026bff 	.word	0x20026bff

0001134c <logobj_interface_read>:
   1134c:	43f0e92d 	.word	0x43f0e92d
   11350:	2900b085 	.word	0x2900b085
   11354:	2a00d05e 	.word	0x2a00d05e
   11358:	dd5b4616 	.word	0xdd5b4616
   1135c:	4680461f 	.word	0x4680461f
   11360:	f004460d 	.word	0xf004460d
   11364:	4604f9d3 	.word	0x4604f9d3
   11368:	d0592800 	.word	0xd0592800
   1136c:	07ba69c0 	.word	0x07ba69c0
   11370:	68db6803 	.word	0x68db6803
   11374:	4798d524 	.word	0x4798d524
   11378:	d03b3001 	.word	0xd03b3001
   1137c:	69e06823 	.word	0x69e06823
   11380:	3380f413 	.word	0x3380f413
   11384:	2100d038 	.word	0x2100d038
   11388:	463a6823 	.word	0x463a6823
   1138c:	3380f423 	.word	0x3380f423
   11390:	e9cd6023 	.word	0xe9cd6023
   11394:	e9cd1102 	.word	0xe9cd1102
   11398:	68035600 	.word	0x68035600
   1139c:	689b4669 	.word	0x689b4669
   113a0:	46054798 	.word	0x46054798
   113a4:	680369e0 	.word	0x680369e0
   113a8:	479868db 	.word	0x479868db
   113ac:	d0033001 	.word	0xd0033001
   113b0:	f4436823 	.word	0xf4436823
   113b4:	60233380 	.word	0x60233380
   113b8:	b0054628 	.word	0xb0054628
   113bc:	83f0e8bd 	.word	0x83f0e8bd
   113c0:	f0126822 	.word	0xf0126822
   113c4:	d1d65980 	.word	0xd1d65980
   113c8:	1c434798 	.word	0x1c434798
   113cc:	f44fd1d6 	.word	0xf44fd1d6
   113d0:	6a233280 	.word	0x6a233280
   113d4:	2b004611 	.word	0x2b004611
   113d8:	4603bf08 	.word	0x4603bf08
   113dc:	f0044640 	.word	0xf0044640
   113e0:	b158f929 	.word	0xb158f929
   113e4:	35fff04f 	.word	0x35fff04f
   113e8:	fac4f7fe 	.word	0xfac4f7fe
   113ec:	b0054628 	.word	0xb0054628
   113f0:	83f0e8bd 	.word	0x83f0e8bd
   113f4:	e7f52023 	.word	0xe7f52023
   113f8:	e7d4461d 	.word	0xe7d4461d
   113fc:	f0044640 	.word	0xf0044640
   11400:	4603f985 	.word	0x4603f985
   11404:	d0b92800 	.word	0xd0b92800
   11408:	28006840 	.word	0x28006840
   1140c:	f8c3d0b6 	.word	0xf8c3d0b6
   11410:	e7e79004 	.word	0xe7e79004
   11414:	f7fe2016 	.word	0xf7fe2016
   11418:	f04ffaad 	.word	0xf04ffaad
   1141c:	e7cb35ff 	.word	0xe7cb35ff
   11420:	f7fe2009 	.word	0xf7fe2009
   11424:	f04ffaa7 	.word	0xf04ffaa7
   11428:	e7c535ff 	.word	0xe7c535ff

0001142c <logobj_interface_write>:
   1142c:	41f0e92d 	.word	0x41f0e92d
   11430:	2900b082 	.word	0x2900b082
   11434:	2a04d05b 	.word	0x2a04d05b
   11438:	461ed159 	.word	0x461ed159
   1143c:	460d4607 	.word	0x460d4607
   11440:	f964f004 	.word	0xf964f004
   11444:	28004604 	.word	0x28004604
   11448:	07b0d067 	.word	0x07b0d067
   1144c:	6823d526 	.word	0x6823d526
   11450:	d55e039b 	.word	0xd55e039b
   11454:	68232600 	.word	0x68232600
   11458:	f4232100 	.word	0xf4232100
   1145c:	60233300 	.word	0x60233300
   11460:	f8d5a801 	.word	0xf8d5a801
   11464:	f0058000 	.word	0xf0058000
   11468:	b9f8fdb3 	.word	0xb9f8fdb3
   1146c:	9b012504 	.word	0x9b012504
   11470:	0103f247 	.word	0x0103f247
   11474:	800cf8c3 	.word	0x800cf8c3
   11478:	72987258 	.word	0x72987258
   1147c:	721d72d8 	.word	0x721d72d8
   11480:	f0054618 	.word	0xf0054618
   11484:	4680fdbd 	.word	0x4680fdbd
   11488:	b9cebb40 	.word	0xb9cebb40
   1148c:	68234628 	.word	0x68234628
   11490:	3300f443 	.word	0x3300f443
   11494:	b0026023 	.word	0xb0026023
   11498:	81f0e8bd 	.word	0x81f0e8bd
   1149c:	00d96823 	.word	0x00d96823
   114a0:	6823d4d5 	.word	0x6823d4d5
   114a4:	d536039a 	.word	0xd536039a
   114a8:	e7d42601 	.word	0xe7d42601
   114ac:	6823200c 	.word	0x6823200c
   114b0:	3300f443 	.word	0x3300f443
   114b4:	f7fe6023 	.word	0xf7fe6023
   114b8:	f04ffa5d 	.word	0xf04ffa5d
   114bc:	e7ea30ff 	.word	0xe7ea30ff
   114c0:	3280f44f 	.word	0x3280f44f
   114c4:	33fff04f 	.word	0x33fff04f
   114c8:	46384611 	.word	0x46384611
   114cc:	f8b2f004 	.word	0xf8b2f004
   114d0:	6823b198 	.word	0x6823b198
   114d4:	3300f443 	.word	0x3300f443
   114d8:	e7ec6023 	.word	0xe7ec6023
   114dc:	f0059801 	.word	0xf0059801
   114e0:	6823fda5 	.word	0x6823fda5
   114e4:	f4432005 	.word	0xf4432005
   114e8:	60233300 	.word	0x60233300
   114ec:	2016e7e3 	.word	0x2016e7e3
   114f0:	fa40f7fe 	.word	0xfa40f7fe
   114f4:	30fff04f 	.word	0x30fff04f
   114f8:	4638e7cd 	.word	0x4638e7cd
   114fc:	f906f004 	.word	0xf906f004
   11500:	28004603 	.word	0x28004603
   11504:	6840d0c2 	.word	0x6840d0c2
   11508:	d0bf2800 	.word	0xd0bf2800
   1150c:	8004f8c3 	.word	0x8004f8c3
   11510:	2073e7df 	.word	0x2073e7df
   11514:	2009e7cf 	.word	0x2009e7cf
   11518:	2009e7cd 	.word	0x2009e7cd
   1151c:	fa2af7fe 	.word	0xfa2af7fe
   11520:	30fff04f 	.word	0x30fff04f
   11524:	bf00e7b7 	.word	0xbf00e7b7

00011528 <logobj_interface_setopt>:
   11528:	2901b5f0 	.word	0x2901b5f0
   1152c:	d068b085 	.word	0xd068b085
   11530:	f240461e 	.word	0xf240461e
   11534:	42992305 	.word	0x42992305
   11538:	8095f040 	.word	0x8095f040
   1153c:	46154607 	.word	0x46154607
   11540:	f8e4f004 	.word	0xf8e4f004
   11544:	28004604 	.word	0x28004604
   11548:	80b2f000 	.word	0x80b2f000
   1154c:	d0192d01 	.word	0xd0192d01
   11550:	d0102d02 	.word	0xd0102d02
   11554:	6803252a 	.word	0x6803252a
   11558:	0380f423 	.word	0x0380f423
   1155c:	68236023 	.word	0x68236023
   11560:	f4234628 	.word	0xf4234628
   11564:	60230300 	.word	0x60230300
   11568:	fa04f7fe 	.word	0xfa04f7fe
   1156c:	35fff04f 	.word	0x35fff04f
   11570:	b0054628 	.word	0xb0054628
   11574:	b116bdf0 	.word	0xb116bdf0
   11578:	2b019b0a 	.word	0x2b019b0a
   1157c:	6823d049 	.word	0x6823d049
   11580:	e7e92516 	.word	0xe7e92516
   11584:	d0fa2e00 	.word	0xd0fa2e00
   11588:	2b049b0a 	.word	0x2b049b0a
   1158c:	2100d1f7 	.word	0x2100d1f7
   11590:	f005a803 	.word	0xf005a803
   11594:	4605fd1d 	.word	0x4605fd1d
   11598:	d16a2800 	.word	0xd16a2800
   1159c:	22089803 	.word	0x22089803
   115a0:	300c4629 	.word	0x300c4629
   115a4:	fd8ef011 	.word	0xfd8ef011
   115a8:	46319803 	.word	0x46319803
   115ac:	300c9a0a 	.word	0x300c9a0a
   115b0:	fd5ef011 	.word	0xfd5ef011
   115b4:	98032308 	.word	0x98032308
   115b8:	0102f247 	.word	0x0102f247
   115bc:	72457203 	.word	0x72457203
   115c0:	72c57285 	.word	0x72c57285
   115c4:	f4436823 	.word	0xf4436823
   115c8:	60230380 	.word	0x60230380
   115cc:	fd18f005 	.word	0xfd18f005
   115d0:	d1512800 	.word	0xd1512800
   115d4:	0200f44f 	.word	0x0200f44f
   115d8:	33fff04f 	.word	0x33fff04f
   115dc:	46384611 	.word	0x46384611
   115e0:	f828f004 	.word	0xf828f004
   115e4:	28004605 	.word	0x28004605
   115e8:	4638d13b 	.word	0x4638d13b
   115ec:	f88ef004 	.word	0xf88ef004
   115f0:	d04f2800 	.word	0xd04f2800
   115f4:	2b006843 	.word	0x2b006843
   115f8:	2200d04c 	.word	0x2200d04c
   115fc:	6042461d 	.word	0x6042461d
   11600:	9c0ae02f 	.word	0x9c0ae02f
   11604:	f0049400 	.word	0xf0049400
   11608:	4605f8a9 	.word	0x4605f8a9
   1160c:	b0054628 	.word	0xb0054628
   11610:	2100bdf0 	.word	0x2100bdf0
   11614:	7835a803 	.word	0x7835a803
   11618:	fcdaf005 	.word	0xfcdaf005
   1161c:	2d01bb48 	.word	0x2d01bb48
   11620:	4b26bf08 	.word	0x4b26bf08
   11624:	0204f04f 	.word	0x0204f04f
   11628:	701dbf08 	.word	0x701dbf08
   1162c:	98032300 	.word	0x98032300
   11630:	0101f247 	.word	0x0101f247
   11634:	60c57243 	.word	0x60c57243
   11638:	72c37283 	.word	0x72c37283
   1163c:	68237202 	.word	0x68237202
   11640:	0380f443 	.word	0x0380f443
   11644:	f0056023 	.word	0xf0056023
   11648:	4606fcdb 	.word	0x4606fcdb
   1164c:	f44fb9a0 	.word	0xf44fb9a0
   11650:	f04f0200 	.word	0xf04f0200
   11654:	461133ff 	.word	0x461133ff
   11658:	f0034638 	.word	0xf0034638
   1165c:	4605ffeb 	.word	0x4605ffeb
   11660:	6823b180 	.word	0x6823b180
   11664:	202ae778 	.word	0x202ae778
   11668:	f984f7fe 	.word	0xf984f7fe
   1166c:	35fff04f 	.word	0x35fff04f
   11670:	6823e77e 	.word	0x6823e77e
   11674:	e76f250c 	.word	0xe76f250c
   11678:	f0059803 	.word	0xf0059803
   1167c:	2505fcd7 	.word	0x2505fcd7
   11680:	e7696823 	.word	0xe7696823
   11684:	f0044638 	.word	0xf0044638
   11688:	b140f841 	.word	0xb140f841
   1168c:	b1356845 	.word	0xb1356845
   11690:	e7e66046 	.word	0xe7e66046
   11694:	22044631 	.word	0x22044631
   11698:	f0114809 	.word	0xf0114809
   1169c:	6823fce9 	.word	0x6823fce9
   116a0:	0380f423 	.word	0x0380f423
   116a4:	68236023 	.word	0x68236023
   116a8:	0300f423 	.word	0x0300f423
   116ac:	e75f6023 	.word	0xe75f6023
   116b0:	f7fe2009 	.word	0xf7fe2009
   116b4:	f04ff95f 	.word	0xf04ff95f
   116b8:	e75935ff 	.word	0xe75935ff
   116bc:	20026bff 	.word	0x20026bff
   116c0:	20020270 	.word	0x20020270

000116c4 <logobj_interface_getopt>:
   116c4:	2901b5f0 	.word	0x2901b5f0
   116c8:	9e08b083 	.word	0x9e08b083
   116cc:	461fd030 	.word	0x461fd030
   116d0:	2305f240 	.word	0x2305f240
   116d4:	d1344299 	.word	0xd1344299
   116d8:	f0044615 	.word	0xf0044615
   116dc:	2800f817 	.word	0x2800f817
   116e0:	2d01d037 	.word	0x2d01d037
   116e4:	2d02d015 	.word	0x2d02d015
   116e8:	b387d10b 	.word	0xb387d10b
   116ec:	b3736833 	.word	0xb3736833
   116f0:	22012300 	.word	0x22012300
   116f4:	491a4618 	.word	0x491a4618
   116f8:	70397809 	.word	0x70397809
   116fc:	b0036032 	.word	0xb0036032
   11700:	2009bdf0 	.word	0x2009bdf0
   11704:	f936f7fe 	.word	0xf936f7fe
   11708:	33fff04f 	.word	0x33fff04f
   1170c:	b0034618 	.word	0xb0034618
   11710:	b1e7bdf0 	.word	0xb1e7bdf0
   11714:	2b036833 	.word	0x2b036833
   11718:	4638d919 	.word	0x4638d919
   1171c:	49112204 	.word	0x49112204
   11720:	fca6f011 	.word	0xfca6f011
   11724:	22042300 	.word	0x22042300
   11728:	60324618 	.word	0x60324618
   1172c:	bdf0b003 	.word	0xbdf0b003
   11730:	f0049600 	.word	0xf0049600
   11734:	4603f849 	.word	0x4603f849
   11738:	d1e32800 	.word	0xd1e32800
   1173c:	b0034618 	.word	0xb0034618
   11740:	202abdf0 	.word	0x202abdf0
   11744:	f916f7fe 	.word	0xf916f7fe
   11748:	33fff04f 	.word	0x33fff04f
   1174c:	2016e7de 	.word	0x2016e7de
   11750:	2009e7d8 	.word	0x2009e7d8
   11754:	f90ef7fe 	.word	0xf90ef7fe
   11758:	33fff04f 	.word	0x33fff04f
   1175c:	bf00e7d6 	.word	0xbf00e7d6
   11760:	20026c00 	.word	0x20026c00
   11764:	20020270 	.word	0x20020270

00011768 <logobj_interface_close>:
   11768:	4604b510 	.word	0x4604b510
   1176c:	ffcef003 	.word	0xffcef003
   11770:	4620b138 	.word	0x4620b138
   11774:	ff10f003 	.word	0xff10f003
   11778:	4a052300 	.word	0x4a052300
   1177c:	60134618 	.word	0x60134618
   11780:	2009bd10 	.word	0x2009bd10
   11784:	f8f6f7fe 	.word	0xf8f6f7fe
   11788:	30fff04f 	.word	0x30fff04f
   1178c:	bf00bd10 	.word	0xbf00bd10
   11790:	20020274 	.word	0x20020274

00011794 <transport_reset>:
   11794:	47702000 	.word	0x47702000

00011798 <transport_data_free>:
   11798:	e9d34b0b 	.word	0xe9d34b0b
   1179c:	44132300 	.word	0x44132300
   117a0:	d20d4298 	.word	0xd20d4298
   117a4:	d80b4282 	.word	0xd80b4282
   117a8:	4604b510 	.word	0x4604b510
   117ac:	feecf005 	.word	0xfeecf005
   117b0:	4a06b140 	.word	0x4a06b140
   117b4:	60026084 	.word	0x60026084
   117b8:	4010e8bd 	.word	0x4010e8bd
   117bc:	be2cf005 	.word	0xbe2cf005
   117c0:	b9eef00b 	.word	0xb9eef00b
   117c4:	bf00bd10 	.word	0xbf00bd10
   117c8:	20020278 	.word	0x20020278
   117cc:	00020001 	.word	0x00020001

000117d0 <rpc_transport_ipc_init>:
   117d0:	d02b2800 	.word	0xd02b2800
   117d4:	b089b530 	.word	0xb089b530
   117d8:	4669aa01 	.word	0x4669aa01
   117dc:	f0054604 	.word	0xf0054604
   117e0:	4603fd31 	.word	0x4603fd31
   117e4:	4a13b140 	.word	0x4a13b140
   117e8:	0028f104 	.word	0x0028f104
   117ec:	e882c803 	.word	0xe882c803
   117f0:	46180003 	.word	0x46180003
   117f4:	bd30b009 	.word	0xbd30b009
   117f8:	1200e9dd 	.word	0x1200e9dd
   117fc:	f0004620 	.word	0xf0004620
   11800:	4603f9ab 	.word	0x4603f9ab
   11804:	d1ee2800 	.word	0xd1ee2800
   11808:	490c4b0b 	.word	0x490c4b0b
   1180c:	4a0d480c 	.word	0x4a0d480c
   11810:	4d0d9303 	.word	0x4d0d9303
   11814:	91044b0d 	.word	0x91044b0d
   11818:	490d9005 	.word	0x490d9005
   1181c:	9307a802 	.word	0x9307a802
   11820:	92029506 	.word	0x92029506
   11824:	fa3af00a 	.word	0xfa3af00a
   11828:	e7dc4603 	.word	0xe7dc4603
   1182c:	4618230e 	.word	0x4618230e
   11830:	bf004770 	.word	0xbf004770
   11834:	20020278 	.word	0x20020278
   11838:	00017519 	.word	0x00017519
   1183c:	000175e9 	.word	0x000175e9
   11840:	00012175 	.word	0x00012175
   11844:	00017419 	.word	0x00017419
   11848:	00011799 	.word	0x00011799
   1184c:	00011795 	.word	0x00011795
   11850:	20020280 	.word	0x20020280

00011854 <rpc_transport_rx_handle>:
   11854:	b508b160 	.word	0xb508b160
   11858:	b2db6843 	.word	0xb2db6843
   1185c:	d00e2b02 	.word	0xd00e2b02
   11860:	0c1b6803 	.word	0x0c1b6803
   11864:	d0052b02 	.word	0xd0052b02
   11868:	d00e2b04 	.word	0xd00e2b04
   1186c:	bd082000 	.word	0xbd082000
   11870:	47702000 	.word	0x47702000
   11874:	f00b6880 	.word	0xf00b6880
   11878:	2000f993 	.word	0x2000f993
   1187c:	4601bd08 	.word	0x4601bd08
   11880:	4008e8bd 	.word	0x4008e8bd
   11884:	f00a4803 	.word	0xf00a4803
   11888:	4802b8fb 	.word	0x4802b8fb
   1188c:	fa66f00a 	.word	0xfa66f00a
   11890:	bd082000 	.word	0xbd082000
   11894:	20020280 	.word	0x20020280
   11898:	bf004770 	.word	0xbf004770

0001189c <rpc_transport_ipc_fault_handler>:
   1189c:	b916f000 	.word	0xb916f000

000118a0 <nrf_socket>:
   118a0:	4604b570 	.word	0x4604b570
   118a4:	4616460d 	.word	0x4616460d
   118a8:	f8bef007 	.word	0xf8bef007
   118ac:	6803b130 	.word	0x6803b130
   118b0:	46294632 	.word	0x46294632
   118b4:	e8bd4620 	.word	0xe8bd4620
   118b8:	47184070 	.word	0x47184070
   118bc:	30fff04f 	.word	0x30fff04f
   118c0:	bf00bd70 	.word	0xbf00bd70

000118c4 <nrf_close>:
   118c4:	4604b510 	.word	0x4604b510
   118c8:	f902f007 	.word	0xf902f007
   118cc:	6843b120 	.word	0x6843b120
   118d0:	e8bd4620 	.word	0xe8bd4620
   118d4:	47184010 	.word	0x47184010
   118d8:	30fff04f 	.word	0x30fff04f
   118dc:	bf00bd10 	.word	0xbf00bd10

000118e0 <nrf_sendto>:
   118e0:	47f0e92d 	.word	0x47f0e92d
   118e4:	e9dd460d 	.word	0xe9dd460d
   118e8:	46168908 	.word	0x46168908
   118ec:	4604461f 	.word	0x4604461f
   118f0:	f8eef007 	.word	0xf8eef007
   118f4:	e9cdb158 	.word	0xe9cdb158
   118f8:	f8d08908 	.word	0xf8d08908
   118fc:	463be008 	.word	0x463be008
   11900:	46294632 	.word	0x46294632
   11904:	46f44620 	.word	0x46f44620
   11908:	47f0e8bd 	.word	0x47f0e8bd
   1190c:	f04f4760 	.word	0xf04f4760
   11910:	e8bd30ff 	.word	0xe8bd30ff
   11914:	bf0087f0 	.word	0xbf0087f0

00011918 <nrf_send>:
   11918:	41f0e92d 	.word	0x41f0e92d
   1191c:	460eb082 	.word	0x460eb082
   11920:	46984617 	.word	0x46984617
   11924:	f0074605 	.word	0xf0074605
   11928:	b160f8d3 	.word	0xb160f8d3
   1192c:	20004604 	.word	0x20004604
   11930:	0000e9cd 	.word	0x0000e9cd
   11934:	463a4643 	.word	0x463a4643
   11938:	46284631 	.word	0x46284631
   1193c:	47a068a4 	.word	0x47a068a4
   11940:	e8bdb002 	.word	0xe8bdb002
   11944:	f04f81f0 	.word	0xf04f81f0
   11948:	e7f930ff 	.word	0xe7f930ff

0001194c <nrf_recvfrom>:
   1194c:	47f0e92d 	.word	0x47f0e92d
   11950:	e9dd460d 	.word	0xe9dd460d
   11954:	46168908 	.word	0x46168908
   11958:	4604461f 	.word	0x4604461f
   1195c:	f8b8f007 	.word	0xf8b8f007
   11960:	e9cdb158 	.word	0xe9cdb158
   11964:	f8d08908 	.word	0xf8d08908
   11968:	463be00c 	.word	0x463be00c
   1196c:	46294632 	.word	0x46294632
   11970:	46f44620 	.word	0x46f44620
   11974:	47f0e8bd 	.word	0x47f0e8bd
   11978:	f04f4760 	.word	0xf04f4760
   1197c:	e8bd30ff 	.word	0xe8bd30ff
   11980:	bf0087f0 	.word	0xbf0087f0

00011984 <nrf_recv>:
   11984:	41f0e92d 	.word	0x41f0e92d
   11988:	460eb082 	.word	0x460eb082
   1198c:	46984617 	.word	0x46984617
   11990:	f0074605 	.word	0xf0074605
   11994:	b160f89d 	.word	0xb160f89d
   11998:	20004604 	.word	0x20004604
   1199c:	0000e9cd 	.word	0x0000e9cd
   119a0:	463a4643 	.word	0x463a4643
   119a4:	46284631 	.word	0x46284631
   119a8:	47a068e4 	.word	0x47a068e4
   119ac:	e8bdb002 	.word	0xe8bdb002
   119b0:	f04f81f0 	.word	0xf04f81f0
   119b4:	e7f930ff 	.word	0xe7f930ff

000119b8 <nrf_connect>:
   119b8:	460db570 	.word	0x460db570
   119bc:	46044616 	.word	0x46044616
   119c0:	f886f007 	.word	0xf886f007
   119c4:	6943b130 	.word	0x6943b130
   119c8:	46294632 	.word	0x46294632
   119cc:	e8bd4620 	.word	0xe8bd4620
   119d0:	47184070 	.word	0x47184070
   119d4:	30fff04f 	.word	0x30fff04f
   119d8:	bf00bd70 	.word	0xbf00bd70

000119dc <nrf_listen>:
   119dc:	460db570 	.word	0x460db570
   119e0:	f0074604 	.word	0xf0074604
   119e4:	b128f875 	.word	0xb128f875
   119e8:	46296983 	.word	0x46296983
   119ec:	e8bd4620 	.word	0xe8bd4620
   119f0:	47184070 	.word	0x47184070
   119f4:	30fff04f 	.word	0x30fff04f
   119f8:	bf00bd70 	.word	0xbf00bd70

000119fc <nrf_accept>:
   119fc:	41f0e92d 	.word	0x41f0e92d
   11a00:	4616460d 	.word	0x4616460d
   11a04:	f0074604 	.word	0xf0074604
   11a08:	b140f863 	.word	0xb140f863
   11a0c:	463269c7 	.word	0x463269c7
   11a10:	46204629 	.word	0x46204629
   11a14:	e8bd46bc 	.word	0xe8bd46bc
   11a18:	230041f0 	.word	0x230041f0
   11a1c:	f04f4760 	.word	0xf04f4760
   11a20:	e8bd30ff 	.word	0xe8bd30ff
   11a24:	bf0081f0 	.word	0xbf0081f0

00011a28 <nrf_bind>:
   11a28:	460db570 	.word	0x460db570
   11a2c:	46044616 	.word	0x46044616
   11a30:	f84ef007 	.word	0xf84ef007
   11a34:	6903b130 	.word	0x6903b130
   11a38:	46294632 	.word	0x46294632
   11a3c:	e8bd4620 	.word	0xe8bd4620
   11a40:	47184070 	.word	0x47184070
   11a44:	30fff04f 	.word	0x30fff04f
   11a48:	bf00bd70 	.word	0xbf00bd70

00011a4c <nrf_setsockopt>:
   11a4c:	41f0e92d 	.word	0x41f0e92d
   11a50:	8018f8dd 	.word	0x8018f8dd
   11a54:	4616460d 	.word	0x4616460d
   11a58:	4604461f 	.word	0x4604461f
   11a5c:	f838f007 	.word	0xf838f007
   11a60:	f8cdb158 	.word	0xf8cdb158
   11a64:	f8d08018 	.word	0xf8d08018
   11a68:	463be020 	.word	0x463be020
   11a6c:	46294632 	.word	0x46294632
   11a70:	46f44620 	.word	0x46f44620
   11a74:	41f0e8bd 	.word	0x41f0e8bd
   11a78:	f04f4760 	.word	0xf04f4760
   11a7c:	e8bd30ff 	.word	0xe8bd30ff
   11a80:	bf0081f0 	.word	0xbf0081f0

00011a84 <nrf_getsockopt>:
   11a84:	41f0e92d 	.word	0x41f0e92d
   11a88:	8018f8dd 	.word	0x8018f8dd
   11a8c:	4616460d 	.word	0x4616460d
   11a90:	4604461f 	.word	0x4604461f
   11a94:	f81cf007 	.word	0xf81cf007
   11a98:	f8cdb158 	.word	0xf8cdb158
   11a9c:	f8d08018 	.word	0xf8d08018
   11aa0:	463be024 	.word	0x463be024
   11aa4:	46294632 	.word	0x46294632
   11aa8:	46f44620 	.word	0x46f44620
   11aac:	41f0e8bd 	.word	0x41f0e8bd
   11ab0:	f04f4760 	.word	0xf04f4760
   11ab4:	e8bd30ff 	.word	0xe8bd30ff
   11ab8:	bf0081f0 	.word	0xbf0081f0

00011abc <nrf_getaddrinfo>:
   11abc:	b8f8f00d 	.word	0xb8f8f00d

00011ac0 <nrf_freeaddrinfo>:
   11ac0:	b8f8f00d 	.word	0xb8f8f00d

00011ac4 <nrf_poll>:
   11ac4:	b8f8f00d 	.word	0xb8f8f00d

00011ac8 <nrf_fcntl>:
   11ac8:	b950f00d 	.word	0xb950f00d

00011acc <bsd_platform_error_handler>:
   11acc:	f7fbb508 	.word	0xf7fbb508
   11ad0:	bd08fc65 	.word	0xbd08fc65

00011ad4 <bsd_init>:
   11ad4:	4c06b510 	.word	0x4c06b510
   11ad8:	b92b7823 	.word	0xb92b7823
   11adc:	ff38f006 	.word	0xff38f006
   11ae0:	2301b908 	.word	0x2301b908
   11ae4:	bd107023 	.word	0xbd107023
   11ae8:	30fff04f 	.word	0x30fff04f
   11aec:	bf00bd10 	.word	0xbf00bd10
   11af0:	20026c01 	.word	0x20026c01

00011af4 <symbol_000fa2a>:
   11af4:	2300b110 	.word	0x2300b110
   11af8:	3300e9c0 	.word	0x3300e9c0
   11afc:	bf004770 	.word	0xbf004770

00011b00 <symbol_00066b4>:
   11b00:	d0052802 	.word	0xd0052802
   11b04:	28034b03 	.word	0x28034b03
   11b08:	4618bf0c 	.word	0x4618bf0c
   11b0c:	47702000 	.word	0x47702000
   11b10:	47704801 	.word	0x47704801
   11b14:	000244d0 	.word	0x000244d0
   11b18:	000244a0 	.word	0x000244a0

00011b1c <symbol_000194a>:
   11b1c:	b159b160 	.word	0xb159b160
   11b20:	6806b570 	.word	0x6806b570
   11b24:	6a4bb966 	.word	0x6a4bb966
   11b28:	460d4604 	.word	0x460d4604
   11b2c:	60604798 	.word	0x60604798
   11b30:	6025b120 	.word	0x6025b120
   11b34:	bd704630 	.word	0xbd704630
   11b38:	47704802 	.word	0x47704802
   11b3c:	bd704802 	.word	0xbd704802
   11b40:	bd704800 	.word	0xbd704800
   11b44:	ffffc180 	.word	0xffffc180
   11b48:	ffffc080 	.word	0xffffc080

00011b4c <symbol_00005ae>:
   11b4c:	6800b110 	.word	0x6800b110
   11b50:	7800b100 	.word	0x7800b100
   11b54:	bf004770 	.word	0xbf004770

00011b58 <rpc_transport_ipc_rx_init>:
   11b58:	f0002800 	.word	0xf0002800
   11b5c:	e92d80ff 	.word	0xe92d80ff
   11b60:	68054ff0 	.word	0x68054ff0
   11b64:	2d00b095 	.word	0x2d00b095
   11b68:	80eef000 	.word	0x80eef000
   11b6c:	2b006883 	.word	0x2b006883
   11b70:	80eaf000 	.word	0x80eaf000
   11b74:	2f006907 	.word	0x2f006907
   11b78:	80e6f000 	.word	0x80e6f000
   11b7c:	2c006a84 	.word	0x2c006a84
   11b80:	80e2f000 	.word	0x80e2f000
   11b84:	2c1b6844 	.word	0x2c1b6844
   11b88:	80e3f240 	.word	0x80e3f240
   11b8c:	2c0b68c4 	.word	0x2c0b68c4
   11b90:	80dff240 	.word	0x80dff240
   11b94:	e014f8d0 	.word	0xe014f8d0
   11b98:	0f17f1be 	.word	0x0f17f1be
   11b9c:	80d9f240 	.word	0x80d9f240
   11ba0:	46042600 	.word	0x46042600
   11ba4:	e9cd486f 	.word	0xe9cd486f
   11ba8:	f8df1200 	.word	0xf8df1200
   11bac:	496ea1d8 	.word	0x496ea1d8
   11bb0:	6ba08006 	.word	0x6ba08006
   11bb4:	c1d0f8df 	.word	0xc1d0f8df
   11bb8:	81d0f8df 	.word	0x81d0f8df
   11bbc:	b1d0f8df 	.word	0xb1d0f8df
   11bc0:	91d0f8df 	.word	0x91d0f8df
   11bc4:	600e4672 	.word	0x600e4672
   11bc8:	0000f8ca 	.word	0x0000f8ca
   11bcc:	46384631 	.word	0x46384631
   11bd0:	6000f8cc 	.word	0x6000f8cc
   11bd4:	3000f8cb 	.word	0x3000f8cb
   11bd8:	6000f8c8 	.word	0x6000f8c8
   11bdc:	6000f8c9 	.word	0x6000f8c9
   11be0:	fa70f011 	.word	0xfa70f011
   11be4:	463869e3 	.word	0x463869e3
   11be8:	69a3603b 	.word	0x69a3603b
   11bec:	f001607b 	.word	0xf001607b
   11bf0:	2201fd45 	.word	0x2201fd45
   11bf4:	0c04f04f 	.word	0x0c04f04f
   11bf8:	495d4b5c 	.word	0x495d4b5c
   11bfc:	5610f8c3 	.word	0x5610f8c3
   11c00:	20806809 	.word	0x20806809
   11c04:	495b9104 	.word	0x495b9104
   11c08:	e010f8dd 	.word	0xe010f8dd
   11c0c:	6614f8c3 	.word	0x6614f8c3
   11c10:	702e6809 	.word	0x702e6809
   11c14:	706e9103 	.word	0x706e9103
   11c18:	70aa70ee 	.word	0x70aa70ee
   11c1c:	6aa19903 	.word	0x6aa19903
   11c20:	e000f8db 	.word	0xe000f8db
   11c24:	6ae16069 	.word	0x6ae16069
   11c28:	60a99c01 	.word	0x60a99c01
   11c2c:	9c0060ec 	.word	0x9c0060ec
   11c30:	61af4951 	.word	0x61af4951
   11c34:	e014f8c5 	.word	0xe014f8c5
   11c38:	f8c3612c 	.word	0xf8c3612c
   11c3c:	680c2590 	.word	0x680c2590
   11c40:	6192f5a1 	.word	0x6192f5a1
   11c44:	9c059405 	.word	0x9c059405
   11c48:	c598f8c3 	.word	0xc598f8c3
   11c4c:	4498f8d1 	.word	0x4498f8d1
   11c50:	6780f44f 	.word	0x6780f44f
   11c54:	9c069406 	.word	0x9c069406
   11c58:	f8c32410 	.word	0xf8c32410
   11c5c:	f8d145a0 	.word	0xf8d145a0
   11c60:	4d4644a0 	.word	0x4d4644a0
   11c64:	9c079407 	.word	0x9c079407
   11c68:	f8c32440 	.word	0xf8c32440
   11c6c:	f8d145a8 	.word	0xf8d145a8
   11c70:	940844a8 	.word	0x940844a8
   11c74:	f8c39c08 	.word	0xf8c39c08
   11c78:	f8d105ac 	.word	0xf8d105ac
   11c7c:	900904ac 	.word	0x900904ac
   11c80:	f8c39809 	.word	0xf8c39809
   11c84:	68086100 	.word	0x68086100
   11c88:	980a900a 	.word	0x980a900a
   11c8c:	6108f8c3 	.word	0x6108f8c3
   11c90:	900b6888 	.word	0x900b6888
   11c94:	f8c3980b 	.word	0xf8c3980b
   11c98:	69086110 	.word	0x69086110
   11c9c:	980c900c 	.word	0x980c900c
   11ca0:	6118f8c3 	.word	0x6118f8c3
   11ca4:	900d6988 	.word	0x900d6988
   11ca8:	f8c3980d 	.word	0xf8c3980d
   11cac:	69c8611c 	.word	0x69c8611c
   11cb0:	7101f501 	.word	0x7101f501
   11cb4:	980e900e 	.word	0x980e900e
   11cb8:	0304f8d3 	.word	0x0304f8d3
   11cbc:	f8c34310 	.word	0xf8c34310
   11cc0:	680c0304 	.word	0x680c0304
   11cc4:	940f482e 	.word	0x940f482e
   11cc8:	f8d39c0f 	.word	0xf8d39c0f
   11ccc:	ea444304 	.word	0xea444304
   11cd0:	f8c3040c 	.word	0xf8c3040c
   11cd4:	680c4304 	.word	0x680c4304
   11cd8:	9c109410 	.word	0x9c109410
   11cdc:	4304f8d3 	.word	0x4304f8d3
   11ce0:	0410f044 	.word	0x0410f044
   11ce4:	4304f8c3 	.word	0x4304f8c3
   11ce8:	9411680c 	.word	0x9411680c
   11cec:	f8d39c11 	.word	0xf8d39c11
   11cf0:	f0444304 	.word	0xf0444304
   11cf4:	f8c30440 	.word	0xf8c30440
   11cf8:	680c4304 	.word	0x680c4304
   11cfc:	9c129412 	.word	0x9c129412
   11d00:	4304f8d3 	.word	0x4304f8d3
   11d04:	0480f044 	.word	0x0480f044
   11d08:	4304f8c3 	.word	0x4304f8c3
   11d0c:	3000f8da 	.word	0x3000f8da
   11d10:	015b6809 	.word	0x015b6809
   11d14:	b2db9113 	.word	0xb2db9113
   11d18:	f8c89913 	.word	0xf8c89913
   11d1c:	f8802000 	.word	0xf8802000
   11d20:	f8c0332a 	.word	0xf8c0332a
   11d24:	60477184 	.word	0x60477184
   11d28:	f8c59602 	.word	0xf8c59602
   11d2c:	f8d56610 	.word	0xf8d56610
   11d30:	93023610 	.word	0x93023610
   11d34:	f8d89b02 	.word	0xf8d89b02
   11d38:	2b013000 	.word	0x2b013000
   11d3c:	f8d9d0fb 	.word	0xf8d9d0fb
   11d40:	b0150000 	.word	0xb0150000
   11d44:	8ff0e8bd 	.word	0x8ff0e8bd
   11d48:	000ef24c 	.word	0x000ef24c
   11d4c:	e8bdb015 	.word	0xe8bdb015
   11d50:	f24c8ff0 	.word	0xf24c8ff0
   11d54:	b0150009 	.word	0xb0150009
   11d58:	8ff0e8bd 	.word	0x8ff0e8bd
   11d5c:	000ef24c 	.word	0x000ef24c
   11d60:	bf004770 	.word	0xbf004770
   11d64:	20025bd0 	.word	0x20025bd0
   11d68:	20020290 	.word	0x20020290
   11d6c:	4002a000 	.word	0x4002a000
   11d70:	4002a610 	.word	0x4002a610
   11d74:	4002a614 	.word	0x4002a614
   11d78:	4002a590 	.word	0x4002a590
   11d7c:	40005000 	.word	0x40005000
   11d80:	e000e100 	.word	0xe000e100
   11d84:	20020288 	.word	0x20020288
   11d88:	20020294 	.word	0x20020294
   11d8c:	2002028c 	.word	0x2002028c
   11d90:	20020298 	.word	0x20020298
   11d94:	20020284 	.word	0x20020284

00011d98 <IPC_IRQHandler>:
   11d98:	4ff0e92d 	.word	0x4ff0e92d
   11d9c:	6580f44f 	.word	0x6580f44f
   11da0:	b0874ca7 	.word	0xb0874ca7
   11da4:	5084f8c4 	.word	0x5084f8c4
   11da8:	8f4ff3bf 	.word	0x8f4ff3bf
   11dac:	8f6ff3bf 	.word	0x8f6ff3bf
   11db0:	f8c44ea4 	.word	0xf8c44ea4
   11db4:	f8d65184 	.word	0xf8d65184
   11db8:	061f330c 	.word	0x061f330c
   11dbc:	80c8f100 	.word	0x80c8f100
   11dc0:	f8d34ba0 	.word	0xf8d34ba0
   11dc4:	07d0230c 	.word	0x07d0230c
   11dc8:	80d4f100 	.word	0x80d4f100
   11dcc:	230cf8d3 	.word	0x230cf8d3
   11dd0:	0240f012 	.word	0x0240f012
   11dd4:	80b6f040 	.word	0x80b6f040
   11dd8:	130cf8d3 	.word	0x130cf8d3
   11ddc:	f1000749 	.word	0xf1000749
   11de0:	f8d380e6 	.word	0xf8d380e6
   11de4:	06da330c 	.word	0x06da330c
   11de8:	809df140 	.word	0x809df140
   11dec:	4a952100 	.word	0x4a952100
   11df0:	f8c24b95 	.word	0xf8c24b95
   11df4:	681b1110 	.word	0x681b1110
   11df8:	9b049304 	.word	0x9b049304
   11dfc:	8270f8df 	.word	0x8270f8df
   11e00:	f8df4f92 	.word	0xf8df4f92
   11e04:	f8d89270 	.word	0xf8d89270
   11e08:	f8daa000 	.word	0xf8daa000
   11e0c:	29001000 	.word	0x29001000
   11e10:	2200d03f 	.word	0x2200d03f
   11e14:	e0024614 	.word	0xe0024614
   11e18:	428c3401 	.word	0x428c3401
   11e1c:	eb0ad227 	.word	0xeb0ad227
   11e20:	68ab05c4 	.word	0x68ab05c4
   11e24:	d0f72b00 	.word	0xd0f72b00
   11e28:	b2f6686e 	.word	0xb2f6686e
   11e2c:	d1f32e01 	.word	0xd1f32e01
   11e30:	f8b96868 	.word	0xf8b96868
   11e34:	ebb33000 	.word	0xebb33000
   11e38:	d1ed4f10 	.word	0xd1ed4f10
   11e3c:	3301686a 	.word	0x3301686a
   11e40:	02fff022 	.word	0x02fff022
   11e44:	0202f042 	.word	0x0202f042
   11e48:	68a8606a 	.word	0x68a8606a
   11e4c:	3000f8a9 	.word	0x3000f8a9
   11e50:	fd00f7ff 	.word	0xfd00f7ff
   11e54:	b9284632 	.word	0xb9284632
   11e58:	f023686b 	.word	0xf023686b
   11e5c:	f04303ff 	.word	0xf04303ff
   11e60:	606b0303 	.word	0x606b0303
   11e64:	1000f8da 	.word	0x1000f8da
   11e68:	428c3401 	.word	0x428c3401
   11e6c:	2a00d3d7 	.word	0x2a00d3d7
   11e70:	b171d1cd 	.word	0xb171d1cd
   11e74:	eb0a4613 	.word	0xeb0a4613
   11e78:	689002c3 	.word	0x689002c3
   11e7c:	b1303301 	.word	0xb1303301
   11e80:	b004f8d2 	.word	0xb004f8d2
   11e84:	fb8bfa5f 	.word	0xfb8bfa5f
   11e88:	0f01f1bb 	.word	0x0f01f1bb
   11e8c:	428bd003 	.word	0x428bd003
   11e90:	f04fd1f1 	.word	0xf04fd1f1
   11e94:	f8d70b00 	.word	0xf8d70b00
   11e98:	f8daa000 	.word	0xf8daa000
   11e9c:	2a002000 	.word	0x2a002000
   11ea0:	2100d03d 	.word	0x2100d03d
   11ea4:	e002460c 	.word	0xe002460c
   11ea8:	42943401 	.word	0x42943401
   11eac:	eb0ad227 	.word	0xeb0ad227
   11eb0:	68ab05c4 	.word	0x68ab05c4
   11eb4:	d0f72b00 	.word	0xd0f72b00
   11eb8:	b2f6686e 	.word	0xb2f6686e
   11ebc:	d1f32e01 	.word	0xd1f32e01
   11ec0:	f8b96868 	.word	0xf8b96868
   11ec4:	ebb33000 	.word	0xebb33000
   11ec8:	d1ed4f10 	.word	0xd1ed4f10
   11ecc:	3301686a 	.word	0x3301686a
   11ed0:	02fff022 	.word	0x02fff022
   11ed4:	0202f042 	.word	0x0202f042
   11ed8:	68a8606a 	.word	0x68a8606a
   11edc:	3000f8a9 	.word	0x3000f8a9
   11ee0:	fcb8f7ff 	.word	0xfcb8f7ff
   11ee4:	b9284631 	.word	0xb9284631
   11ee8:	f022686a 	.word	0xf022686a
   11eec:	f04303ff 	.word	0xf04303ff
   11ef0:	606b0303 	.word	0x606b0303
   11ef4:	2000f8da 	.word	0x2000f8da
   11ef8:	42943401 	.word	0x42943401
   11efc:	2900d3d7 	.word	0x2900d3d7
   11f00:	b162d1cd 	.word	0xb162d1cd
   11f04:	eb0a460b 	.word	0xeb0a460b
   11f08:	688801c3 	.word	0x688801c3
   11f0c:	b1203301 	.word	0xb1203301
   11f10:	b2c96849 	.word	0xb2c96849
   11f14:	f43f2901 	.word	0xf43f2901
   11f18:	4293af76 	.word	0x4293af76
   11f1c:	f1bbd1f3 	.word	0xf1bbd1f3
   11f20:	f47f0f00 	.word	0xf47f0f00
   11f24:	f44faf70 	.word	0xf44faf70
   11f28:	4b496180 	.word	0x4b496180
   11f2c:	681b4a44 	.word	0x681b4a44
   11f30:	b2db015b 	.word	0xb2db015b
   11f34:	332af882 	.word	0x332af882
   11f38:	1184f8c2 	.word	0x1184f8c2
   11f3c:	b0076051 	.word	0xb0076051
   11f40:	8ff0e8bd 	.word	0x8ff0e8bd
   11f44:	4b432206 	.word	0x4b432206
   11f48:	b007601a 	.word	0xb007601a
   11f4c:	8ff0e8bd 	.word	0x8ff0e8bd
   11f50:	fc7cf001 	.word	0xfc7cf001
   11f54:	fde8f001 	.word	0xfde8f001
   11f58:	d1492800 	.word	0xd1492800
   11f5c:	f8c64b3e 	.word	0xf8c64b3e
   11f60:	681b011c 	.word	0x681b011c
   11f64:	9b019301 	.word	0x9b019301
   11f68:	f8d34b36 	.word	0xf8d34b36
   11f6c:	07d0230c 	.word	0x07d0230c
   11f70:	af2cf57f 	.word	0xaf2cf57f
   11f74:	f2482000 	.word	0xf2482000
   11f78:	49380202 	.word	0x49380202
   11f7c:	0100f8c3 	.word	0x0100f8c3
   11f80:	91026809 	.word	0x91026809
   11f84:	f8d39902 	.word	0xf8d39902
   11f88:	42933614 	.word	0x42933614
   11f8c:	d81ed040 	.word	0xd81ed040
   11f90:	d04f2b00 	.word	0xd04f2b00
   11f94:	d9422b02 	.word	0xd9422b02
   11f98:	0201f248 	.word	0x0201f248
   11f9c:	d1494293 	.word	0xd1494293
   11fa0:	22072003 	.word	0x22072003
   11fa4:	4b2e492b 	.word	0x4b2e492b
   11fa8:	601a6008 	.word	0x601a6008
   11fac:	4d29e7cd 	.word	0x4d29e7cd
   11fb0:	f8c36829 	.word	0xf8c36829
   11fb4:	29012108 	.word	0x29012108
   11fb8:	d05d492a 	.word	0xd05d492a
   11fbc:	9203680a 	.word	0x9203680a
   11fc0:	f8d39a03 	.word	0xf8d39a03
   11fc4:	06db330c 	.word	0x06db330c
   11fc8:	af10f53f 	.word	0xaf10f53f
   11fcc:	4a26e716 	.word	0x4a26e716
   11fd0:	d8144293 	.word	0xd8144293
   11fd4:	6f88f1b3 	.word	0x6f88f1b3
   11fd8:	f248d814 	.word	0xf248d814
   11fdc:	42930203 	.word	0x42930203
   11fe0:	2003d128 	.word	0x2003d128
   11fe4:	491b2204 	.word	0x491b2204
   11fe8:	60084b1d 	.word	0x60084b1d
   11fec:	e7ac601a 	.word	0xe7ac601a
   11ff0:	f88423e0 	.word	0xf88423e0
   11ff4:	6065332a 	.word	0x6065332a
   11ff8:	e8bdb007 	.word	0xe8bdb007
   11ffc:	4a1b8ff0 	.word	0x4a1b8ff0
   12000:	d1174293 	.word	0xd1174293
   12004:	49132003 	.word	0x49132003
   12008:	60084a15 	.word	0x60084a15
   1200c:	e79c6013 	.word	0xe79c6013
   12010:	22062003 	.word	0x22062003
   12014:	4b12490f 	.word	0x4b12490f
   12018:	601a6008 	.word	0x601a6008
   1201c:	2303e795 	.word	0x2303e795
   12020:	490c4618 	.word	0x490c4618
   12024:	600b4a0e 	.word	0x600b4a0e
   12028:	b0076013 	.word	0xb0076013
   1202c:	4ff0e8bd 	.word	0x4ff0e8bd
   12030:	bc34f7ff 	.word	0xbc34f7ff
   12034:	49072303 	.word	0x49072303
   12038:	600b4a09 	.word	0x600b4a09
   1203c:	e7846013 	.word	0xe7846013
   12040:	e000e100 	.word	0xe000e100
   12044:	4002a000 	.word	0x4002a000
   12048:	4002a110 	.word	0x4002a110
   1204c:	20020290 	.word	0x20020290
   12050:	20020288 	.word	0x20020288
   12054:	2002028c 	.word	0x2002028c
   12058:	4002a11c 	.word	0x4002a11c
   1205c:	4002a100 	.word	0x4002a100
   12060:	20020284 	.word	0x20020284
   12064:	4002a108 	.word	0x4002a108
   12068:	04400004 	.word	0x04400004
   1206c:	05500001 	.word	0x05500001
   12070:	20020294 	.word	0x20020294
   12074:	20025bd0 	.word	0x20025bd0
   12078:	680b4a37 	.word	0x680b4a37
   1207c:	93056812 	.word	0x93056812
   12080:	48366893 	.word	0x48366893
   12084:	60034936 	.word	0x60034936
   12088:	9a056854 	.word	0x9a056854
   1208c:	b16b600c 	.word	0xb16b600c
   12090:	681bb164 	.word	0x681bb164
   12094:	d8022b10 	.word	0xd8022b10
   12098:	2a106822 	.word	0x2a106822
   1209c:	2103d90c 	.word	0x2103d90c
   120a0:	0206f24c 	.word	0x0206f24c
   120a4:	60294b2f 	.word	0x60294b2f
   120a8:	e74e601a 	.word	0xe74e601a
   120ac:	22102103 	.word	0x22102103
   120b0:	60294b2c 	.word	0x60294b2c
   120b4:	e748601a 	.word	0xe748601a
   120b8:	80b4f8df 	.word	0x80b4f8df
   120bc:	d0422a00 	.word	0xd0422a00
   120c0:	f1042300 	.word	0xf1042300
   120c4:	461e0904 	.word	0x461e0904
   120c8:	3601e002 	.word	0x3601e002
   120cc:	d22a4296 	.word	0xd22a4296
   120d0:	19e100f7 	.word	0x19e100f7
   120d4:	28006888 	.word	0x28006888
   120d8:	f8d1d0f7 	.word	0xf8d1d0f7
   120dc:	fa5fa004 	.word	0xfa5fa004
   120e0:	f1bafa8a 	.word	0xf1bafa8a
   120e4:	d1f00f01 	.word	0xd1f00f01
   120e8:	c004f8d1 	.word	0xc004f8d1
   120ec:	0000f8b8 	.word	0x0000f8b8
   120f0:	4f1cebb0 	.word	0x4f1cebb0
   120f4:	684bd1e9 	.word	0x684bd1e9
   120f8:	f0231c42 	.word	0xf0231c42
   120fc:	f04303ff 	.word	0xf04303ff
   12100:	604b0302 	.word	0x604b0302
   12104:	f8a86888 	.word	0xf8a86888
   12108:	f7ff2000 	.word	0xf7ff2000
   1210c:	4653fba3 	.word	0x4653fba3
   12110:	f859b938 	.word	0xf859b938
   12114:	f0222007 	.word	0xf0222007
   12118:	f04202ff 	.word	0xf04202ff
   1211c:	f8490203 	.word	0xf8490203
   12120:	68222007 	.word	0x68222007
   12124:	2b00e7d1 	.word	0x2b00e7d1
   12128:	b912d1c8 	.word	0xb912d1c8
   1212c:	4293e00b 	.word	0x4293e00b
   12130:	eb04d009 	.word	0xeb04d009
   12134:	688801c3 	.word	0x688801c3
   12138:	28003301 	.word	0x28003301
   1213c:	6849d0f7 	.word	0x6849d0f7
   12140:	2901b2c9 	.word	0x2901b2c9
   12144:	2002d1f3 	.word	0x2002d1f3
   12148:	f44f4b07 	.word	0xf44f4b07
   1214c:	4a076180 	.word	0x4a076180
   12150:	6028681b 	.word	0x6028681b
   12154:	bf00e6ec 	.word	0xbf00e6ec
   12158:	20020298 	.word	0x20020298
   1215c:	20020294 	.word	0x20020294
   12160:	20020290 	.word	0x20020290
   12164:	20020284 	.word	0x20020284
   12168:	20020288 	.word	0x20020288
   1216c:	e000e100 	.word	0xe000e100
   12170:	20025bd0 	.word	0x20025bd0

00012174 <rpc_transport_msg_free>:
   12174:	4b18b430 	.word	0x4b18b430
   12178:	6825681c 	.word	0x6825681c
   1217c:	68a3b16d 	.word	0x68a3b16d
   12180:	d0274283 	.word	0xd0274283
   12184:	e0022300 	.word	0xe0022300
   12188:	42816889 	.word	0x42816889
   1218c:	3301d019 	.word	0x3301d019
   12190:	42ab00da 	.word	0x42ab00da
   12194:	0102eb04 	.word	0x0102eb04
   12198:	4b10d1f6 	.word	0x4b10d1f6
   1219c:	6825681c 	.word	0x6825681c
   121a0:	68a3b16d 	.word	0x68a3b16d
   121a4:	d0154283 	.word	0xd0154283
   121a8:	e0022300 	.word	0xe0022300
   121ac:	42816889 	.word	0x42816889
   121b0:	3301d007 	.word	0x3301d007
   121b4:	429d00da 	.word	0x429d00da
   121b8:	0102eb04 	.word	0x0102eb04
   121bc:	bc30d1f6 	.word	0xbc30d1f6
   121c0:	32044770 	.word	0x32044770
   121c4:	f02358a3 	.word	0xf02358a3
   121c8:	f04303ff 	.word	0xf04303ff
   121cc:	50a30303 	.word	0x50a30303
   121d0:	4770bc30 	.word	0x4770bc30
   121d4:	e7f52204 	.word	0xe7f52204
   121d8:	20020294 	.word	0x20020294
   121dc:	20020290 	.word	0x20020290

000121e0 <block_cipher_df>:
   121e0:	4ff0e92d 	.word	0x4ff0e92d
   121e4:	7fc0f5b2 	.word	0x7fc0f5b2
   121e8:	7d49f5ad 	.word	0x7d49f5ad
   121ec:	8119f200 	.word	0x8119f200
   121f0:	460c4692 	.word	0x460c4692
   121f4:	72d0f44f 	.word	0x72d0f44f
   121f8:	46812100 	.word	0x46812100
   121fc:	f010a860 	.word	0xf010a860
   12200:	a81aff61 	.word	0xa81aff61
   12204:	fcd8f00a 	.word	0xfcd8f00a
   12208:	23302000 	.word	0x23302000
   1220c:	ea4fad66 	.word	0xea4fad66
   12210:	f8ad221a 	.word	0xf8ad221a
   12214:	f88d0190 	.word	0xf88d0190
   12218:	46212192 	.word	0x46212192
   1221c:	46284652 	.word	0x46284652
   12220:	3197f88d 	.word	0x3197f88d
   12224:	a193f88d 	.word	0xa193f88d
   12228:	f010ae06 	.word	0xf010ae06
   1222c:	2280ff21 	.word	0x2280ff21
   12230:	f8054633 	.word	0xf8054633
   12234:	af0e200a 	.word	0xaf0e200a
   12238:	f8031b99 	.word	0xf8031b99
   1223c:	429f1b01 	.word	0x429f1b01
   12240:	f44fd1fa 	.word	0xf44fd1fa
   12244:	46317280 	.word	0x46317280
   12248:	f00aa81a 	.word	0xf00aa81a
   1224c:	4683fcc1 	.word	0x4683fcc1
   12250:	f0402800 	.word	0xf0402800
   12254:	900180c8 	.word	0x900180c8
   12258:	0a19f10a 	.word	0x0a19f10a
   1225c:	2210ac02 	.word	0x2210ac02
   12260:	46202100 	.word	0x46202100
   12264:	ff2ef010 	.word	0xff2ef010
   12268:	ad6446d0 	.word	0xad6446d0
   1226c:	f8157822 	.word	0xf8157822
   12270:	f8943c10 	.word	0xf8943c10
   12274:	f815c001 	.word	0xf815c001
   12278:	78a01c0f 	.word	0x78a01c0f
   1227c:	f8154053 	.word	0xf8154053
   12280:	ea8c2c0e 	.word	0xea8c2c0e
   12284:	40500c01 	.word	0x40500c01
   12288:	f81578e1 	.word	0xf81578e1
   1228c:	f8942c0d 	.word	0xf8942c0d
   12290:	4051e004 	.word	0x4051e004
   12294:	2c0cf815 	.word	0x2c0cf815
   12298:	ea8e7023 	.word	0xea8e7023
   1229c:	f8150202 	.word	0xf8150202
   122a0:	f8943c0b 	.word	0xf8943c0b
   122a4:	f884e005 	.word	0xf884e005
   122a8:	ea8ec001 	.word	0xea8ec001
   122ac:	f8150303 	.word	0xf8150303
   122b0:	f894cc0a 	.word	0xf894cc0a
   122b4:	70a0e006 	.word	0x70a0e006
   122b8:	0c0cea8e 	.word	0x0c0cea8e
   122bc:	0c09f815 	.word	0x0c09f815
   122c0:	e007f894 	.word	0xe007f894
   122c4:	ea8e70e1 	.word	0xea8e70e1
   122c8:	f8150000 	.word	0xf8150000
   122cc:	f8941c08 	.word	0xf8941c08
   122d0:	7122e008 	.word	0x7122e008
   122d4:	0101ea8e 	.word	0x0101ea8e
   122d8:	2c07f815 	.word	0x2c07f815
   122dc:	e009f894 	.word	0xe009f894
   122e0:	ea8e7163 	.word	0xea8e7163
   122e4:	7aa30202 	.word	0x7aa30202
   122e8:	ec06f815 	.word	0xec06f815
   122ec:	c006f884 	.word	0xc006f884
   122f0:	030eea83 	.word	0x030eea83
   122f4:	722171e0 	.word	0x722171e0
   122f8:	72a37262 	.word	0x72a37262
   122fc:	f8157ae1 	.word	0xf8157ae1
   12300:	f8943c05 	.word	0xf8943c05
   12304:	7b60c00c 	.word	0x7b60c00c
   12308:	f815404b 	.word	0xf815404b
   1230c:	f8152c04 	.word	0xf8152c04
   12310:	ea8c1c03 	.word	0xea8c1c03
   12314:	40410202 	.word	0x40410202
   12318:	c00ef894 	.word	0xc00ef894
   1231c:	0c02f815 	.word	0x0c02f815
   12320:	e00ff894 	.word	0xe00ff894
   12324:	0000ea8c 	.word	0x0000ea8c
   12328:	cc01f815 	.word	0xcc01f815
   1232c:	ea8e72e3 	.word	0xea8e72e3
   12330:	73220c0c 	.word	0x73220c0c
   12334:	73a07361 	.word	0x73a07361
   12338:	46224623 	.word	0x46224623
   1233c:	a81a2101 	.word	0xa81a2101
   12340:	c00ff884 	.word	0xc00ff884
   12344:	fbc2f00b 	.word	0xfbc2f00b
   12348:	0f10f1b8 	.word	0x0f10f1b8
   1234c:	bf944683 	.word	0xbf944683
   12350:	0808eba8 	.word	0x0808eba8
   12354:	0810f1a8 	.word	0x0810f1a8
   12358:	d1452800 	.word	0xd1452800
   1235c:	f1b83510 	.word	0xf1b83510
   12360:	d1830f00 	.word	0xd1830f00
   12364:	22109d01 	.word	0x22109d01
   12368:	19784621 	.word	0x19784621
   1236c:	fe80f010 	.word	0xfe80f010
   12370:	3183f89d 	.word	0x3183f89d
   12374:	0210f105 	.word	0x0210f105
   12378:	2a303301 	.word	0x2a303301
   1237c:	f88d9201 	.word	0xf88d9201
   12380:	f47f3183 	.word	0xf47f3183
   12384:	f44faf6c 	.word	0xf44faf6c
   12388:	46397280 	.word	0x46397280
   1238c:	f00aa81a 	.word	0xf00aa81a
   12390:	4683fc1f 	.word	0x4683fc1f
   12394:	464dbb40 	.word	0x464dbb40
   12398:	0830f109 	.word	0x0830f109
   1239c:	461aab16 	.word	0x461aab16
   123a0:	a81a2101 	.word	0xa81a2101
   123a4:	fb92f00b 	.word	0xfb92f00b
   123a8:	b9e84683 	.word	0xb9e84683
   123ac:	46282210 	.word	0x46282210
   123b0:	4415a916 	.word	0x4415a916
   123b4:	fe5cf010 	.word	0xfe5cf010
   123b8:	d1ef4545 	.word	0xd1ef4545
   123bc:	f00aa81a 	.word	0xf00aa81a
   123c0:	a860fc01 	.word	0xa860fc01
   123c4:	71d0f44f 	.word	0x71d0f44f
   123c8:	fc38f006 	.word	0xfc38f006
   123cc:	21304638 	.word	0x21304638
   123d0:	fc34f006 	.word	0xfc34f006
   123d4:	21204630 	.word	0x21204630
   123d8:	fc30f006 	.word	0xfc30f006
   123dc:	21104620 	.word	0x21104620
   123e0:	fc2cf006 	.word	0xfc2cf006
   123e4:	ac02e018 	.word	0xac02e018
   123e8:	f00aa81a 	.word	0xf00aa81a
   123ec:	a860fbeb 	.word	0xa860fbeb
   123f0:	71d0f44f 	.word	0x71d0f44f
   123f4:	fc22f006 	.word	0xfc22f006
   123f8:	21304638 	.word	0x21304638
   123fc:	fc1ef006 	.word	0xfc1ef006
   12400:	21204630 	.word	0x21204630
   12404:	fc1af006 	.word	0xfc1af006
   12408:	21104620 	.word	0x21104620
   1240c:	fc16f006 	.word	0xfc16f006
   12410:	21304648 	.word	0x21304648
   12414:	fc12f006 	.word	0xfc12f006
   12418:	f50d4658 	.word	0xf50d4658
   1241c:	e8bd7d49 	.word	0xe8bd7d49
   12420:	f06f8ff0 	.word	0xf06f8ff0
   12424:	e7f70b37 	.word	0xe7f70b37

00012428 <symbol_000078b>:
   12428:	72a0f44f 	.word	0x72a0f44f
   1242c:	f0102100 	.word	0xf0102100
   12430:	bf00be49 	.word	0xbf00be49

00012434 <symbol_0001c64>:
   12434:	b510b158 	.word	0xb510b158
   12438:	30204604 	.word	0x30204604
   1243c:	fbc2f00a 	.word	0xfbc2f00a
   12440:	e8bd4620 	.word	0xe8bd4620
   12444:	f44f4010 	.word	0xf44f4010
   12448:	f00671a0 	.word	0xf00671a0
   1244c:	4770bbf7 	.word	0x4770bbf7

00012450 <symbol_000ccf0>:
   12450:	6983b5f0 	.word	0x6983b5f0
   12454:	f5b3b0ed 	.word	0xf5b3b0ed
   12458:	f2007fc0 	.word	0xf2007fc0
   1245c:	f5c380e1 	.word	0xf5c380e1
   12460:	429373c0 	.word	0x429373c0
   12464:	80dcf0c0 	.word	0x80dcf0c0
   12468:	46154604 	.word	0x46154604
   1246c:	f44f460e 	.word	0xf44f460e
   12470:	210072c0 	.word	0x210072c0
   12474:	f010a80c 	.word	0xf010a80c
   12478:	a90cfe25 	.word	0xa90cfe25
   1247c:	3138f8d4 	.word	0x3138f8d4
   12480:	f8d469a2 	.word	0xf8d469a2
   12484:	4798013c 	.word	0x4798013c
   12488:	f0402800 	.word	0xf0402800
   1248c:	69a780cc 	.word	0x69a780cc
   12490:	b94db106 	.word	0xb94db106
   12494:	463aa90c 	.word	0x463aa90c
   12498:	f7ff4608 	.word	0xf7ff4608
   1249c:	4605fea1 	.word	0x4605fea1
   124a0:	4628b188 	.word	0x4628b188
   124a4:	bdf0b06d 	.word	0xbdf0b06d
   124a8:	462aab0c 	.word	0x462aab0c
   124ac:	463119d8 	.word	0x463119d8
   124b0:	fddef010 	.word	0xfddef010
   124b4:	a90c442f 	.word	0xa90c442f
   124b8:	4608463a 	.word	0x4608463a
   124bc:	fe90f7ff 	.word	0xfe90f7ff
   124c0:	28004605 	.word	0x28004605
   124c4:	4668d1ed 	.word	0x4668d1ed
   124c8:	46292230 	.word	0x46292230
   124cc:	fdfaf010 	.word	0xfdfaf010
   124d0:	f104462e 	.word	0xf104462e
   124d4:	7be20720 	.word	0x7be20720
   124d8:	0306eb0d 	.word	0x0306eb0d
   124dc:	b2d23201 	.word	0xb2d23201
   124e0:	2a0073e2 	.word	0x2a0073e2
   124e4:	7ba2d14d 	.word	0x7ba2d14d
   124e8:	b2d23201 	.word	0xb2d23201
   124ec:	2a0073a2 	.word	0x2a0073a2
   124f0:	7b62d147 	.word	0x7b62d147
   124f4:	b2d23201 	.word	0xb2d23201
   124f8:	2a007362 	.word	0x2a007362
   124fc:	7b22d141 	.word	0x7b22d141
   12500:	b2d23201 	.word	0xb2d23201
   12504:	2a007322 	.word	0x2a007322
   12508:	7ae2d13b 	.word	0x7ae2d13b
   1250c:	b2d23201 	.word	0xb2d23201
   12510:	2a0072e2 	.word	0x2a0072e2
   12514:	7aa2d135 	.word	0x7aa2d135
   12518:	b2d23201 	.word	0xb2d23201
   1251c:	2a0072a2 	.word	0x2a0072a2
   12520:	7a62d12f 	.word	0x7a62d12f
   12524:	b2d23201 	.word	0xb2d23201
   12528:	bb527262 	.word	0xbb527262
   1252c:	32017a22 	.word	0x32017a22
   12530:	7222b2d2 	.word	0x7222b2d2
   12534:	79e2bb2a 	.word	0x79e2bb2a
   12538:	b2d23201 	.word	0xb2d23201
   1253c:	bb0271e2 	.word	0xbb0271e2
   12540:	320179a2 	.word	0x320179a2
   12544:	71a2b2d2 	.word	0x71a2b2d2
   12548:	7962b9da 	.word	0x7962b9da
   1254c:	b2d23201 	.word	0xb2d23201
   12550:	b9b27162 	.word	0xb9b27162
   12554:	32017922 	.word	0x32017922
   12558:	7122b2d2 	.word	0x7122b2d2
   1255c:	78e2b98a 	.word	0x78e2b98a
   12560:	b2d23201 	.word	0xb2d23201
   12564:	b96270e2 	.word	0xb96270e2
   12568:	320178a2 	.word	0x320178a2
   1256c:	70a2b2d2 	.word	0x70a2b2d2
   12570:	7862b93a 	.word	0x7862b93a
   12574:	b2d23201 	.word	0xb2d23201
   12578:	b9127062 	.word	0xb9127062
   1257c:	32017822 	.word	0x32017822
   12580:	46227022 	.word	0x46227022
   12584:	46382101 	.word	0x46382101
   12588:	faa0f00b 	.word	0xfaa0f00b
   1258c:	28004605 	.word	0x28004605
   12590:	3610d187 	.word	0x3610d187
   12594:	d19e2e30 	.word	0xd19e2e30
   12598:	9b0c9901 	.word	0x9b0c9901
   1259c:	9a0d9800 	.word	0x9a0d9800
   125a0:	404a4058 	.word	0x404a4058
   125a4:	99029b0e 	.word	0x99029b0e
   125a8:	40599000 	.word	0x40599000
   125ac:	9b0f9803 	.word	0x9b0f9803
   125b0:	40439201 	.word	0x40439201
   125b4:	98049a10 	.word	0x98049a10
   125b8:	40509102 	.word	0x40509102
   125bc:	9a119905 	.word	0x9a119905
   125c0:	40519303 	.word	0x40519303
   125c4:	9a069b12 	.word	0x9a069b12
   125c8:	405a9004 	.word	0x405a9004
   125cc:	9b139807 	.word	0x9b139807
   125d0:	40589105 	.word	0x40589105
   125d4:	9b149908 	.word	0x9b149908
   125d8:	40599206 	.word	0x40599206
   125dc:	9b159a09 	.word	0x9b159a09
   125e0:	405a9007 	.word	0x405a9007
   125e4:	9b16980a 	.word	0x9b16980a
   125e8:	40439108 	.word	0x40439108
   125ec:	2309e9cd 	.word	0x2309e9cd
   125f0:	9b179a0b 	.word	0x9b179a0b
   125f4:	40534638 	.word	0x40534638
   125f8:	f44f4669 	.word	0xf44f4669
   125fc:	930b7280 	.word	0x930b7280
   12600:	fae6f00a 	.word	0xfae6f00a
   12604:	28004605 	.word	0x28004605
   12608:	af4bf47f 	.word	0xaf4bf47f
   1260c:	a9082210 	.word	0xa9082210
   12610:	f0104620 	.word	0xf0104620
   12614:	2301fd2d 	.word	0x2301fd2d
   12618:	61234628 	.word	0x61234628
   1261c:	bdf0b06d 	.word	0xbdf0b06d
   12620:	0537f06f 	.word	0x0537f06f
   12624:	f06fe73d 	.word	0xf06fe73d
   12628:	e73a0533 	.word	0xe73a0533

0001262c <symbol_0001e1e>:
   1262c:	41f0e92d 	.word	0x41f0e92d
   12630:	46164604 	.word	0x46164604
   12634:	b0882220 	.word	0xb0882220
   12638:	460f18a5 	.word	0x460f18a5
   1263c:	21004668 	.word	0x21004668
   12640:	f0104698 	.word	0xf0104698
   12644:	4628fd3f 	.word	0x4628fd3f
   12648:	fab6f00a 	.word	0xfab6f00a
   1264c:	f2422220 	.word	0xf2422220
   12650:	f8c47310 	.word	0xf8c47310
   12654:	e9c47138 	.word	0xe9c47138
   12658:	46282306 	.word	0x46282306
   1265c:	613cf8c4 	.word	0x613cf8c4
   12660:	f44f4669 	.word	0xf44f4669
   12664:	f00a7280 	.word	0xf00a7280
   12668:	b920fab3 	.word	0xb920fab3
   1266c:	46204641 	.word	0x46204641
   12670:	f7ff9a0e 	.word	0xf7ff9a0e
   12674:	b008feed 	.word	0xb008feed
   12678:	81f0e8bd 	.word	0x81f0e8bd

0001267c <symbol_000268c>:
   1267c:	4ff0e92d 	.word	0x4ff0e92d
   12680:	6f80f5b2 	.word	0x6f80f5b2
   12684:	f200b0f9 	.word	0xf200b0f9
   12688:	46048226 	.word	0x46048226
   1268c:	460f4615 	.word	0x460f4615
   12690:	46682230 	.word	0x46682230
   12694:	f0102100 	.word	0xf0102100
   12698:	6922fd15 	.word	0x6922fd15
   1269c:	429a69e3 	.word	0x429a69e3
   126a0:	6963dc01 	.word	0x6963dc01
   126a4:	69a3b313 	.word	0x69a3b313
   126a8:	7fc0f5b3 	.word	0x7fc0f5b3
   126ac:	8216f200 	.word	0x8216f200
   126b0:	0a60f10d 	.word	0x0a60f10d
   126b4:	72c0f44f 	.word	0x72c0f44f
   126b8:	46502100 	.word	0x46502100
   126bc:	fd02f010 	.word	0xfd02f010
   126c0:	f8d44651 	.word	0xf8d44651
   126c4:	69a23138 	.word	0x69a23138
   126c8:	013cf8d4 	.word	0x013cf8d4
   126cc:	f06f4798 	.word	0xf06f4798
   126d0:	b9380933 	.word	0xb9380933
   126d4:	465169a2 	.word	0x465169a2
   126d8:	f7ff4650 	.word	0xf7ff4650
   126dc:	4681fd81 	.word	0x4681fd81
   126e0:	d0772800 	.word	0xd0772800
   126e4:	b0794648 	.word	0xb0794648
   126e8:	8ff0e8bd 	.word	0x8ff0e8bd
   126ec:	0820f104 	.word	0x0820f104
   126f0:	f0002d00 	.word	0xf0002d00
   126f4:	ae0c812b 	.word	0xae0c812b
   126f8:	2d10e00e 	.word	0x2d10e00e
   126fc:	bf2846a9 	.word	0xbf2846a9
   12700:	0910f04f 	.word	0x0910f04f
   12704:	46314638 	.word	0x46314638
   12708:	f010464a 	.word	0xf010464a
   1270c:	ebb5fcb1 	.word	0xebb5fcb1
   12710:	444f0509 	.word	0x444f0509
   12714:	811af000 	.word	0x811af000
   12718:	33017be3 	.word	0x33017be3
   1271c:	73e3b2db 	.word	0x73e3b2db
   12720:	d14d2b00 	.word	0xd14d2b00
   12724:	33017ba3 	.word	0x33017ba3
   12728:	73a3b2db 	.word	0x73a3b2db
   1272c:	d1472b00 	.word	0xd1472b00
   12730:	33017b63 	.word	0x33017b63
   12734:	7363b2db 	.word	0x7363b2db
   12738:	d1412b00 	.word	0xd1412b00
   1273c:	33017b23 	.word	0x33017b23
   12740:	7323b2db 	.word	0x7323b2db
   12744:	d13b2b00 	.word	0xd13b2b00
   12748:	33017ae3 	.word	0x33017ae3
   1274c:	72e3b2db 	.word	0x72e3b2db
   12750:	d1352b00 	.word	0xd1352b00
   12754:	33017aa3 	.word	0x33017aa3
   12758:	72a3b2db 	.word	0x72a3b2db
   1275c:	d12f2b00 	.word	0xd12f2b00
   12760:	33017a63 	.word	0x33017a63
   12764:	7263b2db 	.word	0x7263b2db
   12768:	7a23bb53 	.word	0x7a23bb53
   1276c:	b2db3301 	.word	0xb2db3301
   12770:	bb2b7223 	.word	0xbb2b7223
   12774:	330179e3 	.word	0x330179e3
   12778:	71e3b2db 	.word	0x71e3b2db
   1277c:	79a3bb03 	.word	0x79a3bb03
   12780:	b2db3301 	.word	0xb2db3301
   12784:	b9db71a3 	.word	0xb9db71a3
   12788:	33017963 	.word	0x33017963
   1278c:	7163b2db 	.word	0x7163b2db
   12790:	7923b9b3 	.word	0x7923b9b3
   12794:	b2db3301 	.word	0xb2db3301
   12798:	b98b7123 	.word	0xb98b7123
   1279c:	330178e3 	.word	0x330178e3
   127a0:	70e3b2db 	.word	0x70e3b2db
   127a4:	78a3b963 	.word	0x78a3b963
   127a8:	b2db3301 	.word	0xb2db3301
   127ac:	b93b70a3 	.word	0xb93b70a3
   127b0:	33017863 	.word	0x33017863
   127b4:	7063b2db 	.word	0x7063b2db
   127b8:	7823b913 	.word	0x7823b913
   127bc:	70233301 	.word	0x70233301
   127c0:	46224633 	.word	0x46224633
   127c4:	46402101 	.word	0x46402101
   127c8:	f980f00b 	.word	0xf980f00b
   127cc:	28004681 	.word	0x28004681
   127d0:	e787d093 	.word	0xe787d093
   127d4:	4630ae0c 	.word	0x4630ae0c
   127d8:	46492230 	.word	0x46492230
   127dc:	fc72f010 	.word	0xfc72f010
   127e0:	f10446cb 	.word	0xf10446cb
   127e4:	7be20820 	.word	0x7be20820
   127e8:	030beb06 	.word	0x030beb06
   127ec:	b2d23201 	.word	0xb2d23201
   127f0:	2a0073e2 	.word	0x2a0073e2
   127f4:	7ba2d14d 	.word	0x7ba2d14d
   127f8:	b2d23201 	.word	0xb2d23201
   127fc:	2a0073a2 	.word	0x2a0073a2
   12800:	7b62d147 	.word	0x7b62d147
   12804:	b2d23201 	.word	0xb2d23201
   12808:	2a007362 	.word	0x2a007362
   1280c:	7b22d141 	.word	0x7b22d141
   12810:	b2d23201 	.word	0xb2d23201
   12814:	2a007322 	.word	0x2a007322
   12818:	7ae2d13b 	.word	0x7ae2d13b
   1281c:	b2d23201 	.word	0xb2d23201
   12820:	2a0072e2 	.word	0x2a0072e2
   12824:	7aa2d135 	.word	0x7aa2d135
   12828:	b2d23201 	.word	0xb2d23201
   1282c:	2a0072a2 	.word	0x2a0072a2
   12830:	7a62d12f 	.word	0x7a62d12f
   12834:	b2d23201 	.word	0xb2d23201
   12838:	bb527262 	.word	0xbb527262
   1283c:	32017a22 	.word	0x32017a22
   12840:	7222b2d2 	.word	0x7222b2d2
   12844:	79e2bb2a 	.word	0x79e2bb2a
   12848:	b2d23201 	.word	0xb2d23201
   1284c:	bb0271e2 	.word	0xbb0271e2
   12850:	320179a2 	.word	0x320179a2
   12854:	71a2b2d2 	.word	0x71a2b2d2
   12858:	7962b9da 	.word	0x7962b9da
   1285c:	b2d23201 	.word	0xb2d23201
   12860:	b9b27162 	.word	0xb9b27162
   12864:	32017922 	.word	0x32017922
   12868:	7122b2d2 	.word	0x7122b2d2
   1286c:	78e2b98a 	.word	0x78e2b98a
   12870:	b2d23201 	.word	0xb2d23201
   12874:	b96270e2 	.word	0xb96270e2
   12878:	320178a2 	.word	0x320178a2
   1287c:	70a2b2d2 	.word	0x70a2b2d2
   12880:	7862b93a 	.word	0x7862b93a
   12884:	b2d23201 	.word	0xb2d23201
   12888:	b9127062 	.word	0xb9127062
   1288c:	32017822 	.word	0x32017822
   12890:	46227022 	.word	0x46227022
   12894:	46402101 	.word	0x46402101
   12898:	f918f00b 	.word	0xf918f00b
   1289c:	28004681 	.word	0x28004681
   128a0:	af20f47f 	.word	0xaf20f47f
   128a4:	0b10f10b 	.word	0x0b10f10b
   128a8:	0f30f1bb 	.word	0x0f30f1bb
   128ac:	6870d19b 	.word	0x6870d19b
   128b0:	3000f8da 	.word	0x3000f8da
   128b4:	f8da6831 	.word	0xf8da6831
   128b8:	40592004 	.word	0x40592004
   128bc:	f8da4042 	.word	0xf8da4042
   128c0:	68b03008 	.word	0x68b03008
   128c4:	ea836031 	.word	0xea836031
   128c8:	f8da0100 	.word	0xf8da0100
   128cc:	68f0300c 	.word	0x68f0300c
   128d0:	40586072 	.word	0x40586072
   128d4:	f8da6932 	.word	0xf8da6932
   128d8:	60b13010 	.word	0x60b13010
   128dc:	f8da4053 	.word	0xf8da4053
   128e0:	69721014 	.word	0x69721014
   128e4:	404a60f0 	.word	0x404a60f0
   128e8:	f8da69b0 	.word	0xf8da69b0
   128ec:	61331018 	.word	0x61331018
   128f0:	f8da4048 	.word	0xf8da4048
   128f4:	69f1301c 	.word	0x69f1301c
   128f8:	404b6172 	.word	0x404b6172
   128fc:	f8da6a32 	.word	0xf8da6a32
   12900:	61b01020 	.word	0x61b01020
   12904:	6a704051 	.word	0x6a704051
   12908:	2024f8da 	.word	0x2024f8da
   1290c:	405061f3 	.word	0x405061f3
   12910:	3028f8da 	.word	0x3028f8da
   12914:	62316ab2 	.word	0x62316ab2
   12918:	e9c64053 	.word	0xe9c64053
   1291c:	6af20309 	.word	0x6af20309
   12920:	302cf8da 	.word	0x302cf8da
   12924:	40534631 	.word	0x40534631
   12928:	f44f4640 	.word	0xf44f4640
   1292c:	62f37280 	.word	0x62f37280
   12930:	f94ef00a 	.word	0xf94ef00a
   12934:	28004681 	.word	0x28004681
   12938:	aed4f47f 	.word	0xaed4f47f
   1293c:	a9142210 	.word	0xa9142210
   12940:	f0104620 	.word	0xf0104620
   12944:	2301fb95 	.word	0x2301fb95
   12948:	e6d16123 	.word	0xe6d16123
   1294c:	0a60f10d 	.word	0x0a60f10d
   12950:	22304650 	.word	0x22304650
   12954:	f0102100 	.word	0xf0102100
   12958:	2500fbb5 	.word	0x2500fbb5
   1295c:	eb0a7be2 	.word	0xeb0a7be2
   12960:	32010305 	.word	0x32010305
   12964:	73e2b2d2 	.word	0x73e2b2d2
   12968:	d14d2a00 	.word	0xd14d2a00
   1296c:	32017ba2 	.word	0x32017ba2
   12970:	73a2b2d2 	.word	0x73a2b2d2
   12974:	d1472a00 	.word	0xd1472a00
   12978:	32017b62 	.word	0x32017b62
   1297c:	7362b2d2 	.word	0x7362b2d2
   12980:	d1412a00 	.word	0xd1412a00
   12984:	32017b22 	.word	0x32017b22
   12988:	7322b2d2 	.word	0x7322b2d2
   1298c:	d13b2a00 	.word	0xd13b2a00
   12990:	32017ae2 	.word	0x32017ae2
   12994:	72e2b2d2 	.word	0x72e2b2d2
   12998:	d1352a00 	.word	0xd1352a00
   1299c:	32017aa2 	.word	0x32017aa2
   129a0:	72a2b2d2 	.word	0x72a2b2d2
   129a4:	d12f2a00 	.word	0xd12f2a00
   129a8:	32017a62 	.word	0x32017a62
   129ac:	7262b2d2 	.word	0x7262b2d2
   129b0:	7a22bb52 	.word	0x7a22bb52
   129b4:	b2d23201 	.word	0xb2d23201
   129b8:	bb2a7222 	.word	0xbb2a7222
   129bc:	320179e2 	.word	0x320179e2
   129c0:	71e2b2d2 	.word	0x71e2b2d2
   129c4:	79a2bb02 	.word	0x79a2bb02
   129c8:	b2d23201 	.word	0xb2d23201
   129cc:	b9da71a2 	.word	0xb9da71a2
   129d0:	32017962 	.word	0x32017962
   129d4:	7162b2d2 	.word	0x7162b2d2
   129d8:	7922b9b2 	.word	0x7922b9b2
   129dc:	b2d23201 	.word	0xb2d23201
   129e0:	b98a7122 	.word	0xb98a7122
   129e4:	320178e2 	.word	0x320178e2
   129e8:	70e2b2d2 	.word	0x70e2b2d2
   129ec:	78a2b962 	.word	0x78a2b962
   129f0:	b2d23201 	.word	0xb2d23201
   129f4:	b93a70a2 	.word	0xb93a70a2
   129f8:	32017862 	.word	0x32017862
   129fc:	7062b2d2 	.word	0x7062b2d2
   12a00:	7822b912 	.word	0x7822b912
   12a04:	70223201 	.word	0x70223201
   12a08:	21014622 	.word	0x21014622
   12a0c:	f00b4640 	.word	0xf00b4640
   12a10:	4681f85d 	.word	0x4681f85d
   12a14:	f47f2800 	.word	0xf47f2800
   12a18:	3510ae65 	.word	0x3510ae65
   12a1c:	d19d2d30 	.word	0xd19d2d30
   12a20:	1200e9da 	.word	0x1200e9da
   12a24:	98019b00 	.word	0x98019b00
   12a28:	40424059 	.word	0x40424059
   12a2c:	3008f8da 	.word	0x3008f8da
   12a30:	f8ca9802 	.word	0xf8ca9802
   12a34:	ea831000 	.word	0xea831000
   12a38:	f8da0100 	.word	0xf8da0100
   12a3c:	9803300c 	.word	0x9803300c
   12a40:	2004f8ca 	.word	0x2004f8ca
   12a44:	9a044058 	.word	0x9a044058
   12a48:	3010f8da 	.word	0x3010f8da
   12a4c:	1008f8ca 	.word	0x1008f8ca
   12a50:	99054053 	.word	0x99054053
   12a54:	2014f8da 	.word	0x2014f8da
   12a58:	000cf8ca 	.word	0x000cf8ca
   12a5c:	9806404a 	.word	0x9806404a
   12a60:	1018f8da 	.word	0x1018f8da
   12a64:	3010f8ca 	.word	0x3010f8ca
   12a68:	9b074048 	.word	0x9b074048
   12a6c:	101cf8da 	.word	0x101cf8da
   12a70:	2014f8ca 	.word	0x2014f8ca
   12a74:	f8da404b 	.word	0xf8da404b
   12a78:	99082020 	.word	0x99082020
   12a7c:	0018f8ca 	.word	0x0018f8ca
   12a80:	f8da4051 	.word	0xf8da4051
   12a84:	9a090024 	.word	0x9a090024
   12a88:	301cf8ca 	.word	0x301cf8ca
   12a8c:	f8da4050 	.word	0xf8da4050
   12a90:	9a0a3028 	.word	0x9a0a3028
   12a94:	1020f8ca 	.word	0x1020f8ca
   12a98:	e9ca4053 	.word	0xe9ca4053
   12a9c:	9a0b0309 	.word	0x9a0b0309
   12aa0:	302cf8da 	.word	0x302cf8da
   12aa4:	40534640 	.word	0x40534640
   12aa8:	f44f4651 	.word	0xf44f4651
   12aac:	f8ca7280 	.word	0xf8ca7280
   12ab0:	f00a302c 	.word	0xf00a302c
   12ab4:	4681f88d 	.word	0x4681f88d
   12ab8:	f47f2800 	.word	0xf47f2800
   12abc:	2210ae13 	.word	0x2210ae13
   12ac0:	4620a920 	.word	0x4620a920
   12ac4:	fad4f010 	.word	0xfad4f010
   12ac8:	69234648 	.word	0x69234648
   12acc:	61233301 	.word	0x61233301
   12ad0:	e8bdb079 	.word	0xe8bdb079
   12ad4:	f06f8ff0 	.word	0xf06f8ff0
   12ad8:	e6030935 	.word	0xe6030935
   12adc:	0937f06f 	.word	0x0937f06f
   12ae0:	bf00e600 	.word	0xbf00e600

00012ae4 <packet_handler_create>:
   12ae4:	b5382801 	.word	0xb5382801
   12ae8:	4614460d 	.word	0x4614460d
   12aec:	db11d00d 	.word	0xdb11d00d
   12af0:	dc0f2803 	.word	0xdc0f2803
   12af4:	f00a2010 	.word	0xf00a2010
   12af8:	2218f81f 	.word	0x2218f81f
   12afc:	4b08b120 	.word	0x4b08b120
   12b00:	44136045 	.word	0x44136045
   12b04:	60036084 	.word	0x60036084
   12b08:	2014bd38 	.word	0x2014bd38
   12b0c:	f814f00a 	.word	0xf814f00a
   12b10:	e7f32230 	.word	0xe7f32230
   12b14:	f00a200c 	.word	0xf00a200c
   12b18:	2200f80f 	.word	0x2200f80f
   12b1c:	bf00e7ee 	.word	0xbf00e7ee
   12b20:	00024550 	.word	0x00024550

00012b24 <packet_handler_delete>:
   12b24:	4604b510 	.word	0x4604b510
   12b28:	691b6803 	.word	0x691b6803
   12b2c:	68234798 	.word	0x68234798
   12b30:	695b4620 	.word	0x695b4620
   12b34:	46204798 	.word	0x46204798
   12b38:	4010e8bd 	.word	0x4010e8bd
   12b3c:	b81af00a 	.word	0xb81af00a

00012b40 <symbol_0002469>:
   12b40:	460db570 	.word	0x460db570
   12b44:	f0014604 	.word	0xf0014604
   12b48:	2d03fc23 	.word	0x2d03fc23
   12b4c:	d1257025 	.word	0xd1257025
   12b50:	25012308 	.word	0x25012308
   12b54:	49154a14 	.word	0x49154a14
   12b58:	622360a3 	.word	0x622360a3
   12b5c:	62e36523 	.word	0x62e36523
   12b60:	60e263a3 	.word	0x60e263a3
   12b64:	4a134b12 	.word	0x4a134b12
   12b68:	48144e13 	.word	0x48144e13
   12b6c:	65606321 	.word	0x65606321
   12b70:	64a363e2 	.word	0x64a363e2
   12b74:	61e56065 	.word	0x61e56065
   12b78:	62a564e5 	.word	0x62a564e5
   12b7c:	e9c46365 	.word	0xe9c46365
   12b80:	62665510 	.word	0x62665510
   12b84:	f0061d20 	.word	0xf0061d20
   12b88:	65a0fde7 	.word	0x65a0fde7
   12b8c:	004cf104 	.word	0x004cf104
   12b90:	fde2f006 	.word	0xfde2f006
   12b94:	0517e9c4 	.word	0x0517e9c4
   12b98:	bd702000 	.word	0xbd702000
   12b9c:	f0014620 	.word	0xf0014620
   12ba0:	4807fbf7 	.word	0x4807fbf7
   12ba4:	bf00bd70 	.word	0xbf00bd70
   12ba8:	00024618 	.word	0x00024618
   12bac:	000245b8 	.word	0x000245b8
   12bb0:	2002a1f8 	.word	0x2002a1f8
   12bb4:	000245d8 	.word	0x000245d8
   12bb8:	00024598 	.word	0x00024598
   12bbc:	000245f8 	.word	0x000245f8
   12bc0:	ffffb180 	.word	0xffffb180

00012bc4 <secure_client_socket>:
   12bc4:	41f0e92d 	.word	0x41f0e92d
   12bc8:	680b460c 	.word	0x680b460c
   12bcc:	f4236989 	.word	0xf4236989
   12bd0:	60233300 	.word	0x60233300
   12bd4:	23006822 	.word	0x23006822
   12bd8:	1280f422 	.word	0x1280f422
   12bdc:	f2476022 	.word	0xf2476022
   12be0:	68270281 	.word	0x68270281
   12be4:	f0024606 	.word	0xf0024606
   12be8:	2800fedb 	.word	0x2800fedb
   12bec:	4605d03b 	.word	0x4605d03b
   12bf0:	eb064b28 	.word	0xeb064b28
   12bf4:	eb0301c6 	.word	0xeb0301c6
   12bf8:	22240181 	.word	0x22240181
   12bfc:	f0103014 	.word	0xf0103014
   12c00:	68abfa37 	.word	0x68abfa37
   12c04:	8090f8df 	.word	0x8090f8df
   12c08:	60ab3324 	.word	0x60ab3324
   12c0c:	46296823 	.word	0x46296823
   12c10:	0308ea03 	.word	0x0308ea03
   12c14:	030af043 	.word	0x030af043
   12c18:	f2476023 	.word	0xf2476023
   12c1c:	463b0281 	.word	0x463b0281
   12c20:	f0024620 	.word	0xf0024620
   12c24:	b960fedd 	.word	0xb960fedd
   12c28:	00db6823 	.word	0x00db6823
   12c2c:	f04fd40b 	.word	0xf04fd40b
   12c30:	f64f33ff 	.word	0xf64f33ff
   12c34:	210b72ff 	.word	0x210b72ff
   12c38:	f0024630 	.word	0xf0024630
   12c3c:	b128fee5 	.word	0xb128fee5
   12c40:	e8bd6027 	.word	0xe8bd6027
   12c44:	207381f0 	.word	0x207381f0
   12c48:	81f0e8bd 	.word	0x81f0e8bd
   12c4c:	6280f04f 	.word	0x6280f04f
   12c50:	46114630 	.word	0x46114630
   12c54:	33fff04f 	.word	0x33fff04f
   12c58:	fed6f002 	.word	0xfed6f002
   12c5c:	2873b130 	.word	0x2873b130
   12c60:	6027d0ef 	.word	0x6027d0ef
   12c64:	200ce7ed 	.word	0x200ce7ed
   12c68:	81f0e8bd 	.word	0x81f0e8bd
   12c6c:	f0236823 	.word	0xf0236823
   12c70:	60236380 	.word	0x60236380
   12c74:	ea036823 	.word	0xea036823
   12c78:	f0480808 	.word	0xf0480808
   12c7c:	6023030c 	.word	0x6023030c
   12c80:	f4436823 	.word	0xf4436823
   12c84:	60233300 	.word	0x60233300
   12c88:	f4436823 	.word	0xf4436823
   12c8c:	60231380 	.word	0x60231380
   12c90:	81f0e8bd 	.word	0x81f0e8bd
   12c94:	2002029c 	.word	0x2002029c
   12c98:	ffff0000 	.word	0xffff0000

00012c9c <tls_interface_init>:
   12c9c:	47702000 	.word	0x47702000

00012ca0 <tls_interface_open>:
   12ca0:	f020b538 	.word	0xf020b538
   12ca4:	2b020308 	.word	0x2b020308
   12ca8:	202fd006 	.word	0x202fd006
   12cac:	fe62f7fc 	.word	0xfe62f7fc
   12cb0:	35fff04f 	.word	0x35fff04f
   12cb4:	bd384628 	.word	0xbd384628
   12cb8:	1e4a4614 	.word	0x1e4a4614
   12cbc:	d8282a01 	.word	0xd8282a01
   12cc0:	2901bb14 	.word	0x2901bb14
   12cc4:	2301bf06 	.word	0x2301bf06
   12cc8:	7482f44f 	.word	0x7482f44f
   12ccc:	7487f44f 	.word	0x7487f44f
   12cd0:	f002461a 	.word	0xf002461a
   12cd4:	1e05fec5 	.word	0x1e05fec5
   12cd8:	4b15db26 	.word	0x4b15db26
   12cdc:	00c5eb05 	.word	0x00c5eb05
   12ce0:	0080eb03 	.word	0x0080eb03
   12ce4:	49132224 	.word	0x49132224
   12ce8:	f9c2f010 	.word	0xf9c2f010
   12cec:	f0024628 	.word	0xf0024628
   12cf0:	6803fd0d 	.word	0x6803fd0d
   12cf4:	f4236144 	.word	0xf4236144
   12cf8:	60031380 	.word	0x60031380
   12cfc:	f4236803 	.word	0xf4236803
   12d00:	60033300 	.word	0x60033300
   12d04:	bd384628 	.word	0xbd384628
   12d08:	d0082901 	.word	0xd0082901
   12d0c:	7f87f5b4 	.word	0x7f87f5b4
   12d10:	2016d0de 	.word	0x2016d0de
   12d14:	fe2ef7fc 	.word	0xfe2ef7fc
   12d18:	35fff04f 	.word	0x35fff04f
   12d1c:	f5b4e7ca 	.word	0xf5b4e7ca
   12d20:	d1f67f82 	.word	0xd1f67f82
   12d24:	e7d3460b 	.word	0xe7d3460b
   12d28:	35fff04f 	.word	0x35fff04f
   12d2c:	bf00e7c2 	.word	0xbf00e7c2
   12d30:	2002029c 	.word	0x2002029c
   12d34:	00024638 	.word	0x00024638

00012d38 <tls_interface_close>:
   12d38:	4604b510 	.word	0x4604b510
   12d3c:	fce6f002 	.word	0xfce6f002
   12d40:	4620b120 	.word	0x4620b120
   12d44:	4010e8bd 	.word	0x4010e8bd
   12d48:	bf36f002 	.word	0xbf36f002
   12d4c:	f7fc2009 	.word	0xf7fc2009
   12d50:	f04ffe11 	.word	0xf04ffe11
   12d54:	bd1030ff 	.word	0xbd1030ff

00012d58 <tls_interface_sendto>:
   12d58:	47f0e92d 	.word	0x47f0e92d
   12d5c:	e9dd460d 	.word	0xe9dd460d
   12d60:	46168908 	.word	0x46168908
   12d64:	4604461f 	.word	0x4604461f
   12d68:	fcd0f002 	.word	0xfcd0f002
   12d6c:	d03b2800 	.word	0xd03b2800
   12d70:	b29b6803 	.word	0xb29b6803
   12d74:	d0392b0c 	.word	0xd0392b0c
   12d78:	b29b6803 	.word	0xb29b6803
   12d7c:	d1112b0b 	.word	0xd1112b0b
   12d80:	eb044b20 	.word	0xeb044b20
   12d84:	f81304c4 	.word	0xf81304c4
   12d88:	2b023024 	.word	0x2b023024
   12d8c:	6903d038 	.word	0x6903d038
   12d90:	bf142b01 	.word	0xbf142b01
   12d94:	202a2039 	.word	0x202a2039
   12d98:	fdecf7fc 	.word	0xfdecf7fc
   12d9c:	30fff04f 	.word	0x30fff04f
   12da0:	87f0e8bd 	.word	0x87f0e8bd
   12da4:	2b016903 	.word	0x2b016903
   12da8:	2b02d00b 	.word	0x2b02d00b
   12dac:	2039d001 	.word	0x2039d001
   12db0:	6803e7f2 	.word	0x6803e7f2
   12db4:	2b02b29b 	.word	0x2b02b29b
   12db8:	6803d007 	.word	0x6803d007
   12dbc:	2b04b29b 	.word	0x2b04b29b
   12dc0:	6803d003 	.word	0x6803d003
   12dc4:	2b05b29b 	.word	0x2b05b29b
   12dc8:	4b0ed1f1 	.word	0x4b0ed1f1
   12dcc:	02c4eb04 	.word	0x02c4eb04
   12dd0:	3022f813 	.word	0x3022f813
   12dd4:	d1ea2b02 	.word	0xd1ea2b02
   12dd8:	46204601 	.word	0x46204601
   12ddc:	fef2f7ff 	.word	0xfef2f7ff
   12de0:	d0032800 	.word	0xd0032800
   12de4:	e7d9dcd8 	.word	0xe7d9dcd8
   12de8:	e7d52009 	.word	0xe7d52009
   12dec:	8908e9cd 	.word	0x8908e9cd
   12df0:	4632463b 	.word	0x4632463b
   12df4:	46204629 	.word	0x46204629
   12df8:	47f0e8bd 	.word	0x47f0e8bd
   12dfc:	bf4cf002 	.word	0xbf4cf002
   12e00:	e7c92023 	.word	0xe7c92023
   12e04:	2002029c 	.word	0x2002029c

00012e08 <tls_interface_recvfrom>:
   12e08:	47f0e92d 	.word	0x47f0e92d
   12e0c:	e9dd460d 	.word	0xe9dd460d
   12e10:	46168908 	.word	0x46168908
   12e14:	4604461f 	.word	0x4604461f
   12e18:	fc78f002 	.word	0xfc78f002
   12e1c:	d0382800 	.word	0xd0382800
   12e20:	b29b6803 	.word	0xb29b6803
   12e24:	d00f2b0c 	.word	0xd00f2b0c
   12e28:	b29b6803 	.word	0xb29b6803
   12e2c:	d00b2b0d 	.word	0xd00b2b0d
   12e30:	2b016903 	.word	0x2b016903
   12e34:	2b02d01a 	.word	0x2b02d01a
   12e38:	2023d010 	.word	0x2023d010
   12e3c:	fd9af7fc 	.word	0xfd9af7fc
   12e40:	30fff04f 	.word	0x30fff04f
   12e44:	87f0e8bd 	.word	0x87f0e8bd
   12e48:	8908e9cd 	.word	0x8908e9cd
   12e4c:	4632463b 	.word	0x4632463b
   12e50:	46204629 	.word	0x46204629
   12e54:	47f0e8bd 	.word	0x47f0e8bd
   12e58:	b858f003 	.word	0xb858f003
   12e5c:	b29b6803 	.word	0xb29b6803
   12e60:	d0072b02 	.word	0xd0072b02
   12e64:	b29b6803 	.word	0xb29b6803
   12e68:	d0032b04 	.word	0xd0032b04
   12e6c:	b29b6803 	.word	0xb29b6803
   12e70:	d1e22b05 	.word	0xd1e22b05
   12e74:	eb044b08 	.word	0xeb044b08
   12e78:	f81302c4 	.word	0xf81302c4
   12e7c:	2b023022 	.word	0x2b023022
   12e80:	4601d1db 	.word	0x4601d1db
   12e84:	f7ff4620 	.word	0xf7ff4620
   12e88:	2800fe9d 	.word	0x2800fe9d
   12e8c:	dcd5d0dc 	.word	0xdcd5d0dc
   12e90:	2009e7d6 	.word	0x2009e7d6
   12e94:	bf00e7d2 	.word	0xbf00e7d2
   12e98:	2002029c 	.word	0x2002029c

00012e9c <tls_interface_bind>:
   12e9c:	43f8e92d 	.word	0x43f8e92d
   12ea0:	4617460c 	.word	0x4617460c
   12ea4:	f0024606 	.word	0xf0024606
   12ea8:	2800fc31 	.word	0x2800fc31
   12eac:	6803d04c 	.word	0x6803d04c
   12eb0:	b29b4605 	.word	0xb29b4605
   12eb4:	d1502b02 	.word	0xd1502b02
   12eb8:	463a4621 	.word	0x463a4621
   12ebc:	f0034630 	.word	0xf0034630
   12ec0:	4604f9fb 	.word	0x4604f9fb
   12ec4:	2c00b120 	.word	0x2c00b120
   12ec8:	4620dc3f 	.word	0x4620dc3f
   12ecc:	83f8e8bd 	.word	0x83f8e8bd
   12ed0:	07c6eb06 	.word	0x07c6eb06
   12ed4:	8094f8df 	.word	0x8094f8df
   12ed8:	f81800bf 	.word	0xf81800bf
   12edc:	2b013007 	.word	0x2b013007
   12ee0:	4603d1f3 	.word	0x4603d1f3
   12ee4:	0281f247 	.word	0x0281f247
   12ee8:	463069a9 	.word	0x463069a9
   12eec:	fd58f002 	.word	0xfd58f002
   12ef0:	b3b04681 	.word	0xb3b04681
   12ef4:	0107eb08 	.word	0x0107eb08
   12ef8:	30142224 	.word	0x30142224
   12efc:	f8b8f010 	.word	0xf8b8f010
   12f00:	3008f8d9 	.word	0x3008f8d9
   12f04:	33244649 	.word	0x33244649
   12f08:	3008f8c9 	.word	0x3008f8c9
   12f0c:	2304682a 	.word	0x2304682a
   12f10:	04120c12 	.word	0x04120c12
   12f14:	020af042 	.word	0x020af042
   12f18:	4628602a 	.word	0x4628602a
   12f1c:	0281f247 	.word	0x0281f247
   12f20:	fd5ef002 	.word	0xfd5ef002
   12f24:	682bb9f8 	.word	0x682bb9f8
   12f28:	d41800db 	.word	0xd41800db
   12f2c:	f04f4630 	.word	0xf04f4630
   12f30:	f64f33ff 	.word	0xf64f33ff
   12f34:	210b72ff 	.word	0x210b72ff
   12f38:	fd66f002 	.word	0xfd66f002
   12f3c:	d0c42800 	.word	0xd0c42800
   12f40:	46042304 	.word	0x46042304
   12f44:	e7be602b 	.word	0xe7be602b
   12f48:	46202409 	.word	0x46202409
   12f4c:	34fff04f 	.word	0x34fff04f
   12f50:	fd10f7fc 	.word	0xfd10f7fc
   12f54:	e8bd4620 	.word	0xe8bd4620
   12f58:	242d83f8 	.word	0x242d83f8
   12f5c:	2473e7f5 	.word	0x2473e7f5
   12f60:	240ce7f3 	.word	0x240ce7f3
   12f64:	4604e7f1 	.word	0x4604e7f1
   12f68:	bf00e7ad 	.word	0xbf00e7ad
   12f6c:	2002029c 	.word	0x2002029c

00012f70 <tls_interface_connect>:
   12f70:	460eb5f8 	.word	0x460eb5f8
   12f74:	46044617 	.word	0x46044617
   12f78:	fbc8f002 	.word	0xfbc8f002
   12f7c:	4b13b1e8 	.word	0x4b13b1e8
   12f80:	02c4eb04 	.word	0x02c4eb04
   12f84:	3022f813 	.word	0x3022f813
   12f88:	d11c2b02 	.word	0xd11c2b02
   12f8c:	46056803 	.word	0x46056803
   12f90:	2b02b29b 	.word	0x2b02b29b
   12f94:	6803d003 	.word	0x6803d003
   12f98:	2b04b29b 	.word	0x2b04b29b
   12f9c:	463ad113 	.word	0x463ad113
   12fa0:	46204631 	.word	0x46204631
   12fa4:	f8def003 	.word	0xf8def003
   12fa8:	2800b110 	.word	0x2800b110
   12fac:	bdf8dc06 	.word	0xbdf8dc06
   12fb0:	46204629 	.word	0x46204629
   12fb4:	fe06f7ff 	.word	0xfe06f7ff
   12fb8:	2009e7f7 	.word	0x2009e7f7
   12fbc:	fcdaf7fc 	.word	0xfcdaf7fc
   12fc0:	30fff04f 	.word	0x30fff04f
   12fc4:	202dbdf8 	.word	0x202dbdf8
   12fc8:	bf00e7f8 	.word	0xbf00e7f8
   12fcc:	2002029c 	.word	0x2002029c

00012fd0 <tls_interface_listen>:
   12fd0:	47f0e92d 	.word	0x47f0e92d
   12fd4:	4606460f 	.word	0x4606460f
   12fd8:	fb98f002 	.word	0xfb98f002
   12fdc:	d06b2800 	.word	0xd06b2800
   12fe0:	46046903 	.word	0x46046903
   12fe4:	d1652b01 	.word	0xd1652b01
   12fe8:	b29b6803 	.word	0xb29b6803
   12fec:	d0562b04 	.word	0xd0562b04
   12ff0:	b29b6823 	.word	0xb29b6823
   12ff4:	d15d2b0b 	.word	0xd15d2b0b
   12ff8:	f8df00f3 	.word	0xf8df00f3
   12ffc:	199a90c0 	.word	0x199a90c0
   13000:	2022f819 	.word	0x2022f819
   13004:	d1552a01 	.word	0xd1552a01
   13008:	44332201 	.word	0x44332201
   1300c:	f809009d 	.word	0xf809009d
   13010:	69a12005 	.word	0x69a12005
   13014:	f2472300 	.word	0xf2472300
   13018:	46300281 	.word	0x46300281
   1301c:	8000f8d4 	.word	0x8000f8d4
   13020:	fcbef002 	.word	0xfcbef002
   13024:	28004682 	.word	0x28004682
   13028:	eb09d042 	.word	0xeb09d042
   1302c:	22240105 	.word	0x22240105
   13030:	f0103014 	.word	0xf0103014
   13034:	f8daf81d 	.word	0xf8daf81d
   13038:	46513008 	.word	0x46513008
   1303c:	f8ca3324 	.word	0xf8ca3324
   13040:	68223008 	.word	0x68223008
   13044:	0c124643 	.word	0x0c124643
   13048:	f0420412 	.word	0xf0420412
   1304c:	6022020a 	.word	0x6022020a
   13050:	f2474620 	.word	0xf2474620
   13054:	f0020281 	.word	0xf0020281
   13058:	b9e0fcc3 	.word	0xb9e0fcc3
   1305c:	00db6823 	.word	0x00db6823
   13060:	f04fd40e 	.word	0xf04fd40e
   13064:	f64f33ff 	.word	0xf64f33ff
   13068:	210b72ff 	.word	0x210b72ff
   1306c:	f0024630 	.word	0xf0024630
   13070:	b160fccb 	.word	0xb160fccb
   13074:	f8c42800 	.word	0xf8c42800
   13078:	dc028000 	.word	0xdc028000
   1307c:	87f0e8bd 	.word	0x87f0e8bd
   13080:	f7fc2073 	.word	0xf7fc2073
   13084:	f04ffc77 	.word	0xf04ffc77
   13088:	e8bd30ff 	.word	0xe8bd30ff
   1308c:	463987f0 	.word	0x463987f0
   13090:	f0034630 	.word	0xf0034630
   13094:	2800f9a7 	.word	0x2800f9a7
   13098:	e8bddcf3 	.word	0xe8bddcf3
   1309c:	00f387f0 	.word	0x00f387f0
   130a0:	9018f8df 	.word	0x9018f8df
   130a4:	f819199a 	.word	0xf819199a
   130a8:	2a022022 	.word	0x2a022022
   130ac:	e7abd1a0 	.word	0xe7abd1a0
   130b0:	e7e6200c 	.word	0xe7e6200c
   130b4:	e7e4202d 	.word	0xe7e4202d
   130b8:	e7e22009 	.word	0xe7e22009
   130bc:	2002029c 	.word	0x2002029c

000130c0 <tls_interface_accept>:
   130c0:	460cb5f8 	.word	0x460cb5f8
   130c4:	461f4616 	.word	0x461f4616
   130c8:	f0024605 	.word	0xf0024605
   130cc:	2800fb1f 	.word	0x2800fb1f
   130d0:	6800d03b 	.word	0x6800d03b
   130d4:	2806b280 	.word	0x2806b280
   130d8:	4621d137 	.word	0x4621d137
   130dc:	4632463b 	.word	0x4632463b
   130e0:	f0034628 	.word	0xf0034628
   130e4:	4604f9f5 	.word	0x4604f9f5
   130e8:	2c00b118 	.word	0x2c00b118
   130ec:	4620dc2e 	.word	0x4620dc2e
   130f0:	4628bdf8 	.word	0x4628bdf8
   130f4:	fb0af002 	.word	0xfb0af002
   130f8:	4f186803 	.word	0x4f186803
   130fc:	3300f423 	.word	0x3300f423
   13100:	68036003 	.word	0x68036003
   13104:	05c5eb05 	.word	0x05c5eb05
   13108:	1380f423 	.word	0x1380f423
   1310c:	60034606 	.word	0x60034606
   13110:	0185eb07 	.word	0x0185eb07
   13114:	46382224 	.word	0x46382224
   13118:	ffaaf00f 	.word	0xffaaf00f
   1311c:	703b2302 	.word	0x703b2302
   13120:	46206833 	.word	0x46206833
   13124:	041b0c1b 	.word	0x041b0c1b
   13128:	030bf043 	.word	0x030bf043
   1312c:	f64f6033 	.word	0xf64f6033
   13130:	f04f72ff 	.word	0xf04f72ff
   13134:	210c33ff 	.word	0x210c33ff
   13138:	fc66f002 	.word	0xfc66f002
   1313c:	28004604 	.word	0x28004604
   13140:	2000d0d5 	.word	0x2000d0d5
   13144:	fd38f002 	.word	0xfd38f002
   13148:	2409e7cf 	.word	0x2409e7cf
   1314c:	f04f4620 	.word	0xf04f4620
   13150:	f7fc34ff 	.word	0xf7fc34ff
   13154:	4620fc0f 	.word	0x4620fc0f
   13158:	bf00bdf8 	.word	0xbf00bdf8
   1315c:	2002029c 	.word	0x2002029c

00013160 <tls_interface_setopt>:
   13160:	41f0e92d 	.word	0x41f0e92d
   13164:	7f8df5b1 	.word	0x7f8df5b1
   13168:	d11d9f06 	.word	0xd11d9f06
   1316c:	b1c3461c 	.word	0xb1c3461c
   13170:	4605b1bf 	.word	0x4605b1bf
   13174:	f0024616 	.word	0xf0024616
   13178:	b1c8fac9 	.word	0xb1c8fac9
   1317c:	b29b6803 	.word	0xb29b6803
   13180:	d0072b02 	.word	0xd0072b02
   13184:	b29b6803 	.word	0xb29b6803
   13188:	d0032b04 	.word	0xd0032b04
   1318c:	b29b6803 	.word	0xb29b6803
   13190:	d10d2b05 	.word	0xd10d2b05
   13194:	2e033e01 	.word	0x2e033e01
   13198:	e8dfd851 	.word	0xe8dfd851
   1319c:	3225f006 	.word	0x3225f006
   131a0:	200e0b18 	.word	0x200e0b18
   131a4:	81f0e8bd 	.word	0x81f0e8bd
   131a8:	41f0e8bd 	.word	0x41f0e8bd
   131ac:	bac8f003 	.word	0xbac8f003
   131b0:	e7f72009 	.word	0xe7f72009
   131b4:	d1392f04 	.word	0xd1392f04
   131b8:	2b026823 	.word	0x2b026823
   131bc:	4a21d836 	.word	0x4a21d836
   131c0:	05c5eb05 	.word	0x05c5eb05
   131c4:	0585eb02 	.word	0x0585eb02
   131c8:	200070ab 	.word	0x200070ab
   131cc:	2f01e7ea 	.word	0x2f01e7ea
   131d0:	7823d12c 	.word	0x7823d12c
   131d4:	d8292b01 	.word	0xd8292b01
   131d8:	eb054a1a 	.word	0xeb054a1a
   131dc:	eb0205c5 	.word	0xeb0205c5
   131e0:	70530285 	.word	0x70530285
   131e4:	e7dd2000 	.word	0xe7dd2000
   131e8:	d11f2f04 	.word	0xd11f2f04
   131ec:	b1f86820 	.word	0xb1f86820
   131f0:	d11b2801 	.word	0xd11b2801
   131f4:	eb054b13 	.word	0xeb054b13
   131f8:	f80305c5 	.word	0xf80305c5
   131fc:	20000025 	.word	0x20000025
   13200:	ea5fe7d0 	.word	0xea5fe7d0
   13204:	d0110c97 	.word	0xd0110c97
   13208:	0603f017 	.word	0x0603f017
   1320c:	eb05d10e 	.word	0xeb05d10e
   13210:	00ad05c5 	.word	0x00ad05c5
   13214:	1d284b0b 	.word	0x1d284b0b
   13218:	442b4418 	.word	0x442b4418
   1321c:	4621463a 	.word	0x4621463a
   13220:	c003f883 	.word	0xc003f883
   13224:	ff24f00f 	.word	0xff24f00f
   13228:	e7bb4630 	.word	0xe7bb4630
   1322c:	e7b92016 	.word	0xe7b92016
   13230:	4b042202 	.word	0x4b042202
   13234:	05c5eb05 	.word	0x05c5eb05
   13238:	2025f803 	.word	0x2025f803
   1323c:	202ae7b2 	.word	0x202ae7b2
   13240:	bf00e7b0 	.word	0xbf00e7b0
   13244:	2002029c 	.word	0x2002029c

00013248 <tls_interface_getopt>:
   13248:	41f0e92d 	.word	0x41f0e92d
   1324c:	7f8df5b1 	.word	0x7f8df5b1
   13250:	d1129f06 	.word	0xd1129f06
   13254:	b16b461d 	.word	0xb16b461d
   13258:	4606b167 	.word	0x4606b167
   1325c:	f0024614 	.word	0xf0024614
   13260:	2800fa55 	.word	0x2800fa55
   13264:	3c01d04f 	.word	0x3c01d04f
   13268:	d8522c03 	.word	0xd8522c03
   1326c:	f004e8df 	.word	0xf004e8df
   13270:	09152139 	.word	0x09152139
   13274:	e8bd200e 	.word	0xe8bd200e
   13278:	e8bd81f0 	.word	0xe8bd81f0
   1327c:	f00341f0 	.word	0xf00341f0
   13280:	683bbb1b 	.word	0x683bbb1b
   13284:	d13c2b04 	.word	0xd13c2b04
   13288:	eb064b23 	.word	0xeb064b23
   1328c:	eb0306c6 	.word	0xeb0306c6
   13290:	78b30686 	.word	0x78b30686
   13294:	602b2000 	.word	0x602b2000
   13298:	683be7ed 	.word	0x683be7ed
   1329c:	d1302b04 	.word	0xd1302b04
   132a0:	eb064b1d 	.word	0xeb064b1d
   132a4:	eb0306c6 	.word	0xeb0306c6
   132a8:	78730686 	.word	0x78730686
   132ac:	602b2000 	.word	0x602b2000
   132b0:	eb06e7e1 	.word	0xeb06e7e1
   132b4:	491806c6 	.word	0x491806c6
   132b8:	00b6683b 	.word	0x00b6683b
   132bc:	f013198a 	.word	0xf013198a
   132c0:	78d00403 	.word	0x78d00403
   132c4:	089bd121 	.word	0x089bd121
   132c8:	bf284283 	.word	0xbf284283
   132cc:	009a4603 	.word	0x009a4603
   132d0:	3604b1db 	.word	0x3604b1db
   132d4:	603a4431 	.word	0x603a4431
   132d8:	f00f4628 	.word	0xf00f4628
   132dc:	4620fec9 	.word	0x4620fec9
   132e0:	683be7c9 	.word	0x683be7c9
   132e4:	d10c2b04 	.word	0xd10c2b04
   132e8:	eb064b0b 	.word	0xeb064b0b
   132ec:	f81306c6 	.word	0xf81306c6
   132f0:	20003026 	.word	0x20003026
   132f4:	0301f1a3 	.word	0x0301f1a3
   132f8:	f383fab3 	.word	0xf383fab3
   132fc:	602b095b 	.word	0x602b095b
   13300:	2016e7b9 	.word	0x2016e7b9
   13304:	2009e7b7 	.word	0x2009e7b7
   13308:	2800e7b5 	.word	0x2800e7b5
   1330c:	6038d1f9 	.word	0x6038d1f9
   13310:	202ae7b1 	.word	0x202ae7b1
   13314:	bf00e7af 	.word	0xbf00e7af
   13318:	2002029c 	.word	0x2002029c

0001331c <tls_rpc_ip_event_handler>:
   1331c:	f248b538 	.word	0xf248b538
   13320:	42ab0581 	.word	0x42ab0581
   13324:	d053460c 	.word	0xd053460c
   13328:	0182f249 	.word	0x0182f249
   1332c:	d02d428b 	.word	0xd02d428b
   13330:	0102f248 	.word	0x0102f248
   13334:	d001428b 	.word	0xd001428b
   13338:	bd382001 	.word	0xbd382001
   1333c:	d0fb2c00 	.word	0xd0fb2c00
   13340:	f5b36963 	.word	0xf5b36963
   13344:	d0027f82 	.word	0xd0027f82
   13348:	7f87f5b3 	.word	0x7f87f5b3
   1334c:	6823d1f4 	.word	0x6823d1f4
   13350:	5300f023 	.word	0x5300f023
   13354:	69556023 	.word	0x69556023
   13358:	d1482d00 	.word	0xd1482d00
   1335c:	0c1b6823 	.word	0x0c1b6823
   13360:	f043041b 	.word	0xf043041b
   13364:	60230305 	.word	0x60230305
   13368:	00da6823 	.word	0x00da6823
   1336c:	4b25d50c 	.word	0x4b25d50c
   13370:	02c0eb00 	.word	0x02c0eb00
   13374:	3022f813 	.word	0x3022f813
   13378:	d1052b02 	.word	0xd1052b02
   1337c:	f7ff4621 	.word	0xf7ff4621
   13380:	b108fc21 	.word	0xb108fc21
   13384:	d1352873 	.word	0xd1352873
   13388:	bd382000 	.word	0xbd382000
   1338c:	d0fb2c00 	.word	0xd0fb2c00
   13390:	b29b6823 	.word	0xb29b6823
   13394:	d1f72b0b 	.word	0xd1f72b0b
   13398:	bb486910 	.word	0xbb486910
   1339c:	f0436823 	.word	0xf0436823
   133a0:	60236380 	.word	0x60236380
   133a4:	00db6823 	.word	0x00db6823
   133a8:	6823d5ee 	.word	0x6823d5ee
   133ac:	6380f023 	.word	0x6380f023
   133b0:	68236023 	.word	0x68236023
   133b4:	041b0c1b 	.word	0x041b0c1b
   133b8:	030cf043 	.word	0x030cf043
   133bc:	68236023 	.word	0x68236023
   133c0:	3300f443 	.word	0x3300f443
   133c4:	68236023 	.word	0x68236023
   133c8:	1380f443 	.word	0x1380f443
   133cc:	bd386023 	.word	0xbd386023
   133d0:	d0d92900 	.word	0xd0d92900
   133d4:	b29b680b 	.word	0xb29b680b
   133d8:	d1d52b0a 	.word	0xd1d52b0a
   133dc:	b9386950 	.word	0xb9386950
   133e0:	0c1b680b 	.word	0x0c1b680b
   133e4:	f043041b 	.word	0xf043041b
   133e8:	600b030b 	.word	0x600b030b
   133ec:	4628bd38 	.word	0x4628bd38
   133f0:	faccf002 	.word	0xfaccf002
   133f4:	68236060 	.word	0x68236060
   133f8:	f4432000 	.word	0xf4432000
   133fc:	60232380 	.word	0x60232380
   13400:	bf00bd38 	.word	0xbf00bd38
   13404:	2002029c 	.word	0x2002029c

00013408 <rpc_gnss_serialize_utc>:
   13408:	b1d84603 	.word	0xb1d84603
   1340c:	2000b1d1 	.word	0x2000b1d1
   13410:	70482201 	.word	0x70482201
   13414:	685a700a 	.word	0x685a700a
   13418:	f8c12010 	.word	0xf8c12010
   1341c:	681a2006 	.word	0x681a2006
   13420:	2002f8c1 	.word	0x2002f8c1
   13424:	200af993 	.word	0x200af993
   13428:	f993730a 	.word	0xf993730a
   1342c:	73ca200d 	.word	0x73ca200d
   13430:	200cf993 	.word	0x200cf993
   13434:	7a1a738a 	.word	0x7a1a738a
   13438:	7ada728a 	.word	0x7ada728a
   1343c:	7a5b734a 	.word	0x7a5b734a
   13440:	477072cb 	.word	0x477072cb
   13444:	30fff04f 	.word	0x30fff04f
   13448:	bf004770 	.word	0xbf004770

0001344c <rpc_gnss_serialize_ephe>:
   1344c:	28004603 	.word	0x28004603
   13450:	2900d04b 	.word	0x2900d04b
   13454:	2000d049 	.word	0x2000d049
   13458:	70482202 	.word	0x70482202
   1345c:	68da700a 	.word	0x68da700a
   13460:	f8c12040 	.word	0xf8c12040
   13464:	f9b3200b 	.word	0xf9b3200b
   13468:	f8a12008 	.word	0xf8a12008
   1346c:	f9932009 	.word	0xf9932009
   13470:	720a2006 	.word	0x720a2006
   13474:	2044f9b3 	.word	0x2044f9b3
   13478:	f9b3878a 	.word	0xf9b3878a
   1347c:	86ca203e 	.word	0x86ca203e
   13480:	2042f9b3 	.word	0x2042f9b3
   13484:	f9b3874a 	.word	0xf9b3874a
   13488:	868a203c 	.word	0x868a203c
   1348c:	2046f9b3 	.word	0x2046f9b3
   13490:	f9b387ca 	.word	0xf9b387ca
   13494:	870a2040 	.word	0x870a2040
   13498:	201cf9b3 	.word	0x201cf9b3
   1349c:	6a9a830a 	.word	0x6a9a830a
   134a0:	2022f8c1 	.word	0x2022f8c1
   134a4:	744a7c9a 	.word	0x744a7c9a
   134a8:	70ca785a 	.word	0x70ca785a
   134ac:	62ca6b5a 	.word	0x62ca6b5a
   134b0:	202cf9b3 	.word	0x202cf9b3
   134b4:	885a84ca 	.word	0x885a84ca
   134b8:	6a1a808a 	.word	0x6a1a808a
   134bc:	201af8c1 	.word	0x201af8c1
   134c0:	630a6b9a 	.word	0x630a6b9a
   134c4:	f8c16a5a 	.word	0xf8c16a5a
   134c8:	6b1a201e 	.word	0x6b1a201e
   134cc:	781a628a 	.word	0x781a628a
   134d0:	f993708a 	.word	0xf993708a
   134d4:	73ca2010 	.word	0x73ca2010
   134d8:	80ca889a 	.word	0x80ca889a
   134dc:	824a8a9a 	.word	0x824a8a9a
   134e0:	740a7c5a 	.word	0x740a7c5a
   134e4:	614b699b 	.word	0x614b699b
   134e8:	f04f4770 	.word	0xf04f4770
   134ec:	477030ff 	.word	0x477030ff

000134f0 <rpc_gnss_serialize_alm>:
   134f0:	b3604603 	.word	0xb3604603
   134f4:	2000b359 	.word	0x2000b359
   134f8:	70482203 	.word	0x70482203
   134fc:	f9b3700a 	.word	0xf9b3700a
   13500:	2021201c 	.word	0x2021201c
   13504:	201df8a1 	.word	0x201df8a1
   13508:	201ef9b3 	.word	0x201ef9b3
   1350c:	201ff8a1 	.word	0x201ff8a1
   13510:	2006f9b3 	.word	0x2006f9b3
   13514:	889a810a 	.word	0x889a810a
   13518:	78da80ca 	.word	0x78da80ca
   1351c:	699a714a 	.word	0x699a714a
   13520:	2019f8c1 	.word	0x2019f8c1
   13524:	f8c1691a 	.word	0xf8c1691a
   13528:	f9b32011 	.word	0xf9b32011
   1352c:	814a2008 	.word	0x814a2008
   13530:	f8c168da 	.word	0xf8c168da
   13534:	7a9a200d 	.word	0x7a9a200d
   13538:	781a730a 	.word	0x781a730a
   1353c:	789a708a 	.word	0x789a708a
   13540:	695a710a 	.word	0x695a710a
   13544:	2015f8c1 	.word	0x2015f8c1
   13548:	70cb785b 	.word	0x70cb785b
   1354c:	f04f4770 	.word	0xf04f4770
   13550:	477030ff 	.word	0x477030ff

00013554 <rpc_gnss_serialize_klob>:
   13554:	b1f04603 	.word	0xb1f04603
   13558:	2000b1e9 	.word	0x2000b1e9
   1355c:	70482204 	.word	0x70482204
   13560:	f993700a 	.word	0xf993700a
   13564:	200a2000 	.word	0x200a2000
   13568:	f993708a 	.word	0xf993708a
   1356c:	70ca2001 	.word	0x70ca2001
   13570:	2002f993 	.word	0x2002f993
   13574:	f993710a 	.word	0xf993710a
   13578:	714a2003 	.word	0x714a2003
   1357c:	2004f993 	.word	0x2004f993
   13580:	f993718a 	.word	0xf993718a
   13584:	71ca2005 	.word	0x71ca2005
   13588:	2006f993 	.word	0x2006f993
   1358c:	f993720a 	.word	0xf993720a
   13590:	724b3007 	.word	0x724b3007
   13594:	f04f4770 	.word	0xf04f4770
   13598:	477030ff 	.word	0x477030ff

0001359c <rpc_gnss_serialize_nequick>:
   1359c:	b1984603 	.word	0xb1984603
   135a0:	2000b191 	.word	0x2000b191
   135a4:	70482205 	.word	0x70482205
   135a8:	f9b3700a 	.word	0xf9b3700a
   135ac:	200a2000 	.word	0x200a2000
   135b0:	f9b3804a 	.word	0xf9b3804a
   135b4:	808a2002 	.word	0x808a2002
   135b8:	2004f9b3 	.word	0x2004f9b3
   135bc:	799a80ca 	.word	0x799a80ca
   135c0:	79db720a 	.word	0x79db720a
   135c4:	4770724b 	.word	0x4770724b
   135c8:	30fff04f 	.word	0x30fff04f
   135cc:	bf004770 	.word	0xbf004770

000135d0 <rpc_gnss_serialize_time_and_sv_tow>:
   135d0:	b309b310 	.word	0xb309b310
   135d4:	2500b470 	.word	0x2500b470
   135d8:	460c2606 	.word	0x460c2606
   135dc:	700e704d 	.word	0x700e704d
   135e0:	8805462b 	.word	0x8805462b
   135e4:	804d4602 	.word	0x804d4602
   135e8:	f8c168c5 	.word	0xf8c168c5
   135ec:	8905500a 	.word	0x8905500a
   135f0:	6840810d 	.word	0x6840810d
   135f4:	8a156048 	.word	0x8a156048
   135f8:	0043eb03 	.word	0x0043eb03
   135fc:	81c54408 	.word	0x81c54408
   13600:	33017c90 	.word	0x33017c90
   13604:	74202b20 	.word	0x74202b20
   13608:	0204f102 	.word	0x0204f102
   1360c:	0403f104 	.word	0x0403f104
   13610:	206ed1f1 	.word	0x206ed1f1
   13614:	4770bc70 	.word	0x4770bc70
   13618:	30fff04f 	.word	0x30fff04f
   1361c:	bf004770 	.word	0xbf004770

00013620 <rpc_gnss_serialize_location>:
   13620:	b1c84603 	.word	0xb1c84603
   13624:	2000b1c1 	.word	0x2000b1c1
   13628:	70482207 	.word	0x70482207
   1362c:	f9b3700a 	.word	0xf9b3700a
   13630:	20112008 	.word	0x20112008
   13634:	7b9a814a 	.word	0x7b9a814a
   13638:	681a740a 	.word	0x681a740a
   1363c:	2002f8c1 	.word	0x2002f8c1
   13640:	f8c1685a 	.word	0xf8c1685a
   13644:	7b1a2006 	.word	0x7b1a2006
   13648:	7b5a738a 	.word	0x7b5a738a
   1364c:	7a9a73ca 	.word	0x7a9a73ca
   13650:	7adb730a 	.word	0x7adb730a
   13654:	4770734b 	.word	0x4770734b
   13658:	30fff04f 	.word	0x30fff04f
   1365c:	bf004770 	.word	0xbf004770

00013660 <rpc_gnss_serialize_integrity>:
   13660:	b141b148 	.word	0xb141b148
   13664:	23082200 	.word	0x23082200
   13668:	700b704a 	.word	0x700b704a
   1366c:	20066803 	.word	0x20066803
   13670:	3002f8c1 	.word	0x3002f8c1
   13674:	f04f4770 	.word	0xf04f4770
   13678:	477030ff 	.word	0x477030ff

0001367c <ipc_trace_init>:
   1367c:	60184b01 	.word	0x60184b01
   13680:	bf004770 	.word	0xbf004770
   13684:	200203c8 	.word	0x200203c8

00013688 <bsd_os_trace_irq_handler>:
   13688:	4b6cb5f0 	.word	0x4b6cb5f0
   1368c:	781bb083 	.word	0x781bb083
   13690:	f0002b00 	.word	0xf0002b00
   13694:	4b6a80ad 	.word	0x4b6a80ad
   13698:	68a2681c 	.word	0x68a2681c
   1369c:	429a6863 	.word	0x429a6863
   136a0:	f64bd02d 	.word	0xf64bd02d
   136a4:	f8ad63ef 	.word	0xf8ad63ef
   136a8:	78233000 	.word	0x78233000
   136ac:	f88d466e 	.word	0xf88d466e
   136b0:	68633004 	.word	0x68633004
   136b4:	429a2105 	.word	0x429a2105
   136b8:	6927bf2a 	.word	0x6927bf2a
   136bc:	1abf1a9f 	.word	0x1abf1a9f
   136c0:	bf94429a 	.word	0xbf94429a
   136c4:	68e52500 	.word	0x68e52500
   136c8:	bf88b2bf 	.word	0xbf88b2bf
   136cc:	46301b5b 	.word	0x46301b5b
   136d0:	b29dbf88 	.word	0xb29dbf88
   136d4:	7002f8ad 	.word	0x7002f8ad
   136d8:	ff47f00f 	.word	0xff47f00f
   136dc:	1002f8bd 	.word	0x1002f8bd
   136e0:	f00f68a0 	.word	0xf00f68a0
   136e4:	68a3ff42 	.word	0x68a3ff42
   136e8:	441f6922 	.word	0x441f6922
   136ec:	bf084297 	.word	0xbf084297
   136f0:	60a768e3 	.word	0x60a768e3
   136f4:	60a3bf08 	.word	0x60a3bf08
   136f8:	f0402d00 	.word	0xf0402d00
   136fc:	4b51808d 	.word	0x4b51808d
   13700:	68a2681c 	.word	0x68a2681c
   13704:	429a6863 	.word	0x429a6863
   13708:	f64bd02c 	.word	0xf64bd02c
   1370c:	f8ad63ef 	.word	0xf8ad63ef
   13710:	78233000 	.word	0x78233000
   13714:	f88d466e 	.word	0xf88d466e
   13718:	68633004 	.word	0x68633004
   1371c:	429a2105 	.word	0x429a2105
   13720:	6927bf2a 	.word	0x6927bf2a
   13724:	1abf1a9f 	.word	0x1abf1a9f
   13728:	bf94429a 	.word	0xbf94429a
   1372c:	68e52500 	.word	0x68e52500
   13730:	bf88b2bf 	.word	0xbf88b2bf
   13734:	46301b5b 	.word	0x46301b5b
   13738:	b29dbf88 	.word	0xb29dbf88
   1373c:	7002f8ad 	.word	0x7002f8ad
   13740:	ff13f00f 	.word	0xff13f00f
   13744:	1002f8bd 	.word	0x1002f8bd
   13748:	f00f68a0 	.word	0xf00f68a0
   1374c:	68a3ff0e 	.word	0x68a3ff0e
   13750:	441f6922 	.word	0x441f6922
   13754:	bf084297 	.word	0xbf084297
   13758:	60a768e3 	.word	0x60a768e3
   1375c:	60a3bf08 	.word	0x60a3bf08
   13760:	d1482d00 	.word	0xd1482d00
   13764:	681c4b38 	.word	0x681c4b38
   13768:	686368a2 	.word	0x686368a2
   1376c:	d02b429a 	.word	0xd02b429a
   13770:	63eff64b 	.word	0x63eff64b
   13774:	3000f8ad 	.word	0x3000f8ad
   13778:	466e7823 	.word	0x466e7823
   1377c:	3004f88d 	.word	0x3004f88d
   13780:	21056863 	.word	0x21056863
   13784:	bf2a429a 	.word	0xbf2a429a
   13788:	1a9f6927 	.word	0x1a9f6927
   1378c:	429a1abf 	.word	0x429a1abf
   13790:	2500bf94 	.word	0x2500bf94
   13794:	b2bf68e5 	.word	0xb2bf68e5
   13798:	1b5bbf88 	.word	0x1b5bbf88
   1379c:	bf884630 	.word	0xbf884630
   137a0:	f8adb29d 	.word	0xf8adb29d
   137a4:	f00f7002 	.word	0xf00f7002
   137a8:	f8bdfee0 	.word	0xf8bdfee0
   137ac:	68a01002 	.word	0x68a01002
   137b0:	fedbf00f 	.word	0xfedbf00f
   137b4:	692268a3 	.word	0x692268a3
   137b8:	4297441f 	.word	0x4297441f
   137bc:	68e3bf08 	.word	0x68e3bf08
   137c0:	bf0860a7 	.word	0xbf0860a7
   137c4:	b90d60a3 	.word	0xb90d60a3
   137c8:	bdf0b003 	.word	0xbdf0b003
   137cc:	21054630 	.word	0x21054630
   137d0:	5002f8ad 	.word	0x5002f8ad
   137d4:	fec9f00f 	.word	0xfec9f00f
   137d8:	1002f8bd 	.word	0x1002f8bd
   137dc:	f00f68e0 	.word	0xf00f68e0
   137e0:	f8bdfec4 	.word	0xf8bdfec4
   137e4:	68e32002 	.word	0x68e32002
   137e8:	60a34413 	.word	0x60a34413
   137ec:	bdf0b003 	.word	0xbdf0b003
   137f0:	f988f7fc 	.word	0xf988f7fc
   137f4:	2105e74f 	.word	0x2105e74f
   137f8:	f8ad4630 	.word	0xf8ad4630
   137fc:	f00f5002 	.word	0xf00f5002
   13800:	f8bdfeb4 	.word	0xf8bdfeb4
   13804:	68e01002 	.word	0x68e01002
   13808:	feaff00f 	.word	0xfeaff00f
   1380c:	2002f8bd 	.word	0x2002f8bd
   13810:	441368e3 	.word	0x441368e3
   13814:	e7a560a3 	.word	0xe7a560a3
   13818:	46302105 	.word	0x46302105
   1381c:	5002f8ad 	.word	0x5002f8ad
   13820:	fea3f00f 	.word	0xfea3f00f
   13824:	1002f8bd 	.word	0x1002f8bd
   13828:	f00f68e0 	.word	0xf00f68e0
   1382c:	f8bdfe9e 	.word	0xf8bdfe9e
   13830:	68e32002 	.word	0x68e32002
   13834:	60a34413 	.word	0x60a34413
   13838:	bf00e761 	.word	0xbf00e761
   1383c:	20026c02 	.word	0x20026c02
   13840:	200203c4 	.word	0x200203c4
   13844:	200203bc 	.word	0x200203bc
   13848:	200203c0 	.word	0x200203c0

0001384c <ipc_trace_handle>:
   1384c:	e92d2200 	.word	0xe92d2200
   13850:	4bb04ff0 	.word	0x4bb04ff0
   13854:	681bb083 	.word	0x681bb083
   13858:	695c6919 	.word	0x695c6919
   1385c:	741a7c18 	.word	0x741a7c18
   13860:	745a7c58 	.word	0x745a7c58
   13864:	749a7c98 	.word	0x749a7c98
   13868:	74da7cd8 	.word	0x74da7cd8
   1386c:	751a7d18 	.word	0x751a7d18
   13870:	755a7d58 	.word	0x755a7d58
   13874:	759a7d98 	.word	0x759a7d98
   13878:	75da7dd8 	.word	0x75da7dd8
   1387c:	3901b1b9 	.word	0x3901b1b9
   13880:	d8142903 	.word	0xd8142903
   13884:	f011e8df 	.word	0xf011e8df
   13888:	010300d6 	.word	0x010300d6
   1388c:	00160004 	.word	0x00160004
   13890:	20032501 	.word	0x20032501
   13894:	f06f2200 	.word	0xf06f2200
   13898:	4c9f015f 	.word	0x4c9f015f
   1389c:	7a1c7025 	.word	0x7a1c7025
   138a0:	7a587218 	.word	0x7a587218
   138a4:	7a98725a 	.word	0x7a98725a
   138a8:	7ada729a 	.word	0x7ada729a
   138ac:	b00372d9 	.word	0xb00372d9
   138b0:	8ff0e8bd 	.word	0x8ff0e8bd
   138b4:	22002104 	.word	0x22002104
   138b8:	005ff06f 	.word	0x005ff06f
   138bc:	72197a1c 	.word	0x72197a1c
   138c0:	725a7a59 	.word	0x725a7a59
   138c4:	7a9c4994 	.word	0x7a9c4994
   138c8:	7adc729a 	.word	0x7adc729a
   138cc:	700a72d8 	.word	0x700a72d8
   138d0:	2b00780b 	.word	0x2b00780b
   138d4:	8117f000 	.word	0x8117f000
   138d8:	681c4b90 	.word	0x681c4b90
   138dc:	686368a2 	.word	0x686368a2
   138e0:	d02d429a 	.word	0xd02d429a
   138e4:	63eff64b 	.word	0x63eff64b
   138e8:	3000f8ad 	.word	0x3000f8ad
   138ec:	466e7823 	.word	0x466e7823
   138f0:	3004f88d 	.word	0x3004f88d
   138f4:	21056863 	.word	0x21056863
   138f8:	bf2a429a 	.word	0xbf2a429a
   138fc:	1a9f6927 	.word	0x1a9f6927
   13900:	429a1abf 	.word	0x429a1abf
   13904:	2500bf94 	.word	0x2500bf94
   13908:	b2bf68e5 	.word	0xb2bf68e5
   1390c:	1b5bbf88 	.word	0x1b5bbf88
   13910:	bf884630 	.word	0xbf884630
   13914:	f8adb29d 	.word	0xf8adb29d
   13918:	f00f7002 	.word	0xf00f7002
   1391c:	f8bdfe26 	.word	0xf8bdfe26
   13920:	68a01002 	.word	0x68a01002
   13924:	fe21f00f 	.word	0xfe21f00f
   13928:	692268a3 	.word	0x692268a3
   1392c:	4297441f 	.word	0x4297441f
   13930:	68e3bf08 	.word	0x68e3bf08
   13934:	bf0860a7 	.word	0xbf0860a7
   13938:	2d0060a3 	.word	0x2d0060a3
   1393c:	80d2f040 	.word	0x80d2f040
   13940:	681c4b77 	.word	0x681c4b77
   13944:	686368a2 	.word	0x686368a2
   13948:	d02d429a 	.word	0xd02d429a
   1394c:	63eff64b 	.word	0x63eff64b
   13950:	3000f8ad 	.word	0x3000f8ad
   13954:	466e7823 	.word	0x466e7823
   13958:	3004f88d 	.word	0x3004f88d
   1395c:	21056863 	.word	0x21056863
   13960:	bf2a429a 	.word	0xbf2a429a
   13964:	1a9f6927 	.word	0x1a9f6927
   13968:	429a1abf 	.word	0x429a1abf
   1396c:	2500bf94 	.word	0x2500bf94
   13970:	b2bf68e5 	.word	0xb2bf68e5
   13974:	1b5bbf88 	.word	0x1b5bbf88
   13978:	bf884630 	.word	0xbf884630
   1397c:	f8adb29d 	.word	0xf8adb29d
   13980:	f00f7002 	.word	0xf00f7002
   13984:	f8bdfdf2 	.word	0xf8bdfdf2
   13988:	68a01002 	.word	0x68a01002
   1398c:	fdedf00f 	.word	0xfdedf00f
   13990:	692268a3 	.word	0x692268a3
   13994:	4297441f 	.word	0x4297441f
   13998:	68e3bf08 	.word	0x68e3bf08
   1399c:	bf0860a7 	.word	0xbf0860a7
   139a0:	2d0060a3 	.word	0x2d0060a3
   139a4:	808df040 	.word	0x808df040
   139a8:	681c4b5e 	.word	0x681c4b5e
   139ac:	686368a2 	.word	0x686368a2
   139b0:	f43f429a 	.word	0xf43f429a
   139b4:	f64baf7c 	.word	0xf64baf7c
   139b8:	f8ad63ef 	.word	0xf8ad63ef
   139bc:	78233000 	.word	0x78233000
   139c0:	f88d466e 	.word	0xf88d466e
   139c4:	68633004 	.word	0x68633004
   139c8:	429a2105 	.word	0x429a2105
   139cc:	6927bf2a 	.word	0x6927bf2a
   139d0:	1abf1a9f 	.word	0x1abf1a9f
   139d4:	bf94429a 	.word	0xbf94429a
   139d8:	68e52500 	.word	0x68e52500
   139dc:	bf88b2bf 	.word	0xbf88b2bf
   139e0:	46301b5b 	.word	0x46301b5b
   139e4:	b29dbf88 	.word	0xb29dbf88
   139e8:	7002f8ad 	.word	0x7002f8ad
   139ec:	fdbdf00f 	.word	0xfdbdf00f
   139f0:	1002f8bd 	.word	0x1002f8bd
   139f4:	f00f68a0 	.word	0xf00f68a0
   139f8:	68a3fdb8 	.word	0x68a3fdb8
   139fc:	441f6922 	.word	0x441f6922
   13a00:	bf084297 	.word	0xbf084297
   13a04:	60a768e3 	.word	0x60a768e3
   13a08:	60a3bf08 	.word	0x60a3bf08
   13a0c:	f43f2d00 	.word	0xf43f2d00
   13a10:	2105af4e 	.word	0x2105af4e
   13a14:	f8ad4630 	.word	0xf8ad4630
   13a18:	f00f5002 	.word	0xf00f5002
   13a1c:	f8bdfda6 	.word	0xf8bdfda6
   13a20:	68e01002 	.word	0x68e01002
   13a24:	fda1f00f 	.word	0xfda1f00f
   13a28:	2002f8bd 	.word	0x2002f8bd
   13a2c:	441368e3 	.word	0x441368e3
   13a30:	e73c60a3 	.word	0xe73c60a3
   13a34:	78114a38 	.word	0x78114a38
   13a38:	2100b109 	.word	0x2100b109
   13a3c:	68a57011 	.word	0x68a57011
   13a40:	d0392d00 	.word	0xd0392d00
   13a44:	0c00f04f 	.word	0x0c00f04f
   13a48:	a0d4f8df 	.word	0xa0d4f8df
   13a4c:	b0ccf8df 	.word	0xb0ccf8df
   13a50:	46e14934 	.word	0x46e14934
   13a54:	46624666 	.word	0x46624666
   13a58:	e000f8d1 	.word	0xe000f8d1
   13a5c:	8000f8da 	.word	0x8000f8da
   13a60:	7000f8db 	.word	0x7000f8db
   13a64:	2963e008 	.word	0x2963e008
   13a68:	2961d016 	.word	0x2961d016
   13a6c:	4607bf04 	.word	0x4607bf04
   13a70:	32012601 	.word	0x32012601
   13a74:	d01342aa 	.word	0xd01342aa
   13a78:	eb041c91 	.word	0xeb041c91
   13a7c:	68480181 	.word	0x68480181
   13a80:	29627801 	.word	0x29627801
   13a84:	4680d1ef 	.word	0x4680d1ef
   13a88:	0901f04f 	.word	0x0901f04f
   13a8c:	f7fce7f1 	.word	0xf7fce7f1
   13a90:	b003f831 	.word	0xb003f831
   13a94:	8ff0e8bd 	.word	0x8ff0e8bd
   13a98:	f04f4686 	.word	0xf04f4686
   13a9c:	e7e80c01 	.word	0xe7e80c01
   13aa0:	f1b9bba6 	.word	0xf1b9bba6
   13aa4:	d0010f00 	.word	0xd0010f00
   13aa8:	8000f8ca 	.word	0x8000f8ca
   13aac:	0f00f1bc 	.word	0x0f00f1bc
   13ab0:	4a1cd002 	.word	0x4a1cd002
   13ab4:	e000f8c2 	.word	0xe000f8c2
   13ab8:	22002001 	.word	0x22002001
   13abc:	015ff06f 	.word	0x015ff06f
   13ac0:	2105e6ed 	.word	0x2105e6ed
   13ac4:	f8ad4630 	.word	0xf8ad4630
   13ac8:	f00f5002 	.word	0xf00f5002
   13acc:	f8bdfd4e 	.word	0xf8bdfd4e
   13ad0:	68e01002 	.word	0x68e01002
   13ad4:	fd49f00f 	.word	0xfd49f00f
   13ad8:	2002f8bd 	.word	0x2002f8bd
   13adc:	441368e3 	.word	0x441368e3
   13ae0:	e76160a3 	.word	0xe76160a3
   13ae4:	46302105 	.word	0x46302105
   13ae8:	5002f8ad 	.word	0x5002f8ad
   13aec:	fd3df00f 	.word	0xfd3df00f
   13af0:	1002f8bd 	.word	0x1002f8bd
   13af4:	f00f68e0 	.word	0xf00f68e0
   13af8:	f8bdfd38 	.word	0xf8bdfd38
   13afc:	68e32002 	.word	0x68e32002
   13b00:	60a34413 	.word	0x60a34413
   13b04:	f7fbe71c 	.word	0xf7fbe71c
   13b08:	e6e5fffd 	.word	0xe6e5fffd
   13b0c:	7000f8cb 	.word	0x7000f8cb
   13b10:	bf00e7c7 	.word	0xbf00e7c7
   13b14:	200203c8 	.word	0x200203c8
   13b18:	20026c02 	.word	0x20026c02
   13b1c:	200203c4 	.word	0x200203c4
   13b20:	200203bc 	.word	0x200203bc
   13b24:	200203c0 	.word	0x200203c0

00013b28 <rpc_trace_coredump_in_progress>:
   13b28:	78184b01 	.word	0x78184b01
   13b2c:	bf004770 	.word	0xbf004770
   13b30:	20026c02 	.word	0x20026c02

00013b34 <ecp_modp>:
   13b34:	6e4bb570 	.word	0x6e4bb570
   13b38:	2b004604 	.word	0x2b004604
   13b3c:	6803d03d 	.word	0x6803d03d
   13b40:	2b00460d 	.word	0x2b00460d
   13b44:	4620db2f 	.word	0x4620db2f
   13b48:	fe06f005 	.word	0xfe06f005
   13b4c:	ebb06dab 	.word	0xebb06dab
   13b50:	d82d0f43 	.word	0xd82d0f43
   13b54:	46206e6b 	.word	0x46206e6b
   13b58:	46064798 	.word	0x46064798
   13b5c:	3504bb08 	.word	0x3504bb08
   13b60:	2100e00a 	.word	0x2100e00a
   13b64:	f0064620 	.word	0xf0064620
   13b68:	b1a0f8c7 	.word	0xb1a0f8c7
   13b6c:	4621462a 	.word	0x4621462a
   13b70:	f0064620 	.word	0xf0064620
   13b74:	b9e8fa79 	.word	0xb9e8fa79
   13b78:	2b006823 	.word	0x2b006823
   13b7c:	4629dbf1 	.word	0x4629dbf1
   13b80:	f0064620 	.word	0xf0064620
   13b84:	2800f851 	.word	0x2800f851
   13b88:	462adb0b 	.word	0x462adb0b
   13b8c:	46204621 	.word	0x46204621
   13b90:	f9aaf006 	.word	0xf9aaf006
   13b94:	4629b970 	.word	0x4629b970
   13b98:	f0064620 	.word	0xf0064620
   13b9c:	2800f845 	.word	0x2800f845
   13ba0:	4630daf3 	.word	0x4630daf3
   13ba4:	2100bd70 	.word	0x2100bd70
   13ba8:	f8a6f006 	.word	0xf8a6f006
   13bac:	d0ca2800 	.word	0xd0ca2800
   13bb0:	e7f64e05 	.word	0xe7f64e05
   13bb4:	46304606 	.word	0x46304606
   13bb8:	1d0abd70 	.word	0x1d0abd70
   13bbc:	4070e8bd 	.word	0x4070e8bd
   13bc0:	f0074601 	.word	0xf0074601
   13bc4:	bf00b84d 	.word	0xbf00b84d
   13bc8:	ffffb080 	.word	0xffffb080

00013bcc <ecp_double_jac>:
   13bcc:	43f0e92d 	.word	0x43f0e92d
   13bd0:	b08d4606 	.word	0xb08d4606
   13bd4:	46884668 	.word	0x46884668
   13bd8:	f0054615 	.word	0xf0054615
   13bdc:	a803fb63 	.word	0xa803fb63
   13be0:	fb60f005 	.word	0xfb60f005
   13be4:	f005a806 	.word	0xf005a806
   13be8:	a809fb5d 	.word	0xa809fb5d
   13bec:	fb5af005 	.word	0xfb5af005
   13bf0:	2b0069b3 	.word	0x2b0069b3
   13bf4:	80b2f000 	.word	0x80b2f000
   13bf8:	4629462a 	.word	0x4629462a
   13bfc:	f006a803 	.word	0xf006a803
   13c00:	4604fb67 	.word	0x4604fb67
   13c04:	4668b178 	.word	0x4668b178
   13c08:	fb54f005 	.word	0xfb54f005
   13c0c:	f005a803 	.word	0xf005a803
   13c10:	a806fb51 	.word	0xa806fb51
   13c14:	fb4ef005 	.word	0xfb4ef005
   13c18:	f005a809 	.word	0xf005a809
   13c1c:	4620fb4b 	.word	0x4620fb4b
   13c20:	e8bdb00d 	.word	0xe8bdb00d
   13c24:	463183f0 	.word	0x463183f0
   13c28:	f7ffa803 	.word	0xf7ffa803
   13c2c:	4604ff83 	.word	0x4604ff83
   13c30:	d1e82800 	.word	0xd1e82800
   13c34:	a9032203 	.word	0xa9032203
   13c38:	f0064668 	.word	0xf0064668
   13c3c:	4604fc41 	.word	0x4604fc41
   13c40:	d1e02800 	.word	0xd1e02800
   13c44:	e0071d37 	.word	0xe0071d37
   13c48:	4669463a 	.word	0x4669463a
   13c4c:	f0064668 	.word	0xf0064668
   13c50:	4604f94b 	.word	0x4604f94b
   13c54:	d1d62800 	.word	0xd1d62800
   13c58:	46684639 	.word	0x46684639
   13c5c:	ffe4f005 	.word	0xffe4f005
   13c60:	daf12800 	.word	0xdaf12800
   13c64:	0910f106 	.word	0x0910f106
   13c68:	21004648 	.word	0x21004648
   13c6c:	f844f006 	.word	0xf844f006
   13c70:	f0402800 	.word	0xf0402800
   13c74:	f10580e2 	.word	0xf10580e2
   13c78:	464a090c 	.word	0x464a090c
   13c7c:	a8064649 	.word	0xa8064649
   13c80:	fb26f006 	.word	0xfb26f006
   13c84:	28004604 	.word	0x28004604
   13c88:	4631d1bd 	.word	0x4631d1bd
   13c8c:	f7ffa806 	.word	0xf7ffa806
   13c90:	4604ff51 	.word	0x4604ff51
   13c94:	d1b62800 	.word	0xd1b62800
   13c98:	a8062101 	.word	0xa8062101
   13c9c:	fe9ef005 	.word	0xfe9ef005
   13ca0:	b1404604 	.word	0xb1404604
   13ca4:	a906e7af 	.word	0xa906e7af
   13ca8:	4608463a 	.word	0x4608463a
   13cac:	f91cf006 	.word	0xf91cf006
   13cb0:	28004604 	.word	0x28004604
   13cb4:	4639d1a7 	.word	0x4639d1a7
   13cb8:	f005a806 	.word	0xf005a806
   13cbc:	2800ffb5 	.word	0x2800ffb5
   13cc0:	aa06daf1 	.word	0xaa06daf1
   13cc4:	a8034629 	.word	0xa8034629
   13cc8:	fb02f006 	.word	0xfb02f006
   13ccc:	28004604 	.word	0x28004604
   13cd0:	4631d199 	.word	0x4631d199
   13cd4:	f7ffa803 	.word	0xf7ffa803
   13cd8:	4604ff2d 	.word	0x4604ff2d
   13cdc:	d1922800 	.word	0xd1922800
   13ce0:	a8032101 	.word	0xa8032101
   13ce4:	fe7af005 	.word	0xfe7af005
   13ce8:	b1404604 	.word	0xb1404604
   13cec:	a903e78b 	.word	0xa903e78b
   13cf0:	4608463a 	.word	0x4608463a
   13cf4:	f8f8f006 	.word	0xf8f8f006
   13cf8:	28004604 	.word	0x28004604
   13cfc:	4639d183 	.word	0x4639d183
   13d00:	f005a803 	.word	0xf005a803
   13d04:	2800ff91 	.word	0x2800ff91
   13d08:	aa06daf1 	.word	0xaa06daf1
   13d0c:	a8094611 	.word	0xa8094611
   13d10:	fadef006 	.word	0xfadef006
   13d14:	28004604 	.word	0x28004604
   13d18:	af75f47f 	.word	0xaf75f47f
   13d1c:	a8094631 	.word	0xa8094631
   13d20:	ff08f7ff 	.word	0xff08f7ff
   13d24:	28004604 	.word	0x28004604
   13d28:	af6df47f 	.word	0xaf6df47f
   13d2c:	a8092101 	.word	0xa8092101
   13d30:	fe54f005 	.word	0xfe54f005
   13d34:	28004604 	.word	0x28004604
   13d38:	af65f47f 	.word	0xaf65f47f
   13d3c:	a8094639 	.word	0xa8094639
   13d40:	ff72f005 	.word	0xff72f005
   13d44:	f2c02800 	.word	0xf2c02800
   13d48:	a90980c5 	.word	0xa90980c5
   13d4c:	4608463a 	.word	0x4608463a
   13d50:	f8caf006 	.word	0xf8caf006
   13d54:	28004604 	.word	0x28004604
   13d58:	e754d0f0 	.word	0xe754d0f0
   13d5c:	0218f105 	.word	0x0218f105
   13d60:	a8034611 	.word	0xa8034611
   13d64:	fab4f006 	.word	0xfab4f006
   13d68:	28004604 	.word	0x28004604
   13d6c:	af4bf47f 	.word	0xaf4bf47f
   13d70:	a8034631 	.word	0xa8034631
   13d74:	fedef7ff 	.word	0xfedef7ff
   13d78:	28004604 	.word	0x28004604
   13d7c:	af43f47f 	.word	0xaf43f47f
   13d80:	4629aa03 	.word	0x4629aa03
   13d84:	f006a806 	.word	0xf006a806
   13d88:	4604f96f 	.word	0x4604f96f
   13d8c:	f47f2800 	.word	0xf47f2800
   13d90:	1d37af3a 	.word	0x1d37af3a
   13d94:	a906e008 	.word	0xa906e008
   13d98:	4608463a 	.word	0x4608463a
   13d9c:	f8a4f006 	.word	0xf8a4f006
   13da0:	28004604 	.word	0x28004604
   13da4:	af2ff47f 	.word	0xaf2ff47f
   13da8:	a8064639 	.word	0xa8064639
   13dac:	ff3cf005 	.word	0xff3cf005
   13db0:	daf02800 	.word	0xdaf02800
   13db4:	4629aa03 	.word	0x4629aa03
   13db8:	f006a809 	.word	0xf006a809
   13dbc:	4604f9c9 	.word	0x4604f9c9
   13dc0:	e720b170 	.word	0xe720b170
   13dc4:	a8092100 	.word	0xa8092100
   13dc8:	ff96f005 	.word	0xff96f005
   13dcc:	a909b158 	.word	0xa909b158
   13dd0:	4608463a 	.word	0x4608463a
   13dd4:	f948f006 	.word	0xf948f006
   13dd8:	28004604 	.word	0x28004604
   13ddc:	af13f47f 	.word	0xaf13f47f
   13de0:	2b009b09 	.word	0x2b009b09
   13de4:	aa09dbee 	.word	0xaa09dbee
   13de8:	a803a906 	.word	0xa803a906
   13dec:	fa70f006 	.word	0xfa70f006
   13df0:	28004604 	.word	0x28004604
   13df4:	af07f47f 	.word	0xaf07f47f
   13df8:	a8034631 	.word	0xa8034631
   13dfc:	fe9af7ff 	.word	0xfe9af7ff
   13e00:	28004604 	.word	0x28004604
   13e04:	aefff47f 	.word	0xaefff47f
   13e08:	a9032203 	.word	0xa9032203
   13e0c:	f0064668 	.word	0xf0064668
   13e10:	4604fb57 	.word	0x4604fb57
   13e14:	f47f2800 	.word	0xf47f2800
   13e18:	4639aef6 	.word	0x4639aef6
   13e1c:	f0054668 	.word	0xf0054668
   13e20:	2800ff03 	.word	0x2800ff03
   13e24:	af27f6ff 	.word	0xaf27f6ff
   13e28:	4669463a 	.word	0x4669463a
   13e2c:	f0064668 	.word	0xf0064668
   13e30:	4604f85b 	.word	0x4604f85b
   13e34:	d0f02800 	.word	0xd0f02800
   13e38:	f105e6e5 	.word	0xf105e6e5
   13e3c:	46110218 	.word	0x46110218
   13e40:	f006a803 	.word	0xf006a803
   13e44:	4604fa45 	.word	0x4604fa45
   13e48:	f47f2800 	.word	0xf47f2800
   13e4c:	4631aedc 	.word	0x4631aedc
   13e50:	f7ffa803 	.word	0xf7ffa803
   13e54:	4604fe6f 	.word	0x4604fe6f
   13e58:	f47f2800 	.word	0xf47f2800
   13e5c:	aa03aed4 	.word	0xaa03aed4
   13e60:	a8064611 	.word	0xa8064611
   13e64:	fa34f006 	.word	0xfa34f006
   13e68:	28004604 	.word	0x28004604
   13e6c:	aecbf47f 	.word	0xaecbf47f
   13e70:	a8064631 	.word	0xa8064631
   13e74:	fe5ef7ff 	.word	0xfe5ef7ff
   13e78:	28004604 	.word	0x28004604
   13e7c:	aec3f47f 	.word	0xaec3f47f
   13e80:	a906464a 	.word	0xa906464a
   13e84:	f006a803 	.word	0xf006a803
   13e88:	4604fa23 	.word	0x4604fa23
   13e8c:	f47f2800 	.word	0xf47f2800
   13e90:	4631aeba 	.word	0x4631aeba
   13e94:	f7ffa803 	.word	0xf7ffa803
   13e98:	4604fe4d 	.word	0x4604fe4d
   13e9c:	f47f2800 	.word	0xf47f2800
   13ea0:	aa03aeb2 	.word	0xaa03aeb2
   13ea4:	46684669 	.word	0x46684669
   13ea8:	f8def006 	.word	0xf8def006
   13eac:	28004604 	.word	0x28004604
   13eb0:	aea9f47f 	.word	0xaea9f47f
   13eb4:	46684639 	.word	0x46684639
   13eb8:	feb6f005 	.word	0xfeb6f005
   13ebc:	f6ff2800 	.word	0xf6ff2800
   13ec0:	463aaeda 	.word	0x463aaeda
   13ec4:	46684669 	.word	0x46684669
   13ec8:	f80ef006 	.word	0xf80ef006
   13ecc:	28004604 	.word	0x28004604
   13ed0:	e698d0f0 	.word	0xe698d0f0
   13ed4:	4669466a 	.word	0x4669466a
   13ed8:	f006a806 	.word	0xf006a806
   13edc:	4604f9f9 	.word	0x4604f9f9
   13ee0:	f47f2800 	.word	0xf47f2800
   13ee4:	4631ae90 	.word	0x4631ae90
   13ee8:	f7ffa806 	.word	0xf7ffa806
   13eec:	4604fe23 	.word	0x4604fe23
   13ef0:	f47f2800 	.word	0xf47f2800
   13ef4:	a906ae88 	.word	0xa906ae88
   13ef8:	4608aa03 	.word	0x4608aa03
   13efc:	f928f006 	.word	0xf928f006
   13f00:	28004604 	.word	0x28004604
   13f04:	ae7ff47f 	.word	0xae7ff47f
   13f08:	2b009b06 	.word	0x2b009b06
   13f0c:	2100da0d 	.word	0x2100da0d
   13f10:	f005a806 	.word	0xf005a806
   13f14:	b140fef1 	.word	0xb140fef1
   13f18:	463aa906 	.word	0x463aa906
   13f1c:	f0064608 	.word	0xf0064608
   13f20:	4604f8a3 	.word	0x4604f8a3
   13f24:	d0ef2800 	.word	0xd0ef2800
   13f28:	a906e66d 	.word	0xa906e66d
   13f2c:	4608aa03 	.word	0x4608aa03
   13f30:	f90ef006 	.word	0xf90ef006
   13f34:	28004604 	.word	0x28004604
   13f38:	ae65f47f 	.word	0xae65f47f
   13f3c:	2b009b06 	.word	0x2b009b06
   13f40:	2100da0d 	.word	0x2100da0d
   13f44:	f005a806 	.word	0xf005a806
   13f48:	b140fed7 	.word	0xb140fed7
   13f4c:	463aa906 	.word	0x463aa906
   13f50:	f0064608 	.word	0xf0064608
   13f54:	4604f889 	.word	0x4604f889
   13f58:	d0ef2800 	.word	0xd0ef2800
   13f5c:	a903e653 	.word	0xa903e653
   13f60:	4608aa06 	.word	0x4608aa06
   13f64:	f8f4f006 	.word	0xf8f4f006
   13f68:	28004604 	.word	0x28004604
   13f6c:	ae4bf47f 	.word	0xae4bf47f
   13f70:	2b009b03 	.word	0x2b009b03
   13f74:	2100da0d 	.word	0x2100da0d
   13f78:	f005a803 	.word	0xf005a803
   13f7c:	b140febd 	.word	0xb140febd
   13f80:	463aa903 	.word	0x463aa903
   13f84:	f0064608 	.word	0xf0064608
   13f88:	4604f86f 	.word	0x4604f86f
   13f8c:	d0ef2800 	.word	0xd0ef2800
   13f90:	a903e639 	.word	0xa903e639
   13f94:	4608466a 	.word	0x4608466a
   13f98:	f99af006 	.word	0xf99af006
   13f9c:	28004604 	.word	0x28004604
   13fa0:	ae31f47f 	.word	0xae31f47f
   13fa4:	a8034631 	.word	0xa8034631
   13fa8:	fdc4f7ff 	.word	0xfdc4f7ff
   13fac:	28004604 	.word	0x28004604
   13fb0:	ae29f47f 	.word	0xae29f47f
   13fb4:	aa09a903 	.word	0xaa09a903
   13fb8:	f0064608 	.word	0xf0064608
   13fbc:	4604f8c9 	.word	0x4604f8c9
   13fc0:	f47f2800 	.word	0xf47f2800
   13fc4:	9b03ae20 	.word	0x9b03ae20
   13fc8:	da0d2b00 	.word	0xda0d2b00
   13fcc:	a8032100 	.word	0xa8032100
   13fd0:	fe92f005 	.word	0xfe92f005
   13fd4:	a903b140 	.word	0xa903b140
   13fd8:	4608463a 	.word	0x4608463a
   13fdc:	f844f006 	.word	0xf844f006
   13fe0:	28004604 	.word	0x28004604
   13fe4:	e60ed0ef 	.word	0xe60ed0ef
   13fe8:	0218f105 	.word	0x0218f105
   13fec:	a8094649 	.word	0xa8094649
   13ff0:	f96ef006 	.word	0xf96ef006
   13ff4:	28004604 	.word	0x28004604
   13ff8:	ae05f47f 	.word	0xae05f47f
   13ffc:	a8094631 	.word	0xa8094631
   14000:	fd98f7ff 	.word	0xfd98f7ff
   14004:	28004604 	.word	0x28004604
   14008:	adfdf47f 	.word	0xadfdf47f
   1400c:	a8092101 	.word	0xa8092101
   14010:	fce4f005 	.word	0xfce4f005
   14014:	28004604 	.word	0x28004604
   14018:	adf5f47f 	.word	0xadf5f47f
   1401c:	a8094639 	.word	0xa8094639
   14020:	fe02f005 	.word	0xfe02f005
   14024:	db082800 	.word	0xdb082800
   14028:	463aa909 	.word	0x463aa909
   1402c:	f0054608 	.word	0xf0054608
   14030:	4604ff5b 	.word	0x4604ff5b
   14034:	d0f12800 	.word	0xd0f12800
   14038:	a906e5e5 	.word	0xa906e5e5
   1403c:	f0054640 	.word	0xf0054640
   14040:	4604f9b5 	.word	0x4604f9b5
   14044:	f47f2800 	.word	0xf47f2800
   14048:	a903adde 	.word	0xa903adde
   1404c:	000cf108 	.word	0x000cf108
   14050:	f9acf005 	.word	0xf9acf005
   14054:	28004604 	.word	0x28004604
   14058:	add5f47f 	.word	0xadd5f47f
   1405c:	0018f108 	.word	0x0018f108
   14060:	f005a909 	.word	0xf005a909
   14064:	4604f9a3 	.word	0x4604f9a3
   14068:	bf00e5cd 	.word	0xbf00e5cd

0001406c <ecp_normalize_jac>:
   1406c:	f101b5f0 	.word	0xf101b5f0
   14070:	b0870518 	.word	0xb0870518
   14074:	4607460e 	.word	0x4607460e
   14078:	46282100 	.word	0x46282100
   1407c:	fe3cf005 	.word	0xfe3cf005
   14080:	4604b918 	.word	0x4604b918
   14084:	b0074620 	.word	0xb0074620
   14088:	4668bdf0 	.word	0x4668bdf0
   1408c:	f90af005 	.word	0xf90af005
   14090:	f005a803 	.word	0xf005a803
   14094:	4668f907 	.word	0x4668f907
   14098:	46291d3a 	.word	0x46291d3a
   1409c:	f936f007 	.word	0xf936f007
   140a0:	b1404604 	.word	0xb1404604
   140a4:	f0054668 	.word	0xf0054668
   140a8:	a803f905 	.word	0xa803f905
   140ac:	f902f005 	.word	0xf902f005
   140b0:	b0074620 	.word	0xb0074620
   140b4:	466abdf0 	.word	0x466abdf0
   140b8:	a8034669 	.word	0xa8034669
   140bc:	f908f006 	.word	0xf908f006
   140c0:	28004604 	.word	0x28004604
   140c4:	4639d1ee 	.word	0x4639d1ee
   140c8:	f7ffa803 	.word	0xf7ffa803
   140cc:	4604fd33 	.word	0x4604fd33
   140d0:	d1e72800 	.word	0xd1e72800
   140d4:	4631aa03 	.word	0x4631aa03
   140d8:	f0064630 	.word	0xf0064630
   140dc:	4604f8f9 	.word	0x4604f8f9
   140e0:	d1df2800 	.word	0xd1df2800
   140e4:	46304639 	.word	0x46304639
   140e8:	fd24f7ff 	.word	0xfd24f7ff
   140ec:	28004604 	.word	0x28004604
   140f0:	360cd1d8 	.word	0x360cd1d8
   140f4:	46304631 	.word	0x46304631
   140f8:	f006aa03 	.word	0xf006aa03
   140fc:	4604f8e9 	.word	0x4604f8e9
   14100:	d1cf2800 	.word	0xd1cf2800
   14104:	46304639 	.word	0x46304639
   14108:	fd14f7ff 	.word	0xfd14f7ff
   1410c:	28004604 	.word	0x28004604
   14110:	466ad1c8 	.word	0x466ad1c8
   14114:	46304631 	.word	0x46304631
   14118:	f8daf006 	.word	0xf8daf006
   1411c:	28004604 	.word	0x28004604
   14120:	4639d1c0 	.word	0x4639d1c0
   14124:	f7ff4630 	.word	0xf7ff4630
   14128:	4604fd05 	.word	0x4604fd05
   1412c:	d1b92800 	.word	0xd1b92800
   14130:	21014628 	.word	0x21014628
   14134:	fac6f005 	.word	0xfac6f005
   14138:	e7b34604 	.word	0xe7b34604

0001413c <ecp_normalize_jac_many.part.3>:
   1413c:	4ff0e92d 	.word	0x4ff0e92d
   14140:	b08b4682 	.word	0xb08b4682
   14144:	4610468b 	.word	0x4610468b
   14148:	4616210c 	.word	0x4616210c
   1414c:	fcfef008 	.word	0xfcfef008
   14150:	f0002800 	.word	0xf0002800
   14154:	468080fe 	.word	0x468080fe
   14158:	f005a801 	.word	0xf005a801
   1415c:	a804f8a3 	.word	0xa804f8a3
   14160:	f8a0f005 	.word	0xf8a0f005
   14164:	f005a807 	.word	0xf005a807
   14168:	f8dbf89d 	.word	0xf8dbf89d
   1416c:	46401000 	.word	0x46401000
   14170:	f0053118 	.word	0xf0053118
   14174:	4604f91b 	.word	0x4604f91b
   14178:	2e01bb60 	.word	0x2e01bb60
   1417c:	46d9d946 	.word	0x46d9d946
   14180:	f1082701 	.word	0xf1082701
   14184:	e008050c 	.word	0xe008050c
   14188:	46514628 	.word	0x46514628
   1418c:	fcd2f7ff 	.word	0xfcd2f7ff
   14190:	4604350c 	.word	0x4604350c
   14194:	42beb968 	.word	0x42beb968
   14198:	f859d038 	.word	0xf859d038
   1419c:	f1a52f04 	.word	0xf1a52f04
   141a0:	3218010c 	.word	0x3218010c
   141a4:	f0064628 	.word	0xf0064628
   141a8:	3701f893 	.word	0x3701f893
   141ac:	28004604 	.word	0x28004604
   141b0:	a801d0ea 	.word	0xa801d0ea
   141b4:	f87ef005 	.word	0xf87ef005
   141b8:	f005a804 	.word	0xf005a804
   141bc:	a807f87b 	.word	0xa807f87b
   141c0:	f878f005 	.word	0xf878f005
   141c4:	a901e010 	.word	0xa901e010
   141c8:	f005a804 	.word	0xf005a804
   141cc:	4604f8ef 	.word	0x4604f8ef
   141d0:	d0532800 	.word	0xd0532800
   141d4:	f005a801 	.word	0xf005a801
   141d8:	a804f86d 	.word	0xa804f86d
   141dc:	f86af005 	.word	0xf86af005
   141e0:	f005a807 	.word	0xf005a807
   141e4:	b156f867 	.word	0xb156f867
   141e8:	eb064645 	.word	0xeb064645
   141ec:	eb080646 	.word	0xeb080646
   141f0:	46280686 	.word	0x46280686
   141f4:	f005350c 	.word	0xf005350c
   141f8:	42b5f85d 	.word	0x42b5f85d
   141fc:	4640d1f9 	.word	0x4640d1f9
   14200:	fcb8f008 	.word	0xfcb8f008
   14204:	b00b4620 	.word	0xb00b4620
   14208:	8ff0e8bd 	.word	0x8ff0e8bd
   1420c:	0546eb06 	.word	0x0546eb06
   14210:	f1a500ad 	.word	0xf1a500ad
   14214:	4441010c 	.word	0x4441010c
   14218:	0204f10a 	.word	0x0204f10a
   1421c:	f007a801 	.word	0xf007a801
   14220:	4604f875 	.word	0x4604f875
   14224:	d1d52800 	.word	0xd1d52800
   14228:	4380f106 	.word	0x4380f106
   1422c:	3b013d18 	.word	0x3b013d18
   14230:	eb0b4445 	.word	0xeb0b4445
   14234:	1e770b83 	.word	0x1e770b83
   14238:	d0c42f00 	.word	0xd0c42f00
   1423c:	a901462a 	.word	0xa901462a
   14240:	f006a804 	.word	0xf006a804
   14244:	4604f845 	.word	0x4604f845
   14248:	d1c32800 	.word	0xd1c32800
   1424c:	a8044651 	.word	0xa8044651
   14250:	fc70f7ff 	.word	0xfc70f7ff
   14254:	28004604 	.word	0x28004604
   14258:	f8dbd1bc 	.word	0xf8dbd1bc
   1425c:	a9012000 	.word	0xa9012000
   14260:	46083218 	.word	0x46083218
   14264:	f834f006 	.word	0xf834f006
   14268:	28004604 	.word	0x28004604
   1426c:	4651d1b2 	.word	0x4651d1b2
   14270:	f7ffa801 	.word	0xf7ffa801
   14274:	4604fc5f 	.word	0x4604fc5f
   14278:	d1ab2800 	.word	0xd1ab2800
   1427c:	4611aa04 	.word	0x4611aa04
   14280:	f006a807 	.word	0xf006a807
   14284:	4604f825 	.word	0x4604f825
   14288:	d1a32800 	.word	0xd1a32800
   1428c:	a8074651 	.word	0xa8074651
   14290:	fc50f7ff 	.word	0xfc50f7ff
   14294:	28004604 	.word	0x28004604
   14298:	f8dbd19c 	.word	0xf8dbd19c
   1429c:	aa071000 	.word	0xaa071000
   142a0:	f0064608 	.word	0xf0064608
   142a4:	4604f815 	.word	0x4604f815
   142a8:	d1932800 	.word	0xd1932800
   142ac:	f8db4651 	.word	0xf8db4651
   142b0:	f7ff0000 	.word	0xf7ff0000
   142b4:	4604fc3f 	.word	0x4604fc3f
   142b8:	d18b2800 	.word	0xd18b2800
   142bc:	1000f8db 	.word	0x1000f8db
   142c0:	310caa07 	.word	0x310caa07
   142c4:	f0064608 	.word	0xf0064608
   142c8:	4604f803 	.word	0x4604f803
   142cc:	d1812800 	.word	0xd1812800
   142d0:	0000f8db 	.word	0x0000f8db
   142d4:	300c4651 	.word	0x300c4651
   142d8:	fc2cf7ff 	.word	0xfc2cf7ff
   142dc:	28004604 	.word	0x28004604
   142e0:	af78f47f 	.word	0xaf78f47f
   142e4:	1000f8db 	.word	0x1000f8db
   142e8:	310caa04 	.word	0x310caa04
   142ec:	f0054608 	.word	0xf0054608
   142f0:	4604ffef 	.word	0x4604ffef
   142f4:	f47f2800 	.word	0xf47f2800
   142f8:	f8dbaf6d 	.word	0xf8dbaf6d
   142fc:	46510000 	.word	0x46510000
   14300:	f7ff300c 	.word	0xf7ff300c
   14304:	4604fc17 	.word	0x4604fc17
   14308:	f47f2800 	.word	0xf47f2800
   1430c:	f8daaf63 	.word	0xf8daaf63
   14310:	f8db1008 	.word	0xf8db1008
   14314:	f0040000 	.word	0xf0040000
   14318:	4604ffe7 	.word	0x4604ffe7
   1431c:	f47f2800 	.word	0xf47f2800
   14320:	f8dbaf59 	.word	0xf8dbaf59
   14324:	f8da0000 	.word	0xf8da0000
   14328:	300c1008 	.word	0x300c1008
   1432c:	ffdcf004 	.word	0xffdcf004
   14330:	28004604 	.word	0x28004604
   14334:	af4ef47f 	.word	0xaf4ef47f
   14338:	0000f8db 	.word	0x0000f8db
   1433c:	30183d0c 	.word	0x30183d0c
   14340:	0b04f1ab 	.word	0x0b04f1ab
   14344:	ffb6f004 	.word	0xffb6f004
   14348:	f43f2f00 	.word	0xf43f2f00
   1434c:	3f01af43 	.word	0x3f01af43
   14350:	4c01e772 	.word	0x4c01e772
   14354:	bf00e756 	.word	0xbf00e756
   14358:	ffffb280 	.word	0xffffb280

0001435c <symbol_0002b14>:
   1435c:	b510b1b8 	.word	0xb510b1b8
   14360:	227c4604 	.word	0x227c4604
   14364:	f00e2100 	.word	0xf00e2100
   14368:	f104fead 	.word	0xf104fead
   1436c:	f004007c 	.word	0xf004007c
   14370:	f104ff99 	.word	0xf104ff99
   14374:	f0040088 	.word	0xf0040088
   14378:	f104ff95 	.word	0xf104ff95
   1437c:	f0040094 	.word	0xf0040094
   14380:	f104ff91 	.word	0xf104ff91
   14384:	e8bd00a0 	.word	0xe8bd00a0
   14388:	f0044010 	.word	0xf0044010
   1438c:	4770bf8b 	.word	0x4770bf8b

00014390 <symbol_0000ef7>:
   14390:	d0482800 	.word	0xd0482800
   14394:	6e03b570 	.word	0x6e03b570
   14398:	2b014604 	.word	0x2b014604
   1439c:	6f60d123 	.word	0x6f60d123
   143a0:	6fa2b1c8 	.word	0x6fa2b1c8
   143a4:	2600b1aa 	.word	0x2600b1aa
   143a8:	03c6eb06 	.word	0x03c6eb06
   143ac:	0583eb10 	.word	0x0583eb10
   143b0:	4628d035 	.word	0x4628d035
   143b4:	ff7ef004 	.word	0xff7ef004
   143b8:	000cf105 	.word	0x000cf105
   143bc:	ff7af004 	.word	0xff7af004
   143c0:	0018f105 	.word	0x0018f105
   143c4:	ff76f004 	.word	0xff76f004
   143c8:	36016fa2 	.word	0x36016fa2
   143cc:	6f604296 	.word	0x6f604296
   143d0:	f008d3ea 	.word	0xf008d3ea
   143d4:	2200fbcf 	.word	0x2200fbcf
   143d8:	037cf104 	.word	0x037cf104
   143dc:	34017022 	.word	0x34017022
   143e0:	d1fb429c 	.word	0xd1fb429c
   143e4:	3004bd70 	.word	0x3004bd70
   143e8:	ff64f004 	.word	0xff64f004
   143ec:	0010f104 	.word	0x0010f104
   143f0:	ff60f004 	.word	0xff60f004
   143f4:	001cf104 	.word	0x001cf104
   143f8:	ff5cf004 	.word	0xff5cf004
   143fc:	0028f104 	.word	0x0028f104
   14400:	ff58f004 	.word	0xff58f004
   14404:	0034f104 	.word	0x0034f104
   14408:	ff54f004 	.word	0xff54f004
   1440c:	0040f104 	.word	0x0040f104
   14410:	ff50f004 	.word	0xff50f004
   14414:	004cf104 	.word	0x004cf104
   14418:	ff4cf004 	.word	0xff4cf004
   1441c:	3601e7bf 	.word	0x3601e7bf
   14420:	d3c14296 	.word	0xd3c14296
   14424:	4770e7d5 	.word	0x4770e7d5

00014428 <symbol_0001d5f>:
   14428:	b510b1a8 	.word	0xb510b1a8
   1442c:	f7ff4604 	.word	0xf7ff4604
   14430:	f104ffaf 	.word	0xf104ffaf
   14434:	f004007c 	.word	0xf004007c
   14438:	f104ff3d 	.word	0xf104ff3d
   1443c:	f0040088 	.word	0xf0040088
   14440:	f104ff39 	.word	0xf104ff39
   14444:	f0040094 	.word	0xf0040094
   14448:	f104ff35 	.word	0xf104ff35
   1444c:	e8bd00a0 	.word	0xe8bd00a0
   14450:	f0044010 	.word	0xf0044010
   14454:	4770bf2f 	.word	0x4770bf2f

00014458 <symbol_000d41f>:
   14458:	2101b510 	.word	0x2101b510
   1445c:	f0054604 	.word	0xf0054604
   14460:	b100f931 	.word	0xb100f931
   14464:	2101bd10 	.word	0x2101bd10
   14468:	000cf104 	.word	0x000cf104
   1446c:	f92af005 	.word	0xf92af005
   14470:	d1f72800 	.word	0xd1f72800
   14474:	f1044601 	.word	0xf1044601
   14478:	e8bd0018 	.word	0xe8bd0018
   1447c:	f0054010 	.word	0xf0054010
   14480:	bf00b921 	.word	0xbf00b921

00014484 <ecp_add_mixed>:
   14484:	47f0e92d 	.word	0x47f0e92d
   14488:	0518f102 	.word	0x0518f102
   1448c:	4681b096 	.word	0x4681b096
   14490:	46284688 	.word	0x46284688
   14494:	46172100 	.word	0x46172100
   14498:	f005461e 	.word	0xf005461e
   1449c:	2800fc2d 	.word	0x2800fc2d
   144a0:	6a33d048 	.word	0x6a33d048
   144a4:	f106b18b 	.word	0xf106b18b
   144a8:	46200418 	.word	0x46200418
   144ac:	f0052100 	.word	0xf0052100
   144b0:	2800fc23 	.word	0x2800fc23
   144b4:	80d7f000 	.word	0x80d7f000
   144b8:	b1336a33 	.word	0xb1336a33
   144bc:	21014620 	.word	0x21014620
   144c0:	fc1af005 	.word	0xfc1af005
   144c4:	f0402800 	.word	0xf0402800
   144c8:	a80180e7 	.word	0xa80180e7
   144cc:	feeaf004 	.word	0xfeeaf004
   144d0:	f004a804 	.word	0xf004a804
   144d4:	a807fee7 	.word	0xa807fee7
   144d8:	fee4f004 	.word	0xfee4f004
   144dc:	f004a80a 	.word	0xf004a80a
   144e0:	a80dfee1 	.word	0xa80dfee1
   144e4:	fedef004 	.word	0xfedef004
   144e8:	f004a810 	.word	0xf004a810
   144ec:	a813fedb 	.word	0xa813fedb
   144f0:	fed8f004 	.word	0xfed8f004
   144f4:	4629462a 	.word	0x4629462a
   144f8:	f005a801 	.word	0xf005a801
   144fc:	4604fee9 	.word	0x4604fee9
   14500:	a801b380 	.word	0xa801b380
   14504:	fed6f004 	.word	0xfed6f004
   14508:	f004a804 	.word	0xf004a804
   1450c:	a807fed3 	.word	0xa807fed3
   14510:	fed0f004 	.word	0xfed0f004
   14514:	f004a80a 	.word	0xf004a80a
   14518:	a80dfecd 	.word	0xa80dfecd
   1451c:	fecaf004 	.word	0xfecaf004
   14520:	f004a810 	.word	0xf004a810
   14524:	a813fec7 	.word	0xa813fec7
   14528:	fec4f004 	.word	0xfec4f004
   1452c:	b0164620 	.word	0xb0164620
   14530:	87f0e8bd 	.word	0x87f0e8bd
   14534:	46404631 	.word	0x46404631
   14538:	ff38f004 	.word	0xff38f004
   1453c:	28004604 	.word	0x28004604
   14540:	f106d1f4 	.word	0xf106d1f4
   14544:	f108010c 	.word	0xf108010c
   14548:	f004000c 	.word	0xf004000c
   1454c:	4604ff2f 	.word	0x4604ff2f
   14550:	d1eb2800 	.word	0xd1eb2800
   14554:	0118f106 	.word	0x0118f106
   14558:	0018f108 	.word	0x0018f108
   1455c:	ff26f004 	.word	0xff26f004
   14560:	e7e34604 	.word	0xe7e34604
   14564:	a8014649 	.word	0xa8014649
   14568:	fae4f7ff 	.word	0xfae4f7ff
   1456c:	28004604 	.word	0x28004604
   14570:	462ad1c7 	.word	0x462ad1c7
   14574:	a804a901 	.word	0xa804a901
   14578:	feaaf005 	.word	0xfeaaf005
   1457c:	28004604 	.word	0x28004604
   14580:	4649d1bf 	.word	0x4649d1bf
   14584:	f7ffa804 	.word	0xf7ffa804
   14588:	4604fad5 	.word	0x4604fad5
   1458c:	d1b82800 	.word	0xd1b82800
   14590:	4632a901 	.word	0x4632a901
   14594:	f0054608 	.word	0xf0054608
   14598:	4604fe9b 	.word	0x4604fe9b
   1459c:	d1b02800 	.word	0xd1b02800
   145a0:	a8014649 	.word	0xa8014649
   145a4:	fac6f7ff 	.word	0xfac6f7ff
   145a8:	28004604 	.word	0x28004604
   145ac:	a904d1a9 	.word	0xa904d1a9
   145b0:	020cf106 	.word	0x020cf106
   145b4:	f0054608 	.word	0xf0054608
   145b8:	4604fe8b 	.word	0x4604fe8b
   145bc:	d1a02800 	.word	0xd1a02800
   145c0:	a8044649 	.word	0xa8044649
   145c4:	fab6f7ff 	.word	0xfab6f7ff
   145c8:	28004604 	.word	0x28004604
   145cc:	a901d199 	.word	0xa901d199
   145d0:	4608463a 	.word	0x4608463a
   145d4:	fdbcf005 	.word	0xfdbcf005
   145d8:	28004604 	.word	0x28004604
   145dc:	f109d191 	.word	0xf109d191
   145e0:	e00c0604 	.word	0xe00c0604
   145e4:	a8012100 	.word	0xa8012100
   145e8:	fb86f005 	.word	0xfb86f005
   145ec:	a901b150 	.word	0xa901b150
   145f0:	46084632 	.word	0x46084632
   145f4:	fd38f005 	.word	0xfd38f005
   145f8:	28004604 	.word	0x28004604
   145fc:	9b01d181 	.word	0x9b01d181
   14600:	dbef2b00 	.word	0xdbef2b00
   14604:	f107a904 	.word	0xf107a904
   14608:	4632060c 	.word	0x4632060c
   1460c:	f0054608 	.word	0xf0054608
   14610:	4604fd9f 	.word	0x4604fd9f
   14614:	f47f2800 	.word	0xf47f2800
   14618:	f109af74 	.word	0xf109af74
   1461c:	e00d0a04 	.word	0xe00d0a04
   14620:	a8042100 	.word	0xa8042100
   14624:	fb68f005 	.word	0xfb68f005
   14628:	a904b158 	.word	0xa904b158
   1462c:	46084652 	.word	0x46084652
   14630:	fd1af005 	.word	0xfd1af005
   14634:	28004604 	.word	0x28004604
   14638:	af63f47f 	.word	0xaf63f47f
   1463c:	2b009b04 	.word	0x2b009b04
   14640:	2100dbee 	.word	0x2100dbee
   14644:	f005a801 	.word	0xf005a801
   14648:	4601fb57 	.word	0x4601fb57
   1464c:	a804bb30 	.word	0xa804bb30
   14650:	fb52f005 	.word	0xfb52f005
   14654:	d17f2800 	.word	0xd17f2800
   14658:	4641463a 	.word	0x4641463a
   1465c:	f7ff4648 	.word	0xf7ff4648
   14660:	4604fab5 	.word	0x4604fab5
   14664:	4639e74d 	.word	0x4639e74d
   14668:	f0044640 	.word	0xf0044640
   1466c:	4604fe9f 	.word	0x4604fe9f
   14670:	f47f2800 	.word	0xf47f2800
   14674:	f107af5b 	.word	0xf107af5b
   14678:	f108010c 	.word	0xf108010c
   1467c:	f004000c 	.word	0xf004000c
   14680:	4604fe95 	.word	0x4604fe95
   14684:	f47f2800 	.word	0xf47f2800
   14688:	4629af51 	.word	0x4629af51
   1468c:	0018f108 	.word	0x0018f108
   14690:	fe8cf004 	.word	0xfe8cf004
   14694:	e7494604 	.word	0xe7494604
   14698:	e7474c8b 	.word	0xe7474c8b
   1469c:	aa014629 	.word	0xaa014629
   146a0:	f005a813 	.word	0xf005a813
   146a4:	4604fe15 	.word	0x4604fe15
   146a8:	f47f2800 	.word	0xf47f2800
   146ac:	4649af2a 	.word	0x4649af2a
   146b0:	f7ffa813 	.word	0xf7ffa813
   146b4:	4604fa3f 	.word	0x4604fa3f
   146b8:	f47f2800 	.word	0xf47f2800
   146bc:	aa01af22 	.word	0xaa01af22
   146c0:	a8074611 	.word	0xa8074611
   146c4:	fe04f005 	.word	0xfe04f005
   146c8:	28004604 	.word	0x28004604
   146cc:	af19f47f 	.word	0xaf19f47f
   146d0:	a8074649 	.word	0xa8074649
   146d4:	fa2ef7ff 	.word	0xfa2ef7ff
   146d8:	28004604 	.word	0x28004604
   146dc:	af11f47f 	.word	0xaf11f47f
   146e0:	a907aa01 	.word	0xa907aa01
   146e4:	f005a80a 	.word	0xf005a80a
   146e8:	4604fdf3 	.word	0x4604fdf3
   146ec:	f47f2800 	.word	0xf47f2800
   146f0:	4649af08 	.word	0x4649af08
   146f4:	f7ffa80a 	.word	0xf7ffa80a
   146f8:	4604fa1d 	.word	0x4604fa1d
   146fc:	f47f2800 	.word	0xf47f2800
   14700:	a907af00 	.word	0xa907af00
   14704:	4608463a 	.word	0x4608463a
   14708:	fde2f005 	.word	0xfde2f005
   1470c:	28004604 	.word	0x28004604
   14710:	aef7f47f 	.word	0xaef7f47f
   14714:	a8074649 	.word	0xa8074649
   14718:	fa0cf7ff 	.word	0xfa0cf7ff
   1471c:	28004604 	.word	0x28004604
   14720:	aeeff47f 	.word	0xaeeff47f
   14724:	a9072202 	.word	0xa9072202
   14728:	f005a801 	.word	0xf005a801
   1472c:	4604fec9 	.word	0x4604fec9
   14730:	f47f2800 	.word	0xf47f2800
   14734:	f109aee6 	.word	0xf109aee6
   14738:	46290504 	.word	0x46290504
   1473c:	f005a801 	.word	0xf005a801
   14740:	2800fa73 	.word	0x2800fa73
   14744:	a901db0d 	.word	0xa901db0d
   14748:	4608462a 	.word	0x4608462a
   1474c:	fbccf005 	.word	0xfbccf005
   14750:	28004604 	.word	0x28004604
   14754:	e6d4d0f1 	.word	0xe6d4d0f1
   14758:	f7ff4640 	.word	0xf7ff4640
   1475c:	4604fe7d 	.word	0x4604fe7d
   14760:	aa04e6cf 	.word	0xaa04e6cf
   14764:	a80d4611 	.word	0xa80d4611
   14768:	fdb2f005 	.word	0xfdb2f005
   1476c:	28004604 	.word	0x28004604
   14770:	aec7f47f 	.word	0xaec7f47f
   14774:	a80d4649 	.word	0xa80d4649
   14778:	f9dcf7ff 	.word	0xf9dcf7ff
   1477c:	28004604 	.word	0x28004604
   14780:	aebff47f 	.word	0xaebff47f
   14784:	aa01a90d 	.word	0xaa01a90d
   14788:	f0054608 	.word	0xf0054608
   1478c:	4604fce1 	.word	0x4604fce1
   14790:	f47f2800 	.word	0xf47f2800
   14794:	9b0daeb6 	.word	0x9b0daeb6
   14798:	da0d2b00 	.word	0xda0d2b00
   1479c:	a80d2100 	.word	0xa80d2100
   147a0:	faaaf005 	.word	0xfaaaf005
   147a4:	a90db140 	.word	0xa90db140
   147a8:	4608462a 	.word	0x4608462a
   147ac:	fc5cf005 	.word	0xfc5cf005
   147b0:	28004604 	.word	0x28004604
   147b4:	e6a4d0ef 	.word	0xe6a4d0ef
   147b8:	aa0aa90d 	.word	0xaa0aa90d
   147bc:	f0054608 	.word	0xf0054608
   147c0:	4604fcc7 	.word	0x4604fcc7
   147c4:	f47f2800 	.word	0xf47f2800
   147c8:	9b0dae9c 	.word	0x9b0dae9c
   147cc:	da0d2b00 	.word	0xda0d2b00
   147d0:	a80d2100 	.word	0xa80d2100
   147d4:	fa90f005 	.word	0xfa90f005
   147d8:	a90db140 	.word	0xa90db140
   147dc:	4608462a 	.word	0x4608462a
   147e0:	fc42f005 	.word	0xfc42f005
   147e4:	28004604 	.word	0x28004604
   147e8:	e68ad0ef 	.word	0xe68ad0ef
   147ec:	aa0da907 	.word	0xaa0da907
   147f0:	f0054608 	.word	0xf0054608
   147f4:	4604fcad 	.word	0x4604fcad
   147f8:	f47f2800 	.word	0xf47f2800
   147fc:	9b07ae82 	.word	0x9b07ae82
   14800:	da0d2b00 	.word	0xda0d2b00
   14804:	a8072100 	.word	0xa8072100
   14808:	fa76f005 	.word	0xfa76f005
   1480c:	a907b140 	.word	0xa907b140
   14810:	4608462a 	.word	0x4608462a
   14814:	fc28f005 	.word	0xfc28f005
   14818:	28004604 	.word	0x28004604
   1481c:	e670d0ef 	.word	0xe670d0ef
   14820:	aa04a907 	.word	0xaa04a907
   14824:	f0054608 	.word	0xf0054608
   14828:	4604fd53 	.word	0x4604fd53
   1482c:	f47f2800 	.word	0xf47f2800
   14830:	4649ae68 	.word	0x4649ae68
   14834:	f7ffa807 	.word	0xf7ffa807
   14838:	4604f97d 	.word	0x4604f97d
   1483c:	f47f2800 	.word	0xf47f2800
   14840:	a90aae60 	.word	0xa90aae60
   14844:	46084632 	.word	0x46084632
   14848:	fd42f005 	.word	0xfd42f005
   1484c:	28004604 	.word	0x28004604
   14850:	ae57f47f 	.word	0xae57f47f
   14854:	a80a4649 	.word	0xa80a4649
   14858:	f96cf7ff 	.word	0xf96cf7ff
   1485c:	28004604 	.word	0x28004604
   14860:	ae4ff47f 	.word	0xae4ff47f
   14864:	a907aa0a 	.word	0xa907aa0a
   14868:	f005a810 	.word	0xf005a810
   1486c:	4604fc71 	.word	0x4604fc71
   14870:	f47f2800 	.word	0xf47f2800
   14874:	9b10ae46 	.word	0x9b10ae46
   14878:	da0d2b00 	.word	0xda0d2b00
   1487c:	a8102100 	.word	0xa8102100
   14880:	fa3af005 	.word	0xfa3af005
   14884:	a910b140 	.word	0xa910b140
   14888:	4608462a 	.word	0x4608462a
   1488c:	fbecf005 	.word	0xfbecf005
   14890:	28004604 	.word	0x28004604
   14894:	e634d0ef 	.word	0xe634d0ef
   14898:	4640a90d 	.word	0x4640a90d
   1489c:	fd86f004 	.word	0xfd86f004
   148a0:	28004604 	.word	0x28004604
   148a4:	ae2df47f 	.word	0xae2df47f
   148a8:	f108a910 	.word	0xf108a910
   148ac:	f004000c 	.word	0xf004000c
   148b0:	4604fd7d 	.word	0x4604fd7d
   148b4:	f47f2800 	.word	0xf47f2800
   148b8:	f108ae24 	.word	0xf108ae24
   148bc:	a9130018 	.word	0xa9130018
   148c0:	fd74f004 	.word	0xfd74f004
   148c4:	e61c4604 	.word	0xe61c4604
   148c8:	ffffb080 	.word	0xffffb080

000148cc <ecp_mul_comb>:
   148cc:	4ff0e92d 	.word	0x4ff0e92d
   148d0:	46984605 	.word	0x46984605
   148d4:	034cf105 	.word	0x034cf105
   148d8:	b0e5461c 	.word	0xb0e5461c
   148dc:	9104a80d 	.word	0x9104a80d
   148e0:	93084617 	.word	0x93084617
   148e4:	fcdef004 	.word	0xfcdef004
   148e8:	f004a810 	.word	0xf004a810
   148ec:	4620fcdb 	.word	0x4620fcdb
   148f0:	f0042100 	.word	0xf0042100
   148f4:	2801ff21 	.word	0x2801ff21
   148f8:	f0409007 	.word	0xf0409007
   148fc:	6deb81c9 	.word	0x6deb81c9
   14900:	090cf108 	.word	0x090cf108
   14904:	7fc0f5b3 	.word	0x7fc0f5b3
   14908:	2605bf2c 	.word	0x2605bf2c
   1490c:	46482604 	.word	0x46482604
   14910:	0134f105 	.word	0x0134f105
   14914:	f04fbf2c 	.word	0xf04fbf2c
   14918:	f04f0a06 	.word	0xf04f0a06
   1491c:	46b30a05 	.word	0x46b30a05
   14920:	f982f005 	.word	0xf982f005
   14924:	d0722800 	.word	0xd0722800
   14928:	42a66dec 	.word	0x42a66dec
   1492c:	2301d245 	.word	0x2301d245
   14930:	32fff10b 	.word	0x32fff10b
   14934:	93024093 	.word	0x93024093
   14938:	b2db4434 	.word	0xb2db4434
   1493c:	93033c01 	.word	0x93033c01
   14940:	fbb42300 	.word	0xfbb42300
   14944:	9802f4f6 	.word	0x9802f4f6
   14948:	93059206 	.word	0x93059206
   1494c:	f0082124 	.word	0xf0082124
   14950:	9001f8fd 	.word	0x9001f8fd
   14954:	d0402800 	.word	0xd0402800
   14958:	f0044641 	.word	0xf0044641
   1495c:	f8ddfd27 	.word	0xf8ddfd27
   14960:	4683a004 	.word	0x4683a004
   14964:	f0002800 	.word	0xf0002800
   14968:	9b058086 	.word	0x9b058086
   1496c:	d17b2b00 	.word	0xd17b2b00
   14970:	9c012500 	.word	0x9c012500
   14974:	35019e03 	.word	0x35019e03
   14978:	4620b154 	.word	0x4620b154
   1497c:	fc9af004 	.word	0xfc9af004
   14980:	000cf104 	.word	0x000cf104
   14984:	fc96f004 	.word	0xfc96f004
   14988:	0018f104 	.word	0x0018f104
   1498c:	fc92f004 	.word	0xfc92f004
   14990:	429eb2eb 	.word	0x429eb2eb
   14994:	0424f104 	.word	0x0424f104
   14998:	9801d8ed 	.word	0x9801d8ed
   1499c:	f8eaf008 	.word	0xf8eaf008
   149a0:	f004a80d 	.word	0xf004a80d
   149a4:	a810fc87 	.word	0xa810fc87
   149a8:	fc84f004 	.word	0xfc84f004
   149ac:	0f00f1bb 	.word	0x0f00f1bb
   149b0:	4658d11b 	.word	0x4658d11b
   149b4:	e8bdb065 	.word	0xe8bdb065
   149b8:	26028ff0 	.word	0x26028ff0
   149bc:	22012300 	.word	0x22012300
   149c0:	21244630 	.word	0x21244630
   149c4:	6602e9cd 	.word	0x6602e9cd
   149c8:	3205e9cd 	.word	0x3205e9cd
   149cc:	f8bef008 	.word	0xf8bef008
   149d0:	08643401 	.word	0x08643401
   149d4:	28009001 	.word	0x28009001
   149d8:	a80dd1be 	.word	0xa80dd1be
   149dc:	fc6af004 	.word	0xfc6af004
   149e0:	f004a810 	.word	0xf004a810
   149e4:	f8dffc67 	.word	0xf8dffc67
   149e8:	9c04b644 	.word	0x9c04b644
   149ec:	d0e02c00 	.word	0xd0e02c00
   149f0:	f0044620 	.word	0xf0044620
   149f4:	f104fc5f 	.word	0xf104fc5f
   149f8:	f004000c 	.word	0xf004000c
   149fc:	f104fc5b 	.word	0xf104fc5b
   14a00:	f0040018 	.word	0xf0040018
   14a04:	4658fc57 	.word	0x4658fc57
   14a08:	e8bdb065 	.word	0xe8bdb065
   14a0c:	f1058ff0 	.word	0xf1058ff0
   14a10:	46400128 	.word	0x46400128
   14a14:	f908f005 	.word	0xf908f005
   14a18:	d1852800 	.word	0xd1852800
   14a1c:	459a6deb 	.word	0x459a6deb
   14a20:	82f4f0c0 	.word	0x82f4f0c0
   14a24:	1c5c2602 	.word	0x1c5c2602
   14a28:	e9cd2301 	.word	0xe9cd2301
   14a2c:	08646602 	.word	0x08646602
   14a30:	6f6b9306 	.word	0x6f6b9306
   14a34:	2b009301 	.word	0x2b009301
   14a38:	80eaf000 	.word	0x80eaf000
   14a3c:	46382100 	.word	0x46382100
   14a40:	fe7af004 	.word	0xfe7af004
   14a44:	46804639 	.word	0x46804639
   14a48:	f004a80d 	.word	0xf004a80d
   14a4c:	4683fcaf 	.word	0x4683fcaf
   14a50:	463ab950 	.word	0x463ab950
   14a54:	a8109908 	.word	0xa8109908
   14a58:	fb7af005 	.word	0xfb7af005
   14a5c:	28004683 	.word	0x28004683
   14a60:	9b07d036 	.word	0x9b07d036
   14a64:	d0832b00 	.word	0xd0832b00
   14a68:	f004a80d 	.word	0xf004a80d
   14a6c:	a810fc23 	.word	0xa810fc23
   14a70:	fc20f004 	.word	0xfc20f004
   14a74:	4649e7b9 	.word	0x4649e7b9
   14a78:	000cf10a 	.word	0x000cf10a
   14a7c:	fc96f004 	.word	0xfc96f004
   14a80:	28004683 	.word	0x28004683
   14a84:	af71f47f 	.word	0xaf71f47f
   14a88:	f1089b01 	.word	0xf1089b01
   14a8c:	f1030118 	.word	0xf1030118
   14a90:	f0040018 	.word	0xf0040018
   14a94:	4683fc8b 	.word	0x4683fc8b
   14a98:	f47f2800 	.word	0xf47f2800
   14a9c:	462aaf66 	.word	0x462aaf66
   14aa0:	0901f04f 	.word	0x0901f04f
   14aa4:	46254651 	.word	0x46254651
   14aa8:	464c4682 	.word	0x464c4682
   14aac:	96094690 	.word	0x96094690
   14ab0:	9e06970a 	.word	0x9e06970a
   14ab4:	eb049f01 	.word	0xeb049f01
   14ab8:	eb0704c4 	.word	0xeb0704c4
   14abc:	46200484 	.word	0x46200484
   14ac0:	fc74f004 	.word	0xfc74f004
   14ac4:	f0002800 	.word	0xf0002800
   14ac8:	468380a7 	.word	0x468380a7
   14acc:	e74d9b05 	.word	0xe74d9b05
   14ad0:	33fff118 	.word	0x33fff118
   14ad4:	2301bf18 	.word	0x2301bf18
   14ad8:	461aa910 	.word	0x461aa910
   14adc:	9302a80d 	.word	0x9302a80d
   14ae0:	fd92f004 	.word	0xfd92f004
   14ae4:	28004683 	.word	0x28004683
   14ae8:	a822d1bb 	.word	0xa822d1bb
   14aec:	46591c62 	.word	0x46591c62
   14af0:	fae8f00e 	.word	0xfae8f00e
   14af4:	f10db3d4 	.word	0xf10db3d4
   14af8:	46d80988 	.word	0x46d80988
   14afc:	46c246cb 	.word	0x46c246cb
   14b00:	46512700 	.word	0x46512700
   14b04:	f004a80d 	.word	0xf004a80d
   14b08:	f89bfe17 	.word	0xf89bfe17
   14b0c:	40b83000 	.word	0x40b83000
   14b10:	43033701 	.word	0x43033701
   14b14:	44a242b7 	.word	0x44a242b7
   14b18:	3000f88b 	.word	0x3000f88b
   14b1c:	f108d1f1 	.word	0xf108d1f1
   14b20:	45a00801 	.word	0x45a00801
   14b24:	0b01f10b 	.word	0x0b01f10b
   14b28:	2300d1e9 	.word	0x2300d1e9
   14b2c:	0c01f04f 	.word	0x0c01f04f
   14b30:	1088f89d 	.word	0x1088f89d
   14b34:	6f01f819 	.word	0x6f01f819
   14b38:	0c01f10c 	.word	0x0c01f10c
   14b3c:	0203ea86 	.word	0x0203ea86
   14b40:	f00043d0 	.word	0xf00043d0
   14b44:	fb000001 	.word	0xfb000001
   14b48:	b252f701 	.word	0xb252f701
   14b4c:	4033b27f 	.word	0x4033b27f
   14b50:	0607ea02 	.word	0x0607ea02
   14b54:	ea41407a 	.word	0xea41407a
   14b58:	433310c0 	.word	0x433310c0
   14b5c:	45e0b2d1 	.word	0x45e0b2d1
   14b60:	0c01f809 	.word	0x0c01f809
   14b64:	f889b2db 	.word	0xf889b2db
   14b68:	d2e31000 	.word	0xd2e31000
   14b6c:	a8192600 	.word	0xa8192600
   14b70:	fb98f004 	.word	0xfb98f004
   14b74:	f004a81c 	.word	0xf004a81c
   14b78:	a81ffb95 	.word	0xa81ffb95
   14b7c:	fb92f004 	.word	0xfb92f004
   14b80:	f813ab22 	.word	0xf813ab22
   14b84:	44239004 	.word	0x44239004
   14b88:	9b049306 	.word	0x9b049306
   14b8c:	469b4632 	.word	0x469b4632
   14b90:	95059f01 	.word	0x95059f01
   14b94:	9f03463d 	.word	0x9f03463d
   14b98:	0845f3c9 	.word	0x0845f3c9
   14b9c:	0a0cf103 	.word	0x0a0cf103
   14ba0:	0408eba2 	.word	0x0408eba2
   14ba4:	f484fab4 	.word	0xf484fab4
   14ba8:	46290964 	.word	0x46290964
   14bac:	46584622 	.word	0x46584622
   14bb0:	fd2af004 	.word	0xfd2af004
   14bb4:	f1053601 	.word	0xf1053601
   14bb8:	3524010c 	.word	0x3524010c
   14bbc:	d16a2800 	.word	0xd16a2800
   14bc0:	46504622 	.word	0x46504622
   14bc4:	fd20f004 	.word	0xfd20f004
   14bc8:	2800b2f2 	.word	0x2800b2f2
   14bcc:	42bad163 	.word	0x42bad163
   14bd0:	9d05d3e6 	.word	0x9d05d3e6
   14bd4:	1d2ba816 	.word	0x1d2ba816
   14bd8:	9308461c 	.word	0x9308461c
   14bdc:	fb62f004 	.word	0xfb62f004
   14be0:	4621a816 	.word	0x4621a816
   14be4:	f0054652 	.word	0xf0054652
   14be8:	4683fab3 	.word	0x4683fab3
   14bec:	f0002800 	.word	0xf0002800
   14bf0:	a81680c3 	.word	0xa81680c3
   14bf4:	fb5ef004 	.word	0xfb5ef004
   14bf8:	f004a819 	.word	0xf004a819
   14bfc:	a81cfb5b 	.word	0xa81cfb5b
   14c00:	fb58f004 	.word	0xfb58f004
   14c04:	f004a81f 	.word	0xf004a81f
   14c08:	9b07fb55 	.word	0x9b07fb55
   14c0c:	e6ac9305 	.word	0xe6ac9305
   14c10:	98022301 	.word	0x98022301
   14c14:	e6999305 	.word	0xe6999305
   14c18:	0b59ea4f 	.word	0x0b59ea4f
   14c1c:	0bcbeb0b 	.word	0x0bcbeb0b
   14c20:	0b8beb07 	.word	0x0b8beb07
   14c24:	010cf10b 	.word	0x010cf10b
   14c28:	000cf104 	.word	0x000cf104
   14c2c:	fbbef004 	.word	0xfbbef004
   14c30:	f47f2800 	.word	0xf47f2800
   14c34:	f10baf4a 	.word	0xf10baf4a
   14c38:	f1040118 	.word	0xf1040118
   14c3c:	f0040018 	.word	0xf0040018
   14c40:	2800fbb5 	.word	0x2800fbb5
   14c44:	af41f47f 	.word	0xaf41f47f
   14c48:	4683b165 	.word	0x4683b165
   14c4c:	46214622 	.word	0x46214622
   14c50:	f7fe4640 	.word	0xf7fe4640
   14c54:	f10bffbb 	.word	0xf10bffbb
   14c58:	28000b01 	.word	0x28000b01
   14c5c:	af35f47f 	.word	0xaf35f47f
   14c60:	d1f345ab 	.word	0xd1f345ab
   14c64:	0949ea4f 	.word	0x0949ea4f
   14c68:	f989fa5f 	.word	0xf989fa5f
   14c6c:	0301f10a 	.word	0x0301f10a
   14c70:	f842aa22 	.word	0xf842aa22
   14c74:	fa5f402a 	.word	0xfa5f402a
   14c78:	fa39fa83 	.word	0xfa39fa83
   14c7c:	464cf306 	.word	0x464cf306
   14c80:	ea4fd10b 	.word	0xea4fd10b
   14c84:	eb010159 	.word	0xeb010159
   14c88:	eb0701c1 	.word	0xeb0701c1
   14c8c:	e7120181 	.word	0xe7120181
   14c90:	b39cf8df 	.word	0xb39cf8df
   14c94:	4683e68d 	.word	0x4683e68d
   14c98:	4652e7ae 	.word	0x4652e7ae
   14c9c:	462c2a01 	.word	0x462c2a01
   14ca0:	46459e09 	.word	0x46459e09
   14ca4:	d9619f0a 	.word	0xd9619f0a
   14ca8:	4640a922 	.word	0x4640a922
   14cac:	fa46f7ff 	.word	0xfa46f7ff
   14cb0:	f1bb4683 	.word	0xf1bb4683
   14cb4:	f47f0f00 	.word	0xf47f0f00
   14cb8:	2301ae58 	.word	0x2301ae58
   14cbc:	46da9a01 	.word	0x46da9a01
   14cc0:	970b3a24 	.word	0x970b3a24
   14cc4:	461f4693 	.word	0x461f4693
   14cc8:	4609e9cd 	.word	0x4609e9cd
   14ccc:	eb03b303 	.word	0xeb03b303
   14cd0:	ea4f03c3 	.word	0xea4f03c3
   14cd4:	9b010883 	.word	0x9b010883
   14cd8:	0424f1a8 	.word	0x0424f1a8
   14cdc:	eb03441c 	.word	0xeb03441c
   14ce0:	e0050908 	.word	0xe0050908
   14ce4:	45a3aa22 	.word	0x45a3aa22
   14ce8:	602af842 	.word	0x602af842
   14cec:	d00f469a 	.word	0xd00f469a
   14cf0:	0604eb08 	.word	0x0604eb08
   14cf4:	4622464b 	.word	0x4622464b
   14cf8:	46284631 	.word	0x46284631
   14cfc:	fbc2f7ff 	.word	0xfbc2f7ff
   14d00:	0301f10a 	.word	0x0301f10a
   14d04:	b2db3c24 	.word	0xb2db3c24
   14d08:	d0eb2800 	.word	0xd0eb2800
   14d0c:	e6dd4683 	.word	0xe6dd4683
   14d10:	9a06007b 	.word	0x9a06007b
   14d14:	fa37b2df 	.word	0xfa37b2df
   14d18:	463bf202 	.word	0x463bf202
   14d1c:	f1bad0d6 	.word	0xf1bad0d6
   14d20:	e9dd0f01 	.word	0xe9dd0f01
   14d24:	9f0b4609 	.word	0x9f0b4609
   14d28:	8167f240 	.word	0x8167f240
   14d2c:	a9224652 	.word	0xa9224652
   14d30:	f7ff4628 	.word	0xf7ff4628
   14d34:	4683fa03 	.word	0x4683fa03
   14d38:	f1bb9b05 	.word	0xf1bb9b05
   14d3c:	f47f0f00 	.word	0xf47f0f00
   14d40:	b123ae15 	.word	0xb123ae15
   14d44:	676b9b01 	.word	0x676b9b01
   14d48:	67ab9b02 	.word	0x67ab9b02
   14d4c:	4619e676 	.word	0x4619e676
   14d50:	f0044638 	.word	0xf0044638
   14d54:	4639fcf1 	.word	0x4639fcf1
   14d58:	a80d4680 	.word	0xa80d4680
   14d5c:	fb26f004 	.word	0xfb26f004
   14d60:	28004683 	.word	0x28004683
   14d64:	ae04f47f 	.word	0xae04f47f
   14d68:	e6729007 	.word	0xe6729007
   14d6c:	46289922 	.word	0x46289922
   14d70:	f97cf7ff 	.word	0xf97cf7ff
   14d74:	e79c4683 	.word	0xe79c4683
   14d78:	46504601 	.word	0x46504601
   14d7c:	ffbcf004 	.word	0xffbcf004
   14d80:	bf181c02 	.word	0xbf181c02
   14d84:	a9162201 	.word	0xa9162201
   14d88:	12d9ea02 	.word	0x12d9ea02
   14d8c:	f0044650 	.word	0xf0044650
   14d90:	4683fc3b 	.word	0x4683fc3b
   14d94:	f004a816 	.word	0xf004a816
   14d98:	f1bbfa8d 	.word	0xf1bbfa8d
   14d9c:	f47f0f00 	.word	0xf47f0f00
   14da0:	9b04af2b 	.word	0x9b04af2b
   14da4:	f1032101 	.word	0xf1032101
   14da8:	46200418 	.word	0x46200418
   14dac:	fc8af004 	.word	0xfc8af004
   14db0:	28004683 	.word	0x28004683
   14db4:	af20f47f 	.word	0xaf20f47f
   14db8:	2b009b6e 	.word	0x2b009b6e
   14dbc:	8082f000 	.word	0x8082f000
   14dc0:	6dab260c 	.word	0x6dab260c
   14dc4:	3307a813 	.word	0x3307a813
   14dc8:	f00408df 	.word	0xf00408df
   14dcc:	a816fa6b 	.word	0xa816fa6b
   14dd0:	fa68f004 	.word	0xfa68f004
   14dd4:	8020f8dd 	.word	0x8020f8dd
   14dd8:	9a6e9b6f 	.word	0x9a6e9b6f
   14ddc:	a8134639 	.word	0xa8134639
   14de0:	f9e2f006 	.word	0xf9e2f006
   14de4:	2101e006 	.word	0x2101e006
   14de8:	f004a813 	.word	0xf004a813
   14dec:	2800fead 	.word	0x2800fead
   14df0:	80c8f040 	.word	0x80c8f040
   14df4:	a8134641 	.word	0xa8134641
   14df8:	ff16f004 	.word	0xff16f004
   14dfc:	daf22800 	.word	0xdaf22800
   14e00:	f0003e01 	.word	0xf0003e01
   14e04:	21018100 	.word	0x21018100
   14e08:	f004a813 	.word	0xf004a813
   14e0c:	2800ff75 	.word	0x2800ff75
   14e10:	aa13dde2 	.word	0xaa13dde2
   14e14:	46204621 	.word	0x46204621
   14e18:	fa5af005 	.word	0xfa5af005
   14e1c:	b1304683 	.word	0xb1304683
   14e20:	f004a813 	.word	0xf004a813
   14e24:	a816fa47 	.word	0xa816fa47
   14e28:	fa44f004 	.word	0xfa44f004
   14e2c:	4620e6e4 	.word	0x4620e6e4
   14e30:	f7fe4629 	.word	0xf7fe4629
   14e34:	4683fe7f 	.word	0x4683fe7f
   14e38:	d1f12800 	.word	0xd1f12800
   14e3c:	4611aa13 	.word	0x4611aa13
   14e40:	f005a816 	.word	0xf005a816
   14e44:	4683fa45 	.word	0x4683fa45
   14e48:	d1e92800 	.word	0xd1e92800
   14e4c:	a8164629 	.word	0xa8164629
   14e50:	fe70f7fe 	.word	0xfe70f7fe
   14e54:	28004683 	.word	0x28004683
   14e58:	9804d1e2 	.word	0x9804d1e2
   14e5c:	4601aa16 	.word	0x4601aa16
   14e60:	fa36f005 	.word	0xfa36f005
   14e64:	28004683 	.word	0x28004683
   14e68:	4629d1da 	.word	0x4629d1da
   14e6c:	f7fe9804 	.word	0xf7fe9804
   14e70:	4683fe61 	.word	0x4683fe61
   14e74:	d1d32800 	.word	0xd1d32800
   14e78:	aa13a916 	.word	0xaa13a916
   14e7c:	f0054608 	.word	0xf0054608
   14e80:	4683fa27 	.word	0x4683fa27
   14e84:	d1cb2800 	.word	0xd1cb2800
   14e88:	a8164629 	.word	0xa8164629
   14e8c:	fe52f7fe 	.word	0xfe52f7fe
   14e90:	28004683 	.word	0x28004683
   14e94:	aa16d1c4 	.word	0xaa16d1c4
   14e98:	46504651 	.word	0x46504651
   14e9c:	fa18f005 	.word	0xfa18f005
   14ea0:	28004683 	.word	0x28004683
   14ea4:	4629d1bc 	.word	0x4629d1bc
   14ea8:	f7fe4650 	.word	0xf7fe4650
   14eac:	4683fe43 	.word	0x4683fe43
   14eb0:	f004a813 	.word	0xf004a813
   14eb4:	a816f9ff 	.word	0xa816f9ff
   14eb8:	f9fcf004 	.word	0xf9fcf004
   14ebc:	0f00f1bb 	.word	0x0f00f1bb
   14ec0:	ae9af47f 	.word	0xae9af47f
   14ec4:	f8dd46ab 	.word	0xf8dd46ab
   14ec8:	f8dd8018 	.word	0xf8dd8018
   14ecc:	f8cd900c 	.word	0xf8cd900c
   14ed0:	f8dda018 	.word	0xf8dda018
   14ed4:	ab22a010 	.word	0xab22a010
   14ed8:	d0554543 	.word	0xd0554543
   14edc:	46514652 	.word	0x46514652
   14ee0:	f7fe4658 	.word	0xf7fe4658
   14ee4:	4602fe73 	.word	0x4602fe73
   14ee8:	d1492800 	.word	0xd1492800
   14eec:	46044606 	.word	0x46044606
   14ef0:	3d01f818 	.word	0x3d01f818
   14ef4:	93059d01 	.word	0x93059d01
   14ef8:	0745f3c3 	.word	0x0745f3c3
   14efc:	fab41be4 	.word	0xfab41be4
   14f00:	0964f484 	.word	0x0964f484
   14f04:	46224629 	.word	0x46224629
   14f08:	f004a819 	.word	0xf004a819
   14f0c:	3601fb7d 	.word	0x3601fb7d
   14f10:	010cf105 	.word	0x010cf105
   14f14:	28003524 	.word	0x28003524
   14f18:	aebdf47f 	.word	0xaebdf47f
   14f1c:	a81c4622 	.word	0xa81c4622
   14f20:	fb72f004 	.word	0xfb72f004
   14f24:	2800b2f4 	.word	0x2800b2f4
   14f28:	aeb5f47f 	.word	0xaeb5f47f
   14f2c:	d8e545a1 	.word	0xd8e545a1
   14f30:	f004a816 	.word	0xf004a816
   14f34:	aa1cf9b7 	.word	0xaa1cf9b7
   14f38:	a8169908 	.word	0xa8169908
   14f3c:	f908f005 	.word	0xf908f005
   14f40:	4683b108 	.word	0x4683b108
   14f44:	4601e655 	.word	0x4601e655
   14f48:	f004a81c 	.word	0xf004a81c
   14f4c:	1c02fed5 	.word	0x1c02fed5
   14f50:	2201bf18 	.word	0x2201bf18
   14f54:	a9169b05 	.word	0xa9169b05
   14f58:	12d3ea02 	.word	0x12d3ea02
   14f5c:	f004a81c 	.word	0xf004a81c
   14f60:	9005fb53 	.word	0x9005fb53
   14f64:	f004a816 	.word	0xf004a816
   14f68:	9a05f9a5 	.word	0x9a05f9a5
   14f6c:	4652b942 	.word	0x4652b942
   14f70:	4651ab19 	.word	0x4651ab19
   14f74:	f7ff4658 	.word	0xf7ff4658
   14f78:	4602fa85 	.word	0x4602fa85
   14f7c:	d0aa2800 	.word	0xd0aa2800
   14f80:	e6394693 	.word	0xe6394693
   14f84:	e74b4683 	.word	0xe74b4683
   14f88:	f8dda819 	.word	0xf8dda819
   14f8c:	f004a018 	.word	0xf004a018
   14f90:	a81cf991 	.word	0xa81cf991
   14f94:	f98ef004 	.word	0xf98ef004
   14f98:	f004a81f 	.word	0xf004a81f
   14f9c:	a819f98b 	.word	0xa819f98b
   14fa0:	f980f004 	.word	0xf980f004
   14fa4:	99084652 	.word	0x99084652
   14fa8:	f005a819 	.word	0xf005a819
   14fac:	465df8d1 	.word	0x465df8d1
   14fb0:	b1184683 	.word	0xb1184683
   14fb4:	f004a819 	.word	0xf004a819
   14fb8:	e552f97d 	.word	0xe552f97d
   14fbc:	46504659 	.word	0x46504659
   14fc0:	fe9af004 	.word	0xfe9af004
   14fc4:	a9199b02 	.word	0xa9199b02
   14fc8:	bf082800 	.word	0xbf082800
   14fcc:	46502300 	.word	0x46502300
   14fd0:	f004461a 	.word	0xf004461a
   14fd4:	4683fb19 	.word	0x4683fb19
   14fd8:	f004a819 	.word	0xf004a819
   14fdc:	f1bbf96b 	.word	0xf1bbf96b
   14fe0:	f47f0f00 	.word	0xf47f0f00
   14fe4:	4628ad3e 	.word	0x4628ad3e
   14fe8:	f7ff9904 	.word	0xf7ff9904
   14fec:	9b07f83f 	.word	0x9b07f83f
   14ff0:	2b004683 	.word	0x2b004683
   14ff4:	acd4f47f 	.word	0xacd4f47f
   14ff8:	9922e4ba 	.word	0x9922e4ba
   14ffc:	f7ff4628 	.word	0xf7ff4628
   15000:	4683f835 	.word	0x4683f835
   15004:	f8dfe698 	.word	0xf8dfe698
   15008:	e5f5b02c 	.word	0xe5f5b02c
   1500c:	f10a2201 	.word	0xf10a2201
   15010:	eb0a31ff 	.word	0xeb0a31ff
   15014:	fa020403 	.word	0xfa020403
   15018:	3c01f301 	.word	0x3c01f301
   1501c:	b2db9302 	.word	0xb2db9302
   15020:	fbb49106 	.word	0xfbb49106
   15024:	4656f4fa 	.word	0x4656f4fa
   15028:	e5029303 	.word	0xe5029303
   1502c:	ffffb280 	.word	0xffffb280
   15030:	ffffb080 	.word	0xffffb080
   15034:	ffffb300 	.word	0xffffb300

00015038 <symbol_000637b>:
   15038:	43f8e92d 	.word	0x43f8e92d
   1503c:	e9dd2a01 	.word	0xe9dd2a01
   15040:	d8437808 	.word	0xd8437808
   15044:	4681460d 	.word	0x4681460d
   15048:	f1052100 	.word	0xf1052100
   1504c:	461e0018 	.word	0x461e0018
   15050:	f0044614 	.word	0xf0044614
   15054:	b938fe51 	.word	0xb938fe51
   15058:	0f00f1b8 	.word	0x0f00f1b8
   1505c:	2301d038 	.word	0x2301d038
   15060:	60337038 	.word	0x60337038
   15064:	83f8e8bd 	.word	0x83f8e8bd
   15068:	0004f109 	.word	0x0004f109
   1506c:	fba2f004 	.word	0xfba2f004
   15070:	b9c44681 	.word	0xb9c44681
   15074:	33010043 	.word	0x33010043
   15078:	60334598 	.word	0x60334598
   1507c:	2304d328 	.word	0x2304d328
   15080:	46024639 	.word	0x46024639
   15084:	3b01f801 	.word	0x3b01f801
   15088:	f0044628 	.word	0xf0044628
   1508c:	2800fc55 	.word	0x2800fc55
   15090:	f109d1e8 	.word	0xf109d1e8
   15094:	f1050101 	.word	0xf1050101
   15098:	4439000c 	.word	0x4439000c
   1509c:	e8bd464a 	.word	0xe8bd464a
   150a0:	f00443f8 	.word	0xf00443f8
   150a4:	1c43bc49 	.word	0x1c43bc49
   150a8:	60334598 	.word	0x60334598
   150ac:	2100d310 	.word	0x2100d310
   150b0:	000cf105 	.word	0x000cf105
   150b4:	fb40f004 	.word	0xfb40f004
   150b8:	30024639 	.word	0x30024639
   150bc:	0b01f801 	.word	0x0b01f801
   150c0:	4628464a 	.word	0x4628464a
   150c4:	43f8e8bd 	.word	0x43f8e8bd
   150c8:	bc36f004 	.word	0xbc36f004
   150cc:	e7c94801 	.word	0xe7c94801
   150d0:	e7c74801 	.word	0xe7c74801
   150d4:	ffffb080 	.word	0xffffb080
   150d8:	ffffb100 	.word	0xffffb100

000150dc <symbol_0007a22>:
   150dc:	d0412b00 	.word	0xd0412b00
   150e0:	461eb5f8 	.word	0x461eb5f8
   150e4:	46147813 	.word	0x46147813
   150e8:	b9ab460d 	.word	0xb9ab460d
   150ec:	d1352e01 	.word	0xd1352e01
   150f0:	46284631 	.word	0x46284631
   150f4:	fae6f004 	.word	0xfae6f004
   150f8:	bdf8b100 	.word	0xbdf8b100
   150fc:	f1054631 	.word	0xf1054631
   15100:	f004000c 	.word	0xf004000c
   15104:	2800fadf 	.word	0x2800fadf
   15108:	4601d1f7 	.word	0x4601d1f7
   1510c:	0018f105 	.word	0x0018f105
   15110:	40f8e8bd 	.word	0x40f8e8bd
   15114:	bad6f004 	.word	0xbad6f004
   15118:	f0043004 	.word	0xf0043004
   1511c:	7823fb4b 	.word	0x7823fb4b
   15120:	2b044607 	.word	0x2b044607
   15124:	0043d11c 	.word	0x0043d11c
   15128:	429e3301 	.word	0x429e3301
   1512c:	4602d116 	.word	0x4602d116
   15130:	46281c61 	.word	0x46281c61
   15134:	fb6ef004 	.word	0xfb6ef004
   15138:	d1de2800 	.word	0xd1de2800
   1513c:	44211c79 	.word	0x44211c79
   15140:	f105463a 	.word	0xf105463a
   15144:	f004000c 	.word	0xf004000c
   15148:	2800fb65 	.word	0x2800fb65
   1514c:	f105d1d5 	.word	0xf105d1d5
   15150:	21010018 	.word	0x21010018
   15154:	40f8e8bd 	.word	0x40f8e8bd
   15158:	bab4f004 	.word	0xbab4f004
   1515c:	bdf84802 	.word	0xbdf84802
   15160:	bdf84802 	.word	0xbdf84802
   15164:	47704800 	.word	0x47704800
   15168:	ffffb080 	.word	0xffffb080
   1516c:	ffffb180 	.word	0xffffb180

00015170 <symbol_000e8bc>:
   15170:	41f0e92d 	.word	0x41f0e92d
   15174:	b086460c 	.word	0xb086460c
   15178:	21014605 	.word	0x21014605
   1517c:	0018f104 	.word	0x0018f104
   15180:	fdbaf004 	.word	0xfdbaf004
   15184:	f0402800 	.word	0xf0402800
   15188:	6b2b809f 	.word	0x6b2b809f
   1518c:	f0002b00 	.word	0xf0002b00
   15190:	6beb80a0 	.word	0x6beb80a0
   15194:	f0002b00 	.word	0xf0002b00
   15198:	4601809c 	.word	0x4601809c
   1519c:	46204606 	.word	0x46204606
   151a0:	fdaaf004 	.word	0xfdaaf004
   151a4:	f2c02800 	.word	0xf2c02800
   151a8:	f104808f 	.word	0xf104808f
   151ac:	4631070c 	.word	0x4631070c
   151b0:	f0044638 	.word	0xf0044638
   151b4:	2800fda1 	.word	0x2800fda1
   151b8:	8086f2c0 	.word	0x8086f2c0
   151bc:	0804f105 	.word	0x0804f105
   151c0:	46204641 	.word	0x46204641
   151c4:	fd30f004 	.word	0xfd30f004
   151c8:	da7d2800 	.word	0xda7d2800
   151cc:	46384641 	.word	0x46384641
   151d0:	fd2af004 	.word	0xfd2af004
   151d4:	da772800 	.word	0xda772800
   151d8:	f0044668 	.word	0xf0044668
   151dc:	a803f863 	.word	0xa803f863
   151e0:	f860f004 	.word	0xf860f004
   151e4:	4639463a 	.word	0x4639463a
   151e8:	f0054668 	.word	0xf0054668
   151ec:	4606f871 	.word	0x4606f871
   151f0:	4668b148 	.word	0x4668b148
   151f4:	f85ef004 	.word	0xf85ef004
   151f8:	f004a803 	.word	0xf004a803
   151fc:	4630f85b 	.word	0x4630f85b
   15200:	e8bdb006 	.word	0xe8bdb006
   15204:	462981f0 	.word	0x462981f0
   15208:	f7fe4668 	.word	0xf7fe4668
   1520c:	4606fc93 	.word	0x4606fc93
   15210:	d1ee2800 	.word	0xd1ee2800
   15214:	46214622 	.word	0x46214622
   15218:	f005a803 	.word	0xf005a803
   1521c:	4606f859 	.word	0x4606f859
   15220:	d1e62800 	.word	0xd1e62800
   15224:	a8034629 	.word	0xa8034629
   15228:	fc84f7fe 	.word	0xfc84f7fe
   1522c:	28004606 	.word	0x28004606
   15230:	69abd1df 	.word	0x69abd1df
   15234:	d04e2b00 	.word	0xd04e2b00
   15238:	f105a903 	.word	0xf105a903
   1523c:	46080210 	.word	0x46080210
   15240:	ff12f004 	.word	0xff12f004
   15244:	28004606 	.word	0x28004606
   15248:	e007d1d3 	.word	0xe007d1d3
   1524c:	4642a903 	.word	0x4642a903
   15250:	f0044608 	.word	0xf0044608
   15254:	4606fe49 	.word	0x4606fe49
   15258:	d1ca2800 	.word	0xd1ca2800
   1525c:	a8034641 	.word	0xa8034641
   15260:	fce2f004 	.word	0xfce2f004
   15264:	daf12800 	.word	0xdaf12800
   15268:	4622a903 	.word	0x4622a903
   1526c:	f0054608 	.word	0xf0054608
   15270:	4606f82f 	.word	0x4606f82f
   15274:	d1bc2800 	.word	0xd1bc2800
   15278:	a8034629 	.word	0xa8034629
   1527c:	fc5af7fe 	.word	0xfc5af7fe
   15280:	28004606 	.word	0x28004606
   15284:	a903d1b5 	.word	0xa903d1b5
   15288:	021cf105 	.word	0x021cf105
   1528c:	f0044608 	.word	0xf0044608
   15290:	4606feeb 	.word	0x4606feeb
   15294:	d1ac2800 	.word	0xd1ac2800
   15298:	a903e007 	.word	0xa903e007
   1529c:	46084642 	.word	0x46084642
   152a0:	fe22f004 	.word	0xfe22f004
   152a4:	28004606 	.word	0x28004606
   152a8:	4641d1a3 	.word	0x4641d1a3
   152ac:	f004a803 	.word	0xf004a803
   152b0:	2800fcbb 	.word	0x2800fcbb
   152b4:	a903daf1 	.word	0xa903daf1
   152b8:	f0044668 	.word	0xf0044668
   152bc:	4e14fcb5 	.word	0x4e14fcb5
   152c0:	bf082800 	.word	0xbf082800
   152c4:	e7942600 	.word	0xe7942600
   152c8:	46304e11 	.word	0x46304e11
   152cc:	e8bdb006 	.word	0xe8bdb006
   152d0:	4e1081f0 	.word	0x4e1081f0
   152d4:	a903e793 	.word	0xa903e793
   152d8:	46082203 	.word	0x46082203
   152dc:	ffacf004 	.word	0xffacf004
   152e0:	28004606 	.word	0x28004606
   152e4:	e00ed185 	.word	0xe00ed185
   152e8:	a8032100 	.word	0xa8032100
   152ec:	fd04f004 	.word	0xfd04f004
   152f0:	d0b92800 	.word	0xd0b92800
   152f4:	4642a903 	.word	0x4642a903
   152f8:	f0044608 	.word	0xf0044608
   152fc:	4606feb5 	.word	0x4606feb5
   15300:	f47f2800 	.word	0xf47f2800
   15304:	9b03af76 	.word	0x9b03af76
   15308:	dbed2b00 	.word	0xdbed2b00
   1530c:	bf00e7ac 	.word	0xbf00e7ac
   15310:	ffffb380 	.word	0xffffb380
   15314:	ffffb080 	.word	0xffffb080

00015318 <symbol_0001f66>:
   15318:	43f0e92d 	.word	0x43f0e92d
   1531c:	b0ab7803 	.word	0xb0ab7803
   15320:	f0002b00 	.word	0xf0002b00
   15324:	780a80c4 	.word	0x780a80c4
   15328:	f040429a 	.word	0xf040429a
   1532c:	f10180c0 	.word	0xf10180c0
   15330:	460c0788 	.word	0x460c0788
   15334:	46394605 	.word	0x46394605
   15338:	f0043088 	.word	0xf0043088
   1533c:	2800fc75 	.word	0x2800fc75
   15340:	80b5f040 	.word	0x80b5f040
   15344:	0994f104 	.word	0x0994f104
   15348:	f1054649 	.word	0xf1054649
   1534c:	f0040094 	.word	0xf0040094
   15350:	2800fc6b 	.word	0x2800fc6b
   15354:	80abf040 	.word	0x80abf040
   15358:	08a0f104 	.word	0x08a0f104
   1535c:	00a0f105 	.word	0x00a0f105
   15360:	f0044641 	.word	0xf0044641
   15364:	4606fc61 	.word	0x4606fc61
   15368:	f0402800 	.word	0xf0402800
   1536c:	462580a0 	.word	0x462580a0
   15370:	f003a802 	.word	0xf003a802
   15374:	a805ff97 	.word	0xa805ff97
   15378:	ff94f003 	.word	0xff94f003
   1537c:	f003a808 	.word	0xf003a808
   15380:	4631ff91 	.word	0x4631ff91
   15384:	a80b227c 	.word	0xa80b227c
   15388:	fe9cf00d 	.word	0xfe9cf00d
   1538c:	1b7cf815 	.word	0x1b7cf815
   15390:	f7fda80b 	.word	0xf7fda80b
   15394:	f104fbd5 	.word	0xf104fbd5
   15398:	21010040 	.word	0x21010040
   1539c:	f0043428 	.word	0xf0043428
   153a0:	2800fcab 	.word	0x2800fcab
   153a4:	8081f040 	.word	0x8081f040
   153a8:	2b009b17 	.word	0x2b009b17
   153ac:	9b1ad07d 	.word	0x9b1ad07d
   153b0:	d07a2b00 	.word	0xd07a2b00
   153b4:	46282101 	.word	0x46282101
   153b8:	fc9ef004 	.word	0xfc9ef004
   153bc:	f2c02800 	.word	0xf2c02800
   153c0:	a91e8083 	.word	0xa91e8083
   153c4:	f0044628 	.word	0xf0044628
   153c8:	2800fc2f 	.word	0x2800fc2f
   153cc:	4621da7c 	.word	0x4621da7c
   153d0:	f7ffa80b 	.word	0xf7ffa80b
   153d4:	4606fecd 	.word	0x4606fecd
   153d8:	9b17b980 	.word	0x9b17b980
   153dc:	d0642b00 	.word	0xd0642b00
   153e0:	2b009b1a 	.word	0x2b009b1a
   153e4:	e9cdd061 	.word	0xe9cdd061
   153e8:	46230000 	.word	0x46230000
   153ec:	a902462a 	.word	0xa902462a
   153f0:	f7ffa80b 	.word	0xf7ffa80b
   153f4:	4606fa6b 	.word	0x4606fa6b
   153f8:	d04c2800 	.word	0xd04c2800
   153fc:	f003a802 	.word	0xf003a802
   15400:	a805ff59 	.word	0xa805ff59
   15404:	ff56f003 	.word	0xff56f003
   15408:	f003a808 	.word	0xf003a808
   1540c:	9b23ff53 	.word	0x9b23ff53
   15410:	d1262b01 	.word	0xd1262b01
   15414:	b1c89828 	.word	0xb1c89828
   15418:	b1aa9a29 	.word	0xb1aa9a29
   1541c:	eb052500 	.word	0xeb052500
   15420:	eb1003c5 	.word	0xeb1003c5
   15424:	d0320483 	.word	0xd0320483
   15428:	f0034620 	.word	0xf0034620
   1542c:	f104ff43 	.word	0xf104ff43
   15430:	f003000c 	.word	0xf003000c
   15434:	f104ff3f 	.word	0xf104ff3f
   15438:	f0030018 	.word	0xf0030018
   1543c:	9a29ff3b 	.word	0x9a29ff3b
   15440:	42953501 	.word	0x42953501
   15444:	d3ea9828 	.word	0xd3ea9828
   15448:	fb94f007 	.word	0xfb94f007
   1544c:	ab0b2200 	.word	0xab0b2200
   15450:	a92a701a 	.word	0xa92a701a
   15454:	428b3301 	.word	0x428b3301
   15458:	4630d1fa 	.word	0x4630d1fa
   1545c:	e8bdb02b 	.word	0xe8bdb02b
   15460:	a80c83f0 	.word	0xa80c83f0
   15464:	ff26f003 	.word	0xff26f003
   15468:	f003a80f 	.word	0xf003a80f
   1546c:	a812ff23 	.word	0xa812ff23
   15470:	ff20f003 	.word	0xff20f003
   15474:	f003a815 	.word	0xf003a815
   15478:	a818ff1d 	.word	0xa818ff1d
   1547c:	ff1af003 	.word	0xff1af003
   15480:	f003a81b 	.word	0xf003a81b
   15484:	a81eff17 	.word	0xa81eff17
   15488:	ff14f003 	.word	0xff14f003
   1548c:	3501e7c2 	.word	0x3501e7c2
   15490:	d3c44295 	.word	0xd3c44295
   15494:	4639e7d8 	.word	0x4639e7d8
   15498:	f004a802 	.word	0xf004a802
   1549c:	b920fbc5 	.word	0xb920fbc5
   154a0:	a8054649 	.word	0xa8054649
   154a4:	fbc0f004 	.word	0xfbc0f004
   154a8:	4e08b130 	.word	0x4e08b130
   154ac:	4e07e7a6 	.word	0x4e07e7a6
   154b0:	b02b4630 	.word	0xb02b4630
   154b4:	83f0e8bd 	.word	0x83f0e8bd
   154b8:	a8084641 	.word	0xa8084641
   154bc:	fbb4f004 	.word	0xfbb4f004
   154c0:	28004606 	.word	0x28004606
   154c4:	e7f0d09a 	.word	0xe7f0d09a
   154c8:	e7974e01 	.word	0xe7974e01
   154cc:	ffffb080 	.word	0xffffb080
   154d0:	ffffb380 	.word	0xffffb380

000154d4 <interface_init>:
   154d4:	f44fb508 	.word	0xf44fb508
   154d8:	21007290 	.word	0x21007290
   154dc:	f00d4802 	.word	0xf00d4802
   154e0:	2000fdf1 	.word	0x2000fdf1
   154e4:	bf00bd08 	.word	0xbf00bd08
   154e8:	20026c28 	.word	0x20026c28

000154ec <interface_socket_allocate>:
   154ec:	4b29b5f8 	.word	0x4b29b5f8
   154f0:	681d4606 	.word	0x681d4606
   154f4:	b1e54608 	.word	0xb1e54608
   154f8:	2c006a5c 	.word	0x2c006a5c
   154fc:	6c9cd03d 	.word	0x6c9cd03d
   15500:	d03c2c00 	.word	0xd03c2c00
   15504:	2c006edc 	.word	0x2c006edc
   15508:	f8d3d03b 	.word	0xf8d3d03b
   1550c:	b1791090 	.word	0xb1791090
   15510:	10b4f8d3 	.word	0x10b4f8d3
   15514:	f8d3b3b9 	.word	0xf8d3b3b9
   15518:	b3b110d8 	.word	0xb3b110d8
   1551c:	10fcf8d3 	.word	0x10fcf8d3
   15520:	f04fb3a9 	.word	0xf04fb3a9
   15524:	200c35ff 	.word	0x200c35ff
   15528:	fa24f7fa 	.word	0xfa24f7fa
   1552c:	bdf84628 	.word	0xbdf84628
   15530:	f04f2504 	.word	0xf04f2504
   15534:	f04f0c01 	.word	0xf04f0c01
   15538:	eb0537ff 	.word	0xeb0537ff
   1553c:	00a404c5 	.word	0x00a404c5
   15540:	c004f843 	.word	0xc004f843
   15544:	4611441c 	.word	0x4611441c
   15548:	462261a7 	.word	0x462261a7
   1554c:	facaf7fd 	.word	0xfacaf7fd
   15550:	61e04603 	.word	0x61e04603
   15554:	681bb158 	.word	0x681bb158
   15558:	4798681b 	.word	0x4798681b
   1555c:	6034b910 	.word	0x6034b910
   15560:	bdf84628 	.word	0xbdf84628
   15564:	f7fd69e0 	.word	0xf7fd69e0
   15568:	2300fadd 	.word	0x2300fadd
   1556c:	462061e3 	.word	0x462061e3
   15570:	21002224 	.word	0x21002224
   15574:	fda6f00d 	.word	0xfda6f00d
   15578:	2501e7d3 	.word	0x2501e7d3
   1557c:	2502e7d9 	.word	0x2502e7d9
   15580:	2503e7d7 	.word	0x2503e7d7
   15584:	2505e7d5 	.word	0x2505e7d5
   15588:	2506e7d3 	.word	0x2506e7d3
   1558c:	2507e7d1 	.word	0x2507e7d1
   15590:	bf00e7cf 	.word	0xbf00e7cf
   15594:	20026c28 	.word	0x20026c28

00015598 <interface_socket_free>:
   15598:	d9002807 	.word	0xd9002807
   1559c:	b5104770 	.word	0xb5104770
   155a0:	eb004c07 	.word	0xeb004c07
   155a4:	eb0400c0 	.word	0xeb0400c0
   155a8:	69e00480 	.word	0x69e00480
   155ac:	f7fdb108 	.word	0xf7fdb108
   155b0:	4620fab9 	.word	0x4620fab9
   155b4:	4010e8bd 	.word	0x4010e8bd
   155b8:	21002224 	.word	0x21002224
   155bc:	bd82f00d 	.word	0xbd82f00d
   155c0:	20026c28 	.word	0x20026c28

000155c4 <interface_socket_packet_handler_update>:
   155c4:	e92d2807 	.word	0xe92d2807
   155c8:	d81e43f8 	.word	0xd81e43f8
   155cc:	08c0ea4f 	.word	0x08c0ea4f
   155d0:	eb084e17 	.word	0xeb084e17
   155d4:	009b0300 	.word	0x009b0300
   155d8:	18f558f4 	.word	0x18f558f4
   155dc:	460bb1ac 	.word	0x460bb1ac
   155e0:	46114604 	.word	0x46114604
   155e4:	462a4618 	.word	0x462a4618
   155e8:	901cf8d5 	.word	0x901cf8d5
   155ec:	fa7af7fd 	.word	0xfa7af7fd
   155f0:	b1d061e8 	.word	0xb1d061e8
   155f4:	681b6803 	.word	0x681b6803
   155f8:	46074798 	.word	0x46074798
   155fc:	4648b948 	.word	0x4648b948
   15600:	fa90f7fd 	.word	0xfa90f7fd
   15604:	e8bd4638 	.word	0xe8bd4638
   15608:	270583f8 	.word	0x270583f8
   1560c:	e8bd4638 	.word	0xe8bd4638
   15610:	69e883f8 	.word	0x69e883f8
   15614:	fa86f7fd 	.word	0xfa86f7fd
   15618:	0004eb08 	.word	0x0004eb08
   1561c:	0680eb06 	.word	0x0680eb06
   15620:	901cf8c6 	.word	0x901cf8c6
   15624:	e8bd4638 	.word	0xe8bd4638
   15628:	270483f8 	.word	0x270483f8
   1562c:	bf00e7f4 	.word	0xbf00e7f4
   15630:	20026c28 	.word	0x20026c28

00015634 <interface_socket_wait>:
   15634:	eb00b5f0 	.word	0xeb00b5f0
   15638:	4c0e00c0 	.word	0x4c0e00c0
   1563c:	58250080 	.word	0x58250080
   15640:	4015b083 	.word	0x4015b083
   15644:	9301428d 	.word	0x9301428d
   15648:	d0104404 	.word	0xd0104404
   1564c:	b9736863 	.word	0xb9736863
   15650:	4616460f 	.word	0x4616460f
   15654:	e0064625 	.word	0xe0064625
   15658:	b943686b 	.word	0xb943686b
   1565c:	4620a901 	.word	0x4620a901
   15660:	f8f4f7fa 	.word	0xf8f4f7fa
   15664:	682bb920 	.word	0x682bb920
   15668:	42bb4033 	.word	0x42bb4033
   1566c:	2000d1f4 	.word	0x2000d1f4
   15670:	bdf0b003 	.word	0xbdf0b003
   15674:	20026c28 	.word	0x20026c28

00015678 <interface_from_internal_id_search>:
   15678:	681a4b23 	.word	0x681a4b23
   1567c:	699ab112 	.word	0x699ab112
   15680:	d0324282 	.word	0xd0324282
   15684:	b1126a5a 	.word	0xb1126a5a
   15688:	42826bda 	.word	0x42826bda
   1568c:	6c9ad02f 	.word	0x6c9ad02f
   15690:	6e1ab112 	.word	0x6e1ab112
   15694:	d02c4282 	.word	0xd02c4282
   15698:	b11a6eda 	.word	0xb11a6eda
   1569c:	2084f8d3 	.word	0x2084f8d3
   156a0:	d0284282 	.word	0xd0284282
   156a4:	2090f8d3 	.word	0x2090f8d3
   156a8:	f8d3b11a 	.word	0xf8d3b11a
   156ac:	428220a8 	.word	0x428220a8
   156b0:	f8d3d023 	.word	0xf8d3d023
   156b4:	b11a20b4 	.word	0xb11a20b4
   156b8:	20ccf8d3 	.word	0x20ccf8d3
   156bc:	d01e4282 	.word	0xd01e4282
   156c0:	20d8f8d3 	.word	0x20d8f8d3
   156c4:	f8d3b11a 	.word	0xf8d3b11a
   156c8:	428220f0 	.word	0x428220f0
   156cc:	f8d3d019 	.word	0xf8d3d019
   156d0:	b13a20fc 	.word	0xb13a20fc
   156d4:	3114f8d3 	.word	0x3114f8d3
   156d8:	bf144283 	.word	0xbf144283
   156dc:	30fff04f 	.word	0x30fff04f
   156e0:	47702007 	.word	0x47702007
   156e4:	30fff04f 	.word	0x30fff04f
   156e8:	20004770 	.word	0x20004770
   156ec:	20014770 	.word	0x20014770
   156f0:	20024770 	.word	0x20024770
   156f4:	20034770 	.word	0x20034770
   156f8:	20044770 	.word	0x20044770
   156fc:	20054770 	.word	0x20054770
   15700:	20064770 	.word	0x20064770
   15704:	bf004770 	.word	0xbf004770
   15708:	20026c28 	.word	0x20026c28

0001570c <interface_socket_from_handle_get>:
   1570c:	d8072807 	.word	0xd8072807
   15710:	00c0eb00 	.word	0x00c0eb00
   15714:	00804b03 	.word	0x00804b03
   15718:	b10a581a 	.word	0xb10a581a
   1571c:	47704418 	.word	0x47704418
   15720:	47702000 	.word	0x47702000
   15724:	20026c28 	.word	0x20026c28

00015728 <interface_socket_event_get>:
   15728:	2807b119 	.word	0x2807b119
   1572c:	2310d902 	.word	0x2310d902
   15730:	4770600b 	.word	0x4770600b
   15734:	00c0eb00 	.word	0x00c0eb00
   15738:	00804b07 	.word	0x00804b07
   1573c:	2a00581a 	.word	0x2a00581a
   15740:	581bd0f5 	.word	0x581bd0f5
   15744:	f0030c1b 	.word	0xf0030c1b
   15748:	2a0a020a 	.word	0x2a0a020a
   1574c:	f003bf14 	.word	0xf003bf14
   15750:	f003030f 	.word	0xf003030f
   15754:	e7eb030d 	.word	0xe7eb030d
   15758:	20026c28 	.word	0x20026c28

0001575c <interface_socket_setopt>:
   1575c:	b5702807 	.word	0xb5702807
   15760:	eb00d827 	.word	0xeb00d827
   15764:	4c1600c0 	.word	0x4c1600c0
   15768:	58250080 	.word	0x58250080
   1576c:	2901b30d 	.word	0x2901b30d
   15770:	2a14d119 	.word	0x2a14d119
   15774:	b183d117 	.word	0xb183d117
   15778:	2a089a04 	.word	0x2a089a04
   1577c:	f44fd10d 	.word	0xf44fd10d
   15780:	685a757a 	.word	0x685a757a
   15784:	68194e0f 	.word	0x68194e0f
   15788:	2302fba6 	.word	0x2302fba6
   1578c:	fb05099b 	.word	0xfb05099b
   15790:	44203301 	.word	0x44203301
   15794:	20006203 	.word	0x20006203
   15798:	2016bd70 	.word	0x2016bd70
   1579c:	f8eaf7fa 	.word	0xf8eaf7fa
   157a0:	30fff04f 	.word	0x30fff04f
   157a4:	202abd70 	.word	0x202abd70
   157a8:	f8e4f7fa 	.word	0xf8e4f7fa
   157ac:	30fff04f 	.word	0x30fff04f
   157b0:	2009bd70 	.word	0x2009bd70
   157b4:	f8def7fa 	.word	0xf8def7fa
   157b8:	30fff04f 	.word	0x30fff04f
   157bc:	bf00bd70 	.word	0xbf00bd70
   157c0:	20026c28 	.word	0x20026c28
   157c4:	10624dd3 	.word	0x10624dd3

000157c8 <interface_socket_getopt>:
   157c8:	2807b570 	.word	0x2807b570
   157cc:	d8219d04 	.word	0xd8219d04
   157d0:	eb004c13 	.word	0xeb004c13
   157d4:	008000c0 	.word	0x008000c0
   157d8:	44045826 	.word	0x44045826
   157dc:	2901b1d6 	.word	0x2901b1d6
   157e0:	2a04d112 	.word	0x2a04d112
   157e4:	b14bd110 	.word	0xb14bd110
   157e8:	682ab145 	.word	0x682ab145
   157ec:	d1052a04 	.word	0xd1052a04
   157f0:	68612200 	.word	0x68612200
   157f4:	60194610 	.word	0x60194610
   157f8:	bd706062 	.word	0xbd706062
   157fc:	f7fa2016 	.word	0xf7fa2016
   15800:	f04ff8b9 	.word	0xf04ff8b9
   15804:	bd7030ff 	.word	0xbd7030ff
   15808:	f7fa202a 	.word	0xf7fa202a
   1580c:	f04ff8b3 	.word	0xf04ff8b3
   15810:	bd7030ff 	.word	0xbd7030ff
   15814:	f7fa2009 	.word	0xf7fa2009
   15818:	f04ff8ad 	.word	0xf04ff8ad
   1581c:	bd7030ff 	.word	0xbd7030ff
   15820:	20026c28 	.word	0x20026c28

00015824 <interface_socket_fcntl>:
   15824:	b5102807 	.word	0xb5102807
   15828:	eb00d818 	.word	0xeb00d818
   1582c:	4c1100c0 	.word	0x4c1100c0
   15830:	58e00083 	.word	0x58e00083
   15834:	2901b190 	.word	0x2901b190
   15838:	2902d005 	.word	0x2902d005
   1583c:	58e0d114 	.word	0x58e0d114
   15840:	7000f3c0 	.word	0x7000f3c0
   15844:	f012bd10 	.word	0xf012bd10
   15848:	58e20001 	.word	0x58e20001
   1584c:	2000bf1a 	.word	0x2000bf1a
   15850:	5280f042 	.word	0x5280f042
   15854:	5280f022 	.word	0x5280f022
   15858:	bd1050e2 	.word	0xbd1050e2
   1585c:	f7fa2009 	.word	0xf7fa2009
   15860:	f04ff889 	.word	0xf04ff889
   15864:	bd1030ff 	.word	0xbd1030ff
   15868:	f7fa2016 	.word	0xf7fa2016
   1586c:	f04ff883 	.word	0xf04ff883
   15870:	bd1030ff 	.word	0xbd1030ff
   15874:	20026c28 	.word	0x20026c28

00015878 <symbol_00026c2>:
   15878:	4ff0e92d 	.word	0x4ff0e92d
   1587c:	2100460e 	.word	0x2100460e
   15880:	b0854605 	.word	0xb0854605
   15884:	93004608 	.word	0x93004608
   15888:	461c4617 	.word	0x461c4617
   1588c:	aa034613 	.word	0xaa034613
   15890:	9038f8dd 	.word	0x9038f8dd
   15894:	f994f7fb 	.word	0xf994f7fb
   15898:	f00d4628 	.word	0xf00d4628
   1589c:	4682fbc7 	.word	0x4682fbc7
   158a0:	f00d4630 	.word	0xf00d4630
   158a4:	9903fbc3 	.word	0x9903fbc3
   158a8:	eb031c4b 	.word	0xeb031c4b
   158ac:	44531391 	.word	0x44531391
   158b0:	9b0f4418 	.word	0x9b0f4418
   158b4:	d8534298 	.word	0xd8534298
   158b8:	f0072001 	.word	0xf0072001
   158bc:	4682f947 	.word	0x4682f947
   158c0:	d0522800 	.word	0xd0522800
   158c4:	94009903 	.word	0x94009903
   158c8:	aa03463b 	.word	0xaa03463b
   158cc:	f978f7fb 	.word	0xf978f7fb
   158d0:	28004680 	.word	0x28004680
   158d4:	4628d13d 	.word	0x4628d13d
   158d8:	fba8f00d 	.word	0xfba8f00d
   158dc:	46024629 	.word	0x46024629
   158e0:	f00d4648 	.word	0xf00d4648
   158e4:	4628fbc5 	.word	0x4628fbc5
   158e8:	fba0f00d 	.word	0xfba0f00d
   158ec:	eb099b03 	.word	0xeb099b03
   158f0:	b19b0400 	.word	0xb19b0400
   158f4:	270a46d3 	.word	0x270a46d3
   158f8:	bf282b40 	.word	0xbf282b40
   158fc:	461d2340 	.word	0x461d2340
   15900:	461a4659 	.word	0x461a4659
   15904:	f00d4620 	.word	0xf00d4620
   15908:	9b03fbb3 	.word	0x9b03fbb3
   1590c:	1b5b442c 	.word	0x1b5b442c
   15910:	44ab7027 	.word	0x44ab7027
   15914:	93033401 	.word	0x93033401
   15918:	d1ed2b00 	.word	0xd1ed2b00
   1591c:	f00d4630 	.word	0xf00d4630
   15920:	4631fb85 	.word	0x4631fb85
   15924:	46204602 	.word	0x46204602
   15928:	fba2f00d 	.word	0xfba2f00d
   1592c:	f00d4630 	.word	0xf00d4630
   15930:	2100fb7d 	.word	0x2100fb7d
   15934:	18234602 	.word	0x18234602
   15938:	330154a1 	.word	0x330154a1
   1593c:	eba39a10 	.word	0xeba39a10
   15940:	46500309 	.word	0x46500309
   15944:	f0076013 	.word	0xf0076013
   15948:	4640f915 	.word	0x4640f915
   1594c:	e8bdb005 	.word	0xe8bdb005
   15950:	46508ff0 	.word	0x46508ff0
   15954:	f90ef007 	.word	0xf90ef007
   15958:	b0054640 	.word	0xb0054640
   1595c:	8ff0e8bd 	.word	0x8ff0e8bd
   15960:	f06f9b10 	.word	0xf06f9b10
   15964:	60180829 	.word	0x60180829
   15968:	f8dfe7ef 	.word	0xf8dfe7ef
   1596c:	e7ec8004 	.word	0xe7ec8004
   15970:	ffffee80 	.word	0xffffee80

00015974 <ip_recvd_packet_free_cb>:
   15974:	4604b510 	.word	0x4604b510
   15978:	f7fa6800 	.word	0xf7fa6800
   1597c:	68a0fdaf 	.word	0x68a0fdaf
   15980:	e8bdb118 	.word	0xe8bdb118
   15984:	f0074010 	.word	0xf0074010
   15988:	bd10b8f5 	.word	0xbd10b8f5

0001598c <rpc_error_to_nrf_bsd_error>:
   1598c:	bf9a2810 	.word	0xbf9a2810
   15990:	f8534b02 	.word	0xf8534b02
   15994:	202d0020 	.word	0x202d0020
   15998:	bf004770 	.word	0xbf004770
   1599c:	0002465c 	.word	0x0002465c

000159a0 <ip_interface_request_create>:
   159a0:	2500b570 	.word	0x2500b570
   159a4:	ac02b082 	.word	0xac02b082
   159a8:	5d04f844 	.word	0x5d04f844
   159ac:	460d4606 	.word	0x460d4606
   159b0:	46194620 	.word	0x46194620
   159b4:	f7fa4614 	.word	0xf7fa4614
   159b8:	b960fd5f 	.word	0xb960fd5f
   159bc:	22089b01 	.word	0x22089b01
   159c0:	72987258 	.word	0x72987258
   159c4:	461872d8 	.word	0x461872d8
   159c8:	4406ea44 	.word	0x4406ea44
   159cc:	611d60dc 	.word	0x611d60dc
   159d0:	b002721a 	.word	0xb002721a
   159d4:	9b01bd70 	.word	0x9b01bd70
   159d8:	b0024618 	.word	0xb0024618
   159dc:	bf00bd70 	.word	0xbf00bd70

000159e0 <ip_interface_request_send>:
   159e0:	460cb570 	.word	0x460cb570
   159e4:	46114605 	.word	0x46114605
   159e8:	461e4620 	.word	0x461e4620
   159ec:	fd58f7fa 	.word	0xfd58f7fa
   159f0:	bd70b900 	.word	0xbd70b900
   159f4:	b1086820 	.word	0xb1086820
   159f8:	fd70f7fa 	.word	0xfd70f7fa
   159fc:	f7fa4620 	.word	0xf7fa4620
   15a00:	602efd65 	.word	0x602efd65
   15a04:	bd702023 	.word	0xbd702023

00015a08 <ip_interface_wait>:
   15a08:	4605b538 	.word	0x4605b538
   15a0c:	fe12f7ff 	.word	0xfe12f7ff
   15a10:	b1084604 	.word	0xb1084604
   15a14:	bd384620 	.word	0xbd384620
   15a18:	f7ff4628 	.word	0xf7ff4628
   15a1c:	2800fe77 	.word	0x2800fe77
   15a20:	6844d0f8 	.word	0x6844d0f8
   15a24:	d0f52c00 	.word	0xd0f52c00
   15a28:	60432300 	.word	0x60432300
   15a2c:	bd384620 	.word	0xbd384620

00015a30 <ip_interface_init>:
   15a30:	2300b538 	.word	0x2300b538
   15a34:	4c084d07 	.word	0x4c084d07
   15a38:	22204619 	.word	0x22204619
   15a3c:	602b4807 	.word	0x602b4807
   15a40:	f00d6023 	.word	0xf00d6023
   15a44:	f7fafb3f 	.word	0xf7fafb3f
   15a48:	3000fd11 	.word	0x3000fd11
   15a4c:	2001bf18 	.word	0x2001bf18
   15a50:	bd384240 	.word	0xbd384240
   15a54:	200203dc 	.word	0x200203dc
   15a58:	200203d8 	.word	0x200203d8
   15a5c:	200203e4 	.word	0x200203e4

00015a60 <ip_interface_open>:
   15a60:	41f0e92d 	.word	0x41f0e92d
   15a64:	20004606 	.word	0x20004606
   15a68:	0308f026 	.word	0x0308f026
   15a6c:	2b02b082 	.word	0x2b02b082
   15a70:	4617460c 	.word	0x4617460c
   15a74:	d0029000 	.word	0xd0029000
   15a78:	f0402e05 	.word	0xf0402e05
   15a7c:	1e638084 	.word	0x1e638084
   15a80:	d85c2b02 	.word	0xd85c2b02
   15a84:	d1542f00 	.word	0xd1542f00
   15a88:	d0672c01 	.word	0xd0672c01
   15a8c:	bf182c03 	.word	0xbf182c03
   15a90:	4a482702 	.word	0x4a482702
   15a94:	46684621 	.word	0x46684621
   15a98:	fd28f7ff 	.word	0xfd28f7ff
   15a9c:	46809b00 	.word	0x46809b00
   15aa0:	d0592b00 	.word	0xd0592b00
   15aa4:	a8022100 	.word	0xa8022100
   15aa8:	1d04f840 	.word	0x1d04f840
   15aac:	6403e9c3 	.word	0x6403e9c3
   15ab0:	f7fa615f 	.word	0xf7fa615f
   15ab4:	2800fce1 	.word	0x2800fce1
   15ab8:	f247d14b 	.word	0xf247d14b
   15abc:	f04f0201 	.word	0xf04f0201
   15ac0:	210833ff 	.word	0x210833ff
   15ac4:	ea429d01 	.word	0xea429d01
   15ac8:	60ea4208 	.word	0x60ea4208
   15acc:	72a87268 	.word	0x72a87268
   15ad0:	722972e8 	.word	0x722972e8
   15ad4:	746b742b 	.word	0x746b742b
   15ad8:	74eb74ab 	.word	0x74eb74ab
   15adc:	2e0568ab 	.word	0x2e0568ab
   15ae0:	030cf103 	.word	0x030cf103
   15ae4:	d00360ab 	.word	0xd00360ab
   15ae8:	bf142e0a 	.word	0xbf142e0a
   15aec:	26022601 	.word	0x26022601
   15af0:	61ef616e 	.word	0x61ef616e
   15af4:	f24761ac 	.word	0xf24761ac
   15af8:	46280101 	.word	0x46280101
   15afc:	f7fa9f00 	.word	0xf7fa9f00
   15b00:	4606fccf 	.word	0x4606fccf
   15b04:	6828b360 	.word	0x6828b360
   15b08:	f7fab108 	.word	0xf7fab108
   15b0c:	4628fce7 	.word	0x4628fce7
   15b10:	fcdcf7fa 	.word	0xfcdcf7fa
   15b14:	25232301 	.word	0x25232301
   15b18:	4640603b 	.word	0x4640603b
   15b1c:	fd3cf7ff 	.word	0xfd3cf7ff
   15b20:	f7f94628 	.word	0xf7f94628
   15b24:	f04fff27 	.word	0xf04fff27
   15b28:	464038ff 	.word	0x464038ff
   15b2c:	e8bdb002 	.word	0xe8bdb002
   15b30:	2c0181f0 	.word	0x2c0181f0
   15b34:	2c02d009 	.word	0x2c02d009
   15b38:	2f02d109 	.word	0x2f02d109
   15b3c:	2016d0a9 	.word	0x2016d0a9
   15b40:	ff18f7f9 	.word	0xff18f7f9
   15b44:	38fff04f 	.word	0x38fff04f
   15b48:	2f01e7ef 	.word	0x2f01e7ef
   15b4c:	2702d1f7 	.word	0x2702d1f7
   15b50:	9d01e79f 	.word	0x9d01e79f
   15b54:	d1c12d00 	.word	0xd1c12d00
   15b58:	e7de250c 	.word	0xe7de250c
   15b5c:	e7984627 	.word	0xe7984627
   15b60:	33fff04f 	.word	0x33fff04f
   15b64:	72fff64f 	.word	0x72fff64f
   15b68:	46402102 	.word	0x46402102
   15b6c:	fd62f7ff 	.word	0xfd62f7ff
   15b70:	28004605 	.word	0x28004605
   15b74:	4640d1d1 	.word	0x4640d1d1
   15b78:	fdc8f7ff 	.word	0xfdc8f7ff
   15b7c:	6845b148 	.word	0x6845b148
   15b80:	6046b13d 	.word	0x6046b13d
   15b84:	202fe7c9 	.word	0x202fe7c9
   15b88:	fef4f7f9 	.word	0xfef4f7f9
   15b8c:	38fff04f 	.word	0x38fff04f
   15b90:	3c02e7cb 	.word	0x3c02e7cb
   15b94:	d8c82c01 	.word	0xd8c82c01
   15b98:	9b004640 	.word	0x9b004640
   15b9c:	f442681a 	.word	0xf442681a
   15ba0:	601a3200 	.word	0x601a3200
   15ba4:	f442681a 	.word	0xf442681a
   15ba8:	601a1280 	.word	0x601a1280
   15bac:	e8bdb002 	.word	0xe8bdb002
   15bb0:	bf0081f0 	.word	0xbf0081f0
   15bb4:	00015975 	.word	0x00015975

00015bb8 <ip_interface_close>:
   15bb8:	41f0e92d 	.word	0x41f0e92d
   15bbc:	4606b082 	.word	0x4606b082
   15bc0:	fda4f7ff 	.word	0xfda4f7ff
   15bc4:	d0632800 	.word	0xd0632800
   15bc8:	21004604 	.word	0x21004604
   15bcc:	6827a802 	.word	0x6827a802
   15bd0:	1d04f840 	.word	0x1d04f840
   15bd4:	8018f8d4 	.word	0x8018f8d4
   15bd8:	fc4ef7fa 	.word	0xfc4ef7fa
   15bdc:	d13a2800 	.word	0xd13a2800
   15be0:	0309f247 	.word	0x0309f247
   15be4:	9d012208 	.word	0x9d012208
   15be8:	4306ea43 	.word	0x4306ea43
   15bec:	f8c560eb 	.word	0xf8c560eb
   15bf0:	72688010 	.word	0x72688010
   15bf4:	72e872a8 	.word	0x72e872a8
   15bf8:	6823722a 	.word	0x6823722a
   15bfc:	0109f247 	.word	0x0109f247
   15c00:	041b0c1b 	.word	0x041b0c1b
   15c04:	030df043 	.word	0x030df043
   15c08:	68236023 	.word	0x68236023
   15c0c:	f4234628 	.word	0xf4234628
   15c10:	60233300 	.word	0x60233300
   15c14:	f4236823 	.word	0xf4236823
   15c18:	60231380 	.word	0x60231380
   15c1c:	fc40f7fa 	.word	0xfc40f7fa
   15c20:	f04fbb40 	.word	0xf04fbb40
   15c24:	f64f33ff 	.word	0xf64f33ff
   15c28:	210e72ff 	.word	0x210e72ff
   15c2c:	f7ff4630 	.word	0xf7ff4630
   15c30:	4604fd01 	.word	0x4604fd01
   15c34:	4c17b1a0 	.word	0x4c17b1a0
   15c38:	0026f854 	.word	0x0026f854
   15c3c:	f7fab120 	.word	0xf7fab120
   15c40:	2300fc45 	.word	0x2300fc45
   15c44:	3026f844 	.word	0x3026f844
   15c48:	f7ff4630 	.word	0xf7ff4630
   15c4c:	2000fca5 	.word	0x2000fca5
   15c50:	e8bdb002 	.word	0xe8bdb002
   15c54:	9d0181f0 	.word	0x9d0181f0
   15c58:	2d00200c 	.word	0x2d00200c
   15c5c:	e012d1cd 	.word	0xe012d1cd
   15c60:	f7ff4630 	.word	0xf7ff4630
   15c64:	2800fd53 	.word	0x2800fd53
   15c68:	6843d0e5 	.word	0x6843d0e5
   15c6c:	d0e22b00 	.word	0xd0e22b00
   15c70:	e7e06044 	.word	0xe7e06044
   15c74:	b1086828 	.word	0xb1086828
   15c78:	fc30f7fa 	.word	0xfc30f7fa
   15c7c:	f7fa4628 	.word	0xf7fa4628
   15c80:	2023fc25 	.word	0x2023fc25
   15c84:	f7f96027 	.word	0xf7f96027
   15c88:	f04ffe75 	.word	0xf04ffe75
   15c8c:	e7df30ff 	.word	0xe7df30ff
   15c90:	e7f82009 	.word	0xe7f82009
   15c94:	200203e4 	.word	0x200203e4

00015c98 <ip_interface_sendto>:
   15c98:	4ff0e92d 	.word	0x4ff0e92d
   15c9c:	b0892500 	.word	0xb0892500
   15ca0:	46149103 	.word	0x46149103
   15ca4:	95079301 	.word	0x95079301
   15ca8:	9e124607 	.word	0x9e124607
   15cac:	fd2ef7ff 	.word	0xfd2ef7ff
   15cb0:	f0002800 	.word	0xf0002800
   15cb4:	f5b48124 	.word	0xf5b48124
   15cb8:	f3005f80 	.word	0xf3005f80
   15cbc:	69038118 	.word	0x69038118
   15cc0:	2b014605 	.word	0x2b014605
   15cc4:	80d1f000 	.word	0x80d1f000
   15cc8:	0390682a 	.word	0x0390682a
   15ccc:	682ad423 	.word	0x682ad423
   15cd0:	d4060091 	.word	0xd4060091
   15cd4:	f0002b01 	.word	0xf0002b01
   15cd8:	682b80ed 	.word	0x682b80ed
   15cdc:	f140031a 	.word	0xf140031a
   15ce0:	682b8102 	.word	0x682b8102
   15ce4:	f140031b 	.word	0xf140031b
   15ce8:	68a88106 	.word	0x68a88106
   15cec:	9218f8df 	.word	0x9218f8df
   15cf0:	f0402800 	.word	0xf0402800
   15cf4:	682b8096 	.word	0x682b8096
   15cf8:	f1400118 	.word	0xf1400118
   15cfc:	682b8082 	.word	0x682b8082
   15d00:	6300f023 	.word	0x6300f023
   15d04:	f859602b 	.word	0xf859602b
   15d08:	28000027 	.word	0x28000027
   15d0c:	4620d17c 	.word	0x4620d17c
   15d10:	e8bdb009 	.word	0xe8bdb009
   15d14:	f2478ff0 	.word	0xf2478ff0
   15d18:	f04f0806 	.word	0xf04f0806
   15d1c:	043b0a0c 	.word	0x043b0a0c
   15d20:	91e4f8df 	.word	0x91e4f8df
   15d24:	46219304 	.word	0x46219304
   15d28:	f7faa807 	.word	0xf7faa807
   15d2c:	2804fba5 	.word	0x2804fba5
   15d30:	2800d0f9 	.word	0x2800d0f9
   15d34:	9b07d171 	.word	0x9b07d171
   15d38:	a008f883 	.word	0xa008f883
   15d3c:	72987258 	.word	0x72987258
   15d40:	b33e72d8 	.word	0xb33e72d8
   15d44:	687168ea 	.word	0x687168ea
   15d48:	d10a428a 	.word	0xd10a428a
   15d4c:	f1032a02 	.word	0xf1032a02
   15d50:	7831001c 	.word	0x7831001c
   15d54:	8090f000 	.word	0x8090f000
   15d58:	d1022a0a 	.word	0xd1022a0a
   15d5c:	f0002924 	.word	0xf0002924
   15d60:	681880af 	.word	0x681880af
   15d64:	f7fab110 	.word	0xf7fab110
   15d68:	9b07fbb9 	.word	0x9b07fbb9
   15d6c:	f7fa4618 	.word	0xf7fa4618
   15d70:	2016fbad 	.word	0x2016fbad
   15d74:	031a682b 	.word	0x031a682b
   15d78:	682bd453 	.word	0x682bd453
   15d7c:	2b0db29b 	.word	0x2b0db29b
   15d80:	682bd0b6 	.word	0x682bd0b6
   15d84:	1300f423 	.word	0x1300f423
   15d88:	682b602b 	.word	0x682b602b
   15d8c:	3300f443 	.word	0x3300f443
   15d90:	e7ad602b 	.word	0xe7ad602b
   15d94:	99014642 	.word	0x99014642
   15d98:	69a96159 	.word	0x69a96159
   15d9c:	61199804 	.word	0x61199804
   15da0:	43029903 	.word	0x43029903
   15da4:	605c60da 	.word	0x605c60da
   15da8:	6818b119 	.word	0x6818b119
   15dac:	f00d4622 	.word	0xf00d4622
   15db0:	682bf95f 	.word	0x682bf95f
   15db4:	93054641 	.word	0x93054641
   15db8:	f423682b 	.word	0xf423682b
   15dbc:	602b3300 	.word	0x602b3300
   15dc0:	f443682b 	.word	0xf443682b
   15dc4:	602b1300 	.word	0x602b1300
   15dc8:	46189b07 	.word	0x46189b07
   15dcc:	f7fa9302 	.word	0xf7fa9302
   15dd0:	9b02fb67 	.word	0x9b02fb67
   15dd4:	bb584683 	.word	0xbb584683
   15dd8:	3200f44f 	.word	0x3200f44f
   15ddc:	33fff04f 	.word	0x33fff04f
   15de0:	46384611 	.word	0x46384611
   15de4:	fc26f7ff 	.word	0xfc26f7ff
   15de8:	682bb370 	.word	0x682bb370
   15dec:	d4370319 	.word	0xd4370319
   15df0:	d1bf280c 	.word	0xd1bf280c
   15df4:	0027f859 	.word	0x0027f859
   15df8:	d0942800 	.word	0xd0942800
   15dfc:	fb66f7fa 	.word	0xfb66f7fa
   15e00:	f859e791 	.word	0xf859e791
   15e04:	69840027 	.word	0x69840027
   15e08:	fb60f7fa 	.word	0xfb60f7fa
   15e0c:	46202300 	.word	0x46202300
   15e10:	3027f849 	.word	0x3027f849
   15e14:	e8bdb009 	.word	0xe8bdb009
   15e18:	682b8ff0 	.word	0x682b8ff0
   15e1c:	031a200c 	.word	0x031a200c
   15e20:	f7f9d5ab 	.word	0xf7f9d5ab
   15e24:	f04ffda7 	.word	0xf04ffda7
   15e28:	f85934ff 	.word	0xf85934ff
   15e2c:	e76c0027 	.word	0xe76c0027
   15e30:	469b6818 	.word	0x469b6818
   15e34:	f7fab108 	.word	0xf7fab108
   15e38:	4658fb51 	.word	0x4658fb51
   15e3c:	fb46f7fa 	.word	0xfb46f7fa
   15e40:	20239b05 	.word	0x20239b05
   15e44:	e795602b 	.word	0xe795602b
   15e48:	f7ff4638 	.word	0xf7ff4638
   15e4c:	4603fc5f 	.word	0x4603fc5f
   15e50:	6840b1f0 	.word	0x6840b1f0
   15e54:	f8c3b1e0 	.word	0xf8c3b1e0
   15e58:	682bb004 	.word	0x682bb004
   15e5c:	d5c70319 	.word	0xd5c70319
   15e60:	682b68a8 	.word	0x682b68a8
   15e64:	d588031e 	.word	0xd588031e
   15e68:	2e00e742 	.word	0x2e00e742
   15e6c:	af2cf43f 	.word	0xaf2cf43f
   15e70:	f8df2016 	.word	0xf8df2016
   15e74:	e7d49094 	.word	0xe7d49094
   15e78:	f47f2910 	.word	0xf47f2910
   15e7c:	2204af72 	.word	0x2204af72
   15e80:	835a8931 	.word	0x835a8931
   15e84:	f1068319 	.word	0xf1068319
   15e88:	f00d010c 	.word	0xf00d010c
   15e8c:	e01ef8f1 	.word	0xe01ef8f1
   15e90:	031b682b 	.word	0x031b682b
   15e94:	af2ff53f 	.word	0xaf2ff53f
   15e98:	b29b682b 	.word	0xb29b682b
   15e9c:	f43f2b0d 	.word	0xf43f2b0d
   15ea0:	682baf2a 	.word	0x682baf2a
   15ea4:	1300f423 	.word	0x1300f423
   15ea8:	682b602b 	.word	0x682b602b
   15eac:	3300f443 	.word	0x3300f443
   15eb0:	e720602b 	.word	0xe720602b
   15eb4:	b29b682b 	.word	0xb29b682b
   15eb8:	f47f2b05 	.word	0xf47f2b05
   15ebc:	e70caf12 	.word	0xe70caf12
   15ec0:	89312210 	.word	0x89312210
   15ec4:	8319835a 	.word	0x8319835a
   15ec8:	f00d18b1 	.word	0xf00d18b1
   15ecc:	f247f8d1 	.word	0xf247f8d1
   15ed0:	9b070207 	.word	0x9b070207
   15ed4:	68994690 	.word	0x68994690
   15ed8:	31048b58 	.word	0x31048b58
   15edc:	98014401 	.word	0x98014401
   15ee0:	61586099 	.word	0x61586099
   15ee4:	2023e759 	.word	0x2023e759
   15ee8:	901cf8df 	.word	0x901cf8df
   15eec:	2028e799 	.word	0x2028e799
   15ef0:	9014f8df 	.word	0x9014f8df
   15ef4:	2039e795 	.word	0x2039e795
   15ef8:	900cf8df 	.word	0x900cf8df
   15efc:	2009e791 	.word	0x2009e791
   15f00:	9004f8df 	.word	0x9004f8df
   15f04:	bf00e78d 	.word	0xbf00e78d
   15f08:	200203e4 	.word	0x200203e4

00015f0c <ip_interface_recvfrom>:
   15f0c:	4ff0e92d 	.word	0x4ff0e92d
   15f10:	2a00b085 	.word	0x2a00b085
   15f14:	8110f000 	.word	0x8110f000
   15f18:	4699468a 	.word	0x4699468a
   15f1c:	46164607 	.word	0x46164607
   15f20:	fbf4f7ff 	.word	0xfbf4f7ff
   15f24:	28004604 	.word	0x28004604
   15f28:	810df000 	.word	0x810df000
   15f2c:	02d96803 	.word	0x02d96803
   15f30:	f019d565 	.word	0xf019d565
   15f34:	bf180f02 	.word	0xbf180f02
   15f38:	0800f04f 	.word	0x0800f04f
   15f3c:	3bfff04f 	.word	0x3bfff04f
   15f40:	6803bf08 	.word	0x6803bf08
   15f44:	0510f009 	.word	0x0510f009
   15f48:	f083bf04 	.word	0xf083bf04
   15f4c:	f3c85880 	.word	0xf3c85880
   15f50:	68237800 	.word	0x68237800
   15f54:	d56d03da 	.word	0xd56d03da
   15f58:	69e06823 	.word	0x69e06823
   15f5c:	3380f423 	.word	0x3380f423
   15f60:	68036023 	.word	0x68036023
   15f64:	479868db 	.word	0x479868db
   15f68:	3ffff1b0 	.word	0x3ffff1b0
   15f6c:	f0004683 	.word	0xf0004683
   15f70:	42868081 	.word	0x42868081
   15f74:	6923dd03 	.word	0x6923dd03
   15f78:	f0002b01 	.word	0xf0002b01
   15f7c:	250080a7 	.word	0x250080a7
   15f80:	9b0f69e0 	.word	0x9b0f69e0
   15f84:	681bb103 	.word	0x681bb103
   15f88:	e9cd9a0e 	.word	0xe9cd9a0e
   15f8c:	e9cda600 	.word	0xe9cda600
   15f90:	68032302 	.word	0x68032302
   15f94:	689b464a 	.word	0x689b464a
   15f98:	47984669 	.word	0x47984669
   15f9c:	69e04683 	.word	0x69e04683
   15fa0:	3ffff1bb 	.word	0x3ffff1bb
   15fa4:	bf186803 	.word	0xbf186803
   15fa8:	68db2601 	.word	0x68db2601
   15fac:	2600bf0a 	.word	0x2600bf0a
   15fb0:	0800f04f 	.word	0x0800f04f
   15fb4:	0823f04f 	.word	0x0823f04f
   15fb8:	30014798 	.word	0x30014798
   15fbc:	2d00d135 	.word	0x2d00d135
   15fc0:	80b6f000 	.word	0x80b6f000
   15fc4:	f0002e00 	.word	0xf0002e00
   15fc8:	682380a6 	.word	0x682380a6
   15fcc:	d5060319 	.word	0xd5060319
   15fd0:	b29b6823 	.word	0xb29b6823
   15fd4:	d0022b0d 	.word	0xd0022b0d
   15fd8:	2b016923 	.word	0x2b016923
   15fdc:	6823d025 	.word	0x6823d025
   15fe0:	4f80f013 	.word	0x4f80f013
   15fe4:	f0406823 	.word	0xf0406823
   15fe8:	031a80b1 	.word	0x031a80b1
   15fec:	f1b8d475 	.word	0xf1b8d475
   15ff0:	f0400f00 	.word	0xf0400f00
   15ff4:	4658808a 	.word	0x4658808a
   15ff8:	e8bdb005 	.word	0xe8bdb005
   15ffc:	68038ff0 	.word	0x68038ff0
   16000:	2b06b29b 	.word	0x2b06b29b
   16004:	6803d073 	.word	0x6803d073
   16008:	2b07b29b 	.word	0x2b07b29b
   1600c:	f04fbf0c 	.word	0xf04fbf0c
   16010:	f04f0809 	.word	0xf04f0809
   16014:	69e00839 	.word	0x69e00839
   16018:	68db6803 	.word	0x68db6803
   1601c:	f1b04798 	.word	0xf1b04798
   16020:	46833fff 	.word	0x46833fff
   16024:	f04fd0db 	.word	0xf04fd0db
   16028:	68233bff 	.word	0x68233bff
   1602c:	3380f443 	.word	0x3380f443
   16030:	e7dc6023 	.word	0xe7dc6023
   16034:	0f00f1b8 	.word	0x0f00f1b8
   16038:	8081f000 	.word	0x8081f000
   1603c:	3280f44f 	.word	0x3280f44f
   16040:	46116a23 	.word	0x46116a23
   16044:	bf082b00 	.word	0xbf082b00
   16048:	33fff04f 	.word	0x33fff04f
   1604c:	f7ff4638 	.word	0xf7ff4638
   16050:	4680faf1 	.word	0x4680faf1
   16054:	6823b358 	.word	0x6823b358
   16058:	031b69e0 	.word	0x031b69e0
   1605c:	6823d521 	.word	0x6823d521
   16060:	2b0db29b 	.word	0x2b0db29b
   16064:	6925d01d 	.word	0x6925d01d
   16068:	0501f1a5 	.word	0x0501f1a5
   1606c:	f585fab5 	.word	0xf585fab5
   16070:	e786096d 	.word	0xe786096d
   16074:	03186823 	.word	0x03186823
   16078:	6823d5dc 	.word	0x6823d5dc
   1607c:	2b0db29b 	.word	0x2b0db29b
   16080:	6923d0d8 	.word	0x6923d0d8
   16084:	2b0169e0 	.word	0x2b0169e0
   16088:	f04fd034 	.word	0xf04fd034
   1608c:	68230839 	.word	0x68230839
   16090:	041b0c1b 	.word	0x041b0c1b
   16094:	030df043 	.word	0x030df043
   16098:	68236023 	.word	0x68236023
   1609c:	1380f423 	.word	0x1380f423
   160a0:	68036023 	.word	0x68036023
   160a4:	479868db 	.word	0x479868db
   160a8:	d1be3001 	.word	0xd1be3001
   160ac:	4638e797 	.word	0x4638e797
   160b0:	fb2cf7ff 	.word	0xfb2cf7ff
   160b4:	f8d0b138 	.word	0xf8d0b138
   160b8:	f1b88004 	.word	0xf1b88004
   160bc:	d0020f00 	.word	0xd0020f00
   160c0:	60432300 	.word	0x60432300
   160c4:	f04fe7c7 	.word	0xf04fe7c7
   160c8:	e7420801 	.word	0xe7420801
   160cc:	6823b11d 	.word	0x6823b11d
   160d0:	d5b300db 	.word	0xd5b300db
   160d4:	69e0e753 	.word	0x69e0e753
   160d8:	6823e753 	.word	0x6823e753
   160dc:	2b0db29b 	.word	0x2b0db29b
   160e0:	68a3d185 	.word	0x68a3d185
   160e4:	d0822b00 	.word	0xd0822b00
   160e8:	8008f8d4 	.word	0x8008f8d4
   160ec:	f04fe77f 	.word	0xf04fe77f
   160f0:	e7900809 	.word	0xe7900809
   160f4:	68db6803 	.word	0x68db6803
   160f8:	30014798 	.word	0x30014798
   160fc:	f04fd00b 	.word	0xf04fd00b
   16100:	68230823 	.word	0x68230823
   16104:	3380f443 	.word	0x3380f443
   16108:	46406023 	.word	0x46406023
   1610c:	fc32f7f9 	.word	0xfc32f7f9
   16110:	3bfff04f 	.word	0x3bfff04f
   16114:	6823e76f 	.word	0x6823e76f
   16118:	0b00f04f 	.word	0x0b00f04f
   1611c:	041b0c1b 	.word	0x041b0c1b
   16120:	030df043 	.word	0x030df043
   16124:	68236023 	.word	0x68236023
   16128:	1380f423 	.word	0x1380f423
   1612c:	e7626023 	.word	0xe7626023
   16130:	f47f2e00 	.word	0xf47f2e00
   16134:	e752af4a 	.word	0xe752af4a
   16138:	0816f04f 	.word	0x0816f04f
   1613c:	f04fe7e5 	.word	0xf04fe7e5
   16140:	69e00823 	.word	0x69e00823
   16144:	f04fe7ad 	.word	0xf04fe7ad
   16148:	e7de0809 	.word	0xe7de0809
   1614c:	4380f023 	.word	0x4380f023
   16150:	68236023 	.word	0x68236023
   16154:	0869f04f 	.word	0x0869f04f
   16158:	041b0c1b 	.word	0x041b0c1b
   1615c:	030df043 	.word	0x030df043
   16160:	e7d26023 	.word	0xe7d26023

00016164 <ip_interface_connect>:
   16164:	41f0e92d 	.word	0x41f0e92d
   16168:	2900b082 	.word	0x2900b082
   1616c:	2a00d044 	.word	0x2a00d044
   16170:	4606d042 	.word	0x4606d042
   16174:	f7ff460f 	.word	0xf7ff460f
   16178:	4605fac9 	.word	0x4605fac9
   1617c:	f0002800 	.word	0xf0002800
   16180:	68038096 	.word	0x68038096
   16184:	2b02b29b 	.word	0x2b02b29b
   16188:	6803d004 	.word	0x6803d004
   1618c:	2b04b29b 	.word	0x2b04b29b
   16190:	808df040 	.word	0x808df040
   16194:	f0116829 	.word	0xf0116829
   16198:	f0405100 	.word	0xf0405100
   1619c:	a8028084 	.word	0xa8028084
   161a0:	1d04f840 	.word	0x1d04f840
   161a4:	8018f8d5 	.word	0x8018f8d5
   161a8:	f966f7fa 	.word	0xf966f7fa
   161ac:	2108bb70 	.word	0x2108bb70
   161b0:	9c010433 	.word	0x9c010433
   161b4:	42e0f443 	.word	0x42e0f443
   161b8:	0202f042 	.word	0x0202f042
   161bc:	f8c460e2 	.word	0xf8c460e2
   161c0:	72608010 	.word	0x72608010
   161c4:	72e072a0 	.word	0x72e072a0
   161c8:	f4437221 	.word	0xf4437221
   161cc:	f04343e0 	.word	0xf04343e0
   161d0:	60e30302 	.word	0x60e30302
   161d4:	69aa68a3 	.word	0x69aa68a3
   161d8:	61223304 	.word	0x61223304
   161dc:	68eb60a3 	.word	0x68eb60a3
   161e0:	4293687a 	.word	0x4293687a
   161e4:	2b02d108 	.word	0x2b02d108
   161e8:	0018f104 	.word	0x0018f104
   161ec:	d03a783a 	.word	0xd03a783a
   161f0:	d1012b0a 	.word	0xd1012b0a
   161f4:	d00e2a24 	.word	0xd00e2a24
   161f8:	46202416 	.word	0x46202416
   161fc:	fbbaf7f9 	.word	0xfbbaf7f9
   16200:	34fff04f 	.word	0x34fff04f
   16204:	b0024620 	.word	0xb0024620
   16208:	81f0e8bd 	.word	0x81f0e8bd
   1620c:	2c009c01 	.word	0x2c009c01
   16210:	0433d04f 	.word	0x0433d04f
   16214:	2210e7d9 	.word	0x2210e7d9
   16218:	18b9893b 	.word	0x18b9893b
   1621c:	82a382e2 	.word	0x82a382e2
   16220:	ff26f00c 	.word	0xff26f00c
   16224:	8ae268a3 	.word	0x8ae268a3
   16228:	0102f247 	.word	0x0102f247
   1622c:	60a34413 	.word	0x60a34413
   16230:	682b682f 	.word	0x682b682f
   16234:	f0434620 	.word	0xf0434620
   16238:	602b5300 	.word	0x602b5300
   1623c:	f930f7fa 	.word	0xf930f7fa
   16240:	682bb9e0 	.word	0x682bb9e0
   16244:	5880f013 	.word	0x5880f013
   16248:	f04fd12f 	.word	0xf04fd12f
   1624c:	f64f33ff 	.word	0xf64f33ff
   16250:	210572ff 	.word	0x210572ff
   16254:	f7ff4630 	.word	0xf7ff4630
   16258:	4604f9ed 	.word	0x4604f9ed
   1625c:	2c73b1c0 	.word	0x2c73b1c0
   16260:	602fd0cb 	.word	0x602fd0cb
   16264:	2a10e7c9 	.word	0x2a10e7c9
   16268:	2204d1c6 	.word	0x2204d1c6
   1626c:	f107893b 	.word	0xf107893b
   16270:	82e2010c 	.word	0x82e2010c
   16274:	f00c82a3 	.word	0xf00c82a3
   16278:	e7d3fefb 	.word	0xe7d3fefb
   1627c:	b1086820 	.word	0xb1086820
   16280:	f92cf7fa 	.word	0xf92cf7fa
   16284:	f7fa4620 	.word	0xf7fa4620
   16288:	2423f921 	.word	0x2423f921
   1628c:	e7b4602f 	.word	0xe7b4602f
   16290:	f7ff4630 	.word	0xf7ff4630
   16294:	2800fa3b 	.word	0x2800fa3b
   16298:	6844d0b4 	.word	0x6844d0b4
   1629c:	d0b12c00 	.word	0xd0b12c00
   162a0:	8004f8c0 	.word	0x8004f8c0
   162a4:	2472e7db 	.word	0x2472e7db
   162a8:	2473e7a7 	.word	0x2473e7a7
   162ac:	2409e7a5 	.word	0x2409e7a5
   162b0:	240ce7a3 	.word	0x240ce7a3
   162b4:	bf00e7a1 	.word	0xbf00e7a1

000162b8 <ip_interface_bind>:
   162b8:	41f0e92d 	.word	0x41f0e92d
   162bc:	b389b082 	.word	0xb389b082
   162c0:	4607b382 	.word	0x4607b382
   162c4:	f7ff460e 	.word	0xf7ff460e
   162c8:	4605fa21 	.word	0x4605fa21
   162cc:	d07b2800 	.word	0xd07b2800
   162d0:	b29b6803 	.word	0xb29b6803
   162d4:	d1772b02 	.word	0xd1772b02
   162d8:	a8022100 	.word	0xa8022100
   162dc:	1d04f840 	.word	0x1d04f840
   162e0:	8018f8d5 	.word	0x8018f8d5
   162e4:	f8c8f7fa 	.word	0xf8c8f7fa
   162e8:	f247bb30 	.word	0xf247bb30
   162ec:	22080305 	.word	0x22080305
   162f0:	ea439c01 	.word	0xea439c01
   162f4:	60e34307 	.word	0x60e34307
   162f8:	8010f8c4 	.word	0x8010f8c4
   162fc:	72a07260 	.word	0x72a07260
   16300:	722272e0 	.word	0x722272e0
   16304:	330468a3 	.word	0x330468a3
   16308:	68eb60a3 	.word	0x68eb60a3
   1630c:	42936872 	.word	0x42936872
   16310:	2b02d108 	.word	0x2b02d108
   16314:	0018f104 	.word	0x0018f104
   16318:	d03c7832 	.word	0xd03c7832
   1631c:	d1012b0a 	.word	0xd1012b0a
   16320:	d00e2a24 	.word	0xd00e2a24
   16324:	46202416 	.word	0x46202416
   16328:	fb24f7f9 	.word	0xfb24f7f9
   1632c:	34fff04f 	.word	0x34fff04f
   16330:	b0024620 	.word	0xb0024620
   16334:	81f0e8bd 	.word	0x81f0e8bd
   16338:	2c009c01 	.word	0x2c009c01
   1633c:	240cd1e2 	.word	0x240cd1e2
   16340:	2210e7f1 	.word	0x2210e7f1
   16344:	18b18933 	.word	0x18b18933
   16348:	82a382e2 	.word	0x82a382e2
   1634c:	fe90f00c 	.word	0xfe90f00c
   16350:	8ae268a3 	.word	0x8ae268a3
   16354:	0105f247 	.word	0x0105f247
   16358:	60a34413 	.word	0x60a34413
   1635c:	4620682b 	.word	0x4620682b
   16360:	041b0c1b 	.word	0x041b0c1b
   16364:	0303f043 	.word	0x0303f043
   16368:	682e602b 	.word	0x682e602b
   1636c:	f898f7fa 	.word	0xf898f7fa
   16370:	b9d84680 	.word	0xb9d84680
   16374:	33fff04f 	.word	0x33fff04f
   16378:	72fff64f 	.word	0x72fff64f
   1637c:	46382104 	.word	0x46382104
   16380:	f958f7ff 	.word	0xf958f7ff
   16384:	b3084604 	.word	0xb3084604
   16388:	0c1b682b 	.word	0x0c1b682b
   1638c:	f043041b 	.word	0xf043041b
   16390:	602b0302 	.word	0x602b0302
   16394:	2a10e7c7 	.word	0x2a10e7c7
   16398:	2204d1c4 	.word	0x2204d1c4
   1639c:	f1068933 	.word	0xf1068933
   163a0:	82e2010c 	.word	0x82e2010c
   163a4:	f00c82a3 	.word	0xf00c82a3
   163a8:	e7d1fe63 	.word	0xe7d1fe63
   163ac:	b1086820 	.word	0xb1086820
   163b0:	f894f7fa 	.word	0xf894f7fa
   163b4:	04360c36 	.word	0x04360c36
   163b8:	f0464620 	.word	0xf0464620
   163bc:	f7fa0602 	.word	0xf7fa0602
   163c0:	2423f885 	.word	0x2423f885
   163c4:	e7ae602e 	.word	0xe7ae602e
   163c8:	e7ac2409 	.word	0xe7ac2409
   163cc:	f7ff4638 	.word	0xf7ff4638
   163d0:	2800f99d 	.word	0x2800f99d
   163d4:	6844d0ac 	.word	0x6844d0ac
   163d8:	d0a92c00 	.word	0xd0a92c00
   163dc:	8004f8c0 	.word	0x8004f8c0
   163e0:	bf00e7d2 	.word	0xbf00e7d2

000163e4 <ip_interface_listen>:
   163e4:	41f0e92d 	.word	0x41f0e92d
   163e8:	4606b082 	.word	0x4606b082
   163ec:	f98ef7ff 	.word	0xf98ef7ff
   163f0:	d0672800 	.word	0xd0672800
   163f4:	46056803 	.word	0x46056803
   163f8:	2b04b29b 	.word	0x2b04b29b
   163fc:	2100d162 	.word	0x2100d162
   16400:	46304a32 	.word	0x46304a32
   16404:	f8def7ff 	.word	0xf8def7ff
   16408:	28004601 	.word	0x28004601
   1640c:	a802d15c 	.word	0xa802d15c
   16410:	1d04f840 	.word	0x1d04f840
   16414:	f7fa69af 	.word	0xf7fa69af
   16418:	bba8f82f 	.word	0xbba8f82f
   1641c:	0308f247 	.word	0x0308f247
   16420:	9c012208 	.word	0x9c012208
   16424:	4306ea43 	.word	0x4306ea43
   16428:	612760e3 	.word	0x612760e3
   1642c:	72a07260 	.word	0x72a07260
   16430:	722272e0 	.word	0x722272e0
   16434:	f24768a3 	.word	0xf24768a3
   16438:	33040108 	.word	0x33040108
   1643c:	682b60a3 	.word	0x682b60a3
   16440:	0c1b4620 	.word	0x0c1b4620
   16444:	f043041b 	.word	0xf043041b
   16448:	602b0306 	.word	0x602b0306
   1644c:	f7fa682f 	.word	0xf7fa682f
   16450:	4680f827 	.word	0x4680f827
   16454:	f04fb9e8 	.word	0xf04fb9e8
   16458:	f64f33ff 	.word	0xf64f33ff
   1645c:	210772ff 	.word	0x210772ff
   16460:	f7ff4630 	.word	0xf7ff4630
   16464:	4604f8e7 	.word	0x4604f8e7
   16468:	682bb308 	.word	0x682bb308
   1646c:	041b0c1b 	.word	0x041b0c1b
   16470:	0304f043 	.word	0x0304f043
   16474:	4620602b 	.word	0x4620602b
   16478:	fa7cf7f9 	.word	0xfa7cf7f9
   1647c:	34fff04f 	.word	0x34fff04f
   16480:	b0024620 	.word	0xb0024620
   16484:	81f0e8bd 	.word	0x81f0e8bd
   16488:	2c009c01 	.word	0x2c009c01
   1648c:	240cd1d2 	.word	0x240cd1d2
   16490:	6820e7f1 	.word	0x6820e7f1
   16494:	f7fab108 	.word	0xf7fab108
   16498:	0c3ff821 	.word	0x0c3ff821
   1649c:	4620043f 	.word	0x4620043f
   164a0:	0704f047 	.word	0x0704f047
   164a4:	f812f7fa 	.word	0xf812f7fa
   164a8:	602f2423 	.word	0x602f2423
   164ac:	4630e7e3 	.word	0x4630e7e3
   164b0:	f92cf7ff 	.word	0xf92cf7ff
   164b4:	d0e32800 	.word	0xd0e32800
   164b8:	2c006844 	.word	0x2c006844
   164bc:	f8c0d0e0 	.word	0xf8c0d0e0
   164c0:	e7d28004 	.word	0xe7d28004
   164c4:	e7d62409 	.word	0xe7d62409
   164c8:	e7d42423 	.word	0xe7d42423
   164cc:	00015975 	.word	0x00015975

000164d0 <ip_interface_accept>:
   164d0:	4ff0e92d 	.word	0x4ff0e92d
   164d4:	b0852500 	.word	0xb0852500
   164d8:	4690460f 	.word	0x4690460f
   164dc:	46069502 	.word	0x46069502
   164e0:	f914f7ff 	.word	0xf914f7ff
   164e4:	28004604 	.word	0x28004604
   164e8:	811cf000 	.word	0x811cf000
   164ec:	b29b6803 	.word	0xb29b6803
   164f0:	d10a2b07 	.word	0xd10a2b07
   164f4:	68056803 	.word	0x68056803
   164f8:	d41600db 	.word	0xd41600db
   164fc:	3580f415 	.word	0x3580f415
   16500:	6805d019 	.word	0x6805d019
   16504:	3580f415 	.word	0x3580f415
   16508:	f04fd124 	.word	0xf04fd124
   1650c:	9b020909 	.word	0x9b020909
   16510:	4628b113 	.word	0x4628b113
   16514:	f840f7ff 	.word	0xf840f7ff
   16518:	f04f4648 	.word	0xf04f4648
   1651c:	f7f939ff 	.word	0xf7f939ff
   16520:	4648fa29 	.word	0x4648fa29
   16524:	e8bdb005 	.word	0xe8bdb005
   16528:	f4158ff0 	.word	0xf4158ff0
   1652c:	d16d3580 	.word	0xd16d3580
   16530:	0923f04f 	.word	0x0923f04f
   16534:	f44fe7eb 	.word	0xf44fe7eb
   16538:	f04f3280 	.word	0xf04f3280
   1653c:	461133ff 	.word	0x461133ff
   16540:	f7ff4630 	.word	0xf7ff4630
   16544:	4681f877 	.word	0x4681f877
   16548:	d07e2800 	.word	0xd07e2800
   1654c:	f4156825 	.word	0xf4156825
   16550:	d0dc3580 	.word	0xd0dc3580
   16554:	30fff04f 	.word	0x30fff04f
   16558:	e9cd2300 	.word	0xe9cd2300
   1655c:	4a750300 	.word	0x4a750300
   16560:	a8026921 	.word	0xa8026921
   16564:	ffc2f7fe 	.word	0xffc2f7fe
   16568:	46059b02 	.word	0x46059b02
   1656c:	f0002b00 	.word	0xf0002b00
   16570:	210080dd 	.word	0x210080dd
   16574:	a8046962 	.word	0xa8046962
   16578:	68e2615a 	.word	0x68e2615a
   1657c:	1d04f840 	.word	0x1d04f840
   16580:	692260da 	.word	0x692260da
   16584:	f8d4611a 	.word	0xf8d4611a
   16588:	f7f99018 	.word	0xf7f99018
   1658c:	2800ff75 	.word	0x2800ff75
   16590:	f247d143 	.word	0xf247d143
   16594:	2108030c 	.word	0x2108030c
   16598:	b00cf8dd 	.word	0xb00cf8dd
   1659c:	4306ea43 	.word	0x4306ea43
   165a0:	300cf8cb 	.word	0x300cf8cb
   165a4:	9010f8cb 	.word	0x9010f8cb
   165a8:	0009f88b 	.word	0x0009f88b
   165ac:	000af88b 	.word	0x000af88b
   165b0:	000bf88b 	.word	0x000bf88b
   165b4:	1008f88b 	.word	0x1008f88b
   165b8:	f2476823 	.word	0xf2476823
   165bc:	0c1b010c 	.word	0x0c1b010c
   165c0:	f043041b 	.word	0xf043041b
   165c4:	60230308 	.word	0x60230308
   165c8:	f8d44658 	.word	0xf8d44658
   165cc:	f7f99000 	.word	0xf7f99000
   165d0:	4682ff67 	.word	0x4682ff67
   165d4:	6822bb48 	.word	0x6822bb48
   165d8:	f04f9900 	.word	0xf04f9900
   165dc:	400a33ff 	.word	0x400a33ff
   165e0:	21096022 	.word	0x21096022
   165e4:	72fff64f 	.word	0x72fff64f
   165e8:	f7ff4630 	.word	0xf7ff4630
   165ec:	4681f823 	.word	0x4681f823
   165f0:	f0002800 	.word	0xf0002800
   165f4:	68238085 	.word	0x68238085
   165f8:	431a9a01 	.word	0x431a9a01
   165fc:	68236022 	.word	0x68236022
   16600:	041b0c1b 	.word	0x041b0c1b
   16604:	0307f043 	.word	0x0307f043
   16608:	e7806023 	.word	0xe7806023
   1660c:	5280f06f 	.word	0x5280f06f
   16610:	5380f04f 	.word	0x5380f04f
   16614:	2300e9cd 	.word	0x2300e9cd
   16618:	f8dde7a1 	.word	0xf8dde7a1
   1661c:	f04fb00c 	.word	0xf04fb00c
   16620:	f1bb090c 	.word	0xf1bb090c
   16624:	d1c70f00 	.word	0xd1c70f00
   16628:	f8dbe771 	.word	0xf8dbe771
   1662c:	b1080000 	.word	0xb1080000
   16630:	ff54f7f9 	.word	0xff54f7f9
   16634:	4919ea4f 	.word	0x4919ea4f
   16638:	ea4f4658 	.word	0xea4f4658
   1663c:	f7f94909 	.word	0xf7f94909
   16640:	f049ff45 	.word	0xf049ff45
   16644:	60230307 	.word	0x60230307
   16648:	4630e772 	.word	0x4630e772
   1664c:	f85ef7ff 	.word	0xf85ef7ff
   16650:	f8d0b130 	.word	0xf8d0b130
   16654:	f1b99004 	.word	0xf1b99004
   16658:	d0010f00 	.word	0xd0010f00
   1665c:	e7756045 	.word	0xe7756045
   16660:	03d96823 	.word	0x03d96823
   16664:	af76f53f 	.word	0xaf76f53f
   16668:	99024d33 	.word	0x99024d33
   1666c:	3026f855 	.word	0x3026f855
   16670:	618b699b 	.word	0x618b699b
   16674:	68cbb147 	.word	0x68cbb147
   16678:	d0242b0a 	.word	0xd0242b0a
   1667c:	d1032b02 	.word	0xd1032b02
   16680:	2000f8d8 	.word	0x2000f8d8
   16684:	d0322a10 	.word	0xd0322a10
   16688:	482c680a 	.word	0x482c680a
   1668c:	f0424002 	.word	0xf0424002
   16690:	600a0205 	.word	0x600a0205
   16694:	68119a02 	.word	0x68119a02
   16698:	3100f441 	.word	0x3100f441
   1669c:	68116011 	.word	0x68116011
   166a0:	1180f441 	.word	0x1180f441
   166a4:	68236011 	.word	0x68236011
   166a8:	f0434003 	.word	0xf0434003
   166ac:	60230307 	.word	0x60230307
   166b0:	0026f855 	.word	0x0026f855
   166b4:	ff0af7f9 	.word	0xff0af7f9
   166b8:	46482300 	.word	0x46482300
   166bc:	3026f845 	.word	0x3026f845
   166c0:	e8bdb005 	.word	0xe8bdb005
   166c4:	f8d88ff0 	.word	0xf8d88ff0
   166c8:	2a242000 	.word	0x2a242000
   166cc:	703ad1dc 	.word	0x703ad1dc
   166d0:	607b2210 	.word	0x607b2210
   166d4:	3026f855 	.word	0x3026f855
   166d8:	0010f107 	.word	0x0010f107
   166dc:	813b8b9b 	.word	0x813b8b9b
   166e0:	1026f855 	.word	0x1026f855
   166e4:	f00c3120 	.word	0xf00c3120
   166e8:	9902fcc3 	.word	0x9902fcc3
   166ec:	703ae7cc 	.word	0x703ae7cc
   166f0:	f855607b 	.word	0xf855607b
   166f4:	f1073026 	.word	0xf1073026
   166f8:	8b9b000c 	.word	0x8b9b000c
   166fc:	e7ee2204 	.word	0xe7ee2204
   16700:	f7ff4630 	.word	0xf7ff4630
   16704:	b138f803 	.word	0xb138f803
   16708:	9004f8d0 	.word	0x9004f8d0
   1670c:	0f00f1b9 	.word	0x0f00f1b9
   16710:	f8c0d002 	.word	0xf8c0d002
   16714:	e76ea004 	.word	0xe76ea004
   16718:	9a016823 	.word	0x9a016823
   1671c:	431346a9 	.word	0x431346a9
   16720:	e7a16023 	.word	0xe7a16023
   16724:	f04f4605 	.word	0xf04f4605
   16728:	e6f00909 	.word	0xe6f00909
   1672c:	090cf04f 	.word	0x090cf04f
   16730:	bf00e6f2 	.word	0xbf00e6f2
   16734:	00015975 	.word	0x00015975
   16738:	200203e4 	.word	0x200203e4
   1673c:	ffff0000 	.word	0xffff0000

00016740 <ip_interface_setopt>:
   16740:	41f0e92d 	.word	0x41f0e92d
   16744:	b0842901 	.word	0xb0842901
   16748:	809cf040 	.word	0x809cf040
   1674c:	4690460e 	.word	0x4690460e
   16750:	4607461d 	.word	0x4607461d
   16754:	ffdaf7fe 	.word	0xffdaf7fe
   16758:	28004604 	.word	0x28004604
   1675c:	80a5f000 	.word	0x80a5f000
   16760:	0f19f1b8 	.word	0x0f19f1b8
   16764:	2d00d16e 	.word	0x2d00d16e
   16768:	8092f000 	.word	0x8092f000
   1676c:	f00c4628 	.word	0xf00c4628
   16770:	9b0afc5d 	.word	0x9b0afc5d
   16774:	f0404298 	.word	0xf0404298
   16778:	6823808b 	.word	0x6823808b
   1677c:	2b02b29b 	.word	0x2b02b29b
   16780:	4629d173 	.word	0x4629d173
   16784:	f00768e0 	.word	0xf00768e0
   16788:	9002feb9 	.word	0x9002feb9
   1678c:	bf083001 	.word	0xbf083001
   16790:	d04e2516 	.word	0xd04e2516
   16794:	025b6823 	.word	0x025b6823
   16798:	6823d44a 	.word	0x6823d44a
   1679c:	0300f413 	.word	0x0300f413
   167a0:	6826d146 	.word	0x6826d146
   167a4:	a8046822 	.word	0xa8046822
   167a8:	0280f442 	.word	0x0280f442
   167ac:	21046022 	.word	0x21046022
   167b0:	3d04f840 	.word	0x3d04f840
   167b4:	8018f8d4 	.word	0x8018f8d4
   167b8:	fe5ef7f9 	.word	0xfe5ef7f9
   167bc:	d14e2800 	.word	0xd14e2800
   167c0:	0203f247 	.word	0x0203f247
   167c4:	21082300 	.word	0x21082300
   167c8:	ea429d03 	.word	0xea429d03
   167cc:	60ea4207 	.word	0x60ea4207
   167d0:	8010f8c5 	.word	0x8010f8c5
   167d4:	726b7229 	.word	0x726b7229
   167d8:	72eb72ab 	.word	0x72eb72ab
   167dc:	0c08f04f 	.word	0x0c08f04f
   167e0:	20102300 	.word	0x20102300
   167e4:	68aa2130 	.word	0x68aa2130
   167e8:	4462756b 	.word	0x4462756b
   167ec:	75ab60aa 	.word	0x75ab60aa
   167f0:	76ab75eb 	.word	0x76ab75eb
   167f4:	f88576eb 	.word	0xf88576eb
   167f8:	7628c014 	.word	0x7628c014
   167fc:	22047669 	.word	0x22047669
   16800:	010ceb0d 	.word	0x010ceb0d
   16804:	f00c6828 	.word	0xf00c6828
   16808:	f247fc33 	.word	0xf247fc33
   1680c:	46280103 	.word	0x46280103
   16810:	fe46f7f9 	.word	0xfe46f7f9
   16814:	bb504680 	.word	0xbb504680
   16818:	0200f44f 	.word	0x0200f44f
   1681c:	33fff04f 	.word	0x33fff04f
   16820:	46384611 	.word	0x46384611
   16824:	ff06f7fe 	.word	0xff06f7fe
   16828:	b3984605 	.word	0xb3984605
   1682c:	e0006026 	.word	0xe0006026
   16830:	46282523 	.word	0x46282523
   16834:	f89ef7f9 	.word	0xf89ef7f9
   16838:	35fff04f 	.word	0x35fff04f
   1683c:	b0044628 	.word	0xb0044628
   16840:	81f0e8bd 	.word	0x81f0e8bd
   16844:	46429b0a 	.word	0x46429b0a
   16848:	46319300 	.word	0x46319300
   1684c:	4638462b 	.word	0x4638462b
   16850:	ff84f7fe 	.word	0xff84f7fe
   16854:	46284605 	.word	0x46284605
   16858:	e8bdb004 	.word	0xe8bdb004
   1685c:	9d0381f0 	.word	0x9d0381f0
   16860:	d1bb2d00 	.word	0xd1bb2d00
   16864:	250c6026 	.word	0x250c6026
   16868:	2509e7e3 	.word	0x2509e7e3
   1686c:	6828e7e1 	.word	0x6828e7e1
   16870:	f7f9b108 	.word	0xf7f9b108
   16874:	4628fe33 	.word	0x4628fe33
   16878:	fe28f7f9 	.word	0xfe28f7f9
   1687c:	60262523 	.word	0x60262523
   16880:	e7d66026 	.word	0xe7d66026
   16884:	f7f9202a 	.word	0xf7f9202a
   16888:	f04ff875 	.word	0xf04ff875
   1688c:	e7d535ff 	.word	0xe7d535ff
   16890:	e7ce250e 	.word	0xe7ce250e
   16894:	f7fe4638 	.word	0xf7fe4638
   16898:	b120ff39 	.word	0xb120ff39
   1689c:	b1156845 	.word	0xb1156845
   168a0:	8004f8c0 	.word	0x8004f8c0
   168a4:	6026e7c2 	.word	0x6026e7c2
   168a8:	2009e7c8 	.word	0x2009e7c8
   168ac:	f862f7f9 	.word	0xf862f7f9
   168b0:	35fff04f 	.word	0x35fff04f
   168b4:	bf00e7c2 	.word	0xbf00e7c2

000168b8 <ip_interface_getopt>:
   168b8:	bf86f7fe 	.word	0xbf86f7fe

000168bc <ip_interface_getaddrinfo>:
   168bc:	4ff0e92d 	.word	0x4ff0e92d
   168c0:	0c00f04f 	.word	0x0c00f04f
   168c4:	4e722401 	.word	0x4e722401
   168c8:	a1d0f8df 	.word	0xa1d0f8df
   168cc:	91d0f8df 	.word	0x91d0f8df
   168d0:	4607b085 	.word	0x4607b085
   168d4:	93014615 	.word	0x93014615
   168d8:	c000f8a6 	.word	0xc000f8a6
   168dc:	4000f8ca 	.word	0x4000f8ca
   168e0:	4000f8c9 	.word	0x4000f8c9
   168e4:	4608b171 	.word	0x4608b171
   168e8:	4661220a 	.word	0x4661220a
   168ec:	fafdf00c 	.word	0xfafdf00c
   168f0:	73fef64f 	.word	0x73fef64f
   168f4:	429a1e42 	.word	0x429a1e42
   168f8:	8083f200 	.word	0x8083f200
   168fc:	ea430203 	.word	0xea430203
   16900:	80302020 	.word	0x80302020
   16904:	819cf8df 	.word	0x819cf8df
   16908:	3000f8d8 	.word	0x3000f8d8
   1690c:	d1742b00 	.word	0xd1742b00
   16910:	60134a60 	.word	0x60134a60
   16914:	60134a60 	.word	0x60134a60
   16918:	d0622f00 	.word	0xd0622f00
   1691c:	f00c4638 	.word	0xf00c4638
   16920:	4683fb85 	.word	0x4683fb85
   16924:	69eab125 	.word	0x69eab125
   16928:	6851b112 	.word	0x6851b112
   1692c:	d06c2966 	.word	0xd06c2966
   16930:	32fff04f 	.word	0x32fff04f
   16934:	ae042100 	.word	0xae042100
   16938:	1d04f846 	.word	0x1d04f846
   1693c:	46594630 	.word	0x46594630
   16940:	f7f99200 	.word	0xf7f99200
   16944:	9a00fd99 	.word	0x9a00fd99
   16948:	d14c2800 	.word	0xd14c2800
   1694c:	010df247 	.word	0x010df247
   16950:	0c08f04f 	.word	0x0c08f04f
   16954:	ea419c03 	.word	0xea419c03
   16958:	60e14102 	.word	0x60e14102
   1695c:	72606122 	.word	0x72606122
   16960:	72e072a0 	.word	0x72e072a0
   16964:	c008f884 	.word	0xc008f884
   16968:	d0762d00 	.word	0xd0762d00
   1696c:	f022686a 	.word	0xf022686a
   16970:	29020108 	.word	0x29020108
   16974:	2a05d05c 	.word	0x2a05d05c
   16978:	68a9d178 	.word	0x68a9d178
   1697c:	f8c92902 	.word	0xf8c92902
   16980:	d0611000 	.word	0xd0611000
   16984:	68ea61a2 	.word	0x68ea61a2
   16988:	68aa6222 	.word	0x68aa6222
   1698c:	682a61e2 	.word	0x682a61e2
   16990:	68a26162 	.word	0x68a26162
   16994:	60a23210 	.word	0x60a23210
   16998:	6820b12f 	.word	0x6820b12f
   1699c:	465ab118 	.word	0x465ab118
   169a0:	f00c4639 	.word	0xf00c4639
   169a4:	2301fb65 	.word	0x2301fb65
   169a8:	010df247 	.word	0x010df247
   169ac:	f8c84620 	.word	0xf8c84620
   169b0:	f7f93000 	.word	0xf7f93000
   169b4:	2800fd75 	.word	0x2800fd75
   169b8:	f04fd156 	.word	0xf04fd156
   169bc:	930333ff 	.word	0x930333ff
   169c0:	46204631 	.word	0x46204631
   169c4:	ff42f7f8 	.word	0xff42f7f8
   169c8:	3000f8d8 	.word	0x3000f8d8
   169cc:	d0f72b01 	.word	0xd0f72b01
   169d0:	68184b31 	.word	0x68184b31
   169d4:	d13b2800 	.word	0xd13b2800
   169d8:	9a014b2e 	.word	0x9a014b2e
   169dc:	6013681b 	.word	0x6013681b
   169e0:	46bbe00c 	.word	0x46bbe00c
   169e4:	9c03e79e 	.word	0x9c03e79e
   169e8:	d1bd2c00 	.word	0xd1bd2c00
   169ec:	2300200c 	.word	0x2300200c
   169f0:	3000f8c8 	.word	0x3000f8c8
   169f4:	e8bdb005 	.word	0xe8bdb005
   169f8:	20738ff0 	.word	0x20738ff0
   169fc:	e8bdb005 	.word	0xe8bdb005
   16a00:	20168ff0 	.word	0x20168ff0
   16a04:	e8bdb005 	.word	0xe8bdb005
   16a08:	68918ff0 	.word	0x68918ff0
   16a0c:	7f00f5b1 	.word	0x7f00f5b1
   16a10:	f240d18e 	.word	0xf240d18e
   16a14:	68d02102 	.word	0x68d02102
   16a18:	d1894288 	.word	0xd1894288
   16a1c:	29006991 	.word	0x29006991
   16a20:	6868d086 	.word	0x6868d086
   16a24:	fd6af007 	.word	0xfd6af007
   16a28:	d0811c43 	.word	0xd0811c43
   16a2c:	e7814602 	.word	0xe7814602
   16a30:	290268a9 	.word	0x290268a9
   16a34:	1000f8c9 	.word	0x1000f8c9
   16a38:	2a05d006 	.word	0x2a05d006
   16a3c:	2a0ad0a2 	.word	0x2a0ad0a2
   16a40:	2201bf14 	.word	0x2201bf14
   16a44:	e79d2202 	.word	0xe79d2202
   16a48:	f8ca2102 	.word	0xf8ca2102
   16a4c:	e7f41000 	.word	0xe7f41000
   16a50:	68184b11 	.word	0x68184b11
   16a54:	d0d12800 	.word	0xd0d12800
   16a58:	4629e7c9 	.word	0x4629e7c9
   16a5c:	f1042210 	.word	0xf1042210
   16a60:	f00c0014 	.word	0xf00c0014
   16a64:	e794fb2f 	.word	0xe794fb2f
   16a68:	e7c02023 	.word	0xe7c02023
   16a6c:	f7f8202f 	.word	0xf7f8202f
   16a70:	68a2ff81 	.word	0x68a2ff81
   16a74:	60a23210 	.word	0x60a23210
   16a78:	f04fb917 	.word	0xf04fb917
   16a7c:	e7b630ff 	.word	0xe7b630ff
   16a80:	28006820 	.word	0x28006820
   16a84:	465ad0f9 	.word	0x465ad0f9
   16a88:	f00c4639 	.word	0xf00c4639
   16a8c:	e7f4faf1 	.word	0xe7f4faf1
   16a90:	20025bd2 	.word	0x20025bd2
   16a94:	200203dc 	.word	0x200203dc
   16a98:	200203d4 	.word	0x200203d4
   16a9c:	200203cc 	.word	0x200203cc
   16aa0:	200203d0 	.word	0x200203d0
   16aa4:	200203d8 	.word	0x200203d8

00016aa8 <ip_interface_freeaddrinfo>:
   16aa8:	4c0bb538 	.word	0x4c0bb538
   16aac:	2b026823 	.word	0x2b026823
   16ab0:	bd38d000 	.word	0xbd38d000
   16ab4:	4605b130 	.word	0x4605b130
   16ab8:	f0066940 	.word	0xf0066940
   16abc:	4628f85b 	.word	0x4628f85b
   16ac0:	f858f006 	.word	0xf858f006
   16ac4:	4a052300 	.word	0x4a052300
   16ac8:	60234905 	.word	0x60234905
   16acc:	68086013 	.word	0x68086013
   16ad0:	4038e8bd 	.word	0x4038e8bd
   16ad4:	bd02f7f9 	.word	0xbd02f7f9
   16ad8:	200203d8 	.word	0x200203d8
   16adc:	200203d4 	.word	0x200203d4
   16ae0:	200203e0 	.word	0x200203e0

00016ae4 <rpc_ip_event_handler>:
   16ae4:	4ff0e92d 	.word	0x4ff0e92d
   16ae8:	4310f401 	.word	0x4310f401
   16aec:	4f10f5b3 	.word	0x4f10f5b3
   16af0:	b0894605 	.word	0xb0894605
   16af4:	68c0460e 	.word	0x68c0460e
   16af8:	0c04d05e 	.word	0x0c04d05e
   16afc:	f7fe4620 	.word	0xf7fe4620
   16b00:	f248fe05 	.word	0xf248fe05
   16b04:	429e030d 	.word	0x429e030d
   16b08:	46a04607 	.word	0x46a04607
   16b0c:	2f00d041 	.word	0x2f00d041
   16b10:	4640d04e 	.word	0x4640d04e
   16b14:	462a4633 	.word	0x462a4633
   16b18:	f7fc4639 	.word	0xf7fc4639
   16b1c:	2800fbff 	.word	0x2800fbff
   16b20:	f248d042 	.word	0xf248d042
   16b24:	429e0307 	.word	0x429e0307
   16b28:	f248d961 	.word	0xf248d961
   16b2c:	429e030c 	.word	0x429e030c
   16b30:	816bf000 	.word	0x816bf000
   16b34:	8106f240 	.word	0x8106f240
   16b38:	0302f249 	.word	0x0302f249
   16b3c:	f000429e 	.word	0xf000429e
   16b40:	f249808c 	.word	0xf249808c
   16b44:	429e0303 	.word	0x429e0303
   16b48:	8180f000 	.word	0x8180f000
   16b4c:	0301f249 	.word	0x0301f249
   16b50:	d12d429e 	.word	0xd12d429e
   16b54:	f414683c 	.word	0xf414683c
   16b58:	f0001480 	.word	0xf0001480
   16b5c:	68ab81c3 	.word	0x68ab81c3
   16b60:	f2002b04 	.word	0xf2002b04
   16b64:	240081eb 	.word	0x240081eb
   16b68:	68294626 	.word	0x68294626
   16b6c:	e9cd686a 	.word	0xe9cd686a
   16b70:	e9cd6406 	.word	0xe9cd6406
   16b74:	69f81204 	.word	0x69f81204
   16b78:	6803a904 	.word	0x6803a904
   16b7c:	4798685b 	.word	0x4798685b
   16b80:	f0003001 	.word	0xf0003001
   16b84:	683b81cc 	.word	0x683b81cc
   16b88:	f4432000 	.word	0xf4432000
   16b8c:	603b3380 	.word	0x603b3380
   16b90:	f8dfe00b 	.word	0xf8dfe00b
   16b94:	682f9344 	.word	0x682f9344
   16b98:	3000f8d9 	.word	0x3000f8d9
   16b9c:	d0152b01 	.word	0xd0152b01
   16ba0:	4638b117 	.word	0x4638b117
   16ba4:	fc9af7f9 	.word	0xfc9af7f9
   16ba8:	b0092000 	.word	0xb0092000
   16bac:	8ff0e8bd 	.word	0x8ff0e8bd
   16bb0:	28006828 	.word	0x28006828
   16bb4:	e7f7d1f6 	.word	0xe7f7d1f6
   16bb8:	fd5ef7fe 	.word	0xfd5ef7fe
   16bbc:	f7fe4680 	.word	0xf7fe4680
   16bc0:	4607fda5 	.word	0x4607fda5
   16bc4:	2f004644 	.word	0x2f004644
   16bc8:	e7f1d1a3 	.word	0xe7f1d1a3
   16bcc:	2b00696b 	.word	0x2b00696b
   16bd0:	2b10d048 	.word	0x2b10d048
   16bd4:	4ababf96 	.word	0x4ababf96
   16bd8:	f852212d 	.word	0xf852212d
   16bdc:	23021023 	.word	0x23021023
   16be0:	60114ab8 	.word	0x60114ab8
   16be4:	3000f8c9 	.word	0x3000f8c9
   16be8:	d1da2f00 	.word	0xd1da2f00
   16bec:	f248e7dc 	.word	0xf248e7dc
   16bf0:	429e0306 	.word	0x429e0306
   16bf4:	80e6f080 	.word	0x80e6f080
   16bf8:	0302f248 	.word	0x0302f248
   16bfc:	f000429e 	.word	0xf000429e
   16c00:	d91880c8 	.word	0xd91880c8
   16c04:	0303f248 	.word	0x0303f248
   16c08:	f000429e 	.word	0xf000429e
   16c0c:	f2488112 	.word	0xf2488112
   16c10:	429e0305 	.word	0x429e0305
   16c14:	683bd1cc 	.word	0x683bd1cc
   16c18:	2b03b29b 	.word	0x2b03b29b
   16c1c:	696bd1c4 	.word	0x696bd1c4
   16c20:	f0002b00 	.word	0xf0002b00
   16c24:	2b10817e 	.word	0x2b10817e
   16c28:	813bf200 	.word	0x813bf200
   16c2c:	f8524aa4 	.word	0xf8524aa4
   16c30:	607b3023 	.word	0x607b3023
   16c34:	f248e7b8 	.word	0xf248e7b8
   16c38:	429e0301 	.word	0x429e0301
   16c3c:	683bd1b8 	.word	0x683bd1b8
   16c40:	d1b12b01 	.word	0xd1b12b01
   16c44:	28006968 	.word	0x28006968
   16c48:	8173f000 	.word	0x8173f000
   16c4c:	f2002810 	.word	0xf2002810
   16c50:	4b9b8128 	.word	0x4b9b8128
   16c54:	3020f853 	.word	0x3020f853
   16c58:	683be7eb 	.word	0x683be7eb
   16c5c:	2b07b29b 	.word	0x2b07b29b
   16c60:	e790d1a2 	.word	0xe790d1a2
   16c64:	601f4b98 	.word	0x601f4b98
   16c68:	016369ac 	.word	0x016369ac
   16c6c:	93034618 	.word	0x93034618
   16c70:	ff62f005 	.word	0xff62f005
   16c74:	28009002 	.word	0x28009002
   16c78:	8103f000 	.word	0x8103f000
   16c7c:	192800e5 	.word	0x192800e5
   16c80:	f0050080 	.word	0xf0050080
   16c84:	2800ff59 	.word	0x2800ff59
   16c88:	810df000 	.word	0x810df000
   16c8c:	d0782c00 	.word	0xd0782c00
   16c90:	0210f105 	.word	0x0210f105
   16c94:	93011883 	.word	0x93011883
   16c98:	24049b02 	.word	0x24049b02
   16c9c:	a23cf8df 	.word	0xa23cf8df
   16ca0:	b23cf8df 	.word	0xb23cf8df
   16ca4:	0810f100 	.word	0x0810f100
   16ca8:	0620f103 	.word	0x0620f103
   16cac:	220ae01d 	.word	0x220ae01d
   16cb0:	2c0cf848 	.word	0x2c0cf848
   16cb4:	0224f04f 	.word	0x0224f04f
   16cb8:	f8084640 	.word	0xf8084640
   16cbc:	f8282c10 	.word	0xf8282c10
   16cc0:	f8563c08 	.word	0xf8563c08
   16cc4:	f00c2c10 	.word	0xf00c2c10
   16cc8:	f856f9d3 	.word	0xf856f9d3
   16ccc:	f1083c10 	.word	0xf1083c10
   16cd0:	441c0808 	.word	0x441c0808
   16cd4:	f846193b 	.word	0xf846193b
   16cd8:	9b013c08 	.word	0x9b013c08
   16cdc:	6c04f846 	.word	0x6c04f846
   16ce0:	442c4598 	.word	0x442c4598
   16ce4:	0620f106 	.word	0x0620f106
   16ce8:	593bd045 	.word	0x593bd045
   16cec:	f846193a 	.word	0xf846193a
   16cf0:	68533c20 	.word	0x68533c20
   16cf4:	1000f8da 	.word	0x1000f8da
   16cf8:	bf142b02 	.word	0xbf142b02
   16cfc:	200a2002 	.word	0x200a2002
   16d00:	3000f8db 	.word	0x3000f8db
   16d04:	0107e946 	.word	0x0107e946
   16d08:	3c14f846 	.word	0x3c14f846
   16d0c:	f1a88a10 	.word	0xf1a88a10
   16d10:	f8460310 	.word	0xf8460310
   16d14:	8a550c10 	.word	0x8a550c10
   16d18:	3c0cf846 	.word	0x3c0cf846
   16d1c:	34144b6b 	.word	0x34144b6b
   16d20:	eb072804 	.word	0xeb072804
   16d24:	881b0104 	.word	0x881b0104
   16d28:	2210d1c1 	.word	0x2210d1c1
   16d2c:	f8282002 	.word	0xf8282002
   16d30:	f8483c08 	.word	0xf8483c08
   16d34:	f8080c0c 	.word	0xf8080c0c
   16d38:	f8562c10 	.word	0xf8562c10
   16d3c:	f1a82c10 	.word	0xf1a82c10
   16d40:	e7c00004 	.word	0xe7c00004
   16d44:	0308f248 	.word	0x0308f248
   16d48:	d04e429e 	.word	0xd04e429e
   16d4c:	0309f248 	.word	0x0309f248
   16d50:	f47f429e 	.word	0xf47f429e
   16d54:	683baf2d 	.word	0x683baf2d
   16d58:	2b0db29b 	.word	0x2b0db29b
   16d5c:	af24f47f 	.word	0xaf24f47f
   16d60:	28006968 	.word	0x28006968
   16d64:	af72f47f 	.word	0xaf72f47f
   16d68:	0c1b683b 	.word	0x0c1b683b
   16d6c:	f043041b 	.word	0xf043041b
   16d70:	603b030e 	.word	0x603b030e
   16d74:	2200e719 	.word	0x2200e719
   16d78:	1302e9dd 	.word	0x1302e9dd
   16d7c:	f843440b 	.word	0xf843440b
   16d80:	22022c04 	.word	0x22022c04
   16d84:	f8c94b52 	.word	0xf8c94b52
   16d88:	9a022000 	.word	0x9a022000
   16d8c:	601a2000 	.word	0x601a2000
   16d90:	683be70b 	.word	0x683be70b
   16d94:	f57f0099 	.word	0xf57f0099
   16d98:	683baf07 	.word	0x683baf07
   16d9c:	5300f023 	.word	0x5300f023
   16da0:	6968603b 	.word	0x6968603b
   16da4:	f0002800 	.word	0xf0002800
   16da8:	281080a2 	.word	0x281080a2
   16dac:	232dbf8e 	.word	0x232dbf8e
   16db0:	f8534b43 	.word	0xf8534b43
   16db4:	20003020 	.word	0x20003020
   16db8:	683b607b 	.word	0x683b607b
   16dbc:	2380f443 	.word	0x2380f443
   16dc0:	e6f2603b 	.word	0xe6f2603b
   16dc4:	029a683b 	.word	0x029a683b
   16dc8:	aeeef57f 	.word	0xaeeef57f
   16dcc:	2b00696b 	.word	0x2b00696b
   16dd0:	809cf000 	.word	0x809cf000
   16dd4:	f47f2b6b 	.word	0xf47f2b6b
   16dd8:	693baf26 	.word	0x693baf26
   16ddc:	f0002b01 	.word	0xf0002b01
   16de0:	230c80b1 	.word	0x230c80b1
   16de4:	607b2000 	.word	0x607b2000
   16de8:	683be6df 	.word	0x683be6df
   16dec:	2b06b29b 	.word	0x2b06b29b
   16df0:	aedaf47f 	.word	0xaedaf47f
   16df4:	28006968 	.word	0x28006968
   16df8:	af28f47f 	.word	0xaf28f47f
   16dfc:	0c1b683b 	.word	0x0c1b683b
   16e00:	f043041b 	.word	0xf043041b
   16e04:	603b0307 	.word	0x603b0307
   16e08:	683be6cf 	.word	0x683be6cf
   16e0c:	2b08b29b 	.word	0x2b08b29b
   16e10:	aecaf47f 	.word	0xaecaf47f
   16e14:	2b00696b 	.word	0x2b00696b
   16e18:	af05f47f 	.word	0xaf05f47f
   16e1c:	20014b2d 	.word	0x20014b2d
   16e20:	5024f843 	.word	0x5024f843
   16e24:	0c1b683b 	.word	0x0c1b683b
   16e28:	f043041b 	.word	0xf043041b
   16e2c:	603b0309 	.word	0x603b0309
   16e30:	683be6bb 	.word	0x683be6bb
   16e34:	f57f025b 	.word	0xf57f025b
   16e38:	6968aeb7 	.word	0x6968aeb7
   16e3c:	f47f2800 	.word	0xf47f2800
   16e40:	683baf05 	.word	0x683baf05
   16e44:	0300f443 	.word	0x0300f443
   16e48:	e6ae603b 	.word	0xe6ae603b
   16e4c:	f443683b 	.word	0xf443683b
   16e50:	603b2300 	.word	0x603b2300
   16e54:	f423683b 	.word	0xf423683b
   16e58:	603b1300 	.word	0x603b1300
   16e5c:	f423683b 	.word	0xf423683b
   16e60:	603b3300 	.word	0x603b3300
   16e64:	2b6c692b 	.word	0x2b6c692b
   16e68:	2b10d021 	.word	0x2b10d021
   16e6c:	232dbf8c 	.word	0x232dbf8c
   16e70:	f04f4a13 	.word	0xf04f4a13
   16e74:	bf980000 	.word	0xbf980000
   16e78:	3023f852 	.word	0x3023f852
   16e7c:	60bb607b 	.word	0x60bb607b
   16e80:	f005e693 	.word	0xf005e693
   16e84:	200cfe77 	.word	0x200cfe77
   16e88:	490e2302 	.word	0x490e2302
   16e8c:	60084a10 	.word	0x60084a10
   16e90:	9902682f 	.word	0x9902682f
   16e94:	f8c96011 	.word	0xf8c96011
   16e98:	2f003000 	.word	0x2f003000
   16e9c:	ae81f47f 	.word	0xae81f47f
   16ea0:	232de682 	.word	0x232de682
   16ea4:	220ce6c5 	.word	0x220ce6c5
   16ea8:	601a4b06 	.word	0x601a4b06
   16eac:	2239e769 	.word	0x2239e769
   16eb0:	2000683b 	.word	0x2000683b
   16eb4:	4380f043 	.word	0x4380f043
   16eb8:	607a603b 	.word	0x607a603b
   16ebc:	e67460ba 	.word	0xe67460ba
   16ec0:	0002465c 	.word	0x0002465c
   16ec4:	200203d4 	.word	0x200203d4
   16ec8:	200203e0 	.word	0x200203e0
   16ecc:	20025bd2 	.word	0x20025bd2
   16ed0:	200203dc 	.word	0x200203dc
   16ed4:	200203e4 	.word	0x200203e4
   16ed8:	200203d8 	.word	0x200203d8
   16edc:	200203d0 	.word	0x200203d0
   16ee0:	200203cc 	.word	0x200203cc
   16ee4:	f7f96828 	.word	0xf7f96828
   16ee8:	4620faf9 	.word	0x4620faf9
   16eec:	683be65d 	.word	0x683be65d
   16ef0:	3300f443 	.word	0x3300f443
   16ef4:	683b603b 	.word	0x683b603b
   16ef8:	1380f443 	.word	0x1380f443
   16efc:	683b603b 	.word	0x683b603b
   16f00:	041b0c1b 	.word	0x041b0c1b
   16f04:	0305f043 	.word	0x0305f043
   16f08:	e64e603b 	.word	0xe64e603b
   16f0c:	4a28683b 	.word	0x4a28683b
   16f10:	3300f443 	.word	0x3300f443
   16f14:	2001603b 	.word	0x2001603b
   16f18:	5024f842 	.word	0x5024f842
   16f1c:	2002e645 	.word	0x2002e645
   16f20:	683be643 	.word	0x683be643
   16f24:	0c1b2000 	.word	0x0c1b2000
   16f28:	f043041b 	.word	0xf043041b
   16f2c:	603b0304 	.word	0x603b0304
   16f30:	2302e63b 	.word	0x2302e63b
   16f34:	69ab603b 	.word	0x69ab603b
   16f38:	e63661bb 	.word	0xe63661bb
   16f3c:	b94c8a6c 	.word	0xb94c8a6c
   16f40:	e6124626 	.word	0xe6124626
   16f44:	683b220c 	.word	0x683b220c
   16f48:	f0432000 	.word	0xf0432000
   16f4c:	603b6300 	.word	0x603b6300
   16f50:	e62a607a 	.word	0xe62a607a
   16f54:	f0052024 	.word	0xf0052024
   16f58:	4606fdef 	.word	0x4606fdef
   16f5c:	8a6ab158 	.word	0x8a6ab158
   16f60:	d0182a10 	.word	0xd0182a10
   16f64:	d00a2a04 	.word	0xd00a2a04
   16f68:	f7f96828 	.word	0xf7f96828
   16f6c:	4630fab7 	.word	0x4630fab7
   16f70:	fe00f005 	.word	0xfe00f005
   16f74:	6828e618 	.word	0x6828e618
   16f78:	fab0f7f9 	.word	0xfab0f7f9
   16f7c:	2302e614 	.word	0x2302e614
   16f80:	60432410 	.word	0x60432410
   16f84:	8a2b7004 	.word	0x8a2b7004
   16f88:	0114f105 	.word	0x0114f105
   16f8c:	300c8103 	.word	0x300c8103
   16f90:	f86ef00c 	.word	0xf86ef00c
   16f94:	230ae5e9 	.word	0x230ae5e9
   16f98:	60432424 	.word	0x60432424
   16f9c:	8a2b7004 	.word	0x8a2b7004
   16fa0:	0114f105 	.word	0x0114f105
   16fa4:	30108103 	.word	0x30108103
   16fa8:	f862f00c 	.word	0xf862f00c
   16fac:	bf00e5dd 	.word	0xbf00e5dd
   16fb0:	200203e4 	.word	0x200203e4

00016fb4 <rpc_logobj_client_evt_handler>:
   16fb4:	f850b120 	.word	0xf850b120
   16fb8:	0c091b08 	.word	0x0c091b08
   16fbc:	b886f7fa 	.word	0xb886f7fa
   16fc0:	bf004770 	.word	0xbf004770

00016fc4 <rpc_logobj_client_init>:
   16fc4:	f0044801 	.word	0xf0044801
   16fc8:	bf00bcf1 	.word	0xbf00bcf1
   16fcc:	000246a0 	.word	0x000246a0

00016fd0 <rpc_logobj_client_request_alloc>:
   16fd0:	b5102300 	.word	0xb5102300
   16fd4:	9301b082 	.word	0x9301b082
   16fd8:	b170b961 	.word	0xb170b961
   16fdc:	aa014604 	.word	0xaa014604
   16fe0:	f0042009 	.word	0xf0042009
   16fe4:	b918ff1b 	.word	0xb918ff1b
   16fe8:	b10b9b01 	.word	0xb10b9b01
   16fec:	60233308 	.word	0x60233308
   16ff0:	bd10b002 	.word	0xbd10b002
   16ff4:	b002200f 	.word	0xb002200f
   16ff8:	200ebd10 	.word	0x200ebd10
   16ffc:	bd10b002 	.word	0xbd10b002

00017000 <rpc_logobj_client_request_send>:
   17000:	4370f401 	.word	0x4370f401
   17004:	4fe0f5b3 	.word	0x4fe0f5b3
   17008:	b160d10b 	.word	0xb160d10b
   1700c:	f8304603 	.word	0xf8304603
   17010:	20092c08 	.word	0x20092c08
   17014:	4101ea42 	.word	0x4101ea42
   17018:	1d08f843 	.word	0x1d08f843
   1701c:	f0044619 	.word	0xf0044619
   17020:	200fbee5 	.word	0x200fbee5
   17024:	200e4770 	.word	0x200e4770
   17028:	bf004770 	.word	0xbf004770

0001702c <rpc_logobj_client_message_free>:
   1702c:	f1a0b120 	.word	0xf1a0b120
   17030:	20090108 	.word	0x20090108
   17034:	bf24f004 	.word	0xbf24f004
   17038:	4770200e 	.word	0x4770200e

0001703c <rpc_logobj_client_data_free>:
   1703c:	4601b118 	.word	0x4601b118
   17040:	f0052009 	.word	0xf0052009
   17044:	200eb82f 	.word	0x200eb82f
   17048:	bf004770 	.word	0xbf004770

0001704c <datagram_handler_init>:
   1704c:	4604b510 	.word	0x4604b510
   17050:	f005200c 	.word	0xf005200c
   17054:	60e0fd71 	.word	0x60e0fd71
   17058:	e8bdb118 	.word	0xe8bdb118
   1705c:	f0004010 	.word	0xf0004010
   17060:	2004b8bd 	.word	0x2004b8bd
   17064:	bf00bd10 	.word	0xbf00bd10

00017068 <datagram_handler_put>:
   17068:	4606b570 	.word	0x4606b570
   1706c:	460d2014 	.word	0x460d2014
   17070:	fd62f005 	.word	0xfd62f005
   17074:	682bb178 	.word	0x682bb178
   17078:	60434604 	.word	0x60434604
   1707c:	4601686b 	.word	0x4601686b
   17080:	68eb6083 	.word	0x68eb6083
   17084:	68ab60c3 	.word	0x68ab60c3
   17088:	68f06103 	.word	0x68f06103
   1708c:	f8b0f000 	.word	0xf8b0f000
   17090:	6868b920 	.word	0x6868b920
   17094:	f04fbd70 	.word	0xf04fbd70
   17098:	bd7030ff 	.word	0xbd7030ff
   1709c:	f0054620 	.word	0xf0054620
   170a0:	f04ffd69 	.word	0xf04ffd69
   170a4:	bd7030ff 	.word	0xbd7030ff

000170a8 <datagram_handler_get>:
   170a8:	4606b5f0 	.word	0x4606b5f0
   170ac:	68c0b085 	.word	0x68c0b085
   170b0:	4617460c 	.word	0x4617460c
   170b4:	f8bcf000 	.word	0xf8bcf000
   170b8:	d0372800 	.word	0xd0372800
   170bc:	46056882 	.word	0x46056882
   170c0:	0300e9d4 	.word	0x0300e9d4
   170c4:	bf28429a 	.word	0xbf28429a
   170c8:	6062461a 	.word	0x6062461a
   170cc:	6869b110 	.word	0x6869b110
   170d0:	ffcef00b 	.word	0xffcef00b
   170d4:	b11868a0 	.word	0xb11868a0
   170d8:	b10b692b 	.word	0xb10b692b
   170dc:	b9e268ea 	.word	0xb9e268ea
   170e0:	60e32300 	.word	0x60e32300
   170e4:	d502073b 	.word	0xd502073b
   170e8:	b0056860 	.word	0xb0056860
   170ec:	68f0bdf0 	.word	0x68f0bdf0
   170f0:	f894f000 	.word	0xf894f000
   170f4:	28004605 	.word	0x28004605
   170f8:	e9d0d0f6 	.word	0xe9d0d0f6
   170fc:	69023101 	.word	0x69023101
   17100:	68c39300 	.word	0x68c39300
   17104:	1201e9cd 	.word	0x1201e9cd
   17108:	46689303 	.word	0x46689303
   1710c:	3101e9d6 	.word	0x3101e9d6
   17110:	46284798 	.word	0x46284798
   17114:	fd2ef005 	.word	0xfd2ef005
   17118:	68e3e7e6 	.word	0x68e3e7e6
   1711c:	bf28429a 	.word	0xbf28429a
   17120:	60e2461a 	.word	0x60e2461a
   17124:	f00b6929 	.word	0xf00b6929
   17128:	e7dbffa3 	.word	0xe7dbffa3
   1712c:	30fff04f 	.word	0x30fff04f
   17130:	bf00e7db 	.word	0xbf00e7db

00017134 <datagram_handler_available>:
   17134:	68c0b508 	.word	0x68c0b508
   17138:	f87af000 	.word	0xf87af000
   1713c:	6880b108 	.word	0x6880b108
   17140:	f04fbd08 	.word	0xf04fbd08
   17144:	bd0830ff 	.word	0xbd0830ff

00017148 <datagram_handler_flush>:
   17148:	4605b530 	.word	0x4605b530
   1714c:	b08568c0 	.word	0xb08568c0
   17150:	e01ab9a8 	.word	0xe01ab9a8
   17154:	f00068e8 	.word	0xf00068e8
   17158:	4604f861 	.word	0x4604f861
   1715c:	e9d0b170 	.word	0xe9d0b170
   17160:	e9d40101 	.word	0xe9d40101
   17164:	e9cd3203 	.word	0xe9cd3203
   17168:	e9cd0100 	.word	0xe9cd0100
   1716c:	e9d52302 	.word	0xe9d52302
   17170:	46683101 	.word	0x46683101
   17174:	46204798 	.word	0x46204798
   17178:	fcfcf005 	.word	0xfcfcf005
   1717c:	f00068e8 	.word	0xf00068e8
   17180:	2800f85d 	.word	0x2800f85d
   17184:	b005d1e6 	.word	0xb005d1e6
   17188:	2008bd30 	.word	0x2008bd30
   1718c:	bd30b005 	.word	0xbd30b005

00017190 <datagram_handler_free>:
   17190:	4605b530 	.word	0x4605b530
   17194:	b08568c0 	.word	0xb08568c0
   17198:	e01cb9a0 	.word	0xe01cb9a0
   1719c:	f83ef000 	.word	0xf83ef000
   171a0:	b1704604 	.word	0xb1704604
   171a4:	0101e9d0 	.word	0x0101e9d0
   171a8:	3203e9d4 	.word	0x3203e9d4
   171ac:	0100e9cd 	.word	0x0100e9cd
   171b0:	2302e9cd 	.word	0x2302e9cd
   171b4:	3101e9d5 	.word	0x3101e9d5
   171b8:	47984668 	.word	0x47984668
   171bc:	f0054620 	.word	0xf0054620
   171c0:	68e8fcd9 	.word	0x68e8fcd9
   171c4:	f83af000 	.word	0xf83af000
   171c8:	68e84604 	.word	0x68e84604
   171cc:	d1e52c00 	.word	0xd1e52c00
   171d0:	fcd0f005 	.word	0xfcd0f005
   171d4:	b00560ec 	.word	0xb00560ec
   171d8:	bf00bd30 	.word	0xbf00bd30

000171dc <linked_list_init>:
   171dc:	2300b128 	.word	0x2300b128
   171e0:	e9c06003 	.word	0xe9c06003
   171e4:	46183301 	.word	0x46183301
   171e8:	20074770 	.word	0x20074770
   171ec:	bf004770 	.word	0xbf004770

000171f0 <linked_list_push>:
   171f0:	46036802 	.word	0x46036802
   171f4:	d00e3201 	.word	0xd00e3201
   171f8:	600a2200 	.word	0x600a2200
   171fc:	b13a6802 	.word	0xb13a6802
   17200:	60116882 	.word	0x60116882
   17204:	681a6081 	.word	0x681a6081
   17208:	32012000 	.word	0x32012000
   1720c:	4770601a 	.word	0x4770601a
   17210:	1101e9c0 	.word	0x1101e9c0
   17214:	2004e7f7 	.word	0x2004e7f7
   17218:	bf004770 	.word	0xbf004770

0001721c <linked_list_pop>:
   1721c:	68004603 	.word	0x68004603
   17220:	6858b128 	.word	0x6858b128
   17224:	6801681a 	.word	0x6801681a
   17228:	60593a01 	.word	0x60593a01
   1722c:	4770601a 	.word	0x4770601a

00017230 <linked_list_peek>:
   17230:	b10b6803 	.word	0xb10b6803
   17234:	47706840 	.word	0x47706840
   17238:	47704618 	.word	0x47704618

0001723c <linked_list_size_get>:
   1723c:	47706800 	.word	0x47706800

00017240 <linked_list_get_next>:
   17240:	47706800 	.word	0x47706800

00017244 <rpc_transport_ipc_tx_init>:
   17244:	f0002800 	.word	0xf0002800
   17248:	290080b8 	.word	0x290080b8
   1724c:	80b5f000 	.word	0x80b5f000
   17250:	f0002a00 	.word	0xf0002a00
   17254:	e92d80b2 	.word	0xe92d80b2
   17258:	6a044ff0 	.word	0x6a044ff0
   1725c:	2c00b085 	.word	0x2c00b085
   17260:	80a6f000 	.word	0x80a6f000
   17264:	28006a40 	.word	0x28006a40
   17268:	80a2f000 	.word	0x80a2f000
   1726c:	4587f642 	.word	0x4587f642
   17270:	0a00f04f 	.word	0x0a00f04f
   17274:	42a84e55 	.word	0x42a84e55
   17278:	a000f886 	.word	0xa000f886
   1727c:	80a0f240 	.word	0x80a0f240
   17280:	f8df2708 	.word	0xf8df2708
   17284:	46209180 	.word	0x46209180
   17288:	460d4616 	.word	0x460d4616
   1728c:	46512244 	.word	0x46512244
   17290:	4000f8c9 	.word	0x4000f8c9
   17294:	ff16f00b 	.word	0xff16f00b
   17298:	2000f8d9 	.word	0x2000f8d9
   1729c:	0344f104 	.word	0x0344f104
   172a0:	8164f8df 	.word	0x8164f8df
   172a4:	a001f882 	.word	0xa001f882
   172a8:	a002f882 	.word	0xa002f882
   172ac:	a003f882 	.word	0xa003f882
   172b0:	46187017 	.word	0x46187017
   172b4:	46512244 	.word	0x46512244
   172b8:	3000f8c8 	.word	0x3000f8c8
   172bc:	ff02f00b 	.word	0xff02f00b
   172c0:	2000f8d8 	.word	0x2000f8d8
   172c4:	0388f104 	.word	0x0388f104
   172c8:	b140f8df 	.word	0xb140f8df
   172cc:	f8827017 	.word	0xf8827017
   172d0:	f882a001 	.word	0xf882a001
   172d4:	f882a002 	.word	0xf882a002
   172d8:	4618a003 	.word	0x4618a003
   172dc:	7200f44f 	.word	0x7200f44f
   172e0:	f8cb4651 	.word	0xf8cb4651
   172e4:	f00b3000 	.word	0xf00b3000
   172e8:	4b39feed 	.word	0x4b39feed
   172ec:	7c22f504 	.word	0x7c22f504
   172f0:	c000f8c3 	.word	0xc000f8c3
   172f4:	46604651 	.word	0x46604651
   172f8:	7200f44f 	.word	0x7200f44f
   172fc:	fee2f00b 	.word	0xfee2f00b
   17300:	5c20f44f 	.word	0x5c20f44f
   17304:	f04f2106 	.word	0xf04f2106
   17308:	f44f0e01 	.word	0xf44f0e01
   1730c:	f44f3001 	.word	0xf44f3001
   17310:	4b303288 	.word	0x4b303288
   17314:	6491f504 	.word	0x6491f504
   17318:	4c2f605c 	.word	0x4c2f605c
   1731c:	c008f8c3 	.word	0xc008f8c3
   17320:	f8a38199 	.word	0xf8a38199
   17324:	4619e000 	.word	0x4619e000
   17328:	4b2c611c 	.word	0x4b2c611c
   1732c:	c0e0f8df 	.word	0xc0e0f8df
   17330:	482b6120 	.word	0x482b6120
   17334:	f5036063 	.word	0xf5036063
   17338:	60a073c0 	.word	0x60a073c0
   1733c:	c000f8c4 	.word	0xc000f8c4
   17340:	60e34828 	.word	0x60e34828
   17344:	f0056162 	.word	0xf0056162
   17348:	2800fadd 	.word	0x2800fadd
   1734c:	f04fd132 	.word	0xf04fd132
   17350:	24200c02 	.word	0x24200c02
   17354:	1000f8d9 	.word	0x1000f8d9
   17358:	2000f8db 	.word	0x2000f8db
   1735c:	4b1c6029 	.word	0x4b1c6029
   17360:	1000f8d8 	.word	0x1000f8d8
   17364:	e0acf8df 	.word	0xe0acf8df
   17368:	60314d1f 	.word	0x60314d1f
   1736c:	2000f8ce 	.word	0x2000f8ce
   17370:	491e681b 	.word	0x491e681b
   17374:	7200f502 	.word	0x7200f502
   17378:	4e1d602a 	.word	0x4e1d602a
   1737c:	4d1e4a1d 	.word	0x4d1e4a1d
   17380:	f503600b 	.word	0xf503600b
   17384:	491d7300 	.word	0x491d7300
   17388:	80286033 	.word	0x80286033
   1738c:	c514f8c2 	.word	0xc514f8c2
   17390:	4b1b6809 	.word	0x4b1b6809
   17394:	99039103 	.word	0x99039103
   17398:	751cf8c2 	.word	0x751cf8c2
   1739c:	443b6819 	.word	0x443b6819
   173a0:	99029102 	.word	0x99029102
   173a4:	4524f8c2 	.word	0x4524f8c2
   173a8:	9301681b 	.word	0x9301681b
   173ac:	e0019b01 	.word	0xe0019b01
   173b0:	0007f24c 	.word	0x0007f24c
   173b4:	e8bdb005 	.word	0xe8bdb005
   173b8:	f24c8ff0 	.word	0xf24c8ff0
   173bc:	4770000e 	.word	0x4770000e
   173c0:	0004f24c 	.word	0x0004f24c
   173c4:	e8bdb005 	.word	0xe8bdb005
   173c8:	bf008ff0 	.word	0xbf008ff0
   173cc:	20026c03 	.word	0x20026c03
   173d0:	20020434 	.word	0x20020434
   173d4:	20020420 	.word	0x20020420
   173d8:	20020444 	.word	0x20020444
   173dc:	00040080 	.word	0x00040080
   173e0:	00040100 	.word	0x00040100
   173e4:	2002040c 	.word	0x2002040c
   173e8:	20020418 	.word	0x20020418
   173ec:	20020414 	.word	0x20020414
   173f0:	20020410 	.word	0x20020410
   173f4:	4002a000 	.word	0x4002a000
   173f8:	20025bd4 	.word	0x20025bd4
   173fc:	4002a514 	.word	0x4002a514
   17400:	4002a51c 	.word	0x4002a51c
   17404:	20020440 	.word	0x20020440
   17408:	20020438 	.word	0x20020438
   1740c:	2002043c 	.word	0x2002043c
   17410:	00080040 	.word	0x00080040
   17414:	2002041c 	.word	0x2002041c

00017418 <rpc_transport_ipc_tx_send>:
   17418:	d05f2800 	.word	0xd05f2800
   1741c:	4b33b470 	.word	0x4b33b470
   17420:	681ab083 	.word	0x681ab083
   17424:	42824b32 	.word	0x42824b32
   17428:	681bd81e 	.word	0x681bd81e
   1742c:	42834931 	.word	0x42834931
   17430:	d8036809 	.word	0xd8036809
   17434:	68244c30 	.word	0x68244c30
   17438:	d8474284 	.word	0xd8474284
   1743c:	d90e4281 	.word	0xd90e4281
   17440:	781b4b2e 	.word	0x781b4b2e
   17444:	d14c2b00 	.word	0xd14c2b00
   17448:	492d1a83 	.word	0x492d1a83
   1744c:	069b099e 	.word	0x069b099e
   17450:	4c2c680a 	.word	0x4c2c680a
   17454:	0103f04f 	.word	0x0103f04f
   17458:	0502f04f 	.word	0x0502f04f
   1745c:	f24cd014 	.word	0xf24cd014
   17460:	b0030010 	.word	0xb0030010
   17464:	4770bc70 	.word	0x4770bc70
   17468:	4298681b 	.word	0x4298681b
   1746c:	4a22d3f7 	.word	0x4a22d3f7
   17470:	42906812 	.word	0x42906812
   17474:	2101d2f3 	.word	0x2101d2f3
   17478:	4a231ac3 	.word	0x4a231ac3
   1747c:	069b099e 	.word	0x069b099e
   17480:	6812460d 	.word	0x6812460d
   17484:	d1ea4c21 	.word	0xd1ea4c21
   17488:	b2db6843 	.word	0xb2db6843
   1748c:	d120429d 	.word	0xd120429d
   17490:	eb022020 	.word	0xeb022020
   17494:	4d1e02c6 	.word	0x4d1e02c6
   17498:	882e6853 	.word	0x882e6853
   1749c:	ea43b29b 	.word	0xea43b29b
   174a0:	f0234306 	.word	0xf0234306
   174a4:	f04303ff 	.word	0xf04303ff
   174a8:	60530301 	.word	0x60530301
   174ac:	3801bf00 	.word	0x3801bf00
   174b0:	2201d1fc 	.word	0x2201d1fc
   174b4:	f8434b17 	.word	0xf8434b17
   174b8:	68222021 	.word	0x68222021
   174bc:	9201882b 	.word	0x9201882b
   174c0:	33019a01 	.word	0x33019a01
   174c4:	b003802b 	.word	0xb003802b
   174c8:	4770bc70 	.word	0x4770bc70
   174cc:	d9d24281 	.word	0xd9d24281
   174d0:	f24ce7b6 	.word	0xf24ce7b6
   174d4:	b0030007 	.word	0xb0030007
   174d8:	4770bc70 	.word	0x4770bc70
   174dc:	000ef24c 	.word	0x000ef24c
   174e0:	f24c4770 	.word	0xf24c4770
   174e4:	b003000f 	.word	0xb003000f
   174e8:	4770bc70 	.word	0x4770bc70
   174ec:	2002041c 	.word	0x2002041c
   174f0:	20020414 	.word	0x20020414
   174f4:	20020418 	.word	0x20020418
   174f8:	20020410 	.word	0x20020410
   174fc:	20026c03 	.word	0x20026c03
   17500:	20020440 	.word	0x20020440
   17504:	4002a00c 	.word	0x4002a00c
   17508:	20020438 	.word	0x20020438
   1750c:	4002a004 	.word	0x4002a004
   17510:	20025bd4 	.word	0x20025bd4
   17514:	4002a000 	.word	0x4002a000

00017518 <rpc_transport_ipc_tx_rpc_data_alloc>:
   17518:	781b4b18 	.word	0x781b4b18
   1751c:	b4f0bb63 	.word	0xb4f0bb63
   17520:	f0034a17 	.word	0xf0034a17
   17524:	681400ff 	.word	0x681400ff
   17528:	68254b16 	.word	0x68254b16
   1752c:	b1a5681e 	.word	0xb1a5681e
   17530:	00c14607 	.word	0x00c14607
   17534:	685a1863 	.word	0x685a1863
   17538:	2a03b2d2 	.word	0x2a03b2d2
   1753c:	609fd104 	.word	0x609fd104
   17540:	f022685a 	.word	0xf022685a
   17544:	605a02ff 	.word	0x605a02ff
   17548:	f012685a 	.word	0xf012685a
   1754c:	d1010fff 	.word	0xd1010fff
   17550:	b12b689b 	.word	0xb12b689b
   17554:	42a83001 	.word	0x42a83001
   17558:	2000d1eb 	.word	0x2000d1eb
   1755c:	4770bcf0 	.word	0x4770bcf0
   17560:	1080eb06 	.word	0x1080eb06
   17564:	60884421 	.word	0x60884421
   17568:	f0236843 	.word	0xf0236843
   1756c:	f04303ff 	.word	0xf04303ff
   17570:	60430302 	.word	0x60430302
   17574:	4770bcf0 	.word	0x4770bcf0
   17578:	47702000 	.word	0x47702000
   1757c:	20026c03 	.word	0x20026c03
   17580:	20020440 	.word	0x20020440
   17584:	2002043c 	.word	0x2002043c

00017588 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   17588:	4a15b4f0 	.word	0x4a15b4f0
   1758c:	68144b15 	.word	0x68144b15
   17590:	6825681e 	.word	0x6825681e
   17594:	2000b1ad 	.word	0x2000b1ad
   17598:	00c14607 	.word	0x00c14607
   1759c:	685a1863 	.word	0x685a1863
   175a0:	2a03b2d2 	.word	0x2a03b2d2
   175a4:	609fd104 	.word	0x609fd104
   175a8:	f022685a 	.word	0xf022685a
   175ac:	605a02ff 	.word	0x605a02ff
   175b0:	f012685a 	.word	0xf012685a
   175b4:	d1010fff 	.word	0xd1010fff
   175b8:	b12b689b 	.word	0xb12b689b
   175bc:	42853001 	.word	0x42853001
   175c0:	2000d1eb 	.word	0x2000d1eb
   175c4:	4770bcf0 	.word	0x4770bcf0
   175c8:	1080eb06 	.word	0x1080eb06
   175cc:	60884421 	.word	0x60884421
   175d0:	f0236843 	.word	0xf0236843
   175d4:	f04303ff 	.word	0xf04303ff
   175d8:	60430301 	.word	0x60430301
   175dc:	4770bcf0 	.word	0x4770bcf0
   175e0:	20020438 	.word	0x20020438
   175e4:	20020434 	.word	0x20020434

000175e8 <rpc_transport_ipc_tx_data_alloc>:
   175e8:	781b4b03 	.word	0x781b4b03
   175ec:	f005b90b 	.word	0xf005b90b
   175f0:	2000bacd 	.word	0x2000bacd
   175f4:	bf004770 	.word	0xbf004770
   175f8:	20026c03 	.word	0x20026c03

000175fc <null_handler_init>:
   175fc:	47702000 	.word	0x47702000

00017600 <null_handler_put>:
   17600:	460cb510 	.word	0x460cb510
   17604:	3101e9d0 	.word	0x3101e9d0
   17608:	47984620 	.word	0x47984620
   1760c:	bd106860 	.word	0xbd106860

00017610 <null_handler_get>:
   17610:	30fff04f 	.word	0x30fff04f
   17614:	bf004770 	.word	0xbf004770

00017618 <null_handler_available>:
   17618:	30fff04f 	.word	0x30fff04f
   1761c:	bf004770 	.word	0xbf004770

00017620 <null_handler_flush>:
   17620:	47702000 	.word	0x47702000

00017624 <null_handler_free>:
   17624:	bf004770 	.word	0xbf004770

00017628 <rpc_gnss_event_handler>:
   17628:	4b5db5f0 	.word	0x4b5db5f0
   1762c:	68004606 	.word	0x68004606
   17630:	6802881b 	.word	0x6802881b
   17634:	ebb34c5b 	.word	0xebb34c5b
   17638:	b0854f12 	.word	0xb0854f12
   1763c:	6020460d 	.word	0x6020460d
   17640:	f505d033 	.word	0xf505d033
   17644:	33ff433f 	.word	0x33ff433f
   17648:	2b02b29b 	.word	0x2b02b29b
   1764c:	4c56d80e 	.word	0x4c56d80e
   17650:	075a6823 	.word	0x075a6823
   17654:	6823d40d 	.word	0x6823d40d
   17658:	d503079b 	.word	0xd503079b
   1765c:	0303f244 	.word	0x0303f244
   17660:	d006429d 	.word	0xd006429d
   17664:	b1086830 	.word	0xb1086830
   17668:	fa72f7f9 	.word	0xfa72f7f9
   1766c:	b0052000 	.word	0xb0052000
   17670:	2002bdf0 	.word	0x2002bdf0
   17674:	fa60f005 	.word	0xfa60f005
   17678:	28004607 	.word	0x28004607
   1767c:	2302d0f2 	.word	0x2302d0f2
   17680:	68318005 	.word	0x68318005
   17684:	48496872 	.word	0x48496872
   17688:	0086e88d 	.word	0x0086e88d
   1768c:	93036800 	.word	0x93036800
   17690:	46696803 	.word	0x46696803
   17694:	4798685b 	.word	0x4798685b
   17698:	d06d3001 	.word	0xd06d3001
   1769c:	68232000 	.word	0x68232000
   176a0:	3380f443 	.word	0x3380f443
   176a4:	b0056023 	.word	0xb0056023
   176a8:	4c3fbdf0 	.word	0x4c3fbdf0
   176ac:	01da6823 	.word	0x01da6823
   176b0:	f242d523 	.word	0xf242d523
   176b4:	42991302 	.word	0x42991302
   176b8:	6843d11f 	.word	0x6843d11f
   176bc:	6823b91b 	.word	0x6823b91b
   176c0:	7300f043 	.word	0x7300f043
   176c4:	68236023 	.word	0x68236023
   176c8:	7380f023 	.word	0x7380f023
   176cc:	68236023 	.word	0x68236023
   176d0:	d430025b 	.word	0xd430025b
   176d4:	0305f242 	.word	0x0305f242
   176d8:	d12c429d 	.word	0xd12c429d
   176dc:	02996823 	.word	0x02996823
   176e0:	6843d529 	.word	0x6843d529
   176e4:	d1552b00 	.word	0xd1552b00
   176e8:	f4236823 	.word	0xf4236823
   176ec:	60231300 	.word	0x60231300
   176f0:	f4436823 	.word	0xf4436823
   176f4:	60233300 	.word	0x60233300
   176f8:	6823e01d 	.word	0x6823e01d
   176fc:	d50e025f 	.word	0xd50e025f
   17700:	1303f242 	.word	0x1303f242
   17704:	d10a429d 	.word	0xd10a429d
   17708:	b91b6843 	.word	0xb91b6843
   1770c:	f4436823 	.word	0xf4436823
   17710:	60230300 	.word	0x60230300
   17714:	f4236823 	.word	0xf4236823
   17718:	60230380 	.word	0x60230380
   1771c:	f242e00b 	.word	0xf242e00b
   17720:	429d0301 	.word	0x429d0301
   17724:	6843d10a 	.word	0x6843d10a
   17728:	6823b92b 	.word	0x6823b92b
   1772c:	041b0c1b 	.word	0x041b0c1b
   17730:	0302f043 	.word	0x0302f043
   17734:	f7f96023 	.word	0xf7f96023
   17738:	e782fa0b 	.word	0xe782fa0b
   1773c:	0304f242 	.word	0x0304f242
   17740:	d1c7429d 	.word	0xd1c7429d
   17744:	b9936843 	.word	0xb9936843
   17748:	f4436823 	.word	0xf4436823
   1774c:	60230300 	.word	0x60230300
   17750:	b29b6823 	.word	0xb29b6823
   17754:	68232b03 	.word	0x68232b03
   17758:	b29bd016 	.word	0xb29bd016
   1775c:	d1d92b04 	.word	0xd1d92b04
   17760:	0c1b6823 	.word	0x0c1b6823
   17764:	f043041b 	.word	0xf043041b
   17768:	60230302 	.word	0x60230302
   1776c:	6823e7d2 	.word	0x6823e7d2
   17770:	2b03b29b 	.word	0x2b03b29b
   17774:	e7f3d1ce 	.word	0xe7f3d1ce
   17778:	f0054638 	.word	0xf0054638
   1777c:	6830f9fb 	.word	0x6830f9fb
   17780:	f47f2800 	.word	0xf47f2800
   17784:	e771af71 	.word	0xe771af71
   17788:	041b0c1b 	.word	0x041b0c1b
   1778c:	0304f043 	.word	0x0304f043
   17790:	e7bf6023 	.word	0xe7bf6023
   17794:	f4236823 	.word	0xf4236823
   17798:	60231300 	.word	0x60231300
   1779c:	bf00e7cb 	.word	0xbf00e7cb
   177a0:	20025bd6 	.word	0x20025bd6
   177a4:	20020404 	.word	0x20020404
   177a8:	2002045c 	.word	0x2002045c
   177ac:	20020460 	.word	0x20020460

000177b0 <gnss_interface_write>:
   177b0:	43f0e92d 	.word	0x43f0e92d
   177b4:	b09f4a75 	.word	0xb09f4a75
   177b8:	9d264290 	.word	0x9d264290
   177bc:	80d3f040 	.word	0x80d3f040
   177c0:	f0002900 	.word	0xf0002900
   177c4:	2d0080c8 	.word	0x2d0080c8
   177c8:	80c5f000 	.word	0x80c5f000
   177cc:	2a029a27 	.word	0x2a029a27
   177d0:	80c1f040 	.word	0x80c1f040
   177d4:	68224c6e 	.word	0x68224c6e
   177d8:	2a02b292 	.word	0x2a02b292
   177dc:	6822d004 	.word	0x6822d004
   177e0:	2a04b292 	.word	0x2a04b292
   177e4:	80c5f040 	.word	0x80c5f040
   177e8:	f1000798 	.word	0xf1000798
   177ec:	682080c8 	.word	0x682080c8
   177f0:	3000f410 	.word	0x3000f410
   177f4:	6822d065 	.word	0x6822d065
   177f8:	f422882b 	.word	0xf422882b
   177fc:	60223200 	.word	0x60223200
   17800:	3b016822 	.word	0x3b016822
   17804:	1200f442 	.word	0x1200f442
   17808:	2b076022 	.word	0x2b076022
   1780c:	80a3f200 	.word	0x80a3f200
   17810:	f003e8df 	.word	0xf003e8df
   17814:	696e7378 	.word	0x696e7378
   17818:	045f5a64 	.word	0x045f5a64
   1781c:	a9024608 	.word	0xa9024608
   17820:	ff1ef7fb 	.word	0xff1ef7fb
   17824:	46682172 	.word	0x46682172
   17828:	f960f7f9 	.word	0xf960f7f9
   1782c:	98004605 	.word	0x98004605
   17830:	d16c2d00 	.word	0xd16c2d00
   17834:	d06a2800 	.word	0xd06a2800
   17838:	0605f241 	.word	0x0605f241
   1783c:	0c49f04f 	.word	0x0c49f04f
   17840:	f04f2272 	.word	0xf04f2272
   17844:	f04f0e76 	.word	0xf04f0e76
   17848:	f04f0943 	.word	0xf04f0943
   1784c:	4f510854 	.word	0x4f510854
   17850:	883ba91e 	.word	0x883ba91e
   17854:	c00ff880 	.word	0xc00ff880
   17858:	b29b3301 	.word	0xb29b3301
   1785c:	4c03ea46 	.word	0x4c03ea46
   17860:	cd74f841 	.word	0xcd74f841
   17864:	71857145 	.word	0x71857145
   17868:	720571c5 	.word	0x720571c5
   1786c:	72857245 	.word	0x72857245
   17870:	710272c5 	.word	0x710272c5
   17874:	900cf880 	.word	0x900cf880
   17878:	800df880 	.word	0x800df880
   1787c:	e00ef880 	.word	0xe00ef880
   17880:	803b6800 	.word	0x803b6800
   17884:	fbf4f00b 	.word	0xfbf4f00b
   17888:	46314b43 	.word	0x46314b43
   1788c:	601d9800 	.word	0x601d9800
   17890:	f940f7f9 	.word	0xf940f7f9
   17894:	d1472800 	.word	0xd1472800
   17898:	02996823 	.word	0x02996823
   1789c:	4e3fd50d 	.word	0x4e3fd50d
   178a0:	e0014d3a 	.word	0xe0014d3a
   178a4:	d14f2800 	.word	0xd14f2800
   178a8:	46284631 	.word	0x46284631
   178ac:	ffcef7f7 	.word	0xffcef7f7
   178b0:	029a6823 	.word	0x029a6823
   178b4:	2800d4f6 	.word	0x2800d4f6
   178b8:	6823d146 	.word	0x6823d146
   178bc:	d53e039b 	.word	0xd53e039b
   178c0:	b01f2000 	.word	0xb01f2000
   178c4:	83f0e8bd 	.word	0x83f0e8bd
   178c8:	a9024608 	.word	0xa9024608
   178cc:	fe80f7fb 	.word	0xfe80f7fb
   178d0:	4608e7a8 	.word	0x4608e7a8
   178d4:	f7fba902 	.word	0xf7fba902
   178d8:	e7a3fea3 	.word	0xe7a3fea3
   178dc:	a9024608 	.word	0xa9024608
   178e0:	fe5cf7fb 	.word	0xfe5cf7fb
   178e4:	4608e79e 	.word	0x4608e79e
   178e8:	f7fba902 	.word	0xf7fba902
   178ec:	e799fe33 	.word	0xe799fe33
   178f0:	a9024608 	.word	0xa9024608
   178f4:	fdfcf7fb 	.word	0xfdfcf7fb
   178f8:	4608e794 	.word	0x4608e794
   178fc:	f7fba902 	.word	0xf7fba902
   17900:	e78ffda5 	.word	0xe78ffda5
   17904:	a9024608 	.word	0xa9024608
   17908:	fd7ef7fb 	.word	0xfd7ef7fb
   1790c:	6803e78a 	.word	0x6803e78a
   17910:	4618b11b 	.word	0x4618b11b
   17914:	f91cf7f9 	.word	0xf91cf7f9
   17918:	f7f99800 	.word	0xf7f99800
   1791c:	2023f911 	.word	0x2023f911
   17920:	f828f7f8 	.word	0xf828f7f8
   17924:	30fff04f 	.word	0x30fff04f
   17928:	f4236823 	.word	0xf4236823
   1792c:	60231300 	.word	0x60231300
   17930:	f4436823 	.word	0xf4436823
   17934:	60233300 	.word	0x60233300
   17938:	e8bdb01f 	.word	0xe8bdb01f
   1793c:	200583f0 	.word	0x200583f0
   17940:	f4436823 	.word	0xf4436823
   17944:	60233300 	.word	0x60233300
   17948:	f814f7f8 	.word	0xf814f7f8
   1794c:	30fff04f 	.word	0x30fff04f
   17950:	e8bdb01f 	.word	0xe8bdb01f
   17954:	201683f0 	.word	0x201683f0
   17958:	f80cf7f8 	.word	0xf80cf7f8
   1795c:	30fff04f 	.word	0x30fff04f
   17960:	e8bdb01f 	.word	0xe8bdb01f
   17964:	200983f0 	.word	0x200983f0
   17968:	f804f7f8 	.word	0xf804f7f8
   1796c:	30fff04f 	.word	0x30fff04f
   17970:	2039e7a7 	.word	0x2039e7a7
   17974:	fffef7f7 	.word	0xfffef7f7
   17978:	30fff04f 	.word	0x30fff04f
   1797c:	202de7a1 	.word	0x202de7a1
   17980:	fff8f7f7 	.word	0xfff8f7f7
   17984:	30fff04f 	.word	0x30fff04f
   17988:	bf00e79b 	.word	0xbf00e79b
   1798c:	49765443 	.word	0x49765443
   17990:	2002045c 	.word	0x2002045c
   17994:	20025bd6 	.word	0x20025bd6
   17998:	20020404 	.word	0x20020404
   1799c:	2002a1fc 	.word	0x2002a1fc

000179a0 <gnss_interface_read>:
   179a0:	4ff0e92d 	.word	0x4ff0e92d
   179a4:	b0b74c4a 	.word	0xb0b74c4a
   179a8:	f04042a0 	.word	0xf04042a0
   179ac:	468881ec 	.word	0x468881ec
   179b0:	f0002900 	.word	0xf0002900
   179b4:	2ad781e2 	.word	0x2ad781e2
   179b8:	81dff240 	.word	0x81dff240
   179bc:	46994d45 	.word	0x46994d45
   179c0:	b29b682b 	.word	0xb29b682b
   179c4:	d0042b04 	.word	0xd0042b04
   179c8:	b29b682b 	.word	0xb29b682b
   179cc:	f0402b02 	.word	0xf0402b02
   179d0:	210281e0 	.word	0x210281e0
   179d4:	240020b6 	.word	0x240020b6
   179d8:	f10d682b 	.word	0xf10d682b
   179dc:	f423020e 	.word	0xf423020e
   179e0:	602b3380 	.word	0x602b3380
   179e4:	a0f4f8df 	.word	0xa0f4f8df
   179e8:	4f3bab08 	.word	0x4f3bab08
   179ec:	90054e38 	.word	0x90054e38
   179f0:	93049107 	.word	0x93049107
   179f4:	ea099206 	.word	0xea099206
   179f8:	f8da0b01 	.word	0xf8da0b01
   179fc:	464a0000 	.word	0x464a0000
   17a00:	a9046803 	.word	0xa9046803
   17a04:	4798689b 	.word	0x4798689b
   17a08:	da112800 	.word	0xda112800
   17a0c:	0f00f1bb 	.word	0x0f00f1bb
   17a10:	682bd138 	.word	0x682bd138
   17a14:	d4f003d8 	.word	0xd4f003d8
   17a18:	e7eeb10c 	.word	0xe7eeb10c
   17a1c:	4639b930 	.word	0x4639b930
   17a20:	f7f74630 	.word	0xf7f74630
   17a24:	682bff13 	.word	0x682bff13
   17a28:	d5f703d9 	.word	0xd5f703d9
   17a2c:	e7e44604 	.word	0xe7e44604
   17a30:	0202f244 	.word	0x0202f244
   17a34:	300ef8bd 	.word	0x300ef8bd
   17a38:	d0394293 	.word	0xd0394293
   17a3c:	0201f244 	.word	0x0201f244
   17a40:	d04d4293 	.word	0xd04d4293
   17a44:	0203f244 	.word	0x0203f244
   17a48:	f0404293 	.word	0xf0404293
   17a4c:	22018196 	.word	0x22018196
   17a50:	9b082414 	.word	0x9b082414
   17a54:	2000f888 	.word	0x2000f888
   17a58:	f8c89a09 	.word	0xf8c89a09
   17a5c:	f8bd3008 	.word	0xf8bd3008
   17a60:	e9c83028 	.word	0xe9c83028
   17a64:	f8da2303 	.word	0xf8da2303
   17a68:	68030000 	.word	0x68030000
   17a6c:	479868db 	.word	0x479868db
   17a70:	dd032800 	.word	0xdd032800
   17a74:	f443682b 	.word	0xf443682b
   17a78:	602b3380 	.word	0x602b3380
   17a7c:	b0374620 	.word	0xb0374620
   17a80:	8ff0e8bd 	.word	0x8ff0e8bd
   17a84:	46031c42 	.word	0x46031c42
   17a88:	b93cd1d2 	.word	0xb93cd1d2
   17a8c:	2023461c 	.word	0x2023461c
   17a90:	ff70f7f7 	.word	0xff70f7f7
   17a94:	b0374620 	.word	0xb0374620
   17a98:	8ff0e8bd 	.word	0x8ff0e8bd
   17a9c:	46209001 	.word	0x46209001
   17aa0:	ff68f7f7 	.word	0xff68f7f7
   17aa4:	461c9b01 	.word	0x461c9b01
   17aa8:	b0374620 	.word	0xb0374620
   17aac:	8ff0e8bd 	.word	0x8ff0e8bd
   17ab0:	f00ba808 	.word	0xf00ba808
   17ab4:	2302fabb 	.word	0x2302fabb
   17ab8:	b2a41c44 	.word	0xb2a41c44
   17abc:	3b08f808 	.word	0x3b08f808
   17ac0:	a9084622 	.word	0xa9084622
   17ac4:	f00b4640 	.word	0xf00b4640
   17ac8:	3408fad3 	.word	0x3408fad3
   17acc:	bf00e7cb 	.word	0xbf00e7cb
   17ad0:	49765443 	.word	0x49765443
   17ad4:	2002045c 	.word	0x2002045c
   17ad8:	2002a1fc 	.word	0x2002a1fc
   17adc:	20020460 	.word	0x20020460
   17ae0:	a8092401 	.word	0xa8092401
   17ae4:	e9c8c80f 	.word	0xe9c8c80f
   17ae8:	e9c80102 	.word	0xe9c80102
   17aec:	990d2304 	.word	0x990d2304
   17af0:	f8889a0e 	.word	0xf8889a0e
   17af4:	9b0f4000 	.word	0x9b0f4000
   17af8:	1018f8c8 	.word	0x1018f8c8
   17afc:	f8c89910 	.word	0xf8c89910
   17b00:	f8c8201c 	.word	0xf8c8201c
   17b04:	f89d3020 	.word	0xf89d3020
   17b08:	f8dd205d 	.word	0xf8dd205d
   17b0c:	f8c8304d 	.word	0xf8c8304d
   17b10:	f8dd1024 	.word	0xf8dd1024
   17b14:	f8881051 	.word	0xf8881051
   17b18:	f8dd2044 	.word	0xf8dd2044
   17b1c:	f8c82055 	.word	0xf8c82055
   17b20:	f8dd3034 	.word	0xf8dd3034
   17b24:	f8c83059 	.word	0xf8c83059
   17b28:	f8bd1038 	.word	0xf8bd1038
   17b2c:	f8c81044 	.word	0xf8c81044
   17b30:	f8c8203c 	.word	0xf8c8203c
   17b34:	f8dd3040 	.word	0xf8dd3040
   17b38:	f89d2046 	.word	0xf89d2046
   17b3c:	f8a8304a 	.word	0xf8a8304a
   17b40:	f8881028 	.word	0xf8881028
   17b44:	f8c8302e 	.word	0xf8c8302e
   17b48:	f89d202a 	.word	0xf89d202a
   17b4c:	f89d004b 	.word	0xf89d004b
   17b50:	9b18204c 	.word	0x9b18204c
   17b54:	406cf89d 	.word	0x406cf89d
   17b58:	2002ea40 	.word	0x2002ea40
   17b5c:	206bf89d 	.word	0x206bf89d
   17b60:	210ff3c3 	.word	0x210ff3c3
   17b64:	ea429b1d 	.word	0xea429b1d
   17b68:	f8a82204 	.word	0xf8a82204
   17b6c:	f8a80030 	.word	0xf8a80030
   17b70:	f8bd104a 	.word	0xf8bd104a
   17b74:	f3c3105e 	.word	0xf3c3105e
   17b78:	f8a8230f 	.word	0xf8a8230f
   17b7c:	f89d2056 	.word	0xf89d2056
   17b80:	f8a82060 	.word	0xf8a82060
   17b84:	f8dd3062 	.word	0xf8dd3062
   17b88:	f8a83063 	.word	0xf8a83063
   17b8c:	f8881046 	.word	0xf8881046
   17b90:	f8bd2048 	.word	0xf8bd2048
   17b94:	f89d2068 	.word	0xf89d2068
   17b98:	f8c81067 	.word	0xf8c81067
   17b9c:	f89d304c 	.word	0xf89d304c
   17ba0:	f888306a 	.word	0xf888306a
   17ba4:	f8a81050 	.word	0xf8a81050
   17ba8:	f8882052 	.word	0xf8882052
   17bac:	f8bd3054 	.word	0xf8bd3054
   17bb0:	f8dd3072 	.word	0xf8dd3072
   17bb4:	f89d106d 	.word	0xf89d106d
   17bb8:	f8c82071 	.word	0xf8c82071
   17bbc:	f8881058 	.word	0xf8881058
   17bc0:	f89d205c 	.word	0xf89d205c
   17bc4:	f8dd1074 	.word	0xf8dd1074
   17bc8:	f8a82077 	.word	0xf8a82077
   17bcc:	f89d305e 	.word	0xf89d305e
   17bd0:	f888307b 	.word	0xf888307b
   17bd4:	f8c81060 	.word	0xf8c81060
   17bd8:	f8882064 	.word	0xf8882064
   17bdc:	f89d3068 	.word	0xf89d3068
   17be0:	f89d3080 	.word	0xf89d3080
   17be4:	9a22107f 	.word	0x9a22107f
   17be8:	0094f89d 	.word	0x0094f89d
   17bec:	2103ea41 	.word	0x2103ea41
   17bf0:	3093f89d 	.word	0x3093f89d
   17bf4:	220ff3c2 	.word	0x220ff3c2
   17bf8:	106ef8a8 	.word	0x106ef8a8
   17bfc:	107cf8bd 	.word	0x107cf8bd
   17c00:	2300ea43 	.word	0x2300ea43
   17c04:	207af8a8 	.word	0x207af8a8
   17c08:	207ef89d 	.word	0x207ef89d
   17c0c:	3086f8a8 	.word	0x3086f8a8
   17c10:	3081f8dd 	.word	0x3081f8dd
   17c14:	106af8a8 	.word	0x106af8a8
   17c18:	206cf888 	.word	0x206cf888
   17c1c:	2086f8bd 	.word	0x2086f8bd
   17c20:	1085f89d 	.word	0x1085f89d
   17c24:	3070f8c8 	.word	0x3070f8c8
   17c28:	3088f89d 	.word	0x3088f89d
   17c2c:	1074f888 	.word	0x1074f888
   17c30:	2076f8a8 	.word	0x2076f8a8
   17c34:	3078f888 	.word	0x3078f888
   17c38:	3090f8bd 	.word	0x3090f8bd
   17c3c:	108bf8dd 	.word	0x108bf8dd
   17c40:	208ff89d 	.word	0x208ff89d
   17c44:	107cf8c8 	.word	0x107cf8c8
   17c48:	2080f888 	.word	0x2080f888
   17c4c:	1092f89d 	.word	0x1092f89d
   17c50:	2095f8dd 	.word	0x2095f8dd
   17c54:	3082f8a8 	.word	0x3082f8a8
   17c58:	3099f89d 	.word	0x3099f89d
   17c5c:	1084f888 	.word	0x1084f888
   17c60:	2088f8c8 	.word	0x2088f8c8
   17c64:	308cf888 	.word	0x308cf888
   17c68:	009af8bd 	.word	0x009af8bd
   17c6c:	f89d9b27 	.word	0xf89d9b27
   17c70:	f89d40a8 	.word	0xf89d40a8
   17c74:	f3c320a7 	.word	0xf3c320a7
   17c78:	9b2c210f 	.word	0x9b2c210f
   17c7c:	2204ea42 	.word	0x2204ea42
   17c80:	1092f8a8 	.word	0x1092f8a8
   17c84:	109cf89d 	.word	0x109cf89d
   17c88:	209ef8a8 	.word	0x209ef8a8
   17c8c:	230ff3c3 	.word	0x230ff3c3
   17c90:	209ff8dd 	.word	0x209ff8dd
   17c94:	008ef8a8 	.word	0x008ef8a8
   17c98:	30aaf8a8 	.word	0x30aaf8a8
   17c9c:	1090f888 	.word	0x1090f888
   17ca0:	30a3f89d 	.word	0x30a3f89d
   17ca4:	10a4f8bd 	.word	0x10a4f8bd
   17ca8:	2094f8c8 	.word	0x2094f8c8
   17cac:	20a6f89d 	.word	0x20a6f89d
   17cb0:	3098f888 	.word	0x3098f888
   17cb4:	30a9f8dd 	.word	0x30a9f8dd
   17cb8:	109af8a8 	.word	0x109af8a8
   17cbc:	209cf888 	.word	0x209cf888
   17cc0:	20aef8bd 	.word	0x20aef8bd
   17cc4:	10adf89d 	.word	0x10adf89d
   17cc8:	30a0f8c8 	.word	0x30a0f8c8
   17ccc:	30b0f89d 	.word	0x30b0f89d
   17cd0:	10a4f888 	.word	0x10a4f888
   17cd4:	20a6f8a8 	.word	0x20a6f8a8
   17cd8:	30a8f888 	.word	0x30a8f888
   17cdc:	30b8f8bd 	.word	0x30b8f8bd
   17ce0:	10b3f8dd 	.word	0x10b3f8dd
   17ce4:	20b7f89d 	.word	0x20b7f89d
   17ce8:	10acf8c8 	.word	0x10acf8c8
   17cec:	20b0f888 	.word	0x20b0f888
   17cf0:	30b2f8a8 	.word	0x30b2f8a8
   17cf4:	30bcf89d 	.word	0x30bcf89d
   17cf8:	10bbf89d 	.word	0x10bbf89d
   17cfc:	00d0f89d 	.word	0x00d0f89d
   17d00:	ea419a31 	.word	0xea419a31
   17d04:	f89d2103 	.word	0xf89d2103
   17d08:	f89d30cf 	.word	0xf89d30cf
   17d0c:	ea4340ba 	.word	0xea4340ba
   17d10:	f3c22300 	.word	0xf3c22300
   17d14:	f8a8220f 	.word	0xf8a8220f
   17d18:	f8a810b6 	.word	0xf8a810b6
   17d1c:	f88830ce 	.word	0xf88830ce
   17d20:	f8a840b4 	.word	0xf8a840b4
   17d24:	f8bd20c2 	.word	0xf8bd20c2
   17d28:	f89d20c2 	.word	0xf89d20c2
   17d2c:	f89d10c1 	.word	0xf89d10c1
   17d30:	f8dd30c4 	.word	0xf8dd30c4
   17d34:	f88800bd 	.word	0xf88800bd
   17d38:	f8a810bc 	.word	0xf8a810bc
   17d3c:	f8c820be 	.word	0xf8c820be
   17d40:	f88800b8 	.word	0xf88800b8
   17d44:	f8bd30c0 	.word	0xf8bd30c0
   17d48:	f8dd30cc 	.word	0xf8dd30cc
   17d4c:	f89d10c7 	.word	0xf89d10c7
   17d50:	f8c820cb 	.word	0xf8c820cb
   17d54:	f88810c4 	.word	0xf88810c4
   17d58:	f89d20c8 	.word	0xf89d20c8
   17d5c:	f8dd10ce 	.word	0xf8dd10ce
   17d60:	f8a820d1 	.word	0xf8a820d1
   17d64:	f89d30ca 	.word	0xf89d30ca
   17d68:	f88830d5 	.word	0xf88830d5
   17d6c:	f8c810cc 	.word	0xf8c810cc
   17d70:	f88820d0 	.word	0xf88820d0
   17d74:	24d830d4 	.word	0x24d830d4
   17d78:	2016e675 	.word	0x2016e675
   17d7c:	fdfaf7f7 	.word	0xfdfaf7f7
   17d80:	34fff04f 	.word	0x34fff04f
   17d84:	2009e67a 	.word	0x2009e67a
   17d88:	fdf4f7f7 	.word	0xfdf4f7f7
   17d8c:	34fff04f 	.word	0x34fff04f
   17d90:	2039e674 	.word	0x2039e674
   17d94:	fdeef7f7 	.word	0xfdeef7f7
   17d98:	34fff04f 	.word	0x34fff04f
   17d9c:	bf00e66e 	.word	0xbf00e66e

00017da0 <gnss_interface_setopt>:
   17da0:	47f0e92d 	.word	0x47f0e92d
   17da4:	1402f241 	.word	0x1402f241
   17da8:	b0864222 	.word	0xb0864222
   17dac:	d0044d9b 	.word	0xd0044d9b
   17db0:	b2a4682c 	.word	0xb2a4682c
   17db4:	f0402c02 	.word	0xf0402c02
   17db8:	682c8104 	.word	0x682c8104
   17dbc:	f1000264 	.word	0xf1000264
   17dc0:	f5b18127 	.word	0xf5b18127
   17dc4:	f0407f01 	.word	0xf0407f01
   17dc8:	4995811d 	.word	0x4995811d
   17dcc:	f0404288 	.word	0xf0404288
   17dd0:	3a018113 	.word	0x3a018113
   17dd4:	f2002a08 	.word	0xf2002a08
   17dd8:	e8df80ec 	.word	0xe8df80ec
   17ddc:	0075f012 	.word	0x0075f012
   17de0:	00c200d8 	.word	0x00c200d8
   17de4:	008100cc 	.word	0x008100cc
   17de8:	0098008c 	.word	0x0098008c
   17dec:	000900af 	.word	0x000900af
   17df0:	2a019a0e 	.word	0x2a019a0e
   17df4:	80ddf040 	.word	0x80ddf040
   17df8:	1603f241 	.word	0x1603f241
   17dfc:	46372240 	.word	0x46372240
   17e00:	9202781b 	.word	0x9202781b
   17e04:	3015f88d 	.word	0x3015f88d
   17e08:	2112682b 	.word	0x2112682b
   17e0c:	0380f443 	.word	0x0380f443
   17e10:	602b4668 	.word	0x602b4668
   17e14:	fe6af7f8 	.word	0xfe6af7f8
   17e18:	98004604 	.word	0x98004604
   17e1c:	f0402c00 	.word	0xf0402c00
   17e20:	280080d6 	.word	0x280080d6
   17e24:	80d3f000 	.word	0x80d3f000
   17e28:	f04f2212 	.word	0xf04f2212
   17e2c:	f04f0876 	.word	0xf04f0876
   17e30:	f04f0e49 	.word	0xf04f0e49
   17e34:	f04f0a43 	.word	0xf04f0a43
   17e38:	f8df0954 	.word	0xf8df0954
   17e3c:	a906c1ec 	.word	0xa906c1ec
   17e40:	3000f8bc 	.word	0x3000f8bc
   17e44:	800ef880 	.word	0x800ef880
   17e48:	b29b3301 	.word	0xb29b3301
   17e4c:	4603ea46 	.word	0x4603ea46
   17e50:	6d14f841 	.word	0x6d14f841
   17e54:	71847144 	.word	0x71847144
   17e58:	720471c4 	.word	0x720471c4
   17e5c:	72847244 	.word	0x72847244
   17e60:	710272c4 	.word	0x710272c4
   17e64:	a00cf880 	.word	0xa00cf880
   17e68:	900df880 	.word	0x900df880
   17e6c:	e00ff880 	.word	0xe00ff880
   17e70:	81b8f8df 	.word	0x81b8f8df
   17e74:	f8ac6800 	.word	0xf8ac6800
   17e78:	f00b3000 	.word	0xf00b3000
   17e7c:	4639f8f9 	.word	0x4639f8f9
   17e80:	f8c89800 	.word	0xf8c89800
   17e84:	f7f84000 	.word	0xf7f84000
   17e88:	2800fe45 	.word	0x2800fe45
   17e8c:	80aaf040 	.word	0x80aaf040
   17e90:	4e634f64 	.word	0x4e634f64
   17e94:	46304639 	.word	0x46304639
   17e98:	fcd8f7f7 	.word	0xfcd8f7f7
   17e9c:	f414682c 	.word	0xf414682c
   17ea0:	d1f70480 	.word	0xd1f70480
   17ea4:	0000f8d8 	.word	0x0000f8d8
   17ea8:	f7f8b118 	.word	0xf7f8b118
   17eac:	f8c8fe51 	.word	0xf8c8fe51
   17eb0:	682b4000 	.word	0x682b4000
   17eb4:	d576021b 	.word	0xd576021b
   17eb8:	682b2000 	.word	0x682b2000
   17ebc:	0300f423 	.word	0x0300f423
   17ec0:	b006602b 	.word	0xb006602b
   17ec4:	87f0e8bd 	.word	0x87f0e8bd
   17ec8:	2a029a0e 	.word	0x2a029a0e
   17ecc:	2208d171 	.word	0x2208d171
   17ed0:	1603f241 	.word	0x1603f241
   17ed4:	9202881b 	.word	0x9202881b
   17ed8:	300ff8ad 	.word	0x300ff8ad
   17edc:	e7934637 	.word	0xe7934637
   17ee0:	2a019a0e 	.word	0x2a019a0e
   17ee4:	f241d165 	.word	0xf241d165
   17ee8:	781b1603 	.word	0x781b1603
   17eec:	f88d9202 	.word	0xf88d9202
   17ef0:	4637300c 	.word	0x4637300c
   17ef4:	9a0ee788 	.word	0x9a0ee788
   17ef8:	d15a2a01 	.word	0xd15a2a01
   17efc:	f2412202 	.word	0xf2412202
   17f00:	781b1603 	.word	0x781b1603
   17f04:	f88d9202 	.word	0xf88d9202
   17f08:	4637300d 	.word	0x4637300d
   17f0c:	682ae77c 	.word	0x682ae77c
   17f10:	2a02b292 	.word	0x2a02b292
   17f14:	9a0ed155 	.word	0x9a0ed155
   17f18:	d14a2a04 	.word	0xd14a2a04
   17f1c:	f2412101 	.word	0xf2412101
   17f20:	682a0604 	.word	0x682a0604
   17f24:	0c136818 	.word	0x0c136818
   17f28:	f043041b 	.word	0xf043041b
   17f2c:	f8cd0303 	.word	0xf8cd0303
   17f30:	602b0009 	.word	0x602b0009
   17f34:	1008f88d 	.word	0x1008f88d
   17f38:	e7654637 	.word	0xe7654637
   17f3c:	b29b682b 	.word	0xb29b682b
   17f40:	d13e2b04 	.word	0xd13e2b04
   17f44:	f2412300 	.word	0xf2412300
   17f48:	f88d0604 	.word	0xf88d0604
   17f4c:	f88d3008 	.word	0xf88d3008
   17f50:	f88d3009 	.word	0xf88d3009
   17f54:	f88d300a 	.word	0xf88d300a
   17f58:	f88d300b 	.word	0xf88d300b
   17f5c:	4637300c 	.word	0x4637300c
   17f60:	9a0ee752 	.word	0x9a0ee752
   17f64:	d1242a01 	.word	0xd1242a01
   17f68:	2b01781b 	.word	0x2b01781b
   17f6c:	f241d121 	.word	0xf241d121
   17f70:	46371603 	.word	0x46371603
   17f74:	9a0ee748 	.word	0x9a0ee748
   17f78:	d11a2a02 	.word	0xd11a2a02
   17f7c:	f2412220 	.word	0xf2412220
   17f80:	881b1603 	.word	0x881b1603
   17f84:	f8ad9202 	.word	0xf8ad9202
   17f88:	46373013 	.word	0x46373013
   17f8c:	9a0ee73c 	.word	0x9a0ee73c
   17f90:	d10e2a02 	.word	0xd10e2a02
   17f94:	f2412210 	.word	0xf2412210
   17f98:	881b1603 	.word	0x881b1603
   17f9c:	f8ad9202 	.word	0xf8ad9202
   17fa0:	46373011 	.word	0x46373011
   17fa4:	200ee730 	.word	0x200ee730
   17fa8:	fce4f7f7 	.word	0xfce4f7f7
   17fac:	30fff04f 	.word	0x30fff04f
   17fb0:	2016e783 	.word	0x2016e783
   17fb4:	fcdef7f7 	.word	0xfcdef7f7
   17fb8:	30fff04f 	.word	0x30fff04f
   17fbc:	e8bdb006 	.word	0xe8bdb006
   17fc0:	200e87f0 	.word	0x200e87f0
   17fc4:	fcd6f7f7 	.word	0xfcd6f7f7
   17fc8:	30fff04f 	.word	0x30fff04f
   17fcc:	6803e779 	.word	0x6803e779
   17fd0:	4618b11b 	.word	0x4618b11b
   17fd4:	fdbcf7f8 	.word	0xfdbcf7f8
   17fd8:	f7f89800 	.word	0xf7f89800
   17fdc:	2023fdb1 	.word	0x2023fdb1
   17fe0:	fcc8f7f7 	.word	0xfcc8f7f7
   17fe4:	200e682b 	.word	0x200e682b
   17fe8:	0380f423 	.word	0x0380f423
   17fec:	f7f7602b 	.word	0xf7f7602b
   17ff0:	f04ffcc1 	.word	0xf04ffcc1
   17ff4:	e76430ff 	.word	0xe76430ff
   17ff8:	f7f72009 	.word	0xf7f72009
   17ffc:	f04ffcbb 	.word	0xf04ffcbb
   18000:	e75e30ff 	.word	0xe75e30ff
   18004:	f7f7202a 	.word	0xf7f7202a
   18008:	f04ffcb5 	.word	0xf04ffcb5
   1800c:	e75830ff 	.word	0xe75830ff
   18010:	f7f72073 	.word	0xf7f72073
   18014:	f04ffcaf 	.word	0xf04ffcaf
   18018:	e75230ff 	.word	0xe75230ff
   1801c:	2002045c 	.word	0x2002045c
   18020:	49765443 	.word	0x49765443
   18024:	2002a1fc 	.word	0x2002a1fc
   18028:	20025bd6 	.word	0x20025bd6
   1802c:	20020404 	.word	0x20020404

00018030 <gnss_interface_getopt>:
   18030:	4ff0e92d 	.word	0x4ff0e92d
   18034:	b0874c81 	.word	0xb0874c81
   18038:	46986825 	.word	0x46986825
   1803c:	2d02b2ad 	.word	0x2d02b2ad
   18040:	f0409b10 	.word	0xf0409b10
   18044:	682580dc 	.word	0x682580dc
   18048:	f10003ee 	.word	0xf10003ee
   1804c:	682580f0 	.word	0x682580f0
   18050:	f10001ed 	.word	0xf10001ed
   18054:	f5b180e6 	.word	0xf5b180e6
   18058:	f0407f01 	.word	0xf0407f01
   1805c:	497880d6 	.word	0x497880d6
   18060:	f0404288 	.word	0xf0404288
   18064:	f1b880d8 	.word	0xf1b880d8
   18068:	d00b0f00 	.word	0xd00b0f00
   1806c:	1e57b153 	.word	0x1e57b153
   18070:	d8072f05 	.word	0xd8072f05
   18074:	f007e8df 	.word	0xf007e8df
   18078:	0f030f0f 	.word	0x0f030f0f
   1807c:	681b0303 	.word	0x681b0303
   18080:	d00b2b01 	.word	0xd00b2b01
   18084:	f7f72016 	.word	0xf7f72016
   18088:	f04ffc75 	.word	0xf04ffc75
   1808c:	462835ff 	.word	0x462835ff
   18090:	e8bdb007 	.word	0xe8bdb007
   18094:	681b8ff0 	.word	0x681b8ff0
   18098:	d1f32b02 	.word	0xd1f32b02
   1809c:	22126823 	.word	0x22126823
   180a0:	7380f043 	.word	0x7380f043
   180a4:	a8012100 	.word	0xa8012100
   180a8:	f00b6023 	.word	0xf00b6023
   180ac:	2112f80b 	.word	0x2112f80b
   180b0:	f7f84668 	.word	0xf7f84668
   180b4:	4605fd1b 	.word	0x4605fd1b
   180b8:	2d009800 	.word	0x2d009800
   180bc:	808af040 	.word	0x808af040
   180c0:	f0002800 	.word	0xf0002800
   180c4:	f2418087 	.word	0xf2418087
   180c8:	f04f1602 	.word	0xf04f1602
   180cc:	22120e49 	.word	0x22120e49
   180d0:	0976f04f 	.word	0x0976f04f
   180d4:	0b43f04f 	.word	0x0b43f04f
   180d8:	0a54f04f 	.word	0x0a54f04f
   180dc:	c168f8df 	.word	0xc168f8df
   180e0:	e00ff880 	.word	0xe00ff880
   180e4:	3000f8bc 	.word	0x3000f8bc
   180e8:	900ef880 	.word	0x900ef880
   180ec:	b29b3301 	.word	0xb29b3301
   180f0:	4e03ea46 	.word	0x4e03ea46
   180f4:	e004f8cd 	.word	0xe004f8cd
   180f8:	71857145 	.word	0x71857145
   180fc:	720571c5 	.word	0x720571c5
   18100:	72857245 	.word	0x72857245
   18104:	a90172c5 	.word	0xa90172c5
   18108:	f8807102 	.word	0xf8807102
   1810c:	f880b00c 	.word	0xf880b00c
   18110:	f8dfa00d 	.word	0xf8dfa00d
   18114:	68009138 	.word	0x68009138
   18118:	3000f8ac 	.word	0x3000f8ac
   1811c:	ffa8f00a 	.word	0xffa8f00a
   18120:	98004631 	.word	0x98004631
   18124:	5000f8c9 	.word	0x5000f8c9
   18128:	fcf4f7f8 	.word	0xfcf4f7f8
   1812c:	d15c2800 	.word	0xd15c2800
   18130:	4d434e44 	.word	0x4d434e44
   18134:	46284631 	.word	0x46284631
   18138:	fb88f7f7 	.word	0xfb88f7f7
   1813c:	01db6823 	.word	0x01db6823
   18140:	f8d9d4f8 	.word	0xf8d9d4f8
   18144:	b1d80000 	.word	0xb1d80000
   18148:	f0156825 	.word	0xf0156825
   1814c:	d00f7500 	.word	0xd00f7500
   18150:	d8372f05 	.word	0xd8372f05
   18154:	f007e8df 	.word	0xf007e8df
   18158:	2b26201a 	.word	0x2b26201a
   1815c:	25000331 	.word	0x25000331
   18160:	f8887b43 	.word	0xf8887b43
   18164:	f7f83000 	.word	0xf7f83000
   18168:	2300fcf3 	.word	0x2300fcf3
   1816c:	3000f8c9 	.word	0x3000f8c9
   18170:	f0236823 	.word	0xf0236823
   18174:	60237300 	.word	0x60237300
   18178:	b0074628 	.word	0xb0074628
   1817c:	8ff0e8bd 	.word	0x8ff0e8bd
   18180:	46056823 	.word	0x46056823
   18184:	7300f023 	.word	0x7300f023
   18188:	e7f56023 	.word	0xe7f56023
   1818c:	300ff8b0 	.word	0x300ff8b0
   18190:	f8a82500 	.word	0xf8a82500
   18194:	e7e63000 	.word	0xe7e63000
   18198:	3011f8b0 	.word	0x3011f8b0
   1819c:	f8a82500 	.word	0xf8a82500
   181a0:	e7e03000 	.word	0xe7e03000
   181a4:	25007b83 	.word	0x25007b83
   181a8:	3000f888 	.word	0x3000f888
   181ac:	f8b0e7db 	.word	0xf8b0e7db
   181b0:	25003013 	.word	0x25003013
   181b4:	3000f8a8 	.word	0x3000f8a8
   181b8:	7b03e7d5 	.word	0x7b03e7d5
   181bc:	f8882500 	.word	0xf8882500
   181c0:	e7d03000 	.word	0xe7d03000
   181c4:	f7f72016 	.word	0xf7f72016
   181c8:	f04ffbd5 	.word	0xf04ffbd5
   181cc:	f8d935ff 	.word	0xf8d935ff
   181d0:	e7c80000 	.word	0xe7c80000
   181d4:	b11b6803 	.word	0xb11b6803
   181d8:	f7f84618 	.word	0xf7f84618
   181dc:	9800fcb9 	.word	0x9800fcb9
   181e0:	fcaef7f8 	.word	0xfcaef7f8
   181e4:	f7f72023 	.word	0xf7f72023
   181e8:	6823fbc5 	.word	0x6823fbc5
   181ec:	f023200e 	.word	0xf023200e
   181f0:	60237380 	.word	0x60237380
   181f4:	35fff04f 	.word	0x35fff04f
   181f8:	fbbcf7f7 	.word	0xfbbcf7f7
   181fc:	200ee747 	.word	0x200ee747
   18200:	fbb8f7f7 	.word	0xfbb8f7f7
   18204:	35fff04f 	.word	0x35fff04f
   18208:	202ae741 	.word	0x202ae741
   1820c:	fbb2f7f7 	.word	0xfbb2f7f7
   18210:	35fff04f 	.word	0x35fff04f
   18214:	2009e73b 	.word	0x2009e73b
   18218:	fbacf7f7 	.word	0xfbacf7f7
   1821c:	35fff04f 	.word	0x35fff04f
   18220:	2073e735 	.word	0x2073e735
   18224:	fba6f7f7 	.word	0xfba6f7f7
   18228:	35fff04f 	.word	0x35fff04f
   1822c:	2005e72f 	.word	0x2005e72f
   18230:	fba0f7f7 	.word	0xfba0f7f7
   18234:	35fff04f 	.word	0x35fff04f
   18238:	bf00e729 	.word	0xbf00e729
   1823c:	2002045c 	.word	0x2002045c
   18240:	49765443 	.word	0x49765443
   18244:	2002a1fc 	.word	0x2002a1fc
   18248:	20025bd6 	.word	0x20025bd6
   1824c:	20020404 	.word	0x20020404

00018250 <gnss_interface_init>:
   18250:	b5382100 	.word	0xb5382100
   18254:	4d0a4c09 	.word	0x4d0a4c09
   18258:	480a6822 	.word	0x480a6822
   1825c:	402a4b0a 	.word	0x402a4b0a
   18260:	80016022 	.word	0x80016022
   18264:	f7f86019 	.word	0xf7f86019
   18268:	b928fc3b 	.word	0xb928fc3b
   1826c:	402b6823 	.word	0x402b6823
   18270:	0301f043 	.word	0x0301f043
   18274:	bd386023 	.word	0xbd386023
   18278:	bd382003 	.word	0xbd382003
   1827c:	2002045c 	.word	0x2002045c
   18280:	ffff0000 	.word	0xffff0000
   18284:	20025bd6 	.word	0x20025bd6
   18288:	20020404 	.word	0x20020404

0001828c <gnss_interface_open>:
   1828c:	b5102801 	.word	0xb5102801
   18290:	f5b2d120 	.word	0xf5b2d120
   18294:	d11d7f01 	.word	0xd11d7f01
   18298:	d11b2902 	.word	0xd11b2902
   1829c:	68234c13 	.word	0x68234c13
   182a0:	2b01b29b 	.word	0x2b01b29b
   182a4:	6823d11c 	.word	0x6823d11c
   182a8:	0c1b4608 	.word	0x0c1b4608
   182ac:	f043041b 	.word	0xf043041b
   182b0:	22000302 	.word	0x22000302
   182b4:	6023490e 	.word	0x6023490e
   182b8:	fc14f7fa 	.word	0xfc14f7fa
   182bc:	60104a0d 	.word	0x60104a0d
   182c0:	6823b170 	.word	0x6823b170
   182c4:	f4436802 	.word	0xf4436802
   182c8:	68123300 	.word	0x68123300
   182cc:	47906023 	.word	0x47906023
   182d0:	bd104809 	.word	0xbd104809
   182d4:	f7f72016 	.word	0xf7f72016
   182d8:	f04ffb4d 	.word	0xf04ffb4d
   182dc:	bd1030ff 	.word	0xbd1030ff
   182e0:	f7f7200e 	.word	0xf7f7200e
   182e4:	f04ffb47 	.word	0xf04ffb47
   182e8:	bd1030ff 	.word	0xbd1030ff
   182ec:	2002045c 	.word	0x2002045c
   182f0:	00010d01 	.word	0x00010d01
   182f4:	20020460 	.word	0x20020460
   182f8:	49765443 	.word	0x49765443

000182fc <gnss_interface_close>:
   182fc:	4b13b530 	.word	0x4b13b530
   18300:	4298b083 	.word	0x4298b083
   18304:	4c12d11c 	.word	0x4c12d11c
   18308:	b29b6823 	.word	0xb29b6823
   1830c:	d00f2b04 	.word	0xd00f2b04
   18310:	68284d10 	.word	0x68284d10
   18314:	f7fab118 	.word	0xf7fab118
   18318:	2300fc05 	.word	0x2300fc05
   1831c:	2000602b 	.word	0x2000602b
   18320:	0c1b6823 	.word	0x0c1b6823
   18324:	f043041b 	.word	0xf043041b
   18328:	60230301 	.word	0x60230301
   1832c:	bd30b003 	.word	0xbd30b003
   18330:	22082300 	.word	0x22082300
   18334:	f44f9300 	.word	0xf44f9300
   18338:	f7f97101 	.word	0xf7f97101
   1833c:	e7e7fb87 	.word	0xe7e7fb87
   18340:	f7f72009 	.word	0xf7f72009
   18344:	f04ffb17 	.word	0xf04ffb17
   18348:	e7ef30ff 	.word	0xe7ef30ff
   1834c:	49765443 	.word	0x49765443
   18350:	2002045c 	.word	0x2002045c
   18354:	20020460 	.word	0x20020460

00018358 <rpc_dfu_event_handler>:
   18358:	4a08b508 	.word	0x4a08b508
   1835c:	881268c1 	.word	0x881268c1
   18360:	ebb24603 	.word	0xebb24603
   18364:	d0054f11 	.word	0xd0054f11
   18368:	b1106800 	.word	0xb1106800
   1836c:	f81ef004 	.word	0xf81ef004
   18370:	bd082000 	.word	0xbd082000
   18374:	20014a02 	.word	0x20014a02
   18378:	bd086013 	.word	0xbd086013
   1837c:	20025bd8 	.word	0x20025bd8
   18380:	20020408 	.word	0x20020408

00018384 <mfu_interface_init>:
   18384:	b5102300 	.word	0xb5102300
   18388:	49094808 	.word	0x49094808
   1838c:	4c0a4a09 	.word	0x4c0a4a09
   18390:	600b8003 	.word	0x600b8003
   18394:	60236013 	.word	0x60236013
   18398:	ffd2f003 	.word	0xffd2f003
   1839c:	2301b910 	.word	0x2301b910
   183a0:	bd106023 	.word	0xbd106023
   183a4:	30fff04f 	.word	0x30fff04f
   183a8:	bf00bd10 	.word	0xbf00bd10
   183ac:	20025bd8 	.word	0x20025bd8
   183b0:	20020408 	.word	0x20020408
   183b4:	2002046c 	.word	0x2002046c
   183b8:	20020464 	.word	0x20020464

000183bc <mfu_interface_open>:
   183bc:	b5082801 	.word	0xb5082801
   183c0:	f240d10b 	.word	0xf240d10b
   183c4:	429a2303 	.word	0x429a2303
   183c8:	4b09d107 	.word	0x4b09d107
   183cc:	2a01681a 	.word	0x2a01681a
   183d0:	2202d109 	.word	0x2202d109
   183d4:	4807601a 	.word	0x4807601a
   183d8:	2016bd08 	.word	0x2016bd08
   183dc:	facaf7f7 	.word	0xfacaf7f7
   183e0:	30fff04f 	.word	0x30fff04f
   183e4:	f7f7bd08 	.word	0xf7f7bd08
   183e8:	f04ffac5 	.word	0xf04ffac5
   183ec:	bd0830ff 	.word	0xbd0830ff
   183f0:	20020464 	.word	0x20020464
   183f4:	49765432 	.word	0x49765432

000183f8 <mfu_interface_close>:
   183f8:	4c32b5f0 	.word	0x4c32b5f0
   183fc:	6823b083 	.word	0x6823b083
   18400:	2a011e9a 	.word	0x2a011e9a
   18404:	2b03d857 	.word	0x2b03d857
   18408:	2301d004 	.word	0x2301d004
   1840c:	60232000 	.word	0x60232000
   18410:	bdf0b003 	.word	0xbdf0b003
   18414:	46682100 	.word	0x46682100
   18418:	ff98f003 	.word	0xff98f003
   1841c:	28004603 	.word	0x28004603
   18420:	2104d13d 	.word	0x2104d13d
   18424:	98004e28 	.word	0x98004e28
   18428:	72018832 	.word	0x72018832
   1842c:	b2923201 	.word	0xb2923201
   18430:	f0410411 	.word	0xf0410411
   18434:	4d250106 	.word	0x4d250106
   18438:	710360c1 	.word	0x710360c1
   1843c:	71837143 	.word	0x71837143
   18440:	724371c3 	.word	0x724371c3
   18444:	72c37283 	.word	0x72c37283
   18448:	80322106 	.word	0x80322106
   1844c:	f003602b 	.word	0xf003602b
   18450:	b9d8ff91 	.word	0xb9d8ff91
   18454:	33fff04f 	.word	0x33fff04f
   18458:	4627ae02 	.word	0x4627ae02
   1845c:	3d04f846 	.word	0x3d04f846
   18460:	4631e004 	.word	0x4631e004
   18464:	f7f74638 	.word	0xf7f74638
   18468:	b9f0f9f1 	.word	0xb9f0f9f1
   1846c:	28006828 	.word	0x28006828
   18470:	6905d0f7 	.word	0x6905d0f7
   18474:	ff92f003 	.word	0xff92f003
   18478:	d0c62d00 	.word	0xd0c62d00
   1847c:	20084b14 	.word	0x20084b14
   18480:	f7f7601d 	.word	0xf7f7601d
   18484:	f04ffa77 	.word	0xf04ffa77
   18488:	e7c130ff 	.word	0xe7c130ff
   1848c:	68039800 	.word	0x68039800
   18490:	4618b11b 	.word	0x4618b11b
   18494:	ff8af003 	.word	0xff8af003
   18498:	f0039800 	.word	0xf0039800
   1849c:	200cff7f 	.word	0x200cff7f
   184a0:	fa68f7f7 	.word	0xfa68f7f7
   184a4:	30fff04f 	.word	0x30fff04f
   184a8:	203ce7b2 	.word	0x203ce7b2
   184ac:	fa62f7f7 	.word	0xfa62f7f7
   184b0:	30fff04f 	.word	0x30fff04f
   184b4:	2001e7ac 	.word	0x2001e7ac
   184b8:	fa5cf7f7 	.word	0xfa5cf7f7
   184bc:	30fff04f 	.word	0x30fff04f
   184c0:	bf00e7a6 	.word	0xbf00e7a6
   184c4:	20020464 	.word	0x20020464
   184c8:	20025bd8 	.word	0x20025bd8
   184cc:	20020408 	.word	0x20020408
   184d0:	20020468 	.word	0x20020468

000184d4 <mfu_interface_sendto>:
   184d4:	47f0e92d 	.word	0x47f0e92d
   184d8:	46154e5a 	.word	0x46154e5a
   184dc:	b0826833 	.word	0xb0826833
   184e0:	2a011e9a 	.word	0x2a011e9a
   184e4:	80a7f200 	.word	0x80a7f200
   184e8:	2900460f 	.word	0x2900460f
   184ec:	809df000 	.word	0x809df000
   184f0:	f0002d00 	.word	0xf0002d00
   184f4:	2b02809a 	.word	0x2b02809a
   184f8:	d04e46e8 	.word	0xd04e46e8
   184fc:	46294640 	.word	0x46294640
   18500:	ff24f003 	.word	0xff24f003
   18504:	b1404606 	.word	0xb1404606
   18508:	f7f7200c 	.word	0xf7f7200c
   1850c:	f04ffa33 	.word	0xf04ffa33
   18510:	462835ff 	.word	0x462835ff
   18514:	e8bdb002 	.word	0xe8bdb002
   18518:	9b0087f0 	.word	0x9b0087f0
   1851c:	68184639 	.word	0x68184639
   18520:	f00a462a 	.word	0xf00a462a
   18524:	2104fda5 	.word	0x2104fda5
   18528:	98004c47 	.word	0x98004c47
   1852c:	60458823 	.word	0x60458823
   18530:	b29b3301 	.word	0xb29b3301
   18534:	8023041a 	.word	0x8023041a
   18538:	4c44430a 	.word	0x4c44430a
   1853c:	724660c2 	.word	0x724660c2
   18540:	72c67286 	.word	0x72c67286
   18544:	60267201 	.word	0x60267201
   18548:	ff14f003 	.word	0xff14f003
   1854c:	d1622800 	.word	0xd1622800
   18550:	33fff04f 	.word	0x33fff04f
   18554:	4f3bae02 	.word	0x4f3bae02
   18558:	3d04f846 	.word	0x3d04f846
   1855c:	4631e004 	.word	0x4631e004
   18560:	f7f74638 	.word	0xf7f74638
   18564:	b978f973 	.word	0xb978f973
   18568:	28006820 	.word	0x28006820
   1856c:	6904d0f7 	.word	0x6904d0f7
   18570:	ff14f003 	.word	0xff14f003
   18574:	d0cc2c00 	.word	0xd0cc2c00
   18578:	20084b35 	.word	0x20084b35
   1857c:	f04f601c 	.word	0xf04f601c
   18580:	f7f735ff 	.word	0xf7f735ff
   18584:	e7c4f9f7 	.word	0xe7c4f9f7
   18588:	35fff04f 	.word	0x35fff04f
   1858c:	f7f7203c 	.word	0xf7f7203c
   18590:	4628f9f1 	.word	0x4628f9f1
   18594:	e8bdb002 	.word	0xe8bdb002
   18598:	464087f0 	.word	0x464087f0
   1859c:	f0032100 	.word	0xf0032100
   185a0:	4602fed5 	.word	0x4602fed5
   185a4:	d1af2800 	.word	0xd1af2800
   185a8:	0c08f04f 	.word	0x0c08f04f
   185ac:	48294926 	.word	0x48294926
   185b0:	6804880b 	.word	0x6804880b
   185b4:	98003301 	.word	0x98003301
   185b8:	800bb29b 	.word	0x800bb29b
   185bc:	f043041b 	.word	0xf043041b
   185c0:	61040303 	.word	0x61040303
   185c4:	60c34c21 	.word	0x60c34c21
   185c8:	71427102 	.word	0x71427102
   185cc:	71c27182 	.word	0x71c27182
   185d0:	72827242 	.word	0x72827242
   185d4:	f88072c2 	.word	0xf88072c2
   185d8:	2103c008 	.word	0x2103c008
   185dc:	f0036022 	.word	0xf0036022
   185e0:	b9c0fec9 	.word	0xb9c0fec9
   185e4:	33fff04f 	.word	0x33fff04f
   185e8:	0908f10d 	.word	0x0908f10d
   185ec:	3d04f849 	.word	0x3d04f849
   185f0:	e00546b2 	.word	0xe00546b2
   185f4:	46504649 	.word	0x46504649
   185f8:	f928f7f7 	.word	0xf928f7f7
   185fc:	d1c32800 	.word	0xd1c32800
   18600:	28006820 	.word	0x28006820
   18604:	6904d0f6 	.word	0x6904d0f6
   18608:	fec8f003 	.word	0xfec8f003
   1860c:	d1b32c00 	.word	0xd1b32c00
   18610:	60332303 	.word	0x60332303
   18614:	9800e772 	.word	0x9800e772
   18618:	b11b6803 	.word	0xb11b6803
   1861c:	f0034618 	.word	0xf0034618
   18620:	9800fec5 	.word	0x9800fec5
   18624:	febaf003 	.word	0xfebaf003
   18628:	2016e76e 	.word	0x2016e76e
   1862c:	f9a2f7f7 	.word	0xf9a2f7f7
   18630:	35fff04f 	.word	0x35fff04f
   18634:	2001e76d 	.word	0x2001e76d
   18638:	f99cf7f7 	.word	0xf99cf7f7
   1863c:	35fff04f 	.word	0x35fff04f
   18640:	bf00e767 	.word	0xbf00e767
   18644:	20020464 	.word	0x20020464
   18648:	20025bd8 	.word	0x20025bd8
   1864c:	20020408 	.word	0x20020408
   18650:	20020468 	.word	0x20020468
   18654:	2002046c 	.word	0x2002046c

00018658 <mfu_interface_setopt>:
   18658:	4846b5f0 	.word	0x4846b5f0
   1865c:	6800b083 	.word	0x6800b083
   18660:	28013802 	.word	0x28013802
   18664:	f240d877 	.word	0xf240d877
   18668:	42812003 	.word	0x42812003
   1866c:	3a04d16d 	.word	0x3a04d16d
   18670:	d85c2a03 	.word	0xd85c2a03
   18674:	f002e8df 	.word	0xf002e8df
   18678:	514e024b 	.word	0x514e024b
   1867c:	46252407 	.word	0x46252407
   18680:	46682100 	.word	0x46682100
   18684:	fe62f003 	.word	0xfe62f003
   18688:	28004603 	.word	0x28004603
   1868c:	2704d138 	.word	0x2704d138
   18690:	98004e39 	.word	0x98004e39
   18694:	46298832 	.word	0x46298832
   18698:	b2923201 	.word	0xb2923201
   1869c:	4502ea44 	.word	0x4502ea44
   186a0:	60c54c36 	.word	0x60c54c36
   186a4:	71437103 	.word	0x71437103
   186a8:	71c37183 	.word	0x71c37183
   186ac:	72837243 	.word	0x72837243
   186b0:	720772c3 	.word	0x720772c3
   186b4:	60238032 	.word	0x60238032
   186b8:	fe5cf003 	.word	0xfe5cf003
   186bc:	f04fb9b8 	.word	0xf04fb9b8
   186c0:	ad0233ff 	.word	0xad0233ff
   186c4:	f8454e2b 	.word	0xf8454e2b
   186c8:	e0053d04 	.word	0xe0053d04
   186cc:	46304629 	.word	0x46304629
   186d0:	f8bcf7f7 	.word	0xf8bcf7f7
   186d4:	d1312800 	.word	0xd1312800
   186d8:	28006820 	.word	0x28006820
   186dc:	6904d0f6 	.word	0x6904d0f6
   186e0:	fe5cf003 	.word	0xfe5cf003
   186e4:	d13c2c00 	.word	0xd13c2c00
   186e8:	b0034620 	.word	0xb0034620
   186ec:	9800bdf0 	.word	0x9800bdf0
   186f0:	b11b6803 	.word	0xb11b6803
   186f4:	f0034618 	.word	0xf0034618
   186f8:	9800fe59 	.word	0x9800fe59
   186fc:	fe4ef003 	.word	0xfe4ef003
   18700:	f7f7200c 	.word	0xf7f7200c
   18704:	f04ff937 	.word	0xf04ff937
   18708:	b00330ff 	.word	0xb00330ff
   1870c:	2405bdf0 	.word	0x2405bdf0
   18710:	e7b54625 	.word	0xe7b54625
   18714:	46252408 	.word	0x46252408
   18718:	b1b3e7b2 	.word	0xb1b3e7b2
   1871c:	2a049a08 	.word	0x2a049a08
   18720:	2000d113 	.word	0x2000d113
   18724:	4b16681a 	.word	0x4b16681a
   18728:	b003601a 	.word	0xb003601a
   1872c:	202abdf0 	.word	0x202abdf0
   18730:	f920f7f7 	.word	0xf920f7f7
   18734:	30fff04f 	.word	0x30fff04f
   18738:	bdf0b003 	.word	0xbdf0b003
   1873c:	f7f7203c 	.word	0xf7f7203c
   18740:	f04ff919 	.word	0xf04ff919
   18744:	b00330ff 	.word	0xb00330ff
   18748:	2016bdf0 	.word	0x2016bdf0
   1874c:	f912f7f7 	.word	0xf912f7f7
   18750:	30fff04f 	.word	0x30fff04f
   18754:	2001e7c9 	.word	0x2001e7c9
   18758:	f90cf7f7 	.word	0xf90cf7f7
   1875c:	30fff04f 	.word	0x30fff04f
   18760:	4b08e7c3 	.word	0x4b08e7c3
   18764:	601c2008 	.word	0x601c2008
   18768:	f904f7f7 	.word	0xf904f7f7
   1876c:	30fff04f 	.word	0x30fff04f
   18770:	bf00e7bb 	.word	0xbf00e7bb
   18774:	20020464 	.word	0x20020464
   18778:	20025bd8 	.word	0x20025bd8
   1877c:	20020408 	.word	0x20020408
   18780:	2002046c 	.word	0x2002046c
   18784:	20020468 	.word	0x20020468

00018788 <mfu_interface_getopt>:
   18788:	2003f240 	.word	0x2003f240
   1878c:	41f0e92d 	.word	0x41f0e92d
   18790:	b0824281 	.word	0xb0824281
   18794:	f0409e08 	.word	0xf0409e08
   18798:	461d80ae 	.word	0x461d80ae
   1879c:	f0002b00 	.word	0xf0002b00
   187a0:	2e0080aa 	.word	0x2e0080aa
   187a4:	80a7f000 	.word	0x80a7f000
   187a8:	681b4b5e 	.word	0x681b4b5e
   187ac:	2b013b02 	.word	0x2b013b02
   187b0:	80a7f200 	.word	0x80a7f200
   187b4:	2a133a01 	.word	0x2a133a01
   187b8:	e8dfd879 	.word	0xe8dfd879
   187bc:	5f17f002 	.word	0x5f17f002
   187c0:	78787878 	.word	0x78787878
   187c4:	78787872 	.word	0x78787872
   187c8:	78787878 	.word	0x78787878
   187cc:	78787878 	.word	0x78787878
   187d0:	68330a78 	.word	0x68330a78
   187d4:	f0402b04 	.word	0xf0402b04
   187d8:	2200808e 	.word	0x2200808e
   187dc:	4b524610 	.word	0x4b524610
   187e0:	601a6819 	.word	0x601a6819
   187e4:	b0026029 	.word	0xb0026029
   187e8:	81f0e8bd 	.word	0x81f0e8bd
   187ec:	2b246833 	.word	0x2b246833
   187f0:	8081f040 	.word	0x8081f040
   187f4:	46a02401 	.word	0x46a02401
   187f8:	46682100 	.word	0x46682100
   187fc:	fda6f003 	.word	0xfda6f003
   18800:	d1462800 	.word	0xd1462800
   18804:	9b004949 	.word	0x9b004949
   18808:	f1b8880a 	.word	0xf1b8880a
   1880c:	f1020f03 	.word	0xf1020f03
   18810:	b2920201 	.word	0xb2920201
   18814:	4402ea44 	.word	0x4402ea44
   18818:	800a7118 	.word	0x800a7118
   1881c:	715860dc 	.word	0x715860dc
   18820:	71d87198 	.word	0x71d87198
   18824:	2104d04b 	.word	0x2104d04b
   18828:	4f412200 	.word	0x4f412200
   1882c:	46186099 	.word	0x46186099
   18830:	603a4641 	.word	0x603a4641
   18834:	fd9ef003 	.word	0xfd9ef003
   18838:	d14d2800 	.word	0xd14d2800
   1883c:	33fff04f 	.word	0x33fff04f
   18840:	f844ac02 	.word	0xf844ac02
   18844:	f8df3d04 	.word	0xf8df3d04
   18848:	e00580dc 	.word	0xe00580dc
   1884c:	46404621 	.word	0x46404621
   18850:	fffcf7f6 	.word	0xfffcf7f6
   18854:	d1372800 	.word	0xd1372800
   18858:	29006839 	.word	0x29006839
   1885c:	690cd0f6 	.word	0x690cd0f6
   18860:	d1542c00 	.word	0xd1542c00
   18864:	31146832 	.word	0x31146832
   18868:	f00a4628 	.word	0xf00a4628
   1886c:	6838fc01 	.word	0x6838fc01
   18870:	fd94f003 	.word	0xfd94f003
   18874:	b0024620 	.word	0xb0024620
   18878:	81f0e8bd 	.word	0x81f0e8bd
   1887c:	2b046833 	.word	0x2b046833
   18880:	2402d139 	.word	0x2402d139
   18884:	46682100 	.word	0x46682100
   18888:	f00346a0 	.word	0xf00346a0
   1888c:	2800fd5f 	.word	0x2800fd5f
   18890:	200cd0b8 	.word	0x200cd0b8
   18894:	f86ef7f7 	.word	0xf86ef7f7
   18898:	30fff04f 	.word	0x30fff04f
   1889c:	e8bdb002 	.word	0xe8bdb002
   188a0:	683381f0 	.word	0x683381f0
   188a4:	d1262b04 	.word	0xd1262b04
   188a8:	46a02409 	.word	0x46a02409
   188ac:	202ae7a4 	.word	0x202ae7a4
   188b0:	f860f7f7 	.word	0xf860f7f7
   188b4:	30fff04f 	.word	0x30fff04f
   188b8:	e8bdb002 	.word	0xe8bdb002
   188bc:	4a1d81f0 	.word	0x4a1d81f0
   188c0:	68122108 	.word	0x68122108
   188c4:	e7af611a 	.word	0xe7af611a
   188c8:	f7f7203c 	.word	0xf7f7203c
   188cc:	f04ff853 	.word	0xf04ff853
   188d0:	b00230ff 	.word	0xb00230ff
   188d4:	81f0e8bd 	.word	0x81f0e8bd
   188d8:	68039800 	.word	0x68039800
   188dc:	4618b11b 	.word	0x4618b11b
   188e0:	fd64f003 	.word	0xfd64f003
   188e4:	f0039800 	.word	0xf0039800
   188e8:	200cfd59 	.word	0x200cfd59
   188ec:	f842f7f7 	.word	0xf842f7f7
   188f0:	30fff04f 	.word	0x30fff04f
   188f4:	2016e7d2 	.word	0x2016e7d2
   188f8:	f83cf7f7 	.word	0xf83cf7f7
   188fc:	30fff04f 	.word	0x30fff04f
   18900:	2001e771 	.word	0x2001e771
   18904:	f836f7f7 	.word	0xf836f7f7
   18908:	30fff04f 	.word	0x30fff04f
   1890c:	4b06e76b 	.word	0x4b06e76b
   18910:	601c2008 	.word	0x601c2008
   18914:	f82ef7f7 	.word	0xf82ef7f7
   18918:	f0036838 	.word	0xf0036838
   1891c:	f04ffd3f 	.word	0xf04ffd3f
   18920:	e76030ff 	.word	0xe76030ff
   18924:	20020464 	.word	0x20020464
   18928:	20020468 	.word	0x20020468
   1892c:	20025bd8 	.word	0x20025bd8
   18930:	20020408 	.word	0x20020408
   18934:	2002046c 	.word	0x2002046c

00018938 <unimplemented_method>:
   18938:	b508b40f 	.word	0xb508b40f
   1893c:	f7f7202d 	.word	0xf7f7202d
   18940:	e8bdf819 	.word	0xe8bdf819
   18944:	f04f4008 	.word	0xf04f4008
   18948:	b00430ff 	.word	0xb00430ff
   1894c:	bf004770 	.word	0xbf004770

00018950 <bsd_platform_init>:
   18950:	b093b5f0 	.word	0xb093b5f0
   18954:	ff62f003 	.word	0xff62f003
   18958:	d1522800 	.word	0xd1522800
   1895c:	a801492b 	.word	0xa801492b
   18960:	ffd0f003 	.word	0xffd0f003
   18964:	d14c2800 	.word	0xd14c2800
   18968:	f8d4f7f7 	.word	0xf8d4f7f7
   1896c:	f814f003 	.word	0xf814f003
   18970:	d1462800 	.word	0xd1462800
   18974:	f44f2320 	.word	0xf44f2320
   18978:	22084180 	.word	0x22084180
   1897c:	5c40f44f 	.word	0x5c40f44f
   18980:	4e244f23 	.word	0x4e244f23
   18984:	93059303 	.word	0x93059303
   18988:	4d239307 	.word	0x4d239307
   1898c:	910d9109 	.word	0x910d9109
   18990:	49234c22 	.word	0x49234c22
   18994:	e9cd4b23 	.word	0xe9cd4b23
   18998:	eb0d0010 	.word	0xeb0d0010
   1899c:	f8cd0002 	.word	0xf8cd0002
   189a0:	e9cdc02c 	.word	0xe9cdc02c
   189a4:	9702220e 	.word	0x9702220e
   189a8:	95069604 	.word	0x95069604
   189ac:	910a9408 	.word	0x910a9408
   189b0:	f7f8930c 	.word	0xf7f8930c
   189b4:	b108ff0d 	.word	0xb108ff0d
   189b8:	bdf0b013 	.word	0xbdf0b013
   189bc:	fd8af7fc 	.word	0xfd8af7fc
   189c0:	f7f8b9f8 	.word	0xf7f8b9f8
   189c4:	b9e0f9fd 	.word	0xb9e0f9fd
   189c8:	f832f7fd 	.word	0xf832f7fd
   189cc:	f7fab9c8 	.word	0xf7fab9c8
   189d0:	b9b0f965 	.word	0xb9b0f965
   189d4:	fcd6f7ff 	.word	0xfcd6f7ff
   189d8:	f7f7b998 	.word	0xf7f7b998
   189dc:	b980fff9 	.word	0xb980fff9
   189e0:	f8e6f000 	.word	0xf8e6f000
   189e4:	f005b968 	.word	0xf005b968
   189e8:	b950f90f 	.word	0xb950f90f
   189ec:	fc30f7ff 	.word	0xfc30f7ff
   189f0:	f7f8b938 	.word	0xf7f8b938
   189f4:	3000fbe9 	.word	0x3000fbe9
   189f8:	2001bf18 	.word	0x2001bf18
   189fc:	b0134240 	.word	0xb0134240
   18a00:	f04fbdf0 	.word	0xf04fbdf0
   18a04:	b01330ff 	.word	0xb01330ff
   18a08:	bf00bdf0 	.word	0xbf00bdf0
   18a0c:	0002480c 	.word	0x0002480c
   18a10:	20010000 	.word	0x20010000
   18a14:	20010040 	.word	0x20010040
   18a18:	20010020 	.word	0x20010020
   18a1c:	20017060 	.word	0x20017060
   18a20:	20010060 	.word	0x20010060
   18a24:	20013060 	.word	0x20013060

00018a28 <bsd_platform_af_method_table_get>:
   18a28:	d02a2805 	.word	0xd02a2805
   18a2c:	d914b508 	.word	0xd914b508
   18a30:	d016280a 	.word	0xd016280a
   18a34:	d10b2866 	.word	0xd10b2866
   18a38:	2302f240 	.word	0x2302f240
   18a3c:	d032429a 	.word	0xd032429a
   18a40:	2305f240 	.word	0x2305f240
   18a44:	d032429a 	.word	0xd032429a
   18a48:	2301f240 	.word	0x2301f240
   18a4c:	d02c429a 	.word	0xd02c429a
   18a50:	f7f62016 	.word	0xf7f62016
   18a54:	2000ff8f 	.word	0x2000ff8f
   18a58:	2801bd08 	.word	0x2801bd08
   18a5c:	2802d016 	.word	0x2802d016
   18a60:	f5a2d1f6 	.word	0xf5a2d1f6
   18a64:	2a0a7282 	.word	0x2a0a7282
   18a68:	2301d819 	.word	0x2301d819
   18a6c:	4103f240 	.word	0x4103f240
   18a70:	fa034810 	.word	0xfa034810
   18a74:	420af202 	.word	0x420af202
   18a78:	0328f100 	.word	0x0328f100
   18a7c:	4618bf18 	.word	0x4618bf18
   18a80:	2903bd08 	.word	0x2903bd08
   18a84:	bf18480c 	.word	0xbf18480c
   18a88:	47702000 	.word	0x47702000
   18a8c:	2303f240 	.word	0x2303f240
   18a90:	d006429a 	.word	0xd006429a
   18a94:	7f01f5b2 	.word	0x7f01f5b2
   18a98:	4808d1da 	.word	0x4808d1da
   18a9c:	4805bd08 	.word	0x4805bd08
   18aa0:	4807bd08 	.word	0x4807bd08
   18aa4:	4807bd08 	.word	0x4807bd08
   18aa8:	4807bd08 	.word	0x4807bd08
   18aac:	4807bd08 	.word	0x4807bd08
   18ab0:	bf00bd08 	.word	0xbf00bd08
   18ab4:	000246d8 	.word	0x000246d8
   18ab8:	000247c8 	.word	0x000247c8
   18abc:	00024778 	.word	0x00024778
   18ac0:	00024728 	.word	0x00024728
   18ac4:	00024750 	.word	0x00024750
   18ac8:	000246b0 	.word	0x000246b0
   18acc:	000247a0 	.word	0x000247a0

00018ad0 <bsd_platform_fd_method_table_get>:
   18ad0:	4605b538 	.word	0x4605b538
   18ad4:	fe1af7fc 	.word	0xfe1af7fc
   18ad8:	b9504604 	.word	0xb9504604
   18adc:	43ab4b2a 	.word	0x43ab4b2a
   18ae0:	4b2ad032 	.word	0x4b2ad032
   18ae4:	d04343ab 	.word	0xd04343ab
   18ae8:	43ab4b29 	.word	0x43ab4b29
   18aec:	4829d146 	.word	0x4829d146
   18af0:	68c3bd38 	.word	0x68c3bd38
   18af4:	2b056942 	.word	0x2b056942
   18af8:	d911d034 	.word	0xd911d034
   18afc:	d0132b0a 	.word	0xd0132b0a
   18b00:	d12a2b66 	.word	0xd12a2b66
   18b04:	2302f240 	.word	0x2302f240
   18b08:	d031429a 	.word	0xd031429a
   18b0c:	2305f240 	.word	0x2305f240
   18b10:	d031429a 	.word	0xd031429a
   18b14:	2301f240 	.word	0x2301f240
   18b18:	d11e429a 	.word	0xd11e429a
   18b1c:	bd38481e 	.word	0xbd38481e
   18b20:	d0132b01 	.word	0xd0132b01
   18b24:	d1182b02 	.word	0xd1182b02
   18b28:	7282f5a2 	.word	0x7282f5a2
   18b2c:	d8212a0a 	.word	0xd8212a0a
   18b30:	f2402301 	.word	0xf2402301
   18b34:	48194103 	.word	0x48194103
   18b38:	f202fa03 	.word	0xf202fa03
   18b3c:	f100420a 	.word	0xf100420a
   18b40:	bf180428 	.word	0xbf180428
   18b44:	bd384620 	.word	0xbd384620
   18b48:	bd384815 	.word	0xbd384815
   18b4c:	2303f240 	.word	0x2303f240
   18b50:	d0f9429a 	.word	0xd0f9429a
   18b54:	7f01f5b2 	.word	0x7f01f5b2
   18b58:	2016d0c9 	.word	0x2016d0c9
   18b5c:	ff0af7f6 	.word	0xff0af7f6
   18b60:	bd382000 	.word	0xbd382000
   18b64:	480f6903 	.word	0x480f6903
   18b68:	bf182b03 	.word	0xbf182b03
   18b6c:	bd382000 	.word	0xbd382000
   18b70:	bd38480d 	.word	0xbd38480d
   18b74:	bd384809 	.word	0xbd384809
   18b78:	bd38480c 	.word	0xbd38480c
   18b7c:	f7f62009 	.word	0xf7f62009
   18b80:	4620fef9 	.word	0x4620fef9
   18b84:	bf00bd38 	.word	0xbf00bd38
   18b88:	49765432 	.word	0x49765432
   18b8c:	789a0000 	.word	0x789a0000
   18b90:	49765443 	.word	0x49765443
   18b94:	00024778 	.word	0x00024778
   18b98:	000246b0 	.word	0x000246b0
   18b9c:	000246d8 	.word	0x000246d8
   18ba0:	00024728 	.word	0x00024728
   18ba4:	000247c8 	.word	0x000247c8
   18ba8:	00024750 	.word	0x00024750
   18bac:	000247a0 	.word	0x000247a0

00018bb0 <nrf_inbuilt_key_init>:
   18bb0:	b086b570 	.word	0xb086b570
   18bb4:	a802491d 	.word	0xa802491d
   18bb8:	fea4f003 	.word	0xfea4f003
   18bbc:	4601bb00 	.word	0x4601bb00
   18bc0:	f2404604 	.word	0xf2404604
   18bc4:	20662201 	.word	0x20662201
   18bc8:	f8fcf7f8 	.word	0xf8fcf7f8
   18bcc:	28004e18 	.word	0x28004e18
   18bd0:	60304605 	.word	0x60304605
   18bd4:	4817db10 	.word	0x4817db10
   18bd8:	fa28f00a 	.word	0xfa28f00a
   18bdc:	46024623 	.word	0x46024623
   18be0:	46284914 	.word	0x46284914
   18be4:	94009401 	.word	0x94009401
   18be8:	f896f7f8 	.word	0xf896f7f8
   18bec:	48114605 	.word	0x48114605
   18bf0:	fa1cf00a 	.word	0xfa1cf00a
   18bf4:	d00742a8 	.word	0xd00742a8
   18bf8:	46202405 	.word	0x46202405
   18bfc:	bd70b006 	.word	0xbd70b006
   18c00:	46202469 	.word	0x46202469
   18c04:	bd70b006 	.word	0xbd70b006
   18c08:	e9cd6830 	.word	0xe9cd6830
   18c0c:	a9034400 	.word	0xa9034400
   18c10:	220a4623 	.word	0x220a4623
   18c14:	f968f7f8 	.word	0xf968f7f8
   18c18:	dded2801 	.word	0xdded2801
   18c1c:	2202a803 	.word	0x2202a803
   18c20:	f00a4905 	.word	0xf00a4905
   18c24:	2800fa16 	.word	0x2800fa16
   18c28:	e7e5d0e7 	.word	0xe7e5d0e7
   18c2c:	2002a204 	.word	0x2002a204
   18c30:	2002a200 	.word	0x2002a200
   18c34:	00024820 	.word	0x00024820
   18c38:	00024400 	.word	0x00024400

00018c3c <symbol_0005436>:
   18c3c:	460a4b02 	.word	0x460a4b02
   18c40:	2100681b 	.word	0x2100681b
   18c44:	bf004718 	.word	0xbf004718
   18c48:	2002a218 	.word	0x2002a218

00018c4c <mpi_mul_hlp>:
   18c4c:	e92d280f 	.word	0xe92d280f
   18c50:	46864ff0 	.word	0x46864ff0
   18c54:	82e0f240 	.word	0x82e0f240
   18c58:	0800f04f 	.word	0x0800f04f
   18c5c:	f1014684 	.word	0xf1014684
   18c60:	f1020440 	.word	0xf1020440
   18c64:	f8540040 	.word	0xf8540040
   18c68:	f8506c40 	.word	0xf8506c40
   18c6c:	fba35c40 	.word	0xfba35c40
   18c70:	eb186706 	.word	0xeb186706
   18c74:	bf2c0806 	.word	0xbf2c0806
   18c78:	0901f04f 	.word	0x0901f04f
   18c7c:	0900f04f 	.word	0x0900f04f
   18c80:	0508eb15 	.word	0x0508eb15
   18c84:	f04f444f 	.word	0xf04f444f
   18c88:	bf280900 	.word	0xbf280900
   18c8c:	0901f04f 	.word	0x0901f04f
   18c90:	5c40f840 	.word	0x5c40f840
   18c94:	6c3cf854 	.word	0x6c3cf854
   18c98:	fba344b9 	.word	0xfba344b9
   18c9c:	eb19ab06 	.word	0xeb19ab06
   18ca0:	bf2c090a 	.word	0xbf2c090a
   18ca4:	0801f04f 	.word	0x0801f04f
   18ca8:	0800f04f 	.word	0x0800f04f
   18cac:	6c3cf850 	.word	0x6c3cf850
   18cb0:	050beb08 	.word	0x050beb08
   18cb4:	0609eb16 	.word	0x0609eb16
   18cb8:	0800f04f 	.word	0x0800f04f
   18cbc:	f04fbf28 	.word	0xf04fbf28
   18cc0:	f8400801 	.word	0xf8400801
   18cc4:	f8546c3c 	.word	0xf8546c3c
   18cc8:	44a86c38 	.word	0x44a86c38
   18ccc:	6706fba3 	.word	0x6706fba3
   18cd0:	0806eb18 	.word	0x0806eb18
   18cd4:	f04fbf2c 	.word	0xf04fbf2c
   18cd8:	f04f0901 	.word	0xf04f0901
   18cdc:	f8500900 	.word	0xf8500900
   18ce0:	444f5c38 	.word	0x444f5c38
   18ce4:	0508eb15 	.word	0x0508eb15
   18ce8:	0900f04f 	.word	0x0900f04f
   18cec:	f04fbf28 	.word	0xf04fbf28
   18cf0:	f8400901 	.word	0xf8400901
   18cf4:	f8545c38 	.word	0xf8545c38
   18cf8:	44b96c34 	.word	0x44b96c34
   18cfc:	ab06fba3 	.word	0xab06fba3
   18d00:	090aeb19 	.word	0x090aeb19
   18d04:	f04fbf2c 	.word	0xf04fbf2c
   18d08:	f04f0801 	.word	0xf04f0801
   18d0c:	f8500800 	.word	0xf8500800
   18d10:	eb086c34 	.word	0xeb086c34
   18d14:	eb16050b 	.word	0xeb16050b
   18d18:	f04f0609 	.word	0xf04f0609
   18d1c:	bf280800 	.word	0xbf280800
   18d20:	0801f04f 	.word	0x0801f04f
   18d24:	6c34f840 	.word	0x6c34f840
   18d28:	6c30f854 	.word	0x6c30f854
   18d2c:	fba344a8 	.word	0xfba344a8
   18d30:	eb186706 	.word	0xeb186706
   18d34:	bf2c0806 	.word	0xbf2c0806
   18d38:	0901f04f 	.word	0x0901f04f
   18d3c:	0900f04f 	.word	0x0900f04f
   18d40:	5c30f850 	.word	0x5c30f850
   18d44:	eb15444f 	.word	0xeb15444f
   18d48:	f04f0508 	.word	0xf04f0508
   18d4c:	bf280900 	.word	0xbf280900
   18d50:	0901f04f 	.word	0x0901f04f
   18d54:	5c30f840 	.word	0x5c30f840
   18d58:	6c2cf854 	.word	0x6c2cf854
   18d5c:	fba344b9 	.word	0xfba344b9
   18d60:	eb19ab06 	.word	0xeb19ab06
   18d64:	bf2c090a 	.word	0xbf2c090a
   18d68:	0801f04f 	.word	0x0801f04f
   18d6c:	0800f04f 	.word	0x0800f04f
   18d70:	6c2cf850 	.word	0x6c2cf850
   18d74:	050beb08 	.word	0x050beb08
   18d78:	0609eb16 	.word	0x0609eb16
   18d7c:	0800f04f 	.word	0x0800f04f
   18d80:	f04fbf28 	.word	0xf04fbf28
   18d84:	f8400801 	.word	0xf8400801
   18d88:	f8546c2c 	.word	0xf8546c2c
   18d8c:	44a86c28 	.word	0x44a86c28
   18d90:	6706fba3 	.word	0x6706fba3
   18d94:	0806eb18 	.word	0x0806eb18
   18d98:	f04fbf2c 	.word	0xf04fbf2c
   18d9c:	f04f0901 	.word	0xf04f0901
   18da0:	f8500900 	.word	0xf8500900
   18da4:	444f5c28 	.word	0x444f5c28
   18da8:	0508eb15 	.word	0x0508eb15
   18dac:	0900f04f 	.word	0x0900f04f
   18db0:	f04fbf28 	.word	0xf04fbf28
   18db4:	f8400901 	.word	0xf8400901
   18db8:	f8545c28 	.word	0xf8545c28
   18dbc:	44b96c24 	.word	0x44b96c24
   18dc0:	ab06fba3 	.word	0xab06fba3
   18dc4:	090aeb19 	.word	0x090aeb19
   18dc8:	f04fbf2c 	.word	0xf04fbf2c
   18dcc:	f04f0801 	.word	0xf04f0801
   18dd0:	f8500800 	.word	0xf8500800
   18dd4:	eb086c24 	.word	0xeb086c24
   18dd8:	eb16050b 	.word	0xeb16050b
   18ddc:	f04f0609 	.word	0xf04f0609
   18de0:	bf280800 	.word	0xbf280800
   18de4:	0801f04f 	.word	0x0801f04f
   18de8:	6c24f840 	.word	0x6c24f840
   18dec:	6c20f854 	.word	0x6c20f854
   18df0:	fba344a8 	.word	0xfba344a8
   18df4:	eb186706 	.word	0xeb186706
   18df8:	bf2c0806 	.word	0xbf2c0806
   18dfc:	0901f04f 	.word	0x0901f04f
   18e00:	0900f04f 	.word	0x0900f04f
   18e04:	5c20f850 	.word	0x5c20f850
   18e08:	eb15444f 	.word	0xeb15444f
   18e0c:	f04f0508 	.word	0xf04f0508
   18e10:	bf280900 	.word	0xbf280900
   18e14:	0901f04f 	.word	0x0901f04f
   18e18:	5c20f840 	.word	0x5c20f840
   18e1c:	6c1cf854 	.word	0x6c1cf854
   18e20:	fba344b9 	.word	0xfba344b9
   18e24:	eb19ab06 	.word	0xeb19ab06
   18e28:	bf2c090a 	.word	0xbf2c090a
   18e2c:	0801f04f 	.word	0x0801f04f
   18e30:	0800f04f 	.word	0x0800f04f
   18e34:	6c1cf850 	.word	0x6c1cf850
   18e38:	050beb08 	.word	0x050beb08
   18e3c:	0609eb16 	.word	0x0609eb16
   18e40:	0800f04f 	.word	0x0800f04f
   18e44:	f04fbf28 	.word	0xf04fbf28
   18e48:	f8400801 	.word	0xf8400801
   18e4c:	f8546c1c 	.word	0xf8546c1c
   18e50:	44a86c18 	.word	0x44a86c18
   18e54:	6706fba3 	.word	0x6706fba3
   18e58:	0806eb18 	.word	0x0806eb18
   18e5c:	f04fbf2c 	.word	0xf04fbf2c
   18e60:	f04f0901 	.word	0xf04f0901
   18e64:	f8500900 	.word	0xf8500900
   18e68:	444f5c18 	.word	0x444f5c18
   18e6c:	0508eb15 	.word	0x0508eb15
   18e70:	0900f04f 	.word	0x0900f04f
   18e74:	f04fbf28 	.word	0xf04fbf28
   18e78:	f8400901 	.word	0xf8400901
   18e7c:	f8545c18 	.word	0xf8545c18
   18e80:	44b96c14 	.word	0x44b96c14
   18e84:	ab06fba3 	.word	0xab06fba3
   18e88:	090aeb19 	.word	0x090aeb19
   18e8c:	f04fbf2c 	.word	0xf04fbf2c
   18e90:	f04f0801 	.word	0xf04f0801
   18e94:	f8500800 	.word	0xf8500800
   18e98:	eb086c14 	.word	0xeb086c14
   18e9c:	eb16050b 	.word	0xeb16050b
   18ea0:	f04f0609 	.word	0xf04f0609
   18ea4:	bf280800 	.word	0xbf280800
   18ea8:	0801f04f 	.word	0x0801f04f
   18eac:	6c14f840 	.word	0x6c14f840
   18eb0:	6c10f854 	.word	0x6c10f854
   18eb4:	fba344a8 	.word	0xfba344a8
   18eb8:	eb186706 	.word	0xeb186706
   18ebc:	bf2c0806 	.word	0xbf2c0806
   18ec0:	0901f04f 	.word	0x0901f04f
   18ec4:	0900f04f 	.word	0x0900f04f
   18ec8:	5c10f850 	.word	0x5c10f850
   18ecc:	eb15444f 	.word	0xeb15444f
   18ed0:	f04f0508 	.word	0xf04f0508
   18ed4:	bf280900 	.word	0xbf280900
   18ed8:	0901f04f 	.word	0x0901f04f
   18edc:	5c10f840 	.word	0x5c10f840
   18ee0:	6c0cf854 	.word	0x6c0cf854
   18ee4:	fba344b9 	.word	0xfba344b9
   18ee8:	eb19ab06 	.word	0xeb19ab06
   18eec:	bf2c090a 	.word	0xbf2c090a
   18ef0:	0801f04f 	.word	0x0801f04f
   18ef4:	0800f04f 	.word	0x0800f04f
   18ef8:	6c0cf850 	.word	0x6c0cf850
   18efc:	050beb08 	.word	0x050beb08
   18f00:	0609eb16 	.word	0x0609eb16
   18f04:	0800f04f 	.word	0x0800f04f
   18f08:	f04fbf28 	.word	0xf04fbf28
   18f0c:	f8400801 	.word	0xf8400801
   18f10:	f8546c0c 	.word	0xf8546c0c
   18f14:	44a86c08 	.word	0x44a86c08
   18f18:	6706fba3 	.word	0x6706fba3
   18f1c:	0806eb18 	.word	0x0806eb18
   18f20:	f04fbf2c 	.word	0xf04fbf2c
   18f24:	f04f0901 	.word	0xf04f0901
   18f28:	f8500900 	.word	0xf8500900
   18f2c:	444f5c08 	.word	0x444f5c08
   18f30:	0508eb15 	.word	0x0508eb15
   18f34:	0900f04f 	.word	0x0900f04f
   18f38:	f04fbf28 	.word	0xf04fbf28
   18f3c:	f8400901 	.word	0xf8400901
   18f40:	f8545c08 	.word	0xf8545c08
   18f44:	44b96c04 	.word	0x44b96c04
   18f48:	ab06fba3 	.word	0xab06fba3
   18f4c:	090aeb19 	.word	0x090aeb19
   18f50:	f04fbf2c 	.word	0xf04fbf2c
   18f54:	f04f0801 	.word	0xf04f0801
   18f58:	f8500800 	.word	0xf8500800
   18f5c:	eb086c04 	.word	0xeb086c04
   18f60:	eb16050b 	.word	0xeb16050b
   18f64:	f04f0609 	.word	0xf04f0609
   18f68:	bf280800 	.word	0xbf280800
   18f6c:	0801f04f 	.word	0x0801f04f
   18f70:	0c10f1ac 	.word	0x0c10f1ac
   18f74:	0f0ff1bc 	.word	0x0f0ff1bc
   18f78:	6c04f840 	.word	0x6c04f840
   18f7c:	f10444a8 	.word	0xf10444a8
   18f80:	f1000440 	.word	0xf1000440
   18f84:	f63f0040 	.word	0xf63f0040
   18f88:	f1aeae6e 	.word	0xf1aeae6e
   18f8c:	09000010 	.word	0x09000010
   18f90:	01803001 	.word	0x01803001
   18f94:	44024401 	.word	0x44024401
   18f98:	000ff00e 	.word	0x000ff00e
   18f9c:	68172807 	.word	0x68172807
   18fa0:	8092f240 	.word	0x8092f240
   18fa4:	6856680c 	.word	0x6856680c
   18fa8:	9a04fba3 	.word	0x9a04fba3
   18fac:	0809eb18 	.word	0x0809eb18
   18fb0:	f04fbf2c 	.word	0xf04fbf2c
   18fb4:	f04f0c01 	.word	0xf04f0c01
   18fb8:	eb170c00 	.word	0xeb170c00
   18fbc:	bf2c0708 	.word	0xbf2c0708
   18fc0:	24002401 	.word	0x24002401
   18fc4:	684f6017 	.word	0x684f6017
   18fc8:	050ceb0a 	.word	0x050ceb0a
   18fcc:	8907fba3 	.word	0x8907fba3
   18fd0:	eb14442c 	.word	0xeb14442c
   18fd4:	bf2c0408 	.word	0xbf2c0408
   18fd8:	25002501 	.word	0x25002501
   18fdc:	eb0519a6 	.word	0xeb0519a6
   18fe0:	f04f0709 	.word	0xf04f0709
   18fe4:	bf280500 	.word	0xbf280500
   18fe8:	60562501 	.word	0x60562501
   18fec:	443d688e 	.word	0x443d688e
   18ff0:	7806fba3 	.word	0x7806fba3
   18ff4:	bf2c19ed 	.word	0xbf2c19ed
   18ff8:	24002401 	.word	0x24002401
   18ffc:	eb086896 	.word	0xeb086896
   19000:	19ad0704 	.word	0x19ad0704
   19004:	0400f04f 	.word	0x0400f04f
   19008:	2401bf28 	.word	0x2401bf28
   1900c:	68ce6095 	.word	0x68ce6095
   19010:	fba3443c 	.word	0xfba3443c
   19014:	19e47806 	.word	0x19e47806
   19018:	2501bf2c 	.word	0x2501bf2c
   1901c:	68d62500 	.word	0x68d62500
   19020:	0705eb08 	.word	0x0705eb08
   19024:	f04f19a4 	.word	0xf04f19a4
   19028:	bf280500 	.word	0xbf280500
   1902c:	60d42501 	.word	0x60d42501
   19030:	443d690e 	.word	0x443d690e
   19034:	7806fba3 	.word	0x7806fba3
   19038:	bf2c19ed 	.word	0xbf2c19ed
   1903c:	24002401 	.word	0x24002401
   19040:	eb086916 	.word	0xeb086916
   19044:	19ad0704 	.word	0x19ad0704
   19048:	0400f04f 	.word	0x0400f04f
   1904c:	2401bf28 	.word	0x2401bf28
   19050:	694e6115 	.word	0x694e6115
   19054:	fba3443c 	.word	0xfba3443c
   19058:	19e47806 	.word	0x19e47806
   1905c:	2501bf2c 	.word	0x2501bf2c
   19060:	69562500 	.word	0x69562500
   19064:	0705eb08 	.word	0x0705eb08
   19068:	f04f19a4 	.word	0xf04f19a4
   1906c:	bf280500 	.word	0xbf280500
   19070:	61542501 	.word	0x61542501
   19074:	443d698e 	.word	0x443d698e
   19078:	7806fba3 	.word	0x7806fba3
   1907c:	bf2c19ed 	.word	0xbf2c19ed
   19080:	24002401 	.word	0x24002401
   19084:	eb086996 	.word	0xeb086996
   19088:	19ad0704 	.word	0x19ad0704
   1908c:	0400f04f 	.word	0x0400f04f
   19090:	2401bf28 	.word	0x2401bf28
   19094:	69ce6195 	.word	0x69ce6195
   19098:	fba3443c 	.word	0xfba3443c
   1909c:	eb149a06 	.word	0xeb149a06
   190a0:	bf2c0409 	.word	0xbf2c0409
   190a4:	0801f04f 	.word	0x0801f04f
   190a8:	0800f04f 	.word	0x0800f04f
   190ac:	eb0869d6 	.word	0xeb0869d6
   190b0:	19a4050a 	.word	0x19a4050a
   190b4:	0800f04f 	.word	0x0800f04f
   190b8:	f04fbf28 	.word	0xf04fbf28
   190bc:	61d40801 	.word	0x61d40801
   190c0:	44a83120 	.word	0x44a83120
   190c4:	32203808 	.word	0x32203808
   190c8:	f0002800 	.word	0xf0002800
   190cc:	680c8097 	.word	0x680c8097
   190d0:	fba36816 	.word	0xfba36816
   190d4:	eb199a04 	.word	0xeb199a04
   190d8:	bf2c0808 	.word	0xbf2c0808
   190dc:	24002401 	.word	0x24002401
   190e0:	0608eb16 	.word	0x0608eb16
   190e4:	0500f04f 	.word	0x0500f04f
   190e8:	2501bf28 	.word	0x2501bf28
   190ec:	28014454 	.word	0x28014454
   190f0:	0804eb05 	.word	0x0804eb05
   190f4:	d07f6016 	.word	0xd07f6016
   190f8:	6856684c 	.word	0x6856684c
   190fc:	9a04fba3 	.word	0x9a04fba3
   19100:	0808eb19 	.word	0x0808eb19
   19104:	2401bf2c 	.word	0x2401bf2c
   19108:	eb162400 	.word	0xeb162400
   1910c:	f04f0608 	.word	0xf04f0608
   19110:	bf280500 	.word	0xbf280500
   19114:	44542501 	.word	0x44542501
   19118:	eb052802 	.word	0xeb052802
   1911c:	60560804 	.word	0x60560804
   19120:	688cd06a 	.word	0x688cd06a
   19124:	fba36896 	.word	0xfba36896
   19128:	eb199a04 	.word	0xeb199a04
   1912c:	bf2c0808 	.word	0xbf2c0808
   19130:	24002401 	.word	0x24002401
   19134:	0608eb16 	.word	0x0608eb16
   19138:	0500f04f 	.word	0x0500f04f
   1913c:	2501bf28 	.word	0x2501bf28
   19140:	28034454 	.word	0x28034454
   19144:	0804eb05 	.word	0x0804eb05
   19148:	d0556096 	.word	0xd0556096
   1914c:	68d668cc 	.word	0x68d668cc
   19150:	9a04fba3 	.word	0x9a04fba3
   19154:	0808eb19 	.word	0x0808eb19
   19158:	2401bf2c 	.word	0x2401bf2c
   1915c:	eb162400 	.word	0xeb162400
   19160:	f04f0608 	.word	0xf04f0608
   19164:	bf280500 	.word	0xbf280500
   19168:	44542501 	.word	0x44542501
   1916c:	eb052804 	.word	0xeb052804
   19170:	60d60804 	.word	0x60d60804
   19174:	690cd040 	.word	0x690cd040
   19178:	fba36916 	.word	0xfba36916
   1917c:	eb199a04 	.word	0xeb199a04
   19180:	bf2c0408 	.word	0xbf2c0408
   19184:	0801f04f 	.word	0x0801f04f
   19188:	0800f04f 	.word	0x0800f04f
   1918c:	eb0a19a6 	.word	0xeb0a19a6
   19190:	f04f0508 	.word	0xf04f0508
   19194:	bf280800 	.word	0xbf280800
   19198:	0801f04f 	.word	0x0801f04f
   1919c:	44a82805 	.word	0x44a82805
   191a0:	d0296116 	.word	0xd0296116
   191a4:	6956694c 	.word	0x6956694c
   191a8:	9a04fba3 	.word	0x9a04fba3
   191ac:	0409eb18 	.word	0x0409eb18
   191b0:	f04fbf2c 	.word	0xf04fbf2c
   191b4:	f04f0801 	.word	0xf04f0801
   191b8:	19a60800 	.word	0x19a60800
   191bc:	0508eb0a 	.word	0x0508eb0a
   191c0:	0800f04f 	.word	0x0800f04f
   191c4:	f04fbf28 	.word	0xf04fbf28
   191c8:	28060801 	.word	0x28060801
   191cc:	615644a8 	.word	0x615644a8
   191d0:	698cd012 	.word	0x698cd012
   191d4:	fba36991 	.word	0xfba36991
   191d8:	eb144504 	.word	0xeb144504
   191dc:	bf2c0808 	.word	0xbf2c0808
   191e0:	23002301 	.word	0x23002301
   191e4:	0108eb11 	.word	0x0108eb11
   191e8:	0400f04f 	.word	0x0400f04f
   191ec:	2401bf28 	.word	0x2401bf28
   191f0:	eb04442b 	.word	0xeb04442b
   191f4:	61910803 	.word	0x61910803
   191f8:	0280eb02 	.word	0x0280eb02
   191fc:	23006815 	.word	0x23006815
   19200:	0508eb15 	.word	0x0508eb15
   19204:	2301bf28 	.word	0x2301bf28
   19208:	5b04f842 	.word	0x5b04f842
   1920c:	0801f04f 	.word	0x0801f04f
   19210:	d1f32b00 	.word	0xd1f32b00
   19214:	8ff0e8bd 	.word	0x8ff0e8bd
   19218:	0800f04f 	.word	0x0800f04f
   1921c:	bf00e6be 	.word	0xbf00e6be

00019220 <symbol_0002616>:
   19220:	2b006843 	.word	0x2b006843
   19224:	b430d033 	.word	0xb430d033
   19228:	4280f103 	.word	0x4280f103
   1922c:	3a016885 	.word	0x3a016885
   19230:	4022f855 	.word	0x4022f855
   19234:	0282eb05 	.word	0x0282eb05
   19238:	e009b11c 	.word	0xe009b11c
   1923c:	4d04f852 	.word	0x4d04f852
   19240:	3b01b934 	.word	0x3b01b934
   19244:	688bd1fa 	.word	0x688bd1fa
   19248:	b9d06818 	.word	0xb9d06818
   1924c:	4770bc30 	.word	0x4770bc30
   19250:	6812688a 	.word	0x6812688a
   19254:	2b01b192 	.word	0x2b01b192
   19258:	6800d810 	.word	0x6800d810
   1925c:	2800680b 	.word	0x2800680b
   19260:	2b00dd01 	.word	0x2b00dd01
   19264:	2b00db11 	.word	0x2b00db11
   19268:	2800dd01 	.word	0x2800dd01
   1926c:	682bdb16 	.word	0x682bdb16
   19270:	d8eb4293 	.word	0xd8eb4293
   19274:	bc30d306 	.word	0xbc30d306
   19278:	47702000 	.word	0x47702000
   1927c:	bc306800 	.word	0xbc306800
   19280:	68084770 	.word	0x68084770
   19284:	bc304240 	.word	0xbc304240
   19288:	20014770 	.word	0x20014770
   1928c:	688be7de 	.word	0x688be7de
   19290:	b9006818 	.word	0xb9006818
   19294:	68084770 	.word	0x68084770
   19298:	e7fb4240 	.word	0xe7fb4240
   1929c:	30fff04f 	.word	0x30fff04f
   192a0:	bf00e7d4 	.word	0xbf00e7d4

000192a4 <symbol_00038d0>:
   192a4:	2300b120 	.word	0x2300b120
   192a8:	e9c02201 	.word	0xe9c02201
   192ac:	60832300 	.word	0x60832300
   192b0:	bf004770 	.word	0xbf004770

000192b4 <symbol_000fb6e>:
   192b4:	b510b1b0 	.word	0xb510b1b0
   192b8:	68804604 	.word	0x68804604
   192bc:	6862b160 	.word	0x6862b160
   192c0:	b13a1e53 	.word	0xb13a1e53
   192c4:	3b012200 	.word	0x3b012200
   192c8:	60021c59 	.word	0x60021c59
   192cc:	0004f100 	.word	0x0004f100
   192d0:	68a0d1f9 	.word	0x68a0d1f9
   192d4:	fc4ef003 	.word	0xfc4ef003
   192d8:	22012300 	.word	0x22012300
   192dc:	2300e9c4 	.word	0x2300e9c4
   192e0:	bd1060a3 	.word	0xbd1060a3
   192e4:	bf004770 	.word	0xbf004770

000192e8 <symbol_0006423>:
   192e8:	6842b570 	.word	0x6842b570
   192ec:	428a4605 	.word	0x428a4605
   192f0:	d807460c 	.word	0xd807460c
   192f4:	7310f242 	.word	0x7310f242
   192f8:	d8514299 	.word	0xd8514299
   192fc:	d335428a 	.word	0xd335428a
   19300:	bd702000 	.word	0xbd702000
   19304:	d0101e51 	.word	0xd0101e51
   19308:	f8536883 	.word	0xf8536883
   1930c:	28000021 	.word	0x28000021
   19310:	f102d149 	.word	0xf102d149
   19314:	3a014280 	.word	0x3a014280
   19318:	0382eb03 	.word	0x0382eb03
   1931c:	f853e003 	.word	0xf853e003
   19320:	b9180d04 	.word	0xb9180d04
   19324:	1e4a4611 	.word	0x1e4a4611
   19328:	2101d1f9 	.word	0x2101d1f9
   1932c:	bf38428c 	.word	0xbf38428c
   19330:	2104460c 	.word	0x2104460c
   19334:	f0034620 	.word	0xf0034620
   19338:	4606fc09 	.word	0x4606fc09
   1933c:	68a9b380 	.word	0x68a9b380
   19340:	00a2b181 	.word	0x00a2b181
   19344:	fe94f009 	.word	0xfe94f009
   19348:	2001e9d5 	.word	0x2001e9d5
   1934c:	b13a1e53 	.word	0xb13a1e53
   19350:	3b012200 	.word	0x3b012200
   19354:	60021c59 	.word	0x60021c59
   19358:	0004f100 	.word	0x0004f100
   1935c:	68a8d1f9 	.word	0x68a8d1f9
   19360:	fc08f003 	.word	0xfc08f003
   19364:	4601e9c5 	.word	0x4601e9c5
   19368:	bd702000 	.word	0xbd702000
   1936c:	46202104 	.word	0x46202104
   19370:	fbecf003 	.word	0xfbecf003
   19374:	b1984606 	.word	0xb1984606
   19378:	290068a9 	.word	0x290068a9
   1937c:	686ad0f2 	.word	0x686ad0f2
   19380:	f0090092 	.word	0xf0090092
   19384:	e9d5fe75 	.word	0xe9d5fe75
   19388:	1e532001 	.word	0x1e532001
   1938c:	d0e72a00 	.word	0xd0e72a00
   19390:	3b012200 	.word	0x3b012200
   19394:	60021c59 	.word	0x60021c59
   19398:	0004f100 	.word	0x0004f100
   1939c:	e7ded1f9 	.word	0xe7ded1f9
   193a0:	000ff06f 	.word	0x000ff06f
   193a4:	4611bd70 	.word	0x4611bd70
   193a8:	bf00e7c0 	.word	0xbf00e7c0

000193ac <symbol_00084df>:
   193ac:	d0524288 	.word	0xd0524288
   193b0:	688ab5f8 	.word	0x688ab5f8
   193b4:	4605460e 	.word	0x4605460e
   193b8:	d04e2a00 	.word	0xd04e2a00
   193bc:	1e4b6849 	.word	0x1e4b6849
   193c0:	f852d00e 	.word	0xf852d00e
   193c4:	28000023 	.word	0x28000023
   193c8:	f101d13b 	.word	0xf101d13b
   193cc:	39014180 	.word	0x39014180
   193d0:	0281eb02 	.word	0x0281eb02
   193d4:	f852e002 	.word	0xf852e002
   193d8:	bb900d04 	.word	0xbb900d04
   193dc:	d1fa3b01 	.word	0xd1fa3b01
   193e0:	68332401 	.word	0x68332401
   193e4:	686a602b 	.word	0x686a602b
   193e8:	d30c42a2 	.word	0xd30c42a2
   193ec:	009268af 	.word	0x009268af
   193f0:	46382100 	.word	0x46382100
   193f4:	fe66f009 	.word	0xfe66f009
   193f8:	68b100a2 	.word	0x68b100a2
   193fc:	f00968a8 	.word	0xf00968a8
   19400:	2000fe37 	.word	0x2000fe37
   19404:	2104bdf8 	.word	0x2104bdf8
   19408:	f0034620 	.word	0xf0034620
   1940c:	4607fb9f 	.word	0x4607fb9f
   19410:	68a9b1f0 	.word	0x68a9b1f0
   19414:	686ab189 	.word	0x686ab189
   19418:	f0090092 	.word	0xf0090092
   1941c:	e9d5fe29 	.word	0xe9d5fe29
   19420:	1e532001 	.word	0x1e532001
   19424:	2200b13a 	.word	0x2200b13a
   19428:	1c593b01 	.word	0x1c593b01
   1942c:	f1006002 	.word	0xf1006002
   19430:	d1f90004 	.word	0xd1f90004
   19434:	f00368a8 	.word	0xf00368a8
   19438:	4622fb9d 	.word	0x4622fb9d
   1943c:	4701e9c5 	.word	0x4701e9c5
   19440:	f242e7d5 	.word	0xf242e7d5
   19444:	68317210 	.word	0x68317210
   19448:	42941c5c 	.word	0x42941c5c
   1944c:	d9ca6029 	.word	0xd9ca6029
   19450:	000ff06f 	.word	0x000ff06f
   19454:	2000bdf8 	.word	0x2000bdf8
   19458:	28004770 	.word	0x28004770
   1945c:	6880d0d1 	.word	0x6880d0d1
   19460:	6869b158 	.word	0x6869b158
   19464:	b1311e4b 	.word	0xb1311e4b
   19468:	1c5c3b01 	.word	0x1c5c3b01
   1946c:	f1006002 	.word	0xf1006002
   19470:	d1f90004 	.word	0xd1f90004
   19474:	f00368a8 	.word	0xf00368a8
   19478:	2000fb7d 	.word	0x2000fb7d
   1947c:	e9c52301 	.word	0xe9c52301
   19480:	60a83000 	.word	0x60a83000
   19484:	bf00bdf8 	.word	0xbf00bdf8

00019488 <symbol_000fa6b>:
   19488:	684bb5f0 	.word	0x684bb5f0
   1948c:	b085460d 	.word	0xb085460d
   19490:	46064614 	.word	0x46064614
   19494:	b17b6851 	.word	0xb17b6851
   19498:	f10368a8 	.word	0xf10368a8
   1949c:	3a014280 	.word	0x3a014280
   194a0:	7022f850 	.word	0x7022f850
   194a4:	0082eb00 	.word	0x0082eb00
   194a8:	e04fb127 	.word	0xe04fb127
   194ac:	2d04f850 	.word	0x2d04f850
   194b0:	d14b2a00 	.word	0xd14b2a00
   194b4:	d1f93b01 	.word	0xd1f93b01
   194b8:	f101b189 	.word	0xf101b189
   194bc:	68a74080 	.word	0x68a74080
   194c0:	f8573801 	.word	0xf8573801
   194c4:	2a002020 	.word	0x2a002020
   194c8:	8099f040 	.word	0x8099f040
   194cc:	0080eb07 	.word	0x0080eb07
   194d0:	f850e003 	.word	0xf850e003
   194d4:	2a002d04 	.word	0x2a002d04
   194d8:	3901d142 	.word	0x3901d142
   194dc:	2300d1f9 	.word	0x2300d1f9
   194e0:	42b42201 	.word	0x42b42201
   194e4:	2301e9cd 	.word	0x2301e9cd
   194e8:	d07f9303 	.word	0xd07f9303
   194ec:	d00542b5 	.word	0xd00542b5
   194f0:	46304629 	.word	0x46304629
   194f4:	ff5af7ff 	.word	0xff5af7ff
   194f8:	b9a84607 	.word	0xb9a84607
   194fc:	60332301 	.word	0x60332301
   19500:	b1806860 	.word	0xb1806860
   19504:	c008f8d4 	.word	0xc008f8d4
   19508:	4380f100 	.word	0x4380f100
   1950c:	f85c3b01 	.word	0xf85c3b01
   19510:	eb0c2023 	.word	0xeb0c2023
   19514:	b1220383 	.word	0xb1220383
   19518:	f853e042 	.word	0xf853e042
   1951c:	2a002d04 	.word	0x2a002d04
   19520:	3801d13e 	.word	0x3801d13e
   19524:	2700d1f9 	.word	0x2700d1f9
   19528:	b1609803 	.word	0xb1609803
   1952c:	1e539a02 	.word	0x1e539a02
   19530:	2200b13a 	.word	0x2200b13a
   19534:	1c593b01 	.word	0x1c593b01
   19538:	f1006002 	.word	0xf1006002
   1953c:	d1f90004 	.word	0xd1f90004
   19540:	f0039803 	.word	0xf0039803
   19544:	4638fb17 	.word	0x4638fb17
   19548:	bdf0b005 	.word	0xbdf0b005
   1954c:	d0c62900 	.word	0xd0c62900
   19550:	4080f101 	.word	0x4080f101
   19554:	380168a7 	.word	0x380168a7
   19558:	2020f857 	.word	0x2020f857
   1955c:	d0b52a00 	.word	0xd0b52a00
   19560:	d8bc428b 	.word	0xd8bc428b
   19564:	2b00d34b 	.word	0x2b00d34b
   19568:	68a8d0b9 	.word	0x68a8d0b9
   1956c:	4180f103 	.word	0x4180f103
   19570:	f8503901 	.word	0xf8503901
   19574:	f857c021 	.word	0xf857c021
   19578:	0089e021 	.word	0x0089e021
   1957c:	440845e6 	.word	0x440845e6
   19580:	0201eb07 	.word	0x0201eb07
   19584:	d83ad3ab 	.word	0xd83ad3ab
   19588:	e0064601 	.word	0xe0064601
   1958c:	7d04f851 	.word	0x7d04f851
   19590:	0d04f852 	.word	0x0d04f852
   19594:	d8a24287 	.word	0xd8a24287
   19598:	3b01d331 	.word	0x3b01d331
   1959c:	e79ed1f6 	.word	0xe79ed1f6
   195a0:	462b2500 	.word	0x462b2500
   195a4:	f85168b1 	.word	0xf85168b1
   195a8:	35016b04 	.word	0x35016b04
   195ac:	f8411af2 	.word	0xf8411af2
   195b0:	f85c2c04 	.word	0xf85c2c04
   195b4:	460c7b04 	.word	0x460c7b04
   195b8:	bf2c42ba 	.word	0xbf2c42ba
   195bc:	0e00f04f 	.word	0x0e00f04f
   195c0:	0e01f04f 	.word	0x0e01f04f
   195c4:	429e1bd2 	.word	0x429e1bd2
   195c8:	4673bf2c 	.word	0x4673bf2c
   195cc:	0301f10e 	.word	0x0301f10e
   195d0:	f8414285 	.word	0xf8414285
   195d4:	d3e62c04 	.word	0xd3e62c04
   195d8:	e7a4b90b 	.word	0xe7a4b90b
   195dc:	68222301 	.word	0x68222301
   195e0:	429a1ad1 	.word	0x429a1ad1
   195e4:	1b04f844 	.word	0x1b04f844
   195e8:	e79cd3f8 	.word	0xe79cd3f8
   195ec:	a8014621 	.word	0xa8014621
   195f0:	fedcf7ff 	.word	0xfedcf7ff
   195f4:	28004607 	.word	0x28004607
   195f8:	ac01d196 	.word	0xac01d196
   195fc:	f06fe776 	.word	0xf06fe776
   19600:	46380709 	.word	0x46380709
   19604:	bdf0b005 	.word	0xbdf0b005

00019608 <symbol_0006ccd>:
   19608:	7310f242 	.word	0x7310f242
   1960c:	41f0e92d 	.word	0x41f0e92d
   19610:	4256684f 	.word	0x4256684f
   19614:	429f4316 	.word	0x429f4316
   19618:	16c0f3c6 	.word	0x16c0f3c6
   1961c:	6842d84f 	.word	0x6842d84f
   19620:	42974604 	.word	0x42974604
   19624:	d82c460d 	.word	0xd82c460d
   19628:	68236829 	.word	0x68236829
   1962c:	f106fb01 	.word	0xf106fb01
   19630:	0701f1c6 	.word	0x0701f1c6
   19634:	1307fb03 	.word	0x1307fb03
   19638:	686b6023 	.word	0x686b6023
   1963c:	2300b18b 	.word	0x2300b18b
   19640:	68aa68a1 	.word	0x68aa68a1
   19644:	0023f851 	.word	0x0023f851
   19648:	2023f852 	.word	0x2023f852
   1964c:	f007fb00 	.word	0xf007fb00
   19650:	0206fb02 	.word	0x0206fb02
   19654:	2023f841 	.word	0x2023f841
   19658:	3301686a 	.word	0x3301686a
   1965c:	d8ef429a 	.word	0xd8ef429a
   19660:	42936862 	.word	0x42936862
   19664:	009ad20a 	.word	0x009ad20a
   19668:	330168a0 	.word	0x330168a0
   1966c:	fb075881 	.word	0xfb075881
   19670:	5081f101 	.word	0x5081f101
   19674:	32046861 	.word	0x32046861
   19678:	d8f54299 	.word	0xd8f54299
   1967c:	e8bd2000 	.word	0xe8bd2000
   19680:	210481f0 	.word	0x210481f0
   19684:	f0034638 	.word	0xf0034638
   19688:	4680fa61 	.word	0x4680fa61
   1968c:	68a1b1b8 	.word	0x68a1b1b8
   19690:	6862b189 	.word	0x6862b189
   19694:	f0090092 	.word	0xf0090092
   19698:	e9d4fceb 	.word	0xe9d4fceb
   1969c:	1e532001 	.word	0x1e532001
   196a0:	2200b13a 	.word	0x2200b13a
   196a4:	1c593b01 	.word	0x1c593b01
   196a8:	f1006002 	.word	0xf1006002
   196ac:	d1f90004 	.word	0xd1f90004
   196b0:	f00368a0 	.word	0xf00368a0
   196b4:	463afa5f 	.word	0x463afa5f
   196b8:	7801e9c4 	.word	0x7801e9c4
   196bc:	f06fe7b4 	.word	0xf06fe7b4
   196c0:	e7dc000f 	.word	0xe7dc000f

000196c4 <symbol_000b345>:
   196c4:	6845b5f8 	.word	0x6845b5f8
   196c8:	460e4604 	.word	0x460e4604
   196cc:	6887b19d 	.word	0x6887b19d
   196d0:	463800aa 	.word	0x463800aa
   196d4:	f0092100 	.word	0xf0092100
   196d8:	2e00fcf5 	.word	0x2e00fcf5
   196dc:	2301bfac 	.word	0x2301bfac
   196e0:	33fff04f 	.word	0x33fff04f
   196e4:	71e6ea86 	.word	0x71e6ea86
   196e8:	eba168a2 	.word	0xeba168a2
   196ec:	601171e6 	.word	0x601171e6
   196f0:	20006023 	.word	0x20006023
   196f4:	2104bdf8 	.word	0x2104bdf8
   196f8:	f0032001 	.word	0xf0032001
   196fc:	4607fa27 	.word	0x4607fa27
   19700:	68a1b1b8 	.word	0x68a1b1b8
   19704:	6862b181 	.word	0x6862b181
   19708:	f0090092 	.word	0xf0090092
   1970c:	e9d4fcb1 	.word	0xe9d4fcb1
   19710:	1e532001 	.word	0x1e532001
   19714:	3b01b132 	.word	0x3b01b132
   19718:	60051c5a 	.word	0x60051c5a
   1971c:	0004f100 	.word	0x0004f100
   19720:	68a0d1f9 	.word	0x68a0d1f9
   19724:	fa26f003 	.word	0xfa26f003
   19728:	22042301 	.word	0x22042301
   1972c:	3701e9c4 	.word	0x3701e9c4
   19730:	f06fe7cf 	.word	0xf06fe7cf
   19734:	bdf8000f 	.word	0xbdf8000f

00019738 <symbol_0007f0f>:
   19738:	ebb16843 	.word	0xebb16843
   1973c:	d2091f43 	.word	0xd2091f43
   19740:	094a6883 	.word	0x094a6883
   19744:	0022f853 	.word	0x0022f853
   19748:	011ff001 	.word	0x011ff001
   1974c:	f00040c8 	.word	0xf00040c8
   19750:	47700001 	.word	0x47700001
   19754:	47702000 	.word	0x47702000

00019758 <symbol_00030c0>:
   19758:	b3136843 	.word	0xb3136843
   1975c:	6882b410 	.word	0x6882b410
   19760:	d0241e58 	.word	0xd0241e58
   19764:	1020f852 	.word	0x1020f852
   19768:	f103b9e9 	.word	0xf103b9e9
   1976c:	3b014380 	.word	0x3b014380
   19770:	0383eb02 	.word	0x0383eb02
   19774:	f853e002 	.word	0xf853e002
   19778:	b9a11d04 	.word	0xb9a11d04
   1977c:	d1fa3801 	.word	0xd1fa3801
   19780:	68112420 	.word	0x68112420
   19784:	f04f2200 	.word	0xf04f2200
   19788:	e0024300 	.word	0xe0024300
   1978c:	2a203201 	.word	0x2a203201
   19790:	420bd004 	.word	0x420bd004
   19794:	0353ea4f 	.word	0x0353ea4f
   19798:	1aa0d0f8 	.word	0x1aa0d0f8
   1979c:	4b04f85d 	.word	0x4b04f85d
   197a0:	46184770 	.word	0x46184770
   197a4:	01404770 	.word	0x01404770
   197a8:	0420f100 	.word	0x0420f100
   197ac:	6811e7ea 	.word	0x6811e7ea
   197b0:	e7e72420 	.word	0xe7e72420

000197b4 <symbol_000b7da>:
   197b4:	b3236843 	.word	0xb3236843
   197b8:	6882b410 	.word	0x6882b410
   197bc:	d0261e58 	.word	0xd0261e58
   197c0:	1020f852 	.word	0x1020f852
   197c4:	f103b9f9 	.word	0xf103b9f9
   197c8:	3b014380 	.word	0x3b014380
   197cc:	0383eb02 	.word	0x0383eb02
   197d0:	f853e002 	.word	0xf853e002
   197d4:	b9b11d04 	.word	0xb9b11d04
   197d8:	d1fa3801 	.word	0xd1fa3801
   197dc:	68112420 	.word	0x68112420
   197e0:	f04f2200 	.word	0xf04f2200
   197e4:	e0024300 	.word	0xe0024300
   197e8:	2a203201 	.word	0x2a203201
   197ec:	420bd004 	.word	0x420bd004
   197f0:	0353ea4f 	.word	0x0353ea4f
   197f4:	1aa0d0f8 	.word	0x1aa0d0f8
   197f8:	08c03007 	.word	0x08c03007
   197fc:	4b04f85d 	.word	0x4b04f85d
   19800:	46184770 	.word	0x46184770
   19804:	01404770 	.word	0x01404770
   19808:	0420f100 	.word	0x0420f100
   1980c:	6811e7e8 	.word	0x6811e7e8
   19810:	e7e52420 	.word	0xe7e52420

00019814 <symbol_000eaf4>:
   19814:	43f8e92d 	.word	0x43f8e92d
   19818:	460f4605 	.word	0x460f4605
   1981c:	2a004616 	.word	0x2a004616
   19820:	780cd07e 	.word	0x780cd07e
   19824:	b124460b 	.word	0xb124460b
   19828:	f813e07e 	.word	0xf813e07e
   1982c:	2a002f01 	.word	0x2a002f01
   19830:	3401d146 	.word	0x3401d146
   19834:	d1f842a6 	.word	0xd1f842a6
   19838:	8004f8d5 	.word	0x8004f8d5
   1983c:	0f00f1b8 	.word	0x0f00f1b8
   19840:	2104d169 	.word	0x2104d169
   19844:	f0032001 	.word	0xf0032001
   19848:	4681f981 	.word	0x4681f981
   1984c:	d06d2800 	.word	0xd06d2800
   19850:	b18968a9 	.word	0xb18968a9
   19854:	0092686a 	.word	0x0092686a
   19858:	fc0af009 	.word	0xfc0af009
   1985c:	2001e9d5 	.word	0x2001e9d5
   19860:	b13a1e53 	.word	0xb13a1e53
   19864:	3b014642 	.word	0x3b014642
   19868:	60021c59 	.word	0x60021c59
   1986c:	0004f100 	.word	0x0004f100
   19870:	68a8d1f9 	.word	0x68a8d1f9
   19874:	f97ef003 	.word	0xf97ef003
   19878:	22042301 	.word	0x22042301
   1987c:	3901e9c5 	.word	0x3901e9c5
   19880:	46482100 	.word	0x46482100
   19884:	fc1ef009 	.word	0xfc1ef009
   19888:	22012300 	.word	0x22012300
   1988c:	42a668a9 	.word	0x42a668a9
   19890:	602a600b 	.word	0x602a600b
   19894:	eb07d911 	.word	0xeb07d911
   19898:	1b340c06 	.word	0x1b340c06
   1989c:	f02368ae 	.word	0xf02368ae
   198a0:	00df0103 	.word	0x00df0103
   198a4:	0d01f81c 	.word	0x0d01f81c
   198a8:	f0075872 	.word	0xf0075872
   198ac:	40b80718 	.word	0x40b80718
   198b0:	43023301 	.word	0x43023301
   198b4:	507242a3 	.word	0x507242a3
   198b8:	2000d1f0 	.word	0x2000d1f0
   198bc:	83f8e8bd 	.word	0x83f8e8bd
   198c0:	f0121b32 	.word	0xf0121b32
   198c4:	bf180803 	.word	0xbf180803
   198c8:	0801f04f 	.word	0x0801f04f
   198cc:	7310f242 	.word	0x7310f242
   198d0:	0892eb08 	.word	0x0892eb08
   198d4:	d8294598 	.word	0xd8294598
   198d8:	4598686b 	.word	0x4598686b
   198dc:	2104d929 	.word	0x2104d929
   198e0:	f0034640 	.word	0xf0034640
   198e4:	4681f933 	.word	0x4681f933
   198e8:	68a9b300 	.word	0x68a9b300
   198ec:	686ab189 	.word	0x686ab189
   198f0:	f0090092 	.word	0xf0090092
   198f4:	e9d5fbbd 	.word	0xe9d5fbbd
   198f8:	1e532001 	.word	0x1e532001
   198fc:	2200b13a 	.word	0x2200b13a
   19900:	1c593b01 	.word	0x1c593b01
   19904:	f1006002 	.word	0xf1006002
   19908:	d1f90004 	.word	0xd1f90004
   1990c:	f00368a8 	.word	0xf00368a8
   19910:	e9c5f931 	.word	0xe9c5f931
   19914:	ea4f8901 	.word	0xea4f8901
   19918:	f8d50288 	.word	0xf8d50288
   1991c:	e7af9008 	.word	0xe7af9008
   19920:	8004f8d0 	.word	0x8004f8d0
   19924:	e7894614 	.word	0xe7894614
   19928:	e7ca2400 	.word	0xe7ca2400
   1992c:	000ff06f 	.word	0x000ff06f
   19930:	4698e7c4 	.word	0x4698e7c4
   19934:	bf00e782 	.word	0xbf00e782

00019938 <symbol_000116e>:
   19938:	41f0e92d 	.word	0x41f0e92d
   1993c:	46886844 	.word	0x46886844
   19940:	d03e2c00 	.word	0xd03e2c00
   19944:	1e624615 	.word	0x1e624615
   19948:	68804607 	.word	0x68804607
   1994c:	f850d040 	.word	0xf850d040
   19950:	bb991022 	.word	0xbb991022
   19954:	4380f104 	.word	0x4380f104
   19958:	eb003b01 	.word	0xeb003b01
   1995c:	e0020383 	.word	0xe0020383
   19960:	1d04f853 	.word	0x1d04f853
   19964:	3a01bb51 	.word	0x3a01bb51
   19968:	2627d1fa 	.word	0x2627d1fa
   1996c:	22006801 	.word	0x22006801
   19970:	4300f04f 	.word	0x4300f04f
   19974:	3201e002 	.word	0x3201e002
   19978:	d0032a20 	.word	0xd0032a20
   1997c:	ea4f420b 	.word	0xea4f420b
   19980:	d0f80353 	.word	0xd0f80353
   19984:	08f61ab6 	.word	0x08f61ab6
   19988:	d32442b5 	.word	0xd32442b5
   1998c:	2100462a 	.word	0x2100462a
   19990:	f0094640 	.word	0xf0094640
   19994:	b176fb97 	.word	0xb176fb97
   19998:	44a82300 	.word	0x44a82300
   1999c:	f02368b9 	.word	0xf02368b9
   199a0:	588c0203 	.word	0x588c0203
   199a4:	f00500dd 	.word	0xf00500dd
   199a8:	33010518 	.word	0x33010518
   199ac:	42b340ec 	.word	0x42b340ec
   199b0:	4d01f808 	.word	0x4d01f808
   199b4:	2000d1f2 	.word	0x2000d1f2
   199b8:	81f0e8bd 	.word	0x81f0e8bd
   199bc:	36270156 	.word	0x36270156
   199c0:	4608e7d5 	.word	0x4608e7d5
   199c4:	f0094621 	.word	0xf0094621
   199c8:	4620fb7d 	.word	0x4620fb7d
   199cc:	81f0e8bd 	.word	0x81f0e8bd
   199d0:	26276801 	.word	0x26276801
   199d4:	f06fe7cb 	.word	0xf06fe7cb
   199d8:	e7ed0007 	.word	0xe7ed0007

000199dc <symbol_0004fb7>:
   199dc:	41f0e92d 	.word	0x41f0e92d
   199e0:	46046843 	.word	0x46046843
   199e4:	f001094d 	.word	0xf001094d
   199e8:	b343061f 	.word	0xb343061f
   199ec:	f8d01e5a 	.word	0xf8d01e5a
   199f0:	f000e008 	.word	0xf000e008
   199f4:	f85e8099 	.word	0xf85e8099
   199f8:	f1bcc022 	.word	0xf1bcc022
   199fc:	f0400f00 	.word	0xf0400f00
   19a00:	f103809c 	.word	0xf103809c
   19a04:	38014080 	.word	0x38014080
   19a08:	0080eb0e 	.word	0x0080eb0e
   19a0c:	f850e003 	.word	0xf850e003
   19a10:	2f007d04 	.word	0x2f007d04
   19a14:	3a01d15e 	.word	0x3a01d15e
   19a18:	f04fd1f9 	.word	0xf04fd1f9
   19a1c:	f8de0820 	.word	0xf8de0820
   19a20:	20007000 	.word	0x20007000
   19a24:	4200f04f 	.word	0x4200f04f
   19a28:	3001e002 	.word	0x3001e002
   19a2c:	d0052820 	.word	0xd0052820
   19a30:	ea4f423a 	.word	0xea4f423a
   19a34:	d0f80252 	.word	0xd0f80252
   19a38:	0c00eba8 	.word	0x0c00eba8
   19a3c:	ebb14461 	.word	0xebb14461
   19a40:	d90b1f43 	.word	0xd90b1f43
   19a44:	021ff011 	.word	0x021ff011
   19a48:	2201bf18 	.word	0x2201bf18
   19a4c:	7010f242 	.word	0x7010f242
   19a50:	1751eb02 	.word	0x1751eb02
   19a54:	d86d4287 	.word	0xd86d4287
   19a58:	d840429f 	.word	0xd840429f
   19a5c:	429db1f5 	.word	0x429db1f5
   19a60:	f06fd25d 	.word	0xf06fd25d
   19a64:	1b7f4740 	.word	0x1b7f4740
   19a68:	ebc719da 	.word	0xebc719da
   19a6c:	00927787 	.word	0x00927787
   19a70:	68a000bf 	.word	0x68a000bf
   19a74:	19c13b01 	.word	0x19c13b01
   19a78:	44115880 	.word	0x44115880
   19a7c:	f841429d 	.word	0xf841429d
   19a80:	f1a20c04 	.word	0xf1a20c04
   19a84:	d1f40204 	.word	0xd1f40204
   19a88:	f1032100 	.word	0xf1032100
   19a8c:	3b014380 	.word	0x3b014380
   19a90:	68a2009b 	.word	0x68a2009b
   19a94:	3b0450d1 	.word	0x3b0450d1
   19a98:	d1fa1d1a 	.word	0xd1fa1d1a
   19a9c:	6863b1be 	.word	0x6863b1be
   19aa0:	d214429d 	.word	0xd214429d
   19aa4:	f1c62700 	.word	0xf1c62700
   19aa8:	00ab0c20 	.word	0x00ab0c20
   19aac:	350168a0 	.word	0x350168a0
   19ab0:	fa0158c1 	.word	0xfa0158c1
   19ab4:	50c2f206 	.word	0x50c2f206
   19ab8:	58c268a0 	.word	0x58c268a0
   19abc:	50c2433a 	.word	0x50c2433a
   19ac0:	fa216862 	.word	0xfa216862
   19ac4:	42aaf70c 	.word	0x42aaf70c
   19ac8:	0304f103 	.word	0x0304f103
   19acc:	2000d8ee 	.word	0x2000d8ee
   19ad0:	81f0e8bd 	.word	0x81f0e8bd
   19ad4:	1c42ea4f 	.word	0x1c42ea4f
   19ad8:	0820f10c 	.word	0x0820f10c
   19adc:	2104e7a1 	.word	0x2104e7a1
   19ae0:	f0034638 	.word	0xf0034638
   19ae4:	4680f833 	.word	0x4680f833
   19ae8:	68a1b320 	.word	0x68a1b320
   19aec:	6862b189 	.word	0x6862b189
   19af0:	f0090092 	.word	0xf0090092
   19af4:	e9d4fabd 	.word	0xe9d4fabd
   19af8:	1e532001 	.word	0x1e532001
   19afc:	2200b13a 	.word	0x2200b13a
   19b00:	1c593b01 	.word	0x1c593b01
   19b04:	f1006002 	.word	0xf1006002
   19b08:	d1f90004 	.word	0xd1f90004
   19b0c:	f00368a0 	.word	0xf00368a0
   19b10:	463bf831 	.word	0x463bf831
   19b14:	7801e9c4 	.word	0x7801e9c4
   19b18:	d0bf2d00 	.word	0xd0bf2d00
   19b1c:	2b00e79f 	.word	0x2b00e79f
   19b20:	2e00d1b2 	.word	0x2e00d1b2
   19b24:	e7d2d1bb 	.word	0xe7d2d1bb
   19b28:	7000f8de 	.word	0x7000f8de
   19b2c:	f04f4694 	.word	0xf04f4694
   19b30:	e7760820 	.word	0xe7760820
   19b34:	000ff06f 	.word	0x000ff06f
   19b38:	0152e7ca 	.word	0x0152e7ca
   19b3c:	f1024667 	.word	0xf1024667
   19b40:	46940820 	.word	0x46940820
   19b44:	bf00e76d 	.word	0xbf00e76d

00019b48 <symbol_0000994>:
   19b48:	6844b5f8 	.word	0x6844b5f8
   19b4c:	42ac094d 	.word	0x42ac094d
   19b50:	f001d33a 	.word	0xf001d33a
   19b54:	d032011f 	.word	0xd032011f
   19b58:	2300b1b5 	.word	0x2300b1b5
   19b5c:	688400aa 	.word	0x688400aa
   19b60:	320458a6 	.word	0x320458a6
   19b64:	6023f844 	.word	0x6023f844
   19b68:	33016844 	.word	0x33016844
   19b6c:	429e1b66 	.word	0x429e1b66
   19b70:	429cd8f5 	.word	0x429cd8f5
   19b74:	2500d908 	.word	0x2500d908
   19b78:	6884009a 	.word	0x6884009a
   19b7c:	50a53301 	.word	0x50a53301
   19b80:	32046844 	.word	0x32046844
   19b84:	d8f8429c 	.word	0xd8f8429c
   19b88:	b1b4b1b9 	.word	0xb1b4b1b9
   19b8c:	f1042700 	.word	0xf1042700
   19b90:	3b014380 	.word	0x3b014380
   19b94:	f1c1009b 	.word	0xf1c1009b
   19b98:	68860c20 	.word	0x68860c20
   19b9c:	58f53c01 	.word	0x58f53c01
   19ba0:	f201fa25 	.word	0xf201fa25
   19ba4:	688650f2 	.word	0x688650f2
   19ba8:	ea4258f2 	.word	0xea4258f2
   19bac:	50f20207 	.word	0x50f20207
   19bb0:	f70cfa05 	.word	0xf70cfa05
   19bb4:	0304f1a3 	.word	0x0304f1a3
   19bb8:	2000d1ef 	.word	0x2000d1ef
   19bbc:	b919bdf8 	.word	0xb919bdf8
   19bc0:	d0fa2c00 	.word	0xd0fa2c00
   19bc4:	e7d6460b 	.word	0xe7d6460b
   19bc8:	b1644605 	.word	0xb1644605
   19bcc:	00a26886 	.word	0x00a26886
   19bd0:	21004630 	.word	0x21004630
   19bd4:	fa76f009 	.word	0xfa76f009
   19bd8:	22012300 	.word	0x22012300
   19bdc:	461868a9 	.word	0x461868a9
   19be0:	602a600b 	.word	0x602a600b
   19be4:	2104bdf8 	.word	0x2104bdf8
   19be8:	f0022001 	.word	0xf0022001
   19bec:	4606ffaf 	.word	0x4606ffaf
   19bf0:	68a9b1b8 	.word	0x68a9b1b8
   19bf4:	686ab181 	.word	0x686ab181
   19bf8:	f0090092 	.word	0xf0090092
   19bfc:	e9d5fa39 	.word	0xe9d5fa39
   19c00:	1e532001 	.word	0x1e532001
   19c04:	3b01b132 	.word	0x3b01b132
   19c08:	60041c5a 	.word	0x60041c5a
   19c0c:	0004f100 	.word	0x0004f100
   19c10:	68a8d1f9 	.word	0x68a8d1f9
   19c14:	ffaef002 	.word	0xffaef002
   19c18:	22042301 	.word	0x22042301
   19c1c:	3601e9c5 	.word	0x3601e9c5
   19c20:	f06fe7d6 	.word	0xf06fe7d6
   19c24:	bdf8000f 	.word	0xbdf8000f

00019c28 <symbol_000242f>:
   19c28:	6843b470 	.word	0x6843b470
   19c2c:	b173684a 	.word	0xb173684a
   19c30:	f1036884 	.word	0xf1036884
   19c34:	3d014580 	.word	0x3d014580
   19c38:	6025f854 	.word	0x6025f854
   19c3c:	0485eb04 	.word	0x0485eb04
   19c40:	e01ab11e 	.word	0xe01ab11e
   19c44:	5d04f854 	.word	0x5d04f854
   19c48:	3b01b9bd 	.word	0x3b01b9bd
   19c4c:	b18ad1fa 	.word	0xb18ad1fa
   19c50:	4480f102 	.word	0x4480f102
   19c54:	3c01688e 	.word	0x3c01688e
   19c58:	5024f856 	.word	0x5024f856
   19c5c:	eb06b9cd 	.word	0xeb06b9cd
   19c60:	e0020484 	.word	0xe0020484
   19c64:	5d04f854 	.word	0x5d04f854
   19c68:	3a01b98d 	.word	0x3a01b98d
   19c6c:	2b00d1fa 	.word	0x2b00d1fa
   19c70:	6802d037 	.word	0x6802d037
   19c74:	bc704610 	.word	0xbc704610
   19c78:	2a004770 	.word	0x2a004770
   19c7c:	f102d0f9 	.word	0xf102d0f9
   19c80:	688e4480 	.word	0x688e4480
   19c84:	f8563c01 	.word	0xf8563c01
   19c88:	2d005024 	.word	0x2d005024
   19c8c:	4293d0e7 	.word	0x4293d0e7
   19c90:	4293d8ef 	.word	0x4293d8ef
   19c94:	d2036809 	.word	0xd2036809
   19c98:	424abc70 	.word	0x424abc70
   19c9c:	47704610 	.word	0x47704610
   19ca0:	2a006802 	.word	0x2a006802
   19ca4:	2900dd01 	.word	0x2900dd01
   19ca8:	2900db24 	.word	0x2900db24
   19cac:	2a00dd01 	.word	0x2a00dd01
   19cb0:	b1b3db1d 	.word	0xb1b3db1d
   19cb4:	f1036884 	.word	0xf1036884
   19cb8:	39014180 	.word	0x39014180
   19cbc:	5021f854 	.word	0x5021f854
   19cc0:	0021f856 	.word	0x0021f856
   19cc4:	42850089 	.word	0x42850089
   19cc8:	4431440c 	.word	0x4431440c
   19ccc:	d30cd8d2 	.word	0xd30cd8d2
   19cd0:	d0063b01 	.word	0xd0063b01
   19cd4:	5d04f854 	.word	0x5d04f854
   19cd8:	0d04f851 	.word	0x0d04f851
   19cdc:	d9f64285 	.word	0xd9f64285
   19ce0:	461ae7c8 	.word	0x461ae7c8
   19ce4:	4610bc70 	.word	0x4610bc70
   19ce8:	42524770 	.word	0x42524770
   19cec:	f04fe7c2 	.word	0xf04fe7c2
   19cf0:	e7bf32ff 	.word	0xe7bf32ff
   19cf4:	e7bd2201 	.word	0xe7bd2201

00019cf8 <symbol_000ccad>:
   19cf8:	2900b4f0 	.word	0x2900b4f0
   19cfc:	68434605 	.word	0x68434605
   19d00:	2b00db32 	.word	0x2b00db32
   19d04:	6886d042 	.word	0x6886d042
   19d08:	4280f103 	.word	0x4280f103
   19d0c:	f8563a01 	.word	0xf8563a01
   19d10:	eb060022 	.word	0xeb060022
   19d14:	b9680282 	.word	0xb9680282
   19d18:	30fff04f 	.word	0x30fff04f
   19d1c:	e0022701 	.word	0xe0022701
   19d20:	4d04f852 	.word	0x4d04f852
   19d24:	3b01b93c 	.word	0x3b01b93c
   19d28:	2900d1fa 	.word	0x2900d1fa
   19d2c:	2000bf08 	.word	0x2000bf08
   19d30:	4770bcf0 	.word	0x4770bcf0
   19d34:	b1a12701 	.word	0xb1a12701
   19d38:	d8122b01 	.word	0xd8122b01
   19d3c:	28006828 	.word	0x28006828
   19d40:	1c7bdd01 	.word	0x1c7bdd01
   19d44:	2f01d01e 	.word	0x2f01d01e
   19d48:	2800d101 	.word	0x2800d101
   19d4c:	2900db24 	.word	0x2900db24
   19d50:	bfb86833 	.word	0xbfb86833
   19d54:	42994249 	.word	0x42994249
   19d58:	d815d3ea 	.word	0xd815d3ea
   19d5c:	2000bcf0 	.word	0x2000bcf0
   19d60:	68284770 	.word	0x68284770
   19d64:	4770bcf0 	.word	0x4770bcf0
   19d68:	6886b163 	.word	0x6886b163
   19d6c:	4280f103 	.word	0x4280f103
   19d70:	f8563a01 	.word	0xf8563a01
   19d74:	eb060022 	.word	0xeb060022
   19d78:	b9500282 	.word	0xb9500282
   19d7c:	f04f2001 	.word	0xf04f2001
   19d80:	e7d037ff 	.word	0xe7d037ff
   19d84:	e7d32001 	.word	0xe7d32001
   19d88:	e7d14240 	.word	0xe7d14240
   19d8c:	30fff04f 	.word	0x30fff04f
   19d90:	f04fe7cb 	.word	0xf04fe7cb
   19d94:	e7cf37ff 	.word	0xe7cf37ff
   19d98:	30fff04f 	.word	0x30fff04f
   19d9c:	bf00e7c8 	.word	0xbf00e7c8

00019da0 <symbol_000c914>:
   19da0:	e92d4290 	.word	0xe92d4290
   19da4:	460747f0 	.word	0x460747f0
   19da8:	d006460c 	.word	0xd006460c
   19dac:	46154288 	.word	0x46154288
   19db0:	f7ffd002 	.word	0xf7ffd002
   19db4:	b9a0fafb 	.word	0xb9a0fafb
   19db8:	2301462c 	.word	0x2301462c
   19dbc:	6865603b 	.word	0x6865603b
   19dc0:	68a3b175 	.word	0x68a3b175
   19dc4:	4280f105 	.word	0x4280f105
   19dc8:	f8533a01 	.word	0xf8533a01
   19dcc:	eb031022 	.word	0xeb031022
   19dd0:	b1190282 	.word	0xb1190282
   19dd4:	f852e007 	.word	0xf852e007
   19dd8:	b9211d04 	.word	0xb9211d04
   19ddc:	d1fa3d01 	.word	0xd1fa3d01
   19de0:	e8bd2000 	.word	0xe8bd2000
   19de4:	f24287f0 	.word	0xf24287f0
   19de8:	42957210 	.word	0x42957210
   19dec:	687ad875 	.word	0x687ad875
   19df0:	d27642aa 	.word	0xd27642aa
   19df4:	46282104 	.word	0x46282104
   19df8:	fea8f002 	.word	0xfea8f002
   19dfc:	28004606 	.word	0x28004606
   19e00:	68b9d06b 	.word	0x68b9d06b
   19e04:	687ab189 	.word	0x687ab189
   19e08:	f0090092 	.word	0xf0090092
   19e0c:	e9d7f931 	.word	0xe9d7f931
   19e10:	1e532001 	.word	0x1e532001
   19e14:	2200b13a 	.word	0x2200b13a
   19e18:	1c593b01 	.word	0x1c593b01
   19e1c:	f1006002 	.word	0xf1006002
   19e20:	d1f90004 	.word	0xd1f90004
   19e24:	f00268b8 	.word	0xf00268b8
   19e28:	e9c7fea5 	.word	0xe9c7fea5
   19e2c:	68a35601 	.word	0x68a35601
   19e30:	ea4f2400 	.word	0xea4f2400
   19e34:	f1a30a85 	.word	0xf1a30a85
   19e38:	eb060c04 	.word	0xeb060c04
   19e3c:	2200000a 	.word	0x2200000a
   19e40:	f10c6833 	.word	0xf10c6833
   19e44:	f8dc0c04 	.word	0xf8dc0c04
   19e48:	191b1000 	.word	0x191b1000
   19e4c:	bf284614 	.word	0xbf284614
   19e50:	185b2201 	.word	0x185b2201
   19e54:	2401bf28 	.word	0x2401bf28
   19e58:	3b04f846 	.word	0x3b04f846
   19e5c:	44144286 	.word	0x44144286
   19e60:	2c00d1ed 	.word	0x2c00d1ed
   19e64:	f242d0bc 	.word	0xf242d0bc
   19e68:	f04f7810 	.word	0xf04f7810
   19e6c:	e00f0900 	.word	0xe00f0900
   19e70:	eb0568bd 	.word	0xeb0568bd
   19e74:	6803000a 	.word	0x6803000a
   19e78:	191c2200 	.word	0x191c2200
   19e7c:	2201bf28 	.word	0x2201bf28
   19e80:	4b04f840 	.word	0x4b04f840
   19e84:	0a04f10a 	.word	0x0a04f10a
   19e88:	24014635 	.word	0x24014635
   19e8c:	d0a72a00 	.word	0xd0a72a00
   19e90:	1c6e687b 	.word	0x1c6e687b
   19e94:	d8ee42ab 	.word	0xd8ee42ab
   19e98:	d81e4546 	.word	0xd81e4546
   19e9c:	d2e742b3 	.word	0xd2e742b3
   19ea0:	46302104 	.word	0x46302104
   19ea4:	fe52f002 	.word	0xfe52f002
   19ea8:	b1b04605 	.word	0xb1b04605
   19eac:	b18968b9 	.word	0xb18968b9
   19eb0:	0092687a 	.word	0x0092687a
   19eb4:	f8dcf009 	.word	0xf8dcf009
   19eb8:	2001e9d7 	.word	0x2001e9d7
   19ebc:	b13a1e53 	.word	0xb13a1e53
   19ec0:	1c5a3b01 	.word	0x1c5a3b01
   19ec4:	9000f8c0 	.word	0x9000f8c0
   19ec8:	0004f100 	.word	0x0004f100
   19ecc:	68b8d1f8 	.word	0x68b8d1f8
   19ed0:	fe50f002 	.word	0xfe50f002
   19ed4:	6501e9c7 	.word	0x6501e9c7
   19ed8:	f06fe7cb 	.word	0xf06fe7cb
   19edc:	e8bd000f 	.word	0xe8bd000f
   19ee0:	68be87f0 	.word	0x68be87f0
   19ee4:	bf00e7a4 	.word	0xbf00e7a4

00019ee8 <symbol_0004fdf>:
   19ee8:	684bb5f0 	.word	0x684bb5f0
   19eec:	b085460d 	.word	0xb085460d
   19ef0:	46064614 	.word	0x46064614
   19ef4:	b17b6851 	.word	0xb17b6851
   19ef8:	f10368a8 	.word	0xf10368a8
   19efc:	3a014280 	.word	0x3a014280
   19f00:	7022f850 	.word	0x7022f850
   19f04:	0082eb00 	.word	0x0082eb00
   19f08:	e04fb127 	.word	0xe04fb127
   19f0c:	2d04f850 	.word	0x2d04f850
   19f10:	d14b2a00 	.word	0xd14b2a00
   19f14:	d1f93b01 	.word	0xd1f93b01
   19f18:	f101b189 	.word	0xf101b189
   19f1c:	68a74080 	.word	0x68a74080
   19f20:	f8573801 	.word	0xf8573801
   19f24:	2a002020 	.word	0x2a002020
   19f28:	8099f040 	.word	0x8099f040
   19f2c:	0080eb07 	.word	0x0080eb07
   19f30:	f850e003 	.word	0xf850e003
   19f34:	2a002d04 	.word	0x2a002d04
   19f38:	3901d142 	.word	0x3901d142
   19f3c:	2300d1f9 	.word	0x2300d1f9
   19f40:	42b42201 	.word	0x42b42201
   19f44:	2301e9cd 	.word	0x2301e9cd
   19f48:	d07f9303 	.word	0xd07f9303
   19f4c:	d00542b5 	.word	0xd00542b5
   19f50:	46304629 	.word	0x46304629
   19f54:	fa2af7ff 	.word	0xfa2af7ff
   19f58:	b9a84607 	.word	0xb9a84607
   19f5c:	60332301 	.word	0x60332301
   19f60:	b1806860 	.word	0xb1806860
   19f64:	c008f8d4 	.word	0xc008f8d4
   19f68:	4380f100 	.word	0x4380f100
   19f6c:	f85c3b01 	.word	0xf85c3b01
   19f70:	eb0c2023 	.word	0xeb0c2023
   19f74:	b1220383 	.word	0xb1220383
   19f78:	f853e042 	.word	0xf853e042
   19f7c:	2a002d04 	.word	0x2a002d04
   19f80:	3801d13e 	.word	0x3801d13e
   19f84:	2700d1f9 	.word	0x2700d1f9
   19f88:	b1609803 	.word	0xb1609803
   19f8c:	1e539a02 	.word	0x1e539a02
   19f90:	2200b13a 	.word	0x2200b13a
   19f94:	1c593b01 	.word	0x1c593b01
   19f98:	f1006002 	.word	0xf1006002
   19f9c:	d1f90004 	.word	0xd1f90004
   19fa0:	f0029803 	.word	0xf0029803
   19fa4:	4638fde7 	.word	0x4638fde7
   19fa8:	bdf0b005 	.word	0xbdf0b005
   19fac:	d0c62900 	.word	0xd0c62900
   19fb0:	4080f101 	.word	0x4080f101
   19fb4:	380168a7 	.word	0x380168a7
   19fb8:	2020f857 	.word	0x2020f857
   19fbc:	d0b52a00 	.word	0xd0b52a00
   19fc0:	d8bc428b 	.word	0xd8bc428b
   19fc4:	2b00d34b 	.word	0x2b00d34b
   19fc8:	68a8d0b9 	.word	0x68a8d0b9
   19fcc:	4180f103 	.word	0x4180f103
   19fd0:	f8503901 	.word	0xf8503901
   19fd4:	f857c021 	.word	0xf857c021
   19fd8:	0089e021 	.word	0x0089e021
   19fdc:	440845e6 	.word	0x440845e6
   19fe0:	0201eb07 	.word	0x0201eb07
   19fe4:	d83ad3ab 	.word	0xd83ad3ab
   19fe8:	e0064601 	.word	0xe0064601
   19fec:	7d04f851 	.word	0x7d04f851
   19ff0:	0d04f852 	.word	0x0d04f852
   19ff4:	d8a24287 	.word	0xd8a24287
   19ff8:	3b01d331 	.word	0x3b01d331
   19ffc:	e79ed1f6 	.word	0xe79ed1f6
   1a000:	462b2500 	.word	0x462b2500
   1a004:	f85168b1 	.word	0xf85168b1
   1a008:	35016b04 	.word	0x35016b04
   1a00c:	f8411af2 	.word	0xf8411af2
   1a010:	f85c2c04 	.word	0xf85c2c04
   1a014:	460c7b04 	.word	0x460c7b04
   1a018:	bf2c42ba 	.word	0xbf2c42ba
   1a01c:	0e00f04f 	.word	0x0e00f04f
   1a020:	0e01f04f 	.word	0x0e01f04f
   1a024:	429e1bd2 	.word	0x429e1bd2
   1a028:	4673bf2c 	.word	0x4673bf2c
   1a02c:	0301f10e 	.word	0x0301f10e
   1a030:	f8414285 	.word	0xf8414285
   1a034:	d3e62c04 	.word	0xd3e62c04
   1a038:	e7a4b90b 	.word	0xe7a4b90b
   1a03c:	68222301 	.word	0x68222301
   1a040:	429a1ad1 	.word	0x429a1ad1
   1a044:	1b04f844 	.word	0x1b04f844
   1a048:	e79cd3f8 	.word	0xe79cd3f8
   1a04c:	a8014621 	.word	0xa8014621
   1a050:	f9acf7ff 	.word	0xf9acf7ff
   1a054:	28004607 	.word	0x28004607
   1a058:	ac01d196 	.word	0xac01d196
   1a05c:	f06fe776 	.word	0xf06fe776
   1a060:	46380709 	.word	0x46380709
   1a064:	bdf0b005 	.word	0xbdf0b005

0001a068 <symbol_0005cc7>:
   1a068:	41f0e92d 	.word	0x41f0e92d
   1a06c:	6813680c 	.word	0x6813680c
   1a070:	fb034605 	.word	0xfb034605
   1a074:	2b00f304 	.word	0x2b00f304
   1a078:	684bda39 	.word	0x684bda39
   1a07c:	460e4617 	.word	0x460e4617
   1a080:	b1836852 	.word	0xb1836852
   1a084:	f1036889 	.word	0xf1036889
   1a088:	38014080 	.word	0x38014080
   1a08c:	c020f851 	.word	0xc020f851
   1a090:	0180eb01 	.word	0x0180eb01
   1a094:	0f00f1bc 	.word	0x0f00f1bc
   1a098:	e02ed003 	.word	0xe02ed003
   1a09c:	0d04f851 	.word	0x0d04f851
   1a0a0:	3b01bb58 	.word	0x3b01bb58
   1a0a4:	b17ad1fa 	.word	0xb17ad1fa
   1a0a8:	4180f102 	.word	0x4180f102
   1a0ac:	c008f8d7 	.word	0xc008f8d7
   1a0b0:	f85c3901 	.word	0xf85c3901
   1a0b4:	b9780021 	.word	0xb9780021
   1a0b8:	0181eb0c 	.word	0x0181eb0c
   1a0bc:	f851e002 	.word	0xf851e002
   1a0c0:	bb280d04 	.word	0xbb280d04
   1a0c4:	d1fa3a01 	.word	0xd1fa3a01
   1a0c8:	4631463a 	.word	0x4631463a
   1a0cc:	f7ff4628 	.word	0xf7ff4628
   1a0d0:	b148ff0b 	.word	0xb148ff0b
   1a0d4:	81f0e8bd 	.word	0x81f0e8bd
   1a0d8:	46394632 	.word	0x46394632
   1a0dc:	f7ff4628 	.word	0xf7ff4628
   1a0e0:	2800ff03 	.word	0x2800ff03
   1a0e4:	4264d1f6 	.word	0x4264d1f6
   1a0e8:	e8bd602c 	.word	0xe8bd602c
   1a0ec:	f7ff81f0 	.word	0xf7ff81f0
   1a0f0:	2800fe57 	.word	0x2800fe57
   1a0f4:	602cd1ee 	.word	0x602cd1ee
   1a0f8:	2a00e7f7 	.word	0x2a00e7f7
   1a0fc:	f102d0e4 	.word	0xf102d0e4
   1a100:	f8d74180 	.word	0xf8d74180
   1a104:	3901c008 	.word	0x3901c008
   1a108:	0021f85c 	.word	0x0021f85c
   1a10c:	d0d32800 	.word	0xd0d32800
   1a110:	d8d94293 	.word	0xd8d94293
   1a114:	2b00d3e0 	.word	0x2b00d3e0
   1a118:	68b0d0d6 	.word	0x68b0d0d6
   1a11c:	4180f103 	.word	0x4180f103
   1a120:	f8503901 	.word	0xf8503901
   1a124:	f85c8021 	.word	0xf85c8021
   1a128:	0089e021 	.word	0x0089e021
   1a12c:	440845f0 	.word	0x440845f0
   1a130:	0201eb0c 	.word	0x0201eb0c
   1a134:	d3cfd8c8 	.word	0xd3cfd8c8
   1a138:	e0064601 	.word	0xe0064601
   1a13c:	cd04f851 	.word	0xcd04f851
   1a140:	0d04f852 	.word	0x0d04f852
   1a144:	d8bf4584 	.word	0xd8bf4584
   1a148:	3b01d3c6 	.word	0x3b01d3c6
   1a14c:	e7bbd1f6 	.word	0xe7bbd1f6

0001a150 <symbol_000d773>:
   1a150:	41f0e92d 	.word	0x41f0e92d
   1a154:	6813680c 	.word	0x6813680c
   1a158:	fb034605 	.word	0xfb034605
   1a15c:	2b00f304 	.word	0x2b00f304
   1a160:	684bdd64 	.word	0x684bdd64
   1a164:	460e4617 	.word	0x460e4617
   1a168:	b1836852 	.word	0xb1836852
   1a16c:	f1036889 	.word	0xf1036889
   1a170:	38014080 	.word	0x38014080
   1a174:	c020f851 	.word	0xc020f851
   1a178:	0180eb01 	.word	0x0180eb01
   1a17c:	0f00f1bc 	.word	0x0f00f1bc
   1a180:	e01fd003 	.word	0xe01fd003
   1a184:	0d04f851 	.word	0x0d04f851
   1a188:	3b01b9e0 	.word	0x3b01b9e0
   1a18c:	b182d1fa 	.word	0xb182d1fa
   1a190:	4180f102 	.word	0x4180f102
   1a194:	c008f8d7 	.word	0xc008f8d7
   1a198:	f85c3901 	.word	0xf85c3901
   1a19c:	28000021 	.word	0x28000021
   1a1a0:	eb0cd13b 	.word	0xeb0cd13b
   1a1a4:	e0020181 	.word	0xe0020181
   1a1a8:	0d04f851 	.word	0x0d04f851
   1a1ac:	3a01b9a8 	.word	0x3a01b9a8
   1a1b0:	463ad1fa 	.word	0x463ad1fa
   1a1b4:	46284631 	.word	0x46284631
   1a1b8:	fe96f7ff 	.word	0xfe96f7ff
   1a1bc:	602cb900 	.word	0x602cb900
   1a1c0:	81f0e8bd 	.word	0x81f0e8bd
   1a1c4:	d0f42a00 	.word	0xd0f42a00
   1a1c8:	4180f102 	.word	0x4180f102
   1a1cc:	c008f8d7 	.word	0xc008f8d7
   1a1d0:	f85c3901 	.word	0xf85c3901
   1a1d4:	28000021 	.word	0x28000021
   1a1d8:	4293d0e3 	.word	0x4293d0e3
   1a1dc:	d31cd8e9 	.word	0xd31cd8e9
   1a1e0:	d0e62b00 	.word	0xd0e62b00
   1a1e4:	f10368b0 	.word	0xf10368b0
   1a1e8:	39014180 	.word	0x39014180
   1a1ec:	8021f850 	.word	0x8021f850
   1a1f0:	e021f85c 	.word	0xe021f85c
   1a1f4:	45f00089 	.word	0x45f00089
   1a1f8:	eb0c4408 	.word	0xeb0c4408
   1a1fc:	d8d80201 	.word	0xd8d80201
   1a200:	4601d30b 	.word	0x4601d30b
   1a204:	f851e006 	.word	0xf851e006
   1a208:	f852cd04 	.word	0xf852cd04
   1a20c:	45840d04 	.word	0x45840d04
   1a210:	d302d8cf 	.word	0xd302d8cf
   1a214:	d1f63b01 	.word	0xd1f63b01
   1a218:	4632e7cb 	.word	0x4632e7cb
   1a21c:	46284639 	.word	0x46284639
   1a220:	fe62f7ff 	.word	0xfe62f7ff
   1a224:	d1cb2800 	.word	0xd1cb2800
   1a228:	e7c84264 	.word	0xe7c84264
   1a22c:	fdb8f7ff 	.word	0xfdb8f7ff
   1a230:	d0c42800 	.word	0xd0c42800
   1a234:	81f0e8bd 	.word	0x81f0e8bd

0001a238 <symbol_000f268>:
   1a238:	bfac2a00 	.word	0xbfac2a00
   1a23c:	f04f2301 	.word	0xf04f2301
   1a240:	b5f033ff 	.word	0xb5f033ff
   1a244:	680d2601 	.word	0x680d2601
   1a248:	7ce2ea82 	.word	0x7ce2ea82
   1a24c:	f703fb05 	.word	0xf703fb05
   1a250:	ebacb085 	.word	0xebacb085
   1a254:	2f007ce2 	.word	0x2f007ce2
   1a258:	e9cd9602 	.word	0xe9cd9602
   1a25c:	f8cdc300 	.word	0xf8cdc300
   1a260:	4606d00c 	.word	0x4606d00c
   1a264:	684bdd2c 	.word	0x684bdd2c
   1a268:	b173460c 	.word	0xb173460c
   1a26c:	f10368a7 	.word	0xf10368a7
   1a270:	39014180 	.word	0x39014180
   1a274:	0021f857 	.word	0x0021f857
   1a278:	0181eb07 	.word	0x0181eb07
   1a27c:	e00eb118 	.word	0xe00eb118
   1a280:	0d04f851 	.word	0x0d04f851
   1a284:	3b01b958 	.word	0x3b01b958
   1a288:	b982d1fa 	.word	0xb982d1fa
   1a28c:	aa014621 	.word	0xaa014621
   1a290:	f7ff4630 	.word	0xf7ff4630
   1a294:	b900f8f9 	.word	0xb900f8f9
   1a298:	b0056035 	.word	0xb0056035
   1a29c:	2a00bdf0 	.word	0x2a00bdf0
   1a2a0:	2b01d0f4 	.word	0x2b01d0f4
   1a2a4:	683bd8f2 	.word	0x683bd8f2
   1a2a8:	d3ef459c 	.word	0xd3ef459c
   1a2ac:	4622d9ee 	.word	0x4622d9ee
   1a2b0:	4630a901 	.word	0x4630a901
   1a2b4:	fe18f7ff 	.word	0xfe18f7ff
   1a2b8:	d1ee2800 	.word	0xd1ee2800
   1a2bc:	e7eb426d 	.word	0xe7eb426d
   1a2c0:	f7ffaa01 	.word	0xf7ffaa01
   1a2c4:	2800fd6d 	.word	0x2800fd6d
   1a2c8:	b005d0e6 	.word	0xb005d0e6
   1a2cc:	bf00bdf0 	.word	0xbf00bdf0

0001a2d0 <symbol_000b923>:
   1a2d0:	47f0e92d 	.word	0x47f0e92d
   1a2d4:	23004606 	.word	0x23004606
   1a2d8:	b0862001 	.word	0xb0862001
   1a2dc:	4690428e 	.word	0x4690428e
   1a2e0:	90039000 	.word	0x90039000
   1a2e4:	3301e9cd 	.word	0x3301e9cd
   1a2e8:	3304e9cd 	.word	0x3304e9cd
   1a2ec:	80d1f000 	.word	0x80d1f000
   1a2f0:	4546460f 	.word	0x4546460f
   1a2f4:	80d5f000 	.word	0x80d5f000
   1a2f8:	b185687d 	.word	0xb185687d
   1a2fc:	f10568bb 	.word	0xf10568bb
   1a300:	3a014280 	.word	0x3a014280
   1a304:	1022f853 	.word	0x1022f853
   1a308:	0382eb03 	.word	0x0382eb03
   1a30c:	e0bab129 	.word	0xe0bab129
   1a310:	2d04f853 	.word	0x2d04f853
   1a314:	f0402a00 	.word	0xf0402a00
   1a318:	3d0180b6 	.word	0x3d0180b6
   1a31c:	f8d8d1f8 	.word	0xf8d8d1f8
   1a320:	25004004 	.word	0x25004004
   1a324:	d03d2c00 	.word	0xd03d2c00
   1a328:	3008f8d8 	.word	0x3008f8d8
   1a32c:	4280f104 	.word	0x4280f104
   1a330:	f8533a01 	.word	0xf8533a01
   1a334:	eb031022 	.word	0xeb031022
   1a338:	b1190382 	.word	0xb1190382
   1a33c:	f853e004 	.word	0xf853e004
   1a340:	b90a2d04 	.word	0xb90a2d04
   1a344:	d1fa3c01 	.word	0xd1fa3c01
   1a348:	7310f242 	.word	0x7310f242
   1a34c:	0905eb04 	.word	0x0905eb04
   1a350:	f2004599 	.word	0xf2004599
   1a354:	f8d680b0 	.word	0xf8d680b0
   1a358:	45d1a004 	.word	0x45d1a004
   1a35c:	2104d925 	.word	0x2104d925
   1a360:	f0024648 	.word	0xf0024648
   1a364:	4682fbf3 	.word	0x4682fbf3
   1a368:	f0002800 	.word	0xf0002800
   1a36c:	68b180a4 	.word	0x68b180a4
   1a370:	6872b189 	.word	0x6872b189
   1a374:	f0080092 	.word	0xf0080092
   1a378:	e9d6fe7b 	.word	0xe9d6fe7b
   1a37c:	1e532001 	.word	0x1e532001
   1a380:	2200b13a 	.word	0x2200b13a
   1a384:	1c593b01 	.word	0x1c593b01
   1a388:	f1006002 	.word	0xf1006002
   1a38c:	d1f90004 	.word	0xd1f90004
   1a390:	f00268b0 	.word	0xf00268b0
   1a394:	e9c6fbef 	.word	0xe9c6fbef
   1a398:	ea4f9a01 	.word	0xea4f9a01
   1a39c:	f8d60289 	.word	0xf8d60289
   1a3a0:	e0259008 	.word	0xe0259008
   1a3a4:	f8d64625 	.word	0xf8d64625
   1a3a8:	f1baa004 	.word	0xf1baa004
   1a3ac:	f0400f00 	.word	0xf0400f00
   1a3b0:	21048085 	.word	0x21048085
   1a3b4:	f0022001 	.word	0xf0022001
   1a3b8:	4681fbc9 	.word	0x4681fbc9
   1a3bc:	d07a2800 	.word	0xd07a2800
   1a3c0:	b18968b1 	.word	0xb18968b1
   1a3c4:	00926872 	.word	0x00926872
   1a3c8:	fe52f008 	.word	0xfe52f008
   1a3cc:	2001e9d6 	.word	0x2001e9d6
   1a3d0:	b13a1e53 	.word	0xb13a1e53
   1a3d4:	3b014652 	.word	0x3b014652
   1a3d8:	60021c59 	.word	0x60021c59
   1a3dc:	0004f100 	.word	0x0004f100
   1a3e0:	68b0d1f9 	.word	0x68b0d1f9
   1a3e4:	fbc6f002 	.word	0xfbc6f002
   1a3e8:	22042301 	.word	0x22042301
   1a3ec:	3901e9c6 	.word	0x3901e9c6
   1a3f0:	46482100 	.word	0x46482100
   1a3f4:	fe66f008 	.word	0xfe66f008
   1a3f8:	23012100 	.word	0x23012100
   1a3fc:	601168b2 	.word	0x601168b2
   1a400:	b19c6033 	.word	0xb19c6033
   1a404:	4980f104 	.word	0x4980f104
   1a408:	39fff109 	.word	0x39fff109
   1a40c:	0989ea4f 	.word	0x0989ea4f
   1a410:	3008f8d8 	.word	0x3008f8d8
   1a414:	f85368b2 	.word	0xf85368b2
   1a418:	444a3009 	.word	0x444a3009
   1a41c:	462868b9 	.word	0x462868b9
   1a420:	fc14f7fe 	.word	0xfc14f7fe
   1a424:	f1a93c01 	.word	0xf1a93c01
   1a428:	d1f10904 	.word	0xd1f10904
   1a42c:	683a2400 	.word	0x683a2400
   1a430:	3000f8d8 	.word	0x3000f8d8
   1a434:	f302fb03 	.word	0xf302fb03
   1a438:	98056033 	.word	0x98056033
   1a43c:	9a04b160 	.word	0x9a04b160
   1a440:	b13a1e53 	.word	0xb13a1e53
   1a444:	3b012200 	.word	0x3b012200
   1a448:	60021c5d 	.word	0x60021c5d
   1a44c:	0004f100 	.word	0x0004f100
   1a450:	9805d1f9 	.word	0x9805d1f9
   1a454:	fb8ef002 	.word	0xfb8ef002
   1a458:	23012200 	.word	0x23012200
   1a45c:	e9cd9802 	.word	0xe9cd9802
   1a460:	92053203 	.word	0x92053203
   1a464:	9901b158 	.word	0x9901b158
   1a468:	b1311e4b 	.word	0xb1311e4b
   1a46c:	1c593b01 	.word	0x1c593b01
   1a470:	f1006002 	.word	0xf1006002
   1a474:	d1f90004 	.word	0xd1f90004
   1a478:	f0029802 	.word	0xf0029802
   1a47c:	4620fb7b 	.word	0x4620fb7b
   1a480:	e8bdb006 	.word	0xe8bdb006
   1a484:	f8d887f0 	.word	0xf8d887f0
   1a488:	2c004004 	.word	0x2c004004
   1a48c:	af4cf47f 	.word	0xaf4cf47f
   1a490:	4668e75a 	.word	0x4668e75a
   1a494:	ff8af7fe 	.word	0xff8af7fe
   1a498:	28004604 	.word	0x28004604
   1a49c:	466fd1cd 	.word	0x466fd1cd
   1a4a0:	a803e727 	.word	0xa803e727
   1a4a4:	f7fe4631 	.word	0xf7fe4631
   1a4a8:	4604ff81 	.word	0x4604ff81
   1a4ac:	d1c42800 	.word	0xd1c42800
   1a4b0:	080cf10d 	.word	0x080cf10d
   1a4b4:	f06fe720 	.word	0xf06fe720
   1a4b8:	e7be040f 	.word	0xe7be040f
   1a4bc:	e76c46d1 	.word	0xe76c46d1

0001a4c0 <symbol_0008c0f>:
   1a4c0:	b5002301 	.word	0xb5002301
   1a4c4:	9200b085 	.word	0x9200b085
   1a4c8:	e9cdaa01 	.word	0xe9cdaa01
   1a4cc:	f8cd3301 	.word	0xf8cd3301
   1a4d0:	f7ffd00c 	.word	0xf7ffd00c
   1a4d4:	b005fefd 	.word	0xb005fefd
   1a4d8:	fb04f85d 	.word	0xfb04f85d

0001a4dc <symbol_0007bb0>:
   1a4dc:	4ff0e92d 	.word	0x4ff0e92d
   1a4e0:	b0a3685e 	.word	0xb0a3685e
   1a4e4:	f8d3b196 	.word	0xf8d3b196
   1a4e8:	f1068008 	.word	0xf1068008
   1a4ec:	f1094980 	.word	0xf1094980
   1a4f0:	f85839ff 	.word	0xf85839ff
   1a4f4:	eb085029 	.word	0xeb085029
   1a4f8:	b96d0e89 	.word	0xb96d0e89
   1a4fc:	463746f4 	.word	0x463746f4
   1a500:	f85ce002 	.word	0xf85ce002
   1a504:	b93c4d04 	.word	0xb93c4d04
   1a508:	d1fa3f01 	.word	0xd1fa3f01
   1a50c:	060bf06f 	.word	0x060bf06f
   1a510:	b0234630 	.word	0xb0234630
   1a514:	8ff0e8bd 	.word	0x8ff0e8bd
   1a518:	2d00681d 	.word	0x2d00681d
   1a51c:	4614d0f6 	.word	0x4614d0f6
   1a520:	2200468a 	.word	0x2200468a
   1a524:	469b2101 	.word	0x469b2101
   1a528:	46056863 	.word	0x46056863
   1a52c:	91139110 	.word	0x91139110
   1a530:	91199116 	.word	0x91199116
   1a534:	e9cd911c 	.word	0xe9cd911c
   1a538:	e9cd2211 	.word	0xe9cd2211
   1a53c:	e9cd2214 	.word	0xe9cd2214
   1a540:	e9cd2217 	.word	0xe9cd2217
   1a544:	e9cd221a 	.word	0xe9cd221a
   1a548:	2b00221d 	.word	0x2b00221d
   1a54c:	821af000 	.word	0x821af000
   1a550:	f10368a2 	.word	0xf10368a2
   1a554:	39014180 	.word	0x39014180
   1a558:	0021f852 	.word	0x0021f852
   1a55c:	0281eb02 	.word	0x0281eb02
   1a560:	e07bb120 	.word	0xe07bb120
   1a564:	1d04f852 	.word	0x1d04f852
   1a568:	d1772900 	.word	0xd1772900
   1a56c:	d1f93b01 	.word	0xd1f93b01
   1a570:	2029f858 	.word	0x2029f858
   1a574:	d1772a00 	.word	0xd1772a00
   1a578:	e0034672 	.word	0xe0034672
   1a57c:	1d04f852 	.word	0x1d04f852
   1a580:	d16f2900 	.word	0xd16f2900
   1a584:	d1f93e01 	.word	0xd1f93e01
   1a588:	4621a810 	.word	0x4621a810
   1a58c:	ff0ef7fe 	.word	0xff0ef7fe
   1a590:	28004606 	.word	0x28004606
   1a594:	8092f000 	.word	0x8092f000
   1a598:	98122700 	.word	0x98122700
   1a59c:	9a11b160 	.word	0x9a11b160
   1a5a0:	b13a1e53 	.word	0xb13a1e53
   1a5a4:	3b012200 	.word	0x3b012200
   1a5a8:	60021c5c 	.word	0x60021c5c
   1a5ac:	0004f100 	.word	0x0004f100
   1a5b0:	9812d1f9 	.word	0x9812d1f9
   1a5b4:	fadef002 	.word	0xfadef002
   1a5b8:	23012200 	.word	0x23012200
   1a5bc:	e9cd9815 	.word	0xe9cd9815
   1a5c0:	92123210 	.word	0x92123210
   1a5c4:	9914b158 	.word	0x9914b158
   1a5c8:	b1311e4b 	.word	0xb1311e4b
   1a5cc:	1c593b01 	.word	0x1c593b01
   1a5d0:	f1006002 	.word	0xf1006002
   1a5d4:	d1f90004 	.word	0xd1f90004
   1a5d8:	f0029815 	.word	0xf0029815
   1a5dc:	2200facb 	.word	0x2200facb
   1a5e0:	98182301 	.word	0x98182301
   1a5e4:	3213e9cd 	.word	0x3213e9cd
   1a5e8:	b1589215 	.word	0xb1589215
   1a5ec:	1e4b9917 	.word	0x1e4b9917
   1a5f0:	3b01b131 	.word	0x3b01b131
   1a5f4:	60021c5d 	.word	0x60021c5d
   1a5f8:	0004f100 	.word	0x0004f100
   1a5fc:	9818d1f9 	.word	0x9818d1f9
   1a600:	fab8f002 	.word	0xfab8f002
   1a604:	23012200 	.word	0x23012200
   1a608:	e9cd981b 	.word	0xe9cd981b
   1a60c:	92183216 	.word	0x92183216
   1a610:	991ab158 	.word	0x991ab158
   1a614:	b1311e4b 	.word	0xb1311e4b
   1a618:	1c5c3b01 	.word	0x1c5c3b01
   1a61c:	f1006002 	.word	0xf1006002
   1a620:	d1f90004 	.word	0xd1f90004
   1a624:	f002981b 	.word	0xf002981b
   1a628:	2100faa5 	.word	0x2100faa5
   1a62c:	911b2301 	.word	0x911b2301
   1a630:	3119e9cd 	.word	0x3119e9cd
   1a634:	f43f2f00 	.word	0xf43f2f00
   1a638:	9a1daf6b 	.word	0x9a1daf6b
   1a63c:	b1321e53 	.word	0xb1321e53
   1a640:	3b01463a 	.word	0x3b01463a
   1a644:	60111c58 	.word	0x60111c58
   1a648:	0204f102 	.word	0x0204f102
   1a64c:	4638d1f9 	.word	0x4638d1f9
   1a650:	fa90f002 	.word	0xfa90f002
   1a654:	b0234630 	.word	0xb0234630
   1a658:	8ff0e8bd 	.word	0x8ff0e8bd
   1a65c:	2029f858 	.word	0x2029f858
   1a660:	d0892a00 	.word	0xd0892a00
   1a664:	d38f429e 	.word	0xd38f429e
   1a668:	f200429e 	.word	0xf200429e
   1a66c:	2b008190 	.word	0x2b008190
   1a670:	68a1d08a 	.word	0x68a1d08a
   1a674:	4280f103 	.word	0x4280f103
   1a678:	f8513a01 	.word	0xf8513a01
   1a67c:	f8580022 	.word	0xf8580022
   1a680:	00926022 	.word	0x00926022
   1a684:	44114286 	.word	0x44114286
   1a688:	f4ff4490 	.word	0xf4ff4490
   1a68c:	f200af7d 	.word	0xf200af7d
   1a690:	460a817e 	.word	0x460a817e
   1a694:	f852e008 	.word	0xf852e008
   1a698:	f8580d04 	.word	0xf8580d04
   1a69c:	42881d04 	.word	0x42881d04
   1a6a0:	af72f63f 	.word	0xaf72f63f
   1a6a4:	8173f0c0 	.word	0x8173f0c0
   1a6a8:	d1f43b01 	.word	0xd1f43b01
   1a6ac:	4621a810 	.word	0x4621a810
   1a6b0:	fe7cf7fe 	.word	0xfe7cf7fe
   1a6b4:	28004606 	.word	0x28004606
   1a6b8:	af6ef47f 	.word	0xaf6ef47f
   1a6bc:	4659a813 	.word	0x4659a813
   1a6c0:	fe74f7fe 	.word	0xfe74f7fe
   1a6c4:	28004606 	.word	0x28004606
   1a6c8:	af66f47f 	.word	0xaf66f47f
   1a6cc:	7210f242 	.word	0x7210f242
   1a6d0:	68672301 	.word	0x68672301
   1a6d4:	37029313 	.word	0x37029313
   1a6d8:	93104297 	.word	0x93104297
   1a6dc:	8193f200 	.word	0x8193f200
   1a6e0:	805cf8dd 	.word	0x805cf8dd
   1a6e4:	d91d4547 	.word	0xd91d4547
   1a6e8:	46382104 	.word	0x46382104
   1a6ec:	fa2ef002 	.word	0xfa2ef002
   1a6f0:	28004681 	.word	0x28004681
   1a6f4:	8187f000 	.word	0x8187f000
   1a6f8:	b1819918 	.word	0xb1819918
   1a6fc:	00929a17 	.word	0x00929a17
   1a700:	fcb6f008 	.word	0xfcb6f008
   1a704:	2017e9dd 	.word	0x2017e9dd
   1a708:	b1321e53 	.word	0xb1321e53
   1a70c:	1c5a3b01 	.word	0x1c5a3b01
   1a710:	f1006006 	.word	0xf1006006
   1a714:	d1f90004 	.word	0xd1f90004
   1a718:	f0029818 	.word	0xf0029818
   1a71c:	46b8fa2b 	.word	0x46b8fa2b
   1a720:	7917e9cd 	.word	0x7917e9cd
   1a724:	0f00f1b8 	.word	0x0f00f1b8
   1a728:	8171f000 	.word	0x8171f000
   1a72c:	ea4f9e18 	.word	0xea4f9e18
   1a730:	27000288 	.word	0x27000288
   1a734:	46394630 	.word	0x46394630
   1a738:	fcc4f008 	.word	0xfcc4f008
   1a73c:	9b182201 	.word	0x9b182201
   1a740:	9b1a601f 	.word	0x9b1a601f
   1a744:	42939216 	.word	0x42939216
   1a748:	81b2f240 	.word	0x81b2f240
   1a74c:	20032104 	.word	0x20032104
   1a750:	f9fcf002 	.word	0xf9fcf002
   1a754:	28004607 	.word	0x28004607
   1a758:	8155f000 	.word	0x8155f000
   1a75c:	9a142303 	.word	0x9a142303
   1a760:	301de9cd 	.word	0x301de9cd
   1a764:	2a009203 	.word	0x2a009203
   1a768:	8171f000 	.word	0x8171f000
   1a76c:	0901f1b2 	.word	0x0901f1b2
   1a770:	f0009915 	.word	0xf0009915
   1a774:	f85181cf 	.word	0xf85181cf
   1a778:	28000029 	.word	0x28000029
   1a77c:	81c5f040 	.word	0x81c5f040
   1a780:	4280f102 	.word	0x4280f102
   1a784:	464b3a01 	.word	0x464b3a01
   1a788:	0282eb01 	.word	0x0282eb01
   1a78c:	f852e004 	.word	0xf852e004
   1a790:	28000d04 	.word	0x28000d04
   1a794:	81aef040 	.word	0x81aef040
   1a798:	d1f83b01 	.word	0xd1f83b01
   1a79c:	68082620 	.word	0x68082620
   1a7a0:	f04f2200 	.word	0xf04f2200
   1a7a4:	e0024100 	.word	0xe0024100
   1a7a8:	2a203201 	.word	0x2a203201
   1a7ac:	4201d004 	.word	0x4201d004
   1a7b0:	0151ea4f 	.word	0x0151ea4f
   1a7b4:	1ab3d0f8 	.word	0x1ab3d0f8
   1a7b8:	031ff003 	.word	0x031ff003
   1a7bc:	f0402b1f 	.word	0xf0402b1f
   1a7c0:	2300819f 	.word	0x2300819f
   1a7c4:	9b119302 	.word	0x9b119302
   1a7c8:	9304a813 	.word	0x9304a813
   1a7cc:	eba33b01 	.word	0xeba33b01
   1a7d0:	93010809 	.word	0x93010809
   1a7d4:	1348ea4f 	.word	0x1348ea4f
   1a7d8:	93054619 	.word	0x93054619
   1a7dc:	f8fef7ff 	.word	0xf8fef7ff
   1a7e0:	28004606 	.word	0x28004606
   1a7e4:	aed9f47f 	.word	0xaed9f47f
   1a7e8:	0888ea4f 	.word	0x0888ea4f
   1a7ec:	9818e00d 	.word	0x9818e00d
   1a7f0:	f850a910 	.word	0xf850a910
   1a7f4:	aa133008 	.word	0xaa133008
   1a7f8:	f8403301 	.word	0xf8403301
   1a7fc:	46083008 	.word	0x46083008
   1a800:	fca6f7ff 	.word	0xfca6f7ff
   1a804:	f0402800 	.word	0xf0402800
   1a808:	a9138179 	.word	0xa9138179
   1a80c:	f7ffa810 	.word	0xf7ffa810
   1a810:	2800fa0b 	.word	0x2800fa0b
   1a814:	9905daeb 	.word	0x9905daeb
   1a818:	f7ffa813 	.word	0xf7ffa813
   1a81c:	4606f995 	.word	0x4606f995
   1a820:	f47f2800 	.word	0xf47f2800
   1a824:	f06faeba 	.word	0xf06faeba
   1a828:	9a030303 	.word	0x9a030303
   1a82c:	b508e9cd 	.word	0xb508e9cd
   1a830:	4780f102 	.word	0x4780f102
   1a834:	fb039a04 	.word	0xfb039a04
   1a838:	f102f309 	.word	0xf102f309
   1a83c:	3a024280 	.word	0x3a024280
   1a840:	46150092 	.word	0x46150092
   1a844:	ea4f9305 	.word	0xea4f9305
   1a848:	93030389 	.word	0x93030389
   1a84c:	63c9ebc9 	.word	0x63c9ebc9
   1a850:	e9cd3f02 	.word	0xe9cd3f02
   1a854:	e9cd3006 	.word	0xe9cd3006
   1a858:	00b9a40a 	.word	0x00b9a40a
   1a85c:	9b019104 	.word	0x9b019104
   1a860:	f240454b 	.word	0xf240454b
   1a864:	98038173 	.word	0x98038173
   1a868:	9a159912 	.word	0x9a159912
   1a86c:	0a04f105 	.word	0x0a04f105
   1a870:	f8515812 	.word	0xf8515812
   1a874:	9805300a 	.word	0x9805300a
   1a878:	eb004293 	.word	0xeb004293
   1a87c:	9e180405 	.word	0x9e180405
   1a880:	814cf0c0 	.word	0x814cf0c0
   1a884:	33fff04f 	.word	0x33fff04f
   1a888:	26015133 	.word	0x26015133
   1a88c:	9f1e9a18 	.word	0x9f1e9a18
   1a890:	f1a55913 	.word	0xf1a55913
   1a894:	44330b04 	.word	0x44330b04
   1a898:	e04b5113 	.word	0xe04b5113
   1a89c:	806cf8dd 	.word	0x806cf8dd
   1a8a0:	46400092 	.word	0x46400092
   1a8a4:	f0082100 	.word	0xf0082100
   1a8a8:	2200fc0d 	.word	0x2200fc0d
   1a8ac:	601a9b1b 	.word	0x601a9b1b
   1a8b0:	f1b99619 	.word	0xf1b99619
   1a8b4:	f0000f00 	.word	0xf0000f00
   1a8b8:	9b1580f9 	.word	0x9b1580f9
   1a8bc:	589b9a04 	.word	0x589b9a04
   1a8c0:	99039a1b 	.word	0x99039a1b
   1a8c4:	9a156013 	.word	0x9a156013
   1a8c8:	58529b1b 	.word	0x58529b1b
   1a8cc:	605aa919 	.word	0x605aa919
   1a8d0:	f10d9b18 	.word	0xf10d9b18
   1a8d4:	591b083c 	.word	0x591b083c
   1a8d8:	4608aa1f 	.word	0x4608aa1f
   1a8dc:	e9cd930f 	.word	0xe9cd930f
   1a8e0:	f8cd661f 	.word	0xf8cd661f
   1a8e4:	f7ff8084 	.word	0xf7ff8084
   1a8e8:	2800fcf3 	.word	0x2800fcf3
   1a8ec:	8106f040 	.word	0x8106f040
   1a8f0:	2a009a1d 	.word	0x2a009a1d
   1a8f4:	80c2f000 	.word	0x80c2f000
   1a8f8:	21000092 	.word	0x21000092
   1a8fc:	f0084638 	.word	0xf0084638
   1a900:	2300fbe1 	.word	0x2300fbe1
   1a904:	9b01603b 	.word	0x9b01603b
   1a908:	2b01961c 	.word	0x2b01961c
   1a90c:	9b12a91c 	.word	0x9b12a91c
   1a910:	80edf000 	.word	0x80edf000
   1a914:	300bf853 	.word	0x300bf853
   1a918:	603ba819 	.word	0x603ba819
   1a91c:	595b9b12 	.word	0x595b9b12
   1a920:	9b12607b 	.word	0x9b12607b
   1a924:	300af853 	.word	0x300af853
   1a928:	f7ff60bb 	.word	0xf7ff60bb
   1a92c:	2800f97d 	.word	0x2800f97d
   1a930:	811cf340 	.word	0x811cf340
   1a934:	59139a18 	.word	0x59139a18
   1a938:	51133b01 	.word	0x51133b01
   1a93c:	2a009a1a 	.word	0x2a009a1a
   1a940:	2104d1ac 	.word	0x2104d1ac
   1a944:	f0022001 	.word	0xf0022001
   1a948:	4680f901 	.word	0x4680f901
   1a94c:	f0002800 	.word	0xf0002800
   1a950:	991b8140 	.word	0x991b8140
   1a954:	9a1ab191 	.word	0x9a1ab191
   1a958:	f0080092 	.word	0xf0080092
   1a95c:	e9ddfb89 	.word	0xe9ddfb89
   1a960:	4602101a 	.word	0x4602101a
   1a964:	b1391e4b 	.word	0xb1391e4b
   1a968:	3b012100 	.word	0x3b012100
   1a96c:	1c596011 	.word	0x1c596011
   1a970:	0204f102 	.word	0x0204f102
   1a974:	981bd1f8 	.word	0x981bd1f8
   1a978:	f8fcf002 	.word	0xf8fcf002
   1a97c:	e9cd2204 	.word	0xe9cd2204
   1a980:	e78e681a 	.word	0xe78e681a
   1a984:	2029f858 	.word	0x2029f858
   1a988:	f43f2a00 	.word	0xf43f2a00
   1a98c:	b355adf5 	.word	0xb355adf5
   1a990:	b9ee686e 	.word	0xb9ee686e
   1a994:	20012104 	.word	0x20012104
   1a998:	f8d8f002 	.word	0xf8d8f002
   1a99c:	b3904607 	.word	0xb3904607
   1a9a0:	b18168a9 	.word	0xb18168a9
   1a9a4:	0092686a 	.word	0x0092686a
   1a9a8:	fb62f008 	.word	0xfb62f008
   1a9ac:	2001e9d5 	.word	0x2001e9d5
   1a9b0:	b1321e53 	.word	0xb1321e53
   1a9b4:	1c593b01 	.word	0x1c593b01
   1a9b8:	f1006006 	.word	0xf1006006
   1a9bc:	d1f90004 	.word	0xd1f90004
   1a9c0:	f00268a8 	.word	0xf00268a8
   1a9c4:	2301f8d7 	.word	0x2301f8d7
   1a9c8:	e9c52204 	.word	0xe9c52204
   1a9cc:	e0013701 	.word	0xe0013701
   1a9d0:	00b268af 	.word	0x00b268af
   1a9d4:	46382100 	.word	0x46382100
   1a9d8:	fb74f008 	.word	0xfb74f008
   1a9dc:	23012100 	.word	0x23012100
   1a9e0:	601168aa 	.word	0x601168aa
   1a9e4:	f1ba602b 	.word	0xf1ba602b
   1a9e8:	d0070f00 	.word	0xd0070f00
   1a9ec:	46504621 	.word	0x46504621
   1a9f0:	fcdcf7fe 	.word	0xfcdcf7fe
   1a9f4:	28004606 	.word	0x28004606
   1a9f8:	adcef47f 	.word	0xadcef47f
   1a9fc:	46302600 	.word	0x46302600
   1aa00:	e8bdb023 	.word	0xe8bdb023
   1aa04:	27008ff0 	.word	0x27008ff0
   1aa08:	060ff06f 	.word	0x060ff06f
   1aa0c:	2104e5c5 	.word	0x2104e5c5
   1aa10:	f0022001 	.word	0xf0022001
   1aa14:	4606f89b 	.word	0x4606f89b
   1aa18:	d0f42800 	.word	0xd0f42800
   1aa1c:	b1899918 	.word	0xb1899918
   1aa20:	00929a17 	.word	0x00929a17
   1aa24:	fb24f008 	.word	0xfb24f008
   1aa28:	3017e9dd 	.word	0x3017e9dd
   1aa2c:	b13b1e5a 	.word	0xb13b1e5a
   1aa30:	3a014643 	.word	0x3a014643
   1aa34:	60031c57 	.word	0x60031c57
   1aa38:	0004f100 	.word	0x0004f100
   1aa3c:	9818d1f9 	.word	0x9818d1f9
   1aa40:	f898f002 	.word	0xf898f002
   1aa44:	22042301 	.word	0x22042301
   1aa48:	3617e9cd 	.word	0x3617e9cd
   1aa4c:	231fe671 	.word	0x231fe671
   1aa50:	93024619 	.word	0x93024619
   1aa54:	f7fea810 	.word	0xf7fea810
   1aa58:	4606ffc1 	.word	0x4606ffc1
   1aa5c:	f47f2800 	.word	0xf47f2800
   1aa60:	9902ad9c 	.word	0x9902ad9c
   1aa64:	f7fea813 	.word	0xf7fea813
   1aa68:	4606ffb9 	.word	0x4606ffb9
   1aa6c:	f47f2800 	.word	0xf47f2800
   1aa70:	9b14ad94 	.word	0x9b14ad94
   1aa74:	f1039303 	.word	0xf1039303
   1aa78:	e6a439ff 	.word	0xe6a439ff
   1aa7c:	20012104 	.word	0x20012104
   1aa80:	f002920d 	.word	0xf002920d
   1aa84:	4603f863 	.word	0x4603f863
   1aa88:	f0002800 	.word	0xf0002800
   1aa8c:	b14780a2 	.word	0xb14780a2
   1aa90:	46399a0d 	.word	0x46399a0d
   1aa94:	f008900c 	.word	0xf008900c
   1aa98:	4638faeb 	.word	0x4638faeb
   1aa9c:	f86af002 	.word	0xf86af002
   1aaa0:	461f9b0c 	.word	0x461f9b0c
   1aaa4:	e9cd2204 	.word	0xe9cd2204
   1aaa8:	e726631d 	.word	0xe726631d
   1aaac:	e707464b 	.word	0xe707464b
   1aab0:	20022104 	.word	0x20022104
   1aab4:	f84af002 	.word	0xf84af002
   1aab8:	28004606 	.word	0x28004606
   1aabc:	991bd0a3 	.word	0x991bd0a3
   1aac0:	9a1ab189 	.word	0x9a1ab189
   1aac4:	f0080092 	.word	0xf0080092
   1aac8:	e9ddfad3 	.word	0xe9ddfad3
   1aacc:	4618131a 	.word	0x4618131a
   1aad0:	b1311e4a 	.word	0xb1311e4a
   1aad4:	1c503a01 	.word	0x1c503a01
   1aad8:	f103601f 	.word	0xf103601f
   1aadc:	d1f90304 	.word	0xd1f90304
   1aae0:	f002981b 	.word	0xf002981b
   1aae4:	2302f847 	.word	0x2302f847
   1aae8:	361ae9cd 	.word	0x361ae9cd
   1aaec:	595be62e 	.word	0x595be62e
   1aaf0:	e715a819 	.word	0xe715a819
   1aaf4:	f103015b 	.word	0xf103015b
   1aaf8:	e6510620 	.word	0xe6510620
   1aafc:	e54c4606 	.word	0xe54c4606
   1ab00:	031ff1c3 	.word	0x031ff1c3
   1ab04:	46199302 	.word	0x46199302
   1ab08:	ea4fe7a4 	.word	0xea4fe7a4
   1ab0c:	f1031349 	.word	0xf1031349
   1ab10:	e6450620 	.word	0xe6450620
   1ab14:	26206808 	.word	0x26206808
   1ab18:	e641464b 	.word	0xe641464b
   1ab1c:	b192594f 	.word	0xb192594f
   1ab20:	f04f469c 	.word	0xf04f469c
   1ab24:	46610b00 	.word	0x46610b00
   1ab28:	ea4b465b 	.word	0xea4b465b
   1ab2c:	f7f10007 	.word	0xf7f10007
   1ab30:	2300fbc7 	.word	0x2300fbc7
   1ab34:	32fff04f 	.word	0x32fff04f
   1ab38:	bf08428b 	.word	0xbf08428b
   1ab3c:	d2004282 	.word	0xd2004282
   1ab40:	51304610 	.word	0x51304610
   1ab44:	f04fe6a1 	.word	0xf04fe6a1
   1ab48:	e7fa30ff 	.word	0xe7fa30ff
   1ab4c:	6b07e9dd 	.word	0x6b07e9dd
   1ab50:	5a09e9dd 	.word	0x5a09e9dd
   1ab54:	2d009c0b 	.word	0x2d009c0b
   1ab58:	a916d05f 	.word	0xa916d05f
   1ab5c:	f7fe4628 	.word	0xf7fe4628
   1ab60:	2800fc25 	.word	0x2800fc25
   1ab64:	4606d053 	.word	0x4606d053
   1ab68:	e5169f1e 	.word	0xe5169f1e
   1ab6c:	9b182501 	.word	0x9b182501
   1ab70:	591baa1f 	.word	0x591baa1f
   1ab74:	a819a913 	.word	0xa819a913
   1ab78:	f8cd930f 	.word	0xf8cd930f
   1ab7c:	e9cd8084 	.word	0xe9cd8084
   1ab80:	f7ff551f 	.word	0xf7ff551f
   1ab84:	2800fba5 	.word	0x2800fba5
   1ab88:	9b06d1b8 	.word	0x9b06d1b8
   1ab8c:	f1039a01 	.word	0xf1039a01
   1ab90:	3b016300 	.word	0x3b016300
   1ab94:	015e4413 	.word	0x015e4413
   1ab98:	a8194631 	.word	0xa8194631
   1ab9c:	ff1ef7fe 	.word	0xff1ef7fe
   1aba0:	d1ab2800 	.word	0xd1ab2800
   1aba4:	aa19a910 	.word	0xaa19a910
   1aba8:	f7ff4608 	.word	0xf7ff4608
   1abac:	4603fad1 	.word	0x4603fad1
   1abb0:	a91fbb58 	.word	0xa91fbb58
   1abb4:	930fa810 	.word	0x930fa810
   1abb8:	551fe9cd 	.word	0x551fe9cd
   1abbc:	8084f8cd 	.word	0x8084f8cd
   1abc0:	fb2ef7fe 	.word	0xfb2ef7fe
   1abc4:	db072800 	.word	0xdb072800
   1abc8:	465d9b01 	.word	0x465d9b01
   1abcc:	93013b01 	.word	0x93013b01
   1abd0:	f06fe645 	.word	0xf06fe645
   1abd4:	e4e0060f 	.word	0xe4e0060f
   1abd8:	a819a913 	.word	0xa819a913
   1abdc:	fbe6f7fe 	.word	0xfbe6f7fe
   1abe0:	d18b2800 	.word	0xd18b2800
   1abe4:	a8194631 	.word	0xa8194631
   1abe8:	fef8f7fe 	.word	0xfef8f7fe
   1abec:	d1852800 	.word	0xd1852800
   1abf0:	aa19a910 	.word	0xaa19a910
   1abf4:	f7ff4608 	.word	0xf7ff4608
   1abf8:	2800fa37 	.word	0x2800fa37
   1abfc:	af7ef47f 	.word	0xaf7ef47f
   1ac00:	59139a18 	.word	0x59139a18
   1ac04:	51133b01 	.word	0x51133b01
   1ac08:	4606e7de 	.word	0x4606e7de
   1ac0c:	f8dbe4c5 	.word	0xf8dbe4c5
   1ac10:	68223000 	.word	0x68223000
   1ac14:	f302fb03 	.word	0xf302fb03
   1ac18:	f1ba602b 	.word	0xf1ba602b
   1ac1c:	d0050f00 	.word	0xd0050f00
   1ac20:	a8109902 	.word	0xa8109902
   1ac24:	ff90f7fe 	.word	0xff90f7fe
   1ac28:	b1084606 	.word	0xb1084606
   1ac2c:	e4b49f1e 	.word	0xe4b49f1e
   1ac30:	a9106823 	.word	0xa9106823
   1ac34:	93104650 	.word	0x93104650
   1ac38:	fbb8f7fe 	.word	0xfbb8f7fe
   1ac3c:	28004606 	.word	0x28004606
   1ac40:	2401d1f4 	.word	0x2401d1f4
   1ac44:	a91fab0f 	.word	0xa91fab0f
   1ac48:	960f4650 	.word	0x960f4650
   1ac4c:	441fe9cd 	.word	0x441fe9cd
   1ac50:	f7fe9321 	.word	0xf7fe9321
   1ac54:	2800fae5 	.word	0x2800fae5
   1ac58:	f8cad1e8 	.word	0xf8cad1e8
   1ac5c:	e7e54000 	.word	0xe7e54000

0001ac60 <symbol_000dbba>:
   1ac60:	41f0e92d 	.word	0x41f0e92d
   1ac64:	46176853 	.word	0x46176853
   1ac68:	6894b183 	.word	0x6894b183
   1ac6c:	4580f103 	.word	0x4580f103
   1ac70:	f8543d01 	.word	0xf8543d01
   1ac74:	eb042025 	.word	0xeb042025
   1ac78:	b12a0485 	.word	0xb12a0485
   1ac7c:	f854e11a 	.word	0xf854e11a
   1ac80:	2d005d04 	.word	0x2d005d04
   1ac84:	8116f040 	.word	0x8116f040
   1ac88:	d1f83b01 	.word	0xd1f83b01
   1ac8c:	4606460a 	.word	0x4606460a
   1ac90:	463b4601 	.word	0x463b4601
   1ac94:	f7ff2000 	.word	0xf7ff2000
   1ac98:	2800fc21 	.word	0x2800fc21
   1ac9c:	f06fd151 	.word	0xf06fd151
   1aca0:	68714840 	.word	0x68714840
   1aca4:	68b0b191 	.word	0x68b0b191
   1aca8:	0308eb01 	.word	0x0308eb01
   1acac:	c023f850 	.word	0xc023f850
   1acb0:	0283eb00 	.word	0x0283eb00
   1acb4:	0f00f1bc 	.word	0x0f00f1bc
   1acb8:	4614d156 	.word	0x4614d156
   1acbc:	e003460b 	.word	0xe003460b
   1acc0:	5d04f854 	.word	0x5d04f854
   1acc4:	d14f2d00 	.word	0xd14f2d00
   1acc8:	d1f93b01 	.word	0xd1f93b01
   1accc:	4440f06f 	.word	0x4440f06f
   1acd0:	46304639 	.word	0x46304639
   1acd4:	ffa8f7fe 	.word	0xffa8f7fe
   1acd8:	db422800 	.word	0xdb422800
   1acdc:	683b6835 	.word	0x683b6835
   1ace0:	f305fb03 	.word	0xf305fb03
   1ace4:	dd2e2b00 	.word	0xdd2e2b00
   1ace8:	687a6873 	.word	0x687a6873
   1acec:	68b1b183 	.word	0x68b1b183
   1acf0:	f8511918 	.word	0xf8511918
   1acf4:	eb01c020 	.word	0xeb01c020
   1acf8:	f1bc0180 	.word	0xf1bc0180
   1acfc:	d0050f00 	.word	0xd0050f00
   1ad00:	f851e090 	.word	0xf851e090
   1ad04:	28000d04 	.word	0x28000d04
   1ad08:	808cf040 	.word	0x808cf040
   1ad0c:	d1f83b01 	.word	0xd1f83b01
   1ad10:	f8d7b18a 	.word	0xf8d7b18a
   1ad14:	1911c008 	.word	0x1911c008
   1ad18:	0021f85c 	.word	0x0021f85c
   1ad1c:	f0402800 	.word	0xf0402800
   1ad20:	eb0c80be 	.word	0xeb0c80be
   1ad24:	e0040181 	.word	0xe0040181
   1ad28:	0d04f851 	.word	0x0d04f851
   1ad2c:	f0402800 	.word	0xf0402800
   1ad30:	3a018083 	.word	0x3a018083
   1ad34:	463ad1f8 	.word	0x463ad1f8
   1ad38:	46304631 	.word	0x46304631
   1ad3c:	f8d4f7ff 	.word	0xf8d4f7ff
   1ad40:	e8bdb140 	.word	0xe8bdb140
   1ad44:	463a81f0 	.word	0x463a81f0
   1ad48:	46304631 	.word	0x46304631
   1ad4c:	f828f7ff 	.word	0xf828f7ff
   1ad50:	d1f62800 	.word	0xd1f62800
   1ad54:	46396035 	.word	0x46396035
   1ad58:	f7fe4630 	.word	0xf7fe4630
   1ad5c:	2800ff65 	.word	0x2800ff65
   1ad60:	2000dabc 	.word	0x2000dabc
   1ad64:	81f0e8bd 	.word	0x81f0e8bd
   1ad68:	2c006834 	.word	0x2c006834
   1ad6c:	683bdaae 	.word	0x683bdaae
   1ad70:	f304fb03 	.word	0xf304fb03
   1ad74:	da232b00 	.word	0xda232b00
   1ad78:	0f00f1bc 	.word	0x0f00f1bc
   1ad7c:	4613d129 	.word	0x4613d129
   1ad80:	f853e002 	.word	0xf853e002
   1ad84:	bb222d04 	.word	0xbb222d04
   1ad88:	d1fa3901 	.word	0xd1fa3901
   1ad8c:	b173687b 	.word	0xb173687b
   1ad90:	c008f8d7 	.word	0xc008f8d7
   1ad94:	0208eb03 	.word	0x0208eb03
   1ad98:	5022f85c 	.word	0x5022f85c
   1ad9c:	0282eb0c 	.word	0x0282eb0c
   1ada0:	e071b11d 	.word	0xe071b11d
   1ada4:	5d04f852 	.word	0x5d04f852
   1ada8:	3b01bb05 	.word	0x3b01bb05
   1adac:	463ad1fa 	.word	0x463ad1fa
   1adb0:	46304631 	.word	0x46304631
   1adb4:	f898f7ff 	.word	0xf898f7ff
   1adb8:	d1c22800 	.word	0xd1c22800
   1adbc:	e7706034 	.word	0xe7706034
   1adc0:	4631463a 	.word	0x4631463a
   1adc4:	f7fe4630 	.word	0xf7fe4630
   1adc8:	2800ffeb 	.word	0x2800ffeb
   1adcc:	e8bdd0f6 	.word	0xe8bdd0f6
   1add0:	687b81f0 	.word	0x687b81f0
   1add4:	d0ea2b00 	.word	0xd0ea2b00
   1add8:	c008f8d7 	.word	0xc008f8d7
   1addc:	0208eb03 	.word	0x0208eb03
   1ade0:	5022f85c 	.word	0x5022f85c
   1ade4:	0282eb0c 	.word	0x0282eb0c
   1ade8:	d0de2d00 	.word	0xd0de2d00
   1adec:	d8de4299 	.word	0xd8de4299
   1adf0:	2900d34a 	.word	0x2900d34a
   1adf4:	eb01d0db 	.word	0xeb01d0db
   1adf8:	f8500308 	.word	0xf8500308
   1adfc:	f85c2023 	.word	0xf85c2023
   1ae00:	009b5023 	.word	0x009b5023
   1ae04:	44184295 	.word	0x44184295
   1ae08:	d3d04463 	.word	0xd3d04463
   1ae0c:	e03bd907 	.word	0xe03bd907
   1ae10:	5d04f850 	.word	0x5d04f850
   1ae14:	2d04f853 	.word	0x2d04f853
   1ae18:	d8c84295 	.word	0xd8c84295
   1ae1c:	3901d334 	.word	0x3901d334
   1ae20:	e7c4d1f6 	.word	0xe7c4d1f6
   1ae24:	d0862a00 	.word	0xd0862a00
   1ae28:	c008f8d7 	.word	0xc008f8d7
   1ae2c:	f85c1911 	.word	0xf85c1911
   1ae30:	28000021 	.word	0x28000021
   1ae34:	af75f43f 	.word	0xaf75f43f
   1ae38:	f63f4293 	.word	0xf63f4293
   1ae3c:	d32eaf7c 	.word	0xd32eaf7c
   1ae40:	f43f2b00 	.word	0xf43f2b00
   1ae44:	68b1af78 	.word	0x68b1af78
   1ae48:	f851191a 	.word	0xf851191a
   1ae4c:	f85c0022 	.word	0xf85c0022
   1ae50:	0092e022 	.word	0x0092e022
   1ae54:	44114586 	.word	0x44114586
   1ae58:	f4ff4462 	.word	0xf4ff4462
   1ae5c:	d908af6c 	.word	0xd908af6c
   1ae60:	f851e01d 	.word	0xf851e01d
   1ae64:	f852cd04 	.word	0xf852cd04
   1ae68:	45840d04 	.word	0x45840d04
   1ae6c:	af63f63f 	.word	0xaf63f63f
   1ae70:	3b01d315 	.word	0x3b01d315
   1ae74:	463ad1f5 	.word	0x463ad1f5
   1ae78:	46304631 	.word	0x46304631
   1ae7c:	f834f7ff 	.word	0xf834f7ff
   1ae80:	f47f2800 	.word	0xf47f2800
   1ae84:	e765af5e 	.word	0xe765af5e
   1ae88:	46394632 	.word	0x46394632
   1ae8c:	f7ff4630 	.word	0xf7ff4630
   1ae90:	2800f82b 	.word	0x2800f82b
   1ae94:	af55f47f 	.word	0xaf55f47f
   1ae98:	60344264 	.word	0x60344264
   1ae9c:	4632e701 	.word	0x4632e701
   1aea0:	46304639 	.word	0x46304639
   1aea4:	f820f7ff 	.word	0xf820f7ff
   1aea8:	f47f2800 	.word	0xf47f2800
   1aeac:	426daf4a 	.word	0x426daf4a
   1aeb0:	e70d6035 	.word	0xe70d6035
   1aeb4:	2b00683b 	.word	0x2b00683b
   1aeb8:	aee8f6bf 	.word	0xaee8f6bf
   1aebc:	0009f06f 	.word	0x0009f06f
   1aec0:	bf00e73f 	.word	0xbf00e73f

0001aec4 <symbol_0005f38>:
   1aec4:	41f0e92d 	.word	0x41f0e92d
   1aec8:	2501460f 	.word	0x2501460f
   1aecc:	68bb2100 	.word	0x68bb2100
   1aed0:	4604b086 	.word	0x4604b086
   1aed4:	95004616 	.word	0x95004616
   1aed8:	e9cd9503 	.word	0xe9cd9503
   1aedc:	e9cd1101 	.word	0xe9cd1101
   1aee0:	2b001104 	.word	0x2b001104
   1aee4:	6879d040 	.word	0x6879d040
   1aee8:	d0111e4a 	.word	0xd0111e4a
   1aeec:	0022f853 	.word	0x0022f853
   1aef0:	f0402800 	.word	0xf0402800
   1aef4:	f10180c4 	.word	0xf10180c4
   1aef8:	39014180 	.word	0x39014180
   1aefc:	0381eb03 	.word	0x0381eb03
   1af00:	f853e004 	.word	0xf853e004
   1af04:	29001d04 	.word	0x29001d04
   1af08:	80b9f040 	.word	0x80b9f040
   1af0c:	d1f83a01 	.word	0xd1f83a01
   1af10:	683b2501 	.word	0x683b2501
   1af14:	21049300 	.word	0x21049300
   1af18:	f0014628 	.word	0xf0014628
   1af1c:	4680fe17 	.word	0x4680fe17
   1af20:	f0002800 	.word	0xf0002800
   1af24:	9902813c 	.word	0x9902813c
   1af28:	9a01b189 	.word	0x9a01b189
   1af2c:	f0080092 	.word	0xf0080092
   1af30:	e9ddf89f 	.word	0xe9ddf89f
   1af34:	1e532001 	.word	0x1e532001
   1af38:	2200b13a 	.word	0x2200b13a
   1af3c:	1c593b01 	.word	0x1c593b01
   1af40:	f1006002 	.word	0xf1006002
   1af44:	d1f90004 	.word	0xd1f90004
   1af48:	f0019802 	.word	0xf0019802
   1af4c:	e9cdfe13 	.word	0xe9cdfe13
   1af50:	00ad5801 	.word	0x00ad5801
   1af54:	2100462a 	.word	0x2100462a
   1af58:	f0084640 	.word	0xf0084640
   1af5c:	462af8b3 	.word	0x462af8b3
   1af60:	980268b9 	.word	0x980268b9
   1af64:	f884f008 	.word	0xf884f008
   1af68:	a8034631 	.word	0xa8034631
   1af6c:	fa1ef7fe 	.word	0xfa1ef7fe
   1af70:	28004607 	.word	0x28004607
   1af74:	9e01d15d 	.word	0x9e01d15d
   1af78:	f0002e00 	.word	0xf0002e00
   1af7c:	4601810e 	.word	0x4601810e
   1af80:	3d049d02 	.word	0x3d049d02
   1af84:	f8552200 	.word	0xf8552200
   1af88:	e0040f04 	.word	0xe0040f04
   1af8c:	f1012a20 	.word	0xf1012a20
   1af90:	f0000101 	.word	0xf0000101
   1af94:	fa208081 	.word	0xfa208081
   1af98:	f013f302 	.word	0xf013f302
   1af9c:	f1020301 	.word	0xf1020301
   1afa0:	d0f30201 	.word	0xd0f30201
   1afa4:	b1b59d04 	.word	0xb1b59d04
   1afa8:	46842000 	.word	0x46842000
   1afac:	3f049f05 	.word	0x3f049f05
   1afb0:	f8572200 	.word	0xf8572200
   1afb4:	e0036f04 	.word	0xe0036f04
   1afb8:	f1002a20 	.word	0xf1002a20
   1afbc:	d0710001 	.word	0xd0710001
   1afc0:	f302fa26 	.word	0xf302fa26
   1afc4:	0301f013 	.word	0x0301f013
   1afc8:	0201f102 	.word	0x0201f102
   1afcc:	4281d0f4 	.word	0x4281d0f4
   1afd0:	4601bf28 	.word	0x4601bf28
   1afd4:	4668460d 	.word	0x4668460d
   1afd8:	f7fe4629 	.word	0xf7fe4629
   1afdc:	4607fdb5 	.word	0x4607fdb5
   1afe0:	4629bb38 	.word	0x4629bb38
   1afe4:	f7fea803 	.word	0xf7fea803
   1afe8:	4607fdaf 	.word	0x4607fdaf
   1afec:	2301bb08 	.word	0x2301bb08
   1aff0:	4640f06f 	.word	0x4640f06f
   1aff4:	93009303 	.word	0x93009303
   1aff8:	b17f9f01 	.word	0xb17f9f01
   1affc:	19ba9802 	.word	0x19ba9802
   1b000:	3022f850 	.word	0x3022f850
   1b004:	0282eb00 	.word	0x0282eb00
   1b008:	d1512b00 	.word	0xd1512b00
   1b00c:	e003463b 	.word	0xe003463b
   1b010:	1d04f852 	.word	0x1d04f852
   1b014:	d14b2900 	.word	0xd14b2900
   1b018:	d1f93b01 	.word	0xd1f93b01
   1b01c:	a8034629 	.word	0xa8034629
   1b020:	fcdcf7fe 	.word	0xfcdcf7fe
   1b024:	b9204607 	.word	0xb9204607
   1b028:	4620a903 	.word	0x4620a903
   1b02c:	f9bef7fe 	.word	0xf9bef7fe
   1b030:	98024607 	.word	0x98024607
   1b034:	9a01b160 	.word	0x9a01b160
   1b038:	b13a1e53 	.word	0xb13a1e53
   1b03c:	3b012200 	.word	0x3b012200
   1b040:	60021c5c 	.word	0x60021c5c
   1b044:	0004f100 	.word	0x0004f100
   1b048:	9802d1f9 	.word	0x9802d1f9
   1b04c:	fd92f001 	.word	0xfd92f001
   1b050:	23012200 	.word	0x23012200
   1b054:	e9cd9805 	.word	0xe9cd9805
   1b058:	92023200 	.word	0x92023200
   1b05c:	9904b158 	.word	0x9904b158
   1b060:	b1311e4b 	.word	0xb1311e4b
   1b064:	1c593b01 	.word	0x1c593b01
   1b068:	f1006002 	.word	0xf1006002
   1b06c:	d1f90004 	.word	0xd1f90004
   1b070:	f0019805 	.word	0xf0019805
   1b074:	4638fd7f 	.word	0x4638fd7f
   1b078:	e8bdb006 	.word	0xe8bdb006
   1b07c:	f24281f0 	.word	0xf24281f0
   1b080:	68397310 	.word	0x68397310
   1b084:	429d1c55 	.word	0x429d1c55
   1b088:	f2009100 	.word	0xf2009100
   1b08c:	2d008083 	.word	0x2d008083
   1b090:	af41f47f 	.word	0xaf41f47f
   1b094:	e75d46a8 	.word	0xe75d46a8
   1b098:	42be3701 	.word	0x42be3701
   1b09c:	af72f47f 	.word	0xaf72f47f
   1b0a0:	e77f4619 	.word	0xe77f4619
   1b0a4:	0c01f10c 	.word	0x0c01f10c
   1b0a8:	d18145ac 	.word	0xd18145ac
   1b0ac:	e792461d 	.word	0xe792461d
   1b0b0:	2b009b00 	.word	0x2b009b00
   1b0b4:	2100d0b2 	.word	0x2100d0b2
   1b0b8:	f1a0468e 	.word	0xf1a0468e
   1b0bc:	22000c04 	.word	0x22000c04
   1b0c0:	0f04f85c 	.word	0x0f04f85c
   1b0c4:	2a20e003 	.word	0x2a20e003
   1b0c8:	0101f101 	.word	0x0101f101
   1b0cc:	fa20d042 	.word	0xfa20d042
   1b0d0:	f013f302 	.word	0xf013f302
   1b0d4:	f1020301 	.word	0xf1020301
   1b0d8:	d0f40201 	.word	0xd0f40201
   1b0dc:	f7fe4668 	.word	0xf7fe4668
   1b0e0:	4607fd33 	.word	0x4607fd33
   1b0e4:	d1a42800 	.word	0xd1a42800
   1b0e8:	c010f8dd 	.word	0xc010f8dd
   1b0ec:	0f00f1bc 	.word	0x0f00f1bc
   1b0f0:	4601d04e 	.word	0x4601d04e
   1b0f4:	9f054686 	.word	0x9f054686
   1b0f8:	22003f04 	.word	0x22003f04
   1b0fc:	0f04f857 	.word	0x0f04f857
   1b100:	2a20e003 	.word	0x2a20e003
   1b104:	0101f101 	.word	0x0101f101
   1b108:	fa20d02a 	.word	0xfa20d02a
   1b10c:	f013f302 	.word	0xf013f302
   1b110:	f1020301 	.word	0xf1020301
   1b114:	d0f40201 	.word	0xd0f40201
   1b118:	f7fea803 	.word	0xf7fea803
   1b11c:	4607fd15 	.word	0x4607fd15
   1b120:	d1862800 	.word	0xd1862800
   1b124:	4668a903 	.word	0x4668a903
   1b128:	fd7ef7fe 	.word	0xfd7ef7fe
   1b12c:	db1d2800 	.word	0xdb1d2800
   1b130:	4669aa03 	.word	0x4669aa03
   1b134:	f7fe4668 	.word	0xf7fe4668
   1b138:	4607fed7 	.word	0x4607fed7
   1b13c:	f47f2800 	.word	0xf47f2800
   1b140:	2101af78 	.word	0x2101af78
   1b144:	f7fe4668 	.word	0xf7fe4668
   1b148:	4607fcff 	.word	0x4607fcff
   1b14c:	f43f2800 	.word	0xf43f2800
   1b150:	e76eaf53 	.word	0xe76eaf53
   1b154:	0e01f10e 	.word	0x0e01f10e
   1b158:	d1b045be 	.word	0xd1b045be
   1b15c:	e7bd4619 	.word	0xe7bd4619
   1b160:	0e01f10e 	.word	0x0e01f10e
   1b164:	d1c845e6 	.word	0xd1c845e6
   1b168:	e7d54619 	.word	0xe7d54619
   1b16c:	466aa903 	.word	0x466aa903
   1b170:	f7fe4608 	.word	0xf7fe4608
   1b174:	4607feb9 	.word	0x4607feb9
   1b178:	f47f2800 	.word	0xf47f2800
   1b17c:	2101af5a 	.word	0x2101af5a
   1b180:	f7fea803 	.word	0xf7fea803
   1b184:	4607fce1 	.word	0x4607fce1
   1b188:	f43f2800 	.word	0xf43f2800
   1b18c:	e750af35 	.word	0xe750af35
   1b190:	e7c14661 	.word	0xe7c14661
   1b194:	070ff06f 	.word	0x070ff06f
   1b198:	4631e75a 	.word	0x4631e75a
   1b19c:	9802e702 	.word	0x9802e702
   1b1a0:	070ff06f 	.word	0x070ff06f
   1b1a4:	bf00e746 	.word	0xbf00e746

0001b1a8 <symbol_000644e>:
   1b1a8:	43f0e92d 	.word	0x43f0e92d
   1b1ac:	6f80f5b1 	.word	0x6f80f5b1
   1b1b0:	4d04f2ad 	.word	0x4d04f2ad
   1b1b4:	80a5f200 	.word	0x80a5f200
   1b1b8:	4617460d 	.word	0x4617460d
   1b1bc:	46694606 	.word	0x46694606
   1b1c0:	462a4618 	.word	0x462a4618
   1b1c4:	460747b8 	.word	0x460747b8
   1b1c8:	4638b120 	.word	0x4638b120
   1b1cc:	4d04f20d 	.word	0x4d04f20d
   1b1d0:	83f0e8bd 	.word	0x83f0e8bd
   1b1d4:	f0002d00 	.word	0xf0002d00
   1b1d8:	f89d808a 	.word	0xf89d808a
   1b1dc:	2b003000 	.word	0x2b003000
   1b1e0:	8089f040 	.word	0x8089f040
   1b1e4:	4604466b 	.word	0x4604466b
   1b1e8:	f813e003 	.word	0xf813e003
   1b1ec:	2a002f01 	.word	0x2a002f01
   1b1f0:	3401d14d 	.word	0x3401d14d
   1b1f4:	d1f842a5 	.word	0xd1f842a5
   1b1f8:	8004f8d6 	.word	0x8004f8d6
   1b1fc:	0f00f1b8 	.word	0x0f00f1b8
   1b200:	2104d170 	.word	0x2104d170
   1b204:	f0012001 	.word	0xf0012001
   1b208:	4681fca1 	.word	0x4681fca1
   1b20c:	d0752800 	.word	0xd0752800
   1b210:	b18968b1 	.word	0xb18968b1
   1b214:	00926872 	.word	0x00926872
   1b218:	ff2af007 	.word	0xff2af007
   1b21c:	2001e9d6 	.word	0x2001e9d6
   1b220:	b13a1e53 	.word	0xb13a1e53
   1b224:	3b014642 	.word	0x3b014642
   1b228:	60021c59 	.word	0x60021c59
   1b22c:	0004f100 	.word	0x0004f100
   1b230:	68b0d1f9 	.word	0x68b0d1f9
   1b234:	fc9ef001 	.word	0xfc9ef001
   1b238:	22042301 	.word	0x22042301
   1b23c:	3901e9c6 	.word	0x3901e9c6
   1b240:	46482100 	.word	0x46482100
   1b244:	ff3ef007 	.word	0xff3ef007
   1b248:	22012300 	.word	0x22012300
   1b24c:	42a568b1 	.word	0x42a568b1
   1b250:	6032600b 	.word	0x6032600b
   1b254:	eb0dd9b9 	.word	0xeb0dd9b9
   1b258:	1b2c0205 	.word	0x1b2c0205
   1b25c:	f02368b1 	.word	0xf02368b1
   1b260:	ea4f0803 	.word	0xea4f0803
   1b264:	f8120ec3 	.word	0xf8120ec3
   1b268:	f851cd01 	.word	0xf851cd01
   1b26c:	f00e0008 	.word	0xf00e0008
   1b270:	fa0c0e18 	.word	0xfa0c0e18
   1b274:	3301fc0e 	.word	0x3301fc0e
   1b278:	000cea40 	.word	0x000cea40
   1b27c:	f84142a3 	.word	0xf84142a3
   1b280:	d1eb0008 	.word	0xd1eb0008
   1b284:	f20d4638 	.word	0xf20d4638
   1b288:	e8bd4d04 	.word	0xe8bd4d04
   1b28c:	1b2a83f0 	.word	0x1b2a83f0
   1b290:	0803f012 	.word	0x0803f012
   1b294:	f04fbf18 	.word	0xf04fbf18
   1b298:	f2420801 	.word	0xf2420801
   1b29c:	eb087310 	.word	0xeb087310
   1b2a0:	45980892 	.word	0x45980892
   1b2a4:	6873d82a 	.word	0x6873d82a
   1b2a8:	d92d4598 	.word	0xd92d4598
   1b2ac:	46402104 	.word	0x46402104
   1b2b0:	fc4cf001 	.word	0xfc4cf001
   1b2b4:	b3084681 	.word	0xb3084681
   1b2b8:	b18968b1 	.word	0xb18968b1
   1b2bc:	00926872 	.word	0x00926872
   1b2c0:	fed6f007 	.word	0xfed6f007
   1b2c4:	2001e9d6 	.word	0x2001e9d6
   1b2c8:	b13a1e53 	.word	0xb13a1e53
   1b2cc:	3b012200 	.word	0x3b012200
   1b2d0:	60021c59 	.word	0x60021c59
   1b2d4:	0004f100 	.word	0x0004f100
   1b2d8:	68b0d1f9 	.word	0x68b0d1f9
   1b2dc:	fc4af001 	.word	0xfc4af001
   1b2e0:	8901e9c6 	.word	0x8901e9c6
   1b2e4:	0288ea4f 	.word	0x0288ea4f
   1b2e8:	9008f8d6 	.word	0x9008f8d6
   1b2ec:	f8d6e7a8 	.word	0xf8d6e7a8
   1b2f0:	462c8004 	.word	0x462c8004
   1b2f4:	462ae782 	.word	0x462ae782
   1b2f8:	e7c94604 	.word	0xe7c94604
   1b2fc:	070ff06f 	.word	0x070ff06f
   1b300:	f06fe763 	.word	0xf06fe763
   1b304:	e7600703 	.word	0xe7600703
   1b308:	e7774698 	.word	0xe7774698

0001b30c <symbol_0004482>:
   1b30c:	43f0e92d 	.word	0x43f0e92d
   1b310:	b0a16853 	.word	0xb0a16853
   1b314:	6894b17b 	.word	0x6894b17b
   1b318:	4c80f103 	.word	0x4c80f103
   1b31c:	3cfff10c 	.word	0x3cfff10c
   1b320:	502cf854 	.word	0x502cf854
   1b324:	048ceb04 	.word	0x048ceb04
   1b328:	e00ab11d 	.word	0xe00ab11d
   1b32c:	5d04f854 	.word	0x5d04f854
   1b330:	3b01b93d 	.word	0x3b01b93d
   1b334:	f06fd1fa 	.word	0xf06fd1fa
   1b338:	46200403 	.word	0x46200403
   1b33c:	e8bdb021 	.word	0xe8bdb021
   1b340:	681383f0 	.word	0x681383f0
   1b344:	ddf62b00 	.word	0xddf62b00
   1b348:	23002401 	.word	0x23002401
   1b34c:	a8024606 	.word	0xa8024606
   1b350:	94089405 	.word	0x94089405
   1b354:	940e940b 	.word	0x940e940b
   1b358:	94119402 	.word	0x94119402
   1b35c:	94179414 	.word	0x94179414
   1b360:	460f941a 	.word	0x460f941a
   1b364:	e9cd4615 	.word	0xe9cd4615
   1b368:	e9cd3306 	.word	0xe9cd3306
   1b36c:	e9cd3309 	.word	0xe9cd3309
   1b370:	e9cd330c 	.word	0xe9cd330c
   1b374:	e9cd330f 	.word	0xe9cd330f
   1b378:	e9cd3303 	.word	0xe9cd3303
   1b37c:	e9cd3312 	.word	0xe9cd3312
   1b380:	e9cd3315 	.word	0xe9cd3315
   1b384:	e9cd3318 	.word	0xe9cd3318
   1b388:	f7ff331b 	.word	0xf7ff331b
   1b38c:	4604fd9b 	.word	0x4604fd9b
   1b390:	9b03b9a0 	.word	0x9b03b9a0
   1b394:	9904b183 	.word	0x9904b183
   1b398:	4480f103 	.word	0x4480f103
   1b39c:	f8513c01 	.word	0xf8513c01
   1b3a0:	eb012024 	.word	0xeb012024
   1b3a4:	b12a0484 	.word	0xb12a0484
   1b3a8:	f854e0b5 	.word	0xf854e0b5
   1b3ac:	2a002d04 	.word	0x2a002d04
   1b3b0:	80b1f040 	.word	0x80b1f040
   1b3b4:	d1f83b01 	.word	0xd1f83b01
   1b3b8:	040df06f 	.word	0x040df06f
   1b3bc:	b1609807 	.word	0xb1609807
   1b3c0:	1e539a06 	.word	0x1e539a06
   1b3c4:	2200b13a 	.word	0x2200b13a
   1b3c8:	1c593b01 	.word	0x1c593b01
   1b3cc:	f1006002 	.word	0xf1006002
   1b3d0:	d1f90004 	.word	0xd1f90004
   1b3d4:	f0019807 	.word	0xf0019807
   1b3d8:	2200fbcd 	.word	0x2200fbcd
   1b3dc:	980a2301 	.word	0x980a2301
   1b3e0:	3205e9cd 	.word	0x3205e9cd
   1b3e4:	b1589207 	.word	0xb1589207
   1b3e8:	1e4b9909 	.word	0x1e4b9909
   1b3ec:	3b01b131 	.word	0x3b01b131
   1b3f0:	60021c5f 	.word	0x60021c5f
   1b3f4:	0004f100 	.word	0x0004f100
   1b3f8:	980ad1f9 	.word	0x980ad1f9
   1b3fc:	fbbaf001 	.word	0xfbbaf001
   1b400:	23012200 	.word	0x23012200
   1b404:	e9cd980d 	.word	0xe9cd980d
   1b408:	920a3208 	.word	0x920a3208
   1b40c:	990cb158 	.word	0x990cb158
   1b410:	b1311e4b 	.word	0xb1311e4b
   1b414:	1c5e3b01 	.word	0x1c5e3b01
   1b418:	f1006002 	.word	0xf1006002
   1b41c:	d1f90004 	.word	0xd1f90004
   1b420:	f001980d 	.word	0xf001980d
   1b424:	2200fba7 	.word	0x2200fba7
   1b428:	98102301 	.word	0x98102301
   1b42c:	320be9cd 	.word	0x320be9cd
   1b430:	b158920d 	.word	0xb158920d
   1b434:	1e4b990f 	.word	0x1e4b990f
   1b438:	3b01b131 	.word	0x3b01b131
   1b43c:	60021c5d 	.word	0x60021c5d
   1b440:	0004f100 	.word	0x0004f100
   1b444:	9810d1f9 	.word	0x9810d1f9
   1b448:	fb94f001 	.word	0xfb94f001
   1b44c:	23012200 	.word	0x23012200
   1b450:	e9cd9804 	.word	0xe9cd9804
   1b454:	9210320e 	.word	0x9210320e
   1b458:	9903b158 	.word	0x9903b158
   1b45c:	b1311e4b 	.word	0xb1311e4b
   1b460:	1c593b01 	.word	0x1c593b01
   1b464:	f1006002 	.word	0xf1006002
   1b468:	d1f90004 	.word	0xd1f90004
   1b46c:	f0019804 	.word	0xf0019804
   1b470:	2200fb81 	.word	0x2200fb81
   1b474:	98132301 	.word	0x98132301
   1b478:	3202e9cd 	.word	0x3202e9cd
   1b47c:	b1589204 	.word	0xb1589204
   1b480:	1e4b9912 	.word	0x1e4b9912
   1b484:	3b01b131 	.word	0x3b01b131
   1b488:	60021c5f 	.word	0x60021c5f
   1b48c:	0004f100 	.word	0x0004f100
   1b490:	9813d1f9 	.word	0x9813d1f9
   1b494:	fb6ef001 	.word	0xfb6ef001
   1b498:	23012200 	.word	0x23012200
   1b49c:	e9cd9816 	.word	0xe9cd9816
   1b4a0:	92133211 	.word	0x92133211
   1b4a4:	9915b158 	.word	0x9915b158
   1b4a8:	b1311e4b 	.word	0xb1311e4b
   1b4ac:	1c5e3b01 	.word	0x1c5e3b01
   1b4b0:	f1006002 	.word	0xf1006002
   1b4b4:	d1f90004 	.word	0xd1f90004
   1b4b8:	f0019816 	.word	0xf0019816
   1b4bc:	2200fb5b 	.word	0x2200fb5b
   1b4c0:	98192301 	.word	0x98192301
   1b4c4:	3214e9cd 	.word	0x3214e9cd
   1b4c8:	b1589216 	.word	0xb1589216
   1b4cc:	1e4b9918 	.word	0x1e4b9918
   1b4d0:	3b01b131 	.word	0x3b01b131
   1b4d4:	60021c5d 	.word	0x60021c5d
   1b4d8:	0004f100 	.word	0x0004f100
   1b4dc:	9819d1f9 	.word	0x9819d1f9
   1b4e0:	fb48f001 	.word	0xfb48f001
   1b4e4:	23012200 	.word	0x23012200
   1b4e8:	e9cd981c 	.word	0xe9cd981c
   1b4ec:	92193217 	.word	0x92193217
   1b4f0:	f43f2800 	.word	0xf43f2800
   1b4f4:	991baf22 	.word	0x991baf22
   1b4f8:	b1311e4b 	.word	0xb1311e4b
   1b4fc:	1c593b01 	.word	0x1c593b01
   1b500:	f1006002 	.word	0xf1006002
   1b504:	d1f90004 	.word	0xd1f90004
   1b508:	f001981c 	.word	0xf001981c
   1b50c:	4620fb33 	.word	0x4620fb33
   1b510:	e8bdb021 	.word	0xe8bdb021
   1b514:	2b0183f0 	.word	0x2b0183f0
   1b518:	d96b9a02 	.word	0xd96b9a02
   1b51c:	f47f2a00 	.word	0xf47f2a00
   1b520:	4639af4b 	.word	0x4639af4b
   1b524:	462aa805 	.word	0x462aa805
   1b528:	fb9af7ff 	.word	0xfb9af7ff
   1b52c:	28004604 	.word	0x28004604
   1b530:	af44f47f 	.word	0xaf44f47f
   1b534:	a905a808 	.word	0xa905a808
   1b538:	ff38f7fd 	.word	0xff38f7fd
   1b53c:	28004604 	.word	0x28004604
   1b540:	af3cf47f 	.word	0xaf3cf47f
   1b544:	4629a811 	.word	0x4629a811
   1b548:	ff30f7fd 	.word	0xff30f7fd
   1b54c:	28004604 	.word	0x28004604
   1b550:	af34f47f 	.word	0xaf34f47f
   1b554:	4629a814 	.word	0x4629a814
   1b558:	ff28f7fd 	.word	0xff28f7fd
   1b55c:	28004604 	.word	0x28004604
   1b560:	af2cf47f 	.word	0xaf2cf47f
   1b564:	2101a80b 	.word	0x2101a80b
   1b568:	f8acf7fe 	.word	0xf8acf7fe
   1b56c:	28004604 	.word	0x28004604
   1b570:	af24f47f 	.word	0xaf24f47f
   1b574:	a80e4601 	.word	0xa80e4601
   1b578:	f8a4f7fe 	.word	0xf8a4f7fe
   1b57c:	28004604 	.word	0x28004604
   1b580:	af1cf47f 	.word	0xaf1cf47f
   1b584:	a8174601 	.word	0xa8174601
   1b588:	f89cf7fe 	.word	0xf89cf7fe
   1b58c:	28004604 	.word	0x28004604
   1b590:	af14f47f 	.word	0xaf14f47f
   1b594:	2101a81a 	.word	0x2101a81a
   1b598:	f894f7fe 	.word	0xf894f7fe
   1b59c:	28004604 	.word	0x28004604
   1b5a0:	af0cf47f 	.word	0xaf0cf47f
   1b5a4:	f04f4681 	.word	0xf04f4681
   1b5a8:	af010801 	.word	0xaf010801
   1b5ac:	681b9b0a 	.word	0x681b9b0a
   1b5b0:	d42c07da 	.word	0xd42c07da
   1b5b4:	a8082101 	.word	0xa8082101
   1b5b8:	fac6f7fe 	.word	0xfac6f7fe
   1b5bc:	28004604 	.word	0x28004604
   1b5c0:	aefcf47f 	.word	0xaefcf47f
   1b5c4:	681b9b0d 	.word	0x681b9b0d
   1b5c8:	d44407d8 	.word	0xd44407d8
   1b5cc:	681b9b10 	.word	0x681b9b10
   1b5d0:	d44007d9 	.word	0xd44007d9
   1b5d4:	a80b2101 	.word	0xa80b2101
   1b5d8:	fab6f7fe 	.word	0xfab6f7fe
   1b5dc:	28004604 	.word	0x28004604
   1b5e0:	aeecf47f 	.word	0xaeecf47f
   1b5e4:	a80e2101 	.word	0xa80e2101
   1b5e8:	faaef7fe 	.word	0xfaaef7fe
   1b5ec:	28004604 	.word	0x28004604
   1b5f0:	e6e3d0dc 	.word	0xe6e3d0dc
   1b5f4:	f6ff2a00 	.word	0xf6ff2a00
   1b5f8:	680baedf 	.word	0x680baedf
   1b5fc:	d88d2b01 	.word	0xd88d2b01
   1b600:	d18e2b00 	.word	0xd18e2b00
   1b604:	2a004252 	.word	0x2a004252
   1b608:	aed6f47f 	.word	0xaed6f47f
   1b60c:	9b16e789 	.word	0x9b16e789
   1b610:	07d8681b 	.word	0x07d8681b
   1b614:	2101d443 	.word	0x2101d443
   1b618:	f7fea814 	.word	0xf7fea814
   1b61c:	4604fa95 	.word	0x4604fa95
   1b620:	f47f2800 	.word	0xf47f2800
   1b624:	9b19aecb 	.word	0x9b19aecb
   1b628:	07db681b 	.word	0x07db681b
   1b62c:	9b1cd425 	.word	0x9b1cd425
   1b630:	07dc681b 	.word	0x07dc681b
   1b634:	2101d421 	.word	0x2101d421
   1b638:	f7fea817 	.word	0xf7fea817
   1b63c:	4604fa85 	.word	0x4604fa85
   1b640:	f47f2800 	.word	0xf47f2800
   1b644:	2101aebb 	.word	0x2101aebb
   1b648:	f7fea81a 	.word	0xf7fea81a
   1b64c:	4604fa7d 	.word	0x4604fa7d
   1b650:	d0dc2800 	.word	0xd0dc2800
   1b654:	a90be6b2 	.word	0xa90be6b2
   1b658:	4608aa11 	.word	0x4608aa11
   1b65c:	fd04f7fe 	.word	0xfd04f7fe
   1b660:	28004604 	.word	0x28004604
   1b664:	aeaaf47f 	.word	0xaeaaf47f
   1b668:	aa05a90e 	.word	0xaa05a90e
   1b66c:	f7fe4608 	.word	0xf7fe4608
   1b670:	4604fd6f 	.word	0x4604fd6f
   1b674:	d0ad2800 	.word	0xd0ad2800
   1b678:	a917e6a0 	.word	0xa917e6a0
   1b67c:	4608aa11 	.word	0x4608aa11
   1b680:	fcf2f7fe 	.word	0xfcf2f7fe
   1b684:	28004604 	.word	0x28004604
   1b688:	ae98f47f 	.word	0xae98f47f
   1b68c:	aa05a91a 	.word	0xaa05a91a
   1b690:	f7fe4608 	.word	0xf7fe4608
   1b694:	4604fd5d 	.word	0x4604fd5d
   1b698:	d0cc2800 	.word	0xd0cc2800
   1b69c:	a914e68e 	.word	0xa914e68e
   1b6a0:	f7fea808 	.word	0xf7fea808
   1b6a4:	2800fac1 	.word	0x2800fac1
   1b6a8:	a908db3d 	.word	0xa908db3d
   1b6ac:	4608aa14 	.word	0x4608aa14
   1b6b0:	fd4ef7fe 	.word	0xfd4ef7fe
   1b6b4:	28004604 	.word	0x28004604
   1b6b8:	ae80f47f 	.word	0xae80f47f
   1b6bc:	aa17a90b 	.word	0xaa17a90b
   1b6c0:	f7fe4608 	.word	0xf7fe4608
   1b6c4:	4604fd45 	.word	0x4604fd45
   1b6c8:	f47f2800 	.word	0xf47f2800
   1b6cc:	a90eae77 	.word	0xa90eae77
   1b6d0:	4608aa1a 	.word	0x4608aa1a
   1b6d4:	fd3cf7fe 	.word	0xfd3cf7fe
   1b6d8:	28004604 	.word	0x28004604
   1b6dc:	ae6ef47f 	.word	0xae6ef47f
   1b6e0:	a808a91d 	.word	0xa808a91d
   1b6e4:	9004f8cd 	.word	0x9004f8cd
   1b6e8:	881de9cd 	.word	0x881de9cd
   1b6ec:	f7fd971f 	.word	0xf7fd971f
   1b6f0:	2800fd97 	.word	0x2800fd97
   1b6f4:	af5af47f 	.word	0xaf5af47f
   1b6f8:	f04f4680 	.word	0xf04f4680
   1b6fc:	a91d0901 	.word	0xa91d0901
   1b700:	f8cda817 	.word	0xf8cda817
   1b704:	e9cd8004 	.word	0xe9cd8004
   1b708:	971f991d 	.word	0x971f991d
   1b70c:	fd88f7fd 	.word	0xfd88f7fd
   1b710:	da232800 	.word	0xda232800
   1b714:	462aa917 	.word	0x462aa917
   1b718:	f7fe4608 	.word	0xf7fe4608
   1b71c:	4604fca5 	.word	0x4604fca5
   1b720:	d0ec2800 	.word	0xd0ec2800
   1b724:	a914e64a 	.word	0xa914e64a
   1b728:	4608aa08 	.word	0x4608aa08
   1b72c:	fd10f7fe 	.word	0xfd10f7fe
   1b730:	28004604 	.word	0x28004604
   1b734:	ae42f47f 	.word	0xae42f47f
   1b738:	aa0ba917 	.word	0xaa0ba917
   1b73c:	f7fe4608 	.word	0xf7fe4608
   1b740:	4604fd07 	.word	0x4604fd07
   1b744:	f47f2800 	.word	0xf47f2800
   1b748:	a91aae39 	.word	0xa91aae39
   1b74c:	4608aa0e 	.word	0x4608aa0e
   1b750:	fcfef7fe 	.word	0xfcfef7fe
   1b754:	28004604 	.word	0x28004604
   1b758:	e62fd0c2 	.word	0xe62fd0c2
   1b75c:	a8174629 	.word	0xa8174629
   1b760:	fa62f7fe 	.word	0xfa62f7fe
   1b764:	db082800 	.word	0xdb082800
   1b768:	462aa917 	.word	0x462aa917
   1b76c:	f7fe4608 	.word	0xf7fe4608
   1b770:	4604fcef 	.word	0x4604fcef
   1b774:	d0f12800 	.word	0xd0f12800
   1b778:	a917e620 	.word	0xa917e620
   1b77c:	f7fd4630 	.word	0xf7fd4630
   1b780:	4604fe15 	.word	0x4604fe15
   1b784:	bf00e61a 	.word	0xbf00e61a

0001b788 <entropy_callback>:
   1b788:	4c0ab538 	.word	0x4c0ab538
   1b78c:	78254b0a 	.word	0x78254b0a
   1b790:	bf282a07 	.word	0xbf282a07
   1b794:	46082207 	.word	0x46082207
   1b798:	1145eb03 	.word	0x1145eb03
   1b79c:	fc68f007 	.word	0xfc68f007
   1b7a0:	20007823 	.word	0x20007823
   1b7a4:	b2db3301 	.word	0xb2db3301
   1b7a8:	bf082b07 	.word	0xbf082b07
   1b7ac:	70232300 	.word	0x70232300
   1b7b0:	bf00bd38 	.word	0xbf00bd38
   1b7b4:	20026c04 	.word	0x20026c04
   1b7b8:	0002482c 	.word	0x0002482c

0001b7bc <es256_key_generate>:
   1b7bc:	b0e5b5f0 	.word	0xb0e5b5f0
   1b7c0:	71a8f89d 	.word	0x71a8f89d
   1b7c4:	b152b158 	.word	0xb152b158
   1b7c8:	291fb14b 	.word	0x291fb14b
   1b7cc:	6819d907 	.word	0x6819d907
   1b7d0:	d904293f 	.word	0xd904293f
   1b7d4:	2955b13f 	.word	0x2955b13f
   1b7d8:	240cd805 	.word	0x240cd805
   1b7dc:	2416e000 	.word	0x2416e000
   1b7e0:	b0654620 	.word	0xb0654620
   1b7e4:	461dbdf0 	.word	0x461dbdf0
   1b7e8:	21002304 	.word	0x21002304
   1b7ec:	46164604 	.word	0x46164604
   1b7f0:	f44fa814 	.word	0xf44fa814
   1b7f4:	f88d72a0 	.word	0xf88d72a0
   1b7f8:	f007300c 	.word	0xf007300c
   1b7fc:	a814fc63 	.word	0xa814fc63
   1b800:	fe12f7f6 	.word	0xfe12f7f6
   1b804:	49292300 	.word	0x49292300
   1b808:	a814461a 	.word	0xa814461a
   1b80c:	f7f69300 	.word	0xf7f69300
   1b810:	a814ff0d 	.word	0xa814ff0d
   1b814:	46212220 	.word	0x46212220
   1b818:	ff30f7f6 	.word	0xff30f7f6
   1b81c:	a814b9b8 	.word	0xa814b9b8
   1b820:	fe08f7f6 	.word	0xfe08f7f6
   1b824:	f10d4621 	.word	0xf10d4621
   1b828:	f006000d 	.word	0xf006000d
   1b82c:	4604fcbd 	.word	0x4604fcbd
   1b830:	b1c7b9b8 	.word	0xb1c7b9b8
   1b834:	f7f6a814 	.word	0xf7f6a814
   1b838:	2002f95d 	.word	0x2002f95d
   1b83c:	f960f7f6 	.word	0xf960f7f6
   1b840:	a8144601 	.word	0xa8144601
   1b844:	f96af7f6 	.word	0xf96af7f6
   1b848:	240eb1a8 	.word	0x240eb1a8
   1b84c:	4a18e7c8 	.word	0x4a18e7c8
   1b850:	78114b18 	.word	0x78114b18
   1b854:	22074620 	.word	0x22074620
   1b858:	1141eb03 	.word	0x1141eb03
   1b85c:	fc08f007 	.word	0xfc08f007
   1b860:	2423e7dd 	.word	0x2423e7dd
   1b864:	a903e7bc 	.word	0xa903e7bc
   1b868:	22401c70 	.word	0x22401c70
   1b86c:	fc00f007 	.word	0xfc00f007
   1b870:	602b2341 	.word	0x602b2341
   1b874:	2103e7b4 	.word	0x2103e7b4
   1b878:	f7f79815 	.word	0xf7f79815
   1b87c:	2800f961 	.word	0x2800f961
   1b880:	9815d1e3 	.word	0x9815d1e3
   1b884:	f100aa03 	.word	0xf100aa03
   1b888:	23410188 	.word	0x23410188
   1b88c:	fc26f7f9 	.word	0xfc26f7f9
   1b890:	d1da2800 	.word	0xd1da2800
   1b894:	a8144631 	.word	0xa8144631
   1b898:	f7f4682a 	.word	0xf7f4682a
   1b89c:	23b2ffed 	.word	0x23b2ffed
   1b8a0:	602b4604 	.word	0x602b4604
   1b8a4:	d09b2800 	.word	0xd09b2800
   1b8a8:	bf00e7cf 	.word	0xbf00e7cf
   1b8ac:	0001b789 	.word	0x0001b789
   1b8b0:	20026c04 	.word	0x20026c04
   1b8b4:	0002482c 	.word	0x0002482c

0001b8b8 <bsd_os_application_irq_handler>:
   1b8b8:	41f0e92d 	.word	0x41f0e92d
   1b8bc:	f7f44c33 	.word	0xf7f44c33
   1b8c0:	f04ff911 	.word	0xf04ff911
   1b8c4:	4d320803 	.word	0x4d320803
   1b8c8:	f1044f32 	.word	0xf1044f32
   1b8cc:	e0040680 	.word	0xe0040680
   1b8d0:	d0062b04 	.word	0xd0062b04
   1b8d4:	42b43408 	.word	0x42b43408
   1b8d8:	f814d03b 	.word	0xf814d03b
   1b8dc:	2b023c04 	.word	0x2b023c04
   1b8e0:	6820d1f6 	.word	0x6820d1f6
   1b8e4:	6803882a 	.word	0x6803882a
   1b8e8:	429ab29b 	.word	0x429ab29b
   1b8ec:	8a2ad033 	.word	0x8a2ad033
   1b8f0:	d032429a 	.word	0xd032429a
   1b8f4:	429a8c2a 	.word	0x429a8c2a
   1b8f8:	8e2ad031 	.word	0x8e2ad031
   1b8fc:	d030429a 	.word	0xd030429a
   1b900:	2040f8b5 	.word	0x2040f8b5
   1b904:	d036429a 	.word	0xd036429a
   1b908:	2050f8b5 	.word	0x2050f8b5
   1b90c:	d034429a 	.word	0xd034429a
   1b910:	2060f8b5 	.word	0x2060f8b5
   1b914:	d032429a 	.word	0xd032429a
   1b918:	2070f8b5 	.word	0x2070f8b5
   1b91c:	d030429a 	.word	0xd030429a
   1b920:	2080f8b5 	.word	0x2080f8b5
   1b924:	d02e429a 	.word	0xd02e429a
   1b928:	2090f8b5 	.word	0x2090f8b5
   1b92c:	bf08429a 	.word	0xbf08429a
   1b930:	d1cf2309 	.word	0xd1cf2309
   1b934:	1303eb05 	.word	0x1303eb05
   1b938:	68d9685a 	.word	0x68d9685a
   1b93c:	b9904790 	.word	0xb9904790
   1b940:	68202201 	.word	0x68202201
   1b944:	2c04f804 	.word	0x2c04f804
   1b948:	340868fb 	.word	0x340868fb
   1b94c:	42b44798 	.word	0x42b44798
   1b950:	e8bdd1c3 	.word	0xe8bdd1c3
   1b954:	230081f0 	.word	0x230081f0
   1b958:	2301e7ec 	.word	0x2301e7ec
   1b95c:	2302e7ea 	.word	0x2302e7ea
   1b960:	2303e7e8 	.word	0x2303e7e8
   1b964:	2802e7e6 	.word	0x2802e7e6
   1b968:	2304bf0a 	.word	0x2304bf0a
   1b96c:	8c04f804 	.word	0x8c04f804
   1b970:	3c04f804 	.word	0x3c04f804
   1b974:	2304e7ae 	.word	0x2304e7ae
   1b978:	2305e7dc 	.word	0x2305e7dc
   1b97c:	2306e7da 	.word	0x2306e7da
   1b980:	2307e7d8 	.word	0x2307e7d8
   1b984:	2308e7d6 	.word	0x2308e7d6
   1b988:	bf00e7d4 	.word	0xbf00e7d4
   1b98c:	200215ac 	.word	0x200215ac
   1b990:	20021470 	.word	0x20021470
   1b994:	20021510 	.word	0x20021510

0001b998 <rpc_framework_init>:
   1b998:	22a0b508 	.word	0x22a0b508
   1b99c:	48022100 	.word	0x48022100
   1b9a0:	fb90f007 	.word	0xfb90f007
   1b9a4:	bd082000 	.word	0xbd082000
   1b9a8:	20021470 	.word	0x20021470

0001b9ac <rpc_client_register>:
   1b9ac:	2b008803 	.word	0x2b008803
   1b9b0:	6842d045 	.word	0x6842d045
   1b9b4:	2a004601 	.word	0x2a004601
   1b9b8:	4a30d050 	.word	0x4a30d050
   1b9bc:	42838810 	.word	0x42838810
   1b9c0:	e92dd03d 	.word	0xe92dd03d
   1b9c4:	8a1447f0 	.word	0x8a1447f0
   1b9c8:	d03542a3 	.word	0xd03542a3
   1b9cc:	42ab8c15 	.word	0x42ab8c15
   1b9d0:	8e16d032 	.word	0x8e16d032
   1b9d4:	d02f42b3 	.word	0xd02f42b3
   1b9d8:	7040f8b2 	.word	0x7040f8b2
   1b9dc:	d02b42bb 	.word	0xd02b42bb
   1b9e0:	c050f8b2 	.word	0xc050f8b2
   1b9e4:	d0274563 	.word	0xd0274563
   1b9e8:	e060f8b2 	.word	0xe060f8b2
   1b9ec:	d0234573 	.word	0xd0234573
   1b9f0:	8070f8b2 	.word	0x8070f8b2
   1b9f4:	d01f4543 	.word	0xd01f4543
   1b9f8:	9080f8b2 	.word	0x9080f8b2
   1b9fc:	d01b454b 	.word	0xd01b454b
   1ba00:	a090f8b2 	.word	0xa090f8b2
   1ba04:	d0174553 	.word	0xd0174553
   1ba08:	b35cb1e0 	.word	0xb35cb1e0
   1ba0c:	b36eb365 	.word	0xb36eb365
   1ba10:	f1bcb377 	.word	0xf1bcb377
   1ba14:	d02d0f00 	.word	0xd02d0f00
   1ba18:	0f00f1be 	.word	0x0f00f1be
   1ba1c:	f1b8d020 	.word	0xf1b8d020
   1ba20:	d0290f00 	.word	0xd0290f00
   1ba24:	0f00f1b9 	.word	0x0f00f1b9
   1ba28:	2009d00b 	.word	0x2009d00b
   1ba2c:	0f00f1ba 	.word	0x0f00f1ba
   1ba30:	2004d008 	.word	0x2004d008
   1ba34:	87f0e8bd 	.word	0x87f0e8bd
   1ba38:	e8bd2007 	.word	0xe8bd2007
   1ba3c:	200787f0 	.word	0x200787f0
   1ba40:	20084770 	.word	0x20084770
   1ba44:	52130100 	.word	0x52130100
   1ba48:	4402684b 	.word	0x4402684b
   1ba4c:	688b6053 	.word	0x688b6053
   1ba50:	60932000 	.word	0x60932000
   1ba54:	60d368cb 	.word	0x60d368cb
   1ba58:	87f0e8bd 	.word	0x87f0e8bd
   1ba5c:	4770200e 	.word	0x4770200e
   1ba60:	e7ef2006 	.word	0xe7ef2006
   1ba64:	e7ed2001 	.word	0xe7ed2001
   1ba68:	e7eb2002 	.word	0xe7eb2002
   1ba6c:	e7e92003 	.word	0xe7e92003
   1ba70:	e7e72004 	.word	0xe7e72004
   1ba74:	e7e52005 	.word	0xe7e52005
   1ba78:	e7e32007 	.word	0xe7e32007
   1ba7c:	20021470 	.word	0x20021470

0001ba80 <rpc_transport_input>:
   1ba80:	4a82b538 	.word	0x4a82b538
   1ba84:	8810680b 	.word	0x8810680b
   1ba88:	4298b29b 	.word	0x4298b29b
   1ba8c:	8a10d027 	.word	0x8a10d027
   1ba90:	d0244298 	.word	0xd0244298
   1ba94:	42988c10 	.word	0x42988c10
   1ba98:	8e10d021 	.word	0x8e10d021
   1ba9c:	d01e4298 	.word	0xd01e4298
   1baa0:	0040f8b2 	.word	0x0040f8b2
   1baa4:	d01a4298 	.word	0xd01a4298
   1baa8:	0050f8b2 	.word	0x0050f8b2
   1baac:	d0164298 	.word	0xd0164298
   1bab0:	0060f8b2 	.word	0x0060f8b2
   1bab4:	d0124298 	.word	0xd0124298
   1bab8:	0070f8b2 	.word	0x0070f8b2
   1babc:	d00e4298 	.word	0xd00e4298
   1bac0:	0080f8b2 	.word	0x0080f8b2
   1bac4:	d00a4298 	.word	0xd00a4298
   1bac8:	2090f8b2 	.word	0x2090f8b2
   1bacc:	d006429a 	.word	0xd006429a
   1bad0:	b1186888 	.word	0xb1186888
   1bad4:	691b4b6e 	.word	0x691b4b6e
   1bad8:	20004798 	.word	0x20004798
   1badc:	6888bd38 	.word	0x6888bd38
   1bae0:	f0002800 	.word	0xf0002800
   1bae4:	4a6b8098 	.word	0x4a6b8098
   1bae8:	2c006814 	.word	0x2c006814
   1baec:	6894d03c 	.word	0x6894d03c
   1baf0:	f0002c00 	.word	0xf0002c00
   1baf4:	6914809a 	.word	0x6914809a
   1baf8:	f0002c00 	.word	0xf0002c00
   1bafc:	6994809a 	.word	0x6994809a
   1bb00:	f0002c00 	.word	0xf0002c00
   1bb04:	6a14809a 	.word	0x6a14809a
   1bb08:	f0002c00 	.word	0xf0002c00
   1bb0c:	6a94809a 	.word	0x6a94809a
   1bb10:	f0002c00 	.word	0xf0002c00
   1bb14:	6b148084 	.word	0x6b148084
   1bb18:	f0002c00 	.word	0xf0002c00
   1bb1c:	6b948098 	.word	0x6b948098
   1bb20:	f0002c00 	.word	0xf0002c00
   1bb24:	6c148096 	.word	0x6c148096
   1bb28:	f0002c00 	.word	0xf0002c00
   1bb2c:	6c948096 	.word	0x6c948096
   1bb30:	f0002c00 	.word	0xf0002c00
   1bb34:	6d148096 	.word	0x6d148096
   1bb38:	f0002c00 	.word	0xf0002c00
   1bb3c:	6d948096 	.word	0x6d948096
   1bb40:	f0002c00 	.word	0xf0002c00
   1bb44:	6e148098 	.word	0x6e148098
   1bb48:	f0002c00 	.word	0xf0002c00
   1bb4c:	6e948098 	.word	0x6e948098
   1bb50:	f0002c00 	.word	0xf0002c00
   1bb54:	6f148096 	.word	0x6f148096
   1bb58:	f0002c00 	.word	0xf0002c00
   1bb5c:	6f948094 	.word	0x6f948094
   1bb60:	2001b10c 	.word	0x2001b10c
   1bb64:	240fbd38 	.word	0x240fbd38
   1bb68:	05c4eb02 	.word	0x05c4eb02
   1bb6c:	0034f842 	.word	0x0034f842
   1bb70:	4b4980ab 	.word	0x4b4980ab
   1bb74:	2a01781a 	.word	0x2a01781a
   1bb78:	7a1ad053 	.word	0x7a1ad053
   1bb7c:	d0412a01 	.word	0xd0412a01
   1bb80:	2a017c1a 	.word	0x2a017c1a
   1bb84:	7e1ad04f 	.word	0x7e1ad04f
   1bb88:	d0502a01 	.word	0xd0502a01
   1bb8c:	2020f893 	.word	0x2020f893
   1bb90:	d0502a01 	.word	0xd0502a01
   1bb94:	2028f893 	.word	0x2028f893
   1bb98:	d0502a01 	.word	0xd0502a01
   1bb9c:	2030f893 	.word	0x2030f893
   1bba0:	d03a2a01 	.word	0xd03a2a01
   1bba4:	2038f893 	.word	0x2038f893
   1bba8:	d04c2a01 	.word	0xd04c2a01
   1bbac:	2040f893 	.word	0x2040f893
   1bbb0:	d04a2a01 	.word	0xd04a2a01
   1bbb4:	2048f893 	.word	0x2048f893
   1bbb8:	d04c2a01 	.word	0xd04c2a01
   1bbbc:	2050f893 	.word	0x2050f893
   1bbc0:	d04c2a01 	.word	0xd04c2a01
   1bbc4:	2058f893 	.word	0x2058f893
   1bbc8:	d04c2a01 	.word	0xd04c2a01
   1bbcc:	2060f893 	.word	0x2060f893
   1bbd0:	d04c2a01 	.word	0xd04c2a01
   1bbd4:	2068f893 	.word	0x2068f893
   1bbd8:	d04a2a01 	.word	0xd04a2a01
   1bbdc:	2070f893 	.word	0x2070f893
   1bbe0:	d04a2a01 	.word	0xd04a2a01
   1bbe4:	2078f893 	.word	0x2078f893
   1bbe8:	d00a2a01 	.word	0xd00a2a01
   1bbec:	d0b82c10 	.word	0xd0b82c10
   1bbf0:	4b282200 	.word	0x4b282200
   1bbf4:	eb032001 	.word	0xeb032001
   1bbf8:	808a01c4 	.word	0x808a01c4
   1bbfc:	2034f843 	.word	0x2034f843
   1bc00:	220fbd38 	.word	0x220fbd38
   1bc04:	eb032402 	.word	0xeb032402
   1bc08:	f80300c2 	.word	0xf80300c2
   1bc0c:	60414032 	.word	0x60414032
   1bc10:	ff60f7f3 	.word	0xff60f7f3
   1bc14:	2410e7a5 	.word	0x2410e7a5
   1bc18:	2206e7ab 	.word	0x2206e7ab
   1bc1c:	2405e7f2 	.word	0x2405e7f2
   1bc20:	2200e7a2 	.word	0x2200e7a2
   1bc24:	2202e7ee 	.word	0x2202e7ee
   1bc28:	2401e7ec 	.word	0x2401e7ec
   1bc2c:	2203e79c 	.word	0x2203e79c
   1bc30:	2402e7e8 	.word	0x2402e7e8
   1bc34:	2204e798 	.word	0x2204e798
   1bc38:	2403e7e4 	.word	0x2403e7e4
   1bc3c:	2205e794 	.word	0x2205e794
   1bc40:	2404e7e0 	.word	0x2404e7e0
   1bc44:	2207e790 	.word	0x2207e790
   1bc48:	2208e7dc 	.word	0x2208e7dc
   1bc4c:	2406e7da 	.word	0x2406e7da
   1bc50:	2407e78a 	.word	0x2407e78a
   1bc54:	2209e788 	.word	0x2209e788
   1bc58:	2408e7d4 	.word	0x2408e7d4
   1bc5c:	220ae784 	.word	0x220ae784
   1bc60:	2409e7d0 	.word	0x2409e7d0
   1bc64:	220be780 	.word	0x220be780
   1bc68:	240ae7cc 	.word	0x240ae7cc
   1bc6c:	220ce77c 	.word	0x220ce77c
   1bc70:	220de7c8 	.word	0x220de7c8
   1bc74:	240be7c6 	.word	0x240be7c6
   1bc78:	220ee776 	.word	0x220ee776
   1bc7c:	240ce7c2 	.word	0x240ce7c2
   1bc80:	240de772 	.word	0x240de772
   1bc84:	240ee770 	.word	0x240ee770
   1bc88:	bf00e76e 	.word	0xbf00e76e
   1bc8c:	20021470 	.word	0x20021470
   1bc90:	20021510 	.word	0x20021510
   1bc94:	20021528 	.word	0x20021528
   1bc98:	200215a8 	.word	0x200215a8

0001bc9c <rpc_transport_register>:
   1bc9c:	2900b4f0 	.word	0x2900b4f0
   1bca0:	2800d052 	.word	0x2800d052
   1bca4:	6883d050 	.word	0x6883d050
   1bca8:	d04d2b00 	.word	0xd04d2b00
   1bcac:	2b006903 	.word	0x2b006903
   1bcb0:	6843d04a 	.word	0x6843d04a
   1bcb4:	d0472b00 	.word	0xd0472b00
   1bcb8:	2b0068c3 	.word	0x2b0068c3
   1bcbc:	6803d044 	.word	0x6803d044
   1bcc0:	d0412b00 	.word	0xd0412b00
   1bcc4:	2b006943 	.word	0x2b006943
   1bcc8:	2601d03e 	.word	0x2601d03e
   1bccc:	46042500 	.word	0x46042500
   1bcd0:	4a1f460f 	.word	0x4a1f460f
   1bcd4:	f8df4b1f 	.word	0xf8df4b1f
   1bcd8:	7416c080 	.word	0x7416c080
   1bcdc:	f8827616 	.word	0xf8827616
   1bce0:	f8826020 	.word	0xf8826020
   1bce4:	f8826028 	.word	0xf8826028
   1bce8:	f8826030 	.word	0xf8826030
   1bcec:	f8826038 	.word	0xf8826038
   1bcf0:	f8826040 	.word	0xf8826040
   1bcf4:	f8826048 	.word	0xf8826048
   1bcf8:	f8826050 	.word	0xf8826050
   1bcfc:	f8826058 	.word	0xf8826058
   1bd00:	f8826060 	.word	0xf8826060
   1bd04:	f8826068 	.word	0xf8826068
   1bd08:	f8826070 	.word	0xf8826070
   1bd0c:	611d6078 	.word	0x611d6078
   1bd10:	621d619d 	.word	0x621d619d
   1bd14:	631d629d 	.word	0x631d629d
   1bd18:	641d639d 	.word	0x641d639d
   1bd1c:	651d649d 	.word	0x651d649d
   1bd20:	661d659d 	.word	0x661d659d
   1bd24:	671d669d 	.word	0x671d669d
   1bd28:	7016679d 	.word	0x7016679d
   1bd2c:	601d7216 	.word	0x601d7216
   1bd30:	cc0f609d 	.word	0xcc0f609d
   1bd34:	000fe8ac 	.word	0x000fe8ac
   1bd38:	0003e894 	.word	0x0003e894
   1bd3c:	0003e88c 	.word	0x0003e88c
   1bd40:	4628603e 	.word	0x4628603e
   1bd44:	4770bcf0 	.word	0x4770bcf0
   1bd48:	4628250e 	.word	0x4628250e
   1bd4c:	4770bcf0 	.word	0x4770bcf0
   1bd50:	200215a8 	.word	0x200215a8
   1bd54:	20021528 	.word	0x20021528
   1bd58:	20021510 	.word	0x20021510

0001bd5c <rpc_transport_unregister>:
   1bd5c:	d03a2800 	.word	0xd03a2800
   1bd60:	47f0e92d 	.word	0x47f0e92d
   1bd64:	4c1d4680 	.word	0x4c1d4680
   1bd68:	05a0f104 	.word	0x05a0f104
   1bd6c:	341068a3 	.word	0x341068a3
   1bd70:	4798b103 	.word	0x4798b103
   1bd74:	d1f942ac 	.word	0xd1f942ac
   1bd78:	0901f04f 	.word	0x0901f04f
   1bd7c:	4c182600 	.word	0x4c182600
   1bd80:	f8df4d18 	.word	0xf8df4d18
   1bd84:	f104a064 	.word	0xf104a064
   1bd88:	f8140780 	.word	0xf8140780
   1bd8c:	2b013c04 	.word	0x2b013c04
   1bd90:	f8dad005 	.word	0xf8dad005
   1bd94:	6820300c 	.word	0x6820300c
   1bd98:	f8044798 	.word	0xf8044798
   1bd9c:	f8559c04 	.word	0xf8559c04
   1bda0:	34080c04 	.word	0x34080c04
   1bda4:	f8dab128 	.word	0xf8dab128
   1bda8:	47983010 	.word	0x47983010
   1bdac:	f845802e 	.word	0xf845802e
   1bdb0:	42bc6c04 	.word	0x42bc6c04
   1bdb4:	0508f105 	.word	0x0508f105
   1bdb8:	f8d8d1e7 	.word	0xf8d8d1e7
   1bdbc:	22180000 	.word	0x22180000
   1bdc0:	eb003801 	.word	0xeb003801
   1bdc4:	eb0a0040 	.word	0xeb0a0040
   1bdc8:	210000c0 	.word	0x210000c0
   1bdcc:	f97af007 	.word	0xf97af007
   1bdd0:	e8bd2000 	.word	0xe8bd2000
   1bdd4:	200e87f0 	.word	0x200e87f0
   1bdd8:	bf004770 	.word	0xbf004770
   1bddc:	20021470 	.word	0x20021470
   1bde0:	200215ac 	.word	0x200215ac
   1bde4:	2002152c 	.word	0x2002152c
   1bde8:	20021510 	.word	0x20021510

0001bdec <rpc_message_send>:
   1bdec:	b171b168 	.word	0xb171b168
   1bdf0:	68534a09 	.word	0x68534a09
   1bdf4:	684bb16b 	.word	0x684bb16b
   1bdf8:	f0238008 	.word	0xf0238008
   1bdfc:	f04303ff 	.word	0xf04303ff
   1be00:	68120302 	.word	0x68120302
   1be04:	4608604b 	.word	0x4608604b
   1be08:	20074710 	.word	0x20074710
   1be0c:	200e4770 	.word	0x200e4770
   1be10:	20084770 	.word	0x20084770
   1be14:	bf004770 	.word	0xbf004770
   1be18:	20021510 	.word	0x20021510

0001be1c <rpc_message_alloc>:
   1be1c:	b330b35a 	.word	0xb330b35a
   1be20:	e92d2300 	.word	0xe92d2300
   1be24:	4f1541f0 	.word	0x4f1541f0
   1be28:	687b6013 	.word	0x687b6013
   1be2c:	4615b30b 	.word	0x4615b30b
   1be30:	4606460c 	.word	0x4606460c
   1be34:	4798b959 	.word	0x4798b959
   1be38:	b1a84603 	.word	0xb1a84603
   1be3c:	60dc46a0 	.word	0x60dc46a0
   1be40:	8008f8c3 	.word	0x8008f8c3
   1be44:	602b801e 	.word	0x602b801e
   1be48:	e8bd2000 	.word	0xe8bd2000
   1be4c:	68bb81f0 	.word	0x68bb81f0
   1be50:	47984608 	.word	0x47984608
   1be54:	b1384680 	.word	0xb1384680
   1be58:	4798687b 	.word	0x4798687b
   1be5c:	28004603 	.word	0x28004603
   1be60:	693bd1ed 	.word	0x693bd1ed
   1be64:	47984640 	.word	0x47984640
   1be68:	e8bd2004 	.word	0xe8bd2004
   1be6c:	200781f0 	.word	0x200781f0
   1be70:	20084770 	.word	0x20084770
   1be74:	200ee7f9 	.word	0x200ee7f9
   1be78:	bf004770 	.word	0xbf004770
   1be7c:	20021510 	.word	0x20021510

0001be80 <rpc_message_free>:
   1be80:	f0002800 	.word	0xf0002800
   1be84:	2900808c 	.word	0x2900808c
   1be88:	80e9f000 	.word	0x80e9f000
   1be8c:	4a83b538 	.word	0x4a83b538
   1be90:	2b006853 	.word	0x2b006853
   1be94:	8085f000 	.word	0x8085f000
   1be98:	46084c81 	.word	0x46084c81
   1be9c:	42996863 	.word	0x42996863
   1bea0:	8085f000 	.word	0x8085f000
   1bea4:	429868e3 	.word	0x429868e3
   1bea8:	808ef000 	.word	0x808ef000
   1beac:	42986963 	.word	0x42986963
   1beb0:	8090f000 	.word	0x8090f000
   1beb4:	429869e3 	.word	0x429869e3
   1beb8:	8092f000 	.word	0x8092f000
   1bebc:	42986a63 	.word	0x42986a63
   1bec0:	8095f000 	.word	0x8095f000
   1bec4:	42986ae3 	.word	0x42986ae3
   1bec8:	8098f000 	.word	0x8098f000
   1becc:	42986b63 	.word	0x42986b63
   1bed0:	809bf000 	.word	0x809bf000
   1bed4:	42986be3 	.word	0x42986be3
   1bed8:	809ef000 	.word	0x809ef000
   1bedc:	42986c63 	.word	0x42986c63
   1bee0:	80a1f000 	.word	0x80a1f000
   1bee4:	42986ce3 	.word	0x42986ce3
   1bee8:	80a4f000 	.word	0x80a4f000
   1beec:	42986d63 	.word	0x42986d63
   1bef0:	80a7f000 	.word	0x80a7f000
   1bef4:	42986de3 	.word	0x42986de3
   1bef8:	80aaf000 	.word	0x80aaf000
   1befc:	42986e63 	.word	0x42986e63
   1bf00:	80aff000 	.word	0x80aff000
   1bf04:	42986ee3 	.word	0x42986ee3
   1bf08:	80b2f000 	.word	0x80b2f000
   1bf0c:	42986f63 	.word	0x42986f63
   1bf10:	80b5f000 	.word	0x80b5f000
   1bf14:	42836fe3 	.word	0x42836fe3
   1bf18:	80b8f000 	.word	0x80b8f000
   1bf1c:	479868d3 	.word	0x479868d3
   1bf20:	2b047823 	.word	0x2b047823
   1bf24:	7a23d03f 	.word	0x7a23d03f
   1bf28:	d03c2b04 	.word	0xd03c2b04
   1bf2c:	2b047c23 	.word	0x2b047c23
   1bf30:	7e23d039 	.word	0x7e23d039
   1bf34:	d0362b04 	.word	0xd0362b04
   1bf38:	3020f894 	.word	0x3020f894
   1bf3c:	d0322b04 	.word	0xd0322b04
   1bf40:	3028f894 	.word	0x3028f894
   1bf44:	d02e2b04 	.word	0xd02e2b04
   1bf48:	3030f894 	.word	0x3030f894
   1bf4c:	d02a2b04 	.word	0xd02a2b04
   1bf50:	3038f894 	.word	0x3038f894
   1bf54:	d0262b04 	.word	0xd0262b04
   1bf58:	3040f894 	.word	0x3040f894
   1bf5c:	d0222b04 	.word	0xd0222b04
   1bf60:	3048f894 	.word	0x3048f894
   1bf64:	d01e2b04 	.word	0xd01e2b04
   1bf68:	3050f894 	.word	0x3050f894
   1bf6c:	d01a2b04 	.word	0xd01a2b04
   1bf70:	3058f894 	.word	0x3058f894
   1bf74:	d0162b04 	.word	0xd0162b04
   1bf78:	3060f894 	.word	0x3060f894
   1bf7c:	d0122b04 	.word	0xd0122b04
   1bf80:	3068f894 	.word	0x3068f894
   1bf84:	d00e2b04 	.word	0xd00e2b04
   1bf88:	3070f894 	.word	0x3070f894
   1bf8c:	d00a2b04 	.word	0xd00a2b04
   1bf90:	3078f894 	.word	0x3078f894
   1bf94:	bf182b04 	.word	0xbf182b04
   1bf98:	d0042000 	.word	0xd0042000
   1bf9c:	2007bd38 	.word	0x2007bd38
   1bfa0:	20084770 	.word	0x20084770
   1bfa4:	f7f3bd38 	.word	0xf7f3bd38
   1bfa8:	2000fd95 	.word	0x2000fd95
   1bfac:	7821bd38 	.word	0x7821bd38
   1bfb0:	f47f2903 	.word	0xf47f2903
   1bfb4:	2100af77 	.word	0x2100af77
   1bfb8:	46182501 	.word	0x46182501
   1bfbc:	f80468d2 	.word	0xf80468d2
   1bfc0:	47905031 	.word	0x47905031
   1bfc4:	bd382000 	.word	0xbd382000
   1bfc8:	29037a21 	.word	0x29037a21
   1bfcc:	af6ef47f 	.word	0xaf6ef47f
   1bfd0:	e7f12101 	.word	0xe7f12101
   1bfd4:	29037c21 	.word	0x29037c21
   1bfd8:	af6cf47f 	.word	0xaf6cf47f
   1bfdc:	e7eb2102 	.word	0xe7eb2102
   1bfe0:	29037e21 	.word	0x29037e21
   1bfe4:	6a63d0e8 	.word	0x6a63d0e8
   1bfe8:	f47f4298 	.word	0xf47f4298
   1bfec:	f894af6b 	.word	0xf894af6b
   1bff0:	29031020 	.word	0x29031020
   1bff4:	af66f47f 	.word	0xaf66f47f
   1bff8:	e7dd2104 	.word	0xe7dd2104
   1bffc:	1028f894 	.word	0x1028f894
   1c000:	f47f2903 	.word	0xf47f2903
   1c004:	2105af63 	.word	0x2105af63
   1c008:	f894e7d6 	.word	0xf894e7d6
   1c00c:	29031030 	.word	0x29031030
   1c010:	af60f47f 	.word	0xaf60f47f
   1c014:	e7cf2106 	.word	0xe7cf2106
   1c018:	1038f894 	.word	0x1038f894
   1c01c:	f47f2903 	.word	0xf47f2903
   1c020:	2107af5d 	.word	0x2107af5d
   1c024:	f894e7c8 	.word	0xf894e7c8
   1c028:	29031040 	.word	0x29031040
   1c02c:	af5af47f 	.word	0xaf5af47f
   1c030:	e7c12108 	.word	0xe7c12108
   1c034:	1048f894 	.word	0x1048f894
   1c038:	f47f2903 	.word	0xf47f2903
   1c03c:	2109af57 	.word	0x2109af57
   1c040:	f894e7ba 	.word	0xf894e7ba
   1c044:	29031050 	.word	0x29031050
   1c048:	af54f47f 	.word	0xaf54f47f
   1c04c:	e7b3210a 	.word	0xe7b3210a
   1c050:	1058f894 	.word	0x1058f894
   1c054:	f47f2903 	.word	0xf47f2903
   1c058:	210baf51 	.word	0x210baf51
   1c05c:	200ee7ac 	.word	0x200ee7ac
   1c060:	f8944770 	.word	0xf8944770
   1c064:	29031060 	.word	0x29031060
   1c068:	af4cf47f 	.word	0xaf4cf47f
   1c06c:	e7a3210c 	.word	0xe7a3210c
   1c070:	1068f894 	.word	0x1068f894
   1c074:	f47f2903 	.word	0xf47f2903
   1c078:	210daf49 	.word	0x210daf49
   1c07c:	f894e79c 	.word	0xf894e79c
   1c080:	29031070 	.word	0x29031070
   1c084:	af46f47f 	.word	0xaf46f47f
   1c088:	e795210e 	.word	0xe795210e
   1c08c:	3078f894 	.word	0x3078f894
   1c090:	f47f2b03 	.word	0xf47f2b03
   1c094:	4603af43 	.word	0x4603af43
   1c098:	e78d210f 	.word	0xe78d210f
   1c09c:	20021510 	.word	0x20021510
   1c0a0:	200215a8 	.word	0x200215a8

0001c0a4 <rpc_message_data_free>:
   1c0a4:	f0002800 	.word	0xf0002800
   1c0a8:	29008091 	.word	0x29008091
   1c0ac:	80e4f000 	.word	0x80e4f000
   1c0b0:	4a81b538 	.word	0x4a81b538
   1c0b4:	2b006853 	.word	0x2b006853
   1c0b8:	808af000 	.word	0x808af000
   1c0bc:	681c4b7f 	.word	0x681c4b7f
   1c0c0:	f00042a1 	.word	0xf00042a1
   1c0c4:	689c8087 	.word	0x689c8087
   1c0c8:	f00042a1 	.word	0xf00042a1
   1c0cc:	691c808f 	.word	0x691c808f
   1c0d0:	f00042a1 	.word	0xf00042a1
   1c0d4:	699c8091 	.word	0x699c8091
   1c0d8:	f00042a1 	.word	0xf00042a1
   1c0dc:	6a1c8093 	.word	0x6a1c8093
   1c0e0:	f00042a1 	.word	0xf00042a1
   1c0e4:	6a9c8095 	.word	0x6a9c8095
   1c0e8:	f00042a1 	.word	0xf00042a1
   1c0ec:	6b1c8097 	.word	0x6b1c8097
   1c0f0:	f00042a1 	.word	0xf00042a1
   1c0f4:	6b9c8099 	.word	0x6b9c8099
   1c0f8:	f00042a1 	.word	0xf00042a1
   1c0fc:	6c1c809b 	.word	0x6c1c809b
   1c100:	f00042a1 	.word	0xf00042a1
   1c104:	6c9c809d 	.word	0x6c9c809d
   1c108:	f00042a1 	.word	0xf00042a1
   1c10c:	6d1c80a0 	.word	0x6d1c80a0
   1c110:	f00042a1 	.word	0xf00042a1
   1c114:	6d9c80a3 	.word	0x6d9c80a3
   1c118:	f00042a1 	.word	0xf00042a1
   1c11c:	6e1c80a6 	.word	0x6e1c80a6
   1c120:	f00042a1 	.word	0xf00042a1
   1c124:	6e9c80ab 	.word	0x6e9c80ab
   1c128:	f00042a1 	.word	0xf00042a1
   1c12c:	6f1c80ae 	.word	0x6f1c80ae
   1c130:	f00042a1 	.word	0xf00042a1
   1c134:	6f9c80b1 	.word	0x6f9c80b1
   1c138:	f000428c 	.word	0xf000428c
   1c13c:	691380b4 	.word	0x691380b4
   1c140:	47984608 	.word	0x47984608
   1c144:	781a4b5e 	.word	0x781a4b5e
   1c148:	d03b2a04 	.word	0xd03b2a04
   1c14c:	2a047a1a 	.word	0x2a047a1a
   1c150:	7c1ad038 	.word	0x7c1ad038
   1c154:	d0352a04 	.word	0xd0352a04
   1c158:	2a047e1a 	.word	0x2a047e1a
   1c15c:	f893d032 	.word	0xf893d032
   1c160:	2a042020 	.word	0x2a042020
   1c164:	f893d02e 	.word	0xf893d02e
   1c168:	2a042028 	.word	0x2a042028
   1c16c:	f893d02a 	.word	0xf893d02a
   1c170:	2a042030 	.word	0x2a042030
   1c174:	f893d026 	.word	0xf893d026
   1c178:	2a042038 	.word	0x2a042038
   1c17c:	f893d022 	.word	0xf893d022
   1c180:	2a042040 	.word	0x2a042040
   1c184:	f893d01e 	.word	0xf893d01e
   1c188:	2a042048 	.word	0x2a042048
   1c18c:	f893d01a 	.word	0xf893d01a
   1c190:	2a042050 	.word	0x2a042050
   1c194:	f893d016 	.word	0xf893d016
   1c198:	2a042058 	.word	0x2a042058
   1c19c:	f893d012 	.word	0xf893d012
   1c1a0:	2a042060 	.word	0x2a042060
   1c1a4:	f893d00e 	.word	0xf893d00e
   1c1a8:	2a042068 	.word	0x2a042068
   1c1ac:	f893d00a 	.word	0xf893d00a
   1c1b0:	2a042070 	.word	0x2a042070
   1c1b4:	f893d006 	.word	0xf893d006
   1c1b8:	2b043078 	.word	0x2b043078
   1c1bc:	2000bf18 	.word	0x2000bf18
   1c1c0:	bd38d000 	.word	0xbd38d000
   1c1c4:	fc86f7f3 	.word	0xfc86f7f3
   1c1c8:	bd382000 	.word	0xbd382000
   1c1cc:	47702007 	.word	0x47702007
   1c1d0:	bd382008 	.word	0xbd382008
   1c1d4:	4284889c 	.word	0x4284889c
   1c1d8:	af75f47f 	.word	0xaf75f47f
   1c1dc:	20002400 	.word	0x20002400
   1c1e0:	05c4eb03 	.word	0x05c4eb03
   1c1e4:	0034f843 	.word	0x0034f843
   1c1e8:	e7a880a8 	.word	0xe7a880a8
   1c1ec:	4284899c 	.word	0x4284899c
   1c1f0:	af6df47f 	.word	0xaf6df47f
   1c1f4:	e7f22401 	.word	0xe7f22401
   1c1f8:	42848a9c 	.word	0x42848a9c
   1c1fc:	af6bf47f 	.word	0xaf6bf47f
   1c200:	e7ec2402 	.word	0xe7ec2402
   1c204:	42848b9c 	.word	0x42848b9c
   1c208:	af69f47f 	.word	0xaf69f47f
   1c20c:	e7e62403 	.word	0xe7e62403
   1c210:	42848c9c 	.word	0x42848c9c
   1c214:	af67f47f 	.word	0xaf67f47f
   1c218:	e7e02404 	.word	0xe7e02404
   1c21c:	42848d9c 	.word	0x42848d9c
   1c220:	af65f47f 	.word	0xaf65f47f
   1c224:	e7da2405 	.word	0xe7da2405
   1c228:	42848e9c 	.word	0x42848e9c
   1c22c:	af63f47f 	.word	0xaf63f47f
   1c230:	e7d42406 	.word	0xe7d42406
   1c234:	42848f9c 	.word	0x42848f9c
   1c238:	af61f47f 	.word	0xaf61f47f
   1c23c:	e7ce2407 	.word	0xe7ce2407
   1c240:	4044f8b3 	.word	0x4044f8b3
   1c244:	f47f4284 	.word	0xf47f4284
   1c248:	2408af5e 	.word	0x2408af5e
   1c24c:	f8b3e7c7 	.word	0xf8b3e7c7
   1c250:	4284404c 	.word	0x4284404c
   1c254:	af5bf47f 	.word	0xaf5bf47f
   1c258:	e7c02409 	.word	0xe7c02409
   1c25c:	4054f8b3 	.word	0x4054f8b3
   1c260:	f47f4284 	.word	0xf47f4284
   1c264:	240aaf58 	.word	0x240aaf58
   1c268:	f8b3e7b9 	.word	0xf8b3e7b9
   1c26c:	4284405c 	.word	0x4284405c
   1c270:	af55f47f 	.word	0xaf55f47f
   1c274:	e7b2240b 	.word	0xe7b2240b
   1c278:	4770200e 	.word	0x4770200e
   1c27c:	4064f8b3 	.word	0x4064f8b3
   1c280:	f47f4284 	.word	0xf47f4284
   1c284:	240caf50 	.word	0x240caf50
   1c288:	f8b3e7a9 	.word	0xf8b3e7a9
   1c28c:	4284406c 	.word	0x4284406c
   1c290:	af4df47f 	.word	0xaf4df47f
   1c294:	e7a2240d 	.word	0xe7a2240d
   1c298:	4074f8b3 	.word	0x4074f8b3
   1c29c:	f47f4284 	.word	0xf47f4284
   1c2a0:	240eaf4a 	.word	0x240eaf4a
   1c2a4:	f8b3e79b 	.word	0xf8b3e79b
   1c2a8:	4284407c 	.word	0x4284407c
   1c2ac:	240fbf08 	.word	0x240fbf08
   1c2b0:	af45f47f 	.word	0xaf45f47f
   1c2b4:	bf00e793 	.word	0xbf00e793
   1c2b8:	20021510 	.word	0x20021510
   1c2bc:	20021528 	.word	0x20021528
   1c2c0:	200215a8 	.word	0x200215a8

0001c2c4 <symbol_000fb79>:
   1c2c4:	b4302801 	.word	0xb4302801
   1c2c8:	d1034b0a 	.word	0xd1034b0a
   1c2cc:	7c1de00a 	.word	0x7c1de00a
   1c2d0:	d0084285 	.word	0xd0084285
   1c2d4:	4f14f853 	.word	0x4f14f853
   1c2d8:	d1f82c00 	.word	0xd1f82c00
   1c2dc:	002df06f 	.word	0x002df06f
   1c2e0:	4770bc30 	.word	0x4770bc30
   1c2e4:	600c4c04 	.word	0x600c4c04
   1c2e8:	2000685b 	.word	0x2000685b
   1c2ec:	6013bc30 	.word	0x6013bc30
   1c2f0:	bf004770 	.word	0xbf004770
   1c2f4:	0002494c 	.word	0x0002494c
   1c2f8:	00024918 	.word	0x00024918

0001c2fc <symbol_000494c>:
   1c2fc:	b4302803 	.word	0xb4302803
   1c300:	d1034b0a 	.word	0xd1034b0a
   1c304:	7c1de00a 	.word	0x7c1de00a
   1c308:	d0084285 	.word	0xd0084285
   1c30c:	4f14f853 	.word	0x4f14f853
   1c310:	d1f82c00 	.word	0xd1f82c00
   1c314:	002df06f 	.word	0x002df06f
   1c318:	4770bc30 	.word	0x4770bc30
   1c31c:	600c4c04 	.word	0x600c4c04
   1c320:	2000685b 	.word	0x2000685b
   1c324:	6013bc30 	.word	0x6013bc30
   1c328:	bf004770 	.word	0xbf004770
   1c32c:	00024924 	.word	0x00024924
   1c330:	0002490c 	.word	0x0002490c

0001c334 <dfu_client_event_handler>:
   1c334:	1b08f850 	.word	0x1b08f850
   1c338:	f7fc0c09 	.word	0xf7fc0c09
   1c33c:	bf00b80d 	.word	0xbf00b80d

0001c340 <rpc_dfu_client_init>:
   1c340:	f7ff4801 	.word	0xf7ff4801
   1c344:	bf00bb33 	.word	0xbf00bb33
   1c348:	0002499c 	.word	0x0002499c

0001c34c <rpc_dfu_client_request_alloc>:
   1c34c:	b5102300 	.word	0xb5102300
   1c350:	9301b082 	.word	0x9301b082
   1c354:	4604b158 	.word	0x4604b158
   1c358:	2006aa01 	.word	0x2006aa01
   1c35c:	fd5ef7ff 	.word	0xfd5ef7ff
   1c360:	9b01b918 	.word	0x9b01b918
   1c364:	3308b10b 	.word	0x3308b10b
   1c368:	b0026023 	.word	0xb0026023
   1c36c:	2007bd10 	.word	0x2007bd10
   1c370:	bd10b002 	.word	0xbd10b002

0001c374 <rpc_dfu_client_request_send>:
   1c374:	4f70f411 	.word	0x4f70f411
   1c378:	b160d10b 	.word	0xb160d10b
   1c37c:	f8304603 	.word	0xf8304603
   1c380:	20062c08 	.word	0x20062c08
   1c384:	4101ea42 	.word	0x4101ea42
   1c388:	1d08f843 	.word	0x1d08f843
   1c38c:	f7ff4619 	.word	0xf7ff4619
   1c390:	200fbd2d 	.word	0x200fbd2d
   1c394:	20074770 	.word	0x20074770
   1c398:	bf004770 	.word	0xbf004770

0001c39c <rpc_dfu_client_message_free>:
   1c39c:	f1a0b120 	.word	0xf1a0b120
   1c3a0:	20060108 	.word	0x20060108
   1c3a4:	bd6cf7ff 	.word	0xbd6cf7ff
   1c3a8:	47702007 	.word	0x47702007

0001c3ac <rpc_dfu_client_data_free>:
   1c3ac:	4601b118 	.word	0x4601b118
   1c3b0:	f7ff2006 	.word	0xf7ff2006
   1c3b4:	2007be77 	.word	0x2007be77
   1c3b8:	bf004770 	.word	0xbf004770

0001c3bc <mem_free>:
   1c3bc:	4ff0e92d 	.word	0x4ff0e92d
   1c3c0:	c0ccf8df 	.word	0xc0ccf8df
   1c3c4:	9000b083 	.word	0x9000b083
   1c3c8:	0b3cf10c 	.word	0x0b3cf10c
   1c3cc:	3008f8dc 	.word	0x3008f8dc
   1c3d0:	f8dcb12b 	.word	0xf8dcb12b
   1c3d4:	9c002000 	.word	0x9c002000
   1c3d8:	42a07810 	.word	0x42a07810
   1c3dc:	f10cd006 	.word	0xf10cd006
   1c3e0:	45e30c0c 	.word	0x45e30c0c
   1c3e4:	b003d1f2 	.word	0xb003d1f2
   1c3e8:	8ff0e8bd 	.word	0x8ff0e8bd
   1c3ec:	a004f8dc 	.word	0xa004f8dc
   1c3f0:	080aeb03 	.word	0x080aeb03
   1c3f4:	d2f245c2 	.word	0xd2f245c2
   1c3f8:	f8cd6853 	.word	0xf8cd6853
   1c3fc:	46d6c004 	.word	0x46d6c004
   1c400:	f8d2469c 	.word	0xf8d2469c
   1c404:	89979010 	.word	0x89979010
   1c408:	000aebae 	.word	0x000aebae
   1c40c:	f8b9b3df 	.word	0xf8b9b3df
   1c410:	42902002 	.word	0x42902002
   1c414:	4665d31c 	.word	0x4665d31c
   1c418:	f1092400 	.word	0xf1092400
   1c41c:	e0030304 	.word	0xe0030304
   1c420:	3304885a 	.word	0x3304885a
   1c424:	d8154282 	.word	0xd8154282
   1c428:	6c04f833 	.word	0x6c04f833
   1c42c:	42a73401 	.word	0x42a73401
   1c430:	5506fb02 	.word	0x5506fb02
   1c434:	0002eba0 	.word	0x0002eba0
   1c438:	d1f1461e 	.word	0xd1f1461e
   1c43c:	42812000 	.word	0x42812000
   1c440:	f10ed00d 	.word	0xf10ed00d
   1c444:	45f00e01 	.word	0x45f00e01
   1c448:	f8ddd1de 	.word	0xf8ddd1de
   1c44c:	e7c6c004 	.word	0xe7c6c004
   1c450:	464e4665 	.word	0x464e4665
   1c454:	fb008833 	.word	0xfb008833
   1c458:	42815003 	.word	0x42815003
   1c45c:	f5bed1f1 	.word	0xf5bed1f1
   1c460:	f8dd7f00 	.word	0xf8dd7f00
   1c464:	d0bac004 	.word	0xd0bac004
   1c468:	4a082301 	.word	0x4a082301
   1c46c:	115eea4f 	.word	0x115eea4f
   1c470:	0021f852 	.word	0x0021f852
   1c474:	0e1ff00e 	.word	0x0e1ff00e
   1c478:	fe0efa03 	.word	0xfe0efa03
   1c47c:	0000ea4e 	.word	0x0000ea4e
   1c480:	0021f842 	.word	0x0021f842
   1c484:	4638e7af 	.word	0x4638e7af
   1c488:	bf00e7d9 	.word	0xbf00e7d9
   1c48c:	20021628 	.word	0x20021628
   1c490:	2002166c 	.word	0x2002166c

0001c494 <mem_alloc.constprop.5>:
   1c494:	d0502800 	.word	0xd0502800
   1c498:	f8d34b6d 	.word	0xf8d34b6d
   1c49c:	42902088 	.word	0x42902088
   1c4a0:	e92dd84b 	.word	0xe92dd84b
   1c4a4:	f8d34ff0 	.word	0xf8d34ff0
   1c4a8:	b083b08c 	.word	0xb083b08c
   1c4ac:	0f00f1bb 	.word	0x0f00f1bb
   1c4b0:	f10bd054 	.word	0xf10bd054
   1c4b4:	469132ff 	.word	0x469132ff
   1c4b8:	f04f2600 	.word	0xf04f2600
   1c4bc:	4f650812 	.word	0x4f650812
   1c4c0:	f10b9201 	.word	0xf10b9201
   1c4c4:	eb060e11 	.word	0xeb060e11
   1c4c8:	f8530209 	.word	0xf8530209
   1c4cc:	32014038 	.word	0x32014038
   1c4d0:	eb040852 	.word	0xeb040852
   1c4d4:	f1020c44 	.word	0xf1020c44
   1c4d8:	f8530112 	.word	0xf8530112
   1c4dc:	f8575031 	.word	0xf8575031
   1c4e0:	f853a02c 	.word	0xf853a02c
   1c4e4:	eb03403e 	.word	0xeb03403e
   1c4e8:	f8dc0cc8 	.word	0xf8dc0cc8
   1c4ec:	eb05c004 	.word	0xeb05c004
   1c4f0:	eb040545 	.word	0xeb040545
   1c4f4:	f8da0444 	.word	0xf8da0444
   1c4f8:	f857a010 	.word	0xf857a010
   1c4fc:	f8575025 	.word	0xf8575025
   1c500:	f83a4024 	.word	0xf83a4024
   1c504:	eb03a02c 	.word	0xeb03a02c
   1c508:	eb0301c1 	.word	0xeb0301c1
   1c50c:	68490cce 	.word	0x68490cce
   1c510:	6924692d 	.word	0x6924692d
   1c514:	c004f8dc 	.word	0xc004f8dc
   1c518:	f8354550 	.word	0xf8354550
   1c51c:	f8345021 	.word	0xf8345021
   1c520:	d915102c 	.word	0xd915102c
   1c524:	d2114288 	.word	0xd2114288
   1c528:	d90842a8 	.word	0xd90842a8
   1c52c:	45b11c56 	.word	0x45b11c56
   1c530:	8087f0c0 	.word	0x8087f0c0
   1c534:	0813f102 	.word	0x0813f102
   1c538:	2000e7c5 	.word	0x2000e7c5
   1c53c:	f1024770 	.word	0xf1024770
   1c540:	454e39ff 	.word	0x454e39ff
   1c544:	f102d87d 	.word	0xf102d87d
   1c548:	e7bc0e11 	.word	0xe7bc0e11
   1c54c:	0601f109 	.word	0x0601f109
   1c550:	d00745b3 	.word	0xd00745b3
   1c554:	d0012e10 	.word	0xd0012e10
   1c558:	d80845b3 	.word	0xd80845b3
   1c55c:	b0032000 	.word	0xb0032000
   1c560:	8ff0e8bd 	.word	0x8ff0e8bd
   1c564:	2a109a01 	.word	0x2a109a01
   1c568:	4616bf18 	.word	0x4616bf18
   1c56c:	f8dfd0f6 	.word	0xf8dfd0f6
   1c570:	eb03c0e8 	.word	0xeb03c0e8
   1c574:	e9d808c6 	.word	0xe9d808c6
   1c578:	eb022424 	.word	0xeb022424
   1c57c:	f8570242 	.word	0xf8570242
   1c580:	eb073022 	.word	0xeb073022
   1c584:	f8d20282 	.word	0xf8d20282
   1c588:	691de004 	.word	0x691de004
   1c58c:	d0562c00 	.word	0xd0562c00
   1c590:	4670462a 	.word	0x4670462a
   1c594:	eb0500a4 	.word	0xeb0500a4
   1c598:	88510904 	.word	0x88510904
   1c59c:	45913204 	.word	0x45913204
   1c5a0:	d1fa4408 	.word	0xd1fa4408
   1c5a4:	f8b11929 	.word	0xf8b11929
   1c5a8:	4482a002 	.word	0x4482a002
   1c5ac:	d9184582 	.word	0xd9184582
   1c5b0:	f85c0941 	.word	0xf85c0941
   1c5b4:	f0002021 	.word	0xf0002021
   1c5b8:	fa22041f 	.word	0xfa22041f
   1c5bc:	f019f904 	.word	0xf019f904
   1c5c0:	d0070f01 	.word	0xd0070f01
   1c5c4:	f85ce013 	.word	0xf85ce013
   1c5c8:	fa222021 	.word	0xfa222021
   1c5cc:	f019f904 	.word	0xf019f904
   1c5d0:	d10c0f01 	.word	0xd10c0f01
   1c5d4:	45823001 	.word	0x45823001
   1c5d8:	1150ea4f 	.word	0x1150ea4f
   1c5dc:	041ff000 	.word	0x041ff000
   1c5e0:	3601d1f1 	.word	0x3601d1f1
   1c5e4:	f108455e 	.word	0xf108455e
   1c5e8:	d3c40808 	.word	0xd3c40808
   1c5ec:	2601e7b6 	.word	0x2601e7b6
   1c5f0:	f404fa06 	.word	0xf404fa06
   1c5f4:	ea22899e 	.word	0xea22899e
   1c5f8:	eba00204 	.word	0xeba00204
   1c5fc:	f84c000e 	.word	0xf84c000e
   1c600:	685c2021 	.word	0x685c2021
   1c604:	d0a92e00 	.word	0xd0a92e00
   1c608:	4282886a 	.word	0x4282886a
   1c60c:	2100d811 	.word	0x2100d811
   1c610:	e0031d2b 	.word	0xe0031d2b
   1c614:	3304885a 	.word	0x3304885a
   1c618:	d80a4282 	.word	0xd80a4282
   1c61c:	5c04f833 	.word	0x5c04f833
   1c620:	428e3101 	.word	0x428e3101
   1c624:	4405fb02 	.word	0x4405fb02
   1c628:	0002eba0 	.word	0x0002eba0
   1c62c:	d1f1461d 	.word	0xd1f1461d
   1c630:	882be794 	.word	0x882be794
   1c634:	4003fb00 	.word	0x4003fb00
   1c638:	e8bdb003 	.word	0xe8bdb003
   1c63c:	46708ff0 	.word	0x46708ff0
   1c640:	f1bbe7b0 	.word	0xf1bbe7b0
   1c644:	bf080f10 	.word	0xbf080f10
   1c648:	d090260f 	.word	0xd090260f
   1c64c:	bf00e786 	.word	0xbf00e786
   1c650:	200216a8 	.word	0x200216a8
   1c654:	2002166c 	.word	0x2002166c
   1c658:	20021628 	.word	0x20021628

0001c65c <mem_alloc.constprop.4>:
   1c65c:	d04c2800 	.word	0xd04c2800
   1c660:	681a4b6b 	.word	0x681a4b6b
   1c664:	d8484290 	.word	0xd8484290
   1c668:	4ff0e92d 	.word	0x4ff0e92d
   1c66c:	b083685f 	.word	0xb083685f
   1c670:	2f009700 	.word	0x2f009700
   1c674:	1e7ad051 	.word	0x1e7ad051
   1c678:	21004696 	.word	0x21004696
   1c67c:	0c01f04f 	.word	0x0c01f04f
   1c680:	92014c64 	.word	0x92014c64
   1c684:	020eeb01 	.word	0x020eeb01
   1c688:	f8533201 	.word	0xf8533201
   1c68c:	0852503c 	.word	0x0852503c
   1c690:	0801f102 	.word	0x0801f102
   1c694:	0545eb05 	.word	0x0545eb05
   1c698:	9037f853 	.word	0x9037f853
   1c69c:	a025f854 	.word	0xa025f854
   1c6a0:	6038f853 	.word	0x6038f853
   1c6a4:	0549eb09 	.word	0x0549eb09
   1c6a8:	09cceb03 	.word	0x09cceb03
   1c6ac:	9004f8d9 	.word	0x9004f8d9
   1c6b0:	0646eb06 	.word	0x0646eb06
   1c6b4:	a010f8da 	.word	0xa010f8da
   1c6b8:	6026f854 	.word	0x6026f854
   1c6bc:	5025f854 	.word	0x5025f854
   1c6c0:	a029f83a 	.word	0xa029f83a
   1c6c4:	0bc8eb03 	.word	0x0bc8eb03
   1c6c8:	09c7eb03 	.word	0x09c7eb03
   1c6cc:	f8db6936 	.word	0xf8db6936
   1c6d0:	692db004 	.word	0x692db004
   1c6d4:	9004f8d9 	.word	0x9004f8d9
   1c6d8:	f8364550 	.word	0xf8364550
   1c6dc:	f835602b 	.word	0xf835602b
   1c6e0:	d9135029 	.word	0xd9135029
   1c6e4:	d21042a8 	.word	0xd21042a8
   1c6e8:	d90842b0 	.word	0xd90842b0
   1c6ec:	464145c6 	.word	0x464145c6
   1c6f0:	8087f0c0 	.word	0x8087f0c0
   1c6f4:	0c01f108 	.word	0x0c01f108
   1c6f8:	2000e7c4 	.word	0x2000e7c4
   1c6fc:	f1024770 	.word	0xf1024770
   1c700:	45713eff 	.word	0x45713eff
   1c704:	4617d87d 	.word	0x4617d87d
   1c708:	4639e7bc 	.word	0x4639e7bc
   1c70c:	428a9a00 	.word	0x428a9a00
   1c710:	2910d007 	.word	0x2910d007
   1c714:	428ad001 	.word	0x428ad001
   1c718:	2000d808 	.word	0x2000d808
   1c71c:	e8bdb003 	.word	0xe8bdb003
   1c720:	9a018ff0 	.word	0x9a018ff0
   1c724:	bf182a10 	.word	0xbf182a10
   1c728:	d0f64611 	.word	0xd0f64611
   1c72c:	c0e8f8df 	.word	0xc0e8f8df
   1c730:	9000f8dd 	.word	0x9000f8dd
   1c734:	08c1eb03 	.word	0x08c1eb03
   1c738:	2602e9d8 	.word	0x2602e9d8
   1c73c:	0242eb02 	.word	0x0242eb02
   1c740:	3022f854 	.word	0x3022f854
   1c744:	0282eb04 	.word	0x0282eb04
   1c748:	e004f8d2 	.word	0xe004f8d2
   1c74c:	2e00691f 	.word	0x2e00691f
   1c750:	463ad055 	.word	0x463ad055
   1c754:	00b64670 	.word	0x00b64670
   1c758:	0a06eb07 	.word	0x0a06eb07
   1c75c:	32048855 	.word	0x32048855
   1c760:	44284592 	.word	0x44284592
   1c764:	19bdd1fa 	.word	0x19bdd1fa
   1c768:	b002f8b5 	.word	0xb002f8b5
   1c76c:	45834483 	.word	0x45834483
   1c770:	0945d918 	.word	0x0945d918
   1c774:	2025f85c 	.word	0x2025f85c
   1c778:	061ff000 	.word	0x061ff000
   1c77c:	fa06fa22 	.word	0xfa06fa22
   1c780:	0f01f01a 	.word	0x0f01f01a
   1c784:	e013d007 	.word	0xe013d007
   1c788:	2025f85c 	.word	0x2025f85c
   1c78c:	fa06fa22 	.word	0xfa06fa22
   1c790:	0f01f01a 	.word	0x0f01f01a
   1c794:	3001d10c 	.word	0x3001d10c
   1c798:	ea4f4583 	.word	0xea4f4583
   1c79c:	f0001550 	.word	0xf0001550
   1c7a0:	d1f1061f 	.word	0xd1f1061f
   1c7a4:	45493101 	.word	0x45493101
   1c7a8:	0808f108 	.word	0x0808f108
   1c7ac:	e7b4d3c4 	.word	0xe7b4d3c4
   1c7b0:	40b12101 	.word	0x40b12101
   1c7b4:	ea22899e 	.word	0xea22899e
   1c7b8:	eba00201 	.word	0xeba00201
   1c7bc:	f84c000e 	.word	0xf84c000e
   1c7c0:	685c2025 	.word	0x685c2025
   1c7c4:	d0a82e00 	.word	0xd0a82e00
   1c7c8:	4282887a 	.word	0x4282887a
   1c7cc:	2100d811 	.word	0x2100d811
   1c7d0:	e0031d3b 	.word	0xe0031d3b
   1c7d4:	3304885a 	.word	0x3304885a
   1c7d8:	d80a4282 	.word	0xd80a4282
   1c7dc:	5c04f833 	.word	0x5c04f833
   1c7e0:	428e3101 	.word	0x428e3101
   1c7e4:	0002eba0 	.word	0x0002eba0
   1c7e8:	4405fb02 	.word	0x4405fb02
   1c7ec:	d1f1461f 	.word	0xd1f1461f
   1c7f0:	883be793 	.word	0x883be793
   1c7f4:	4003fb00 	.word	0x4003fb00
   1c7f8:	e8bdb003 	.word	0xe8bdb003
   1c7fc:	46708ff0 	.word	0x46708ff0
   1c800:	9a00e7b1 	.word	0x9a00e7b1
   1c804:	bf082a10 	.word	0xbf082a10
   1c808:	d08f210f 	.word	0xd08f210f
   1c80c:	bf00e785 	.word	0xbf00e785
   1c810:	200216a8 	.word	0x200216a8
   1c814:	2002166c 	.word	0x2002166c
   1c818:	20021628 	.word	0x20021628

0001c81c <nrf_mem_init>:
   1c81c:	2200b570 	.word	0x2200b570
   1c820:	48332501 	.word	0x48332501
   1c824:	f8500951 	.word	0xf8500951
   1c828:	f0024021 	.word	0xf0024021
   1c82c:	fa05031f 	.word	0xfa05031f
   1c830:	3201f303 	.word	0x3201f303
   1c834:	f5b24323 	.word	0xf5b24323
   1c838:	f8407f00 	.word	0xf8407f00
   1c83c:	d1f13021 	.word	0xd1f13021
   1c840:	4b2c2400 	.word	0x4b2c2400
   1c844:	223c4621 	.word	0x223c4621
   1c848:	601c482b 	.word	0x601c482b
   1c84c:	fc3af006 	.word	0xfc3af006
   1c850:	22052110 	.word	0x22052110
   1c854:	4e2a4b29 	.word	0x4e2a4b29
   1c858:	4400e9c3 	.word	0x4400e9c3
   1c85c:	615960d9 	.word	0x615960d9
   1c860:	625961d9 	.word	0x625961d9
   1c864:	635962d9 	.word	0x635962d9
   1c868:	645963d9 	.word	0x645963d9
   1c86c:	655964d9 	.word	0x655964d9
   1c870:	665965d9 	.word	0x665965d9
   1c874:	675966d9 	.word	0x675966d9
   1c878:	609a67d9 	.word	0x609a67d9
   1c87c:	619a611a 	.word	0x619a611a
   1c880:	629a621a 	.word	0x629a621a
   1c884:	639a631a 	.word	0x639a631a
   1c888:	649a641a 	.word	0x649a641a
   1c88c:	659a651a 	.word	0x659a651a
   1c890:	669a661a 	.word	0x669a661a
   1c894:	679a671a 	.word	0x679a671a
   1c898:	2120e9c3 	.word	0x2120e9c3
   1c89c:	4422e9c3 	.word	0x4422e9c3
   1c8a0:	2124e9c3 	.word	0x2124e9c3
   1c8a4:	2126e9c3 	.word	0x2126e9c3
   1c8a8:	2128e9c3 	.word	0x2128e9c3
   1c8ac:	212ae9c3 	.word	0x212ae9c3
   1c8b0:	212ce9c3 	.word	0x212ce9c3
   1c8b4:	212ee9c3 	.word	0x212ee9c3
   1c8b8:	2130e9c3 	.word	0x2130e9c3
   1c8bc:	2132e9c3 	.word	0x2132e9c3
   1c8c0:	2134e9c3 	.word	0x2134e9c3
   1c8c4:	2136e9c3 	.word	0x2136e9c3
   1c8c8:	2138e9c3 	.word	0x2138e9c3
   1c8cc:	213ae9c3 	.word	0x213ae9c3
   1c8d0:	213ce9c3 	.word	0x213ce9c3
   1c8d4:	213ee9c3 	.word	0x213ee9c3
   1c8d8:	1104f8c3 	.word	0x1104f8c3
   1c8dc:	2100f8c3 	.word	0x2100f8c3
   1c8e0:	110cf8c3 	.word	0x110cf8c3
   1c8e4:	2108f8c3 	.word	0x2108f8c3
   1c8e8:	70354620 	.word	0x70354620
   1c8ec:	bf00bd70 	.word	0xbf00bd70
   1c8f0:	20021628 	.word	0x20021628
   1c8f4:	20021668 	.word	0x20021668
   1c8f8:	2002166c 	.word	0x2002166c
   1c8fc:	200216a8 	.word	0x200216a8
   1c900:	20026c05 	.word	0x20026c05

0001c904 <nrf_mem_register>:
   1c904:	4ff0e92d 	.word	0x4ff0e92d
   1c908:	b0874b87 	.word	0xb0874b87
   1c90c:	2b00781b 	.word	0x2b00781b
   1c910:	808cf000 	.word	0x808cf000
   1c914:	b321b328 	.word	0xb321b328
   1c918:	f8df780b 	.word	0xf8df780b
   1c91c:	eb038218 	.word	0xeb038218
   1c920:	eb081303 	.word	0xeb081303
   1c924:	685b03c3 	.word	0x685b03c3
   1c928:	c00cf8b1 	.word	0xc00cf8b1
   1c92c:	2b104463 	.word	0x2b104463
   1c930:	f04fd811 	.word	0xf04fd811
   1c934:	46890a00 	.word	0x46890a00
   1c938:	4f7d4b7c 	.word	0x4f7d4b7c
   1c93c:	ea4f681b 	.word	0xea4f681b
   1c940:	93000e8c 	.word	0x93000e8c
   1c944:	b19168b9 	.word	0xb19168b9
   1c948:	0a01f10a 	.word	0x0a01f10a
   1c94c:	0f05f1ba 	.word	0x0f05f1ba
   1c950:	070cf107 	.word	0x070cf107
   1c954:	f248d1f6 	.word	0xf248d1f6
   1c958:	46581b07 	.word	0x46581b07
   1c95c:	e8bdb007 	.word	0xe8bdb007
   1c960:	f2488ff0 	.word	0xf2488ff0
   1c964:	46581b0e 	.word	0x46581b0e
   1c968:	e8bdb007 	.word	0xe8bdb007
   1c96c:	f1bc8ff0 	.word	0xf1bc8ff0
   1c970:	d0610f00 	.word	0xd0610f00
   1c974:	460c460d 	.word	0x460c460d
   1c978:	3010f8d9 	.word	0x3010f8d9
   1c97c:	0b03eb0e 	.word	0x0b03eb0e
   1c980:	f833885a 	.word	0xf833885a
   1c984:	44156b04 	.word	0x44156b04
   1c988:	fb02459b 	.word	0xfb02459b
   1c98c:	d1f74406 	.word	0xd1f74406
   1c990:	3008f8d9 	.word	0x3008f8d9
   1c994:	d3d742a3 	.word	0xd3d742a3
   1c998:	442b9b00 	.word	0x442b9b00
   1c99c:	7f00f5b3 	.word	0x7f00f5b3
   1c9a0:	4c63d2d2 	.word	0x4c63d2d2
   1c9a4:	024aeb0a 	.word	0x024aeb0a
   1c9a8:	f8c00092 	.word	0xf8c00092
   1c9ac:	18a0a000 	.word	0x18a0a000
   1c9b0:	9002f844 	.word	0x9002f844
   1c9b4:	468b9a00 	.word	0x468b9a00
   1c9b8:	2501e9c0 	.word	0x2501e9c0
   1c9bc:	2001f899 	.word	0x2001f899
   1c9c0:	2a01485a 	.word	0x2a01485a
   1c9c4:	d0c86003 	.word	0xd0c86003
   1c9c8:	300cf8b9 	.word	0x300cf8b9
   1c9cc:	d0c42b00 	.word	0xd0c42b00
   1c9d0:	f8cd2500 	.word	0xf8cd2500
   1c9d4:	f8cd9004 	.word	0xf8cd9004
   1c9d8:	f8cda00c 	.word	0xf8cda00c
   1c9dc:	9b01b014 	.word	0x9b01b014
   1c9e0:	691a781f 	.word	0x691a781f
   1c9e4:	eb03013b 	.word	0xeb03013b
   1c9e8:	93000907 	.word	0x93000907
   1c9ec:	03c9eb08 	.word	0x03c9eb08
   1c9f0:	f8326859 	.word	0xf8326859
   1c9f4:	91024025 	.word	0x91024025
   1c9f8:	9a03bb39 	.word	0x9a03bb39
   1c9fc:	609a60dd 	.word	0x609a60dd
   1ca00:	443b9b00 	.word	0x443b9b00
   1ca04:	eb08461f 	.word	0xeb08461f
   1ca08:	684b01c3 	.word	0x684b01c3
   1ca0c:	2037f858 	.word	0x2037f858
   1ca10:	42943301 	.word	0x42943301
   1ca14:	d912604b 	.word	0xd912604b
   1ca18:	f8489b01 	.word	0xf8489b01
   1ca1c:	899b4037 	.word	0x899b4037
   1ca20:	429d3501 	.word	0x429d3501
   1ca24:	f8ddd3db 	.word	0xf8ddd3db
   1ca28:	e796b014 	.word	0xe796b014
   1ca2c:	1b08f248 	.word	0x1b08f248
   1ca30:	b0074658 	.word	0xb0074658
   1ca34:	8ff0e8bd 	.word	0x8ff0e8bd
   1ca38:	46659b00 	.word	0x46659b00
   1ca3c:	9b01e7ae 	.word	0x9b01e7ae
   1ca40:	899b3501 	.word	0x899b3501
   1ca44:	d8ca42ab 	.word	0xd8ca42ab
   1ca48:	2600e7ed 	.word	0x2600e7ed
   1ca4c:	3afff101 	.word	0x3afff101
   1ca50:	eb069504 	.word	0xeb069504
   1ca54:	eb09000a 	.word	0xeb09000a
   1ca58:	32010206 	.word	0x32010206
   1ca5c:	f8583001 	.word	0xf8583001
   1ca60:	0840c032 	.word	0x0840c032
   1ca64:	eb094d32 	.word	0xeb094d32
   1ca68:	eb090100 	.word	0xeb090100
   1ca6c:	3101030a 	.word	0x3101030a
   1ca70:	eb0c3301 	.word	0xeb0c3301
   1ca74:	f8580c4c 	.word	0xf8580c4c
   1ca78:	f855e031 	.word	0xf855e031
   1ca7c:	f858b02c 	.word	0xf858b02c
   1ca80:	eb08c033 	.word	0xeb08c033
   1ca84:	eb0e02c2 	.word	0xeb0e02c2
   1ca88:	eb0c0e4e 	.word	0xeb0c0e4e
   1ca8c:	f8db0c4c 	.word	0xf8db0c4c
   1ca90:	6852b010 	.word	0x6852b010
   1ca94:	e02ef855 	.word	0xe02ef855
   1ca98:	c02cf855 	.word	0xc02cf855
   1ca9c:	01c1eb08 	.word	0x01c1eb08
   1caa0:	03c3eb08 	.word	0x03c3eb08
   1caa4:	2022f83b 	.word	0x2022f83b
   1caa8:	e010f8de 	.word	0xe010f8de
   1caac:	f8dc6849 	.word	0xf8dc6849
   1cab0:	685bc010 	.word	0x685bc010
   1cab4:	f83e4294 	.word	0xf83e4294
   1cab8:	f83c1021 	.word	0xf83c1021
   1cabc:	d92d3023 	.word	0xd92d3023
   1cac0:	d22d429c 	.word	0xd22d429c
   1cac4:	d924428c 	.word	0xd924428c
   1cac8:	45b21c46 	.word	0x45b21c46
   1cacc:	2610d2c1 	.word	0x2610d2c1
   1cad0:	9a029d04 	.word	0x9a029d04
   1cad4:	d91142b2 	.word	0xd91142b2
   1cad8:	443b9b00 	.word	0x443b9b00
   1cadc:	4433441a 	.word	0x4433441a
   1cae0:	0ac2eb08 	.word	0x0ac2eb08
   1cae4:	09c3eb08 	.word	0x09c3eb08
   1cae8:	46512208 	.word	0x46512208
   1caec:	0002eb0a 	.word	0x0002eb0a
   1caf0:	0a08f1aa 	.word	0x0a08f1aa
   1caf4:	fabcf006 	.word	0xfabcf006
   1caf8:	d1f545d1 	.word	0xd1f545d1
   1cafc:	99039b00 	.word	0x99039b00
   1cb00:	4433443b 	.word	0x4433443b
   1cb04:	eb083301 	.word	0xeb083301
   1cb08:	f84802c3 	.word	0xf84802c3
   1cb0c:	60551033 	.word	0x60551033
   1cb10:	f100e776 	.word	0xf100e776
   1cb14:	45563aff 	.word	0x45563aff
   1cb18:	e7d8d99b 	.word	0xe7d8d99b
   1cb1c:	e7d89d04 	.word	0xe7d89d04
   1cb20:	f10a9d04 	.word	0xf10a9d04
   1cb24:	e7d40601 	.word	0xe7d40601
   1cb28:	20026c05 	.word	0x20026c05
   1cb2c:	20021668 	.word	0x20021668
   1cb30:	2002166c 	.word	0x2002166c
   1cb34:	200216a8 	.word	0x200216a8

0001cb38 <nrf_malloc>:
   1cb38:	781b4b03 	.word	0x781b4b03
   1cb3c:	f7ffb10b 	.word	0xf7ffb10b
   1cb40:	4618bd8d 	.word	0x4618bd8d
   1cb44:	bf004770 	.word	0xbf004770
   1cb48:	20026c05 	.word	0x20026c05

0001cb4c <nrf_calloc>:
   1cb4c:	4b08b538 	.word	0x4b08b538
   1cb50:	b155781d 	.word	0xb155781d
   1cb54:	f400fb01 	.word	0xf400fb01
   1cb58:	f7ff4620 	.word	0xf7ff4620
   1cb5c:	4605fd7f 	.word	0x4605fd7f
   1cb60:	4622b118 	.word	0x4622b118
   1cb64:	f0062100 	.word	0xf0062100
   1cb68:	4628faad 	.word	0x4628faad
   1cb6c:	bf00bd38 	.word	0xbf00bd38
   1cb70:	20026c05 	.word	0x20026c05

0001cb74 <nrf_free>:
   1cb74:	781b4b04 	.word	0x781b4b04
   1cb78:	b118b123 	.word	0xb118b123
   1cb7c:	20004601 	.word	0x20004601
   1cb80:	bc1cf7ff 	.word	0xbc1cf7ff
   1cb84:	bf004770 	.word	0xbf004770
   1cb88:	20026c05 	.word	0x20026c05

0001cb8c <nrf_shared_malloc>:
   1cb8c:	781b4b03 	.word	0x781b4b03
   1cb90:	f7ffb10b 	.word	0xf7ffb10b
   1cb94:	4618bc7f 	.word	0x4618bc7f
   1cb98:	bf004770 	.word	0xbf004770
   1cb9c:	20026c05 	.word	0x20026c05

0001cba0 <nrf_shared_free>:
   1cba0:	781b4b04 	.word	0x781b4b04
   1cba4:	b118b123 	.word	0xb118b123
   1cba8:	20014601 	.word	0x20014601
   1cbac:	bc06f7ff 	.word	0xbc06f7ff
   1cbb0:	bf004770 	.word	0xbf004770
   1cbb4:	20026c05 	.word	0x20026c05

0001cbb8 <symbol_0003897>:
   1cbb8:	728cf44f 	.word	0x728cf44f
   1cbbc:	f0062100 	.word	0xf0062100
   1cbc0:	bf00ba81 	.word	0xbf00ba81

0001cbc4 <symbol_0006f61>:
   1cbc4:	f44fb118 	.word	0xf44fb118
   1cbc8:	f7fc718c 	.word	0xf7fc718c
   1cbcc:	4770b837 	.word	0x4770b837

0001cbd0 <symbol_000468b>:
   1cbd0:	f0002ac0 	.word	0xf0002ac0
   1cbd4:	f5b28184 	.word	0xf5b28184
   1cbd8:	f0007f80 	.word	0xf0007f80
   1cbdc:	2a80817d 	.word	0x2a80817d
   1cbe0:	f06fd002 	.word	0xf06fd002
   1cbe4:	4770001f 	.word	0x4770001f
   1cbe8:	6003230a 	.word	0x6003230a
   1cbec:	4ff0e92d 	.word	0x4ff0e92d
   1cbf0:	f04f4607 	.word	0xf04f4607
   1cbf4:	f1000c00 	.word	0xf1000c00
   1cbf8:	b0850408 	.word	0xb0850408
   1cbfc:	f8470952 	.word	0xf8470952
   1cc00:	788b4f04 	.word	0x788b4f04
   1cc04:	780e784d 	.word	0x780e784d
   1cc08:	ea43041b 	.word	0xea43041b
   1cc0c:	78cd2305 	.word	0x78cd2305
   1cc10:	f10c4333 	.word	0xf10c4333
   1cc14:	ea430c01 	.word	0xea430c01
   1cc18:	45946305 	.word	0x45946305
   1cc1c:	3f04f847 	.word	0x3f04f847
   1cc20:	0104f101 	.word	0x0104f101
   1cc24:	6803d3ed 	.word	0x6803d3ed
   1cc28:	f0002b0c 	.word	0xf0002b0c
   1cc2c:	2b0e81bf 	.word	0x2b0e81bf
   1cc30:	8158f000 	.word	0x8158f000
   1cc34:	f0402b0a 	.word	0xf0402b0a
   1cc38:	6944814b 	.word	0x6944814b
   1cc3c:	f3c44bd8 	.word	0xf3c44bd8
   1cc40:	68812207 	.word	0x68812207
   1cc44:	0e255c9a 	.word	0x0e255c9a
   1cc48:	f0815d5e 	.word	0xf0815d5e
   1cc4c:	b2e50101 	.word	0xb2e50101
   1cc50:	404a5d5d 	.word	0x404a5d5d
   1cc54:	4107f3c4 	.word	0x4107f3c4
   1cc58:	4206ea82 	.word	0x4206ea82
   1cc5c:	ea825c5e 	.word	0xea825c5e
   1cc60:	68c16505 	.word	0x68c16505
   1cc64:	2206ea85 	.word	0x2206ea85
   1cc68:	40516907 	.word	0x40516907
   1cc6c:	0907ea81 	.word	0x0907ea81
   1cc70:	0404ea89 	.word	0x0404ea89
   1cc74:	2507f3c4 	.word	0x2507f3c4
   1cc78:	0e265d5d 	.word	0x0e265d5d
   1cc7c:	f0825d9e 	.word	0xf0825d9e
   1cc80:	ea850c02 	.word	0xea850c02
   1cc84:	ea85050c 	.word	0xea85050c
   1cc88:	b2e64506 	.word	0xb2e64506
   1cc8c:	c006f813 	.word	0xc006f813
   1cc90:	4607f3c4 	.word	0x4607f3c4
   1cc94:	ea855d9e 	.word	0xea855d9e
   1cc98:	ea85650c 	.word	0xea85650c
   1cc9c:	406f2506 	.word	0x406f2506
   1cca0:	0c04ea87 	.word	0x0c04ea87
   1cca4:	2607f3cc 	.word	0x2607f3cc
   1cca8:	ea4f5d9e 	.word	0xea4f5d9e
   1ccac:	f8136e1c 	.word	0xf8136e1c
   1ccb0:	f085e00e 	.word	0xf085e00e
   1ccb4:	ea860804 	.word	0xea860804
   1ccb8:	ea860608 	.word	0xea860608
   1ccbc:	fa5f460e 	.word	0xfa5f460e
   1ccc0:	f813fe8c 	.word	0xf813fe8c
   1ccc4:	6182e00e 	.word	0x6182e00e
   1ccc8:	4207f3cc 	.word	0x4207f3cc
   1cccc:	660eea86 	.word	0x660eea86
   1ccd0:	e002f813 	.word	0xe002f813
   1ccd4:	0201ea85 	.word	0x0201ea85
   1ccd8:	260eea86 	.word	0x260eea86
   1ccdc:	0802ea86 	.word	0x0802ea86
   1cce0:	0e04ea88 	.word	0x0e04ea88
   1cce4:	f3ce61c1 	.word	0xf3ce61c1
   1cce8:	5c592107 	.word	0x5c592107
   1ccec:	6a1eea4f 	.word	0x6a1eea4f
   1ccf0:	a00af813 	.word	0xa00af813
   1ccf4:	0b08f086 	.word	0x0b08f086
   1ccf8:	010bea81 	.word	0x010bea81
   1ccfc:	410aea81 	.word	0x410aea81
   1cd00:	fa8efa5f 	.word	0xfa8efa5f
   1cd04:	a00af813 	.word	0xa00af813
   1cd08:	f3ce6244 	.word	0xf3ce6244
   1cd0c:	5d1c4407 	.word	0x5d1c4407
   1cd10:	610aea81 	.word	0x610aea81
   1cd14:	2104ea81 	.word	0x2104ea81
   1cd18:	0a07ea81 	.word	0x0a07ea81
   1cd1c:	040eea8a 	.word	0x040eea8a
   1cd20:	630762c2 	.word	0x630762c2
   1cd24:	2207f3c4 	.word	0x2207f3c4
   1cd28:	0707ea88 	.word	0x0707ea88
   1cd2c:	680ee9c0 	.word	0x680ee9c0
   1cd30:	9020f8c0 	.word	0x9020f8c0
   1cd34:	f8c06285 	.word	0xf8c06285
   1cd38:	f8c0c034 	.word	0xf8c0c034
   1cd3c:	6407e044 	.word	0x6407e044
   1cd40:	f8136481 	.word	0xf8136481
   1cd44:	0e22c002 	.word	0x0e22c002
   1cd48:	f0815c9a 	.word	0xf0815c9a
   1cd4c:	ea8c0510 	.word	0xea8c0510
   1cd50:	ea8c0c05 	.word	0xea8c0c05
   1cd54:	b2e24c02 	.word	0xb2e24c02
   1cd58:	f3c45c9d 	.word	0xf3c45c9d
   1cd5c:	5c9a4207 	.word	0x5c9a4207
   1cd60:	6c05ea8c 	.word	0x6c05ea8c
   1cd64:	2c02ea8c 	.word	0x2c02ea8c
   1cd68:	0108ea81 	.word	0x0108ea81
   1cd6c:	090cea81 	.word	0x090cea81
   1cd70:	0209ea8e 	.word	0x0209ea8e
   1cd74:	2507f3c2 	.word	0x2507f3c2
   1cd78:	0e155d5e 	.word	0x0e155d5e
   1cd7c:	f08c5d5d 	.word	0xf08c5d5d
   1cd80:	407e0720 	.word	0x407e0720
   1cd84:	4605ea86 	.word	0x4605ea86
   1cd88:	5d5db2d5 	.word	0x5d5db2d5
   1cd8c:	f3c264c1 	.word	0xf3c264c1
   1cd90:	5c594107 	.word	0x5c594107
   1cd94:	6605ea86 	.word	0x6605ea86
   1cd98:	2601ea86 	.word	0x2601ea86
   1cd9c:	0e06ea8a 	.word	0x0e06ea8a
   1cda0:	080eea82 	.word	0x080eea82
   1cda4:	2107f3c8 	.word	0x2107f3c8
   1cda8:	ea4f5c5f 	.word	0xea4f5c5f
   1cdac:	5c596118 	.word	0x5c596118
   1cdb0:	0540f086 	.word	0x0540f086
   1cdb4:	ea87406f 	.word	0xea87406f
   1cdb8:	fa5f4701 	.word	0xfa5f4701
   1cdbc:	5c59f188 	.word	0x5c59f188
   1cdc0:	0509ea8a 	.word	0x0509ea8a
   1cdc4:	6701ea87 	.word	0x6701ea87
   1cdc8:	4107f3c8 	.word	0x4107f3c8
   1cdcc:	f8c05c59 	.word	0xf8c05c59
   1cdd0:	ea87a050 	.word	0xea87a050
   1cdd4:	ea892701 	.word	0xea892701
   1cdd8:	66050a06 	.word	0x66050a06
   1cddc:	0507ea8a 	.word	0x0507ea8a
   1cde0:	0105ea82 	.word	0x0105ea82
   1cde4:	f3c16544 	.word	0xf3c16544
   1cde8:	5d1c2407 	.word	0x5d1c2407
   1cdec:	6b11ea4f 	.word	0x6b11ea4f
   1cdf0:	b00bf813 	.word	0xb00bf813
   1cdf4:	f0876642 	.word	0xf0876642
   1cdf8:	40620280 	.word	0x40620280
   1cdfc:	ea82b2cc 	.word	0xea82b2cc
   1ce00:	f813420b 	.word	0xf813420b
   1ce04:	f3c1b004 	.word	0xf3c1b004
   1ce08:	5d1c4407 	.word	0x5d1c4407
   1ce0c:	620bea82 	.word	0x620bea82
   1ce10:	2204ea82 	.word	0x2204ea82
   1ce14:	0402ea8e 	.word	0x0402ea8e
   1ce18:	c058f8c0 	.word	0xc058f8c0
   1ce1c:	0c04ea81 	.word	0x0c04ea81
   1ce20:	67c56686 	.word	0x67c56686
   1ce24:	0605ea8e 	.word	0x0605ea8e
   1ce28:	40556787 	.word	0x40556787
   1ce2c:	2707f3cc 	.word	0x2707f3cc
   1ce30:	ae1be9c0 	.word	0xae1be9c0
   1ce34:	1084f8c0 	.word	0x1084f8c0
   1ce38:	2088f8c0 	.word	0x2088f8c0
   1ce3c:	6080f8c0 	.word	0x6080f8c0
   1ce40:	905cf8c0 	.word	0x905cf8c0
   1ce44:	8074f8c0 	.word	0x8074f8c0
   1ce48:	508cf8c0 	.word	0x508cf8c0
   1ce4c:	f0825dde 	.word	0xf0825dde
   1ce50:	ea4f021b 	.word	0xea4f021b
   1ce54:	f813671c 	.word	0xf813671c
   1ce58:	4056e007 	.word	0x4056e007
   1ce5c:	f28cfa5f 	.word	0xf28cfa5f
   1ce60:	f3cc5c9f 	.word	0xf3cc5c9f
   1ce64:	5c9a4207 	.word	0x5c9a4207
   1ce68:	460eea86 	.word	0x460eea86
   1ce6c:	6607ea86 	.word	0x6607ea86
   1ce70:	2602ea86 	.word	0x2602ea86
   1ce74:	40694075 	.word	0x40694075
   1ce78:	2207f3c1 	.word	0x2207f3c1
   1ce7c:	0e0f5c9a 	.word	0x0e0f5c9a
   1ce80:	f0865ddf 	.word	0xf0865ddf
   1ce84:	ea820e36 	.word	0xea820e36
   1ce88:	ea82020e 	.word	0xea82020e
   1ce8c:	b2cf4207 	.word	0xb2cf4207
   1ce90:	e007f813 	.word	0xe007f813
   1ce94:	4707f3c1 	.word	0x4707f3c1
   1ce98:	ea825ddf 	.word	0xea825ddf
   1ce9c:	ea83630e 	.word	0xea83630e
   1cea0:	ea832307 	.word	0xea832307
   1cea4:	ea820204 	.word	0xea820204
   1cea8:	e9c00e01 	.word	0xe9c00e01
   1ceac:	e9c06526 	.word	0xe9c06526
   1ceb0:	f8c02e2c 	.word	0xf8c02e2c
   1ceb4:	ea834090 	.word	0xea834090
   1ceb8:	406c0705 	.word	0x406c0705
   1cebc:	c094f8c0 	.word	0xc094f8c0
   1cec0:	10a4f8c0 	.word	0x10a4f8c0
   1cec4:	30a8f8c0 	.word	0x30a8f8c0
   1cec8:	70acf8c0 	.word	0x70acf8c0
   1cecc:	40a0f8c0 	.word	0x40a0f8c0
   1ced0:	b0052000 	.word	0xb0052000
   1ced4:	8ff0e8bd 	.word	0x8ff0e8bd
   1ced8:	6003230e 	.word	0x6003230e
   1cedc:	230ce686 	.word	0x230ce686
   1cee0:	e6836003 	.word	0xe6836003
   1cee4:	ce03e9d0 	.word	0xce03e9d0
   1cee8:	8907e9d0 	.word	0x8907e9d0
   1ceec:	7205e9d0 	.word	0x7205e9d0
   1cef0:	68836a46 	.word	0x68836a46
   1cef4:	f8df4670 	.word	0xf8df4670
   1cef8:	4d29a0b0 	.word	0x4d29a0b0
   1cefc:	c000f8cd 	.word	0xc000f8cd
   1cf00:	bf04f85a 	.word	0xbf04f85a
   1cf04:	2c07f3c6 	.word	0x2c07f3c6
   1cf08:	e00cf815 	.word	0xe00cf815
   1cf0c:	6c16ea4f 	.word	0x6c16ea4f
   1cf10:	030bea83 	.word	0x030bea83
   1cf14:	b00cf815 	.word	0xb00cf815
   1cf18:	fc86fa5f 	.word	0xfc86fa5f
   1cf1c:	0303ea8e 	.word	0x0303ea8e
   1cf20:	c00cf815 	.word	0xc00cf815
   1cf24:	4e07f3c6 	.word	0x4e07f3c6
   1cf28:	430bea83 	.word	0x430bea83
   1cf2c:	e00ef815 	.word	0xe00ef815
   1cf30:	630cea83 	.word	0x630cea83
   1cf34:	ea839900 	.word	0xea839900
   1cf38:	4059230e 	.word	0x4059230e
   1cf3c:	40474048 	.word	0x40474048
   1cf40:	fc87fa5f 	.word	0xfc87fa5f
   1cf44:	e00cf815 	.word	0xe00cf815
   1cf48:	6c17ea4f 	.word	0x6c17ea4f
   1cf4c:	b00cf815 	.word	0xb00cf815
   1cf50:	2c07f3c7 	.word	0x2c07f3c7
   1cf54:	0202ea8e 	.word	0x0202ea8e
   1cf58:	c00cf815 	.word	0xc00cf815
   1cf5c:	4e07f3c7 	.word	0x4e07f3c7
   1cf60:	620bea82 	.word	0x620bea82
   1cf64:	e00ef815 	.word	0xe00ef815
   1cf68:	220cea82 	.word	0x220cea82
   1cf6c:	420eea82 	.word	0x420eea82
   1cf70:	0802ea88 	.word	0x0802ea88
   1cf74:	3108e9c4 	.word	0x3108e9c4
   1cf78:	490a9100 	.word	0x490a9100
   1cf7c:	0908ea89 	.word	0x0908ea89
   1cf80:	0609ea86 	.word	0x0609ea86
   1cf84:	e9c4458a 	.word	0xe9c4458a
   1cf88:	e9c4070a 	.word	0xe9c4070a
   1cf8c:	e9c4960e 	.word	0xe9c4960e
   1cf90:	f104280c 	.word	0xf104280c
   1cf94:	d1b30420 	.word	0xd1b30420
   1cf98:	b0052000 	.word	0xb0052000
   1cf9c:	8ff0e8bd 	.word	0x8ff0e8bd
   1cfa0:	000249ac 	.word	0x000249ac
   1cfa4:	00024ec4 	.word	0x00024ec4
   1cfa8:	00024ea8 	.word	0x00024ea8
   1cfac:	4bb269c2 	.word	0x4bb269c2
   1cfb0:	2407f3c2 	.word	0x2407f3c2
   1cfb4:	5d1d6881 	.word	0x5d1d6881
   1cfb8:	5d1e0e14 	.word	0x5d1e0e14
   1cfbc:	0101f081 	.word	0x0101f081
   1cfc0:	5d1cb2d4 	.word	0x5d1cb2d4
   1cfc4:	f3c2404d 	.word	0xf3c2404d
   1cfc8:	5c594107 	.word	0x5c594107
   1cfcc:	4506ea85 	.word	0x4506ea85
   1cfd0:	ea8568c7 	.word	0xea8568c7
   1cfd4:	ea856504 	.word	0xea856504
   1cfd8:	69012501 	.word	0x69012501
   1cfdc:	6946406f 	.word	0x6946406f
   1cfe0:	0907ea81 	.word	0x0907ea81
   1cfe4:	ea866984 	.word	0xea866984
   1cfe8:	ea840609 	.word	0xea840609
   1cfec:	ea820806 	.word	0xea820806
   1cff0:	f3c20208 	.word	0xf3c20208
   1cff4:	f8132407 	.word	0xf8132407
   1cff8:	ea4fe004 	.word	0xea4fe004
   1cffc:	f8136c12 	.word	0xf8136c12
   1d000:	f085a00c 	.word	0xf085a00c
   1d004:	fa5f0402 	.word	0xfa5f0402
   1d008:	ea8efc82 	.word	0xea8efc82
   1d00c:	f8130404 	.word	0xf8130404
   1d010:	f3c2e00c 	.word	0xf3c2e00c
   1d014:	f8134c07 	.word	0xf8134c07
   1d018:	ea84c00c 	.word	0xea84c00c
   1d01c:	ea84440a 	.word	0xea84440a
   1d020:	ea84640e 	.word	0xea84640e
   1d024:	4061240c 	.word	0x4061240c
   1d028:	460c9401 	.word	0x460c9401
   1d02c:	62056981 	.word	0x62056981
   1d030:	ea824061 	.word	0xea824061
   1d034:	91030c01 	.word	0x91030c01
   1d038:	2e07f3cc 	.word	0x2e07f3cc
   1d03c:	f8139901 	.word	0xf8139901
   1d040:	ea4fe00e 	.word	0xea4fe00e
   1d044:	f8136a1c 	.word	0xf8136a1c
   1d048:	f081a00a 	.word	0xf081a00a
   1d04c:	ea8e0b04 	.word	0xea8e0b04
   1d050:	ea8e0e0b 	.word	0xea8e0e0b
   1d054:	fa5f4a0a 	.word	0xfa5f4a0a
   1d058:	f813fe8c 	.word	0xf813fe8c
   1d05c:	e9c0e00e 	.word	0xe9c0e00e
   1d060:	ea8a960a 	.word	0xea8a960a
   1d064:	f3cc650e 	.word	0xf3cc650e
   1d068:	f8134e07 	.word	0xf8134e07
   1d06c:	ea87e00e 	.word	0xea87e00e
   1d070:	ea850a01 	.word	0xea850a01
   1d074:	ea8a250e 	.word	0xea8a250e
   1d078:	ea860e05 	.word	0xea860e05
   1d07c:	9100010e 	.word	0x9100010e
   1d080:	ea864621 	.word	0xea864621
   1d084:	9c000904 	.word	0x9c000904
   1d088:	820ce9c0 	.word	0x820ce9c0
   1d08c:	0604ea82 	.word	0x0604ea82
   1d090:	f8c06247 	.word	0xf8c06247
   1d094:	9102a03c 	.word	0x9102a03c
   1d098:	9f036401 	.word	0x9f036401
   1d09c:	2407f3c6 	.word	0x2407f3c6
   1d0a0:	080eea81 	.word	0x080eea81
   1d0a4:	7c12e9c0 	.word	0x7c12e9c0
   1d0a8:	ea4f5d1c 	.word	0xea4f5d1c
   1d0ac:	e9c06c16 	.word	0xe9c06c16
   1d0b0:	f8c05e14 	.word	0xf8c05e14
   1d0b4:	f0858058 	.word	0xf0858058
   1d0b8:	f8130508 	.word	0xf8130508
   1d0bc:	fa5f800c 	.word	0xfa5f800c
   1d0c0:	9901fc86 	.word	0x9901fc86
   1d0c4:	c00cf813 	.word	0xc00cf813
   1d0c8:	f3c64065 	.word	0xf3c64065
   1d0cc:	5d1c4407 	.word	0x5d1c4407
   1d0d0:	4508ea85 	.word	0x4508ea85
   1d0d4:	ea856381 	.word	0xea856381
   1d0d8:	9902650c 	.word	0x9902650c
   1d0dc:	2504ea85 	.word	0x2504ea85
   1d0e0:	91014069 	.word	0x91014069
   1d0e4:	69844639 	.word	0x69844639
   1d0e8:	9044f8c0 	.word	0x9044f8c0
   1d0ec:	0805ea84 	.word	0x0805ea84
   1d0f0:	0908ea86 	.word	0x0908ea86
   1d0f4:	2407f3c9 	.word	0x2407f3c9
   1d0f8:	a004f813 	.word	0xa004f813
   1d0fc:	6419ea4f 	.word	0x6419ea4f
   1d100:	f0855d1c 	.word	0xf0855d1c
   1d104:	ea8a0c10 	.word	0xea8a0c10
   1d108:	fa5f0c0c 	.word	0xfa5f0c0c
   1d10c:	f813fa89 	.word	0xf813fa89
   1d110:	ea8ca00a 	.word	0xea8ca00a
   1d114:	f3c94c04 	.word	0xf3c94c04
   1d118:	5d1c4407 	.word	0x5d1c4407
   1d11c:	6c0aea8c 	.word	0x6c0aea8c
   1d120:	0e05ea8e 	.word	0x0e05ea8e
   1d124:	2c04ea8c 	.word	0x2c04ea8c
   1d128:	040cea8e 	.word	0x040cea8e
   1d12c:	f8c04062 	.word	0xf8c04062
   1d130:	f3c2e06c 	.word	0xf3c2e06c
   1d134:	f8132e07 	.word	0xf8132e07
   1d138:	ea4fe00e 	.word	0xea4fe00e
   1d13c:	f8136a12 	.word	0xf8136a12
   1d140:	f08ca00a 	.word	0xf08ca00a
   1d144:	ea8e0b20 	.word	0xea8e0b20
   1d148:	ea8e0e0b 	.word	0xea8e0e0b
   1d14c:	fa5f4a0a 	.word	0xfa5f4a0a
   1d150:	f813fe82 	.word	0xf813fe82
   1d154:	9f00e00e 	.word	0x9f00e00e
   1d158:	6a0eea8a 	.word	0x6a0eea8a
   1d15c:	4e07f3c2 	.word	0x4e07f3c2
   1d160:	b00ef813 	.word	0xb00ef813
   1d164:	0e07ea81 	.word	0x0e07ea81
   1d168:	ea8a9901 	.word	0xea8a9901
   1d16c:	ea812b0b 	.word	0xea812b0b
   1d170:	9f000a0b 	.word	0x9f000a0b
   1d174:	e060f8c0 	.word	0xe060f8c0
   1d178:	0e0aea88 	.word	0x0e0aea88
   1d17c:	664665c7 	.word	0x664665c7
   1d180:	907cf8c0 	.word	0x907cf8c0
   1d184:	060eea82 	.word	0x060eea82
   1d188:	ea876701 	.word	0xea876701
   1d18c:	404f0904 	.word	0x404f0904
   1d190:	66854061 	.word	0x66854061
   1d194:	1088f8c0 	.word	0x1088f8c0
   1d198:	2507f3c6 	.word	0x2507f3c6
   1d19c:	0109ea88 	.word	0x0109ea88
   1d1a0:	1090f8c0 	.word	0x1090f8c0
   1d1a4:	0e315d5d 	.word	0x0e315d5d
   1d1a8:	f8c05c59 	.word	0xf8c05c59
   1d1ac:	f8c04084 	.word	0xf8c04084
   1d1b0:	ea84b098 	.word	0xea84b098
   1d1b4:	6747040b 	.word	0x6747040b
   1d1b8:	0b40f08b 	.word	0x0b40f08b
   1d1bc:	5ddfb2f7 	.word	0x5ddfb2f7
   1d1c0:	60acf8c0 	.word	0x60acf8c0
   1d1c4:	050bea85 	.word	0x050bea85
   1d1c8:	4607f3c6 	.word	0x4607f3c6
   1d1cc:	4501ea85 	.word	0x4501ea85
   1d1d0:	ea855d99 	.word	0xea855d99
   1d1d4:	ea856507 	.word	0xea856507
   1d1d8:	f8c02501 	.word	0xf8c02501
   1d1dc:	406c409c 	.word	0x406c409c
   1d1e0:	0604ea89 	.word	0x0604ea89
   1d1e4:	2094f8c0 	.word	0x2094f8c0
   1d1e8:	f3c24072 	.word	0xf3c24072
   1d1ec:	f8c02107 	.word	0xf8c02107
   1d1f0:	5c59c080 	.word	0x5c59c080
   1d1f4:	0c0aea89 	.word	0x0c0aea89
   1d1f8:	f8c00e17 	.word	0xf8c00e17
   1d1fc:	f8c0908c 	.word	0xf8c0908c
   1d200:	f813c0a4 	.word	0xf813c0a4
   1d204:	f0859007 	.word	0xf0859007
   1d208:	b2d70c80 	.word	0xb2d70c80
   1d20c:	010cea81 	.word	0x010cea81
   1d210:	c007f813 	.word	0xc007f813
   1d214:	4707f3c2 	.word	0x4707f3c2
   1d218:	ea815ddf 	.word	0xea815ddf
   1d21c:	ea814109 	.word	0xea814109
   1d220:	ea83630c 	.word	0xea83630c
   1d224:	f8c02307 	.word	0xf8c02307
   1d228:	ea838078 	.word	0xea838078
   1d22c:	ea830c0a 	.word	0xea830c0a
   1d230:	f8c00808 	.word	0xf8c00808
   1d234:	ea8ee0a8 	.word	0xea8ee0a8
   1d238:	ea880706 	.word	0xea880706
   1d23c:	ea8c0b02 	.word	0xea8c0b02
   1d240:	ea830906 	.word	0xea830906
   1d244:	ea8a0e04 	.word	0xea8a0e04
   1d248:	f8c00104 	.word	0xf8c00104
   1d24c:	e9c0a0a0 	.word	0xe9c0a0a0
   1d250:	f8c07230 	.word	0xf8c07230
   1d254:	e9c060bc 	.word	0xe9c060bc
   1d258:	e9c0542c 	.word	0xe9c0542c
   1d25c:	f8c08b36 	.word	0xf8c08b36
   1d260:	e9c030c8 	.word	0xe9c030c8
   1d264:	f8c0c934 	.word	0xf8c0c934
   1d268:	f8c0e0cc 	.word	0xf8c0e0cc
   1d26c:	200010b8 	.word	0x200010b8
   1d270:	e8bdb005 	.word	0xe8bdb005
   1d274:	bf008ff0 	.word	0xbf008ff0
   1d278:	000249ac 	.word	0x000249ac

0001d27c <symbol_000e9b3>:
   1d27c:	4ff0e92d 	.word	0x4ff0e92d
   1d280:	0400e9d0 	.word	0x0400e9d0
   1d284:	46061040 	.word	0x46061040
   1d288:	f8d16823 	.word	0xf8d16823
   1d28c:	b089a000 	.word	0xb089a000
   1d290:	0a03ea8a 	.word	0x0a03ea8a
   1d294:	800cf8d1 	.word	0x800cf8d1
   1d298:	3e0168e3 	.word	0x3e0168e3
   1d29c:	68659006 	.word	0x68659006
   1d2a0:	68a0684f 	.word	0x68a0684f
   1d2a4:	688a9205 	.word	0x688a9205
   1d2a8:	0803ea88 	.word	0x0803ea88
   1d2ac:	f1042e00 	.word	0xf1042e00
   1d2b0:	96010310 	.word	0x96010310
   1d2b4:	0507ea85 	.word	0x0507ea85
   1d2b8:	0200ea82 	.word	0x0200ea82
   1d2bc:	f8df9304 	.word	0xf8df9304
   1d2c0:	f340b3e8 	.word	0xf340b3e8
   1d2c4:	462b80db 	.word	0x462b80db
   1d2c8:	0930f104 	.word	0x0930f104
   1d2cc:	f18afa5f 	.word	0xf18afa5f
   1d2d0:	f788fa5f 	.word	0xf788fa5f
   1d2d4:	b2d4b2de 	.word	0xb2d4b2de
   1d2d8:	0021f85b 	.word	0x0021f85b
   1d2dc:	5027f85b 	.word	0x5027f85b
   1d2e0:	7026f85b 	.word	0x7026f85b
   1d2e4:	6024f85b 	.word	0x6024f85b
   1d2e8:	4c20f859 	.word	0x4c20f859
   1d2ec:	6118ea4f 	.word	0x6118ea4f
   1d2f0:	0c04ea80 	.word	0x0c04ea80
   1d2f4:	0c14f859 	.word	0x0c14f859
   1d2f8:	1021f85b 	.word	0x1021f85b
   1d2fc:	0e00ea85 	.word	0x0e00ea85
   1d300:	f85b0e10 	.word	0xf85b0e10
   1d304:	f3c35020 	.word	0xf3c35020
   1d308:	ea8c2407 	.word	0xea8c2407
   1d30c:	f3c22c31 	.word	0xf3c22c31
   1d310:	f3c24107 	.word	0xf3c24107
   1d314:	f85b2207 	.word	0xf85b2207
   1d318:	f85b4024 	.word	0xf85b4024
   1d31c:	ea8e0022 	.word	0xea8e0022
   1d320:	0e1d2235 	.word	0x0e1d2235
   1d324:	4307f3c3 	.word	0x4307f3c3
   1d328:	3023f85b 	.word	0x3023f85b
   1d32c:	6c34ea8c 	.word	0x6c34ea8c
   1d330:	4c18f859 	.word	0x4c18f859
   1d334:	f85b9302 	.word	0xf85b9302
   1d338:	f8595025 	.word	0xf8595025
   1d33c:	ea4f3c1c 	.word	0xea4f3c1c
   1d340:	f85b6e1a 	.word	0xf85b6e1a
   1d344:	4066e02e 	.word	0x4066e02e
   1d348:	f3ca405f 	.word	0xf3ca405f
   1d34c:	ea862407 	.word	0xea862407
   1d350:	f3c82635 	.word	0xf3c82635
   1d354:	f3c82507 	.word	0xf3c82507
   1d358:	ea874807 	.word	0xea874807
   1d35c:	f85b273e 	.word	0xf85b273e
   1d360:	f85b4024 	.word	0xf85b4024
   1d364:	f85be025 	.word	0xf85be025
   1d368:	9b025028 	.word	0x9b025028
   1d36c:	6030ea87 	.word	0x6030ea87
   1d370:	4035ea80 	.word	0x4035ea80
   1d374:	1021f85b 	.word	0x1021f85b
   1d378:	6434ea82 	.word	0x6434ea82
   1d37c:	4433ea84 	.word	0x4433ea84
   1d380:	ea8cb2c3 	.word	0xea8cb2c3
   1d384:	f85b4131 	.word	0xf85b4131
   1d388:	f3ca3023 	.word	0xf3ca3023
   1d38c:	f85b4a07 	.word	0xf85b4a07
   1d390:	b2ca702a 	.word	0xb2ca702a
   1d394:	6c14ea4f 	.word	0x6c14ea4f
   1d398:	2022f85b 	.word	0x2022f85b
   1d39c:	663eea86 	.word	0x663eea86
   1d3a0:	f8599302 	.word	0xf8599302
   1d3a4:	ea863c10 	.word	0xea863c10
   1d3a8:	f85b4637 	.word	0xf85b4637
   1d3ac:	f3c0e02c 	.word	0xf3c0e02c
   1d3b0:	f85b2707 	.word	0xf85b2707
   1d3b4:	ea82c027 	.word	0xea82c027
   1d3b8:	f3c60a03 	.word	0xf3c60a03
   1d3bc:	f3c64507 	.word	0xf3c64507
   1d3c0:	f85b2207 	.word	0xf85b2207
   1d3c4:	f85b3022 	.word	0xf85b3022
   1d3c8:	ea8a5025 	.word	0xea8a5025
   1d3cc:	f3c42a3e 	.word	0xf3c42a3e
   1d3d0:	0e0f4207 	.word	0x0e0f4207
   1d3d4:	6a3cea8a 	.word	0x6a3cea8a
   1d3d8:	7027f85b 	.word	0x7027f85b
   1d3dc:	ea8a9303 	.word	0xea8a9303
   1d3e0:	f85b4a35 	.word	0xf85b4a35
   1d3e4:	f8598022 	.word	0xf8598022
   1d3e8:	9b025c0c 	.word	0x9b025c0c
   1d3ec:	406bb2f2 	.word	0x406bb2f2
   1d3f0:	2022f85b 	.word	0x2022f85b
   1d3f4:	2337ea83 	.word	0x2337ea83
   1d3f8:	7c08f859 	.word	0x7c08f859
   1d3fc:	fc84fa5f 	.word	0xfc84fa5f
   1d400:	2407f3c4 	.word	0x2407f3c4
   1d404:	502cf85b 	.word	0x502cf85b
   1d408:	0e364057 	.word	0x0e364057
   1d40c:	2024f85b 	.word	0x2024f85b
   1d410:	4c04f859 	.word	0x4c04f859
   1d414:	6e10ea4f 	.word	0x6e10ea4f
   1d418:	6026f85b 	.word	0x6026f85b
   1d41c:	f85b406c 	.word	0xf85b406c
   1d420:	ea84e02e 	.word	0xea84e02e
   1d424:	f3c12636 	.word	0xf3c12636
   1d428:	f3c12407 	.word	0xf3c12407
   1d42c:	f85b4107 	.word	0xf85b4107
   1d430:	ea871021 	.word	0xea871021
   1d434:	ea8e2e3e 	.word	0xea8e2e3e
   1d438:	f3c06232 	.word	0xf3c06232
   1d43c:	f85b4007 	.word	0xf85b4007
   1d440:	9d034024 	.word	0x9d034024
   1d444:	4231ea82 	.word	0x4231ea82
   1d448:	f85b9901 	.word	0xf85b9901
   1d44c:	ea830020 	.word	0xea830020
   1d450:	ea866335 	.word	0xea866335
   1d454:	39016634 	.word	0x39016634
   1d458:	4338ea83 	.word	0x4338ea83
   1d45c:	0920f109 	.word	0x0920f109
   1d460:	4830ea86 	.word	0x4830ea86
   1d464:	f47f9101 	.word	0xf47f9101
   1d468:	461daf31 	.word	0x461daf31
   1d46c:	99049b06 	.word	0x99049b06
   1d470:	6300f103 	.word	0x6300f103
   1d474:	eb013b01 	.word	0xeb013b01
   1d478:	93041343 	.word	0x93041343
   1d47c:	fa5f2400 	.word	0xfa5f2400
   1d480:	f85bf38a 	.word	0xf85bf38a
   1d484:	9b047023 	.word	0x9b047023
   1d488:	fa5f46a1 	.word	0xfa5f46a1
   1d48c:	6819fc85 	.word	0x6819fc85
   1d490:	6318ea4f 	.word	0x6318ea4f
   1d494:	46a69407 	.word	0x46a69407
   1d498:	402cf85b 	.word	0x402cf85b
   1d49c:	c023f85b 	.word	0xc023f85b
   1d4a0:	f3c54079 	.word	0xf3c54079
   1d4a4:	f85b2307 	.word	0xf85b2307
   1d4a8:	f3c23023 	.word	0xf3c23023
   1d4ac:	ea814707 	.word	0xea814707
   1d4b0:	fa5f213c 	.word	0xfa5f213c
   1d4b4:	f85bfc82 	.word	0xf85bfc82
   1d4b8:	f85b002c 	.word	0xf85b002c
   1d4bc:	ea817027 	.word	0xea817027
   1d4c0:	90036133 	.word	0x90036133
   1d4c4:	4037ea81 	.word	0x4037ea81
   1d4c8:	fa5f9f04 	.word	0xfa5f9f04
   1d4cc:	f85bf688 	.word	0xf85bf688
   1d4d0:	68fb6026 	.word	0x68fb6026
   1d4d4:	40739001 	.word	0x40739001
   1d4d8:	f85b0e16 	.word	0xf85b0e16
   1d4dc:	98046026 	.word	0x98046026
   1d4e0:	2636ea83 	.word	0x2636ea83
   1d4e4:	f85b0e2b 	.word	0xf85b0e2b
   1d4e8:	f3c53023 	.word	0xf3c53023
   1d4ec:	496d4507 	.word	0x496d4507
   1d4f0:	7025f85b 	.word	0x7025f85b
   1d4f4:	f89d9306 	.word	0xf89d9306
   1d4f8:	6843c004 	.word	0x6843c004
   1d4fc:	651aea4f 	.word	0x651aea4f
   1d500:	5025f85b 	.word	0x5025f85b
   1d504:	2207f3c2 	.word	0x2207f3c2
   1d508:	2022f85b 	.word	0x2022f85b
   1d50c:	c00cf811 	.word	0xc00cf811
   1d510:	69044063 	.word	0x69044063
   1d514:	2535ea83 	.word	0x2535ea83
   1d518:	2307f3ca 	.word	0x2307f3ca
   1d51c:	3023f85b 	.word	0x3023f85b
   1d520:	0c04ea8c 	.word	0x0c04ea8c
   1d524:	6532ea85 	.word	0x6532ea85
   1d528:	68829c03 	.word	0x68829c03
   1d52c:	6633ea86 	.word	0x6633ea86
   1d530:	f3c84660 	.word	0xf3c84660
   1d534:	ea842307 	.word	0xea842307
   1d538:	9c060c02 	.word	0x9c060c02
   1d53c:	3023f85b 	.word	0x3023f85b
   1d540:	4a07f3ca 	.word	0x4a07f3ca
   1d544:	202af85b 	.word	0x202af85b
   1d548:	2c34ea8c 	.word	0x2c34ea8c
   1d54c:	4807f3c8 	.word	0x4807f3c8
   1d550:	4637ea86 	.word	0x4637ea86
   1d554:	6c33ea8c 	.word	0x6c33ea8c
   1d558:	7028f85b 	.word	0x7028f85b
   1d55c:	4232ea8c 	.word	0x4232ea8c
   1d560:	4537ea85 	.word	0x4537ea85
   1d564:	4c07f3c2 	.word	0x4c07f3c2
   1d568:	5ccb0e33 	.word	0x5ccb0e33
   1d56c:	a00cf811 	.word	0xa00cf811
   1d570:	fc85fa5f 	.word	0xfc85fa5f
   1d574:	400cf811 	.word	0x400cf811
   1d578:	2707f3c5 	.word	0x2707f3c5
   1d57c:	464c9403 	.word	0x464c9403
   1d580:	ea805dcf 	.word	0xea805dcf
   1d584:	98016303 	.word	0x98016303
   1d588:	2307ea83 	.word	0x2307ea83
   1d58c:	fb82fa5f 	.word	0xfb82fa5f
   1d590:	430aea83 	.word	0x430aea83
   1d594:	b00bf811 	.word	0xb00bf811
   1d598:	6c10ea4f 	.word	0x6c10ea4f
   1d59c:	f3639804 	.word	0xf3639804
   1d5a0:	f8110407 	.word	0xf8110407
   1d5a4:	f8cd800c 	.word	0xf8cd800c
   1d5a8:	9402b018 	.word	0x9402b018
   1d5ac:	2c07f3c2 	.word	0x2c07f3c2
   1d5b0:	ea4f9c03 	.word	0xea4f9c03
   1d5b4:	69426b12 	.word	0x69426b12
   1d5b8:	c00cf811 	.word	0xc00cf811
   1d5bc:	f3c64062 	.word	0xf3c64062
   1d5c0:	5dcf4707 	.word	0x5dcf4707
   1d5c4:	6808ea82 	.word	0x6808ea82
   1d5c8:	6a15ea4f 	.word	0x6a15ea4f
   1d5cc:	ea886982 	.word	0xea886982
   1d5d0:	9c062c0c 	.word	0x9c062c0c
   1d5d4:	f886fa5f 	.word	0xf886fa5f
   1d5d8:	4707ea8c 	.word	0x4707ea8c
   1d5dc:	8008f811 	.word	0x8008f811
   1d5e0:	c00af811 	.word	0xc00af811
   1d5e4:	a01cf8d0 	.word	0xa01cf8d0
   1d5e8:	40629801 	.word	0x40629801
   1d5ec:	0a0aea88 	.word	0x0a0aea88
   1d5f0:	620cea82 	.word	0x620cea82
   1d5f4:	4807f3c0 	.word	0x4807f3c0
   1d5f8:	2c07f3c0 	.word	0x2c07f3c0
   1d5fc:	f8112000 	.word	0xf8112000
   1d600:	f3c6b00b 	.word	0xf3c6b00b
   1d604:	5d8e2607 	.word	0x5d8e2607
   1d608:	6b0bea8a 	.word	0x6b0bea8a
   1d60c:	4507f3c5 	.word	0x4507f3c5
   1d610:	a00cf811 	.word	0xa00cf811
   1d614:	f8115d4d 	.word	0xf8115d4d
   1d618:	ea821008 	.word	0xea821008
   1d61c:	ea8b2606 	.word	0xea8b2606
   1d620:	9c022b0a 	.word	0x9c022b0a
   1d624:	4b05ea8b 	.word	0x4b05ea8b
   1d628:	4601ea86 	.word	0x4601ea86
   1d62c:	2c13ea4f 	.word	0x2c13ea4f
   1d630:	ea4f0a31 	.word	0xea4f0a31
   1d634:	f366221b 	.word	0xf366221b
   1d638:	f36b0e07 	.word	0xf36b0e07
   1d63c:	f36c0007 	.word	0xf36c0007
   1d640:	ea4f240f 	.word	0xea4f240f
   1d644:	f3624c13 	.word	0xf3624c13
   1d648:	f361200f 	.word	0xf361200f
   1d64c:	f36c2e0f 	.word	0xf36c2e0f
   1d650:	0c314417 	.word	0x0c314417
   1d654:	4e17f361 	.word	0x4e17f361
   1d658:	46204601 	.word	0x46204601
   1d65c:	f3630e1b 	.word	0xf3630e1b
   1d660:	9b05601f 	.word	0x9b05601f
   1d664:	60180a3d 	.word	0x60180a3d
   1d668:	f3672000 	.word	0xf3672000
   1d66c:	ea4f0907 	.word	0xea4f0907
   1d670:	f365421b 	.word	0xf365421b
   1d674:	0c3d290f 	.word	0x0c3d290f
   1d678:	4917f365 	.word	0x4917f365
   1d67c:	0e360e3f 	.word	0x0e360e3f
   1d680:	4117f362 	.word	0x4117f362
   1d684:	6b1bea4f 	.word	0x6b1bea4f
   1d688:	691ff367 	.word	0x691ff367
   1d68c:	6e1ff366 	.word	0x6e1ff366
   1d690:	611ff36b 	.word	0x611ff36b
   1d694:	9004f8c3 	.word	0x9004f8c3
   1d698:	e008f8c3 	.word	0xe008f8c3
   1d69c:	b00960d9 	.word	0xb00960d9
   1d6a0:	8ff0e8bd 	.word	0x8ff0e8bd
   1d6a4:	000249ac 	.word	0x000249ac
   1d6a8:	00024aac 	.word	0x00024aac

0001d6ac <symbol_000e471>:
   1d6ac:	4ff0e92d 	.word	0x4ff0e92d
   1d6b0:	3500e9d0 	.word	0x3500e9d0
   1d6b4:	682fb089 	.word	0x682fb089
   1d6b8:	f8d1105b 	.word	0xf8d1105b
   1d6bc:	9306a000 	.word	0x9306a000
   1d6c0:	684c3b01 	.word	0x684c3b01
   1d6c4:	ea8a9301 	.word	0xea8a9301
   1d6c8:	68eb0a07 	.word	0x68eb0a07
   1d6cc:	68c9688f 	.word	0x68c9688f
   1d6d0:	40596868 	.word	0x40596868
   1d6d4:	68ae9b01 	.word	0x68ae9b01
   1d6d8:	2b009205 	.word	0x2b009205
   1d6dc:	0210f105 	.word	0x0210f105
   1d6e0:	0004ea80 	.word	0x0004ea80
   1d6e4:	0706ea87 	.word	0x0706ea87
   1d6e8:	f8df9204 	.word	0xf8df9204
   1d6ec:	f340b3dc 	.word	0xf340b3dc
   1d6f0:	46d180d7 	.word	0x46d180d7
   1d6f4:	0830f105 	.word	0x0830f105
   1d6f8:	f489fa5f 	.word	0xf489fa5f
   1d6fc:	5024f85b 	.word	0x5024f85b
   1d700:	6c20f858 	.word	0x6c20f858
   1d704:	fc80fa5f 	.word	0xfc80fa5f
   1d708:	f85b0e04 	.word	0xf85b0e04
   1d70c:	f85bc02c 	.word	0xf85bc02c
   1d710:	406e4024 	.word	0x406e4024
   1d714:	5c1cf858 	.word	0x5c1cf858
   1d718:	2e07f3c1 	.word	0x2e07f3c1
   1d71c:	a02ef85b 	.word	0xa02ef85b
   1d720:	0505ea8c 	.word	0x0505ea8c
   1d724:	2e34ea86 	.word	0x2e34ea86
   1d728:	b2fbb2ca 	.word	0xb2fbb2ca
   1d72c:	6c17ea4f 	.word	0x6c17ea4f
   1d730:	4407f3c7 	.word	0x4407f3c7
   1d734:	2707f3c7 	.word	0x2707f3c7
   1d738:	6027f85b 	.word	0x6027f85b
   1d73c:	2022f85b 	.word	0x2022f85b
   1d740:	7c14f858 	.word	0x7c14f858
   1d744:	3023f85b 	.word	0x3023f85b
   1d748:	ea4f407a 	.word	0xea4f407a
   1d74c:	f85b6719 	.word	0xf85b6719
   1d750:	f85b7027 	.word	0xf85b7027
   1d754:	ea82c02c 	.word	0xea82c02c
   1d758:	ea822237 	.word	0xea822237
   1d75c:	f8586636 	.word	0xf8586636
   1d760:	ea852c18 	.word	0xea852c18
   1d764:	ea8e2c3c 	.word	0xea8e2c3c
   1d768:	0e0d6e3a 	.word	0x0e0d6e3a
   1d76c:	0a02ea83 	.word	0x0a02ea83
   1d770:	2307f3c9 	.word	0x2307f3c9
   1d774:	3023f85b 	.word	0x3023f85b
   1d778:	5025f85b 	.word	0x5025f85b
   1d77c:	4107f3c1 	.word	0x4107f3c1
   1d780:	1021f85b 	.word	0x1021f85b
   1d784:	2707f3c0 	.word	0x2707f3c0
   1d788:	2535ea8a 	.word	0x2535ea8a
   1d78c:	4a07f3c0 	.word	0x4a07f3c0
   1d790:	6033ea8c 	.word	0x6033ea8c
   1d794:	4031ea80 	.word	0x4031ea80
   1d798:	4024f85b 	.word	0x4024f85b
   1d79c:	ea8e0e03 	.word	0xea8e0e03
   1d7a0:	f85b4434 	.word	0xf85b4434
   1d7a4:	b2e13023 	.word	0xb2e13023
   1d7a8:	f3c99302 	.word	0xf3c99302
   1d7ac:	f8584907 	.word	0xf8584907
   1d7b0:	f85b3c10 	.word	0xf85b3c10
   1d7b4:	f85b1021 	.word	0xf85b1021
   1d7b8:	f3c42029 	.word	0xf3c42029
   1d7bc:	f85b2c07 	.word	0xf85b2c07
   1d7c0:	f85b9027 	.word	0xf85b9027
   1d7c4:	4059702a 	.word	0x4059702a
   1d7c8:	302cf85b 	.word	0x302cf85b
   1d7cc:	4637ea86 	.word	0x4637ea86
   1d7d0:	6539ea85 	.word	0x6539ea85
   1d7d4:	4532ea85 	.word	0x4532ea85
   1d7d8:	2707f3c6 	.word	0x2707f3c6
   1d7dc:	9b029303 	.word	0x9b029303
   1d7e0:	4e07f3c5 	.word	0x4e07f3c5
   1d7e4:	7027f85b 	.word	0x7027f85b
   1d7e8:	902ef85b 	.word	0x902ef85b
   1d7ec:	4c07f3c6 	.word	0x4c07f3c6
   1d7f0:	ea4fb2c2 	.word	0xea4fb2c2
   1d7f4:	ea816e15 	.word	0xea816e15
   1d7f8:	b2e92333 	.word	0xb2e92333
   1d7fc:	a02cf85b 	.word	0xa02cf85b
   1d800:	6337ea83 	.word	0x6337ea83
   1d804:	2022f85b 	.word	0x2022f85b
   1d808:	e02ef85b 	.word	0xe02ef85b
   1d80c:	1021f85b 	.word	0x1021f85b
   1d810:	7c0cf858 	.word	0x7c0cf858
   1d814:	6c16ea4f 	.word	0x6c16ea4f
   1d818:	b2f6407a 	.word	0xb2f6407a
   1d81c:	2e3eea82 	.word	0x2e3eea82
   1d820:	2026f85b 	.word	0x2026f85b
   1d824:	6c08f858 	.word	0x6c08f858
   1d828:	4939ea83 	.word	0x4939ea83
   1d82c:	40710e23 	.word	0x40710e23
   1d830:	6023f85b 	.word	0x6023f85b
   1d834:	3c04f858 	.word	0x3c04f858
   1d838:	702cf85b 	.word	0x702cf85b
   1d83c:	f3c54053 	.word	0xf3c54053
   1d840:	ea832507 	.word	0xea832507
   1d844:	f85b2636 	.word	0xf85b2636
   1d848:	f3c05025 	.word	0xf3c05025
   1d84c:	f3c02307 	.word	0xf3c02307
   1d850:	ea814007 	.word	0xea814007
   1d854:	f85b2137 	.word	0xf85b2137
   1d858:	f85b7023 	.word	0xf85b7023
   1d85c:	ea863020 	.word	0xea863020
   1d860:	ea816635 	.word	0xea816635
   1d864:	f3c46737 	.word	0xf3c46737
   1d868:	9a034407 	.word	0x9a034407
   1d86c:	4133ea86 	.word	0x4133ea86
   1d870:	f85b9b01 	.word	0xf85b9b01
   1d874:	ea8e4024 	.word	0xea8e4024
   1d878:	3b016e32 	.word	0x3b016e32
   1d87c:	403aea8e 	.word	0x403aea8e
   1d880:	4734ea87 	.word	0x4734ea87
   1d884:	0820f108 	.word	0x0820f108
   1d888:	f47f9301 	.word	0xf47f9301
   1d88c:	46caaf35 	.word	0x46caaf35
   1d890:	9a049b06 	.word	0x9a049b06
   1d894:	6300f103 	.word	0x6300f103
   1d898:	eb023b01 	.word	0xeb023b01
   1d89c:	93041343 	.word	0x93041343
   1d8a0:	f38afa5f 	.word	0xf38afa5f
   1d8a4:	5023f85b 	.word	0x5023f85b
   1d8a8:	fa5f9b04 	.word	0xfa5f9b04
   1d8ac:	681cf881 	.word	0x681cf881
   1d8b0:	f85b0e03 	.word	0xf85b0e03
   1d8b4:	f85b2028 	.word	0xf85b2028
   1d8b8:	f3c18023 	.word	0xf3c18023
   1d8bc:	f85b2307 	.word	0xf85b2307
   1d8c0:	406c3023 	.word	0x406c3023
   1d8c4:	4507f3c7 	.word	0x4507f3c7
   1d8c8:	5025f85b 	.word	0x5025f85b
   1d8cc:	2438ea84 	.word	0x2438ea84
   1d8d0:	f887fa5f 	.word	0xf887fa5f
   1d8d4:	6028f85b 	.word	0x6028f85b
   1d8d8:	6433ea84 	.word	0x6433ea84
   1d8dc:	4535ea84 	.word	0x4535ea84
   1d8e0:	462e9602 	.word	0x462e9602
   1d8e4:	fa5f9c04 	.word	0xfa5f9c04
   1d8e8:	f85bf980 	.word	0xf85bf980
   1d8ec:	68639029 	.word	0x68639029
   1d8f0:	f85b0e3c 	.word	0xf85b0e3c
   1d8f4:	96014024 	.word	0x96014024
   1d8f8:	0303ea89 	.word	0x0303ea89
   1d8fc:	ea839e04 	.word	0xea839e04
   1d900:	f3c72434 	.word	0xf3c72434
   1d904:	0e0b2707 	.word	0x0e0b2707
   1d908:	f85b4d6e 	.word	0xf85b4d6e
   1d90c:	f89d9027 	.word	0xf89d9027
   1d910:	f85b8004 	.word	0xf85b8004
   1d914:	68f37023 	.word	0x68f37023
   1d918:	0e00f04f 	.word	0x0e00f04f
   1d91c:	8008f815 	.word	0x8008f815
   1d920:	69324053 	.word	0x69324053
   1d924:	4107f3c1 	.word	0x4107f3c1
   1d928:	0802ea88 	.word	0x0802ea88
   1d92c:	97034642 	.word	0x97034642
   1d930:	7021f85b 	.word	0x7021f85b
   1d934:	611aea4f 	.word	0x611aea4f
   1d938:	1021f85b 	.word	0x1021f85b
   1d93c:	e018f8cd 	.word	0xe018f8cd
   1d940:	2331ea83 	.word	0x2331ea83
   1d944:	6939ea83 	.word	0x6939ea83
   1d948:	2307f3ca 	.word	0x2307f3ca
   1d94c:	3023f85b 	.word	0x3023f85b
   1d950:	9e0268b1 	.word	0x9e0268b1
   1d954:	6333ea84 	.word	0x6333ea84
   1d958:	4737ea83 	.word	0x4737ea83
   1d95c:	0801ea86 	.word	0x0801ea86
   1d960:	2307f3c0 	.word	0x2307f3c0
   1d964:	f3ca9e03 	.word	0xf3ca9e03
   1d968:	f3c04a07 	.word	0xf3c04a07
   1d96c:	f85b4007 	.word	0xf85b4007
   1d970:	f85b102a 	.word	0xf85b102a
   1d974:	f8cd4023 	.word	0xf8cd4023
   1d978:	f85be01c 	.word	0xf85be01c
   1d97c:	0e383020 	.word	0x0e383020
   1d980:	ea885c28 	.word	0xea885c28
   1d984:	ea892836 	.word	0xea892836
   1d988:	ea884933 	.word	0xea884933
   1d98c:	ea886834 	.word	0xea886834
   1d990:	f3c94131 	.word	0xf3c94131
   1d994:	ea822407 	.word	0xea822407
   1d998:	9a016000 	.word	0x9a016000
   1d99c:	8004f815 	.word	0x8004f815
   1d9a0:	4307f3c1 	.word	0x4307f3c1
   1d9a4:	6a11ea4f 	.word	0x6a11ea4f
   1d9a8:	f8155cec 	.word	0xf8155cec
   1d9ac:	f3c2b00a 	.word	0xf3c2b00a
   1d9b0:	9a042a07 	.word	0x9a042a07
   1d9b4:	ea80b2fb 	.word	0xea80b2fb
   1d9b8:	ea802008 	.word	0xea802008
   1d9bc:	5ceb4004 	.word	0x5ceb4004
   1d9c0:	f8156954 	.word	0xf8156954
   1d9c4:	f3c9a00a 	.word	0xf3c9a00a
   1d9c8:	40634807 	.word	0x40634807
   1d9cc:	6008f815 	.word	0x6008f815
   1d9d0:	6b0bea83 	.word	0x6b0bea83
   1d9d4:	2b0aea8b 	.word	0x2b0aea8b
   1d9d8:	4b06ea8b 	.word	0x4b06ea8b
   1d9dc:	260046f4 	.word	0x260046f4
   1d9e0:	f881fa5f 	.word	0xf881fa5f
   1d9e4:	f8156994 	.word	0xf8156994
   1d9e8:	ea4f8008 	.word	0xea4f8008
   1d9ec:	f8d26319 	.word	0xf8d26319
   1d9f0:	5ceba01c 	.word	0x5ceba01c
   1d9f4:	fa5f9a01 	.word	0xfa5f9a01
   1d9f8:	f815f989 	.word	0xf815f989
   1d9fc:	ea889009 	.word	0xea889009
   1da00:	ea880804 	.word	0xea880804
   1da04:	0e136803 	.word	0x0e136803
   1da08:	090aea89 	.word	0x090aea89
   1da0c:	a003f815 	.word	0xa003f815
   1da10:	4307f3c2 	.word	0x4307f3c2
   1da14:	f3c75cec 	.word	0xf3c75cec
   1da18:	5ceb2307 	.word	0x5ceb2307
   1da1c:	2107f3c1 	.word	0x2107f3c1
   1da20:	ea885c69 	.word	0xea885c69
   1da24:	ea882803 	.word	0xea882803
   1da28:	ea894804 	.word	0xea894804
   1da2c:	ea4f690a 	.word	0xea4f690a
   1da30:	ea89241b 	.word	0xea89241b
   1da34:	f36b2901 	.word	0xf36b2901
   1da38:	ea4f0c07 	.word	0xea4f0c07
   1da3c:	f3682118 	.word	0xf3682118
   1da40:	22000607 	.word	0x22000607
   1da44:	260ff361 	.word	0x260ff361
   1da48:	2c0ff364 	.word	0x2c0ff364
   1da4c:	441bea4f 	.word	0x441bea4f
   1da50:	4c17f364 	.word	0x4c17f364
   1da54:	f3c74634 	.word	0xf3c74634
   1da58:	5ded4707 	.word	0x5ded4707
   1da5c:	0e07f360 	.word	0x0e07f360
   1da60:	4905ea89 	.word	0x4905ea89
   1da64:	2319ea4f 	.word	0x2319ea4f
   1da68:	f3690a05 	.word	0xf3690a05
   1da6c:	ea4f0207 	.word	0xea4f0207
   1da70:	f3634118 	.word	0xf3634118
   1da74:	f365220f 	.word	0xf365220f
   1da78:	0c052e0f 	.word	0x0c052e0f
   1da7c:	4417f361 	.word	0x4417f361
   1da80:	4e17f365 	.word	0x4e17f365
   1da84:	46110e00 	.word	0x46110e00
   1da88:	6e1ff360 	.word	0x6e1ff360
   1da8c:	ea4f4620 	.word	0xea4f4620
   1da90:	ea4f4319 	.word	0xea4f4319
   1da94:	f3636818 	.word	0xf3636818
   1da98:	9b054117 	.word	0x9b054117
   1da9c:	601ff368 	.word	0x601ff368
   1daa0:	20006098 	.word	0x20006098
   1daa4:	6b1bea4f 	.word	0x6b1bea4f
   1daa8:	6919ea4f 	.word	0x6919ea4f
   1daac:	6c1ff36b 	.word	0x6c1ff36b
   1dab0:	611ff369 	.word	0x611ff369
   1dab4:	e000f8c3 	.word	0xe000f8c3
   1dab8:	c004f8c3 	.word	0xc004f8c3
   1dabc:	b00960d9 	.word	0xb00960d9
   1dac0:	8ff0e8bd 	.word	0x8ff0e8bd
   1dac4:	00024ed4 	.word	0x00024ed4
   1dac8:	00024fd4 	.word	0x00024fd4

0001dacc <symbol_0005bab>:
   1dacc:	4614b410 	.word	0x4614b410
   1dad0:	461a2901 	.word	0x461a2901
   1dad4:	d0034621 	.word	0xd0034621
   1dad8:	4b04f85d 	.word	0x4b04f85d
   1dadc:	bde6f7ff 	.word	0xbde6f7ff
   1dae0:	4b04f85d 	.word	0x4b04f85d
   1dae4:	bbcaf7ff 	.word	0xbbcaf7ff

0001dae8 <ok_rsp_parser>:
   1dae8:	47702000 	.word	0x47702000

0001daec <pdn_state_get_parser>:
   1daec:	b5702200 	.word	0xb5702200
   1daf0:	b084780b 	.word	0xb084780b
   1daf4:	e9cd460e 	.word	0xe9cd460e
   1daf8:	e9cd2200 	.word	0xe9cd2200
   1dafc:	b3232202 	.word	0xb3232202
   1db00:	2b20460c 	.word	0x2b20460c
   1db04:	d01b460d 	.word	0xd01b460d
   1db08:	3201700b 	.word	0x3201700b
   1db0c:	3f01f814 	.word	0x3f01f814
   1db10:	460d18b1 	.word	0x460d18b1
   1db14:	d1f42b00 	.word	0xd1f42b00
   1db18:	4b0d2200 	.word	0x4b0d2200
   1db1c:	f853702a 	.word	0xf853702a
   1db20:	4a0c3020 	.word	0x4a0c3020
   1db24:	2110681b 	.word	0x2110681b
   1db28:	f7f14668 	.word	0xf7f14668
   1db2c:	4669f9a3 	.word	0x4669f9a3
   1db30:	f0054630 	.word	0xf0054630
   1db34:	3000fa50 	.word	0x3000fa50
   1db38:	2001bf18 	.word	0x2001bf18
   1db3c:	bd70b004 	.word	0xbd70b004
   1db40:	3f01f814 	.word	0x3f01f814
   1db44:	d1dc2b00 	.word	0xd1dc2b00
   1db48:	460de7e6 	.word	0x460de7e6
   1db4c:	bf00e7e4 	.word	0xbf00e7e4
   1db50:	200218bc 	.word	0x200218bc
   1db54:	00025478 	.word	0x00025478

0001db58 <pdn_id_get_parser>:
   1db58:	780bb570 	.word	0x780bb570
   1db5c:	b3134606 	.word	0xb3134606
   1db60:	24004608 	.word	0x24004608
   1db64:	2b20460a 	.word	0x2b20460a
   1db68:	d0174615 	.word	0xd0174615
   1db6c:	34017013 	.word	0x34017013
   1db70:	3f01f810 	.word	0x3f01f810
   1db74:	4615190a 	.word	0x4615190a
   1db78:	d1f42b00 	.word	0xd1f42b00
   1db7c:	46082300 	.word	0x46082300
   1db80:	213a702b 	.word	0x213a702b
   1db84:	fa44f005 	.word	0xfa44f005
   1db88:	3001b130 	.word	0x3001b130
   1db8c:	f987f005 	.word	0xf987f005
   1db90:	f8534b06 	.word	0xf8534b06
   1db94:	60583026 	.word	0x60583026
   1db98:	bd702000 	.word	0xbd702000
   1db9c:	3f01f810 	.word	0x3f01f810
   1dba0:	d1e02b00 	.word	0xd1e02b00
   1dba4:	460de7ea 	.word	0x460de7ea
   1dba8:	bf00e7e8 	.word	0xbf00e7e8
   1dbac:	200218bc 	.word	0x200218bc

0001dbb0 <context_create_parser>:
   1dbb0:	780bb570 	.word	0x780bb570
   1dbb4:	b3134606 	.word	0xb3134606
   1dbb8:	24004608 	.word	0x24004608
   1dbbc:	2b20460a 	.word	0x2b20460a
   1dbc0:	d0174615 	.word	0xd0174615
   1dbc4:	34017013 	.word	0x34017013
   1dbc8:	3f01f810 	.word	0x3f01f810
   1dbcc:	4615190a 	.word	0x4615190a
   1dbd0:	d1f42b00 	.word	0xd1f42b00
   1dbd4:	46082300 	.word	0x46082300
   1dbd8:	213a702b 	.word	0x213a702b
   1dbdc:	fa18f005 	.word	0xfa18f005
   1dbe0:	4b08b130 	.word	0x4b08b130
   1dbe4:	f8533001 	.word	0xf8533001
   1dbe8:	f0054026 	.word	0xf0054026
   1dbec:	6020f958 	.word	0x6020f958
   1dbf0:	bd702000 	.word	0xbd702000
   1dbf4:	3f01f810 	.word	0x3f01f810
   1dbf8:	d1e02b00 	.word	0xd1e02b00
   1dbfc:	460de7ea 	.word	0x460de7ea
   1dc00:	bf00e7e8 	.word	0xbf00e7e8
   1dc04:	200218bc 	.word	0x200218bc

0001dc08 <pdn_interface_init>:
   1dc08:	33fff04f 	.word	0x33fff04f
   1dc0c:	4c09b510 	.word	0x4c09b510
   1dc10:	21002228 	.word	0x21002228
   1dc14:	60234808 	.word	0x60234808
   1dc18:	fa54f005 	.word	0xfa54f005
   1dc1c:	2201f240 	.word	0x2201f240
   1dc20:	20662100 	.word	0x20662100
   1dc24:	f8cef7f3 	.word	0xf8cef7f3
   1dc28:	60202800 	.word	0x60202800
   1dc2c:	2003bfb4 	.word	0x2003bfb4
   1dc30:	bd102000 	.word	0xbd102000
   1dc34:	200217b8 	.word	0x200217b8
   1dc38:	200218bc 	.word	0x200218bc

0001dc3c <pdn_interface_open>:
   1dc3c:	43f0e92d 	.word	0x43f0e92d
   1dc40:	b0832866 	.word	0xb0832866
   1dc44:	80bcf040 	.word	0x80bcf040
   1dc48:	7f00f5b1 	.word	0x7f00f5b1
   1dc4c:	80aaf040 	.word	0x80aaf040
   1dc50:	2302f240 	.word	0x2302f240
   1dc54:	f040429a 	.word	0xf040429a
   1dc58:	4c6280a5 	.word	0x4c6280a5
   1dc5c:	b34d6825 	.word	0xb34d6825
   1dc60:	2b006863 	.word	0x2b006863
   1dc64:	8098f000 	.word	0x8098f000
   1dc68:	2b0068a3 	.word	0x2b0068a3
   1dc6c:	8096f000 	.word	0x8096f000
   1dc70:	2b0068e3 	.word	0x2b0068e3
   1dc74:	8094f000 	.word	0x8094f000
   1dc78:	2b006923 	.word	0x2b006923
   1dc7c:	8098f000 	.word	0x8098f000
   1dc80:	2b006963 	.word	0x2b006963
   1dc84:	8098f000 	.word	0x8098f000
   1dc88:	2b0069a3 	.word	0x2b0069a3
   1dc8c:	8096f000 	.word	0x8096f000
   1dc90:	2b0069e3 	.word	0x2b0069e3
   1dc94:	808ef000 	.word	0x808ef000
   1dc98:	b1536a23 	.word	0xb1536a23
   1dc9c:	25096a63 	.word	0x25096a63
   1dca0:	200cb143 	.word	0x200cb143
   1dca4:	fe66f7f1 	.word	0xfe66f7f1
   1dca8:	30fff04f 	.word	0x30fff04f
   1dcac:	e8bdb003 	.word	0xe8bdb003
   1dcb0:	250883f0 	.word	0x250883f0
   1dcb4:	f7fe2074 	.word	0xf7fe2074
   1dcb8:	f844ff3f 	.word	0xf844ff3f
   1dcbc:	28000025 	.word	0x28000025
   1dcc0:	2274d0ef 	.word	0x2274d0ef
   1dcc4:	f0052100 	.word	0xf0052100
   1dcc8:	2101f9fd 	.word	0x2101f9fd
   1dccc:	f04f2003 	.word	0xf04f2003
   1dcd0:	f85437ff 	.word	0xf85437ff
   1dcd4:	4a443025 	.word	0x4a443025
   1dcd8:	f8546099 	.word	0xf8546099
   1dcdc:	f44f3025 	.word	0xf44f3025
   1dce0:	67187180 	.word	0x67187180
   1dce4:	4841605f 	.word	0x4841605f
   1dce8:	810cf8df 	.word	0x810cf8df
   1dcec:	f8c2f7f1 	.word	0xf8c2f7f1
   1dcf0:	f8d8483e 	.word	0xf8d8483e
   1dcf4:	26009000 	.word	0x26009000
   1dcf8:	f998f005 	.word	0xf998f005
   1dcfc:	46024633 	.word	0x46024633
   1dd00:	4648493a 	.word	0x4648493a
   1dd04:	96009601 	.word	0x96009601
   1dd08:	f806f7f3 	.word	0xf806f7f3
   1dd0c:	48374681 	.word	0x48374681
   1dd10:	f98cf005 	.word	0xf98cf005
   1dd14:	d1594548 	.word	0xd1594548
   1dd18:	e9cd4633 	.word	0xe9cd4633
   1dd1c:	f44f6600 	.word	0xf44f6600
   1dd20:	49327280 	.word	0x49327280
   1dd24:	0000f8d8 	.word	0x0000f8d8
   1dd28:	f8def7f3 	.word	0xf8def7f3
   1dd2c:	48304606 	.word	0x48304606
   1dd30:	f97cf005 	.word	0xf97cf005
   1dd34:	db154286 	.word	0xdb154286
   1dd38:	492c4602 	.word	0x492c4602
   1dd3c:	f005482c 	.word	0xf005482c
   1dd40:	b978f988 	.word	0xb978f988
   1dd44:	46284929 	.word	0x46284929
   1dd48:	ff32f7ff 	.word	0xff32f7ff
   1dd4c:	2202b9b0 	.word	0x2202b9b0
   1dd50:	3025f854 	.word	0x3025f854
   1dd54:	40f1f045 	.word	0x40f1f045
   1dd58:	10d0f440 	.word	0x10d0f440
   1dd5c:	b003609a 	.word	0xb003609a
   1dd60:	83f0e8bd 	.word	0x83f0e8bd
   1dd64:	f0054823 	.word	0xf0054823
   1dd68:	4920f961 	.word	0x4920f961
   1dd6c:	48214602 	.word	0x48214602
   1dd70:	f96ff005 	.word	0xf96ff005
   1dd74:	2008b960 	.word	0x2008b960
   1dd78:	fdfcf7f1 	.word	0xfdfcf7f1
   1dd7c:	0025f854 	.word	0x0025f854
   1dd80:	fef8f7fe 	.word	0xfef8f7fe
   1dd84:	f04f2300 	.word	0xf04f2300
   1dd88:	f84430ff 	.word	0xf84430ff
   1dd8c:	e78d3025 	.word	0xe78d3025
   1dd90:	f7f12005 	.word	0xf7f12005
   1dd94:	e7f1fdef 	.word	0xe7f1fdef
   1dd98:	e78b2501 	.word	0xe78b2501
   1dd9c:	e7892502 	.word	0xe7892502
   1dda0:	e7872503 	.word	0xe7872503
   1dda4:	f7f12016 	.word	0xf7f12016
   1dda8:	f04ffde5 	.word	0xf04ffde5
   1ddac:	e77d30ff 	.word	0xe77d30ff
   1ddb0:	e77f2504 	.word	0xe77f2504
   1ddb4:	e77d2507 	.word	0xe77d2507
   1ddb8:	e77b2505 	.word	0xe77b2505
   1ddbc:	e7792506 	.word	0xe7792506
   1ddc0:	f7f1202f 	.word	0xf7f1202f
   1ddc4:	f04ffdd7 	.word	0xf04ffdd7
   1ddc8:	e76f30ff 	.word	0xe76f30ff
   1ddcc:	f7f12005 	.word	0xf7f12005
   1ddd0:	f854fdd1 	.word	0xf854fdd1
   1ddd4:	f7fe0025 	.word	0xf7fe0025
   1ddd8:	f844fecd 	.word	0xf844fecd
   1dddc:	46386025 	.word	0x46386025
   1dde0:	bf00e764 	.word	0xbf00e764
   1dde4:	200218bc 	.word	0x200218bc
   1dde8:	00025454 	.word	0x00025454
   1ddec:	200217bc 	.word	0x200217bc
   1ddf0:	00025464 	.word	0x00025464
   1ddf4:	00025470 	.word	0x00025470
   1ddf8:	200217b8 	.word	0x200217b8

0001ddfc <pdn_interface_connect>:
   1ddfc:	4ff0e92d 	.word	0x4ff0e92d
   1de00:	2900b083 	.word	0x2900b083
   1de04:	813ef000 	.word	0x813ef000
   1de08:	46912a64 	.word	0x46912a64
   1de0c:	813af200 	.word	0x813af200
   1de10:	46084605 	.word	0x46084605
   1de14:	f0054688 	.word	0xf0054688
   1de18:	2864f909 	.word	0x2864f909
   1de1c:	8132f200 	.word	0x8132f200
   1de20:	43ab4ba5 	.word	0x43ab4ba5
   1de24:	8125f040 	.word	0x8125f040
   1de28:	45f1f025 	.word	0x45f1f025
   1de2c:	15d0f425 	.word	0x15d0f425
   1de30:	f3002d09 	.word	0xf3002d09
   1de34:	4fa1811e 	.word	0x4fa1811e
   1de38:	3025f857 	.word	0x3025f857
   1de3c:	f0002b00 	.word	0xf0002b00
   1de40:	689a8118 	.word	0x689a8118
   1de44:	f0002a00 	.word	0xf0002a00
   1de48:	2d008114 	.word	0x2d008114
   1de4c:	8111f2c0 	.word	0x8111f2c0
   1de50:	2b02689b 	.word	0x2b02689b
   1de54:	810df040 	.word	0x810df040
   1de58:	4a9a4e99 	.word	0x4a9a4e99
   1de5c:	7180f44f 	.word	0x7180f44f
   1de60:	f7f14630 	.word	0xf7f14630
   1de64:	f857f807 	.word	0xf857f807
   1de68:	46043025 	.word	0x46043025
   1de6c:	7180f5c0 	.word	0x7180f5c0
   1de70:	4a95681b 	.word	0x4a95681b
   1de74:	f7f01830 	.word	0xf7f01830
   1de78:	f857fffd 	.word	0xf857fffd
   1de7c:	44043025 	.word	0x44043025
   1de80:	f0036f1b 	.word	0xf0036f1b
   1de84:	2a030203 	.word	0x2a030203
   1de88:	80eaf000 	.word	0x80eaf000
   1de8c:	eb06079b 	.word	0xeb06079b
   1de90:	f5c40004 	.word	0xf5c40004
   1de94:	bf4c7180 	.word	0xbf4c7180
   1de98:	4b8d4b8c 	.word	0x4b8d4b8c
   1de9c:	f7f04a8d 	.word	0xf7f04a8d
   1dea0:	4404ffe9 	.word	0x4404ffe9
   1dea4:	4a8c4643 	.word	0x4a8c4643
   1dea8:	7180f5c4 	.word	0x7180f5c4
   1deac:	f7f01930 	.word	0xf7f01930
   1deb0:	4420ffe1 	.word	0x4420ffe1
   1deb4:	7f80f5b0 	.word	0x7f80f5b0
   1deb8:	80f7f300 	.word	0x80f7f300
   1debc:	a238f8df 	.word	0xa238f8df
   1dec0:	f8da487f 	.word	0xf8da487f
   1dec4:	2400b000 	.word	0x2400b000
   1dec8:	f8b0f005 	.word	0xf8b0f005
   1decc:	46024623 	.word	0x46024623
   1ded0:	4658497b 	.word	0x4658497b
   1ded4:	94009401 	.word	0x94009401
   1ded8:	ff1ef7f2 	.word	0xff1ef7f2
   1dedc:	48784683 	.word	0x48784683
   1dee0:	f8a4f005 	.word	0xf8a4f005
   1dee4:	d0084558 	.word	0xd0084558
   1dee8:	f7f12005 	.word	0xf7f12005
   1deec:	f04ffd43 	.word	0xf04ffd43
   1def0:	462034ff 	.word	0x462034ff
   1def4:	e8bdb003 	.word	0xe8bdb003
   1def8:	46238ff0 	.word	0x46238ff0
   1defc:	4400e9cd 	.word	0x4400e9cd
   1df00:	7280f44f 	.word	0x7280f44f
   1df04:	f8da496e 	.word	0xf8da496e
   1df08:	f7f20000 	.word	0xf7f20000
   1df0c:	4604ffed 	.word	0x4604ffed
   1df10:	f0054872 	.word	0xf0054872
   1df14:	4284f88b 	.word	0x4284f88b
   1df18:	8091f2c0 	.word	0x8091f2c0
   1df1c:	49684602 	.word	0x49684602
   1df20:	f005486e 	.word	0xf005486e
   1df24:	2800f896 	.word	0x2800f896
   1df28:	8089f040 	.word	0x8089f040
   1df2c:	46284964 	.word	0x46284964
   1df30:	fddaf7ff 	.word	0xfddaf7ff
   1df34:	28004604 	.word	0x28004604
   1df38:	4a69d1db 	.word	0x4a69d1db
   1df3c:	7180f44f 	.word	0x7180f44f
   1df40:	f7f0485f 	.word	0xf7f0485f
   1df44:	f857ff97 	.word	0xf857ff97
   1df48:	f5c03025 	.word	0xf5c03025
   1df4c:	681b7180 	.word	0x681b7180
   1df50:	44304a64 	.word	0x44304a64
   1df54:	ff8ef7f0 	.word	0xff8ef7f0
   1df58:	f8da4859 	.word	0xf8da4859
   1df5c:	f005b000 	.word	0xf005b000
   1df60:	4623f865 	.word	0x4623f865
   1df64:	49564602 	.word	0x49564602
   1df68:	94014658 	.word	0x94014658
   1df6c:	f7f29400 	.word	0xf7f29400
   1df70:	4683fed3 	.word	0x4683fed3
   1df74:	f0054852 	.word	0xf0054852
   1df78:	4558f859 	.word	0x4558f859
   1df7c:	4623d1b4 	.word	0x4623d1b4
   1df80:	7280f44f 	.word	0x7280f44f
   1df84:	f8da494e 	.word	0xf8da494e
   1df88:	e9cd0000 	.word	0xe9cd0000
   1df8c:	f7f24400 	.word	0xf7f24400
   1df90:	4683ffab 	.word	0x4683ffab
   1df94:	f0054851 	.word	0xf0054851
   1df98:	4583f849 	.word	0x4583f849
   1df9c:	4602db4f 	.word	0x4602db4f
   1dfa0:	484e4947 	.word	0x484e4947
   1dfa4:	f855f005 	.word	0xf855f005
   1dfa8:	d1482800 	.word	0xd1482800
   1dfac:	f8572103 	.word	0xf8572103
   1dfb0:	464a3025 	.word	0x464a3025
   1dfb4:	f8576099 	.word	0xf8576099
   1dfb8:	46410025 	.word	0x46410025
   1dfbc:	f005300c 	.word	0xf005300c
   1dfc0:	4a49f857 	.word	0x4a49f857
   1dfc4:	7180f44f 	.word	0x7180f44f
   1dfc8:	f7f0483d 	.word	0xf7f0483d
   1dfcc:	4601ff53 	.word	0x4601ff53
   1dfd0:	3025f857 	.word	0x3025f857
   1dfd4:	7180f5c1 	.word	0x7180f5c1
   1dfd8:	4a42681b 	.word	0x4a42681b
   1dfdc:	f7f01830 	.word	0xf7f01830
   1dfe0:	4837ff49 	.word	0x4837ff49
   1dfe4:	6000f8da 	.word	0x6000f8da
   1dfe8:	f820f005 	.word	0xf820f005
   1dfec:	46024623 	.word	0x46024623
   1dff0:	46304933 	.word	0x46304933
   1dff4:	94009401 	.word	0x94009401
   1dff8:	fe8ef7f2 	.word	0xfe8ef7f2
   1dffc:	48304606 	.word	0x48304606
   1e000:	f814f005 	.word	0xf814f005
   1e004:	d15342b0 	.word	0xd15342b0
   1e008:	f44f4623 	.word	0xf44f4623
   1e00c:	492c7280 	.word	0x492c7280
   1e010:	0000f8da 	.word	0x0000f8da
   1e014:	4400e9cd 	.word	0x4400e9cd
   1e018:	ff66f7f2 	.word	0xff66f7f2
   1e01c:	48334606 	.word	0x48334606
   1e020:	f804f005 	.word	0xf804f005
   1e024:	db334286 	.word	0xdb334286
   1e028:	49254602 	.word	0x49254602
   1e02c:	f005482f 	.word	0xf005482f
   1e030:	bb68f810 	.word	0xbb68f810
   1e034:	49224628 	.word	0x49224628
   1e038:	fd8ef7ff 	.word	0xfd8ef7ff
   1e03c:	482ce759 	.word	0x482ce759
   1e040:	fff4f004 	.word	0xfff4f004
   1e044:	4602491e 	.word	0x4602491e
   1e048:	f0054829 	.word	0xf0054829
   1e04c:	2800f802 	.word	0x2800f802
   1e050:	af4af47f 	.word	0xaf4af47f
   1e054:	f7f12008 	.word	0xf7f12008
   1e058:	f04ffc8d 	.word	0xf04ffc8d
   1e05c:	e74834ff 	.word	0xe74834ff
   1e060:	7180f5c4 	.word	0x7180f5c4
   1e064:	4b231930 	.word	0x4b231930
   1e068:	f7f04a1a 	.word	0xf7f04a1a
   1e06c:	4404ff03 	.word	0x4404ff03
   1e070:	f04fe718 	.word	0xf04fe718
   1e074:	200934ff 	.word	0x200934ff
   1e078:	fc7cf7f1 	.word	0xfc7cf7f1
   1e07c:	b0034620 	.word	0xb0034620
   1e080:	8ff0e8bd 	.word	0x8ff0e8bd
   1e084:	f7f12016 	.word	0xf7f12016
   1e088:	f04ffc75 	.word	0xf04ffc75
   1e08c:	e73034ff 	.word	0xe73034ff
   1e090:	f0044817 	.word	0xf0044817
   1e094:	490affcb 	.word	0x490affcb
   1e098:	48154602 	.word	0x48154602
   1e09c:	ffd9f004 	.word	0xffd9f004
   1e0a0:	2008b930 	.word	0x2008b930
   1e0a4:	fc66f7f1 	.word	0xfc66f7f1
   1e0a8:	f04fe723 	.word	0xf04fe723
   1e0ac:	e72034ff 	.word	0xe72034ff
   1e0b0:	f7f12005 	.word	0xf7f12005
   1e0b4:	e71cfc5f 	.word	0xe71cfc5f
   1e0b8:	789a0000 	.word	0x789a0000
   1e0bc:	200218bc 	.word	0x200218bc
   1e0c0:	200217bc 	.word	0x200217bc
   1e0c4:	000253e0 	.word	0x000253e0
   1e0c8:	000253ec 	.word	0x000253ec
   1e0cc:	00025400 	.word	0x00025400
   1e0d0:	00025408 	.word	0x00025408
   1e0d4:	000253f8 	.word	0x000253f8
   1e0d8:	00025438 	.word	0x00025438
   1e0dc:	00024400 	.word	0x00024400
   1e0e0:	0002540c 	.word	0x0002540c
   1e0e4:	00025418 	.word	0x00025418
   1e0e8:	0002541c 	.word	0x0002541c
   1e0ec:	0002542c 	.word	0x0002542c
   1e0f0:	00025470 	.word	0x00025470
   1e0f4:	000253f0 	.word	0x000253f0
   1e0f8:	200217b8 	.word	0x200217b8

0001e0fc <pdn_interface_close>:
   1e0fc:	43f0e92d 	.word	0x43f0e92d
   1e100:	b0834b63 	.word	0xb0834b63
   1e104:	f0404383 	.word	0xf0404383
   1e108:	f020809d 	.word	0xf020809d
   1e10c:	f42444f1 	.word	0xf42444f1
   1e110:	2c0914d0 	.word	0x2c0914d0
   1e114:	8096f300 	.word	0x8096f300
   1e118:	f8554d5e 	.word	0xf8554d5e
   1e11c:	28000024 	.word	0x28000024
   1e120:	8090f000 	.word	0x8090f000
   1e124:	2b006883 	.word	0x2b006883
   1e128:	808cf000 	.word	0x808cf000
   1e12c:	2b036883 	.word	0x2b036883
   1e130:	f7fed008 	.word	0xf7fed008
   1e134:	2300fd1f 	.word	0x2300fd1f
   1e138:	f8454618 	.word	0xf8454618
   1e13c:	b0033024 	.word	0xb0033024
   1e140:	83f0e8bd 	.word	0x83f0e8bd
   1e144:	4a554e54 	.word	0x4a554e54
   1e148:	7180f44f 	.word	0x7180f44f
   1e14c:	f7f04630 	.word	0xf7f04630
   1e150:	f855fe91 	.word	0xf855fe91
   1e154:	f5c03024 	.word	0xf5c03024
   1e158:	681b7180 	.word	0x681b7180
   1e15c:	44304a50 	.word	0x44304a50
   1e160:	814cf8df 	.word	0x814cf8df
   1e164:	fe86f7f0 	.word	0xfe86f7f0
   1e168:	f8d84630 	.word	0xf8d84630
   1e16c:	27009000 	.word	0x27009000
   1e170:	ff5cf004 	.word	0xff5cf004
   1e174:	46024631 	.word	0x46024631
   1e178:	4648463b 	.word	0x4648463b
   1e17c:	97009701 	.word	0x97009701
   1e180:	fdcaf7f2 	.word	0xfdcaf7f2
   1e184:	46304681 	.word	0x46304681
   1e188:	ff50f004 	.word	0xff50f004
   1e18c:	d1764548 	.word	0xd1764548
   1e190:	e9cd463b 	.word	0xe9cd463b
   1e194:	f44f7700 	.word	0xf44f7700
   1e198:	46317280 	.word	0x46317280
   1e19c:	0000f8d8 	.word	0x0000f8d8
   1e1a0:	fea2f7f2 	.word	0xfea2f7f2
   1e1a4:	483f4607 	.word	0x483f4607
   1e1a8:	ff40f004 	.word	0xff40f004
   1e1ac:	da4f4287 	.word	0xda4f4287
   1e1b0:	f004483d 	.word	0xf004483d
   1e1b4:	4938ff3b 	.word	0x4938ff3b
   1e1b8:	483b4602 	.word	0x483b4602
   1e1bc:	ff49f004 	.word	0xff49f004
   1e1c0:	d15c2800 	.word	0xd15c2800
   1e1c4:	f7f12008 	.word	0xf7f12008
   1e1c8:	4a38fbd5 	.word	0x4a38fbd5
   1e1cc:	7180f44f 	.word	0x7180f44f
   1e1d0:	f7f04831 	.word	0xf7f04831
   1e1d4:	4601fe4f 	.word	0x4601fe4f
   1e1d8:	3024f855 	.word	0x3024f855
   1e1dc:	7180f5c1 	.word	0x7180f5c1
   1e1e0:	4a2f681b 	.word	0x4a2f681b
   1e1e4:	f7f01830 	.word	0xf7f01830
   1e1e8:	482bfe45 	.word	0x482bfe45
   1e1ec:	7000f8d8 	.word	0x7000f8d8
   1e1f0:	f0042600 	.word	0xf0042600
   1e1f4:	4633ff1b 	.word	0x4633ff1b
   1e1f8:	49274602 	.word	0x49274602
   1e1fc:	96014638 	.word	0x96014638
   1e200:	f7f29600 	.word	0xf7f29600
   1e204:	4607fd89 	.word	0x4607fd89
   1e208:	f0044823 	.word	0xf0044823
   1e20c:	42b8ff0f 	.word	0x42b8ff0f
   1e210:	4633d139 	.word	0x4633d139
   1e214:	6600e9cd 	.word	0x6600e9cd
   1e218:	7280f44f 	.word	0x7280f44f
   1e21c:	f8d8491e 	.word	0xf8d8491e
   1e220:	f7f20000 	.word	0xf7f20000
   1e224:	4606fe61 	.word	0x4606fe61
   1e228:	f004481e 	.word	0xf004481e
   1e22c:	4286feff 	.word	0x4286feff
   1e230:	4602db16 	.word	0x4602db16
   1e234:	481b4918 	.word	0x481b4918
   1e238:	ff0bf004 	.word	0xff0bf004
   1e23c:	f855b980 	.word	0xf855b980
   1e240:	e7760024 	.word	0xe7760024
   1e244:	f7f12009 	.word	0xf7f12009
   1e248:	f04ffb95 	.word	0xf04ffb95
   1e24c:	e77630ff 	.word	0xe77630ff
   1e250:	46314602 	.word	0x46314602
   1e254:	f0044813 	.word	0xf0044813
   1e258:	2800fefc 	.word	0x2800fefc
   1e25c:	e7a7d0b5 	.word	0xe7a7d0b5
   1e260:	f0044811 	.word	0xf0044811
   1e264:	490cfee3 	.word	0x490cfee3
   1e268:	480f4602 	.word	0x480f4602
   1e26c:	fef1f004 	.word	0xfef1f004
   1e270:	2008b948 	.word	0x2008b948
   1e274:	fb7ef7f1 	.word	0xfb7ef7f1
   1e278:	0024f855 	.word	0x0024f855
   1e27c:	2005e759 	.word	0x2005e759
   1e280:	fb78f7f1 	.word	0xfb78f7f1
   1e284:	2005e7a1 	.word	0x2005e7a1
   1e288:	fb74f7f1 	.word	0xfb74f7f1
   1e28c:	bf00e7d7 	.word	0xbf00e7d7
   1e290:	789a0000 	.word	0x789a0000
   1e294:	200218bc 	.word	0x200218bc
   1e298:	200217bc 	.word	0x200217bc
   1e29c:	000253d4 	.word	0x000253d4
   1e2a0:	00025418 	.word	0x00025418
   1e2a4:	00024400 	.word	0x00024400
   1e2a8:	00025470 	.word	0x00025470
   1e2ac:	000253e0 	.word	0x000253e0
   1e2b0:	200217b8 	.word	0x200217b8

0001e2b4 <pdn_interface_setopt>:
   1e2b4:	f240b510 	.word	0xf240b510
   1e2b8:	42a12402 	.word	0x42a12402
   1e2bc:	b153d10b 	.word	0xb153d10b
   1e2c0:	b1419902 	.word	0xb1419902
   1e2c4:	43814925 	.word	0x43814925
   1e2c8:	2009d00b 	.word	0x2009d00b
   1e2cc:	fb52f7f1 	.word	0xfb52f7f1
   1e2d0:	30fff04f 	.word	0x30fff04f
   1e2d4:	2016bd10 	.word	0x2016bd10
   1e2d8:	fb4cf7f1 	.word	0xfb4cf7f1
   1e2dc:	30fff04f 	.word	0x30fff04f
   1e2e0:	f020bd10 	.word	0xf020bd10
   1e2e4:	f42040f1 	.word	0xf42040f1
   1e2e8:	280910d0 	.word	0x280910d0
   1e2ec:	491cdced 	.word	0x491cdced
   1e2f0:	1020f851 	.word	0x1020f851
   1e2f4:	d0e82900 	.word	0xd0e82900
   1e2f8:	2c00688c 	.word	0x2c00688c
   1e2fc:	2800d0e5 	.word	0x2800d0e5
   1e300:	2a01dbe3 	.word	0x2a01dbe3
   1e304:	202dd001 	.word	0x202dd001
   1e308:	688ae7e6 	.word	0x688ae7e6
   1e30c:	688ab1fa 	.word	0x688ab1fa
   1e310:	d01c2a03 	.word	0xd01c2a03
   1e314:	2a04688a 	.word	0x2a04688a
   1e318:	9a02d019 	.word	0x9a02d019
   1e31c:	1e420890 	.word	0x1e420890
   1e320:	d8d82a01 	.word	0xd8d82a01
   1e324:	07929a02 	.word	0x07929a02
   1e328:	681ad1d5 	.word	0x681ad1d5
   1e32c:	d0102a02 	.word	0xd0102a02
   1e330:	d1d02a0a 	.word	0xd1d02a0a
   1e334:	28022202 	.word	0x28022202
   1e338:	685bd106 	.word	0x685bd106
   1e33c:	d00a2b02 	.word	0xd00a2b02
   1e340:	d1c82b0a 	.word	0xd1c82b0a
   1e344:	0202f042 	.word	0x0202f042
   1e348:	2000670a 	.word	0x2000670a
   1e34c:	200ee7c4 	.word	0x200ee7c4
   1e350:	2201e7c2 	.word	0x2201e7c2
   1e354:	f042e7ef 	.word	0xf042e7ef
   1e358:	e7f50201 	.word	0xe7f50201
   1e35c:	789a0000 	.word	0x789a0000
   1e360:	200218bc 	.word	0x200218bc

0001e364 <pdn_interface_getopt>:
   1e364:	43f0e92d 	.word	0x43f0e92d
   1e368:	2402f240 	.word	0x2402f240
   1e36c:	42a1b083 	.word	0x42a1b083
   1e370:	f0409d0a 	.word	0xf0409d0a
   1e374:	461e80a9 	.word	0x461e80a9
   1e378:	f0002b00 	.word	0xf0002b00
   1e37c:	2d0080a5 	.word	0x2d0080a5
   1e380:	80a2f000 	.word	0x80a2f000
   1e384:	43834b56 	.word	0x43834b56
   1e388:	8084f040 	.word	0x8084f040
   1e38c:	44f1f020 	.word	0x44f1f020
   1e390:	14d0f424 	.word	0x14d0f424
   1e394:	dc7d2c09 	.word	0xdc7d2c09
   1e398:	f8534b52 	.word	0xf8534b52
   1e39c:	2b003024 	.word	0x2b003024
   1e3a0:	6899d078 	.word	0x6899d078
   1e3a4:	d0752900 	.word	0xd0752900
   1e3a8:	db732c00 	.word	0xdb732c00
   1e3ac:	d00e2a02 	.word	0xd00e2a02
   1e3b0:	d0082a03 	.word	0xd0082a03
   1e3b4:	d0152a01 	.word	0xd0152a01
   1e3b8:	f7f1202d 	.word	0xf7f1202d
   1e3bc:	2000fadb 	.word	0x2000fadb
   1e3c0:	e8bdb003 	.word	0xe8bdb003
   1e3c4:	682b83f0 	.word	0x682b83f0
   1e3c8:	2016bb23 	.word	0x2016bb23
   1e3cc:	682ae7f5 	.word	0x682ae7f5
   1e3d0:	d0fa2a00 	.word	0xd0fa2a00
   1e3d4:	20002201 	.word	0x20002201
   1e3d8:	7033681b 	.word	0x7033681b
   1e3dc:	b003602a 	.word	0xb003602a
   1e3e0:	83f0e8bd 	.word	0x83f0e8bd
   1e3e4:	2a00689a 	.word	0x2a00689a
   1e3e8:	689ad052 	.word	0x689ad052
   1e3ec:	d04f2a04 	.word	0xd04f2a04
   1e3f0:	2a07682a 	.word	0x2a07682a
   1e3f4:	f012d9e9 	.word	0xf012d9e9
   1e3f8:	d1e60203 	.word	0xd1e60203
   1e3fc:	07996f1b 	.word	0x07996f1b
   1e400:	2104d45d 	.word	0x2104d45d
   1e404:	d50207db 	.word	0xd50207db
   1e408:	50b32302 	.word	0x50b32302
   1e40c:	602a460a 	.word	0x602a460a
   1e410:	e7d52000 	.word	0xe7d52000
   1e414:	f44f4a34 	.word	0xf44f4a34
   1e418:	48347180 	.word	0x48347180
   1e41c:	80d8f8df 	.word	0x80d8f8df
   1e420:	fd28f7f0 	.word	0xfd28f7f0
   1e424:	f8d84831 	.word	0xf8d84831
   1e428:	27009000 	.word	0x27009000
   1e42c:	fdfef004 	.word	0xfdfef004
   1e430:	4602463b 	.word	0x4602463b
   1e434:	4648492d 	.word	0x4648492d
   1e438:	97009701 	.word	0x97009701
   1e43c:	fc6cf7f2 	.word	0xfc6cf7f2
   1e440:	482a4681 	.word	0x482a4681
   1e444:	fdf2f004 	.word	0xfdf2f004
   1e448:	d1434548 	.word	0xd1434548
   1e44c:	e9cd463b 	.word	0xe9cd463b
   1e450:	f44f7700 	.word	0xf44f7700
   1e454:	49257280 	.word	0x49257280
   1e458:	0000f8d8 	.word	0x0000f8d8
   1e45c:	fd44f7f2 	.word	0xfd44f7f2
   1e460:	48234607 	.word	0x48234607
   1e464:	fde2f004 	.word	0xfde2f004
   1e468:	db194287 	.word	0xdb194287
   1e46c:	491f4602 	.word	0x491f4602
   1e470:	f004481f 	.word	0xf004481f
   1e474:	4607fdee 	.word	0x4607fdee
   1e478:	4620b990 	.word	0x4620b990
   1e47c:	f7ff491b 	.word	0xf7ff491b
   1e480:	2800fb35 	.word	0x2800fb35
   1e484:	2301db99 	.word	0x2301db99
   1e488:	46387030 	.word	0x46387030
   1e48c:	e797602b 	.word	0xe797602b
   1e490:	e792200e 	.word	0xe792200e
   1e494:	f7f12009 	.word	0xf7f12009
   1e498:	f04ffa6d 	.word	0xf04ffa6d
   1e49c:	e78f30ff 	.word	0xe78f30ff
   1e4a0:	f0044814 	.word	0xf0044814
   1e4a4:	4911fdc3 	.word	0x4911fdc3
   1e4a8:	48124602 	.word	0x48124602
   1e4ac:	fdd1f004 	.word	0xfdd1f004
   1e4b0:	2008b980 	.word	0x2008b980
   1e4b4:	fa5ef7f1 	.word	0xfa5ef7f1
   1e4b8:	30fff04f 	.word	0x30fff04f
   1e4bc:	220ae77d 	.word	0x220ae77d
   1e4c0:	60322108 	.word	0x60322108
   1e4c4:	e79d2204 	.word	0xe79d2204
   1e4c8:	f7f12016 	.word	0xf7f12016
   1e4cc:	f04ffa53 	.word	0xf04ffa53
   1e4d0:	e77530ff 	.word	0xe77530ff
   1e4d4:	f7f12005 	.word	0xf7f12005
   1e4d8:	f04ffa4d 	.word	0xf04ffa4d
   1e4dc:	e76c30ff 	.word	0xe76c30ff
   1e4e0:	789a0000 	.word	0x789a0000
   1e4e4:	200218bc 	.word	0x200218bc
   1e4e8:	00025440 	.word	0x00025440
   1e4ec:	200217bc 	.word	0x200217bc
   1e4f0:	0002544c 	.word	0x0002544c
   1e4f4:	00025470 	.word	0x00025470
   1e4f8:	200217b8 	.word	0x200217b8

0001e4fc <pdn_interface_pdn_id_get>:
   1e4fc:	f0002900 	.word	0xf0002900
   1e500:	e92d83b9 	.word	0xe92d83b9
   1e504:	4ca343f0 	.word	0x4ca343f0
   1e508:	b0832802 	.word	0xb0832802
   1e50c:	6823460d 	.word	0x6823460d
   1e510:	8094f000 	.word	0x8094f000
   1e514:	d03f280a 	.word	0xd03f280a
   1e518:	689bb11b 	.word	0x689bb11b
   1e51c:	f0002b03 	.word	0xf0002b03
   1e520:	68638127 	.word	0x68638127
   1e524:	689bb11b 	.word	0x689bb11b
   1e528:	f0002b03 	.word	0xf0002b03
   1e52c:	68a38110 	.word	0x68a38110
   1e530:	689bb11b 	.word	0x689bb11b
   1e534:	f0002b03 	.word	0xf0002b03
   1e538:	68e380f9 	.word	0x68e380f9
   1e53c:	689bb11b 	.word	0x689bb11b
   1e540:	f0002b03 	.word	0xf0002b03
   1e544:	692380e2 	.word	0x692380e2
   1e548:	689bb11b 	.word	0x689bb11b
   1e54c:	f0002b03 	.word	0xf0002b03
   1e550:	69638123 	.word	0x69638123
   1e554:	689bb11b 	.word	0x689bb11b
   1e558:	f0002b03 	.word	0xf0002b03
   1e55c:	69a38161 	.word	0x69a38161
   1e560:	689bb11b 	.word	0x689bb11b
   1e564:	f0002b03 	.word	0xf0002b03
   1e568:	69e3814a 	.word	0x69e3814a
   1e56c:	689bb11b 	.word	0x689bb11b
   1e570:	f0002b03 	.word	0xf0002b03
   1e574:	6a238133 	.word	0x6a238133
   1e578:	689bb11b 	.word	0x689bb11b
   1e57c:	f0002b03 	.word	0xf0002b03
   1e580:	6a63811c 	.word	0x6a63811c
   1e584:	689bb11b 	.word	0x689bb11b
   1e588:	f0002b03 	.word	0xf0002b03
   1e58c:	f04f80ad 	.word	0xf04f80ad
   1e590:	b00330ff 	.word	0xb00330ff
   1e594:	83f0e8bd 	.word	0x83f0e8bd
   1e598:	689bb11b 	.word	0x689bb11b
   1e59c:	f0002b03 	.word	0xf0002b03
   1e5a0:	68638335 	.word	0x68638335
   1e5a4:	689bb11b 	.word	0x689bb11b
   1e5a8:	f0002b03 	.word	0xf0002b03
   1e5ac:	68a382fd 	.word	0x68a382fd
   1e5b0:	689bb11b 	.word	0x689bb11b
   1e5b4:	f0002b03 	.word	0xf0002b03
   1e5b8:	68e382d5 	.word	0x68e382d5
   1e5bc:	689eb11b 	.word	0x689eb11b
   1e5c0:	f0002e03 	.word	0xf0002e03
   1e5c4:	692381f0 	.word	0x692381f0
   1e5c8:	689bb11b 	.word	0x689bb11b
   1e5cc:	f0002b03 	.word	0xf0002b03
   1e5d0:	69638203 	.word	0x69638203
   1e5d4:	689bb11b 	.word	0x689bb11b
   1e5d8:	f0002b03 	.word	0xf0002b03
   1e5dc:	69a38215 	.word	0x69a38215
   1e5e0:	689bb11b 	.word	0x689bb11b
   1e5e4:	f0002b03 	.word	0xf0002b03
   1e5e8:	69e38227 	.word	0x69e38227
   1e5ec:	689bb11b 	.word	0x689bb11b
   1e5f0:	f0002b03 	.word	0xf0002b03
   1e5f4:	6a238239 	.word	0x6a238239
   1e5f8:	689bb11b 	.word	0x689bb11b
   1e5fc:	f0002b03 	.word	0xf0002b03
   1e600:	6a63824d 	.word	0x6a63824d
   1e604:	d0c22b00 	.word	0xd0c22b00
   1e608:	2b03689b 	.word	0x2b03689b
   1e60c:	4628d1bf 	.word	0x4628d1bf
   1e610:	fd0cf004 	.word	0xfd0cf004
   1e614:	6a604606 	.word	0x6a604606
   1e618:	f004300c 	.word	0xf004300c
   1e61c:	42b0fd07 	.word	0x42b0fd07
   1e620:	6a61d1b5 	.word	0x6a61d1b5
   1e624:	310c4628 	.word	0x310c4628
   1e628:	fd07f004 	.word	0xfd07f004
   1e62c:	d1ae2800 	.word	0xd1ae2800
   1e630:	6f1a6a63 	.word	0x6f1a6a63
   1e634:	d5aa0792 	.word	0xd5aa0792
   1e638:	e11a2609 	.word	0xe11a2609
   1e63c:	689bb11b 	.word	0x689bb11b
   1e640:	f0002b03 	.word	0xf0002b03
   1e644:	686382fd 	.word	0x686382fd
   1e648:	689bb11b 	.word	0x689bb11b
   1e64c:	f0002b03 	.word	0xf0002b03
   1e650:	68a382c5 	.word	0x68a382c5
   1e654:	689bb11b 	.word	0x689bb11b
   1e658:	f0002b03 	.word	0xf0002b03
   1e65c:	68e38269 	.word	0x68e38269
   1e660:	689eb11b 	.word	0x689eb11b
   1e664:	f0002e03 	.word	0xf0002e03
   1e668:	692380ec 	.word	0x692380ec
   1e66c:	689bb11b 	.word	0x689bb11b
   1e670:	f0002b03 	.word	0xf0002b03
   1e674:	6963814a 	.word	0x6963814a
   1e678:	689bb11b 	.word	0x689bb11b
   1e67c:	f0002b03 	.word	0xf0002b03
   1e680:	69a3815e 	.word	0x69a3815e
   1e684:	689bb11b 	.word	0x689bb11b
   1e688:	f0002b03 	.word	0xf0002b03
   1e68c:	69e38172 	.word	0x69e38172
   1e690:	689bb11b 	.word	0x689bb11b
   1e694:	f0002b03 	.word	0xf0002b03
   1e698:	6a23821b 	.word	0x6a23821b
   1e69c:	689bb11b 	.word	0x689bb11b
   1e6a0:	f0002b03 	.word	0xf0002b03
   1e6a4:	6a63822d 	.word	0x6a63822d
   1e6a8:	f43f2b00 	.word	0xf43f2b00
   1e6ac:	689baf70 	.word	0x689baf70
   1e6b0:	f47f2b03 	.word	0xf47f2b03
   1e6b4:	4628af6c 	.word	0x4628af6c
   1e6b8:	fcb8f004 	.word	0xfcb8f004
   1e6bc:	6a604606 	.word	0x6a604606
   1e6c0:	f004300c 	.word	0xf004300c
   1e6c4:	4286fcb3 	.word	0x4286fcb3
   1e6c8:	af61f47f 	.word	0xaf61f47f
   1e6cc:	46286a61 	.word	0x46286a61
   1e6d0:	f004310c 	.word	0xf004310c
   1e6d4:	2800fcb2 	.word	0x2800fcb2
   1e6d8:	af59f47f 	.word	0xaf59f47f
   1e6dc:	6f1a6a63 	.word	0x6f1a6a63
   1e6e0:	f57f07d2 	.word	0xf57f07d2
   1e6e4:	e7a7af54 	.word	0xe7a7af54
   1e6e8:	f0044628 	.word	0xf0044628
   1e6ec:	4606fc9f 	.word	0x4606fc9f
   1e6f0:	300c6a60 	.word	0x300c6a60
   1e6f4:	fc9af004 	.word	0xfc9af004
   1e6f8:	f47f42b0 	.word	0xf47f42b0
   1e6fc:	6a61af48 	.word	0x6a61af48
   1e700:	310c4628 	.word	0x310c4628
   1e704:	fc99f004 	.word	0xfc99f004
   1e708:	4628e741 	.word	0x4628e741
   1e70c:	fc8ef004 	.word	0xfc8ef004
   1e710:	68e04606 	.word	0x68e04606
   1e714:	f004300c 	.word	0xf004300c
   1e718:	4286fc89 	.word	0x4286fc89
   1e71c:	af13f47f 	.word	0xaf13f47f
   1e720:	462868e1 	.word	0x462868e1
   1e724:	f004310c 	.word	0xf004310c
   1e728:	e70cfc88 	.word	0xe70cfc88
   1e72c:	f0044628 	.word	0xf0044628
   1e730:	4606fc7d 	.word	0x4606fc7d
   1e734:	300c68a0 	.word	0x300c68a0
   1e738:	fc78f004 	.word	0xfc78f004
   1e73c:	f47f4286 	.word	0xf47f4286
   1e740:	68a1aefc 	.word	0x68a1aefc
   1e744:	310c4628 	.word	0x310c4628
   1e748:	fc77f004 	.word	0xfc77f004
   1e74c:	4628e6f5 	.word	0x4628e6f5
   1e750:	fc6cf004 	.word	0xfc6cf004
   1e754:	68604606 	.word	0x68604606
   1e758:	f004300c 	.word	0xf004300c
   1e75c:	4286fc67 	.word	0x4286fc67
   1e760:	aee5f47f 	.word	0xaee5f47f
   1e764:	46286861 	.word	0x46286861
   1e768:	f004310c 	.word	0xf004310c
   1e76c:	e6defc66 	.word	0xe6defc66
   1e770:	f0044608 	.word	0xf0044608
   1e774:	4606fc5b 	.word	0x4606fc5b
   1e778:	300c6820 	.word	0x300c6820
   1e77c:	fc56f004 	.word	0xfc56f004
   1e780:	f47f4286 	.word	0xf47f4286
   1e784:	6821aece 	.word	0x6821aece
   1e788:	310c4628 	.word	0x310c4628
   1e78c:	fc55f004 	.word	0xfc55f004
   1e790:	bf00e6c7 	.word	0xbf00e6c7
   1e794:	200218bc 	.word	0x200218bc
   1e798:	f0044628 	.word	0xf0044628
   1e79c:	4606fc47 	.word	0x4606fc47
   1e7a0:	300c6920 	.word	0x300c6920
   1e7a4:	fc42f004 	.word	0xfc42f004
   1e7a8:	f47f4286 	.word	0xf47f4286
   1e7ac:	6921aed2 	.word	0x6921aed2
   1e7b0:	310c4628 	.word	0x310c4628
   1e7b4:	fc41f004 	.word	0xfc41f004
   1e7b8:	4628e6cb 	.word	0x4628e6cb
   1e7bc:	fc36f004 	.word	0xfc36f004
   1e7c0:	6a204606 	.word	0x6a204606
   1e7c4:	f004300c 	.word	0xf004300c
   1e7c8:	4286fc31 	.word	0x4286fc31
   1e7cc:	aed9f47f 	.word	0xaed9f47f
   1e7d0:	46286a21 	.word	0x46286a21
   1e7d4:	f004310c 	.word	0xf004310c
   1e7d8:	e6d2fc30 	.word	0xe6d2fc30
   1e7dc:	f0044628 	.word	0xf0044628
   1e7e0:	4606fc25 	.word	0x4606fc25
   1e7e4:	300c69e0 	.word	0x300c69e0
   1e7e8:	fc20f004 	.word	0xfc20f004
   1e7ec:	f47f4286 	.word	0xf47f4286
   1e7f0:	69e1aec2 	.word	0x69e1aec2
   1e7f4:	310c4628 	.word	0x310c4628
   1e7f8:	fc1ff004 	.word	0xfc1ff004
   1e7fc:	4628e6bb 	.word	0x4628e6bb
   1e800:	fc14f004 	.word	0xfc14f004
   1e804:	69a04606 	.word	0x69a04606
   1e808:	f004300c 	.word	0xf004300c
   1e80c:	4286fc0f 	.word	0x4286fc0f
   1e810:	aeabf47f 	.word	0xaeabf47f
   1e814:	462869a1 	.word	0x462869a1
   1e818:	f004310c 	.word	0xf004310c
   1e81c:	e6a4fc0e 	.word	0xe6a4fc0e
   1e820:	f0044628 	.word	0xf0044628
   1e824:	4606fc03 	.word	0x4606fc03
   1e828:	300c6960 	.word	0x300c6960
   1e82c:	fbfef004 	.word	0xfbfef004
   1e830:	f47f4286 	.word	0xf47f4286
   1e834:	6961ae94 	.word	0x6961ae94
   1e838:	310c4628 	.word	0x310c4628
   1e83c:	fbfdf004 	.word	0xfbfdf004
   1e840:	4628e68d 	.word	0x4628e68d
   1e844:	fbf2f004 	.word	0xfbf2f004
   1e848:	68e04607 	.word	0x68e04607
   1e84c:	f004300c 	.word	0xf004300c
   1e850:	4287fbed 	.word	0x4287fbed
   1e854:	af09f47f 	.word	0xaf09f47f
   1e858:	462868e1 	.word	0x462868e1
   1e85c:	f004310c 	.word	0xf004310c
   1e860:	2800fbec 	.word	0x2800fbec
   1e864:	af01f47f 	.word	0xaf01f47f
   1e868:	6f1a68e3 	.word	0x6f1a68e3
   1e86c:	f57f07d1 	.word	0xf57f07d1
   1e870:	6858aefc 	.word	0x6858aefc
   1e874:	f47f1c43 	.word	0xf47f1c43
   1e878:	4dc6ae8c 	.word	0x4dc6ae8c
   1e87c:	f44f4ac6 	.word	0xf44f4ac6
   1e880:	46287180 	.word	0x46287180
   1e884:	faf6f7f0 	.word	0xfaf6f7f0
   1e888:	3026f854 	.word	0x3026f854
   1e88c:	7180f5c0 	.word	0x7180f5c0
   1e890:	4ac2681b 	.word	0x4ac2681b
   1e894:	f8df4428 	.word	0xf8df4428
   1e898:	f7f0830c 	.word	0xf7f0830c
   1e89c:	4628faeb 	.word	0x4628faeb
   1e8a0:	9000f8d8 	.word	0x9000f8d8
   1e8a4:	f0042700 	.word	0xf0042700
   1e8a8:	4629fbc1 	.word	0x4629fbc1
   1e8ac:	463b4602 	.word	0x463b4602
   1e8b0:	97014648 	.word	0x97014648
   1e8b4:	f7f29700 	.word	0xf7f29700
   1e8b8:	4681fa2f 	.word	0x4681fa2f
   1e8bc:	f0044628 	.word	0xf0044628
   1e8c0:	4548fbb5 	.word	0x4548fbb5
   1e8c4:	81e9f040 	.word	0x81e9f040
   1e8c8:	f44f463b 	.word	0xf44f463b
   1e8cc:	e9cd7280 	.word	0xe9cd7280
   1e8d0:	46297700 	.word	0x46297700
   1e8d4:	0000f8d8 	.word	0x0000f8d8
   1e8d8:	fb06f7f2 	.word	0xfb06f7f2
   1e8dc:	48b04607 	.word	0x48b04607
   1e8e0:	fba4f004 	.word	0xfba4f004
   1e8e4:	46024287 	.word	0x46024287
   1e8e8:	81c7f2c0 	.word	0x81c7f2c0
   1e8ec:	48ac4629 	.word	0x48ac4629
   1e8f0:	fbaff004 	.word	0xfbaff004
   1e8f4:	f0402800 	.word	0xf0402800
   1e8f8:	462981c0 	.word	0x462981c0
   1e8fc:	f7ff4630 	.word	0xf7ff4630
   1e900:	f854f92b 	.word	0xf854f92b
   1e904:	68583026 	.word	0x68583026
   1e908:	4628e643 	.word	0x4628e643
   1e90c:	fb8ef004 	.word	0xfb8ef004
   1e910:	69204606 	.word	0x69204606
   1e914:	f004300c 	.word	0xf004300c
   1e918:	4286fb89 	.word	0x4286fb89
   1e91c:	aeabf47f 	.word	0xaeabf47f
   1e920:	46286921 	.word	0x46286921
   1e924:	f004310c 	.word	0xf004310c
   1e928:	2800fb88 	.word	0x2800fb88
   1e92c:	aea3f47f 	.word	0xaea3f47f
   1e930:	6f1a6923 	.word	0x6f1a6923
   1e934:	f57f07d2 	.word	0xf57f07d2
   1e938:	2604ae9e 	.word	0x2604ae9e
   1e93c:	4628e799 	.word	0x4628e799
   1e940:	fb74f004 	.word	0xfb74f004
   1e944:	69604606 	.word	0x69604606
   1e948:	f004300c 	.word	0xf004300c
   1e94c:	4286fb6f 	.word	0x4286fb6f
   1e950:	ae97f47f 	.word	0xae97f47f
   1e954:	46286961 	.word	0x46286961
   1e958:	f004310c 	.word	0xf004310c
   1e95c:	2800fb6e 	.word	0x2800fb6e
   1e960:	ae8ff47f 	.word	0xae8ff47f
   1e964:	6f1a6963 	.word	0x6f1a6963
   1e968:	f57f07d7 	.word	0xf57f07d7
   1e96c:	2605ae8a 	.word	0x2605ae8a
   1e970:	4628e77f 	.word	0x4628e77f
   1e974:	fb5af004 	.word	0xfb5af004
   1e978:	69a04606 	.word	0x69a04606
   1e97c:	f004300c 	.word	0xf004300c
   1e980:	4286fb55 	.word	0x4286fb55
   1e984:	ae83f47f 	.word	0xae83f47f
   1e988:	462869a1 	.word	0x462869a1
   1e98c:	f004310c 	.word	0xf004310c
   1e990:	2800fb54 	.word	0x2800fb54
   1e994:	ae7bf47f 	.word	0xae7bf47f
   1e998:	6f1a69a3 	.word	0x6f1a69a3
   1e99c:	f57f07d6 	.word	0xf57f07d6
   1e9a0:	2606ae76 	.word	0x2606ae76
   1e9a4:	4628e765 	.word	0x4628e765
   1e9a8:	fb40f004 	.word	0xfb40f004
   1e9ac:	68e04607 	.word	0x68e04607
   1e9b0:	f004300c 	.word	0xf004300c
   1e9b4:	4287fb3b 	.word	0x4287fb3b
   1e9b8:	ae05f47f 	.word	0xae05f47f
   1e9bc:	462868e1 	.word	0x462868e1
   1e9c0:	f004310c 	.word	0xf004310c
   1e9c4:	2800fb3a 	.word	0x2800fb3a
   1e9c8:	adfdf47f 	.word	0xadfdf47f
   1e9cc:	6f1a68e3 	.word	0x6f1a68e3
   1e9d0:	f53f0791 	.word	0xf53f0791
   1e9d4:	e5f6af4e 	.word	0xe5f6af4e
   1e9d8:	f0044628 	.word	0xf0044628
   1e9dc:	4606fb27 	.word	0x4606fb27
   1e9e0:	300c6920 	.word	0x300c6920
   1e9e4:	fb22f004 	.word	0xfb22f004
   1e9e8:	f47f4286 	.word	0xf47f4286
   1e9ec:	6921adf2 	.word	0x6921adf2
   1e9f0:	310c4628 	.word	0x310c4628
   1e9f4:	fb21f004 	.word	0xfb21f004
   1e9f8:	f47f2800 	.word	0xf47f2800
   1e9fc:	6923adea 	.word	0x6923adea
   1ea00:	07926f1a 	.word	0x07926f1a
   1ea04:	e5e4d499 	.word	0xe5e4d499
   1ea08:	f0044628 	.word	0xf0044628
   1ea0c:	4606fb0f 	.word	0x4606fb0f
   1ea10:	300c6960 	.word	0x300c6960
   1ea14:	fb0af004 	.word	0xfb0af004
   1ea18:	f47f4286 	.word	0xf47f4286
   1ea1c:	6961ade0 	.word	0x6961ade0
   1ea20:	310c4628 	.word	0x310c4628
   1ea24:	fb09f004 	.word	0xfb09f004
   1ea28:	f47f2800 	.word	0xf47f2800
   1ea2c:	6963add8 	.word	0x6963add8
   1ea30:	07976f1a 	.word	0x07976f1a
   1ea34:	e5d2d49b 	.word	0xe5d2d49b
   1ea38:	f0044628 	.word	0xf0044628
   1ea3c:	4606faf7 	.word	0x4606faf7
   1ea40:	300c69a0 	.word	0x300c69a0
   1ea44:	faf2f004 	.word	0xfaf2f004
   1ea48:	f47f4286 	.word	0xf47f4286
   1ea4c:	69a1adce 	.word	0x69a1adce
   1ea50:	310c4628 	.word	0x310c4628
   1ea54:	faf1f004 	.word	0xfaf1f004
   1ea58:	f47f2800 	.word	0xf47f2800
   1ea5c:	69a3adc6 	.word	0x69a3adc6
   1ea60:	07966f1a 	.word	0x07966f1a
   1ea64:	e5c0d49d 	.word	0xe5c0d49d
   1ea68:	f0044628 	.word	0xf0044628
   1ea6c:	4606fadf 	.word	0x4606fadf
   1ea70:	300c69e0 	.word	0x300c69e0
   1ea74:	fadaf004 	.word	0xfadaf004
   1ea78:	f47f4286 	.word	0xf47f4286
   1ea7c:	69e1adbc 	.word	0x69e1adbc
   1ea80:	310c4628 	.word	0x310c4628
   1ea84:	fad9f004 	.word	0xfad9f004
   1ea88:	f47f2800 	.word	0xf47f2800
   1ea8c:	69e3adb4 	.word	0x69e3adb4
   1ea90:	07906f1a 	.word	0x07906f1a
   1ea94:	adaff57f 	.word	0xadaff57f
   1ea98:	e6ea2607 	.word	0xe6ea2607
   1ea9c:	f0044628 	.word	0xf0044628
   1eaa0:	4606fac5 	.word	0x4606fac5
   1eaa4:	300c6a20 	.word	0x300c6a20
   1eaa8:	fac0f004 	.word	0xfac0f004
   1eaac:	f47f4286 	.word	0xf47f4286
   1eab0:	6a21ada8 	.word	0x6a21ada8
   1eab4:	310c4628 	.word	0x310c4628
   1eab8:	fabff004 	.word	0xfabff004
   1eabc:	f47f2800 	.word	0xf47f2800
   1eac0:	6a23ada0 	.word	0x6a23ada0
   1eac4:	07916f1a 	.word	0x07916f1a
   1eac8:	ad9bf57f 	.word	0xad9bf57f
   1eacc:	e6d02608 	.word	0xe6d02608
   1ead0:	f0044628 	.word	0xf0044628
   1ead4:	4606faab 	.word	0x4606faab
   1ead8:	300c69e0 	.word	0x300c69e0
   1eadc:	faa6f004 	.word	0xfaa6f004
   1eae0:	f47f4286 	.word	0xf47f4286
   1eae4:	69e1adda 	.word	0x69e1adda
   1eae8:	310c4628 	.word	0x310c4628
   1eaec:	faa5f004 	.word	0xfaa5f004
   1eaf0:	f47f2800 	.word	0xf47f2800
   1eaf4:	69e3add2 	.word	0x69e3add2
   1eaf8:	07d06f1a 	.word	0x07d06f1a
   1eafc:	e5ccd4cc 	.word	0xe5ccd4cc
   1eb00:	f0044628 	.word	0xf0044628
   1eb04:	4606fa93 	.word	0x4606fa93
   1eb08:	300c6a20 	.word	0x300c6a20
   1eb0c:	fa8ef004 	.word	0xfa8ef004
   1eb10:	f47f4286 	.word	0xf47f4286
   1eb14:	6a21adc8 	.word	0x6a21adc8
   1eb18:	310c4628 	.word	0x310c4628
   1eb1c:	fa8df004 	.word	0xfa8df004
   1eb20:	f47f2800 	.word	0xf47f2800
   1eb24:	6a23adc0 	.word	0x6a23adc0
   1eb28:	07d16f1a 	.word	0x07d16f1a
   1eb2c:	e5bad4ce 	.word	0xe5bad4ce
   1eb30:	f0044628 	.word	0xf0044628
   1eb34:	4606fa7b 	.word	0x4606fa7b
   1eb38:	300c68a0 	.word	0x300c68a0
   1eb3c:	fa76f004 	.word	0xfa76f004
   1eb40:	f47f4286 	.word	0xf47f4286
   1eb44:	68a1ad8c 	.word	0x68a1ad8c
   1eb48:	310c4628 	.word	0x310c4628
   1eb4c:	fa75f004 	.word	0xfa75f004
   1eb50:	f47f2800 	.word	0xf47f2800
   1eb54:	68a3ad84 	.word	0x68a3ad84
   1eb58:	07d06f1a 	.word	0x07d06f1a
   1eb5c:	ad7ff57f 	.word	0xad7ff57f
   1eb60:	e6862602 	.word	0xe6862602
   1eb64:	f0044628 	.word	0xf0044628
   1eb68:	4606fa61 	.word	0x4606fa61
   1eb6c:	300c68a0 	.word	0x300c68a0
   1eb70:	fa5cf004 	.word	0xfa5cf004
   1eb74:	f47f4286 	.word	0xf47f4286
   1eb78:	68a1ad20 	.word	0x68a1ad20
   1eb7c:	310c4628 	.word	0x310c4628
   1eb80:	fa5bf004 	.word	0xfa5bf004
   1eb84:	f47f2800 	.word	0xf47f2800
   1eb88:	68a3ad18 	.word	0x68a3ad18
   1eb8c:	07906f1a 	.word	0x07906f1a
   1eb90:	e512d4e6 	.word	0xe512d4e6
   1eb94:	200217bc 	.word	0x200217bc
   1eb98:	0002541c 	.word	0x0002541c
   1eb9c:	00025418 	.word	0x00025418
   1eba0:	0002542c 	.word	0x0002542c
   1eba4:	200217b8 	.word	0x200217b8
   1eba8:	f0044628 	.word	0xf0044628
   1ebac:	4606fa3f 	.word	0x4606fa3f
   1ebb0:	300c6860 	.word	0x300c6860
   1ebb4:	fa3af004 	.word	0xfa3af004
   1ebb8:	f47f4286 	.word	0xf47f4286
   1ebbc:	6861acf8 	.word	0x6861acf8
   1ebc0:	310c4628 	.word	0x310c4628
   1ebc4:	fa39f004 	.word	0xfa39f004
   1ebc8:	f47f2800 	.word	0xf47f2800
   1ebcc:	6863acf0 	.word	0x6863acf0
   1ebd0:	07966f1a 	.word	0x07966f1a
   1ebd4:	acebf57f 	.word	0xacebf57f
   1ebd8:	e64a2601 	.word	0xe64a2601
   1ebdc:	f0044628 	.word	0xf0044628
   1ebe0:	4606fa25 	.word	0x4606fa25
   1ebe4:	300c6860 	.word	0x300c6860
   1ebe8:	fa20f004 	.word	0xfa20f004
   1ebec:	f47f4286 	.word	0xf47f4286
   1ebf0:	6861ad30 	.word	0x6861ad30
   1ebf4:	310c4628 	.word	0x310c4628
   1ebf8:	fa1ff004 	.word	0xfa1ff004
   1ebfc:	f47f2800 	.word	0xf47f2800
   1ec00:	6863ad28 	.word	0x6863ad28
   1ec04:	07d66f1a 	.word	0x07d66f1a
   1ec08:	e522d4e6 	.word	0xe522d4e6
   1ec0c:	f0044608 	.word	0xf0044608
   1ec10:	4606fa0d 	.word	0x4606fa0d
   1ec14:	300c6820 	.word	0x300c6820
   1ec18:	fa08f004 	.word	0xfa08f004
   1ec1c:	f47f4286 	.word	0xf47f4286
   1ec20:	6821acc0 	.word	0x6821acc0
   1ec24:	310c4628 	.word	0x310c4628
   1ec28:	fa07f004 	.word	0xfa07f004
   1ec2c:	28004606 	.word	0x28004606
   1ec30:	acb7f47f 	.word	0xacb7f47f
   1ec34:	6f1a6823 	.word	0x6f1a6823
   1ec38:	f53f0797 	.word	0xf53f0797
   1ec3c:	e4b0ae1a 	.word	0xe4b0ae1a
   1ec40:	f0044608 	.word	0xf0044608
   1ec44:	4606f9f3 	.word	0x4606f9f3
   1ec48:	300c6820 	.word	0x300c6820
   1ec4c:	f9eef004 	.word	0xf9eef004
   1ec50:	f47f4286 	.word	0xf47f4286
   1ec54:	6821acf8 	.word	0x6821acf8
   1ec58:	310c4628 	.word	0x310c4628
   1ec5c:	f9edf004 	.word	0xf9edf004
   1ec60:	28004606 	.word	0x28004606
   1ec64:	aceff47f 	.word	0xaceff47f
   1ec68:	6f1a6823 	.word	0x6f1a6823
   1ec6c:	f53f07d7 	.word	0xf53f07d7
   1ec70:	e4e8ae00 	.word	0xe4e8ae00
   1ec74:	30fff04f 	.word	0x30fff04f
   1ec78:	480b4770 	.word	0x480b4770
   1ec7c:	f9d6f004 	.word	0xf9d6f004
   1ec80:	4602490a 	.word	0x4602490a
   1ec84:	f0044808 	.word	0xf0044808
   1ec88:	b930f9e4 	.word	0xb930f9e4
   1ec8c:	f7f02008 	.word	0xf7f02008
   1ec90:	f854fe71 	.word	0xf854fe71
   1ec94:	68583026 	.word	0x68583026
   1ec98:	2005e47b 	.word	0x2005e47b
   1ec9c:	fe6af7f0 	.word	0xfe6af7f0
   1eca0:	3026f854 	.word	0x3026f854
   1eca4:	e4746858 	.word	0xe4746858
   1eca8:	00025470 	.word	0x00025470
   1ecac:	200217bc 	.word	0x200217bc

0001ecb0 <bsd_platform_getaddrinfo>:
   1ecb0:	be04f7f7 	.word	0xbe04f7f7

0001ecb4 <bsd_platform_freeaddrinfo>:
   1ecb4:	bef8f7f7 	.word	0xbef8f7f7

0001ecb8 <bsd_platform_poll>:
   1ecb8:	43f0e92d 	.word	0x43f0e92d
   1ecbc:	72e2ea42 	.word	0x72e2ea42
   1ecc0:	9200b083 	.word	0x9200b083
   1ecc4:	d0482800 	.word	0xd0482800
   1ecc8:	2b071e4b 	.word	0x2b071e4b
   1eccc:	4680d845 	.word	0x4680d845
   1ecd0:	24004605 	.word	0x24004605
   1ecd4:	07c1eb00 	.word	0x07c1eb00
   1ecd8:	682888ab 	.word	0x682888ab
   1ecdc:	0303f003 	.word	0x0303f003
   1ece0:	f043a901 	.word	0xf043a901
   1ece4:	f7f6061c 	.word	0xf7f6061c
   1ece8:	9b01fd1f 	.word	0x9b01fd1f
   1ecec:	40333508 	.word	0x40333508
   1ecf0:	3c02f825 	.word	0x3c02f825
   1ecf4:	3401b103 	.word	0x3401b103
   1ecf8:	d1ed42af 	.word	0xd1ed42af
   1ecfc:	4669bb9c 	.word	0x4669bb9c
   1ed00:	f7f04640 	.word	0xf7f04640
   1ed04:	4607fda3 	.word	0x4607fda3
   1ed08:	283cb108 	.word	0x283cb108
   1ed0c:	46c1d11d 	.word	0x46c1d11d
   1ed10:	f8b92600 	.word	0xf8b92600
   1ed14:	f8d93004 	.word	0xf8d93004
   1ed18:	f0030000 	.word	0xf0030000
   1ed1c:	a9010303 	.word	0xa9010303
   1ed20:	041cf043 	.word	0x041cf043
   1ed24:	fd00f7f6 	.word	0xfd00f7f6
   1ed28:	f1099b01 	.word	0xf1099b01
   1ed2c:	40230908 	.word	0x40230908
   1ed30:	3c02f829 	.word	0x3c02f829
   1ed34:	3601b103 	.word	0x3601b103
   1ed38:	d1ea454d 	.word	0xd1ea454d
   1ed3c:	2f00b90e 	.word	0x2f00b90e
   1ed40:	4630d0dd 	.word	0x4630d0dd
   1ed44:	e8bdb003 	.word	0xe8bdb003
   1ed48:	202383f0 	.word	0x202383f0
   1ed4c:	fe12f7f0 	.word	0xfe12f7f0
   1ed50:	30fff04f 	.word	0x30fff04f
   1ed54:	e8bdb003 	.word	0xe8bdb003
   1ed58:	201683f0 	.word	0x201683f0
   1ed5c:	fe0af7f0 	.word	0xfe0af7f0
   1ed60:	30fff04f 	.word	0x30fff04f
   1ed64:	4620e7ee 	.word	0x4620e7ee
   1ed68:	bf00e7ec 	.word	0xbf00e7ec

0001ed6c <bsd_platform_fcntl>:
   1ed6c:	4b06b508 	.word	0x4b06b508
   1ed70:	d0034383 	.word	0xd0034383
   1ed74:	4008e8bd 	.word	0x4008e8bd
   1ed78:	bd54f7f6 	.word	0xbd54f7f6
   1ed7c:	f7f0202d 	.word	0xf7f0202d
   1ed80:	f04ffdf9 	.word	0xf04ffdf9
   1ed84:	bd0830ff 	.word	0xbd0830ff
   1ed88:	49765432 	.word	0x49765432

0001ed8c <stream_handler_init>:
   1ed8c:	4604b510 	.word	0x4604b510
   1ed90:	f7fd200c 	.word	0xf7fd200c
   1ed94:	60e0fed1 	.word	0x60e0fed1
   1ed98:	2300b128 	.word	0x2300b128
   1ed9c:	e8bd6123 	.word	0xe8bd6123
   1eda0:	f7f84010 	.word	0xf7f84010
   1eda4:	2004ba1b 	.word	0x2004ba1b
   1eda8:	bf00bd10 	.word	0xbf00bd10

0001edac <stream_handler_put>:
   1edac:	4606b570 	.word	0x4606b570
   1edb0:	460d2014 	.word	0x460d2014
   1edb4:	fec0f7fd 	.word	0xfec0f7fd
   1edb8:	682bb178 	.word	0x682bb178
   1edbc:	60434604 	.word	0x60434604
   1edc0:	4601686b 	.word	0x4601686b
   1edc4:	68eb6083 	.word	0x68eb6083
   1edc8:	68ab60c3 	.word	0x68ab60c3
   1edcc:	68f06103 	.word	0x68f06103
   1edd0:	fa0ef7f8 	.word	0xfa0ef7f8
   1edd4:	6868b920 	.word	0x6868b920
   1edd8:	f04fbd70 	.word	0xf04fbd70
   1eddc:	bd7030ff 	.word	0xbd7030ff
   1ede0:	f7fd4620 	.word	0xf7fd4620
   1ede4:	f04ffec7 	.word	0xf04ffec7
   1ede8:	bd7030ff 	.word	0xbd7030ff

0001edec <stream_handler_get>:
   1edec:	4ff0e92d 	.word	0x4ff0e92d
   1edf0:	b0874682 	.word	0xb0874682
   1edf4:	468968c0 	.word	0x468968c0
   1edf8:	f7f84693 	.word	0xf7f84693
   1edfc:	2800fa19 	.word	0x2800fa19
   1ee00:	4605d072 	.word	0x4605d072
   1ee04:	0008f8d9 	.word	0x0008f8d9
   1ee08:	692bb120 	.word	0x692bb120
   1ee0c:	68eab113 	.word	0x68eab113
   1ee10:	d15c2a00 	.word	0xd15c2a00
   1ee14:	f8c92300 	.word	0xf8c92300
   1ee18:	f8d9300c 	.word	0xf8d9300c
   1ee1c:	f8d92000 	.word	0xf8d92000
   1ee20:	f8da8004 	.word	0xf8da8004
   1ee24:	92011010 	.word	0x92011010
   1ee28:	0f00f1b8 	.word	0x0f00f1b8
   1ee2c:	f00bd05a 	.word	0xf00bd05a
   1ee30:	24000308 	.word	0x24000308
   1ee34:	e0109300 	.word	0xe0109300
   1ee38:	3010f8da 	.word	0x3010f8da
   1ee3c:	f8ca443b 	.word	0xf8ca443b
   1ee40:	46283010 	.word	0x46283010
   1ee44:	f9fcf7f8 	.word	0xf9fcf7f8
   1ee48:	4605443c 	.word	0x4605443c
   1ee4c:	d0382800 	.word	0xd0382800
   1ee50:	d93645a0 	.word	0xd93645a0
   1ee54:	f8d92100 	.word	0xf8d92100
   1ee58:	68ae2000 	.word	0x68ae2000
   1ee5c:	0b04eba8 	.word	0x0b04eba8
   1ee60:	455e1a76 	.word	0x455e1a76
   1ee64:	bf284637 	.word	0xbf284637
   1ee68:	b132465f 	.word	0xb132465f
   1ee6c:	9b016868 	.word	0x9b016868
   1ee70:	463a4401 	.word	0x463a4401
   1ee74:	f0041918 	.word	0xf0041918
   1ee78:	9b00f8fb 	.word	0x9b00f8fb
   1ee7c:	d1e02b00 	.word	0xd1e02b00
   1ee80:	d8d9455e 	.word	0xd8d9455e
   1ee84:	000cf8da 	.word	0x000cf8da
   1ee88:	f9c8f7f8 	.word	0xf9c8f7f8
   1ee8c:	b1704606 	.word	0xb1704606
   1ee90:	2301e9d0 	.word	0x2301e9d0
   1ee94:	0103e9d0 	.word	0x0103e9d0
   1ee98:	2302e9cd 	.word	0x2302e9cd
   1ee9c:	1004e9cd 	.word	0x1004e9cd
   1eea0:	3101e9da 	.word	0x3101e9da
   1eea4:	4798a802 	.word	0x4798a802
   1eea8:	f7fd4630 	.word	0xf7fd4630
   1eeac:	2300fe63 	.word	0x2300fe63
   1eeb0:	f8ca4628 	.word	0xf8ca4628
   1eeb4:	f7f83010 	.word	0xf7f83010
   1eeb8:	443cf9c3 	.word	0x443cf9c3
   1eebc:	28004605 	.word	0x28004605
   1eec0:	4620d1c6 	.word	0x4620d1c6
   1eec4:	4004f8c9 	.word	0x4004f8c9
   1eec8:	e8bdb007 	.word	0xe8bdb007
   1eecc:	f8d98ff0 	.word	0xf8d98ff0
   1eed0:	429a300c 	.word	0x429a300c
   1eed4:	461abf28 	.word	0x461abf28
   1eed8:	200cf8c9 	.word	0x200cf8c9
   1eedc:	f0046929 	.word	0xf0046929
   1eee0:	e79af8c7 	.word	0xe79af8c7
   1eee4:	e7ec4644 	.word	0xe7ec4644
   1eee8:	30fff04f 	.word	0x30fff04f
   1eeec:	bf00e7ec 	.word	0xbf00e7ec

0001eef0 <stream_handler_available>:
   1eef0:	4604b510 	.word	0x4604b510
   1eef4:	f7f868c0 	.word	0xf7f868c0
   1eef8:	b150f99b 	.word	0xb150f99b
   1eefc:	42646924 	.word	0x42646924
   1ef00:	441c6883 	.word	0x441c6883
   1ef04:	f99cf7f8 	.word	0xf99cf7f8
   1ef08:	d1f92800 	.word	0xd1f92800
   1ef0c:	70e4ea24 	.word	0x70e4ea24
   1ef10:	f04fbd10 	.word	0xf04fbd10
   1ef14:	bd1030ff 	.word	0xbd1030ff

0001ef18 <stream_handler_flush>:
   1ef18:	4605b530 	.word	0x4605b530
   1ef1c:	b08568c0 	.word	0xb08568c0
   1ef20:	e01ab9a8 	.word	0xe01ab9a8
   1ef24:	f7f868e8 	.word	0xf7f868e8
   1ef28:	4604f979 	.word	0x4604f979
   1ef2c:	e9d0b170 	.word	0xe9d0b170
   1ef30:	e9d40101 	.word	0xe9d40101
   1ef34:	e9cd3203 	.word	0xe9cd3203
   1ef38:	e9cd0100 	.word	0xe9cd0100
   1ef3c:	e9d52302 	.word	0xe9d52302
   1ef40:	46683101 	.word	0x46683101
   1ef44:	46204798 	.word	0x46204798
   1ef48:	fe14f7fd 	.word	0xfe14f7fd
   1ef4c:	f7f868e8 	.word	0xf7f868e8
   1ef50:	2800f975 	.word	0x2800f975
   1ef54:	b005d1e6 	.word	0xb005d1e6
   1ef58:	2008bd30 	.word	0x2008bd30
   1ef5c:	bd30b005 	.word	0xbd30b005

0001ef60 <stream_handler_free>:
   1ef60:	4605b530 	.word	0x4605b530
   1ef64:	b08568c0 	.word	0xb08568c0
   1ef68:	e01cb9a0 	.word	0xe01cb9a0
   1ef6c:	f956f7f8 	.word	0xf956f7f8
   1ef70:	b1704604 	.word	0xb1704604
   1ef74:	0101e9d0 	.word	0x0101e9d0
   1ef78:	3203e9d4 	.word	0x3203e9d4
   1ef7c:	0100e9cd 	.word	0x0100e9cd
   1ef80:	2302e9cd 	.word	0x2302e9cd
   1ef84:	3101e9d5 	.word	0x3101e9d5
   1ef88:	47984668 	.word	0x47984668
   1ef8c:	f7fd4620 	.word	0xf7fd4620
   1ef90:	68e8fdf1 	.word	0x68e8fdf1
   1ef94:	f952f7f8 	.word	0xf952f7f8
   1ef98:	68e84604 	.word	0x68e84604
   1ef9c:	d1e52c00 	.word	0xd1e52c00
   1efa0:	fde8f7fd 	.word	0xfde8f7fd
   1efa4:	b00560ec 	.word	0xb00560ec
   1efa8:	bf00bd30 	.word	0xbf00bd30

0001efac <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1efac:	4a07      	ldr	r2, [pc, #28]	; (1efcc <SystemInit+0x20>)
   1efae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1efb2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1efb6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1efba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1efbe:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   1efc2:	4b03      	ldr	r3, [pc, #12]	; (1efd0 <SystemInit+0x24>)
   1efc4:	4a03      	ldr	r2, [pc, #12]	; (1efd4 <SystemInit+0x28>)
   1efc6:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   1efc8:	4770      	bx	lr
   1efca:	bf00      	nop
   1efcc:	e000ed00 	.word	0xe000ed00
   1efd0:	2002a21c 	.word	0x2002a21c
   1efd4:	03d09000 	.word	0x03d09000

0001efd8 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   1efd8:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   1efda:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   1efdc:	4b08      	ldr	r3, [pc, #32]	; (1f000 <z_sys_device_do_config_level+0x28>)
   1efde:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1efe2:	3001      	adds	r0, #1
   1efe4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1efe8:	42a5      	cmp	r5, r4
   1efea:	d800      	bhi.n	1efee <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   1efec:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   1efee:	6823      	ldr	r3, [r4, #0]
   1eff0:	4620      	mov	r0, r4
   1eff2:	685b      	ldr	r3, [r3, #4]
   1eff4:	4798      	blx	r3
		if (retval != 0) {
   1eff6:	b100      	cbz	r0, 1effa <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   1eff8:	6066      	str	r6, [r4, #4]
								info++) {
   1effa:	340c      	adds	r4, #12
   1effc:	e7f4      	b.n	1efe8 <z_sys_device_do_config_level+0x10>
   1effe:	bf00      	nop
   1f000:	00025484 	.word	0x00025484

0001f004 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   1f004:	4b10      	ldr	r3, [pc, #64]	; (1f048 <z_impl_device_get_binding+0x44>)
{
   1f006:	b570      	push	{r4, r5, r6, lr}
   1f008:	4605      	mov	r5, r0
   1f00a:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   1f00c:	4c0f      	ldr	r4, [pc, #60]	; (1f04c <z_impl_device_get_binding+0x48>)
   1f00e:	429c      	cmp	r4, r3
   1f010:	d104      	bne.n	1f01c <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   1f012:	4c0e      	ldr	r4, [pc, #56]	; (1f04c <z_impl_device_get_binding+0x48>)
   1f014:	42b4      	cmp	r4, r6
   1f016:	d109      	bne.n	1f02c <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   1f018:	2400      	movs	r4, #0
   1f01a:	e012      	b.n	1f042 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   1f01c:	6862      	ldr	r2, [r4, #4]
   1f01e:	b11a      	cbz	r2, 1f028 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   1f020:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   1f022:	6812      	ldr	r2, [r2, #0]
   1f024:	42aa      	cmp	r2, r5
   1f026:	d00c      	beq.n	1f042 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1f028:	340c      	adds	r4, #12
   1f02a:	e7f0      	b.n	1f00e <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   1f02c:	6863      	ldr	r3, [r4, #4]
   1f02e:	b90b      	cbnz	r3, 1f034 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1f030:	340c      	adds	r4, #12
   1f032:	e7ef      	b.n	1f014 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   1f034:	6823      	ldr	r3, [r4, #0]
   1f036:	4628      	mov	r0, r5
   1f038:	6819      	ldr	r1, [r3, #0]
   1f03a:	f003 fffe 	bl	2303a <strcmp>
   1f03e:	2800      	cmp	r0, #0
   1f040:	d1f6      	bne.n	1f030 <z_impl_device_get_binding+0x2c>
}
   1f042:	4620      	mov	r0, r4
   1f044:	bd70      	pop	{r4, r5, r6, pc}
   1f046:	bf00      	nop
   1f048:	2002a300 	.word	0x2002a300
   1f04c:	2002a228 	.word	0x2002a228

0001f050 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1f050:	4b01      	ldr	r3, [pc, #4]	; (1f058 <z_impl_z_errno+0x8>)
   1f052:	6898      	ldr	r0, [r3, #8]
}
   1f054:	3054      	adds	r0, #84	; 0x54
   1f056:	4770      	bx	lr
   1f058:	20025ab4 	.word	0x20025ab4

0001f05c <z_fatal_error>:
	z_arch_system_halt(reason);
}
/* LCOV_EXCL_STOP */

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1f05c:	b570      	push	{r4, r5, r6, lr}
   1f05e:	4604      	mov	r4, r0
   1f060:	460e      	mov	r6, r1
	return z_impl_k_current_get();
   1f062:	f001 ffd1 	bl	21008 <z_impl_k_current_get>
	 */

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   1f066:	4631      	mov	r1, r6
   1f068:	4605      	mov	r5, r0
   1f06a:	4620      	mov	r0, r4
   1f06c:	f004 fe60 	bl	23d30 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   1f070:	2c04      	cmp	r4, #4
   1f072:	d10c      	bne.n	1f08e <z_fatal_error+0x32>
   1f074:	4910      	ldr	r1, [pc, #64]	; (1f0b8 <z_fatal_error+0x5c>)
   1f076:	2373      	movs	r3, #115	; 0x73
   1f078:	4a10      	ldr	r2, [pc, #64]	; (1f0bc <z_fatal_error+0x60>)
   1f07a:	4811      	ldr	r0, [pc, #68]	; (1f0c0 <z_fatal_error+0x64>)
   1f07c:	f003 fe57 	bl	22d2e <printk>
   1f080:	4810      	ldr	r0, [pc, #64]	; (1f0c4 <z_fatal_error+0x68>)
   1f082:	f003 fe54 	bl	22d2e <printk>
   1f086:	2173      	movs	r1, #115	; 0x73
   1f088:	480c      	ldr	r0, [pc, #48]	; (1f0bc <z_fatal_error+0x60>)
   1f08a:	f003 fe5d 	bl	22d48 <assert_post_action>
			 "Attempted to recover from a kernel panic condition");
		/* FIXME: #17656 */
		__ASSERT(!k_is_in_isr(),
   1f08e:	f002 f8df 	bl	21250 <k_is_in_isr>
   1f092:	b160      	cbz	r0, 1f0ae <z_fatal_error+0x52>
   1f094:	490c      	ldr	r1, [pc, #48]	; (1f0c8 <z_fatal_error+0x6c>)
   1f096:	2376      	movs	r3, #118	; 0x76
   1f098:	4a08      	ldr	r2, [pc, #32]	; (1f0bc <z_fatal_error+0x60>)
   1f09a:	4809      	ldr	r0, [pc, #36]	; (1f0c0 <z_fatal_error+0x64>)
   1f09c:	f003 fe47 	bl	22d2e <printk>
   1f0a0:	480a      	ldr	r0, [pc, #40]	; (1f0cc <z_fatal_error+0x70>)
   1f0a2:	f003 fe44 	bl	22d2e <printk>
   1f0a6:	2176      	movs	r1, #118	; 0x76
   1f0a8:	4804      	ldr	r0, [pc, #16]	; (1f0bc <z_fatal_error+0x60>)
   1f0aa:	f003 fe4d 	bl	22d48 <assert_post_action>
	z_impl_k_thread_abort(thread);
   1f0ae:	4628      	mov	r0, r5
			 "Attempted to recover from a fatal error in ISR");
	}
	k_thread_abort(thread);
}
   1f0b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f0b4:	f7ee bfc8 	b.w	e048 <z_impl_k_thread_abort>
   1f0b8:	00025e83 	.word	0x00025e83
   1f0bc:	00025e68 	.word	0x00025e68
   1f0c0:	000255f3 	.word	0x000255f3
   1f0c4:	00025ea0 	.word	0x00025ea0
   1f0c8:	00025ed5 	.word	0x00025ed5
   1f0cc:	00025ee4 	.word	0x00025ee4

0001f0d0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1f0d0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1f0d2:	4d0b      	ldr	r5, [pc, #44]	; (1f100 <idle+0x30>)
	__asm__ volatile(
   1f0d4:	f04f 0220 	mov.w	r2, #32
   1f0d8:	f3ef 8311 	mrs	r3, BASEPRI
   1f0dc:	f382 8811 	msr	BASEPRI, r2
   1f0e0:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   1f0e4:	f002 fb8c 	bl	21800 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f0e8:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   1f0ea:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f0ec:	2802      	cmp	r0, #2
   1f0ee:	bfd8      	it	le
   1f0f0:	4608      	movle	r0, r1
   1f0f2:	f002 fbcb 	bl	2188c <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1f0f6:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	z_arch_cpu_idle();
   1f0f8:	f7ee fd72 	bl	dbe0 <z_arch_cpu_idle>
   1f0fc:	e7ea      	b.n	1f0d4 <idle+0x4>
   1f0fe:	bf00      	nop
   1f100:	20025ab4 	.word	0x20025ab4

0001f104 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1f104:	4802      	ldr	r0, [pc, #8]	; (1f110 <z_bss_zero+0xc>)
   1f106:	4a03      	ldr	r2, [pc, #12]	; (1f114 <z_bss_zero+0x10>)
   1f108:	2100      	movs	r1, #0
   1f10a:	1a12      	subs	r2, r2, r0
   1f10c:	f003 bfda 	b.w	230c4 <memset>
   1f110:	20020000 	.word	0x20020000
   1f114:	20026d48 	.word	0x20026d48

0001f118 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1f118:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1f11a:	4806      	ldr	r0, [pc, #24]	; (1f134 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1f11c:	4a06      	ldr	r2, [pc, #24]	; (1f138 <z_data_copy+0x20>)
   1f11e:	4907      	ldr	r1, [pc, #28]	; (1f13c <z_data_copy+0x24>)
   1f120:	1a12      	subs	r2, r2, r0
   1f122:	f003 ffa5 	bl	23070 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1f126:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1f12a:	4a05      	ldr	r2, [pc, #20]	; (1f140 <z_data_copy+0x28>)
   1f12c:	4905      	ldr	r1, [pc, #20]	; (1f144 <z_data_copy+0x2c>)
   1f12e:	4806      	ldr	r0, [pc, #24]	; (1f148 <z_data_copy+0x30>)
   1f130:	f003 bf9e 	b.w	23070 <memcpy>
   1f134:	2002a1cc 	.word	0x2002a1cc
   1f138:	2002a3fc 	.word	0x2002a3fc
   1f13c:	000265e8 	.word	0x000265e8
   1f140:	00000000 	.word	0x00000000
   1f144:	000265e8 	.word	0x000265e8
   1f148:	20020000 	.word	0x20020000

0001f14c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1f14c:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1f14e:	2002      	movs	r0, #2
   1f150:	f7ff ff42 	bl	1efd8 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   1f154:	4807      	ldr	r0, [pc, #28]	; (1f174 <bg_thread_main+0x28>)
   1f156:	f003 fdea 	bl	22d2e <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   1f15a:	2003      	movs	r0, #3
   1f15c:	f7ff ff3c 	bl	1efd8 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   1f160:	f002 f976 	bl	21450 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1f164:	f7ee f920 	bl	d3a8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1f168:	4a03      	ldr	r2, [pc, #12]	; (1f178 <bg_thread_main+0x2c>)
   1f16a:	7b13      	ldrb	r3, [r2, #12]
   1f16c:	f023 0301 	bic.w	r3, r3, #1
   1f170:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1f172:	bd08      	pop	{r3, pc}
   1f174:	00025f15 	.word	0x00025f15
   1f178:	20021994 	.word	0x20021994

0001f17c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1f17c:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   1f17e:	4b34      	ldr	r3, [pc, #208]	; (1f250 <z_cstart+0xd4>)
   1f180:	b0b2      	sub	sp, #200	; 0xc8
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1f182:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1f186:	2400      	movs	r4, #0
   1f188:	23e0      	movs	r3, #224	; 0xe0
   1f18a:	4d32      	ldr	r5, [pc, #200]	; (1f254 <z_cstart+0xd8>)

	/* perform any architecture-specific initialization */
	z_arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   1f18c:	2701      	movs	r7, #1
   1f18e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1f192:	77ec      	strb	r4, [r5, #31]
   1f194:	762c      	strb	r4, [r5, #24]
   1f196:	766c      	strb	r4, [r5, #25]
   1f198:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1f19a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   1f19c:	4e2e      	ldr	r6, [pc, #184]	; (1f258 <z_cstart+0xdc>)
   1f19e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1f1a2:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void z_arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1f1a4:	f7ee ff3c 	bl	e020 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1f1a8:	f7ee fd14 	bl	dbd4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1f1ac:	f04f 33ff 	mov.w	r3, #4294967295
   1f1b0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1f1b2:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   1f1b4:	ab06      	add	r3, sp, #24
   1f1b6:	22b0      	movs	r2, #176	; 0xb0
   1f1b8:	4621      	mov	r1, r4
   1f1ba:	4618      	mov	r0, r3
   1f1bc:	f003 ff82 	bl	230c4 <memset>
	_current = &dummy_thread;
   1f1c0:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1f1c2:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   1f1c4:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1f1c8:	f7ff ff06 	bl	1efd8 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1f1cc:	4638      	mov	r0, r7
   1f1ce:	f7ff ff03 	bl	1efd8 <z_sys_device_do_config_level>
	_kernel.ready_q.cache = &z_main_thread;
   1f1d2:	4d22      	ldr	r5, [pc, #136]	; (1f25c <z_cstart+0xe0>)
	z_sched_init();
   1f1d4:	f001 fdbe 	bl	20d54 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1f1d8:	4b21      	ldr	r3, [pc, #132]	; (1f260 <z_cstart+0xe4>)
   1f1da:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   1f1de:	e9cd 7304 	strd	r7, r3, [sp, #16]
   1f1e2:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1f1e6:	4b1f      	ldr	r3, [pc, #124]	; (1f264 <z_cstart+0xe8>)
   1f1e8:	e9cd 4400 	strd	r4, r4, [sp]
   1f1ec:	491e      	ldr	r1, [pc, #120]	; (1f268 <z_cstart+0xec>)
   1f1ee:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   1f1f0:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1f1f2:	f002 f83d 	bl	21270 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f1f6:	7b6b      	ldrb	r3, [r5, #13]
   1f1f8:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1f1fc:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f200:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1f202:	d104      	bne.n	1f20e <z_cstart+0x92>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   1f204:	69ab      	ldr	r3, [r5, #24]
   1f206:	b913      	cbnz	r3, 1f20e <z_cstart+0x92>
		z_add_thread_to_ready_q(thread);
   1f208:	4628      	mov	r0, r5
   1f20a:	f001 f9ad 	bl	20568 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   1f20e:	4b17      	ldr	r3, [pc, #92]	; (1f26c <z_cstart+0xf0>)
   1f210:	2201      	movs	r2, #1
   1f212:	9305      	str	r3, [sp, #20]
   1f214:	230f      	movs	r3, #15
   1f216:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1f21a:	2300      	movs	r3, #0
   1f21c:	4d14      	ldr	r5, [pc, #80]	; (1f270 <z_cstart+0xf4>)
   1f21e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1f222:	9300      	str	r3, [sp, #0]
   1f224:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1f228:	4b12      	ldr	r3, [pc, #72]	; (1f274 <z_cstart+0xf8>)
   1f22a:	4913      	ldr	r1, [pc, #76]	; (1f278 <z_cstart+0xfc>)
   1f22c:	4628      	mov	r0, r5
   1f22e:	f002 f81f 	bl	21270 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f232:	7b6b      	ldrb	r3, [r5, #13]
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1f234:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   1f238:	f023 0304 	bic.w	r3, r3, #4
   1f23c:	736b      	strb	r3, [r5, #13]
	list->head = (sys_dnode_t *)list;
   1f23e:	4b0f      	ldr	r3, [pc, #60]	; (1f27c <z_cstart+0x100>)
   1f240:	4909      	ldr	r1, [pc, #36]	; (1f268 <z_cstart+0xec>)
	list->tail = (sys_dnode_t *)list;
   1f242:	e9c6 3306 	strd	r3, r3, [r6, #24]
   1f246:	4805      	ldr	r0, [pc, #20]	; (1f25c <z_cstart+0xe0>)
   1f248:	4b06      	ldr	r3, [pc, #24]	; (1f264 <z_cstart+0xe8>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   1f24a:	60f5      	str	r5, [r6, #12]
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1f24c:	f7ee fdc2 	bl	ddd4 <z_arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1f250:	20028888 	.word	0x20028888
   1f254:	e000ed00 	.word	0xe000ed00
   1f258:	20025ab4 	.word	0x20025ab4
   1f25c:	20021994 	.word	0x20021994
   1f260:	00025f5c 	.word	0x00025f5c
   1f264:	0001f14d 	.word	0x0001f14d
   1f268:	20027348 	.word	0x20027348
   1f26c:	00025f61 	.word	0x00025f61
   1f270:	200218e4 	.word	0x200218e4
   1f274:	0001f0d1 	.word	0x0001f0d1
   1f278:	20027f48 	.word	0x20027f48
   1f27c:	20025acc 	.word	0x20025acc

0001f280 <create_free_list>:
{
	u32_t j;
	char *p;

	/* blocks must be word aligned */
	__ASSERT(((slab->block_size | (uintptr_t)slab->buffer)
   1f280:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   1f284:	4313      	orrs	r3, r2
   1f286:	079b      	lsls	r3, r3, #30
{
   1f288:	b510      	push	{r4, lr}
   1f28a:	4604      	mov	r4, r0
	__ASSERT(((slab->block_size | (uintptr_t)slab->buffer)
   1f28c:	d00d      	beq.n	1f2aa <create_free_list+0x2a>
   1f28e:	2327      	movs	r3, #39	; 0x27
   1f290:	4a0d      	ldr	r2, [pc, #52]	; (1f2c8 <create_free_list+0x48>)
   1f292:	490e      	ldr	r1, [pc, #56]	; (1f2cc <create_free_list+0x4c>)
   1f294:	480e      	ldr	r0, [pc, #56]	; (1f2d0 <create_free_list+0x50>)
   1f296:	f003 fd4a 	bl	22d2e <printk>
   1f29a:	4621      	mov	r1, r4
   1f29c:	480d      	ldr	r0, [pc, #52]	; (1f2d4 <create_free_list+0x54>)
   1f29e:	f003 fd46 	bl	22d2e <printk>
   1f2a2:	2127      	movs	r1, #39	; 0x27
   1f2a4:	4808      	ldr	r0, [pc, #32]	; (1f2c8 <create_free_list+0x48>)
   1f2a6:	f003 fd4f 	bl	22d48 <assert_post_action>
					& (sizeof(void *) - 1)) == 0,
		 "slab at %p not word aligned", slab);

	slab->free_list = NULL;
   1f2aa:	2300      	movs	r3, #0
	p = slab->buffer;
   1f2ac:	6922      	ldr	r2, [r4, #16]

	for (j = 0U; j < slab->num_blocks; j++) {
   1f2ae:	68a1      	ldr	r1, [r4, #8]
	slab->free_list = NULL;
   1f2b0:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1f2b2:	4299      	cmp	r1, r3
   1f2b4:	d100      	bne.n	1f2b8 <create_free_list+0x38>
		*(char **)p = slab->free_list;
		slab->free_list = p;
		p += slab->block_size;
	}
}
   1f2b6:	bd10      	pop	{r4, pc}
		*(char **)p = slab->free_list;
   1f2b8:	6960      	ldr	r0, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1f2ba:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   1f2bc:	6010      	str	r0, [r2, #0]
		p += slab->block_size;
   1f2be:	68e0      	ldr	r0, [r4, #12]
		slab->free_list = p;
   1f2c0:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   1f2c2:	4402      	add	r2, r0
   1f2c4:	e7f5      	b.n	1f2b2 <create_free_list+0x32>
   1f2c6:	bf00      	nop
   1f2c8:	00025f66 	.word	0x00025f66
   1f2cc:	00025f84 	.word	0x00025f84
   1f2d0:	000255f3 	.word	0x000255f3
   1f2d4:	00025fcf 	.word	0x00025fcf

0001f2d8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   1f2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f2da:	4d0e      	ldr	r5, [pc, #56]	; (1f314 <init_mem_slab_module+0x3c>)
   1f2dc:	4c0e      	ldr	r4, [pc, #56]	; (1f318 <init_mem_slab_module+0x40>)
   1f2de:	462f      	mov	r7, r5
   1f2e0:	4e0e      	ldr	r6, [pc, #56]	; (1f31c <init_mem_slab_module+0x44>)
   1f2e2:	42ac      	cmp	r4, r5
   1f2e4:	d90c      	bls.n	1f300 <init_mem_slab_module+0x28>
   1f2e6:	490e      	ldr	r1, [pc, #56]	; (1f320 <init_mem_slab_module+0x48>)
   1f2e8:	233e      	movs	r3, #62	; 0x3e
   1f2ea:	4632      	mov	r2, r6
   1f2ec:	480d      	ldr	r0, [pc, #52]	; (1f324 <init_mem_slab_module+0x4c>)
   1f2ee:	f003 fd1e 	bl	22d2e <printk>
   1f2f2:	480d      	ldr	r0, [pc, #52]	; (1f328 <init_mem_slab_module+0x50>)
   1f2f4:	f003 fd1b 	bl	22d2e <printk>
   1f2f8:	213e      	movs	r1, #62	; 0x3e
   1f2fa:	4630      	mov	r0, r6
   1f2fc:	f003 fd24 	bl	22d48 <assert_post_action>
   1f300:	42bc      	cmp	r4, r7
   1f302:	d301      	bcc.n	1f308 <init_mem_slab_module+0x30>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   1f304:	2000      	movs	r0, #0
   1f306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		create_free_list(slab);
   1f308:	4620      	mov	r0, r4
   1f30a:	f7ff ffb9 	bl	1f280 <create_free_list>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f30e:	341c      	adds	r4, #28
   1f310:	e7e7      	b.n	1f2e2 <init_mem_slab_module+0xa>
   1f312:	bf00      	nop
   1f314:	2002a31c 	.word	0x2002a31c
   1f318:	2002a300 	.word	0x2002a300
   1f31c:	00025f66 	.word	0x00025f66
   1f320:	00025fed 	.word	0x00025fed
   1f324:	000255f3 	.word	0x000255f3
   1f328:	0002600a 	.word	0x0002600a

0001f32c <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   1f32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f32e:	4604      	mov	r4, r0
   1f330:	460d      	mov	r5, r1
   1f332:	4616      	mov	r6, r2
   1f334:	f04f 0320 	mov.w	r3, #32
   1f338:	f3ef 8711 	mrs	r7, BASEPRI
   1f33c:	f383 8811 	msr	BASEPRI, r3
   1f340:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1f344:	4822      	ldr	r0, [pc, #136]	; (1f3d0 <k_mem_slab_alloc+0xa4>)
   1f346:	f001 ffab 	bl	212a0 <z_spin_lock_valid>
   1f34a:	b960      	cbnz	r0, 1f366 <k_mem_slab_alloc+0x3a>
   1f34c:	4921      	ldr	r1, [pc, #132]	; (1f3d4 <k_mem_slab_alloc+0xa8>)
   1f34e:	235f      	movs	r3, #95	; 0x5f
   1f350:	4a21      	ldr	r2, [pc, #132]	; (1f3d8 <k_mem_slab_alloc+0xac>)
   1f352:	4822      	ldr	r0, [pc, #136]	; (1f3dc <k_mem_slab_alloc+0xb0>)
   1f354:	f003 fceb 	bl	22d2e <printk>
   1f358:	4821      	ldr	r0, [pc, #132]	; (1f3e0 <k_mem_slab_alloc+0xb4>)
   1f35a:	f003 fce8 	bl	22d2e <printk>
   1f35e:	215f      	movs	r1, #95	; 0x5f
   1f360:	481d      	ldr	r0, [pc, #116]	; (1f3d8 <k_mem_slab_alloc+0xac>)
   1f362:	f003 fcf1 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f366:	481a      	ldr	r0, [pc, #104]	; (1f3d0 <k_mem_slab_alloc+0xa4>)
   1f368:	f001 ffb8 	bl	212dc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1f36c:	6963      	ldr	r3, [r4, #20]
   1f36e:	b1e3      	cbz	r3, 1f3aa <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
   1f370:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   1f372:	681b      	ldr	r3, [r3, #0]
   1f374:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   1f376:	69a3      	ldr	r3, [r4, #24]
   1f378:	3301      	adds	r3, #1
   1f37a:	61a3      	str	r3, [r4, #24]
		result = 0;
   1f37c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1f37e:	4814      	ldr	r0, [pc, #80]	; (1f3d0 <k_mem_slab_alloc+0xa4>)
   1f380:	f001 ff9c 	bl	212bc <z_spin_unlock_valid>
   1f384:	b960      	cbnz	r0, 1f3a0 <k_mem_slab_alloc+0x74>
   1f386:	4917      	ldr	r1, [pc, #92]	; (1f3e4 <k_mem_slab_alloc+0xb8>)
   1f388:	2372      	movs	r3, #114	; 0x72
   1f38a:	4a13      	ldr	r2, [pc, #76]	; (1f3d8 <k_mem_slab_alloc+0xac>)
   1f38c:	4813      	ldr	r0, [pc, #76]	; (1f3dc <k_mem_slab_alloc+0xb0>)
   1f38e:	f003 fcce 	bl	22d2e <printk>
   1f392:	4815      	ldr	r0, [pc, #84]	; (1f3e8 <k_mem_slab_alloc+0xbc>)
   1f394:	f003 fccb 	bl	22d2e <printk>
   1f398:	2172      	movs	r1, #114	; 0x72
   1f39a:	480f      	ldr	r0, [pc, #60]	; (1f3d8 <k_mem_slab_alloc+0xac>)
   1f39c:	f003 fcd4 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   1f3a0:	f387 8811 	msr	BASEPRI, r7
   1f3a4:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1f3a8:	e010      	b.n	1f3cc <k_mem_slab_alloc+0xa0>
	} else if (timeout == K_NO_WAIT) {
   1f3aa:	b91e      	cbnz	r6, 1f3b4 <k_mem_slab_alloc+0x88>
		*mem = NULL;
   1f3ac:	602e      	str	r6, [r5, #0]
		result = -ENOMEM;
   1f3ae:	f06f 040b 	mvn.w	r4, #11
   1f3b2:	e7e4      	b.n	1f37e <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1f3b4:	4622      	mov	r2, r4
   1f3b6:	4633      	mov	r3, r6
   1f3b8:	4639      	mov	r1, r7
   1f3ba:	4805      	ldr	r0, [pc, #20]	; (1f3d0 <k_mem_slab_alloc+0xa4>)
   1f3bc:	f001 fb84 	bl	20ac8 <z_pend_curr>
		if (result == 0) {
   1f3c0:	4604      	mov	r4, r0
   1f3c2:	b918      	cbnz	r0, 1f3cc <k_mem_slab_alloc+0xa0>
			*mem = _current->base.swap_data;
   1f3c4:	4b09      	ldr	r3, [pc, #36]	; (1f3ec <k_mem_slab_alloc+0xc0>)
   1f3c6:	689b      	ldr	r3, [r3, #8]
   1f3c8:	695b      	ldr	r3, [r3, #20]
   1f3ca:	602b      	str	r3, [r5, #0]
}
   1f3cc:	4620      	mov	r0, r4
   1f3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f3d0:	20021a44 	.word	0x20021a44
   1f3d4:	0002576e 	.word	0x0002576e
   1f3d8:	0002574f 	.word	0x0002574f
   1f3dc:	000255f3 	.word	0x000255f3
   1f3e0:	00025783 	.word	0x00025783
   1f3e4:	00025798 	.word	0x00025798
   1f3e8:	000257af 	.word	0x000257af
   1f3ec:	20025ab4 	.word	0x20025ab4

0001f3f0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1f3f0:	b570      	push	{r4, r5, r6, lr}
   1f3f2:	4604      	mov	r4, r0
   1f3f4:	460d      	mov	r5, r1
	__asm__ volatile(
   1f3f6:	f04f 0320 	mov.w	r3, #32
   1f3fa:	f3ef 8611 	mrs	r6, BASEPRI
   1f3fe:	f383 8811 	msr	BASEPRI, r3
   1f402:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1f406:	4823      	ldr	r0, [pc, #140]	; (1f494 <k_mem_slab_free+0xa4>)
   1f408:	f001 ff4a 	bl	212a0 <z_spin_lock_valid>
   1f40c:	b960      	cbnz	r0, 1f428 <k_mem_slab_free+0x38>
   1f40e:	4922      	ldr	r1, [pc, #136]	; (1f498 <k_mem_slab_free+0xa8>)
   1f410:	235f      	movs	r3, #95	; 0x5f
   1f412:	4a22      	ldr	r2, [pc, #136]	; (1f49c <k_mem_slab_free+0xac>)
   1f414:	4822      	ldr	r0, [pc, #136]	; (1f4a0 <k_mem_slab_free+0xb0>)
   1f416:	f003 fc8a 	bl	22d2e <printk>
   1f41a:	4822      	ldr	r0, [pc, #136]	; (1f4a4 <k_mem_slab_free+0xb4>)
   1f41c:	f003 fc87 	bl	22d2e <printk>
   1f420:	215f      	movs	r1, #95	; 0x5f
   1f422:	481e      	ldr	r0, [pc, #120]	; (1f49c <k_mem_slab_free+0xac>)
   1f424:	f003 fc90 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f428:	481a      	ldr	r0, [pc, #104]	; (1f494 <k_mem_slab_free+0xa4>)
   1f42a:	f001 ff57 	bl	212dc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1f42e:	4620      	mov	r0, r4
   1f430:	f001 fc04 	bl	20c3c <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1f434:	b180      	cbz	r0, 1f458 <k_mem_slab_free+0x68>
}

static ALWAYS_INLINE void
z_arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1f436:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1f438:	682a      	ldr	r2, [r5, #0]
   1f43a:	6681      	str	r1, [r0, #104]	; 0x68
	thread->base.swap_data = data;
   1f43c:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1f43e:	7b42      	ldrb	r2, [r0, #13]
   1f440:	06d2      	lsls	r2, r2, #27
   1f442:	d103      	bne.n	1f44c <k_mem_slab_free+0x5c>
	if (z_is_thread_ready(thread)) {
   1f444:	6983      	ldr	r3, [r0, #24]
   1f446:	b90b      	cbnz	r3, 1f44c <k_mem_slab_free+0x5c>
		z_add_thread_to_ready_q(thread);
   1f448:	f001 f88e 	bl	20568 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   1f44c:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1f44e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1f452:	4810      	ldr	r0, [pc, #64]	; (1f494 <k_mem_slab_free+0xa4>)
   1f454:	f000 be94 	b.w	20180 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1f458:	682b      	ldr	r3, [r5, #0]
   1f45a:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1f45c:	480d      	ldr	r0, [pc, #52]	; (1f494 <k_mem_slab_free+0xa4>)
   1f45e:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1f460:	682b      	ldr	r3, [r5, #0]
   1f462:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1f464:	69a3      	ldr	r3, [r4, #24]
   1f466:	3b01      	subs	r3, #1
   1f468:	61a3      	str	r3, [r4, #24]
   1f46a:	f001 ff27 	bl	212bc <z_spin_unlock_valid>
   1f46e:	b960      	cbnz	r0, 1f48a <k_mem_slab_free+0x9a>
   1f470:	490d      	ldr	r1, [pc, #52]	; (1f4a8 <k_mem_slab_free+0xb8>)
   1f472:	2372      	movs	r3, #114	; 0x72
   1f474:	4a09      	ldr	r2, [pc, #36]	; (1f49c <k_mem_slab_free+0xac>)
   1f476:	480a      	ldr	r0, [pc, #40]	; (1f4a0 <k_mem_slab_free+0xb0>)
   1f478:	f003 fc59 	bl	22d2e <printk>
   1f47c:	480b      	ldr	r0, [pc, #44]	; (1f4ac <k_mem_slab_free+0xbc>)
   1f47e:	f003 fc56 	bl	22d2e <printk>
   1f482:	2172      	movs	r1, #114	; 0x72
   1f484:	4805      	ldr	r0, [pc, #20]	; (1f49c <k_mem_slab_free+0xac>)
   1f486:	f003 fc5f 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   1f48a:	f386 8811 	msr	BASEPRI, r6
   1f48e:	f3bf 8f6f 	isb	sy
}
   1f492:	bd70      	pop	{r4, r5, r6, pc}
   1f494:	20021a44 	.word	0x20021a44
   1f498:	0002576e 	.word	0x0002576e
   1f49c:	0002574f 	.word	0x0002574f
   1f4a0:	000255f3 	.word	0x000255f3
   1f4a4:	00025783 	.word	0x00025783
   1f4a8:	00025798 	.word	0x00025798
   1f4ac:	000257af 	.word	0x000257af

0001f4b0 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   1f4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1f4b2:	4d10      	ldr	r5, [pc, #64]	; (1f4f4 <init_static_pools+0x44>)
   1f4b4:	4c10      	ldr	r4, [pc, #64]	; (1f4f8 <init_static_pools+0x48>)
   1f4b6:	462f      	mov	r7, r5
   1f4b8:	4e10      	ldr	r6, [pc, #64]	; (1f4fc <init_static_pools+0x4c>)
   1f4ba:	42ac      	cmp	r4, r5
   1f4bc:	d90c      	bls.n	1f4d8 <init_static_pools+0x28>
   1f4be:	4910      	ldr	r1, [pc, #64]	; (1f500 <init_static_pools+0x50>)
   1f4c0:	2328      	movs	r3, #40	; 0x28
   1f4c2:	4632      	mov	r2, r6
   1f4c4:	480f      	ldr	r0, [pc, #60]	; (1f504 <init_static_pools+0x54>)
   1f4c6:	f003 fc32 	bl	22d2e <printk>
   1f4ca:	480f      	ldr	r0, [pc, #60]	; (1f508 <init_static_pools+0x58>)
   1f4cc:	f003 fc2f 	bl	22d2e <printk>
   1f4d0:	2128      	movs	r1, #40	; 0x28
   1f4d2:	4630      	mov	r0, r6
   1f4d4:	f003 fc38 	bl	22d48 <assert_post_action>
   1f4d8:	42bc      	cmp	r4, r7
   1f4da:	d301      	bcc.n	1f4e0 <init_static_pools+0x30>
		k_mem_pool_init(p);
	}

	return 0;
}
   1f4dc:	2000      	movs	r0, #0
   1f4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1f4e0:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   1f4e4:	4620      	mov	r0, r4
   1f4e6:	e9c4 3305 	strd	r3, r3, [r4, #20]
   1f4ea:	f003 f983 	bl	227f4 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1f4ee:	341c      	adds	r4, #28
   1f4f0:	e7e3      	b.n	1f4ba <init_static_pools+0xa>
   1f4f2:	bf00      	nop
   1f4f4:	2002a338 	.word	0x2002a338
   1f4f8:	2002a31c 	.word	0x2002a31c
   1f4fc:	00026029 	.word	0x00026029
   1f500:	00026046 	.word	0x00026046
   1f504:	000255f3 	.word	0x000255f3
   1f508:	0002600a 	.word	0x0002600a

0001f50c <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   1f50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f510:	4607      	mov	r7, r0
   1f512:	b085      	sub	sp, #20
   1f514:	460d      	mov	r5, r1
   1f516:	4692      	mov	sl, r2
   1f518:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1f51a:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   1f51e:	2b0d      	cmp	r3, #13
   1f520:	d805      	bhi.n	1f52e <k_mem_pool_alloc+0x22>
   1f522:	2b00      	cmp	r3, #0
   1f524:	d04c      	beq.n	1f5c0 <k_mem_pool_alloc+0xb4>
   1f526:	4b2a      	ldr	r3, [pc, #168]	; (1f5d0 <k_mem_pool_alloc+0xc4>)
   1f528:	685b      	ldr	r3, [r3, #4]
   1f52a:	051a      	lsls	r2, r3, #20
   1f52c:	d448      	bmi.n	1f5c0 <k_mem_pool_alloc+0xb4>
	int ret;
	s64_t end = 0;

	__ASSERT(!(z_arch_is_in_isr() && timeout != K_NO_WAIT), "");
   1f52e:	2c00      	cmp	r4, #0
   1f530:	d139      	bne.n	1f5a6 <k_mem_pool_alloc+0x9a>
	s64_t end = 0;
   1f532:	f04f 0800 	mov.w	r8, #0
	return pool - &_k_mem_pool_list_start[0];
   1f536:	4b27      	ldr	r3, [pc, #156]	; (1f5d4 <k_mem_pool_alloc+0xc8>)
   1f538:	4e27      	ldr	r6, [pc, #156]	; (1f5d8 <k_mem_pool_alloc+0xcc>)
   1f53a:	1afb      	subs	r3, r7, r3
   1f53c:	109b      	asrs	r3, r3, #2
   1f53e:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   1f540:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   1f544:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   1f546:	ab03      	add	r3, sp, #12
   1f548:	aa02      	add	r2, sp, #8
   1f54a:	9500      	str	r5, [sp, #0]
   1f54c:	4651      	mov	r1, sl
   1f54e:	4638      	mov	r0, r7
   1f550:	f003 f996 	bl	22880 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   1f554:	796b      	ldrb	r3, [r5, #5]
   1f556:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   1f558:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   1f55a:	f362 0303 	bfi	r3, r2, #0, #4
   1f55e:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   1f560:	686b      	ldr	r3, [r5, #4]
   1f562:	9a03      	ldr	r2, [sp, #12]
   1f564:	f362 331f 	bfi	r3, r2, #12, #20
   1f568:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   1f56a:	b1c8      	cbz	r0, 1f5a0 <k_mem_pool_alloc+0x94>
   1f56c:	b1c4      	cbz	r4, 1f5a0 <k_mem_pool_alloc+0x94>
   1f56e:	f110 0f0c 	cmn.w	r0, #12
   1f572:	d115      	bne.n	1f5a0 <k_mem_pool_alloc+0x94>
	__asm__ volatile(
   1f574:	f04f 0320 	mov.w	r3, #32
   1f578:	f3ef 8011 	mrs	r0, BASEPRI
   1f57c:	f383 8811 	msr	BASEPRI, r3
   1f580:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(z_arch_irq_lock(), wait_q, timeout);
   1f584:	4622      	mov	r2, r4
   1f586:	4659      	mov	r1, fp
   1f588:	f001 fa46 	bl	20a18 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   1f58c:	1c63      	adds	r3, r4, #1
   1f58e:	d0da      	beq.n	1f546 <k_mem_pool_alloc+0x3a>
	return z_impl_k_uptime_get();
   1f590:	f004 fc9e 	bl	23ed0 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   1f594:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   1f598:	2c00      	cmp	r4, #0
   1f59a:	dcd4      	bgt.n	1f546 <k_mem_pool_alloc+0x3a>
				break;
			}
		}
	}

	return -EAGAIN;
   1f59c:	f06f 000a 	mvn.w	r0, #10
}
   1f5a0:	b005      	add	sp, #20
   1f5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(!(z_arch_is_in_isr() && timeout != K_NO_WAIT), "");
   1f5a6:	490d      	ldr	r1, [pc, #52]	; (1f5dc <k_mem_pool_alloc+0xd0>)
   1f5a8:	2337      	movs	r3, #55	; 0x37
   1f5aa:	4a0d      	ldr	r2, [pc, #52]	; (1f5e0 <k_mem_pool_alloc+0xd4>)
   1f5ac:	480d      	ldr	r0, [pc, #52]	; (1f5e4 <k_mem_pool_alloc+0xd8>)
   1f5ae:	f003 fbbe 	bl	22d2e <printk>
   1f5b2:	480d      	ldr	r0, [pc, #52]	; (1f5e8 <k_mem_pool_alloc+0xdc>)
   1f5b4:	f003 fbbb 	bl	22d2e <printk>
   1f5b8:	2137      	movs	r1, #55	; 0x37
   1f5ba:	4809      	ldr	r0, [pc, #36]	; (1f5e0 <k_mem_pool_alloc+0xd4>)
   1f5bc:	f003 fbc4 	bl	22d48 <assert_post_action>
	if (timeout > 0) {
   1f5c0:	2c00      	cmp	r4, #0
   1f5c2:	ddb6      	ble.n	1f532 <k_mem_pool_alloc+0x26>
   1f5c4:	f004 fc84 	bl	23ed0 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   1f5c8:	eb10 0804 	adds.w	r8, r0, r4
   1f5cc:	e7b3      	b.n	1f536 <k_mem_pool_alloc+0x2a>
   1f5ce:	bf00      	nop
   1f5d0:	e000ed00 	.word	0xe000ed00
   1f5d4:	2002a31c 	.word	0x2002a31c
   1f5d8:	b6db6db7 	.word	0xb6db6db7
   1f5dc:	00026060 	.word	0x00026060
   1f5e0:	00026029 	.word	0x00026029
   1f5e4:	000255f3 	.word	0x000255f3
   1f5e8:	00026086 	.word	0x00026086

0001f5ec <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   1f5ec:	b570      	push	{r4, r5, r6, lr}
   1f5ee:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   1f5f0:	6802      	ldr	r2, [r0, #0]
   1f5f2:	7841      	ldrb	r1, [r0, #1]
   1f5f4:	4d23      	ldr	r5, [pc, #140]	; (1f684 <k_mem_pool_free_id+0x98>)
   1f5f6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1f5fa:	00a4      	lsls	r4, r4, #2
   1f5fc:	0b12      	lsrs	r2, r2, #12
   1f5fe:	f001 010f 	and.w	r1, r1, #15
   1f602:	1928      	adds	r0, r5, r4
   1f604:	f7ed fed6 	bl	d3b4 <z_sys_mem_pool_block_free>
   1f608:	f04f 0320 	mov.w	r3, #32
   1f60c:	f3ef 8611 	mrs	r6, BASEPRI
   1f610:	f383 8811 	msr	BASEPRI, r3
   1f614:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1f618:	481b      	ldr	r0, [pc, #108]	; (1f688 <k_mem_pool_free_id+0x9c>)
   1f61a:	f001 fe41 	bl	212a0 <z_spin_lock_valid>
   1f61e:	b960      	cbnz	r0, 1f63a <k_mem_pool_free_id+0x4e>
   1f620:	491a      	ldr	r1, [pc, #104]	; (1f68c <k_mem_pool_free_id+0xa0>)
   1f622:	235f      	movs	r3, #95	; 0x5f
   1f624:	4a1a      	ldr	r2, [pc, #104]	; (1f690 <k_mem_pool_free_id+0xa4>)
   1f626:	481b      	ldr	r0, [pc, #108]	; (1f694 <k_mem_pool_free_id+0xa8>)
   1f628:	f003 fb81 	bl	22d2e <printk>
   1f62c:	481a      	ldr	r0, [pc, #104]	; (1f698 <k_mem_pool_free_id+0xac>)
   1f62e:	f003 fb7e 	bl	22d2e <printk>
   1f632:	215f      	movs	r1, #95	; 0x5f
   1f634:	4816      	ldr	r0, [pc, #88]	; (1f690 <k_mem_pool_free_id+0xa4>)
   1f636:	f003 fb87 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f63a:	4813      	ldr	r0, [pc, #76]	; (1f688 <k_mem_pool_free_id+0x9c>)
   1f63c:	f001 fe4e 	bl	212dc <z_spin_lock_set_owner>
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   1f640:	f104 0014 	add.w	r0, r4, #20
   1f644:	4428      	add	r0, r5
   1f646:	f004 fbdd 	bl	23e04 <z_unpend_all>

	if (need_sched != 0) {
   1f64a:	b128      	cbz	r0, 1f658 <k_mem_pool_free_id+0x6c>
		z_reschedule(&lock, key);
   1f64c:	4631      	mov	r1, r6
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1f64e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1f652:	480d      	ldr	r0, [pc, #52]	; (1f688 <k_mem_pool_free_id+0x9c>)
   1f654:	f000 bd94 	b.w	20180 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1f658:	480b      	ldr	r0, [pc, #44]	; (1f688 <k_mem_pool_free_id+0x9c>)
   1f65a:	f001 fe2f 	bl	212bc <z_spin_unlock_valid>
   1f65e:	b960      	cbnz	r0, 1f67a <k_mem_pool_free_id+0x8e>
   1f660:	490e      	ldr	r1, [pc, #56]	; (1f69c <k_mem_pool_free_id+0xb0>)
   1f662:	2372      	movs	r3, #114	; 0x72
   1f664:	4a0a      	ldr	r2, [pc, #40]	; (1f690 <k_mem_pool_free_id+0xa4>)
   1f666:	480b      	ldr	r0, [pc, #44]	; (1f694 <k_mem_pool_free_id+0xa8>)
   1f668:	f003 fb61 	bl	22d2e <printk>
   1f66c:	480c      	ldr	r0, [pc, #48]	; (1f6a0 <k_mem_pool_free_id+0xb4>)
   1f66e:	f003 fb5e 	bl	22d2e <printk>
   1f672:	2172      	movs	r1, #114	; 0x72
   1f674:	4806      	ldr	r0, [pc, #24]	; (1f690 <k_mem_pool_free_id+0xa4>)
   1f676:	f003 fb67 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   1f67a:	f386 8811 	msr	BASEPRI, r6
   1f67e:	f3bf 8f6f 	isb	sy
}
   1f682:	bd70      	pop	{r4, r5, r6, pc}
   1f684:	2002a31c 	.word	0x2002a31c
   1f688:	20025aac 	.word	0x20025aac
   1f68c:	0002576e 	.word	0x0002576e
   1f690:	0002574f 	.word	0x0002574f
   1f694:	000255f3 	.word	0x000255f3
   1f698:	00025783 	.word	0x00025783
   1f69c:	00025798 	.word	0x00025798
   1f6a0:	000257af 	.word	0x000257af

0001f6a4 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   1f6a4:	4601      	mov	r1, r0
   1f6a6:	4801      	ldr	r0, [pc, #4]	; (1f6ac <k_malloc+0x8>)
   1f6a8:	f004 bb47 	b.w	23d3a <k_mem_pool_malloc>
   1f6ac:	2002a31c 	.word	0x2002a31c

0001f6b0 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   1f6b0:	4b03      	ldr	r3, [pc, #12]	; (1f6c0 <z_thread_malloc+0x10>)
{
   1f6b2:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   1f6b4:	689b      	ldr	r3, [r3, #8]
   1f6b6:	6e18      	ldr	r0, [r3, #96]	; 0x60
   1f6b8:	b108      	cbz	r0, 1f6be <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   1f6ba:	f004 bb3e 	b.w	23d3a <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1f6be:	4770      	bx	lr
   1f6c0:	20025ab4 	.word	0x20025ab4

0001f6c4 <z_impl_k_msgq_put>:
	}
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   1f6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f6c8:	4604      	mov	r4, r0
   1f6ca:	4688      	mov	r8, r1
   1f6cc:	4615      	mov	r5, r2
   1f6ce:	f3ef 8305 	mrs	r3, IPSR
   1f6d2:	2b0d      	cmp	r3, #13
   1f6d4:	d804      	bhi.n	1f6e0 <z_impl_k_msgq_put+0x1c>
   1f6d6:	b18b      	cbz	r3, 1f6fc <z_impl_k_msgq_put+0x38>
   1f6d8:	4b42      	ldr	r3, [pc, #264]	; (1f7e4 <z_impl_k_msgq_put+0x120>)
   1f6da:	685b      	ldr	r3, [r3, #4]
   1f6dc:	051a      	lsls	r2, r3, #20
   1f6de:	d40d      	bmi.n	1f6fc <z_impl_k_msgq_put+0x38>
	__ASSERT(!z_arch_is_in_isr() || timeout == K_NO_WAIT, "");
   1f6e0:	b165      	cbz	r5, 1f6fc <z_impl_k_msgq_put+0x38>
   1f6e2:	4941      	ldr	r1, [pc, #260]	; (1f7e8 <z_impl_k_msgq_put+0x124>)
   1f6e4:	2371      	movs	r3, #113	; 0x71
   1f6e6:	4a41      	ldr	r2, [pc, #260]	; (1f7ec <z_impl_k_msgq_put+0x128>)
   1f6e8:	4841      	ldr	r0, [pc, #260]	; (1f7f0 <z_impl_k_msgq_put+0x12c>)
   1f6ea:	f003 fb20 	bl	22d2e <printk>
   1f6ee:	4841      	ldr	r0, [pc, #260]	; (1f7f4 <z_impl_k_msgq_put+0x130>)
   1f6f0:	f003 fb1d 	bl	22d2e <printk>
   1f6f4:	2171      	movs	r1, #113	; 0x71
   1f6f6:	483d      	ldr	r0, [pc, #244]	; (1f7ec <z_impl_k_msgq_put+0x128>)
   1f6f8:	f003 fb26 	bl	22d48 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   1f6fc:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   1f700:	f04f 0320 	mov.w	r3, #32
   1f704:	f3ef 8711 	mrs	r7, BASEPRI
   1f708:	f383 8811 	msr	BASEPRI, r3
   1f70c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1f710:	4630      	mov	r0, r6
   1f712:	f001 fdc5 	bl	212a0 <z_spin_lock_valid>
   1f716:	b960      	cbnz	r0, 1f732 <z_impl_k_msgq_put+0x6e>
   1f718:	4937      	ldr	r1, [pc, #220]	; (1f7f8 <z_impl_k_msgq_put+0x134>)
   1f71a:	235f      	movs	r3, #95	; 0x5f
   1f71c:	4a37      	ldr	r2, [pc, #220]	; (1f7fc <z_impl_k_msgq_put+0x138>)
   1f71e:	4834      	ldr	r0, [pc, #208]	; (1f7f0 <z_impl_k_msgq_put+0x12c>)
   1f720:	f003 fb05 	bl	22d2e <printk>
   1f724:	4836      	ldr	r0, [pc, #216]	; (1f800 <z_impl_k_msgq_put+0x13c>)
   1f726:	f003 fb02 	bl	22d2e <printk>
   1f72a:	215f      	movs	r1, #95	; 0x5f
   1f72c:	4833      	ldr	r0, [pc, #204]	; (1f7fc <z_impl_k_msgq_put+0x138>)
   1f72e:	f003 fb0b 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f732:	4630      	mov	r0, r6
   1f734:	f001 fdd2 	bl	212dc <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   1f738:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1f73a:	6923      	ldr	r3, [r4, #16]
   1f73c:	429a      	cmp	r2, r3
   1f73e:	d241      	bcs.n	1f7c4 <z_impl_k_msgq_put+0x100>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1f740:	4620      	mov	r0, r4
   1f742:	f001 fa7b 	bl	20c3c <z_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   1f746:	68e2      	ldr	r2, [r4, #12]
		if (pending_thread != NULL) {
   1f748:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   1f74a:	4641      	mov	r1, r8
		if (pending_thread != NULL) {
   1f74c:	b1a0      	cbz	r0, 1f778 <z_impl_k_msgq_put+0xb4>
			(void)memcpy(pending_thread->base.swap_data, data,
   1f74e:	6940      	ldr	r0, [r0, #20]
   1f750:	f003 fc8e 	bl	23070 <memcpy>
   1f754:	2300      	movs	r3, #0
   1f756:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1f758:	7b6b      	ldrb	r3, [r5, #13]
   1f75a:	06db      	lsls	r3, r3, #27
   1f75c:	d104      	bne.n	1f768 <z_impl_k_msgq_put+0xa4>
	if (z_is_thread_ready(thread)) {
   1f75e:	69ab      	ldr	r3, [r5, #24]
   1f760:	b913      	cbnz	r3, 1f768 <z_impl_k_msgq_put+0xa4>
		z_add_thread_to_ready_q(thread);
   1f762:	4628      	mov	r0, r5
   1f764:	f000 ff00 	bl	20568 <z_add_thread_to_ready_q>
			       msgq->msg_size);
			/* wake up waiting thread */
			z_arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   1f768:	4639      	mov	r1, r7
   1f76a:	4630      	mov	r0, r6
   1f76c:	f000 fd08 	bl	20180 <z_reschedule>
			return 0;
   1f770:	2400      	movs	r4, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1f772:	4620      	mov	r0, r4
   1f774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   1f778:	6a20      	ldr	r0, [r4, #32]
   1f77a:	f003 fc79 	bl	23070 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   1f77e:	6a23      	ldr	r3, [r4, #32]
   1f780:	68e2      	ldr	r2, [r4, #12]
   1f782:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1f784:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   1f786:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   1f788:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1f78a:	bf04      	itt	eq
   1f78c:	6963      	ldreq	r3, [r4, #20]
   1f78e:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   1f790:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f792:	3301      	adds	r3, #1
   1f794:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   1f796:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1f798:	4630      	mov	r0, r6
   1f79a:	f001 fd8f 	bl	212bc <z_spin_unlock_valid>
   1f79e:	b960      	cbnz	r0, 1f7ba <z_impl_k_msgq_put+0xf6>
   1f7a0:	4918      	ldr	r1, [pc, #96]	; (1f804 <z_impl_k_msgq_put+0x140>)
   1f7a2:	2372      	movs	r3, #114	; 0x72
   1f7a4:	4a15      	ldr	r2, [pc, #84]	; (1f7fc <z_impl_k_msgq_put+0x138>)
   1f7a6:	4812      	ldr	r0, [pc, #72]	; (1f7f0 <z_impl_k_msgq_put+0x12c>)
   1f7a8:	f003 fac1 	bl	22d2e <printk>
   1f7ac:	4816      	ldr	r0, [pc, #88]	; (1f808 <z_impl_k_msgq_put+0x144>)
   1f7ae:	f003 fabe 	bl	22d2e <printk>
   1f7b2:	2172      	movs	r1, #114	; 0x72
   1f7b4:	4811      	ldr	r0, [pc, #68]	; (1f7fc <z_impl_k_msgq_put+0x138>)
   1f7b6:	f003 fac7 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   1f7ba:	f387 8811 	msr	BASEPRI, r7
   1f7be:	f3bf 8f6f 	isb	sy
	return result;
   1f7c2:	e7d6      	b.n	1f772 <z_impl_k_msgq_put+0xae>
	} else if (timeout == K_NO_WAIT) {
   1f7c4:	b15d      	cbz	r5, 1f7de <z_impl_k_msgq_put+0x11a>
		_current->base.swap_data = data;
   1f7c6:	4b11      	ldr	r3, [pc, #68]	; (1f80c <z_impl_k_msgq_put+0x148>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1f7c8:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   1f7ca:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1f7cc:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   1f7ce:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1f7d2:	4630      	mov	r0, r6
   1f7d4:	462b      	mov	r3, r5
}
   1f7d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1f7da:	f001 b975 	b.w	20ac8 <z_pend_curr>
		result = -ENOMSG;
   1f7de:	f06f 044f 	mvn.w	r4, #79	; 0x4f
   1f7e2:	e7d9      	b.n	1f798 <z_impl_k_msgq_put+0xd4>
   1f7e4:	e000ed00 	.word	0xe000ed00
   1f7e8:	000260cf 	.word	0x000260cf
   1f7ec:	00026089 	.word	0x00026089
   1f7f0:	000255f3 	.word	0x000255f3
   1f7f4:	00026086 	.word	0x00026086
   1f7f8:	0002576e 	.word	0x0002576e
   1f7fc:	0002574f 	.word	0x0002574f
   1f800:	00025783 	.word	0x00025783
   1f804:	00025798 	.word	0x00025798
   1f808:	000257af 	.word	0x000257af
   1f80c:	20025ab4 	.word	0x20025ab4

0001f810 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   1f810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f814:	4604      	mov	r4, r0
   1f816:	4688      	mov	r8, r1
   1f818:	4615      	mov	r5, r2
   1f81a:	f3ef 8305 	mrs	r3, IPSR
   1f81e:	2b0d      	cmp	r3, #13
   1f820:	d804      	bhi.n	1f82c <z_impl_k_msgq_get+0x1c>
   1f822:	b18b      	cbz	r3, 1f848 <z_impl_k_msgq_get+0x38>
   1f824:	4b48      	ldr	r3, [pc, #288]	; (1f948 <z_impl_k_msgq_get+0x138>)
   1f826:	685b      	ldr	r3, [r3, #4]
   1f828:	051a      	lsls	r2, r3, #20
   1f82a:	d40d      	bmi.n	1f848 <z_impl_k_msgq_get+0x38>
	__ASSERT(!z_arch_is_in_isr() || timeout == K_NO_WAIT, "");
   1f82c:	b165      	cbz	r5, 1f848 <z_impl_k_msgq_get+0x38>
   1f82e:	4947      	ldr	r1, [pc, #284]	; (1f94c <z_impl_k_msgq_get+0x13c>)
   1f830:	23bc      	movs	r3, #188	; 0xbc
   1f832:	4a47      	ldr	r2, [pc, #284]	; (1f950 <z_impl_k_msgq_get+0x140>)
   1f834:	4847      	ldr	r0, [pc, #284]	; (1f954 <z_impl_k_msgq_get+0x144>)
   1f836:	f003 fa7a 	bl	22d2e <printk>
   1f83a:	4847      	ldr	r0, [pc, #284]	; (1f958 <z_impl_k_msgq_get+0x148>)
   1f83c:	f003 fa77 	bl	22d2e <printk>
   1f840:	21bc      	movs	r1, #188	; 0xbc
   1f842:	4843      	ldr	r0, [pc, #268]	; (1f950 <z_impl_k_msgq_get+0x140>)
   1f844:	f003 fa80 	bl	22d48 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1f848:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   1f84c:	f04f 0320 	mov.w	r3, #32
   1f850:	f3ef 8711 	mrs	r7, BASEPRI
   1f854:	f383 8811 	msr	BASEPRI, r3
   1f858:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1f85c:	4630      	mov	r0, r6
   1f85e:	f001 fd1f 	bl	212a0 <z_spin_lock_valid>
   1f862:	b960      	cbnz	r0, 1f87e <z_impl_k_msgq_get+0x6e>
   1f864:	493d      	ldr	r1, [pc, #244]	; (1f95c <z_impl_k_msgq_get+0x14c>)
   1f866:	235f      	movs	r3, #95	; 0x5f
   1f868:	4a3d      	ldr	r2, [pc, #244]	; (1f960 <z_impl_k_msgq_get+0x150>)
   1f86a:	483a      	ldr	r0, [pc, #232]	; (1f954 <z_impl_k_msgq_get+0x144>)
   1f86c:	f003 fa5f 	bl	22d2e <printk>
   1f870:	483c      	ldr	r0, [pc, #240]	; (1f964 <z_impl_k_msgq_get+0x154>)
   1f872:	f003 fa5c 	bl	22d2e <printk>
   1f876:	215f      	movs	r1, #95	; 0x5f
   1f878:	4839      	ldr	r0, [pc, #228]	; (1f960 <z_impl_k_msgq_get+0x150>)
   1f87a:	f003 fa65 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f87e:	4630      	mov	r0, r6
   1f880:	f001 fd2c 	bl	212dc <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   1f884:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f886:	2b00      	cmp	r3, #0
   1f888:	d039      	beq.n	1f8fe <z_impl_k_msgq_get+0xee>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   1f88a:	68e2      	ldr	r2, [r4, #12]
   1f88c:	69e1      	ldr	r1, [r4, #28]
   1f88e:	4640      	mov	r0, r8
   1f890:	f003 fbee 	bl	23070 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   1f894:	69e3      	ldr	r3, [r4, #28]
   1f896:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1f898:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   1f89a:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   1f89c:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   1f89e:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   1f8a0:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   1f8a2:	bf04      	itt	eq
   1f8a4:	6963      	ldreq	r3, [r4, #20]
   1f8a6:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   1f8a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f8aa:	3b01      	subs	r3, #1
   1f8ac:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1f8ae:	f001 f9c5 	bl	20c3c <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1f8b2:	4605      	mov	r5, r0
   1f8b4:	2800      	cmp	r0, #0
   1f8b6:	d031      	beq.n	1f91c <z_impl_k_msgq_get+0x10c>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   1f8b8:	68e2      	ldr	r2, [r4, #12]
   1f8ba:	6941      	ldr	r1, [r0, #20]
   1f8bc:	6a20      	ldr	r0, [r4, #32]
   1f8be:	f003 fbd7 	bl	23070 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   1f8c2:	6a23      	ldr	r3, [r4, #32]
   1f8c4:	68e2      	ldr	r2, [r4, #12]
   1f8c6:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1f8c8:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   1f8ca:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   1f8cc:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1f8ce:	bf04      	itt	eq
   1f8d0:	6963      	ldreq	r3, [r4, #20]
   1f8d2:	6223      	streq	r3, [r4, #32]
			}
			msgq->used_msgs++;
   1f8d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f8d6:	3301      	adds	r3, #1
   1f8d8:	6263      	str	r3, [r4, #36]	; 0x24
   1f8da:	2300      	movs	r3, #0
   1f8dc:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1f8de:	7b6b      	ldrb	r3, [r5, #13]
   1f8e0:	06db      	lsls	r3, r3, #27
   1f8e2:	d104      	bne.n	1f8ee <z_impl_k_msgq_get+0xde>
	if (z_is_thread_ready(thread)) {
   1f8e4:	69ab      	ldr	r3, [r5, #24]
   1f8e6:	b913      	cbnz	r3, 1f8ee <z_impl_k_msgq_get+0xde>
		z_add_thread_to_ready_q(thread);
   1f8e8:	4628      	mov	r0, r5
   1f8ea:	f000 fe3d 	bl	20568 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			z_arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   1f8ee:	4639      	mov	r1, r7
   1f8f0:	4630      	mov	r0, r6
   1f8f2:	f000 fc45 	bl	20180 <z_reschedule>
			return 0;
   1f8f6:	2500      	movs	r5, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1f8f8:	4628      	mov	r0, r5
   1f8fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   1f8fe:	b15d      	cbz	r5, 1f918 <z_impl_k_msgq_get+0x108>
		_current->base.swap_data = data;
   1f900:	4b19      	ldr	r3, [pc, #100]	; (1f968 <z_impl_k_msgq_get+0x158>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1f902:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   1f904:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1f906:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   1f908:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1f90c:	4630      	mov	r0, r6
   1f90e:	462b      	mov	r3, r5
}
   1f910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1f914:	f001 b8d8 	b.w	20ac8 <z_pend_curr>
		result = -ENOMSG;
   1f918:	f06f 054f 	mvn.w	r5, #79	; 0x4f
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1f91c:	4630      	mov	r0, r6
   1f91e:	f001 fccd 	bl	212bc <z_spin_unlock_valid>
   1f922:	b960      	cbnz	r0, 1f93e <z_impl_k_msgq_get+0x12e>
   1f924:	4911      	ldr	r1, [pc, #68]	; (1f96c <z_impl_k_msgq_get+0x15c>)
   1f926:	2372      	movs	r3, #114	; 0x72
   1f928:	4a0d      	ldr	r2, [pc, #52]	; (1f960 <z_impl_k_msgq_get+0x150>)
   1f92a:	480a      	ldr	r0, [pc, #40]	; (1f954 <z_impl_k_msgq_get+0x144>)
   1f92c:	f003 f9ff 	bl	22d2e <printk>
   1f930:	480f      	ldr	r0, [pc, #60]	; (1f970 <z_impl_k_msgq_get+0x160>)
   1f932:	f003 f9fc 	bl	22d2e <printk>
   1f936:	2172      	movs	r1, #114	; 0x72
   1f938:	4809      	ldr	r0, [pc, #36]	; (1f960 <z_impl_k_msgq_get+0x150>)
   1f93a:	f003 fa05 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   1f93e:	f387 8811 	msr	BASEPRI, r7
   1f942:	f3bf 8f6f 	isb	sy
	return result;
   1f946:	e7d7      	b.n	1f8f8 <z_impl_k_msgq_get+0xe8>
   1f948:	e000ed00 	.word	0xe000ed00
   1f94c:	000260cf 	.word	0x000260cf
   1f950:	00026089 	.word	0x00026089
   1f954:	000255f3 	.word	0x000255f3
   1f958:	00026086 	.word	0x00026086
   1f95c:	0002576e 	.word	0x0002576e
   1f960:	0002574f 	.word	0x0002574f
   1f964:	00025783 	.word	0x00025783
   1f968:	20025ab4 	.word	0x20025ab4
   1f96c:	00025798 	.word	0x00025798
   1f970:	000257af 	.word	0x000257af

0001f974 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   1f974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f976:	4604      	mov	r4, r0
   1f978:	460e      	mov	r6, r1
	__asm__ volatile(
   1f97a:	f04f 0320 	mov.w	r3, #32
   1f97e:	f3ef 8511 	mrs	r5, BASEPRI
   1f982:	f383 8811 	msr	BASEPRI, r3
   1f986:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1f98a:	485f      	ldr	r0, [pc, #380]	; (1fb08 <z_impl_k_mutex_lock+0x194>)
   1f98c:	f001 fc88 	bl	212a0 <z_spin_lock_valid>
   1f990:	b960      	cbnz	r0, 1f9ac <z_impl_k_mutex_lock+0x38>
   1f992:	495e      	ldr	r1, [pc, #376]	; (1fb0c <z_impl_k_mutex_lock+0x198>)
   1f994:	235f      	movs	r3, #95	; 0x5f
   1f996:	4a5e      	ldr	r2, [pc, #376]	; (1fb10 <z_impl_k_mutex_lock+0x19c>)
   1f998:	485e      	ldr	r0, [pc, #376]	; (1fb14 <z_impl_k_mutex_lock+0x1a0>)
   1f99a:	f003 f9c8 	bl	22d2e <printk>
   1f99e:	485e      	ldr	r0, [pc, #376]	; (1fb18 <z_impl_k_mutex_lock+0x1a4>)
   1f9a0:	f003 f9c5 	bl	22d2e <printk>
   1f9a4:	215f      	movs	r1, #95	; 0x5f
   1f9a6:	485a      	ldr	r0, [pc, #360]	; (1fb10 <z_impl_k_mutex_lock+0x19c>)
   1f9a8:	f003 f9ce 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f9ac:	4856      	ldr	r0, [pc, #344]	; (1fb08 <z_impl_k_mutex_lock+0x194>)
   1f9ae:	f001 fc95 	bl	212dc <z_spin_lock_set_owner>
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1f9b2:	68e3      	ldr	r3, [r4, #12]
   1f9b4:	4a59      	ldr	r2, [pc, #356]	; (1fb1c <z_impl_k_mutex_lock+0x1a8>)
   1f9b6:	b1eb      	cbz	r3, 1f9f4 <z_impl_k_mutex_lock+0x80>
   1f9b8:	68a0      	ldr	r0, [r4, #8]
   1f9ba:	6891      	ldr	r1, [r2, #8]
   1f9bc:	4288      	cmp	r0, r1
   1f9be:	d038      	beq.n	1fa32 <z_impl_k_mutex_lock+0xbe>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   1f9c0:	2e00      	cmp	r6, #0
   1f9c2:	d138      	bne.n	1fa36 <z_impl_k_mutex_lock+0xc2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1f9c4:	4850      	ldr	r0, [pc, #320]	; (1fb08 <z_impl_k_mutex_lock+0x194>)
   1f9c6:	f001 fc79 	bl	212bc <z_spin_unlock_valid>
   1f9ca:	b960      	cbnz	r0, 1f9e6 <z_impl_k_mutex_lock+0x72>
   1f9cc:	4954      	ldr	r1, [pc, #336]	; (1fb20 <z_impl_k_mutex_lock+0x1ac>)
   1f9ce:	2372      	movs	r3, #114	; 0x72
   1f9d0:	4a4f      	ldr	r2, [pc, #316]	; (1fb10 <z_impl_k_mutex_lock+0x19c>)
   1f9d2:	4850      	ldr	r0, [pc, #320]	; (1fb14 <z_impl_k_mutex_lock+0x1a0>)
   1f9d4:	f003 f9ab 	bl	22d2e <printk>
   1f9d8:	4852      	ldr	r0, [pc, #328]	; (1fb24 <z_impl_k_mutex_lock+0x1b0>)
   1f9da:	f003 f9a8 	bl	22d2e <printk>
   1f9de:	2172      	movs	r1, #114	; 0x72
   1f9e0:	484b      	ldr	r0, [pc, #300]	; (1fb10 <z_impl_k_mutex_lock+0x19c>)
   1f9e2:	f003 f9b1 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   1f9e6:	f385 8811 	msr	BASEPRI, r5
   1f9ea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1f9ee:	f06f 000f 	mvn.w	r0, #15
   1f9f2:	e01d      	b.n	1fa30 <z_impl_k_mutex_lock+0xbc>
					_current->base.prio :
   1f9f4:	6891      	ldr	r1, [r2, #8]
   1f9f6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   1f9fa:	3301      	adds	r3, #1
   1f9fc:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1f9fe:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1fa00:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1fa02:	60a3      	str	r3, [r4, #8]
   1fa04:	4840      	ldr	r0, [pc, #256]	; (1fb08 <z_impl_k_mutex_lock+0x194>)
   1fa06:	f001 fc59 	bl	212bc <z_spin_unlock_valid>
   1fa0a:	b960      	cbnz	r0, 1fa26 <z_impl_k_mutex_lock+0xb2>
   1fa0c:	4944      	ldr	r1, [pc, #272]	; (1fb20 <z_impl_k_mutex_lock+0x1ac>)
   1fa0e:	2372      	movs	r3, #114	; 0x72
   1fa10:	4a3f      	ldr	r2, [pc, #252]	; (1fb10 <z_impl_k_mutex_lock+0x19c>)
   1fa12:	4840      	ldr	r0, [pc, #256]	; (1fb14 <z_impl_k_mutex_lock+0x1a0>)
   1fa14:	f003 f98b 	bl	22d2e <printk>
   1fa18:	4842      	ldr	r0, [pc, #264]	; (1fb24 <z_impl_k_mutex_lock+0x1b0>)
   1fa1a:	f003 f988 	bl	22d2e <printk>
   1fa1e:	2172      	movs	r1, #114	; 0x72
   1fa20:	483b      	ldr	r0, [pc, #236]	; (1fb10 <z_impl_k_mutex_lock+0x19c>)
   1fa22:	f003 f991 	bl	22d48 <assert_post_action>
   1fa26:	f385 8811 	msr	BASEPRI, r5
   1fa2a:	f3bf 8f6f 	isb	sy
		return 0;
   1fa2e:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1fa30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   1fa32:	6921      	ldr	r1, [r4, #16]
   1fa34:	e7e1      	b.n	1f9fa <z_impl_k_mutex_lock+0x86>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1fa36:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1fa3a:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1fa3e:	4299      	cmp	r1, r3
   1fa40:	bfa8      	it	ge
   1fa42:	4619      	movge	r1, r3
   1fa44:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1fa48:	4299      	cmp	r1, r3
   1fa4a:	da3f      	bge.n	1facc <z_impl_k_mutex_lock+0x158>
		return z_set_prio(mutex->owner, new_prio);
   1fa4c:	f001 f86a 	bl	20b24 <z_set_prio>
   1fa50:	4607      	mov	r7, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1fa52:	4633      	mov	r3, r6
   1fa54:	4622      	mov	r2, r4
   1fa56:	4629      	mov	r1, r5
   1fa58:	482b      	ldr	r0, [pc, #172]	; (1fb08 <z_impl_k_mutex_lock+0x194>)
   1fa5a:	f001 f835 	bl	20ac8 <z_pend_curr>
	if (got_mutex == 0) {
   1fa5e:	2800      	cmp	r0, #0
   1fa60:	d0e6      	beq.n	1fa30 <z_impl_k_mutex_lock+0xbc>
	__asm__ volatile(
   1fa62:	f04f 0320 	mov.w	r3, #32
   1fa66:	f3ef 8511 	mrs	r5, BASEPRI
   1fa6a:	f383 8811 	msr	BASEPRI, r3
   1fa6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1fa72:	4825      	ldr	r0, [pc, #148]	; (1fb08 <z_impl_k_mutex_lock+0x194>)
   1fa74:	f001 fc14 	bl	212a0 <z_spin_lock_valid>
   1fa78:	b960      	cbnz	r0, 1fa94 <z_impl_k_mutex_lock+0x120>
   1fa7a:	4924      	ldr	r1, [pc, #144]	; (1fb0c <z_impl_k_mutex_lock+0x198>)
   1fa7c:	235f      	movs	r3, #95	; 0x5f
   1fa7e:	4a24      	ldr	r2, [pc, #144]	; (1fb10 <z_impl_k_mutex_lock+0x19c>)
   1fa80:	4824      	ldr	r0, [pc, #144]	; (1fb14 <z_impl_k_mutex_lock+0x1a0>)
   1fa82:	f003 f954 	bl	22d2e <printk>
   1fa86:	4824      	ldr	r0, [pc, #144]	; (1fb18 <z_impl_k_mutex_lock+0x1a4>)
   1fa88:	f003 f951 	bl	22d2e <printk>
   1fa8c:	215f      	movs	r1, #95	; 0x5f
   1fa8e:	4820      	ldr	r0, [pc, #128]	; (1fb10 <z_impl_k_mutex_lock+0x19c>)
   1fa90:	f003 f95a 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fa94:	481c      	ldr	r0, [pc, #112]	; (1fb08 <z_impl_k_mutex_lock+0x194>)
   1fa96:	f001 fc21 	bl	212dc <z_spin_lock_set_owner>
	return list->head == list;
   1fa9a:	6823      	ldr	r3, [r4, #0]
   1fa9c:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fa9e:	429c      	cmp	r4, r3
   1faa0:	d007      	beq.n	1fab2 <z_impl_k_mutex_lock+0x13e>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   1faa2:	b133      	cbz	r3, 1fab2 <z_impl_k_mutex_lock+0x13e>
   1faa4:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1faa8:	4299      	cmp	r1, r3
   1faaa:	bfa8      	it	ge
   1faac:	4619      	movge	r1, r3
   1faae:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1fab2:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1fab4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1fab8:	4299      	cmp	r1, r3
   1faba:	d109      	bne.n	1fad0 <z_impl_k_mutex_lock+0x15c>
	if (resched) {
   1fabc:	b16f      	cbz	r7, 1fada <z_impl_k_mutex_lock+0x166>
		z_reschedule(&lock, key);
   1fabe:	4629      	mov	r1, r5
   1fac0:	4811      	ldr	r0, [pc, #68]	; (1fb08 <z_impl_k_mutex_lock+0x194>)
   1fac2:	f000 fb5d 	bl	20180 <z_reschedule>
	return -EAGAIN;
   1fac6:	f06f 000a 	mvn.w	r0, #10
   1faca:	e7b1      	b.n	1fa30 <z_impl_k_mutex_lock+0xbc>
	bool resched = false;
   1facc:	2700      	movs	r7, #0
   1face:	e7c0      	b.n	1fa52 <z_impl_k_mutex_lock+0xde>
		return z_set_prio(mutex->owner, new_prio);
   1fad0:	f001 f828 	bl	20b24 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1fad4:	2800      	cmp	r0, #0
   1fad6:	d1f2      	bne.n	1fabe <z_impl_k_mutex_lock+0x14a>
   1fad8:	e7f0      	b.n	1fabc <z_impl_k_mutex_lock+0x148>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1fada:	480b      	ldr	r0, [pc, #44]	; (1fb08 <z_impl_k_mutex_lock+0x194>)
   1fadc:	f001 fbee 	bl	212bc <z_spin_unlock_valid>
   1fae0:	b960      	cbnz	r0, 1fafc <z_impl_k_mutex_lock+0x188>
   1fae2:	490f      	ldr	r1, [pc, #60]	; (1fb20 <z_impl_k_mutex_lock+0x1ac>)
   1fae4:	2372      	movs	r3, #114	; 0x72
   1fae6:	4a0a      	ldr	r2, [pc, #40]	; (1fb10 <z_impl_k_mutex_lock+0x19c>)
   1fae8:	480a      	ldr	r0, [pc, #40]	; (1fb14 <z_impl_k_mutex_lock+0x1a0>)
   1faea:	f003 f920 	bl	22d2e <printk>
   1faee:	480d      	ldr	r0, [pc, #52]	; (1fb24 <z_impl_k_mutex_lock+0x1b0>)
   1faf0:	f003 f91d 	bl	22d2e <printk>
   1faf4:	2172      	movs	r1, #114	; 0x72
   1faf6:	4806      	ldr	r0, [pc, #24]	; (1fb10 <z_impl_k_mutex_lock+0x19c>)
   1faf8:	f003 f926 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   1fafc:	f385 8811 	msr	BASEPRI, r5
   1fb00:	f3bf 8f6f 	isb	sy
   1fb04:	e7df      	b.n	1fac6 <z_impl_k_mutex_lock+0x152>
   1fb06:	bf00      	nop
   1fb08:	20025ab0 	.word	0x20025ab0
   1fb0c:	0002576e 	.word	0x0002576e
   1fb10:	0002574f 	.word	0x0002574f
   1fb14:	000255f3 	.word	0x000255f3
   1fb18:	00025783 	.word	0x00025783
   1fb1c:	20025ab4 	.word	0x20025ab4
   1fb20:	00025798 	.word	0x00025798
   1fb24:	000257af 	.word	0x000257af

0001fb28 <z_impl_k_mutex_unlock>:

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
	struct k_thread *new_owner;

	__ASSERT(mutex->lock_count > 0U, "");
   1fb28:	68c3      	ldr	r3, [r0, #12]
{
   1fb2a:	b570      	push	{r4, r5, r6, lr}
   1fb2c:	4604      	mov	r4, r0
	__ASSERT(mutex->lock_count > 0U, "");
   1fb2e:	b963      	cbnz	r3, 1fb4a <z_impl_k_mutex_unlock+0x22>
   1fb30:	495c      	ldr	r1, [pc, #368]	; (1fca4 <z_impl_k_mutex_unlock+0x17c>)
   1fb32:	23d2      	movs	r3, #210	; 0xd2
   1fb34:	4a5c      	ldr	r2, [pc, #368]	; (1fca8 <z_impl_k_mutex_unlock+0x180>)
   1fb36:	485d      	ldr	r0, [pc, #372]	; (1fcac <z_impl_k_mutex_unlock+0x184>)
   1fb38:	f003 f8f9 	bl	22d2e <printk>
   1fb3c:	485c      	ldr	r0, [pc, #368]	; (1fcb0 <z_impl_k_mutex_unlock+0x188>)
   1fb3e:	f003 f8f6 	bl	22d2e <printk>
   1fb42:	21d2      	movs	r1, #210	; 0xd2
   1fb44:	4858      	ldr	r0, [pc, #352]	; (1fca8 <z_impl_k_mutex_unlock+0x180>)
   1fb46:	f003 f8ff 	bl	22d48 <assert_post_action>
	__ASSERT(mutex->owner == _current, "");
   1fb4a:	4d5a      	ldr	r5, [pc, #360]	; (1fcb4 <z_impl_k_mutex_unlock+0x18c>)
   1fb4c:	68a2      	ldr	r2, [r4, #8]
   1fb4e:	68ab      	ldr	r3, [r5, #8]
   1fb50:	429a      	cmp	r2, r3
   1fb52:	d00c      	beq.n	1fb6e <z_impl_k_mutex_unlock+0x46>
   1fb54:	4958      	ldr	r1, [pc, #352]	; (1fcb8 <z_impl_k_mutex_unlock+0x190>)
   1fb56:	23d3      	movs	r3, #211	; 0xd3
   1fb58:	4a53      	ldr	r2, [pc, #332]	; (1fca8 <z_impl_k_mutex_unlock+0x180>)
   1fb5a:	4854      	ldr	r0, [pc, #336]	; (1fcac <z_impl_k_mutex_unlock+0x184>)
   1fb5c:	f003 f8e7 	bl	22d2e <printk>
   1fb60:	4853      	ldr	r0, [pc, #332]	; (1fcb0 <z_impl_k_mutex_unlock+0x188>)
   1fb62:	f003 f8e4 	bl	22d2e <printk>
   1fb66:	21d3      	movs	r1, #211	; 0xd3
   1fb68:	484f      	ldr	r0, [pc, #316]	; (1fca8 <z_impl_k_mutex_unlock+0x180>)
   1fb6a:	f003 f8ed 	bl	22d48 <assert_post_action>
   1fb6e:	f3ef 8305 	mrs	r3, IPSR
   1fb72:	2b0d      	cmp	r3, #13
   1fb74:	d804      	bhi.n	1fb80 <z_impl_k_mutex_unlock+0x58>
   1fb76:	b193      	cbz	r3, 1fb9e <z_impl_k_mutex_unlock+0x76>
   1fb78:	4b50      	ldr	r3, [pc, #320]	; (1fcbc <z_impl_k_mutex_unlock+0x194>)
   1fb7a:	685b      	ldr	r3, [r3, #4]
   1fb7c:	051a      	lsls	r2, r3, #20
   1fb7e:	d40e      	bmi.n	1fb9e <z_impl_k_mutex_unlock+0x76>
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_arch_is_in_isr(), "");
   1fb80:	494f      	ldr	r1, [pc, #316]	; (1fcc0 <z_impl_k_mutex_unlock+0x198>)
   1fb82:	f44f 7386 	mov.w	r3, #268	; 0x10c
   1fb86:	4a4f      	ldr	r2, [pc, #316]	; (1fcc4 <z_impl_k_mutex_unlock+0x19c>)
   1fb88:	4848      	ldr	r0, [pc, #288]	; (1fcac <z_impl_k_mutex_unlock+0x184>)
   1fb8a:	f003 f8d0 	bl	22d2e <printk>
   1fb8e:	4848      	ldr	r0, [pc, #288]	; (1fcb0 <z_impl_k_mutex_unlock+0x188>)
   1fb90:	f003 f8cd 	bl	22d2e <printk>
   1fb94:	f44f 7186 	mov.w	r1, #268	; 0x10c
   1fb98:	484a      	ldr	r0, [pc, #296]	; (1fcc4 <z_impl_k_mutex_unlock+0x19c>)
   1fb9a:	f003 f8d5 	bl	22d48 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   1fb9e:	68ab      	ldr	r3, [r5, #8]
   1fba0:	7bdb      	ldrb	r3, [r3, #15]
   1fba2:	2b01      	cmp	r3, #1
   1fba4:	d10e      	bne.n	1fbc4 <z_impl_k_mutex_unlock+0x9c>
   1fba6:	4948      	ldr	r1, [pc, #288]	; (1fcc8 <z_impl_k_mutex_unlock+0x1a0>)
   1fba8:	f240 130d 	movw	r3, #269	; 0x10d
   1fbac:	4a45      	ldr	r2, [pc, #276]	; (1fcc4 <z_impl_k_mutex_unlock+0x19c>)
   1fbae:	483f      	ldr	r0, [pc, #252]	; (1fcac <z_impl_k_mutex_unlock+0x184>)
   1fbb0:	f003 f8bd 	bl	22d2e <printk>
   1fbb4:	483e      	ldr	r0, [pc, #248]	; (1fcb0 <z_impl_k_mutex_unlock+0x188>)
   1fbb6:	f003 f8ba 	bl	22d2e <printk>
   1fbba:	f240 110d 	movw	r1, #269	; 0x10d
   1fbbe:	4841      	ldr	r0, [pc, #260]	; (1fcc4 <z_impl_k_mutex_unlock+0x19c>)
   1fbc0:	f003 f8c2 	bl	22d48 <assert_post_action>

	--_current->base.sched_locked;
   1fbc4:	68aa      	ldr	r2, [r5, #8]
   1fbc6:	7bd3      	ldrb	r3, [r2, #15]
   1fbc8:	3b01      	subs	r3, #1
   1fbca:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   1fbcc:	68e3      	ldr	r3, [r4, #12]
   1fbce:	2b01      	cmp	r3, #1
   1fbd0:	d005      	beq.n	1fbde <z_impl_k_mutex_unlock+0xb6>
		mutex->lock_count--;
   1fbd2:	3b01      	subs	r3, #1
   1fbd4:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
   1fbd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   1fbda:	f000 bc43 	b.w	20464 <k_sched_unlock>
	__asm__ volatile(
   1fbde:	f04f 0320 	mov.w	r3, #32
   1fbe2:	f3ef 8611 	mrs	r6, BASEPRI
   1fbe6:	f383 8811 	msr	BASEPRI, r3
   1fbea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1fbee:	4837      	ldr	r0, [pc, #220]	; (1fccc <z_impl_k_mutex_unlock+0x1a4>)
   1fbf0:	f001 fb56 	bl	212a0 <z_spin_lock_valid>
   1fbf4:	b960      	cbnz	r0, 1fc10 <z_impl_k_mutex_unlock+0xe8>
   1fbf6:	4936      	ldr	r1, [pc, #216]	; (1fcd0 <z_impl_k_mutex_unlock+0x1a8>)
   1fbf8:	235f      	movs	r3, #95	; 0x5f
   1fbfa:	4a36      	ldr	r2, [pc, #216]	; (1fcd4 <z_impl_k_mutex_unlock+0x1ac>)
   1fbfc:	482b      	ldr	r0, [pc, #172]	; (1fcac <z_impl_k_mutex_unlock+0x184>)
   1fbfe:	f003 f896 	bl	22d2e <printk>
   1fc02:	4835      	ldr	r0, [pc, #212]	; (1fcd8 <z_impl_k_mutex_unlock+0x1b0>)
   1fc04:	f003 f893 	bl	22d2e <printk>
   1fc08:	215f      	movs	r1, #95	; 0x5f
   1fc0a:	4832      	ldr	r0, [pc, #200]	; (1fcd4 <z_impl_k_mutex_unlock+0x1ac>)
   1fc0c:	f003 f89c 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fc10:	482e      	ldr	r0, [pc, #184]	; (1fccc <z_impl_k_mutex_unlock+0x1a4>)
   1fc12:	f001 fb63 	bl	212dc <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1fc16:	68a0      	ldr	r0, [r4, #8]
   1fc18:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   1fc1a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1fc1e:	4299      	cmp	r1, r3
   1fc20:	d001      	beq.n	1fc26 <z_impl_k_mutex_unlock+0xfe>
		return z_set_prio(mutex->owner, new_prio);
   1fc22:	f000 ff7f 	bl	20b24 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1fc26:	4620      	mov	r0, r4
   1fc28:	f001 f808 	bl	20c3c <z_unpend_first_thread>
   1fc2c:	4605      	mov	r5, r0
	mutex->owner = new_owner;
   1fc2e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1fc30:	b308      	cbz	r0, 1fc76 <z_impl_k_mutex_unlock+0x14e>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1fc32:	7b43      	ldrb	r3, [r0, #13]
   1fc34:	06db      	lsls	r3, r3, #27
   1fc36:	d103      	bne.n	1fc40 <z_impl_k_mutex_unlock+0x118>
	if (z_is_thread_ready(thread)) {
   1fc38:	6983      	ldr	r3, [r0, #24]
   1fc3a:	b90b      	cbnz	r3, 1fc40 <z_impl_k_mutex_unlock+0x118>
		z_add_thread_to_ready_q(thread);
   1fc3c:	f000 fc94 	bl	20568 <z_add_thread_to_ready_q>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1fc40:	4822      	ldr	r0, [pc, #136]	; (1fccc <z_impl_k_mutex_unlock+0x1a4>)
   1fc42:	f001 fb3b 	bl	212bc <z_spin_unlock_valid>
   1fc46:	b960      	cbnz	r0, 1fc62 <z_impl_k_mutex_unlock+0x13a>
   1fc48:	4924      	ldr	r1, [pc, #144]	; (1fcdc <z_impl_k_mutex_unlock+0x1b4>)
   1fc4a:	2372      	movs	r3, #114	; 0x72
   1fc4c:	4a21      	ldr	r2, [pc, #132]	; (1fcd4 <z_impl_k_mutex_unlock+0x1ac>)
   1fc4e:	4817      	ldr	r0, [pc, #92]	; (1fcac <z_impl_k_mutex_unlock+0x184>)
   1fc50:	f003 f86d 	bl	22d2e <printk>
   1fc54:	4822      	ldr	r0, [pc, #136]	; (1fce0 <z_impl_k_mutex_unlock+0x1b8>)
   1fc56:	f003 f86a 	bl	22d2e <printk>
   1fc5a:	2172      	movs	r1, #114	; 0x72
   1fc5c:	481d      	ldr	r0, [pc, #116]	; (1fcd4 <z_impl_k_mutex_unlock+0x1ac>)
   1fc5e:	f003 f873 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   1fc62:	f386 8811 	msr	BASEPRI, r6
   1fc66:	f3bf 8f6f 	isb	sy
   1fc6a:	2300      	movs	r3, #0
   1fc6c:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
   1fc6e:	f995 300e 	ldrsb.w	r3, [r5, #14]
   1fc72:	6123      	str	r3, [r4, #16]
   1fc74:	e7af      	b.n	1fbd6 <z_impl_k_mutex_unlock+0xae>
		mutex->lock_count = 0U;
   1fc76:	60e0      	str	r0, [r4, #12]
   1fc78:	4814      	ldr	r0, [pc, #80]	; (1fccc <z_impl_k_mutex_unlock+0x1a4>)
   1fc7a:	f001 fb1f 	bl	212bc <z_spin_unlock_valid>
   1fc7e:	b960      	cbnz	r0, 1fc9a <z_impl_k_mutex_unlock+0x172>
   1fc80:	4916      	ldr	r1, [pc, #88]	; (1fcdc <z_impl_k_mutex_unlock+0x1b4>)
   1fc82:	2372      	movs	r3, #114	; 0x72
   1fc84:	4a13      	ldr	r2, [pc, #76]	; (1fcd4 <z_impl_k_mutex_unlock+0x1ac>)
   1fc86:	4809      	ldr	r0, [pc, #36]	; (1fcac <z_impl_k_mutex_unlock+0x184>)
   1fc88:	f003 f851 	bl	22d2e <printk>
   1fc8c:	4814      	ldr	r0, [pc, #80]	; (1fce0 <z_impl_k_mutex_unlock+0x1b8>)
   1fc8e:	f003 f84e 	bl	22d2e <printk>
   1fc92:	2172      	movs	r1, #114	; 0x72
   1fc94:	480f      	ldr	r0, [pc, #60]	; (1fcd4 <z_impl_k_mutex_unlock+0x1ac>)
   1fc96:	f003 f857 	bl	22d48 <assert_post_action>
   1fc9a:	f386 8811 	msr	BASEPRI, r6
   1fc9e:	f3bf 8f6f 	isb	sy
   1fca2:	e798      	b.n	1fbd6 <z_impl_k_mutex_unlock+0xae>
   1fca4:	0002610e 	.word	0x0002610e
   1fca8:	000260f3 	.word	0x000260f3
   1fcac:	000255f3 	.word	0x000255f3
   1fcb0:	00026086 	.word	0x00026086
   1fcb4:	20025ab4 	.word	0x20025ab4
   1fcb8:	00026125 	.word	0x00026125
   1fcbc:	e000ed00 	.word	0xe000ed00
   1fcc0:	00026169 	.word	0x00026169
   1fcc4:	00026145 	.word	0x00026145
   1fcc8:	0002617d 	.word	0x0002617d
   1fccc:	20025ab0 	.word	0x20025ab0
   1fcd0:	0002576e 	.word	0x0002576e
   1fcd4:	0002574f 	.word	0x0002574f
   1fcd8:	00025783 	.word	0x00025783
   1fcdc:	00025798 	.word	0x00025798
   1fce0:	000257af 	.word	0x000257af

0001fce4 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   1fce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fce8:	4604      	mov	r4, r0
   1fcea:	460e      	mov	r6, r1
   1fcec:	4690      	mov	r8, r2
   1fcee:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1fcf0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1fcf4:	f04f 0320 	mov.w	r3, #32
   1fcf8:	f3ef 8711 	mrs	r7, BASEPRI
   1fcfc:	f383 8811 	msr	BASEPRI, r3
   1fd00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1fd04:	4628      	mov	r0, r5
   1fd06:	f001 facb 	bl	212a0 <z_spin_lock_valid>
   1fd0a:	b960      	cbnz	r0, 1fd26 <queue_insert+0x42>
   1fd0c:	4932      	ldr	r1, [pc, #200]	; (1fdd8 <queue_insert+0xf4>)
   1fd0e:	235f      	movs	r3, #95	; 0x5f
   1fd10:	4a32      	ldr	r2, [pc, #200]	; (1fddc <queue_insert+0xf8>)
   1fd12:	4833      	ldr	r0, [pc, #204]	; (1fde0 <queue_insert+0xfc>)
   1fd14:	f003 f80b 	bl	22d2e <printk>
   1fd18:	4832      	ldr	r0, [pc, #200]	; (1fde4 <queue_insert+0x100>)
   1fd1a:	f003 f808 	bl	22d2e <printk>
   1fd1e:	215f      	movs	r1, #95	; 0x5f
   1fd20:	482e      	ldr	r0, [pc, #184]	; (1fddc <queue_insert+0xf8>)
   1fd22:	f003 f811 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fd26:	4628      	mov	r0, r5
   1fd28:	f001 fad8 	bl	212dc <z_spin_lock_set_owner>
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   1fd2c:	f1b9 0f00 	cmp.w	r9, #0
   1fd30:	d02c      	beq.n	1fd8c <queue_insert+0xa8>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   1fd32:	2008      	movs	r0, #8
   1fd34:	f7ff fcbc 	bl	1f6b0 <z_thread_malloc>
		if (anode == NULL) {
   1fd38:	b9c0      	cbnz	r0, 1fd6c <queue_insert+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1fd3a:	4628      	mov	r0, r5
   1fd3c:	f001 fabe 	bl	212bc <z_spin_unlock_valid>
   1fd40:	b960      	cbnz	r0, 1fd5c <queue_insert+0x78>
   1fd42:	4929      	ldr	r1, [pc, #164]	; (1fde8 <queue_insert+0x104>)
   1fd44:	2372      	movs	r3, #114	; 0x72
   1fd46:	4a25      	ldr	r2, [pc, #148]	; (1fddc <queue_insert+0xf8>)
   1fd48:	4825      	ldr	r0, [pc, #148]	; (1fde0 <queue_insert+0xfc>)
   1fd4a:	f002 fff0 	bl	22d2e <printk>
   1fd4e:	4827      	ldr	r0, [pc, #156]	; (1fdec <queue_insert+0x108>)
   1fd50:	f002 ffed 	bl	22d2e <printk>
   1fd54:	2172      	movs	r1, #114	; 0x72
   1fd56:	4821      	ldr	r0, [pc, #132]	; (1fddc <queue_insert+0xf8>)
   1fd58:	f002 fff6 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   1fd5c:	f387 8811 	msr	BASEPRI, r7
   1fd60:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   1fd64:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   1fd68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1fd6c:	2301      	movs	r3, #1
		anode->data = data;
   1fd6e:	f8c0 8004 	str.w	r8, [r0, #4]
   1fd72:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1fd74:	6803      	ldr	r3, [r0, #0]
   1fd76:	f003 0203 	and.w	r2, r3, #3
   1fd7a:	b95e      	cbnz	r6, 1fd94 <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fd7c:	6823      	ldr	r3, [r4, #0]
   1fd7e:	4313      	orrs	r3, r2
   1fd80:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1fd82:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1fd84:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1fd86:	b973      	cbnz	r3, 1fda6 <queue_insert+0xc2>
	list->tail = node;
   1fd88:	6060      	str	r0, [r4, #4]
   1fd8a:	e00c      	b.n	1fda6 <queue_insert+0xc2>
	node->next_and_flags = flags;
   1fd8c:	f8c8 9000 	str.w	r9, [r8]
   1fd90:	4640      	mov	r0, r8
   1fd92:	e7ef      	b.n	1fd74 <queue_insert+0x90>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fd94:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1fd96:	f033 0303 	bics.w	r3, r3, #3
   1fd9a:	d115      	bne.n	1fdc8 <queue_insert+0xe4>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fd9c:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1fd9e:	6862      	ldr	r2, [r4, #4]
   1fda0:	b962      	cbnz	r2, 1fdbc <queue_insert+0xd8>
	list->head = node;
   1fda2:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1fda6:	2104      	movs	r1, #4
   1fda8:	f104 000c 	add.w	r0, r4, #12
   1fdac:	f004 f8e7 	bl	23f7e <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1fdb0:	4628      	mov	r0, r5
   1fdb2:	4639      	mov	r1, r7
   1fdb4:	f000 f9e4 	bl	20180 <z_reschedule>
	return 0;
   1fdb8:	2000      	movs	r0, #0
   1fdba:	e7d5      	b.n	1fd68 <queue_insert+0x84>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fdbc:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fdbe:	f003 0303 	and.w	r3, r3, #3
   1fdc2:	4303      	orrs	r3, r0
   1fdc4:	6013      	str	r3, [r2, #0]
   1fdc6:	e7df      	b.n	1fd88 <queue_insert+0xa4>
   1fdc8:	4313      	orrs	r3, r2
   1fdca:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fdcc:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fdce:	f003 0303 	and.w	r3, r3, #3
   1fdd2:	4318      	orrs	r0, r3
   1fdd4:	6030      	str	r0, [r6, #0]
   1fdd6:	e7e6      	b.n	1fda6 <queue_insert+0xc2>
   1fdd8:	0002576e 	.word	0x0002576e
   1fddc:	0002574f 	.word	0x0002574f
   1fde0:	000255f3 	.word	0x000255f3
   1fde4:	00025783 	.word	0x00025783
   1fde8:	00025798 	.word	0x00025798
   1fdec:	000257af 	.word	0x000257af

0001fdf0 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   1fdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fdf4:	4605      	mov	r5, r0
   1fdf6:	b089      	sub	sp, #36	; 0x24
   1fdf8:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1fdfa:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1fdfe:	f04f 0320 	mov.w	r3, #32
   1fe02:	f3ef 8811 	mrs	r8, BASEPRI
   1fe06:	f383 8811 	msr	BASEPRI, r3
   1fe0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1fe0e:	4630      	mov	r0, r6
   1fe10:	f001 fa46 	bl	212a0 <z_spin_lock_valid>
   1fe14:	b960      	cbnz	r0, 1fe30 <z_impl_k_queue_get+0x40>
   1fe16:	495d      	ldr	r1, [pc, #372]	; (1ff8c <z_impl_k_queue_get+0x19c>)
   1fe18:	235f      	movs	r3, #95	; 0x5f
   1fe1a:	4a5d      	ldr	r2, [pc, #372]	; (1ff90 <z_impl_k_queue_get+0x1a0>)
   1fe1c:	485d      	ldr	r0, [pc, #372]	; (1ff94 <z_impl_k_queue_get+0x1a4>)
   1fe1e:	f002 ff86 	bl	22d2e <printk>
   1fe22:	485d      	ldr	r0, [pc, #372]	; (1ff98 <z_impl_k_queue_get+0x1a8>)
   1fe24:	f002 ff83 	bl	22d2e <printk>
   1fe28:	215f      	movs	r1, #95	; 0x5f
   1fe2a:	4859      	ldr	r0, [pc, #356]	; (1ff90 <z_impl_k_queue_get+0x1a0>)
   1fe2c:	f002 ff8c 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fe30:	4630      	mov	r0, r6
   1fe32:	f001 fa53 	bl	212dc <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   1fe36:	682c      	ldr	r4, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1fe38:	b32c      	cbz	r4, 1fe86 <z_impl_k_queue_get+0x96>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fe3a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1fe3c:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fe3e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1fe42:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1fe44:	4620      	mov	r0, r4
	list->head = node;
   1fe46:	602b      	str	r3, [r5, #0]
	list->tail = node;
   1fe48:	bf08      	it	eq
   1fe4a:	606b      	streq	r3, [r5, #4]
   1fe4c:	2101      	movs	r1, #1
   1fe4e:	f003 ff8d 	bl	23d6c <z_queue_node_peek>
   1fe52:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1fe54:	4630      	mov	r0, r6
   1fe56:	f001 fa31 	bl	212bc <z_spin_unlock_valid>
   1fe5a:	b960      	cbnz	r0, 1fe76 <z_impl_k_queue_get+0x86>
   1fe5c:	494f      	ldr	r1, [pc, #316]	; (1ff9c <z_impl_k_queue_get+0x1ac>)
   1fe5e:	2372      	movs	r3, #114	; 0x72
   1fe60:	4a4b      	ldr	r2, [pc, #300]	; (1ff90 <z_impl_k_queue_get+0x1a0>)
   1fe62:	484c      	ldr	r0, [pc, #304]	; (1ff94 <z_impl_k_queue_get+0x1a4>)
   1fe64:	f002 ff63 	bl	22d2e <printk>
   1fe68:	484d      	ldr	r0, [pc, #308]	; (1ffa0 <z_impl_k_queue_get+0x1b0>)
   1fe6a:	f002 ff60 	bl	22d2e <printk>
   1fe6e:	2172      	movs	r1, #114	; 0x72
   1fe70:	4847      	ldr	r0, [pc, #284]	; (1ff90 <z_impl_k_queue_get+0x1a0>)
   1fe72:	f002 ff69 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   1fe76:	f388 8811 	msr	BASEPRI, r8
   1fe7a:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   1fe7e:	4620      	mov	r0, r4
   1fe80:	b009      	add	sp, #36	; 0x24
   1fe82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe86:	4630      	mov	r0, r6
	if (timeout == K_NO_WAIT) {
   1fe88:	2f00      	cmp	r7, #0
   1fe8a:	d0e4      	beq.n	1fe56 <z_impl_k_queue_get+0x66>
   1fe8c:	f001 fa16 	bl	212bc <z_spin_unlock_valid>
   1fe90:	b960      	cbnz	r0, 1feac <z_impl_k_queue_get+0xbc>
   1fe92:	4942      	ldr	r1, [pc, #264]	; (1ff9c <z_impl_k_queue_get+0x1ac>)
   1fe94:	2372      	movs	r3, #114	; 0x72
   1fe96:	4a3e      	ldr	r2, [pc, #248]	; (1ff90 <z_impl_k_queue_get+0x1a0>)
   1fe98:	483e      	ldr	r0, [pc, #248]	; (1ff94 <z_impl_k_queue_get+0x1a4>)
   1fe9a:	f002 ff48 	bl	22d2e <printk>
   1fe9e:	4840      	ldr	r0, [pc, #256]	; (1ffa0 <z_impl_k_queue_get+0x1b0>)
   1fea0:	f002 ff45 	bl	22d2e <printk>
   1fea4:	2172      	movs	r1, #114	; 0x72
   1fea6:	483a      	ldr	r0, [pc, #232]	; (1ff90 <z_impl_k_queue_get+0x1a0>)
   1fea8:	f002 ff4e 	bl	22d48 <assert_post_action>
   1feac:	f388 8811 	msr	BASEPRI, r8
   1feb0:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   1feb4:	2200      	movs	r2, #0
   1feb6:	462b      	mov	r3, r5
   1feb8:	2104      	movs	r1, #4
   1feba:	a803      	add	r0, sp, #12
   1febc:	f002 f81a 	bl	21ef4 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   1fec0:	1c7a      	adds	r2, r7, #1
   1fec2:	d002      	beq.n	1feca <z_impl_k_queue_get+0xda>
   1fec4:	f004 f804 	bl	23ed0 <z_impl_k_uptime_get>
   1fec8:	4683      	mov	fp, r0
{
   1feca:	f04f 0900 	mov.w	r9, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1fece:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1ff90 <z_impl_k_queue_get+0x1a0>
   1fed2:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 1ff94 <z_impl_k_queue_get+0x1a4>
		event.state = K_POLL_STATE_NOT_READY;
   1fed6:	9b06      	ldr	r3, [sp, #24]
   1fed8:	f36f 3310 	bfc	r3, #12, #5
   1fedc:	9306      	str	r3, [sp, #24]
	if (z_syscall_trap()) {
		return (int) z_arch_syscall_invoke3(*(u32_t *)&events, *(u32_t *)&num_events, *(u32_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1fede:	2101      	movs	r1, #1
   1fee0:	eba7 0209 	sub.w	r2, r7, r9
   1fee4:	a803      	add	r0, sp, #12
   1fee6:	f002 f857 	bl	21f98 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   1feea:	b118      	cbz	r0, 1fef4 <z_impl_k_queue_get+0x104>
   1feec:	300b      	adds	r0, #11
   1feee:	d001      	beq.n	1fef4 <z_impl_k_queue_get+0x104>
			return NULL;
   1fef0:	2400      	movs	r4, #0
   1fef2:	e7c4      	b.n	1fe7e <z_impl_k_queue_get+0x8e>
	__asm__ volatile(
   1fef4:	f04f 0320 	mov.w	r3, #32
   1fef8:	f3ef 8211 	mrs	r2, BASEPRI
   1fefc:	f383 8811 	msr	BASEPRI, r3
   1ff00:	f3bf 8f6f 	isb	sy
   1ff04:	4630      	mov	r0, r6
   1ff06:	9201      	str	r2, [sp, #4]
   1ff08:	f001 f9ca 	bl	212a0 <z_spin_lock_valid>
   1ff0c:	b960      	cbnz	r0, 1ff28 <z_impl_k_queue_get+0x138>
   1ff0e:	491f      	ldr	r1, [pc, #124]	; (1ff8c <z_impl_k_queue_get+0x19c>)
   1ff10:	235f      	movs	r3, #95	; 0x5f
   1ff12:	4642      	mov	r2, r8
   1ff14:	4650      	mov	r0, sl
   1ff16:	f002 ff0a 	bl	22d2e <printk>
   1ff1a:	481f      	ldr	r0, [pc, #124]	; (1ff98 <z_impl_k_queue_get+0x1a8>)
   1ff1c:	f002 ff07 	bl	22d2e <printk>
   1ff20:	215f      	movs	r1, #95	; 0x5f
   1ff22:	4640      	mov	r0, r8
   1ff24:	f002 ff10 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ff28:	4630      	mov	r0, r6
   1ff2a:	f001 f9d7 	bl	212dc <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   1ff2e:	6828      	ldr	r0, [r5, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   1ff30:	b138      	cbz	r0, 1ff42 <z_impl_k_queue_get+0x152>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ff32:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1ff34:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ff36:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1ff3a:	4290      	cmp	r0, r2
	list->head = node;
   1ff3c:	602b      	str	r3, [r5, #0]
	list->tail = node;
   1ff3e:	bf08      	it	eq
   1ff40:	606b      	streq	r3, [r5, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   1ff42:	2101      	movs	r1, #1
   1ff44:	f003 ff12 	bl	23d6c <z_queue_node_peek>
   1ff48:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1ff4a:	4630      	mov	r0, r6
   1ff4c:	f001 f9b6 	bl	212bc <z_spin_unlock_valid>
   1ff50:	b960      	cbnz	r0, 1ff6c <z_impl_k_queue_get+0x17c>
   1ff52:	4912      	ldr	r1, [pc, #72]	; (1ff9c <z_impl_k_queue_get+0x1ac>)
   1ff54:	2372      	movs	r3, #114	; 0x72
   1ff56:	4642      	mov	r2, r8
   1ff58:	4650      	mov	r0, sl
   1ff5a:	f002 fee8 	bl	22d2e <printk>
   1ff5e:	4810      	ldr	r0, [pc, #64]	; (1ffa0 <z_impl_k_queue_get+0x1b0>)
   1ff60:	f002 fee5 	bl	22d2e <printk>
   1ff64:	2172      	movs	r1, #114	; 0x72
   1ff66:	4640      	mov	r0, r8
   1ff68:	f002 feee 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   1ff6c:	9b01      	ldr	r3, [sp, #4]
   1ff6e:	f383 8811 	msr	BASEPRI, r3
   1ff72:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   1ff76:	2c00      	cmp	r4, #0
   1ff78:	d181      	bne.n	1fe7e <z_impl_k_queue_get+0x8e>
   1ff7a:	1c7b      	adds	r3, r7, #1
   1ff7c:	d0ab      	beq.n	1fed6 <z_impl_k_queue_get+0xe6>
	return z_impl_k_uptime_get();
   1ff7e:	f003 ffa7 	bl	23ed0 <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   1ff82:	eba0 090b 	sub.w	r9, r0, fp
	} while (!val && !done);
   1ff86:	454f      	cmp	r7, r9
   1ff88:	daa5      	bge.n	1fed6 <z_impl_k_queue_get+0xe6>
   1ff8a:	e7b1      	b.n	1fef0 <z_impl_k_queue_get+0x100>
   1ff8c:	0002576e 	.word	0x0002576e
   1ff90:	0002574f 	.word	0x0002574f
   1ff94:	000255f3 	.word	0x000255f3
   1ff98:	00025783 	.word	0x00025783
   1ff9c:	00025798 	.word	0x00025798
   1ffa0:	000257af 	.word	0x000257af

0001ffa4 <resched.part.15>:
   1ffa4:	f3ef 8005 	mrs	r0, IPSR
   1ffa8:	280d      	cmp	r0, #13
   1ffaa:	d809      	bhi.n	1ffc0 <resched.part.15+0x1c>
   1ffac:	b128      	cbz	r0, 1ffba <resched.part.15+0x16>
   1ffae:	4b05      	ldr	r3, [pc, #20]	; (1ffc4 <resched.part.15+0x20>)
   1ffb0:	6858      	ldr	r0, [r3, #4]
   1ffb2:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   1ffb6:	f3c0 20c0 	ubfx	r0, r0, #11, #1
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
}
   1ffba:	f080 0001 	eor.w	r0, r0, #1
   1ffbe:	4770      	bx	lr
   1ffc0:	2001      	movs	r0, #1
   1ffc2:	e7fa      	b.n	1ffba <resched.part.15+0x16>
   1ffc4:	e000ed00 	.word	0xe000ed00

0001ffc8 <pended_on.isra.16>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   1ffc8:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   1ffca:	b510      	push	{r4, lr}
   1ffcc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   1ffce:	b95b      	cbnz	r3, 1ffe8 <pended_on.isra.16+0x20>
   1ffd0:	4906      	ldr	r1, [pc, #24]	; (1ffec <pended_on.isra.16+0x24>)
   1ffd2:	4807      	ldr	r0, [pc, #28]	; (1fff0 <pended_on.isra.16+0x28>)
   1ffd4:	f240 1383 	movw	r3, #387	; 0x183
   1ffd8:	4a06      	ldr	r2, [pc, #24]	; (1fff4 <pended_on.isra.16+0x2c>)
   1ffda:	f002 fea8 	bl	22d2e <printk>
   1ffde:	f240 1183 	movw	r1, #387	; 0x183
   1ffe2:	4804      	ldr	r0, [pc, #16]	; (1fff4 <pended_on.isra.16+0x2c>)
   1ffe4:	f002 feb0 	bl	22d48 <assert_post_action>
}
   1ffe8:	6820      	ldr	r0, [r4, #0]
   1ffea:	bd10      	pop	{r4, pc}
   1ffec:	000261e8 	.word	0x000261e8
   1fff0:	000255f3 	.word	0x000255f3
   1fff4:	000261cd 	.word	0x000261cd

0001fff8 <z_reset_time_slice>:
{
   1fff8:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   1fffa:	4c08      	ldr	r4, [pc, #32]	; (2001c <__kernel_ram_size+0x1c>)
   1fffc:	6823      	ldr	r3, [r4, #0]
   1fffe:	b15b      	cbz	r3, 20018 <__kernel_ram_size+0x18>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   20000:	f7ed fd24 	bl	da4c <z_clock_elapsed>
   20004:	6823      	ldr	r3, [r4, #0]
   20006:	4a06      	ldr	r2, [pc, #24]	; (20020 <__kernel_ram_size+0x20>)
   20008:	4418      	add	r0, r3
   2000a:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   2000c:	2100      	movs	r1, #0
}
   2000e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   20012:	4618      	mov	r0, r3
   20014:	f001 bc3a 	b.w	2188c <z_set_timeout_expiry>
}
   20018:	bd10      	pop	{r4, pc}
   2001a:	bf00      	nop
   2001c:	20025af4 	.word	0x20025af4
   20020:	20025ab4 	.word	0x20025ab4

00020024 <k_sched_time_slice_set>:
{
   20024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20026:	4607      	mov	r7, r0
   20028:	460d      	mov	r5, r1
	__asm__ volatile(
   2002a:	f04f 0320 	mov.w	r3, #32
   2002e:	f3ef 8411 	mrs	r4, BASEPRI
   20032:	f383 8811 	msr	BASEPRI, r3
   20036:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2003a:	481f      	ldr	r0, [pc, #124]	; (200b8 <k_sched_time_slice_set+0x94>)
   2003c:	f001 f930 	bl	212a0 <z_spin_lock_valid>
   20040:	b960      	cbnz	r0, 2005c <k_sched_time_slice_set+0x38>
   20042:	491e      	ldr	r1, [pc, #120]	; (200bc <k_sched_time_slice_set+0x98>)
   20044:	235f      	movs	r3, #95	; 0x5f
   20046:	4a1e      	ldr	r2, [pc, #120]	; (200c0 <k_sched_time_slice_set+0x9c>)
   20048:	481e      	ldr	r0, [pc, #120]	; (200c4 <k_sched_time_slice_set+0xa0>)
   2004a:	f002 fe70 	bl	22d2e <printk>
   2004e:	481e      	ldr	r0, [pc, #120]	; (200c8 <k_sched_time_slice_set+0xa4>)
   20050:	f002 fe6d 	bl	22d2e <printk>
   20054:	215f      	movs	r1, #95	; 0x5f
   20056:	481a      	ldr	r0, [pc, #104]	; (200c0 <k_sched_time_slice_set+0x9c>)
   20058:	f002 fe76 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   2005c:	4816      	ldr	r0, [pc, #88]	; (200b8 <k_sched_time_slice_set+0x94>)
   2005e:	f001 f93d 	bl	212dc <z_spin_lock_set_owner>

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
   20062:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   20066:	2200      	movs	r2, #0
   20068:	f240 30e7 	movw	r0, #999	; 0x3e7
   2006c:	2100      	movs	r1, #0
   2006e:	4b17      	ldr	r3, [pc, #92]	; (200cc <k_sched_time_slice_set+0xa8>)
   20070:	fbc6 0107 	smlal	r0, r1, r6, r7
   20074:	611a      	str	r2, [r3, #16]
   20076:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2007a:	2300      	movs	r3, #0
   2007c:	f7ec f8d0 	bl	c220 <__aeabi_ldivmod>
   20080:	4b13      	ldr	r3, [pc, #76]	; (200d0 <k_sched_time_slice_set+0xac>)
   20082:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   20084:	4b13      	ldr	r3, [pc, #76]	; (200d4 <k_sched_time_slice_set+0xb0>)
   20086:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   20088:	f7ff ffb6 	bl	1fff8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2008c:	480a      	ldr	r0, [pc, #40]	; (200b8 <k_sched_time_slice_set+0x94>)
   2008e:	f001 f915 	bl	212bc <z_spin_unlock_valid>
   20092:	b960      	cbnz	r0, 200ae <k_sched_time_slice_set+0x8a>
   20094:	4910      	ldr	r1, [pc, #64]	; (200d8 <k_sched_time_slice_set+0xb4>)
   20096:	2372      	movs	r3, #114	; 0x72
   20098:	4a09      	ldr	r2, [pc, #36]	; (200c0 <k_sched_time_slice_set+0x9c>)
   2009a:	480a      	ldr	r0, [pc, #40]	; (200c4 <k_sched_time_slice_set+0xa0>)
   2009c:	f002 fe47 	bl	22d2e <printk>
   200a0:	480e      	ldr	r0, [pc, #56]	; (200dc <k_sched_time_slice_set+0xb8>)
   200a2:	f002 fe44 	bl	22d2e <printk>
   200a6:	2172      	movs	r1, #114	; 0x72
   200a8:	4805      	ldr	r0, [pc, #20]	; (200c0 <k_sched_time_slice_set+0x9c>)
   200aa:	f002 fe4d 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   200ae:	f384 8811 	msr	BASEPRI, r4
   200b2:	f3bf 8f6f 	isb	sy
}
   200b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   200b8:	20025aec 	.word	0x20025aec
   200bc:	0002576e 	.word	0x0002576e
   200c0:	0002574f 	.word	0x0002574f
   200c4:	000255f3 	.word	0x000255f3
   200c8:	00025783 	.word	0x00025783
   200cc:	20025ab4 	.word	0x20025ab4
   200d0:	20025af4 	.word	0x20025af4
   200d4:	20025af0 	.word	0x20025af0
   200d8:	00025798 	.word	0x00025798
   200dc:	000257af 	.word	0x000257af

000200e0 <z_unpend_thread_no_timeout>:
{
   200e0:	b538      	push	{r3, r4, r5, lr}
   200e2:	4604      	mov	r4, r0
	__asm__ volatile(
   200e4:	f04f 0320 	mov.w	r3, #32
   200e8:	f3ef 8511 	mrs	r5, BASEPRI
   200ec:	f383 8811 	msr	BASEPRI, r3
   200f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   200f4:	481b      	ldr	r0, [pc, #108]	; (20164 <z_unpend_thread_no_timeout+0x84>)
   200f6:	f001 f8d3 	bl	212a0 <z_spin_lock_valid>
   200fa:	b960      	cbnz	r0, 20116 <z_unpend_thread_no_timeout+0x36>
   200fc:	491a      	ldr	r1, [pc, #104]	; (20168 <z_unpend_thread_no_timeout+0x88>)
   200fe:	235f      	movs	r3, #95	; 0x5f
   20100:	4a1a      	ldr	r2, [pc, #104]	; (2016c <z_unpend_thread_no_timeout+0x8c>)
   20102:	481b      	ldr	r0, [pc, #108]	; (20170 <z_unpend_thread_no_timeout+0x90>)
   20104:	f002 fe13 	bl	22d2e <printk>
   20108:	481a      	ldr	r0, [pc, #104]	; (20174 <z_unpend_thread_no_timeout+0x94>)
   2010a:	f002 fe10 	bl	22d2e <printk>
   2010e:	215f      	movs	r1, #95	; 0x5f
   20110:	4816      	ldr	r0, [pc, #88]	; (2016c <z_unpend_thread_no_timeout+0x8c>)
   20112:	f002 fe19 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   20116:	4813      	ldr	r0, [pc, #76]	; (20164 <z_unpend_thread_no_timeout+0x84>)
   20118:	f001 f8e0 	bl	212dc <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2011c:	f104 0008 	add.w	r0, r4, #8
   20120:	f7ff ff52 	bl	1ffc8 <pended_on.isra.16>
   20124:	4621      	mov	r1, r4
   20126:	f000 f8e5 	bl	202f4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2012a:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2012c:	480d      	ldr	r0, [pc, #52]	; (20164 <z_unpend_thread_no_timeout+0x84>)
   2012e:	f023 0302 	bic.w	r3, r3, #2
   20132:	7363      	strb	r3, [r4, #13]
   20134:	f001 f8c2 	bl	212bc <z_spin_unlock_valid>
   20138:	b960      	cbnz	r0, 20154 <z_unpend_thread_no_timeout+0x74>
   2013a:	490f      	ldr	r1, [pc, #60]	; (20178 <z_unpend_thread_no_timeout+0x98>)
   2013c:	2372      	movs	r3, #114	; 0x72
   2013e:	4a0b      	ldr	r2, [pc, #44]	; (2016c <z_unpend_thread_no_timeout+0x8c>)
   20140:	480b      	ldr	r0, [pc, #44]	; (20170 <z_unpend_thread_no_timeout+0x90>)
   20142:	f002 fdf4 	bl	22d2e <printk>
   20146:	480d      	ldr	r0, [pc, #52]	; (2017c <z_unpend_thread_no_timeout+0x9c>)
   20148:	f002 fdf1 	bl	22d2e <printk>
   2014c:	2172      	movs	r1, #114	; 0x72
   2014e:	4807      	ldr	r0, [pc, #28]	; (2016c <z_unpend_thread_no_timeout+0x8c>)
   20150:	f002 fdfa 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   20154:	f385 8811 	msr	BASEPRI, r5
   20158:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   2015c:	2300      	movs	r3, #0
   2015e:	60a3      	str	r3, [r4, #8]
}
   20160:	bd38      	pop	{r3, r4, r5, pc}
   20162:	bf00      	nop
   20164:	20025aec 	.word	0x20025aec
   20168:	0002576e 	.word	0x0002576e
   2016c:	0002574f 	.word	0x0002574f
   20170:	000255f3 	.word	0x000255f3
   20174:	00025783 	.word	0x00025783
   20178:	00025798 	.word	0x00025798
   2017c:	000257af 	.word	0x000257af

00020180 <z_reschedule>:

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   20180:	b510      	push	{r4, lr}
   20182:	4602      	mov	r2, r0
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
   20184:	460c      	mov	r4, r1
   20186:	b9c1      	cbnz	r1, 201ba <z_reschedule+0x3a>
   20188:	f7ff ff0c 	bl	1ffa4 <resched.part.15>
	if (resched(key.key)) {
   2018c:	b1a8      	cbz	r0, 201ba <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2018e:	4610      	mov	r0, r2
   20190:	f001 f894 	bl	212bc <z_spin_unlock_valid>
   20194:	b960      	cbnz	r0, 201b0 <z_reschedule+0x30>
   20196:	4914      	ldr	r1, [pc, #80]	; (201e8 <z_reschedule+0x68>)
   20198:	2389      	movs	r3, #137	; 0x89
   2019a:	4a14      	ldr	r2, [pc, #80]	; (201ec <z_reschedule+0x6c>)
   2019c:	4814      	ldr	r0, [pc, #80]	; (201f0 <z_reschedule+0x70>)
   2019e:	f002 fdc6 	bl	22d2e <printk>
   201a2:	4814      	ldr	r0, [pc, #80]	; (201f4 <z_reschedule+0x74>)
   201a4:	f002 fdc3 	bl	22d2e <printk>
   201a8:	2189      	movs	r1, #137	; 0x89
   201aa:	4810      	ldr	r0, [pc, #64]	; (201ec <z_reschedule+0x6c>)
   201ac:	f002 fdcc 	bl	22d48 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   201b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   201b4:	2000      	movs	r0, #0
   201b6:	f7ed bd4f 	b.w	dc58 <z_arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   201ba:	4610      	mov	r0, r2
   201bc:	f001 f87e 	bl	212bc <z_spin_unlock_valid>
   201c0:	b960      	cbnz	r0, 201dc <z_reschedule+0x5c>
   201c2:	4909      	ldr	r1, [pc, #36]	; (201e8 <z_reschedule+0x68>)
   201c4:	2372      	movs	r3, #114	; 0x72
   201c6:	4a09      	ldr	r2, [pc, #36]	; (201ec <z_reschedule+0x6c>)
   201c8:	4809      	ldr	r0, [pc, #36]	; (201f0 <z_reschedule+0x70>)
   201ca:	f002 fdb0 	bl	22d2e <printk>
   201ce:	4809      	ldr	r0, [pc, #36]	; (201f4 <z_reschedule+0x74>)
   201d0:	f002 fdad 	bl	22d2e <printk>
   201d4:	2172      	movs	r1, #114	; 0x72
   201d6:	4805      	ldr	r0, [pc, #20]	; (201ec <z_reschedule+0x6c>)
   201d8:	f002 fdb6 	bl	22d48 <assert_post_action>
   201dc:	f384 8811 	msr	BASEPRI, r4
   201e0:	f3bf 8f6f 	isb	sy
   201e4:	bd10      	pop	{r4, pc}
   201e6:	bf00      	nop
   201e8:	00025798 	.word	0x00025798
   201ec:	0002574f 	.word	0x0002574f
   201f0:	000255f3 	.word	0x000255f3
   201f4:	000257af 	.word	0x000257af

000201f8 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   201f8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   201fa:	f04f 0320 	mov.w	r3, #32
   201fe:	f3ef 8511 	mrs	r5, BASEPRI
   20202:	f383 8811 	msr	BASEPRI, r3
   20206:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2020a:	482d      	ldr	r0, [pc, #180]	; (202c0 <k_sched_lock+0xc8>)
   2020c:	f001 f848 	bl	212a0 <z_spin_lock_valid>
   20210:	b960      	cbnz	r0, 2022c <k_sched_lock+0x34>
   20212:	492c      	ldr	r1, [pc, #176]	; (202c4 <k_sched_lock+0xcc>)
   20214:	235f      	movs	r3, #95	; 0x5f
   20216:	4a2c      	ldr	r2, [pc, #176]	; (202c8 <k_sched_lock+0xd0>)
   20218:	482c      	ldr	r0, [pc, #176]	; (202cc <k_sched_lock+0xd4>)
   2021a:	f002 fd88 	bl	22d2e <printk>
   2021e:	482c      	ldr	r0, [pc, #176]	; (202d0 <k_sched_lock+0xd8>)
   20220:	f002 fd85 	bl	22d2e <printk>
   20224:	215f      	movs	r1, #95	; 0x5f
   20226:	4828      	ldr	r0, [pc, #160]	; (202c8 <k_sched_lock+0xd0>)
   20228:	f002 fd8e 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   2022c:	4824      	ldr	r0, [pc, #144]	; (202c0 <k_sched_lock+0xc8>)
   2022e:	f001 f855 	bl	212dc <z_spin_lock_set_owner>
   20232:	f3ef 8305 	mrs	r3, IPSR
   20236:	2b0d      	cmp	r3, #13
   20238:	d804      	bhi.n	20244 <k_sched_lock+0x4c>
   2023a:	b193      	cbz	r3, 20262 <k_sched_lock+0x6a>
   2023c:	4b25      	ldr	r3, [pc, #148]	; (202d4 <k_sched_lock+0xdc>)
   2023e:	685b      	ldr	r3, [r3, #4]
   20240:	051b      	lsls	r3, r3, #20
   20242:	d40e      	bmi.n	20262 <k_sched_lock+0x6a>
	__ASSERT(!z_arch_is_in_isr(), "");
   20244:	4924      	ldr	r1, [pc, #144]	; (202d8 <k_sched_lock+0xe0>)
   20246:	f44f 7386 	mov.w	r3, #268	; 0x10c
   2024a:	4a24      	ldr	r2, [pc, #144]	; (202dc <k_sched_lock+0xe4>)
   2024c:	481f      	ldr	r0, [pc, #124]	; (202cc <k_sched_lock+0xd4>)
   2024e:	f002 fd6e 	bl	22d2e <printk>
   20252:	4823      	ldr	r0, [pc, #140]	; (202e0 <k_sched_lock+0xe8>)
   20254:	f002 fd6b 	bl	22d2e <printk>
   20258:	f44f 7186 	mov.w	r1, #268	; 0x10c
   2025c:	481f      	ldr	r0, [pc, #124]	; (202dc <k_sched_lock+0xe4>)
   2025e:	f002 fd73 	bl	22d48 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   20262:	4c20      	ldr	r4, [pc, #128]	; (202e4 <k_sched_lock+0xec>)
   20264:	68a2      	ldr	r2, [r4, #8]
   20266:	7bd2      	ldrb	r2, [r2, #15]
   20268:	2a01      	cmp	r2, #1
   2026a:	d10e      	bne.n	2028a <k_sched_lock+0x92>
   2026c:	491e      	ldr	r1, [pc, #120]	; (202e8 <k_sched_lock+0xf0>)
   2026e:	f240 130d 	movw	r3, #269	; 0x10d
   20272:	4a1a      	ldr	r2, [pc, #104]	; (202dc <k_sched_lock+0xe4>)
   20274:	4815      	ldr	r0, [pc, #84]	; (202cc <k_sched_lock+0xd4>)
   20276:	f002 fd5a 	bl	22d2e <printk>
   2027a:	4819      	ldr	r0, [pc, #100]	; (202e0 <k_sched_lock+0xe8>)
   2027c:	f002 fd57 	bl	22d2e <printk>
   20280:	f240 110d 	movw	r1, #269	; 0x10d
   20284:	4815      	ldr	r0, [pc, #84]	; (202dc <k_sched_lock+0xe4>)
   20286:	f002 fd5f 	bl	22d48 <assert_post_action>
	--_current->base.sched_locked;
   2028a:	68a2      	ldr	r2, [r4, #8]
   2028c:	7bd3      	ldrb	r3, [r2, #15]
   2028e:	3b01      	subs	r3, #1
   20290:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20292:	480b      	ldr	r0, [pc, #44]	; (202c0 <k_sched_lock+0xc8>)
   20294:	f001 f812 	bl	212bc <z_spin_unlock_valid>
   20298:	b960      	cbnz	r0, 202b4 <k_sched_lock+0xbc>
   2029a:	4914      	ldr	r1, [pc, #80]	; (202ec <k_sched_lock+0xf4>)
   2029c:	2372      	movs	r3, #114	; 0x72
   2029e:	4a0a      	ldr	r2, [pc, #40]	; (202c8 <k_sched_lock+0xd0>)
   202a0:	480a      	ldr	r0, [pc, #40]	; (202cc <k_sched_lock+0xd4>)
   202a2:	f002 fd44 	bl	22d2e <printk>
   202a6:	4812      	ldr	r0, [pc, #72]	; (202f0 <k_sched_lock+0xf8>)
   202a8:	f002 fd41 	bl	22d2e <printk>
   202ac:	2172      	movs	r1, #114	; 0x72
   202ae:	4806      	ldr	r0, [pc, #24]	; (202c8 <k_sched_lock+0xd0>)
   202b0:	f002 fd4a 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   202b4:	f385 8811 	msr	BASEPRI, r5
   202b8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   202bc:	bd38      	pop	{r3, r4, r5, pc}
   202be:	bf00      	nop
   202c0:	20025aec 	.word	0x20025aec
   202c4:	0002576e 	.word	0x0002576e
   202c8:	0002574f 	.word	0x0002574f
   202cc:	000255f3 	.word	0x000255f3
   202d0:	00025783 	.word	0x00025783
   202d4:	e000ed00 	.word	0xe000ed00
   202d8:	00026169 	.word	0x00026169
   202dc:	00026145 	.word	0x00026145
   202e0:	00026086 	.word	0x00026086
   202e4:	20025ab4 	.word	0x20025ab4
   202e8:	0002617d 	.word	0x0002617d
   202ec:	00025798 	.word	0x00025798
   202f0:	000257af 	.word	0x000257af

000202f4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   202f4:	4b11      	ldr	r3, [pc, #68]	; (2033c <z_priq_dumb_remove+0x48>)
{
   202f6:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   202f8:	f103 0228 	add.w	r2, r3, #40	; 0x28
   202fc:	4282      	cmp	r2, r0
{
   202fe:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   20300:	d105      	bne.n	2030e <z_priq_dumb_remove+0x1a>
   20302:	689b      	ldr	r3, [r3, #8]
   20304:	428b      	cmp	r3, r1
   20306:	d102      	bne.n	2030e <z_priq_dumb_remove+0x1a>
   20308:	7b4b      	ldrb	r3, [r1, #13]
   2030a:	06db      	lsls	r3, r3, #27
   2030c:	d115      	bne.n	2033a <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2030e:	4b0c      	ldr	r3, [pc, #48]	; (20340 <z_priq_dumb_remove+0x4c>)
   20310:	429c      	cmp	r4, r3
   20312:	d10b      	bne.n	2032c <z_priq_dumb_remove+0x38>
   20314:	490b      	ldr	r1, [pc, #44]	; (20344 <z_priq_dumb_remove+0x50>)
   20316:	480c      	ldr	r0, [pc, #48]	; (20348 <z_priq_dumb_remove+0x54>)
   20318:	f44f 7325 	mov.w	r3, #660	; 0x294
   2031c:	4a0b      	ldr	r2, [pc, #44]	; (2034c <z_priq_dumb_remove+0x58>)
   2031e:	f002 fd06 	bl	22d2e <printk>
   20322:	f44f 7125 	mov.w	r1, #660	; 0x294
   20326:	4809      	ldr	r0, [pc, #36]	; (2034c <z_priq_dumb_remove+0x58>)
   20328:	f002 fd0e 	bl	22d48 <assert_post_action>
	node->prev->next = node->next;
   2032c:	e9d4 3200 	ldrd	r3, r2, [r4]
   20330:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   20332:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20334:	2300      	movs	r3, #0
	node->prev = NULL;
   20336:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   2033a:	bd10      	pop	{r4, pc}
   2033c:	20025ab4 	.word	0x20025ab4
   20340:	200218e4 	.word	0x200218e4
   20344:	0002621e 	.word	0x0002621e
   20348:	000255f3 	.word	0x000255f3
   2034c:	000261cd 	.word	0x000261cd

00020350 <z_unpend_thread>:
{
   20350:	b538      	push	{r3, r4, r5, lr}
   20352:	4604      	mov	r4, r0
	__asm__ volatile(
   20354:	f04f 0320 	mov.w	r3, #32
   20358:	f3ef 8511 	mrs	r5, BASEPRI
   2035c:	f383 8811 	msr	BASEPRI, r3
   20360:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20364:	481d      	ldr	r0, [pc, #116]	; (203dc <z_unpend_thread+0x8c>)
   20366:	f000 ff9b 	bl	212a0 <z_spin_lock_valid>
   2036a:	b960      	cbnz	r0, 20386 <z_unpend_thread+0x36>
   2036c:	491c      	ldr	r1, [pc, #112]	; (203e0 <z_unpend_thread+0x90>)
   2036e:	235f      	movs	r3, #95	; 0x5f
   20370:	4a1c      	ldr	r2, [pc, #112]	; (203e4 <z_unpend_thread+0x94>)
   20372:	481d      	ldr	r0, [pc, #116]	; (203e8 <z_unpend_thread+0x98>)
   20374:	f002 fcdb 	bl	22d2e <printk>
   20378:	481c      	ldr	r0, [pc, #112]	; (203ec <z_unpend_thread+0x9c>)
   2037a:	f002 fcd8 	bl	22d2e <printk>
   2037e:	215f      	movs	r1, #95	; 0x5f
   20380:	4818      	ldr	r0, [pc, #96]	; (203e4 <z_unpend_thread+0x94>)
   20382:	f002 fce1 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   20386:	4815      	ldr	r0, [pc, #84]	; (203dc <z_unpend_thread+0x8c>)
   20388:	f000 ffa8 	bl	212dc <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2038c:	f104 0008 	add.w	r0, r4, #8
   20390:	f7ff fe1a 	bl	1ffc8 <pended_on.isra.16>
   20394:	4621      	mov	r1, r4
   20396:	f7ff ffad 	bl	202f4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2039a:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2039c:	480f      	ldr	r0, [pc, #60]	; (203dc <z_unpend_thread+0x8c>)
   2039e:	f023 0302 	bic.w	r3, r3, #2
   203a2:	7363      	strb	r3, [r4, #13]
   203a4:	f000 ff8a 	bl	212bc <z_spin_unlock_valid>
   203a8:	b960      	cbnz	r0, 203c4 <z_unpend_thread+0x74>
   203aa:	4911      	ldr	r1, [pc, #68]	; (203f0 <z_unpend_thread+0xa0>)
   203ac:	2372      	movs	r3, #114	; 0x72
   203ae:	4a0d      	ldr	r2, [pc, #52]	; (203e4 <z_unpend_thread+0x94>)
   203b0:	480d      	ldr	r0, [pc, #52]	; (203e8 <z_unpend_thread+0x98>)
   203b2:	f002 fcbc 	bl	22d2e <printk>
   203b6:	480f      	ldr	r0, [pc, #60]	; (203f4 <z_unpend_thread+0xa4>)
   203b8:	f002 fcb9 	bl	22d2e <printk>
   203bc:	2172      	movs	r1, #114	; 0x72
   203be:	4809      	ldr	r0, [pc, #36]	; (203e4 <z_unpend_thread+0x94>)
   203c0:	f002 fcc2 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   203c4:	f385 8811 	msr	BASEPRI, r5
   203c8:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   203cc:	2300      	movs	r3, #0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   203ce:	f104 0018 	add.w	r0, r4, #24
   203d2:	60a3      	str	r3, [r4, #8]
}
   203d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   203d8:	f001 b9c6 	b.w	21768 <z_abort_timeout>
   203dc:	20025aec 	.word	0x20025aec
   203e0:	0002576e 	.word	0x0002576e
   203e4:	0002574f 	.word	0x0002574f
   203e8:	000255f3 	.word	0x000255f3
   203ec:	00025783 	.word	0x00025783
   203f0:	00025798 	.word	0x00025798
   203f4:	000257af 	.word	0x000257af

000203f8 <update_cache>:
{
   203f8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   203fa:	4c15      	ldr	r4, [pc, #84]	; (20450 <update_cache+0x58>)
{
   203fc:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   203fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
   20402:	f003 fcf9 	bl	23df8 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   20406:	4605      	mov	r5, r0
   20408:	b900      	cbnz	r0, 2040c <update_cache+0x14>
   2040a:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   2040c:	b9ca      	cbnz	r2, 20442 <update_cache+0x4a>
	__ASSERT(_current != NULL, "");
   2040e:	68a3      	ldr	r3, [r4, #8]
   20410:	b963      	cbnz	r3, 2042c <update_cache+0x34>
   20412:	4910      	ldr	r1, [pc, #64]	; (20454 <update_cache+0x5c>)
   20414:	2375      	movs	r3, #117	; 0x75
   20416:	4a10      	ldr	r2, [pc, #64]	; (20458 <update_cache+0x60>)
   20418:	4810      	ldr	r0, [pc, #64]	; (2045c <update_cache+0x64>)
   2041a:	f002 fc88 	bl	22d2e <printk>
   2041e:	4810      	ldr	r0, [pc, #64]	; (20460 <update_cache+0x68>)
   20420:	f002 fc85 	bl	22d2e <printk>
   20424:	2175      	movs	r1, #117	; 0x75
   20426:	480c      	ldr	r0, [pc, #48]	; (20458 <update_cache+0x60>)
   20428:	f002 fc8e 	bl	22d48 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   2042c:	68a3      	ldr	r3, [r4, #8]
   2042e:	7b5a      	ldrb	r2, [r3, #13]
   20430:	06d2      	lsls	r2, r2, #27
   20432:	d106      	bne.n	20442 <update_cache+0x4a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   20434:	69aa      	ldr	r2, [r5, #24]
   20436:	b922      	cbnz	r2, 20442 <update_cache+0x4a>
	if (is_preempt(_current) || is_metairq(th)) {
   20438:	89da      	ldrh	r2, [r3, #14]
   2043a:	2a7f      	cmp	r2, #127	; 0x7f
   2043c:	d901      	bls.n	20442 <update_cache+0x4a>
		_kernel.ready_q.cache = _current;
   2043e:	6263      	str	r3, [r4, #36]	; 0x24
}
   20440:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   20442:	68a3      	ldr	r3, [r4, #8]
   20444:	42ab      	cmp	r3, r5
   20446:	d001      	beq.n	2044c <update_cache+0x54>
			z_reset_time_slice();
   20448:	f7ff fdd6 	bl	1fff8 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
   2044c:	6265      	str	r5, [r4, #36]	; 0x24
}
   2044e:	e7f7      	b.n	20440 <update_cache+0x48>
   20450:	20025ab4 	.word	0x20025ab4
   20454:	000261ff 	.word	0x000261ff
   20458:	000261cd 	.word	0x000261cd
   2045c:	000255f3 	.word	0x000255f3
   20460:	00026086 	.word	0x00026086

00020464 <k_sched_unlock>:
{
   20464:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current->base.sched_locked != 0, "");
   20466:	4c33      	ldr	r4, [pc, #204]	; (20534 <k_sched_unlock+0xd0>)
   20468:	68a2      	ldr	r2, [r4, #8]
   2046a:	7bd2      	ldrb	r2, [r2, #15]
   2046c:	b972      	cbnz	r2, 2048c <k_sched_unlock+0x28>
   2046e:	4932      	ldr	r1, [pc, #200]	; (20538 <k_sched_unlock+0xd4>)
   20470:	f240 232d 	movw	r3, #557	; 0x22d
   20474:	4a31      	ldr	r2, [pc, #196]	; (2053c <k_sched_unlock+0xd8>)
   20476:	4832      	ldr	r0, [pc, #200]	; (20540 <k_sched_unlock+0xdc>)
   20478:	f002 fc59 	bl	22d2e <printk>
   2047c:	4831      	ldr	r0, [pc, #196]	; (20544 <k_sched_unlock+0xe0>)
   2047e:	f002 fc56 	bl	22d2e <printk>
   20482:	f240 212d 	movw	r1, #557	; 0x22d
   20486:	482d      	ldr	r0, [pc, #180]	; (2053c <k_sched_unlock+0xd8>)
   20488:	f002 fc5e 	bl	22d48 <assert_post_action>
   2048c:	f3ef 8305 	mrs	r3, IPSR
   20490:	2b0d      	cmp	r3, #13
   20492:	d804      	bhi.n	2049e <k_sched_unlock+0x3a>
   20494:	b193      	cbz	r3, 204bc <k_sched_unlock+0x58>
   20496:	4b2c      	ldr	r3, [pc, #176]	; (20548 <k_sched_unlock+0xe4>)
   20498:	685b      	ldr	r3, [r3, #4]
   2049a:	051b      	lsls	r3, r3, #20
   2049c:	d40e      	bmi.n	204bc <k_sched_unlock+0x58>
	__ASSERT(!z_arch_is_in_isr(), "");
   2049e:	492b      	ldr	r1, [pc, #172]	; (2054c <k_sched_unlock+0xe8>)
   204a0:	f240 232e 	movw	r3, #558	; 0x22e
   204a4:	4a25      	ldr	r2, [pc, #148]	; (2053c <k_sched_unlock+0xd8>)
   204a6:	4826      	ldr	r0, [pc, #152]	; (20540 <k_sched_unlock+0xdc>)
   204a8:	f002 fc41 	bl	22d2e <printk>
   204ac:	4825      	ldr	r0, [pc, #148]	; (20544 <k_sched_unlock+0xe0>)
   204ae:	f002 fc3e 	bl	22d2e <printk>
   204b2:	f240 212e 	movw	r1, #558	; 0x22e
   204b6:	4821      	ldr	r0, [pc, #132]	; (2053c <k_sched_unlock+0xd8>)
   204b8:	f002 fc46 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   204bc:	f04f 0320 	mov.w	r3, #32
   204c0:	f3ef 8511 	mrs	r5, BASEPRI
   204c4:	f383 8811 	msr	BASEPRI, r3
   204c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   204cc:	4820      	ldr	r0, [pc, #128]	; (20550 <k_sched_unlock+0xec>)
   204ce:	f000 fee7 	bl	212a0 <z_spin_lock_valid>
   204d2:	b960      	cbnz	r0, 204ee <k_sched_unlock+0x8a>
   204d4:	491f      	ldr	r1, [pc, #124]	; (20554 <k_sched_unlock+0xf0>)
   204d6:	235f      	movs	r3, #95	; 0x5f
   204d8:	4a1f      	ldr	r2, [pc, #124]	; (20558 <k_sched_unlock+0xf4>)
   204da:	4819      	ldr	r0, [pc, #100]	; (20540 <k_sched_unlock+0xdc>)
   204dc:	f002 fc27 	bl	22d2e <printk>
   204e0:	481e      	ldr	r0, [pc, #120]	; (2055c <k_sched_unlock+0xf8>)
   204e2:	f002 fc24 	bl	22d2e <printk>
   204e6:	215f      	movs	r1, #95	; 0x5f
   204e8:	481b      	ldr	r0, [pc, #108]	; (20558 <k_sched_unlock+0xf4>)
   204ea:	f002 fc2d 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   204ee:	4818      	ldr	r0, [pc, #96]	; (20550 <k_sched_unlock+0xec>)
   204f0:	f000 fef4 	bl	212dc <z_spin_lock_set_owner>
		++_current->base.sched_locked;
   204f4:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   204f6:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   204f8:	7bd3      	ldrb	r3, [r2, #15]
   204fa:	3301      	adds	r3, #1
   204fc:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   204fe:	f7ff ff7b 	bl	203f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20502:	4813      	ldr	r0, [pc, #76]	; (20550 <k_sched_unlock+0xec>)
   20504:	f000 feda 	bl	212bc <z_spin_unlock_valid>
   20508:	b960      	cbnz	r0, 20524 <k_sched_unlock+0xc0>
   2050a:	4915      	ldr	r1, [pc, #84]	; (20560 <k_sched_unlock+0xfc>)
   2050c:	2372      	movs	r3, #114	; 0x72
   2050e:	4a12      	ldr	r2, [pc, #72]	; (20558 <k_sched_unlock+0xf4>)
   20510:	480b      	ldr	r0, [pc, #44]	; (20540 <k_sched_unlock+0xdc>)
   20512:	f002 fc0c 	bl	22d2e <printk>
   20516:	4813      	ldr	r0, [pc, #76]	; (20564 <k_sched_unlock+0x100>)
   20518:	f002 fc09 	bl	22d2e <printk>
   2051c:	2172      	movs	r1, #114	; 0x72
   2051e:	480e      	ldr	r0, [pc, #56]	; (20558 <k_sched_unlock+0xf4>)
   20520:	f002 fc12 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   20524:	f385 8811 	msr	BASEPRI, r5
   20528:	f3bf 8f6f 	isb	sy
}
   2052c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   20530:	f003 bc58 	b.w	23de4 <z_reschedule_unlocked>
   20534:	20025ab4 	.word	0x20025ab4
   20538:	000261a5 	.word	0x000261a5
   2053c:	000261cd 	.word	0x000261cd
   20540:	000255f3 	.word	0x000255f3
   20544:	00026086 	.word	0x00026086
   20548:	e000ed00 	.word	0xe000ed00
   2054c:	00026169 	.word	0x00026169
   20550:	20025aec 	.word	0x20025aec
   20554:	0002576e 	.word	0x0002576e
   20558:	0002574f 	.word	0x0002574f
   2055c:	00025783 	.word	0x00025783
   20560:	00025798 	.word	0x00025798
   20564:	000257af 	.word	0x000257af

00020568 <z_add_thread_to_ready_q>:
{
   20568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2056a:	4604      	mov	r4, r0
	__asm__ volatile(
   2056c:	f04f 0320 	mov.w	r3, #32
   20570:	f3ef 8511 	mrs	r5, BASEPRI
   20574:	f383 8811 	msr	BASEPRI, r3
   20578:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2057c:	482e      	ldr	r0, [pc, #184]	; (20638 <z_add_thread_to_ready_q+0xd0>)
   2057e:	f000 fe8f 	bl	212a0 <z_spin_lock_valid>
   20582:	b960      	cbnz	r0, 2059e <z_add_thread_to_ready_q+0x36>
   20584:	492d      	ldr	r1, [pc, #180]	; (2063c <z_add_thread_to_ready_q+0xd4>)
   20586:	235f      	movs	r3, #95	; 0x5f
   20588:	4a2d      	ldr	r2, [pc, #180]	; (20640 <z_add_thread_to_ready_q+0xd8>)
   2058a:	482e      	ldr	r0, [pc, #184]	; (20644 <z_add_thread_to_ready_q+0xdc>)
   2058c:	f002 fbcf 	bl	22d2e <printk>
   20590:	482d      	ldr	r0, [pc, #180]	; (20648 <z_add_thread_to_ready_q+0xe0>)
   20592:	f002 fbcc 	bl	22d2e <printk>
   20596:	215f      	movs	r1, #95	; 0x5f
   20598:	4829      	ldr	r0, [pc, #164]	; (20640 <z_add_thread_to_ready_q+0xd8>)
   2059a:	f002 fbd5 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   2059e:	4826      	ldr	r0, [pc, #152]	; (20638 <z_add_thread_to_ready_q+0xd0>)
   205a0:	f000 fe9c 	bl	212dc <z_spin_lock_set_owner>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   205a4:	4b29      	ldr	r3, [pc, #164]	; (2064c <z_add_thread_to_ready_q+0xe4>)
   205a6:	429c      	cmp	r4, r3
   205a8:	d10b      	bne.n	205c2 <z_add_thread_to_ready_q+0x5a>
   205aa:	4929      	ldr	r1, [pc, #164]	; (20650 <z_add_thread_to_ready_q+0xe8>)
   205ac:	4825      	ldr	r0, [pc, #148]	; (20644 <z_add_thread_to_ready_q+0xdc>)
   205ae:	f240 237e 	movw	r3, #638	; 0x27e
   205b2:	4a28      	ldr	r2, [pc, #160]	; (20654 <z_add_thread_to_ready_q+0xec>)
   205b4:	f002 fbbb 	bl	22d2e <printk>
   205b8:	f240 217e 	movw	r1, #638	; 0x27e
   205bc:	4825      	ldr	r0, [pc, #148]	; (20654 <z_add_thread_to_ready_q+0xec>)
   205be:	f002 fbc3 	bl	22d48 <assert_post_action>
	return list->head == list;
   205c2:	4a25      	ldr	r2, [pc, #148]	; (20658 <z_add_thread_to_ready_q+0xf0>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   205c4:	f102 0128 	add.w	r1, r2, #40	; 0x28
   205c8:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   205cc:	428b      	cmp	r3, r1
   205ce:	d02d      	beq.n	2062c <z_add_thread_to_ready_q+0xc4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   205d0:	b363      	cbz	r3, 2062c <z_add_thread_to_ready_q+0xc4>
	if (t1->base.prio < t2->base.prio) {
   205d2:	f994 600e 	ldrsb.w	r6, [r4, #14]
   205d6:	f993 700e 	ldrsb.w	r7, [r3, #14]
   205da:	42b7      	cmp	r7, r6
   205dc:	dd21      	ble.n	20622 <z_add_thread_to_ready_q+0xba>
	node->prev = successor->prev;
   205de:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   205e0:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   205e4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   205e6:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   205e8:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   205ea:	2000      	movs	r0, #0
   205ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   205f0:	7363      	strb	r3, [r4, #13]
   205f2:	f7ff ff01 	bl	203f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   205f6:	4810      	ldr	r0, [pc, #64]	; (20638 <z_add_thread_to_ready_q+0xd0>)
   205f8:	f000 fe60 	bl	212bc <z_spin_unlock_valid>
   205fc:	b960      	cbnz	r0, 20618 <z_add_thread_to_ready_q+0xb0>
   205fe:	4917      	ldr	r1, [pc, #92]	; (2065c <z_add_thread_to_ready_q+0xf4>)
   20600:	2372      	movs	r3, #114	; 0x72
   20602:	4a0f      	ldr	r2, [pc, #60]	; (20640 <z_add_thread_to_ready_q+0xd8>)
   20604:	480f      	ldr	r0, [pc, #60]	; (20644 <z_add_thread_to_ready_q+0xdc>)
   20606:	f002 fb92 	bl	22d2e <printk>
   2060a:	4815      	ldr	r0, [pc, #84]	; (20660 <z_add_thread_to_ready_q+0xf8>)
   2060c:	f002 fb8f 	bl	22d2e <printk>
   20610:	2172      	movs	r1, #114	; 0x72
   20612:	480b      	ldr	r0, [pc, #44]	; (20640 <z_add_thread_to_ready_q+0xd8>)
   20614:	f002 fb98 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   20618:	f385 8811 	msr	BASEPRI, r5
   2061c:	f3bf 8f6f 	isb	sy
}
   20620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   20622:	4298      	cmp	r0, r3
   20624:	d002      	beq.n	2062c <z_add_thread_to_ready_q+0xc4>
   20626:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20628:	2b00      	cmp	r3, #0
   2062a:	d1d4      	bne.n	205d6 <z_add_thread_to_ready_q+0x6e>
	node->prev = list->tail;
   2062c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   20630:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   20632:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20634:	62d4      	str	r4, [r2, #44]	; 0x2c
   20636:	e7d7      	b.n	205e8 <z_add_thread_to_ready_q+0x80>
   20638:	20025aec 	.word	0x20025aec
   2063c:	0002576e 	.word	0x0002576e
   20640:	0002574f 	.word	0x0002574f
   20644:	000255f3 	.word	0x000255f3
   20648:	00025783 	.word	0x00025783
   2064c:	200218e4 	.word	0x200218e4
   20650:	0002621e 	.word	0x0002621e
   20654:	000261cd 	.word	0x000261cd
   20658:	20025ab4 	.word	0x20025ab4
   2065c:	00025798 	.word	0x00025798
   20660:	000257af 	.word	0x000257af

00020664 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   20664:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   20668:	b570      	push	{r4, r5, r6, lr}
   2066a:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   2066c:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   20670:	2b00      	cmp	r3, #0
   20672:	d040      	beq.n	206f6 <z_thread_timeout+0x92>
	__asm__ volatile(
   20674:	f04f 0320 	mov.w	r3, #32
   20678:	f3ef 8611 	mrs	r6, BASEPRI
   2067c:	f383 8811 	msr	BASEPRI, r3
   20680:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20684:	4824      	ldr	r0, [pc, #144]	; (20718 <z_thread_timeout+0xb4>)
   20686:	f000 fe0b 	bl	212a0 <z_spin_lock_valid>
   2068a:	b960      	cbnz	r0, 206a6 <z_thread_timeout+0x42>
   2068c:	4923      	ldr	r1, [pc, #140]	; (2071c <z_thread_timeout+0xb8>)
   2068e:	235f      	movs	r3, #95	; 0x5f
   20690:	4a23      	ldr	r2, [pc, #140]	; (20720 <z_thread_timeout+0xbc>)
   20692:	4824      	ldr	r0, [pc, #144]	; (20724 <z_thread_timeout+0xc0>)
   20694:	f002 fb4b 	bl	22d2e <printk>
   20698:	4823      	ldr	r0, [pc, #140]	; (20728 <z_thread_timeout+0xc4>)
   2069a:	f002 fb48 	bl	22d2e <printk>
   2069e:	215f      	movs	r1, #95	; 0x5f
   206a0:	481f      	ldr	r0, [pc, #124]	; (20720 <z_thread_timeout+0xbc>)
   206a2:	f002 fb51 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   206a6:	481c      	ldr	r0, [pc, #112]	; (20718 <z_thread_timeout+0xb4>)
   206a8:	f000 fe18 	bl	212dc <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   206ac:	f1a4 0010 	sub.w	r0, r4, #16
   206b0:	f7ff fc8a 	bl	1ffc8 <pended_on.isra.16>
   206b4:	4629      	mov	r1, r5
   206b6:	f7ff fe1d 	bl	202f4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   206ba:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   206be:	4816      	ldr	r0, [pc, #88]	; (20718 <z_thread_timeout+0xb4>)
   206c0:	f023 0302 	bic.w	r3, r3, #2
   206c4:	f804 3c0b 	strb.w	r3, [r4, #-11]
   206c8:	f000 fdf8 	bl	212bc <z_spin_unlock_valid>
   206cc:	b960      	cbnz	r0, 206e8 <z_thread_timeout+0x84>
   206ce:	4917      	ldr	r1, [pc, #92]	; (2072c <z_thread_timeout+0xc8>)
   206d0:	2372      	movs	r3, #114	; 0x72
   206d2:	4a13      	ldr	r2, [pc, #76]	; (20720 <z_thread_timeout+0xbc>)
   206d4:	4813      	ldr	r0, [pc, #76]	; (20724 <z_thread_timeout+0xc0>)
   206d6:	f002 fb2a 	bl	22d2e <printk>
   206da:	4815      	ldr	r0, [pc, #84]	; (20730 <z_thread_timeout+0xcc>)
   206dc:	f002 fb27 	bl	22d2e <printk>
   206e0:	2172      	movs	r1, #114	; 0x72
   206e2:	480f      	ldr	r0, [pc, #60]	; (20720 <z_thread_timeout+0xbc>)
   206e4:	f002 fb30 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   206e8:	f386 8811 	msr	BASEPRI, r6
   206ec:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   206f0:	2300      	movs	r3, #0
   206f2:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   206f6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   206fa:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   206fc:	f023 0314 	bic.w	r3, r3, #20
   20700:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   20704:	f003 fb4c 	bl	23da0 <z_is_thread_ready>
   20708:	b120      	cbz	r0, 20714 <z_thread_timeout+0xb0>
		z_add_thread_to_ready_q(thread);
   2070a:	4628      	mov	r0, r5
}
   2070c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20710:	f7ff bf2a 	b.w	20568 <z_add_thread_to_ready_q>
   20714:	bd70      	pop	{r4, r5, r6, pc}
   20716:	bf00      	nop
   20718:	20025aec 	.word	0x20025aec
   2071c:	0002576e 	.word	0x0002576e
   20720:	0002574f 	.word	0x0002574f
   20724:	000255f3 	.word	0x000255f3
   20728:	00025783 	.word	0x00025783
   2072c:	00025798 	.word	0x00025798
   20730:	000257af 	.word	0x000257af

00020734 <z_move_thread_to_end_of_prio_q>:
{
   20734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20736:	4604      	mov	r4, r0
	__asm__ volatile(
   20738:	f04f 0320 	mov.w	r3, #32
   2073c:	f3ef 8511 	mrs	r5, BASEPRI
   20740:	f383 8811 	msr	BASEPRI, r3
   20744:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20748:	4834      	ldr	r0, [pc, #208]	; (2081c <z_move_thread_to_end_of_prio_q+0xe8>)
   2074a:	f000 fda9 	bl	212a0 <z_spin_lock_valid>
   2074e:	b960      	cbnz	r0, 2076a <z_move_thread_to_end_of_prio_q+0x36>
   20750:	4933      	ldr	r1, [pc, #204]	; (20820 <z_move_thread_to_end_of_prio_q+0xec>)
   20752:	235f      	movs	r3, #95	; 0x5f
   20754:	4a33      	ldr	r2, [pc, #204]	; (20824 <z_move_thread_to_end_of_prio_q+0xf0>)
   20756:	4834      	ldr	r0, [pc, #208]	; (20828 <z_move_thread_to_end_of_prio_q+0xf4>)
   20758:	f002 fae9 	bl	22d2e <printk>
   2075c:	4833      	ldr	r0, [pc, #204]	; (2082c <z_move_thread_to_end_of_prio_q+0xf8>)
   2075e:	f002 fae6 	bl	22d2e <printk>
   20762:	215f      	movs	r1, #95	; 0x5f
   20764:	482f      	ldr	r0, [pc, #188]	; (20824 <z_move_thread_to_end_of_prio_q+0xf0>)
   20766:	f002 faef 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   2076a:	482c      	ldr	r0, [pc, #176]	; (2081c <z_move_thread_to_end_of_prio_q+0xe8>)
   2076c:	f000 fdb6 	bl	212dc <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   20770:	7b63      	ldrb	r3, [r4, #13]
   20772:	065a      	lsls	r2, r3, #25
   20774:	d503      	bpl.n	2077e <z_move_thread_to_end_of_prio_q+0x4a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   20776:	4621      	mov	r1, r4
   20778:	482d      	ldr	r0, [pc, #180]	; (20830 <z_move_thread_to_end_of_prio_q+0xfc>)
   2077a:	f7ff fdbb 	bl	202f4 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2077e:	4b2d      	ldr	r3, [pc, #180]	; (20834 <z_move_thread_to_end_of_prio_q+0x100>)
   20780:	429c      	cmp	r4, r3
   20782:	d10b      	bne.n	2079c <z_move_thread_to_end_of_prio_q+0x68>
   20784:	492c      	ldr	r1, [pc, #176]	; (20838 <z_move_thread_to_end_of_prio_q+0x104>)
   20786:	4828      	ldr	r0, [pc, #160]	; (20828 <z_move_thread_to_end_of_prio_q+0xf4>)
   20788:	f240 237e 	movw	r3, #638	; 0x27e
   2078c:	4a2b      	ldr	r2, [pc, #172]	; (2083c <z_move_thread_to_end_of_prio_q+0x108>)
   2078e:	f002 face 	bl	22d2e <printk>
   20792:	f240 217e 	movw	r1, #638	; 0x27e
   20796:	4829      	ldr	r0, [pc, #164]	; (2083c <z_move_thread_to_end_of_prio_q+0x108>)
   20798:	f002 fad6 	bl	22d48 <assert_post_action>
	return list->head == list;
   2079c:	4a28      	ldr	r2, [pc, #160]	; (20840 <z_move_thread_to_end_of_prio_q+0x10c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2079e:	f102 0128 	add.w	r1, r2, #40	; 0x28
   207a2:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   207a6:	428b      	cmp	r3, r1
   207a8:	d031      	beq.n	2080e <z_move_thread_to_end_of_prio_q+0xda>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   207aa:	2b00      	cmp	r3, #0
   207ac:	d02f      	beq.n	2080e <z_move_thread_to_end_of_prio_q+0xda>
	if (t1->base.prio < t2->base.prio) {
   207ae:	f994 600e 	ldrsb.w	r6, [r4, #14]
   207b2:	f993 700e 	ldrsb.w	r7, [r3, #14]
   207b6:	42b7      	cmp	r7, r6
   207b8:	dd24      	ble.n	20804 <z_move_thread_to_end_of_prio_q+0xd0>
	node->prev = successor->prev;
   207ba:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   207bc:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   207c0:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   207c2:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   207c4:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   207c6:	6890      	ldr	r0, [r2, #8]
   207c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   207cc:	7363      	strb	r3, [r4, #13]
   207ce:	1b03      	subs	r3, r0, r4
   207d0:	4258      	negs	r0, r3
   207d2:	4158      	adcs	r0, r3
   207d4:	f7ff fe10 	bl	203f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   207d8:	4810      	ldr	r0, [pc, #64]	; (2081c <z_move_thread_to_end_of_prio_q+0xe8>)
   207da:	f000 fd6f 	bl	212bc <z_spin_unlock_valid>
   207de:	b960      	cbnz	r0, 207fa <z_move_thread_to_end_of_prio_q+0xc6>
   207e0:	4918      	ldr	r1, [pc, #96]	; (20844 <z_move_thread_to_end_of_prio_q+0x110>)
   207e2:	2372      	movs	r3, #114	; 0x72
   207e4:	4a0f      	ldr	r2, [pc, #60]	; (20824 <z_move_thread_to_end_of_prio_q+0xf0>)
   207e6:	4810      	ldr	r0, [pc, #64]	; (20828 <z_move_thread_to_end_of_prio_q+0xf4>)
   207e8:	f002 faa1 	bl	22d2e <printk>
   207ec:	4816      	ldr	r0, [pc, #88]	; (20848 <z_move_thread_to_end_of_prio_q+0x114>)
   207ee:	f002 fa9e 	bl	22d2e <printk>
   207f2:	2172      	movs	r1, #114	; 0x72
   207f4:	480b      	ldr	r0, [pc, #44]	; (20824 <z_move_thread_to_end_of_prio_q+0xf0>)
   207f6:	f002 faa7 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   207fa:	f385 8811 	msr	BASEPRI, r5
   207fe:	f3bf 8f6f 	isb	sy
}
   20802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   20804:	4298      	cmp	r0, r3
   20806:	d002      	beq.n	2080e <z_move_thread_to_end_of_prio_q+0xda>
   20808:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2080a:	2b00      	cmp	r3, #0
   2080c:	d1d1      	bne.n	207b2 <z_move_thread_to_end_of_prio_q+0x7e>
	node->prev = list->tail;
   2080e:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   20812:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   20814:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20816:	62d4      	str	r4, [r2, #44]	; 0x2c
   20818:	e7d4      	b.n	207c4 <z_move_thread_to_end_of_prio_q+0x90>
   2081a:	bf00      	nop
   2081c:	20025aec 	.word	0x20025aec
   20820:	0002576e 	.word	0x0002576e
   20824:	0002574f 	.word	0x0002574f
   20828:	000255f3 	.word	0x000255f3
   2082c:	00025783 	.word	0x00025783
   20830:	20025adc 	.word	0x20025adc
   20834:	200218e4 	.word	0x200218e4
   20838:	0002621e 	.word	0x0002621e
   2083c:	000261cd 	.word	0x000261cd
   20840:	20025ab4 	.word	0x20025ab4
   20844:	00025798 	.word	0x00025798
   20848:	000257af 	.word	0x000257af

0002084c <z_time_slice>:
	if (pending_current == _current) {
   2084c:	4a15      	ldr	r2, [pc, #84]	; (208a4 <z_time_slice+0x58>)
   2084e:	4916      	ldr	r1, [pc, #88]	; (208a8 <z_time_slice+0x5c>)
{
   20850:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   20852:	680c      	ldr	r4, [r1, #0]
   20854:	6893      	ldr	r3, [r2, #8]
   20856:	42a3      	cmp	r3, r4
   20858:	4614      	mov	r4, r2
   2085a:	d103      	bne.n	20864 <z_time_slice+0x18>
}
   2085c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   20860:	f7ff bbca 	b.w	1fff8 <z_reset_time_slice>
	pending_current = NULL;
   20864:	2500      	movs	r5, #0
   20866:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   20868:	4910      	ldr	r1, [pc, #64]	; (208ac <z_time_slice+0x60>)
   2086a:	6809      	ldr	r1, [r1, #0]
   2086c:	b1b9      	cbz	r1, 2089e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   2086e:	89d9      	ldrh	r1, [r3, #14]
   20870:	297f      	cmp	r1, #127	; 0x7f
   20872:	d814      	bhi.n	2089e <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   20874:	490e      	ldr	r1, [pc, #56]	; (208b0 <z_time_slice+0x64>)
   20876:	f993 500e 	ldrsb.w	r5, [r3, #14]
   2087a:	6809      	ldr	r1, [r1, #0]
   2087c:	428d      	cmp	r5, r1
   2087e:	db0e      	blt.n	2089e <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
   20880:	490c      	ldr	r1, [pc, #48]	; (208b4 <z_time_slice+0x68>)
   20882:	428b      	cmp	r3, r1
   20884:	d00b      	beq.n	2089e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   20886:	6999      	ldr	r1, [r3, #24]
   20888:	b949      	cbnz	r1, 2089e <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   2088a:	6911      	ldr	r1, [r2, #16]
   2088c:	4281      	cmp	r1, r0
   2088e:	dc03      	bgt.n	20898 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   20890:	4618      	mov	r0, r3
   20892:	f7ff ff4f 	bl	20734 <z_move_thread_to_end_of_prio_q>
   20896:	e7e1      	b.n	2085c <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   20898:	1a09      	subs	r1, r1, r0
   2089a:	6111      	str	r1, [r2, #16]
}
   2089c:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   2089e:	2300      	movs	r3, #0
   208a0:	6123      	str	r3, [r4, #16]
   208a2:	e7fb      	b.n	2089c <z_time_slice+0x50>
   208a4:	20025ab4 	.word	0x20025ab4
   208a8:	20025ae8 	.word	0x20025ae8
   208ac:	20025af4 	.word	0x20025af4
   208b0:	20025af0 	.word	0x20025af0
   208b4:	200218e4 	.word	0x200218e4

000208b8 <z_remove_thread_from_ready_q>:
{
   208b8:	b538      	push	{r3, r4, r5, lr}
   208ba:	4604      	mov	r4, r0
	__asm__ volatile(
   208bc:	f04f 0320 	mov.w	r3, #32
   208c0:	f3ef 8511 	mrs	r5, BASEPRI
   208c4:	f383 8811 	msr	BASEPRI, r3
   208c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   208cc:	481d      	ldr	r0, [pc, #116]	; (20944 <z_remove_thread_from_ready_q+0x8c>)
   208ce:	f000 fce7 	bl	212a0 <z_spin_lock_valid>
   208d2:	b960      	cbnz	r0, 208ee <z_remove_thread_from_ready_q+0x36>
   208d4:	491c      	ldr	r1, [pc, #112]	; (20948 <z_remove_thread_from_ready_q+0x90>)
   208d6:	235f      	movs	r3, #95	; 0x5f
   208d8:	4a1c      	ldr	r2, [pc, #112]	; (2094c <z_remove_thread_from_ready_q+0x94>)
   208da:	481d      	ldr	r0, [pc, #116]	; (20950 <z_remove_thread_from_ready_q+0x98>)
   208dc:	f002 fa27 	bl	22d2e <printk>
   208e0:	481c      	ldr	r0, [pc, #112]	; (20954 <z_remove_thread_from_ready_q+0x9c>)
   208e2:	f002 fa24 	bl	22d2e <printk>
   208e6:	215f      	movs	r1, #95	; 0x5f
   208e8:	4818      	ldr	r0, [pc, #96]	; (2094c <z_remove_thread_from_ready_q+0x94>)
   208ea:	f002 fa2d 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   208ee:	4815      	ldr	r0, [pc, #84]	; (20944 <z_remove_thread_from_ready_q+0x8c>)
   208f0:	f000 fcf4 	bl	212dc <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   208f4:	7b63      	ldrb	r3, [r4, #13]
   208f6:	065a      	lsls	r2, r3, #25
   208f8:	d507      	bpl.n	2090a <z_remove_thread_from_ready_q+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   208fa:	4621      	mov	r1, r4
   208fc:	4816      	ldr	r0, [pc, #88]	; (20958 <z_remove_thread_from_ready_q+0xa0>)
   208fe:	f7ff fcf9 	bl	202f4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   20902:	7b63      	ldrb	r3, [r4, #13]
   20904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   20908:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   2090a:	4b14      	ldr	r3, [pc, #80]	; (2095c <z_remove_thread_from_ready_q+0xa4>)
   2090c:	6898      	ldr	r0, [r3, #8]
   2090e:	1b03      	subs	r3, r0, r4
   20910:	4258      	negs	r0, r3
   20912:	4158      	adcs	r0, r3
   20914:	f7ff fd70 	bl	203f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20918:	480a      	ldr	r0, [pc, #40]	; (20944 <z_remove_thread_from_ready_q+0x8c>)
   2091a:	f000 fccf 	bl	212bc <z_spin_unlock_valid>
   2091e:	b960      	cbnz	r0, 2093a <z_remove_thread_from_ready_q+0x82>
   20920:	490f      	ldr	r1, [pc, #60]	; (20960 <z_remove_thread_from_ready_q+0xa8>)
   20922:	2372      	movs	r3, #114	; 0x72
   20924:	4a09      	ldr	r2, [pc, #36]	; (2094c <z_remove_thread_from_ready_q+0x94>)
   20926:	480a      	ldr	r0, [pc, #40]	; (20950 <z_remove_thread_from_ready_q+0x98>)
   20928:	f002 fa01 	bl	22d2e <printk>
   2092c:	480d      	ldr	r0, [pc, #52]	; (20964 <z_remove_thread_from_ready_q+0xac>)
   2092e:	f002 f9fe 	bl	22d2e <printk>
   20932:	2172      	movs	r1, #114	; 0x72
   20934:	4805      	ldr	r0, [pc, #20]	; (2094c <z_remove_thread_from_ready_q+0x94>)
   20936:	f002 fa07 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   2093a:	f385 8811 	msr	BASEPRI, r5
   2093e:	f3bf 8f6f 	isb	sy
}
   20942:	bd38      	pop	{r3, r4, r5, pc}
   20944:	20025aec 	.word	0x20025aec
   20948:	0002576e 	.word	0x0002576e
   2094c:	0002574f 	.word	0x0002574f
   20950:	000255f3 	.word	0x000255f3
   20954:	00025783 	.word	0x00025783
   20958:	20025adc 	.word	0x20025adc
   2095c:	20025ab4 	.word	0x20025ab4
   20960:	00025798 	.word	0x00025798
   20964:	000257af 	.word	0x000257af

00020968 <pend>:
{
   20968:	b570      	push	{r4, r5, r6, lr}
   2096a:	4604      	mov	r4, r0
   2096c:	460d      	mov	r5, r1
   2096e:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   20970:	f7ff ffa2 	bl	208b8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   20974:	7b63      	ldrb	r3, [r4, #13]
   20976:	f043 0302 	orr.w	r3, r3, #2
   2097a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2097c:	b1f5      	cbz	r5, 209bc <pend+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2097e:	4b21      	ldr	r3, [pc, #132]	; (20a04 <pend+0x9c>)
		thread->base.pended_on = wait_q;
   20980:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20982:	429c      	cmp	r4, r3
   20984:	d10b      	bne.n	2099e <pend+0x36>
   20986:	4920      	ldr	r1, [pc, #128]	; (20a08 <pend+0xa0>)
   20988:	4820      	ldr	r0, [pc, #128]	; (20a0c <pend+0xa4>)
   2098a:	f240 237e 	movw	r3, #638	; 0x27e
   2098e:	4a20      	ldr	r2, [pc, #128]	; (20a10 <pend+0xa8>)
   20990:	f002 f9cd 	bl	22d2e <printk>
   20994:	f240 217e 	movw	r1, #638	; 0x27e
   20998:	481d      	ldr	r0, [pc, #116]	; (20a10 <pend+0xa8>)
   2099a:	f002 f9d5 	bl	22d48 <assert_post_action>
	return list->head == list;
   2099e:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   209a0:	429d      	cmp	r5, r3
   209a2:	d027      	beq.n	209f4 <pend+0x8c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   209a4:	b333      	cbz	r3, 209f4 <pend+0x8c>
	if (t1->base.prio < t2->base.prio) {
   209a6:	f994 200e 	ldrsb.w	r2, [r4, #14]
   209aa:	f993 100e 	ldrsb.w	r1, [r3, #14]
   209ae:	4291      	cmp	r1, r2
   209b0:	dd1a      	ble.n	209e8 <pend+0x80>
	node->prev = successor->prev;
   209b2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   209b4:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   209b8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   209ba:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   209bc:	1c73      	adds	r3, r6, #1
   209be:	d020      	beq.n	20a02 <pend+0x9a>
   209c0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   209c4:	f240 30e7 	movw	r0, #999	; 0x3e7
   209c8:	2100      	movs	r1, #0
   209ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   209ce:	fbc5 0106 	smlal	r0, r1, r5, r6
   209d2:	2300      	movs	r3, #0
   209d4:	f7eb fc24 	bl	c220 <__aeabi_ldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   209d8:	490e      	ldr	r1, [pc, #56]	; (20a14 <pend+0xac>)
   209da:	1c42      	adds	r2, r0, #1
   209dc:	f104 0018 	add.w	r0, r4, #24
}
   209e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   209e4:	f000 be1c 	b.w	21620 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   209e8:	6869      	ldr	r1, [r5, #4]
   209ea:	428b      	cmp	r3, r1
   209ec:	d002      	beq.n	209f4 <pend+0x8c>
   209ee:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   209f0:	2b00      	cmp	r3, #0
   209f2:	d1da      	bne.n	209aa <pend+0x42>
	node->prev = list->tail;
   209f4:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   209f6:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   209f8:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   209fa:	686b      	ldr	r3, [r5, #4]
   209fc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   209fe:	606c      	str	r4, [r5, #4]
   20a00:	e7dc      	b.n	209bc <pend+0x54>
}
   20a02:	bd70      	pop	{r4, r5, r6, pc}
   20a04:	200218e4 	.word	0x200218e4
   20a08:	0002621e 	.word	0x0002621e
   20a0c:	000255f3 	.word	0x000255f3
   20a10:	000261cd 	.word	0x000261cd
   20a14:	00020665 	.word	0x00020665

00020a18 <z_pend_curr_irqlock>:
{
   20a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20a1a:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   20a1c:	4d21      	ldr	r5, [pc, #132]	; (20aa4 <z_pend_curr_irqlock+0x8c>)
	pending_current = _current;
   20a1e:	4c22      	ldr	r4, [pc, #136]	; (20aa8 <z_pend_curr_irqlock+0x90>)
	pend(_current, wait_q, timeout);
   20a20:	68a8      	ldr	r0, [r5, #8]
   20a22:	f7ff ffa1 	bl	20968 <pend>
	pending_current = _current;
   20a26:	68ab      	ldr	r3, [r5, #8]
   20a28:	4630      	mov	r0, r6
   20a2a:	6023      	str	r3, [r4, #0]
   20a2c:	f7ed f914 	bl	dc58 <z_arch_swap>
   20a30:	4606      	mov	r6, r0
	__asm__ volatile(
   20a32:	f04f 0320 	mov.w	r3, #32
   20a36:	f3ef 8711 	mrs	r7, BASEPRI
   20a3a:	f383 8811 	msr	BASEPRI, r3
   20a3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20a42:	481a      	ldr	r0, [pc, #104]	; (20aac <z_pend_curr_irqlock+0x94>)
   20a44:	f000 fc2c 	bl	212a0 <z_spin_lock_valid>
   20a48:	b960      	cbnz	r0, 20a64 <z_pend_curr_irqlock+0x4c>
   20a4a:	4919      	ldr	r1, [pc, #100]	; (20ab0 <z_pend_curr_irqlock+0x98>)
   20a4c:	235f      	movs	r3, #95	; 0x5f
   20a4e:	4a19      	ldr	r2, [pc, #100]	; (20ab4 <z_pend_curr_irqlock+0x9c>)
   20a50:	4819      	ldr	r0, [pc, #100]	; (20ab8 <z_pend_curr_irqlock+0xa0>)
   20a52:	f002 f96c 	bl	22d2e <printk>
   20a56:	4819      	ldr	r0, [pc, #100]	; (20abc <z_pend_curr_irqlock+0xa4>)
   20a58:	f002 f969 	bl	22d2e <printk>
   20a5c:	215f      	movs	r1, #95	; 0x5f
   20a5e:	4815      	ldr	r0, [pc, #84]	; (20ab4 <z_pend_curr_irqlock+0x9c>)
   20a60:	f002 f972 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   20a64:	4811      	ldr	r0, [pc, #68]	; (20aac <z_pend_curr_irqlock+0x94>)
   20a66:	f000 fc39 	bl	212dc <z_spin_lock_set_owner>
		if (pending_current == _current) {
   20a6a:	6823      	ldr	r3, [r4, #0]
   20a6c:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20a6e:	480f      	ldr	r0, [pc, #60]	; (20aac <z_pend_curr_irqlock+0x94>)
   20a70:	429a      	cmp	r2, r3
			pending_current = NULL;
   20a72:	bf04      	itt	eq
   20a74:	2300      	moveq	r3, #0
   20a76:	6023      	streq	r3, [r4, #0]
   20a78:	f000 fc20 	bl	212bc <z_spin_unlock_valid>
   20a7c:	b960      	cbnz	r0, 20a98 <z_pend_curr_irqlock+0x80>
   20a7e:	4910      	ldr	r1, [pc, #64]	; (20ac0 <z_pend_curr_irqlock+0xa8>)
   20a80:	2372      	movs	r3, #114	; 0x72
   20a82:	4a0c      	ldr	r2, [pc, #48]	; (20ab4 <z_pend_curr_irqlock+0x9c>)
   20a84:	480c      	ldr	r0, [pc, #48]	; (20ab8 <z_pend_curr_irqlock+0xa0>)
   20a86:	f002 f952 	bl	22d2e <printk>
   20a8a:	480e      	ldr	r0, [pc, #56]	; (20ac4 <z_pend_curr_irqlock+0xac>)
   20a8c:	f002 f94f 	bl	22d2e <printk>
   20a90:	2172      	movs	r1, #114	; 0x72
   20a92:	4808      	ldr	r0, [pc, #32]	; (20ab4 <z_pend_curr_irqlock+0x9c>)
   20a94:	f002 f958 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   20a98:	f387 8811 	msr	BASEPRI, r7
   20a9c:	f3bf 8f6f 	isb	sy
}
   20aa0:	4630      	mov	r0, r6
   20aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20aa4:	20025ab4 	.word	0x20025ab4
   20aa8:	20025ae8 	.word	0x20025ae8
   20aac:	20025aec 	.word	0x20025aec
   20ab0:	0002576e 	.word	0x0002576e
   20ab4:	0002574f 	.word	0x0002574f
   20ab8:	000255f3 	.word	0x000255f3
   20abc:	00025783 	.word	0x00025783
   20ac0:	00025798 	.word	0x00025798
   20ac4:	000257af 	.word	0x000257af

00020ac8 <z_pend_curr>:
{
   20ac8:	b538      	push	{r3, r4, r5, lr}
   20aca:	4605      	mov	r5, r0
   20acc:	460c      	mov	r4, r1
   20ace:	4611      	mov	r1, r2
	pending_current = _current;
   20ad0:	4a0e      	ldr	r2, [pc, #56]	; (20b0c <z_pend_curr+0x44>)
   20ad2:	6890      	ldr	r0, [r2, #8]
   20ad4:	4a0e      	ldr	r2, [pc, #56]	; (20b10 <z_pend_curr+0x48>)
   20ad6:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   20ad8:	461a      	mov	r2, r3
   20ada:	f7ff ff45 	bl	20968 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20ade:	4628      	mov	r0, r5
   20ae0:	f000 fbec 	bl	212bc <z_spin_unlock_valid>
   20ae4:	b960      	cbnz	r0, 20b00 <z_pend_curr+0x38>
   20ae6:	490b      	ldr	r1, [pc, #44]	; (20b14 <z_pend_curr+0x4c>)
   20ae8:	2389      	movs	r3, #137	; 0x89
   20aea:	4a0b      	ldr	r2, [pc, #44]	; (20b18 <z_pend_curr+0x50>)
   20aec:	480b      	ldr	r0, [pc, #44]	; (20b1c <z_pend_curr+0x54>)
   20aee:	f002 f91e 	bl	22d2e <printk>
   20af2:	480b      	ldr	r0, [pc, #44]	; (20b20 <z_pend_curr+0x58>)
   20af4:	f002 f91b 	bl	22d2e <printk>
   20af8:	2189      	movs	r1, #137	; 0x89
   20afa:	4807      	ldr	r0, [pc, #28]	; (20b18 <z_pend_curr+0x50>)
   20afc:	f002 f924 	bl	22d48 <assert_post_action>
   20b00:	4620      	mov	r0, r4
}
   20b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20b06:	f7ed b8a7 	b.w	dc58 <z_arch_swap>
   20b0a:	bf00      	nop
   20b0c:	20025ab4 	.word	0x20025ab4
   20b10:	20025ae8 	.word	0x20025ae8
   20b14:	00025798 	.word	0x00025798
   20b18:	0002574f 	.word	0x0002574f
   20b1c:	000255f3 	.word	0x000255f3
   20b20:	000257af 	.word	0x000257af

00020b24 <z_set_prio>:
{
   20b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20b26:	4604      	mov	r4, r0
   20b28:	460d      	mov	r5, r1
	__asm__ volatile(
   20b2a:	f04f 0320 	mov.w	r3, #32
   20b2e:	f3ef 8611 	mrs	r6, BASEPRI
   20b32:	f383 8811 	msr	BASEPRI, r3
   20b36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20b3a:	4834      	ldr	r0, [pc, #208]	; (20c0c <z_set_prio+0xe8>)
   20b3c:	f000 fbb0 	bl	212a0 <z_spin_lock_valid>
   20b40:	b960      	cbnz	r0, 20b5c <z_set_prio+0x38>
   20b42:	4933      	ldr	r1, [pc, #204]	; (20c10 <z_set_prio+0xec>)
   20b44:	235f      	movs	r3, #95	; 0x5f
   20b46:	4a33      	ldr	r2, [pc, #204]	; (20c14 <z_set_prio+0xf0>)
   20b48:	4833      	ldr	r0, [pc, #204]	; (20c18 <z_set_prio+0xf4>)
   20b4a:	f002 f8f0 	bl	22d2e <printk>
   20b4e:	4833      	ldr	r0, [pc, #204]	; (20c1c <z_set_prio+0xf8>)
   20b50:	f002 f8ed 	bl	22d2e <printk>
   20b54:	215f      	movs	r1, #95	; 0x5f
   20b56:	482f      	ldr	r0, [pc, #188]	; (20c14 <z_set_prio+0xf0>)
   20b58:	f002 f8f6 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   20b5c:	482b      	ldr	r0, [pc, #172]	; (20c0c <z_set_prio+0xe8>)
   20b5e:	f000 fbbd 	bl	212dc <z_spin_lock_set_owner>
		need_sched = z_is_thread_ready(thread);
   20b62:	4620      	mov	r0, r4
   20b64:	f003 f91c 	bl	23da0 <z_is_thread_ready>
		if (need_sched) {
   20b68:	b26d      	sxtb	r5, r5
   20b6a:	4607      	mov	r7, r0
   20b6c:	2800      	cmp	r0, #0
   20b6e:	d04b      	beq.n	20c08 <z_set_prio+0xe4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   20b70:	4621      	mov	r1, r4
   20b72:	482b      	ldr	r0, [pc, #172]	; (20c20 <z_set_prio+0xfc>)
   20b74:	f7ff fbbe 	bl	202f4 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20b78:	4b2a      	ldr	r3, [pc, #168]	; (20c24 <z_set_prio+0x100>)
				thread->base.prio = prio;
   20b7a:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20b7c:	429c      	cmp	r4, r3
   20b7e:	d10b      	bne.n	20b98 <z_set_prio+0x74>
   20b80:	4929      	ldr	r1, [pc, #164]	; (20c28 <z_set_prio+0x104>)
   20b82:	4825      	ldr	r0, [pc, #148]	; (20c18 <z_set_prio+0xf4>)
   20b84:	f240 237e 	movw	r3, #638	; 0x27e
   20b88:	4a28      	ldr	r2, [pc, #160]	; (20c2c <z_set_prio+0x108>)
   20b8a:	f002 f8d0 	bl	22d2e <printk>
   20b8e:	f240 217e 	movw	r1, #638	; 0x27e
   20b92:	4826      	ldr	r0, [pc, #152]	; (20c2c <z_set_prio+0x108>)
   20b94:	f002 f8d8 	bl	22d48 <assert_post_action>
	return list->head == list;
   20b98:	4a25      	ldr	r2, [pc, #148]	; (20c30 <z_set_prio+0x10c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20b9a:	f102 0128 	add.w	r1, r2, #40	; 0x28
   20b9e:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   20ba2:	428b      	cmp	r3, r1
   20ba4:	d02a      	beq.n	20bfc <z_set_prio+0xd8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20ba6:	b34b      	cbz	r3, 20bfc <z_set_prio+0xd8>
	if (t1->base.prio < t2->base.prio) {
   20ba8:	f994 500e 	ldrsb.w	r5, [r4, #14]
   20bac:	f993 c00e 	ldrsb.w	ip, [r3, #14]
   20bb0:	45ac      	cmp	ip, r5
   20bb2:	dd1e      	ble.n	20bf2 <z_set_prio+0xce>
	node->prev = successor->prev;
   20bb4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   20bb6:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   20bba:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   20bbc:	605c      	str	r4, [r3, #4]
			update_cache(1);
   20bbe:	2001      	movs	r0, #1
   20bc0:	f7ff fc1a 	bl	203f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20bc4:	4811      	ldr	r0, [pc, #68]	; (20c0c <z_set_prio+0xe8>)
   20bc6:	f000 fb79 	bl	212bc <z_spin_unlock_valid>
   20bca:	b960      	cbnz	r0, 20be6 <z_set_prio+0xc2>
   20bcc:	4919      	ldr	r1, [pc, #100]	; (20c34 <z_set_prio+0x110>)
   20bce:	2372      	movs	r3, #114	; 0x72
   20bd0:	4a10      	ldr	r2, [pc, #64]	; (20c14 <z_set_prio+0xf0>)
   20bd2:	4811      	ldr	r0, [pc, #68]	; (20c18 <z_set_prio+0xf4>)
   20bd4:	f002 f8ab 	bl	22d2e <printk>
   20bd8:	4817      	ldr	r0, [pc, #92]	; (20c38 <z_set_prio+0x114>)
   20bda:	f002 f8a8 	bl	22d2e <printk>
   20bde:	2172      	movs	r1, #114	; 0x72
   20be0:	480c      	ldr	r0, [pc, #48]	; (20c14 <z_set_prio+0xf0>)
   20be2:	f002 f8b1 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   20be6:	f386 8811 	msr	BASEPRI, r6
   20bea:	f3bf 8f6f 	isb	sy
}
   20bee:	4638      	mov	r0, r7
   20bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   20bf2:	4298      	cmp	r0, r3
   20bf4:	d002      	beq.n	20bfc <z_set_prio+0xd8>
   20bf6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20bf8:	2b00      	cmp	r3, #0
   20bfa:	d1d7      	bne.n	20bac <z_set_prio+0x88>
	node->prev = list->tail;
   20bfc:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   20c00:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   20c02:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20c04:	62d4      	str	r4, [r2, #44]	; 0x2c
   20c06:	e7da      	b.n	20bbe <z_set_prio+0x9a>
			thread->base.prio = prio;
   20c08:	73a5      	strb	r5, [r4, #14]
   20c0a:	e7db      	b.n	20bc4 <z_set_prio+0xa0>
   20c0c:	20025aec 	.word	0x20025aec
   20c10:	0002576e 	.word	0x0002576e
   20c14:	0002574f 	.word	0x0002574f
   20c18:	000255f3 	.word	0x000255f3
   20c1c:	00025783 	.word	0x00025783
   20c20:	20025adc 	.word	0x20025adc
   20c24:	200218e4 	.word	0x200218e4
   20c28:	0002621e 	.word	0x0002621e
   20c2c:	000261cd 	.word	0x000261cd
   20c30:	20025ab4 	.word	0x20025ab4
   20c34:	00025798 	.word	0x00025798
   20c38:	000257af 	.word	0x000257af

00020c3c <z_unpend_first_thread>:
{
   20c3c:	b538      	push	{r3, r4, r5, lr}
   20c3e:	4604      	mov	r4, r0
	__asm__ volatile(
   20c40:	f04f 0320 	mov.w	r3, #32
   20c44:	f3ef 8511 	mrs	r5, BASEPRI
   20c48:	f383 8811 	msr	BASEPRI, r3
   20c4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20c50:	4839      	ldr	r0, [pc, #228]	; (20d38 <z_unpend_first_thread+0xfc>)
   20c52:	f000 fb25 	bl	212a0 <z_spin_lock_valid>
   20c56:	b960      	cbnz	r0, 20c72 <z_unpend_first_thread+0x36>
   20c58:	4938      	ldr	r1, [pc, #224]	; (20d3c <z_unpend_first_thread+0x100>)
   20c5a:	235f      	movs	r3, #95	; 0x5f
   20c5c:	4a38      	ldr	r2, [pc, #224]	; (20d40 <z_unpend_first_thread+0x104>)
   20c5e:	4839      	ldr	r0, [pc, #228]	; (20d44 <z_unpend_first_thread+0x108>)
   20c60:	f002 f865 	bl	22d2e <printk>
   20c64:	4838      	ldr	r0, [pc, #224]	; (20d48 <z_unpend_first_thread+0x10c>)
   20c66:	f002 f862 	bl	22d2e <printk>
   20c6a:	215f      	movs	r1, #95	; 0x5f
   20c6c:	4834      	ldr	r0, [pc, #208]	; (20d40 <z_unpend_first_thread+0x104>)
   20c6e:	f002 f86b 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   20c72:	4831      	ldr	r0, [pc, #196]	; (20d38 <z_unpend_first_thread+0xfc>)
   20c74:	f000 fb32 	bl	212dc <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   20c78:	4620      	mov	r0, r4
   20c7a:	f003 f8bd 	bl	23df8 <z_priq_dumb_best>
   20c7e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20c80:	482d      	ldr	r0, [pc, #180]	; (20d38 <z_unpend_first_thread+0xfc>)
   20c82:	f000 fb1b 	bl	212bc <z_spin_unlock_valid>
   20c86:	b960      	cbnz	r0, 20ca2 <z_unpend_first_thread+0x66>
   20c88:	4930      	ldr	r1, [pc, #192]	; (20d4c <z_unpend_first_thread+0x110>)
   20c8a:	2372      	movs	r3, #114	; 0x72
   20c8c:	4a2c      	ldr	r2, [pc, #176]	; (20d40 <z_unpend_first_thread+0x104>)
   20c8e:	482d      	ldr	r0, [pc, #180]	; (20d44 <z_unpend_first_thread+0x108>)
   20c90:	f002 f84d 	bl	22d2e <printk>
   20c94:	482e      	ldr	r0, [pc, #184]	; (20d50 <z_unpend_first_thread+0x114>)
   20c96:	f002 f84a 	bl	22d2e <printk>
   20c9a:	2172      	movs	r1, #114	; 0x72
   20c9c:	4828      	ldr	r0, [pc, #160]	; (20d40 <z_unpend_first_thread+0x104>)
   20c9e:	f002 f853 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   20ca2:	f385 8811 	msr	BASEPRI, r5
   20ca6:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   20caa:	2c00      	cmp	r4, #0
   20cac:	d041      	beq.n	20d32 <z_unpend_first_thread+0xf6>
	__asm__ volatile(
   20cae:	f04f 0320 	mov.w	r3, #32
   20cb2:	f3ef 8511 	mrs	r5, BASEPRI
   20cb6:	f383 8811 	msr	BASEPRI, r3
   20cba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20cbe:	481e      	ldr	r0, [pc, #120]	; (20d38 <z_unpend_first_thread+0xfc>)
   20cc0:	f000 faee 	bl	212a0 <z_spin_lock_valid>
   20cc4:	b960      	cbnz	r0, 20ce0 <z_unpend_first_thread+0xa4>
   20cc6:	491d      	ldr	r1, [pc, #116]	; (20d3c <z_unpend_first_thread+0x100>)
   20cc8:	235f      	movs	r3, #95	; 0x5f
   20cca:	4a1d      	ldr	r2, [pc, #116]	; (20d40 <z_unpend_first_thread+0x104>)
   20ccc:	481d      	ldr	r0, [pc, #116]	; (20d44 <z_unpend_first_thread+0x108>)
   20cce:	f002 f82e 	bl	22d2e <printk>
   20cd2:	481d      	ldr	r0, [pc, #116]	; (20d48 <z_unpend_first_thread+0x10c>)
   20cd4:	f002 f82b 	bl	22d2e <printk>
   20cd8:	215f      	movs	r1, #95	; 0x5f
   20cda:	4819      	ldr	r0, [pc, #100]	; (20d40 <z_unpend_first_thread+0x104>)
   20cdc:	f002 f834 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   20ce0:	4815      	ldr	r0, [pc, #84]	; (20d38 <z_unpend_first_thread+0xfc>)
   20ce2:	f000 fafb 	bl	212dc <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   20ce6:	f104 0008 	add.w	r0, r4, #8
   20cea:	f7ff f96d 	bl	1ffc8 <pended_on.isra.16>
   20cee:	4621      	mov	r1, r4
   20cf0:	f7ff fb00 	bl	202f4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   20cf4:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20cf6:	4810      	ldr	r0, [pc, #64]	; (20d38 <z_unpend_first_thread+0xfc>)
   20cf8:	f023 0302 	bic.w	r3, r3, #2
   20cfc:	7363      	strb	r3, [r4, #13]
   20cfe:	f000 fadd 	bl	212bc <z_spin_unlock_valid>
   20d02:	b960      	cbnz	r0, 20d1e <z_unpend_first_thread+0xe2>
   20d04:	4911      	ldr	r1, [pc, #68]	; (20d4c <z_unpend_first_thread+0x110>)
   20d06:	2372      	movs	r3, #114	; 0x72
   20d08:	4a0d      	ldr	r2, [pc, #52]	; (20d40 <z_unpend_first_thread+0x104>)
   20d0a:	480e      	ldr	r0, [pc, #56]	; (20d44 <z_unpend_first_thread+0x108>)
   20d0c:	f002 f80f 	bl	22d2e <printk>
   20d10:	480f      	ldr	r0, [pc, #60]	; (20d50 <z_unpend_first_thread+0x114>)
   20d12:	f002 f80c 	bl	22d2e <printk>
   20d16:	2172      	movs	r1, #114	; 0x72
   20d18:	4809      	ldr	r0, [pc, #36]	; (20d40 <z_unpend_first_thread+0x104>)
   20d1a:	f002 f815 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   20d1e:	f385 8811 	msr	BASEPRI, r5
   20d22:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   20d26:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   20d28:	f104 0018 	add.w	r0, r4, #24
   20d2c:	60a3      	str	r3, [r4, #8]
   20d2e:	f000 fd1b 	bl	21768 <z_abort_timeout>
}
   20d32:	4620      	mov	r0, r4
   20d34:	bd38      	pop	{r3, r4, r5, pc}
   20d36:	bf00      	nop
   20d38:	20025aec 	.word	0x20025aec
   20d3c:	0002576e 	.word	0x0002576e
   20d40:	0002574f 	.word	0x0002574f
   20d44:	000255f3 	.word	0x000255f3
   20d48:	00025783 	.word	0x00025783
   20d4c:	00025798 	.word	0x00025798
   20d50:	000257af 	.word	0x000257af

00020d54 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   20d54:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   20d56:	4b04      	ldr	r3, [pc, #16]	; (20d68 <z_sched_init+0x14>)
   20d58:	4608      	mov	r0, r1
   20d5a:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   20d5e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   20d62:	f7ff b95f 	b.w	20024 <k_sched_time_slice_set>
   20d66:	bf00      	nop
   20d68:	20025ab4 	.word	0x20025ab4

00020d6c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   20d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20d6e:	f3ef 8305 	mrs	r3, IPSR
   20d72:	2b0d      	cmp	r3, #13
   20d74:	d804      	bhi.n	20d80 <z_impl_k_yield+0x14>
   20d76:	b193      	cbz	r3, 20d9e <z_impl_k_yield+0x32>
   20d78:	4b46      	ldr	r3, [pc, #280]	; (20e94 <z_impl_k_yield+0x128>)
   20d7a:	685b      	ldr	r3, [r3, #4]
   20d7c:	051b      	lsls	r3, r3, #20
   20d7e:	d40e      	bmi.n	20d9e <z_impl_k_yield+0x32>
	__ASSERT(!z_arch_is_in_isr(), "");
   20d80:	4945      	ldr	r1, [pc, #276]	; (20e98 <z_impl_k_yield+0x12c>)
   20d82:	f44f 7362 	mov.w	r3, #904	; 0x388
   20d86:	4a45      	ldr	r2, [pc, #276]	; (20e9c <z_impl_k_yield+0x130>)
   20d88:	4845      	ldr	r0, [pc, #276]	; (20ea0 <z_impl_k_yield+0x134>)
   20d8a:	f001 ffd0 	bl	22d2e <printk>
   20d8e:	4845      	ldr	r0, [pc, #276]	; (20ea4 <z_impl_k_yield+0x138>)
   20d90:	f001 ffcd 	bl	22d2e <printk>
   20d94:	f44f 7162 	mov.w	r1, #904	; 0x388
   20d98:	4840      	ldr	r0, [pc, #256]	; (20e9c <z_impl_k_yield+0x130>)
   20d9a:	f001 ffd5 	bl	22d48 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   20d9e:	4c42      	ldr	r4, [pc, #264]	; (20ea8 <z_impl_k_yield+0x13c>)
   20da0:	4e42      	ldr	r6, [pc, #264]	; (20eac <z_impl_k_yield+0x140>)
   20da2:	68a2      	ldr	r2, [r4, #8]
   20da4:	42b2      	cmp	r2, r6
   20da6:	d05d      	beq.n	20e64 <z_impl_k_yield+0xf8>
	__asm__ volatile(
   20da8:	f04f 0320 	mov.w	r3, #32
   20dac:	f3ef 8711 	mrs	r7, BASEPRI
   20db0:	f383 8811 	msr	BASEPRI, r3
   20db4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20db8:	483d      	ldr	r0, [pc, #244]	; (20eb0 <z_impl_k_yield+0x144>)
   20dba:	f000 fa71 	bl	212a0 <z_spin_lock_valid>
   20dbe:	b960      	cbnz	r0, 20dda <z_impl_k_yield+0x6e>
   20dc0:	493c      	ldr	r1, [pc, #240]	; (20eb4 <z_impl_k_yield+0x148>)
   20dc2:	235f      	movs	r3, #95	; 0x5f
   20dc4:	4a3c      	ldr	r2, [pc, #240]	; (20eb8 <z_impl_k_yield+0x14c>)
   20dc6:	4836      	ldr	r0, [pc, #216]	; (20ea0 <z_impl_k_yield+0x134>)
   20dc8:	f001 ffb1 	bl	22d2e <printk>
   20dcc:	483b      	ldr	r0, [pc, #236]	; (20ebc <z_impl_k_yield+0x150>)
   20dce:	f001 ffae 	bl	22d2e <printk>
   20dd2:	215f      	movs	r1, #95	; 0x5f
   20dd4:	4838      	ldr	r0, [pc, #224]	; (20eb8 <z_impl_k_yield+0x14c>)
   20dd6:	f001 ffb7 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   20dda:	4835      	ldr	r0, [pc, #212]	; (20eb0 <z_impl_k_yield+0x144>)
   20ddc:	f000 fa7e 	bl	212dc <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   20de0:	68a1      	ldr	r1, [r4, #8]
   20de2:	4837      	ldr	r0, [pc, #220]	; (20ec0 <z_impl_k_yield+0x154>)
   20de4:	f7ff fa86 	bl	202f4 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   20de8:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20dea:	42b5      	cmp	r5, r6
   20dec:	d10b      	bne.n	20e06 <z_impl_k_yield+0x9a>
   20dee:	4935      	ldr	r1, [pc, #212]	; (20ec4 <z_impl_k_yield+0x158>)
   20df0:	482b      	ldr	r0, [pc, #172]	; (20ea0 <z_impl_k_yield+0x134>)
   20df2:	f240 237e 	movw	r3, #638	; 0x27e
   20df6:	4a29      	ldr	r2, [pc, #164]	; (20e9c <z_impl_k_yield+0x130>)
   20df8:	f001 ff99 	bl	22d2e <printk>
   20dfc:	f240 217e 	movw	r1, #638	; 0x27e
   20e00:	4826      	ldr	r0, [pc, #152]	; (20e9c <z_impl_k_yield+0x130>)
   20e02:	f001 ffa1 	bl	22d48 <assert_post_action>
	return list->head == list;
   20e06:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20e0a:	4a2d      	ldr	r2, [pc, #180]	; (20ec0 <z_impl_k_yield+0x154>)
   20e0c:	4293      	cmp	r3, r2
   20e0e:	d03a      	beq.n	20e86 <z_impl_k_yield+0x11a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20e10:	2b00      	cmp	r3, #0
   20e12:	d038      	beq.n	20e86 <z_impl_k_yield+0x11a>
	if (t1->base.prio < t2->base.prio) {
   20e14:	f995 000e 	ldrsb.w	r0, [r5, #14]
   20e18:	f993 600e 	ldrsb.w	r6, [r3, #14]
   20e1c:	4286      	cmp	r6, r0
   20e1e:	dd2d      	ble.n	20e7c <z_impl_k_yield+0x110>
	node->prev = successor->prev;
   20e20:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   20e22:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   20e26:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   20e28:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   20e2a:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   20e2c:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   20e2e:	7b53      	ldrb	r3, [r2, #13]
   20e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20e34:	7353      	strb	r3, [r2, #13]
   20e36:	f7ff fadf 	bl	203f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20e3a:	481d      	ldr	r0, [pc, #116]	; (20eb0 <z_impl_k_yield+0x144>)
   20e3c:	f000 fa3e 	bl	212bc <z_spin_unlock_valid>
   20e40:	b960      	cbnz	r0, 20e5c <z_impl_k_yield+0xf0>
   20e42:	4921      	ldr	r1, [pc, #132]	; (20ec8 <z_impl_k_yield+0x15c>)
   20e44:	2372      	movs	r3, #114	; 0x72
   20e46:	4a1c      	ldr	r2, [pc, #112]	; (20eb8 <z_impl_k_yield+0x14c>)
   20e48:	4815      	ldr	r0, [pc, #84]	; (20ea0 <z_impl_k_yield+0x134>)
   20e4a:	f001 ff70 	bl	22d2e <printk>
   20e4e:	481f      	ldr	r0, [pc, #124]	; (20ecc <z_impl_k_yield+0x160>)
   20e50:	f001 ff6d 	bl	22d2e <printk>
   20e54:	2172      	movs	r1, #114	; 0x72
   20e56:	4818      	ldr	r0, [pc, #96]	; (20eb8 <z_impl_k_yield+0x14c>)
   20e58:	f001 ff76 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   20e5c:	f387 8811 	msr	BASEPRI, r7
   20e60:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   20e64:	f04f 0320 	mov.w	r3, #32
   20e68:	f3ef 8011 	mrs	r0, BASEPRI
   20e6c:	f383 8811 	msr	BASEPRI, r3
   20e70:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   20e74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   20e78:	f7ec beee 	b.w	dc58 <z_arch_swap>
	return (node == list->tail) ? NULL : node->next;
   20e7c:	428b      	cmp	r3, r1
   20e7e:	d002      	beq.n	20e86 <z_impl_k_yield+0x11a>
   20e80:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20e82:	2b00      	cmp	r3, #0
   20e84:	d1c8      	bne.n	20e18 <z_impl_k_yield+0xac>
	node->prev = list->tail;
   20e86:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   20e8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   20e8c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   20e8e:	62e5      	str	r5, [r4, #44]	; 0x2c
   20e90:	e7cb      	b.n	20e2a <z_impl_k_yield+0xbe>
   20e92:	bf00      	nop
   20e94:	e000ed00 	.word	0xe000ed00
   20e98:	00026169 	.word	0x00026169
   20e9c:	000261cd 	.word	0x000261cd
   20ea0:	000255f3 	.word	0x000255f3
   20ea4:	00026086 	.word	0x00026086
   20ea8:	20025ab4 	.word	0x20025ab4
   20eac:	200218e4 	.word	0x200218e4
   20eb0:	20025aec 	.word	0x20025aec
   20eb4:	0002576e 	.word	0x0002576e
   20eb8:	0002574f 	.word	0x0002574f
   20ebc:	00025783 	.word	0x00025783
   20ec0:	20025adc 	.word	0x20025adc
   20ec4:	0002621e 	.word	0x0002621e
   20ec8:	00025798 	.word	0x00025798
   20ecc:	000257af 	.word	0x000257af

00020ed0 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
   20ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20ed2:	4604      	mov	r4, r0
   20ed4:	f3ef 8305 	mrs	r3, IPSR
   20ed8:	2b0d      	cmp	r3, #13
   20eda:	d804      	bhi.n	20ee6 <z_tick_sleep+0x16>
   20edc:	b193      	cbz	r3, 20f04 <z_tick_sleep+0x34>
   20ede:	4b3c      	ldr	r3, [pc, #240]	; (20fd0 <z_tick_sleep+0x100>)
   20ee0:	685b      	ldr	r3, [r3, #4]
   20ee2:	051a      	lsls	r2, r3, #20
   20ee4:	d40e      	bmi.n	20f04 <z_tick_sleep+0x34>
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!z_arch_is_in_isr(), "");
   20ee6:	493b      	ldr	r1, [pc, #236]	; (20fd4 <z_tick_sleep+0x104>)
   20ee8:	f240 33a6 	movw	r3, #934	; 0x3a6
   20eec:	4a3a      	ldr	r2, [pc, #232]	; (20fd8 <z_tick_sleep+0x108>)
   20eee:	483b      	ldr	r0, [pc, #236]	; (20fdc <z_tick_sleep+0x10c>)
   20ef0:	f001 ff1d 	bl	22d2e <printk>
   20ef4:	483a      	ldr	r0, [pc, #232]	; (20fe0 <z_tick_sleep+0x110>)
   20ef6:	f001 ff1a 	bl	22d2e <printk>
   20efa:	f240 31a6 	movw	r1, #934	; 0x3a6
   20efe:	4836      	ldr	r0, [pc, #216]	; (20fd8 <z_tick_sleep+0x108>)
   20f00:	f001 ff22 	bl	22d48 <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   20f04:	b924      	cbnz	r4, 20f10 <z_tick_sleep+0x40>
	z_impl_k_yield();
   20f06:	f7ff ff31 	bl	20d6c <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   20f0a:	4620      	mov	r0, r4
   20f0c:	b003      	add	sp, #12
   20f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   20f10:	f002 ffda 	bl	23ec8 <z_tick_get_32>
	struct k_spinlock local_lock = {};
   20f14:	2300      	movs	r3, #0
	ticks += _TICK_ALIGN;
   20f16:	1c66      	adds	r6, r4, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   20f18:	1834      	adds	r4, r6, r0
	struct k_spinlock local_lock = {};
   20f1a:	9301      	str	r3, [sp, #4]
   20f1c:	f04f 0320 	mov.w	r3, #32
   20f20:	f3ef 8711 	mrs	r7, BASEPRI
   20f24:	f383 8811 	msr	BASEPRI, r3
   20f28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20f2c:	a801      	add	r0, sp, #4
   20f2e:	f000 f9b7 	bl	212a0 <z_spin_lock_valid>
   20f32:	b960      	cbnz	r0, 20f4e <z_tick_sleep+0x7e>
   20f34:	492b      	ldr	r1, [pc, #172]	; (20fe4 <z_tick_sleep+0x114>)
   20f36:	235f      	movs	r3, #95	; 0x5f
   20f38:	4a2b      	ldr	r2, [pc, #172]	; (20fe8 <z_tick_sleep+0x118>)
   20f3a:	4828      	ldr	r0, [pc, #160]	; (20fdc <z_tick_sleep+0x10c>)
   20f3c:	f001 fef7 	bl	22d2e <printk>
   20f40:	482a      	ldr	r0, [pc, #168]	; (20fec <z_tick_sleep+0x11c>)
   20f42:	f001 fef4 	bl	22d2e <printk>
   20f46:	215f      	movs	r1, #95	; 0x5f
   20f48:	4827      	ldr	r0, [pc, #156]	; (20fe8 <z_tick_sleep+0x118>)
   20f4a:	f001 fefd 	bl	22d48 <assert_post_action>
	pending_current = _current;
   20f4e:	4d28      	ldr	r5, [pc, #160]	; (20ff0 <z_tick_sleep+0x120>)
	z_spin_lock_set_owner(l);
   20f50:	a801      	add	r0, sp, #4
   20f52:	f000 f9c3 	bl	212dc <z_spin_lock_set_owner>
   20f56:	4b27      	ldr	r3, [pc, #156]	; (20ff4 <z_tick_sleep+0x124>)
   20f58:	68a8      	ldr	r0, [r5, #8]
   20f5a:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   20f5c:	f7ff fcac 	bl	208b8 <z_remove_thread_from_ready_q>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   20f60:	68a8      	ldr	r0, [r5, #8]
   20f62:	4632      	mov	r2, r6
   20f64:	3018      	adds	r0, #24
   20f66:	4924      	ldr	r1, [pc, #144]	; (20ff8 <z_tick_sleep+0x128>)
   20f68:	f000 fb5a 	bl	21620 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   20f6c:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20f6e:	a801      	add	r0, sp, #4
	thread->base.thread_state |= _THREAD_SUSPENDED;
   20f70:	7b53      	ldrb	r3, [r2, #13]
   20f72:	f043 0310 	orr.w	r3, r3, #16
   20f76:	7353      	strb	r3, [r2, #13]
   20f78:	f000 f9a0 	bl	212bc <z_spin_unlock_valid>
   20f7c:	b960      	cbnz	r0, 20f98 <z_tick_sleep+0xc8>
   20f7e:	491f      	ldr	r1, [pc, #124]	; (20ffc <z_tick_sleep+0x12c>)
   20f80:	2389      	movs	r3, #137	; 0x89
   20f82:	4a19      	ldr	r2, [pc, #100]	; (20fe8 <z_tick_sleep+0x118>)
   20f84:	4815      	ldr	r0, [pc, #84]	; (20fdc <z_tick_sleep+0x10c>)
   20f86:	f001 fed2 	bl	22d2e <printk>
   20f8a:	481d      	ldr	r0, [pc, #116]	; (21000 <z_tick_sleep+0x130>)
   20f8c:	f001 fecf 	bl	22d2e <printk>
   20f90:	2189      	movs	r1, #137	; 0x89
   20f92:	4815      	ldr	r0, [pc, #84]	; (20fe8 <z_tick_sleep+0x118>)
   20f94:	f001 fed8 	bl	22d48 <assert_post_action>
   20f98:	4638      	mov	r0, r7
   20f9a:	f7ec fe5d 	bl	dc58 <z_arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   20f9e:	68ab      	ldr	r3, [r5, #8]
   20fa0:	7b5b      	ldrb	r3, [r3, #13]
   20fa2:	06db      	lsls	r3, r3, #27
   20fa4:	d50e      	bpl.n	20fc4 <z_tick_sleep+0xf4>
   20fa6:	4917      	ldr	r1, [pc, #92]	; (21004 <z_tick_sleep+0x134>)
   20fa8:	f240 33c3 	movw	r3, #963	; 0x3c3
   20fac:	4a0a      	ldr	r2, [pc, #40]	; (20fd8 <z_tick_sleep+0x108>)
   20fae:	480b      	ldr	r0, [pc, #44]	; (20fdc <z_tick_sleep+0x10c>)
   20fb0:	f001 febd 	bl	22d2e <printk>
   20fb4:	480a      	ldr	r0, [pc, #40]	; (20fe0 <z_tick_sleep+0x110>)
   20fb6:	f001 feba 	bl	22d2e <printk>
   20fba:	f240 31c3 	movw	r1, #963	; 0x3c3
   20fbe:	4806      	ldr	r0, [pc, #24]	; (20fd8 <z_tick_sleep+0x108>)
   20fc0:	f001 fec2 	bl	22d48 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   20fc4:	f002 ff80 	bl	23ec8 <z_tick_get_32>
   20fc8:	1a24      	subs	r4, r4, r0
   20fca:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   20fce:	e79c      	b.n	20f0a <z_tick_sleep+0x3a>
   20fd0:	e000ed00 	.word	0xe000ed00
   20fd4:	00026169 	.word	0x00026169
   20fd8:	000261cd 	.word	0x000261cd
   20fdc:	000255f3 	.word	0x000255f3
   20fe0:	00026086 	.word	0x00026086
   20fe4:	0002576e 	.word	0x0002576e
   20fe8:	0002574f 	.word	0x0002574f
   20fec:	00025783 	.word	0x00025783
   20ff0:	20025ab4 	.word	0x20025ab4
   20ff4:	20025ae8 	.word	0x20025ae8
   20ff8:	00020665 	.word	0x00020665
   20ffc:	00025798 	.word	0x00025798
   21000:	000257af 	.word	0x000257af
   21004:	0002623f 	.word	0x0002623f

00021008 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   21008:	4b01      	ldr	r3, [pc, #4]	; (21010 <z_impl_k_current_get+0x8>)
   2100a:	6898      	ldr	r0, [r3, #8]
   2100c:	4770      	bx	lr
   2100e:	bf00      	nop
   21010:	20025ab4 	.word	0x20025ab4

00021014 <z_impl_k_sem_init>:

#endif /* CONFIG_OBJECT_TRACING */

void z_impl_k_sem_init(struct k_sem *sem, unsigned int initial_count,
		      unsigned int limit)
{
   21014:	b570      	push	{r4, r5, r6, lr}
   21016:	4604      	mov	r4, r0
   21018:	460e      	mov	r6, r1
	__ASSERT(limit != 0U, "limit cannot be zero");
   2101a:	4615      	mov	r5, r2
   2101c:	b962      	cbnz	r2, 21038 <z_impl_k_sem_init+0x24>
   2101e:	4912      	ldr	r1, [pc, #72]	; (21068 <z_impl_k_sem_init+0x54>)
   21020:	2341      	movs	r3, #65	; 0x41
   21022:	4a12      	ldr	r2, [pc, #72]	; (2106c <z_impl_k_sem_init+0x58>)
   21024:	4812      	ldr	r0, [pc, #72]	; (21070 <z_impl_k_sem_init+0x5c>)
   21026:	f001 fe82 	bl	22d2e <printk>
   2102a:	4812      	ldr	r0, [pc, #72]	; (21074 <z_impl_k_sem_init+0x60>)
   2102c:	f001 fe7f 	bl	22d2e <printk>
   21030:	2141      	movs	r1, #65	; 0x41
   21032:	480e      	ldr	r0, [pc, #56]	; (2106c <z_impl_k_sem_init+0x58>)
   21034:	f001 fe88 	bl	22d48 <assert_post_action>
	__ASSERT(initial_count <= limit, "count cannot be greater than limit");
   21038:	42b5      	cmp	r5, r6
   2103a:	d20c      	bcs.n	21056 <z_impl_k_sem_init+0x42>
   2103c:	490e      	ldr	r1, [pc, #56]	; (21078 <z_impl_k_sem_init+0x64>)
   2103e:	2342      	movs	r3, #66	; 0x42
   21040:	4a0a      	ldr	r2, [pc, #40]	; (2106c <z_impl_k_sem_init+0x58>)
   21042:	480b      	ldr	r0, [pc, #44]	; (21070 <z_impl_k_sem_init+0x5c>)
   21044:	f001 fe73 	bl	22d2e <printk>
   21048:	480c      	ldr	r0, [pc, #48]	; (2107c <z_impl_k_sem_init+0x68>)
   2104a:	f001 fe70 	bl	22d2e <printk>
   2104e:	2142      	movs	r1, #66	; 0x42
   21050:	4806      	ldr	r0, [pc, #24]	; (2106c <z_impl_k_sem_init+0x58>)
   21052:	f001 fe79 	bl	22d48 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SEMA_INIT);
	sem->count = initial_count;
	sem->limit = limit;
	z_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   21056:	f104 0310 	add.w	r3, r4, #16
	sem->limit = limit;
   2105a:	e9c4 6502 	strd	r6, r5, [r4, #8]
	list->tail = (sys_dnode_t *)list;
   2105e:	e9c4 4400 	strd	r4, r4, [r4]
   21062:	e9c4 3304 	strd	r3, r3, [r4, #16]

	SYS_TRACING_OBJ_INIT(k_sem, sem);

	z_object_init(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_INIT);
}
   21066:	bd70      	pop	{r4, r5, r6, pc}
   21068:	00026290 	.word	0x00026290
   2106c:	00026277 	.word	0x00026277
   21070:	000255f3 	.word	0x000255f3
   21074:	0002629c 	.word	0x0002629c
   21078:	000262b3 	.word	0x000262b3
   2107c:	000262ca 	.word	0x000262ca

00021080 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   21080:	b570      	push	{r4, r5, r6, lr}
   21082:	4604      	mov	r4, r0
   21084:	f04f 0320 	mov.w	r3, #32
   21088:	f3ef 8611 	mrs	r6, BASEPRI
   2108c:	f383 8811 	msr	BASEPRI, r3
   21090:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21094:	4819      	ldr	r0, [pc, #100]	; (210fc <z_impl_k_sem_give+0x7c>)
   21096:	f000 f903 	bl	212a0 <z_spin_lock_valid>
   2109a:	b960      	cbnz	r0, 210b6 <z_impl_k_sem_give+0x36>
   2109c:	4918      	ldr	r1, [pc, #96]	; (21100 <z_impl_k_sem_give+0x80>)
   2109e:	235f      	movs	r3, #95	; 0x5f
   210a0:	4a18      	ldr	r2, [pc, #96]	; (21104 <z_impl_k_sem_give+0x84>)
   210a2:	4819      	ldr	r0, [pc, #100]	; (21108 <z_impl_k_sem_give+0x88>)
   210a4:	f001 fe43 	bl	22d2e <printk>
   210a8:	4818      	ldr	r0, [pc, #96]	; (2110c <z_impl_k_sem_give+0x8c>)
   210aa:	f001 fe40 	bl	22d2e <printk>
   210ae:	215f      	movs	r1, #95	; 0x5f
   210b0:	4814      	ldr	r0, [pc, #80]	; (21104 <z_impl_k_sem_give+0x84>)
   210b2:	f001 fe49 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   210b6:	4811      	ldr	r0, [pc, #68]	; (210fc <z_impl_k_sem_give+0x7c>)
   210b8:	f000 f910 	bl	212dc <z_spin_lock_set_owner>
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   210bc:	4620      	mov	r0, r4
   210be:	f7ff fdbd 	bl	20c3c <z_unpend_first_thread>
	if (thread != NULL) {
   210c2:	4605      	mov	r5, r0
   210c4:	b170      	cbz	r0, 210e4 <z_impl_k_sem_give+0x64>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   210c6:	7b43      	ldrb	r3, [r0, #13]
   210c8:	06db      	lsls	r3, r3, #27
   210ca:	d103      	bne.n	210d4 <z_impl_k_sem_give+0x54>
	if (z_is_thread_ready(thread)) {
   210cc:	6983      	ldr	r3, [r0, #24]
   210ce:	b90b      	cbnz	r3, 210d4 <z_impl_k_sem_give+0x54>
		z_add_thread_to_ready_q(thread);
   210d0:	f7ff fa4a 	bl	20568 <z_add_thread_to_ready_q>
   210d4:	2300      	movs	r3, #0
   210d6:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   210d8:	4631      	mov	r1, r6
}
   210da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   210de:	4807      	ldr	r0, [pc, #28]	; (210fc <z_impl_k_sem_give+0x7c>)
   210e0:	f7ff b84e 	b.w	20180 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   210e4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   210e8:	429a      	cmp	r2, r3
   210ea:	bf18      	it	ne
   210ec:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   210ee:	2102      	movs	r1, #2
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   210f0:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   210f2:	f104 0010 	add.w	r0, r4, #16
   210f6:	f002 ff42 	bl	23f7e <z_handle_obj_poll_events>
   210fa:	e7ed      	b.n	210d8 <z_impl_k_sem_give+0x58>
   210fc:	20025af8 	.word	0x20025af8
   21100:	0002576e 	.word	0x0002576e
   21104:	0002574f 	.word	0x0002574f
   21108:	000255f3 	.word	0x000255f3
   2110c:	00025783 	.word	0x00025783

00021110 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   21110:	b570      	push	{r4, r5, r6, lr}
   21112:	4605      	mov	r5, r0
   21114:	460e      	mov	r6, r1
   21116:	f3ef 8305 	mrs	r3, IPSR
   2111a:	2b0d      	cmp	r3, #13
   2111c:	d804      	bhi.n	21128 <z_impl_k_sem_take+0x18>
   2111e:	b18b      	cbz	r3, 21144 <z_impl_k_sem_take+0x34>
   21120:	4b34      	ldr	r3, [pc, #208]	; (211f4 <z_impl_k_sem_take+0xe4>)
   21122:	685b      	ldr	r3, [r3, #4]
   21124:	051b      	lsls	r3, r3, #20
   21126:	d40d      	bmi.n	21144 <z_impl_k_sem_take+0x34>
	__ASSERT(((z_arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");
   21128:	b166      	cbz	r6, 21144 <z_impl_k_sem_take+0x34>
   2112a:	4933      	ldr	r1, [pc, #204]	; (211f8 <z_impl_k_sem_take+0xe8>)
   2112c:	238d      	movs	r3, #141	; 0x8d
   2112e:	4a33      	ldr	r2, [pc, #204]	; (211fc <z_impl_k_sem_take+0xec>)
   21130:	4833      	ldr	r0, [pc, #204]	; (21200 <z_impl_k_sem_take+0xf0>)
   21132:	f001 fdfc 	bl	22d2e <printk>
   21136:	4833      	ldr	r0, [pc, #204]	; (21204 <z_impl_k_sem_take+0xf4>)
   21138:	f001 fdf9 	bl	22d2e <printk>
   2113c:	218d      	movs	r1, #141	; 0x8d
   2113e:	482f      	ldr	r0, [pc, #188]	; (211fc <z_impl_k_sem_take+0xec>)
   21140:	f001 fe02 	bl	22d48 <assert_post_action>
   21144:	f04f 0320 	mov.w	r3, #32
   21148:	f3ef 8411 	mrs	r4, BASEPRI
   2114c:	f383 8811 	msr	BASEPRI, r3
   21150:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21154:	482c      	ldr	r0, [pc, #176]	; (21208 <z_impl_k_sem_take+0xf8>)
   21156:	f000 f8a3 	bl	212a0 <z_spin_lock_valid>
   2115a:	b960      	cbnz	r0, 21176 <z_impl_k_sem_take+0x66>
   2115c:	492b      	ldr	r1, [pc, #172]	; (2120c <z_impl_k_sem_take+0xfc>)
   2115e:	235f      	movs	r3, #95	; 0x5f
   21160:	4a2b      	ldr	r2, [pc, #172]	; (21210 <z_impl_k_sem_take+0x100>)
   21162:	4827      	ldr	r0, [pc, #156]	; (21200 <z_impl_k_sem_take+0xf0>)
   21164:	f001 fde3 	bl	22d2e <printk>
   21168:	482a      	ldr	r0, [pc, #168]	; (21214 <z_impl_k_sem_take+0x104>)
   2116a:	f001 fde0 	bl	22d2e <printk>
   2116e:	215f      	movs	r1, #95	; 0x5f
   21170:	4827      	ldr	r0, [pc, #156]	; (21210 <z_impl_k_sem_take+0x100>)
   21172:	f001 fde9 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   21176:	4824      	ldr	r0, [pc, #144]	; (21208 <z_impl_k_sem_take+0xf8>)
   21178:	f000 f8b0 	bl	212dc <z_spin_lock_set_owner>

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   2117c:	68ab      	ldr	r3, [r5, #8]
   2117e:	b1c3      	cbz	r3, 211b2 <z_impl_k_sem_take+0xa2>
		sem->count--;
   21180:	3b01      	subs	r3, #1
   21182:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   21184:	4820      	ldr	r0, [pc, #128]	; (21208 <z_impl_k_sem_take+0xf8>)
   21186:	f000 f899 	bl	212bc <z_spin_unlock_valid>
   2118a:	b960      	cbnz	r0, 211a6 <z_impl_k_sem_take+0x96>
   2118c:	4922      	ldr	r1, [pc, #136]	; (21218 <z_impl_k_sem_take+0x108>)
   2118e:	2372      	movs	r3, #114	; 0x72
   21190:	4a1f      	ldr	r2, [pc, #124]	; (21210 <z_impl_k_sem_take+0x100>)
   21192:	481b      	ldr	r0, [pc, #108]	; (21200 <z_impl_k_sem_take+0xf0>)
   21194:	f001 fdcb 	bl	22d2e <printk>
   21198:	4820      	ldr	r0, [pc, #128]	; (2121c <z_impl_k_sem_take+0x10c>)
   2119a:	f001 fdc8 	bl	22d2e <printk>
   2119e:	2172      	movs	r1, #114	; 0x72
   211a0:	481b      	ldr	r0, [pc, #108]	; (21210 <z_impl_k_sem_take+0x100>)
   211a2:	f001 fdd1 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   211a6:	f384 8811 	msr	BASEPRI, r4
   211aa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   211ae:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   211b0:	bd70      	pop	{r4, r5, r6, pc}
	if (timeout == K_NO_WAIT) {
   211b2:	b9be      	cbnz	r6, 211e4 <z_impl_k_sem_take+0xd4>
   211b4:	4814      	ldr	r0, [pc, #80]	; (21208 <z_impl_k_sem_take+0xf8>)
   211b6:	f000 f881 	bl	212bc <z_spin_unlock_valid>
   211ba:	b960      	cbnz	r0, 211d6 <z_impl_k_sem_take+0xc6>
   211bc:	4916      	ldr	r1, [pc, #88]	; (21218 <z_impl_k_sem_take+0x108>)
   211be:	2372      	movs	r3, #114	; 0x72
   211c0:	4a13      	ldr	r2, [pc, #76]	; (21210 <z_impl_k_sem_take+0x100>)
   211c2:	480f      	ldr	r0, [pc, #60]	; (21200 <z_impl_k_sem_take+0xf0>)
   211c4:	f001 fdb3 	bl	22d2e <printk>
   211c8:	4814      	ldr	r0, [pc, #80]	; (2121c <z_impl_k_sem_take+0x10c>)
   211ca:	f001 fdb0 	bl	22d2e <printk>
   211ce:	2172      	movs	r1, #114	; 0x72
   211d0:	480f      	ldr	r0, [pc, #60]	; (21210 <z_impl_k_sem_take+0x100>)
   211d2:	f001 fdb9 	bl	22d48 <assert_post_action>
   211d6:	f384 8811 	msr	BASEPRI, r4
   211da:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   211de:	f06f 000f 	mvn.w	r0, #15
   211e2:	e7e5      	b.n	211b0 <z_impl_k_sem_take+0xa0>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   211e4:	4633      	mov	r3, r6
   211e6:	462a      	mov	r2, r5
   211e8:	4621      	mov	r1, r4
}
   211ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   211ee:	4806      	ldr	r0, [pc, #24]	; (21208 <z_impl_k_sem_take+0xf8>)
   211f0:	f7ff bc6a 	b.w	20ac8 <z_pend_curr>
   211f4:	e000ed00 	.word	0xe000ed00
   211f8:	000262ef 	.word	0x000262ef
   211fc:	00026277 	.word	0x00026277
   21200:	000255f3 	.word	0x000255f3
   21204:	00026086 	.word	0x00026086
   21208:	20025af8 	.word	0x20025af8
   2120c:	0002576e 	.word	0x0002576e
   21210:	0002574f 	.word	0x0002574f
   21214:	00025783 	.word	0x00025783
   21218:	00025798 	.word	0x00025798
   2121c:	000257af 	.word	0x000257af

00021220 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   21220:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   21222:	4c08      	ldr	r4, [pc, #32]	; (21244 <k_sys_work_q_init+0x24>)
   21224:	f04f 33ff 	mov.w	r3, #4294967295
   21228:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2122c:	4906      	ldr	r1, [pc, #24]	; (21248 <k_sys_work_q_init+0x28>)
   2122e:	4620      	mov	r0, r4
   21230:	f000 f998 	bl	21564 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   21234:	4905      	ldr	r1, [pc, #20]	; (2124c <k_sys_work_q_init+0x2c>)
   21236:	f104 0014 	add.w	r0, r4, #20
   2123a:	f002 fe1b 	bl	23e74 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   2123e:	2000      	movs	r0, #0
   21240:	bd10      	pop	{r4, pc}
   21242:	bf00      	nop
   21244:	20025afc 	.word	0x20025afc
   21248:	20028888 	.word	0x20028888
   2124c:	0002631d 	.word	0x0002631d

00021250 <k_is_in_isr>:
   21250:	f3ef 8005 	mrs	r0, IPSR
   21254:	280d      	cmp	r0, #13
   21256:	d807      	bhi.n	21268 <k_is_in_isr+0x18>
   21258:	b138      	cbz	r0, 2126a <k_is_in_isr+0x1a>
   2125a:	4b04      	ldr	r3, [pc, #16]	; (2126c <k_is_in_isr+0x1c>)
   2125c:	6858      	ldr	r0, [r3, #4]
   2125e:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   21262:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   21266:	4770      	bx	lr
   21268:	2001      	movs	r0, #1
}

bool k_is_in_isr(void)
{
	return z_arch_is_in_isr();
}
   2126a:	4770      	bx	lr
   2126c:	e000ed00 	.word	0xe000ed00

00021270 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   21270:	b530      	push	{r4, r5, lr}
   21272:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21274:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   21276:	4604      	mov	r4, r0
	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21278:	9504      	str	r5, [sp, #16]
   2127a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   2127c:	9503      	str	r5, [sp, #12]
   2127e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   21280:	9502      	str	r5, [sp, #8]
   21282:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   21284:	9501      	str	r5, [sp, #4]
   21286:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   21288:	9500      	str	r5, [sp, #0]
   2128a:	f7ec fd4f 	bl	dd2c <z_arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   2128e:	4b03      	ldr	r3, [pc, #12]	; (2129c <z_setup_new_thread+0x2c>)
   21290:	689b      	ldr	r3, [r3, #8]
   21292:	b103      	cbz	r3, 21296 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   21294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   21296:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   21298:	b007      	add	sp, #28
   2129a:	bd30      	pop	{r4, r5, pc}
   2129c:	20025ab4 	.word	0x20025ab4

000212a0 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   212a0:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   212a2:	b138      	cbz	r0, 212b4 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   212a4:	4b04      	ldr	r3, [pc, #16]	; (212b8 <z_spin_lock_valid+0x18>)
   212a6:	f000 0003 	and.w	r0, r0, #3
   212aa:	7d1b      	ldrb	r3, [r3, #20]
   212ac:	1ac0      	subs	r0, r0, r3
   212ae:	bf18      	it	ne
   212b0:	2001      	movne	r0, #1
   212b2:	4770      	bx	lr
			return false;
		}
	}
	return true;
   212b4:	2001      	movs	r0, #1
}
   212b6:	4770      	bx	lr
   212b8:	20025ab4 	.word	0x20025ab4

000212bc <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   212bc:	4a06      	ldr	r2, [pc, #24]	; (212d8 <z_spin_unlock_valid+0x1c>)
   212be:	7d11      	ldrb	r1, [r2, #20]
   212c0:	6893      	ldr	r3, [r2, #8]
   212c2:	6802      	ldr	r2, [r0, #0]
   212c4:	430b      	orrs	r3, r1
   212c6:	429a      	cmp	r2, r3
   212c8:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   212cc:	bf06      	itte	eq
   212ce:	6003      	streq	r3, [r0, #0]
	return true;
   212d0:	2001      	moveq	r0, #1
		return false;
   212d2:	4618      	movne	r0, r3
}
   212d4:	4770      	bx	lr
   212d6:	bf00      	nop
   212d8:	20025ab4 	.word	0x20025ab4

000212dc <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   212dc:	4a02      	ldr	r2, [pc, #8]	; (212e8 <z_spin_lock_set_owner+0xc>)
   212de:	7d11      	ldrb	r1, [r2, #20]
   212e0:	6893      	ldr	r3, [r2, #8]
   212e2:	430b      	orrs	r3, r1
   212e4:	6003      	str	r3, [r0, #0]
}
   212e6:	4770      	bx	lr
   212e8:	20025ab4 	.word	0x20025ab4

000212ec <z_impl_k_thread_start>:
{
   212ec:	b538      	push	{r3, r4, r5, lr}
   212ee:	4604      	mov	r4, r0
	__asm__ volatile(
   212f0:	f04f 0320 	mov.w	r3, #32
   212f4:	f3ef 8511 	mrs	r5, BASEPRI
   212f8:	f383 8811 	msr	BASEPRI, r3
   212fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21300:	481e      	ldr	r0, [pc, #120]	; (2137c <z_impl_k_thread_start+0x90>)
   21302:	f7ff ffcd 	bl	212a0 <z_spin_lock_valid>
   21306:	b960      	cbnz	r0, 21322 <z_impl_k_thread_start+0x36>
   21308:	491d      	ldr	r1, [pc, #116]	; (21380 <z_impl_k_thread_start+0x94>)
   2130a:	235f      	movs	r3, #95	; 0x5f
   2130c:	4a1d      	ldr	r2, [pc, #116]	; (21384 <z_impl_k_thread_start+0x98>)
   2130e:	481e      	ldr	r0, [pc, #120]	; (21388 <z_impl_k_thread_start+0x9c>)
   21310:	f001 fd0d 	bl	22d2e <printk>
   21314:	481d      	ldr	r0, [pc, #116]	; (2138c <z_impl_k_thread_start+0xa0>)
   21316:	f001 fd0a 	bl	22d2e <printk>
   2131a:	215f      	movs	r1, #95	; 0x5f
   2131c:	4819      	ldr	r0, [pc, #100]	; (21384 <z_impl_k_thread_start+0x98>)
   2131e:	f001 fd13 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   21322:	4816      	ldr	r0, [pc, #88]	; (2137c <z_impl_k_thread_start+0x90>)
   21324:	f7ff ffda 	bl	212dc <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   21328:	7b63      	ldrb	r3, [r4, #13]
   2132a:	075a      	lsls	r2, r3, #29
   2132c:	d415      	bmi.n	2135a <z_impl_k_thread_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2132e:	4813      	ldr	r0, [pc, #76]	; (2137c <z_impl_k_thread_start+0x90>)
   21330:	f7ff ffc4 	bl	212bc <z_spin_unlock_valid>
   21334:	b960      	cbnz	r0, 21350 <z_impl_k_thread_start+0x64>
   21336:	4916      	ldr	r1, [pc, #88]	; (21390 <z_impl_k_thread_start+0xa4>)
   21338:	2372      	movs	r3, #114	; 0x72
   2133a:	4a12      	ldr	r2, [pc, #72]	; (21384 <z_impl_k_thread_start+0x98>)
   2133c:	4812      	ldr	r0, [pc, #72]	; (21388 <z_impl_k_thread_start+0x9c>)
   2133e:	f001 fcf6 	bl	22d2e <printk>
   21342:	4814      	ldr	r0, [pc, #80]	; (21394 <z_impl_k_thread_start+0xa8>)
   21344:	f001 fcf3 	bl	22d2e <printk>
   21348:	2172      	movs	r1, #114	; 0x72
   2134a:	480e      	ldr	r0, [pc, #56]	; (21384 <z_impl_k_thread_start+0x98>)
   2134c:	f001 fcfc 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   21350:	f385 8811 	msr	BASEPRI, r5
   21354:	f3bf 8f6f 	isb	sy
}
   21358:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2135a:	f023 0304 	bic.w	r3, r3, #4
   2135e:	7363      	strb	r3, [r4, #13]
	if (z_is_thread_ready(thread)) {
   21360:	4620      	mov	r0, r4
   21362:	f002 fd7e 	bl	23e62 <z_is_thread_ready>
   21366:	b110      	cbz	r0, 2136e <z_impl_k_thread_start+0x82>
		z_add_thread_to_ready_q(thread);
   21368:	4620      	mov	r0, r4
   2136a:	f7ff f8fd 	bl	20568 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   2136e:	4629      	mov	r1, r5
}
   21370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   21374:	4801      	ldr	r0, [pc, #4]	; (2137c <z_impl_k_thread_start+0x90>)
   21376:	f7fe bf03 	b.w	20180 <z_reschedule>
   2137a:	bf00      	nop
   2137c:	20025bc0 	.word	0x20025bc0
   21380:	0002576e 	.word	0x0002576e
   21384:	0002574f 	.word	0x0002574f
   21388:	000255f3 	.word	0x000255f3
   2138c:	00025783 	.word	0x00025783
   21390:	00025798 	.word	0x00025798
   21394:	000257af 	.word	0x000257af

00021398 <z_impl_k_thread_create>:
{
   21398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2139c:	b086      	sub	sp, #24
   2139e:	4604      	mov	r4, r0
   213a0:	460e      	mov	r6, r1
   213a2:	4617      	mov	r7, r2
   213a4:	4698      	mov	r8, r3
   213a6:	9d11      	ldr	r5, [sp, #68]	; 0x44
   213a8:	f3ef 8305 	mrs	r3, IPSR
   213ac:	2b0d      	cmp	r3, #13
   213ae:	d804      	bhi.n	213ba <z_impl_k_thread_create+0x22>
   213b0:	b193      	cbz	r3, 213d8 <z_impl_k_thread_create+0x40>
   213b2:	4b21      	ldr	r3, [pc, #132]	; (21438 <z_impl_k_thread_create+0xa0>)
   213b4:	685b      	ldr	r3, [r3, #4]
   213b6:	051a      	lsls	r2, r3, #20
   213b8:	d40e      	bmi.n	213d8 <z_impl_k_thread_create+0x40>
	__ASSERT(!z_arch_is_in_isr(), "Threads may not be created in ISRs");
   213ba:	4920      	ldr	r1, [pc, #128]	; (2143c <z_impl_k_thread_create+0xa4>)
   213bc:	f240 2315 	movw	r3, #533	; 0x215
   213c0:	4a1f      	ldr	r2, [pc, #124]	; (21440 <z_impl_k_thread_create+0xa8>)
   213c2:	4820      	ldr	r0, [pc, #128]	; (21444 <z_impl_k_thread_create+0xac>)
   213c4:	f001 fcb3 	bl	22d2e <printk>
   213c8:	481f      	ldr	r0, [pc, #124]	; (21448 <z_impl_k_thread_create+0xb0>)
   213ca:	f001 fcb0 	bl	22d2e <printk>
   213ce:	f240 2115 	movw	r1, #533	; 0x215
   213d2:	481b      	ldr	r0, [pc, #108]	; (21440 <z_impl_k_thread_create+0xa8>)
   213d4:	f001 fcb8 	bl	22d48 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   213d8:	2300      	movs	r3, #0
   213da:	9305      	str	r3, [sp, #20]
   213dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   213de:	463a      	mov	r2, r7
   213e0:	9304      	str	r3, [sp, #16]
   213e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   213e4:	4631      	mov	r1, r6
   213e6:	9303      	str	r3, [sp, #12]
   213e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   213ea:	4620      	mov	r0, r4
   213ec:	9302      	str	r3, [sp, #8]
   213ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   213f0:	9301      	str	r3, [sp, #4]
   213f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   213f4:	9300      	str	r3, [sp, #0]
   213f6:	4643      	mov	r3, r8
   213f8:	f7ff ff3a 	bl	21270 <z_setup_new_thread>
	if (delay != K_FOREVER) {
   213fc:	1c6b      	adds	r3, r5, #1
   213fe:	d003      	beq.n	21408 <z_impl_k_thread_create+0x70>
	if (delay == 0) {
   21400:	b935      	cbnz	r5, 21410 <z_impl_k_thread_create+0x78>
	z_impl_k_thread_start(thread);
   21402:	4620      	mov	r0, r4
   21404:	f7ff ff72 	bl	212ec <z_impl_k_thread_start>
}
   21408:	4620      	mov	r0, r4
   2140a:	b006      	add	sp, #24
   2140c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21410:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   21414:	f240 30e7 	movw	r0, #999	; 0x3e7
   21418:	2100      	movs	r1, #0
   2141a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2141e:	2300      	movs	r3, #0
   21420:	fbc6 0105 	smlal	r0, r1, r6, r5
   21424:	f7ea fefc 	bl	c220 <__aeabi_ldivmod>
   21428:	4908      	ldr	r1, [pc, #32]	; (2144c <z_impl_k_thread_create+0xb4>)
   2142a:	1c42      	adds	r2, r0, #1
   2142c:	f104 0018 	add.w	r0, r4, #24
   21430:	f000 f8f6 	bl	21620 <z_add_timeout>
   21434:	e7e8      	b.n	21408 <z_impl_k_thread_create+0x70>
   21436:	bf00      	nop
   21438:	e000ed00 	.word	0xe000ed00
   2143c:	00026169 	.word	0x00026169
   21440:	00026326 	.word	0x00026326
   21444:	000255f3 	.word	0x000255f3
   21448:	00026342 	.word	0x00026342
   2144c:	00020665 	.word	0x00020665

00021450 <z_init_static_threads>:
{
   21450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   21454:	4f3c      	ldr	r7, [pc, #240]	; (21548 <z_init_static_threads+0xf8>)
   21456:	4d3d      	ldr	r5, [pc, #244]	; (2154c <z_init_static_threads+0xfc>)
   21458:	463e      	mov	r6, r7
   2145a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 2155c <z_init_static_threads+0x10c>
{
   2145e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   21460:	42bd      	cmp	r5, r7
   21462:	d90e      	bls.n	21482 <z_init_static_threads+0x32>
   21464:	493a      	ldr	r1, [pc, #232]	; (21550 <z_init_static_threads+0x100>)
   21466:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   2146a:	4642      	mov	r2, r8
   2146c:	4839      	ldr	r0, [pc, #228]	; (21554 <z_init_static_threads+0x104>)
   2146e:	f001 fc5e 	bl	22d2e <printk>
   21472:	4839      	ldr	r0, [pc, #228]	; (21558 <z_init_static_threads+0x108>)
   21474:	f001 fc5b 	bl	22d2e <printk>
   21478:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   2147c:	4640      	mov	r0, r8
   2147e:	f001 fc63 	bl	22d48 <assert_post_action>
   21482:	42b5      	cmp	r5, r6
   21484:	f105 0430 	add.w	r4, r5, #48	; 0x30
   21488:	d31f      	bcc.n	214ca <z_init_static_threads+0x7a>
	k_sched_lock();
   2148a:	f7fe feb5 	bl	201f8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   2148e:	4c2f      	ldr	r4, [pc, #188]	; (2154c <z_init_static_threads+0xfc>)
   21490:	4d32      	ldr	r5, [pc, #200]	; (2155c <z_init_static_threads+0x10c>)
   21492:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 21550 <z_init_static_threads+0x100>
   21496:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 21554 <z_init_static_threads+0x104>
   2149a:	42b4      	cmp	r4, r6
   2149c:	d90e      	bls.n	214bc <z_init_static_threads+0x6c>
   2149e:	4641      	mov	r1, r8
   214a0:	f240 23f3 	movw	r3, #755	; 0x2f3
   214a4:	462a      	mov	r2, r5
   214a6:	4648      	mov	r0, r9
   214a8:	f001 fc41 	bl	22d2e <printk>
   214ac:	482a      	ldr	r0, [pc, #168]	; (21558 <z_init_static_threads+0x108>)
   214ae:	f001 fc3e 	bl	22d2e <printk>
   214b2:	f240 21f3 	movw	r1, #755	; 0x2f3
   214b6:	4628      	mov	r0, r5
   214b8:	f001 fc46 	bl	22d48 <assert_post_action>
   214bc:	42b4      	cmp	r4, r6
   214be:	d321      	bcc.n	21504 <z_init_static_threads+0xb4>
}
   214c0:	b007      	add	sp, #28
   214c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   214c6:	f7fe bfcd 	b.w	20464 <k_sched_unlock>
		z_setup_new_thread(
   214ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
   214ce:	9305      	str	r3, [sp, #20]
   214d0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   214d4:	9304      	str	r3, [sp, #16]
   214d6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   214da:	9303      	str	r3, [sp, #12]
   214dc:	f854 3c18 	ldr.w	r3, [r4, #-24]
   214e0:	9302      	str	r3, [sp, #8]
   214e2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   214e6:	9301      	str	r3, [sp, #4]
   214e8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   214ec:	9300      	str	r3, [sp, #0]
   214ee:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   214f2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   214f6:	f7ff febb 	bl	21270 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   214fa:	f854 3c30 	ldr.w	r3, [r4, #-48]
   214fe:	64dd      	str	r5, [r3, #76]	; 0x4c
   21500:	4625      	mov	r5, r4
   21502:	e7ad      	b.n	21460 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_FOREVER) {
   21504:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   21508:	f1bc 3fff 	cmp.w	ip, #4294967295
   2150c:	d006      	beq.n	2151c <z_init_static_threads+0xcc>
			schedule_new_thread(thread_data->init_thread,
   2150e:	6827      	ldr	r7, [r4, #0]
	if (delay == 0) {
   21510:	f1bc 0f00 	cmp.w	ip, #0
   21514:	d104      	bne.n	21520 <z_init_static_threads+0xd0>
   21516:	4638      	mov	r0, r7
   21518:	f7ff fee8 	bl	212ec <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2151c:	3430      	adds	r4, #48	; 0x30
   2151e:	e7bc      	b.n	2149a <z_init_static_threads+0x4a>
   21520:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   21524:	f240 30e7 	movw	r0, #999	; 0x3e7
   21528:	2100      	movs	r1, #0
   2152a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2152e:	2300      	movs	r3, #0
   21530:	fbce 010c 	smlal	r0, r1, lr, ip
   21534:	f7ea fe74 	bl	c220 <__aeabi_ldivmod>
   21538:	4909      	ldr	r1, [pc, #36]	; (21560 <z_init_static_threads+0x110>)
   2153a:	1c42      	adds	r2, r0, #1
   2153c:	f107 0018 	add.w	r0, r7, #24
   21540:	f000 f86e 	bl	21620 <z_add_timeout>
   21544:	e7ea      	b.n	2151c <z_init_static_threads+0xcc>
   21546:	bf00      	nop
   21548:	2002a300 	.word	0x2002a300
   2154c:	2002a300 	.word	0x2002a300
   21550:	00026367 	.word	0x00026367
   21554:	000255f3 	.word	0x000255f3
   21558:	0002600a 	.word	0x0002600a
   2155c:	00026326 	.word	0x00026326
   21560:	00020665 	.word	0x00020665

00021564 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   21564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21568:	4605      	mov	r5, r0
   2156a:	b086      	sub	sp, #24
   2156c:	460e      	mov	r6, r1
   2156e:	4617      	mov	r7, r2
   21570:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   21572:	f002 fc07 	bl	23d84 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   21576:	f105 0414 	add.w	r4, r5, #20
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2157a:	2000      	movs	r0, #0
   2157c:	4b09      	ldr	r3, [pc, #36]	; (215a4 <k_work_q_start+0x40>)
   2157e:	e9cd 0004 	strd	r0, r0, [sp, #16]
   21582:	e9cd 0802 	strd	r0, r8, [sp, #8]
   21586:	e9cd 5000 	strd	r5, r0, [sp]
   2158a:	463a      	mov	r2, r7
   2158c:	4631      	mov	r1, r6
   2158e:	4620      	mov	r0, r4
   21590:	f7ff ff02 	bl	21398 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   21594:	4620      	mov	r0, r4
   21596:	4904      	ldr	r1, [pc, #16]	; (215a8 <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   21598:	b006      	add	sp, #24
   2159a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2159e:	f002 bc69 	b.w	23e74 <z_impl_k_thread_name_set>
   215a2:	bf00      	nop
   215a4:	000229f9 	.word	0x000229f9
   215a8:	00026394 	.word	0x00026394

000215ac <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   215ac:	4b03      	ldr	r3, [pc, #12]	; (215bc <elapsed+0x10>)
   215ae:	681b      	ldr	r3, [r3, #0]
   215b0:	b90b      	cbnz	r3, 215b6 <elapsed+0xa>
   215b2:	f7ec ba4b 	b.w	da4c <z_clock_elapsed>
}
   215b6:	2000      	movs	r0, #0
   215b8:	4770      	bx	lr
   215ba:	bf00      	nop
   215bc:	20025bc4 	.word	0x20025bc4

000215c0 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   215c0:	6803      	ldr	r3, [r0, #0]
   215c2:	b140      	cbz	r0, 215d6 <remove_timeout+0x16>
   215c4:	4a07      	ldr	r2, [pc, #28]	; (215e4 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   215c6:	6852      	ldr	r2, [r2, #4]
   215c8:	4290      	cmp	r0, r2
   215ca:	d004      	beq.n	215d6 <remove_timeout+0x16>
	if (next(t) != NULL) {
   215cc:	b11b      	cbz	r3, 215d6 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   215ce:	689a      	ldr	r2, [r3, #8]
   215d0:	6881      	ldr	r1, [r0, #8]
   215d2:	440a      	add	r2, r1
   215d4:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   215d6:	6842      	ldr	r2, [r0, #4]
   215d8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   215da:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   215dc:	2300      	movs	r3, #0
	node->prev = NULL;
   215de:	e9c0 3300 	strd	r3, r3, [r0]
}
   215e2:	4770      	bx	lr
   215e4:	2002a220 	.word	0x2002a220

000215e8 <next_timeout>:
	return list->head == list;
   215e8:	4b0b      	ldr	r3, [pc, #44]	; (21618 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   215ea:	b510      	push	{r4, lr}
   215ec:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   215ee:	429c      	cmp	r4, r3
   215f0:	bf08      	it	eq
   215f2:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   215f4:	f7ff ffda 	bl	215ac <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   215f8:	b154      	cbz	r4, 21610 <next_timeout+0x28>
   215fa:	68a3      	ldr	r3, [r4, #8]
   215fc:	1a18      	subs	r0, r3, r0
   215fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   21602:	4b06      	ldr	r3, [pc, #24]	; (2161c <next_timeout+0x34>)
   21604:	691b      	ldr	r3, [r3, #16]
   21606:	b113      	cbz	r3, 2160e <next_timeout+0x26>
   21608:	4298      	cmp	r0, r3
   2160a:	bfa8      	it	ge
   2160c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2160e:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   21610:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   21614:	e7f5      	b.n	21602 <next_timeout+0x1a>
   21616:	bf00      	nop
   21618:	2002a220 	.word	0x2002a220
   2161c:	20025ab4 	.word	0x20025ab4

00021620 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   21620:	6803      	ldr	r3, [r0, #0]
{
   21622:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21626:	4604      	mov	r4, r0
   21628:	460e      	mov	r6, r1
   2162a:	4615      	mov	r5, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   2162c:	b163      	cbz	r3, 21648 <z_add_timeout+0x28>
   2162e:	4942      	ldr	r1, [pc, #264]	; (21738 <z_add_timeout+0x118>)
   21630:	2356      	movs	r3, #86	; 0x56
   21632:	4a42      	ldr	r2, [pc, #264]	; (2173c <z_add_timeout+0x11c>)
   21634:	4842      	ldr	r0, [pc, #264]	; (21740 <z_add_timeout+0x120>)
   21636:	f001 fb7a 	bl	22d2e <printk>
   2163a:	4842      	ldr	r0, [pc, #264]	; (21744 <z_add_timeout+0x124>)
   2163c:	f001 fb77 	bl	22d2e <printk>
   21640:	2156      	movs	r1, #86	; 0x56
   21642:	483e      	ldr	r0, [pc, #248]	; (2173c <z_add_timeout+0x11c>)
   21644:	f001 fb80 	bl	22d48 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   21648:	2d01      	cmp	r5, #1
   2164a:	bfb8      	it	lt
   2164c:	2501      	movlt	r5, #1
	to->fn = fn;
   2164e:	60e6      	str	r6, [r4, #12]
	__asm__ volatile(
   21650:	f04f 0320 	mov.w	r3, #32
   21654:	f3ef 8811 	mrs	r8, BASEPRI
   21658:	f383 8811 	msr	BASEPRI, r3
   2165c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21660:	4839      	ldr	r0, [pc, #228]	; (21748 <z_add_timeout+0x128>)
   21662:	f7ff fe1d 	bl	212a0 <z_spin_lock_valid>
   21666:	b960      	cbnz	r0, 21682 <z_add_timeout+0x62>
   21668:	4938      	ldr	r1, [pc, #224]	; (2174c <z_add_timeout+0x12c>)
   2166a:	235f      	movs	r3, #95	; 0x5f
   2166c:	4a38      	ldr	r2, [pc, #224]	; (21750 <z_add_timeout+0x130>)
   2166e:	4834      	ldr	r0, [pc, #208]	; (21740 <z_add_timeout+0x120>)
   21670:	f001 fb5d 	bl	22d2e <printk>
   21674:	4837      	ldr	r0, [pc, #220]	; (21754 <z_add_timeout+0x134>)
   21676:	f001 fb5a 	bl	22d2e <printk>
   2167a:	215f      	movs	r1, #95	; 0x5f
   2167c:	4834      	ldr	r0, [pc, #208]	; (21750 <z_add_timeout+0x130>)
   2167e:	f001 fb63 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   21682:	4831      	ldr	r0, [pc, #196]	; (21748 <z_add_timeout+0x128>)
   21684:	f7ff fe2a 	bl	212dc <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   21688:	f7ff ff90 	bl	215ac <elapsed>
   2168c:	4428      	add	r0, r5
	return list->head == list;
   2168e:	4d32      	ldr	r5, [pc, #200]	; (21758 <z_add_timeout+0x138>)
   21690:	60a0      	str	r0, [r4, #8]
   21692:	682e      	ldr	r6, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21694:	42ae      	cmp	r6, r5
   21696:	d005      	beq.n	216a4 <z_add_timeout+0x84>
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");
   21698:	4f28      	ldr	r7, [pc, #160]	; (2173c <z_add_timeout+0x11c>)
   2169a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 21764 <z_add_timeout+0x144>
   2169e:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 21740 <z_add_timeout+0x120>
		for (t = first(); t != NULL; t = next(t)) {
   216a2:	b936      	cbnz	r6, 216b2 <z_add_timeout+0x92>
	node->prev = list->tail;
   216a4:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   216a6:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   216a8:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   216aa:	686b      	ldr	r3, [r5, #4]
   216ac:	601c      	str	r4, [r3, #0]
	list->tail = node;
   216ae:	606c      	str	r4, [r5, #4]
   216b0:	e01a      	b.n	216e8 <z_add_timeout+0xc8>
			__ASSERT(t->dticks >= 0, "");
   216b2:	68b3      	ldr	r3, [r6, #8]
   216b4:	2b00      	cmp	r3, #0
   216b6:	da0c      	bge.n	216d2 <z_add_timeout+0xb2>
   216b8:	4649      	mov	r1, r9
   216ba:	235f      	movs	r3, #95	; 0x5f
   216bc:	463a      	mov	r2, r7
   216be:	4650      	mov	r0, sl
   216c0:	f001 fb35 	bl	22d2e <printk>
   216c4:	481f      	ldr	r0, [pc, #124]	; (21744 <z_add_timeout+0x124>)
   216c6:	f001 fb32 	bl	22d2e <printk>
   216ca:	215f      	movs	r1, #95	; 0x5f
   216cc:	4638      	mov	r0, r7
   216ce:	f001 fb3b 	bl	22d48 <assert_post_action>

			if (t->dticks > to->dticks) {
   216d2:	68b2      	ldr	r2, [r6, #8]
   216d4:	68a3      	ldr	r3, [r4, #8]
   216d6:	429a      	cmp	r2, r3
   216d8:	dd27      	ble.n	2172a <z_add_timeout+0x10a>
				t->dticks -= to->dticks;
   216da:	1ad3      	subs	r3, r2, r3
   216dc:	60b3      	str	r3, [r6, #8]
	node->prev = successor->prev;
   216de:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   216e0:	e9c4 6300 	strd	r6, r3, [r4]
	successor->prev->next = node;
   216e4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   216e6:	6074      	str	r4, [r6, #4]
	return list->head == list;
   216e8:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   216ea:	42ab      	cmp	r3, r5
   216ec:	d006      	beq.n	216fc <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   216ee:	429c      	cmp	r4, r3
   216f0:	d104      	bne.n	216fc <z_add_timeout+0xdc>
			z_clock_set_timeout(next_timeout(), false);
   216f2:	f7ff ff79 	bl	215e8 <next_timeout>
   216f6:	2100      	movs	r1, #0
   216f8:	f7ec f926 	bl	d948 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   216fc:	4812      	ldr	r0, [pc, #72]	; (21748 <z_add_timeout+0x128>)
   216fe:	f7ff fddd 	bl	212bc <z_spin_unlock_valid>
   21702:	b960      	cbnz	r0, 2171e <z_add_timeout+0xfe>
   21704:	4915      	ldr	r1, [pc, #84]	; (2175c <z_add_timeout+0x13c>)
   21706:	2372      	movs	r3, #114	; 0x72
   21708:	4a11      	ldr	r2, [pc, #68]	; (21750 <z_add_timeout+0x130>)
   2170a:	480d      	ldr	r0, [pc, #52]	; (21740 <z_add_timeout+0x120>)
   2170c:	f001 fb0f 	bl	22d2e <printk>
   21710:	4813      	ldr	r0, [pc, #76]	; (21760 <z_add_timeout+0x140>)
   21712:	f001 fb0c 	bl	22d2e <printk>
   21716:	2172      	movs	r1, #114	; 0x72
   21718:	480d      	ldr	r0, [pc, #52]	; (21750 <z_add_timeout+0x130>)
   2171a:	f001 fb15 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   2171e:	f388 8811 	msr	BASEPRI, r8
   21722:	f3bf 8f6f 	isb	sy
		}
	}
}
   21726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			to->dticks -= t->dticks;
   2172a:	1a9b      	subs	r3, r3, r2
   2172c:	60a3      	str	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
   2172e:	686b      	ldr	r3, [r5, #4]
   21730:	429e      	cmp	r6, r3
   21732:	d0b7      	beq.n	216a4 <z_add_timeout+0x84>
   21734:	6836      	ldr	r6, [r6, #0]
   21736:	e7b4      	b.n	216a2 <z_add_timeout+0x82>
   21738:	000263bb 	.word	0x000263bb
   2173c:	0002639e 	.word	0x0002639e
   21740:	000255f3 	.word	0x000255f3
   21744:	00026086 	.word	0x00026086
   21748:	20025bc8 	.word	0x20025bc8
   2174c:	0002576e 	.word	0x0002576e
   21750:	0002574f 	.word	0x0002574f
   21754:	00025783 	.word	0x00025783
   21758:	2002a220 	.word	0x2002a220
   2175c:	00025798 	.word	0x00025798
   21760:	000257af 	.word	0x000257af
   21764:	000263db 	.word	0x000263db

00021768 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   21768:	b538      	push	{r3, r4, r5, lr}
   2176a:	4604      	mov	r4, r0
	__asm__ volatile(
   2176c:	f04f 0320 	mov.w	r3, #32
   21770:	f3ef 8511 	mrs	r5, BASEPRI
   21774:	f383 8811 	msr	BASEPRI, r3
   21778:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2177c:	4819      	ldr	r0, [pc, #100]	; (217e4 <z_abort_timeout+0x7c>)
   2177e:	f7ff fd8f 	bl	212a0 <z_spin_lock_valid>
   21782:	b960      	cbnz	r0, 2179e <z_abort_timeout+0x36>
   21784:	4918      	ldr	r1, [pc, #96]	; (217e8 <z_abort_timeout+0x80>)
   21786:	235f      	movs	r3, #95	; 0x5f
   21788:	4a18      	ldr	r2, [pc, #96]	; (217ec <z_abort_timeout+0x84>)
   2178a:	4819      	ldr	r0, [pc, #100]	; (217f0 <z_abort_timeout+0x88>)
   2178c:	f001 facf 	bl	22d2e <printk>
   21790:	4818      	ldr	r0, [pc, #96]	; (217f4 <z_abort_timeout+0x8c>)
   21792:	f001 facc 	bl	22d2e <printk>
   21796:	215f      	movs	r1, #95	; 0x5f
   21798:	4814      	ldr	r0, [pc, #80]	; (217ec <z_abort_timeout+0x84>)
   2179a:	f001 fad5 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   2179e:	4811      	ldr	r0, [pc, #68]	; (217e4 <z_abort_timeout+0x7c>)
   217a0:	f7ff fd9c 	bl	212dc <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   217a4:	6823      	ldr	r3, [r4, #0]
   217a6:	b1d3      	cbz	r3, 217de <z_abort_timeout+0x76>
			remove_timeout(to);
   217a8:	4620      	mov	r0, r4
   217aa:	f7ff ff09 	bl	215c0 <remove_timeout>
			ret = 0;
   217ae:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   217b0:	480c      	ldr	r0, [pc, #48]	; (217e4 <z_abort_timeout+0x7c>)
   217b2:	f7ff fd83 	bl	212bc <z_spin_unlock_valid>
   217b6:	b960      	cbnz	r0, 217d2 <z_abort_timeout+0x6a>
   217b8:	490f      	ldr	r1, [pc, #60]	; (217f8 <z_abort_timeout+0x90>)
   217ba:	2372      	movs	r3, #114	; 0x72
   217bc:	4a0b      	ldr	r2, [pc, #44]	; (217ec <z_abort_timeout+0x84>)
   217be:	480c      	ldr	r0, [pc, #48]	; (217f0 <z_abort_timeout+0x88>)
   217c0:	f001 fab5 	bl	22d2e <printk>
   217c4:	480d      	ldr	r0, [pc, #52]	; (217fc <z_abort_timeout+0x94>)
   217c6:	f001 fab2 	bl	22d2e <printk>
   217ca:	2172      	movs	r1, #114	; 0x72
   217cc:	4807      	ldr	r0, [pc, #28]	; (217ec <z_abort_timeout+0x84>)
   217ce:	f001 fabb 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   217d2:	f385 8811 	msr	BASEPRI, r5
   217d6:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   217da:	4620      	mov	r0, r4
   217dc:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   217de:	f06f 0415 	mvn.w	r4, #21
   217e2:	e7e5      	b.n	217b0 <z_abort_timeout+0x48>
   217e4:	20025bc8 	.word	0x20025bc8
   217e8:	0002576e 	.word	0x0002576e
   217ec:	0002574f 	.word	0x0002574f
   217f0:	000255f3 	.word	0x000255f3
   217f4:	00025783 	.word	0x00025783
   217f8:	00025798 	.word	0x00025798
   217fc:	000257af 	.word	0x000257af

00021800 <z_get_next_timeout_expiry>:

	return ticks - elapsed();
}

s32_t z_get_next_timeout_expiry(void)
{
   21800:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   21802:	f04f 0320 	mov.w	r3, #32
   21806:	f3ef 8511 	mrs	r5, BASEPRI
   2180a:	f383 8811 	msr	BASEPRI, r3
   2180e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21812:	4817      	ldr	r0, [pc, #92]	; (21870 <z_get_next_timeout_expiry+0x70>)
   21814:	f7ff fd44 	bl	212a0 <z_spin_lock_valid>
   21818:	b960      	cbnz	r0, 21834 <z_get_next_timeout_expiry+0x34>
   2181a:	4916      	ldr	r1, [pc, #88]	; (21874 <z_get_next_timeout_expiry+0x74>)
   2181c:	235f      	movs	r3, #95	; 0x5f
   2181e:	4a16      	ldr	r2, [pc, #88]	; (21878 <z_get_next_timeout_expiry+0x78>)
   21820:	4816      	ldr	r0, [pc, #88]	; (2187c <z_get_next_timeout_expiry+0x7c>)
   21822:	f001 fa84 	bl	22d2e <printk>
   21826:	4816      	ldr	r0, [pc, #88]	; (21880 <z_get_next_timeout_expiry+0x80>)
   21828:	f001 fa81 	bl	22d2e <printk>
   2182c:	215f      	movs	r1, #95	; 0x5f
   2182e:	4812      	ldr	r0, [pc, #72]	; (21878 <z_get_next_timeout_expiry+0x78>)
   21830:	f001 fa8a 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   21834:	480e      	ldr	r0, [pc, #56]	; (21870 <z_get_next_timeout_expiry+0x70>)
   21836:	f7ff fd51 	bl	212dc <z_spin_lock_set_owner>
	s32_t ret = K_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   2183a:	f7ff fed5 	bl	215e8 <next_timeout>
   2183e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   21840:	480b      	ldr	r0, [pc, #44]	; (21870 <z_get_next_timeout_expiry+0x70>)
   21842:	f7ff fd3b 	bl	212bc <z_spin_unlock_valid>
   21846:	b960      	cbnz	r0, 21862 <z_get_next_timeout_expiry+0x62>
   21848:	490e      	ldr	r1, [pc, #56]	; (21884 <z_get_next_timeout_expiry+0x84>)
   2184a:	2372      	movs	r3, #114	; 0x72
   2184c:	4a0a      	ldr	r2, [pc, #40]	; (21878 <z_get_next_timeout_expiry+0x78>)
   2184e:	480b      	ldr	r0, [pc, #44]	; (2187c <z_get_next_timeout_expiry+0x7c>)
   21850:	f001 fa6d 	bl	22d2e <printk>
   21854:	480c      	ldr	r0, [pc, #48]	; (21888 <z_get_next_timeout_expiry+0x88>)
   21856:	f001 fa6a 	bl	22d2e <printk>
   2185a:	2172      	movs	r1, #114	; 0x72
   2185c:	4806      	ldr	r0, [pc, #24]	; (21878 <z_get_next_timeout_expiry+0x78>)
   2185e:	f001 fa73 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   21862:	f385 8811 	msr	BASEPRI, r5
   21866:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2186a:	4620      	mov	r0, r4
   2186c:	bd38      	pop	{r3, r4, r5, pc}
   2186e:	bf00      	nop
   21870:	20025bc8 	.word	0x20025bc8
   21874:	0002576e 	.word	0x0002576e
   21878:	0002574f 	.word	0x0002574f
   2187c:	000255f3 	.word	0x000255f3
   21880:	00025783 	.word	0x00025783
   21884:	00025798 	.word	0x00025798
   21888:	000257af 	.word	0x000257af

0002188c <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   2188c:	b570      	push	{r4, r5, r6, lr}
   2188e:	4604      	mov	r4, r0
   21890:	460e      	mov	r6, r1
	__asm__ volatile(
   21892:	f04f 0320 	mov.w	r3, #32
   21896:	f3ef 8511 	mrs	r5, BASEPRI
   2189a:	f383 8811 	msr	BASEPRI, r3
   2189e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   218a2:	481a      	ldr	r0, [pc, #104]	; (2190c <z_set_timeout_expiry+0x80>)
   218a4:	f7ff fcfc 	bl	212a0 <z_spin_lock_valid>
   218a8:	b960      	cbnz	r0, 218c4 <z_set_timeout_expiry+0x38>
   218aa:	4919      	ldr	r1, [pc, #100]	; (21910 <z_set_timeout_expiry+0x84>)
   218ac:	235f      	movs	r3, #95	; 0x5f
   218ae:	4a19      	ldr	r2, [pc, #100]	; (21914 <z_set_timeout_expiry+0x88>)
   218b0:	4819      	ldr	r0, [pc, #100]	; (21918 <z_set_timeout_expiry+0x8c>)
   218b2:	f001 fa3c 	bl	22d2e <printk>
   218b6:	4819      	ldr	r0, [pc, #100]	; (2191c <z_set_timeout_expiry+0x90>)
   218b8:	f001 fa39 	bl	22d2e <printk>
   218bc:	215f      	movs	r1, #95	; 0x5f
   218be:	4815      	ldr	r0, [pc, #84]	; (21914 <z_set_timeout_expiry+0x88>)
   218c0:	f001 fa42 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   218c4:	4811      	ldr	r0, [pc, #68]	; (2190c <z_set_timeout_expiry+0x80>)
   218c6:	f7ff fd09 	bl	212dc <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   218ca:	f7ff fe8d 	bl	215e8 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   218ce:	2801      	cmp	r0, #1
   218d0:	dd05      	ble.n	218de <z_set_timeout_expiry+0x52>
   218d2:	42a0      	cmp	r0, r4
   218d4:	dd03      	ble.n	218de <z_set_timeout_expiry+0x52>
			z_clock_set_timeout(ticks, idle);
   218d6:	4631      	mov	r1, r6
   218d8:	4620      	mov	r0, r4
   218da:	f7ec f835 	bl	d948 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   218de:	480b      	ldr	r0, [pc, #44]	; (2190c <z_set_timeout_expiry+0x80>)
   218e0:	f7ff fcec 	bl	212bc <z_spin_unlock_valid>
   218e4:	b960      	cbnz	r0, 21900 <z_set_timeout_expiry+0x74>
   218e6:	490e      	ldr	r1, [pc, #56]	; (21920 <z_set_timeout_expiry+0x94>)
   218e8:	2372      	movs	r3, #114	; 0x72
   218ea:	4a0a      	ldr	r2, [pc, #40]	; (21914 <z_set_timeout_expiry+0x88>)
   218ec:	480a      	ldr	r0, [pc, #40]	; (21918 <z_set_timeout_expiry+0x8c>)
   218ee:	f001 fa1e 	bl	22d2e <printk>
   218f2:	480c      	ldr	r0, [pc, #48]	; (21924 <z_set_timeout_expiry+0x98>)
   218f4:	f001 fa1b 	bl	22d2e <printk>
   218f8:	2172      	movs	r1, #114	; 0x72
   218fa:	4806      	ldr	r0, [pc, #24]	; (21914 <z_set_timeout_expiry+0x88>)
   218fc:	f001 fa24 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   21900:	f385 8811 	msr	BASEPRI, r5
   21904:	f3bf 8f6f 	isb	sy
		}
	}
}
   21908:	bd70      	pop	{r4, r5, r6, pc}
   2190a:	bf00      	nop
   2190c:	20025bc8 	.word	0x20025bc8
   21910:	0002576e 	.word	0x0002576e
   21914:	0002574f 	.word	0x0002574f
   21918:	000255f3 	.word	0x000255f3
   2191c:	00025783 	.word	0x00025783
   21920:	00025798 	.word	0x00025798
   21924:	000257af 	.word	0x000257af

00021928 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   21928:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   2192c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2192e:	f7fe ff8d 	bl	2084c <z_time_slice>
	__asm__ volatile(
   21932:	f04f 0320 	mov.w	r3, #32
   21936:	f3ef 8511 	mrs	r5, BASEPRI
   2193a:	f383 8811 	msr	BASEPRI, r3
   2193e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21942:	4846      	ldr	r0, [pc, #280]	; (21a5c <z_clock_announce+0x134>)
   21944:	f7ff fcac 	bl	212a0 <z_spin_lock_valid>
   21948:	b960      	cbnz	r0, 21964 <z_clock_announce+0x3c>
   2194a:	4945      	ldr	r1, [pc, #276]	; (21a60 <z_clock_announce+0x138>)
   2194c:	235f      	movs	r3, #95	; 0x5f
   2194e:	4a45      	ldr	r2, [pc, #276]	; (21a64 <z_clock_announce+0x13c>)
   21950:	4845      	ldr	r0, [pc, #276]	; (21a68 <z_clock_announce+0x140>)
   21952:	f001 f9ec 	bl	22d2e <printk>
   21956:	4845      	ldr	r0, [pc, #276]	; (21a6c <z_clock_announce+0x144>)
   21958:	f001 f9e9 	bl	22d2e <printk>
   2195c:	215f      	movs	r1, #95	; 0x5f
   2195e:	4841      	ldr	r0, [pc, #260]	; (21a64 <z_clock_announce+0x13c>)
   21960:	f001 f9f2 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   21964:	4f42      	ldr	r7, [pc, #264]	; (21a70 <z_clock_announce+0x148>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   21966:	4e43      	ldr	r6, [pc, #268]	; (21a74 <z_clock_announce+0x14c>)
   21968:	46b9      	mov	r9, r7
   2196a:	483c      	ldr	r0, [pc, #240]	; (21a5c <z_clock_announce+0x134>)
	return list->head == list;
   2196c:	f8df 8110 	ldr.w	r8, [pc, #272]	; 21a80 <z_clock_announce+0x158>
   21970:	f7ff fcb4 	bl	212dc <z_spin_lock_set_owner>
   21974:	6034      	str	r4, [r6, #0]
   21976:	f8d8 4000 	ldr.w	r4, [r8]
   2197a:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2197c:	4544      	cmp	r4, r8
   2197e:	e9d7 bc00 	ldrd	fp, ip, [r7]
   21982:	d005      	beq.n	21990 <z_clock_announce+0x68>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   21984:	b124      	cbz	r4, 21990 <z_clock_announce+0x68>
   21986:	68a3      	ldr	r3, [r4, #8]
   21988:	4293      	cmp	r3, r2
   2198a:	dd25      	ble.n	219d8 <z_clock_announce+0xb0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2198c:	1a9b      	subs	r3, r3, r2
   2198e:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   21990:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   21992:	eb1b 0002 	adds.w	r0, fp, r2
   21996:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   2199a:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   2199e:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   219a0:	f7ff fe22 	bl	215e8 <next_timeout>
   219a4:	4621      	mov	r1, r4
   219a6:	f7eb ffcf 	bl	d948 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   219aa:	482c      	ldr	r0, [pc, #176]	; (21a5c <z_clock_announce+0x134>)
   219ac:	f7ff fc86 	bl	212bc <z_spin_unlock_valid>
   219b0:	b960      	cbnz	r0, 219cc <z_clock_announce+0xa4>
   219b2:	4931      	ldr	r1, [pc, #196]	; (21a78 <z_clock_announce+0x150>)
   219b4:	2372      	movs	r3, #114	; 0x72
   219b6:	4a2b      	ldr	r2, [pc, #172]	; (21a64 <z_clock_announce+0x13c>)
   219b8:	482b      	ldr	r0, [pc, #172]	; (21a68 <z_clock_announce+0x140>)
   219ba:	f001 f9b8 	bl	22d2e <printk>
   219be:	482f      	ldr	r0, [pc, #188]	; (21a7c <z_clock_announce+0x154>)
   219c0:	f001 f9b5 	bl	22d2e <printk>
   219c4:	2172      	movs	r1, #114	; 0x72
   219c6:	4827      	ldr	r0, [pc, #156]	; (21a64 <z_clock_announce+0x13c>)
   219c8:	f001 f9be 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   219cc:	f385 8811 	msr	BASEPRI, r5
   219d0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   219d4:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   219d8:	eb1b 0003 	adds.w	r0, fp, r3
   219dc:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   219e0:	1ad3      	subs	r3, r2, r3
   219e2:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   219e4:	2300      	movs	r3, #0
		curr_tick += dt;
   219e6:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   219ea:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   219ec:	4620      	mov	r0, r4
   219ee:	f7ff fde7 	bl	215c0 <remove_timeout>
   219f2:	481a      	ldr	r0, [pc, #104]	; (21a5c <z_clock_announce+0x134>)
   219f4:	f7ff fc62 	bl	212bc <z_spin_unlock_valid>
   219f8:	b960      	cbnz	r0, 21a14 <z_clock_announce+0xec>
   219fa:	491f      	ldr	r1, [pc, #124]	; (21a78 <z_clock_announce+0x150>)
   219fc:	2372      	movs	r3, #114	; 0x72
   219fe:	4a19      	ldr	r2, [pc, #100]	; (21a64 <z_clock_announce+0x13c>)
   21a00:	4819      	ldr	r0, [pc, #100]	; (21a68 <z_clock_announce+0x140>)
   21a02:	f001 f994 	bl	22d2e <printk>
   21a06:	481d      	ldr	r0, [pc, #116]	; (21a7c <z_clock_announce+0x154>)
   21a08:	f001 f991 	bl	22d2e <printk>
   21a0c:	2172      	movs	r1, #114	; 0x72
   21a0e:	4815      	ldr	r0, [pc, #84]	; (21a64 <z_clock_announce+0x13c>)
   21a10:	f001 f99a 	bl	22d48 <assert_post_action>
   21a14:	f385 8811 	msr	BASEPRI, r5
   21a18:	f3bf 8f6f 	isb	sy
		t->fn(t);
   21a1c:	68e3      	ldr	r3, [r4, #12]
   21a1e:	4620      	mov	r0, r4
   21a20:	4798      	blx	r3
	__asm__ volatile(
   21a22:	f04f 0320 	mov.w	r3, #32
   21a26:	f3ef 8511 	mrs	r5, BASEPRI
   21a2a:	f383 8811 	msr	BASEPRI, r3
   21a2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21a32:	480a      	ldr	r0, [pc, #40]	; (21a5c <z_clock_announce+0x134>)
   21a34:	f7ff fc34 	bl	212a0 <z_spin_lock_valid>
   21a38:	b960      	cbnz	r0, 21a54 <z_clock_announce+0x12c>
   21a3a:	4909      	ldr	r1, [pc, #36]	; (21a60 <z_clock_announce+0x138>)
   21a3c:	235f      	movs	r3, #95	; 0x5f
   21a3e:	4a09      	ldr	r2, [pc, #36]	; (21a64 <z_clock_announce+0x13c>)
   21a40:	4809      	ldr	r0, [pc, #36]	; (21a68 <z_clock_announce+0x140>)
   21a42:	f001 f974 	bl	22d2e <printk>
   21a46:	4809      	ldr	r0, [pc, #36]	; (21a6c <z_clock_announce+0x144>)
   21a48:	f001 f971 	bl	22d2e <printk>
   21a4c:	215f      	movs	r1, #95	; 0x5f
   21a4e:	4805      	ldr	r0, [pc, #20]	; (21a64 <z_clock_announce+0x13c>)
   21a50:	f001 f97a 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   21a54:	4801      	ldr	r0, [pc, #4]	; (21a5c <z_clock_announce+0x134>)
   21a56:	f7ff fc41 	bl	212dc <z_spin_lock_set_owner>
	return k;
   21a5a:	e78c      	b.n	21976 <z_clock_announce+0x4e>
   21a5c:	20025bc8 	.word	0x20025bc8
   21a60:	0002576e 	.word	0x0002576e
   21a64:	0002574f 	.word	0x0002574f
   21a68:	000255f3 	.word	0x000255f3
   21a6c:	00025783 	.word	0x00025783
   21a70:	20020000 	.word	0x20020000
   21a74:	20025bc4 	.word	0x20025bc4
   21a78:	00025798 	.word	0x00025798
   21a7c:	000257af 	.word	0x000257af
   21a80:	2002a220 	.word	0x2002a220

00021a84 <z_tick_get>:

s64_t z_tick_get(void)
{
   21a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21a88:	f04f 0320 	mov.w	r3, #32
   21a8c:	f3ef 8611 	mrs	r6, BASEPRI
   21a90:	f383 8811 	msr	BASEPRI, r3
   21a94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21a98:	481a      	ldr	r0, [pc, #104]	; (21b04 <z_tick_get+0x80>)
   21a9a:	f7ff fc01 	bl	212a0 <z_spin_lock_valid>
   21a9e:	b960      	cbnz	r0, 21aba <z_tick_get+0x36>
   21aa0:	4919      	ldr	r1, [pc, #100]	; (21b08 <z_tick_get+0x84>)
   21aa2:	235f      	movs	r3, #95	; 0x5f
   21aa4:	4a19      	ldr	r2, [pc, #100]	; (21b0c <z_tick_get+0x88>)
   21aa6:	481a      	ldr	r0, [pc, #104]	; (21b10 <z_tick_get+0x8c>)
   21aa8:	f001 f941 	bl	22d2e <printk>
   21aac:	4819      	ldr	r0, [pc, #100]	; (21b14 <z_tick_get+0x90>)
   21aae:	f001 f93e 	bl	22d2e <printk>
   21ab2:	215f      	movs	r1, #95	; 0x5f
   21ab4:	4815      	ldr	r0, [pc, #84]	; (21b0c <z_tick_get+0x88>)
   21ab6:	f001 f947 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   21aba:	4812      	ldr	r0, [pc, #72]	; (21b04 <z_tick_get+0x80>)
   21abc:	f7ff fc0e 	bl	212dc <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   21ac0:	f7eb ffc4 	bl	da4c <z_clock_elapsed>
   21ac4:	4b14      	ldr	r3, [pc, #80]	; (21b18 <z_tick_get+0x94>)
   21ac6:	e9d3 4500 	ldrd	r4, r5, [r3]
   21aca:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   21acc:	480d      	ldr	r0, [pc, #52]	; (21b04 <z_tick_get+0x80>)
   21ace:	f145 0800 	adc.w	r8, r5, #0
   21ad2:	f7ff fbf3 	bl	212bc <z_spin_unlock_valid>
   21ad6:	b960      	cbnz	r0, 21af2 <z_tick_get+0x6e>
   21ad8:	4910      	ldr	r1, [pc, #64]	; (21b1c <z_tick_get+0x98>)
   21ada:	2372      	movs	r3, #114	; 0x72
   21adc:	4a0b      	ldr	r2, [pc, #44]	; (21b0c <z_tick_get+0x88>)
   21ade:	480c      	ldr	r0, [pc, #48]	; (21b10 <z_tick_get+0x8c>)
   21ae0:	f001 f925 	bl	22d2e <printk>
   21ae4:	480e      	ldr	r0, [pc, #56]	; (21b20 <z_tick_get+0x9c>)
   21ae6:	f001 f922 	bl	22d2e <printk>
   21aea:	2172      	movs	r1, #114	; 0x72
   21aec:	4807      	ldr	r0, [pc, #28]	; (21b0c <z_tick_get+0x88>)
   21aee:	f001 f92b 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   21af2:	f386 8811 	msr	BASEPRI, r6
   21af6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   21afa:	4638      	mov	r0, r7
   21afc:	4641      	mov	r1, r8
   21afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21b02:	bf00      	nop
   21b04:	20025bc8 	.word	0x20025bc8
   21b08:	0002576e 	.word	0x0002576e
   21b0c:	0002574f 	.word	0x0002574f
   21b10:	000255f3 	.word	0x000255f3
   21b14:	00025783 	.word	0x00025783
   21b18:	20020000 	.word	0x20020000
   21b1c:	00025798 	.word	0x00025798
   21b20:	000257af 	.word	0x000257af

00021b24 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, u32_t state)
{
   21b24:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   21b26:	6883      	ldr	r3, [r0, #8]
{
   21b28:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   21b2a:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   21b2c:	b964      	cbnz	r4, 21b48 <k_poll_poller_cb+0x24>
   21b2e:	4915      	ldr	r1, [pc, #84]	; (21b84 <k_poll_poller_cb+0x60>)
   21b30:	23e0      	movs	r3, #224	; 0xe0
   21b32:	4a15      	ldr	r2, [pc, #84]	; (21b88 <k_poll_poller_cb+0x64>)
   21b34:	4815      	ldr	r0, [pc, #84]	; (21b8c <k_poll_poller_cb+0x68>)
   21b36:	f001 f8fa 	bl	22d2e <printk>
   21b3a:	4815      	ldr	r0, [pc, #84]	; (21b90 <k_poll_poller_cb+0x6c>)
   21b3c:	f001 f8f7 	bl	22d2e <printk>
   21b40:	21e0      	movs	r1, #224	; 0xe0
   21b42:	4811      	ldr	r0, [pc, #68]	; (21b88 <k_poll_poller_cb+0x64>)
   21b44:	f001 f900 	bl	22d48 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   21b48:	7b63      	ldrb	r3, [r4, #13]
   21b4a:	079a      	lsls	r2, r3, #30
   21b4c:	d401      	bmi.n	21b52 <k_poll_poller_cb+0x2e>
		return 0;
   21b4e:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   21b50:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   21b52:	6a23      	ldr	r3, [r4, #32]
   21b54:	3302      	adds	r3, #2
   21b56:	d012      	beq.n	21b7e <k_poll_poller_cb+0x5a>
	z_unpend_thread(thread);
   21b58:	4620      	mov	r0, r4
   21b5a:	f7fe fbf9 	bl	20350 <z_unpend_thread>
	z_arch_thread_return_value_set(thread,
   21b5e:	2d08      	cmp	r5, #8
   21b60:	bf0c      	ite	eq
   21b62:	f06f 0303 	mvneq.w	r3, #3
   21b66:	2300      	movne	r3, #0
   21b68:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   21b6a:	7b63      	ldrb	r3, [r4, #13]
   21b6c:	06db      	lsls	r3, r3, #27
   21b6e:	d1ee      	bne.n	21b4e <k_poll_poller_cb+0x2a>
	if (!z_is_thread_ready(thread)) {
   21b70:	69a5      	ldr	r5, [r4, #24]
   21b72:	2d00      	cmp	r5, #0
   21b74:	d1eb      	bne.n	21b4e <k_poll_poller_cb+0x2a>
		z_add_thread_to_ready_q(thread);
   21b76:	4620      	mov	r0, r4
   21b78:	f7fe fcf6 	bl	20568 <z_add_thread_to_ready_q>
	return 0;
   21b7c:	e7e7      	b.n	21b4e <k_poll_poller_cb+0x2a>
		return -EAGAIN;
   21b7e:	f06f 000a 	mvn.w	r0, #10
   21b82:	e7e5      	b.n	21b50 <k_poll_poller_cb+0x2c>
   21b84:	00026551 	.word	0x00026551
   21b88:	00026537 	.word	0x00026537
   21b8c:	000255f3 	.word	0x000255f3
   21b90:	00026567 	.word	0x00026567

00021b94 <clear_event_registrations>:
{
   21b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21b98:	2414      	movs	r4, #20
   21b9a:	4680      	mov	r8, r0
   21b9c:	4617      	mov	r7, r2
	while (num_events--) {
   21b9e:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   21ba2:	4d47      	ldr	r5, [pc, #284]	; (21cc0 <clear_event_registrations+0x12c>)
   21ba4:	f8df 9154 	ldr.w	r9, [pc, #340]	; 21cfc <clear_event_registrations+0x168>
   21ba8:	4e46      	ldr	r6, [pc, #280]	; (21cc4 <clear_event_registrations+0x130>)
	while (num_events--) {
   21baa:	4544      	cmp	r4, r8
   21bac:	d101      	bne.n	21bb2 <clear_event_registrations+0x1e>
}
   21bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   21bb2:	2300      	movs	r3, #0
   21bb4:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   21bb8:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   21bbc:	f003 030f 	and.w	r3, r3, #15
   21bc0:	2b04      	cmp	r3, #4
   21bc2:	d83d      	bhi.n	21c40 <clear_event_registrations+0xac>
   21bc4:	e8df f003 	tbb	[pc, r3]
   21bc8:	3c032d49 	.word	0x3c032d49
   21bcc:	1e          	.byte	0x1e
   21bcd:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   21bce:	f854 3c04 	ldr.w	r3, [r4, #-4]
   21bd2:	b963      	cbnz	r3, 21bee <clear_event_registrations+0x5a>
   21bd4:	493c      	ldr	r1, [pc, #240]	; (21cc8 <clear_event_registrations+0x134>)
   21bd6:	2396      	movs	r3, #150	; 0x96
   21bd8:	462a      	mov	r2, r5
   21bda:	4630      	mov	r0, r6
   21bdc:	f001 f8a7 	bl	22d2e <printk>
   21be0:	483a      	ldr	r0, [pc, #232]	; (21ccc <clear_event_registrations+0x138>)
   21be2:	f001 f8a4 	bl	22d2e <printk>
   21be6:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   21be8:	4628      	mov	r0, r5
   21bea:	f001 f8ad 	bl	22d48 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   21bee:	f854 3c14 	ldr.w	r3, [r4, #-20]
   21bf2:	b393      	cbz	r3, 21c5a <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   21bf4:	f854 2c10 	ldr.w	r2, [r4, #-16]
   21bf8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   21bfa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21bfc:	2300      	movs	r3, #0
	node->prev = NULL;
   21bfe:	e944 3305 	strd	r3, r3, [r4, #-20]
   21c02:	e02a      	b.n	21c5a <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   21c04:	f854 3c04 	ldr.w	r3, [r4, #-4]
   21c08:	2b00      	cmp	r3, #0
   21c0a:	d1f0      	bne.n	21bee <clear_event_registrations+0x5a>
   21c0c:	4930      	ldr	r1, [pc, #192]	; (21cd0 <clear_event_registrations+0x13c>)
   21c0e:	239a      	movs	r3, #154	; 0x9a
   21c10:	462a      	mov	r2, r5
   21c12:	4630      	mov	r0, r6
   21c14:	f001 f88b 	bl	22d2e <printk>
   21c18:	482e      	ldr	r0, [pc, #184]	; (21cd4 <clear_event_registrations+0x140>)
   21c1a:	f001 f888 	bl	22d2e <printk>
   21c1e:	219a      	movs	r1, #154	; 0x9a
   21c20:	e7e2      	b.n	21be8 <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   21c22:	f854 3c04 	ldr.w	r3, [r4, #-4]
   21c26:	2b00      	cmp	r3, #0
   21c28:	d1e1      	bne.n	21bee <clear_event_registrations+0x5a>
   21c2a:	492b      	ldr	r1, [pc, #172]	; (21cd8 <clear_event_registrations+0x144>)
   21c2c:	239e      	movs	r3, #158	; 0x9e
   21c2e:	462a      	mov	r2, r5
   21c30:	4630      	mov	r0, r6
   21c32:	f001 f87c 	bl	22d2e <printk>
   21c36:	4829      	ldr	r0, [pc, #164]	; (21cdc <clear_event_registrations+0x148>)
   21c38:	f001 f879 	bl	22d2e <printk>
   21c3c:	219e      	movs	r1, #158	; 0x9e
   21c3e:	e7d3      	b.n	21be8 <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   21c40:	4649      	mov	r1, r9
   21c42:	23a5      	movs	r3, #165	; 0xa5
   21c44:	462a      	mov	r2, r5
   21c46:	4630      	mov	r0, r6
   21c48:	f001 f871 	bl	22d2e <printk>
   21c4c:	4824      	ldr	r0, [pc, #144]	; (21ce0 <clear_event_registrations+0x14c>)
   21c4e:	f001 f86e 	bl	22d2e <printk>
   21c52:	21a5      	movs	r1, #165	; 0xa5
   21c54:	4628      	mov	r0, r5
   21c56:	f001 f877 	bl	22d48 <assert_post_action>
   21c5a:	4822      	ldr	r0, [pc, #136]	; (21ce4 <clear_event_registrations+0x150>)
   21c5c:	f7ff fb2e 	bl	212bc <z_spin_unlock_valid>
   21c60:	b960      	cbnz	r0, 21c7c <clear_event_registrations+0xe8>
   21c62:	4921      	ldr	r1, [pc, #132]	; (21ce8 <clear_event_registrations+0x154>)
   21c64:	2372      	movs	r3, #114	; 0x72
   21c66:	4a21      	ldr	r2, [pc, #132]	; (21cec <clear_event_registrations+0x158>)
   21c68:	4630      	mov	r0, r6
   21c6a:	f001 f860 	bl	22d2e <printk>
   21c6e:	4820      	ldr	r0, [pc, #128]	; (21cf0 <clear_event_registrations+0x15c>)
   21c70:	f001 f85d 	bl	22d2e <printk>
   21c74:	2172      	movs	r1, #114	; 0x72
   21c76:	481d      	ldr	r0, [pc, #116]	; (21cec <clear_event_registrations+0x158>)
   21c78:	f001 f866 	bl	22d48 <assert_post_action>
   21c7c:	f387 8811 	msr	BASEPRI, r7
   21c80:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   21c84:	f04f 0320 	mov.w	r3, #32
   21c88:	f3ef 8711 	mrs	r7, BASEPRI
   21c8c:	f383 8811 	msr	BASEPRI, r3
   21c90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21c94:	4813      	ldr	r0, [pc, #76]	; (21ce4 <clear_event_registrations+0x150>)
   21c96:	f7ff fb03 	bl	212a0 <z_spin_lock_valid>
   21c9a:	b960      	cbnz	r0, 21cb6 <clear_event_registrations+0x122>
   21c9c:	4915      	ldr	r1, [pc, #84]	; (21cf4 <clear_event_registrations+0x160>)
   21c9e:	235f      	movs	r3, #95	; 0x5f
   21ca0:	4a12      	ldr	r2, [pc, #72]	; (21cec <clear_event_registrations+0x158>)
   21ca2:	4630      	mov	r0, r6
   21ca4:	f001 f843 	bl	22d2e <printk>
   21ca8:	4813      	ldr	r0, [pc, #76]	; (21cf8 <clear_event_registrations+0x164>)
   21caa:	f001 f840 	bl	22d2e <printk>
   21cae:	215f      	movs	r1, #95	; 0x5f
   21cb0:	480e      	ldr	r0, [pc, #56]	; (21cec <clear_event_registrations+0x158>)
   21cb2:	f001 f849 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   21cb6:	480b      	ldr	r0, [pc, #44]	; (21ce4 <clear_event_registrations+0x150>)
   21cb8:	f7ff fb10 	bl	212dc <z_spin_lock_set_owner>
	return k;
   21cbc:	3c14      	subs	r4, #20
   21cbe:	e774      	b.n	21baa <clear_event_registrations+0x16>
   21cc0:	00026537 	.word	0x00026537
   21cc4:	000255f3 	.word	0x000255f3
   21cc8:	000263ea 	.word	0x000263ea
   21ccc:	00026404 	.word	0x00026404
   21cd0:	00026419 	.word	0x00026419
   21cd4:	00026435 	.word	0x00026435
   21cd8:	00026446 	.word	0x00026446
   21cdc:	00026463 	.word	0x00026463
   21ce0:	0002647a 	.word	0x0002647a
   21ce4:	20025bcc 	.word	0x20025bcc
   21ce8:	00025798 	.word	0x00025798
   21cec:	0002574f 	.word	0x0002574f
   21cf0:	000257af 	.word	0x000257af
   21cf4:	0002576e 	.word	0x0002576e
   21cf8:	00025783 	.word	0x00025783
   21cfc:	000261cb 	.word	0x000261cb

00021d00 <register_events>:
{
   21d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   21d04:	2600      	movs	r6, #0
{
   21d06:	468a      	mov	sl, r1
   21d08:	4615      	mov	r5, r2
   21d0a:	4604      	mov	r4, r0
	int events_registered = 0;
   21d0c:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21d0e:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 21ef0 <register_events+0x1f0>
   21d12:	4f67      	ldr	r7, [pc, #412]	; (21eb0 <register_events+0x1b0>)
{
   21d14:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   21d16:	4556      	cmp	r6, sl
   21d18:	db03      	blt.n	21d22 <register_events+0x22>
}
   21d1a:	4640      	mov	r0, r8
   21d1c:	b003      	add	sp, #12
   21d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d22:	f04f 0320 	mov.w	r3, #32
   21d26:	f3ef 8b11 	mrs	fp, BASEPRI
   21d2a:	f383 8811 	msr	BASEPRI, r3
   21d2e:	f3bf 8f6f 	isb	sy
   21d32:	4648      	mov	r0, r9
   21d34:	f7ff fab4 	bl	212a0 <z_spin_lock_valid>
   21d38:	b960      	cbnz	r0, 21d54 <register_events+0x54>
   21d3a:	495e      	ldr	r1, [pc, #376]	; (21eb4 <register_events+0x1b4>)
   21d3c:	235f      	movs	r3, #95	; 0x5f
   21d3e:	463a      	mov	r2, r7
   21d40:	485d      	ldr	r0, [pc, #372]	; (21eb8 <register_events+0x1b8>)
   21d42:	f000 fff4 	bl	22d2e <printk>
   21d46:	485d      	ldr	r0, [pc, #372]	; (21ebc <register_events+0x1bc>)
   21d48:	f000 fff1 	bl	22d2e <printk>
   21d4c:	215f      	movs	r1, #95	; 0x5f
   21d4e:	4638      	mov	r0, r7
   21d50:	f000 fffa 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   21d54:	4648      	mov	r0, r9
   21d56:	f7ff fac1 	bl	212dc <z_spin_lock_set_owner>
	switch (event->type) {
   21d5a:	7b63      	ldrb	r3, [r4, #13]
   21d5c:	f003 030f 	and.w	r3, r3, #15
   21d60:	2b04      	cmp	r3, #4
   21d62:	d843      	bhi.n	21dec <register_events+0xec>
   21d64:	e8df f003 	tbb	[pc, r3]
   21d68:	42033c2c 	.word	0x42033c2c
   21d6c:	29          	.byte	0x29
   21d6d:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   21d6e:	6923      	ldr	r3, [r4, #16]
   21d70:	689b      	ldr	r3, [r3, #8]
   21d72:	b32b      	cbz	r3, 21dc0 <register_events+0xc0>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   21d74:	2202      	movs	r2, #2
	event->poller = NULL;
   21d76:	2100      	movs	r1, #0
	event->state |= state;
   21d78:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   21d7a:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   21d7c:	f3c3 3004 	ubfx	r0, r3, #12, #5
   21d80:	4302      	orrs	r2, r0
   21d82:	f362 3310 	bfi	r3, r2, #12, #5
   21d86:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   21d88:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   21d8a:	4648      	mov	r0, r9
   21d8c:	f7ff fa96 	bl	212bc <z_spin_unlock_valid>
   21d90:	b960      	cbnz	r0, 21dac <register_events+0xac>
   21d92:	494b      	ldr	r1, [pc, #300]	; (21ec0 <register_events+0x1c0>)
   21d94:	2372      	movs	r3, #114	; 0x72
   21d96:	463a      	mov	r2, r7
   21d98:	4847      	ldr	r0, [pc, #284]	; (21eb8 <register_events+0x1b8>)
   21d9a:	f000 ffc8 	bl	22d2e <printk>
   21d9e:	4849      	ldr	r0, [pc, #292]	; (21ec4 <register_events+0x1c4>)
   21da0:	f000 ffc5 	bl	22d2e <printk>
   21da4:	2172      	movs	r1, #114	; 0x72
   21da6:	4638      	mov	r0, r7
   21da8:	f000 ffce 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   21dac:	f38b 8811 	msr	BASEPRI, fp
   21db0:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   21db4:	3601      	adds	r6, #1
   21db6:	3414      	adds	r4, #20
   21db8:	e7ad      	b.n	21d16 <register_events+0x16>
		if (!k_queue_is_empty(event->queue)) {
   21dba:	6923      	ldr	r3, [r4, #16]
   21dbc:	681b      	ldr	r3, [r3, #0]
   21dbe:	bb33      	cbnz	r3, 21e0e <register_events+0x10e>
		} else if (!just_check && poller->is_polling) {
   21dc0:	9b01      	ldr	r3, [sp, #4]
   21dc2:	2b00      	cmp	r3, #0
   21dc4:	d1e1      	bne.n	21d8a <register_events+0x8a>
   21dc6:	782b      	ldrb	r3, [r5, #0]
   21dc8:	2b00      	cmp	r3, #0
   21dca:	d0de      	beq.n	21d8a <register_events+0x8a>
	switch (event->type) {
   21dcc:	7b63      	ldrb	r3, [r4, #13]
   21dce:	f003 030f 	and.w	r3, r3, #15
   21dd2:	2b04      	cmp	r3, #4
   21dd4:	d85d      	bhi.n	21e92 <register_events+0x192>
   21dd6:	e8df f003 	tbb	[pc, r3]
   21dda:	4931      	.short	0x4931
   21ddc:	5c1c      	.short	0x5c1c
   21dde:	35          	.byte	0x35
   21ddf:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   21de0:	6923      	ldr	r3, [r4, #16]
   21de2:	689b      	ldr	r3, [r3, #8]
   21de4:	2b00      	cmp	r3, #0
   21de6:	d0eb      	beq.n	21dc0 <register_events+0xc0>
			*state = K_POLL_STATE_SIGNALED;
   21de8:	2201      	movs	r2, #1
   21dea:	e7c4      	b.n	21d76 <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   21dec:	2350      	movs	r3, #80	; 0x50
   21dee:	4a36      	ldr	r2, [pc, #216]	; (21ec8 <register_events+0x1c8>)
   21df0:	4936      	ldr	r1, [pc, #216]	; (21ecc <register_events+0x1cc>)
   21df2:	4831      	ldr	r0, [pc, #196]	; (21eb8 <register_events+0x1b8>)
   21df4:	f000 ff9b 	bl	22d2e <printk>
   21df8:	7b61      	ldrb	r1, [r4, #13]
   21dfa:	4835      	ldr	r0, [pc, #212]	; (21ed0 <register_events+0x1d0>)
   21dfc:	f001 010f 	and.w	r1, r1, #15
   21e00:	f000 ff95 	bl	22d2e <printk>
   21e04:	2150      	movs	r1, #80	; 0x50
   21e06:	4830      	ldr	r0, [pc, #192]	; (21ec8 <register_events+0x1c8>)
   21e08:	f000 ff9e 	bl	22d48 <assert_post_action>
		break;
   21e0c:	e7d8      	b.n	21dc0 <register_events+0xc0>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   21e0e:	2204      	movs	r2, #4
   21e10:	e7b1      	b.n	21d76 <register_events+0x76>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   21e12:	6923      	ldr	r3, [r4, #16]
   21e14:	b963      	cbnz	r3, 21e30 <register_events+0x130>
   21e16:	492f      	ldr	r1, [pc, #188]	; (21ed4 <register_events+0x1d4>)
   21e18:	2375      	movs	r3, #117	; 0x75
   21e1a:	4a2b      	ldr	r2, [pc, #172]	; (21ec8 <register_events+0x1c8>)
   21e1c:	4826      	ldr	r0, [pc, #152]	; (21eb8 <register_events+0x1b8>)
   21e1e:	f000 ff86 	bl	22d2e <printk>
   21e22:	482d      	ldr	r0, [pc, #180]	; (21ed8 <register_events+0x1d8>)
   21e24:	f000 ff83 	bl	22d2e <printk>
   21e28:	2175      	movs	r1, #117	; 0x75
   21e2a:	4827      	ldr	r0, [pc, #156]	; (21ec8 <register_events+0x1c8>)
   21e2c:	f000 ff8c 	bl	22d48 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   21e30:	462a      	mov	r2, r5
   21e32:	4621      	mov	r1, r4
   21e34:	6920      	ldr	r0, [r4, #16]
   21e36:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   21e38:	f002 f873 	bl	23f22 <add_event>
	event->poller = poller;
   21e3c:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   21e3e:	f108 0801 	add.w	r8, r8, #1
   21e42:	e7a2      	b.n	21d8a <register_events+0x8a>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   21e44:	6923      	ldr	r3, [r4, #16]
   21e46:	b963      	cbnz	r3, 21e62 <register_events+0x162>
   21e48:	4924      	ldr	r1, [pc, #144]	; (21edc <register_events+0x1dc>)
   21e4a:	2379      	movs	r3, #121	; 0x79
   21e4c:	4a1e      	ldr	r2, [pc, #120]	; (21ec8 <register_events+0x1c8>)
   21e4e:	481a      	ldr	r0, [pc, #104]	; (21eb8 <register_events+0x1b8>)
   21e50:	f000 ff6d 	bl	22d2e <printk>
   21e54:	4822      	ldr	r0, [pc, #136]	; (21ee0 <register_events+0x1e0>)
   21e56:	f000 ff6a 	bl	22d2e <printk>
   21e5a:	2179      	movs	r1, #121	; 0x79
   21e5c:	481a      	ldr	r0, [pc, #104]	; (21ec8 <register_events+0x1c8>)
   21e5e:	f000 ff73 	bl	22d48 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   21e62:	6920      	ldr	r0, [r4, #16]
   21e64:	462a      	mov	r2, r5
   21e66:	4621      	mov	r1, r4
   21e68:	300c      	adds	r0, #12
   21e6a:	e7e5      	b.n	21e38 <register_events+0x138>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   21e6c:	6923      	ldr	r3, [r4, #16]
   21e6e:	b963      	cbnz	r3, 21e8a <register_events+0x18a>
   21e70:	491c      	ldr	r1, [pc, #112]	; (21ee4 <register_events+0x1e4>)
   21e72:	237d      	movs	r3, #125	; 0x7d
   21e74:	4a14      	ldr	r2, [pc, #80]	; (21ec8 <register_events+0x1c8>)
   21e76:	4810      	ldr	r0, [pc, #64]	; (21eb8 <register_events+0x1b8>)
   21e78:	f000 ff59 	bl	22d2e <printk>
   21e7c:	481a      	ldr	r0, [pc, #104]	; (21ee8 <register_events+0x1e8>)
   21e7e:	f000 ff56 	bl	22d2e <printk>
   21e82:	217d      	movs	r1, #125	; 0x7d
   21e84:	4810      	ldr	r0, [pc, #64]	; (21ec8 <register_events+0x1c8>)
   21e86:	f000 ff5f 	bl	22d48 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   21e8a:	462a      	mov	r2, r5
   21e8c:	4621      	mov	r1, r4
   21e8e:	6920      	ldr	r0, [r4, #16]
   21e90:	e7d2      	b.n	21e38 <register_events+0x138>
		__ASSERT(false, "invalid event type\n");
   21e92:	2384      	movs	r3, #132	; 0x84
   21e94:	4a0c      	ldr	r2, [pc, #48]	; (21ec8 <register_events+0x1c8>)
   21e96:	490d      	ldr	r1, [pc, #52]	; (21ecc <register_events+0x1cc>)
   21e98:	4807      	ldr	r0, [pc, #28]	; (21eb8 <register_events+0x1b8>)
   21e9a:	f000 ff48 	bl	22d2e <printk>
   21e9e:	4813      	ldr	r0, [pc, #76]	; (21eec <register_events+0x1ec>)
   21ea0:	f000 ff45 	bl	22d2e <printk>
   21ea4:	2184      	movs	r1, #132	; 0x84
   21ea6:	4808      	ldr	r0, [pc, #32]	; (21ec8 <register_events+0x1c8>)
   21ea8:	f000 ff4e 	bl	22d48 <assert_post_action>
		break;
   21eac:	e7c6      	b.n	21e3c <register_events+0x13c>
   21eae:	bf00      	nop
   21eb0:	0002574f 	.word	0x0002574f
   21eb4:	0002576e 	.word	0x0002576e
   21eb8:	000255f3 	.word	0x000255f3
   21ebc:	00025783 	.word	0x00025783
   21ec0:	00025798 	.word	0x00025798
   21ec4:	000257af 	.word	0x000257af
   21ec8:	00026537 	.word	0x00026537
   21ecc:	000261cb 	.word	0x000261cb
   21ed0:	00026586 	.word	0x00026586
   21ed4:	000263ea 	.word	0x000263ea
   21ed8:	00026404 	.word	0x00026404
   21edc:	00026419 	.word	0x00026419
   21ee0:	00026435 	.word	0x00026435
   21ee4:	00026446 	.word	0x00026446
   21ee8:	00026463 	.word	0x00026463
   21eec:	0002647a 	.word	0x0002647a
   21ef0:	20025bcc 	.word	0x20025bcc

00021ef4 <k_poll_event_init>:
{
   21ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21ef6:	4604      	mov	r4, r0
   21ef8:	460f      	mov	r7, r1
   21efa:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   21efc:	4616      	mov	r6, r2
   21efe:	b162      	cbz	r2, 21f1a <k_poll_event_init+0x26>
   21f00:	491c      	ldr	r1, [pc, #112]	; (21f74 <k_poll_event_init+0x80>)
   21f02:	232a      	movs	r3, #42	; 0x2a
   21f04:	4a1c      	ldr	r2, [pc, #112]	; (21f78 <k_poll_event_init+0x84>)
   21f06:	481d      	ldr	r0, [pc, #116]	; (21f7c <k_poll_event_init+0x88>)
   21f08:	f000 ff11 	bl	22d2e <printk>
   21f0c:	481c      	ldr	r0, [pc, #112]	; (21f80 <k_poll_event_init+0x8c>)
   21f0e:	f000 ff0e 	bl	22d2e <printk>
   21f12:	212a      	movs	r1, #42	; 0x2a
   21f14:	4818      	ldr	r0, [pc, #96]	; (21f78 <k_poll_event_init+0x84>)
   21f16:	f000 ff17 	bl	22d48 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   21f1a:	2f0f      	cmp	r7, #15
   21f1c:	d90c      	bls.n	21f38 <k_poll_event_init+0x44>
   21f1e:	4919      	ldr	r1, [pc, #100]	; (21f84 <k_poll_event_init+0x90>)
   21f20:	232b      	movs	r3, #43	; 0x2b
   21f22:	4a15      	ldr	r2, [pc, #84]	; (21f78 <k_poll_event_init+0x84>)
   21f24:	4815      	ldr	r0, [pc, #84]	; (21f7c <k_poll_event_init+0x88>)
   21f26:	f000 ff02 	bl	22d2e <printk>
   21f2a:	4817      	ldr	r0, [pc, #92]	; (21f88 <k_poll_event_init+0x94>)
   21f2c:	f000 feff 	bl	22d2e <printk>
   21f30:	212b      	movs	r1, #43	; 0x2b
   21f32:	4811      	ldr	r0, [pc, #68]	; (21f78 <k_poll_event_init+0x84>)
   21f34:	f000 ff08 	bl	22d48 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   21f38:	b965      	cbnz	r5, 21f54 <k_poll_event_init+0x60>
   21f3a:	4914      	ldr	r1, [pc, #80]	; (21f8c <k_poll_event_init+0x98>)
   21f3c:	232c      	movs	r3, #44	; 0x2c
   21f3e:	4a0e      	ldr	r2, [pc, #56]	; (21f78 <k_poll_event_init+0x84>)
   21f40:	480e      	ldr	r0, [pc, #56]	; (21f7c <k_poll_event_init+0x88>)
   21f42:	f000 fef4 	bl	22d2e <printk>
   21f46:	4812      	ldr	r0, [pc, #72]	; (21f90 <k_poll_event_init+0x9c>)
   21f48:	f000 fef1 	bl	22d2e <printk>
   21f4c:	212c      	movs	r1, #44	; 0x2c
   21f4e:	480a      	ldr	r0, [pc, #40]	; (21f78 <k_poll_event_init+0x84>)
   21f50:	f000 fefa 	bl	22d48 <assert_post_action>
	event->type = type;
   21f54:	7b63      	ldrb	r3, [r4, #13]
   21f56:	f367 0303 	bfi	r3, r7, #0, #4
   21f5a:	7363      	strb	r3, [r4, #13]
	event->mode = mode;
   21f5c:	7ba3      	ldrb	r3, [r4, #14]
   21f5e:	f366 0341 	bfi	r3, r6, #1, #1
   21f62:	73a3      	strb	r3, [r4, #14]
	event->poller = NULL;
   21f64:	2300      	movs	r3, #0
	event->state = K_POLL_STATE_NOT_READY;
   21f66:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   21f68:	60a3      	str	r3, [r4, #8]
	event->state = K_POLL_STATE_NOT_READY;
   21f6a:	4b0a      	ldr	r3, [pc, #40]	; (21f94 <k_poll_event_init+0xa0>)
   21f6c:	4013      	ands	r3, r2
	event->obj = obj;
   21f6e:	e9c4 3503 	strd	r3, r5, [r4, #12]
}
   21f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21f74:	00026490 	.word	0x00026490
   21f78:	00026537 	.word	0x00026537
   21f7c:	000255f3 	.word	0x000255f3
   21f80:	000264b0 	.word	0x000264b0
   21f84:	000264d6 	.word	0x000264d6
   21f88:	000264fa 	.word	0x000264fa
   21f8c:	0002650a 	.word	0x0002650a
   21f90:	0002651d 	.word	0x0002651d
   21f94:	00020fff 	.word	0x00020fff

00021f98 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   21f98:	2301      	movs	r3, #1
{
   21f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
   21f9c:	b087      	sub	sp, #28
	struct _poller poller = { .is_polling = true,
   21f9e:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   21fa2:	4b70      	ldr	r3, [pc, #448]	; (22164 <z_impl_k_poll+0x1cc>)
{
   21fa4:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   21fa6:	689b      	ldr	r3, [r3, #8]
{
   21fa8:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   21faa:	9304      	str	r3, [sp, #16]
   21fac:	4b6e      	ldr	r3, [pc, #440]	; (22168 <z_impl_k_poll+0x1d0>)
{
   21fae:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   21fb0:	9305      	str	r3, [sp, #20]
   21fb2:	f3ef 8305 	mrs	r3, IPSR
   21fb6:	2b0d      	cmp	r3, #13
   21fb8:	d804      	bhi.n	21fc4 <z_impl_k_poll+0x2c>
   21fba:	b183      	cbz	r3, 21fde <z_impl_k_poll+0x46>
   21fbc:	4b6b      	ldr	r3, [pc, #428]	; (2216c <z_impl_k_poll+0x1d4>)
   21fbe:	685b      	ldr	r3, [r3, #4]
   21fc0:	051b      	lsls	r3, r3, #20
   21fc2:	d40c      	bmi.n	21fde <z_impl_k_poll+0x46>
				  .cb         = k_poll_poller_cb };

	__ASSERT(!z_arch_is_in_isr(), "");
   21fc4:	496a      	ldr	r1, [pc, #424]	; (22170 <z_impl_k_poll+0x1d8>)
   21fc6:	23ff      	movs	r3, #255	; 0xff
   21fc8:	4a6a      	ldr	r2, [pc, #424]	; (22174 <z_impl_k_poll+0x1dc>)
   21fca:	486b      	ldr	r0, [pc, #428]	; (22178 <z_impl_k_poll+0x1e0>)
   21fcc:	f000 feaf 	bl	22d2e <printk>
   21fd0:	486a      	ldr	r0, [pc, #424]	; (2217c <z_impl_k_poll+0x1e4>)
   21fd2:	f000 feac 	bl	22d2e <printk>
   21fd6:	21ff      	movs	r1, #255	; 0xff
   21fd8:	4866      	ldr	r0, [pc, #408]	; (22174 <z_impl_k_poll+0x1dc>)
   21fda:	f000 feb5 	bl	22d48 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   21fde:	b974      	cbnz	r4, 21ffe <z_impl_k_poll+0x66>
   21fe0:	4967      	ldr	r1, [pc, #412]	; (22180 <z_impl_k_poll+0x1e8>)
   21fe2:	f44f 7380 	mov.w	r3, #256	; 0x100
   21fe6:	4a63      	ldr	r2, [pc, #396]	; (22174 <z_impl_k_poll+0x1dc>)
   21fe8:	4863      	ldr	r0, [pc, #396]	; (22178 <z_impl_k_poll+0x1e0>)
   21fea:	f000 fea0 	bl	22d2e <printk>
   21fee:	4865      	ldr	r0, [pc, #404]	; (22184 <z_impl_k_poll+0x1ec>)
   21ff0:	f000 fe9d 	bl	22d2e <printk>
   21ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
   21ff8:	485e      	ldr	r0, [pc, #376]	; (22174 <z_impl_k_poll+0x1dc>)
   21ffa:	f000 fea5 	bl	22d48 <assert_post_action>
	__ASSERT(num_events > 0, "zero events\n");
   21ffe:	2d00      	cmp	r5, #0
   22000:	dc0e      	bgt.n	22020 <z_impl_k_poll+0x88>
   22002:	4961      	ldr	r1, [pc, #388]	; (22188 <z_impl_k_poll+0x1f0>)
   22004:	f240 1301 	movw	r3, #257	; 0x101
   22008:	4a5a      	ldr	r2, [pc, #360]	; (22174 <z_impl_k_poll+0x1dc>)
   2200a:	485b      	ldr	r0, [pc, #364]	; (22178 <z_impl_k_poll+0x1e0>)
   2200c:	f000 fe8f 	bl	22d2e <printk>
   22010:	485e      	ldr	r0, [pc, #376]	; (2218c <z_impl_k_poll+0x1f4>)
   22012:	f000 fe8c 	bl	22d2e <printk>
   22016:	f240 1101 	movw	r1, #257	; 0x101
   2201a:	4856      	ldr	r0, [pc, #344]	; (22174 <z_impl_k_poll+0x1dc>)
   2201c:	f000 fe94 	bl	22d48 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   22020:	fab6 f386 	clz	r3, r6
   22024:	aa03      	add	r2, sp, #12
   22026:	095b      	lsrs	r3, r3, #5
   22028:	4629      	mov	r1, r5
   2202a:	4620      	mov	r0, r4
   2202c:	f7ff fe68 	bl	21d00 <register_events>
   22030:	4607      	mov	r7, r0
	__asm__ volatile(
   22032:	f04f 0320 	mov.w	r3, #32
   22036:	f3ef 8511 	mrs	r5, BASEPRI
   2203a:	f383 8811 	msr	BASEPRI, r3
   2203e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22042:	4853      	ldr	r0, [pc, #332]	; (22190 <z_impl_k_poll+0x1f8>)
   22044:	f7ff f92c 	bl	212a0 <z_spin_lock_valid>
   22048:	b960      	cbnz	r0, 22064 <z_impl_k_poll+0xcc>
   2204a:	4952      	ldr	r1, [pc, #328]	; (22194 <z_impl_k_poll+0x1fc>)
   2204c:	235f      	movs	r3, #95	; 0x5f
   2204e:	4a52      	ldr	r2, [pc, #328]	; (22198 <z_impl_k_poll+0x200>)
   22050:	4849      	ldr	r0, [pc, #292]	; (22178 <z_impl_k_poll+0x1e0>)
   22052:	f000 fe6c 	bl	22d2e <printk>
   22056:	4851      	ldr	r0, [pc, #324]	; (2219c <z_impl_k_poll+0x204>)
   22058:	f000 fe69 	bl	22d2e <printk>
   2205c:	215f      	movs	r1, #95	; 0x5f
   2205e:	484e      	ldr	r0, [pc, #312]	; (22198 <z_impl_k_poll+0x200>)
   22060:	f000 fe72 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   22064:	484a      	ldr	r0, [pc, #296]	; (22190 <z_impl_k_poll+0x1f8>)
   22066:	f7ff f939 	bl	212dc <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   2206a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2206e:	b9eb      	cbnz	r3, 220ac <z_impl_k_poll+0x114>
		clear_event_registrations(events, events_registered, key);
   22070:	4620      	mov	r0, r4
   22072:	462a      	mov	r2, r5
   22074:	4639      	mov	r1, r7
   22076:	f7ff fd8d 	bl	21b94 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2207a:	4845      	ldr	r0, [pc, #276]	; (22190 <z_impl_k_poll+0x1f8>)
   2207c:	f7ff f91e 	bl	212bc <z_spin_unlock_valid>
   22080:	b960      	cbnz	r0, 2209c <z_impl_k_poll+0x104>
   22082:	4947      	ldr	r1, [pc, #284]	; (221a0 <z_impl_k_poll+0x208>)
   22084:	2372      	movs	r3, #114	; 0x72
   22086:	4a44      	ldr	r2, [pc, #272]	; (22198 <z_impl_k_poll+0x200>)
   22088:	483b      	ldr	r0, [pc, #236]	; (22178 <z_impl_k_poll+0x1e0>)
   2208a:	f000 fe50 	bl	22d2e <printk>
   2208e:	4845      	ldr	r0, [pc, #276]	; (221a4 <z_impl_k_poll+0x20c>)
   22090:	f000 fe4d 	bl	22d2e <printk>
   22094:	2172      	movs	r1, #114	; 0x72
   22096:	4840      	ldr	r0, [pc, #256]	; (22198 <z_impl_k_poll+0x200>)
   22098:	f000 fe56 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   2209c:	f385 8811 	msr	BASEPRI, r5
   220a0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   220a4:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   220a6:	4628      	mov	r0, r5
   220a8:	b007      	add	sp, #28
   220aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	poller.is_polling = false;
   220ac:	2300      	movs	r3, #0
   220ae:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   220b2:	b9be      	cbnz	r6, 220e4 <z_impl_k_poll+0x14c>
   220b4:	4836      	ldr	r0, [pc, #216]	; (22190 <z_impl_k_poll+0x1f8>)
   220b6:	f7ff f901 	bl	212bc <z_spin_unlock_valid>
   220ba:	b960      	cbnz	r0, 220d6 <z_impl_k_poll+0x13e>
   220bc:	4938      	ldr	r1, [pc, #224]	; (221a0 <z_impl_k_poll+0x208>)
   220be:	2372      	movs	r3, #114	; 0x72
   220c0:	4a35      	ldr	r2, [pc, #212]	; (22198 <z_impl_k_poll+0x200>)
   220c2:	482d      	ldr	r0, [pc, #180]	; (22178 <z_impl_k_poll+0x1e0>)
   220c4:	f000 fe33 	bl	22d2e <printk>
   220c8:	4836      	ldr	r0, [pc, #216]	; (221a4 <z_impl_k_poll+0x20c>)
   220ca:	f000 fe30 	bl	22d2e <printk>
   220ce:	2172      	movs	r1, #114	; 0x72
   220d0:	4831      	ldr	r0, [pc, #196]	; (22198 <z_impl_k_poll+0x200>)
   220d2:	f000 fe39 	bl	22d48 <assert_post_action>
   220d6:	f385 8811 	msr	BASEPRI, r5
   220da:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   220de:	f06f 050a 	mvn.w	r5, #10
   220e2:	e7e0      	b.n	220a6 <z_impl_k_poll+0x10e>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   220e4:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   220e6:	4629      	mov	r1, r5
   220e8:	4633      	mov	r3, r6
   220ea:	4829      	ldr	r0, [pc, #164]	; (22190 <z_impl_k_poll+0x1f8>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   220ec:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   220f0:	f7fe fcea 	bl	20ac8 <z_pend_curr>
   220f4:	4605      	mov	r5, r0
	__asm__ volatile(
   220f6:	f04f 0320 	mov.w	r3, #32
   220fa:	f3ef 8611 	mrs	r6, BASEPRI
   220fe:	f383 8811 	msr	BASEPRI, r3
   22102:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22106:	4822      	ldr	r0, [pc, #136]	; (22190 <z_impl_k_poll+0x1f8>)
   22108:	f7ff f8ca 	bl	212a0 <z_spin_lock_valid>
   2210c:	b960      	cbnz	r0, 22128 <z_impl_k_poll+0x190>
   2210e:	4921      	ldr	r1, [pc, #132]	; (22194 <z_impl_k_poll+0x1fc>)
   22110:	235f      	movs	r3, #95	; 0x5f
   22112:	4a21      	ldr	r2, [pc, #132]	; (22198 <z_impl_k_poll+0x200>)
   22114:	4818      	ldr	r0, [pc, #96]	; (22178 <z_impl_k_poll+0x1e0>)
   22116:	f000 fe0a 	bl	22d2e <printk>
   2211a:	4820      	ldr	r0, [pc, #128]	; (2219c <z_impl_k_poll+0x204>)
   2211c:	f000 fe07 	bl	22d2e <printk>
   22120:	215f      	movs	r1, #95	; 0x5f
   22122:	481d      	ldr	r0, [pc, #116]	; (22198 <z_impl_k_poll+0x200>)
   22124:	f000 fe10 	bl	22d48 <assert_post_action>
	z_spin_lock_set_owner(l);
   22128:	4819      	ldr	r0, [pc, #100]	; (22190 <z_impl_k_poll+0x1f8>)
   2212a:	f7ff f8d7 	bl	212dc <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   2212e:	4620      	mov	r0, r4
   22130:	4632      	mov	r2, r6
   22132:	4639      	mov	r1, r7
   22134:	f7ff fd2e 	bl	21b94 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   22138:	4815      	ldr	r0, [pc, #84]	; (22190 <z_impl_k_poll+0x1f8>)
   2213a:	f7ff f8bf 	bl	212bc <z_spin_unlock_valid>
   2213e:	b960      	cbnz	r0, 2215a <z_impl_k_poll+0x1c2>
   22140:	4917      	ldr	r1, [pc, #92]	; (221a0 <z_impl_k_poll+0x208>)
   22142:	2372      	movs	r3, #114	; 0x72
   22144:	4a14      	ldr	r2, [pc, #80]	; (22198 <z_impl_k_poll+0x200>)
   22146:	480c      	ldr	r0, [pc, #48]	; (22178 <z_impl_k_poll+0x1e0>)
   22148:	f000 fdf1 	bl	22d2e <printk>
   2214c:	4815      	ldr	r0, [pc, #84]	; (221a4 <z_impl_k_poll+0x20c>)
   2214e:	f000 fdee 	bl	22d2e <printk>
   22152:	2172      	movs	r1, #114	; 0x72
   22154:	4810      	ldr	r0, [pc, #64]	; (22198 <z_impl_k_poll+0x200>)
   22156:	f000 fdf7 	bl	22d48 <assert_post_action>
	__asm__ volatile(
   2215a:	f386 8811 	msr	BASEPRI, r6
   2215e:	f3bf 8f6f 	isb	sy
	return swap_rc;
   22162:	e7a0      	b.n	220a6 <z_impl_k_poll+0x10e>
   22164:	20025ab4 	.word	0x20025ab4
   22168:	00021b25 	.word	0x00021b25
   2216c:	e000ed00 	.word	0xe000ed00
   22170:	00026169 	.word	0x00026169
   22174:	00026537 	.word	0x00026537
   22178:	000255f3 	.word	0x000255f3
   2217c:	00026086 	.word	0x00026086
   22180:	000265a3 	.word	0x000265a3
   22184:	000265b9 	.word	0x000265b9
   22188:	000265c8 	.word	0x000265c8
   2218c:	000265d7 	.word	0x000265d7
   22190:	20025bcc 	.word	0x20025bcc
   22194:	0002576e 	.word	0x0002576e
   22198:	0002574f 	.word	0x0002574f
   2219c:	00025783 	.word	0x00025783
   221a0:	00025798 	.word	0x00025798
   221a4:	000257af 	.word	0x000257af

000221a8 <ocrypto_ecdsa_p256_public_key>:
   221a8:	b530      	push	{r4, r5, lr}
   221aa:	b099      	sub	sp, #100	; 0x64
   221ac:	4605      	mov	r5, r0
   221ae:	4668      	mov	r0, sp
   221b0:	f000 f8f2 	bl	22398 <ocrypto_sc_p256_from32bytes>
   221b4:	4669      	mov	r1, sp
   221b6:	a808      	add	r0, sp, #32
   221b8:	f000 fae6 	bl	22788 <ocrypto_curve_p256_scalarmult_base>
   221bc:	4604      	mov	r4, r0
   221be:	a908      	add	r1, sp, #32
   221c0:	4628      	mov	r0, r5
   221c2:	f000 fa21 	bl	22608 <ocrypto_curve_p256_to64bytes>
   221c6:	4620      	mov	r0, r4
   221c8:	b019      	add	sp, #100	; 0x64
   221ca:	bd30      	pop	{r4, r5, pc}

000221cc <ocrypto_mod_p256_cneg>:
   221cc:	b570      	push	{r4, r5, r6, lr}
   221ce:	b088      	sub	sp, #32
   221d0:	4604      	mov	r4, r0
   221d2:	460d      	mov	r5, r1
   221d4:	4668      	mov	r0, sp
   221d6:	2120      	movs	r1, #32
   221d8:	4616      	mov	r6, r2
   221da:	f7ea fd6a 	bl	ccb2 <ocrypto_constant_time_fill_zero>
   221de:	2300      	movs	r3, #0
   221e0:	4629      	mov	r1, r5
   221e2:	4620      	mov	r0, r4
   221e4:	2220      	movs	r2, #32
   221e6:	9300      	str	r3, [sp, #0]
   221e8:	f7ea fd5c 	bl	cca4 <ocrypto_constant_time_copy>
   221ec:	462a      	mov	r2, r5
   221ee:	4669      	mov	r1, sp
   221f0:	4668      	mov	r0, sp
   221f2:	f7ea fda4 	bl	cd3e <ocrypto_mod_p256_sub>
   221f6:	4632      	mov	r2, r6
   221f8:	4669      	mov	r1, sp
   221fa:	4620      	mov	r0, r4
   221fc:	f7ea faaf 	bl	c75e <ocrypto_bigint_cswap256>
   22200:	b008      	add	sp, #32
   22202:	bd70      	pop	{r4, r5, r6, pc}

00022204 <ocrypto_mod_p256_toBytes>:
   22204:	69cb      	ldr	r3, [r1, #28]
   22206:	ba1b      	rev	r3, r3
   22208:	6003      	str	r3, [r0, #0]
   2220a:	698b      	ldr	r3, [r1, #24]
   2220c:	ba1b      	rev	r3, r3
   2220e:	6043      	str	r3, [r0, #4]
   22210:	694b      	ldr	r3, [r1, #20]
   22212:	ba1b      	rev	r3, r3
   22214:	6083      	str	r3, [r0, #8]
   22216:	690b      	ldr	r3, [r1, #16]
   22218:	ba1b      	rev	r3, r3
   2221a:	60c3      	str	r3, [r0, #12]
   2221c:	68cb      	ldr	r3, [r1, #12]
   2221e:	ba1b      	rev	r3, r3
   22220:	6103      	str	r3, [r0, #16]
   22222:	688b      	ldr	r3, [r1, #8]
   22224:	ba1b      	rev	r3, r3
   22226:	6143      	str	r3, [r0, #20]
   22228:	684b      	ldr	r3, [r1, #4]
   2222a:	ba1b      	rev	r3, r3
   2222c:	6183      	str	r3, [r0, #24]
   2222e:	680b      	ldr	r3, [r1, #0]
   22230:	ba1b      	rev	r3, r3
   22232:	61c3      	str	r3, [r0, #28]
   22234:	4770      	bx	lr
   22236:	bf00      	nop

00022238 <ocrypto_mod_p256_invert>:
   22238:	b570      	push	{r4, r5, r6, lr}
   2223a:	460d      	mov	r5, r1
   2223c:	2405      	movs	r4, #5
   2223e:	b098      	sub	sp, #96	; 0x60
   22240:	4606      	mov	r6, r0
   22242:	a810      	add	r0, sp, #64	; 0x40
   22244:	f7ea fda8 	bl	cd98 <ocrypto_mod_p256_square>
   22248:	462a      	mov	r2, r5
   2224a:	a910      	add	r1, sp, #64	; 0x40
   2224c:	4668      	mov	r0, sp
   2224e:	f7ea fda4 	bl	cd9a <ocrypto_mod_p256_mul>
   22252:	4669      	mov	r1, sp
   22254:	a810      	add	r0, sp, #64	; 0x40
   22256:	f7ea fd9f 	bl	cd98 <ocrypto_mod_p256_square>
   2225a:	a910      	add	r1, sp, #64	; 0x40
   2225c:	4608      	mov	r0, r1
   2225e:	f7ea fd9b 	bl	cd98 <ocrypto_mod_p256_square>
   22262:	466a      	mov	r2, sp
   22264:	a910      	add	r1, sp, #64	; 0x40
   22266:	a808      	add	r0, sp, #32
   22268:	f7ea fd97 	bl	cd9a <ocrypto_mod_p256_mul>
   2226c:	a908      	add	r1, sp, #32
   2226e:	a810      	add	r0, sp, #64	; 0x40
   22270:	f7ea fd92 	bl	cd98 <ocrypto_mod_p256_square>
   22274:	a910      	add	r1, sp, #64	; 0x40
   22276:	4608      	mov	r0, r1
   22278:	f7ea fd8e 	bl	cd98 <ocrypto_mod_p256_square>
   2227c:	a910      	add	r1, sp, #64	; 0x40
   2227e:	4608      	mov	r0, r1
   22280:	f7ea fd8a 	bl	cd98 <ocrypto_mod_p256_square>
   22284:	a910      	add	r1, sp, #64	; 0x40
   22286:	4608      	mov	r0, r1
   22288:	f7ea fd86 	bl	cd98 <ocrypto_mod_p256_square>
   2228c:	a910      	add	r1, sp, #64	; 0x40
   2228e:	aa08      	add	r2, sp, #32
   22290:	4608      	mov	r0, r1
   22292:	f7ea fd82 	bl	cd9a <ocrypto_mod_p256_mul>
   22296:	a910      	add	r1, sp, #64	; 0x40
   22298:	4608      	mov	r0, r1
   2229a:	f7ea fd7d 	bl	cd98 <ocrypto_mod_p256_square>
   2229e:	a910      	add	r1, sp, #64	; 0x40
   222a0:	4608      	mov	r0, r1
   222a2:	f7ea fd79 	bl	cd98 <ocrypto_mod_p256_square>
   222a6:	a910      	add	r1, sp, #64	; 0x40
   222a8:	466a      	mov	r2, sp
   222aa:	a808      	add	r0, sp, #32
   222ac:	f7ea fd75 	bl	cd9a <ocrypto_mod_p256_mul>
   222b0:	a908      	add	r1, sp, #32
   222b2:	a810      	add	r0, sp, #64	; 0x40
   222b4:	f7ea fd70 	bl	cd98 <ocrypto_mod_p256_square>
   222b8:	a910      	add	r1, sp, #64	; 0x40
   222ba:	4608      	mov	r0, r1
   222bc:	f7ea fd6c 	bl	cd98 <ocrypto_mod_p256_square>
   222c0:	3c01      	subs	r4, #1
   222c2:	a910      	add	r1, sp, #64	; 0x40
   222c4:	d1f5      	bne.n	222b2 <ocrypto_mod_p256_invert+0x7a>
   222c6:	aa08      	add	r2, sp, #32
   222c8:	4608      	mov	r0, r1
   222ca:	f7ea fd66 	bl	cd9a <ocrypto_mod_p256_mul>
   222ce:	2405      	movs	r4, #5
   222d0:	a910      	add	r1, sp, #64	; 0x40
   222d2:	4608      	mov	r0, r1
   222d4:	f7ea fd60 	bl	cd98 <ocrypto_mod_p256_square>
   222d8:	a910      	add	r1, sp, #64	; 0x40
   222da:	4608      	mov	r0, r1
   222dc:	f7ea fd5c 	bl	cd98 <ocrypto_mod_p256_square>
   222e0:	3c01      	subs	r4, #1
   222e2:	d1f5      	bne.n	222d0 <ocrypto_mod_p256_invert+0x98>
   222e4:	a910      	add	r1, sp, #64	; 0x40
   222e6:	aa08      	add	r2, sp, #32
   222e8:	4608      	mov	r0, r1
   222ea:	f7ea fd56 	bl	cd9a <ocrypto_mod_p256_mul>
   222ee:	a910      	add	r1, sp, #64	; 0x40
   222f0:	a808      	add	r0, sp, #32
   222f2:	f7ea fd51 	bl	cd98 <ocrypto_mod_p256_square>
   222f6:	a908      	add	r1, sp, #32
   222f8:	4608      	mov	r0, r1
   222fa:	f7ea fd4d 	bl	cd98 <ocrypto_mod_p256_square>
   222fe:	a908      	add	r1, sp, #32
   22300:	466a      	mov	r2, sp
   22302:	4668      	mov	r0, sp
   22304:	f7ea fd49 	bl	cd9a <ocrypto_mod_p256_mul>
   22308:	2410      	movs	r4, #16
   2230a:	4669      	mov	r1, sp
   2230c:	a810      	add	r0, sp, #64	; 0x40
   2230e:	f7ea fd43 	bl	cd98 <ocrypto_mod_p256_square>
   22312:	a910      	add	r1, sp, #64	; 0x40
   22314:	4608      	mov	r0, r1
   22316:	f7ea fd3f 	bl	cd98 <ocrypto_mod_p256_square>
   2231a:	3c01      	subs	r4, #1
   2231c:	a910      	add	r1, sp, #64	; 0x40
   2231e:	d1f5      	bne.n	2230c <ocrypto_mod_p256_invert+0xd4>
   22320:	462a      	mov	r2, r5
   22322:	4608      	mov	r0, r1
   22324:	f7ea fd39 	bl	cd9a <ocrypto_mod_p256_mul>
   22328:	2440      	movs	r4, #64	; 0x40
   2232a:	a910      	add	r1, sp, #64	; 0x40
   2232c:	4608      	mov	r0, r1
   2232e:	f7ea fd33 	bl	cd98 <ocrypto_mod_p256_square>
   22332:	a910      	add	r1, sp, #64	; 0x40
   22334:	4608      	mov	r0, r1
   22336:	f7ea fd2f 	bl	cd98 <ocrypto_mod_p256_square>
   2233a:	3c01      	subs	r4, #1
   2233c:	d1f5      	bne.n	2232a <ocrypto_mod_p256_invert+0xf2>
   2233e:	a910      	add	r1, sp, #64	; 0x40
   22340:	466a      	mov	r2, sp
   22342:	4608      	mov	r0, r1
   22344:	f7ea fd29 	bl	cd9a <ocrypto_mod_p256_mul>
   22348:	2410      	movs	r4, #16
   2234a:	a910      	add	r1, sp, #64	; 0x40
   2234c:	4608      	mov	r0, r1
   2234e:	f7ea fd23 	bl	cd98 <ocrypto_mod_p256_square>
   22352:	a910      	add	r1, sp, #64	; 0x40
   22354:	4608      	mov	r0, r1
   22356:	f7ea fd1f 	bl	cd98 <ocrypto_mod_p256_square>
   2235a:	3c01      	subs	r4, #1
   2235c:	d1f5      	bne.n	2234a <ocrypto_mod_p256_invert+0x112>
   2235e:	a910      	add	r1, sp, #64	; 0x40
   22360:	466a      	mov	r2, sp
   22362:	4608      	mov	r0, r1
   22364:	f7ea fd19 	bl	cd9a <ocrypto_mod_p256_mul>
   22368:	2410      	movs	r4, #16
   2236a:	a910      	add	r1, sp, #64	; 0x40
   2236c:	4608      	mov	r0, r1
   2236e:	f7ea fd13 	bl	cd98 <ocrypto_mod_p256_square>
   22372:	a910      	add	r1, sp, #64	; 0x40
   22374:	4608      	mov	r0, r1
   22376:	f7ea fd0f 	bl	cd98 <ocrypto_mod_p256_square>
   2237a:	3c01      	subs	r4, #1
   2237c:	d1f5      	bne.n	2236a <ocrypto_mod_p256_invert+0x132>
   2237e:	a910      	add	r1, sp, #64	; 0x40
   22380:	aa08      	add	r2, sp, #32
   22382:	4608      	mov	r0, r1
   22384:	f7ea fd09 	bl	cd9a <ocrypto_mod_p256_mul>
   22388:	462a      	mov	r2, r5
   2238a:	a910      	add	r1, sp, #64	; 0x40
   2238c:	4630      	mov	r0, r6
   2238e:	f7ea fd04 	bl	cd9a <ocrypto_mod_p256_mul>
   22392:	b018      	add	sp, #96	; 0x60
   22394:	bd70      	pop	{r4, r5, r6, pc}
   22396:	bf00      	nop

00022398 <ocrypto_sc_p256_from32bytes>:
   22398:	b538      	push	{r3, r4, r5, lr}
   2239a:	460b      	mov	r3, r1
   2239c:	680a      	ldr	r2, [r1, #0]
   2239e:	4d12      	ldr	r5, [pc, #72]	; (223e8 <ocrypto_sc_p256_from32bytes+0x50>)
   223a0:	ba12      	rev	r2, r2
   223a2:	61c2      	str	r2, [r0, #28]
   223a4:	684a      	ldr	r2, [r1, #4]
   223a6:	4601      	mov	r1, r0
   223a8:	ba12      	rev	r2, r2
   223aa:	6182      	str	r2, [r0, #24]
   223ac:	689a      	ldr	r2, [r3, #8]
   223ae:	4604      	mov	r4, r0
   223b0:	ba12      	rev	r2, r2
   223b2:	6142      	str	r2, [r0, #20]
   223b4:	68da      	ldr	r2, [r3, #12]
   223b6:	ba12      	rev	r2, r2
   223b8:	6102      	str	r2, [r0, #16]
   223ba:	691a      	ldr	r2, [r3, #16]
   223bc:	ba12      	rev	r2, r2
   223be:	60c2      	str	r2, [r0, #12]
   223c0:	695a      	ldr	r2, [r3, #20]
   223c2:	ba12      	rev	r2, r2
   223c4:	6082      	str	r2, [r0, #8]
   223c6:	699a      	ldr	r2, [r3, #24]
   223c8:	ba12      	rev	r2, r2
   223ca:	6042      	str	r2, [r0, #4]
   223cc:	69db      	ldr	r3, [r3, #28]
   223ce:	462a      	mov	r2, r5
   223d0:	ba1b      	rev	r3, r3
   223d2:	6003      	str	r3, [r0, #0]
   223d4:	f7ea f938 	bl	c648 <ocrypto_bigint_sub256>
   223d8:	4629      	mov	r1, r5
   223da:	4602      	mov	r2, r0
   223dc:	4620      	mov	r0, r4
   223de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   223e2:	f7ea b951 	b.w	c688 <ocrypto_bigint_cadd256>
   223e6:	bf00      	nop
   223e8:	0002549c 	.word	0x0002549c

000223ec <p256_zdblu>:
   223ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   223f0:	4607      	mov	r7, r0
   223f2:	460d      	mov	r5, r1
   223f4:	4690      	mov	r8, r2
   223f6:	b088      	sub	sp, #32
   223f8:	f102 0120 	add.w	r1, r2, #32
   223fc:	4668      	mov	r0, sp
   223fe:	f107 0620 	add.w	r6, r7, #32
   22402:	f7ea fcc9 	bl	cd98 <ocrypto_mod_p256_square>
   22406:	466a      	mov	r2, sp
   22408:	4669      	mov	r1, sp
   2240a:	4668      	mov	r0, sp
   2240c:	f7ea fc58 	bl	ccc0 <ocrypto_mod_p256_add>
   22410:	4630      	mov	r0, r6
   22412:	4669      	mov	r1, sp
   22414:	f7ea fcc0 	bl	cd98 <ocrypto_mod_p256_square>
   22418:	4632      	mov	r2, r6
   2241a:	4631      	mov	r1, r6
   2241c:	4630      	mov	r0, r6
   2241e:	f105 0420 	add.w	r4, r5, #32
   22422:	f7ea fc4d 	bl	ccc0 <ocrypto_mod_p256_add>
   22426:	466a      	mov	r2, sp
   22428:	4669      	mov	r1, sp
   2242a:	4668      	mov	r0, sp
   2242c:	f7ea fc48 	bl	ccc0 <ocrypto_mod_p256_add>
   22430:	4620      	mov	r0, r4
   22432:	4641      	mov	r1, r8
   22434:	f7ea fcb0 	bl	cd98 <ocrypto_mod_p256_square>
   22438:	466a      	mov	r2, sp
   2243a:	4641      	mov	r1, r8
   2243c:	4638      	mov	r0, r7
   2243e:	f7ea fcac 	bl	cd9a <ocrypto_mod_p256_mul>
   22442:	4622      	mov	r2, r4
   22444:	4621      	mov	r1, r4
   22446:	4668      	mov	r0, sp
   22448:	f7ea fc3a 	bl	ccc0 <ocrypto_mod_p256_add>
   2244c:	4622      	mov	r2, r4
   2244e:	4669      	mov	r1, sp
   22450:	4668      	mov	r0, sp
   22452:	f7ea fc35 	bl	ccc0 <ocrypto_mod_p256_add>
   22456:	4669      	mov	r1, sp
   22458:	4668      	mov	r0, sp
   2245a:	4a11      	ldr	r2, [pc, #68]	; (224a0 <p256_zdblu+0xb4>)
   2245c:	f7ea fc30 	bl	ccc0 <ocrypto_mod_p256_add>
   22460:	4669      	mov	r1, sp
   22462:	4628      	mov	r0, r5
   22464:	f7ea fc98 	bl	cd98 <ocrypto_mod_p256_square>
   22468:	463a      	mov	r2, r7
   2246a:	4629      	mov	r1, r5
   2246c:	4628      	mov	r0, r5
   2246e:	f7ea fc66 	bl	cd3e <ocrypto_mod_p256_sub>
   22472:	463a      	mov	r2, r7
   22474:	4629      	mov	r1, r5
   22476:	4628      	mov	r0, r5
   22478:	f7ea fc61 	bl	cd3e <ocrypto_mod_p256_sub>
   2247c:	462a      	mov	r2, r5
   2247e:	4639      	mov	r1, r7
   22480:	4620      	mov	r0, r4
   22482:	f7ea fc5c 	bl	cd3e <ocrypto_mod_p256_sub>
   22486:	466a      	mov	r2, sp
   22488:	4621      	mov	r1, r4
   2248a:	4620      	mov	r0, r4
   2248c:	f7ea fc85 	bl	cd9a <ocrypto_mod_p256_mul>
   22490:	4632      	mov	r2, r6
   22492:	4621      	mov	r1, r4
   22494:	4620      	mov	r0, r4
   22496:	f7ea fc52 	bl	cd3e <ocrypto_mod_p256_sub>
   2249a:	b008      	add	sp, #32
   2249c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   224a0:	0002553c 	.word	0x0002553c

000224a4 <p256_zaddc>:
   224a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   224a6:	4604      	mov	r4, r0
   224a8:	460e      	mov	r6, r1
   224aa:	b099      	sub	sp, #100	; 0x64
   224ac:	460a      	mov	r2, r1
   224ae:	4601      	mov	r1, r0
   224b0:	4668      	mov	r0, sp
   224b2:	f7ea fc44 	bl	cd3e <ocrypto_mod_p256_sub>
   224b6:	4669      	mov	r1, sp
   224b8:	4668      	mov	r0, sp
   224ba:	f7ea fc6d 	bl	cd98 <ocrypto_mod_p256_square>
   224be:	466a      	mov	r2, sp
   224c0:	4621      	mov	r1, r4
   224c2:	a808      	add	r0, sp, #32
   224c4:	f106 0520 	add.w	r5, r6, #32
   224c8:	f104 0720 	add.w	r7, r4, #32
   224cc:	f7ea fc65 	bl	cd9a <ocrypto_mod_p256_mul>
   224d0:	466a      	mov	r2, sp
   224d2:	4631      	mov	r1, r6
   224d4:	4668      	mov	r0, sp
   224d6:	f7ea fc60 	bl	cd9a <ocrypto_mod_p256_mul>
   224da:	4639      	mov	r1, r7
   224dc:	462a      	mov	r2, r5
   224de:	a810      	add	r0, sp, #64	; 0x40
   224e0:	f7ea fbee 	bl	ccc0 <ocrypto_mod_p256_add>
   224e4:	462a      	mov	r2, r5
   224e6:	4639      	mov	r1, r7
   224e8:	4628      	mov	r0, r5
   224ea:	f7ea fc28 	bl	cd3e <ocrypto_mod_p256_sub>
   224ee:	4629      	mov	r1, r5
   224f0:	4630      	mov	r0, r6
   224f2:	f7ea fc51 	bl	cd98 <ocrypto_mod_p256_square>
   224f6:	466a      	mov	r2, sp
   224f8:	a908      	add	r1, sp, #32
   224fa:	4620      	mov	r0, r4
   224fc:	f7ea fbe0 	bl	ccc0 <ocrypto_mod_p256_add>
   22500:	4622      	mov	r2, r4
   22502:	4631      	mov	r1, r6
   22504:	4630      	mov	r0, r6
   22506:	f7ea fc1a 	bl	cd3e <ocrypto_mod_p256_sub>
   2250a:	466a      	mov	r2, sp
   2250c:	a908      	add	r1, sp, #32
   2250e:	4668      	mov	r0, sp
   22510:	f7ea fc15 	bl	cd3e <ocrypto_mod_p256_sub>
   22514:	466a      	mov	r2, sp
   22516:	4639      	mov	r1, r7
   22518:	4638      	mov	r0, r7
   2251a:	f7ea fc3e 	bl	cd9a <ocrypto_mod_p256_mul>
   2251e:	4632      	mov	r2, r6
   22520:	a908      	add	r1, sp, #32
   22522:	4668      	mov	r0, sp
   22524:	f7ea fc0b 	bl	cd3e <ocrypto_mod_p256_sub>
   22528:	466a      	mov	r2, sp
   2252a:	4629      	mov	r1, r5
   2252c:	4628      	mov	r0, r5
   2252e:	f7ea fc34 	bl	cd9a <ocrypto_mod_p256_mul>
   22532:	463a      	mov	r2, r7
   22534:	4629      	mov	r1, r5
   22536:	4628      	mov	r0, r5
   22538:	f7ea fc01 	bl	cd3e <ocrypto_mod_p256_sub>
   2253c:	a910      	add	r1, sp, #64	; 0x40
   2253e:	4668      	mov	r0, sp
   22540:	f7ea fc2a 	bl	cd98 <ocrypto_mod_p256_square>
   22544:	4622      	mov	r2, r4
   22546:	4669      	mov	r1, sp
   22548:	4620      	mov	r0, r4
   2254a:	f7ea fbf8 	bl	cd3e <ocrypto_mod_p256_sub>
   2254e:	a908      	add	r1, sp, #32
   22550:	4622      	mov	r2, r4
   22552:	4608      	mov	r0, r1
   22554:	f7ea fbf3 	bl	cd3e <ocrypto_mod_p256_sub>
   22558:	a910      	add	r1, sp, #64	; 0x40
   2255a:	aa08      	add	r2, sp, #32
   2255c:	4608      	mov	r0, r1
   2255e:	f7ea fc1c 	bl	cd9a <ocrypto_mod_p256_mul>
   22562:	463a      	mov	r2, r7
   22564:	a910      	add	r1, sp, #64	; 0x40
   22566:	4638      	mov	r0, r7
   22568:	f7ea fbe9 	bl	cd3e <ocrypto_mod_p256_sub>
   2256c:	b019      	add	sp, #100	; 0x64
   2256e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022570 <p256_zaddu>:
   22570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22574:	460c      	mov	r4, r1
   22576:	4605      	mov	r5, r0
   22578:	4690      	mov	r8, r2
   2257a:	b088      	sub	sp, #32
   2257c:	4622      	mov	r2, r4
   2257e:	4601      	mov	r1, r0
   22580:	4668      	mov	r0, sp
   22582:	f7ea fbdc 	bl	cd3e <ocrypto_mod_p256_sub>
   22586:	4669      	mov	r1, sp
   22588:	4668      	mov	r0, sp
   2258a:	f7ea fc05 	bl	cd98 <ocrypto_mod_p256_square>
   2258e:	466a      	mov	r2, sp
   22590:	4629      	mov	r1, r5
   22592:	4628      	mov	r0, r5
   22594:	f104 0620 	add.w	r6, r4, #32
   22598:	f7ea fbff 	bl	cd9a <ocrypto_mod_p256_mul>
   2259c:	f105 0720 	add.w	r7, r5, #32
   225a0:	466a      	mov	r2, sp
   225a2:	4621      	mov	r1, r4
   225a4:	4668      	mov	r0, sp
   225a6:	f7ea fbf8 	bl	cd9a <ocrypto_mod_p256_mul>
   225aa:	4632      	mov	r2, r6
   225ac:	4630      	mov	r0, r6
   225ae:	4639      	mov	r1, r7
   225b0:	f7ea fbc5 	bl	cd3e <ocrypto_mod_p256_sub>
   225b4:	4631      	mov	r1, r6
   225b6:	4620      	mov	r0, r4
   225b8:	f7ea fbee 	bl	cd98 <ocrypto_mod_p256_square>
   225bc:	462a      	mov	r2, r5
   225be:	4621      	mov	r1, r4
   225c0:	4620      	mov	r0, r4
   225c2:	f7ea fbbc 	bl	cd3e <ocrypto_mod_p256_sub>
   225c6:	466a      	mov	r2, sp
   225c8:	4621      	mov	r1, r4
   225ca:	4620      	mov	r0, r4
   225cc:	f7ea fbb7 	bl	cd3e <ocrypto_mod_p256_sub>
   225d0:	466a      	mov	r2, sp
   225d2:	4629      	mov	r1, r5
   225d4:	4640      	mov	r0, r8
   225d6:	f7ea fbb2 	bl	cd3e <ocrypto_mod_p256_sub>
   225da:	4642      	mov	r2, r8
   225dc:	4639      	mov	r1, r7
   225de:	4638      	mov	r0, r7
   225e0:	f7ea fbdb 	bl	cd9a <ocrypto_mod_p256_mul>
   225e4:	4622      	mov	r2, r4
   225e6:	4629      	mov	r1, r5
   225e8:	4668      	mov	r0, sp
   225ea:	f7ea fba8 	bl	cd3e <ocrypto_mod_p256_sub>
   225ee:	466a      	mov	r2, sp
   225f0:	4631      	mov	r1, r6
   225f2:	4630      	mov	r0, r6
   225f4:	f7ea fbd1 	bl	cd9a <ocrypto_mod_p256_mul>
   225f8:	463a      	mov	r2, r7
   225fa:	4631      	mov	r1, r6
   225fc:	4630      	mov	r0, r6
   225fe:	f7ea fb9e 	bl	cd3e <ocrypto_mod_p256_sub>
   22602:	b008      	add	sp, #32
   22604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022608 <ocrypto_curve_p256_to64bytes>:
   22608:	b538      	push	{r3, r4, r5, lr}
   2260a:	4604      	mov	r4, r0
   2260c:	460d      	mov	r5, r1
   2260e:	f7ff fdf9 	bl	22204 <ocrypto_mod_p256_toBytes>
   22612:	f105 0120 	add.w	r1, r5, #32
   22616:	f104 0020 	add.w	r0, r4, #32
   2261a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2261e:	f7ff bdf1 	b.w	22204 <ocrypto_mod_p256_toBytes>
   22622:	bf00      	nop

00022624 <ocrypto_curve_p256_scalarmult>:
   22624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22628:	b0b8      	sub	sp, #224	; 0xe0
   2262a:	468a      	mov	sl, r1
   2262c:	4681      	mov	r9, r0
   2262e:	4611      	mov	r1, r2
   22630:	a810      	add	r0, sp, #64	; 0x40
   22632:	4a51      	ldr	r2, [pc, #324]	; (22778 <ocrypto_curve_p256_scalarmult+0x154>)
   22634:	f7ea f808 	bl	c648 <ocrypto_bigint_sub256>
   22638:	4950      	ldr	r1, [pc, #320]	; (2277c <ocrypto_curve_p256_scalarmult+0x158>)
   2263a:	4602      	mov	r2, r0
   2263c:	a810      	add	r0, sp, #64	; 0x40
   2263e:	f7ea f823 	bl	c688 <ocrypto_bigint_cadd256>
   22642:	4680      	mov	r8, r0
   22644:	9f17      	ldr	r7, [sp, #92]	; 0x5c
   22646:	494c      	ldr	r1, [pc, #304]	; (22778 <ocrypto_curve_p256_scalarmult+0x154>)
   22648:	ea08 77d7 	and.w	r7, r8, r7, lsr #31
   2264c:	f1c7 0201 	rsb	r2, r7, #1
   22650:	a810      	add	r0, sp, #64	; 0x40
   22652:	f7ea f819 	bl	c688 <ocrypto_bigint_cadd256>
   22656:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   22658:	4652      	mov	r2, sl
   2265a:	43ed      	mvns	r5, r5
   2265c:	a928      	add	r1, sp, #160	; 0xa0
   2265e:	a818      	add	r0, sp, #96	; 0x60
   22660:	f7ff fec4 	bl	223ec <p256_zdblu>
   22664:	0fed      	lsrs	r5, r5, #31
   22666:	a920      	add	r1, sp, #128	; 0x80
   22668:	f1c5 0201 	rsb	r2, r5, #1
   2266c:	4608      	mov	r0, r1
   2266e:	f7ff fdad 	bl	221cc <ocrypto_mod_p256_cneg>
   22672:	26fe      	movs	r6, #254	; 0xfe
   22674:	f1c8 0801 	rsb	r8, r8, #1
   22678:	466a      	mov	r2, sp
   2267a:	a918      	add	r1, sp, #96	; 0x60
   2267c:	a828      	add	r0, sp, #160	; 0xa0
   2267e:	f7ff ff77 	bl	22570 <p256_zaddu>
   22682:	1173      	asrs	r3, r6, #5
   22684:	aa38      	add	r2, sp, #224	; 0xe0
   22686:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2268a:	f853 4ca0 	ldr.w	r4, [r3, #-160]
   2268e:	f006 031f 	and.w	r3, r6, #31
   22692:	40dc      	lsrs	r4, r3
   22694:	f004 0401 	and.w	r4, r4, #1
   22698:	4065      	eors	r5, r4
   2269a:	462a      	mov	r2, r5
   2269c:	a928      	add	r1, sp, #160	; 0xa0
   2269e:	a818      	add	r0, sp, #96	; 0x60
   226a0:	f7ea f85d 	bl	c75e <ocrypto_bigint_cswap256>
   226a4:	462a      	mov	r2, r5
   226a6:	a930      	add	r1, sp, #192	; 0xc0
   226a8:	a820      	add	r0, sp, #128	; 0x80
   226aa:	f7ea f858 	bl	c75e <ocrypto_bigint_cswap256>
   226ae:	3e01      	subs	r6, #1
   226b0:	a928      	add	r1, sp, #160	; 0xa0
   226b2:	a818      	add	r0, sp, #96	; 0x60
   226b4:	f7ff fef6 	bl	224a4 <p256_zaddc>
   226b8:	1c73      	adds	r3, r6, #1
   226ba:	4625      	mov	r5, r4
   226bc:	d1dc      	bne.n	22678 <ocrypto_curve_p256_scalarmult+0x54>
   226be:	f1c4 0201 	rsb	r2, r4, #1
   226c2:	a808      	add	r0, sp, #32
   226c4:	a920      	add	r1, sp, #128	; 0x80
   226c6:	f7ff fd81 	bl	221cc <ocrypto_mod_p256_cneg>
   226ca:	407d      	eors	r5, r7
   226cc:	466a      	mov	r2, sp
   226ce:	a918      	add	r1, sp, #96	; 0x60
   226d0:	a828      	add	r0, sp, #160	; 0xa0
   226d2:	f7ff ff4d 	bl	22570 <p256_zaddu>
   226d6:	a928      	add	r1, sp, #160	; 0xa0
   226d8:	462a      	mov	r2, r5
   226da:	a818      	add	r0, sp, #96	; 0x60
   226dc:	f7ea f83f 	bl	c75e <ocrypto_bigint_cswap256>
   226e0:	462a      	mov	r2, r5
   226e2:	a930      	add	r1, sp, #192	; 0xc0
   226e4:	a820      	add	r0, sp, #128	; 0x80
   226e6:	f7ea f83a 	bl	c75e <ocrypto_bigint_cswap256>
   226ea:	a908      	add	r1, sp, #32
   226ec:	466a      	mov	r2, sp
   226ee:	4608      	mov	r0, r1
   226f0:	f7ea fb53 	bl	cd9a <ocrypto_mod_p256_mul>
   226f4:	a908      	add	r1, sp, #32
   226f6:	4608      	mov	r0, r1
   226f8:	f7ff fd9e 	bl	22238 <ocrypto_mod_p256_invert>
   226fc:	a908      	add	r1, sp, #32
   226fe:	f109 0420 	add.w	r4, r9, #32
   22702:	f10a 0220 	add.w	r2, sl, #32
   22706:	4608      	mov	r0, r1
   22708:	f7ea fb47 	bl	cd9a <ocrypto_mod_p256_mul>
   2270c:	a920      	add	r1, sp, #128	; 0x80
   2270e:	aa08      	add	r2, sp, #32
   22710:	4620      	mov	r0, r4
   22712:	f7ea fb42 	bl	cd9a <ocrypto_mod_p256_mul>
   22716:	aa08      	add	r2, sp, #32
   22718:	a918      	add	r1, sp, #96	; 0x60
   2271a:	4668      	mov	r0, sp
   2271c:	f7ea fb3d 	bl	cd9a <ocrypto_mod_p256_mul>
   22720:	4669      	mov	r1, sp
   22722:	4668      	mov	r0, sp
   22724:	f7ea fb38 	bl	cd98 <ocrypto_mod_p256_square>
   22728:	aa18      	add	r2, sp, #96	; 0x60
   2272a:	4669      	mov	r1, sp
   2272c:	a808      	add	r0, sp, #32
   2272e:	f7ea fb34 	bl	cd9a <ocrypto_mod_p256_mul>
   22732:	4621      	mov	r1, r4
   22734:	4668      	mov	r0, sp
   22736:	f7ea fb2f 	bl	cd98 <ocrypto_mod_p256_square>
   2273a:	aa08      	add	r2, sp, #32
   2273c:	4669      	mov	r1, sp
   2273e:	4610      	mov	r0, r2
   22740:	f7ea fafd 	bl	cd3e <ocrypto_mod_p256_sub>
   22744:	a908      	add	r1, sp, #32
   22746:	4a0e      	ldr	r2, [pc, #56]	; (22780 <ocrypto_curve_p256_scalarmult+0x15c>)
   22748:	4668      	mov	r0, sp
   2274a:	f7ea faf8 	bl	cd3e <ocrypto_mod_p256_sub>
   2274e:	4620      	mov	r0, r4
   22750:	2120      	movs	r1, #32
   22752:	f7ea fa9a 	bl	cc8a <ocrypto_constant_time_is_zero>
   22756:	a908      	add	r1, sp, #32
   22758:	4243      	negs	r3, r0
   2275a:	4602      	mov	r2, r0
   2275c:	4668      	mov	r0, sp
   2275e:	ea43 0808 	orr.w	r8, r3, r8
   22762:	f7e9 fffc 	bl	c75e <ocrypto_bigint_cswap256>
   22766:	4648      	mov	r0, r9
   22768:	4669      	mov	r1, sp
   2276a:	4a06      	ldr	r2, [pc, #24]	; (22784 <ocrypto_curve_p256_scalarmult+0x160>)
   2276c:	f7ea fb15 	bl	cd9a <ocrypto_mod_p256_mul>
   22770:	4640      	mov	r0, r8
   22772:	b038      	add	sp, #224	; 0xe0
   22774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22778:	0002557c 	.word	0x0002557c
   2277c:	000254fc 	.word	0x000254fc
   22780:	0002555c 	.word	0x0002555c
   22784:	0002551c 	.word	0x0002551c

00022788 <ocrypto_curve_p256_scalarmult_base>:
   22788:	460a      	mov	r2, r1
   2278a:	4901      	ldr	r1, [pc, #4]	; (22790 <ocrypto_curve_p256_scalarmult_base+0x8>)
   2278c:	f7ff bf4a 	b.w	22624 <ocrypto_curve_p256_scalarmult>
   22790:	000254bc 	.word	0x000254bc

00022794 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   22794:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   22798:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2279c:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   2279e:	bf08      	it	eq
   227a0:	f06f 0015 	mvneq.w	r0, #21
   227a4:	4770      	bx	lr

000227a6 <get_bit_ptr>:
{
   227a6:	b570      	push	{r4, r5, r6, lr}
   227a8:	250c      	movs	r5, #12
   227aa:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   227ac:	f990 000b 	ldrsb.w	r0, [r0, #11]
   227b0:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   227b2:	4288      	cmp	r0, r1
	*word = &bitarray[bn / 32];
   227b4:	4610      	mov	r0, r2
   227b6:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   227ba:	bfb8      	it	lt
   227bc:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   227be:	2a00      	cmp	r2, #0
   227c0:	bfb8      	it	lt
   227c2:	f102 001f 	addlt.w	r0, r2, #31
   227c6:	1140      	asrs	r0, r0, #5
   227c8:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   227cc:	6019      	str	r1, [r3, #0]
}
   227ce:	f002 001f 	and.w	r0, r2, #31
   227d2:	bd70      	pop	{r4, r5, r6, pc}

000227d4 <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   227d4:	f04f 0320 	mov.w	r3, #32
   227d8:	f3ef 8011 	mrs	r0, BASEPRI
   227dc:	f383 8811 	msr	BASEPRI, r3
   227e0:	f3bf 8f6f 	isb	sy
}
   227e4:	4770      	bx	lr

000227e6 <pool_irq_unlock.isra.4>:
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   227e6:	07c3      	lsls	r3, r0, #31
   227e8:	d503      	bpl.n	227f2 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   227ea:	f381 8811 	msr	BASEPRI, r1
   227ee:	f3bf 8f6f 	isb	sy
}
   227f2:	4770      	bx	lr

000227f4 <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   227f4:	23ff      	movs	r3, #255	; 0xff
{
   227f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   227fa:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   227fc:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   227fe:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   22800:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   22802:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   22806:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   22808:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   2280a:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   2280e:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   22812:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   22814:	4598      	cmp	r8, r3
   22816:	dc05      	bgt.n	22824 <z_sys_mem_pool_base_init+0x30>
   22818:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   2281a:	4619      	mov	r1, r3
   2281c:	428f      	cmp	r7, r1
   2281e:	dc20      	bgt.n	22862 <z_sys_mem_pool_base_init+0x6e>
}
   22820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   22824:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   22828:	fb09 fe03 	mul.w	lr, r9, r3
   2282c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   22830:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   22832:	eb0a 040e 	add.w	r4, sl, lr
   22836:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   2283a:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   2283e:	d805      	bhi.n	2284c <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   22840:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   22842:	0892      	lsrs	r2, r2, #2
   22844:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   22848:	3301      	adds	r3, #1
   2284a:	e7e3      	b.n	22814 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   2284c:	f115 041f 	adds.w	r4, r5, #31
   22850:	bf48      	it	mi
   22852:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   22856:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   22858:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   2285c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   22860:	e7ef      	b.n	22842 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   22862:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   22864:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   22866:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   2286a:	18ec      	adds	r4, r5, r3
	node->next = list;
   2286c:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   22870:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   22872:	3101      	adds	r1, #1
   22874:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   22876:	6895      	ldr	r5, [r2, #8]
   22878:	4433      	add	r3, r6
   2287a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2287c:	6094      	str	r4, [r2, #8]
   2287e:	e7cd      	b.n	2281c <z_sys_mem_pool_base_init+0x28>

00022880 <z_sys_mem_pool_block_alloc>:
{
   22880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22884:	b087      	sub	sp, #28
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   22886:	7a84      	ldrb	r4, [r0, #10]
{
   22888:	af00      	add	r7, sp, #0
   2288a:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   2288e:	00a3      	lsls	r3, r4, #2
   22890:	3307      	adds	r3, #7
   22892:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   22896:	ebad 0d03 	sub.w	sp, sp, r3
   2289a:	46ea      	mov	sl, sp
	lsizes[0] = p->max_sz;
   2289c:	4653      	mov	r3, sl
   2289e:	6842      	ldr	r2, [r0, #4]
{
   228a0:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   228a2:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   228a6:	2200      	movs	r2, #0
   228a8:	4294      	cmp	r4, r2
   228aa:	f102 39ff 	add.w	r9, r2, #4294967295
   228ae:	dd09      	ble.n	228c4 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   228b0:	b122      	cbz	r2, 228bc <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   228b2:	6818      	ldr	r0, [r3, #0]
   228b4:	0880      	lsrs	r0, r0, #2
   228b6:	f020 0003 	bic.w	r0, r0, #3
   228ba:	6058      	str	r0, [r3, #4]
		if (lsizes[i] < size) {
   228bc:	f853 0f04 	ldr.w	r0, [r3, #4]!
   228c0:	4288      	cmp	r0, r1
   228c2:	d208      	bcs.n	228d6 <z_sys_mem_pool_block_alloc+0x56>
	if (alloc_l < 0) {
   228c4:	f1b9 3fff 	cmp.w	r9, #4294967295
   228c8:	d107      	bne.n	228da <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   228ca:	2300      	movs	r3, #0
   228cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   228ce:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
   228d0:	f06f 000b 	mvn.w	r0, #11
   228d4:	e02c      	b.n	22930 <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
   228d6:	3201      	adds	r2, #1
   228d8:	e7e6      	b.n	228a8 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   228da:	7c28      	ldrb	r0, [r5, #16]
   228dc:	f010 0001 	ands.w	r0, r0, #1
   228e0:	d001      	beq.n	228e6 <z_sys_mem_pool_block_alloc+0x66>
   228e2:	f7ff ff77 	bl	227d4 <pool_irq_lock.isra.2.part.3>
   228e6:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   228e8:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   228ea:	464e      	mov	r6, r9
   228ec:	68ea      	ldr	r2, [r5, #12]
   228ee:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   228f2:	461a      	mov	r2, r3
   228f4:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   228f8:	4294      	cmp	r4, r2
   228fa:	d11d      	bne.n	22938 <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
   228fc:	3e01      	subs	r6, #1
   228fe:	1c72      	adds	r2, r6, #1
   22900:	f1a3 030c 	sub.w	r3, r3, #12
   22904:	d1f5      	bne.n	228f2 <z_sys_mem_pool_block_alloc+0x72>
   22906:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   22908:	4641      	mov	r1, r8
   2290a:	7c28      	ldrb	r0, [r5, #16]
   2290c:	f7ff ff6b 	bl	227e6 <pool_irq_unlock.isra.4>
	*data_p = data;
   22910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   22912:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   22914:	2c00      	cmp	r4, #0
   22916:	d0db      	beq.n	228d0 <z_sys_mem_pool_block_alloc+0x50>
	*level_p = alloc_l;
   22918:	68bb      	ldr	r3, [r7, #8]
	return 0;
   2291a:	2000      	movs	r0, #0
	*level_p = alloc_l;
   2291c:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   22920:	682b      	ldr	r3, [r5, #0]
   22922:	1ae4      	subs	r4, r4, r3
   22924:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   22928:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   2292c:	687b      	ldr	r3, [r7, #4]
   2292e:	601c      	str	r4, [r3, #0]
}
   22930:	371c      	adds	r7, #28
   22932:	46bd      	mov	sp, r7
   22934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   22938:	e9d4 3200 	ldrd	r3, r2, [r4]
   2293c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2293e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22940:	2300      	movs	r3, #0
	node->prev = NULL;
   22942:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   22946:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   22948:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   2294c:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   2294e:	f107 0b14 	add.w	fp, r7, #20
   22952:	fb92 f2f1 	sdiv	r2, r2, r1
   22956:	465b      	mov	r3, fp
   22958:	4631      	mov	r1, r6
   2295a:	4628      	mov	r0, r5
   2295c:	f7ff ff23 	bl	227a6 <get_bit_ptr>
	*word |= (1<<bit);
   22960:	2201      	movs	r2, #1
   22962:	6979      	ldr	r1, [r7, #20]
   22964:	fa02 f000 	lsl.w	r0, r2, r0
   22968:	680b      	ldr	r3, [r1, #0]
   2296a:	603a      	str	r2, [r7, #0]
   2296c:	4303      	orrs	r3, r0
   2296e:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   22970:	454e      	cmp	r6, r9
   22972:	dac9      	bge.n	22908 <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   22974:	682a      	ldr	r2, [r5, #0]
   22976:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   2297a:	1aa2      	subs	r2, r4, r2
   2297c:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   22980:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   22982:	465b      	mov	r3, fp
   22984:	0092      	lsls	r2, r2, #2
   22986:	4631      	mov	r1, r6
   22988:	4628      	mov	r0, r5
   2298a:	f7ff ff0c 	bl	227a6 <get_bit_ptr>
	*word |= (1<<bit);
   2298e:	697a      	ldr	r2, [r7, #20]
   22990:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   22992:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   22994:	fa03 f000 	lsl.w	r0, r3, r0
   22998:	6813      	ldr	r3, [r2, #0]
   2299a:	4303      	orrs	r3, r0
   2299c:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   2299e:	230c      	movs	r3, #12
   229a0:	2203      	movs	r2, #3
   229a2:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
   229a6:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   229aa:	f101 0e04 	add.w	lr, r1, #4
   229ae:	1823      	adds	r3, r4, r0
   229b0:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   229b2:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   229b4:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   229b8:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   229ba:	688a      	ldr	r2, [r1, #8]
   229bc:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   229be:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   229c0:	608b      	str	r3, [r1, #8]
   229c2:	3a01      	subs	r2, #1
   229c4:	4403      	add	r3, r0
   229c6:	60fa      	str	r2, [r7, #12]
   229c8:	d1f3      	bne.n	229b2 <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
   229ca:	4641      	mov	r1, r8
   229cc:	7c28      	ldrb	r0, [r5, #16]
   229ce:	f7ff ff0a 	bl	227e6 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   229d2:	7c2b      	ldrb	r3, [r5, #16]
   229d4:	07db      	lsls	r3, r3, #31
   229d6:	d503      	bpl.n	229e0 <z_sys_mem_pool_block_alloc+0x160>
   229d8:	f7ff fefc 	bl	227d4 <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   229dc:	4680      	mov	r8, r0
   229de:	e7c7      	b.n	22970 <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
   229e0:	68f8      	ldr	r0, [r7, #12]
   229e2:	e7fb      	b.n	229dc <z_sys_mem_pool_block_alloc+0x15c>

000229e4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   229e4:	4604      	mov	r4, r0
   229e6:	b508      	push	{r3, lr}
   229e8:	4608      	mov	r0, r1
   229ea:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   229ec:	461a      	mov	r2, r3
   229ee:	47a0      	blx	r4
	return z_impl_k_current_get();
   229f0:	f7fe fb0a 	bl	21008 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   229f4:	f7eb fb28 	bl	e048 <z_impl_k_thread_abort>

000229f8 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   229f8:	b510      	push	{r4, lr}
   229fa:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   229fc:	f04f 31ff 	mov.w	r1, #4294967295
   22a00:	4620      	mov	r0, r4
   22a02:	f7fd f9f5 	bl	1fdf0 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   22a06:	4603      	mov	r3, r0
   22a08:	2800      	cmp	r0, #0
   22a0a:	d0f7      	beq.n	229fc <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   22a0c:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22a0e:	3308      	adds	r3, #8
   22a10:	e8d3 1fef 	ldaex	r1, [r3]
   22a14:	f021 0c01 	bic.w	ip, r1, #1
   22a18:	e8c3 cfee 	stlex	lr, ip, [r3]
   22a1c:	f1be 0f00 	cmp.w	lr, #0
   22a20:	d1f6      	bne.n	22a10 <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   22a22:	07cb      	lsls	r3, r1, #31
   22a24:	d500      	bpl.n	22a28 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   22a26:	4790      	blx	r2
	z_impl_k_yield();
   22a28:	f7fe f9a0 	bl	20d6c <z_impl_k_yield>
   22a2c:	e7e6      	b.n	229fc <z_work_q_main+0x4>

00022a2e <z_arch_printk_char_out>:
}
   22a2e:	2000      	movs	r0, #0
   22a30:	4770      	bx	lr

00022a32 <print_err>:
{
   22a32:	b570      	push	{r4, r5, r6, lr}
   22a34:	460d      	mov	r5, r1
   22a36:	4604      	mov	r4, r0
	out('E', ctx);
   22a38:	2045      	movs	r0, #69	; 0x45
   22a3a:	47a0      	blx	r4
	out('R', ctx);
   22a3c:	4629      	mov	r1, r5
   22a3e:	2052      	movs	r0, #82	; 0x52
   22a40:	47a0      	blx	r4
	out('R', ctx);
   22a42:	4629      	mov	r1, r5
   22a44:	4623      	mov	r3, r4
}
   22a46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   22a4a:	2052      	movs	r0, #82	; 0x52
   22a4c:	4718      	bx	r3

00022a4e <z_vprintk>:
{
   22a4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   22a52:	f04f 0800 	mov.w	r8, #0
{
   22a56:	4606      	mov	r6, r0
   22a58:	460f      	mov	r7, r1
   22a5a:	461c      	mov	r4, r3
	int min_width = -1;
   22a5c:	f04f 3aff 	mov.w	sl, #4294967295
	enum pad_type padding = PAD_NONE;
   22a60:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
   22a62:	4645      	mov	r5, r8
{
   22a64:	b08b      	sub	sp, #44	; 0x2c
   22a66:	9202      	str	r2, [sp, #8]
	while (*fmt) {
   22a68:	9b02      	ldr	r3, [sp, #8]
   22a6a:	7818      	ldrb	r0, [r3, #0]
   22a6c:	b910      	cbnz	r0, 22a74 <z_vprintk+0x26>
}
   22a6e:	b00b      	add	sp, #44	; 0x2c
   22a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
   22a74:	b945      	cbnz	r5, 22a88 <z_vprintk+0x3a>
			if (*fmt != '%') {
   22a76:	2825      	cmp	r0, #37	; 0x25
   22a78:	f000 814b 	beq.w	22d12 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   22a7c:	4639      	mov	r1, r7
   22a7e:	47b0      	blx	r6
		++fmt;
   22a80:	9b02      	ldr	r3, [sp, #8]
   22a82:	3301      	adds	r3, #1
   22a84:	9302      	str	r3, [sp, #8]
   22a86:	e7ef      	b.n	22a68 <z_vprintk+0x1a>
			switch (*fmt) {
   22a88:	2864      	cmp	r0, #100	; 0x64
   22a8a:	d06d      	beq.n	22b68 <z_vprintk+0x11a>
   22a8c:	d819      	bhi.n	22ac2 <z_vprintk+0x74>
   22a8e:	2839      	cmp	r0, #57	; 0x39
   22a90:	d80a      	bhi.n	22aa8 <z_vprintk+0x5a>
   22a92:	2831      	cmp	r0, #49	; 0x31
   22a94:	d25f      	bcs.n	22b56 <z_vprintk+0x108>
   22a96:	282d      	cmp	r0, #45	; 0x2d
   22a98:	f000 8141 	beq.w	22d1e <z_vprintk+0x2d0>
   22a9c:	2830      	cmp	r0, #48	; 0x30
   22a9e:	d04b      	beq.n	22b38 <z_vprintk+0xea>
   22aa0:	2825      	cmp	r0, #37	; 0x25
   22aa2:	d107      	bne.n	22ab4 <z_vprintk+0x66>
				out((int)'%', ctx);
   22aa4:	4639      	mov	r1, r7
   22aa6:	e132      	b.n	22d0e <z_vprintk+0x2c0>
			switch (*fmt) {
   22aa8:	2858      	cmp	r0, #88	; 0x58
   22aaa:	f000 80bb 	beq.w	22c24 <z_vprintk+0x1d6>
   22aae:	2863      	cmp	r0, #99	; 0x63
   22ab0:	f000 812a 	beq.w	22d08 <z_vprintk+0x2ba>
				out((int)'%', ctx);
   22ab4:	4639      	mov	r1, r7
   22ab6:	2025      	movs	r0, #37	; 0x25
   22ab8:	47b0      	blx	r6
				out((int)*fmt, ctx);
   22aba:	9b02      	ldr	r3, [sp, #8]
   22abc:	4639      	mov	r1, r7
   22abe:	7818      	ldrb	r0, [r3, #0]
   22ac0:	e125      	b.n	22d0e <z_vprintk+0x2c0>
			switch (*fmt) {
   22ac2:	2870      	cmp	r0, #112	; 0x70
   22ac4:	f000 80a4 	beq.w	22c10 <z_vprintk+0x1c2>
   22ac8:	d811      	bhi.n	22aee <z_vprintk+0xa0>
   22aca:	2869      	cmp	r0, #105	; 0x69
   22acc:	d04c      	beq.n	22b68 <z_vprintk+0x11a>
   22ace:	286c      	cmp	r0, #108	; 0x6c
   22ad0:	d105      	bne.n	22ade <z_vprintk+0x90>
				} else if (*fmt == 'l' && length_mod == 'l') {
   22ad2:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   22ad6:	d12a      	bne.n	22b2e <z_vprintk+0xe0>
					length_mod = 'L';
   22ad8:	f04f 084c 	mov.w	r8, #76	; 0x4c
   22adc:	e7d0      	b.n	22a80 <z_vprintk+0x32>
			switch (*fmt) {
   22ade:	2868      	cmp	r0, #104	; 0x68
   22ae0:	d1e8      	bne.n	22ab4 <z_vprintk+0x66>
				if (*fmt == 'h' && length_mod == 'h') {
   22ae2:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   22ae6:	d122      	bne.n	22b2e <z_vprintk+0xe0>
					length_mod = 'H';
   22ae8:	f04f 0848 	mov.w	r8, #72	; 0x48
   22aec:	e7c8      	b.n	22a80 <z_vprintk+0x32>
			switch (*fmt) {
   22aee:	2875      	cmp	r0, #117	; 0x75
   22af0:	d072      	beq.n	22bd8 <z_vprintk+0x18a>
   22af2:	d818      	bhi.n	22b26 <z_vprintk+0xd8>
   22af4:	2873      	cmp	r0, #115	; 0x73
   22af6:	d1dd      	bne.n	22ab4 <z_vprintk+0x66>
				char *s = va_arg(ap, char *);
   22af8:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   22afc:	46ab      	mov	fp, r5
   22afe:	465b      	mov	r3, fp
   22b00:	f81b 0b01 	ldrb.w	r0, [fp], #1
   22b04:	2800      	cmp	r0, #0
   22b06:	f040 80fc 	bne.w	22d02 <z_vprintk+0x2b4>
				if (padding == PAD_SPACE_AFTER) {
   22b0a:	f1b9 0f03 	cmp.w	r9, #3
   22b0e:	f040 810c 	bne.w	22d2a <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   22b12:	1b5d      	subs	r5, r3, r5
   22b14:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   22b18:	2d00      	cmp	r5, #0
   22b1a:	dd49      	ble.n	22bb0 <z_vprintk+0x162>
						out(' ', ctx);
   22b1c:	4639      	mov	r1, r7
   22b1e:	2020      	movs	r0, #32
   22b20:	47b0      	blx	r6
   22b22:	3d01      	subs	r5, #1
   22b24:	e7f8      	b.n	22b18 <z_vprintk+0xca>
			switch (*fmt) {
   22b26:	2878      	cmp	r0, #120	; 0x78
   22b28:	d07c      	beq.n	22c24 <z_vprintk+0x1d6>
   22b2a:	287a      	cmp	r0, #122	; 0x7a
   22b2c:	d1c2      	bne.n	22ab4 <z_vprintk+0x66>
				} else if (length_mod == 0) {
   22b2e:	f1b8 0f00 	cmp.w	r8, #0
   22b32:	d1bf      	bne.n	22ab4 <z_vprintk+0x66>
   22b34:	4680      	mov	r8, r0
   22b36:	e7a3      	b.n	22a80 <z_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
   22b38:	f1ba 0f00 	cmp.w	sl, #0
   22b3c:	da0e      	bge.n	22b5c <z_vprintk+0x10e>
   22b3e:	f1b9 0f00 	cmp.w	r9, #0
   22b42:	f000 80ef 	beq.w	22d24 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   22b46:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   22b4a:	f1b9 0f00 	cmp.w	r9, #0
   22b4e:	bf08      	it	eq
   22b50:	f04f 0902 	moveq.w	r9, #2
   22b54:	e794      	b.n	22a80 <z_vprintk+0x32>
				if (min_width < 0) {
   22b56:	f1ba 0f00 	cmp.w	sl, #0
   22b5a:	dbf4      	blt.n	22b46 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   22b5c:	230a      	movs	r3, #10
   22b5e:	fb03 0a0a 	mla	sl, r3, sl, r0
   22b62:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   22b66:	e7f0      	b.n	22b4a <z_vprintk+0xfc>
				if (length_mod == 'z') {
   22b68:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   22b6c:	d102      	bne.n	22b74 <z_vprintk+0x126>
					d = va_arg(ap, int);
   22b6e:	f854 5b04 	ldr.w	r5, [r4], #4
   22b72:	e020      	b.n	22bb6 <z_vprintk+0x168>
				} else if (length_mod == 'l') {
   22b74:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   22b78:	d0f9      	beq.n	22b6e <z_vprintk+0x120>
				} else if (length_mod == 'L') {
   22b7a:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   22b7e:	d1f6      	bne.n	22b6e <z_vprintk+0x120>
					long long lld = va_arg(ap, long long);
   22b80:	3407      	adds	r4, #7
   22b82:	f024 0407 	bic.w	r4, r4, #7
   22b86:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   22b8a:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   22b8e:	9106      	str	r1, [sp, #24]
   22b90:	f143 0100 	adc.w	r1, r3, #0
   22b94:	9107      	str	r1, [sp, #28]
   22b96:	2100      	movs	r1, #0
   22b98:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   22b9c:	f04f 30ff 	mov.w	r0, #4294967295
   22ba0:	4561      	cmp	r1, ip
   22ba2:	bf08      	it	eq
   22ba4:	4558      	cmpeq	r0, fp
   22ba6:	d205      	bcs.n	22bb4 <z_vprintk+0x166>
						print_err(out, ctx);
   22ba8:	4639      	mov	r1, r7
   22baa:	4630      	mov	r0, r6
   22bac:	f7ff ff41 	bl	22a32 <print_err>
			might_format = 0;
   22bb0:	2500      	movs	r5, #0
				break;
   22bb2:	e765      	b.n	22a80 <z_vprintk+0x32>
					d = lld;
   22bb4:	4615      	mov	r5, r2
				if (d < 0) {
   22bb6:	2d00      	cmp	r5, #0
   22bb8:	da05      	bge.n	22bc6 <z_vprintk+0x178>
					out((int)'-', ctx);
   22bba:	4639      	mov	r1, r7
   22bbc:	202d      	movs	r0, #45	; 0x2d
   22bbe:	47b0      	blx	r6
					d = -d;
   22bc0:	426d      	negs	r5, r5
					min_width--;
   22bc2:	f10a 3aff 	add.w	sl, sl, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
   22bc6:	464b      	mov	r3, r9
   22bc8:	462a      	mov	r2, r5
   22bca:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   22bce:	4639      	mov	r1, r7
   22bd0:	4630      	mov	r0, r6
   22bd2:	f7ea fca7 	bl	d524 <_printk_dec_ulong>
				break;
   22bd6:	e7eb      	b.n	22bb0 <z_vprintk+0x162>
				if (length_mod == 'z') {
   22bd8:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   22bdc:	d102      	bne.n	22be4 <z_vprintk+0x196>
					u = va_arg(ap, unsigned int);
   22bde:	f854 2b04 	ldr.w	r2, [r4], #4
   22be2:	e011      	b.n	22c08 <z_vprintk+0x1ba>
				} else if (length_mod == 'l') {
   22be4:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   22be8:	d0f9      	beq.n	22bde <z_vprintk+0x190>
				} else if (length_mod == 'L') {
   22bea:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   22bee:	d1f6      	bne.n	22bde <z_vprintk+0x190>
					if (llu > ~0UL) {
   22bf0:	2100      	movs	r1, #0
   22bf2:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
   22bf6:	3407      	adds	r4, #7
   22bf8:	f024 0407 	bic.w	r4, r4, #7
   22bfc:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   22c00:	4299      	cmp	r1, r3
   22c02:	bf08      	it	eq
   22c04:	4290      	cmpeq	r0, r2
   22c06:	d3cf      	bcc.n	22ba8 <z_vprintk+0x15a>
				_printk_dec_ulong(out, ctx, u, padding,
   22c08:	f8cd a000 	str.w	sl, [sp]
   22c0c:	464b      	mov	r3, r9
   22c0e:	e7de      	b.n	22bce <z_vprintk+0x180>
				  out('0', ctx);
   22c10:	4639      	mov	r1, r7
   22c12:	2030      	movs	r0, #48	; 0x30
   22c14:	47b0      	blx	r6
				  out('x', ctx);
   22c16:	4639      	mov	r1, r7
   22c18:	2078      	movs	r0, #120	; 0x78
   22c1a:	47b0      	blx	r6
				  min_width = 8;
   22c1c:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
   22c20:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   22c24:	9b02      	ldr	r3, [sp, #8]
   22c26:	781b      	ldrb	r3, [r3, #0]
   22c28:	2b70      	cmp	r3, #112	; 0x70
   22c2a:	d104      	bne.n	22c36 <z_vprintk+0x1e8>
					x = va_arg(ap, unsigned int);
   22c2c:	f854 3b04 	ldr.w	r3, [r4], #4
   22c30:	9304      	str	r3, [sp, #16]
   22c32:	2300      	movs	r3, #0
   22c34:	e00d      	b.n	22c52 <z_vprintk+0x204>
				} else if (length_mod == 'l') {
   22c36:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   22c3a:	d0f7      	beq.n	22c2c <z_vprintk+0x1de>
				} else if (length_mod == 'L') {
   22c3c:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   22c40:	d1f4      	bne.n	22c2c <z_vprintk+0x1de>
					x = va_arg(ap, unsigned long long);
   22c42:	3407      	adds	r4, #7
   22c44:	f024 0307 	bic.w	r3, r4, #7
   22c48:	461c      	mov	r4, r3
   22c4a:	f854 2b08 	ldr.w	r2, [r4], #8
   22c4e:	685b      	ldr	r3, [r3, #4]
   22c50:	9204      	str	r2, [sp, #16]
	int digits = 0;
   22c52:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   22c54:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   22c56:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   22c5a:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   22c5c:	9105      	str	r1, [sp, #20]
		shift -= 4;
   22c5e:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   22c62:	9804      	ldr	r0, [sp, #16]
   22c64:	f1cb 0c20 	rsb	ip, fp, #32
   22c68:	f1ab 0120 	sub.w	r1, fp, #32
   22c6c:	fa20 f00b 	lsr.w	r0, r0, fp
   22c70:	fa03 fc0c 	lsl.w	ip, r3, ip
   22c74:	ea40 000c 	orr.w	r0, r0, ip
   22c78:	fa23 f101 	lsr.w	r1, r3, r1
   22c7c:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   22c7e:	f010 000f 	ands.w	r0, r0, #15
   22c82:	d106      	bne.n	22c92 <z_vprintk+0x244>
   22c84:	9905      	ldr	r1, [sp, #20]
   22c86:	b911      	cbnz	r1, 22c8e <z_vprintk+0x240>
   22c88:	f1bb 0f00 	cmp.w	fp, #0
   22c8c:	d122      	bne.n	22cd4 <z_vprintk+0x286>
			nibble += nibble > 9 ? 87 : 48;
   22c8e:	2130      	movs	r1, #48	; 0x30
   22c90:	e003      	b.n	22c9a <z_vprintk+0x24c>
   22c92:	2809      	cmp	r0, #9
   22c94:	bf8c      	ite	hi
   22c96:	2157      	movhi	r1, #87	; 0x57
   22c98:	2130      	movls	r1, #48	; 0x30
   22c9a:	4408      	add	r0, r1
			out((int)nibble, ctx);
   22c9c:	b240      	sxtb	r0, r0
   22c9e:	4639      	mov	r1, r7
   22ca0:	9308      	str	r3, [sp, #32]
   22ca2:	9205      	str	r2, [sp, #20]
   22ca4:	47b0      	blx	r6
			digits++;
   22ca6:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   22ca8:	9a05      	ldr	r2, [sp, #20]
			digits++;
   22caa:	3301      	adds	r3, #1
   22cac:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   22cae:	9b08      	ldr	r3, [sp, #32]
   22cb0:	f1bb 0f00 	cmp.w	fp, #0
   22cb4:	d123      	bne.n	22cfe <z_vprintk+0x2b0>
	if (padding == PAD_SPACE_AFTER) {
   22cb6:	f1b9 0f03 	cmp.w	r9, #3
   22cba:	f47f af79 	bne.w	22bb0 <z_vprintk+0x162>
		remaining = min_width * 2 - digits;
   22cbe:	9b03      	ldr	r3, [sp, #12]
   22cc0:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   22cc4:	2d00      	cmp	r5, #0
   22cc6:	f77f af73 	ble.w	22bb0 <z_vprintk+0x162>
			out(' ', ctx);
   22cca:	4639      	mov	r1, r7
   22ccc:	2020      	movs	r0, #32
   22cce:	47b0      	blx	r6
   22cd0:	3d01      	subs	r5, #1
   22cd2:	e7f7      	b.n	22cc4 <z_vprintk+0x276>
		if (remaining-- <= min_width) {
   22cd4:	1e51      	subs	r1, r2, #1
   22cd6:	4592      	cmp	sl, r2
   22cd8:	9108      	str	r1, [sp, #32]
   22cda:	db07      	blt.n	22cec <z_vprintk+0x29e>
			if (padding == PAD_ZERO_BEFORE) {
   22cdc:	f1b9 0f01 	cmp.w	r9, #1
   22ce0:	d106      	bne.n	22cf0 <z_vprintk+0x2a2>
				out('0', ctx);
   22ce2:	4639      	mov	r1, r7
   22ce4:	2030      	movs	r0, #48	; 0x30
   22ce6:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   22ce8:	47b0      	blx	r6
   22cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   22cec:	9a08      	ldr	r2, [sp, #32]
   22cee:	e7b6      	b.n	22c5e <z_vprintk+0x210>
			} else if (padding == PAD_SPACE_BEFORE) {
   22cf0:	f1b9 0f02 	cmp.w	r9, #2
   22cf4:	d1fa      	bne.n	22cec <z_vprintk+0x29e>
   22cf6:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   22cf8:	4639      	mov	r1, r7
   22cfa:	2020      	movs	r0, #32
   22cfc:	e7f4      	b.n	22ce8 <z_vprintk+0x29a>
			found_largest_digit = 1;
   22cfe:	9505      	str	r5, [sp, #20]
   22d00:	e7ad      	b.n	22c5e <z_vprintk+0x210>
					out((int)(*s++), ctx);
   22d02:	4639      	mov	r1, r7
   22d04:	47b0      	blx	r6
   22d06:	e6fa      	b.n	22afe <z_vprintk+0xb0>
				out(c, ctx);
   22d08:	4639      	mov	r1, r7
   22d0a:	f854 0b04 	ldr.w	r0, [r4], #4
				out((int)'%', ctx);
   22d0e:	47b0      	blx	r6
   22d10:	e74e      	b.n	22bb0 <z_vprintk+0x162>
				length_mod = 0;
   22d12:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   22d14:	46a9      	mov	r9, r5
				min_width = -1;
   22d16:	f04f 3aff 	mov.w	sl, #4294967295
				might_format = 1;
   22d1a:	2501      	movs	r5, #1
   22d1c:	e6b0      	b.n	22a80 <z_vprintk+0x32>
				padding = PAD_SPACE_AFTER;
   22d1e:	f04f 0903 	mov.w	r9, #3
   22d22:	e6ad      	b.n	22a80 <z_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
   22d24:	f04f 0901 	mov.w	r9, #1
   22d28:	e6aa      	b.n	22a80 <z_vprintk+0x32>
			might_format = 0;
   22d2a:	4605      	mov	r5, r0
   22d2c:	e6a8      	b.n	22a80 <z_vprintk+0x32>

00022d2e <printk>:
{
   22d2e:	b40f      	push	{r0, r1, r2, r3}
   22d30:	b507      	push	{r0, r1, r2, lr}
   22d32:	a904      	add	r1, sp, #16
   22d34:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   22d38:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   22d3a:	f7ea fc45 	bl	d5c8 <vprintk>
}
   22d3e:	b003      	add	sp, #12
   22d40:	f85d eb04 	ldr.w	lr, [sp], #4
   22d44:	b004      	add	sp, #16
   22d46:	4770      	bx	lr

00022d48 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   22d48:	4040      	eors	r0, r0
   22d4a:	f380 8811 	msr	BASEPRI, r0
   22d4e:	f04f 0004 	mov.w	r0, #4
   22d52:	df02      	svc	2

00022d54 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   22d54:	4770      	bx	lr

00022d56 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   22d56:	f7fc b929 	b.w	1efac <SystemInit>

00022d5a <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
   22d5a:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
   22d5c:	7a5a      	ldrb	r2, [r3, #9]
   22d5e:	b932      	cbnz	r2, 22d6e <get_status+0x14>
	if (data->ref > 0) {
   22d60:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
   22d64:	2800      	cmp	r0, #0
   22d66:	bfcc      	ite	gt
   22d68:	2000      	movgt	r0, #0
   22d6a:	2001      	movle	r0, #1
   22d6c:	4770      	bx	lr
   22d6e:	2002      	movs	r0, #2
}
   22d70:	4770      	bx	lr

00022d72 <clock_stop>:
	const struct nrf_clock_control_config *config =
   22d72:	6802      	ldr	r2, [r0, #0]
{
   22d74:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
   22d76:	6896      	ldr	r6, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
   22d78:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
   22d7a:	f04f 0320 	mov.w	r3, #32
   22d7e:	f3ef 8511 	mrs	r5, BASEPRI
   22d82:	f383 8811 	msr	BASEPRI, r3
   22d86:	f3bf 8f6f 	isb	sy
	data->ref--;
   22d8a:	7a23      	ldrb	r3, [r4, #8]
   22d8c:	3b01      	subs	r3, #1
   22d8e:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
   22d90:	2b00      	cmp	r3, #0
	data->ref--;
   22d92:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
   22d94:	d11c      	bne.n	22dd0 <clock_stop+0x5e>
	list->tail = NULL;
   22d96:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
   22d9a:	6873      	ldr	r3, [r6, #4]
				config->stop_handler(dev) : true;
   22d9c:	b9a3      	cbnz	r3, 22dc8 <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   22d9e:	2201      	movs	r2, #1
   22da0:	7af3      	ldrb	r3, [r6, #11]
   22da2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22da6:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   22daa:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   22dac:	2200      	movs	r2, #0
   22dae:	8933      	ldrh	r3, [r6, #8]
   22db0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22db4:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   22db8:	601a      	str	r2, [r3, #0]
		data->started = false;
   22dba:	2000      	movs	r0, #0
   22dbc:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   22dbe:	f385 8811 	msr	BASEPRI, r5
   22dc2:	f3bf 8f6f 	isb	sy
}
   22dc6:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
   22dc8:	4798      	blx	r3
   22dca:	2800      	cmp	r0, #0
   22dcc:	d1e7      	bne.n	22d9e <clock_stop+0x2c>
   22dce:	e7f4      	b.n	22dba <clock_stop+0x48>
	} else if (data->ref < 0) {
   22dd0:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
   22dd4:	bfbc      	itt	lt
   22dd6:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
   22dd8:	f06f 0044 	mvnlt.w	r0, #68	; 0x44
   22ddc:	e7ef      	b.n	22dbe <clock_stop+0x4c>

00022dde <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   22dde:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
   22de0:	2000      	movs	r0, #0
	list->tail = NULL;
   22de2:	e9c3 0000 	strd	r0, r0, [r3]
}
   22de6:	4770      	bx	lr

00022de8 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   22de8:	2200      	movs	r2, #0
   22dea:	f7ea bc7b 	b.w	d6e4 <clock_async_start>

00022dee <clkstarted_handle>:
{
   22dee:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
   22df0:	6884      	ldr	r4, [r0, #8]
{
   22df2:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
   22df4:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   22df6:	b12b      	cbz	r3, 22e04 <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22df8:	6861      	ldr	r1, [r4, #4]
   22dfa:	681a      	ldr	r2, [r3, #0]
   22dfc:	428b      	cmp	r3, r1
	list->head = node;
   22dfe:	6022      	str	r2, [r4, #0]
	list->tail = node;
   22e00:	bf08      	it	eq
   22e02:	6062      	streq	r2, [r4, #4]
	data->started = true;
   22e04:	2201      	movs	r2, #1
   22e06:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
   22e08:	b903      	cbnz	r3, 22e0c <clkstarted_handle+0x1e>
}
   22e0a:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   22e0c:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   22e10:	4628      	mov	r0, r5
   22e12:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
   22e14:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   22e16:	2b00      	cmp	r3, #0
   22e18:	d0f7      	beq.n	22e0a <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22e1a:	6861      	ldr	r1, [r4, #4]
   22e1c:	681a      	ldr	r2, [r3, #0]
   22e1e:	428b      	cmp	r3, r1
	list->head = node;
   22e20:	6022      	str	r2, [r4, #0]
	list->tail = node;
   22e22:	bf08      	it	eq
   22e24:	6062      	streq	r2, [r4, #4]
   22e26:	e7ef      	b.n	22e08 <clkstarted_handle+0x1a>

00022e28 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   22e28:	4770      	bx	lr

00022e2a <z_irq_spurious>:
	z_arm_reserved();
   22e2a:	f7ea bedf 	b.w	dbec <z_arm_bus_fault>

00022e2e <z_arch_isr_direct_header>:
#endif

void z_arch_isr_direct_header(void)
{
	sys_trace_isr_enter();
}
   22e2e:	4770      	bx	lr

00022e30 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   22e30:	f7fc b914 	b.w	1f05c <z_fatal_error>

00022e34 <z_do_kernel_oops>:
}

void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   22e34:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   22e36:	6800      	ldr	r0, [r0, #0]
   22e38:	f7fc b910 	b.w	1f05c <z_fatal_error>

00022e3c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   22e3c:	b508      	push	{r3, lr}
	handler();
   22e3e:	f7ea fee7 	bl	dc10 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   22e42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   22e46:	f7ea be4f 	b.w	dae8 <z_arm_exc_exit>

00022e4a <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   22e4a:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   22e4c:	2100      	movs	r1, #0
   22e4e:	a801      	add	r0, sp, #4
   22e50:	f7eb fb0e 	bl	e470 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   22e54:	b003      	add	sp, #12
   22e56:	f85d fb04 	ldr.w	pc, [sp], #4

00022e5a <mpu_configure_region>:
{
   22e5a:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
   22e5c:	680b      	ldr	r3, [r1, #0]
{
   22e5e:	b085      	sub	sp, #20
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   22e60:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   22e62:	f89d 2008 	ldrb.w	r2, [sp, #8]
   22e66:	890d      	ldrh	r5, [r1, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   22e68:	3c01      	subs	r4, #1
	region_conf.base = new_region->start;
   22e6a:	9300      	str	r3, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   22e6c:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   22e6e:	f023 031f 	bic.w	r3, r3, #31
   22e72:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   22e74:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   22e78:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   22e7c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   22e80:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   22e82:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   22e86:	9303      	str	r3, [sp, #12]
   22e88:	4604      	mov	r4, r0
   22e8a:	d805      	bhi.n	22e98 <mpu_configure_region+0x3e>
	region_init(index, region_conf);
   22e8c:	4669      	mov	r1, sp
   22e8e:	f7eb f943 	bl	e118 <region_init>
}
   22e92:	4620      	mov	r0, r4
   22e94:	b005      	add	sp, #20
   22e96:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   22e98:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
   22e9c:	e7f9      	b.n	22e92 <mpu_configure_region+0x38>

00022e9e <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   22e9e:	b530      	push	{r4, r5, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   22ea0:	7802      	ldrb	r2, [r0, #0]
   22ea2:	4603      	mov	r3, r0
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   22ea4:	2a20      	cmp	r2, #32
   22ea6:	f100 0001 	add.w	r0, r0, #1
   22eaa:	d0f9      	beq.n	22ea0 <atoi+0x2>
   22eac:	f1a2 0109 	sub.w	r1, r2, #9
   22eb0:	2904      	cmp	r1, #4
   22eb2:	d9f5      	bls.n	22ea0 <atoi+0x2>
		s++;
	}
	switch (*s) {
   22eb4:	2a2b      	cmp	r2, #43	; 0x2b
   22eb6:	d008      	beq.n	22eca <atoi+0x2c>
	case '-':
		neg = 1;
		s++;
   22eb8:	2a2d      	cmp	r2, #45	; 0x2d
   22eba:	bf0a      	itet	eq
   22ebc:	4603      	moveq	r3, r0
   22ebe:	2100      	movne	r1, #0
   22ec0:	2101      	moveq	r1, #1
   22ec2:	3b01      	subs	r3, #1
	int neg = 0;
   22ec4:	2000      	movs	r0, #0
	case '+':
		s++;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   22ec6:	250a      	movs	r5, #10
   22ec8:	e006      	b.n	22ed8 <atoi+0x3a>
		s++;
   22eca:	4603      	mov	r3, r0
	int neg = 0;
   22ecc:	2100      	movs	r1, #0
   22ece:	e7f8      	b.n	22ec2 <atoi+0x24>
		n = 10*n - (*s++ - '0');
   22ed0:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
   22ed4:	fb05 2000 	mla	r0, r5, r0, r2
	while (isdigit(*s)) {
   22ed8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   22edc:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   22ee0:	2c09      	cmp	r4, #9
   22ee2:	d9f5      	bls.n	22ed0 <atoi+0x32>
	}
	return neg ? n : -n;
   22ee4:	b901      	cbnz	r1, 22ee8 <atoi+0x4a>
   22ee6:	4240      	negs	r0, r0
}
   22ee8:	bd30      	pop	{r4, r5, pc}

00022eea <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   22eea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22eee:	4684      	mov	ip, r0
   22ef0:	460f      	mov	r7, r1
	register const char *s = nptr;
   22ef2:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   22ef4:	462c      	mov	r4, r5
   22ef6:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   22efa:	2b20      	cmp	r3, #32
   22efc:	d036      	beq.n	22f6c <strtol+0x82>
   22efe:	f1a3 0109 	sub.w	r1, r3, #9
   22f02:	2904      	cmp	r1, #4
   22f04:	d932      	bls.n	22f6c <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   22f06:	2b2d      	cmp	r3, #45	; 0x2d
   22f08:	d132      	bne.n	22f70 <strtol+0x86>
		neg = 1;
   22f0a:	2101      	movs	r1, #1
		c = *s++;
   22f0c:	786b      	ldrb	r3, [r5, #1]
   22f0e:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   22f10:	2a00      	cmp	r2, #0
   22f12:	d05c      	beq.n	22fce <strtol+0xe4>
   22f14:	2a10      	cmp	r2, #16
   22f16:	d109      	bne.n	22f2c <strtol+0x42>
   22f18:	2b30      	cmp	r3, #48	; 0x30
   22f1a:	d107      	bne.n	22f2c <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   22f1c:	7823      	ldrb	r3, [r4, #0]
   22f1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   22f22:	2b58      	cmp	r3, #88	; 0x58
   22f24:	d14e      	bne.n	22fc4 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   22f26:	2210      	movs	r2, #16
		c = s[1];
   22f28:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   22f2a:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   22f2c:	2900      	cmp	r1, #0
   22f2e:	bf14      	ite	ne
   22f30:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
   22f34:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   22f38:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   22f3a:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   22f3e:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   22f40:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   22f44:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   22f48:	2d09      	cmp	r5, #9
   22f4a:	d817      	bhi.n	22f7c <strtol+0x92>
			c -= '0';
   22f4c:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   22f4e:	429a      	cmp	r2, r3
   22f50:	dd24      	ble.n	22f9c <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   22f52:	1c75      	adds	r5, r6, #1
   22f54:	d007      	beq.n	22f66 <strtol+0x7c>
   22f56:	4570      	cmp	r0, lr
   22f58:	d81d      	bhi.n	22f96 <strtol+0xac>
   22f5a:	d101      	bne.n	22f60 <strtol+0x76>
   22f5c:	454b      	cmp	r3, r9
   22f5e:	dc1a      	bgt.n	22f96 <strtol+0xac>
			any = -1;
		} else {
			any = 1;
   22f60:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   22f62:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   22f66:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   22f6a:	e7eb      	b.n	22f44 <strtol+0x5a>
{
   22f6c:	4625      	mov	r5, r4
   22f6e:	e7c1      	b.n	22ef4 <strtol+0xa>
	} else if (c == '+') {
   22f70:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   22f72:	bf04      	itt	eq
   22f74:	1cac      	addeq	r4, r5, #2
   22f76:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   22f78:	2100      	movs	r1, #0
   22f7a:	e7c9      	b.n	22f10 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   22f7c:	f043 0520 	orr.w	r5, r3, #32
   22f80:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   22f82:	2d19      	cmp	r5, #25
   22f84:	d80a      	bhi.n	22f9c <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   22f86:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   22f8a:	2d1a      	cmp	r5, #26
   22f8c:	bf34      	ite	cc
   22f8e:	2537      	movcc	r5, #55	; 0x37
   22f90:	2557      	movcs	r5, #87	; 0x57
   22f92:	1b5b      	subs	r3, r3, r5
   22f94:	e7db      	b.n	22f4e <strtol+0x64>
			any = -1;
   22f96:	f04f 36ff 	mov.w	r6, #4294967295
   22f9a:	e7e4      	b.n	22f66 <strtol+0x7c>
		}
	}

	if (any < 0) {
   22f9c:	1c73      	adds	r3, r6, #1
   22f9e:	d107      	bne.n	22fb0 <strtol+0xc6>
   22fa0:	f7fc f856 	bl	1f050 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   22fa4:	2326      	movs	r3, #38	; 0x26
   22fa6:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   22fa8:	4640      	mov	r0, r8
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   22faa:	b937      	cbnz	r7, 22fba <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   22fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   22fb0:	b101      	cbz	r1, 22fb4 <strtol+0xca>
		acc = -acc;
   22fb2:	4240      	negs	r0, r0
	if (endptr != NULL) {
   22fb4:	2f00      	cmp	r7, #0
   22fb6:	d0f9      	beq.n	22fac <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   22fb8:	b10e      	cbz	r6, 22fbe <strtol+0xd4>
   22fba:	f104 3cff 	add.w	ip, r4, #4294967295
   22fbe:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   22fc2:	e7f3      	b.n	22fac <strtol+0xc2>
	if (base == 0) {
   22fc4:	2330      	movs	r3, #48	; 0x30
   22fc6:	2a00      	cmp	r2, #0
   22fc8:	d1b0      	bne.n	22f2c <strtol+0x42>
		base = c == '0' ? 8 : 10;
   22fca:	2208      	movs	r2, #8
   22fcc:	e7ae      	b.n	22f2c <strtol+0x42>
	if ((base == 0 || base == 16) &&
   22fce:	2b30      	cmp	r3, #48	; 0x30
   22fd0:	d0a4      	beq.n	22f1c <strtol+0x32>
		base = c == '0' ? 8 : 10;
   22fd2:	220a      	movs	r2, #10
   22fd4:	e7aa      	b.n	22f2c <strtol+0x42>

00022fd6 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   22fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   22fda:	780f      	ldrb	r7, [r1, #0]
{
   22fdc:	4605      	mov	r5, r0
	if (c != 0) {
   22fde:	b187      	cbz	r7, 23002 <strstr+0x2c>
	c = *find++;
   22fe0:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   22fe2:	4620      	mov	r0, r4
   22fe4:	f000 f822 	bl	2302c <strlen>
   22fe8:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
   22fea:	462e      	mov	r6, r5
   22fec:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   22ff0:	b163      	cbz	r3, 2300c <strstr+0x36>
					return NULL;
				}
			} while (sc != c);
   22ff2:	429f      	cmp	r7, r3
   22ff4:	d108      	bne.n	23008 <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
   22ff6:	4642      	mov	r2, r8
   22ff8:	4621      	mov	r1, r4
   22ffa:	4630      	mov	r0, r6
   22ffc:	f000 f829 	bl	23052 <strncmp>
   23000:	b910      	cbnz	r0, 23008 <strstr+0x32>
	s--;
	}
	return (char *)s;
}
   23002:	4628      	mov	r0, r5
   23004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   23008:	4635      	mov	r5, r6
   2300a:	e7ee      	b.n	22fea <strstr+0x14>
					return NULL;
   2300c:	461d      	mov	r5, r3
   2300e:	e7f8      	b.n	23002 <strstr+0x2c>

00023010 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   23010:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   23012:	7802      	ldrb	r2, [r0, #0]
   23014:	4603      	mov	r3, r0
   23016:	428a      	cmp	r2, r1
   23018:	f100 0001 	add.w	r0, r0, #1
   2301c:	d004      	beq.n	23028 <strchr+0x18>
   2301e:	2a00      	cmp	r2, #0
   23020:	d1f7      	bne.n	23012 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   23022:	2900      	cmp	r1, #0
   23024:	bf18      	it	ne
   23026:	2300      	movne	r3, #0
}
   23028:	4618      	mov	r0, r3
   2302a:	4770      	bx	lr

0002302c <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   2302c:	2300      	movs	r3, #0

	while (*s != '\0') {
   2302e:	5cc2      	ldrb	r2, [r0, r3]
   23030:	b90a      	cbnz	r2, 23036 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   23032:	4618      	mov	r0, r3
   23034:	4770      	bx	lr
		n++;
   23036:	3301      	adds	r3, #1
   23038:	e7f9      	b.n	2302e <strlen+0x2>

0002303a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2303a:	3801      	subs	r0, #1
   2303c:	3901      	subs	r1, #1
   2303e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   23042:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   23046:	4293      	cmp	r3, r2
   23048:	d101      	bne.n	2304e <strcmp+0x14>
   2304a:	2b00      	cmp	r3, #0
   2304c:	d1f7      	bne.n	2303e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   2304e:	1a98      	subs	r0, r3, r2
   23050:	4770      	bx	lr

00023052 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   23052:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   23054:	2400      	movs	r4, #0
   23056:	42a2      	cmp	r2, r4
   23058:	d008      	beq.n	2306c <strncmp+0x1a>
   2305a:	5d03      	ldrb	r3, [r0, r4]
   2305c:	5d0d      	ldrb	r5, [r1, r4]
   2305e:	42ab      	cmp	r3, r5
   23060:	d102      	bne.n	23068 <strncmp+0x16>
   23062:	3401      	adds	r4, #1
   23064:	2b00      	cmp	r3, #0
   23066:	d1f6      	bne.n	23056 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   23068:	1b58      	subs	r0, r3, r5
   2306a:	e000      	b.n	2306e <strncmp+0x1c>
   2306c:	2000      	movs	r0, #0
}
   2306e:	bd30      	pop	{r4, r5, pc}

00023070 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   23070:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   23072:	ea81 0400 	eor.w	r4, r1, r0
   23076:	07a5      	lsls	r5, r4, #30
   23078:	4603      	mov	r3, r0
   2307a:	d00b      	beq.n	23094 <memcpy+0x24>
   2307c:	3b01      	subs	r3, #1
   2307e:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   23080:	4291      	cmp	r1, r2
   23082:	d11a      	bne.n	230ba <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   23084:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   23086:	2a00      	cmp	r2, #0
   23088:	d0fc      	beq.n	23084 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   2308a:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   2308e:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   23090:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   23094:	079c      	lsls	r4, r3, #30
   23096:	d1f6      	bne.n	23086 <memcpy+0x16>
   23098:	0895      	lsrs	r5, r2, #2
   2309a:	00ac      	lsls	r4, r5, #2
   2309c:	1f1e      	subs	r6, r3, #4
   2309e:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   230a0:	42b9      	cmp	r1, r7
   230a2:	d105      	bne.n	230b0 <memcpy+0x40>
   230a4:	f06f 0603 	mvn.w	r6, #3
   230a8:	4423      	add	r3, r4
   230aa:	fb06 2205 	mla	r2, r6, r5, r2
   230ae:	e7e5      	b.n	2307c <memcpy+0xc>
			*(d_word++) = *(s_word++);
   230b0:	f851 cb04 	ldr.w	ip, [r1], #4
   230b4:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   230b8:	e7f2      	b.n	230a0 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   230ba:	f811 4b01 	ldrb.w	r4, [r1], #1
   230be:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   230c2:	e7dd      	b.n	23080 <memcpy+0x10>

000230c4 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   230c4:	4603      	mov	r3, r0
{
   230c6:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   230c8:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   230ca:	079c      	lsls	r4, r3, #30
   230cc:	d110      	bne.n	230f0 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   230ce:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   230d2:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   230d6:	0894      	lsrs	r4, r2, #2
   230d8:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   230dc:	42b3      	cmp	r3, r6
   230de:	d10d      	bne.n	230fc <memset+0x38>
   230e0:	f06f 0503 	mvn.w	r5, #3
   230e4:	fb05 2404 	mla	r4, r5, r4, r2
   230e8:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   230ea:	42a3      	cmp	r3, r4
   230ec:	d109      	bne.n	23102 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   230ee:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   230f0:	2a00      	cmp	r2, #0
   230f2:	d0fc      	beq.n	230ee <memset+0x2a>
		*(d_byte++) = c_byte;
   230f4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   230f8:	3a01      	subs	r2, #1
   230fa:	e7e6      	b.n	230ca <memset+0x6>
		*(d_word++) = c_word;
   230fc:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   23100:	e7ec      	b.n	230dc <memset+0x18>
		*(d_byte++) = c_byte;
   23102:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   23106:	e7f0      	b.n	230ea <memset+0x26>

00023108 <_to_x>:
{
   23108:	4603      	mov	r3, r0
   2310a:	b5f0      	push	{r4, r5, r6, r7, lr}
		unsigned int d = n % base;
   2310c:	fbb1 f7f2 	udiv	r7, r1, r2
   23110:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   23114:	2d09      	cmp	r5, #9
   23116:	bf8c      	ite	hi
   23118:	2627      	movhi	r6, #39	; 0x27
   2311a:	2600      	movls	r6, #0
   2311c:	461c      	mov	r4, r3
   2311e:	3530      	adds	r5, #48	; 0x30
   23120:	4435      	add	r5, r6
	} while (n);
   23122:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   23124:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
   23128:	d206      	bcs.n	23138 <_to_x+0x30>
	*buf = 0;
   2312a:	2200      	movs	r2, #0
   2312c:	7022      	strb	r2, [r4, #0]
	len = buf - start;
   2312e:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
   23130:	4283      	cmp	r3, r0
   23132:	d804      	bhi.n	2313e <_to_x+0x36>
}
   23134:	4620      	mov	r0, r4
   23136:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
   23138:	4639      	mov	r1, r7
   2313a:	4623      	mov	r3, r4
   2313c:	e7e6      	b.n	2310c <_to_x+0x4>
		char tmp = *buf;
   2313e:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
   23140:	7801      	ldrb	r1, [r0, #0]
   23142:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
   23146:	f800 2b01 	strb.w	r2, [r0], #1
   2314a:	e7f1      	b.n	23130 <_to_x+0x28>

0002314c <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   2314c:	2100      	movs	r1, #0
{
   2314e:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   23150:	e9d0 6500 	ldrd	r6, r5, [r0]
   23154:	0872      	lsrs	r2, r6, #1
   23156:	f006 0301 	and.w	r3, r6, #1
   2315a:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   2315e:	189b      	adds	r3, r3, r2
   23160:	ea4f 0455 	mov.w	r4, r5, lsr #1
   23164:	eb44 0101 	adc.w	r1, r4, r1
   23168:	e9c0 3100 	strd	r3, r1, [r0]
}
   2316c:	bd70      	pop	{r4, r5, r6, pc}

0002316e <_ldiv5>:
{
   2316e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint64_t rem = *v, quot = 0U, q;
   23172:	e9d0 3200 	ldrd	r3, r2, [r0]
		q = (uint64_t)(hi / 5U) << shifts[i];
   23176:	2705      	movs	r7, #5
	rem += 2U;
   23178:	3302      	adds	r3, #2
   2317a:	f142 0200 	adc.w	r2, r2, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
   2317e:	fbb2 fef7 	udiv	lr, r2, r7
   23182:	f04f 0c00 	mov.w	ip, #0
		rem -= q * 5U;
   23186:	fb07 f10e 	mul.w	r1, r7, lr
   2318a:	ebb3 060c 	subs.w	r6, r3, ip
   2318e:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   23192:	08f2      	lsrs	r2, r6, #3
   23194:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   23198:	fbb2 f1f7 	udiv	r1, r2, r7
   2319c:	00ca      	lsls	r2, r1, #3
		quot += q;
   2319e:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   231a2:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   231a6:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
   231aa:	fba2 2307 	umull	r2, r3, r2, r7
   231ae:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   231b0:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   231b4:	eb18 0403 	adds.w	r4, r8, r3
   231b8:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
   231bc:	e9c0 4500 	strd	r4, r5, [r0]
}
   231c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000231c4 <_get_digit>:
	if (*digit_count > 0) {
   231c4:	680b      	ldr	r3, [r1, #0]
{
   231c6:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   231c8:	2b00      	cmp	r3, #0
   231ca:	dd10      	ble.n	231ee <_get_digit+0x2a>
		*digit_count -= 1;
   231cc:	3b01      	subs	r3, #1
   231ce:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   231d0:	210a      	movs	r1, #10
   231d2:	6802      	ldr	r2, [r0, #0]
   231d4:	6844      	ldr	r4, [r0, #4]
   231d6:	fba2 5601 	umull	r5, r6, r2, r1
   231da:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   231de:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   231e2:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   231e6:	0f31      	lsrs	r1, r6, #28
   231e8:	3130      	adds	r1, #48	; 0x30
}
   231ea:	4608      	mov	r0, r1
   231ec:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   231ee:	2130      	movs	r1, #48	; 0x30
   231f0:	e7fb      	b.n	231ea <_get_digit+0x26>

000231f2 <_stdout_hook_default>:
}
   231f2:	f04f 30ff 	mov.w	r0, #4294967295
   231f6:	4770      	bx	lr

000231f8 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   231f8:	684b      	ldr	r3, [r1, #4]
   231fa:	2b01      	cmp	r3, #1
   231fc:	dd07      	ble.n	2320e <sprintf_out+0x16>
		*(p->ptr) = c;
   231fe:	680b      	ldr	r3, [r1, #0]
   23200:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   23202:	680b      	ldr	r3, [r1, #0]
   23204:	3301      	adds	r3, #1
   23206:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   23208:	684b      	ldr	r3, [r1, #4]
   2320a:	3b01      	subs	r3, #1
   2320c:	604b      	str	r3, [r1, #4]
}
   2320e:	2000      	movs	r0, #0
   23210:	4770      	bx	lr

00023212 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   23212:	b508      	push	{r3, lr}
	net_if_init();
   23214:	f7eb fed2 	bl	efbc <net_if_init>
	net_if_post_init();
   23218:	f7eb fee4 	bl	efe4 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   2321c:	2000      	movs	r0, #0
   2321e:	bd08      	pop	{r3, pc}

00023220 <l2_flags_get>:
	return iface->if_dev->l2;
   23220:	6803      	ldr	r3, [r0, #0]
   23222:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   23224:	b113      	cbz	r3, 2322c <l2_flags_get+0xc>
   23226:	68db      	ldr	r3, [r3, #12]
   23228:	b103      	cbz	r3, 2322c <l2_flags_get+0xc>
		flags = net_if_l2(iface)->get_flags(iface);
   2322a:	4718      	bx	r3
}
   2322c:	2000      	movs	r0, #0
   2322e:	4770      	bx	lr

00023230 <gpio_nrfx_write>:
{
   23230:	b510      	push	{r4, lr}
	return port->config->config_info;
   23232:	6804      	ldr	r4, [r0, #0]
   23234:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   23236:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   23238:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2323a:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2323c:	69c0      	ldr	r0, [r0, #28]
   2323e:	d103      	bne.n	23248 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   23240:	4058      	eors	r0, r3
    p_reg->OUT = value;
   23242:	6060      	str	r0, [r4, #4]
}
   23244:	2000      	movs	r0, #0
   23246:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   23248:	3300      	adds	r3, #0
   2324a:	f04f 0101 	mov.w	r1, #1
   2324e:	bf18      	it	ne
   23250:	2301      	movne	r3, #1
   23252:	40d0      	lsrs	r0, r2
   23254:	f000 0001 	and.w	r0, r0, #1
   23258:	4091      	lsls	r1, r2
   2325a:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   2325c:	bf14      	ite	ne
   2325e:	60a1      	strne	r1, [r4, #8]
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   23260:	60e1      	streq	r1, [r4, #12]
   23262:	e7ef      	b.n	23244 <gpio_nrfx_write+0x14>

00023264 <gpio_nrfx_read>:
{
   23264:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   23266:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   23268:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2326a:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   2326c:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2326e:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   23270:	2901      	cmp	r1, #1
    return p_reg->DIR;
   23272:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   23274:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   23276:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   23278:	ea80 0004 	eor.w	r0, r0, r4
   2327c:	ea84 0405 	eor.w	r4, r4, r5
   23280:	ea04 0406 	and.w	r4, r4, r6
   23284:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   23288:	bf1c      	itt	ne
   2328a:	40d0      	lsrne	r0, r2
   2328c:	f000 0001 	andne.w	r0, r0, #1
   23290:	6018      	str	r0, [r3, #0]
}
   23292:	2000      	movs	r0, #0
   23294:	bd70      	pop	{r4, r5, r6, pc}

00023296 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   23296:	2901      	cmp	r1, #1
{
   23298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   2329c:	bf18      	it	ne
   2329e:	b2d4      	uxtbne	r4, r2
{
   232a0:	4606      	mov	r6, r0
		to_pin   = pin;
   232a2:	bf12      	itee	ne
   232a4:	4625      	movne	r5, r4
		to_pin   = 31U;
   232a6:	251f      	moveq	r5, #31
		from_pin = 0U;
   232a8:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   232aa:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   232ae:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   232b0:	42ac      	cmp	r4, r5
   232b2:	d902      	bls.n	232ba <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   232b4:	2000      	movs	r0, #0
}
   232b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   232ba:	68fb      	ldr	r3, [r7, #12]
   232bc:	fa08 f204 	lsl.w	r2, r8, r4
   232c0:	ea23 0302 	bic.w	r3, r3, r2
   232c4:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   232c6:	4621      	mov	r1, r4
   232c8:	4630      	mov	r0, r6
   232ca:	f7eb ff25 	bl	f118 <gpiote_pin_int_cfg>
		if (res != 0) {
   232ce:	2800      	cmp	r0, #0
   232d0:	d1f1      	bne.n	232b6 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   232d2:	3401      	adds	r4, #1
   232d4:	b2e4      	uxtb	r4, r4
   232d6:	e7eb      	b.n	232b0 <gpio_nrfx_pin_disable_callback+0x1a>

000232d8 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   232d8:	2901      	cmp	r1, #1
{
   232da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   232de:	bf18      	it	ne
   232e0:	b2d4      	uxtbne	r4, r2
{
   232e2:	4606      	mov	r6, r0
		to_pin   = pin;
   232e4:	bf12      	itee	ne
   232e6:	4625      	movne	r5, r4
		to_pin   = 31U;
   232e8:	251f      	moveq	r5, #31
		from_pin = 0U;
   232ea:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   232ec:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   232f0:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   232f2:	42ac      	cmp	r4, r5
   232f4:	d902      	bls.n	232fc <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   232f6:	2000      	movs	r0, #0
}
   232f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   232fc:	68fb      	ldr	r3, [r7, #12]
   232fe:	fa08 f204 	lsl.w	r2, r8, r4
   23302:	4313      	orrs	r3, r2
   23304:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   23306:	4621      	mov	r1, r4
   23308:	4630      	mov	r0, r6
   2330a:	f7eb ff05 	bl	f118 <gpiote_pin_int_cfg>
		if (res != 0) {
   2330e:	2800      	cmp	r0, #0
   23310:	d1f2      	bne.n	232f8 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   23312:	3401      	adds	r4, #1
   23314:	b2e4      	uxtb	r4, r4
   23316:	e7ec      	b.n	232f2 <gpio_nrfx_pin_enable_callback+0x1a>

00023318 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   23318:	6883      	ldr	r3, [r0, #8]
   2331a:	689b      	ldr	r3, [r3, #8]
   2331c:	7b9a      	ldrb	r2, [r3, #14]
   2331e:	b172      	cbz	r2, 2333e <uarte_nrfx_isr_int+0x26>
	return dev->config->config_info;
   23320:	6802      	ldr	r2, [r0, #0]
	return config->uarte_regs;
   23322:	6892      	ldr	r2, [r2, #8]
   23324:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23326:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (data->int_driven->disable_tx_irq &&
   2332a:	b141      	cbz	r1, 2333e <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   2332c:	f44f 7180 	mov.w	r1, #256	; 0x100
   23330:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23334:	2101      	movs	r1, #1
   23336:	60d1      	str	r1, [r2, #12]
		data->int_driven->disable_tx_irq = false;
   23338:	2200      	movs	r2, #0
   2333a:	739a      	strb	r2, [r3, #14]
		return;
   2333c:	4770      	bx	lr
	if (data->int_driven->cb) {
   2333e:	681a      	ldr	r2, [r3, #0]
   23340:	b10a      	cbz	r2, 23346 <uarte_nrfx_isr_int+0x2e>
		data->int_driven->cb(data->int_driven->cb_data);
   23342:	6858      	ldr	r0, [r3, #4]
   23344:	4710      	bx	r2
}
   23346:	4770      	bx	lr

00023348 <uarte_nrfx_config_get>:
{
   23348:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2334a:	6882      	ldr	r2, [r0, #8]
   2334c:	e892 0003 	ldmia.w	r2, {r0, r1}
   23350:	e883 0003 	stmia.w	r3, {r0, r1}
}
   23354:	2000      	movs	r0, #0
   23356:	4770      	bx	lr

00023358 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   23358:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2335a:	689b      	ldr	r3, [r3, #8]
   2335c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2335e:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   23362:	b118      	cbz	r0, 2336c <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   23364:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   23368:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2336c:	4770      	bx	lr

0002336e <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   2336e:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   23370:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   23372:	689b      	ldr	r3, [r3, #8]
   23374:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23376:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2337a:	b138      	cbz	r0, 2338c <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   2337c:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2337e:	2000      	movs	r0, #0
   23380:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23382:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23384:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23388:	601a      	str	r2, [r3, #0]
	return 0;
   2338a:	4770      	bx	lr
		return -1;
   2338c:	f04f 30ff 	mov.w	r0, #4294967295
}
   23390:	4770      	bx	lr

00023392 <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23392:	2200      	movs	r2, #0
	return dev->config->config_info;
   23394:	6803      	ldr	r3, [r0, #0]
{
   23396:	b082      	sub	sp, #8
	return config->uarte_regs;
   23398:	689b      	ldr	r3, [r3, #8]
{
   2339a:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   2339e:	681b      	ldr	r3, [r3, #0]
   233a0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   233a4:	f10d 0207 	add.w	r2, sp, #7
   233a8:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   233ac:	2201      	movs	r2, #1
   233ae:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   233b2:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   233b4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   233b8:	2900      	cmp	r1, #0
   233ba:	d0fb      	beq.n	233b4 <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   233bc:	60da      	str	r2, [r3, #12]
}
   233be:	b002      	add	sp, #8
   233c0:	4770      	bx	lr

000233c2 <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   233c2:	6803      	ldr	r3, [r0, #0]
{
   233c4:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   233c6:	689b      	ldr	r3, [r3, #8]
   233c8:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   233ca:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   233ce:	b1bb      	cbz	r3, 23400 <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   233d0:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   233d2:	68ab      	ldr	r3, [r5, #8]
   233d4:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   233d6:	2300      	movs	r3, #0
   233d8:	4290      	cmp	r0, r2
   233da:	bfa8      	it	ge
   233dc:	4610      	movge	r0, r2
   233de:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   233e2:	68aa      	ldr	r2, [r5, #8]
   233e4:	4283      	cmp	r3, r0
   233e6:	6892      	ldr	r2, [r2, #8]
   233e8:	db06      	blt.n	233f8 <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   233ea:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   233ec:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   233f0:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   233f4:	60a3      	str	r3, [r4, #8]
}
   233f6:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   233f8:	5cce      	ldrb	r6, [r1, r3]
   233fa:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   233fc:	3301      	adds	r3, #1
   233fe:	e7f0      	b.n	233e2 <uarte_nrfx_fifo_fill+0x20>
		return 0;
   23400:	4618      	mov	r0, r3
   23402:	e7f8      	b.n	233f6 <uarte_nrfx_fifo_fill+0x34>

00023404 <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   23404:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   23406:	689b      	ldr	r3, [r3, #8]
   23408:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2340a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2340e:	b143      	cbz	r3, 23422 <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   23410:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23412:	2000      	movs	r0, #0
   23414:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23418:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   2341a:	7b1b      	ldrb	r3, [r3, #12]
   2341c:	700b      	strb	r3, [r1, #0]
   2341e:	6010      	str	r0, [r2, #0]
   23420:	4770      	bx	lr
	int num_rx = 0;
   23422:	4618      	mov	r0, r3
}
   23424:	4770      	bx	lr

00023426 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   23426:	2100      	movs	r1, #0
	return dev->config->config_info;
   23428:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   2342a:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   2342c:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   2342e:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   23430:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   23432:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   23434:	f44f 7280 	mov.w	r2, #256	; 0x100
   23438:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2343c:	4770      	bx	lr

0002343e <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2343e:	2201      	movs	r2, #1
   23440:	6883      	ldr	r3, [r0, #8]
   23442:	689b      	ldr	r3, [r3, #8]
   23444:	739a      	strb	r2, [r3, #14]
}
   23446:	4770      	bx	lr

00023448 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   23448:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2344a:	689b      	ldr	r3, [r3, #8]
   2344c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2344e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   23452:	b118      	cbz	r0, 2345c <uarte_nrfx_irq_tx_ready_complete+0x14>
    return (bool)(p_reg->INTENSET & mask);
   23454:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   23458:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   2345c:	4770      	bx	lr

0002345e <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   2345e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   23460:	689b      	ldr	r3, [r3, #8]
   23462:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23464:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   23468:	3000      	adds	r0, #0
   2346a:	bf18      	it	ne
   2346c:	2001      	movne	r0, #1
   2346e:	4770      	bx	lr

00023470 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   23470:	2210      	movs	r2, #16
	return dev->config->config_info;
   23472:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   23474:	689b      	ldr	r3, [r3, #8]
   23476:	681b      	ldr	r3, [r3, #0]
   23478:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2347c:	4770      	bx	lr

0002347e <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   2347e:	2210      	movs	r2, #16
	return dev->config->config_info;
   23480:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   23482:	689b      	ldr	r3, [r3, #8]
   23484:	681b      	ldr	r3, [r3, #0]
   23486:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2348a:	4770      	bx	lr

0002348c <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   2348c:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   23490:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   23492:	689b      	ldr	r3, [r3, #8]
   23494:	681b      	ldr	r3, [r3, #0]
   23496:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2349a:	4770      	bx	lr

0002349c <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   2349c:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   234a0:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   234a2:	689b      	ldr	r3, [r3, #8]
   234a4:	681b      	ldr	r3, [r3, #0]
   234a6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   234aa:	4770      	bx	lr

000234ac <uarte_nrfx_irq_update>:
}
   234ac:	2001      	movs	r0, #1
   234ae:	4770      	bx	lr

000234b0 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   234b0:	6883      	ldr	r3, [r0, #8]
   234b2:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   234b4:	e9c3 1200 	strd	r1, r2, [r3]
}
   234b8:	4770      	bx	lr

000234ba <uarte_nrfx_irq_is_pending>:
{
   234ba:	b508      	push	{r3, lr}
	return dev->config->config_info;
   234bc:	6803      	ldr	r3, [r0, #0]
{
   234be:	4602      	mov	r2, r0
	return config->uarte_regs;
   234c0:	689b      	ldr	r3, [r3, #8]
   234c2:	6819      	ldr	r1, [r3, #0]
    return (bool)(p_reg->INTENSET & mask);
   234c4:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   234c8:	05db      	lsls	r3, r3, #23
   234ca:	d405      	bmi.n	234d8 <uarte_nrfx_irq_is_pending+0x1e>
   234cc:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   234d0:	f010 0010 	ands.w	r0, r0, #16
   234d4:	d106      	bne.n	234e4 <uarte_nrfx_irq_is_pending+0x2a>
}
   234d6:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   234d8:	f7ff ffb6 	bl	23448 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   234dc:	2800      	cmp	r0, #0
   234de:	d0f5      	beq.n	234cc <uarte_nrfx_irq_is_pending+0x12>
		||
   234e0:	2001      	movs	r0, #1
   234e2:	e7f8      	b.n	234d6 <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   234e4:	4610      	mov	r0, r2
   234e6:	f7ff ffba 	bl	2345e <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   234ea:	3000      	adds	r0, #0
   234ec:	bf18      	it	ne
   234ee:	2001      	movne	r0, #1
   234f0:	e7f1      	b.n	234d6 <uarte_nrfx_irq_is_pending+0x1c>

000234f2 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   234f2:	2000      	movs	r0, #0
   234f4:	4770      	bx	lr

000234f6 <z_errno>:
   234f6:	f7fb bdab 	b.w	1f050 <z_impl_z_errno>

000234fa <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   234fa:	4668      	mov	r0, sp
   234fc:	f020 0107 	bic.w	r1, r0, #7
   23500:	468d      	mov	sp, r1
   23502:	b501      	push	{r0, lr}
   23504:	f7ff fc93 	bl	22e2e <z_arch_isr_direct_header>
	bsd_os_trace_irq_handler();
   23508:	f7f0 f8be 	bl	13688 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2350c:	f7ea fc00 	bl	dd10 <_arch_isr_direct_pm>
   23510:	f7ea faea 	bl	dae8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   23514:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   23518:	4685      	mov	sp, r0
   2351a:	4770      	bx	lr

0002351c <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   2351c:	4668      	mov	r0, sp
   2351e:	f020 0107 	bic.w	r1, r0, #7
   23522:	468d      	mov	sp, r1
   23524:	b501      	push	{r0, lr}
   23526:	f7ff fc82 	bl	22e2e <z_arch_isr_direct_header>
	IPC_IRQHandler();
   2352a:	f7ee fc35 	bl	11d98 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2352e:	f7ea fbef 	bl	dd10 <_arch_isr_direct_pm>
   23532:	f7ea fad9 	bl	dae8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   23536:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2353a:	4685      	mov	sp, r0
   2353c:	4770      	bx	lr

0002353e <trace_task_create>:
{
   2353e:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   23540:	201d      	movs	r0, #29
   23542:	2200      	movs	r2, #0
   23544:	2106      	movs	r1, #6
   23546:	f7ea fbb1 	bl	dcac <z_arm_irq_priority_set>
}
   2354a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   2354e:	201d      	movs	r0, #29
   23550:	f7ea bb9c 	b.w	dc8c <z_arch_irq_enable>

00023554 <read_task_create>:
{
   23554:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   23556:	201c      	movs	r0, #28
   23558:	2200      	movs	r2, #0
   2355a:	2106      	movs	r1, #6
   2355c:	f7ea fba6 	bl	dcac <z_arm_irq_priority_set>
}
   23560:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   23564:	201c      	movs	r0, #28
   23566:	f7ea bb91 	b.w	dc8c <z_arch_irq_enable>

0002356a <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   2356a:	2000      	movs	r0, #0
   2356c:	4770      	bx	lr

0002356e <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   2356e:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   23572:	bf18      	it	ne
   23574:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   23576:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   23578:	bf48      	it	mi
   2357a:	f043 0308 	orrmi.w	r3, r3, #8
}
   2357e:	4618      	mov	r0, r3
   23580:	4770      	bx	lr

00023582 <z_to_nrf_family>:
	switch (z_family) {
   23582:	2803      	cmp	r0, #3
   23584:	d00f      	beq.n	235a6 <z_to_nrf_family+0x24>
   23586:	d808      	bhi.n	2359a <z_to_nrf_family+0x18>
   23588:	2801      	cmp	r0, #1
   2358a:	d00e      	beq.n	235aa <z_to_nrf_family+0x28>
   2358c:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   2358e:	bf08      	it	eq
   23590:	200a      	moveq	r0, #10
   23592:	bf18      	it	ne
   23594:	f06f 002e 	mvnne.w	r0, #46	; 0x2e
   23598:	4770      	bx	lr
	switch (z_family) {
   2359a:	2866      	cmp	r0, #102	; 0x66
   2359c:	d006      	beq.n	235ac <z_to_nrf_family+0x2a>
   2359e:	2867      	cmp	r0, #103	; 0x67
		return -EAFNOSUPPORT;
   235a0:	bf08      	it	eq
   235a2:	2001      	moveq	r0, #1
   235a4:	e7f5      	b.n	23592 <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   235a6:	2005      	movs	r0, #5
   235a8:	4770      	bx	lr
		return NRF_AF_INET;
   235aa:	2002      	movs	r0, #2
}
   235ac:	4770      	bx	lr

000235ae <z_to_nrf_protocol>:
	switch (proto) {
   235ae:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   235b2:	d01d      	beq.n	235f0 <z_to_nrf_protocol+0x42>
   235b4:	dc08      	bgt.n	235c8 <z_to_nrf_protocol+0x1a>
   235b6:	2806      	cmp	r0, #6
   235b8:	d01d      	beq.n	235f6 <z_to_nrf_protocol+0x48>
   235ba:	2811      	cmp	r0, #17
   235bc:	d01d      	beq.n	235fa <z_to_nrf_protocol+0x4c>
   235be:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   235c0:	bf18      	it	ne
   235c2:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   235c6:	4770      	bx	lr
	switch (proto) {
   235c8:	f240 2301 	movw	r3, #513	; 0x201
   235cc:	4298      	cmp	r0, r3
   235ce:	d015      	beq.n	235fc <z_to_nrf_protocol+0x4e>
   235d0:	dc06      	bgt.n	235e0 <z_to_nrf_protocol+0x32>
   235d2:	f240 1311 	movw	r3, #273	; 0x111
   235d6:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   235d8:	bf08      	it	eq
   235da:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   235de:	e7ef      	b.n	235c0 <z_to_nrf_protocol+0x12>
	switch (proto) {
   235e0:	f240 2302 	movw	r3, #514	; 0x202
   235e4:	4298      	cmp	r0, r3
   235e6:	d009      	beq.n	235fc <z_to_nrf_protocol+0x4e>
   235e8:	f240 2303 	movw	r3, #515	; 0x203
   235ec:	4298      	cmp	r0, r3
   235ee:	e7e7      	b.n	235c0 <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   235f0:	f44f 7082 	mov.w	r0, #260	; 0x104
   235f4:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   235f6:	2001      	movs	r0, #1
   235f8:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   235fa:	2002      	movs	r0, #2
}
   235fc:	4770      	bx	lr

000235fe <nrf91_bsdlib_socket_offload_init>:
}
   235fe:	2000      	movs	r0, #0
   23600:	4770      	bx	lr

00023602 <z_errno>:
   23602:	f7fb bd25 	b.w	1f050 <z_impl_z_errno>

00023606 <nrf91_socket_offload_freeaddrinfo>:
{
   23606:	b538      	push	{r3, r4, r5, lr}
   23608:	4604      	mov	r4, r0
	while (next != NULL) {
   2360a:	b904      	cbnz	r4, 2360e <nrf91_socket_offload_freeaddrinfo+0x8>
}
   2360c:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   2360e:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   23610:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   23612:	f000 fba6 	bl	23d62 <k_free>
		k_free(this);
   23616:	4620      	mov	r0, r4
   23618:	f000 fba3 	bl	23d62 <k_free>
		next = next->ai_next;
   2361c:	462c      	mov	r4, r5
   2361e:	e7f4      	b.n	2360a <nrf91_socket_offload_freeaddrinfo+0x4>

00023620 <z_to_nrf_addrinfo_hints>:
{
   23620:	b538      	push	{r3, r4, r5, lr}
   23622:	460c      	mov	r4, r1
   23624:	4605      	mov	r5, r0
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   23626:	2220      	movs	r2, #32
   23628:	2100      	movs	r1, #0
   2362a:	4620      	mov	r0, r4
   2362c:	f7ff fd4a 	bl	230c4 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   23630:	2300      	movs	r3, #0
   23632:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   23634:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   23636:	2b03      	cmp	r3, #3
   23638:	d003      	beq.n	23642 <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   2363a:	2b04      	cmp	r3, #4
   2363c:	bf08      	it	eq
   2363e:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   23642:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   23644:	88a8      	ldrh	r0, [r5, #4]
   23646:	f7ff ff9c 	bl	23582 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   2364a:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
   2364e:	d00b      	beq.n	23668 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   23650:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   23652:	68e8      	ldr	r0, [r5, #12]
   23654:	f7ff ffab 	bl	235ae <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   23658:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   2365c:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   2365e:	d003      	beq.n	23668 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   23660:	69a8      	ldr	r0, [r5, #24]
   23662:	b108      	cbz	r0, 23668 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   23664:	61a0      	str	r0, [r4, #24]
	return 0;
   23666:	2000      	movs	r0, #0
}
   23668:	bd38      	pop	{r3, r4, r5, pc}

0002366a <nrf91_socket_offload_send>:
{
   2366a:	b570      	push	{r4, r5, r6, lr}
   2366c:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   2366e:	4618      	mov	r0, r3
{
   23670:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   23672:	f7ff ff7c 	bl	2356e <z_to_nrf_flags>
   23676:	462a      	mov	r2, r5
   23678:	4603      	mov	r3, r0
   2367a:	4620      	mov	r0, r4
}
   2367c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   23680:	f7ee b94a 	b.w	11918 <nrf_send>

00023684 <nrf91_socket_offload_recv>:
{
   23684:	b570      	push	{r4, r5, r6, lr}
   23686:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   23688:	4618      	mov	r0, r3
{
   2368a:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   2368c:	f7ff ff6f 	bl	2356e <z_to_nrf_flags>
   23690:	462a      	mov	r2, r5
   23692:	4603      	mov	r3, r0
   23694:	4620      	mov	r0, r4
}
   23696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   2369a:	f7ee b973 	b.w	11984 <nrf_recv>

0002369e <nrf91_socket_offload_getsockopt>:
{
   2369e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   236a2:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   236a4:	2300      	movs	r3, #0
{
   236a6:	b086      	sub	sp, #24
   236a8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   236ac:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   236b0:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   236b4:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   236b8:	4607      	mov	r7, r0
   236ba:	460c      	mov	r4, r1
   236bc:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   236be:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   236c0:	d002      	beq.n	236c8 <nrf91_socket_offload_getsockopt+0x2a>
   236c2:	dc2b      	bgt.n	2371c <nrf91_socket_offload_getsockopt+0x7e>
   236c4:	2901      	cmp	r1, #1
   236c6:	d13d      	bne.n	23744 <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   236c8:	aa02      	add	r2, sp, #8
   236ca:	4631      	mov	r1, r6
   236cc:	4620      	mov	r0, r4
   236ce:	f7ec fa37 	bl	fb40 <z_to_nrf_optname>
   236d2:	2800      	cmp	r0, #0
   236d4:	db36      	blt.n	23744 <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   236d6:	2c01      	cmp	r4, #1
   236d8:	d128      	bne.n	2372c <nrf91_socket_offload_getsockopt+0x8e>
   236da:	2e14      	cmp	r6, #20
   236dc:	d126      	bne.n	2372c <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   236de:	2308      	movs	r3, #8
   236e0:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   236e2:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   236e4:	aa03      	add	r2, sp, #12
   236e6:	9200      	str	r2, [sp, #0]
   236e8:	4638      	mov	r0, r7
   236ea:	9a02      	ldr	r2, [sp, #8]
   236ec:	4621      	mov	r1, r4
   236ee:	f7ee f9c9 	bl	11a84 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   236f2:	4607      	mov	r7, r0
   236f4:	b970      	cbnz	r0, 23714 <nrf91_socket_offload_getsockopt+0x76>
   236f6:	b16d      	cbz	r5, 23714 <nrf91_socket_offload_getsockopt+0x76>
		*optlen = nrf_optlen;
   236f8:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   236fa:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   236fc:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   23700:	d108      	bne.n	23714 <nrf91_socket_offload_getsockopt+0x76>
			if (optname == SO_ERROR) {
   23702:	2e04      	cmp	r6, #4
   23704:	d114      	bne.n	23730 <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   23706:	6828      	ldr	r0, [r5, #0]
   23708:	f7ec f934 	bl	f974 <bsd_os_errno_set>
				*(int *)optval = errno;
   2370c:	f7ff ff79 	bl	23602 <z_errno>
   23710:	6803      	ldr	r3, [r0, #0]
   23712:	602b      	str	r3, [r5, #0]
}
   23714:	4638      	mov	r0, r7
   23716:	b006      	add	sp, #24
   23718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   2371c:	f240 2302 	movw	r3, #514	; 0x202
   23720:	4299      	cmp	r1, r3
   23722:	d0d1      	beq.n	236c8 <nrf91_socket_offload_getsockopt+0x2a>
   23724:	f240 2303 	movw	r3, #515	; 0x203
   23728:	4299      	cmp	r1, r3
   2372a:	e7cc      	b.n	236c6 <nrf91_socket_offload_getsockopt+0x28>
   2372c:	462b      	mov	r3, r5
   2372e:	e7d9      	b.n	236e4 <nrf91_socket_offload_getsockopt+0x46>
			} else if (optname == SO_RCVTIMEO) {
   23730:	2e14      	cmp	r6, #20
   23732:	d1ef      	bne.n	23714 <nrf91_socket_offload_getsockopt+0x76>
				((struct timeval *)optval)->tv_sec =
   23734:	9b04      	ldr	r3, [sp, #16]
   23736:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   23738:	9b05      	ldr	r3, [sp, #20]
   2373a:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   2373c:	2308      	movs	r3, #8
   2373e:	f8c8 3000 	str.w	r3, [r8]
   23742:	e7e7      	b.n	23714 <nrf91_socket_offload_getsockopt+0x76>
	errno = ENOPROTOOPT;
   23744:	f7ff ff5d 	bl	23602 <z_errno>
   23748:	232a      	movs	r3, #42	; 0x2a
	return retval;
   2374a:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   2374e:	6003      	str	r3, [r0, #0]
	return retval;
   23750:	e7e0      	b.n	23714 <nrf91_socket_offload_getsockopt+0x76>

00023752 <nrf91_socket_offload_poll>:
{
   23752:	b5f0      	push	{r4, r5, r6, r7, lr}
   23754:	b091      	sub	sp, #68	; 0x44
   23756:	4605      	mov	r5, r0
   23758:	460c      	mov	r4, r1
   2375a:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   2375c:	2100      	movs	r1, #0
   2375e:	2240      	movs	r2, #64	; 0x40
   23760:	4668      	mov	r0, sp
   23762:	f7ff fcaf 	bl	230c4 <memset>
	for (int i = 0; i < nfds; i++) {
   23766:	466a      	mov	r2, sp
   23768:	2100      	movs	r1, #0
		if (fds[i].events & POLLIN) {
   2376a:	1d2f      	adds	r7, r5, #4
	for (int i = 0; i < nfds; i++) {
   2376c:	42a1      	cmp	r1, r4
   2376e:	db0c      	blt.n	2378a <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   23770:	4632      	mov	r2, r6
   23772:	4621      	mov	r1, r4
   23774:	4668      	mov	r0, sp
   23776:	f7ee f9a5 	bl	11ac4 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   2377a:	2200      	movs	r2, #0
   2377c:	462b      	mov	r3, r5
		fds[i].revents = 0;
   2377e:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   23780:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   23782:	42a2      	cmp	r2, r4
   23784:	db1a      	blt.n	237bc <nrf91_socket_offload_poll+0x6a>
}
   23786:	b011      	add	sp, #68	; 0x44
   23788:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   2378a:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   2378e:	f837 0031 	ldrh.w	r0, [r7, r1, lsl #3]
		tmp[i].handle = fds[i].fd;
   23792:	6013      	str	r3, [r2, #0]
		if (fds[i].events & POLLIN) {
   23794:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   23796:	bf48      	it	mi
   23798:	8893      	ldrhmi	r3, [r2, #4]
	for (int i = 0; i < nfds; i++) {
   2379a:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   2379e:	bf44      	itt	mi
   237a0:	f043 0301 	orrmi.w	r3, r3, #1
   237a4:	8093      	strhmi	r3, [r2, #4]
		if (fds[i].events & POLLOUT) {
   237a6:	0743      	lsls	r3, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   237a8:	bf48      	it	mi
   237aa:	8893      	ldrhmi	r3, [r2, #4]
   237ac:	f102 0208 	add.w	r2, r2, #8
   237b0:	bf44      	itt	mi
   237b2:	f043 0302 	orrmi.w	r3, r3, #2
   237b6:	f822 3c04 	strhmi.w	r3, [r2, #-4]
   237ba:	e7d7      	b.n	2376c <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   237bc:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   237c0:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   237c2:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   237c4:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   237c6:	bf48      	it	mi
   237c8:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   237ca:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   237cc:	bf48      	it	mi
   237ce:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   237d0:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   237d4:	bf44      	itt	mi
   237d6:	f045 0504 	orrmi.w	r5, r5, #4
   237da:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   237dc:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   237de:	bf48      	it	mi
   237e0:	88dd      	ldrhmi	r5, [r3, #6]
   237e2:	f103 0308 	add.w	r3, r3, #8
   237e6:	bf44      	itt	mi
   237e8:	f045 0508 	orrmi.w	r5, r5, #8
   237ec:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   237f0:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   237f2:	bf42      	ittt	mi
   237f4:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   237f8:	f045 0520 	orrmi.w	r5, r5, #32
   237fc:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   23800:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   23802:	bf42      	ittt	mi
   23804:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   23808:	f041 0110 	orrmi.w	r1, r1, #16
   2380c:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   23810:	e7b7      	b.n	23782 <nrf91_socket_offload_poll+0x30>

00023812 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   23812:	f7ee b8e3 	b.w	119dc <nrf_listen>

00023816 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   23816:	f7ee b855 	b.w	118c4 <nrf_close>

0002381a <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   2381a:	2903      	cmp	r1, #3
{
   2381c:	b508      	push	{r3, lr}
	switch (cmd) {
   2381e:	d00b      	beq.n	23838 <nrf91_socket_offload_fcntl+0x1e>
   23820:	2904      	cmp	r1, #4
   23822:	d111      	bne.n	23848 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   23824:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   23826:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   2382a:	d10d      	bne.n	23848 <nrf91_socket_offload_fcntl+0x2e>
}
   2382c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   23830:	1392      	asrs	r2, r2, #14
   23832:	2101      	movs	r1, #1
   23834:	f7ee b948 	b.w	11ac8 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   23838:	2200      	movs	r2, #0
   2383a:	2102      	movs	r1, #2
   2383c:	f7ee f944 	bl	11ac8 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   23840:	0380      	lsls	r0, r0, #14
   23842:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   23846:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   23848:	f7ff fedb 	bl	23602 <z_errno>
   2384c:	2316      	movs	r3, #22
   2384e:	6003      	str	r3, [r0, #0]
	return retval;
   23850:	f04f 30ff 	mov.w	r0, #4294967295
   23854:	e7f7      	b.n	23846 <nrf91_socket_offload_fcntl+0x2c>

00023856 <nrf91_socket_offload_recvfrom>:
{
   23856:	b5f0      	push	{r4, r5, r6, r7, lr}
   23858:	4605      	mov	r5, r0
   2385a:	b08d      	sub	sp, #52	; 0x34
   2385c:	4618      	mov	r0, r3
   2385e:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   23862:	4617      	mov	r7, r2
	if (from == NULL) {
   23864:	f7ff fe83 	bl	2356e <z_to_nrf_flags>
   23868:	4603      	mov	r3, r0
   2386a:	b94c      	cbnz	r4, 23880 <nrf91_socket_offload_recvfrom+0x2a>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2386c:	4628      	mov	r0, r5
   2386e:	e9cd 4400 	strd	r4, r4, [sp]
   23872:	463a      	mov	r2, r7
   23874:	f7ee f86a 	bl	1194c <nrf_recvfrom>
   23878:	4605      	mov	r5, r0
}
   2387a:	4628      	mov	r0, r5
   2387c:	b00d      	add	sp, #52	; 0x34
   2387e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   23880:	2224      	movs	r2, #36	; 0x24
   23882:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   23884:	aa02      	add	r2, sp, #8
   23886:	9201      	str	r2, [sp, #4]
   23888:	aa03      	add	r2, sp, #12
   2388a:	9200      	str	r2, [sp, #0]
   2388c:	4628      	mov	r0, r5
   2388e:	463a      	mov	r2, r7
   23890:	f7ee f85c 	bl	1194c <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   23894:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   23896:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   23898:	2b02      	cmp	r3, #2
   2389a:	d109      	bne.n	238b0 <nrf91_socket_offload_recvfrom+0x5a>
	ptr->sin_port = nrf_in->sin_port;
   2389c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   238a0:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   238a2:	2301      	movs	r3, #1
   238a4:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   238a6:	9b06      	ldr	r3, [sp, #24]
   238a8:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   238aa:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   238ac:	6033      	str	r3, [r6, #0]
	return retval;
   238ae:	e7e4      	b.n	2387a <nrf91_socket_offload_recvfrom+0x24>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   238b0:	2b0a      	cmp	r3, #10
   238b2:	d1e2      	bne.n	2387a <nrf91_socket_offload_recvfrom+0x24>
	ptr->sin6_port = nrf_in->sin6_port;
   238b4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	ptr->sin6_family = AF_INET6;
   238b8:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   238ba:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   238bc:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   238be:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   238c0:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   238c4:	a907      	add	r1, sp, #28
   238c6:	f7ff fbd3 	bl	23070 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   238ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   238cc:	7523      	strb	r3, [r4, #20]
			*fromlen = sizeof(struct sockaddr_in6);
   238ce:	2318      	movs	r3, #24
   238d0:	e7ec      	b.n	238ac <nrf91_socket_offload_recvfrom+0x56>

000238d2 <nrf91_socket_offload_connect>:
{
   238d2:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   238d4:	880b      	ldrh	r3, [r1, #0]
{
   238d6:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   238d8:	2b01      	cmp	r3, #1
{
   238da:	4606      	mov	r6, r0
   238dc:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   238de:	d10e      	bne.n	238fe <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   238e0:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   238e2:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   238e4:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   238e8:	2302      	movs	r3, #2
   238ea:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   238ec:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   238ee:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   238f2:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   238f4:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   238f6:	f7ee f85f 	bl	119b8 <nrf_connect>
}
   238fa:	b00a      	add	sp, #40	; 0x28
   238fc:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   238fe:	2b02      	cmp	r3, #2
   23900:	d112      	bne.n	23928 <nrf91_socket_offload_connect+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   23902:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   23904:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   23906:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   2390a:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   2390c:	2210      	movs	r2, #16
   2390e:	3104      	adds	r1, #4
   23910:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   23912:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   23914:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   23918:	f7ff fbaa 	bl	23070 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   2391c:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   2391e:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   23920:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   23922:	a901      	add	r1, sp, #4
   23924:	4630      	mov	r0, r6
   23926:	e7e6      	b.n	238f6 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   23928:	f7ee f846 	bl	119b8 <nrf_connect>
		if (retval < 0) {
   2392c:	2800      	cmp	r0, #0
   2392e:	dae4      	bge.n	238fa <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   23930:	f7ff fe67 	bl	23602 <z_errno>
   23934:	2323      	movs	r3, #35	; 0x23
   23936:	6003      	str	r3, [r0, #0]
   23938:	f04f 30ff 	mov.w	r0, #4294967295
   2393c:	e7dd      	b.n	238fa <nrf91_socket_offload_connect+0x28>

0002393e <nrf91_socket_offload_socket>:
{
   2393e:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   23940:	b280      	uxth	r0, r0
   23942:	f7ff fe1e 	bl	23582 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   23946:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
	family = z_to_nrf_family(family);
   2394a:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   2394c:	d106      	bne.n	2395c <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   2394e:	f7ff fe58 	bl	23602 <z_errno>
   23952:	232f      	movs	r3, #47	; 0x2f
		errno = EPROTONOSUPPORT;
   23954:	6003      	str	r3, [r0, #0]
}
   23956:	f04f 30ff 	mov.w	r0, #4294967295
   2395a:	bd10      	pop	{r4, pc}
	switch (socktype) {
   2395c:	2903      	cmp	r1, #3
   2395e:	d003      	beq.n	23968 <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   23960:	2904      	cmp	r1, #4
   23962:	bf08      	it	eq
   23964:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   23968:	4610      	mov	r0, r2
   2396a:	f7ff fe20 	bl	235ae <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   2396e:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	proto = z_to_nrf_protocol(proto);
   23972:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   23974:	d103      	bne.n	2397e <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   23976:	f7ff fe44 	bl	23602 <z_errno>
   2397a:	232b      	movs	r3, #43	; 0x2b
   2397c:	e7ea      	b.n	23954 <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   2397e:	4620      	mov	r0, r4
}
   23980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   23984:	f7ed bf8c 	b.w	118a0 <nrf_socket>

00023988 <nrf91_socket_offload_accept>:
{
   23988:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   2398a:	2708      	movs	r7, #8
{
   2398c:	b085      	sub	sp, #20
   2398e:	460c      	mov	r4, r1
   23990:	4616      	mov	r6, r2
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   23992:	eb0d 0107 	add.w	r1, sp, r7
   23996:	aa01      	add	r2, sp, #4
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   23998:	9701      	str	r7, [sp, #4]
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   2399a:	f7ee f82f 	bl	119fc <nrf_accept>
	if (retval < 0) {
   2399e:	1e05      	subs	r5, r0, #0
   239a0:	db23      	blt.n	239ea <nrf91_socket_offload_accept+0x62>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   239a2:	9b03      	ldr	r3, [sp, #12]
   239a4:	2b02      	cmp	r3, #2
   239a6:	d10a      	bne.n	239be <nrf91_socket_offload_accept+0x36>
	ptr->sin_port = nrf_in->sin_port;
   239a8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   239ac:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   239ae:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   239b0:	2301      	movs	r3, #1
   239b2:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   239b4:	9b05      	ldr	r3, [sp, #20]
   239b6:	6063      	str	r3, [r4, #4]
}
   239b8:	4628      	mov	r0, r5
   239ba:	b005      	add	sp, #20
   239bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   239be:	2b0a      	cmp	r3, #10
   239c0:	d10f      	bne.n	239e2 <nrf91_socket_offload_accept+0x5a>
		*addrlen = sizeof(struct sockaddr_in6);
   239c2:	2318      	movs	r3, #24
   239c4:	6033      	str	r3, [r6, #0]
	ptr->sin6_port = nrf_in->sin6_port;
   239c6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	ptr->sin6_family = AF_INET6;
   239ca:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   239cc:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   239ce:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   239d0:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   239d2:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   239d6:	a906      	add	r1, sp, #24
   239d8:	f7ff fb4a 	bl	23070 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   239dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   239de:	7523      	strb	r3, [r4, #20]
   239e0:	e7ea      	b.n	239b8 <nrf91_socket_offload_accept+0x30>
	errno = ENOTSUP;
   239e2:	f7ff fe0e 	bl	23602 <z_errno>
   239e6:	2323      	movs	r3, #35	; 0x23
   239e8:	6003      	str	r3, [r0, #0]
		return -1;
   239ea:	f04f 35ff 	mov.w	r5, #4294967295
   239ee:	e7e3      	b.n	239b8 <nrf91_socket_offload_accept+0x30>

000239f0 <nrf91_socket_offload_getaddrinfo>:
{
   239f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   239f4:	4614      	mov	r4, r2
   239f6:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   239f8:	2100      	movs	r1, #0
{
   239fa:	b093      	sub	sp, #76	; 0x4c
   239fc:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   239fe:	2220      	movs	r2, #32
   23a00:	a802      	add	r0, sp, #8
{
   23a02:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   23a04:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   23a06:	f7ff fb5d 	bl	230c4 <memset>
	if (hints != NULL) {
   23a0a:	b194      	cbz	r4, 23a32 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   23a0c:	a902      	add	r1, sp, #8
   23a0e:	4620      	mov	r0, r4
   23a10:	f7ff fe06 	bl	23620 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   23a14:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
   23a18:	f000 80bf 	beq.w	23b9a <nrf91_socket_offload_getaddrinfo+0x1aa>
		} else if (error == -EAFNOSUPPORT) {
   23a1c:	302f      	adds	r0, #47	; 0x2f
   23a1e:	f000 80bf 	beq.w	23ba0 <nrf91_socket_offload_getaddrinfo+0x1b0>
		if (hints->ai_next != NULL) {
   23a22:	69e0      	ldr	r0, [r4, #28]
   23a24:	b120      	cbz	r0, 23a30 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   23a26:	ac0a      	add	r4, sp, #40	; 0x28
   23a28:	4621      	mov	r1, r4
   23a2a:	f7ff fdf9 	bl	23620 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   23a2e:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   23a30:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   23a32:	4631      	mov	r1, r6
   23a34:	4628      	mov	r0, r5
   23a36:	ab01      	add	r3, sp, #4
   23a38:	4622      	mov	r2, r4
   23a3a:	f7ee f83f 	bl	11abc <nrf_getaddrinfo>
	*res = NULL;
   23a3e:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   23a40:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   23a42:	f8c8 7000 	str.w	r7, [r8]
		return AF_INET6;
   23a46:	f04f 0902 	mov.w	r9, #2
	while ((retval == 0) && (next_nrf_res != NULL)) {
   23a4a:	4605      	mov	r5, r0
   23a4c:	2800      	cmp	r0, #0
   23a4e:	d04a      	beq.n	23ae6 <nrf91_socket_offload_getaddrinfo+0xf6>
		nrf91_socket_offload_freeaddrinfo(*res);
   23a50:	f8d8 0000 	ldr.w	r0, [r8]
   23a54:	f7ff fdd7 	bl	23606 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   23a58:	2300      	movs	r3, #0
   23a5a:	f8c8 3000 	str.w	r3, [r8]
   23a5e:	e044      	b.n	23aea <nrf91_socket_offload_getaddrinfo+0xfa>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   23a60:	2020      	movs	r0, #32
   23a62:	f7fb fe1f 	bl	1f6a4 <k_malloc>
		if (next_z_res == NULL) {
   23a66:	4604      	mov	r4, r0
   23a68:	2800      	cmp	r0, #0
   23a6a:	f000 8091 	beq.w	23b90 <nrf91_socket_offload_getaddrinfo+0x1a0>
	family = nrf_to_z_family(nrf_in->ai_family);
   23a6e:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   23a70:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   23a72:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   23a74:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   23a78:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   23a7a:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   23a7c:	d03c      	beq.n	23af8 <nrf91_socket_offload_getaddrinfo+0x108>
   23a7e:	dc09      	bgt.n	23a94 <nrf91_socket_offload_getaddrinfo+0xa4>
   23a80:	2a01      	cmp	r2, #1
   23a82:	d03b      	beq.n	23afc <nrf91_socket_offload_getaddrinfo+0x10c>
   23a84:	2a02      	cmp	r2, #2
   23a86:	d03b      	beq.n	23b00 <nrf91_socket_offload_getaddrinfo+0x110>
			k_free(next_z_res);
   23a88:	4620      	mov	r0, r4
   23a8a:	f000 f96a 	bl	23d62 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   23a8e:	f06f 0508 	mvn.w	r5, #8
   23a92:	e7dd      	b.n	23a50 <nrf91_socket_offload_getaddrinfo+0x60>
	switch (nrf_family) {
   23a94:	2a0a      	cmp	r2, #10
   23a96:	d035      	beq.n	23b04 <nrf91_socket_offload_getaddrinfo+0x114>
   23a98:	2a66      	cmp	r2, #102	; 0x66
   23a9a:	d1f5      	bne.n	23a88 <nrf91_socket_offload_getaddrinfo+0x98>
		return AF_LTE;
   23a9c:	4613      	mov	r3, r2
	z_out->ai_family = family;
   23a9e:	6063      	str	r3, [r4, #4]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   23aa0:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   23aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   23aa6:	d04e      	beq.n	23b46 <nrf91_socket_offload_getaddrinfo+0x156>
   23aa8:	dc2e      	bgt.n	23b08 <nrf91_socket_offload_getaddrinfo+0x118>
   23aaa:	2b01      	cmp	r3, #1
   23aac:	d050      	beq.n	23b50 <nrf91_socket_offload_getaddrinfo+0x160>
   23aae:	2b02      	cmp	r3, #2
   23ab0:	d04c      	beq.n	23b4c <nrf91_socket_offload_getaddrinfo+0x15c>
   23ab2:	2b00      	cmp	r3, #0
   23ab4:	d130      	bne.n	23b18 <nrf91_socket_offload_getaddrinfo+0x128>
	if (nrf_in->ai_family == NRF_AF_INET) {
   23ab6:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   23ab8:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   23aba:	d14b      	bne.n	23b54 <nrf91_socket_offload_getaddrinfo+0x164>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   23abc:	2008      	movs	r0, #8
   23abe:	f7fb fdf1 	bl	1f6a4 <k_malloc>
   23ac2:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   23ac4:	2800      	cmp	r0, #0
   23ac6:	d060      	beq.n	23b8a <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   23ac8:	2308      	movs	r3, #8
   23aca:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   23acc:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   23ace:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   23ad0:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   23ad2:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   23ad4:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   23ad6:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   23ad8:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   23ada:	2f00      	cmp	r7, #0
   23adc:	d15b      	bne.n	23b96 <nrf91_socket_offload_getaddrinfo+0x1a6>
			*res = next_z_res;
   23ade:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   23ae2:	4627      	mov	r7, r4
   23ae4:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   23ae6:	2e00      	cmp	r6, #0
   23ae8:	d1ba      	bne.n	23a60 <nrf91_socket_offload_getaddrinfo+0x70>
	nrf_freeaddrinfo(nrf_res);
   23aea:	9801      	ldr	r0, [sp, #4]
   23aec:	f7ed ffe8 	bl	11ac0 <nrf_freeaddrinfo>
}
   23af0:	4628      	mov	r0, r5
   23af2:	b013      	add	sp, #76	; 0x4c
   23af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return AF_PACKET;
   23af8:	2303      	movs	r3, #3
   23afa:	e7d0      	b.n	23a9e <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_LOCAL;
   23afc:	2367      	movs	r3, #103	; 0x67
   23afe:	e7ce      	b.n	23a9e <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET;
   23b00:	2301      	movs	r3, #1
   23b02:	e7cc      	b.n	23a9e <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET6;
   23b04:	2302      	movs	r3, #2
   23b06:	e7ca      	b.n	23a9e <nrf91_socket_offload_getaddrinfo+0xae>
	switch (proto) {
   23b08:	f240 2101 	movw	r1, #513	; 0x201
   23b0c:	428b      	cmp	r3, r1
   23b0e:	d0d2      	beq.n	23ab6 <nrf91_socket_offload_getaddrinfo+0xc6>
   23b10:	dc0d      	bgt.n	23b2e <nrf91_socket_offload_getaddrinfo+0x13e>
   23b12:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   23b16:	d013      	beq.n	23b40 <nrf91_socket_offload_getaddrinfo+0x150>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   23b18:	f06f 032a 	mvn.w	r3, #42	; 0x2a
   23b1c:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   23b1e:	2300      	movs	r3, #0
   23b20:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   23b22:	4620      	mov	r0, r4
   23b24:	f000 f91d 	bl	23d62 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   23b28:	f06f 0506 	mvn.w	r5, #6
   23b2c:	e790      	b.n	23a50 <nrf91_socket_offload_getaddrinfo+0x60>
	switch (proto) {
   23b2e:	f240 2102 	movw	r1, #514	; 0x202
   23b32:	428b      	cmp	r3, r1
   23b34:	d0bf      	beq.n	23ab6 <nrf91_socket_offload_getaddrinfo+0xc6>
   23b36:	f240 2103 	movw	r1, #515	; 0x203
   23b3a:	428b      	cmp	r3, r1
   23b3c:	d0bb      	beq.n	23ab6 <nrf91_socket_offload_getaddrinfo+0xc6>
   23b3e:	e7eb      	b.n	23b18 <nrf91_socket_offload_getaddrinfo+0x128>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   23b40:	f240 1311 	movw	r3, #273	; 0x111
   23b44:	e7b7      	b.n	23ab6 <nrf91_socket_offload_getaddrinfo+0xc6>
   23b46:	f44f 7381 	mov.w	r3, #258	; 0x102
   23b4a:	e7b4      	b.n	23ab6 <nrf91_socket_offload_getaddrinfo+0xc6>
   23b4c:	2311      	movs	r3, #17
   23b4e:	e7b2      	b.n	23ab6 <nrf91_socket_offload_getaddrinfo+0xc6>
   23b50:	2306      	movs	r3, #6
   23b52:	e7b0      	b.n	23ab6 <nrf91_socket_offload_getaddrinfo+0xc6>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   23b54:	2a0a      	cmp	r2, #10
   23b56:	d1e4      	bne.n	23b22 <nrf91_socket_offload_getaddrinfo+0x132>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   23b58:	2018      	movs	r0, #24
   23b5a:	f7fb fda3 	bl	1f6a4 <k_malloc>
   23b5e:	4682      	mov	sl, r0
   23b60:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   23b62:	b190      	cbz	r0, 23b8a <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   23b64:	2318      	movs	r3, #24
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   23b66:	2210      	movs	r2, #16
			(const struct nrf_sockaddr_in6 *)nrf_in->ai_addr);
   23b68:	f8d6 b014 	ldr.w	fp, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   23b6c:	6123      	str	r3, [r4, #16]
	ptr->sin6_port = nrf_in->sin6_port;
   23b6e:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   23b72:	eb0b 0102 	add.w	r1, fp, r2
	ptr->sin6_port = nrf_in->sin6_port;
   23b76:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   23b78:	f820 9b04 	strh.w	r9, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   23b7c:	f7ff fa78 	bl	23070 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   23b80:	f8db 3020 	ldr.w	r3, [fp, #32]
   23b84:	f88a 3014 	strb.w	r3, [sl, #20]
		} else if (error == -EAFNOSUPPORT) {
   23b88:	e7a7      	b.n	23ada <nrf91_socket_offload_getaddrinfo+0xea>
			k_free(next_z_res);
   23b8a:	4620      	mov	r0, r4
   23b8c:	f000 f8e9 	bl	23d62 <k_free>
			retval = DNS_EAI_MEMORY;
   23b90:	f06f 0509 	mvn.w	r5, #9
   23b94:	e75c      	b.n	23a50 <nrf91_socket_offload_getaddrinfo+0x60>
			latest_z_res->ai_next = next_z_res;
   23b96:	61fc      	str	r4, [r7, #28]
   23b98:	e7a3      	b.n	23ae2 <nrf91_socket_offload_getaddrinfo+0xf2>
			return DNS_EAI_SOCKTYPE;
   23b9a:	f06f 0506 	mvn.w	r5, #6
   23b9e:	e7a7      	b.n	23af0 <nrf91_socket_offload_getaddrinfo+0x100>
			return DNS_EAI_ADDRFAMILY;
   23ba0:	f06f 0508 	mvn.w	r5, #8
   23ba4:	e7a4      	b.n	23af0 <nrf91_socket_offload_getaddrinfo+0x100>

00023ba6 <nrf91_socket_offload_setsockopt>:
{
   23ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   23baa:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   23bae:	b086      	sub	sp, #24
   23bb0:	4680      	mov	r8, r0
   23bb2:	460c      	mov	r4, r1
   23bb4:	4617      	mov	r7, r2
   23bb6:	461d      	mov	r5, r3
   23bb8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   23bba:	d002      	beq.n	23bc2 <nrf91_socket_offload_setsockopt+0x1c>
   23bbc:	dc1c      	bgt.n	23bf8 <nrf91_socket_offload_setsockopt+0x52>
   23bbe:	2901      	cmp	r1, #1
   23bc0:	d122      	bne.n	23c08 <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   23bc2:	aa03      	add	r2, sp, #12
   23bc4:	4639      	mov	r1, r7
   23bc6:	4620      	mov	r0, r4
   23bc8:	f7eb ffba 	bl	fb40 <z_to_nrf_optname>
   23bcc:	2800      	cmp	r0, #0
   23bce:	db1b      	blt.n	23c08 <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   23bd0:	2c01      	cmp	r4, #1
   23bd2:	d107      	bne.n	23be4 <nrf91_socket_offload_setsockopt+0x3e>
   23bd4:	2f14      	cmp	r7, #20
   23bd6:	d105      	bne.n	23be4 <nrf91_socket_offload_setsockopt+0x3e>
		nrf_optlen = sizeof(struct nrf_timeval);
   23bd8:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   23bda:	682b      	ldr	r3, [r5, #0]
   23bdc:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   23bde:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   23be0:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   23be2:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   23be4:	9600      	str	r6, [sp, #0]
   23be6:	462b      	mov	r3, r5
   23be8:	9a03      	ldr	r2, [sp, #12]
   23bea:	4621      	mov	r1, r4
   23bec:	4640      	mov	r0, r8
   23bee:	f7ed ff2d 	bl	11a4c <nrf_setsockopt>
}
   23bf2:	b006      	add	sp, #24
   23bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   23bf8:	f240 2302 	movw	r3, #514	; 0x202
   23bfc:	4299      	cmp	r1, r3
   23bfe:	d0e0      	beq.n	23bc2 <nrf91_socket_offload_setsockopt+0x1c>
   23c00:	f240 2303 	movw	r3, #515	; 0x203
   23c04:	4299      	cmp	r1, r3
   23c06:	e7db      	b.n	23bc0 <nrf91_socket_offload_setsockopt+0x1a>
	errno = ENOPROTOOPT;
   23c08:	f7ff fcfb 	bl	23602 <z_errno>
   23c0c:	232a      	movs	r3, #42	; 0x2a
   23c0e:	6003      	str	r3, [r0, #0]
   23c10:	f04f 30ff 	mov.w	r0, #4294967295
   23c14:	e7ed      	b.n	23bf2 <nrf91_socket_offload_setsockopt+0x4c>

00023c16 <nrf91_socket_offload_sendto>:
{
   23c16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23c1a:	b08d      	sub	sp, #52	; 0x34
   23c1c:	9c14      	ldr	r4, [sp, #80]	; 0x50
   23c1e:	4605      	mov	r5, r0
   23c20:	460e      	mov	r6, r1
   23c22:	4617      	mov	r7, r2
   23c24:	4698      	mov	r8, r3
	if (to == NULL) {
   23c26:	b96c      	cbnz	r4, 23c44 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   23c28:	4618      	mov	r0, r3
   23c2a:	f7ff fca0 	bl	2356e <z_to_nrf_flags>
   23c2e:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   23c32:	4603      	mov	r3, r0
   23c34:	463a      	mov	r2, r7
   23c36:	4631      	mov	r1, r6
   23c38:	4628      	mov	r0, r5
   23c3a:	f7ed fe51 	bl	118e0 <nrf_sendto>
}
   23c3e:	b00d      	add	sp, #52	; 0x34
   23c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   23c44:	8823      	ldrh	r3, [r4, #0]
   23c46:	2b01      	cmp	r3, #1
   23c48:	d110      	bne.n	23c6c <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   23c4a:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   23c4c:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   23c4e:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   23c52:	2302      	movs	r3, #2
   23c54:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   23c56:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   23c58:	4640      	mov	r0, r8
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   23c5a:	f88d 100c 	strb.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   23c5e:	9306      	str	r3, [sp, #24]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   23c60:	f7ff fc85 	bl	2356e <z_to_nrf_flags>
   23c64:	9101      	str	r1, [sp, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   23c66:	ab03      	add	r3, sp, #12
   23c68:	9300      	str	r3, [sp, #0]
   23c6a:	e7e2      	b.n	23c32 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   23c6c:	2b02      	cmp	r3, #2
   23c6e:	d115      	bne.n	23c9c <nrf91_socket_offload_sendto+0x86>
	nrf_out->sin6_port = ptr->sin6_port;
   23c70:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   23c72:	f04f 0924 	mov.w	r9, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   23c76:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin6_family = NRF_AF_INET6;
   23c7a:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   23c7c:	2210      	movs	r2, #16
   23c7e:	1d21      	adds	r1, r4, #4
   23c80:	a807      	add	r0, sp, #28
	nrf_out->sin6_family = NRF_AF_INET6;
   23c82:	9304      	str	r3, [sp, #16]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   23c84:	f88d 900c 	strb.w	r9, [sp, #12]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   23c88:	f7ff f9f2 	bl	23070 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   23c8c:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   23c8e:	4640      	mov	r0, r8
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   23c90:	930b      	str	r3, [sp, #44]	; 0x2c
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   23c92:	f7ff fc6c 	bl	2356e <z_to_nrf_flags>
   23c96:	f8cd 9004 	str.w	r9, [sp, #4]
   23c9a:	e7e4      	b.n	23c66 <nrf91_socket_offload_sendto+0x50>
	errno = ENOTSUP;
   23c9c:	f7ff fcb1 	bl	23602 <z_errno>
   23ca0:	2323      	movs	r3, #35	; 0x23
   23ca2:	6003      	str	r3, [r0, #0]
	return retval;
   23ca4:	f04f 30ff 	mov.w	r0, #4294967295
   23ca8:	e7c9      	b.n	23c3e <nrf91_socket_offload_sendto+0x28>

00023caa <nrf91_socket_offload_bind>:
{
   23caa:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   23cac:	880b      	ldrh	r3, [r1, #0]
{
   23cae:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   23cb0:	2b01      	cmp	r3, #1
{
   23cb2:	4606      	mov	r6, r0
   23cb4:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   23cb6:	d10e      	bne.n	23cd6 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   23cb8:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   23cba:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   23cbc:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   23cc0:	2302      	movs	r3, #2
   23cc2:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   23cc4:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   23cc6:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   23cca:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   23ccc:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   23cce:	f7ed feab 	bl	11a28 <nrf_bind>
}
   23cd2:	b00a      	add	sp, #40	; 0x28
   23cd4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   23cd6:	2b02      	cmp	r3, #2
   23cd8:	d112      	bne.n	23d00 <nrf91_socket_offload_bind+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   23cda:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   23cdc:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   23cde:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   23ce2:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   23ce4:	2210      	movs	r2, #16
   23ce6:	3104      	adds	r1, #4
   23ce8:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   23cea:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   23cec:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   23cf0:	f7ff f9be 	bl	23070 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   23cf4:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   23cf6:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   23cf8:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   23cfa:	a901      	add	r1, sp, #4
   23cfc:	4630      	mov	r0, r6
   23cfe:	e7e6      	b.n	23cce <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   23d00:	f7ff fc7f 	bl	23602 <z_errno>
   23d04:	2323      	movs	r3, #35	; 0x23
   23d06:	6003      	str	r3, [r0, #0]
   23d08:	f04f 30ff 	mov.w	r0, #4294967295
   23d0c:	e7e1      	b.n	23cd2 <nrf91_socket_offload_bind+0x28>

00023d0e <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   23d0e:	6843      	ldr	r3, [r0, #4]
   23d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   23d12:	b103      	cbz	r3, 23d16 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   23d14:	4718      	bx	r3
}
   23d16:	4770      	bx	lr

00023d18 <response_handler>:
	write_uart_string(response);
   23d18:	4608      	mov	r0, r1
   23d1a:	f7ec b805 	b.w	fd28 <write_uart_string>

00023d1e <z_arch_system_halt>:
	__asm__ volatile(
   23d1e:	f04f 0220 	mov.w	r2, #32
   23d22:	f3ef 8311 	mrs	r3, BASEPRI
   23d26:	f382 8811 	msr	BASEPRI, r2
   23d2a:	f3bf 8f6f 	isb	sy
	}
   23d2e:	e7fe      	b.n	23d2e <z_arch_system_halt+0x10>

00023d30 <k_sys_fatal_error_handler>:
{
   23d30:	b508      	push	{r3, lr}
	z_arch_system_halt(reason);
   23d32:	f7ff fff4 	bl	23d1e <z_arch_system_halt>

00023d36 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   23d36:	f7ff b877 	b.w	22e28 <z_clock_idle_exit>

00023d3a <k_mem_pool_malloc>:
{
   23d3a:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   23d3c:	2404      	movs	r4, #4
   23d3e:	190a      	adds	r2, r1, r4
   23d40:	d204      	bcs.n	23d4c <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   23d42:	2300      	movs	r3, #0
   23d44:	4669      	mov	r1, sp
   23d46:	f7fb fbe1 	bl	1f50c <k_mem_pool_alloc>
   23d4a:	b110      	cbz	r0, 23d52 <k_mem_pool_malloc+0x18>
		return NULL;
   23d4c:	2000      	movs	r0, #0
}
   23d4e:	b002      	add	sp, #8
   23d50:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   23d52:	4622      	mov	r2, r4
   23d54:	a901      	add	r1, sp, #4
   23d56:	9800      	ldr	r0, [sp, #0]
   23d58:	f7ff f98a 	bl	23070 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   23d5c:	9800      	ldr	r0, [sp, #0]
   23d5e:	3004      	adds	r0, #4
   23d60:	e7f5      	b.n	23d4e <k_mem_pool_malloc+0x14>

00023d62 <k_free>:
	if (ptr != NULL) {
   23d62:	b110      	cbz	r0, 23d6a <k_free+0x8>
		k_mem_pool_free_id(ptr);
   23d64:	3804      	subs	r0, #4
   23d66:	f7fb bc41 	b.w	1f5ec <k_mem_pool_free_id>
}
   23d6a:	4770      	bx	lr

00023d6c <z_queue_node_peek>:
{
   23d6c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   23d6e:	4604      	mov	r4, r0
   23d70:	b130      	cbz	r0, 23d80 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23d72:	6802      	ldr	r2, [r0, #0]
   23d74:	0793      	lsls	r3, r2, #30
   23d76:	d003      	beq.n	23d80 <z_queue_node_peek+0x14>
		ret = anode->data;
   23d78:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   23d7a:	b109      	cbz	r1, 23d80 <z_queue_node_peek+0x14>
			k_free(anode);
   23d7c:	f7ff fff1 	bl	23d62 <k_free>
}
   23d80:	4620      	mov	r0, r4
   23d82:	bd10      	pop	{r4, pc}

00023d84 <z_impl_k_queue_init>:
	list->head = NULL;
   23d84:	2300      	movs	r3, #0
	list->tail = NULL;
   23d86:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   23d8a:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   23d8c:	f100 030c 	add.w	r3, r0, #12
	list->tail = (sys_dnode_t *)list;
   23d90:	e9c0 3303 	strd	r3, r3, [r0, #12]
}
   23d94:	4770      	bx	lr

00023d96 <k_queue_append>:
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   23d96:	460a      	mov	r2, r1
   23d98:	2300      	movs	r3, #0
   23d9a:	6841      	ldr	r1, [r0, #4]
   23d9c:	f7fb bfa2 	b.w	1fce4 <queue_insert>

00023da0 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   23da0:	7b43      	ldrb	r3, [r0, #13]
   23da2:	06db      	lsls	r3, r3, #27
   23da4:	bf03      	ittte	eq
   23da6:	6980      	ldreq	r0, [r0, #24]
   23da8:	fab0 f080 	clzeq	r0, r0
   23dac:	0940      	lsreq	r0, r0, #5
   23dae:	2000      	movne	r0, #0
}
   23db0:	4770      	bx	lr

00023db2 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   23db2:	f990 000e 	ldrsb.w	r0, [r0, #14]
   23db6:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   23dba:	4298      	cmp	r0, r3
   23dbc:	bfac      	ite	ge
   23dbe:	2000      	movge	r0, #0
   23dc0:	2001      	movlt	r0, #1
   23dc2:	4770      	bx	lr

00023dc4 <z_reschedule_irqlock>:
{
   23dc4:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
   23dc6:	4602      	mov	r2, r0
   23dc8:	b938      	cbnz	r0, 23dda <z_reschedule_irqlock+0x16>
   23dca:	f7fc f8eb 	bl	1ffa4 <resched.part.15>
	if (resched(key)) {
   23dce:	b120      	cbz	r0, 23dda <z_reschedule_irqlock+0x16>
}
   23dd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   23dd4:	4610      	mov	r0, r2
   23dd6:	f7e9 bf3f 	b.w	dc58 <z_arch_swap>
	__asm__ volatile(
   23dda:	f382 8811 	msr	BASEPRI, r2
   23dde:	f3bf 8f6f 	isb	sy
   23de2:	bd08      	pop	{r3, pc}

00023de4 <z_reschedule_unlocked>:
	__asm__ volatile(
   23de4:	f04f 0320 	mov.w	r3, #32
   23de8:	f3ef 8011 	mrs	r0, BASEPRI
   23dec:	f383 8811 	msr	BASEPRI, r3
   23df0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
   23df4:	f7ff bfe6 	b.w	23dc4 <z_reschedule_irqlock>

00023df8 <z_priq_dumb_best>:
	return list->head == list;
   23df8:	6803      	ldr	r3, [r0, #0]
}
   23dfa:	4298      	cmp	r0, r3
   23dfc:	bf14      	ite	ne
   23dfe:	4618      	movne	r0, r3
   23e00:	2000      	moveq	r0, #0
   23e02:	4770      	bx	lr

00023e04 <z_unpend_all>:
{
   23e04:	b570      	push	{r4, r5, r6, lr}
   23e06:	4606      	mov	r6, r0
	int need_sched = 0;
   23e08:	2500      	movs	r5, #0
   23e0a:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23e0c:	42a6      	cmp	r6, r4
   23e0e:	d000      	beq.n	23e12 <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   23e10:	b90c      	cbnz	r4, 23e16 <z_unpend_all+0x12>
}
   23e12:	4628      	mov	r0, r5
   23e14:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   23e16:	4620      	mov	r0, r4
   23e18:	f7fc fa9a 	bl	20350 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   23e1c:	4620      	mov	r0, r4
   23e1e:	f7ff ffbf 	bl	23da0 <z_is_thread_ready>
		need_sched = 1;
   23e22:	2501      	movs	r5, #1
   23e24:	2800      	cmp	r0, #0
   23e26:	d0f0      	beq.n	23e0a <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   23e28:	4620      	mov	r0, r4
   23e2a:	f7fc fb9d 	bl	20568 <z_add_thread_to_ready_q>
   23e2e:	e7ec      	b.n	23e0a <z_unpend_all+0x6>

00023e30 <z_impl_k_sleep>:
{
   23e30:	b538      	push	{r3, r4, r5, lr}
   23e32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   23e36:	f240 34e7 	movw	r4, #999	; 0x3e7
   23e3a:	2500      	movs	r5, #0
   23e3c:	fbc1 4500 	smlal	r4, r5, r1, r0
   23e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23e44:	2300      	movs	r3, #0
   23e46:	4620      	mov	r0, r4
   23e48:	4629      	mov	r1, r5
   23e4a:	f7e8 f9e9 	bl	c220 <__aeabi_ldivmod>
	ticks = z_tick_sleep(ticks);
   23e4e:	f7fd f83f 	bl	20ed0 <z_tick_sleep>
}

static inline u64_t __ticks_to_ms(s64_t ticks)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	return (u64_t)ticks * MSEC_PER_SEC /
   23e52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23e56:	fb80 2302 	smull	r2, r3, r0, r2
   23e5a:	0bd0      	lsrs	r0, r2, #15
}
   23e5c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   23e60:	bd38      	pop	{r3, r4, r5, pc}

00023e62 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   23e62:	7b43      	ldrb	r3, [r0, #13]
   23e64:	06db      	lsls	r3, r3, #27
   23e66:	bf03      	ittte	eq
   23e68:	6980      	ldreq	r0, [r0, #24]
   23e6a:	fab0 f080 	clzeq	r0, r0
   23e6e:	0940      	lsreq	r0, r0, #5
   23e70:	2000      	movne	r0, #0
}
   23e72:	4770      	bx	lr

00023e74 <z_impl_k_thread_name_set>:
}
   23e74:	f06f 0046 	mvn.w	r0, #70	; 0x46
   23e78:	4770      	bx	lr

00023e7a <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   23e7a:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   23e7c:	b510      	push	{r4, lr}
   23e7e:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   23e80:	b103      	cbz	r3, 23e84 <z_thread_single_abort+0xa>
		thread->fn_abort();
   23e82:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   23e84:	4620      	mov	r0, r4
   23e86:	f7ff ffec 	bl	23e62 <z_is_thread_ready>
   23e8a:	b138      	cbz	r0, 23e9c <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   23e8c:	4620      	mov	r0, r4
   23e8e:	f7fc fd13 	bl	208b8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   23e92:	7b63      	ldrb	r3, [r4, #13]
   23e94:	f043 0308 	orr.w	r3, r3, #8
   23e98:	7363      	strb	r3, [r4, #13]
}
   23e9a:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   23e9c:	7b63      	ldrb	r3, [r4, #13]
   23e9e:	079b      	lsls	r3, r3, #30
   23ea0:	d502      	bpl.n	23ea8 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   23ea2:	4620      	mov	r0, r4
   23ea4:	f7fc f91c 	bl	200e0 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   23ea8:	69a3      	ldr	r3, [r4, #24]
   23eaa:	2b00      	cmp	r3, #0
   23eac:	d0f1      	beq.n	23e92 <z_thread_single_abort+0x18>
	return z_abort_timeout(&thread->base.timeout);
   23eae:	f104 0018 	add.w	r0, r4, #24
   23eb2:	f7fd fc59 	bl	21768 <z_abort_timeout>
   23eb6:	e7ec      	b.n	23e92 <z_thread_single_abort+0x18>

00023eb8 <z_init_thread_base>:
	thread_base->user_options = (u8_t)options;
   23eb8:	7303      	strb	r3, [r0, #12]
	thread_base->sched_locked = 0U;
   23eba:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   23ebc:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   23ebe:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   23ec0:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   23ec2:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
   23ec6:	4770      	bx	lr

00023ec8 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   23ec8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   23eca:	f7fd fddb 	bl	21a84 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   23ece:	bd08      	pop	{r3, pc}

00023ed0 <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   23ed0:	b510      	push	{r4, lr}
	return __ticks_to_ms(z_tick_get());
   23ed2:	f7fd fdd7 	bl	21a84 <z_tick_get>
   23ed6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   23eda:	fba0 2304 	umull	r2, r3, r0, r4
   23ede:	fb04 3301 	mla	r3, r4, r1, r3
   23ee2:	0bd0      	lsrs	r0, r2, #15
}
   23ee4:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   23ee8:	0bd9      	lsrs	r1, r3, #15
   23eea:	bd10      	pop	{r4, pc}

00023eec <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   23eec:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   23eee:	6884      	ldr	r4, [r0, #8]
{
   23ef0:	4605      	mov	r5, r0
   23ef2:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   23ef4:	b19c      	cbz	r4, 23f1e <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   23ef6:	68a3      	ldr	r3, [r4, #8]
   23ef8:	b95b      	cbnz	r3, 23f12 <signal_poll_event+0x26>
	int retcode = 0;
   23efa:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   23efc:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   23efe:	2300      	movs	r3, #0
   23f00:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   23f02:	68eb      	ldr	r3, [r5, #12]
   23f04:	f3c3 3204 	ubfx	r2, r3, #12, #5
   23f08:	4316      	orrs	r6, r2
   23f0a:	f366 3310 	bfi	r3, r6, #12, #5
   23f0e:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   23f10:	e004      	b.n	23f1c <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   23f12:	4798      	blx	r3
		poller->is_polling = false;
   23f14:	2300      	movs	r3, #0
		if (retcode < 0) {
   23f16:	2800      	cmp	r0, #0
		poller->is_polling = false;
   23f18:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   23f1a:	daf0      	bge.n	23efe <signal_poll_event+0x12>
}
   23f1c:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   23f1e:	4620      	mov	r0, r4
   23f20:	e7ed      	b.n	23efe <signal_poll_event+0x12>

00023f22 <add_event>:
{
   23f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23f24:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   23f26:	e9d0 2300 	ldrd	r2, r3, [r0]
   23f2a:	4290      	cmp	r0, r2
   23f2c:	4604      	mov	r4, r0
   23f2e:	460d      	mov	r5, r1
   23f30:	d106      	bne.n	23f40 <add_event+0x1e>
	node->prev = list->tail;
   23f32:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   23f34:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   23f36:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   23f38:	6863      	ldr	r3, [r4, #4]
   23f3a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   23f3c:	6065      	str	r5, [r4, #4]
}
   23f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   23f40:	2b00      	cmp	r3, #0
   23f42:	d0f6      	beq.n	23f32 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   23f44:	689b      	ldr	r3, [r3, #8]
   23f46:	6879      	ldr	r1, [r7, #4]
   23f48:	6858      	ldr	r0, [r3, #4]
   23f4a:	f7ff ff32 	bl	23db2 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   23f4e:	2800      	cmp	r0, #0
   23f50:	d1ef      	bne.n	23f32 <add_event+0x10>
	return list->head == list;
   23f52:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23f54:	42b4      	cmp	r4, r6
   23f56:	d0ec      	beq.n	23f32 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   23f58:	2e00      	cmp	r6, #0
   23f5a:	d0ea      	beq.n	23f32 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   23f5c:	68b3      	ldr	r3, [r6, #8]
   23f5e:	6878      	ldr	r0, [r7, #4]
   23f60:	6859      	ldr	r1, [r3, #4]
   23f62:	f7ff ff26 	bl	23db2 <z_is_t1_higher_prio_than_t2>
   23f66:	b128      	cbz	r0, 23f74 <add_event+0x52>
	node->prev = successor->prev;
   23f68:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   23f6a:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   23f6e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   23f70:	6075      	str	r5, [r6, #4]
			return;
   23f72:	e7e4      	b.n	23f3e <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   23f74:	6863      	ldr	r3, [r4, #4]
   23f76:	429e      	cmp	r6, r3
   23f78:	d0db      	beq.n	23f32 <add_event+0x10>
   23f7a:	6836      	ldr	r6, [r6, #0]
   23f7c:	e7ec      	b.n	23f58 <add_event+0x36>

00023f7e <z_handle_obj_poll_events>:
	return list->head == list;
   23f7e:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   23f80:	4298      	cmp	r0, r3
   23f82:	d009      	beq.n	23f98 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   23f84:	e9d3 2000 	ldrd	r2, r0, [r3]
   23f88:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   23f8a:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   23f8c:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   23f8e:	4618      	mov	r0, r3
	node->prev = NULL;
   23f90:	e9c3 2200 	strd	r2, r2, [r3]
   23f94:	f7ff bfaa 	b.w	23eec <signal_poll_event>
	}
}
   23f98:	4770      	bx	lr

00023f9a <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   23f9a:	4770      	bx	lr
