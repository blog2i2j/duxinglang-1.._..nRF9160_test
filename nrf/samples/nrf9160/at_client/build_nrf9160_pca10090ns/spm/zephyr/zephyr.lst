
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20000a90 	.word	0x20000a90
	if (z_syscall_trap()) {
		return (int) z_arch_syscall_invoke2(*(u32_t *)&mutex, *(u32_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	000012c5 	.word	0x000012c5
   8:	00003be1 	.word	0x00003be1
   c:	000010e5 	.word	0x000010e5
		if (fdtable[fd].obj == NULL) {
  10:	000010e5 	.word	0x000010e5
  14:	000010e5 	.word	0x000010e5
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	000010e5 	.word	0x000010e5
	if (z_syscall_trap()) {
		return (int *) z_arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  1c:	000010e5 	.word	0x000010e5
	errno = ENFILE;
  20:	000010e5 	.word	0x000010e5
	return -1;
  24:	000010e5 	.word	0x000010e5
		z_arch_syscall_invoke1(*(u32_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_mutex_unlock(mutex);
  28:	000010e5 	.word	0x000010e5
  2c:	000010ad 	.word	0x000010ad
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	000010e5 	.word	0x000010e5
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	000010e5 	.word	0x000010e5
  38:	00001059 	.word	0x00001059
  3c:	00003adf 	.word	0x00003adf

00000040 <_irq_vector_table>:
  40:	00001111 00001111 00001111 00001111     ................
  50:	00001111 00001111 00001111 00001111     ................
  60:	00001111 00001111 00001111 00001111     ................
  70:	00001111 00001111 00001111 00001111     ................
  80:	00001111 00001111 00001111 00001111     ................
  90:	00001111 00001111 00001111 00001111     ................
  a0:	00001111 00001111 00001111 00001111     ................
  b0:	00001111 00001111 00001111 00001111     ................
  c0:	00001111 00001111 00001111 00001111     ................
  d0:	00001111 00001111 00001111 00001111     ................
  e0:	00001111 00001111 00001111 00001111     ................
  f0:	00001111 00001111 00001111 00001111     ................
 100:	00001111 00001111 00001111 00001111     ................
 110:	00001111 00001111 00001111 00001111     ................
 120:	00001111 00001111 00001111 00001111     ................
 130:	00001111 00001111 00001111 00001111     ................
 140:	00001111                                ....

00000144 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	281ee6de 8fcebb4c 00005b01 00008000     ...(L....[......
 210:	00000001 00000000 200013d0 00001a2d     ........... -...

Disassembly of section _TEXT_SECTION_NAME_2:

00000220 <__aeabi_ldivmod>:
     220:	b97b      	cbnz	r3, 242 <__aeabi_ldivmod+0x22>
     222:	b972      	cbnz	r2, 242 <__aeabi_ldivmod+0x22>
     224:	2900      	cmp	r1, #0
     226:	bfbe      	ittt	lt
     228:	2000      	movlt	r0, #0
     22a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     22e:	e006      	blt.n	23e <__aeabi_ldivmod+0x1e>
     230:	bf08      	it	eq
     232:	2800      	cmpeq	r0, #0
     234:	bf1c      	itt	ne
     236:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     23a:	f04f 30ff 	movne.w	r0, #4294967295
     23e:	f000 b9a3 	b.w	588 <__aeabi_idiv0>
     242:	f1ad 0c08 	sub.w	ip, sp, #8
     246:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     24a:	2900      	cmp	r1, #0
     24c:	db09      	blt.n	262 <__aeabi_ldivmod+0x42>
     24e:	2b00      	cmp	r3, #0
     250:	db1a      	blt.n	288 <__aeabi_ldivmod+0x68>
     252:	f000 f835 	bl	2c0 <__udivmoddi4>
     256:	f8dd e004 	ldr.w	lr, [sp, #4]
     25a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     25e:	b004      	add	sp, #16
     260:	4770      	bx	lr
     262:	4240      	negs	r0, r0
     264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     268:	2b00      	cmp	r3, #0
     26a:	db1b      	blt.n	2a4 <__aeabi_ldivmod+0x84>
     26c:	f000 f828 	bl	2c0 <__udivmoddi4>
     270:	f8dd e004 	ldr.w	lr, [sp, #4]
     274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     278:	b004      	add	sp, #16
     27a:	4240      	negs	r0, r0
     27c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     280:	4252      	negs	r2, r2
     282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     286:	4770      	bx	lr
     288:	4252      	negs	r2, r2
     28a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     28e:	f000 f817 	bl	2c0 <__udivmoddi4>
     292:	f8dd e004 	ldr.w	lr, [sp, #4]
     296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     29a:	b004      	add	sp, #16
     29c:	4240      	negs	r0, r0
     29e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     2a2:	4770      	bx	lr
     2a4:	4252      	negs	r2, r2
     2a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2aa:	f000 f809 	bl	2c0 <__udivmoddi4>
     2ae:	f8dd e004 	ldr.w	lr, [sp, #4]
     2b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2b6:	b004      	add	sp, #16
     2b8:	4252      	negs	r2, r2
     2ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2be:	4770      	bx	lr

000002c0 <__udivmoddi4>:
     2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     2c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
     2c6:	4604      	mov	r4, r0
     2c8:	4689      	mov	r9, r1
     2ca:	2b00      	cmp	r3, #0
     2cc:	f040 8083 	bne.w	3d6 <__udivmoddi4+0x116>
     2d0:	428a      	cmp	r2, r1
     2d2:	4615      	mov	r5, r2
     2d4:	d945      	bls.n	362 <__udivmoddi4+0xa2>
     2d6:	fab2 f282 	clz	r2, r2
     2da:	b14a      	cbz	r2, 2f0 <__udivmoddi4+0x30>
     2dc:	f1c2 0720 	rsb	r7, r2, #32
     2e0:	fa01 f302 	lsl.w	r3, r1, r2
     2e4:	4095      	lsls	r5, r2
     2e6:	4094      	lsls	r4, r2
     2e8:	fa20 f707 	lsr.w	r7, r0, r7
     2ec:	ea47 0903 	orr.w	r9, r7, r3
     2f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2f4:	0c23      	lsrs	r3, r4, #16
     2f6:	fa1f f885 	uxth.w	r8, r5
     2fa:	fbb9 fcfe 	udiv	ip, r9, lr
     2fe:	fb0e 991c 	mls	r9, lr, ip, r9
     302:	fb0c f108 	mul.w	r1, ip, r8
     306:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
     30a:	4299      	cmp	r1, r3
     30c:	d90a      	bls.n	324 <__udivmoddi4+0x64>
     30e:	18eb      	adds	r3, r5, r3
     310:	bf2c      	ite	cs
     312:	2001      	movcs	r0, #1
     314:	2000      	movcc	r0, #0
     316:	4299      	cmp	r1, r3
     318:	d902      	bls.n	320 <__udivmoddi4+0x60>
     31a:	2800      	cmp	r0, #0
     31c:	f000 811d 	beq.w	55a <CONFIG_NET_TX_STACK_SIZE+0xaa>
     320:	f10c 3cff 	add.w	ip, ip, #4294967295
     324:	1a59      	subs	r1, r3, r1
     326:	b2a3      	uxth	r3, r4
     328:	fbb1 f0fe 	udiv	r0, r1, lr
     32c:	fb0e 1110 	mls	r1, lr, r0, r1
     330:	fb00 f808 	mul.w	r8, r0, r8
     334:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     338:	45a0      	cmp	r8, r4
     33a:	d905      	bls.n	348 <__udivmoddi4+0x88>
     33c:	192c      	adds	r4, r5, r4
     33e:	d202      	bcs.n	346 <__udivmoddi4+0x86>
     340:	45a0      	cmp	r8, r4
     342:	f200 810e 	bhi.w	562 <CONFIG_NET_TX_STACK_SIZE+0xb2>
     346:	3801      	subs	r0, #1
     348:	eba4 0408 	sub.w	r4, r4, r8
     34c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     350:	2700      	movs	r7, #0
     352:	b11e      	cbz	r6, 35c <__udivmoddi4+0x9c>
     354:	40d4      	lsrs	r4, r2
     356:	2300      	movs	r3, #0
     358:	e9c6 4300 	strd	r4, r3, [r6]
     35c:	4639      	mov	r1, r7
     35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     362:	2a00      	cmp	r2, #0
     364:	d051      	beq.n	40a <CONFIG_AT_CMD_THREAD_STACK_SIZE+0xa>
     366:	fab2 f282 	clz	r2, r2
     36a:	2a00      	cmp	r2, #0
     36c:	f040 80af 	bne.w	4ce <CONFIG_NET_TX_STACK_SIZE+0x1e>
     370:	1b49      	subs	r1, r1, r5
     372:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     376:	fa1f f885 	uxth.w	r8, r5
     37a:	2701      	movs	r7, #1
     37c:	0c23      	lsrs	r3, r4, #16
     37e:	fbb1 fcfe 	udiv	ip, r1, lr
     382:	fb0e 111c 	mls	r1, lr, ip, r1
     386:	fb08 f00c 	mul.w	r0, r8, ip
     38a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     38e:	4298      	cmp	r0, r3
     390:	d90a      	bls.n	3a8 <__udivmoddi4+0xe8>
     392:	18eb      	adds	r3, r5, r3
     394:	bf2c      	ite	cs
     396:	2101      	movcs	r1, #1
     398:	2100      	movcc	r1, #0
     39a:	4298      	cmp	r0, r3
     39c:	d902      	bls.n	3a4 <__udivmoddi4+0xe4>
     39e:	2900      	cmp	r1, #0
     3a0:	f000 80d7 	beq.w	552 <CONFIG_NET_TX_STACK_SIZE+0xa2>
     3a4:	f10c 3cff 	add.w	ip, ip, #4294967295
     3a8:	1a19      	subs	r1, r3, r0
     3aa:	b2a3      	uxth	r3, r4
     3ac:	fbb1 f0fe 	udiv	r0, r1, lr
     3b0:	fb0e 1110 	mls	r1, lr, r0, r1
     3b4:	fb08 f800 	mul.w	r8, r8, r0
     3b8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     3bc:	45a0      	cmp	r8, r4
     3be:	d905      	bls.n	3cc <__udivmoddi4+0x10c>
     3c0:	192c      	adds	r4, r5, r4
     3c2:	d202      	bcs.n	3ca <__udivmoddi4+0x10a>
     3c4:	45a0      	cmp	r8, r4
     3c6:	f200 80c1 	bhi.w	54c <CONFIG_NET_TX_STACK_SIZE+0x9c>
     3ca:	3801      	subs	r0, #1
     3cc:	eba4 0408 	sub.w	r4, r4, r8
     3d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     3d4:	e7bd      	b.n	352 <__udivmoddi4+0x92>
     3d6:	428b      	cmp	r3, r1
     3d8:	d908      	bls.n	3ec <__udivmoddi4+0x12c>
     3da:	2e00      	cmp	r6, #0
     3dc:	d074      	beq.n	4c8 <CONFIG_NET_TX_STACK_SIZE+0x18>
     3de:	2700      	movs	r7, #0
     3e0:	e9c6 0100 	strd	r0, r1, [r6]
     3e4:	4638      	mov	r0, r7
     3e6:	4639      	mov	r1, r7
     3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     3ec:	fab3 f783 	clz	r7, r3
     3f0:	b967      	cbnz	r7, 40c <CONFIG_AT_CMD_THREAD_STACK_SIZE+0xc>
     3f2:	428b      	cmp	r3, r1
     3f4:	f0c0 80a4 	bcc.w	540 <CONFIG_NET_TX_STACK_SIZE+0x90>
     3f8:	4282      	cmp	r2, r0
     3fa:	f240 80a1 	bls.w	540 <CONFIG_NET_TX_STACK_SIZE+0x90>
     3fe:	4638      	mov	r0, r7
     400:	2e00      	cmp	r6, #0
     402:	d0ab      	beq.n	35c <__udivmoddi4+0x9c>
     404:	e9c6 4900 	strd	r4, r9, [r6]
     408:	e7a8      	b.n	35c <__udivmoddi4+0x9c>
     40a:	deff      	udf	#255	; 0xff
     40c:	f1c7 0520 	rsb	r5, r7, #32
     410:	40bb      	lsls	r3, r7
     412:	fa02 fc07 	lsl.w	ip, r2, r7
     416:	fa01 f407 	lsl.w	r4, r1, r7
     41a:	40ea      	lsrs	r2, r5
     41c:	fa20 f805 	lsr.w	r8, r0, r5
     420:	40e9      	lsrs	r1, r5
     422:	fa00 fe07 	lsl.w	lr, r0, r7
     426:	431a      	orrs	r2, r3
     428:	ea48 0404 	orr.w	r4, r8, r4
     42c:	ea4f 4812 	mov.w	r8, r2, lsr #16
     430:	0c20      	lsrs	r0, r4, #16
     432:	fa1f f982 	uxth.w	r9, r2
     436:	fbb1 faf8 	udiv	sl, r1, r8
     43a:	fb08 111a 	mls	r1, r8, sl, r1
     43e:	fb0a fb09 	mul.w	fp, sl, r9
     442:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     446:	458b      	cmp	fp, r1
     448:	d90a      	bls.n	460 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x60>
     44a:	1851      	adds	r1, r2, r1
     44c:	bf2c      	ite	cs
     44e:	2301      	movcs	r3, #1
     450:	2300      	movcc	r3, #0
     452:	458b      	cmp	fp, r1
     454:	d902      	bls.n	45c <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x5c>
     456:	2b00      	cmp	r3, #0
     458:	f000 8088 	beq.w	56c <CONFIG_NET_TX_STACK_SIZE+0xbc>
     45c:	f10a 3aff 	add.w	sl, sl, #4294967295
     460:	eba1 010b 	sub.w	r1, r1, fp
     464:	b2a4      	uxth	r4, r4
     466:	fbb1 f0f8 	udiv	r0, r1, r8
     46a:	fb08 1110 	mls	r1, r8, r0, r1
     46e:	fb00 f909 	mul.w	r9, r0, r9
     472:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
     476:	4589      	cmp	r9, r1
     478:	d904      	bls.n	484 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x84>
     47a:	1851      	adds	r1, r2, r1
     47c:	d201      	bcs.n	482 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x82>
     47e:	4589      	cmp	r9, r1
     480:	d87b      	bhi.n	57a <CONFIG_NET_TX_STACK_SIZE+0xca>
     482:	3801      	subs	r0, #1
     484:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     488:	eba1 0109 	sub.w	r1, r1, r9
     48c:	fba0 890c 	umull	r8, r9, r0, ip
     490:	4549      	cmp	r1, r9
     492:	4644      	mov	r4, r8
     494:	464b      	mov	r3, r9
     496:	d302      	bcc.n	49e <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x9e>
     498:	d106      	bne.n	4a8 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0xa8>
     49a:	45c6      	cmp	lr, r8
     49c:	d204      	bcs.n	4a8 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0xa8>
     49e:	3801      	subs	r0, #1
     4a0:	ebb8 040c 	subs.w	r4, r8, ip
     4a4:	eb69 0302 	sbc.w	r3, r9, r2
     4a8:	2e00      	cmp	r6, #0
     4aa:	d05d      	beq.n	568 <CONFIG_NET_TX_STACK_SIZE+0xb8>
     4ac:	ebbe 0204 	subs.w	r2, lr, r4
     4b0:	eb61 0103 	sbc.w	r1, r1, r3
     4b4:	fa01 f505 	lsl.w	r5, r1, r5
     4b8:	fa22 f307 	lsr.w	r3, r2, r7
     4bc:	40f9      	lsrs	r1, r7
     4be:	2700      	movs	r7, #0
     4c0:	431d      	orrs	r5, r3
     4c2:	e9c6 5100 	strd	r5, r1, [r6]
     4c6:	e749      	b.n	35c <__udivmoddi4+0x9c>
     4c8:	4637      	mov	r7, r6
     4ca:	4630      	mov	r0, r6
     4cc:	e746      	b.n	35c <__udivmoddi4+0x9c>
     4ce:	f1c2 0020 	rsb	r0, r2, #32
     4d2:	4095      	lsls	r5, r2
     4d4:	fa01 f702 	lsl.w	r7, r1, r2
     4d8:	fa21 f300 	lsr.w	r3, r1, r0
     4dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     4e0:	fa24 f100 	lsr.w	r1, r4, r0
     4e4:	fa1f f885 	uxth.w	r8, r5
     4e8:	4094      	lsls	r4, r2
     4ea:	4339      	orrs	r1, r7
     4ec:	fbb3 f0fe 	udiv	r0, r3, lr
     4f0:	0c0f      	lsrs	r7, r1, #16
     4f2:	fb0e 3310 	mls	r3, lr, r0, r3
     4f6:	fb00 fc08 	mul.w	ip, r0, r8
     4fa:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
     4fe:	459c      	cmp	ip, r3
     500:	d907      	bls.n	512 <CONFIG_NET_TX_STACK_SIZE+0x62>
     502:	18eb      	adds	r3, r5, r3
     504:	bf2c      	ite	cs
     506:	2701      	movcs	r7, #1
     508:	2700      	movcc	r7, #0
     50a:	459c      	cmp	ip, r3
     50c:	d900      	bls.n	510 <CONFIG_NET_TX_STACK_SIZE+0x60>
     50e:	b38f      	cbz	r7, 574 <CONFIG_NET_TX_STACK_SIZE+0xc4>
     510:	3801      	subs	r0, #1
     512:	eba3 030c 	sub.w	r3, r3, ip
     516:	b289      	uxth	r1, r1
     518:	fbb3 f7fe 	udiv	r7, r3, lr
     51c:	fb0e 3317 	mls	r3, lr, r7, r3
     520:	fb07 fc08 	mul.w	ip, r7, r8
     524:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     528:	458c      	cmp	ip, r1
     52a:	d904      	bls.n	536 <CONFIG_NET_TX_STACK_SIZE+0x86>
     52c:	1869      	adds	r1, r5, r1
     52e:	d201      	bcs.n	534 <CONFIG_NET_TX_STACK_SIZE+0x84>
     530:	458c      	cmp	ip, r1
     532:	d825      	bhi.n	580 <CONFIG_NET_TX_STACK_SIZE+0xd0>
     534:	3f01      	subs	r7, #1
     536:	eba1 010c 	sub.w	r1, r1, ip
     53a:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
     53e:	e71d      	b.n	37c <__udivmoddi4+0xbc>
     540:	1a84      	subs	r4, r0, r2
     542:	eb61 0303 	sbc.w	r3, r1, r3
     546:	2001      	movs	r0, #1
     548:	4699      	mov	r9, r3
     54a:	e759      	b.n	400 <CONFIG_AT_CMD_THREAD_STACK_SIZE>
     54c:	3802      	subs	r0, #2
     54e:	442c      	add	r4, r5
     550:	e73c      	b.n	3cc <__udivmoddi4+0x10c>
     552:	f1ac 0c02 	sub.w	ip, ip, #2
     556:	442b      	add	r3, r5
     558:	e726      	b.n	3a8 <__udivmoddi4+0xe8>
     55a:	f1ac 0c02 	sub.w	ip, ip, #2
     55e:	442b      	add	r3, r5
     560:	e6e0      	b.n	324 <__udivmoddi4+0x64>
     562:	3802      	subs	r0, #2
     564:	442c      	add	r4, r5
     566:	e6ef      	b.n	348 <__udivmoddi4+0x88>
     568:	4637      	mov	r7, r6
     56a:	e6f7      	b.n	35c <__udivmoddi4+0x9c>
     56c:	f1aa 0a02 	sub.w	sl, sl, #2
     570:	4411      	add	r1, r2
     572:	e775      	b.n	460 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x60>
     574:	3802      	subs	r0, #2
     576:	442b      	add	r3, r5
     578:	e7cb      	b.n	512 <CONFIG_NET_TX_STACK_SIZE+0x62>
     57a:	3802      	subs	r0, #2
     57c:	4411      	add	r1, r2
     57e:	e781      	b.n	484 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x84>
     580:	3f02      	subs	r7, #2
     582:	4429      	add	r1, r5
     584:	e7d7      	b.n	536 <CONFIG_NET_TX_STACK_SIZE+0x86>
     586:	bf00      	nop

00000588 <__aeabi_idiv0>:
     588:	4770      	bx	lr
     58a:	bf00      	nop

0000058c <__gnu_cmse_nonsecure_call>:
     58c:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     590:	4627      	mov	r7, r4
     592:	46a0      	mov	r8, r4
     594:	46a1      	mov	r9, r4
     596:	46a2      	mov	sl, r4
     598:	46a3      	mov	fp, r4
     59a:	46a4      	mov	ip, r4
     59c:	ed2d 8b10 	vpush	{d8-d15}
     5a0:	f04f 0500 	mov.w	r5, #0
     5a4:	ec45 5b18 	vmov	d8, r5, r5
     5a8:	ec45 5a19 	vmov	s18, s19, r5, r5
     5ac:	ec45 5a1a 	vmov	s20, s21, r5, r5
     5b0:	ec45 5a1b 	vmov	s22, s23, r5, r5
     5b4:	ec45 5a1c 	vmov	s24, s25, r5, r5
     5b8:	ec45 5a1d 	vmov	s26, s27, r5, r5
     5bc:	ec45 5a1e 	vmov	s28, s29, r5, r5
     5c0:	ec45 5a1f 	vmov	s30, s31, r5, r5
     5c4:	eef1 5a10 	vmrs	r5, fpscr
     5c8:	f64f 7660 	movw	r6, #65376	; 0xff60
     5cc:	f6c0 76ff 	movt	r6, #4095	; 0xfff
     5d0:	4035      	ands	r5, r6
     5d2:	eee1 5a10 	vmsr	fpscr, r5
     5d6:	f384 8800 	msr	CPSR_f, r4
     5da:	4625      	mov	r5, r4
     5dc:	4626      	mov	r6, r4
     5de:	47a4      	blxns	r4
     5e0:	ecbd 8b10 	vpop	{d8-d15}
     5e4:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

000005e8 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
     5e8:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
     5ea:	4b0c      	ldr	r3, [pc, #48]	; (61c <tz_nonsecure_state_setup+0x34>)
     5ec:	609a      	str	r2, [r3, #8]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
     5ee:	6803      	ldr	r3, [r0, #0]
     5f0:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
     5f4:	6843      	ldr	r3, [r0, #4]
     5f6:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
     5fa:	7b02      	ldrb	r2, [r0, #12]
     5fc:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
     600:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
     604:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
     608:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
     60a:	bf48      	it	mi
     60c:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
     610:	b109      	cbz	r1, 616 <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
     612:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
     616:	f383 8894 	msr	CONTROL_NS, r3
}
     61a:	4770      	bx	lr
     61c:	e002ed00 	.word	0xe002ed00

00000620 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     620:	4a08      	ldr	r2, [pc, #32]	; (644 <tz_nbanked_exception_target_state_set+0x24>)
     622:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
     624:	b148      	cbz	r0, 63a <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
     626:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
     62a:	041b      	lsls	r3, r3, #16
     62c:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
     62e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
     632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
     636:	60d3      	str	r3, [r2, #12]
}
     638:	4770      	bx	lr
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     63a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
     63c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     640:	e7f5      	b.n	62e <tz_nbanked_exception_target_state_set+0xe>
     642:	bf00      	nop
     644:	e000ed00 	.word	0xe000ed00

00000648 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     648:	4a08      	ldr	r2, [pc, #32]	; (66c <tz_nonsecure_exception_prio_config+0x24>)
     64a:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
     64c:	b140      	cbz	r0, 660 <tz_nonsecure_exception_prio_config+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     64e:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
     650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
     654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
     658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
     65c:	60d3      	str	r3, [r2, #12]
}
     65e:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
     660:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
     664:	041b      	lsls	r3, r3, #16
     666:	0c1b      	lsrs	r3, r3, #16
     668:	e7f4      	b.n	654 <tz_nonsecure_exception_prio_config+0xc>
     66a:	bf00      	nop
     66c:	e000ed00 	.word	0xe000ed00

00000670 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     670:	4a08      	ldr	r2, [pc, #32]	; (694 <tz_nonsecure_system_reset_req_block+0x24>)
     672:	68d3      	ldr	r3, [r2, #12]
	if (block) {
     674:	b140      	cbz	r0, 688 <tz_nonsecure_system_reset_req_block+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     676:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
     678:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
     67c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
     680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
     684:	60d3      	str	r3, [r2, #12]
}
     686:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
     688:	f023 0308 	bic.w	r3, r3, #8
     68c:	041b      	lsls	r3, r3, #16
     68e:	0c1b      	lsrs	r3, r3, #16
     690:	e7f4      	b.n	67c <tz_nonsecure_system_reset_req_block+0xc>
     692:	bf00      	nop
     694:	e000ed00 	.word	0xe000ed00

00000698 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
     698:	4a03      	ldr	r2, [pc, #12]	; (6a8 <tz_nonsecure_fpu_access_enable+0x10>)
     69a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
     69e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
     6a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
     6a6:	4770      	bx	lr
     6a8:	e000ed00 	.word	0xe000ed00

000006ac <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
     6ac:	4b08      	ldr	r3, [pc, #32]	; (6d0 <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
     6ae:	681a      	ldr	r2, [r3, #0]
     6b0:	b118      	cbz	r0, 6ba <tz_sau_configure+0xe>
     6b2:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
     6b6:	601a      	str	r2, [r3, #0]
		}
	}
}
     6b8:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
     6ba:	f022 0201 	bic.w	r2, r2, #1
     6be:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
     6c0:	681a      	ldr	r2, [r3, #0]
		if (allns) {
     6c2:	b111      	cbz	r1, 6ca <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
     6c4:	f042 0202 	orr.w	r2, r2, #2
     6c8:	e7f5      	b.n	6b6 <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
     6ca:	f022 0202 	bic.w	r2, r2, #2
     6ce:	e7f2      	b.n	6b6 <tz_sau_configure+0xa>
     6d0:	e000edd0 	.word	0xe000edd0

000006d4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     6d4:	680b      	ldr	r3, [r1, #0]
     6d6:	3301      	adds	r3, #1
     6d8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     6da:	4b01      	ldr	r3, [pc, #4]	; (6e0 <char_out+0xc>)
     6dc:	681b      	ldr	r3, [r3, #0]
     6de:	4718      	bx	r3
     6e0:	200013d4 	.word	0x200013d4

000006e4 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6e8:	b085      	sub	sp, #20
     6ea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     6ec:	469b      	mov	fp, r3
     6ee:	2c01      	cmp	r4, #1
     6f0:	bfb8      	it	lt
     6f2:	2401      	movlt	r4, #1
     6f4:	2b01      	cmp	r3, #1
     6f6:	bf0c      	ite	eq
     6f8:	2330      	moveq	r3, #48	; 0x30
     6fa:	2320      	movne	r3, #32
     6fc:	4616      	mov	r6, r2
     6fe:	4682      	mov	sl, r0
     700:	4688      	mov	r8, r1
     702:	2501      	movs	r5, #1
     704:	270a      	movs	r7, #10
     706:	2200      	movs	r2, #0
     708:	f8df 906c 	ldr.w	r9, [pc, #108]	; 778 <_printk_dec_ulong+0x94>
     70c:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     70e:	fbb6 f3f9 	udiv	r3, r6, r9
     712:	9301      	str	r3, [sp, #4]
     714:	b90a      	cbnz	r2, 71a <_printk_dec_ulong+0x36>
     716:	45b1      	cmp	r9, r6
     718:	d81c      	bhi.n	754 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     71a:	9b01      	ldr	r3, [sp, #4]
     71c:	4641      	mov	r1, r8
     71e:	f103 0030 	add.w	r0, r3, #48	; 0x30
     722:	47d0      	blx	sl
			found_largest_digit = 1;
     724:	2201      	movs	r2, #1
			digits++;
     726:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
     728:	9b01      	ldr	r3, [sp, #4]
		remaining--;
     72a:	3f01      	subs	r7, #1
		remainder %= pos;
     72c:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
     730:	230a      	movs	r3, #10
	while (pos >= 10) {
     732:	2f01      	cmp	r7, #1
		pos /= 10;
     734:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
     738:	d1e9      	bne.n	70e <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
     73a:	4641      	mov	r1, r8
     73c:	f106 0030 	add.w	r0, r6, #48	; 0x30
     740:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
     742:	f1bb 0f03 	cmp.w	fp, #3
     746:	d102      	bne.n	74e <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
     748:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
     74a:	2c00      	cmp	r4, #0
     74c:	dc0e      	bgt.n	76c <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
     74e:	b005      	add	sp, #20
     750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     754:	42bc      	cmp	r4, r7
     756:	dbe7      	blt.n	728 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     758:	f1bb 0f02 	cmp.w	fp, #2
     75c:	d8e4      	bhi.n	728 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     75e:	4641      	mov	r1, r8
     760:	9802      	ldr	r0, [sp, #8]
     762:	9203      	str	r2, [sp, #12]
			digits++;
     764:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     766:	47d0      	blx	sl
			digits++;
     768:	9a03      	ldr	r2, [sp, #12]
     76a:	e7dd      	b.n	728 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     76c:	4641      	mov	r1, r8
     76e:	2020      	movs	r0, #32
     770:	47d0      	blx	sl
     772:	3c01      	subs	r4, #1
     774:	e7e9      	b.n	74a <_printk_dec_ulong+0x66>
     776:	bf00      	nop
     778:	3b9aca00 	.word	0x3b9aca00

0000077c <__printk_hook_install>:
	_char_out = fn;
     77c:	4b01      	ldr	r3, [pc, #4]	; (784 <__printk_hook_install+0x8>)
     77e:	6018      	str	r0, [r3, #0]
}
     780:	4770      	bx	lr
     782:	bf00      	nop
     784:	200013d4 	.word	0x200013d4

00000788 <vprintk>:
	struct out_context ctx = { 0 };
     788:	2300      	movs	r3, #0
{
     78a:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
     78c:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     78e:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
     790:	4803      	ldr	r0, [pc, #12]	; (7a0 <vprintk+0x18>)
     792:	460b      	mov	r3, r1
     794:	a901      	add	r1, sp, #4
     796:	f002 ff61 	bl	365c <z_vprintk>
}
     79a:	b003      	add	sp, #12
     79c:	f85d fb04 	ldr.w	pc, [sp], #4
     7a0:	000006d5 	.word	0x000006d5

000007a4 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     7a4:	f04f 0220 	mov.w	r2, #32
     7a8:	f3ef 8311 	mrs	r3, BASEPRI
     7ac:	f382 8811 	msr	BASEPRI, r2
     7b0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     7b4:	2101      	movs	r1, #1
     7b6:	4a04      	ldr	r2, [pc, #16]	; (7c8 <nordicsemi_nrf91_init+0x24>)
     7b8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     7bc:	f383 8811 	msr	BASEPRI, r3
     7c0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     7c4:	2000      	movs	r0, #0
     7c6:	4770      	bx	lr
     7c8:	50039000 	.word	0x50039000

000007cc <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
     7cc:	280a      	cmp	r0, #10
{
     7ce:	b538      	push	{r3, r4, r5, lr}
     7d0:	4604      	mov	r4, r0
     7d2:	4d07      	ldr	r5, [pc, #28]	; (7f0 <console_out+0x24>)
	if ('\n' == c) {
     7d4:	d104      	bne.n	7e0 <console_out+0x14>
     7d6:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
     7d8:	6843      	ldr	r3, [r0, #4]
     7da:	210d      	movs	r1, #13
     7dc:	685b      	ldr	r3, [r3, #4]
     7de:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
     7e0:	6828      	ldr	r0, [r5, #0]
     7e2:	6843      	ldr	r3, [r0, #4]
     7e4:	b2e1      	uxtb	r1, r4
     7e6:	685b      	ldr	r3, [r3, #4]
     7e8:	4798      	blx	r3

	return c;
}
     7ea:	4620      	mov	r0, r4
     7ec:	bd38      	pop	{r3, r4, r5, pc}
     7ee:	bf00      	nop
     7f0:	20000008 	.word	0x20000008

000007f4 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
     7f4:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
     7f6:	4c04      	ldr	r4, [pc, #16]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     7f8:	4620      	mov	r0, r4
     7fa:	f001 f81f 	bl	183c <__stdout_hook_install>
	__printk_hook_install(console_out);
     7fe:	4620      	mov	r0, r4
}
     800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
     804:	f7ff bfba 	b.w	77c <__printk_hook_install>
     808:	000007cd 	.word	0x000007cd

0000080c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     80c:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) z_arch_syscall_invoke1(*(u32_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     80e:	4804      	ldr	r0, [pc, #16]	; (820 <uart_console_init+0x14>)
     810:	f001 f9fe 	bl	1c10 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     814:	4b03      	ldr	r3, [pc, #12]	; (824 <uart_console_init+0x18>)
     816:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
     818:	f7ff ffec 	bl	7f4 <uart_console_hook_install>

	return 0;
}
     81c:	2000      	movs	r0, #0
     81e:	bd08      	pop	{r3, pc}
     820:	00004677 	.word	0x00004677
     824:	20000008 	.word	0x20000008

00000828 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
     828:	b508      	push	{r3, lr}
#endif
}

__STATIC_INLINE bool nrf_clock_event_check(nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
     82a:	4b11      	ldr	r3, [pc, #68]	; (870 <nrf_power_clock_isr+0x48>)
     82c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
     82e:	b16a      	cbz	r2, 84c <nrf_power_clock_isr+0x24>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
     830:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     834:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
     838:	07d1      	lsls	r1, r2, #31
     83a:	d507      	bpl.n	84c <nrf_power_clock_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
     83c:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
     83e:	480d      	ldr	r0, [pc, #52]	; (874 <nrf_power_clock_isr+0x4c>)
     840:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
     842:	6883      	ldr	r3, [r0, #8]
     844:	7a5b      	ldrb	r3, [r3, #9]
     846:	b90b      	cbnz	r3, 84c <nrf_power_clock_isr+0x24>
			clkstarted_handle(hfclk_dev);
     848:	f003 f92c 	bl	3aa4 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
     84c:	4b0a      	ldr	r3, [pc, #40]	; (878 <nrf_power_clock_isr+0x50>)
     84e:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
     850:	b162      	cbz	r2, 86c <nrf_power_clock_isr+0x44>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
     852:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     856:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
     85a:	0792      	lsls	r2, r2, #30
     85c:	d506      	bpl.n	86c <nrf_power_clock_isr+0x44>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
     85e:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
     860:	4806      	ldr	r0, [pc, #24]	; (87c <nrf_power_clock_isr+0x54>)
     862:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
     864:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
     868:	f003 b91c 	b.w	3aa4 <clkstarted_handle>
}
     86c:	bd08      	pop	{r3, pc}
     86e:	bf00      	nop
     870:	50005100 	.word	0x50005100
     874:	20001484 	.word	0x20001484
     878:	50005104 	.word	0x50005104
     87c:	20001490 	.word	0x20001490

00000880 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
     880:	2200      	movs	r2, #0
     882:	4b0d      	ldr	r3, [pc, #52]	; (8b8 <rtc1_nrf_isr+0x38>)
     884:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
     888:	f04f 0220 	mov.w	r2, #32
     88c:	f3ef 8111 	mrs	r1, BASEPRI
     890:	f382 8811 	msr	BASEPRI, r2
     894:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     898:	4a08      	ldr	r2, [pc, #32]	; (8bc <rtc1_nrf_isr+0x3c>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
     89a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
     89e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
     8a0:	1ac0      	subs	r0, r0, r3
     8a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
     8a6:	4403      	add	r3, r0
     8a8:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
     8aa:	f381 8811 	msr	BASEPRI, r1
     8ae:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
     8b2:	f001 bf21 	b.w	26f8 <z_clock_announce>
     8b6:	bf00      	nop
     8b8:	50015000 	.word	0x50015000
     8bc:	20000024 	.word	0x20000024

000008c0 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
     8c0:	b570      	push	{r4, r5, r6, lr}
     8c2:	4818      	ldr	r0, [pc, #96]	; (924 <z_clock_driver_init+0x64>)
     8c4:	f001 f9a4 	bl	1c10 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
     8c8:	b348      	cbz	r0, 91e <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
     8ca:	6843      	ldr	r3, [r0, #4]
     8cc:	2100      	movs	r1, #0
     8ce:	681b      	ldr	r3, [r3, #0]
     8d0:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
     8d2:	2601      	movs	r6, #1
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     8d4:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
     8d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     8da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
     8de:	4d12      	ldr	r5, [pc, #72]	; (928 <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
     8e0:	4631      	mov	r1, r6
     8e2:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
     8e6:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
     8ea:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     8ee:	4b0f      	ldr	r3, [pc, #60]	; (92c <z_clock_driver_init+0x6c>)
     8f0:	2015      	movs	r0, #21
     8f2:	601c      	str	r4, [r3, #0]
     8f4:	4b0e      	ldr	r3, [pc, #56]	; (930 <z_clock_driver_init+0x70>)
     8f6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     8fa:	4622      	mov	r2, r4
     8fc:	f000 fc52 	bl	11a4 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
     900:	2015      	movs	r0, #21
     902:	f000 fc3f 	bl	1184 <z_arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
     906:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     908:	4b0a      	ldr	r3, [pc, #40]	; (934 <z_clock_driver_init+0x74>)
     90a:	601e      	str	r6, [r3, #0]
     90c:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
     90e:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
     912:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     914:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     918:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
     91c:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
     91e:	f04f 30ff 	mov.w	r0, #4294967295
     922:	e7fb      	b.n	91c <z_clock_driver_init+0x5c>
     924:	0000467e 	.word	0x0000467e
     928:	50015000 	.word	0x50015000
     92c:	50015140 	.word	0x50015140
     930:	e000e100 	.word	0xe000e100
     934:	50015008 	.word	0x50015008

00000938 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
     938:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
     93a:	4e21      	ldr	r6, [pc, #132]	; (9c0 <z_clock_set_timeout+0x88>)
     93c:	f1b0 3fff 	cmp.w	r0, #4294967295
     940:	bf08      	it	eq
     942:	4630      	moveq	r0, r6
	__asm__ volatile(
     944:	f04f 0320 	mov.w	r3, #32
     948:	f3ef 8411 	mrs	r4, BASEPRI
     94c:	f383 8811 	msr	BASEPRI, r3
     950:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     954:	491b      	ldr	r1, [pc, #108]	; (9c4 <z_clock_set_timeout+0x8c>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
     956:	4b1c      	ldr	r3, [pc, #112]	; (9c8 <z_clock_set_timeout+0x90>)
     958:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
     95c:	681d      	ldr	r5, [r3, #0]
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
     95e:	3801      	subs	r0, #1
	return (a - b) & COUNTER_MAX;
     960:	1b53      	subs	r3, r2, r5
     962:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
     966:	3501      	adds	r5, #1
     968:	442b      	add	r3, r5
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
     96a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	cyc += last_count;
     96e:	42b0      	cmp	r0, r6
     970:	bfd4      	ite	le
     972:	1818      	addle	r0, r3, r0
     974:	1998      	addgt	r0, r3, r6
	return (a - b) & COUNTER_MAX;
     976:	1a82      	subs	r2, r0, r2
     978:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     97c:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
     980:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
     982:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
     986:	d904      	bls.n	992 <z_clock_set_timeout+0x5a>
	__asm__ volatile(
     988:	f384 8811 	msr	BASEPRI, r4
     98c:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
     990:	bd70      	pop	{r4, r5, r6, pc}
     return p_reg->COUNTER;
     992:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
     996:	4a0d      	ldr	r2, [pc, #52]	; (9cc <z_clock_set_timeout+0x94>)
	return (a - b) & COUNTER_MAX;
     998:	1ac3      	subs	r3, r0, r3
     99a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
     99e:	1e5d      	subs	r5, r3, #1
     9a0:	4295      	cmp	r5, r2
     9a2:	d905      	bls.n	9b0 <z_clock_set_timeout+0x78>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     9a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     9a8:	4b09      	ldr	r3, [pc, #36]	; (9d0 <z_clock_set_timeout+0x98>)
     9aa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
     9ae:	e7eb      	b.n	988 <z_clock_set_timeout+0x50>
		} else if (dt == 1) {
     9b0:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
     9b2:	bf02      	ittt	eq
     9b4:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     9b6:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     9ba:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
     9be:	e7e3      	b.n	988 <z_clock_set_timeout+0x50>
     9c0:	00fffffe 	.word	0x00fffffe
     9c4:	50015000 	.word	0x50015000
     9c8:	20000024 	.word	0x20000024
     9cc:	007ffffe 	.word	0x007ffffe
     9d0:	e000e100 	.word	0xe000e100

000009d4 <z_clock_elapsed>:
	__asm__ volatile(
     9d4:	f04f 0220 	mov.w	r2, #32
     9d8:	f3ef 8311 	mrs	r3, BASEPRI
     9dc:	f382 8811 	msr	BASEPRI, r2
     9e0:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     9e4:	4a06      	ldr	r2, [pc, #24]	; (a00 <z_clock_elapsed+0x2c>)
     9e6:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     9ea:	4a06      	ldr	r2, [pc, #24]	; (a04 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
     9ec:	6812      	ldr	r2, [r2, #0]
     9ee:	1a80      	subs	r0, r0, r2
     9f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
     9f4:	f383 8811 	msr	BASEPRI, r3
     9f8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
     9fc:	4770      	bx	lr
     9fe:	bf00      	nop
     a00:	50015000 	.word	0x50015000
     a04:	20000024 	.word	0x20000024

00000a08 <spm_config_peripheral.constprop.1>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(u8_t id, bool dma_present)
     a08:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
     a0a:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     a0c:	2b00      	cmp	r3, #0
     a0e:	db0c      	blt.n	a2a <spm_config_peripheral.constprop.1+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a10:	2201      	movs	r2, #1
     a12:	f000 011f 	and.w	r1, r0, #31
     a16:	408a      	lsls	r2, r1
     a18:	095b      	lsrs	r3, r3, #5
     a1a:	4910      	ldr	r1, [pc, #64]	; (a5c <spm_config_peripheral.constprop.1+0x54>)
     a1c:	3320      	adds	r3, #32
     a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     a22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     a26:	f3bf 8f6f 	isb	sy
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
     a2a:	0083      	lsls	r3, r0, #2
     a2c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
     a30:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     a34:	2831      	cmp	r0, #49	; 0x31
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
     a36:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     a3a:	d006      	beq.n	a4a <spm_config_peripheral.constprop.1+0x42>
	return present && (usel || split);
     a3c:	2a00      	cmp	r2, #0
     a3e:	da07      	bge.n	a50 <spm_config_peripheral.constprop.1+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
     a40:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
     a44:	3a02      	subs	r2, #2
     a46:	2a01      	cmp	r2, #1
     a48:	d802      	bhi.n	a50 <spm_config_peripheral.constprop.1+0x48>

	if (usel_or_split(id)) {
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
     a4a:	4a05      	ldr	r2, [pc, #20]	; (a60 <spm_config_peripheral.constprop.1+0x58>)
     a4c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, 0);
     a50:	2100      	movs	r1, #0
     a52:	f003 f894 	bl	3b7e <irq_target_state_set>
	return 0;
}
     a56:	2000      	movs	r0, #0
     a58:	bd08      	pop	{r3, pc}
     a5a:	bf00      	nop
     a5c:	e000e100 	.word	0xe000e100
     a60:	80000100 	.word	0x80000100

00000a64 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
     a64:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	u32_t *vtor_ns = (u32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     a66:	f44f 4440 	mov.w	r4, #49152	; 0xc000
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     a6a:	f24c 0504 	movw	r5, #49156	; 0xc004
{
     a6e:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
     a70:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     a74:	482c      	ldr	r0, [pc, #176]	; (b28 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x9c>)
     a76:	f002 ff61 	bl	393c <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     a7a:	6821      	ldr	r1, [r4, #0]
     a7c:	482b      	ldr	r0, [pc, #172]	; (b2c <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xa0>)
     a7e:	f002 ff5d 	bl	393c <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     a82:	6829      	ldr	r1, [r5, #0]
     a84:	482a      	ldr	r0, [pc, #168]	; (b30 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xa4>)
     a86:	f002 ff59 	bl	393c <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     a8a:	2210      	movs	r2, #16
     a8c:	2100      	movs	r1, #0
     a8e:	4668      	mov	r0, sp
     a90:	f003 f924 	bl	3cdc <memset>
		.vtor_ns = (u32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
     a94:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
     a96:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     a98:	9300      	str	r3, [sp, #0]
     a9a:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
     a9c:	f7ff fda4 	bl	5e8 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
     aa0:	2001      	movs	r0, #1
     aa2:	f7ff fdd1 	bl	648 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
     aa6:	2000      	movs	r0, #0
     aa8:	f7ff fdba 	bl	620 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
     aac:	2000      	movs	r0, #0
     aae:	f7ff fddf 	bl	670 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
     ab2:	2101      	movs	r1, #1
     ab4:	2000      	movs	r0, #0
     ab6:	f7ff fdf9 	bl	6ac <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
     aba:	f7ff fded 	bl	698 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     abe:	682c      	ldr	r4, [r5, #0]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
     ac0:	481c      	ldr	r0, [pc, #112]	; (b34 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xa8>)
     ac2:	f002 ff3b 	bl	393c <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
     ac6:	2008      	movs	r0, #8
     ac8:	f7ff ff9e 	bl	a08 <spm_config_peripheral.constprop.1>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     acc:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
     ad0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     ad4:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
     ad8:	0864      	lsrs	r4, r4, #1
     ada:	0064      	lsls	r4, r4, #1
     adc:	4620      	mov	r0, r4
     ade:	4621      	mov	r1, r4
     ae0:	4622      	mov	r2, r4
     ae2:	4623      	mov	r3, r4
     ae4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     ae8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     aec:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     af0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     af4:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     af8:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     afc:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     b00:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     b04:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     b08:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     b0c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     b10:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     b14:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     b18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     b1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     b20:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     b24:	f7ff fd32 	bl	58c <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
     b28:	000047e0 	.word	0x000047e0
     b2c:	000047f7 	.word	0x000047f7
     b30:	0000480c 	.word	0x0000480c
     b34:	0000482a 	.word	0x0000482a

00000b38 <spm_config>:
		      (u32_t)reset_ns);
	}
}

void spm_config(void)
{
     b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash region\t\tDomain\t\tPermissions\n");
     b3c:	4871      	ldr	r0, [pc, #452]	; (d04 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x14c>)
     b3e:	f002 fefd 	bl	393c <printk>
	for (size_t i = 0; i < ARRAY_SIZE(flash_perm); i++) {
     b42:	2100      	movs	r1, #0
     b44:	4e70      	ldr	r6, [pc, #448]	; (d08 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x150>)
		NRF_SPU->FLASHREGION[i].PERM = flash_perm[i];
     b46:	f8df 91dc 	ldr.w	r9, [pc, #476]	; d24 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x16c>
		PRINT("%02u 0x%05x 0x%05x \t", i, 32 * KB(i), 32 * KB(i + 1));
     b4a:	f8df 8204 	ldr.w	r8, [pc, #516]	; d50 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x198>
		PRINT("%c", flash_perm[i] & FLASH_READ  ? 'r' : '-');
     b4e:	4d6f      	ldr	r5, [pc, #444]	; (d0c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x154>)
		NRF_SPU->FLASHREGION[i].PERM = flash_perm[i];
     b50:	f856 4b04 	ldr.w	r4, [r6], #4
     b54:	03ca      	lsls	r2, r1, #15
     b56:	f501 73c0 	add.w	r3, r1, #384	; 0x180
     b5a:	f849 4023 	str.w	r4, [r9, r3, lsl #2]
		PRINT("%02u 0x%05x 0x%05x \t", i, 32 * KB(i), 32 * KB(i + 1));
     b5e:	4640      	mov	r0, r8
     b60:	f502 4300 	add.w	r3, r2, #32768	; 0x8000
     b64:	1c4f      	adds	r7, r1, #1
     b66:	f002 fee9 	bl	393c <printk>
		PRINT("%s", flash_perm[i] & FLASH_SECURE ? "Secure\t\t" :
     b6a:	4b69      	ldr	r3, [pc, #420]	; (d10 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x158>)
     b6c:	f014 0f10 	tst.w	r4, #16
     b70:	4968      	ldr	r1, [pc, #416]	; (d14 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x15c>)
     b72:	4869      	ldr	r0, [pc, #420]	; (d18 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x160>)
     b74:	bf08      	it	eq
     b76:	4619      	moveq	r1, r3
     b78:	f002 fee0 	bl	393c <printk>
		PRINT("%c", flash_perm[i] & FLASH_READ  ? 'r' : '-');
     b7c:	f014 0f04 	tst.w	r4, #4
     b80:	bf14      	ite	ne
     b82:	2172      	movne	r1, #114	; 0x72
     b84:	212d      	moveq	r1, #45	; 0x2d
     b86:	4628      	mov	r0, r5
     b88:	f002 fed8 	bl	393c <printk>
		PRINT("%c", flash_perm[i] & FLASH_WRITE ? 'w' : '-');
     b8c:	f014 0f02 	tst.w	r4, #2
     b90:	bf14      	ite	ne
     b92:	2177      	movne	r1, #119	; 0x77
     b94:	212d      	moveq	r1, #45	; 0x2d
     b96:	4628      	mov	r0, r5
     b98:	f002 fed0 	bl	393c <printk>
		PRINT("%c", flash_perm[i] & FLASH_EXEC  ? 'x' : '-');
     b9c:	f014 0f01 	tst.w	r4, #1
     ba0:	bf14      	ite	ne
     ba2:	2178      	movne	r1, #120	; 0x78
     ba4:	212d      	moveq	r1, #45	; 0x2d
     ba6:	4628      	mov	r0, r5
     ba8:	f002 fec8 	bl	393c <printk>
		PRINT("%c", flash_perm[i] & FLASH_LOCK  ? 'l' : '-');
     bac:	f414 7f80 	tst.w	r4, #256	; 0x100
     bb0:	bf14      	ite	ne
     bb2:	216c      	movne	r1, #108	; 0x6c
     bb4:	212d      	moveq	r1, #45	; 0x2d
     bb6:	4628      	mov	r0, r5
     bb8:	f002 fec0 	bl	393c <printk>
		PRINT("\n");
     bbc:	4857      	ldr	r0, [pc, #348]	; (d1c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x164>)
     bbe:	f002 febd 	bl	393c <printk>
	for (size_t i = 0; i < ARRAY_SIZE(flash_perm); i++) {
     bc2:	2f20      	cmp	r7, #32
     bc4:	4639      	mov	r1, r7
     bc6:	d1c3      	bne.n	b50 <spm_config+0x18>
	u32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
     bc8:	4b55      	ldr	r3, [pc, #340]	; (d20 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x168>)
	NRF_SPU->FLASHNSC[0].REGION = FLASH_NSC_REGION_FROM_ADDR(__sg_start);
     bca:	4a56      	ldr	r2, [pc, #344]	; (d24 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x16c>)
     bcc:	f3c3 31c4 	ubfx	r1, r3, #15, #5
	u32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
     bd0:	f3c3 030e 	ubfx	r3, r3, #0, #15
     bd4:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
	NRF_SPU->FLASHNSC[0].SIZE = FLASH_NSC_SIZE_REG(nsc_size);
     bd8:	f3c3 1343 	ubfx	r3, r3, #5, #4
	NRF_SPU->FLASHNSC[0].REGION = FLASH_NSC_REGION_FROM_ADDR(__sg_start);
     bdc:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
	NRF_SPU->FLASHNSC[0].SIZE = FLASH_NSC_SIZE_REG(nsc_size);
     be0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
     be4:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
     be8:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
     bec:	484e      	ldr	r0, [pc, #312]	; (d28 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x170>)
     bee:	0152      	lsls	r2, r2, #5
     bf0:	f002 fea4 	bl	393c <printk>
	PRINT("\n");
     bf4:	4849      	ldr	r0, [pc, #292]	; (d1c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x164>)
     bf6:	f002 fea1 	bl	393c <printk>
	int err = spm_secure_services_init();
     bfa:	f002 ff72 	bl	3ae2 <spm_secure_services_init>
	if (err != 0) {
     bfe:	4601      	mov	r1, r0
     c00:	b110      	cbz	r0, c08 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x50>
		PRINT("Could not initialize secure services (err %d).\n", err);
     c02:	484a      	ldr	r0, [pc, #296]	; (d2c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x174>)
     c04:	f002 fe9a 	bl	393c <printk>
	PRINT("\n");
     c08:	4844      	ldr	r0, [pc, #272]	; (d1c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x164>)
     c0a:	f002 fe97 	bl	393c <printk>
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
     c0e:	4848      	ldr	r0, [pc, #288]	; (d30 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x178>)
     c10:	f002 fe94 	bl	393c <printk>
	for (size_t i = 0; i < ARRAY_SIZE(sram_perm); i++) {
     c14:	2100      	movs	r1, #0
     c16:	4e47      	ldr	r6, [pc, #284]	; (d34 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x17c>)
		NRF_SPU->RAMREGION[i].PERM = sram_perm[i];
     c18:	f8df 9108 	ldr.w	r9, [pc, #264]	; d24 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x16c>
		PRINT("%02u 0x%05x 0x%05x\t", i, 8 * KB(i), 8 * KB(i + 1));
     c1c:	f8df 8134 	ldr.w	r8, [pc, #308]	; d54 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x19c>
		PRINT("%c", sram_perm[i] & SRAM_READ  ? 'r' : '-');
     c20:	4d3a      	ldr	r5, [pc, #232]	; (d0c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x154>)
		NRF_SPU->RAMREGION[i].PERM = sram_perm[i];
     c22:	f856 4b04 	ldr.w	r4, [r6], #4
     c26:	034a      	lsls	r2, r1, #13
     c28:	f501 73e0 	add.w	r3, r1, #448	; 0x1c0
     c2c:	f849 4023 	str.w	r4, [r9, r3, lsl #2]
		PRINT("%02u 0x%05x 0x%05x\t", i, 8 * KB(i), 8 * KB(i + 1));
     c30:	4640      	mov	r0, r8
     c32:	f502 5300 	add.w	r3, r2, #8192	; 0x2000
     c36:	1c4f      	adds	r7, r1, #1
     c38:	f002 fe80 	bl	393c <printk>
		PRINT("%s", sram_perm[i] & SRAM_SECURE ? "Secure\t\t" :
     c3c:	4b34      	ldr	r3, [pc, #208]	; (d10 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x158>)
     c3e:	f014 0f10 	tst.w	r4, #16
     c42:	4934      	ldr	r1, [pc, #208]	; (d14 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x15c>)
     c44:	4834      	ldr	r0, [pc, #208]	; (d18 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x160>)
     c46:	bf08      	it	eq
     c48:	4619      	moveq	r1, r3
     c4a:	f002 fe77 	bl	393c <printk>
		PRINT("%c", sram_perm[i] & SRAM_READ  ? 'r' : '-');
     c4e:	f014 0f04 	tst.w	r4, #4
     c52:	bf14      	ite	ne
     c54:	2172      	movne	r1, #114	; 0x72
     c56:	212d      	moveq	r1, #45	; 0x2d
     c58:	4628      	mov	r0, r5
     c5a:	f002 fe6f 	bl	393c <printk>
		PRINT("%c", sram_perm[i] & SRAM_WRITE ? 'w' : '-');
     c5e:	f014 0f02 	tst.w	r4, #2
     c62:	bf14      	ite	ne
     c64:	2177      	movne	r1, #119	; 0x77
     c66:	212d      	moveq	r1, #45	; 0x2d
     c68:	4628      	mov	r0, r5
     c6a:	f002 fe67 	bl	393c <printk>
		PRINT("%c", sram_perm[i] & SRAM_EXEC  ? 'x' : '-');
     c6e:	f014 0f01 	tst.w	r4, #1
     c72:	bf14      	ite	ne
     c74:	2178      	movne	r1, #120	; 0x78
     c76:	212d      	moveq	r1, #45	; 0x2d
     c78:	4628      	mov	r0, r5
     c7a:	f002 fe5f 	bl	393c <printk>
		PRINT("%c", sram_perm[i] & SRAM_LOCK  ? 'l' : '-');
     c7e:	f414 7f80 	tst.w	r4, #256	; 0x100
     c82:	bf14      	ite	ne
     c84:	216c      	movne	r1, #108	; 0x6c
     c86:	212d      	moveq	r1, #45	; 0x2d
     c88:	4628      	mov	r0, r5
     c8a:	f002 fe57 	bl	393c <printk>
		PRINT("\n");
     c8e:	4823      	ldr	r0, [pc, #140]	; (d1c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x164>)
     c90:	f002 fe54 	bl	393c <printk>
	for (size_t i = 0; i < ARRAY_SIZE(sram_perm); i++) {
     c94:	2f20      	cmp	r7, #32
     c96:	4639      	mov	r1, r7
     c98:	d1c3      	bne.n	c22 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x6a>
	PRINT("\n");
     c9a:	4820      	ldr	r0, [pc, #128]	; (d1c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x164>)
     c9c:	f002 fe4e 	bl	393c <printk>
	NRF_SPU->DPPI[0].PERM = mask;
     ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
		NRF_SPU->GPIOPORT[0].PERM = 0;
     ca4:	2400      	movs	r4, #0
	NRF_SPU->DPPI[0].PERM = mask;
     ca6:	4d1f      	ldr	r5, [pc, #124]	; (d24 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x16c>)
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
     ca8:	4823      	ldr	r0, [pc, #140]	; (d38 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x180>)
	NRF_SPU->DPPI[0].PERM = mask;
     caa:	f8c5 3480 	str.w	r3, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
     cae:	f002 fe45 	bl	393c <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
     cb2:	4f22      	ldr	r7, [pc, #136]	; (d3c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x184>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
     cb4:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
     cb8:	f8df 809c 	ldr.w	r8, [pc, #156]	; d58 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1a0>
     cbc:	4d20      	ldr	r5, [pc, #128]	; (d40 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x188>)
     cbe:	f8df 909c 	ldr.w	r9, [pc, #156]	; d5c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1a4>
     cc2:	796e      	ldrb	r6, [r5, #5]
     cc4:	682a      	ldr	r2, [r5, #0]
     cc6:	2e00      	cmp	r6, #0
     cc8:	bf14      	ite	ne
     cca:	463b      	movne	r3, r7
     ccc:	4643      	moveq	r3, r8
     cce:	4621      	mov	r1, r4
     cd0:	4648      	mov	r0, r9
     cd2:	f002 fe33 	bl	393c <printk>
		if (!periph[i].nonsecure) {
     cd6:	b966      	cbnz	r6, cf2 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x13a>
			PRINT("\tSKIP\n");
     cd8:	481a      	ldr	r0, [pc, #104]	; (d44 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x18c>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     cda:	3401      	adds	r4, #1
			PRINT("\tOK\n");
     cdc:	f002 fe2e 	bl	393c <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     ce0:	2c19      	cmp	r4, #25
     ce2:	f105 0508 	add.w	r5, r5, #8
     ce6:	d1ec      	bne.n	cc2 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x10a>
	PRINT("\n");
     ce8:	480c      	ldr	r0, [pc, #48]	; (d1c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x164>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
     cea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
     cee:	f002 be25 	b.w	393c <printk>
		err = spm_config_peripheral(periph[i].id, false);
     cf2:	7928      	ldrb	r0, [r5, #4]
     cf4:	f7ff fe88 	bl	a08 <spm_config_peripheral.constprop.1>
		if (err) {
     cf8:	b108      	cbz	r0, cfe <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x146>
			PRINT("\tERROR\n");
     cfa:	4813      	ldr	r0, [pc, #76]	; (d48 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x190>)
     cfc:	e7ed      	b.n	cda <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x122>
			PRINT("\tOK\n");
     cfe:	4813      	ldr	r0, [pc, #76]	; (d4c <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x194>)
     d00:	e7eb      	b.n	cda <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x122>
     d02:	bf00      	nop
     d04:	000046bc 	.word	0x000046bc
     d08:	00004344 	.word	0x00004344
     d0c:	000046f4 	.word	0x000046f4
     d10:	000046a5 	.word	0x000046a5
     d14:	0000469c 	.word	0x0000469c
     d18:	000047c9 	.word	0x000047c9
     d1c:	000049eb 	.word	0x000049eb
     d20:	00007fe0 	.word	0x00007fe0
     d24:	50003000 	.word	0x50003000
     d28:	000046f7 	.word	0x000046f7
     d2c:	0000473d 	.word	0x0000473d
     d30:	0000476d 	.word	0x0000476d
     d34:	0000448c 	.word	0x0000448c
     d38:	000047a3 	.word	0x000047a3
     d3c:	000046b1 	.word	0x000046b1
     d40:	000043c4 	.word	0x000043c4
     d44:	000047cc 	.word	0x000047cc
     d48:	000047d3 	.word	0x000047d3
     d4c:	000047db 	.word	0x000047db
     d50:	000046df 	.word	0x000046df
     d54:	0000478f 	.word	0x0000478f
     d58:	000046a9 	.word	0x000046a9
     d5c:	000047bf 	.word	0x000047bf

00000d60 <__acle_se_spm_request_read>:
	size_t size;
};

__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read(void *destination, u32_t addr, size_t len)
{
     d60:	b510      	push	{r4, lr}
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
     d62:	2800      	cmp	r0, #0
     d64:	d04b      	beq.n	dfe <__acle_se_spm_request_read+0x9e>
     d66:	2a00      	cmp	r2, #0
     d68:	d049      	beq.n	dfe <__acle_se_spm_request_read+0x9e>

	for (size_t i = 0; i < ARRAY_SIZE(ranges); i++) {
		u32_t start = ranges[i].start;
		u32_t size = ranges[i].size;

		if (addr >= start && addr + len <= start + size) {
     d6a:	4b26      	ldr	r3, [pc, #152]	; (e04 <__acle_se_spm_request_read+0xa4>)
     d6c:	4299      	cmp	r1, r3
     d6e:	d93c      	bls.n	dea <__acle_se_spm_request_read+0x8a>
     d70:	1854      	adds	r4, r2, r1
     d72:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
     d76:	429c      	cmp	r4, r3
     d78:	d83a      	bhi.n	df0 <__acle_se_spm_request_read+0x90>
			memcpy(destination, (const void *)addr, len);
     d7a:	f002 ff85 	bl	3c88 <memcpy>
			return 0;
     d7e:	2000      	movs	r0, #0
		}
	}

	return -EPERM;
}
     d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     d84:	4671      	mov	r1, lr
     d86:	4672      	mov	r2, lr
     d88:	4673      	mov	r3, lr
     d8a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     d8e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     d92:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     d96:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     d9a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     d9e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     da2:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     da6:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     daa:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     dae:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     db2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     db6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     dba:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     dc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     dc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     dca:	f38e 8c00 	msr	CPSR_fs, lr
     dce:	b410      	push	{r4}
     dd0:	eef1 ca10 	vmrs	ip, fpscr
     dd4:	f64f 7460 	movw	r4, #65376	; 0xff60
     dd8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
     ddc:	ea0c 0c04 	and.w	ip, ip, r4
     de0:	eee1 ca10 	vmsr	fpscr, ip
     de4:	bc10      	pop	{r4}
     de6:	46f4      	mov	ip, lr
     de8:	4774      	bxns	lr
		if (addr >= start && addr + len <= start + size) {
     dea:	4b07      	ldr	r3, [pc, #28]	; (e08 <__acle_se_spm_request_read+0xa8>)
     dec:	4299      	cmp	r1, r3
     dee:	d903      	bls.n	df8 <__acle_se_spm_request_read+0x98>
     df0:	4b06      	ldr	r3, [pc, #24]	; (e0c <__acle_se_spm_request_read+0xac>)
     df2:	1854      	adds	r4, r2, r1
     df4:	429c      	cmp	r4, r3
     df6:	d9c0      	bls.n	d7a <__acle_se_spm_request_read+0x1a>
	return -EPERM;
     df8:	f04f 30ff 	mov.w	r0, #4294967295
     dfc:	e7c0      	b.n	d80 <__acle_se_spm_request_read+0x20>
		return -EINVAL;
     dfe:	f06f 0015 	mvn.w	r0, #21
     e02:	e7bd      	b.n	d80 <__acle_se_spm_request_read+0x20>
     e04:	00ff0203 	.word	0x00ff0203
     e08:	00ff012f 	.word	0x00ff012f
     e0c:	00ff0138 	.word	0x00ff0138

00000e10 <__acle_se_spm_firmware_info>:
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info(u32_t fw_address, struct fw_info *info)
{
     e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e14:	4686      	mov	lr, r0
     e16:	b085      	sub	sp, #20
	const struct fw_info *tmp_info;

	if (info == NULL) {
     e18:	460f      	mov	r7, r1
     e1a:	2900      	cmp	r1, #0
     e1c:	d06d      	beq.n	efa <__acle_se_spm_firmware_info+0xea>
/* Search for the firmware_info structure inside the firmware. */
static inline const struct fw_info *fw_info_find(u32_t firmware_address)
{
	const struct fw_info *finfo;

	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
     e1e:	2500      	movs	r5, #0
		if (expected_32[i] != actual_32[i]) {
     e20:	f645 3a01 	movw	sl, #23297	; 0x5b01
     e24:	f8df c0dc 	ldr.w	ip, [pc, #220]	; f04 <__acle_se_spm_firmware_info+0xf4>
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     e28:	4e35      	ldr	r6, [pc, #212]	; (f00 <__acle_se_spm_firmware_info+0xf0>)
		if (expected_32[i] != actual_32[i]) {
     e2a:	f8df 80dc 	ldr.w	r8, [pc, #220]	; f08 <__acle_se_spm_firmware_info+0xf8>
     e2e:	f8df 90dc 	ldr.w	r9, [pc, #220]	; f0c <__acle_se_spm_firmware_info+0xfc>
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     e32:	ac01      	add	r4, sp, #4
		finfo = fw_info_check(firmware_address +
						allowed_offsets[i]);
     e34:	f85c bb04 	ldr.w	fp, [ip], #4
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     e38:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
     e3c:	eb0e 030b 	add.w	r3, lr, fp
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     e40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (((u32_t)expected % 4) || ((u32_t)actual % 4) || ((u32_t)len % 4)) {
     e44:	079a      	lsls	r2, r3, #30
     e46:	d10f      	bne.n	e68 <__acle_se_spm_firmware_info+0x58>
		if (expected_32[i] != actual_32[i]) {
     e48:	f85e 200b 	ldr.w	r2, [lr, fp]
     e4c:	4542      	cmp	r2, r8
     e4e:	d105      	bne.n	e5c <__acle_se_spm_firmware_info+0x4c>
     e50:	685a      	ldr	r2, [r3, #4]
     e52:	454a      	cmp	r2, r9
     e54:	d102      	bne.n	e5c <__acle_se_spm_firmware_info+0x4c>
     e56:	689a      	ldr	r2, [r3, #8]
     e58:	4552      	cmp	r2, sl
     e5a:	d012      	beq.n	e82 <__acle_se_spm_firmware_info+0x72>
	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
     e5c:	3501      	adds	r5, #1
     e5e:	2d03      	cmp	r5, #3
     e60:	d1e8      	bne.n	e34 <__acle_se_spm_firmware_info+0x24>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
     e62:	f06f 000d 	mvn.w	r0, #13
     e66:	e012      	b.n	e8e <__acle_se_spm_firmware_info+0x7e>
     e68:	4621      	mov	r1, r4
	if (((u32_t)expected % 4) || ((u32_t)actual % 4) || ((u32_t)len % 4)) {
     e6a:	2200      	movs	r2, #0
		if (expected_8[i] != actual_8[i]) {
     e6c:	f811 0b01 	ldrb.w	r0, [r1], #1
     e70:	f813 b002 	ldrb.w	fp, [r3, r2]
     e74:	4583      	cmp	fp, r0
     e76:	d1f1      	bne.n	e5c <__acle_se_spm_firmware_info+0x4c>
	for (u32_t i = 0; i < len; i++) {
     e78:	3201      	adds	r2, #1
     e7a:	2a0c      	cmp	r2, #12
     e7c:	d1f6      	bne.n	e6c <__acle_se_spm_firmware_info+0x5c>
		if (finfo) {
     e7e:	2b00      	cmp	r3, #0
     e80:	d0ec      	beq.n	e5c <__acle_se_spm_firmware_info+0x4c>
		memcpy(info, tmp_info, sizeof(*tmp_info));
     e82:	2220      	movs	r2, #32
     e84:	4619      	mov	r1, r3
     e86:	4638      	mov	r0, r7
     e88:	f002 fefe 	bl	3c88 <memcpy>
		return 0;
     e8c:	2000      	movs	r0, #0
}
     e8e:	b005      	add	sp, #20
     e90:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     e94:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     e98:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     e9c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     ea0:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     ea4:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     ea8:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     eac:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     eb0:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     eb4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     eb8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     ebc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     ec0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     ec4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     ec8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     ecc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ed0:	4671      	mov	r1, lr
     ed2:	4672      	mov	r2, lr
     ed4:	4673      	mov	r3, lr
     ed6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     eda:	f38e 8c00 	msr	CPSR_fs, lr
     ede:	b410      	push	{r4}
     ee0:	eef1 ca10 	vmrs	ip, fpscr
     ee4:	f64f 7460 	movw	r4, #65376	; 0xff60
     ee8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
     eec:	ea0c 0c04 	and.w	ip, ip, r4
     ef0:	eee1 ca10 	vmsr	fpscr, ip
     ef4:	bc10      	pop	{r4}
     ef6:	46f4      	mov	ip, lr
     ef8:	4774      	bxns	lr
		return -EINVAL;
     efa:	f06f 0015 	mvn.w	r0, #21
     efe:	e7c6      	b.n	e8e <__acle_se_spm_firmware_info+0x7e>
     f00:	000042e4 	.word	0x000042e4
     f04:	0000450c 	.word	0x0000450c
     f08:	281ee6de 	.word	0x281ee6de
     f0c:	8fcebb4c 	.word	0x8fcebb4c

00000f10 <nrf_cc310_platform_abort_init>:

/** @brief Function to initialize the nrf_cc310_platform abort APIs.
 */
void nrf_cc310_platform_abort_init(void)
{
	nrf_cc310_platform_set_abort(&apis);
     f10:	4801      	ldr	r0, [pc, #4]	; (f18 <nrf_cc310_platform_abort_init+0x8>)
     f12:	f001 be51 	b.w	2bb8 <nrf_cc310_platform_set_abort>
     f16:	bf00      	nop
     f18:	00004518 	.word	0x00004518

00000f1c <mutex_unlock>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock(nrf_cc310_platform_mutex_t *mutex) {
     f1c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
     f1e:	b130      	cbz	r0, f2e <mutex_unlock+0x12>
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     f20:	6843      	ldr	r3, [r0, #4]
     f22:	b13b      	cbz	r3, f34 <mutex_unlock+0x18>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
     f24:	6800      	ldr	r0, [r0, #0]
     f26:	f001 f85f 	bl	1fe8 <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC310_PLATFORM_SUCCESS;
     f2a:	2000      	movs	r0, #0
}
     f2c:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
     f2e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     f32:	e7fb      	b.n	f2c <mutex_unlock+0x10>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     f34:	4800      	ldr	r0, [pc, #0]	; (f38 <mutex_unlock+0x1c>)
     f36:	e7f9      	b.n	f2c <mutex_unlock+0x10>
     f38:	ffff8fea 	.word	0xffff8fea

00000f3c <mutex_free>:
static void mutex_free(nrf_cc310_platform_mutex_t *mutex) {
     f3c:	b538      	push	{r3, r4, r5, lr}
    if (mutex == NULL) {
     f3e:	4604      	mov	r4, r0
     f40:	b918      	cbnz	r0, f4a <mutex_free+0xe>
        platform_abort_apis.abort_fn(
     f42:	4b0b      	ldr	r3, [pc, #44]	; (f70 <mutex_free+0x34>)
     f44:	480b      	ldr	r0, [pc, #44]	; (f74 <mutex_free+0x38>)
     f46:	685b      	ldr	r3, [r3, #4]
     f48:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     f4a:	6865      	ldr	r5, [r4, #4]
     f4c:	b155      	cbz	r5, f64 <mutex_free+0x28>
    if ((mutex->flags & NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED) == 0) {
     f4e:	f015 0502 	ands.w	r5, r5, #2
     f52:	6820      	ldr	r0, [r4, #0]
     f54:	d107      	bne.n	f66 <mutex_free+0x2a>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
     f56:	4601      	mov	r1, r0
     f58:	4807      	ldr	r0, [pc, #28]	; (f78 <mutex_free+0x3c>)
     f5a:	f000 ffa5 	bl	1ea8 <k_mem_slab_free>
        mutex->mutex = NULL;
     f5e:	6025      	str	r5, [r4, #0]
    mutex->flags = NRF_CC310_PLATFORM_MUTEX_MASK_INVALID;
     f60:	2300      	movs	r3, #0
     f62:	6063      	str	r3, [r4, #4]
}
     f64:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     f66:	2214      	movs	r2, #20
     f68:	2100      	movs	r1, #0
     f6a:	f002 feb7 	bl	3cdc <memset>
     f6e:	e7f7      	b.n	f60 <mutex_free+0x24>
     f70:	20001428 	.word	0x20001428
     f74:	00004948 	.word	0x00004948
     f78:	20000028 	.word	0x20000028

00000f7c <mutex_init>:
static void mutex_init(nrf_cc310_platform_mutex_t *mutex) {
     f7c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
     f7e:	4604      	mov	r4, r0
     f80:	b918      	cbnz	r0, f8a <mutex_init+0xe>
        platform_abort_apis.abort_fn(
     f82:	4b13      	ldr	r3, [pc, #76]	; (fd0 <mutex_init+0x54>)
     f84:	4813      	ldr	r0, [pc, #76]	; (fd4 <mutex_init+0x58>)
     f86:	685b      	ldr	r3, [r3, #4]
     f88:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID &&
     f8a:	6863      	ldr	r3, [r4, #4]
     f8c:	b9bb      	cbnz	r3, fbe <mutex_init+0x42>
     f8e:	6823      	ldr	r3, [r4, #0]
     f90:	b9ab      	cbnz	r3, fbe <mutex_init+0x42>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
     f92:	f04f 32ff 	mov.w	r2, #4294967295
     f96:	4621      	mov	r1, r4
     f98:	480f      	ldr	r0, [pc, #60]	; (fd8 <mutex_init+0x5c>)
     f9a:	f000 ff59 	bl	1e50 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
     f9e:	b908      	cbnz	r0, fa4 <mutex_init+0x28>
     fa0:	6823      	ldr	r3, [r4, #0]
     fa2:	b91b      	cbnz	r3, fac <mutex_init+0x30>
            platform_abort_apis.abort_fn(
     fa4:	4b0a      	ldr	r3, [pc, #40]	; (fd0 <mutex_init+0x54>)
     fa6:	480d      	ldr	r0, [pc, #52]	; (fdc <mutex_init+0x60>)
     fa8:	685b      	ldr	r3, [r3, #4]
     faa:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     fac:	2214      	movs	r2, #20
     fae:	2100      	movs	r1, #0
     fb0:	6820      	ldr	r0, [r4, #0]
     fb2:	f002 fe93 	bl	3cdc <memset>
        mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
     fb6:	6863      	ldr	r3, [r4, #4]
     fb8:	f043 0302 	orr.w	r3, r3, #2
     fbc:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
     fbe:	6820      	ldr	r0, [r4, #0]
	z_impl_k_mutex_init(mutex);
     fc0:	f002 ff26 	bl	3e10 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_VALID;
     fc4:	6863      	ldr	r3, [r4, #4]
     fc6:	f043 0301 	orr.w	r3, r3, #1
     fca:	6063      	str	r3, [r4, #4]
}
     fcc:	bd10      	pop	{r4, pc}
     fce:	bf00      	nop
     fd0:	20001428 	.word	0x20001428
     fd4:	00004948 	.word	0x00004948
     fd8:	20000028 	.word	0x20000028
     fdc:	0000496e 	.word	0x0000496e

00000fe0 <mutex_lock>:
static int32_t mutex_lock(nrf_cc310_platform_mutex_t *mutex) {
     fe0:	b508      	push	{r3, lr}
    if(mutex == NULL) {
     fe2:	b158      	cbz	r0, ffc <mutex_lock+0x1c>
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     fe4:	6843      	ldr	r3, [r0, #4]
     fe6:	b163      	cbz	r3, 1002 <CONFIG_AT_HOST_CMD_MAX_LEN+0x2>
    p_mutex = (struct k_mutex *)mutex->mutex;
     fe8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
     fea:	f04f 31ff 	mov.w	r1, #4294967295
     fee:	f000 ff89 	bl	1f04 <z_impl_k_mutex_lock>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
     ff2:	4b05      	ldr	r3, [pc, #20]	; (1008 <CONFIG_AT_HOST_CMD_MAX_LEN+0x8>)
    if (ret == 0) {
     ff4:	2800      	cmp	r0, #0
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
     ff6:	bf18      	it	ne
     ff8:	4618      	movne	r0, r3
}
     ffa:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
     ffc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1000:	e7fb      	b.n	ffa <mutex_lock+0x1a>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1002:	4802      	ldr	r0, [pc, #8]	; (100c <CONFIG_AT_HOST_CMD_MAX_LEN+0xc>)
    1004:	e7f9      	b.n	ffa <mutex_lock+0x1a>
    1006:	bf00      	nop
    1008:	ffff8fe9 	.word	0xffff8fe9
    100c:	ffff8fea 	.word	0xffff8fea

00001010 <nrf_cc310_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc310_platform mutex APIs
 */
void nrf_cc310_platform_mutex_init(void)
{
    1010:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1012:	4906      	ldr	r1, [pc, #24]	; (102c <nrf_cc310_platform_mutex_init+0x1c>)
    1014:	2340      	movs	r3, #64	; 0x40
    1016:	4806      	ldr	r0, [pc, #24]	; (1030 <nrf_cc310_platform_mutex_init+0x20>)
    1018:	2214      	movs	r2, #20
    101a:	f002 fee7 	bl	3dec <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
}
    101e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
    1022:	4904      	ldr	r1, [pc, #16]	; (1034 <nrf_cc310_platform_mutex_init+0x24>)
    1024:	4804      	ldr	r0, [pc, #16]	; (1038 <nrf_cc310_platform_mutex_init+0x28>)
    1026:	f001 bdff 	b.w	2c28 <nrf_cc310_platform_set_mutexes>
    102a:	bf00      	nop
    102c:	20000044 	.word	0x20000044
    1030:	20000028 	.word	0x20000028
    1034:	00004530 	.word	0x00004530
    1038:	00004520 	.word	0x00004520

0000103c <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    103c:	4804      	ldr	r0, [pc, #16]	; (1050 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    103e:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    1040:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    1042:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    1044:	d003      	beq.n	104e <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    1046:	4903      	ldr	r1, [pc, #12]	; (1054 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    1048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    104c:	600a      	str	r2, [r1, #0]

0000104e <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    104e:	4770      	bx	lr
    ldr r0, =_kernel
    1050:	20000630 	.word	0x20000630
    ldr r1, =_SCS_ICSR
    1054:	e000ed04 	.word	0xe000ed04

00001058 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1058:	4912      	ldr	r1, [pc, #72]	; (10a4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    105a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    105c:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    1060:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1062:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1066:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    106a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    106c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1070:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1074:	4f0c      	ldr	r7, [pc, #48]	; (10a8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1076:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    107a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    107c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    107e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1080:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    1082:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1084:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1086:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    108a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    108c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    108e:	f002 fdae 	bl	3bee <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1092:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1096:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    109a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    109e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    10a2:	4770      	bx	lr
    ldr r1, =_kernel
    10a4:	20000630 	.word	0x20000630
    ldr v4, =_SCS_ICSR
    10a8:	e000ed04 	.word	0xe000ed04

000010ac <z_arm_svc>:
 */
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
    tst lr, #0x4    /* did we come from thread mode ? */
    10ac:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    10b0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    10b2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    10b6:	f3ef 8009 	mrsne	r0, PSP


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    10ba:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
    ldrb r1, [r1, #-2]
    10bc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
    tst r2, #0x1
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    10c0:	2902      	cmp	r1, #2
    beq _oops
    10c2:	d0ff      	beq.n	10c4 <_oops>

000010c4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    10c4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    10c6:	f002 fd87 	bl	3bd8 <z_do_kernel_oops>
    pop {r0, pc}
    10ca:	bd01      	pop	{r0, pc}

000010cc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    10cc:	4901      	ldr	r1, [pc, #4]	; (10d4 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    10ce:	2210      	movs	r2, #16
	str r2, [r1]
    10d0:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    10d2:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    10d4:	e000ed10 	.word	0xe000ed10

000010d8 <z_arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    10d8:	4040      	eors	r0, r0
	msr BASEPRI, r0
    10da:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    10de:	bf30      	wfi

	bx lr
    10e0:	4770      	bx	lr
    10e2:	bf00      	nop

000010e4 <z_arm_bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    10e4:	4040      	eors	r0, r0
	msr BASEPRI, r0
    10e6:	f380 8811 	msr	BASEPRI, r0
	/* RETTOBASE flag is not banked between security states.
	 * Therefore, we cannot rely on this flag, to obtain the SP
	 * of the current security state.
	 * Instead, we use the EXC_RETURN.SPSEL flag.
	 */
 	ldr r0, =0x4
    10ea:	f04f 0004 	mov.w	r0, #4
	mov r1, lr
    10ee:	4671      	mov	r1, lr
	tst r1, r0
    10f0:	4201      	tst	r1, r0
	beq _s_stack_frame_msp
    10f2:	d002      	beq.n	10fa <_s_stack_frame_msp>
	mrs r0, PSP
    10f4:	f3ef 8009 	mrs	r0, PSP
	bne _s_stack_frame_endif
    10f8:	d101      	bne.n	10fe <_s_stack_frame_endif>

000010fa <_s_stack_frame_msp>:
_s_stack_frame_msp:
	mrs r0, MSP
    10fa:	f3ef 8008 	mrs	r0, MSP

000010fe <_s_stack_frame_endif>:
	 *
	 * To determine this we need to inspect the EXC_RETURN value
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
    10fe:	4671      	mov	r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    1100:	b501      	push	{r0, lr}
	bl z_arm_fault
    1102:	f000 f961 	bl	13c8 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    1106:	bd01      	pop	{r0, pc}

00001108 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1108:	bf30      	wfi
    b z_SysNmiOnReset
    110a:	f7ff bffd 	b.w	1108 <z_SysNmiOnReset>
    110e:	bf00      	nop

00001110 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1110:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1112:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1114:	4a0b      	ldr	r2, [pc, #44]	; (1144 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1116:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    1118:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    111a:	bf1e      	ittt	ne
	movne	r1, #0
    111c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    111e:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    1120:	f002 fe62 	blne	3de8 <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1124:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1126:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    112a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    112e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1132:	4905      	ldr	r1, [pc, #20]	; (1148 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1134:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1136:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    1138:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    113a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    113e:	4903      	ldr	r1, [pc, #12]	; (114c <_isr_wrapper+0x3c>)
	bx r1
    1140:	4708      	bx	r1
    1142:	0000      	.short	0x0000
	ldr r2, =_kernel
    1144:	20000630 	.word	0x20000630
	ldr r1, =_sw_isr_table
    1148:	00004064 	.word	0x00004064
	ldr r1, =z_arm_int_exit
    114c:	0000103d 	.word	0x0000103d

00001150 <z_arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1150:	4a09      	ldr	r2, [pc, #36]	; (1178 <z_arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1152:	490a      	ldr	r1, [pc, #40]	; (117c <z_arch_swap+0x2c>)
	_current->arch.basepri = key;
    1154:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1156:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    1158:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    115a:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    115c:	4908      	ldr	r1, [pc, #32]	; (1180 <z_arch_swap+0x30>)
    115e:	684b      	ldr	r3, [r1, #4]
    1160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1164:	604b      	str	r3, [r1, #4]
    1166:	2300      	movs	r3, #0
    1168:	f383 8811 	msr	BASEPRI, r3
    116c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1170:	6893      	ldr	r3, [r2, #8]
}
    1172:	6e98      	ldr	r0, [r3, #104]	; 0x68
    1174:	4770      	bx	lr
    1176:	bf00      	nop
    1178:	20000630 	.word	0x20000630
    117c:	00004574 	.word	0x00004574
    1180:	e000ed00 	.word	0xe000ed00

00001184 <z_arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1184:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1186:	2b00      	cmp	r3, #0
    1188:	db08      	blt.n	119c <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    118a:	2201      	movs	r2, #1
    118c:	f000 001f 	and.w	r0, r0, #31
    1190:	fa02 f000 	lsl.w	r0, r2, r0
    1194:	4a02      	ldr	r2, [pc, #8]	; (11a0 <z_arch_irq_enable+0x1c>)
    1196:	095b      	lsrs	r3, r3, #5
    1198:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    119c:	4770      	bx	lr
    119e:	bf00      	nop
    11a0:	e000e100 	.word	0xe000e100

000011a4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    11a4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    11a6:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    11a8:	f101 0101 	add.w	r1, r1, #1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11ac:	bfa8      	it	ge
    11ae:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    11b2:	ea4f 1141 	mov.w	r1, r1, lsl #5
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11b6:	bfb8      	it	lt
    11b8:	4b05      	ldrlt	r3, [pc, #20]	; (11d0 <z_arm_irq_priority_set+0x2c>)
    11ba:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11bc:	bfab      	itete	ge
    11be:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11c2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11c6:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11ca:	5419      	strblt	r1, [r3, r0]
}
    11cc:	4770      	bx	lr
    11ce:	bf00      	nop
    11d0:	e000ed14 	.word	0xe000ed14

000011d4 <z_arch_new_thread>:
 */
void z_arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		       size_t stackSize, k_thread_entry_t pEntry,
		       void *parameter1, void *parameter2, void *parameter3,
		       int priority, unsigned int options)
{
    11d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    11d8:	188c      	adds	r4, r1, r2
{
    11da:	4688      	mov	r8, r1
    11dc:	4617      	mov	r7, r2
    11de:	461e      	mov	r6, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    11e0:	2204      	movs	r2, #4
    11e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11e4:	9909      	ldr	r1, [sp, #36]	; 0x24
    11e6:	4605      	mov	r5, r0
    11e8:	f002 feef 	bl	3fca <z_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    11ec:	2200      	movs	r2, #0
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    11ee:	490d      	ldr	r1, [pc, #52]	; (1224 <z_arch_new_thread+0x50>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    11f0:	f1a4 0320 	sub.w	r3, r4, #32
    11f4:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    11f8:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
    11fc:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    1200:	e9c5 8716 	strd	r8, r7, [r5, #88]	; 0x58
    1204:	6199      	str	r1, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    1206:	9906      	ldr	r1, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    1208:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    120a:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    120c:	9907      	ldr	r1, [sp, #28]
    120e:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    1210:	9908      	ldr	r1, [sp, #32]
    1212:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
    1214:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    1218:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    121a:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    121c:	666a      	str	r2, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    121e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1222:	bf00      	nop
    1224:	00003629 	.word	0x00003629

00001228 <z_arch_switch_to_main_thread>:

void z_arch_switch_to_main_thread(struct k_thread *main_thread,
				  k_thread_stack_t *main_stack,
				  size_t main_stack_size,
				  k_thread_entry_t _main)
{
    1228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    122a:	461e      	mov	r6, r3
    122c:	4605      	mov	r5, r0
    122e:	460c      	mov	r4, r1
    1230:	4617      	mov	r7, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    1232:	2300      	movs	r3, #0
    1234:	eee1 3a10 	vmsr	fpscr, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    1238:	f000 f96e 	bl	1518 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    123c:	4b0b      	ldr	r3, [pc, #44]	; (126c <z_arch_switch_to_main_thread+0x44>)
	start_of_main_stack =
    123e:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1240:	4628      	mov	r0, r5
	_current = main_thread;
    1242:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    1244:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1248:	f002 fcd1 	bl	3bee <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    124c:	4630      	mov	r0, r6
    124e:	f384 8809 	msr	PSP, r4
    1252:	b663      	cpsie	if
    1254:	f04f 0100 	mov.w	r1, #0
    1258:	f381 8811 	msr	BASEPRI, r1
    125c:	f3bf 8f6f 	isb	sy
    1260:	2100      	movs	r1, #0
    1262:	2200      	movs	r2, #0
    1264:	2300      	movs	r3, #0
    1266:	f002 f9df 	bl	3628 <z_thread_entry>
	"bl z_thread_entry\n\t"	/* z_thread_entry(_main, 0, 0, 0); */
	:
	: "r" (_main), "r" (start_of_main_stack)
	);

	CODE_UNREACHABLE;
    126a:	bf00      	nop
    126c:	20000630 	.word	0x20000630

00001270 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1270:	4a11      	ldr	r2, [pc, #68]	; (12b8 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1272:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1274:	4b11      	ldr	r3, [pc, #68]	; (12bc <z_arm_prep_c+0x4c>)
    1276:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    127a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    127c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1280:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    1284:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1288:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    128c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
    1290:	4a0b      	ldr	r2, [pc, #44]	; (12c0 <z_arm_prep_c+0x50>)
    1292:	6853      	ldr	r3, [r2, #4]
    1294:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    1298:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    129a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    129e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    12a2:	2300      	movs	r3, #0
    12a4:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    12a8:	f000 fcf2 	bl	1c90 <z_bss_zero>
	z_data_copy();
    12ac:	f000 fcfa 	bl	1ca4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    12b0:	f000 f900 	bl	14b4 <z_arm_int_lib_init>
	z_cstart();
    12b4:	f000 fd28 	bl	1d08 <z_cstart>
    12b8:	00000000 	.word	0x00000000
    12bc:	e000ed00 	.word	0xe000ed00
    12c0:	e000ef30 	.word	0xe000ef30

000012c4 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    12c4:	f002 fb48 	bl	3958 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    12c8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    12ca:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    12ce:	4808      	ldr	r0, [pc, #32]	; (12f0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    12d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    12d4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    12d6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    12da:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    12de:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    12e0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    12e2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    12e6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    12ea:	f7ff ffc1 	bl	1270 <z_arm_prep_c>
    12ee:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    12f0:	20000bd0 	.word	0x20000bd0

000012f4 <mem_manage_fault.isra.2>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    12f4:	4b0c      	ldr	r3, [pc, #48]	; (1328 <mem_manage_fault.isra.2+0x34>)
    12f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    12f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    12fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    12fc:	0792      	lsls	r2, r2, #30
    12fe:	d508      	bpl.n	1312 <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    1300:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1302:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1304:	0612      	lsls	r2, r2, #24
    1306:	d504      	bpl.n	1312 <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    1308:	b118      	cbz	r0, 1312 <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    130a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    130c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1310:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    1312:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1314:	4b04      	ldr	r3, [pc, #16]	; (1328 <mem_manage_fault.isra.2+0x34>)
    1316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    131a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    131c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    131e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1322:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1324:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1326:	4770      	bx	lr
    1328:	e000ed00 	.word	0xe000ed00

0000132c <bus_fault.isra.3>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    132c:	4b0d      	ldr	r3, [pc, #52]	; (1364 <bus_fault.isra.3+0x38>)
    132e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1334:	0592      	lsls	r2, r2, #22
    1336:	d508      	bpl.n	134a <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1338:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    133a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    133c:	0412      	lsls	r2, r2, #16
    133e:	d504      	bpl.n	134a <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    1340:	b118      	cbz	r0, 134a <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1342:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1344:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1348:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    134a:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    134c:	4b05      	ldr	r3, [pc, #20]	; (1364 <bus_fault.isra.3+0x38>)
    134e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1352:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1354:	bf58      	it	pl
    1356:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    135a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    135e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1360:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1362:	4770      	bx	lr
    1364:	e000ed00 	.word	0xe000ed00

00001368 <usage_fault.isra.4>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1368:	4b07      	ldr	r3, [pc, #28]	; (1388 <usage_fault.isra.4+0x20>)

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;

	return reason;
}
    136a:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    136c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    136e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1376:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    137a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    137c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1380:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1384:	629a      	str	r2, [r3, #40]	; 0x28
}
    1386:	4770      	bx	lr
    1388:	e000ed00 	.word	0xe000ed00

0000138c <secure_fault.isra.5>:
 */
static void secure_fault(const z_arch_esf_t *esf)
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    138c:	4b0d      	ldr	r3, [pc, #52]	; (13c4 <secure_fault.isra.5+0x38>)
    138e:	699a      	ldr	r2, [r3, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    1390:	695a      	ldr	r2, [r3, #20]
		PR_EXC("  Address: 0x%x", sfar);
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    1392:	695a      	ldr	r2, [r3, #20]
    1394:	07d0      	lsls	r0, r2, #31
    1396:	d40f      	bmi.n	13b8 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid entry point");
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    1398:	695a      	ldr	r2, [r3, #20]
    139a:	0791      	lsls	r1, r2, #30
    139c:	d40c      	bmi.n	13b8 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid integrity signature");
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    139e:	695a      	ldr	r2, [r3, #20]
    13a0:	0752      	lsls	r2, r2, #29
    13a2:	d409      	bmi.n	13b8 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid exception return");
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    13a4:	695a      	ldr	r2, [r3, #20]
    13a6:	0710      	lsls	r0, r2, #28
    13a8:	d406      	bmi.n	13b8 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Attribution unit violation");
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    13aa:	695a      	ldr	r2, [r3, #20]
    13ac:	06d1      	lsls	r1, r2, #27
    13ae:	d403      	bmi.n	13b8 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    13b0:	695a      	ldr	r2, [r3, #20]
    13b2:	0692      	lsls	r2, r2, #26
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    13b4:	bf58      	it	pl
    13b6:	695a      	ldrpl	r2, [r3, #20]
		PR_FAULT_INFO("  Lazy state error");
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    13b8:	695a      	ldr	r2, [r3, #20]
    13ba:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    13be:	615a      	str	r2, [r3, #20]
}
    13c0:	4770      	bx	lr
    13c2:	bf00      	nop
    13c4:	e000edd0 	.word	0xe000edd0

000013c8 <z_arm_fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void z_arm_fault(z_arch_esf_t *esf, u32_t exc_return)
{
    13c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    13ca:	4604      	mov	r4, r0
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    13cc:	4a31      	ldr	r2, [pc, #196]	; (1494 <z_arm_fault+0xcc>)
	bool recoverable;

#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    13ce:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
    13d2:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    13d6:	6853      	ldr	r3, [r2, #4]
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    13d8:	d159      	bne.n	148e <z_arm_fault+0xc6>
			EXC_RETURN_INDICATOR_PREFIX) {
		/* Invalid EXC_RETURN value */
		goto _exit_fatal;
	}
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    13da:	f011 0001 	ands.w	r0, r1, #1
    13de:	d00a      	beq.n	13f6 <z_arm_fault+0x2e>
		 * This is a fatal error.
		 */
		goto _exit_fatal;
	}

	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    13e0:	0648      	lsls	r0, r1, #25
    13e2:	d411      	bmi.n	1408 <z_arm_fault+0x40>

		/* Handle the actual fault.
		 * Extract the correct stack frame from the Non-Secure state
		 * and supply it to the fault handing function.
		 */
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    13e4:	f011 0008 	ands.w	r0, r1, #8
    13e8:	d009      	beq.n	13fe <z_arm_fault+0x36>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    13ea:	f3ef 8489 	mrs	r4, PSP_NS
			esf = (z_arch_esf_t *)__TZ_get_PSP_NS();
			if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) == 0) {
    13ee:	6850      	ldr	r0, [r2, #4]
    13f0:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
    13f4:	d108      	bne.n	1408 <z_arm_fault+0x40>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_arm_fatal_error(reason, esf);
    13f6:	4621      	mov	r1, r4
    13f8:	f002 fbec 	bl	3bd4 <z_arm_fatal_error>
    13fc:	e025      	b.n	144a <z_arm_fault+0x82>
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    13fe:	f3ef 8488 	mrs	r4, MSP_NS
			if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0) {
    1402:	6852      	ldr	r2, [r2, #4]
    1404:	0511      	lsls	r1, r2, #20
    1406:	d4f6      	bmi.n	13f6 <z_arm_fault+0x2e>
	*recoverable = false;
    1408:	2200      	movs	r2, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    140a:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    140e:	3b03      	subs	r3, #3
	*recoverable = false;
    1410:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1414:	2b04      	cmp	r3, #4
    1416:	d830      	bhi.n	147a <z_arm_fault+0xb2>
    1418:	e8df f003 	tbb	[pc, r3]
    141c:	26353103 	.word	0x26353103
    1420:	2d          	.byte	0x2d
    1421:	00          	.byte	0x00
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1422:	4b1c      	ldr	r3, [pc, #112]	; (1494 <z_arm_fault+0xcc>)
    1424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1426:	0792      	lsls	r2, r2, #30
    1428:	d427      	bmi.n	147a <z_arm_fault+0xb2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    142a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    142c:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    1430:	d007      	beq.n	1442 <z_arm_fault+0x7a>
		if (SCB_MMFSR != 0) {
    1432:	3328      	adds	r3, #40	; 0x28
    1434:	781b      	ldrb	r3, [r3, #0]
    1436:	b153      	cbz	r3, 144e <z_arm_fault+0x86>
			reason = mem_manage_fault(esf, 1, recoverable);
    1438:	2001      	movs	r0, #1
    143a:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    143e:	f7ff ff59 	bl	12f4 <mem_manage_fault.isra.2>
	if (recoverable) {
    1442:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1446:	2b00      	cmp	r3, #0
    1448:	d0d5      	beq.n	13f6 <z_arm_fault+0x2e>
}
    144a:	b003      	add	sp, #12
    144c:	bd30      	pop	{r4, r5, pc}
		} else if (SCB_BFSR != 0) {
    144e:	4b12      	ldr	r3, [pc, #72]	; (1498 <z_arm_fault+0xd0>)
    1450:	781b      	ldrb	r3, [r3, #0]
    1452:	b12b      	cbz	r3, 1460 <z_arm_fault+0x98>
			reason = bus_fault(esf, 1, recoverable);
    1454:	2001      	movs	r0, #1
    1456:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    145a:	f7ff ff67 	bl	132c <bus_fault.isra.3>
		break;
    145e:	e7f0      	b.n	1442 <z_arm_fault+0x7a>
		} else if (SCB_UFSR != 0) {
    1460:	4b0e      	ldr	r3, [pc, #56]	; (149c <z_arm_fault+0xd4>)
    1462:	881d      	ldrh	r5, [r3, #0]
    1464:	b2ad      	uxth	r5, r5
    1466:	b115      	cbz	r5, 146e <z_arm_fault+0xa6>
		reason = usage_fault(esf);
    1468:	f7ff ff7e 	bl	1368 <usage_fault.isra.4>
		break;
    146c:	e7e9      	b.n	1442 <z_arm_fault+0x7a>
		} else if (SAU->SFSR != 0) {
    146e:	4b0c      	ldr	r3, [pc, #48]	; (14a0 <z_arm_fault+0xd8>)
    1470:	6958      	ldr	r0, [r3, #20]
    1472:	2800      	cmp	r0, #0
    1474:	d0e5      	beq.n	1442 <z_arm_fault+0x7a>
		secure_fault(esf);
    1476:	f7ff ff89 	bl	138c <secure_fault.isra.5>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    147a:	2000      	movs	r0, #0
    147c:	e7e1      	b.n	1442 <z_arm_fault+0x7a>
		reason = mem_manage_fault(esf, 0, recoverable);
    147e:	f10d 0107 	add.w	r1, sp, #7
    1482:	2000      	movs	r0, #0
    1484:	e7db      	b.n	143e <z_arm_fault+0x76>
		reason = bus_fault(esf, 0, recoverable);
    1486:	f10d 0107 	add.w	r1, sp, #7
    148a:	2000      	movs	r0, #0
    148c:	e7e5      	b.n	145a <z_arm_fault+0x92>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    148e:	2000      	movs	r0, #0
    1490:	e7b1      	b.n	13f6 <z_arm_fault+0x2e>
    1492:	bf00      	nop
    1494:	e000ed00 	.word	0xe000ed00
    1498:	e000ed29 	.word	0xe000ed29
    149c:	e000ed2a 	.word	0xe000ed2a
    14a0:	e000edd0 	.word	0xe000edd0

000014a4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    14a4:	4a02      	ldr	r2, [pc, #8]	; (14b0 <z_arm_fault_init+0xc>)
    14a6:	6953      	ldr	r3, [r2, #20]
    14a8:	f043 0310 	orr.w	r3, r3, #16
    14ac:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    14ae:	4770      	bx	lr
    14b0:	e000ed00 	.word	0xe000ed00

000014b4 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    14b4:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14b6:	2120      	movs	r1, #32
    14b8:	4803      	ldr	r0, [pc, #12]	; (14c8 <z_arm_int_lib_init+0x14>)
    14ba:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    14bc:	3301      	adds	r3, #1
    14be:	2b41      	cmp	r3, #65	; 0x41
    14c0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    14c4:	d1f9      	bne.n	14ba <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    14c6:	4770      	bx	lr
    14c8:	e000e100 	.word	0xe000e100

000014cc <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    14cc:	b538      	push	{r3, r4, r5, lr}
    14ce:	4605      	mov	r5, r0
	__asm__ volatile(
    14d0:	f04f 0320 	mov.w	r3, #32
    14d4:	f3ef 8411 	mrs	r4, BASEPRI
    14d8:	f383 8811 	msr	BASEPRI, r3
    14dc:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    14e0:	f002 fd54 	bl	3f8c <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    14e4:	4b0a      	ldr	r3, [pc, #40]	; (1510 <z_impl_k_thread_abort+0x44>)
    14e6:	689b      	ldr	r3, [r3, #8]
    14e8:	42ab      	cmp	r3, r5
    14ea:	d10b      	bne.n	1504 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    14ec:	4b09      	ldr	r3, [pc, #36]	; (1514 <z_impl_k_thread_abort+0x48>)
    14ee:	685a      	ldr	r2, [r3, #4]
    14f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
    14f4:	b912      	cbnz	r2, 14fc <z_impl_k_thread_abort+0x30>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = z_arch_swap(key);
    14f6:	4620      	mov	r0, r4
    14f8:	f7ff fe2a 	bl	1150 <z_arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    14fc:	685a      	ldr	r2, [r3, #4]
    14fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1502:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    1504:	4620      	mov	r0, r4
}
    1506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    150a:	f002 bcb8 	b.w	3e7e <z_reschedule_irqlock>
    150e:	bf00      	nop
    1510:	20000630 	.word	0x20000630
    1514:	e000ed00 	.word	0xe000ed00

00001518 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1518:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    151a:	4b0e      	ldr	r3, [pc, #56]	; (1554 <z_arm_configure_static_mpu_regions+0x3c>)
{
    151c:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    151e:	9302      	str	r3, [sp, #8]
    1520:	4b0d      	ldr	r3, [pc, #52]	; (1558 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1522:	4c0e      	ldr	r4, [pc, #56]	; (155c <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    1524:	9303      	str	r3, [sp, #12]
    1526:	4b0e      	ldr	r3, [pc, #56]	; (1560 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1528:	4a0e      	ldr	r2, [pc, #56]	; (1564 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    152a:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    152c:	ab02      	add	r3, sp, #8
    152e:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1530:	a801      	add	r0, sp, #4
    1532:	4623      	mov	r3, r4
    1534:	2101      	movs	r1, #1
    1536:	f000 f903 	bl	1740 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    153a:	2300      	movs	r3, #0
    153c:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    153e:	4b0a      	ldr	r3, [pc, #40]	; (1568 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1540:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    1542:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1544:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    1546:	9305      	str	r3, [sp, #20]
    1548:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    154a:	f000 f903 	bl	1754 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    154e:	b008      	add	sp, #32
    1550:	bd10      	pop	{r4, pc}
    1552:	bf00      	nop
    1554:	20000000 	.word	0x20000000
    1558:	00000000 	.word	0x00000000
    155c:	20010000 	.word	0x20010000
    1560:	00010006 	.word	0x00010006
    1564:	20000000 	.word	0x20000000
    1568:	20000000 	.word	0x20000000

0000156c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    156c:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    156e:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    1570:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1572:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    1576:	f004 031f 	and.w	r3, r4, #31
    157a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    157c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    157e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1580:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    1584:	4904      	ldr	r1, [pc, #16]	; (1598 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1586:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    158a:	f043 0301 	orr.w	r3, r3, #1
    158e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    1590:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    1592:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    1594:	bd10      	pop	{r4, pc}
    1596:	bf00      	nop
    1598:	e000ed90 	.word	0xe000ed90

0000159c <mpu_configure_regions.constprop.1>:

/* This internal function programs a set of given MPU regions
 * over a background memory area, optionally performing a
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
    159c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15a0:	4680      	mov	r8, r0
    15a2:	4689      	mov	r9, r1
    15a4:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    15a6:	2700      	movs	r7, #0
	MPU->RNR = index;
    15a8:	4d48      	ldr	r5, [pc, #288]	; (16cc <mpu_configure_regions.constprop.1+0x130>)
static int mpu_configure_regions(const struct k_mem_partition
    15aa:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    15ac:	454f      	cmp	r7, r9
    15ae:	da07      	bge.n	15c0 <mpu_configure_regions.constprop.1+0x24>
		if (regions[i]->size == 0U) {
    15b0:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
    15b4:	685e      	ldr	r6, [r3, #4]
    15b6:	b3c6      	cbz	r6, 162a <mpu_configure_regions.constprop.1+0x8e>
		&&
    15b8:	2e1f      	cmp	r6, #31
    15ba:	d805      	bhi.n	15c8 <mpu_configure_regions.constprop.1+0x2c>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    15bc:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    15c0:	4620      	mov	r0, r4
    15c2:	b005      	add	sp, #20
    15c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    15c8:	06f2      	lsls	r2, r6, #27
    15ca:	d1f7      	bne.n	15bc <mpu_configure_regions.constprop.1+0x20>
		((part->start &
    15cc:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    15d0:	f01a 0f1f 	tst.w	sl, #31
    15d4:	d1f2      	bne.n	15bc <mpu_configure_regions.constprop.1+0x20>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    15d6:	4650      	mov	r0, sl
    15d8:	f001 ffd7 	bl	358a <arm_cmse_mpu_region_get>
    15dc:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    15de:	eb06 000a 	add.w	r0, r6, sl
    15e2:	3801      	subs	r0, #1
    15e4:	f001 ffd1 	bl	358a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    15e8:	4583      	cmp	fp, r0
    15ea:	d1e7      	bne.n	15bc <mpu_configure_regions.constprop.1+0x20>
		if ((u_reg_index == -EINVAL) ||
    15ec:	f11b 0f16 	cmn.w	fp, #22
    15f0:	d0e4      	beq.n	15bc <mpu_configure_regions.constprop.1+0x20>
			(u_reg_index > (reg_index - 1))) {
    15f2:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    15f4:	455b      	cmp	r3, fp
    15f6:	dbe1      	blt.n	15bc <mpu_configure_regions.constprop.1+0x20>
	MPU->RNR = index;
    15f8:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    15fc:	68e8      	ldr	r0, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    15fe:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	MPU->RNR = index;
    1602:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1606:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    1608:	f020 001f 	bic.w	r0, r0, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    160c:	e9d1 3200 	ldrd	r3, r2, [r1]
    1610:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    1612:	4298      	cmp	r0, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1614:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    1618:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    161c:	d118      	bne.n	1650 <mpu_configure_regions.constprop.1+0xb4>
    161e:	4556      	cmp	r6, sl
    1620:	d105      	bne.n	162e <mpu_configure_regions.constprop.1+0x92>
			mpu_configure_region(u_reg_index, regions[i]);
    1622:	fa5f f08b 	uxtb.w	r0, fp
    1626:	f002 faea 	bl	3bfe <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    162a:	3701      	adds	r7, #1
    162c:	e7be      	b.n	15ac <mpu_configure_regions.constprop.1+0x10>
	MPU->RNR = index;
    162e:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1632:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    1634:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1638:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    163c:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    163e:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    1640:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    1642:	f002 fadc 	bl	3bfe <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1646:	f110 0f16 	cmn.w	r0, #22
    164a:	d0b7      	beq.n	15bc <mpu_configure_regions.constprop.1+0x20>
			reg_index++;
    164c:	1c44      	adds	r4, r0, #1
    164e:	e7ec      	b.n	162a <mpu_configure_regions.constprop.1+0x8e>
	MPU->RNR = index;
    1650:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1654:	692a      	ldr	r2, [r5, #16]
    1656:	3b01      	subs	r3, #1
    1658:	f023 031f 	bic.w	r3, r3, #31
    165c:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    1660:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    1662:	4556      	cmp	r6, sl
    1664:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1666:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    1668:	d0eb      	beq.n	1642 <mpu_configure_regions.constprop.1+0xa6>
				mpu_configure_region(reg_index, regions[i]);
    166a:	f002 fac8 	bl	3bfe <mpu_configure_region>
			if (reg_index == -EINVAL) {
    166e:	f110 0f16 	cmn.w	r0, #22
    1672:	d0a3      	beq.n	15bc <mpu_configure_regions.constprop.1+0x20>
	MPU->RNR = index;
    1674:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    1678:	68ea      	ldr	r2, [r5, #12]
    167a:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    167e:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
    1680:	f362 0304 	bfi	r3, r2, #0, #5
    1684:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1688:	692b      	ldr	r3, [r5, #16]
    168a:	f89d 2008 	ldrb.w	r2, [sp, #8]
    168e:	085b      	lsrs	r3, r3, #1
    1690:	f363 1247 	bfi	r2, r3, #5, #3
    1694:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    1698:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
    169c:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
    169e:	e9d2 3200 	ldrd	r3, r2, [r2]
    16a2:	4413      	add	r3, r2
    16a4:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    16a6:	f023 031f 	bic.w	r3, r3, #31
    16aa:	441e      	add	r6, r3
    16ac:	eba6 060a 	sub.w	r6, r6, sl
    16b0:	b2c4      	uxtb	r4, r0
    16b2:	f026 061f 	bic.w	r6, r6, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    16b6:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    16b8:	9603      	str	r6, [sp, #12]
    16ba:	f63f af7f 	bhi.w	15bc <mpu_configure_regions.constprop.1+0x20>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    16be:	4620      	mov	r0, r4
    16c0:	4669      	mov	r1, sp
    16c2:	f7ff ff53 	bl	156c <region_init>
			reg_index++;
    16c6:	3401      	adds	r4, #1
    16c8:	e7af      	b.n	162a <mpu_configure_regions.constprop.1+0x8e>
    16ca:	bf00      	nop
    16cc:	e000ed90 	.word	0xe000ed90

000016d0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    16d0:	2205      	movs	r2, #5
    16d2:	4b03      	ldr	r3, [pc, #12]	; (16e0 <arm_core_mpu_enable+0x10>)
    16d4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    16d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    16da:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    16de:	4770      	bx	lr
    16e0:	e000ed90 	.word	0xe000ed90

000016e4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    16e4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    16e8:	2200      	movs	r2, #0
    16ea:	4b01      	ldr	r3, [pc, #4]	; (16f0 <arm_core_mpu_disable+0xc>)
    16ec:	605a      	str	r2, [r3, #4]
}
    16ee:	4770      	bx	lr
    16f0:	e000ed90 	.word	0xe000ed90

000016f4 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    16f4:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    16f6:	4d0e      	ldr	r5, [pc, #56]	; (1730 <arm_mpu_init+0x3c>)
    16f8:	682e      	ldr	r6, [r5, #0]
    16fa:	2e10      	cmp	r6, #16
    16fc:	d815      	bhi.n	172a <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    16fe:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    1700:	f7ff fff0 	bl	16e4 <arm_core_mpu_disable>
	MPU->MAIR0 =
    1704:	4b0b      	ldr	r3, [pc, #44]	; (1734 <arm_mpu_init+0x40>)
    1706:	4a0c      	ldr	r2, [pc, #48]	; (1738 <arm_mpu_init+0x44>)
    1708:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    170a:	42a6      	cmp	r6, r4
    170c:	d105      	bne.n	171a <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    170e:	4b0b      	ldr	r3, [pc, #44]	; (173c <arm_mpu_init+0x48>)
    1710:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    1712:	f7ff ffdd 	bl	16d0 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    1716:	2000      	movs	r0, #0
}
    1718:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    171a:	6869      	ldr	r1, [r5, #4]
    171c:	4620      	mov	r0, r4
    171e:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    1722:	f7ff ff23 	bl	156c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1726:	3401      	adds	r4, #1
    1728:	e7ef      	b.n	170a <arm_mpu_init+0x16>
		return -1;
    172a:	f04f 30ff 	mov.w	r0, #4294967295
    172e:	e7f3      	b.n	1718 <arm_mpu_init+0x24>
    1730:	000042f0 	.word	0x000042f0
    1734:	e000ed90 	.word	0xe000ed90
    1738:	0044ffaa 	.word	0x0044ffaa
    173c:	2000068c 	.word	0x2000068c

00001740 <arm_core_mpu_configure_static_mpu_regions>:
{
    1740:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1742:	4c03      	ldr	r4, [pc, #12]	; (1750 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1744:	7822      	ldrb	r2, [r4, #0]
    1746:	f7ff ff29 	bl	159c <mpu_configure_regions.constprop.1>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    174a:	7020      	strb	r0, [r4, #0]
}
    174c:	bd10      	pop	{r4, pc}
    174e:	bf00      	nop
    1750:	2000068c 	.word	0x2000068c

00001754 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    1754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1758:	4c25      	ldr	r4, [pc, #148]	; (17f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
    175a:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    175c:	4680      	mov	r8, r0
    175e:	2700      	movs	r7, #0
    1760:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
    1762:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
    1766:	4d23      	ldr	r5, [pc, #140]	; (17f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1768:	4557      	cmp	r7, sl
    176a:	da1a      	bge.n	17a2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    176c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    1770:	9301      	str	r3, [sp, #4]
    1772:	2b00      	cmp	r3, #0
    1774:	d036      	beq.n	17e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1776:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    177a:	4608      	mov	r0, r1
    177c:	9100      	str	r1, [sp, #0]
    177e:	f001 ff04 	bl	358a <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1782:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1786:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1788:	1858      	adds	r0, r3, r1
    178a:	3801      	subs	r0, #1
    178c:	f001 fefd 	bl	358a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1790:	4286      	cmp	r6, r0
    1792:	4a19      	ldr	r2, [pc, #100]	; (17f8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
    1794:	d008      	beq.n	17a8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    1796:	2314      	movs	r3, #20
    1798:	435f      	muls	r7, r3
    179a:	f06f 0315 	mvn.w	r3, #21
    179e:	f849 3007 	str.w	r3, [r9, r7]
}
    17a2:	b003      	add	sp, #12
    17a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    17a8:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
    17ac:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    17ae:	d0f8      	beq.n	17a2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    17b0:	7813      	ldrb	r3, [r2, #0]
    17b2:	42b3      	cmp	r3, r6
    17b4:	ddf5      	ble.n	17a2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    17b6:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
    17ba:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
    17bc:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    17be:	68e8      	ldr	r0, [r5, #12]
    17c0:	7b19      	ldrb	r1, [r3, #12]
    17c2:	f360 0104 	bfi	r1, r0, #0, #5
    17c6:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    17c8:	6929      	ldr	r1, [r5, #16]
    17ca:	7b18      	ldrb	r0, [r3, #12]
    17cc:	0849      	lsrs	r1, r1, #1
    17ce:	f361 1047 	bfi	r0, r1, #5, #3
    17d2:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    17d4:	68eb      	ldr	r3, [r5, #12]
    17d6:	f023 031f 	bic.w	r3, r3, #31
    17da:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    17dc:	692b      	ldr	r3, [r5, #16]
    17de:	f023 031f 	bic.w	r3, r3, #31
    17e2:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    17e4:	3701      	adds	r7, #1
    17e6:	3414      	adds	r4, #20
    17e8:	f108 080c 	add.w	r8, r8, #12
    17ec:	e7bc      	b.n	1768 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    17ee:	bf00      	nop
    17f0:	20000544 	.word	0x20000544
    17f4:	e000ed90 	.word	0xe000ed90
    17f8:	2000068c 	.word	0x2000068c

000017fc <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    17fc:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    17fe:	4b0c      	ldr	r3, [pc, #48]	; (1830 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    1800:	460e      	mov	r6, r1
    1802:	781c      	ldrb	r4, [r3, #0]
    1804:	4605      	mov	r5, r0
    1806:	4623      	mov	r3, r4
  mpu->RLAR = 0U;
    1808:	2100      	movs	r1, #0
  mpu->RNR = rnr;
    180a:	4a0a      	ldr	r2, [pc, #40]	; (1834 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    180c:	2b0f      	cmp	r3, #15
    180e:	dd0b      	ble.n	1828 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>

	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
    1810:	4909      	ldr	r1, [pc, #36]	; (1838 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    1812:	f851 0b04 	ldr.w	r0, [r1], #4
    1816:	f7ff fea9 	bl	156c <region_init>
	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    181a:	4622      	mov	r2, r4
    181c:	4631      	mov	r1, r6
    181e:	4628      	mov	r0, r5
}
    1820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1824:	f7ff beba 	b.w	159c <mpu_configure_regions.constprop.1>
    1828:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    182a:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    182c:	3301      	adds	r3, #1
    182e:	e7ed      	b.n	180c <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
    1830:	2000068c 	.word	0x2000068c
    1834:	e000ed90 	.word	0xe000ed90
    1838:	20000544 	.word	0x20000544

0000183c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    183c:	4b01      	ldr	r3, [pc, #4]	; (1844 <__stdout_hook_install+0x8>)
    183e:	6018      	str	r0, [r3, #0]
}
    1840:	4770      	bx	lr
    1842:	bf00      	nop
    1844:	200013f8 	.word	0x200013f8

00001848 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    1848:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_hwfc_t hwfc;
#ifdef UARTE_CONFIG_STOP_Two
	bool two_stop_bits = false;
#endif

	switch (cfg->stop_bits) {
    184a:	794b      	ldrb	r3, [r1, #5]
    184c:	2b01      	cmp	r3, #1
    184e:	d029      	beq.n	18a4 <uarte_nrfx_configure+0x5c>
    1850:	2b03      	cmp	r3, #3
    1852:	d124      	bne.n	189e <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		break;
#ifdef UARTE_CONFIG_STOP_Two
	case UART_CFG_STOP_BITS_2:
		two_stop_bits = true;
    1854:	2601      	movs	r6, #1
#endif
	default:
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1856:	798b      	ldrb	r3, [r1, #6]
    1858:	2b03      	cmp	r3, #3
    185a:	d120      	bne.n	189e <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    185c:	79cd      	ldrb	r5, [r1, #7]
    185e:	b12d      	cbz	r5, 186c <uarte_nrfx_configure+0x24>
    1860:	2d01      	cmp	r5, #1
    1862:	d11c      	bne.n	189e <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
    1864:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    1866:	689b      	ldr	r3, [r3, #8]
    1868:	791b      	ldrb	r3, [r3, #4]
    186a:	b1c3      	cbz	r3, 189e <uarte_nrfx_configure+0x56>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
    186c:	790a      	ldrb	r2, [r1, #4]
    186e:	b112      	cbz	r2, 1876 <uarte_nrfx_configure+0x2e>
    1870:	2a02      	cmp	r2, #2
    1872:	d114      	bne.n	189e <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UARTE_PARITY_INCLUDED;
    1874:	220e      	movs	r2, #14
	switch (baudrate) {
    1876:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
    187a:	6804      	ldr	r4, [r0, #0]
		break;
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    187c:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    187e:	68a4      	ldr	r4, [r4, #8]
	switch (baudrate) {
    1880:	42bb      	cmp	r3, r7
	return config->uarte_regs;
    1882:	6824      	ldr	r4, [r4, #0]
	switch (baudrate) {
    1884:	d068      	beq.n	1958 <uarte_nrfx_configure+0x110>
    1886:	d829      	bhi.n	18dc <uarte_nrfx_configure+0x94>
    1888:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    188c:	d067      	beq.n	195e <uarte_nrfx_configure+0x116>
    188e:	d814      	bhi.n	18ba <uarte_nrfx_configure+0x72>
    1890:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1894:	d065      	beq.n	1962 <uarte_nrfx_configure+0x11a>
    1896:	d807      	bhi.n	18a8 <uarte_nrfx_configure+0x60>
    1898:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    189c:	d064      	beq.n	1968 <uarte_nrfx_configure+0x120>
		return -ENOTSUP;
    189e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    18a2:	e058      	b.n	1956 <uarte_nrfx_configure+0x10e>
	bool two_stop_bits = false;
    18a4:	2600      	movs	r6, #0
    18a6:	e7d6      	b.n	1856 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    18a8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    18ac:	d05f      	beq.n	196e <uarte_nrfx_configure+0x126>
    18ae:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    18b2:	d1f4      	bne.n	189e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    18b4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    18b8:	e03c      	b.n	1934 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    18ba:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    18be:	d059      	beq.n	1974 <uarte_nrfx_configure+0x12c>
    18c0:	d804      	bhi.n	18cc <uarte_nrfx_configure+0x84>
    18c2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    18c6:	d1ea      	bne.n	189e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    18c8:	4b35      	ldr	r3, [pc, #212]	; (19a0 <uarte_nrfx_configure+0x158>)
    18ca:	e033      	b.n	1934 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    18cc:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    18d0:	d052      	beq.n	1978 <uarte_nrfx_configure+0x130>
    18d2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    18d6:	d1e2      	bne.n	189e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    18d8:	4b32      	ldr	r3, [pc, #200]	; (19a4 <uarte_nrfx_configure+0x15c>)
    18da:	e02b      	b.n	1934 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    18dc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    18e0:	d04c      	beq.n	197c <uarte_nrfx_configure+0x134>
    18e2:	d812      	bhi.n	190a <uarte_nrfx_configure+0xc2>
    18e4:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    18e8:	42bb      	cmp	r3, r7
    18ea:	d04a      	beq.n	1982 <uarte_nrfx_configure+0x13a>
    18ec:	d805      	bhi.n	18fa <uarte_nrfx_configure+0xb2>
    18ee:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    18f2:	d1d4      	bne.n	189e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    18f4:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    18f8:	e01c      	b.n	1934 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    18fa:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    18fe:	d043      	beq.n	1988 <uarte_nrfx_configure+0x140>
    1900:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    1904:	d1cb      	bne.n	189e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    1906:	4b28      	ldr	r3, [pc, #160]	; (19a8 <uarte_nrfx_configure+0x160>)
    1908:	e014      	b.n	1934 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    190a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    190e:	d03e      	beq.n	198e <uarte_nrfx_configure+0x146>
    1910:	d808      	bhi.n	1924 <uarte_nrfx_configure+0xdc>
    1912:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    1916:	d03d      	beq.n	1994 <uarte_nrfx_configure+0x14c>
    1918:	4f24      	ldr	r7, [pc, #144]	; (19ac <uarte_nrfx_configure+0x164>)
    191a:	42bb      	cmp	r3, r7
    191c:	d1bf      	bne.n	189e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    191e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1922:	e007      	b.n	1934 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    1924:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    1928:	d037      	beq.n	199a <uarte_nrfx_configure+0x152>
    192a:	4f21      	ldr	r7, [pc, #132]	; (19b0 <uarte_nrfx_configure+0x168>)
    192c:	42bb      	cmp	r3, r7
    192e:	d1b6      	bne.n	189e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    1930:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000

__STATIC_INLINE void nrf_uarte_configure(NRF_UARTE_Type   * p_reg,
                                         nrf_uarte_parity_t parity,
                                         nrf_uarte_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    1934:	432a      	orrs	r2, r5
}

__STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type   * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    1936:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    193a:	f8c4 256c 	str.w	r2, [r4, #1388]	; 0x56c
	}

	nrf_uarte_configure(get_uarte_instance(dev), parity, hwfc);

#ifdef UARTE_CONFIG_STOP_Two
	if (two_stop_bits) {
    193e:	b12e      	cbz	r6, 194c <uarte_nrfx_configure+0x104>
		/* TODO Change this to nrfx HAL function when available */
		get_uarte_instance(dev)->CONFIG |=
    1940:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
    1944:	f043 0310 	orr.w	r3, r3, #16
    1948:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
			UARTE_CONFIG_STOP_Two << UARTE_CONFIG_STOP_Pos;
	}
#endif
	get_dev_data(dev)->uart_config = *cfg;
    194c:	6883      	ldr	r3, [r0, #8]
    194e:	c903      	ldmia	r1, {r0, r1}
    1950:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    1954:	2000      	movs	r0, #0
}
    1956:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    1958:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    195c:	e7ea      	b.n	1934 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    195e:	4b15      	ldr	r3, [pc, #84]	; (19b4 <uarte_nrfx_configure+0x16c>)
    1960:	e7e8      	b.n	1934 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00027000;
    1962:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    1966:	e7e5      	b.n	1934 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
    1968:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    196c:	e7e2      	b.n	1934 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    196e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    1972:	e7df      	b.n	1934 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    1974:	4b10      	ldr	r3, [pc, #64]	; (19b8 <uarte_nrfx_configure+0x170>)
    1976:	e7dd      	b.n	1934 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    1978:	4b10      	ldr	r3, [pc, #64]	; (19bc <uarte_nrfx_configure+0x174>)
    197a:	e7db      	b.n	1934 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    197c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    1980:	e7d8      	b.n	1934 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    1982:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    1986:	e7d5      	b.n	1934 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    1988:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    198c:	e7d2      	b.n	1934 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    198e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    1992:	e7cf      	b.n	1934 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    1994:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    1998:	e7cc      	b.n	1934 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    199a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    199e:	e7c9      	b.n	1934 <uarte_nrfx_configure+0xec>
    19a0:	00275000 	.word	0x00275000
    19a4:	0075c000 	.word	0x0075c000
    19a8:	013a9000 	.word	0x013a9000
    19ac:	0003d090 	.word	0x0003d090
    19b0:	000f4240 	.word	0x000f4240
    19b4:	0013b000 	.word	0x0013b000
    19b8:	003af000 	.word	0x003af000
    19bc:	004ea000 	.word	0x004ea000

000019c0 <uarte_0_init>:
	return dev->config->config_info;
    19c0:	6802      	ldr	r2, [r0, #0]
	#if defined(DT_NORDIC_NRF_UARTE_UART_0_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_0_CTS_PIN)
		#define UARTE_0_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(0);
    19c2:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
    19c4:	6892      	ldr	r2, [r2, #8]
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    19c6:	4b18      	ldr	r3, [pc, #96]	; (1a28 <uarte_0_init+0x68>)
    19c8:	6814      	ldr	r4, [r2, #0]
    19ca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	struct uarte_nrfx_data *data = get_dev_data(dev);
    19ce:	6885      	ldr	r5, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    19d0:	2103      	movs	r1, #3
    p_reg->OUTSET = set_mask;
    19d2:	609a      	str	r2, [r3, #8]
    p_reg->PSEL.TXD = pseltxd;
    19d4:	261d      	movs	r6, #29
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    19d6:	2200      	movs	r2, #0
    19d8:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
    19dc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    19e0:	f8c4 650c 	str.w	r6, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    19e4:	261c      	movs	r6, #28
    19e6:	f8c4 6514 	str.w	r6, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
    19ea:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
    19ee:	609e      	str	r6, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    19f0:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
    19f4:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    p_reg->PSEL.RTS = pselrts;
    19f8:	231b      	movs	r3, #27
    19fa:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    19fe:	231a      	movs	r3, #26
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    1a00:	4629      	mov	r1, r5
    1a02:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    1a06:	f7ff ff1f 	bl	1848 <uarte_nrfx_configure>
	if (err) {
    1a0a:	b958      	cbnz	r0, 1a24 <uarte_0_init+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    1a0c:	2308      	movs	r3, #8
    1a0e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    1a12:	441d      	add	r5, r3
__STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                             uint8_t *        p_buffer,
                                             size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    1a14:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1a16:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    1a1a:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    1a1e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1a22:	6023      	str	r3, [r4, #0]
	UART_NRF_UARTE_DEVICE(0);
    1a24:	bd70      	pop	{r4, r5, r6, pc}
    1a26:	bf00      	nop
    1a28:	50842500 	.word	0x50842500

00001a2c <abi_getter>:
extern const struct fw_info_abi * const _ext_abis_start[];
extern const u32_t _ext_abis_size;
__noinit fw_info_abi_getter abi_getter_in;

int abi_getter(u32_t id, u32_t index, const struct fw_info_abi **abi)
{
    1a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!abi) {
    1a2e:	b1da      	cbz	r2, 1a68 <abi_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    1a30:	2300      	movs	r3, #0
	bool id_found = false;
    1a32:	461c      	mov	r4, r3
    1a34:	4d0e      	ldr	r5, [pc, #56]	; (1a70 <abi_getter+0x44>)
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    1a36:	4f0f      	ldr	r7, [pc, #60]	; (1a74 <abi_getter+0x48>)
    1a38:	42bb      	cmp	r3, r7
    1a3a:	d306      	bcc.n	1a4a <abi_getter+0x1e>
				*abi = ext_abi;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
    1a3c:	2c00      	cmp	r4, #0
    1a3e:	bf14      	ite	ne
    1a40:	f06f 0008 	mvnne.w	r0, #8
    1a44:	f06f 0001 	mvneq.w	r0, #1
    1a48:	e009      	b.n	1a5e <abi_getter+0x32>
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
    1a4a:	f855 6b04 	ldr.w	r6, [r5], #4
		if (ext_abi->abi_id == id) {
    1a4e:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    1a52:	4560      	cmp	r0, ip
    1a54:	d106      	bne.n	1a64 <abi_getter+0x38>
			if (index-- == 0) {
    1a56:	1e4c      	subs	r4, r1, #1
    1a58:	b911      	cbnz	r1, 1a60 <abi_getter+0x34>
				return 0;
    1a5a:	4608      	mov	r0, r1
				*abi = ext_abi;
    1a5c:	6016      	str	r6, [r2, #0]
}
    1a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
    1a60:	4621      	mov	r1, r4
			id_found = true;
    1a62:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    1a64:	3301      	adds	r3, #1
    1a66:	e7e7      	b.n	1a38 <abi_getter+0xc>
		return -EFAULT;
    1a68:	f06f 000d 	mvn.w	r0, #13
    1a6c:	e7f7      	b.n	1a5e <abi_getter+0x32>
    1a6e:	bf00      	nop
    1a70:	000049f8 	.word	0x000049f8
    1a74:	00000000 	.word	0x00000000

00001a78 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    1a78:	4a4f      	ldr	r2, [pc, #316]	; (1bb8 <SystemInit+0x140>)
    1a7a:	6813      	ldr	r3, [r2, #0]
    1a7c:	f043 0302 	orr.w	r3, r3, #2
    1a80:	6013      	str	r3, [r2, #0]
        #endif

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim 
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1a82:	2200      	movs	r2, #0
    1a84:	00d3      	lsls	r3, r2, #3
    1a86:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    1a8a:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    1a8e:	3101      	adds	r1, #1
    1a90:	d008      	beq.n	1aa4 <SystemInit+0x2c>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1a92:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1a96:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1a98:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1a9c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1aa0:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1aa2:	d1ef      	bne.n	1a84 <SystemInit+0xc>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    1aa4:	4a45      	ldr	r2, [pc, #276]	; (1bbc <SystemInit+0x144>)
    1aa6:	69d3      	ldr	r3, [r2, #28]
    1aa8:	f013 0301 	ands.w	r3, r3, #1
    1aac:	d03b      	beq.n	1b26 <SystemInit+0xae>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1aae:	4b44      	ldr	r3, [pc, #272]	; (1bc0 <SystemInit+0x148>)
    1ab0:	4619      	mov	r1, r3
    1ab2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1ab6:	2a01      	cmp	r2, #1
    1ab8:	d1fb      	bne.n	1ab2 <SystemInit+0x3a>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    1aba:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1abe:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    1ac2:	2b01      	cmp	r3, #1
    1ac4:	d1fb      	bne.n	1abe <SystemInit+0x46>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    1ac6:	4b3d      	ldr	r3, [pc, #244]	; (1bbc <SystemInit+0x144>)
    1ac8:	69da      	ldr	r2, [r3, #28]
    1aca:	07d2      	lsls	r2, r2, #31
    1acc:	d508      	bpl.n	1ae0 <SystemInit+0x68>
            NRF_UICR_S->HFXOSRC = (NRF_UICR_S->HFXOSRC & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    1ace:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1ad0:	493b      	ldr	r1, [pc, #236]	; (1bc0 <SystemInit+0x148>)
            NRF_UICR_S->HFXOSRC = (NRF_UICR_S->HFXOSRC & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    1ad2:	f022 0201 	bic.w	r2, r2, #1
    1ad6:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1ad8:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    1adc:	2a01      	cmp	r2, #1
    1ade:	d1fb      	bne.n	1ad8 <SystemInit+0x60>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    1ae0:	6a1a      	ldr	r2, [r3, #32]
    1ae2:	3201      	adds	r2, #1
    1ae4:	d10a      	bne.n	1afc <SystemInit+0x84>
            NRF_UICR_S->HFXOCNT = (NRF_UICR_S->HFXOCNT & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    1ae6:	6a1a      	ldr	r2, [r3, #32]
    1ae8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    1aec:	f042 0220 	orr.w	r2, r2, #32
    1af0:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1af2:	4a33      	ldr	r2, [pc, #204]	; (1bc0 <SystemInit+0x148>)
    1af4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    1af8:	2b01      	cmp	r3, #1
    1afa:	d1fb      	bne.n	1af4 <SystemInit+0x7c>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    1afc:	2200      	movs	r2, #0
    1afe:	4b30      	ldr	r3, [pc, #192]	; (1bc0 <SystemInit+0x148>)
    1b00:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1b04:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1b08:	2a01      	cmp	r2, #1
    1b0a:	d1fb      	bne.n	1b04 <SystemInit+0x8c>
  __ASM volatile ("dsb 0xF":::"memory");
    1b0c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1b10:	492c      	ldr	r1, [pc, #176]	; (1bc4 <SystemInit+0x14c>)
    1b12:	4b2d      	ldr	r3, [pc, #180]	; (1bc8 <SystemInit+0x150>)
    1b14:	68ca      	ldr	r2, [r1, #12]
    1b16:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1b1a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1b1c:	60cb      	str	r3, [r1, #12]
    1b1e:	f3bf 8f4f 	dsb	sy
    __NOP();
    1b22:	bf00      	nop
    1b24:	e7fd      	b.n	1b22 <SystemInit+0xaa>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    1b26:	6a12      	ldr	r2, [r2, #32]
    1b28:	3201      	adds	r2, #1
    1b2a:	d0c0      	beq.n	1aae <SystemInit+0x36>
    }
    

    bool errata_6()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    1b2c:	4a27      	ldr	r2, [pc, #156]	; (1bcc <SystemInit+0x154>)
    1b2e:	6812      	ldr	r2, [r2, #0]
    1b30:	2a09      	cmp	r2, #9
    1b32:	d111      	bne.n	1b58 <SystemInit+0xe0>
            if (*(uint32_t *)0x00FF0134 == 0x01ul){
    1b34:	4a26      	ldr	r2, [pc, #152]	; (1bd0 <SystemInit+0x158>)
    1b36:	6811      	ldr	r1, [r2, #0]
    1b38:	3901      	subs	r1, #1
    1b3a:	2901      	cmp	r1, #1
    1b3c:	d921      	bls.n	1b82 <SystemInit+0x10a>

    
    bool errata_14()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
            if (*(uint32_t *)0x00FF0134 == 0x01ul){
    1b3e:	6813      	ldr	r3, [r2, #0]
    1b40:	2b01      	cmp	r3, #1
    1b42:	d125      	bne.n	1b90 <SystemInit+0x118>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    1b44:	4a23      	ldr	r2, [pc, #140]	; (1bd4 <SystemInit+0x15c>)
    1b46:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    1b48:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    1b4c:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    }


    bool errata_15()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    1b50:	4b1e      	ldr	r3, [pc, #120]	; (1bcc <SystemInit+0x154>)
    1b52:	681b      	ldr	r3, [r3, #0]
    1b54:	2b09      	cmp	r3, #9
    1b56:	d01b      	beq.n	1b90 <SystemInit+0x118>
        SCB->NSACR |= (3UL << 10);
    1b58:	4b1a      	ldr	r3, [pc, #104]	; (1bc4 <SystemInit+0x14c>)
    1b5a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    1b5e:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    1b62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    1b66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1b6a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    1b6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1b72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b76:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
    1b7a:	4b17      	ldr	r3, [pc, #92]	; (1bd8 <SystemInit+0x160>)
    1b7c:	4a17      	ldr	r2, [pc, #92]	; (1bdc <SystemInit+0x164>)
    1b7e:	601a      	str	r2, [r3, #0]
}
    1b80:	4770      	bx	lr
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    1b82:	f04f 2150 	mov.w	r1, #1342197760	; 0x50005000
    1b86:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    1b8a:	f8c1 3118 	str.w	r3, [r1, #280]	; 0x118
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    1b8e:	e7d6      	b.n	1b3e <SystemInit+0xc6>
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
    1b90:	4b0f      	ldr	r3, [pc, #60]	; (1bd0 <SystemInit+0x158>)
    1b92:	681b      	ldr	r3, [r3, #0]
    1b94:	2b02      	cmp	r3, #2
    1b96:	d1df      	bne.n	1b58 <SystemInit+0xe0>
            *((volatile uint32_t *)0x50004A38) = 0x00ul;
    1b98:	2200      	movs	r2, #0
    1b9a:	4b0e      	ldr	r3, [pc, #56]	; (1bd4 <SystemInit+0x15c>)
    1b9c:	601a      	str	r2, [r3, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    1b9e:	2201      	movs	r2, #1
    1ba0:	f6a3 2338 	subw	r3, r3, #2616	; 0xa38
    1ba4:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    1ba8:	4b08      	ldr	r3, [pc, #32]	; (1bcc <SystemInit+0x154>)
    1baa:	681b      	ldr	r3, [r3, #0]
    1bac:	2b09      	cmp	r3, #9
    1bae:	d1d3      	bne.n	1b58 <SystemInit+0xe0>
            *((volatile uint32_t *)0x5003AEE4) = 0xC;
    1bb0:	220c      	movs	r2, #12
    1bb2:	4b0b      	ldr	r3, [pc, #44]	; (1be0 <SystemInit+0x168>)
    1bb4:	601a      	str	r2, [r3, #0]
    1bb6:	e7cf      	b.n	1b58 <SystemInit+0xe0>
    1bb8:	e000edd0 	.word	0xe000edd0
    1bbc:	00ff8000 	.word	0x00ff8000
    1bc0:	50039000 	.word	0x50039000
    1bc4:	e000ed00 	.word	0xe000ed00
    1bc8:	05fa0004 	.word	0x05fa0004
    1bcc:	00ff0130 	.word	0x00ff0130
    1bd0:	00ff0134 	.word	0x00ff0134
    1bd4:	50004a38 	.word	0x50004a38
    1bd8:	20001408 	.word	0x20001408
    1bdc:	03d09000 	.word	0x03d09000
    1be0:	5003aee4 	.word	0x5003aee4

00001be4 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
    1be4:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    1be6:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    1be8:	4b08      	ldr	r3, [pc, #32]	; (1c0c <z_sys_device_do_config_level+0x28>)
    1bea:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    1bee:	3001      	adds	r0, #1
    1bf0:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    1bf4:	42a5      	cmp	r5, r4
    1bf6:	d800      	bhi.n	1bfa <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
    1bf8:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    1bfa:	6823      	ldr	r3, [r4, #0]
    1bfc:	4620      	mov	r0, r4
    1bfe:	685b      	ldr	r3, [r3, #4]
    1c00:	4798      	blx	r3
		if (retval != 0) {
    1c02:	b100      	cbz	r0, 1c06 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    1c04:	6066      	str	r6, [r4, #4]
								info++) {
    1c06:	340c      	adds	r4, #12
    1c08:	e7f4      	b.n	1bf4 <z_sys_device_do_config_level+0x10>
    1c0a:	bf00      	nop
    1c0c:	00004560 	.word	0x00004560

00001c10 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    1c10:	4b10      	ldr	r3, [pc, #64]	; (1c54 <z_impl_device_get_binding+0x44>)
{
    1c12:	b570      	push	{r4, r5, r6, lr}
    1c14:	4605      	mov	r5, r0
    1c16:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    1c18:	4c0f      	ldr	r4, [pc, #60]	; (1c58 <z_impl_device_get_binding+0x48>)
    1c1a:	429c      	cmp	r4, r3
    1c1c:	d104      	bne.n	1c28 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    1c1e:	4c0e      	ldr	r4, [pc, #56]	; (1c58 <z_impl_device_get_binding+0x48>)
    1c20:	42b4      	cmp	r4, r6
    1c22:	d109      	bne.n	1c38 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    1c24:	2400      	movs	r4, #0
    1c26:	e012      	b.n	1c4e <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    1c28:	6862      	ldr	r2, [r4, #4]
    1c2a:	b11a      	cbz	r2, 1c34 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    1c2c:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    1c2e:	6812      	ldr	r2, [r2, #0]
    1c30:	42aa      	cmp	r2, r5
    1c32:	d00c      	beq.n	1c4e <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    1c34:	340c      	adds	r4, #12
    1c36:	e7f0      	b.n	1c1a <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    1c38:	6863      	ldr	r3, [r4, #4]
    1c3a:	b90b      	cbnz	r3, 1c40 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    1c3c:	340c      	adds	r4, #12
    1c3e:	e7ef      	b.n	1c20 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    1c40:	6823      	ldr	r3, [r4, #0]
    1c42:	4628      	mov	r0, r5
    1c44:	6819      	ldr	r1, [r3, #0]
    1c46:	f001 fffc 	bl	3c42 <strcmp>
    1c4a:	2800      	cmp	r0, #0
    1c4c:	d1f6      	bne.n	1c3c <z_impl_device_get_binding+0x2c>
}
    1c4e:	4620      	mov	r0, r4
    1c50:	bd70      	pop	{r4, r5, r6, pc}
    1c52:	bf00      	nop
    1c54:	200014cc 	.word	0x200014cc
    1c58:	20001454 	.word	0x20001454

00001c5c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    1c5c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    1c5e:	4d0b      	ldr	r5, [pc, #44]	; (1c8c <idle+0x30>)
    1c60:	f04f 0220 	mov.w	r2, #32
    1c64:	f3ef 8311 	mrs	r3, BASEPRI
    1c68:	f382 8811 	msr	BASEPRI, r2
    1c6c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    1c70:	f002 f9c9 	bl	4006 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    1c74:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
    1c76:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    1c78:	2802      	cmp	r0, #2
    1c7a:	bfd8      	it	le
    1c7c:	4608      	movle	r0, r1
    1c7e:	f002 f9d2 	bl	4026 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    1c82:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	z_arch_cpu_idle();
    1c84:	f7ff fa28 	bl	10d8 <z_arch_cpu_idle>
    1c88:	e7ea      	b.n	1c60 <idle+0x4>
    1c8a:	bf00      	nop
    1c8c:	20000630 	.word	0x20000630

00001c90 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    1c90:	4802      	ldr	r0, [pc, #8]	; (1c9c <z_bss_zero+0xc>)
    1c92:	4a03      	ldr	r2, [pc, #12]	; (1ca0 <z_bss_zero+0x10>)
    1c94:	2100      	movs	r1, #0
    1c96:	1a12      	subs	r2, r2, r0
    1c98:	f002 b820 	b.w	3cdc <memset>
    1c9c:	20000000 	.word	0x20000000
    1ca0:	20000690 	.word	0x20000690

00001ca4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    1ca4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    1ca6:	4806      	ldr	r0, [pc, #24]	; (1cc0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    1ca8:	4a06      	ldr	r2, [pc, #24]	; (1cc4 <z_data_copy+0x20>)
    1caa:	4907      	ldr	r1, [pc, #28]	; (1cc8 <z_data_copy+0x24>)
    1cac:	1a12      	subs	r2, r2, r0
    1cae:	f001 ffeb 	bl	3c88 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    1cb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    1cb6:	4a05      	ldr	r2, [pc, #20]	; (1ccc <z_data_copy+0x28>)
    1cb8:	4905      	ldr	r1, [pc, #20]	; (1cd0 <z_data_copy+0x2c>)
    1cba:	4806      	ldr	r0, [pc, #24]	; (1cd4 <z_data_copy+0x30>)
    1cbc:	f001 bfe4 	b.w	3c88 <memcpy>
    1cc0:	200013d4 	.word	0x200013d4
    1cc4:	20001530 	.word	0x20001530
    1cc8:	000049f8 	.word	0x000049f8
    1ccc:	00000000 	.word	0x00000000
    1cd0:	000049f8 	.word	0x000049f8
    1cd4:	20000000 	.word	0x20000000

00001cd8 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    1cd8:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    1cda:	2002      	movs	r0, #2
    1cdc:	f7ff ff82 	bl	1be4 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    1ce0:	4807      	ldr	r0, [pc, #28]	; (1d00 <bg_thread_main+0x28>)
    1ce2:	f001 fe2b 	bl	393c <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    1ce6:	2003      	movs	r0, #3
    1ce8:	f7ff ff7c 	bl	1be4 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    1cec:	f000 fc2e 	bl	254c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    1cf0:	f001 fc44 	bl	357c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    1cf4:	4a03      	ldr	r2, [pc, #12]	; (1d04 <bg_thread_main+0x2c>)
    1cf6:	7b13      	ldrb	r3, [r2, #12]
    1cf8:	f023 0301 	bic.w	r3, r3, #1
    1cfc:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    1cfe:	bd08      	pop	{r3, pc}
    1d00:	000049a6 	.word	0x000049a6
    1d04:	200005c4 	.word	0x200005c4

00001d08 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    1d08:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    1d0a:	4b37      	ldr	r3, [pc, #220]	; (1de8 <z_cstart+0xe0>)
    1d0c:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    1d0e:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1d12:	2500      	movs	r5, #0
    1d14:	23e0      	movs	r3, #224	; 0xe0
    1d16:	4c35      	ldr	r4, [pc, #212]	; (1dec <z_cstart+0xe4>)

	/* perform any architecture-specific initialization */
	z_arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
    1d18:	2701      	movs	r7, #1
    1d1a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    1d1e:	77e5      	strb	r5, [r4, #31]
    1d20:	7625      	strb	r5, [r4, #24]
    1d22:	7665      	strb	r5, [r4, #25]
    1d24:	76a5      	strb	r5, [r4, #26]
    1d26:	76e5      	strb	r5, [r4, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    1d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    1d2a:	4e31      	ldr	r6, [pc, #196]	; (1df0 <z_cstart+0xe8>)
    1d2c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    1d30:	6263      	str	r3, [r4, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    1d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1d34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    1d38:	6263      	str	r3, [r4, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    1d3a:	63a5      	str	r5, [r4, #56]	; 0x38

static ALWAYS_INLINE void z_arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    1d3c:	f7ff fbb2 	bl	14a4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    1d40:	f7ff f9c4 	bl	10cc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    1d44:	f04f 33ff 	mov.w	r3, #4294967295
    1d48:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    1d4a:	62e3      	str	r3, [r4, #44]	; 0x2c
	struct k_thread dummy_thread = {
    1d4c:	ab07      	add	r3, sp, #28
    1d4e:	226c      	movs	r2, #108	; 0x6c
    1d50:	4629      	mov	r1, r5
    1d52:	4618      	mov	r0, r3
    1d54:	f001 ffc2 	bl	3cdc <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    1d58:	4c26      	ldr	r4, [pc, #152]	; (1df4 <z_cstart+0xec>)
	struct k_thread dummy_thread = {
    1d5a:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	_current = &dummy_thread;
    1d5e:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    1d60:	4628      	mov	r0, r5
    1d62:	f7ff ff3f 	bl	1be4 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    1d66:	4638      	mov	r0, r7
    1d68:	f7ff ff3c 	bl	1be4 <z_sys_device_do_config_level>
	z_sched_init();
    1d6c:	f000 fba0 	bl	24b0 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1d70:	4b21      	ldr	r3, [pc, #132]	; (1df8 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    1d72:	6266      	str	r6, [r4, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1d74:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1d78:	e9cd 7304 	strd	r7, r3, [sp, #16]
    1d7c:	e9cd 5502 	strd	r5, r5, [sp, #8]
    1d80:	4b1e      	ldr	r3, [pc, #120]	; (1dfc <z_cstart+0xf4>)
    1d82:	e9cd 5500 	strd	r5, r5, [sp]
    1d86:	491e      	ldr	r1, [pc, #120]	; (1e00 <z_cstart+0xf8>)
    1d88:	4630      	mov	r0, r6
    1d8a:	f000 fbc7 	bl	251c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1d8e:	7b73      	ldrb	r3, [r6, #13]
    1d90:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1d94:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1d98:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1d9a:	d104      	bne.n	1da6 <z_cstart+0x9e>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    1d9c:	69b3      	ldr	r3, [r6, #24]
    1d9e:	b913      	cbnz	r3, 1da6 <z_cstart+0x9e>
		z_add_thread_to_ready_q(thread);
    1da0:	4630      	mov	r0, r6
    1da2:	f000 fa19 	bl	21d8 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
    1da6:	4b17      	ldr	r3, [pc, #92]	; (1e04 <z_cstart+0xfc>)
    1da8:	2201      	movs	r2, #1
    1daa:	9305      	str	r3, [sp, #20]
    1dac:	230f      	movs	r3, #15
    1dae:	e9cd 3203 	strd	r3, r2, [sp, #12]
    1db2:	2300      	movs	r3, #0
    1db4:	4d14      	ldr	r5, [pc, #80]	; (1e08 <z_cstart+0x100>)
    1db6:	e9cd 3301 	strd	r3, r3, [sp, #4]
    1dba:	9300      	str	r3, [sp, #0]
    1dbc:	f44f 72a0 	mov.w	r2, #320	; 0x140
    1dc0:	4b12      	ldr	r3, [pc, #72]	; (1e0c <z_cstart+0x104>)
    1dc2:	4913      	ldr	r1, [pc, #76]	; (1e10 <z_cstart+0x108>)
    1dc4:	4628      	mov	r0, r5
    1dc6:	f000 fba9 	bl	251c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1dca:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
    1dcc:	60e5      	str	r5, [r4, #12]
    1dce:	f023 0304 	bic.w	r3, r3, #4
    1dd2:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    1dd4:	4b0f      	ldr	r3, [pc, #60]	; (1e14 <z_cstart+0x10c>)
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    1dd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
	list->tail = (sys_dnode_t *)list;
    1dda:	e9c4 3306 	strd	r3, r3, [r4, #24]
    1dde:	4908      	ldr	r1, [pc, #32]	; (1e00 <z_cstart+0xf8>)
    1de0:	4b06      	ldr	r3, [pc, #24]	; (1dfc <z_cstart+0xf4>)
    1de2:	4803      	ldr	r0, [pc, #12]	; (1df0 <z_cstart+0xe8>)
    1de4:	f7ff fa20 	bl	1228 <z_arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    1de8:	200013d0 	.word	0x200013d0
    1dec:	e000ed00 	.word	0xe000ed00
    1df0:	200005c4 	.word	0x200005c4
    1df4:	20000630 	.word	0x20000630
    1df8:	000049ed 	.word	0x000049ed
    1dfc:	00001cd9 	.word	0x00001cd9
    1e00:	20000690 	.word	0x20000690
    1e04:	000049f2 	.word	0x000049f2
    1e08:	20000558 	.word	0x20000558
    1e0c:	00001c5d 	.word	0x00001c5d
    1e10:	20000a90 	.word	0x20000a90
    1e14:	20000648 	.word	0x20000648

00001e18 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    1e18:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
    1e1a:	2400      	movs	r4, #0
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    1e1c:	4b0a      	ldr	r3, [pc, #40]	; (1e48 <init_mem_slab_module+0x30>)
    1e1e:	480b      	ldr	r0, [pc, #44]	; (1e4c <init_mem_slab_module+0x34>)
    1e20:	4283      	cmp	r3, r0
    1e22:	d301      	bcc.n	1e28 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
    1e24:	2000      	movs	r0, #0
    1e26:	bd70      	pop	{r4, r5, r6, pc}
	for (j = 0U; j < slab->num_blocks; j++) {
    1e28:	2100      	movs	r1, #0
	p = slab->buffer;
    1e2a:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    1e2c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    1e2e:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    1e30:	42a9      	cmp	r1, r5
    1e32:	d101      	bne.n	1e38 <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    1e34:	331c      	adds	r3, #28
    1e36:	e7f3      	b.n	1e20 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    1e38:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    1e3a:	3101      	adds	r1, #1
		*(char **)p = slab->free_list;
    1e3c:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
    1e3e:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
    1e40:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
    1e42:	4432      	add	r2, r6
    1e44:	e7f4      	b.n	1e30 <init_mem_slab_module+0x18>
    1e46:	bf00      	nop
    1e48:	200014cc 	.word	0x200014cc
    1e4c:	200014cc 	.word	0x200014cc

00001e50 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
    1e50:	b510      	push	{r4, lr}
    1e52:	4613      	mov	r3, r2
    1e54:	460c      	mov	r4, r1
    1e56:	f04f 0220 	mov.w	r2, #32
    1e5a:	f3ef 8111 	mrs	r1, BASEPRI
    1e5e:	f382 8811 	msr	BASEPRI, r2
    1e62:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    1e66:	6942      	ldr	r2, [r0, #20]
    1e68:	b15a      	cbz	r2, 1e82 <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
    1e6a:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    1e6c:	6813      	ldr	r3, [r2, #0]
    1e6e:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    1e70:	6983      	ldr	r3, [r0, #24]
    1e72:	3301      	adds	r3, #1
    1e74:	6183      	str	r3, [r0, #24]
		result = 0;
    1e76:	2000      	movs	r0, #0
	__asm__ volatile(
    1e78:	f381 8811 	msr	BASEPRI, r1
    1e7c:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    1e80:	e00d      	b.n	1e9e <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
    1e82:	b91b      	cbnz	r3, 1e8c <k_mem_slab_alloc+0x3c>
		*mem = NULL;
    1e84:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    1e86:	f06f 000b 	mvn.w	r0, #11
    1e8a:	e7f5      	b.n	1e78 <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    1e8c:	4602      	mov	r2, r0
    1e8e:	4804      	ldr	r0, [pc, #16]	; (1ea0 <k_mem_slab_alloc+0x50>)
    1e90:	f000 fab8 	bl	2404 <z_pend_curr>
		if (result == 0) {
    1e94:	b918      	cbnz	r0, 1e9e <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
    1e96:	4b03      	ldr	r3, [pc, #12]	; (1ea4 <k_mem_slab_alloc+0x54>)
    1e98:	689b      	ldr	r3, [r3, #8]
    1e9a:	695b      	ldr	r3, [r3, #20]
    1e9c:	6023      	str	r3, [r4, #0]
}
    1e9e:	bd10      	pop	{r4, pc}
    1ea0:	2000068d 	.word	0x2000068d
    1ea4:	20000630 	.word	0x20000630

00001ea8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    1ea8:	b570      	push	{r4, r5, r6, lr}
    1eaa:	4604      	mov	r4, r0
    1eac:	460d      	mov	r5, r1
	__asm__ volatile(
    1eae:	f04f 0320 	mov.w	r3, #32
    1eb2:	f3ef 8611 	mrs	r6, BASEPRI
    1eb6:	f383 8811 	msr	BASEPRI, r3
    1eba:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    1ebe:	f002 f82f 	bl	3f20 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    1ec2:	b180      	cbz	r0, 1ee6 <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
z_arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    1ec4:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    1ec6:	682a      	ldr	r2, [r5, #0]
    1ec8:	6681      	str	r1, [r0, #104]	; 0x68
	thread->base.swap_data = data;
    1eca:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1ecc:	7b42      	ldrb	r2, [r0, #13]
    1ece:	06d2      	lsls	r2, r2, #27
    1ed0:	d103      	bne.n	1eda <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
    1ed2:	6983      	ldr	r3, [r0, #24]
    1ed4:	b90b      	cbnz	r3, 1eda <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
    1ed6:	f000 f97f 	bl	21d8 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
    1eda:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    1edc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    1ee0:	4807      	ldr	r0, [pc, #28]	; (1f00 <k_mem_slab_free+0x58>)
    1ee2:	f001 bfbd 	b.w	3e60 <z_reschedule>
		**(char ***)mem = slab->free_list;
    1ee6:	682b      	ldr	r3, [r5, #0]
    1ee8:	6962      	ldr	r2, [r4, #20]
    1eea:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    1eec:	682b      	ldr	r3, [r5, #0]
    1eee:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    1ef0:	69a3      	ldr	r3, [r4, #24]
    1ef2:	3b01      	subs	r3, #1
    1ef4:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    1ef6:	f386 8811 	msr	BASEPRI, r6
    1efa:	f3bf 8f6f 	isb	sy
}
    1efe:	bd70      	pop	{r4, r5, r6, pc}
    1f00:	2000068d 	.word	0x2000068d

00001f04 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    1f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f06:	4604      	mov	r4, r0
    1f08:	460f      	mov	r7, r1
	__asm__ volatile(
    1f0a:	f04f 0320 	mov.w	r3, #32
    1f0e:	f3ef 8511 	mrs	r5, BASEPRI
    1f12:	f383 8811 	msr	BASEPRI, r3
    1f16:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    1f1a:	68c2      	ldr	r2, [r0, #12]
    1f1c:	4930      	ldr	r1, [pc, #192]	; (1fe0 <z_impl_k_mutex_lock+0xdc>)
    1f1e:	b15a      	cbz	r2, 1f38 <z_impl_k_mutex_lock+0x34>
    1f20:	6880      	ldr	r0, [r0, #8]
    1f22:	688e      	ldr	r6, [r1, #8]
    1f24:	42b0      	cmp	r0, r6
    1f26:	d015      	beq.n	1f54 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
    1f28:	b9b7      	cbnz	r7, 1f58 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
    1f2a:	f385 8811 	msr	BASEPRI, r5
    1f2e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    1f32:	f06f 000f 	mvn.w	r0, #15
    1f36:	e00c      	b.n	1f52 <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
    1f38:	688b      	ldr	r3, [r1, #8]
    1f3a:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    1f3e:	6123      	str	r3, [r4, #16]
		mutex->owner = _current;
    1f40:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
    1f42:	3201      	adds	r2, #1
    1f44:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
    1f46:	60a3      	str	r3, [r4, #8]
    1f48:	f385 8811 	msr	BASEPRI, r5
    1f4c:	f3bf 8f6f 	isb	sy
		return 0;
    1f50:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    1f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
    1f54:	6923      	ldr	r3, [r4, #16]
    1f56:	e7f2      	b.n	1f3e <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    1f58:	f990 300e 	ldrsb.w	r3, [r0, #14]
    1f5c:	f996 100e 	ldrsb.w	r1, [r6, #14]
    1f60:	4299      	cmp	r1, r3
    1f62:	bfa8      	it	ge
    1f64:	4619      	movge	r1, r3
    1f66:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    1f6a:	4299      	cmp	r1, r3
    1f6c:	da2b      	bge.n	1fc6 <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
    1f6e:	f000 fa5d 	bl	242c <z_set_prio>
    1f72:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    1f74:	463b      	mov	r3, r7
    1f76:	4622      	mov	r2, r4
    1f78:	4629      	mov	r1, r5
    1f7a:	481a      	ldr	r0, [pc, #104]	; (1fe4 <z_impl_k_mutex_lock+0xe0>)
    1f7c:	f000 fa42 	bl	2404 <z_pend_curr>
	if (got_mutex == 0) {
    1f80:	2800      	cmp	r0, #0
    1f82:	d0e6      	beq.n	1f52 <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
    1f84:	f04f 0320 	mov.w	r3, #32
    1f88:	f3ef 8511 	mrs	r5, BASEPRI
    1f8c:	f383 8811 	msr	BASEPRI, r3
    1f90:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    1f94:	6823      	ldr	r3, [r4, #0]
    1f96:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1f98:	429c      	cmp	r4, r3
    1f9a:	d007      	beq.n	1fac <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
    1f9c:	b133      	cbz	r3, 1fac <z_impl_k_mutex_lock+0xa8>
    1f9e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    1fa2:	4299      	cmp	r1, r3
    1fa4:	bfa8      	it	ge
    1fa6:	4619      	movge	r1, r3
    1fa8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    1fac:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    1fae:	f990 300e 	ldrsb.w	r3, [r0, #14]
    1fb2:	4299      	cmp	r1, r3
    1fb4:	d109      	bne.n	1fca <z_impl_k_mutex_lock+0xc6>
	if (resched) {
    1fb6:	b16e      	cbz	r6, 1fd4 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
    1fb8:	4629      	mov	r1, r5
    1fba:	480a      	ldr	r0, [pc, #40]	; (1fe4 <z_impl_k_mutex_lock+0xe0>)
    1fbc:	f001 ff50 	bl	3e60 <z_reschedule>
	return -EAGAIN;
    1fc0:	f06f 000a 	mvn.w	r0, #10
    1fc4:	e7c5      	b.n	1f52 <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
    1fc6:	2600      	movs	r6, #0
    1fc8:	e7d4      	b.n	1f74 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
    1fca:	f000 fa2f 	bl	242c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    1fce:	2800      	cmp	r0, #0
    1fd0:	d1f2      	bne.n	1fb8 <z_impl_k_mutex_lock+0xb4>
    1fd2:	e7f0      	b.n	1fb6 <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
    1fd4:	f385 8811 	msr	BASEPRI, r5
    1fd8:	f3bf 8f6f 	isb	sy
    1fdc:	e7f0      	b.n	1fc0 <z_impl_k_mutex_lock+0xbc>
    1fde:	bf00      	nop
    1fe0:	20000630 	.word	0x20000630
    1fe4:	2000068d 	.word	0x2000068d

00001fe8 <z_impl_k_mutex_unlock>:
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    1fe8:	4b1e      	ldr	r3, [pc, #120]	; (2064 <z_impl_k_mutex_unlock+0x7c>)
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    1fea:	b570      	push	{r4, r5, r6, lr}
    1fec:	689a      	ldr	r2, [r3, #8]
    1fee:	4604      	mov	r4, r0
    1ff0:	7bd3      	ldrb	r3, [r2, #15]
    1ff2:	3b01      	subs	r3, #1
    1ff4:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
    1ff6:	68c3      	ldr	r3, [r0, #12]
    1ff8:	2b01      	cmp	r3, #1
    1ffa:	d005      	beq.n	2008 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
    1ffc:	3b01      	subs	r3, #1
    1ffe:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
    2000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
    2004:	f000 b8cc 	b.w	21a0 <k_sched_unlock>
	__asm__ volatile(
    2008:	f04f 0320 	mov.w	r3, #32
    200c:	f3ef 8611 	mrs	r6, BASEPRI
    2010:	f383 8811 	msr	BASEPRI, r3
    2014:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    2018:	6901      	ldr	r1, [r0, #16]
    201a:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    201c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    2020:	4299      	cmp	r1, r3
    2022:	d001      	beq.n	2028 <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
    2024:	f000 fa02 	bl	242c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    2028:	4620      	mov	r0, r4
    202a:	f001 ff79 	bl	3f20 <z_unpend_first_thread>
    202e:	4605      	mov	r5, r0
	mutex->owner = new_owner;
    2030:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    2032:	b180      	cbz	r0, 2056 <z_impl_k_mutex_unlock+0x6e>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2034:	7b43      	ldrb	r3, [r0, #13]
    2036:	06db      	lsls	r3, r3, #27
    2038:	d103      	bne.n	2042 <z_impl_k_mutex_unlock+0x5a>
	if (z_is_thread_ready(thread)) {
    203a:	6983      	ldr	r3, [r0, #24]
    203c:	b90b      	cbnz	r3, 2042 <z_impl_k_mutex_unlock+0x5a>
		z_add_thread_to_ready_q(thread);
    203e:	f000 f8cb 	bl	21d8 <z_add_thread_to_ready_q>
	__asm__ volatile(
    2042:	f386 8811 	msr	BASEPRI, r6
    2046:	f3bf 8f6f 	isb	sy
    204a:	2300      	movs	r3, #0
    204c:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
    204e:	f995 300e 	ldrsb.w	r3, [r5, #14]
    2052:	6123      	str	r3, [r4, #16]
    2054:	e7d4      	b.n	2000 <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
    2056:	60e0      	str	r0, [r4, #12]
    2058:	f386 8811 	msr	BASEPRI, r6
    205c:	f3bf 8f6f 	isb	sy
    2060:	e7ce      	b.n	2000 <z_impl_k_mutex_unlock+0x18>
    2062:	bf00      	nop
    2064:	20000630 	.word	0x20000630

00002068 <resched.part.15>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2068:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    206c:	280d      	cmp	r0, #13
    206e:	d809      	bhi.n	2084 <resched.part.15+0x1c>
    2070:	b128      	cbz	r0, 207e <resched.part.15+0x16>
    2072:	4b05      	ldr	r3, [pc, #20]	; (2088 <resched.part.15+0x20>)
    2074:	6858      	ldr	r0, [r3, #4]
    2076:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    207a:	f3c0 20c0 	ubfx	r0, r0, #11, #1
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
}
    207e:	f080 0001 	eor.w	r0, r0, #1
    2082:	4770      	bx	lr
    2084:	2001      	movs	r0, #1
    2086:	e7fa      	b.n	207e <resched.part.15+0x16>
    2088:	e000ed00 	.word	0xe000ed00

0000208c <z_reset_time_slice>:
{
    208c:	b510      	push	{r4, lr}
	if (slice_time != 0) {
    208e:	4c08      	ldr	r4, [pc, #32]	; (20b0 <z_reset_time_slice+0x24>)
    2090:	6823      	ldr	r3, [r4, #0]
    2092:	b15b      	cbz	r3, 20ac <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    2094:	f7fe fc9e 	bl	9d4 <z_clock_elapsed>
    2098:	6823      	ldr	r3, [r4, #0]
    209a:	4a06      	ldr	r2, [pc, #24]	; (20b4 <z_reset_time_slice+0x28>)
    209c:	4418      	add	r0, r3
    209e:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    20a0:	2100      	movs	r1, #0
}
    20a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    20a6:	4618      	mov	r0, r3
    20a8:	f001 bfbd 	b.w	4026 <z_set_timeout_expiry>
}
    20ac:	bd10      	pop	{r4, pc}
    20ae:	bf00      	nop
    20b0:	20000668 	.word	0x20000668
    20b4:	20000630 	.word	0x20000630

000020b8 <k_sched_time_slice_set>:
{
    20b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20ba:	460d      	mov	r5, r1
	__asm__ volatile(
    20bc:	f04f 0320 	mov.w	r3, #32
    20c0:	f3ef 8411 	mrs	r4, BASEPRI
    20c4:	f383 8811 	msr	BASEPRI, r3
    20c8:	f3bf 8f6f 	isb	sy

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
    20cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    20d0:	f240 36e7 	movw	r6, #999	; 0x3e7
    20d4:	2700      	movs	r7, #0
		_current_cpu->slice_ticks = 0;
    20d6:	2200      	movs	r2, #0
    20d8:	fbc1 6700 	smlal	r6, r7, r1, r0
    20dc:	4b09      	ldr	r3, [pc, #36]	; (2104 <k_sched_time_slice_set+0x4c>)
    20de:	4630      	mov	r0, r6
    20e0:	611a      	str	r2, [r3, #16]
    20e2:	4639      	mov	r1, r7
    20e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    20e8:	2300      	movs	r3, #0
    20ea:	f7fe f899 	bl	220 <__aeabi_ldivmod>
    20ee:	4b06      	ldr	r3, [pc, #24]	; (2108 <k_sched_time_slice_set+0x50>)
    20f0:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    20f2:	4b06      	ldr	r3, [pc, #24]	; (210c <k_sched_time_slice_set+0x54>)
    20f4:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    20f6:	f7ff ffc9 	bl	208c <z_reset_time_slice>
	__asm__ volatile(
    20fa:	f384 8811 	msr	BASEPRI, r4
    20fe:	f3bf 8f6f 	isb	sy
}
    2102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2104:	20000630 	.word	0x20000630
    2108:	20000668 	.word	0x20000668
    210c:	20000664 	.word	0x20000664

00002110 <k_sched_lock>:
	__asm__ volatile(
    2110:	f04f 0320 	mov.w	r3, #32
    2114:	f3ef 8111 	mrs	r1, BASEPRI
    2118:	f383 8811 	msr	BASEPRI, r3
    211c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    2120:	4b04      	ldr	r3, [pc, #16]	; (2134 <k_sched_lock+0x24>)
    2122:	689a      	ldr	r2, [r3, #8]
    2124:	7bd3      	ldrb	r3, [r2, #15]
    2126:	3b01      	subs	r3, #1
    2128:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    212a:	f381 8811 	msr	BASEPRI, r1
    212e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    2132:	4770      	bx	lr
    2134:	20000630 	.word	0x20000630

00002138 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    2138:	4b09      	ldr	r3, [pc, #36]	; (2160 <z_priq_dumb_remove+0x28>)
    213a:	f103 0228 	add.w	r2, r3, #40	; 0x28
    213e:	4282      	cmp	r2, r0
    2140:	d105      	bne.n	214e <z_priq_dumb_remove+0x16>
    2142:	689b      	ldr	r3, [r3, #8]
    2144:	428b      	cmp	r3, r1
    2146:	d102      	bne.n	214e <z_priq_dumb_remove+0x16>
    2148:	7b4b      	ldrb	r3, [r1, #13]
    214a:	06db      	lsls	r3, r3, #27
    214c:	d106      	bne.n	215c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    214e:	e9d1 3200 	ldrd	r3, r2, [r1]
    2152:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    2154:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    2156:	2300      	movs	r3, #0
	node->prev = NULL;
    2158:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    215c:	4770      	bx	lr
    215e:	bf00      	nop
    2160:	20000630 	.word	0x20000630

00002164 <update_cache>:
{
    2164:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    2166:	4c0d      	ldr	r4, [pc, #52]	; (219c <update_cache+0x38>)
{
    2168:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    216a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    216e:	f001 fea0 	bl	3eb2 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    2172:	4605      	mov	r5, r0
    2174:	b900      	cbnz	r0, 2178 <update_cache+0x14>
    2176:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    2178:	68a3      	ldr	r3, [r4, #8]
    217a:	b94a      	cbnz	r2, 2190 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    217c:	7b5a      	ldrb	r2, [r3, #13]
    217e:	06d2      	lsls	r2, r2, #27
    2180:	d106      	bne.n	2190 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    2182:	69aa      	ldr	r2, [r5, #24]
    2184:	b922      	cbnz	r2, 2190 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
    2186:	89da      	ldrh	r2, [r3, #14]
    2188:	2a7f      	cmp	r2, #127	; 0x7f
    218a:	d901      	bls.n	2190 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    218c:	6263      	str	r3, [r4, #36]	; 0x24
}
    218e:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
    2190:	429d      	cmp	r5, r3
    2192:	d001      	beq.n	2198 <update_cache+0x34>
			z_reset_time_slice();
    2194:	f7ff ff7a 	bl	208c <z_reset_time_slice>
		_kernel.ready_q.cache = th;
    2198:	6265      	str	r5, [r4, #36]	; 0x24
}
    219a:	e7f8      	b.n	218e <update_cache+0x2a>
    219c:	20000630 	.word	0x20000630

000021a0 <k_sched_unlock>:
{
    21a0:	b510      	push	{r4, lr}
	__asm__ volatile(
    21a2:	f04f 0320 	mov.w	r3, #32
    21a6:	f3ef 8411 	mrs	r4, BASEPRI
    21aa:	f383 8811 	msr	BASEPRI, r3
    21ae:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    21b2:	4b08      	ldr	r3, [pc, #32]	; (21d4 <k_sched_unlock+0x34>)
		update_cache(0);
    21b4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    21b6:	689a      	ldr	r2, [r3, #8]
    21b8:	7bd3      	ldrb	r3, [r2, #15]
    21ba:	3301      	adds	r3, #1
    21bc:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    21be:	f7ff ffd1 	bl	2164 <update_cache>
	__asm__ volatile(
    21c2:	f384 8811 	msr	BASEPRI, r4
    21c6:	f3bf 8f6f 	isb	sy
}
    21ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    21ce:	f001 be66 	b.w	3e9e <z_reschedule_unlocked>
    21d2:	bf00      	nop
    21d4:	20000630 	.word	0x20000630

000021d8 <z_add_thread_to_ready_q>:
{
    21d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    21da:	f04f 0320 	mov.w	r3, #32
    21de:	f3ef 8411 	mrs	r4, BASEPRI
    21e2:	f383 8811 	msr	BASEPRI, r3
    21e6:	f3bf 8f6f 	isb	sy
	return list->head == list;
    21ea:	4a15      	ldr	r2, [pc, #84]	; (2240 <z_add_thread_to_ready_q+0x68>)
    21ec:	4611      	mov	r1, r2
    21ee:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    21f2:	428b      	cmp	r3, r1
    21f4:	d01d      	beq.n	2232 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    21f6:	b1e3      	cbz	r3, 2232 <z_add_thread_to_ready_q+0x5a>
    21f8:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    21fa:	f990 500e 	ldrsb.w	r5, [r0, #14]
    21fe:	f993 700e 	ldrsb.w	r7, [r3, #14]
    2202:	42af      	cmp	r7, r5
    2204:	dd10      	ble.n	2228 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
    2206:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2208:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    220c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    220e:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    2210:	7b43      	ldrb	r3, [r0, #13]
    2212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2216:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    2218:	2000      	movs	r0, #0
    221a:	f7ff ffa3 	bl	2164 <update_cache>
	__asm__ volatile(
    221e:	f384 8811 	msr	BASEPRI, r4
    2222:	f3bf 8f6f 	isb	sy
}
    2226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    2228:	42b3      	cmp	r3, r6
    222a:	d002      	beq.n	2232 <z_add_thread_to_ready_q+0x5a>
    222c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    222e:	2b00      	cmp	r3, #0
    2230:	d1e5      	bne.n	21fe <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    2232:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    2234:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    2236:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    2238:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    223a:	6018      	str	r0, [r3, #0]
	list->tail = node;
    223c:	62d0      	str	r0, [r2, #44]	; 0x2c
    223e:	e7e7      	b.n	2210 <z_add_thread_to_ready_q+0x38>
    2240:	20000630 	.word	0x20000630

00002244 <z_move_thread_to_end_of_prio_q>:
{
    2244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2246:	4604      	mov	r4, r0
	__asm__ volatile(
    2248:	f04f 0320 	mov.w	r3, #32
    224c:	f3ef 8511 	mrs	r5, BASEPRI
    2250:	f383 8811 	msr	BASEPRI, r3
    2254:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2258:	7b43      	ldrb	r3, [r0, #13]
    225a:	065a      	lsls	r2, r3, #25
    225c:	d503      	bpl.n	2266 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    225e:	4601      	mov	r1, r0
    2260:	4817      	ldr	r0, [pc, #92]	; (22c0 <z_move_thread_to_end_of_prio_q+0x7c>)
    2262:	f7ff ff69 	bl	2138 <z_priq_dumb_remove>
	return list->head == list;
    2266:	4a17      	ldr	r2, [pc, #92]	; (22c4 <z_move_thread_to_end_of_prio_q+0x80>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2268:	f102 0128 	add.w	r1, r2, #40	; 0x28
    226c:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
    2270:	428b      	cmp	r3, r1
    2272:	d01f      	beq.n	22b4 <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2274:	b1f3      	cbz	r3, 22b4 <z_move_thread_to_end_of_prio_q+0x70>
	if (t1->base.prio < t2->base.prio) {
    2276:	f994 600e 	ldrsb.w	r6, [r4, #14]
    227a:	f993 700e 	ldrsb.w	r7, [r3, #14]
    227e:	42b7      	cmp	r7, r6
    2280:	dd13      	ble.n	22aa <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
    2282:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    2284:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    2288:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    228a:	605c      	str	r4, [r3, #4]
    228c:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    228e:	6890      	ldr	r0, [r2, #8]
    2290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2294:	7363      	strb	r3, [r4, #13]
    2296:	1b03      	subs	r3, r0, r4
    2298:	4258      	negs	r0, r3
    229a:	4158      	adcs	r0, r3
    229c:	f7ff ff62 	bl	2164 <update_cache>
	__asm__ volatile(
    22a0:	f385 8811 	msr	BASEPRI, r5
    22a4:	f3bf 8f6f 	isb	sy
}
    22a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    22aa:	4298      	cmp	r0, r3
    22ac:	d002      	beq.n	22b4 <z_move_thread_to_end_of_prio_q+0x70>
    22ae:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    22b0:	2b00      	cmp	r3, #0
    22b2:	d1e2      	bne.n	227a <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
    22b4:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    22b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    22ba:	601c      	str	r4, [r3, #0]
	list->tail = node;
    22bc:	62d4      	str	r4, [r2, #44]	; 0x2c
    22be:	e7e5      	b.n	228c <z_move_thread_to_end_of_prio_q+0x48>
    22c0:	20000658 	.word	0x20000658
    22c4:	20000630 	.word	0x20000630

000022c8 <z_time_slice>:
	if (pending_current == _current) {
    22c8:	4a15      	ldr	r2, [pc, #84]	; (2320 <z_time_slice+0x58>)
    22ca:	4916      	ldr	r1, [pc, #88]	; (2324 <z_time_slice+0x5c>)
{
    22cc:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    22ce:	680c      	ldr	r4, [r1, #0]
    22d0:	6893      	ldr	r3, [r2, #8]
    22d2:	42a3      	cmp	r3, r4
    22d4:	4614      	mov	r4, r2
    22d6:	d103      	bne.n	22e0 <z_time_slice+0x18>
}
    22d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    22dc:	f7ff bed6 	b.w	208c <z_reset_time_slice>
	pending_current = NULL;
    22e0:	2500      	movs	r5, #0
    22e2:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
    22e4:	4910      	ldr	r1, [pc, #64]	; (2328 <z_time_slice+0x60>)
    22e6:	6809      	ldr	r1, [r1, #0]
    22e8:	b1b9      	cbz	r1, 231a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    22ea:	89d9      	ldrh	r1, [r3, #14]
    22ec:	297f      	cmp	r1, #127	; 0x7f
    22ee:	d814      	bhi.n	231a <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
    22f0:	490e      	ldr	r1, [pc, #56]	; (232c <z_time_slice+0x64>)
    22f2:	f993 500e 	ldrsb.w	r5, [r3, #14]
    22f6:	6809      	ldr	r1, [r1, #0]
    22f8:	428d      	cmp	r5, r1
    22fa:	db0e      	blt.n	231a <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
    22fc:	490c      	ldr	r1, [pc, #48]	; (2330 <z_time_slice+0x68>)
    22fe:	428b      	cmp	r3, r1
    2300:	d00b      	beq.n	231a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    2302:	6999      	ldr	r1, [r3, #24]
    2304:	b949      	cbnz	r1, 231a <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    2306:	6911      	ldr	r1, [r2, #16]
    2308:	4281      	cmp	r1, r0
    230a:	dc03      	bgt.n	2314 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    230c:	4618      	mov	r0, r3
    230e:	f7ff ff99 	bl	2244 <z_move_thread_to_end_of_prio_q>
    2312:	e7e1      	b.n	22d8 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
    2314:	1a09      	subs	r1, r1, r0
    2316:	6111      	str	r1, [r2, #16]
}
    2318:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    231a:	2300      	movs	r3, #0
    231c:	6123      	str	r3, [r4, #16]
    231e:	e7fb      	b.n	2318 <z_time_slice+0x50>
    2320:	20000630 	.word	0x20000630
    2324:	20000660 	.word	0x20000660
    2328:	20000668 	.word	0x20000668
    232c:	20000664 	.word	0x20000664
    2330:	20000558 	.word	0x20000558

00002334 <z_remove_thread_from_ready_q>:
{
    2334:	b538      	push	{r3, r4, r5, lr}
    2336:	4604      	mov	r4, r0
	__asm__ volatile(
    2338:	f04f 0320 	mov.w	r3, #32
    233c:	f3ef 8511 	mrs	r5, BASEPRI
    2340:	f383 8811 	msr	BASEPRI, r3
    2344:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2348:	7b43      	ldrb	r3, [r0, #13]
    234a:	065a      	lsls	r2, r3, #25
    234c:	d507      	bpl.n	235e <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    234e:	4601      	mov	r1, r0
    2350:	4809      	ldr	r0, [pc, #36]	; (2378 <z_remove_thread_from_ready_q+0x44>)
    2352:	f7ff fef1 	bl	2138 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    2356:	7b63      	ldrb	r3, [r4, #13]
    2358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    235c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    235e:	4b07      	ldr	r3, [pc, #28]	; (237c <z_remove_thread_from_ready_q+0x48>)
    2360:	6898      	ldr	r0, [r3, #8]
    2362:	1b03      	subs	r3, r0, r4
    2364:	4258      	negs	r0, r3
    2366:	4158      	adcs	r0, r3
    2368:	f7ff fefc 	bl	2164 <update_cache>
	__asm__ volatile(
    236c:	f385 8811 	msr	BASEPRI, r5
    2370:	f3bf 8f6f 	isb	sy
}
    2374:	bd38      	pop	{r3, r4, r5, pc}
    2376:	bf00      	nop
    2378:	20000658 	.word	0x20000658
    237c:	20000630 	.word	0x20000630

00002380 <pend>:
{
    2380:	b570      	push	{r4, r5, r6, lr}
    2382:	4604      	mov	r4, r0
    2384:	460d      	mov	r5, r1
    2386:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
    2388:	f7ff ffd4 	bl	2334 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    238c:	7b63      	ldrb	r3, [r4, #13]
    238e:	f043 0302 	orr.w	r3, r3, #2
    2392:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    2394:	b17d      	cbz	r5, 23b6 <pend+0x36>
	return list->head == list;
    2396:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    2398:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    239a:	429d      	cmp	r5, r3
    239c:	d027      	beq.n	23ee <pend+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    239e:	b333      	cbz	r3, 23ee <pend+0x6e>
	if (t1->base.prio < t2->base.prio) {
    23a0:	f994 200e 	ldrsb.w	r2, [r4, #14]
    23a4:	f993 100e 	ldrsb.w	r1, [r3, #14]
    23a8:	4291      	cmp	r1, r2
    23aa:	dd1a      	ble.n	23e2 <pend+0x62>
	node->prev = successor->prev;
    23ac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    23ae:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    23b2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    23b4:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
    23b6:	1c73      	adds	r3, r6, #1
    23b8:	d020      	beq.n	23fc <pend+0x7c>
    23ba:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    23be:	f240 30e7 	movw	r0, #999	; 0x3e7
    23c2:	2100      	movs	r1, #0
    23c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    23c8:	fbc5 0106 	smlal	r0, r1, r5, r6
    23cc:	2300      	movs	r3, #0
    23ce:	f7fd ff27 	bl	220 <__aeabi_ldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    23d2:	490b      	ldr	r1, [pc, #44]	; (2400 <pend+0x80>)
    23d4:	1c42      	adds	r2, r0, #1
    23d6:	f104 0018 	add.w	r0, r4, #24
}
    23da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    23de:	f000 b949 	b.w	2674 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    23e2:	6869      	ldr	r1, [r5, #4]
    23e4:	428b      	cmp	r3, r1
    23e6:	d002      	beq.n	23ee <pend+0x6e>
    23e8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    23ea:	2b00      	cmp	r3, #0
    23ec:	d1da      	bne.n	23a4 <pend+0x24>
	node->prev = list->tail;
    23ee:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    23f0:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    23f2:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    23f4:	686b      	ldr	r3, [r5, #4]
    23f6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    23f8:	606c      	str	r4, [r5, #4]
    23fa:	e7dc      	b.n	23b6 <pend+0x36>
}
    23fc:	bd70      	pop	{r4, r5, r6, pc}
    23fe:	bf00      	nop
    2400:	00003ebf 	.word	0x00003ebf

00002404 <z_pend_curr>:
{
    2404:	b510      	push	{r4, lr}
    2406:	460c      	mov	r4, r1
    2408:	4611      	mov	r1, r2
	pending_current = _current;
    240a:	4a06      	ldr	r2, [pc, #24]	; (2424 <z_pend_curr+0x20>)
    240c:	6890      	ldr	r0, [r2, #8]
    240e:	4a06      	ldr	r2, [pc, #24]	; (2428 <z_pend_curr+0x24>)
    2410:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
    2412:	461a      	mov	r2, r3
    2414:	f7ff ffb4 	bl	2380 <pend>
    2418:	4620      	mov	r0, r4
}
    241a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    241e:	f7fe be97 	b.w	1150 <z_arch_swap>
    2422:	bf00      	nop
    2424:	20000630 	.word	0x20000630
    2428:	20000660 	.word	0x20000660

0000242c <z_set_prio>:
{
    242c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2430:	4604      	mov	r4, r0
	__asm__ volatile(
    2432:	f04f 0320 	mov.w	r3, #32
    2436:	f3ef 8911 	mrs	r9, BASEPRI
    243a:	f383 8811 	msr	BASEPRI, r3
    243e:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
    2442:	f001 fceb 	bl	3e1c <z_is_thread_ready>
		if (need_sched) {
    2446:	b24e      	sxtb	r6, r1
    2448:	4680      	mov	r8, r0
    244a:	b360      	cbz	r0, 24a6 <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    244c:	4d17      	ldr	r5, [pc, #92]	; (24ac <z_set_prio+0x80>)
    244e:	4621      	mov	r1, r4
    2450:	f105 0728 	add.w	r7, r5, #40	; 0x28
    2454:	4638      	mov	r0, r7
    2456:	f7ff fe6f 	bl	2138 <z_priq_dumb_remove>
	return list->head == list;
    245a:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
    245c:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    245e:	42bb      	cmp	r3, r7
    2460:	462a      	mov	r2, r5
    2462:	d019      	beq.n	2498 <z_set_prio+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2464:	b1c3      	cbz	r3, 2498 <z_set_prio+0x6c>
    2466:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    2468:	f993 000e 	ldrsb.w	r0, [r3, #14]
    246c:	42b0      	cmp	r0, r6
    246e:	dd0e      	ble.n	248e <z_set_prio+0x62>
	node->prev = successor->prev;
    2470:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2472:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    2476:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    2478:	605c      	str	r4, [r3, #4]
			update_cache(1);
    247a:	2001      	movs	r0, #1
    247c:	f7ff fe72 	bl	2164 <update_cache>
	__asm__ volatile(
    2480:	f389 8811 	msr	BASEPRI, r9
    2484:	f3bf 8f6f 	isb	sy
}
    2488:	4640      	mov	r0, r8
    248a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (node == list->tail) ? NULL : node->next;
    248e:	4299      	cmp	r1, r3
    2490:	d002      	beq.n	2498 <z_set_prio+0x6c>
    2492:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2494:	2b00      	cmp	r3, #0
    2496:	d1e7      	bne.n	2468 <z_set_prio+0x3c>
	node->prev = list->tail;
    2498:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    249a:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
    249c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    249e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    24a0:	601c      	str	r4, [r3, #0]
	list->tail = node;
    24a2:	62d4      	str	r4, [r2, #44]	; 0x2c
    24a4:	e7e9      	b.n	247a <z_set_prio+0x4e>
			thread->base.prio = prio;
    24a6:	73a6      	strb	r6, [r4, #14]
    24a8:	e7ea      	b.n	2480 <z_set_prio+0x54>
    24aa:	bf00      	nop
    24ac:	20000630 	.word	0x20000630

000024b0 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    24b0:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    24b2:	4b04      	ldr	r3, [pc, #16]	; (24c4 <z_sched_init+0x14>)
    24b4:	4608      	mov	r0, r1
    24b6:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    24ba:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    24be:	f7ff bdfb 	b.w	20b8 <k_sched_time_slice_set>
    24c2:	bf00      	nop
    24c4:	20000630 	.word	0x20000630

000024c8 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    24c8:	4b01      	ldr	r3, [pc, #4]	; (24d0 <z_impl_k_current_get+0x8>)
    24ca:	6898      	ldr	r0, [r3, #8]
    24cc:	4770      	bx	lr
    24ce:	bf00      	nop
    24d0:	20000630 	.word	0x20000630

000024d4 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    24d4:	b510      	push	{r4, lr}
    24d6:	4602      	mov	r2, r0
	__asm__ volatile(
    24d8:	f04f 0320 	mov.w	r3, #32
    24dc:	f3ef 8411 	mrs	r4, BASEPRI
    24e0:	f383 8811 	msr	BASEPRI, r3
    24e4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    24e8:	7b43      	ldrb	r3, [r0, #13]
    24ea:	0759      	lsls	r1, r3, #29
    24ec:	d404      	bmi.n	24f8 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
    24ee:	f384 8811 	msr	BASEPRI, r4
    24f2:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    24f6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    24f8:	f023 0304 	bic.w	r3, r3, #4
    24fc:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
    24fe:	f001 fd3c 	bl	3f7a <z_is_thread_ready>
    2502:	b110      	cbz	r0, 250a <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    2504:	4610      	mov	r0, r2
    2506:	f7ff fe67 	bl	21d8 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    250a:	4621      	mov	r1, r4
}
    250c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    2510:	4801      	ldr	r0, [pc, #4]	; (2518 <z_impl_k_thread_start+0x44>)
    2512:	f001 bca5 	b.w	3e60 <z_reschedule>
    2516:	bf00      	nop
    2518:	2000068d 	.word	0x2000068d

0000251c <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    251c:	b530      	push	{r4, r5, lr}
    251e:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2520:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
    2522:	4604      	mov	r4, r0
	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2524:	9504      	str	r5, [sp, #16]
    2526:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    2528:	9503      	str	r5, [sp, #12]
    252a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    252c:	9502      	str	r5, [sp, #8]
    252e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2530:	9501      	str	r5, [sp, #4]
    2532:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    2534:	9500      	str	r5, [sp, #0]
    2536:	f7fe fe4d 	bl	11d4 <z_arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    253a:	4b03      	ldr	r3, [pc, #12]	; (2548 <z_setup_new_thread+0x2c>)
    253c:	689b      	ldr	r3, [r3, #8]
    253e:	b103      	cbz	r3, 2542 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    2540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2542:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    2544:	b007      	add	sp, #28
    2546:	bd30      	pop	{r4, r5, pc}
    2548:	20000630 	.word	0x20000630

0000254c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    254c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    2550:	4e28      	ldr	r6, [pc, #160]	; (25f4 <z_init_static_threads+0xa8>)
    2552:	4d29      	ldr	r5, [pc, #164]	; (25f8 <z_init_static_threads+0xac>)
    2554:	46b0      	mov	r8, r6
{
    2556:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    2558:	42b5      	cmp	r5, r6
    255a:	f105 0430 	add.w	r4, r5, #48	; 0x30
    255e:	d310      	bcc.n	2582 <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    2560:	f7ff fdd6 	bl	2110 <k_sched_lock>
    2564:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2568:	f240 36e7 	movw	r6, #999	; 0x3e7
    256c:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    256e:	4c22      	ldr	r4, [pc, #136]	; (25f8 <z_init_static_threads+0xac>)
    2570:	f8df a088 	ldr.w	sl, [pc, #136]	; 25fc <z_init_static_threads+0xb0>
    2574:	4544      	cmp	r4, r8
    2576:	d321      	bcc.n	25bc <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    2578:	b007      	add	sp, #28
    257a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    257e:	f7ff be0f 	b.w	21a0 <k_sched_unlock>
		z_setup_new_thread(
    2582:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2586:	9305      	str	r3, [sp, #20]
    2588:	f854 3c10 	ldr.w	r3, [r4, #-16]
    258c:	9304      	str	r3, [sp, #16]
    258e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    2592:	9303      	str	r3, [sp, #12]
    2594:	f854 3c18 	ldr.w	r3, [r4, #-24]
    2598:	9302      	str	r3, [sp, #8]
    259a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    259e:	9301      	str	r3, [sp, #4]
    25a0:	f854 3c20 	ldr.w	r3, [r4, #-32]
    25a4:	9300      	str	r3, [sp, #0]
    25a6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    25aa:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    25ae:	f7ff ffb5 	bl	251c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    25b2:	f854 3c30 	ldr.w	r3, [r4, #-48]
    25b6:	64dd      	str	r5, [r3, #76]	; 0x4c
    25b8:	4625      	mov	r5, r4
    25ba:	e7cd      	b.n	2558 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    25bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    25be:	1c4b      	adds	r3, r1, #1
    25c0:	d004      	beq.n	25cc <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
    25c2:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    25c4:	b921      	cbnz	r1, 25d0 <z_init_static_threads+0x84>
	z_impl_k_thread_start(thread);
    25c6:	4628      	mov	r0, r5
    25c8:	f7ff ff84 	bl	24d4 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    25cc:	3430      	adds	r4, #48	; 0x30
    25ce:	e7d1      	b.n	2574 <z_init_static_threads+0x28>
    25d0:	46b3      	mov	fp, r6
    25d2:	46bc      	mov	ip, r7
    25d4:	fbc9 bc01 	smlal	fp, ip, r9, r1
    25d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    25dc:	2300      	movs	r3, #0
    25de:	4658      	mov	r0, fp
    25e0:	4661      	mov	r1, ip
    25e2:	f7fd fe1d 	bl	220 <__aeabi_ldivmod>
    25e6:	4651      	mov	r1, sl
    25e8:	1c42      	adds	r2, r0, #1
    25ea:	f105 0018 	add.w	r0, r5, #24
    25ee:	f000 f841 	bl	2674 <z_add_timeout>
    25f2:	e7eb      	b.n	25cc <z_init_static_threads+0x80>
    25f4:	200014cc 	.word	0x200014cc
    25f8:	200014cc 	.word	0x200014cc
    25fc:	00003ebf 	.word	0x00003ebf

00002600 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    2600:	4b03      	ldr	r3, [pc, #12]	; (2610 <elapsed+0x10>)
    2602:	681b      	ldr	r3, [r3, #0]
    2604:	b90b      	cbnz	r3, 260a <elapsed+0xa>
    2606:	f7fe b9e5 	b.w	9d4 <z_clock_elapsed>
}
    260a:	2000      	movs	r0, #0
    260c:	4770      	bx	lr
    260e:	bf00      	nop
    2610:	2000066c 	.word	0x2000066c

00002614 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2614:	6803      	ldr	r3, [r0, #0]
    2616:	b140      	cbz	r0, 262a <remove_timeout+0x16>
    2618:	4a07      	ldr	r2, [pc, #28]	; (2638 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    261a:	6852      	ldr	r2, [r2, #4]
    261c:	4290      	cmp	r0, r2
    261e:	d004      	beq.n	262a <remove_timeout+0x16>
	if (next(t) != NULL) {
    2620:	b11b      	cbz	r3, 262a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    2622:	689a      	ldr	r2, [r3, #8]
    2624:	6881      	ldr	r1, [r0, #8]
    2626:	440a      	add	r2, r1
    2628:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    262a:	6842      	ldr	r2, [r0, #4]
    262c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    262e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    2630:	2300      	movs	r3, #0
	node->prev = NULL;
    2632:	e9c0 3300 	strd	r3, r3, [r0]
}
    2636:	4770      	bx	lr
    2638:	2000140c 	.word	0x2000140c

0000263c <next_timeout>:
	return list->head == list;
    263c:	4b0b      	ldr	r3, [pc, #44]	; (266c <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    263e:	b510      	push	{r4, lr}
    2640:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2642:	429c      	cmp	r4, r3
    2644:	bf08      	it	eq
    2646:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    2648:	f7ff ffda 	bl	2600 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    264c:	b154      	cbz	r4, 2664 <next_timeout+0x28>
    264e:	68a3      	ldr	r3, [r4, #8]
    2650:	1a18      	subs	r0, r3, r0
    2652:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    2656:	4b06      	ldr	r3, [pc, #24]	; (2670 <next_timeout+0x34>)
    2658:	691b      	ldr	r3, [r3, #16]
    265a:	b113      	cbz	r3, 2662 <next_timeout+0x26>
    265c:	4298      	cmp	r0, r3
    265e:	bfa8      	it	ge
    2660:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    2662:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2664:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2668:	e7f5      	b.n	2656 <next_timeout+0x1a>
    266a:	bf00      	nop
    266c:	2000140c 	.word	0x2000140c
    2670:	20000630 	.word	0x20000630

00002674 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    2674:	b570      	push	{r4, r5, r6, lr}
    2676:	4604      	mov	r4, r0
    2678:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    267a:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    267c:	f04f 0320 	mov.w	r3, #32
    2680:	f3ef 8511 	mrs	r5, BASEPRI
    2684:	f383 8811 	msr	BASEPRI, r3
    2688:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    268c:	f7ff ffb8 	bl	2600 <elapsed>
    2690:	2e01      	cmp	r6, #1
    2692:	bfac      	ite	ge
    2694:	1980      	addge	r0, r0, r6
    2696:	3001      	addlt	r0, #1
	return list->head == list;
    2698:	4b16      	ldr	r3, [pc, #88]	; (26f4 <z_add_timeout+0x80>)
    269a:	60a0      	str	r0, [r4, #8]
    269c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    269e:	429a      	cmp	r2, r3
    26a0:	d001      	beq.n	26a6 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    26a2:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    26a4:	b932      	cbnz	r2, 26b4 <z_add_timeout+0x40>
	node->prev = list->tail;
    26a6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    26a8:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
    26aa:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    26ac:	685a      	ldr	r2, [r3, #4]
    26ae:	6014      	str	r4, [r2, #0]
	list->tail = node;
    26b0:	605c      	str	r4, [r3, #4]
    26b2:	e00a      	b.n	26ca <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    26b4:	6890      	ldr	r0, [r2, #8]
    26b6:	68a1      	ldr	r1, [r4, #8]
    26b8:	4288      	cmp	r0, r1
    26ba:	dd15      	ble.n	26e8 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
    26bc:	1a41      	subs	r1, r0, r1
    26be:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    26c0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    26c2:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    26c6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    26c8:	6054      	str	r4, [r2, #4]
	return list->head == list;
    26ca:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    26cc:	429a      	cmp	r2, r3
    26ce:	d006      	beq.n	26de <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    26d0:	4294      	cmp	r4, r2
    26d2:	d104      	bne.n	26de <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
    26d4:	f7ff ffb2 	bl	263c <next_timeout>
    26d8:	2100      	movs	r1, #0
    26da:	f7fe f92d 	bl	938 <z_clock_set_timeout>
	__asm__ volatile(
    26de:	f385 8811 	msr	BASEPRI, r5
    26e2:	f3bf 8f6f 	isb	sy
		}
	}
}
    26e6:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    26e8:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    26ea:	4296      	cmp	r6, r2
    26ec:	60a1      	str	r1, [r4, #8]
    26ee:	d0da      	beq.n	26a6 <z_add_timeout+0x32>
    26f0:	6812      	ldr	r2, [r2, #0]
    26f2:	e7d7      	b.n	26a4 <z_add_timeout+0x30>
    26f4:	2000140c 	.word	0x2000140c

000026f8 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    26f8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    26fc:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    26fe:	f7ff fde3 	bl	22c8 <z_time_slice>
	__asm__ volatile(
    2702:	f04f 0320 	mov.w	r3, #32
    2706:	f3ef 8511 	mrs	r5, BASEPRI
    270a:	f383 8811 	msr	BASEPRI, r3
    270e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    2712:	4f21      	ldr	r7, [pc, #132]	; (2798 <z_clock_announce+0xa0>)
    2714:	4e21      	ldr	r6, [pc, #132]	; (279c <z_clock_announce+0xa4>)
    2716:	46b8      	mov	r8, r7
	return list->head == list;
    2718:	f8df 9084 	ldr.w	r9, [pc, #132]	; 27a0 <z_clock_announce+0xa8>
    271c:	6034      	str	r4, [r6, #0]
    271e:	f8d9 4000 	ldr.w	r4, [r9]
    2722:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2724:	454c      	cmp	r4, r9
    2726:	e9d7 bc00 	ldrd	fp, ip, [r7]
    272a:	d005      	beq.n	2738 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    272c:	b124      	cbz	r4, 2738 <z_clock_announce+0x40>
    272e:	68a3      	ldr	r3, [r4, #8]
    2730:	4293      	cmp	r3, r2
    2732:	dd14      	ble.n	275e <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    2734:	1a9b      	subs	r3, r3, r2
    2736:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    2738:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    273a:	eb1b 0002 	adds.w	r0, fp, r2
    273e:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
    2742:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    2746:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    2748:	f7ff ff78 	bl	263c <next_timeout>
    274c:	4621      	mov	r1, r4
    274e:	f7fe f8f3 	bl	938 <z_clock_set_timeout>
	__asm__ volatile(
    2752:	f385 8811 	msr	BASEPRI, r5
    2756:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    275a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    275e:	eb1b 0003 	adds.w	r0, fp, r3
    2762:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    2766:	1ad3      	subs	r3, r2, r3
    2768:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    276a:	2300      	movs	r3, #0
		curr_tick += dt;
    276c:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    2770:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    2772:	4620      	mov	r0, r4
    2774:	f7ff ff4e 	bl	2614 <remove_timeout>
    2778:	f385 8811 	msr	BASEPRI, r5
    277c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    2780:	68e3      	ldr	r3, [r4, #12]
    2782:	4798      	blx	r3
	__asm__ volatile(
    2784:	f04f 0320 	mov.w	r3, #32
    2788:	f3ef 8511 	mrs	r5, BASEPRI
    278c:	f383 8811 	msr	BASEPRI, r3
    2790:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    2794:	e7c3      	b.n	271e <z_clock_announce+0x26>
    2796:	bf00      	nop
    2798:	20000000 	.word	0x20000000
    279c:	2000066c 	.word	0x2000066c
    27a0:	2000140c 	.word	0x2000140c

000027a4 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    27a4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    27a6:	4c07      	ldr	r4, [pc, #28]	; (27c4 <init_static_pools+0x20>)
    27a8:	4d07      	ldr	r5, [pc, #28]	; (27c8 <init_static_pools+0x24>)
    27aa:	42ac      	cmp	r4, r5
    27ac:	d301      	bcc.n	27b2 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    27ae:	2000      	movs	r0, #0
    27b0:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    27b2:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    27b6:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
    27b8:	e9c4 3305 	strd	r3, r3, [r4, #20]
    27bc:	f000 feee 	bl	359c <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    27c0:	341c      	adds	r4, #28
    27c2:	e7f2      	b.n	27aa <init_static_pools+0x6>
    27c4:	200014cc 	.word	0x200014cc
    27c8:	200014cc 	.word	0x200014cc

000027cc <CC_PalMemCopyPlat>:
    27cc:	f001 ba45 	b.w	3c5a <memmove>

000027d0 <CC_PalMemSetZeroPlat>:
    27d0:	460a      	mov	r2, r1
    27d2:	2100      	movs	r1, #0
    27d4:	f001 ba82 	b.w	3cdc <memset>

000027d8 <CC_PalInit>:
    27d8:	b510      	push	{r4, lr}
    27da:	4811      	ldr	r0, [pc, #68]	; (2820 <CC_PalInit+0x48>)
    27dc:	f000 f848 	bl	2870 <CC_PalMutexCreate>
    27e0:	b100      	cbz	r0, 27e4 <CC_PalInit+0xc>
    27e2:	bd10      	pop	{r4, pc}
    27e4:	480f      	ldr	r0, [pc, #60]	; (2824 <CC_PalInit+0x4c>)
    27e6:	f000 f843 	bl	2870 <CC_PalMutexCreate>
    27ea:	2800      	cmp	r0, #0
    27ec:	d1f9      	bne.n	27e2 <CC_PalInit+0xa>
    27ee:	4c0e      	ldr	r4, [pc, #56]	; (2828 <CC_PalInit+0x50>)
    27f0:	4620      	mov	r0, r4
    27f2:	f000 f83d 	bl	2870 <CC_PalMutexCreate>
    27f6:	2800      	cmp	r0, #0
    27f8:	d1f3      	bne.n	27e2 <CC_PalInit+0xa>
    27fa:	4b0c      	ldr	r3, [pc, #48]	; (282c <CC_PalInit+0x54>)
    27fc:	480c      	ldr	r0, [pc, #48]	; (2830 <CC_PalInit+0x58>)
    27fe:	601c      	str	r4, [r3, #0]
    2800:	f000 f836 	bl	2870 <CC_PalMutexCreate>
    2804:	4601      	mov	r1, r0
    2806:	2800      	cmp	r0, #0
    2808:	d1eb      	bne.n	27e2 <CC_PalInit+0xa>
    280a:	f000 f82d 	bl	2868 <CC_PalDmaInit>
    280e:	4604      	mov	r4, r0
    2810:	b108      	cbz	r0, 2816 <CC_PalInit+0x3e>
    2812:	4620      	mov	r0, r4
    2814:	bd10      	pop	{r4, pc}
    2816:	f000 f851 	bl	28bc <CC_PalPowerSaveModeInit>
    281a:	4620      	mov	r0, r4
    281c:	e7fa      	b.n	2814 <CC_PalInit+0x3c>
    281e:	bf00      	nop
    2820:	20001420 	.word	0x20001420
    2824:	20001414 	.word	0x20001414
    2828:	2000141c 	.word	0x2000141c
    282c:	20001424 	.word	0x20001424
    2830:	20001418 	.word	0x20001418

00002834 <CC_PalTerminate>:
    2834:	b508      	push	{r3, lr}
    2836:	4808      	ldr	r0, [pc, #32]	; (2858 <CC_PalTerminate+0x24>)
    2838:	f000 f824 	bl	2884 <CC_PalMutexDestroy>
    283c:	4807      	ldr	r0, [pc, #28]	; (285c <CC_PalTerminate+0x28>)
    283e:	f000 f821 	bl	2884 <CC_PalMutexDestroy>
    2842:	4807      	ldr	r0, [pc, #28]	; (2860 <CC_PalTerminate+0x2c>)
    2844:	f000 f81e 	bl	2884 <CC_PalMutexDestroy>
    2848:	4806      	ldr	r0, [pc, #24]	; (2864 <CC_PalTerminate+0x30>)
    284a:	f000 f81b 	bl	2884 <CC_PalMutexDestroy>
    284e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    2852:	f000 b80b 	b.w	286c <CC_PalDmaTerminate>
    2856:	bf00      	nop
    2858:	20001420 	.word	0x20001420
    285c:	20001414 	.word	0x20001414
    2860:	2000141c 	.word	0x2000141c
    2864:	20001418 	.word	0x20001418

00002868 <CC_PalDmaInit>:
    2868:	2000      	movs	r0, #0
    286a:	4770      	bx	lr

0000286c <CC_PalDmaTerminate>:
    286c:	4770      	bx	lr
    286e:	bf00      	nop

00002870 <CC_PalMutexCreate>:
    2870:	b508      	push	{r3, lr}
    2872:	4b03      	ldr	r3, [pc, #12]	; (2880 <CC_PalMutexCreate+0x10>)
    2874:	6802      	ldr	r2, [r0, #0]
    2876:	681b      	ldr	r3, [r3, #0]
    2878:	6810      	ldr	r0, [r2, #0]
    287a:	4798      	blx	r3
    287c:	2000      	movs	r0, #0
    287e:	bd08      	pop	{r3, pc}
    2880:	20001430 	.word	0x20001430

00002884 <CC_PalMutexDestroy>:
    2884:	b508      	push	{r3, lr}
    2886:	4b03      	ldr	r3, [pc, #12]	; (2894 <CC_PalMutexDestroy+0x10>)
    2888:	6802      	ldr	r2, [r0, #0]
    288a:	685b      	ldr	r3, [r3, #4]
    288c:	6810      	ldr	r0, [r2, #0]
    288e:	4798      	blx	r3
    2890:	2000      	movs	r0, #0
    2892:	bd08      	pop	{r3, pc}
    2894:	20001430 	.word	0x20001430

00002898 <CC_PalMutexLock>:
    2898:	6802      	ldr	r2, [r0, #0]
    289a:	4b02      	ldr	r3, [pc, #8]	; (28a4 <CC_PalMutexLock+0xc>)
    289c:	6810      	ldr	r0, [r2, #0]
    289e:	689b      	ldr	r3, [r3, #8]
    28a0:	4718      	bx	r3
    28a2:	bf00      	nop
    28a4:	20001430 	.word	0x20001430

000028a8 <CC_PalMutexUnlock>:
    28a8:	b508      	push	{r3, lr}
    28aa:	4b03      	ldr	r3, [pc, #12]	; (28b8 <CC_PalMutexUnlock+0x10>)
    28ac:	6802      	ldr	r2, [r0, #0]
    28ae:	68db      	ldr	r3, [r3, #12]
    28b0:	6810      	ldr	r0, [r2, #0]
    28b2:	4798      	blx	r3
    28b4:	2000      	movs	r0, #0
    28b6:	bd08      	pop	{r3, pc}
    28b8:	20001430 	.word	0x20001430

000028bc <CC_PalPowerSaveModeInit>:
    28bc:	b570      	push	{r4, r5, r6, lr}
    28be:	4c09      	ldr	r4, [pc, #36]	; (28e4 <CC_PalPowerSaveModeInit+0x28>)
    28c0:	4d09      	ldr	r5, [pc, #36]	; (28e8 <CC_PalPowerSaveModeInit+0x2c>)
    28c2:	6920      	ldr	r0, [r4, #16]
    28c4:	68ab      	ldr	r3, [r5, #8]
    28c6:	4798      	blx	r3
    28c8:	b118      	cbz	r0, 28d2 <CC_PalPowerSaveModeInit+0x16>
    28ca:	4b08      	ldr	r3, [pc, #32]	; (28ec <CC_PalPowerSaveModeInit+0x30>)
    28cc:	4808      	ldr	r0, [pc, #32]	; (28f0 <CC_PalPowerSaveModeInit+0x34>)
    28ce:	685b      	ldr	r3, [r3, #4]
    28d0:	4798      	blx	r3
    28d2:	2100      	movs	r1, #0
    28d4:	4a07      	ldr	r2, [pc, #28]	; (28f4 <CC_PalPowerSaveModeInit+0x38>)
    28d6:	68eb      	ldr	r3, [r5, #12]
    28d8:	6011      	str	r1, [r2, #0]
    28da:	6920      	ldr	r0, [r4, #16]
    28dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    28e0:	4718      	bx	r3
    28e2:	bf00      	nop
    28e4:	20001440 	.word	0x20001440
    28e8:	20001430 	.word	0x20001430
    28ec:	20001428 	.word	0x20001428
    28f0:	00004578 	.word	0x00004578
    28f4:	20000670 	.word	0x20000670

000028f8 <CC_PalPowerSaveModeSelect>:
    28f8:	b570      	push	{r4, r5, r6, lr}
    28fa:	4c14      	ldr	r4, [pc, #80]	; (294c <CC_PalPowerSaveModeSelect+0x54>)
    28fc:	4d14      	ldr	r5, [pc, #80]	; (2950 <CC_PalPowerSaveModeSelect+0x58>)
    28fe:	4606      	mov	r6, r0
    2900:	68ab      	ldr	r3, [r5, #8]
    2902:	6920      	ldr	r0, [r4, #16]
    2904:	4798      	blx	r3
    2906:	b9f0      	cbnz	r0, 2946 <CC_PalPowerSaveModeSelect+0x4e>
    2908:	4a12      	ldr	r2, [pc, #72]	; (2954 <CC_PalPowerSaveModeSelect+0x5c>)
    290a:	6813      	ldr	r3, [r2, #0]
    290c:	b95e      	cbnz	r6, 2926 <CC_PalPowerSaveModeSelect+0x2e>
    290e:	b91b      	cbnz	r3, 2918 <CC_PalPowerSaveModeSelect+0x20>
    2910:	2001      	movs	r0, #1
    2912:	4911      	ldr	r1, [pc, #68]	; (2958 <CC_PalPowerSaveModeSelect+0x60>)
    2914:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
    2918:	3301      	adds	r3, #1
    291a:	6013      	str	r3, [r2, #0]
    291c:	68eb      	ldr	r3, [r5, #12]
    291e:	6920      	ldr	r0, [r4, #16]
    2920:	4798      	blx	r3
    2922:	2000      	movs	r0, #0
    2924:	bd70      	pop	{r4, r5, r6, pc}
    2926:	2b00      	cmp	r3, #0
    2928:	d0f8      	beq.n	291c <CC_PalPowerSaveModeSelect+0x24>
    292a:	2b01      	cmp	r3, #1
    292c:	bf08      	it	eq
    292e:	490a      	ldreq	r1, [pc, #40]	; (2958 <CC_PalPowerSaveModeSelect+0x60>)
    2930:	f103 33ff 	add.w	r3, r3, #4294967295
    2934:	bf08      	it	eq
    2936:	f8c1 0500 	streq.w	r0, [r1, #1280]	; 0x500
    293a:	6920      	ldr	r0, [r4, #16]
    293c:	6013      	str	r3, [r2, #0]
    293e:	68eb      	ldr	r3, [r5, #12]
    2940:	4798      	blx	r3
    2942:	2000      	movs	r0, #0
    2944:	e7ee      	b.n	2924 <CC_PalPowerSaveModeSelect+0x2c>
    2946:	4805      	ldr	r0, [pc, #20]	; (295c <CC_PalPowerSaveModeSelect+0x64>)
    2948:	bd70      	pop	{r4, r5, r6, pc}
    294a:	bf00      	nop
    294c:	20001440 	.word	0x20001440
    2950:	20001430 	.word	0x20001430
    2954:	20000670 	.word	0x20000670
    2958:	50840000 	.word	0x50840000
    295c:	ffff8fe9 	.word	0xffff8fe9

00002960 <CC_HalInit>:
    2960:	2000      	movs	r0, #0
    2962:	4770      	bx	lr

00002964 <CC_HalTerminate>:
    2964:	2000      	movs	r0, #0
    2966:	4770      	bx	lr

00002968 <CC_HalClearInterruptBit>:
    2968:	0543      	lsls	r3, r0, #21
    296a:	d503      	bpl.n	2974 <CC_HalClearInterruptBit+0xc>
    296c:	f04f 32ff 	mov.w	r2, #4294967295
    2970:	4b02      	ldr	r3, [pc, #8]	; (297c <CC_HalClearInterruptBit+0x14>)
    2972:	601a      	str	r2, [r3, #0]
    2974:	4b02      	ldr	r3, [pc, #8]	; (2980 <CC_HalClearInterruptBit+0x18>)
    2976:	6018      	str	r0, [r3, #0]
    2978:	4770      	bx	lr
    297a:	bf00      	nop
    297c:	50841108 	.word	0x50841108
    2980:	50841a08 	.word	0x50841a08

00002984 <CC_HalMaskInterrupt>:
    2984:	4b01      	ldr	r3, [pc, #4]	; (298c <CC_HalMaskInterrupt+0x8>)
    2986:	6018      	str	r0, [r3, #0]
    2988:	4770      	bx	lr
    298a:	bf00      	nop
    298c:	50841a04 	.word	0x50841a04

00002990 <CC_HalWaitInterruptRND>:
    2990:	b108      	cbz	r0, 2996 <CC_HalWaitInterruptRND+0x6>
    2992:	f000 b803 	b.w	299c <CC_PalWaitInterruptRND>
    2996:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    299a:	4770      	bx	lr

0000299c <CC_PalWaitInterruptRND>:
    299c:	4602      	mov	r2, r0
    299e:	4807      	ldr	r0, [pc, #28]	; (29bc <CC_PalWaitInterruptRND+0x20>)
    29a0:	6803      	ldr	r3, [r0, #0]
    29a2:	4213      	tst	r3, r2
    29a4:	d0fc      	beq.n	29a0 <CC_PalWaitInterruptRND+0x4>
    29a6:	b121      	cbz	r1, 29b2 <CC_PalWaitInterruptRND+0x16>
    29a8:	4b05      	ldr	r3, [pc, #20]	; (29c0 <CC_PalWaitInterruptRND+0x24>)
    29aa:	4806      	ldr	r0, [pc, #24]	; (29c4 <CC_PalWaitInterruptRND+0x28>)
    29ac:	681b      	ldr	r3, [r3, #0]
    29ae:	600b      	str	r3, [r1, #0]
    29b0:	6003      	str	r3, [r0, #0]
    29b2:	4b05      	ldr	r3, [pc, #20]	; (29c8 <CC_PalWaitInterruptRND+0x2c>)
    29b4:	2000      	movs	r0, #0
    29b6:	601a      	str	r2, [r3, #0]
    29b8:	4770      	bx	lr
    29ba:	bf00      	nop
    29bc:	50841a00 	.word	0x50841a00
    29c0:	50841104 	.word	0x50841104
    29c4:	50841108 	.word	0x50841108
    29c8:	50841a08 	.word	0x50841a08

000029cc <mbedtls_platform_setup>:
    29cc:	f000 b8a0 	b.w	2b10 <nrf_cc310_platform_init>

000029d0 <mbedtls_platform_zeroize>:
    29d0:	b130      	cbz	r0, 29e0 <mbedtls_platform_zeroize+0x10>
    29d2:	b129      	cbz	r1, 29e0 <mbedtls_platform_zeroize+0x10>
    29d4:	2300      	movs	r3, #0
    29d6:	4401      	add	r1, r0
    29d8:	7003      	strb	r3, [r0, #0]
    29da:	3001      	adds	r0, #1
    29dc:	4281      	cmp	r1, r0
    29de:	d1fb      	bne.n	29d8 <mbedtls_platform_zeroize+0x8>
    29e0:	4770      	bx	lr
    29e2:	bf00      	nop

000029e4 <mbedtls_hardware_poll>:
    29e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29e8:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
    29ec:	460f      	mov	r7, r1
    29ee:	9205      	str	r2, [sp, #20]
    29f0:	2100      	movs	r1, #0
    29f2:	4614      	mov	r4, r2
    29f4:	a812      	add	r0, sp, #72	; 0x48
    29f6:	f44f 7208 	mov.w	r2, #544	; 0x220
    29fa:	461e      	mov	r6, r3
    29fc:	f001 f96e 	bl	3cdc <memset>
    2a00:	2300      	movs	r3, #0
    2a02:	a808      	add	r0, sp, #32
    2a04:	4619      	mov	r1, r3
    2a06:	2228      	movs	r2, #40	; 0x28
    2a08:	9306      	str	r3, [sp, #24]
    2a0a:	f001 f967 	bl	3cdc <memset>
    2a0e:	2f00      	cmp	r7, #0
    2a10:	d03c      	beq.n	2a8c <mbedtls_hardware_poll+0xa8>
    2a12:	2e00      	cmp	r6, #0
    2a14:	d03a      	beq.n	2a8c <mbedtls_hardware_poll+0xa8>
    2a16:	2c00      	cmp	r4, #0
    2a18:	d038      	beq.n	2a8c <mbedtls_hardware_poll+0xa8>
    2a1a:	2104      	movs	r1, #4
    2a1c:	a806      	add	r0, sp, #24
    2a1e:	f7ff fed7 	bl	27d0 <CC_PalMemSetZeroPlat>
    2a22:	a808      	add	r0, sp, #32
    2a24:	2128      	movs	r1, #40	; 0x28
    2a26:	f7ff fed3 	bl	27d0 <CC_PalMemSetZeroPlat>
    2a2a:	a808      	add	r0, sp, #32
    2a2c:	f000 f832 	bl	2a94 <RNG_PLAT_SetUserRngParameters>
    2a30:	b178      	cbz	r0, 2a52 <mbedtls_hardware_poll+0x6e>
    2a32:	f04f 35ff 	mov.w	r5, #4294967295
    2a36:	a812      	add	r0, sp, #72	; 0x48
    2a38:	f44f 7108 	mov.w	r1, #544	; 0x220
    2a3c:	f7ff ffc8 	bl	29d0 <mbedtls_platform_zeroize>
    2a40:	a806      	add	r0, sp, #24
    2a42:	2104      	movs	r1, #4
    2a44:	f7ff ffc4 	bl	29d0 <mbedtls_platform_zeroize>
    2a48:	4628      	mov	r0, r5
    2a4a:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
    2a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a52:	ab12      	add	r3, sp, #72	; 0x48
    2a54:	f10d 081c 	add.w	r8, sp, #28
    2a58:	9003      	str	r0, [sp, #12]
    2a5a:	e9cd 6301 	strd	r6, r3, [sp, #4]
    2a5e:	4602      	mov	r2, r0
    2a60:	ab05      	add	r3, sp, #20
    2a62:	a908      	add	r1, sp, #32
    2a64:	f8cd 8000 	str.w	r8, [sp]
    2a68:	a806      	add	r0, sp, #24
    2a6a:	f000 fce9 	bl	3440 <LLF_RND_GetTrngSource>
    2a6e:	2800      	cmp	r0, #0
    2a70:	d1df      	bne.n	2a32 <mbedtls_hardware_poll+0x4e>
    2a72:	6833      	ldr	r3, [r6, #0]
    2a74:	42a3      	cmp	r3, r4
    2a76:	d3dc      	bcc.n	2a32 <mbedtls_hardware_poll+0x4e>
    2a78:	f8d8 1000 	ldr.w	r1, [r8]
    2a7c:	4605      	mov	r5, r0
    2a7e:	3108      	adds	r1, #8
    2a80:	4638      	mov	r0, r7
    2a82:	4622      	mov	r2, r4
    2a84:	f7ff fea2 	bl	27cc <CC_PalMemCopyPlat>
    2a88:	6034      	str	r4, [r6, #0]
    2a8a:	e7d4      	b.n	2a36 <mbedtls_hardware_poll+0x52>
    2a8c:	f04f 35ff 	mov.w	r5, #4294967295
    2a90:	e7da      	b.n	2a48 <mbedtls_hardware_poll+0x64>
    2a92:	bf00      	nop

00002a94 <RNG_PLAT_SetUserRngParameters>:
    2a94:	231c      	movs	r3, #28
    2a96:	b530      	push	{r4, r5, lr}
    2a98:	b083      	sub	sp, #12
    2a9a:	a902      	add	r1, sp, #8
    2a9c:	f841 3d04 	str.w	r3, [r1, #-4]!
    2aa0:	4604      	mov	r4, r0
    2aa2:	f000 f9b1 	bl	2e08 <CC_PalTrngParamGet>
    2aa6:	4605      	mov	r5, r0
    2aa8:	b9d8      	cbnz	r0, 2ae2 <RNG_PLAT_SetUserRngParameters+0x4e>
    2aaa:	9b01      	ldr	r3, [sp, #4]
    2aac:	2b1c      	cmp	r3, #28
    2aae:	d11b      	bne.n	2ae8 <RNG_PLAT_SetUserRngParameters+0x54>
    2ab0:	e9d4 3200 	ldrd	r3, r2, [r4]
    2ab4:	2101      	movs	r1, #1
    2ab6:	3300      	adds	r3, #0
    2ab8:	61e1      	str	r1, [r4, #28]
    2aba:	bf18      	it	ne
    2abc:	2301      	movne	r3, #1
    2abe:	b10a      	cbz	r2, 2ac4 <RNG_PLAT_SetUserRngParameters+0x30>
    2ac0:	f043 0302 	orr.w	r3, r3, #2
    2ac4:	68a2      	ldr	r2, [r4, #8]
    2ac6:	b932      	cbnz	r2, 2ad6 <RNG_PLAT_SetUserRngParameters+0x42>
    2ac8:	68e2      	ldr	r2, [r4, #12]
    2aca:	b9aa      	cbnz	r2, 2af8 <RNG_PLAT_SetUserRngParameters+0x64>
    2acc:	e9c4 3208 	strd	r3, r2, [r4, #32]
    2ad0:	b93b      	cbnz	r3, 2ae2 <RNG_PLAT_SetUserRngParameters+0x4e>
    2ad2:	4d0d      	ldr	r5, [pc, #52]	; (2b08 <RNG_PLAT_SetUserRngParameters+0x74>)
    2ad4:	e009      	b.n	2aea <RNG_PLAT_SetUserRngParameters+0x56>
    2ad6:	68e2      	ldr	r2, [r4, #12]
    2ad8:	f043 0304 	orr.w	r3, r3, #4
    2adc:	b962      	cbnz	r2, 2af8 <RNG_PLAT_SetUserRngParameters+0x64>
    2ade:	e9c4 3208 	strd	r3, r2, [r4, #32]
    2ae2:	4628      	mov	r0, r5
    2ae4:	b003      	add	sp, #12
    2ae6:	bd30      	pop	{r4, r5, pc}
    2ae8:	4d08      	ldr	r5, [pc, #32]	; (2b0c <RNG_PLAT_SetUserRngParameters+0x78>)
    2aea:	4620      	mov	r0, r4
    2aec:	211c      	movs	r1, #28
    2aee:	f7ff fe6f 	bl	27d0 <CC_PalMemSetZeroPlat>
    2af2:	4628      	mov	r0, r5
    2af4:	b003      	add	sp, #12
    2af6:	bd30      	pop	{r4, r5, pc}
    2af8:	2200      	movs	r2, #0
    2afa:	4628      	mov	r0, r5
    2afc:	f043 0308 	orr.w	r3, r3, #8
    2b00:	e9c4 3208 	strd	r3, r2, [r4, #32]
    2b04:	b003      	add	sp, #12
    2b06:	bd30      	pop	{r4, r5, pc}
    2b08:	00f00c0e 	.word	0x00f00c0e
    2b0c:	00f00c37 	.word	0x00f00c37

00002b10 <nrf_cc310_platform_init>:
    2b10:	b510      	push	{r4, lr}
    2b12:	4c0c      	ldr	r4, [pc, #48]	; (2b44 <nrf_cc310_platform_init+0x34>)
    2b14:	6823      	ldr	r3, [r4, #0]
    2b16:	b113      	cbz	r3, 2b1e <nrf_cc310_platform_init+0xe>
    2b18:	4b0b      	ldr	r3, [pc, #44]	; (2b48 <nrf_cc310_platform_init+0x38>)
    2b1a:	681b      	ldr	r3, [r3, #0]
    2b1c:	b96b      	cbnz	r3, 2b3a <nrf_cc310_platform_init+0x2a>
    2b1e:	f000 f931 	bl	2d84 <CC_LibInit>
    2b22:	b138      	cbz	r0, 2b34 <nrf_cc310_platform_init+0x24>
    2b24:	3801      	subs	r0, #1
    2b26:	2806      	cmp	r0, #6
    2b28:	bf96      	itet	ls
    2b2a:	4b08      	ldrls	r3, [pc, #32]	; (2b4c <nrf_cc310_platform_init+0x3c>)
    2b2c:	4808      	ldrhi	r0, [pc, #32]	; (2b50 <nrf_cc310_platform_init+0x40>)
    2b2e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    2b32:	bd10      	pop	{r4, pc}
    2b34:	2201      	movs	r2, #1
    2b36:	4b04      	ldr	r3, [pc, #16]	; (2b48 <nrf_cc310_platform_init+0x38>)
    2b38:	601a      	str	r2, [r3, #0]
    2b3a:	2301      	movs	r3, #1
    2b3c:	2000      	movs	r0, #0
    2b3e:	6023      	str	r3, [r4, #0]
    2b40:	bd10      	pop	{r4, pc}
    2b42:	bf00      	nop
    2b44:	20000674 	.word	0x20000674
    2b48:	20000678 	.word	0x20000678
    2b4c:	00004598 	.word	0x00004598
    2b50:	ffff8ffe 	.word	0xffff8ffe

00002b54 <nrf_cc310_platform_init_no_rng>:
    2b54:	b510      	push	{r4, lr}
    2b56:	4c09      	ldr	r4, [pc, #36]	; (2b7c <nrf_cc310_platform_init_no_rng+0x28>)
    2b58:	6823      	ldr	r3, [r4, #0]
    2b5a:	b11b      	cbz	r3, 2b64 <nrf_cc310_platform_init_no_rng+0x10>
    2b5c:	2301      	movs	r3, #1
    2b5e:	2000      	movs	r0, #0
    2b60:	6023      	str	r3, [r4, #0]
    2b62:	bd10      	pop	{r4, pc}
    2b64:	f000 f87c 	bl	2c60 <CC_LibInitNoRng>
    2b68:	2800      	cmp	r0, #0
    2b6a:	d0f7      	beq.n	2b5c <nrf_cc310_platform_init_no_rng+0x8>
    2b6c:	3801      	subs	r0, #1
    2b6e:	2806      	cmp	r0, #6
    2b70:	bf96      	itet	ls
    2b72:	4b03      	ldrls	r3, [pc, #12]	; (2b80 <nrf_cc310_platform_init_no_rng+0x2c>)
    2b74:	4803      	ldrhi	r0, [pc, #12]	; (2b84 <nrf_cc310_platform_init_no_rng+0x30>)
    2b76:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    2b7a:	bd10      	pop	{r4, pc}
    2b7c:	20000674 	.word	0x20000674
    2b80:	00004598 	.word	0x00004598
    2b84:	ffff8ffe 	.word	0xffff8ffe

00002b88 <nrf_cc310_platform_abort>:
    2b88:	f3bf 8f4f 	dsb	sy
    2b8c:	4905      	ldr	r1, [pc, #20]	; (2ba4 <nrf_cc310_platform_abort+0x1c>)
    2b8e:	4b06      	ldr	r3, [pc, #24]	; (2ba8 <nrf_cc310_platform_abort+0x20>)
    2b90:	68ca      	ldr	r2, [r1, #12]
    2b92:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2b96:	4313      	orrs	r3, r2
    2b98:	60cb      	str	r3, [r1, #12]
    2b9a:	f3bf 8f4f 	dsb	sy
    2b9e:	bf00      	nop
    2ba0:	e7fd      	b.n	2b9e <nrf_cc310_platform_abort+0x16>
    2ba2:	bf00      	nop
    2ba4:	e000ed00 	.word	0xe000ed00
    2ba8:	05fa0004 	.word	0x05fa0004

00002bac <CC_PalAbort>:
    2bac:	4b01      	ldr	r3, [pc, #4]	; (2bb4 <CC_PalAbort+0x8>)
    2bae:	685b      	ldr	r3, [r3, #4]
    2bb0:	4718      	bx	r3
    2bb2:	bf00      	nop
    2bb4:	20001428 	.word	0x20001428

00002bb8 <nrf_cc310_platform_set_abort>:
    2bb8:	4b02      	ldr	r3, [pc, #8]	; (2bc4 <nrf_cc310_platform_set_abort+0xc>)
    2bba:	e9d0 1200 	ldrd	r1, r2, [r0]
    2bbe:	e9c3 1200 	strd	r1, r2, [r3]
    2bc2:	4770      	bx	lr
    2bc4:	20001428 	.word	0x20001428

00002bc8 <mutex_free>:
    2bc8:	4770      	bx	lr
    2bca:	bf00      	nop

00002bcc <mutex_unlock>:
    2bcc:	b510      	push	{r4, lr}
    2bce:	4604      	mov	r4, r0
    2bd0:	b120      	cbz	r0, 2bdc <mutex_unlock+0x10>
    2bd2:	f3bf 8f5f 	dmb	sy
    2bd6:	2000      	movs	r0, #0
    2bd8:	6020      	str	r0, [r4, #0]
    2bda:	bd10      	pop	{r4, pc}
    2bdc:	4803      	ldr	r0, [pc, #12]	; (2bec <mutex_unlock+0x20>)
    2bde:	f7ff ffe5 	bl	2bac <CC_PalAbort>
    2be2:	f3bf 8f5f 	dmb	sy
    2be6:	2000      	movs	r0, #0
    2be8:	6020      	str	r0, [r4, #0]
    2bea:	bd10      	pop	{r4, pc}
    2bec:	000045d8 	.word	0x000045d8

00002bf0 <mutex_init>:
    2bf0:	b510      	push	{r4, lr}
    2bf2:	4604      	mov	r4, r0
    2bf4:	b110      	cbz	r0, 2bfc <mutex_init+0xc>
    2bf6:	2300      	movs	r3, #0
    2bf8:	6023      	str	r3, [r4, #0]
    2bfa:	bd10      	pop	{r4, pc}
    2bfc:	4802      	ldr	r0, [pc, #8]	; (2c08 <mutex_init+0x18>)
    2bfe:	f7ff ffd5 	bl	2bac <CC_PalAbort>
    2c02:	2300      	movs	r3, #0
    2c04:	6023      	str	r3, [r4, #0]
    2c06:	bd10      	pop	{r4, pc}
    2c08:	000045b4 	.word	0x000045b4

00002c0c <mutex_lock>:
    2c0c:	b150      	cbz	r0, 2c24 <mutex_lock+0x18>
    2c0e:	2201      	movs	r2, #1
    2c10:	e8d0 3fef 	ldaex	r3, [r0]
    2c14:	e8c0 2fe1 	stlex	r1, r2, [r0]
    2c18:	2900      	cmp	r1, #0
    2c1a:	d1f9      	bne.n	2c10 <mutex_lock+0x4>
    2c1c:	2b01      	cmp	r3, #1
    2c1e:	d0f7      	beq.n	2c10 <mutex_lock+0x4>
    2c20:	f3bf 8f5f 	dmb	sy
    2c24:	2000      	movs	r0, #0
    2c26:	4770      	bx	lr

00002c28 <nrf_cc310_platform_set_mutexes>:
    2c28:	b470      	push	{r4, r5, r6}
    2c2a:	4b0b      	ldr	r3, [pc, #44]	; (2c58 <nrf_cc310_platform_set_mutexes+0x30>)
    2c2c:	6806      	ldr	r6, [r0, #0]
    2c2e:	68c2      	ldr	r2, [r0, #12]
    2c30:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    2c34:	e9c3 4202 	strd	r4, r2, [r3, #8]
    2c38:	e9c3 6500 	strd	r6, r5, [r3]
    2c3c:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    2c40:	680e      	ldr	r6, [r1, #0]
    2c42:	4b06      	ldr	r3, [pc, #24]	; (2c5c <nrf_cc310_platform_set_mutexes+0x34>)
    2c44:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    2c48:	e9c3 6500 	strd	r6, r5, [r3]
    2c4c:	e9c3 4002 	strd	r4, r0, [r3, #8]
    2c50:	611a      	str	r2, [r3, #16]
    2c52:	bc70      	pop	{r4, r5, r6}
    2c54:	4770      	bx	lr
    2c56:	bf00      	nop
    2c58:	20001430 	.word	0x20001430
    2c5c:	20001440 	.word	0x20001440

00002c60 <CC_LibInitNoRng>:
    2c60:	b510      	push	{r4, lr}
    2c62:	f7ff fe7d 	bl	2960 <CC_HalInit>
    2c66:	b970      	cbnz	r0, 2c86 <CC_LibInitNoRng+0x26>
    2c68:	f7ff fdb6 	bl	27d8 <CC_PalInit>
    2c6c:	b980      	cbnz	r0, 2c90 <CC_LibInitNoRng+0x30>
    2c6e:	f7ff fe43 	bl	28f8 <CC_PalPowerSaveModeSelect>
    2c72:	b980      	cbnz	r0, 2c96 <CC_LibInitNoRng+0x36>
    2c74:	4b11      	ldr	r3, [pc, #68]	; (2cbc <CC_LibInitNoRng+0x5c>)
    2c76:	681b      	ldr	r3, [r3, #0]
    2c78:	0e1b      	lsrs	r3, r3, #24
    2c7a:	2bf0      	cmp	r3, #240	; 0xf0
    2c7c:	d00d      	beq.n	2c9a <CC_LibInitNoRng+0x3a>
    2c7e:	2406      	movs	r4, #6
    2c80:	f7ff fe70 	bl	2964 <CC_HalTerminate>
    2c84:	e000      	b.n	2c88 <CC_LibInitNoRng+0x28>
    2c86:	2403      	movs	r4, #3
    2c88:	f7ff fdd4 	bl	2834 <CC_PalTerminate>
    2c8c:	4620      	mov	r0, r4
    2c8e:	bd10      	pop	{r4, pc}
    2c90:	2404      	movs	r4, #4
    2c92:	4620      	mov	r0, r4
    2c94:	bd10      	pop	{r4, pc}
    2c96:	2400      	movs	r4, #0
    2c98:	e7f2      	b.n	2c80 <CC_LibInitNoRng+0x20>
    2c9a:	4a09      	ldr	r2, [pc, #36]	; (2cc0 <CC_LibInitNoRng+0x60>)
    2c9c:	4b09      	ldr	r3, [pc, #36]	; (2cc4 <CC_LibInitNoRng+0x64>)
    2c9e:	6812      	ldr	r2, [r2, #0]
    2ca0:	429a      	cmp	r2, r3
    2ca2:	d001      	beq.n	2ca8 <CC_LibInitNoRng+0x48>
    2ca4:	2407      	movs	r4, #7
    2ca6:	e7eb      	b.n	2c80 <CC_LibInitNoRng+0x20>
    2ca8:	2001      	movs	r0, #1
    2caa:	f7ff fe25 	bl	28f8 <CC_PalPowerSaveModeSelect>
    2cae:	2800      	cmp	r0, #0
    2cb0:	d1f1      	bne.n	2c96 <CC_LibInitNoRng+0x36>
    2cb2:	4b05      	ldr	r3, [pc, #20]	; (2cc8 <CC_LibInitNoRng+0x68>)
    2cb4:	4604      	mov	r4, r0
    2cb6:	6018      	str	r0, [r3, #0]
    2cb8:	e7e8      	b.n	2c8c <CC_LibInitNoRng+0x2c>
    2cba:	bf00      	nop
    2cbc:	50841928 	.word	0x50841928
    2cc0:	50841a24 	.word	0x50841a24
    2cc4:	20e00000 	.word	0x20e00000
    2cc8:	50841a0c 	.word	0x50841a0c

00002ccc <CC_LibInitRngModule>:
    2ccc:	b530      	push	{r4, r5, lr}
    2cce:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
    2cd2:	f44f 7208 	mov.w	r2, #544	; 0x220
    2cd6:	2100      	movs	r1, #0
    2cd8:	a80c      	add	r0, sp, #48	; 0x30
    2cda:	f000 ffff 	bl	3cdc <memset>
    2cde:	2300      	movs	r3, #0
    2ce0:	a802      	add	r0, sp, #8
    2ce2:	4619      	mov	r1, r3
    2ce4:	2228      	movs	r2, #40	; 0x28
    2ce6:	9301      	str	r3, [sp, #4]
    2ce8:	f000 fff8 	bl	3cdc <memset>
    2cec:	a802      	add	r0, sp, #8
    2cee:	f7ff fed1 	bl	2a94 <RNG_PLAT_SetUserRngParameters>
    2cf2:	b118      	cbz	r0, 2cfc <CC_LibInitRngModule+0x30>
    2cf4:	2005      	movs	r0, #5
    2cf6:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    2cfa:	bd30      	pop	{r4, r5, pc}
    2cfc:	4d1c      	ldr	r5, [pc, #112]	; (2d70 <CC_LibInitRngModule+0xa4>)
    2cfe:	f04f 31ff 	mov.w	r1, #4294967295
    2d02:	6828      	ldr	r0, [r5, #0]
    2d04:	f7ff fdc8 	bl	2898 <CC_PalMutexLock>
    2d08:	4604      	mov	r4, r0
    2d0a:	b9f0      	cbnz	r0, 2d4a <CC_LibInitRngModule+0x7e>
    2d0c:	2000      	movs	r0, #0
    2d0e:	f7ff fdf3 	bl	28f8 <CC_PalPowerSaveModeSelect>
    2d12:	b9b0      	cbnz	r0, 2d42 <CC_LibInitRngModule+0x76>
    2d14:	aa0c      	add	r2, sp, #48	; 0x30
    2d16:	a902      	add	r1, sp, #8
    2d18:	a801      	add	r0, sp, #4
    2d1a:	f000 fbd5 	bl	34c8 <LLF_RND_RunTrngStartupTest>
    2d1e:	4604      	mov	r4, r0
    2d20:	2001      	movs	r0, #1
    2d22:	f7ff fde9 	bl	28f8 <CC_PalPowerSaveModeSelect>
    2d26:	b9f0      	cbnz	r0, 2d66 <CC_LibInitRngModule+0x9a>
    2d28:	6828      	ldr	r0, [r5, #0]
    2d2a:	f7ff fdbd 	bl	28a8 <CC_PalMutexUnlock>
    2d2e:	b110      	cbz	r0, 2d36 <CC_LibInitRngModule+0x6a>
    2d30:	4810      	ldr	r0, [pc, #64]	; (2d74 <CC_LibInitRngModule+0xa8>)
    2d32:	f7ff ff3b 	bl	2bac <CC_PalAbort>
    2d36:	4620      	mov	r0, r4
    2d38:	2c00      	cmp	r4, #0
    2d3a:	d1db      	bne.n	2cf4 <CC_LibInitRngModule+0x28>
    2d3c:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    2d40:	bd30      	pop	{r4, r5, pc}
    2d42:	480d      	ldr	r0, [pc, #52]	; (2d78 <CC_LibInitRngModule+0xac>)
    2d44:	f7ff ff32 	bl	2bac <CC_PalAbort>
    2d48:	e7e4      	b.n	2d14 <CC_LibInitRngModule+0x48>
    2d4a:	480c      	ldr	r0, [pc, #48]	; (2d7c <CC_LibInitRngModule+0xb0>)
    2d4c:	f7ff ff2e 	bl	2bac <CC_PalAbort>
    2d50:	2c01      	cmp	r4, #1
    2d52:	d1db      	bne.n	2d0c <CC_LibInitRngModule+0x40>
    2d54:	6828      	ldr	r0, [r5, #0]
    2d56:	f7ff fda7 	bl	28a8 <CC_PalMutexUnlock>
    2d5a:	2800      	cmp	r0, #0
    2d5c:	d0ca      	beq.n	2cf4 <CC_LibInitRngModule+0x28>
    2d5e:	4805      	ldr	r0, [pc, #20]	; (2d74 <CC_LibInitRngModule+0xa8>)
    2d60:	f7ff ff24 	bl	2bac <CC_PalAbort>
    2d64:	e7c6      	b.n	2cf4 <CC_LibInitRngModule+0x28>
    2d66:	4806      	ldr	r0, [pc, #24]	; (2d80 <CC_LibInitRngModule+0xb4>)
    2d68:	f7ff ff20 	bl	2bac <CC_PalAbort>
    2d6c:	e7dc      	b.n	2d28 <CC_LibInitRngModule+0x5c>
    2d6e:	bf00      	nop
    2d70:	20001424 	.word	0x20001424
    2d74:	00004610 	.word	0x00004610
    2d78:	00004628 	.word	0x00004628
    2d7c:	000045f8 	.word	0x000045f8
    2d80:	00004648 	.word	0x00004648

00002d84 <CC_LibInit>:
    2d84:	b508      	push	{r3, lr}
    2d86:	f7ff fdeb 	bl	2960 <CC_HalInit>
    2d8a:	b118      	cbz	r0, 2d94 <CC_LibInit+0x10>
    2d8c:	f7ff fd52 	bl	2834 <CC_PalTerminate>
    2d90:	2003      	movs	r0, #3
    2d92:	bd08      	pop	{r3, pc}
    2d94:	f7ff fd20 	bl	27d8 <CC_PalInit>
    2d98:	b968      	cbnz	r0, 2db6 <CC_LibInit+0x32>
    2d9a:	f7ff fdad 	bl	28f8 <CC_PalPowerSaveModeSelect>
    2d9e:	b960      	cbnz	r0, 2dba <CC_LibInit+0x36>
    2da0:	4b15      	ldr	r3, [pc, #84]	; (2df8 <CC_LibInit+0x74>)
    2da2:	681b      	ldr	r3, [r3, #0]
    2da4:	0e1b      	lsrs	r3, r3, #24
    2da6:	2bf0      	cmp	r3, #240	; 0xf0
    2da8:	d012      	beq.n	2dd0 <CC_LibInit+0x4c>
    2daa:	f7ff fddb 	bl	2964 <CC_HalTerminate>
    2dae:	f7ff fd41 	bl	2834 <CC_PalTerminate>
    2db2:	2006      	movs	r0, #6
    2db4:	bd08      	pop	{r3, pc}
    2db6:	2004      	movs	r0, #4
    2db8:	bd08      	pop	{r3, pc}
    2dba:	f7ff fdd3 	bl	2964 <CC_HalTerminate>
    2dbe:	f7ff fd39 	bl	2834 <CC_PalTerminate>
    2dc2:	f7ff ff83 	bl	2ccc <CC_LibInitRngModule>
    2dc6:	2800      	cmp	r0, #0
    2dc8:	bf0c      	ite	eq
    2dca:	2000      	moveq	r0, #0
    2dcc:	2005      	movne	r0, #5
    2dce:	bd08      	pop	{r3, pc}
    2dd0:	4a0a      	ldr	r2, [pc, #40]	; (2dfc <CC_LibInit+0x78>)
    2dd2:	4b0b      	ldr	r3, [pc, #44]	; (2e00 <CC_LibInit+0x7c>)
    2dd4:	6812      	ldr	r2, [r2, #0]
    2dd6:	429a      	cmp	r2, r3
    2dd8:	d005      	beq.n	2de6 <CC_LibInit+0x62>
    2dda:	f7ff fdc3 	bl	2964 <CC_HalTerminate>
    2dde:	f7ff fd29 	bl	2834 <CC_PalTerminate>
    2de2:	2007      	movs	r0, #7
    2de4:	bd08      	pop	{r3, pc}
    2de6:	2001      	movs	r0, #1
    2de8:	f7ff fd86 	bl	28f8 <CC_PalPowerSaveModeSelect>
    2dec:	2800      	cmp	r0, #0
    2dee:	d1e4      	bne.n	2dba <CC_LibInit+0x36>
    2df0:	4b04      	ldr	r3, [pc, #16]	; (2e04 <CC_LibInit+0x80>)
    2df2:	6018      	str	r0, [r3, #0]
    2df4:	e7e5      	b.n	2dc2 <CC_LibInit+0x3e>
    2df6:	bf00      	nop
    2df8:	50841928 	.word	0x50841928
    2dfc:	50841a24 	.word	0x50841a24
    2e00:	20e00000 	.word	0x20e00000
    2e04:	50841a0c 	.word	0x50841a0c

00002e08 <CC_PalTrngParamGet>:
    2e08:	b118      	cbz	r0, 2e12 <CC_PalTrngParamGet+0xa>
    2e0a:	b111      	cbz	r1, 2e12 <CC_PalTrngParamGet+0xa>
    2e0c:	680b      	ldr	r3, [r1, #0]
    2e0e:	2b1c      	cmp	r3, #28
    2e10:	d001      	beq.n	2e16 <CC_PalTrngParamGet+0xe>
    2e12:	2001      	movs	r0, #1
    2e14:	4770      	bx	lr
    2e16:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2e1a:	4a3a      	ldr	r2, [pc, #232]	; (2f04 <CC_PalTrngParamGet+0xfc>)
    2e1c:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
    2e20:	4291      	cmp	r1, r2
    2e22:	d05a      	beq.n	2eda <CC_PalTrngParamGet+0xd2>
    2e24:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    2e28:	3201      	adds	r2, #1
    2e2a:	d056      	beq.n	2eda <CC_PalTrngParamGet+0xd2>
    2e2c:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    2e30:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2e34:	6002      	str	r2, [r0, #0]
    2e36:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
    2e3a:	4a33      	ldr	r2, [pc, #204]	; (2f08 <CC_PalTrngParamGet+0x100>)
    2e3c:	4291      	cmp	r1, r2
    2e3e:	d05e      	beq.n	2efe <CC_PalTrngParamGet+0xf6>
    2e40:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    2e44:	3201      	adds	r2, #1
    2e46:	d05a      	beq.n	2efe <CC_PalTrngParamGet+0xf6>
    2e48:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    2e4c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2e50:	6042      	str	r2, [r0, #4]
    2e52:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    2e56:	f512 7f94 	cmn.w	r2, #296	; 0x128
    2e5a:	d04d      	beq.n	2ef8 <CC_PalTrngParamGet+0xf0>
    2e5c:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    2e60:	3201      	adds	r2, #1
    2e62:	d049      	beq.n	2ef8 <CC_PalTrngParamGet+0xf0>
    2e64:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    2e68:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2e6c:	6082      	str	r2, [r0, #8]
    2e6e:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
    2e72:	4a26      	ldr	r2, [pc, #152]	; (2f0c <CC_PalTrngParamGet+0x104>)
    2e74:	4291      	cmp	r1, r2
    2e76:	d03c      	beq.n	2ef2 <CC_PalTrngParamGet+0xea>
    2e78:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    2e7c:	3201      	adds	r2, #1
    2e7e:	d038      	beq.n	2ef2 <CC_PalTrngParamGet+0xea>
    2e80:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    2e84:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2e88:	60c2      	str	r2, [r0, #12]
    2e8a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    2e8e:	3270      	adds	r2, #112	; 0x70
    2e90:	d02d      	beq.n	2eee <CC_PalTrngParamGet+0xe6>
    2e92:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    2e96:	3201      	adds	r2, #1
    2e98:	d029      	beq.n	2eee <CC_PalTrngParamGet+0xe6>
    2e9a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    2e9e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2ea2:	6102      	str	r2, [r0, #16]
    2ea4:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    2ea8:	32af      	adds	r2, #175	; 0xaf
    2eaa:	d01e      	beq.n	2eea <CC_PalTrngParamGet+0xe2>
    2eac:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    2eb0:	3201      	adds	r2, #1
    2eb2:	d01a      	beq.n	2eea <CC_PalTrngParamGet+0xe2>
    2eb4:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    2eb8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2ebc:	6142      	str	r2, [r0, #20]
    2ebe:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
    2ec2:	4a13      	ldr	r2, [pc, #76]	; (2f10 <CC_PalTrngParamGet+0x108>)
    2ec4:	4291      	cmp	r1, r2
    2ec6:	d00b      	beq.n	2ee0 <CC_PalTrngParamGet+0xd8>
    2ec8:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    2ecc:	3201      	adds	r2, #1
    2ece:	d007      	beq.n	2ee0 <CC_PalTrngParamGet+0xd8>
    2ed0:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
    2ed4:	6183      	str	r3, [r0, #24]
    2ed6:	2000      	movs	r0, #0
    2ed8:	4770      	bx	lr
    2eda:	f640 02fc 	movw	r2, #2300	; 0x8fc
    2ede:	e7a7      	b.n	2e30 <CC_PalTrngParamGet+0x28>
    2ee0:	f240 3337 	movw	r3, #823	; 0x337
    2ee4:	6183      	str	r3, [r0, #24]
    2ee6:	2000      	movs	r0, #0
    2ee8:	4770      	bx	lr
    2eea:	2251      	movs	r2, #81	; 0x51
    2eec:	e7e4      	b.n	2eb8 <CC_PalTrngParamGet+0xb0>
    2eee:	2290      	movs	r2, #144	; 0x90
    2ef0:	e7d5      	b.n	2e9e <CC_PalTrngParamGet+0x96>
    2ef2:	f642 1204 	movw	r2, #10500	; 0x2904
    2ef6:	e7c5      	b.n	2e84 <CC_PalTrngParamGet+0x7c>
    2ef8:	f640 62d8 	movw	r2, #3800	; 0xed8
    2efc:	e7b4      	b.n	2e68 <CC_PalTrngParamGet+0x60>
    2efe:	f242 02d0 	movw	r2, #8400	; 0x20d0
    2f02:	e7a3      	b.n	2e4c <CC_PalTrngParamGet+0x44>
    2f04:	fffff8fc 	.word	0xfffff8fc
    2f08:	ffff20d0 	.word	0xffff20d0
    2f0c:	ffff2904 	.word	0xffff2904
    2f10:	fffff337 	.word	0xfffff337

00002f14 <LLF_RND_AdaptiveProportionTest>:
    2f14:	b3a8      	cbz	r0, 2f82 <LLF_RND_AdaptiveProportionTest+0x6e>
    2f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f1a:	1e4c      	subs	r4, r1, #1
    2f1c:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    2f20:	d22c      	bcs.n	2f7c <LLF_RND_AdaptiveProportionTest+0x68>
    2f22:	b35b      	cbz	r3, 2f7c <LLF_RND_AdaptiveProportionTest+0x68>
    2f24:	b352      	cbz	r2, 2f7c <LLF_RND_AdaptiveProportionTest+0x68>
    2f26:	f04f 0c00 	mov.w	ip, #0
    2f2a:	00c9      	lsls	r1, r1, #3
    2f2c:	46e6      	mov	lr, ip
    2f2e:	4665      	mov	r5, ip
    2f30:	4664      	mov	r4, ip
    2f32:	1e4f      	subs	r7, r1, #1
    2f34:	f103 38ff 	add.w	r8, r3, #4294967295
    2f38:	e00c      	b.n	2f54 <LLF_RND_AdaptiveProportionTest+0x40>
    2f3a:	42ab      	cmp	r3, r5
    2f3c:	d016      	beq.n	2f6c <LLF_RND_AdaptiveProportionTest+0x58>
    2f3e:	458e      	cmp	lr, r1
    2f40:	d101      	bne.n	2f46 <LLF_RND_AdaptiveProportionTest+0x32>
    2f42:	f10c 0c01 	add.w	ip, ip, #1
    2f46:	45a8      	cmp	r8, r5
    2f48:	d016      	beq.n	2f78 <LLF_RND_AdaptiveProportionTest+0x64>
    2f4a:	3401      	adds	r4, #1
    2f4c:	42bc      	cmp	r4, r7
    2f4e:	f105 0501 	add.w	r5, r5, #1
    2f52:	d818      	bhi.n	2f86 <LLF_RND_AdaptiveProportionTest+0x72>
    2f54:	0961      	lsrs	r1, r4, #5
    2f56:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    2f5a:	f004 061f 	and.w	r6, r4, #31
    2f5e:	40f1      	lsrs	r1, r6
    2f60:	2e1f      	cmp	r6, #31
    2f62:	bf18      	it	ne
    2f64:	f001 0101 	andne.w	r1, r1, #1
    2f68:	2c00      	cmp	r4, #0
    2f6a:	d1e6      	bne.n	2f3a <LLF_RND_AdaptiveProportionTest+0x26>
    2f6c:	2500      	movs	r5, #0
    2f6e:	45a8      	cmp	r8, r5
    2f70:	468e      	mov	lr, r1
    2f72:	f04f 0c01 	mov.w	ip, #1
    2f76:	d1e8      	bne.n	2f4a <LLF_RND_AdaptiveProportionTest+0x36>
    2f78:	4562      	cmp	r2, ip
    2f7a:	d2e6      	bcs.n	2f4a <LLF_RND_AdaptiveProportionTest+0x36>
    2f7c:	4803      	ldr	r0, [pc, #12]	; (2f8c <LLF_RND_AdaptiveProportionTest+0x78>)
    2f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f82:	4802      	ldr	r0, [pc, #8]	; (2f8c <LLF_RND_AdaptiveProportionTest+0x78>)
    2f84:	4770      	bx	lr
    2f86:	2000      	movs	r0, #0
    2f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f8c:	00f10c37 	.word	0x00f10c37

00002f90 <getTrngSource>:
    2f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f94:	b08f      	sub	sp, #60	; 0x3c
    2f96:	460d      	mov	r5, r1
    2f98:	e9dd 4119 	ldrd	r4, r1, [sp, #100]	; 0x64
    2f9c:	4683      	mov	fp, r0
    2f9e:	2900      	cmp	r1, #0
    2fa0:	d157      	bne.n	3052 <getTrngSource+0xc2>
    2fa2:	6929      	ldr	r1, [r5, #16]
    2fa4:	9103      	str	r1, [sp, #12]
    2fa6:	2100      	movs	r1, #0
    2fa8:	601c      	str	r4, [r3, #0]
    2faa:	9b18      	ldr	r3, [sp, #96]	; 0x60
    2fac:	6019      	str	r1, [r3, #0]
    2fae:	2a00      	cmp	r2, #0
    2fb0:	f000 8122 	beq.w	31f8 <getTrngSource+0x268>
    2fb4:	4a81      	ldr	r2, [pc, #516]	; (31bc <getTrngSource+0x22c>)
    2fb6:	4b82      	ldr	r3, [pc, #520]	; (31c0 <getTrngSource+0x230>)
    2fb8:	6811      	ldr	r1, [r2, #0]
    2fba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2fbc:	681b      	ldr	r3, [r3, #0]
    2fbe:	429a      	cmp	r2, r3
    2fc0:	d157      	bne.n	3072 <getTrngSource+0xe2>
    2fc2:	290a      	cmp	r1, #10
    2fc4:	d155      	bne.n	3072 <getTrngSource+0xe2>
    2fc6:	f89b 3003 	ldrb.w	r3, [fp, #3]
    2fca:	9306      	str	r3, [sp, #24]
    2fcc:	9903      	ldr	r1, [sp, #12]
    2fce:	2304      	movs	r3, #4
    2fd0:	4608      	mov	r0, r1
    2fd2:	4a7c      	ldr	r2, [pc, #496]	; (31c4 <getTrngSource+0x234>)
    2fd4:	9302      	str	r3, [sp, #8]
    2fd6:	fba2 0200 	umull	r0, r2, r2, r0
    2fda:	0892      	lsrs	r2, r2, #2
    2fdc:	00cb      	lsls	r3, r1, #3
    2fde:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2fe2:	f104 0008 	add.w	r0, r4, #8
    2fe6:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
    2fea:	3b01      	subs	r3, #1
    2fec:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 31c0 <getTrngSource+0x230>
    2ff0:	f8df a200 	ldr.w	sl, [pc, #512]	; 31f4 <getTrngSource+0x264>
    2ff4:	9004      	str	r0, [sp, #16]
    2ff6:	9200      	str	r2, [sp, #0]
    2ff8:	9305      	str	r3, [sp, #20]
    2ffa:	9b18      	ldr	r3, [sp, #96]	; 0x60
    2ffc:	9c03      	ldr	r4, [sp, #12]
    2ffe:	601c      	str	r4, [r3, #0]
    3000:	2c00      	cmp	r4, #0
    3002:	f000 80cc 	beq.w	319e <getTrngSource+0x20e>
    3006:	2600      	movs	r6, #0
    3008:	9f04      	ldr	r7, [sp, #16]
    300a:	f000 faa9 	bl	3560 <LLF_RND_TurnOffTrng>
    300e:	2300      	movs	r3, #0
    3010:	9307      	str	r3, [sp, #28]
    3012:	9b06      	ldr	r3, [sp, #24]
    3014:	f1bb 0f00 	cmp.w	fp, #0
    3018:	d03a      	beq.n	3090 <getTrngSource+0x100>
    301a:	2d00      	cmp	r5, #0
    301c:	d034      	beq.n	3088 <getTrngSource+0xf8>
    301e:	bb53      	cbnz	r3, 3076 <getTrngSource+0xe6>
    3020:	005b      	lsls	r3, r3, #1
    3022:	9306      	str	r3, [sp, #24]
    3024:	f1bb 0f00 	cmp.w	fp, #0
    3028:	d036      	beq.n	3098 <getTrngSource+0x108>
    302a:	2d00      	cmp	r5, #0
    302c:	d034      	beq.n	3098 <getTrngSource+0x108>
    302e:	b1e3      	cbz	r3, 306a <getTrngSource+0xda>
    3030:	a906      	add	r1, sp, #24
    3032:	4628      	mov	r0, r5
    3034:	f000 fa84 	bl	3540 <LLF_RND_GetFastestRosc>
    3038:	2800      	cmp	r0, #0
    303a:	f000 817d 	beq.w	3338 <getTrngSource+0x3a8>
    303e:	4b62      	ldr	r3, [pc, #392]	; (31c8 <getTrngSource+0x238>)
    3040:	4298      	cmp	r0, r3
    3042:	d012      	beq.n	306a <getTrngSource+0xda>
    3044:	9000      	str	r0, [sp, #0]
    3046:	f000 fa8b 	bl	3560 <LLF_RND_TurnOffTrng>
    304a:	9800      	ldr	r0, [sp, #0]
    304c:	b00f      	add	sp, #60	; 0x3c
    304e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3052:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    3056:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    305a:	3001      	adds	r0, #1
    305c:	bf0c      	ite	eq
    305e:	f44f 7104 	moveq.w	r1, #528	; 0x210
    3062:	f8d1 1c0c 	ldrne.w	r1, [r1, #3084]	; 0xc0c
    3066:	9103      	str	r1, [sp, #12]
    3068:	e79d      	b.n	2fa6 <getTrngSource+0x16>
    306a:	6a2b      	ldr	r3, [r5, #32]
    306c:	b973      	cbnz	r3, 308c <getTrngSource+0xfc>
    306e:	4856      	ldr	r0, [pc, #344]	; (31c8 <getTrngSource+0x238>)
    3070:	e7e8      	b.n	3044 <getTrngSource+0xb4>
    3072:	4856      	ldr	r0, [pc, #344]	; (31cc <getTrngSource+0x23c>)
    3074:	e7e6      	b.n	3044 <getTrngSource+0xb4>
    3076:	a906      	add	r1, sp, #24
    3078:	4628      	mov	r0, r5
    307a:	f000 fa61 	bl	3540 <LLF_RND_GetFastestRosc>
    307e:	b168      	cbz	r0, 309c <getTrngSource+0x10c>
    3080:	4b53      	ldr	r3, [pc, #332]	; (31d0 <getTrngSource+0x240>)
    3082:	4298      	cmp	r0, r3
    3084:	d0de      	beq.n	3044 <getTrngSource+0xb4>
    3086:	9b06      	ldr	r3, [sp, #24]
    3088:	2b08      	cmp	r3, #8
    308a:	d1c9      	bne.n	3020 <getTrngSource+0x90>
    308c:	4851      	ldr	r0, [pc, #324]	; (31d4 <getTrngSource+0x244>)
    308e:	e7d9      	b.n	3044 <getTrngSource+0xb4>
    3090:	2b08      	cmp	r3, #8
    3092:	d0fb      	beq.n	308c <getTrngSource+0xfc>
    3094:	005b      	lsls	r3, r3, #1
    3096:	9306      	str	r3, [sp, #24]
    3098:	484f      	ldr	r0, [pc, #316]	; (31d8 <getTrngSource+0x248>)
    309a:	e7d3      	b.n	3044 <getTrngSource+0xb4>
    309c:	4629      	mov	r1, r5
    309e:	9806      	ldr	r0, [sp, #24]
    30a0:	f000 fa30 	bl	3504 <LLF_RND_GetRoscSampleCnt>
    30a4:	2800      	cmp	r0, #0
    30a6:	d1eb      	bne.n	3080 <getTrngSource+0xf0>
    30a8:	9b06      	ldr	r3, [sp, #24]
    30aa:	2b08      	cmp	r3, #8
    30ac:	f000 810e 	beq.w	32cc <getTrngSource+0x33c>
    30b0:	2b04      	cmp	r3, #4
    30b2:	f000 8131 	beq.w	3318 <getTrngSource+0x388>
    30b6:	f1a3 0302 	sub.w	r3, r3, #2
    30ba:	fab3 f383 	clz	r3, r3
    30be:	095b      	lsrs	r3, r3, #5
    30c0:	9301      	str	r3, [sp, #4]
    30c2:	2301      	movs	r3, #1
    30c4:	4619      	mov	r1, r3
    30c6:	4a45      	ldr	r2, [pc, #276]	; (31dc <getTrngSource+0x24c>)
    30c8:	6013      	str	r3, [r2, #0]
    30ca:	f842 3c84 	str.w	r3, [r2, #-132]
    30ce:	4b43      	ldr	r3, [pc, #268]	; (31dc <getTrngSource+0x24c>)
    30d0:	6019      	str	r1, [r3, #0]
    30d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    30d4:	f8c9 3000 	str.w	r3, [r9]
    30d8:	f8d9 2000 	ldr.w	r2, [r9]
    30dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    30de:	429a      	cmp	r2, r3
    30e0:	d1f5      	bne.n	30ce <getTrngSource+0x13e>
    30e2:	f04f 0800 	mov.w	r8, #0
    30e6:	f04f 30ff 	mov.w	r0, #4294967295
    30ea:	f8ca 8000 	str.w	r8, [sl]
    30ee:	f7ff fc3b 	bl	2968 <CC_HalClearInterruptBit>
    30f2:	4a3b      	ldr	r2, [pc, #236]	; (31e0 <getTrngSource+0x250>)
    30f4:	4b3b      	ldr	r3, [pc, #236]	; (31e4 <getTrngSource+0x254>)
    30f6:	4640      	mov	r0, r8
    30f8:	601a      	str	r2, [r3, #0]
    30fa:	f7ff fc43 	bl	2984 <CC_HalMaskInterrupt>
    30fe:	220a      	movs	r2, #10
    3100:	9801      	ldr	r0, [sp, #4]
    3102:	4939      	ldr	r1, [pc, #228]	; (31e8 <getTrngSource+0x258>)
    3104:	4b2d      	ldr	r3, [pc, #180]	; (31bc <getTrngSource+0x22c>)
    3106:	6008      	str	r0, [r1, #0]
    3108:	601a      	str	r2, [r3, #0]
    310a:	692a      	ldr	r2, [r5, #16]
    310c:	f1a8 3855 	sub.w	r8, r8, #1431655765	; 0x55555555
    3110:	fba8 1202 	umull	r1, r2, r8, r2
    3114:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3116:	0912      	lsrs	r2, r2, #4
    3118:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    311c:	03db      	lsls	r3, r3, #15
    311e:	fb03 f302 	mul.w	r3, r3, r2
    3122:	4a32      	ldr	r2, [pc, #200]	; (31ec <getTrngSource+0x25c>)
    3124:	099b      	lsrs	r3, r3, #6
    3126:	6013      	str	r3, [r2, #0]
    3128:	2301      	movs	r3, #1
    312a:	f8ca 3000 	str.w	r3, [sl]
    312e:	9906      	ldr	r1, [sp, #24]
    3130:	f8db 2000 	ldr.w	r2, [fp]
    3134:	020b      	lsls	r3, r1, #8
    3136:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    313a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    313e:	4313      	orrs	r3, r2
    3140:	f8cb 3000 	str.w	r3, [fp]
    3144:	a807      	add	r0, sp, #28
    3146:	f000 f9cd 	bl	34e4 <LLF_RND_WaitRngInterrupt>
    314a:	2800      	cmp	r0, #0
    314c:	d198      	bne.n	3080 <getTrngSource+0xf0>
    314e:	4b28      	ldr	r3, [pc, #160]	; (31f0 <getTrngSource+0x260>)
    3150:	fba8 2804 	umull	r2, r8, r8, r4
    3154:	681a      	ldr	r2, [r3, #0]
    3156:	3314      	adds	r3, #20
    3158:	9208      	str	r2, [sp, #32]
    315a:	f853 2c10 	ldr.w	r2, [r3, #-16]
    315e:	ebb6 0f98 	cmp.w	r6, r8, lsr #2
    3162:	9209      	str	r2, [sp, #36]	; 0x24
    3164:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    3168:	920a      	str	r2, [sp, #40]	; 0x28
    316a:	f853 2c08 	ldr.w	r2, [r3, #-8]
    316e:	920b      	str	r2, [sp, #44]	; 0x2c
    3170:	f853 2c04 	ldr.w	r2, [r3, #-4]
    3174:	920c      	str	r2, [sp, #48]	; 0x30
    3176:	681b      	ldr	r3, [r3, #0]
    3178:	930d      	str	r3, [sp, #52]	; 0x34
    317a:	d101      	bne.n	3180 <getTrngSource+0x1f0>
    317c:	9b00      	ldr	r3, [sp, #0]
    317e:	b99b      	cbnz	r3, 31a8 <getTrngSource+0x218>
    3180:	4638      	mov	r0, r7
    3182:	2218      	movs	r2, #24
    3184:	a908      	add	r1, sp, #32
    3186:	f7ff fb21 	bl	27cc <CC_PalMemCopyPlat>
    318a:	3c18      	subs	r4, #24
    318c:	3718      	adds	r7, #24
    318e:	3601      	adds	r6, #1
    3190:	2c00      	cmp	r4, #0
    3192:	f47f af3a 	bne.w	300a <getTrngSource+0x7a>
    3196:	9b04      	ldr	r3, [sp, #16]
    3198:	2b00      	cmp	r3, #0
    319a:	f040 809a 	bne.w	32d2 <getTrngSource+0x342>
    319e:	2300      	movs	r3, #0
    31a0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    31a2:	6013      	str	r3, [r2, #0]
    31a4:	9b06      	ldr	r3, [sp, #24]
    31a6:	e76f      	b.n	3088 <getTrngSource+0xf8>
    31a8:	461a      	mov	r2, r3
    31aa:	4638      	mov	r0, r7
    31ac:	a908      	add	r1, sp, #32
    31ae:	1ae4      	subs	r4, r4, r3
    31b0:	f7ff fb0c 	bl	27cc <CC_PalMemCopyPlat>
    31b4:	9b00      	ldr	r3, [sp, #0]
    31b6:	441f      	add	r7, r3
    31b8:	e7e9      	b.n	318e <getTrngSource+0x1fe>
    31ba:	bf00      	nop
    31bc:	50841138 	.word	0x50841138
    31c0:	50841130 	.word	0x50841130
    31c4:	aaaaaaab 	.word	0xaaaaaaab
    31c8:	00f10c31 	.word	0x00f10c31
    31cc:	00f10c30 	.word	0x00f10c30
    31d0:	00f10c02 	.word	0x00f10c02
    31d4:	00f10c32 	.word	0x00f10c32
    31d8:	00f10c35 	.word	0x00f10c35
    31dc:	508411c4 	.word	0x508411c4
    31e0:	0ffffffe 	.word	0x0ffffffe
    31e4:	50841100 	.word	0x50841100
    31e8:	5084110c 	.word	0x5084110c
    31ec:	508411d8 	.word	0x508411d8
    31f0:	50841114 	.word	0x50841114
    31f4:	5084112c 	.word	0x5084112c
    31f8:	f1bb 0f00 	cmp.w	fp, #0
    31fc:	f43f af4c 	beq.w	3098 <getTrngSource+0x108>
    3200:	2d00      	cmp	r5, #0
    3202:	f43f af49 	beq.w	3098 <getTrngSource+0x108>
    3206:	2301      	movs	r3, #1
    3208:	a90e      	add	r1, sp, #56	; 0x38
    320a:	f841 3d20 	str.w	r3, [r1, #-32]!
    320e:	f8cb 2000 	str.w	r2, [fp]
    3212:	4628      	mov	r0, r5
    3214:	f000 f994 	bl	3540 <LLF_RND_GetFastestRosc>
    3218:	2800      	cmp	r0, #0
    321a:	f47f af13 	bne.w	3044 <getTrngSource+0xb4>
    321e:	4629      	mov	r1, r5
    3220:	9806      	ldr	r0, [sp, #24]
    3222:	f000 f96f 	bl	3504 <LLF_RND_GetRoscSampleCnt>
    3226:	2800      	cmp	r0, #0
    3228:	f47f af0c 	bne.w	3044 <getTrngSource+0xb4>
    322c:	9f06      	ldr	r7, [sp, #24]
    322e:	2f08      	cmp	r7, #8
    3230:	f000 80eb 	beq.w	340a <getTrngSource+0x47a>
    3234:	2f04      	cmp	r7, #4
    3236:	f000 80ea 	beq.w	340e <getTrngSource+0x47e>
    323a:	f1a7 0702 	sub.w	r7, r7, #2
    323e:	fab7 f787 	clz	r7, r7
    3242:	097f      	lsrs	r7, r7, #5
    3244:	2201      	movs	r2, #1
    3246:	4616      	mov	r6, r2
    3248:	4b73      	ldr	r3, [pc, #460]	; (3418 <getTrngSource+0x488>)
    324a:	4974      	ldr	r1, [pc, #464]	; (341c <getTrngSource+0x48c>)
    324c:	601a      	str	r2, [r3, #0]
    324e:	4618      	mov	r0, r3
    3250:	600a      	str	r2, [r1, #0]
    3252:	3b94      	subs	r3, #148	; 0x94
    3254:	6006      	str	r6, [r0, #0]
    3256:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3258:	601a      	str	r2, [r3, #0]
    325a:	6819      	ldr	r1, [r3, #0]
    325c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    325e:	4291      	cmp	r1, r2
    3260:	d1f8      	bne.n	3254 <getTrngSource+0x2c4>
    3262:	f04f 0800 	mov.w	r8, #0
    3266:	4b6e      	ldr	r3, [pc, #440]	; (3420 <getTrngSource+0x490>)
    3268:	f04f 30ff 	mov.w	r0, #4294967295
    326c:	f8c3 8000 	str.w	r8, [r3]
    3270:	f7ff fb7a 	bl	2968 <CC_HalClearInterruptBit>
    3274:	4b6b      	ldr	r3, [pc, #428]	; (3424 <getTrngSource+0x494>)
    3276:	4a6c      	ldr	r2, [pc, #432]	; (3428 <getTrngSource+0x498>)
    3278:	4640      	mov	r0, r8
    327a:	601a      	str	r2, [r3, #0]
    327c:	f7ff fb82 	bl	2984 <CC_HalMaskInterrupt>
    3280:	220a      	movs	r2, #10
    3282:	496a      	ldr	r1, [pc, #424]	; (342c <getTrngSource+0x49c>)
    3284:	4b6a      	ldr	r3, [pc, #424]	; (3430 <getTrngSource+0x4a0>)
    3286:	600f      	str	r7, [r1, #0]
    3288:	601a      	str	r2, [r3, #0]
    328a:	991a      	ldr	r1, [sp, #104]	; 0x68
    328c:	692b      	ldr	r3, [r5, #16]
    328e:	2901      	cmp	r1, #1
    3290:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3292:	f000 80b1 	beq.w	33f8 <getTrngSource+0x468>
    3296:	4967      	ldr	r1, [pc, #412]	; (3434 <getTrngSource+0x4a4>)
    3298:	fba1 1303 	umull	r1, r3, r1, r3
    329c:	091b      	lsrs	r3, r3, #4
    329e:	2101      	movs	r1, #1
    32a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    32a4:	03d2      	lsls	r2, r2, #15
    32a6:	fb03 f302 	mul.w	r3, r3, r2
    32aa:	4a63      	ldr	r2, [pc, #396]	; (3438 <getTrngSource+0x4a8>)
    32ac:	099b      	lsrs	r3, r3, #6
    32ae:	6013      	str	r3, [r2, #0]
    32b0:	4b5b      	ldr	r3, [pc, #364]	; (3420 <getTrngSource+0x490>)
    32b2:	6019      	str	r1, [r3, #0]
    32b4:	9906      	ldr	r1, [sp, #24]
    32b6:	f8db 2000 	ldr.w	r2, [fp]
    32ba:	020b      	lsls	r3, r1, #8
    32bc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    32c0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    32c4:	4313      	orrs	r3, r2
    32c6:	f8cb 3000 	str.w	r3, [fp]
    32ca:	e67f      	b.n	2fcc <getTrngSource+0x3c>
    32cc:	2303      	movs	r3, #3
    32ce:	9301      	str	r3, [sp, #4]
    32d0:	e6f7      	b.n	30c2 <getTrngSource+0x132>
    32d2:	9b03      	ldr	r3, [sp, #12]
    32d4:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
    32d8:	f63f af61 	bhi.w	319e <getTrngSource+0x20e>
    32dc:	e9dd 7c04 	ldrd	r7, ip, [sp, #16]
    32e0:	4620      	mov	r0, r4
    32e2:	4623      	mov	r3, r4
    32e4:	696e      	ldr	r6, [r5, #20]
    32e6:	e004      	b.n	32f2 <getTrngSource+0x362>
    32e8:	2001      	movs	r0, #1
    32ea:	3301      	adds	r3, #1
    32ec:	4563      	cmp	r3, ip
    32ee:	4614      	mov	r4, r2
    32f0:	d815      	bhi.n	331e <getTrngSource+0x38e>
    32f2:	095a      	lsrs	r2, r3, #5
    32f4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    32f8:	f003 011f 	and.w	r1, r3, #31
    32fc:	40ca      	lsrs	r2, r1
    32fe:	291f      	cmp	r1, #31
    3300:	bf18      	it	ne
    3302:	f002 0201 	andne.w	r2, r2, #1
    3306:	2b00      	cmp	r3, #0
    3308:	d0ee      	beq.n	32e8 <getTrngSource+0x358>
    330a:	42a2      	cmp	r2, r4
    330c:	d1ec      	bne.n	32e8 <getTrngSource+0x358>
    330e:	3001      	adds	r0, #1
    3310:	4286      	cmp	r6, r0
    3312:	d1ea      	bne.n	32ea <getTrngSource+0x35a>
    3314:	4849      	ldr	r0, [pc, #292]	; (343c <getTrngSource+0x4ac>)
    3316:	e00b      	b.n	3330 <getTrngSource+0x3a0>
    3318:	2302      	movs	r3, #2
    331a:	9301      	str	r3, [sp, #4]
    331c:	e6d1      	b.n	30c2 <getTrngSource+0x132>
    331e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3322:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
    3326:	69aa      	ldr	r2, [r5, #24]
    3328:	f7ff fdf4 	bl	2f14 <LLF_RND_AdaptiveProportionTest>
    332c:	2800      	cmp	r0, #0
    332e:	d05d      	beq.n	33ec <getTrngSource+0x45c>
    3330:	2300      	movs	r3, #0
    3332:	9a18      	ldr	r2, [sp, #96]	; 0x60
    3334:	6013      	str	r3, [r2, #0]
    3336:	e6a3      	b.n	3080 <getTrngSource+0xf0>
    3338:	4629      	mov	r1, r5
    333a:	9806      	ldr	r0, [sp, #24]
    333c:	f000 f8e2 	bl	3504 <LLF_RND_GetRoscSampleCnt>
    3340:	2800      	cmp	r0, #0
    3342:	f47f ae7c 	bne.w	303e <getTrngSource+0xae>
    3346:	9c06      	ldr	r4, [sp, #24]
    3348:	2c08      	cmp	r4, #8
    334a:	d051      	beq.n	33f0 <getTrngSource+0x460>
    334c:	2c04      	cmp	r4, #4
    334e:	d051      	beq.n	33f4 <getTrngSource+0x464>
    3350:	f1a4 0402 	sub.w	r4, r4, #2
    3354:	fab4 f484 	clz	r4, r4
    3358:	0964      	lsrs	r4, r4, #5
    335a:	2301      	movs	r3, #1
    335c:	461e      	mov	r6, r3
    335e:	4619      	mov	r1, r3
    3360:	4a2d      	ldr	r2, [pc, #180]	; (3418 <getTrngSource+0x488>)
    3362:	6013      	str	r3, [r2, #0]
    3364:	f842 3c84 	str.w	r3, [r2, #-132]
    3368:	4b2b      	ldr	r3, [pc, #172]	; (3418 <getTrngSource+0x488>)
    336a:	6019      	str	r1, [r3, #0]
    336c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    336e:	f8c9 3000 	str.w	r3, [r9]
    3372:	f8d9 2000 	ldr.w	r2, [r9]
    3376:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3378:	429a      	cmp	r2, r3
    337a:	d1f5      	bne.n	3368 <getTrngSource+0x3d8>
    337c:	2700      	movs	r7, #0
    337e:	f04f 30ff 	mov.w	r0, #4294967295
    3382:	f8ca 7000 	str.w	r7, [sl]
    3386:	f7ff faef 	bl	2968 <CC_HalClearInterruptBit>
    338a:	4b26      	ldr	r3, [pc, #152]	; (3424 <getTrngSource+0x494>)
    338c:	4a26      	ldr	r2, [pc, #152]	; (3428 <getTrngSource+0x498>)
    338e:	4638      	mov	r0, r7
    3390:	601a      	str	r2, [r3, #0]
    3392:	f7ff faf7 	bl	2984 <CC_HalMaskInterrupt>
    3396:	220a      	movs	r2, #10
    3398:	4924      	ldr	r1, [pc, #144]	; (342c <getTrngSource+0x49c>)
    339a:	4b25      	ldr	r3, [pc, #148]	; (3430 <getTrngSource+0x4a0>)
    339c:	600c      	str	r4, [r1, #0]
    339e:	601a      	str	r2, [r3, #0]
    33a0:	692a      	ldr	r2, [r5, #16]
    33a2:	4924      	ldr	r1, [pc, #144]	; (3434 <getTrngSource+0x4a4>)
    33a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    33a6:	fba1 1202 	umull	r1, r2, r1, r2
    33aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    33ae:	0912      	lsrs	r2, r2, #4
    33b0:	03db      	lsls	r3, r3, #15
    33b2:	fb03 f302 	mul.w	r3, r3, r2
    33b6:	4a20      	ldr	r2, [pc, #128]	; (3438 <getTrngSource+0x4a8>)
    33b8:	099b      	lsrs	r3, r3, #6
    33ba:	6013      	str	r3, [r2, #0]
    33bc:	f8ca 6000 	str.w	r6, [sl]
    33c0:	9b06      	ldr	r3, [sp, #24]
    33c2:	f8db 1000 	ldr.w	r1, [fp]
    33c6:	021a      	lsls	r2, r3, #8
    33c8:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
    33cc:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
    33d0:	431a      	orrs	r2, r3
    33d2:	0a13      	lsrs	r3, r2, #8
    33d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    33d8:	4313      	orrs	r3, r2
    33da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    33de:	f8cb 3000 	str.w	r3, [fp]
    33e2:	9b02      	ldr	r3, [sp, #8]
    33e4:	3b01      	subs	r3, #1
    33e6:	9302      	str	r3, [sp, #8]
    33e8:	f47f ae07 	bne.w	2ffa <getTrngSource+0x6a>
    33ec:	2000      	movs	r0, #0
    33ee:	e629      	b.n	3044 <getTrngSource+0xb4>
    33f0:	2403      	movs	r4, #3
    33f2:	e7b2      	b.n	335a <getTrngSource+0x3ca>
    33f4:	2402      	movs	r4, #2
    33f6:	e7b0      	b.n	335a <getTrngSource+0x3ca>
    33f8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    33fc:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
    3400:	3101      	adds	r1, #1
    3402:	d006      	beq.n	3412 <getTrngSource+0x482>
    3404:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    3408:	e745      	b.n	3296 <getTrngSource+0x306>
    340a:	2703      	movs	r7, #3
    340c:	e71a      	b.n	3244 <getTrngSource+0x2b4>
    340e:	2702      	movs	r7, #2
    3410:	e718      	b.n	3244 <getTrngSource+0x2b4>
    3412:	2316      	movs	r3, #22
    3414:	e743      	b.n	329e <getTrngSource+0x30e>
    3416:	bf00      	nop
    3418:	508411c4 	.word	0x508411c4
    341c:	50841140 	.word	0x50841140
    3420:	5084112c 	.word	0x5084112c
    3424:	50841100 	.word	0x50841100
    3428:	0ffffffe 	.word	0x0ffffffe
    342c:	5084110c 	.word	0x5084110c
    3430:	50841138 	.word	0x50841138
    3434:	aaaaaaab 	.word	0xaaaaaaab
    3438:	508411d8 	.word	0x508411d8
    343c:	00f10c36 	.word	0x00f10c36

00003440 <LLF_RND_GetTrngSource>:
    3440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3444:	4c1b      	ldr	r4, [pc, #108]	; (34b4 <LLF_RND_GetTrngSource+0x74>)
    3446:	b085      	sub	sp, #20
    3448:	4607      	mov	r7, r0
    344a:	e9dd 560d 	ldrd	r5, r6, [sp, #52]	; 0x34
    344e:	4688      	mov	r8, r1
    3450:	6820      	ldr	r0, [r4, #0]
    3452:	f04f 31ff 	mov.w	r1, #4294967295
    3456:	4691      	mov	r9, r2
    3458:	f7ff fa1e 	bl	2898 <CC_PalMutexLock>
    345c:	bb28      	cbnz	r0, 34aa <LLF_RND_GetTrngSource+0x6a>
    345e:	2000      	movs	r0, #0
    3460:	f7ff fa4a 	bl	28f8 <CC_PalPowerSaveModeSelect>
    3464:	b9e8      	cbnz	r0, 34a2 <LLF_RND_GetTrngSource+0x62>
    3466:	2300      	movs	r3, #0
    3468:	e9cd 5600 	strd	r5, r6, [sp]
    346c:	9302      	str	r3, [sp, #8]
    346e:	464a      	mov	r2, r9
    3470:	4641      	mov	r1, r8
    3472:	4638      	mov	r0, r7
    3474:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3476:	f7ff fd8b 	bl	2f90 <getTrngSource>
    347a:	4605      	mov	r5, r0
    347c:	2001      	movs	r0, #1
    347e:	f7ff fa3b 	bl	28f8 <CC_PalPowerSaveModeSelect>
    3482:	b950      	cbnz	r0, 349a <LLF_RND_GetTrngSource+0x5a>
    3484:	6820      	ldr	r0, [r4, #0]
    3486:	f7ff fa0f 	bl	28a8 <CC_PalMutexUnlock>
    348a:	b110      	cbz	r0, 3492 <LLF_RND_GetTrngSource+0x52>
    348c:	480a      	ldr	r0, [pc, #40]	; (34b8 <LLF_RND_GetTrngSource+0x78>)
    348e:	f7ff fb8d 	bl	2bac <CC_PalAbort>
    3492:	4628      	mov	r0, r5
    3494:	b005      	add	sp, #20
    3496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    349a:	4808      	ldr	r0, [pc, #32]	; (34bc <LLF_RND_GetTrngSource+0x7c>)
    349c:	f7ff fb86 	bl	2bac <CC_PalAbort>
    34a0:	e7f0      	b.n	3484 <LLF_RND_GetTrngSource+0x44>
    34a2:	4807      	ldr	r0, [pc, #28]	; (34c0 <LLF_RND_GetTrngSource+0x80>)
    34a4:	f7ff fb82 	bl	2bac <CC_PalAbort>
    34a8:	e7dd      	b.n	3466 <LLF_RND_GetTrngSource+0x26>
    34aa:	4806      	ldr	r0, [pc, #24]	; (34c4 <LLF_RND_GetTrngSource+0x84>)
    34ac:	f7ff fb7e 	bl	2bac <CC_PalAbort>
    34b0:	e7d5      	b.n	345e <LLF_RND_GetTrngSource+0x1e>
    34b2:	bf00      	nop
    34b4:	20001424 	.word	0x20001424
    34b8:	00004610 	.word	0x00004610
    34bc:	00004648 	.word	0x00004648
    34c0:	00004628 	.word	0x00004628
    34c4:	000045f8 	.word	0x000045f8

000034c8 <LLF_RND_RunTrngStartupTest>:
    34c8:	b510      	push	{r4, lr}
    34ca:	2401      	movs	r4, #1
    34cc:	b086      	sub	sp, #24
    34ce:	ab05      	add	r3, sp, #20
    34d0:	e9cd 2401 	strd	r2, r4, [sp, #4]
    34d4:	9300      	str	r3, [sp, #0]
    34d6:	2200      	movs	r2, #0
    34d8:	ab04      	add	r3, sp, #16
    34da:	f7ff fd59 	bl	2f90 <getTrngSource>
    34de:	b006      	add	sp, #24
    34e0:	bd10      	pop	{r4, pc}
    34e2:	bf00      	nop

000034e4 <LLF_RND_WaitRngInterrupt>:
    34e4:	b508      	push	{r3, lr}
    34e6:	4601      	mov	r1, r0
    34e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
    34ec:	f7ff fa50 	bl	2990 <CC_HalWaitInterruptRND>
    34f0:	2300      	movs	r3, #0
    34f2:	4902      	ldr	r1, [pc, #8]	; (34fc <LLF_RND_WaitRngInterrupt+0x18>)
    34f4:	4a02      	ldr	r2, [pc, #8]	; (3500 <LLF_RND_WaitRngInterrupt+0x1c>)
    34f6:	600b      	str	r3, [r1, #0]
    34f8:	6013      	str	r3, [r2, #0]
    34fa:	bd08      	pop	{r3, pc}
    34fc:	508411c8 	.word	0x508411c8
    3500:	5084112c 	.word	0x5084112c

00003504 <LLF_RND_GetRoscSampleCnt>:
    3504:	3801      	subs	r0, #1
    3506:	2807      	cmp	r0, #7
    3508:	d815      	bhi.n	3536 <LLF_RND_GetRoscSampleCnt+0x32>
    350a:	e8df f000 	tbb	[pc, r0]
    350e:	0c10      	.short	0x0c10
    3510:	14140814 	.word	0x14140814
    3514:	0414      	.short	0x0414
    3516:	68cb      	ldr	r3, [r1, #12]
    3518:	2000      	movs	r0, #0
    351a:	624b      	str	r3, [r1, #36]	; 0x24
    351c:	4770      	bx	lr
    351e:	688b      	ldr	r3, [r1, #8]
    3520:	2000      	movs	r0, #0
    3522:	624b      	str	r3, [r1, #36]	; 0x24
    3524:	4770      	bx	lr
    3526:	684b      	ldr	r3, [r1, #4]
    3528:	2000      	movs	r0, #0
    352a:	624b      	str	r3, [r1, #36]	; 0x24
    352c:	4770      	bx	lr
    352e:	680b      	ldr	r3, [r1, #0]
    3530:	2000      	movs	r0, #0
    3532:	624b      	str	r3, [r1, #36]	; 0x24
    3534:	4770      	bx	lr
    3536:	4801      	ldr	r0, [pc, #4]	; (353c <LLF_RND_GetRoscSampleCnt+0x38>)
    3538:	4770      	bx	lr
    353a:	bf00      	nop
    353c:	00f10c31 	.word	0x00f10c31

00003540 <LLF_RND_GetFastestRosc>:
    3540:	680b      	ldr	r3, [r1, #0]
    3542:	e002      	b.n	354a <LLF_RND_GetFastestRosc+0xa>
    3544:	2b08      	cmp	r3, #8
    3546:	600b      	str	r3, [r1, #0]
    3548:	d806      	bhi.n	3558 <LLF_RND_GetFastestRosc+0x18>
    354a:	6a02      	ldr	r2, [r0, #32]
    354c:	4213      	tst	r3, r2
    354e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3552:	d0f7      	beq.n	3544 <LLF_RND_GetFastestRosc+0x4>
    3554:	2000      	movs	r0, #0
    3556:	4770      	bx	lr
    3558:	4800      	ldr	r0, [pc, #0]	; (355c <LLF_RND_GetFastestRosc+0x1c>)
    355a:	4770      	bx	lr
    355c:	00f10c31 	.word	0x00f10c31

00003560 <LLF_RND_TurnOffTrng>:
    3560:	2300      	movs	r3, #0
    3562:	4904      	ldr	r1, [pc, #16]	; (3574 <LLF_RND_TurnOffTrng+0x14>)
    3564:	4a04      	ldr	r2, [pc, #16]	; (3578 <LLF_RND_TurnOffTrng+0x18>)
    3566:	600b      	str	r3, [r1, #0]
    3568:	f44f 6080 	mov.w	r0, #1024	; 0x400
    356c:	6013      	str	r3, [r2, #0]
    356e:	f7ff b9fb 	b.w	2968 <CC_HalClearInterruptBit>
    3572:	bf00      	nop
    3574:	5084112c 	.word	0x5084112c
    3578:	508411c4 	.word	0x508411c4

0000357c <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    357c:	b508      	push	{r3, lr}
	spm_config();
    357e:	f7fd fadb 	bl	b38 <spm_config>
	spm_jump();
}
    3582:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    3586:	f7fd ba6d 	b.w	a64 <spm_jump>

0000358a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    358a:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    358e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3592:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    3594:	bf08      	it	eq
    3596:	f06f 0015 	mvneq.w	r0, #21
    359a:	4770      	bx	lr

0000359c <z_sys_mem_pool_base_init>:
{
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);

	p->max_inline_level = -1;
    359c:	23ff      	movs	r3, #255	; 0xff
{
    359e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    35a2:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
    35a4:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    35a6:	4632      	mov	r2, r6

	for (i = 0; i < p->n_levels; i++) {
    35a8:	2300      	movs	r3, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
    35aa:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    35ae:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    35b0:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    35b2:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
    35b6:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    35ba:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
    35bc:	4598      	cmp	r8, r3
    35be:	dc05      	bgt.n	35cc <z_sys_mem_pool_base_init+0x30>
    35c0:	2300      	movs	r3, #0
		}

		sz = WB_DN(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
    35c2:	4619      	mov	r1, r3
    35c4:	428f      	cmp	r7, r1
    35c6:	dc20      	bgt.n	360a <z_sys_mem_pool_base_init+0x6e>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
	}
}
    35c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
    35cc:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
    35d0:	fb09 fe03 	mul.w	lr, r9, r3
    35d4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    35d8:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
    35da:	eb0a 040e 	add.w	r4, sl, lr
    35de:	f104 0b04 	add.w	fp, r4, #4
    35e2:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    35e6:	d805      	bhi.n	35f4 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
    35e8:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
    35ea:	0892      	lsrs	r2, r2, #2
    35ec:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
    35f0:	3301      	adds	r3, #1
    35f2:	e7e3      	b.n	35bc <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
    35f4:	f115 041f 	adds.w	r4, r5, #31
    35f8:	bf48      	it	mi
    35fa:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
    35fe:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
    3600:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
    3604:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    3608:	e7ef      	b.n	35ea <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
    360a:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
    360c:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
    360e:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
    3612:	18ec      	adds	r4, r5, r3
	node->next = list;
    3614:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
    3618:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
    361a:	3101      	adds	r1, #1
    361c:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
    361e:	6895      	ldr	r5, [r2, #8]
    3620:	4433      	add	r3, r6
    3622:	602c      	str	r4, [r5, #0]
	list->tail = node;
    3624:	6094      	str	r4, [r2, #8]
    3626:	e7cd      	b.n	35c4 <z_sys_mem_pool_base_init+0x28>

00003628 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    3628:	4604      	mov	r4, r0
    362a:	b508      	push	{r3, lr}
    362c:	4608      	mov	r0, r1
    362e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    3630:	461a      	mov	r2, r3
    3632:	47a0      	blx	r4
	return z_impl_k_current_get();
    3634:	f7fe ff48 	bl	24c8 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    3638:	f7fd ff48 	bl	14cc <z_impl_k_thread_abort>

0000363c <z_arch_printk_char_out>:
}
    363c:	2000      	movs	r0, #0
    363e:	4770      	bx	lr

00003640 <print_err>:
{
    3640:	b570      	push	{r4, r5, r6, lr}
    3642:	460d      	mov	r5, r1
    3644:	4604      	mov	r4, r0
	out('E', ctx);
    3646:	2045      	movs	r0, #69	; 0x45
    3648:	47a0      	blx	r4
	out('R', ctx);
    364a:	4629      	mov	r1, r5
    364c:	2052      	movs	r0, #82	; 0x52
    364e:	47a0      	blx	r4
	out('R', ctx);
    3650:	4629      	mov	r1, r5
    3652:	4623      	mov	r3, r4
}
    3654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    3658:	2052      	movs	r0, #82	; 0x52
    365a:	4718      	bx	r3

0000365c <z_vprintk>:
{
    365c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    3660:	f04f 0800 	mov.w	r8, #0
{
    3664:	4606      	mov	r6, r0
    3666:	460f      	mov	r7, r1
    3668:	461c      	mov	r4, r3
	int min_width = -1;
    366a:	f04f 3aff 	mov.w	sl, #4294967295
	enum pad_type padding = PAD_NONE;
    366e:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
    3670:	4645      	mov	r5, r8
{
    3672:	b08b      	sub	sp, #44	; 0x2c
    3674:	9202      	str	r2, [sp, #8]
	while (*fmt) {
    3676:	9b02      	ldr	r3, [sp, #8]
    3678:	7818      	ldrb	r0, [r3, #0]
    367a:	b910      	cbnz	r0, 3682 <z_vprintk+0x26>
}
    367c:	b00b      	add	sp, #44	; 0x2c
    367e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
    3682:	b945      	cbnz	r5, 3696 <z_vprintk+0x3a>
			if (*fmt != '%') {
    3684:	2825      	cmp	r0, #37	; 0x25
    3686:	f000 814b 	beq.w	3920 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
    368a:	4639      	mov	r1, r7
    368c:	47b0      	blx	r6
		++fmt;
    368e:	9b02      	ldr	r3, [sp, #8]
    3690:	3301      	adds	r3, #1
    3692:	9302      	str	r3, [sp, #8]
    3694:	e7ef      	b.n	3676 <z_vprintk+0x1a>
			switch (*fmt) {
    3696:	2864      	cmp	r0, #100	; 0x64
    3698:	d06d      	beq.n	3776 <z_vprintk+0x11a>
    369a:	d819      	bhi.n	36d0 <z_vprintk+0x74>
    369c:	2839      	cmp	r0, #57	; 0x39
    369e:	d80a      	bhi.n	36b6 <z_vprintk+0x5a>
    36a0:	2831      	cmp	r0, #49	; 0x31
    36a2:	d25f      	bcs.n	3764 <z_vprintk+0x108>
    36a4:	282d      	cmp	r0, #45	; 0x2d
    36a6:	f000 8141 	beq.w	392c <z_vprintk+0x2d0>
    36aa:	2830      	cmp	r0, #48	; 0x30
    36ac:	d04b      	beq.n	3746 <z_vprintk+0xea>
    36ae:	2825      	cmp	r0, #37	; 0x25
    36b0:	d107      	bne.n	36c2 <z_vprintk+0x66>
				out((int)'%', ctx);
    36b2:	4639      	mov	r1, r7
    36b4:	e132      	b.n	391c <z_vprintk+0x2c0>
			switch (*fmt) {
    36b6:	2858      	cmp	r0, #88	; 0x58
    36b8:	f000 80bb 	beq.w	3832 <z_vprintk+0x1d6>
    36bc:	2863      	cmp	r0, #99	; 0x63
    36be:	f000 812a 	beq.w	3916 <z_vprintk+0x2ba>
				out((int)'%', ctx);
    36c2:	4639      	mov	r1, r7
    36c4:	2025      	movs	r0, #37	; 0x25
    36c6:	47b0      	blx	r6
				out((int)*fmt, ctx);
    36c8:	9b02      	ldr	r3, [sp, #8]
    36ca:	4639      	mov	r1, r7
    36cc:	7818      	ldrb	r0, [r3, #0]
    36ce:	e125      	b.n	391c <z_vprintk+0x2c0>
			switch (*fmt) {
    36d0:	2870      	cmp	r0, #112	; 0x70
    36d2:	f000 80a4 	beq.w	381e <z_vprintk+0x1c2>
    36d6:	d811      	bhi.n	36fc <z_vprintk+0xa0>
    36d8:	2869      	cmp	r0, #105	; 0x69
    36da:	d04c      	beq.n	3776 <z_vprintk+0x11a>
    36dc:	286c      	cmp	r0, #108	; 0x6c
    36de:	d105      	bne.n	36ec <z_vprintk+0x90>
				} else if (*fmt == 'l' && length_mod == 'l') {
    36e0:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    36e4:	d12a      	bne.n	373c <z_vprintk+0xe0>
					length_mod = 'L';
    36e6:	f04f 084c 	mov.w	r8, #76	; 0x4c
    36ea:	e7d0      	b.n	368e <z_vprintk+0x32>
			switch (*fmt) {
    36ec:	2868      	cmp	r0, #104	; 0x68
    36ee:	d1e8      	bne.n	36c2 <z_vprintk+0x66>
				if (*fmt == 'h' && length_mod == 'h') {
    36f0:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
    36f4:	d122      	bne.n	373c <z_vprintk+0xe0>
					length_mod = 'H';
    36f6:	f04f 0848 	mov.w	r8, #72	; 0x48
    36fa:	e7c8      	b.n	368e <z_vprintk+0x32>
			switch (*fmt) {
    36fc:	2875      	cmp	r0, #117	; 0x75
    36fe:	d072      	beq.n	37e6 <z_vprintk+0x18a>
    3700:	d818      	bhi.n	3734 <z_vprintk+0xd8>
    3702:	2873      	cmp	r0, #115	; 0x73
    3704:	d1dd      	bne.n	36c2 <z_vprintk+0x66>
				char *s = va_arg(ap, char *);
    3706:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
    370a:	46ab      	mov	fp, r5
    370c:	465b      	mov	r3, fp
    370e:	f81b 0b01 	ldrb.w	r0, [fp], #1
    3712:	2800      	cmp	r0, #0
    3714:	f040 80fc 	bne.w	3910 <z_vprintk+0x2b4>
				if (padding == PAD_SPACE_AFTER) {
    3718:	f1b9 0f03 	cmp.w	r9, #3
    371c:	f040 810c 	bne.w	3938 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
    3720:	1b5d      	subs	r5, r3, r5
    3722:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
    3726:	2d00      	cmp	r5, #0
    3728:	dd49      	ble.n	37be <z_vprintk+0x162>
						out(' ', ctx);
    372a:	4639      	mov	r1, r7
    372c:	2020      	movs	r0, #32
    372e:	47b0      	blx	r6
    3730:	3d01      	subs	r5, #1
    3732:	e7f8      	b.n	3726 <z_vprintk+0xca>
			switch (*fmt) {
    3734:	2878      	cmp	r0, #120	; 0x78
    3736:	d07c      	beq.n	3832 <z_vprintk+0x1d6>
    3738:	287a      	cmp	r0, #122	; 0x7a
    373a:	d1c2      	bne.n	36c2 <z_vprintk+0x66>
				} else if (length_mod == 0) {
    373c:	f1b8 0f00 	cmp.w	r8, #0
    3740:	d1bf      	bne.n	36c2 <z_vprintk+0x66>
    3742:	4680      	mov	r8, r0
    3744:	e7a3      	b.n	368e <z_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
    3746:	f1ba 0f00 	cmp.w	sl, #0
    374a:	da0e      	bge.n	376a <z_vprintk+0x10e>
    374c:	f1b9 0f00 	cmp.w	r9, #0
    3750:	f000 80ef 	beq.w	3932 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
    3754:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    3758:	f1b9 0f00 	cmp.w	r9, #0
    375c:	bf08      	it	eq
    375e:	f04f 0902 	moveq.w	r9, #2
    3762:	e794      	b.n	368e <z_vprintk+0x32>
				if (min_width < 0) {
    3764:	f1ba 0f00 	cmp.w	sl, #0
    3768:	dbf4      	blt.n	3754 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
    376a:	230a      	movs	r3, #10
    376c:	fb03 0a0a 	mla	sl, r3, sl, r0
    3770:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    3774:	e7f0      	b.n	3758 <z_vprintk+0xfc>
				if (length_mod == 'z') {
    3776:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    377a:	d102      	bne.n	3782 <z_vprintk+0x126>
					d = va_arg(ap, int);
    377c:	f854 5b04 	ldr.w	r5, [r4], #4
    3780:	e020      	b.n	37c4 <z_vprintk+0x168>
				} else if (length_mod == 'l') {
    3782:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    3786:	d0f9      	beq.n	377c <z_vprintk+0x120>
				} else if (length_mod == 'L') {
    3788:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    378c:	d1f6      	bne.n	377c <z_vprintk+0x120>
					long long lld = va_arg(ap, long long);
    378e:	3407      	adds	r4, #7
    3790:	f024 0407 	bic.w	r4, r4, #7
    3794:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
    3798:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
    379c:	9106      	str	r1, [sp, #24]
    379e:	f143 0100 	adc.w	r1, r3, #0
    37a2:	9107      	str	r1, [sp, #28]
    37a4:	2100      	movs	r1, #0
    37a6:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    37aa:	f04f 30ff 	mov.w	r0, #4294967295
    37ae:	4561      	cmp	r1, ip
    37b0:	bf08      	it	eq
    37b2:	4558      	cmpeq	r0, fp
    37b4:	d205      	bcs.n	37c2 <z_vprintk+0x166>
						print_err(out, ctx);
    37b6:	4639      	mov	r1, r7
    37b8:	4630      	mov	r0, r6
    37ba:	f7ff ff41 	bl	3640 <print_err>
			might_format = 0;
    37be:	2500      	movs	r5, #0
				break;
    37c0:	e765      	b.n	368e <z_vprintk+0x32>
					d = lld;
    37c2:	4615      	mov	r5, r2
				if (d < 0) {
    37c4:	2d00      	cmp	r5, #0
    37c6:	da05      	bge.n	37d4 <z_vprintk+0x178>
					out((int)'-', ctx);
    37c8:	4639      	mov	r1, r7
    37ca:	202d      	movs	r0, #45	; 0x2d
    37cc:	47b0      	blx	r6
					d = -d;
    37ce:	426d      	negs	r5, r5
					min_width--;
    37d0:	f10a 3aff 	add.w	sl, sl, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
    37d4:	464b      	mov	r3, r9
    37d6:	462a      	mov	r2, r5
    37d8:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
    37dc:	4639      	mov	r1, r7
    37de:	4630      	mov	r0, r6
    37e0:	f7fc ff80 	bl	6e4 <_printk_dec_ulong>
				break;
    37e4:	e7eb      	b.n	37be <z_vprintk+0x162>
				if (length_mod == 'z') {
    37e6:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    37ea:	d102      	bne.n	37f2 <z_vprintk+0x196>
					u = va_arg(ap, unsigned int);
    37ec:	f854 2b04 	ldr.w	r2, [r4], #4
    37f0:	e011      	b.n	3816 <z_vprintk+0x1ba>
				} else if (length_mod == 'l') {
    37f2:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    37f6:	d0f9      	beq.n	37ec <z_vprintk+0x190>
				} else if (length_mod == 'L') {
    37f8:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    37fc:	d1f6      	bne.n	37ec <z_vprintk+0x190>
					if (llu > ~0UL) {
    37fe:	2100      	movs	r1, #0
    3800:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
    3804:	3407      	adds	r4, #7
    3806:	f024 0407 	bic.w	r4, r4, #7
    380a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    380e:	4299      	cmp	r1, r3
    3810:	bf08      	it	eq
    3812:	4290      	cmpeq	r0, r2
    3814:	d3cf      	bcc.n	37b6 <z_vprintk+0x15a>
				_printk_dec_ulong(out, ctx, u, padding,
    3816:	f8cd a000 	str.w	sl, [sp]
    381a:	464b      	mov	r3, r9
    381c:	e7de      	b.n	37dc <z_vprintk+0x180>
				  out('0', ctx);
    381e:	4639      	mov	r1, r7
    3820:	2030      	movs	r0, #48	; 0x30
    3822:	47b0      	blx	r6
				  out('x', ctx);
    3824:	4639      	mov	r1, r7
    3826:	2078      	movs	r0, #120	; 0x78
    3828:	47b0      	blx	r6
				  min_width = 8;
    382a:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
    382e:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
    3832:	9b02      	ldr	r3, [sp, #8]
    3834:	781b      	ldrb	r3, [r3, #0]
    3836:	2b70      	cmp	r3, #112	; 0x70
    3838:	d104      	bne.n	3844 <z_vprintk+0x1e8>
					x = va_arg(ap, unsigned int);
    383a:	f854 3b04 	ldr.w	r3, [r4], #4
    383e:	9304      	str	r3, [sp, #16]
    3840:	2300      	movs	r3, #0
    3842:	e00d      	b.n	3860 <z_vprintk+0x204>
				} else if (length_mod == 'l') {
    3844:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    3848:	d0f7      	beq.n	383a <z_vprintk+0x1de>
				} else if (length_mod == 'L') {
    384a:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    384e:	d1f4      	bne.n	383a <z_vprintk+0x1de>
					x = va_arg(ap, unsigned long long);
    3850:	3407      	adds	r4, #7
    3852:	f024 0307 	bic.w	r3, r4, #7
    3856:	461c      	mov	r4, r3
    3858:	f854 2b08 	ldr.w	r2, [r4], #8
    385c:	685b      	ldr	r3, [r3, #4]
    385e:	9204      	str	r2, [sp, #16]
	int digits = 0;
    3860:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    3862:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
    3864:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
    3868:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
    386a:	9105      	str	r1, [sp, #20]
		shift -= 4;
    386c:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
    3870:	9804      	ldr	r0, [sp, #16]
    3872:	f1cb 0c20 	rsb	ip, fp, #32
    3876:	f1ab 0120 	sub.w	r1, fp, #32
    387a:	fa20 f00b 	lsr.w	r0, r0, fp
    387e:	fa03 fc0c 	lsl.w	ip, r3, ip
    3882:	ea40 000c 	orr.w	r0, r0, ip
    3886:	fa23 f101 	lsr.w	r1, r3, r1
    388a:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    388c:	f010 000f 	ands.w	r0, r0, #15
    3890:	d106      	bne.n	38a0 <z_vprintk+0x244>
    3892:	9905      	ldr	r1, [sp, #20]
    3894:	b911      	cbnz	r1, 389c <z_vprintk+0x240>
    3896:	f1bb 0f00 	cmp.w	fp, #0
    389a:	d122      	bne.n	38e2 <z_vprintk+0x286>
			nibble += nibble > 9 ? 87 : 48;
    389c:	2130      	movs	r1, #48	; 0x30
    389e:	e003      	b.n	38a8 <z_vprintk+0x24c>
    38a0:	2809      	cmp	r0, #9
    38a2:	bf8c      	ite	hi
    38a4:	2157      	movhi	r1, #87	; 0x57
    38a6:	2130      	movls	r1, #48	; 0x30
    38a8:	4408      	add	r0, r1
			out((int)nibble, ctx);
    38aa:	b240      	sxtb	r0, r0
    38ac:	4639      	mov	r1, r7
    38ae:	9308      	str	r3, [sp, #32]
    38b0:	9205      	str	r2, [sp, #20]
    38b2:	47b0      	blx	r6
			digits++;
    38b4:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
    38b6:	9a05      	ldr	r2, [sp, #20]
			digits++;
    38b8:	3301      	adds	r3, #1
    38ba:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
    38bc:	9b08      	ldr	r3, [sp, #32]
    38be:	f1bb 0f00 	cmp.w	fp, #0
    38c2:	d123      	bne.n	390c <z_vprintk+0x2b0>
	if (padding == PAD_SPACE_AFTER) {
    38c4:	f1b9 0f03 	cmp.w	r9, #3
    38c8:	f47f af79 	bne.w	37be <z_vprintk+0x162>
		remaining = min_width * 2 - digits;
    38cc:	9b03      	ldr	r3, [sp, #12]
    38ce:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
    38d2:	2d00      	cmp	r5, #0
    38d4:	f77f af73 	ble.w	37be <z_vprintk+0x162>
			out(' ', ctx);
    38d8:	4639      	mov	r1, r7
    38da:	2020      	movs	r0, #32
    38dc:	47b0      	blx	r6
    38de:	3d01      	subs	r5, #1
    38e0:	e7f7      	b.n	38d2 <z_vprintk+0x276>
		if (remaining-- <= min_width) {
    38e2:	1e51      	subs	r1, r2, #1
    38e4:	4592      	cmp	sl, r2
    38e6:	9108      	str	r1, [sp, #32]
    38e8:	db07      	blt.n	38fa <z_vprintk+0x29e>
			if (padding == PAD_ZERO_BEFORE) {
    38ea:	f1b9 0f01 	cmp.w	r9, #1
    38ee:	d106      	bne.n	38fe <z_vprintk+0x2a2>
				out('0', ctx);
    38f0:	4639      	mov	r1, r7
    38f2:	2030      	movs	r0, #48	; 0x30
    38f4:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
    38f6:	47b0      	blx	r6
    38f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
    38fa:	9a08      	ldr	r2, [sp, #32]
    38fc:	e7b6      	b.n	386c <z_vprintk+0x210>
			} else if (padding == PAD_SPACE_BEFORE) {
    38fe:	f1b9 0f02 	cmp.w	r9, #2
    3902:	d1fa      	bne.n	38fa <z_vprintk+0x29e>
    3904:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
    3906:	4639      	mov	r1, r7
    3908:	2020      	movs	r0, #32
    390a:	e7f4      	b.n	38f6 <z_vprintk+0x29a>
			found_largest_digit = 1;
    390c:	9505      	str	r5, [sp, #20]
    390e:	e7ad      	b.n	386c <z_vprintk+0x210>
					out((int)(*s++), ctx);
    3910:	4639      	mov	r1, r7
    3912:	47b0      	blx	r6
    3914:	e6fa      	b.n	370c <z_vprintk+0xb0>
				out(c, ctx);
    3916:	4639      	mov	r1, r7
    3918:	f854 0b04 	ldr.w	r0, [r4], #4
				out((int)'%', ctx);
    391c:	47b0      	blx	r6
    391e:	e74e      	b.n	37be <z_vprintk+0x162>
				length_mod = 0;
    3920:	46a8      	mov	r8, r5
				padding = PAD_NONE;
    3922:	46a9      	mov	r9, r5
				min_width = -1;
    3924:	f04f 3aff 	mov.w	sl, #4294967295
				might_format = 1;
    3928:	2501      	movs	r5, #1
    392a:	e6b0      	b.n	368e <z_vprintk+0x32>
				padding = PAD_SPACE_AFTER;
    392c:	f04f 0903 	mov.w	r9, #3
    3930:	e6ad      	b.n	368e <z_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
    3932:	f04f 0901 	mov.w	r9, #1
    3936:	e6aa      	b.n	368e <z_vprintk+0x32>
			might_format = 0;
    3938:	4605      	mov	r5, r0
    393a:	e6a8      	b.n	368e <z_vprintk+0x32>

0000393c <printk>:
{
    393c:	b40f      	push	{r0, r1, r2, r3}
    393e:	b507      	push	{r0, r1, r2, lr}
    3940:	a904      	add	r1, sp, #16
    3942:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    3946:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    3948:	f7fc ff1e 	bl	788 <vprintk>
}
    394c:	b003      	add	sp, #12
    394e:	f85d eb04 	ldr.w	lr, [sp], #4
    3952:	b004      	add	sp, #16
    3954:	4770      	bx	lr

00003956 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    3956:	4770      	bx	lr

00003958 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
    3958:	f7fe b88e 	b.w	1a78 <SystemInit>

0000395c <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
    395c:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
    395e:	7a5a      	ldrb	r2, [r3, #9]
    3960:	b932      	cbnz	r2, 3970 <get_status+0x14>
	if (data->ref > 0) {
    3962:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
    3966:	2800      	cmp	r0, #0
    3968:	bfcc      	ite	gt
    396a:	2000      	movgt	r0, #0
    396c:	2001      	movle	r0, #1
    396e:	4770      	bx	lr
    3970:	2002      	movs	r0, #2
}
    3972:	4770      	bx	lr

00003974 <clock_stop>:
	const struct nrf_clock_control_config *config =
    3974:	6802      	ldr	r2, [r0, #0]
{
    3976:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
    3978:	6895      	ldr	r5, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
    397a:	6884      	ldr	r4, [r0, #8]
    397c:	f04f 0320 	mov.w	r3, #32
    3980:	f3ef 8611 	mrs	r6, BASEPRI
    3984:	f383 8811 	msr	BASEPRI, r3
    3988:	f3bf 8f6f 	isb	sy
	data->ref--;
    398c:	7a23      	ldrb	r3, [r4, #8]
    398e:	3b01      	subs	r3, #1
    3990:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
    3992:	2b00      	cmp	r3, #0
	data->ref--;
    3994:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
    3996:	d118      	bne.n	39ca <clock_stop+0x56>
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    3998:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
    399c:	686b      	ldr	r3, [r5, #4]
				config->stop_handler(dev) : true;
    399e:	b983      	cbnz	r3, 39c2 <clock_stop+0x4e>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    39a0:	2201      	movs	r2, #1
    39a2:	7aeb      	ldrb	r3, [r5, #11]
    39a4:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    39a8:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
    39aa:	2200      	movs	r2, #0
    39ac:	892b      	ldrh	r3, [r5, #8]
    39ae:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    39b2:	601a      	str	r2, [r3, #0]
		data->started = false;
    39b4:	2000      	movs	r0, #0
    39b6:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
    39b8:	f386 8811 	msr	BASEPRI, r6
    39bc:	f3bf 8f6f 	isb	sy
}
    39c0:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
    39c2:	4798      	blx	r3
    39c4:	2800      	cmp	r0, #0
    39c6:	d1eb      	bne.n	39a0 <clock_stop+0x2c>
    39c8:	e7f4      	b.n	39b4 <clock_stop+0x40>
	} else if (data->ref < 0) {
    39ca:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
    39ce:	bfbc      	itt	lt
    39d0:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
    39d2:	f06f 0044 	mvnlt.w	r0, #68	; 0x44
    39d6:	e7ef      	b.n	39b8 <clock_stop+0x44>

000039d8 <clock_async_start>:
{
    39d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
    39da:	6803      	ldr	r3, [r0, #0]
{
    39dc:	4606      	mov	r6, r0
    39de:	4614      	mov	r4, r2
	const struct nrf_clock_control_config *config =
    39e0:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
    39e2:	6885      	ldr	r5, [r0, #8]
	__asm__ volatile(
    39e4:	f04f 0320 	mov.w	r3, #32
    39e8:	f3ef 8211 	mrs	r2, BASEPRI
    39ec:	f383 8811 	msr	BASEPRI, r3
    39f0:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    39f4:	7a2b      	ldrb	r3, [r5, #8]
    39f6:	3301      	adds	r3, #1
    39f8:	b25b      	sxtb	r3, r3
    39fa:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
    39fc:	f382 8811 	msr	BASEPRI, r2
    3a00:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
    3a04:	7a6a      	ldrb	r2, [r5, #9]
    3a06:	b132      	cbz	r2, 3a16 <clock_async_start+0x3e>
		if (data) {
    3a08:	b90c      	cbnz	r4, 3a0e <clock_async_start+0x36>
	return 0;
    3a0a:	2000      	movs	r0, #0
}
    3a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
    3a0e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    3a12:	4798      	blx	r3
    3a14:	e7f9      	b.n	3a0a <clock_async_start+0x32>
		if (ref == 1) {
    3a16:	2b01      	cmp	r3, #1
    3a18:	d106      	bne.n	3a28 <clock_async_start+0x50>
			do_start =  (config->start_handler) ?
    3a1a:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
    3a1c:	b933      	cbnz	r3, 3a2c <clock_async_start+0x54>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    3a1e:	2201      	movs	r2, #1
    3a20:	7abb      	ldrb	r3, [r7, #10]
    3a22:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    3a26:	601a      	str	r2, [r3, #0]
		if (data) {
    3a28:	b94c      	cbnz	r4, 3a3e <clock_async_start+0x66>
    3a2a:	e7ee      	b.n	3a0a <clock_async_start+0x32>
					config->start_handler(dev) : true;
    3a2c:	4798      	blx	r3
    3a2e:	2800      	cmp	r0, #0
    3a30:	d1f5      	bne.n	3a1e <clock_async_start+0x46>
			} else if (data) {
    3a32:	2c00      	cmp	r4, #0
    3a34:	d0e9      	beq.n	3a0a <clock_async_start+0x32>
				data->cb(dev, data->user_data);
    3a36:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    3a3a:	4630      	mov	r0, r6
    3a3c:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
    3a3e:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
    3a40:	429c      	cmp	r4, r3
    3a42:	d00d      	beq.n	3a60 <clock_async_start+0x88>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    3a44:	b113      	cbz	r3, 3a4c <clock_async_start+0x74>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3a46:	681b      	ldr	r3, [r3, #0]
	} while (item);
    3a48:	2b00      	cmp	r3, #0
    3a4a:	d1f9      	bne.n	3a40 <clock_async_start+0x68>
	parent->next = child;
    3a4c:	2000      	movs	r0, #0
    3a4e:	6020      	str	r0, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    3a50:	686b      	ldr	r3, [r5, #4]
    3a52:	b913      	cbnz	r3, 3a5a <clock_async_start+0x82>
	list->head = node;
    3a54:	e9c5 4400 	strd	r4, r4, [r5]
    3a58:	e7d7      	b.n	3a0a <clock_async_start+0x32>
	parent->next = child;
    3a5a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3a5c:	606c      	str	r4, [r5, #4]
    3a5e:	e7d5      	b.n	3a0c <clock_async_start+0x34>
				return -EALREADY;
    3a60:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3a64:	e7d2      	b.n	3a0c <clock_async_start+0x34>

00003a66 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    3a66:	2200      	movs	r2, #0
    3a68:	f7ff bfb6 	b.w	39d8 <clock_async_start>

00003a6c <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    3a6c:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
    3a6e:	2000      	movs	r0, #0
	list->tail = NULL;
    3a70:	e9c3 0000 	strd	r0, r0, [r3]
}
    3a74:	4770      	bx	lr

00003a76 <hfclk_init>:
{
    3a76:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    3a78:	2200      	movs	r2, #0
{
    3a7a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    3a7c:	2101      	movs	r1, #1
    3a7e:	2005      	movs	r0, #5
    3a80:	f7fd fb90 	bl	11a4 <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    3a84:	2005      	movs	r0, #5
    3a86:	f7fd fb7d 	bl	1184 <z_arch_irq_enable>
}

__STATIC_INLINE void nrf_clock_lf_src_set(nrf_clock_lfclk_t source)
{
    NRF_CLOCK->LFCLKSRC = (uint32_t)(source);
    3a8a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3a8e:	2202      	movs	r2, #2
    3a90:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NRF_CLOCK->INTENSET = int_mask;
    3a94:	2203      	movs	r2, #3
	list->head = NULL;
    3a96:	2000      	movs	r0, #0
    3a98:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    3a9c:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    3a9e:	e9c3 0000 	strd	r0, r0, [r3]
}
    3aa2:	bd10      	pop	{r4, pc}

00003aa4 <clkstarted_handle>:
{
    3aa4:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
    3aa6:	6884      	ldr	r4, [r0, #8]
{
    3aa8:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
    3aaa:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    3aac:	b12b      	cbz	r3, 3aba <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3aae:	6861      	ldr	r1, [r4, #4]
    3ab0:	681a      	ldr	r2, [r3, #0]
    3ab2:	428b      	cmp	r3, r1
	list->head = node;
    3ab4:	6022      	str	r2, [r4, #0]
	list->tail = node;
    3ab6:	bf08      	it	eq
    3ab8:	6062      	streq	r2, [r4, #4]
	data->started = true;
    3aba:	2201      	movs	r2, #1
    3abc:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
    3abe:	b903      	cbnz	r3, 3ac2 <clkstarted_handle+0x1e>
}
    3ac0:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
    3ac2:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    3ac6:	4628      	mov	r0, r5
    3ac8:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
    3aca:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
    3acc:	2b00      	cmp	r3, #0
    3ace:	d0f7      	beq.n	3ac0 <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3ad0:	6861      	ldr	r1, [r4, #4]
    3ad2:	681a      	ldr	r2, [r3, #0]
    3ad4:	428b      	cmp	r3, r1
	list->head = node;
    3ad6:	6022      	str	r2, [r4, #0]
	list->tail = node;
    3ad8:	bf08      	it	eq
    3ada:	6062      	streq	r2, [r4, #4]
    3adc:	e7ef      	b.n	3abe <clkstarted_handle+0x1a>

00003ade <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    3ade:	4770      	bx	lr

00003ae0 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    3ae0:	4770      	bx	lr

00003ae2 <spm_secure_services_init>:
	mbedtls_platform_context platform_ctx = {0};
    3ae2:	2300      	movs	r3, #0
{
    3ae4:	b507      	push	{r0, r1, r2, lr}
	err = mbedtls_platform_setup(&platform_ctx);
    3ae6:	a801      	add	r0, sp, #4
	mbedtls_platform_context platform_ctx = {0};
    3ae8:	f88d 3004 	strb.w	r3, [sp, #4]
	err = mbedtls_platform_setup(&platform_ctx);
    3aec:	f7fe ff6e 	bl	29cc <mbedtls_platform_setup>
}
    3af0:	b003      	add	sp, #12
    3af2:	f85d fb04 	ldr.w	pc, [sp], #4

00003af6 <__acle_se_spm_request_random_number>:
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    3af6:	2990      	cmp	r1, #144	; 0x90
{
    3af8:	b508      	push	{r3, lr}
    3afa:	4613      	mov	r3, r2
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    3afc:	d139      	bne.n	3b72 <__acle_se_spm_request_random_number+0x7c>
	err = mbedtls_hardware_poll(NULL, output, len, olen);
    3afe:	460a      	mov	r2, r1
    3b00:	4601      	mov	r1, r0
    3b02:	2000      	movs	r0, #0
    3b04:	f7fe ff6e 	bl	29e4 <mbedtls_hardware_poll>
}
    3b08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3b0c:	4671      	mov	r1, lr
    3b0e:	4672      	mov	r2, lr
    3b10:	4673      	mov	r3, lr
    3b12:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    3b16:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    3b1a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    3b1e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    3b22:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    3b26:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    3b2a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    3b2e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    3b32:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    3b36:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    3b3a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    3b3e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    3b42:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    3b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    3b4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3b4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    3b52:	f38e 8c00 	msr	CPSR_fs, lr
    3b56:	b410      	push	{r4}
    3b58:	eef1 ca10 	vmrs	ip, fpscr
    3b5c:	f64f 7460 	movw	r4, #65376	; 0xff60
    3b60:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    3b64:	ea0c 0c04 	and.w	ip, ip, r4
    3b68:	eee1 ca10 	vmsr	fpscr, ip
    3b6c:	bc10      	pop	{r4}
    3b6e:	46f4      	mov	ip, lr
    3b70:	4774      	bxns	lr
		return -EINVAL;
    3b72:	f06f 0015 	mvn.w	r0, #21
    3b76:	e7c7      	b.n	3b08 <__acle_se_spm_request_random_number+0x12>

00003b78 <abort_function>:
	while(1);
    3b78:	e7fe      	b.n	3b78 <abort_function>

00003b7a <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
    3b7a:	f7fd bab3 	b.w	10e4 <z_arm_bus_fault>

00003b7e <irq_target_state_set>:
 *
 * @return N/A
 */
void irq_target_state_set(unsigned int irq, int secure_state)
{
	if (secure_state) {
    3b7e:	b243      	sxtb	r3, r0
    3b80:	b1a9      	cbz	r1, 3bae <irq_target_state_set+0x30>
  if ((int32_t)(IRQn) >= 0)
    3b82:	2b00      	cmp	r3, #0
    3b84:	db12      	blt.n	3bac <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    3b86:	2101      	movs	r1, #1
    3b88:	095b      	lsrs	r3, r3, #5
    3b8a:	009b      	lsls	r3, r3, #2
    3b8c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3b90:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3b94:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
    3b98:	f000 001f 	and.w	r0, r0, #31
    3b9c:	fa01 f000 	lsl.w	r0, r1, r0
    3ba0:	ea22 0200 	bic.w	r2, r2, r0
    3ba4:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    3ba8:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
		/* Set target state to Non-Secure */
		if (NVIC_SetTargetState(irq) != 1) {
			__ASSERT(0, "NVIC SetTargetState error");
		}
	}
}
    3bac:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    3bae:	2b00      	cmp	r3, #0
    3bb0:	dbfc      	blt.n	3bac <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    3bb2:	2201      	movs	r2, #1
    3bb4:	095b      	lsrs	r3, r3, #5
    3bb6:	009b      	lsls	r3, r3, #2
    3bb8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3bbc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3bc0:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    3bc4:	f000 001f 	and.w	r0, r0, #31
    3bc8:	fa02 f000 	lsl.w	r0, r2, r0
    3bcc:	4308      	orrs	r0, r1
    3bce:	f8c3 0280 	str.w	r0, [r3, #640]	; 0x280
    3bd2:	e7e9      	b.n	3ba8 <irq_target_state_set+0x2a>

00003bd4 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3bd4:	f000 b8f9 	b.w	3dca <z_fatal_error>

00003bd8 <z_do_kernel_oops>:
}

void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    3bd8:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    3bda:	6800      	ldr	r0, [r0, #0]
    3bdc:	f000 b8f5 	b.w	3dca <z_fatal_error>

00003be0 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    3be0:	b508      	push	{r3, lr}
	handler();
    3be2:	f7fd fa91 	bl	1108 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
    3be6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
    3bea:	f7fd ba27 	b.w	103c <z_arm_exc_exit>

00003bee <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    3bee:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    3bf0:	2100      	movs	r1, #0
    3bf2:	a801      	add	r0, sp, #4
    3bf4:	f7fd fe02 	bl	17fc <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    3bf8:	b003      	add	sp, #12
    3bfa:	f85d fb04 	ldr.w	pc, [sp], #4

00003bfe <mpu_configure_region>:
{
    3bfe:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
    3c00:	680b      	ldr	r3, [r1, #0]
{
    3c02:	b085      	sub	sp, #20
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    3c04:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    3c06:	f89d 2008 	ldrb.w	r2, [sp, #8]
    3c0a:	890d      	ldrh	r5, [r1, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    3c0c:	3c01      	subs	r4, #1
	region_conf.base = new_region->start;
    3c0e:	9300      	str	r3, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
    3c10:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    3c12:	f023 031f 	bic.w	r3, r3, #31
    3c16:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    3c18:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    3c1c:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    3c20:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    3c24:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
    3c26:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    3c2a:	9303      	str	r3, [sp, #12]
    3c2c:	4604      	mov	r4, r0
    3c2e:	d805      	bhi.n	3c3c <mpu_configure_region+0x3e>
	region_init(index, region_conf);
    3c30:	4669      	mov	r1, sp
    3c32:	f7fd fc9b 	bl	156c <region_init>
}
    3c36:	4620      	mov	r0, r4
    3c38:	b005      	add	sp, #20
    3c3a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    3c3c:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
    3c40:	e7f9      	b.n	3c36 <mpu_configure_region+0x38>

00003c42 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    3c42:	3801      	subs	r0, #1
    3c44:	3901      	subs	r1, #1
    3c46:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    3c4a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    3c4e:	4293      	cmp	r3, r2
    3c50:	d101      	bne.n	3c56 <strcmp+0x14>
    3c52:	2b00      	cmp	r3, #0
    3c54:	d1f7      	bne.n	3c46 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    3c56:	1a98      	subs	r0, r3, r2
    3c58:	4770      	bx	lr

00003c5a <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    3c5a:	1a43      	subs	r3, r0, r1
    3c5c:	4293      	cmp	r3, r2
{
    3c5e:	b510      	push	{r4, lr}
    3c60:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    3c64:	d308      	bcc.n	3c78 <memmove+0x1e>
	char *dest = d;
    3c66:	4602      	mov	r2, r0
    3c68:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    3c6a:	429a      	cmp	r2, r3
    3c6c:	d00b      	beq.n	3c86 <memmove+0x2c>
			*dest = *src;
    3c6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    3c72:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    3c76:	e7f8      	b.n	3c6a <memmove+0x10>
    3c78:	440a      	add	r2, r1
			dest[n] = src[n];
    3c7a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    3c7e:	428a      	cmp	r2, r1
			dest[n] = src[n];
    3c80:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    3c84:	d1f9      	bne.n	3c7a <memmove+0x20>
		}
	}

	return d;
}
    3c86:	bd10      	pop	{r4, pc}

00003c88 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    3c88:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    3c8a:	ea81 0400 	eor.w	r4, r1, r0
    3c8e:	07a5      	lsls	r5, r4, #30
    3c90:	4603      	mov	r3, r0
    3c92:	d00b      	beq.n	3cac <memcpy+0x24>
    3c94:	3b01      	subs	r3, #1
    3c96:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    3c98:	4291      	cmp	r1, r2
    3c9a:	d11a      	bne.n	3cd2 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    3c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    3c9e:	2a00      	cmp	r2, #0
    3ca0:	d0fc      	beq.n	3c9c <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    3ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    3ca6:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    3ca8:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    3cac:	079c      	lsls	r4, r3, #30
    3cae:	d1f6      	bne.n	3c9e <memcpy+0x16>
    3cb0:	0895      	lsrs	r5, r2, #2
    3cb2:	00ac      	lsls	r4, r5, #2
    3cb4:	1f1e      	subs	r6, r3, #4
    3cb6:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    3cb8:	42b9      	cmp	r1, r7
    3cba:	d105      	bne.n	3cc8 <memcpy+0x40>
    3cbc:	f06f 0603 	mvn.w	r6, #3
    3cc0:	4423      	add	r3, r4
    3cc2:	fb06 2205 	mla	r2, r6, r5, r2
    3cc6:	e7e5      	b.n	3c94 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    3cc8:	f851 cb04 	ldr.w	ip, [r1], #4
    3ccc:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
    3cd0:	e7f2      	b.n	3cb8 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
    3cd2:	f811 4b01 	ldrb.w	r4, [r1], #1
    3cd6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    3cda:	e7dd      	b.n	3c98 <memcpy+0x10>

00003cdc <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    3cdc:	4603      	mov	r3, r0
{
    3cde:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    3ce0:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    3ce2:	079c      	lsls	r4, r3, #30
    3ce4:	d110      	bne.n	3d08 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    3ce6:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    3cea:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    3cee:	0894      	lsrs	r4, r2, #2
    3cf0:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    3cf4:	42b3      	cmp	r3, r6
    3cf6:	d10d      	bne.n	3d14 <memset+0x38>
    3cf8:	f06f 0503 	mvn.w	r5, #3
    3cfc:	fb05 2404 	mla	r4, r5, r4, r2
    3d00:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    3d02:	42a3      	cmp	r3, r4
    3d04:	d109      	bne.n	3d1a <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    3d06:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    3d08:	2a00      	cmp	r2, #0
    3d0a:	d0fc      	beq.n	3d06 <memset+0x2a>
		*(d_byte++) = c_byte;
    3d0c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    3d10:	3a01      	subs	r2, #1
    3d12:	e7e6      	b.n	3ce2 <memset+0x6>
		*(d_word++) = c_word;
    3d14:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    3d18:	e7ec      	b.n	3cf4 <memset+0x18>
		*(d_byte++) = c_byte;
    3d1a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    3d1e:	e7f0      	b.n	3d02 <memset+0x26>

00003d20 <_stdout_hook_default>:
}
    3d20:	f04f 30ff 	mov.w	r0, #4294967295
    3d24:	4770      	bx	lr

00003d26 <uarte_nrfx_config_get>:
{
    3d26:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    3d28:	6882      	ldr	r2, [r0, #8]
    3d2a:	e892 0003 	ldmia.w	r2, {r0, r1}
    3d2e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    3d32:	2000      	movs	r0, #0
    3d34:	4770      	bx	lr

00003d36 <uarte_nrfx_err_check>:
	return dev->config->config_info;
    3d36:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
    3d38:	689b      	ldr	r3, [r3, #8]
    3d3a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3d3c:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    3d40:	b118      	cbz	r0, 3d4a <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    3d42:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    3d46:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    3d4a:	4770      	bx	lr

00003d4c <uarte_nrfx_poll_in>:
	return dev->config->config_info;
    3d4c:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    3d4e:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
    3d50:	689b      	ldr	r3, [r3, #8]
    3d52:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3d54:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    3d58:	b138      	cbz	r0, 3d6a <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
    3d5a:	7a12      	ldrb	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d5c:	2000      	movs	r0, #0
    3d5e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d60:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d62:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d66:	601a      	str	r2, [r3, #0]
	return 0;
    3d68:	4770      	bx	lr
		return -1;
    3d6a:	f04f 30ff 	mov.w	r0, #4294967295
}
    3d6e:	4770      	bx	lr

00003d70 <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d70:	2200      	movs	r2, #0
	return dev->config->config_info;
    3d72:	6803      	ldr	r3, [r0, #0]
{
    3d74:	b082      	sub	sp, #8
	return config->uarte_regs;
    3d76:	689b      	ldr	r3, [r3, #8]
{
    3d78:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
    3d7c:	681b      	ldr	r3, [r3, #0]
    3d7e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3d82:	f10d 0207 	add.w	r2, sp, #7
    3d86:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3d8a:	2201      	movs	r2, #1
    3d8c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d90:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3d92:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    3d96:	2900      	cmp	r1, #0
    3d98:	d0fb      	beq.n	3d92 <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d9a:	60da      	str	r2, [r3, #12]
}
    3d9c:	b002      	add	sp, #8
    3d9e:	4770      	bx	lr

00003da0 <hw_cc310_init>:
#if CONFIG_HW_CC310

#include "nrf_cc310_platform.h"

static int hw_cc310_init(struct device *dev)
{
    3da0:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc310_platform_abort_init();
    3da2:	f7fd f8b5 	bl	f10 <nrf_cc310_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc310_platform_mutex_init();
    3da6:	f7fd f933 	bl	1010 <nrf_cc310_platform_mutex_init>
	res = nrf_cc310_platform_init();
#else
	res = nrf_cc310_platform_init_no_rng();
#endif
	return res;
}
    3daa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc310_platform_init_no_rng();
    3dae:	f7fe bed1 	b.w	2b54 <nrf_cc310_platform_init_no_rng>

00003db2 <z_arch_system_halt>:
	__asm__ volatile(
    3db2:	f04f 0220 	mov.w	r2, #32
    3db6:	f3ef 8311 	mrs	r3, BASEPRI
    3dba:	f382 8811 	msr	BASEPRI, r2
    3dbe:	f3bf 8f6f 	isb	sy
	 */

	(void)z_arch_irq_lock();
	for (;;) {
		/* Spin endlessly */
	}
    3dc2:	e7fe      	b.n	3dc2 <z_arch_system_halt+0x10>

00003dc4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    3dc4:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	z_arch_system_halt(reason);
    3dc6:	f7ff fff4 	bl	3db2 <z_arch_system_halt>

00003dca <z_fatal_error>:
	z_arch_system_halt(reason);
}
/* LCOV_EXCL_STOP */

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3dca:	b570      	push	{r4, r5, r6, lr}
    3dcc:	4605      	mov	r5, r0
    3dce:	460e      	mov	r6, r1
	return z_impl_k_current_get();
    3dd0:	f7fe fb7a 	bl	24c8 <z_impl_k_current_get>
	 */

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    3dd4:	4631      	mov	r1, r6
    3dd6:	4604      	mov	r4, r0
    3dd8:	4628      	mov	r0, r5
    3dda:	f7ff fff3 	bl	3dc4 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
    3dde:	4620      	mov	r0, r4
		/* FIXME: #17656 */
		__ASSERT(!k_is_in_isr(),
			 "Attempted to recover from a fatal error in ISR");
	}
	k_thread_abort(thread);
}
    3de0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3de4:	f7fd bb72 	b.w	14cc <z_impl_k_thread_abort>

00003de8 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    3de8:	f7ff be7a 	b.w	3ae0 <z_clock_idle_exit>

00003dec <k_mem_slab_init>:
{
    3dec:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    3dee:	2400      	movs	r4, #0
	slab->block_size = block_size;
    3df0:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
    3df4:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
    3df8:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    3dfa:	42a3      	cmp	r3, r4
    3dfc:	d102      	bne.n	3e04 <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
    3dfe:	e9c0 0000 	strd	r0, r0, [r0]
}
    3e02:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    3e04:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    3e06:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    3e08:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    3e0a:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    3e0c:	4411      	add	r1, r2
    3e0e:	e7f4      	b.n	3dfa <k_mem_slab_init+0xe>

00003e10 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
    3e10:	2300      	movs	r3, #0
    3e12:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
    3e16:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    3e1a:	4770      	bx	lr

00003e1c <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3e1c:	7b43      	ldrb	r3, [r0, #13]
    3e1e:	06db      	lsls	r3, r3, #27
    3e20:	bf03      	ittte	eq
    3e22:	6980      	ldreq	r0, [r0, #24]
    3e24:	fab0 f080 	clzeq	r0, r0
    3e28:	0940      	lsreq	r0, r0, #5
    3e2a:	2000      	movne	r0, #0
}
    3e2c:	4770      	bx	lr

00003e2e <z_unpend_thread_no_timeout>:
{
    3e2e:	b538      	push	{r3, r4, r5, lr}
    3e30:	4604      	mov	r4, r0
    3e32:	f04f 0320 	mov.w	r3, #32
    3e36:	f3ef 8511 	mrs	r5, BASEPRI
    3e3a:	f383 8811 	msr	BASEPRI, r3
    3e3e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3e42:	4601      	mov	r1, r0
    3e44:	6880      	ldr	r0, [r0, #8]
    3e46:	f7fe f977 	bl	2138 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3e4a:	7b63      	ldrb	r3, [r4, #13]
    3e4c:	f023 0302 	bic.w	r3, r3, #2
    3e50:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    3e52:	f385 8811 	msr	BASEPRI, r5
    3e56:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    3e5a:	2300      	movs	r3, #0
    3e5c:	60a3      	str	r3, [r4, #8]
}
    3e5e:	bd38      	pop	{r3, r4, r5, pc}

00003e60 <z_reschedule>:
{
    3e60:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
    3e62:	b939      	cbnz	r1, 3e74 <z_reschedule+0x14>
    3e64:	f7fe f900 	bl	2068 <resched.part.15>
	if (resched(key.key)) {
    3e68:	b120      	cbz	r0, 3e74 <z_reschedule+0x14>
}
    3e6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3e6e:	4608      	mov	r0, r1
    3e70:	f7fd b96e 	b.w	1150 <z_arch_swap>
    3e74:	f381 8811 	msr	BASEPRI, r1
    3e78:	f3bf 8f6f 	isb	sy
    3e7c:	bd08      	pop	{r3, pc}

00003e7e <z_reschedule_irqlock>:
{
    3e7e:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
    3e80:	4602      	mov	r2, r0
    3e82:	b938      	cbnz	r0, 3e94 <z_reschedule_irqlock+0x16>
    3e84:	f7fe f8f0 	bl	2068 <resched.part.15>
	if (resched(key)) {
    3e88:	b120      	cbz	r0, 3e94 <z_reschedule_irqlock+0x16>
}
    3e8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3e8e:	4610      	mov	r0, r2
    3e90:	f7fd b95e 	b.w	1150 <z_arch_swap>
    3e94:	f382 8811 	msr	BASEPRI, r2
    3e98:	f3bf 8f6f 	isb	sy
    3e9c:	bd08      	pop	{r3, pc}

00003e9e <z_reschedule_unlocked>:
	__asm__ volatile(
    3e9e:	f04f 0320 	mov.w	r3, #32
    3ea2:	f3ef 8011 	mrs	r0, BASEPRI
    3ea6:	f383 8811 	msr	BASEPRI, r3
    3eaa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
    3eae:	f7ff bfe6 	b.w	3e7e <z_reschedule_irqlock>

00003eb2 <z_priq_dumb_best>:
	return list->head == list;
    3eb2:	6803      	ldr	r3, [r0, #0]
}
    3eb4:	4298      	cmp	r0, r3
    3eb6:	bf14      	ite	ne
    3eb8:	4618      	movne	r0, r3
    3eba:	2000      	moveq	r0, #0
    3ebc:	4770      	bx	lr

00003ebe <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
    3ebe:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    3ec2:	b570      	push	{r4, r5, r6, lr}
    3ec4:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    3ec6:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    3eca:	b1cb      	cbz	r3, 3f00 <z_thread_timeout+0x42>
    3ecc:	f04f 0320 	mov.w	r3, #32
    3ed0:	f3ef 8611 	mrs	r6, BASEPRI
    3ed4:	f383 8811 	msr	BASEPRI, r3
    3ed8:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3edc:	4629      	mov	r1, r5
    3ede:	f850 0c10 	ldr.w	r0, [r0, #-16]
    3ee2:	f7fe f929 	bl	2138 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3ee6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    3eea:	f023 0302 	bic.w	r3, r3, #2
    3eee:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    3ef2:	f386 8811 	msr	BASEPRI, r6
    3ef6:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    3efa:	2300      	movs	r3, #0
    3efc:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    3f00:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    3f04:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    3f06:	f023 0314 	bic.w	r3, r3, #20
    3f0a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    3f0e:	f7ff ff85 	bl	3e1c <z_is_thread_ready>
    3f12:	b120      	cbz	r0, 3f1e <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
    3f14:	4628      	mov	r0, r5
}
    3f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3f1a:	f7fe b95d 	b.w	21d8 <z_add_thread_to_ready_q>
    3f1e:	bd70      	pop	{r4, r5, r6, pc}

00003f20 <z_unpend_first_thread>:
{
    3f20:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3f22:	f04f 0320 	mov.w	r3, #32
    3f26:	f3ef 8211 	mrs	r2, BASEPRI
    3f2a:	f383 8811 	msr	BASEPRI, r3
    3f2e:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    3f32:	f7ff ffbe 	bl	3eb2 <z_priq_dumb_best>
    3f36:	4604      	mov	r4, r0
	__asm__ volatile(
    3f38:	f382 8811 	msr	BASEPRI, r2
    3f3c:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    3f40:	b1c8      	cbz	r0, 3f76 <z_unpend_first_thread+0x56>
	__asm__ volatile(
    3f42:	f04f 0320 	mov.w	r3, #32
    3f46:	f3ef 8511 	mrs	r5, BASEPRI
    3f4a:	f383 8811 	msr	BASEPRI, r3
    3f4e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3f52:	4601      	mov	r1, r0
    3f54:	6880      	ldr	r0, [r0, #8]
    3f56:	f7fe f8ef 	bl	2138 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3f5a:	7b63      	ldrb	r3, [r4, #13]
    3f5c:	f023 0302 	bic.w	r3, r3, #2
    3f60:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    3f62:	f385 8811 	msr	BASEPRI, r5
    3f66:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    3f6a:	2300      	movs	r3, #0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3f6c:	f104 0018 	add.w	r0, r4, #24
    3f70:	60a3      	str	r3, [r4, #8]
    3f72:	f000 f832 	bl	3fda <z_abort_timeout>
}
    3f76:	4620      	mov	r0, r4
    3f78:	bd38      	pop	{r3, r4, r5, pc}

00003f7a <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3f7a:	7b43      	ldrb	r3, [r0, #13]
    3f7c:	06db      	lsls	r3, r3, #27
    3f7e:	bf03      	ittte	eq
    3f80:	6980      	ldreq	r0, [r0, #24]
    3f82:	fab0 f080 	clzeq	r0, r0
    3f86:	0940      	lsreq	r0, r0, #5
    3f88:	2000      	movne	r0, #0
}
    3f8a:	4770      	bx	lr

00003f8c <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    3f8c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    3f8e:	b510      	push	{r4, lr}
    3f90:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    3f92:	b103      	cbz	r3, 3f96 <z_thread_single_abort+0xa>
		thread->fn_abort();
    3f94:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
    3f96:	4620      	mov	r0, r4
    3f98:	f7ff ffef 	bl	3f7a <z_is_thread_ready>
    3f9c:	b138      	cbz	r0, 3fae <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
    3f9e:	4620      	mov	r0, r4
    3fa0:	f7fe f9c8 	bl	2334 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
    3fa4:	7b63      	ldrb	r3, [r4, #13]
    3fa6:	f043 0308 	orr.w	r3, r3, #8
    3faa:	7363      	strb	r3, [r4, #13]
}
    3fac:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
    3fae:	7b63      	ldrb	r3, [r4, #13]
    3fb0:	079b      	lsls	r3, r3, #30
    3fb2:	d502      	bpl.n	3fba <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
    3fb4:	4620      	mov	r0, r4
    3fb6:	f7ff ff3a 	bl	3e2e <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
    3fba:	69a3      	ldr	r3, [r4, #24]
    3fbc:	2b00      	cmp	r3, #0
    3fbe:	d0f1      	beq.n	3fa4 <z_thread_single_abort+0x18>
    3fc0:	f104 0018 	add.w	r0, r4, #24
    3fc4:	f000 f809 	bl	3fda <z_abort_timeout>
    3fc8:	e7ec      	b.n	3fa4 <z_thread_single_abort+0x18>

00003fca <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    3fca:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
    3fcc:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    3fce:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    3fd0:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    3fd2:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
    3fd4:	e9c0 3306 	strd	r3, r3, [r0, #24]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    3fd8:	4770      	bx	lr

00003fda <z_abort_timeout>:
{
    3fda:	b510      	push	{r4, lr}
	__asm__ volatile(
    3fdc:	f04f 0220 	mov.w	r2, #32
    3fe0:	f3ef 8411 	mrs	r4, BASEPRI
    3fe4:	f382 8811 	msr	BASEPRI, r2
    3fe8:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    3fec:	6803      	ldr	r3, [r0, #0]
    3fee:	b13b      	cbz	r3, 4000 <z_abort_timeout+0x26>
			remove_timeout(to);
    3ff0:	f7fe fb10 	bl	2614 <remove_timeout>
			ret = 0;
    3ff4:	2000      	movs	r0, #0
	__asm__ volatile(
    3ff6:	f384 8811 	msr	BASEPRI, r4
    3ffa:	f3bf 8f6f 	isb	sy
}
    3ffe:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    4000:	f06f 0015 	mvn.w	r0, #21
    4004:	e7f7      	b.n	3ff6 <z_abort_timeout+0x1c>

00004006 <z_get_next_timeout_expiry>:
{
    4006:	b510      	push	{r4, lr}
	__asm__ volatile(
    4008:	f04f 0320 	mov.w	r3, #32
    400c:	f3ef 8411 	mrs	r4, BASEPRI
    4010:	f383 8811 	msr	BASEPRI, r3
    4014:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    4018:	f7fe fb10 	bl	263c <next_timeout>
	__asm__ volatile(
    401c:	f384 8811 	msr	BASEPRI, r4
    4020:	f3bf 8f6f 	isb	sy
}
    4024:	bd10      	pop	{r4, pc}

00004026 <z_set_timeout_expiry>:
{
    4026:	b570      	push	{r4, r5, r6, lr}
    4028:	4604      	mov	r4, r0
    402a:	460e      	mov	r6, r1
	__asm__ volatile(
    402c:	f04f 0320 	mov.w	r3, #32
    4030:	f3ef 8511 	mrs	r5, BASEPRI
    4034:	f383 8811 	msr	BASEPRI, r3
    4038:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    403c:	f7fe fafe 	bl	263c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    4040:	2801      	cmp	r0, #1
    4042:	dd05      	ble.n	4050 <z_set_timeout_expiry+0x2a>
    4044:	42a0      	cmp	r0, r4
    4046:	dd03      	ble.n	4050 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    4048:	4631      	mov	r1, r6
    404a:	4620      	mov	r0, r4
    404c:	f7fc fc74 	bl	938 <z_clock_set_timeout>
	__asm__ volatile(
    4050:	f385 8811 	msr	BASEPRI, r5
    4054:	f3bf 8f6f 	isb	sy
}
    4058:	bd70      	pop	{r4, r5, r6, pc}

0000405a <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    405a:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

00004b60 <spm_request_read-0x3480>:
	...

00007fe0 <spm_request_read>:
    7fe0:	e97f e97f 	sg
    7fe4:	f7f8 bebc 	b.w	d60 <__acle_se_spm_request_read>

00007fe8 <spm_firmware_info>:
    7fe8:	e97f e97f 	sg
    7fec:	f7f8 bf10 	b.w	e10 <__acle_se_spm_firmware_info>

00007ff0 <spm_request_random_number>:
    7ff0:	e97f e97f 	sg
    7ff4:	f7fb bd7f 	b.w	3af6 <__acle_se_spm_request_random_number>
	...
