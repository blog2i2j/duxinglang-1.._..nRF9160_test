
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00018200 <_vector_table>:
   18200:	20027c88 	.word	0x20027c88
   18204:	0001beb5 	.word	0x0001beb5
   18208:	00031a1d 	.word	0x00031a1d
   1820c:	0001baf1 	.word	0x0001baf1
   18210:	0001baf1 	.word	0x0001baf1
   18214:	0001baf1 	.word	0x0001baf1
   18218:	0001baf1 	.word	0x0001baf1
   1821c:	0001baf1 	.word	0x0001baf1
   18220:	0001baf1 	.word	0x0001baf1
   18224:	0001baf1 	.word	0x0001baf1
   18228:	0001baf1 	.word	0x0001baf1
   1822c:	0001bab9 	.word	0x0001bab9
   18230:	0001baf1 	.word	0x0001baf1
   18234:	0001baf1 	.word	0x0001baf1
   18238:	0001b9f5 	.word	0x0001b9f5
   1823c:	0001b649 	.word	0x0001b649

00018240 <_irq_vector_table>:
   18240:	0001bb1d 0001bb1d 0001bb1d 0001bb1d     ................
   18250:	0001bb1d 0001bb1d 0001bb1d 0001bb1d     ................
   18260:	0001bb1d 0001bb1d 0001bb1d 0001bb1d     ................
   18270:	0001bb1d 0001bb1d 0001bb1d 0001bb1d     ................
   18280:	0001bb1d 0001bb1d 0001bb1d 0001bb1d     ................
   18290:	0001bb1d 0001bb1d 0001bb1d 0001bb1d     ................
   182a0:	0001bb1d 0001bb1d 0001bb1d 0001bb1d     ................
   182b0:	0001d52d 00031df1 0001bb1d 0001bb1d     -...............
   182c0:	0001bb1d 0001bb1d 0001bb1d 0001bb1d     ................
   182d0:	0001bb1d 0001bb1d 0001bb1d 0001bb1d     ................
   182e0:	0001bb1d 0001bb1d 00031e13 0001bb1d     ................
   182f0:	0001bb1d 0001bb1d 0001bb1d 0001bb1d     ................
   18300:	0001bb1d 0001bb1d 0001bb1d 0001bb1d     ................
   18310:	0001bb1d 0001bb1d 0001bb1d 0001bb1d     ................
   18320:	0001bb1d 0001bb1d 0001bb1d 0001bb1d     ................
   18330:	0001bb1d 0001bb1d 0001bb1d 0001bb1d     ................
   18340:	0001bb1d                                ....

00018344 <_vector_end>:
	...

00018400 <m_firmware_info>:
   18400:	281ee6de 8fcebb4c 00005b01 0001f0b4     ...(L....[......
   18410:	00000001 00018200 20028dc8 0001e005     ........... ....

Disassembly of section _TEXT_SECTION_NAME_2:

00018420 <__aeabi_drsub>:
   18420:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   18424:	e002      	b.n	1842c <__adddf3>
   18426:	bf00      	nop

00018428 <__aeabi_dsub>:
   18428:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001842c <__adddf3>:
   1842c:	b530      	push	{r4, r5, lr}
   1842e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   18432:	ea4f 0543 	mov.w	r5, r3, lsl #1
   18436:	ea94 0f05 	teq	r4, r5
   1843a:	bf08      	it	eq
   1843c:	ea90 0f02 	teqeq	r0, r2
   18440:	bf1f      	itttt	ne
   18442:	ea54 0c00 	orrsne.w	ip, r4, r0
   18446:	ea55 0c02 	orrsne.w	ip, r5, r2
   1844a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1844e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   18452:	f000 80e2 	beq.w	1861a <__adddf3+0x1ee>
   18456:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1845a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1845e:	bfb8      	it	lt
   18460:	426d      	neglt	r5, r5
   18462:	dd0c      	ble.n	1847e <__adddf3+0x52>
   18464:	442c      	add	r4, r5
   18466:	ea80 0202 	eor.w	r2, r0, r2
   1846a:	ea81 0303 	eor.w	r3, r1, r3
   1846e:	ea82 0000 	eor.w	r0, r2, r0
   18472:	ea83 0101 	eor.w	r1, r3, r1
   18476:	ea80 0202 	eor.w	r2, r0, r2
   1847a:	ea81 0303 	eor.w	r3, r1, r3
   1847e:	2d36      	cmp	r5, #54	; 0x36
   18480:	bf88      	it	hi
   18482:	bd30      	pophi	{r4, r5, pc}
   18484:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18488:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1848c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   18490:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   18494:	d002      	beq.n	1849c <__adddf3+0x70>
   18496:	4240      	negs	r0, r0
   18498:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1849c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   184a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   184a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   184a8:	d002      	beq.n	184b0 <__adddf3+0x84>
   184aa:	4252      	negs	r2, r2
   184ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   184b0:	ea94 0f05 	teq	r4, r5
   184b4:	f000 80a7 	beq.w	18606 <__adddf3+0x1da>
   184b8:	f1a4 0401 	sub.w	r4, r4, #1
   184bc:	f1d5 0e20 	rsbs	lr, r5, #32
   184c0:	db0d      	blt.n	184de <__adddf3+0xb2>
   184c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   184c6:	fa22 f205 	lsr.w	r2, r2, r5
   184ca:	1880      	adds	r0, r0, r2
   184cc:	f141 0100 	adc.w	r1, r1, #0
   184d0:	fa03 f20e 	lsl.w	r2, r3, lr
   184d4:	1880      	adds	r0, r0, r2
   184d6:	fa43 f305 	asr.w	r3, r3, r5
   184da:	4159      	adcs	r1, r3
   184dc:	e00e      	b.n	184fc <__adddf3+0xd0>
   184de:	f1a5 0520 	sub.w	r5, r5, #32
   184e2:	f10e 0e20 	add.w	lr, lr, #32
   184e6:	2a01      	cmp	r2, #1
   184e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   184ec:	bf28      	it	cs
   184ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   184f2:	fa43 f305 	asr.w	r3, r3, r5
   184f6:	18c0      	adds	r0, r0, r3
   184f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   184fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18500:	d507      	bpl.n	18512 <__adddf3+0xe6>
   18502:	f04f 0e00 	mov.w	lr, #0
   18506:	f1dc 0c00 	rsbs	ip, ip, #0
   1850a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1850e:	eb6e 0101 	sbc.w	r1, lr, r1
   18512:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   18516:	d31b      	bcc.n	18550 <__adddf3+0x124>
   18518:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1851c:	d30c      	bcc.n	18538 <__adddf3+0x10c>
   1851e:	0849      	lsrs	r1, r1, #1
   18520:	ea5f 0030 	movs.w	r0, r0, rrx
   18524:	ea4f 0c3c 	mov.w	ip, ip, rrx
   18528:	f104 0401 	add.w	r4, r4, #1
   1852c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   18530:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   18534:	f080 809a 	bcs.w	1866c <__adddf3+0x240>
   18538:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1853c:	bf08      	it	eq
   1853e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   18542:	f150 0000 	adcs.w	r0, r0, #0
   18546:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1854a:	ea41 0105 	orr.w	r1, r1, r5
   1854e:	bd30      	pop	{r4, r5, pc}
   18550:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   18554:	4140      	adcs	r0, r0
   18556:	eb41 0101 	adc.w	r1, r1, r1
   1855a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1855e:	f1a4 0401 	sub.w	r4, r4, #1
   18562:	d1e9      	bne.n	18538 <__adddf3+0x10c>
   18564:	f091 0f00 	teq	r1, #0
   18568:	bf04      	itt	eq
   1856a:	4601      	moveq	r1, r0
   1856c:	2000      	moveq	r0, #0
   1856e:	fab1 f381 	clz	r3, r1
   18572:	bf08      	it	eq
   18574:	3320      	addeq	r3, #32
   18576:	f1a3 030b 	sub.w	r3, r3, #11
   1857a:	f1b3 0220 	subs.w	r2, r3, #32
   1857e:	da0c      	bge.n	1859a <__adddf3+0x16e>
   18580:	320c      	adds	r2, #12
   18582:	dd08      	ble.n	18596 <__adddf3+0x16a>
   18584:	f102 0c14 	add.w	ip, r2, #20
   18588:	f1c2 020c 	rsb	r2, r2, #12
   1858c:	fa01 f00c 	lsl.w	r0, r1, ip
   18590:	fa21 f102 	lsr.w	r1, r1, r2
   18594:	e00c      	b.n	185b0 <__adddf3+0x184>
   18596:	f102 0214 	add.w	r2, r2, #20
   1859a:	bfd8      	it	le
   1859c:	f1c2 0c20 	rsble	ip, r2, #32
   185a0:	fa01 f102 	lsl.w	r1, r1, r2
   185a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   185a8:	bfdc      	itt	le
   185aa:	ea41 010c 	orrle.w	r1, r1, ip
   185ae:	4090      	lslle	r0, r2
   185b0:	1ae4      	subs	r4, r4, r3
   185b2:	bfa2      	ittt	ge
   185b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   185b8:	4329      	orrge	r1, r5
   185ba:	bd30      	popge	{r4, r5, pc}
   185bc:	ea6f 0404 	mvn.w	r4, r4
   185c0:	3c1f      	subs	r4, #31
   185c2:	da1c      	bge.n	185fe <__adddf3+0x1d2>
   185c4:	340c      	adds	r4, #12
   185c6:	dc0e      	bgt.n	185e6 <__adddf3+0x1ba>
   185c8:	f104 0414 	add.w	r4, r4, #20
   185cc:	f1c4 0220 	rsb	r2, r4, #32
   185d0:	fa20 f004 	lsr.w	r0, r0, r4
   185d4:	fa01 f302 	lsl.w	r3, r1, r2
   185d8:	ea40 0003 	orr.w	r0, r0, r3
   185dc:	fa21 f304 	lsr.w	r3, r1, r4
   185e0:	ea45 0103 	orr.w	r1, r5, r3
   185e4:	bd30      	pop	{r4, r5, pc}
   185e6:	f1c4 040c 	rsb	r4, r4, #12
   185ea:	f1c4 0220 	rsb	r2, r4, #32
   185ee:	fa20 f002 	lsr.w	r0, r0, r2
   185f2:	fa01 f304 	lsl.w	r3, r1, r4
   185f6:	ea40 0003 	orr.w	r0, r0, r3
   185fa:	4629      	mov	r1, r5
   185fc:	bd30      	pop	{r4, r5, pc}
   185fe:	fa21 f004 	lsr.w	r0, r1, r4
   18602:	4629      	mov	r1, r5
   18604:	bd30      	pop	{r4, r5, pc}
   18606:	f094 0f00 	teq	r4, #0
   1860a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1860e:	bf06      	itte	eq
   18610:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   18614:	3401      	addeq	r4, #1
   18616:	3d01      	subne	r5, #1
   18618:	e74e      	b.n	184b8 <__adddf3+0x8c>
   1861a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1861e:	bf18      	it	ne
   18620:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   18624:	d029      	beq.n	1867a <__adddf3+0x24e>
   18626:	ea94 0f05 	teq	r4, r5
   1862a:	bf08      	it	eq
   1862c:	ea90 0f02 	teqeq	r0, r2
   18630:	d005      	beq.n	1863e <__adddf3+0x212>
   18632:	ea54 0c00 	orrs.w	ip, r4, r0
   18636:	bf04      	itt	eq
   18638:	4619      	moveq	r1, r3
   1863a:	4610      	moveq	r0, r2
   1863c:	bd30      	pop	{r4, r5, pc}
   1863e:	ea91 0f03 	teq	r1, r3
   18642:	bf1e      	ittt	ne
   18644:	2100      	movne	r1, #0
   18646:	2000      	movne	r0, #0
   18648:	bd30      	popne	{r4, r5, pc}
   1864a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1864e:	d105      	bne.n	1865c <__adddf3+0x230>
   18650:	0040      	lsls	r0, r0, #1
   18652:	4149      	adcs	r1, r1
   18654:	bf28      	it	cs
   18656:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1865a:	bd30      	pop	{r4, r5, pc}
   1865c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   18660:	bf3c      	itt	cc
   18662:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   18666:	bd30      	popcc	{r4, r5, pc}
   18668:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1866c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   18670:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   18674:	f04f 0000 	mov.w	r0, #0
   18678:	bd30      	pop	{r4, r5, pc}
   1867a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1867e:	bf1a      	itte	ne
   18680:	4619      	movne	r1, r3
   18682:	4610      	movne	r0, r2
   18684:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   18688:	bf1c      	itt	ne
   1868a:	460b      	movne	r3, r1
   1868c:	4602      	movne	r2, r0
   1868e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18692:	bf06      	itte	eq
   18694:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   18698:	ea91 0f03 	teqeq	r1, r3
   1869c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   186a0:	bd30      	pop	{r4, r5, pc}
   186a2:	bf00      	nop

000186a4 <__aeabi_ui2d>:
   186a4:	f090 0f00 	teq	r0, #0
   186a8:	bf04      	itt	eq
   186aa:	2100      	moveq	r1, #0
   186ac:	4770      	bxeq	lr
   186ae:	b530      	push	{r4, r5, lr}
   186b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   186b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   186b8:	f04f 0500 	mov.w	r5, #0
   186bc:	f04f 0100 	mov.w	r1, #0
   186c0:	e750      	b.n	18564 <__adddf3+0x138>
   186c2:	bf00      	nop

000186c4 <__aeabi_i2d>:
   186c4:	f090 0f00 	teq	r0, #0
   186c8:	bf04      	itt	eq
   186ca:	2100      	moveq	r1, #0
   186cc:	4770      	bxeq	lr
   186ce:	b530      	push	{r4, r5, lr}
   186d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   186d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   186d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   186dc:	bf48      	it	mi
   186de:	4240      	negmi	r0, r0
   186e0:	f04f 0100 	mov.w	r1, #0
   186e4:	e73e      	b.n	18564 <__adddf3+0x138>
   186e6:	bf00      	nop

000186e8 <__aeabi_f2d>:
   186e8:	0042      	lsls	r2, r0, #1
   186ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   186ee:	ea4f 0131 	mov.w	r1, r1, rrx
   186f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   186f6:	bf1f      	itttt	ne
   186f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   186fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   18700:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   18704:	4770      	bxne	lr
   18706:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1870a:	bf08      	it	eq
   1870c:	4770      	bxeq	lr
   1870e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   18712:	bf04      	itt	eq
   18714:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   18718:	4770      	bxeq	lr
   1871a:	b530      	push	{r4, r5, lr}
   1871c:	f44f 7460 	mov.w	r4, #896	; 0x380
   18720:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   18728:	e71c      	b.n	18564 <__adddf3+0x138>
   1872a:	bf00      	nop

0001872c <__aeabi_ul2d>:
   1872c:	ea50 0201 	orrs.w	r2, r0, r1
   18730:	bf08      	it	eq
   18732:	4770      	bxeq	lr
   18734:	b530      	push	{r4, r5, lr}
   18736:	f04f 0500 	mov.w	r5, #0
   1873a:	e00a      	b.n	18752 <__aeabi_l2d+0x16>

0001873c <__aeabi_l2d>:
   1873c:	ea50 0201 	orrs.w	r2, r0, r1
   18740:	bf08      	it	eq
   18742:	4770      	bxeq	lr
   18744:	b530      	push	{r4, r5, lr}
   18746:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1874a:	d502      	bpl.n	18752 <__aeabi_l2d+0x16>
   1874c:	4240      	negs	r0, r0
   1874e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18752:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18756:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1875a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1875e:	f43f aed8 	beq.w	18512 <__adddf3+0xe6>
   18762:	f04f 0203 	mov.w	r2, #3
   18766:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1876a:	bf18      	it	ne
   1876c:	3203      	addne	r2, #3
   1876e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   18772:	bf18      	it	ne
   18774:	3203      	addne	r2, #3
   18776:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1877a:	f1c2 0320 	rsb	r3, r2, #32
   1877e:	fa00 fc03 	lsl.w	ip, r0, r3
   18782:	fa20 f002 	lsr.w	r0, r0, r2
   18786:	fa01 fe03 	lsl.w	lr, r1, r3
   1878a:	ea40 000e 	orr.w	r0, r0, lr
   1878e:	fa21 f102 	lsr.w	r1, r1, r2
   18792:	4414      	add	r4, r2
   18794:	e6bd      	b.n	18512 <__adddf3+0xe6>
   18796:	bf00      	nop

00018798 <__aeabi_ldivmod>:
   18798:	b97b      	cbnz	r3, 187ba <__aeabi_ldivmod+0x22>
   1879a:	b972      	cbnz	r2, 187ba <__aeabi_ldivmod+0x22>
   1879c:	2900      	cmp	r1, #0
   1879e:	bfbe      	ittt	lt
   187a0:	2000      	movlt	r0, #0
   187a2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   187a6:	e006      	blt.n	187b6 <__aeabi_ldivmod+0x1e>
   187a8:	bf08      	it	eq
   187aa:	2800      	cmpeq	r0, #0
   187ac:	bf1c      	itt	ne
   187ae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   187b2:	f04f 30ff 	movne.w	r0, #4294967295
   187b6:	f000 b9c7 	b.w	18b48 <__aeabi_idiv0>
   187ba:	f1ad 0c08 	sub.w	ip, sp, #8
   187be:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   187c2:	2900      	cmp	r1, #0
   187c4:	db09      	blt.n	187da <__aeabi_ldivmod+0x42>
   187c6:	2b00      	cmp	r3, #0
   187c8:	db1a      	blt.n	18800 <__aeabi_ldivmod+0x68>
   187ca:	f000 f84d 	bl	18868 <__udivmoddi4>
   187ce:	f8dd e004 	ldr.w	lr, [sp, #4]
   187d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   187d6:	b004      	add	sp, #16
   187d8:	4770      	bx	lr
   187da:	4240      	negs	r0, r0
   187dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   187e0:	2b00      	cmp	r3, #0
   187e2:	db1b      	blt.n	1881c <__aeabi_ldivmod+0x84>
   187e4:	f000 f840 	bl	18868 <__udivmoddi4>
   187e8:	f8dd e004 	ldr.w	lr, [sp, #4]
   187ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   187f0:	b004      	add	sp, #16
   187f2:	4240      	negs	r0, r0
   187f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   187f8:	4252      	negs	r2, r2
   187fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   187fe:	4770      	bx	lr
   18800:	4252      	negs	r2, r2
   18802:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18806:	f000 f82f 	bl	18868 <__udivmoddi4>
   1880a:	f8dd e004 	ldr.w	lr, [sp, #4]
   1880e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18812:	b004      	add	sp, #16
   18814:	4240      	negs	r0, r0
   18816:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1881a:	4770      	bx	lr
   1881c:	4252      	negs	r2, r2
   1881e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18822:	f000 f821 	bl	18868 <__udivmoddi4>
   18826:	f8dd e004 	ldr.w	lr, [sp, #4]
   1882a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1882e:	b004      	add	sp, #16
   18830:	4252      	negs	r2, r2
   18832:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18836:	4770      	bx	lr

00018838 <__aeabi_uldivmod>:
   18838:	b953      	cbnz	r3, 18850 <__aeabi_uldivmod+0x18>
   1883a:	b94a      	cbnz	r2, 18850 <__aeabi_uldivmod+0x18>
   1883c:	2900      	cmp	r1, #0
   1883e:	bf08      	it	eq
   18840:	2800      	cmpeq	r0, #0
   18842:	bf1c      	itt	ne
   18844:	f04f 31ff 	movne.w	r1, #4294967295
   18848:	f04f 30ff 	movne.w	r0, #4294967295
   1884c:	f000 b97c 	b.w	18b48 <__aeabi_idiv0>
   18850:	f1ad 0c08 	sub.w	ip, sp, #8
   18854:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   18858:	f000 f806 	bl	18868 <__udivmoddi4>
   1885c:	f8dd e004 	ldr.w	lr, [sp, #4]
   18860:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18864:	b004      	add	sp, #16
   18866:	4770      	bx	lr

00018868 <__udivmoddi4>:
   18868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1886c:	468c      	mov	ip, r1
   1886e:	9d08      	ldr	r5, [sp, #32]
   18870:	4604      	mov	r4, r0
   18872:	468a      	mov	sl, r1
   18874:	2b00      	cmp	r3, #0
   18876:	d14a      	bne.n	1890e <__udivmoddi4+0xa6>
   18878:	428a      	cmp	r2, r1
   1887a:	4617      	mov	r7, r2
   1887c:	d962      	bls.n	18944 <__udivmoddi4+0xdc>
   1887e:	fab2 f682 	clz	r6, r2
   18882:	b14e      	cbz	r6, 18898 <__udivmoddi4+0x30>
   18884:	f1c6 0e20 	rsb	lr, r6, #32
   18888:	fa01 f306 	lsl.w	r3, r1, r6
   1888c:	40b7      	lsls	r7, r6
   1888e:	40b4      	lsls	r4, r6
   18890:	fa20 fe0e 	lsr.w	lr, r0, lr
   18894:	ea4e 0a03 	orr.w	sl, lr, r3
   18898:	ea4f 4817 	mov.w	r8, r7, lsr #16
   1889c:	0c23      	lsrs	r3, r4, #16
   1889e:	fa1f f987 	uxth.w	r9, r7
   188a2:	fbba fef8 	udiv	lr, sl, r8
   188a6:	fb08 aa1e 	mls	sl, r8, lr, sl
   188aa:	fb0e f209 	mul.w	r2, lr, r9
   188ae:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   188b2:	429a      	cmp	r2, r3
   188b4:	d90b      	bls.n	188ce <__udivmoddi4+0x66>
   188b6:	18fb      	adds	r3, r7, r3
   188b8:	f10e 31ff 	add.w	r1, lr, #4294967295
   188bc:	bf2c      	ite	cs
   188be:	2001      	movcs	r0, #1
   188c0:	2000      	movcc	r0, #0
   188c2:	429a      	cmp	r2, r3
   188c4:	d902      	bls.n	188cc <__udivmoddi4+0x64>
   188c6:	2800      	cmp	r0, #0
   188c8:	f000 812a 	beq.w	18b20 <__udivmoddi4+0x2b8>
   188cc:	468e      	mov	lr, r1
   188ce:	1a9a      	subs	r2, r3, r2
   188d0:	b2a3      	uxth	r3, r4
   188d2:	fbb2 f0f8 	udiv	r0, r2, r8
   188d6:	fb08 2210 	mls	r2, r8, r0, r2
   188da:	fb00 f909 	mul.w	r9, r0, r9
   188de:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
   188e2:	45a1      	cmp	r9, r4
   188e4:	d907      	bls.n	188f6 <__udivmoddi4+0x8e>
   188e6:	193c      	adds	r4, r7, r4
   188e8:	f100 33ff 	add.w	r3, r0, #4294967295
   188ec:	d202      	bcs.n	188f4 <__udivmoddi4+0x8c>
   188ee:	45a1      	cmp	r9, r4
   188f0:	f200 8110 	bhi.w	18b14 <__udivmoddi4+0x2ac>
   188f4:	4618      	mov	r0, r3
   188f6:	eba4 0409 	sub.w	r4, r4, r9
   188fa:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
   188fe:	2100      	movs	r1, #0
   18900:	b11d      	cbz	r5, 1890a <__udivmoddi4+0xa2>
   18902:	40f4      	lsrs	r4, r6
   18904:	2300      	movs	r3, #0
   18906:	e9c5 4300 	strd	r4, r3, [r5]
   1890a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1890e:	428b      	cmp	r3, r1
   18910:	d908      	bls.n	18924 <__udivmoddi4+0xbc>
   18912:	2d00      	cmp	r5, #0
   18914:	f000 80f2 	beq.w	18afc <__udivmoddi4+0x294>
   18918:	2100      	movs	r1, #0
   1891a:	e9c5 0c00 	strd	r0, ip, [r5]
   1891e:	4608      	mov	r0, r1
   18920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18924:	fab3 f183 	clz	r1, r3
   18928:	2900      	cmp	r1, #0
   1892a:	d14e      	bne.n	189ca <__udivmoddi4+0x162>
   1892c:	4563      	cmp	r3, ip
   1892e:	f0c0 80e8 	bcc.w	18b02 <__udivmoddi4+0x29a>
   18932:	4282      	cmp	r2, r0
   18934:	f240 80e5 	bls.w	18b02 <__udivmoddi4+0x29a>
   18938:	4608      	mov	r0, r1
   1893a:	2d00      	cmp	r5, #0
   1893c:	d0e5      	beq.n	1890a <__udivmoddi4+0xa2>
   1893e:	e9c5 4a00 	strd	r4, sl, [r5]
   18942:	e7e2      	b.n	1890a <__udivmoddi4+0xa2>
   18944:	b902      	cbnz	r2, 18948 <__udivmoddi4+0xe0>
   18946:	deff      	udf	#255	; 0xff
   18948:	fab2 f682 	clz	r6, r2
   1894c:	2e00      	cmp	r6, #0
   1894e:	f040 8099 	bne.w	18a84 <__udivmoddi4+0x21c>
   18952:	1a8b      	subs	r3, r1, r2
   18954:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   18958:	fa1f f882 	uxth.w	r8, r2
   1895c:	2101      	movs	r1, #1
   1895e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   18962:	fbb3 f2fe 	udiv	r2, r3, lr
   18966:	fb0e 3012 	mls	r0, lr, r2, r3
   1896a:	fb08 f902 	mul.w	r9, r8, r2
   1896e:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
   18972:	45e1      	cmp	r9, ip
   18974:	d908      	bls.n	18988 <__udivmoddi4+0x120>
   18976:	eb17 0c0c 	adds.w	ip, r7, ip
   1897a:	f102 33ff 	add.w	r3, r2, #4294967295
   1897e:	d202      	bcs.n	18986 <__udivmoddi4+0x11e>
   18980:	45e1      	cmp	r9, ip
   18982:	f200 80ca 	bhi.w	18b1a <__udivmoddi4+0x2b2>
   18986:	461a      	mov	r2, r3
   18988:	ebac 0c09 	sub.w	ip, ip, r9
   1898c:	b2a3      	uxth	r3, r4
   1898e:	fbbc f0fe 	udiv	r0, ip, lr
   18992:	fb0e cc10 	mls	ip, lr, r0, ip
   18996:	fb08 f800 	mul.w	r8, r8, r0
   1899a:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
   1899e:	45a0      	cmp	r8, r4
   189a0:	d90e      	bls.n	189c0 <__udivmoddi4+0x158>
   189a2:	193c      	adds	r4, r7, r4
   189a4:	f100 33ff 	add.w	r3, r0, #4294967295
   189a8:	bf2c      	ite	cs
   189aa:	f04f 0c01 	movcs.w	ip, #1
   189ae:	f04f 0c00 	movcc.w	ip, #0
   189b2:	45a0      	cmp	r8, r4
   189b4:	d903      	bls.n	189be <__udivmoddi4+0x156>
   189b6:	f1bc 0f00 	cmp.w	ip, #0
   189ba:	f000 80a8 	beq.w	18b0e <__udivmoddi4+0x2a6>
   189be:	4618      	mov	r0, r3
   189c0:	eba4 0408 	sub.w	r4, r4, r8
   189c4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   189c8:	e79a      	b.n	18900 <__udivmoddi4+0x98>
   189ca:	f1c1 0420 	rsb	r4, r1, #32
   189ce:	408b      	lsls	r3, r1
   189d0:	fa02 fe01 	lsl.w	lr, r2, r1
   189d4:	fa0c f601 	lsl.w	r6, ip, r1
   189d8:	40e2      	lsrs	r2, r4
   189da:	fa20 f704 	lsr.w	r7, r0, r4
   189de:	fa2c fc04 	lsr.w	ip, ip, r4
   189e2:	fa00 f801 	lsl.w	r8, r0, r1
   189e6:	4313      	orrs	r3, r2
   189e8:	433e      	orrs	r6, r7
   189ea:	0c1f      	lsrs	r7, r3, #16
   189ec:	0c32      	lsrs	r2, r6, #16
   189ee:	fa1f f983 	uxth.w	r9, r3
   189f2:	fbbc f0f7 	udiv	r0, ip, r7
   189f6:	fb07 cc10 	mls	ip, r7, r0, ip
   189fa:	fb00 fa09 	mul.w	sl, r0, r9
   189fe:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
   18a02:	45e2      	cmp	sl, ip
   18a04:	d908      	bls.n	18a18 <__udivmoddi4+0x1b0>
   18a06:	eb13 0c0c 	adds.w	ip, r3, ip
   18a0a:	f100 32ff 	add.w	r2, r0, #4294967295
   18a0e:	d202      	bcs.n	18a16 <__udivmoddi4+0x1ae>
   18a10:	45e2      	cmp	sl, ip
   18a12:	f200 8089 	bhi.w	18b28 <__udivmoddi4+0x2c0>
   18a16:	4610      	mov	r0, r2
   18a18:	ebac 0c0a 	sub.w	ip, ip, sl
   18a1c:	b2b6      	uxth	r6, r6
   18a1e:	fbbc faf7 	udiv	sl, ip, r7
   18a22:	fb07 cc1a 	mls	ip, r7, sl, ip
   18a26:	fb0a f909 	mul.w	r9, sl, r9
   18a2a:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
   18a2e:	4591      	cmp	r9, r2
   18a30:	d906      	bls.n	18a40 <__udivmoddi4+0x1d8>
   18a32:	189a      	adds	r2, r3, r2
   18a34:	f10a 36ff 	add.w	r6, sl, #4294967295
   18a38:	d201      	bcs.n	18a3e <__udivmoddi4+0x1d6>
   18a3a:	4591      	cmp	r9, r2
   18a3c:	d87a      	bhi.n	18b34 <__udivmoddi4+0x2cc>
   18a3e:	46b2      	mov	sl, r6
   18a40:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
   18a44:	eba2 0209 	sub.w	r2, r2, r9
   18a48:	fba0 670e 	umull	r6, r7, r0, lr
   18a4c:	42ba      	cmp	r2, r7
   18a4e:	46b4      	mov	ip, r6
   18a50:	46b9      	mov	r9, r7
   18a52:	d302      	bcc.n	18a5a <__udivmoddi4+0x1f2>
   18a54:	d107      	bne.n	18a66 <__udivmoddi4+0x1fe>
   18a56:	45b0      	cmp	r8, r6
   18a58:	d205      	bcs.n	18a66 <__udivmoddi4+0x1fe>
   18a5a:	ebb6 0c0e 	subs.w	ip, r6, lr
   18a5e:	eb67 0303 	sbc.w	r3, r7, r3
   18a62:	3801      	subs	r0, #1
   18a64:	4699      	mov	r9, r3
   18a66:	2d00      	cmp	r5, #0
   18a68:	d06b      	beq.n	18b42 <__udivmoddi4+0x2da>
   18a6a:	ebb8 030c 	subs.w	r3, r8, ip
   18a6e:	eb62 0209 	sbc.w	r2, r2, r9
   18a72:	fa02 f404 	lsl.w	r4, r2, r4
   18a76:	40cb      	lsrs	r3, r1
   18a78:	40ca      	lsrs	r2, r1
   18a7a:	2100      	movs	r1, #0
   18a7c:	431c      	orrs	r4, r3
   18a7e:	e9c5 4200 	strd	r4, r2, [r5]
   18a82:	e742      	b.n	1890a <__udivmoddi4+0xa2>
   18a84:	40b7      	lsls	r7, r6
   18a86:	f1c6 0220 	rsb	r2, r6, #32
   18a8a:	fa01 f306 	lsl.w	r3, r1, r6
   18a8e:	40b4      	lsls	r4, r6
   18a90:	fa21 fc02 	lsr.w	ip, r1, r2
   18a94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   18a98:	fa20 f202 	lsr.w	r2, r0, r2
   18a9c:	fa1f f887 	uxth.w	r8, r7
   18aa0:	fbbc f1fe 	udiv	r1, ip, lr
   18aa4:	431a      	orrs	r2, r3
   18aa6:	fb0e cc11 	mls	ip, lr, r1, ip
   18aaa:	fb01 f008 	mul.w	r0, r1, r8
   18aae:	0c13      	lsrs	r3, r2, #16
   18ab0:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
   18ab4:	4560      	cmp	r0, ip
   18ab6:	d907      	bls.n	18ac8 <__udivmoddi4+0x260>
   18ab8:	eb17 0c0c 	adds.w	ip, r7, ip
   18abc:	f101 33ff 	add.w	r3, r1, #4294967295
   18ac0:	d201      	bcs.n	18ac6 <__udivmoddi4+0x25e>
   18ac2:	4560      	cmp	r0, ip
   18ac4:	d833      	bhi.n	18b2e <__udivmoddi4+0x2c6>
   18ac6:	4619      	mov	r1, r3
   18ac8:	ebac 0c00 	sub.w	ip, ip, r0
   18acc:	b292      	uxth	r2, r2
   18ace:	fbbc f0fe 	udiv	r0, ip, lr
   18ad2:	fb0e cc10 	mls	ip, lr, r0, ip
   18ad6:	fb00 f308 	mul.w	r3, r0, r8
   18ada:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
   18ade:	4563      	cmp	r3, ip
   18ae0:	d907      	bls.n	18af2 <__udivmoddi4+0x28a>
   18ae2:	eb17 0c0c 	adds.w	ip, r7, ip
   18ae6:	f100 32ff 	add.w	r2, r0, #4294967295
   18aea:	d201      	bcs.n	18af0 <__udivmoddi4+0x288>
   18aec:	4563      	cmp	r3, ip
   18aee:	d825      	bhi.n	18b3c <__udivmoddi4+0x2d4>
   18af0:	4610      	mov	r0, r2
   18af2:	ebac 0303 	sub.w	r3, ip, r3
   18af6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   18afa:	e730      	b.n	1895e <__udivmoddi4+0xf6>
   18afc:	4629      	mov	r1, r5
   18afe:	4628      	mov	r0, r5
   18b00:	e703      	b.n	1890a <__udivmoddi4+0xa2>
   18b02:	1a84      	subs	r4, r0, r2
   18b04:	eb6c 0303 	sbc.w	r3, ip, r3
   18b08:	2001      	movs	r0, #1
   18b0a:	469a      	mov	sl, r3
   18b0c:	e715      	b.n	1893a <__udivmoddi4+0xd2>
   18b0e:	3802      	subs	r0, #2
   18b10:	443c      	add	r4, r7
   18b12:	e755      	b.n	189c0 <__udivmoddi4+0x158>
   18b14:	3802      	subs	r0, #2
   18b16:	443c      	add	r4, r7
   18b18:	e6ed      	b.n	188f6 <__udivmoddi4+0x8e>
   18b1a:	3a02      	subs	r2, #2
   18b1c:	44bc      	add	ip, r7
   18b1e:	e733      	b.n	18988 <__udivmoddi4+0x120>
   18b20:	f1ae 0e02 	sub.w	lr, lr, #2
   18b24:	443b      	add	r3, r7
   18b26:	e6d2      	b.n	188ce <__udivmoddi4+0x66>
   18b28:	3802      	subs	r0, #2
   18b2a:	449c      	add	ip, r3
   18b2c:	e774      	b.n	18a18 <__udivmoddi4+0x1b0>
   18b2e:	3902      	subs	r1, #2
   18b30:	44bc      	add	ip, r7
   18b32:	e7c9      	b.n	18ac8 <__udivmoddi4+0x260>
   18b34:	f1aa 0a02 	sub.w	sl, sl, #2
   18b38:	441a      	add	r2, r3
   18b3a:	e781      	b.n	18a40 <__udivmoddi4+0x1d8>
   18b3c:	3802      	subs	r0, #2
   18b3e:	44bc      	add	ip, r7
   18b40:	e7d7      	b.n	18af2 <__udivmoddi4+0x28a>
   18b42:	4629      	mov	r1, r5
   18b44:	e6e1      	b.n	1890a <__udivmoddi4+0xa2>
   18b46:	bf00      	nop

00018b48 <__aeabi_idiv0>:
   18b48:	4770      	bx	lr
   18b4a:	bf00      	nop

00018b4c <ocrypto_bigint_add128>:
   18b4c:	b470      	push	{r4, r5, r6}
   18b4e:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
   18b52:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   18b56:	185b      	adds	r3, r3, r1
   18b58:	eb54 040c 	adcs.w	r4, r4, ip
   18b5c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   18b60:	414d      	adcs	r5, r1
   18b62:	eb56 060c 	adcs.w	r6, r6, ip
   18b66:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
   18b6a:	4180      	sbcs	r0, r0
   18b6c:	3001      	adds	r0, #1
   18b6e:	bc70      	pop	{r4, r5, r6}
   18b70:	4770      	bx	lr

00018b72 <ocrypto_bigint_sub128>:
   18b72:	b470      	push	{r4, r5, r6}
   18b74:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
   18b78:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   18b7c:	1a5b      	subs	r3, r3, r1
   18b7e:	eb74 040c 	sbcs.w	r4, r4, ip
   18b82:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   18b86:	418d      	sbcs	r5, r1
   18b88:	eb76 060c 	sbcs.w	r6, r6, ip
   18b8c:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
   18b90:	4180      	sbcs	r0, r0
   18b92:	4240      	negs	r0, r0
   18b94:	bc70      	pop	{r4, r5, r6}
   18b96:	4770      	bx	lr

00018b98 <ocrypto_bigint_add256>:
   18b98:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   18b9c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   18ba0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   18ba4:	185b      	adds	r3, r3, r1
   18ba6:	eb54 040c 	adcs.w	r4, r4, ip
   18baa:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   18bae:	414d      	adcs	r5, r1
   18bb0:	eb56 060c 	adcs.w	r6, r6, ip
   18bb4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   18bb8:	414f      	adcs	r7, r1
   18bba:	eb58 080c 	adcs.w	r8, r8, ip
   18bbe:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   18bc2:	eb59 0901 	adcs.w	r9, r9, r1
   18bc6:	eb5a 0a0c 	adcs.w	sl, sl, ip
   18bca:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   18bce:	4180      	sbcs	r0, r0
   18bd0:	3001      	adds	r0, #1
   18bd2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   18bd6:	4770      	bx	lr

00018bd8 <ocrypto_bigint_sub256>:
   18bd8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   18bdc:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   18be0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   18be4:	1a5b      	subs	r3, r3, r1
   18be6:	eb74 040c 	sbcs.w	r4, r4, ip
   18bea:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   18bee:	418d      	sbcs	r5, r1
   18bf0:	eb76 060c 	sbcs.w	r6, r6, ip
   18bf4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   18bf8:	418f      	sbcs	r7, r1
   18bfa:	eb78 080c 	sbcs.w	r8, r8, ip
   18bfe:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   18c02:	eb79 0901 	sbcs.w	r9, r9, r1
   18c06:	eb7a 0a0c 	sbcs.w	sl, sl, ip
   18c0a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   18c0e:	4180      	sbcs	r0, r0
   18c10:	4240      	negs	r0, r0
   18c12:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   18c16:	4770      	bx	lr

00018c18 <ocrypto_bigint_cadd256>:
   18c18:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   18c1c:	4252      	negs	r2, r2
   18c1e:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   18c22:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   18c26:	4017      	ands	r7, r2
   18c28:	19db      	adds	r3, r3, r7
   18c2a:	ea18 0802 	ands.w	r8, r8, r2
   18c2e:	eb54 0408 	adcs.w	r4, r4, r8
   18c32:	ea19 0902 	ands.w	r9, r9, r2
   18c36:	eb55 0509 	adcs.w	r5, r5, r9
   18c3a:	ea1a 0a02 	ands.w	sl, sl, r2
   18c3e:	eb56 060a 	adcs.w	r6, r6, sl
   18c42:	c078      	stmia	r0!, {r3, r4, r5, r6}
   18c44:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   18c48:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   18c4c:	4017      	ands	r7, r2
   18c4e:	417b      	adcs	r3, r7
   18c50:	ea18 0802 	ands.w	r8, r8, r2
   18c54:	eb54 0408 	adcs.w	r4, r4, r8
   18c58:	ea19 0902 	ands.w	r9, r9, r2
   18c5c:	eb55 0509 	adcs.w	r5, r5, r9
   18c60:	ea1a 0a02 	ands.w	sl, sl, r2
   18c64:	eb56 060a 	adcs.w	r6, r6, sl
   18c68:	c078      	stmia	r0!, {r3, r4, r5, r6}
   18c6a:	4180      	sbcs	r0, r0
   18c6c:	3001      	adds	r0, #1
   18c6e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   18c72:	4770      	bx	lr

00018c74 <ocrypto_bigint_csub256>:
   18c74:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   18c78:	4252      	negs	r2, r2
   18c7a:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   18c7e:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   18c82:	4017      	ands	r7, r2
   18c84:	1bdb      	subs	r3, r3, r7
   18c86:	ea18 0802 	ands.w	r8, r8, r2
   18c8a:	eb74 0408 	sbcs.w	r4, r4, r8
   18c8e:	ea19 0902 	ands.w	r9, r9, r2
   18c92:	eb75 0509 	sbcs.w	r5, r5, r9
   18c96:	ea1a 0a02 	ands.w	sl, sl, r2
   18c9a:	eb76 060a 	sbcs.w	r6, r6, sl
   18c9e:	c078      	stmia	r0!, {r3, r4, r5, r6}
   18ca0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   18ca4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   18ca8:	4017      	ands	r7, r2
   18caa:	41bb      	sbcs	r3, r7
   18cac:	ea18 0802 	ands.w	r8, r8, r2
   18cb0:	eb74 0408 	sbcs.w	r4, r4, r8
   18cb4:	ea19 0902 	ands.w	r9, r9, r2
   18cb8:	eb75 0509 	sbcs.w	r5, r5, r9
   18cbc:	ea1a 0a02 	ands.w	sl, sl, r2
   18cc0:	eb76 060a 	sbcs.w	r6, r6, sl
   18cc4:	c078      	stmia	r0!, {r3, r4, r5, r6}
   18cc6:	4180      	sbcs	r0, r0
   18cc8:	4240      	negs	r0, r0
   18cca:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   18cce:	4770      	bx	lr

00018cd0 <cswap64>:
   18cd0:	e890 0030 	ldmia.w	r0, {r4, r5}
   18cd4:	e891 00c0 	ldmia.w	r1, {r6, r7}
   18cd8:	1ba3      	subs	r3, r4, r6
   18cda:	4013      	ands	r3, r2
   18cdc:	1ae4      	subs	r4, r4, r3
   18cde:	18f6      	adds	r6, r6, r3
   18ce0:	1beb      	subs	r3, r5, r7
   18ce2:	4013      	ands	r3, r2
   18ce4:	1aed      	subs	r5, r5, r3
   18ce6:	18ff      	adds	r7, r7, r3
   18ce8:	c030      	stmia	r0!, {r4, r5}
   18cea:	c1c0      	stmia	r1!, {r6, r7}
   18cec:	4770      	bx	lr

00018cee <ocrypto_bigint_cswap256>:
   18cee:	b5f0      	push	{r4, r5, r6, r7, lr}
   18cf0:	4252      	negs	r2, r2
   18cf2:	f7ff ffed 	bl	18cd0 <cswap64>
   18cf6:	f7ff ffeb 	bl	18cd0 <cswap64>
   18cfa:	f7ff ffe9 	bl	18cd0 <cswap64>
   18cfe:	f7ff ffe7 	bl	18cd0 <cswap64>
   18d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018d04 <ocrypto_bigint_mul128>:
   18d04:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   18d08:	c93a      	ldmia	r1, {r1, r3, r4, r5}
   18d0a:	6816      	ldr	r6, [r2, #0]
   18d0c:	fba1 9a06 	umull	r9, sl, r1, r6
   18d10:	f04f 0c00 	mov.w	ip, #0
   18d14:	fbe3 ac06 	umlal	sl, ip, r3, r6
   18d18:	f04f 0700 	mov.w	r7, #0
   18d1c:	fbe4 c706 	umlal	ip, r7, r4, r6
   18d20:	f04f 0800 	mov.w	r8, #0
   18d24:	fbe5 7806 	umlal	r7, r8, r5, r6
   18d28:	f840 9b04 	str.w	r9, [r0], #4
   18d2c:	6856      	ldr	r6, [r2, #4]
   18d2e:	f04f 0900 	mov.w	r9, #0
   18d32:	fbe1 a906 	umlal	sl, r9, r1, r6
   18d36:	eb1c 0c09 	adds.w	ip, ip, r9
   18d3a:	f04f 0900 	mov.w	r9, #0
   18d3e:	eb49 0909 	adc.w	r9, r9, r9
   18d42:	fbe3 c906 	umlal	ip, r9, r3, r6
   18d46:	eb17 0709 	adds.w	r7, r7, r9
   18d4a:	f04f 0900 	mov.w	r9, #0
   18d4e:	eb49 0909 	adc.w	r9, r9, r9
   18d52:	fbe4 7906 	umlal	r7, r9, r4, r6
   18d56:	eb18 0809 	adds.w	r8, r8, r9
   18d5a:	f04f 0900 	mov.w	r9, #0
   18d5e:	eb49 0909 	adc.w	r9, r9, r9
   18d62:	fbe5 8906 	umlal	r8, r9, r5, r6
   18d66:	f840 ab04 	str.w	sl, [r0], #4
   18d6a:	6896      	ldr	r6, [r2, #8]
   18d6c:	f04f 0a00 	mov.w	sl, #0
   18d70:	fbe1 ca06 	umlal	ip, sl, r1, r6
   18d74:	eb17 070a 	adds.w	r7, r7, sl
   18d78:	f04f 0a00 	mov.w	sl, #0
   18d7c:	eb4a 0a0a 	adc.w	sl, sl, sl
   18d80:	fbe3 7a06 	umlal	r7, sl, r3, r6
   18d84:	eb18 080a 	adds.w	r8, r8, sl
   18d88:	f04f 0a00 	mov.w	sl, #0
   18d8c:	eb4a 0a0a 	adc.w	sl, sl, sl
   18d90:	fbe4 8a06 	umlal	r8, sl, r4, r6
   18d94:	eb19 090a 	adds.w	r9, r9, sl
   18d98:	f04f 0a00 	mov.w	sl, #0
   18d9c:	eb4a 0a0a 	adc.w	sl, sl, sl
   18da0:	fbe5 9a06 	umlal	r9, sl, r5, r6
   18da4:	f840 cb04 	str.w	ip, [r0], #4
   18da8:	68d6      	ldr	r6, [r2, #12]
   18daa:	f04f 0c00 	mov.w	ip, #0
   18dae:	fbe1 7c06 	umlal	r7, ip, r1, r6
   18db2:	eb18 080c 	adds.w	r8, r8, ip
   18db6:	f04f 0c00 	mov.w	ip, #0
   18dba:	eb4c 0c0c 	adc.w	ip, ip, ip
   18dbe:	fbe3 8c06 	umlal	r8, ip, r3, r6
   18dc2:	eb19 090c 	adds.w	r9, r9, ip
   18dc6:	f04f 0c00 	mov.w	ip, #0
   18dca:	eb4c 0c0c 	adc.w	ip, ip, ip
   18dce:	fbe4 9c06 	umlal	r9, ip, r4, r6
   18dd2:	eb1a 0a0c 	adds.w	sl, sl, ip
   18dd6:	f04f 0c00 	mov.w	ip, #0
   18dda:	eb4c 0c0c 	adc.w	ip, ip, ip
   18dde:	fbe5 ac06 	umlal	sl, ip, r5, r6
   18de2:	e880 1780 	stmia.w	r0, {r7, r8, r9, sl, ip}
   18de6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   18dea:	4770      	bx	lr

00018dec <ocrypto_bigint_sqr256>:
   18dec:	460a      	mov	r2, r1

00018dee <ocrypto_bigint_mul256>:
   18dee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18df2:	ec41 0a14 	vmov	s8, s9, r0, r1
   18df6:	ec92 0a08 	vldmia	r2, {s0-s7}
   18dfa:	c91e      	ldmia	r1, {r1, r2, r3, r4}
   18dfc:	ee10 0a10 	vmov	r0, s0
   18e00:	fba1 7800 	umull	r7, r8, r1, r0
   18e04:	f04f 0900 	mov.w	r9, #0
   18e08:	fbe2 8900 	umlal	r8, r9, r2, r0
   18e0c:	f04f 0a00 	mov.w	sl, #0
   18e10:	fbe3 9a00 	umlal	r9, sl, r3, r0
   18e14:	f04f 0b00 	mov.w	fp, #0
   18e18:	fbe4 ab00 	umlal	sl, fp, r4, r0
   18e1c:	ee12 0a10 	vmov	r0, s4
   18e20:	f04f 0c00 	mov.w	ip, #0
   18e24:	fbe1 bc00 	umlal	fp, ip, r1, r0
   18e28:	f04f 0e00 	mov.w	lr, #0
   18e2c:	fbe2 ce00 	umlal	ip, lr, r2, r0
   18e30:	f04f 0500 	mov.w	r5, #0
   18e34:	fbe3 e500 	umlal	lr, r5, r3, r0
   18e38:	f04f 0600 	mov.w	r6, #0
   18e3c:	fbe4 5600 	umlal	r5, r6, r4, r0
   18e40:	ee05 7a10 	vmov	s10, r7
   18e44:	ee10 0a90 	vmov	r0, s1
   18e48:	f04f 0700 	mov.w	r7, #0
   18e4c:	fbe1 8700 	umlal	r8, r7, r1, r0
   18e50:	eb19 0907 	adds.w	r9, r9, r7
   18e54:	f04f 0700 	mov.w	r7, #0
   18e58:	eb47 0707 	adc.w	r7, r7, r7
   18e5c:	fbe2 9700 	umlal	r9, r7, r2, r0
   18e60:	eb1a 0a07 	adds.w	sl, sl, r7
   18e64:	f04f 0700 	mov.w	r7, #0
   18e68:	eb47 0707 	adc.w	r7, r7, r7
   18e6c:	fbe3 a700 	umlal	sl, r7, r3, r0
   18e70:	eb1b 0b07 	adds.w	fp, fp, r7
   18e74:	f04f 0700 	mov.w	r7, #0
   18e78:	eb47 0707 	adc.w	r7, r7, r7
   18e7c:	fbe4 b700 	umlal	fp, r7, r4, r0
   18e80:	ee12 0a90 	vmov	r0, s5
   18e84:	eb1c 0c07 	adds.w	ip, ip, r7
   18e88:	f04f 0700 	mov.w	r7, #0
   18e8c:	eb47 0707 	adc.w	r7, r7, r7
   18e90:	fbe1 c700 	umlal	ip, r7, r1, r0
   18e94:	eb1e 0e07 	adds.w	lr, lr, r7
   18e98:	f04f 0700 	mov.w	r7, #0
   18e9c:	eb47 0707 	adc.w	r7, r7, r7
   18ea0:	fbe2 e700 	umlal	lr, r7, r2, r0
   18ea4:	19ed      	adds	r5, r5, r7
   18ea6:	f04f 0700 	mov.w	r7, #0
   18eaa:	eb47 0707 	adc.w	r7, r7, r7
   18eae:	fbe3 5700 	umlal	r5, r7, r3, r0
   18eb2:	19f6      	adds	r6, r6, r7
   18eb4:	f04f 0700 	mov.w	r7, #0
   18eb8:	eb47 0707 	adc.w	r7, r7, r7
   18ebc:	fbe4 6700 	umlal	r6, r7, r4, r0
   18ec0:	ee05 8a90 	vmov	s11, r8
   18ec4:	ee11 0a10 	vmov	r0, s2
   18ec8:	f04f 0800 	mov.w	r8, #0
   18ecc:	fbe1 9800 	umlal	r9, r8, r1, r0
   18ed0:	eb1a 0a08 	adds.w	sl, sl, r8
   18ed4:	f04f 0800 	mov.w	r8, #0
   18ed8:	eb48 0808 	adc.w	r8, r8, r8
   18edc:	fbe2 a800 	umlal	sl, r8, r2, r0
   18ee0:	eb1b 0b08 	adds.w	fp, fp, r8
   18ee4:	f04f 0800 	mov.w	r8, #0
   18ee8:	eb48 0808 	adc.w	r8, r8, r8
   18eec:	fbe3 b800 	umlal	fp, r8, r3, r0
   18ef0:	eb1c 0c08 	adds.w	ip, ip, r8
   18ef4:	f04f 0800 	mov.w	r8, #0
   18ef8:	eb48 0808 	adc.w	r8, r8, r8
   18efc:	fbe4 c800 	umlal	ip, r8, r4, r0
   18f00:	ee13 0a10 	vmov	r0, s6
   18f04:	eb1e 0e08 	adds.w	lr, lr, r8
   18f08:	f04f 0800 	mov.w	r8, #0
   18f0c:	eb48 0808 	adc.w	r8, r8, r8
   18f10:	fbe1 e800 	umlal	lr, r8, r1, r0
   18f14:	eb15 0508 	adds.w	r5, r5, r8
   18f18:	f04f 0800 	mov.w	r8, #0
   18f1c:	eb48 0808 	adc.w	r8, r8, r8
   18f20:	fbe2 5800 	umlal	r5, r8, r2, r0
   18f24:	eb16 0608 	adds.w	r6, r6, r8
   18f28:	f04f 0800 	mov.w	r8, #0
   18f2c:	eb48 0808 	adc.w	r8, r8, r8
   18f30:	fbe3 6800 	umlal	r6, r8, r3, r0
   18f34:	eb17 0708 	adds.w	r7, r7, r8
   18f38:	f04f 0800 	mov.w	r8, #0
   18f3c:	eb48 0808 	adc.w	r8, r8, r8
   18f40:	fbe4 7800 	umlal	r7, r8, r4, r0
   18f44:	ee06 9a10 	vmov	s12, r9
   18f48:	ee11 0a90 	vmov	r0, s3
   18f4c:	f04f 0900 	mov.w	r9, #0
   18f50:	fbe1 a900 	umlal	sl, r9, r1, r0
   18f54:	eb1b 0b09 	adds.w	fp, fp, r9
   18f58:	f04f 0900 	mov.w	r9, #0
   18f5c:	eb49 0909 	adc.w	r9, r9, r9
   18f60:	fbe2 b900 	umlal	fp, r9, r2, r0
   18f64:	eb1c 0c09 	adds.w	ip, ip, r9
   18f68:	f04f 0900 	mov.w	r9, #0
   18f6c:	eb49 0909 	adc.w	r9, r9, r9
   18f70:	fbe3 c900 	umlal	ip, r9, r3, r0
   18f74:	eb1e 0e09 	adds.w	lr, lr, r9
   18f78:	f04f 0900 	mov.w	r9, #0
   18f7c:	eb49 0909 	adc.w	r9, r9, r9
   18f80:	fbe4 e900 	umlal	lr, r9, r4, r0
   18f84:	ee13 0a90 	vmov	r0, s7
   18f88:	eb15 0509 	adds.w	r5, r5, r9
   18f8c:	f04f 0900 	mov.w	r9, #0
   18f90:	eb49 0909 	adc.w	r9, r9, r9
   18f94:	fbe1 5900 	umlal	r5, r9, r1, r0
   18f98:	eb16 0609 	adds.w	r6, r6, r9
   18f9c:	f04f 0900 	mov.w	r9, #0
   18fa0:	eb49 0909 	adc.w	r9, r9, r9
   18fa4:	fbe2 6900 	umlal	r6, r9, r2, r0
   18fa8:	eb17 0709 	adds.w	r7, r7, r9
   18fac:	f04f 0900 	mov.w	r9, #0
   18fb0:	eb49 0909 	adc.w	r9, r9, r9
   18fb4:	fbe3 7900 	umlal	r7, r9, r3, r0
   18fb8:	eb18 0809 	adds.w	r8, r8, r9
   18fbc:	f04f 0900 	mov.w	r9, #0
   18fc0:	eb49 0909 	adc.w	r9, r9, r9
   18fc4:	fbe4 8900 	umlal	r8, r9, r4, r0
   18fc8:	ee06 aa90 	vmov	s13, sl
   18fcc:	ee14 1a90 	vmov	r1, s9
   18fd0:	f101 0110 	add.w	r1, r1, #16
   18fd4:	c91e      	ldmia	r1, {r1, r2, r3, r4}
   18fd6:	ee10 0a10 	vmov	r0, s0
   18fda:	f04f 0a00 	mov.w	sl, #0
   18fde:	fbe1 ba00 	umlal	fp, sl, r1, r0
   18fe2:	eb1c 0c0a 	adds.w	ip, ip, sl
   18fe6:	f04f 0a00 	mov.w	sl, #0
   18fea:	eb4a 0a0a 	adc.w	sl, sl, sl
   18fee:	fbe2 ca00 	umlal	ip, sl, r2, r0
   18ff2:	eb1e 0e0a 	adds.w	lr, lr, sl
   18ff6:	f04f 0a00 	mov.w	sl, #0
   18ffa:	eb4a 0a0a 	adc.w	sl, sl, sl
   18ffe:	fbe3 ea00 	umlal	lr, sl, r3, r0
   19002:	eb15 050a 	adds.w	r5, r5, sl
   19006:	f04f 0a00 	mov.w	sl, #0
   1900a:	eb4a 0a0a 	adc.w	sl, sl, sl
   1900e:	fbe4 5a00 	umlal	r5, sl, r4, r0
   19012:	ee12 0a10 	vmov	r0, s4
   19016:	eb16 060a 	adds.w	r6, r6, sl
   1901a:	f04f 0a00 	mov.w	sl, #0
   1901e:	eb4a 0a0a 	adc.w	sl, sl, sl
   19022:	fbe1 6a00 	umlal	r6, sl, r1, r0
   19026:	eb17 070a 	adds.w	r7, r7, sl
   1902a:	f04f 0a00 	mov.w	sl, #0
   1902e:	eb4a 0a0a 	adc.w	sl, sl, sl
   19032:	fbe2 7a00 	umlal	r7, sl, r2, r0
   19036:	eb18 080a 	adds.w	r8, r8, sl
   1903a:	f04f 0a00 	mov.w	sl, #0
   1903e:	eb4a 0a0a 	adc.w	sl, sl, sl
   19042:	fbe3 8a00 	umlal	r8, sl, r3, r0
   19046:	eb19 090a 	adds.w	r9, r9, sl
   1904a:	f04f 0a00 	mov.w	sl, #0
   1904e:	eb4a 0a0a 	adc.w	sl, sl, sl
   19052:	fbe4 9a00 	umlal	r9, sl, r4, r0
   19056:	ee07 ba10 	vmov	s14, fp
   1905a:	ee10 0a90 	vmov	r0, s1
   1905e:	f04f 0b00 	mov.w	fp, #0
   19062:	fbe1 cb00 	umlal	ip, fp, r1, r0
   19066:	eb1e 0e0b 	adds.w	lr, lr, fp
   1906a:	f04f 0b00 	mov.w	fp, #0
   1906e:	eb4b 0b0b 	adc.w	fp, fp, fp
   19072:	fbe2 eb00 	umlal	lr, fp, r2, r0
   19076:	eb15 050b 	adds.w	r5, r5, fp
   1907a:	f04f 0b00 	mov.w	fp, #0
   1907e:	eb4b 0b0b 	adc.w	fp, fp, fp
   19082:	fbe3 5b00 	umlal	r5, fp, r3, r0
   19086:	eb16 060b 	adds.w	r6, r6, fp
   1908a:	f04f 0b00 	mov.w	fp, #0
   1908e:	eb4b 0b0b 	adc.w	fp, fp, fp
   19092:	fbe4 6b00 	umlal	r6, fp, r4, r0
   19096:	ee12 0a90 	vmov	r0, s5
   1909a:	eb17 070b 	adds.w	r7, r7, fp
   1909e:	f04f 0b00 	mov.w	fp, #0
   190a2:	eb4b 0b0b 	adc.w	fp, fp, fp
   190a6:	fbe1 7b00 	umlal	r7, fp, r1, r0
   190aa:	eb18 080b 	adds.w	r8, r8, fp
   190ae:	f04f 0b00 	mov.w	fp, #0
   190b2:	eb4b 0b0b 	adc.w	fp, fp, fp
   190b6:	fbe2 8b00 	umlal	r8, fp, r2, r0
   190ba:	eb19 090b 	adds.w	r9, r9, fp
   190be:	f04f 0b00 	mov.w	fp, #0
   190c2:	eb4b 0b0b 	adc.w	fp, fp, fp
   190c6:	fbe3 9b00 	umlal	r9, fp, r3, r0
   190ca:	eb1a 0a0b 	adds.w	sl, sl, fp
   190ce:	f04f 0b00 	mov.w	fp, #0
   190d2:	eb4b 0b0b 	adc.w	fp, fp, fp
   190d6:	fbe4 ab00 	umlal	sl, fp, r4, r0
   190da:	ee07 ca90 	vmov	s15, ip
   190de:	ee11 0a10 	vmov	r0, s2
   190e2:	f04f 0c00 	mov.w	ip, #0
   190e6:	fbe1 ec00 	umlal	lr, ip, r1, r0
   190ea:	eb15 050c 	adds.w	r5, r5, ip
   190ee:	f04f 0c00 	mov.w	ip, #0
   190f2:	eb4c 0c0c 	adc.w	ip, ip, ip
   190f6:	fbe2 5c00 	umlal	r5, ip, r2, r0
   190fa:	eb16 060c 	adds.w	r6, r6, ip
   190fe:	f04f 0c00 	mov.w	ip, #0
   19102:	eb4c 0c0c 	adc.w	ip, ip, ip
   19106:	fbe3 6c00 	umlal	r6, ip, r3, r0
   1910a:	eb17 070c 	adds.w	r7, r7, ip
   1910e:	f04f 0c00 	mov.w	ip, #0
   19112:	eb4c 0c0c 	adc.w	ip, ip, ip
   19116:	fbe4 7c00 	umlal	r7, ip, r4, r0
   1911a:	ee13 0a10 	vmov	r0, s6
   1911e:	eb18 080c 	adds.w	r8, r8, ip
   19122:	f04f 0c00 	mov.w	ip, #0
   19126:	eb4c 0c0c 	adc.w	ip, ip, ip
   1912a:	fbe1 8c00 	umlal	r8, ip, r1, r0
   1912e:	eb19 090c 	adds.w	r9, r9, ip
   19132:	f04f 0c00 	mov.w	ip, #0
   19136:	eb4c 0c0c 	adc.w	ip, ip, ip
   1913a:	fbe2 9c00 	umlal	r9, ip, r2, r0
   1913e:	eb1a 0a0c 	adds.w	sl, sl, ip
   19142:	f04f 0c00 	mov.w	ip, #0
   19146:	eb4c 0c0c 	adc.w	ip, ip, ip
   1914a:	fbe3 ac00 	umlal	sl, ip, r3, r0
   1914e:	eb1b 0b0c 	adds.w	fp, fp, ip
   19152:	f04f 0c00 	mov.w	ip, #0
   19156:	eb4c 0c0c 	adc.w	ip, ip, ip
   1915a:	fbe4 bc00 	umlal	fp, ip, r4, r0
   1915e:	ee08 ea10 	vmov	s16, lr
   19162:	ee11 0a90 	vmov	r0, s3
   19166:	f04f 0e00 	mov.w	lr, #0
   1916a:	fbe1 5e00 	umlal	r5, lr, r1, r0
   1916e:	eb16 060e 	adds.w	r6, r6, lr
   19172:	f04f 0e00 	mov.w	lr, #0
   19176:	eb4e 0e0e 	adc.w	lr, lr, lr
   1917a:	fbe2 6e00 	umlal	r6, lr, r2, r0
   1917e:	eb17 070e 	adds.w	r7, r7, lr
   19182:	f04f 0e00 	mov.w	lr, #0
   19186:	eb4e 0e0e 	adc.w	lr, lr, lr
   1918a:	fbe3 7e00 	umlal	r7, lr, r3, r0
   1918e:	eb18 080e 	adds.w	r8, r8, lr
   19192:	f04f 0e00 	mov.w	lr, #0
   19196:	eb4e 0e0e 	adc.w	lr, lr, lr
   1919a:	fbe4 8e00 	umlal	r8, lr, r4, r0
   1919e:	ee13 0a90 	vmov	r0, s7
   191a2:	eb19 090e 	adds.w	r9, r9, lr
   191a6:	f04f 0e00 	mov.w	lr, #0
   191aa:	eb4e 0e0e 	adc.w	lr, lr, lr
   191ae:	fbe1 9e00 	umlal	r9, lr, r1, r0
   191b2:	eb1a 0a0e 	adds.w	sl, sl, lr
   191b6:	f04f 0e00 	mov.w	lr, #0
   191ba:	eb4e 0e0e 	adc.w	lr, lr, lr
   191be:	fbe2 ae00 	umlal	sl, lr, r2, r0
   191c2:	eb1b 0b0e 	adds.w	fp, fp, lr
   191c6:	f04f 0e00 	mov.w	lr, #0
   191ca:	eb4e 0e0e 	adc.w	lr, lr, lr
   191ce:	fbe3 be00 	umlal	fp, lr, r3, r0
   191d2:	eb1c 0c0e 	adds.w	ip, ip, lr
   191d6:	f04f 0e00 	mov.w	lr, #0
   191da:	eb4e 0e0e 	adc.w	lr, lr, lr
   191de:	fbe4 ce00 	umlal	ip, lr, r4, r0
   191e2:	ee14 0a10 	vmov	r0, s8
   191e6:	eca0 5a07 	vstmia	r0!, {s10-s16}
   191ea:	e880 5fe0 	stmia.w	r0, {r5, r6, r7, r8, r9, sl, fp, ip, lr}
   191ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191f2:	bf00      	nop

000191f4 <ocrypto_constant_time_equal>:
   191f4:	b430      	push	{r4, r5}
   191f6:	f04f 0300 	mov.w	r3, #0

000191fa <constant_time_equal_loop>:
   191fa:	f810 4b01 	ldrb.w	r4, [r0], #1
   191fe:	f811 5b01 	ldrb.w	r5, [r1], #1
   19202:	3a01      	subs	r2, #1
   19204:	ea84 0405 	eor.w	r4, r4, r5
   19208:	ea43 0304 	orr.w	r3, r3, r4
   1920c:	d1f5      	bne.n	191fa <constant_time_equal_loop>
   1920e:	f1a3 0301 	sub.w	r3, r3, #1
   19212:	ea4f 70d3 	mov.w	r0, r3, lsr #31
   19216:	bc30      	pop	{r4, r5}
   19218:	4770      	bx	lr

0001921a <ocrypto_constant_time_is_zero>:
   1921a:	f04f 0300 	mov.w	r3, #0

0001921e <constant_time_is_zero_loop>:
   1921e:	f810 2b01 	ldrb.w	r2, [r0], #1
   19222:	3901      	subs	r1, #1
   19224:	ea43 0302 	orr.w	r3, r3, r2
   19228:	d1f9      	bne.n	1921e <constant_time_is_zero_loop>
   1922a:	f1a3 0301 	sub.w	r3, r3, #1
   1922e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
   19232:	4770      	bx	lr

00019234 <ocrypto_constant_time_copy>:
   19234:	f811 3b01 	ldrb.w	r3, [r1], #1
   19238:	f800 3b01 	strb.w	r3, [r0], #1
   1923c:	3a01      	subs	r2, #1
   1923e:	d1f9      	bne.n	19234 <ocrypto_constant_time_copy>
   19240:	4770      	bx	lr

00019242 <ocrypto_constant_time_fill_zero>:
   19242:	2200      	movs	r2, #0

00019244 <constant_time_fill_zero_loop>:
   19244:	f800 2b01 	strb.w	r2, [r0], #1
   19248:	3901      	subs	r1, #1
   1924a:	d1fb      	bne.n	19244 <constant_time_fill_zero_loop>
   1924c:	4770      	bx	lr
   1924e:	bf00      	nop

00019250 <ocrypto_mod_p256_add>:
   19250:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19254:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   19258:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   1925c:	185b      	adds	r3, r3, r1
   1925e:	eb54 040c 	adcs.w	r4, r4, ip
   19262:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19266:	414d      	adcs	r5, r1
   19268:	eb56 060c 	adcs.w	r6, r6, ip
   1926c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19270:	414f      	adcs	r7, r1
   19272:	eb58 080c 	adcs.w	r8, r8, ip
   19276:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   1927a:	eb59 0901 	adcs.w	r9, r9, r1
   1927e:	eb5a 0a0c 	adcs.w	sl, sl, ip
   19282:	4189      	sbcs	r1, r1
   19284:	f1b3 33ff 	subs.w	r3, r3, #4294967295
   19288:	f174 34ff 	sbcs.w	r4, r4, #4294967295
   1928c:	f175 35ff 	sbcs.w	r5, r5, #4294967295
   19290:	f176 0600 	sbcs.w	r6, r6, #0
   19294:	f177 0700 	sbcs.w	r7, r7, #0
   19298:	f178 0800 	sbcs.w	r8, r8, #0
   1929c:	f179 0901 	sbcs.w	r9, r9, #1
   192a0:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
   192a4:	f151 0100 	adcs.w	r1, r1, #0
   192a8:	424a      	negs	r2, r1
   192aa:	185b      	adds	r3, r3, r1
   192ac:	414c      	adcs	r4, r1
   192ae:	414d      	adcs	r5, r1
   192b0:	f156 0600 	adcs.w	r6, r6, #0
   192b4:	f157 0700 	adcs.w	r7, r7, #0
   192b8:	f158 0800 	adcs.w	r8, r8, #0
   192bc:	eb59 0902 	adcs.w	r9, r9, r2
   192c0:	eb5a 0a01 	adcs.w	sl, sl, r1
   192c4:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   192c8:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   192cc:	4770      	bx	lr

000192ce <ocrypto_mod_p256_sub>:
   192ce:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   192d2:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   192d6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   192da:	1a5b      	subs	r3, r3, r1
   192dc:	eb74 040c 	sbcs.w	r4, r4, ip
   192e0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   192e4:	418d      	sbcs	r5, r1
   192e6:	eb76 060c 	sbcs.w	r6, r6, ip
   192ea:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   192ee:	418f      	sbcs	r7, r1
   192f0:	eb78 080c 	sbcs.w	r8, r8, ip
   192f4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   192f8:	eb79 0901 	sbcs.w	r9, r9, r1
   192fc:	eb7a 0a0c 	sbcs.w	sl, sl, ip
   19300:	4189      	sbcs	r1, r1
   19302:	424a      	negs	r2, r1
   19304:	185b      	adds	r3, r3, r1
   19306:	414c      	adcs	r4, r1
   19308:	414d      	adcs	r5, r1
   1930a:	f156 0600 	adcs.w	r6, r6, #0
   1930e:	f157 0700 	adcs.w	r7, r7, #0
   19312:	f158 0800 	adcs.w	r8, r8, #0
   19316:	eb59 0902 	adcs.w	r9, r9, r2
   1931a:	eb5a 0a01 	adcs.w	sl, sl, r1
   1931e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   19322:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19326:	4770      	bx	lr

00019328 <ocrypto_mod_p256_square>:
   19328:	460a      	mov	r2, r1

0001932a <ocrypto_mod_p256_mul>:
   1932a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1932e:	ec41 0a14 	vmov	s8, s9, r0, r1
   19332:	ec92 0a08 	vldmia	r2, {s0-s7}
   19336:	c91e      	ldmia	r1, {r1, r2, r3, r4}
   19338:	ee10 0a10 	vmov	r0, s0
   1933c:	fba1 7800 	umull	r7, r8, r1, r0
   19340:	f04f 0900 	mov.w	r9, #0
   19344:	fbe2 8900 	umlal	r8, r9, r2, r0
   19348:	f04f 0a00 	mov.w	sl, #0
   1934c:	fbe3 9a00 	umlal	r9, sl, r3, r0
   19350:	f04f 0b00 	mov.w	fp, #0
   19354:	fbe4 ab00 	umlal	sl, fp, r4, r0
   19358:	ee12 0a10 	vmov	r0, s4
   1935c:	f04f 0c00 	mov.w	ip, #0
   19360:	fbe1 bc00 	umlal	fp, ip, r1, r0
   19364:	f04f 0e00 	mov.w	lr, #0
   19368:	fbe2 ce00 	umlal	ip, lr, r2, r0
   1936c:	f04f 0500 	mov.w	r5, #0
   19370:	fbe3 e500 	umlal	lr, r5, r3, r0
   19374:	f04f 0600 	mov.w	r6, #0
   19378:	fbe4 5600 	umlal	r5, r6, r4, r0
   1937c:	ee05 7a10 	vmov	s10, r7
   19380:	ee10 0a90 	vmov	r0, s1
   19384:	f04f 0700 	mov.w	r7, #0
   19388:	fbe1 8700 	umlal	r8, r7, r1, r0
   1938c:	eb19 0907 	adds.w	r9, r9, r7
   19390:	f04f 0700 	mov.w	r7, #0
   19394:	eb47 0707 	adc.w	r7, r7, r7
   19398:	fbe2 9700 	umlal	r9, r7, r2, r0
   1939c:	eb1a 0a07 	adds.w	sl, sl, r7
   193a0:	f04f 0700 	mov.w	r7, #0
   193a4:	eb47 0707 	adc.w	r7, r7, r7
   193a8:	fbe3 a700 	umlal	sl, r7, r3, r0
   193ac:	eb1b 0b07 	adds.w	fp, fp, r7
   193b0:	f04f 0700 	mov.w	r7, #0
   193b4:	eb47 0707 	adc.w	r7, r7, r7
   193b8:	fbe4 b700 	umlal	fp, r7, r4, r0
   193bc:	ee12 0a90 	vmov	r0, s5
   193c0:	eb1c 0c07 	adds.w	ip, ip, r7
   193c4:	f04f 0700 	mov.w	r7, #0
   193c8:	eb47 0707 	adc.w	r7, r7, r7
   193cc:	fbe1 c700 	umlal	ip, r7, r1, r0
   193d0:	eb1e 0e07 	adds.w	lr, lr, r7
   193d4:	f04f 0700 	mov.w	r7, #0
   193d8:	eb47 0707 	adc.w	r7, r7, r7
   193dc:	fbe2 e700 	umlal	lr, r7, r2, r0
   193e0:	19ed      	adds	r5, r5, r7
   193e2:	f04f 0700 	mov.w	r7, #0
   193e6:	eb47 0707 	adc.w	r7, r7, r7
   193ea:	fbe3 5700 	umlal	r5, r7, r3, r0
   193ee:	19f6      	adds	r6, r6, r7
   193f0:	f04f 0700 	mov.w	r7, #0
   193f4:	eb47 0707 	adc.w	r7, r7, r7
   193f8:	fbe4 6700 	umlal	r6, r7, r4, r0
   193fc:	ee05 8a90 	vmov	s11, r8
   19400:	ee11 0a10 	vmov	r0, s2
   19404:	f04f 0800 	mov.w	r8, #0
   19408:	fbe1 9800 	umlal	r9, r8, r1, r0
   1940c:	eb1a 0a08 	adds.w	sl, sl, r8
   19410:	f04f 0800 	mov.w	r8, #0
   19414:	eb48 0808 	adc.w	r8, r8, r8
   19418:	fbe2 a800 	umlal	sl, r8, r2, r0
   1941c:	eb1b 0b08 	adds.w	fp, fp, r8
   19420:	f04f 0800 	mov.w	r8, #0
   19424:	eb48 0808 	adc.w	r8, r8, r8
   19428:	fbe3 b800 	umlal	fp, r8, r3, r0
   1942c:	eb1c 0c08 	adds.w	ip, ip, r8
   19430:	f04f 0800 	mov.w	r8, #0
   19434:	eb48 0808 	adc.w	r8, r8, r8
   19438:	fbe4 c800 	umlal	ip, r8, r4, r0
   1943c:	ee13 0a10 	vmov	r0, s6
   19440:	eb1e 0e08 	adds.w	lr, lr, r8
   19444:	f04f 0800 	mov.w	r8, #0
   19448:	eb48 0808 	adc.w	r8, r8, r8
   1944c:	fbe1 e800 	umlal	lr, r8, r1, r0
   19450:	eb15 0508 	adds.w	r5, r5, r8
   19454:	f04f 0800 	mov.w	r8, #0
   19458:	eb48 0808 	adc.w	r8, r8, r8
   1945c:	fbe2 5800 	umlal	r5, r8, r2, r0
   19460:	eb16 0608 	adds.w	r6, r6, r8
   19464:	f04f 0800 	mov.w	r8, #0
   19468:	eb48 0808 	adc.w	r8, r8, r8
   1946c:	fbe3 6800 	umlal	r6, r8, r3, r0
   19470:	eb17 0708 	adds.w	r7, r7, r8
   19474:	f04f 0800 	mov.w	r8, #0
   19478:	eb48 0808 	adc.w	r8, r8, r8
   1947c:	fbe4 7800 	umlal	r7, r8, r4, r0
   19480:	ee06 9a10 	vmov	s12, r9
   19484:	ee11 0a90 	vmov	r0, s3
   19488:	f04f 0900 	mov.w	r9, #0
   1948c:	fbe1 a900 	umlal	sl, r9, r1, r0
   19490:	eb1b 0b09 	adds.w	fp, fp, r9
   19494:	f04f 0900 	mov.w	r9, #0
   19498:	eb49 0909 	adc.w	r9, r9, r9
   1949c:	fbe2 b900 	umlal	fp, r9, r2, r0
   194a0:	eb1c 0c09 	adds.w	ip, ip, r9
   194a4:	f04f 0900 	mov.w	r9, #0
   194a8:	eb49 0909 	adc.w	r9, r9, r9
   194ac:	fbe3 c900 	umlal	ip, r9, r3, r0
   194b0:	eb1e 0e09 	adds.w	lr, lr, r9
   194b4:	f04f 0900 	mov.w	r9, #0
   194b8:	eb49 0909 	adc.w	r9, r9, r9
   194bc:	fbe4 e900 	umlal	lr, r9, r4, r0
   194c0:	ee13 0a90 	vmov	r0, s7
   194c4:	eb15 0509 	adds.w	r5, r5, r9
   194c8:	f04f 0900 	mov.w	r9, #0
   194cc:	eb49 0909 	adc.w	r9, r9, r9
   194d0:	fbe1 5900 	umlal	r5, r9, r1, r0
   194d4:	eb16 0609 	adds.w	r6, r6, r9
   194d8:	f04f 0900 	mov.w	r9, #0
   194dc:	eb49 0909 	adc.w	r9, r9, r9
   194e0:	fbe2 6900 	umlal	r6, r9, r2, r0
   194e4:	eb17 0709 	adds.w	r7, r7, r9
   194e8:	f04f 0900 	mov.w	r9, #0
   194ec:	eb49 0909 	adc.w	r9, r9, r9
   194f0:	fbe3 7900 	umlal	r7, r9, r3, r0
   194f4:	eb18 0809 	adds.w	r8, r8, r9
   194f8:	f04f 0900 	mov.w	r9, #0
   194fc:	eb49 0909 	adc.w	r9, r9, r9
   19500:	fbe4 8900 	umlal	r8, r9, r4, r0
   19504:	ee06 aa90 	vmov	s13, sl
   19508:	ee14 1a90 	vmov	r1, s9
   1950c:	f101 0110 	add.w	r1, r1, #16
   19510:	c91e      	ldmia	r1, {r1, r2, r3, r4}
   19512:	ee10 0a10 	vmov	r0, s0
   19516:	f04f 0a00 	mov.w	sl, #0
   1951a:	fbe1 ba00 	umlal	fp, sl, r1, r0
   1951e:	eb1c 0c0a 	adds.w	ip, ip, sl
   19522:	f04f 0a00 	mov.w	sl, #0
   19526:	eb4a 0a0a 	adc.w	sl, sl, sl
   1952a:	fbe2 ca00 	umlal	ip, sl, r2, r0
   1952e:	eb1e 0e0a 	adds.w	lr, lr, sl
   19532:	f04f 0a00 	mov.w	sl, #0
   19536:	eb4a 0a0a 	adc.w	sl, sl, sl
   1953a:	fbe3 ea00 	umlal	lr, sl, r3, r0
   1953e:	eb15 050a 	adds.w	r5, r5, sl
   19542:	f04f 0a00 	mov.w	sl, #0
   19546:	eb4a 0a0a 	adc.w	sl, sl, sl
   1954a:	fbe4 5a00 	umlal	r5, sl, r4, r0
   1954e:	ee12 0a10 	vmov	r0, s4
   19552:	eb16 060a 	adds.w	r6, r6, sl
   19556:	f04f 0a00 	mov.w	sl, #0
   1955a:	eb4a 0a0a 	adc.w	sl, sl, sl
   1955e:	fbe1 6a00 	umlal	r6, sl, r1, r0
   19562:	eb17 070a 	adds.w	r7, r7, sl
   19566:	f04f 0a00 	mov.w	sl, #0
   1956a:	eb4a 0a0a 	adc.w	sl, sl, sl
   1956e:	fbe2 7a00 	umlal	r7, sl, r2, r0
   19572:	eb18 080a 	adds.w	r8, r8, sl
   19576:	f04f 0a00 	mov.w	sl, #0
   1957a:	eb4a 0a0a 	adc.w	sl, sl, sl
   1957e:	fbe3 8a00 	umlal	r8, sl, r3, r0
   19582:	eb19 090a 	adds.w	r9, r9, sl
   19586:	f04f 0a00 	mov.w	sl, #0
   1958a:	eb4a 0a0a 	adc.w	sl, sl, sl
   1958e:	fbe4 9a00 	umlal	r9, sl, r4, r0
   19592:	ee07 ba10 	vmov	s14, fp
   19596:	ee10 0a90 	vmov	r0, s1
   1959a:	f04f 0b00 	mov.w	fp, #0
   1959e:	fbe1 cb00 	umlal	ip, fp, r1, r0
   195a2:	eb1e 0e0b 	adds.w	lr, lr, fp
   195a6:	f04f 0b00 	mov.w	fp, #0
   195aa:	eb4b 0b0b 	adc.w	fp, fp, fp
   195ae:	fbe2 eb00 	umlal	lr, fp, r2, r0
   195b2:	eb15 050b 	adds.w	r5, r5, fp
   195b6:	f04f 0b00 	mov.w	fp, #0
   195ba:	eb4b 0b0b 	adc.w	fp, fp, fp
   195be:	fbe3 5b00 	umlal	r5, fp, r3, r0
   195c2:	eb16 060b 	adds.w	r6, r6, fp
   195c6:	f04f 0b00 	mov.w	fp, #0
   195ca:	eb4b 0b0b 	adc.w	fp, fp, fp
   195ce:	fbe4 6b00 	umlal	r6, fp, r4, r0
   195d2:	ee12 0a90 	vmov	r0, s5
   195d6:	eb17 070b 	adds.w	r7, r7, fp
   195da:	f04f 0b00 	mov.w	fp, #0
   195de:	eb4b 0b0b 	adc.w	fp, fp, fp
   195e2:	fbe1 7b00 	umlal	r7, fp, r1, r0
   195e6:	eb18 080b 	adds.w	r8, r8, fp
   195ea:	f04f 0b00 	mov.w	fp, #0
   195ee:	eb4b 0b0b 	adc.w	fp, fp, fp
   195f2:	fbe2 8b00 	umlal	r8, fp, r2, r0
   195f6:	eb19 090b 	adds.w	r9, r9, fp
   195fa:	f04f 0b00 	mov.w	fp, #0
   195fe:	eb4b 0b0b 	adc.w	fp, fp, fp
   19602:	fbe3 9b00 	umlal	r9, fp, r3, r0
   19606:	eb1a 0a0b 	adds.w	sl, sl, fp
   1960a:	f04f 0b00 	mov.w	fp, #0
   1960e:	eb4b 0b0b 	adc.w	fp, fp, fp
   19612:	fbe4 ab00 	umlal	sl, fp, r4, r0
   19616:	ee07 ca90 	vmov	s15, ip
   1961a:	ee11 0a10 	vmov	r0, s2
   1961e:	f04f 0c00 	mov.w	ip, #0
   19622:	fbe1 ec00 	umlal	lr, ip, r1, r0
   19626:	eb15 050c 	adds.w	r5, r5, ip
   1962a:	f04f 0c00 	mov.w	ip, #0
   1962e:	eb4c 0c0c 	adc.w	ip, ip, ip
   19632:	fbe2 5c00 	umlal	r5, ip, r2, r0
   19636:	eb16 060c 	adds.w	r6, r6, ip
   1963a:	f04f 0c00 	mov.w	ip, #0
   1963e:	eb4c 0c0c 	adc.w	ip, ip, ip
   19642:	fbe3 6c00 	umlal	r6, ip, r3, r0
   19646:	eb17 070c 	adds.w	r7, r7, ip
   1964a:	f04f 0c00 	mov.w	ip, #0
   1964e:	eb4c 0c0c 	adc.w	ip, ip, ip
   19652:	fbe4 7c00 	umlal	r7, ip, r4, r0
   19656:	ee13 0a10 	vmov	r0, s6
   1965a:	eb18 080c 	adds.w	r8, r8, ip
   1965e:	f04f 0c00 	mov.w	ip, #0
   19662:	eb4c 0c0c 	adc.w	ip, ip, ip
   19666:	fbe1 8c00 	umlal	r8, ip, r1, r0
   1966a:	eb19 090c 	adds.w	r9, r9, ip
   1966e:	f04f 0c00 	mov.w	ip, #0
   19672:	eb4c 0c0c 	adc.w	ip, ip, ip
   19676:	fbe2 9c00 	umlal	r9, ip, r2, r0
   1967a:	eb1a 0a0c 	adds.w	sl, sl, ip
   1967e:	f04f 0c00 	mov.w	ip, #0
   19682:	eb4c 0c0c 	adc.w	ip, ip, ip
   19686:	fbe3 ac00 	umlal	sl, ip, r3, r0
   1968a:	eb1b 0b0c 	adds.w	fp, fp, ip
   1968e:	f04f 0c00 	mov.w	ip, #0
   19692:	eb4c 0c0c 	adc.w	ip, ip, ip
   19696:	fbe4 bc00 	umlal	fp, ip, r4, r0
   1969a:	ee08 ea10 	vmov	s16, lr
   1969e:	ee11 0a90 	vmov	r0, s3
   196a2:	f04f 0e00 	mov.w	lr, #0
   196a6:	fbe1 5e00 	umlal	r5, lr, r1, r0
   196aa:	eb16 060e 	adds.w	r6, r6, lr
   196ae:	f04f 0e00 	mov.w	lr, #0
   196b2:	eb4e 0e0e 	adc.w	lr, lr, lr
   196b6:	fbe2 6e00 	umlal	r6, lr, r2, r0
   196ba:	eb17 070e 	adds.w	r7, r7, lr
   196be:	f04f 0e00 	mov.w	lr, #0
   196c2:	eb4e 0e0e 	adc.w	lr, lr, lr
   196c6:	fbe3 7e00 	umlal	r7, lr, r3, r0
   196ca:	eb18 080e 	adds.w	r8, r8, lr
   196ce:	f04f 0e00 	mov.w	lr, #0
   196d2:	eb4e 0e0e 	adc.w	lr, lr, lr
   196d6:	fbe4 8e00 	umlal	r8, lr, r4, r0
   196da:	ee13 0a90 	vmov	r0, s7
   196de:	eb19 090e 	adds.w	r9, r9, lr
   196e2:	f04f 0e00 	mov.w	lr, #0
   196e6:	eb4e 0e0e 	adc.w	lr, lr, lr
   196ea:	fbe1 9e00 	umlal	r9, lr, r1, r0
   196ee:	eb1a 0a0e 	adds.w	sl, sl, lr
   196f2:	f04f 0e00 	mov.w	lr, #0
   196f6:	eb4e 0e0e 	adc.w	lr, lr, lr
   196fa:	fbe2 ae00 	umlal	sl, lr, r2, r0
   196fe:	eb1b 0b0e 	adds.w	fp, fp, lr
   19702:	f04f 0e00 	mov.w	lr, #0
   19706:	eb4e 0e0e 	adc.w	lr, lr, lr
   1970a:	fbe3 be00 	umlal	fp, lr, r3, r0
   1970e:	eb1c 0c0e 	adds.w	ip, ip, lr
   19712:	f04f 0e00 	mov.w	lr, #0
   19716:	eb4e 0e0e 	adc.w	lr, lr, lr
   1971a:	fbe4 ce00 	umlal	ip, lr, r4, r0
   1971e:	ec53 2a17 	vmov	r2, r3, s14, s15
   19722:	ee18 4a10 	vmov	r4, s16
   19726:	eb12 020a 	adds.w	r2, r2, sl
   1972a:	eb53 030b 	adcs.w	r3, r3, fp
   1972e:	eb54 040c 	adcs.w	r4, r4, ip
   19732:	eb55 050e 	adcs.w	r5, r5, lr
   19736:	2000      	movs	r0, #0
   19738:	f140 0000 	adc.w	r0, r0, #0
   1973c:	eb12 020b 	adds.w	r2, r2, fp
   19740:	eb53 030c 	adcs.w	r3, r3, ip
   19744:	eb54 040e 	adcs.w	r4, r4, lr
   19748:	eb55 050e 	adcs.w	r5, r5, lr
   1974c:	4146      	adcs	r6, r0
   1974e:	2000      	movs	r0, #0
   19750:	4147      	adcs	r7, r0
   19752:	eb58 0800 	adcs.w	r8, r8, r0
   19756:	eb59 090a 	adcs.w	r9, r9, sl
   1975a:	f140 0000 	adc.w	r0, r0, #0
   1975e:	ebb2 020e 	subs.w	r2, r2, lr
   19762:	f173 0300 	sbcs.w	r3, r3, #0
   19766:	f174 0400 	sbcs.w	r4, r4, #0
   1976a:	eb75 050a 	sbcs.w	r5, r5, sl
   1976e:	eb76 060b 	sbcs.w	r6, r6, fp
   19772:	eb77 070c 	sbcs.w	r7, r7, ip
   19776:	eb78 080a 	sbcs.w	r8, r8, sl
   1977a:	eb79 090c 	sbcs.w	r9, r9, ip
   1977e:	f160 0000 	sbc.w	r0, r0, #0
   19782:	ebb5 050b 	subs.w	r5, r5, fp
   19786:	eb76 060c 	sbcs.w	r6, r6, ip
   1978a:	eb77 070e 	sbcs.w	r7, r7, lr
   1978e:	eb78 080b 	sbcs.w	r8, r8, fp
   19792:	eb79 090e 	sbcs.w	r9, r9, lr
   19796:	f160 0000 	sbc.w	r0, r0, #0
   1979a:	ea5f 7ce0 	movs.w	ip, r0, asr #31
   1979e:	ea7f 0c0c 	mvns.w	ip, ip
   197a2:	f1dc 0e00 	rsbs	lr, ip, #0
   197a6:	ebb2 020c 	subs.w	r2, r2, ip
   197aa:	eb73 030c 	sbcs.w	r3, r3, ip
   197ae:	eb74 040c 	sbcs.w	r4, r4, ip
   197b2:	f175 0500 	sbcs.w	r5, r5, #0
   197b6:	f176 0600 	sbcs.w	r6, r6, #0
   197ba:	f177 0700 	sbcs.w	r7, r7, #0
   197be:	eb78 080e 	sbcs.w	r8, r8, lr
   197c2:	eb79 090c 	sbcs.w	r9, r9, ip
   197c6:	f160 0000 	sbc.w	r0, r0, #0
   197ca:	ea5f 7ce0 	movs.w	ip, r0, asr #31
   197ce:	f1dc 0e00 	rsbs	lr, ip, #0
   197d2:	eb12 020c 	adds.w	r2, r2, ip
   197d6:	eb53 030c 	adcs.w	r3, r3, ip
   197da:	eb54 040c 	adcs.w	r4, r4, ip
   197de:	f155 0500 	adcs.w	r5, r5, #0
   197e2:	f156 0600 	adcs.w	r6, r6, #0
   197e6:	f157 0700 	adcs.w	r7, r7, #0
   197ea:	eb58 080e 	adcs.w	r8, r8, lr
   197ee:	eb59 090c 	adcs.w	r9, r9, ip
   197f2:	f140 0000 	adc.w	r0, r0, #0
   197f6:	ea5f 7ce0 	movs.w	ip, r0, asr #31
   197fa:	f1dc 0e00 	rsbs	lr, ip, #0
   197fe:	eb12 020c 	adds.w	r2, r2, ip
   19802:	eb53 030c 	adcs.w	r3, r3, ip
   19806:	eb54 040c 	adcs.w	r4, r4, ip
   1980a:	f155 0500 	adcs.w	r5, r5, #0
   1980e:	f156 0600 	adcs.w	r6, r6, #0
   19812:	f157 0700 	adcs.w	r7, r7, #0
   19816:	eb58 080e 	adcs.w	r8, r8, lr
   1981a:	eb59 090c 	adcs.w	r9, r9, ip
   1981e:	ec5b aa15 	vmov	sl, fp, s10, s11
   19822:	ec51 0a16 	vmov	r0, r1, s12, s13
   19826:	eb1a 0a06 	adds.w	sl, sl, r6
   1982a:	eb5b 0b07 	adcs.w	fp, fp, r7
   1982e:	eb50 0008 	adcs.w	r0, r0, r8
   19832:	eb51 0109 	adcs.w	r1, r1, r9
   19836:	f05f 0c00 	movs.w	ip, #0
   1983a:	f14c 0c00 	adc.w	ip, ip, #0
   1983e:	eb1a 0a07 	adds.w	sl, sl, r7
   19842:	eb5b 0b08 	adcs.w	fp, fp, r8
   19846:	eb50 0009 	adcs.w	r0, r0, r9
   1984a:	eb51 0109 	adcs.w	r1, r1, r9
   1984e:	eb52 020c 	adcs.w	r2, r2, ip
   19852:	f05f 0c00 	movs.w	ip, #0
   19856:	eb53 030c 	adcs.w	r3, r3, ip
   1985a:	eb54 040c 	adcs.w	r4, r4, ip
   1985e:	4175      	adcs	r5, r6
   19860:	f14c 0c00 	adc.w	ip, ip, #0
   19864:	ebba 0a09 	subs.w	sl, sl, r9
   19868:	f17b 0b00 	sbcs.w	fp, fp, #0
   1986c:	f170 0000 	sbcs.w	r0, r0, #0
   19870:	41b1      	sbcs	r1, r6
   19872:	41ba      	sbcs	r2, r7
   19874:	eb73 0308 	sbcs.w	r3, r3, r8
   19878:	41b4      	sbcs	r4, r6
   1987a:	eb75 0508 	sbcs.w	r5, r5, r8
   1987e:	f16c 0c00 	sbc.w	ip, ip, #0
   19882:	1bc9      	subs	r1, r1, r7
   19884:	eb72 0208 	sbcs.w	r2, r2, r8
   19888:	eb73 0309 	sbcs.w	r3, r3, r9
   1988c:	41bc      	sbcs	r4, r7
   1988e:	eb75 0509 	sbcs.w	r5, r5, r9
   19892:	f16c 0c00 	sbc.w	ip, ip, #0
   19896:	ea5f 78ec 	movs.w	r8, ip, asr #31
   1989a:	ea7f 0808 	mvns.w	r8, r8
   1989e:	f1d8 0900 	rsbs	r9, r8, #0
   198a2:	ebba 0a08 	subs.w	sl, sl, r8
   198a6:	eb7b 0b08 	sbcs.w	fp, fp, r8
   198aa:	eb70 0008 	sbcs.w	r0, r0, r8
   198ae:	f171 0100 	sbcs.w	r1, r1, #0
   198b2:	f172 0200 	sbcs.w	r2, r2, #0
   198b6:	f173 0300 	sbcs.w	r3, r3, #0
   198ba:	eb74 0409 	sbcs.w	r4, r4, r9
   198be:	eb75 0508 	sbcs.w	r5, r5, r8
   198c2:	f16c 0c00 	sbc.w	ip, ip, #0
   198c6:	ea5f 78ec 	movs.w	r8, ip, asr #31
   198ca:	f1d8 0900 	rsbs	r9, r8, #0
   198ce:	eb1a 0a08 	adds.w	sl, sl, r8
   198d2:	eb5b 0b08 	adcs.w	fp, fp, r8
   198d6:	eb50 0008 	adcs.w	r0, r0, r8
   198da:	f151 0100 	adcs.w	r1, r1, #0
   198de:	f152 0200 	adcs.w	r2, r2, #0
   198e2:	f153 0300 	adcs.w	r3, r3, #0
   198e6:	eb54 0409 	adcs.w	r4, r4, r9
   198ea:	eb55 0508 	adcs.w	r5, r5, r8
   198ee:	f14c 0c00 	adc.w	ip, ip, #0
   198f2:	ea5f 78ec 	movs.w	r8, ip, asr #31
   198f6:	f1d8 0900 	rsbs	r9, r8, #0
   198fa:	eb1a 0a08 	adds.w	sl, sl, r8
   198fe:	eb5b 0b08 	adcs.w	fp, fp, r8
   19902:	eb50 0008 	adcs.w	r0, r0, r8
   19906:	f151 0100 	adcs.w	r1, r1, #0
   1990a:	f152 0200 	adcs.w	r2, r2, #0
   1990e:	f153 0300 	adcs.w	r3, r3, #0
   19912:	eb54 0409 	adcs.w	r4, r4, r9
   19916:	eb55 0508 	adcs.w	r5, r5, r8
   1991a:	ee14 7a10 	vmov	r7, s8
   1991e:	e8a7 0c00 	stmia.w	r7!, {sl, fp}
   19922:	e887 003f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5}
   19926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1992a:	bf00      	nop

0001992c <__aeabi_dmul>:
   1992c:	b570      	push	{r4, r5, r6, lr}
   1992e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   19932:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   19936:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1993a:	bf1d      	ittte	ne
   1993c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   19940:	ea94 0f0c 	teqne	r4, ip
   19944:	ea95 0f0c 	teqne	r5, ip
   19948:	f000 f8de 	bleq	19b08 <__aeabi_dmul+0x1dc>
   1994c:	442c      	add	r4, r5
   1994e:	ea81 0603 	eor.w	r6, r1, r3
   19952:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   19956:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1995a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1995e:	bf18      	it	ne
   19960:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   19964:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   19968:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1996c:	d038      	beq.n	199e0 <__aeabi_dmul+0xb4>
   1996e:	fba0 ce02 	umull	ip, lr, r0, r2
   19972:	f04f 0500 	mov.w	r5, #0
   19976:	fbe1 e502 	umlal	lr, r5, r1, r2
   1997a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1997e:	fbe0 e503 	umlal	lr, r5, r0, r3
   19982:	f04f 0600 	mov.w	r6, #0
   19986:	fbe1 5603 	umlal	r5, r6, r1, r3
   1998a:	f09c 0f00 	teq	ip, #0
   1998e:	bf18      	it	ne
   19990:	f04e 0e01 	orrne.w	lr, lr, #1
   19994:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   19998:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1999c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   199a0:	d204      	bcs.n	199ac <__aeabi_dmul+0x80>
   199a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   199a6:	416d      	adcs	r5, r5
   199a8:	eb46 0606 	adc.w	r6, r6, r6
   199ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   199b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   199b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   199b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   199bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   199c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   199c4:	bf88      	it	hi
   199c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   199ca:	d81e      	bhi.n	19a0a <__aeabi_dmul+0xde>
   199cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   199d0:	bf08      	it	eq
   199d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   199d6:	f150 0000 	adcs.w	r0, r0, #0
   199da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   199de:	bd70      	pop	{r4, r5, r6, pc}
   199e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   199e4:	ea46 0101 	orr.w	r1, r6, r1
   199e8:	ea40 0002 	orr.w	r0, r0, r2
   199ec:	ea81 0103 	eor.w	r1, r1, r3
   199f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   199f4:	bfc2      	ittt	gt
   199f6:	ebd4 050c 	rsbsgt	r5, r4, ip
   199fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   199fe:	bd70      	popgt	{r4, r5, r6, pc}
   19a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   19a04:	f04f 0e00 	mov.w	lr, #0
   19a08:	3c01      	subs	r4, #1
   19a0a:	f300 80ab 	bgt.w	19b64 <__aeabi_dmul+0x238>
   19a0e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   19a12:	bfde      	ittt	le
   19a14:	2000      	movle	r0, #0
   19a16:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   19a1a:	bd70      	pople	{r4, r5, r6, pc}
   19a1c:	f1c4 0400 	rsb	r4, r4, #0
   19a20:	3c20      	subs	r4, #32
   19a22:	da35      	bge.n	19a90 <__aeabi_dmul+0x164>
   19a24:	340c      	adds	r4, #12
   19a26:	dc1b      	bgt.n	19a60 <__aeabi_dmul+0x134>
   19a28:	f104 0414 	add.w	r4, r4, #20
   19a2c:	f1c4 0520 	rsb	r5, r4, #32
   19a30:	fa00 f305 	lsl.w	r3, r0, r5
   19a34:	fa20 f004 	lsr.w	r0, r0, r4
   19a38:	fa01 f205 	lsl.w	r2, r1, r5
   19a3c:	ea40 0002 	orr.w	r0, r0, r2
   19a40:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   19a44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   19a48:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   19a4c:	fa21 f604 	lsr.w	r6, r1, r4
   19a50:	eb42 0106 	adc.w	r1, r2, r6
   19a54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   19a58:	bf08      	it	eq
   19a5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   19a5e:	bd70      	pop	{r4, r5, r6, pc}
   19a60:	f1c4 040c 	rsb	r4, r4, #12
   19a64:	f1c4 0520 	rsb	r5, r4, #32
   19a68:	fa00 f304 	lsl.w	r3, r0, r4
   19a6c:	fa20 f005 	lsr.w	r0, r0, r5
   19a70:	fa01 f204 	lsl.w	r2, r1, r4
   19a74:	ea40 0002 	orr.w	r0, r0, r2
   19a78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   19a7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   19a80:	f141 0100 	adc.w	r1, r1, #0
   19a84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   19a88:	bf08      	it	eq
   19a8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   19a8e:	bd70      	pop	{r4, r5, r6, pc}
   19a90:	f1c4 0520 	rsb	r5, r4, #32
   19a94:	fa00 f205 	lsl.w	r2, r0, r5
   19a98:	ea4e 0e02 	orr.w	lr, lr, r2
   19a9c:	fa20 f304 	lsr.w	r3, r0, r4
   19aa0:	fa01 f205 	lsl.w	r2, r1, r5
   19aa4:	ea43 0302 	orr.w	r3, r3, r2
   19aa8:	fa21 f004 	lsr.w	r0, r1, r4
   19aac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   19ab0:	fa21 f204 	lsr.w	r2, r1, r4
   19ab4:	ea20 0002 	bic.w	r0, r0, r2
   19ab8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   19abc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   19ac0:	bf08      	it	eq
   19ac2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   19ac6:	bd70      	pop	{r4, r5, r6, pc}
   19ac8:	f094 0f00 	teq	r4, #0
   19acc:	d10f      	bne.n	19aee <__aeabi_dmul+0x1c2>
   19ace:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   19ad2:	0040      	lsls	r0, r0, #1
   19ad4:	eb41 0101 	adc.w	r1, r1, r1
   19ad8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   19adc:	bf08      	it	eq
   19ade:	3c01      	subeq	r4, #1
   19ae0:	d0f7      	beq.n	19ad2 <__aeabi_dmul+0x1a6>
   19ae2:	ea41 0106 	orr.w	r1, r1, r6
   19ae6:	f095 0f00 	teq	r5, #0
   19aea:	bf18      	it	ne
   19aec:	4770      	bxne	lr
   19aee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   19af2:	0052      	lsls	r2, r2, #1
   19af4:	eb43 0303 	adc.w	r3, r3, r3
   19af8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   19afc:	bf08      	it	eq
   19afe:	3d01      	subeq	r5, #1
   19b00:	d0f7      	beq.n	19af2 <__aeabi_dmul+0x1c6>
   19b02:	ea43 0306 	orr.w	r3, r3, r6
   19b06:	4770      	bx	lr
   19b08:	ea94 0f0c 	teq	r4, ip
   19b0c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   19b10:	bf18      	it	ne
   19b12:	ea95 0f0c 	teqne	r5, ip
   19b16:	d00c      	beq.n	19b32 <__aeabi_dmul+0x206>
   19b18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   19b1c:	bf18      	it	ne
   19b1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   19b22:	d1d1      	bne.n	19ac8 <__aeabi_dmul+0x19c>
   19b24:	ea81 0103 	eor.w	r1, r1, r3
   19b28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   19b2c:	f04f 0000 	mov.w	r0, #0
   19b30:	bd70      	pop	{r4, r5, r6, pc}
   19b32:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   19b36:	bf06      	itte	eq
   19b38:	4610      	moveq	r0, r2
   19b3a:	4619      	moveq	r1, r3
   19b3c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   19b40:	d019      	beq.n	19b76 <__aeabi_dmul+0x24a>
   19b42:	ea94 0f0c 	teq	r4, ip
   19b46:	d102      	bne.n	19b4e <__aeabi_dmul+0x222>
   19b48:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   19b4c:	d113      	bne.n	19b76 <__aeabi_dmul+0x24a>
   19b4e:	ea95 0f0c 	teq	r5, ip
   19b52:	d105      	bne.n	19b60 <__aeabi_dmul+0x234>
   19b54:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   19b58:	bf1c      	itt	ne
   19b5a:	4610      	movne	r0, r2
   19b5c:	4619      	movne	r1, r3
   19b5e:	d10a      	bne.n	19b76 <__aeabi_dmul+0x24a>
   19b60:	ea81 0103 	eor.w	r1, r1, r3
   19b64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   19b68:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   19b6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   19b70:	f04f 0000 	mov.w	r0, #0
   19b74:	bd70      	pop	{r4, r5, r6, pc}
   19b76:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   19b7a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   19b7e:	bd70      	pop	{r4, r5, r6, pc}

00019b80 <__aeabi_ddiv>:
   19b80:	b570      	push	{r4, r5, r6, lr}
   19b82:	f04f 0cff 	mov.w	ip, #255	; 0xff
   19b86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   19b8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   19b8e:	bf1d      	ittte	ne
   19b90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   19b94:	ea94 0f0c 	teqne	r4, ip
   19b98:	ea95 0f0c 	teqne	r5, ip
   19b9c:	f000 f8a7 	bleq	19cee <__aeabi_ddiv+0x16e>
   19ba0:	eba4 0405 	sub.w	r4, r4, r5
   19ba4:	ea81 0e03 	eor.w	lr, r1, r3
   19ba8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   19bac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   19bb0:	f000 8088 	beq.w	19cc4 <__aeabi_ddiv+0x144>
   19bb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   19bb8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   19bbc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   19bc0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   19bc4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   19bc8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   19bcc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   19bd0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   19bd4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   19bd8:	429d      	cmp	r5, r3
   19bda:	bf08      	it	eq
   19bdc:	4296      	cmpeq	r6, r2
   19bde:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   19be2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   19be6:	d202      	bcs.n	19bee <__aeabi_ddiv+0x6e>
   19be8:	085b      	lsrs	r3, r3, #1
   19bea:	ea4f 0232 	mov.w	r2, r2, rrx
   19bee:	1ab6      	subs	r6, r6, r2
   19bf0:	eb65 0503 	sbc.w	r5, r5, r3
   19bf4:	085b      	lsrs	r3, r3, #1
   19bf6:	ea4f 0232 	mov.w	r2, r2, rrx
   19bfa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   19bfe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   19c02:	ebb6 0e02 	subs.w	lr, r6, r2
   19c06:	eb75 0e03 	sbcs.w	lr, r5, r3
   19c0a:	bf22      	ittt	cs
   19c0c:	1ab6      	subcs	r6, r6, r2
   19c0e:	4675      	movcs	r5, lr
   19c10:	ea40 000c 	orrcs.w	r0, r0, ip
   19c14:	085b      	lsrs	r3, r3, #1
   19c16:	ea4f 0232 	mov.w	r2, r2, rrx
   19c1a:	ebb6 0e02 	subs.w	lr, r6, r2
   19c1e:	eb75 0e03 	sbcs.w	lr, r5, r3
   19c22:	bf22      	ittt	cs
   19c24:	1ab6      	subcs	r6, r6, r2
   19c26:	4675      	movcs	r5, lr
   19c28:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   19c2c:	085b      	lsrs	r3, r3, #1
   19c2e:	ea4f 0232 	mov.w	r2, r2, rrx
   19c32:	ebb6 0e02 	subs.w	lr, r6, r2
   19c36:	eb75 0e03 	sbcs.w	lr, r5, r3
   19c3a:	bf22      	ittt	cs
   19c3c:	1ab6      	subcs	r6, r6, r2
   19c3e:	4675      	movcs	r5, lr
   19c40:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   19c44:	085b      	lsrs	r3, r3, #1
   19c46:	ea4f 0232 	mov.w	r2, r2, rrx
   19c4a:	ebb6 0e02 	subs.w	lr, r6, r2
   19c4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   19c52:	bf22      	ittt	cs
   19c54:	1ab6      	subcs	r6, r6, r2
   19c56:	4675      	movcs	r5, lr
   19c58:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   19c5c:	ea55 0e06 	orrs.w	lr, r5, r6
   19c60:	d018      	beq.n	19c94 <__aeabi_ddiv+0x114>
   19c62:	ea4f 1505 	mov.w	r5, r5, lsl #4
   19c66:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   19c6a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   19c6e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   19c72:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   19c76:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   19c7a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   19c7e:	d1c0      	bne.n	19c02 <__aeabi_ddiv+0x82>
   19c80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   19c84:	d10b      	bne.n	19c9e <__aeabi_ddiv+0x11e>
   19c86:	ea41 0100 	orr.w	r1, r1, r0
   19c8a:	f04f 0000 	mov.w	r0, #0
   19c8e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   19c92:	e7b6      	b.n	19c02 <__aeabi_ddiv+0x82>
   19c94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   19c98:	bf04      	itt	eq
   19c9a:	4301      	orreq	r1, r0
   19c9c:	2000      	moveq	r0, #0
   19c9e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   19ca2:	bf88      	it	hi
   19ca4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   19ca8:	f63f aeaf 	bhi.w	19a0a <__aeabi_dmul+0xde>
   19cac:	ebb5 0c03 	subs.w	ip, r5, r3
   19cb0:	bf04      	itt	eq
   19cb2:	ebb6 0c02 	subseq.w	ip, r6, r2
   19cb6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   19cba:	f150 0000 	adcs.w	r0, r0, #0
   19cbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   19cc2:	bd70      	pop	{r4, r5, r6, pc}
   19cc4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   19cc8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   19ccc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   19cd0:	bfc2      	ittt	gt
   19cd2:	ebd4 050c 	rsbsgt	r5, r4, ip
   19cd6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   19cda:	bd70      	popgt	{r4, r5, r6, pc}
   19cdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   19ce0:	f04f 0e00 	mov.w	lr, #0
   19ce4:	3c01      	subs	r4, #1
   19ce6:	e690      	b.n	19a0a <__aeabi_dmul+0xde>
   19ce8:	ea45 0e06 	orr.w	lr, r5, r6
   19cec:	e68d      	b.n	19a0a <__aeabi_dmul+0xde>
   19cee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   19cf2:	ea94 0f0c 	teq	r4, ip
   19cf6:	bf08      	it	eq
   19cf8:	ea95 0f0c 	teqeq	r5, ip
   19cfc:	f43f af3b 	beq.w	19b76 <__aeabi_dmul+0x24a>
   19d00:	ea94 0f0c 	teq	r4, ip
   19d04:	d10a      	bne.n	19d1c <__aeabi_ddiv+0x19c>
   19d06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   19d0a:	f47f af34 	bne.w	19b76 <__aeabi_dmul+0x24a>
   19d0e:	ea95 0f0c 	teq	r5, ip
   19d12:	f47f af25 	bne.w	19b60 <__aeabi_dmul+0x234>
   19d16:	4610      	mov	r0, r2
   19d18:	4619      	mov	r1, r3
   19d1a:	e72c      	b.n	19b76 <__aeabi_dmul+0x24a>
   19d1c:	ea95 0f0c 	teq	r5, ip
   19d20:	d106      	bne.n	19d30 <__aeabi_ddiv+0x1b0>
   19d22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   19d26:	f43f aefd 	beq.w	19b24 <__aeabi_dmul+0x1f8>
   19d2a:	4610      	mov	r0, r2
   19d2c:	4619      	mov	r1, r3
   19d2e:	e722      	b.n	19b76 <__aeabi_dmul+0x24a>
   19d30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   19d34:	bf18      	it	ne
   19d36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   19d3a:	f47f aec5 	bne.w	19ac8 <__aeabi_dmul+0x19c>
   19d3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   19d42:	f47f af0d 	bne.w	19b60 <__aeabi_dmul+0x234>
   19d46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   19d4a:	f47f aeeb 	bne.w	19b24 <__aeabi_dmul+0x1f8>
   19d4e:	e712      	b.n	19b76 <__aeabi_dmul+0x24a>

00019d50 <__gedf2>:
   19d50:	f04f 3cff 	mov.w	ip, #4294967295
   19d54:	e006      	b.n	19d64 <__cmpdf2+0x4>
   19d56:	bf00      	nop

00019d58 <__ledf2>:
   19d58:	f04f 0c01 	mov.w	ip, #1
   19d5c:	e002      	b.n	19d64 <__cmpdf2+0x4>
   19d5e:	bf00      	nop

00019d60 <__cmpdf2>:
   19d60:	f04f 0c01 	mov.w	ip, #1
   19d64:	f84d cd04 	str.w	ip, [sp, #-4]!
   19d68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   19d6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   19d70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   19d74:	bf18      	it	ne
   19d76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   19d7a:	d01b      	beq.n	19db4 <__cmpdf2+0x54>
   19d7c:	b001      	add	sp, #4
   19d7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   19d82:	bf0c      	ite	eq
   19d84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   19d88:	ea91 0f03 	teqne	r1, r3
   19d8c:	bf02      	ittt	eq
   19d8e:	ea90 0f02 	teqeq	r0, r2
   19d92:	2000      	moveq	r0, #0
   19d94:	4770      	bxeq	lr
   19d96:	f110 0f00 	cmn.w	r0, #0
   19d9a:	ea91 0f03 	teq	r1, r3
   19d9e:	bf58      	it	pl
   19da0:	4299      	cmppl	r1, r3
   19da2:	bf08      	it	eq
   19da4:	4290      	cmpeq	r0, r2
   19da6:	bf2c      	ite	cs
   19da8:	17d8      	asrcs	r0, r3, #31
   19daa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   19dae:	f040 0001 	orr.w	r0, r0, #1
   19db2:	4770      	bx	lr
   19db4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   19db8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   19dbc:	d102      	bne.n	19dc4 <__cmpdf2+0x64>
   19dbe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   19dc2:	d107      	bne.n	19dd4 <__cmpdf2+0x74>
   19dc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   19dc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   19dcc:	d1d6      	bne.n	19d7c <__cmpdf2+0x1c>
   19dce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   19dd2:	d0d3      	beq.n	19d7c <__cmpdf2+0x1c>
   19dd4:	f85d 0b04 	ldr.w	r0, [sp], #4
   19dd8:	4770      	bx	lr
   19dda:	bf00      	nop

00019ddc <__aeabi_cdrcmple>:
   19ddc:	4684      	mov	ip, r0
   19dde:	4610      	mov	r0, r2
   19de0:	4662      	mov	r2, ip
   19de2:	468c      	mov	ip, r1
   19de4:	4619      	mov	r1, r3
   19de6:	4663      	mov	r3, ip
   19de8:	e000      	b.n	19dec <__aeabi_cdcmpeq>
   19dea:	bf00      	nop

00019dec <__aeabi_cdcmpeq>:
   19dec:	b501      	push	{r0, lr}
   19dee:	f7ff ffb7 	bl	19d60 <__cmpdf2>
   19df2:	2800      	cmp	r0, #0
   19df4:	bf48      	it	mi
   19df6:	f110 0f00 	cmnmi.w	r0, #0
   19dfa:	bd01      	pop	{r0, pc}

00019dfc <__aeabi_dcmpeq>:
   19dfc:	f84d ed08 	str.w	lr, [sp, #-8]!
   19e00:	f7ff fff4 	bl	19dec <__aeabi_cdcmpeq>
   19e04:	bf0c      	ite	eq
   19e06:	2001      	moveq	r0, #1
   19e08:	2000      	movne	r0, #0
   19e0a:	f85d fb08 	ldr.w	pc, [sp], #8
   19e0e:	bf00      	nop

00019e10 <__aeabi_dcmplt>:
   19e10:	f84d ed08 	str.w	lr, [sp, #-8]!
   19e14:	f7ff ffea 	bl	19dec <__aeabi_cdcmpeq>
   19e18:	bf34      	ite	cc
   19e1a:	2001      	movcc	r0, #1
   19e1c:	2000      	movcs	r0, #0
   19e1e:	f85d fb08 	ldr.w	pc, [sp], #8
   19e22:	bf00      	nop

00019e24 <__aeabi_dcmple>:
   19e24:	f84d ed08 	str.w	lr, [sp, #-8]!
   19e28:	f7ff ffe0 	bl	19dec <__aeabi_cdcmpeq>
   19e2c:	bf94      	ite	ls
   19e2e:	2001      	movls	r0, #1
   19e30:	2000      	movhi	r0, #0
   19e32:	f85d fb08 	ldr.w	pc, [sp], #8
   19e36:	bf00      	nop

00019e38 <__aeabi_dcmpge>:
   19e38:	f84d ed08 	str.w	lr, [sp, #-8]!
   19e3c:	f7ff ffce 	bl	19ddc <__aeabi_cdrcmple>
   19e40:	bf94      	ite	ls
   19e42:	2001      	movls	r0, #1
   19e44:	2000      	movhi	r0, #0
   19e46:	f85d fb08 	ldr.w	pc, [sp], #8
   19e4a:	bf00      	nop

00019e4c <__aeabi_dcmpgt>:
   19e4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   19e50:	f7ff ffc4 	bl	19ddc <__aeabi_cdrcmple>
   19e54:	bf34      	ite	cc
   19e56:	2001      	movcc	r0, #1
   19e58:	2000      	movcs	r0, #0
   19e5a:	f85d fb08 	ldr.w	pc, [sp], #8
   19e5e:	bf00      	nop

00019e60 <__aeabi_dcmpun>:
   19e60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   19e64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   19e68:	d102      	bne.n	19e70 <__aeabi_dcmpun+0x10>
   19e6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   19e6e:	d10a      	bne.n	19e86 <__aeabi_dcmpun+0x26>
   19e70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   19e74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   19e78:	d102      	bne.n	19e80 <__aeabi_dcmpun+0x20>
   19e7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   19e7e:	d102      	bne.n	19e86 <__aeabi_dcmpun+0x26>
   19e80:	f04f 0000 	mov.w	r0, #0
   19e84:	4770      	bx	lr
   19e86:	f04f 0001 	mov.w	r0, #1
   19e8a:	4770      	bx	lr

00019e8c <__aeabi_d2iz>:
   19e8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   19e90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   19e94:	d215      	bcs.n	19ec2 <__aeabi_d2iz+0x36>
   19e96:	d511      	bpl.n	19ebc <__aeabi_d2iz+0x30>
   19e98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   19e9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   19ea0:	d912      	bls.n	19ec8 <__aeabi_d2iz+0x3c>
   19ea2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   19ea6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   19eaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   19eae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   19eb2:	fa23 f002 	lsr.w	r0, r3, r2
   19eb6:	bf18      	it	ne
   19eb8:	4240      	negne	r0, r0
   19eba:	4770      	bx	lr
   19ebc:	f04f 0000 	mov.w	r0, #0
   19ec0:	4770      	bx	lr
   19ec2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   19ec6:	d105      	bne.n	19ed4 <__aeabi_d2iz+0x48>
   19ec8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   19ecc:	bf08      	it	eq
   19ece:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   19ed2:	4770      	bx	lr
   19ed4:	f04f 0000 	mov.w	r0, #0
   19ed8:	4770      	bx	lr
   19eda:	bf00      	nop

00019edc <strcmp>:
   19edc:	f810 2b01 	ldrb.w	r2, [r0], #1
   19ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
   19ee4:	2a01      	cmp	r2, #1
   19ee6:	bf28      	it	cs
   19ee8:	429a      	cmpcs	r2, r3
   19eea:	d0f7      	beq.n	19edc <strcmp>
   19eec:	1ad0      	subs	r0, r2, r3
   19eee:	4770      	bx	lr

00019ef0 <strlen>:
   19ef0:	4603      	mov	r3, r0
   19ef2:	f813 2b01 	ldrb.w	r2, [r3], #1
   19ef6:	2a00      	cmp	r2, #0
   19ef8:	d1fb      	bne.n	19ef2 <strlen+0x2>
   19efa:	1a18      	subs	r0, r3, r0
   19efc:	3801      	subs	r0, #1
   19efe:	4770      	bx	lr

00019f00 <_dtoa_r>:
   19f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f04:	6a45      	ldr	r5, [r0, #36]	; 0x24
   19f06:	b097      	sub	sp, #92	; 0x5c
   19f08:	4604      	mov	r4, r0
   19f0a:	9106      	str	r1, [sp, #24]
   19f0c:	920b      	str	r2, [sp, #44]	; 0x2c
   19f0e:	9312      	str	r3, [sp, #72]	; 0x48
   19f10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
   19f14:	ec57 6b10 	vmov	r6, r7, d0
   19f18:	e9cd 6700 	strd	r6, r7, [sp]
   19f1c:	b93d      	cbnz	r5, 19f2e <_dtoa_r+0x2e>
   19f1e:	2010      	movs	r0, #16
   19f20:	f016 ff30 	bl	30d84 <malloc>
   19f24:	6260      	str	r0, [r4, #36]	; 0x24
   19f26:	6005      	str	r5, [r0, #0]
   19f28:	60c5      	str	r5, [r0, #12]
   19f2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
   19f2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19f30:	6819      	ldr	r1, [r3, #0]
   19f32:	b151      	cbz	r1, 19f4a <_dtoa_r+0x4a>
   19f34:	685a      	ldr	r2, [r3, #4]
   19f36:	2301      	movs	r3, #1
   19f38:	4620      	mov	r0, r4
   19f3a:	4093      	lsls	r3, r2
   19f3c:	604a      	str	r2, [r1, #4]
   19f3e:	608b      	str	r3, [r1, #8]
   19f40:	f019 f817 	bl	32f72 <_Bfree>
   19f44:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19f46:	2200      	movs	r2, #0
   19f48:	601a      	str	r2, [r3, #0]
   19f4a:	1e3b      	subs	r3, r7, #0
   19f4c:	bfb7      	itett	lt
   19f4e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   19f52:	2300      	movge	r3, #0
   19f54:	2201      	movlt	r2, #1
   19f56:	9301      	strlt	r3, [sp, #4]
   19f58:	bfac      	ite	ge
   19f5a:	f8c8 3000 	strge.w	r3, [r8]
   19f5e:	f8c8 2000 	strlt.w	r2, [r8]
   19f62:	4baf      	ldr	r3, [pc, #700]	; (1a220 <_dtoa_r+0x320>)
   19f64:	f8dd 8004 	ldr.w	r8, [sp, #4]
   19f68:	ea33 0308 	bics.w	r3, r3, r8
   19f6c:	d114      	bne.n	19f98 <_dtoa_r+0x98>
   19f6e:	f242 730f 	movw	r3, #9999	; 0x270f
   19f72:	9a12      	ldr	r2, [sp, #72]	; 0x48
   19f74:	6013      	str	r3, [r2, #0]
   19f76:	9b00      	ldr	r3, [sp, #0]
   19f78:	b923      	cbnz	r3, 19f84 <_dtoa_r+0x84>
   19f7a:	f3c8 0013 	ubfx	r0, r8, #0, #20
   19f7e:	2800      	cmp	r0, #0
   19f80:	f000 853e 	beq.w	1aa00 <_dtoa_r+0xb00>
   19f84:	9b21      	ldr	r3, [sp, #132]	; 0x84
   19f86:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 1a234 <_dtoa_r+0x334>
   19f8a:	2b00      	cmp	r3, #0
   19f8c:	f000 8540 	beq.w	1aa10 <_dtoa_r+0xb10>
   19f90:	f10b 0303 	add.w	r3, fp, #3
   19f94:	f000 bd3a 	b.w	1aa0c <_dtoa_r+0xb0c>
   19f98:	e9dd 6700 	ldrd	r6, r7, [sp]
   19f9c:	2200      	movs	r2, #0
   19f9e:	2300      	movs	r3, #0
   19fa0:	4630      	mov	r0, r6
   19fa2:	4639      	mov	r1, r7
   19fa4:	f7ff ff2a 	bl	19dfc <__aeabi_dcmpeq>
   19fa8:	4681      	mov	r9, r0
   19faa:	b168      	cbz	r0, 19fc8 <_dtoa_r+0xc8>
   19fac:	2301      	movs	r3, #1
   19fae:	9a12      	ldr	r2, [sp, #72]	; 0x48
   19fb0:	6013      	str	r3, [r2, #0]
   19fb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   19fb4:	2b00      	cmp	r3, #0
   19fb6:	f000 8520 	beq.w	1a9fa <_dtoa_r+0xafa>
   19fba:	4b9a      	ldr	r3, [pc, #616]	; (1a224 <_dtoa_r+0x324>)
   19fbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
   19fbe:	f103 3bff 	add.w	fp, r3, #4294967295
   19fc2:	6013      	str	r3, [r2, #0]
   19fc4:	f000 bd24 	b.w	1aa10 <_dtoa_r+0xb10>
   19fc8:	f3c8 550a 	ubfx	r5, r8, #20, #11
   19fcc:	aa14      	add	r2, sp, #80	; 0x50
   19fce:	a915      	add	r1, sp, #84	; 0x54
   19fd0:	4620      	mov	r0, r4
   19fd2:	ec47 6b10 	vmov	d0, r6, r7
   19fd6:	f019 f9da 	bl	3338e <__d2b>
   19fda:	9004      	str	r0, [sp, #16]
   19fdc:	2d00      	cmp	r5, #0
   19fde:	d07a      	beq.n	1a0d6 <_dtoa_r+0x1d6>
   19fe0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   19fe4:	46b2      	mov	sl, r6
   19fe6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   19fea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   19fee:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
   19ff2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
   19ff6:	2200      	movs	r2, #0
   19ff8:	4b8b      	ldr	r3, [pc, #556]	; (1a228 <_dtoa_r+0x328>)
   19ffa:	4650      	mov	r0, sl
   19ffc:	4659      	mov	r1, fp
   19ffe:	f7fe fa13 	bl	18428 <__aeabi_dsub>
   1a002:	a381      	add	r3, pc, #516	; (adr r3, 1a208 <_dtoa_r+0x308>)
   1a004:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a008:	f7ff fc90 	bl	1992c <__aeabi_dmul>
   1a00c:	a380      	add	r3, pc, #512	; (adr r3, 1a210 <_dtoa_r+0x310>)
   1a00e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a012:	f7fe fa0b 	bl	1842c <__adddf3>
   1a016:	4606      	mov	r6, r0
   1a018:	460f      	mov	r7, r1
   1a01a:	4628      	mov	r0, r5
   1a01c:	f7fe fb52 	bl	186c4 <__aeabi_i2d>
   1a020:	a37d      	add	r3, pc, #500	; (adr r3, 1a218 <_dtoa_r+0x318>)
   1a022:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a026:	f7ff fc81 	bl	1992c <__aeabi_dmul>
   1a02a:	4602      	mov	r2, r0
   1a02c:	460b      	mov	r3, r1
   1a02e:	4630      	mov	r0, r6
   1a030:	4639      	mov	r1, r7
   1a032:	f7fe f9fb 	bl	1842c <__adddf3>
   1a036:	4606      	mov	r6, r0
   1a038:	460f      	mov	r7, r1
   1a03a:	f7ff ff27 	bl	19e8c <__aeabi_d2iz>
   1a03e:	2200      	movs	r2, #0
   1a040:	4682      	mov	sl, r0
   1a042:	2300      	movs	r3, #0
   1a044:	4630      	mov	r0, r6
   1a046:	4639      	mov	r1, r7
   1a048:	f7ff fee2 	bl	19e10 <__aeabi_dcmplt>
   1a04c:	b148      	cbz	r0, 1a062 <_dtoa_r+0x162>
   1a04e:	4650      	mov	r0, sl
   1a050:	f7fe fb38 	bl	186c4 <__aeabi_i2d>
   1a054:	4632      	mov	r2, r6
   1a056:	463b      	mov	r3, r7
   1a058:	f7ff fed0 	bl	19dfc <__aeabi_dcmpeq>
   1a05c:	b908      	cbnz	r0, 1a062 <_dtoa_r+0x162>
   1a05e:	f10a 3aff 	add.w	sl, sl, #4294967295
   1a062:	f1ba 0f16 	cmp.w	sl, #22
   1a066:	d857      	bhi.n	1a118 <_dtoa_r+0x218>
   1a068:	4970      	ldr	r1, [pc, #448]	; (1a22c <_dtoa_r+0x32c>)
   1a06a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
   1a06e:	e9dd 2300 	ldrd	r2, r3, [sp]
   1a072:	e9d1 0100 	ldrd	r0, r1, [r1]
   1a076:	f7ff fee9 	bl	19e4c <__aeabi_dcmpgt>
   1a07a:	2800      	cmp	r0, #0
   1a07c:	d04e      	beq.n	1a11c <_dtoa_r+0x21c>
   1a07e:	f10a 3aff 	add.w	sl, sl, #4294967295
   1a082:	2300      	movs	r3, #0
   1a084:	930f      	str	r3, [sp, #60]	; 0x3c
   1a086:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1a088:	1b5d      	subs	r5, r3, r5
   1a08a:	f1b5 0801 	subs.w	r8, r5, #1
   1a08e:	bf49      	itett	mi
   1a090:	f1c5 0301 	rsbmi	r3, r5, #1
   1a094:	2300      	movpl	r3, #0
   1a096:	f04f 0800 	movmi.w	r8, #0
   1a09a:	9305      	strmi	r3, [sp, #20]
   1a09c:	bf58      	it	pl
   1a09e:	9305      	strpl	r3, [sp, #20]
   1a0a0:	f1ba 0f00 	cmp.w	sl, #0
   1a0a4:	db3c      	blt.n	1a120 <_dtoa_r+0x220>
   1a0a6:	2300      	movs	r3, #0
   1a0a8:	44d0      	add	r8, sl
   1a0aa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   1a0ae:	9307      	str	r3, [sp, #28]
   1a0b0:	9b06      	ldr	r3, [sp, #24]
   1a0b2:	2b09      	cmp	r3, #9
   1a0b4:	f200 808e 	bhi.w	1a1d4 <_dtoa_r+0x2d4>
   1a0b8:	2b05      	cmp	r3, #5
   1a0ba:	bfc5      	ittet	gt
   1a0bc:	3b04      	subgt	r3, #4
   1a0be:	2500      	movgt	r5, #0
   1a0c0:	2501      	movle	r5, #1
   1a0c2:	9306      	strgt	r3, [sp, #24]
   1a0c4:	9b06      	ldr	r3, [sp, #24]
   1a0c6:	3b02      	subs	r3, #2
   1a0c8:	2b03      	cmp	r3, #3
   1a0ca:	f200 808f 	bhi.w	1a1ec <_dtoa_r+0x2ec>
   1a0ce:	e8df f003 	tbb	[pc, r3]
   1a0d2:	7f7d      	.short	0x7f7d
   1a0d4:	7131      	.short	0x7131
   1a0d6:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
   1a0da:	441d      	add	r5, r3
   1a0dc:	f205 4032 	addw	r0, r5, #1074	; 0x432
   1a0e0:	2820      	cmp	r0, #32
   1a0e2:	dd13      	ble.n	1a10c <_dtoa_r+0x20c>
   1a0e4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   1a0e8:	9b00      	ldr	r3, [sp, #0]
   1a0ea:	fa08 f800 	lsl.w	r8, r8, r0
   1a0ee:	f205 4012 	addw	r0, r5, #1042	; 0x412
   1a0f2:	fa23 f000 	lsr.w	r0, r3, r0
   1a0f6:	ea48 0000 	orr.w	r0, r8, r0
   1a0fa:	f7fe fad3 	bl	186a4 <__aeabi_ui2d>
   1a0fe:	2301      	movs	r3, #1
   1a100:	4682      	mov	sl, r0
   1a102:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
   1a106:	3d01      	subs	r5, #1
   1a108:	9313      	str	r3, [sp, #76]	; 0x4c
   1a10a:	e774      	b.n	19ff6 <_dtoa_r+0xf6>
   1a10c:	f1c0 0020 	rsb	r0, r0, #32
   1a110:	9b00      	ldr	r3, [sp, #0]
   1a112:	fa03 f000 	lsl.w	r0, r3, r0
   1a116:	e7f0      	b.n	1a0fa <_dtoa_r+0x1fa>
   1a118:	2301      	movs	r3, #1
   1a11a:	e7b3      	b.n	1a084 <_dtoa_r+0x184>
   1a11c:	900f      	str	r0, [sp, #60]	; 0x3c
   1a11e:	e7b2      	b.n	1a086 <_dtoa_r+0x186>
   1a120:	9b05      	ldr	r3, [sp, #20]
   1a122:	eba3 030a 	sub.w	r3, r3, sl
   1a126:	9305      	str	r3, [sp, #20]
   1a128:	f1ca 0300 	rsb	r3, sl, #0
   1a12c:	9307      	str	r3, [sp, #28]
   1a12e:	2300      	movs	r3, #0
   1a130:	930e      	str	r3, [sp, #56]	; 0x38
   1a132:	e7bd      	b.n	1a0b0 <_dtoa_r+0x1b0>
   1a134:	2301      	movs	r3, #1
   1a136:	930a      	str	r3, [sp, #40]	; 0x28
   1a138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a13a:	2b00      	cmp	r3, #0
   1a13c:	dd59      	ble.n	1a1f2 <_dtoa_r+0x2f2>
   1a13e:	4699      	mov	r9, r3
   1a140:	9302      	str	r3, [sp, #8]
   1a142:	2200      	movs	r2, #0
   1a144:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1a146:	6072      	str	r2, [r6, #4]
   1a148:	2204      	movs	r2, #4
   1a14a:	f102 0014 	add.w	r0, r2, #20
   1a14e:	6871      	ldr	r1, [r6, #4]
   1a150:	4298      	cmp	r0, r3
   1a152:	d953      	bls.n	1a1fc <_dtoa_r+0x2fc>
   1a154:	4620      	mov	r0, r4
   1a156:	f018 fed8 	bl	32f0a <_Balloc>
   1a15a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a15c:	f1b9 0f0e 	cmp.w	r9, #14
   1a160:	6030      	str	r0, [r6, #0]
   1a162:	f8d3 b000 	ldr.w	fp, [r3]
   1a166:	f200 80e8 	bhi.w	1a33a <_dtoa_r+0x43a>
   1a16a:	2d00      	cmp	r5, #0
   1a16c:	f000 80e5 	beq.w	1a33a <_dtoa_r+0x43a>
   1a170:	f1ba 0f00 	cmp.w	sl, #0
   1a174:	ed9d 7b00 	vldr	d7, [sp]
   1a178:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1a17c:	dd76      	ble.n	1a26c <_dtoa_r+0x36c>
   1a17e:	f00a 030f 	and.w	r3, sl, #15
   1a182:	4a2a      	ldr	r2, [pc, #168]	; (1a22c <_dtoa_r+0x32c>)
   1a184:	ea4f 162a 	mov.w	r6, sl, asr #4
   1a188:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a18c:	06f0      	lsls	r0, r6, #27
   1a18e:	ed93 7b00 	vldr	d7, [r3]
   1a192:	ed8d 7b08 	vstr	d7, [sp, #32]
   1a196:	d567      	bpl.n	1a268 <_dtoa_r+0x368>
   1a198:	4b25      	ldr	r3, [pc, #148]	; (1a230 <_dtoa_r+0x330>)
   1a19a:	f006 060f 	and.w	r6, r6, #15
   1a19e:	2503      	movs	r5, #3
   1a1a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1a1a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1a1a8:	f7ff fcea 	bl	19b80 <__aeabi_ddiv>
   1a1ac:	e9cd 0100 	strd	r0, r1, [sp]
   1a1b0:	4f1f      	ldr	r7, [pc, #124]	; (1a230 <_dtoa_r+0x330>)
   1a1b2:	e04e      	b.n	1a252 <_dtoa_r+0x352>
   1a1b4:	2301      	movs	r3, #1
   1a1b6:	930a      	str	r3, [sp, #40]	; 0x28
   1a1b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a1ba:	4453      	add	r3, sl
   1a1bc:	f103 0901 	add.w	r9, r3, #1
   1a1c0:	9302      	str	r3, [sp, #8]
   1a1c2:	464b      	mov	r3, r9
   1a1c4:	2b01      	cmp	r3, #1
   1a1c6:	bfb8      	it	lt
   1a1c8:	2301      	movlt	r3, #1
   1a1ca:	e7ba      	b.n	1a142 <_dtoa_r+0x242>
   1a1cc:	2300      	movs	r3, #0
   1a1ce:	e7b2      	b.n	1a136 <_dtoa_r+0x236>
   1a1d0:	2300      	movs	r3, #0
   1a1d2:	e7f0      	b.n	1a1b6 <_dtoa_r+0x2b6>
   1a1d4:	2501      	movs	r5, #1
   1a1d6:	2300      	movs	r3, #0
   1a1d8:	950a      	str	r5, [sp, #40]	; 0x28
   1a1da:	9306      	str	r3, [sp, #24]
   1a1dc:	f04f 33ff 	mov.w	r3, #4294967295
   1a1e0:	2200      	movs	r2, #0
   1a1e2:	9302      	str	r3, [sp, #8]
   1a1e4:	4699      	mov	r9, r3
   1a1e6:	2312      	movs	r3, #18
   1a1e8:	920b      	str	r2, [sp, #44]	; 0x2c
   1a1ea:	e7aa      	b.n	1a142 <_dtoa_r+0x242>
   1a1ec:	2301      	movs	r3, #1
   1a1ee:	930a      	str	r3, [sp, #40]	; 0x28
   1a1f0:	e7f4      	b.n	1a1dc <_dtoa_r+0x2dc>
   1a1f2:	2301      	movs	r3, #1
   1a1f4:	9302      	str	r3, [sp, #8]
   1a1f6:	4699      	mov	r9, r3
   1a1f8:	461a      	mov	r2, r3
   1a1fa:	e7f5      	b.n	1a1e8 <_dtoa_r+0x2e8>
   1a1fc:	3101      	adds	r1, #1
   1a1fe:	0052      	lsls	r2, r2, #1
   1a200:	6071      	str	r1, [r6, #4]
   1a202:	e7a2      	b.n	1a14a <_dtoa_r+0x24a>
   1a204:	f3af 8000 	nop.w
   1a208:	636f4361 	.word	0x636f4361
   1a20c:	3fd287a7 	.word	0x3fd287a7
   1a210:	8b60c8b3 	.word	0x8b60c8b3
   1a214:	3fc68a28 	.word	0x3fc68a28
   1a218:	509f79fb 	.word	0x509f79fb
   1a21c:	3fd34413 	.word	0x3fd34413
   1a220:	7ff00000 	.word	0x7ff00000
   1a224:	00036870 	.word	0x00036870
   1a228:	3ff80000 	.word	0x3ff80000
   1a22c:	000339f0 	.word	0x000339f0
   1a230:	000339c8 	.word	0x000339c8
   1a234:	00036f00 	.word	0x00036f00
   1a238:	07f1      	lsls	r1, r6, #31
   1a23a:	d508      	bpl.n	1a24e <_dtoa_r+0x34e>
   1a23c:	3501      	adds	r5, #1
   1a23e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1a242:	e9d7 2300 	ldrd	r2, r3, [r7]
   1a246:	f7ff fb71 	bl	1992c <__aeabi_dmul>
   1a24a:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1a24e:	1076      	asrs	r6, r6, #1
   1a250:	3708      	adds	r7, #8
   1a252:	2e00      	cmp	r6, #0
   1a254:	d1f0      	bne.n	1a238 <_dtoa_r+0x338>
   1a256:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1a25a:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a25e:	f7ff fc8f 	bl	19b80 <__aeabi_ddiv>
   1a262:	e9cd 0100 	strd	r0, r1, [sp]
   1a266:	e01a      	b.n	1a29e <_dtoa_r+0x39e>
   1a268:	2502      	movs	r5, #2
   1a26a:	e7a1      	b.n	1a1b0 <_dtoa_r+0x2b0>
   1a26c:	f000 80a0 	beq.w	1a3b0 <_dtoa_r+0x4b0>
   1a270:	f1ca 0600 	rsb	r6, sl, #0
   1a274:	4b9f      	ldr	r3, [pc, #636]	; (1a4f4 <_dtoa_r+0x5f4>)
   1a276:	4fa0      	ldr	r7, [pc, #640]	; (1a4f8 <_dtoa_r+0x5f8>)
   1a278:	2502      	movs	r5, #2
   1a27a:	f006 020f 	and.w	r2, r6, #15
   1a27e:	1136      	asrs	r6, r6, #4
   1a280:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1a284:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1a288:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a28c:	f7ff fb4e 	bl	1992c <__aeabi_dmul>
   1a290:	2300      	movs	r3, #0
   1a292:	e9cd 0100 	strd	r0, r1, [sp]
   1a296:	2e00      	cmp	r6, #0
   1a298:	d17f      	bne.n	1a39a <_dtoa_r+0x49a>
   1a29a:	2b00      	cmp	r3, #0
   1a29c:	d1e1      	bne.n	1a262 <_dtoa_r+0x362>
   1a29e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a2a0:	2b00      	cmp	r3, #0
   1a2a2:	f000 8087 	beq.w	1a3b4 <_dtoa_r+0x4b4>
   1a2a6:	2200      	movs	r2, #0
   1a2a8:	4b94      	ldr	r3, [pc, #592]	; (1a4fc <_dtoa_r+0x5fc>)
   1a2aa:	e9dd 6700 	ldrd	r6, r7, [sp]
   1a2ae:	4630      	mov	r0, r6
   1a2b0:	4639      	mov	r1, r7
   1a2b2:	f7ff fdad 	bl	19e10 <__aeabi_dcmplt>
   1a2b6:	2800      	cmp	r0, #0
   1a2b8:	d07c      	beq.n	1a3b4 <_dtoa_r+0x4b4>
   1a2ba:	f1b9 0f00 	cmp.w	r9, #0
   1a2be:	d079      	beq.n	1a3b4 <_dtoa_r+0x4b4>
   1a2c0:	9b02      	ldr	r3, [sp, #8]
   1a2c2:	2b00      	cmp	r3, #0
   1a2c4:	dd35      	ble.n	1a332 <_dtoa_r+0x432>
   1a2c6:	f10a 33ff 	add.w	r3, sl, #4294967295
   1a2ca:	4639      	mov	r1, r7
   1a2cc:	2200      	movs	r2, #0
   1a2ce:	4630      	mov	r0, r6
   1a2d0:	9308      	str	r3, [sp, #32]
   1a2d2:	3501      	adds	r5, #1
   1a2d4:	4b8a      	ldr	r3, [pc, #552]	; (1a500 <_dtoa_r+0x600>)
   1a2d6:	f7ff fb29 	bl	1992c <__aeabi_dmul>
   1a2da:	9f02      	ldr	r7, [sp, #8]
   1a2dc:	e9cd 0100 	strd	r0, r1, [sp]
   1a2e0:	4628      	mov	r0, r5
   1a2e2:	f7fe f9ef 	bl	186c4 <__aeabi_i2d>
   1a2e6:	e9dd 2300 	ldrd	r2, r3, [sp]
   1a2ea:	f7ff fb1f 	bl	1992c <__aeabi_dmul>
   1a2ee:	2200      	movs	r2, #0
   1a2f0:	4b84      	ldr	r3, [pc, #528]	; (1a504 <_dtoa_r+0x604>)
   1a2f2:	f7fe f89b 	bl	1842c <__adddf3>
   1a2f6:	4605      	mov	r5, r0
   1a2f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   1a2fc:	2f00      	cmp	r7, #0
   1a2fe:	d15d      	bne.n	1a3bc <_dtoa_r+0x4bc>
   1a300:	2200      	movs	r2, #0
   1a302:	4b81      	ldr	r3, [pc, #516]	; (1a508 <_dtoa_r+0x608>)
   1a304:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a308:	f7fe f88e 	bl	18428 <__aeabi_dsub>
   1a30c:	462a      	mov	r2, r5
   1a30e:	4633      	mov	r3, r6
   1a310:	e9cd 0100 	strd	r0, r1, [sp]
   1a314:	f7ff fd9a 	bl	19e4c <__aeabi_dcmpgt>
   1a318:	2800      	cmp	r0, #0
   1a31a:	f040 8287 	bne.w	1a82c <_dtoa_r+0x92c>
   1a31e:	462a      	mov	r2, r5
   1a320:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   1a324:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a328:	f7ff fd72 	bl	19e10 <__aeabi_dcmplt>
   1a32c:	2800      	cmp	r0, #0
   1a32e:	f040 827b 	bne.w	1a828 <_dtoa_r+0x928>
   1a332:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1a336:	e9cd 2300 	strd	r2, r3, [sp]
   1a33a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1a33c:	2b00      	cmp	r3, #0
   1a33e:	f2c0 814f 	blt.w	1a5e0 <_dtoa_r+0x6e0>
   1a342:	f1ba 0f0e 	cmp.w	sl, #14
   1a346:	f300 814b 	bgt.w	1a5e0 <_dtoa_r+0x6e0>
   1a34a:	4b6a      	ldr	r3, [pc, #424]	; (1a4f4 <_dtoa_r+0x5f4>)
   1a34c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   1a350:	ed93 7b00 	vldr	d7, [r3]
   1a354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a356:	2b00      	cmp	r3, #0
   1a358:	ed8d 7b02 	vstr	d7, [sp, #8]
   1a35c:	f280 80d8 	bge.w	1a510 <_dtoa_r+0x610>
   1a360:	f1b9 0f00 	cmp.w	r9, #0
   1a364:	f300 80d4 	bgt.w	1a510 <_dtoa_r+0x610>
   1a368:	f040 825d 	bne.w	1a826 <_dtoa_r+0x926>
   1a36c:	2200      	movs	r2, #0
   1a36e:	4b66      	ldr	r3, [pc, #408]	; (1a508 <_dtoa_r+0x608>)
   1a370:	464f      	mov	r7, r9
   1a372:	464e      	mov	r6, r9
   1a374:	ec51 0b17 	vmov	r0, r1, d7
   1a378:	f7ff fad8 	bl	1992c <__aeabi_dmul>
   1a37c:	e9dd 2300 	ldrd	r2, r3, [sp]
   1a380:	f7ff fd5a 	bl	19e38 <__aeabi_dcmpge>
   1a384:	2800      	cmp	r0, #0
   1a386:	f040 8233 	bne.w	1a7f0 <_dtoa_r+0x8f0>
   1a38a:	2331      	movs	r3, #49	; 0x31
   1a38c:	f10b 0501 	add.w	r5, fp, #1
   1a390:	f10a 0a01 	add.w	sl, sl, #1
   1a394:	f88b 3000 	strb.w	r3, [fp]
   1a398:	e22e      	b.n	1a7f8 <_dtoa_r+0x8f8>
   1a39a:	07f2      	lsls	r2, r6, #31
   1a39c:	d505      	bpl.n	1a3aa <_dtoa_r+0x4aa>
   1a39e:	3501      	adds	r5, #1
   1a3a0:	e9d7 2300 	ldrd	r2, r3, [r7]
   1a3a4:	f7ff fac2 	bl	1992c <__aeabi_dmul>
   1a3a8:	2301      	movs	r3, #1
   1a3aa:	1076      	asrs	r6, r6, #1
   1a3ac:	3708      	adds	r7, #8
   1a3ae:	e772      	b.n	1a296 <_dtoa_r+0x396>
   1a3b0:	2502      	movs	r5, #2
   1a3b2:	e774      	b.n	1a29e <_dtoa_r+0x39e>
   1a3b4:	f8cd a020 	str.w	sl, [sp, #32]
   1a3b8:	464f      	mov	r7, r9
   1a3ba:	e791      	b.n	1a2e0 <_dtoa_r+0x3e0>
   1a3bc:	4b4d      	ldr	r3, [pc, #308]	; (1a4f4 <_dtoa_r+0x5f4>)
   1a3be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   1a3c2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
   1a3c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a3c8:	2b00      	cmp	r3, #0
   1a3ca:	d047      	beq.n	1a45c <_dtoa_r+0x55c>
   1a3cc:	4602      	mov	r2, r0
   1a3ce:	460b      	mov	r3, r1
   1a3d0:	2000      	movs	r0, #0
   1a3d2:	494e      	ldr	r1, [pc, #312]	; (1a50c <_dtoa_r+0x60c>)
   1a3d4:	f7ff fbd4 	bl	19b80 <__aeabi_ddiv>
   1a3d8:	462a      	mov	r2, r5
   1a3da:	465d      	mov	r5, fp
   1a3dc:	4633      	mov	r3, r6
   1a3de:	f7fe f823 	bl	18428 <__aeabi_dsub>
   1a3e2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1a3e6:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a3ea:	f7ff fd4f 	bl	19e8c <__aeabi_d2iz>
   1a3ee:	4606      	mov	r6, r0
   1a3f0:	f7fe f968 	bl	186c4 <__aeabi_i2d>
   1a3f4:	4602      	mov	r2, r0
   1a3f6:	3630      	adds	r6, #48	; 0x30
   1a3f8:	460b      	mov	r3, r1
   1a3fa:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a3fe:	f7fe f813 	bl	18428 <__aeabi_dsub>
   1a402:	f805 6b01 	strb.w	r6, [r5], #1
   1a406:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   1a40a:	e9cd 0100 	strd	r0, r1, [sp]
   1a40e:	f7ff fcff 	bl	19e10 <__aeabi_dcmplt>
   1a412:	2800      	cmp	r0, #0
   1a414:	d162      	bne.n	1a4dc <_dtoa_r+0x5dc>
   1a416:	2000      	movs	r0, #0
   1a418:	4938      	ldr	r1, [pc, #224]	; (1a4fc <_dtoa_r+0x5fc>)
   1a41a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1a41e:	f7fe f803 	bl	18428 <__aeabi_dsub>
   1a422:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   1a426:	f7ff fcf3 	bl	19e10 <__aeabi_dcmplt>
   1a42a:	2800      	cmp	r0, #0
   1a42c:	f040 80b7 	bne.w	1a59e <_dtoa_r+0x69e>
   1a430:	eba5 030b 	sub.w	r3, r5, fp
   1a434:	429f      	cmp	r7, r3
   1a436:	f77f af7c 	ble.w	1a332 <_dtoa_r+0x432>
   1a43a:	2200      	movs	r2, #0
   1a43c:	4b30      	ldr	r3, [pc, #192]	; (1a500 <_dtoa_r+0x600>)
   1a43e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1a442:	f7ff fa73 	bl	1992c <__aeabi_dmul>
   1a446:	2200      	movs	r2, #0
   1a448:	4b2d      	ldr	r3, [pc, #180]	; (1a500 <_dtoa_r+0x600>)
   1a44a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1a44e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a452:	f7ff fa6b 	bl	1992c <__aeabi_dmul>
   1a456:	e9cd 0100 	strd	r0, r1, [sp]
   1a45a:	e7c4      	b.n	1a3e6 <_dtoa_r+0x4e6>
   1a45c:	462a      	mov	r2, r5
   1a45e:	4633      	mov	r3, r6
   1a460:	eb0b 0507 	add.w	r5, fp, r7
   1a464:	465e      	mov	r6, fp
   1a466:	f7ff fa61 	bl	1992c <__aeabi_dmul>
   1a46a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1a46e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a472:	f7ff fd0b 	bl	19e8c <__aeabi_d2iz>
   1a476:	4607      	mov	r7, r0
   1a478:	f7fe f924 	bl	186c4 <__aeabi_i2d>
   1a47c:	4602      	mov	r2, r0
   1a47e:	3730      	adds	r7, #48	; 0x30
   1a480:	460b      	mov	r3, r1
   1a482:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a486:	f7fd ffcf 	bl	18428 <__aeabi_dsub>
   1a48a:	f806 7b01 	strb.w	r7, [r6], #1
   1a48e:	42ae      	cmp	r6, r5
   1a490:	f04f 0200 	mov.w	r2, #0
   1a494:	e9cd 0100 	strd	r0, r1, [sp]
   1a498:	d125      	bne.n	1a4e6 <_dtoa_r+0x5e6>
   1a49a:	4b1c      	ldr	r3, [pc, #112]	; (1a50c <_dtoa_r+0x60c>)
   1a49c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1a4a0:	f7fd ffc4 	bl	1842c <__adddf3>
   1a4a4:	4602      	mov	r2, r0
   1a4a6:	460b      	mov	r3, r1
   1a4a8:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a4ac:	f7ff fcce 	bl	19e4c <__aeabi_dcmpgt>
   1a4b0:	2800      	cmp	r0, #0
   1a4b2:	d174      	bne.n	1a59e <_dtoa_r+0x69e>
   1a4b4:	2000      	movs	r0, #0
   1a4b6:	4915      	ldr	r1, [pc, #84]	; (1a50c <_dtoa_r+0x60c>)
   1a4b8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   1a4bc:	f7fd ffb4 	bl	18428 <__aeabi_dsub>
   1a4c0:	4602      	mov	r2, r0
   1a4c2:	460b      	mov	r3, r1
   1a4c4:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a4c8:	f7ff fca2 	bl	19e10 <__aeabi_dcmplt>
   1a4cc:	2800      	cmp	r0, #0
   1a4ce:	f43f af30 	beq.w	1a332 <_dtoa_r+0x432>
   1a4d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1a4d6:	1e6a      	subs	r2, r5, #1
   1a4d8:	2b30      	cmp	r3, #48	; 0x30
   1a4da:	d002      	beq.n	1a4e2 <_dtoa_r+0x5e2>
   1a4dc:	f8dd a020 	ldr.w	sl, [sp, #32]
   1a4e0:	e04b      	b.n	1a57a <_dtoa_r+0x67a>
   1a4e2:	4615      	mov	r5, r2
   1a4e4:	e7f5      	b.n	1a4d2 <_dtoa_r+0x5d2>
   1a4e6:	4b06      	ldr	r3, [pc, #24]	; (1a500 <_dtoa_r+0x600>)
   1a4e8:	f7ff fa20 	bl	1992c <__aeabi_dmul>
   1a4ec:	e9cd 0100 	strd	r0, r1, [sp]
   1a4f0:	e7bd      	b.n	1a46e <_dtoa_r+0x56e>
   1a4f2:	bf00      	nop
   1a4f4:	000339f0 	.word	0x000339f0
   1a4f8:	000339c8 	.word	0x000339c8
   1a4fc:	3ff00000 	.word	0x3ff00000
   1a500:	40240000 	.word	0x40240000
   1a504:	401c0000 	.word	0x401c0000
   1a508:	40140000 	.word	0x40140000
   1a50c:	3fe00000 	.word	0x3fe00000
   1a510:	e9dd 6700 	ldrd	r6, r7, [sp]
   1a514:	465d      	mov	r5, fp
   1a516:	4630      	mov	r0, r6
   1a518:	4639      	mov	r1, r7
   1a51a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1a51e:	f7ff fb2f 	bl	19b80 <__aeabi_ddiv>
   1a522:	f7ff fcb3 	bl	19e8c <__aeabi_d2iz>
   1a526:	4680      	mov	r8, r0
   1a528:	f7fe f8cc 	bl	186c4 <__aeabi_i2d>
   1a52c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1a530:	f7ff f9fc 	bl	1992c <__aeabi_dmul>
   1a534:	4602      	mov	r2, r0
   1a536:	4630      	mov	r0, r6
   1a538:	f108 0630 	add.w	r6, r8, #48	; 0x30
   1a53c:	460b      	mov	r3, r1
   1a53e:	4639      	mov	r1, r7
   1a540:	f7fd ff72 	bl	18428 <__aeabi_dsub>
   1a544:	f805 6b01 	strb.w	r6, [r5], #1
   1a548:	eba5 060b 	sub.w	r6, r5, fp
   1a54c:	4602      	mov	r2, r0
   1a54e:	460b      	mov	r3, r1
   1a550:	45b1      	cmp	r9, r6
   1a552:	d138      	bne.n	1a5c6 <_dtoa_r+0x6c6>
   1a554:	f7fd ff6a 	bl	1842c <__adddf3>
   1a558:	4606      	mov	r6, r0
   1a55a:	460f      	mov	r7, r1
   1a55c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1a560:	f7ff fc74 	bl	19e4c <__aeabi_dcmpgt>
   1a564:	b9c8      	cbnz	r0, 1a59a <_dtoa_r+0x69a>
   1a566:	4630      	mov	r0, r6
   1a568:	4639      	mov	r1, r7
   1a56a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1a56e:	f7ff fc45 	bl	19dfc <__aeabi_dcmpeq>
   1a572:	b110      	cbz	r0, 1a57a <_dtoa_r+0x67a>
   1a574:	f018 0f01 	tst.w	r8, #1
   1a578:	d10f      	bne.n	1a59a <_dtoa_r+0x69a>
   1a57a:	9904      	ldr	r1, [sp, #16]
   1a57c:	4620      	mov	r0, r4
   1a57e:	f018 fcf8 	bl	32f72 <_Bfree>
   1a582:	2300      	movs	r3, #0
   1a584:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1a586:	702b      	strb	r3, [r5, #0]
   1a588:	f10a 0301 	add.w	r3, sl, #1
   1a58c:	6013      	str	r3, [r2, #0]
   1a58e:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1a590:	2b00      	cmp	r3, #0
   1a592:	f000 823d 	beq.w	1aa10 <_dtoa_r+0xb10>
   1a596:	601d      	str	r5, [r3, #0]
   1a598:	e23a      	b.n	1aa10 <_dtoa_r+0xb10>
   1a59a:	f8cd a020 	str.w	sl, [sp, #32]
   1a59e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   1a5a2:	1e6b      	subs	r3, r5, #1
   1a5a4:	2a39      	cmp	r2, #57	; 0x39
   1a5a6:	d108      	bne.n	1a5ba <_dtoa_r+0x6ba>
   1a5a8:	459b      	cmp	fp, r3
   1a5aa:	d10a      	bne.n	1a5c2 <_dtoa_r+0x6c2>
   1a5ac:	9b08      	ldr	r3, [sp, #32]
   1a5ae:	3301      	adds	r3, #1
   1a5b0:	9308      	str	r3, [sp, #32]
   1a5b2:	2330      	movs	r3, #48	; 0x30
   1a5b4:	f88b 3000 	strb.w	r3, [fp]
   1a5b8:	465b      	mov	r3, fp
   1a5ba:	781a      	ldrb	r2, [r3, #0]
   1a5bc:	3201      	adds	r2, #1
   1a5be:	701a      	strb	r2, [r3, #0]
   1a5c0:	e78c      	b.n	1a4dc <_dtoa_r+0x5dc>
   1a5c2:	461d      	mov	r5, r3
   1a5c4:	e7eb      	b.n	1a59e <_dtoa_r+0x69e>
   1a5c6:	2200      	movs	r2, #0
   1a5c8:	4b9a      	ldr	r3, [pc, #616]	; (1a834 <_dtoa_r+0x934>)
   1a5ca:	f7ff f9af 	bl	1992c <__aeabi_dmul>
   1a5ce:	2200      	movs	r2, #0
   1a5d0:	2300      	movs	r3, #0
   1a5d2:	4606      	mov	r6, r0
   1a5d4:	460f      	mov	r7, r1
   1a5d6:	f7ff fc11 	bl	19dfc <__aeabi_dcmpeq>
   1a5da:	2800      	cmp	r0, #0
   1a5dc:	d09b      	beq.n	1a516 <_dtoa_r+0x616>
   1a5de:	e7cc      	b.n	1a57a <_dtoa_r+0x67a>
   1a5e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a5e2:	2a00      	cmp	r2, #0
   1a5e4:	f000 808b 	beq.w	1a6fe <_dtoa_r+0x7fe>
   1a5e8:	9a06      	ldr	r2, [sp, #24]
   1a5ea:	2a01      	cmp	r2, #1
   1a5ec:	dc6e      	bgt.n	1a6cc <_dtoa_r+0x7cc>
   1a5ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a5f0:	2a00      	cmp	r2, #0
   1a5f2:	d067      	beq.n	1a6c4 <_dtoa_r+0x7c4>
   1a5f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1a5f8:	9f07      	ldr	r7, [sp, #28]
   1a5fa:	9d05      	ldr	r5, [sp, #20]
   1a5fc:	9a05      	ldr	r2, [sp, #20]
   1a5fe:	2101      	movs	r1, #1
   1a600:	4620      	mov	r0, r4
   1a602:	4498      	add	r8, r3
   1a604:	441a      	add	r2, r3
   1a606:	9205      	str	r2, [sp, #20]
   1a608:	f018 fd55 	bl	330b6 <__i2b>
   1a60c:	4606      	mov	r6, r0
   1a60e:	2d00      	cmp	r5, #0
   1a610:	dd0c      	ble.n	1a62c <_dtoa_r+0x72c>
   1a612:	f1b8 0f00 	cmp.w	r8, #0
   1a616:	dd09      	ble.n	1a62c <_dtoa_r+0x72c>
   1a618:	4545      	cmp	r5, r8
   1a61a:	462b      	mov	r3, r5
   1a61c:	9a05      	ldr	r2, [sp, #20]
   1a61e:	bfa8      	it	ge
   1a620:	4643      	movge	r3, r8
   1a622:	1ad2      	subs	r2, r2, r3
   1a624:	1aed      	subs	r5, r5, r3
   1a626:	eba8 0803 	sub.w	r8, r8, r3
   1a62a:	9205      	str	r2, [sp, #20]
   1a62c:	9b07      	ldr	r3, [sp, #28]
   1a62e:	b1eb      	cbz	r3, 1a66c <_dtoa_r+0x76c>
   1a630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a632:	2b00      	cmp	r3, #0
   1a634:	d067      	beq.n	1a706 <_dtoa_r+0x806>
   1a636:	b18f      	cbz	r7, 1a65c <_dtoa_r+0x75c>
   1a638:	4631      	mov	r1, r6
   1a63a:	463a      	mov	r2, r7
   1a63c:	4620      	mov	r0, r4
   1a63e:	f016 fba9 	bl	30d94 <__pow5mult>
   1a642:	9a04      	ldr	r2, [sp, #16]
   1a644:	4601      	mov	r1, r0
   1a646:	4606      	mov	r6, r0
   1a648:	4620      	mov	r0, r4
   1a64a:	f018 fd3d 	bl	330c8 <__multiply>
   1a64e:	9904      	ldr	r1, [sp, #16]
   1a650:	9008      	str	r0, [sp, #32]
   1a652:	4620      	mov	r0, r4
   1a654:	f018 fc8d 	bl	32f72 <_Bfree>
   1a658:	9b08      	ldr	r3, [sp, #32]
   1a65a:	9304      	str	r3, [sp, #16]
   1a65c:	9b07      	ldr	r3, [sp, #28]
   1a65e:	1bda      	subs	r2, r3, r7
   1a660:	d004      	beq.n	1a66c <_dtoa_r+0x76c>
   1a662:	9904      	ldr	r1, [sp, #16]
   1a664:	4620      	mov	r0, r4
   1a666:	f016 fb95 	bl	30d94 <__pow5mult>
   1a66a:	9004      	str	r0, [sp, #16]
   1a66c:	2101      	movs	r1, #1
   1a66e:	4620      	mov	r0, r4
   1a670:	f018 fd21 	bl	330b6 <__i2b>
   1a674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a676:	4607      	mov	r7, r0
   1a678:	2b00      	cmp	r3, #0
   1a67a:	f000 81cd 	beq.w	1aa18 <_dtoa_r+0xb18>
   1a67e:	461a      	mov	r2, r3
   1a680:	4601      	mov	r1, r0
   1a682:	4620      	mov	r0, r4
   1a684:	f016 fb86 	bl	30d94 <__pow5mult>
   1a688:	9b06      	ldr	r3, [sp, #24]
   1a68a:	4607      	mov	r7, r0
   1a68c:	2b01      	cmp	r3, #1
   1a68e:	dc40      	bgt.n	1a712 <_dtoa_r+0x812>
   1a690:	9b00      	ldr	r3, [sp, #0]
   1a692:	2b00      	cmp	r3, #0
   1a694:	d139      	bne.n	1a70a <_dtoa_r+0x80a>
   1a696:	9b01      	ldr	r3, [sp, #4]
   1a698:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1a69c:	2b00      	cmp	r3, #0
   1a69e:	d136      	bne.n	1a70e <_dtoa_r+0x80e>
   1a6a0:	9b01      	ldr	r3, [sp, #4]
   1a6a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1a6a6:	0d1b      	lsrs	r3, r3, #20
   1a6a8:	051b      	lsls	r3, r3, #20
   1a6aa:	b12b      	cbz	r3, 1a6b8 <_dtoa_r+0x7b8>
   1a6ac:	9b05      	ldr	r3, [sp, #20]
   1a6ae:	f108 0801 	add.w	r8, r8, #1
   1a6b2:	3301      	adds	r3, #1
   1a6b4:	9305      	str	r3, [sp, #20]
   1a6b6:	2301      	movs	r3, #1
   1a6b8:	9307      	str	r3, [sp, #28]
   1a6ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a6bc:	2b00      	cmp	r3, #0
   1a6be:	d12a      	bne.n	1a716 <_dtoa_r+0x816>
   1a6c0:	2001      	movs	r0, #1
   1a6c2:	e030      	b.n	1a726 <_dtoa_r+0x826>
   1a6c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1a6c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1a6ca:	e795      	b.n	1a5f8 <_dtoa_r+0x6f8>
   1a6cc:	9b07      	ldr	r3, [sp, #28]
   1a6ce:	f109 37ff 	add.w	r7, r9, #4294967295
   1a6d2:	42bb      	cmp	r3, r7
   1a6d4:	bfb7      	itett	lt
   1a6d6:	9b07      	ldrlt	r3, [sp, #28]
   1a6d8:	1bdf      	subge	r7, r3, r7
   1a6da:	9707      	strlt	r7, [sp, #28]
   1a6dc:	1afa      	sublt	r2, r7, r3
   1a6de:	bfbf      	itttt	lt
   1a6e0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
   1a6e2:	2700      	movlt	r7, #0
   1a6e4:	189b      	addlt	r3, r3, r2
   1a6e6:	930e      	strlt	r3, [sp, #56]	; 0x38
   1a6e8:	f1b9 0f00 	cmp.w	r9, #0
   1a6ec:	bfb3      	iteet	lt
   1a6ee:	9b05      	ldrlt	r3, [sp, #20]
   1a6f0:	464b      	movge	r3, r9
   1a6f2:	9d05      	ldrge	r5, [sp, #20]
   1a6f4:	eba3 0509 	sublt.w	r5, r3, r9
   1a6f8:	bfb8      	it	lt
   1a6fa:	2300      	movlt	r3, #0
   1a6fc:	e77e      	b.n	1a5fc <_dtoa_r+0x6fc>
   1a6fe:	9f07      	ldr	r7, [sp, #28]
   1a700:	9d05      	ldr	r5, [sp, #20]
   1a702:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1a704:	e783      	b.n	1a60e <_dtoa_r+0x70e>
   1a706:	9a07      	ldr	r2, [sp, #28]
   1a708:	e7ab      	b.n	1a662 <_dtoa_r+0x762>
   1a70a:	2300      	movs	r3, #0
   1a70c:	e7d4      	b.n	1a6b8 <_dtoa_r+0x7b8>
   1a70e:	9b00      	ldr	r3, [sp, #0]
   1a710:	e7d2      	b.n	1a6b8 <_dtoa_r+0x7b8>
   1a712:	2300      	movs	r3, #0
   1a714:	9307      	str	r3, [sp, #28]
   1a716:	693b      	ldr	r3, [r7, #16]
   1a718:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   1a71c:	6918      	ldr	r0, [r3, #16]
   1a71e:	f018 fc7c 	bl	3301a <__hi0bits>
   1a722:	f1c0 0020 	rsb	r0, r0, #32
   1a726:	4440      	add	r0, r8
   1a728:	f010 001f 	ands.w	r0, r0, #31
   1a72c:	d047      	beq.n	1a7be <_dtoa_r+0x8be>
   1a72e:	f1c0 0320 	rsb	r3, r0, #32
   1a732:	2b04      	cmp	r3, #4
   1a734:	dd3b      	ble.n	1a7ae <_dtoa_r+0x8ae>
   1a736:	f1c0 001c 	rsb	r0, r0, #28
   1a73a:	9b05      	ldr	r3, [sp, #20]
   1a73c:	4405      	add	r5, r0
   1a73e:	4403      	add	r3, r0
   1a740:	4480      	add	r8, r0
   1a742:	9305      	str	r3, [sp, #20]
   1a744:	9b05      	ldr	r3, [sp, #20]
   1a746:	2b00      	cmp	r3, #0
   1a748:	dd05      	ble.n	1a756 <_dtoa_r+0x856>
   1a74a:	461a      	mov	r2, r3
   1a74c:	9904      	ldr	r1, [sp, #16]
   1a74e:	4620      	mov	r0, r4
   1a750:	f018 fd4f 	bl	331f2 <__lshift>
   1a754:	9004      	str	r0, [sp, #16]
   1a756:	f1b8 0f00 	cmp.w	r8, #0
   1a75a:	dd05      	ble.n	1a768 <_dtoa_r+0x868>
   1a75c:	4639      	mov	r1, r7
   1a75e:	4642      	mov	r2, r8
   1a760:	4620      	mov	r0, r4
   1a762:	f018 fd46 	bl	331f2 <__lshift>
   1a766:	4607      	mov	r7, r0
   1a768:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a76a:	b353      	cbz	r3, 1a7c2 <_dtoa_r+0x8c2>
   1a76c:	4639      	mov	r1, r7
   1a76e:	9804      	ldr	r0, [sp, #16]
   1a770:	f018 fd93 	bl	3329a <__mcmp>
   1a774:	2800      	cmp	r0, #0
   1a776:	da24      	bge.n	1a7c2 <_dtoa_r+0x8c2>
   1a778:	2300      	movs	r3, #0
   1a77a:	220a      	movs	r2, #10
   1a77c:	9904      	ldr	r1, [sp, #16]
   1a77e:	4620      	mov	r0, r4
   1a780:	f018 fc0e 	bl	32fa0 <__multadd>
   1a784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a786:	f10a 3aff 	add.w	sl, sl, #4294967295
   1a78a:	9004      	str	r0, [sp, #16]
   1a78c:	2b00      	cmp	r3, #0
   1a78e:	f000 814a 	beq.w	1aa26 <_dtoa_r+0xb26>
   1a792:	2300      	movs	r3, #0
   1a794:	4631      	mov	r1, r6
   1a796:	220a      	movs	r2, #10
   1a798:	4620      	mov	r0, r4
   1a79a:	f018 fc01 	bl	32fa0 <__multadd>
   1a79e:	9b02      	ldr	r3, [sp, #8]
   1a7a0:	4606      	mov	r6, r0
   1a7a2:	2b00      	cmp	r3, #0
   1a7a4:	dc4e      	bgt.n	1a844 <_dtoa_r+0x944>
   1a7a6:	9b06      	ldr	r3, [sp, #24]
   1a7a8:	2b02      	cmp	r3, #2
   1a7aa:	dd4b      	ble.n	1a844 <_dtoa_r+0x944>
   1a7ac:	e011      	b.n	1a7d2 <_dtoa_r+0x8d2>
   1a7ae:	d0c9      	beq.n	1a744 <_dtoa_r+0x844>
   1a7b0:	331c      	adds	r3, #28
   1a7b2:	9a05      	ldr	r2, [sp, #20]
   1a7b4:	441a      	add	r2, r3
   1a7b6:	441d      	add	r5, r3
   1a7b8:	4498      	add	r8, r3
   1a7ba:	9205      	str	r2, [sp, #20]
   1a7bc:	e7c2      	b.n	1a744 <_dtoa_r+0x844>
   1a7be:	4603      	mov	r3, r0
   1a7c0:	e7f6      	b.n	1a7b0 <_dtoa_r+0x8b0>
   1a7c2:	f1b9 0f00 	cmp.w	r9, #0
   1a7c6:	dc37      	bgt.n	1a838 <_dtoa_r+0x938>
   1a7c8:	9b06      	ldr	r3, [sp, #24]
   1a7ca:	2b02      	cmp	r3, #2
   1a7cc:	dd34      	ble.n	1a838 <_dtoa_r+0x938>
   1a7ce:	f8cd 9008 	str.w	r9, [sp, #8]
   1a7d2:	9b02      	ldr	r3, [sp, #8]
   1a7d4:	b963      	cbnz	r3, 1a7f0 <_dtoa_r+0x8f0>
   1a7d6:	4639      	mov	r1, r7
   1a7d8:	2205      	movs	r2, #5
   1a7da:	4620      	mov	r0, r4
   1a7dc:	f018 fbe0 	bl	32fa0 <__multadd>
   1a7e0:	4601      	mov	r1, r0
   1a7e2:	4607      	mov	r7, r0
   1a7e4:	9804      	ldr	r0, [sp, #16]
   1a7e6:	f018 fd58 	bl	3329a <__mcmp>
   1a7ea:	2800      	cmp	r0, #0
   1a7ec:	f73f adcd 	bgt.w	1a38a <_dtoa_r+0x48a>
   1a7f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a7f2:	465d      	mov	r5, fp
   1a7f4:	ea6f 0a03 	mvn.w	sl, r3
   1a7f8:	f04f 0900 	mov.w	r9, #0
   1a7fc:	4639      	mov	r1, r7
   1a7fe:	4620      	mov	r0, r4
   1a800:	f018 fbb7 	bl	32f72 <_Bfree>
   1a804:	2e00      	cmp	r6, #0
   1a806:	f43f aeb8 	beq.w	1a57a <_dtoa_r+0x67a>
   1a80a:	f1b9 0f00 	cmp.w	r9, #0
   1a80e:	d005      	beq.n	1a81c <_dtoa_r+0x91c>
   1a810:	45b1      	cmp	r9, r6
   1a812:	d003      	beq.n	1a81c <_dtoa_r+0x91c>
   1a814:	4649      	mov	r1, r9
   1a816:	4620      	mov	r0, r4
   1a818:	f018 fbab 	bl	32f72 <_Bfree>
   1a81c:	4631      	mov	r1, r6
   1a81e:	4620      	mov	r0, r4
   1a820:	f018 fba7 	bl	32f72 <_Bfree>
   1a824:	e6a9      	b.n	1a57a <_dtoa_r+0x67a>
   1a826:	2700      	movs	r7, #0
   1a828:	463e      	mov	r6, r7
   1a82a:	e7e1      	b.n	1a7f0 <_dtoa_r+0x8f0>
   1a82c:	f8dd a020 	ldr.w	sl, [sp, #32]
   1a830:	463e      	mov	r6, r7
   1a832:	e5aa      	b.n	1a38a <_dtoa_r+0x48a>
   1a834:	40240000 	.word	0x40240000
   1a838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a83a:	f8cd 9008 	str.w	r9, [sp, #8]
   1a83e:	2b00      	cmp	r3, #0
   1a840:	f000 80f8 	beq.w	1aa34 <_dtoa_r+0xb34>
   1a844:	2d00      	cmp	r5, #0
   1a846:	dd05      	ble.n	1a854 <_dtoa_r+0x954>
   1a848:	4631      	mov	r1, r6
   1a84a:	462a      	mov	r2, r5
   1a84c:	4620      	mov	r0, r4
   1a84e:	f018 fcd0 	bl	331f2 <__lshift>
   1a852:	4606      	mov	r6, r0
   1a854:	9b07      	ldr	r3, [sp, #28]
   1a856:	2b00      	cmp	r3, #0
   1a858:	d04c      	beq.n	1a8f4 <_dtoa_r+0x9f4>
   1a85a:	6871      	ldr	r1, [r6, #4]
   1a85c:	4620      	mov	r0, r4
   1a85e:	f018 fb54 	bl	32f0a <_Balloc>
   1a862:	6932      	ldr	r2, [r6, #16]
   1a864:	4605      	mov	r5, r0
   1a866:	f106 010c 	add.w	r1, r6, #12
   1a86a:	3202      	adds	r2, #2
   1a86c:	300c      	adds	r0, #12
   1a86e:	0092      	lsls	r2, r2, #2
   1a870:	f018 f839 	bl	328e6 <memcpy>
   1a874:	2201      	movs	r2, #1
   1a876:	4629      	mov	r1, r5
   1a878:	4620      	mov	r0, r4
   1a87a:	f018 fcba 	bl	331f2 <__lshift>
   1a87e:	9b00      	ldr	r3, [sp, #0]
   1a880:	46b1      	mov	r9, r6
   1a882:	4606      	mov	r6, r0
   1a884:	f8cd b014 	str.w	fp, [sp, #20]
   1a888:	f003 0301 	and.w	r3, r3, #1
   1a88c:	9307      	str	r3, [sp, #28]
   1a88e:	4639      	mov	r1, r7
   1a890:	9804      	ldr	r0, [sp, #16]
   1a892:	f018 fa39 	bl	32d08 <quorem>
   1a896:	4649      	mov	r1, r9
   1a898:	4605      	mov	r5, r0
   1a89a:	f100 0830 	add.w	r8, r0, #48	; 0x30
   1a89e:	9804      	ldr	r0, [sp, #16]
   1a8a0:	f018 fcfb 	bl	3329a <__mcmp>
   1a8a4:	4632      	mov	r2, r6
   1a8a6:	9000      	str	r0, [sp, #0]
   1a8a8:	4639      	mov	r1, r7
   1a8aa:	4620      	mov	r0, r4
   1a8ac:	f018 fd0f 	bl	332ce <__mdiff>
   1a8b0:	68c3      	ldr	r3, [r0, #12]
   1a8b2:	4602      	mov	r2, r0
   1a8b4:	bb03      	cbnz	r3, 1a8f8 <_dtoa_r+0x9f8>
   1a8b6:	4601      	mov	r1, r0
   1a8b8:	9008      	str	r0, [sp, #32]
   1a8ba:	9804      	ldr	r0, [sp, #16]
   1a8bc:	f018 fced 	bl	3329a <__mcmp>
   1a8c0:	9a08      	ldr	r2, [sp, #32]
   1a8c2:	4603      	mov	r3, r0
   1a8c4:	4611      	mov	r1, r2
   1a8c6:	4620      	mov	r0, r4
   1a8c8:	9308      	str	r3, [sp, #32]
   1a8ca:	f018 fb52 	bl	32f72 <_Bfree>
   1a8ce:	9b08      	ldr	r3, [sp, #32]
   1a8d0:	b9a3      	cbnz	r3, 1a8fc <_dtoa_r+0x9fc>
   1a8d2:	9a06      	ldr	r2, [sp, #24]
   1a8d4:	b992      	cbnz	r2, 1a8fc <_dtoa_r+0x9fc>
   1a8d6:	9a07      	ldr	r2, [sp, #28]
   1a8d8:	b982      	cbnz	r2, 1a8fc <_dtoa_r+0x9fc>
   1a8da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   1a8de:	d029      	beq.n	1a934 <_dtoa_r+0xa34>
   1a8e0:	9b00      	ldr	r3, [sp, #0]
   1a8e2:	2b00      	cmp	r3, #0
   1a8e4:	dd01      	ble.n	1a8ea <_dtoa_r+0x9ea>
   1a8e6:	f105 0831 	add.w	r8, r5, #49	; 0x31
   1a8ea:	9b05      	ldr	r3, [sp, #20]
   1a8ec:	1c5d      	adds	r5, r3, #1
   1a8ee:	f883 8000 	strb.w	r8, [r3]
   1a8f2:	e783      	b.n	1a7fc <_dtoa_r+0x8fc>
   1a8f4:	4630      	mov	r0, r6
   1a8f6:	e7c2      	b.n	1a87e <_dtoa_r+0x97e>
   1a8f8:	2301      	movs	r3, #1
   1a8fa:	e7e3      	b.n	1a8c4 <_dtoa_r+0x9c4>
   1a8fc:	9a00      	ldr	r2, [sp, #0]
   1a8fe:	2a00      	cmp	r2, #0
   1a900:	db04      	blt.n	1a90c <_dtoa_r+0xa0c>
   1a902:	d124      	bne.n	1a94e <_dtoa_r+0xa4e>
   1a904:	9a06      	ldr	r2, [sp, #24]
   1a906:	bb12      	cbnz	r2, 1a94e <_dtoa_r+0xa4e>
   1a908:	9a07      	ldr	r2, [sp, #28]
   1a90a:	bb02      	cbnz	r2, 1a94e <_dtoa_r+0xa4e>
   1a90c:	2b00      	cmp	r3, #0
   1a90e:	ddec      	ble.n	1a8ea <_dtoa_r+0x9ea>
   1a910:	2201      	movs	r2, #1
   1a912:	9904      	ldr	r1, [sp, #16]
   1a914:	4620      	mov	r0, r4
   1a916:	f018 fc6c 	bl	331f2 <__lshift>
   1a91a:	4639      	mov	r1, r7
   1a91c:	9004      	str	r0, [sp, #16]
   1a91e:	f018 fcbc 	bl	3329a <__mcmp>
   1a922:	2800      	cmp	r0, #0
   1a924:	dc03      	bgt.n	1a92e <_dtoa_r+0xa2e>
   1a926:	d1e0      	bne.n	1a8ea <_dtoa_r+0x9ea>
   1a928:	f018 0f01 	tst.w	r8, #1
   1a92c:	d0dd      	beq.n	1a8ea <_dtoa_r+0x9ea>
   1a92e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   1a932:	d1d8      	bne.n	1a8e6 <_dtoa_r+0x9e6>
   1a934:	9b05      	ldr	r3, [sp, #20]
   1a936:	9a05      	ldr	r2, [sp, #20]
   1a938:	1c5d      	adds	r5, r3, #1
   1a93a:	2339      	movs	r3, #57	; 0x39
   1a93c:	7013      	strb	r3, [r2, #0]
   1a93e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1a942:	1e6a      	subs	r2, r5, #1
   1a944:	2b39      	cmp	r3, #57	; 0x39
   1a946:	d04e      	beq.n	1a9e6 <_dtoa_r+0xae6>
   1a948:	3301      	adds	r3, #1
   1a94a:	7013      	strb	r3, [r2, #0]
   1a94c:	e756      	b.n	1a7fc <_dtoa_r+0x8fc>
   1a94e:	9a05      	ldr	r2, [sp, #20]
   1a950:	2b00      	cmp	r3, #0
   1a952:	f102 0501 	add.w	r5, r2, #1
   1a956:	dd06      	ble.n	1a966 <_dtoa_r+0xa66>
   1a958:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   1a95c:	d0ea      	beq.n	1a934 <_dtoa_r+0xa34>
   1a95e:	f108 0801 	add.w	r8, r8, #1
   1a962:	9b05      	ldr	r3, [sp, #20]
   1a964:	e7c3      	b.n	1a8ee <_dtoa_r+0x9ee>
   1a966:	eba5 030b 	sub.w	r3, r5, fp
   1a96a:	9a02      	ldr	r2, [sp, #8]
   1a96c:	f805 8c01 	strb.w	r8, [r5, #-1]
   1a970:	4293      	cmp	r3, r2
   1a972:	d021      	beq.n	1a9b8 <_dtoa_r+0xab8>
   1a974:	2300      	movs	r3, #0
   1a976:	220a      	movs	r2, #10
   1a978:	9904      	ldr	r1, [sp, #16]
   1a97a:	4620      	mov	r0, r4
   1a97c:	f018 fb10 	bl	32fa0 <__multadd>
   1a980:	45b1      	cmp	r9, r6
   1a982:	9004      	str	r0, [sp, #16]
   1a984:	f04f 0300 	mov.w	r3, #0
   1a988:	f04f 020a 	mov.w	r2, #10
   1a98c:	4649      	mov	r1, r9
   1a98e:	4620      	mov	r0, r4
   1a990:	d105      	bne.n	1a99e <_dtoa_r+0xa9e>
   1a992:	f018 fb05 	bl	32fa0 <__multadd>
   1a996:	4681      	mov	r9, r0
   1a998:	4606      	mov	r6, r0
   1a99a:	9505      	str	r5, [sp, #20]
   1a99c:	e777      	b.n	1a88e <_dtoa_r+0x98e>
   1a99e:	f018 faff 	bl	32fa0 <__multadd>
   1a9a2:	4631      	mov	r1, r6
   1a9a4:	4681      	mov	r9, r0
   1a9a6:	2300      	movs	r3, #0
   1a9a8:	220a      	movs	r2, #10
   1a9aa:	4620      	mov	r0, r4
   1a9ac:	f018 faf8 	bl	32fa0 <__multadd>
   1a9b0:	4606      	mov	r6, r0
   1a9b2:	e7f2      	b.n	1a99a <_dtoa_r+0xa9a>
   1a9b4:	f04f 0900 	mov.w	r9, #0
   1a9b8:	2201      	movs	r2, #1
   1a9ba:	9904      	ldr	r1, [sp, #16]
   1a9bc:	4620      	mov	r0, r4
   1a9be:	f018 fc18 	bl	331f2 <__lshift>
   1a9c2:	4639      	mov	r1, r7
   1a9c4:	9004      	str	r0, [sp, #16]
   1a9c6:	f018 fc68 	bl	3329a <__mcmp>
   1a9ca:	2800      	cmp	r0, #0
   1a9cc:	dcb7      	bgt.n	1a93e <_dtoa_r+0xa3e>
   1a9ce:	d102      	bne.n	1a9d6 <_dtoa_r+0xad6>
   1a9d0:	f018 0f01 	tst.w	r8, #1
   1a9d4:	d1b3      	bne.n	1a93e <_dtoa_r+0xa3e>
   1a9d6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1a9da:	1e6a      	subs	r2, r5, #1
   1a9dc:	2b30      	cmp	r3, #48	; 0x30
   1a9de:	f47f af0d 	bne.w	1a7fc <_dtoa_r+0x8fc>
   1a9e2:	4615      	mov	r5, r2
   1a9e4:	e7f7      	b.n	1a9d6 <_dtoa_r+0xad6>
   1a9e6:	4593      	cmp	fp, r2
   1a9e8:	d105      	bne.n	1a9f6 <_dtoa_r+0xaf6>
   1a9ea:	2331      	movs	r3, #49	; 0x31
   1a9ec:	f10a 0a01 	add.w	sl, sl, #1
   1a9f0:	f88b 3000 	strb.w	r3, [fp]
   1a9f4:	e702      	b.n	1a7fc <_dtoa_r+0x8fc>
   1a9f6:	4615      	mov	r5, r2
   1a9f8:	e7a1      	b.n	1a93e <_dtoa_r+0xa3e>
   1a9fa:	f8df b064 	ldr.w	fp, [pc, #100]	; 1aa60 <_dtoa_r+0xb60>
   1a9fe:	e007      	b.n	1aa10 <_dtoa_r+0xb10>
   1aa00:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1aa02:	f8df b060 	ldr.w	fp, [pc, #96]	; 1aa64 <_dtoa_r+0xb64>
   1aa06:	b11b      	cbz	r3, 1aa10 <_dtoa_r+0xb10>
   1aa08:	f10b 0308 	add.w	r3, fp, #8
   1aa0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1aa0e:	6013      	str	r3, [r2, #0]
   1aa10:	4658      	mov	r0, fp
   1aa12:	b017      	add	sp, #92	; 0x5c
   1aa14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa18:	9b06      	ldr	r3, [sp, #24]
   1aa1a:	2b01      	cmp	r3, #1
   1aa1c:	f77f ae38 	ble.w	1a690 <_dtoa_r+0x790>
   1aa20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1aa22:	9307      	str	r3, [sp, #28]
   1aa24:	e64c      	b.n	1a6c0 <_dtoa_r+0x7c0>
   1aa26:	9b02      	ldr	r3, [sp, #8]
   1aa28:	2b00      	cmp	r3, #0
   1aa2a:	dc03      	bgt.n	1aa34 <_dtoa_r+0xb34>
   1aa2c:	9b06      	ldr	r3, [sp, #24]
   1aa2e:	2b02      	cmp	r3, #2
   1aa30:	f73f aecf 	bgt.w	1a7d2 <_dtoa_r+0x8d2>
   1aa34:	465d      	mov	r5, fp
   1aa36:	4639      	mov	r1, r7
   1aa38:	9804      	ldr	r0, [sp, #16]
   1aa3a:	f018 f965 	bl	32d08 <quorem>
   1aa3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
   1aa42:	9a02      	ldr	r2, [sp, #8]
   1aa44:	f805 8b01 	strb.w	r8, [r5], #1
   1aa48:	eba5 030b 	sub.w	r3, r5, fp
   1aa4c:	429a      	cmp	r2, r3
   1aa4e:	ddb1      	ble.n	1a9b4 <_dtoa_r+0xab4>
   1aa50:	2300      	movs	r3, #0
   1aa52:	220a      	movs	r2, #10
   1aa54:	9904      	ldr	r1, [sp, #16]
   1aa56:	4620      	mov	r0, r4
   1aa58:	f018 faa2 	bl	32fa0 <__multadd>
   1aa5c:	9004      	str	r0, [sp, #16]
   1aa5e:	e7ea      	b.n	1aa36 <_dtoa_r+0xb36>
   1aa60:	0003686f 	.word	0x0003686f
   1aa64:	00036ef7 	.word	0x00036ef7

0001aa68 <led_blink_show_timerout>:
    printk("Could not set leds state, err code: %d\n", err);
  }
}

static void led_blink_show_timerout(struct k_timer *timer)
{
   1aa68:	b508      	push	{r3, lr}
  printk("led_blink_show_timerout\n");
   1aa6a:	4812      	ldr	r0, [pc, #72]	; (1aab4 <led_blink_show_timerout+0x4c>)
   1aa6c:	f016 ff04 	bl	31878 <printk>

  if(flag == 1)
   1aa70:	4b11      	ldr	r3, [pc, #68]	; (1aab8 <led_blink_show_timerout+0x50>)
   1aa72:	681b      	ldr	r3, [r3, #0]
   1aa74:	2b01      	cmp	r3, #1
   1aa76:	4b11      	ldr	r3, [pc, #68]	; (1aabc <led_blink_show_timerout+0x54>)
  {
    index++;
   1aa78:	681a      	ldr	r2, [r3, #0]
  if(flag == 1)
   1aa7a:	d115      	bne.n	1aaa8 <led_blink_show_timerout+0x40>
    index++;
   1aa7c:	3201      	adds	r2, #1
    if(index >= 4)
   1aa7e:	2a03      	cmp	r2, #3
      index = 0;
   1aa80:	bfc8      	it	gt
   1aa82:	2200      	movgt	r2, #0
  }
  else
  {
    if(index == 0)
      index = 4;
    index--;
   1aa84:	601a      	str	r2, [r3, #0]
  }
  
  dk_set_leds_state(led_blink_loop[index].led_on_mask, led_blink_loop[index].led_off_mask);
   1aa86:	681a      	ldr	r2, [r3, #0]
   1aa88:	4b0d      	ldr	r3, [pc, #52]	; (1aac0 <led_blink_show_timerout+0x58>)
   1aa8a:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   1aa8e:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
   1aa92:	6849      	ldr	r1, [r1, #4]
   1aa94:	f017 fd9e 	bl	325d4 <dk_set_leds_state>

  //k_timer_stop(&led_blink_timer);
  k_timer_start(&led_blink_timer, K_MSEC(delay_ms), K_NO_WAIT);
   1aa98:	4b0a      	ldr	r3, [pc, #40]	; (1aac4 <led_blink_show_timerout+0x5c>)
   1aa9a:	6819      	ldr	r1, [r3, #0]
		z_arch_syscall_invoke3(*(u32_t *)&timer, *(u32_t *)&duration, *(u32_t *)&period, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
   1aa9c:	2200      	movs	r2, #0
}
   1aa9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1aaa2:	4809      	ldr	r0, [pc, #36]	; (1aac8 <led_blink_show_timerout+0x60>)
   1aaa4:	f014 bba0 	b.w	2f1e8 <z_impl_k_timer_start>
    if(index == 0)
   1aaa8:	b90a      	cbnz	r2, 1aaae <led_blink_show_timerout+0x46>
      index = 4;
   1aaaa:	2204      	movs	r2, #4
   1aaac:	601a      	str	r2, [r3, #0]
    index--;
   1aaae:	681a      	ldr	r2, [r3, #0]
   1aab0:	3a01      	subs	r2, #1
   1aab2:	e7e7      	b.n	1aa84 <led_blink_show_timerout+0x1c>
   1aab4:	00034f1c 	.word	0x00034f1c
   1aab8:	20020008 	.word	0x20020008
   1aabc:	2002000c 	.word	0x2002000c
   1aac0:	00033ab8 	.word	0x00033ab8
   1aac4:	20028dcc 	.word	0x20028dcc
   1aac8:	20020010 	.word	0x20020010

0001aacc <button_handler>:
  u32_t buttons = (button_state & has_changed);
   1aacc:	4001      	ands	r1, r0
  if (buttons & BUTTON_1) 
   1aace:	07ca      	lsls	r2, r1, #31
   1aad0:	d51b      	bpl.n	1ab0a <button_handler+0x3e>
    if(flag == 1)
   1aad2:	4b1e      	ldr	r3, [pc, #120]	; (1ab4c <button_handler+0x80>)
   1aad4:	681a      	ldr	r2, [r3, #0]
   1aad6:	2a01      	cmp	r2, #1
   1aad8:	d102      	bne.n	1aae0 <button_handler+0x14>
      flag = 0;
   1aada:	2200      	movs	r2, #0
          step = 1;
   1aadc:	601a      	str	r2, [r3, #0]
   1aade:	e014      	b.n	1ab0a <button_handler+0x3e>
      if(step == 1)
   1aae0:	4b1b      	ldr	r3, [pc, #108]	; (1ab50 <button_handler+0x84>)
   1aae2:	681a      	ldr	r2, [r3, #0]
   1aae4:	2a01      	cmp	r2, #1
   1aae6:	d108      	bne.n	1aafa <button_handler+0x2e>
        if(delay_ms < 2000)
   1aae8:	481a      	ldr	r0, [pc, #104]	; (1ab54 <button_handler+0x88>)
   1aaea:	6802      	ldr	r2, [r0, #0]
   1aaec:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
          step = 0;
   1aaf0:	bfad      	iteet	ge
   1aaf2:	2200      	movge	r2, #0
          delay_ms += 100;
   1aaf4:	3264      	addlt	r2, #100	; 0x64
   1aaf6:	6002      	strlt	r2, [r0, #0]
          step = 0;
   1aaf8:	601a      	strge	r2, [r3, #0]
      if(step == 0)
   1aafa:	681a      	ldr	r2, [r3, #0]
   1aafc:	b92a      	cbnz	r2, 1ab0a <button_handler+0x3e>
        if(delay_ms >= 200)
   1aafe:	4815      	ldr	r0, [pc, #84]	; (1ab54 <button_handler+0x88>)
   1ab00:	6802      	ldr	r2, [r0, #0]
   1ab02:	2ac7      	cmp	r2, #199	; 0xc7
   1ab04:	dd09      	ble.n	1ab1a <button_handler+0x4e>
          delay_ms -= 100;
   1ab06:	3a64      	subs	r2, #100	; 0x64
   1ab08:	6002      	str	r2, [r0, #0]
  if (buttons & BUTTON_2) 
   1ab0a:	078b      	lsls	r3, r1, #30
   1ab0c:	d504      	bpl.n	1ab18 <button_handler+0x4c>
    if(flag == 0)
   1ab0e:	4b0f      	ldr	r3, [pc, #60]	; (1ab4c <button_handler+0x80>)
   1ab10:	681a      	ldr	r2, [r3, #0]
   1ab12:	b922      	cbnz	r2, 1ab1e <button_handler+0x52>
          step = 1;
   1ab14:	2201      	movs	r2, #1
   1ab16:	601a      	str	r2, [r3, #0]
}
   1ab18:	4770      	bx	lr
          step = 1;
   1ab1a:	2201      	movs	r2, #1
   1ab1c:	e7de      	b.n	1aadc <button_handler+0x10>
      if(step == 1)
   1ab1e:	4b0c      	ldr	r3, [pc, #48]	; (1ab50 <button_handler+0x84>)
   1ab20:	681a      	ldr	r2, [r3, #0]
   1ab22:	2a01      	cmp	r2, #1
   1ab24:	d108      	bne.n	1ab38 <button_handler+0x6c>
        if(delay_ms < 2000)
   1ab26:	490b      	ldr	r1, [pc, #44]	; (1ab54 <button_handler+0x88>)
   1ab28:	680a      	ldr	r2, [r1, #0]
   1ab2a:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
          step = 0;
   1ab2e:	bfad      	iteet	ge
   1ab30:	2200      	movge	r2, #0
          delay_ms += 100;
   1ab32:	3264      	addlt	r2, #100	; 0x64
   1ab34:	600a      	strlt	r2, [r1, #0]
          step = 0;
   1ab36:	601a      	strge	r2, [r3, #0]
      if(step == 0)
   1ab38:	681a      	ldr	r2, [r3, #0]
   1ab3a:	2a00      	cmp	r2, #0
   1ab3c:	d1ec      	bne.n	1ab18 <button_handler+0x4c>
        if(delay_ms >= 200)
   1ab3e:	4905      	ldr	r1, [pc, #20]	; (1ab54 <button_handler+0x88>)
   1ab40:	680a      	ldr	r2, [r1, #0]
   1ab42:	2ac7      	cmp	r2, #199	; 0xc7
   1ab44:	dde6      	ble.n	1ab14 <button_handler+0x48>
          delay_ms -= 100;
   1ab46:	3a64      	subs	r2, #100	; 0x64
   1ab48:	600a      	str	r2, [r1, #0]
   1ab4a:	4770      	bx	lr
   1ab4c:	20020008 	.word	0x20020008
   1ab50:	20028dd0 	.word	0x20028dd0
   1ab54:	20028dcc 	.word	0x20028dcc

0001ab58 <led_blink_test_main>:

void led_blink_test_main(void)
{
   1ab58:	b508      	push	{r3, lr}
  err = dk_buttons_init(button_handler);
   1ab5a:	4812      	ldr	r0, [pc, #72]	; (1aba4 <led_blink_test_main+0x4c>)
   1ab5c:	f003 f95a 	bl	1de14 <dk_buttons_init>
  if (err)
   1ab60:	4601      	mov	r1, r0
   1ab62:	b110      	cbz	r0, 1ab6a <led_blink_test_main+0x12>
    printk("Could not initialize buttons, err code: %d\n", err);
   1ab64:	4810      	ldr	r0, [pc, #64]	; (1aba8 <led_blink_test_main+0x50>)
   1ab66:	f016 fe87 	bl	31878 <printk>
  err = dk_leds_init();
   1ab6a:	f003 f8f3 	bl	1dd54 <dk_leds_init>
  if (err)
   1ab6e:	4601      	mov	r1, r0
   1ab70:	b110      	cbz	r0, 1ab78 <led_blink_test_main+0x20>
    printk("Could not initialize leds, err code: %d\n", err);
   1ab72:	480e      	ldr	r0, [pc, #56]	; (1abac <led_blink_test_main+0x54>)
   1ab74:	f016 fe80 	bl	31878 <printk>
  err = dk_set_leds_state(0x00, DK_ALL_LEDS_MSK);
   1ab78:	210f      	movs	r1, #15
   1ab7a:	2000      	movs	r0, #0
   1ab7c:	f017 fd2a 	bl	325d4 <dk_set_leds_state>
  if (err)
   1ab80:	4601      	mov	r1, r0
   1ab82:	b110      	cbz	r0, 1ab8a <led_blink_test_main+0x32>
    printk("Could not set leds state, err code: %d\n", err);
   1ab84:	480a      	ldr	r0, [pc, #40]	; (1abb0 <led_blink_test_main+0x58>)
   1ab86:	f016 fe77 	bl	31878 <printk>
  buttons_leds_init();

  k_timer_init(&led_blink_timer, led_blink_show_timerout, NULL);
   1ab8a:	2200      	movs	r2, #0
   1ab8c:	4909      	ldr	r1, [pc, #36]	; (1abb4 <led_blink_test_main+0x5c>)
   1ab8e:	480a      	ldr	r0, [pc, #40]	; (1abb8 <led_blink_test_main+0x60>)
   1ab90:	f017 fe1c 	bl	327cc <k_timer_init>
  k_timer_start(&led_blink_timer, K_MSEC(delay_ms), K_NO_WAIT);
   1ab94:	4b09      	ldr	r3, [pc, #36]	; (1abbc <led_blink_test_main+0x64>)
   1ab96:	6819      	ldr	r1, [r3, #0]
   1ab98:	2200      	movs	r2, #0
}
   1ab9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1ab9e:	4806      	ldr	r0, [pc, #24]	; (1abb8 <led_blink_test_main+0x60>)
   1aba0:	f014 bb22 	b.w	2f1e8 <z_impl_k_timer_start>
   1aba4:	0001aacd 	.word	0x0001aacd
   1aba8:	00034f35 	.word	0x00034f35
   1abac:	00034f61 	.word	0x00034f61
   1abb0:	00034f8a 	.word	0x00034f8a
   1abb4:	0001aa69 	.word	0x0001aa69
   1abb8:	20020010 	.word	0x20020010
   1abbc:	20028dcc 	.word	0x20028dcc

0001abc0 <main>:

void main(void)
{
   1abc0:	b508      	push	{r3, lr}
  printk("Application started\n");
   1abc2:	4803      	ldr	r0, [pc, #12]	; (1abd0 <main+0x10>)
   1abc4:	f016 fe58 	bl	31878 <printk>

  led_blink_test_main();
   1abc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  led_blink_test_main();
   1abcc:	f7ff bfc4 	b.w	1ab58 <led_blink_test_main>
   1abd0:	00034fb2 	.word	0x00034fb2

0001abd4 <z_sys_mem_pool_block_free>:
	return 0;
}

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   1abd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1abd8:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1abda:	7a83      	ldrb	r3, [r0, #10]
{
   1abdc:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1abde:	009b      	lsls	r3, r3, #2
   1abe0:	330a      	adds	r3, #10
   1abe2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1abe6:	ebad 0d03 	sub.w	sp, sp, r3
   1abea:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   1abec:	6843      	ldr	r3, [r0, #4]
{
   1abee:	4605      	mov	r5, r0
   1abf0:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   1abf2:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   1abf4:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   1abf8:	4281      	cmp	r1, r0
   1abfa:	d221      	bcs.n	1ac40 <z_sys_mem_pool_block_free+0x6c>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1abfc:	7c28      	ldrb	r0, [r5, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   1abfe:	460e      	mov	r6, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1ac00:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   1ac04:	4690      	mov	r8, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1ac06:	d001      	beq.n	1ac0c <z_sys_mem_pool_block_free+0x38>
   1ac08:	f016 fb63 	bl	312d2 <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   1ac0c:	4604      	mov	r4, r0
	while (level >= 0) {
   1ac0e:	2e00      	cmp	r6, #0
   1ac10:	da1e      	bge.n	1ac50 <z_sys_mem_pool_block_free+0x7c>
	__ASSERT(0, "out of levels");
   1ac12:	23b0      	movs	r3, #176	; 0xb0
   1ac14:	4a40      	ldr	r2, [pc, #256]	; (1ad18 <z_sys_mem_pool_block_free+0x144>)
   1ac16:	4941      	ldr	r1, [pc, #260]	; (1ad1c <z_sys_mem_pool_block_free+0x148>)
   1ac18:	4841      	ldr	r0, [pc, #260]	; (1ad20 <z_sys_mem_pool_block_free+0x14c>)
   1ac1a:	f016 fe2d 	bl	31878 <printk>
   1ac1e:	4841      	ldr	r0, [pc, #260]	; (1ad24 <z_sys_mem_pool_block_free+0x150>)
   1ac20:	f016 fe2a 	bl	31878 <printk>
   1ac24:	21b0      	movs	r1, #176	; 0xb0
   1ac26:	483c      	ldr	r0, [pc, #240]	; (1ad18 <z_sys_mem_pool_block_free+0x144>)
   1ac28:	f016 fe33 	bl	31892 <assert_post_action>
	return -1;
   1ac2c:	f04f 34ff 	mov.w	r4, #4294967295
	pool_irq_unlock(p, key);
   1ac30:	4621      	mov	r1, r4
   1ac32:	7c28      	ldrb	r0, [r5, #16]
   1ac34:	f016 fb56 	bl	312e4 <pool_irq_unlock.isra.4>
}
   1ac38:	3714      	adds	r7, #20
   1ac3a:	46bd      	mov	sp, r7
   1ac3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1ac40:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   1ac42:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1ac44:	089b      	lsrs	r3, r3, #2
   1ac46:	f023 0303 	bic.w	r3, r3, #3
   1ac4a:	f844 3f04 	str.w	r3, [r4, #4]!
   1ac4e:	e7d3      	b.n	1abf8 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   1ac50:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   1ac54:	4642      	mov	r2, r8
	return (u8_t *)p->buf + lsz * block;
   1ac56:	fb03 fa08 	mul.w	sl, r3, r8
		int i, lsz = lsizes[level];
   1ac5a:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   1ac5c:	682b      	ldr	r3, [r5, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1ac5e:	4631      	mov	r1, r6
	return (u8_t *)p->buf + lsz * block;
   1ac60:	eb03 090a 	add.w	r9, r3, sl
   1ac64:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1ac66:	4628      	mov	r0, r5
   1ac68:	f107 030c 	add.w	r3, r7, #12
   1ac6c:	f016 fb1b 	bl	312a6 <get_bit_ptr>
	*word &= ~(1<<bit);
   1ac70:	2301      	movs	r3, #1
   1ac72:	68fa      	ldr	r2, [r7, #12]
   1ac74:	fa03 f000 	lsl.w	r0, r3, r0
   1ac78:	6813      	ldr	r3, [r2, #0]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   1ac7a:	6839      	ldr	r1, [r7, #0]
   1ac7c:	ea23 0300 	bic.w	r3, r3, r0
   1ac80:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   1ac82:	220c      	movs	r2, #12
   1ac84:	68eb      	ldr	r3, [r5, #12]
   1ac86:	fb02 3306 	mla	r3, r2, r6, r3
   1ac8a:	1d1a      	adds	r2, r3, #4
   1ac8c:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   1ac90:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   1ac92:	4621      	mov	r1, r4
   1ac94:	f8c9 2004 	str.w	r2, [r9, #4]

	list->tail->next = node;
   1ac98:	689a      	ldr	r2, [r3, #8]
   1ac9a:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   1ac9e:	f8c3 9008 	str.w	r9, [r3, #8]
   1aca2:	7c28      	ldrb	r0, [r5, #16]
   1aca4:	f016 fb1e 	bl	312e4 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1aca8:	7c28      	ldrb	r0, [r5, #16]
   1acaa:	f010 0001 	ands.w	r0, r0, #1
   1acae:	d001      	beq.n	1acb4 <z_sys_mem_pool_block_free+0xe0>
   1acb0:	f016 fb0f 	bl	312d2 <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   1acb4:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1acb6:	2e00      	cmp	r6, #0
   1acb8:	d0ba      	beq.n	1ac30 <z_sys_mem_pool_block_free+0x5c>
	int bit = get_bit_ptr(p, level, bn, &word);
   1acba:	f107 030c 	add.w	r3, r7, #12
   1acbe:	4642      	mov	r2, r8
   1acc0:	4631      	mov	r1, r6
   1acc2:	4628      	mov	r0, r5
   1acc4:	f016 faef 	bl	312a6 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   1acc8:	2304      	movs	r3, #4
   1acca:	fb90 f0f3 	sdiv	r0, r0, r3
   1acce:	68fb      	ldr	r3, [r7, #12]
   1acd0:	0080      	lsls	r0, r0, #2
   1acd2:	681b      	ldr	r3, [r3, #0]
   1acd4:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1acd8:	f010 000f 	ands.w	r0, r0, #15
   1acdc:	d1a8      	bne.n	1ac30 <z_sys_mem_pool_block_free+0x5c>
	node->next = NULL;
   1acde:	4686      	mov	lr, r0
			int b = (bn & ~3) + i;
   1ace0:	f028 0a03 	bic.w	sl, r8, #3
	return (u8_t *)p->buf + lsz * block;
   1ace4:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   1ace6:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   1acea:	4353      	muls	r3, r2
   1acec:	682a      	ldr	r2, [r5, #0]
		for (i = 0; i < 4; i++) {
   1acee:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   1acf0:	eb02 0c03 	add.w	ip, r2, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1acf4:	58d1      	ldr	r1, [r2, r3]
   1acf6:	f8dc 9004 	ldr.w	r9, [ip, #4]
		for (i = 0; i < 4; i++) {
   1acfa:	2804      	cmp	r0, #4
   1acfc:	f8c9 1000 	str.w	r1, [r9]
	node->next->prev = node->prev;
   1ad00:	58d1      	ldr	r1, [r2, r3]
   1ad02:	f8c1 9004 	str.w	r9, [r1, #4]
	node->next = NULL;
   1ad06:	f842 e003 	str.w	lr, [r2, r3]
	node->prev = NULL;
   1ad0a:	f8cc e004 	str.w	lr, [ip, #4]
   1ad0e:	d1e9      	bne.n	1ace4 <z_sys_mem_pool_block_free+0x110>
		level = level - 1;
   1ad10:	3e01      	subs	r6, #1
		bn = bn / 4;
   1ad12:	fb98 f8f0 	sdiv	r8, r8, r0
   1ad16:	e77a      	b.n	1ac0e <z_sys_mem_pool_block_free+0x3a>
   1ad18:	00034fc7 	.word	0x00034fc7
   1ad1c:	0003686f 	.word	0x0003686f
   1ad20:	00034ff7 	.word	0x00034ff7
   1ad24:	00035014 	.word	0x00035014

0001ad28 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1ad28:	680b      	ldr	r3, [r1, #0]
   1ad2a:	3301      	adds	r3, #1
   1ad2c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   1ad2e:	4b01      	ldr	r3, [pc, #4]	; (1ad34 <char_out+0xc>)
   1ad30:	681b      	ldr	r3, [r3, #0]
   1ad32:	4718      	bx	r3
   1ad34:	20028dd4 	.word	0x20028dd4

0001ad38 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
   1ad38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad3c:	b085      	sub	sp, #20
   1ad3e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1ad40:	469b      	mov	fp, r3
   1ad42:	2c01      	cmp	r4, #1
   1ad44:	bfb8      	it	lt
   1ad46:	2401      	movlt	r4, #1
   1ad48:	2b01      	cmp	r3, #1
   1ad4a:	bf0c      	ite	eq
   1ad4c:	2330      	moveq	r3, #48	; 0x30
   1ad4e:	2320      	movne	r3, #32
   1ad50:	4616      	mov	r6, r2
   1ad52:	4682      	mov	sl, r0
   1ad54:	4688      	mov	r8, r1
   1ad56:	2501      	movs	r5, #1
   1ad58:	270a      	movs	r7, #10
   1ad5a:	2200      	movs	r2, #0
   1ad5c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1adcc <_printk_dec_ulong+0x94>
   1ad60:	9302      	str	r3, [sp, #8]
   1ad62:	fbb6 f3f9 	udiv	r3, r6, r9
   1ad66:	9301      	str	r3, [sp, #4]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
   1ad68:	b90a      	cbnz	r2, 1ad6e <_printk_dec_ulong+0x36>
   1ad6a:	45b1      	cmp	r9, r6
   1ad6c:	d81c      	bhi.n	1ada8 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
   1ad6e:	9b01      	ldr	r3, [sp, #4]
   1ad70:	4641      	mov	r1, r8
   1ad72:	f103 0030 	add.w	r0, r3, #48	; 0x30
   1ad76:	47d0      	blx	sl
			found_largest_digit = 1;
   1ad78:	2201      	movs	r2, #1
			digits++;
   1ad7a:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
   1ad7c:	9b01      	ldr	r3, [sp, #4]
		remaining--;
   1ad7e:	3f01      	subs	r7, #1
		remainder %= pos;
   1ad80:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
   1ad84:	230a      	movs	r3, #10
	while (pos >= 10) {
   1ad86:	2f01      	cmp	r7, #1
		pos /= 10;
   1ad88:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
   1ad8c:	d1e9      	bne.n	1ad62 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
   1ad8e:	4641      	mov	r1, r8
   1ad90:	f106 0030 	add.w	r0, r6, #48	; 0x30
   1ad94:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
   1ad96:	f1bb 0f03 	cmp.w	fp, #3
   1ad9a:	d102      	bne.n	1ada2 <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
   1ad9c:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
   1ad9e:	2c00      	cmp	r4, #0
   1ada0:	dc0e      	bgt.n	1adc0 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
   1ada2:	b005      	add	sp, #20
   1ada4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
   1ada8:	42bc      	cmp	r4, r7
   1adaa:	dbe7      	blt.n	1ad7c <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
   1adac:	f1bb 0f02 	cmp.w	fp, #2
   1adb0:	d8e4      	bhi.n	1ad7c <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   1adb2:	4641      	mov	r1, r8
   1adb4:	9802      	ldr	r0, [sp, #8]
   1adb6:	9203      	str	r2, [sp, #12]
			digits++;
   1adb8:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   1adba:	47d0      	blx	sl
			digits++;
   1adbc:	9a03      	ldr	r2, [sp, #12]
   1adbe:	e7dd      	b.n	1ad7c <_printk_dec_ulong+0x44>
			out(' ', ctx);
   1adc0:	4641      	mov	r1, r8
   1adc2:	2020      	movs	r0, #32
   1adc4:	47d0      	blx	sl
   1adc6:	3c01      	subs	r4, #1
   1adc8:	e7e9      	b.n	1ad9e <_printk_dec_ulong+0x66>
   1adca:	bf00      	nop
   1adcc:	3b9aca00 	.word	0x3b9aca00

0001add0 <__printk_hook_install>:
	_char_out = fn;
   1add0:	4b01      	ldr	r3, [pc, #4]	; (1add8 <__printk_hook_install+0x8>)
   1add2:	6018      	str	r0, [r3, #0]
}
   1add4:	4770      	bx	lr
   1add6:	bf00      	nop
   1add8:	20028dd4 	.word	0x20028dd4

0001addc <vprintk>:
	struct out_context ctx = { 0 };
   1addc:	2300      	movs	r3, #0
{
   1adde:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
   1ade0:	ac02      	add	r4, sp, #8
   1ade2:	f844 3d04 	str.w	r3, [r4, #-4]!
	z_vprintk(char_out, &ctx, fmt, ap);
   1ade6:	4602      	mov	r2, r0
   1ade8:	460b      	mov	r3, r1
   1adea:	4803      	ldr	r0, [pc, #12]	; (1adf8 <vprintk+0x1c>)
   1adec:	4621      	mov	r1, r4
   1adee:	f016 fbcd 	bl	3158c <z_vprintk>
}
   1adf2:	b002      	add	sp, #8
   1adf4:	bd10      	pop	{r4, pc}
   1adf6:	bf00      	nop
   1adf8:	0001ad29 	.word	0x0001ad29

0001adfc <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   1adfc:	f04f 0220 	mov.w	r2, #32
   1ae00:	f3ef 8311 	mrs	r3, BASEPRI
   1ae04:	f382 8811 	msr	BASEPRI, r2
   1ae08:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1ae0c:	2101      	movs	r1, #1
   1ae0e:	4a04      	ldr	r2, [pc, #16]	; (1ae20 <nordicsemi_nrf91_init+0x24>)
   1ae10:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1ae14:	f383 8811 	msr	BASEPRI, r3
   1ae18:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1ae1c:	2000      	movs	r0, #0
   1ae1e:	4770      	bx	lr
   1ae20:	40039000 	.word	0x40039000

0001ae24 <log_generic>:

	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap)
{
   1ae24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else  if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		u32_t timestamp = timestamp_func();
   1ae28:	4b12      	ldr	r3, [pc, #72]	; (1ae74 <log_generic+0x50>)
{
   1ae2a:	b085      	sub	sp, #20
		u32_t timestamp = timestamp_func();
   1ae2c:	681b      	ldr	r3, [r3, #0]
{
   1ae2e:	4681      	mov	r9, r0
   1ae30:	468a      	mov	sl, r1
   1ae32:	9203      	str	r2, [sp, #12]
		u32_t timestamp = timestamp_func();
   1ae34:	4798      	blx	r3

		for (int i = 0; i < log_backend_count_get(); i++) {
   1ae36:	2500      	movs	r5, #0
		u32_t timestamp = timestamp_func();
   1ae38:	4680      	mov	r8, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   1ae3a:	4c0f      	ldr	r4, [pc, #60]	; (1ae78 <log_generic+0x54>)
   1ae3c:	4b0f      	ldr	r3, [pc, #60]	; (1ae7c <log_generic+0x58>)
   1ae3e:	1b1b      	subs	r3, r3, r4
   1ae40:	ea4f 1b23 	mov.w	fp, r3, asr #4
		for (int i = 0; i < log_backend_count_get(); i++) {
   1ae44:	455d      	cmp	r5, fp
   1ae46:	db02      	blt.n	1ae4e <log_generic+0x2a>
			args[i] = va_arg(ap, log_arg_t);
		}

		log_n(fmt, args, nargs, src_level);
	}
}
   1ae48:	b005      	add	sp, #20
   1ae4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae4e:	012a      	lsls	r2, r5, #4
   1ae50:	18a7      	adds	r7, r4, r2
			if (log_backend_is_active(backend)) {
   1ae52:	4638      	mov	r0, r7
   1ae54:	f016 fd26 	bl	318a4 <log_backend_is_active>
   1ae58:	b148      	cbz	r0, 1ae6e <log_generic+0x4a>
	if (backend->api->put_sync_string) {
   1ae5a:	58a3      	ldr	r3, [r4, r2]
   1ae5c:	685e      	ldr	r6, [r3, #4]
   1ae5e:	b136      	cbz	r6, 1ae6e <log_generic+0x4a>
		backend->api->put_sync_string(backend, src_level,
   1ae60:	9b03      	ldr	r3, [sp, #12]
   1ae62:	4642      	mov	r2, r8
   1ae64:	9300      	str	r3, [sp, #0]
   1ae66:	4649      	mov	r1, r9
   1ae68:	4653      	mov	r3, sl
   1ae6a:	4638      	mov	r0, r7
   1ae6c:	47b0      	blx	r6
		for (int i = 0; i < log_backend_count_get(); i++) {
   1ae6e:	3501      	adds	r5, #1
   1ae70:	e7e8      	b.n	1ae44 <log_generic+0x20>
   1ae72:	bf00      	nop
   1ae74:	20028dd8 	.word	0x20028dd8
   1ae78:	000339b4 	.word	0x000339b4
   1ae7c:	000339c4 	.word	0x000339c4

0001ae80 <log_core_init>:
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
   1ae80:	4b03      	ldr	r3, [pc, #12]	; (1ae90 <log_core_init+0x10>)
   1ae82:	4a04      	ldr	r2, [pc, #16]	; (1ae94 <log_core_init+0x14>)
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
   1ae84:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   1ae88:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   1ae8a:	f000 ba61 	b.w	1b350 <log_output_timestamp_freq_set>
   1ae8e:	bf00      	nop
   1ae90:	20028dd8 	.word	0x20028dd8
   1ae94:	000318ab 	.word	0x000318ab

0001ae98 <log_source_name_get>:
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   1ae98:	4a04      	ldr	r2, [pc, #16]	; (1aeac <log_source_name_get+0x14>)
   1ae9a:	4b05      	ldr	r3, [pc, #20]	; (1aeb0 <log_source_name_get+0x18>)
   1ae9c:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(u32_t domain_id, u32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   1ae9e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   1aea2:	bf34      	ite	cc
   1aea4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   1aea8:	2000      	movcs	r0, #0
}
   1aeaa:	4770      	bx	lr
   1aeac:	00033914 	.word	0x00033914
   1aeb0:	000339b4 	.word	0x000339b4

0001aeb4 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			u32_t level)
{
   1aeb4:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	u32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   1aeb6:	4c10      	ldr	r4, [pc, #64]	; (1aef8 <log_backend_enable+0x44>)
{
   1aeb8:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   1aeba:	1b04      	subs	r4, r0, r4
   1aebc:	1124      	asrs	r4, r4, #4
   1aebe:	3401      	adds	r4, #1
{
   1aec0:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
   1aec2:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   1aec4:	b948      	cbnz	r0, 1aeda <log_backend_enable+0x26>
   1aec6:	490d      	ldr	r1, [pc, #52]	; (1aefc <log_backend_enable+0x48>)
   1aec8:	480d      	ldr	r0, [pc, #52]	; (1af00 <log_backend_enable+0x4c>)
   1aeca:	23bf      	movs	r3, #191	; 0xbf
   1aecc:	4a0d      	ldr	r2, [pc, #52]	; (1af04 <log_backend_enable+0x50>)
   1aece:	f016 fcd3 	bl	31878 <printk>
   1aed2:	21bf      	movs	r1, #191	; 0xbf
   1aed4:	480b      	ldr	r0, [pc, #44]	; (1af04 <log_backend_enable+0x50>)
   1aed6:	f016 fcdc 	bl	31892 <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   1aeda:	2201      	movs	r2, #1
	backend->cb->id = id;
   1aedc:	686b      	ldr	r3, [r5, #4]
   1aede:	711c      	strb	r4, [r3, #4]
	log_backend_activate(backend, ctx);

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
   1aee0:	4c09      	ldr	r4, [pc, #36]	; (1af08 <log_backend_enable+0x54>)
	backend->cb->active = true;
   1aee2:	715a      	strb	r2, [r3, #5]
   1aee4:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   1aee6:	601e      	str	r6, [r3, #0]
   1aee8:	b912      	cbnz	r2, 1aef0 <log_backend_enable+0x3c>
		z_arch_syscall_invoke1(*(u32_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1aeea:	4808      	ldr	r0, [pc, #32]	; (1af0c <log_backend_enable+0x58>)
   1aeec:	f013 fb22 	bl	2e534 <z_impl_k_sem_give>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
   1aef0:	2301      	movs	r3, #1
   1aef2:	7023      	strb	r3, [r4, #0]
}
   1aef4:	bd70      	pop	{r4, r5, r6, pc}
   1aef6:	bf00      	nop
   1aef8:	000339b4 	.word	0x000339b4
   1aefc:	0003507d 	.word	0x0003507d
   1af00:	00034ff7 	.word	0x00034ff7
   1af04:	00035040 	.word	0x00035040
   1af08:	20025b12 	.word	0x20025b12
   1af0c:	200290f8 	.word	0x200290f8

0001af10 <log_init>:
{
   1af10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __log_backends_end - __log_backends_start;
   1af12:	4e14      	ldr	r6, [pc, #80]	; (1af64 <log_init+0x54>)
   1af14:	4b14      	ldr	r3, [pc, #80]	; (1af68 <log_init+0x58>)
   1af16:	1b9b      	subs	r3, r3, r6
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   1af18:	2b90      	cmp	r3, #144	; 0x90
   1af1a:	dd06      	ble.n	1af2a <log_init+0x1a>
   1af1c:	4b13      	ldr	r3, [pc, #76]	; (1af6c <log_init+0x5c>)
   1af1e:	4a14      	ldr	r2, [pc, #80]	; (1af70 <log_init+0x60>)
   1af20:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
   1af24:	4813      	ldr	r0, [pc, #76]	; (1af74 <log_init+0x64>)
   1af26:	f014 ffeb 	bl	2ff00 <__assert_func>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1af2a:	4a13      	ldr	r2, [pc, #76]	; (1af78 <log_init+0x68>)
   1af2c:	e8d2 4fef 	ldaex	r4, [r2]
   1af30:	1c61      	adds	r1, r4, #1
   1af32:	e8c2 1fe0 	stlex	r0, r1, [r2]
   1af36:	2800      	cmp	r0, #0
   1af38:	d1f8      	bne.n	1af2c <log_init+0x1c>
	if (atomic_inc(&initialized) != 0) {
   1af3a:	b914      	cbnz	r4, 1af42 <log_init+0x32>
   1af3c:	111d      	asrs	r5, r3, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   1af3e:	42ac      	cmp	r4, r5
   1af40:	db00      	blt.n	1af44 <log_init+0x34>
}
   1af42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1af44:	0127      	lsls	r7, r4, #4
		if (backend->autostart) {
   1af46:	19f3      	adds	r3, r6, r7
   1af48:	7b1b      	ldrb	r3, [r3, #12]
   1af4a:	b143      	cbz	r3, 1af5e <log_init+0x4e>
			if (backend->api->init != NULL) {
   1af4c:	59f3      	ldr	r3, [r6, r7]
   1af4e:	695b      	ldr	r3, [r3, #20]
   1af50:	b103      	cbz	r3, 1af54 <log_init+0x44>
				backend->api->init();
   1af52:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   1af54:	2204      	movs	r2, #4
   1af56:	2100      	movs	r1, #0
   1af58:	19f0      	adds	r0, r6, r7
   1af5a:	f7ff ffab 	bl	1aeb4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   1af5e:	3401      	adds	r4, #1
   1af60:	e7ed      	b.n	1af3e <log_init+0x2e>
   1af62:	bf00      	nop
   1af64:	000339b4 	.word	0x000339b4
   1af68:	000339c4 	.word	0x000339c4
   1af6c:	00035094 	.word	0x00035094
   1af70:	00035037 	.word	0x00035037
   1af74:	000350e8 	.word	0x000350e8
   1af78:	2002003c 	.word	0x2002003c

0001af7c <z_impl_log_panic>:
{
   1af7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   1af7e:	4f0d      	ldr	r7, [pc, #52]	; (1afb4 <z_impl_log_panic+0x38>)
   1af80:	783c      	ldrb	r4, [r7, #0]
   1af82:	b94c      	cbnz	r4, 1af98 <z_impl_log_panic+0x1c>
	log_init();
   1af84:	f7ff ffc4 	bl	1af10 <log_init>
   1af88:	4e0b      	ldr	r6, [pc, #44]	; (1afb8 <z_impl_log_panic+0x3c>)
   1af8a:	4d0c      	ldr	r5, [pc, #48]	; (1afbc <z_impl_log_panic+0x40>)
   1af8c:	1bad      	subs	r5, r5, r6
   1af8e:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   1af90:	42ac      	cmp	r4, r5
   1af92:	db02      	blt.n	1af9a <z_impl_log_panic+0x1e>
	panic_mode = true;
   1af94:	2301      	movs	r3, #1
   1af96:	703b      	strb	r3, [r7, #0]
}
   1af98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1af9a:	0121      	lsls	r1, r4, #4
   1af9c:	1872      	adds	r2, r6, r1
		if (log_backend_is_active(backend)) {
   1af9e:	4610      	mov	r0, r2
   1afa0:	f016 fc80 	bl	318a4 <log_backend_is_active>
   1afa4:	b118      	cbz	r0, 1afae <z_impl_log_panic+0x32>
	backend->api->panic(backend);
   1afa6:	5873      	ldr	r3, [r6, r1]
   1afa8:	4610      	mov	r0, r2
   1afaa:	691b      	ldr	r3, [r3, #16]
   1afac:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   1afae:	3401      	adds	r4, #1
   1afb0:	e7ee      	b.n	1af90 <z_impl_log_panic+0x14>
   1afb2:	bf00      	nop
   1afb4:	20025b13 	.word	0x20025b13
   1afb8:	000339b4 	.word	0x000339b4
   1afbc:	000339c4 	.word	0x000339c4

0001afc0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   1afc0:	b40e      	push	{r1, r2, r3}
   1afc2:	b503      	push	{r0, r1, lr}
   1afc4:	ab03      	add	r3, sp, #12
   1afc6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
   1afca:	4601      	mov	r1, r0
   1afcc:	4804      	ldr	r0, [pc, #16]	; (1afe0 <print_formatted+0x20>)
	va_start(args, fmt);
   1afce:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
   1afd0:	f016 fadc 	bl	3158c <z_vprintk>
#endif
	va_end(args);

	return length;
}
   1afd4:	2000      	movs	r0, #0
   1afd6:	b002      	add	sp, #8
   1afd8:	f85d eb04 	ldr.w	lr, [sp], #4
   1afdc:	b003      	add	sp, #12
   1afde:	4770      	bx	lr
   1afe0:	0001b21d 	.word	0x0001b21d

0001afe4 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
   1afe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   1afe8:	f011 0402 	ands.w	r4, r1, #2
{
   1afec:	b085      	sub	sp, #20
   1afee:	4606      	mov	r6, r0
   1aff0:	4690      	mov	r8, r2
   1aff2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   1aff6:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1affa:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   1affe:	d007      	beq.n	1b010 <prefix_print+0x2c>
	if (!format) {
   1b000:	f011 0f44 	tst.w	r1, #68	; 0x44
   1b004:	d137      	bne.n	1b076 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   1b006:	461a      	mov	r2, r3
   1b008:	4932      	ldr	r1, [pc, #200]	; (1b0d4 <prefix_print+0xf0>)
   1b00a:	f7ff ffd9 	bl	1afc0 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   1b00e:	4604      	mov	r4, r0
	if (color) {
   1b010:	f1b9 0f00 	cmp.w	r9, #0
   1b014:	d00a      	beq.n	1b02c <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
   1b016:	4b30      	ldr	r3, [pc, #192]	; (1b0d8 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
   1b018:	4930      	ldr	r1, [pc, #192]	; (1b0dc <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
   1b01a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
   1b01e:	4b30      	ldr	r3, [pc, #192]	; (1b0e0 <prefix_print+0xfc>)
   1b020:	4630      	mov	r0, r6
   1b022:	2a00      	cmp	r2, #0
   1b024:	bf08      	it	eq
   1b026:	461a      	moveq	r2, r3
   1b028:	f7ff ffca 	bl	1afc0 <print_formatted>
	if (level_on) {
   1b02c:	b13d      	cbz	r5, 1b03e <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   1b02e:	4b2d      	ldr	r3, [pc, #180]	; (1b0e4 <prefix_print+0x100>)
   1b030:	492d      	ldr	r1, [pc, #180]	; (1b0e8 <prefix_print+0x104>)
   1b032:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   1b036:	4630      	mov	r0, r6
   1b038:	f7ff ffc2 	bl	1afc0 <print_formatted>
   1b03c:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   1b03e:	f1b8 0f00 	cmp.w	r8, #0
   1b042:	d044      	beq.n	1b0ce <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   1b044:	2301      	movs	r3, #1
   1b046:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   1b04a:	4b28      	ldr	r3, [pc, #160]	; (1b0ec <prefix_print+0x108>)
   1b04c:	f017 0f10 	tst.w	r7, #16
   1b050:	4f27      	ldr	r7, [pc, #156]	; (1b0f0 <prefix_print+0x10c>)
   1b052:	bf18      	it	ne
   1b054:	461f      	movne	r7, r3
   1b056:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   1b05a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   1b05e:	f7ff ff1b 	bl	1ae98 <log_source_name_get>
   1b062:	4639      	mov	r1, r7
   1b064:	4602      	mov	r2, r0
   1b066:	4630      	mov	r0, r6
   1b068:	f7ff ffaa 	bl	1afc0 <print_formatted>
   1b06c:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
   1b06e:	4420      	add	r0, r4
   1b070:	b005      	add	sp, #20
   1b072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   1b076:	4a1f      	ldr	r2, [pc, #124]	; (1b0f4 <prefix_print+0x110>)
   1b078:	6811      	ldr	r1, [r2, #0]
   1b07a:	b331      	cbz	r1, 1b0ca <prefix_print+0xe6>
		timestamp /= timestamp_div;
   1b07c:	4a1e      	ldr	r2, [pc, #120]	; (1b0f8 <prefix_print+0x114>)
   1b07e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   1b082:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   1b084:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   1b088:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
   1b08c:	fbb3 f4f1 	udiv	r4, r3, r1
   1b090:	fbb4 f2fe 	udiv	r2, r4, lr
   1b094:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   1b098:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   1b09c:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1b0a0:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   1b0a4:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1b0a8:	fb01 441b 	mls	r4, r1, fp, r4
   1b0ac:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   1b0b0:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1b0b4:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   1b0b8:	e9cd b101 	strd	fp, r1, [sp, #4]
   1b0bc:	fb0a e113 	mls	r1, sl, r3, lr
   1b0c0:	9100      	str	r1, [sp, #0]
   1b0c2:	490e      	ldr	r1, [pc, #56]	; (1b0fc <prefix_print+0x118>)
   1b0c4:	f7ff ff7c 	bl	1afc0 <print_formatted>
   1b0c8:	e7a1      	b.n	1b00e <prefix_print+0x2a>
		length = 0;
   1b0ca:	4608      	mov	r0, r1
   1b0cc:	e79f      	b.n	1b00e <prefix_print+0x2a>
	total += print_formatted(log_output,
   1b0ce:	4f08      	ldr	r7, [pc, #32]	; (1b0f0 <prefix_print+0x10c>)
   1b0d0:	e7c1      	b.n	1b056 <prefix_print+0x72>
   1b0d2:	bf00      	nop
   1b0d4:	000351bf 	.word	0x000351bf
   1b0d8:	00033b00 	.word	0x00033b00
   1b0dc:	0003655e 	.word	0x0003655e
   1b0e0:	000351b1 	.word	0x000351b1
   1b0e4:	00033b14 	.word	0x00033b14
   1b0e8:	000351e4 	.word	0x000351e4
   1b0ec:	000351b6 	.word	0x000351b6
   1b0f0:	000351ba 	.word	0x000351ba
   1b0f4:	20020040 	.word	0x20020040
   1b0f8:	20020044 	.word	0x20020044
   1b0fc:	000351c8 	.word	0x000351c8

0001b100 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
   1b100:	b538      	push	{r3, r4, r5, lr}
   1b102:	460c      	mov	r4, r1
	if (color) {
   1b104:	07e1      	lsls	r1, r4, #31
{
   1b106:	4605      	mov	r5, r0
	if (color) {
   1b108:	d503      	bpl.n	1b112 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
   1b10a:	4a08      	ldr	r2, [pc, #32]	; (1b12c <postfix_print+0x2c>)
   1b10c:	4908      	ldr	r1, [pc, #32]	; (1b130 <postfix_print+0x30>)
   1b10e:	f7ff ff57 	bl	1afc0 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1b112:	06e2      	lsls	r2, r4, #27
   1b114:	d408      	bmi.n	1b128 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1b116:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   1b118:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   1b11a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   1b11e:	bf4c      	ite	mi
   1b120:	4904      	ldrmi	r1, [pc, #16]	; (1b134 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   1b122:	4905      	ldrpl	r1, [pc, #20]	; (1b138 <postfix_print+0x38>)
   1b124:	f7ff bf4c 	b.w	1afc0 <print_formatted>
}
   1b128:	bd38      	pop	{r3, r4, r5, pc}
   1b12a:	bf00      	nop
   1b12c:	000351b1 	.word	0x000351b1
   1b130:	0003655e 	.word	0x0003655e
   1b134:	000367d4 	.word	0x000367d4
   1b138:	000351ae 	.word	0x000351ae

0001b13c <hexdump_line_print>:
{
   1b13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b140:	4698      	mov	r8, r3
   1b142:	9b08      	ldr	r3, [sp, #32]
   1b144:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1b146:	06dd      	lsls	r5, r3, #27
{
   1b148:	460e      	mov	r6, r1
   1b14a:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1b14c:	d405      	bmi.n	1b15a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1b14e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   1b150:	bf4c      	ite	mi
   1b152:	492b      	ldrmi	r1, [pc, #172]	; (1b200 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   1b154:	492b      	ldrpl	r1, [pc, #172]	; (1b204 <hexdump_line_print+0xc8>)
   1b156:	f7ff ff33 	bl	1afc0 <print_formatted>
{
   1b15a:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
   1b15c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 1b20c <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   1b160:	4545      	cmp	r5, r8
   1b162:	db2f      	blt.n	1b1c4 <hexdump_line_print+0x88>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1b164:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   1b166:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1b210 <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
   1b16a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1b214 <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
   1b16e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1b20c <hexdump_line_print+0xd0>
		if (i < length) {
   1b172:	42af      	cmp	r7, r5
   1b174:	d933      	bls.n	1b1de <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
   1b176:	5d72      	ldrb	r2, [r6, r5]
   1b178:	4649      	mov	r1, r9
   1b17a:	4620      	mov	r0, r4
   1b17c:	f7ff ff20 	bl	1afc0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1b180:	3501      	adds	r5, #1
   1b182:	2d10      	cmp	r5, #16
   1b184:	d124      	bne.n	1b1d0 <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
   1b186:	4920      	ldr	r1, [pc, #128]	; (1b208 <hexdump_line_print+0xcc>)
   1b188:	4620      	mov	r0, r4
   1b18a:	f7ff ff19 	bl	1afc0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1b18e:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   1b190:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1b20c <hexdump_line_print+0xd0>
			print_formatted(log_output, "%c",
   1b194:	f8df a080 	ldr.w	sl, [pc, #128]	; 1b218 <hexdump_line_print+0xdc>
		if (i < length) {
   1b198:	42af      	cmp	r7, r5
   1b19a:	d92c      	bls.n	1b1f6 <hexdump_line_print+0xba>
			char c = (char)data[i];
   1b19c:	f816 9005 	ldrb.w	r9, [r6, r5]
			      isprint((int)c) ? c : '.');
   1b1a0:	f014 fede 	bl	2ff60 <__locale_ctype_ptr>
   1b1a4:	4448      	add	r0, r9
			print_formatted(log_output, "%c",
   1b1a6:	7843      	ldrb	r3, [r0, #1]
   1b1a8:	4651      	mov	r1, sl
   1b1aa:	f013 0f97 	tst.w	r3, #151	; 0x97
   1b1ae:	bf14      	ite	ne
   1b1b0:	464a      	movne	r2, r9
   1b1b2:	222e      	moveq	r2, #46	; 0x2e
   1b1b4:	4620      	mov	r0, r4
   1b1b6:	f7ff ff03 	bl	1afc0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1b1ba:	3501      	adds	r5, #1
   1b1bc:	2d10      	cmp	r5, #16
   1b1be:	d113      	bne.n	1b1e8 <hexdump_line_print+0xac>
}
   1b1c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   1b1c4:	4649      	mov	r1, r9
   1b1c6:	4620      	mov	r0, r4
   1b1c8:	f7ff fefa 	bl	1afc0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   1b1cc:	3501      	adds	r5, #1
   1b1ce:	e7c7      	b.n	1b160 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
   1b1d0:	076a      	lsls	r2, r5, #29
   1b1d2:	d1ce      	bne.n	1b172 <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
   1b1d4:	4651      	mov	r1, sl
   1b1d6:	4620      	mov	r0, r4
   1b1d8:	f7ff fef2 	bl	1afc0 <print_formatted>
   1b1dc:	e7c9      	b.n	1b172 <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
   1b1de:	4641      	mov	r1, r8
   1b1e0:	4620      	mov	r0, r4
   1b1e2:	f7ff feed 	bl	1afc0 <print_formatted>
   1b1e6:	e7cb      	b.n	1b180 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
   1b1e8:	076b      	lsls	r3, r5, #29
   1b1ea:	d1d5      	bne.n	1b198 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
   1b1ec:	4641      	mov	r1, r8
   1b1ee:	4620      	mov	r0, r4
   1b1f0:	f7ff fee6 	bl	1afc0 <print_formatted>
   1b1f4:	e7d0      	b.n	1b198 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
   1b1f6:	4641      	mov	r1, r8
   1b1f8:	4620      	mov	r0, r4
   1b1fa:	f7ff fee1 	bl	1afc0 <print_formatted>
   1b1fe:	e7dc      	b.n	1b1ba <hexdump_line_print+0x7e>
   1b200:	000367d4 	.word	0x000367d4
   1b204:	000351ae 	.word	0x000351ae
   1b208:	0003512b 	.word	0x0003512b
   1b20c:	00035129 	.word	0x00035129
   1b210:	00035127 	.word	0x00035127
   1b214:	00035121 	.word	0x00035121
   1b218:	0003512d 	.word	0x0003512d

0001b21c <out_func>:
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   1b21c:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   1b220:	681b      	ldr	r3, [r3, #0]
{
   1b222:	b510      	push	{r4, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   1b224:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
   1b226:	684a      	ldr	r2, [r1, #4]
{
   1b228:	460c      	mov	r4, r1
	out_ctx->control_block->offset++;
   1b22a:	6813      	ldr	r3, [r2, #0]
   1b22c:	3301      	adds	r3, #1
   1b22e:	6013      	str	r3, [r2, #0]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   1b230:	68ca      	ldr	r2, [r1, #12]
   1b232:	4293      	cmp	r3, r2
   1b234:	d909      	bls.n	1b24a <out_func+0x2e>
   1b236:	490a      	ldr	r1, [pc, #40]	; (1b260 <out_func+0x44>)
   1b238:	480a      	ldr	r0, [pc, #40]	; (1b264 <out_func+0x48>)
   1b23a:	2365      	movs	r3, #101	; 0x65
   1b23c:	4a0a      	ldr	r2, [pc, #40]	; (1b268 <out_func+0x4c>)
   1b23e:	f016 fb1b 	bl	31878 <printk>
   1b242:	2165      	movs	r1, #101	; 0x65
   1b244:	4808      	ldr	r0, [pc, #32]	; (1b268 <out_func+0x4c>)
   1b246:	f016 fb24 	bl	31892 <assert_post_action>
	if (out_ctx->control_block->offset == out_ctx->size) {
   1b24a:	6863      	ldr	r3, [r4, #4]
   1b24c:	681a      	ldr	r2, [r3, #0]
   1b24e:	68e3      	ldr	r3, [r4, #12]
   1b250:	429a      	cmp	r2, r3
   1b252:	d102      	bne.n	1b25a <out_func+0x3e>
		log_output_flush(out_ctx);
   1b254:	4620      	mov	r0, r4
   1b256:	f016 fb4c 	bl	318f2 <log_output_flush>
}
   1b25a:	2000      	movs	r0, #0
   1b25c:	bd10      	pop	{r4, pc}
   1b25e:	bf00      	nop
   1b260:	0003517e 	.word	0x0003517e
   1b264:	00034ff7 	.word	0x00034ff7
   1b268:	00035143 	.word	0x00035143

0001b26c <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, u32_t timestamp,
		       const char *fmt, va_list ap, u32_t flags)
{
   1b26c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	u8_t level = (u8_t)src_level.level;
	u8_t domain_id = (u8_t)src_level.domain_id;
	u16_t source_id = (u16_t)src_level.source_id;
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);

	if (!raw_string) {
   1b270:	f011 0407 	ands.w	r4, r1, #7
{
   1b274:	4607      	mov	r7, r0
   1b276:	e9dd 860a 	ldrd	r8, r6, [sp, #40]	; 0x28
   1b27a:	461d      	mov	r5, r3
	if (!raw_string) {
   1b27c:	d00b      	beq.n	1b296 <log_output_string+0x2a>
		prefix_print(log_output, flags, true, timestamp,
   1b27e:	f3c1 1389 	ubfx	r3, r1, #6, #10
   1b282:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   1b286:	9302      	str	r3, [sp, #8]
   1b288:	e9cd 4100 	strd	r4, r1, [sp]
   1b28c:	4613      	mov	r3, r2
   1b28e:	4631      	mov	r1, r6
   1b290:	2201      	movs	r2, #1
   1b292:	f7ff fea7 	bl	1afe4 <prefix_print>

#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, ap);
#else
	z_vprintk(out_func, (void *)log_output, fmt, ap);
   1b296:	4643      	mov	r3, r8
   1b298:	462a      	mov	r2, r5
   1b29a:	4639      	mov	r1, r7
   1b29c:	480d      	ldr	r0, [pc, #52]	; (1b2d4 <log_output_string+0x68>)
   1b29e:	f016 f975 	bl	3158c <z_vprintk>
#endif

	(void)length;

	if (raw_string) {
   1b2a2:	b98c      	cbnz	r4, 1b2c8 <log_output_string+0x5c>
   1b2a4:	3d01      	subs	r5, #1
	while (*fmt != '\0') {
   1b2a6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   1b2aa:	b95b      	cbnz	r3, 1b2c4 <log_output_string+0x58>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
   1b2ac:	2c0a      	cmp	r4, #10
   1b2ae:	d103      	bne.n	1b2b8 <log_output_string+0x4c>
			print_formatted(log_output, "\r");
   1b2b0:	4909      	ldr	r1, [pc, #36]	; (1b2d8 <log_output_string+0x6c>)
   1b2b2:	4638      	mov	r0, r7
   1b2b4:	f7ff fe84 	bl	1afc0 <print_formatted>
		}
	} else {
		postfix_print(log_output, flags, level);
	}

	log_output_flush(log_output);
   1b2b8:	4638      	mov	r0, r7
}
   1b2ba:	b004      	add	sp, #16
   1b2bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(log_output);
   1b2c0:	f016 bb17 	b.w	318f2 <log_output_flush>
	while (*fmt != '\0') {
   1b2c4:	461c      	mov	r4, r3
   1b2c6:	e7ee      	b.n	1b2a6 <log_output_string+0x3a>
		postfix_print(log_output, flags, level);
   1b2c8:	4622      	mov	r2, r4
   1b2ca:	4631      	mov	r1, r6
   1b2cc:	4638      	mov	r0, r7
   1b2ce:	f7ff ff17 	bl	1b100 <postfix_print>
   1b2d2:	e7f1      	b.n	1b2b8 <log_output_string+0x4c>
   1b2d4:	0001b21d 	.word	0x0001b21d
   1b2d8:	00035141 	.word	0x00035141

0001b2dc <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, u32_t timestamp,
			     const char *metadata, const u8_t *data,
			     u32_t length, u32_t flags)
{
   1b2dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1b2e0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1b2e2:	4698      	mov	r8, r3
   1b2e4:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
	u32_t prefix_offset;
	u8_t level = (u8_t)src_level.level;
	u8_t domain_id = (u8_t)src_level.domain_id;
	u16_t source_id = (u16_t)src_level.source_id;

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   1b2e8:	f3c1 1389 	ubfx	r3, r1, #6, #10
	u8_t level = (u8_t)src_level.level;
   1b2ec:	f001 0907 	and.w	r9, r1, #7
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   1b2f0:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   1b2f4:	9302      	str	r3, [sp, #8]
   1b2f6:	e9cd 9100 	strd	r9, r1, [sp]
   1b2fa:	4613      	mov	r3, r2
   1b2fc:	4631      	mov	r1, r6
   1b2fe:	2201      	movs	r2, #1
{
   1b300:	4604      	mov	r4, r0
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   1b302:	f7ff fe6f 	bl	1afe4 <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
   1b306:	4642      	mov	r2, r8
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   1b308:	4682      	mov	sl, r0
	print_formatted(log_output, "%s", metadata);
   1b30a:	4910      	ldr	r1, [pc, #64]	; (1b34c <log_output_hexdump+0x70>)
   1b30c:	4620      	mov	r0, r4
   1b30e:	f7ff fe57 	bl	1afc0 <print_formatted>

	while (length) {
   1b312:	b955      	cbnz	r5, 1b32a <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	};

	postfix_print(log_output, flags, level);
   1b314:	4620      	mov	r0, r4
   1b316:	464a      	mov	r2, r9
   1b318:	4631      	mov	r1, r6
   1b31a:	f7ff fef1 	bl	1b100 <postfix_print>
	log_output_flush(log_output);
   1b31e:	4620      	mov	r0, r4
}
   1b320:	b004      	add	sp, #16
   1b322:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
   1b326:	f016 bae4 	b.w	318f2 <log_output_flush>
		u32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
   1b32a:	2d10      	cmp	r5, #16
   1b32c:	46a8      	mov	r8, r5
   1b32e:	bf28      	it	cs
   1b330:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(log_output, data, part_len,
   1b334:	4639      	mov	r1, r7
   1b336:	9600      	str	r6, [sp, #0]
   1b338:	4653      	mov	r3, sl
   1b33a:	4642      	mov	r2, r8
   1b33c:	4620      	mov	r0, r4
   1b33e:	f7ff fefd 	bl	1b13c <hexdump_line_print>
		data += part_len;
   1b342:	4447      	add	r7, r8
		length -= part_len;
   1b344:	eba5 0508 	sub.w	r5, r5, r8
   1b348:	e7e3      	b.n	1b312 <log_output_hexdump+0x36>
   1b34a:	bf00      	nop
   1b34c:	0003655e 	.word	0x0003655e

0001b350 <log_output_timestamp_freq_set>:
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
}

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
   1b350:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1b352:	2100      	movs	r1, #0
	timestamp_div = 1U;
   1b354:	4a07      	ldr	r2, [pc, #28]	; (1b374 <log_output_timestamp_freq_set+0x24>)
{
   1b356:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   1b358:	4c07      	ldr	r4, [pc, #28]	; (1b378 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   1b35a:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   1b35c:	42a0      	cmp	r0, r4
   1b35e:	d804      	bhi.n	1b36a <log_output_timestamp_freq_set+0x1a>
   1b360:	b101      	cbz	r1, 1b364 <log_output_timestamp_freq_set+0x14>
   1b362:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   1b364:	4b05      	ldr	r3, [pc, #20]	; (1b37c <log_output_timestamp_freq_set+0x2c>)
   1b366:	6018      	str	r0, [r3, #0]
}
   1b368:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   1b36a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1b36c:	005b      	lsls	r3, r3, #1
   1b36e:	2101      	movs	r1, #1
   1b370:	e7f4      	b.n	1b35c <log_output_timestamp_freq_set+0xc>
   1b372:	bf00      	nop
   1b374:	20020044 	.word	0x20020044
   1b378:	000f4240 	.word	0x000f4240
   1b37c:	20020040 	.word	0x20020040

0001b380 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   1b380:	4801      	ldr	r0, [pc, #4]	; (1b388 <panic+0x8>)
   1b382:	f016 bab6 	b.w	318f2 <log_output_flush>
   1b386:	bf00      	nop
   1b388:	00033b40 	.word	0x00033b40

0001b38c <log_backend_uart_init>:
{
	log_backend_std_put(&log_output, 0, msg);
}

static void log_backend_uart_init(void)
{
   1b38c:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) z_arch_syscall_invoke1(*(u32_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1b38e:	4806      	ldr	r0, [pc, #24]	; (1b3a8 <log_backend_uart_init+0x1c>)
   1b390:	f011 fd06 	bl	2cda0 <z_impl_device_get_binding>
	struct device *dev;

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);
   1b394:	b928      	cbnz	r0, 1b3a2 <log_backend_uart_init+0x16>
   1b396:	4b05      	ldr	r3, [pc, #20]	; (1b3ac <log_backend_uart_init+0x20>)
   1b398:	4a05      	ldr	r2, [pc, #20]	; (1b3b0 <log_backend_uart_init+0x24>)
   1b39a:	212a      	movs	r1, #42	; 0x2a
   1b39c:	4805      	ldr	r0, [pc, #20]	; (1b3b4 <log_backend_uart_init+0x28>)
   1b39e:	f014 fdaf 	bl	2ff00 <__assert_func>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
   1b3a2:	4b05      	ldr	r3, [pc, #20]	; (1b3b8 <log_backend_uart_init+0x2c>)
   1b3a4:	6058      	str	r0, [r3, #4]

	log_output_ctx_set(&log_output, dev);
}
   1b3a6:	bd08      	pop	{r3, pc}
   1b3a8:	00035220 	.word	0x00035220
   1b3ac:	00035227 	.word	0x00035227
   1b3b0:	0003520a 	.word	0x0003520a
   1b3b4:	0003522b 	.word	0x0003522b
   1b3b8:	20020050 	.word	0x20020050

0001b3bc <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, u32_t timestamp,
			 const char *metadata, const u8_t *data, u32_t length)
{
   1b3bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1b3c0:	460e      	mov	r6, r1
   1b3c2:	4617      	mov	r7, r2
   1b3c4:	4698      	mov	r8, r3
	__asm__ volatile(
   1b3c6:	f04f 0320 	mov.w	r3, #32
   1b3ca:	f3ef 8511 	mrs	r5, BASEPRI
   1b3ce:	f383 8811 	msr	BASEPRI, r3
   1b3d2:	f3bf 8f6f 	isb	sy
	 * it may lead to failure. Log output is not re-entrant and irq_lock
	 * does not prevent NMI or ZLI (Zero latency interrupts). If context
	 * is interrupted by NMI it usually means fault scenario and best that
	 * can be done is to flush the output and process new data.
	 */
	log_output_flush(log_output);
   1b3d6:	4c0b      	ldr	r4, [pc, #44]	; (1b404 <sync_hexdump+0x48>)
   1b3d8:	4620      	mov	r0, r4
   1b3da:	f016 fa8a 	bl	318f2 <log_output_flush>
	log_output_hexdump(log_output, src_level, timestamp,
   1b3de:	230f      	movs	r3, #15
   1b3e0:	9302      	str	r3, [sp, #8]
   1b3e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b3e4:	463a      	mov	r2, r7
   1b3e6:	9301      	str	r3, [sp, #4]
   1b3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b3ea:	4631      	mov	r1, r6
   1b3ec:	9300      	str	r3, [sp, #0]
   1b3ee:	4620      	mov	r0, r4
   1b3f0:	4643      	mov	r3, r8
   1b3f2:	f7ff ff73 	bl	1b2dc <log_output_hexdump>
	__asm__ volatile(
   1b3f6:	f385 8811 	msr	BASEPRI, r5
   1b3fa:	f3bf 8f6f 	isb	sy
	log_backend_std_sync_hexdump(&log_output, 0, src_level,
				     timestamp, metadata, data, length);
}
   1b3fe:	b004      	add	sp, #16
   1b400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b404:	00033b40 	.word	0x00033b40

0001b408 <sync_string>:
{
   1b408:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b40c:	460e      	mov	r6, r1
   1b40e:	4617      	mov	r7, r2
   1b410:	4698      	mov	r8, r3
	__asm__ volatile(
   1b412:	f04f 0320 	mov.w	r3, #32
   1b416:	f3ef 8511 	mrs	r5, BASEPRI
   1b41a:	f383 8811 	msr	BASEPRI, r3
   1b41e:	f3bf 8f6f 	isb	sy
	log_output_flush(log_output);
   1b422:	4c0a      	ldr	r4, [pc, #40]	; (1b44c <sync_string+0x44>)
   1b424:	4620      	mov	r0, r4
   1b426:	f016 fa64 	bl	318f2 <log_output_flush>
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
   1b42a:	230f      	movs	r3, #15
   1b42c:	9301      	str	r3, [sp, #4]
   1b42e:	9b08      	ldr	r3, [sp, #32]
   1b430:	463a      	mov	r2, r7
   1b432:	9300      	str	r3, [sp, #0]
   1b434:	4631      	mov	r1, r6
   1b436:	4643      	mov	r3, r8
   1b438:	4620      	mov	r0, r4
   1b43a:	f7ff ff17 	bl	1b26c <log_output_string>
	__asm__ volatile(
   1b43e:	f385 8811 	msr	BASEPRI, r5
   1b442:	f3bf 8f6f 	isb	sy
}
   1b446:	b002      	add	sp, #8
   1b448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b44c:	00033b40 	.word	0x00033b40

0001b450 <socket_offload_register>:

/* Only one provider may register socket operations upon boot. */
const struct socket_offload *socket_ops;

void socket_offload_register(const struct socket_offload *ops)
{
   1b450:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   1b452:	4605      	mov	r5, r0
   1b454:	b948      	cbnz	r0, 1b46a <socket_offload_register+0x1a>
   1b456:	490c      	ldr	r1, [pc, #48]	; (1b488 <socket_offload_register+0x38>)
   1b458:	480c      	ldr	r0, [pc, #48]	; (1b48c <socket_offload_register+0x3c>)
   1b45a:	2311      	movs	r3, #17
   1b45c:	4a0c      	ldr	r2, [pc, #48]	; (1b490 <socket_offload_register+0x40>)
   1b45e:	f016 fa0b 	bl	31878 <printk>
   1b462:	2111      	movs	r1, #17
   1b464:	480a      	ldr	r0, [pc, #40]	; (1b490 <socket_offload_register+0x40>)
   1b466:	f016 fa14 	bl	31892 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops == NULL);
   1b46a:	4c0a      	ldr	r4, [pc, #40]	; (1b494 <socket_offload_register+0x44>)
   1b46c:	6822      	ldr	r2, [r4, #0]
   1b46e:	b14a      	cbz	r2, 1b484 <socket_offload_register+0x34>
   1b470:	4909      	ldr	r1, [pc, #36]	; (1b498 <socket_offload_register+0x48>)
   1b472:	4806      	ldr	r0, [pc, #24]	; (1b48c <socket_offload_register+0x3c>)
   1b474:	2312      	movs	r3, #18
   1b476:	4a06      	ldr	r2, [pc, #24]	; (1b490 <socket_offload_register+0x40>)
   1b478:	f016 f9fe 	bl	31878 <printk>
   1b47c:	2112      	movs	r1, #18
   1b47e:	4804      	ldr	r0, [pc, #16]	; (1b490 <socket_offload_register+0x40>)
   1b480:	f016 fa07 	bl	31892 <assert_post_action>

	socket_ops = ops;
   1b484:	6025      	str	r5, [r4, #0]
}
   1b486:	bd38      	pop	{r3, r4, r5, pc}
   1b488:	0003651c 	.word	0x0003651c
   1b48c:	00034ff7 	.word	0x00034ff7
   1b490:	0003528e 	.word	0x0003528e
   1b494:	2002005c 	.word	0x2002005c
   1b498:	000352d5 	.word	0x000352d5

0001b49c <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   1b49c:	4b0a      	ldr	r3, [pc, #40]	; (1b4c8 <console_out+0x2c>)
{
   1b49e:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   1b4a0:	b2c5      	uxtb	r5, r0
{
   1b4a2:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   1b4a4:	681b      	ldr	r3, [r3, #0]
   1b4a6:	4628      	mov	r0, r5
   1b4a8:	4798      	blx	r3

	if (handled_by_debug_server) {
   1b4aa:	2801      	cmp	r0, #1
   1b4ac:	d00a      	beq.n	1b4c4 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   1b4ae:	2c0a      	cmp	r4, #10
   1b4b0:	4e06      	ldr	r6, [pc, #24]	; (1b4cc <console_out+0x30>)
   1b4b2:	d103      	bne.n	1b4bc <console_out+0x20>
   1b4b4:	6830      	ldr	r0, [r6, #0]
		z_arch_syscall_invoke2(*(u32_t *)&dev, *(u32_t *)&out_char, K_SYSCALL_UART_POLL_OUT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
   1b4b6:	210d      	movs	r1, #13
   1b4b8:	f016 fa38 	bl	3192c <z_impl_uart_poll_out>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   1b4bc:	6830      	ldr	r0, [r6, #0]
   1b4be:	4629      	mov	r1, r5
   1b4c0:	f016 fa34 	bl	3192c <z_impl_uart_poll_out>

	return c;
}
   1b4c4:	4620      	mov	r0, r4
   1b4c6:	bd70      	pop	{r4, r5, r6, pc}
   1b4c8:	20028ddc 	.word	0x20028ddc
   1b4cc:	20020060 	.word	0x20020060

0001b4d0 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
   1b4d0:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
   1b4d2:	4c04      	ldr	r4, [pc, #16]	; (1b4e4 <uart_console_hook_install+0x14>)
   1b4d4:	4620      	mov	r0, r4
   1b4d6:	f001 fa81 	bl	1c9dc <__stdout_hook_install>
	__printk_hook_install(console_out);
   1b4da:	4620      	mov	r0, r4
}
   1b4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
   1b4e0:	f7ff bc76 	b.w	1add0 <__printk_hook_install>
   1b4e4:	0001b49d 	.word	0x0001b49d

0001b4e8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
   1b4e8:	b508      	push	{r3, lr}
   1b4ea:	4804      	ldr	r0, [pc, #16]	; (1b4fc <uart_console_init+0x14>)
   1b4ec:	f011 fc58 	bl	2cda0 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   1b4f0:	4b03      	ldr	r3, [pc, #12]	; (1b500 <uart_console_init+0x18>)
   1b4f2:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
   1b4f4:	f7ff ffec 	bl	1b4d0 <uart_console_hook_install>

	return 0;
}
   1b4f8:	2000      	movs	r0, #0
   1b4fa:	bd08      	pop	{r3, pc}
   1b4fc:	00035220 	.word	0x00035220
   1b500:	20020060 	.word	0x20020060

0001b504 <hfclk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int hfclk_init(struct device *dev)
{
   1b504:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   1b506:	2200      	movs	r2, #0
{
   1b508:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   1b50a:	2101      	movs	r1, #1
   1b50c:	2005      	movs	r0, #5
   1b50e:	f000 fb4f 	bl	1bbb0 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
   1b512:	2005      	movs	r0, #5
   1b514:	f000 fb3c 	bl	1bb90 <z_arch_irq_enable>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
}

__STATIC_INLINE void nrf_clock_lf_src_set(nrf_clock_lfclk_t source)
{
    NRF_CLOCK->LFCLKSRC = (uint32_t)(source);
   1b518:	2202      	movs	r2, #2
   1b51a:	4b05      	ldr	r3, [pc, #20]	; (1b530 <hfclk_init+0x2c>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   1b51c:	2000      	movs	r0, #0
   1b51e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NRF_CLOCK->INTENSET = int_mask;
   1b522:	2203      	movs	r2, #3
   1b524:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			(NRF_POWER_INT_USBDETECTED_MASK |
			NRF_POWER_INT_USBREMOVED_MASK |
			NRF_POWER_INT_USBPWRRDY_MASK),
			(0))));

	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   1b528:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
   1b52a:	e9c3 0000 	strd	r0, r0, [r3]

	return 0;
}
   1b52e:	bd10      	pop	{r4, pc}
   1b530:	40005000 	.word	0x40005000

0001b534 <clock_async_start>:
{
   1b534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
   1b536:	6803      	ldr	r3, [r0, #0]
{
   1b538:	4606      	mov	r6, r0
	const struct nrf_clock_control_config *config =
   1b53a:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
   1b53c:	6885      	ldr	r5, [r0, #8]
	__ASSERT_NO_MSG((data == NULL) ||
   1b53e:	4614      	mov	r4, r2
   1b540:	b15a      	cbz	r2, 1b55a <clock_async_start+0x26>
   1b542:	6853      	ldr	r3, [r2, #4]
   1b544:	b94b      	cbnz	r3, 1b55a <clock_async_start+0x26>
   1b546:	4927      	ldr	r1, [pc, #156]	; (1b5e4 <clock_async_start+0xb0>)
   1b548:	4827      	ldr	r0, [pc, #156]	; (1b5e8 <clock_async_start+0xb4>)
   1b54a:	2392      	movs	r3, #146	; 0x92
   1b54c:	4a27      	ldr	r2, [pc, #156]	; (1b5ec <clock_async_start+0xb8>)
   1b54e:	f016 f993 	bl	31878 <printk>
   1b552:	2192      	movs	r1, #146	; 0x92
   1b554:	4825      	ldr	r0, [pc, #148]	; (1b5ec <clock_async_start+0xb8>)
   1b556:	f016 f99c 	bl	31892 <assert_post_action>
	__asm__ volatile(
   1b55a:	f04f 0320 	mov.w	r3, #32
   1b55e:	f3ef 8211 	mrs	r2, BASEPRI
   1b562:	f383 8811 	msr	BASEPRI, r3
   1b566:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   1b56a:	7a2b      	ldrb	r3, [r5, #8]
   1b56c:	3301      	adds	r3, #1
   1b56e:	b25b      	sxtb	r3, r3
   1b570:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
   1b572:	f382 8811 	msr	BASEPRI, r2
   1b576:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
   1b57a:	7a6a      	ldrb	r2, [r5, #9]
   1b57c:	b13a      	cbz	r2, 1b58e <clock_async_start+0x5a>
		if (data) {
   1b57e:	b90c      	cbnz	r4, 1b584 <clock_async_start+0x50>
	return 0;
   1b580:	2000      	movs	r0, #0
}
   1b582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
   1b584:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1b588:	4630      	mov	r0, r6
   1b58a:	4798      	blx	r3
   1b58c:	e7f8      	b.n	1b580 <clock_async_start+0x4c>
		if (ref == 1) {
   1b58e:	2b01      	cmp	r3, #1
   1b590:	d108      	bne.n	1b5a4 <clock_async_start+0x70>
			do_start =  (config->start_handler) ?
   1b592:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
   1b594:	b943      	cbnz	r3, 1b5a8 <clock_async_start+0x74>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   1b596:	2201      	movs	r2, #1
   1b598:	7abb      	ldrb	r3, [r7, #10]
   1b59a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b59e:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1b5a2:	601a      	str	r2, [r3, #0]
		if (data) {
   1b5a4:	b954      	cbnz	r4, 1b5bc <clock_async_start+0x88>
   1b5a6:	e7eb      	b.n	1b580 <clock_async_start+0x4c>
					config->start_handler(dev) : true;
   1b5a8:	4630      	mov	r0, r6
   1b5aa:	4798      	blx	r3
   1b5ac:	2800      	cmp	r0, #0
   1b5ae:	d1f2      	bne.n	1b596 <clock_async_start+0x62>
			} else if (data) {
   1b5b0:	2c00      	cmp	r4, #0
   1b5b2:	d0e5      	beq.n	1b580 <clock_async_start+0x4c>
				data->cb(dev, data->user_data);
   1b5b4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1b5b8:	4630      	mov	r0, r6
   1b5ba:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
   1b5bc:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
   1b5be:	429c      	cmp	r4, r3
   1b5c0:	d00d      	beq.n	1b5de <clock_async_start+0xaa>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   1b5c2:	b113      	cbz	r3, 1b5ca <clock_async_start+0x96>
	return node->next;
   1b5c4:	681b      	ldr	r3, [r3, #0]
	} while (item);
   1b5c6:	2b00      	cmp	r3, #0
   1b5c8:	d1f9      	bne.n	1b5be <clock_async_start+0x8a>
	parent->next = child;
   1b5ca:	2000      	movs	r0, #0
   1b5cc:	6020      	str	r0, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1b5ce:	686b      	ldr	r3, [r5, #4]
   1b5d0:	b913      	cbnz	r3, 1b5d8 <clock_async_start+0xa4>
	list->head = node;
   1b5d2:	e9c5 4400 	strd	r4, r4, [r5]
   1b5d6:	e7d3      	b.n	1b580 <clock_async_start+0x4c>
	parent->next = child;
   1b5d8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b5da:	606c      	str	r4, [r5, #4]
   1b5dc:	e7d1      	b.n	1b582 <clock_async_start+0x4e>
				return -EALREADY;
   1b5de:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1b5e2:	e7ce      	b.n	1b582 <clock_async_start+0x4e>
   1b5e4:	0003533c 	.word	0x0003533c
   1b5e8:	00034ff7 	.word	0x00034ff7
   1b5ec:	000352f5 	.word	0x000352f5

0001b5f0 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
   1b5f0:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
   1b5f2:	4b10      	ldr	r3, [pc, #64]	; (1b634 <nrf_power_clock_isr+0x44>)
   1b5f4:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
   1b5f6:	b162      	cbz	r2, 1b612 <nrf_power_clock_isr+0x22>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
   1b5f8:	4a0f      	ldr	r2, [pc, #60]	; (1b638 <nrf_power_clock_isr+0x48>)
   1b5fa:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
   1b5fe:	07d1      	lsls	r1, r2, #31
   1b600:	d507      	bpl.n	1b612 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   1b602:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
   1b604:	480d      	ldr	r0, [pc, #52]	; (1b63c <nrf_power_clock_isr+0x4c>)
   1b606:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
   1b608:	6883      	ldr	r3, [r0, #8]
   1b60a:	7a5b      	ldrb	r3, [r3, #9]
   1b60c:	b90b      	cbnz	r3, 1b612 <nrf_power_clock_isr+0x22>
			clkstarted_handle(hfclk_dev);
   1b60e:	f016 f9dc 	bl	319ca <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
   1b612:	4b0b      	ldr	r3, [pc, #44]	; (1b640 <nrf_power_clock_isr+0x50>)
   1b614:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
   1b616:	b15a      	cbz	r2, 1b630 <nrf_power_clock_isr+0x40>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
   1b618:	4a07      	ldr	r2, [pc, #28]	; (1b638 <nrf_power_clock_isr+0x48>)
   1b61a:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
   1b61e:	0792      	lsls	r2, r2, #30
   1b620:	d506      	bpl.n	1b630 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   1b622:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
   1b624:	4807      	ldr	r0, [pc, #28]	; (1b644 <nrf_power_clock_isr+0x54>)
   1b626:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
   1b628:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
   1b62c:	f016 b9cd 	b.w	319ca <clkstarted_handle>
}
   1b630:	bd08      	pop	{r3, pc}
   1b632:	bf00      	nop
   1b634:	40005100 	.word	0x40005100
   1b638:	40005000 	.word	0x40005000
   1b63c:	20029040 	.word	0x20029040
   1b640:	40005104 	.word	0x40005104
   1b644:	2002904c 	.word	0x2002904c

0001b648 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   1b648:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   1b64a:	4c06      	ldr	r4, [pc, #24]	; (1b664 <z_clock_isr+0x1c>)
   1b64c:	4906      	ldr	r1, [pc, #24]	; (1b668 <z_clock_isr+0x20>)
   1b64e:	4622      	mov	r2, r4
   1b650:	4806      	ldr	r0, [pc, #24]	; (1b66c <z_clock_isr+0x24>)
   1b652:	2317      	movs	r3, #23
   1b654:	f016 f910 	bl	31878 <printk>
   1b658:	4620      	mov	r0, r4
}
   1b65a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   1b65e:	2117      	movs	r1, #23
   1b660:	f016 b917 	b.w	31892 <assert_post_action>
   1b664:	000353b6 	.word	0x000353b6
   1b668:	0003686f 	.word	0x0003686f
   1b66c:	00034ff7 	.word	0x00034ff7

0001b670 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
   1b670:	2200      	movs	r2, #0
{
   1b672:	b538      	push	{r3, r4, r5, lr}
	RTC->EVENTS_COMPARE[0] = 0;
   1b674:	4b21      	ldr	r3, [pc, #132]	; (1b6fc <rtc1_nrf_isr+0x8c>)
   1b676:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
   1b67a:	f04f 0320 	mov.w	r3, #32
   1b67e:	f3ef 8511 	mrs	r5, BASEPRI
   1b682:	f383 8811 	msr	BASEPRI, r3
   1b686:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = z_arch_irq_lock();

#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1b68a:	481d      	ldr	r0, [pc, #116]	; (1b700 <rtc1_nrf_isr+0x90>)
   1b68c:	f013 f864 	bl	2e758 <z_spin_lock_valid>
   1b690:	b960      	cbnz	r0, 1b6ac <rtc1_nrf_isr+0x3c>
   1b692:	491c      	ldr	r1, [pc, #112]	; (1b704 <rtc1_nrf_isr+0x94>)
   1b694:	235f      	movs	r3, #95	; 0x5f
   1b696:	4a1c      	ldr	r2, [pc, #112]	; (1b708 <rtc1_nrf_isr+0x98>)
   1b698:	481c      	ldr	r0, [pc, #112]	; (1b70c <rtc1_nrf_isr+0x9c>)
   1b69a:	f016 f8ed 	bl	31878 <printk>
   1b69e:	481c      	ldr	r0, [pc, #112]	; (1b710 <rtc1_nrf_isr+0xa0>)
   1b6a0:	f016 f8ea 	bl	31878 <printk>
   1b6a4:	215f      	movs	r1, #95	; 0x5f
   1b6a6:	4818      	ldr	r0, [pc, #96]	; (1b708 <rtc1_nrf_isr+0x98>)
   1b6a8:	f016 f8f3 	bl	31892 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   1b6ac:	4814      	ldr	r0, [pc, #80]	; (1b700 <rtc1_nrf_isr+0x90>)
   1b6ae:	f013 f871 	bl	2e794 <z_spin_lock_set_owner>
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
   1b6b2:	4b12      	ldr	r3, [pc, #72]	; (1b6fc <rtc1_nrf_isr+0x8c>)

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   1b6b4:	4a17      	ldr	r2, [pc, #92]	; (1b714 <rtc1_nrf_isr+0xa4>)
   1b6b6:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
   1b6ba:	6813      	ldr	r3, [r2, #0]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1b6bc:	4810      	ldr	r0, [pc, #64]	; (1b700 <rtc1_nrf_isr+0x90>)
	return (a - b) & COUNTER_MAX;
   1b6be:	1ae4      	subs	r4, r4, r3
   1b6c0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   1b6c4:	4423      	add	r3, r4
   1b6c6:	6013      	str	r3, [r2, #0]
   1b6c8:	f013 f854 	bl	2e774 <z_spin_unlock_valid>
   1b6cc:	b960      	cbnz	r0, 1b6e8 <rtc1_nrf_isr+0x78>
   1b6ce:	4912      	ldr	r1, [pc, #72]	; (1b718 <rtc1_nrf_isr+0xa8>)
   1b6d0:	2372      	movs	r3, #114	; 0x72
   1b6d2:	4a0d      	ldr	r2, [pc, #52]	; (1b708 <rtc1_nrf_isr+0x98>)
   1b6d4:	480d      	ldr	r0, [pc, #52]	; (1b70c <rtc1_nrf_isr+0x9c>)
   1b6d6:	f016 f8cf 	bl	31878 <printk>
   1b6da:	4810      	ldr	r0, [pc, #64]	; (1b71c <rtc1_nrf_isr+0xac>)
   1b6dc:	f016 f8cc 	bl	31878 <printk>
   1b6e0:	2172      	movs	r1, #114	; 0x72
   1b6e2:	4809      	ldr	r0, [pc, #36]	; (1b708 <rtc1_nrf_isr+0x98>)
   1b6e4:	f016 f8d5 	bl	31892 <assert_post_action>
	__asm__ volatile(
   1b6e8:	f385 8811 	msr	BASEPRI, r5
   1b6ec:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   1b6f0:	4620      	mov	r0, r4
}
   1b6f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   1b6f6:	f013 bc55 	b.w	2efa4 <z_clock_announce>
   1b6fa:	bf00      	nop
   1b6fc:	40015000 	.word	0x40015000
   1b700:	20020080 	.word	0x20020080
   1b704:	00035426 	.word	0x00035426
   1b708:	000353f4 	.word	0x000353f4
   1b70c:	00034ff7 	.word	0x00034ff7
   1b710:	0003543b 	.word	0x0003543b
   1b714:	2002007c 	.word	0x2002007c
   1b718:	00035450 	.word	0x00035450
   1b71c:	00035467 	.word	0x00035467

0001b720 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
   1b720:	b570      	push	{r4, r5, r6, lr}
   1b722:	4818      	ldr	r0, [pc, #96]	; (1b784 <z_clock_driver_init+0x64>)
   1b724:	f011 fb3c 	bl	2cda0 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
   1b728:	b348      	cbz	r0, 1b77e <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   1b72a:	6843      	ldr	r3, [r0, #4]
   1b72c:	2100      	movs	r1, #0
   1b72e:	681b      	ldr	r3, [r3, #0]
   1b730:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
   1b732:	2601      	movs	r6, #1
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   1b734:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   1b736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b73a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   1b73e:	4d12      	ldr	r5, [pc, #72]	; (1b788 <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   1b740:	4631      	mov	r1, r6
   1b742:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
   1b746:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
   1b74a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1b74e:	4b0f      	ldr	r3, [pc, #60]	; (1b78c <z_clock_driver_init+0x6c>)
   1b750:	2015      	movs	r0, #21
   1b752:	601c      	str	r4, [r3, #0]
   1b754:	4b0e      	ldr	r3, [pc, #56]	; (1b790 <z_clock_driver_init+0x70>)
   1b756:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1b75a:	4622      	mov	r2, r4
   1b75c:	f000 fa28 	bl	1bbb0 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
   1b760:	2015      	movs	r0, #21
   1b762:	f000 fa15 	bl	1bb90 <z_arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   1b766:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1b768:	4b0a      	ldr	r3, [pc, #40]	; (1b794 <z_clock_driver_init+0x74>)
   1b76a:	601e      	str	r6, [r3, #0]
   1b76c:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
   1b76e:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
   1b772:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1b774:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1b778:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
   1b77c:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   1b77e:	f04f 30ff 	mov.w	r0, #4294967295
   1b782:	e7fb      	b.n	1b77c <z_clock_driver_init+0x5c>
   1b784:	0003538a 	.word	0x0003538a
   1b788:	40015000 	.word	0x40015000
   1b78c:	40015140 	.word	0x40015140
   1b790:	e000e100 	.word	0xe000e100
   1b794:	40015008 	.word	0x40015008

0001b798 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   1b798:	b538      	push	{r3, r4, r5, lr}
   1b79a:	4b34      	ldr	r3, [pc, #208]	; (1b86c <z_clock_set_timeout+0xd4>)
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
   1b79c:	f1b0 3fff 	cmp.w	r0, #4294967295
   1b7a0:	bf08      	it	eq
   1b7a2:	4618      	moveq	r0, r3
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   1b7a4:	1e44      	subs	r4, r0, #1
   1b7a6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   1b7aa:	429c      	cmp	r4, r3
   1b7ac:	bfa8      	it	ge
   1b7ae:	461c      	movge	r4, r3
	__asm__ volatile(
   1b7b0:	f04f 0320 	mov.w	r3, #32
   1b7b4:	f3ef 8511 	mrs	r5, BASEPRI
   1b7b8:	f383 8811 	msr	BASEPRI, r3
   1b7bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1b7c0:	482b      	ldr	r0, [pc, #172]	; (1b870 <z_clock_set_timeout+0xd8>)
   1b7c2:	f012 ffc9 	bl	2e758 <z_spin_lock_valid>
   1b7c6:	b960      	cbnz	r0, 1b7e2 <z_clock_set_timeout+0x4a>
   1b7c8:	492a      	ldr	r1, [pc, #168]	; (1b874 <z_clock_set_timeout+0xdc>)
   1b7ca:	235f      	movs	r3, #95	; 0x5f
   1b7cc:	4a2a      	ldr	r2, [pc, #168]	; (1b878 <z_clock_set_timeout+0xe0>)
   1b7ce:	482b      	ldr	r0, [pc, #172]	; (1b87c <z_clock_set_timeout+0xe4>)
   1b7d0:	f016 f852 	bl	31878 <printk>
   1b7d4:	482a      	ldr	r0, [pc, #168]	; (1b880 <z_clock_set_timeout+0xe8>)
   1b7d6:	f016 f84f 	bl	31878 <printk>
   1b7da:	215f      	movs	r1, #95	; 0x5f
   1b7dc:	4826      	ldr	r0, [pc, #152]	; (1b878 <z_clock_set_timeout+0xe0>)
   1b7de:	f016 f858 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b7e2:	4823      	ldr	r0, [pc, #140]	; (1b870 <z_clock_set_timeout+0xd8>)
   1b7e4:	f012 ffd6 	bl	2e794 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   1b7e8:	4a26      	ldr	r2, [pc, #152]	; (1b884 <z_clock_set_timeout+0xec>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
   1b7ea:	4927      	ldr	r1, [pc, #156]	; (1b888 <z_clock_set_timeout+0xf0>)
   1b7ec:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
   1b7f0:	6809      	ldr	r1, [r1, #0]
	return (a - b) & COUNTER_MAX;
   1b7f2:	1a58      	subs	r0, r3, r1
   1b7f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
   1b7f8:	3101      	adds	r1, #1
   1b7fa:	4408      	add	r0, r1
   1b7fc:	4420      	add	r0, r4
	return (a - b) & COUNTER_MAX;
   1b7fe:	1ac3      	subs	r3, r0, r3
   1b800:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1b804:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
   1b808:	2b02      	cmp	r3, #2
    p_reg->CC[ch] = cc_val;
   1b80a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
   1b80e:	d915      	bls.n	1b83c <z_clock_set_timeout+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1b810:	4817      	ldr	r0, [pc, #92]	; (1b870 <z_clock_set_timeout+0xd8>)
   1b812:	f012 ffaf 	bl	2e774 <z_spin_unlock_valid>
   1b816:	b960      	cbnz	r0, 1b832 <z_clock_set_timeout+0x9a>
   1b818:	491c      	ldr	r1, [pc, #112]	; (1b88c <z_clock_set_timeout+0xf4>)
   1b81a:	2372      	movs	r3, #114	; 0x72
   1b81c:	4a16      	ldr	r2, [pc, #88]	; (1b878 <z_clock_set_timeout+0xe0>)
   1b81e:	4817      	ldr	r0, [pc, #92]	; (1b87c <z_clock_set_timeout+0xe4>)
   1b820:	f016 f82a 	bl	31878 <printk>
   1b824:	481a      	ldr	r0, [pc, #104]	; (1b890 <z_clock_set_timeout+0xf8>)
   1b826:	f016 f827 	bl	31878 <printk>
   1b82a:	2172      	movs	r1, #114	; 0x72
   1b82c:	4812      	ldr	r0, [pc, #72]	; (1b878 <z_clock_set_timeout+0xe0>)
   1b82e:	f016 f830 	bl	31892 <assert_post_action>
	__asm__ volatile(
   1b832:	f385 8811 	msr	BASEPRI, r5
   1b836:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
   1b83a:	bd38      	pop	{r3, r4, r5, pc}
     return p_reg->COUNTER;
   1b83c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
   1b840:	4914      	ldr	r1, [pc, #80]	; (1b894 <z_clock_set_timeout+0xfc>)
	return (a - b) & COUNTER_MAX;
   1b842:	1ac3      	subs	r3, r0, r3
   1b844:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
   1b848:	1e5c      	subs	r4, r3, #1
   1b84a:	428c      	cmp	r4, r1
   1b84c:	d905      	bls.n	1b85a <z_clock_set_timeout+0xc2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b84e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1b852:	4b11      	ldr	r3, [pc, #68]	; (1b898 <z_clock_set_timeout+0x100>)
   1b854:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1b858:	e7da      	b.n	1b810 <z_clock_set_timeout+0x78>
		} else if (dt == 1) {
   1b85a:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
   1b85c:	bf02      	ittt	eq
   1b85e:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1b860:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1b864:	f8c2 0540 	streq.w	r0, [r2, #1344]	; 0x540
   1b868:	e7d2      	b.n	1b810 <z_clock_set_timeout+0x78>
   1b86a:	bf00      	nop
   1b86c:	00fffffe 	.word	0x00fffffe
   1b870:	20020080 	.word	0x20020080
   1b874:	00035426 	.word	0x00035426
   1b878:	000353f4 	.word	0x000353f4
   1b87c:	00034ff7 	.word	0x00034ff7
   1b880:	0003543b 	.word	0x0003543b
   1b884:	40015000 	.word	0x40015000
   1b888:	2002007c 	.word	0x2002007c
   1b88c:	00035450 	.word	0x00035450
   1b890:	00035467 	.word	0x00035467
   1b894:	007ffffe 	.word	0x007ffffe
   1b898:	e000e100 	.word	0xe000e100

0001b89c <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
   1b89c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1b89e:	f04f 0320 	mov.w	r3, #32
   1b8a2:	f3ef 8511 	mrs	r5, BASEPRI
   1b8a6:	f383 8811 	msr	BASEPRI, r3
   1b8aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1b8ae:	4819      	ldr	r0, [pc, #100]	; (1b914 <z_clock_elapsed+0x78>)
   1b8b0:	f012 ff52 	bl	2e758 <z_spin_lock_valid>
   1b8b4:	b960      	cbnz	r0, 1b8d0 <z_clock_elapsed+0x34>
   1b8b6:	4918      	ldr	r1, [pc, #96]	; (1b918 <z_clock_elapsed+0x7c>)
   1b8b8:	235f      	movs	r3, #95	; 0x5f
   1b8ba:	4a18      	ldr	r2, [pc, #96]	; (1b91c <z_clock_elapsed+0x80>)
   1b8bc:	4818      	ldr	r0, [pc, #96]	; (1b920 <z_clock_elapsed+0x84>)
   1b8be:	f015 ffdb 	bl	31878 <printk>
   1b8c2:	4818      	ldr	r0, [pc, #96]	; (1b924 <z_clock_elapsed+0x88>)
   1b8c4:	f015 ffd8 	bl	31878 <printk>
   1b8c8:	215f      	movs	r1, #95	; 0x5f
   1b8ca:	4814      	ldr	r0, [pc, #80]	; (1b91c <z_clock_elapsed+0x80>)
   1b8cc:	f015 ffe1 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b8d0:	4810      	ldr	r0, [pc, #64]	; (1b914 <z_clock_elapsed+0x78>)
   1b8d2:	f012 ff5f 	bl	2e794 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   1b8d6:	4b14      	ldr	r3, [pc, #80]	; (1b928 <z_clock_elapsed+0x8c>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1b8d8:	480e      	ldr	r0, [pc, #56]	; (1b914 <z_clock_elapsed+0x78>)
   1b8da:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   1b8de:	4b13      	ldr	r3, [pc, #76]	; (1b92c <z_clock_elapsed+0x90>)
	return (a - b) & COUNTER_MAX;
   1b8e0:	681b      	ldr	r3, [r3, #0]
   1b8e2:	1ae4      	subs	r4, r4, r3
   1b8e4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   1b8e8:	f012 ff44 	bl	2e774 <z_spin_unlock_valid>
   1b8ec:	b960      	cbnz	r0, 1b908 <z_clock_elapsed+0x6c>
   1b8ee:	4910      	ldr	r1, [pc, #64]	; (1b930 <z_clock_elapsed+0x94>)
   1b8f0:	2372      	movs	r3, #114	; 0x72
   1b8f2:	4a0a      	ldr	r2, [pc, #40]	; (1b91c <z_clock_elapsed+0x80>)
   1b8f4:	480a      	ldr	r0, [pc, #40]	; (1b920 <z_clock_elapsed+0x84>)
   1b8f6:	f015 ffbf 	bl	31878 <printk>
   1b8fa:	480e      	ldr	r0, [pc, #56]	; (1b934 <z_clock_elapsed+0x98>)
   1b8fc:	f015 ffbc 	bl	31878 <printk>
   1b900:	2172      	movs	r1, #114	; 0x72
   1b902:	4806      	ldr	r0, [pc, #24]	; (1b91c <z_clock_elapsed+0x80>)
   1b904:	f015 ffc5 	bl	31892 <assert_post_action>
	__asm__ volatile(
   1b908:	f385 8811 	msr	BASEPRI, r5
   1b90c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   1b910:	4620      	mov	r0, r4
   1b912:	bd38      	pop	{r3, r4, r5, pc}
   1b914:	20020080 	.word	0x20020080
   1b918:	00035426 	.word	0x00035426
   1b91c:	000353f4 	.word	0x000353f4
   1b920:	00034ff7 	.word	0x00034ff7
   1b924:	0003543b 	.word	0x0003543b
   1b928:	40015000 	.word	0x40015000
   1b92c:	2002007c 	.word	0x2002007c
   1b930:	00035450 	.word	0x00035450
   1b934:	00035467 	.word	0x00035467

0001b938 <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
   1b938:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1b93a:	f04f 0320 	mov.w	r3, #32
   1b93e:	f3ef 8511 	mrs	r5, BASEPRI
   1b942:	f383 8811 	msr	BASEPRI, r3
   1b946:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1b94a:	481a      	ldr	r0, [pc, #104]	; (1b9b4 <z_timer_cycle_get_32+0x7c>)
   1b94c:	f012 ff04 	bl	2e758 <z_spin_lock_valid>
   1b950:	b960      	cbnz	r0, 1b96c <z_timer_cycle_get_32+0x34>
   1b952:	4919      	ldr	r1, [pc, #100]	; (1b9b8 <z_timer_cycle_get_32+0x80>)
   1b954:	235f      	movs	r3, #95	; 0x5f
   1b956:	4a19      	ldr	r2, [pc, #100]	; (1b9bc <z_timer_cycle_get_32+0x84>)
   1b958:	4819      	ldr	r0, [pc, #100]	; (1b9c0 <z_timer_cycle_get_32+0x88>)
   1b95a:	f015 ff8d 	bl	31878 <printk>
   1b95e:	4819      	ldr	r0, [pc, #100]	; (1b9c4 <z_timer_cycle_get_32+0x8c>)
   1b960:	f015 ff8a 	bl	31878 <printk>
   1b964:	215f      	movs	r1, #95	; 0x5f
   1b966:	4815      	ldr	r0, [pc, #84]	; (1b9bc <z_timer_cycle_get_32+0x84>)
   1b968:	f015 ff93 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b96c:	4811      	ldr	r0, [pc, #68]	; (1b9b4 <z_timer_cycle_get_32+0x7c>)
   1b96e:	f012 ff11 	bl	2e794 <z_spin_lock_set_owner>
   1b972:	4b15      	ldr	r3, [pc, #84]	; (1b9c8 <z_timer_cycle_get_32+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1b974:	480f      	ldr	r0, [pc, #60]	; (1b9b4 <z_timer_cycle_get_32+0x7c>)
   1b976:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   1b97a:	4b14      	ldr	r3, [pc, #80]	; (1b9cc <z_timer_cycle_get_32+0x94>)
   1b97c:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   1b97e:	1ae4      	subs	r4, r4, r3
   1b980:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   1b984:	441c      	add	r4, r3
   1b986:	f012 fef5 	bl	2e774 <z_spin_unlock_valid>
   1b98a:	b960      	cbnz	r0, 1b9a6 <z_timer_cycle_get_32+0x6e>
   1b98c:	4910      	ldr	r1, [pc, #64]	; (1b9d0 <z_timer_cycle_get_32+0x98>)
   1b98e:	2372      	movs	r3, #114	; 0x72
   1b990:	4a0a      	ldr	r2, [pc, #40]	; (1b9bc <z_timer_cycle_get_32+0x84>)
   1b992:	480b      	ldr	r0, [pc, #44]	; (1b9c0 <z_timer_cycle_get_32+0x88>)
   1b994:	f015 ff70 	bl	31878 <printk>
   1b998:	480e      	ldr	r0, [pc, #56]	; (1b9d4 <z_timer_cycle_get_32+0x9c>)
   1b99a:	f015 ff6d 	bl	31878 <printk>
   1b99e:	2172      	movs	r1, #114	; 0x72
   1b9a0:	4806      	ldr	r0, [pc, #24]	; (1b9bc <z_timer_cycle_get_32+0x84>)
   1b9a2:	f015 ff76 	bl	31892 <assert_post_action>
	__asm__ volatile(
   1b9a6:	f385 8811 	msr	BASEPRI, r5
   1b9aa:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   1b9ae:	4620      	mov	r0, r4
   1b9b0:	bd38      	pop	{r3, r4, r5, pc}
   1b9b2:	bf00      	nop
   1b9b4:	20020080 	.word	0x20020080
   1b9b8:	00035426 	.word	0x00035426
   1b9bc:	000353f4 	.word	0x000353f4
   1b9c0:	00034ff7 	.word	0x00034ff7
   1b9c4:	0003543b 	.word	0x0003543b
   1b9c8:	40015000 	.word	0x40015000
   1b9cc:	2002007c 	.word	0x2002007c
   1b9d0:	00035450 	.word	0x00035450
   1b9d4:	00035467 	.word	0x00035467

0001b9d8 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   1b9d8:	4804      	ldr	r0, [pc, #16]	; (1b9ec <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   1b9da:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
   1b9dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
   1b9de:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   1b9e0:	d003      	beq.n	1b9ea <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   1b9e2:	4903      	ldr	r1, [pc, #12]	; (1b9f0 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   1b9e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   1b9e8:	600a      	str	r2, [r1, #0]

0001b9ea <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
   1b9ea:	4770      	bx	lr
    ldr r0, =_kernel
   1b9ec:	200259e0 	.word	0x200259e0
    ldr r1, =_SCS_ICSR
   1b9f0:	e000ed04 	.word	0xe000ed04

0001b9f4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1b9f4:	492e      	ldr	r1, [pc, #184]	; (1bab0 <in_fp_endif+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1b9f6:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1b9f8:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   1b9fc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1b9fe:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1ba02:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   1ba06:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   1ba0a:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   1ba0e:	d004      	beq.n	1ba1a <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   1ba10:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   1ba14:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   1ba18:	e007      	b.n	1ba2a <out_fp_endif>

0001ba1a <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   1ba1a:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
   1ba1e:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   1ba22:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   1ba26:	f050 0004 	orrs.w	r0, r0, #4

0001ba2a <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   1ba2a:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1ba2e:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1ba30:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1ba34:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1ba38:	4f1e      	ldr	r7, [pc, #120]	; (1bab4 <in_fp_endif+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1ba3a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1ba3e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   1ba40:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1ba42:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1ba44:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
   1ba46:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1ba48:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1ba4a:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   1ba4e:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   1ba52:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   1ba56:	d105      	bne.n	1ba64 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   1ba58:	2300      	movs	r3, #0
    vmsr fpscr, r3
   1ba5a:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   1ba5e:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   1ba62:	e005      	b.n	1ba70 <in_fp_endif>

0001ba64 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   1ba64:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   1ba68:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
   1ba6c:	ec90 8a10 	vldmia	r0, {s16-s31}

0001ba70 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   1ba70:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   1ba74:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   1ba78:	f383 8814 	msr	CONTROL, r3
    isb
   1ba7c:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1ba80:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   1ba82:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1ba84:	f015 ffd1 	bl	31a2a <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1ba88:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1ba8c:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   1ba90:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
   1ba94:	f04f 0000 	mov.w	r0, #0
    msr PSPLIM, r0
   1ba98:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1ba9c:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   1baa0:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1baa4:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   1baa6:	f015 ffb1 	bl	31a0c <configure_builtin_stack_guard>
    pop {r2, lr}
   1baaa:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   1baae:	4770      	bx	lr
    ldr r1, =_kernel
   1bab0:	200259e0 	.word	0x200259e0
    ldr v4, =_SCS_ICSR
   1bab4:	e000ed04 	.word	0xe000ed04

0001bab8 <z_arm_svc>:
 */
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
    tst lr, #0x4    /* did we come from thread mode ? */
   1bab8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1babc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1babe:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1bac2:	f3ef 8009 	mrsne	r0, PSP


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1bac6:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
    ldrb r1, [r1, #-2]
   1bac8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
    tst r2, #0x1
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1bacc:	2902      	cmp	r1, #2
    beq _oops
   1bace:	d0ff      	beq.n	1bad0 <_oops>

0001bad0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1bad0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1bad2:	f015 ff9f 	bl	31a14 <z_do_kernel_oops>
    pop {r0, pc}
   1bad6:	bd01      	pop	{r0, pc}

0001bad8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
   1bad8:	4901      	ldr	r1, [pc, #4]	; (1bae0 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   1bada:	2210      	movs	r2, #16
	str r2, [r1]
   1badc:	600a      	str	r2, [r1, #0]
#endif
	bx lr
   1bade:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   1bae0:	e000ed10 	.word	0xe000ed10

0001bae4 <z_arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   1bae4:	4040      	eors	r0, r0
	msr BASEPRI, r0
   1bae6:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
   1baea:	bf30      	wfi

	bx lr
   1baec:	4770      	bx	lr
   1baee:	bf00      	nop

0001baf0 <z_arm_bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
   1baf0:	4040      	eors	r0, r0
	msr BASEPRI, r0
   1baf2:	f380 8811 	msr	BASEPRI, r0
	/* RETTOBASE flag is not banked between security states.
	 * Therefore, we cannot rely on this flag, to obtain the SP
	 * of the current security state.
	 * Instead, we use the EXC_RETURN.SPSEL flag.
	 */
 	ldr r0, =0x4
   1baf6:	f04f 0004 	mov.w	r0, #4
	mov r1, lr
   1bafa:	4671      	mov	r1, lr
	tst r1, r0
   1bafc:	4201      	tst	r1, r0
	beq _s_stack_frame_msp
   1bafe:	d002      	beq.n	1bb06 <_s_stack_frame_msp>
	mrs r0, PSP
   1bb00:	f3ef 8009 	mrs	r0, PSP
	bne _s_stack_frame_endif
   1bb04:	d101      	bne.n	1bb0a <_s_stack_frame_endif>

0001bb06 <_s_stack_frame_msp>:
_s_stack_frame_msp:
	mrs r0, MSP
   1bb06:	f3ef 8008 	mrs	r0, MSP

0001bb0a <_s_stack_frame_endif>:
	 *
	 * To determine this we need to inspect the EXC_RETURN value
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
   1bb0a:	4671      	mov	r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
   1bb0c:	b501      	push	{r0, lr}
	bl z_arm_fault
   1bb0e:	f000 fbdf 	bl	1c2d0 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
   1bb12:	bd01      	pop	{r0, pc}

0001bb14 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1bb14:	bf30      	wfi
    b z_SysNmiOnReset
   1bb16:	f7ff bffd 	b.w	1bb14 <z_SysNmiOnReset>
   1bb1a:	bf00      	nop

0001bb1c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1bb1c:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   1bb1e:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1bb20:	4a0b      	ldr	r2, [pc, #44]	; (1bb50 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1bb22:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   1bb24:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1bb26:	bf1e      	ittt	ne
	movne	r1, #0
   1bb28:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1bb2a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   1bb2c:	f016 fd6e 	blne	3260c <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1bb30:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1bb32:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1bb36:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1bb3a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
   1bb3e:	4905      	ldr	r1, [pc, #20]	; (1bb54 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1bb40:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1bb42:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   1bb44:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1bb46:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1bb4a:	4903      	ldr	r1, [pc, #12]	; (1bb58 <_isr_wrapper+0x3c>)
	bx r1
   1bb4c:	4708      	bx	r1
   1bb4e:	0000      	.short	0x0000
	ldr r2, =_kernel
   1bb50:	200259e0 	.word	0x200259e0
	ldr r1, =_sw_isr_table
   1bb54:	00033640 	.word	0x00033640
	ldr r1, =z_arm_int_exit
   1bb58:	0001b9d9 	.word	0x0001b9d9

0001bb5c <z_arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   1bb5c:	4a09      	ldr	r2, [pc, #36]	; (1bb84 <z_arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1bb5e:	490a      	ldr	r1, [pc, #40]	; (1bb88 <z_arch_swap+0x2c>)
	_current->arch.basepri = key;
   1bb60:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1bb62:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   1bb64:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
   1bb66:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1bb68:	4908      	ldr	r1, [pc, #32]	; (1bb8c <z_arch_swap+0x30>)
   1bb6a:	684b      	ldr	r3, [r1, #4]
   1bb6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1bb70:	604b      	str	r3, [r1, #4]
   1bb72:	2300      	movs	r3, #0
   1bb74:	f383 8811 	msr	BASEPRI, r3
   1bb78:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1bb7c:	6893      	ldr	r3, [r2, #8]
}
   1bb7e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   1bb80:	4770      	bx	lr
   1bb82:	bf00      	nop
   1bb84:	200259e0 	.word	0x200259e0
   1bb88:	00034d94 	.word	0x00034d94
   1bb8c:	e000ed00 	.word	0xe000ed00

0001bb90 <z_arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1bb90:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   1bb92:	2b00      	cmp	r3, #0
   1bb94:	db08      	blt.n	1bba8 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bb96:	2201      	movs	r2, #1
   1bb98:	f000 001f 	and.w	r0, r0, #31
   1bb9c:	fa02 f000 	lsl.w	r0, r2, r0
   1bba0:	4a02      	ldr	r2, [pc, #8]	; (1bbac <z_arch_irq_enable+0x1c>)
   1bba2:	095b      	lsrs	r3, r3, #5
   1bba4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   1bba8:	4770      	bx	lr
   1bbaa:	bf00      	nop
   1bbac:	e000e100 	.word	0xe000e100

0001bbb0 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
   1bbb0:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   1bbb2:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   1bbb4:	2c07      	cmp	r4, #7
{
   1bbb6:	4605      	mov	r5, r0
   1bbb8:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   1bbba:	d90e      	bls.n	1bbda <z_arm_irq_priority_set+0x2a>
   1bbbc:	2360      	movs	r3, #96	; 0x60
   1bbbe:	4a10      	ldr	r2, [pc, #64]	; (1bc00 <z_arm_irq_priority_set+0x50>)
   1bbc0:	4910      	ldr	r1, [pc, #64]	; (1bc04 <z_arm_irq_priority_set+0x54>)
   1bbc2:	4811      	ldr	r0, [pc, #68]	; (1bc08 <z_arm_irq_priority_set+0x58>)
   1bbc4:	f015 fe58 	bl	31878 <printk>
   1bbc8:	4631      	mov	r1, r6
   1bbca:	4810      	ldr	r0, [pc, #64]	; (1bc0c <z_arm_irq_priority_set+0x5c>)
   1bbcc:	2207      	movs	r2, #7
   1bbce:	f015 fe53 	bl	31878 <printk>
   1bbd2:	2160      	movs	r1, #96	; 0x60
   1bbd4:	480a      	ldr	r0, [pc, #40]	; (1bc00 <z_arm_irq_priority_set+0x50>)
   1bbd6:	f015 fe5c 	bl	31892 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1bbda:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1bbdc:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bbde:	bfa8      	it	ge
   1bbe0:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
   1bbe4:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bbe8:	bfb8      	it	lt
   1bbea:	4b09      	ldrlt	r3, [pc, #36]	; (1bc10 <z_arm_irq_priority_set+0x60>)
   1bbec:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bbee:	bfab      	itete	ge
   1bbf0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bbf4:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bbf8:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bbfc:	555c      	strblt	r4, [r3, r5]
}
   1bbfe:	bd70      	pop	{r4, r5, r6, pc}
   1bc00:	0003547a 	.word	0x0003547a
   1bc04:	000354b4 	.word	0x000354b4
   1bc08:	00034ff7 	.word	0x00034ff7
   1bc0c:	000354cf 	.word	0x000354cf
   1bc10:	e000ed14 	.word	0xe000ed14

0001bc14 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   1bc14:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1bc16:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   1bc18:	4b04      	ldr	r3, [pc, #16]	; (1bc2c <_arch_isr_direct_pm+0x18>)
   1bc1a:	6a18      	ldr	r0, [r3, #32]
   1bc1c:	b118      	cbz	r0, 1bc26 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   1bc1e:	2200      	movs	r2, #0
   1bc20:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   1bc22:	f016 fcf3 	bl	3260c <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1bc26:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   1bc28:	bd08      	pop	{r3, pc}
   1bc2a:	bf00      	nop
   1bc2c:	200259e0 	.word	0x200259e0

0001bc30 <z_arch_new_thread>:
 */
void z_arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		       size_t stackSize, k_thread_entry_t pEntry,
		       void *parameter1, void *parameter2, void *parameter3,
		       int priority, unsigned int options)
{
   1bc30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bc34:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1bc36:	4605      	mov	r5, r0
	char *pStackMem = Z_THREAD_STACK_BUFFER(stack);
	char *stackEnd;
	/* Offset between the top of stack and the high end of stack area. */
	u32_t top_of_stack_offset = 0U;

	Z_ASSERT_VALID_PRIO(priority, pEntry);
   1bc38:	2e0f      	cmp	r6, #15
{
   1bc3a:	4689      	mov	r9, r1
   1bc3c:	4690      	mov	r8, r2
   1bc3e:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(priority, pEntry);
   1bc40:	d102      	bne.n	1bc48 <z_arch_new_thread+0x18>
   1bc42:	4b1e      	ldr	r3, [pc, #120]	; (1bcbc <z_arch_new_thread+0x8c>)
   1bc44:	429f      	cmp	r7, r3
   1bc46:	d014      	beq.n	1bc72 <z_arch_new_thread+0x42>
   1bc48:	f106 0310 	add.w	r3, r6, #16
   1bc4c:	2b1e      	cmp	r3, #30
   1bc4e:	d910      	bls.n	1bc72 <z_arch_new_thread+0x42>
   1bc50:	232e      	movs	r3, #46	; 0x2e
   1bc52:	4a1b      	ldr	r2, [pc, #108]	; (1bcc0 <z_arch_new_thread+0x90>)
   1bc54:	491b      	ldr	r1, [pc, #108]	; (1bcc4 <z_arch_new_thread+0x94>)
   1bc56:	481c      	ldr	r0, [pc, #112]	; (1bcc8 <z_arch_new_thread+0x98>)
   1bc58:	f015 fe0e 	bl	31878 <printk>
   1bc5c:	4631      	mov	r1, r6
   1bc5e:	481b      	ldr	r0, [pc, #108]	; (1bccc <z_arch_new_thread+0x9c>)
   1bc60:	f06f 030f 	mvn.w	r3, #15
   1bc64:	220e      	movs	r2, #14
   1bc66:	f015 fe07 	bl	31878 <printk>
   1bc6a:	212e      	movs	r1, #46	; 0x2e
   1bc6c:	4814      	ldr	r0, [pc, #80]	; (1bcc0 <z_arch_new_thread+0x90>)
   1bc6e:	f015 fe10 	bl	31892 <assert_post_action>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   1bc72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bc74:	2204      	movs	r2, #4
   1bc76:	4631      	mov	r1, r6
   1bc78:	4628      	mov	r0, r5
   1bc7a:	f016 fd70 	bl	3275e <z_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   1bc7e:	2200      	movs	r2, #0
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
   1bc80:	eb09 0408 	add.w	r4, r9, r8
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
   1bc84:	4912      	ldr	r1, [pc, #72]	; (1bcd0 <z_arch_new_thread+0xa0>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   1bc86:	f1a4 0320 	sub.w	r3, r4, #32
   1bc8a:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
   1bc8e:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
   1bc92:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
   1bc96:	e9c5 9816 	strd	r9, r8, [r5, #88]	; 0x58
   1bc9a:	6199      	str	r1, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
   1bc9c:	9908      	ldr	r1, [sp, #32]
	pInitCtx->basic.a1 = (u32_t)pEntry;
   1bc9e:	601f      	str	r7, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   1bca0:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   1bca2:	9909      	ldr	r1, [sp, #36]	; 0x24
   1bca4:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   1bca6:	990a      	ldr	r1, [sp, #40]	; 0x28
   1bca8:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
   1bcaa:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   1bcae:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
   1bcb0:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
   1bcb2:	666a      	str	r2, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
   1bcb4:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1bcb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1bcbc:	0002cf35 	.word	0x0002cf35
   1bcc0:	00035504 	.word	0x00035504
   1bcc4:	0003553a 	.word	0x0003553a
   1bcc8:	00034ff7 	.word	0x00034ff7
   1bccc:	000355c7 	.word	0x000355c7
   1bcd0:	00031523 	.word	0x00031523

0001bcd4 <z_arch_switch_to_main_thread>:

void z_arch_switch_to_main_thread(struct k_thread *main_thread,
				  k_thread_stack_t *main_stack,
				  size_t main_stack_size,
				  k_thread_entry_t _main)
{
   1bcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bcd6:	461f      	mov	r7, r3
   1bcd8:	4606      	mov	r6, r0
   1bcda:	460d      	mov	r5, r1
   1bcdc:	4614      	mov	r4, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   1bcde:	2300      	movs	r3, #0
   1bce0:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1bce4:	f3ef 8214 	mrs	r2, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   1bce8:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   1bcec:	f382 8814 	msr	CONTROL, r2
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   1bcf0:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1bcf4:	f000 fc14 	bl	1c520 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
   1bcf8:	4b0c      	ldr	r3, [pc, #48]	; (1bd2c <z_arch_switch_to_main_thread+0x58>)
	start_of_main_stack =
   1bcfa:	442c      	add	r4, r5
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1bcfc:	4630      	mov	r0, r6
	_current = main_thread;
   1bcfe:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
   1bd00:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1bd04:	f015 fe91 	bl	31a2a <z_arm_configure_dynamic_mpu_regions>
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1bd08:	f385 880b 	msr	PSPLIM, r5

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1bd0c:	4638      	mov	r0, r7
   1bd0e:	f384 8809 	msr	PSP, r4
   1bd12:	b663      	cpsie	if
   1bd14:	f04f 0100 	mov.w	r1, #0
   1bd18:	f381 8811 	msr	BASEPRI, r1
   1bd1c:	f3bf 8f6f 	isb	sy
   1bd20:	2100      	movs	r1, #0
   1bd22:	2200      	movs	r2, #0
   1bd24:	2300      	movs	r3, #0
   1bd26:	f015 fbfc 	bl	31522 <z_thread_entry>
   1bd2a:	bf00      	nop
   1bd2c:	200259e0 	.word	0x200259e0

0001bd30 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1bd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd34:	4681      	mov	r9, r0
   1bd36:	b087      	sub	sp, #28

	if (esf != NULL) {
   1bd38:	460c      	mov	r4, r1
   1bd3a:	2900      	cmp	r1, #0
   1bd3c:	d07a      	beq.n	1be34 <z_arm_fatal_error+0x104>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1bd3e:	f04f 0801 	mov.w	r8, #1
   1bd42:	f04f 0000 	mov.w	r0, #0
   1bd46:	4b3f      	ldr	r3, [pc, #252]	; (1be44 <z_arm_fatal_error+0x114>)
   1bd48:	4d3f      	ldr	r5, [pc, #252]	; (1be48 <z_arm_fatal_error+0x118>)
   1bd4a:	f368 0002 	bfi	r0, r8, #0, #3
   1bd4e:	1aed      	subs	r5, r5, r3
   1bd50:	688b      	ldr	r3, [r1, #8]
   1bd52:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   1bd56:	9300      	str	r3, [sp, #0]
   1bd58:	f36f 00c5 	bfc	r0, #3, #3
   1bd5c:	e9d1 2300 	ldrd	r2, r3, [r1]
   1bd60:	f365 108f 	bfi	r0, r5, #6, #10
   1bd64:	4939      	ldr	r1, [pc, #228]	; (1be4c <z_arm_fatal_error+0x11c>)
   1bd66:	f015 fda4 	bl	318b2 <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1bd6a:	f04f 0000 	mov.w	r0, #0
   1bd6e:	6963      	ldr	r3, [r4, #20]
   1bd70:	f368 0002 	bfi	r0, r8, #0, #3
   1bd74:	9300      	str	r3, [sp, #0]
   1bd76:	f36f 00c5 	bfc	r0, #3, #3
   1bd7a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   1bd7e:	f365 108f 	bfi	r0, r5, #6, #10
   1bd82:	4933      	ldr	r1, [pc, #204]	; (1be50 <z_arm_fatal_error+0x120>)
   1bd84:	f015 fd95 	bl	318b2 <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1bd88:	f04f 0000 	mov.w	r0, #0
   1bd8c:	f368 0002 	bfi	r0, r8, #0, #3
   1bd90:	f36f 00c5 	bfc	r0, #3, #3
   1bd94:	f365 108f 	bfi	r0, r5, #6, #10
   1bd98:	69e2      	ldr	r2, [r4, #28]
   1bd9a:	492e      	ldr	r1, [pc, #184]	; (1be54 <z_arm_fatal_error+0x124>)
   1bd9c:	f015 fd89 	bl	318b2 <log_string_sync>
   1bda0:	4627      	mov	r7, r4
	for (int i = 0; i < 16; i += 4) {
   1bda2:	2600      	movs	r6, #0
		LOG_ERR("s[%d]:  0x%08x  s[%d]:  0x%08x"
   1bda4:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 1be60 <z_arm_fatal_error+0x130>
   1bda8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   1bdac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1bdb0:	1cf3      	adds	r3, r6, #3
   1bdb2:	ed97 7a08 	vldr	s14, [r7, #32]
   1bdb6:	9304      	str	r3, [sp, #16]
   1bdb8:	edcd 7a05 	vstr	s15, [sp, #20]
   1bdbc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   1bdc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1bdc4:	1cb3      	adds	r3, r6, #2
   1bdc6:	9302      	str	r3, [sp, #8]
   1bdc8:	edcd 7a03 	vstr	s15, [sp, #12]
   1bdcc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   1bdd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1bdd4:	edcd 7a01 	vstr	s15, [sp, #4]
   1bdd8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   1bddc:	f368 0a02 	bfi	sl, r8, #0, #3
   1bde0:	f36f 0ac5 	bfc	sl, #3, #3
   1bde4:	1c73      	adds	r3, r6, #1
   1bde6:	f365 1a8f 	bfi	sl, r5, #6, #10
   1bdea:	9300      	str	r3, [sp, #0]
   1bdec:	4632      	mov	r2, r6
   1bdee:	ee17 3a90 	vmov	r3, s15
   1bdf2:	4659      	mov	r1, fp
   1bdf4:	4650      	mov	r0, sl
	for (int i = 0; i < 16; i += 4) {
   1bdf6:	3604      	adds	r6, #4
		LOG_ERR("s[%d]:  0x%08x  s[%d]:  0x%08x"
   1bdf8:	f015 fd5b 	bl	318b2 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   1bdfc:	2e10      	cmp	r6, #16
   1bdfe:	f107 0710 	add.w	r7, r7, #16
   1be02:	d1d1      	bne.n	1bda8 <z_arm_fatal_error+0x78>
	LOG_ERR("fpscr:  0x%08x\n", esf->fpscr);
   1be04:	f04f 0000 	mov.w	r0, #0
   1be08:	f368 0002 	bfi	r0, r8, #0, #3
   1be0c:	f36f 00c5 	bfc	r0, #3, #3
   1be10:	f365 108f 	bfi	r0, r5, #6, #10
   1be14:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1be16:	4910      	ldr	r1, [pc, #64]	; (1be58 <z_arm_fatal_error+0x128>)
   1be18:	f015 fd4b 	bl	318b2 <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   1be1c:	f04f 0000 	mov.w	r0, #0
   1be20:	f368 0002 	bfi	r0, r8, #0, #3
   1be24:	f36f 00c5 	bfc	r0, #3, #3
   1be28:	f365 108f 	bfi	r0, r5, #6, #10
   1be2c:	69a2      	ldr	r2, [r4, #24]
   1be2e:	490b      	ldr	r1, [pc, #44]	; (1be5c <z_arm_fatal_error+0x12c>)
   1be30:	f015 fd3f 	bl	318b2 <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1be34:	4621      	mov	r1, r4
   1be36:	4648      	mov	r0, r9
}
   1be38:	b007      	add	sp, #28
   1be3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_fatal_error(reason, esf);
   1be3e:	f010 bff9 	b.w	2ce34 <z_fatal_error>
   1be42:	bf00      	nop
   1be44:	00033914 	.word	0x00033914
   1be48:	00033994 	.word	0x00033994
   1be4c:	000355f8 	.word	0x000355f8
   1be50:	00035627 	.word	0x00035627
   1be54:	00035656 	.word	0x00035656
   1be58:	000356a5 	.word	0x000356a5
   1be5c:	000356b5 	.word	0x000356b5
   1be60:	00035665 	.word	0x00035665

0001be64 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1be64:	4a11      	ldr	r2, [pc, #68]	; (1beac <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   1be66:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1be68:	4b11      	ldr	r3, [pc, #68]	; (1beb0 <z_arm_prep_c+0x4c>)
   1be6a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1be6e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1be70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1be74:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   1be78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1be7c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   1be80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   1be84:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   1be88:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   1be8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1be90:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   1be94:	2300      	movs	r3, #0
   1be96:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
   1be9a:	f011 f865 	bl	2cf68 <z_bss_zero>
	z_data_copy();
   1be9e:	f011 f86d 	bl	2cf7c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
   1bea2:	f000 faf3 	bl	1c48c <z_arm_int_lib_init>
	z_cstart();
   1bea6:	f011 f89b 	bl	2cfe0 <z_cstart>
   1beaa:	bf00      	nop
   1beac:	00018200 	.word	0x00018200
   1beb0:	e000ed00 	.word	0xe000ed00

0001beb4 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   1beb4:	f015 fcf4 	bl	318a0 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1beb8:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1beba:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
   1bebe:	4808      	ldr	r0, [pc, #32]	; (1bee0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   1bec0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   1bec4:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1bec6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1beca:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1bece:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1bed0:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1bed2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1bed6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1beda:	f7ff ffc3 	bl	1be64 <z_arm_prep_c>
   1bede:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   1bee0:	20027dc8 	.word	0x20027dc8

0001bee4 <bus_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1bee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bee8:	4607      	mov	r7, r0
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   1beea:	f04f 0801 	mov.w	r8, #1
   1beee:	f04f 0000 	mov.w	r0, #0
   1bef2:	4b44      	ldr	r3, [pc, #272]	; (1c004 <bus_fault.isra.2+0x120>)
   1bef4:	4c44      	ldr	r4, [pc, #272]	; (1c008 <bus_fault.isra.2+0x124>)
   1bef6:	f368 0002 	bfi	r0, r8, #0, #3
   1befa:	1ae4      	subs	r4, r4, r3
   1befc:	f36f 00c5 	bfc	r0, #3, #3
   1bf00:	f3c4 04c9 	ubfx	r4, r4, #3, #10

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1bf04:	4d41      	ldr	r5, [pc, #260]	; (1c00c <bus_fault.isra.2+0x128>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1bf06:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   1bf08:	f364 108f 	bfi	r0, r4, #6, #10
   1bf0c:	4940      	ldr	r1, [pc, #256]	; (1c010 <bus_fault.isra.2+0x12c>)
   1bf0e:	f015 fcd0 	bl	318b2 <log_string_sync>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1bf12:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1bf14:	04d1      	lsls	r1, r2, #19
   1bf16:	d50a      	bpl.n	1bf2e <bus_fault.isra.2+0x4a>
		PR_FAULT_INFO("  Stacking error");
   1bf18:	f04f 0000 	mov.w	r0, #0
   1bf1c:	f368 0002 	bfi	r0, r8, #0, #3
   1bf20:	f36f 00c5 	bfc	r0, #3, #3
   1bf24:	f364 108f 	bfi	r0, r4, #6, #10
   1bf28:	493a      	ldr	r1, [pc, #232]	; (1c014 <bus_fault.isra.2+0x130>)
   1bf2a:	f015 fcc2 	bl	318b2 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1bf2e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1bf30:	051a      	lsls	r2, r3, #20
   1bf32:	d50b      	bpl.n	1bf4c <bus_fault.isra.2+0x68>
		PR_FAULT_INFO("  Unstacking error");
   1bf34:	f04f 0000 	mov.w	r0, #0
   1bf38:	2301      	movs	r3, #1
   1bf3a:	f363 0002 	bfi	r0, r3, #0, #3
   1bf3e:	f36f 00c5 	bfc	r0, #3, #3
   1bf42:	f364 108f 	bfi	r0, r4, #6, #10
   1bf46:	4934      	ldr	r1, [pc, #208]	; (1c018 <bus_fault.isra.2+0x134>)
   1bf48:	f015 fcb3 	bl	318b2 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1bf4c:	4d2f      	ldr	r5, [pc, #188]	; (1c00c <bus_fault.isra.2+0x128>)
   1bf4e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1bf50:	059b      	lsls	r3, r3, #22
   1bf52:	d520      	bpl.n	1bf96 <bus_fault.isra.2+0xb2>
		PR_FAULT_INFO("  Precise data bus error");
   1bf54:	f04f 0801 	mov.w	r8, #1
   1bf58:	f04f 0000 	mov.w	r0, #0
   1bf5c:	f368 0002 	bfi	r0, r8, #0, #3
   1bf60:	f36f 00c5 	bfc	r0, #3, #3
   1bf64:	f364 108f 	bfi	r0, r4, #6, #10
   1bf68:	492c      	ldr	r1, [pc, #176]	; (1c01c <bus_fault.isra.2+0x138>)
   1bf6a:	f015 fca2 	bl	318b2 <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   1bf6e:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1bf70:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1bf72:	0418      	lsls	r0, r3, #16
   1bf74:	d50f      	bpl.n	1bf96 <bus_fault.isra.2+0xb2>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1bf76:	f04f 0000 	mov.w	r0, #0
   1bf7a:	f368 0002 	bfi	r0, r8, #0, #3
   1bf7e:	f36f 00c5 	bfc	r0, #3, #3
   1bf82:	f364 108f 	bfi	r0, r4, #6, #10
   1bf86:	4926      	ldr	r1, [pc, #152]	; (1c020 <bus_fault.isra.2+0x13c>)
   1bf88:	f015 fc93 	bl	318b2 <log_string_sync>
			if (from_hard_fault) {
   1bf8c:	b11f      	cbz	r7, 1bf96 <bus_fault.isra.2+0xb2>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1bf8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1bf90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1bf94:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1bf96:	4d1d      	ldr	r5, [pc, #116]	; (1c00c <bus_fault.isra.2+0x128>)
   1bf98:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1bf9a:	0559      	lsls	r1, r3, #21
   1bf9c:	d50b      	bpl.n	1bfb6 <bus_fault.isra.2+0xd2>
		PR_FAULT_INFO("  Imprecise data bus error");
   1bf9e:	f04f 0000 	mov.w	r0, #0
   1bfa2:	2301      	movs	r3, #1
   1bfa4:	f363 0002 	bfi	r0, r3, #0, #3
   1bfa8:	f36f 00c5 	bfc	r0, #3, #3
   1bfac:	f364 108f 	bfi	r0, r4, #6, #10
   1bfb0:	491c      	ldr	r1, [pc, #112]	; (1c024 <bus_fault.isra.2+0x140>)
   1bfb2:	f015 fc7e 	bl	318b2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1bfb6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1bfb8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
   1bfbc:	d014      	beq.n	1bfe8 <bus_fault.isra.2+0x104>
		PR_FAULT_INFO("  Instruction bus error");
   1bfbe:	f04f 0000 	mov.w	r0, #0
   1bfc2:	2301      	movs	r3, #1
   1bfc4:	f363 0002 	bfi	r0, r3, #0, #3
   1bfc8:	f36f 00c5 	bfc	r0, #3, #3
   1bfcc:	4916      	ldr	r1, [pc, #88]	; (1c028 <bus_fault.isra.2+0x144>)
   1bfce:	f364 108f 	bfi	r0, r4, #6, #10
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1bfd2:	f015 fc6e 	bl	318b2 <log_string_sync>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   1bfd6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1bfd8:	4a0c      	ldr	r2, [pc, #48]	; (1c00c <bus_fault.isra.2+0x128>)
   1bfda:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1bfdc:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1bfe0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   1bfe2:	7030      	strb	r0, [r6, #0]

	return reason;
}
   1bfe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1bfe8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1bfea:	0492      	lsls	r2, r2, #18
   1bfec:	d5f3      	bpl.n	1bfd6 <bus_fault.isra.2+0xf2>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1bfee:	f04f 0000 	mov.w	r0, #0
   1bff2:	2201      	movs	r2, #1
   1bff4:	f362 0002 	bfi	r0, r2, #0, #3
   1bff8:	f363 00c5 	bfi	r0, r3, #3, #3
   1bffc:	f364 108f 	bfi	r0, r4, #6, #10
   1c000:	490a      	ldr	r1, [pc, #40]	; (1c02c <bus_fault.isra.2+0x148>)
   1c002:	e7e6      	b.n	1bfd2 <bus_fault.isra.2+0xee>
   1c004:	00033914 	.word	0x00033914
   1c008:	00033994 	.word	0x00033994
   1c00c:	e000ed00 	.word	0xe000ed00
   1c010:	000356e3 	.word	0x000356e3
   1c014:	000356f9 	.word	0x000356f9
   1c018:	0003570a 	.word	0x0003570a
   1c01c:	0003571d 	.word	0x0003571d
   1c020:	00035736 	.word	0x00035736
   1c024:	0003574b 	.word	0x0003574b
   1c028:	00035766 	.word	0x00035766
   1c02c:	0003577e 	.word	0x0003577e

0001c030 <usage_fault.isra.3>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
   1c030:	b570      	push	{r4, r5, r6, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   1c032:	f04f 0000 	mov.w	r0, #0
   1c036:	2601      	movs	r6, #1
   1c038:	4b42      	ldr	r3, [pc, #264]	; (1c144 <usage_fault.isra.3+0x114>)
   1c03a:	4c43      	ldr	r4, [pc, #268]	; (1c148 <usage_fault.isra.3+0x118>)
   1c03c:	f366 0002 	bfi	r0, r6, #0, #3
   1c040:	1ae4      	subs	r4, r4, r3
   1c042:	f36f 00c5 	bfc	r0, #3, #3
   1c046:	f3c4 04c9 	ubfx	r4, r4, #3, #10

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1c04a:	4d40      	ldr	r5, [pc, #256]	; (1c14c <usage_fault.isra.3+0x11c>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   1c04c:	f364 108f 	bfi	r0, r4, #6, #10
   1c050:	493f      	ldr	r1, [pc, #252]	; (1c150 <usage_fault.isra.3+0x120>)
   1c052:	f015 fc2e 	bl	318b2 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1c056:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1c058:	0193      	lsls	r3, r2, #6
   1c05a:	d50a      	bpl.n	1c072 <usage_fault.isra.3+0x42>
		PR_FAULT_INFO("  Division by zero");
   1c05c:	f04f 0000 	mov.w	r0, #0
   1c060:	f366 0002 	bfi	r0, r6, #0, #3
   1c064:	f36f 00c5 	bfc	r0, #3, #3
   1c068:	f364 108f 	bfi	r0, r4, #6, #10
   1c06c:	4939      	ldr	r1, [pc, #228]	; (1c154 <usage_fault.isra.3+0x124>)
   1c06e:	f015 fc20 	bl	318b2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1c072:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c074:	01dd      	lsls	r5, r3, #7
   1c076:	d50b      	bpl.n	1c090 <usage_fault.isra.3+0x60>
		PR_FAULT_INFO("  Unaligned memory access");
   1c078:	f04f 0000 	mov.w	r0, #0
   1c07c:	2301      	movs	r3, #1
   1c07e:	f363 0002 	bfi	r0, r3, #0, #3
   1c082:	f36f 00c5 	bfc	r0, #3, #3
   1c086:	f364 108f 	bfi	r0, r4, #6, #10
   1c08a:	4933      	ldr	r1, [pc, #204]	; (1c158 <usage_fault.isra.3+0x128>)
   1c08c:	f015 fc11 	bl	318b2 <log_string_sync>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   1c090:	4b2e      	ldr	r3, [pc, #184]	; (1c14c <usage_fault.isra.3+0x11c>)
   1c092:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1c094:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   1c098:	d00c      	beq.n	1c0b4 <usage_fault.isra.3+0x84>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   1c09a:	2301      	movs	r3, #1
   1c09c:	f04f 0000 	mov.w	r0, #0
   1c0a0:	f363 0002 	bfi	r0, r3, #0, #3
   1c0a4:	f36f 00c5 	bfc	r0, #3, #3
   1c0a8:	f364 108f 	bfi	r0, r4, #6, #10
   1c0ac:	492b      	ldr	r1, [pc, #172]	; (1c15c <usage_fault.isra.3+0x12c>)
   1c0ae:	f015 fc00 	bl	318b2 <log_string_sync>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   1c0b2:	2502      	movs	r5, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1c0b4:	4e25      	ldr	r6, [pc, #148]	; (1c14c <usage_fault.isra.3+0x11c>)
   1c0b6:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   1c0b8:	0310      	lsls	r0, r2, #12
   1c0ba:	d50b      	bpl.n	1c0d4 <usage_fault.isra.3+0xa4>
		PR_FAULT_INFO("  No coprocessor instructions");
   1c0bc:	f04f 0000 	mov.w	r0, #0
   1c0c0:	2301      	movs	r3, #1
   1c0c2:	f363 0002 	bfi	r0, r3, #0, #3
   1c0c6:	f36f 00c5 	bfc	r0, #3, #3
   1c0ca:	f364 108f 	bfi	r0, r4, #6, #10
   1c0ce:	4924      	ldr	r1, [pc, #144]	; (1c160 <usage_fault.isra.3+0x130>)
   1c0d0:	f015 fbef 	bl	318b2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1c0d4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1c0d6:	0359      	lsls	r1, r3, #13
   1c0d8:	d50b      	bpl.n	1c0f2 <usage_fault.isra.3+0xc2>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1c0da:	f04f 0000 	mov.w	r0, #0
   1c0de:	2301      	movs	r3, #1
   1c0e0:	f363 0002 	bfi	r0, r3, #0, #3
   1c0e4:	f36f 00c5 	bfc	r0, #3, #3
   1c0e8:	f364 108f 	bfi	r0, r4, #6, #10
   1c0ec:	491d      	ldr	r1, [pc, #116]	; (1c164 <usage_fault.isra.3+0x134>)
   1c0ee:	f015 fbe0 	bl	318b2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1c0f2:	4e16      	ldr	r6, [pc, #88]	; (1c14c <usage_fault.isra.3+0x11c>)
   1c0f4:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   1c0f6:	0392      	lsls	r2, r2, #14
   1c0f8:	d50b      	bpl.n	1c112 <usage_fault.isra.3+0xe2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1c0fa:	f04f 0000 	mov.w	r0, #0
   1c0fe:	2301      	movs	r3, #1
   1c100:	f363 0002 	bfi	r0, r3, #0, #3
   1c104:	f36f 00c5 	bfc	r0, #3, #3
   1c108:	f364 108f 	bfi	r0, r4, #6, #10
   1c10c:	4916      	ldr	r1, [pc, #88]	; (1c168 <usage_fault.isra.3+0x138>)
   1c10e:	f015 fbd0 	bl	318b2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1c112:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1c114:	03db      	lsls	r3, r3, #15
   1c116:	d50b      	bpl.n	1c130 <usage_fault.isra.3+0x100>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1c118:	f04f 0000 	mov.w	r0, #0
   1c11c:	2301      	movs	r3, #1
   1c11e:	f363 0002 	bfi	r0, r3, #0, #3
   1c122:	f36f 00c5 	bfc	r0, #3, #3
   1c126:	f364 108f 	bfi	r0, r4, #6, #10
   1c12a:	4910      	ldr	r1, [pc, #64]	; (1c16c <usage_fault.isra.3+0x13c>)
   1c12c:	f015 fbc1 	bl	318b2 <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1c130:	4a06      	ldr	r2, [pc, #24]	; (1c14c <usage_fault.isra.3+0x11c>)

	return reason;
}
   1c132:	4628      	mov	r0, r5
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1c134:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1c136:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1c13a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1c13e:	6293      	str	r3, [r2, #40]	; 0x28
}
   1c140:	bd70      	pop	{r4, r5, r6, pc}
   1c142:	bf00      	nop
   1c144:	00033914 	.word	0x00033914
   1c148:	00033994 	.word	0x00033994
   1c14c:	e000ed00 	.word	0xe000ed00
   1c150:	000358bb 	.word	0x000358bb
   1c154:	000358d3 	.word	0x000358d3
   1c158:	000358e6 	.word	0x000358e6
   1c15c:	00035900 	.word	0x00035900
   1c160:	0003592a 	.word	0x0003592a
   1c164:	00035948 	.word	0x00035948
   1c168:	0003596d 	.word	0x0003596d
   1c16c:	00035987 	.word	0x00035987

0001c170 <mem_manage_fault.isra.6>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1c170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c174:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   1c176:	f04f 0801 	mov.w	r8, #1
   1c17a:	f04f 0000 	mov.w	r0, #0
   1c17e:	4b46      	ldr	r3, [pc, #280]	; (1c298 <mem_manage_fault.isra.6+0x128>)
   1c180:	4c46      	ldr	r4, [pc, #280]	; (1c29c <mem_manage_fault.isra.6+0x12c>)
   1c182:	f368 0002 	bfi	r0, r8, #0, #3
   1c186:	1ae4      	subs	r4, r4, r3
   1c188:	f36f 00c5 	bfc	r0, #3, #3
   1c18c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1c190:	4d43      	ldr	r5, [pc, #268]	; (1c2a0 <mem_manage_fault.isra.6+0x130>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1c192:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   1c194:	f364 108f 	bfi	r0, r4, #6, #10
   1c198:	4942      	ldr	r1, [pc, #264]	; (1c2a4 <mem_manage_fault.isra.6+0x134>)
   1c19a:	f015 fb8a 	bl	318b2 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1c19e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1c1a0:	06d1      	lsls	r1, r2, #27
   1c1a2:	d50a      	bpl.n	1c1ba <mem_manage_fault.isra.6+0x4a>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1c1a4:	f04f 0000 	mov.w	r0, #0
   1c1a8:	f368 0002 	bfi	r0, r8, #0, #3
   1c1ac:	f36f 00c5 	bfc	r0, #3, #3
   1c1b0:	f364 108f 	bfi	r0, r4, #6, #10
   1c1b4:	493c      	ldr	r1, [pc, #240]	; (1c2a8 <mem_manage_fault.isra.6+0x138>)
   1c1b6:	f015 fb7c 	bl	318b2 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1c1ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c1bc:	071a      	lsls	r2, r3, #28
   1c1be:	d50b      	bpl.n	1c1d8 <mem_manage_fault.isra.6+0x68>
		PR_FAULT_INFO("  Unstacking error");
   1c1c0:	f04f 0000 	mov.w	r0, #0
   1c1c4:	2301      	movs	r3, #1
   1c1c6:	f363 0002 	bfi	r0, r3, #0, #3
   1c1ca:	f36f 00c5 	bfc	r0, #3, #3
   1c1ce:	f364 108f 	bfi	r0, r4, #6, #10
   1c1d2:	4936      	ldr	r1, [pc, #216]	; (1c2ac <mem_manage_fault.isra.6+0x13c>)
   1c1d4:	f015 fb6d 	bl	318b2 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1c1d8:	4d31      	ldr	r5, [pc, #196]	; (1c2a0 <mem_manage_fault.isra.6+0x130>)
   1c1da:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c1dc:	079b      	lsls	r3, r3, #30
   1c1de:	d520      	bpl.n	1c222 <mem_manage_fault.isra.6+0xb2>
		PR_FAULT_INFO("  Data Access Violation");
   1c1e0:	f04f 0801 	mov.w	r8, #1
   1c1e4:	f04f 0000 	mov.w	r0, #0
   1c1e8:	f368 0002 	bfi	r0, r8, #0, #3
   1c1ec:	f36f 00c5 	bfc	r0, #3, #3
   1c1f0:	f364 108f 	bfi	r0, r4, #6, #10
   1c1f4:	492e      	ldr	r1, [pc, #184]	; (1c2b0 <mem_manage_fault.isra.6+0x140>)
   1c1f6:	f015 fb5c 	bl	318b2 <log_string_sync>
		mmfar = SCB->MMFAR;
   1c1fa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1c1fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c1fe:	0618      	lsls	r0, r3, #24
   1c200:	d50f      	bpl.n	1c222 <mem_manage_fault.isra.6+0xb2>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1c202:	f04f 0000 	mov.w	r0, #0
   1c206:	f368 0002 	bfi	r0, r8, #0, #3
   1c20a:	f36f 00c5 	bfc	r0, #3, #3
   1c20e:	f364 108f 	bfi	r0, r4, #6, #10
   1c212:	4928      	ldr	r1, [pc, #160]	; (1c2b4 <mem_manage_fault.isra.6+0x144>)
   1c214:	f015 fb4d 	bl	318b2 <log_string_sync>
			if (from_hard_fault) {
   1c218:	b11f      	cbz	r7, 1c222 <mem_manage_fault.isra.6+0xb2>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1c21a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c21c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1c220:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1c222:	4d1f      	ldr	r5, [pc, #124]	; (1c2a0 <mem_manage_fault.isra.6+0x130>)
   1c224:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1c226:	07d1      	lsls	r1, r2, #31
   1c228:	d50b      	bpl.n	1c242 <mem_manage_fault.isra.6+0xd2>
		PR_FAULT_INFO("  Instruction Access Violation");
   1c22a:	f04f 0000 	mov.w	r0, #0
   1c22e:	2301      	movs	r3, #1
   1c230:	f363 0002 	bfi	r0, r3, #0, #3
   1c234:	f36f 00c5 	bfc	r0, #3, #3
   1c238:	f364 108f 	bfi	r0, r4, #6, #10
   1c23c:	491e      	ldr	r1, [pc, #120]	; (1c2b8 <mem_manage_fault.isra.6+0x148>)
   1c23e:	f015 fb38 	bl	318b2 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1c242:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c244:	069a      	lsls	r2, r3, #26
   1c246:	d50b      	bpl.n	1c260 <mem_manage_fault.isra.6+0xf0>
		PR_FAULT_INFO(
   1c248:	f04f 0000 	mov.w	r0, #0
   1c24c:	2301      	movs	r3, #1
   1c24e:	f363 0002 	bfi	r0, r3, #0, #3
   1c252:	f36f 00c5 	bfc	r0, #3, #3
   1c256:	f364 108f 	bfi	r0, r4, #6, #10
   1c25a:	4918      	ldr	r1, [pc, #96]	; (1c2bc <mem_manage_fault.isra.6+0x14c>)
   1c25c:	f015 fb29 	bl	318b2 <log_string_sync>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   1c260:	4b0f      	ldr	r3, [pc, #60]	; (1c2a0 <mem_manage_fault.isra.6+0x130>)
   1c262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c264:	06db      	lsls	r3, r3, #27
   1c266:	d50e      	bpl.n	1c286 <mem_manage_fault.isra.6+0x116>
	__ASSERT(0,
   1c268:	4915      	ldr	r1, [pc, #84]	; (1c2c0 <mem_manage_fault.isra.6+0x150>)
   1c26a:	f240 133d 	movw	r3, #317	; 0x13d
   1c26e:	4a15      	ldr	r2, [pc, #84]	; (1c2c4 <mem_manage_fault.isra.6+0x154>)
   1c270:	4815      	ldr	r0, [pc, #84]	; (1c2c8 <mem_manage_fault.isra.6+0x158>)
   1c272:	f015 fb01 	bl	31878 <printk>
   1c276:	4815      	ldr	r0, [pc, #84]	; (1c2cc <mem_manage_fault.isra.6+0x15c>)
   1c278:	f015 fafe 	bl	31878 <printk>
   1c27c:	f240 113d 	movw	r1, #317	; 0x13d
   1c280:	4810      	ldr	r0, [pc, #64]	; (1c2c4 <mem_manage_fault.isra.6+0x154>)
   1c282:	f015 fb06 	bl	31892 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
   1c286:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1c288:	4a05      	ldr	r2, [pc, #20]	; (1c2a0 <mem_manage_fault.isra.6+0x130>)
   1c28a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1c28c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   1c290:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   1c292:	7030      	strb	r0, [r6, #0]
}
   1c294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c298:	00033914 	.word	0x00033914
   1c29c:	00033994 	.word	0x00033994
   1c2a0:	e000ed00 	.word	0xe000ed00
   1c2a4:	000357ad 	.word	0x000357ad
   1c2a8:	000357c3 	.word	0x000357c3
   1c2ac:	0003570a 	.word	0x0003570a
   1c2b0:	000357f6 	.word	0x000357f6
   1c2b4:	0003580e 	.word	0x0003580e
   1c2b8:	00035824 	.word	0x00035824
   1c2bc:	0003577e 	.word	0x0003577e
   1c2c0:	0003686f 	.word	0x0003686f
   1c2c4:	00035843 	.word	0x00035843
   1c2c8:	00034ff7 	.word	0x00034ff7
   1c2cc:	00035881 	.word	0x00035881

0001c2d0 <z_arm_fault>:
 * running a Secure Firmware.
 */
void z_arm_fault(z_arch_esf_t *esf, u32_t exc_return)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1c2d0:	4b5a      	ldr	r3, [pc, #360]	; (1c43c <z_arm_fault+0x16c>)
{
   1c2d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1c2d4:	685c      	ldr	r4, [r3, #4]
				goto _exit_fatal;
			}
		}
	}
#elif defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1c2d6:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
   1c2da:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
{
   1c2de:	4606      	mov	r6, r0
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1c2e0:	f040 80aa 	bne.w	1c438 <z_arm_fault+0x168>
			EXC_RETURN_INDICATOR_PREFIX) {
		/* Invalid EXC_RETURN value */
		goto _exit_fatal;
	}
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1c2e4:	f011 0301 	ands.w	r3, r1, #1
   1c2e8:	f040 80a6 	bne.w	1c438 <z_arm_fault+0x168>
		 * This is a fatal error.
		 */
		goto _exit_fatal;
	}

	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   1c2ec:	064a      	lsls	r2, r1, #25
   1c2ee:	d50f      	bpl.n	1c310 <z_arm_fault+0x40>
		 * Note that Non-Secure firmware cannot inspect the Secure
		 * stack to determine the root cause of the fault. Fault
		 * inspection will indicate the Non-Secure instruction
		 * that performed the branch to the Secure domain.
		 */
		PR_FAULT_INFO("Exception occurred in Secure State");
   1c2f0:	2201      	movs	r2, #1
   1c2f2:	f04f 0000 	mov.w	r0, #0
   1c2f6:	f362 0002 	bfi	r0, r2, #0, #3
   1c2fa:	f363 00c5 	bfi	r0, r3, #3, #3
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   1c2fe:	4a50      	ldr	r2, [pc, #320]	; (1c440 <z_arm_fault+0x170>)
   1c300:	4b50      	ldr	r3, [pc, #320]	; (1c444 <z_arm_fault+0x174>)
   1c302:	4951      	ldr	r1, [pc, #324]	; (1c448 <z_arm_fault+0x178>)
   1c304:	1a9b      	subs	r3, r3, r2
   1c306:	08db      	lsrs	r3, r3, #3
   1c308:	f363 108f 	bfi	r0, r3, #6, #10
   1c30c:	f015 fad1 	bl	318b2 <log_string_sync>
	*recoverable = false;
   1c310:	2300      	movs	r3, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1c312:	f3c4 0108 	ubfx	r1, r4, #0, #9
	*recoverable = false;
   1c316:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   1c31a:	1ecb      	subs	r3, r1, #3
   1c31c:	2b09      	cmp	r3, #9
   1c31e:	d873      	bhi.n	1c408 <z_arm_fault+0x138>
   1c320:	e8df f003 	tbb	[pc, r3]
   1c324:	585f5b05 	.word	0x585f5b05
   1c328:	72727272 	.word	0x72727272
   1c32c:	6372      	.short	0x6372
	PR_FAULT_INFO("***** HARD FAULT *****");
   1c32e:	2701      	movs	r7, #1
   1c330:	f04f 0000 	mov.w	r0, #0
	*recoverable = false;
   1c334:	2400      	movs	r4, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
   1c336:	4b42      	ldr	r3, [pc, #264]	; (1c440 <z_arm_fault+0x170>)
   1c338:	4d42      	ldr	r5, [pc, #264]	; (1c444 <z_arm_fault+0x174>)
   1c33a:	f367 0002 	bfi	r0, r7, #0, #3
   1c33e:	1aed      	subs	r5, r5, r3
   1c340:	f36f 00c5 	bfc	r0, #3, #3
   1c344:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   1c348:	f365 108f 	bfi	r0, r5, #6, #10
   1c34c:	493f      	ldr	r1, [pc, #252]	; (1c44c <z_arm_fault+0x17c>)
   1c34e:	f015 fab0 	bl	318b2 <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1c352:	4a3a      	ldr	r2, [pc, #232]	; (1c43c <z_arm_fault+0x16c>)
	*recoverable = false;
   1c354:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1c358:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1c35a:	f013 0302 	ands.w	r3, r3, #2
   1c35e:	d00c      	beq.n	1c37a <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   1c360:	f04f 0000 	mov.w	r0, #0
   1c364:	f367 0002 	bfi	r0, r7, #0, #3
   1c368:	f364 00c5 	bfi	r0, r4, #3, #3
   1c36c:	4938      	ldr	r1, [pc, #224]	; (1c450 <z_arm_fault+0x180>)
   1c36e:	f365 108f 	bfi	r0, r5, #6, #10
	PR_FAULT_INFO(
   1c372:	f015 fa9e 	bl	318b2 <log_string_sync>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   1c376:	2000      	movs	r0, #0
   1c378:	e016      	b.n	1c3a8 <z_arm_fault+0xd8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1c37a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   1c37c:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
   1c380:	d015      	beq.n	1c3ae <z_arm_fault+0xde>
		PR_EXC("  Fault escalation (see below)");
   1c382:	f04f 0000 	mov.w	r0, #0
   1c386:	f367 0002 	bfi	r0, r7, #0, #3
   1c38a:	f363 00c5 	bfi	r0, r3, #3, #3
   1c38e:	f365 108f 	bfi	r0, r5, #6, #10
   1c392:	4930      	ldr	r1, [pc, #192]	; (1c454 <z_arm_fault+0x184>)
   1c394:	f015 fa8d 	bl	318b2 <log_string_sync>
		if (SCB_MMFSR != 0) {
   1c398:	4b2f      	ldr	r3, [pc, #188]	; (1c458 <z_arm_fault+0x188>)
   1c39a:	781b      	ldrb	r3, [r3, #0]
   1c39c:	b163      	cbz	r3, 1c3b8 <z_arm_fault+0xe8>
			reason = mem_manage_fault(esf, 1, recoverable);
   1c39e:	4638      	mov	r0, r7
   1c3a0:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   1c3a4:	f7ff fee4 	bl	1c170 <mem_manage_fault.isra.6>
#else
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1c3a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c3ac:	b913      	cbnz	r3, 1c3b4 <z_arm_fault+0xe4>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_arm_fatal_error(reason, esf);
   1c3ae:	4631      	mov	r1, r6
   1c3b0:	f7ff fcbe 	bl	1bd30 <z_arm_fatal_error>
}
   1c3b4:	b003      	add	sp, #12
   1c3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
   1c3b8:	4b28      	ldr	r3, [pc, #160]	; (1c45c <z_arm_fault+0x18c>)
   1c3ba:	781b      	ldrb	r3, [r3, #0]
   1c3bc:	b12b      	cbz	r3, 1c3ca <z_arm_fault+0xfa>
			reason = bus_fault(esf, 1, recoverable);
   1c3be:	4638      	mov	r0, r7
   1c3c0:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   1c3c4:	f7ff fd8e 	bl	1bee4 <bus_fault.isra.2>
   1c3c8:	e7ee      	b.n	1c3a8 <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
   1c3ca:	4b25      	ldr	r3, [pc, #148]	; (1c460 <z_arm_fault+0x190>)
   1c3cc:	8818      	ldrh	r0, [r3, #0]
   1c3ce:	b280      	uxth	r0, r0
   1c3d0:	2800      	cmp	r0, #0
   1c3d2:	d0e9      	beq.n	1c3a8 <z_arm_fault+0xd8>
		reason = usage_fault(esf);
   1c3d4:	f7ff fe2c 	bl	1c030 <usage_fault.isra.3>
   1c3d8:	e7e6      	b.n	1c3a8 <z_arm_fault+0xd8>
		reason = mem_manage_fault(esf, 0, recoverable);
   1c3da:	f10d 0107 	add.w	r1, sp, #7
   1c3de:	2000      	movs	r0, #0
   1c3e0:	e7e0      	b.n	1c3a4 <z_arm_fault+0xd4>
		reason = bus_fault(esf, 0, recoverable);
   1c3e2:	f10d 0107 	add.w	r1, sp, #7
   1c3e6:	2000      	movs	r0, #0
   1c3e8:	e7ec      	b.n	1c3c4 <z_arm_fault+0xf4>
	PR_FAULT_INFO(
   1c3ea:	2301      	movs	r3, #1
   1c3ec:	f04f 0000 	mov.w	r0, #0
   1c3f0:	4a13      	ldr	r2, [pc, #76]	; (1c440 <z_arm_fault+0x170>)
   1c3f2:	f363 0002 	bfi	r0, r3, #0, #3
   1c3f6:	4b13      	ldr	r3, [pc, #76]	; (1c444 <z_arm_fault+0x174>)
   1c3f8:	f36f 00c5 	bfc	r0, #3, #3
   1c3fc:	1a9b      	subs	r3, r3, r2
   1c3fe:	08db      	lsrs	r3, r3, #3
   1c400:	f363 108f 	bfi	r0, r3, #6, #10
   1c404:	4917      	ldr	r1, [pc, #92]	; (1c464 <z_arm_fault+0x194>)
   1c406:	e7b4      	b.n	1c372 <z_arm_fault+0xa2>
	PR_FAULT_INFO("***** %s %d) *****",
   1c408:	2301      	movs	r3, #1
   1c40a:	f04f 0000 	mov.w	r0, #0
   1c40e:	4a0c      	ldr	r2, [pc, #48]	; (1c440 <z_arm_fault+0x170>)
   1c410:	f363 0002 	bfi	r0, r3, #0, #3
   1c414:	4b0b      	ldr	r3, [pc, #44]	; (1c444 <z_arm_fault+0x174>)
   1c416:	4c14      	ldr	r4, [pc, #80]	; (1c468 <z_arm_fault+0x198>)
   1c418:	1a9b      	subs	r3, r3, r2
   1c41a:	4a14      	ldr	r2, [pc, #80]	; (1c46c <z_arm_fault+0x19c>)
   1c41c:	08db      	lsrs	r3, r3, #3
   1c41e:	f36f 00c5 	bfc	r0, #3, #3
   1c422:	f363 108f 	bfi	r0, r3, #6, #10
   1c426:	290f      	cmp	r1, #15
   1c428:	bfd8      	it	le
   1c42a:	4622      	movle	r2, r4
   1c42c:	f1a1 0310 	sub.w	r3, r1, #16
   1c430:	490f      	ldr	r1, [pc, #60]	; (1c470 <z_arm_fault+0x1a0>)
   1c432:	f015 fa3e 	bl	318b2 <log_string_sync>
   1c436:	e79e      	b.n	1c376 <z_arm_fault+0xa6>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   1c438:	2000      	movs	r0, #0
   1c43a:	e7b8      	b.n	1c3ae <z_arm_fault+0xde>
   1c43c:	e000ed00 	.word	0xe000ed00
   1c440:	00033914 	.word	0x00033914
   1c444:	00033994 	.word	0x00033994
   1c448:	000359e0 	.word	0x000359e0
   1c44c:	00035a03 	.word	0x00035a03
   1c450:	00035a1a 	.word	0x00035a1a
   1c454:	00035a3b 	.word	0x00035a3b
   1c458:	e000ed28 	.word	0xe000ed28
   1c45c:	e000ed29 	.word	0xe000ed29
   1c460:	e000ed2a 	.word	0xe000ed2a
   1c464:	00035a5a 	.word	0x00035a5a
   1c468:	000359b2 	.word	0x000359b2
   1c46c:	000359c7 	.word	0x000359c7
   1c470:	00035a90 	.word	0x00035a90

0001c474 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1c474:	4b04      	ldr	r3, [pc, #16]	; (1c488 <z_arm_fault_init+0x14>)
   1c476:	695a      	ldr	r2, [r3, #20]
   1c478:	f042 0210 	orr.w	r2, r2, #16
   1c47c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   1c47e:	695a      	ldr	r2, [r3, #20]
   1c480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1c484:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   1c486:	4770      	bx	lr
   1c488:	e000ed00 	.word	0xe000ed00

0001c48c <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
   1c48c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c48e:	2120      	movs	r1, #32
   1c490:	4803      	ldr	r0, [pc, #12]	; (1c4a0 <z_arm_int_lib_init+0x14>)
   1c492:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1c494:	3301      	adds	r3, #1
   1c496:	2b41      	cmp	r3, #65	; 0x41
   1c498:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1c49c:	d1f9      	bne.n	1c492 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1c49e:	4770      	bx	lr
   1c4a0:	e000e100 	.word	0xe000e100

0001c4a4 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   1c4a4:	b538      	push	{r3, r4, r5, lr}
   1c4a6:	4604      	mov	r4, r0
	__asm__ volatile(
   1c4a8:	f04f 0320 	mov.w	r3, #32
   1c4ac:	f3ef 8511 	mrs	r5, BASEPRI
   1c4b0:	f383 8811 	msr	BASEPRI, r3
   1c4b4:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   1c4b8:	7b03      	ldrb	r3, [r0, #12]
   1c4ba:	07db      	lsls	r3, r3, #31
   1c4bc:	d50c      	bpl.n	1c4d8 <z_impl_k_thread_abort+0x34>
   1c4be:	4912      	ldr	r1, [pc, #72]	; (1c508 <z_impl_k_thread_abort+0x64>)
   1c4c0:	2325      	movs	r3, #37	; 0x25
   1c4c2:	4a12      	ldr	r2, [pc, #72]	; (1c50c <z_impl_k_thread_abort+0x68>)
   1c4c4:	4812      	ldr	r0, [pc, #72]	; (1c510 <z_impl_k_thread_abort+0x6c>)
   1c4c6:	f015 f9d7 	bl	31878 <printk>
   1c4ca:	4812      	ldr	r0, [pc, #72]	; (1c514 <z_impl_k_thread_abort+0x70>)
   1c4cc:	f015 f9d4 	bl	31878 <printk>
   1c4d0:	2125      	movs	r1, #37	; 0x25
   1c4d2:	480e      	ldr	r0, [pc, #56]	; (1c50c <z_impl_k_thread_abort+0x68>)
   1c4d4:	f015 f9dd 	bl	31892 <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
   1c4d8:	4620      	mov	r0, r4
   1c4da:	f016 f921 	bl	32720 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   1c4de:	4b0e      	ldr	r3, [pc, #56]	; (1c518 <z_impl_k_thread_abort+0x74>)
   1c4e0:	689b      	ldr	r3, [r3, #8]
   1c4e2:	42a3      	cmp	r3, r4
   1c4e4:	d10b      	bne.n	1c4fe <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   1c4e6:	4b0d      	ldr	r3, [pc, #52]	; (1c51c <z_impl_k_thread_abort+0x78>)
   1c4e8:	685a      	ldr	r2, [r3, #4]
   1c4ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
   1c4ee:	b912      	cbnz	r2, 1c4f6 <z_impl_k_thread_abort+0x52>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = z_arch_swap(key);
   1c4f0:	4628      	mov	r0, r5
   1c4f2:	f7ff fb33 	bl	1bb5c <z_arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1c4f6:	685a      	ldr	r2, [r3, #4]
   1c4f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1c4fc:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   1c4fe:	4628      	mov	r0, r5
}
   1c500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   1c504:	f016 b8c8 	b.w	32698 <z_reschedule_irqlock>
   1c508:	00035ae8 	.word	0x00035ae8
   1c50c:	00035aa3 	.word	0x00035aa3
   1c510:	00034ff7 	.word	0x00034ff7
   1c514:	00035b16 	.word	0x00035b16
   1c518:	200259e0 	.word	0x200259e0
   1c51c:	e000ed00 	.word	0xe000ed00

0001c520 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   1c520:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   1c522:	4b0e      	ldr	r3, [pc, #56]	; (1c55c <z_arm_configure_static_mpu_regions+0x3c>)
{
   1c524:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   1c526:	9302      	str	r3, [sp, #8]
   1c528:	4b0d      	ldr	r3, [pc, #52]	; (1c560 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1c52a:	4c0e      	ldr	r4, [pc, #56]	; (1c564 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   1c52c:	9303      	str	r3, [sp, #12]
   1c52e:	4b0e      	ldr	r3, [pc, #56]	; (1c568 <z_arm_configure_static_mpu_regions+0x48>)
	const struct k_mem_partition *static_regions[] = {
   1c530:	a808      	add	r0, sp, #32
		const struct k_mem_partition ramfunc_region =
   1c532:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   1c534:	ab02      	add	r3, sp, #8
   1c536:	f840 3d1c 	str.w	r3, [r0, #-28]!
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1c53a:	4a0c      	ldr	r2, [pc, #48]	; (1c56c <z_arm_configure_static_mpu_regions+0x4c>)
   1c53c:	4623      	mov	r3, r4
   1c53e:	2101      	movs	r1, #1
   1c540:	f000 f982 	bl	1c848 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   1c544:	2300      	movs	r3, #0
   1c546:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1c548:	4b09      	ldr	r3, [pc, #36]	; (1c570 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1c54a:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   1c54c:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1c54e:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   1c550:	9305      	str	r3, [sp, #20]
   1c552:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1c554:	f000 f99c 	bl	1c890 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1c558:	b008      	add	sp, #32
   1c55a:	bd10      	pop	{r4, pc}
   1c55c:	20020000 	.word	0x20020000
   1c560:	00000000 	.word	0x00000000
   1c564:	20040000 	.word	0x20040000
   1c568:	00010006 	.word	0x00010006
   1c56c:	20020000 	.word	0x20020000
   1c570:	20020000 	.word	0x20020000

0001c574 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   1c574:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1c576:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1c578:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1c57a:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   1c57e:	f004 021f 	and.w	r2, r4, #31
   1c582:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1c584:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1c586:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1c588:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   1c58c:	4904      	ldr	r1, [pc, #16]	; (1c5a0 <region_init+0x2c>)
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   1c58e:	f043 0301 	orr.w	r3, r3, #1
   1c592:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
   1c596:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   1c598:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   1c59a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   1c59c:	bd10      	pop	{r4, pc}
   1c59e:	bf00      	nop
   1c5a0:	e000ed90 	.word	0xe000ed90

0001c5a4 <region_allocate_and_init>:

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   1c5a4:	280f      	cmp	r0, #15
{
   1c5a6:	b510      	push	{r4, lr}
   1c5a8:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1)) {
   1c5aa:	d914      	bls.n	1c5d6 <region_allocate_and_init+0x32>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1c5ac:	2301      	movs	r3, #1
   1c5ae:	f04f 0000 	mov.w	r0, #0
   1c5b2:	4a0a      	ldr	r2, [pc, #40]	; (1c5dc <region_allocate_and_init+0x38>)
   1c5b4:	f363 0002 	bfi	r0, r3, #0, #3
   1c5b8:	4b09      	ldr	r3, [pc, #36]	; (1c5e0 <region_allocate_and_init+0x3c>)
   1c5ba:	f36f 00c5 	bfc	r0, #3, #3
   1c5be:	1a9b      	subs	r3, r3, r2
   1c5c0:	08db      	lsrs	r3, r3, #3
   1c5c2:	4622      	mov	r2, r4
   1c5c4:	f363 108f 	bfi	r0, r3, #6, #10
   1c5c8:	4906      	ldr	r1, [pc, #24]	; (1c5e4 <region_allocate_and_init+0x40>)
   1c5ca:	f015 f972 	bl	318b2 <log_string_sync>
		return -EINVAL;
   1c5ce:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   1c5d2:	4620      	mov	r0, r4
   1c5d4:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   1c5d6:	f7ff ffcd 	bl	1c574 <region_init>
	return index;
   1c5da:	e7fa      	b.n	1c5d2 <region_allocate_and_init+0x2e>
   1c5dc:	00033914 	.word	0x00033914
   1c5e0:	00033984 	.word	0x00033984
   1c5e4:	00035ced 	.word	0x00035ced

0001c5e8 <mpu_configure_regions.constprop.2>:

/* This internal function programs a set of given MPU regions
 * over a background memory area, optionally performing a
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
   1c5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c5ec:	4607      	mov	r7, r0
   1c5ee:	4688      	mov	r8, r1
   1c5f0:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1c5f2:	2600      	movs	r6, #0
	MPU->RNR = index;
   1c5f4:	4d5a      	ldr	r5, [pc, #360]	; (1c760 <mpu_configure_regions.constprop.2+0x178>)
static int mpu_configure_regions(const struct k_mem_partition
   1c5f6:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   1c5f8:	4546      	cmp	r6, r8
   1c5fa:	da41      	bge.n	1c680 <mpu_configure_regions.constprop.2+0x98>
		if (regions[i]->size == 0U) {
   1c5fc:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   1c600:	f8d3 9004 	ldr.w	r9, [r3, #4]
   1c604:	f1b9 0f00 	cmp.w	r9, #0
   1c608:	d05d      	beq.n	1c6c6 <mpu_configure_regions.constprop.2+0xde>
		&&
   1c60a:	f1b9 0f1f 	cmp.w	r9, #31
   1c60e:	d924      	bls.n	1c65a <mpu_configure_regions.constprop.2+0x72>
		&&
   1c610:	f019 0f1f 	tst.w	r9, #31
   1c614:	d121      	bne.n	1c65a <mpu_configure_regions.constprop.2+0x72>
		((part->start &
   1c616:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   1c61a:	f01a 0f1f 	tst.w	sl, #31
   1c61e:	d11c      	bne.n	1c65a <mpu_configure_regions.constprop.2+0x72>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1c620:	4650      	mov	r0, sl
   1c622:	f014 fe37 	bl	31294 <arm_cmse_mpu_region_get>
   1c626:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1c628:	eb09 000a 	add.w	r0, r9, sl
   1c62c:	3801      	subs	r0, #1
   1c62e:	f014 fe31 	bl	31294 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1c632:	4583      	cmp	fp, r0
   1c634:	d028      	beq.n	1c688 <mpu_configure_regions.constprop.2+0xa0>
	return -EINVAL;
   1c636:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   1c63a:	2301      	movs	r3, #1
   1c63c:	f04f 0000 	mov.w	r0, #0
   1c640:	4a48      	ldr	r2, [pc, #288]	; (1c764 <mpu_configure_regions.constprop.2+0x17c>)
   1c642:	f363 0002 	bfi	r0, r3, #0, #3
   1c646:	4b48      	ldr	r3, [pc, #288]	; (1c768 <mpu_configure_regions.constprop.2+0x180>)
   1c648:	f36f 00c5 	bfc	r0, #3, #3
   1c64c:	1a9b      	subs	r3, r3, r2
   1c64e:	08db      	lsrs	r3, r3, #3
   1c650:	f363 108f 	bfi	r0, r3, #6, #10
   1c654:	465a      	mov	r2, fp
   1c656:	4945      	ldr	r1, [pc, #276]	; (1c76c <mpu_configure_regions.constprop.2+0x184>)
   1c658:	e00e      	b.n	1c678 <mpu_configure_regions.constprop.2+0x90>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1c65a:	2301      	movs	r3, #1
   1c65c:	f04f 0000 	mov.w	r0, #0
   1c660:	4a40      	ldr	r2, [pc, #256]	; (1c764 <mpu_configure_regions.constprop.2+0x17c>)
   1c662:	f363 0002 	bfi	r0, r3, #0, #3
   1c666:	4b40      	ldr	r3, [pc, #256]	; (1c768 <mpu_configure_regions.constprop.2+0x180>)
   1c668:	f36f 00c5 	bfc	r0, #3, #3
   1c66c:	1a9b      	subs	r3, r3, r2
   1c66e:	4632      	mov	r2, r6
   1c670:	08db      	lsrs	r3, r3, #3
   1c672:	493f      	ldr	r1, [pc, #252]	; (1c770 <mpu_configure_regions.constprop.2+0x188>)
   1c674:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
   1c678:	f015 f91b 	bl	318b2 <log_string_sync>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   1c67c:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1c680:	4620      	mov	r0, r4
   1c682:	b005      	add	sp, #20
   1c684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   1c688:	f11b 0f16 	cmn.w	fp, #22
   1c68c:	d0d5      	beq.n	1c63a <mpu_configure_regions.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
   1c68e:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   1c690:	455b      	cmp	r3, fp
   1c692:	dbd2      	blt.n	1c63a <mpu_configure_regions.constprop.2+0x52>
	MPU->RNR = index;
   1c694:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   1c698:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   1c69a:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1c69e:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   1c6a0:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   1c6a4:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1c6a8:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   1c6ac:	e9d1 3200 	ldrd	r3, r2, [r1]
   1c6b0:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   1c6b2:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   1c6b4:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   1c6b8:	d118      	bne.n	1c6ec <mpu_configure_regions.constprop.2+0x104>
   1c6ba:	45ca      	cmp	sl, r9
   1c6bc:	d105      	bne.n	1c6ca <mpu_configure_regions.constprop.2+0xe2>
			mpu_configure_region(u_reg_index, regions[i]);
   1c6be:	fa5f f08b 	uxtb.w	r0, fp
   1c6c2:	f015 f9ba 	bl	31a3a <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   1c6c6:	3601      	adds	r6, #1
   1c6c8:	e796      	b.n	1c5f8 <mpu_configure_regions.constprop.2+0x10>
	MPU->RNR = index;
   1c6ca:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1c6ce:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   1c6d0:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1c6d4:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   1c6d8:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1c6da:	60ea      	str	r2, [r5, #12]
			reg_index =
   1c6dc:	b2e0      	uxtb	r0, r4
			reg_index =
   1c6de:	f015 f9ac 	bl	31a3a <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1c6e2:	f110 0f16 	cmn.w	r0, #22
   1c6e6:	d0c9      	beq.n	1c67c <mpu_configure_regions.constprop.2+0x94>
			reg_index++;
   1c6e8:	1c44      	adds	r4, r0, #1
   1c6ea:	e7ec      	b.n	1c6c6 <mpu_configure_regions.constprop.2+0xde>
	MPU->RNR = index;
   1c6ec:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1c6f0:	692a      	ldr	r2, [r5, #16]
   1c6f2:	3b01      	subs	r3, #1
   1c6f4:	f023 031f 	bic.w	r3, r3, #31
   1c6f8:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   1c6fc:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   1c6fe:	45ca      	cmp	sl, r9
   1c700:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1c702:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   1c704:	d0eb      	beq.n	1c6de <mpu_configure_regions.constprop.2+0xf6>
			reg_index =
   1c706:	f015 f998 	bl	31a3a <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1c70a:	f110 0f16 	cmn.w	r0, #22
   1c70e:	d0b5      	beq.n	1c67c <mpu_configure_regions.constprop.2+0x94>
	MPU->RNR = index;
   1c710:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   1c714:	68ea      	ldr	r2, [r5, #12]
   1c716:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   1c71a:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   1c71e:	f362 0304 	bfi	r3, r2, #0, #5
   1c722:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1c726:	692b      	ldr	r3, [r5, #16]
   1c728:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1c72c:	085b      	lsrs	r3, r3, #1
   1c72e:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   1c732:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1c736:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   1c73a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c73e:	4413      	add	r3, r2
   1c740:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   1c742:	f023 031f 	bic.w	r3, r3, #31
   1c746:	4453      	add	r3, sl
   1c748:	eba3 0309 	sub.w	r3, r3, r9
			reg_index++;
   1c74c:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   1c74e:	f023 031f 	bic.w	r3, r3, #31
			reg_index =
   1c752:	4669      	mov	r1, sp
   1c754:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   1c756:	9303      	str	r3, [sp, #12]
			reg_index =
   1c758:	f7ff ff24 	bl	1c5a4 <region_allocate_and_init>
   1c75c:	e7c1      	b.n	1c6e2 <mpu_configure_regions.constprop.2+0xfa>
   1c75e:	bf00      	nop
   1c760:	e000ed90 	.word	0xe000ed90
   1c764:	00033914 	.word	0x00033914
   1c768:	00033984 	.word	0x00033984
   1c76c:	00035cca 	.word	0x00035cca
   1c770:	00035ca7 	.word	0x00035ca7

0001c774 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1c774:	2205      	movs	r2, #5
   1c776:	4b03      	ldr	r3, [pc, #12]	; (1c784 <arm_core_mpu_enable+0x10>)
   1c778:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   1c77a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1c77e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1c782:	4770      	bx	lr
   1c784:	e000ed90 	.word	0xe000ed90

0001c788 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   1c788:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1c78c:	2200      	movs	r2, #0
   1c78e:	4b01      	ldr	r3, [pc, #4]	; (1c794 <arm_core_mpu_disable+0xc>)
   1c790:	605a      	str	r2, [r3, #4]
}
   1c792:	4770      	bx	lr
   1c794:	e000ed90 	.word	0xe000ed90

0001c798 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   1c798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1c79a:	4f21      	ldr	r7, [pc, #132]	; (1c820 <arm_mpu_init+0x88>)
   1c79c:	683e      	ldr	r6, [r7, #0]
   1c79e:	2e10      	cmp	r6, #16
   1c7a0:	d913      	bls.n	1c7ca <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   1c7a2:	f240 1307 	movw	r3, #263	; 0x107
   1c7a6:	4a1f      	ldr	r2, [pc, #124]	; (1c824 <arm_mpu_init+0x8c>)
   1c7a8:	491f      	ldr	r1, [pc, #124]	; (1c828 <arm_mpu_init+0x90>)
   1c7aa:	4820      	ldr	r0, [pc, #128]	; (1c82c <arm_mpu_init+0x94>)
   1c7ac:	f015 f864 	bl	31878 <printk>
   1c7b0:	2210      	movs	r2, #16
   1c7b2:	4631      	mov	r1, r6
   1c7b4:	481e      	ldr	r0, [pc, #120]	; (1c830 <arm_mpu_init+0x98>)
   1c7b6:	f015 f85f 	bl	31878 <printk>
   1c7ba:	481a      	ldr	r0, [pc, #104]	; (1c824 <arm_mpu_init+0x8c>)
   1c7bc:	f240 1107 	movw	r1, #263	; 0x107
   1c7c0:	f015 f867 	bl	31892 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   1c7c4:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   1c7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1c7ca:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   1c7cc:	f7ff ffdc 	bl	1c788 <arm_core_mpu_disable>
	MPU->MAIR0 =
   1c7d0:	4d18      	ldr	r5, [pc, #96]	; (1c834 <arm_mpu_init+0x9c>)
   1c7d2:	4a19      	ldr	r2, [pc, #100]	; (1c838 <arm_mpu_init+0xa0>)
   1c7d4:	632a      	str	r2, [r5, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1c7d6:	42a6      	cmp	r6, r4
   1c7d8:	d119      	bne.n	1c80e <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   1c7da:	4b18      	ldr	r3, [pc, #96]	; (1c83c <arm_mpu_init+0xa4>)
   1c7dc:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
   1c7de:	f7ff ffc9 	bl	1c774 <arm_core_mpu_enable>
	__ASSERT(
   1c7e2:	682b      	ldr	r3, [r5, #0]
   1c7e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1c7e8:	2b10      	cmp	r3, #16
   1c7ea:	d00e      	beq.n	1c80a <arm_mpu_init+0x72>
   1c7ec:	4914      	ldr	r1, [pc, #80]	; (1c840 <arm_mpu_init+0xa8>)
   1c7ee:	f44f 7394 	mov.w	r3, #296	; 0x128
   1c7f2:	4a0c      	ldr	r2, [pc, #48]	; (1c824 <arm_mpu_init+0x8c>)
   1c7f4:	480d      	ldr	r0, [pc, #52]	; (1c82c <arm_mpu_init+0x94>)
   1c7f6:	f015 f83f 	bl	31878 <printk>
   1c7fa:	4812      	ldr	r0, [pc, #72]	; (1c844 <arm_mpu_init+0xac>)
   1c7fc:	f015 f83c 	bl	31878 <printk>
   1c800:	f44f 7194 	mov.w	r1, #296	; 0x128
   1c804:	4807      	ldr	r0, [pc, #28]	; (1c824 <arm_mpu_init+0x8c>)
   1c806:	f015 f844 	bl	31892 <assert_post_action>
	return 0;
   1c80a:	2000      	movs	r0, #0
   1c80c:	e7dc      	b.n	1c7c8 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1c80e:	6879      	ldr	r1, [r7, #4]
   1c810:	4620      	mov	r0, r4
   1c812:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1c816:	f7ff fead 	bl	1c574 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1c81a:	3401      	adds	r4, #1
   1c81c:	e7db      	b.n	1c7d6 <arm_mpu_init+0x3e>
   1c81e:	bf00      	nop
   1c820:	00033ad8 	.word	0x00033ad8
   1c824:	00035bbd 	.word	0x00035bbd
   1c828:	0003686f 	.word	0x0003686f
   1c82c:	00034ff7 	.word	0x00034ff7
   1c830:	00035c01 	.word	0x00035c01
   1c834:	e000ed90 	.word	0xe000ed90
   1c838:	0044ffaa 	.word	0x0044ffaa
   1c83c:	20025b15 	.word	0x20025b15
   1c840:	00035c35 	.word	0x00035c35
   1c844:	00035c86 	.word	0x00035c86

0001c848 <arm_core_mpu_configure_static_mpu_regions>:
{
   1c848:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1c84a:	4c0c      	ldr	r4, [pc, #48]	; (1c87c <arm_core_mpu_configure_static_mpu_regions+0x34>)
   1c84c:	460d      	mov	r5, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   1c84e:	7822      	ldrb	r2, [r4, #0]
   1c850:	f7ff feca 	bl	1c5e8 <mpu_configure_regions.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1c854:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1c856:	3016      	adds	r0, #22
   1c858:	d10f      	bne.n	1c87a <arm_core_mpu_configure_static_mpu_regions+0x32>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1c85a:	23cd      	movs	r3, #205	; 0xcd
   1c85c:	4a08      	ldr	r2, [pc, #32]	; (1c880 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   1c85e:	4909      	ldr	r1, [pc, #36]	; (1c884 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   1c860:	4809      	ldr	r0, [pc, #36]	; (1c888 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   1c862:	f015 f809 	bl	31878 <printk>
   1c866:	4629      	mov	r1, r5
   1c868:	4808      	ldr	r0, [pc, #32]	; (1c88c <arm_core_mpu_configure_static_mpu_regions+0x44>)
   1c86a:	f015 f805 	bl	31878 <printk>
}
   1c86e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1c872:	21cd      	movs	r1, #205	; 0xcd
   1c874:	4802      	ldr	r0, [pc, #8]	; (1c880 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   1c876:	f015 b80c 	b.w	31892 <assert_post_action>
}
   1c87a:	bd38      	pop	{r3, r4, r5, pc}
   1c87c:	20025b15 	.word	0x20025b15
   1c880:	00035bbd 	.word	0x00035bbd
   1c884:	0003686f 	.word	0x0003686f
   1c888:	00034ff7 	.word	0x00034ff7
   1c88c:	00035b62 	.word	0x00035b62

0001c890 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   1c890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c894:	460f      	mov	r7, r1
   1c896:	4680      	mov	r8, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1c898:	2600      	movs	r6, #0
   1c89a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 1c960 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>
		if (dyn_reg_info[i].index == -EINVAL) {

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1c89e:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1c964 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>
	MPU->RNR = index;
   1c8a2:	4c2a      	ldr	r4, [pc, #168]	; (1c94c <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1c8a4:	42be      	cmp	r6, r7
   1c8a6:	db02      	blt.n	1c8ae <arm_core_mpu_mark_areas_for_dynamic_regions+0x1e>
}
   1c8a8:	b003      	add	sp, #12
   1c8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   1c8ae:	f8d8 b004 	ldr.w	fp, [r8, #4]
   1c8b2:	f1bb 0f00 	cmp.w	fp, #0
   1c8b6:	d045      	beq.n	1c944 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>
			get_region_index(dyn_region_areas[i].start,
   1c8b8:	f8d8 3000 	ldr.w	r3, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1c8bc:	4618      	mov	r0, r3
   1c8be:	9301      	str	r3, [sp, #4]
   1c8c0:	f014 fce8 	bl	31294 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1c8c4:	9b01      	ldr	r3, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1c8c6:	4605      	mov	r5, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1c8c8:	eb0b 0003 	add.w	r0, fp, r3
   1c8cc:	3801      	subs	r0, #1
   1c8ce:	f014 fce1 	bl	31294 <arm_cmse_mpu_region_get>
   1c8d2:	2314      	movs	r3, #20
	if (region_start_addr == region_end_addr) {
   1c8d4:	4285      	cmp	r5, r0
   1c8d6:	fb03 f306 	mul.w	r3, r3, r6
   1c8da:	d014      	beq.n	1c906 <arm_core_mpu_mark_areas_for_dynamic_regions+0x76>
		dyn_reg_info[i].index =
   1c8dc:	f06f 0215 	mvn.w	r2, #21
   1c8e0:	f849 2003 	str.w	r2, [r9, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1c8e4:	23dd      	movs	r3, #221	; 0xdd
   1c8e6:	4a1a      	ldr	r2, [pc, #104]	; (1c950 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
   1c8e8:	491a      	ldr	r1, [pc, #104]	; (1c954 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
   1c8ea:	481b      	ldr	r0, [pc, #108]	; (1c958 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   1c8ec:	f014 ffc4 	bl	31878 <printk>
   1c8f0:	4639      	mov	r1, r7
   1c8f2:	481a      	ldr	r0, [pc, #104]	; (1c95c <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   1c8f4:	f014 ffc0 	bl	31878 <printk>
   1c8f8:	21dd      	movs	r1, #221	; 0xdd
   1c8fa:	4815      	ldr	r0, [pc, #84]	; (1c950 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
}
   1c8fc:	b003      	add	sp, #12
   1c8fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1c902:	f014 bfc6 	b.w	31892 <assert_post_action>
		if (dyn_reg_info[i].index == -EINVAL) {
   1c906:	f115 0f16 	cmn.w	r5, #22
		dyn_reg_info[i].index =
   1c90a:	f849 5003 	str.w	r5, [r9, r3]
		if (dyn_reg_info[i].index == -EINVAL) {
   1c90e:	d0e9      	beq.n	1c8e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		if (dyn_reg_info[i].index >= static_regions_num) {
   1c910:	f89a 2000 	ldrb.w	r2, [sl]
   1c914:	42aa      	cmp	r2, r5
   1c916:	dde5      	ble.n	1c8e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	MPU->RNR = index;
   1c918:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
   1c91a:	444b      	add	r3, r9
	MPU->RNR = index;
   1c91c:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
   1c91e:	68e0      	ldr	r0, [r4, #12]
   1c920:	7b19      	ldrb	r1, [r3, #12]
   1c922:	f360 0104 	bfi	r1, r0, #0, #5
   1c926:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1c928:	6921      	ldr	r1, [r4, #16]
   1c92a:	7b18      	ldrb	r0, [r3, #12]
   1c92c:	0849      	lsrs	r1, r1, #1
   1c92e:	f361 1047 	bfi	r0, r1, #5, #3
   1c932:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   1c934:	68e2      	ldr	r2, [r4, #12]
   1c936:	f022 021f 	bic.w	r2, r2, #31
   1c93a:	605a      	str	r2, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   1c93c:	6922      	ldr	r2, [r4, #16]
   1c93e:	f022 021f 	bic.w	r2, r2, #31
   1c942:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1c944:	3601      	adds	r6, #1
   1c946:	f108 080c 	add.w	r8, r8, #12
   1c94a:	e7ab      	b.n	1c8a4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   1c94c:	e000ed90 	.word	0xe000ed90
   1c950:	00035bbd 	.word	0x00035bbd
   1c954:	0003686f 	.word	0x0003686f
   1c958:	00034ff7 	.word	0x00034ff7
   1c95c:	00035b8e 	.word	0x00035b8e
   1c960:	20020084 	.word	0x20020084
   1c964:	20025b15 	.word	0x20025b15

0001c968 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   1c968:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   1c96a:	4b15      	ldr	r3, [pc, #84]	; (1c9c0 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
   1c96c:	460c      	mov	r4, r1
   1c96e:	781d      	ldrb	r5, [r3, #0]
   1c970:	4606      	mov	r6, r0
   1c972:	462b      	mov	r3, r5
  mpu->RLAR = 0U;
   1c974:	2100      	movs	r1, #0
  mpu->RNR = rnr;
   1c976:	4a13      	ldr	r2, [pc, #76]	; (1c9c4 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   1c978:	2b0f      	cmp	r3, #15
   1c97a:	dd1b      	ble.n	1c9b4 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>

	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
   1c97c:	4b12      	ldr	r3, [pc, #72]	; (1c9c8 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
   1c97e:	1d19      	adds	r1, r3, #4
   1c980:	6818      	ldr	r0, [r3, #0]
   1c982:	f7ff fdf7 	bl	1c574 <region_init>
	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   1c986:	462a      	mov	r2, r5
   1c988:	4621      	mov	r1, r4
   1c98a:	4630      	mov	r0, r6
   1c98c:	f7ff fe2c 	bl	1c5e8 <mpu_configure_regions.constprop.2>
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   1c990:	3016      	adds	r0, #22
   1c992:	d113      	bne.n	1c9bc <arm_core_mpu_configure_dynamic_mpu_regions+0x54>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   1c994:	23ec      	movs	r3, #236	; 0xec
   1c996:	4a0d      	ldr	r2, [pc, #52]	; (1c9cc <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
   1c998:	490d      	ldr	r1, [pc, #52]	; (1c9d0 <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
   1c99a:	480e      	ldr	r0, [pc, #56]	; (1c9d4 <arm_core_mpu_configure_dynamic_mpu_regions+0x6c>)
   1c99c:	f014 ff6c 	bl	31878 <printk>
   1c9a0:	4621      	mov	r1, r4
   1c9a2:	480d      	ldr	r0, [pc, #52]	; (1c9d8 <arm_core_mpu_configure_dynamic_mpu_regions+0x70>)
   1c9a4:	f014 ff68 	bl	31878 <printk>
}
   1c9a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   1c9ac:	21ec      	movs	r1, #236	; 0xec
   1c9ae:	4807      	ldr	r0, [pc, #28]	; (1c9cc <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
   1c9b0:	f014 bf6f 	b.w	31892 <assert_post_action>
   1c9b4:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   1c9b6:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   1c9b8:	3301      	adds	r3, #1
   1c9ba:	e7dd      	b.n	1c978 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
}
   1c9bc:	bd70      	pop	{r4, r5, r6, pc}
   1c9be:	bf00      	nop
   1c9c0:	20025b15 	.word	0x20025b15
   1c9c4:	e000ed90 	.word	0xe000ed90
   1c9c8:	20020084 	.word	0x20020084
   1c9cc:	00035bbd 	.word	0x00035bbd
   1c9d0:	0003686f 	.word	0x0003686f
   1c9d4:	00034ff7 	.word	0x00034ff7
   1c9d8:	00035b35 	.word	0x00035b35

0001c9dc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1c9dc:	4b01      	ldr	r3, [pc, #4]	; (1c9e4 <__stdout_hook_install+0x8>)
   1c9de:	6018      	str	r0, [r3, #0]
}
   1c9e0:	4770      	bx	lr
   1c9e2:	bf00      	nop
   1c9e4:	20028de4 	.word	0x20028de4

0001c9e8 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   1c9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c9ea:	4606      	mov	r6, r0
   1c9ec:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   1c9ee:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   1c9f0:	4f06      	ldr	r7, [pc, #24]	; (1ca0c <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   1c9f2:	42ac      	cmp	r4, r5
   1c9f4:	da08      	bge.n	1ca08 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   1c9f6:	683b      	ldr	r3, [r7, #0]
   1c9f8:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1c9fa:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   1c9fc:	5530      	strb	r0, [r6, r4]
   1c9fe:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1ca02:	d001      	beq.n	1ca08 <z_impl_zephyr_read_stdin+0x20>
   1ca04:	280d      	cmp	r0, #13
   1ca06:	d1f4      	bne.n	1c9f2 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   1ca08:	4620      	mov	r0, r4
   1ca0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ca0c:	20028de0 	.word	0x20028de0

0001ca10 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   1ca10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca14:	4606      	mov	r6, r0
   1ca16:	460d      	mov	r5, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   1ca18:	4604      	mov	r4, r0
   1ca1a:	4f0a      	ldr	r7, [pc, #40]	; (1ca44 <z_impl_zephyr_write_stdout+0x34>)
   1ca1c:	1ba3      	subs	r3, r4, r6
   1ca1e:	429d      	cmp	r5, r3
   1ca20:	dc02      	bgt.n	1ca28 <z_impl_zephyr_write_stdout+0x18>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   1ca22:	4628      	mov	r0, r5
   1ca24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (*(buf + i) == '\n') {
   1ca28:	7823      	ldrb	r3, [r4, #0]
   1ca2a:	46a0      	mov	r8, r4
   1ca2c:	2b0a      	cmp	r3, #10
   1ca2e:	d102      	bne.n	1ca36 <z_impl_zephyr_write_stdout+0x26>
			_stdout_hook('\r');
   1ca30:	683b      	ldr	r3, [r7, #0]
   1ca32:	200d      	movs	r0, #13
   1ca34:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   1ca36:	683b      	ldr	r3, [r7, #0]
   1ca38:	f898 0000 	ldrb.w	r0, [r8]
   1ca3c:	3401      	adds	r4, #1
   1ca3e:	4798      	blx	r3
   1ca40:	e7ec      	b.n	1ca1c <z_impl_zephyr_write_stdout+0xc>
   1ca42:	bf00      	nop
   1ca44:	20028de4 	.word	0x20028de4

0001ca48 <_exit>:
	return 0;
}
FUNC_ALIAS(_fstat, fstat, int);

void _exit(int status)
{
   1ca48:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1ca4a:	2105      	movs	r1, #5
   1ca4c:	4801      	ldr	r0, [pc, #4]	; (1ca54 <_exit+0xc>)
   1ca4e:	f7ff ffdf 	bl	1ca10 <z_impl_zephyr_write_stdout>
   1ca52:	e7fe      	b.n	1ca52 <_exit+0xa>
   1ca54:	00035d13 	.word	0x00035d13

0001ca58 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   1ca58:	b538      	push	{r3, r4, r5, lr}
   1ca5a:	4605      	mov	r5, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
   1ca5c:	f04f 31ff 	mov.w	r1, #4294967295
   1ca60:	480b      	ldr	r0, [pc, #44]	; (1ca90 <_sbrk+0x38>)
   1ca62:	f014 fd4f 	bl	31504 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1ca66:	4a0b      	ldr	r2, [pc, #44]	; (1ca94 <_sbrk+0x3c>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1ca68:	490b      	ldr	r1, [pc, #44]	; (1ca98 <_sbrk+0x40>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1ca6a:	6814      	ldr	r4, [r2, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1ca6c:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
   1ca70:	4425      	add	r5, r4
   1ca72:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   1ca76:	429d      	cmp	r5, r3
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   1ca78:	bf2c      	ite	cs
   1ca7a:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1ca7e:	1864      	addcc	r4, r4, r1
	}

	sys_sem_give(&heap_sem);
   1ca80:	4803      	ldr	r0, [pc, #12]	; (1ca90 <_sbrk+0x38>)
		heap_sz += count;
   1ca82:	bf38      	it	cc
   1ca84:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
   1ca86:	f014 fd38 	bl	314fa <sys_sem_give>

	return ret;
}
   1ca8a:	4620      	mov	r0, r4
   1ca8c:	bd38      	pop	{r3, r4, r5, pc}
   1ca8e:	bf00      	nop
   1ca90:	20029110 	.word	0x20029110
   1ca94:	20020098 	.word	0x20020098
   1ca98:	2002917c 	.word	0x2002917c

0001ca9c <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   1ca9c:	b538      	push	{r3, r4, r5, lr}
   1ca9e:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   1caa0:	4604      	mov	r4, r0
   1caa2:	b958      	cbnz	r0, 1cabc <net_if_flag_is_set+0x20>
   1caa4:	4909      	ldr	r1, [pc, #36]	; (1cacc <net_if_flag_is_set+0x30>)
   1caa6:	480a      	ldr	r0, [pc, #40]	; (1cad0 <net_if_flag_is_set+0x34>)
   1caa8:	f240 2311 	movw	r3, #529	; 0x211
   1caac:	4a09      	ldr	r2, [pc, #36]	; (1cad4 <net_if_flag_is_set+0x38>)
   1caae:	f014 fee3 	bl	31878 <printk>
   1cab2:	f240 2111 	movw	r1, #529	; 0x211
   1cab6:	4807      	ldr	r0, [pc, #28]	; (1cad4 <net_if_flag_is_set+0x38>)
   1cab8:	f014 feeb 	bl	31892 <assert_post_action>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cabc:	6823      	ldr	r3, [r4, #0]
   1cabe:	330c      	adds	r3, #12
   1cac0:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1cac4:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   1cac6:	f000 0001 	and.w	r0, r0, #1
   1caca:	bd38      	pop	{r3, r4, r5, pc}
   1cacc:	00035d55 	.word	0x00035d55
   1cad0:	00034ff7 	.word	0x00034ff7
   1cad4:	00035d21 	.word	0x00035d21

0001cad8 <net_if_flag_set.constprop.23>:
static inline void net_if_flag_set(struct net_if *iface,
   1cad8:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   1cada:	4604      	mov	r4, r0
   1cadc:	b958      	cbnz	r0, 1caf6 <net_if_flag_set.constprop.23+0x1e>
   1cade:	490b      	ldr	r1, [pc, #44]	; (1cb0c <net_if_flag_set.constprop.23+0x34>)
   1cae0:	480b      	ldr	r0, [pc, #44]	; (1cb10 <net_if_flag_set.constprop.23+0x38>)
   1cae2:	f240 13e3 	movw	r3, #483	; 0x1e3
   1cae6:	4a0b      	ldr	r2, [pc, #44]	; (1cb14 <net_if_flag_set.constprop.23+0x3c>)
   1cae8:	f014 fec6 	bl	31878 <printk>
   1caec:	f240 11e3 	movw	r1, #483	; 0x1e3
   1caf0:	4808      	ldr	r0, [pc, #32]	; (1cb14 <net_if_flag_set.constprop.23+0x3c>)
   1caf2:	f014 fece 	bl	31892 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1caf6:	6823      	ldr	r3, [r4, #0]
   1caf8:	330c      	adds	r3, #12
   1cafa:	e8d3 2fef 	ldaex	r2, [r3]
   1cafe:	f042 0201 	orr.w	r2, r2, #1
   1cb02:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1cb06:	2900      	cmp	r1, #0
   1cb08:	d1f7      	bne.n	1cafa <net_if_flag_set.constprop.23+0x22>
}
   1cb0a:	bd10      	pop	{r4, pc}
   1cb0c:	00035d55 	.word	0x00035d55
   1cb10:	00034ff7 	.word	0x00034ff7
   1cb14:	00035d21 	.word	0x00035d21

0001cb18 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   1cb18:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1cb1a:	2100      	movs	r1, #0
{
   1cb1c:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1cb1e:	f7ff ffbd 	bl	1ca9c <net_if_flag_is_set>
   1cb22:	b928      	cbnz	r0, 1cb30 <net_if_up+0x18>
	}

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
   1cb24:	682b      	ldr	r3, [r5, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1cb26:	7e9a      	ldrb	r2, [r3, #26]
   1cb28:	b122      	cbz	r2, 1cb34 <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   1cb2a:	4628      	mov	r0, r5
   1cb2c:	f7ff ffd4 	bl	1cad8 <net_if_flag_set.constprop.23>
		return 0;
   1cb30:	2000      	movs	r0, #0
   1cb32:	e01f      	b.n	1cb74 <net_if_up+0x5c>
 *
 * @return a pointer to the iface L2
 */
static inline const struct net_l2 * const net_if_l2(struct net_if *iface)
{
	return iface->if_dev->l2;
   1cb34:	685b      	ldr	r3, [r3, #4]
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1cb36:	b9ab      	cbnz	r3, 1cb64 <net_if_up+0x4c>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   1cb38:	682b      	ldr	r3, [r5, #0]
   1cb3a:	691b      	ldr	r3, [r3, #16]
   1cb3c:	b95b      	cbnz	r3, 1cb56 <net_if_up+0x3e>
   1cb3e:	490e      	ldr	r1, [pc, #56]	; (1cb78 <net_if_up+0x60>)
   1cb40:	480e      	ldr	r0, [pc, #56]	; (1cb7c <net_if_up+0x64>)
   1cb42:	f640 5389 	movw	r3, #3465	; 0xd89
   1cb46:	4a0e      	ldr	r2, [pc, #56]	; (1cb80 <net_if_up+0x68>)
   1cb48:	f014 fe96 	bl	31878 <printk>
   1cb4c:	f640 5189 	movw	r1, #3465	; 0xd89
   1cb50:	480b      	ldr	r0, [pc, #44]	; (1cb80 <net_if_up+0x68>)
   1cb52:	f014 fe9e 	bl	31892 <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
   1cb56:	4628      	mov	r0, r5
   1cb58:	f7ff ffbe 	bl	1cad8 <net_if_flag_set.constprop.23>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1cb5c:	4628      	mov	r0, r5
   1cb5e:	f014 ffad 	bl	31abc <l2_flags_get>
   1cb62:	e7e5      	b.n	1cb30 <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1cb64:	689b      	ldr	r3, [r3, #8]
   1cb66:	2b00      	cmp	r3, #0
   1cb68:	d0e6      	beq.n	1cb38 <net_if_up+0x20>
	status = net_if_l2(iface)->enable(iface, true);
   1cb6a:	2101      	movs	r1, #1
   1cb6c:	4628      	mov	r0, r5
   1cb6e:	4798      	blx	r3
	if (status < 0) {
   1cb70:	2800      	cmp	r0, #0
   1cb72:	dae1      	bge.n	1cb38 <net_if_up+0x20>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   1cb74:	bd38      	pop	{r3, r4, r5, pc}
   1cb76:	bf00      	nop
   1cb78:	00035d5b 	.word	0x00035d5b
   1cb7c:	00034ff7 	.word	0x00034ff7
   1cb80:	00035d8c 	.word	0x00035d8c

0001cb84 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   1cb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cb86:	4e09      	ldr	r6, [pc, #36]	; (1cbac <net_if_init+0x28>)

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   1cb88:	2400      	movs	r4, #0
   1cb8a:	4637      	mov	r7, r6
   1cb8c:	4d08      	ldr	r5, [pc, #32]	; (1cbb0 <net_if_init+0x2c>)
   1cb8e:	1bad      	subs	r5, r5, r6
   1cb90:	42ac      	cmp	r4, r5
   1cb92:	eb06 0004 	add.w	r0, r6, r4
   1cb96:	d100      	bne.n	1cb9a <net_if_init+0x16>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   1cb98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   1cb9a:	593b      	ldr	r3, [r7, r4]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   1cb9c:	681b      	ldr	r3, [r3, #0]
   1cb9e:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   1cba0:	b113      	cbz	r3, 1cba8 <net_if_init+0x24>
   1cba2:	681b      	ldr	r3, [r3, #0]
   1cba4:	b103      	cbz	r3, 1cba8 <net_if_init+0x24>
	api->init(iface);
   1cba6:	4798      	blx	r3
   1cba8:	3420      	adds	r4, #32
   1cbaa:	e7f1      	b.n	1cb90 <net_if_init+0xc>
   1cbac:	20029140 	.word	0x20029140
   1cbb0:	20029160 	.word	0x20029160

0001cbb4 <net_if_post_init>:

void net_if_post_init(void)
{
   1cbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1cbb6:	2400      	movs	r4, #0
   1cbb8:	4f08      	ldr	r7, [pc, #32]	; (1cbdc <net_if_post_init+0x28>)
   1cbba:	4d09      	ldr	r5, [pc, #36]	; (1cbe0 <net_if_post_init+0x2c>)
   1cbbc:	1bed      	subs	r5, r5, r7
   1cbbe:	42ac      	cmp	r4, r5
   1cbc0:	eb04 0607 	add.w	r6, r4, r7
   1cbc4:	d100      	bne.n	1cbc8 <net_if_post_init+0x14>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   1cbc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   1cbc8:	2103      	movs	r1, #3
   1cbca:	4630      	mov	r0, r6
   1cbcc:	f7ff ff66 	bl	1ca9c <net_if_flag_is_set>
   1cbd0:	b910      	cbnz	r0, 1cbd8 <net_if_post_init+0x24>
			net_if_up(iface);
   1cbd2:	4630      	mov	r0, r6
   1cbd4:	f7ff ffa0 	bl	1cb18 <net_if_up>
   1cbd8:	3420      	adds	r4, #32
   1cbda:	e7f0      	b.n	1cbbe <net_if_post_init+0xa>
   1cbdc:	20029140 	.word	0x20029140
   1cbe0:	20029160 	.word	0x20029160

0001cbe4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1cbe4:	b570      	push	{r4, r5, r6, lr}
   1cbe6:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1cbe8:	6884      	ldr	r4, [r0, #8]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1cbea:	460d      	mov	r5, r1
   1cbec:	b961      	cbnz	r1, 1cc08 <gpio_nrfx_manage_callback+0x24>
   1cbee:	4922      	ldr	r1, [pc, #136]	; (1cc78 <gpio_nrfx_manage_callback+0x94>)
   1cbf0:	231c      	movs	r3, #28
   1cbf2:	4a22      	ldr	r2, [pc, #136]	; (1cc7c <gpio_nrfx_manage_callback+0x98>)
   1cbf4:	4822      	ldr	r0, [pc, #136]	; (1cc80 <gpio_nrfx_manage_callback+0x9c>)
   1cbf6:	f014 fe3f 	bl	31878 <printk>
   1cbfa:	4822      	ldr	r0, [pc, #136]	; (1cc84 <gpio_nrfx_manage_callback+0xa0>)
   1cbfc:	f014 fe3c 	bl	31878 <printk>
   1cc00:	211c      	movs	r1, #28
   1cc02:	481e      	ldr	r0, [pc, #120]	; (1cc7c <gpio_nrfx_manage_callback+0x98>)
   1cc04:	f014 fe45 	bl	31892 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1cc08:	686b      	ldr	r3, [r5, #4]
   1cc0a:	b963      	cbnz	r3, 1cc26 <gpio_nrfx_manage_callback+0x42>
   1cc0c:	491e      	ldr	r1, [pc, #120]	; (1cc88 <gpio_nrfx_manage_callback+0xa4>)
   1cc0e:	231d      	movs	r3, #29
   1cc10:	4a1a      	ldr	r2, [pc, #104]	; (1cc7c <gpio_nrfx_manage_callback+0x98>)
   1cc12:	481b      	ldr	r0, [pc, #108]	; (1cc80 <gpio_nrfx_manage_callback+0x9c>)
   1cc14:	f014 fe30 	bl	31878 <printk>
   1cc18:	481c      	ldr	r0, [pc, #112]	; (1cc8c <gpio_nrfx_manage_callback+0xa8>)
   1cc1a:	f014 fe2d 	bl	31878 <printk>
   1cc1e:	211d      	movs	r1, #29
   1cc20:	4816      	ldr	r0, [pc, #88]	; (1cc7c <gpio_nrfx_manage_callback+0x98>)
   1cc22:	f014 fe36 	bl	31892 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   1cc26:	6823      	ldr	r3, [r4, #0]

	if (!sys_slist_is_empty(callbacks)) {
   1cc28:	b15b      	cbz	r3, 1cc42 <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cc2a:	2200      	movs	r2, #0
   1cc2c:	429d      	cmp	r5, r3
   1cc2e:	d113      	bne.n	1cc58 <gpio_nrfx_manage_callback+0x74>
   1cc30:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   1cc32:	b95a      	cbnz	r2, 1cc4c <gpio_nrfx_manage_callback+0x68>
   1cc34:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1cc36:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1cc38:	4295      	cmp	r5, r2
   1cc3a:	d100      	bne.n	1cc3e <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   1cc3c:	6063      	str	r3, [r4, #4]
	parent->next = child;
   1cc3e:	2300      	movs	r3, #0
   1cc40:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1cc42:	b976      	cbnz	r6, 1cc62 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1cc44:	2000      	movs	r0, #0
				     callback, set);
}
   1cc46:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cc48:	460b      	mov	r3, r1
   1cc4a:	e7ef      	b.n	1cc2c <gpio_nrfx_manage_callback+0x48>
	parent->next = child;
   1cc4c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1cc4e:	6863      	ldr	r3, [r4, #4]
   1cc50:	429d      	cmp	r5, r3
	list->tail = node;
   1cc52:	bf08      	it	eq
   1cc54:	6062      	streq	r2, [r4, #4]
   1cc56:	e7f2      	b.n	1cc3e <gpio_nrfx_manage_callback+0x5a>
	return node->next;
   1cc58:	6819      	ldr	r1, [r3, #0]
   1cc5a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cc5c:	2900      	cmp	r1, #0
   1cc5e:	d1f3      	bne.n	1cc48 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1cc60:	b13e      	cbz	r6, 1cc72 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   1cc62:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   1cc64:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1cc66:	6860      	ldr	r0, [r4, #4]
	list->head = node;
   1cc68:	6025      	str	r5, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1cc6a:	2800      	cmp	r0, #0
   1cc6c:	d1ea      	bne.n	1cc44 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1cc6e:	6065      	str	r5, [r4, #4]
   1cc70:	e7e9      	b.n	1cc46 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   1cc72:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1cc76:	e7e6      	b.n	1cc46 <gpio_nrfx_manage_callback+0x62>
   1cc78:	00036110 	.word	0x00036110
   1cc7c:	00035ddb 	.word	0x00035ddb
   1cc80:	00034ff7 	.word	0x00034ff7
   1cc84:	00035e14 	.word	0x00035e14
   1cc88:	00035e23 	.word	0x00035e23
   1cc8c:	00035e35 	.word	0x00035e35

0001cc90 <nrf_gpio_pin_port_decode.isra.6.part.7>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   1cc90:	b508      	push	{r3, lr}
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   1cc92:	4a03      	ldr	r2, [pc, #12]	; (1cca0 <nrf_gpio_pin_port_decode.isra.6.part.7+0x10>)
   1cc94:	4b03      	ldr	r3, [pc, #12]	; (1cca4 <nrf_gpio_pin_port_decode.isra.6.part.7+0x14>)
   1cc96:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   1cc9a:	4803      	ldr	r0, [pc, #12]	; (1cca8 <nrf_gpio_pin_port_decode.isra.6.part.7+0x18>)
   1cc9c:	f013 f930 	bl	2ff00 <__assert_func>
   1cca0:	00035dc2 	.word	0x00035dc2
   1cca4:	00035e90 	.word	0x00035e90
   1cca8:	00035e9e 	.word	0x00035e9e

0001ccac <nrf_gpio_cfg_sense_set>:
   1ccac:	281f      	cmp	r0, #31
        sense_config);
}


__STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t pin_number, nrf_gpio_pin_sense_t sense_config)
{
   1ccae:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   1ccb0:	d901      	bls.n	1ccb6 <nrf_gpio_cfg_sense_set+0xa>
   1ccb2:	f7ff ffed 	bl	1cc90 <nrf_gpio_pin_port_decode.isra.6.part.7>
   1ccb6:	4b08      	ldr	r3, [pc, #32]	; (1ccd8 <nrf_gpio_cfg_sense_set+0x2c>)
   1ccb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   1ccbc:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1ccc0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   1ccc4:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1ccc8:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1cccc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1ccd0:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   1ccd4:	bd08      	pop	{r3, pc}
   1ccd6:	bf00      	nop
   1ccd8:	40842500 	.word	0x40842500

0001ccdc <gpiote_pin_int_cfg>:
{
   1ccdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->config->config_info;
   1cce0:	6803      	ldr	r3, [r0, #0]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1cce2:	f001 041f 	and.w	r4, r1, #31
   1cce6:	689b      	ldr	r3, [r3, #8]
{
   1cce8:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1ccea:	791b      	ldrb	r3, [r3, #4]
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
   1ccec:	4e48      	ldr	r6, [pc, #288]	; (1ce10 <gpiote_pin_int_cfg+0x134>)
   1ccee:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1ccf2:	2300      	movs	r3, #0
   1ccf4:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
   1ccf8:	6887      	ldr	r7, [r0, #8]
   1ccfa:	b2d2      	uxtb	r2, r2
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1ccfc:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   1cd00:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   1cd04:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
   1cd08:	428c      	cmp	r4, r1
   1cd0a:	d166      	bne.n	1cdda <gpiote_pin_int_cfg+0xfe>
		    && (intenset & BIT(i))) {
   1cd0c:	fa22 f103 	lsr.w	r1, r2, r3
   1cd10:	07c9      	lsls	r1, r1, #31
   1cd12:	d562      	bpl.n	1cdda <gpiote_pin_int_cfg+0xfe>
   1cd14:	009a      	lsls	r2, r3, #2
   1cd16:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1cd1a:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1cd1e:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   1cd22:	f021 0101 	bic.w	r1, r1, #1
   1cd26:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
   1cd2a:	2201      	movs	r2, #1
   1cd2c:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENCLR = mask;
   1cd30:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1cd34:	4620      	mov	r0, r4
   1cd36:	2100      	movs	r1, #0
   1cd38:	f7ff ffb8 	bl	1ccac <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   1cd3c:	68b8      	ldr	r0, [r7, #8]
   1cd3e:	40e8      	lsrs	r0, r5
   1cd40:	f010 0001 	ands.w	r0, r0, #1
   1cd44:	d047      	beq.n	1cdd6 <gpiote_pin_int_cfg+0xfa>
   1cd46:	68f8      	ldr	r0, [r7, #12]
   1cd48:	40e8      	lsrs	r0, r5
   1cd4a:	f010 0001 	ands.w	r0, r0, #1
   1cd4e:	d042      	beq.n	1cdd6 <gpiote_pin_int_cfg+0xfa>
		if (data->trig_edge & BIT(pin)) {
   1cd50:	6978      	ldr	r0, [r7, #20]
   1cd52:	40e8      	lsrs	r0, r5
   1cd54:	f010 0801 	ands.w	r8, r0, #1
   1cd58:	d04b      	beq.n	1cdf2 <gpiote_pin_int_cfg+0x116>
			if (data->double_edge & BIT(pin)) {
   1cd5a:	69bb      	ldr	r3, [r7, #24]
   1cd5c:	40eb      	lsrs	r3, r5
   1cd5e:	07db      	lsls	r3, r3, #31
   1cd60:	d43f      	bmi.n	1cde2 <gpiote_pin_int_cfg+0x106>
			} else if (((data->active_level & BIT(pin)) != 0U)
   1cd62:	693b      	ldr	r3, [r7, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   1cd64:	69fa      	ldr	r2, [r7, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   1cd66:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   1cd68:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
   1cd6c:	f003 0301 	and.w	r3, r3, #1
   1cd70:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
   1cd74:	42ab      	cmp	r3, r5
   1cd76:	bf0c      	ite	eq
   1cd78:	2502      	moveq	r5, #2
   1cd7a:	2501      	movne	r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   1cd7c:	2200      	movs	r2, #0
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   1cd7e:	f502 73a2 	add.w	r3, r2, #324	; 0x144
   1cd82:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
   1cd86:	f010 0003 	ands.w	r0, r0, #3
   1cd8a:	d12c      	bne.n	1cde6 <gpiote_pin_int_cfg+0x10a>
			nrf_gpiote_events_t evt =
   1cd8c:	0093      	lsls	r3, r2, #2
   1cd8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cd92:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1cd96:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1cd9a:	0224      	lsls	r4, r4, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1cd9c:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
   1cda0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   1cda4:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1cda8:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1cdac:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   1cdb0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1cdb4:	430d      	orrs	r5, r1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   1cdb6:	4917      	ldr	r1, [pc, #92]	; (1ce14 <gpiote_pin_int_cfg+0x138>)
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1cdb8:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   1cdbc:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1cdc0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1cdc4:	f041 0101 	orr.w	r1, r1, #1
   1cdc8:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
   1cdcc:	2301      	movs	r3, #1
   1cdce:	fa03 f202 	lsl.w	r2, r3, r2
    NRF_GPIOTE->INTENSET = mask;
   1cdd2:	f8c6 2304 	str.w	r2, [r6, #772]	; 0x304
}
   1cdd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1cdda:	3301      	adds	r3, #1
   1cddc:	2b08      	cmp	r3, #8
   1cdde:	d18d      	bne.n	1ccfc <gpiote_pin_int_cfg+0x20>
   1cde0:	e7a8      	b.n	1cd34 <gpiote_pin_int_cfg+0x58>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1cde2:	2503      	movs	r5, #3
   1cde4:	e7ca      	b.n	1cd7c <gpiote_pin_int_cfg+0xa0>
   1cde6:	3201      	adds	r2, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   1cde8:	2a08      	cmp	r2, #8
   1cdea:	d1c8      	bne.n	1cd7e <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
   1cdec:	f06f 0012 	mvn.w	r0, #18
   1cdf0:	e7f1      	b.n	1cdd6 <gpiote_pin_int_cfg+0xfa>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   1cdf2:	693b      	ldr	r3, [r7, #16]
   1cdf4:	69fa      	ldr	r2, [r7, #28]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1cdf6:	4620      	mov	r0, r4
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   1cdf8:	4053      	eors	r3, r2
   1cdfa:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   1cdfe:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1ce02:	bf0c      	ite	eq
   1ce04:	2103      	moveq	r1, #3
   1ce06:	2102      	movne	r1, #2
   1ce08:	f7ff ff50 	bl	1ccac <nrf_gpio_cfg_sense_set>
	int res = 0;
   1ce0c:	4640      	mov	r0, r8
   1ce0e:	e7e2      	b.n	1cdd6 <gpiote_pin_int_cfg+0xfa>
   1ce10:	40031000 	.word	0x40031000
   1ce14:	40031100 	.word	0x40031100

0001ce18 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   1ce18:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1ce1a:	4b09      	ldr	r3, [pc, #36]	; (1ce40 <gpio_nrfx_init+0x28>)
   1ce1c:	781a      	ldrb	r2, [r3, #0]
   1ce1e:	b96a      	cbnz	r2, 1ce3c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1ce20:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   1ce22:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   1ce24:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   1ce26:	2105      	movs	r1, #5
   1ce28:	f7fe fec2 	bl	1bbb0 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   1ce2c:	2031      	movs	r0, #49	; 0x31
   1ce2e:	f7fe feaf 	bl	1bb90 <z_arch_irq_enable>
   1ce32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1ce36:	4b03      	ldr	r3, [pc, #12]	; (1ce44 <gpio_nrfx_init+0x2c>)
   1ce38:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1ce3c:	2000      	movs	r0, #0
   1ce3e:	bd08      	pop	{r3, pc}
   1ce40:	20025b16 	.word	0x20025b16
   1ce44:	40031000 	.word	0x40031000

0001ce48 <gpio_nrfx_config>:
{
   1ce48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce4c:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   1ce4e:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   1ce50:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   1ce54:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   1ce58:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   1ce5a:	d049      	beq.n	1cef0 <gpio_nrfx_config+0xa8>
   1ce5c:	dc2c      	bgt.n	1ceb8 <gpio_nrfx_config+0x70>
   1ce5e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   1ce62:	d03d      	beq.n	1cee0 <gpio_nrfx_config+0x98>
   1ce64:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   1ce68:	d03e      	beq.n	1cee8 <gpio_nrfx_config+0xa0>
   1ce6a:	bb60      	cbnz	r0, 1cec6 <gpio_nrfx_config+0x7e>
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   1ce6c:	f406 7740 	and.w	r7, r6, #768	; 0x300
   1ce70:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   1ce74:	d03e      	beq.n	1cef4 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_PULLUP;
   1ce76:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   1ce7a:	4263      	negs	r3, r4
   1ce7c:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1ce7e:	2901      	cmp	r1, #1
		from_pin = pin;
   1ce80:	bf19      	ittee	ne
   1ce82:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
   1ce84:	46a1      	movne	r9, r4
		to_pin   = 31U;
   1ce86:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   1ce8a:	2400      	moveq	r4, #0
   1ce8c:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   1ce90:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   1ce94:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1ce98:	ea47 070c 	orr.w	r7, r7, ip
   1ce9c:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1cea0:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1cf74 <gpio_nrfx_config+0x12c>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1cea4:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   1cea8:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1ceac:	45a1      	cmp	r9, r4
   1ceae:	d223      	bcs.n	1cef8 <gpio_nrfx_config+0xb0>
	return 0;
   1ceb0:	2000      	movs	r0, #0
}
   1ceb2:	b003      	add	sp, #12
   1ceb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   1ceb8:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   1cebc:	d016      	beq.n	1ceec <gpio_nrfx_config+0xa4>
   1cebe:	dc05      	bgt.n	1cecc <gpio_nrfx_config+0x84>
   1cec0:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   1cec4:	d00e      	beq.n	1cee4 <gpio_nrfx_config+0x9c>
		return -EINVAL;
   1cec6:	f06f 0015 	mvn.w	r0, #21
   1ceca:	e7f2      	b.n	1ceb2 <gpio_nrfx_config+0x6a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   1cecc:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   1ced0:	d004      	beq.n	1cedc <gpio_nrfx_config+0x94>
   1ced2:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   1ced6:	d1f6      	bne.n	1cec6 <gpio_nrfx_config+0x7e>
		drive = NRF_GPIO_PIN_H0D1;
   1ced8:	2007      	movs	r0, #7
		break;
   1ceda:	e7c7      	b.n	1ce6c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0D1;
   1cedc:	2006      	movs	r0, #6
		break;
   1cede:	e7c5      	b.n	1ce6c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0S1;
   1cee0:	2001      	movs	r0, #1
		break;
   1cee2:	e7c3      	b.n	1ce6c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   1cee4:	2003      	movs	r0, #3
		break;
   1cee6:	e7c1      	b.n	1ce6c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0S1;
   1cee8:	2004      	movs	r0, #4
		break;
   1ceea:	e7bf      	b.n	1ce6c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0H1;
   1ceec:	2005      	movs	r0, #5
		break;
   1ceee:	e7bd      	b.n	1ce6c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0H1;
   1cef0:	2002      	movs	r0, #2
   1cef2:	e7bb      	b.n	1ce6c <gpio_nrfx_config+0x24>
		pull = NRF_GPIO_PIN_PULLUP;
   1cef4:	2303      	movs	r3, #3
   1cef6:	e7c2      	b.n	1ce7e <gpio_nrfx_config+0x36>
	return port->config->config_info;
   1cef8:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   1cefc:	6892      	ldr	r2, [r2, #8]
   1cefe:	7911      	ldrb	r1, [r2, #4]
   1cf00:	f004 021f 	and.w	r2, r4, #31
   1cf04:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   1cf08:	2a1f      	cmp	r2, #31
   1cf0a:	dd01      	ble.n	1cf10 <gpio_nrfx_config+0xc8>
   1cf0c:	f7ff fec0 	bl	1cc90 <nrf_gpio_pin_port_decode.isra.6.part.7>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1cf10:	3280      	adds	r2, #128	; 0x80
   1cf12:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
   1cf16:	68a9      	ldr	r1, [r5, #8]
   1cf18:	fa0b f204 	lsl.w	r2, fp, r4
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   1cf1c:	2b00      	cmp	r3, #0
   1cf1e:	d025      	beq.n	1cf6c <gpio_nrfx_config+0x124>
   1cf20:	4311      	orrs	r1, r2
   1cf22:	60a9      	str	r1, [r5, #8]
   1cf24:	6969      	ldr	r1, [r5, #20]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   1cf26:	06b0      	lsls	r0, r6, #26
   1cf28:	bf4c      	ite	mi
   1cf2a:	4311      	orrmi	r1, r2
   1cf2c:	4391      	bicpl	r1, r2
   1cf2e:	6169      	str	r1, [r5, #20]
   1cf30:	69a9      	ldr	r1, [r5, #24]
		WRITE_BIT(data->double_edge, curr_pin,
   1cf32:	0670      	lsls	r0, r6, #25
   1cf34:	bf4c      	ite	mi
   1cf36:	4311      	orrmi	r1, r2
   1cf38:	4391      	bicpl	r1, r2
   1cf3a:	61a9      	str	r1, [r5, #24]
   1cf3c:	6929      	ldr	r1, [r5, #16]
		WRITE_BIT(data->active_level, curr_pin,
   1cf3e:	0770      	lsls	r0, r6, #29
   1cf40:	bf4c      	ite	mi
   1cf42:	4311      	orrmi	r1, r2
   1cf44:	4391      	bicpl	r1, r2
   1cf46:	6129      	str	r1, [r5, #16]
   1cf48:	69e9      	ldr	r1, [r5, #28]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   1cf4a:	0630      	lsls	r0, r6, #24
   1cf4c:	bf4c      	ite	mi
   1cf4e:	430a      	orrmi	r2, r1
   1cf50:	ea21 0202 	bicpl.w	r2, r1, r2
   1cf54:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1cf56:	4621      	mov	r1, r4
   1cf58:	4640      	mov	r0, r8
   1cf5a:	9301      	str	r3, [sp, #4]
   1cf5c:	f7ff febe 	bl	1ccdc <gpiote_pin_int_cfg>
		if (res != 0) {
   1cf60:	2800      	cmp	r0, #0
   1cf62:	d1a6      	bne.n	1ceb2 <gpio_nrfx_config+0x6a>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1cf64:	3401      	adds	r4, #1
   1cf66:	b2e4      	uxtb	r4, r4
   1cf68:	9b01      	ldr	r3, [sp, #4]
   1cf6a:	e79f      	b.n	1ceac <gpio_nrfx_config+0x64>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   1cf6c:	ea21 0102 	bic.w	r1, r1, r2
   1cf70:	e7d7      	b.n	1cf22 <gpio_nrfx_config+0xda>
   1cf72:	bf00      	nop
   1cf74:	40842500 	.word	0x40842500

0001cf78 <gpiote_event_handler>:
{
   1cf78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
   1cf7c:	4f56      	ldr	r7, [pc, #344]	; (1d0d8 <gpiote_event_handler+0x160>)
   1cf7e:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
   1cf80:	2e01      	cmp	r6, #1
   1cf82:	d17c      	bne.n	1d07e <gpiote_event_handler+0x106>
	u32_t bit = 1U << pin;
   1cf84:	46b0      	mov	r8, r6
	u32_t pin = 0U;
   1cf86:	f04f 0a00 	mov.w	sl, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   1cf8a:	4a54      	ldr	r2, [pc, #336]	; (1d0dc <gpiote_event_handler+0x164>)
   1cf8c:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
   1cf8e:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   1cf90:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
   1cf92:	f8d2 9008 	ldr.w	r9, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
   1cf96:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
   1cf9a:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
   1cf9c:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1cfa0:	430a      	orrs	r2, r1
   1cfa2:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1cfa6:	f8d9 2000 	ldr.w	r2, [r9]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   1cfaa:	691b      	ldr	r3, [r3, #16]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   1cfac:	6912      	ldr	r2, [r2, #16]
   1cfae:	405c      	eors	r4, r3
   1cfb0:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
   1cfb2:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   1cfb6:	2d00      	cmp	r5, #0
   1cfb8:	d14e      	bne.n	1d058 <gpiote_event_handler+0xe0>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   1cfba:	603d      	str	r5, [r7, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1cfbc:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
   1cfbe:	2701      	movs	r7, #1
   1cfc0:	469e      	mov	lr, r3
    return (NRF_GPIOTE->INTENSET & mask);
   1cfc2:	4d47      	ldr	r5, [pc, #284]	; (1d0e0 <gpiote_event_handler+0x168>)
   1cfc4:	f8df c124 	ldr.w	ip, [pc, #292]	; 1d0ec <gpiote_event_handler+0x174>
   1cfc8:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
   1cfcc:	fa07 f103 	lsl.w	r1, r7, r3
   1cfd0:	4211      	tst	r1, r2
   1cfd2:	d00f      	beq.n	1cff4 <gpiote_event_handler+0x7c>
   1cfd4:	eb03 020c 	add.w	r2, r3, ip
   1cfd8:	0092      	lsls	r2, r2, #2
   1cfda:	6811      	ldr	r1, [r2, #0]
   1cfdc:	2901      	cmp	r1, #1
   1cfde:	d109      	bne.n	1cff4 <gpiote_event_handler+0x7c>
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1cfe0:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   1cfe4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   1cfe8:	f8c2 e000 	str.w	lr, [r2]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1cfec:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1cff0:	4081      	lsls	r1, r0
   1cff2:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1cff4:	3301      	adds	r3, #1
   1cff6:	2b08      	cmp	r3, #8
   1cff8:	d1e6      	bne.n	1cfc8 <gpiote_event_handler+0x50>
	if (fired_triggers[0]) {
   1cffa:	2c00      	cmp	r4, #0
   1cffc:	d041      	beq.n	1d082 <gpiote_event_handler+0x10a>
	struct gpio_nrfx_data *data = get_port_data(port);
   1cffe:	4b37      	ldr	r3, [pc, #220]	; (1d0dc <gpiote_event_handler+0x164>)
   1d000:	f8d3 9008 	ldr.w	r9, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d004:	f8d9 5000 	ldr.w	r5, [r9]
   1d008:	2d00      	cmp	r5, #0
   1d00a:	d03a      	beq.n	1d082 <gpiote_event_handler+0x10a>
			cb->handler(port, cb, pins);
   1d00c:	4698      	mov	r8, r3
	return node->next;
   1d00e:	682f      	ldr	r7, [r5, #0]
			__ASSERT(cb->handler, "No callback handler!");
   1d010:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 1d0f0 <gpiote_event_handler+0x178>
   1d014:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 1d0f4 <gpiote_event_handler+0x17c>
		if ((cb->pin_mask & pins) & data->int_en) {
   1d018:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1d01c:	68aa      	ldr	r2, [r5, #8]
   1d01e:	4023      	ands	r3, r4
   1d020:	4213      	tst	r3, r2
   1d022:	d015      	beq.n	1d050 <gpiote_event_handler+0xd8>
			__ASSERT(cb->handler, "No callback handler!");
   1d024:	686b      	ldr	r3, [r5, #4]
   1d026:	b973      	cbnz	r3, 1d046 <gpiote_event_handler+0xce>
   1d028:	4659      	mov	r1, fp
   1d02a:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
   1d02e:	4652      	mov	r2, sl
   1d030:	482c      	ldr	r0, [pc, #176]	; (1d0e4 <gpiote_event_handler+0x16c>)
   1d032:	f014 fc21 	bl	31878 <printk>
   1d036:	482c      	ldr	r0, [pc, #176]	; (1d0e8 <gpiote_event_handler+0x170>)
   1d038:	f014 fc1e 	bl	31878 <printk>
   1d03c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
   1d040:	4650      	mov	r0, sl
   1d042:	f014 fc26 	bl	31892 <assert_post_action>
			cb->handler(port, cb, pins);
   1d046:	686b      	ldr	r3, [r5, #4]
   1d048:	4622      	mov	r2, r4
   1d04a:	4629      	mov	r1, r5
   1d04c:	4640      	mov	r0, r8
   1d04e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d050:	b1bf      	cbz	r7, 1d082 <gpiote_event_handler+0x10a>
   1d052:	463d      	mov	r5, r7
   1d054:	683f      	ldr	r7, [r7, #0]
   1d056:	e7df      	b.n	1d018 <gpiote_event_handler+0xa0>
		if (level_pins & bit) {
   1d058:	ea15 0f08 	tst.w	r5, r8
   1d05c:	d00a      	beq.n	1d074 <gpiote_event_handler+0xfc>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d05e:	f899 3004 	ldrb.w	r3, [r9, #4]
   1d062:	f00a 001f 	and.w	r0, sl, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1d066:	2100      	movs	r1, #0
   1d068:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1d06c:	f7ff fe1e 	bl	1ccac <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1d070:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   1d074:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   1d078:	ea4f 0848 	mov.w	r8, r8, lsl #1
   1d07c:	e79b      	b.n	1cfb6 <gpiote_event_handler+0x3e>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1d07e:	2400      	movs	r4, #0
   1d080:	e79c      	b.n	1cfbc <gpiote_event_handler+0x44>
	if (port_event) {
   1d082:	2e01      	cmp	r6, #1
   1d084:	d10e      	bne.n	1d0a4 <gpiote_event_handler+0x12c>
	u32_t pin = 0U;
   1d086:	2700      	movs	r7, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   1d088:	4b14      	ldr	r3, [pc, #80]	; (1d0dc <gpiote_event_handler+0x164>)
   1d08a:	689d      	ldr	r5, [r3, #8]
	return port->config->config_info;
   1d08c:	681b      	ldr	r3, [r3, #0]
   1d08e:	f8d3 8008 	ldr.w	r8, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   1d092:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
   1d096:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   1d098:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
   1d09c:	4313      	orrs	r3, r2
   1d09e:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   1d0a2:	b90c      	cbnz	r4, 1d0a8 <gpiote_event_handler+0x130>
}
   1d0a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (level_pins & bit) {
   1d0a8:	4226      	tst	r6, r4
   1d0aa:	d012      	beq.n	1d0d2 <gpiote_event_handler+0x15a>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   1d0ac:	692b      	ldr	r3, [r5, #16]
   1d0ae:	69ea      	ldr	r2, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d0b0:	f898 c004 	ldrb.w	ip, [r8, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   1d0b4:	4053      	eors	r3, r2
   1d0b6:	40fb      	lsrs	r3, r7
		return NRF_GPIO_PIN_SENSE_HIGH;
   1d0b8:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d0bc:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1d0c0:	bf0c      	ite	eq
   1d0c2:	2103      	moveq	r1, #3
   1d0c4:	2102      	movne	r1, #2
   1d0c6:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
   1d0ca:	f7ff fdef 	bl	1ccac <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1d0ce:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1d0d2:	3701      	adds	r7, #1
		bit <<= 1;
   1d0d4:	0076      	lsls	r6, r6, #1
   1d0d6:	e7e4      	b.n	1d0a2 <gpiote_event_handler+0x12a>
   1d0d8:	4003117c 	.word	0x4003117c
   1d0dc:	200290a0 	.word	0x200290a0
   1d0e0:	40031000 	.word	0x40031000
   1d0e4:	00034ff7 	.word	0x00034ff7
   1d0e8:	00035e35 	.word	0x00035e35
   1d0ec:	1000c440 	.word	0x1000c440
   1d0f0:	00035e4c 	.word	0x00035e4c
   1d0f4:	00035e84 	.word	0x00035e84

0001d0f8 <flash_nrf_write_protection>:
}

static int flash_nrf_write_protection(struct device *dev, bool enable)
{
	/* virtual write-erase protection */
	write_protect = enable;
   1d0f8:	4b01      	ldr	r3, [pc, #4]	; (1d100 <flash_nrf_write_protection+0x8>)

	return 0;
}
   1d0fa:	2000      	movs	r0, #0
	write_protect = enable;
   1d0fc:	7019      	strb	r1, [r3, #0]
}
   1d0fe:	4770      	bx	lr
   1d100:	20025b17 	.word	0x20025b17

0001d104 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1d104:	4b02      	ldr	r3, [pc, #8]	; (1d110 <flash_nrf_pages_layout+0xc>)
   1d106:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1d108:	2301      	movs	r3, #1
   1d10a:	6013      	str	r3, [r2, #0]
}
   1d10c:	4770      	bx	lr
   1d10e:	bf00      	nop
   1d110:	200200bc 	.word	0x200200bc

0001d114 <nrf_flash_init>:
#endif
	.write_block_size = 1,
};

static int nrf_flash_init(struct device *dev)
{
   1d114:	b510      	push	{r4, lr}
	z_impl_k_sem_init(sem, initial_count, limit);
   1d116:	2201      	movs	r2, #1
   1d118:	4807      	ldr	r0, [pc, #28]	; (1d138 <nrf_flash_init+0x24>)
   1d11a:	4611      	mov	r1, r2
   1d11c:	f011 f9d4 	bl	2e4c8 <z_impl_k_sem_init>
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
	k_sem_init(&sem_sync, 0, 1);
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1d120:	f015 fa68 	bl	325f4 <nrfx_nvmc_flash_page_count_get>
   1d124:	4c05      	ldr	r4, [pc, #20]	; (1d13c <nrf_flash_init+0x28>)
   1d126:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1d128:	f015 fa61 	bl	325ee <nrfx_nvmc_flash_page_size_get>
#endif
	write_protect = true;
   1d12c:	2201      	movs	r2, #1
   1d12e:	4b04      	ldr	r3, [pc, #16]	; (1d140 <nrf_flash_init+0x2c>)
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1d130:	6060      	str	r0, [r4, #4]
	write_protect = true;
   1d132:	701a      	strb	r2, [r3, #0]

	return 0;
}
   1d134:	2000      	movs	r0, #0
   1d136:	bd10      	pop	{r4, pc}
   1d138:	200200c4 	.word	0x200200c4
   1d13c:	200200bc 	.word	0x200200bc
   1d140:	20025b17 	.word	0x20025b17

0001d144 <flash_nrf_erase>:
{
   1d144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d146:	4616      	mov	r6, r2
   1d148:	460d      	mov	r5, r1
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d14a:	f015 fa50 	bl	325ee <nrfx_nvmc_flash_page_size_get>
	if (write_protect) {
   1d14e:	4b17      	ldr	r3, [pc, #92]	; (1d1ac <flash_nrf_erase+0x68>)
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d150:	4607      	mov	r7, r0
	if (write_protect) {
   1d152:	781b      	ldrb	r3, [r3, #0]
	u32_t n_pages = size / pg_size;
   1d154:	fbb6 f4f0 	udiv	r4, r6, r0
	if (write_protect) {
   1d158:	bb03      	cbnz	r3, 1d19c <flash_nrf_erase+0x58>
	if (is_regular_addr_valid(addr, size)) {
   1d15a:	4631      	mov	r1, r6
   1d15c:	4628      	mov	r0, r5
   1d15e:	f014 fd29 	bl	31bb4 <is_regular_addr_valid>
   1d162:	b1f0      	cbz	r0, 1d1a2 <flash_nrf_erase+0x5e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1d164:	fbb5 f3f7 	udiv	r3, r5, r7
   1d168:	fb07 5313 	mls	r3, r7, r3, r5
   1d16c:	b9cb      	cbnz	r3, 1d1a2 <flash_nrf_erase+0x5e>
   1d16e:	fb07 6714 	mls	r7, r7, r4, r6
   1d172:	b9b7      	cbnz	r7, 1d1a2 <flash_nrf_erase+0x5e>
		if (!n_pages) {
   1d174:	b1c4      	cbz	r4, 1d1a8 <flash_nrf_erase+0x64>
	return z_impl_k_sem_take(sem, timeout);
   1d176:	f04f 31ff 	mov.w	r1, #4294967295
   1d17a:	480d      	ldr	r0, [pc, #52]	; (1d1b0 <flash_nrf_erase+0x6c>)
   1d17c:	f011 fa22 	bl	2e5c4 <z_impl_k_sem_take>

#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

static int erase_op(void *context)
{
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d180:	f015 fa35 	bl	325ee <nrfx_nvmc_flash_page_size_get>
   1d184:	4604      	mov	r4, r0
		return FLASH_OP_DONE;
	}
#endif

	do {
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1d186:	4628      	mov	r0, r5
   1d188:	f00f fd50 	bl	2cc2c <nrfx_nvmc_page_erase>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	} while (e_ctx->len > 0);
   1d18c:	1b36      	subs	r6, r6, r4
   1d18e:	4425      	add	r5, r4
   1d190:	d1f9      	bne.n	1d186 <flash_nrf_erase+0x42>
	z_impl_k_sem_give(sem);
   1d192:	4807      	ldr	r0, [pc, #28]	; (1d1b0 <flash_nrf_erase+0x6c>)
   1d194:	f011 f9ce 	bl	2e534 <z_impl_k_sem_give>
	return ret;
   1d198:	4630      	mov	r0, r6
}
   1d19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EACCES;
   1d19c:	f06f 000c 	mvn.w	r0, #12
   1d1a0:	e7fb      	b.n	1d19a <flash_nrf_erase+0x56>
		return -EINVAL;
   1d1a2:	f06f 0015 	mvn.w	r0, #21
   1d1a6:	e7f8      	b.n	1d19a <flash_nrf_erase+0x56>
			return 0;
   1d1a8:	4620      	mov	r0, r4
   1d1aa:	e7f6      	b.n	1d19a <flash_nrf_erase+0x56>
   1d1ac:	20025b17 	.word	0x20025b17
   1d1b0:	200200c4 	.word	0x200200c4

0001d1b4 <flash_nrf_write>:
{
   1d1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d1b8:	461d      	mov	r5, r3
	if (write_protect) {
   1d1ba:	4b28      	ldr	r3, [pc, #160]	; (1d25c <flash_nrf_write+0xa8>)
{
   1d1bc:	460c      	mov	r4, r1
	if (write_protect) {
   1d1be:	781b      	ldrb	r3, [r3, #0]
{
   1d1c0:	4616      	mov	r6, r2
	if (write_protect) {
   1d1c2:	2b00      	cmp	r3, #0
   1d1c4:	d141      	bne.n	1d24a <flash_nrf_write+0x96>
	return is_regular_addr_valid(addr, len) ||
   1d1c6:	4629      	mov	r1, r5
   1d1c8:	4620      	mov	r0, r4
   1d1ca:	f014 fcf3 	bl	31bb4 <is_regular_addr_valid>
	if (!is_addr_valid(addr, len)) {
   1d1ce:	2800      	cmp	r0, #0
   1d1d0:	d03e      	beq.n	1d250 <flash_nrf_write+0x9c>
	if (!len) {
   1d1d2:	2d00      	cmp	r5, #0
   1d1d4:	d03f      	beq.n	1d256 <flash_nrf_write+0xa2>
	return z_impl_k_sem_take(sem, timeout);
   1d1d6:	f04f 31ff 	mov.w	r1, #4294967295
   1d1da:	4821      	ldr	r0, [pc, #132]	; (1d260 <flash_nrf_write+0xac>)
   1d1dc:	f011 f9f2 	bl	2e5c4 <z_impl_k_sem_take>
		ticks_begin = ticker_ticks_now_get();
	}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	/* If not aligned, write unaligned beginning */
	if (!is_aligned_32(w_ctx->flash_addr)) {
   1d1e0:	f014 0703 	ands.w	r7, r4, #3
   1d1e4:	d00c      	beq.n	1d200 <flash_nrf_write+0x4c>
		count = sizeof(u32_t) - (w_ctx->flash_addr & 0x3);
   1d1e6:	f1c7 0704 	rsb	r7, r7, #4
   1d1ea:	42af      	cmp	r7, r5
   1d1ec:	bf28      	it	cs
   1d1ee:	462f      	movcs	r7, r5
		if (count > w_ctx->len) {
			count = w_ctx->len;
		}

		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
   1d1f0:	4631      	mov	r1, r6
   1d1f2:	4620      	mov	r0, r4
   1d1f4:	463a      	mov	r2, r7
   1d1f6:	f00f fd6b 	bl	2ccd0 <nrfx_nvmc_bytes_write>
	w_ctx->flash_addr += shift;
   1d1fa:	443c      	add	r4, r7
	w_ctx->data_addr += shift;
   1d1fc:	443e      	add	r6, r7
	w_ctx->len -= shift;
   1d1fe:	1bed      	subs	r5, r5, r7
   1d200:	f025 0803 	bic.w	r8, r5, #3
   1d204:	eb04 0708 	add.w	r7, r4, r8
	}

	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(u32_t)) {
		nrfx_nvmc_word_write(w_ctx->flash_addr,
				     UNALIGNED_GET((u32_t *)w_ctx->data_addr));
   1d208:	eba6 0904 	sub.w	r9, r6, r4
   1d20c:	e005      	b.n	1d21a <flash_nrf_write+0x66>
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1d20e:	f859 1004 	ldr.w	r1, [r9, r4]
   1d212:	4620      	mov	r0, r4
   1d214:	f00f fd36 	bl	2cc84 <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   1d218:	3404      	adds	r4, #4
	while (w_ctx->len >= sizeof(u32_t)) {
   1d21a:	42a7      	cmp	r7, r4
   1d21c:	d1f7      	bne.n	1d20e <flash_nrf_write+0x5a>
   1d21e:	f06f 0303 	mvn.w	r3, #3
   1d222:	08aa      	lsrs	r2, r5, #2
   1d224:	fb03 5202 	mla	r2, r3, r2, r5
   1d228:	eb06 0108 	add.w	r1, r6, r8
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	}

	/* Write remaining unaligned data */
	if (w_ctx->len) {
   1d22c:	b112      	cbz	r2, 1d234 <flash_nrf_write+0x80>
		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
   1d22e:	4638      	mov	r0, r7
   1d230:	f00f fd4e 	bl	2ccd0 <nrfx_nvmc_bytes_write>

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1d234:	4a0b      	ldr	r2, [pc, #44]	; (1d264 <flash_nrf_write+0xb0>)
   1d236:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1d23a:	07db      	lsls	r3, r3, #31
   1d23c:	d5fb      	bpl.n	1d236 <flash_nrf_write+0x82>
	z_impl_k_sem_give(sem);
   1d23e:	4808      	ldr	r0, [pc, #32]	; (1d260 <flash_nrf_write+0xac>)
   1d240:	f011 f978 	bl	2e534 <z_impl_k_sem_give>
   1d244:	2000      	movs	r0, #0
}
   1d246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EACCES;
   1d24a:	f06f 000c 	mvn.w	r0, #12
   1d24e:	e7fa      	b.n	1d246 <flash_nrf_write+0x92>
		return -EINVAL;
   1d250:	f06f 0015 	mvn.w	r0, #21
   1d254:	e7f7      	b.n	1d246 <flash_nrf_write+0x92>
		return 0;
   1d256:	4628      	mov	r0, r5
   1d258:	e7f5      	b.n	1d246 <flash_nrf_write+0x92>
   1d25a:	bf00      	nop
   1d25c:	20025b17 	.word	0x20025b17
   1d260:	200200c4 	.word	0x200200c4
   1d264:	40039000 	.word	0x40039000

0001d268 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   1d268:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_hwfc_t hwfc;
#ifdef UARTE_CONFIG_STOP_Two
	bool two_stop_bits = false;
#endif

	switch (cfg->stop_bits) {
   1d26a:	794b      	ldrb	r3, [r1, #5]
   1d26c:	2b01      	cmp	r3, #1
   1d26e:	d029      	beq.n	1d2c4 <uarte_nrfx_configure+0x5c>
   1d270:	2b03      	cmp	r3, #3
   1d272:	d124      	bne.n	1d2be <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		break;
#ifdef UARTE_CONFIG_STOP_Two
	case UART_CFG_STOP_BITS_2:
		two_stop_bits = true;
   1d274:	2601      	movs	r6, #1
#endif
	default:
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1d276:	798b      	ldrb	r3, [r1, #6]
   1d278:	2b03      	cmp	r3, #3
   1d27a:	d120      	bne.n	1d2be <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1d27c:	79cd      	ldrb	r5, [r1, #7]
   1d27e:	b12d      	cbz	r5, 1d28c <uarte_nrfx_configure+0x24>
   1d280:	2d01      	cmp	r5, #1
   1d282:	d11c      	bne.n	1d2be <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
   1d284:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1d286:	689b      	ldr	r3, [r3, #8]
   1d288:	791b      	ldrb	r3, [r3, #4]
   1d28a:	b1c3      	cbz	r3, 1d2be <uarte_nrfx_configure+0x56>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
   1d28c:	790a      	ldrb	r2, [r1, #4]
   1d28e:	b112      	cbz	r2, 1d296 <uarte_nrfx_configure+0x2e>
   1d290:	2a02      	cmp	r2, #2
   1d292:	d114      	bne.n	1d2be <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UARTE_PARITY_INCLUDED;
   1d294:	220e      	movs	r2, #14
	switch (baudrate) {
   1d296:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
   1d29a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1d29c:	689b      	ldr	r3, [r3, #8]
   1d29e:	681c      	ldr	r4, [r3, #0]
	switch (baudrate) {
   1d2a0:	680b      	ldr	r3, [r1, #0]
   1d2a2:	42bb      	cmp	r3, r7
   1d2a4:	d074      	beq.n	1d390 <uarte_nrfx_configure+0x128>
   1d2a6:	d829      	bhi.n	1d2fc <uarte_nrfx_configure+0x94>
   1d2a8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1d2ac:	d06a      	beq.n	1d384 <uarte_nrfx_configure+0x11c>
   1d2ae:	d814      	bhi.n	1d2da <uarte_nrfx_configure+0x72>
   1d2b0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1d2b4:	d04f      	beq.n	1d356 <uarte_nrfx_configure+0xee>
   1d2b6:	d807      	bhi.n	1d2c8 <uarte_nrfx_configure+0x60>
   1d2b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1d2bc:	d07d      	beq.n	1d3ba <uarte_nrfx_configure+0x152>
		return -ENOTSUP;
   1d2be:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d2c2:	e05b      	b.n	1d37c <uarte_nrfx_configure+0x114>
	bool two_stop_bits = false;
   1d2c4:	2600      	movs	r6, #0
   1d2c6:	e7d6      	b.n	1d276 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1d2c8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1d2cc:	d057      	beq.n	1d37e <uarte_nrfx_configure+0x116>
   1d2ce:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1d2d2:	d1f4      	bne.n	1d2be <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1d2d4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1d2d8:	e03f      	b.n	1d35a <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   1d2da:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1d2de:	d053      	beq.n	1d388 <uarte_nrfx_configure+0x120>
   1d2e0:	d804      	bhi.n	1d2ec <uarte_nrfx_configure+0x84>
   1d2e2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1d2e6:	d1ea      	bne.n	1d2be <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1d2e8:	4b35      	ldr	r3, [pc, #212]	; (1d3c0 <uarte_nrfx_configure+0x158>)
   1d2ea:	e036      	b.n	1d35a <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   1d2ec:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1d2f0:	d04c      	beq.n	1d38c <uarte_nrfx_configure+0x124>
   1d2f2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1d2f6:	d1e2      	bne.n	1d2be <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1d2f8:	4b32      	ldr	r3, [pc, #200]	; (1d3c4 <uarte_nrfx_configure+0x15c>)
   1d2fa:	e02e      	b.n	1d35a <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   1d2fc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1d300:	d04f      	beq.n	1d3a2 <uarte_nrfx_configure+0x13a>
   1d302:	d812      	bhi.n	1d32a <uarte_nrfx_configure+0xc2>
   1d304:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1d308:	42bb      	cmp	r3, r7
   1d30a:	d044      	beq.n	1d396 <uarte_nrfx_configure+0x12e>
   1d30c:	d805      	bhi.n	1d31a <uarte_nrfx_configure+0xb2>
   1d30e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1d312:	d1d4      	bne.n	1d2be <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1d314:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1d318:	e01f      	b.n	1d35a <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   1d31a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1d31e:	d03d      	beq.n	1d39c <uarte_nrfx_configure+0x134>
   1d320:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1d324:	d1cb      	bne.n	1d2be <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1d326:	4b28      	ldr	r3, [pc, #160]	; (1d3c8 <uarte_nrfx_configure+0x160>)
   1d328:	e017      	b.n	1d35a <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   1d32a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1d32e:	d03e      	beq.n	1d3ae <uarte_nrfx_configure+0x146>
   1d330:	d808      	bhi.n	1d344 <uarte_nrfx_configure+0xdc>
   1d332:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1d336:	d037      	beq.n	1d3a8 <uarte_nrfx_configure+0x140>
   1d338:	4f24      	ldr	r7, [pc, #144]	; (1d3cc <uarte_nrfx_configure+0x164>)
   1d33a:	42bb      	cmp	r3, r7
   1d33c:	d1bf      	bne.n	1d2be <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1d33e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1d342:	e00a      	b.n	1d35a <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   1d344:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1d348:	d034      	beq.n	1d3b4 <uarte_nrfx_configure+0x14c>
   1d34a:	4f21      	ldr	r7, [pc, #132]	; (1d3d0 <uarte_nrfx_configure+0x168>)
   1d34c:	42bb      	cmp	r3, r7
   1d34e:	d1b6      	bne.n	1d2be <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1d350:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d354:	e001      	b.n	1d35a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00027000;
   1d356:	f44f 331c 	mov.w	r3, #159744	; 0x27000

__STATIC_INLINE void nrf_uarte_configure(NRF_UARTE_Type   * p_reg,
                                         nrf_uarte_parity_t parity,
                                         nrf_uarte_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   1d35a:	432a      	orrs	r2, r5
}

__STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type   * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1d35c:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   1d360:	f8c4 256c 	str.w	r2, [r4, #1388]	; 0x56c
	}

	nrf_uarte_configure(get_uarte_instance(dev), parity, hwfc);

#ifdef UARTE_CONFIG_STOP_Two
	if (two_stop_bits) {
   1d364:	b12e      	cbz	r6, 1d372 <uarte_nrfx_configure+0x10a>
		/* TODO Change this to nrfx HAL function when available */
		get_uarte_instance(dev)->CONFIG |=
   1d366:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
   1d36a:	f043 0310 	orr.w	r3, r3, #16
   1d36e:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
			UARTE_CONFIG_STOP_Two << UARTE_CONFIG_STOP_Pos;
	}
#endif
	get_dev_data(dev)->uart_config = *cfg;
   1d372:	6883      	ldr	r3, [r0, #8]
   1d374:	c903      	ldmia	r1, {r0, r1}
   1d376:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1d37a:	2000      	movs	r0, #0
}
   1d37c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1d37e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1d382:	e7ea      	b.n	1d35a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1d384:	4b13      	ldr	r3, [pc, #76]	; (1d3d4 <uarte_nrfx_configure+0x16c>)
   1d386:	e7e8      	b.n	1d35a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1d388:	4b13      	ldr	r3, [pc, #76]	; (1d3d8 <uarte_nrfx_configure+0x170>)
   1d38a:	e7e6      	b.n	1d35a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1d38c:	4b13      	ldr	r3, [pc, #76]	; (1d3dc <uarte_nrfx_configure+0x174>)
   1d38e:	e7e4      	b.n	1d35a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1d390:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1d394:	e7e1      	b.n	1d35a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1d396:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1d39a:	e7de      	b.n	1d35a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1d39c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1d3a0:	e7db      	b.n	1d35a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1d3a2:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1d3a6:	e7d8      	b.n	1d35a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1d3a8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1d3ac:	e7d5      	b.n	1d35a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1d3ae:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1d3b2:	e7d2      	b.n	1d35a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1d3b4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1d3b8:	e7cf      	b.n	1d35a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00014000;
   1d3ba:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1d3be:	e7cc      	b.n	1d35a <uarte_nrfx_configure+0xf2>
   1d3c0:	00275000 	.word	0x00275000
   1d3c4:	0075c000 	.word	0x0075c000
   1d3c8:	013a9000 	.word	0x013a9000
   1d3cc:	0003d090 	.word	0x0003d090
   1d3d0:	000f4240 	.word	0x000f4240
   1d3d4:	0013b000 	.word	0x0013b000
   1d3d8:	003af000 	.word	0x003af000
   1d3dc:	004ea000 	.word	0x004ea000

0001d3e0 <uarte_0_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_0_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_0_CTS_PIN)
		#define UARTE_0_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(0);
   1d3e0:	b570      	push	{r4, r5, r6, lr}
   1d3e2:	4606      	mov	r6, r0
   1d3e4:	2200      	movs	r2, #0
   1d3e6:	2101      	movs	r1, #1
   1d3e8:	2008      	movs	r0, #8
   1d3ea:	f7fe fbe1 	bl	1bbb0 <z_arm_irq_priority_set>
   1d3ee:	2008      	movs	r0, #8
   1d3f0:	f7fe fbce 	bl	1bb90 <z_arch_irq_enable>
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1d3f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	return dev->config->config_info;
   1d3f8:	6833      	ldr	r3, [r6, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1d3fa:	68b5      	ldr	r5, [r6, #8]
	return config->uarte_regs;
   1d3fc:	689b      	ldr	r3, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1d3fe:	2103      	movs	r1, #3
   1d400:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   1d402:	4b1a      	ldr	r3, [pc, #104]	; (1d46c <uarte_0_init+0x8c>)
    p_reg->PSEL.TXD = pseltxd;
   1d404:	201d      	movs	r0, #29
   1d406:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1d408:	2200      	movs	r2, #0
   1d40a:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
   1d40e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
   1d412:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1d416:	201c      	movs	r0, #28
   1d418:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
   1d41c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   1d420:	6098      	str	r0, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1d422:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
   1d426:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    p_reg->PSEL.RTS = pselrts;
   1d42a:	231b      	movs	r3, #27
   1d42c:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1d430:	231a      	movs	r3, #26
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1d432:	4629      	mov	r1, r5
   1d434:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1d438:	4630      	mov	r0, r6
   1d43a:	f7ff ff15 	bl	1d268 <uarte_nrfx_configure>
	if (err) {
   1d43e:	b9a0      	cbnz	r0, 1d46a <uarte_0_init+0x8a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d440:	2308      	movs	r3, #8
   1d442:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1d446:	f105 030c 	add.w	r3, r5, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d44a:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

__STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                             uint8_t *        p_buffer,
                                             size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d44e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d452:	2301      	movs	r3, #1
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   1d454:	68aa      	ldr	r2, [r5, #8]
   1d456:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d45a:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d45c:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d45e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d462:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d466:	60a3      	str	r3, [r4, #8]
   1d468:	60e3      	str	r3, [r4, #12]
	UART_NRF_UARTE_DEVICE(0);
   1d46a:	bd70      	pop	{r4, r5, r6, pc}
   1d46c:	40842500 	.word	0x40842500

0001d470 <entropy_cc310_rng_get_entropy>:
#include "nrf_cc310_platform_entropy.h"
#endif

static int entropy_cc310_rng_get_entropy(struct device *dev, u8_t *buffer,
					 u16_t length)
{
   1d470:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d472:	460d      	mov	r5, r1
   1d474:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   1d476:	b948      	cbnz	r0, 1d48c <entropy_cc310_rng_get_entropy+0x1c>
   1d478:	4910      	ldr	r1, [pc, #64]	; (1d4bc <entropy_cc310_rng_get_entropy+0x4c>)
   1d47a:	4811      	ldr	r0, [pc, #68]	; (1d4c0 <entropy_cc310_rng_get_entropy+0x50>)
   1d47c:	231e      	movs	r3, #30
   1d47e:	4a11      	ldr	r2, [pc, #68]	; (1d4c4 <entropy_cc310_rng_get_entropy+0x54>)
   1d480:	f014 f9fa 	bl	31878 <printk>
   1d484:	211e      	movs	r1, #30
   1d486:	480f      	ldr	r0, [pc, #60]	; (1d4c4 <entropy_cc310_rng_get_entropy+0x54>)
   1d488:	f014 fa03 	bl	31892 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   1d48c:	b94d      	cbnz	r5, 1d4a2 <entropy_cc310_rng_get_entropy+0x32>
   1d48e:	490e      	ldr	r1, [pc, #56]	; (1d4c8 <entropy_cc310_rng_get_entropy+0x58>)
   1d490:	480b      	ldr	r0, [pc, #44]	; (1d4c0 <entropy_cc310_rng_get_entropy+0x50>)
   1d492:	231f      	movs	r3, #31
   1d494:	4a0b      	ldr	r2, [pc, #44]	; (1d4c4 <entropy_cc310_rng_get_entropy+0x54>)
   1d496:	f014 f9ef 	bl	31878 <printk>
   1d49a:	211f      	movs	r1, #31
   1d49c:	4809      	ldr	r0, [pc, #36]	; (1d4c4 <entropy_cc310_rng_get_entropy+0x54>)
   1d49e:	f014 f9f8 	bl	31892 <assert_post_action>

#if defined(CONFIG_SPM)
	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	res = spm_request_random_number(buffer, length, &olen);
   1d4a2:	aa01      	add	r2, sp, #4
   1d4a4:	4621      	mov	r1, r4
   1d4a6:	4628      	mov	r0, r5
   1d4a8:	f7fa fda2 	bl	17ff0 <spm_request_random_number>
	if (olen != length) {
   1d4ac:	9b01      	ldr	r3, [sp, #4]
   1d4ae:	429c      	cmp	r4, r3
		return -EINVAL;
	}
#endif

	return res;
}
   1d4b0:	bf18      	it	ne
   1d4b2:	f06f 0015 	mvnne.w	r0, #21
   1d4b6:	b003      	add	sp, #12
   1d4b8:	bd30      	pop	{r4, r5, pc}
   1d4ba:	bf00      	nop
   1d4bc:	00035f43 	.word	0x00035f43
   1d4c0:	00034ff7 	.word	0x00034ff7
   1d4c4:	00035f07 	.word	0x00035f07
   1d4c8:	00035f56 	.word	0x00035f56

0001d4cc <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   1d4cc:	2200      	movs	r2, #0
{
   1d4ce:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   1d4d0:	4611      	mov	r1, r2
   1d4d2:	202a      	movs	r0, #42	; 0x2a
   1d4d4:	f7fe fb6c 	bl	1bbb0 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
   1d4d8:	f002 f8f6 	bl	1f6c8 <bsd_init>
   1d4dc:	4b01      	ldr	r3, [pc, #4]	; (1d4e4 <_bsdlib_init+0x18>)
   1d4de:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   1d4e0:	2000      	movs	r0, #0
   1d4e2:	bd08      	pop	{r3, pc}
   1d4e4:	200200dc 	.word	0x200200dc

0001d4e8 <thread_monitor_entry_get>:
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   1d4e8:	2200      	movs	r2, #0
   1d4ea:	4b0e      	ldr	r3, [pc, #56]	; (1d524 <thread_monitor_entry_get+0x3c>)
{
   1d4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
		entry_age = rpc_event_cnt - entry->cnt;
   1d4ee:	681c      	ldr	r4, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   1d4f0:	4b0d      	ldr	r3, [pc, #52]	; (1d528 <thread_monitor_entry_get+0x40>)
	int entry_age, oldest_entry_age = 0;
   1d4f2:	4616      	mov	r6, r2
   1d4f4:	461f      	mov	r7, r3
		if (entry->id == id) {
   1d4f6:	58bd      	ldr	r5, [r7, r2]
   1d4f8:	18b9      	adds	r1, r7, r2
   1d4fa:	4285      	cmp	r5, r0
   1d4fc:	d00d      	beq.n	1d51a <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   1d4fe:	b175      	cbz	r5, 1d51e <thread_monitor_entry_get+0x36>
		entry_age = rpc_event_cnt - entry->cnt;
   1d500:	684d      	ldr	r5, [r1, #4]
   1d502:	3208      	adds	r2, #8
   1d504:	1b65      	subs	r5, r4, r5
		if (entry_age > oldest_entry_age) {
   1d506:	42b5      	cmp	r5, r6
   1d508:	bfc4      	itt	gt
   1d50a:	462e      	movgt	r6, r5
   1d50c:	460b      	movgt	r3, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1d50e:	2a50      	cmp	r2, #80	; 0x50
   1d510:	d1f1      	bne.n	1d4f6 <thread_monitor_entry_get+0xe>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   1d512:	4619      	mov	r1, r3
	new_entry->cnt = rpc_event_cnt - 1;
   1d514:	3c01      	subs	r4, #1
	new_entry->id = id;
   1d516:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   1d518:	605c      	str	r4, [r3, #4]
}
   1d51a:	4608      	mov	r0, r1
   1d51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d51e:	460b      	mov	r3, r1
   1d520:	e7f7      	b.n	1d512 <thread_monitor_entry_get+0x2a>
   1d522:	bf00      	nop
   1d524:	200200e0 	.word	0x200200e0
   1d528:	200200ec 	.word	0x200200ec

0001d52c <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1d52c:	4668      	mov	r0, sp
   1d52e:	f020 0107 	bic.w	r1, r0, #7
   1d532:	468d      	mov	sp, r1
   1d534:	b519      	push	{r0, r3, r4, lr}
   1d536:	f014 fa68 	bl	31a0a <z_arch_isr_direct_header>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1d53a:	4b0d      	ldr	r3, [pc, #52]	; (1d570 <rpc_proxy_irq_handler+0x44>)
   1d53c:	e8d3 2fef 	ldaex	r2, [r3]
   1d540:	3201      	adds	r2, #1
   1d542:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d546:	2900      	cmp	r1, #0
   1d548:	d1f8      	bne.n	1d53c <rpc_proxy_irq_handler+0x10>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   1d54a:	f00b ffaf 	bl	294ac <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1d54e:	4b09      	ldr	r3, [pc, #36]	; (1d574 <rpc_proxy_irq_handler+0x48>)
   1d550:	681c      	ldr	r4, [r3, #0]
   1d552:	b124      	cbz	r4, 1d55e <rpc_proxy_irq_handler+0x32>
   1d554:	1d20      	adds	r0, r4, #4
   1d556:	f010 ffed 	bl	2e534 <z_impl_k_sem_give>
   1d55a:	6824      	ldr	r4, [r4, #0]
   1d55c:	e7f9      	b.n	1d552 <rpc_proxy_irq_handler+0x26>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1d55e:	f7fe fb59 	bl	1bc14 <_arch_isr_direct_pm>

#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1d562:	f7fe fa39 	bl	1b9d8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1d566:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   1d56a:	4685      	mov	sp, r0
   1d56c:	4770      	bx	lr
   1d56e:	bf00      	nop
   1d570:	200200e0 	.word	0x200200e0
   1d574:	200200e4 	.word	0x200200e4

0001d578 <bsd_os_timedwait>:
{
   1d578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d57c:	460d      	mov	r5, r1
   1d57e:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   1d580:	f015 f916 	bl	327b0 <z_impl_k_uptime_get>
	if (*timeout == 0) {
   1d584:	682b      	ldr	r3, [r5, #0]
   1d586:	4606      	mov	r6, r0
   1d588:	2b00      	cmp	r3, #0
   1d58a:	460f      	mov	r7, r1
   1d58c:	d103      	bne.n	1d596 <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   1d58e:	f010 fee3 	bl	2e358 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   1d592:	203c      	movs	r0, #60	; 0x3c
   1d594:	e06a      	b.n	1d66c <bsd_os_timedwait+0xf4>
		*timeout = K_FOREVER;
   1d596:	bfbc      	itt	lt
   1d598:	f04f 33ff 	movlt.w	r3, #4294967295
   1d59c:	602b      	strlt	r3, [r5, #0]
	z_impl_k_sem_init(sem, initial_count, limit);
   1d59e:	2201      	movs	r2, #1
   1d5a0:	2100      	movs	r1, #0
   1d5a2:	a802      	add	r0, sp, #8
   1d5a4:	f010 ff90 	bl	2e4c8 <z_impl_k_sem_init>
   1d5a8:	f10d 0804 	add.w	r8, sp, #4
   1d5ac:	f04f 0320 	mov.w	r3, #32
   1d5b0:	f3ef 8911 	mrs	r9, BASEPRI
   1d5b4:	f383 8811 	msr	BASEPRI, r3
   1d5b8:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1d5bc:	f010 ff7e 	bl	2e4bc <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1d5c0:	f7ff ff92 	bl	1d4e8 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   1d5c4:	4c32      	ldr	r4, [pc, #200]	; (1d690 <bsd_os_timedwait+0x118>)
   1d5c6:	6843      	ldr	r3, [r0, #4]
   1d5c8:	6822      	ldr	r2, [r4, #0]
   1d5ca:	4293      	cmp	r3, r2
   1d5cc:	f04f 0300 	mov.w	r3, #0
   1d5d0:	d108      	bne.n	1d5e4 <bsd_os_timedwait+0x6c>
	parent->next = child;
   1d5d2:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   1d5d4:	4b2f      	ldr	r3, [pc, #188]	; (1d694 <bsd_os_timedwait+0x11c>)
   1d5d6:	685a      	ldr	r2, [r3, #4]
   1d5d8:	2a00      	cmp	r2, #0
   1d5da:	d14a      	bne.n	1d672 <bsd_os_timedwait+0xfa>
	list->head = node;
   1d5dc:	e9c3 8800 	strd	r8, r8, [r3]
		allow_to_sleep = true;
   1d5e0:	2301      	movs	r3, #1
   1d5e2:	e000      	b.n	1d5e6 <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   1d5e4:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   1d5e6:	f389 8811 	msr	BASEPRI, r9
   1d5ea:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   1d5ee:	2b00      	cmp	r3, #0
   1d5f0:	d03b      	beq.n	1d66a <bsd_os_timedwait+0xf2>
	(void)k_sem_take(&thread.sem, *timeout);
   1d5f2:	6829      	ldr	r1, [r5, #0]
	return z_impl_k_sem_take(sem, timeout);
   1d5f4:	a802      	add	r0, sp, #8
   1d5f6:	f010 ffe5 	bl	2e5c4 <z_impl_k_sem_take>
	__asm__ volatile(
   1d5fa:	f04f 0320 	mov.w	r3, #32
   1d5fe:	f3ef 8911 	mrs	r9, BASEPRI
   1d602:	f383 8811 	msr	BASEPRI, r3
   1d606:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d60a:	2100      	movs	r1, #0
   1d60c:	4b21      	ldr	r3, [pc, #132]	; (1d694 <bsd_os_timedwait+0x11c>)
   1d60e:	681a      	ldr	r2, [r3, #0]
   1d610:	b15a      	cbz	r2, 1d62a <bsd_os_timedwait+0xb2>
   1d612:	4542      	cmp	r2, r8
   1d614:	d138      	bne.n	1d688 <bsd_os_timedwait+0x110>
   1d616:	9801      	ldr	r0, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d618:	2900      	cmp	r1, #0
   1d61a:	d12f      	bne.n	1d67c <bsd_os_timedwait+0x104>
   1d61c:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   1d61e:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d620:	4291      	cmp	r1, r2
   1d622:	d100      	bne.n	1d626 <bsd_os_timedwait+0xae>
	list->tail = node;
   1d624:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1d626:	2300      	movs	r3, #0
   1d628:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   1d62a:	f010 ff47 	bl	2e4bc <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1d62e:	f7ff ff5b 	bl	1d4e8 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   1d632:	6823      	ldr	r3, [r4, #0]
   1d634:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1d636:	f389 8811 	msr	BASEPRI, r9
   1d63a:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   1d63e:	682c      	ldr	r4, [r5, #0]
   1d640:	1c63      	adds	r3, r4, #1
   1d642:	d012      	beq.n	1d66a <bsd_os_timedwait+0xf2>
	return z_impl_k_uptime_get();
   1d644:	f015 f8b4 	bl	327b0 <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   1d648:	1b86      	subs	r6, r0, r6
   1d64a:	eb61 0707 	sbc.w	r7, r1, r7
   1d64e:	17e3      	asrs	r3, r4, #31
   1d650:	1ba2      	subs	r2, r4, r6
   1d652:	eb63 0307 	sbc.w	r3, r3, r7
   1d656:	4619      	mov	r1, r3
	*timeout = remaining > 0 ? remaining : 0;
   1d658:	2a00      	cmp	r2, #0
   1d65a:	f171 0300 	sbcs.w	r3, r1, #0
	remaining = *timeout - (k_uptime_get() - start);
   1d65e:	4610      	mov	r0, r2
	*timeout = remaining > 0 ? remaining : 0;
   1d660:	bfb8      	it	lt
   1d662:	2000      	movlt	r0, #0
   1d664:	6028      	str	r0, [r5, #0]
	if (*timeout == 0) {
   1d666:	2800      	cmp	r0, #0
   1d668:	d093      	beq.n	1d592 <bsd_os_timedwait+0x1a>
	return 0;
   1d66a:	2000      	movs	r0, #0
}
   1d66c:	b009      	add	sp, #36	; 0x24
   1d66e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d672:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   1d676:	f8c3 8004 	str.w	r8, [r3, #4]
   1d67a:	e7b1      	b.n	1d5e0 <bsd_os_timedwait+0x68>
	parent->next = child;
   1d67c:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d67e:	6858      	ldr	r0, [r3, #4]
   1d680:	4290      	cmp	r0, r2
	list->tail = node;
   1d682:	bf08      	it	eq
   1d684:	6059      	streq	r1, [r3, #4]
   1d686:	e7ce      	b.n	1d626 <bsd_os_timedwait+0xae>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d688:	4611      	mov	r1, r2
   1d68a:	6812      	ldr	r2, [r2, #0]
   1d68c:	e7c0      	b.n	1d610 <bsd_os_timedwait+0x98>
   1d68e:	bf00      	nop
   1d690:	200200e0 	.word	0x200200e0
   1d694:	200200e4 	.word	0x200200e4

0001d698 <bsd_os_errno_set>:
	switch (err_code) {
   1d698:	282d      	cmp	r0, #45	; 0x2d
{
   1d69a:	b510      	push	{r4, lr}
   1d69c:	4604      	mov	r4, r0
	switch (err_code) {
   1d69e:	f000 809b 	beq.w	1d7d8 <bsd_os_errno_set+0x140>
   1d6a2:	dc4a      	bgt.n	1d73a <bsd_os_errno_set+0xa2>
   1d6a4:	280e      	cmp	r0, #14
   1d6a6:	d009      	beq.n	1d6bc <bsd_os_errno_set+0x24>
   1d6a8:	dc11      	bgt.n	1d6ce <bsd_os_errno_set+0x36>
   1d6aa:	2808      	cmp	r0, #8
   1d6ac:	d006      	beq.n	1d6bc <bsd_os_errno_set+0x24>
   1d6ae:	dc09      	bgt.n	1d6c4 <bsd_os_errno_set+0x2c>
   1d6b0:	2802      	cmp	r0, #2
   1d6b2:	d003      	beq.n	1d6bc <bsd_os_errno_set+0x24>
   1d6b4:	2805      	cmp	r0, #5
   1d6b6:	d001      	beq.n	1d6bc <bsd_os_errno_set+0x24>
   1d6b8:	2801      	cmp	r0, #1
   1d6ba:	d119      	bne.n	1d6f0 <bsd_os_errno_set+0x58>
		errno = ENOBUFS;
   1d6bc:	f014 f9f5 	bl	31aaa <__errno>
   1d6c0:	6004      	str	r4, [r0, #0]
}
   1d6c2:	bd10      	pop	{r4, pc}
	switch (err_code) {
   1d6c4:	280c      	cmp	r0, #12
   1d6c6:	d0f9      	beq.n	1d6bc <bsd_os_errno_set+0x24>
   1d6c8:	dc6d      	bgt.n	1d7a6 <bsd_os_errno_set+0x10e>
   1d6ca:	2809      	cmp	r0, #9
   1d6cc:	e7f5      	b.n	1d6ba <bsd_os_errno_set+0x22>
   1d6ce:	2828      	cmp	r0, #40	; 0x28
   1d6d0:	f000 80b9 	beq.w	1d846 <bsd_os_errno_set+0x1ae>
   1d6d4:	dc05      	bgt.n	1d6e2 <bsd_os_errno_set+0x4a>
   1d6d6:	2818      	cmp	r0, #24
   1d6d8:	d0f0      	beq.n	1d6bc <bsd_os_errno_set+0x24>
   1d6da:	2823      	cmp	r0, #35	; 0x23
   1d6dc:	d068      	beq.n	1d7b0 <bsd_os_errno_set+0x118>
   1d6de:	2816      	cmp	r0, #22
   1d6e0:	e7eb      	b.n	1d6ba <bsd_os_errno_set+0x22>
   1d6e2:	282a      	cmp	r0, #42	; 0x2a
   1d6e4:	d06c      	beq.n	1d7c0 <bsd_os_errno_set+0x128>
   1d6e6:	db67      	blt.n	1d7b8 <bsd_os_errno_set+0x120>
   1d6e8:	282b      	cmp	r0, #43	; 0x2b
   1d6ea:	d06d      	beq.n	1d7c8 <bsd_os_errno_set+0x130>
   1d6ec:	282c      	cmp	r0, #44	; 0x2c
   1d6ee:	d06f      	beq.n	1d7d0 <bsd_os_errno_set+0x138>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
   1d6f0:	f44f 73a2 	mov.w	r3, #324	; 0x144
   1d6f4:	4a56      	ldr	r2, [pc, #344]	; (1d850 <bsd_os_errno_set+0x1b8>)
   1d6f6:	4957      	ldr	r1, [pc, #348]	; (1d854 <bsd_os_errno_set+0x1bc>)
   1d6f8:	4857      	ldr	r0, [pc, #348]	; (1d858 <bsd_os_errno_set+0x1c0>)
   1d6fa:	f014 f8bd 	bl	31878 <printk>
   1d6fe:	4621      	mov	r1, r4
   1d700:	4856      	ldr	r0, [pc, #344]	; (1d85c <bsd_os_errno_set+0x1c4>)
   1d702:	f014 f8b9 	bl	31878 <printk>
   1d706:	f44f 71a2 	mov.w	r1, #324	; 0x144
   1d70a:	4851      	ldr	r0, [pc, #324]	; (1d850 <bsd_os_errno_set+0x1b8>)
   1d70c:	f014 f8c1 	bl	31892 <assert_post_action>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   1d710:	2301      	movs	r3, #1
   1d712:	f04f 0000 	mov.w	r0, #0
   1d716:	4a52      	ldr	r2, [pc, #328]	; (1d860 <bsd_os_errno_set+0x1c8>)
   1d718:	f363 0002 	bfi	r0, r3, #0, #3
   1d71c:	4b51      	ldr	r3, [pc, #324]	; (1d864 <bsd_os_errno_set+0x1cc>)
   1d71e:	f36f 00c5 	bfc	r0, #3, #3
   1d722:	1a9b      	subs	r3, r3, r2
   1d724:	08db      	lsrs	r3, r3, #3
   1d726:	f363 108f 	bfi	r0, r3, #6, #10
   1d72a:	4622      	mov	r2, r4
   1d72c:	494e      	ldr	r1, [pc, #312]	; (1d868 <bsd_os_errno_set+0x1d0>)
   1d72e:	f014 f8c0 	bl	318b2 <log_string_sync>
		errno = 0xBAADBAAD;
   1d732:	f014 f9ba 	bl	31aaa <__errno>
   1d736:	4b4d      	ldr	r3, [pc, #308]	; (1d86c <bsd_os_errno_set+0x1d4>)
   1d738:	e038      	b.n	1d7ac <bsd_os_errno_set+0x114>
	switch (err_code) {
   1d73a:	283c      	cmp	r0, #60	; 0x3c
   1d73c:	d064      	beq.n	1d808 <bsd_os_errno_set+0x170>
   1d73e:	dc1d      	bgt.n	1d77c <bsd_os_errno_set+0xe4>
   1d740:	2833      	cmp	r0, #51	; 0x33
   1d742:	d055      	beq.n	1d7f0 <bsd_os_errno_set+0x158>
   1d744:	dc09      	bgt.n	1d75a <bsd_os_errno_set+0xc2>
   1d746:	2830      	cmp	r0, #48	; 0x30
   1d748:	d04a      	beq.n	1d7e0 <bsd_os_errno_set+0x148>
   1d74a:	2832      	cmp	r0, #50	; 0x32
   1d74c:	d04c      	beq.n	1d7e8 <bsd_os_errno_set+0x150>
   1d74e:	282f      	cmp	r0, #47	; 0x2f
   1d750:	d1ce      	bne.n	1d6f0 <bsd_os_errno_set+0x58>
		errno = EAFNOSUPPORT;
   1d752:	f014 f9aa 	bl	31aaa <__errno>
   1d756:	236a      	movs	r3, #106	; 0x6a
   1d758:	e028      	b.n	1d7ac <bsd_os_errno_set+0x114>
	switch (err_code) {
   1d75a:	2836      	cmp	r0, #54	; 0x36
   1d75c:	d04c      	beq.n	1d7f8 <bsd_os_errno_set+0x160>
   1d75e:	dc05      	bgt.n	1d76c <bsd_os_errno_set+0xd4>
   1d760:	2834      	cmp	r0, #52	; 0x34
   1d762:	d1c5      	bne.n	1d6f0 <bsd_os_errno_set+0x58>
		errno = ENETRESET;
   1d764:	f014 f9a1 	bl	31aaa <__errno>
   1d768:	237e      	movs	r3, #126	; 0x7e
   1d76a:	e01f      	b.n	1d7ac <bsd_os_errno_set+0x114>
	switch (err_code) {
   1d76c:	2838      	cmp	r0, #56	; 0x38
   1d76e:	d047      	beq.n	1d800 <bsd_os_errno_set+0x168>
   1d770:	2839      	cmp	r0, #57	; 0x39
   1d772:	d1bd      	bne.n	1d6f0 <bsd_os_errno_set+0x58>
		errno = ENOTCONN;
   1d774:	f014 f999 	bl	31aaa <__errno>
   1d778:	2380      	movs	r3, #128	; 0x80
   1d77a:	e017      	b.n	1d7ac <bsd_os_errno_set+0x114>
	switch (err_code) {
   1d77c:	287d      	cmp	r0, #125	; 0x7d
   1d77e:	d04f      	beq.n	1d820 <bsd_os_errno_set+0x188>
   1d780:	dc05      	bgt.n	1d78e <bsd_os_errno_set+0xf6>
   1d782:	2870      	cmp	r0, #112	; 0x70
   1d784:	d044      	beq.n	1d810 <bsd_os_errno_set+0x178>
   1d786:	2873      	cmp	r0, #115	; 0x73
   1d788:	d046      	beq.n	1d818 <bsd_os_errno_set+0x180>
   1d78a:	2869      	cmp	r0, #105	; 0x69
   1d78c:	e795      	b.n	1d6ba <bsd_os_errno_set+0x22>
   1d78e:	287f      	cmp	r0, #127	; 0x7f
   1d790:	d04f      	beq.n	1d832 <bsd_os_errno_set+0x19a>
   1d792:	db49      	blt.n	1d828 <bsd_os_errno_set+0x190>
   1d794:	2880      	cmp	r0, #128	; 0x80
   1d796:	d051      	beq.n	1d83c <bsd_os_errno_set+0x1a4>
   1d798:	2881      	cmp	r0, #129	; 0x81
   1d79a:	d1a9      	bne.n	1d6f0 <bsd_os_errno_set+0x58>
		errno = EKEYREJECTED;
   1d79c:	f014 f985 	bl	31aaa <__errno>
   1d7a0:	f240 73d4 	movw	r3, #2004	; 0x7d4
   1d7a4:	e002      	b.n	1d7ac <bsd_os_errno_set+0x114>
		errno = EACCES;
   1d7a6:	f014 f980 	bl	31aaa <__errno>
   1d7aa:	230d      	movs	r3, #13
		errno = 0xBAADBAAD;
   1d7ac:	6003      	str	r3, [r0, #0]
}
   1d7ae:	e788      	b.n	1d6c2 <bsd_os_errno_set+0x2a>
		errno = EAGAIN;
   1d7b0:	f014 f97b 	bl	31aaa <__errno>
   1d7b4:	230b      	movs	r3, #11
   1d7b6:	e7f9      	b.n	1d7ac <bsd_os_errno_set+0x114>
		errno = EPROTOTYPE;
   1d7b8:	f014 f977 	bl	31aaa <__errno>
   1d7bc:	236b      	movs	r3, #107	; 0x6b
   1d7be:	e7f5      	b.n	1d7ac <bsd_os_errno_set+0x114>
		errno = ENOPROTOOPT;
   1d7c0:	f014 f973 	bl	31aaa <__errno>
   1d7c4:	236d      	movs	r3, #109	; 0x6d
   1d7c6:	e7f1      	b.n	1d7ac <bsd_os_errno_set+0x114>
		errno = EPROTONOSUPPORT;
   1d7c8:	f014 f96f 	bl	31aaa <__errno>
   1d7cc:	237b      	movs	r3, #123	; 0x7b
   1d7ce:	e7ed      	b.n	1d7ac <bsd_os_errno_set+0x114>
		errno = ESOCKTNOSUPPORT;
   1d7d0:	f014 f96b 	bl	31aaa <__errno>
   1d7d4:	237c      	movs	r3, #124	; 0x7c
   1d7d6:	e7e9      	b.n	1d7ac <bsd_os_errno_set+0x114>
		errno = EOPNOTSUPP;
   1d7d8:	f014 f967 	bl	31aaa <__errno>
   1d7dc:	235f      	movs	r3, #95	; 0x5f
   1d7de:	e7e5      	b.n	1d7ac <bsd_os_errno_set+0x114>
		errno = EADDRINUSE;
   1d7e0:	f014 f963 	bl	31aaa <__errno>
   1d7e4:	2370      	movs	r3, #112	; 0x70
   1d7e6:	e7e1      	b.n	1d7ac <bsd_os_errno_set+0x114>
		errno = ENETDOWN;
   1d7e8:	f014 f95f 	bl	31aaa <__errno>
   1d7ec:	2373      	movs	r3, #115	; 0x73
   1d7ee:	e7dd      	b.n	1d7ac <bsd_os_errno_set+0x114>
		errno = ENETUNREACH;
   1d7f0:	f014 f95b 	bl	31aaa <__errno>
   1d7f4:	2372      	movs	r3, #114	; 0x72
   1d7f6:	e7d9      	b.n	1d7ac <bsd_os_errno_set+0x114>
		errno = ECONNRESET;
   1d7f8:	f014 f957 	bl	31aaa <__errno>
   1d7fc:	2368      	movs	r3, #104	; 0x68
   1d7fe:	e7d5      	b.n	1d7ac <bsd_os_errno_set+0x114>
		errno = EISCONN;
   1d800:	f014 f953 	bl	31aaa <__errno>
   1d804:	237f      	movs	r3, #127	; 0x7f
   1d806:	e7d1      	b.n	1d7ac <bsd_os_errno_set+0x114>
		errno = ETIMEDOUT;
   1d808:	f014 f94f 	bl	31aaa <__errno>
   1d80c:	2374      	movs	r3, #116	; 0x74
   1d80e:	e7cd      	b.n	1d7ac <bsd_os_errno_set+0x114>
		errno = EHOSTDOWN;
   1d810:	f014 f94b 	bl	31aaa <__errno>
   1d814:	2375      	movs	r3, #117	; 0x75
   1d816:	e7c9      	b.n	1d7ac <bsd_os_errno_set+0x114>
		errno = EINPROGRESS;
   1d818:	f014 f947 	bl	31aaa <__errno>
   1d81c:	2377      	movs	r3, #119	; 0x77
   1d81e:	e7c5      	b.n	1d7ac <bsd_os_errno_set+0x114>
		errno = ECANCELED;
   1d820:	f014 f943 	bl	31aaa <__errno>
   1d824:	238c      	movs	r3, #140	; 0x8c
   1d826:	e7c1      	b.n	1d7ac <bsd_os_errno_set+0x114>
		errno = ENOKEY;
   1d828:	f014 f93f 	bl	31aaa <__errno>
   1d82c:	f240 73d1 	movw	r3, #2001	; 0x7d1
   1d830:	e7bc      	b.n	1d7ac <bsd_os_errno_set+0x114>
		errno = EKEYEXPIRED;
   1d832:	f014 f93a 	bl	31aaa <__errno>
   1d836:	f240 73d2 	movw	r3, #2002	; 0x7d2
   1d83a:	e7b7      	b.n	1d7ac <bsd_os_errno_set+0x114>
		errno = EKEYREVOKED;
   1d83c:	f014 f935 	bl	31aaa <__errno>
   1d840:	f240 73d3 	movw	r3, #2003	; 0x7d3
   1d844:	e7b2      	b.n	1d7ac <bsd_os_errno_set+0x114>
		errno = EMSGSIZE;
   1d846:	f014 f930 	bl	31aaa <__errno>
   1d84a:	237a      	movs	r3, #122	; 0x7a
   1d84c:	e7ae      	b.n	1d7ac <bsd_os_errno_set+0x114>
   1d84e:	bf00      	nop
   1d850:	00035f76 	.word	0x00035f76
   1d854:	0003686f 	.word	0x0003686f
   1d858:	00034ff7 	.word	0x00034ff7
   1d85c:	00035fa6 	.word	0x00035fa6
   1d860:	00033914 	.word	0x00033914
   1d864:	00033924 	.word	0x00033924
   1d868:	00035fcd 	.word	0x00035fcd
   1d86c:	baadbaad 	.word	0xbaadbaad

0001d870 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d874:	4b01      	ldr	r3, [pc, #4]	; (1d87c <bsd_os_application_irq_set+0xc>)
   1d876:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1d87a:	4770      	bx	lr
   1d87c:	e000e100 	.word	0xe000e100

0001d880 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d884:	4b01      	ldr	r3, [pc, #4]	; (1d88c <bsd_os_application_irq_clear+0xc>)
   1d886:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1d88a:	4770      	bx	lr
   1d88c:	e000e100 	.word	0xe000e100

0001d890 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d890:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1d894:	4b01      	ldr	r3, [pc, #4]	; (1d89c <bsd_os_trace_irq_set+0xc>)
   1d896:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1d89a:	4770      	bx	lr
   1d89c:	e000e100 	.word	0xe000e100

0001d8a0 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d8a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1d8a4:	4b01      	ldr	r3, [pc, #4]	; (1d8ac <bsd_os_trace_irq_clear+0xc>)
   1d8a6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1d8aa:	4770      	bx	lr
   1d8ac:	e000e100 	.word	0xe000e100

0001d8b0 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   1d8b0:	b508      	push	{r3, lr}
	list->head = NULL;
   1d8b2:	2300      	movs	r3, #0
   1d8b4:	4a07      	ldr	r2, [pc, #28]	; (1d8d4 <bsd_os_init+0x24>)
	list->tail = NULL;
   1d8b6:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d8ba:	4a07      	ldr	r2, [pc, #28]	; (1d8d8 <bsd_os_init+0x28>)
   1d8bc:	e8d2 1fef 	ldaex	r1, [r2]
   1d8c0:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1d8c4:	2800      	cmp	r0, #0
   1d8c6:	d1f9      	bne.n	1d8bc <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   1d8c8:	f014 fabf 	bl	31e4a <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   1d8cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   1d8d0:	f014 bab0 	b.w	31e34 <trace_task_create>
   1d8d4:	200200e4 	.word	0x200200e4
   1d8d8:	200200e0 	.word	0x200200e0

0001d8dc <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   1d8dc:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   1d8e0:	d03c      	beq.n	1d95c <z_to_nrf_optname+0x80>
   1d8e2:	dc04      	bgt.n	1d8ee <z_to_nrf_optname+0x12>
   1d8e4:	2801      	cmp	r0, #1
   1d8e6:	d047      	beq.n	1d978 <z_to_nrf_optname+0x9c>
			break;
		}
		break;

	default:
		retval = -1;
   1d8e8:	f04f 30ff 	mov.w	r0, #4294967295
		break;
	}

	return retval;
}
   1d8ec:	4770      	bx	lr
	switch (z_in_level) {
   1d8ee:	f240 2302 	movw	r3, #514	; 0x202
   1d8f2:	4298      	cmp	r0, r3
   1d8f4:	d052      	beq.n	1d99c <z_to_nrf_optname+0xc0>
   1d8f6:	f240 2303 	movw	r3, #515	; 0x203
   1d8fa:	4298      	cmp	r0, r3
   1d8fc:	d1f4      	bne.n	1d8e8 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   1d8fe:	3901      	subs	r1, #1
   1d900:	2913      	cmp	r1, #19
   1d902:	d8f1      	bhi.n	1d8e8 <z_to_nrf_optname+0xc>
   1d904:	a301      	add	r3, pc, #4	; (adr r3, 1d90c <z_to_nrf_optname+0x30>)
   1d906:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   1d90a:	bf00      	nop
   1d90c:	0001d9a9 	.word	0x0001d9a9
   1d910:	0001d96d 	.word	0x0001d96d
   1d914:	0001d991 	.word	0x0001d991
   1d918:	0001d985 	.word	0x0001d985
   1d91c:	0001d975 	.word	0x0001d975
   1d920:	0001d995 	.word	0x0001d995
   1d924:	0001d999 	.word	0x0001d999
   1d928:	0001d8e9 	.word	0x0001d8e9
   1d92c:	0001d8e9 	.word	0x0001d8e9
   1d930:	0001d8e9 	.word	0x0001d8e9
   1d934:	0001d8e9 	.word	0x0001d8e9
   1d938:	0001d8e9 	.word	0x0001d8e9
   1d93c:	0001d8e9 	.word	0x0001d8e9
   1d940:	0001d8e9 	.word	0x0001d8e9
   1d944:	0001d8e9 	.word	0x0001d8e9
   1d948:	0001d8e9 	.word	0x0001d8e9
   1d94c:	0001d8e9 	.word	0x0001d8e9
   1d950:	0001d8e9 	.word	0x0001d8e9
   1d954:	0001d8e9 	.word	0x0001d8e9
   1d958:	0001d989 	.word	0x0001d989
		switch (z_in_optname) {
   1d95c:	3901      	subs	r1, #1
   1d95e:	2905      	cmp	r1, #5
   1d960:	d8c2      	bhi.n	1d8e8 <z_to_nrf_optname+0xc>
   1d962:	e8df f001 	tbb	[pc, r1]
   1d966:	0703      	.short	0x0703
   1d968:	210f1917 	.word	0x210f1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   1d96c:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_HOSTNAME;
   1d96e:	6013      	str	r3, [r2, #0]
	int retval = 0;
   1d970:	2000      	movs	r0, #0
			break;
   1d972:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_HOSTNAME;
   1d974:	2305      	movs	r3, #5
   1d976:	e7fa      	b.n	1d96e <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   1d978:	2914      	cmp	r1, #20
   1d97a:	d005      	beq.n	1d988 <z_to_nrf_optname+0xac>
   1d97c:	2919      	cmp	r1, #25
   1d97e:	d005      	beq.n	1d98c <z_to_nrf_optname+0xb0>
   1d980:	2904      	cmp	r1, #4
   1d982:	d1b1      	bne.n	1d8e8 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   1d984:	2304      	movs	r3, #4
   1d986:	e7f2      	b.n	1d96e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   1d988:	2314      	movs	r3, #20
   1d98a:	e7f0      	b.n	1d96e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   1d98c:	6011      	str	r1, [r2, #0]
   1d98e:	e7ef      	b.n	1d970 <z_to_nrf_optname+0x94>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   1d990:	2303      	movs	r3, #3
   1d992:	e7ec      	b.n	1d96e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   1d994:	2306      	movs	r3, #6
   1d996:	e7ea      	b.n	1d96e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   1d998:	2307      	movs	r3, #7
   1d99a:	e7e8      	b.n	1d96e <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   1d99c:	2902      	cmp	r1, #2
   1d99e:	d0e5      	beq.n	1d96c <z_to_nrf_optname+0x90>
   1d9a0:	2903      	cmp	r1, #3
   1d9a2:	d0f5      	beq.n	1d990 <z_to_nrf_optname+0xb4>
   1d9a4:	2901      	cmp	r1, #1
   1d9a6:	d19f      	bne.n	1d8e8 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   1d9a8:	2301      	movs	r3, #1
   1d9aa:	e7e0      	b.n	1d96e <z_to_nrf_optname+0x92>

0001d9ac <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   1d9ac:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   1d9ae:	4b03      	ldr	r3, [pc, #12]	; (1d9bc <nrf91_socket_iface_init+0x10>)
   1d9b0:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   1d9b2:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   1d9b4:	4802      	ldr	r0, [pc, #8]	; (1d9c0 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   1d9b6:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   1d9b8:	f7fd bd4a 	b.w	1b450 <socket_offload_register>
   1d9bc:	2002013c 	.word	0x2002013c
   1d9c0:	00033c14 	.word	0x00033c14

0001d9c4 <dk_set_leds_state.part.0>:
int dk_set_leds(u32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(u32_t leds_on_mask, u32_t leds_off_mask)
   1d9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d9c8:	4606      	mov	r6, r0
   1d9ca:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1d9cc:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_write(led_devs[i],
   1d9ce:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1da3c <dk_set_leds_state.part.0+0x78>
						 led_pins[i].number, val);
   1d9d2:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1da40 <dk_set_leds_state.part.0+0x7c>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   1d9d6:	fa26 f304 	lsr.w	r3, r6, r4
   1d9da:	fa27 f204 	lsr.w	r2, r7, r4
   1d9de:	431a      	orrs	r2, r3
   1d9e0:	07d2      	lsls	r2, r2, #31
   1d9e2:	d51f      	bpl.n	1da24 <dk_set_leds_state.part.0+0x60>
						 led_pins[i].number, val);
   1d9e4:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
			int err = gpio_pin_write(led_devs[i],
   1d9e8:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
   1d9ec:	7912      	ldrb	r2, [r2, #4]
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
   1d9ee:	6841      	ldr	r1, [r0, #4]
   1d9f0:	f003 0301 	and.w	r3, r3, #1
   1d9f4:	684d      	ldr	r5, [r1, #4]
   1d9f6:	2100      	movs	r1, #0
   1d9f8:	47a8      	blx	r5
			if (err) {
   1d9fa:	4605      	mov	r5, r0
   1d9fc:	b190      	cbz	r0, 1da24 <dk_set_leds_state.part.0+0x60>
				LOG_ERR("Cannot write LED gpio");
   1d9fe:	2301      	movs	r3, #1
   1da00:	f04f 0000 	mov.w	r0, #0
   1da04:	4a0a      	ldr	r2, [pc, #40]	; (1da30 <dk_set_leds_state.part.0+0x6c>)
   1da06:	f363 0002 	bfi	r0, r3, #0, #3
   1da0a:	4b0a      	ldr	r3, [pc, #40]	; (1da34 <dk_set_leds_state.part.0+0x70>)
   1da0c:	f36f 00c5 	bfc	r0, #3, #3
   1da10:	1a9b      	subs	r3, r3, r2
   1da12:	08db      	lsrs	r3, r3, #3
   1da14:	f363 108f 	bfi	r0, r3, #6, #10
   1da18:	4907      	ldr	r1, [pc, #28]	; (1da38 <dk_set_leds_state.part.0+0x74>)
   1da1a:	f013 ff4a 	bl	318b2 <log_string_sync>
			}
		}
	}

	return 0;
}
   1da1e:	4628      	mov	r0, r5
   1da20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1da24:	3401      	adds	r4, #1
   1da26:	2c04      	cmp	r4, #4
   1da28:	d1d5      	bne.n	1d9d6 <dk_set_leds_state.part.0+0x12>
	return 0;
   1da2a:	2500      	movs	r5, #0
   1da2c:	e7f7      	b.n	1da1e <dk_set_leds_state.part.0+0x5a>
   1da2e:	bf00      	nop
   1da30:	00033914 	.word	0x00033914
   1da34:	0003394c 	.word	0x0003394c
   1da38:	0003614b 	.word	0x0003614b
   1da3c:	20020188 	.word	0x20020188
   1da40:	00033c74 	.word	0x00033c74

0001da44 <button_pressed>:
{
   1da44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1da46:	f04f 0320 	mov.w	r3, #32
   1da4a:	f3ef 8511 	mrs	r5, BASEPRI
   1da4e:	f383 8811 	msr	BASEPRI, r3
   1da52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1da56:	4833      	ldr	r0, [pc, #204]	; (1db24 <button_pressed+0xe0>)
   1da58:	f010 fe7e 	bl	2e758 <z_spin_lock_valid>
   1da5c:	b960      	cbnz	r0, 1da78 <button_pressed+0x34>
   1da5e:	4932      	ldr	r1, [pc, #200]	; (1db28 <button_pressed+0xe4>)
   1da60:	235f      	movs	r3, #95	; 0x5f
   1da62:	4a32      	ldr	r2, [pc, #200]	; (1db2c <button_pressed+0xe8>)
   1da64:	4832      	ldr	r0, [pc, #200]	; (1db30 <button_pressed+0xec>)
   1da66:	f013 ff07 	bl	31878 <printk>
   1da6a:	4832      	ldr	r0, [pc, #200]	; (1db34 <button_pressed+0xf0>)
   1da6c:	f013 ff04 	bl	31878 <printk>
   1da70:	215f      	movs	r1, #95	; 0x5f
   1da72:	482e      	ldr	r0, [pc, #184]	; (1db2c <button_pressed+0xe8>)
   1da74:	f013 ff0d 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   1da78:	482a      	ldr	r0, [pc, #168]	; (1db24 <button_pressed+0xe0>)
   1da7a:	f010 fe8b 	bl	2e794 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1da7e:	2400      	movs	r4, #0
			err = gpio_pin_disable_callback(button_devs[i],
   1da80:	4e2d      	ldr	r6, [pc, #180]	; (1db38 <button_pressed+0xf4>)
			  button_pins[i].number);
   1da82:	4f2e      	ldr	r7, [pc, #184]	; (1db3c <button_pressed+0xf8>)
   1da84:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
			err = gpio_pin_disable_callback(button_devs[i],
   1da88:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   1da8c:	791a      	ldrb	r2, [r3, #4]
					      int access_op, u32_t pin)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->disable_callback == NULL) {
   1da8e:	6843      	ldr	r3, [r0, #4]
   1da90:	695b      	ldr	r3, [r3, #20]
   1da92:	b1bb      	cbz	r3, 1dac4 <button_pressed+0x80>
		return -ENOTSUP;
	}

	return api->disable_callback(port, access_op, pin);
   1da94:	2100      	movs	r1, #0
   1da96:	4798      	blx	r3
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1da98:	3401      	adds	r4, #1
   1da9a:	2c04      	cmp	r4, #4
   1da9c:	d015      	beq.n	1daca <button_pressed+0x86>
   1da9e:	2800      	cmp	r0, #0
   1daa0:	d0f0      	beq.n	1da84 <button_pressed+0x40>
		LOG_ERR("Cannot disable callbacks");
   1daa2:	2301      	movs	r3, #1
   1daa4:	f04f 0000 	mov.w	r0, #0
   1daa8:	4a25      	ldr	r2, [pc, #148]	; (1db40 <button_pressed+0xfc>)
   1daaa:	f363 0002 	bfi	r0, r3, #0, #3
   1daae:	4b25      	ldr	r3, [pc, #148]	; (1db44 <button_pressed+0x100>)
   1dab0:	f36f 00c5 	bfc	r0, #3, #3
   1dab4:	1a9b      	subs	r3, r3, r2
   1dab6:	08db      	lsrs	r3, r3, #3
   1dab8:	f363 108f 	bfi	r0, r3, #6, #10
   1dabc:	4922      	ldr	r1, [pc, #136]	; (1db48 <button_pressed+0x104>)
   1dabe:	f013 fef8 	bl	318b2 <log_string_sync>
   1dac2:	e004      	b.n	1dace <button_pressed+0x8a>
		return -ENOTSUP;
   1dac4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1dac8:	e7e6      	b.n	1da98 <button_pressed+0x54>
	if (err) {
   1daca:	2800      	cmp	r0, #0
   1dacc:	d1e9      	bne.n	1daa2 <button_pressed+0x5e>
	switch (state) {
   1dace:	4b1f      	ldr	r3, [pc, #124]	; (1db4c <button_pressed+0x108>)
   1dad0:	781a      	ldrb	r2, [r3, #0]
   1dad2:	b9da      	cbnz	r2, 1db0c <button_pressed+0xc8>
		state = STATE_SCANNING;
   1dad4:	2201      	movs	r2, #1
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1dad6:	491e      	ldr	r1, [pc, #120]	; (1db50 <button_pressed+0x10c>)
   1dad8:	481e      	ldr	r0, [pc, #120]	; (1db54 <button_pressed+0x110>)
   1dada:	701a      	strb	r2, [r3, #0]
   1dadc:	f011 f816 	bl	2eb0c <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1dae0:	4810      	ldr	r0, [pc, #64]	; (1db24 <button_pressed+0xe0>)
   1dae2:	f010 fe47 	bl	2e774 <z_spin_unlock_valid>
   1dae6:	b960      	cbnz	r0, 1db02 <button_pressed+0xbe>
   1dae8:	491b      	ldr	r1, [pc, #108]	; (1db58 <button_pressed+0x114>)
   1daea:	2372      	movs	r3, #114	; 0x72
   1daec:	4a0f      	ldr	r2, [pc, #60]	; (1db2c <button_pressed+0xe8>)
   1daee:	4810      	ldr	r0, [pc, #64]	; (1db30 <button_pressed+0xec>)
   1daf0:	f013 fec2 	bl	31878 <printk>
   1daf4:	4819      	ldr	r0, [pc, #100]	; (1db5c <button_pressed+0x118>)
   1daf6:	f013 febf 	bl	31878 <printk>
   1dafa:	2172      	movs	r1, #114	; 0x72
   1dafc:	480b      	ldr	r0, [pc, #44]	; (1db2c <button_pressed+0xe8>)
   1dafe:	f013 fec8 	bl	31892 <assert_post_action>
	__asm__ volatile(
   1db02:	f385 8811 	msr	BASEPRI, r5
   1db06:	f3bf 8f6f 	isb	sy
}
   1db0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   1db0c:	23e2      	movs	r3, #226	; 0xe2
   1db0e:	4a14      	ldr	r2, [pc, #80]	; (1db60 <button_pressed+0x11c>)
   1db10:	4914      	ldr	r1, [pc, #80]	; (1db64 <button_pressed+0x120>)
   1db12:	4807      	ldr	r0, [pc, #28]	; (1db30 <button_pressed+0xec>)
   1db14:	f013 feb0 	bl	31878 <printk>
   1db18:	21e2      	movs	r1, #226	; 0xe2
   1db1a:	4811      	ldr	r0, [pc, #68]	; (1db60 <button_pressed+0x11c>)
   1db1c:	f013 feb9 	bl	31892 <assert_post_action>
		break;
   1db20:	e7de      	b.n	1dae0 <button_pressed+0x9c>
   1db22:	bf00      	nop
   1db24:	20020198 	.word	0x20020198
   1db28:	00035426 	.word	0x00035426
   1db2c:	000353f4 	.word	0x000353f4
   1db30:	00034ff7 	.word	0x00034ff7
   1db34:	0003543b 	.word	0x0003543b
   1db38:	20020140 	.word	0x20020140
   1db3c:	00033c54 	.word	0x00033c54
   1db40:	00033914 	.word	0x00033914
   1db44:	0003394c 	.word	0x0003394c
   1db48:	00036006 	.word	0x00036006
   1db4c:	20025b38 	.word	0x20025b38
   1db50:	20020154 	.word	0x20020154
   1db54:	20025a28 	.word	0x20025a28
   1db58:	00035450 	.word	0x00035450
   1db5c:	00035467 	.word	0x00035467
   1db60:	0003601f 	.word	0x0003601f
   1db64:	0003686f 	.word	0x0003686f

0001db68 <buttons_scan_fn>:
{
   1db68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	u32_t ret = 0;
   1db6c:	2400      	movs	r4, #0
		if (gpio_pin_read(
   1db6e:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 1dd50 <buttons_scan_fn+0x1e8>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1db72:	4625      	mov	r5, r4
   1db74:	4647      	mov	r7, r8
			button_devs[i], button_pins[i].number, &val)) {
   1db76:	4e60      	ldr	r6, [pc, #384]	; (1dcf8 <buttons_scan_fn+0x190>)
   1db78:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
		if (gpio_pin_read(
   1db7c:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
   1db80:	791a      	ldrb	r2, [r3, #4]
	return api->read(port, access_op, pin, value);
   1db82:	6843      	ldr	r3, [r0, #4]
   1db84:	2100      	movs	r1, #0
   1db86:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1db8a:	ab01      	add	r3, sp, #4
   1db8c:	47c8      	blx	r9
   1db8e:	2800      	cmp	r0, #0
   1db90:	d03f      	beq.n	1dc12 <buttons_scan_fn+0xaa>
			LOG_ERR("Cannot read gpio pin");
   1db92:	2301      	movs	r3, #1
   1db94:	f04f 0000 	mov.w	r0, #0
   1db98:	4a58      	ldr	r2, [pc, #352]	; (1dcfc <buttons_scan_fn+0x194>)
   1db9a:	f363 0002 	bfi	r0, r3, #0, #3
   1db9e:	4b58      	ldr	r3, [pc, #352]	; (1dd00 <buttons_scan_fn+0x198>)
   1dba0:	f36f 00c5 	bfc	r0, #3, #3
   1dba4:	1a9b      	subs	r3, r3, r2
   1dba6:	08db      	lsrs	r3, r3, #3
   1dba8:	f363 108f 	bfi	r0, r3, #6, #10
   1dbac:	4955      	ldr	r1, [pc, #340]	; (1dd04 <buttons_scan_fn+0x19c>)
   1dbae:	f013 fe80 	bl	318b2 <log_string_sync>
			return 0;
   1dbb2:	2400      	movs	r4, #0
   1dbb4:	4b54      	ldr	r3, [pc, #336]	; (1dd08 <buttons_scan_fn+0x1a0>)
   1dbb6:	e8d3 2fef 	ldaex	r2, [r3]
   1dbba:	e8c3 4fe1 	stlex	r1, r4, [r3]
   1dbbe:	2900      	cmp	r1, #0
   1dbc0:	d1f9      	bne.n	1dbb6 <buttons_scan_fn+0x4e>
	if (!initial_run) {
   1dbc2:	4b52      	ldr	r3, [pc, #328]	; (1dd0c <buttons_scan_fn+0x1a4>)
   1dbc4:	4d52      	ldr	r5, [pc, #328]	; (1dd10 <buttons_scan_fn+0x1a8>)
   1dbc6:	781a      	ldrb	r2, [r3, #0]
   1dbc8:	bb62      	cbnz	r2, 1dc24 <buttons_scan_fn+0xbc>
		if (button_handler_cb != NULL) {
   1dbca:	4b52      	ldr	r3, [pc, #328]	; (1dd14 <buttons_scan_fn+0x1ac>)
   1dbcc:	681b      	ldr	r3, [r3, #0]
   1dbce:	b12b      	cbz	r3, 1dbdc <buttons_scan_fn+0x74>
			if (button_scan != last_button_scan) {
   1dbd0:	6829      	ldr	r1, [r5, #0]
   1dbd2:	42a1      	cmp	r1, r4
   1dbd4:	d002      	beq.n	1dbdc <buttons_scan_fn+0x74>
				button_handler_cb(button_scan, has_changed);
   1dbd6:	4061      	eors	r1, r4
   1dbd8:	4620      	mov	r0, r4
   1dbda:	4798      	blx	r3
	last_button_scan = button_scan;
   1dbdc:	602c      	str	r4, [r5, #0]
	if (button_scan != 0) {
   1dbde:	b324      	cbz	r4, 1dc2a <buttons_scan_fn+0xc2>
   1dbe0:	220a      	movs	r2, #10
   1dbe2:	494d      	ldr	r1, [pc, #308]	; (1dd18 <buttons_scan_fn+0x1b0>)
   1dbe4:	484d      	ldr	r0, [pc, #308]	; (1dd1c <buttons_scan_fn+0x1b4>)
   1dbe6:	f010 ff91 	bl	2eb0c <k_delayed_work_submit_to_queue>
		if (err) {
   1dbea:	b178      	cbz	r0, 1dc0c <buttons_scan_fn+0xa4>
			LOG_ERR("Cannot add work to workqueue");
   1dbec:	2301      	movs	r3, #1
   1dbee:	f04f 0000 	mov.w	r0, #0
   1dbf2:	4a42      	ldr	r2, [pc, #264]	; (1dcfc <buttons_scan_fn+0x194>)
   1dbf4:	f363 0002 	bfi	r0, r3, #0, #3
   1dbf8:	4b41      	ldr	r3, [pc, #260]	; (1dd00 <buttons_scan_fn+0x198>)
   1dbfa:	f36f 00c5 	bfc	r0, #3, #3
   1dbfe:	1a9b      	subs	r3, r3, r2
   1dc00:	08db      	lsrs	r3, r3, #3
   1dc02:	4947      	ldr	r1, [pc, #284]	; (1dd20 <buttons_scan_fn+0x1b8>)
   1dc04:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Cannot enable callbacks");
   1dc08:	f013 fe53 	bl	318b2 <log_string_sync>
}
   1dc0c:	b003      	add	sp, #12
   1dc0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   1dc12:	9b01      	ldr	r3, [sp, #4]
   1dc14:	b913      	cbnz	r3, 1dc1c <buttons_scan_fn+0xb4>
			ret |= 1U << i;
   1dc16:	2301      	movs	r3, #1
   1dc18:	40ab      	lsls	r3, r5
   1dc1a:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1dc1c:	3501      	adds	r5, #1
   1dc1e:	2d04      	cmp	r5, #4
   1dc20:	d1aa      	bne.n	1db78 <buttons_scan_fn+0x10>
   1dc22:	e7c7      	b.n	1dbb4 <buttons_scan_fn+0x4c>
		initial_run = false;
   1dc24:	2200      	movs	r2, #0
   1dc26:	701a      	strb	r2, [r3, #0]
   1dc28:	e7d8      	b.n	1dbdc <buttons_scan_fn+0x74>
	__asm__ volatile(
   1dc2a:	f04f 0320 	mov.w	r3, #32
   1dc2e:	f3ef 8811 	mrs	r8, BASEPRI
   1dc32:	f383 8811 	msr	BASEPRI, r3
   1dc36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1dc3a:	483a      	ldr	r0, [pc, #232]	; (1dd24 <buttons_scan_fn+0x1bc>)
   1dc3c:	f010 fd8c 	bl	2e758 <z_spin_lock_valid>
   1dc40:	b960      	cbnz	r0, 1dc5c <buttons_scan_fn+0xf4>
   1dc42:	4939      	ldr	r1, [pc, #228]	; (1dd28 <buttons_scan_fn+0x1c0>)
   1dc44:	235f      	movs	r3, #95	; 0x5f
   1dc46:	4a39      	ldr	r2, [pc, #228]	; (1dd2c <buttons_scan_fn+0x1c4>)
   1dc48:	4839      	ldr	r0, [pc, #228]	; (1dd30 <buttons_scan_fn+0x1c8>)
   1dc4a:	f013 fe15 	bl	31878 <printk>
   1dc4e:	4839      	ldr	r0, [pc, #228]	; (1dd34 <buttons_scan_fn+0x1cc>)
   1dc50:	f013 fe12 	bl	31878 <printk>
   1dc54:	215f      	movs	r1, #95	; 0x5f
   1dc56:	4835      	ldr	r0, [pc, #212]	; (1dd2c <buttons_scan_fn+0x1c4>)
   1dc58:	f013 fe1b 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   1dc5c:	4831      	ldr	r0, [pc, #196]	; (1dd24 <buttons_scan_fn+0x1bc>)
   1dc5e:	f010 fd99 	bl	2e794 <z_spin_lock_set_owner>
		switch (state) {
   1dc62:	4b35      	ldr	r3, [pc, #212]	; (1dd38 <buttons_scan_fn+0x1d0>)
   1dc64:	781a      	ldrb	r2, [r3, #0]
   1dc66:	2a01      	cmp	r2, #1
   1dc68:	d13a      	bne.n	1dce0 <buttons_scan_fn+0x178>
			state = STATE_WAITING;
   1dc6a:	2400      	movs	r4, #0
   1dc6c:	701c      	strb	r4, [r3, #0]
			  button_pins[i].number);
   1dc6e:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
			err = gpio_pin_enable_callback(button_devs[i],
   1dc72:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   1dc76:	791a      	ldrb	r2, [r3, #4]
	if (api->enable_callback == NULL) {
   1dc78:	6843      	ldr	r3, [r0, #4]
   1dc7a:	691b      	ldr	r3, [r3, #16]
   1dc7c:	b36b      	cbz	r3, 1dcda <buttons_scan_fn+0x172>
	return api->enable_callback(port, access_op, pin);
   1dc7e:	2100      	movs	r1, #0
   1dc80:	4798      	blx	r3
   1dc82:	4605      	mov	r5, r0
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1dc84:	3401      	adds	r4, #1
   1dc86:	2c04      	cmp	r4, #4
   1dc88:	d001      	beq.n	1dc8e <buttons_scan_fn+0x126>
   1dc8a:	2d00      	cmp	r5, #0
   1dc8c:	d0ef      	beq.n	1dc6e <buttons_scan_fn+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1dc8e:	4825      	ldr	r0, [pc, #148]	; (1dd24 <buttons_scan_fn+0x1bc>)
   1dc90:	f010 fd70 	bl	2e774 <z_spin_unlock_valid>
   1dc94:	b960      	cbnz	r0, 1dcb0 <buttons_scan_fn+0x148>
   1dc96:	4929      	ldr	r1, [pc, #164]	; (1dd3c <buttons_scan_fn+0x1d4>)
   1dc98:	2372      	movs	r3, #114	; 0x72
   1dc9a:	4a24      	ldr	r2, [pc, #144]	; (1dd2c <buttons_scan_fn+0x1c4>)
   1dc9c:	4824      	ldr	r0, [pc, #144]	; (1dd30 <buttons_scan_fn+0x1c8>)
   1dc9e:	f013 fdeb 	bl	31878 <printk>
   1dca2:	4827      	ldr	r0, [pc, #156]	; (1dd40 <buttons_scan_fn+0x1d8>)
   1dca4:	f013 fde8 	bl	31878 <printk>
   1dca8:	2172      	movs	r1, #114	; 0x72
   1dcaa:	4820      	ldr	r0, [pc, #128]	; (1dd2c <buttons_scan_fn+0x1c4>)
   1dcac:	f013 fdf1 	bl	31892 <assert_post_action>
	__asm__ volatile(
   1dcb0:	f388 8811 	msr	BASEPRI, r8
   1dcb4:	f3bf 8f6f 	isb	sy
		if (err) {
   1dcb8:	2d00      	cmp	r5, #0
   1dcba:	d0a7      	beq.n	1dc0c <buttons_scan_fn+0xa4>
			LOG_ERR("Cannot enable callbacks");
   1dcbc:	2301      	movs	r3, #1
   1dcbe:	f04f 0000 	mov.w	r0, #0
   1dcc2:	4a0e      	ldr	r2, [pc, #56]	; (1dcfc <buttons_scan_fn+0x194>)
   1dcc4:	f363 0002 	bfi	r0, r3, #0, #3
   1dcc8:	4b0d      	ldr	r3, [pc, #52]	; (1dd00 <buttons_scan_fn+0x198>)
   1dcca:	f36f 00c5 	bfc	r0, #3, #3
   1dcce:	1a9b      	subs	r3, r3, r2
   1dcd0:	08db      	lsrs	r3, r3, #3
   1dcd2:	f363 108f 	bfi	r0, r3, #6, #10
   1dcd6:	491b      	ldr	r1, [pc, #108]	; (1dd44 <buttons_scan_fn+0x1dc>)
   1dcd8:	e796      	b.n	1dc08 <buttons_scan_fn+0xa0>
		return -ENOTSUP;
   1dcda:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1dcde:	e7d1      	b.n	1dc84 <buttons_scan_fn+0x11c>
			__ASSERT_NO_MSG(false);
   1dce0:	2398      	movs	r3, #152	; 0x98
   1dce2:	4a19      	ldr	r2, [pc, #100]	; (1dd48 <buttons_scan_fn+0x1e0>)
   1dce4:	4919      	ldr	r1, [pc, #100]	; (1dd4c <buttons_scan_fn+0x1e4>)
   1dce6:	4812      	ldr	r0, [pc, #72]	; (1dd30 <buttons_scan_fn+0x1c8>)
   1dce8:	f013 fdc6 	bl	31878 <printk>
   1dcec:	2198      	movs	r1, #152	; 0x98
   1dcee:	4816      	ldr	r0, [pc, #88]	; (1dd48 <buttons_scan_fn+0x1e0>)
   1dcf0:	f013 fdcf 	bl	31892 <assert_post_action>
		int err = 0;
   1dcf4:	2500      	movs	r5, #0
			break;
   1dcf6:	e7ca      	b.n	1dc8e <buttons_scan_fn+0x126>
   1dcf8:	00033c54 	.word	0x00033c54
   1dcfc:	00033914 	.word	0x00033914
   1dd00:	0003394c 	.word	0x0003394c
   1dd04:	00036069 	.word	0x00036069
   1dd08:	2002019c 	.word	0x2002019c
   1dd0c:	2002900c 	.word	0x2002900c
   1dd10:	20020180 	.word	0x20020180
   1dd14:	20020150 	.word	0x20020150
   1dd18:	20020154 	.word	0x20020154
   1dd1c:	20025a28 	.word	0x20025a28
   1dd20:	0003607e 	.word	0x0003607e
   1dd24:	20020198 	.word	0x20020198
   1dd28:	00035426 	.word	0x00035426
   1dd2c:	000353f4 	.word	0x000353f4
   1dd30:	00034ff7 	.word	0x00034ff7
   1dd34:	0003543b 	.word	0x0003543b
   1dd38:	20025b38 	.word	0x20025b38
   1dd3c:	00035450 	.word	0x00035450
   1dd40:	00035467 	.word	0x00035467
   1dd44:	0003609b 	.word	0x0003609b
   1dd48:	0003601f 	.word	0x0003601f
   1dd4c:	0003686f 	.word	0x0003686f
   1dd50:	20020140 	.word	0x20020140

0001dd54 <dk_leds_init>:
{
   1dd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1dd56:	2400      	movs	r4, #0
		led_devs[i] = device_get_binding(led_pins[i].port);
   1dd58:	4e20      	ldr	r6, [pc, #128]	; (1dddc <dk_leds_init+0x88>)
   1dd5a:	4f21      	ldr	r7, [pc, #132]	; (1dde0 <dk_leds_init+0x8c>)
   1dd5c:	00e5      	lsls	r5, r4, #3
   1dd5e:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
   1dd62:	f00f f81d 	bl	2cda0 <z_impl_device_get_binding>
   1dd66:	4603      	mov	r3, r0
   1dd68:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
		if (!led_devs[i]) {
   1dd6c:	b998      	cbnz	r0, 1dd96 <dk_leds_init+0x42>
			LOG_ERR("Cannot bind gpio device");
   1dd6e:	2201      	movs	r2, #1
   1dd70:	f04f 0000 	mov.w	r0, #0
   1dd74:	f362 0002 	bfi	r0, r2, #0, #3
   1dd78:	f363 00c5 	bfi	r0, r3, #3, #3
   1dd7c:	4a19      	ldr	r2, [pc, #100]	; (1dde4 <dk_leds_init+0x90>)
   1dd7e:	4b1a      	ldr	r3, [pc, #104]	; (1dde8 <dk_leds_init+0x94>)
   1dd80:	491a      	ldr	r1, [pc, #104]	; (1ddec <dk_leds_init+0x98>)
   1dd82:	1a9b      	subs	r3, r3, r2
   1dd84:	08db      	lsrs	r3, r3, #3
   1dd86:	f363 108f 	bfi	r0, r3, #6, #10
   1dd8a:	f013 fd92 	bl	318b2 <log_string_sync>
			return -ENODEV;
   1dd8e:	f06f 0512 	mvn.w	r5, #18
}
   1dd92:	4628      	mov	r0, r5
   1dd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   1dd96:	4435      	add	r5, r6
   1dd98:	792a      	ldrb	r2, [r5, #4]
	return api->config(port, access_op, pin, flags);
   1dd9a:	6843      	ldr	r3, [r0, #4]
   1dd9c:	2100      	movs	r1, #0
   1dd9e:	681d      	ldr	r5, [r3, #0]
   1dda0:	2301      	movs	r3, #1
   1dda2:	47a8      	blx	r5
		if (err) {
   1dda4:	4605      	mov	r5, r0
   1dda6:	b180      	cbz	r0, 1ddca <dk_leds_init+0x76>
			LOG_ERR("Cannot configure LED gpio");
   1dda8:	2301      	movs	r3, #1
   1ddaa:	f04f 0000 	mov.w	r0, #0
   1ddae:	4a0d      	ldr	r2, [pc, #52]	; (1dde4 <dk_leds_init+0x90>)
   1ddb0:	f363 0002 	bfi	r0, r3, #0, #3
   1ddb4:	4b0c      	ldr	r3, [pc, #48]	; (1dde8 <dk_leds_init+0x94>)
   1ddb6:	f36f 00c5 	bfc	r0, #3, #3
   1ddba:	1a9b      	subs	r3, r3, r2
   1ddbc:	08db      	lsrs	r3, r3, #3
   1ddbe:	f363 108f 	bfi	r0, r3, #6, #10
   1ddc2:	490b      	ldr	r1, [pc, #44]	; (1ddf0 <dk_leds_init+0x9c>)
   1ddc4:	f013 fd75 	bl	318b2 <log_string_sync>
			return err;
   1ddc8:	e7e3      	b.n	1dd92 <dk_leds_init+0x3e>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1ddca:	3401      	adds	r4, #1
   1ddcc:	2c04      	cmp	r4, #4
   1ddce:	d1c5      	bne.n	1dd5c <dk_leds_init+0x8>
}
   1ddd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1ddd4:	210f      	movs	r1, #15
   1ddd6:	f7ff bdf5 	b.w	1d9c4 <dk_set_leds_state.part.0>
   1ddda:	bf00      	nop
   1dddc:	00033c74 	.word	0x00033c74
   1dde0:	20020188 	.word	0x20020188
   1dde4:	00033914 	.word	0x00033914
   1dde8:	0003394c 	.word	0x0003394c
   1ddec:	00036119 	.word	0x00036119
   1ddf0:	00036131 	.word	0x00036131

0001ddf4 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ddf4:	4b05      	ldr	r3, [pc, #20]	; (1de0c <dk_read_buttons+0x18>)
   1ddf6:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   1ddfa:	b100      	cbz	r0, 1ddfe <dk_read_buttons+0xa>
		*button_state = current_state;
   1ddfc:	6003      	str	r3, [r0, #0]
   1ddfe:	4804      	ldr	r0, [pc, #16]	; (1de10 <dk_read_buttons+0x1c>)
	if (has_changed != NULL) {
   1de00:	b111      	cbz	r1, 1de08 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   1de02:	6802      	ldr	r2, [r0, #0]
   1de04:	405a      	eors	r2, r3
   1de06:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   1de08:	6003      	str	r3, [r0, #0]
}
   1de0a:	4770      	bx	lr
   1de0c:	2002019c 	.word	0x2002019c
   1de10:	20020184 	.word	0x20020184

0001de14 <dk_buttons_init>:
{
   1de14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		button_devs[i] = device_get_binding(button_pins[i].port);
   1de18:	4e69      	ldr	r6, [pc, #420]	; (1dfc0 <dk_buttons_init+0x1ac>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1de1a:	2500      	movs	r5, #0
   1de1c:	46b0      	mov	r8, r6
	button_handler_cb = button_handler;
   1de1e:	4b69      	ldr	r3, [pc, #420]	; (1dfc4 <dk_buttons_init+0x1b0>)
		button_devs[i] = device_get_binding(button_pins[i].port);
   1de20:	4f69      	ldr	r7, [pc, #420]	; (1dfc8 <dk_buttons_init+0x1b4>)
	button_handler_cb = button_handler;
   1de22:	6018      	str	r0, [r3, #0]
   1de24:	00ec      	lsls	r4, r5, #3
		button_devs[i] = device_get_binding(button_pins[i].port);
   1de26:	f856 0035 	ldr.w	r0, [r6, r5, lsl #3]
   1de2a:	f00e ffb9 	bl	2cda0 <z_impl_device_get_binding>
   1de2e:	4603      	mov	r3, r0
   1de30:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
		if (!button_devs[i]) {
   1de34:	b9a0      	cbnz	r0, 1de60 <dk_buttons_init+0x4c>
			LOG_ERR("Cannot bind gpio device");
   1de36:	2201      	movs	r2, #1
   1de38:	f04f 0000 	mov.w	r0, #0
   1de3c:	f362 0002 	bfi	r0, r2, #0, #3
   1de40:	f363 00c5 	bfi	r0, r3, #3, #3
   1de44:	4a61      	ldr	r2, [pc, #388]	; (1dfcc <dk_buttons_init+0x1b8>)
   1de46:	4b62      	ldr	r3, [pc, #392]	; (1dfd0 <dk_buttons_init+0x1bc>)
   1de48:	4962      	ldr	r1, [pc, #392]	; (1dfd4 <dk_buttons_init+0x1c0>)
   1de4a:	1a9b      	subs	r3, r3, r2
   1de4c:	08db      	lsrs	r3, r3, #3
   1de4e:	f363 108f 	bfi	r0, r3, #6, #10
   1de52:	f013 fd2e 	bl	318b2 <log_string_sync>
			return -ENODEV;
   1de56:	f06f 0412 	mvn.w	r4, #18
}
   1de5a:	4620      	mov	r0, r4
   1de5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   1de60:	4434      	add	r4, r6
   1de62:	7922      	ldrb	r2, [r4, #4]
   1de64:	6843      	ldr	r3, [r0, #4]
   1de66:	2100      	movs	r1, #0
   1de68:	681c      	ldr	r4, [r3, #0]
   1de6a:	f44f 7380 	mov.w	r3, #256	; 0x100
   1de6e:	47a0      	blx	r4
		if (err) {
   1de70:	4604      	mov	r4, r0
   1de72:	b180      	cbz	r0, 1de96 <dk_buttons_init+0x82>
			LOG_ERR("Cannot configure button gpio");
   1de74:	2301      	movs	r3, #1
   1de76:	f04f 0000 	mov.w	r0, #0
   1de7a:	4a54      	ldr	r2, [pc, #336]	; (1dfcc <dk_buttons_init+0x1b8>)
   1de7c:	f363 0002 	bfi	r0, r3, #0, #3
   1de80:	4b53      	ldr	r3, [pc, #332]	; (1dfd0 <dk_buttons_init+0x1bc>)
   1de82:	f36f 00c5 	bfc	r0, #3, #3
   1de86:	1a9b      	subs	r3, r3, r2
   1de88:	08db      	lsrs	r3, r3, #3
   1de8a:	4953      	ldr	r1, [pc, #332]	; (1dfd8 <dk_buttons_init+0x1c4>)
   1de8c:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Cannot add work to workqueue");
   1de90:	f013 fd0f 	bl	318b2 <log_string_sync>
		return err;
   1de94:	e7e1      	b.n	1de5a <dk_buttons_init+0x46>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1de96:	3501      	adds	r5, #1
   1de98:	2d04      	cmp	r5, #4
   1de9a:	d1c3      	bne.n	1de24 <dk_buttons_init+0x10>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1de9c:	4605      	mov	r5, r0
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   1de9e:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
   1dea2:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   1dea6:	791a      	ldrb	r2, [r3, #4]
   1dea8:	6843      	ldr	r3, [r0, #4]
   1deaa:	2100      	movs	r1, #0
   1deac:	681c      	ldr	r4, [r3, #0]
   1deae:	f44f 7381 	mov.w	r3, #258	; 0x102
   1deb2:	47a0      	blx	r4
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1deb4:	3501      	adds	r5, #1
   1deb6:	2d04      	cmp	r5, #4
   1deb8:	4604      	mov	r4, r0
   1deba:	d010      	beq.n	1dede <dk_buttons_init+0xca>
   1debc:	2800      	cmp	r0, #0
   1debe:	d0ee      	beq.n	1de9e <dk_buttons_init+0x8a>
		LOG_ERR("Cannot set interrupt mode");
   1dec0:	2301      	movs	r3, #1
   1dec2:	f04f 0000 	mov.w	r0, #0
   1dec6:	4a41      	ldr	r2, [pc, #260]	; (1dfcc <dk_buttons_init+0x1b8>)
   1dec8:	f363 0002 	bfi	r0, r3, #0, #3
   1decc:	4b40      	ldr	r3, [pc, #256]	; (1dfd0 <dk_buttons_init+0x1bc>)
   1dece:	f36f 00c5 	bfc	r0, #3, #3
   1ded2:	1a9b      	subs	r3, r3, r2
   1ded4:	08db      	lsrs	r3, r3, #3
   1ded6:	f363 108f 	bfi	r0, r3, #6, #10
   1deda:	4940      	ldr	r1, [pc, #256]	; (1dfdc <dk_buttons_init+0x1c8>)
   1dedc:	e7d8      	b.n	1de90 <dk_buttons_init+0x7c>
	if (err) {
   1dede:	2800      	cmp	r0, #0
   1dee0:	d1ee      	bne.n	1dec0 <dk_buttons_init+0xac>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1dee2:	4605      	mov	r5, r0
	u32_t pin_mask = 0;
   1dee4:	4681      	mov	r9, r0
		pin_mask |= BIT(button_pins[i].number);
   1dee6:	f04f 0a01 	mov.w	sl, #1
			button_pins[i].number);
   1deea:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
		err = gpio_pin_disable_callback(button_devs[i],
   1deee:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
			button_pins[i].number);
   1def2:	791e      	ldrb	r6, [r3, #4]
	if (api->disable_callback == NULL) {
   1def4:	6843      	ldr	r3, [r0, #4]
   1def6:	695b      	ldr	r3, [r3, #20]
   1def8:	b19b      	cbz	r3, 1df22 <dk_buttons_init+0x10e>
	return api->disable_callback(port, access_op, pin);
   1defa:	4632      	mov	r2, r6
   1defc:	2100      	movs	r1, #0
   1defe:	4798      	blx	r3
		if (err) {
   1df00:	4604      	mov	r4, r0
   1df02:	b188      	cbz	r0, 1df28 <dk_buttons_init+0x114>
			LOG_ERR("Cannot disable callbacks()");
   1df04:	2301      	movs	r3, #1
   1df06:	f04f 0000 	mov.w	r0, #0
   1df0a:	4a30      	ldr	r2, [pc, #192]	; (1dfcc <dk_buttons_init+0x1b8>)
   1df0c:	f363 0002 	bfi	r0, r3, #0, #3
   1df10:	4b2f      	ldr	r3, [pc, #188]	; (1dfd0 <dk_buttons_init+0x1bc>)
   1df12:	f36f 00c5 	bfc	r0, #3, #3
   1df16:	1a9b      	subs	r3, r3, r2
   1df18:	08db      	lsrs	r3, r3, #3
   1df1a:	f363 108f 	bfi	r0, r3, #6, #10
   1df1e:	4930      	ldr	r1, [pc, #192]	; (1dfe0 <dk_buttons_init+0x1cc>)
   1df20:	e7b6      	b.n	1de90 <dk_buttons_init+0x7c>
		return -ENOTSUP;
   1df22:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1df26:	e7ed      	b.n	1df04 <dk_buttons_init+0xf0>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1df28:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   1df2a:	fa0a f606 	lsl.w	r6, sl, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1df2e:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   1df30:	ea49 0906 	orr.w	r9, r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1df34:	d1d9      	bne.n	1deea <dk_buttons_init+0xd6>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1df36:	4606      	mov	r6, r0
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1df38:	4d2a      	ldr	r5, [pc, #168]	; (1dfe4 <dk_buttons_init+0x1d0>)
   1df3a:	4b2b      	ldr	r3, [pc, #172]	; (1dfe8 <dk_buttons_init+0x1d4>)
	callback->pin_mask = pin_mask;
   1df3c:	e9c5 3901 	strd	r3, r9, [r5, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   1df40:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
   1df44:	6843      	ldr	r3, [r0, #4]
   1df46:	68db      	ldr	r3, [r3, #12]
   1df48:	b19b      	cbz	r3, 1df72 <dk_buttons_init+0x15e>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1df4a:	2201      	movs	r2, #1
   1df4c:	4629      	mov	r1, r5
   1df4e:	4798      	blx	r3
		if (err) {
   1df50:	4604      	mov	r4, r0
   1df52:	b188      	cbz	r0, 1df78 <dk_buttons_init+0x164>
			LOG_ERR("Cannot add callback");
   1df54:	2301      	movs	r3, #1
   1df56:	f04f 0000 	mov.w	r0, #0
   1df5a:	4a1c      	ldr	r2, [pc, #112]	; (1dfcc <dk_buttons_init+0x1b8>)
   1df5c:	f363 0002 	bfi	r0, r3, #0, #3
   1df60:	4b1b      	ldr	r3, [pc, #108]	; (1dfd0 <dk_buttons_init+0x1bc>)
   1df62:	f36f 00c5 	bfc	r0, #3, #3
   1df66:	1a9b      	subs	r3, r3, r2
   1df68:	08db      	lsrs	r3, r3, #3
   1df6a:	f363 108f 	bfi	r0, r3, #6, #10
   1df6e:	491f      	ldr	r1, [pc, #124]	; (1dfec <dk_buttons_init+0x1d8>)
   1df70:	e78e      	b.n	1de90 <dk_buttons_init+0x7c>
		return -ENOTSUP;
   1df72:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1df76:	e7ed      	b.n	1df54 <dk_buttons_init+0x140>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1df78:	3601      	adds	r6, #1
   1df7a:	2e04      	cmp	r6, #4
   1df7c:	d1e0      	bne.n	1df40 <dk_buttons_init+0x12c>
	state = STATE_SCANNING;
   1df7e:	2501      	movs	r5, #1
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   1df80:	491b      	ldr	r1, [pc, #108]	; (1dff0 <dk_buttons_init+0x1dc>)
   1df82:	481c      	ldr	r0, [pc, #112]	; (1dff4 <dk_buttons_init+0x1e0>)
   1df84:	f014 fc0c 	bl	327a0 <k_delayed_work_init>
	state = STATE_SCANNING;
   1df88:	4b1b      	ldr	r3, [pc, #108]	; (1dff8 <dk_buttons_init+0x1e4>)
   1df8a:	4622      	mov	r2, r4
   1df8c:	4919      	ldr	r1, [pc, #100]	; (1dff4 <dk_buttons_init+0x1e0>)
   1df8e:	481b      	ldr	r0, [pc, #108]	; (1dffc <dk_buttons_init+0x1e8>)
   1df90:	701d      	strb	r5, [r3, #0]
   1df92:	f010 fdbb 	bl	2eb0c <k_delayed_work_submit_to_queue>
	if (err) {
   1df96:	4604      	mov	r4, r0
   1df98:	b168      	cbz	r0, 1dfb6 <dk_buttons_init+0x1a2>
		LOG_ERR("Cannot add work to workqueue");
   1df9a:	f04f 0000 	mov.w	r0, #0
   1df9e:	4b0c      	ldr	r3, [pc, #48]	; (1dfd0 <dk_buttons_init+0x1bc>)
   1dfa0:	4a0a      	ldr	r2, [pc, #40]	; (1dfcc <dk_buttons_init+0x1b8>)
   1dfa2:	f365 0002 	bfi	r0, r5, #0, #3
   1dfa6:	1a9b      	subs	r3, r3, r2
   1dfa8:	f36f 00c5 	bfc	r0, #3, #3
   1dfac:	08db      	lsrs	r3, r3, #3
   1dfae:	f363 108f 	bfi	r0, r3, #6, #10
   1dfb2:	4913      	ldr	r1, [pc, #76]	; (1e000 <dk_buttons_init+0x1ec>)
   1dfb4:	e76c      	b.n	1de90 <dk_buttons_init+0x7c>
	dk_read_buttons(NULL, NULL);
   1dfb6:	4601      	mov	r1, r0
   1dfb8:	f7ff ff1c 	bl	1ddf4 <dk_read_buttons>
	return 0;
   1dfbc:	e74d      	b.n	1de5a <dk_buttons_init+0x46>
   1dfbe:	bf00      	nop
   1dfc0:	00033c54 	.word	0x00033c54
   1dfc4:	20020150 	.word	0x20020150
   1dfc8:	20020140 	.word	0x20020140
   1dfcc:	00033914 	.word	0x00033914
   1dfd0:	0003394c 	.word	0x0003394c
   1dfd4:	00036119 	.word	0x00036119
   1dfd8:	000360b3 	.word	0x000360b3
   1dfdc:	000360d0 	.word	0x000360d0
   1dfe0:	000360ea 	.word	0x000360ea
   1dfe4:	20020174 	.word	0x20020174
   1dfe8:	0001da45 	.word	0x0001da45
   1dfec:	00036105 	.word	0x00036105
   1dff0:	0001db69 	.word	0x0001db69
   1dff4:	20020154 	.word	0x20020154
   1dff8:	20025b38 	.word	0x20025b38
   1dffc:	20025a28 	.word	0x20025a28
   1e000:	0003607e 	.word	0x0003607e

0001e004 <abi_getter>:
extern const struct fw_info_abi * const _ext_abis_start[];
extern const u32_t _ext_abis_size;
__noinit fw_info_abi_getter abi_getter_in;

int abi_getter(u32_t id, u32_t index, const struct fw_info_abi **abi)
{
   1e004:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!abi) {
   1e006:	b1da      	cbz	r2, 1e040 <abi_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   1e008:	2300      	movs	r3, #0
	bool id_found = false;
   1e00a:	461c      	mov	r4, r3
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   1e00c:	4e0e      	ldr	r6, [pc, #56]	; (1e048 <abi_getter+0x44>)
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
   1e00e:	4f0f      	ldr	r7, [pc, #60]	; (1e04c <abi_getter+0x48>)
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   1e010:	42b3      	cmp	r3, r6
   1e012:	d306      	bcc.n	1e022 <abi_getter+0x1e>
				*abi = ext_abi;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
   1e014:	2c00      	cmp	r4, #0
   1e016:	bf14      	ite	ne
   1e018:	f06f 0008 	mvnne.w	r0, #8
   1e01c:	f06f 0001 	mvneq.w	r0, #1
   1e020:	e009      	b.n	1e036 <abi_getter+0x32>
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
   1e022:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
		if (ext_abi->abi_id == id) {
   1e026:	f8d5 c00c 	ldr.w	ip, [r5, #12]
   1e02a:	4560      	cmp	r0, ip
   1e02c:	d106      	bne.n	1e03c <abi_getter+0x38>
			if (index-- == 0) {
   1e02e:	1e4c      	subs	r4, r1, #1
   1e030:	b911      	cbnz	r1, 1e038 <abi_getter+0x34>
				return 0;
   1e032:	4608      	mov	r0, r1
				*abi = ext_abi;
   1e034:	6015      	str	r5, [r2, #0]
}
   1e036:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
   1e038:	4621      	mov	r1, r4
			id_found = true;
   1e03a:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   1e03c:	3301      	adds	r3, #1
   1e03e:	e7e7      	b.n	1e010 <abi_getter+0xc>
		return -EFAULT;
   1e040:	f06f 000d 	mvn.w	r0, #13
   1e044:	e7f7      	b.n	1e036 <abi_getter+0x32>
   1e046:	bf00      	nop
   1e048:	00000000 	.word	0x00000000
   1e04c:	00036f04 	.word	0x00036f04

0001e050 <ip_client_event_handler>:
   1e050:	1b08f850 	.word	0x1b08f850
   1e054:	f0060c09 	.word	0xf0060c09
   1e058:	bf00bb3f 	.word	0xbf00bb3f

0001e05c <rpc_ip_client_init>:
   1e05c:	f00b4801 	.word	0xf00b4801
   1e060:	bf00ba9f 	.word	0xbf00ba9f
   1e064:	00033c94 	.word	0x00033c94

0001e068 <rpc_ip_client_request_alloc>:
   1e068:	b5102300 	.word	0xb5102300
   1e06c:	9301b082 	.word	0x9301b082
   1e070:	4604b158 	.word	0x4604b158
   1e074:	2004aa01 	.word	0x2004aa01
   1e078:	fccaf00b 	.word	0xfccaf00b
   1e07c:	9b01b918 	.word	0x9b01b918
   1e080:	3308b10b 	.word	0x3308b10b
   1e084:	b0026023 	.word	0xb0026023
   1e088:	2007bd10 	.word	0x2007bd10
   1e08c:	bd10b002 	.word	0xbd10b002

0001e090 <rpc_ip_client_request_send>:
   1e090:	4370f401 	.word	0x4370f401
   1e094:	4fe0f5b3 	.word	0x4fe0f5b3
   1e098:	b160d10b 	.word	0xb160d10b
   1e09c:	f8304603 	.word	0xf8304603
   1e0a0:	20042c08 	.word	0x20042c08
   1e0a4:	4101ea42 	.word	0x4101ea42
   1e0a8:	1d08f843 	.word	0x1d08f843
   1e0ac:	f00b4619 	.word	0xf00b4619
   1e0b0:	200fbc97 	.word	0x200fbc97
   1e0b4:	20074770 	.word	0x20074770
   1e0b8:	bf004770 	.word	0xbf004770

0001e0bc <rpc_ip_client_message_free>:
   1e0bc:	f1a0b120 	.word	0xf1a0b120
   1e0c0:	20040108 	.word	0x20040108
   1e0c4:	bcd6f00b 	.word	0xbcd6f00b
   1e0c8:	47702007 	.word	0x47702007

0001e0cc <rpc_ip_client_data_free>:
   1e0cc:	4601b118 	.word	0x4601b118
   1e0d0:	f00b2004 	.word	0xf00b2004
   1e0d4:	2007bde1 	.word	0x2007bde1
   1e0d8:	bf004770 	.word	0xbf004770

0001e0dc <symbol_0001c77>:
   1e0dc:	4603b430 	.word	0x4603b430
   1e0e0:	f5b26800 	.word	0xf5b26800
   1e0e4:	eba03f80 	.word	0xeba03f80
   1e0e8:	d2140101 	.word	0xd2140101
   1e0ec:	dd512902 	.word	0xdd512902
   1e0f0:	60191e41 	.word	0x60191e41
   1e0f4:	2c01f800 	.word	0x2c01f800
   1e0f8:	24826819 	.word	0x24826819
   1e0fc:	60181e48 	.word	0x60181e48
   1e100:	0a122003 	.word	0x0a122003
   1e104:	2c01f801 	.word	0x2c01f801
   1e108:	1e51681a 	.word	0x1e51681a
   1e10c:	f8026019 	.word	0xf8026019
   1e110:	bc304c01 	.word	0xbc304c01
   1e114:	f1b24770 	.word	0xf1b24770
   1e118:	d21a7f80 	.word	0xd21a7f80
   1e11c:	dd392903 	.word	0xdd392903
   1e120:	1e412483 	.word	0x1e412483
   1e124:	f8006019 	.word	0xf8006019
   1e128:	68192c01 	.word	0x68192c01
   1e12c:	1e4d0a10 	.word	0x1e4d0a10
   1e130:	f801601d 	.word	0xf801601d
   1e134:	68190c01 	.word	0x68190c01
   1e138:	1e480c12 	.word	0x1e480c12
   1e13c:	f8016018 	.word	0xf8016018
   1e140:	681a2c01 	.word	0x681a2c01
   1e144:	1e512004 	.word	0x1e512004
   1e148:	f8026019 	.word	0xf8026019
   1e14c:	bc304c01 	.word	0xbc304c01
   1e150:	29044770 	.word	0x29044770
   1e154:	2484dd1e 	.word	0x2484dd1e
   1e158:	60191e41 	.word	0x60191e41
   1e15c:	2c01f800 	.word	0x2c01f800
   1e160:	0a106819 	.word	0x0a106819
   1e164:	601d1e4d 	.word	0x601d1e4d
   1e168:	0c01f801 	.word	0x0c01f801
   1e16c:	0c106819 	.word	0x0c106819
   1e170:	601d1e4d 	.word	0x601d1e4d
   1e174:	0c01f801 	.word	0x0c01f801
   1e178:	0e126819 	.word	0x0e126819
   1e17c:	60181e48 	.word	0x60181e48
   1e180:	2c01f801 	.word	0x2c01f801
   1e184:	2005681a 	.word	0x2005681a
   1e188:	60191e51 	.word	0x60191e51
   1e18c:	4c01f802 	.word	0x4c01f802
   1e190:	4770bc30 	.word	0x4770bc30
   1e194:	006bf06f 	.word	0x006bf06f
   1e198:	bf00e7bb 	.word	0xbf00e7bb

0001e19c <symbol_000646e>:
   1e19c:	6804b430 	.word	0x6804b430
   1e1a0:	46032a7f 	.word	0x46032a7f
   1e1a4:	0101eba4 	.word	0x0101eba4
   1e1a8:	2900d808 	.word	0x2900d808
   1e1ac:	1e61dd6c 	.word	0x1e61dd6c
   1e1b0:	20016001 	.word	0x20016001
   1e1b4:	2c01f804 	.word	0x2c01f804
   1e1b8:	4770bc30 	.word	0x4770bc30
   1e1bc:	d80e2aff 	.word	0xd80e2aff
   1e1c0:	dd612901 	.word	0xdd612901
   1e1c4:	1e602181 	.word	0x1e602181
   1e1c8:	f8046018 	.word	0xf8046018
   1e1cc:	681a2c01 	.word	0x681a2c01
   1e1d0:	1e542002 	.word	0x1e542002
   1e1d4:	f802601c 	.word	0xf802601c
   1e1d8:	bc301c01 	.word	0xbc301c01
   1e1dc:	f5b24770 	.word	0xf5b24770
   1e1e0:	d31c3f80 	.word	0xd31c3f80
   1e1e4:	7f80f1b2 	.word	0x7f80f1b2
   1e1e8:	2903d22e 	.word	0x2903d22e
   1e1ec:	2583dd4c 	.word	0x2583dd4c
   1e1f0:	60011e61 	.word	0x60011e61
   1e1f4:	2c01f804 	.word	0x2c01f804
   1e1f8:	0a106801 	.word	0x0a106801
   1e1fc:	601c1e4c 	.word	0x601c1e4c
   1e200:	0c01f801 	.word	0x0c01f801
   1e204:	0c126819 	.word	0x0c126819
   1e208:	60181e48 	.word	0x60181e48
   1e20c:	2c01f801 	.word	0x2c01f801
   1e210:	2004681a 	.word	0x2004681a
   1e214:	60191e51 	.word	0x60191e51
   1e218:	5c01f802 	.word	0x5c01f802
   1e21c:	2902e7cc 	.word	0x2902e7cc
   1e220:	2582dd32 	.word	0x2582dd32
   1e224:	60011e61 	.word	0x60011e61
   1e228:	2c01f804 	.word	0x2c01f804
   1e22c:	0a126801 	.word	0x0a126801
   1e230:	60181e48 	.word	0x60181e48
   1e234:	2c01f801 	.word	0x2c01f801
   1e238:	2003681a 	.word	0x2003681a
   1e23c:	60191e51 	.word	0x60191e51
   1e240:	5c01f802 	.word	0x5c01f802
   1e244:	4770bc30 	.word	0x4770bc30
   1e248:	dd1d2904 	.word	0xdd1d2904
   1e24c:	1e612584 	.word	0x1e612584
   1e250:	f8046001 	.word	0xf8046001
   1e254:	68012c01 	.word	0x68012c01
   1e258:	1e4c0a10 	.word	0x1e4c0a10
   1e25c:	f801601c 	.word	0xf801601c
   1e260:	68190c01 	.word	0x68190c01
   1e264:	1e4c0c10 	.word	0x1e4c0c10
   1e268:	f801601c 	.word	0xf801601c
   1e26c:	68190c01 	.word	0x68190c01
   1e270:	1e480e12 	.word	0x1e480e12
   1e274:	f8016018 	.word	0xf8016018
   1e278:	681a2c01 	.word	0x681a2c01
   1e27c:	1e512005 	.word	0x1e512005
   1e280:	f8026019 	.word	0xf8026019
   1e284:	e7975c01 	.word	0xe7975c01
   1e288:	006bf06f 	.word	0x006bf06f
   1e28c:	bf00e794 	.word	0xbf00e794

0001e290 <symbol_00036c0>:
   1e290:	1a596803 	.word	0x1a596803
   1e294:	dd052900 	.word	0xdd052900
   1e298:	60011e59 	.word	0x60011e59
   1e29c:	f8032001 	.word	0xf8032001
   1e2a0:	47702c01 	.word	0x47702c01
   1e2a4:	006bf06f 	.word	0x006bf06f
   1e2a8:	bf004770 	.word	0xbf004770

0001e2ac <symbol_0008475>:
   1e2ac:	6805b5f8 	.word	0x6805b5f8
   1e2b0:	d83f42a9 	.word	0xd83f42a9
   1e2b4:	1a69460f 	.word	0x1a69460f
   1e2b8:	d83b428b 	.word	0xd83b428b
   1e2bc:	461c4606 	.word	0x461c4606
   1e2c0:	46111ae8 	.word	0x46111ae8
   1e2c4:	461a6030 	.word	0x461a6030
   1e2c8:	fb0df014 	.word	0xfb0df014
   1e2cc:	46202c00 	.word	0x46202c00
   1e2d0:	2c7fdb15 	.word	0x2c7fdb15
   1e2d4:	6833d814 	.word	0x6833d814
   1e2d8:	2a001bda 	.word	0x2a001bda
   1e2dc:	2001dd2a 	.word	0x2001dd2a
   1e2e0:	60321e5a 	.word	0x60321e5a
   1e2e4:	4c01f803 	.word	0x4c01f803
   1e2e8:	34016833 	.word	0x34016833
   1e2ec:	2f001bdf 	.word	0x2f001bdf
   1e2f0:	2206dd20 	.word	0x2206dd20
   1e2f4:	60311e59 	.word	0x60311e59
   1e2f8:	f8034420 	.word	0xf8034420
   1e2fc:	bdf82c01 	.word	0xbdf82c01
   1e300:	d80f2cff 	.word	0xd80f2cff
   1e304:	1bda6833 	.word	0x1bda6833
   1e308:	dd132a01 	.word	0xdd132a01
   1e30c:	1e592281 	.word	0x1e592281
   1e310:	f8036031 	.word	0xf8036031
   1e314:	68334c01 	.word	0x68334c01
   1e318:	1e592002 	.word	0x1e592002
   1e31c:	f8036031 	.word	0xf8036031
   1e320:	e7e12c01 	.word	0xe7e12c01
   1e324:	46394622 	.word	0x46394622
   1e328:	f7ff4630 	.word	0xf7ff4630
   1e32c:	2800fed7 	.word	0x2800fed7
   1e330:	bdf8dada 	.word	0xbdf8dada
   1e334:	006bf06f 	.word	0x006bf06f
   1e338:	bf00bdf8 	.word	0xbf00bdf8

0001e33c <symbol_0002662>:
   1e33c:	41f0e92d 	.word	0x41f0e92d
   1e340:	8018f8dd 	.word	0x8018f8dd
   1e344:	f1b86805 	.word	0xf1b86805
   1e348:	d1130f00 	.word	0xd1130f00
   1e34c:	2c001a6c 	.word	0x2c001a6c
   1e350:	8087f340 	.word	0x8087f340
   1e354:	60041e6c 	.word	0x60041e6c
   1e358:	8c01f805 	.word	0x8c01f805
   1e35c:	1a656804 	.word	0x1a656804
   1e360:	dd7e2d00 	.word	0xdd7e2d00
   1e364:	f04f2505 	.word	0xf04f2505
   1e368:	1e660802 	.word	0x1e660802
   1e36c:	f8046006 	.word	0xf8046006
   1e370:	68055c01 	.word	0x68055c01
   1e374:	d87442a9 	.word	0xd87442a9
   1e378:	42a31a6c 	.word	0x42a31a6c
   1e37c:	4606d871 	.word	0x4606d871
   1e380:	1ae8461c 	.word	0x1ae8461c
   1e384:	6030460f 	.word	0x6030460f
   1e388:	461a4611 	.word	0x461a4611
   1e38c:	faabf014 	.word	0xfaabf014
   1e390:	46202c00 	.word	0x46202c00
   1e394:	2c7fdb2f 	.word	0x2c7fdb2f
   1e398:	6833d841 	.word	0x6833d841
   1e39c:	2a001bda 	.word	0x2a001bda
   1e3a0:	2001dd5f 	.word	0x2001dd5f
   1e3a4:	60321e5a 	.word	0x60321e5a
   1e3a8:	4c01f803 	.word	0x4c01f803
   1e3ac:	34016833 	.word	0x34016833
   1e3b0:	2a001bda 	.word	0x2a001bda
   1e3b4:	2206dd55 	.word	0x2206dd55
   1e3b8:	1e594404 	.word	0x1e594404
   1e3bc:	60312c00 	.word	0x60312c00
   1e3c0:	f8034620 	.word	0xf8034620
   1e3c4:	db162c01 	.word	0xdb162c01
   1e3c8:	2c7f4444 	.word	0x2c7f4444
   1e3cc:	6833d815 	.word	0x6833d815
   1e3d0:	2a001bda 	.word	0x2a001bda
   1e3d4:	2001dd45 	.word	0x2001dd45
   1e3d8:	60321e5a 	.word	0x60321e5a
   1e3dc:	4c01f803 	.word	0x4c01f803
   1e3e0:	34016833 	.word	0x34016833
   1e3e4:	2f001bdf 	.word	0x2f001bdf
   1e3e8:	2230dd3b 	.word	0x2230dd3b
   1e3ec:	60311e59 	.word	0x60311e59
   1e3f0:	f8034420 	.word	0xf8034420
   1e3f4:	e8bd2c01 	.word	0xe8bd2c01
   1e3f8:	2cff81f0 	.word	0x2cff81f0
   1e3fc:	6833d821 	.word	0x6833d821
   1e400:	2a011bda 	.word	0x2a011bda
   1e404:	2281dd2d 	.word	0x2281dd2d
   1e408:	60311e59 	.word	0x60311e59
   1e40c:	4c01f803 	.word	0x4c01f803
   1e410:	20026833 	.word	0x20026833
   1e414:	60311e59 	.word	0x60311e59
   1e418:	2c01f803 	.word	0x2c01f803
   1e41c:	2cffe7e0 	.word	0x2cffe7e0
   1e420:	6833d817 	.word	0x6833d817
   1e424:	2a011bda 	.word	0x2a011bda
   1e428:	2281dd1b 	.word	0x2281dd1b
   1e42c:	60311e59 	.word	0x60311e59
   1e430:	4c01f803 	.word	0x4c01f803
   1e434:	20026833 	.word	0x20026833
   1e438:	60311e59 	.word	0x60311e59
   1e43c:	2c01f803 	.word	0x2c01f803
   1e440:	4622e7b4 	.word	0x4622e7b4
   1e444:	46304639 	.word	0x46304639
   1e448:	fe48f7ff 	.word	0xfe48f7ff
   1e44c:	dbd22800 	.word	0xdbd22800
   1e450:	4622e7c6 	.word	0x4622e7c6
   1e454:	46304639 	.word	0x46304639
   1e458:	fe40f7ff 	.word	0xfe40f7ff
   1e45c:	daa52800 	.word	0xdaa52800
   1e460:	f06fe7c9 	.word	0xf06fe7c9
   1e464:	e7c6006b 	.word	0xe7c6006b

0001e468 <symbol_0005bf5>:
   1e468:	4ff0e92d 	.word	0x4ff0e92d
   1e46c:	b0d72400 	.word	0xb0d72400
   1e470:	73abf50d 	.word	0x73abf50d
   1e474:	46914688 	.word	0x46914688
   1e478:	4306e9cd 	.word	0x4306e9cd
   1e47c:	f0014607 	.word	0xf0014607
   1e480:	2802f95f 	.word	0x2802f95f
   1e484:	2385d159 	.word	0x2385d159
   1e488:	ae0b6878 	.word	0xae0b6878
   1e48c:	46229301 	.word	0x46229301
   1e490:	0188f100 	.word	0x0188f100
   1e494:	ab0a9600 	.word	0xab0a9600
   1e498:	f004940a 	.word	0xf004940a
   1e49c:	ad2dfbc7 	.word	0xad2dfbc7
   1e4a0:	b9684604 	.word	0xb9684604
   1e4a4:	42a89807 	.word	0x42a89807
   1e4a8:	9a0ad37f 	.word	0x9a0ad37f
   1e4ac:	42931b43 	.word	0x42931b43
   1e4b0:	1a83d37b 	.word	0x1a83d37b
   1e4b4:	46314618 	.word	0x46314618
   1e4b8:	f0149307 	.word	0xf0149307
   1e4bc:	9c0afa14 	.word	0x9c0afa14
   1e4c0:	db312c00 	.word	0xdb312c00
   1e4c4:	1b5a9b07 	.word	0x1b5a9b07
   1e4c8:	dd6e2a00 	.word	0xdd6e2a00
   1e4cc:	1e5a2100 	.word	0x1e5a2100
   1e4d0:	0a01f104 	.word	0x0a01f104
   1e4d4:	a8079207 	.word	0xa8079207
   1e4d8:	1c01f803 	.word	0x1c01f803
   1e4dc:	46294652 	.word	0x46294652
   1e4e0:	fe5cf7ff 	.word	0xfe5cf7ff
   1e4e4:	db1f1e04 	.word	0xdb1f1e04
   1e4e8:	46292203 	.word	0x46292203
   1e4ec:	f7ffa807 	.word	0xf7ffa807
   1e4f0:	f1b0fecf 	.word	0xf1b0fecf
   1e4f4:	db1b0b00 	.word	0xdb1b0b00
   1e4f8:	f0014638 	.word	0xf0014638
   1e4fc:	aa08f921 	.word	0xaa08f921
   1e500:	f00ba909 	.word	0xf00ba909
   1e504:	4603fcd9 	.word	0x4603fcd9
   1e508:	2b00b1c8 	.word	0x2b00b1c8
   1e50c:	f1c3db50 	.word	0xf1c3db50
   1e510:	a90602a2 	.word	0xa90602a2
   1e514:	9101e9cd 	.word	0x9101e9cd
   1e518:	8000f8cd 	.word	0x8000f8cd
   1e51c:	4925442a 	.word	0x4925442a
   1e520:	f0044825 	.word	0xf0044825
   1e524:	4604ffa3 	.word	0x4604ffa3
   1e528:	b0574620 	.word	0xb0574620
   1e52c:	8ff0e8bd 	.word	0x8ff0e8bd
   1e530:	4620465c 	.word	0x4620465c
   1e534:	e8bdb057 	.word	0xe8bdb057
   1e538:	4c208ff0 	.word	0x4c208ff0
   1e53c:	9005e7f4 	.word	0x9005e7f4
   1e540:	f0014638 	.word	0xf0014638
   1e544:	2802f8fd 	.word	0x2802f8fd
   1e548:	d01d9b05 	.word	0xd01d9b05
   1e54c:	e9dd4618 	.word	0xe9dd4618
   1e550:	90003208 	.word	0x90003208
   1e554:	a8074629 	.word	0xa8074629
   1e558:	fef0f7ff 	.word	0xfef0f7ff
   1e55c:	db222800 	.word	0xdb222800
   1e560:	44a34454 	.word	0x44a34454
   1e564:	465a4483 	.word	0x465a4483
   1e568:	a8074629 	.word	0xa8074629
   1e56c:	fe16f7ff 	.word	0xfe16f7ff
   1e570:	dbd91e04 	.word	0xdbd91e04
   1e574:	2230a807 	.word	0x2230a807
   1e578:	f7ff4629 	.word	0xf7ff4629
   1e57c:	1e03fe89 	.word	0x1e03fe89
   1e580:	44a3db16 	.word	0x44a3db16
   1e584:	e7c0445b 	.word	0xe7c0445b
   1e588:	4632687b 	.word	0x4632687b
   1e58c:	a90a7818 	.word	0xa90a7818
   1e590:	fcaef00b 	.word	0xfcaef00b
   1e594:	6833b928 	.word	0x6833b928
   1e598:	46299a0a 	.word	0x46299a0a
   1e59c:	f7ffa807 	.word	0xf7ffa807
   1e5a0:	2800fe85 	.word	0x2800fe85
   1e5a4:	4604dad3 	.word	0x4604dad3
   1e5a8:	f06fe7be 	.word	0xf06fe7be
   1e5ac:	e7bb046b 	.word	0xe7bb046b
   1e5b0:	e7b9461c 	.word	0xe7b9461c
   1e5b4:	00033ca4 	.word	0x00033ca4
   1e5b8:	00033cc0 	.word	0x00033cc0
   1e5bc:	ffffc680 	.word	0xffffc680

0001e5c0 <authenticated_atcmd_init>:
   1e5c0:	4c3bb5f0 	.word	0x4c3bb5f0
   1e5c4:	6826b0c7 	.word	0x6826b0c7
   1e5c8:	2701bb16 	.word	0x2701bb16
   1e5cc:	60274839 	.word	0x60274839
   1e5d0:	fc8ef7fb 	.word	0xfc8ef7fb
   1e5d4:	f5c04605 	.word	0xf5c04605
   1e5d8:	46317380 	.word	0x46317380
   1e5dc:	7280f44f 	.word	0x7280f44f
   1e5e0:	9302a806 	.word	0x9302a806
   1e5e4:	f98af014 	.word	0xf98af014
   1e5e8:	4932462a 	.word	0x4932462a
   1e5ec:	f014a806 	.word	0xf014a806
   1e5f0:	aa06f97a 	.word	0xaa06f97a
   1e5f4:	ab029700 	.word	0xab029700
   1e5f8:	2120442a 	.word	0x2120442a
   1e5fc:	f00a482e 	.word	0xf00a482e
   1e600:	4606fed7 	.word	0x4606fed7
   1e604:	2300b138 	.word	0x2300b138
   1e608:	60232023 	.word	0x60232023
   1e60c:	bdf0b047 	.word	0xbdf0b047
   1e610:	b047200e 	.word	0xb047200e
   1e614:	2022bdf0 	.word	0x2022bdf0
   1e618:	60279b02 	.word	0x60279b02
   1e61c:	af06441d 	.word	0xaf06441d
   1e620:	5578ab06 	.word	0x5578ab06
   1e624:	f240442b 	.word	0xf240442b
   1e628:	21022201 	.word	0x21022201
   1e62c:	705e2066 	.word	0x705e2066
   1e630:	f9c0f000 	.word	0xf9c0f000
   1e634:	dbe61e07 	.word	0xdbe61e07
   1e638:	f7fb4820 	.word	0xf7fb4820
   1e63c:	4633fc59 	.word	0x4633fc59
   1e640:	491e4602 	.word	0x491e4602
   1e644:	6600e9cd 	.word	0x6600e9cd
   1e648:	f0004638 	.word	0xf0004638
   1e64c:	3502f95d 	.word	0x3502f95d
   1e650:	4633a903 	.word	0x4633a903
   1e654:	e9cd220a 	.word	0xe9cd220a
   1e658:	46386600 	.word	0x46386600
   1e65c:	fa3cf000 	.word	0xfa3cf000
   1e660:	6600e9cd 	.word	0x6600e9cd
   1e664:	462aa906 	.word	0x462aa906
   1e668:	46384633 	.word	0x46384633
   1e66c:	f94cf000 	.word	0xf94cf000
   1e670:	d00342a8 	.word	0xd00342a8
   1e674:	f0004638 	.word	0xf0004638
   1e678:	e7c4f9e7 	.word	0xe7c4f9e7
   1e67c:	6600e9cd 	.word	0x6600e9cd
   1e680:	220a4633 	.word	0x220a4633
   1e684:	4638a903 	.word	0x4638a903
   1e688:	fa26f000 	.word	0xfa26f000
   1e68c:	ddf12801 	.word	0xddf12801
   1e690:	2202a803 	.word	0x2202a803
   1e694:	f014490a 	.word	0xf014490a
   1e698:	4605fa7b 	.word	0x4605fa7b
   1e69c:	d1e92800 	.word	0xd1e92800
   1e6a0:	46382302 	.word	0x46382302
   1e6a4:	f0006023 	.word	0xf0006023
   1e6a8:	4628f9cf 	.word	0x4628f9cf
   1e6ac:	bf00e7ae 	.word	0xbf00e7ae
   1e6b0:	200201a0 	.word	0x200201a0
   1e6b4:	00033cdc 	.word	0x00033cdc
   1e6b8:	20025b40 	.word	0x20025b40
   1e6bc:	00033cec 	.word	0x00033cec
   1e6c0:	00033cfc 	.word	0x00033cfc

0001e6c4 <gnss_client_event_handler>:
   1e6c4:	1b08f850 	.word	0x1b08f850
   1e6c8:	f0060c09 	.word	0xf0060c09
   1e6cc:	bf00bda7 	.word	0xbf00bda7

0001e6d0 <rpc_gnss_client_init>:
   1e6d0:	f00a4801 	.word	0xf00a4801
   1e6d4:	bf00bf65 	.word	0xbf00bf65
   1e6d8:	00033d84 	.word	0x00033d84

0001e6dc <rpc_gnss_client_request_alloc>:
   1e6dc:	b5102300 	.word	0xb5102300
   1e6e0:	9301b082 	.word	0x9301b082
   1e6e4:	4604b158 	.word	0x4604b158
   1e6e8:	2007aa01 	.word	0x2007aa01
   1e6ec:	f990f00b 	.word	0xf990f00b
   1e6f0:	9b01b918 	.word	0x9b01b918
   1e6f4:	3308b10b 	.word	0x3308b10b
   1e6f8:	b0026023 	.word	0xb0026023
   1e6fc:	2007bd10 	.word	0x2007bd10
   1e700:	bd10b002 	.word	0xbd10b002

0001e704 <rpc_gnss_client_request_send>:
   1e704:	4370f401 	.word	0x4370f401
   1e708:	5f80f5b3 	.word	0x5f80f5b3
   1e70c:	b160d10b 	.word	0xb160d10b
   1e710:	f8304603 	.word	0xf8304603
   1e714:	20072c08 	.word	0x20072c08
   1e718:	4101ea42 	.word	0x4101ea42
   1e71c:	1d08f843 	.word	0x1d08f843
   1e720:	f00b4619 	.word	0xf00b4619
   1e724:	200fb95d 	.word	0x200fb95d
   1e728:	20074770 	.word	0x20074770
   1e72c:	bf004770 	.word	0xbf004770

0001e730 <rpc_gnss_client_message_free>:
   1e730:	f1a0b120 	.word	0xf1a0b120
   1e734:	20070108 	.word	0x20070108
   1e738:	b99cf00b 	.word	0xb99cf00b
   1e73c:	47702007 	.word	0x47702007

0001e740 <rpc_gnss_client_data_free>:
   1e740:	4601b118 	.word	0x4601b118
   1e744:	f00b2007 	.word	0xf00b2007
   1e748:	2007baa7 	.word	0x2007baa7
   1e74c:	bf004770 	.word	0xbf004770

0001e750 <eckey_can_do>:
   1e750:	28023802 	.word	0x28023802
   1e754:	2000bf8c 	.word	0x2000bf8c
   1e758:	47702001 	.word	0x47702001

0001e75c <eckey_get_bitlen>:
   1e75c:	47706d80 	.word	0x47706d80

0001e760 <eckey_debug>:
   1e760:	4b032202 	.word	0x4b032202
   1e764:	60883088 	.word	0x60883088
   1e768:	604b700a 	.word	0x604b700a
   1e76c:	bf004770 	.word	0xbf004770
   1e770:	00033d94 	.word	0x00033d94

0001e774 <eckeydh_can_do>:
   1e774:	28013802 	.word	0x28013802
   1e778:	2000bf8c 	.word	0x2000bf8c
   1e77c:	47702001 	.word	0x47702001

0001e780 <eckey_free_wrap>:
   1e780:	4604b510 	.word	0x4604b510
   1e784:	fc4af003 	.word	0xfc4af003
   1e788:	e8bd4620 	.word	0xe8bd4620
   1e78c:	f00b4010 	.word	0xf00b4010
   1e790:	bf00bfeb 	.word	0xbf00bfeb

0001e794 <eckey_alloc_wrap>:
   1e794:	21acb510 	.word	0x21acb510
   1e798:	f00b2001 	.word	0xf00b2001
   1e79c:	4604ffd1 	.word	0x4604ffd1
   1e7a0:	f003b108 	.word	0xf003b108
   1e7a4:	4620fbd5 	.word	0x4620fbd5
   1e7a8:	bf00bd10 	.word	0xbf00bd10

0001e7ac <eckey_check_pair>:
   1e7ac:	bbaef004 	.word	0xbbaef004

0001e7b0 <symbol_0005c7f>:
   1e7b0:	4ff0e92d 	.word	0x4ff0e92d
   1e7b4:	c024f8dd 	.word	0xc024f8dd
   1e7b8:	0f00f1bc 	.word	0x0f00f1bc
   1e7bc:	4c42d065 	.word	0x4c42d065
   1e7c0:	540cfba4 	.word	0x540cfba4
   1e7c4:	eb040864 	.word	0xeb040864
   1e7c8:	45c40844 	.word	0x45c40844
   1e7cc:	3401bf18 	.word	0x3401bf18
   1e7d0:	4f80f1b4 	.word	0x4f80f1b4
   1e7d4:	00a4d271 	.word	0x00a4d271
   1e7d8:	428c3401 	.word	0x428c3401
   1e7dc:	2800d869 	.word	0x2800d869
   1e7e0:	f1b8d067 	.word	0xf1b8d067
   1e7e4:	d0610f00 	.word	0xd0610f00
   1e7e8:	27004686 	.word	0x27004686
   1e7ec:	1cdc4e37 	.word	0x1cdc4e37
   1e7f0:	f8142500 	.word	0xf8142500
   1e7f4:	f8141c03 	.word	0xf8141c03
   1e7f8:	f8143c02 	.word	0xf8143c02
   1e7fc:	ea4fbc01 	.word	0xea4fbc01
   1e800:	010909a1 	.word	0x010909a1
   1e804:	0130f001 	.word	0x0130f001
   1e808:	1a13eb06 	.word	0x1a13eb06
   1e80c:	9009f816 	.word	0x9009f816
   1e810:	f81a009b 	.word	0xf81a009b
   1e814:	f003a001 	.word	0xf003a001
   1e818:	eb06013c 	.word	0xeb06013c
   1e81c:	5c59139b 	.word	0x5c59139b
   1e820:	0507f369 	.word	0x0507f369
   1e824:	033ff00b 	.word	0x033ff00b
   1e828:	f36a5cf3 	.word	0xf36a5cf3
   1e82c:	f361250f 	.word	0xf361250f
   1e830:	37034517 	.word	0x37034517
   1e834:	651ff363 	.word	0x651ff363
   1e838:	0104f10e 	.word	0x0104f10e
   1e83c:	f8ce45b8 	.word	0xf8ce45b8
   1e840:	46235000 	.word	0x46235000
   1e844:	f104468e 	.word	0xf104468e
   1e848:	d8d10403 	.word	0xd8d10403
   1e84c:	d91445bc 	.word	0xd91445bc
   1e850:	4d1e781c 	.word	0x4d1e781c
   1e854:	10a63701 	.word	0x10a63701
   1e858:	ea4f4567 	.word	0xea4f4567
   1e85c:	f0041404 	.word	0xf0041404
   1e860:	f8150430 	.word	0xf8150430
   1e864:	d315e006 	.word	0xd315e006
   1e868:	5d2b263d 	.word	0x5d2b263d
   1e86c:	e000f881 	.word	0xe000f881
   1e870:	233d704b 	.word	0x233d704b
   1e874:	70cb708e 	.word	0x70cb708e
   1e878:	23003104 	.word	0x23003104
   1e87c:	1a08469c 	.word	0x1a08469c
   1e880:	700b6010 	.word	0x700b6010
   1e884:	e8bd4660 	.word	0xe8bd4660
   1e888:	f8c28ff0 	.word	0xf8c28ff0
   1e88c:	4660c000 	.word	0x4660c000
   1e890:	8ff0e8bd 	.word	0x8ff0e8bd
   1e894:	f881785b 	.word	0xf881785b
   1e898:	eb05e000 	.word	0xeb05e000
   1e89c:	5d341613 	.word	0x5d341613
   1e8a0:	f003009b 	.word	0xf003009b
   1e8a4:	704c033c 	.word	0x704c033c
   1e8a8:	e7e25cee 	.word	0xe7e25cee
   1e8ac:	46014647 	.word	0x46014647
   1e8b0:	6014e7cc 	.word	0x6014e7cc
   1e8b4:	0c29f06f 	.word	0x0c29f06f
   1e8b8:	f04fe7e4 	.word	0xf04fe7e4
   1e8bc:	f06f33ff 	.word	0xf06f33ff
   1e8c0:	60130c29 	.word	0x60130c29
   1e8c4:	bf00e7de 	.word	0xbf00e7de
   1e8c8:	aaaaaaab 	.word	0xaaaaaaab
   1e8cc:	00033dfc 	.word	0x00033dfc

0001e8d0 <packet_free_cb>:
   1e8d0:	f0006800 	.word	0xf0006800
   1e8d4:	bf00b9eb 	.word	0xbf00b9eb

0001e8d8 <packet_free_cb>:
   1e8d8:	4604b510 	.word	0x4604b510
   1e8dc:	f0066800 	.word	0xf0066800
   1e8e0:	68a0f9a7 	.word	0x68a0f9a7
   1e8e4:	e8bdb118 	.word	0xe8bdb118
   1e8e8:	f00b4010 	.word	0xf00b4010
   1e8ec:	bd10bf3d 	.word	0xbd10bf3d

0001e8f0 <packet_free_cb>:
   1e8f0:	4604b510 	.word	0x4604b510
   1e8f4:	f7ff6800 	.word	0xf7ff6800
   1e8f8:	68a0ff23 	.word	0x68a0ff23
   1e8fc:	e8bdb118 	.word	0xe8bdb118
   1e900:	f00b4010 	.word	0xf00b4010
   1e904:	bd10bf31 	.word	0xbd10bf31

0001e908 <at_interface_write>:
   1e908:	b083b5f0 	.word	0xb083b5f0
   1e90c:	4615460f 	.word	0x4615460f
   1e910:	f0044606 	.word	0xf0044606
   1e914:	2800fcf5 	.word	0x2800fcf5
   1e918:	6803d047 	.word	0x6803d047
   1e91c:	039b4604 	.word	0x039b4604
   1e920:	6803d543 	.word	0x6803d543
   1e924:	f4234629 	.word	0xf4234629
   1e928:	60033300 	.word	0x60033300
   1e92c:	a8016803 	.word	0xa8016803
   1e930:	1300f443 	.word	0x1300f443
   1e934:	f0006023 	.word	0xf0006023
   1e938:	bba0f98f 	.word	0xbba0f98f
   1e93c:	9b012204 	.word	0x9b012204
   1e940:	7258721a 	.word	0x7258721a
   1e944:	72d87298 	.word	0x72d87298
   1e948:	b98560de 	.word	0xb98560de
   1e94c:	21014618 	.word	0x21014618
   1e950:	f996f000 	.word	0xf996f000
   1e954:	f44fb9d0 	.word	0xf44fb9d0
   1e958:	46303200 	.word	0x46303200
   1e95c:	f04f4611 	.word	0xf04f4611
   1e960:	f00433ff 	.word	0xf00433ff
   1e964:	b9a8fc61 	.word	0xb9a8fc61
   1e968:	b0034628 	.word	0xb0034628
   1e96c:	4639bdf0 	.word	0x4639bdf0
   1e970:	462a6818 	.word	0x462a6818
   1e974:	ffb7f013 	.word	0xffb7f013
   1e978:	98012101 	.word	0x98012101
   1e97c:	f980f000 	.word	0xf980f000
   1e980:	d0e82800 	.word	0xd0e82800
   1e984:	68189b01 	.word	0x68189b01
   1e988:	f990f000 	.word	0xf990f000
   1e98c:	f0009801 	.word	0xf0009801
   1e990:	2023f985 	.word	0x2023f985
   1e994:	f4436823 	.word	0xf4436823
   1e998:	60233300 	.word	0x60233300
   1e99c:	fe7cf7fe 	.word	0xfe7cf7fe
   1e9a0:	30fff04f 	.word	0x30fff04f
   1e9a4:	200ce7e1 	.word	0x200ce7e1
   1e9a8:	2016e7f4 	.word	0x2016e7f4
   1e9ac:	bf00e7f6 	.word	0xbf00e7f6

0001e9b0 <at_interface_init>:
   1e9b0:	b94cf000 	.word	0xb94cf000

0001e9b4 <at_interface_open>:
   1e9b4:	41f0e92d 	.word	0x41f0e92d
   1e9b8:	b0822500 	.word	0xb0822500
   1e9bc:	f843ab02 	.word	0xf843ab02
   1e9c0:	46805d08 	.word	0x46805d08
   1e9c4:	4618460f 	.word	0x4618460f
   1e9c8:	21024616 	.word	0x21024616
   1e9cc:	f0044a1d 	.word	0xf0044a1d
   1e9d0:	9b00fb87 	.word	0x9b00fb87
   1e9d4:	b30b4604 	.word	0xb30b4604
   1e9d8:	8703e9c3 	.word	0x8703e9c3
   1e9dc:	4629615e 	.word	0x4629615e
   1e9e0:	f000a801 	.word	0xf000a801
   1e9e4:	b9e8f939 	.word	0xb9e8f939
   1e9e8:	9b012204 	.word	0x9b012204
   1e9ec:	72582105 	.word	0x72582105
   1e9f0:	72d87298 	.word	0x72d87298
   1e9f4:	60dc721a 	.word	0x60dc721a
   1e9f8:	f0004618 	.word	0xf0004618
   1e9fc:	b9d8f941 	.word	0xb9d8f941
   1ea00:	f04f2202 	.word	0xf04f2202
   1ea04:	461133ff 	.word	0x461133ff
   1ea08:	f0044620 	.word	0xf0044620
   1ea0c:	4605fc0d 	.word	0x4605fc0d
   1ea10:	9a00b948 	.word	0x9a00b948
   1ea14:	f4436813 	.word	0xf4436813
   1ea18:	60133300 	.word	0x60133300
   1ea1c:	b0024620 	.word	0xb0024620
   1ea20:	81f0e8bd 	.word	0x81f0e8bd
   1ea24:	4620250c 	.word	0x4620250c
   1ea28:	fbb0f004 	.word	0xfbb0f004
   1ea2c:	f7fe4628 	.word	0xf7fe4628
   1ea30:	f04ffe33 	.word	0xf04ffe33
   1ea34:	e7f134ff 	.word	0xe7f134ff
   1ea38:	f0009801 	.word	0xf0009801
   1ea3c:	2523f92f 	.word	0x2523f92f
   1ea40:	bf00e7f1 	.word	0xbf00e7f1
   1ea44:	0001e8d1 	.word	0x0001e8d1

0001ea48 <at_interface_close>:
   1ea48:	b083b5f0 	.word	0xb083b5f0
   1ea4c:	f0044606 	.word	0xf0044606
   1ea50:	2800fc57 	.word	0x2800fc57
   1ea54:	230dd03d 	.word	0x230dd03d
   1ea58:	60036807 	.word	0x60036807
   1ea5c:	46046803 	.word	0x46046803
   1ea60:	d41f039b 	.word	0xd41f039b
   1ea64:	a8012100 	.word	0xa8012100
   1ea68:	f8f6f000 	.word	0xf8f6f000
   1ea6c:	2204bb20 	.word	0x2204bb20
   1ea70:	21069b01 	.word	0x21069b01
   1ea74:	72987258 	.word	0x72987258
   1ea78:	721a72d8 	.word	0x721a72d8
   1ea7c:	461860de 	.word	0x461860de
   1ea80:	f8fef000 	.word	0xf8fef000
   1ea84:	220eb9d0 	.word	0x220eb9d0
   1ea88:	33fff04f 	.word	0x33fff04f
   1ea8c:	46304611 	.word	0x46304611
   1ea90:	fbcaf004 	.word	0xfbcaf004
   1ea94:	b9a84605 	.word	0xb9a84605
   1ea98:	f0044630 	.word	0xf0044630
   1ea9c:	4628fb77 	.word	0x4628fb77
   1eaa0:	bdf0b003 	.word	0xbdf0b003
   1eaa4:	21006803 	.word	0x21006803
   1eaa8:	3300f423 	.word	0x3300f423
   1eaac:	a8016003 	.word	0xa8016003
   1eab0:	f8d2f000 	.word	0xf8d2f000
   1eab4:	d0da2800 	.word	0xd0da2800
   1eab8:	e003250c 	.word	0xe003250c
   1eabc:	f0009801 	.word	0xf0009801
   1eac0:	2523f8ed 	.word	0x2523f8ed
   1eac4:	46286027 	.word	0x46286027
   1eac8:	fde6f7fe 	.word	0xfde6f7fe
   1eacc:	35fff04f 	.word	0x35fff04f
   1ead0:	2516e7e5 	.word	0x2516e7e5
   1ead4:	bf00e7f7 	.word	0xbf00e7f7

0001ead8 <at_interface_read>:
   1ead8:	41f0e92d 	.word	0x41f0e92d
   1eadc:	4688b084 	.word	0x4688b084
   1eae0:	461e4615 	.word	0x461e4615
   1eae4:	f0044607 	.word	0xf0044607
   1eae8:	2800fc0b 	.word	0x2800fc0b
   1eaec:	2300d049 	.word	0x2300d049
   1eaf0:	8500e9cd 	.word	0x8500e9cd
   1eaf4:	0502f016 	.word	0x0502f016
   1eaf8:	e9cd4604 	.word	0xe9cd4604
   1eafc:	d00e3302 	.word	0xd00e3302
   1eb00:	2d00e01e 	.word	0x2d00e01e
   1eb04:	f44fd133 	.word	0xf44fd133
   1eb08:	6a233280 	.word	0x6a233280
   1eb0c:	2b004611 	.word	0x2b004611
   1eb10:	f04fbf08 	.word	0xf04fbf08
   1eb14:	463833ff 	.word	0x463833ff
   1eb18:	fb86f004 	.word	0xfb86f004
   1eb1c:	68234605 	.word	0x68234605
   1eb20:	f42369e0 	.word	0xf42369e0
   1eb24:	60233380 	.word	0x60233380
   1eb28:	46326803 	.word	0x46326803
   1eb2c:	4669689b 	.word	0x4669689b
   1eb30:	f1b04798 	.word	0xf1b04798
   1eb34:	dbe40800 	.word	0xdbe40800
   1eb38:	b0044640 	.word	0xb0044640
   1eb3c:	81f0e8bd 	.word	0x81f0e8bd
   1eb40:	69c06803 	.word	0x69c06803
   1eb44:	3380f423 	.word	0x3380f423
   1eb48:	68036023 	.word	0x68036023
   1eb4c:	689b4632 	.word	0x689b4632
   1eb50:	47984669 	.word	0x47984669
   1eb54:	0800f1b0 	.word	0x0800f1b0
   1eb58:	f1b8daee 	.word	0xf1b8daee
   1eb5c:	d1eb3fff 	.word	0xd1eb3fff
   1eb60:	f7fe2023 	.word	0xf7fe2023
   1eb64:	4640fd99 	.word	0x4640fd99
   1eb68:	e8bdb004 	.word	0xe8bdb004
   1eb6c:	f1b881f0 	.word	0xf1b881f0
   1eb70:	d1e13fff 	.word	0xd1e13fff
   1eb74:	f7fe4628 	.word	0xf7fe4628
   1eb78:	4640fd8f 	.word	0x4640fd8f
   1eb7c:	e8bdb004 	.word	0xe8bdb004
   1eb80:	201681f0 	.word	0x201681f0
   1eb84:	fd88f7fe 	.word	0xfd88f7fe
   1eb88:	38fff04f 	.word	0x38fff04f
   1eb8c:	bf00e7d4 	.word	0xbf00e7d4

0001eb90 <at_interface_getopt>:
   1eb90:	bc14f004 	.word	0xbc14f004

0001eb94 <at_interface_setopt>:
   1eb94:	bbdcf004 	.word	0xbbdcf004

0001eb98 <rpc_at_event_handler>:
   1eb98:	4606b570 	.word	0x4606b570
   1eb9c:	68c0b084 	.word	0x68c0b084
   1eba0:	f004460d 	.word	0xf004460d
   1eba4:	4604fbad 	.word	0x4604fbad
   1eba8:	6803b348 	.word	0x6803b348
   1ebac:	2b01b29b 	.word	0x2b01b29b
   1ebb0:	6803d01f 	.word	0x6803d01f
   1ebb4:	2b0db29b 	.word	0x2b0db29b
   1ebb8:	6803d029 	.word	0x6803d029
   1ebbc:	2b02b29b 	.word	0x2b02b29b
   1ebc0:	3d03d02d 	.word	0x3d03d02d
   1ebc4:	d8172d01 	.word	0xd8172d01
   1ebc8:	68732500 	.word	0x68732500
   1ebcc:	e9cd6832 	.word	0xe9cd6832
   1ebd0:	e9cd5502 	.word	0xe9cd5502
   1ebd4:	69e02300 	.word	0x69e02300
   1ebd8:	68034669 	.word	0x68034669
   1ebdc:	4798685b 	.word	0x4798685b
   1ebe0:	d0193001 	.word	0xd0193001
   1ebe4:	68234628 	.word	0x68234628
   1ebe8:	3380f443 	.word	0x3380f443
   1ebec:	b0046023 	.word	0xb0046023
   1ebf0:	2d02bd70 	.word	0x2d02bd70
   1ebf4:	6005d1e5 	.word	0x6005d1e5
   1ebf8:	b0042000 	.word	0xb0042000
   1ebfc:	6830bd70 	.word	0x6830bd70
   1ec00:	d0f92800 	.word	0xd0f92800
   1ec04:	f852f000 	.word	0xf852f000
   1ec08:	b0044620 	.word	0xb0044620
   1ec0c:	2d02bd70 	.word	0x2d02bd70
   1ec10:	230ed1d7 	.word	0x230ed1d7
   1ec14:	e7ef6003 	.word	0xe7ef6003
   1ec18:	b0042002 	.word	0xb0042002
   1ec1c:	6803bd70 	.word	0x6803bd70
   1ec20:	d5ce029b 	.word	0xd5ce029b
   1ec24:	d1cc2d02 	.word	0xd1cc2d02
   1ec28:	f4236803 	.word	0xf4236803
   1ec2c:	60031300 	.word	0x60031300
   1ec30:	f4436803 	.word	0xf4436803
   1ec34:	60033300 	.word	0x60033300
   1ec38:	bf00e7de 	.word	0xbf00e7de

0001ec3c <at_client_evt_handler>:
   1ec3c:	f850b120 	.word	0xf850b120
   1ec40:	0c091b08 	.word	0x0c091b08
   1ec44:	bfa8f7ff 	.word	0xbfa8f7ff
   1ec48:	bf004770 	.word	0xbf004770

0001ec4c <rpc_at_client_init>:
   1ec4c:	f00a4801 	.word	0xf00a4801
   1ec50:	bf00bca7 	.word	0xbf00bca7
   1ec54:	00033e3c 	.word	0x00033e3c

0001ec58 <rpc_at_client_request_alloc>:
   1ec58:	2300b180 	.word	0x2300b180
   1ec5c:	b082b510 	.word	0xb082b510
   1ec60:	4604aa02 	.word	0x4604aa02
   1ec64:	3d04f842 	.word	0x3d04f842
   1ec68:	f00a2003 	.word	0xf00a2003
   1ec6c:	b918fed1 	.word	0xb918fed1
   1ec70:	b10b9b01 	.word	0xb10b9b01
   1ec74:	60233308 	.word	0x60233308
   1ec78:	bd10b002 	.word	0xbd10b002
   1ec7c:	4770200e 	.word	0x4770200e

0001ec80 <rpc_at_client_request_send>:
   1ec80:	4603b150 	.word	0x4603b150
   1ec84:	2c08f830 	.word	0x2c08f830
   1ec88:	ea422003 	.word	0xea422003
   1ec8c:	f8434101 	.word	0xf8434101
   1ec90:	46191d08 	.word	0x46191d08
   1ec94:	bea4f00a 	.word	0xbea4f00a
   1ec98:	4770200e 	.word	0x4770200e

0001ec9c <rpc_at_client_message_free>:
   1ec9c:	f1a0b120 	.word	0xf1a0b120
   1eca0:	20030108 	.word	0x20030108
   1eca4:	bee6f00a 	.word	0xbee6f00a
   1eca8:	4770200e 	.word	0x4770200e

0001ecac <rpc_at_client_data_free>:
   1ecac:	4601b118 	.word	0x4601b118
   1ecb0:	f00a2003 	.word	0xf00a2003
   1ecb4:	200ebff1 	.word	0x200ebff1
   1ecb8:	bf004770 	.word	0xbf004770

0001ecbc <logobj_event_handler>:
   1ecbc:	4b3bb530 	.word	0x4b3bb530
   1ecc0:	681db085 	.word	0x681db085
   1ecc4:	d04c2d00 	.word	0xd04c2d00
   1ecc8:	0302f248 	.word	0x0302f248
   1eccc:	d0534299 	.word	0xd0534299
   1ecd0:	f248d91c 	.word	0xf248d91c
   1ecd4:	42990303 	.word	0x42990303
   1ecd8:	f249d05a 	.word	0xf249d05a
   1ecdc:	42990301 	.word	0x42990301
   1ece0:	2400d147 	.word	0x2400d147
   1ece4:	68026843 	.word	0x68026843
   1ece8:	4402e9cd 	.word	0x4402e9cd
   1ecec:	2300e9cd 	.word	0x2300e9cd
   1ecf0:	466969e8 	.word	0x466969e8
   1ecf4:	685b6803 	.word	0x685b6803
   1ecf8:	30014798 	.word	0x30014798
   1ecfc:	4620d04e 	.word	0x4620d04e
   1ed00:	f443682b 	.word	0xf443682b
   1ed04:	602b3380 	.word	0x602b3380
   1ed08:	bd30b005 	.word	0xbd30b005
   1ed0c:	0301f248 	.word	0x0301f248
   1ed10:	d12e4299 	.word	0xd12e4299
   1ed14:	2b0068c3 	.word	0x2b0068c3
   1ed18:	6828d135 	.word	0x6828d135
   1ed1c:	0080f410 	.word	0x0080f410
   1ed20:	682bd03e 	.word	0x682bd03e
   1ed24:	2b01b29b 	.word	0x2b01b29b
   1ed28:	682bd105 	.word	0x682bd105
   1ed2c:	041b0c1b 	.word	0x041b0c1b
   1ed30:	0302f043 	.word	0x0302f043
   1ed34:	4b1e602b 	.word	0x4b1e602b
   1ed38:	f002781a 	.word	0xf002781a
   1ed3c:	2a0001ff 	.word	0x2a0001ff
   1ed40:	4a1cd031 	.word	0x4a1cd031
   1ed44:	b9097811 	.word	0xb9097811
   1ed48:	70112101 	.word	0x70112101
   1ed4c:	70182000 	.word	0x70182000
   1ed50:	f423682b 	.word	0xf423682b
   1ed54:	602b0380 	.word	0x602b0380
   1ed58:	f443682b 	.word	0xf443682b
   1ed5c:	602b0300 	.word	0x602b0300
   1ed60:	6800e7d2 	.word	0x6800e7d2
   1ed64:	d0cf2800 	.word	0xd0cf2800
   1ed68:	ff62f005 	.word	0xff62f005
   1ed6c:	b0054628 	.word	0xb0054628
   1ed70:	2000bd30 	.word	0x2000bd30
   1ed74:	bd30b005 	.word	0xbd30b005
   1ed78:	f413682b 	.word	0xf413682b
   1ed7c:	d00b0380 	.word	0xd00b0380
   1ed80:	280068c0 	.word	0x280068c0
   1ed84:	230ed0e4 	.word	0x230ed0e4
   1ed88:	606b2000 	.word	0x606b2000
   1ed8c:	bd30b005 	.word	0xbd30b005
   1ed90:	2b0168c3 	.word	0x2b0168c3
   1ed94:	e7f6d1a5 	.word	0xe7f6d1a5
   1ed98:	e7b54618 	.word	0xe7b54618
   1ed9c:	e7b32002 	.word	0xe7b32002
   1eda0:	606b230e 	.word	0x606b230e
   1eda4:	4a03e7b0 	.word	0x4a03e7b0
   1eda8:	e7cf7011 	.word	0xe7cf7011
   1edac:	200201a8 	.word	0x200201a8
   1edb0:	20025b39 	.word	0x20025b39
   1edb4:	20025b3a 	.word	0x20025b3a

0001edb8 <logobj_interface_init>:
   1edb8:	b5102300 	.word	0xb5102300
   1edbc:	4a084907 	.word	0x4a084907
   1edc0:	48094c08 	.word	0x48094c08
   1edc4:	60037023 	.word	0x60037023
   1edc8:	6013700b 	.word	0x6013700b
   1edcc:	fef4f005 	.word	0xfef4f005
   1edd0:	bf183000 	.word	0xbf183000
   1edd4:	42402001 	.word	0x42402001
   1edd8:	bf00bd10 	.word	0xbf00bd10
   1eddc:	20025b39 	.word	0x20025b39
   1ede0:	200201a4 	.word	0x200201a4
   1ede4:	20025b3a 	.word	0x20025b3a
   1ede8:	200201a8 	.word	0x200201a8

0001edec <logobj_interface_open>:
   1edec:	e92d2300 	.word	0xe92d2300
   1edf0:	286647f0 	.word	0x286647f0
   1edf4:	9300b082 	.word	0x9300b082
   1edf8:	2902d172 	.word	0x2902d172
   1edfc:	d16f4689 	.word	0xd16f4689
   1ee00:	2305f240 	.word	0x2305f240
   1ee04:	4692429a 	.word	0x4692429a
   1ee08:	4f48d16a 	.word	0x4f48d16a
   1ee0c:	2d00683d 	.word	0x2d00683d
   1ee10:	4680d17c 	.word	0x4680d17c
   1ee14:	46684a46 	.word	0x46684a46
   1ee18:	f962f004 	.word	0xf962f004
   1ee1c:	46069b00 	.word	0x46069b00
   1ee20:	d07d2b00 	.word	0xd07d2b00
   1ee24:	22044629 	.word	0x22044629
   1ee28:	603b4842 	.word	0x603b4842
   1ee2c:	fd66f013 	.word	0xfd66f013
   1ee30:	46299c00 	.word	0x46299c00
   1ee34:	8903e9c4 	.word	0x8903e9c4
   1ee38:	a014f8c4 	.word	0xa014f8c4
   1ee3c:	f005a801 	.word	0xf005a801
   1ee40:	2800fec1 	.word	0x2800fec1
   1ee44:	2201d13c 	.word	0x2201d13c
   1ee48:	9b012104 	.word	0x9b012104
   1ee4c:	73584d3a 	.word	0x73584d3a
   1ee50:	73d87398 	.word	0x73d87398
   1ee54:	72987258 	.word	0x72987258
   1ee58:	721972d8 	.word	0x721972d8
   1ee5c:	731a702a 	.word	0x731a702a
   1ee60:	46186822 	.word	0x46186822
   1ee64:	0280f442 	.word	0x0280f442
   1ee68:	f2476022 	.word	0xf2476022
   1ee6c:	f0050101 	.word	0xf0050101
   1ee70:	bb38fec1 	.word	0xbb38fec1
   1ee74:	0200f44f 	.word	0x0200f44f
   1ee78:	33fff04f 	.word	0x33fff04f
   1ee7c:	46304611 	.word	0x46304611
   1ee80:	f9d2f004 	.word	0xf9d2f004
   1ee84:	b3104604 	.word	0xb3104604
   1ee88:	2e009a00 	.word	0x2e009a00
   1ee8c:	f4436813 	.word	0xf4436813
   1ee90:	60133300 	.word	0x60133300
   1ee94:	68139a00 	.word	0x68139a00
   1ee98:	0380f423 	.word	0x0380f423
   1ee9c:	9a006013 	.word	0x9a006013
   1eea0:	f4236813 	.word	0xf4236813
   1eea4:	60130300 	.word	0x60130300
   1eea8:	2300da36 	.word	0x2300da36
   1eeac:	603b4620 	.word	0x603b4620
   1eeb0:	36fff04f 	.word	0x36fff04f
   1eeb4:	fbf0f7fe 	.word	0xfbf0f7fe
   1eeb8:	b0024630 	.word	0xb0024630
   1eebc:	87f0e8bd 	.word	0x87f0e8bd
   1eec0:	e7e1240c 	.word	0xe7e1240c
   1eec4:	f0059801 	.word	0xf0059801
   1eec8:	2405feab 	.word	0x2405feab
   1eecc:	4630e7dc 	.word	0x4630e7dc
   1eed0:	fa16f004 	.word	0xfa16f004
   1eed4:	6844b150 	.word	0x6844b150
   1eed8:	2300b144 	.word	0x2300b144
   1eedc:	e7d36043 	.word	0xe7d36043
   1eee0:	f7fe2016 	.word	0xf7fe2016
   1eee4:	f04ffbd9 	.word	0xf04ffbd9
   1eee8:	e7e536ff 	.word	0xe7e536ff
   1eeec:	68139a00 	.word	0x68139a00
   1eef0:	3300f443 	.word	0x3300f443
   1eef4:	9a006013 	.word	0x9a006013
   1eef8:	f4236813 	.word	0xf4236813
   1eefc:	60130380 	.word	0x60130380
   1ef00:	68139a00 	.word	0x68139a00
   1ef04:	0300f423 	.word	0x0300f423
   1ef08:	e7d56013 	.word	0xe7d56013
   1ef0c:	f7fe2001 	.word	0xf7fe2001
   1ef10:	f04ffbc3 	.word	0xf04ffbc3
   1ef14:	e7cf36ff 	.word	0xe7cf36ff
   1ef18:	f0044630 	.word	0xf0044630
   1ef1c:	e7c4f937 	.word	0xe7c4f937
   1ef20:	f7fe2018 	.word	0xf7fe2018
   1ef24:	f04ffbb9 	.word	0xf04ffbb9
   1ef28:	e7c536ff 	.word	0xe7c536ff
   1ef2c:	200201a8 	.word	0x200201a8
   1ef30:	0001e8d9 	.word	0x0001e8d9
   1ef34:	200201a4 	.word	0x200201a4
   1ef38:	20025b39 	.word	0x20025b39

0001ef3c <logobj_interface_read>:
   1ef3c:	43f0e92d 	.word	0x43f0e92d
   1ef40:	2900b085 	.word	0x2900b085
   1ef44:	2a00d05e 	.word	0x2a00d05e
   1ef48:	dd5b4616 	.word	0xdd5b4616
   1ef4c:	4680461f 	.word	0x4680461f
   1ef50:	f004460d 	.word	0xf004460d
   1ef54:	4604f9d5 	.word	0x4604f9d5
   1ef58:	d0592800 	.word	0xd0592800
   1ef5c:	07ba69c0 	.word	0x07ba69c0
   1ef60:	68db6803 	.word	0x68db6803
   1ef64:	4798d524 	.word	0x4798d524
   1ef68:	d03b3001 	.word	0xd03b3001
   1ef6c:	69e06823 	.word	0x69e06823
   1ef70:	3380f413 	.word	0x3380f413
   1ef74:	2100d038 	.word	0x2100d038
   1ef78:	463a6823 	.word	0x463a6823
   1ef7c:	3380f423 	.word	0x3380f423
   1ef80:	e9cd6023 	.word	0xe9cd6023
   1ef84:	e9cd1102 	.word	0xe9cd1102
   1ef88:	68035600 	.word	0x68035600
   1ef8c:	689b4669 	.word	0x689b4669
   1ef90:	46054798 	.word	0x46054798
   1ef94:	680369e0 	.word	0x680369e0
   1ef98:	479868db 	.word	0x479868db
   1ef9c:	d0033001 	.word	0xd0033001
   1efa0:	f4436823 	.word	0xf4436823
   1efa4:	60233380 	.word	0x60233380
   1efa8:	b0054628 	.word	0xb0054628
   1efac:	83f0e8bd 	.word	0x83f0e8bd
   1efb0:	f0126822 	.word	0xf0126822
   1efb4:	d1d65980 	.word	0xd1d65980
   1efb8:	1c434798 	.word	0x1c434798
   1efbc:	f44fd1d6 	.word	0xf44fd1d6
   1efc0:	6a233280 	.word	0x6a233280
   1efc4:	2b004611 	.word	0x2b004611
   1efc8:	4603bf08 	.word	0x4603bf08
   1efcc:	f0044640 	.word	0xf0044640
   1efd0:	b158f92b 	.word	0xb158f92b
   1efd4:	35fff04f 	.word	0x35fff04f
   1efd8:	fb5ef7fe 	.word	0xfb5ef7fe
   1efdc:	b0054628 	.word	0xb0054628
   1efe0:	83f0e8bd 	.word	0x83f0e8bd
   1efe4:	e7f52023 	.word	0xe7f52023
   1efe8:	e7d4461d 	.word	0xe7d4461d
   1efec:	f0044640 	.word	0xf0044640
   1eff0:	4603f987 	.word	0x4603f987
   1eff4:	d0b92800 	.word	0xd0b92800
   1eff8:	28006840 	.word	0x28006840
   1effc:	f8c3d0b6 	.word	0xf8c3d0b6
   1f000:	e7e79004 	.word	0xe7e79004
   1f004:	f7fe2016 	.word	0xf7fe2016
   1f008:	f04ffb47 	.word	0xf04ffb47
   1f00c:	e7cb35ff 	.word	0xe7cb35ff
   1f010:	f7fe2009 	.word	0xf7fe2009
   1f014:	f04ffb41 	.word	0xf04ffb41
   1f018:	e7c535ff 	.word	0xe7c535ff

0001f01c <logobj_interface_write>:
   1f01c:	41f0e92d 	.word	0x41f0e92d
   1f020:	2900b082 	.word	0x2900b082
   1f024:	2a04d05b 	.word	0x2a04d05b
   1f028:	461ed159 	.word	0x461ed159
   1f02c:	460d4607 	.word	0x460d4607
   1f030:	f966f004 	.word	0xf966f004
   1f034:	28004604 	.word	0x28004604
   1f038:	07b0d067 	.word	0x07b0d067
   1f03c:	6823d526 	.word	0x6823d526
   1f040:	d55e039b 	.word	0xd55e039b
   1f044:	68232600 	.word	0x68232600
   1f048:	f4232100 	.word	0xf4232100
   1f04c:	60233300 	.word	0x60233300
   1f050:	f8d5a801 	.word	0xf8d5a801
   1f054:	f0058000 	.word	0xf0058000
   1f058:	b9f8fdb5 	.word	0xb9f8fdb5
   1f05c:	9b012504 	.word	0x9b012504
   1f060:	0103f247 	.word	0x0103f247
   1f064:	800cf8c3 	.word	0x800cf8c3
   1f068:	72987258 	.word	0x72987258
   1f06c:	721d72d8 	.word	0x721d72d8
   1f070:	f0054618 	.word	0xf0054618
   1f074:	4680fdbf 	.word	0x4680fdbf
   1f078:	b9cebb40 	.word	0xb9cebb40
   1f07c:	68234628 	.word	0x68234628
   1f080:	3300f443 	.word	0x3300f443
   1f084:	b0026023 	.word	0xb0026023
   1f088:	81f0e8bd 	.word	0x81f0e8bd
   1f08c:	00d96823 	.word	0x00d96823
   1f090:	6823d4d5 	.word	0x6823d4d5
   1f094:	d536039a 	.word	0xd536039a
   1f098:	e7d42601 	.word	0xe7d42601
   1f09c:	6823200c 	.word	0x6823200c
   1f0a0:	3300f443 	.word	0x3300f443
   1f0a4:	f7fe6023 	.word	0xf7fe6023
   1f0a8:	f04ffaf7 	.word	0xf04ffaf7
   1f0ac:	e7ea30ff 	.word	0xe7ea30ff
   1f0b0:	3280f44f 	.word	0x3280f44f
   1f0b4:	33fff04f 	.word	0x33fff04f
   1f0b8:	46384611 	.word	0x46384611
   1f0bc:	f8b4f004 	.word	0xf8b4f004
   1f0c0:	6823b198 	.word	0x6823b198
   1f0c4:	3300f443 	.word	0x3300f443
   1f0c8:	e7ec6023 	.word	0xe7ec6023
   1f0cc:	f0059801 	.word	0xf0059801
   1f0d0:	6823fda7 	.word	0x6823fda7
   1f0d4:	f4432005 	.word	0xf4432005
   1f0d8:	60233300 	.word	0x60233300
   1f0dc:	2016e7e3 	.word	0x2016e7e3
   1f0e0:	fadaf7fe 	.word	0xfadaf7fe
   1f0e4:	30fff04f 	.word	0x30fff04f
   1f0e8:	4638e7cd 	.word	0x4638e7cd
   1f0ec:	f908f004 	.word	0xf908f004
   1f0f0:	28004603 	.word	0x28004603
   1f0f4:	6840d0c2 	.word	0x6840d0c2
   1f0f8:	d0bf2800 	.word	0xd0bf2800
   1f0fc:	8004f8c3 	.word	0x8004f8c3
   1f100:	2073e7df 	.word	0x2073e7df
   1f104:	2009e7cf 	.word	0x2009e7cf
   1f108:	2009e7cd 	.word	0x2009e7cd
   1f10c:	fac4f7fe 	.word	0xfac4f7fe
   1f110:	30fff04f 	.word	0x30fff04f
   1f114:	bf00e7b7 	.word	0xbf00e7b7

0001f118 <logobj_interface_setopt>:
   1f118:	2901b5f0 	.word	0x2901b5f0
   1f11c:	d068b085 	.word	0xd068b085
   1f120:	f240461e 	.word	0xf240461e
   1f124:	42992305 	.word	0x42992305
   1f128:	8095f040 	.word	0x8095f040
   1f12c:	46154607 	.word	0x46154607
   1f130:	f8e6f004 	.word	0xf8e6f004
   1f134:	28004604 	.word	0x28004604
   1f138:	80b2f000 	.word	0x80b2f000
   1f13c:	d0192d01 	.word	0xd0192d01
   1f140:	d0102d02 	.word	0xd0102d02
   1f144:	6803252a 	.word	0x6803252a
   1f148:	0380f423 	.word	0x0380f423
   1f14c:	68236023 	.word	0x68236023
   1f150:	f4234628 	.word	0xf4234628
   1f154:	60230300 	.word	0x60230300
   1f158:	fa9ef7fe 	.word	0xfa9ef7fe
   1f15c:	35fff04f 	.word	0x35fff04f
   1f160:	b0054628 	.word	0xb0054628
   1f164:	b116bdf0 	.word	0xb116bdf0
   1f168:	2b019b0a 	.word	0x2b019b0a
   1f16c:	6823d049 	.word	0x6823d049
   1f170:	e7e92516 	.word	0xe7e92516
   1f174:	d0fa2e00 	.word	0xd0fa2e00
   1f178:	2b049b0a 	.word	0x2b049b0a
   1f17c:	2100d1f7 	.word	0x2100d1f7
   1f180:	f005a803 	.word	0xf005a803
   1f184:	4605fd1f 	.word	0x4605fd1f
   1f188:	d16a2800 	.word	0xd16a2800
   1f18c:	22089803 	.word	0x22089803
   1f190:	300c4629 	.word	0x300c4629
   1f194:	fbb2f013 	.word	0xfbb2f013
   1f198:	46319803 	.word	0x46319803
   1f19c:	300c9a0a 	.word	0x300c9a0a
   1f1a0:	fba1f013 	.word	0xfba1f013
   1f1a4:	98032308 	.word	0x98032308
   1f1a8:	0102f247 	.word	0x0102f247
   1f1ac:	72457203 	.word	0x72457203
   1f1b0:	72c57285 	.word	0x72c57285
   1f1b4:	f4436823 	.word	0xf4436823
   1f1b8:	60230380 	.word	0x60230380
   1f1bc:	fd1af005 	.word	0xfd1af005
   1f1c0:	d1512800 	.word	0xd1512800
   1f1c4:	0200f44f 	.word	0x0200f44f
   1f1c8:	33fff04f 	.word	0x33fff04f
   1f1cc:	46384611 	.word	0x46384611
   1f1d0:	f82af004 	.word	0xf82af004
   1f1d4:	28004605 	.word	0x28004605
   1f1d8:	4638d13b 	.word	0x4638d13b
   1f1dc:	f890f004 	.word	0xf890f004
   1f1e0:	d04f2800 	.word	0xd04f2800
   1f1e4:	2b006843 	.word	0x2b006843
   1f1e8:	2200d04c 	.word	0x2200d04c
   1f1ec:	6042461d 	.word	0x6042461d
   1f1f0:	9c0ae02f 	.word	0x9c0ae02f
   1f1f4:	f0049400 	.word	0xf0049400
   1f1f8:	4605f8ab 	.word	0x4605f8ab
   1f1fc:	b0054628 	.word	0xb0054628
   1f200:	2100bdf0 	.word	0x2100bdf0
   1f204:	7835a803 	.word	0x7835a803
   1f208:	fcdcf005 	.word	0xfcdcf005
   1f20c:	2d01bb48 	.word	0x2d01bb48
   1f210:	4b26bf08 	.word	0x4b26bf08
   1f214:	0204f04f 	.word	0x0204f04f
   1f218:	701dbf08 	.word	0x701dbf08
   1f21c:	98032300 	.word	0x98032300
   1f220:	0101f247 	.word	0x0101f247
   1f224:	60c57243 	.word	0x60c57243
   1f228:	72c37283 	.word	0x72c37283
   1f22c:	68237202 	.word	0x68237202
   1f230:	0380f443 	.word	0x0380f443
   1f234:	f0056023 	.word	0xf0056023
   1f238:	4606fcdd 	.word	0x4606fcdd
   1f23c:	f44fb9a0 	.word	0xf44fb9a0
   1f240:	f04f0200 	.word	0xf04f0200
   1f244:	461133ff 	.word	0x461133ff
   1f248:	f0034638 	.word	0xf0034638
   1f24c:	4605ffed 	.word	0x4605ffed
   1f250:	6823b180 	.word	0x6823b180
   1f254:	202ae778 	.word	0x202ae778
   1f258:	fa1ef7fe 	.word	0xfa1ef7fe
   1f25c:	35fff04f 	.word	0x35fff04f
   1f260:	6823e77e 	.word	0x6823e77e
   1f264:	e76f250c 	.word	0xe76f250c
   1f268:	f0059803 	.word	0xf0059803
   1f26c:	2505fcd9 	.word	0x2505fcd9
   1f270:	e7696823 	.word	0xe7696823
   1f274:	f0044638 	.word	0xf0044638
   1f278:	b140f843 	.word	0xb140f843
   1f27c:	b1356845 	.word	0xb1356845
   1f280:	e7e66046 	.word	0xe7e66046
   1f284:	22044631 	.word	0x22044631
   1f288:	f0134809 	.word	0xf0134809
   1f28c:	6823fb2c 	.word	0x6823fb2c
   1f290:	0380f423 	.word	0x0380f423
   1f294:	68236023 	.word	0x68236023
   1f298:	0300f423 	.word	0x0300f423
   1f29c:	e75f6023 	.word	0xe75f6023
   1f2a0:	f7fe2009 	.word	0xf7fe2009
   1f2a4:	f04ff9f9 	.word	0xf04ff9f9
   1f2a8:	e75935ff 	.word	0xe75935ff
   1f2ac:	20025b39 	.word	0x20025b39
   1f2b0:	200201a4 	.word	0x200201a4

0001f2b4 <logobj_interface_getopt>:
   1f2b4:	2901b5f0 	.word	0x2901b5f0
   1f2b8:	9e08b083 	.word	0x9e08b083
   1f2bc:	461fd030 	.word	0x461fd030
   1f2c0:	2305f240 	.word	0x2305f240
   1f2c4:	d1344299 	.word	0xd1344299
   1f2c8:	f0044615 	.word	0xf0044615
   1f2cc:	2800f819 	.word	0x2800f819
   1f2d0:	2d01d037 	.word	0x2d01d037
   1f2d4:	2d02d015 	.word	0x2d02d015
   1f2d8:	b387d10b 	.word	0xb387d10b
   1f2dc:	b3736833 	.word	0xb3736833
   1f2e0:	22012300 	.word	0x22012300
   1f2e4:	491a4618 	.word	0x491a4618
   1f2e8:	70397809 	.word	0x70397809
   1f2ec:	b0036032 	.word	0xb0036032
   1f2f0:	2009bdf0 	.word	0x2009bdf0
   1f2f4:	f9d0f7fe 	.word	0xf9d0f7fe
   1f2f8:	33fff04f 	.word	0x33fff04f
   1f2fc:	b0034618 	.word	0xb0034618
   1f300:	b1e7bdf0 	.word	0xb1e7bdf0
   1f304:	2b036833 	.word	0x2b036833
   1f308:	4638d919 	.word	0x4638d919
   1f30c:	49112204 	.word	0x49112204
   1f310:	fae9f013 	.word	0xfae9f013
   1f314:	22042300 	.word	0x22042300
   1f318:	60324618 	.word	0x60324618
   1f31c:	bdf0b003 	.word	0xbdf0b003
   1f320:	f0049600 	.word	0xf0049600
   1f324:	4603f84b 	.word	0x4603f84b
   1f328:	d1e32800 	.word	0xd1e32800
   1f32c:	b0034618 	.word	0xb0034618
   1f330:	202abdf0 	.word	0x202abdf0
   1f334:	f9b0f7fe 	.word	0xf9b0f7fe
   1f338:	33fff04f 	.word	0x33fff04f
   1f33c:	2016e7de 	.word	0x2016e7de
   1f340:	2009e7d8 	.word	0x2009e7d8
   1f344:	f9a8f7fe 	.word	0xf9a8f7fe
   1f348:	33fff04f 	.word	0x33fff04f
   1f34c:	bf00e7d6 	.word	0xbf00e7d6
   1f350:	20025b3a 	.word	0x20025b3a
   1f354:	200201a4 	.word	0x200201a4

0001f358 <logobj_interface_close>:
   1f358:	4604b510 	.word	0x4604b510
   1f35c:	ffd0f003 	.word	0xffd0f003
   1f360:	4620b138 	.word	0x4620b138
   1f364:	ff12f003 	.word	0xff12f003
   1f368:	4a052300 	.word	0x4a052300
   1f36c:	60134618 	.word	0x60134618
   1f370:	2009bd10 	.word	0x2009bd10
   1f374:	f990f7fe 	.word	0xf990f7fe
   1f378:	30fff04f 	.word	0x30fff04f
   1f37c:	bf00bd10 	.word	0xbf00bd10
   1f380:	200201a8 	.word	0x200201a8

0001f384 <transport_reset>:
   1f384:	47702000 	.word	0x47702000

0001f388 <transport_data_free>:
   1f388:	e9d34b0b 	.word	0xe9d34b0b
   1f38c:	44132300 	.word	0x44132300
   1f390:	d20d4298 	.word	0xd20d4298
   1f394:	d80b4282 	.word	0xd80b4282
   1f398:	4604b510 	.word	0x4604b510
   1f39c:	feeef005 	.word	0xfeeef005
   1f3a0:	4a06b140 	.word	0x4a06b140
   1f3a4:	60026084 	.word	0x60026084
   1f3a8:	4010e8bd 	.word	0x4010e8bd
   1f3ac:	be2ef005 	.word	0xbe2ef005
   1f3b0:	b9f0f00b 	.word	0xb9f0f00b
   1f3b4:	bf00bd10 	.word	0xbf00bd10
   1f3b8:	200201ac 	.word	0x200201ac
   1f3bc:	00020001 	.word	0x00020001

0001f3c0 <rpc_transport_ipc_init>:
   1f3c0:	d02b2800 	.word	0xd02b2800
   1f3c4:	b089b530 	.word	0xb089b530
   1f3c8:	4669aa01 	.word	0x4669aa01
   1f3cc:	f0054604 	.word	0xf0054604
   1f3d0:	4603fd33 	.word	0x4603fd33
   1f3d4:	4a13b140 	.word	0x4a13b140
   1f3d8:	0028f104 	.word	0x0028f104
   1f3dc:	e882c803 	.word	0xe882c803
   1f3e0:	46180003 	.word	0x46180003
   1f3e4:	bd30b009 	.word	0xbd30b009
   1f3e8:	1200e9dd 	.word	0x1200e9dd
   1f3ec:	f0004620 	.word	0xf0004620
   1f3f0:	4603f9ad 	.word	0x4603f9ad
   1f3f4:	d1ee2800 	.word	0xd1ee2800
   1f3f8:	490c4b0b 	.word	0x490c4b0b
   1f3fc:	4a0d480c 	.word	0x4a0d480c
   1f400:	4d0d9303 	.word	0x4d0d9303
   1f404:	91044b0d 	.word	0x91044b0d
   1f408:	490d9005 	.word	0x490d9005
   1f40c:	9307a802 	.word	0x9307a802
   1f410:	92029506 	.word	0x92029506
   1f414:	fa3cf00a 	.word	0xfa3cf00a
   1f418:	e7dc4603 	.word	0xe7dc4603
   1f41c:	4618230e 	.word	0x4618230e
   1f420:	bf004770 	.word	0xbf004770
   1f424:	200201ac 	.word	0x200201ac
   1f428:	0002510d 	.word	0x0002510d
   1f42c:	000251dd 	.word	0x000251dd
   1f430:	0001fd69 	.word	0x0001fd69
   1f434:	0002500d 	.word	0x0002500d
   1f438:	0001f389 	.word	0x0001f389
   1f43c:	0001f385 	.word	0x0001f385
   1f440:	200201b4 	.word	0x200201b4

0001f444 <rpc_transport_rx_handle>:
   1f444:	b508b160 	.word	0xb508b160
   1f448:	b2db6843 	.word	0xb2db6843
   1f44c:	d00e2b02 	.word	0xd00e2b02
   1f450:	0c1b6803 	.word	0x0c1b6803
   1f454:	d0052b02 	.word	0xd0052b02
   1f458:	d00e2b04 	.word	0xd00e2b04
   1f45c:	bd082000 	.word	0xbd082000
   1f460:	47702000 	.word	0x47702000
   1f464:	f00b6880 	.word	0xf00b6880
   1f468:	2000f995 	.word	0x2000f995
   1f46c:	4601bd08 	.word	0x4601bd08
   1f470:	4008e8bd 	.word	0x4008e8bd
   1f474:	f00a4803 	.word	0xf00a4803
   1f478:	4802b8fd 	.word	0x4802b8fd
   1f47c:	fa68f00a 	.word	0xfa68f00a
   1f480:	bd082000 	.word	0xbd082000
   1f484:	200201b4 	.word	0x200201b4
   1f488:	bf004770 	.word	0xbf004770

0001f48c <rpc_transport_ipc_fault_handler>:
   1f48c:	b918f000 	.word	0xb918f000

0001f490 <nrf_socket>:
   1f490:	4604b570 	.word	0x4604b570
   1f494:	4616460d 	.word	0x4616460d
   1f498:	f8c0f007 	.word	0xf8c0f007
   1f49c:	6803b130 	.word	0x6803b130
   1f4a0:	46294632 	.word	0x46294632
   1f4a4:	e8bd4620 	.word	0xe8bd4620
   1f4a8:	47184070 	.word	0x47184070
   1f4ac:	30fff04f 	.word	0x30fff04f
   1f4b0:	bf00bd70 	.word	0xbf00bd70

0001f4b4 <nrf_close>:
   1f4b4:	4604b510 	.word	0x4604b510
   1f4b8:	f904f007 	.word	0xf904f007
   1f4bc:	6843b120 	.word	0x6843b120
   1f4c0:	e8bd4620 	.word	0xe8bd4620
   1f4c4:	47184010 	.word	0x47184010
   1f4c8:	30fff04f 	.word	0x30fff04f
   1f4cc:	bf00bd10 	.word	0xbf00bd10

0001f4d0 <nrf_sendto>:
   1f4d0:	47f0e92d 	.word	0x47f0e92d
   1f4d4:	e9dd460d 	.word	0xe9dd460d
   1f4d8:	46168908 	.word	0x46168908
   1f4dc:	4604461f 	.word	0x4604461f
   1f4e0:	f8f0f007 	.word	0xf8f0f007
   1f4e4:	e9cdb158 	.word	0xe9cdb158
   1f4e8:	f8d08908 	.word	0xf8d08908
   1f4ec:	463be008 	.word	0x463be008
   1f4f0:	46294632 	.word	0x46294632
   1f4f4:	46f44620 	.word	0x46f44620
   1f4f8:	47f0e8bd 	.word	0x47f0e8bd
   1f4fc:	f04f4760 	.word	0xf04f4760
   1f500:	e8bd30ff 	.word	0xe8bd30ff
   1f504:	bf0087f0 	.word	0xbf0087f0

0001f508 <nrf_send>:
   1f508:	41f0e92d 	.word	0x41f0e92d
   1f50c:	460eb082 	.word	0x460eb082
   1f510:	46984617 	.word	0x46984617
   1f514:	f0074605 	.word	0xf0074605
   1f518:	b160f8d5 	.word	0xb160f8d5
   1f51c:	20004604 	.word	0x20004604
   1f520:	0000e9cd 	.word	0x0000e9cd
   1f524:	463a4643 	.word	0x463a4643
   1f528:	46284631 	.word	0x46284631
   1f52c:	47a068a4 	.word	0x47a068a4
   1f530:	e8bdb002 	.word	0xe8bdb002
   1f534:	f04f81f0 	.word	0xf04f81f0
   1f538:	e7f930ff 	.word	0xe7f930ff

0001f53c <nrf_recvfrom>:
   1f53c:	47f0e92d 	.word	0x47f0e92d
   1f540:	e9dd460d 	.word	0xe9dd460d
   1f544:	46168908 	.word	0x46168908
   1f548:	4604461f 	.word	0x4604461f
   1f54c:	f8baf007 	.word	0xf8baf007
   1f550:	e9cdb158 	.word	0xe9cdb158
   1f554:	f8d08908 	.word	0xf8d08908
   1f558:	463be00c 	.word	0x463be00c
   1f55c:	46294632 	.word	0x46294632
   1f560:	46f44620 	.word	0x46f44620
   1f564:	47f0e8bd 	.word	0x47f0e8bd
   1f568:	f04f4760 	.word	0xf04f4760
   1f56c:	e8bd30ff 	.word	0xe8bd30ff
   1f570:	bf0087f0 	.word	0xbf0087f0

0001f574 <nrf_recv>:
   1f574:	41f0e92d 	.word	0x41f0e92d
   1f578:	460eb082 	.word	0x460eb082
   1f57c:	46984617 	.word	0x46984617
   1f580:	f0074605 	.word	0xf0074605
   1f584:	b160f89f 	.word	0xb160f89f
   1f588:	20004604 	.word	0x20004604
   1f58c:	0000e9cd 	.word	0x0000e9cd
   1f590:	463a4643 	.word	0x463a4643
   1f594:	46284631 	.word	0x46284631
   1f598:	47a068e4 	.word	0x47a068e4
   1f59c:	e8bdb002 	.word	0xe8bdb002
   1f5a0:	f04f81f0 	.word	0xf04f81f0
   1f5a4:	e7f930ff 	.word	0xe7f930ff

0001f5a8 <nrf_connect>:
   1f5a8:	460db570 	.word	0x460db570
   1f5ac:	46044616 	.word	0x46044616
   1f5b0:	f888f007 	.word	0xf888f007
   1f5b4:	6943b130 	.word	0x6943b130
   1f5b8:	46294632 	.word	0x46294632
   1f5bc:	e8bd4620 	.word	0xe8bd4620
   1f5c0:	47184070 	.word	0x47184070
   1f5c4:	30fff04f 	.word	0x30fff04f
   1f5c8:	bf00bd70 	.word	0xbf00bd70

0001f5cc <nrf_listen>:
   1f5cc:	460db570 	.word	0x460db570
   1f5d0:	f0074604 	.word	0xf0074604
   1f5d4:	b128f877 	.word	0xb128f877
   1f5d8:	46296983 	.word	0x46296983
   1f5dc:	e8bd4620 	.word	0xe8bd4620
   1f5e0:	47184070 	.word	0x47184070
   1f5e4:	30fff04f 	.word	0x30fff04f
   1f5e8:	bf00bd70 	.word	0xbf00bd70

0001f5ec <nrf_accept>:
   1f5ec:	41f0e92d 	.word	0x41f0e92d
   1f5f0:	4616460d 	.word	0x4616460d
   1f5f4:	f0074604 	.word	0xf0074604
   1f5f8:	b140f865 	.word	0xb140f865
   1f5fc:	463269c7 	.word	0x463269c7
   1f600:	46204629 	.word	0x46204629
   1f604:	e8bd46bc 	.word	0xe8bd46bc
   1f608:	230041f0 	.word	0x230041f0
   1f60c:	f04f4760 	.word	0xf04f4760
   1f610:	e8bd30ff 	.word	0xe8bd30ff
   1f614:	bf0081f0 	.word	0xbf0081f0

0001f618 <nrf_bind>:
   1f618:	460db570 	.word	0x460db570
   1f61c:	46044616 	.word	0x46044616
   1f620:	f850f007 	.word	0xf850f007
   1f624:	6903b130 	.word	0x6903b130
   1f628:	46294632 	.word	0x46294632
   1f62c:	e8bd4620 	.word	0xe8bd4620
   1f630:	47184070 	.word	0x47184070
   1f634:	30fff04f 	.word	0x30fff04f
   1f638:	bf00bd70 	.word	0xbf00bd70

0001f63c <nrf_setsockopt>:
   1f63c:	41f0e92d 	.word	0x41f0e92d
   1f640:	8018f8dd 	.word	0x8018f8dd
   1f644:	4616460d 	.word	0x4616460d
   1f648:	4604461f 	.word	0x4604461f
   1f64c:	f83af007 	.word	0xf83af007
   1f650:	f8cdb158 	.word	0xf8cdb158
   1f654:	f8d08018 	.word	0xf8d08018
   1f658:	463be020 	.word	0x463be020
   1f65c:	46294632 	.word	0x46294632
   1f660:	46f44620 	.word	0x46f44620
   1f664:	41f0e8bd 	.word	0x41f0e8bd
   1f668:	f04f4760 	.word	0xf04f4760
   1f66c:	e8bd30ff 	.word	0xe8bd30ff
   1f670:	bf0081f0 	.word	0xbf0081f0

0001f674 <nrf_getsockopt>:
   1f674:	41f0e92d 	.word	0x41f0e92d
   1f678:	8018f8dd 	.word	0x8018f8dd
   1f67c:	4616460d 	.word	0x4616460d
   1f680:	4604461f 	.word	0x4604461f
   1f684:	f81ef007 	.word	0xf81ef007
   1f688:	f8cdb158 	.word	0xf8cdb158
   1f68c:	f8d08018 	.word	0xf8d08018
   1f690:	463be024 	.word	0x463be024
   1f694:	46294632 	.word	0x46294632
   1f698:	46f44620 	.word	0x46f44620
   1f69c:	41f0e8bd 	.word	0x41f0e8bd
   1f6a0:	f04f4760 	.word	0xf04f4760
   1f6a4:	e8bd30ff 	.word	0xe8bd30ff
   1f6a8:	bf0081f0 	.word	0xbf0081f0

0001f6ac <nrf_getaddrinfo>:
   1f6ac:	b8faf00d 	.word	0xb8faf00d

0001f6b0 <nrf_freeaddrinfo>:
   1f6b0:	b8faf00d 	.word	0xb8faf00d

0001f6b4 <nrf_poll>:
   1f6b4:	b8faf00d 	.word	0xb8faf00d

0001f6b8 <nrf_fcntl>:
   1f6b8:	b952f00d 	.word	0xb952f00d

0001f6bc <bsd_recoverable_error_handler>:
   1f6bc:	bf004770 	.word	0xbf004770

0001f6c0 <bsd_platform_error_handler>:
   1f6c0:	f7ffb508 	.word	0xf7ffb508
   1f6c4:	bd08fffb 	.word	0xbd08fffb

0001f6c8 <bsd_init>:
   1f6c8:	4c06b510 	.word	0x4c06b510
   1f6cc:	b92b7823 	.word	0xb92b7823
   1f6d0:	ff38f006 	.word	0xff38f006
   1f6d4:	2301b908 	.word	0x2301b908
   1f6d8:	bd107023 	.word	0xbd107023
   1f6dc:	30fff04f 	.word	0x30fff04f
   1f6e0:	bf00bd10 	.word	0xbf00bd10
   1f6e4:	20025b3b 	.word	0x20025b3b

0001f6e8 <symbol_000fa2a>:
   1f6e8:	2300b110 	.word	0x2300b110
   1f6ec:	3300e9c0 	.word	0x3300e9c0
   1f6f0:	bf004770 	.word	0xbf004770

0001f6f4 <symbol_00066b4>:
   1f6f4:	d0052802 	.word	0xd0052802
   1f6f8:	28034b03 	.word	0x28034b03
   1f6fc:	4618bf0c 	.word	0x4618bf0c
   1f700:	47702000 	.word	0x47702000
   1f704:	47704801 	.word	0x47704801
   1f708:	00033dcc 	.word	0x00033dcc
   1f70c:	00033d9c 	.word	0x00033d9c

0001f710 <symbol_000194a>:
   1f710:	b159b160 	.word	0xb159b160
   1f714:	6806b570 	.word	0x6806b570
   1f718:	6a4bb966 	.word	0x6a4bb966
   1f71c:	460d4604 	.word	0x460d4604
   1f720:	60604798 	.word	0x60604798
   1f724:	6025b120 	.word	0x6025b120
   1f728:	bd704630 	.word	0xbd704630
   1f72c:	47704802 	.word	0x47704802
   1f730:	bd704802 	.word	0xbd704802
   1f734:	bd704800 	.word	0xbd704800
   1f738:	ffffc180 	.word	0xffffc180
   1f73c:	ffffc080 	.word	0xffffc080

0001f740 <symbol_00005ae>:
   1f740:	6800b110 	.word	0x6800b110
   1f744:	7800b100 	.word	0x7800b100
   1f748:	bf004770 	.word	0xbf004770

0001f74c <rpc_transport_ipc_rx_init>:
   1f74c:	f0002800 	.word	0xf0002800
   1f750:	e92d80ff 	.word	0xe92d80ff
   1f754:	68054ff0 	.word	0x68054ff0
   1f758:	2d00b095 	.word	0x2d00b095
   1f75c:	80eef000 	.word	0x80eef000
   1f760:	2b006883 	.word	0x2b006883
   1f764:	80eaf000 	.word	0x80eaf000
   1f768:	2f006907 	.word	0x2f006907
   1f76c:	80e6f000 	.word	0x80e6f000
   1f770:	2c006a84 	.word	0x2c006a84
   1f774:	80e2f000 	.word	0x80e2f000
   1f778:	2c1b6844 	.word	0x2c1b6844
   1f77c:	80e3f240 	.word	0x80e3f240
   1f780:	2c0b68c4 	.word	0x2c0b68c4
   1f784:	80dff240 	.word	0x80dff240
   1f788:	e014f8d0 	.word	0xe014f8d0
   1f78c:	0f17f1be 	.word	0x0f17f1be
   1f790:	80d9f240 	.word	0x80d9f240
   1f794:	46042600 	.word	0x46042600
   1f798:	e9cd486f 	.word	0xe9cd486f
   1f79c:	f8df1200 	.word	0xf8df1200
   1f7a0:	496ea1d8 	.word	0x496ea1d8
   1f7a4:	6ba08006 	.word	0x6ba08006
   1f7a8:	c1d0f8df 	.word	0xc1d0f8df
   1f7ac:	81d0f8df 	.word	0x81d0f8df
   1f7b0:	b1d0f8df 	.word	0xb1d0f8df
   1f7b4:	91d0f8df 	.word	0x91d0f8df
   1f7b8:	600e4672 	.word	0x600e4672
   1f7bc:	0000f8ca 	.word	0x0000f8ca
   1f7c0:	46384631 	.word	0x46384631
   1f7c4:	6000f8cc 	.word	0x6000f8cc
   1f7c8:	3000f8cb 	.word	0x3000f8cb
   1f7cc:	6000f8c8 	.word	0x6000f8c8
   1f7d0:	6000f8c9 	.word	0x6000f8c9
   1f7d4:	f892f013 	.word	0xf892f013
   1f7d8:	463869e3 	.word	0x463869e3
   1f7dc:	69a3603b 	.word	0x69a3603b
   1f7e0:	f001607b 	.word	0xf001607b
   1f7e4:	2201fd45 	.word	0x2201fd45
   1f7e8:	0c04f04f 	.word	0x0c04f04f
   1f7ec:	495d4b5c 	.word	0x495d4b5c
   1f7f0:	5610f8c3 	.word	0x5610f8c3
   1f7f4:	20806809 	.word	0x20806809
   1f7f8:	495b9104 	.word	0x495b9104
   1f7fc:	e010f8dd 	.word	0xe010f8dd
   1f800:	6614f8c3 	.word	0x6614f8c3
   1f804:	702e6809 	.word	0x702e6809
   1f808:	706e9103 	.word	0x706e9103
   1f80c:	70aa70ee 	.word	0x70aa70ee
   1f810:	6aa19903 	.word	0x6aa19903
   1f814:	e000f8db 	.word	0xe000f8db
   1f818:	6ae16069 	.word	0x6ae16069
   1f81c:	60a99c01 	.word	0x60a99c01
   1f820:	9c0060ec 	.word	0x9c0060ec
   1f824:	61af4951 	.word	0x61af4951
   1f828:	e014f8c5 	.word	0xe014f8c5
   1f82c:	f8c3612c 	.word	0xf8c3612c
   1f830:	680c2590 	.word	0x680c2590
   1f834:	6192f5a1 	.word	0x6192f5a1
   1f838:	9c059405 	.word	0x9c059405
   1f83c:	c598f8c3 	.word	0xc598f8c3
   1f840:	4498f8d1 	.word	0x4498f8d1
   1f844:	6780f44f 	.word	0x6780f44f
   1f848:	9c069406 	.word	0x9c069406
   1f84c:	f8c32410 	.word	0xf8c32410
   1f850:	f8d145a0 	.word	0xf8d145a0
   1f854:	4d4644a0 	.word	0x4d4644a0
   1f858:	9c079407 	.word	0x9c079407
   1f85c:	f8c32440 	.word	0xf8c32440
   1f860:	f8d145a8 	.word	0xf8d145a8
   1f864:	940844a8 	.word	0x940844a8
   1f868:	f8c39c08 	.word	0xf8c39c08
   1f86c:	f8d105ac 	.word	0xf8d105ac
   1f870:	900904ac 	.word	0x900904ac
   1f874:	f8c39809 	.word	0xf8c39809
   1f878:	68086100 	.word	0x68086100
   1f87c:	980a900a 	.word	0x980a900a
   1f880:	6108f8c3 	.word	0x6108f8c3
   1f884:	900b6888 	.word	0x900b6888
   1f888:	f8c3980b 	.word	0xf8c3980b
   1f88c:	69086110 	.word	0x69086110
   1f890:	980c900c 	.word	0x980c900c
   1f894:	6118f8c3 	.word	0x6118f8c3
   1f898:	900d6988 	.word	0x900d6988
   1f89c:	f8c3980d 	.word	0xf8c3980d
   1f8a0:	69c8611c 	.word	0x69c8611c
   1f8a4:	7101f501 	.word	0x7101f501
   1f8a8:	980e900e 	.word	0x980e900e
   1f8ac:	0304f8d3 	.word	0x0304f8d3
   1f8b0:	f8c34310 	.word	0xf8c34310
   1f8b4:	680c0304 	.word	0x680c0304
   1f8b8:	940f482e 	.word	0x940f482e
   1f8bc:	f8d39c0f 	.word	0xf8d39c0f
   1f8c0:	ea444304 	.word	0xea444304
   1f8c4:	f8c3040c 	.word	0xf8c3040c
   1f8c8:	680c4304 	.word	0x680c4304
   1f8cc:	9c109410 	.word	0x9c109410
   1f8d0:	4304f8d3 	.word	0x4304f8d3
   1f8d4:	0410f044 	.word	0x0410f044
   1f8d8:	4304f8c3 	.word	0x4304f8c3
   1f8dc:	9411680c 	.word	0x9411680c
   1f8e0:	f8d39c11 	.word	0xf8d39c11
   1f8e4:	f0444304 	.word	0xf0444304
   1f8e8:	f8c30440 	.word	0xf8c30440
   1f8ec:	680c4304 	.word	0x680c4304
   1f8f0:	9c129412 	.word	0x9c129412
   1f8f4:	4304f8d3 	.word	0x4304f8d3
   1f8f8:	0480f044 	.word	0x0480f044
   1f8fc:	4304f8c3 	.word	0x4304f8c3
   1f900:	3000f8da 	.word	0x3000f8da
   1f904:	015b6809 	.word	0x015b6809
   1f908:	b2db9113 	.word	0xb2db9113
   1f90c:	f8c89913 	.word	0xf8c89913
   1f910:	f8802000 	.word	0xf8802000
   1f914:	f8c0332a 	.word	0xf8c0332a
   1f918:	60477184 	.word	0x60477184
   1f91c:	f8c59602 	.word	0xf8c59602
   1f920:	f8d56610 	.word	0xf8d56610
   1f924:	93023610 	.word	0x93023610
   1f928:	f8d89b02 	.word	0xf8d89b02
   1f92c:	2b013000 	.word	0x2b013000
   1f930:	f8d9d0fb 	.word	0xf8d9d0fb
   1f934:	b0150000 	.word	0xb0150000
   1f938:	8ff0e8bd 	.word	0x8ff0e8bd
   1f93c:	000ef24c 	.word	0x000ef24c
   1f940:	e8bdb015 	.word	0xe8bdb015
   1f944:	f24c8ff0 	.word	0xf24c8ff0
   1f948:	b0150009 	.word	0xb0150009
   1f94c:	8ff0e8bd 	.word	0x8ff0e8bd
   1f950:	000ef24c 	.word	0x000ef24c
   1f954:	bf004770 	.word	0xbf004770
   1f958:	20025b08 	.word	0x20025b08
   1f95c:	200201c4 	.word	0x200201c4
   1f960:	4002a000 	.word	0x4002a000
   1f964:	4002a610 	.word	0x4002a610
   1f968:	4002a614 	.word	0x4002a614
   1f96c:	4002a590 	.word	0x4002a590
   1f970:	40005000 	.word	0x40005000
   1f974:	e000e100 	.word	0xe000e100
   1f978:	200201bc 	.word	0x200201bc
   1f97c:	200201c8 	.word	0x200201c8
   1f980:	200201c0 	.word	0x200201c0
   1f984:	200201cc 	.word	0x200201cc
   1f988:	200201b8 	.word	0x200201b8

0001f98c <IPC_IRQHandler>:
   1f98c:	4ff0e92d 	.word	0x4ff0e92d
   1f990:	6580f44f 	.word	0x6580f44f
   1f994:	b0874ca7 	.word	0xb0874ca7
   1f998:	5084f8c4 	.word	0x5084f8c4
   1f99c:	8f4ff3bf 	.word	0x8f4ff3bf
   1f9a0:	8f6ff3bf 	.word	0x8f6ff3bf
   1f9a4:	f8c44ea4 	.word	0xf8c44ea4
   1f9a8:	f8d65184 	.word	0xf8d65184
   1f9ac:	061f330c 	.word	0x061f330c
   1f9b0:	80c8f100 	.word	0x80c8f100
   1f9b4:	f8d34ba0 	.word	0xf8d34ba0
   1f9b8:	07d0230c 	.word	0x07d0230c
   1f9bc:	80d4f100 	.word	0x80d4f100
   1f9c0:	230cf8d3 	.word	0x230cf8d3
   1f9c4:	0240f012 	.word	0x0240f012
   1f9c8:	80b6f040 	.word	0x80b6f040
   1f9cc:	130cf8d3 	.word	0x130cf8d3
   1f9d0:	f1000749 	.word	0xf1000749
   1f9d4:	f8d380e6 	.word	0xf8d380e6
   1f9d8:	06da330c 	.word	0x06da330c
   1f9dc:	809df140 	.word	0x809df140
   1f9e0:	4a952100 	.word	0x4a952100
   1f9e4:	f8c24b95 	.word	0xf8c24b95
   1f9e8:	681b1110 	.word	0x681b1110
   1f9ec:	9b049304 	.word	0x9b049304
   1f9f0:	8270f8df 	.word	0x8270f8df
   1f9f4:	f8df4f92 	.word	0xf8df4f92
   1f9f8:	f8d89270 	.word	0xf8d89270
   1f9fc:	f8daa000 	.word	0xf8daa000
   1fa00:	29001000 	.word	0x29001000
   1fa04:	2200d03f 	.word	0x2200d03f
   1fa08:	e0024614 	.word	0xe0024614
   1fa0c:	428c3401 	.word	0x428c3401
   1fa10:	eb0ad227 	.word	0xeb0ad227
   1fa14:	68ab05c4 	.word	0x68ab05c4
   1fa18:	d0f72b00 	.word	0xd0f72b00
   1fa1c:	b2f6686e 	.word	0xb2f6686e
   1fa20:	d1f32e01 	.word	0xd1f32e01
   1fa24:	f8b96868 	.word	0xf8b96868
   1fa28:	ebb33000 	.word	0xebb33000
   1fa2c:	d1ed4f10 	.word	0xd1ed4f10
   1fa30:	3301686a 	.word	0x3301686a
   1fa34:	02fff022 	.word	0x02fff022
   1fa38:	0202f042 	.word	0x0202f042
   1fa3c:	68a8606a 	.word	0x68a8606a
   1fa40:	3000f8a9 	.word	0x3000f8a9
   1fa44:	fcfef7ff 	.word	0xfcfef7ff
   1fa48:	b9284632 	.word	0xb9284632
   1fa4c:	f023686b 	.word	0xf023686b
   1fa50:	f04303ff 	.word	0xf04303ff
   1fa54:	606b0303 	.word	0x606b0303
   1fa58:	1000f8da 	.word	0x1000f8da
   1fa5c:	428c3401 	.word	0x428c3401
   1fa60:	2a00d3d7 	.word	0x2a00d3d7
   1fa64:	b171d1cd 	.word	0xb171d1cd
   1fa68:	eb0a4613 	.word	0xeb0a4613
   1fa6c:	689002c3 	.word	0x689002c3
   1fa70:	b1303301 	.word	0xb1303301
   1fa74:	b004f8d2 	.word	0xb004f8d2
   1fa78:	fb8bfa5f 	.word	0xfb8bfa5f
   1fa7c:	0f01f1bb 	.word	0x0f01f1bb
   1fa80:	428bd003 	.word	0x428bd003
   1fa84:	f04fd1f1 	.word	0xf04fd1f1
   1fa88:	f8d70b00 	.word	0xf8d70b00
   1fa8c:	f8daa000 	.word	0xf8daa000
   1fa90:	2a002000 	.word	0x2a002000
   1fa94:	2100d03d 	.word	0x2100d03d
   1fa98:	e002460c 	.word	0xe002460c
   1fa9c:	42943401 	.word	0x42943401
   1faa0:	eb0ad227 	.word	0xeb0ad227
   1faa4:	68ab05c4 	.word	0x68ab05c4
   1faa8:	d0f72b00 	.word	0xd0f72b00
   1faac:	b2f6686e 	.word	0xb2f6686e
   1fab0:	d1f32e01 	.word	0xd1f32e01
   1fab4:	f8b96868 	.word	0xf8b96868
   1fab8:	ebb33000 	.word	0xebb33000
   1fabc:	d1ed4f10 	.word	0xd1ed4f10
   1fac0:	3301686a 	.word	0x3301686a
   1fac4:	02fff022 	.word	0x02fff022
   1fac8:	0202f042 	.word	0x0202f042
   1facc:	68a8606a 	.word	0x68a8606a
   1fad0:	3000f8a9 	.word	0x3000f8a9
   1fad4:	fcb6f7ff 	.word	0xfcb6f7ff
   1fad8:	b9284631 	.word	0xb9284631
   1fadc:	f022686a 	.word	0xf022686a
   1fae0:	f04303ff 	.word	0xf04303ff
   1fae4:	606b0303 	.word	0x606b0303
   1fae8:	2000f8da 	.word	0x2000f8da
   1faec:	42943401 	.word	0x42943401
   1faf0:	2900d3d7 	.word	0x2900d3d7
   1faf4:	b162d1cd 	.word	0xb162d1cd
   1faf8:	eb0a460b 	.word	0xeb0a460b
   1fafc:	688801c3 	.word	0x688801c3
   1fb00:	b1203301 	.word	0xb1203301
   1fb04:	b2c96849 	.word	0xb2c96849
   1fb08:	f43f2901 	.word	0xf43f2901
   1fb0c:	4293af76 	.word	0x4293af76
   1fb10:	f1bbd1f3 	.word	0xf1bbd1f3
   1fb14:	f47f0f00 	.word	0xf47f0f00
   1fb18:	f44faf70 	.word	0xf44faf70
   1fb1c:	4b496180 	.word	0x4b496180
   1fb20:	681b4a44 	.word	0x681b4a44
   1fb24:	b2db015b 	.word	0xb2db015b
   1fb28:	332af882 	.word	0x332af882
   1fb2c:	1184f8c2 	.word	0x1184f8c2
   1fb30:	b0076051 	.word	0xb0076051
   1fb34:	8ff0e8bd 	.word	0x8ff0e8bd
   1fb38:	4b432206 	.word	0x4b432206
   1fb3c:	b007601a 	.word	0xb007601a
   1fb40:	8ff0e8bd 	.word	0x8ff0e8bd
   1fb44:	fc7cf001 	.word	0xfc7cf001
   1fb48:	fde8f001 	.word	0xfde8f001
   1fb4c:	d1492800 	.word	0xd1492800
   1fb50:	f8c64b3e 	.word	0xf8c64b3e
   1fb54:	681b011c 	.word	0x681b011c
   1fb58:	9b019301 	.word	0x9b019301
   1fb5c:	f8d34b36 	.word	0xf8d34b36
   1fb60:	07d0230c 	.word	0x07d0230c
   1fb64:	af2cf57f 	.word	0xaf2cf57f
   1fb68:	f2482000 	.word	0xf2482000
   1fb6c:	49380202 	.word	0x49380202
   1fb70:	0100f8c3 	.word	0x0100f8c3
   1fb74:	91026809 	.word	0x91026809
   1fb78:	f8d39902 	.word	0xf8d39902
   1fb7c:	42933614 	.word	0x42933614
   1fb80:	d81ed040 	.word	0xd81ed040
   1fb84:	d04f2b00 	.word	0xd04f2b00
   1fb88:	d9422b02 	.word	0xd9422b02
   1fb8c:	0201f248 	.word	0x0201f248
   1fb90:	d1494293 	.word	0xd1494293
   1fb94:	22072003 	.word	0x22072003
   1fb98:	4b2e492b 	.word	0x4b2e492b
   1fb9c:	601a6008 	.word	0x601a6008
   1fba0:	4d29e7cd 	.word	0x4d29e7cd
   1fba4:	f8c36829 	.word	0xf8c36829
   1fba8:	29012108 	.word	0x29012108
   1fbac:	d05d492a 	.word	0xd05d492a
   1fbb0:	9203680a 	.word	0x9203680a
   1fbb4:	f8d39a03 	.word	0xf8d39a03
   1fbb8:	06db330c 	.word	0x06db330c
   1fbbc:	af10f53f 	.word	0xaf10f53f
   1fbc0:	4a26e716 	.word	0x4a26e716
   1fbc4:	d8144293 	.word	0xd8144293
   1fbc8:	6f88f1b3 	.word	0x6f88f1b3
   1fbcc:	f248d814 	.word	0xf248d814
   1fbd0:	42930203 	.word	0x42930203
   1fbd4:	2003d128 	.word	0x2003d128
   1fbd8:	491b2204 	.word	0x491b2204
   1fbdc:	60084b1d 	.word	0x60084b1d
   1fbe0:	e7ac601a 	.word	0xe7ac601a
   1fbe4:	f88423e0 	.word	0xf88423e0
   1fbe8:	6065332a 	.word	0x6065332a
   1fbec:	e8bdb007 	.word	0xe8bdb007
   1fbf0:	4a1b8ff0 	.word	0x4a1b8ff0
   1fbf4:	d1174293 	.word	0xd1174293
   1fbf8:	49132003 	.word	0x49132003
   1fbfc:	60084a15 	.word	0x60084a15
   1fc00:	e79c6013 	.word	0xe79c6013
   1fc04:	22062003 	.word	0x22062003
   1fc08:	4b12490f 	.word	0x4b12490f
   1fc0c:	601a6008 	.word	0x601a6008
   1fc10:	2303e795 	.word	0x2303e795
   1fc14:	490c4618 	.word	0x490c4618
   1fc18:	600b4a0e 	.word	0x600b4a0e
   1fc1c:	b0076013 	.word	0xb0076013
   1fc20:	4ff0e8bd 	.word	0x4ff0e8bd
   1fc24:	bc32f7ff 	.word	0xbc32f7ff
   1fc28:	49072303 	.word	0x49072303
   1fc2c:	600b4a09 	.word	0x600b4a09
   1fc30:	e7846013 	.word	0xe7846013
   1fc34:	e000e100 	.word	0xe000e100
   1fc38:	4002a000 	.word	0x4002a000
   1fc3c:	4002a110 	.word	0x4002a110
   1fc40:	200201c4 	.word	0x200201c4
   1fc44:	200201bc 	.word	0x200201bc
   1fc48:	200201c0 	.word	0x200201c0
   1fc4c:	4002a11c 	.word	0x4002a11c
   1fc50:	4002a100 	.word	0x4002a100
   1fc54:	200201b8 	.word	0x200201b8
   1fc58:	4002a108 	.word	0x4002a108
   1fc5c:	04400004 	.word	0x04400004
   1fc60:	05500001 	.word	0x05500001
   1fc64:	200201c8 	.word	0x200201c8
   1fc68:	20025b08 	.word	0x20025b08
   1fc6c:	680b4a37 	.word	0x680b4a37
   1fc70:	93056812 	.word	0x93056812
   1fc74:	48366893 	.word	0x48366893
   1fc78:	60034936 	.word	0x60034936
   1fc7c:	9a056854 	.word	0x9a056854
   1fc80:	b16b600c 	.word	0xb16b600c
   1fc84:	681bb164 	.word	0x681bb164
   1fc88:	d8022b10 	.word	0xd8022b10
   1fc8c:	2a106822 	.word	0x2a106822
   1fc90:	2103d90c 	.word	0x2103d90c
   1fc94:	0206f24c 	.word	0x0206f24c
   1fc98:	60294b2f 	.word	0x60294b2f
   1fc9c:	e74e601a 	.word	0xe74e601a
   1fca0:	22102103 	.word	0x22102103
   1fca4:	60294b2c 	.word	0x60294b2c
   1fca8:	e748601a 	.word	0xe748601a
   1fcac:	80b4f8df 	.word	0x80b4f8df
   1fcb0:	d0422a00 	.word	0xd0422a00
   1fcb4:	f1042300 	.word	0xf1042300
   1fcb8:	461e0904 	.word	0x461e0904
   1fcbc:	3601e002 	.word	0x3601e002
   1fcc0:	d22a4296 	.word	0xd22a4296
   1fcc4:	19e100f7 	.word	0x19e100f7
   1fcc8:	28006888 	.word	0x28006888
   1fccc:	f8d1d0f7 	.word	0xf8d1d0f7
   1fcd0:	fa5fa004 	.word	0xfa5fa004
   1fcd4:	f1bafa8a 	.word	0xf1bafa8a
   1fcd8:	d1f00f01 	.word	0xd1f00f01
   1fcdc:	c004f8d1 	.word	0xc004f8d1
   1fce0:	0000f8b8 	.word	0x0000f8b8
   1fce4:	4f1cebb0 	.word	0x4f1cebb0
   1fce8:	684bd1e9 	.word	0x684bd1e9
   1fcec:	f0231c42 	.word	0xf0231c42
   1fcf0:	f04303ff 	.word	0xf04303ff
   1fcf4:	604b0302 	.word	0x604b0302
   1fcf8:	f8a86888 	.word	0xf8a86888
   1fcfc:	f7ff2000 	.word	0xf7ff2000
   1fd00:	4653fba1 	.word	0x4653fba1
   1fd04:	f859b938 	.word	0xf859b938
   1fd08:	f0222007 	.word	0xf0222007
   1fd0c:	f04202ff 	.word	0xf04202ff
   1fd10:	f8490203 	.word	0xf8490203
   1fd14:	68222007 	.word	0x68222007
   1fd18:	2b00e7d1 	.word	0x2b00e7d1
   1fd1c:	b912d1c8 	.word	0xb912d1c8
   1fd20:	4293e00b 	.word	0x4293e00b
   1fd24:	eb04d009 	.word	0xeb04d009
   1fd28:	688801c3 	.word	0x688801c3
   1fd2c:	28003301 	.word	0x28003301
   1fd30:	6849d0f7 	.word	0x6849d0f7
   1fd34:	2901b2c9 	.word	0x2901b2c9
   1fd38:	2002d1f3 	.word	0x2002d1f3
   1fd3c:	f44f4b07 	.word	0xf44f4b07
   1fd40:	4a076180 	.word	0x4a076180
   1fd44:	6028681b 	.word	0x6028681b
   1fd48:	bf00e6ec 	.word	0xbf00e6ec
   1fd4c:	200201cc 	.word	0x200201cc
   1fd50:	200201c8 	.word	0x200201c8
   1fd54:	200201c4 	.word	0x200201c4
   1fd58:	200201b8 	.word	0x200201b8
   1fd5c:	200201bc 	.word	0x200201bc
   1fd60:	e000e100 	.word	0xe000e100
   1fd64:	20025b08 	.word	0x20025b08

0001fd68 <rpc_transport_msg_free>:
   1fd68:	4b18b430 	.word	0x4b18b430
   1fd6c:	6825681c 	.word	0x6825681c
   1fd70:	68a3b16d 	.word	0x68a3b16d
   1fd74:	d0274283 	.word	0xd0274283
   1fd78:	e0022300 	.word	0xe0022300
   1fd7c:	42816889 	.word	0x42816889
   1fd80:	3301d019 	.word	0x3301d019
   1fd84:	42ab00da 	.word	0x42ab00da
   1fd88:	0102eb04 	.word	0x0102eb04
   1fd8c:	4b10d1f6 	.word	0x4b10d1f6
   1fd90:	6825681c 	.word	0x6825681c
   1fd94:	68a3b16d 	.word	0x68a3b16d
   1fd98:	d0154283 	.word	0xd0154283
   1fd9c:	e0022300 	.word	0xe0022300
   1fda0:	42816889 	.word	0x42816889
   1fda4:	3301d007 	.word	0x3301d007
   1fda8:	429d00da 	.word	0x429d00da
   1fdac:	0102eb04 	.word	0x0102eb04
   1fdb0:	bc30d1f6 	.word	0xbc30d1f6
   1fdb4:	32044770 	.word	0x32044770
   1fdb8:	f02358a3 	.word	0xf02358a3
   1fdbc:	f04303ff 	.word	0xf04303ff
   1fdc0:	50a30303 	.word	0x50a30303
   1fdc4:	4770bc30 	.word	0x4770bc30
   1fdc8:	e7f52204 	.word	0xe7f52204
   1fdcc:	200201c8 	.word	0x200201c8
   1fdd0:	200201c4 	.word	0x200201c4

0001fdd4 <block_cipher_df>:
   1fdd4:	4ff0e92d 	.word	0x4ff0e92d
   1fdd8:	7fc0f5b2 	.word	0x7fc0f5b2
   1fddc:	7d49f5ad 	.word	0x7d49f5ad
   1fde0:	8119f200 	.word	0x8119f200
   1fde4:	460c4692 	.word	0x460c4692
   1fde8:	72d0f44f 	.word	0x72d0f44f
   1fdec:	46812100 	.word	0x46812100
   1fdf0:	f012a860 	.word	0xf012a860
   1fdf4:	a81afd83 	.word	0xa81afd83
   1fdf8:	fcd8f00a 	.word	0xfcd8f00a
   1fdfc:	23302000 	.word	0x23302000
   1fe00:	ea4fad66 	.word	0xea4fad66
   1fe04:	f8ad221a 	.word	0xf8ad221a
   1fe08:	f88d0190 	.word	0xf88d0190
   1fe0c:	46212192 	.word	0x46212192
   1fe10:	46284652 	.word	0x46284652
   1fe14:	3197f88d 	.word	0x3197f88d
   1fe18:	a193f88d 	.word	0xa193f88d
   1fe1c:	f012ae06 	.word	0xf012ae06
   1fe20:	2280fd62 	.word	0x2280fd62
   1fe24:	f8054633 	.word	0xf8054633
   1fe28:	af0e200a 	.word	0xaf0e200a
   1fe2c:	f8031b99 	.word	0xf8031b99
   1fe30:	429f1b01 	.word	0x429f1b01
   1fe34:	f44fd1fa 	.word	0xf44fd1fa
   1fe38:	46317280 	.word	0x46317280
   1fe3c:	f00aa81a 	.word	0xf00aa81a
   1fe40:	4683fcc1 	.word	0x4683fcc1
   1fe44:	f0402800 	.word	0xf0402800
   1fe48:	900180c8 	.word	0x900180c8
   1fe4c:	0a19f10a 	.word	0x0a19f10a
   1fe50:	2210ac02 	.word	0x2210ac02
   1fe54:	46202100 	.word	0x46202100
   1fe58:	fd50f012 	.word	0xfd50f012
   1fe5c:	ad6446d0 	.word	0xad6446d0
   1fe60:	f8157822 	.word	0xf8157822
   1fe64:	f8943c10 	.word	0xf8943c10
   1fe68:	f815c001 	.word	0xf815c001
   1fe6c:	78a01c0f 	.word	0x78a01c0f
   1fe70:	f8154053 	.word	0xf8154053
   1fe74:	ea8c2c0e 	.word	0xea8c2c0e
   1fe78:	40500c01 	.word	0x40500c01
   1fe7c:	f81578e1 	.word	0xf81578e1
   1fe80:	f8942c0d 	.word	0xf8942c0d
   1fe84:	4051e004 	.word	0x4051e004
   1fe88:	2c0cf815 	.word	0x2c0cf815
   1fe8c:	ea8e7023 	.word	0xea8e7023
   1fe90:	f8150202 	.word	0xf8150202
   1fe94:	f8943c0b 	.word	0xf8943c0b
   1fe98:	f884e005 	.word	0xf884e005
   1fe9c:	ea8ec001 	.word	0xea8ec001
   1fea0:	f8150303 	.word	0xf8150303
   1fea4:	f894cc0a 	.word	0xf894cc0a
   1fea8:	70a0e006 	.word	0x70a0e006
   1feac:	0c0cea8e 	.word	0x0c0cea8e
   1feb0:	0c09f815 	.word	0x0c09f815
   1feb4:	e007f894 	.word	0xe007f894
   1feb8:	ea8e70e1 	.word	0xea8e70e1
   1febc:	f8150000 	.word	0xf8150000
   1fec0:	f8941c08 	.word	0xf8941c08
   1fec4:	7122e008 	.word	0x7122e008
   1fec8:	0101ea8e 	.word	0x0101ea8e
   1fecc:	2c07f815 	.word	0x2c07f815
   1fed0:	e009f894 	.word	0xe009f894
   1fed4:	ea8e7163 	.word	0xea8e7163
   1fed8:	7aa30202 	.word	0x7aa30202
   1fedc:	ec06f815 	.word	0xec06f815
   1fee0:	c006f884 	.word	0xc006f884
   1fee4:	030eea83 	.word	0x030eea83
   1fee8:	722171e0 	.word	0x722171e0
   1feec:	72a37262 	.word	0x72a37262
   1fef0:	f8157ae1 	.word	0xf8157ae1
   1fef4:	f8943c05 	.word	0xf8943c05
   1fef8:	7b60c00c 	.word	0x7b60c00c
   1fefc:	f815404b 	.word	0xf815404b
   1ff00:	f8152c04 	.word	0xf8152c04
   1ff04:	ea8c1c03 	.word	0xea8c1c03
   1ff08:	40410202 	.word	0x40410202
   1ff0c:	c00ef894 	.word	0xc00ef894
   1ff10:	0c02f815 	.word	0x0c02f815
   1ff14:	e00ff894 	.word	0xe00ff894
   1ff18:	0000ea8c 	.word	0x0000ea8c
   1ff1c:	cc01f815 	.word	0xcc01f815
   1ff20:	ea8e72e3 	.word	0xea8e72e3
   1ff24:	73220c0c 	.word	0x73220c0c
   1ff28:	73a07361 	.word	0x73a07361
   1ff2c:	46224623 	.word	0x46224623
   1ff30:	a81a2101 	.word	0xa81a2101
   1ff34:	c00ff884 	.word	0xc00ff884
   1ff38:	fbc2f00b 	.word	0xfbc2f00b
   1ff3c:	0f10f1b8 	.word	0x0f10f1b8
   1ff40:	bf944683 	.word	0xbf944683
   1ff44:	0808eba8 	.word	0x0808eba8
   1ff48:	0810f1a8 	.word	0x0810f1a8
   1ff4c:	d1452800 	.word	0xd1452800
   1ff50:	f1b83510 	.word	0xf1b83510
   1ff54:	d1830f00 	.word	0xd1830f00
   1ff58:	22109d01 	.word	0x22109d01
   1ff5c:	19784621 	.word	0x19784621
   1ff60:	fcc1f012 	.word	0xfcc1f012
   1ff64:	3183f89d 	.word	0x3183f89d
   1ff68:	0210f105 	.word	0x0210f105
   1ff6c:	2a303301 	.word	0x2a303301
   1ff70:	f88d9201 	.word	0xf88d9201
   1ff74:	f47f3183 	.word	0xf47f3183
   1ff78:	f44faf6c 	.word	0xf44faf6c
   1ff7c:	46397280 	.word	0x46397280
   1ff80:	f00aa81a 	.word	0xf00aa81a
   1ff84:	4683fc1f 	.word	0x4683fc1f
   1ff88:	464dbb40 	.word	0x464dbb40
   1ff8c:	0830f109 	.word	0x0830f109
   1ff90:	461aab16 	.word	0x461aab16
   1ff94:	a81a2101 	.word	0xa81a2101
   1ff98:	fb92f00b 	.word	0xfb92f00b
   1ff9c:	b9e84683 	.word	0xb9e84683
   1ffa0:	46282210 	.word	0x46282210
   1ffa4:	4415a916 	.word	0x4415a916
   1ffa8:	fc9df012 	.word	0xfc9df012
   1ffac:	d1ef4545 	.word	0xd1ef4545
   1ffb0:	f00aa81a 	.word	0xf00aa81a
   1ffb4:	a860fc01 	.word	0xa860fc01
   1ffb8:	71d0f44f 	.word	0x71d0f44f
   1ffbc:	fc38f006 	.word	0xfc38f006
   1ffc0:	21304638 	.word	0x21304638
   1ffc4:	fc34f006 	.word	0xfc34f006
   1ffc8:	21204630 	.word	0x21204630
   1ffcc:	fc30f006 	.word	0xfc30f006
   1ffd0:	21104620 	.word	0x21104620
   1ffd4:	fc2cf006 	.word	0xfc2cf006
   1ffd8:	ac02e018 	.word	0xac02e018
   1ffdc:	f00aa81a 	.word	0xf00aa81a
   1ffe0:	a860fbeb 	.word	0xa860fbeb
   1ffe4:	71d0f44f 	.word	0x71d0f44f
   1ffe8:	fc22f006 	.word	0xfc22f006
   1ffec:	21304638 	.word	0x21304638
   1fff0:	fc1ef006 	.word	0xfc1ef006
   1fff4:	21204630 	.word	0x21204630
   1fff8:	fc1af006 	.word	0xfc1af006
   1fffc:	21104620 	.word	0x21104620
   20000:	fc16f006 	.word	0xfc16f006
   20004:	21304648 	.word	0x21304648
   20008:	fc12f006 	.word	0xfc12f006
   2000c:	f50d4658 	.word	0xf50d4658
   20010:	e8bd7d49 	.word	0xe8bd7d49
   20014:	f06f8ff0 	.word	0xf06f8ff0
   20018:	e7f70b37 	.word	0xe7f70b37

0002001c <symbol_000078b>:
   2001c:	72a0f44f 	.word	0x72a0f44f
   20020:	f0122100 	.word	0xf0122100
   20024:	bf00bc6b 	.word	0xbf00bc6b

00020028 <symbol_0001c64>:
   20028:	b510b158 	.word	0xb510b158
   2002c:	30204604 	.word	0x30204604
   20030:	fbc2f00a 	.word	0xfbc2f00a
   20034:	e8bd4620 	.word	0xe8bd4620
   20038:	f44f4010 	.word	0xf44f4010
   2003c:	f00671a0 	.word	0xf00671a0
   20040:	4770bbf7 	.word	0x4770bbf7

00020044 <symbol_000ccf0>:
   20044:	6983b5f0 	.word	0x6983b5f0
   20048:	f5b3b0ed 	.word	0xf5b3b0ed
   2004c:	f2007fc0 	.word	0xf2007fc0
   20050:	f5c380e1 	.word	0xf5c380e1
   20054:	429373c0 	.word	0x429373c0
   20058:	80dcf0c0 	.word	0x80dcf0c0
   2005c:	46154604 	.word	0x46154604
   20060:	f44f460e 	.word	0xf44f460e
   20064:	210072c0 	.word	0x210072c0
   20068:	f012a80c 	.word	0xf012a80c
   2006c:	a90cfc47 	.word	0xa90cfc47
   20070:	3138f8d4 	.word	0x3138f8d4
   20074:	f8d469a2 	.word	0xf8d469a2
   20078:	4798013c 	.word	0x4798013c
   2007c:	f0402800 	.word	0xf0402800
   20080:	69a780cc 	.word	0x69a780cc
   20084:	b94db106 	.word	0xb94db106
   20088:	463aa90c 	.word	0x463aa90c
   2008c:	f7ff4608 	.word	0xf7ff4608
   20090:	4605fea1 	.word	0x4605fea1
   20094:	4628b188 	.word	0x4628b188
   20098:	bdf0b06d 	.word	0xbdf0b06d
   2009c:	462aab0c 	.word	0x462aab0c
   200a0:	463119d8 	.word	0x463119d8
   200a4:	fc1ff012 	.word	0xfc1ff012
   200a8:	a90c442f 	.word	0xa90c442f
   200ac:	4608463a 	.word	0x4608463a
   200b0:	fe90f7ff 	.word	0xfe90f7ff
   200b4:	28004605 	.word	0x28004605
   200b8:	4668d1ed 	.word	0x4668d1ed
   200bc:	46292230 	.word	0x46292230
   200c0:	fc1cf012 	.word	0xfc1cf012
   200c4:	f104462e 	.word	0xf104462e
   200c8:	7be20720 	.word	0x7be20720
   200cc:	0306eb0d 	.word	0x0306eb0d
   200d0:	b2d23201 	.word	0xb2d23201
   200d4:	2a0073e2 	.word	0x2a0073e2
   200d8:	7ba2d14d 	.word	0x7ba2d14d
   200dc:	b2d23201 	.word	0xb2d23201
   200e0:	2a0073a2 	.word	0x2a0073a2
   200e4:	7b62d147 	.word	0x7b62d147
   200e8:	b2d23201 	.word	0xb2d23201
   200ec:	2a007362 	.word	0x2a007362
   200f0:	7b22d141 	.word	0x7b22d141
   200f4:	b2d23201 	.word	0xb2d23201
   200f8:	2a007322 	.word	0x2a007322
   200fc:	7ae2d13b 	.word	0x7ae2d13b
   20100:	b2d23201 	.word	0xb2d23201
   20104:	2a0072e2 	.word	0x2a0072e2
   20108:	7aa2d135 	.word	0x7aa2d135
   2010c:	b2d23201 	.word	0xb2d23201
   20110:	2a0072a2 	.word	0x2a0072a2
   20114:	7a62d12f 	.word	0x7a62d12f
   20118:	b2d23201 	.word	0xb2d23201
   2011c:	bb527262 	.word	0xbb527262
   20120:	32017a22 	.word	0x32017a22
   20124:	7222b2d2 	.word	0x7222b2d2
   20128:	79e2bb2a 	.word	0x79e2bb2a
   2012c:	b2d23201 	.word	0xb2d23201
   20130:	bb0271e2 	.word	0xbb0271e2
   20134:	320179a2 	.word	0x320179a2
   20138:	71a2b2d2 	.word	0x71a2b2d2
   2013c:	7962b9da 	.word	0x7962b9da
   20140:	b2d23201 	.word	0xb2d23201
   20144:	b9b27162 	.word	0xb9b27162
   20148:	32017922 	.word	0x32017922
   2014c:	7122b2d2 	.word	0x7122b2d2
   20150:	78e2b98a 	.word	0x78e2b98a
   20154:	b2d23201 	.word	0xb2d23201
   20158:	b96270e2 	.word	0xb96270e2
   2015c:	320178a2 	.word	0x320178a2
   20160:	70a2b2d2 	.word	0x70a2b2d2
   20164:	7862b93a 	.word	0x7862b93a
   20168:	b2d23201 	.word	0xb2d23201
   2016c:	b9127062 	.word	0xb9127062
   20170:	32017822 	.word	0x32017822
   20174:	46227022 	.word	0x46227022
   20178:	46382101 	.word	0x46382101
   2017c:	faa0f00b 	.word	0xfaa0f00b
   20180:	28004605 	.word	0x28004605
   20184:	3610d187 	.word	0x3610d187
   20188:	d19e2e30 	.word	0xd19e2e30
   2018c:	9b0c9901 	.word	0x9b0c9901
   20190:	9a0d9800 	.word	0x9a0d9800
   20194:	404a4058 	.word	0x404a4058
   20198:	99029b0e 	.word	0x99029b0e
   2019c:	40599000 	.word	0x40599000
   201a0:	9b0f9803 	.word	0x9b0f9803
   201a4:	40439201 	.word	0x40439201
   201a8:	98049a10 	.word	0x98049a10
   201ac:	40509102 	.word	0x40509102
   201b0:	9a119905 	.word	0x9a119905
   201b4:	40519303 	.word	0x40519303
   201b8:	9a069b12 	.word	0x9a069b12
   201bc:	405a9004 	.word	0x405a9004
   201c0:	9b139807 	.word	0x9b139807
   201c4:	40589105 	.word	0x40589105
   201c8:	9b149908 	.word	0x9b149908
   201cc:	40599206 	.word	0x40599206
   201d0:	9b159a09 	.word	0x9b159a09
   201d4:	405a9007 	.word	0x405a9007
   201d8:	9b16980a 	.word	0x9b16980a
   201dc:	40439108 	.word	0x40439108
   201e0:	2309e9cd 	.word	0x2309e9cd
   201e4:	9b179a0b 	.word	0x9b179a0b
   201e8:	40534638 	.word	0x40534638
   201ec:	f44f4669 	.word	0xf44f4669
   201f0:	930b7280 	.word	0x930b7280
   201f4:	fae6f00a 	.word	0xfae6f00a
   201f8:	28004605 	.word	0x28004605
   201fc:	af4bf47f 	.word	0xaf4bf47f
   20200:	a9082210 	.word	0xa9082210
   20204:	f0124620 	.word	0xf0124620
   20208:	2301fb6e 	.word	0x2301fb6e
   2020c:	61234628 	.word	0x61234628
   20210:	bdf0b06d 	.word	0xbdf0b06d
   20214:	0537f06f 	.word	0x0537f06f
   20218:	f06fe73d 	.word	0xf06fe73d
   2021c:	e73a0533 	.word	0xe73a0533

00020220 <symbol_0001e1e>:
   20220:	41f0e92d 	.word	0x41f0e92d
   20224:	46164604 	.word	0x46164604
   20228:	b0882220 	.word	0xb0882220
   2022c:	460f18a5 	.word	0x460f18a5
   20230:	21004668 	.word	0x21004668
   20234:	f0124698 	.word	0xf0124698
   20238:	4628fb61 	.word	0x4628fb61
   2023c:	fab6f00a 	.word	0xfab6f00a
   20240:	f2422220 	.word	0xf2422220
   20244:	f8c47310 	.word	0xf8c47310
   20248:	e9c47138 	.word	0xe9c47138
   2024c:	46282306 	.word	0x46282306
   20250:	613cf8c4 	.word	0x613cf8c4
   20254:	f44f4669 	.word	0xf44f4669
   20258:	f00a7280 	.word	0xf00a7280
   2025c:	b920fab3 	.word	0xb920fab3
   20260:	46204641 	.word	0x46204641
   20264:	f7ff9a0e 	.word	0xf7ff9a0e
   20268:	b008feed 	.word	0xb008feed
   2026c:	81f0e8bd 	.word	0x81f0e8bd

00020270 <symbol_000268c>:
   20270:	4ff0e92d 	.word	0x4ff0e92d
   20274:	6f80f5b2 	.word	0x6f80f5b2
   20278:	f200b0f9 	.word	0xf200b0f9
   2027c:	46048226 	.word	0x46048226
   20280:	460f4615 	.word	0x460f4615
   20284:	46682230 	.word	0x46682230
   20288:	f0122100 	.word	0xf0122100
   2028c:	6922fb37 	.word	0x6922fb37
   20290:	429a69e3 	.word	0x429a69e3
   20294:	6963dc01 	.word	0x6963dc01
   20298:	69a3b313 	.word	0x69a3b313
   2029c:	7fc0f5b3 	.word	0x7fc0f5b3
   202a0:	8216f200 	.word	0x8216f200
   202a4:	0a60f10d 	.word	0x0a60f10d
   202a8:	72c0f44f 	.word	0x72c0f44f
   202ac:	46502100 	.word	0x46502100
   202b0:	fb24f012 	.word	0xfb24f012
   202b4:	f8d44651 	.word	0xf8d44651
   202b8:	69a23138 	.word	0x69a23138
   202bc:	013cf8d4 	.word	0x013cf8d4
   202c0:	f06f4798 	.word	0xf06f4798
   202c4:	b9380933 	.word	0xb9380933
   202c8:	465169a2 	.word	0x465169a2
   202cc:	f7ff4650 	.word	0xf7ff4650
   202d0:	4681fd81 	.word	0x4681fd81
   202d4:	d0772800 	.word	0xd0772800
   202d8:	b0794648 	.word	0xb0794648
   202dc:	8ff0e8bd 	.word	0x8ff0e8bd
   202e0:	0820f104 	.word	0x0820f104
   202e4:	f0002d00 	.word	0xf0002d00
   202e8:	ae0c812b 	.word	0xae0c812b
   202ec:	2d10e00e 	.word	0x2d10e00e
   202f0:	bf2846a9 	.word	0xbf2846a9
   202f4:	0910f04f 	.word	0x0910f04f
   202f8:	46314638 	.word	0x46314638
   202fc:	f012464a 	.word	0xf012464a
   20300:	ebb5faf2 	.word	0xebb5faf2
   20304:	444f0509 	.word	0x444f0509
   20308:	811af000 	.word	0x811af000
   2030c:	33017be3 	.word	0x33017be3
   20310:	73e3b2db 	.word	0x73e3b2db
   20314:	d14d2b00 	.word	0xd14d2b00
   20318:	33017ba3 	.word	0x33017ba3
   2031c:	73a3b2db 	.word	0x73a3b2db
   20320:	d1472b00 	.word	0xd1472b00
   20324:	33017b63 	.word	0x33017b63
   20328:	7363b2db 	.word	0x7363b2db
   2032c:	d1412b00 	.word	0xd1412b00
   20330:	33017b23 	.word	0x33017b23
   20334:	7323b2db 	.word	0x7323b2db
   20338:	d13b2b00 	.word	0xd13b2b00
   2033c:	33017ae3 	.word	0x33017ae3
   20340:	72e3b2db 	.word	0x72e3b2db
   20344:	d1352b00 	.word	0xd1352b00
   20348:	33017aa3 	.word	0x33017aa3
   2034c:	72a3b2db 	.word	0x72a3b2db
   20350:	d12f2b00 	.word	0xd12f2b00
   20354:	33017a63 	.word	0x33017a63
   20358:	7263b2db 	.word	0x7263b2db
   2035c:	7a23bb53 	.word	0x7a23bb53
   20360:	b2db3301 	.word	0xb2db3301
   20364:	bb2b7223 	.word	0xbb2b7223
   20368:	330179e3 	.word	0x330179e3
   2036c:	71e3b2db 	.word	0x71e3b2db
   20370:	79a3bb03 	.word	0x79a3bb03
   20374:	b2db3301 	.word	0xb2db3301
   20378:	b9db71a3 	.word	0xb9db71a3
   2037c:	33017963 	.word	0x33017963
   20380:	7163b2db 	.word	0x7163b2db
   20384:	7923b9b3 	.word	0x7923b9b3
   20388:	b2db3301 	.word	0xb2db3301
   2038c:	b98b7123 	.word	0xb98b7123
   20390:	330178e3 	.word	0x330178e3
   20394:	70e3b2db 	.word	0x70e3b2db
   20398:	78a3b963 	.word	0x78a3b963
   2039c:	b2db3301 	.word	0xb2db3301
   203a0:	b93b70a3 	.word	0xb93b70a3
   203a4:	33017863 	.word	0x33017863
   203a8:	7063b2db 	.word	0x7063b2db
   203ac:	7823b913 	.word	0x7823b913
   203b0:	70233301 	.word	0x70233301
   203b4:	46224633 	.word	0x46224633
   203b8:	46402101 	.word	0x46402101
   203bc:	f980f00b 	.word	0xf980f00b
   203c0:	28004681 	.word	0x28004681
   203c4:	e787d093 	.word	0xe787d093
   203c8:	4630ae0c 	.word	0x4630ae0c
   203cc:	46492230 	.word	0x46492230
   203d0:	fa94f012 	.word	0xfa94f012
   203d4:	f10446cb 	.word	0xf10446cb
   203d8:	7be20820 	.word	0x7be20820
   203dc:	030beb06 	.word	0x030beb06
   203e0:	b2d23201 	.word	0xb2d23201
   203e4:	2a0073e2 	.word	0x2a0073e2
   203e8:	7ba2d14d 	.word	0x7ba2d14d
   203ec:	b2d23201 	.word	0xb2d23201
   203f0:	2a0073a2 	.word	0x2a0073a2
   203f4:	7b62d147 	.word	0x7b62d147
   203f8:	b2d23201 	.word	0xb2d23201
   203fc:	2a007362 	.word	0x2a007362
   20400:	7b22d141 	.word	0x7b22d141
   20404:	b2d23201 	.word	0xb2d23201
   20408:	2a007322 	.word	0x2a007322
   2040c:	7ae2d13b 	.word	0x7ae2d13b
   20410:	b2d23201 	.word	0xb2d23201
   20414:	2a0072e2 	.word	0x2a0072e2
   20418:	7aa2d135 	.word	0x7aa2d135
   2041c:	b2d23201 	.word	0xb2d23201
   20420:	2a0072a2 	.word	0x2a0072a2
   20424:	7a62d12f 	.word	0x7a62d12f
   20428:	b2d23201 	.word	0xb2d23201
   2042c:	bb527262 	.word	0xbb527262
   20430:	32017a22 	.word	0x32017a22
   20434:	7222b2d2 	.word	0x7222b2d2
   20438:	79e2bb2a 	.word	0x79e2bb2a
   2043c:	b2d23201 	.word	0xb2d23201
   20440:	bb0271e2 	.word	0xbb0271e2
   20444:	320179a2 	.word	0x320179a2
   20448:	71a2b2d2 	.word	0x71a2b2d2
   2044c:	7962b9da 	.word	0x7962b9da
   20450:	b2d23201 	.word	0xb2d23201
   20454:	b9b27162 	.word	0xb9b27162
   20458:	32017922 	.word	0x32017922
   2045c:	7122b2d2 	.word	0x7122b2d2
   20460:	78e2b98a 	.word	0x78e2b98a
   20464:	b2d23201 	.word	0xb2d23201
   20468:	b96270e2 	.word	0xb96270e2
   2046c:	320178a2 	.word	0x320178a2
   20470:	70a2b2d2 	.word	0x70a2b2d2
   20474:	7862b93a 	.word	0x7862b93a
   20478:	b2d23201 	.word	0xb2d23201
   2047c:	b9127062 	.word	0xb9127062
   20480:	32017822 	.word	0x32017822
   20484:	46227022 	.word	0x46227022
   20488:	46402101 	.word	0x46402101
   2048c:	f918f00b 	.word	0xf918f00b
   20490:	28004681 	.word	0x28004681
   20494:	af20f47f 	.word	0xaf20f47f
   20498:	0b10f10b 	.word	0x0b10f10b
   2049c:	0f30f1bb 	.word	0x0f30f1bb
   204a0:	6870d19b 	.word	0x6870d19b
   204a4:	3000f8da 	.word	0x3000f8da
   204a8:	f8da6831 	.word	0xf8da6831
   204ac:	40592004 	.word	0x40592004
   204b0:	f8da4042 	.word	0xf8da4042
   204b4:	68b03008 	.word	0x68b03008
   204b8:	ea836031 	.word	0xea836031
   204bc:	f8da0100 	.word	0xf8da0100
   204c0:	68f0300c 	.word	0x68f0300c
   204c4:	40586072 	.word	0x40586072
   204c8:	f8da6932 	.word	0xf8da6932
   204cc:	60b13010 	.word	0x60b13010
   204d0:	f8da4053 	.word	0xf8da4053
   204d4:	69721014 	.word	0x69721014
   204d8:	404a60f0 	.word	0x404a60f0
   204dc:	f8da69b0 	.word	0xf8da69b0
   204e0:	61331018 	.word	0x61331018
   204e4:	f8da4048 	.word	0xf8da4048
   204e8:	69f1301c 	.word	0x69f1301c
   204ec:	404b6172 	.word	0x404b6172
   204f0:	f8da6a32 	.word	0xf8da6a32
   204f4:	61b01020 	.word	0x61b01020
   204f8:	6a704051 	.word	0x6a704051
   204fc:	2024f8da 	.word	0x2024f8da
   20500:	405061f3 	.word	0x405061f3
   20504:	3028f8da 	.word	0x3028f8da
   20508:	62316ab2 	.word	0x62316ab2
   2050c:	e9c64053 	.word	0xe9c64053
   20510:	6af20309 	.word	0x6af20309
   20514:	302cf8da 	.word	0x302cf8da
   20518:	40534631 	.word	0x40534631
   2051c:	f44f4640 	.word	0xf44f4640
   20520:	62f37280 	.word	0x62f37280
   20524:	f94ef00a 	.word	0xf94ef00a
   20528:	28004681 	.word	0x28004681
   2052c:	aed4f47f 	.word	0xaed4f47f
   20530:	a9142210 	.word	0xa9142210
   20534:	f0124620 	.word	0xf0124620
   20538:	2301f9d6 	.word	0x2301f9d6
   2053c:	e6d16123 	.word	0xe6d16123
   20540:	0a60f10d 	.word	0x0a60f10d
   20544:	22304650 	.word	0x22304650
   20548:	f0122100 	.word	0xf0122100
   2054c:	2500f9d7 	.word	0x2500f9d7
   20550:	eb0a7be2 	.word	0xeb0a7be2
   20554:	32010305 	.word	0x32010305
   20558:	73e2b2d2 	.word	0x73e2b2d2
   2055c:	d14d2a00 	.word	0xd14d2a00
   20560:	32017ba2 	.word	0x32017ba2
   20564:	73a2b2d2 	.word	0x73a2b2d2
   20568:	d1472a00 	.word	0xd1472a00
   2056c:	32017b62 	.word	0x32017b62
   20570:	7362b2d2 	.word	0x7362b2d2
   20574:	d1412a00 	.word	0xd1412a00
   20578:	32017b22 	.word	0x32017b22
   2057c:	7322b2d2 	.word	0x7322b2d2
   20580:	d13b2a00 	.word	0xd13b2a00
   20584:	32017ae2 	.word	0x32017ae2
   20588:	72e2b2d2 	.word	0x72e2b2d2
   2058c:	d1352a00 	.word	0xd1352a00
   20590:	32017aa2 	.word	0x32017aa2
   20594:	72a2b2d2 	.word	0x72a2b2d2
   20598:	d12f2a00 	.word	0xd12f2a00
   2059c:	32017a62 	.word	0x32017a62
   205a0:	7262b2d2 	.word	0x7262b2d2
   205a4:	7a22bb52 	.word	0x7a22bb52
   205a8:	b2d23201 	.word	0xb2d23201
   205ac:	bb2a7222 	.word	0xbb2a7222
   205b0:	320179e2 	.word	0x320179e2
   205b4:	71e2b2d2 	.word	0x71e2b2d2
   205b8:	79a2bb02 	.word	0x79a2bb02
   205bc:	b2d23201 	.word	0xb2d23201
   205c0:	b9da71a2 	.word	0xb9da71a2
   205c4:	32017962 	.word	0x32017962
   205c8:	7162b2d2 	.word	0x7162b2d2
   205cc:	7922b9b2 	.word	0x7922b9b2
   205d0:	b2d23201 	.word	0xb2d23201
   205d4:	b98a7122 	.word	0xb98a7122
   205d8:	320178e2 	.word	0x320178e2
   205dc:	70e2b2d2 	.word	0x70e2b2d2
   205e0:	78a2b962 	.word	0x78a2b962
   205e4:	b2d23201 	.word	0xb2d23201
   205e8:	b93a70a2 	.word	0xb93a70a2
   205ec:	32017862 	.word	0x32017862
   205f0:	7062b2d2 	.word	0x7062b2d2
   205f4:	7822b912 	.word	0x7822b912
   205f8:	70223201 	.word	0x70223201
   205fc:	21014622 	.word	0x21014622
   20600:	f00b4640 	.word	0xf00b4640
   20604:	4681f85d 	.word	0x4681f85d
   20608:	f47f2800 	.word	0xf47f2800
   2060c:	3510ae65 	.word	0x3510ae65
   20610:	d19d2d30 	.word	0xd19d2d30
   20614:	1200e9da 	.word	0x1200e9da
   20618:	98019b00 	.word	0x98019b00
   2061c:	40424059 	.word	0x40424059
   20620:	3008f8da 	.word	0x3008f8da
   20624:	f8ca9802 	.word	0xf8ca9802
   20628:	ea831000 	.word	0xea831000
   2062c:	f8da0100 	.word	0xf8da0100
   20630:	9803300c 	.word	0x9803300c
   20634:	2004f8ca 	.word	0x2004f8ca
   20638:	9a044058 	.word	0x9a044058
   2063c:	3010f8da 	.word	0x3010f8da
   20640:	1008f8ca 	.word	0x1008f8ca
   20644:	99054053 	.word	0x99054053
   20648:	2014f8da 	.word	0x2014f8da
   2064c:	000cf8ca 	.word	0x000cf8ca
   20650:	9806404a 	.word	0x9806404a
   20654:	1018f8da 	.word	0x1018f8da
   20658:	3010f8ca 	.word	0x3010f8ca
   2065c:	9b074048 	.word	0x9b074048
   20660:	101cf8da 	.word	0x101cf8da
   20664:	2014f8ca 	.word	0x2014f8ca
   20668:	f8da404b 	.word	0xf8da404b
   2066c:	99082020 	.word	0x99082020
   20670:	0018f8ca 	.word	0x0018f8ca
   20674:	f8da4051 	.word	0xf8da4051
   20678:	9a090024 	.word	0x9a090024
   2067c:	301cf8ca 	.word	0x301cf8ca
   20680:	f8da4050 	.word	0xf8da4050
   20684:	9a0a3028 	.word	0x9a0a3028
   20688:	1020f8ca 	.word	0x1020f8ca
   2068c:	e9ca4053 	.word	0xe9ca4053
   20690:	9a0b0309 	.word	0x9a0b0309
   20694:	302cf8da 	.word	0x302cf8da
   20698:	40534640 	.word	0x40534640
   2069c:	f44f4651 	.word	0xf44f4651
   206a0:	f8ca7280 	.word	0xf8ca7280
   206a4:	f00a302c 	.word	0xf00a302c
   206a8:	4681f88d 	.word	0x4681f88d
   206ac:	f47f2800 	.word	0xf47f2800
   206b0:	2210ae13 	.word	0x2210ae13
   206b4:	4620a920 	.word	0x4620a920
   206b8:	f915f012 	.word	0xf915f012
   206bc:	69234648 	.word	0x69234648
   206c0:	61233301 	.word	0x61233301
   206c4:	e8bdb079 	.word	0xe8bdb079
   206c8:	f06f8ff0 	.word	0xf06f8ff0
   206cc:	e6030935 	.word	0xe6030935
   206d0:	0937f06f 	.word	0x0937f06f
   206d4:	bf00e600 	.word	0xbf00e600

000206d8 <packet_handler_create>:
   206d8:	b5382801 	.word	0xb5382801
   206dc:	4614460d 	.word	0x4614460d
   206e0:	db11d00d 	.word	0xdb11d00d
   206e4:	dc0f2803 	.word	0xdc0f2803
   206e8:	f00a2010 	.word	0xf00a2010
   206ec:	2218f81f 	.word	0x2218f81f
   206f0:	4b08b120 	.word	0x4b08b120
   206f4:	44136045 	.word	0x44136045
   206f8:	60036084 	.word	0x60036084
   206fc:	2014bd38 	.word	0x2014bd38
   20700:	f814f00a 	.word	0xf814f00a
   20704:	e7f32230 	.word	0xe7f32230
   20708:	f00a200c 	.word	0xf00a200c
   2070c:	2200f80f 	.word	0x2200f80f
   20710:	bf00e7ee 	.word	0xbf00e7ee
   20714:	00033e4c 	.word	0x00033e4c

00020718 <packet_handler_delete>:
   20718:	4604b510 	.word	0x4604b510
   2071c:	691b6803 	.word	0x691b6803
   20720:	68234798 	.word	0x68234798
   20724:	695b4620 	.word	0x695b4620
   20728:	46204798 	.word	0x46204798
   2072c:	4010e8bd 	.word	0x4010e8bd
   20730:	b81af00a 	.word	0xb81af00a

00020734 <symbol_0002469>:
   20734:	460db570 	.word	0x460db570
   20738:	f0014604 	.word	0xf0014604
   2073c:	2d03fc23 	.word	0x2d03fc23
   20740:	d1257025 	.word	0xd1257025
   20744:	25012308 	.word	0x25012308
   20748:	49154a14 	.word	0x49154a14
   2074c:	622360a3 	.word	0x622360a3
   20750:	62e36523 	.word	0x62e36523
   20754:	60e263a3 	.word	0x60e263a3
   20758:	4a134b12 	.word	0x4a134b12
   2075c:	48144e13 	.word	0x48144e13
   20760:	65606321 	.word	0x65606321
   20764:	64a363e2 	.word	0x64a363e2
   20768:	61e56065 	.word	0x61e56065
   2076c:	62a564e5 	.word	0x62a564e5
   20770:	e9c46365 	.word	0xe9c46365
   20774:	62665510 	.word	0x62665510
   20778:	f0061d20 	.word	0xf0061d20
   2077c:	65a0fde7 	.word	0x65a0fde7
   20780:	004cf104 	.word	0x004cf104
   20784:	fde2f006 	.word	0xfde2f006
   20788:	0517e9c4 	.word	0x0517e9c4
   2078c:	bd702000 	.word	0xbd702000
   20790:	f0014620 	.word	0xf0014620
   20794:	4807fbf7 	.word	0x4807fbf7
   20798:	bf00bd70 	.word	0xbf00bd70
   2079c:	00033f14 	.word	0x00033f14
   207a0:	00033eb4 	.word	0x00033eb4
   207a4:	20028e0c 	.word	0x20028e0c
   207a8:	00033ed4 	.word	0x00033ed4
   207ac:	00033e94 	.word	0x00033e94
   207b0:	00033ef4 	.word	0x00033ef4
   207b4:	ffffb180 	.word	0xffffb180

000207b8 <secure_client_socket>:
   207b8:	41f0e92d 	.word	0x41f0e92d
   207bc:	680b460c 	.word	0x680b460c
   207c0:	f4236989 	.word	0xf4236989
   207c4:	60233300 	.word	0x60233300
   207c8:	23006822 	.word	0x23006822
   207cc:	1280f422 	.word	0x1280f422
   207d0:	f2476022 	.word	0xf2476022
   207d4:	68270281 	.word	0x68270281
   207d8:	f0024606 	.word	0xf0024606
   207dc:	2800fedb 	.word	0x2800fedb
   207e0:	4605d03b 	.word	0x4605d03b
   207e4:	eb064b28 	.word	0xeb064b28
   207e8:	eb0301c6 	.word	0xeb0301c6
   207ec:	22240181 	.word	0x22240181
   207f0:	f0123014 	.word	0xf0123014
   207f4:	68abf878 	.word	0x68abf878
   207f8:	8090f8df 	.word	0x8090f8df
   207fc:	60ab3324 	.word	0x60ab3324
   20800:	46296823 	.word	0x46296823
   20804:	0308ea03 	.word	0x0308ea03
   20808:	030af043 	.word	0x030af043
   2080c:	f2476023 	.word	0xf2476023
   20810:	463b0281 	.word	0x463b0281
   20814:	f0024620 	.word	0xf0024620
   20818:	b960fedd 	.word	0xb960fedd
   2081c:	00db6823 	.word	0x00db6823
   20820:	f04fd40b 	.word	0xf04fd40b
   20824:	f64f33ff 	.word	0xf64f33ff
   20828:	210b72ff 	.word	0x210b72ff
   2082c:	f0024630 	.word	0xf0024630
   20830:	b128fee5 	.word	0xb128fee5
   20834:	e8bd6027 	.word	0xe8bd6027
   20838:	207381f0 	.word	0x207381f0
   2083c:	81f0e8bd 	.word	0x81f0e8bd
   20840:	6280f04f 	.word	0x6280f04f
   20844:	46114630 	.word	0x46114630
   20848:	33fff04f 	.word	0x33fff04f
   2084c:	fed6f002 	.word	0xfed6f002
   20850:	2873b130 	.word	0x2873b130
   20854:	6027d0ef 	.word	0x6027d0ef
   20858:	200ce7ed 	.word	0x200ce7ed
   2085c:	81f0e8bd 	.word	0x81f0e8bd
   20860:	f0236823 	.word	0xf0236823
   20864:	60236380 	.word	0x60236380
   20868:	ea036823 	.word	0xea036823
   2086c:	f0480808 	.word	0xf0480808
   20870:	6023030c 	.word	0x6023030c
   20874:	f4436823 	.word	0xf4436823
   20878:	60233300 	.word	0x60233300
   2087c:	f4436823 	.word	0xf4436823
   20880:	60231380 	.word	0x60231380
   20884:	81f0e8bd 	.word	0x81f0e8bd
   20888:	200201d0 	.word	0x200201d0
   2088c:	ffff0000 	.word	0xffff0000

00020890 <tls_interface_init>:
   20890:	47702000 	.word	0x47702000

00020894 <tls_interface_open>:
   20894:	f020b538 	.word	0xf020b538
   20898:	2b020308 	.word	0x2b020308
   2089c:	202fd006 	.word	0x202fd006
   208a0:	fefaf7fc 	.word	0xfefaf7fc
   208a4:	35fff04f 	.word	0x35fff04f
   208a8:	bd384628 	.word	0xbd384628
   208ac:	1e4a4614 	.word	0x1e4a4614
   208b0:	d8282a01 	.word	0xd8282a01
   208b4:	2901bb14 	.word	0x2901bb14
   208b8:	2301bf06 	.word	0x2301bf06
   208bc:	7482f44f 	.word	0x7482f44f
   208c0:	7487f44f 	.word	0x7487f44f
   208c4:	f002461a 	.word	0xf002461a
   208c8:	1e05fec5 	.word	0x1e05fec5
   208cc:	4b15db26 	.word	0x4b15db26
   208d0:	00c5eb05 	.word	0x00c5eb05
   208d4:	0080eb03 	.word	0x0080eb03
   208d8:	49132224 	.word	0x49132224
   208dc:	f803f012 	.word	0xf803f012
   208e0:	f0024628 	.word	0xf0024628
   208e4:	6803fd0d 	.word	0x6803fd0d
   208e8:	f4236144 	.word	0xf4236144
   208ec:	60031380 	.word	0x60031380
   208f0:	f4236803 	.word	0xf4236803
   208f4:	60033300 	.word	0x60033300
   208f8:	bd384628 	.word	0xbd384628
   208fc:	d0082901 	.word	0xd0082901
   20900:	7f87f5b4 	.word	0x7f87f5b4
   20904:	2016d0de 	.word	0x2016d0de
   20908:	fec6f7fc 	.word	0xfec6f7fc
   2090c:	35fff04f 	.word	0x35fff04f
   20910:	f5b4e7ca 	.word	0xf5b4e7ca
   20914:	d1f67f82 	.word	0xd1f67f82
   20918:	e7d3460b 	.word	0xe7d3460b
   2091c:	35fff04f 	.word	0x35fff04f
   20920:	bf00e7c2 	.word	0xbf00e7c2
   20924:	200201d0 	.word	0x200201d0
   20928:	00033f34 	.word	0x00033f34

0002092c <tls_interface_close>:
   2092c:	4604b510 	.word	0x4604b510
   20930:	fce6f002 	.word	0xfce6f002
   20934:	4620b120 	.word	0x4620b120
   20938:	4010e8bd 	.word	0x4010e8bd
   2093c:	bf36f002 	.word	0xbf36f002
   20940:	f7fc2009 	.word	0xf7fc2009
   20944:	f04ffea9 	.word	0xf04ffea9
   20948:	bd1030ff 	.word	0xbd1030ff

0002094c <tls_interface_sendto>:
   2094c:	47f0e92d 	.word	0x47f0e92d
   20950:	e9dd460d 	.word	0xe9dd460d
   20954:	46168908 	.word	0x46168908
   20958:	4604461f 	.word	0x4604461f
   2095c:	fcd0f002 	.word	0xfcd0f002
   20960:	d03b2800 	.word	0xd03b2800
   20964:	b29b6803 	.word	0xb29b6803
   20968:	d0392b0c 	.word	0xd0392b0c
   2096c:	b29b6803 	.word	0xb29b6803
   20970:	d1112b0b 	.word	0xd1112b0b
   20974:	eb044b20 	.word	0xeb044b20
   20978:	f81304c4 	.word	0xf81304c4
   2097c:	2b023024 	.word	0x2b023024
   20980:	6903d038 	.word	0x6903d038
   20984:	bf142b01 	.word	0xbf142b01
   20988:	202a2039 	.word	0x202a2039
   2098c:	fe84f7fc 	.word	0xfe84f7fc
   20990:	30fff04f 	.word	0x30fff04f
   20994:	87f0e8bd 	.word	0x87f0e8bd
   20998:	2b016903 	.word	0x2b016903
   2099c:	2b02d00b 	.word	0x2b02d00b
   209a0:	2039d001 	.word	0x2039d001
   209a4:	6803e7f2 	.word	0x6803e7f2
   209a8:	2b02b29b 	.word	0x2b02b29b
   209ac:	6803d007 	.word	0x6803d007
   209b0:	2b04b29b 	.word	0x2b04b29b
   209b4:	6803d003 	.word	0x6803d003
   209b8:	2b05b29b 	.word	0x2b05b29b
   209bc:	4b0ed1f1 	.word	0x4b0ed1f1
   209c0:	02c4eb04 	.word	0x02c4eb04
   209c4:	3022f813 	.word	0x3022f813
   209c8:	d1ea2b02 	.word	0xd1ea2b02
   209cc:	46204601 	.word	0x46204601
   209d0:	fef2f7ff 	.word	0xfef2f7ff
   209d4:	d0032800 	.word	0xd0032800
   209d8:	e7d9dcd8 	.word	0xe7d9dcd8
   209dc:	e7d52009 	.word	0xe7d52009
   209e0:	8908e9cd 	.word	0x8908e9cd
   209e4:	4632463b 	.word	0x4632463b
   209e8:	46204629 	.word	0x46204629
   209ec:	47f0e8bd 	.word	0x47f0e8bd
   209f0:	bf4cf002 	.word	0xbf4cf002
   209f4:	e7c92023 	.word	0xe7c92023
   209f8:	200201d0 	.word	0x200201d0

000209fc <tls_interface_recvfrom>:
   209fc:	47f0e92d 	.word	0x47f0e92d
   20a00:	e9dd460d 	.word	0xe9dd460d
   20a04:	46168908 	.word	0x46168908
   20a08:	4604461f 	.word	0x4604461f
   20a0c:	fc78f002 	.word	0xfc78f002
   20a10:	d0382800 	.word	0xd0382800
   20a14:	b29b6803 	.word	0xb29b6803
   20a18:	d00f2b0c 	.word	0xd00f2b0c
   20a1c:	b29b6803 	.word	0xb29b6803
   20a20:	d00b2b0d 	.word	0xd00b2b0d
   20a24:	2b016903 	.word	0x2b016903
   20a28:	2b02d01a 	.word	0x2b02d01a
   20a2c:	2023d010 	.word	0x2023d010
   20a30:	fe32f7fc 	.word	0xfe32f7fc
   20a34:	30fff04f 	.word	0x30fff04f
   20a38:	87f0e8bd 	.word	0x87f0e8bd
   20a3c:	8908e9cd 	.word	0x8908e9cd
   20a40:	4632463b 	.word	0x4632463b
   20a44:	46204629 	.word	0x46204629
   20a48:	47f0e8bd 	.word	0x47f0e8bd
   20a4c:	b858f003 	.word	0xb858f003
   20a50:	b29b6803 	.word	0xb29b6803
   20a54:	d0072b02 	.word	0xd0072b02
   20a58:	b29b6803 	.word	0xb29b6803
   20a5c:	d0032b04 	.word	0xd0032b04
   20a60:	b29b6803 	.word	0xb29b6803
   20a64:	d1e22b05 	.word	0xd1e22b05
   20a68:	eb044b08 	.word	0xeb044b08
   20a6c:	f81302c4 	.word	0xf81302c4
   20a70:	2b023022 	.word	0x2b023022
   20a74:	4601d1db 	.word	0x4601d1db
   20a78:	f7ff4620 	.word	0xf7ff4620
   20a7c:	2800fe9d 	.word	0x2800fe9d
   20a80:	dcd5d0dc 	.word	0xdcd5d0dc
   20a84:	2009e7d6 	.word	0x2009e7d6
   20a88:	bf00e7d2 	.word	0xbf00e7d2
   20a8c:	200201d0 	.word	0x200201d0

00020a90 <tls_interface_bind>:
   20a90:	43f8e92d 	.word	0x43f8e92d
   20a94:	4617460c 	.word	0x4617460c
   20a98:	f0024606 	.word	0xf0024606
   20a9c:	2800fc31 	.word	0x2800fc31
   20aa0:	6803d04c 	.word	0x6803d04c
   20aa4:	b29b4605 	.word	0xb29b4605
   20aa8:	d1502b02 	.word	0xd1502b02
   20aac:	463a4621 	.word	0x463a4621
   20ab0:	f0034630 	.word	0xf0034630
   20ab4:	4604f9fb 	.word	0x4604f9fb
   20ab8:	2c00b120 	.word	0x2c00b120
   20abc:	4620dc3f 	.word	0x4620dc3f
   20ac0:	83f8e8bd 	.word	0x83f8e8bd
   20ac4:	07c6eb06 	.word	0x07c6eb06
   20ac8:	8094f8df 	.word	0x8094f8df
   20acc:	f81800bf 	.word	0xf81800bf
   20ad0:	2b013007 	.word	0x2b013007
   20ad4:	4603d1f3 	.word	0x4603d1f3
   20ad8:	0281f247 	.word	0x0281f247
   20adc:	463069a9 	.word	0x463069a9
   20ae0:	fd58f002 	.word	0xfd58f002
   20ae4:	b3b04681 	.word	0xb3b04681
   20ae8:	0107eb08 	.word	0x0107eb08
   20aec:	30142224 	.word	0x30142224
   20af0:	fef9f011 	.word	0xfef9f011
   20af4:	3008f8d9 	.word	0x3008f8d9
   20af8:	33244649 	.word	0x33244649
   20afc:	3008f8c9 	.word	0x3008f8c9
   20b00:	2304682a 	.word	0x2304682a
   20b04:	04120c12 	.word	0x04120c12
   20b08:	020af042 	.word	0x020af042
   20b0c:	4628602a 	.word	0x4628602a
   20b10:	0281f247 	.word	0x0281f247
   20b14:	fd5ef002 	.word	0xfd5ef002
   20b18:	682bb9f8 	.word	0x682bb9f8
   20b1c:	d41800db 	.word	0xd41800db
   20b20:	f04f4630 	.word	0xf04f4630
   20b24:	f64f33ff 	.word	0xf64f33ff
   20b28:	210b72ff 	.word	0x210b72ff
   20b2c:	fd66f002 	.word	0xfd66f002
   20b30:	d0c42800 	.word	0xd0c42800
   20b34:	46042304 	.word	0x46042304
   20b38:	e7be602b 	.word	0xe7be602b
   20b3c:	46202409 	.word	0x46202409
   20b40:	34fff04f 	.word	0x34fff04f
   20b44:	fda8f7fc 	.word	0xfda8f7fc
   20b48:	e8bd4620 	.word	0xe8bd4620
   20b4c:	242d83f8 	.word	0x242d83f8
   20b50:	2473e7f5 	.word	0x2473e7f5
   20b54:	240ce7f3 	.word	0x240ce7f3
   20b58:	4604e7f1 	.word	0x4604e7f1
   20b5c:	bf00e7ad 	.word	0xbf00e7ad
   20b60:	200201d0 	.word	0x200201d0

00020b64 <tls_interface_connect>:
   20b64:	460eb5f8 	.word	0x460eb5f8
   20b68:	46044617 	.word	0x46044617
   20b6c:	fbc8f002 	.word	0xfbc8f002
   20b70:	4b13b1e8 	.word	0x4b13b1e8
   20b74:	02c4eb04 	.word	0x02c4eb04
   20b78:	3022f813 	.word	0x3022f813
   20b7c:	d11c2b02 	.word	0xd11c2b02
   20b80:	46056803 	.word	0x46056803
   20b84:	2b02b29b 	.word	0x2b02b29b
   20b88:	6803d003 	.word	0x6803d003
   20b8c:	2b04b29b 	.word	0x2b04b29b
   20b90:	463ad113 	.word	0x463ad113
   20b94:	46204631 	.word	0x46204631
   20b98:	f8def003 	.word	0xf8def003
   20b9c:	2800b110 	.word	0x2800b110
   20ba0:	bdf8dc06 	.word	0xbdf8dc06
   20ba4:	46204629 	.word	0x46204629
   20ba8:	fe06f7ff 	.word	0xfe06f7ff
   20bac:	2009e7f7 	.word	0x2009e7f7
   20bb0:	fd72f7fc 	.word	0xfd72f7fc
   20bb4:	30fff04f 	.word	0x30fff04f
   20bb8:	202dbdf8 	.word	0x202dbdf8
   20bbc:	bf00e7f8 	.word	0xbf00e7f8
   20bc0:	200201d0 	.word	0x200201d0

00020bc4 <tls_interface_listen>:
   20bc4:	47f0e92d 	.word	0x47f0e92d
   20bc8:	4606460f 	.word	0x4606460f
   20bcc:	fb98f002 	.word	0xfb98f002
   20bd0:	d06b2800 	.word	0xd06b2800
   20bd4:	46046903 	.word	0x46046903
   20bd8:	d1652b01 	.word	0xd1652b01
   20bdc:	b29b6803 	.word	0xb29b6803
   20be0:	d0562b04 	.word	0xd0562b04
   20be4:	b29b6823 	.word	0xb29b6823
   20be8:	d15d2b0b 	.word	0xd15d2b0b
   20bec:	f8df00f3 	.word	0xf8df00f3
   20bf0:	199a90c0 	.word	0x199a90c0
   20bf4:	2022f819 	.word	0x2022f819
   20bf8:	d1552a01 	.word	0xd1552a01
   20bfc:	44332201 	.word	0x44332201
   20c00:	f809009d 	.word	0xf809009d
   20c04:	69a12005 	.word	0x69a12005
   20c08:	f2472300 	.word	0xf2472300
   20c0c:	46300281 	.word	0x46300281
   20c10:	8000f8d4 	.word	0x8000f8d4
   20c14:	fcbef002 	.word	0xfcbef002
   20c18:	28004682 	.word	0x28004682
   20c1c:	eb09d042 	.word	0xeb09d042
   20c20:	22240105 	.word	0x22240105
   20c24:	f0113014 	.word	0xf0113014
   20c28:	f8dafe5e 	.word	0xf8dafe5e
   20c2c:	46513008 	.word	0x46513008
   20c30:	f8ca3324 	.word	0xf8ca3324
   20c34:	68223008 	.word	0x68223008
   20c38:	0c124643 	.word	0x0c124643
   20c3c:	f0420412 	.word	0xf0420412
   20c40:	6022020a 	.word	0x6022020a
   20c44:	f2474620 	.word	0xf2474620
   20c48:	f0020281 	.word	0xf0020281
   20c4c:	b9e0fcc3 	.word	0xb9e0fcc3
   20c50:	00db6823 	.word	0x00db6823
   20c54:	f04fd40e 	.word	0xf04fd40e
   20c58:	f64f33ff 	.word	0xf64f33ff
   20c5c:	210b72ff 	.word	0x210b72ff
   20c60:	f0024630 	.word	0xf0024630
   20c64:	b160fccb 	.word	0xb160fccb
   20c68:	f8c42800 	.word	0xf8c42800
   20c6c:	dc028000 	.word	0xdc028000
   20c70:	87f0e8bd 	.word	0x87f0e8bd
   20c74:	f7fc2073 	.word	0xf7fc2073
   20c78:	f04ffd0f 	.word	0xf04ffd0f
   20c7c:	e8bd30ff 	.word	0xe8bd30ff
   20c80:	463987f0 	.word	0x463987f0
   20c84:	f0034630 	.word	0xf0034630
   20c88:	2800f9a7 	.word	0x2800f9a7
   20c8c:	e8bddcf3 	.word	0xe8bddcf3
   20c90:	00f387f0 	.word	0x00f387f0
   20c94:	9018f8df 	.word	0x9018f8df
   20c98:	f819199a 	.word	0xf819199a
   20c9c:	2a022022 	.word	0x2a022022
   20ca0:	e7abd1a0 	.word	0xe7abd1a0
   20ca4:	e7e6200c 	.word	0xe7e6200c
   20ca8:	e7e4202d 	.word	0xe7e4202d
   20cac:	e7e22009 	.word	0xe7e22009
   20cb0:	200201d0 	.word	0x200201d0

00020cb4 <tls_interface_accept>:
   20cb4:	460cb5f8 	.word	0x460cb5f8
   20cb8:	461f4616 	.word	0x461f4616
   20cbc:	f0024605 	.word	0xf0024605
   20cc0:	2800fb1f 	.word	0x2800fb1f
   20cc4:	6800d03b 	.word	0x6800d03b
   20cc8:	2806b280 	.word	0x2806b280
   20ccc:	4621d137 	.word	0x4621d137
   20cd0:	4632463b 	.word	0x4632463b
   20cd4:	f0034628 	.word	0xf0034628
   20cd8:	4604f9f5 	.word	0x4604f9f5
   20cdc:	2c00b118 	.word	0x2c00b118
   20ce0:	4620dc2e 	.word	0x4620dc2e
   20ce4:	4628bdf8 	.word	0x4628bdf8
   20ce8:	fb0af002 	.word	0xfb0af002
   20cec:	4f186803 	.word	0x4f186803
   20cf0:	3300f423 	.word	0x3300f423
   20cf4:	68036003 	.word	0x68036003
   20cf8:	05c5eb05 	.word	0x05c5eb05
   20cfc:	1380f423 	.word	0x1380f423
   20d00:	60034606 	.word	0x60034606
   20d04:	0185eb07 	.word	0x0185eb07
   20d08:	46382224 	.word	0x46382224
   20d0c:	fdebf011 	.word	0xfdebf011
   20d10:	703b2302 	.word	0x703b2302
   20d14:	46206833 	.word	0x46206833
   20d18:	041b0c1b 	.word	0x041b0c1b
   20d1c:	030bf043 	.word	0x030bf043
   20d20:	f64f6033 	.word	0xf64f6033
   20d24:	f04f72ff 	.word	0xf04f72ff
   20d28:	210c33ff 	.word	0x210c33ff
   20d2c:	fc66f002 	.word	0xfc66f002
   20d30:	28004604 	.word	0x28004604
   20d34:	2000d0d5 	.word	0x2000d0d5
   20d38:	fd38f002 	.word	0xfd38f002
   20d3c:	2409e7cf 	.word	0x2409e7cf
   20d40:	f04f4620 	.word	0xf04f4620
   20d44:	f7fc34ff 	.word	0xf7fc34ff
   20d48:	4620fca7 	.word	0x4620fca7
   20d4c:	bf00bdf8 	.word	0xbf00bdf8
   20d50:	200201d0 	.word	0x200201d0

00020d54 <tls_interface_setopt>:
   20d54:	41f0e92d 	.word	0x41f0e92d
   20d58:	7f8df5b1 	.word	0x7f8df5b1
   20d5c:	d11d9f06 	.word	0xd11d9f06
   20d60:	b1c3461c 	.word	0xb1c3461c
   20d64:	4605b1bf 	.word	0x4605b1bf
   20d68:	f0024616 	.word	0xf0024616
   20d6c:	b1c8fac9 	.word	0xb1c8fac9
   20d70:	b29b6803 	.word	0xb29b6803
   20d74:	d0072b02 	.word	0xd0072b02
   20d78:	b29b6803 	.word	0xb29b6803
   20d7c:	d0032b04 	.word	0xd0032b04
   20d80:	b29b6803 	.word	0xb29b6803
   20d84:	d10d2b05 	.word	0xd10d2b05
   20d88:	2e033e01 	.word	0x2e033e01
   20d8c:	e8dfd851 	.word	0xe8dfd851
   20d90:	3225f006 	.word	0x3225f006
   20d94:	200e0b18 	.word	0x200e0b18
   20d98:	81f0e8bd 	.word	0x81f0e8bd
   20d9c:	41f0e8bd 	.word	0x41f0e8bd
   20da0:	bac8f003 	.word	0xbac8f003
   20da4:	e7f72009 	.word	0xe7f72009
   20da8:	d1392f04 	.word	0xd1392f04
   20dac:	2b026823 	.word	0x2b026823
   20db0:	4a21d836 	.word	0x4a21d836
   20db4:	05c5eb05 	.word	0x05c5eb05
   20db8:	0585eb02 	.word	0x0585eb02
   20dbc:	200070ab 	.word	0x200070ab
   20dc0:	2f01e7ea 	.word	0x2f01e7ea
   20dc4:	7823d12c 	.word	0x7823d12c
   20dc8:	d8292b01 	.word	0xd8292b01
   20dcc:	eb054a1a 	.word	0xeb054a1a
   20dd0:	eb0205c5 	.word	0xeb0205c5
   20dd4:	70530285 	.word	0x70530285
   20dd8:	e7dd2000 	.word	0xe7dd2000
   20ddc:	d11f2f04 	.word	0xd11f2f04
   20de0:	b1f86820 	.word	0xb1f86820
   20de4:	d11b2801 	.word	0xd11b2801
   20de8:	eb054b13 	.word	0xeb054b13
   20dec:	f80305c5 	.word	0xf80305c5
   20df0:	20000025 	.word	0x20000025
   20df4:	ea5fe7d0 	.word	0xea5fe7d0
   20df8:	d0110c97 	.word	0xd0110c97
   20dfc:	0603f017 	.word	0x0603f017
   20e00:	eb05d10e 	.word	0xeb05d10e
   20e04:	00ad05c5 	.word	0x00ad05c5
   20e08:	1d284b0b 	.word	0x1d284b0b
   20e0c:	442b4418 	.word	0x442b4418
   20e10:	4621463a 	.word	0x4621463a
   20e14:	c003f883 	.word	0xc003f883
   20e18:	fd65f011 	.word	0xfd65f011
   20e1c:	e7bb4630 	.word	0xe7bb4630
   20e20:	e7b92016 	.word	0xe7b92016
   20e24:	4b042202 	.word	0x4b042202
   20e28:	05c5eb05 	.word	0x05c5eb05
   20e2c:	2025f803 	.word	0x2025f803
   20e30:	202ae7b2 	.word	0x202ae7b2
   20e34:	bf00e7b0 	.word	0xbf00e7b0
   20e38:	200201d0 	.word	0x200201d0

00020e3c <tls_interface_getopt>:
   20e3c:	41f0e92d 	.word	0x41f0e92d
   20e40:	7f8df5b1 	.word	0x7f8df5b1
   20e44:	d1129f06 	.word	0xd1129f06
   20e48:	b16b461d 	.word	0xb16b461d
   20e4c:	4606b167 	.word	0x4606b167
   20e50:	f0024614 	.word	0xf0024614
   20e54:	2800fa55 	.word	0x2800fa55
   20e58:	3c01d04f 	.word	0x3c01d04f
   20e5c:	d8522c03 	.word	0xd8522c03
   20e60:	f004e8df 	.word	0xf004e8df
   20e64:	09152139 	.word	0x09152139
   20e68:	e8bd200e 	.word	0xe8bd200e
   20e6c:	e8bd81f0 	.word	0xe8bd81f0
   20e70:	f00341f0 	.word	0xf00341f0
   20e74:	683bbb1b 	.word	0x683bbb1b
   20e78:	d13c2b04 	.word	0xd13c2b04
   20e7c:	eb064b23 	.word	0xeb064b23
   20e80:	eb0306c6 	.word	0xeb0306c6
   20e84:	78b30686 	.word	0x78b30686
   20e88:	602b2000 	.word	0x602b2000
   20e8c:	683be7ed 	.word	0x683be7ed
   20e90:	d1302b04 	.word	0xd1302b04
   20e94:	eb064b1d 	.word	0xeb064b1d
   20e98:	eb0306c6 	.word	0xeb0306c6
   20e9c:	78730686 	.word	0x78730686
   20ea0:	602b2000 	.word	0x602b2000
   20ea4:	eb06e7e1 	.word	0xeb06e7e1
   20ea8:	491806c6 	.word	0x491806c6
   20eac:	00b6683b 	.word	0x00b6683b
   20eb0:	f013198a 	.word	0xf013198a
   20eb4:	78d00403 	.word	0x78d00403
   20eb8:	089bd121 	.word	0x089bd121
   20ebc:	bf284283 	.word	0xbf284283
   20ec0:	009a4603 	.word	0x009a4603
   20ec4:	3604b1db 	.word	0x3604b1db
   20ec8:	603a4431 	.word	0x603a4431
   20ecc:	f0114628 	.word	0xf0114628
   20ed0:	4620fd0a 	.word	0x4620fd0a
   20ed4:	683be7c9 	.word	0x683be7c9
   20ed8:	d10c2b04 	.word	0xd10c2b04
   20edc:	eb064b0b 	.word	0xeb064b0b
   20ee0:	f81306c6 	.word	0xf81306c6
   20ee4:	20003026 	.word	0x20003026
   20ee8:	0301f1a3 	.word	0x0301f1a3
   20eec:	f383fab3 	.word	0xf383fab3
   20ef0:	602b095b 	.word	0x602b095b
   20ef4:	2016e7b9 	.word	0x2016e7b9
   20ef8:	2009e7b7 	.word	0x2009e7b7
   20efc:	2800e7b5 	.word	0x2800e7b5
   20f00:	6038d1f9 	.word	0x6038d1f9
   20f04:	202ae7b1 	.word	0x202ae7b1
   20f08:	bf00e7af 	.word	0xbf00e7af
   20f0c:	200201d0 	.word	0x200201d0

00020f10 <tls_rpc_ip_event_handler>:
   20f10:	f248b538 	.word	0xf248b538
   20f14:	42ab0581 	.word	0x42ab0581
   20f18:	d053460c 	.word	0xd053460c
   20f1c:	0182f249 	.word	0x0182f249
   20f20:	d02d428b 	.word	0xd02d428b
   20f24:	0102f248 	.word	0x0102f248
   20f28:	d001428b 	.word	0xd001428b
   20f2c:	bd382001 	.word	0xbd382001
   20f30:	d0fb2c00 	.word	0xd0fb2c00
   20f34:	f5b36963 	.word	0xf5b36963
   20f38:	d0027f82 	.word	0xd0027f82
   20f3c:	7f87f5b3 	.word	0x7f87f5b3
   20f40:	6823d1f4 	.word	0x6823d1f4
   20f44:	5300f023 	.word	0x5300f023
   20f48:	69556023 	.word	0x69556023
   20f4c:	d1482d00 	.word	0xd1482d00
   20f50:	0c1b6823 	.word	0x0c1b6823
   20f54:	f043041b 	.word	0xf043041b
   20f58:	60230305 	.word	0x60230305
   20f5c:	00da6823 	.word	0x00da6823
   20f60:	4b25d50c 	.word	0x4b25d50c
   20f64:	02c0eb00 	.word	0x02c0eb00
   20f68:	3022f813 	.word	0x3022f813
   20f6c:	d1052b02 	.word	0xd1052b02
   20f70:	f7ff4621 	.word	0xf7ff4621
   20f74:	b108fc21 	.word	0xb108fc21
   20f78:	d1352873 	.word	0xd1352873
   20f7c:	bd382000 	.word	0xbd382000
   20f80:	d0fb2c00 	.word	0xd0fb2c00
   20f84:	b29b6823 	.word	0xb29b6823
   20f88:	d1f72b0b 	.word	0xd1f72b0b
   20f8c:	bb486910 	.word	0xbb486910
   20f90:	f0436823 	.word	0xf0436823
   20f94:	60236380 	.word	0x60236380
   20f98:	00db6823 	.word	0x00db6823
   20f9c:	6823d5ee 	.word	0x6823d5ee
   20fa0:	6380f023 	.word	0x6380f023
   20fa4:	68236023 	.word	0x68236023
   20fa8:	041b0c1b 	.word	0x041b0c1b
   20fac:	030cf043 	.word	0x030cf043
   20fb0:	68236023 	.word	0x68236023
   20fb4:	3300f443 	.word	0x3300f443
   20fb8:	68236023 	.word	0x68236023
   20fbc:	1380f443 	.word	0x1380f443
   20fc0:	bd386023 	.word	0xbd386023
   20fc4:	d0d92900 	.word	0xd0d92900
   20fc8:	b29b680b 	.word	0xb29b680b
   20fcc:	d1d52b0a 	.word	0xd1d52b0a
   20fd0:	b9386950 	.word	0xb9386950
   20fd4:	0c1b680b 	.word	0x0c1b680b
   20fd8:	f043041b 	.word	0xf043041b
   20fdc:	600b030b 	.word	0x600b030b
   20fe0:	4628bd38 	.word	0x4628bd38
   20fe4:	faccf002 	.word	0xfaccf002
   20fe8:	68236060 	.word	0x68236060
   20fec:	f4432000 	.word	0xf4432000
   20ff0:	60232380 	.word	0x60232380
   20ff4:	bf00bd38 	.word	0xbf00bd38
   20ff8:	200201d0 	.word	0x200201d0

00020ffc <rpc_gnss_serialize_utc>:
   20ffc:	b1d84603 	.word	0xb1d84603
   21000:	2000b1d1 	.word	0x2000b1d1
   21004:	70482201 	.word	0x70482201
   21008:	685a700a 	.word	0x685a700a
   2100c:	f8c12010 	.word	0xf8c12010
   21010:	681a2006 	.word	0x681a2006
   21014:	2002f8c1 	.word	0x2002f8c1
   21018:	200af993 	.word	0x200af993
   2101c:	f993730a 	.word	0xf993730a
   21020:	73ca200d 	.word	0x73ca200d
   21024:	200cf993 	.word	0x200cf993
   21028:	7a1a738a 	.word	0x7a1a738a
   2102c:	7ada728a 	.word	0x7ada728a
   21030:	7a5b734a 	.word	0x7a5b734a
   21034:	477072cb 	.word	0x477072cb
   21038:	30fff04f 	.word	0x30fff04f
   2103c:	bf004770 	.word	0xbf004770

00021040 <rpc_gnss_serialize_ephe>:
   21040:	28004603 	.word	0x28004603
   21044:	2900d04b 	.word	0x2900d04b
   21048:	2000d049 	.word	0x2000d049
   2104c:	70482202 	.word	0x70482202
   21050:	68da700a 	.word	0x68da700a
   21054:	f8c12040 	.word	0xf8c12040
   21058:	f9b3200b 	.word	0xf9b3200b
   2105c:	f8a12008 	.word	0xf8a12008
   21060:	f9932009 	.word	0xf9932009
   21064:	720a2006 	.word	0x720a2006
   21068:	2044f9b3 	.word	0x2044f9b3
   2106c:	f9b3878a 	.word	0xf9b3878a
   21070:	86ca203e 	.word	0x86ca203e
   21074:	2042f9b3 	.word	0x2042f9b3
   21078:	f9b3874a 	.word	0xf9b3874a
   2107c:	868a203c 	.word	0x868a203c
   21080:	2046f9b3 	.word	0x2046f9b3
   21084:	f9b387ca 	.word	0xf9b387ca
   21088:	870a2040 	.word	0x870a2040
   2108c:	201cf9b3 	.word	0x201cf9b3
   21090:	6a9a830a 	.word	0x6a9a830a
   21094:	2022f8c1 	.word	0x2022f8c1
   21098:	744a7c9a 	.word	0x744a7c9a
   2109c:	70ca785a 	.word	0x70ca785a
   210a0:	62ca6b5a 	.word	0x62ca6b5a
   210a4:	202cf9b3 	.word	0x202cf9b3
   210a8:	885a84ca 	.word	0x885a84ca
   210ac:	6a1a808a 	.word	0x6a1a808a
   210b0:	201af8c1 	.word	0x201af8c1
   210b4:	630a6b9a 	.word	0x630a6b9a
   210b8:	f8c16a5a 	.word	0xf8c16a5a
   210bc:	6b1a201e 	.word	0x6b1a201e
   210c0:	781a628a 	.word	0x781a628a
   210c4:	f993708a 	.word	0xf993708a
   210c8:	73ca2010 	.word	0x73ca2010
   210cc:	80ca889a 	.word	0x80ca889a
   210d0:	824a8a9a 	.word	0x824a8a9a
   210d4:	740a7c5a 	.word	0x740a7c5a
   210d8:	614b699b 	.word	0x614b699b
   210dc:	f04f4770 	.word	0xf04f4770
   210e0:	477030ff 	.word	0x477030ff

000210e4 <rpc_gnss_serialize_alm>:
   210e4:	b3604603 	.word	0xb3604603
   210e8:	2000b359 	.word	0x2000b359
   210ec:	70482203 	.word	0x70482203
   210f0:	f9b3700a 	.word	0xf9b3700a
   210f4:	2021201c 	.word	0x2021201c
   210f8:	201df8a1 	.word	0x201df8a1
   210fc:	201ef9b3 	.word	0x201ef9b3
   21100:	201ff8a1 	.word	0x201ff8a1
   21104:	2006f9b3 	.word	0x2006f9b3
   21108:	889a810a 	.word	0x889a810a
   2110c:	78da80ca 	.word	0x78da80ca
   21110:	699a714a 	.word	0x699a714a
   21114:	2019f8c1 	.word	0x2019f8c1
   21118:	f8c1691a 	.word	0xf8c1691a
   2111c:	f9b32011 	.word	0xf9b32011
   21120:	814a2008 	.word	0x814a2008
   21124:	f8c168da 	.word	0xf8c168da
   21128:	7a9a200d 	.word	0x7a9a200d
   2112c:	781a730a 	.word	0x781a730a
   21130:	789a708a 	.word	0x789a708a
   21134:	695a710a 	.word	0x695a710a
   21138:	2015f8c1 	.word	0x2015f8c1
   2113c:	70cb785b 	.word	0x70cb785b
   21140:	f04f4770 	.word	0xf04f4770
   21144:	477030ff 	.word	0x477030ff

00021148 <rpc_gnss_serialize_klob>:
   21148:	b1f04603 	.word	0xb1f04603
   2114c:	2000b1e9 	.word	0x2000b1e9
   21150:	70482204 	.word	0x70482204
   21154:	f993700a 	.word	0xf993700a
   21158:	200a2000 	.word	0x200a2000
   2115c:	f993708a 	.word	0xf993708a
   21160:	70ca2001 	.word	0x70ca2001
   21164:	2002f993 	.word	0x2002f993
   21168:	f993710a 	.word	0xf993710a
   2116c:	714a2003 	.word	0x714a2003
   21170:	2004f993 	.word	0x2004f993
   21174:	f993718a 	.word	0xf993718a
   21178:	71ca2005 	.word	0x71ca2005
   2117c:	2006f993 	.word	0x2006f993
   21180:	f993720a 	.word	0xf993720a
   21184:	724b3007 	.word	0x724b3007
   21188:	f04f4770 	.word	0xf04f4770
   2118c:	477030ff 	.word	0x477030ff

00021190 <rpc_gnss_serialize_nequick>:
   21190:	b1984603 	.word	0xb1984603
   21194:	2000b191 	.word	0x2000b191
   21198:	70482205 	.word	0x70482205
   2119c:	f9b3700a 	.word	0xf9b3700a
   211a0:	200a2000 	.word	0x200a2000
   211a4:	f9b3804a 	.word	0xf9b3804a
   211a8:	808a2002 	.word	0x808a2002
   211ac:	2004f9b3 	.word	0x2004f9b3
   211b0:	799a80ca 	.word	0x799a80ca
   211b4:	79db720a 	.word	0x79db720a
   211b8:	4770724b 	.word	0x4770724b
   211bc:	30fff04f 	.word	0x30fff04f
   211c0:	bf004770 	.word	0xbf004770

000211c4 <rpc_gnss_serialize_time_and_sv_tow>:
   211c4:	b309b310 	.word	0xb309b310
   211c8:	2500b470 	.word	0x2500b470
   211cc:	460c2606 	.word	0x460c2606
   211d0:	700e704d 	.word	0x700e704d
   211d4:	8805462b 	.word	0x8805462b
   211d8:	804d4602 	.word	0x804d4602
   211dc:	f8c168c5 	.word	0xf8c168c5
   211e0:	8905500a 	.word	0x8905500a
   211e4:	6840810d 	.word	0x6840810d
   211e8:	8a156048 	.word	0x8a156048
   211ec:	0043eb03 	.word	0x0043eb03
   211f0:	81c54408 	.word	0x81c54408
   211f4:	33017c90 	.word	0x33017c90
   211f8:	74202b20 	.word	0x74202b20
   211fc:	0204f102 	.word	0x0204f102
   21200:	0403f104 	.word	0x0403f104
   21204:	206ed1f1 	.word	0x206ed1f1
   21208:	4770bc70 	.word	0x4770bc70
   2120c:	30fff04f 	.word	0x30fff04f
   21210:	bf004770 	.word	0xbf004770

00021214 <rpc_gnss_serialize_location>:
   21214:	b1c84603 	.word	0xb1c84603
   21218:	2000b1c1 	.word	0x2000b1c1
   2121c:	70482207 	.word	0x70482207
   21220:	f9b3700a 	.word	0xf9b3700a
   21224:	20112008 	.word	0x20112008
   21228:	7b9a814a 	.word	0x7b9a814a
   2122c:	681a740a 	.word	0x681a740a
   21230:	2002f8c1 	.word	0x2002f8c1
   21234:	f8c1685a 	.word	0xf8c1685a
   21238:	7b1a2006 	.word	0x7b1a2006
   2123c:	7b5a738a 	.word	0x7b5a738a
   21240:	7a9a73ca 	.word	0x7a9a73ca
   21244:	7adb730a 	.word	0x7adb730a
   21248:	4770734b 	.word	0x4770734b
   2124c:	30fff04f 	.word	0x30fff04f
   21250:	bf004770 	.word	0xbf004770

00021254 <rpc_gnss_serialize_integrity>:
   21254:	b141b148 	.word	0xb141b148
   21258:	23082200 	.word	0x23082200
   2125c:	700b704a 	.word	0x700b704a
   21260:	20066803 	.word	0x20066803
   21264:	3002f8c1 	.word	0x3002f8c1
   21268:	f04f4770 	.word	0xf04f4770
   2126c:	477030ff 	.word	0x477030ff

00021270 <ipc_trace_init>:
   21270:	60184b01 	.word	0x60184b01
   21274:	bf004770 	.word	0xbf004770
   21278:	200202fc 	.word	0x200202fc

0002127c <bsd_os_trace_irq_handler>:
   2127c:	4b6cb5f0 	.word	0x4b6cb5f0
   21280:	781bb083 	.word	0x781bb083
   21284:	f0002b00 	.word	0xf0002b00
   21288:	4b6a80ad 	.word	0x4b6a80ad
   2128c:	68a2681c 	.word	0x68a2681c
   21290:	429a6863 	.word	0x429a6863
   21294:	f64bd02d 	.word	0xf64bd02d
   21298:	f8ad63ef 	.word	0xf8ad63ef
   2129c:	78233000 	.word	0x78233000
   212a0:	f88d466e 	.word	0xf88d466e
   212a4:	68633004 	.word	0x68633004
   212a8:	429a2105 	.word	0x429a2105
   212ac:	6927bf2a 	.word	0x6927bf2a
   212b0:	1abf1a9f 	.word	0x1abf1a9f
   212b4:	bf94429a 	.word	0xbf94429a
   212b8:	68e52500 	.word	0x68e52500
   212bc:	bf88b2bf 	.word	0xbf88b2bf
   212c0:	46301b5b 	.word	0x46301b5b
   212c4:	b29dbf88 	.word	0xb29dbf88
   212c8:	7002f8ad 	.word	0x7002f8ad
   212cc:	fdc8f010 	.word	0xfdc8f010
   212d0:	1002f8bd 	.word	0x1002f8bd
   212d4:	f01068a0 	.word	0xf01068a0
   212d8:	68a3fdc3 	.word	0x68a3fdc3
   212dc:	441f6922 	.word	0x441f6922
   212e0:	bf084297 	.word	0xbf084297
   212e4:	60a768e3 	.word	0x60a768e3
   212e8:	60a3bf08 	.word	0x60a3bf08
   212ec:	f0402d00 	.word	0xf0402d00
   212f0:	4b51808d 	.word	0x4b51808d
   212f4:	68a2681c 	.word	0x68a2681c
   212f8:	429a6863 	.word	0x429a6863
   212fc:	f64bd02c 	.word	0xf64bd02c
   21300:	f8ad63ef 	.word	0xf8ad63ef
   21304:	78233000 	.word	0x78233000
   21308:	f88d466e 	.word	0xf88d466e
   2130c:	68633004 	.word	0x68633004
   21310:	429a2105 	.word	0x429a2105
   21314:	6927bf2a 	.word	0x6927bf2a
   21318:	1abf1a9f 	.word	0x1abf1a9f
   2131c:	bf94429a 	.word	0xbf94429a
   21320:	68e52500 	.word	0x68e52500
   21324:	bf88b2bf 	.word	0xbf88b2bf
   21328:	46301b5b 	.word	0x46301b5b
   2132c:	b29dbf88 	.word	0xb29dbf88
   21330:	7002f8ad 	.word	0x7002f8ad
   21334:	fd94f010 	.word	0xfd94f010
   21338:	1002f8bd 	.word	0x1002f8bd
   2133c:	f01068a0 	.word	0xf01068a0
   21340:	68a3fd8f 	.word	0x68a3fd8f
   21344:	441f6922 	.word	0x441f6922
   21348:	bf084297 	.word	0xbf084297
   2134c:	60a768e3 	.word	0x60a768e3
   21350:	60a3bf08 	.word	0x60a3bf08
   21354:	d1482d00 	.word	0xd1482d00
   21358:	681c4b38 	.word	0x681c4b38
   2135c:	686368a2 	.word	0x686368a2
   21360:	d02b429a 	.word	0xd02b429a
   21364:	63eff64b 	.word	0x63eff64b
   21368:	3000f8ad 	.word	0x3000f8ad
   2136c:	466e7823 	.word	0x466e7823
   21370:	3004f88d 	.word	0x3004f88d
   21374:	21056863 	.word	0x21056863
   21378:	bf2a429a 	.word	0xbf2a429a
   2137c:	1a9f6927 	.word	0x1a9f6927
   21380:	429a1abf 	.word	0x429a1abf
   21384:	2500bf94 	.word	0x2500bf94
   21388:	b2bf68e5 	.word	0xb2bf68e5
   2138c:	1b5bbf88 	.word	0x1b5bbf88
   21390:	bf884630 	.word	0xbf884630
   21394:	f8adb29d 	.word	0xf8adb29d
   21398:	f0107002 	.word	0xf0107002
   2139c:	f8bdfd61 	.word	0xf8bdfd61
   213a0:	68a01002 	.word	0x68a01002
   213a4:	fd5cf010 	.word	0xfd5cf010
   213a8:	692268a3 	.word	0x692268a3
   213ac:	4297441f 	.word	0x4297441f
   213b0:	68e3bf08 	.word	0x68e3bf08
   213b4:	bf0860a7 	.word	0xbf0860a7
   213b8:	b90d60a3 	.word	0xb90d60a3
   213bc:	bdf0b003 	.word	0xbdf0b003
   213c0:	21054630 	.word	0x21054630
   213c4:	5002f8ad 	.word	0x5002f8ad
   213c8:	fd4af010 	.word	0xfd4af010
   213cc:	1002f8bd 	.word	0x1002f8bd
   213d0:	f01068e0 	.word	0xf01068e0
   213d4:	f8bdfd45 	.word	0xf8bdfd45
   213d8:	68e32002 	.word	0x68e32002
   213dc:	60a34413 	.word	0x60a34413
   213e0:	bdf0b003 	.word	0xbdf0b003
   213e4:	fa5cf7fc 	.word	0xfa5cf7fc
   213e8:	2105e74f 	.word	0x2105e74f
   213ec:	f8ad4630 	.word	0xf8ad4630
   213f0:	f0105002 	.word	0xf0105002
   213f4:	f8bdfd35 	.word	0xf8bdfd35
   213f8:	68e01002 	.word	0x68e01002
   213fc:	fd30f010 	.word	0xfd30f010
   21400:	2002f8bd 	.word	0x2002f8bd
   21404:	441368e3 	.word	0x441368e3
   21408:	e7a560a3 	.word	0xe7a560a3
   2140c:	46302105 	.word	0x46302105
   21410:	5002f8ad 	.word	0x5002f8ad
   21414:	fd24f010 	.word	0xfd24f010
   21418:	1002f8bd 	.word	0x1002f8bd
   2141c:	f01068e0 	.word	0xf01068e0
   21420:	f8bdfd1f 	.word	0xf8bdfd1f
   21424:	68e32002 	.word	0x68e32002
   21428:	60a34413 	.word	0x60a34413
   2142c:	bf00e761 	.word	0xbf00e761
   21430:	20025b3c 	.word	0x20025b3c
   21434:	200202f8 	.word	0x200202f8
   21438:	200202f0 	.word	0x200202f0
   2143c:	200202f4 	.word	0x200202f4

00021440 <ipc_trace_handle>:
   21440:	e92d2200 	.word	0xe92d2200
   21444:	4bb04ff0 	.word	0x4bb04ff0
   21448:	681bb083 	.word	0x681bb083
   2144c:	695c6919 	.word	0x695c6919
   21450:	741a7c18 	.word	0x741a7c18
   21454:	745a7c58 	.word	0x745a7c58
   21458:	749a7c98 	.word	0x749a7c98
   2145c:	74da7cd8 	.word	0x74da7cd8
   21460:	751a7d18 	.word	0x751a7d18
   21464:	755a7d58 	.word	0x755a7d58
   21468:	759a7d98 	.word	0x759a7d98
   2146c:	75da7dd8 	.word	0x75da7dd8
   21470:	3901b1b9 	.word	0x3901b1b9
   21474:	d8142903 	.word	0xd8142903
   21478:	f011e8df 	.word	0xf011e8df
   2147c:	010300d6 	.word	0x010300d6
   21480:	00160004 	.word	0x00160004
   21484:	20032501 	.word	0x20032501
   21488:	f06f2200 	.word	0xf06f2200
   2148c:	4c9f015f 	.word	0x4c9f015f
   21490:	7a1c7025 	.word	0x7a1c7025
   21494:	7a587218 	.word	0x7a587218
   21498:	7a98725a 	.word	0x7a98725a
   2149c:	7ada729a 	.word	0x7ada729a
   214a0:	b00372d9 	.word	0xb00372d9
   214a4:	8ff0e8bd 	.word	0x8ff0e8bd
   214a8:	22002104 	.word	0x22002104
   214ac:	005ff06f 	.word	0x005ff06f
   214b0:	72197a1c 	.word	0x72197a1c
   214b4:	725a7a59 	.word	0x725a7a59
   214b8:	7a9c4994 	.word	0x7a9c4994
   214bc:	7adc729a 	.word	0x7adc729a
   214c0:	700a72d8 	.word	0x700a72d8
   214c4:	2b00780b 	.word	0x2b00780b
   214c8:	8117f000 	.word	0x8117f000
   214cc:	681c4b90 	.word	0x681c4b90
   214d0:	686368a2 	.word	0x686368a2
   214d4:	d02d429a 	.word	0xd02d429a
   214d8:	63eff64b 	.word	0x63eff64b
   214dc:	3000f8ad 	.word	0x3000f8ad
   214e0:	466e7823 	.word	0x466e7823
   214e4:	3004f88d 	.word	0x3004f88d
   214e8:	21056863 	.word	0x21056863
   214ec:	bf2a429a 	.word	0xbf2a429a
   214f0:	1a9f6927 	.word	0x1a9f6927
   214f4:	429a1abf 	.word	0x429a1abf
   214f8:	2500bf94 	.word	0x2500bf94
   214fc:	b2bf68e5 	.word	0xb2bf68e5
   21500:	1b5bbf88 	.word	0x1b5bbf88
   21504:	bf884630 	.word	0xbf884630
   21508:	f8adb29d 	.word	0xf8adb29d
   2150c:	f0107002 	.word	0xf0107002
   21510:	f8bdfca7 	.word	0xf8bdfca7
   21514:	68a01002 	.word	0x68a01002
   21518:	fca2f010 	.word	0xfca2f010
   2151c:	692268a3 	.word	0x692268a3
   21520:	4297441f 	.word	0x4297441f
   21524:	68e3bf08 	.word	0x68e3bf08
   21528:	bf0860a7 	.word	0xbf0860a7
   2152c:	2d0060a3 	.word	0x2d0060a3
   21530:	80d2f040 	.word	0x80d2f040
   21534:	681c4b77 	.word	0x681c4b77
   21538:	686368a2 	.word	0x686368a2
   2153c:	d02d429a 	.word	0xd02d429a
   21540:	63eff64b 	.word	0x63eff64b
   21544:	3000f8ad 	.word	0x3000f8ad
   21548:	466e7823 	.word	0x466e7823
   2154c:	3004f88d 	.word	0x3004f88d
   21550:	21056863 	.word	0x21056863
   21554:	bf2a429a 	.word	0xbf2a429a
   21558:	1a9f6927 	.word	0x1a9f6927
   2155c:	429a1abf 	.word	0x429a1abf
   21560:	2500bf94 	.word	0x2500bf94
   21564:	b2bf68e5 	.word	0xb2bf68e5
   21568:	1b5bbf88 	.word	0x1b5bbf88
   2156c:	bf884630 	.word	0xbf884630
   21570:	f8adb29d 	.word	0xf8adb29d
   21574:	f0107002 	.word	0xf0107002
   21578:	f8bdfc73 	.word	0xf8bdfc73
   2157c:	68a01002 	.word	0x68a01002
   21580:	fc6ef010 	.word	0xfc6ef010
   21584:	692268a3 	.word	0x692268a3
   21588:	4297441f 	.word	0x4297441f
   2158c:	68e3bf08 	.word	0x68e3bf08
   21590:	bf0860a7 	.word	0xbf0860a7
   21594:	2d0060a3 	.word	0x2d0060a3
   21598:	808df040 	.word	0x808df040
   2159c:	681c4b5e 	.word	0x681c4b5e
   215a0:	686368a2 	.word	0x686368a2
   215a4:	f43f429a 	.word	0xf43f429a
   215a8:	f64baf7c 	.word	0xf64baf7c
   215ac:	f8ad63ef 	.word	0xf8ad63ef
   215b0:	78233000 	.word	0x78233000
   215b4:	f88d466e 	.word	0xf88d466e
   215b8:	68633004 	.word	0x68633004
   215bc:	429a2105 	.word	0x429a2105
   215c0:	6927bf2a 	.word	0x6927bf2a
   215c4:	1abf1a9f 	.word	0x1abf1a9f
   215c8:	bf94429a 	.word	0xbf94429a
   215cc:	68e52500 	.word	0x68e52500
   215d0:	bf88b2bf 	.word	0xbf88b2bf
   215d4:	46301b5b 	.word	0x46301b5b
   215d8:	b29dbf88 	.word	0xb29dbf88
   215dc:	7002f8ad 	.word	0x7002f8ad
   215e0:	fc3ef010 	.word	0xfc3ef010
   215e4:	1002f8bd 	.word	0x1002f8bd
   215e8:	f01068a0 	.word	0xf01068a0
   215ec:	68a3fc39 	.word	0x68a3fc39
   215f0:	441f6922 	.word	0x441f6922
   215f4:	bf084297 	.word	0xbf084297
   215f8:	60a768e3 	.word	0x60a768e3
   215fc:	60a3bf08 	.word	0x60a3bf08
   21600:	f43f2d00 	.word	0xf43f2d00
   21604:	2105af4e 	.word	0x2105af4e
   21608:	f8ad4630 	.word	0xf8ad4630
   2160c:	f0105002 	.word	0xf0105002
   21610:	f8bdfc27 	.word	0xf8bdfc27
   21614:	68e01002 	.word	0x68e01002
   21618:	fc22f010 	.word	0xfc22f010
   2161c:	2002f8bd 	.word	0x2002f8bd
   21620:	441368e3 	.word	0x441368e3
   21624:	e73c60a3 	.word	0xe73c60a3
   21628:	78114a38 	.word	0x78114a38
   2162c:	2100b109 	.word	0x2100b109
   21630:	68a57011 	.word	0x68a57011
   21634:	d0392d00 	.word	0xd0392d00
   21638:	0c00f04f 	.word	0x0c00f04f
   2163c:	a0d4f8df 	.word	0xa0d4f8df
   21640:	b0ccf8df 	.word	0xb0ccf8df
   21644:	46e14934 	.word	0x46e14934
   21648:	46624666 	.word	0x46624666
   2164c:	e000f8d1 	.word	0xe000f8d1
   21650:	8000f8da 	.word	0x8000f8da
   21654:	7000f8db 	.word	0x7000f8db
   21658:	2963e008 	.word	0x2963e008
   2165c:	2961d016 	.word	0x2961d016
   21660:	4607bf04 	.word	0x4607bf04
   21664:	32012601 	.word	0x32012601
   21668:	d01342aa 	.word	0xd01342aa
   2166c:	eb041c91 	.word	0xeb041c91
   21670:	68480181 	.word	0x68480181
   21674:	29627801 	.word	0x29627801
   21678:	4680d1ef 	.word	0x4680d1ef
   2167c:	0901f04f 	.word	0x0901f04f
   21680:	f7fce7f1 	.word	0xf7fce7f1
   21684:	b003f905 	.word	0xb003f905
   21688:	8ff0e8bd 	.word	0x8ff0e8bd
   2168c:	f04f4686 	.word	0xf04f4686
   21690:	e7e80c01 	.word	0xe7e80c01
   21694:	f1b9bba6 	.word	0xf1b9bba6
   21698:	d0010f00 	.word	0xd0010f00
   2169c:	8000f8ca 	.word	0x8000f8ca
   216a0:	0f00f1bc 	.word	0x0f00f1bc
   216a4:	4a1cd002 	.word	0x4a1cd002
   216a8:	e000f8c2 	.word	0xe000f8c2
   216ac:	22002001 	.word	0x22002001
   216b0:	015ff06f 	.word	0x015ff06f
   216b4:	2105e6ed 	.word	0x2105e6ed
   216b8:	f8ad4630 	.word	0xf8ad4630
   216bc:	f0105002 	.word	0xf0105002
   216c0:	f8bdfbcf 	.word	0xf8bdfbcf
   216c4:	68e01002 	.word	0x68e01002
   216c8:	fbcaf010 	.word	0xfbcaf010
   216cc:	2002f8bd 	.word	0x2002f8bd
   216d0:	441368e3 	.word	0x441368e3
   216d4:	e76160a3 	.word	0xe76160a3
   216d8:	46302105 	.word	0x46302105
   216dc:	5002f8ad 	.word	0x5002f8ad
   216e0:	fbbef010 	.word	0xfbbef010
   216e4:	1002f8bd 	.word	0x1002f8bd
   216e8:	f01068e0 	.word	0xf01068e0
   216ec:	f8bdfbb9 	.word	0xf8bdfbb9
   216f0:	68e32002 	.word	0x68e32002
   216f4:	60a34413 	.word	0x60a34413
   216f8:	f7fce71c 	.word	0xf7fce71c
   216fc:	e6e5f8d1 	.word	0xe6e5f8d1
   21700:	7000f8cb 	.word	0x7000f8cb
   21704:	bf00e7c7 	.word	0xbf00e7c7
   21708:	200202fc 	.word	0x200202fc
   2170c:	20025b3c 	.word	0x20025b3c
   21710:	200202f8 	.word	0x200202f8
   21714:	200202f0 	.word	0x200202f0
   21718:	200202f4 	.word	0x200202f4

0002171c <rpc_trace_coredump_in_progress>:
   2171c:	78184b01 	.word	0x78184b01
   21720:	bf004770 	.word	0xbf004770
   21724:	20025b3c 	.word	0x20025b3c

00021728 <ecp_modp>:
   21728:	6e4bb570 	.word	0x6e4bb570
   2172c:	2b004604 	.word	0x2b004604
   21730:	6803d03d 	.word	0x6803d03d
   21734:	2b00460d 	.word	0x2b00460d
   21738:	4620db2f 	.word	0x4620db2f
   2173c:	fe06f005 	.word	0xfe06f005
   21740:	ebb06dab 	.word	0xebb06dab
   21744:	d82d0f43 	.word	0xd82d0f43
   21748:	46206e6b 	.word	0x46206e6b
   2174c:	46064798 	.word	0x46064798
   21750:	3504bb08 	.word	0x3504bb08
   21754:	2100e00a 	.word	0x2100e00a
   21758:	f0064620 	.word	0xf0064620
   2175c:	b1a0f8c7 	.word	0xb1a0f8c7
   21760:	4621462a 	.word	0x4621462a
   21764:	f0064620 	.word	0xf0064620
   21768:	b9e8fa79 	.word	0xb9e8fa79
   2176c:	2b006823 	.word	0x2b006823
   21770:	4629dbf1 	.word	0x4629dbf1
   21774:	f0064620 	.word	0xf0064620
   21778:	2800f851 	.word	0x2800f851
   2177c:	462adb0b 	.word	0x462adb0b
   21780:	46204621 	.word	0x46204621
   21784:	f9aaf006 	.word	0xf9aaf006
   21788:	4629b970 	.word	0x4629b970
   2178c:	f0064620 	.word	0xf0064620
   21790:	2800f845 	.word	0x2800f845
   21794:	4630daf3 	.word	0x4630daf3
   21798:	2100bd70 	.word	0x2100bd70
   2179c:	f8a6f006 	.word	0xf8a6f006
   217a0:	d0ca2800 	.word	0xd0ca2800
   217a4:	e7f64e05 	.word	0xe7f64e05
   217a8:	46304606 	.word	0x46304606
   217ac:	1d0abd70 	.word	0x1d0abd70
   217b0:	4070e8bd 	.word	0x4070e8bd
   217b4:	f0074601 	.word	0xf0074601
   217b8:	bf00b84d 	.word	0xbf00b84d
   217bc:	ffffb080 	.word	0xffffb080

000217c0 <ecp_double_jac>:
   217c0:	43f0e92d 	.word	0x43f0e92d
   217c4:	b08d4606 	.word	0xb08d4606
   217c8:	46884668 	.word	0x46884668
   217cc:	f0054615 	.word	0xf0054615
   217d0:	a803fb63 	.word	0xa803fb63
   217d4:	fb60f005 	.word	0xfb60f005
   217d8:	f005a806 	.word	0xf005a806
   217dc:	a809fb5d 	.word	0xa809fb5d
   217e0:	fb5af005 	.word	0xfb5af005
   217e4:	2b0069b3 	.word	0x2b0069b3
   217e8:	80b2f000 	.word	0x80b2f000
   217ec:	4629462a 	.word	0x4629462a
   217f0:	f006a803 	.word	0xf006a803
   217f4:	4604fb67 	.word	0x4604fb67
   217f8:	4668b178 	.word	0x4668b178
   217fc:	fb54f005 	.word	0xfb54f005
   21800:	f005a803 	.word	0xf005a803
   21804:	a806fb51 	.word	0xa806fb51
   21808:	fb4ef005 	.word	0xfb4ef005
   2180c:	f005a809 	.word	0xf005a809
   21810:	4620fb4b 	.word	0x4620fb4b
   21814:	e8bdb00d 	.word	0xe8bdb00d
   21818:	463183f0 	.word	0x463183f0
   2181c:	f7ffa803 	.word	0xf7ffa803
   21820:	4604ff83 	.word	0x4604ff83
   21824:	d1e82800 	.word	0xd1e82800
   21828:	a9032203 	.word	0xa9032203
   2182c:	f0064668 	.word	0xf0064668
   21830:	4604fc41 	.word	0x4604fc41
   21834:	d1e02800 	.word	0xd1e02800
   21838:	e0071d37 	.word	0xe0071d37
   2183c:	4669463a 	.word	0x4669463a
   21840:	f0064668 	.word	0xf0064668
   21844:	4604f94b 	.word	0x4604f94b
   21848:	d1d62800 	.word	0xd1d62800
   2184c:	46684639 	.word	0x46684639
   21850:	ffe4f005 	.word	0xffe4f005
   21854:	daf12800 	.word	0xdaf12800
   21858:	0910f106 	.word	0x0910f106
   2185c:	21004648 	.word	0x21004648
   21860:	f844f006 	.word	0xf844f006
   21864:	f0402800 	.word	0xf0402800
   21868:	f10580e2 	.word	0xf10580e2
   2186c:	464a090c 	.word	0x464a090c
   21870:	a8064649 	.word	0xa8064649
   21874:	fb26f006 	.word	0xfb26f006
   21878:	28004604 	.word	0x28004604
   2187c:	4631d1bd 	.word	0x4631d1bd
   21880:	f7ffa806 	.word	0xf7ffa806
   21884:	4604ff51 	.word	0x4604ff51
   21888:	d1b62800 	.word	0xd1b62800
   2188c:	a8062101 	.word	0xa8062101
   21890:	fe9ef005 	.word	0xfe9ef005
   21894:	b1404604 	.word	0xb1404604
   21898:	a906e7af 	.word	0xa906e7af
   2189c:	4608463a 	.word	0x4608463a
   218a0:	f91cf006 	.word	0xf91cf006
   218a4:	28004604 	.word	0x28004604
   218a8:	4639d1a7 	.word	0x4639d1a7
   218ac:	f005a806 	.word	0xf005a806
   218b0:	2800ffb5 	.word	0x2800ffb5
   218b4:	aa06daf1 	.word	0xaa06daf1
   218b8:	a8034629 	.word	0xa8034629
   218bc:	fb02f006 	.word	0xfb02f006
   218c0:	28004604 	.word	0x28004604
   218c4:	4631d199 	.word	0x4631d199
   218c8:	f7ffa803 	.word	0xf7ffa803
   218cc:	4604ff2d 	.word	0x4604ff2d
   218d0:	d1922800 	.word	0xd1922800
   218d4:	a8032101 	.word	0xa8032101
   218d8:	fe7af005 	.word	0xfe7af005
   218dc:	b1404604 	.word	0xb1404604
   218e0:	a903e78b 	.word	0xa903e78b
   218e4:	4608463a 	.word	0x4608463a
   218e8:	f8f8f006 	.word	0xf8f8f006
   218ec:	28004604 	.word	0x28004604
   218f0:	4639d183 	.word	0x4639d183
   218f4:	f005a803 	.word	0xf005a803
   218f8:	2800ff91 	.word	0x2800ff91
   218fc:	aa06daf1 	.word	0xaa06daf1
   21900:	a8094611 	.word	0xa8094611
   21904:	fadef006 	.word	0xfadef006
   21908:	28004604 	.word	0x28004604
   2190c:	af75f47f 	.word	0xaf75f47f
   21910:	a8094631 	.word	0xa8094631
   21914:	ff08f7ff 	.word	0xff08f7ff
   21918:	28004604 	.word	0x28004604
   2191c:	af6df47f 	.word	0xaf6df47f
   21920:	a8092101 	.word	0xa8092101
   21924:	fe54f005 	.word	0xfe54f005
   21928:	28004604 	.word	0x28004604
   2192c:	af65f47f 	.word	0xaf65f47f
   21930:	a8094639 	.word	0xa8094639
   21934:	ff72f005 	.word	0xff72f005
   21938:	f2c02800 	.word	0xf2c02800
   2193c:	a90980c5 	.word	0xa90980c5
   21940:	4608463a 	.word	0x4608463a
   21944:	f8caf006 	.word	0xf8caf006
   21948:	28004604 	.word	0x28004604
   2194c:	e754d0f0 	.word	0xe754d0f0
   21950:	0218f105 	.word	0x0218f105
   21954:	a8034611 	.word	0xa8034611
   21958:	fab4f006 	.word	0xfab4f006
   2195c:	28004604 	.word	0x28004604
   21960:	af4bf47f 	.word	0xaf4bf47f
   21964:	a8034631 	.word	0xa8034631
   21968:	fedef7ff 	.word	0xfedef7ff
   2196c:	28004604 	.word	0x28004604
   21970:	af43f47f 	.word	0xaf43f47f
   21974:	4629aa03 	.word	0x4629aa03
   21978:	f006a806 	.word	0xf006a806
   2197c:	4604f96f 	.word	0x4604f96f
   21980:	f47f2800 	.word	0xf47f2800
   21984:	1d37af3a 	.word	0x1d37af3a
   21988:	a906e008 	.word	0xa906e008
   2198c:	4608463a 	.word	0x4608463a
   21990:	f8a4f006 	.word	0xf8a4f006
   21994:	28004604 	.word	0x28004604
   21998:	af2ff47f 	.word	0xaf2ff47f
   2199c:	a8064639 	.word	0xa8064639
   219a0:	ff3cf005 	.word	0xff3cf005
   219a4:	daf02800 	.word	0xdaf02800
   219a8:	4629aa03 	.word	0x4629aa03
   219ac:	f006a809 	.word	0xf006a809
   219b0:	4604f9c9 	.word	0x4604f9c9
   219b4:	e720b170 	.word	0xe720b170
   219b8:	a8092100 	.word	0xa8092100
   219bc:	ff96f005 	.word	0xff96f005
   219c0:	a909b158 	.word	0xa909b158
   219c4:	4608463a 	.word	0x4608463a
   219c8:	f948f006 	.word	0xf948f006
   219cc:	28004604 	.word	0x28004604
   219d0:	af13f47f 	.word	0xaf13f47f
   219d4:	2b009b09 	.word	0x2b009b09
   219d8:	aa09dbee 	.word	0xaa09dbee
   219dc:	a803a906 	.word	0xa803a906
   219e0:	fa70f006 	.word	0xfa70f006
   219e4:	28004604 	.word	0x28004604
   219e8:	af07f47f 	.word	0xaf07f47f
   219ec:	a8034631 	.word	0xa8034631
   219f0:	fe9af7ff 	.word	0xfe9af7ff
   219f4:	28004604 	.word	0x28004604
   219f8:	aefff47f 	.word	0xaefff47f
   219fc:	a9032203 	.word	0xa9032203
   21a00:	f0064668 	.word	0xf0064668
   21a04:	4604fb57 	.word	0x4604fb57
   21a08:	f47f2800 	.word	0xf47f2800
   21a0c:	4639aef6 	.word	0x4639aef6
   21a10:	f0054668 	.word	0xf0054668
   21a14:	2800ff03 	.word	0x2800ff03
   21a18:	af27f6ff 	.word	0xaf27f6ff
   21a1c:	4669463a 	.word	0x4669463a
   21a20:	f0064668 	.word	0xf0064668
   21a24:	4604f85b 	.word	0x4604f85b
   21a28:	d0f02800 	.word	0xd0f02800
   21a2c:	f105e6e5 	.word	0xf105e6e5
   21a30:	46110218 	.word	0x46110218
   21a34:	f006a803 	.word	0xf006a803
   21a38:	4604fa45 	.word	0x4604fa45
   21a3c:	f47f2800 	.word	0xf47f2800
   21a40:	4631aedc 	.word	0x4631aedc
   21a44:	f7ffa803 	.word	0xf7ffa803
   21a48:	4604fe6f 	.word	0x4604fe6f
   21a4c:	f47f2800 	.word	0xf47f2800
   21a50:	aa03aed4 	.word	0xaa03aed4
   21a54:	a8064611 	.word	0xa8064611
   21a58:	fa34f006 	.word	0xfa34f006
   21a5c:	28004604 	.word	0x28004604
   21a60:	aecbf47f 	.word	0xaecbf47f
   21a64:	a8064631 	.word	0xa8064631
   21a68:	fe5ef7ff 	.word	0xfe5ef7ff
   21a6c:	28004604 	.word	0x28004604
   21a70:	aec3f47f 	.word	0xaec3f47f
   21a74:	a906464a 	.word	0xa906464a
   21a78:	f006a803 	.word	0xf006a803
   21a7c:	4604fa23 	.word	0x4604fa23
   21a80:	f47f2800 	.word	0xf47f2800
   21a84:	4631aeba 	.word	0x4631aeba
   21a88:	f7ffa803 	.word	0xf7ffa803
   21a8c:	4604fe4d 	.word	0x4604fe4d
   21a90:	f47f2800 	.word	0xf47f2800
   21a94:	aa03aeb2 	.word	0xaa03aeb2
   21a98:	46684669 	.word	0x46684669
   21a9c:	f8def006 	.word	0xf8def006
   21aa0:	28004604 	.word	0x28004604
   21aa4:	aea9f47f 	.word	0xaea9f47f
   21aa8:	46684639 	.word	0x46684639
   21aac:	feb6f005 	.word	0xfeb6f005
   21ab0:	f6ff2800 	.word	0xf6ff2800
   21ab4:	463aaeda 	.word	0x463aaeda
   21ab8:	46684669 	.word	0x46684669
   21abc:	f80ef006 	.word	0xf80ef006
   21ac0:	28004604 	.word	0x28004604
   21ac4:	e698d0f0 	.word	0xe698d0f0
   21ac8:	4669466a 	.word	0x4669466a
   21acc:	f006a806 	.word	0xf006a806
   21ad0:	4604f9f9 	.word	0x4604f9f9
   21ad4:	f47f2800 	.word	0xf47f2800
   21ad8:	4631ae90 	.word	0x4631ae90
   21adc:	f7ffa806 	.word	0xf7ffa806
   21ae0:	4604fe23 	.word	0x4604fe23
   21ae4:	f47f2800 	.word	0xf47f2800
   21ae8:	a906ae88 	.word	0xa906ae88
   21aec:	4608aa03 	.word	0x4608aa03
   21af0:	f928f006 	.word	0xf928f006
   21af4:	28004604 	.word	0x28004604
   21af8:	ae7ff47f 	.word	0xae7ff47f
   21afc:	2b009b06 	.word	0x2b009b06
   21b00:	2100da0d 	.word	0x2100da0d
   21b04:	f005a806 	.word	0xf005a806
   21b08:	b140fef1 	.word	0xb140fef1
   21b0c:	463aa906 	.word	0x463aa906
   21b10:	f0064608 	.word	0xf0064608
   21b14:	4604f8a3 	.word	0x4604f8a3
   21b18:	d0ef2800 	.word	0xd0ef2800
   21b1c:	a906e66d 	.word	0xa906e66d
   21b20:	4608aa03 	.word	0x4608aa03
   21b24:	f90ef006 	.word	0xf90ef006
   21b28:	28004604 	.word	0x28004604
   21b2c:	ae65f47f 	.word	0xae65f47f
   21b30:	2b009b06 	.word	0x2b009b06
   21b34:	2100da0d 	.word	0x2100da0d
   21b38:	f005a806 	.word	0xf005a806
   21b3c:	b140fed7 	.word	0xb140fed7
   21b40:	463aa906 	.word	0x463aa906
   21b44:	f0064608 	.word	0xf0064608
   21b48:	4604f889 	.word	0x4604f889
   21b4c:	d0ef2800 	.word	0xd0ef2800
   21b50:	a903e653 	.word	0xa903e653
   21b54:	4608aa06 	.word	0x4608aa06
   21b58:	f8f4f006 	.word	0xf8f4f006
   21b5c:	28004604 	.word	0x28004604
   21b60:	ae4bf47f 	.word	0xae4bf47f
   21b64:	2b009b03 	.word	0x2b009b03
   21b68:	2100da0d 	.word	0x2100da0d
   21b6c:	f005a803 	.word	0xf005a803
   21b70:	b140febd 	.word	0xb140febd
   21b74:	463aa903 	.word	0x463aa903
   21b78:	f0064608 	.word	0xf0064608
   21b7c:	4604f86f 	.word	0x4604f86f
   21b80:	d0ef2800 	.word	0xd0ef2800
   21b84:	a903e639 	.word	0xa903e639
   21b88:	4608466a 	.word	0x4608466a
   21b8c:	f99af006 	.word	0xf99af006
   21b90:	28004604 	.word	0x28004604
   21b94:	ae31f47f 	.word	0xae31f47f
   21b98:	a8034631 	.word	0xa8034631
   21b9c:	fdc4f7ff 	.word	0xfdc4f7ff
   21ba0:	28004604 	.word	0x28004604
   21ba4:	ae29f47f 	.word	0xae29f47f
   21ba8:	aa09a903 	.word	0xaa09a903
   21bac:	f0064608 	.word	0xf0064608
   21bb0:	4604f8c9 	.word	0x4604f8c9
   21bb4:	f47f2800 	.word	0xf47f2800
   21bb8:	9b03ae20 	.word	0x9b03ae20
   21bbc:	da0d2b00 	.word	0xda0d2b00
   21bc0:	a8032100 	.word	0xa8032100
   21bc4:	fe92f005 	.word	0xfe92f005
   21bc8:	a903b140 	.word	0xa903b140
   21bcc:	4608463a 	.word	0x4608463a
   21bd0:	f844f006 	.word	0xf844f006
   21bd4:	28004604 	.word	0x28004604
   21bd8:	e60ed0ef 	.word	0xe60ed0ef
   21bdc:	0218f105 	.word	0x0218f105
   21be0:	a8094649 	.word	0xa8094649
   21be4:	f96ef006 	.word	0xf96ef006
   21be8:	28004604 	.word	0x28004604
   21bec:	ae05f47f 	.word	0xae05f47f
   21bf0:	a8094631 	.word	0xa8094631
   21bf4:	fd98f7ff 	.word	0xfd98f7ff
   21bf8:	28004604 	.word	0x28004604
   21bfc:	adfdf47f 	.word	0xadfdf47f
   21c00:	a8092101 	.word	0xa8092101
   21c04:	fce4f005 	.word	0xfce4f005
   21c08:	28004604 	.word	0x28004604
   21c0c:	adf5f47f 	.word	0xadf5f47f
   21c10:	a8094639 	.word	0xa8094639
   21c14:	fe02f005 	.word	0xfe02f005
   21c18:	db082800 	.word	0xdb082800
   21c1c:	463aa909 	.word	0x463aa909
   21c20:	f0054608 	.word	0xf0054608
   21c24:	4604ff5b 	.word	0x4604ff5b
   21c28:	d0f12800 	.word	0xd0f12800
   21c2c:	a906e5e5 	.word	0xa906e5e5
   21c30:	f0054640 	.word	0xf0054640
   21c34:	4604f9b5 	.word	0x4604f9b5
   21c38:	f47f2800 	.word	0xf47f2800
   21c3c:	a903adde 	.word	0xa903adde
   21c40:	000cf108 	.word	0x000cf108
   21c44:	f9acf005 	.word	0xf9acf005
   21c48:	28004604 	.word	0x28004604
   21c4c:	add5f47f 	.word	0xadd5f47f
   21c50:	0018f108 	.word	0x0018f108
   21c54:	f005a909 	.word	0xf005a909
   21c58:	4604f9a3 	.word	0x4604f9a3
   21c5c:	bf00e5cd 	.word	0xbf00e5cd

00021c60 <ecp_normalize_jac>:
   21c60:	f101b5f0 	.word	0xf101b5f0
   21c64:	b0870518 	.word	0xb0870518
   21c68:	4607460e 	.word	0x4607460e
   21c6c:	46282100 	.word	0x46282100
   21c70:	fe3cf005 	.word	0xfe3cf005
   21c74:	4604b918 	.word	0x4604b918
   21c78:	b0074620 	.word	0xb0074620
   21c7c:	4668bdf0 	.word	0x4668bdf0
   21c80:	f90af005 	.word	0xf90af005
   21c84:	f005a803 	.word	0xf005a803
   21c88:	4668f907 	.word	0x4668f907
   21c8c:	46291d3a 	.word	0x46291d3a
   21c90:	f936f007 	.word	0xf936f007
   21c94:	b1404604 	.word	0xb1404604
   21c98:	f0054668 	.word	0xf0054668
   21c9c:	a803f905 	.word	0xa803f905
   21ca0:	f902f005 	.word	0xf902f005
   21ca4:	b0074620 	.word	0xb0074620
   21ca8:	466abdf0 	.word	0x466abdf0
   21cac:	a8034669 	.word	0xa8034669
   21cb0:	f908f006 	.word	0xf908f006
   21cb4:	28004604 	.word	0x28004604
   21cb8:	4639d1ee 	.word	0x4639d1ee
   21cbc:	f7ffa803 	.word	0xf7ffa803
   21cc0:	4604fd33 	.word	0x4604fd33
   21cc4:	d1e72800 	.word	0xd1e72800
   21cc8:	4631aa03 	.word	0x4631aa03
   21ccc:	f0064630 	.word	0xf0064630
   21cd0:	4604f8f9 	.word	0x4604f8f9
   21cd4:	d1df2800 	.word	0xd1df2800
   21cd8:	46304639 	.word	0x46304639
   21cdc:	fd24f7ff 	.word	0xfd24f7ff
   21ce0:	28004604 	.word	0x28004604
   21ce4:	360cd1d8 	.word	0x360cd1d8
   21ce8:	46304631 	.word	0x46304631
   21cec:	f006aa03 	.word	0xf006aa03
   21cf0:	4604f8e9 	.word	0x4604f8e9
   21cf4:	d1cf2800 	.word	0xd1cf2800
   21cf8:	46304639 	.word	0x46304639
   21cfc:	fd14f7ff 	.word	0xfd14f7ff
   21d00:	28004604 	.word	0x28004604
   21d04:	466ad1c8 	.word	0x466ad1c8
   21d08:	46304631 	.word	0x46304631
   21d0c:	f8daf006 	.word	0xf8daf006
   21d10:	28004604 	.word	0x28004604
   21d14:	4639d1c0 	.word	0x4639d1c0
   21d18:	f7ff4630 	.word	0xf7ff4630
   21d1c:	4604fd05 	.word	0x4604fd05
   21d20:	d1b92800 	.word	0xd1b92800
   21d24:	21014628 	.word	0x21014628
   21d28:	fac6f005 	.word	0xfac6f005
   21d2c:	e7b34604 	.word	0xe7b34604

00021d30 <ecp_normalize_jac_many.part.3>:
   21d30:	4ff0e92d 	.word	0x4ff0e92d
   21d34:	b08b4682 	.word	0xb08b4682
   21d38:	4610468b 	.word	0x4610468b
   21d3c:	4616210c 	.word	0x4616210c
   21d40:	fcfef008 	.word	0xfcfef008
   21d44:	f0002800 	.word	0xf0002800
   21d48:	468080fe 	.word	0x468080fe
   21d4c:	f005a801 	.word	0xf005a801
   21d50:	a804f8a3 	.word	0xa804f8a3
   21d54:	f8a0f005 	.word	0xf8a0f005
   21d58:	f005a807 	.word	0xf005a807
   21d5c:	f8dbf89d 	.word	0xf8dbf89d
   21d60:	46401000 	.word	0x46401000
   21d64:	f0053118 	.word	0xf0053118
   21d68:	4604f91b 	.word	0x4604f91b
   21d6c:	2e01bb60 	.word	0x2e01bb60
   21d70:	46d9d946 	.word	0x46d9d946
   21d74:	f1082701 	.word	0xf1082701
   21d78:	e008050c 	.word	0xe008050c
   21d7c:	46514628 	.word	0x46514628
   21d80:	fcd2f7ff 	.word	0xfcd2f7ff
   21d84:	4604350c 	.word	0x4604350c
   21d88:	42beb968 	.word	0x42beb968
   21d8c:	f859d038 	.word	0xf859d038
   21d90:	f1a52f04 	.word	0xf1a52f04
   21d94:	3218010c 	.word	0x3218010c
   21d98:	f0064628 	.word	0xf0064628
   21d9c:	3701f893 	.word	0x3701f893
   21da0:	28004604 	.word	0x28004604
   21da4:	a801d0ea 	.word	0xa801d0ea
   21da8:	f87ef005 	.word	0xf87ef005
   21dac:	f005a804 	.word	0xf005a804
   21db0:	a807f87b 	.word	0xa807f87b
   21db4:	f878f005 	.word	0xf878f005
   21db8:	a901e010 	.word	0xa901e010
   21dbc:	f005a804 	.word	0xf005a804
   21dc0:	4604f8ef 	.word	0x4604f8ef
   21dc4:	d0532800 	.word	0xd0532800
   21dc8:	f005a801 	.word	0xf005a801
   21dcc:	a804f86d 	.word	0xa804f86d
   21dd0:	f86af005 	.word	0xf86af005
   21dd4:	f005a807 	.word	0xf005a807
   21dd8:	b156f867 	.word	0xb156f867
   21ddc:	eb064645 	.word	0xeb064645
   21de0:	eb080646 	.word	0xeb080646
   21de4:	46280686 	.word	0x46280686
   21de8:	f005350c 	.word	0xf005350c
   21dec:	42b5f85d 	.word	0x42b5f85d
   21df0:	4640d1f9 	.word	0x4640d1f9
   21df4:	fcb8f008 	.word	0xfcb8f008
   21df8:	b00b4620 	.word	0xb00b4620
   21dfc:	8ff0e8bd 	.word	0x8ff0e8bd
   21e00:	0546eb06 	.word	0x0546eb06
   21e04:	f1a500ad 	.word	0xf1a500ad
   21e08:	4441010c 	.word	0x4441010c
   21e0c:	0204f10a 	.word	0x0204f10a
   21e10:	f007a801 	.word	0xf007a801
   21e14:	4604f875 	.word	0x4604f875
   21e18:	d1d52800 	.word	0xd1d52800
   21e1c:	4380f106 	.word	0x4380f106
   21e20:	3b013d18 	.word	0x3b013d18
   21e24:	eb0b4445 	.word	0xeb0b4445
   21e28:	1e770b83 	.word	0x1e770b83
   21e2c:	d0c42f00 	.word	0xd0c42f00
   21e30:	a901462a 	.word	0xa901462a
   21e34:	f006a804 	.word	0xf006a804
   21e38:	4604f845 	.word	0x4604f845
   21e3c:	d1c32800 	.word	0xd1c32800
   21e40:	a8044651 	.word	0xa8044651
   21e44:	fc70f7ff 	.word	0xfc70f7ff
   21e48:	28004604 	.word	0x28004604
   21e4c:	f8dbd1bc 	.word	0xf8dbd1bc
   21e50:	a9012000 	.word	0xa9012000
   21e54:	46083218 	.word	0x46083218
   21e58:	f834f006 	.word	0xf834f006
   21e5c:	28004604 	.word	0x28004604
   21e60:	4651d1b2 	.word	0x4651d1b2
   21e64:	f7ffa801 	.word	0xf7ffa801
   21e68:	4604fc5f 	.word	0x4604fc5f
   21e6c:	d1ab2800 	.word	0xd1ab2800
   21e70:	4611aa04 	.word	0x4611aa04
   21e74:	f006a807 	.word	0xf006a807
   21e78:	4604f825 	.word	0x4604f825
   21e7c:	d1a32800 	.word	0xd1a32800
   21e80:	a8074651 	.word	0xa8074651
   21e84:	fc50f7ff 	.word	0xfc50f7ff
   21e88:	28004604 	.word	0x28004604
   21e8c:	f8dbd19c 	.word	0xf8dbd19c
   21e90:	aa071000 	.word	0xaa071000
   21e94:	f0064608 	.word	0xf0064608
   21e98:	4604f815 	.word	0x4604f815
   21e9c:	d1932800 	.word	0xd1932800
   21ea0:	f8db4651 	.word	0xf8db4651
   21ea4:	f7ff0000 	.word	0xf7ff0000
   21ea8:	4604fc3f 	.word	0x4604fc3f
   21eac:	d18b2800 	.word	0xd18b2800
   21eb0:	1000f8db 	.word	0x1000f8db
   21eb4:	310caa07 	.word	0x310caa07
   21eb8:	f0064608 	.word	0xf0064608
   21ebc:	4604f803 	.word	0x4604f803
   21ec0:	d1812800 	.word	0xd1812800
   21ec4:	0000f8db 	.word	0x0000f8db
   21ec8:	300c4651 	.word	0x300c4651
   21ecc:	fc2cf7ff 	.word	0xfc2cf7ff
   21ed0:	28004604 	.word	0x28004604
   21ed4:	af78f47f 	.word	0xaf78f47f
   21ed8:	1000f8db 	.word	0x1000f8db
   21edc:	310caa04 	.word	0x310caa04
   21ee0:	f0054608 	.word	0xf0054608
   21ee4:	4604ffef 	.word	0x4604ffef
   21ee8:	f47f2800 	.word	0xf47f2800
   21eec:	f8dbaf6d 	.word	0xf8dbaf6d
   21ef0:	46510000 	.word	0x46510000
   21ef4:	f7ff300c 	.word	0xf7ff300c
   21ef8:	4604fc17 	.word	0x4604fc17
   21efc:	f47f2800 	.word	0xf47f2800
   21f00:	f8daaf63 	.word	0xf8daaf63
   21f04:	f8db1008 	.word	0xf8db1008
   21f08:	f0040000 	.word	0xf0040000
   21f0c:	4604ffe7 	.word	0x4604ffe7
   21f10:	f47f2800 	.word	0xf47f2800
   21f14:	f8dbaf59 	.word	0xf8dbaf59
   21f18:	f8da0000 	.word	0xf8da0000
   21f1c:	300c1008 	.word	0x300c1008
   21f20:	ffdcf004 	.word	0xffdcf004
   21f24:	28004604 	.word	0x28004604
   21f28:	af4ef47f 	.word	0xaf4ef47f
   21f2c:	0000f8db 	.word	0x0000f8db
   21f30:	30183d0c 	.word	0x30183d0c
   21f34:	0b04f1ab 	.word	0x0b04f1ab
   21f38:	ffb6f004 	.word	0xffb6f004
   21f3c:	f43f2f00 	.word	0xf43f2f00
   21f40:	3f01af43 	.word	0x3f01af43
   21f44:	4c01e772 	.word	0x4c01e772
   21f48:	bf00e756 	.word	0xbf00e756
   21f4c:	ffffb280 	.word	0xffffb280

00021f50 <symbol_0002b14>:
   21f50:	b510b1b8 	.word	0xb510b1b8
   21f54:	227c4604 	.word	0x227c4604
   21f58:	f0102100 	.word	0xf0102100
   21f5c:	f104fccf 	.word	0xf104fccf
   21f60:	f004007c 	.word	0xf004007c
   21f64:	f104ff99 	.word	0xf104ff99
   21f68:	f0040088 	.word	0xf0040088
   21f6c:	f104ff95 	.word	0xf104ff95
   21f70:	f0040094 	.word	0xf0040094
   21f74:	f104ff91 	.word	0xf104ff91
   21f78:	e8bd00a0 	.word	0xe8bd00a0
   21f7c:	f0044010 	.word	0xf0044010
   21f80:	4770bf8b 	.word	0x4770bf8b

00021f84 <symbol_0000ef7>:
   21f84:	d0482800 	.word	0xd0482800
   21f88:	6e03b570 	.word	0x6e03b570
   21f8c:	2b014604 	.word	0x2b014604
   21f90:	6f60d123 	.word	0x6f60d123
   21f94:	6fa2b1c8 	.word	0x6fa2b1c8
   21f98:	2600b1aa 	.word	0x2600b1aa
   21f9c:	03c6eb06 	.word	0x03c6eb06
   21fa0:	0583eb10 	.word	0x0583eb10
   21fa4:	4628d035 	.word	0x4628d035
   21fa8:	ff7ef004 	.word	0xff7ef004
   21fac:	000cf105 	.word	0x000cf105
   21fb0:	ff7af004 	.word	0xff7af004
   21fb4:	0018f105 	.word	0x0018f105
   21fb8:	ff76f004 	.word	0xff76f004
   21fbc:	36016fa2 	.word	0x36016fa2
   21fc0:	6f604296 	.word	0x6f604296
   21fc4:	f008d3ea 	.word	0xf008d3ea
   21fc8:	2200fbcf 	.word	0x2200fbcf
   21fcc:	037cf104 	.word	0x037cf104
   21fd0:	34017022 	.word	0x34017022
   21fd4:	d1fb429c 	.word	0xd1fb429c
   21fd8:	3004bd70 	.word	0x3004bd70
   21fdc:	ff64f004 	.word	0xff64f004
   21fe0:	0010f104 	.word	0x0010f104
   21fe4:	ff60f004 	.word	0xff60f004
   21fe8:	001cf104 	.word	0x001cf104
   21fec:	ff5cf004 	.word	0xff5cf004
   21ff0:	0028f104 	.word	0x0028f104
   21ff4:	ff58f004 	.word	0xff58f004
   21ff8:	0034f104 	.word	0x0034f104
   21ffc:	ff54f004 	.word	0xff54f004
   22000:	0040f104 	.word	0x0040f104
   22004:	ff50f004 	.word	0xff50f004
   22008:	004cf104 	.word	0x004cf104
   2200c:	ff4cf004 	.word	0xff4cf004
   22010:	3601e7bf 	.word	0x3601e7bf
   22014:	d3c14296 	.word	0xd3c14296
   22018:	4770e7d5 	.word	0x4770e7d5

0002201c <symbol_0001d5f>:
   2201c:	b510b1a8 	.word	0xb510b1a8
   22020:	f7ff4604 	.word	0xf7ff4604
   22024:	f104ffaf 	.word	0xf104ffaf
   22028:	f004007c 	.word	0xf004007c
   2202c:	f104ff3d 	.word	0xf104ff3d
   22030:	f0040088 	.word	0xf0040088
   22034:	f104ff39 	.word	0xf104ff39
   22038:	f0040094 	.word	0xf0040094
   2203c:	f104ff35 	.word	0xf104ff35
   22040:	e8bd00a0 	.word	0xe8bd00a0
   22044:	f0044010 	.word	0xf0044010
   22048:	4770bf2f 	.word	0x4770bf2f

0002204c <symbol_000d41f>:
   2204c:	2101b510 	.word	0x2101b510
   22050:	f0054604 	.word	0xf0054604
   22054:	b100f931 	.word	0xb100f931
   22058:	2101bd10 	.word	0x2101bd10
   2205c:	000cf104 	.word	0x000cf104
   22060:	f92af005 	.word	0xf92af005
   22064:	d1f72800 	.word	0xd1f72800
   22068:	f1044601 	.word	0xf1044601
   2206c:	e8bd0018 	.word	0xe8bd0018
   22070:	f0054010 	.word	0xf0054010
   22074:	bf00b921 	.word	0xbf00b921

00022078 <ecp_add_mixed>:
   22078:	47f0e92d 	.word	0x47f0e92d
   2207c:	0518f102 	.word	0x0518f102
   22080:	4681b096 	.word	0x4681b096
   22084:	46284688 	.word	0x46284688
   22088:	46172100 	.word	0x46172100
   2208c:	f005461e 	.word	0xf005461e
   22090:	2800fc2d 	.word	0x2800fc2d
   22094:	6a33d048 	.word	0x6a33d048
   22098:	f106b18b 	.word	0xf106b18b
   2209c:	46200418 	.word	0x46200418
   220a0:	f0052100 	.word	0xf0052100
   220a4:	2800fc23 	.word	0x2800fc23
   220a8:	80d7f000 	.word	0x80d7f000
   220ac:	b1336a33 	.word	0xb1336a33
   220b0:	21014620 	.word	0x21014620
   220b4:	fc1af005 	.word	0xfc1af005
   220b8:	f0402800 	.word	0xf0402800
   220bc:	a80180e7 	.word	0xa80180e7
   220c0:	feeaf004 	.word	0xfeeaf004
   220c4:	f004a804 	.word	0xf004a804
   220c8:	a807fee7 	.word	0xa807fee7
   220cc:	fee4f004 	.word	0xfee4f004
   220d0:	f004a80a 	.word	0xf004a80a
   220d4:	a80dfee1 	.word	0xa80dfee1
   220d8:	fedef004 	.word	0xfedef004
   220dc:	f004a810 	.word	0xf004a810
   220e0:	a813fedb 	.word	0xa813fedb
   220e4:	fed8f004 	.word	0xfed8f004
   220e8:	4629462a 	.word	0x4629462a
   220ec:	f005a801 	.word	0xf005a801
   220f0:	4604fee9 	.word	0x4604fee9
   220f4:	a801b380 	.word	0xa801b380
   220f8:	fed6f004 	.word	0xfed6f004
   220fc:	f004a804 	.word	0xf004a804
   22100:	a807fed3 	.word	0xa807fed3
   22104:	fed0f004 	.word	0xfed0f004
   22108:	f004a80a 	.word	0xf004a80a
   2210c:	a80dfecd 	.word	0xa80dfecd
   22110:	fecaf004 	.word	0xfecaf004
   22114:	f004a810 	.word	0xf004a810
   22118:	a813fec7 	.word	0xa813fec7
   2211c:	fec4f004 	.word	0xfec4f004
   22120:	b0164620 	.word	0xb0164620
   22124:	87f0e8bd 	.word	0x87f0e8bd
   22128:	46404631 	.word	0x46404631
   2212c:	ff38f004 	.word	0xff38f004
   22130:	28004604 	.word	0x28004604
   22134:	f106d1f4 	.word	0xf106d1f4
   22138:	f108010c 	.word	0xf108010c
   2213c:	f004000c 	.word	0xf004000c
   22140:	4604ff2f 	.word	0x4604ff2f
   22144:	d1eb2800 	.word	0xd1eb2800
   22148:	0118f106 	.word	0x0118f106
   2214c:	0018f108 	.word	0x0018f108
   22150:	ff26f004 	.word	0xff26f004
   22154:	e7e34604 	.word	0xe7e34604
   22158:	a8014649 	.word	0xa8014649
   2215c:	fae4f7ff 	.word	0xfae4f7ff
   22160:	28004604 	.word	0x28004604
   22164:	462ad1c7 	.word	0x462ad1c7
   22168:	a804a901 	.word	0xa804a901
   2216c:	feaaf005 	.word	0xfeaaf005
   22170:	28004604 	.word	0x28004604
   22174:	4649d1bf 	.word	0x4649d1bf
   22178:	f7ffa804 	.word	0xf7ffa804
   2217c:	4604fad5 	.word	0x4604fad5
   22180:	d1b82800 	.word	0xd1b82800
   22184:	4632a901 	.word	0x4632a901
   22188:	f0054608 	.word	0xf0054608
   2218c:	4604fe9b 	.word	0x4604fe9b
   22190:	d1b02800 	.word	0xd1b02800
   22194:	a8014649 	.word	0xa8014649
   22198:	fac6f7ff 	.word	0xfac6f7ff
   2219c:	28004604 	.word	0x28004604
   221a0:	a904d1a9 	.word	0xa904d1a9
   221a4:	020cf106 	.word	0x020cf106
   221a8:	f0054608 	.word	0xf0054608
   221ac:	4604fe8b 	.word	0x4604fe8b
   221b0:	d1a02800 	.word	0xd1a02800
   221b4:	a8044649 	.word	0xa8044649
   221b8:	fab6f7ff 	.word	0xfab6f7ff
   221bc:	28004604 	.word	0x28004604
   221c0:	a901d199 	.word	0xa901d199
   221c4:	4608463a 	.word	0x4608463a
   221c8:	fdbcf005 	.word	0xfdbcf005
   221cc:	28004604 	.word	0x28004604
   221d0:	f109d191 	.word	0xf109d191
   221d4:	e00c0604 	.word	0xe00c0604
   221d8:	a8012100 	.word	0xa8012100
   221dc:	fb86f005 	.word	0xfb86f005
   221e0:	a901b150 	.word	0xa901b150
   221e4:	46084632 	.word	0x46084632
   221e8:	fd38f005 	.word	0xfd38f005
   221ec:	28004604 	.word	0x28004604
   221f0:	9b01d181 	.word	0x9b01d181
   221f4:	dbef2b00 	.word	0xdbef2b00
   221f8:	f107a904 	.word	0xf107a904
   221fc:	4632060c 	.word	0x4632060c
   22200:	f0054608 	.word	0xf0054608
   22204:	4604fd9f 	.word	0x4604fd9f
   22208:	f47f2800 	.word	0xf47f2800
   2220c:	f109af74 	.word	0xf109af74
   22210:	e00d0a04 	.word	0xe00d0a04
   22214:	a8042100 	.word	0xa8042100
   22218:	fb68f005 	.word	0xfb68f005
   2221c:	a904b158 	.word	0xa904b158
   22220:	46084652 	.word	0x46084652
   22224:	fd1af005 	.word	0xfd1af005
   22228:	28004604 	.word	0x28004604
   2222c:	af63f47f 	.word	0xaf63f47f
   22230:	2b009b04 	.word	0x2b009b04
   22234:	2100dbee 	.word	0x2100dbee
   22238:	f005a801 	.word	0xf005a801
   2223c:	4601fb57 	.word	0x4601fb57
   22240:	a804bb30 	.word	0xa804bb30
   22244:	fb52f005 	.word	0xfb52f005
   22248:	d17f2800 	.word	0xd17f2800
   2224c:	4641463a 	.word	0x4641463a
   22250:	f7ff4648 	.word	0xf7ff4648
   22254:	4604fab5 	.word	0x4604fab5
   22258:	4639e74d 	.word	0x4639e74d
   2225c:	f0044640 	.word	0xf0044640
   22260:	4604fe9f 	.word	0x4604fe9f
   22264:	f47f2800 	.word	0xf47f2800
   22268:	f107af5b 	.word	0xf107af5b
   2226c:	f108010c 	.word	0xf108010c
   22270:	f004000c 	.word	0xf004000c
   22274:	4604fe95 	.word	0x4604fe95
   22278:	f47f2800 	.word	0xf47f2800
   2227c:	4629af51 	.word	0x4629af51
   22280:	0018f108 	.word	0x0018f108
   22284:	fe8cf004 	.word	0xfe8cf004
   22288:	e7494604 	.word	0xe7494604
   2228c:	e7474c8b 	.word	0xe7474c8b
   22290:	aa014629 	.word	0xaa014629
   22294:	f005a813 	.word	0xf005a813
   22298:	4604fe15 	.word	0x4604fe15
   2229c:	f47f2800 	.word	0xf47f2800
   222a0:	4649af2a 	.word	0x4649af2a
   222a4:	f7ffa813 	.word	0xf7ffa813
   222a8:	4604fa3f 	.word	0x4604fa3f
   222ac:	f47f2800 	.word	0xf47f2800
   222b0:	aa01af22 	.word	0xaa01af22
   222b4:	a8074611 	.word	0xa8074611
   222b8:	fe04f005 	.word	0xfe04f005
   222bc:	28004604 	.word	0x28004604
   222c0:	af19f47f 	.word	0xaf19f47f
   222c4:	a8074649 	.word	0xa8074649
   222c8:	fa2ef7ff 	.word	0xfa2ef7ff
   222cc:	28004604 	.word	0x28004604
   222d0:	af11f47f 	.word	0xaf11f47f
   222d4:	a907aa01 	.word	0xa907aa01
   222d8:	f005a80a 	.word	0xf005a80a
   222dc:	4604fdf3 	.word	0x4604fdf3
   222e0:	f47f2800 	.word	0xf47f2800
   222e4:	4649af08 	.word	0x4649af08
   222e8:	f7ffa80a 	.word	0xf7ffa80a
   222ec:	4604fa1d 	.word	0x4604fa1d
   222f0:	f47f2800 	.word	0xf47f2800
   222f4:	a907af00 	.word	0xa907af00
   222f8:	4608463a 	.word	0x4608463a
   222fc:	fde2f005 	.word	0xfde2f005
   22300:	28004604 	.word	0x28004604
   22304:	aef7f47f 	.word	0xaef7f47f
   22308:	a8074649 	.word	0xa8074649
   2230c:	fa0cf7ff 	.word	0xfa0cf7ff
   22310:	28004604 	.word	0x28004604
   22314:	aeeff47f 	.word	0xaeeff47f
   22318:	a9072202 	.word	0xa9072202
   2231c:	f005a801 	.word	0xf005a801
   22320:	4604fec9 	.word	0x4604fec9
   22324:	f47f2800 	.word	0xf47f2800
   22328:	f109aee6 	.word	0xf109aee6
   2232c:	46290504 	.word	0x46290504
   22330:	f005a801 	.word	0xf005a801
   22334:	2800fa73 	.word	0x2800fa73
   22338:	a901db0d 	.word	0xa901db0d
   2233c:	4608462a 	.word	0x4608462a
   22340:	fbccf005 	.word	0xfbccf005
   22344:	28004604 	.word	0x28004604
   22348:	e6d4d0f1 	.word	0xe6d4d0f1
   2234c:	f7ff4640 	.word	0xf7ff4640
   22350:	4604fe7d 	.word	0x4604fe7d
   22354:	aa04e6cf 	.word	0xaa04e6cf
   22358:	a80d4611 	.word	0xa80d4611
   2235c:	fdb2f005 	.word	0xfdb2f005
   22360:	28004604 	.word	0x28004604
   22364:	aec7f47f 	.word	0xaec7f47f
   22368:	a80d4649 	.word	0xa80d4649
   2236c:	f9dcf7ff 	.word	0xf9dcf7ff
   22370:	28004604 	.word	0x28004604
   22374:	aebff47f 	.word	0xaebff47f
   22378:	aa01a90d 	.word	0xaa01a90d
   2237c:	f0054608 	.word	0xf0054608
   22380:	4604fce1 	.word	0x4604fce1
   22384:	f47f2800 	.word	0xf47f2800
   22388:	9b0daeb6 	.word	0x9b0daeb6
   2238c:	da0d2b00 	.word	0xda0d2b00
   22390:	a80d2100 	.word	0xa80d2100
   22394:	faaaf005 	.word	0xfaaaf005
   22398:	a90db140 	.word	0xa90db140
   2239c:	4608462a 	.word	0x4608462a
   223a0:	fc5cf005 	.word	0xfc5cf005
   223a4:	28004604 	.word	0x28004604
   223a8:	e6a4d0ef 	.word	0xe6a4d0ef
   223ac:	aa0aa90d 	.word	0xaa0aa90d
   223b0:	f0054608 	.word	0xf0054608
   223b4:	4604fcc7 	.word	0x4604fcc7
   223b8:	f47f2800 	.word	0xf47f2800
   223bc:	9b0dae9c 	.word	0x9b0dae9c
   223c0:	da0d2b00 	.word	0xda0d2b00
   223c4:	a80d2100 	.word	0xa80d2100
   223c8:	fa90f005 	.word	0xfa90f005
   223cc:	a90db140 	.word	0xa90db140
   223d0:	4608462a 	.word	0x4608462a
   223d4:	fc42f005 	.word	0xfc42f005
   223d8:	28004604 	.word	0x28004604
   223dc:	e68ad0ef 	.word	0xe68ad0ef
   223e0:	aa0da907 	.word	0xaa0da907
   223e4:	f0054608 	.word	0xf0054608
   223e8:	4604fcad 	.word	0x4604fcad
   223ec:	f47f2800 	.word	0xf47f2800
   223f0:	9b07ae82 	.word	0x9b07ae82
   223f4:	da0d2b00 	.word	0xda0d2b00
   223f8:	a8072100 	.word	0xa8072100
   223fc:	fa76f005 	.word	0xfa76f005
   22400:	a907b140 	.word	0xa907b140
   22404:	4608462a 	.word	0x4608462a
   22408:	fc28f005 	.word	0xfc28f005
   2240c:	28004604 	.word	0x28004604
   22410:	e670d0ef 	.word	0xe670d0ef
   22414:	aa04a907 	.word	0xaa04a907
   22418:	f0054608 	.word	0xf0054608
   2241c:	4604fd53 	.word	0x4604fd53
   22420:	f47f2800 	.word	0xf47f2800
   22424:	4649ae68 	.word	0x4649ae68
   22428:	f7ffa807 	.word	0xf7ffa807
   2242c:	4604f97d 	.word	0x4604f97d
   22430:	f47f2800 	.word	0xf47f2800
   22434:	a90aae60 	.word	0xa90aae60
   22438:	46084632 	.word	0x46084632
   2243c:	fd42f005 	.word	0xfd42f005
   22440:	28004604 	.word	0x28004604
   22444:	ae57f47f 	.word	0xae57f47f
   22448:	a80a4649 	.word	0xa80a4649
   2244c:	f96cf7ff 	.word	0xf96cf7ff
   22450:	28004604 	.word	0x28004604
   22454:	ae4ff47f 	.word	0xae4ff47f
   22458:	a907aa0a 	.word	0xa907aa0a
   2245c:	f005a810 	.word	0xf005a810
   22460:	4604fc71 	.word	0x4604fc71
   22464:	f47f2800 	.word	0xf47f2800
   22468:	9b10ae46 	.word	0x9b10ae46
   2246c:	da0d2b00 	.word	0xda0d2b00
   22470:	a8102100 	.word	0xa8102100
   22474:	fa3af005 	.word	0xfa3af005
   22478:	a910b140 	.word	0xa910b140
   2247c:	4608462a 	.word	0x4608462a
   22480:	fbecf005 	.word	0xfbecf005
   22484:	28004604 	.word	0x28004604
   22488:	e634d0ef 	.word	0xe634d0ef
   2248c:	4640a90d 	.word	0x4640a90d
   22490:	fd86f004 	.word	0xfd86f004
   22494:	28004604 	.word	0x28004604
   22498:	ae2df47f 	.word	0xae2df47f
   2249c:	f108a910 	.word	0xf108a910
   224a0:	f004000c 	.word	0xf004000c
   224a4:	4604fd7d 	.word	0x4604fd7d
   224a8:	f47f2800 	.word	0xf47f2800
   224ac:	f108ae24 	.word	0xf108ae24
   224b0:	a9130018 	.word	0xa9130018
   224b4:	fd74f004 	.word	0xfd74f004
   224b8:	e61c4604 	.word	0xe61c4604
   224bc:	ffffb080 	.word	0xffffb080

000224c0 <ecp_mul_comb>:
   224c0:	4ff0e92d 	.word	0x4ff0e92d
   224c4:	46984605 	.word	0x46984605
   224c8:	034cf105 	.word	0x034cf105
   224cc:	b0e5461c 	.word	0xb0e5461c
   224d0:	9104a80d 	.word	0x9104a80d
   224d4:	93084617 	.word	0x93084617
   224d8:	fcdef004 	.word	0xfcdef004
   224dc:	f004a810 	.word	0xf004a810
   224e0:	4620fcdb 	.word	0x4620fcdb
   224e4:	f0042100 	.word	0xf0042100
   224e8:	2801ff21 	.word	0x2801ff21
   224ec:	f0409007 	.word	0xf0409007
   224f0:	6deb81c9 	.word	0x6deb81c9
   224f4:	090cf108 	.word	0x090cf108
   224f8:	7fc0f5b3 	.word	0x7fc0f5b3
   224fc:	2605bf2c 	.word	0x2605bf2c
   22500:	46482604 	.word	0x46482604
   22504:	0134f105 	.word	0x0134f105
   22508:	f04fbf2c 	.word	0xf04fbf2c
   2250c:	f04f0a06 	.word	0xf04f0a06
   22510:	46b30a05 	.word	0x46b30a05
   22514:	f982f005 	.word	0xf982f005
   22518:	d0722800 	.word	0xd0722800
   2251c:	42a66dec 	.word	0x42a66dec
   22520:	2301d245 	.word	0x2301d245
   22524:	32fff10b 	.word	0x32fff10b
   22528:	93024093 	.word	0x93024093
   2252c:	b2db4434 	.word	0xb2db4434
   22530:	93033c01 	.word	0x93033c01
   22534:	fbb42300 	.word	0xfbb42300
   22538:	9802f4f6 	.word	0x9802f4f6
   2253c:	93059206 	.word	0x93059206
   22540:	f0082124 	.word	0xf0082124
   22544:	9001f8fd 	.word	0x9001f8fd
   22548:	d0402800 	.word	0xd0402800
   2254c:	f0044641 	.word	0xf0044641
   22550:	f8ddfd27 	.word	0xf8ddfd27
   22554:	4683a004 	.word	0x4683a004
   22558:	f0002800 	.word	0xf0002800
   2255c:	9b058086 	.word	0x9b058086
   22560:	d17b2b00 	.word	0xd17b2b00
   22564:	9c012500 	.word	0x9c012500
   22568:	35019e03 	.word	0x35019e03
   2256c:	4620b154 	.word	0x4620b154
   22570:	fc9af004 	.word	0xfc9af004
   22574:	000cf104 	.word	0x000cf104
   22578:	fc96f004 	.word	0xfc96f004
   2257c:	0018f104 	.word	0x0018f104
   22580:	fc92f004 	.word	0xfc92f004
   22584:	429eb2eb 	.word	0x429eb2eb
   22588:	0424f104 	.word	0x0424f104
   2258c:	9801d8ed 	.word	0x9801d8ed
   22590:	f8eaf008 	.word	0xf8eaf008
   22594:	f004a80d 	.word	0xf004a80d
   22598:	a810fc87 	.word	0xa810fc87
   2259c:	fc84f004 	.word	0xfc84f004
   225a0:	0f00f1bb 	.word	0x0f00f1bb
   225a4:	4658d11b 	.word	0x4658d11b
   225a8:	e8bdb065 	.word	0xe8bdb065
   225ac:	26028ff0 	.word	0x26028ff0
   225b0:	22012300 	.word	0x22012300
   225b4:	21244630 	.word	0x21244630
   225b8:	6602e9cd 	.word	0x6602e9cd
   225bc:	3205e9cd 	.word	0x3205e9cd
   225c0:	f8bef008 	.word	0xf8bef008
   225c4:	08643401 	.word	0x08643401
   225c8:	28009001 	.word	0x28009001
   225cc:	a80dd1be 	.word	0xa80dd1be
   225d0:	fc6af004 	.word	0xfc6af004
   225d4:	f004a810 	.word	0xf004a810
   225d8:	f8dffc67 	.word	0xf8dffc67
   225dc:	9c04b644 	.word	0x9c04b644
   225e0:	d0e02c00 	.word	0xd0e02c00
   225e4:	f0044620 	.word	0xf0044620
   225e8:	f104fc5f 	.word	0xf104fc5f
   225ec:	f004000c 	.word	0xf004000c
   225f0:	f104fc5b 	.word	0xf104fc5b
   225f4:	f0040018 	.word	0xf0040018
   225f8:	4658fc57 	.word	0x4658fc57
   225fc:	e8bdb065 	.word	0xe8bdb065
   22600:	f1058ff0 	.word	0xf1058ff0
   22604:	46400128 	.word	0x46400128
   22608:	f908f005 	.word	0xf908f005
   2260c:	d1852800 	.word	0xd1852800
   22610:	459a6deb 	.word	0x459a6deb
   22614:	82f4f0c0 	.word	0x82f4f0c0
   22618:	1c5c2602 	.word	0x1c5c2602
   2261c:	e9cd2301 	.word	0xe9cd2301
   22620:	08646602 	.word	0x08646602
   22624:	6f6b9306 	.word	0x6f6b9306
   22628:	2b009301 	.word	0x2b009301
   2262c:	80eaf000 	.word	0x80eaf000
   22630:	46382100 	.word	0x46382100
   22634:	fe7af004 	.word	0xfe7af004
   22638:	46804639 	.word	0x46804639
   2263c:	f004a80d 	.word	0xf004a80d
   22640:	4683fcaf 	.word	0x4683fcaf
   22644:	463ab950 	.word	0x463ab950
   22648:	a8109908 	.word	0xa8109908
   2264c:	fb7af005 	.word	0xfb7af005
   22650:	28004683 	.word	0x28004683
   22654:	9b07d036 	.word	0x9b07d036
   22658:	d0832b00 	.word	0xd0832b00
   2265c:	f004a80d 	.word	0xf004a80d
   22660:	a810fc23 	.word	0xa810fc23
   22664:	fc20f004 	.word	0xfc20f004
   22668:	4649e7b9 	.word	0x4649e7b9
   2266c:	000cf10a 	.word	0x000cf10a
   22670:	fc96f004 	.word	0xfc96f004
   22674:	28004683 	.word	0x28004683
   22678:	af71f47f 	.word	0xaf71f47f
   2267c:	f1089b01 	.word	0xf1089b01
   22680:	f1030118 	.word	0xf1030118
   22684:	f0040018 	.word	0xf0040018
   22688:	4683fc8b 	.word	0x4683fc8b
   2268c:	f47f2800 	.word	0xf47f2800
   22690:	462aaf66 	.word	0x462aaf66
   22694:	0901f04f 	.word	0x0901f04f
   22698:	46254651 	.word	0x46254651
   2269c:	464c4682 	.word	0x464c4682
   226a0:	96094690 	.word	0x96094690
   226a4:	9e06970a 	.word	0x9e06970a
   226a8:	eb049f01 	.word	0xeb049f01
   226ac:	eb0704c4 	.word	0xeb0704c4
   226b0:	46200484 	.word	0x46200484
   226b4:	fc74f004 	.word	0xfc74f004
   226b8:	f0002800 	.word	0xf0002800
   226bc:	468380a7 	.word	0x468380a7
   226c0:	e74d9b05 	.word	0xe74d9b05
   226c4:	33fff118 	.word	0x33fff118
   226c8:	2301bf18 	.word	0x2301bf18
   226cc:	461aa910 	.word	0x461aa910
   226d0:	9302a80d 	.word	0x9302a80d
   226d4:	fd92f004 	.word	0xfd92f004
   226d8:	28004683 	.word	0x28004683
   226dc:	a822d1bb 	.word	0xa822d1bb
   226e0:	46591c62 	.word	0x46591c62
   226e4:	f90af010 	.word	0xf90af010
   226e8:	f10db3d4 	.word	0xf10db3d4
   226ec:	46d80988 	.word	0x46d80988
   226f0:	46c246cb 	.word	0x46c246cb
   226f4:	46512700 	.word	0x46512700
   226f8:	f004a80d 	.word	0xf004a80d
   226fc:	f89bfe17 	.word	0xf89bfe17
   22700:	40b83000 	.word	0x40b83000
   22704:	43033701 	.word	0x43033701
   22708:	44a242b7 	.word	0x44a242b7
   2270c:	3000f88b 	.word	0x3000f88b
   22710:	f108d1f1 	.word	0xf108d1f1
   22714:	45a00801 	.word	0x45a00801
   22718:	0b01f10b 	.word	0x0b01f10b
   2271c:	2300d1e9 	.word	0x2300d1e9
   22720:	0c01f04f 	.word	0x0c01f04f
   22724:	1088f89d 	.word	0x1088f89d
   22728:	6f01f819 	.word	0x6f01f819
   2272c:	0c01f10c 	.word	0x0c01f10c
   22730:	0203ea86 	.word	0x0203ea86
   22734:	f00043d0 	.word	0xf00043d0
   22738:	fb000001 	.word	0xfb000001
   2273c:	b252f701 	.word	0xb252f701
   22740:	4033b27f 	.word	0x4033b27f
   22744:	0607ea02 	.word	0x0607ea02
   22748:	ea41407a 	.word	0xea41407a
   2274c:	433310c0 	.word	0x433310c0
   22750:	45e0b2d1 	.word	0x45e0b2d1
   22754:	0c01f809 	.word	0x0c01f809
   22758:	f889b2db 	.word	0xf889b2db
   2275c:	d2e31000 	.word	0xd2e31000
   22760:	a8192600 	.word	0xa8192600
   22764:	fb98f004 	.word	0xfb98f004
   22768:	f004a81c 	.word	0xf004a81c
   2276c:	a81ffb95 	.word	0xa81ffb95
   22770:	fb92f004 	.word	0xfb92f004
   22774:	f813ab22 	.word	0xf813ab22
   22778:	44239004 	.word	0x44239004
   2277c:	9b049306 	.word	0x9b049306
   22780:	469b4632 	.word	0x469b4632
   22784:	95059f01 	.word	0x95059f01
   22788:	9f03463d 	.word	0x9f03463d
   2278c:	0845f3c9 	.word	0x0845f3c9
   22790:	0a0cf103 	.word	0x0a0cf103
   22794:	0408eba2 	.word	0x0408eba2
   22798:	f484fab4 	.word	0xf484fab4
   2279c:	46290964 	.word	0x46290964
   227a0:	46584622 	.word	0x46584622
   227a4:	fd2af004 	.word	0xfd2af004
   227a8:	f1053601 	.word	0xf1053601
   227ac:	3524010c 	.word	0x3524010c
   227b0:	d16a2800 	.word	0xd16a2800
   227b4:	46504622 	.word	0x46504622
   227b8:	fd20f004 	.word	0xfd20f004
   227bc:	2800b2f2 	.word	0x2800b2f2
   227c0:	42bad163 	.word	0x42bad163
   227c4:	9d05d3e6 	.word	0x9d05d3e6
   227c8:	1d2ba816 	.word	0x1d2ba816
   227cc:	9308461c 	.word	0x9308461c
   227d0:	fb62f004 	.word	0xfb62f004
   227d4:	4621a816 	.word	0x4621a816
   227d8:	f0054652 	.word	0xf0054652
   227dc:	4683fab3 	.word	0x4683fab3
   227e0:	f0002800 	.word	0xf0002800
   227e4:	a81680c3 	.word	0xa81680c3
   227e8:	fb5ef004 	.word	0xfb5ef004
   227ec:	f004a819 	.word	0xf004a819
   227f0:	a81cfb5b 	.word	0xa81cfb5b
   227f4:	fb58f004 	.word	0xfb58f004
   227f8:	f004a81f 	.word	0xf004a81f
   227fc:	9b07fb55 	.word	0x9b07fb55
   22800:	e6ac9305 	.word	0xe6ac9305
   22804:	98022301 	.word	0x98022301
   22808:	e6999305 	.word	0xe6999305
   2280c:	0b59ea4f 	.word	0x0b59ea4f
   22810:	0bcbeb0b 	.word	0x0bcbeb0b
   22814:	0b8beb07 	.word	0x0b8beb07
   22818:	010cf10b 	.word	0x010cf10b
   2281c:	000cf104 	.word	0x000cf104
   22820:	fbbef004 	.word	0xfbbef004
   22824:	f47f2800 	.word	0xf47f2800
   22828:	f10baf4a 	.word	0xf10baf4a
   2282c:	f1040118 	.word	0xf1040118
   22830:	f0040018 	.word	0xf0040018
   22834:	2800fbb5 	.word	0x2800fbb5
   22838:	af41f47f 	.word	0xaf41f47f
   2283c:	4683b165 	.word	0x4683b165
   22840:	46214622 	.word	0x46214622
   22844:	f7fe4640 	.word	0xf7fe4640
   22848:	f10bffbb 	.word	0xf10bffbb
   2284c:	28000b01 	.word	0x28000b01
   22850:	af35f47f 	.word	0xaf35f47f
   22854:	d1f345ab 	.word	0xd1f345ab
   22858:	0949ea4f 	.word	0x0949ea4f
   2285c:	f989fa5f 	.word	0xf989fa5f
   22860:	0301f10a 	.word	0x0301f10a
   22864:	f842aa22 	.word	0xf842aa22
   22868:	fa5f402a 	.word	0xfa5f402a
   2286c:	fa39fa83 	.word	0xfa39fa83
   22870:	464cf306 	.word	0x464cf306
   22874:	ea4fd10b 	.word	0xea4fd10b
   22878:	eb010159 	.word	0xeb010159
   2287c:	eb0701c1 	.word	0xeb0701c1
   22880:	e7120181 	.word	0xe7120181
   22884:	b39cf8df 	.word	0xb39cf8df
   22888:	4683e68d 	.word	0x4683e68d
   2288c:	4652e7ae 	.word	0x4652e7ae
   22890:	462c2a01 	.word	0x462c2a01
   22894:	46459e09 	.word	0x46459e09
   22898:	d9619f0a 	.word	0xd9619f0a
   2289c:	4640a922 	.word	0x4640a922
   228a0:	fa46f7ff 	.word	0xfa46f7ff
   228a4:	f1bb4683 	.word	0xf1bb4683
   228a8:	f47f0f00 	.word	0xf47f0f00
   228ac:	2301ae58 	.word	0x2301ae58
   228b0:	46da9a01 	.word	0x46da9a01
   228b4:	970b3a24 	.word	0x970b3a24
   228b8:	461f4693 	.word	0x461f4693
   228bc:	4609e9cd 	.word	0x4609e9cd
   228c0:	eb03b303 	.word	0xeb03b303
   228c4:	ea4f03c3 	.word	0xea4f03c3
   228c8:	9b010883 	.word	0x9b010883
   228cc:	0424f1a8 	.word	0x0424f1a8
   228d0:	eb03441c 	.word	0xeb03441c
   228d4:	e0050908 	.word	0xe0050908
   228d8:	45a3aa22 	.word	0x45a3aa22
   228dc:	602af842 	.word	0x602af842
   228e0:	d00f469a 	.word	0xd00f469a
   228e4:	0604eb08 	.word	0x0604eb08
   228e8:	4622464b 	.word	0x4622464b
   228ec:	46284631 	.word	0x46284631
   228f0:	fbc2f7ff 	.word	0xfbc2f7ff
   228f4:	0301f10a 	.word	0x0301f10a
   228f8:	b2db3c24 	.word	0xb2db3c24
   228fc:	d0eb2800 	.word	0xd0eb2800
   22900:	e6dd4683 	.word	0xe6dd4683
   22904:	9a06007b 	.word	0x9a06007b
   22908:	fa37b2df 	.word	0xfa37b2df
   2290c:	463bf202 	.word	0x463bf202
   22910:	f1bad0d6 	.word	0xf1bad0d6
   22914:	e9dd0f01 	.word	0xe9dd0f01
   22918:	9f0b4609 	.word	0x9f0b4609
   2291c:	8167f240 	.word	0x8167f240
   22920:	a9224652 	.word	0xa9224652
   22924:	f7ff4628 	.word	0xf7ff4628
   22928:	4683fa03 	.word	0x4683fa03
   2292c:	f1bb9b05 	.word	0xf1bb9b05
   22930:	f47f0f00 	.word	0xf47f0f00
   22934:	b123ae15 	.word	0xb123ae15
   22938:	676b9b01 	.word	0x676b9b01
   2293c:	67ab9b02 	.word	0x67ab9b02
   22940:	4619e676 	.word	0x4619e676
   22944:	f0044638 	.word	0xf0044638
   22948:	4639fcf1 	.word	0x4639fcf1
   2294c:	a80d4680 	.word	0xa80d4680
   22950:	fb26f004 	.word	0xfb26f004
   22954:	28004683 	.word	0x28004683
   22958:	ae04f47f 	.word	0xae04f47f
   2295c:	e6729007 	.word	0xe6729007
   22960:	46289922 	.word	0x46289922
   22964:	f97cf7ff 	.word	0xf97cf7ff
   22968:	e79c4683 	.word	0xe79c4683
   2296c:	46504601 	.word	0x46504601
   22970:	ffbcf004 	.word	0xffbcf004
   22974:	bf181c02 	.word	0xbf181c02
   22978:	a9162201 	.word	0xa9162201
   2297c:	12d9ea02 	.word	0x12d9ea02
   22980:	f0044650 	.word	0xf0044650
   22984:	4683fc3b 	.word	0x4683fc3b
   22988:	f004a816 	.word	0xf004a816
   2298c:	f1bbfa8d 	.word	0xf1bbfa8d
   22990:	f47f0f00 	.word	0xf47f0f00
   22994:	9b04af2b 	.word	0x9b04af2b
   22998:	f1032101 	.word	0xf1032101
   2299c:	46200418 	.word	0x46200418
   229a0:	fc8af004 	.word	0xfc8af004
   229a4:	28004683 	.word	0x28004683
   229a8:	af20f47f 	.word	0xaf20f47f
   229ac:	2b009b6e 	.word	0x2b009b6e
   229b0:	8082f000 	.word	0x8082f000
   229b4:	6dab260c 	.word	0x6dab260c
   229b8:	3307a813 	.word	0x3307a813
   229bc:	f00408df 	.word	0xf00408df
   229c0:	a816fa6b 	.word	0xa816fa6b
   229c4:	fa68f004 	.word	0xfa68f004
   229c8:	8020f8dd 	.word	0x8020f8dd
   229cc:	9a6e9b6f 	.word	0x9a6e9b6f
   229d0:	a8134639 	.word	0xa8134639
   229d4:	f9e2f006 	.word	0xf9e2f006
   229d8:	2101e006 	.word	0x2101e006
   229dc:	f004a813 	.word	0xf004a813
   229e0:	2800fead 	.word	0x2800fead
   229e4:	80c8f040 	.word	0x80c8f040
   229e8:	a8134641 	.word	0xa8134641
   229ec:	ff16f004 	.word	0xff16f004
   229f0:	daf22800 	.word	0xdaf22800
   229f4:	f0003e01 	.word	0xf0003e01
   229f8:	21018100 	.word	0x21018100
   229fc:	f004a813 	.word	0xf004a813
   22a00:	2800ff75 	.word	0x2800ff75
   22a04:	aa13dde2 	.word	0xaa13dde2
   22a08:	46204621 	.word	0x46204621
   22a0c:	fa5af005 	.word	0xfa5af005
   22a10:	b1304683 	.word	0xb1304683
   22a14:	f004a813 	.word	0xf004a813
   22a18:	a816fa47 	.word	0xa816fa47
   22a1c:	fa44f004 	.word	0xfa44f004
   22a20:	4620e6e4 	.word	0x4620e6e4
   22a24:	f7fe4629 	.word	0xf7fe4629
   22a28:	4683fe7f 	.word	0x4683fe7f
   22a2c:	d1f12800 	.word	0xd1f12800
   22a30:	4611aa13 	.word	0x4611aa13
   22a34:	f005a816 	.word	0xf005a816
   22a38:	4683fa45 	.word	0x4683fa45
   22a3c:	d1e92800 	.word	0xd1e92800
   22a40:	a8164629 	.word	0xa8164629
   22a44:	fe70f7fe 	.word	0xfe70f7fe
   22a48:	28004683 	.word	0x28004683
   22a4c:	9804d1e2 	.word	0x9804d1e2
   22a50:	4601aa16 	.word	0x4601aa16
   22a54:	fa36f005 	.word	0xfa36f005
   22a58:	28004683 	.word	0x28004683
   22a5c:	4629d1da 	.word	0x4629d1da
   22a60:	f7fe9804 	.word	0xf7fe9804
   22a64:	4683fe61 	.word	0x4683fe61
   22a68:	d1d32800 	.word	0xd1d32800
   22a6c:	aa13a916 	.word	0xaa13a916
   22a70:	f0054608 	.word	0xf0054608
   22a74:	4683fa27 	.word	0x4683fa27
   22a78:	d1cb2800 	.word	0xd1cb2800
   22a7c:	a8164629 	.word	0xa8164629
   22a80:	fe52f7fe 	.word	0xfe52f7fe
   22a84:	28004683 	.word	0x28004683
   22a88:	aa16d1c4 	.word	0xaa16d1c4
   22a8c:	46504651 	.word	0x46504651
   22a90:	fa18f005 	.word	0xfa18f005
   22a94:	28004683 	.word	0x28004683
   22a98:	4629d1bc 	.word	0x4629d1bc
   22a9c:	f7fe4650 	.word	0xf7fe4650
   22aa0:	4683fe43 	.word	0x4683fe43
   22aa4:	f004a813 	.word	0xf004a813
   22aa8:	a816f9ff 	.word	0xa816f9ff
   22aac:	f9fcf004 	.word	0xf9fcf004
   22ab0:	0f00f1bb 	.word	0x0f00f1bb
   22ab4:	ae9af47f 	.word	0xae9af47f
   22ab8:	f8dd46ab 	.word	0xf8dd46ab
   22abc:	f8dd8018 	.word	0xf8dd8018
   22ac0:	f8cd900c 	.word	0xf8cd900c
   22ac4:	f8dda018 	.word	0xf8dda018
   22ac8:	ab22a010 	.word	0xab22a010
   22acc:	d0554543 	.word	0xd0554543
   22ad0:	46514652 	.word	0x46514652
   22ad4:	f7fe4658 	.word	0xf7fe4658
   22ad8:	4602fe73 	.word	0x4602fe73
   22adc:	d1492800 	.word	0xd1492800
   22ae0:	46044606 	.word	0x46044606
   22ae4:	3d01f818 	.word	0x3d01f818
   22ae8:	93059d01 	.word	0x93059d01
   22aec:	0745f3c3 	.word	0x0745f3c3
   22af0:	fab41be4 	.word	0xfab41be4
   22af4:	0964f484 	.word	0x0964f484
   22af8:	46224629 	.word	0x46224629
   22afc:	f004a819 	.word	0xf004a819
   22b00:	3601fb7d 	.word	0x3601fb7d
   22b04:	010cf105 	.word	0x010cf105
   22b08:	28003524 	.word	0x28003524
   22b0c:	aebdf47f 	.word	0xaebdf47f
   22b10:	a81c4622 	.word	0xa81c4622
   22b14:	fb72f004 	.word	0xfb72f004
   22b18:	2800b2f4 	.word	0x2800b2f4
   22b1c:	aeb5f47f 	.word	0xaeb5f47f
   22b20:	d8e545a1 	.word	0xd8e545a1
   22b24:	f004a816 	.word	0xf004a816
   22b28:	aa1cf9b7 	.word	0xaa1cf9b7
   22b2c:	a8169908 	.word	0xa8169908
   22b30:	f908f005 	.word	0xf908f005
   22b34:	4683b108 	.word	0x4683b108
   22b38:	4601e655 	.word	0x4601e655
   22b3c:	f004a81c 	.word	0xf004a81c
   22b40:	1c02fed5 	.word	0x1c02fed5
   22b44:	2201bf18 	.word	0x2201bf18
   22b48:	a9169b05 	.word	0xa9169b05
   22b4c:	12d3ea02 	.word	0x12d3ea02
   22b50:	f004a81c 	.word	0xf004a81c
   22b54:	9005fb53 	.word	0x9005fb53
   22b58:	f004a816 	.word	0xf004a816
   22b5c:	9a05f9a5 	.word	0x9a05f9a5
   22b60:	4652b942 	.word	0x4652b942
   22b64:	4651ab19 	.word	0x4651ab19
   22b68:	f7ff4658 	.word	0xf7ff4658
   22b6c:	4602fa85 	.word	0x4602fa85
   22b70:	d0aa2800 	.word	0xd0aa2800
   22b74:	e6394693 	.word	0xe6394693
   22b78:	e74b4683 	.word	0xe74b4683
   22b7c:	f8dda819 	.word	0xf8dda819
   22b80:	f004a018 	.word	0xf004a018
   22b84:	a81cf991 	.word	0xa81cf991
   22b88:	f98ef004 	.word	0xf98ef004
   22b8c:	f004a81f 	.word	0xf004a81f
   22b90:	a819f98b 	.word	0xa819f98b
   22b94:	f980f004 	.word	0xf980f004
   22b98:	99084652 	.word	0x99084652
   22b9c:	f005a819 	.word	0xf005a819
   22ba0:	465df8d1 	.word	0x465df8d1
   22ba4:	b1184683 	.word	0xb1184683
   22ba8:	f004a819 	.word	0xf004a819
   22bac:	e552f97d 	.word	0xe552f97d
   22bb0:	46504659 	.word	0x46504659
   22bb4:	fe9af004 	.word	0xfe9af004
   22bb8:	a9199b02 	.word	0xa9199b02
   22bbc:	bf082800 	.word	0xbf082800
   22bc0:	46502300 	.word	0x46502300
   22bc4:	f004461a 	.word	0xf004461a
   22bc8:	4683fb19 	.word	0x4683fb19
   22bcc:	f004a819 	.word	0xf004a819
   22bd0:	f1bbf96b 	.word	0xf1bbf96b
   22bd4:	f47f0f00 	.word	0xf47f0f00
   22bd8:	4628ad3e 	.word	0x4628ad3e
   22bdc:	f7ff9904 	.word	0xf7ff9904
   22be0:	9b07f83f 	.word	0x9b07f83f
   22be4:	2b004683 	.word	0x2b004683
   22be8:	acd4f47f 	.word	0xacd4f47f
   22bec:	9922e4ba 	.word	0x9922e4ba
   22bf0:	f7ff4628 	.word	0xf7ff4628
   22bf4:	4683f835 	.word	0x4683f835
   22bf8:	f8dfe698 	.word	0xf8dfe698
   22bfc:	e5f5b02c 	.word	0xe5f5b02c
   22c00:	f10a2201 	.word	0xf10a2201
   22c04:	eb0a31ff 	.word	0xeb0a31ff
   22c08:	fa020403 	.word	0xfa020403
   22c0c:	3c01f301 	.word	0x3c01f301
   22c10:	b2db9302 	.word	0xb2db9302
   22c14:	fbb49106 	.word	0xfbb49106
   22c18:	4656f4fa 	.word	0x4656f4fa
   22c1c:	e5029303 	.word	0xe5029303
   22c20:	ffffb280 	.word	0xffffb280
   22c24:	ffffb080 	.word	0xffffb080
   22c28:	ffffb300 	.word	0xffffb300

00022c2c <symbol_000637b>:
   22c2c:	43f8e92d 	.word	0x43f8e92d
   22c30:	e9dd2a01 	.word	0xe9dd2a01
   22c34:	d8437808 	.word	0xd8437808
   22c38:	4681460d 	.word	0x4681460d
   22c3c:	f1052100 	.word	0xf1052100
   22c40:	461e0018 	.word	0x461e0018
   22c44:	f0044614 	.word	0xf0044614
   22c48:	b938fe51 	.word	0xb938fe51
   22c4c:	0f00f1b8 	.word	0x0f00f1b8
   22c50:	2301d038 	.word	0x2301d038
   22c54:	60337038 	.word	0x60337038
   22c58:	83f8e8bd 	.word	0x83f8e8bd
   22c5c:	0004f109 	.word	0x0004f109
   22c60:	fba2f004 	.word	0xfba2f004
   22c64:	b9c44681 	.word	0xb9c44681
   22c68:	33010043 	.word	0x33010043
   22c6c:	60334598 	.word	0x60334598
   22c70:	2304d328 	.word	0x2304d328
   22c74:	46024639 	.word	0x46024639
   22c78:	3b01f801 	.word	0x3b01f801
   22c7c:	f0044628 	.word	0xf0044628
   22c80:	2800fc55 	.word	0x2800fc55
   22c84:	f109d1e8 	.word	0xf109d1e8
   22c88:	f1050101 	.word	0xf1050101
   22c8c:	4439000c 	.word	0x4439000c
   22c90:	e8bd464a 	.word	0xe8bd464a
   22c94:	f00443f8 	.word	0xf00443f8
   22c98:	1c43bc49 	.word	0x1c43bc49
   22c9c:	60334598 	.word	0x60334598
   22ca0:	2100d310 	.word	0x2100d310
   22ca4:	000cf105 	.word	0x000cf105
   22ca8:	fb40f004 	.word	0xfb40f004
   22cac:	30024639 	.word	0x30024639
   22cb0:	0b01f801 	.word	0x0b01f801
   22cb4:	4628464a 	.word	0x4628464a
   22cb8:	43f8e8bd 	.word	0x43f8e8bd
   22cbc:	bc36f004 	.word	0xbc36f004
   22cc0:	e7c94801 	.word	0xe7c94801
   22cc4:	e7c74801 	.word	0xe7c74801
   22cc8:	ffffb080 	.word	0xffffb080
   22ccc:	ffffb100 	.word	0xffffb100

00022cd0 <symbol_0007a22>:
   22cd0:	d0412b00 	.word	0xd0412b00
   22cd4:	461eb5f8 	.word	0x461eb5f8
   22cd8:	46147813 	.word	0x46147813
   22cdc:	b9ab460d 	.word	0xb9ab460d
   22ce0:	d1352e01 	.word	0xd1352e01
   22ce4:	46284631 	.word	0x46284631
   22ce8:	fae6f004 	.word	0xfae6f004
   22cec:	bdf8b100 	.word	0xbdf8b100
   22cf0:	f1054631 	.word	0xf1054631
   22cf4:	f004000c 	.word	0xf004000c
   22cf8:	2800fadf 	.word	0x2800fadf
   22cfc:	4601d1f7 	.word	0x4601d1f7
   22d00:	0018f105 	.word	0x0018f105
   22d04:	40f8e8bd 	.word	0x40f8e8bd
   22d08:	bad6f004 	.word	0xbad6f004
   22d0c:	f0043004 	.word	0xf0043004
   22d10:	7823fb4b 	.word	0x7823fb4b
   22d14:	2b044607 	.word	0x2b044607
   22d18:	0043d11c 	.word	0x0043d11c
   22d1c:	429e3301 	.word	0x429e3301
   22d20:	4602d116 	.word	0x4602d116
   22d24:	46281c61 	.word	0x46281c61
   22d28:	fb6ef004 	.word	0xfb6ef004
   22d2c:	d1de2800 	.word	0xd1de2800
   22d30:	44211c79 	.word	0x44211c79
   22d34:	f105463a 	.word	0xf105463a
   22d38:	f004000c 	.word	0xf004000c
   22d3c:	2800fb65 	.word	0x2800fb65
   22d40:	f105d1d5 	.word	0xf105d1d5
   22d44:	21010018 	.word	0x21010018
   22d48:	40f8e8bd 	.word	0x40f8e8bd
   22d4c:	bab4f004 	.word	0xbab4f004
   22d50:	bdf84802 	.word	0xbdf84802
   22d54:	bdf84802 	.word	0xbdf84802
   22d58:	47704800 	.word	0x47704800
   22d5c:	ffffb080 	.word	0xffffb080
   22d60:	ffffb180 	.word	0xffffb180

00022d64 <symbol_000e8bc>:
   22d64:	41f0e92d 	.word	0x41f0e92d
   22d68:	b086460c 	.word	0xb086460c
   22d6c:	21014605 	.word	0x21014605
   22d70:	0018f104 	.word	0x0018f104
   22d74:	fdbaf004 	.word	0xfdbaf004
   22d78:	f0402800 	.word	0xf0402800
   22d7c:	6b2b809f 	.word	0x6b2b809f
   22d80:	f0002b00 	.word	0xf0002b00
   22d84:	6beb80a0 	.word	0x6beb80a0
   22d88:	f0002b00 	.word	0xf0002b00
   22d8c:	4601809c 	.word	0x4601809c
   22d90:	46204606 	.word	0x46204606
   22d94:	fdaaf004 	.word	0xfdaaf004
   22d98:	f2c02800 	.word	0xf2c02800
   22d9c:	f104808f 	.word	0xf104808f
   22da0:	4631070c 	.word	0x4631070c
   22da4:	f0044638 	.word	0xf0044638
   22da8:	2800fda1 	.word	0x2800fda1
   22dac:	8086f2c0 	.word	0x8086f2c0
   22db0:	0804f105 	.word	0x0804f105
   22db4:	46204641 	.word	0x46204641
   22db8:	fd30f004 	.word	0xfd30f004
   22dbc:	da7d2800 	.word	0xda7d2800
   22dc0:	46384641 	.word	0x46384641
   22dc4:	fd2af004 	.word	0xfd2af004
   22dc8:	da772800 	.word	0xda772800
   22dcc:	f0044668 	.word	0xf0044668
   22dd0:	a803f863 	.word	0xa803f863
   22dd4:	f860f004 	.word	0xf860f004
   22dd8:	4639463a 	.word	0x4639463a
   22ddc:	f0054668 	.word	0xf0054668
   22de0:	4606f871 	.word	0x4606f871
   22de4:	4668b148 	.word	0x4668b148
   22de8:	f85ef004 	.word	0xf85ef004
   22dec:	f004a803 	.word	0xf004a803
   22df0:	4630f85b 	.word	0x4630f85b
   22df4:	e8bdb006 	.word	0xe8bdb006
   22df8:	462981f0 	.word	0x462981f0
   22dfc:	f7fe4668 	.word	0xf7fe4668
   22e00:	4606fc93 	.word	0x4606fc93
   22e04:	d1ee2800 	.word	0xd1ee2800
   22e08:	46214622 	.word	0x46214622
   22e0c:	f005a803 	.word	0xf005a803
   22e10:	4606f859 	.word	0x4606f859
   22e14:	d1e62800 	.word	0xd1e62800
   22e18:	a8034629 	.word	0xa8034629
   22e1c:	fc84f7fe 	.word	0xfc84f7fe
   22e20:	28004606 	.word	0x28004606
   22e24:	69abd1df 	.word	0x69abd1df
   22e28:	d04e2b00 	.word	0xd04e2b00
   22e2c:	f105a903 	.word	0xf105a903
   22e30:	46080210 	.word	0x46080210
   22e34:	ff12f004 	.word	0xff12f004
   22e38:	28004606 	.word	0x28004606
   22e3c:	e007d1d3 	.word	0xe007d1d3
   22e40:	4642a903 	.word	0x4642a903
   22e44:	f0044608 	.word	0xf0044608
   22e48:	4606fe49 	.word	0x4606fe49
   22e4c:	d1ca2800 	.word	0xd1ca2800
   22e50:	a8034641 	.word	0xa8034641
   22e54:	fce2f004 	.word	0xfce2f004
   22e58:	daf12800 	.word	0xdaf12800
   22e5c:	4622a903 	.word	0x4622a903
   22e60:	f0054608 	.word	0xf0054608
   22e64:	4606f82f 	.word	0x4606f82f
   22e68:	d1bc2800 	.word	0xd1bc2800
   22e6c:	a8034629 	.word	0xa8034629
   22e70:	fc5af7fe 	.word	0xfc5af7fe
   22e74:	28004606 	.word	0x28004606
   22e78:	a903d1b5 	.word	0xa903d1b5
   22e7c:	021cf105 	.word	0x021cf105
   22e80:	f0044608 	.word	0xf0044608
   22e84:	4606feeb 	.word	0x4606feeb
   22e88:	d1ac2800 	.word	0xd1ac2800
   22e8c:	a903e007 	.word	0xa903e007
   22e90:	46084642 	.word	0x46084642
   22e94:	fe22f004 	.word	0xfe22f004
   22e98:	28004606 	.word	0x28004606
   22e9c:	4641d1a3 	.word	0x4641d1a3
   22ea0:	f004a803 	.word	0xf004a803
   22ea4:	2800fcbb 	.word	0x2800fcbb
   22ea8:	a903daf1 	.word	0xa903daf1
   22eac:	f0044668 	.word	0xf0044668
   22eb0:	4e14fcb5 	.word	0x4e14fcb5
   22eb4:	bf082800 	.word	0xbf082800
   22eb8:	e7942600 	.word	0xe7942600
   22ebc:	46304e11 	.word	0x46304e11
   22ec0:	e8bdb006 	.word	0xe8bdb006
   22ec4:	4e1081f0 	.word	0x4e1081f0
   22ec8:	a903e793 	.word	0xa903e793
   22ecc:	46082203 	.word	0x46082203
   22ed0:	ffacf004 	.word	0xffacf004
   22ed4:	28004606 	.word	0x28004606
   22ed8:	e00ed185 	.word	0xe00ed185
   22edc:	a8032100 	.word	0xa8032100
   22ee0:	fd04f004 	.word	0xfd04f004
   22ee4:	d0b92800 	.word	0xd0b92800
   22ee8:	4642a903 	.word	0x4642a903
   22eec:	f0044608 	.word	0xf0044608
   22ef0:	4606feb5 	.word	0x4606feb5
   22ef4:	f47f2800 	.word	0xf47f2800
   22ef8:	9b03af76 	.word	0x9b03af76
   22efc:	dbed2b00 	.word	0xdbed2b00
   22f00:	bf00e7ac 	.word	0xbf00e7ac
   22f04:	ffffb380 	.word	0xffffb380
   22f08:	ffffb080 	.word	0xffffb080

00022f0c <symbol_0001f66>:
   22f0c:	43f0e92d 	.word	0x43f0e92d
   22f10:	b0ab7803 	.word	0xb0ab7803
   22f14:	f0002b00 	.word	0xf0002b00
   22f18:	780a80c4 	.word	0x780a80c4
   22f1c:	f040429a 	.word	0xf040429a
   22f20:	f10180c0 	.word	0xf10180c0
   22f24:	460c0788 	.word	0x460c0788
   22f28:	46394605 	.word	0x46394605
   22f2c:	f0043088 	.word	0xf0043088
   22f30:	2800fc75 	.word	0x2800fc75
   22f34:	80b5f040 	.word	0x80b5f040
   22f38:	0994f104 	.word	0x0994f104
   22f3c:	f1054649 	.word	0xf1054649
   22f40:	f0040094 	.word	0xf0040094
   22f44:	2800fc6b 	.word	0x2800fc6b
   22f48:	80abf040 	.word	0x80abf040
   22f4c:	08a0f104 	.word	0x08a0f104
   22f50:	00a0f105 	.word	0x00a0f105
   22f54:	f0044641 	.word	0xf0044641
   22f58:	4606fc61 	.word	0x4606fc61
   22f5c:	f0402800 	.word	0xf0402800
   22f60:	462580a0 	.word	0x462580a0
   22f64:	f003a802 	.word	0xf003a802
   22f68:	a805ff97 	.word	0xa805ff97
   22f6c:	ff94f003 	.word	0xff94f003
   22f70:	f003a808 	.word	0xf003a808
   22f74:	4631ff91 	.word	0x4631ff91
   22f78:	a80b227c 	.word	0xa80b227c
   22f7c:	fcbef00f 	.word	0xfcbef00f
   22f80:	1b7cf815 	.word	0x1b7cf815
   22f84:	f7fda80b 	.word	0xf7fda80b
   22f88:	f104fbd5 	.word	0xf104fbd5
   22f8c:	21010040 	.word	0x21010040
   22f90:	f0043428 	.word	0xf0043428
   22f94:	2800fcab 	.word	0x2800fcab
   22f98:	8081f040 	.word	0x8081f040
   22f9c:	2b009b17 	.word	0x2b009b17
   22fa0:	9b1ad07d 	.word	0x9b1ad07d
   22fa4:	d07a2b00 	.word	0xd07a2b00
   22fa8:	46282101 	.word	0x46282101
   22fac:	fc9ef004 	.word	0xfc9ef004
   22fb0:	f2c02800 	.word	0xf2c02800
   22fb4:	a91e8083 	.word	0xa91e8083
   22fb8:	f0044628 	.word	0xf0044628
   22fbc:	2800fc2f 	.word	0x2800fc2f
   22fc0:	4621da7c 	.word	0x4621da7c
   22fc4:	f7ffa80b 	.word	0xf7ffa80b
   22fc8:	4606fecd 	.word	0x4606fecd
   22fcc:	9b17b980 	.word	0x9b17b980
   22fd0:	d0642b00 	.word	0xd0642b00
   22fd4:	2b009b1a 	.word	0x2b009b1a
   22fd8:	e9cdd061 	.word	0xe9cdd061
   22fdc:	46230000 	.word	0x46230000
   22fe0:	a902462a 	.word	0xa902462a
   22fe4:	f7ffa80b 	.word	0xf7ffa80b
   22fe8:	4606fa6b 	.word	0x4606fa6b
   22fec:	d04c2800 	.word	0xd04c2800
   22ff0:	f003a802 	.word	0xf003a802
   22ff4:	a805ff59 	.word	0xa805ff59
   22ff8:	ff56f003 	.word	0xff56f003
   22ffc:	f003a808 	.word	0xf003a808
   23000:	9b23ff53 	.word	0x9b23ff53
   23004:	d1262b01 	.word	0xd1262b01
   23008:	b1c89828 	.word	0xb1c89828
   2300c:	b1aa9a29 	.word	0xb1aa9a29
   23010:	eb052500 	.word	0xeb052500
   23014:	eb1003c5 	.word	0xeb1003c5
   23018:	d0320483 	.word	0xd0320483
   2301c:	f0034620 	.word	0xf0034620
   23020:	f104ff43 	.word	0xf104ff43
   23024:	f003000c 	.word	0xf003000c
   23028:	f104ff3f 	.word	0xf104ff3f
   2302c:	f0030018 	.word	0xf0030018
   23030:	9a29ff3b 	.word	0x9a29ff3b
   23034:	42953501 	.word	0x42953501
   23038:	d3ea9828 	.word	0xd3ea9828
   2303c:	fb94f007 	.word	0xfb94f007
   23040:	ab0b2200 	.word	0xab0b2200
   23044:	a92a701a 	.word	0xa92a701a
   23048:	428b3301 	.word	0x428b3301
   2304c:	4630d1fa 	.word	0x4630d1fa
   23050:	e8bdb02b 	.word	0xe8bdb02b
   23054:	a80c83f0 	.word	0xa80c83f0
   23058:	ff26f003 	.word	0xff26f003
   2305c:	f003a80f 	.word	0xf003a80f
   23060:	a812ff23 	.word	0xa812ff23
   23064:	ff20f003 	.word	0xff20f003
   23068:	f003a815 	.word	0xf003a815
   2306c:	a818ff1d 	.word	0xa818ff1d
   23070:	ff1af003 	.word	0xff1af003
   23074:	f003a81b 	.word	0xf003a81b
   23078:	a81eff17 	.word	0xa81eff17
   2307c:	ff14f003 	.word	0xff14f003
   23080:	3501e7c2 	.word	0x3501e7c2
   23084:	d3c44295 	.word	0xd3c44295
   23088:	4639e7d8 	.word	0x4639e7d8
   2308c:	f004a802 	.word	0xf004a802
   23090:	b920fbc5 	.word	0xb920fbc5
   23094:	a8054649 	.word	0xa8054649
   23098:	fbc0f004 	.word	0xfbc0f004
   2309c:	4e08b130 	.word	0x4e08b130
   230a0:	4e07e7a6 	.word	0x4e07e7a6
   230a4:	b02b4630 	.word	0xb02b4630
   230a8:	83f0e8bd 	.word	0x83f0e8bd
   230ac:	a8084641 	.word	0xa8084641
   230b0:	fbb4f004 	.word	0xfbb4f004
   230b4:	28004606 	.word	0x28004606
   230b8:	e7f0d09a 	.word	0xe7f0d09a
   230bc:	e7974e01 	.word	0xe7974e01
   230c0:	ffffb080 	.word	0xffffb080
   230c4:	ffffb380 	.word	0xffffb380

000230c8 <interface_init>:
   230c8:	f44fb508 	.word	0xf44fb508
   230cc:	21007290 	.word	0x21007290
   230d0:	f00f4802 	.word	0xf00f4802
   230d4:	2000fc13 	.word	0x2000fc13
   230d8:	bf00bd08 	.word	0xbf00bd08
   230dc:	20025b60 	.word	0x20025b60

000230e0 <interface_socket_allocate>:
   230e0:	4b29b5f8 	.word	0x4b29b5f8
   230e4:	681d4606 	.word	0x681d4606
   230e8:	b1e54608 	.word	0xb1e54608
   230ec:	2c006a5c 	.word	0x2c006a5c
   230f0:	6c9cd03d 	.word	0x6c9cd03d
   230f4:	d03c2c00 	.word	0xd03c2c00
   230f8:	2c006edc 	.word	0x2c006edc
   230fc:	f8d3d03b 	.word	0xf8d3d03b
   23100:	b1791090 	.word	0xb1791090
   23104:	10b4f8d3 	.word	0x10b4f8d3
   23108:	f8d3b3b9 	.word	0xf8d3b3b9
   2310c:	b3b110d8 	.word	0xb3b110d8
   23110:	10fcf8d3 	.word	0x10fcf8d3
   23114:	f04fb3a9 	.word	0xf04fb3a9
   23118:	200c35ff 	.word	0x200c35ff
   2311c:	fabcf7fa 	.word	0xfabcf7fa
   23120:	bdf84628 	.word	0xbdf84628
   23124:	f04f2504 	.word	0xf04f2504
   23128:	f04f0c01 	.word	0xf04f0c01
   2312c:	eb0537ff 	.word	0xeb0537ff
   23130:	00a404c5 	.word	0x00a404c5
   23134:	c004f843 	.word	0xc004f843
   23138:	4611441c 	.word	0x4611441c
   2313c:	462261a7 	.word	0x462261a7
   23140:	facaf7fd 	.word	0xfacaf7fd
   23144:	61e04603 	.word	0x61e04603
   23148:	681bb158 	.word	0x681bb158
   2314c:	4798681b 	.word	0x4798681b
   23150:	6034b910 	.word	0x6034b910
   23154:	bdf84628 	.word	0xbdf84628
   23158:	f7fd69e0 	.word	0xf7fd69e0
   2315c:	2300fadd 	.word	0x2300fadd
   23160:	462061e3 	.word	0x462061e3
   23164:	21002224 	.word	0x21002224
   23168:	fbc8f00f 	.word	0xfbc8f00f
   2316c:	2501e7d3 	.word	0x2501e7d3
   23170:	2502e7d9 	.word	0x2502e7d9
   23174:	2503e7d7 	.word	0x2503e7d7
   23178:	2505e7d5 	.word	0x2505e7d5
   2317c:	2506e7d3 	.word	0x2506e7d3
   23180:	2507e7d1 	.word	0x2507e7d1
   23184:	bf00e7cf 	.word	0xbf00e7cf
   23188:	20025b60 	.word	0x20025b60

0002318c <interface_socket_free>:
   2318c:	d9002807 	.word	0xd9002807
   23190:	b5104770 	.word	0xb5104770
   23194:	eb004c07 	.word	0xeb004c07
   23198:	eb0400c0 	.word	0xeb0400c0
   2319c:	69e00480 	.word	0x69e00480
   231a0:	f7fdb108 	.word	0xf7fdb108
   231a4:	4620fab9 	.word	0x4620fab9
   231a8:	4010e8bd 	.word	0x4010e8bd
   231ac:	21002224 	.word	0x21002224
   231b0:	bba4f00f 	.word	0xbba4f00f
   231b4:	20025b60 	.word	0x20025b60

000231b8 <interface_socket_packet_handler_update>:
   231b8:	e92d2807 	.word	0xe92d2807
   231bc:	d81e43f8 	.word	0xd81e43f8
   231c0:	08c0ea4f 	.word	0x08c0ea4f
   231c4:	eb084e17 	.word	0xeb084e17
   231c8:	009b0300 	.word	0x009b0300
   231cc:	18f558f4 	.word	0x18f558f4
   231d0:	460bb1ac 	.word	0x460bb1ac
   231d4:	46114604 	.word	0x46114604
   231d8:	462a4618 	.word	0x462a4618
   231dc:	901cf8d5 	.word	0x901cf8d5
   231e0:	fa7af7fd 	.word	0xfa7af7fd
   231e4:	b1d061e8 	.word	0xb1d061e8
   231e8:	681b6803 	.word	0x681b6803
   231ec:	46074798 	.word	0x46074798
   231f0:	4648b948 	.word	0x4648b948
   231f4:	fa90f7fd 	.word	0xfa90f7fd
   231f8:	e8bd4638 	.word	0xe8bd4638
   231fc:	270583f8 	.word	0x270583f8
   23200:	e8bd4638 	.word	0xe8bd4638
   23204:	69e883f8 	.word	0x69e883f8
   23208:	fa86f7fd 	.word	0xfa86f7fd
   2320c:	0004eb08 	.word	0x0004eb08
   23210:	0680eb06 	.word	0x0680eb06
   23214:	901cf8c6 	.word	0x901cf8c6
   23218:	e8bd4638 	.word	0xe8bd4638
   2321c:	270483f8 	.word	0x270483f8
   23220:	bf00e7f4 	.word	0xbf00e7f4
   23224:	20025b60 	.word	0x20025b60

00023228 <interface_socket_wait>:
   23228:	eb00b5f0 	.word	0xeb00b5f0
   2322c:	4c0e00c0 	.word	0x4c0e00c0
   23230:	58250080 	.word	0x58250080
   23234:	4015b083 	.word	0x4015b083
   23238:	9301428d 	.word	0x9301428d
   2323c:	d0104404 	.word	0xd0104404
   23240:	b9736863 	.word	0xb9736863
   23244:	4616460f 	.word	0x4616460f
   23248:	e0064625 	.word	0xe0064625
   2324c:	b943686b 	.word	0xb943686b
   23250:	4620a901 	.word	0x4620a901
   23254:	f990f7fa 	.word	0xf990f7fa
   23258:	682bb920 	.word	0x682bb920
   2325c:	42bb4033 	.word	0x42bb4033
   23260:	2000d1f4 	.word	0x2000d1f4
   23264:	bdf0b003 	.word	0xbdf0b003
   23268:	20025b60 	.word	0x20025b60

0002326c <interface_from_internal_id_search>:
   2326c:	681a4b23 	.word	0x681a4b23
   23270:	699ab112 	.word	0x699ab112
   23274:	d0324282 	.word	0xd0324282
   23278:	b1126a5a 	.word	0xb1126a5a
   2327c:	42826bda 	.word	0x42826bda
   23280:	6c9ad02f 	.word	0x6c9ad02f
   23284:	6e1ab112 	.word	0x6e1ab112
   23288:	d02c4282 	.word	0xd02c4282
   2328c:	b11a6eda 	.word	0xb11a6eda
   23290:	2084f8d3 	.word	0x2084f8d3
   23294:	d0284282 	.word	0xd0284282
   23298:	2090f8d3 	.word	0x2090f8d3
   2329c:	f8d3b11a 	.word	0xf8d3b11a
   232a0:	428220a8 	.word	0x428220a8
   232a4:	f8d3d023 	.word	0xf8d3d023
   232a8:	b11a20b4 	.word	0xb11a20b4
   232ac:	20ccf8d3 	.word	0x20ccf8d3
   232b0:	d01e4282 	.word	0xd01e4282
   232b4:	20d8f8d3 	.word	0x20d8f8d3
   232b8:	f8d3b11a 	.word	0xf8d3b11a
   232bc:	428220f0 	.word	0x428220f0
   232c0:	f8d3d019 	.word	0xf8d3d019
   232c4:	b13a20fc 	.word	0xb13a20fc
   232c8:	3114f8d3 	.word	0x3114f8d3
   232cc:	bf144283 	.word	0xbf144283
   232d0:	30fff04f 	.word	0x30fff04f
   232d4:	47702007 	.word	0x47702007
   232d8:	30fff04f 	.word	0x30fff04f
   232dc:	20004770 	.word	0x20004770
   232e0:	20014770 	.word	0x20014770
   232e4:	20024770 	.word	0x20024770
   232e8:	20034770 	.word	0x20034770
   232ec:	20044770 	.word	0x20044770
   232f0:	20054770 	.word	0x20054770
   232f4:	20064770 	.word	0x20064770
   232f8:	bf004770 	.word	0xbf004770
   232fc:	20025b60 	.word	0x20025b60

00023300 <interface_socket_from_handle_get>:
   23300:	d8072807 	.word	0xd8072807
   23304:	00c0eb00 	.word	0x00c0eb00
   23308:	00804b03 	.word	0x00804b03
   2330c:	b10a581a 	.word	0xb10a581a
   23310:	47704418 	.word	0x47704418
   23314:	47702000 	.word	0x47702000
   23318:	20025b60 	.word	0x20025b60

0002331c <interface_socket_event_get>:
   2331c:	2807b119 	.word	0x2807b119
   23320:	2310d902 	.word	0x2310d902
   23324:	4770600b 	.word	0x4770600b
   23328:	00c0eb00 	.word	0x00c0eb00
   2332c:	00804b07 	.word	0x00804b07
   23330:	2a00581a 	.word	0x2a00581a
   23334:	581bd0f5 	.word	0x581bd0f5
   23338:	f0030c1b 	.word	0xf0030c1b
   2333c:	2a0a020a 	.word	0x2a0a020a
   23340:	f003bf14 	.word	0xf003bf14
   23344:	f003030f 	.word	0xf003030f
   23348:	e7eb030d 	.word	0xe7eb030d
   2334c:	20025b60 	.word	0x20025b60

00023350 <interface_socket_setopt>:
   23350:	b5702807 	.word	0xb5702807
   23354:	eb00d827 	.word	0xeb00d827
   23358:	4c1600c0 	.word	0x4c1600c0
   2335c:	58250080 	.word	0x58250080
   23360:	2901b30d 	.word	0x2901b30d
   23364:	2a14d119 	.word	0x2a14d119
   23368:	b183d117 	.word	0xb183d117
   2336c:	2a089a04 	.word	0x2a089a04
   23370:	f44fd10d 	.word	0xf44fd10d
   23374:	685a757a 	.word	0x685a757a
   23378:	68194e0f 	.word	0x68194e0f
   2337c:	2302fba6 	.word	0x2302fba6
   23380:	fb05099b 	.word	0xfb05099b
   23384:	44203301 	.word	0x44203301
   23388:	20006203 	.word	0x20006203
   2338c:	2016bd70 	.word	0x2016bd70
   23390:	f982f7fa 	.word	0xf982f7fa
   23394:	30fff04f 	.word	0x30fff04f
   23398:	202abd70 	.word	0x202abd70
   2339c:	f97cf7fa 	.word	0xf97cf7fa
   233a0:	30fff04f 	.word	0x30fff04f
   233a4:	2009bd70 	.word	0x2009bd70
   233a8:	f976f7fa 	.word	0xf976f7fa
   233ac:	30fff04f 	.word	0x30fff04f
   233b0:	bf00bd70 	.word	0xbf00bd70
   233b4:	20025b60 	.word	0x20025b60
   233b8:	10624dd3 	.word	0x10624dd3

000233bc <interface_socket_getopt>:
   233bc:	2807b570 	.word	0x2807b570
   233c0:	d8219d04 	.word	0xd8219d04
   233c4:	eb004c13 	.word	0xeb004c13
   233c8:	008000c0 	.word	0x008000c0
   233cc:	44045826 	.word	0x44045826
   233d0:	2901b1d6 	.word	0x2901b1d6
   233d4:	2a04d112 	.word	0x2a04d112
   233d8:	b14bd110 	.word	0xb14bd110
   233dc:	682ab145 	.word	0x682ab145
   233e0:	d1052a04 	.word	0xd1052a04
   233e4:	68612200 	.word	0x68612200
   233e8:	60194610 	.word	0x60194610
   233ec:	bd706062 	.word	0xbd706062
   233f0:	f7fa2016 	.word	0xf7fa2016
   233f4:	f04ff951 	.word	0xf04ff951
   233f8:	bd7030ff 	.word	0xbd7030ff
   233fc:	f7fa202a 	.word	0xf7fa202a
   23400:	f04ff94b 	.word	0xf04ff94b
   23404:	bd7030ff 	.word	0xbd7030ff
   23408:	f7fa2009 	.word	0xf7fa2009
   2340c:	f04ff945 	.word	0xf04ff945
   23410:	bd7030ff 	.word	0xbd7030ff
   23414:	20025b60 	.word	0x20025b60

00023418 <interface_socket_fcntl>:
   23418:	b5102807 	.word	0xb5102807
   2341c:	eb00d818 	.word	0xeb00d818
   23420:	4c1100c0 	.word	0x4c1100c0
   23424:	58e00083 	.word	0x58e00083
   23428:	2901b190 	.word	0x2901b190
   2342c:	2902d005 	.word	0x2902d005
   23430:	58e0d114 	.word	0x58e0d114
   23434:	7000f3c0 	.word	0x7000f3c0
   23438:	f012bd10 	.word	0xf012bd10
   2343c:	58e20001 	.word	0x58e20001
   23440:	2000bf1a 	.word	0x2000bf1a
   23444:	5280f042 	.word	0x5280f042
   23448:	5280f022 	.word	0x5280f022
   2344c:	bd1050e2 	.word	0xbd1050e2
   23450:	f7fa2009 	.word	0xf7fa2009
   23454:	f04ff921 	.word	0xf04ff921
   23458:	bd1030ff 	.word	0xbd1030ff
   2345c:	f7fa2016 	.word	0xf7fa2016
   23460:	f04ff91b 	.word	0xf04ff91b
   23464:	bd1030ff 	.word	0xbd1030ff
   23468:	20025b60 	.word	0x20025b60

0002346c <symbol_00026c2>:
   2346c:	4ff0e92d 	.word	0x4ff0e92d
   23470:	2100460e 	.word	0x2100460e
   23474:	b0854605 	.word	0xb0854605
   23478:	93004608 	.word	0x93004608
   2347c:	461c4617 	.word	0x461c4617
   23480:	aa034613 	.word	0xaa034613
   23484:	9038f8dd 	.word	0x9038f8dd
   23488:	f992f7fb 	.word	0xf992f7fb
   2348c:	f7f64628 	.word	0xf7f64628
   23490:	4682fd2f 	.word	0x4682fd2f
   23494:	f7f64630 	.word	0xf7f64630
   23498:	9903fd2b 	.word	0x9903fd2b
   2349c:	eb031c4b 	.word	0xeb031c4b
   234a0:	44531391 	.word	0x44531391
   234a4:	9b0f4418 	.word	0x9b0f4418
   234a8:	d8534298 	.word	0xd8534298
   234ac:	f0072001 	.word	0xf0072001
   234b0:	4682f947 	.word	0x4682f947
   234b4:	d0522800 	.word	0xd0522800
   234b8:	94009903 	.word	0x94009903
   234bc:	aa03463b 	.word	0xaa03463b
   234c0:	f976f7fb 	.word	0xf976f7fb
   234c4:	28004680 	.word	0x28004680
   234c8:	4628d13d 	.word	0x4628d13d
   234cc:	fd10f7f6 	.word	0xfd10f7f6
   234d0:	46024629 	.word	0x46024629
   234d4:	f00f4648 	.word	0xf00f4648
   234d8:	4628fa06 	.word	0x4628fa06
   234dc:	fd08f7f6 	.word	0xfd08f7f6
   234e0:	eb099b03 	.word	0xeb099b03
   234e4:	b19b0400 	.word	0xb19b0400
   234e8:	270a46d3 	.word	0x270a46d3
   234ec:	bf282b40 	.word	0xbf282b40
   234f0:	461d2340 	.word	0x461d2340
   234f4:	461a4659 	.word	0x461a4659
   234f8:	f00f4620 	.word	0xf00f4620
   234fc:	9b03f9f4 	.word	0x9b03f9f4
   23500:	1b5b442c 	.word	0x1b5b442c
   23504:	44ab7027 	.word	0x44ab7027
   23508:	93033401 	.word	0x93033401
   2350c:	d1ed2b00 	.word	0xd1ed2b00
   23510:	f7f64630 	.word	0xf7f64630
   23514:	4631fced 	.word	0x4631fced
   23518:	46204602 	.word	0x46204602
   2351c:	f9e3f00f 	.word	0xf9e3f00f
   23520:	f7f64630 	.word	0xf7f64630
   23524:	2100fce5 	.word	0x2100fce5
   23528:	18234602 	.word	0x18234602
   2352c:	330154a1 	.word	0x330154a1
   23530:	eba39a10 	.word	0xeba39a10
   23534:	46500309 	.word	0x46500309
   23538:	f0076013 	.word	0xf0076013
   2353c:	4640f915 	.word	0x4640f915
   23540:	e8bdb005 	.word	0xe8bdb005
   23544:	46508ff0 	.word	0x46508ff0
   23548:	f90ef007 	.word	0xf90ef007
   2354c:	b0054640 	.word	0xb0054640
   23550:	8ff0e8bd 	.word	0x8ff0e8bd
   23554:	f06f9b10 	.word	0xf06f9b10
   23558:	60180829 	.word	0x60180829
   2355c:	f8dfe7ef 	.word	0xf8dfe7ef
   23560:	e7ec8004 	.word	0xe7ec8004
   23564:	ffffee80 	.word	0xffffee80

00023568 <ip_recvd_packet_free_cb>:
   23568:	4604b510 	.word	0x4604b510
   2356c:	f7fa6800 	.word	0xf7fa6800
   23570:	68a0fdad 	.word	0x68a0fdad
   23574:	e8bdb118 	.word	0xe8bdb118
   23578:	f0074010 	.word	0xf0074010
   2357c:	bd10b8f5 	.word	0xbd10b8f5

00023580 <rpc_error_to_nrf_bsd_error>:
   23580:	bf9a2810 	.word	0xbf9a2810
   23584:	f8534b02 	.word	0xf8534b02
   23588:	202d0020 	.word	0x202d0020
   2358c:	bf004770 	.word	0xbf004770
   23590:	00033f58 	.word	0x00033f58

00023594 <ip_interface_request_create>:
   23594:	2500b570 	.word	0x2500b570
   23598:	ac02b082 	.word	0xac02b082
   2359c:	5d04f844 	.word	0x5d04f844
   235a0:	460d4606 	.word	0x460d4606
   235a4:	46194620 	.word	0x46194620
   235a8:	f7fa4614 	.word	0xf7fa4614
   235ac:	b960fd5d 	.word	0xb960fd5d
   235b0:	22089b01 	.word	0x22089b01
   235b4:	72987258 	.word	0x72987258
   235b8:	461872d8 	.word	0x461872d8
   235bc:	4406ea44 	.word	0x4406ea44
   235c0:	611d60dc 	.word	0x611d60dc
   235c4:	b002721a 	.word	0xb002721a
   235c8:	9b01bd70 	.word	0x9b01bd70
   235cc:	b0024618 	.word	0xb0024618
   235d0:	bf00bd70 	.word	0xbf00bd70

000235d4 <ip_interface_request_send>:
   235d4:	460cb570 	.word	0x460cb570
   235d8:	46114605 	.word	0x46114605
   235dc:	461e4620 	.word	0x461e4620
   235e0:	fd56f7fa 	.word	0xfd56f7fa
   235e4:	bd70b900 	.word	0xbd70b900
   235e8:	b1086820 	.word	0xb1086820
   235ec:	fd6ef7fa 	.word	0xfd6ef7fa
   235f0:	f7fa4620 	.word	0xf7fa4620
   235f4:	602efd63 	.word	0x602efd63
   235f8:	bd702023 	.word	0xbd702023

000235fc <ip_interface_wait>:
   235fc:	4605b538 	.word	0x4605b538
   23600:	fe12f7ff 	.word	0xfe12f7ff
   23604:	b1084604 	.word	0xb1084604
   23608:	bd384620 	.word	0xbd384620
   2360c:	f7ff4628 	.word	0xf7ff4628
   23610:	2800fe77 	.word	0x2800fe77
   23614:	6844d0f8 	.word	0x6844d0f8
   23618:	d0f52c00 	.word	0xd0f52c00
   2361c:	60432300 	.word	0x60432300
   23620:	bd384620 	.word	0xbd384620

00023624 <ip_interface_init>:
   23624:	2300b538 	.word	0x2300b538
   23628:	4c084d07 	.word	0x4c084d07
   2362c:	22204619 	.word	0x22204619
   23630:	602b4807 	.word	0x602b4807
   23634:	f00f6023 	.word	0xf00f6023
   23638:	f7faf961 	.word	0xf7faf961
   2363c:	3000fd0f 	.word	0x3000fd0f
   23640:	2001bf18 	.word	0x2001bf18
   23644:	bd384240 	.word	0xbd384240
   23648:	20020310 	.word	0x20020310
   2364c:	2002030c 	.word	0x2002030c
   23650:	20020318 	.word	0x20020318

00023654 <ip_interface_open>:
   23654:	41f0e92d 	.word	0x41f0e92d
   23658:	20004606 	.word	0x20004606
   2365c:	0308f026 	.word	0x0308f026
   23660:	2b02b082 	.word	0x2b02b082
   23664:	4617460c 	.word	0x4617460c
   23668:	d0029000 	.word	0xd0029000
   2366c:	f0402e05 	.word	0xf0402e05
   23670:	1e638084 	.word	0x1e638084
   23674:	d85c2b02 	.word	0xd85c2b02
   23678:	d1542f00 	.word	0xd1542f00
   2367c:	d0672c01 	.word	0xd0672c01
   23680:	bf182c03 	.word	0xbf182c03
   23684:	4a482702 	.word	0x4a482702
   23688:	46684621 	.word	0x46684621
   2368c:	fd28f7ff 	.word	0xfd28f7ff
   23690:	46809b00 	.word	0x46809b00
   23694:	d0592b00 	.word	0xd0592b00
   23698:	a8022100 	.word	0xa8022100
   2369c:	1d04f840 	.word	0x1d04f840
   236a0:	6403e9c3 	.word	0x6403e9c3
   236a4:	f7fa615f 	.word	0xf7fa615f
   236a8:	2800fcdf 	.word	0x2800fcdf
   236ac:	f247d14b 	.word	0xf247d14b
   236b0:	f04f0201 	.word	0xf04f0201
   236b4:	210833ff 	.word	0x210833ff
   236b8:	ea429d01 	.word	0xea429d01
   236bc:	60ea4208 	.word	0x60ea4208
   236c0:	72a87268 	.word	0x72a87268
   236c4:	722972e8 	.word	0x722972e8
   236c8:	746b742b 	.word	0x746b742b
   236cc:	74eb74ab 	.word	0x74eb74ab
   236d0:	2e0568ab 	.word	0x2e0568ab
   236d4:	030cf103 	.word	0x030cf103
   236d8:	d00360ab 	.word	0xd00360ab
   236dc:	bf142e0a 	.word	0xbf142e0a
   236e0:	26022601 	.word	0x26022601
   236e4:	61ef616e 	.word	0x61ef616e
   236e8:	f24761ac 	.word	0xf24761ac
   236ec:	46280101 	.word	0x46280101
   236f0:	f7fa9f00 	.word	0xf7fa9f00
   236f4:	4606fccd 	.word	0x4606fccd
   236f8:	6828b360 	.word	0x6828b360
   236fc:	f7fab108 	.word	0xf7fab108
   23700:	4628fce5 	.word	0x4628fce5
   23704:	fcdaf7fa 	.word	0xfcdaf7fa
   23708:	25232301 	.word	0x25232301
   2370c:	4640603b 	.word	0x4640603b
   23710:	fd3cf7ff 	.word	0xfd3cf7ff
   23714:	f7f94628 	.word	0xf7f94628
   23718:	f04fffbf 	.word	0xf04fffbf
   2371c:	464038ff 	.word	0x464038ff
   23720:	e8bdb002 	.word	0xe8bdb002
   23724:	2c0181f0 	.word	0x2c0181f0
   23728:	2c02d009 	.word	0x2c02d009
   2372c:	2f02d109 	.word	0x2f02d109
   23730:	2016d0a9 	.word	0x2016d0a9
   23734:	ffb0f7f9 	.word	0xffb0f7f9
   23738:	38fff04f 	.word	0x38fff04f
   2373c:	2f01e7ef 	.word	0x2f01e7ef
   23740:	2702d1f7 	.word	0x2702d1f7
   23744:	9d01e79f 	.word	0x9d01e79f
   23748:	d1c12d00 	.word	0xd1c12d00
   2374c:	e7de250c 	.word	0xe7de250c
   23750:	e7984627 	.word	0xe7984627
   23754:	33fff04f 	.word	0x33fff04f
   23758:	72fff64f 	.word	0x72fff64f
   2375c:	46402102 	.word	0x46402102
   23760:	fd62f7ff 	.word	0xfd62f7ff
   23764:	28004605 	.word	0x28004605
   23768:	4640d1d1 	.word	0x4640d1d1
   2376c:	fdc8f7ff 	.word	0xfdc8f7ff
   23770:	6845b148 	.word	0x6845b148
   23774:	6046b13d 	.word	0x6046b13d
   23778:	202fe7c9 	.word	0x202fe7c9
   2377c:	ff8cf7f9 	.word	0xff8cf7f9
   23780:	38fff04f 	.word	0x38fff04f
   23784:	3c02e7cb 	.word	0x3c02e7cb
   23788:	d8c82c01 	.word	0xd8c82c01
   2378c:	9b004640 	.word	0x9b004640
   23790:	f442681a 	.word	0xf442681a
   23794:	601a3200 	.word	0x601a3200
   23798:	f442681a 	.word	0xf442681a
   2379c:	601a1280 	.word	0x601a1280
   237a0:	e8bdb002 	.word	0xe8bdb002
   237a4:	bf0081f0 	.word	0xbf0081f0
   237a8:	00023569 	.word	0x00023569

000237ac <ip_interface_close>:
   237ac:	41f0e92d 	.word	0x41f0e92d
   237b0:	4606b082 	.word	0x4606b082
   237b4:	fda4f7ff 	.word	0xfda4f7ff
   237b8:	d0632800 	.word	0xd0632800
   237bc:	21004604 	.word	0x21004604
   237c0:	6827a802 	.word	0x6827a802
   237c4:	1d04f840 	.word	0x1d04f840
   237c8:	8018f8d4 	.word	0x8018f8d4
   237cc:	fc4cf7fa 	.word	0xfc4cf7fa
   237d0:	d13a2800 	.word	0xd13a2800
   237d4:	0309f247 	.word	0x0309f247
   237d8:	9d012208 	.word	0x9d012208
   237dc:	4306ea43 	.word	0x4306ea43
   237e0:	f8c560eb 	.word	0xf8c560eb
   237e4:	72688010 	.word	0x72688010
   237e8:	72e872a8 	.word	0x72e872a8
   237ec:	6823722a 	.word	0x6823722a
   237f0:	0109f247 	.word	0x0109f247
   237f4:	041b0c1b 	.word	0x041b0c1b
   237f8:	030df043 	.word	0x030df043
   237fc:	68236023 	.word	0x68236023
   23800:	f4234628 	.word	0xf4234628
   23804:	60233300 	.word	0x60233300
   23808:	f4236823 	.word	0xf4236823
   2380c:	60231380 	.word	0x60231380
   23810:	fc3ef7fa 	.word	0xfc3ef7fa
   23814:	f04fbb40 	.word	0xf04fbb40
   23818:	f64f33ff 	.word	0xf64f33ff
   2381c:	210e72ff 	.word	0x210e72ff
   23820:	f7ff4630 	.word	0xf7ff4630
   23824:	4604fd01 	.word	0x4604fd01
   23828:	4c17b1a0 	.word	0x4c17b1a0
   2382c:	0026f854 	.word	0x0026f854
   23830:	f7fab120 	.word	0xf7fab120
   23834:	2300fc43 	.word	0x2300fc43
   23838:	3026f844 	.word	0x3026f844
   2383c:	f7ff4630 	.word	0xf7ff4630
   23840:	2000fca5 	.word	0x2000fca5
   23844:	e8bdb002 	.word	0xe8bdb002
   23848:	9d0181f0 	.word	0x9d0181f0
   2384c:	2d00200c 	.word	0x2d00200c
   23850:	e012d1cd 	.word	0xe012d1cd
   23854:	f7ff4630 	.word	0xf7ff4630
   23858:	2800fd53 	.word	0x2800fd53
   2385c:	6843d0e5 	.word	0x6843d0e5
   23860:	d0e22b00 	.word	0xd0e22b00
   23864:	e7e06044 	.word	0xe7e06044
   23868:	b1086828 	.word	0xb1086828
   2386c:	fc2ef7fa 	.word	0xfc2ef7fa
   23870:	f7fa4628 	.word	0xf7fa4628
   23874:	2023fc23 	.word	0x2023fc23
   23878:	f7f96027 	.word	0xf7f96027
   2387c:	f04fff0d 	.word	0xf04fff0d
   23880:	e7df30ff 	.word	0xe7df30ff
   23884:	e7f82009 	.word	0xe7f82009
   23888:	20020318 	.word	0x20020318

0002388c <ip_interface_sendto>:
   2388c:	4ff0e92d 	.word	0x4ff0e92d
   23890:	b0892500 	.word	0xb0892500
   23894:	46149103 	.word	0x46149103
   23898:	95079301 	.word	0x95079301
   2389c:	9e124607 	.word	0x9e124607
   238a0:	fd2ef7ff 	.word	0xfd2ef7ff
   238a4:	f0002800 	.word	0xf0002800
   238a8:	f5b48124 	.word	0xf5b48124
   238ac:	f3005f80 	.word	0xf3005f80
   238b0:	69038118 	.word	0x69038118
   238b4:	2b014605 	.word	0x2b014605
   238b8:	80d1f000 	.word	0x80d1f000
   238bc:	0390682a 	.word	0x0390682a
   238c0:	682ad423 	.word	0x682ad423
   238c4:	d4060091 	.word	0xd4060091
   238c8:	f0002b01 	.word	0xf0002b01
   238cc:	682b80ed 	.word	0x682b80ed
   238d0:	f140031a 	.word	0xf140031a
   238d4:	682b8102 	.word	0x682b8102
   238d8:	f140031b 	.word	0xf140031b
   238dc:	68a88106 	.word	0x68a88106
   238e0:	9218f8df 	.word	0x9218f8df
   238e4:	f0402800 	.word	0xf0402800
   238e8:	682b8096 	.word	0x682b8096
   238ec:	f1400118 	.word	0xf1400118
   238f0:	682b8082 	.word	0x682b8082
   238f4:	6300f023 	.word	0x6300f023
   238f8:	f859602b 	.word	0xf859602b
   238fc:	28000027 	.word	0x28000027
   23900:	4620d17c 	.word	0x4620d17c
   23904:	e8bdb009 	.word	0xe8bdb009
   23908:	f2478ff0 	.word	0xf2478ff0
   2390c:	f04f0806 	.word	0xf04f0806
   23910:	043b0a0c 	.word	0x043b0a0c
   23914:	91e4f8df 	.word	0x91e4f8df
   23918:	46219304 	.word	0x46219304
   2391c:	f7faa807 	.word	0xf7faa807
   23920:	2804fba3 	.word	0x2804fba3
   23924:	2800d0f9 	.word	0x2800d0f9
   23928:	9b07d171 	.word	0x9b07d171
   2392c:	a008f883 	.word	0xa008f883
   23930:	72987258 	.word	0x72987258
   23934:	b33e72d8 	.word	0xb33e72d8
   23938:	687168ea 	.word	0x687168ea
   2393c:	d10a428a 	.word	0xd10a428a
   23940:	f1032a02 	.word	0xf1032a02
   23944:	7831001c 	.word	0x7831001c
   23948:	8090f000 	.word	0x8090f000
   2394c:	d1022a0a 	.word	0xd1022a0a
   23950:	f0002924 	.word	0xf0002924
   23954:	681880af 	.word	0x681880af
   23958:	f7fab110 	.word	0xf7fab110
   2395c:	9b07fbb7 	.word	0x9b07fbb7
   23960:	f7fa4618 	.word	0xf7fa4618
   23964:	2016fbab 	.word	0x2016fbab
   23968:	031a682b 	.word	0x031a682b
   2396c:	682bd453 	.word	0x682bd453
   23970:	2b0db29b 	.word	0x2b0db29b
   23974:	682bd0b6 	.word	0x682bd0b6
   23978:	1300f423 	.word	0x1300f423
   2397c:	682b602b 	.word	0x682b602b
   23980:	3300f443 	.word	0x3300f443
   23984:	e7ad602b 	.word	0xe7ad602b
   23988:	99014642 	.word	0x99014642
   2398c:	69a96159 	.word	0x69a96159
   23990:	61199804 	.word	0x61199804
   23994:	43029903 	.word	0x43029903
   23998:	605c60da 	.word	0x605c60da
   2399c:	6818b119 	.word	0x6818b119
   239a0:	f00e4622 	.word	0xf00e4622
   239a4:	682bffa0 	.word	0x682bffa0
   239a8:	93054641 	.word	0x93054641
   239ac:	f423682b 	.word	0xf423682b
   239b0:	602b3300 	.word	0x602b3300
   239b4:	f443682b 	.word	0xf443682b
   239b8:	602b1300 	.word	0x602b1300
   239bc:	46189b07 	.word	0x46189b07
   239c0:	f7fa9302 	.word	0xf7fa9302
   239c4:	9b02fb65 	.word	0x9b02fb65
   239c8:	bb584683 	.word	0xbb584683
   239cc:	3200f44f 	.word	0x3200f44f
   239d0:	33fff04f 	.word	0x33fff04f
   239d4:	46384611 	.word	0x46384611
   239d8:	fc26f7ff 	.word	0xfc26f7ff
   239dc:	682bb370 	.word	0x682bb370
   239e0:	d4370319 	.word	0xd4370319
   239e4:	d1bf280c 	.word	0xd1bf280c
   239e8:	0027f859 	.word	0x0027f859
   239ec:	d0942800 	.word	0xd0942800
   239f0:	fb64f7fa 	.word	0xfb64f7fa
   239f4:	f859e791 	.word	0xf859e791
   239f8:	69840027 	.word	0x69840027
   239fc:	fb5ef7fa 	.word	0xfb5ef7fa
   23a00:	46202300 	.word	0x46202300
   23a04:	3027f849 	.word	0x3027f849
   23a08:	e8bdb009 	.word	0xe8bdb009
   23a0c:	682b8ff0 	.word	0x682b8ff0
   23a10:	031a200c 	.word	0x031a200c
   23a14:	f7f9d5ab 	.word	0xf7f9d5ab
   23a18:	f04ffe3f 	.word	0xf04ffe3f
   23a1c:	f85934ff 	.word	0xf85934ff
   23a20:	e76c0027 	.word	0xe76c0027
   23a24:	469b6818 	.word	0x469b6818
   23a28:	f7fab108 	.word	0xf7fab108
   23a2c:	4658fb4f 	.word	0x4658fb4f
   23a30:	fb44f7fa 	.word	0xfb44f7fa
   23a34:	20239b05 	.word	0x20239b05
   23a38:	e795602b 	.word	0xe795602b
   23a3c:	f7ff4638 	.word	0xf7ff4638
   23a40:	4603fc5f 	.word	0x4603fc5f
   23a44:	6840b1f0 	.word	0x6840b1f0
   23a48:	f8c3b1e0 	.word	0xf8c3b1e0
   23a4c:	682bb004 	.word	0x682bb004
   23a50:	d5c70319 	.word	0xd5c70319
   23a54:	682b68a8 	.word	0x682b68a8
   23a58:	d588031e 	.word	0xd588031e
   23a5c:	2e00e742 	.word	0x2e00e742
   23a60:	af2cf43f 	.word	0xaf2cf43f
   23a64:	f8df2016 	.word	0xf8df2016
   23a68:	e7d49094 	.word	0xe7d49094
   23a6c:	f47f2910 	.word	0xf47f2910
   23a70:	2204af72 	.word	0x2204af72
   23a74:	835a8931 	.word	0x835a8931
   23a78:	f1068319 	.word	0xf1068319
   23a7c:	f00e010c 	.word	0xf00e010c
   23a80:	e01eff32 	.word	0xe01eff32
   23a84:	031b682b 	.word	0x031b682b
   23a88:	af2ff53f 	.word	0xaf2ff53f
   23a8c:	b29b682b 	.word	0xb29b682b
   23a90:	f43f2b0d 	.word	0xf43f2b0d
   23a94:	682baf2a 	.word	0x682baf2a
   23a98:	1300f423 	.word	0x1300f423
   23a9c:	682b602b 	.word	0x682b602b
   23aa0:	3300f443 	.word	0x3300f443
   23aa4:	e720602b 	.word	0xe720602b
   23aa8:	b29b682b 	.word	0xb29b682b
   23aac:	f47f2b05 	.word	0xf47f2b05
   23ab0:	e70caf12 	.word	0xe70caf12
   23ab4:	89312210 	.word	0x89312210
   23ab8:	8319835a 	.word	0x8319835a
   23abc:	f00e18b1 	.word	0xf00e18b1
   23ac0:	f247ff12 	.word	0xf247ff12
   23ac4:	9b070207 	.word	0x9b070207
   23ac8:	68994690 	.word	0x68994690
   23acc:	31048b58 	.word	0x31048b58
   23ad0:	98014401 	.word	0x98014401
   23ad4:	61586099 	.word	0x61586099
   23ad8:	2023e759 	.word	0x2023e759
   23adc:	901cf8df 	.word	0x901cf8df
   23ae0:	2028e799 	.word	0x2028e799
   23ae4:	9014f8df 	.word	0x9014f8df
   23ae8:	2039e795 	.word	0x2039e795
   23aec:	900cf8df 	.word	0x900cf8df
   23af0:	2009e791 	.word	0x2009e791
   23af4:	9004f8df 	.word	0x9004f8df
   23af8:	bf00e78d 	.word	0xbf00e78d
   23afc:	20020318 	.word	0x20020318

00023b00 <ip_interface_recvfrom>:
   23b00:	4ff0e92d 	.word	0x4ff0e92d
   23b04:	2a00b085 	.word	0x2a00b085
   23b08:	8110f000 	.word	0x8110f000
   23b0c:	4699468a 	.word	0x4699468a
   23b10:	46164607 	.word	0x46164607
   23b14:	fbf4f7ff 	.word	0xfbf4f7ff
   23b18:	28004604 	.word	0x28004604
   23b1c:	810df000 	.word	0x810df000
   23b20:	02d96803 	.word	0x02d96803
   23b24:	f019d565 	.word	0xf019d565
   23b28:	bf180f02 	.word	0xbf180f02
   23b2c:	0800f04f 	.word	0x0800f04f
   23b30:	3bfff04f 	.word	0x3bfff04f
   23b34:	6803bf08 	.word	0x6803bf08
   23b38:	0510f009 	.word	0x0510f009
   23b3c:	f083bf04 	.word	0xf083bf04
   23b40:	f3c85880 	.word	0xf3c85880
   23b44:	68237800 	.word	0x68237800
   23b48:	d56d03da 	.word	0xd56d03da
   23b4c:	69e06823 	.word	0x69e06823
   23b50:	3380f423 	.word	0x3380f423
   23b54:	68036023 	.word	0x68036023
   23b58:	479868db 	.word	0x479868db
   23b5c:	3ffff1b0 	.word	0x3ffff1b0
   23b60:	f0004683 	.word	0xf0004683
   23b64:	42868081 	.word	0x42868081
   23b68:	6923dd03 	.word	0x6923dd03
   23b6c:	f0002b01 	.word	0xf0002b01
   23b70:	250080a7 	.word	0x250080a7
   23b74:	9b0f69e0 	.word	0x9b0f69e0
   23b78:	681bb103 	.word	0x681bb103
   23b7c:	e9cd9a0e 	.word	0xe9cd9a0e
   23b80:	e9cda600 	.word	0xe9cda600
   23b84:	68032302 	.word	0x68032302
   23b88:	689b464a 	.word	0x689b464a
   23b8c:	47984669 	.word	0x47984669
   23b90:	69e04683 	.word	0x69e04683
   23b94:	3ffff1bb 	.word	0x3ffff1bb
   23b98:	bf186803 	.word	0xbf186803
   23b9c:	68db2601 	.word	0x68db2601
   23ba0:	2600bf0a 	.word	0x2600bf0a
   23ba4:	0800f04f 	.word	0x0800f04f
   23ba8:	0823f04f 	.word	0x0823f04f
   23bac:	30014798 	.word	0x30014798
   23bb0:	2d00d135 	.word	0x2d00d135
   23bb4:	80b6f000 	.word	0x80b6f000
   23bb8:	f0002e00 	.word	0xf0002e00
   23bbc:	682380a6 	.word	0x682380a6
   23bc0:	d5060319 	.word	0xd5060319
   23bc4:	b29b6823 	.word	0xb29b6823
   23bc8:	d0022b0d 	.word	0xd0022b0d
   23bcc:	2b016923 	.word	0x2b016923
   23bd0:	6823d025 	.word	0x6823d025
   23bd4:	4f80f013 	.word	0x4f80f013
   23bd8:	f0406823 	.word	0xf0406823
   23bdc:	031a80b1 	.word	0x031a80b1
   23be0:	f1b8d475 	.word	0xf1b8d475
   23be4:	f0400f00 	.word	0xf0400f00
   23be8:	4658808a 	.word	0x4658808a
   23bec:	e8bdb005 	.word	0xe8bdb005
   23bf0:	68038ff0 	.word	0x68038ff0
   23bf4:	2b06b29b 	.word	0x2b06b29b
   23bf8:	6803d073 	.word	0x6803d073
   23bfc:	2b07b29b 	.word	0x2b07b29b
   23c00:	f04fbf0c 	.word	0xf04fbf0c
   23c04:	f04f0809 	.word	0xf04f0809
   23c08:	69e00839 	.word	0x69e00839
   23c0c:	68db6803 	.word	0x68db6803
   23c10:	f1b04798 	.word	0xf1b04798
   23c14:	46833fff 	.word	0x46833fff
   23c18:	f04fd0db 	.word	0xf04fd0db
   23c1c:	68233bff 	.word	0x68233bff
   23c20:	3380f443 	.word	0x3380f443
   23c24:	e7dc6023 	.word	0xe7dc6023
   23c28:	0f00f1b8 	.word	0x0f00f1b8
   23c2c:	8081f000 	.word	0x8081f000
   23c30:	3280f44f 	.word	0x3280f44f
   23c34:	46116a23 	.word	0x46116a23
   23c38:	bf082b00 	.word	0xbf082b00
   23c3c:	33fff04f 	.word	0x33fff04f
   23c40:	f7ff4638 	.word	0xf7ff4638
   23c44:	4680faf1 	.word	0x4680faf1
   23c48:	6823b358 	.word	0x6823b358
   23c4c:	031b69e0 	.word	0x031b69e0
   23c50:	6823d521 	.word	0x6823d521
   23c54:	2b0db29b 	.word	0x2b0db29b
   23c58:	6925d01d 	.word	0x6925d01d
   23c5c:	0501f1a5 	.word	0x0501f1a5
   23c60:	f585fab5 	.word	0xf585fab5
   23c64:	e786096d 	.word	0xe786096d
   23c68:	03186823 	.word	0x03186823
   23c6c:	6823d5dc 	.word	0x6823d5dc
   23c70:	2b0db29b 	.word	0x2b0db29b
   23c74:	6923d0d8 	.word	0x6923d0d8
   23c78:	2b0169e0 	.word	0x2b0169e0
   23c7c:	f04fd034 	.word	0xf04fd034
   23c80:	68230839 	.word	0x68230839
   23c84:	041b0c1b 	.word	0x041b0c1b
   23c88:	030df043 	.word	0x030df043
   23c8c:	68236023 	.word	0x68236023
   23c90:	1380f423 	.word	0x1380f423
   23c94:	68036023 	.word	0x68036023
   23c98:	479868db 	.word	0x479868db
   23c9c:	d1be3001 	.word	0xd1be3001
   23ca0:	4638e797 	.word	0x4638e797
   23ca4:	fb2cf7ff 	.word	0xfb2cf7ff
   23ca8:	f8d0b138 	.word	0xf8d0b138
   23cac:	f1b88004 	.word	0xf1b88004
   23cb0:	d0020f00 	.word	0xd0020f00
   23cb4:	60432300 	.word	0x60432300
   23cb8:	f04fe7c7 	.word	0xf04fe7c7
   23cbc:	e7420801 	.word	0xe7420801
   23cc0:	6823b11d 	.word	0x6823b11d
   23cc4:	d5b300db 	.word	0xd5b300db
   23cc8:	69e0e753 	.word	0x69e0e753
   23ccc:	6823e753 	.word	0x6823e753
   23cd0:	2b0db29b 	.word	0x2b0db29b
   23cd4:	68a3d185 	.word	0x68a3d185
   23cd8:	d0822b00 	.word	0xd0822b00
   23cdc:	8008f8d4 	.word	0x8008f8d4
   23ce0:	f04fe77f 	.word	0xf04fe77f
   23ce4:	e7900809 	.word	0xe7900809
   23ce8:	68db6803 	.word	0x68db6803
   23cec:	30014798 	.word	0x30014798
   23cf0:	f04fd00b 	.word	0xf04fd00b
   23cf4:	68230823 	.word	0x68230823
   23cf8:	3380f443 	.word	0x3380f443
   23cfc:	46406023 	.word	0x46406023
   23d00:	fccaf7f9 	.word	0xfccaf7f9
   23d04:	3bfff04f 	.word	0x3bfff04f
   23d08:	6823e76f 	.word	0x6823e76f
   23d0c:	0b00f04f 	.word	0x0b00f04f
   23d10:	041b0c1b 	.word	0x041b0c1b
   23d14:	030df043 	.word	0x030df043
   23d18:	68236023 	.word	0x68236023
   23d1c:	1380f423 	.word	0x1380f423
   23d20:	e7626023 	.word	0xe7626023
   23d24:	f47f2e00 	.word	0xf47f2e00
   23d28:	e752af4a 	.word	0xe752af4a
   23d2c:	0816f04f 	.word	0x0816f04f
   23d30:	f04fe7e5 	.word	0xf04fe7e5
   23d34:	69e00823 	.word	0x69e00823
   23d38:	f04fe7ad 	.word	0xf04fe7ad
   23d3c:	e7de0809 	.word	0xe7de0809
   23d40:	4380f023 	.word	0x4380f023
   23d44:	68236023 	.word	0x68236023
   23d48:	0869f04f 	.word	0x0869f04f
   23d4c:	041b0c1b 	.word	0x041b0c1b
   23d50:	030df043 	.word	0x030df043
   23d54:	e7d26023 	.word	0xe7d26023

00023d58 <ip_interface_connect>:
   23d58:	41f0e92d 	.word	0x41f0e92d
   23d5c:	2900b082 	.word	0x2900b082
   23d60:	2a00d044 	.word	0x2a00d044
   23d64:	4606d042 	.word	0x4606d042
   23d68:	f7ff460f 	.word	0xf7ff460f
   23d6c:	4605fac9 	.word	0x4605fac9
   23d70:	f0002800 	.word	0xf0002800
   23d74:	68038096 	.word	0x68038096
   23d78:	2b02b29b 	.word	0x2b02b29b
   23d7c:	6803d004 	.word	0x6803d004
   23d80:	2b04b29b 	.word	0x2b04b29b
   23d84:	808df040 	.word	0x808df040
   23d88:	f0116829 	.word	0xf0116829
   23d8c:	f0405100 	.word	0xf0405100
   23d90:	a8028084 	.word	0xa8028084
   23d94:	1d04f840 	.word	0x1d04f840
   23d98:	8018f8d5 	.word	0x8018f8d5
   23d9c:	f964f7fa 	.word	0xf964f7fa
   23da0:	2108bb70 	.word	0x2108bb70
   23da4:	9c010433 	.word	0x9c010433
   23da8:	42e0f443 	.word	0x42e0f443
   23dac:	0202f042 	.word	0x0202f042
   23db0:	f8c460e2 	.word	0xf8c460e2
   23db4:	72608010 	.word	0x72608010
   23db8:	72e072a0 	.word	0x72e072a0
   23dbc:	f4437221 	.word	0xf4437221
   23dc0:	f04343e0 	.word	0xf04343e0
   23dc4:	60e30302 	.word	0x60e30302
   23dc8:	69aa68a3 	.word	0x69aa68a3
   23dcc:	61223304 	.word	0x61223304
   23dd0:	68eb60a3 	.word	0x68eb60a3
   23dd4:	4293687a 	.word	0x4293687a
   23dd8:	2b02d108 	.word	0x2b02d108
   23ddc:	0018f104 	.word	0x0018f104
   23de0:	d03a783a 	.word	0xd03a783a
   23de4:	d1012b0a 	.word	0xd1012b0a
   23de8:	d00e2a24 	.word	0xd00e2a24
   23dec:	46202416 	.word	0x46202416
   23df0:	fc52f7f9 	.word	0xfc52f7f9
   23df4:	34fff04f 	.word	0x34fff04f
   23df8:	b0024620 	.word	0xb0024620
   23dfc:	81f0e8bd 	.word	0x81f0e8bd
   23e00:	2c009c01 	.word	0x2c009c01
   23e04:	0433d04f 	.word	0x0433d04f
   23e08:	2210e7d9 	.word	0x2210e7d9
   23e0c:	18b9893b 	.word	0x18b9893b
   23e10:	82a382e2 	.word	0x82a382e2
   23e14:	fd67f00e 	.word	0xfd67f00e
   23e18:	8ae268a3 	.word	0x8ae268a3
   23e1c:	0102f247 	.word	0x0102f247
   23e20:	60a34413 	.word	0x60a34413
   23e24:	682b682f 	.word	0x682b682f
   23e28:	f0434620 	.word	0xf0434620
   23e2c:	602b5300 	.word	0x602b5300
   23e30:	f92ef7fa 	.word	0xf92ef7fa
   23e34:	682bb9e0 	.word	0x682bb9e0
   23e38:	5880f013 	.word	0x5880f013
   23e3c:	f04fd12f 	.word	0xf04fd12f
   23e40:	f64f33ff 	.word	0xf64f33ff
   23e44:	210572ff 	.word	0x210572ff
   23e48:	f7ff4630 	.word	0xf7ff4630
   23e4c:	4604f9ed 	.word	0x4604f9ed
   23e50:	2c73b1c0 	.word	0x2c73b1c0
   23e54:	602fd0cb 	.word	0x602fd0cb
   23e58:	2a10e7c9 	.word	0x2a10e7c9
   23e5c:	2204d1c6 	.word	0x2204d1c6
   23e60:	f107893b 	.word	0xf107893b
   23e64:	82e2010c 	.word	0x82e2010c
   23e68:	f00e82a3 	.word	0xf00e82a3
   23e6c:	e7d3fd3c 	.word	0xe7d3fd3c
   23e70:	b1086820 	.word	0xb1086820
   23e74:	f92af7fa 	.word	0xf92af7fa
   23e78:	f7fa4620 	.word	0xf7fa4620
   23e7c:	2423f91f 	.word	0x2423f91f
   23e80:	e7b4602f 	.word	0xe7b4602f
   23e84:	f7ff4630 	.word	0xf7ff4630
   23e88:	2800fa3b 	.word	0x2800fa3b
   23e8c:	6844d0b4 	.word	0x6844d0b4
   23e90:	d0b12c00 	.word	0xd0b12c00
   23e94:	8004f8c0 	.word	0x8004f8c0
   23e98:	2472e7db 	.word	0x2472e7db
   23e9c:	2473e7a7 	.word	0x2473e7a7
   23ea0:	2409e7a5 	.word	0x2409e7a5
   23ea4:	240ce7a3 	.word	0x240ce7a3
   23ea8:	bf00e7a1 	.word	0xbf00e7a1

00023eac <ip_interface_bind>:
   23eac:	41f0e92d 	.word	0x41f0e92d
   23eb0:	b389b082 	.word	0xb389b082
   23eb4:	4607b382 	.word	0x4607b382
   23eb8:	f7ff460e 	.word	0xf7ff460e
   23ebc:	4605fa21 	.word	0x4605fa21
   23ec0:	d07b2800 	.word	0xd07b2800
   23ec4:	b29b6803 	.word	0xb29b6803
   23ec8:	d1772b02 	.word	0xd1772b02
   23ecc:	a8022100 	.word	0xa8022100
   23ed0:	1d04f840 	.word	0x1d04f840
   23ed4:	8018f8d5 	.word	0x8018f8d5
   23ed8:	f8c6f7fa 	.word	0xf8c6f7fa
   23edc:	f247bb30 	.word	0xf247bb30
   23ee0:	22080305 	.word	0x22080305
   23ee4:	ea439c01 	.word	0xea439c01
   23ee8:	60e34307 	.word	0x60e34307
   23eec:	8010f8c4 	.word	0x8010f8c4
   23ef0:	72a07260 	.word	0x72a07260
   23ef4:	722272e0 	.word	0x722272e0
   23ef8:	330468a3 	.word	0x330468a3
   23efc:	68eb60a3 	.word	0x68eb60a3
   23f00:	42936872 	.word	0x42936872
   23f04:	2b02d108 	.word	0x2b02d108
   23f08:	0018f104 	.word	0x0018f104
   23f0c:	d03c7832 	.word	0xd03c7832
   23f10:	d1012b0a 	.word	0xd1012b0a
   23f14:	d00e2a24 	.word	0xd00e2a24
   23f18:	46202416 	.word	0x46202416
   23f1c:	fbbcf7f9 	.word	0xfbbcf7f9
   23f20:	34fff04f 	.word	0x34fff04f
   23f24:	b0024620 	.word	0xb0024620
   23f28:	81f0e8bd 	.word	0x81f0e8bd
   23f2c:	2c009c01 	.word	0x2c009c01
   23f30:	240cd1e2 	.word	0x240cd1e2
   23f34:	2210e7f1 	.word	0x2210e7f1
   23f38:	18b18933 	.word	0x18b18933
   23f3c:	82a382e2 	.word	0x82a382e2
   23f40:	fcd1f00e 	.word	0xfcd1f00e
   23f44:	8ae268a3 	.word	0x8ae268a3
   23f48:	0105f247 	.word	0x0105f247
   23f4c:	60a34413 	.word	0x60a34413
   23f50:	4620682b 	.word	0x4620682b
   23f54:	041b0c1b 	.word	0x041b0c1b
   23f58:	0303f043 	.word	0x0303f043
   23f5c:	682e602b 	.word	0x682e602b
   23f60:	f896f7fa 	.word	0xf896f7fa
   23f64:	b9d84680 	.word	0xb9d84680
   23f68:	33fff04f 	.word	0x33fff04f
   23f6c:	72fff64f 	.word	0x72fff64f
   23f70:	46382104 	.word	0x46382104
   23f74:	f958f7ff 	.word	0xf958f7ff
   23f78:	b3084604 	.word	0xb3084604
   23f7c:	0c1b682b 	.word	0x0c1b682b
   23f80:	f043041b 	.word	0xf043041b
   23f84:	602b0302 	.word	0x602b0302
   23f88:	2a10e7c7 	.word	0x2a10e7c7
   23f8c:	2204d1c4 	.word	0x2204d1c4
   23f90:	f1068933 	.word	0xf1068933
   23f94:	82e2010c 	.word	0x82e2010c
   23f98:	f00e82a3 	.word	0xf00e82a3
   23f9c:	e7d1fca4 	.word	0xe7d1fca4
   23fa0:	b1086820 	.word	0xb1086820
   23fa4:	f892f7fa 	.word	0xf892f7fa
   23fa8:	04360c36 	.word	0x04360c36
   23fac:	f0464620 	.word	0xf0464620
   23fb0:	f7fa0602 	.word	0xf7fa0602
   23fb4:	2423f883 	.word	0x2423f883
   23fb8:	e7ae602e 	.word	0xe7ae602e
   23fbc:	e7ac2409 	.word	0xe7ac2409
   23fc0:	f7ff4638 	.word	0xf7ff4638
   23fc4:	2800f99d 	.word	0x2800f99d
   23fc8:	6844d0ac 	.word	0x6844d0ac
   23fcc:	d0a92c00 	.word	0xd0a92c00
   23fd0:	8004f8c0 	.word	0x8004f8c0
   23fd4:	bf00e7d2 	.word	0xbf00e7d2

00023fd8 <ip_interface_listen>:
   23fd8:	41f0e92d 	.word	0x41f0e92d
   23fdc:	4606b082 	.word	0x4606b082
   23fe0:	f98ef7ff 	.word	0xf98ef7ff
   23fe4:	d0672800 	.word	0xd0672800
   23fe8:	46056803 	.word	0x46056803
   23fec:	2b04b29b 	.word	0x2b04b29b
   23ff0:	2100d162 	.word	0x2100d162
   23ff4:	46304a32 	.word	0x46304a32
   23ff8:	f8def7ff 	.word	0xf8def7ff
   23ffc:	28004601 	.word	0x28004601
   24000:	a802d15c 	.word	0xa802d15c
   24004:	1d04f840 	.word	0x1d04f840
   24008:	f7fa69af 	.word	0xf7fa69af
   2400c:	bba8f82d 	.word	0xbba8f82d
   24010:	0308f247 	.word	0x0308f247
   24014:	9c012208 	.word	0x9c012208
   24018:	4306ea43 	.word	0x4306ea43
   2401c:	612760e3 	.word	0x612760e3
   24020:	72a07260 	.word	0x72a07260
   24024:	722272e0 	.word	0x722272e0
   24028:	f24768a3 	.word	0xf24768a3
   2402c:	33040108 	.word	0x33040108
   24030:	682b60a3 	.word	0x682b60a3
   24034:	0c1b4620 	.word	0x0c1b4620
   24038:	f043041b 	.word	0xf043041b
   2403c:	602b0306 	.word	0x602b0306
   24040:	f7fa682f 	.word	0xf7fa682f
   24044:	4680f825 	.word	0x4680f825
   24048:	f04fb9e8 	.word	0xf04fb9e8
   2404c:	f64f33ff 	.word	0xf64f33ff
   24050:	210772ff 	.word	0x210772ff
   24054:	f7ff4630 	.word	0xf7ff4630
   24058:	4604f8e7 	.word	0x4604f8e7
   2405c:	682bb308 	.word	0x682bb308
   24060:	041b0c1b 	.word	0x041b0c1b
   24064:	0304f043 	.word	0x0304f043
   24068:	4620602b 	.word	0x4620602b
   2406c:	fb14f7f9 	.word	0xfb14f7f9
   24070:	34fff04f 	.word	0x34fff04f
   24074:	b0024620 	.word	0xb0024620
   24078:	81f0e8bd 	.word	0x81f0e8bd
   2407c:	2c009c01 	.word	0x2c009c01
   24080:	240cd1d2 	.word	0x240cd1d2
   24084:	6820e7f1 	.word	0x6820e7f1
   24088:	f7fab108 	.word	0xf7fab108
   2408c:	0c3ff81f 	.word	0x0c3ff81f
   24090:	4620043f 	.word	0x4620043f
   24094:	0704f047 	.word	0x0704f047
   24098:	f810f7fa 	.word	0xf810f7fa
   2409c:	602f2423 	.word	0x602f2423
   240a0:	4630e7e3 	.word	0x4630e7e3
   240a4:	f92cf7ff 	.word	0xf92cf7ff
   240a8:	d0e32800 	.word	0xd0e32800
   240ac:	2c006844 	.word	0x2c006844
   240b0:	f8c0d0e0 	.word	0xf8c0d0e0
   240b4:	e7d28004 	.word	0xe7d28004
   240b8:	e7d62409 	.word	0xe7d62409
   240bc:	e7d42423 	.word	0xe7d42423
   240c0:	00023569 	.word	0x00023569

000240c4 <ip_interface_accept>:
   240c4:	4ff0e92d 	.word	0x4ff0e92d
   240c8:	b0852500 	.word	0xb0852500
   240cc:	4690460f 	.word	0x4690460f
   240d0:	46069502 	.word	0x46069502
   240d4:	f914f7ff 	.word	0xf914f7ff
   240d8:	28004604 	.word	0x28004604
   240dc:	811cf000 	.word	0x811cf000
   240e0:	b29b6803 	.word	0xb29b6803
   240e4:	d10a2b07 	.word	0xd10a2b07
   240e8:	68056803 	.word	0x68056803
   240ec:	d41600db 	.word	0xd41600db
   240f0:	3580f415 	.word	0x3580f415
   240f4:	6805d019 	.word	0x6805d019
   240f8:	3580f415 	.word	0x3580f415
   240fc:	f04fd124 	.word	0xf04fd124
   24100:	9b020909 	.word	0x9b020909
   24104:	4628b113 	.word	0x4628b113
   24108:	f840f7ff 	.word	0xf840f7ff
   2410c:	f04f4648 	.word	0xf04f4648
   24110:	f7f939ff 	.word	0xf7f939ff
   24114:	4648fac1 	.word	0x4648fac1
   24118:	e8bdb005 	.word	0xe8bdb005
   2411c:	f4158ff0 	.word	0xf4158ff0
   24120:	d16d3580 	.word	0xd16d3580
   24124:	0923f04f 	.word	0x0923f04f
   24128:	f44fe7eb 	.word	0xf44fe7eb
   2412c:	f04f3280 	.word	0xf04f3280
   24130:	461133ff 	.word	0x461133ff
   24134:	f7ff4630 	.word	0xf7ff4630
   24138:	4681f877 	.word	0x4681f877
   2413c:	d07e2800 	.word	0xd07e2800
   24140:	f4156825 	.word	0xf4156825
   24144:	d0dc3580 	.word	0xd0dc3580
   24148:	30fff04f 	.word	0x30fff04f
   2414c:	e9cd2300 	.word	0xe9cd2300
   24150:	4a750300 	.word	0x4a750300
   24154:	a8026921 	.word	0xa8026921
   24158:	ffc2f7fe 	.word	0xffc2f7fe
   2415c:	46059b02 	.word	0x46059b02
   24160:	f0002b00 	.word	0xf0002b00
   24164:	210080dd 	.word	0x210080dd
   24168:	a8046962 	.word	0xa8046962
   2416c:	68e2615a 	.word	0x68e2615a
   24170:	1d04f840 	.word	0x1d04f840
   24174:	692260da 	.word	0x692260da
   24178:	f8d4611a 	.word	0xf8d4611a
   2417c:	f7f99018 	.word	0xf7f99018
   24180:	2800ff73 	.word	0x2800ff73
   24184:	f247d143 	.word	0xf247d143
   24188:	2108030c 	.word	0x2108030c
   2418c:	b00cf8dd 	.word	0xb00cf8dd
   24190:	4306ea43 	.word	0x4306ea43
   24194:	300cf8cb 	.word	0x300cf8cb
   24198:	9010f8cb 	.word	0x9010f8cb
   2419c:	0009f88b 	.word	0x0009f88b
   241a0:	000af88b 	.word	0x000af88b
   241a4:	000bf88b 	.word	0x000bf88b
   241a8:	1008f88b 	.word	0x1008f88b
   241ac:	f2476823 	.word	0xf2476823
   241b0:	0c1b010c 	.word	0x0c1b010c
   241b4:	f043041b 	.word	0xf043041b
   241b8:	60230308 	.word	0x60230308
   241bc:	f8d44658 	.word	0xf8d44658
   241c0:	f7f99000 	.word	0xf7f99000
   241c4:	4682ff65 	.word	0x4682ff65
   241c8:	6822bb48 	.word	0x6822bb48
   241cc:	f04f9900 	.word	0xf04f9900
   241d0:	400a33ff 	.word	0x400a33ff
   241d4:	21096022 	.word	0x21096022
   241d8:	72fff64f 	.word	0x72fff64f
   241dc:	f7ff4630 	.word	0xf7ff4630
   241e0:	4681f823 	.word	0x4681f823
   241e4:	f0002800 	.word	0xf0002800
   241e8:	68238085 	.word	0x68238085
   241ec:	431a9a01 	.word	0x431a9a01
   241f0:	68236022 	.word	0x68236022
   241f4:	041b0c1b 	.word	0x041b0c1b
   241f8:	0307f043 	.word	0x0307f043
   241fc:	e7806023 	.word	0xe7806023
   24200:	5280f06f 	.word	0x5280f06f
   24204:	5380f04f 	.word	0x5380f04f
   24208:	2300e9cd 	.word	0x2300e9cd
   2420c:	f8dde7a1 	.word	0xf8dde7a1
   24210:	f04fb00c 	.word	0xf04fb00c
   24214:	f1bb090c 	.word	0xf1bb090c
   24218:	d1c70f00 	.word	0xd1c70f00
   2421c:	f8dbe771 	.word	0xf8dbe771
   24220:	b1080000 	.word	0xb1080000
   24224:	ff52f7f9 	.word	0xff52f7f9
   24228:	4919ea4f 	.word	0x4919ea4f
   2422c:	ea4f4658 	.word	0xea4f4658
   24230:	f7f94909 	.word	0xf7f94909
   24234:	f049ff43 	.word	0xf049ff43
   24238:	60230307 	.word	0x60230307
   2423c:	4630e772 	.word	0x4630e772
   24240:	f85ef7ff 	.word	0xf85ef7ff
   24244:	f8d0b130 	.word	0xf8d0b130
   24248:	f1b99004 	.word	0xf1b99004
   2424c:	d0010f00 	.word	0xd0010f00
   24250:	e7756045 	.word	0xe7756045
   24254:	03d96823 	.word	0x03d96823
   24258:	af76f53f 	.word	0xaf76f53f
   2425c:	99024d33 	.word	0x99024d33
   24260:	3026f855 	.word	0x3026f855
   24264:	618b699b 	.word	0x618b699b
   24268:	68cbb147 	.word	0x68cbb147
   2426c:	d0242b0a 	.word	0xd0242b0a
   24270:	d1032b02 	.word	0xd1032b02
   24274:	2000f8d8 	.word	0x2000f8d8
   24278:	d0322a10 	.word	0xd0322a10
   2427c:	482c680a 	.word	0x482c680a
   24280:	f0424002 	.word	0xf0424002
   24284:	600a0205 	.word	0x600a0205
   24288:	68119a02 	.word	0x68119a02
   2428c:	3100f441 	.word	0x3100f441
   24290:	68116011 	.word	0x68116011
   24294:	1180f441 	.word	0x1180f441
   24298:	68236011 	.word	0x68236011
   2429c:	f0434003 	.word	0xf0434003
   242a0:	60230307 	.word	0x60230307
   242a4:	0026f855 	.word	0x0026f855
   242a8:	ff08f7f9 	.word	0xff08f7f9
   242ac:	46482300 	.word	0x46482300
   242b0:	3026f845 	.word	0x3026f845
   242b4:	e8bdb005 	.word	0xe8bdb005
   242b8:	f8d88ff0 	.word	0xf8d88ff0
   242bc:	2a242000 	.word	0x2a242000
   242c0:	703ad1dc 	.word	0x703ad1dc
   242c4:	607b2210 	.word	0x607b2210
   242c8:	3026f855 	.word	0x3026f855
   242cc:	0010f107 	.word	0x0010f107
   242d0:	813b8b9b 	.word	0x813b8b9b
   242d4:	1026f855 	.word	0x1026f855
   242d8:	f00e3120 	.word	0xf00e3120
   242dc:	9902fb04 	.word	0x9902fb04
   242e0:	703ae7cc 	.word	0x703ae7cc
   242e4:	f855607b 	.word	0xf855607b
   242e8:	f1073026 	.word	0xf1073026
   242ec:	8b9b000c 	.word	0x8b9b000c
   242f0:	e7ee2204 	.word	0xe7ee2204
   242f4:	f7ff4630 	.word	0xf7ff4630
   242f8:	b138f803 	.word	0xb138f803
   242fc:	9004f8d0 	.word	0x9004f8d0
   24300:	0f00f1b9 	.word	0x0f00f1b9
   24304:	f8c0d002 	.word	0xf8c0d002
   24308:	e76ea004 	.word	0xe76ea004
   2430c:	9a016823 	.word	0x9a016823
   24310:	431346a9 	.word	0x431346a9
   24314:	e7a16023 	.word	0xe7a16023
   24318:	f04f4605 	.word	0xf04f4605
   2431c:	e6f00909 	.word	0xe6f00909
   24320:	090cf04f 	.word	0x090cf04f
   24324:	bf00e6f2 	.word	0xbf00e6f2
   24328:	00023569 	.word	0x00023569
   2432c:	20020318 	.word	0x20020318
   24330:	ffff0000 	.word	0xffff0000

00024334 <ip_interface_setopt>:
   24334:	41f0e92d 	.word	0x41f0e92d
   24338:	b0842901 	.word	0xb0842901
   2433c:	809cf040 	.word	0x809cf040
   24340:	4690460e 	.word	0x4690460e
   24344:	4607461d 	.word	0x4607461d
   24348:	ffdaf7fe 	.word	0xffdaf7fe
   2434c:	28004604 	.word	0x28004604
   24350:	80a5f000 	.word	0x80a5f000
   24354:	0f19f1b8 	.word	0x0f19f1b8
   24358:	2d00d16e 	.word	0x2d00d16e
   2435c:	8092f000 	.word	0x8092f000
   24360:	f7f54628 	.word	0xf7f54628
   24364:	9b0afdc5 	.word	0x9b0afdc5
   24368:	f0404298 	.word	0xf0404298
   2436c:	6823808b 	.word	0x6823808b
   24370:	2b02b29b 	.word	0x2b02b29b
   24374:	4629d173 	.word	0x4629d173
   24378:	f00768e0 	.word	0xf00768e0
   2437c:	9002feb9 	.word	0x9002feb9
   24380:	bf083001 	.word	0xbf083001
   24384:	d04e2516 	.word	0xd04e2516
   24388:	025b6823 	.word	0x025b6823
   2438c:	6823d44a 	.word	0x6823d44a
   24390:	0300f413 	.word	0x0300f413
   24394:	6826d146 	.word	0x6826d146
   24398:	a8046822 	.word	0xa8046822
   2439c:	0280f442 	.word	0x0280f442
   243a0:	21046022 	.word	0x21046022
   243a4:	3d04f840 	.word	0x3d04f840
   243a8:	8018f8d4 	.word	0x8018f8d4
   243ac:	fe5cf7f9 	.word	0xfe5cf7f9
   243b0:	d14e2800 	.word	0xd14e2800
   243b4:	0203f247 	.word	0x0203f247
   243b8:	21082300 	.word	0x21082300
   243bc:	ea429d03 	.word	0xea429d03
   243c0:	60ea4207 	.word	0x60ea4207
   243c4:	8010f8c5 	.word	0x8010f8c5
   243c8:	726b7229 	.word	0x726b7229
   243cc:	72eb72ab 	.word	0x72eb72ab
   243d0:	0c08f04f 	.word	0x0c08f04f
   243d4:	20102300 	.word	0x20102300
   243d8:	68aa2130 	.word	0x68aa2130
   243dc:	4462756b 	.word	0x4462756b
   243e0:	75ab60aa 	.word	0x75ab60aa
   243e4:	76ab75eb 	.word	0x76ab75eb
   243e8:	f88576eb 	.word	0xf88576eb
   243ec:	7628c014 	.word	0x7628c014
   243f0:	22047669 	.word	0x22047669
   243f4:	010ceb0d 	.word	0x010ceb0d
   243f8:	f00e6828 	.word	0xf00e6828
   243fc:	f247fa74 	.word	0xf247fa74
   24400:	46280103 	.word	0x46280103
   24404:	fe44f7f9 	.word	0xfe44f7f9
   24408:	bb504680 	.word	0xbb504680
   2440c:	0200f44f 	.word	0x0200f44f
   24410:	33fff04f 	.word	0x33fff04f
   24414:	46384611 	.word	0x46384611
   24418:	ff06f7fe 	.word	0xff06f7fe
   2441c:	b3984605 	.word	0xb3984605
   24420:	e0006026 	.word	0xe0006026
   24424:	46282523 	.word	0x46282523
   24428:	f936f7f9 	.word	0xf936f7f9
   2442c:	35fff04f 	.word	0x35fff04f
   24430:	b0044628 	.word	0xb0044628
   24434:	81f0e8bd 	.word	0x81f0e8bd
   24438:	46429b0a 	.word	0x46429b0a
   2443c:	46319300 	.word	0x46319300
   24440:	4638462b 	.word	0x4638462b
   24444:	ff84f7fe 	.word	0xff84f7fe
   24448:	46284605 	.word	0x46284605
   2444c:	e8bdb004 	.word	0xe8bdb004
   24450:	9d0381f0 	.word	0x9d0381f0
   24454:	d1bb2d00 	.word	0xd1bb2d00
   24458:	250c6026 	.word	0x250c6026
   2445c:	2509e7e3 	.word	0x2509e7e3
   24460:	6828e7e1 	.word	0x6828e7e1
   24464:	f7f9b108 	.word	0xf7f9b108
   24468:	4628fe31 	.word	0x4628fe31
   2446c:	fe26f7f9 	.word	0xfe26f7f9
   24470:	60262523 	.word	0x60262523
   24474:	e7d66026 	.word	0xe7d66026
   24478:	f7f9202a 	.word	0xf7f9202a
   2447c:	f04ff90d 	.word	0xf04ff90d
   24480:	e7d535ff 	.word	0xe7d535ff
   24484:	e7ce250e 	.word	0xe7ce250e
   24488:	f7fe4638 	.word	0xf7fe4638
   2448c:	b120ff39 	.word	0xb120ff39
   24490:	b1156845 	.word	0xb1156845
   24494:	8004f8c0 	.word	0x8004f8c0
   24498:	6026e7c2 	.word	0x6026e7c2
   2449c:	2009e7c8 	.word	0x2009e7c8
   244a0:	f8faf7f9 	.word	0xf8faf7f9
   244a4:	35fff04f 	.word	0x35fff04f
   244a8:	bf00e7c2 	.word	0xbf00e7c2

000244ac <ip_interface_getopt>:
   244ac:	bf86f7fe 	.word	0xbf86f7fe

000244b0 <ip_interface_getaddrinfo>:
   244b0:	4ff0e92d 	.word	0x4ff0e92d
   244b4:	0c00f04f 	.word	0x0c00f04f
   244b8:	4e722401 	.word	0x4e722401
   244bc:	a1d0f8df 	.word	0xa1d0f8df
   244c0:	91d0f8df 	.word	0x91d0f8df
   244c4:	4607b085 	.word	0x4607b085
   244c8:	93014615 	.word	0x93014615
   244cc:	c000f8a6 	.word	0xc000f8a6
   244d0:	4000f8ca 	.word	0x4000f8ca
   244d4:	4000f8c9 	.word	0x4000f8c9
   244d8:	4608b171 	.word	0x4608b171
   244dc:	4661220a 	.word	0x4661220a
   244e0:	f9e8f00c 	.word	0xf9e8f00c
   244e4:	73fef64f 	.word	0x73fef64f
   244e8:	429a1e42 	.word	0x429a1e42
   244ec:	8083f200 	.word	0x8083f200
   244f0:	ea430203 	.word	0xea430203
   244f4:	80302020 	.word	0x80302020
   244f8:	819cf8df 	.word	0x819cf8df
   244fc:	3000f8d8 	.word	0x3000f8d8
   24500:	d1742b00 	.word	0xd1742b00
   24504:	60134a60 	.word	0x60134a60
   24508:	60134a60 	.word	0x60134a60
   2450c:	d0622f00 	.word	0xd0622f00
   24510:	f7f54638 	.word	0xf7f54638
   24514:	4683fced 	.word	0x4683fced
   24518:	69eab125 	.word	0x69eab125
   2451c:	6851b112 	.word	0x6851b112
   24520:	d06c2966 	.word	0xd06c2966
   24524:	32fff04f 	.word	0x32fff04f
   24528:	ae042100 	.word	0xae042100
   2452c:	1d04f846 	.word	0x1d04f846
   24530:	46594630 	.word	0x46594630
   24534:	f7f99200 	.word	0xf7f99200
   24538:	9a00fd97 	.word	0x9a00fd97
   2453c:	d14c2800 	.word	0xd14c2800
   24540:	010df247 	.word	0x010df247
   24544:	0c08f04f 	.word	0x0c08f04f
   24548:	ea419c03 	.word	0xea419c03
   2454c:	60e14102 	.word	0x60e14102
   24550:	72606122 	.word	0x72606122
   24554:	72e072a0 	.word	0x72e072a0
   24558:	c008f884 	.word	0xc008f884
   2455c:	d0762d00 	.word	0xd0762d00
   24560:	f022686a 	.word	0xf022686a
   24564:	29020108 	.word	0x29020108
   24568:	2a05d05c 	.word	0x2a05d05c
   2456c:	68a9d178 	.word	0x68a9d178
   24570:	f8c92902 	.word	0xf8c92902
   24574:	d0611000 	.word	0xd0611000
   24578:	68ea61a2 	.word	0x68ea61a2
   2457c:	68aa6222 	.word	0x68aa6222
   24580:	682a61e2 	.word	0x682a61e2
   24584:	68a26162 	.word	0x68a26162
   24588:	60a23210 	.word	0x60a23210
   2458c:	6820b12f 	.word	0x6820b12f
   24590:	465ab118 	.word	0x465ab118
   24594:	f00e4639 	.word	0xf00e4639
   24598:	2301f9a6 	.word	0x2301f9a6
   2459c:	010df247 	.word	0x010df247
   245a0:	f8c84620 	.word	0xf8c84620
   245a4:	f7f93000 	.word	0xf7f93000
   245a8:	2800fd73 	.word	0x2800fd73
   245ac:	f04fd156 	.word	0xf04fd156
   245b0:	930333ff 	.word	0x930333ff
   245b4:	46204631 	.word	0x46204631
   245b8:	ffdef7f8 	.word	0xffdef7f8
   245bc:	3000f8d8 	.word	0x3000f8d8
   245c0:	d0f72b01 	.word	0xd0f72b01
   245c4:	68184b31 	.word	0x68184b31
   245c8:	d13b2800 	.word	0xd13b2800
   245cc:	9a014b2e 	.word	0x9a014b2e
   245d0:	6013681b 	.word	0x6013681b
   245d4:	46bbe00c 	.word	0x46bbe00c
   245d8:	9c03e79e 	.word	0x9c03e79e
   245dc:	d1bd2c00 	.word	0xd1bd2c00
   245e0:	2300200c 	.word	0x2300200c
   245e4:	3000f8c8 	.word	0x3000f8c8
   245e8:	e8bdb005 	.word	0xe8bdb005
   245ec:	20738ff0 	.word	0x20738ff0
   245f0:	e8bdb005 	.word	0xe8bdb005
   245f4:	20168ff0 	.word	0x20168ff0
   245f8:	e8bdb005 	.word	0xe8bdb005
   245fc:	68918ff0 	.word	0x68918ff0
   24600:	7f00f5b1 	.word	0x7f00f5b1
   24604:	f240d18e 	.word	0xf240d18e
   24608:	68d02102 	.word	0x68d02102
   2460c:	d1894288 	.word	0xd1894288
   24610:	29006991 	.word	0x29006991
   24614:	6868d086 	.word	0x6868d086
   24618:	fd6af007 	.word	0xfd6af007
   2461c:	d0811c43 	.word	0xd0811c43
   24620:	e7814602 	.word	0xe7814602
   24624:	290268a9 	.word	0x290268a9
   24628:	1000f8c9 	.word	0x1000f8c9
   2462c:	2a05d006 	.word	0x2a05d006
   24630:	2a0ad0a2 	.word	0x2a0ad0a2
   24634:	2201bf14 	.word	0x2201bf14
   24638:	e79d2202 	.word	0xe79d2202
   2463c:	f8ca2102 	.word	0xf8ca2102
   24640:	e7f41000 	.word	0xe7f41000
   24644:	68184b11 	.word	0x68184b11
   24648:	d0d12800 	.word	0xd0d12800
   2464c:	4629e7c9 	.word	0x4629e7c9
   24650:	f1042210 	.word	0xf1042210
   24654:	f00e0014 	.word	0xf00e0014
   24658:	e794f951 	.word	0xe794f951
   2465c:	e7c02023 	.word	0xe7c02023
   24660:	f7f9202f 	.word	0xf7f9202f
   24664:	68a2f819 	.word	0x68a2f819
   24668:	60a23210 	.word	0x60a23210
   2466c:	f04fb917 	.word	0xf04fb917
   24670:	e7b630ff 	.word	0xe7b630ff
   24674:	28006820 	.word	0x28006820
   24678:	465ad0f9 	.word	0x465ad0f9
   2467c:	f00e4639 	.word	0xf00e4639
   24680:	e7f4f932 	.word	0xe7f4f932
   24684:	20025b0a 	.word	0x20025b0a
   24688:	20020310 	.word	0x20020310
   2468c:	20020308 	.word	0x20020308
   24690:	20020300 	.word	0x20020300
   24694:	20020304 	.word	0x20020304
   24698:	2002030c 	.word	0x2002030c

0002469c <ip_interface_freeaddrinfo>:
   2469c:	4c0bb538 	.word	0x4c0bb538
   246a0:	2b026823 	.word	0x2b026823
   246a4:	bd38d000 	.word	0xbd38d000
   246a8:	4605b130 	.word	0x4605b130
   246ac:	f0066940 	.word	0xf0066940
   246b0:	4628f85b 	.word	0x4628f85b
   246b4:	f858f006 	.word	0xf858f006
   246b8:	4a052300 	.word	0x4a052300
   246bc:	60234905 	.word	0x60234905
   246c0:	68086013 	.word	0x68086013
   246c4:	4038e8bd 	.word	0x4038e8bd
   246c8:	bd00f7f9 	.word	0xbd00f7f9
   246cc:	2002030c 	.word	0x2002030c
   246d0:	20020308 	.word	0x20020308
   246d4:	20020314 	.word	0x20020314

000246d8 <rpc_ip_event_handler>:
   246d8:	4ff0e92d 	.word	0x4ff0e92d
   246dc:	4310f401 	.word	0x4310f401
   246e0:	4f10f5b3 	.word	0x4f10f5b3
   246e4:	b0894605 	.word	0xb0894605
   246e8:	68c0460e 	.word	0x68c0460e
   246ec:	0c04d05e 	.word	0x0c04d05e
   246f0:	f7fe4620 	.word	0xf7fe4620
   246f4:	f248fe05 	.word	0xf248fe05
   246f8:	429e030d 	.word	0x429e030d
   246fc:	46a04607 	.word	0x46a04607
   24700:	2f00d041 	.word	0x2f00d041
   24704:	4640d04e 	.word	0x4640d04e
   24708:	462a4633 	.word	0x462a4633
   2470c:	f7fc4639 	.word	0xf7fc4639
   24710:	2800fbff 	.word	0x2800fbff
   24714:	f248d042 	.word	0xf248d042
   24718:	429e0307 	.word	0x429e0307
   2471c:	f248d961 	.word	0xf248d961
   24720:	429e030c 	.word	0x429e030c
   24724:	816bf000 	.word	0x816bf000
   24728:	8106f240 	.word	0x8106f240
   2472c:	0302f249 	.word	0x0302f249
   24730:	f000429e 	.word	0xf000429e
   24734:	f249808c 	.word	0xf249808c
   24738:	429e0303 	.word	0x429e0303
   2473c:	8180f000 	.word	0x8180f000
   24740:	0301f249 	.word	0x0301f249
   24744:	d12d429e 	.word	0xd12d429e
   24748:	f414683c 	.word	0xf414683c
   2474c:	f0001480 	.word	0xf0001480
   24750:	68ab81c3 	.word	0x68ab81c3
   24754:	f2002b04 	.word	0xf2002b04
   24758:	240081eb 	.word	0x240081eb
   2475c:	68294626 	.word	0x68294626
   24760:	e9cd686a 	.word	0xe9cd686a
   24764:	e9cd6406 	.word	0xe9cd6406
   24768:	69f81204 	.word	0x69f81204
   2476c:	6803a904 	.word	0x6803a904
   24770:	4798685b 	.word	0x4798685b
   24774:	f0003001 	.word	0xf0003001
   24778:	683b81cc 	.word	0x683b81cc
   2477c:	f4432000 	.word	0xf4432000
   24780:	603b3380 	.word	0x603b3380
   24784:	f8dfe00b 	.word	0xf8dfe00b
   24788:	682f9344 	.word	0x682f9344
   2478c:	3000f8d9 	.word	0x3000f8d9
   24790:	d0152b01 	.word	0xd0152b01
   24794:	4638b117 	.word	0x4638b117
   24798:	fc98f7f9 	.word	0xfc98f7f9
   2479c:	b0092000 	.word	0xb0092000
   247a0:	8ff0e8bd 	.word	0x8ff0e8bd
   247a4:	28006828 	.word	0x28006828
   247a8:	e7f7d1f6 	.word	0xe7f7d1f6
   247ac:	fd5ef7fe 	.word	0xfd5ef7fe
   247b0:	f7fe4680 	.word	0xf7fe4680
   247b4:	4607fda5 	.word	0x4607fda5
   247b8:	2f004644 	.word	0x2f004644
   247bc:	e7f1d1a3 	.word	0xe7f1d1a3
   247c0:	2b00696b 	.word	0x2b00696b
   247c4:	2b10d048 	.word	0x2b10d048
   247c8:	4ababf96 	.word	0x4ababf96
   247cc:	f852212d 	.word	0xf852212d
   247d0:	23021023 	.word	0x23021023
   247d4:	60114ab8 	.word	0x60114ab8
   247d8:	3000f8c9 	.word	0x3000f8c9
   247dc:	d1da2f00 	.word	0xd1da2f00
   247e0:	f248e7dc 	.word	0xf248e7dc
   247e4:	429e0306 	.word	0x429e0306
   247e8:	80e6f080 	.word	0x80e6f080
   247ec:	0302f248 	.word	0x0302f248
   247f0:	f000429e 	.word	0xf000429e
   247f4:	d91880c8 	.word	0xd91880c8
   247f8:	0303f248 	.word	0x0303f248
   247fc:	f000429e 	.word	0xf000429e
   24800:	f2488112 	.word	0xf2488112
   24804:	429e0305 	.word	0x429e0305
   24808:	683bd1cc 	.word	0x683bd1cc
   2480c:	2b03b29b 	.word	0x2b03b29b
   24810:	696bd1c4 	.word	0x696bd1c4
   24814:	f0002b00 	.word	0xf0002b00
   24818:	2b10817e 	.word	0x2b10817e
   2481c:	813bf200 	.word	0x813bf200
   24820:	f8524aa4 	.word	0xf8524aa4
   24824:	607b3023 	.word	0x607b3023
   24828:	f248e7b8 	.word	0xf248e7b8
   2482c:	429e0301 	.word	0x429e0301
   24830:	683bd1b8 	.word	0x683bd1b8
   24834:	d1b12b01 	.word	0xd1b12b01
   24838:	28006968 	.word	0x28006968
   2483c:	8173f000 	.word	0x8173f000
   24840:	f2002810 	.word	0xf2002810
   24844:	4b9b8128 	.word	0x4b9b8128
   24848:	3020f853 	.word	0x3020f853
   2484c:	683be7eb 	.word	0x683be7eb
   24850:	2b07b29b 	.word	0x2b07b29b
   24854:	e790d1a2 	.word	0xe790d1a2
   24858:	601f4b98 	.word	0x601f4b98
   2485c:	016369ac 	.word	0x016369ac
   24860:	93034618 	.word	0x93034618
   24864:	ff62f005 	.word	0xff62f005
   24868:	28009002 	.word	0x28009002
   2486c:	8103f000 	.word	0x8103f000
   24870:	192800e5 	.word	0x192800e5
   24874:	f0050080 	.word	0xf0050080
   24878:	2800ff59 	.word	0x2800ff59
   2487c:	810df000 	.word	0x810df000
   24880:	d0782c00 	.word	0xd0782c00
   24884:	0210f105 	.word	0x0210f105
   24888:	93011883 	.word	0x93011883
   2488c:	24049b02 	.word	0x24049b02
   24890:	a23cf8df 	.word	0xa23cf8df
   24894:	b23cf8df 	.word	0xb23cf8df
   24898:	0810f100 	.word	0x0810f100
   2489c:	0620f103 	.word	0x0620f103
   248a0:	220ae01d 	.word	0x220ae01d
   248a4:	2c0cf848 	.word	0x2c0cf848
   248a8:	0224f04f 	.word	0x0224f04f
   248ac:	f8084640 	.word	0xf8084640
   248b0:	f8282c10 	.word	0xf8282c10
   248b4:	f8563c08 	.word	0xf8563c08
   248b8:	f00e2c10 	.word	0xf00e2c10
   248bc:	f856f814 	.word	0xf856f814
   248c0:	f1083c10 	.word	0xf1083c10
   248c4:	441c0808 	.word	0x441c0808
   248c8:	f846193b 	.word	0xf846193b
   248cc:	9b013c08 	.word	0x9b013c08
   248d0:	6c04f846 	.word	0x6c04f846
   248d4:	442c4598 	.word	0x442c4598
   248d8:	0620f106 	.word	0x0620f106
   248dc:	593bd045 	.word	0x593bd045
   248e0:	f846193a 	.word	0xf846193a
   248e4:	68533c20 	.word	0x68533c20
   248e8:	1000f8da 	.word	0x1000f8da
   248ec:	bf142b02 	.word	0xbf142b02
   248f0:	200a2002 	.word	0x200a2002
   248f4:	3000f8db 	.word	0x3000f8db
   248f8:	0107e946 	.word	0x0107e946
   248fc:	3c14f846 	.word	0x3c14f846
   24900:	f1a88a10 	.word	0xf1a88a10
   24904:	f8460310 	.word	0xf8460310
   24908:	8a550c10 	.word	0x8a550c10
   2490c:	3c0cf846 	.word	0x3c0cf846
   24910:	34144b6b 	.word	0x34144b6b
   24914:	eb072804 	.word	0xeb072804
   24918:	881b0104 	.word	0x881b0104
   2491c:	2210d1c1 	.word	0x2210d1c1
   24920:	f8282002 	.word	0xf8282002
   24924:	f8483c08 	.word	0xf8483c08
   24928:	f8080c0c 	.word	0xf8080c0c
   2492c:	f8562c10 	.word	0xf8562c10
   24930:	f1a82c10 	.word	0xf1a82c10
   24934:	e7c00004 	.word	0xe7c00004
   24938:	0308f248 	.word	0x0308f248
   2493c:	d04e429e 	.word	0xd04e429e
   24940:	0309f248 	.word	0x0309f248
   24944:	f47f429e 	.word	0xf47f429e
   24948:	683baf2d 	.word	0x683baf2d
   2494c:	2b0db29b 	.word	0x2b0db29b
   24950:	af24f47f 	.word	0xaf24f47f
   24954:	28006968 	.word	0x28006968
   24958:	af72f47f 	.word	0xaf72f47f
   2495c:	0c1b683b 	.word	0x0c1b683b
   24960:	f043041b 	.word	0xf043041b
   24964:	603b030e 	.word	0x603b030e
   24968:	2200e719 	.word	0x2200e719
   2496c:	1302e9dd 	.word	0x1302e9dd
   24970:	f843440b 	.word	0xf843440b
   24974:	22022c04 	.word	0x22022c04
   24978:	f8c94b52 	.word	0xf8c94b52
   2497c:	9a022000 	.word	0x9a022000
   24980:	601a2000 	.word	0x601a2000
   24984:	683be70b 	.word	0x683be70b
   24988:	f57f0099 	.word	0xf57f0099
   2498c:	683baf07 	.word	0x683baf07
   24990:	5300f023 	.word	0x5300f023
   24994:	6968603b 	.word	0x6968603b
   24998:	f0002800 	.word	0xf0002800
   2499c:	281080a2 	.word	0x281080a2
   249a0:	232dbf8e 	.word	0x232dbf8e
   249a4:	f8534b43 	.word	0xf8534b43
   249a8:	20003020 	.word	0x20003020
   249ac:	683b607b 	.word	0x683b607b
   249b0:	2380f443 	.word	0x2380f443
   249b4:	e6f2603b 	.word	0xe6f2603b
   249b8:	029a683b 	.word	0x029a683b
   249bc:	aeeef57f 	.word	0xaeeef57f
   249c0:	2b00696b 	.word	0x2b00696b
   249c4:	809cf000 	.word	0x809cf000
   249c8:	f47f2b6b 	.word	0xf47f2b6b
   249cc:	693baf26 	.word	0x693baf26
   249d0:	f0002b01 	.word	0xf0002b01
   249d4:	230c80b1 	.word	0x230c80b1
   249d8:	607b2000 	.word	0x607b2000
   249dc:	683be6df 	.word	0x683be6df
   249e0:	2b06b29b 	.word	0x2b06b29b
   249e4:	aedaf47f 	.word	0xaedaf47f
   249e8:	28006968 	.word	0x28006968
   249ec:	af28f47f 	.word	0xaf28f47f
   249f0:	0c1b683b 	.word	0x0c1b683b
   249f4:	f043041b 	.word	0xf043041b
   249f8:	603b0307 	.word	0x603b0307
   249fc:	683be6cf 	.word	0x683be6cf
   24a00:	2b08b29b 	.word	0x2b08b29b
   24a04:	aecaf47f 	.word	0xaecaf47f
   24a08:	2b00696b 	.word	0x2b00696b
   24a0c:	af05f47f 	.word	0xaf05f47f
   24a10:	20014b2d 	.word	0x20014b2d
   24a14:	5024f843 	.word	0x5024f843
   24a18:	0c1b683b 	.word	0x0c1b683b
   24a1c:	f043041b 	.word	0xf043041b
   24a20:	603b0309 	.word	0x603b0309
   24a24:	683be6bb 	.word	0x683be6bb
   24a28:	f57f025b 	.word	0xf57f025b
   24a2c:	6968aeb7 	.word	0x6968aeb7
   24a30:	f47f2800 	.word	0xf47f2800
   24a34:	683baf05 	.word	0x683baf05
   24a38:	0300f443 	.word	0x0300f443
   24a3c:	e6ae603b 	.word	0xe6ae603b
   24a40:	f443683b 	.word	0xf443683b
   24a44:	603b2300 	.word	0x603b2300
   24a48:	f423683b 	.word	0xf423683b
   24a4c:	603b1300 	.word	0x603b1300
   24a50:	f423683b 	.word	0xf423683b
   24a54:	603b3300 	.word	0x603b3300
   24a58:	2b6c692b 	.word	0x2b6c692b
   24a5c:	2b10d021 	.word	0x2b10d021
   24a60:	232dbf8c 	.word	0x232dbf8c
   24a64:	f04f4a13 	.word	0xf04f4a13
   24a68:	bf980000 	.word	0xbf980000
   24a6c:	3023f852 	.word	0x3023f852
   24a70:	60bb607b 	.word	0x60bb607b
   24a74:	f005e693 	.word	0xf005e693
   24a78:	200cfe77 	.word	0x200cfe77
   24a7c:	490e2302 	.word	0x490e2302
   24a80:	60084a10 	.word	0x60084a10
   24a84:	9902682f 	.word	0x9902682f
   24a88:	f8c96011 	.word	0xf8c96011
   24a8c:	2f003000 	.word	0x2f003000
   24a90:	ae81f47f 	.word	0xae81f47f
   24a94:	232de682 	.word	0x232de682
   24a98:	220ce6c5 	.word	0x220ce6c5
   24a9c:	601a4b06 	.word	0x601a4b06
   24aa0:	2239e769 	.word	0x2239e769
   24aa4:	2000683b 	.word	0x2000683b
   24aa8:	4380f043 	.word	0x4380f043
   24aac:	607a603b 	.word	0x607a603b
   24ab0:	e67460ba 	.word	0xe67460ba
   24ab4:	00033f58 	.word	0x00033f58
   24ab8:	20020308 	.word	0x20020308
   24abc:	20020314 	.word	0x20020314
   24ac0:	20025b0a 	.word	0x20025b0a
   24ac4:	20020310 	.word	0x20020310
   24ac8:	20020318 	.word	0x20020318
   24acc:	2002030c 	.word	0x2002030c
   24ad0:	20020304 	.word	0x20020304
   24ad4:	20020300 	.word	0x20020300
   24ad8:	f7f96828 	.word	0xf7f96828
   24adc:	4620faf7 	.word	0x4620faf7
   24ae0:	683be65d 	.word	0x683be65d
   24ae4:	3300f443 	.word	0x3300f443
   24ae8:	683b603b 	.word	0x683b603b
   24aec:	1380f443 	.word	0x1380f443
   24af0:	683b603b 	.word	0x683b603b
   24af4:	041b0c1b 	.word	0x041b0c1b
   24af8:	0305f043 	.word	0x0305f043
   24afc:	e64e603b 	.word	0xe64e603b
   24b00:	4a28683b 	.word	0x4a28683b
   24b04:	3300f443 	.word	0x3300f443
   24b08:	2001603b 	.word	0x2001603b
   24b0c:	5024f842 	.word	0x5024f842
   24b10:	2002e645 	.word	0x2002e645
   24b14:	683be643 	.word	0x683be643
   24b18:	0c1b2000 	.word	0x0c1b2000
   24b1c:	f043041b 	.word	0xf043041b
   24b20:	603b0304 	.word	0x603b0304
   24b24:	2302e63b 	.word	0x2302e63b
   24b28:	69ab603b 	.word	0x69ab603b
   24b2c:	e63661bb 	.word	0xe63661bb
   24b30:	b94c8a6c 	.word	0xb94c8a6c
   24b34:	e6124626 	.word	0xe6124626
   24b38:	683b220c 	.word	0x683b220c
   24b3c:	f0432000 	.word	0xf0432000
   24b40:	603b6300 	.word	0x603b6300
   24b44:	e62a607a 	.word	0xe62a607a
   24b48:	f0052024 	.word	0xf0052024
   24b4c:	4606fdef 	.word	0x4606fdef
   24b50:	8a6ab158 	.word	0x8a6ab158
   24b54:	d0182a10 	.word	0xd0182a10
   24b58:	d00a2a04 	.word	0xd00a2a04
   24b5c:	f7f96828 	.word	0xf7f96828
   24b60:	4630fab5 	.word	0x4630fab5
   24b64:	fe00f005 	.word	0xfe00f005
   24b68:	6828e618 	.word	0x6828e618
   24b6c:	faaef7f9 	.word	0xfaaef7f9
   24b70:	2302e614 	.word	0x2302e614
   24b74:	60432410 	.word	0x60432410
   24b78:	8a2b7004 	.word	0x8a2b7004
   24b7c:	0114f105 	.word	0x0114f105
   24b80:	300c8103 	.word	0x300c8103
   24b84:	feaff00d 	.word	0xfeaff00d
   24b88:	230ae5e9 	.word	0x230ae5e9
   24b8c:	60432424 	.word	0x60432424
   24b90:	8a2b7004 	.word	0x8a2b7004
   24b94:	0114f105 	.word	0x0114f105
   24b98:	30108103 	.word	0x30108103
   24b9c:	fea3f00d 	.word	0xfea3f00d
   24ba0:	bf00e5dd 	.word	0xbf00e5dd
   24ba4:	20020318 	.word	0x20020318

00024ba8 <rpc_logobj_client_evt_handler>:
   24ba8:	f850b120 	.word	0xf850b120
   24bac:	0c091b08 	.word	0x0c091b08
   24bb0:	b884f7fa 	.word	0xb884f7fa
   24bb4:	bf004770 	.word	0xbf004770

00024bb8 <rpc_logobj_client_init>:
   24bb8:	f0044801 	.word	0xf0044801
   24bbc:	bf00bcf1 	.word	0xbf00bcf1
   24bc0:	00033f9c 	.word	0x00033f9c

00024bc4 <rpc_logobj_client_request_alloc>:
   24bc4:	b5102300 	.word	0xb5102300
   24bc8:	9301b082 	.word	0x9301b082
   24bcc:	b170b961 	.word	0xb170b961
   24bd0:	aa014604 	.word	0xaa014604
   24bd4:	f0042009 	.word	0xf0042009
   24bd8:	b918ff1b 	.word	0xb918ff1b
   24bdc:	b10b9b01 	.word	0xb10b9b01
   24be0:	60233308 	.word	0x60233308
   24be4:	bd10b002 	.word	0xbd10b002
   24be8:	b002200f 	.word	0xb002200f
   24bec:	200ebd10 	.word	0x200ebd10
   24bf0:	bd10b002 	.word	0xbd10b002

00024bf4 <rpc_logobj_client_request_send>:
   24bf4:	4370f401 	.word	0x4370f401
   24bf8:	4fe0f5b3 	.word	0x4fe0f5b3
   24bfc:	b160d10b 	.word	0xb160d10b
   24c00:	f8304603 	.word	0xf8304603
   24c04:	20092c08 	.word	0x20092c08
   24c08:	4101ea42 	.word	0x4101ea42
   24c0c:	1d08f843 	.word	0x1d08f843
   24c10:	f0044619 	.word	0xf0044619
   24c14:	200fbee5 	.word	0x200fbee5
   24c18:	200e4770 	.word	0x200e4770
   24c1c:	bf004770 	.word	0xbf004770

00024c20 <rpc_logobj_client_message_free>:
   24c20:	f1a0b120 	.word	0xf1a0b120
   24c24:	20090108 	.word	0x20090108
   24c28:	bf24f004 	.word	0xbf24f004
   24c2c:	4770200e 	.word	0x4770200e

00024c30 <rpc_logobj_client_data_free>:
   24c30:	4601b118 	.word	0x4601b118
   24c34:	f0052009 	.word	0xf0052009
   24c38:	200eb82f 	.word	0x200eb82f
   24c3c:	bf004770 	.word	0xbf004770

00024c40 <datagram_handler_init>:
   24c40:	4604b510 	.word	0x4604b510
   24c44:	f005200c 	.word	0xf005200c
   24c48:	60e0fd71 	.word	0x60e0fd71
   24c4c:	e8bdb118 	.word	0xe8bdb118
   24c50:	f0004010 	.word	0xf0004010
   24c54:	2004b8bd 	.word	0x2004b8bd
   24c58:	bf00bd10 	.word	0xbf00bd10

00024c5c <datagram_handler_put>:
   24c5c:	4606b570 	.word	0x4606b570
   24c60:	460d2014 	.word	0x460d2014
   24c64:	fd62f005 	.word	0xfd62f005
   24c68:	682bb178 	.word	0x682bb178
   24c6c:	60434604 	.word	0x60434604
   24c70:	4601686b 	.word	0x4601686b
   24c74:	68eb6083 	.word	0x68eb6083
   24c78:	68ab60c3 	.word	0x68ab60c3
   24c7c:	68f06103 	.word	0x68f06103
   24c80:	f8b0f000 	.word	0xf8b0f000
   24c84:	6868b920 	.word	0x6868b920
   24c88:	f04fbd70 	.word	0xf04fbd70
   24c8c:	bd7030ff 	.word	0xbd7030ff
   24c90:	f0054620 	.word	0xf0054620
   24c94:	f04ffd69 	.word	0xf04ffd69
   24c98:	bd7030ff 	.word	0xbd7030ff

00024c9c <datagram_handler_get>:
   24c9c:	4606b5f0 	.word	0x4606b5f0
   24ca0:	68c0b085 	.word	0x68c0b085
   24ca4:	4617460c 	.word	0x4617460c
   24ca8:	f8bcf000 	.word	0xf8bcf000
   24cac:	d0372800 	.word	0xd0372800
   24cb0:	46056882 	.word	0x46056882
   24cb4:	0300e9d4 	.word	0x0300e9d4
   24cb8:	bf28429a 	.word	0xbf28429a
   24cbc:	6062461a 	.word	0x6062461a
   24cc0:	6869b110 	.word	0x6869b110
   24cc4:	fe0ff00d 	.word	0xfe0ff00d
   24cc8:	b11868a0 	.word	0xb11868a0
   24ccc:	b10b692b 	.word	0xb10b692b
   24cd0:	b9e268ea 	.word	0xb9e268ea
   24cd4:	60e32300 	.word	0x60e32300
   24cd8:	d502073b 	.word	0xd502073b
   24cdc:	b0056860 	.word	0xb0056860
   24ce0:	68f0bdf0 	.word	0x68f0bdf0
   24ce4:	f894f000 	.word	0xf894f000
   24ce8:	28004605 	.word	0x28004605
   24cec:	e9d0d0f6 	.word	0xe9d0d0f6
   24cf0:	69023101 	.word	0x69023101
   24cf4:	68c39300 	.word	0x68c39300
   24cf8:	1201e9cd 	.word	0x1201e9cd
   24cfc:	46689303 	.word	0x46689303
   24d00:	3101e9d6 	.word	0x3101e9d6
   24d04:	46284798 	.word	0x46284798
   24d08:	fd2ef005 	.word	0xfd2ef005
   24d0c:	68e3e7e6 	.word	0x68e3e7e6
   24d10:	bf28429a 	.word	0xbf28429a
   24d14:	60e2461a 	.word	0x60e2461a
   24d18:	f00d6929 	.word	0xf00d6929
   24d1c:	e7dbfde4 	.word	0xe7dbfde4
   24d20:	30fff04f 	.word	0x30fff04f
   24d24:	bf00e7db 	.word	0xbf00e7db

00024d28 <datagram_handler_available>:
   24d28:	68c0b508 	.word	0x68c0b508
   24d2c:	f87af000 	.word	0xf87af000
   24d30:	6880b108 	.word	0x6880b108
   24d34:	f04fbd08 	.word	0xf04fbd08
   24d38:	bd0830ff 	.word	0xbd0830ff

00024d3c <datagram_handler_flush>:
   24d3c:	4605b530 	.word	0x4605b530
   24d40:	b08568c0 	.word	0xb08568c0
   24d44:	e01ab9a8 	.word	0xe01ab9a8
   24d48:	f00068e8 	.word	0xf00068e8
   24d4c:	4604f861 	.word	0x4604f861
   24d50:	e9d0b170 	.word	0xe9d0b170
   24d54:	e9d40101 	.word	0xe9d40101
   24d58:	e9cd3203 	.word	0xe9cd3203
   24d5c:	e9cd0100 	.word	0xe9cd0100
   24d60:	e9d52302 	.word	0xe9d52302
   24d64:	46683101 	.word	0x46683101
   24d68:	46204798 	.word	0x46204798
   24d6c:	fcfcf005 	.word	0xfcfcf005
   24d70:	f00068e8 	.word	0xf00068e8
   24d74:	2800f85d 	.word	0x2800f85d
   24d78:	b005d1e6 	.word	0xb005d1e6
   24d7c:	2008bd30 	.word	0x2008bd30
   24d80:	bd30b005 	.word	0xbd30b005

00024d84 <datagram_handler_free>:
   24d84:	4605b530 	.word	0x4605b530
   24d88:	b08568c0 	.word	0xb08568c0
   24d8c:	e01cb9a0 	.word	0xe01cb9a0
   24d90:	f83ef000 	.word	0xf83ef000
   24d94:	b1704604 	.word	0xb1704604
   24d98:	0101e9d0 	.word	0x0101e9d0
   24d9c:	3203e9d4 	.word	0x3203e9d4
   24da0:	0100e9cd 	.word	0x0100e9cd
   24da4:	2302e9cd 	.word	0x2302e9cd
   24da8:	3101e9d5 	.word	0x3101e9d5
   24dac:	47984668 	.word	0x47984668
   24db0:	f0054620 	.word	0xf0054620
   24db4:	68e8fcd9 	.word	0x68e8fcd9
   24db8:	f83af000 	.word	0xf83af000
   24dbc:	68e84604 	.word	0x68e84604
   24dc0:	d1e52c00 	.word	0xd1e52c00
   24dc4:	fcd0f005 	.word	0xfcd0f005
   24dc8:	b00560ec 	.word	0xb00560ec
   24dcc:	bf00bd30 	.word	0xbf00bd30

00024dd0 <linked_list_init>:
   24dd0:	2300b128 	.word	0x2300b128
   24dd4:	e9c06003 	.word	0xe9c06003
   24dd8:	46183301 	.word	0x46183301
   24ddc:	20074770 	.word	0x20074770
   24de0:	bf004770 	.word	0xbf004770

00024de4 <linked_list_push>:
   24de4:	46036802 	.word	0x46036802
   24de8:	d00e3201 	.word	0xd00e3201
   24dec:	600a2200 	.word	0x600a2200
   24df0:	b13a6802 	.word	0xb13a6802
   24df4:	60116882 	.word	0x60116882
   24df8:	681a6081 	.word	0x681a6081
   24dfc:	32012000 	.word	0x32012000
   24e00:	4770601a 	.word	0x4770601a
   24e04:	1101e9c0 	.word	0x1101e9c0
   24e08:	2004e7f7 	.word	0x2004e7f7
   24e0c:	bf004770 	.word	0xbf004770

00024e10 <linked_list_pop>:
   24e10:	68004603 	.word	0x68004603
   24e14:	6858b128 	.word	0x6858b128
   24e18:	6801681a 	.word	0x6801681a
   24e1c:	60593a01 	.word	0x60593a01
   24e20:	4770601a 	.word	0x4770601a

00024e24 <linked_list_peek>:
   24e24:	b10b6803 	.word	0xb10b6803
   24e28:	47706840 	.word	0x47706840
   24e2c:	47704618 	.word	0x47704618

00024e30 <linked_list_size_get>:
   24e30:	47706800 	.word	0x47706800

00024e34 <linked_list_get_next>:
   24e34:	47706800 	.word	0x47706800

00024e38 <rpc_transport_ipc_tx_init>:
   24e38:	f0002800 	.word	0xf0002800
   24e3c:	290080b8 	.word	0x290080b8
   24e40:	80b5f000 	.word	0x80b5f000
   24e44:	f0002a00 	.word	0xf0002a00
   24e48:	e92d80b2 	.word	0xe92d80b2
   24e4c:	6a044ff0 	.word	0x6a044ff0
   24e50:	2c00b085 	.word	0x2c00b085
   24e54:	80a6f000 	.word	0x80a6f000
   24e58:	28006a40 	.word	0x28006a40
   24e5c:	80a2f000 	.word	0x80a2f000
   24e60:	4587f642 	.word	0x4587f642
   24e64:	0a00f04f 	.word	0x0a00f04f
   24e68:	42a84e55 	.word	0x42a84e55
   24e6c:	a000f886 	.word	0xa000f886
   24e70:	80a0f240 	.word	0x80a0f240
   24e74:	f8df2708 	.word	0xf8df2708
   24e78:	46209180 	.word	0x46209180
   24e7c:	460d4616 	.word	0x460d4616
   24e80:	46512244 	.word	0x46512244
   24e84:	4000f8c9 	.word	0x4000f8c9
   24e88:	fd38f00d 	.word	0xfd38f00d
   24e8c:	2000f8d9 	.word	0x2000f8d9
   24e90:	0344f104 	.word	0x0344f104
   24e94:	8164f8df 	.word	0x8164f8df
   24e98:	a001f882 	.word	0xa001f882
   24e9c:	a002f882 	.word	0xa002f882
   24ea0:	a003f882 	.word	0xa003f882
   24ea4:	46187017 	.word	0x46187017
   24ea8:	46512244 	.word	0x46512244
   24eac:	3000f8c8 	.word	0x3000f8c8
   24eb0:	fd24f00d 	.word	0xfd24f00d
   24eb4:	2000f8d8 	.word	0x2000f8d8
   24eb8:	0388f104 	.word	0x0388f104
   24ebc:	b140f8df 	.word	0xb140f8df
   24ec0:	f8827017 	.word	0xf8827017
   24ec4:	f882a001 	.word	0xf882a001
   24ec8:	f882a002 	.word	0xf882a002
   24ecc:	4618a003 	.word	0x4618a003
   24ed0:	7200f44f 	.word	0x7200f44f
   24ed4:	f8cb4651 	.word	0xf8cb4651
   24ed8:	f00d3000 	.word	0xf00d3000
   24edc:	4b39fd0f 	.word	0x4b39fd0f
   24ee0:	7c22f504 	.word	0x7c22f504
   24ee4:	c000f8c3 	.word	0xc000f8c3
   24ee8:	46604651 	.word	0x46604651
   24eec:	7200f44f 	.word	0x7200f44f
   24ef0:	fd04f00d 	.word	0xfd04f00d
   24ef4:	5c20f44f 	.word	0x5c20f44f
   24ef8:	f04f2106 	.word	0xf04f2106
   24efc:	f44f0e01 	.word	0xf44f0e01
   24f00:	f44f3001 	.word	0xf44f3001
   24f04:	4b303288 	.word	0x4b303288
   24f08:	6491f504 	.word	0x6491f504
   24f0c:	4c2f605c 	.word	0x4c2f605c
   24f10:	c008f8c3 	.word	0xc008f8c3
   24f14:	f8a38199 	.word	0xf8a38199
   24f18:	4619e000 	.word	0x4619e000
   24f1c:	4b2c611c 	.word	0x4b2c611c
   24f20:	c0e0f8df 	.word	0xc0e0f8df
   24f24:	482b6120 	.word	0x482b6120
   24f28:	f5036063 	.word	0xf5036063
   24f2c:	60a073c0 	.word	0x60a073c0
   24f30:	c000f8c4 	.word	0xc000f8c4
   24f34:	60e34828 	.word	0x60e34828
   24f38:	f0056162 	.word	0xf0056162
   24f3c:	2800fadd 	.word	0x2800fadd
   24f40:	f04fd132 	.word	0xf04fd132
   24f44:	24200c02 	.word	0x24200c02
   24f48:	1000f8d9 	.word	0x1000f8d9
   24f4c:	2000f8db 	.word	0x2000f8db
   24f50:	4b1c6029 	.word	0x4b1c6029
   24f54:	1000f8d8 	.word	0x1000f8d8
   24f58:	e0acf8df 	.word	0xe0acf8df
   24f5c:	60314d1f 	.word	0x60314d1f
   24f60:	2000f8ce 	.word	0x2000f8ce
   24f64:	491e681b 	.word	0x491e681b
   24f68:	7200f502 	.word	0x7200f502
   24f6c:	4e1d602a 	.word	0x4e1d602a
   24f70:	4d1e4a1d 	.word	0x4d1e4a1d
   24f74:	f503600b 	.word	0xf503600b
   24f78:	491d7300 	.word	0x491d7300
   24f7c:	80286033 	.word	0x80286033
   24f80:	c514f8c2 	.word	0xc514f8c2
   24f84:	4b1b6809 	.word	0x4b1b6809
   24f88:	99039103 	.word	0x99039103
   24f8c:	751cf8c2 	.word	0x751cf8c2
   24f90:	443b6819 	.word	0x443b6819
   24f94:	99029102 	.word	0x99029102
   24f98:	4524f8c2 	.word	0x4524f8c2
   24f9c:	9301681b 	.word	0x9301681b
   24fa0:	e0019b01 	.word	0xe0019b01
   24fa4:	0007f24c 	.word	0x0007f24c
   24fa8:	e8bdb005 	.word	0xe8bdb005
   24fac:	f24c8ff0 	.word	0xf24c8ff0
   24fb0:	4770000e 	.word	0x4770000e
   24fb4:	0004f24c 	.word	0x0004f24c
   24fb8:	e8bdb005 	.word	0xe8bdb005
   24fbc:	bf008ff0 	.word	0xbf008ff0
   24fc0:	20025b3d 	.word	0x20025b3d
   24fc4:	20020368 	.word	0x20020368
   24fc8:	20020354 	.word	0x20020354
   24fcc:	20020378 	.word	0x20020378
   24fd0:	00040080 	.word	0x00040080
   24fd4:	00040100 	.word	0x00040100
   24fd8:	20020340 	.word	0x20020340
   24fdc:	2002034c 	.word	0x2002034c
   24fe0:	20020348 	.word	0x20020348
   24fe4:	20020344 	.word	0x20020344
   24fe8:	4002a000 	.word	0x4002a000
   24fec:	20025b0c 	.word	0x20025b0c
   24ff0:	4002a514 	.word	0x4002a514
   24ff4:	4002a51c 	.word	0x4002a51c
   24ff8:	20020374 	.word	0x20020374
   24ffc:	2002036c 	.word	0x2002036c
   25000:	20020370 	.word	0x20020370
   25004:	00080040 	.word	0x00080040
   25008:	20020350 	.word	0x20020350

0002500c <rpc_transport_ipc_tx_send>:
   2500c:	d05f2800 	.word	0xd05f2800
   25010:	4b33b470 	.word	0x4b33b470
   25014:	681ab083 	.word	0x681ab083
   25018:	42824b32 	.word	0x42824b32
   2501c:	681bd81e 	.word	0x681bd81e
   25020:	42834931 	.word	0x42834931
   25024:	d8036809 	.word	0xd8036809
   25028:	68244c30 	.word	0x68244c30
   2502c:	d8474284 	.word	0xd8474284
   25030:	d90e4281 	.word	0xd90e4281
   25034:	781b4b2e 	.word	0x781b4b2e
   25038:	d14c2b00 	.word	0xd14c2b00
   2503c:	492d1a83 	.word	0x492d1a83
   25040:	069b099e 	.word	0x069b099e
   25044:	4c2c680a 	.word	0x4c2c680a
   25048:	0103f04f 	.word	0x0103f04f
   2504c:	0502f04f 	.word	0x0502f04f
   25050:	f24cd014 	.word	0xf24cd014
   25054:	b0030010 	.word	0xb0030010
   25058:	4770bc70 	.word	0x4770bc70
   2505c:	4298681b 	.word	0x4298681b
   25060:	4a22d3f7 	.word	0x4a22d3f7
   25064:	42906812 	.word	0x42906812
   25068:	2101d2f3 	.word	0x2101d2f3
   2506c:	4a231ac3 	.word	0x4a231ac3
   25070:	069b099e 	.word	0x069b099e
   25074:	6812460d 	.word	0x6812460d
   25078:	d1ea4c21 	.word	0xd1ea4c21
   2507c:	b2db6843 	.word	0xb2db6843
   25080:	d120429d 	.word	0xd120429d
   25084:	eb022020 	.word	0xeb022020
   25088:	4d1e02c6 	.word	0x4d1e02c6
   2508c:	882e6853 	.word	0x882e6853
   25090:	ea43b29b 	.word	0xea43b29b
   25094:	f0234306 	.word	0xf0234306
   25098:	f04303ff 	.word	0xf04303ff
   2509c:	60530301 	.word	0x60530301
   250a0:	3801bf00 	.word	0x3801bf00
   250a4:	2201d1fc 	.word	0x2201d1fc
   250a8:	f8434b17 	.word	0xf8434b17
   250ac:	68222021 	.word	0x68222021
   250b0:	9201882b 	.word	0x9201882b
   250b4:	33019a01 	.word	0x33019a01
   250b8:	b003802b 	.word	0xb003802b
   250bc:	4770bc70 	.word	0x4770bc70
   250c0:	d9d24281 	.word	0xd9d24281
   250c4:	f24ce7b6 	.word	0xf24ce7b6
   250c8:	b0030007 	.word	0xb0030007
   250cc:	4770bc70 	.word	0x4770bc70
   250d0:	000ef24c 	.word	0x000ef24c
   250d4:	f24c4770 	.word	0xf24c4770
   250d8:	b003000f 	.word	0xb003000f
   250dc:	4770bc70 	.word	0x4770bc70
   250e0:	20020350 	.word	0x20020350
   250e4:	20020348 	.word	0x20020348
   250e8:	2002034c 	.word	0x2002034c
   250ec:	20020344 	.word	0x20020344
   250f0:	20025b3d 	.word	0x20025b3d
   250f4:	20020374 	.word	0x20020374
   250f8:	4002a00c 	.word	0x4002a00c
   250fc:	2002036c 	.word	0x2002036c
   25100:	4002a004 	.word	0x4002a004
   25104:	20025b0c 	.word	0x20025b0c
   25108:	4002a000 	.word	0x4002a000

0002510c <rpc_transport_ipc_tx_rpc_data_alloc>:
   2510c:	781b4b18 	.word	0x781b4b18
   25110:	b4f0bb63 	.word	0xb4f0bb63
   25114:	f0034a17 	.word	0xf0034a17
   25118:	681400ff 	.word	0x681400ff
   2511c:	68254b16 	.word	0x68254b16
   25120:	b1a5681e 	.word	0xb1a5681e
   25124:	00c14607 	.word	0x00c14607
   25128:	685a1863 	.word	0x685a1863
   2512c:	2a03b2d2 	.word	0x2a03b2d2
   25130:	609fd104 	.word	0x609fd104
   25134:	f022685a 	.word	0xf022685a
   25138:	605a02ff 	.word	0x605a02ff
   2513c:	f012685a 	.word	0xf012685a
   25140:	d1010fff 	.word	0xd1010fff
   25144:	b12b689b 	.word	0xb12b689b
   25148:	42a83001 	.word	0x42a83001
   2514c:	2000d1eb 	.word	0x2000d1eb
   25150:	4770bcf0 	.word	0x4770bcf0
   25154:	1080eb06 	.word	0x1080eb06
   25158:	60884421 	.word	0x60884421
   2515c:	f0236843 	.word	0xf0236843
   25160:	f04303ff 	.word	0xf04303ff
   25164:	60430302 	.word	0x60430302
   25168:	4770bcf0 	.word	0x4770bcf0
   2516c:	47702000 	.word	0x47702000
   25170:	20025b3d 	.word	0x20025b3d
   25174:	20020374 	.word	0x20020374
   25178:	20020370 	.word	0x20020370

0002517c <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   2517c:	4a15b4f0 	.word	0x4a15b4f0
   25180:	68144b15 	.word	0x68144b15
   25184:	6825681e 	.word	0x6825681e
   25188:	2000b1ad 	.word	0x2000b1ad
   2518c:	00c14607 	.word	0x00c14607
   25190:	685a1863 	.word	0x685a1863
   25194:	2a03b2d2 	.word	0x2a03b2d2
   25198:	609fd104 	.word	0x609fd104
   2519c:	f022685a 	.word	0xf022685a
   251a0:	605a02ff 	.word	0x605a02ff
   251a4:	f012685a 	.word	0xf012685a
   251a8:	d1010fff 	.word	0xd1010fff
   251ac:	b12b689b 	.word	0xb12b689b
   251b0:	42853001 	.word	0x42853001
   251b4:	2000d1eb 	.word	0x2000d1eb
   251b8:	4770bcf0 	.word	0x4770bcf0
   251bc:	1080eb06 	.word	0x1080eb06
   251c0:	60884421 	.word	0x60884421
   251c4:	f0236843 	.word	0xf0236843
   251c8:	f04303ff 	.word	0xf04303ff
   251cc:	60430301 	.word	0x60430301
   251d0:	4770bcf0 	.word	0x4770bcf0
   251d4:	2002036c 	.word	0x2002036c
   251d8:	20020368 	.word	0x20020368

000251dc <rpc_transport_ipc_tx_data_alloc>:
   251dc:	781b4b03 	.word	0x781b4b03
   251e0:	f005b90b 	.word	0xf005b90b
   251e4:	2000bacd 	.word	0x2000bacd
   251e8:	bf004770 	.word	0xbf004770
   251ec:	20025b3d 	.word	0x20025b3d

000251f0 <null_handler_init>:
   251f0:	47702000 	.word	0x47702000

000251f4 <null_handler_put>:
   251f4:	460cb510 	.word	0x460cb510
   251f8:	3101e9d0 	.word	0x3101e9d0
   251fc:	47984620 	.word	0x47984620
   25200:	bd106860 	.word	0xbd106860

00025204 <null_handler_get>:
   25204:	30fff04f 	.word	0x30fff04f
   25208:	bf004770 	.word	0xbf004770

0002520c <null_handler_available>:
   2520c:	30fff04f 	.word	0x30fff04f
   25210:	bf004770 	.word	0xbf004770

00025214 <null_handler_flush>:
   25214:	47702000 	.word	0x47702000

00025218 <null_handler_free>:
   25218:	bf004770 	.word	0xbf004770

0002521c <rpc_gnss_event_handler>:
   2521c:	4b5db5f0 	.word	0x4b5db5f0
   25220:	68004606 	.word	0x68004606
   25224:	6802881b 	.word	0x6802881b
   25228:	ebb34c5b 	.word	0xebb34c5b
   2522c:	b0854f12 	.word	0xb0854f12
   25230:	6020460d 	.word	0x6020460d
   25234:	f505d033 	.word	0xf505d033
   25238:	33ff433f 	.word	0x33ff433f
   2523c:	2b02b29b 	.word	0x2b02b29b
   25240:	4c56d80e 	.word	0x4c56d80e
   25244:	075a6823 	.word	0x075a6823
   25248:	6823d40d 	.word	0x6823d40d
   2524c:	d503079b 	.word	0xd503079b
   25250:	0303f244 	.word	0x0303f244
   25254:	d006429d 	.word	0xd006429d
   25258:	b1086830 	.word	0xb1086830
   2525c:	fa70f7f9 	.word	0xfa70f7f9
   25260:	b0052000 	.word	0xb0052000
   25264:	2002bdf0 	.word	0x2002bdf0
   25268:	fa60f005 	.word	0xfa60f005
   2526c:	28004607 	.word	0x28004607
   25270:	2302d0f2 	.word	0x2302d0f2
   25274:	68318005 	.word	0x68318005
   25278:	48496872 	.word	0x48496872
   2527c:	0086e88d 	.word	0x0086e88d
   25280:	93036800 	.word	0x93036800
   25284:	46696803 	.word	0x46696803
   25288:	4798685b 	.word	0x4798685b
   2528c:	d06d3001 	.word	0xd06d3001
   25290:	68232000 	.word	0x68232000
   25294:	3380f443 	.word	0x3380f443
   25298:	b0056023 	.word	0xb0056023
   2529c:	4c3fbdf0 	.word	0x4c3fbdf0
   252a0:	01da6823 	.word	0x01da6823
   252a4:	f242d523 	.word	0xf242d523
   252a8:	42991302 	.word	0x42991302
   252ac:	6843d11f 	.word	0x6843d11f
   252b0:	6823b91b 	.word	0x6823b91b
   252b4:	7300f043 	.word	0x7300f043
   252b8:	68236023 	.word	0x68236023
   252bc:	7380f023 	.word	0x7380f023
   252c0:	68236023 	.word	0x68236023
   252c4:	d430025b 	.word	0xd430025b
   252c8:	0305f242 	.word	0x0305f242
   252cc:	d12c429d 	.word	0xd12c429d
   252d0:	02996823 	.word	0x02996823
   252d4:	6843d529 	.word	0x6843d529
   252d8:	d1552b00 	.word	0xd1552b00
   252dc:	f4236823 	.word	0xf4236823
   252e0:	60231300 	.word	0x60231300
   252e4:	f4436823 	.word	0xf4436823
   252e8:	60233300 	.word	0x60233300
   252ec:	6823e01d 	.word	0x6823e01d
   252f0:	d50e025f 	.word	0xd50e025f
   252f4:	1303f242 	.word	0x1303f242
   252f8:	d10a429d 	.word	0xd10a429d
   252fc:	b91b6843 	.word	0xb91b6843
   25300:	f4436823 	.word	0xf4436823
   25304:	60230300 	.word	0x60230300
   25308:	f4236823 	.word	0xf4236823
   2530c:	60230380 	.word	0x60230380
   25310:	f242e00b 	.word	0xf242e00b
   25314:	429d0301 	.word	0x429d0301
   25318:	6843d10a 	.word	0x6843d10a
   2531c:	6823b92b 	.word	0x6823b92b
   25320:	041b0c1b 	.word	0x041b0c1b
   25324:	0302f043 	.word	0x0302f043
   25328:	f7f96023 	.word	0xf7f96023
   2532c:	e782fa09 	.word	0xe782fa09
   25330:	0304f242 	.word	0x0304f242
   25334:	d1c7429d 	.word	0xd1c7429d
   25338:	b9936843 	.word	0xb9936843
   2533c:	f4436823 	.word	0xf4436823
   25340:	60230300 	.word	0x60230300
   25344:	b29b6823 	.word	0xb29b6823
   25348:	68232b03 	.word	0x68232b03
   2534c:	b29bd016 	.word	0xb29bd016
   25350:	d1d92b04 	.word	0xd1d92b04
   25354:	0c1b6823 	.word	0x0c1b6823
   25358:	f043041b 	.word	0xf043041b
   2535c:	60230302 	.word	0x60230302
   25360:	6823e7d2 	.word	0x6823e7d2
   25364:	2b03b29b 	.word	0x2b03b29b
   25368:	e7f3d1ce 	.word	0xe7f3d1ce
   2536c:	f0054638 	.word	0xf0054638
   25370:	6830f9fb 	.word	0x6830f9fb
   25374:	f47f2800 	.word	0xf47f2800
   25378:	e771af71 	.word	0xe771af71
   2537c:	041b0c1b 	.word	0x041b0c1b
   25380:	0304f043 	.word	0x0304f043
   25384:	e7bf6023 	.word	0xe7bf6023
   25388:	f4236823 	.word	0xf4236823
   2538c:	60231300 	.word	0x60231300
   25390:	bf00e7cb 	.word	0xbf00e7cb
   25394:	20025b0e 	.word	0x20025b0e
   25398:	20020338 	.word	0x20020338
   2539c:	20020390 	.word	0x20020390
   253a0:	20020394 	.word	0x20020394

000253a4 <gnss_interface_write>:
   253a4:	43f0e92d 	.word	0x43f0e92d
   253a8:	b09f4a75 	.word	0xb09f4a75
   253ac:	9d264290 	.word	0x9d264290
   253b0:	80d3f040 	.word	0x80d3f040
   253b4:	f0002900 	.word	0xf0002900
   253b8:	2d0080c8 	.word	0x2d0080c8
   253bc:	80c5f000 	.word	0x80c5f000
   253c0:	2a029a27 	.word	0x2a029a27
   253c4:	80c1f040 	.word	0x80c1f040
   253c8:	68224c6e 	.word	0x68224c6e
   253cc:	2a02b292 	.word	0x2a02b292
   253d0:	6822d004 	.word	0x6822d004
   253d4:	2a04b292 	.word	0x2a04b292
   253d8:	80c5f040 	.word	0x80c5f040
   253dc:	f1000798 	.word	0xf1000798
   253e0:	682080c8 	.word	0x682080c8
   253e4:	3000f410 	.word	0x3000f410
   253e8:	6822d065 	.word	0x6822d065
   253ec:	f422882b 	.word	0xf422882b
   253f0:	60223200 	.word	0x60223200
   253f4:	3b016822 	.word	0x3b016822
   253f8:	1200f442 	.word	0x1200f442
   253fc:	2b076022 	.word	0x2b076022
   25400:	80a3f200 	.word	0x80a3f200
   25404:	f003e8df 	.word	0xf003e8df
   25408:	696e7378 	.word	0x696e7378
   2540c:	045f5a64 	.word	0x045f5a64
   25410:	a9024608 	.word	0xa9024608
   25414:	ff1ef7fb 	.word	0xff1ef7fb
   25418:	46682172 	.word	0x46682172
   2541c:	f95ef7f9 	.word	0xf95ef7f9
   25420:	98004605 	.word	0x98004605
   25424:	d16c2d00 	.word	0xd16c2d00
   25428:	d06a2800 	.word	0xd06a2800
   2542c:	0605f241 	.word	0x0605f241
   25430:	0c49f04f 	.word	0x0c49f04f
   25434:	f04f2272 	.word	0xf04f2272
   25438:	f04f0e76 	.word	0xf04f0e76
   2543c:	f04f0943 	.word	0xf04f0943
   25440:	4f510854 	.word	0x4f510854
   25444:	883ba91e 	.word	0x883ba91e
   25448:	c00ff880 	.word	0xc00ff880
   2544c:	b29b3301 	.word	0xb29b3301
   25450:	4c03ea46 	.word	0x4c03ea46
   25454:	cd74f841 	.word	0xcd74f841
   25458:	71857145 	.word	0x71857145
   2545c:	720571c5 	.word	0x720571c5
   25460:	72857245 	.word	0x72857245
   25464:	710272c5 	.word	0x710272c5
   25468:	900cf880 	.word	0x900cf880
   2546c:	800df880 	.word	0x800df880
   25470:	e00ef880 	.word	0xe00ef880
   25474:	803b6800 	.word	0x803b6800
   25478:	fa35f00d 	.word	0xfa35f00d
   2547c:	46314b43 	.word	0x46314b43
   25480:	601d9800 	.word	0x601d9800
   25484:	f93ef7f9 	.word	0xf93ef7f9
   25488:	d1472800 	.word	0xd1472800
   2548c:	02996823 	.word	0x02996823
   25490:	4e3fd50d 	.word	0x4e3fd50d
   25494:	e0014d3a 	.word	0xe0014d3a
   25498:	d14f2800 	.word	0xd14f2800
   2549c:	46284631 	.word	0x46284631
   254a0:	f86af7f8 	.word	0xf86af7f8
   254a4:	029a6823 	.word	0x029a6823
   254a8:	2800d4f6 	.word	0x2800d4f6
   254ac:	6823d146 	.word	0x6823d146
   254b0:	d53e039b 	.word	0xd53e039b
   254b4:	b01f2000 	.word	0xb01f2000
   254b8:	83f0e8bd 	.word	0x83f0e8bd
   254bc:	a9024608 	.word	0xa9024608
   254c0:	fe80f7fb 	.word	0xfe80f7fb
   254c4:	4608e7a8 	.word	0x4608e7a8
   254c8:	f7fba902 	.word	0xf7fba902
   254cc:	e7a3fea3 	.word	0xe7a3fea3
   254d0:	a9024608 	.word	0xa9024608
   254d4:	fe5cf7fb 	.word	0xfe5cf7fb
   254d8:	4608e79e 	.word	0x4608e79e
   254dc:	f7fba902 	.word	0xf7fba902
   254e0:	e799fe33 	.word	0xe799fe33
   254e4:	a9024608 	.word	0xa9024608
   254e8:	fdfcf7fb 	.word	0xfdfcf7fb
   254ec:	4608e794 	.word	0x4608e794
   254f0:	f7fba902 	.word	0xf7fba902
   254f4:	e78ffda5 	.word	0xe78ffda5
   254f8:	a9024608 	.word	0xa9024608
   254fc:	fd7ef7fb 	.word	0xfd7ef7fb
   25500:	6803e78a 	.word	0x6803e78a
   25504:	4618b11b 	.word	0x4618b11b
   25508:	f91af7f9 	.word	0xf91af7f9
   2550c:	f7f99800 	.word	0xf7f99800
   25510:	2023f90f 	.word	0x2023f90f
   25514:	f8c0f7f8 	.word	0xf8c0f7f8
   25518:	30fff04f 	.word	0x30fff04f
   2551c:	f4236823 	.word	0xf4236823
   25520:	60231300 	.word	0x60231300
   25524:	f4436823 	.word	0xf4436823
   25528:	60233300 	.word	0x60233300
   2552c:	e8bdb01f 	.word	0xe8bdb01f
   25530:	200583f0 	.word	0x200583f0
   25534:	f4436823 	.word	0xf4436823
   25538:	60233300 	.word	0x60233300
   2553c:	f8acf7f8 	.word	0xf8acf7f8
   25540:	30fff04f 	.word	0x30fff04f
   25544:	e8bdb01f 	.word	0xe8bdb01f
   25548:	201683f0 	.word	0x201683f0
   2554c:	f8a4f7f8 	.word	0xf8a4f7f8
   25550:	30fff04f 	.word	0x30fff04f
   25554:	e8bdb01f 	.word	0xe8bdb01f
   25558:	200983f0 	.word	0x200983f0
   2555c:	f89cf7f8 	.word	0xf89cf7f8
   25560:	30fff04f 	.word	0x30fff04f
   25564:	2039e7a7 	.word	0x2039e7a7
   25568:	f896f7f8 	.word	0xf896f7f8
   2556c:	30fff04f 	.word	0x30fff04f
   25570:	202de7a1 	.word	0x202de7a1
   25574:	f890f7f8 	.word	0xf890f7f8
   25578:	30fff04f 	.word	0x30fff04f
   2557c:	bf00e79b 	.word	0xbf00e79b
   25580:	49765443 	.word	0x49765443
   25584:	20020390 	.word	0x20020390
   25588:	20025b0e 	.word	0x20025b0e
   2558c:	20020338 	.word	0x20020338
   25590:	20028e10 	.word	0x20028e10

00025594 <gnss_interface_read>:
   25594:	4ff0e92d 	.word	0x4ff0e92d
   25598:	b0b74c4a 	.word	0xb0b74c4a
   2559c:	f04042a0 	.word	0xf04042a0
   255a0:	468881ec 	.word	0x468881ec
   255a4:	f0002900 	.word	0xf0002900
   255a8:	2ad781e2 	.word	0x2ad781e2
   255ac:	81dff240 	.word	0x81dff240
   255b0:	46994d45 	.word	0x46994d45
   255b4:	b29b682b 	.word	0xb29b682b
   255b8:	d0042b04 	.word	0xd0042b04
   255bc:	b29b682b 	.word	0xb29b682b
   255c0:	f0402b02 	.word	0xf0402b02
   255c4:	210281e0 	.word	0x210281e0
   255c8:	240020b6 	.word	0x240020b6
   255cc:	f10d682b 	.word	0xf10d682b
   255d0:	f423020e 	.word	0xf423020e
   255d4:	602b3380 	.word	0x602b3380
   255d8:	a0f4f8df 	.word	0xa0f4f8df
   255dc:	4f3bab08 	.word	0x4f3bab08
   255e0:	90054e38 	.word	0x90054e38
   255e4:	93049107 	.word	0x93049107
   255e8:	ea099206 	.word	0xea099206
   255ec:	f8da0b01 	.word	0xf8da0b01
   255f0:	464a0000 	.word	0x464a0000
   255f4:	a9046803 	.word	0xa9046803
   255f8:	4798689b 	.word	0x4798689b
   255fc:	da112800 	.word	0xda112800
   25600:	0f00f1bb 	.word	0x0f00f1bb
   25604:	682bd138 	.word	0x682bd138
   25608:	d4f003d8 	.word	0xd4f003d8
   2560c:	e7eeb10c 	.word	0xe7eeb10c
   25610:	4639b930 	.word	0x4639b930
   25614:	f7f74630 	.word	0xf7f74630
   25618:	682bffaf 	.word	0x682bffaf
   2561c:	d5f703d9 	.word	0xd5f703d9
   25620:	e7e44604 	.word	0xe7e44604
   25624:	0202f244 	.word	0x0202f244
   25628:	300ef8bd 	.word	0x300ef8bd
   2562c:	d0394293 	.word	0xd0394293
   25630:	0201f244 	.word	0x0201f244
   25634:	d04d4293 	.word	0xd04d4293
   25638:	0203f244 	.word	0x0203f244
   2563c:	f0404293 	.word	0xf0404293
   25640:	22018196 	.word	0x22018196
   25644:	9b082414 	.word	0x9b082414
   25648:	2000f888 	.word	0x2000f888
   2564c:	f8c89a09 	.word	0xf8c89a09
   25650:	f8bd3008 	.word	0xf8bd3008
   25654:	e9c83028 	.word	0xe9c83028
   25658:	f8da2303 	.word	0xf8da2303
   2565c:	68030000 	.word	0x68030000
   25660:	479868db 	.word	0x479868db
   25664:	dd032800 	.word	0xdd032800
   25668:	f443682b 	.word	0xf443682b
   2566c:	602b3380 	.word	0x602b3380
   25670:	b0374620 	.word	0xb0374620
   25674:	8ff0e8bd 	.word	0x8ff0e8bd
   25678:	46031c42 	.word	0x46031c42
   2567c:	b93cd1d2 	.word	0xb93cd1d2
   25680:	2023461c 	.word	0x2023461c
   25684:	f808f7f8 	.word	0xf808f7f8
   25688:	b0374620 	.word	0xb0374620
   2568c:	8ff0e8bd 	.word	0x8ff0e8bd
   25690:	46209001 	.word	0x46209001
   25694:	f800f7f8 	.word	0xf800f7f8
   25698:	461c9b01 	.word	0x461c9b01
   2569c:	b0374620 	.word	0xb0374620
   256a0:	8ff0e8bd 	.word	0x8ff0e8bd
   256a4:	f7f4a808 	.word	0xf7f4a808
   256a8:	2302fc23 	.word	0x2302fc23
   256ac:	b2a41c44 	.word	0xb2a41c44
   256b0:	3b08f808 	.word	0x3b08f808
   256b4:	a9084622 	.word	0xa9084622
   256b8:	f00d4640 	.word	0xf00d4640
   256bc:	3408f914 	.word	0x3408f914
   256c0:	bf00e7cb 	.word	0xbf00e7cb
   256c4:	49765443 	.word	0x49765443
   256c8:	20020390 	.word	0x20020390
   256cc:	20028e10 	.word	0x20028e10
   256d0:	20020394 	.word	0x20020394
   256d4:	a8092401 	.word	0xa8092401
   256d8:	e9c8c80f 	.word	0xe9c8c80f
   256dc:	e9c80102 	.word	0xe9c80102
   256e0:	990d2304 	.word	0x990d2304
   256e4:	f8889a0e 	.word	0xf8889a0e
   256e8:	9b0f4000 	.word	0x9b0f4000
   256ec:	1018f8c8 	.word	0x1018f8c8
   256f0:	f8c89910 	.word	0xf8c89910
   256f4:	f8c8201c 	.word	0xf8c8201c
   256f8:	f89d3020 	.word	0xf89d3020
   256fc:	f8dd205d 	.word	0xf8dd205d
   25700:	f8c8304d 	.word	0xf8c8304d
   25704:	f8dd1024 	.word	0xf8dd1024
   25708:	f8881051 	.word	0xf8881051
   2570c:	f8dd2044 	.word	0xf8dd2044
   25710:	f8c82055 	.word	0xf8c82055
   25714:	f8dd3034 	.word	0xf8dd3034
   25718:	f8c83059 	.word	0xf8c83059
   2571c:	f8bd1038 	.word	0xf8bd1038
   25720:	f8c81044 	.word	0xf8c81044
   25724:	f8c8203c 	.word	0xf8c8203c
   25728:	f8dd3040 	.word	0xf8dd3040
   2572c:	f89d2046 	.word	0xf89d2046
   25730:	f8a8304a 	.word	0xf8a8304a
   25734:	f8881028 	.word	0xf8881028
   25738:	f8c8302e 	.word	0xf8c8302e
   2573c:	f89d202a 	.word	0xf89d202a
   25740:	f89d004b 	.word	0xf89d004b
   25744:	9b18204c 	.word	0x9b18204c
   25748:	406cf89d 	.word	0x406cf89d
   2574c:	2002ea40 	.word	0x2002ea40
   25750:	206bf89d 	.word	0x206bf89d
   25754:	210ff3c3 	.word	0x210ff3c3
   25758:	ea429b1d 	.word	0xea429b1d
   2575c:	f8a82204 	.word	0xf8a82204
   25760:	f8a80030 	.word	0xf8a80030
   25764:	f8bd104a 	.word	0xf8bd104a
   25768:	f3c3105e 	.word	0xf3c3105e
   2576c:	f8a8230f 	.word	0xf8a8230f
   25770:	f89d2056 	.word	0xf89d2056
   25774:	f8a82060 	.word	0xf8a82060
   25778:	f8dd3062 	.word	0xf8dd3062
   2577c:	f8a83063 	.word	0xf8a83063
   25780:	f8881046 	.word	0xf8881046
   25784:	f8bd2048 	.word	0xf8bd2048
   25788:	f89d2068 	.word	0xf89d2068
   2578c:	f8c81067 	.word	0xf8c81067
   25790:	f89d304c 	.word	0xf89d304c
   25794:	f888306a 	.word	0xf888306a
   25798:	f8a81050 	.word	0xf8a81050
   2579c:	f8882052 	.word	0xf8882052
   257a0:	f8bd3054 	.word	0xf8bd3054
   257a4:	f8dd3072 	.word	0xf8dd3072
   257a8:	f89d106d 	.word	0xf89d106d
   257ac:	f8c82071 	.word	0xf8c82071
   257b0:	f8881058 	.word	0xf8881058
   257b4:	f89d205c 	.word	0xf89d205c
   257b8:	f8dd1074 	.word	0xf8dd1074
   257bc:	f8a82077 	.word	0xf8a82077
   257c0:	f89d305e 	.word	0xf89d305e
   257c4:	f888307b 	.word	0xf888307b
   257c8:	f8c81060 	.word	0xf8c81060
   257cc:	f8882064 	.word	0xf8882064
   257d0:	f89d3068 	.word	0xf89d3068
   257d4:	f89d3080 	.word	0xf89d3080
   257d8:	9a22107f 	.word	0x9a22107f
   257dc:	0094f89d 	.word	0x0094f89d
   257e0:	2103ea41 	.word	0x2103ea41
   257e4:	3093f89d 	.word	0x3093f89d
   257e8:	220ff3c2 	.word	0x220ff3c2
   257ec:	106ef8a8 	.word	0x106ef8a8
   257f0:	107cf8bd 	.word	0x107cf8bd
   257f4:	2300ea43 	.word	0x2300ea43
   257f8:	207af8a8 	.word	0x207af8a8
   257fc:	207ef89d 	.word	0x207ef89d
   25800:	3086f8a8 	.word	0x3086f8a8
   25804:	3081f8dd 	.word	0x3081f8dd
   25808:	106af8a8 	.word	0x106af8a8
   2580c:	206cf888 	.word	0x206cf888
   25810:	2086f8bd 	.word	0x2086f8bd
   25814:	1085f89d 	.word	0x1085f89d
   25818:	3070f8c8 	.word	0x3070f8c8
   2581c:	3088f89d 	.word	0x3088f89d
   25820:	1074f888 	.word	0x1074f888
   25824:	2076f8a8 	.word	0x2076f8a8
   25828:	3078f888 	.word	0x3078f888
   2582c:	3090f8bd 	.word	0x3090f8bd
   25830:	108bf8dd 	.word	0x108bf8dd
   25834:	208ff89d 	.word	0x208ff89d
   25838:	107cf8c8 	.word	0x107cf8c8
   2583c:	2080f888 	.word	0x2080f888
   25840:	1092f89d 	.word	0x1092f89d
   25844:	2095f8dd 	.word	0x2095f8dd
   25848:	3082f8a8 	.word	0x3082f8a8
   2584c:	3099f89d 	.word	0x3099f89d
   25850:	1084f888 	.word	0x1084f888
   25854:	2088f8c8 	.word	0x2088f8c8
   25858:	308cf888 	.word	0x308cf888
   2585c:	009af8bd 	.word	0x009af8bd
   25860:	f89d9b27 	.word	0xf89d9b27
   25864:	f89d40a8 	.word	0xf89d40a8
   25868:	f3c320a7 	.word	0xf3c320a7
   2586c:	9b2c210f 	.word	0x9b2c210f
   25870:	2204ea42 	.word	0x2204ea42
   25874:	1092f8a8 	.word	0x1092f8a8
   25878:	109cf89d 	.word	0x109cf89d
   2587c:	209ef8a8 	.word	0x209ef8a8
   25880:	230ff3c3 	.word	0x230ff3c3
   25884:	209ff8dd 	.word	0x209ff8dd
   25888:	008ef8a8 	.word	0x008ef8a8
   2588c:	30aaf8a8 	.word	0x30aaf8a8
   25890:	1090f888 	.word	0x1090f888
   25894:	30a3f89d 	.word	0x30a3f89d
   25898:	10a4f8bd 	.word	0x10a4f8bd
   2589c:	2094f8c8 	.word	0x2094f8c8
   258a0:	20a6f89d 	.word	0x20a6f89d
   258a4:	3098f888 	.word	0x3098f888
   258a8:	30a9f8dd 	.word	0x30a9f8dd
   258ac:	109af8a8 	.word	0x109af8a8
   258b0:	209cf888 	.word	0x209cf888
   258b4:	20aef8bd 	.word	0x20aef8bd
   258b8:	10adf89d 	.word	0x10adf89d
   258bc:	30a0f8c8 	.word	0x30a0f8c8
   258c0:	30b0f89d 	.word	0x30b0f89d
   258c4:	10a4f888 	.word	0x10a4f888
   258c8:	20a6f8a8 	.word	0x20a6f8a8
   258cc:	30a8f888 	.word	0x30a8f888
   258d0:	30b8f8bd 	.word	0x30b8f8bd
   258d4:	10b3f8dd 	.word	0x10b3f8dd
   258d8:	20b7f89d 	.word	0x20b7f89d
   258dc:	10acf8c8 	.word	0x10acf8c8
   258e0:	20b0f888 	.word	0x20b0f888
   258e4:	30b2f8a8 	.word	0x30b2f8a8
   258e8:	30bcf89d 	.word	0x30bcf89d
   258ec:	10bbf89d 	.word	0x10bbf89d
   258f0:	00d0f89d 	.word	0x00d0f89d
   258f4:	ea419a31 	.word	0xea419a31
   258f8:	f89d2103 	.word	0xf89d2103
   258fc:	f89d30cf 	.word	0xf89d30cf
   25900:	ea4340ba 	.word	0xea4340ba
   25904:	f3c22300 	.word	0xf3c22300
   25908:	f8a8220f 	.word	0xf8a8220f
   2590c:	f8a810b6 	.word	0xf8a810b6
   25910:	f88830ce 	.word	0xf88830ce
   25914:	f8a840b4 	.word	0xf8a840b4
   25918:	f8bd20c2 	.word	0xf8bd20c2
   2591c:	f89d20c2 	.word	0xf89d20c2
   25920:	f89d10c1 	.word	0xf89d10c1
   25924:	f8dd30c4 	.word	0xf8dd30c4
   25928:	f88800bd 	.word	0xf88800bd
   2592c:	f8a810bc 	.word	0xf8a810bc
   25930:	f8c820be 	.word	0xf8c820be
   25934:	f88800b8 	.word	0xf88800b8
   25938:	f8bd30c0 	.word	0xf8bd30c0
   2593c:	f8dd30cc 	.word	0xf8dd30cc
   25940:	f89d10c7 	.word	0xf89d10c7
   25944:	f8c820cb 	.word	0xf8c820cb
   25948:	f88810c4 	.word	0xf88810c4
   2594c:	f89d20c8 	.word	0xf89d20c8
   25950:	f8dd10ce 	.word	0xf8dd10ce
   25954:	f8a820d1 	.word	0xf8a820d1
   25958:	f89d30ca 	.word	0xf89d30ca
   2595c:	f88830d5 	.word	0xf88830d5
   25960:	f8c810cc 	.word	0xf8c810cc
   25964:	f88820d0 	.word	0xf88820d0
   25968:	24d830d4 	.word	0x24d830d4
   2596c:	2016e675 	.word	0x2016e675
   25970:	fe92f7f7 	.word	0xfe92f7f7
   25974:	34fff04f 	.word	0x34fff04f
   25978:	2009e67a 	.word	0x2009e67a
   2597c:	fe8cf7f7 	.word	0xfe8cf7f7
   25980:	34fff04f 	.word	0x34fff04f
   25984:	2039e674 	.word	0x2039e674
   25988:	fe86f7f7 	.word	0xfe86f7f7
   2598c:	34fff04f 	.word	0x34fff04f
   25990:	bf00e66e 	.word	0xbf00e66e

00025994 <gnss_interface_setopt>:
   25994:	47f0e92d 	.word	0x47f0e92d
   25998:	1402f241 	.word	0x1402f241
   2599c:	b0864222 	.word	0xb0864222
   259a0:	d0044d9b 	.word	0xd0044d9b
   259a4:	b2a4682c 	.word	0xb2a4682c
   259a8:	f0402c02 	.word	0xf0402c02
   259ac:	682c8104 	.word	0x682c8104
   259b0:	f1000264 	.word	0xf1000264
   259b4:	f5b18127 	.word	0xf5b18127
   259b8:	f0407f01 	.word	0xf0407f01
   259bc:	4995811d 	.word	0x4995811d
   259c0:	f0404288 	.word	0xf0404288
   259c4:	3a018113 	.word	0x3a018113
   259c8:	f2002a08 	.word	0xf2002a08
   259cc:	e8df80ec 	.word	0xe8df80ec
   259d0:	0075f012 	.word	0x0075f012
   259d4:	00c200d8 	.word	0x00c200d8
   259d8:	008100cc 	.word	0x008100cc
   259dc:	0098008c 	.word	0x0098008c
   259e0:	000900af 	.word	0x000900af
   259e4:	2a019a0e 	.word	0x2a019a0e
   259e8:	80ddf040 	.word	0x80ddf040
   259ec:	1603f241 	.word	0x1603f241
   259f0:	46372240 	.word	0x46372240
   259f4:	9202781b 	.word	0x9202781b
   259f8:	3015f88d 	.word	0x3015f88d
   259fc:	2112682b 	.word	0x2112682b
   25a00:	0380f443 	.word	0x0380f443
   25a04:	602b4668 	.word	0x602b4668
   25a08:	fe68f7f8 	.word	0xfe68f7f8
   25a0c:	98004604 	.word	0x98004604
   25a10:	f0402c00 	.word	0xf0402c00
   25a14:	280080d6 	.word	0x280080d6
   25a18:	80d3f000 	.word	0x80d3f000
   25a1c:	f04f2212 	.word	0xf04f2212
   25a20:	f04f0876 	.word	0xf04f0876
   25a24:	f04f0e49 	.word	0xf04f0e49
   25a28:	f04f0a43 	.word	0xf04f0a43
   25a2c:	f8df0954 	.word	0xf8df0954
   25a30:	a906c1ec 	.word	0xa906c1ec
   25a34:	3000f8bc 	.word	0x3000f8bc
   25a38:	800ef880 	.word	0x800ef880
   25a3c:	b29b3301 	.word	0xb29b3301
   25a40:	4603ea46 	.word	0x4603ea46
   25a44:	6d14f841 	.word	0x6d14f841
   25a48:	71847144 	.word	0x71847144
   25a4c:	720471c4 	.word	0x720471c4
   25a50:	72847244 	.word	0x72847244
   25a54:	710272c4 	.word	0x710272c4
   25a58:	a00cf880 	.word	0xa00cf880
   25a5c:	900df880 	.word	0x900df880
   25a60:	e00ff880 	.word	0xe00ff880
   25a64:	81b8f8df 	.word	0x81b8f8df
   25a68:	f8ac6800 	.word	0xf8ac6800
   25a6c:	f00c3000 	.word	0xf00c3000
   25a70:	4639ff3a 	.word	0x4639ff3a
   25a74:	f8c89800 	.word	0xf8c89800
   25a78:	f7f84000 	.word	0xf7f84000
   25a7c:	2800fe43 	.word	0x2800fe43
   25a80:	80aaf040 	.word	0x80aaf040
   25a84:	4e634f64 	.word	0x4e634f64
   25a88:	46304639 	.word	0x46304639
   25a8c:	fd74f7f7 	.word	0xfd74f7f7
   25a90:	f414682c 	.word	0xf414682c
   25a94:	d1f70480 	.word	0xd1f70480
   25a98:	0000f8d8 	.word	0x0000f8d8
   25a9c:	f7f8b118 	.word	0xf7f8b118
   25aa0:	f8c8fe4f 	.word	0xf8c8fe4f
   25aa4:	682b4000 	.word	0x682b4000
   25aa8:	d576021b 	.word	0xd576021b
   25aac:	682b2000 	.word	0x682b2000
   25ab0:	0300f423 	.word	0x0300f423
   25ab4:	b006602b 	.word	0xb006602b
   25ab8:	87f0e8bd 	.word	0x87f0e8bd
   25abc:	2a029a0e 	.word	0x2a029a0e
   25ac0:	2208d171 	.word	0x2208d171
   25ac4:	1603f241 	.word	0x1603f241
   25ac8:	9202881b 	.word	0x9202881b
   25acc:	300ff8ad 	.word	0x300ff8ad
   25ad0:	e7934637 	.word	0xe7934637
   25ad4:	2a019a0e 	.word	0x2a019a0e
   25ad8:	f241d165 	.word	0xf241d165
   25adc:	781b1603 	.word	0x781b1603
   25ae0:	f88d9202 	.word	0xf88d9202
   25ae4:	4637300c 	.word	0x4637300c
   25ae8:	9a0ee788 	.word	0x9a0ee788
   25aec:	d15a2a01 	.word	0xd15a2a01
   25af0:	f2412202 	.word	0xf2412202
   25af4:	781b1603 	.word	0x781b1603
   25af8:	f88d9202 	.word	0xf88d9202
   25afc:	4637300d 	.word	0x4637300d
   25b00:	682ae77c 	.word	0x682ae77c
   25b04:	2a02b292 	.word	0x2a02b292
   25b08:	9a0ed155 	.word	0x9a0ed155
   25b0c:	d14a2a04 	.word	0xd14a2a04
   25b10:	f2412101 	.word	0xf2412101
   25b14:	682a0604 	.word	0x682a0604
   25b18:	0c136818 	.word	0x0c136818
   25b1c:	f043041b 	.word	0xf043041b
   25b20:	f8cd0303 	.word	0xf8cd0303
   25b24:	602b0009 	.word	0x602b0009
   25b28:	1008f88d 	.word	0x1008f88d
   25b2c:	e7654637 	.word	0xe7654637
   25b30:	b29b682b 	.word	0xb29b682b
   25b34:	d13e2b04 	.word	0xd13e2b04
   25b38:	f2412300 	.word	0xf2412300
   25b3c:	f88d0604 	.word	0xf88d0604
   25b40:	f88d3008 	.word	0xf88d3008
   25b44:	f88d3009 	.word	0xf88d3009
   25b48:	f88d300a 	.word	0xf88d300a
   25b4c:	f88d300b 	.word	0xf88d300b
   25b50:	4637300c 	.word	0x4637300c
   25b54:	9a0ee752 	.word	0x9a0ee752
   25b58:	d1242a01 	.word	0xd1242a01
   25b5c:	2b01781b 	.word	0x2b01781b
   25b60:	f241d121 	.word	0xf241d121
   25b64:	46371603 	.word	0x46371603
   25b68:	9a0ee748 	.word	0x9a0ee748
   25b6c:	d11a2a02 	.word	0xd11a2a02
   25b70:	f2412220 	.word	0xf2412220
   25b74:	881b1603 	.word	0x881b1603
   25b78:	f8ad9202 	.word	0xf8ad9202
   25b7c:	46373013 	.word	0x46373013
   25b80:	9a0ee73c 	.word	0x9a0ee73c
   25b84:	d10e2a02 	.word	0xd10e2a02
   25b88:	f2412210 	.word	0xf2412210
   25b8c:	881b1603 	.word	0x881b1603
   25b90:	f8ad9202 	.word	0xf8ad9202
   25b94:	46373011 	.word	0x46373011
   25b98:	200ee730 	.word	0x200ee730
   25b9c:	fd7cf7f7 	.word	0xfd7cf7f7
   25ba0:	30fff04f 	.word	0x30fff04f
   25ba4:	2016e783 	.word	0x2016e783
   25ba8:	fd76f7f7 	.word	0xfd76f7f7
   25bac:	30fff04f 	.word	0x30fff04f
   25bb0:	e8bdb006 	.word	0xe8bdb006
   25bb4:	200e87f0 	.word	0x200e87f0
   25bb8:	fd6ef7f7 	.word	0xfd6ef7f7
   25bbc:	30fff04f 	.word	0x30fff04f
   25bc0:	6803e779 	.word	0x6803e779
   25bc4:	4618b11b 	.word	0x4618b11b
   25bc8:	fdbaf7f8 	.word	0xfdbaf7f8
   25bcc:	f7f89800 	.word	0xf7f89800
   25bd0:	2023fdaf 	.word	0x2023fdaf
   25bd4:	fd60f7f7 	.word	0xfd60f7f7
   25bd8:	200e682b 	.word	0x200e682b
   25bdc:	0380f423 	.word	0x0380f423
   25be0:	f7f7602b 	.word	0xf7f7602b
   25be4:	f04ffd59 	.word	0xf04ffd59
   25be8:	e76430ff 	.word	0xe76430ff
   25bec:	f7f72009 	.word	0xf7f72009
   25bf0:	f04ffd53 	.word	0xf04ffd53
   25bf4:	e75e30ff 	.word	0xe75e30ff
   25bf8:	f7f7202a 	.word	0xf7f7202a
   25bfc:	f04ffd4d 	.word	0xf04ffd4d
   25c00:	e75830ff 	.word	0xe75830ff
   25c04:	f7f72073 	.word	0xf7f72073
   25c08:	f04ffd47 	.word	0xf04ffd47
   25c0c:	e75230ff 	.word	0xe75230ff
   25c10:	20020390 	.word	0x20020390
   25c14:	49765443 	.word	0x49765443
   25c18:	20028e10 	.word	0x20028e10
   25c1c:	20025b0e 	.word	0x20025b0e
   25c20:	20020338 	.word	0x20020338

00025c24 <gnss_interface_getopt>:
   25c24:	4ff0e92d 	.word	0x4ff0e92d
   25c28:	b0874c81 	.word	0xb0874c81
   25c2c:	46986825 	.word	0x46986825
   25c30:	2d02b2ad 	.word	0x2d02b2ad
   25c34:	f0409b10 	.word	0xf0409b10
   25c38:	682580dc 	.word	0x682580dc
   25c3c:	f10003ee 	.word	0xf10003ee
   25c40:	682580f0 	.word	0x682580f0
   25c44:	f10001ed 	.word	0xf10001ed
   25c48:	f5b180e6 	.word	0xf5b180e6
   25c4c:	f0407f01 	.word	0xf0407f01
   25c50:	497880d6 	.word	0x497880d6
   25c54:	f0404288 	.word	0xf0404288
   25c58:	f1b880d8 	.word	0xf1b880d8
   25c5c:	d00b0f00 	.word	0xd00b0f00
   25c60:	1e57b153 	.word	0x1e57b153
   25c64:	d8072f05 	.word	0xd8072f05
   25c68:	f007e8df 	.word	0xf007e8df
   25c6c:	0f030f0f 	.word	0x0f030f0f
   25c70:	681b0303 	.word	0x681b0303
   25c74:	d00b2b01 	.word	0xd00b2b01
   25c78:	f7f72016 	.word	0xf7f72016
   25c7c:	f04ffd0d 	.word	0xf04ffd0d
   25c80:	462835ff 	.word	0x462835ff
   25c84:	e8bdb007 	.word	0xe8bdb007
   25c88:	681b8ff0 	.word	0x681b8ff0
   25c8c:	d1f32b02 	.word	0xd1f32b02
   25c90:	22126823 	.word	0x22126823
   25c94:	7380f043 	.word	0x7380f043
   25c98:	a8012100 	.word	0xa8012100
   25c9c:	f00c6023 	.word	0xf00c6023
   25ca0:	2112fe2d 	.word	0x2112fe2d
   25ca4:	f7f84668 	.word	0xf7f84668
   25ca8:	4605fd19 	.word	0x4605fd19
   25cac:	2d009800 	.word	0x2d009800
   25cb0:	808af040 	.word	0x808af040
   25cb4:	f0002800 	.word	0xf0002800
   25cb8:	f2418087 	.word	0xf2418087
   25cbc:	f04f1602 	.word	0xf04f1602
   25cc0:	22120e49 	.word	0x22120e49
   25cc4:	0976f04f 	.word	0x0976f04f
   25cc8:	0b43f04f 	.word	0x0b43f04f
   25ccc:	0a54f04f 	.word	0x0a54f04f
   25cd0:	c168f8df 	.word	0xc168f8df
   25cd4:	e00ff880 	.word	0xe00ff880
   25cd8:	3000f8bc 	.word	0x3000f8bc
   25cdc:	900ef880 	.word	0x900ef880
   25ce0:	b29b3301 	.word	0xb29b3301
   25ce4:	4e03ea46 	.word	0x4e03ea46
   25ce8:	e004f8cd 	.word	0xe004f8cd
   25cec:	71857145 	.word	0x71857145
   25cf0:	720571c5 	.word	0x720571c5
   25cf4:	72857245 	.word	0x72857245
   25cf8:	a90172c5 	.word	0xa90172c5
   25cfc:	f8807102 	.word	0xf8807102
   25d00:	f880b00c 	.word	0xf880b00c
   25d04:	f8dfa00d 	.word	0xf8dfa00d
   25d08:	68009138 	.word	0x68009138
   25d0c:	3000f8ac 	.word	0x3000f8ac
   25d10:	fde9f00c 	.word	0xfde9f00c
   25d14:	98004631 	.word	0x98004631
   25d18:	5000f8c9 	.word	0x5000f8c9
   25d1c:	fcf2f7f8 	.word	0xfcf2f7f8
   25d20:	d15c2800 	.word	0xd15c2800
   25d24:	4d434e44 	.word	0x4d434e44
   25d28:	46284631 	.word	0x46284631
   25d2c:	fc24f7f7 	.word	0xfc24f7f7
   25d30:	01db6823 	.word	0x01db6823
   25d34:	f8d9d4f8 	.word	0xf8d9d4f8
   25d38:	b1d80000 	.word	0xb1d80000
   25d3c:	f0156825 	.word	0xf0156825
   25d40:	d00f7500 	.word	0xd00f7500
   25d44:	d8372f05 	.word	0xd8372f05
   25d48:	f007e8df 	.word	0xf007e8df
   25d4c:	2b26201a 	.word	0x2b26201a
   25d50:	25000331 	.word	0x25000331
   25d54:	f8887b43 	.word	0xf8887b43
   25d58:	f7f83000 	.word	0xf7f83000
   25d5c:	2300fcf1 	.word	0x2300fcf1
   25d60:	3000f8c9 	.word	0x3000f8c9
   25d64:	f0236823 	.word	0xf0236823
   25d68:	60237300 	.word	0x60237300
   25d6c:	b0074628 	.word	0xb0074628
   25d70:	8ff0e8bd 	.word	0x8ff0e8bd
   25d74:	46056823 	.word	0x46056823
   25d78:	7300f023 	.word	0x7300f023
   25d7c:	e7f56023 	.word	0xe7f56023
   25d80:	300ff8b0 	.word	0x300ff8b0
   25d84:	f8a82500 	.word	0xf8a82500
   25d88:	e7e63000 	.word	0xe7e63000
   25d8c:	3011f8b0 	.word	0x3011f8b0
   25d90:	f8a82500 	.word	0xf8a82500
   25d94:	e7e03000 	.word	0xe7e03000
   25d98:	25007b83 	.word	0x25007b83
   25d9c:	3000f888 	.word	0x3000f888
   25da0:	f8b0e7db 	.word	0xf8b0e7db
   25da4:	25003013 	.word	0x25003013
   25da8:	3000f8a8 	.word	0x3000f8a8
   25dac:	7b03e7d5 	.word	0x7b03e7d5
   25db0:	f8882500 	.word	0xf8882500
   25db4:	e7d03000 	.word	0xe7d03000
   25db8:	f7f72016 	.word	0xf7f72016
   25dbc:	f04ffc6d 	.word	0xf04ffc6d
   25dc0:	f8d935ff 	.word	0xf8d935ff
   25dc4:	e7c80000 	.word	0xe7c80000
   25dc8:	b11b6803 	.word	0xb11b6803
   25dcc:	f7f84618 	.word	0xf7f84618
   25dd0:	9800fcb7 	.word	0x9800fcb7
   25dd4:	fcacf7f8 	.word	0xfcacf7f8
   25dd8:	f7f72023 	.word	0xf7f72023
   25ddc:	6823fc5d 	.word	0x6823fc5d
   25de0:	f023200e 	.word	0xf023200e
   25de4:	60237380 	.word	0x60237380
   25de8:	35fff04f 	.word	0x35fff04f
   25dec:	fc54f7f7 	.word	0xfc54f7f7
   25df0:	200ee747 	.word	0x200ee747
   25df4:	fc50f7f7 	.word	0xfc50f7f7
   25df8:	35fff04f 	.word	0x35fff04f
   25dfc:	202ae741 	.word	0x202ae741
   25e00:	fc4af7f7 	.word	0xfc4af7f7
   25e04:	35fff04f 	.word	0x35fff04f
   25e08:	2009e73b 	.word	0x2009e73b
   25e0c:	fc44f7f7 	.word	0xfc44f7f7
   25e10:	35fff04f 	.word	0x35fff04f
   25e14:	2073e735 	.word	0x2073e735
   25e18:	fc3ef7f7 	.word	0xfc3ef7f7
   25e1c:	35fff04f 	.word	0x35fff04f
   25e20:	2005e72f 	.word	0x2005e72f
   25e24:	fc38f7f7 	.word	0xfc38f7f7
   25e28:	35fff04f 	.word	0x35fff04f
   25e2c:	bf00e729 	.word	0xbf00e729
   25e30:	20020390 	.word	0x20020390
   25e34:	49765443 	.word	0x49765443
   25e38:	20028e10 	.word	0x20028e10
   25e3c:	20025b0e 	.word	0x20025b0e
   25e40:	20020338 	.word	0x20020338

00025e44 <gnss_interface_init>:
   25e44:	b5382100 	.word	0xb5382100
   25e48:	4d0a4c09 	.word	0x4d0a4c09
   25e4c:	480a6822 	.word	0x480a6822
   25e50:	402a4b0a 	.word	0x402a4b0a
   25e54:	80016022 	.word	0x80016022
   25e58:	f7f86019 	.word	0xf7f86019
   25e5c:	b928fc39 	.word	0xb928fc39
   25e60:	402b6823 	.word	0x402b6823
   25e64:	0301f043 	.word	0x0301f043
   25e68:	bd386023 	.word	0xbd386023
   25e6c:	bd382003 	.word	0xbd382003
   25e70:	20020390 	.word	0x20020390
   25e74:	ffff0000 	.word	0xffff0000
   25e78:	20025b0e 	.word	0x20025b0e
   25e7c:	20020338 	.word	0x20020338

00025e80 <gnss_interface_open>:
   25e80:	b5102801 	.word	0xb5102801
   25e84:	f5b2d120 	.word	0xf5b2d120
   25e88:	d11d7f01 	.word	0xd11d7f01
   25e8c:	d11b2902 	.word	0xd11b2902
   25e90:	68234c13 	.word	0x68234c13
   25e94:	2b01b29b 	.word	0x2b01b29b
   25e98:	6823d11c 	.word	0x6823d11c
   25e9c:	0c1b4608 	.word	0x0c1b4608
   25ea0:	f043041b 	.word	0xf043041b
   25ea4:	22000302 	.word	0x22000302
   25ea8:	6023490e 	.word	0x6023490e
   25eac:	fc14f7fa 	.word	0xfc14f7fa
   25eb0:	60104a0d 	.word	0x60104a0d
   25eb4:	6823b170 	.word	0x6823b170
   25eb8:	f4436802 	.word	0xf4436802
   25ebc:	68123300 	.word	0x68123300
   25ec0:	47906023 	.word	0x47906023
   25ec4:	bd104809 	.word	0xbd104809
   25ec8:	f7f72016 	.word	0xf7f72016
   25ecc:	f04ffbe5 	.word	0xf04ffbe5
   25ed0:	bd1030ff 	.word	0xbd1030ff
   25ed4:	f7f7200e 	.word	0xf7f7200e
   25ed8:	f04ffbdf 	.word	0xf04ffbdf
   25edc:	bd1030ff 	.word	0xbd1030ff
   25ee0:	20020390 	.word	0x20020390
   25ee4:	0001e8f1 	.word	0x0001e8f1
   25ee8:	20020394 	.word	0x20020394
   25eec:	49765443 	.word	0x49765443

00025ef0 <gnss_interface_close>:
   25ef0:	4b13b530 	.word	0x4b13b530
   25ef4:	4298b083 	.word	0x4298b083
   25ef8:	4c12d11c 	.word	0x4c12d11c
   25efc:	b29b6823 	.word	0xb29b6823
   25f00:	d00f2b04 	.word	0xd00f2b04
   25f04:	68284d10 	.word	0x68284d10
   25f08:	f7fab118 	.word	0xf7fab118
   25f0c:	2300fc05 	.word	0x2300fc05
   25f10:	2000602b 	.word	0x2000602b
   25f14:	0c1b6823 	.word	0x0c1b6823
   25f18:	f043041b 	.word	0xf043041b
   25f1c:	60230301 	.word	0x60230301
   25f20:	bd30b003 	.word	0xbd30b003
   25f24:	22082300 	.word	0x22082300
   25f28:	f44f9300 	.word	0xf44f9300
   25f2c:	f7f97101 	.word	0xf7f97101
   25f30:	e7e7fb85 	.word	0xe7e7fb85
   25f34:	f7f72009 	.word	0xf7f72009
   25f38:	f04ffbaf 	.word	0xf04ffbaf
   25f3c:	e7ef30ff 	.word	0xe7ef30ff
   25f40:	49765443 	.word	0x49765443
   25f44:	20020390 	.word	0x20020390
   25f48:	20020394 	.word	0x20020394

00025f4c <rpc_dfu_event_handler>:
   25f4c:	4a08b508 	.word	0x4a08b508
   25f50:	881268c1 	.word	0x881268c1
   25f54:	ebb24603 	.word	0xebb24603
   25f58:	d0054f11 	.word	0xd0054f11
   25f5c:	b1106800 	.word	0xb1106800
   25f60:	f81ef004 	.word	0xf81ef004
   25f64:	bd082000 	.word	0xbd082000
   25f68:	20014a02 	.word	0x20014a02
   25f6c:	bd086013 	.word	0xbd086013
   25f70:	20025b10 	.word	0x20025b10
   25f74:	2002033c 	.word	0x2002033c

00025f78 <mfu_interface_init>:
   25f78:	b5102300 	.word	0xb5102300
   25f7c:	49094808 	.word	0x49094808
   25f80:	4c0a4a09 	.word	0x4c0a4a09
   25f84:	600b8003 	.word	0x600b8003
   25f88:	60236013 	.word	0x60236013
   25f8c:	ffd2f003 	.word	0xffd2f003
   25f90:	2301b910 	.word	0x2301b910
   25f94:	bd106023 	.word	0xbd106023
   25f98:	30fff04f 	.word	0x30fff04f
   25f9c:	bf00bd10 	.word	0xbf00bd10
   25fa0:	20025b10 	.word	0x20025b10
   25fa4:	2002033c 	.word	0x2002033c
   25fa8:	200203a0 	.word	0x200203a0
   25fac:	20020398 	.word	0x20020398

00025fb0 <mfu_interface_open>:
   25fb0:	b5082801 	.word	0xb5082801
   25fb4:	f240d10b 	.word	0xf240d10b
   25fb8:	429a2303 	.word	0x429a2303
   25fbc:	4b09d107 	.word	0x4b09d107
   25fc0:	2a01681a 	.word	0x2a01681a
   25fc4:	2202d109 	.word	0x2202d109
   25fc8:	4807601a 	.word	0x4807601a
   25fcc:	2016bd08 	.word	0x2016bd08
   25fd0:	fb62f7f7 	.word	0xfb62f7f7
   25fd4:	30fff04f 	.word	0x30fff04f
   25fd8:	f7f7bd08 	.word	0xf7f7bd08
   25fdc:	f04ffb5d 	.word	0xf04ffb5d
   25fe0:	bd0830ff 	.word	0xbd0830ff
   25fe4:	20020398 	.word	0x20020398
   25fe8:	49765432 	.word	0x49765432

00025fec <mfu_interface_close>:
   25fec:	4c32b5f0 	.word	0x4c32b5f0
   25ff0:	6823b083 	.word	0x6823b083
   25ff4:	2a011e9a 	.word	0x2a011e9a
   25ff8:	2b03d857 	.word	0x2b03d857
   25ffc:	2301d004 	.word	0x2301d004
   26000:	60232000 	.word	0x60232000
   26004:	bdf0b003 	.word	0xbdf0b003
   26008:	46682100 	.word	0x46682100
   2600c:	ff98f003 	.word	0xff98f003
   26010:	28004603 	.word	0x28004603
   26014:	2104d13d 	.word	0x2104d13d
   26018:	98004e28 	.word	0x98004e28
   2601c:	72018832 	.word	0x72018832
   26020:	b2923201 	.word	0xb2923201
   26024:	f0410411 	.word	0xf0410411
   26028:	4d250106 	.word	0x4d250106
   2602c:	710360c1 	.word	0x710360c1
   26030:	71837143 	.word	0x71837143
   26034:	724371c3 	.word	0x724371c3
   26038:	72c37283 	.word	0x72c37283
   2603c:	80322106 	.word	0x80322106
   26040:	f003602b 	.word	0xf003602b
   26044:	b9d8ff91 	.word	0xb9d8ff91
   26048:	33fff04f 	.word	0x33fff04f
   2604c:	4627ae02 	.word	0x4627ae02
   26050:	3d04f846 	.word	0x3d04f846
   26054:	4631e004 	.word	0x4631e004
   26058:	f7f74638 	.word	0xf7f74638
   2605c:	b9f0fa8d 	.word	0xb9f0fa8d
   26060:	28006828 	.word	0x28006828
   26064:	6905d0f7 	.word	0x6905d0f7
   26068:	ff92f003 	.word	0xff92f003
   2606c:	d0c62d00 	.word	0xd0c62d00
   26070:	20084b14 	.word	0x20084b14
   26074:	f7f7601d 	.word	0xf7f7601d
   26078:	f04ffb0f 	.word	0xf04ffb0f
   2607c:	e7c130ff 	.word	0xe7c130ff
   26080:	68039800 	.word	0x68039800
   26084:	4618b11b 	.word	0x4618b11b
   26088:	ff8af003 	.word	0xff8af003
   2608c:	f0039800 	.word	0xf0039800
   26090:	200cff7f 	.word	0x200cff7f
   26094:	fb00f7f7 	.word	0xfb00f7f7
   26098:	30fff04f 	.word	0x30fff04f
   2609c:	203ce7b2 	.word	0x203ce7b2
   260a0:	fafaf7f7 	.word	0xfafaf7f7
   260a4:	30fff04f 	.word	0x30fff04f
   260a8:	2001e7ac 	.word	0x2001e7ac
   260ac:	faf4f7f7 	.word	0xfaf4f7f7
   260b0:	30fff04f 	.word	0x30fff04f
   260b4:	bf00e7a6 	.word	0xbf00e7a6
   260b8:	20020398 	.word	0x20020398
   260bc:	20025b10 	.word	0x20025b10
   260c0:	2002033c 	.word	0x2002033c
   260c4:	2002039c 	.word	0x2002039c

000260c8 <mfu_interface_sendto>:
   260c8:	47f0e92d 	.word	0x47f0e92d
   260cc:	46154e5a 	.word	0x46154e5a
   260d0:	b0826833 	.word	0xb0826833
   260d4:	2a011e9a 	.word	0x2a011e9a
   260d8:	80a7f200 	.word	0x80a7f200
   260dc:	2900460f 	.word	0x2900460f
   260e0:	809df000 	.word	0x809df000
   260e4:	f0002d00 	.word	0xf0002d00
   260e8:	2b02809a 	.word	0x2b02809a
   260ec:	d04e46e8 	.word	0xd04e46e8
   260f0:	46294640 	.word	0x46294640
   260f4:	ff24f003 	.word	0xff24f003
   260f8:	b1404606 	.word	0xb1404606
   260fc:	f7f7200c 	.word	0xf7f7200c
   26100:	f04ffacb 	.word	0xf04ffacb
   26104:	462835ff 	.word	0x462835ff
   26108:	e8bdb002 	.word	0xe8bdb002
   2610c:	9b0087f0 	.word	0x9b0087f0
   26110:	68184639 	.word	0x68184639
   26114:	f00c462a 	.word	0xf00c462a
   26118:	2104fbe6 	.word	0x2104fbe6
   2611c:	98004c47 	.word	0x98004c47
   26120:	60458823 	.word	0x60458823
   26124:	b29b3301 	.word	0xb29b3301
   26128:	8023041a 	.word	0x8023041a
   2612c:	4c44430a 	.word	0x4c44430a
   26130:	724660c2 	.word	0x724660c2
   26134:	72c67286 	.word	0x72c67286
   26138:	60267201 	.word	0x60267201
   2613c:	ff14f003 	.word	0xff14f003
   26140:	d1622800 	.word	0xd1622800
   26144:	33fff04f 	.word	0x33fff04f
   26148:	4f3bae02 	.word	0x4f3bae02
   2614c:	3d04f846 	.word	0x3d04f846
   26150:	4631e004 	.word	0x4631e004
   26154:	f7f74638 	.word	0xf7f74638
   26158:	b978fa0f 	.word	0xb978fa0f
   2615c:	28006820 	.word	0x28006820
   26160:	6904d0f7 	.word	0x6904d0f7
   26164:	ff14f003 	.word	0xff14f003
   26168:	d0cc2c00 	.word	0xd0cc2c00
   2616c:	20084b35 	.word	0x20084b35
   26170:	f04f601c 	.word	0xf04f601c
   26174:	f7f735ff 	.word	0xf7f735ff
   26178:	e7c4fa8f 	.word	0xe7c4fa8f
   2617c:	35fff04f 	.word	0x35fff04f
   26180:	f7f7203c 	.word	0xf7f7203c
   26184:	4628fa89 	.word	0x4628fa89
   26188:	e8bdb002 	.word	0xe8bdb002
   2618c:	464087f0 	.word	0x464087f0
   26190:	f0032100 	.word	0xf0032100
   26194:	4602fed5 	.word	0x4602fed5
   26198:	d1af2800 	.word	0xd1af2800
   2619c:	0c08f04f 	.word	0x0c08f04f
   261a0:	48294926 	.word	0x48294926
   261a4:	6804880b 	.word	0x6804880b
   261a8:	98003301 	.word	0x98003301
   261ac:	800bb29b 	.word	0x800bb29b
   261b0:	f043041b 	.word	0xf043041b
   261b4:	61040303 	.word	0x61040303
   261b8:	60c34c21 	.word	0x60c34c21
   261bc:	71427102 	.word	0x71427102
   261c0:	71c27182 	.word	0x71c27182
   261c4:	72827242 	.word	0x72827242
   261c8:	f88072c2 	.word	0xf88072c2
   261cc:	2103c008 	.word	0x2103c008
   261d0:	f0036022 	.word	0xf0036022
   261d4:	b9c0fec9 	.word	0xb9c0fec9
   261d8:	33fff04f 	.word	0x33fff04f
   261dc:	0908f10d 	.word	0x0908f10d
   261e0:	3d04f849 	.word	0x3d04f849
   261e4:	e00546b2 	.word	0xe00546b2
   261e8:	46504649 	.word	0x46504649
   261ec:	f9c4f7f7 	.word	0xf9c4f7f7
   261f0:	d1c32800 	.word	0xd1c32800
   261f4:	28006820 	.word	0x28006820
   261f8:	6904d0f6 	.word	0x6904d0f6
   261fc:	fec8f003 	.word	0xfec8f003
   26200:	d1b32c00 	.word	0xd1b32c00
   26204:	60332303 	.word	0x60332303
   26208:	9800e772 	.word	0x9800e772
   2620c:	b11b6803 	.word	0xb11b6803
   26210:	f0034618 	.word	0xf0034618
   26214:	9800fec5 	.word	0x9800fec5
   26218:	febaf003 	.word	0xfebaf003
   2621c:	2016e76e 	.word	0x2016e76e
   26220:	fa3af7f7 	.word	0xfa3af7f7
   26224:	35fff04f 	.word	0x35fff04f
   26228:	2001e76d 	.word	0x2001e76d
   2622c:	fa34f7f7 	.word	0xfa34f7f7
   26230:	35fff04f 	.word	0x35fff04f
   26234:	bf00e767 	.word	0xbf00e767
   26238:	20020398 	.word	0x20020398
   2623c:	20025b10 	.word	0x20025b10
   26240:	2002033c 	.word	0x2002033c
   26244:	2002039c 	.word	0x2002039c
   26248:	200203a0 	.word	0x200203a0

0002624c <mfu_interface_setopt>:
   2624c:	4846b5f0 	.word	0x4846b5f0
   26250:	6800b083 	.word	0x6800b083
   26254:	28013802 	.word	0x28013802
   26258:	f240d877 	.word	0xf240d877
   2625c:	42812003 	.word	0x42812003
   26260:	3a04d16d 	.word	0x3a04d16d
   26264:	d85c2a03 	.word	0xd85c2a03
   26268:	f002e8df 	.word	0xf002e8df
   2626c:	514e024b 	.word	0x514e024b
   26270:	46252407 	.word	0x46252407
   26274:	46682100 	.word	0x46682100
   26278:	fe62f003 	.word	0xfe62f003
   2627c:	28004603 	.word	0x28004603
   26280:	2704d138 	.word	0x2704d138
   26284:	98004e39 	.word	0x98004e39
   26288:	46298832 	.word	0x46298832
   2628c:	b2923201 	.word	0xb2923201
   26290:	4502ea44 	.word	0x4502ea44
   26294:	60c54c36 	.word	0x60c54c36
   26298:	71437103 	.word	0x71437103
   2629c:	71c37183 	.word	0x71c37183
   262a0:	72837243 	.word	0x72837243
   262a4:	720772c3 	.word	0x720772c3
   262a8:	60238032 	.word	0x60238032
   262ac:	fe5cf003 	.word	0xfe5cf003
   262b0:	f04fb9b8 	.word	0xf04fb9b8
   262b4:	ad0233ff 	.word	0xad0233ff
   262b8:	f8454e2b 	.word	0xf8454e2b
   262bc:	e0053d04 	.word	0xe0053d04
   262c0:	46304629 	.word	0x46304629
   262c4:	f958f7f7 	.word	0xf958f7f7
   262c8:	d1312800 	.word	0xd1312800
   262cc:	28006820 	.word	0x28006820
   262d0:	6904d0f6 	.word	0x6904d0f6
   262d4:	fe5cf003 	.word	0xfe5cf003
   262d8:	d13c2c00 	.word	0xd13c2c00
   262dc:	b0034620 	.word	0xb0034620
   262e0:	9800bdf0 	.word	0x9800bdf0
   262e4:	b11b6803 	.word	0xb11b6803
   262e8:	f0034618 	.word	0xf0034618
   262ec:	9800fe59 	.word	0x9800fe59
   262f0:	fe4ef003 	.word	0xfe4ef003
   262f4:	f7f7200c 	.word	0xf7f7200c
   262f8:	f04ff9cf 	.word	0xf04ff9cf
   262fc:	b00330ff 	.word	0xb00330ff
   26300:	2405bdf0 	.word	0x2405bdf0
   26304:	e7b54625 	.word	0xe7b54625
   26308:	46252408 	.word	0x46252408
   2630c:	b1b3e7b2 	.word	0xb1b3e7b2
   26310:	2a049a08 	.word	0x2a049a08
   26314:	2000d113 	.word	0x2000d113
   26318:	4b16681a 	.word	0x4b16681a
   2631c:	b003601a 	.word	0xb003601a
   26320:	202abdf0 	.word	0x202abdf0
   26324:	f9b8f7f7 	.word	0xf9b8f7f7
   26328:	30fff04f 	.word	0x30fff04f
   2632c:	bdf0b003 	.word	0xbdf0b003
   26330:	f7f7203c 	.word	0xf7f7203c
   26334:	f04ff9b1 	.word	0xf04ff9b1
   26338:	b00330ff 	.word	0xb00330ff
   2633c:	2016bdf0 	.word	0x2016bdf0
   26340:	f9aaf7f7 	.word	0xf9aaf7f7
   26344:	30fff04f 	.word	0x30fff04f
   26348:	2001e7c9 	.word	0x2001e7c9
   2634c:	f9a4f7f7 	.word	0xf9a4f7f7
   26350:	30fff04f 	.word	0x30fff04f
   26354:	4b08e7c3 	.word	0x4b08e7c3
   26358:	601c2008 	.word	0x601c2008
   2635c:	f99cf7f7 	.word	0xf99cf7f7
   26360:	30fff04f 	.word	0x30fff04f
   26364:	bf00e7bb 	.word	0xbf00e7bb
   26368:	20020398 	.word	0x20020398
   2636c:	20025b10 	.word	0x20025b10
   26370:	2002033c 	.word	0x2002033c
   26374:	200203a0 	.word	0x200203a0
   26378:	2002039c 	.word	0x2002039c

0002637c <mfu_interface_getopt>:
   2637c:	2003f240 	.word	0x2003f240
   26380:	41f0e92d 	.word	0x41f0e92d
   26384:	b0824281 	.word	0xb0824281
   26388:	f0409e08 	.word	0xf0409e08
   2638c:	461d80ae 	.word	0x461d80ae
   26390:	f0002b00 	.word	0xf0002b00
   26394:	2e0080aa 	.word	0x2e0080aa
   26398:	80a7f000 	.word	0x80a7f000
   2639c:	681b4b5e 	.word	0x681b4b5e
   263a0:	2b013b02 	.word	0x2b013b02
   263a4:	80a7f200 	.word	0x80a7f200
   263a8:	2a133a01 	.word	0x2a133a01
   263ac:	e8dfd879 	.word	0xe8dfd879
   263b0:	5f17f002 	.word	0x5f17f002
   263b4:	78787878 	.word	0x78787878
   263b8:	78787872 	.word	0x78787872
   263bc:	78787878 	.word	0x78787878
   263c0:	78787878 	.word	0x78787878
   263c4:	68330a78 	.word	0x68330a78
   263c8:	f0402b04 	.word	0xf0402b04
   263cc:	2200808e 	.word	0x2200808e
   263d0:	4b524610 	.word	0x4b524610
   263d4:	601a6819 	.word	0x601a6819
   263d8:	b0026029 	.word	0xb0026029
   263dc:	81f0e8bd 	.word	0x81f0e8bd
   263e0:	2b246833 	.word	0x2b246833
   263e4:	8081f040 	.word	0x8081f040
   263e8:	46a02401 	.word	0x46a02401
   263ec:	46682100 	.word	0x46682100
   263f0:	fda6f003 	.word	0xfda6f003
   263f4:	d1462800 	.word	0xd1462800
   263f8:	9b004949 	.word	0x9b004949
   263fc:	f1b8880a 	.word	0xf1b8880a
   26400:	f1020f03 	.word	0xf1020f03
   26404:	b2920201 	.word	0xb2920201
   26408:	4402ea44 	.word	0x4402ea44
   2640c:	800a7118 	.word	0x800a7118
   26410:	715860dc 	.word	0x715860dc
   26414:	71d87198 	.word	0x71d87198
   26418:	2104d04b 	.word	0x2104d04b
   2641c:	4f412200 	.word	0x4f412200
   26420:	46186099 	.word	0x46186099
   26424:	603a4641 	.word	0x603a4641
   26428:	fd9ef003 	.word	0xfd9ef003
   2642c:	d14d2800 	.word	0xd14d2800
   26430:	33fff04f 	.word	0x33fff04f
   26434:	f844ac02 	.word	0xf844ac02
   26438:	f8df3d04 	.word	0xf8df3d04
   2643c:	e00580dc 	.word	0xe00580dc
   26440:	46404621 	.word	0x46404621
   26444:	f898f7f7 	.word	0xf898f7f7
   26448:	d1372800 	.word	0xd1372800
   2644c:	29006839 	.word	0x29006839
   26450:	690cd0f6 	.word	0x690cd0f6
   26454:	d1542c00 	.word	0xd1542c00
   26458:	31146832 	.word	0x31146832
   2645c:	f00c4628 	.word	0xf00c4628
   26460:	6838fa42 	.word	0x6838fa42
   26464:	fd94f003 	.word	0xfd94f003
   26468:	b0024620 	.word	0xb0024620
   2646c:	81f0e8bd 	.word	0x81f0e8bd
   26470:	2b046833 	.word	0x2b046833
   26474:	2402d139 	.word	0x2402d139
   26478:	46682100 	.word	0x46682100
   2647c:	f00346a0 	.word	0xf00346a0
   26480:	2800fd5f 	.word	0x2800fd5f
   26484:	200cd0b8 	.word	0x200cd0b8
   26488:	f906f7f7 	.word	0xf906f7f7
   2648c:	30fff04f 	.word	0x30fff04f
   26490:	e8bdb002 	.word	0xe8bdb002
   26494:	683381f0 	.word	0x683381f0
   26498:	d1262b04 	.word	0xd1262b04
   2649c:	46a02409 	.word	0x46a02409
   264a0:	202ae7a4 	.word	0x202ae7a4
   264a4:	f8f8f7f7 	.word	0xf8f8f7f7
   264a8:	30fff04f 	.word	0x30fff04f
   264ac:	e8bdb002 	.word	0xe8bdb002
   264b0:	4a1d81f0 	.word	0x4a1d81f0
   264b4:	68122108 	.word	0x68122108
   264b8:	e7af611a 	.word	0xe7af611a
   264bc:	f7f7203c 	.word	0xf7f7203c
   264c0:	f04ff8eb 	.word	0xf04ff8eb
   264c4:	b00230ff 	.word	0xb00230ff
   264c8:	81f0e8bd 	.word	0x81f0e8bd
   264cc:	68039800 	.word	0x68039800
   264d0:	4618b11b 	.word	0x4618b11b
   264d4:	fd64f003 	.word	0xfd64f003
   264d8:	f0039800 	.word	0xf0039800
   264dc:	200cfd59 	.word	0x200cfd59
   264e0:	f8daf7f7 	.word	0xf8daf7f7
   264e4:	30fff04f 	.word	0x30fff04f
   264e8:	2016e7d2 	.word	0x2016e7d2
   264ec:	f8d4f7f7 	.word	0xf8d4f7f7
   264f0:	30fff04f 	.word	0x30fff04f
   264f4:	2001e771 	.word	0x2001e771
   264f8:	f8cef7f7 	.word	0xf8cef7f7
   264fc:	30fff04f 	.word	0x30fff04f
   26500:	4b06e76b 	.word	0x4b06e76b
   26504:	601c2008 	.word	0x601c2008
   26508:	f8c6f7f7 	.word	0xf8c6f7f7
   2650c:	f0036838 	.word	0xf0036838
   26510:	f04ffd3f 	.word	0xf04ffd3f
   26514:	e76030ff 	.word	0xe76030ff
   26518:	20020398 	.word	0x20020398
   2651c:	2002039c 	.word	0x2002039c
   26520:	20025b10 	.word	0x20025b10
   26524:	2002033c 	.word	0x2002033c
   26528:	200203a0 	.word	0x200203a0

0002652c <unimplemented_method>:
   2652c:	b508b40f 	.word	0xb508b40f
   26530:	f7f7202d 	.word	0xf7f7202d
   26534:	e8bdf8b1 	.word	0xe8bdf8b1
   26538:	f04f4008 	.word	0xf04f4008
   2653c:	b00430ff 	.word	0xb00430ff
   26540:	bf004770 	.word	0xbf004770

00026544 <bsd_platform_init>:
   26544:	b093b5f0 	.word	0xb093b5f0
   26548:	ff62f003 	.word	0xff62f003
   2654c:	d1522800 	.word	0xd1522800
   26550:	a801492b 	.word	0xa801492b
   26554:	ffd0f003 	.word	0xffd0f003
   26558:	d14c2800 	.word	0xd14c2800
   2655c:	f9a8f7f7 	.word	0xf9a8f7f7
   26560:	f814f003 	.word	0xf814f003
   26564:	d1462800 	.word	0xd1462800
   26568:	f44f2320 	.word	0xf44f2320
   2656c:	22084180 	.word	0x22084180
   26570:	5c40f44f 	.word	0x5c40f44f
   26574:	4e244f23 	.word	0x4e244f23
   26578:	93059303 	.word	0x93059303
   2657c:	4d239307 	.word	0x4d239307
   26580:	910d9109 	.word	0x910d9109
   26584:	49234c22 	.word	0x49234c22
   26588:	e9cd4b23 	.word	0xe9cd4b23
   2658c:	eb0d0010 	.word	0xeb0d0010
   26590:	f8cd0002 	.word	0xf8cd0002
   26594:	e9cdc02c 	.word	0xe9cdc02c
   26598:	9702220e 	.word	0x9702220e
   2659c:	95069604 	.word	0x95069604
   265a0:	910a9408 	.word	0x910a9408
   265a4:	f7f8930c 	.word	0xf7f8930c
   265a8:	b108ff0b 	.word	0xb108ff0b
   265ac:	bdf0b013 	.word	0xbdf0b013
   265b0:	fd8af7fc 	.word	0xfd8af7fc
   265b4:	f7f8b9f8 	.word	0xf7f8b9f8
   265b8:	b9e0f9fb 	.word	0xb9e0f9fb
   265bc:	f832f7fd 	.word	0xf832f7fd
   265c0:	f7fab9c8 	.word	0xf7fab9c8
   265c4:	b9b0f965 	.word	0xb9b0f965
   265c8:	fcd6f7ff 	.word	0xfcd6f7ff
   265cc:	f7f7b998 	.word	0xf7f7b998
   265d0:	b980fff7 	.word	0xb980fff7
   265d4:	f8e6f000 	.word	0xf8e6f000
   265d8:	f005b968 	.word	0xf005b968
   265dc:	b950f90f 	.word	0xb950f90f
   265e0:	fc30f7ff 	.word	0xfc30f7ff
   265e4:	f7f8b938 	.word	0xf7f8b938
   265e8:	3000fbe7 	.word	0x3000fbe7
   265ec:	2001bf18 	.word	0x2001bf18
   265f0:	b0134240 	.word	0xb0134240
   265f4:	f04fbdf0 	.word	0xf04fbdf0
   265f8:	b01330ff 	.word	0xb01330ff
   265fc:	bf00bdf0 	.word	0xbf00bdf0
   26600:	00034108 	.word	0x00034108
   26604:	20010000 	.word	0x20010000
   26608:	20010040 	.word	0x20010040
   2660c:	20010020 	.word	0x20010020
   26610:	20017060 	.word	0x20017060
   26614:	20010060 	.word	0x20010060
   26618:	20013060 	.word	0x20013060

0002661c <bsd_platform_af_method_table_get>:
   2661c:	d02a2805 	.word	0xd02a2805
   26620:	d914b508 	.word	0xd914b508
   26624:	d016280a 	.word	0xd016280a
   26628:	d10b2866 	.word	0xd10b2866
   2662c:	2302f240 	.word	0x2302f240
   26630:	d032429a 	.word	0xd032429a
   26634:	2305f240 	.word	0x2305f240
   26638:	d032429a 	.word	0xd032429a
   2663c:	2301f240 	.word	0x2301f240
   26640:	d02c429a 	.word	0xd02c429a
   26644:	f7f72016 	.word	0xf7f72016
   26648:	2000f827 	.word	0x2000f827
   2664c:	2801bd08 	.word	0x2801bd08
   26650:	2802d016 	.word	0x2802d016
   26654:	f5a2d1f6 	.word	0xf5a2d1f6
   26658:	2a0a7282 	.word	0x2a0a7282
   2665c:	2301d819 	.word	0x2301d819
   26660:	4103f240 	.word	0x4103f240
   26664:	fa034810 	.word	0xfa034810
   26668:	420af202 	.word	0x420af202
   2666c:	0328f100 	.word	0x0328f100
   26670:	4618bf18 	.word	0x4618bf18
   26674:	2903bd08 	.word	0x2903bd08
   26678:	bf18480c 	.word	0xbf18480c
   2667c:	47702000 	.word	0x47702000
   26680:	2303f240 	.word	0x2303f240
   26684:	d006429a 	.word	0xd006429a
   26688:	7f01f5b2 	.word	0x7f01f5b2
   2668c:	4808d1da 	.word	0x4808d1da
   26690:	4805bd08 	.word	0x4805bd08
   26694:	4807bd08 	.word	0x4807bd08
   26698:	4807bd08 	.word	0x4807bd08
   2669c:	4807bd08 	.word	0x4807bd08
   266a0:	4807bd08 	.word	0x4807bd08
   266a4:	bf00bd08 	.word	0xbf00bd08
   266a8:	00033fd4 	.word	0x00033fd4
   266ac:	000340c4 	.word	0x000340c4
   266b0:	00034074 	.word	0x00034074
   266b4:	00034024 	.word	0x00034024
   266b8:	0003404c 	.word	0x0003404c
   266bc:	00033fac 	.word	0x00033fac
   266c0:	0003409c 	.word	0x0003409c

000266c4 <bsd_platform_fd_method_table_get>:
   266c4:	4605b538 	.word	0x4605b538
   266c8:	fe1af7fc 	.word	0xfe1af7fc
   266cc:	b9504604 	.word	0xb9504604
   266d0:	43ab4b2a 	.word	0x43ab4b2a
   266d4:	4b2ad032 	.word	0x4b2ad032
   266d8:	d04343ab 	.word	0xd04343ab
   266dc:	43ab4b29 	.word	0x43ab4b29
   266e0:	4829d146 	.word	0x4829d146
   266e4:	68c3bd38 	.word	0x68c3bd38
   266e8:	2b056942 	.word	0x2b056942
   266ec:	d911d034 	.word	0xd911d034
   266f0:	d0132b0a 	.word	0xd0132b0a
   266f4:	d12a2b66 	.word	0xd12a2b66
   266f8:	2302f240 	.word	0x2302f240
   266fc:	d031429a 	.word	0xd031429a
   26700:	2305f240 	.word	0x2305f240
   26704:	d031429a 	.word	0xd031429a
   26708:	2301f240 	.word	0x2301f240
   2670c:	d11e429a 	.word	0xd11e429a
   26710:	bd38481e 	.word	0xbd38481e
   26714:	d0132b01 	.word	0xd0132b01
   26718:	d1182b02 	.word	0xd1182b02
   2671c:	7282f5a2 	.word	0x7282f5a2
   26720:	d8212a0a 	.word	0xd8212a0a
   26724:	f2402301 	.word	0xf2402301
   26728:	48194103 	.word	0x48194103
   2672c:	f202fa03 	.word	0xf202fa03
   26730:	f100420a 	.word	0xf100420a
   26734:	bf180428 	.word	0xbf180428
   26738:	bd384620 	.word	0xbd384620
   2673c:	bd384815 	.word	0xbd384815
   26740:	2303f240 	.word	0x2303f240
   26744:	d0f9429a 	.word	0xd0f9429a
   26748:	7f01f5b2 	.word	0x7f01f5b2
   2674c:	2016d0c9 	.word	0x2016d0c9
   26750:	ffa2f7f6 	.word	0xffa2f7f6
   26754:	bd382000 	.word	0xbd382000
   26758:	480f6903 	.word	0x480f6903
   2675c:	bf182b03 	.word	0xbf182b03
   26760:	bd382000 	.word	0xbd382000
   26764:	bd38480d 	.word	0xbd38480d
   26768:	bd384809 	.word	0xbd384809
   2676c:	bd38480c 	.word	0xbd38480c
   26770:	f7f62009 	.word	0xf7f62009
   26774:	4620ff91 	.word	0x4620ff91
   26778:	bf00bd38 	.word	0xbf00bd38
   2677c:	49765432 	.word	0x49765432
   26780:	789a0000 	.word	0x789a0000
   26784:	49765443 	.word	0x49765443
   26788:	00034074 	.word	0x00034074
   2678c:	00033fac 	.word	0x00033fac
   26790:	00033fd4 	.word	0x00033fd4
   26794:	00034024 	.word	0x00034024
   26798:	000340c4 	.word	0x000340c4
   2679c:	0003404c 	.word	0x0003404c
   267a0:	0003409c 	.word	0x0003409c

000267a4 <nrf_inbuilt_key_init>:
   267a4:	b086b570 	.word	0xb086b570
   267a8:	a802491d 	.word	0xa802491d
   267ac:	fea4f003 	.word	0xfea4f003
   267b0:	4601bb00 	.word	0x4601bb00
   267b4:	f2404604 	.word	0xf2404604
   267b8:	20662201 	.word	0x20662201
   267bc:	f8faf7f8 	.word	0xf8faf7f8
   267c0:	28004e18 	.word	0x28004e18
   267c4:	60304605 	.word	0x60304605
   267c8:	4817db10 	.word	0x4817db10
   267cc:	fb90f7f3 	.word	0xfb90f7f3
   267d0:	46024623 	.word	0x46024623
   267d4:	46284914 	.word	0x46284914
   267d8:	94009401 	.word	0x94009401
   267dc:	f894f7f8 	.word	0xf894f7f8
   267e0:	48114605 	.word	0x48114605
   267e4:	fb84f7f3 	.word	0xfb84f7f3
   267e8:	d00742a8 	.word	0xd00742a8
   267ec:	46202405 	.word	0x46202405
   267f0:	bd70b006 	.word	0xbd70b006
   267f4:	46202469 	.word	0x46202469
   267f8:	bd70b006 	.word	0xbd70b006
   267fc:	e9cd6830 	.word	0xe9cd6830
   26800:	a9034400 	.word	0xa9034400
   26804:	220a4623 	.word	0x220a4623
   26808:	f966f7f8 	.word	0xf966f7f8
   2680c:	dded2801 	.word	0xdded2801
   26810:	2202a803 	.word	0x2202a803
   26814:	f00c4905 	.word	0xf00c4905
   26818:	2800f9bb 	.word	0x2800f9bb
   2681c:	e7e5d0e7 	.word	0xe7e5d0e7
   26820:	20028e18 	.word	0x20028e18
   26824:	20028e14 	.word	0x20028e14
   26828:	0003411c 	.word	0x0003411c
   2682c:	00033cfc 	.word	0x00033cfc

00026830 <symbol_0005436>:
   26830:	460a4b02 	.word	0x460a4b02
   26834:	2100681b 	.word	0x2100681b
   26838:	bf004718 	.word	0xbf004718
   2683c:	20028e2c 	.word	0x20028e2c

00026840 <mpi_mul_hlp>:
   26840:	e92d280f 	.word	0xe92d280f
   26844:	46864ff0 	.word	0x46864ff0
   26848:	82e0f240 	.word	0x82e0f240
   2684c:	0800f04f 	.word	0x0800f04f
   26850:	f1014684 	.word	0xf1014684
   26854:	f1020440 	.word	0xf1020440
   26858:	f8540040 	.word	0xf8540040
   2685c:	f8506c40 	.word	0xf8506c40
   26860:	fba35c40 	.word	0xfba35c40
   26864:	eb186706 	.word	0xeb186706
   26868:	bf2c0806 	.word	0xbf2c0806
   2686c:	0901f04f 	.word	0x0901f04f
   26870:	0900f04f 	.word	0x0900f04f
   26874:	0508eb15 	.word	0x0508eb15
   26878:	f04f444f 	.word	0xf04f444f
   2687c:	bf280900 	.word	0xbf280900
   26880:	0901f04f 	.word	0x0901f04f
   26884:	5c40f840 	.word	0x5c40f840
   26888:	6c3cf854 	.word	0x6c3cf854
   2688c:	fba344b9 	.word	0xfba344b9
   26890:	eb19ab06 	.word	0xeb19ab06
   26894:	bf2c090a 	.word	0xbf2c090a
   26898:	0801f04f 	.word	0x0801f04f
   2689c:	0800f04f 	.word	0x0800f04f
   268a0:	6c3cf850 	.word	0x6c3cf850
   268a4:	050beb08 	.word	0x050beb08
   268a8:	0609eb16 	.word	0x0609eb16
   268ac:	0800f04f 	.word	0x0800f04f
   268b0:	f04fbf28 	.word	0xf04fbf28
   268b4:	f8400801 	.word	0xf8400801
   268b8:	f8546c3c 	.word	0xf8546c3c
   268bc:	44a86c38 	.word	0x44a86c38
   268c0:	6706fba3 	.word	0x6706fba3
   268c4:	0806eb18 	.word	0x0806eb18
   268c8:	f04fbf2c 	.word	0xf04fbf2c
   268cc:	f04f0901 	.word	0xf04f0901
   268d0:	f8500900 	.word	0xf8500900
   268d4:	444f5c38 	.word	0x444f5c38
   268d8:	0508eb15 	.word	0x0508eb15
   268dc:	0900f04f 	.word	0x0900f04f
   268e0:	f04fbf28 	.word	0xf04fbf28
   268e4:	f8400901 	.word	0xf8400901
   268e8:	f8545c38 	.word	0xf8545c38
   268ec:	44b96c34 	.word	0x44b96c34
   268f0:	ab06fba3 	.word	0xab06fba3
   268f4:	090aeb19 	.word	0x090aeb19
   268f8:	f04fbf2c 	.word	0xf04fbf2c
   268fc:	f04f0801 	.word	0xf04f0801
   26900:	f8500800 	.word	0xf8500800
   26904:	eb086c34 	.word	0xeb086c34
   26908:	eb16050b 	.word	0xeb16050b
   2690c:	f04f0609 	.word	0xf04f0609
   26910:	bf280800 	.word	0xbf280800
   26914:	0801f04f 	.word	0x0801f04f
   26918:	6c34f840 	.word	0x6c34f840
   2691c:	6c30f854 	.word	0x6c30f854
   26920:	fba344a8 	.word	0xfba344a8
   26924:	eb186706 	.word	0xeb186706
   26928:	bf2c0806 	.word	0xbf2c0806
   2692c:	0901f04f 	.word	0x0901f04f
   26930:	0900f04f 	.word	0x0900f04f
   26934:	5c30f850 	.word	0x5c30f850
   26938:	eb15444f 	.word	0xeb15444f
   2693c:	f04f0508 	.word	0xf04f0508
   26940:	bf280900 	.word	0xbf280900
   26944:	0901f04f 	.word	0x0901f04f
   26948:	5c30f840 	.word	0x5c30f840
   2694c:	6c2cf854 	.word	0x6c2cf854
   26950:	fba344b9 	.word	0xfba344b9
   26954:	eb19ab06 	.word	0xeb19ab06
   26958:	bf2c090a 	.word	0xbf2c090a
   2695c:	0801f04f 	.word	0x0801f04f
   26960:	0800f04f 	.word	0x0800f04f
   26964:	6c2cf850 	.word	0x6c2cf850
   26968:	050beb08 	.word	0x050beb08
   2696c:	0609eb16 	.word	0x0609eb16
   26970:	0800f04f 	.word	0x0800f04f
   26974:	f04fbf28 	.word	0xf04fbf28
   26978:	f8400801 	.word	0xf8400801
   2697c:	f8546c2c 	.word	0xf8546c2c
   26980:	44a86c28 	.word	0x44a86c28
   26984:	6706fba3 	.word	0x6706fba3
   26988:	0806eb18 	.word	0x0806eb18
   2698c:	f04fbf2c 	.word	0xf04fbf2c
   26990:	f04f0901 	.word	0xf04f0901
   26994:	f8500900 	.word	0xf8500900
   26998:	444f5c28 	.word	0x444f5c28
   2699c:	0508eb15 	.word	0x0508eb15
   269a0:	0900f04f 	.word	0x0900f04f
   269a4:	f04fbf28 	.word	0xf04fbf28
   269a8:	f8400901 	.word	0xf8400901
   269ac:	f8545c28 	.word	0xf8545c28
   269b0:	44b96c24 	.word	0x44b96c24
   269b4:	ab06fba3 	.word	0xab06fba3
   269b8:	090aeb19 	.word	0x090aeb19
   269bc:	f04fbf2c 	.word	0xf04fbf2c
   269c0:	f04f0801 	.word	0xf04f0801
   269c4:	f8500800 	.word	0xf8500800
   269c8:	eb086c24 	.word	0xeb086c24
   269cc:	eb16050b 	.word	0xeb16050b
   269d0:	f04f0609 	.word	0xf04f0609
   269d4:	bf280800 	.word	0xbf280800
   269d8:	0801f04f 	.word	0x0801f04f
   269dc:	6c24f840 	.word	0x6c24f840
   269e0:	6c20f854 	.word	0x6c20f854
   269e4:	fba344a8 	.word	0xfba344a8
   269e8:	eb186706 	.word	0xeb186706
   269ec:	bf2c0806 	.word	0xbf2c0806
   269f0:	0901f04f 	.word	0x0901f04f
   269f4:	0900f04f 	.word	0x0900f04f
   269f8:	5c20f850 	.word	0x5c20f850
   269fc:	eb15444f 	.word	0xeb15444f
   26a00:	f04f0508 	.word	0xf04f0508
   26a04:	bf280900 	.word	0xbf280900
   26a08:	0901f04f 	.word	0x0901f04f
   26a0c:	5c20f840 	.word	0x5c20f840
   26a10:	6c1cf854 	.word	0x6c1cf854
   26a14:	fba344b9 	.word	0xfba344b9
   26a18:	eb19ab06 	.word	0xeb19ab06
   26a1c:	bf2c090a 	.word	0xbf2c090a
   26a20:	0801f04f 	.word	0x0801f04f
   26a24:	0800f04f 	.word	0x0800f04f
   26a28:	6c1cf850 	.word	0x6c1cf850
   26a2c:	050beb08 	.word	0x050beb08
   26a30:	0609eb16 	.word	0x0609eb16
   26a34:	0800f04f 	.word	0x0800f04f
   26a38:	f04fbf28 	.word	0xf04fbf28
   26a3c:	f8400801 	.word	0xf8400801
   26a40:	f8546c1c 	.word	0xf8546c1c
   26a44:	44a86c18 	.word	0x44a86c18
   26a48:	6706fba3 	.word	0x6706fba3
   26a4c:	0806eb18 	.word	0x0806eb18
   26a50:	f04fbf2c 	.word	0xf04fbf2c
   26a54:	f04f0901 	.word	0xf04f0901
   26a58:	f8500900 	.word	0xf8500900
   26a5c:	444f5c18 	.word	0x444f5c18
   26a60:	0508eb15 	.word	0x0508eb15
   26a64:	0900f04f 	.word	0x0900f04f
   26a68:	f04fbf28 	.word	0xf04fbf28
   26a6c:	f8400901 	.word	0xf8400901
   26a70:	f8545c18 	.word	0xf8545c18
   26a74:	44b96c14 	.word	0x44b96c14
   26a78:	ab06fba3 	.word	0xab06fba3
   26a7c:	090aeb19 	.word	0x090aeb19
   26a80:	f04fbf2c 	.word	0xf04fbf2c
   26a84:	f04f0801 	.word	0xf04f0801
   26a88:	f8500800 	.word	0xf8500800
   26a8c:	eb086c14 	.word	0xeb086c14
   26a90:	eb16050b 	.word	0xeb16050b
   26a94:	f04f0609 	.word	0xf04f0609
   26a98:	bf280800 	.word	0xbf280800
   26a9c:	0801f04f 	.word	0x0801f04f
   26aa0:	6c14f840 	.word	0x6c14f840
   26aa4:	6c10f854 	.word	0x6c10f854
   26aa8:	fba344a8 	.word	0xfba344a8
   26aac:	eb186706 	.word	0xeb186706
   26ab0:	bf2c0806 	.word	0xbf2c0806
   26ab4:	0901f04f 	.word	0x0901f04f
   26ab8:	0900f04f 	.word	0x0900f04f
   26abc:	5c10f850 	.word	0x5c10f850
   26ac0:	eb15444f 	.word	0xeb15444f
   26ac4:	f04f0508 	.word	0xf04f0508
   26ac8:	bf280900 	.word	0xbf280900
   26acc:	0901f04f 	.word	0x0901f04f
   26ad0:	5c10f840 	.word	0x5c10f840
   26ad4:	6c0cf854 	.word	0x6c0cf854
   26ad8:	fba344b9 	.word	0xfba344b9
   26adc:	eb19ab06 	.word	0xeb19ab06
   26ae0:	bf2c090a 	.word	0xbf2c090a
   26ae4:	0801f04f 	.word	0x0801f04f
   26ae8:	0800f04f 	.word	0x0800f04f
   26aec:	6c0cf850 	.word	0x6c0cf850
   26af0:	050beb08 	.word	0x050beb08
   26af4:	0609eb16 	.word	0x0609eb16
   26af8:	0800f04f 	.word	0x0800f04f
   26afc:	f04fbf28 	.word	0xf04fbf28
   26b00:	f8400801 	.word	0xf8400801
   26b04:	f8546c0c 	.word	0xf8546c0c
   26b08:	44a86c08 	.word	0x44a86c08
   26b0c:	6706fba3 	.word	0x6706fba3
   26b10:	0806eb18 	.word	0x0806eb18
   26b14:	f04fbf2c 	.word	0xf04fbf2c
   26b18:	f04f0901 	.word	0xf04f0901
   26b1c:	f8500900 	.word	0xf8500900
   26b20:	444f5c08 	.word	0x444f5c08
   26b24:	0508eb15 	.word	0x0508eb15
   26b28:	0900f04f 	.word	0x0900f04f
   26b2c:	f04fbf28 	.word	0xf04fbf28
   26b30:	f8400901 	.word	0xf8400901
   26b34:	f8545c08 	.word	0xf8545c08
   26b38:	44b96c04 	.word	0x44b96c04
   26b3c:	ab06fba3 	.word	0xab06fba3
   26b40:	090aeb19 	.word	0x090aeb19
   26b44:	f04fbf2c 	.word	0xf04fbf2c
   26b48:	f04f0801 	.word	0xf04f0801
   26b4c:	f8500800 	.word	0xf8500800
   26b50:	eb086c04 	.word	0xeb086c04
   26b54:	eb16050b 	.word	0xeb16050b
   26b58:	f04f0609 	.word	0xf04f0609
   26b5c:	bf280800 	.word	0xbf280800
   26b60:	0801f04f 	.word	0x0801f04f
   26b64:	0c10f1ac 	.word	0x0c10f1ac
   26b68:	0f0ff1bc 	.word	0x0f0ff1bc
   26b6c:	6c04f840 	.word	0x6c04f840
   26b70:	f10444a8 	.word	0xf10444a8
   26b74:	f1000440 	.word	0xf1000440
   26b78:	f63f0040 	.word	0xf63f0040
   26b7c:	f1aeae6e 	.word	0xf1aeae6e
   26b80:	09000010 	.word	0x09000010
   26b84:	01803001 	.word	0x01803001
   26b88:	44024401 	.word	0x44024401
   26b8c:	000ff00e 	.word	0x000ff00e
   26b90:	68172807 	.word	0x68172807
   26b94:	8092f240 	.word	0x8092f240
   26b98:	6856680c 	.word	0x6856680c
   26b9c:	9a04fba3 	.word	0x9a04fba3
   26ba0:	0809eb18 	.word	0x0809eb18
   26ba4:	f04fbf2c 	.word	0xf04fbf2c
   26ba8:	f04f0c01 	.word	0xf04f0c01
   26bac:	eb170c00 	.word	0xeb170c00
   26bb0:	bf2c0708 	.word	0xbf2c0708
   26bb4:	24002401 	.word	0x24002401
   26bb8:	684f6017 	.word	0x684f6017
   26bbc:	050ceb0a 	.word	0x050ceb0a
   26bc0:	8907fba3 	.word	0x8907fba3
   26bc4:	eb14442c 	.word	0xeb14442c
   26bc8:	bf2c0408 	.word	0xbf2c0408
   26bcc:	25002501 	.word	0x25002501
   26bd0:	eb0519a6 	.word	0xeb0519a6
   26bd4:	f04f0709 	.word	0xf04f0709
   26bd8:	bf280500 	.word	0xbf280500
   26bdc:	60562501 	.word	0x60562501
   26be0:	443d688e 	.word	0x443d688e
   26be4:	7806fba3 	.word	0x7806fba3
   26be8:	bf2c19ed 	.word	0xbf2c19ed
   26bec:	24002401 	.word	0x24002401
   26bf0:	eb086896 	.word	0xeb086896
   26bf4:	19ad0704 	.word	0x19ad0704
   26bf8:	0400f04f 	.word	0x0400f04f
   26bfc:	2401bf28 	.word	0x2401bf28
   26c00:	68ce6095 	.word	0x68ce6095
   26c04:	fba3443c 	.word	0xfba3443c
   26c08:	19e47806 	.word	0x19e47806
   26c0c:	2501bf2c 	.word	0x2501bf2c
   26c10:	68d62500 	.word	0x68d62500
   26c14:	0705eb08 	.word	0x0705eb08
   26c18:	f04f19a4 	.word	0xf04f19a4
   26c1c:	bf280500 	.word	0xbf280500
   26c20:	60d42501 	.word	0x60d42501
   26c24:	443d690e 	.word	0x443d690e
   26c28:	7806fba3 	.word	0x7806fba3
   26c2c:	bf2c19ed 	.word	0xbf2c19ed
   26c30:	24002401 	.word	0x24002401
   26c34:	eb086916 	.word	0xeb086916
   26c38:	19ad0704 	.word	0x19ad0704
   26c3c:	0400f04f 	.word	0x0400f04f
   26c40:	2401bf28 	.word	0x2401bf28
   26c44:	694e6115 	.word	0x694e6115
   26c48:	fba3443c 	.word	0xfba3443c
   26c4c:	19e47806 	.word	0x19e47806
   26c50:	2501bf2c 	.word	0x2501bf2c
   26c54:	69562500 	.word	0x69562500
   26c58:	0705eb08 	.word	0x0705eb08
   26c5c:	f04f19a4 	.word	0xf04f19a4
   26c60:	bf280500 	.word	0xbf280500
   26c64:	61542501 	.word	0x61542501
   26c68:	443d698e 	.word	0x443d698e
   26c6c:	7806fba3 	.word	0x7806fba3
   26c70:	bf2c19ed 	.word	0xbf2c19ed
   26c74:	24002401 	.word	0x24002401
   26c78:	eb086996 	.word	0xeb086996
   26c7c:	19ad0704 	.word	0x19ad0704
   26c80:	0400f04f 	.word	0x0400f04f
   26c84:	2401bf28 	.word	0x2401bf28
   26c88:	69ce6195 	.word	0x69ce6195
   26c8c:	fba3443c 	.word	0xfba3443c
   26c90:	eb149a06 	.word	0xeb149a06
   26c94:	bf2c0409 	.word	0xbf2c0409
   26c98:	0801f04f 	.word	0x0801f04f
   26c9c:	0800f04f 	.word	0x0800f04f
   26ca0:	eb0869d6 	.word	0xeb0869d6
   26ca4:	19a4050a 	.word	0x19a4050a
   26ca8:	0800f04f 	.word	0x0800f04f
   26cac:	f04fbf28 	.word	0xf04fbf28
   26cb0:	61d40801 	.word	0x61d40801
   26cb4:	44a83120 	.word	0x44a83120
   26cb8:	32203808 	.word	0x32203808
   26cbc:	f0002800 	.word	0xf0002800
   26cc0:	680c8097 	.word	0x680c8097
   26cc4:	fba36816 	.word	0xfba36816
   26cc8:	eb199a04 	.word	0xeb199a04
   26ccc:	bf2c0808 	.word	0xbf2c0808
   26cd0:	24002401 	.word	0x24002401
   26cd4:	0608eb16 	.word	0x0608eb16
   26cd8:	0500f04f 	.word	0x0500f04f
   26cdc:	2501bf28 	.word	0x2501bf28
   26ce0:	28014454 	.word	0x28014454
   26ce4:	0804eb05 	.word	0x0804eb05
   26ce8:	d07f6016 	.word	0xd07f6016
   26cec:	6856684c 	.word	0x6856684c
   26cf0:	9a04fba3 	.word	0x9a04fba3
   26cf4:	0808eb19 	.word	0x0808eb19
   26cf8:	2401bf2c 	.word	0x2401bf2c
   26cfc:	eb162400 	.word	0xeb162400
   26d00:	f04f0608 	.word	0xf04f0608
   26d04:	bf280500 	.word	0xbf280500
   26d08:	44542501 	.word	0x44542501
   26d0c:	eb052802 	.word	0xeb052802
   26d10:	60560804 	.word	0x60560804
   26d14:	688cd06a 	.word	0x688cd06a
   26d18:	fba36896 	.word	0xfba36896
   26d1c:	eb199a04 	.word	0xeb199a04
   26d20:	bf2c0808 	.word	0xbf2c0808
   26d24:	24002401 	.word	0x24002401
   26d28:	0608eb16 	.word	0x0608eb16
   26d2c:	0500f04f 	.word	0x0500f04f
   26d30:	2501bf28 	.word	0x2501bf28
   26d34:	28034454 	.word	0x28034454
   26d38:	0804eb05 	.word	0x0804eb05
   26d3c:	d0556096 	.word	0xd0556096
   26d40:	68d668cc 	.word	0x68d668cc
   26d44:	9a04fba3 	.word	0x9a04fba3
   26d48:	0808eb19 	.word	0x0808eb19
   26d4c:	2401bf2c 	.word	0x2401bf2c
   26d50:	eb162400 	.word	0xeb162400
   26d54:	f04f0608 	.word	0xf04f0608
   26d58:	bf280500 	.word	0xbf280500
   26d5c:	44542501 	.word	0x44542501
   26d60:	eb052804 	.word	0xeb052804
   26d64:	60d60804 	.word	0x60d60804
   26d68:	690cd040 	.word	0x690cd040
   26d6c:	fba36916 	.word	0xfba36916
   26d70:	eb199a04 	.word	0xeb199a04
   26d74:	bf2c0408 	.word	0xbf2c0408
   26d78:	0801f04f 	.word	0x0801f04f
   26d7c:	0800f04f 	.word	0x0800f04f
   26d80:	eb0a19a6 	.word	0xeb0a19a6
   26d84:	f04f0508 	.word	0xf04f0508
   26d88:	bf280800 	.word	0xbf280800
   26d8c:	0801f04f 	.word	0x0801f04f
   26d90:	44a82805 	.word	0x44a82805
   26d94:	d0296116 	.word	0xd0296116
   26d98:	6956694c 	.word	0x6956694c
   26d9c:	9a04fba3 	.word	0x9a04fba3
   26da0:	0409eb18 	.word	0x0409eb18
   26da4:	f04fbf2c 	.word	0xf04fbf2c
   26da8:	f04f0801 	.word	0xf04f0801
   26dac:	19a60800 	.word	0x19a60800
   26db0:	0508eb0a 	.word	0x0508eb0a
   26db4:	0800f04f 	.word	0x0800f04f
   26db8:	f04fbf28 	.word	0xf04fbf28
   26dbc:	28060801 	.word	0x28060801
   26dc0:	615644a8 	.word	0x615644a8
   26dc4:	698cd012 	.word	0x698cd012
   26dc8:	fba36991 	.word	0xfba36991
   26dcc:	eb144504 	.word	0xeb144504
   26dd0:	bf2c0808 	.word	0xbf2c0808
   26dd4:	23002301 	.word	0x23002301
   26dd8:	0108eb11 	.word	0x0108eb11
   26ddc:	0400f04f 	.word	0x0400f04f
   26de0:	2401bf28 	.word	0x2401bf28
   26de4:	eb04442b 	.word	0xeb04442b
   26de8:	61910803 	.word	0x61910803
   26dec:	0280eb02 	.word	0x0280eb02
   26df0:	23006815 	.word	0x23006815
   26df4:	0508eb15 	.word	0x0508eb15
   26df8:	2301bf28 	.word	0x2301bf28
   26dfc:	5b04f842 	.word	0x5b04f842
   26e00:	0801f04f 	.word	0x0801f04f
   26e04:	d1f32b00 	.word	0xd1f32b00
   26e08:	8ff0e8bd 	.word	0x8ff0e8bd
   26e0c:	0800f04f 	.word	0x0800f04f
   26e10:	bf00e6be 	.word	0xbf00e6be

00026e14 <symbol_0002616>:
   26e14:	2b006843 	.word	0x2b006843
   26e18:	b430d033 	.word	0xb430d033
   26e1c:	4280f103 	.word	0x4280f103
   26e20:	3a016885 	.word	0x3a016885
   26e24:	4022f855 	.word	0x4022f855
   26e28:	0282eb05 	.word	0x0282eb05
   26e2c:	e009b11c 	.word	0xe009b11c
   26e30:	4d04f852 	.word	0x4d04f852
   26e34:	3b01b934 	.word	0x3b01b934
   26e38:	688bd1fa 	.word	0x688bd1fa
   26e3c:	b9d06818 	.word	0xb9d06818
   26e40:	4770bc30 	.word	0x4770bc30
   26e44:	6812688a 	.word	0x6812688a
   26e48:	2b01b192 	.word	0x2b01b192
   26e4c:	6800d810 	.word	0x6800d810
   26e50:	2800680b 	.word	0x2800680b
   26e54:	2b00dd01 	.word	0x2b00dd01
   26e58:	2b00db11 	.word	0x2b00db11
   26e5c:	2800dd01 	.word	0x2800dd01
   26e60:	682bdb16 	.word	0x682bdb16
   26e64:	d8eb4293 	.word	0xd8eb4293
   26e68:	bc30d306 	.word	0xbc30d306
   26e6c:	47702000 	.word	0x47702000
   26e70:	bc306800 	.word	0xbc306800
   26e74:	68084770 	.word	0x68084770
   26e78:	bc304240 	.word	0xbc304240
   26e7c:	20014770 	.word	0x20014770
   26e80:	688be7de 	.word	0x688be7de
   26e84:	b9006818 	.word	0xb9006818
   26e88:	68084770 	.word	0x68084770
   26e8c:	e7fb4240 	.word	0xe7fb4240
   26e90:	30fff04f 	.word	0x30fff04f
   26e94:	bf00e7d4 	.word	0xbf00e7d4

00026e98 <symbol_00038d0>:
   26e98:	2300b120 	.word	0x2300b120
   26e9c:	e9c02201 	.word	0xe9c02201
   26ea0:	60832300 	.word	0x60832300
   26ea4:	bf004770 	.word	0xbf004770

00026ea8 <symbol_000fb6e>:
   26ea8:	b510b1b0 	.word	0xb510b1b0
   26eac:	68804604 	.word	0x68804604
   26eb0:	6862b160 	.word	0x6862b160
   26eb4:	b13a1e53 	.word	0xb13a1e53
   26eb8:	3b012200 	.word	0x3b012200
   26ebc:	60021c59 	.word	0x60021c59
   26ec0:	0004f100 	.word	0x0004f100
   26ec4:	68a0d1f9 	.word	0x68a0d1f9
   26ec8:	fc4ef003 	.word	0xfc4ef003
   26ecc:	22012300 	.word	0x22012300
   26ed0:	2300e9c4 	.word	0x2300e9c4
   26ed4:	bd1060a3 	.word	0xbd1060a3
   26ed8:	bf004770 	.word	0xbf004770

00026edc <symbol_0006423>:
   26edc:	6842b570 	.word	0x6842b570
   26ee0:	428a4605 	.word	0x428a4605
   26ee4:	d807460c 	.word	0xd807460c
   26ee8:	7310f242 	.word	0x7310f242
   26eec:	d8514299 	.word	0xd8514299
   26ef0:	d335428a 	.word	0xd335428a
   26ef4:	bd702000 	.word	0xbd702000
   26ef8:	d0101e51 	.word	0xd0101e51
   26efc:	f8536883 	.word	0xf8536883
   26f00:	28000021 	.word	0x28000021
   26f04:	f102d149 	.word	0xf102d149
   26f08:	3a014280 	.word	0x3a014280
   26f0c:	0382eb03 	.word	0x0382eb03
   26f10:	f853e003 	.word	0xf853e003
   26f14:	b9180d04 	.word	0xb9180d04
   26f18:	1e4a4611 	.word	0x1e4a4611
   26f1c:	2101d1f9 	.word	0x2101d1f9
   26f20:	bf38428c 	.word	0xbf38428c
   26f24:	2104460c 	.word	0x2104460c
   26f28:	f0034620 	.word	0xf0034620
   26f2c:	4606fc09 	.word	0x4606fc09
   26f30:	68a9b380 	.word	0x68a9b380
   26f34:	00a2b181 	.word	0x00a2b181
   26f38:	fcd5f00b 	.word	0xfcd5f00b
   26f3c:	2001e9d5 	.word	0x2001e9d5
   26f40:	b13a1e53 	.word	0xb13a1e53
   26f44:	3b012200 	.word	0x3b012200
   26f48:	60021c59 	.word	0x60021c59
   26f4c:	0004f100 	.word	0x0004f100
   26f50:	68a8d1f9 	.word	0x68a8d1f9
   26f54:	fc08f003 	.word	0xfc08f003
   26f58:	4601e9c5 	.word	0x4601e9c5
   26f5c:	bd702000 	.word	0xbd702000
   26f60:	46202104 	.word	0x46202104
   26f64:	fbecf003 	.word	0xfbecf003
   26f68:	b1984606 	.word	0xb1984606
   26f6c:	290068a9 	.word	0x290068a9
   26f70:	686ad0f2 	.word	0x686ad0f2
   26f74:	f00b0092 	.word	0xf00b0092
   26f78:	e9d5fcb6 	.word	0xe9d5fcb6
   26f7c:	1e532001 	.word	0x1e532001
   26f80:	d0e72a00 	.word	0xd0e72a00
   26f84:	3b012200 	.word	0x3b012200
   26f88:	60021c59 	.word	0x60021c59
   26f8c:	0004f100 	.word	0x0004f100
   26f90:	e7ded1f9 	.word	0xe7ded1f9
   26f94:	000ff06f 	.word	0x000ff06f
   26f98:	4611bd70 	.word	0x4611bd70
   26f9c:	bf00e7c0 	.word	0xbf00e7c0

00026fa0 <symbol_00084df>:
   26fa0:	d0524288 	.word	0xd0524288
   26fa4:	688ab5f8 	.word	0x688ab5f8
   26fa8:	4605460e 	.word	0x4605460e
   26fac:	d04e2a00 	.word	0xd04e2a00
   26fb0:	1e4b6849 	.word	0x1e4b6849
   26fb4:	f852d00e 	.word	0xf852d00e
   26fb8:	28000023 	.word	0x28000023
   26fbc:	f101d13b 	.word	0xf101d13b
   26fc0:	39014180 	.word	0x39014180
   26fc4:	0281eb02 	.word	0x0281eb02
   26fc8:	f852e002 	.word	0xf852e002
   26fcc:	bb900d04 	.word	0xbb900d04
   26fd0:	d1fa3b01 	.word	0xd1fa3b01
   26fd4:	68332401 	.word	0x68332401
   26fd8:	686a602b 	.word	0x686a602b
   26fdc:	d30c42a2 	.word	0xd30c42a2
   26fe0:	009268af 	.word	0x009268af
   26fe4:	46382100 	.word	0x46382100
   26fe8:	fc88f00b 	.word	0xfc88f00b
   26fec:	68b100a2 	.word	0x68b100a2
   26ff0:	f00b68a8 	.word	0xf00b68a8
   26ff4:	2000fc78 	.word	0x2000fc78
   26ff8:	2104bdf8 	.word	0x2104bdf8
   26ffc:	f0034620 	.word	0xf0034620
   27000:	4607fb9f 	.word	0x4607fb9f
   27004:	68a9b1f0 	.word	0x68a9b1f0
   27008:	686ab189 	.word	0x686ab189
   2700c:	f00b0092 	.word	0xf00b0092
   27010:	e9d5fc6a 	.word	0xe9d5fc6a
   27014:	1e532001 	.word	0x1e532001
   27018:	2200b13a 	.word	0x2200b13a
   2701c:	1c593b01 	.word	0x1c593b01
   27020:	f1006002 	.word	0xf1006002
   27024:	d1f90004 	.word	0xd1f90004
   27028:	f00368a8 	.word	0xf00368a8
   2702c:	4622fb9d 	.word	0x4622fb9d
   27030:	4701e9c5 	.word	0x4701e9c5
   27034:	f242e7d5 	.word	0xf242e7d5
   27038:	68317210 	.word	0x68317210
   2703c:	42941c5c 	.word	0x42941c5c
   27040:	d9ca6029 	.word	0xd9ca6029
   27044:	000ff06f 	.word	0x000ff06f
   27048:	2000bdf8 	.word	0x2000bdf8
   2704c:	28004770 	.word	0x28004770
   27050:	6880d0d1 	.word	0x6880d0d1
   27054:	6869b158 	.word	0x6869b158
   27058:	b1311e4b 	.word	0xb1311e4b
   2705c:	1c5c3b01 	.word	0x1c5c3b01
   27060:	f1006002 	.word	0xf1006002
   27064:	d1f90004 	.word	0xd1f90004
   27068:	f00368a8 	.word	0xf00368a8
   2706c:	2000fb7d 	.word	0x2000fb7d
   27070:	e9c52301 	.word	0xe9c52301
   27074:	60a83000 	.word	0x60a83000
   27078:	bf00bdf8 	.word	0xbf00bdf8

0002707c <symbol_000fa6b>:
   2707c:	684bb5f0 	.word	0x684bb5f0
   27080:	b085460d 	.word	0xb085460d
   27084:	46064614 	.word	0x46064614
   27088:	b17b6851 	.word	0xb17b6851
   2708c:	f10368a8 	.word	0xf10368a8
   27090:	3a014280 	.word	0x3a014280
   27094:	7022f850 	.word	0x7022f850
   27098:	0082eb00 	.word	0x0082eb00
   2709c:	e04fb127 	.word	0xe04fb127
   270a0:	2d04f850 	.word	0x2d04f850
   270a4:	d14b2a00 	.word	0xd14b2a00
   270a8:	d1f93b01 	.word	0xd1f93b01
   270ac:	f101b189 	.word	0xf101b189
   270b0:	68a74080 	.word	0x68a74080
   270b4:	f8573801 	.word	0xf8573801
   270b8:	2a002020 	.word	0x2a002020
   270bc:	8099f040 	.word	0x8099f040
   270c0:	0080eb07 	.word	0x0080eb07
   270c4:	f850e003 	.word	0xf850e003
   270c8:	2a002d04 	.word	0x2a002d04
   270cc:	3901d142 	.word	0x3901d142
   270d0:	2300d1f9 	.word	0x2300d1f9
   270d4:	42b42201 	.word	0x42b42201
   270d8:	2301e9cd 	.word	0x2301e9cd
   270dc:	d07f9303 	.word	0xd07f9303
   270e0:	d00542b5 	.word	0xd00542b5
   270e4:	46304629 	.word	0x46304629
   270e8:	ff5af7ff 	.word	0xff5af7ff
   270ec:	b9a84607 	.word	0xb9a84607
   270f0:	60332301 	.word	0x60332301
   270f4:	b1806860 	.word	0xb1806860
   270f8:	c008f8d4 	.word	0xc008f8d4
   270fc:	4380f100 	.word	0x4380f100
   27100:	f85c3b01 	.word	0xf85c3b01
   27104:	eb0c2023 	.word	0xeb0c2023
   27108:	b1220383 	.word	0xb1220383
   2710c:	f853e042 	.word	0xf853e042
   27110:	2a002d04 	.word	0x2a002d04
   27114:	3801d13e 	.word	0x3801d13e
   27118:	2700d1f9 	.word	0x2700d1f9
   2711c:	b1609803 	.word	0xb1609803
   27120:	1e539a02 	.word	0x1e539a02
   27124:	2200b13a 	.word	0x2200b13a
   27128:	1c593b01 	.word	0x1c593b01
   2712c:	f1006002 	.word	0xf1006002
   27130:	d1f90004 	.word	0xd1f90004
   27134:	f0039803 	.word	0xf0039803
   27138:	4638fb17 	.word	0x4638fb17
   2713c:	bdf0b005 	.word	0xbdf0b005
   27140:	d0c62900 	.word	0xd0c62900
   27144:	4080f101 	.word	0x4080f101
   27148:	380168a7 	.word	0x380168a7
   2714c:	2020f857 	.word	0x2020f857
   27150:	d0b52a00 	.word	0xd0b52a00
   27154:	d8bc428b 	.word	0xd8bc428b
   27158:	2b00d34b 	.word	0x2b00d34b
   2715c:	68a8d0b9 	.word	0x68a8d0b9
   27160:	4180f103 	.word	0x4180f103
   27164:	f8503901 	.word	0xf8503901
   27168:	f857c021 	.word	0xf857c021
   2716c:	0089e021 	.word	0x0089e021
   27170:	440845e6 	.word	0x440845e6
   27174:	0201eb07 	.word	0x0201eb07
   27178:	d83ad3ab 	.word	0xd83ad3ab
   2717c:	e0064601 	.word	0xe0064601
   27180:	7d04f851 	.word	0x7d04f851
   27184:	0d04f852 	.word	0x0d04f852
   27188:	d8a24287 	.word	0xd8a24287
   2718c:	3b01d331 	.word	0x3b01d331
   27190:	e79ed1f6 	.word	0xe79ed1f6
   27194:	462b2500 	.word	0x462b2500
   27198:	f85168b1 	.word	0xf85168b1
   2719c:	35016b04 	.word	0x35016b04
   271a0:	f8411af2 	.word	0xf8411af2
   271a4:	f85c2c04 	.word	0xf85c2c04
   271a8:	460c7b04 	.word	0x460c7b04
   271ac:	bf2c42ba 	.word	0xbf2c42ba
   271b0:	0e00f04f 	.word	0x0e00f04f
   271b4:	0e01f04f 	.word	0x0e01f04f
   271b8:	429e1bd2 	.word	0x429e1bd2
   271bc:	4673bf2c 	.word	0x4673bf2c
   271c0:	0301f10e 	.word	0x0301f10e
   271c4:	f8414285 	.word	0xf8414285
   271c8:	d3e62c04 	.word	0xd3e62c04
   271cc:	e7a4b90b 	.word	0xe7a4b90b
   271d0:	68222301 	.word	0x68222301
   271d4:	429a1ad1 	.word	0x429a1ad1
   271d8:	1b04f844 	.word	0x1b04f844
   271dc:	e79cd3f8 	.word	0xe79cd3f8
   271e0:	a8014621 	.word	0xa8014621
   271e4:	fedcf7ff 	.word	0xfedcf7ff
   271e8:	28004607 	.word	0x28004607
   271ec:	ac01d196 	.word	0xac01d196
   271f0:	f06fe776 	.word	0xf06fe776
   271f4:	46380709 	.word	0x46380709
   271f8:	bdf0b005 	.word	0xbdf0b005

000271fc <symbol_0006ccd>:
   271fc:	7310f242 	.word	0x7310f242
   27200:	41f0e92d 	.word	0x41f0e92d
   27204:	4256684f 	.word	0x4256684f
   27208:	429f4316 	.word	0x429f4316
   2720c:	16c0f3c6 	.word	0x16c0f3c6
   27210:	6842d84f 	.word	0x6842d84f
   27214:	42974604 	.word	0x42974604
   27218:	d82c460d 	.word	0xd82c460d
   2721c:	68236829 	.word	0x68236829
   27220:	f106fb01 	.word	0xf106fb01
   27224:	0701f1c6 	.word	0x0701f1c6
   27228:	1307fb03 	.word	0x1307fb03
   2722c:	686b6023 	.word	0x686b6023
   27230:	2300b18b 	.word	0x2300b18b
   27234:	68aa68a1 	.word	0x68aa68a1
   27238:	0023f851 	.word	0x0023f851
   2723c:	2023f852 	.word	0x2023f852
   27240:	f007fb00 	.word	0xf007fb00
   27244:	0206fb02 	.word	0x0206fb02
   27248:	2023f841 	.word	0x2023f841
   2724c:	3301686a 	.word	0x3301686a
   27250:	d8ef429a 	.word	0xd8ef429a
   27254:	42936862 	.word	0x42936862
   27258:	009ad20a 	.word	0x009ad20a
   2725c:	330168a0 	.word	0x330168a0
   27260:	fb075881 	.word	0xfb075881
   27264:	5081f101 	.word	0x5081f101
   27268:	32046861 	.word	0x32046861
   2726c:	d8f54299 	.word	0xd8f54299
   27270:	e8bd2000 	.word	0xe8bd2000
   27274:	210481f0 	.word	0x210481f0
   27278:	f0034638 	.word	0xf0034638
   2727c:	4680fa61 	.word	0x4680fa61
   27280:	68a1b1b8 	.word	0x68a1b1b8
   27284:	6862b189 	.word	0x6862b189
   27288:	f00b0092 	.word	0xf00b0092
   2728c:	e9d4fb2c 	.word	0xe9d4fb2c
   27290:	1e532001 	.word	0x1e532001
   27294:	2200b13a 	.word	0x2200b13a
   27298:	1c593b01 	.word	0x1c593b01
   2729c:	f1006002 	.word	0xf1006002
   272a0:	d1f90004 	.word	0xd1f90004
   272a4:	f00368a0 	.word	0xf00368a0
   272a8:	463afa5f 	.word	0x463afa5f
   272ac:	7801e9c4 	.word	0x7801e9c4
   272b0:	f06fe7b4 	.word	0xf06fe7b4
   272b4:	e7dc000f 	.word	0xe7dc000f

000272b8 <symbol_000b345>:
   272b8:	6845b5f8 	.word	0x6845b5f8
   272bc:	460e4604 	.word	0x460e4604
   272c0:	6887b19d 	.word	0x6887b19d
   272c4:	463800aa 	.word	0x463800aa
   272c8:	f00b2100 	.word	0xf00b2100
   272cc:	2e00fb17 	.word	0x2e00fb17
   272d0:	2301bfac 	.word	0x2301bfac
   272d4:	33fff04f 	.word	0x33fff04f
   272d8:	71e6ea86 	.word	0x71e6ea86
   272dc:	eba168a2 	.word	0xeba168a2
   272e0:	601171e6 	.word	0x601171e6
   272e4:	20006023 	.word	0x20006023
   272e8:	2104bdf8 	.word	0x2104bdf8
   272ec:	f0032001 	.word	0xf0032001
   272f0:	4607fa27 	.word	0x4607fa27
   272f4:	68a1b1b8 	.word	0x68a1b1b8
   272f8:	6862b181 	.word	0x6862b181
   272fc:	f00b0092 	.word	0xf00b0092
   27300:	e9d4faf2 	.word	0xe9d4faf2
   27304:	1e532001 	.word	0x1e532001
   27308:	3b01b132 	.word	0x3b01b132
   2730c:	60051c5a 	.word	0x60051c5a
   27310:	0004f100 	.word	0x0004f100
   27314:	68a0d1f9 	.word	0x68a0d1f9
   27318:	fa26f003 	.word	0xfa26f003
   2731c:	22042301 	.word	0x22042301
   27320:	3701e9c4 	.word	0x3701e9c4
   27324:	f06fe7cf 	.word	0xf06fe7cf
   27328:	bdf8000f 	.word	0xbdf8000f

0002732c <symbol_0007f0f>:
   2732c:	ebb16843 	.word	0xebb16843
   27330:	d2091f43 	.word	0xd2091f43
   27334:	094a6883 	.word	0x094a6883
   27338:	0022f853 	.word	0x0022f853
   2733c:	011ff001 	.word	0x011ff001
   27340:	f00040c8 	.word	0xf00040c8
   27344:	47700001 	.word	0x47700001
   27348:	47702000 	.word	0x47702000

0002734c <symbol_00030c0>:
   2734c:	b3136843 	.word	0xb3136843
   27350:	6882b410 	.word	0x6882b410
   27354:	d0241e58 	.word	0xd0241e58
   27358:	1020f852 	.word	0x1020f852
   2735c:	f103b9e9 	.word	0xf103b9e9
   27360:	3b014380 	.word	0x3b014380
   27364:	0383eb02 	.word	0x0383eb02
   27368:	f853e002 	.word	0xf853e002
   2736c:	b9a11d04 	.word	0xb9a11d04
   27370:	d1fa3801 	.word	0xd1fa3801
   27374:	68112420 	.word	0x68112420
   27378:	f04f2200 	.word	0xf04f2200
   2737c:	e0024300 	.word	0xe0024300
   27380:	2a203201 	.word	0x2a203201
   27384:	420bd004 	.word	0x420bd004
   27388:	0353ea4f 	.word	0x0353ea4f
   2738c:	1aa0d0f8 	.word	0x1aa0d0f8
   27390:	4b04f85d 	.word	0x4b04f85d
   27394:	46184770 	.word	0x46184770
   27398:	01404770 	.word	0x01404770
   2739c:	0420f100 	.word	0x0420f100
   273a0:	6811e7ea 	.word	0x6811e7ea
   273a4:	e7e72420 	.word	0xe7e72420

000273a8 <symbol_000b7da>:
   273a8:	b3236843 	.word	0xb3236843
   273ac:	6882b410 	.word	0x6882b410
   273b0:	d0261e58 	.word	0xd0261e58
   273b4:	1020f852 	.word	0x1020f852
   273b8:	f103b9f9 	.word	0xf103b9f9
   273bc:	3b014380 	.word	0x3b014380
   273c0:	0383eb02 	.word	0x0383eb02
   273c4:	f853e002 	.word	0xf853e002
   273c8:	b9b11d04 	.word	0xb9b11d04
   273cc:	d1fa3801 	.word	0xd1fa3801
   273d0:	68112420 	.word	0x68112420
   273d4:	f04f2200 	.word	0xf04f2200
   273d8:	e0024300 	.word	0xe0024300
   273dc:	2a203201 	.word	0x2a203201
   273e0:	420bd004 	.word	0x420bd004
   273e4:	0353ea4f 	.word	0x0353ea4f
   273e8:	1aa0d0f8 	.word	0x1aa0d0f8
   273ec:	08c03007 	.word	0x08c03007
   273f0:	4b04f85d 	.word	0x4b04f85d
   273f4:	46184770 	.word	0x46184770
   273f8:	01404770 	.word	0x01404770
   273fc:	0420f100 	.word	0x0420f100
   27400:	6811e7e8 	.word	0x6811e7e8
   27404:	e7e52420 	.word	0xe7e52420

00027408 <symbol_000eaf4>:
   27408:	43f8e92d 	.word	0x43f8e92d
   2740c:	460f4605 	.word	0x460f4605
   27410:	2a004616 	.word	0x2a004616
   27414:	780cd07e 	.word	0x780cd07e
   27418:	b124460b 	.word	0xb124460b
   2741c:	f813e07e 	.word	0xf813e07e
   27420:	2a002f01 	.word	0x2a002f01
   27424:	3401d146 	.word	0x3401d146
   27428:	d1f842a6 	.word	0xd1f842a6
   2742c:	8004f8d5 	.word	0x8004f8d5
   27430:	0f00f1b8 	.word	0x0f00f1b8
   27434:	2104d169 	.word	0x2104d169
   27438:	f0032001 	.word	0xf0032001
   2743c:	4681f981 	.word	0x4681f981
   27440:	d06d2800 	.word	0xd06d2800
   27444:	b18968a9 	.word	0xb18968a9
   27448:	0092686a 	.word	0x0092686a
   2744c:	fa4bf00b 	.word	0xfa4bf00b
   27450:	2001e9d5 	.word	0x2001e9d5
   27454:	b13a1e53 	.word	0xb13a1e53
   27458:	3b014642 	.word	0x3b014642
   2745c:	60021c59 	.word	0x60021c59
   27460:	0004f100 	.word	0x0004f100
   27464:	68a8d1f9 	.word	0x68a8d1f9
   27468:	f97ef003 	.word	0xf97ef003
   2746c:	22042301 	.word	0x22042301
   27470:	3901e9c5 	.word	0x3901e9c5
   27474:	46482100 	.word	0x46482100
   27478:	fa40f00b 	.word	0xfa40f00b
   2747c:	22012300 	.word	0x22012300
   27480:	42a668a9 	.word	0x42a668a9
   27484:	602a600b 	.word	0x602a600b
   27488:	eb07d911 	.word	0xeb07d911
   2748c:	1b340c06 	.word	0x1b340c06
   27490:	f02368ae 	.word	0xf02368ae
   27494:	00df0103 	.word	0x00df0103
   27498:	0d01f81c 	.word	0x0d01f81c
   2749c:	f0075872 	.word	0xf0075872
   274a0:	40b80718 	.word	0x40b80718
   274a4:	43023301 	.word	0x43023301
   274a8:	507242a3 	.word	0x507242a3
   274ac:	2000d1f0 	.word	0x2000d1f0
   274b0:	83f8e8bd 	.word	0x83f8e8bd
   274b4:	f0121b32 	.word	0xf0121b32
   274b8:	bf180803 	.word	0xbf180803
   274bc:	0801f04f 	.word	0x0801f04f
   274c0:	7310f242 	.word	0x7310f242
   274c4:	0892eb08 	.word	0x0892eb08
   274c8:	d8294598 	.word	0xd8294598
   274cc:	4598686b 	.word	0x4598686b
   274d0:	2104d929 	.word	0x2104d929
   274d4:	f0034640 	.word	0xf0034640
   274d8:	4681f933 	.word	0x4681f933
   274dc:	68a9b300 	.word	0x68a9b300
   274e0:	686ab189 	.word	0x686ab189
   274e4:	f00b0092 	.word	0xf00b0092
   274e8:	e9d5f9fe 	.word	0xe9d5f9fe
   274ec:	1e532001 	.word	0x1e532001
   274f0:	2200b13a 	.word	0x2200b13a
   274f4:	1c593b01 	.word	0x1c593b01
   274f8:	f1006002 	.word	0xf1006002
   274fc:	d1f90004 	.word	0xd1f90004
   27500:	f00368a8 	.word	0xf00368a8
   27504:	e9c5f931 	.word	0xe9c5f931
   27508:	ea4f8901 	.word	0xea4f8901
   2750c:	f8d50288 	.word	0xf8d50288
   27510:	e7af9008 	.word	0xe7af9008
   27514:	8004f8d0 	.word	0x8004f8d0
   27518:	e7894614 	.word	0xe7894614
   2751c:	e7ca2400 	.word	0xe7ca2400
   27520:	000ff06f 	.word	0x000ff06f
   27524:	4698e7c4 	.word	0x4698e7c4
   27528:	bf00e782 	.word	0xbf00e782

0002752c <symbol_000116e>:
   2752c:	41f0e92d 	.word	0x41f0e92d
   27530:	46886844 	.word	0x46886844
   27534:	d03e2c00 	.word	0xd03e2c00
   27538:	1e624615 	.word	0x1e624615
   2753c:	68804607 	.word	0x68804607
   27540:	f850d040 	.word	0xf850d040
   27544:	bb991022 	.word	0xbb991022
   27548:	4380f104 	.word	0x4380f104
   2754c:	eb003b01 	.word	0xeb003b01
   27550:	e0020383 	.word	0xe0020383
   27554:	1d04f853 	.word	0x1d04f853
   27558:	3a01bb51 	.word	0x3a01bb51
   2755c:	2627d1fa 	.word	0x2627d1fa
   27560:	22006801 	.word	0x22006801
   27564:	4300f04f 	.word	0x4300f04f
   27568:	3201e002 	.word	0x3201e002
   2756c:	d0032a20 	.word	0xd0032a20
   27570:	ea4f420b 	.word	0xea4f420b
   27574:	d0f80353 	.word	0xd0f80353
   27578:	08f61ab6 	.word	0x08f61ab6
   2757c:	d32442b5 	.word	0xd32442b5
   27580:	2100462a 	.word	0x2100462a
   27584:	f00b4640 	.word	0xf00b4640
   27588:	b176f9b9 	.word	0xb176f9b9
   2758c:	44a82300 	.word	0x44a82300
   27590:	f02368b9 	.word	0xf02368b9
   27594:	588c0203 	.word	0x588c0203
   27598:	f00500dd 	.word	0xf00500dd
   2759c:	33010518 	.word	0x33010518
   275a0:	42b340ec 	.word	0x42b340ec
   275a4:	4d01f808 	.word	0x4d01f808
   275a8:	2000d1f2 	.word	0x2000d1f2
   275ac:	81f0e8bd 	.word	0x81f0e8bd
   275b0:	36270156 	.word	0x36270156
   275b4:	4608e7d5 	.word	0x4608e7d5
   275b8:	f00b4621 	.word	0xf00b4621
   275bc:	4620f99f 	.word	0x4620f99f
   275c0:	81f0e8bd 	.word	0x81f0e8bd
   275c4:	26276801 	.word	0x26276801
   275c8:	f06fe7cb 	.word	0xf06fe7cb
   275cc:	e7ed0007 	.word	0xe7ed0007

000275d0 <symbol_0004fb7>:
   275d0:	41f0e92d 	.word	0x41f0e92d
   275d4:	46046843 	.word	0x46046843
   275d8:	f001094d 	.word	0xf001094d
   275dc:	b343061f 	.word	0xb343061f
   275e0:	f8d01e5a 	.word	0xf8d01e5a
   275e4:	f000e008 	.word	0xf000e008
   275e8:	f85e8099 	.word	0xf85e8099
   275ec:	f1bcc022 	.word	0xf1bcc022
   275f0:	f0400f00 	.word	0xf0400f00
   275f4:	f103809c 	.word	0xf103809c
   275f8:	38014080 	.word	0x38014080
   275fc:	0080eb0e 	.word	0x0080eb0e
   27600:	f850e003 	.word	0xf850e003
   27604:	2f007d04 	.word	0x2f007d04
   27608:	3a01d15e 	.word	0x3a01d15e
   2760c:	f04fd1f9 	.word	0xf04fd1f9
   27610:	f8de0820 	.word	0xf8de0820
   27614:	20007000 	.word	0x20007000
   27618:	4200f04f 	.word	0x4200f04f
   2761c:	3001e002 	.word	0x3001e002
   27620:	d0052820 	.word	0xd0052820
   27624:	ea4f423a 	.word	0xea4f423a
   27628:	d0f80252 	.word	0xd0f80252
   2762c:	0c00eba8 	.word	0x0c00eba8
   27630:	ebb14461 	.word	0xebb14461
   27634:	d90b1f43 	.word	0xd90b1f43
   27638:	021ff011 	.word	0x021ff011
   2763c:	2201bf18 	.word	0x2201bf18
   27640:	7010f242 	.word	0x7010f242
   27644:	1751eb02 	.word	0x1751eb02
   27648:	d86d4287 	.word	0xd86d4287
   2764c:	d840429f 	.word	0xd840429f
   27650:	429db1f5 	.word	0x429db1f5
   27654:	f06fd25d 	.word	0xf06fd25d
   27658:	1b7f4740 	.word	0x1b7f4740
   2765c:	ebc719da 	.word	0xebc719da
   27660:	00927787 	.word	0x00927787
   27664:	68a000bf 	.word	0x68a000bf
   27668:	19c13b01 	.word	0x19c13b01
   2766c:	44115880 	.word	0x44115880
   27670:	f841429d 	.word	0xf841429d
   27674:	f1a20c04 	.word	0xf1a20c04
   27678:	d1f40204 	.word	0xd1f40204
   2767c:	f1032100 	.word	0xf1032100
   27680:	3b014380 	.word	0x3b014380
   27684:	68a2009b 	.word	0x68a2009b
   27688:	3b0450d1 	.word	0x3b0450d1
   2768c:	d1fa1d1a 	.word	0xd1fa1d1a
   27690:	6863b1be 	.word	0x6863b1be
   27694:	d214429d 	.word	0xd214429d
   27698:	f1c62700 	.word	0xf1c62700
   2769c:	00ab0c20 	.word	0x00ab0c20
   276a0:	350168a0 	.word	0x350168a0
   276a4:	fa0158c1 	.word	0xfa0158c1
   276a8:	50c2f206 	.word	0x50c2f206
   276ac:	58c268a0 	.word	0x58c268a0
   276b0:	50c2433a 	.word	0x50c2433a
   276b4:	fa216862 	.word	0xfa216862
   276b8:	42aaf70c 	.word	0x42aaf70c
   276bc:	0304f103 	.word	0x0304f103
   276c0:	2000d8ee 	.word	0x2000d8ee
   276c4:	81f0e8bd 	.word	0x81f0e8bd
   276c8:	1c42ea4f 	.word	0x1c42ea4f
   276cc:	0820f10c 	.word	0x0820f10c
   276d0:	2104e7a1 	.word	0x2104e7a1
   276d4:	f0034638 	.word	0xf0034638
   276d8:	4680f833 	.word	0x4680f833
   276dc:	68a1b320 	.word	0x68a1b320
   276e0:	6862b189 	.word	0x6862b189
   276e4:	f00b0092 	.word	0xf00b0092
   276e8:	e9d4f8fe 	.word	0xe9d4f8fe
   276ec:	1e532001 	.word	0x1e532001
   276f0:	2200b13a 	.word	0x2200b13a
   276f4:	1c593b01 	.word	0x1c593b01
   276f8:	f1006002 	.word	0xf1006002
   276fc:	d1f90004 	.word	0xd1f90004
   27700:	f00368a0 	.word	0xf00368a0
   27704:	463bf831 	.word	0x463bf831
   27708:	7801e9c4 	.word	0x7801e9c4
   2770c:	d0bf2d00 	.word	0xd0bf2d00
   27710:	2b00e79f 	.word	0x2b00e79f
   27714:	2e00d1b2 	.word	0x2e00d1b2
   27718:	e7d2d1bb 	.word	0xe7d2d1bb
   2771c:	7000f8de 	.word	0x7000f8de
   27720:	f04f4694 	.word	0xf04f4694
   27724:	e7760820 	.word	0xe7760820
   27728:	000ff06f 	.word	0x000ff06f
   2772c:	0152e7ca 	.word	0x0152e7ca
   27730:	f1024667 	.word	0xf1024667
   27734:	46940820 	.word	0x46940820
   27738:	bf00e76d 	.word	0xbf00e76d

0002773c <symbol_0000994>:
   2773c:	6844b5f8 	.word	0x6844b5f8
   27740:	42ac094d 	.word	0x42ac094d
   27744:	f001d33a 	.word	0xf001d33a
   27748:	d032011f 	.word	0xd032011f
   2774c:	2300b1b5 	.word	0x2300b1b5
   27750:	688400aa 	.word	0x688400aa
   27754:	320458a6 	.word	0x320458a6
   27758:	6023f844 	.word	0x6023f844
   2775c:	33016844 	.word	0x33016844
   27760:	429e1b66 	.word	0x429e1b66
   27764:	429cd8f5 	.word	0x429cd8f5
   27768:	2500d908 	.word	0x2500d908
   2776c:	6884009a 	.word	0x6884009a
   27770:	50a53301 	.word	0x50a53301
   27774:	32046844 	.word	0x32046844
   27778:	d8f8429c 	.word	0xd8f8429c
   2777c:	b1b4b1b9 	.word	0xb1b4b1b9
   27780:	f1042700 	.word	0xf1042700
   27784:	3b014380 	.word	0x3b014380
   27788:	f1c1009b 	.word	0xf1c1009b
   2778c:	68860c20 	.word	0x68860c20
   27790:	58f53c01 	.word	0x58f53c01
   27794:	f201fa25 	.word	0xf201fa25
   27798:	688650f2 	.word	0x688650f2
   2779c:	ea4258f2 	.word	0xea4258f2
   277a0:	50f20207 	.word	0x50f20207
   277a4:	f70cfa05 	.word	0xf70cfa05
   277a8:	0304f1a3 	.word	0x0304f1a3
   277ac:	2000d1ef 	.word	0x2000d1ef
   277b0:	b919bdf8 	.word	0xb919bdf8
   277b4:	d0fa2c00 	.word	0xd0fa2c00
   277b8:	e7d6460b 	.word	0xe7d6460b
   277bc:	b1644605 	.word	0xb1644605
   277c0:	00a26886 	.word	0x00a26886
   277c4:	21004630 	.word	0x21004630
   277c8:	f898f00b 	.word	0xf898f00b
   277cc:	22012300 	.word	0x22012300
   277d0:	461868a9 	.word	0x461868a9
   277d4:	602a600b 	.word	0x602a600b
   277d8:	2104bdf8 	.word	0x2104bdf8
   277dc:	f0022001 	.word	0xf0022001
   277e0:	4606ffaf 	.word	0x4606ffaf
   277e4:	68a9b1b8 	.word	0x68a9b1b8
   277e8:	686ab181 	.word	0x686ab181
   277ec:	f00b0092 	.word	0xf00b0092
   277f0:	e9d5f87a 	.word	0xe9d5f87a
   277f4:	1e532001 	.word	0x1e532001
   277f8:	3b01b132 	.word	0x3b01b132
   277fc:	60041c5a 	.word	0x60041c5a
   27800:	0004f100 	.word	0x0004f100
   27804:	68a8d1f9 	.word	0x68a8d1f9
   27808:	ffaef002 	.word	0xffaef002
   2780c:	22042301 	.word	0x22042301
   27810:	3601e9c5 	.word	0x3601e9c5
   27814:	f06fe7d6 	.word	0xf06fe7d6
   27818:	bdf8000f 	.word	0xbdf8000f

0002781c <symbol_000242f>:
   2781c:	6843b470 	.word	0x6843b470
   27820:	b173684a 	.word	0xb173684a
   27824:	f1036884 	.word	0xf1036884
   27828:	3d014580 	.word	0x3d014580
   2782c:	6025f854 	.word	0x6025f854
   27830:	0485eb04 	.word	0x0485eb04
   27834:	e01ab11e 	.word	0xe01ab11e
   27838:	5d04f854 	.word	0x5d04f854
   2783c:	3b01b9bd 	.word	0x3b01b9bd
   27840:	b18ad1fa 	.word	0xb18ad1fa
   27844:	4480f102 	.word	0x4480f102
   27848:	3c01688e 	.word	0x3c01688e
   2784c:	5024f856 	.word	0x5024f856
   27850:	eb06b9cd 	.word	0xeb06b9cd
   27854:	e0020484 	.word	0xe0020484
   27858:	5d04f854 	.word	0x5d04f854
   2785c:	3a01b98d 	.word	0x3a01b98d
   27860:	2b00d1fa 	.word	0x2b00d1fa
   27864:	6802d037 	.word	0x6802d037
   27868:	bc704610 	.word	0xbc704610
   2786c:	2a004770 	.word	0x2a004770
   27870:	f102d0f9 	.word	0xf102d0f9
   27874:	688e4480 	.word	0x688e4480
   27878:	f8563c01 	.word	0xf8563c01
   2787c:	2d005024 	.word	0x2d005024
   27880:	4293d0e7 	.word	0x4293d0e7
   27884:	4293d8ef 	.word	0x4293d8ef
   27888:	d2036809 	.word	0xd2036809
   2788c:	424abc70 	.word	0x424abc70
   27890:	47704610 	.word	0x47704610
   27894:	2a006802 	.word	0x2a006802
   27898:	2900dd01 	.word	0x2900dd01
   2789c:	2900db24 	.word	0x2900db24
   278a0:	2a00dd01 	.word	0x2a00dd01
   278a4:	b1b3db1d 	.word	0xb1b3db1d
   278a8:	f1036884 	.word	0xf1036884
   278ac:	39014180 	.word	0x39014180
   278b0:	5021f854 	.word	0x5021f854
   278b4:	0021f856 	.word	0x0021f856
   278b8:	42850089 	.word	0x42850089
   278bc:	4431440c 	.word	0x4431440c
   278c0:	d30cd8d2 	.word	0xd30cd8d2
   278c4:	d0063b01 	.word	0xd0063b01
   278c8:	5d04f854 	.word	0x5d04f854
   278cc:	0d04f851 	.word	0x0d04f851
   278d0:	d9f64285 	.word	0xd9f64285
   278d4:	461ae7c8 	.word	0x461ae7c8
   278d8:	4610bc70 	.word	0x4610bc70
   278dc:	42524770 	.word	0x42524770
   278e0:	f04fe7c2 	.word	0xf04fe7c2
   278e4:	e7bf32ff 	.word	0xe7bf32ff
   278e8:	e7bd2201 	.word	0xe7bd2201

000278ec <symbol_000ccad>:
   278ec:	2900b4f0 	.word	0x2900b4f0
   278f0:	68434605 	.word	0x68434605
   278f4:	2b00db32 	.word	0x2b00db32
   278f8:	6886d042 	.word	0x6886d042
   278fc:	4280f103 	.word	0x4280f103
   27900:	f8563a01 	.word	0xf8563a01
   27904:	eb060022 	.word	0xeb060022
   27908:	b9680282 	.word	0xb9680282
   2790c:	30fff04f 	.word	0x30fff04f
   27910:	e0022701 	.word	0xe0022701
   27914:	4d04f852 	.word	0x4d04f852
   27918:	3b01b93c 	.word	0x3b01b93c
   2791c:	2900d1fa 	.word	0x2900d1fa
   27920:	2000bf08 	.word	0x2000bf08
   27924:	4770bcf0 	.word	0x4770bcf0
   27928:	b1a12701 	.word	0xb1a12701
   2792c:	d8122b01 	.word	0xd8122b01
   27930:	28006828 	.word	0x28006828
   27934:	1c7bdd01 	.word	0x1c7bdd01
   27938:	2f01d01e 	.word	0x2f01d01e
   2793c:	2800d101 	.word	0x2800d101
   27940:	2900db24 	.word	0x2900db24
   27944:	bfb86833 	.word	0xbfb86833
   27948:	42994249 	.word	0x42994249
   2794c:	d815d3ea 	.word	0xd815d3ea
   27950:	2000bcf0 	.word	0x2000bcf0
   27954:	68284770 	.word	0x68284770
   27958:	4770bcf0 	.word	0x4770bcf0
   2795c:	6886b163 	.word	0x6886b163
   27960:	4280f103 	.word	0x4280f103
   27964:	f8563a01 	.word	0xf8563a01
   27968:	eb060022 	.word	0xeb060022
   2796c:	b9500282 	.word	0xb9500282
   27970:	f04f2001 	.word	0xf04f2001
   27974:	e7d037ff 	.word	0xe7d037ff
   27978:	e7d32001 	.word	0xe7d32001
   2797c:	e7d14240 	.word	0xe7d14240
   27980:	30fff04f 	.word	0x30fff04f
   27984:	f04fe7cb 	.word	0xf04fe7cb
   27988:	e7cf37ff 	.word	0xe7cf37ff
   2798c:	30fff04f 	.word	0x30fff04f
   27990:	bf00e7c8 	.word	0xbf00e7c8

00027994 <symbol_000c914>:
   27994:	e92d4290 	.word	0xe92d4290
   27998:	460747f0 	.word	0x460747f0
   2799c:	d006460c 	.word	0xd006460c
   279a0:	46154288 	.word	0x46154288
   279a4:	f7ffd002 	.word	0xf7ffd002
   279a8:	b9a0fafb 	.word	0xb9a0fafb
   279ac:	2301462c 	.word	0x2301462c
   279b0:	6865603b 	.word	0x6865603b
   279b4:	68a3b175 	.word	0x68a3b175
   279b8:	4280f105 	.word	0x4280f105
   279bc:	f8533a01 	.word	0xf8533a01
   279c0:	eb031022 	.word	0xeb031022
   279c4:	b1190282 	.word	0xb1190282
   279c8:	f852e007 	.word	0xf852e007
   279cc:	b9211d04 	.word	0xb9211d04
   279d0:	d1fa3d01 	.word	0xd1fa3d01
   279d4:	e8bd2000 	.word	0xe8bd2000
   279d8:	f24287f0 	.word	0xf24287f0
   279dc:	42957210 	.word	0x42957210
   279e0:	687ad875 	.word	0x687ad875
   279e4:	d27642aa 	.word	0xd27642aa
   279e8:	46282104 	.word	0x46282104
   279ec:	fea8f002 	.word	0xfea8f002
   279f0:	28004606 	.word	0x28004606
   279f4:	68b9d06b 	.word	0x68b9d06b
   279f8:	687ab189 	.word	0x687ab189
   279fc:	f00a0092 	.word	0xf00a0092
   27a00:	e9d7ff72 	.word	0xe9d7ff72
   27a04:	1e532001 	.word	0x1e532001
   27a08:	2200b13a 	.word	0x2200b13a
   27a0c:	1c593b01 	.word	0x1c593b01
   27a10:	f1006002 	.word	0xf1006002
   27a14:	d1f90004 	.word	0xd1f90004
   27a18:	f00268b8 	.word	0xf00268b8
   27a1c:	e9c7fea5 	.word	0xe9c7fea5
   27a20:	68a35601 	.word	0x68a35601
   27a24:	ea4f2400 	.word	0xea4f2400
   27a28:	f1a30a85 	.word	0xf1a30a85
   27a2c:	eb060c04 	.word	0xeb060c04
   27a30:	2200000a 	.word	0x2200000a
   27a34:	f10c6833 	.word	0xf10c6833
   27a38:	f8dc0c04 	.word	0xf8dc0c04
   27a3c:	191b1000 	.word	0x191b1000
   27a40:	bf284614 	.word	0xbf284614
   27a44:	185b2201 	.word	0x185b2201
   27a48:	2401bf28 	.word	0x2401bf28
   27a4c:	3b04f846 	.word	0x3b04f846
   27a50:	44144286 	.word	0x44144286
   27a54:	2c00d1ed 	.word	0x2c00d1ed
   27a58:	f242d0bc 	.word	0xf242d0bc
   27a5c:	f04f7810 	.word	0xf04f7810
   27a60:	e00f0900 	.word	0xe00f0900
   27a64:	eb0568bd 	.word	0xeb0568bd
   27a68:	6803000a 	.word	0x6803000a
   27a6c:	191c2200 	.word	0x191c2200
   27a70:	2201bf28 	.word	0x2201bf28
   27a74:	4b04f840 	.word	0x4b04f840
   27a78:	0a04f10a 	.word	0x0a04f10a
   27a7c:	24014635 	.word	0x24014635
   27a80:	d0a72a00 	.word	0xd0a72a00
   27a84:	1c6e687b 	.word	0x1c6e687b
   27a88:	d8ee42ab 	.word	0xd8ee42ab
   27a8c:	d81e4546 	.word	0xd81e4546
   27a90:	d2e742b3 	.word	0xd2e742b3
   27a94:	46302104 	.word	0x46302104
   27a98:	fe52f002 	.word	0xfe52f002
   27a9c:	b1b04605 	.word	0xb1b04605
   27aa0:	b18968b9 	.word	0xb18968b9
   27aa4:	0092687a 	.word	0x0092687a
   27aa8:	ff1df00a 	.word	0xff1df00a
   27aac:	2001e9d7 	.word	0x2001e9d7
   27ab0:	b13a1e53 	.word	0xb13a1e53
   27ab4:	1c5a3b01 	.word	0x1c5a3b01
   27ab8:	9000f8c0 	.word	0x9000f8c0
   27abc:	0004f100 	.word	0x0004f100
   27ac0:	68b8d1f8 	.word	0x68b8d1f8
   27ac4:	fe50f002 	.word	0xfe50f002
   27ac8:	6501e9c7 	.word	0x6501e9c7
   27acc:	f06fe7cb 	.word	0xf06fe7cb
   27ad0:	e8bd000f 	.word	0xe8bd000f
   27ad4:	68be87f0 	.word	0x68be87f0
   27ad8:	bf00e7a4 	.word	0xbf00e7a4

00027adc <symbol_0004fdf>:
   27adc:	684bb5f0 	.word	0x684bb5f0
   27ae0:	b085460d 	.word	0xb085460d
   27ae4:	46064614 	.word	0x46064614
   27ae8:	b17b6851 	.word	0xb17b6851
   27aec:	f10368a8 	.word	0xf10368a8
   27af0:	3a014280 	.word	0x3a014280
   27af4:	7022f850 	.word	0x7022f850
   27af8:	0082eb00 	.word	0x0082eb00
   27afc:	e04fb127 	.word	0xe04fb127
   27b00:	2d04f850 	.word	0x2d04f850
   27b04:	d14b2a00 	.word	0xd14b2a00
   27b08:	d1f93b01 	.word	0xd1f93b01
   27b0c:	f101b189 	.word	0xf101b189
   27b10:	68a74080 	.word	0x68a74080
   27b14:	f8573801 	.word	0xf8573801
   27b18:	2a002020 	.word	0x2a002020
   27b1c:	8099f040 	.word	0x8099f040
   27b20:	0080eb07 	.word	0x0080eb07
   27b24:	f850e003 	.word	0xf850e003
   27b28:	2a002d04 	.word	0x2a002d04
   27b2c:	3901d142 	.word	0x3901d142
   27b30:	2300d1f9 	.word	0x2300d1f9
   27b34:	42b42201 	.word	0x42b42201
   27b38:	2301e9cd 	.word	0x2301e9cd
   27b3c:	d07f9303 	.word	0xd07f9303
   27b40:	d00542b5 	.word	0xd00542b5
   27b44:	46304629 	.word	0x46304629
   27b48:	fa2af7ff 	.word	0xfa2af7ff
   27b4c:	b9a84607 	.word	0xb9a84607
   27b50:	60332301 	.word	0x60332301
   27b54:	b1806860 	.word	0xb1806860
   27b58:	c008f8d4 	.word	0xc008f8d4
   27b5c:	4380f100 	.word	0x4380f100
   27b60:	f85c3b01 	.word	0xf85c3b01
   27b64:	eb0c2023 	.word	0xeb0c2023
   27b68:	b1220383 	.word	0xb1220383
   27b6c:	f853e042 	.word	0xf853e042
   27b70:	2a002d04 	.word	0x2a002d04
   27b74:	3801d13e 	.word	0x3801d13e
   27b78:	2700d1f9 	.word	0x2700d1f9
   27b7c:	b1609803 	.word	0xb1609803
   27b80:	1e539a02 	.word	0x1e539a02
   27b84:	2200b13a 	.word	0x2200b13a
   27b88:	1c593b01 	.word	0x1c593b01
   27b8c:	f1006002 	.word	0xf1006002
   27b90:	d1f90004 	.word	0xd1f90004
   27b94:	f0029803 	.word	0xf0029803
   27b98:	4638fde7 	.word	0x4638fde7
   27b9c:	bdf0b005 	.word	0xbdf0b005
   27ba0:	d0c62900 	.word	0xd0c62900
   27ba4:	4080f101 	.word	0x4080f101
   27ba8:	380168a7 	.word	0x380168a7
   27bac:	2020f857 	.word	0x2020f857
   27bb0:	d0b52a00 	.word	0xd0b52a00
   27bb4:	d8bc428b 	.word	0xd8bc428b
   27bb8:	2b00d34b 	.word	0x2b00d34b
   27bbc:	68a8d0b9 	.word	0x68a8d0b9
   27bc0:	4180f103 	.word	0x4180f103
   27bc4:	f8503901 	.word	0xf8503901
   27bc8:	f857c021 	.word	0xf857c021
   27bcc:	0089e021 	.word	0x0089e021
   27bd0:	440845e6 	.word	0x440845e6
   27bd4:	0201eb07 	.word	0x0201eb07
   27bd8:	d83ad3ab 	.word	0xd83ad3ab
   27bdc:	e0064601 	.word	0xe0064601
   27be0:	7d04f851 	.word	0x7d04f851
   27be4:	0d04f852 	.word	0x0d04f852
   27be8:	d8a24287 	.word	0xd8a24287
   27bec:	3b01d331 	.word	0x3b01d331
   27bf0:	e79ed1f6 	.word	0xe79ed1f6
   27bf4:	462b2500 	.word	0x462b2500
   27bf8:	f85168b1 	.word	0xf85168b1
   27bfc:	35016b04 	.word	0x35016b04
   27c00:	f8411af2 	.word	0xf8411af2
   27c04:	f85c2c04 	.word	0xf85c2c04
   27c08:	460c7b04 	.word	0x460c7b04
   27c0c:	bf2c42ba 	.word	0xbf2c42ba
   27c10:	0e00f04f 	.word	0x0e00f04f
   27c14:	0e01f04f 	.word	0x0e01f04f
   27c18:	429e1bd2 	.word	0x429e1bd2
   27c1c:	4673bf2c 	.word	0x4673bf2c
   27c20:	0301f10e 	.word	0x0301f10e
   27c24:	f8414285 	.word	0xf8414285
   27c28:	d3e62c04 	.word	0xd3e62c04
   27c2c:	e7a4b90b 	.word	0xe7a4b90b
   27c30:	68222301 	.word	0x68222301
   27c34:	429a1ad1 	.word	0x429a1ad1
   27c38:	1b04f844 	.word	0x1b04f844
   27c3c:	e79cd3f8 	.word	0xe79cd3f8
   27c40:	a8014621 	.word	0xa8014621
   27c44:	f9acf7ff 	.word	0xf9acf7ff
   27c48:	28004607 	.word	0x28004607
   27c4c:	ac01d196 	.word	0xac01d196
   27c50:	f06fe776 	.word	0xf06fe776
   27c54:	46380709 	.word	0x46380709
   27c58:	bdf0b005 	.word	0xbdf0b005

00027c5c <symbol_0005cc7>:
   27c5c:	41f0e92d 	.word	0x41f0e92d
   27c60:	6813680c 	.word	0x6813680c
   27c64:	fb034605 	.word	0xfb034605
   27c68:	2b00f304 	.word	0x2b00f304
   27c6c:	684bda39 	.word	0x684bda39
   27c70:	460e4617 	.word	0x460e4617
   27c74:	b1836852 	.word	0xb1836852
   27c78:	f1036889 	.word	0xf1036889
   27c7c:	38014080 	.word	0x38014080
   27c80:	c020f851 	.word	0xc020f851
   27c84:	0180eb01 	.word	0x0180eb01
   27c88:	0f00f1bc 	.word	0x0f00f1bc
   27c8c:	e02ed003 	.word	0xe02ed003
   27c90:	0d04f851 	.word	0x0d04f851
   27c94:	3b01bb58 	.word	0x3b01bb58
   27c98:	b17ad1fa 	.word	0xb17ad1fa
   27c9c:	4180f102 	.word	0x4180f102
   27ca0:	c008f8d7 	.word	0xc008f8d7
   27ca4:	f85c3901 	.word	0xf85c3901
   27ca8:	b9780021 	.word	0xb9780021
   27cac:	0181eb0c 	.word	0x0181eb0c
   27cb0:	f851e002 	.word	0xf851e002
   27cb4:	bb280d04 	.word	0xbb280d04
   27cb8:	d1fa3a01 	.word	0xd1fa3a01
   27cbc:	4631463a 	.word	0x4631463a
   27cc0:	f7ff4628 	.word	0xf7ff4628
   27cc4:	b148ff0b 	.word	0xb148ff0b
   27cc8:	81f0e8bd 	.word	0x81f0e8bd
   27ccc:	46394632 	.word	0x46394632
   27cd0:	f7ff4628 	.word	0xf7ff4628
   27cd4:	2800ff03 	.word	0x2800ff03
   27cd8:	4264d1f6 	.word	0x4264d1f6
   27cdc:	e8bd602c 	.word	0xe8bd602c
   27ce0:	f7ff81f0 	.word	0xf7ff81f0
   27ce4:	2800fe57 	.word	0x2800fe57
   27ce8:	602cd1ee 	.word	0x602cd1ee
   27cec:	2a00e7f7 	.word	0x2a00e7f7
   27cf0:	f102d0e4 	.word	0xf102d0e4
   27cf4:	f8d74180 	.word	0xf8d74180
   27cf8:	3901c008 	.word	0x3901c008
   27cfc:	0021f85c 	.word	0x0021f85c
   27d00:	d0d32800 	.word	0xd0d32800
   27d04:	d8d94293 	.word	0xd8d94293
   27d08:	2b00d3e0 	.word	0x2b00d3e0
   27d0c:	68b0d0d6 	.word	0x68b0d0d6
   27d10:	4180f103 	.word	0x4180f103
   27d14:	f8503901 	.word	0xf8503901
   27d18:	f85c8021 	.word	0xf85c8021
   27d1c:	0089e021 	.word	0x0089e021
   27d20:	440845f0 	.word	0x440845f0
   27d24:	0201eb0c 	.word	0x0201eb0c
   27d28:	d3cfd8c8 	.word	0xd3cfd8c8
   27d2c:	e0064601 	.word	0xe0064601
   27d30:	cd04f851 	.word	0xcd04f851
   27d34:	0d04f852 	.word	0x0d04f852
   27d38:	d8bf4584 	.word	0xd8bf4584
   27d3c:	3b01d3c6 	.word	0x3b01d3c6
   27d40:	e7bbd1f6 	.word	0xe7bbd1f6

00027d44 <symbol_000d773>:
   27d44:	41f0e92d 	.word	0x41f0e92d
   27d48:	6813680c 	.word	0x6813680c
   27d4c:	fb034605 	.word	0xfb034605
   27d50:	2b00f304 	.word	0x2b00f304
   27d54:	684bdd64 	.word	0x684bdd64
   27d58:	460e4617 	.word	0x460e4617
   27d5c:	b1836852 	.word	0xb1836852
   27d60:	f1036889 	.word	0xf1036889
   27d64:	38014080 	.word	0x38014080
   27d68:	c020f851 	.word	0xc020f851
   27d6c:	0180eb01 	.word	0x0180eb01
   27d70:	0f00f1bc 	.word	0x0f00f1bc
   27d74:	e01fd003 	.word	0xe01fd003
   27d78:	0d04f851 	.word	0x0d04f851
   27d7c:	3b01b9e0 	.word	0x3b01b9e0
   27d80:	b182d1fa 	.word	0xb182d1fa
   27d84:	4180f102 	.word	0x4180f102
   27d88:	c008f8d7 	.word	0xc008f8d7
   27d8c:	f85c3901 	.word	0xf85c3901
   27d90:	28000021 	.word	0x28000021
   27d94:	eb0cd13b 	.word	0xeb0cd13b
   27d98:	e0020181 	.word	0xe0020181
   27d9c:	0d04f851 	.word	0x0d04f851
   27da0:	3a01b9a8 	.word	0x3a01b9a8
   27da4:	463ad1fa 	.word	0x463ad1fa
   27da8:	46284631 	.word	0x46284631
   27dac:	fe96f7ff 	.word	0xfe96f7ff
   27db0:	602cb900 	.word	0x602cb900
   27db4:	81f0e8bd 	.word	0x81f0e8bd
   27db8:	d0f42a00 	.word	0xd0f42a00
   27dbc:	4180f102 	.word	0x4180f102
   27dc0:	c008f8d7 	.word	0xc008f8d7
   27dc4:	f85c3901 	.word	0xf85c3901
   27dc8:	28000021 	.word	0x28000021
   27dcc:	4293d0e3 	.word	0x4293d0e3
   27dd0:	d31cd8e9 	.word	0xd31cd8e9
   27dd4:	d0e62b00 	.word	0xd0e62b00
   27dd8:	f10368b0 	.word	0xf10368b0
   27ddc:	39014180 	.word	0x39014180
   27de0:	8021f850 	.word	0x8021f850
   27de4:	e021f85c 	.word	0xe021f85c
   27de8:	45f00089 	.word	0x45f00089
   27dec:	eb0c4408 	.word	0xeb0c4408
   27df0:	d8d80201 	.word	0xd8d80201
   27df4:	4601d30b 	.word	0x4601d30b
   27df8:	f851e006 	.word	0xf851e006
   27dfc:	f852cd04 	.word	0xf852cd04
   27e00:	45840d04 	.word	0x45840d04
   27e04:	d302d8cf 	.word	0xd302d8cf
   27e08:	d1f63b01 	.word	0xd1f63b01
   27e0c:	4632e7cb 	.word	0x4632e7cb
   27e10:	46284639 	.word	0x46284639
   27e14:	fe62f7ff 	.word	0xfe62f7ff
   27e18:	d1cb2800 	.word	0xd1cb2800
   27e1c:	e7c84264 	.word	0xe7c84264
   27e20:	fdb8f7ff 	.word	0xfdb8f7ff
   27e24:	d0c42800 	.word	0xd0c42800
   27e28:	81f0e8bd 	.word	0x81f0e8bd

00027e2c <symbol_000f268>:
   27e2c:	bfac2a00 	.word	0xbfac2a00
   27e30:	f04f2301 	.word	0xf04f2301
   27e34:	b5f033ff 	.word	0xb5f033ff
   27e38:	680d2601 	.word	0x680d2601
   27e3c:	7ce2ea82 	.word	0x7ce2ea82
   27e40:	f703fb05 	.word	0xf703fb05
   27e44:	ebacb085 	.word	0xebacb085
   27e48:	2f007ce2 	.word	0x2f007ce2
   27e4c:	e9cd9602 	.word	0xe9cd9602
   27e50:	f8cdc300 	.word	0xf8cdc300
   27e54:	4606d00c 	.word	0x4606d00c
   27e58:	684bdd2c 	.word	0x684bdd2c
   27e5c:	b173460c 	.word	0xb173460c
   27e60:	f10368a7 	.word	0xf10368a7
   27e64:	39014180 	.word	0x39014180
   27e68:	0021f857 	.word	0x0021f857
   27e6c:	0181eb07 	.word	0x0181eb07
   27e70:	e00eb118 	.word	0xe00eb118
   27e74:	0d04f851 	.word	0x0d04f851
   27e78:	3b01b958 	.word	0x3b01b958
   27e7c:	b982d1fa 	.word	0xb982d1fa
   27e80:	aa014621 	.word	0xaa014621
   27e84:	f7ff4630 	.word	0xf7ff4630
   27e88:	b900f8f9 	.word	0xb900f8f9
   27e8c:	b0056035 	.word	0xb0056035
   27e90:	2a00bdf0 	.word	0x2a00bdf0
   27e94:	2b01d0f4 	.word	0x2b01d0f4
   27e98:	683bd8f2 	.word	0x683bd8f2
   27e9c:	d3ef459c 	.word	0xd3ef459c
   27ea0:	4622d9ee 	.word	0x4622d9ee
   27ea4:	4630a901 	.word	0x4630a901
   27ea8:	fe18f7ff 	.word	0xfe18f7ff
   27eac:	d1ee2800 	.word	0xd1ee2800
   27eb0:	e7eb426d 	.word	0xe7eb426d
   27eb4:	f7ffaa01 	.word	0xf7ffaa01
   27eb8:	2800fd6d 	.word	0x2800fd6d
   27ebc:	b005d0e6 	.word	0xb005d0e6
   27ec0:	bf00bdf0 	.word	0xbf00bdf0

00027ec4 <symbol_000b923>:
   27ec4:	47f0e92d 	.word	0x47f0e92d
   27ec8:	23004606 	.word	0x23004606
   27ecc:	b0862001 	.word	0xb0862001
   27ed0:	4690428e 	.word	0x4690428e
   27ed4:	90039000 	.word	0x90039000
   27ed8:	3301e9cd 	.word	0x3301e9cd
   27edc:	3304e9cd 	.word	0x3304e9cd
   27ee0:	80d1f000 	.word	0x80d1f000
   27ee4:	4546460f 	.word	0x4546460f
   27ee8:	80d5f000 	.word	0x80d5f000
   27eec:	b185687d 	.word	0xb185687d
   27ef0:	f10568bb 	.word	0xf10568bb
   27ef4:	3a014280 	.word	0x3a014280
   27ef8:	1022f853 	.word	0x1022f853
   27efc:	0382eb03 	.word	0x0382eb03
   27f00:	e0bab129 	.word	0xe0bab129
   27f04:	2d04f853 	.word	0x2d04f853
   27f08:	f0402a00 	.word	0xf0402a00
   27f0c:	3d0180b6 	.word	0x3d0180b6
   27f10:	f8d8d1f8 	.word	0xf8d8d1f8
   27f14:	25004004 	.word	0x25004004
   27f18:	d03d2c00 	.word	0xd03d2c00
   27f1c:	3008f8d8 	.word	0x3008f8d8
   27f20:	4280f104 	.word	0x4280f104
   27f24:	f8533a01 	.word	0xf8533a01
   27f28:	eb031022 	.word	0xeb031022
   27f2c:	b1190382 	.word	0xb1190382
   27f30:	f853e004 	.word	0xf853e004
   27f34:	b90a2d04 	.word	0xb90a2d04
   27f38:	d1fa3c01 	.word	0xd1fa3c01
   27f3c:	7310f242 	.word	0x7310f242
   27f40:	0905eb04 	.word	0x0905eb04
   27f44:	f2004599 	.word	0xf2004599
   27f48:	f8d680b0 	.word	0xf8d680b0
   27f4c:	45d1a004 	.word	0x45d1a004
   27f50:	2104d925 	.word	0x2104d925
   27f54:	f0024648 	.word	0xf0024648
   27f58:	4682fbf3 	.word	0x4682fbf3
   27f5c:	f0002800 	.word	0xf0002800
   27f60:	68b180a4 	.word	0x68b180a4
   27f64:	6872b189 	.word	0x6872b189
   27f68:	f00a0092 	.word	0xf00a0092
   27f6c:	e9d6fcbc 	.word	0xe9d6fcbc
   27f70:	1e532001 	.word	0x1e532001
   27f74:	2200b13a 	.word	0x2200b13a
   27f78:	1c593b01 	.word	0x1c593b01
   27f7c:	f1006002 	.word	0xf1006002
   27f80:	d1f90004 	.word	0xd1f90004
   27f84:	f00268b0 	.word	0xf00268b0
   27f88:	e9c6fbef 	.word	0xe9c6fbef
   27f8c:	ea4f9a01 	.word	0xea4f9a01
   27f90:	f8d60289 	.word	0xf8d60289
   27f94:	e0259008 	.word	0xe0259008
   27f98:	f8d64625 	.word	0xf8d64625
   27f9c:	f1baa004 	.word	0xf1baa004
   27fa0:	f0400f00 	.word	0xf0400f00
   27fa4:	21048085 	.word	0x21048085
   27fa8:	f0022001 	.word	0xf0022001
   27fac:	4681fbc9 	.word	0x4681fbc9
   27fb0:	d07a2800 	.word	0xd07a2800
   27fb4:	b18968b1 	.word	0xb18968b1
   27fb8:	00926872 	.word	0x00926872
   27fbc:	fc93f00a 	.word	0xfc93f00a
   27fc0:	2001e9d6 	.word	0x2001e9d6
   27fc4:	b13a1e53 	.word	0xb13a1e53
   27fc8:	3b014652 	.word	0x3b014652
   27fcc:	60021c59 	.word	0x60021c59
   27fd0:	0004f100 	.word	0x0004f100
   27fd4:	68b0d1f9 	.word	0x68b0d1f9
   27fd8:	fbc6f002 	.word	0xfbc6f002
   27fdc:	22042301 	.word	0x22042301
   27fe0:	3901e9c6 	.word	0x3901e9c6
   27fe4:	46482100 	.word	0x46482100
   27fe8:	fc88f00a 	.word	0xfc88f00a
   27fec:	23012100 	.word	0x23012100
   27ff0:	601168b2 	.word	0x601168b2
   27ff4:	b19c6033 	.word	0xb19c6033
   27ff8:	4980f104 	.word	0x4980f104
   27ffc:	39fff109 	.word	0x39fff109
   28000:	0989ea4f 	.word	0x0989ea4f
   28004:	3008f8d8 	.word	0x3008f8d8
   28008:	f85368b2 	.word	0xf85368b2
   2800c:	444a3009 	.word	0x444a3009
   28010:	462868b9 	.word	0x462868b9
   28014:	fc14f7fe 	.word	0xfc14f7fe
   28018:	f1a93c01 	.word	0xf1a93c01
   2801c:	d1f10904 	.word	0xd1f10904
   28020:	683a2400 	.word	0x683a2400
   28024:	3000f8d8 	.word	0x3000f8d8
   28028:	f302fb03 	.word	0xf302fb03
   2802c:	98056033 	.word	0x98056033
   28030:	9a04b160 	.word	0x9a04b160
   28034:	b13a1e53 	.word	0xb13a1e53
   28038:	3b012200 	.word	0x3b012200
   2803c:	60021c5d 	.word	0x60021c5d
   28040:	0004f100 	.word	0x0004f100
   28044:	9805d1f9 	.word	0x9805d1f9
   28048:	fb8ef002 	.word	0xfb8ef002
   2804c:	23012200 	.word	0x23012200
   28050:	e9cd9802 	.word	0xe9cd9802
   28054:	92053203 	.word	0x92053203
   28058:	9901b158 	.word	0x9901b158
   2805c:	b1311e4b 	.word	0xb1311e4b
   28060:	1c593b01 	.word	0x1c593b01
   28064:	f1006002 	.word	0xf1006002
   28068:	d1f90004 	.word	0xd1f90004
   2806c:	f0029802 	.word	0xf0029802
   28070:	4620fb7b 	.word	0x4620fb7b
   28074:	e8bdb006 	.word	0xe8bdb006
   28078:	f8d887f0 	.word	0xf8d887f0
   2807c:	2c004004 	.word	0x2c004004
   28080:	af4cf47f 	.word	0xaf4cf47f
   28084:	4668e75a 	.word	0x4668e75a
   28088:	ff8af7fe 	.word	0xff8af7fe
   2808c:	28004604 	.word	0x28004604
   28090:	466fd1cd 	.word	0x466fd1cd
   28094:	a803e727 	.word	0xa803e727
   28098:	f7fe4631 	.word	0xf7fe4631
   2809c:	4604ff81 	.word	0x4604ff81
   280a0:	d1c42800 	.word	0xd1c42800
   280a4:	080cf10d 	.word	0x080cf10d
   280a8:	f06fe720 	.word	0xf06fe720
   280ac:	e7be040f 	.word	0xe7be040f
   280b0:	e76c46d1 	.word	0xe76c46d1

000280b4 <symbol_0008c0f>:
   280b4:	b5002301 	.word	0xb5002301
   280b8:	9200b085 	.word	0x9200b085
   280bc:	e9cdaa01 	.word	0xe9cdaa01
   280c0:	f8cd3301 	.word	0xf8cd3301
   280c4:	f7ffd00c 	.word	0xf7ffd00c
   280c8:	b005fefd 	.word	0xb005fefd
   280cc:	fb04f85d 	.word	0xfb04f85d

000280d0 <symbol_0007bb0>:
   280d0:	4ff0e92d 	.word	0x4ff0e92d
   280d4:	b0a3685e 	.word	0xb0a3685e
   280d8:	f8d3b196 	.word	0xf8d3b196
   280dc:	f1068008 	.word	0xf1068008
   280e0:	f1094980 	.word	0xf1094980
   280e4:	f85839ff 	.word	0xf85839ff
   280e8:	eb085029 	.word	0xeb085029
   280ec:	b96d0e89 	.word	0xb96d0e89
   280f0:	463746f4 	.word	0x463746f4
   280f4:	f85ce002 	.word	0xf85ce002
   280f8:	b93c4d04 	.word	0xb93c4d04
   280fc:	d1fa3f01 	.word	0xd1fa3f01
   28100:	060bf06f 	.word	0x060bf06f
   28104:	b0234630 	.word	0xb0234630
   28108:	8ff0e8bd 	.word	0x8ff0e8bd
   2810c:	2d00681d 	.word	0x2d00681d
   28110:	4614d0f6 	.word	0x4614d0f6
   28114:	2200468a 	.word	0x2200468a
   28118:	469b2101 	.word	0x469b2101
   2811c:	46056863 	.word	0x46056863
   28120:	91139110 	.word	0x91139110
   28124:	91199116 	.word	0x91199116
   28128:	e9cd911c 	.word	0xe9cd911c
   2812c:	e9cd2211 	.word	0xe9cd2211
   28130:	e9cd2214 	.word	0xe9cd2214
   28134:	e9cd2217 	.word	0xe9cd2217
   28138:	e9cd221a 	.word	0xe9cd221a
   2813c:	2b00221d 	.word	0x2b00221d
   28140:	821af000 	.word	0x821af000
   28144:	f10368a2 	.word	0xf10368a2
   28148:	39014180 	.word	0x39014180
   2814c:	0021f852 	.word	0x0021f852
   28150:	0281eb02 	.word	0x0281eb02
   28154:	e07bb120 	.word	0xe07bb120
   28158:	1d04f852 	.word	0x1d04f852
   2815c:	d1772900 	.word	0xd1772900
   28160:	d1f93b01 	.word	0xd1f93b01
   28164:	2029f858 	.word	0x2029f858
   28168:	d1772a00 	.word	0xd1772a00
   2816c:	e0034672 	.word	0xe0034672
   28170:	1d04f852 	.word	0x1d04f852
   28174:	d16f2900 	.word	0xd16f2900
   28178:	d1f93e01 	.word	0xd1f93e01
   2817c:	4621a810 	.word	0x4621a810
   28180:	ff0ef7fe 	.word	0xff0ef7fe
   28184:	28004606 	.word	0x28004606
   28188:	8092f000 	.word	0x8092f000
   2818c:	98122700 	.word	0x98122700
   28190:	9a11b160 	.word	0x9a11b160
   28194:	b13a1e53 	.word	0xb13a1e53
   28198:	3b012200 	.word	0x3b012200
   2819c:	60021c5c 	.word	0x60021c5c
   281a0:	0004f100 	.word	0x0004f100
   281a4:	9812d1f9 	.word	0x9812d1f9
   281a8:	fadef002 	.word	0xfadef002
   281ac:	23012200 	.word	0x23012200
   281b0:	e9cd9815 	.word	0xe9cd9815
   281b4:	92123210 	.word	0x92123210
   281b8:	9914b158 	.word	0x9914b158
   281bc:	b1311e4b 	.word	0xb1311e4b
   281c0:	1c593b01 	.word	0x1c593b01
   281c4:	f1006002 	.word	0xf1006002
   281c8:	d1f90004 	.word	0xd1f90004
   281cc:	f0029815 	.word	0xf0029815
   281d0:	2200facb 	.word	0x2200facb
   281d4:	98182301 	.word	0x98182301
   281d8:	3213e9cd 	.word	0x3213e9cd
   281dc:	b1589215 	.word	0xb1589215
   281e0:	1e4b9917 	.word	0x1e4b9917
   281e4:	3b01b131 	.word	0x3b01b131
   281e8:	60021c5d 	.word	0x60021c5d
   281ec:	0004f100 	.word	0x0004f100
   281f0:	9818d1f9 	.word	0x9818d1f9
   281f4:	fab8f002 	.word	0xfab8f002
   281f8:	23012200 	.word	0x23012200
   281fc:	e9cd981b 	.word	0xe9cd981b
   28200:	92183216 	.word	0x92183216
   28204:	991ab158 	.word	0x991ab158
   28208:	b1311e4b 	.word	0xb1311e4b
   2820c:	1c5c3b01 	.word	0x1c5c3b01
   28210:	f1006002 	.word	0xf1006002
   28214:	d1f90004 	.word	0xd1f90004
   28218:	f002981b 	.word	0xf002981b
   2821c:	2100faa5 	.word	0x2100faa5
   28220:	911b2301 	.word	0x911b2301
   28224:	3119e9cd 	.word	0x3119e9cd
   28228:	f43f2f00 	.word	0xf43f2f00
   2822c:	9a1daf6b 	.word	0x9a1daf6b
   28230:	b1321e53 	.word	0xb1321e53
   28234:	3b01463a 	.word	0x3b01463a
   28238:	60111c58 	.word	0x60111c58
   2823c:	0204f102 	.word	0x0204f102
   28240:	4638d1f9 	.word	0x4638d1f9
   28244:	fa90f002 	.word	0xfa90f002
   28248:	b0234630 	.word	0xb0234630
   2824c:	8ff0e8bd 	.word	0x8ff0e8bd
   28250:	2029f858 	.word	0x2029f858
   28254:	d0892a00 	.word	0xd0892a00
   28258:	d38f429e 	.word	0xd38f429e
   2825c:	f200429e 	.word	0xf200429e
   28260:	2b008190 	.word	0x2b008190
   28264:	68a1d08a 	.word	0x68a1d08a
   28268:	4280f103 	.word	0x4280f103
   2826c:	f8513a01 	.word	0xf8513a01
   28270:	f8580022 	.word	0xf8580022
   28274:	00926022 	.word	0x00926022
   28278:	44114286 	.word	0x44114286
   2827c:	f4ff4490 	.word	0xf4ff4490
   28280:	f200af7d 	.word	0xf200af7d
   28284:	460a817e 	.word	0x460a817e
   28288:	f852e008 	.word	0xf852e008
   2828c:	f8580d04 	.word	0xf8580d04
   28290:	42881d04 	.word	0x42881d04
   28294:	af72f63f 	.word	0xaf72f63f
   28298:	8173f0c0 	.word	0x8173f0c0
   2829c:	d1f43b01 	.word	0xd1f43b01
   282a0:	4621a810 	.word	0x4621a810
   282a4:	fe7cf7fe 	.word	0xfe7cf7fe
   282a8:	28004606 	.word	0x28004606
   282ac:	af6ef47f 	.word	0xaf6ef47f
   282b0:	4659a813 	.word	0x4659a813
   282b4:	fe74f7fe 	.word	0xfe74f7fe
   282b8:	28004606 	.word	0x28004606
   282bc:	af66f47f 	.word	0xaf66f47f
   282c0:	7210f242 	.word	0x7210f242
   282c4:	68672301 	.word	0x68672301
   282c8:	37029313 	.word	0x37029313
   282cc:	93104297 	.word	0x93104297
   282d0:	8193f200 	.word	0x8193f200
   282d4:	805cf8dd 	.word	0x805cf8dd
   282d8:	d91d4547 	.word	0xd91d4547
   282dc:	46382104 	.word	0x46382104
   282e0:	fa2ef002 	.word	0xfa2ef002
   282e4:	28004681 	.word	0x28004681
   282e8:	8187f000 	.word	0x8187f000
   282ec:	b1819918 	.word	0xb1819918
   282f0:	00929a17 	.word	0x00929a17
   282f4:	faf7f00a 	.word	0xfaf7f00a
   282f8:	2017e9dd 	.word	0x2017e9dd
   282fc:	b1321e53 	.word	0xb1321e53
   28300:	1c5a3b01 	.word	0x1c5a3b01
   28304:	f1006006 	.word	0xf1006006
   28308:	d1f90004 	.word	0xd1f90004
   2830c:	f0029818 	.word	0xf0029818
   28310:	46b8fa2b 	.word	0x46b8fa2b
   28314:	7917e9cd 	.word	0x7917e9cd
   28318:	0f00f1b8 	.word	0x0f00f1b8
   2831c:	8171f000 	.word	0x8171f000
   28320:	ea4f9e18 	.word	0xea4f9e18
   28324:	27000288 	.word	0x27000288
   28328:	46394630 	.word	0x46394630
   2832c:	fae6f00a 	.word	0xfae6f00a
   28330:	9b182201 	.word	0x9b182201
   28334:	9b1a601f 	.word	0x9b1a601f
   28338:	42939216 	.word	0x42939216
   2833c:	81b2f240 	.word	0x81b2f240
   28340:	20032104 	.word	0x20032104
   28344:	f9fcf002 	.word	0xf9fcf002
   28348:	28004607 	.word	0x28004607
   2834c:	8155f000 	.word	0x8155f000
   28350:	9a142303 	.word	0x9a142303
   28354:	301de9cd 	.word	0x301de9cd
   28358:	2a009203 	.word	0x2a009203
   2835c:	8171f000 	.word	0x8171f000
   28360:	0901f1b2 	.word	0x0901f1b2
   28364:	f0009915 	.word	0xf0009915
   28368:	f85181cf 	.word	0xf85181cf
   2836c:	28000029 	.word	0x28000029
   28370:	81c5f040 	.word	0x81c5f040
   28374:	4280f102 	.word	0x4280f102
   28378:	464b3a01 	.word	0x464b3a01
   2837c:	0282eb01 	.word	0x0282eb01
   28380:	f852e004 	.word	0xf852e004
   28384:	28000d04 	.word	0x28000d04
   28388:	81aef040 	.word	0x81aef040
   2838c:	d1f83b01 	.word	0xd1f83b01
   28390:	68082620 	.word	0x68082620
   28394:	f04f2200 	.word	0xf04f2200
   28398:	e0024100 	.word	0xe0024100
   2839c:	2a203201 	.word	0x2a203201
   283a0:	4201d004 	.word	0x4201d004
   283a4:	0151ea4f 	.word	0x0151ea4f
   283a8:	1ab3d0f8 	.word	0x1ab3d0f8
   283ac:	031ff003 	.word	0x031ff003
   283b0:	f0402b1f 	.word	0xf0402b1f
   283b4:	2300819f 	.word	0x2300819f
   283b8:	9b119302 	.word	0x9b119302
   283bc:	9304a813 	.word	0x9304a813
   283c0:	eba33b01 	.word	0xeba33b01
   283c4:	93010809 	.word	0x93010809
   283c8:	1348ea4f 	.word	0x1348ea4f
   283cc:	93054619 	.word	0x93054619
   283d0:	f8fef7ff 	.word	0xf8fef7ff
   283d4:	28004606 	.word	0x28004606
   283d8:	aed9f47f 	.word	0xaed9f47f
   283dc:	0888ea4f 	.word	0x0888ea4f
   283e0:	9818e00d 	.word	0x9818e00d
   283e4:	f850a910 	.word	0xf850a910
   283e8:	aa133008 	.word	0xaa133008
   283ec:	f8403301 	.word	0xf8403301
   283f0:	46083008 	.word	0x46083008
   283f4:	fca6f7ff 	.word	0xfca6f7ff
   283f8:	f0402800 	.word	0xf0402800
   283fc:	a9138179 	.word	0xa9138179
   28400:	f7ffa810 	.word	0xf7ffa810
   28404:	2800fa0b 	.word	0x2800fa0b
   28408:	9905daeb 	.word	0x9905daeb
   2840c:	f7ffa813 	.word	0xf7ffa813
   28410:	4606f995 	.word	0x4606f995
   28414:	f47f2800 	.word	0xf47f2800
   28418:	f06faeba 	.word	0xf06faeba
   2841c:	9a030303 	.word	0x9a030303
   28420:	b508e9cd 	.word	0xb508e9cd
   28424:	4780f102 	.word	0x4780f102
   28428:	fb039a04 	.word	0xfb039a04
   2842c:	f102f309 	.word	0xf102f309
   28430:	3a024280 	.word	0x3a024280
   28434:	46150092 	.word	0x46150092
   28438:	ea4f9305 	.word	0xea4f9305
   2843c:	93030389 	.word	0x93030389
   28440:	63c9ebc9 	.word	0x63c9ebc9
   28444:	e9cd3f02 	.word	0xe9cd3f02
   28448:	e9cd3006 	.word	0xe9cd3006
   2844c:	00b9a40a 	.word	0x00b9a40a
   28450:	9b019104 	.word	0x9b019104
   28454:	f240454b 	.word	0xf240454b
   28458:	98038173 	.word	0x98038173
   2845c:	9a159912 	.word	0x9a159912
   28460:	0a04f105 	.word	0x0a04f105
   28464:	f8515812 	.word	0xf8515812
   28468:	9805300a 	.word	0x9805300a
   2846c:	eb004293 	.word	0xeb004293
   28470:	9e180405 	.word	0x9e180405
   28474:	814cf0c0 	.word	0x814cf0c0
   28478:	33fff04f 	.word	0x33fff04f
   2847c:	26015133 	.word	0x26015133
   28480:	9f1e9a18 	.word	0x9f1e9a18
   28484:	f1a55913 	.word	0xf1a55913
   28488:	44330b04 	.word	0x44330b04
   2848c:	e04b5113 	.word	0xe04b5113
   28490:	806cf8dd 	.word	0x806cf8dd
   28494:	46400092 	.word	0x46400092
   28498:	f00a2100 	.word	0xf00a2100
   2849c:	2200fa2f 	.word	0x2200fa2f
   284a0:	601a9b1b 	.word	0x601a9b1b
   284a4:	f1b99619 	.word	0xf1b99619
   284a8:	f0000f00 	.word	0xf0000f00
   284ac:	9b1580f9 	.word	0x9b1580f9
   284b0:	589b9a04 	.word	0x589b9a04
   284b4:	99039a1b 	.word	0x99039a1b
   284b8:	9a156013 	.word	0x9a156013
   284bc:	58529b1b 	.word	0x58529b1b
   284c0:	605aa919 	.word	0x605aa919
   284c4:	f10d9b18 	.word	0xf10d9b18
   284c8:	591b083c 	.word	0x591b083c
   284cc:	4608aa1f 	.word	0x4608aa1f
   284d0:	e9cd930f 	.word	0xe9cd930f
   284d4:	f8cd661f 	.word	0xf8cd661f
   284d8:	f7ff8084 	.word	0xf7ff8084
   284dc:	2800fcf3 	.word	0x2800fcf3
   284e0:	8106f040 	.word	0x8106f040
   284e4:	2a009a1d 	.word	0x2a009a1d
   284e8:	80c2f000 	.word	0x80c2f000
   284ec:	21000092 	.word	0x21000092
   284f0:	f00a4638 	.word	0xf00a4638
   284f4:	2300fa03 	.word	0x2300fa03
   284f8:	9b01603b 	.word	0x9b01603b
   284fc:	2b01961c 	.word	0x2b01961c
   28500:	9b12a91c 	.word	0x9b12a91c
   28504:	80edf000 	.word	0x80edf000
   28508:	300bf853 	.word	0x300bf853
   2850c:	603ba819 	.word	0x603ba819
   28510:	595b9b12 	.word	0x595b9b12
   28514:	9b12607b 	.word	0x9b12607b
   28518:	300af853 	.word	0x300af853
   2851c:	f7ff60bb 	.word	0xf7ff60bb
   28520:	2800f97d 	.word	0x2800f97d
   28524:	811cf340 	.word	0x811cf340
   28528:	59139a18 	.word	0x59139a18
   2852c:	51133b01 	.word	0x51133b01
   28530:	2a009a1a 	.word	0x2a009a1a
   28534:	2104d1ac 	.word	0x2104d1ac
   28538:	f0022001 	.word	0xf0022001
   2853c:	4680f901 	.word	0x4680f901
   28540:	f0002800 	.word	0xf0002800
   28544:	991b8140 	.word	0x991b8140
   28548:	9a1ab191 	.word	0x9a1ab191
   2854c:	f00a0092 	.word	0xf00a0092
   28550:	e9ddf9ca 	.word	0xe9ddf9ca
   28554:	4602101a 	.word	0x4602101a
   28558:	b1391e4b 	.word	0xb1391e4b
   2855c:	3b012100 	.word	0x3b012100
   28560:	1c596011 	.word	0x1c596011
   28564:	0204f102 	.word	0x0204f102
   28568:	981bd1f8 	.word	0x981bd1f8
   2856c:	f8fcf002 	.word	0xf8fcf002
   28570:	e9cd2204 	.word	0xe9cd2204
   28574:	e78e681a 	.word	0xe78e681a
   28578:	2029f858 	.word	0x2029f858
   2857c:	f43f2a00 	.word	0xf43f2a00
   28580:	b355adf5 	.word	0xb355adf5
   28584:	b9ee686e 	.word	0xb9ee686e
   28588:	20012104 	.word	0x20012104
   2858c:	f8d8f002 	.word	0xf8d8f002
   28590:	b3904607 	.word	0xb3904607
   28594:	b18168a9 	.word	0xb18168a9
   28598:	0092686a 	.word	0x0092686a
   2859c:	f9a3f00a 	.word	0xf9a3f00a
   285a0:	2001e9d5 	.word	0x2001e9d5
   285a4:	b1321e53 	.word	0xb1321e53
   285a8:	1c593b01 	.word	0x1c593b01
   285ac:	f1006006 	.word	0xf1006006
   285b0:	d1f90004 	.word	0xd1f90004
   285b4:	f00268a8 	.word	0xf00268a8
   285b8:	2301f8d7 	.word	0x2301f8d7
   285bc:	e9c52204 	.word	0xe9c52204
   285c0:	e0013701 	.word	0xe0013701
   285c4:	00b268af 	.word	0x00b268af
   285c8:	46382100 	.word	0x46382100
   285cc:	f996f00a 	.word	0xf996f00a
   285d0:	23012100 	.word	0x23012100
   285d4:	601168aa 	.word	0x601168aa
   285d8:	f1ba602b 	.word	0xf1ba602b
   285dc:	d0070f00 	.word	0xd0070f00
   285e0:	46504621 	.word	0x46504621
   285e4:	fcdcf7fe 	.word	0xfcdcf7fe
   285e8:	28004606 	.word	0x28004606
   285ec:	adcef47f 	.word	0xadcef47f
   285f0:	46302600 	.word	0x46302600
   285f4:	e8bdb023 	.word	0xe8bdb023
   285f8:	27008ff0 	.word	0x27008ff0
   285fc:	060ff06f 	.word	0x060ff06f
   28600:	2104e5c5 	.word	0x2104e5c5
   28604:	f0022001 	.word	0xf0022001
   28608:	4606f89b 	.word	0x4606f89b
   2860c:	d0f42800 	.word	0xd0f42800
   28610:	b1899918 	.word	0xb1899918
   28614:	00929a17 	.word	0x00929a17
   28618:	f965f00a 	.word	0xf965f00a
   2861c:	3017e9dd 	.word	0x3017e9dd
   28620:	b13b1e5a 	.word	0xb13b1e5a
   28624:	3a014643 	.word	0x3a014643
   28628:	60031c57 	.word	0x60031c57
   2862c:	0004f100 	.word	0x0004f100
   28630:	9818d1f9 	.word	0x9818d1f9
   28634:	f898f002 	.word	0xf898f002
   28638:	22042301 	.word	0x22042301
   2863c:	3617e9cd 	.word	0x3617e9cd
   28640:	231fe671 	.word	0x231fe671
   28644:	93024619 	.word	0x93024619
   28648:	f7fea810 	.word	0xf7fea810
   2864c:	4606ffc1 	.word	0x4606ffc1
   28650:	f47f2800 	.word	0xf47f2800
   28654:	9902ad9c 	.word	0x9902ad9c
   28658:	f7fea813 	.word	0xf7fea813
   2865c:	4606ffb9 	.word	0x4606ffb9
   28660:	f47f2800 	.word	0xf47f2800
   28664:	9b14ad94 	.word	0x9b14ad94
   28668:	f1039303 	.word	0xf1039303
   2866c:	e6a439ff 	.word	0xe6a439ff
   28670:	20012104 	.word	0x20012104
   28674:	f002920d 	.word	0xf002920d
   28678:	4603f863 	.word	0x4603f863
   2867c:	f0002800 	.word	0xf0002800
   28680:	b14780a2 	.word	0xb14780a2
   28684:	46399a0d 	.word	0x46399a0d
   28688:	f00a900c 	.word	0xf00a900c
   2868c:	4638f92c 	.word	0x4638f92c
   28690:	f86af002 	.word	0xf86af002
   28694:	461f9b0c 	.word	0x461f9b0c
   28698:	e9cd2204 	.word	0xe9cd2204
   2869c:	e726631d 	.word	0xe726631d
   286a0:	e707464b 	.word	0xe707464b
   286a4:	20022104 	.word	0x20022104
   286a8:	f84af002 	.word	0xf84af002
   286ac:	28004606 	.word	0x28004606
   286b0:	991bd0a3 	.word	0x991bd0a3
   286b4:	9a1ab189 	.word	0x9a1ab189
   286b8:	f00a0092 	.word	0xf00a0092
   286bc:	e9ddf914 	.word	0xe9ddf914
   286c0:	4618131a 	.word	0x4618131a
   286c4:	b1311e4a 	.word	0xb1311e4a
   286c8:	1c503a01 	.word	0x1c503a01
   286cc:	f103601f 	.word	0xf103601f
   286d0:	d1f90304 	.word	0xd1f90304
   286d4:	f002981b 	.word	0xf002981b
   286d8:	2302f847 	.word	0x2302f847
   286dc:	361ae9cd 	.word	0x361ae9cd
   286e0:	595be62e 	.word	0x595be62e
   286e4:	e715a819 	.word	0xe715a819
   286e8:	f103015b 	.word	0xf103015b
   286ec:	e6510620 	.word	0xe6510620
   286f0:	e54c4606 	.word	0xe54c4606
   286f4:	031ff1c3 	.word	0x031ff1c3
   286f8:	46199302 	.word	0x46199302
   286fc:	ea4fe7a4 	.word	0xea4fe7a4
   28700:	f1031349 	.word	0xf1031349
   28704:	e6450620 	.word	0xe6450620
   28708:	26206808 	.word	0x26206808
   2870c:	e641464b 	.word	0xe641464b
   28710:	b192594f 	.word	0xb192594f
   28714:	f04f469c 	.word	0xf04f469c
   28718:	46610b00 	.word	0x46610b00
   2871c:	ea4b465b 	.word	0xea4b465b
   28720:	f7f00007 	.word	0xf7f00007
   28724:	2300f889 	.word	0x2300f889
   28728:	32fff04f 	.word	0x32fff04f
   2872c:	bf08428b 	.word	0xbf08428b
   28730:	d2004282 	.word	0xd2004282
   28734:	51304610 	.word	0x51304610
   28738:	f04fe6a1 	.word	0xf04fe6a1
   2873c:	e7fa30ff 	.word	0xe7fa30ff
   28740:	6b07e9dd 	.word	0x6b07e9dd
   28744:	5a09e9dd 	.word	0x5a09e9dd
   28748:	2d009c0b 	.word	0x2d009c0b
   2874c:	a916d05f 	.word	0xa916d05f
   28750:	f7fe4628 	.word	0xf7fe4628
   28754:	2800fc25 	.word	0x2800fc25
   28758:	4606d053 	.word	0x4606d053
   2875c:	e5169f1e 	.word	0xe5169f1e
   28760:	9b182501 	.word	0x9b182501
   28764:	591baa1f 	.word	0x591baa1f
   28768:	a819a913 	.word	0xa819a913
   2876c:	f8cd930f 	.word	0xf8cd930f
   28770:	e9cd8084 	.word	0xe9cd8084
   28774:	f7ff551f 	.word	0xf7ff551f
   28778:	2800fba5 	.word	0x2800fba5
   2877c:	9b06d1b8 	.word	0x9b06d1b8
   28780:	f1039a01 	.word	0xf1039a01
   28784:	3b016300 	.word	0x3b016300
   28788:	015e4413 	.word	0x015e4413
   2878c:	a8194631 	.word	0xa8194631
   28790:	ff1ef7fe 	.word	0xff1ef7fe
   28794:	d1ab2800 	.word	0xd1ab2800
   28798:	aa19a910 	.word	0xaa19a910
   2879c:	f7ff4608 	.word	0xf7ff4608
   287a0:	4603fad1 	.word	0x4603fad1
   287a4:	a91fbb58 	.word	0xa91fbb58
   287a8:	930fa810 	.word	0x930fa810
   287ac:	551fe9cd 	.word	0x551fe9cd
   287b0:	8084f8cd 	.word	0x8084f8cd
   287b4:	fb2ef7fe 	.word	0xfb2ef7fe
   287b8:	db072800 	.word	0xdb072800
   287bc:	465d9b01 	.word	0x465d9b01
   287c0:	93013b01 	.word	0x93013b01
   287c4:	f06fe645 	.word	0xf06fe645
   287c8:	e4e0060f 	.word	0xe4e0060f
   287cc:	a819a913 	.word	0xa819a913
   287d0:	fbe6f7fe 	.word	0xfbe6f7fe
   287d4:	d18b2800 	.word	0xd18b2800
   287d8:	a8194631 	.word	0xa8194631
   287dc:	fef8f7fe 	.word	0xfef8f7fe
   287e0:	d1852800 	.word	0xd1852800
   287e4:	aa19a910 	.word	0xaa19a910
   287e8:	f7ff4608 	.word	0xf7ff4608
   287ec:	2800fa37 	.word	0x2800fa37
   287f0:	af7ef47f 	.word	0xaf7ef47f
   287f4:	59139a18 	.word	0x59139a18
   287f8:	51133b01 	.word	0x51133b01
   287fc:	4606e7de 	.word	0x4606e7de
   28800:	f8dbe4c5 	.word	0xf8dbe4c5
   28804:	68223000 	.word	0x68223000
   28808:	f302fb03 	.word	0xf302fb03
   2880c:	f1ba602b 	.word	0xf1ba602b
   28810:	d0050f00 	.word	0xd0050f00
   28814:	a8109902 	.word	0xa8109902
   28818:	ff90f7fe 	.word	0xff90f7fe
   2881c:	b1084606 	.word	0xb1084606
   28820:	e4b49f1e 	.word	0xe4b49f1e
   28824:	a9106823 	.word	0xa9106823
   28828:	93104650 	.word	0x93104650
   2882c:	fbb8f7fe 	.word	0xfbb8f7fe
   28830:	28004606 	.word	0x28004606
   28834:	2401d1f4 	.word	0x2401d1f4
   28838:	a91fab0f 	.word	0xa91fab0f
   2883c:	960f4650 	.word	0x960f4650
   28840:	441fe9cd 	.word	0x441fe9cd
   28844:	f7fe9321 	.word	0xf7fe9321
   28848:	2800fae5 	.word	0x2800fae5
   2884c:	f8cad1e8 	.word	0xf8cad1e8
   28850:	e7e54000 	.word	0xe7e54000

00028854 <symbol_000dbba>:
   28854:	41f0e92d 	.word	0x41f0e92d
   28858:	46176853 	.word	0x46176853
   2885c:	6894b183 	.word	0x6894b183
   28860:	4580f103 	.word	0x4580f103
   28864:	f8543d01 	.word	0xf8543d01
   28868:	eb042025 	.word	0xeb042025
   2886c:	b12a0485 	.word	0xb12a0485
   28870:	f854e11a 	.word	0xf854e11a
   28874:	2d005d04 	.word	0x2d005d04
   28878:	8116f040 	.word	0x8116f040
   2887c:	d1f83b01 	.word	0xd1f83b01
   28880:	4606460a 	.word	0x4606460a
   28884:	463b4601 	.word	0x463b4601
   28888:	f7ff2000 	.word	0xf7ff2000
   2888c:	2800fc21 	.word	0x2800fc21
   28890:	f06fd151 	.word	0xf06fd151
   28894:	68714840 	.word	0x68714840
   28898:	68b0b191 	.word	0x68b0b191
   2889c:	0308eb01 	.word	0x0308eb01
   288a0:	c023f850 	.word	0xc023f850
   288a4:	0283eb00 	.word	0x0283eb00
   288a8:	0f00f1bc 	.word	0x0f00f1bc
   288ac:	4614d156 	.word	0x4614d156
   288b0:	e003460b 	.word	0xe003460b
   288b4:	5d04f854 	.word	0x5d04f854
   288b8:	d14f2d00 	.word	0xd14f2d00
   288bc:	d1f93b01 	.word	0xd1f93b01
   288c0:	4440f06f 	.word	0x4440f06f
   288c4:	46304639 	.word	0x46304639
   288c8:	ffa8f7fe 	.word	0xffa8f7fe
   288cc:	db422800 	.word	0xdb422800
   288d0:	683b6835 	.word	0x683b6835
   288d4:	f305fb03 	.word	0xf305fb03
   288d8:	dd2e2b00 	.word	0xdd2e2b00
   288dc:	687a6873 	.word	0x687a6873
   288e0:	68b1b183 	.word	0x68b1b183
   288e4:	f8511918 	.word	0xf8511918
   288e8:	eb01c020 	.word	0xeb01c020
   288ec:	f1bc0180 	.word	0xf1bc0180
   288f0:	d0050f00 	.word	0xd0050f00
   288f4:	f851e090 	.word	0xf851e090
   288f8:	28000d04 	.word	0x28000d04
   288fc:	808cf040 	.word	0x808cf040
   28900:	d1f83b01 	.word	0xd1f83b01
   28904:	f8d7b18a 	.word	0xf8d7b18a
   28908:	1911c008 	.word	0x1911c008
   2890c:	0021f85c 	.word	0x0021f85c
   28910:	f0402800 	.word	0xf0402800
   28914:	eb0c80be 	.word	0xeb0c80be
   28918:	e0040181 	.word	0xe0040181
   2891c:	0d04f851 	.word	0x0d04f851
   28920:	f0402800 	.word	0xf0402800
   28924:	3a018083 	.word	0x3a018083
   28928:	463ad1f8 	.word	0x463ad1f8
   2892c:	46304631 	.word	0x46304631
   28930:	f8d4f7ff 	.word	0xf8d4f7ff
   28934:	e8bdb140 	.word	0xe8bdb140
   28938:	463a81f0 	.word	0x463a81f0
   2893c:	46304631 	.word	0x46304631
   28940:	f828f7ff 	.word	0xf828f7ff
   28944:	d1f62800 	.word	0xd1f62800
   28948:	46396035 	.word	0x46396035
   2894c:	f7fe4630 	.word	0xf7fe4630
   28950:	2800ff65 	.word	0x2800ff65
   28954:	2000dabc 	.word	0x2000dabc
   28958:	81f0e8bd 	.word	0x81f0e8bd
   2895c:	2c006834 	.word	0x2c006834
   28960:	683bdaae 	.word	0x683bdaae
   28964:	f304fb03 	.word	0xf304fb03
   28968:	da232b00 	.word	0xda232b00
   2896c:	0f00f1bc 	.word	0x0f00f1bc
   28970:	4613d129 	.word	0x4613d129
   28974:	f853e002 	.word	0xf853e002
   28978:	bb222d04 	.word	0xbb222d04
   2897c:	d1fa3901 	.word	0xd1fa3901
   28980:	b173687b 	.word	0xb173687b
   28984:	c008f8d7 	.word	0xc008f8d7
   28988:	0208eb03 	.word	0x0208eb03
   2898c:	5022f85c 	.word	0x5022f85c
   28990:	0282eb0c 	.word	0x0282eb0c
   28994:	e071b11d 	.word	0xe071b11d
   28998:	5d04f852 	.word	0x5d04f852
   2899c:	3b01bb05 	.word	0x3b01bb05
   289a0:	463ad1fa 	.word	0x463ad1fa
   289a4:	46304631 	.word	0x46304631
   289a8:	f898f7ff 	.word	0xf898f7ff
   289ac:	d1c22800 	.word	0xd1c22800
   289b0:	e7706034 	.word	0xe7706034
   289b4:	4631463a 	.word	0x4631463a
   289b8:	f7fe4630 	.word	0xf7fe4630
   289bc:	2800ffeb 	.word	0x2800ffeb
   289c0:	e8bdd0f6 	.word	0xe8bdd0f6
   289c4:	687b81f0 	.word	0x687b81f0
   289c8:	d0ea2b00 	.word	0xd0ea2b00
   289cc:	c008f8d7 	.word	0xc008f8d7
   289d0:	0208eb03 	.word	0x0208eb03
   289d4:	5022f85c 	.word	0x5022f85c
   289d8:	0282eb0c 	.word	0x0282eb0c
   289dc:	d0de2d00 	.word	0xd0de2d00
   289e0:	d8de4299 	.word	0xd8de4299
   289e4:	2900d34a 	.word	0x2900d34a
   289e8:	eb01d0db 	.word	0xeb01d0db
   289ec:	f8500308 	.word	0xf8500308
   289f0:	f85c2023 	.word	0xf85c2023
   289f4:	009b5023 	.word	0x009b5023
   289f8:	44184295 	.word	0x44184295
   289fc:	d3d04463 	.word	0xd3d04463
   28a00:	e03bd907 	.word	0xe03bd907
   28a04:	5d04f850 	.word	0x5d04f850
   28a08:	2d04f853 	.word	0x2d04f853
   28a0c:	d8c84295 	.word	0xd8c84295
   28a10:	3901d334 	.word	0x3901d334
   28a14:	e7c4d1f6 	.word	0xe7c4d1f6
   28a18:	d0862a00 	.word	0xd0862a00
   28a1c:	c008f8d7 	.word	0xc008f8d7
   28a20:	f85c1911 	.word	0xf85c1911
   28a24:	28000021 	.word	0x28000021
   28a28:	af75f43f 	.word	0xaf75f43f
   28a2c:	f63f4293 	.word	0xf63f4293
   28a30:	d32eaf7c 	.word	0xd32eaf7c
   28a34:	f43f2b00 	.word	0xf43f2b00
   28a38:	68b1af78 	.word	0x68b1af78
   28a3c:	f851191a 	.word	0xf851191a
   28a40:	f85c0022 	.word	0xf85c0022
   28a44:	0092e022 	.word	0x0092e022
   28a48:	44114586 	.word	0x44114586
   28a4c:	f4ff4462 	.word	0xf4ff4462
   28a50:	d908af6c 	.word	0xd908af6c
   28a54:	f851e01d 	.word	0xf851e01d
   28a58:	f852cd04 	.word	0xf852cd04
   28a5c:	45840d04 	.word	0x45840d04
   28a60:	af63f63f 	.word	0xaf63f63f
   28a64:	3b01d315 	.word	0x3b01d315
   28a68:	463ad1f5 	.word	0x463ad1f5
   28a6c:	46304631 	.word	0x46304631
   28a70:	f834f7ff 	.word	0xf834f7ff
   28a74:	f47f2800 	.word	0xf47f2800
   28a78:	e765af5e 	.word	0xe765af5e
   28a7c:	46394632 	.word	0x46394632
   28a80:	f7ff4630 	.word	0xf7ff4630
   28a84:	2800f82b 	.word	0x2800f82b
   28a88:	af55f47f 	.word	0xaf55f47f
   28a8c:	60344264 	.word	0x60344264
   28a90:	4632e701 	.word	0x4632e701
   28a94:	46304639 	.word	0x46304639
   28a98:	f820f7ff 	.word	0xf820f7ff
   28a9c:	f47f2800 	.word	0xf47f2800
   28aa0:	426daf4a 	.word	0x426daf4a
   28aa4:	e70d6035 	.word	0xe70d6035
   28aa8:	2b00683b 	.word	0x2b00683b
   28aac:	aee8f6bf 	.word	0xaee8f6bf
   28ab0:	0009f06f 	.word	0x0009f06f
   28ab4:	bf00e73f 	.word	0xbf00e73f

00028ab8 <symbol_0005f38>:
   28ab8:	41f0e92d 	.word	0x41f0e92d
   28abc:	2501460f 	.word	0x2501460f
   28ac0:	68bb2100 	.word	0x68bb2100
   28ac4:	4604b086 	.word	0x4604b086
   28ac8:	95004616 	.word	0x95004616
   28acc:	e9cd9503 	.word	0xe9cd9503
   28ad0:	e9cd1101 	.word	0xe9cd1101
   28ad4:	2b001104 	.word	0x2b001104
   28ad8:	6879d040 	.word	0x6879d040
   28adc:	d0111e4a 	.word	0xd0111e4a
   28ae0:	0022f853 	.word	0x0022f853
   28ae4:	f0402800 	.word	0xf0402800
   28ae8:	f10180c4 	.word	0xf10180c4
   28aec:	39014180 	.word	0x39014180
   28af0:	0381eb03 	.word	0x0381eb03
   28af4:	f853e004 	.word	0xf853e004
   28af8:	29001d04 	.word	0x29001d04
   28afc:	80b9f040 	.word	0x80b9f040
   28b00:	d1f83a01 	.word	0xd1f83a01
   28b04:	683b2501 	.word	0x683b2501
   28b08:	21049300 	.word	0x21049300
   28b0c:	f0014628 	.word	0xf0014628
   28b10:	4680fe17 	.word	0x4680fe17
   28b14:	f0002800 	.word	0xf0002800
   28b18:	9902813c 	.word	0x9902813c
   28b1c:	9a01b189 	.word	0x9a01b189
   28b20:	f0090092 	.word	0xf0090092
   28b24:	e9ddfee0 	.word	0xe9ddfee0
   28b28:	1e532001 	.word	0x1e532001
   28b2c:	2200b13a 	.word	0x2200b13a
   28b30:	1c593b01 	.word	0x1c593b01
   28b34:	f1006002 	.word	0xf1006002
   28b38:	d1f90004 	.word	0xd1f90004
   28b3c:	f0019802 	.word	0xf0019802
   28b40:	e9cdfe13 	.word	0xe9cdfe13
   28b44:	00ad5801 	.word	0x00ad5801
   28b48:	2100462a 	.word	0x2100462a
   28b4c:	f0094640 	.word	0xf0094640
   28b50:	462afed5 	.word	0x462afed5
   28b54:	980268b9 	.word	0x980268b9
   28b58:	fec5f009 	.word	0xfec5f009
   28b5c:	a8034631 	.word	0xa8034631
   28b60:	fa1ef7fe 	.word	0xfa1ef7fe
   28b64:	28004607 	.word	0x28004607
   28b68:	9e01d15d 	.word	0x9e01d15d
   28b6c:	f0002e00 	.word	0xf0002e00
   28b70:	4601810e 	.word	0x4601810e
   28b74:	3d049d02 	.word	0x3d049d02
   28b78:	f8552200 	.word	0xf8552200
   28b7c:	e0040f04 	.word	0xe0040f04
   28b80:	f1012a20 	.word	0xf1012a20
   28b84:	f0000101 	.word	0xf0000101
   28b88:	fa208081 	.word	0xfa208081
   28b8c:	f013f302 	.word	0xf013f302
   28b90:	f1020301 	.word	0xf1020301
   28b94:	d0f30201 	.word	0xd0f30201
   28b98:	b1b59d04 	.word	0xb1b59d04
   28b9c:	46842000 	.word	0x46842000
   28ba0:	3f049f05 	.word	0x3f049f05
   28ba4:	f8572200 	.word	0xf8572200
   28ba8:	e0036f04 	.word	0xe0036f04
   28bac:	f1002a20 	.word	0xf1002a20
   28bb0:	d0710001 	.word	0xd0710001
   28bb4:	f302fa26 	.word	0xf302fa26
   28bb8:	0301f013 	.word	0x0301f013
   28bbc:	0201f102 	.word	0x0201f102
   28bc0:	4281d0f4 	.word	0x4281d0f4
   28bc4:	4601bf28 	.word	0x4601bf28
   28bc8:	4668460d 	.word	0x4668460d
   28bcc:	f7fe4629 	.word	0xf7fe4629
   28bd0:	4607fdb5 	.word	0x4607fdb5
   28bd4:	4629bb38 	.word	0x4629bb38
   28bd8:	f7fea803 	.word	0xf7fea803
   28bdc:	4607fdaf 	.word	0x4607fdaf
   28be0:	2301bb08 	.word	0x2301bb08
   28be4:	4640f06f 	.word	0x4640f06f
   28be8:	93009303 	.word	0x93009303
   28bec:	b17f9f01 	.word	0xb17f9f01
   28bf0:	19ba9802 	.word	0x19ba9802
   28bf4:	3022f850 	.word	0x3022f850
   28bf8:	0282eb00 	.word	0x0282eb00
   28bfc:	d1512b00 	.word	0xd1512b00
   28c00:	e003463b 	.word	0xe003463b
   28c04:	1d04f852 	.word	0x1d04f852
   28c08:	d14b2900 	.word	0xd14b2900
   28c0c:	d1f93b01 	.word	0xd1f93b01
   28c10:	a8034629 	.word	0xa8034629
   28c14:	fcdcf7fe 	.word	0xfcdcf7fe
   28c18:	b9204607 	.word	0xb9204607
   28c1c:	4620a903 	.word	0x4620a903
   28c20:	f9bef7fe 	.word	0xf9bef7fe
   28c24:	98024607 	.word	0x98024607
   28c28:	9a01b160 	.word	0x9a01b160
   28c2c:	b13a1e53 	.word	0xb13a1e53
   28c30:	3b012200 	.word	0x3b012200
   28c34:	60021c5c 	.word	0x60021c5c
   28c38:	0004f100 	.word	0x0004f100
   28c3c:	9802d1f9 	.word	0x9802d1f9
   28c40:	fd92f001 	.word	0xfd92f001
   28c44:	23012200 	.word	0x23012200
   28c48:	e9cd9805 	.word	0xe9cd9805
   28c4c:	92023200 	.word	0x92023200
   28c50:	9904b158 	.word	0x9904b158
   28c54:	b1311e4b 	.word	0xb1311e4b
   28c58:	1c593b01 	.word	0x1c593b01
   28c5c:	f1006002 	.word	0xf1006002
   28c60:	d1f90004 	.word	0xd1f90004
   28c64:	f0019805 	.word	0xf0019805
   28c68:	4638fd7f 	.word	0x4638fd7f
   28c6c:	e8bdb006 	.word	0xe8bdb006
   28c70:	f24281f0 	.word	0xf24281f0
   28c74:	68397310 	.word	0x68397310
   28c78:	429d1c55 	.word	0x429d1c55
   28c7c:	f2009100 	.word	0xf2009100
   28c80:	2d008083 	.word	0x2d008083
   28c84:	af41f47f 	.word	0xaf41f47f
   28c88:	e75d46a8 	.word	0xe75d46a8
   28c8c:	42be3701 	.word	0x42be3701
   28c90:	af72f47f 	.word	0xaf72f47f
   28c94:	e77f4619 	.word	0xe77f4619
   28c98:	0c01f10c 	.word	0x0c01f10c
   28c9c:	d18145ac 	.word	0xd18145ac
   28ca0:	e792461d 	.word	0xe792461d
   28ca4:	2b009b00 	.word	0x2b009b00
   28ca8:	2100d0b2 	.word	0x2100d0b2
   28cac:	f1a0468e 	.word	0xf1a0468e
   28cb0:	22000c04 	.word	0x22000c04
   28cb4:	0f04f85c 	.word	0x0f04f85c
   28cb8:	2a20e003 	.word	0x2a20e003
   28cbc:	0101f101 	.word	0x0101f101
   28cc0:	fa20d042 	.word	0xfa20d042
   28cc4:	f013f302 	.word	0xf013f302
   28cc8:	f1020301 	.word	0xf1020301
   28ccc:	d0f40201 	.word	0xd0f40201
   28cd0:	f7fe4668 	.word	0xf7fe4668
   28cd4:	4607fd33 	.word	0x4607fd33
   28cd8:	d1a42800 	.word	0xd1a42800
   28cdc:	c010f8dd 	.word	0xc010f8dd
   28ce0:	0f00f1bc 	.word	0x0f00f1bc
   28ce4:	4601d04e 	.word	0x4601d04e
   28ce8:	9f054686 	.word	0x9f054686
   28cec:	22003f04 	.word	0x22003f04
   28cf0:	0f04f857 	.word	0x0f04f857
   28cf4:	2a20e003 	.word	0x2a20e003
   28cf8:	0101f101 	.word	0x0101f101
   28cfc:	fa20d02a 	.word	0xfa20d02a
   28d00:	f013f302 	.word	0xf013f302
   28d04:	f1020301 	.word	0xf1020301
   28d08:	d0f40201 	.word	0xd0f40201
   28d0c:	f7fea803 	.word	0xf7fea803
   28d10:	4607fd15 	.word	0x4607fd15
   28d14:	d1862800 	.word	0xd1862800
   28d18:	4668a903 	.word	0x4668a903
   28d1c:	fd7ef7fe 	.word	0xfd7ef7fe
   28d20:	db1d2800 	.word	0xdb1d2800
   28d24:	4669aa03 	.word	0x4669aa03
   28d28:	f7fe4668 	.word	0xf7fe4668
   28d2c:	4607fed7 	.word	0x4607fed7
   28d30:	f47f2800 	.word	0xf47f2800
   28d34:	2101af78 	.word	0x2101af78
   28d38:	f7fe4668 	.word	0xf7fe4668
   28d3c:	4607fcff 	.word	0x4607fcff
   28d40:	f43f2800 	.word	0xf43f2800
   28d44:	e76eaf53 	.word	0xe76eaf53
   28d48:	0e01f10e 	.word	0x0e01f10e
   28d4c:	d1b045be 	.word	0xd1b045be
   28d50:	e7bd4619 	.word	0xe7bd4619
   28d54:	0e01f10e 	.word	0x0e01f10e
   28d58:	d1c845e6 	.word	0xd1c845e6
   28d5c:	e7d54619 	.word	0xe7d54619
   28d60:	466aa903 	.word	0x466aa903
   28d64:	f7fe4608 	.word	0xf7fe4608
   28d68:	4607feb9 	.word	0x4607feb9
   28d6c:	f47f2800 	.word	0xf47f2800
   28d70:	2101af5a 	.word	0x2101af5a
   28d74:	f7fea803 	.word	0xf7fea803
   28d78:	4607fce1 	.word	0x4607fce1
   28d7c:	f43f2800 	.word	0xf43f2800
   28d80:	e750af35 	.word	0xe750af35
   28d84:	e7c14661 	.word	0xe7c14661
   28d88:	070ff06f 	.word	0x070ff06f
   28d8c:	4631e75a 	.word	0x4631e75a
   28d90:	9802e702 	.word	0x9802e702
   28d94:	070ff06f 	.word	0x070ff06f
   28d98:	bf00e746 	.word	0xbf00e746

00028d9c <symbol_000644e>:
   28d9c:	43f0e92d 	.word	0x43f0e92d
   28da0:	6f80f5b1 	.word	0x6f80f5b1
   28da4:	4d04f2ad 	.word	0x4d04f2ad
   28da8:	80a5f200 	.word	0x80a5f200
   28dac:	4617460d 	.word	0x4617460d
   28db0:	46694606 	.word	0x46694606
   28db4:	462a4618 	.word	0x462a4618
   28db8:	460747b8 	.word	0x460747b8
   28dbc:	4638b120 	.word	0x4638b120
   28dc0:	4d04f20d 	.word	0x4d04f20d
   28dc4:	83f0e8bd 	.word	0x83f0e8bd
   28dc8:	f0002d00 	.word	0xf0002d00
   28dcc:	f89d808a 	.word	0xf89d808a
   28dd0:	2b003000 	.word	0x2b003000
   28dd4:	8089f040 	.word	0x8089f040
   28dd8:	4604466b 	.word	0x4604466b
   28ddc:	f813e003 	.word	0xf813e003
   28de0:	2a002f01 	.word	0x2a002f01
   28de4:	3401d14d 	.word	0x3401d14d
   28de8:	d1f842a5 	.word	0xd1f842a5
   28dec:	8004f8d6 	.word	0x8004f8d6
   28df0:	0f00f1b8 	.word	0x0f00f1b8
   28df4:	2104d170 	.word	0x2104d170
   28df8:	f0012001 	.word	0xf0012001
   28dfc:	4681fca1 	.word	0x4681fca1
   28e00:	d0752800 	.word	0xd0752800
   28e04:	b18968b1 	.word	0xb18968b1
   28e08:	00926872 	.word	0x00926872
   28e0c:	fd6bf009 	.word	0xfd6bf009
   28e10:	2001e9d6 	.word	0x2001e9d6
   28e14:	b13a1e53 	.word	0xb13a1e53
   28e18:	3b014642 	.word	0x3b014642
   28e1c:	60021c59 	.word	0x60021c59
   28e20:	0004f100 	.word	0x0004f100
   28e24:	68b0d1f9 	.word	0x68b0d1f9
   28e28:	fc9ef001 	.word	0xfc9ef001
   28e2c:	22042301 	.word	0x22042301
   28e30:	3901e9c6 	.word	0x3901e9c6
   28e34:	46482100 	.word	0x46482100
   28e38:	fd60f009 	.word	0xfd60f009
   28e3c:	22012300 	.word	0x22012300
   28e40:	42a568b1 	.word	0x42a568b1
   28e44:	6032600b 	.word	0x6032600b
   28e48:	eb0dd9b9 	.word	0xeb0dd9b9
   28e4c:	1b2c0205 	.word	0x1b2c0205
   28e50:	f02368b1 	.word	0xf02368b1
   28e54:	ea4f0803 	.word	0xea4f0803
   28e58:	f8120ec3 	.word	0xf8120ec3
   28e5c:	f851cd01 	.word	0xf851cd01
   28e60:	f00e0008 	.word	0xf00e0008
   28e64:	fa0c0e18 	.word	0xfa0c0e18
   28e68:	3301fc0e 	.word	0x3301fc0e
   28e6c:	000cea40 	.word	0x000cea40
   28e70:	f84142a3 	.word	0xf84142a3
   28e74:	d1eb0008 	.word	0xd1eb0008
   28e78:	f20d4638 	.word	0xf20d4638
   28e7c:	e8bd4d04 	.word	0xe8bd4d04
   28e80:	1b2a83f0 	.word	0x1b2a83f0
   28e84:	0803f012 	.word	0x0803f012
   28e88:	f04fbf18 	.word	0xf04fbf18
   28e8c:	f2420801 	.word	0xf2420801
   28e90:	eb087310 	.word	0xeb087310
   28e94:	45980892 	.word	0x45980892
   28e98:	6873d82a 	.word	0x6873d82a
   28e9c:	d92d4598 	.word	0xd92d4598
   28ea0:	46402104 	.word	0x46402104
   28ea4:	fc4cf001 	.word	0xfc4cf001
   28ea8:	b3084681 	.word	0xb3084681
   28eac:	b18968b1 	.word	0xb18968b1
   28eb0:	00926872 	.word	0x00926872
   28eb4:	fd17f009 	.word	0xfd17f009
   28eb8:	2001e9d6 	.word	0x2001e9d6
   28ebc:	b13a1e53 	.word	0xb13a1e53
   28ec0:	3b012200 	.word	0x3b012200
   28ec4:	60021c59 	.word	0x60021c59
   28ec8:	0004f100 	.word	0x0004f100
   28ecc:	68b0d1f9 	.word	0x68b0d1f9
   28ed0:	fc4af001 	.word	0xfc4af001
   28ed4:	8901e9c6 	.word	0x8901e9c6
   28ed8:	0288ea4f 	.word	0x0288ea4f
   28edc:	9008f8d6 	.word	0x9008f8d6
   28ee0:	f8d6e7a8 	.word	0xf8d6e7a8
   28ee4:	462c8004 	.word	0x462c8004
   28ee8:	462ae782 	.word	0x462ae782
   28eec:	e7c94604 	.word	0xe7c94604
   28ef0:	070ff06f 	.word	0x070ff06f
   28ef4:	f06fe763 	.word	0xf06fe763
   28ef8:	e7600703 	.word	0xe7600703
   28efc:	e7774698 	.word	0xe7774698

00028f00 <symbol_0004482>:
   28f00:	43f0e92d 	.word	0x43f0e92d
   28f04:	b0a16853 	.word	0xb0a16853
   28f08:	6894b17b 	.word	0x6894b17b
   28f0c:	4c80f103 	.word	0x4c80f103
   28f10:	3cfff10c 	.word	0x3cfff10c
   28f14:	502cf854 	.word	0x502cf854
   28f18:	048ceb04 	.word	0x048ceb04
   28f1c:	e00ab11d 	.word	0xe00ab11d
   28f20:	5d04f854 	.word	0x5d04f854
   28f24:	3b01b93d 	.word	0x3b01b93d
   28f28:	f06fd1fa 	.word	0xf06fd1fa
   28f2c:	46200403 	.word	0x46200403
   28f30:	e8bdb021 	.word	0xe8bdb021
   28f34:	681383f0 	.word	0x681383f0
   28f38:	ddf62b00 	.word	0xddf62b00
   28f3c:	23002401 	.word	0x23002401
   28f40:	a8024606 	.word	0xa8024606
   28f44:	94089405 	.word	0x94089405
   28f48:	940e940b 	.word	0x940e940b
   28f4c:	94119402 	.word	0x94119402
   28f50:	94179414 	.word	0x94179414
   28f54:	460f941a 	.word	0x460f941a
   28f58:	e9cd4615 	.word	0xe9cd4615
   28f5c:	e9cd3306 	.word	0xe9cd3306
   28f60:	e9cd3309 	.word	0xe9cd3309
   28f64:	e9cd330c 	.word	0xe9cd330c
   28f68:	e9cd330f 	.word	0xe9cd330f
   28f6c:	e9cd3303 	.word	0xe9cd3303
   28f70:	e9cd3312 	.word	0xe9cd3312
   28f74:	e9cd3315 	.word	0xe9cd3315
   28f78:	e9cd3318 	.word	0xe9cd3318
   28f7c:	f7ff331b 	.word	0xf7ff331b
   28f80:	4604fd9b 	.word	0x4604fd9b
   28f84:	9b03b9a0 	.word	0x9b03b9a0
   28f88:	9904b183 	.word	0x9904b183
   28f8c:	4480f103 	.word	0x4480f103
   28f90:	f8513c01 	.word	0xf8513c01
   28f94:	eb012024 	.word	0xeb012024
   28f98:	b12a0484 	.word	0xb12a0484
   28f9c:	f854e0b5 	.word	0xf854e0b5
   28fa0:	2a002d04 	.word	0x2a002d04
   28fa4:	80b1f040 	.word	0x80b1f040
   28fa8:	d1f83b01 	.word	0xd1f83b01
   28fac:	040df06f 	.word	0x040df06f
   28fb0:	b1609807 	.word	0xb1609807
   28fb4:	1e539a06 	.word	0x1e539a06
   28fb8:	2200b13a 	.word	0x2200b13a
   28fbc:	1c593b01 	.word	0x1c593b01
   28fc0:	f1006002 	.word	0xf1006002
   28fc4:	d1f90004 	.word	0xd1f90004
   28fc8:	f0019807 	.word	0xf0019807
   28fcc:	2200fbcd 	.word	0x2200fbcd
   28fd0:	980a2301 	.word	0x980a2301
   28fd4:	3205e9cd 	.word	0x3205e9cd
   28fd8:	b1589207 	.word	0xb1589207
   28fdc:	1e4b9909 	.word	0x1e4b9909
   28fe0:	3b01b131 	.word	0x3b01b131
   28fe4:	60021c5f 	.word	0x60021c5f
   28fe8:	0004f100 	.word	0x0004f100
   28fec:	980ad1f9 	.word	0x980ad1f9
   28ff0:	fbbaf001 	.word	0xfbbaf001
   28ff4:	23012200 	.word	0x23012200
   28ff8:	e9cd980d 	.word	0xe9cd980d
   28ffc:	920a3208 	.word	0x920a3208
   29000:	990cb158 	.word	0x990cb158
   29004:	b1311e4b 	.word	0xb1311e4b
   29008:	1c5e3b01 	.word	0x1c5e3b01
   2900c:	f1006002 	.word	0xf1006002
   29010:	d1f90004 	.word	0xd1f90004
   29014:	f001980d 	.word	0xf001980d
   29018:	2200fba7 	.word	0x2200fba7
   2901c:	98102301 	.word	0x98102301
   29020:	320be9cd 	.word	0x320be9cd
   29024:	b158920d 	.word	0xb158920d
   29028:	1e4b990f 	.word	0x1e4b990f
   2902c:	3b01b131 	.word	0x3b01b131
   29030:	60021c5d 	.word	0x60021c5d
   29034:	0004f100 	.word	0x0004f100
   29038:	9810d1f9 	.word	0x9810d1f9
   2903c:	fb94f001 	.word	0xfb94f001
   29040:	23012200 	.word	0x23012200
   29044:	e9cd9804 	.word	0xe9cd9804
   29048:	9210320e 	.word	0x9210320e
   2904c:	9903b158 	.word	0x9903b158
   29050:	b1311e4b 	.word	0xb1311e4b
   29054:	1c593b01 	.word	0x1c593b01
   29058:	f1006002 	.word	0xf1006002
   2905c:	d1f90004 	.word	0xd1f90004
   29060:	f0019804 	.word	0xf0019804
   29064:	2200fb81 	.word	0x2200fb81
   29068:	98132301 	.word	0x98132301
   2906c:	3202e9cd 	.word	0x3202e9cd
   29070:	b1589204 	.word	0xb1589204
   29074:	1e4b9912 	.word	0x1e4b9912
   29078:	3b01b131 	.word	0x3b01b131
   2907c:	60021c5f 	.word	0x60021c5f
   29080:	0004f100 	.word	0x0004f100
   29084:	9813d1f9 	.word	0x9813d1f9
   29088:	fb6ef001 	.word	0xfb6ef001
   2908c:	23012200 	.word	0x23012200
   29090:	e9cd9816 	.word	0xe9cd9816
   29094:	92133211 	.word	0x92133211
   29098:	9915b158 	.word	0x9915b158
   2909c:	b1311e4b 	.word	0xb1311e4b
   290a0:	1c5e3b01 	.word	0x1c5e3b01
   290a4:	f1006002 	.word	0xf1006002
   290a8:	d1f90004 	.word	0xd1f90004
   290ac:	f0019816 	.word	0xf0019816
   290b0:	2200fb5b 	.word	0x2200fb5b
   290b4:	98192301 	.word	0x98192301
   290b8:	3214e9cd 	.word	0x3214e9cd
   290bc:	b1589216 	.word	0xb1589216
   290c0:	1e4b9918 	.word	0x1e4b9918
   290c4:	3b01b131 	.word	0x3b01b131
   290c8:	60021c5d 	.word	0x60021c5d
   290cc:	0004f100 	.word	0x0004f100
   290d0:	9819d1f9 	.word	0x9819d1f9
   290d4:	fb48f001 	.word	0xfb48f001
   290d8:	23012200 	.word	0x23012200
   290dc:	e9cd981c 	.word	0xe9cd981c
   290e0:	92193217 	.word	0x92193217
   290e4:	f43f2800 	.word	0xf43f2800
   290e8:	991baf22 	.word	0x991baf22
   290ec:	b1311e4b 	.word	0xb1311e4b
   290f0:	1c593b01 	.word	0x1c593b01
   290f4:	f1006002 	.word	0xf1006002
   290f8:	d1f90004 	.word	0xd1f90004
   290fc:	f001981c 	.word	0xf001981c
   29100:	4620fb33 	.word	0x4620fb33
   29104:	e8bdb021 	.word	0xe8bdb021
   29108:	2b0183f0 	.word	0x2b0183f0
   2910c:	d96b9a02 	.word	0xd96b9a02
   29110:	f47f2a00 	.word	0xf47f2a00
   29114:	4639af4b 	.word	0x4639af4b
   29118:	462aa805 	.word	0x462aa805
   2911c:	fb9af7ff 	.word	0xfb9af7ff
   29120:	28004604 	.word	0x28004604
   29124:	af44f47f 	.word	0xaf44f47f
   29128:	a905a808 	.word	0xa905a808
   2912c:	ff38f7fd 	.word	0xff38f7fd
   29130:	28004604 	.word	0x28004604
   29134:	af3cf47f 	.word	0xaf3cf47f
   29138:	4629a811 	.word	0x4629a811
   2913c:	ff30f7fd 	.word	0xff30f7fd
   29140:	28004604 	.word	0x28004604
   29144:	af34f47f 	.word	0xaf34f47f
   29148:	4629a814 	.word	0x4629a814
   2914c:	ff28f7fd 	.word	0xff28f7fd
   29150:	28004604 	.word	0x28004604
   29154:	af2cf47f 	.word	0xaf2cf47f
   29158:	2101a80b 	.word	0x2101a80b
   2915c:	f8acf7fe 	.word	0xf8acf7fe
   29160:	28004604 	.word	0x28004604
   29164:	af24f47f 	.word	0xaf24f47f
   29168:	a80e4601 	.word	0xa80e4601
   2916c:	f8a4f7fe 	.word	0xf8a4f7fe
   29170:	28004604 	.word	0x28004604
   29174:	af1cf47f 	.word	0xaf1cf47f
   29178:	a8174601 	.word	0xa8174601
   2917c:	f89cf7fe 	.word	0xf89cf7fe
   29180:	28004604 	.word	0x28004604
   29184:	af14f47f 	.word	0xaf14f47f
   29188:	2101a81a 	.word	0x2101a81a
   2918c:	f894f7fe 	.word	0xf894f7fe
   29190:	28004604 	.word	0x28004604
   29194:	af0cf47f 	.word	0xaf0cf47f
   29198:	f04f4681 	.word	0xf04f4681
   2919c:	af010801 	.word	0xaf010801
   291a0:	681b9b0a 	.word	0x681b9b0a
   291a4:	d42c07da 	.word	0xd42c07da
   291a8:	a8082101 	.word	0xa8082101
   291ac:	fac6f7fe 	.word	0xfac6f7fe
   291b0:	28004604 	.word	0x28004604
   291b4:	aefcf47f 	.word	0xaefcf47f
   291b8:	681b9b0d 	.word	0x681b9b0d
   291bc:	d44407d8 	.word	0xd44407d8
   291c0:	681b9b10 	.word	0x681b9b10
   291c4:	d44007d9 	.word	0xd44007d9
   291c8:	a80b2101 	.word	0xa80b2101
   291cc:	fab6f7fe 	.word	0xfab6f7fe
   291d0:	28004604 	.word	0x28004604
   291d4:	aeecf47f 	.word	0xaeecf47f
   291d8:	a80e2101 	.word	0xa80e2101
   291dc:	faaef7fe 	.word	0xfaaef7fe
   291e0:	28004604 	.word	0x28004604
   291e4:	e6e3d0dc 	.word	0xe6e3d0dc
   291e8:	f6ff2a00 	.word	0xf6ff2a00
   291ec:	680baedf 	.word	0x680baedf
   291f0:	d88d2b01 	.word	0xd88d2b01
   291f4:	d18e2b00 	.word	0xd18e2b00
   291f8:	2a004252 	.word	0x2a004252
   291fc:	aed6f47f 	.word	0xaed6f47f
   29200:	9b16e789 	.word	0x9b16e789
   29204:	07d8681b 	.word	0x07d8681b
   29208:	2101d443 	.word	0x2101d443
   2920c:	f7fea814 	.word	0xf7fea814
   29210:	4604fa95 	.word	0x4604fa95
   29214:	f47f2800 	.word	0xf47f2800
   29218:	9b19aecb 	.word	0x9b19aecb
   2921c:	07db681b 	.word	0x07db681b
   29220:	9b1cd425 	.word	0x9b1cd425
   29224:	07dc681b 	.word	0x07dc681b
   29228:	2101d421 	.word	0x2101d421
   2922c:	f7fea817 	.word	0xf7fea817
   29230:	4604fa85 	.word	0x4604fa85
   29234:	f47f2800 	.word	0xf47f2800
   29238:	2101aebb 	.word	0x2101aebb
   2923c:	f7fea81a 	.word	0xf7fea81a
   29240:	4604fa7d 	.word	0x4604fa7d
   29244:	d0dc2800 	.word	0xd0dc2800
   29248:	a90be6b2 	.word	0xa90be6b2
   2924c:	4608aa11 	.word	0x4608aa11
   29250:	fd04f7fe 	.word	0xfd04f7fe
   29254:	28004604 	.word	0x28004604
   29258:	aeaaf47f 	.word	0xaeaaf47f
   2925c:	aa05a90e 	.word	0xaa05a90e
   29260:	f7fe4608 	.word	0xf7fe4608
   29264:	4604fd6f 	.word	0x4604fd6f
   29268:	d0ad2800 	.word	0xd0ad2800
   2926c:	a917e6a0 	.word	0xa917e6a0
   29270:	4608aa11 	.word	0x4608aa11
   29274:	fcf2f7fe 	.word	0xfcf2f7fe
   29278:	28004604 	.word	0x28004604
   2927c:	ae98f47f 	.word	0xae98f47f
   29280:	aa05a91a 	.word	0xaa05a91a
   29284:	f7fe4608 	.word	0xf7fe4608
   29288:	4604fd5d 	.word	0x4604fd5d
   2928c:	d0cc2800 	.word	0xd0cc2800
   29290:	a914e68e 	.word	0xa914e68e
   29294:	f7fea808 	.word	0xf7fea808
   29298:	2800fac1 	.word	0x2800fac1
   2929c:	a908db3d 	.word	0xa908db3d
   292a0:	4608aa14 	.word	0x4608aa14
   292a4:	fd4ef7fe 	.word	0xfd4ef7fe
   292a8:	28004604 	.word	0x28004604
   292ac:	ae80f47f 	.word	0xae80f47f
   292b0:	aa17a90b 	.word	0xaa17a90b
   292b4:	f7fe4608 	.word	0xf7fe4608
   292b8:	4604fd45 	.word	0x4604fd45
   292bc:	f47f2800 	.word	0xf47f2800
   292c0:	a90eae77 	.word	0xa90eae77
   292c4:	4608aa1a 	.word	0x4608aa1a
   292c8:	fd3cf7fe 	.word	0xfd3cf7fe
   292cc:	28004604 	.word	0x28004604
   292d0:	ae6ef47f 	.word	0xae6ef47f
   292d4:	a808a91d 	.word	0xa808a91d
   292d8:	9004f8cd 	.word	0x9004f8cd
   292dc:	881de9cd 	.word	0x881de9cd
   292e0:	f7fd971f 	.word	0xf7fd971f
   292e4:	2800fd97 	.word	0x2800fd97
   292e8:	af5af47f 	.word	0xaf5af47f
   292ec:	f04f4680 	.word	0xf04f4680
   292f0:	a91d0901 	.word	0xa91d0901
   292f4:	f8cda817 	.word	0xf8cda817
   292f8:	e9cd8004 	.word	0xe9cd8004
   292fc:	971f991d 	.word	0x971f991d
   29300:	fd88f7fd 	.word	0xfd88f7fd
   29304:	da232800 	.word	0xda232800
   29308:	462aa917 	.word	0x462aa917
   2930c:	f7fe4608 	.word	0xf7fe4608
   29310:	4604fca5 	.word	0x4604fca5
   29314:	d0ec2800 	.word	0xd0ec2800
   29318:	a914e64a 	.word	0xa914e64a
   2931c:	4608aa08 	.word	0x4608aa08
   29320:	fd10f7fe 	.word	0xfd10f7fe
   29324:	28004604 	.word	0x28004604
   29328:	ae42f47f 	.word	0xae42f47f
   2932c:	aa0ba917 	.word	0xaa0ba917
   29330:	f7fe4608 	.word	0xf7fe4608
   29334:	4604fd07 	.word	0x4604fd07
   29338:	f47f2800 	.word	0xf47f2800
   2933c:	a91aae39 	.word	0xa91aae39
   29340:	4608aa0e 	.word	0x4608aa0e
   29344:	fcfef7fe 	.word	0xfcfef7fe
   29348:	28004604 	.word	0x28004604
   2934c:	e62fd0c2 	.word	0xe62fd0c2
   29350:	a8174629 	.word	0xa8174629
   29354:	fa62f7fe 	.word	0xfa62f7fe
   29358:	db082800 	.word	0xdb082800
   2935c:	462aa917 	.word	0x462aa917
   29360:	f7fe4608 	.word	0xf7fe4608
   29364:	4604fcef 	.word	0x4604fcef
   29368:	d0f12800 	.word	0xd0f12800
   2936c:	a917e620 	.word	0xa917e620
   29370:	f7fd4630 	.word	0xf7fd4630
   29374:	4604fe15 	.word	0x4604fe15
   29378:	bf00e61a 	.word	0xbf00e61a

0002937c <entropy_callback>:
   2937c:	4c0ab538 	.word	0x4c0ab538
   29380:	78254b0a 	.word	0x78254b0a
   29384:	bf282a07 	.word	0xbf282a07
   29388:	46082207 	.word	0x46082207
   2938c:	1145eb03 	.word	0x1145eb03
   29390:	faa9f009 	.word	0xfaa9f009
   29394:	20007823 	.word	0x20007823
   29398:	b2db3301 	.word	0xb2db3301
   2939c:	bf082b07 	.word	0xbf082b07
   293a0:	70232300 	.word	0x70232300
   293a4:	bf00bd38 	.word	0xbf00bd38
   293a8:	20025b3e 	.word	0x20025b3e
   293ac:	00034128 	.word	0x00034128

000293b0 <es256_key_generate>:
   293b0:	b0e5b5f0 	.word	0xb0e5b5f0
   293b4:	71a8f89d 	.word	0x71a8f89d
   293b8:	b152b158 	.word	0xb152b158
   293bc:	291fb14b 	.word	0x291fb14b
   293c0:	6819d907 	.word	0x6819d907
   293c4:	d904293f 	.word	0xd904293f
   293c8:	2955b13f 	.word	0x2955b13f
   293cc:	240cd805 	.word	0x240cd805
   293d0:	2416e000 	.word	0x2416e000
   293d4:	b0654620 	.word	0xb0654620
   293d8:	461dbdf0 	.word	0x461dbdf0
   293dc:	21002304 	.word	0x21002304
   293e0:	46164604 	.word	0x46164604
   293e4:	f44fa814 	.word	0xf44fa814
   293e8:	f88d72a0 	.word	0xf88d72a0
   293ec:	f009300c 	.word	0xf009300c
   293f0:	a814fa85 	.word	0xa814fa85
   293f4:	fe12f7f6 	.word	0xfe12f7f6
   293f8:	49292300 	.word	0x49292300
   293fc:	a814461a 	.word	0xa814461a
   29400:	f7f69300 	.word	0xf7f69300
   29404:	a814ff0d 	.word	0xa814ff0d
   29408:	46212220 	.word	0x46212220
   2940c:	ff30f7f6 	.word	0xff30f7f6
   29410:	a814b9b8 	.word	0xa814b9b8
   29414:	fe08f7f6 	.word	0xfe08f7f6
   29418:	f10d4621 	.word	0xf10d4621
   2941c:	f006000d 	.word	0xf006000d
   29420:	4604fa79 	.word	0x4604fa79
   29424:	b1c7b9b8 	.word	0xb1c7b9b8
   29428:	f7f6a814 	.word	0xf7f6a814
   2942c:	2002f95d 	.word	0x2002f95d
   29430:	f960f7f6 	.word	0xf960f7f6
   29434:	a8144601 	.word	0xa8144601
   29438:	f96af7f6 	.word	0xf96af7f6
   2943c:	240eb1a8 	.word	0x240eb1a8
   29440:	4a18e7c8 	.word	0x4a18e7c8
   29444:	78114b18 	.word	0x78114b18
   29448:	22074620 	.word	0x22074620
   2944c:	1141eb03 	.word	0x1141eb03
   29450:	fa49f009 	.word	0xfa49f009
   29454:	2423e7dd 	.word	0x2423e7dd
   29458:	a903e7bc 	.word	0xa903e7bc
   2945c:	22401c70 	.word	0x22401c70
   29460:	fa41f009 	.word	0xfa41f009
   29464:	602b2341 	.word	0x602b2341
   29468:	2103e7b4 	.word	0x2103e7b4
   2946c:	f7f79815 	.word	0xf7f79815
   29470:	2800f961 	.word	0x2800f961
   29474:	9815d1e3 	.word	0x9815d1e3
   29478:	f100aa03 	.word	0xf100aa03
   2947c:	23410188 	.word	0x23410188
   29480:	fc26f7f9 	.word	0xfc26f7f9
   29484:	d1da2800 	.word	0xd1da2800
   29488:	a8144631 	.word	0xa8144631
   2948c:	f7f4682a 	.word	0xf7f4682a
   29490:	23b2ffeb 	.word	0x23b2ffeb
   29494:	602b4604 	.word	0x602b4604
   29498:	d09b2800 	.word	0xd09b2800
   2949c:	bf00e7cf 	.word	0xbf00e7cf
   294a0:	0002937d 	.word	0x0002937d
   294a4:	20025b3e 	.word	0x20025b3e
   294a8:	00034128 	.word	0x00034128

000294ac <bsd_os_application_irq_handler>:
   294ac:	41f0e92d 	.word	0x41f0e92d
   294b0:	f7f44c33 	.word	0xf7f44c33
   294b4:	f04ff9e5 	.word	0xf04ff9e5
   294b8:	4d320803 	.word	0x4d320803
   294bc:	f1044f32 	.word	0xf1044f32
   294c0:	e0040680 	.word	0xe0040680
   294c4:	d0062b04 	.word	0xd0062b04
   294c8:	42b43408 	.word	0x42b43408
   294cc:	f814d03b 	.word	0xf814d03b
   294d0:	2b023c04 	.word	0x2b023c04
   294d4:	6820d1f6 	.word	0x6820d1f6
   294d8:	6803882a 	.word	0x6803882a
   294dc:	429ab29b 	.word	0x429ab29b
   294e0:	8a2ad033 	.word	0x8a2ad033
   294e4:	d032429a 	.word	0xd032429a
   294e8:	429a8c2a 	.word	0x429a8c2a
   294ec:	8e2ad031 	.word	0x8e2ad031
   294f0:	d030429a 	.word	0xd030429a
   294f4:	2040f8b5 	.word	0x2040f8b5
   294f8:	d036429a 	.word	0xd036429a
   294fc:	2050f8b5 	.word	0x2050f8b5
   29500:	d034429a 	.word	0xd034429a
   29504:	2060f8b5 	.word	0x2060f8b5
   29508:	d032429a 	.word	0xd032429a
   2950c:	2070f8b5 	.word	0x2070f8b5
   29510:	d030429a 	.word	0xd030429a
   29514:	2080f8b5 	.word	0x2080f8b5
   29518:	d02e429a 	.word	0xd02e429a
   2951c:	2090f8b5 	.word	0x2090f8b5
   29520:	bf08429a 	.word	0xbf08429a
   29524:	d1cf2309 	.word	0xd1cf2309
   29528:	1303eb05 	.word	0x1303eb05
   2952c:	68d9685a 	.word	0x68d9685a
   29530:	b9904790 	.word	0xb9904790
   29534:	68202201 	.word	0x68202201
   29538:	2c04f804 	.word	0x2c04f804
   2953c:	340868fb 	.word	0x340868fb
   29540:	42b44798 	.word	0x42b44798
   29544:	e8bdd1c3 	.word	0xe8bdd1c3
   29548:	230081f0 	.word	0x230081f0
   2954c:	2301e7ec 	.word	0x2301e7ec
   29550:	2302e7ea 	.word	0x2302e7ea
   29554:	2303e7e8 	.word	0x2303e7e8
   29558:	2802e7e6 	.word	0x2802e7e6
   2955c:	2304bf0a 	.word	0x2304bf0a
   29560:	8c04f804 	.word	0x8c04f804
   29564:	3c04f804 	.word	0x3c04f804
   29568:	2304e7ae 	.word	0x2304e7ae
   2956c:	2305e7dc 	.word	0x2305e7dc
   29570:	2306e7da 	.word	0x2306e7da
   29574:	2307e7d8 	.word	0x2307e7d8
   29578:	2308e7d6 	.word	0x2308e7d6
   2957c:	bf00e7d4 	.word	0xbf00e7d4
   29580:	200214e0 	.word	0x200214e0
   29584:	200213a4 	.word	0x200213a4
   29588:	20021444 	.word	0x20021444

0002958c <rpc_framework_init>:
   2958c:	22a0b508 	.word	0x22a0b508
   29590:	48022100 	.word	0x48022100
   29594:	f9b2f009 	.word	0xf9b2f009
   29598:	bd082000 	.word	0xbd082000
   2959c:	200213a4 	.word	0x200213a4

000295a0 <rpc_client_register>:
   295a0:	2b008803 	.word	0x2b008803
   295a4:	6842d045 	.word	0x6842d045
   295a8:	2a004601 	.word	0x2a004601
   295ac:	4a30d050 	.word	0x4a30d050
   295b0:	42838810 	.word	0x42838810
   295b4:	e92dd03d 	.word	0xe92dd03d
   295b8:	8a1447f0 	.word	0x8a1447f0
   295bc:	d03542a3 	.word	0xd03542a3
   295c0:	42ab8c15 	.word	0x42ab8c15
   295c4:	8e16d032 	.word	0x8e16d032
   295c8:	d02f42b3 	.word	0xd02f42b3
   295cc:	7040f8b2 	.word	0x7040f8b2
   295d0:	d02b42bb 	.word	0xd02b42bb
   295d4:	c050f8b2 	.word	0xc050f8b2
   295d8:	d0274563 	.word	0xd0274563
   295dc:	e060f8b2 	.word	0xe060f8b2
   295e0:	d0234573 	.word	0xd0234573
   295e4:	8070f8b2 	.word	0x8070f8b2
   295e8:	d01f4543 	.word	0xd01f4543
   295ec:	9080f8b2 	.word	0x9080f8b2
   295f0:	d01b454b 	.word	0xd01b454b
   295f4:	a090f8b2 	.word	0xa090f8b2
   295f8:	d0174553 	.word	0xd0174553
   295fc:	b35cb1e0 	.word	0xb35cb1e0
   29600:	b36eb365 	.word	0xb36eb365
   29604:	f1bcb377 	.word	0xf1bcb377
   29608:	d02d0f00 	.word	0xd02d0f00
   2960c:	0f00f1be 	.word	0x0f00f1be
   29610:	f1b8d020 	.word	0xf1b8d020
   29614:	d0290f00 	.word	0xd0290f00
   29618:	0f00f1b9 	.word	0x0f00f1b9
   2961c:	2009d00b 	.word	0x2009d00b
   29620:	0f00f1ba 	.word	0x0f00f1ba
   29624:	2004d008 	.word	0x2004d008
   29628:	87f0e8bd 	.word	0x87f0e8bd
   2962c:	e8bd2007 	.word	0xe8bd2007
   29630:	200787f0 	.word	0x200787f0
   29634:	20084770 	.word	0x20084770
   29638:	52130100 	.word	0x52130100
   2963c:	4402684b 	.word	0x4402684b
   29640:	688b6053 	.word	0x688b6053
   29644:	60932000 	.word	0x60932000
   29648:	60d368cb 	.word	0x60d368cb
   2964c:	87f0e8bd 	.word	0x87f0e8bd
   29650:	4770200e 	.word	0x4770200e
   29654:	e7ef2006 	.word	0xe7ef2006
   29658:	e7ed2001 	.word	0xe7ed2001
   2965c:	e7eb2002 	.word	0xe7eb2002
   29660:	e7e92003 	.word	0xe7e92003
   29664:	e7e72004 	.word	0xe7e72004
   29668:	e7e52005 	.word	0xe7e52005
   2966c:	e7e32007 	.word	0xe7e32007
   29670:	200213a4 	.word	0x200213a4

00029674 <rpc_transport_input>:
   29674:	4a82b538 	.word	0x4a82b538
   29678:	8810680b 	.word	0x8810680b
   2967c:	4298b29b 	.word	0x4298b29b
   29680:	8a10d027 	.word	0x8a10d027
   29684:	d0244298 	.word	0xd0244298
   29688:	42988c10 	.word	0x42988c10
   2968c:	8e10d021 	.word	0x8e10d021
   29690:	d01e4298 	.word	0xd01e4298
   29694:	0040f8b2 	.word	0x0040f8b2
   29698:	d01a4298 	.word	0xd01a4298
   2969c:	0050f8b2 	.word	0x0050f8b2
   296a0:	d0164298 	.word	0xd0164298
   296a4:	0060f8b2 	.word	0x0060f8b2
   296a8:	d0124298 	.word	0xd0124298
   296ac:	0070f8b2 	.word	0x0070f8b2
   296b0:	d00e4298 	.word	0xd00e4298
   296b4:	0080f8b2 	.word	0x0080f8b2
   296b8:	d00a4298 	.word	0xd00a4298
   296bc:	2090f8b2 	.word	0x2090f8b2
   296c0:	d006429a 	.word	0xd006429a
   296c4:	b1186888 	.word	0xb1186888
   296c8:	691b4b6e 	.word	0x691b4b6e
   296cc:	20004798 	.word	0x20004798
   296d0:	6888bd38 	.word	0x6888bd38
   296d4:	f0002800 	.word	0xf0002800
   296d8:	4a6b8098 	.word	0x4a6b8098
   296dc:	2c006814 	.word	0x2c006814
   296e0:	6894d03c 	.word	0x6894d03c
   296e4:	f0002c00 	.word	0xf0002c00
   296e8:	6914809a 	.word	0x6914809a
   296ec:	f0002c00 	.word	0xf0002c00
   296f0:	6994809a 	.word	0x6994809a
   296f4:	f0002c00 	.word	0xf0002c00
   296f8:	6a14809a 	.word	0x6a14809a
   296fc:	f0002c00 	.word	0xf0002c00
   29700:	6a94809a 	.word	0x6a94809a
   29704:	f0002c00 	.word	0xf0002c00
   29708:	6b148084 	.word	0x6b148084
   2970c:	f0002c00 	.word	0xf0002c00
   29710:	6b948098 	.word	0x6b948098
   29714:	f0002c00 	.word	0xf0002c00
   29718:	6c148096 	.word	0x6c148096
   2971c:	f0002c00 	.word	0xf0002c00
   29720:	6c948096 	.word	0x6c948096
   29724:	f0002c00 	.word	0xf0002c00
   29728:	6d148096 	.word	0x6d148096
   2972c:	f0002c00 	.word	0xf0002c00
   29730:	6d948096 	.word	0x6d948096
   29734:	f0002c00 	.word	0xf0002c00
   29738:	6e148098 	.word	0x6e148098
   2973c:	f0002c00 	.word	0xf0002c00
   29740:	6e948098 	.word	0x6e948098
   29744:	f0002c00 	.word	0xf0002c00
   29748:	6f148096 	.word	0x6f148096
   2974c:	f0002c00 	.word	0xf0002c00
   29750:	6f948094 	.word	0x6f948094
   29754:	2001b10c 	.word	0x2001b10c
   29758:	240fbd38 	.word	0x240fbd38
   2975c:	05c4eb02 	.word	0x05c4eb02
   29760:	0034f842 	.word	0x0034f842
   29764:	4b4980ab 	.word	0x4b4980ab
   29768:	2a01781a 	.word	0x2a01781a
   2976c:	7a1ad053 	.word	0x7a1ad053
   29770:	d0412a01 	.word	0xd0412a01
   29774:	2a017c1a 	.word	0x2a017c1a
   29778:	7e1ad04f 	.word	0x7e1ad04f
   2977c:	d0502a01 	.word	0xd0502a01
   29780:	2020f893 	.word	0x2020f893
   29784:	d0502a01 	.word	0xd0502a01
   29788:	2028f893 	.word	0x2028f893
   2978c:	d0502a01 	.word	0xd0502a01
   29790:	2030f893 	.word	0x2030f893
   29794:	d03a2a01 	.word	0xd03a2a01
   29798:	2038f893 	.word	0x2038f893
   2979c:	d04c2a01 	.word	0xd04c2a01
   297a0:	2040f893 	.word	0x2040f893
   297a4:	d04a2a01 	.word	0xd04a2a01
   297a8:	2048f893 	.word	0x2048f893
   297ac:	d04c2a01 	.word	0xd04c2a01
   297b0:	2050f893 	.word	0x2050f893
   297b4:	d04c2a01 	.word	0xd04c2a01
   297b8:	2058f893 	.word	0x2058f893
   297bc:	d04c2a01 	.word	0xd04c2a01
   297c0:	2060f893 	.word	0x2060f893
   297c4:	d04c2a01 	.word	0xd04c2a01
   297c8:	2068f893 	.word	0x2068f893
   297cc:	d04a2a01 	.word	0xd04a2a01
   297d0:	2070f893 	.word	0x2070f893
   297d4:	d04a2a01 	.word	0xd04a2a01
   297d8:	2078f893 	.word	0x2078f893
   297dc:	d00a2a01 	.word	0xd00a2a01
   297e0:	d0b82c10 	.word	0xd0b82c10
   297e4:	4b282200 	.word	0x4b282200
   297e8:	eb032001 	.word	0xeb032001
   297ec:	808a01c4 	.word	0x808a01c4
   297f0:	2034f843 	.word	0x2034f843
   297f4:	220fbd38 	.word	0x220fbd38
   297f8:	eb032402 	.word	0xeb032402
   297fc:	f80300c2 	.word	0xf80300c2
   29800:	60414032 	.word	0x60414032
   29804:	f834f7f4 	.word	0xf834f7f4
   29808:	2410e7a5 	.word	0x2410e7a5
   2980c:	2206e7ab 	.word	0x2206e7ab
   29810:	2405e7f2 	.word	0x2405e7f2
   29814:	2200e7a2 	.word	0x2200e7a2
   29818:	2202e7ee 	.word	0x2202e7ee
   2981c:	2401e7ec 	.word	0x2401e7ec
   29820:	2203e79c 	.word	0x2203e79c
   29824:	2402e7e8 	.word	0x2402e7e8
   29828:	2204e798 	.word	0x2204e798
   2982c:	2403e7e4 	.word	0x2403e7e4
   29830:	2205e794 	.word	0x2205e794
   29834:	2404e7e0 	.word	0x2404e7e0
   29838:	2207e790 	.word	0x2207e790
   2983c:	2208e7dc 	.word	0x2208e7dc
   29840:	2406e7da 	.word	0x2406e7da
   29844:	2407e78a 	.word	0x2407e78a
   29848:	2209e788 	.word	0x2209e788
   2984c:	2408e7d4 	.word	0x2408e7d4
   29850:	220ae784 	.word	0x220ae784
   29854:	2409e7d0 	.word	0x2409e7d0
   29858:	220be780 	.word	0x220be780
   2985c:	240ae7cc 	.word	0x240ae7cc
   29860:	220ce77c 	.word	0x220ce77c
   29864:	220de7c8 	.word	0x220de7c8
   29868:	240be7c6 	.word	0x240be7c6
   2986c:	220ee776 	.word	0x220ee776
   29870:	240ce7c2 	.word	0x240ce7c2
   29874:	240de772 	.word	0x240de772
   29878:	240ee770 	.word	0x240ee770
   2987c:	bf00e76e 	.word	0xbf00e76e
   29880:	200213a4 	.word	0x200213a4
   29884:	20021444 	.word	0x20021444
   29888:	2002145c 	.word	0x2002145c
   2988c:	200214dc 	.word	0x200214dc

00029890 <rpc_transport_register>:
   29890:	2900b4f0 	.word	0x2900b4f0
   29894:	2800d052 	.word	0x2800d052
   29898:	6883d050 	.word	0x6883d050
   2989c:	d04d2b00 	.word	0xd04d2b00
   298a0:	2b006903 	.word	0x2b006903
   298a4:	6843d04a 	.word	0x6843d04a
   298a8:	d0472b00 	.word	0xd0472b00
   298ac:	2b0068c3 	.word	0x2b0068c3
   298b0:	6803d044 	.word	0x6803d044
   298b4:	d0412b00 	.word	0xd0412b00
   298b8:	2b006943 	.word	0x2b006943
   298bc:	2601d03e 	.word	0x2601d03e
   298c0:	46042500 	.word	0x46042500
   298c4:	4a1f460f 	.word	0x4a1f460f
   298c8:	f8df4b1f 	.word	0xf8df4b1f
   298cc:	7416c080 	.word	0x7416c080
   298d0:	f8827616 	.word	0xf8827616
   298d4:	f8826020 	.word	0xf8826020
   298d8:	f8826028 	.word	0xf8826028
   298dc:	f8826030 	.word	0xf8826030
   298e0:	f8826038 	.word	0xf8826038
   298e4:	f8826040 	.word	0xf8826040
   298e8:	f8826048 	.word	0xf8826048
   298ec:	f8826050 	.word	0xf8826050
   298f0:	f8826058 	.word	0xf8826058
   298f4:	f8826060 	.word	0xf8826060
   298f8:	f8826068 	.word	0xf8826068
   298fc:	f8826070 	.word	0xf8826070
   29900:	611d6078 	.word	0x611d6078
   29904:	621d619d 	.word	0x621d619d
   29908:	631d629d 	.word	0x631d629d
   2990c:	641d639d 	.word	0x641d639d
   29910:	651d649d 	.word	0x651d649d
   29914:	661d659d 	.word	0x661d659d
   29918:	671d669d 	.word	0x671d669d
   2991c:	7016679d 	.word	0x7016679d
   29920:	601d7216 	.word	0x601d7216
   29924:	cc0f609d 	.word	0xcc0f609d
   29928:	000fe8ac 	.word	0x000fe8ac
   2992c:	0003e894 	.word	0x0003e894
   29930:	0003e88c 	.word	0x0003e88c
   29934:	4628603e 	.word	0x4628603e
   29938:	4770bcf0 	.word	0x4770bcf0
   2993c:	4628250e 	.word	0x4628250e
   29940:	4770bcf0 	.word	0x4770bcf0
   29944:	200214dc 	.word	0x200214dc
   29948:	2002145c 	.word	0x2002145c
   2994c:	20021444 	.word	0x20021444

00029950 <rpc_transport_unregister>:
   29950:	d03a2800 	.word	0xd03a2800
   29954:	47f0e92d 	.word	0x47f0e92d
   29958:	4c1d4680 	.word	0x4c1d4680
   2995c:	05a0f104 	.word	0x05a0f104
   29960:	341068a3 	.word	0x341068a3
   29964:	4798b103 	.word	0x4798b103
   29968:	d1f942ac 	.word	0xd1f942ac
   2996c:	0901f04f 	.word	0x0901f04f
   29970:	4c182600 	.word	0x4c182600
   29974:	f8df4d18 	.word	0xf8df4d18
   29978:	f104a064 	.word	0xf104a064
   2997c:	f8140780 	.word	0xf8140780
   29980:	2b013c04 	.word	0x2b013c04
   29984:	f8dad005 	.word	0xf8dad005
   29988:	6820300c 	.word	0x6820300c
   2998c:	f8044798 	.word	0xf8044798
   29990:	f8559c04 	.word	0xf8559c04
   29994:	34080c04 	.word	0x34080c04
   29998:	f8dab128 	.word	0xf8dab128
   2999c:	47983010 	.word	0x47983010
   299a0:	f845802e 	.word	0xf845802e
   299a4:	42bc6c04 	.word	0x42bc6c04
   299a8:	0508f105 	.word	0x0508f105
   299ac:	f8d8d1e7 	.word	0xf8d8d1e7
   299b0:	22180000 	.word	0x22180000
   299b4:	eb003801 	.word	0xeb003801
   299b8:	eb0a0040 	.word	0xeb0a0040
   299bc:	210000c0 	.word	0x210000c0
   299c0:	ff9cf008 	.word	0xff9cf008
   299c4:	e8bd2000 	.word	0xe8bd2000
   299c8:	200e87f0 	.word	0x200e87f0
   299cc:	bf004770 	.word	0xbf004770
   299d0:	200213a4 	.word	0x200213a4
   299d4:	200214e0 	.word	0x200214e0
   299d8:	20021460 	.word	0x20021460
   299dc:	20021444 	.word	0x20021444

000299e0 <rpc_message_send>:
   299e0:	b171b168 	.word	0xb171b168
   299e4:	68534a09 	.word	0x68534a09
   299e8:	684bb16b 	.word	0x684bb16b
   299ec:	f0238008 	.word	0xf0238008
   299f0:	f04303ff 	.word	0xf04303ff
   299f4:	68120302 	.word	0x68120302
   299f8:	4608604b 	.word	0x4608604b
   299fc:	20074710 	.word	0x20074710
   29a00:	200e4770 	.word	0x200e4770
   29a04:	20084770 	.word	0x20084770
   29a08:	bf004770 	.word	0xbf004770
   29a0c:	20021444 	.word	0x20021444

00029a10 <rpc_message_alloc>:
   29a10:	b330b35a 	.word	0xb330b35a
   29a14:	e92d2300 	.word	0xe92d2300
   29a18:	4f1541f0 	.word	0x4f1541f0
   29a1c:	687b6013 	.word	0x687b6013
   29a20:	4615b30b 	.word	0x4615b30b
   29a24:	4606460c 	.word	0x4606460c
   29a28:	4798b959 	.word	0x4798b959
   29a2c:	b1a84603 	.word	0xb1a84603
   29a30:	60dc46a0 	.word	0x60dc46a0
   29a34:	8008f8c3 	.word	0x8008f8c3
   29a38:	602b801e 	.word	0x602b801e
   29a3c:	e8bd2000 	.word	0xe8bd2000
   29a40:	68bb81f0 	.word	0x68bb81f0
   29a44:	47984608 	.word	0x47984608
   29a48:	b1384680 	.word	0xb1384680
   29a4c:	4798687b 	.word	0x4798687b
   29a50:	28004603 	.word	0x28004603
   29a54:	693bd1ed 	.word	0x693bd1ed
   29a58:	47984640 	.word	0x47984640
   29a5c:	e8bd2004 	.word	0xe8bd2004
   29a60:	200781f0 	.word	0x200781f0
   29a64:	20084770 	.word	0x20084770
   29a68:	200ee7f9 	.word	0x200ee7f9
   29a6c:	bf004770 	.word	0xbf004770
   29a70:	20021444 	.word	0x20021444

00029a74 <rpc_message_free>:
   29a74:	f0002800 	.word	0xf0002800
   29a78:	2900808c 	.word	0x2900808c
   29a7c:	80e9f000 	.word	0x80e9f000
   29a80:	4a83b538 	.word	0x4a83b538
   29a84:	2b006853 	.word	0x2b006853
   29a88:	8085f000 	.word	0x8085f000
   29a8c:	46084c81 	.word	0x46084c81
   29a90:	42996863 	.word	0x42996863
   29a94:	8085f000 	.word	0x8085f000
   29a98:	429868e3 	.word	0x429868e3
   29a9c:	808ef000 	.word	0x808ef000
   29aa0:	42986963 	.word	0x42986963
   29aa4:	8090f000 	.word	0x8090f000
   29aa8:	429869e3 	.word	0x429869e3
   29aac:	8092f000 	.word	0x8092f000
   29ab0:	42986a63 	.word	0x42986a63
   29ab4:	8095f000 	.word	0x8095f000
   29ab8:	42986ae3 	.word	0x42986ae3
   29abc:	8098f000 	.word	0x8098f000
   29ac0:	42986b63 	.word	0x42986b63
   29ac4:	809bf000 	.word	0x809bf000
   29ac8:	42986be3 	.word	0x42986be3
   29acc:	809ef000 	.word	0x809ef000
   29ad0:	42986c63 	.word	0x42986c63
   29ad4:	80a1f000 	.word	0x80a1f000
   29ad8:	42986ce3 	.word	0x42986ce3
   29adc:	80a4f000 	.word	0x80a4f000
   29ae0:	42986d63 	.word	0x42986d63
   29ae4:	80a7f000 	.word	0x80a7f000
   29ae8:	42986de3 	.word	0x42986de3
   29aec:	80aaf000 	.word	0x80aaf000
   29af0:	42986e63 	.word	0x42986e63
   29af4:	80aff000 	.word	0x80aff000
   29af8:	42986ee3 	.word	0x42986ee3
   29afc:	80b2f000 	.word	0x80b2f000
   29b00:	42986f63 	.word	0x42986f63
   29b04:	80b5f000 	.word	0x80b5f000
   29b08:	42836fe3 	.word	0x42836fe3
   29b0c:	80b8f000 	.word	0x80b8f000
   29b10:	479868d3 	.word	0x479868d3
   29b14:	2b047823 	.word	0x2b047823
   29b18:	7a23d03f 	.word	0x7a23d03f
   29b1c:	d03c2b04 	.word	0xd03c2b04
   29b20:	2b047c23 	.word	0x2b047c23
   29b24:	7e23d039 	.word	0x7e23d039
   29b28:	d0362b04 	.word	0xd0362b04
   29b2c:	3020f894 	.word	0x3020f894
   29b30:	d0322b04 	.word	0xd0322b04
   29b34:	3028f894 	.word	0x3028f894
   29b38:	d02e2b04 	.word	0xd02e2b04
   29b3c:	3030f894 	.word	0x3030f894
   29b40:	d02a2b04 	.word	0xd02a2b04
   29b44:	3038f894 	.word	0x3038f894
   29b48:	d0262b04 	.word	0xd0262b04
   29b4c:	3040f894 	.word	0x3040f894
   29b50:	d0222b04 	.word	0xd0222b04
   29b54:	3048f894 	.word	0x3048f894
   29b58:	d01e2b04 	.word	0xd01e2b04
   29b5c:	3050f894 	.word	0x3050f894
   29b60:	d01a2b04 	.word	0xd01a2b04
   29b64:	3058f894 	.word	0x3058f894
   29b68:	d0162b04 	.word	0xd0162b04
   29b6c:	3060f894 	.word	0x3060f894
   29b70:	d0122b04 	.word	0xd0122b04
   29b74:	3068f894 	.word	0x3068f894
   29b78:	d00e2b04 	.word	0xd00e2b04
   29b7c:	3070f894 	.word	0x3070f894
   29b80:	d00a2b04 	.word	0xd00a2b04
   29b84:	3078f894 	.word	0x3078f894
   29b88:	bf182b04 	.word	0xbf182b04
   29b8c:	d0042000 	.word	0xd0042000
   29b90:	2007bd38 	.word	0x2007bd38
   29b94:	20084770 	.word	0x20084770
   29b98:	f7f3bd38 	.word	0xf7f3bd38
   29b9c:	2000fe69 	.word	0x2000fe69
   29ba0:	7821bd38 	.word	0x7821bd38
   29ba4:	f47f2903 	.word	0xf47f2903
   29ba8:	2100af77 	.word	0x2100af77
   29bac:	46182501 	.word	0x46182501
   29bb0:	f80468d2 	.word	0xf80468d2
   29bb4:	47905031 	.word	0x47905031
   29bb8:	bd382000 	.word	0xbd382000
   29bbc:	29037a21 	.word	0x29037a21
   29bc0:	af6ef47f 	.word	0xaf6ef47f
   29bc4:	e7f12101 	.word	0xe7f12101
   29bc8:	29037c21 	.word	0x29037c21
   29bcc:	af6cf47f 	.word	0xaf6cf47f
   29bd0:	e7eb2102 	.word	0xe7eb2102
   29bd4:	29037e21 	.word	0x29037e21
   29bd8:	6a63d0e8 	.word	0x6a63d0e8
   29bdc:	f47f4298 	.word	0xf47f4298
   29be0:	f894af6b 	.word	0xf894af6b
   29be4:	29031020 	.word	0x29031020
   29be8:	af66f47f 	.word	0xaf66f47f
   29bec:	e7dd2104 	.word	0xe7dd2104
   29bf0:	1028f894 	.word	0x1028f894
   29bf4:	f47f2903 	.word	0xf47f2903
   29bf8:	2105af63 	.word	0x2105af63
   29bfc:	f894e7d6 	.word	0xf894e7d6
   29c00:	29031030 	.word	0x29031030
   29c04:	af60f47f 	.word	0xaf60f47f
   29c08:	e7cf2106 	.word	0xe7cf2106
   29c0c:	1038f894 	.word	0x1038f894
   29c10:	f47f2903 	.word	0xf47f2903
   29c14:	2107af5d 	.word	0x2107af5d
   29c18:	f894e7c8 	.word	0xf894e7c8
   29c1c:	29031040 	.word	0x29031040
   29c20:	af5af47f 	.word	0xaf5af47f
   29c24:	e7c12108 	.word	0xe7c12108
   29c28:	1048f894 	.word	0x1048f894
   29c2c:	f47f2903 	.word	0xf47f2903
   29c30:	2109af57 	.word	0x2109af57
   29c34:	f894e7ba 	.word	0xf894e7ba
   29c38:	29031050 	.word	0x29031050
   29c3c:	af54f47f 	.word	0xaf54f47f
   29c40:	e7b3210a 	.word	0xe7b3210a
   29c44:	1058f894 	.word	0x1058f894
   29c48:	f47f2903 	.word	0xf47f2903
   29c4c:	210baf51 	.word	0x210baf51
   29c50:	200ee7ac 	.word	0x200ee7ac
   29c54:	f8944770 	.word	0xf8944770
   29c58:	29031060 	.word	0x29031060
   29c5c:	af4cf47f 	.word	0xaf4cf47f
   29c60:	e7a3210c 	.word	0xe7a3210c
   29c64:	1068f894 	.word	0x1068f894
   29c68:	f47f2903 	.word	0xf47f2903
   29c6c:	210daf49 	.word	0x210daf49
   29c70:	f894e79c 	.word	0xf894e79c
   29c74:	29031070 	.word	0x29031070
   29c78:	af46f47f 	.word	0xaf46f47f
   29c7c:	e795210e 	.word	0xe795210e
   29c80:	3078f894 	.word	0x3078f894
   29c84:	f47f2b03 	.word	0xf47f2b03
   29c88:	4603af43 	.word	0x4603af43
   29c8c:	e78d210f 	.word	0xe78d210f
   29c90:	20021444 	.word	0x20021444
   29c94:	200214dc 	.word	0x200214dc

00029c98 <rpc_message_data_free>:
   29c98:	f0002800 	.word	0xf0002800
   29c9c:	29008091 	.word	0x29008091
   29ca0:	80e4f000 	.word	0x80e4f000
   29ca4:	4a81b538 	.word	0x4a81b538
   29ca8:	2b006853 	.word	0x2b006853
   29cac:	808af000 	.word	0x808af000
   29cb0:	681c4b7f 	.word	0x681c4b7f
   29cb4:	f00042a1 	.word	0xf00042a1
   29cb8:	689c8087 	.word	0x689c8087
   29cbc:	f00042a1 	.word	0xf00042a1
   29cc0:	691c808f 	.word	0x691c808f
   29cc4:	f00042a1 	.word	0xf00042a1
   29cc8:	699c8091 	.word	0x699c8091
   29ccc:	f00042a1 	.word	0xf00042a1
   29cd0:	6a1c8093 	.word	0x6a1c8093
   29cd4:	f00042a1 	.word	0xf00042a1
   29cd8:	6a9c8095 	.word	0x6a9c8095
   29cdc:	f00042a1 	.word	0xf00042a1
   29ce0:	6b1c8097 	.word	0x6b1c8097
   29ce4:	f00042a1 	.word	0xf00042a1
   29ce8:	6b9c8099 	.word	0x6b9c8099
   29cec:	f00042a1 	.word	0xf00042a1
   29cf0:	6c1c809b 	.word	0x6c1c809b
   29cf4:	f00042a1 	.word	0xf00042a1
   29cf8:	6c9c809d 	.word	0x6c9c809d
   29cfc:	f00042a1 	.word	0xf00042a1
   29d00:	6d1c80a0 	.word	0x6d1c80a0
   29d04:	f00042a1 	.word	0xf00042a1
   29d08:	6d9c80a3 	.word	0x6d9c80a3
   29d0c:	f00042a1 	.word	0xf00042a1
   29d10:	6e1c80a6 	.word	0x6e1c80a6
   29d14:	f00042a1 	.word	0xf00042a1
   29d18:	6e9c80ab 	.word	0x6e9c80ab
   29d1c:	f00042a1 	.word	0xf00042a1
   29d20:	6f1c80ae 	.word	0x6f1c80ae
   29d24:	f00042a1 	.word	0xf00042a1
   29d28:	6f9c80b1 	.word	0x6f9c80b1
   29d2c:	f000428c 	.word	0xf000428c
   29d30:	691380b4 	.word	0x691380b4
   29d34:	47984608 	.word	0x47984608
   29d38:	781a4b5e 	.word	0x781a4b5e
   29d3c:	d03b2a04 	.word	0xd03b2a04
   29d40:	2a047a1a 	.word	0x2a047a1a
   29d44:	7c1ad038 	.word	0x7c1ad038
   29d48:	d0352a04 	.word	0xd0352a04
   29d4c:	2a047e1a 	.word	0x2a047e1a
   29d50:	f893d032 	.word	0xf893d032
   29d54:	2a042020 	.word	0x2a042020
   29d58:	f893d02e 	.word	0xf893d02e
   29d5c:	2a042028 	.word	0x2a042028
   29d60:	f893d02a 	.word	0xf893d02a
   29d64:	2a042030 	.word	0x2a042030
   29d68:	f893d026 	.word	0xf893d026
   29d6c:	2a042038 	.word	0x2a042038
   29d70:	f893d022 	.word	0xf893d022
   29d74:	2a042040 	.word	0x2a042040
   29d78:	f893d01e 	.word	0xf893d01e
   29d7c:	2a042048 	.word	0x2a042048
   29d80:	f893d01a 	.word	0xf893d01a
   29d84:	2a042050 	.word	0x2a042050
   29d88:	f893d016 	.word	0xf893d016
   29d8c:	2a042058 	.word	0x2a042058
   29d90:	f893d012 	.word	0xf893d012
   29d94:	2a042060 	.word	0x2a042060
   29d98:	f893d00e 	.word	0xf893d00e
   29d9c:	2a042068 	.word	0x2a042068
   29da0:	f893d00a 	.word	0xf893d00a
   29da4:	2a042070 	.word	0x2a042070
   29da8:	f893d006 	.word	0xf893d006
   29dac:	2b043078 	.word	0x2b043078
   29db0:	2000bf18 	.word	0x2000bf18
   29db4:	bd38d000 	.word	0xbd38d000
   29db8:	fd5af7f3 	.word	0xfd5af7f3
   29dbc:	bd382000 	.word	0xbd382000
   29dc0:	47702007 	.word	0x47702007
   29dc4:	bd382008 	.word	0xbd382008
   29dc8:	4284889c 	.word	0x4284889c
   29dcc:	af75f47f 	.word	0xaf75f47f
   29dd0:	20002400 	.word	0x20002400
   29dd4:	05c4eb03 	.word	0x05c4eb03
   29dd8:	0034f843 	.word	0x0034f843
   29ddc:	e7a880a8 	.word	0xe7a880a8
   29de0:	4284899c 	.word	0x4284899c
   29de4:	af6df47f 	.word	0xaf6df47f
   29de8:	e7f22401 	.word	0xe7f22401
   29dec:	42848a9c 	.word	0x42848a9c
   29df0:	af6bf47f 	.word	0xaf6bf47f
   29df4:	e7ec2402 	.word	0xe7ec2402
   29df8:	42848b9c 	.word	0x42848b9c
   29dfc:	af69f47f 	.word	0xaf69f47f
   29e00:	e7e62403 	.word	0xe7e62403
   29e04:	42848c9c 	.word	0x42848c9c
   29e08:	af67f47f 	.word	0xaf67f47f
   29e0c:	e7e02404 	.word	0xe7e02404
   29e10:	42848d9c 	.word	0x42848d9c
   29e14:	af65f47f 	.word	0xaf65f47f
   29e18:	e7da2405 	.word	0xe7da2405
   29e1c:	42848e9c 	.word	0x42848e9c
   29e20:	af63f47f 	.word	0xaf63f47f
   29e24:	e7d42406 	.word	0xe7d42406
   29e28:	42848f9c 	.word	0x42848f9c
   29e2c:	af61f47f 	.word	0xaf61f47f
   29e30:	e7ce2407 	.word	0xe7ce2407
   29e34:	4044f8b3 	.word	0x4044f8b3
   29e38:	f47f4284 	.word	0xf47f4284
   29e3c:	2408af5e 	.word	0x2408af5e
   29e40:	f8b3e7c7 	.word	0xf8b3e7c7
   29e44:	4284404c 	.word	0x4284404c
   29e48:	af5bf47f 	.word	0xaf5bf47f
   29e4c:	e7c02409 	.word	0xe7c02409
   29e50:	4054f8b3 	.word	0x4054f8b3
   29e54:	f47f4284 	.word	0xf47f4284
   29e58:	240aaf58 	.word	0x240aaf58
   29e5c:	f8b3e7b9 	.word	0xf8b3e7b9
   29e60:	4284405c 	.word	0x4284405c
   29e64:	af55f47f 	.word	0xaf55f47f
   29e68:	e7b2240b 	.word	0xe7b2240b
   29e6c:	4770200e 	.word	0x4770200e
   29e70:	4064f8b3 	.word	0x4064f8b3
   29e74:	f47f4284 	.word	0xf47f4284
   29e78:	240caf50 	.word	0x240caf50
   29e7c:	f8b3e7a9 	.word	0xf8b3e7a9
   29e80:	4284406c 	.word	0x4284406c
   29e84:	af4df47f 	.word	0xaf4df47f
   29e88:	e7a2240d 	.word	0xe7a2240d
   29e8c:	4074f8b3 	.word	0x4074f8b3
   29e90:	f47f4284 	.word	0xf47f4284
   29e94:	240eaf4a 	.word	0x240eaf4a
   29e98:	f8b3e79b 	.word	0xf8b3e79b
   29e9c:	4284407c 	.word	0x4284407c
   29ea0:	240fbf08 	.word	0x240fbf08
   29ea4:	af45f47f 	.word	0xaf45f47f
   29ea8:	bf00e793 	.word	0xbf00e793
   29eac:	20021444 	.word	0x20021444
   29eb0:	2002145c 	.word	0x2002145c
   29eb4:	200214dc 	.word	0x200214dc

00029eb8 <symbol_000fb79>:
   29eb8:	b4302801 	.word	0xb4302801
   29ebc:	d1034b0a 	.word	0xd1034b0a
   29ec0:	7c1de00a 	.word	0x7c1de00a
   29ec4:	d0084285 	.word	0xd0084285
   29ec8:	4f14f853 	.word	0x4f14f853
   29ecc:	d1f82c00 	.word	0xd1f82c00
   29ed0:	002df06f 	.word	0x002df06f
   29ed4:	4770bc30 	.word	0x4770bc30
   29ed8:	600c4c04 	.word	0x600c4c04
   29edc:	2000685b 	.word	0x2000685b
   29ee0:	6013bc30 	.word	0x6013bc30
   29ee4:	bf004770 	.word	0xbf004770
   29ee8:	00034248 	.word	0x00034248
   29eec:	00034214 	.word	0x00034214

00029ef0 <symbol_000494c>:
   29ef0:	b4302803 	.word	0xb4302803
   29ef4:	d1034b0a 	.word	0xd1034b0a
   29ef8:	7c1de00a 	.word	0x7c1de00a
   29efc:	d0084285 	.word	0xd0084285
   29f00:	4f14f853 	.word	0x4f14f853
   29f04:	d1f82c00 	.word	0xd1f82c00
   29f08:	002df06f 	.word	0x002df06f
   29f0c:	4770bc30 	.word	0x4770bc30
   29f10:	600c4c04 	.word	0x600c4c04
   29f14:	2000685b 	.word	0x2000685b
   29f18:	6013bc30 	.word	0x6013bc30
   29f1c:	bf004770 	.word	0xbf004770
   29f20:	00034220 	.word	0x00034220
   29f24:	00034208 	.word	0x00034208

00029f28 <dfu_client_event_handler>:
   29f28:	1b08f850 	.word	0x1b08f850
   29f2c:	f7fc0c09 	.word	0xf7fc0c09
   29f30:	bf00b80d 	.word	0xbf00b80d

00029f34 <rpc_dfu_client_init>:
   29f34:	f7ff4801 	.word	0xf7ff4801
   29f38:	bf00bb33 	.word	0xbf00bb33
   29f3c:	00034298 	.word	0x00034298

00029f40 <rpc_dfu_client_request_alloc>:
   29f40:	b5102300 	.word	0xb5102300
   29f44:	9301b082 	.word	0x9301b082
   29f48:	4604b158 	.word	0x4604b158
   29f4c:	2006aa01 	.word	0x2006aa01
   29f50:	fd5ef7ff 	.word	0xfd5ef7ff
   29f54:	9b01b918 	.word	0x9b01b918
   29f58:	3308b10b 	.word	0x3308b10b
   29f5c:	b0026023 	.word	0xb0026023
   29f60:	2007bd10 	.word	0x2007bd10
   29f64:	bd10b002 	.word	0xbd10b002

00029f68 <rpc_dfu_client_request_send>:
   29f68:	4f70f411 	.word	0x4f70f411
   29f6c:	b160d10b 	.word	0xb160d10b
   29f70:	f8304603 	.word	0xf8304603
   29f74:	20062c08 	.word	0x20062c08
   29f78:	4101ea42 	.word	0x4101ea42
   29f7c:	1d08f843 	.word	0x1d08f843
   29f80:	f7ff4619 	.word	0xf7ff4619
   29f84:	200fbd2d 	.word	0x200fbd2d
   29f88:	20074770 	.word	0x20074770
   29f8c:	bf004770 	.word	0xbf004770

00029f90 <rpc_dfu_client_message_free>:
   29f90:	f1a0b120 	.word	0xf1a0b120
   29f94:	20060108 	.word	0x20060108
   29f98:	bd6cf7ff 	.word	0xbd6cf7ff
   29f9c:	47702007 	.word	0x47702007

00029fa0 <rpc_dfu_client_data_free>:
   29fa0:	4601b118 	.word	0x4601b118
   29fa4:	f7ff2006 	.word	0xf7ff2006
   29fa8:	2007be77 	.word	0x2007be77
   29fac:	bf004770 	.word	0xbf004770

00029fb0 <mem_free>:
   29fb0:	4ff0e92d 	.word	0x4ff0e92d
   29fb4:	c0ccf8df 	.word	0xc0ccf8df
   29fb8:	9000b083 	.word	0x9000b083
   29fbc:	0b3cf10c 	.word	0x0b3cf10c
   29fc0:	3008f8dc 	.word	0x3008f8dc
   29fc4:	f8dcb12b 	.word	0xf8dcb12b
   29fc8:	9c002000 	.word	0x9c002000
   29fcc:	42a07810 	.word	0x42a07810
   29fd0:	f10cd006 	.word	0xf10cd006
   29fd4:	45e30c0c 	.word	0x45e30c0c
   29fd8:	b003d1f2 	.word	0xb003d1f2
   29fdc:	8ff0e8bd 	.word	0x8ff0e8bd
   29fe0:	a004f8dc 	.word	0xa004f8dc
   29fe4:	080aeb03 	.word	0x080aeb03
   29fe8:	d2f245c2 	.word	0xd2f245c2
   29fec:	f8cd6853 	.word	0xf8cd6853
   29ff0:	46d6c004 	.word	0x46d6c004
   29ff4:	f8d2469c 	.word	0xf8d2469c
   29ff8:	89979010 	.word	0x89979010
   29ffc:	000aebae 	.word	0x000aebae
   2a000:	f8b9b3df 	.word	0xf8b9b3df
   2a004:	42902002 	.word	0x42902002
   2a008:	4665d31c 	.word	0x4665d31c
   2a00c:	f1092400 	.word	0xf1092400
   2a010:	e0030304 	.word	0xe0030304
   2a014:	3304885a 	.word	0x3304885a
   2a018:	d8154282 	.word	0xd8154282
   2a01c:	6c04f833 	.word	0x6c04f833
   2a020:	42a73401 	.word	0x42a73401
   2a024:	5506fb02 	.word	0x5506fb02
   2a028:	0002eba0 	.word	0x0002eba0
   2a02c:	d1f1461e 	.word	0xd1f1461e
   2a030:	42812000 	.word	0x42812000
   2a034:	f10ed00d 	.word	0xf10ed00d
   2a038:	45f00e01 	.word	0x45f00e01
   2a03c:	f8ddd1de 	.word	0xf8ddd1de
   2a040:	e7c6c004 	.word	0xe7c6c004
   2a044:	464e4665 	.word	0x464e4665
   2a048:	fb008833 	.word	0xfb008833
   2a04c:	42815003 	.word	0x42815003
   2a050:	f5bed1f1 	.word	0xf5bed1f1
   2a054:	f8dd7f00 	.word	0xf8dd7f00
   2a058:	d0bac004 	.word	0xd0bac004
   2a05c:	4a082301 	.word	0x4a082301
   2a060:	115eea4f 	.word	0x115eea4f
   2a064:	0021f852 	.word	0x0021f852
   2a068:	0e1ff00e 	.word	0x0e1ff00e
   2a06c:	fe0efa03 	.word	0xfe0efa03
   2a070:	0000ea4e 	.word	0x0000ea4e
   2a074:	0021f842 	.word	0x0021f842
   2a078:	4638e7af 	.word	0x4638e7af
   2a07c:	bf00e7d9 	.word	0xbf00e7d9
   2a080:	2002155c 	.word	0x2002155c
   2a084:	200215a0 	.word	0x200215a0

0002a088 <mem_alloc.constprop.5>:
   2a088:	d0502800 	.word	0xd0502800
   2a08c:	f8d34b6d 	.word	0xf8d34b6d
   2a090:	42902088 	.word	0x42902088
   2a094:	e92dd84b 	.word	0xe92dd84b
   2a098:	f8d34ff0 	.word	0xf8d34ff0
   2a09c:	b083b08c 	.word	0xb083b08c
   2a0a0:	0f00f1bb 	.word	0x0f00f1bb
   2a0a4:	f10bd054 	.word	0xf10bd054
   2a0a8:	469132ff 	.word	0x469132ff
   2a0ac:	f04f2600 	.word	0xf04f2600
   2a0b0:	4f650812 	.word	0x4f650812
   2a0b4:	f10b9201 	.word	0xf10b9201
   2a0b8:	eb060e11 	.word	0xeb060e11
   2a0bc:	f8530209 	.word	0xf8530209
   2a0c0:	32014038 	.word	0x32014038
   2a0c4:	eb040852 	.word	0xeb040852
   2a0c8:	f1020c44 	.word	0xf1020c44
   2a0cc:	f8530112 	.word	0xf8530112
   2a0d0:	f8575031 	.word	0xf8575031
   2a0d4:	f853a02c 	.word	0xf853a02c
   2a0d8:	eb03403e 	.word	0xeb03403e
   2a0dc:	f8dc0cc8 	.word	0xf8dc0cc8
   2a0e0:	eb05c004 	.word	0xeb05c004
   2a0e4:	eb040545 	.word	0xeb040545
   2a0e8:	f8da0444 	.word	0xf8da0444
   2a0ec:	f857a010 	.word	0xf857a010
   2a0f0:	f8575025 	.word	0xf8575025
   2a0f4:	f83a4024 	.word	0xf83a4024
   2a0f8:	eb03a02c 	.word	0xeb03a02c
   2a0fc:	eb0301c1 	.word	0xeb0301c1
   2a100:	68490cce 	.word	0x68490cce
   2a104:	6924692d 	.word	0x6924692d
   2a108:	c004f8dc 	.word	0xc004f8dc
   2a10c:	f8354550 	.word	0xf8354550
   2a110:	f8345021 	.word	0xf8345021
   2a114:	d915102c 	.word	0xd915102c
   2a118:	d2114288 	.word	0xd2114288
   2a11c:	d90842a8 	.word	0xd90842a8
   2a120:	45b11c56 	.word	0x45b11c56
   2a124:	8087f0c0 	.word	0x8087f0c0
   2a128:	0813f102 	.word	0x0813f102
   2a12c:	2000e7c5 	.word	0x2000e7c5
   2a130:	f1024770 	.word	0xf1024770
   2a134:	454e39ff 	.word	0x454e39ff
   2a138:	f102d87d 	.word	0xf102d87d
   2a13c:	e7bc0e11 	.word	0xe7bc0e11
   2a140:	0601f109 	.word	0x0601f109
   2a144:	d00745b3 	.word	0xd00745b3
   2a148:	d0012e10 	.word	0xd0012e10
   2a14c:	d80845b3 	.word	0xd80845b3
   2a150:	b0032000 	.word	0xb0032000
   2a154:	8ff0e8bd 	.word	0x8ff0e8bd
   2a158:	2a109a01 	.word	0x2a109a01
   2a15c:	4616bf18 	.word	0x4616bf18
   2a160:	f8dfd0f6 	.word	0xf8dfd0f6
   2a164:	eb03c0e8 	.word	0xeb03c0e8
   2a168:	e9d808c6 	.word	0xe9d808c6
   2a16c:	eb022424 	.word	0xeb022424
   2a170:	f8570242 	.word	0xf8570242
   2a174:	eb073022 	.word	0xeb073022
   2a178:	f8d20282 	.word	0xf8d20282
   2a17c:	691de004 	.word	0x691de004
   2a180:	d0562c00 	.word	0xd0562c00
   2a184:	4670462a 	.word	0x4670462a
   2a188:	eb0500a4 	.word	0xeb0500a4
   2a18c:	88510904 	.word	0x88510904
   2a190:	45913204 	.word	0x45913204
   2a194:	d1fa4408 	.word	0xd1fa4408
   2a198:	f8b11929 	.word	0xf8b11929
   2a19c:	4482a002 	.word	0x4482a002
   2a1a0:	d9184582 	.word	0xd9184582
   2a1a4:	f85c0941 	.word	0xf85c0941
   2a1a8:	f0002021 	.word	0xf0002021
   2a1ac:	fa22041f 	.word	0xfa22041f
   2a1b0:	f019f904 	.word	0xf019f904
   2a1b4:	d0070f01 	.word	0xd0070f01
   2a1b8:	f85ce013 	.word	0xf85ce013
   2a1bc:	fa222021 	.word	0xfa222021
   2a1c0:	f019f904 	.word	0xf019f904
   2a1c4:	d10c0f01 	.word	0xd10c0f01
   2a1c8:	45823001 	.word	0x45823001
   2a1cc:	1150ea4f 	.word	0x1150ea4f
   2a1d0:	041ff000 	.word	0x041ff000
   2a1d4:	3601d1f1 	.word	0x3601d1f1
   2a1d8:	f108455e 	.word	0xf108455e
   2a1dc:	d3c40808 	.word	0xd3c40808
   2a1e0:	2601e7b6 	.word	0x2601e7b6
   2a1e4:	f404fa06 	.word	0xf404fa06
   2a1e8:	ea22899e 	.word	0xea22899e
   2a1ec:	eba00204 	.word	0xeba00204
   2a1f0:	f84c000e 	.word	0xf84c000e
   2a1f4:	685c2021 	.word	0x685c2021
   2a1f8:	d0a92e00 	.word	0xd0a92e00
   2a1fc:	4282886a 	.word	0x4282886a
   2a200:	2100d811 	.word	0x2100d811
   2a204:	e0031d2b 	.word	0xe0031d2b
   2a208:	3304885a 	.word	0x3304885a
   2a20c:	d80a4282 	.word	0xd80a4282
   2a210:	5c04f833 	.word	0x5c04f833
   2a214:	428e3101 	.word	0x428e3101
   2a218:	4405fb02 	.word	0x4405fb02
   2a21c:	0002eba0 	.word	0x0002eba0
   2a220:	d1f1461d 	.word	0xd1f1461d
   2a224:	882be794 	.word	0x882be794
   2a228:	4003fb00 	.word	0x4003fb00
   2a22c:	e8bdb003 	.word	0xe8bdb003
   2a230:	46708ff0 	.word	0x46708ff0
   2a234:	f1bbe7b0 	.word	0xf1bbe7b0
   2a238:	bf080f10 	.word	0xbf080f10
   2a23c:	d090260f 	.word	0xd090260f
   2a240:	bf00e786 	.word	0xbf00e786
   2a244:	200215dc 	.word	0x200215dc
   2a248:	200215a0 	.word	0x200215a0
   2a24c:	2002155c 	.word	0x2002155c

0002a250 <mem_alloc.constprop.4>:
   2a250:	d04c2800 	.word	0xd04c2800
   2a254:	681a4b6b 	.word	0x681a4b6b
   2a258:	d8484290 	.word	0xd8484290
   2a25c:	4ff0e92d 	.word	0x4ff0e92d
   2a260:	b083685f 	.word	0xb083685f
   2a264:	2f009700 	.word	0x2f009700
   2a268:	1e7ad051 	.word	0x1e7ad051
   2a26c:	21004696 	.word	0x21004696
   2a270:	0c01f04f 	.word	0x0c01f04f
   2a274:	92014c64 	.word	0x92014c64
   2a278:	020eeb01 	.word	0x020eeb01
   2a27c:	f8533201 	.word	0xf8533201
   2a280:	0852503c 	.word	0x0852503c
   2a284:	0801f102 	.word	0x0801f102
   2a288:	0545eb05 	.word	0x0545eb05
   2a28c:	9037f853 	.word	0x9037f853
   2a290:	a025f854 	.word	0xa025f854
   2a294:	6038f853 	.word	0x6038f853
   2a298:	0549eb09 	.word	0x0549eb09
   2a29c:	09cceb03 	.word	0x09cceb03
   2a2a0:	9004f8d9 	.word	0x9004f8d9
   2a2a4:	0646eb06 	.word	0x0646eb06
   2a2a8:	a010f8da 	.word	0xa010f8da
   2a2ac:	6026f854 	.word	0x6026f854
   2a2b0:	5025f854 	.word	0x5025f854
   2a2b4:	a029f83a 	.word	0xa029f83a
   2a2b8:	0bc8eb03 	.word	0x0bc8eb03
   2a2bc:	09c7eb03 	.word	0x09c7eb03
   2a2c0:	f8db6936 	.word	0xf8db6936
   2a2c4:	692db004 	.word	0x692db004
   2a2c8:	9004f8d9 	.word	0x9004f8d9
   2a2cc:	f8364550 	.word	0xf8364550
   2a2d0:	f835602b 	.word	0xf835602b
   2a2d4:	d9135029 	.word	0xd9135029
   2a2d8:	d21042a8 	.word	0xd21042a8
   2a2dc:	d90842b0 	.word	0xd90842b0
   2a2e0:	464145c6 	.word	0x464145c6
   2a2e4:	8087f0c0 	.word	0x8087f0c0
   2a2e8:	0c01f108 	.word	0x0c01f108
   2a2ec:	2000e7c4 	.word	0x2000e7c4
   2a2f0:	f1024770 	.word	0xf1024770
   2a2f4:	45713eff 	.word	0x45713eff
   2a2f8:	4617d87d 	.word	0x4617d87d
   2a2fc:	4639e7bc 	.word	0x4639e7bc
   2a300:	428a9a00 	.word	0x428a9a00
   2a304:	2910d007 	.word	0x2910d007
   2a308:	428ad001 	.word	0x428ad001
   2a30c:	2000d808 	.word	0x2000d808
   2a310:	e8bdb003 	.word	0xe8bdb003
   2a314:	9a018ff0 	.word	0x9a018ff0
   2a318:	bf182a10 	.word	0xbf182a10
   2a31c:	d0f64611 	.word	0xd0f64611
   2a320:	c0e8f8df 	.word	0xc0e8f8df
   2a324:	9000f8dd 	.word	0x9000f8dd
   2a328:	08c1eb03 	.word	0x08c1eb03
   2a32c:	2602e9d8 	.word	0x2602e9d8
   2a330:	0242eb02 	.word	0x0242eb02
   2a334:	3022f854 	.word	0x3022f854
   2a338:	0282eb04 	.word	0x0282eb04
   2a33c:	e004f8d2 	.word	0xe004f8d2
   2a340:	2e00691f 	.word	0x2e00691f
   2a344:	463ad055 	.word	0x463ad055
   2a348:	00b64670 	.word	0x00b64670
   2a34c:	0a06eb07 	.word	0x0a06eb07
   2a350:	32048855 	.word	0x32048855
   2a354:	44284592 	.word	0x44284592
   2a358:	19bdd1fa 	.word	0x19bdd1fa
   2a35c:	b002f8b5 	.word	0xb002f8b5
   2a360:	45834483 	.word	0x45834483
   2a364:	0945d918 	.word	0x0945d918
   2a368:	2025f85c 	.word	0x2025f85c
   2a36c:	061ff000 	.word	0x061ff000
   2a370:	fa06fa22 	.word	0xfa06fa22
   2a374:	0f01f01a 	.word	0x0f01f01a
   2a378:	e013d007 	.word	0xe013d007
   2a37c:	2025f85c 	.word	0x2025f85c
   2a380:	fa06fa22 	.word	0xfa06fa22
   2a384:	0f01f01a 	.word	0x0f01f01a
   2a388:	3001d10c 	.word	0x3001d10c
   2a38c:	ea4f4583 	.word	0xea4f4583
   2a390:	f0001550 	.word	0xf0001550
   2a394:	d1f1061f 	.word	0xd1f1061f
   2a398:	45493101 	.word	0x45493101
   2a39c:	0808f108 	.word	0x0808f108
   2a3a0:	e7b4d3c4 	.word	0xe7b4d3c4
   2a3a4:	40b12101 	.word	0x40b12101
   2a3a8:	ea22899e 	.word	0xea22899e
   2a3ac:	eba00201 	.word	0xeba00201
   2a3b0:	f84c000e 	.word	0xf84c000e
   2a3b4:	685c2025 	.word	0x685c2025
   2a3b8:	d0a82e00 	.word	0xd0a82e00
   2a3bc:	4282887a 	.word	0x4282887a
   2a3c0:	2100d811 	.word	0x2100d811
   2a3c4:	e0031d3b 	.word	0xe0031d3b
   2a3c8:	3304885a 	.word	0x3304885a
   2a3cc:	d80a4282 	.word	0xd80a4282
   2a3d0:	5c04f833 	.word	0x5c04f833
   2a3d4:	428e3101 	.word	0x428e3101
   2a3d8:	0002eba0 	.word	0x0002eba0
   2a3dc:	4405fb02 	.word	0x4405fb02
   2a3e0:	d1f1461f 	.word	0xd1f1461f
   2a3e4:	883be793 	.word	0x883be793
   2a3e8:	4003fb00 	.word	0x4003fb00
   2a3ec:	e8bdb003 	.word	0xe8bdb003
   2a3f0:	46708ff0 	.word	0x46708ff0
   2a3f4:	9a00e7b1 	.word	0x9a00e7b1
   2a3f8:	bf082a10 	.word	0xbf082a10
   2a3fc:	d08f210f 	.word	0xd08f210f
   2a400:	bf00e785 	.word	0xbf00e785
   2a404:	200215dc 	.word	0x200215dc
   2a408:	200215a0 	.word	0x200215a0
   2a40c:	2002155c 	.word	0x2002155c

0002a410 <nrf_mem_init>:
   2a410:	2200b570 	.word	0x2200b570
   2a414:	48332501 	.word	0x48332501
   2a418:	f8500951 	.word	0xf8500951
   2a41c:	f0024021 	.word	0xf0024021
   2a420:	fa05031f 	.word	0xfa05031f
   2a424:	3201f303 	.word	0x3201f303
   2a428:	f5b24323 	.word	0xf5b24323
   2a42c:	f8407f00 	.word	0xf8407f00
   2a430:	d1f13021 	.word	0xd1f13021
   2a434:	4b2c2400 	.word	0x4b2c2400
   2a438:	223c4621 	.word	0x223c4621
   2a43c:	601c482b 	.word	0x601c482b
   2a440:	fa5cf008 	.word	0xfa5cf008
   2a444:	22052110 	.word	0x22052110
   2a448:	4e2a4b29 	.word	0x4e2a4b29
   2a44c:	4400e9c3 	.word	0x4400e9c3
   2a450:	615960d9 	.word	0x615960d9
   2a454:	625961d9 	.word	0x625961d9
   2a458:	635962d9 	.word	0x635962d9
   2a45c:	645963d9 	.word	0x645963d9
   2a460:	655964d9 	.word	0x655964d9
   2a464:	665965d9 	.word	0x665965d9
   2a468:	675966d9 	.word	0x675966d9
   2a46c:	609a67d9 	.word	0x609a67d9
   2a470:	619a611a 	.word	0x619a611a
   2a474:	629a621a 	.word	0x629a621a
   2a478:	639a631a 	.word	0x639a631a
   2a47c:	649a641a 	.word	0x649a641a
   2a480:	659a651a 	.word	0x659a651a
   2a484:	669a661a 	.word	0x669a661a
   2a488:	679a671a 	.word	0x679a671a
   2a48c:	2120e9c3 	.word	0x2120e9c3
   2a490:	4422e9c3 	.word	0x4422e9c3
   2a494:	2124e9c3 	.word	0x2124e9c3
   2a498:	2126e9c3 	.word	0x2126e9c3
   2a49c:	2128e9c3 	.word	0x2128e9c3
   2a4a0:	212ae9c3 	.word	0x212ae9c3
   2a4a4:	212ce9c3 	.word	0x212ce9c3
   2a4a8:	212ee9c3 	.word	0x212ee9c3
   2a4ac:	2130e9c3 	.word	0x2130e9c3
   2a4b0:	2132e9c3 	.word	0x2132e9c3
   2a4b4:	2134e9c3 	.word	0x2134e9c3
   2a4b8:	2136e9c3 	.word	0x2136e9c3
   2a4bc:	2138e9c3 	.word	0x2138e9c3
   2a4c0:	213ae9c3 	.word	0x213ae9c3
   2a4c4:	213ce9c3 	.word	0x213ce9c3
   2a4c8:	213ee9c3 	.word	0x213ee9c3
   2a4cc:	1104f8c3 	.word	0x1104f8c3
   2a4d0:	2100f8c3 	.word	0x2100f8c3
   2a4d4:	110cf8c3 	.word	0x110cf8c3
   2a4d8:	2108f8c3 	.word	0x2108f8c3
   2a4dc:	70354620 	.word	0x70354620
   2a4e0:	bf00bd70 	.word	0xbf00bd70
   2a4e4:	2002155c 	.word	0x2002155c
   2a4e8:	2002159c 	.word	0x2002159c
   2a4ec:	200215a0 	.word	0x200215a0
   2a4f0:	200215dc 	.word	0x200215dc
   2a4f4:	20025b3f 	.word	0x20025b3f

0002a4f8 <nrf_mem_register>:
   2a4f8:	4ff0e92d 	.word	0x4ff0e92d
   2a4fc:	b0874b87 	.word	0xb0874b87
   2a500:	2b00781b 	.word	0x2b00781b
   2a504:	808cf000 	.word	0x808cf000
   2a508:	b321b328 	.word	0xb321b328
   2a50c:	f8df780b 	.word	0xf8df780b
   2a510:	eb038218 	.word	0xeb038218
   2a514:	eb081303 	.word	0xeb081303
   2a518:	685b03c3 	.word	0x685b03c3
   2a51c:	c00cf8b1 	.word	0xc00cf8b1
   2a520:	2b104463 	.word	0x2b104463
   2a524:	f04fd811 	.word	0xf04fd811
   2a528:	46890a00 	.word	0x46890a00
   2a52c:	4f7d4b7c 	.word	0x4f7d4b7c
   2a530:	ea4f681b 	.word	0xea4f681b
   2a534:	93000e8c 	.word	0x93000e8c
   2a538:	b19168b9 	.word	0xb19168b9
   2a53c:	0a01f10a 	.word	0x0a01f10a
   2a540:	0f05f1ba 	.word	0x0f05f1ba
   2a544:	070cf107 	.word	0x070cf107
   2a548:	f248d1f6 	.word	0xf248d1f6
   2a54c:	46581b07 	.word	0x46581b07
   2a550:	e8bdb007 	.word	0xe8bdb007
   2a554:	f2488ff0 	.word	0xf2488ff0
   2a558:	46581b0e 	.word	0x46581b0e
   2a55c:	e8bdb007 	.word	0xe8bdb007
   2a560:	f1bc8ff0 	.word	0xf1bc8ff0
   2a564:	d0610f00 	.word	0xd0610f00
   2a568:	460c460d 	.word	0x460c460d
   2a56c:	3010f8d9 	.word	0x3010f8d9
   2a570:	0b03eb0e 	.word	0x0b03eb0e
   2a574:	f833885a 	.word	0xf833885a
   2a578:	44156b04 	.word	0x44156b04
   2a57c:	fb02459b 	.word	0xfb02459b
   2a580:	d1f74406 	.word	0xd1f74406
   2a584:	3008f8d9 	.word	0x3008f8d9
   2a588:	d3d742a3 	.word	0xd3d742a3
   2a58c:	442b9b00 	.word	0x442b9b00
   2a590:	7f00f5b3 	.word	0x7f00f5b3
   2a594:	4c63d2d2 	.word	0x4c63d2d2
   2a598:	024aeb0a 	.word	0x024aeb0a
   2a59c:	f8c00092 	.word	0xf8c00092
   2a5a0:	18a0a000 	.word	0x18a0a000
   2a5a4:	9002f844 	.word	0x9002f844
   2a5a8:	468b9a00 	.word	0x468b9a00
   2a5ac:	2501e9c0 	.word	0x2501e9c0
   2a5b0:	2001f899 	.word	0x2001f899
   2a5b4:	2a01485a 	.word	0x2a01485a
   2a5b8:	d0c86003 	.word	0xd0c86003
   2a5bc:	300cf8b9 	.word	0x300cf8b9
   2a5c0:	d0c42b00 	.word	0xd0c42b00
   2a5c4:	f8cd2500 	.word	0xf8cd2500
   2a5c8:	f8cd9004 	.word	0xf8cd9004
   2a5cc:	f8cda00c 	.word	0xf8cda00c
   2a5d0:	9b01b014 	.word	0x9b01b014
   2a5d4:	691a781f 	.word	0x691a781f
   2a5d8:	eb03013b 	.word	0xeb03013b
   2a5dc:	93000907 	.word	0x93000907
   2a5e0:	03c9eb08 	.word	0x03c9eb08
   2a5e4:	f8326859 	.word	0xf8326859
   2a5e8:	91024025 	.word	0x91024025
   2a5ec:	9a03bb39 	.word	0x9a03bb39
   2a5f0:	609a60dd 	.word	0x609a60dd
   2a5f4:	443b9b00 	.word	0x443b9b00
   2a5f8:	eb08461f 	.word	0xeb08461f
   2a5fc:	684b01c3 	.word	0x684b01c3
   2a600:	2037f858 	.word	0x2037f858
   2a604:	42943301 	.word	0x42943301
   2a608:	d912604b 	.word	0xd912604b
   2a60c:	f8489b01 	.word	0xf8489b01
   2a610:	899b4037 	.word	0x899b4037
   2a614:	429d3501 	.word	0x429d3501
   2a618:	f8ddd3db 	.word	0xf8ddd3db
   2a61c:	e796b014 	.word	0xe796b014
   2a620:	1b08f248 	.word	0x1b08f248
   2a624:	b0074658 	.word	0xb0074658
   2a628:	8ff0e8bd 	.word	0x8ff0e8bd
   2a62c:	46659b00 	.word	0x46659b00
   2a630:	9b01e7ae 	.word	0x9b01e7ae
   2a634:	899b3501 	.word	0x899b3501
   2a638:	d8ca42ab 	.word	0xd8ca42ab
   2a63c:	2600e7ed 	.word	0x2600e7ed
   2a640:	3afff101 	.word	0x3afff101
   2a644:	eb069504 	.word	0xeb069504
   2a648:	eb09000a 	.word	0xeb09000a
   2a64c:	32010206 	.word	0x32010206
   2a650:	f8583001 	.word	0xf8583001
   2a654:	0840c032 	.word	0x0840c032
   2a658:	eb094d32 	.word	0xeb094d32
   2a65c:	eb090100 	.word	0xeb090100
   2a660:	3101030a 	.word	0x3101030a
   2a664:	eb0c3301 	.word	0xeb0c3301
   2a668:	f8580c4c 	.word	0xf8580c4c
   2a66c:	f855e031 	.word	0xf855e031
   2a670:	f858b02c 	.word	0xf858b02c
   2a674:	eb08c033 	.word	0xeb08c033
   2a678:	eb0e02c2 	.word	0xeb0e02c2
   2a67c:	eb0c0e4e 	.word	0xeb0c0e4e
   2a680:	f8db0c4c 	.word	0xf8db0c4c
   2a684:	6852b010 	.word	0x6852b010
   2a688:	e02ef855 	.word	0xe02ef855
   2a68c:	c02cf855 	.word	0xc02cf855
   2a690:	01c1eb08 	.word	0x01c1eb08
   2a694:	03c3eb08 	.word	0x03c3eb08
   2a698:	2022f83b 	.word	0x2022f83b
   2a69c:	e010f8de 	.word	0xe010f8de
   2a6a0:	f8dc6849 	.word	0xf8dc6849
   2a6a4:	685bc010 	.word	0x685bc010
   2a6a8:	f83e4294 	.word	0xf83e4294
   2a6ac:	f83c1021 	.word	0xf83c1021
   2a6b0:	d92d3023 	.word	0xd92d3023
   2a6b4:	d22d429c 	.word	0xd22d429c
   2a6b8:	d924428c 	.word	0xd924428c
   2a6bc:	45b21c46 	.word	0x45b21c46
   2a6c0:	2610d2c1 	.word	0x2610d2c1
   2a6c4:	9a029d04 	.word	0x9a029d04
   2a6c8:	d91142b2 	.word	0xd91142b2
   2a6cc:	443b9b00 	.word	0x443b9b00
   2a6d0:	4433441a 	.word	0x4433441a
   2a6d4:	0ac2eb08 	.word	0x0ac2eb08
   2a6d8:	09c3eb08 	.word	0x09c3eb08
   2a6dc:	46512208 	.word	0x46512208
   2a6e0:	0002eb0a 	.word	0x0002eb0a
   2a6e4:	0a08f1aa 	.word	0x0a08f1aa
   2a6e8:	f8fdf008 	.word	0xf8fdf008
   2a6ec:	d1f545d1 	.word	0xd1f545d1
   2a6f0:	99039b00 	.word	0x99039b00
   2a6f4:	4433443b 	.word	0x4433443b
   2a6f8:	eb083301 	.word	0xeb083301
   2a6fc:	f84802c3 	.word	0xf84802c3
   2a700:	60551033 	.word	0x60551033
   2a704:	f100e776 	.word	0xf100e776
   2a708:	45563aff 	.word	0x45563aff
   2a70c:	e7d8d99b 	.word	0xe7d8d99b
   2a710:	e7d89d04 	.word	0xe7d89d04
   2a714:	f10a9d04 	.word	0xf10a9d04
   2a718:	e7d40601 	.word	0xe7d40601
   2a71c:	20025b3f 	.word	0x20025b3f
   2a720:	2002159c 	.word	0x2002159c
   2a724:	200215a0 	.word	0x200215a0
   2a728:	200215dc 	.word	0x200215dc

0002a72c <nrf_malloc>:
   2a72c:	781b4b03 	.word	0x781b4b03
   2a730:	f7ffb10b 	.word	0xf7ffb10b
   2a734:	4618bd8d 	.word	0x4618bd8d
   2a738:	bf004770 	.word	0xbf004770
   2a73c:	20025b3f 	.word	0x20025b3f

0002a740 <nrf_calloc>:
   2a740:	4b08b538 	.word	0x4b08b538
   2a744:	b155781d 	.word	0xb155781d
   2a748:	f400fb01 	.word	0xf400fb01
   2a74c:	f7ff4620 	.word	0xf7ff4620
   2a750:	4605fd7f 	.word	0x4605fd7f
   2a754:	4622b118 	.word	0x4622b118
   2a758:	f0082100 	.word	0xf0082100
   2a75c:	4628f8cf 	.word	0x4628f8cf
   2a760:	bf00bd38 	.word	0xbf00bd38
   2a764:	20025b3f 	.word	0x20025b3f

0002a768 <nrf_free>:
   2a768:	781b4b04 	.word	0x781b4b04
   2a76c:	b118b123 	.word	0xb118b123
   2a770:	20004601 	.word	0x20004601
   2a774:	bc1cf7ff 	.word	0xbc1cf7ff
   2a778:	bf004770 	.word	0xbf004770
   2a77c:	20025b3f 	.word	0x20025b3f

0002a780 <nrf_shared_malloc>:
   2a780:	781b4b03 	.word	0x781b4b03
   2a784:	f7ffb10b 	.word	0xf7ffb10b
   2a788:	4618bc7f 	.word	0x4618bc7f
   2a78c:	bf004770 	.word	0xbf004770
   2a790:	20025b3f 	.word	0x20025b3f

0002a794 <nrf_shared_free>:
   2a794:	781b4b04 	.word	0x781b4b04
   2a798:	b118b123 	.word	0xb118b123
   2a79c:	20014601 	.word	0x20014601
   2a7a0:	bc06f7ff 	.word	0xbc06f7ff
   2a7a4:	bf004770 	.word	0xbf004770
   2a7a8:	20025b3f 	.word	0x20025b3f

0002a7ac <symbol_0003897>:
   2a7ac:	728cf44f 	.word	0x728cf44f
   2a7b0:	f0082100 	.word	0xf0082100
   2a7b4:	bf00b8a3 	.word	0xbf00b8a3

0002a7b8 <symbol_0006f61>:
   2a7b8:	f44fb118 	.word	0xf44fb118
   2a7bc:	f7fc718c 	.word	0xf7fc718c
   2a7c0:	4770b837 	.word	0x4770b837

0002a7c4 <symbol_000468b>:
   2a7c4:	f0002ac0 	.word	0xf0002ac0
   2a7c8:	f5b28184 	.word	0xf5b28184
   2a7cc:	f0007f80 	.word	0xf0007f80
   2a7d0:	2a80817d 	.word	0x2a80817d
   2a7d4:	f06fd002 	.word	0xf06fd002
   2a7d8:	4770001f 	.word	0x4770001f
   2a7dc:	6003230a 	.word	0x6003230a
   2a7e0:	4ff0e92d 	.word	0x4ff0e92d
   2a7e4:	f04f4607 	.word	0xf04f4607
   2a7e8:	f1000c00 	.word	0xf1000c00
   2a7ec:	b0850408 	.word	0xb0850408
   2a7f0:	f8470952 	.word	0xf8470952
   2a7f4:	788b4f04 	.word	0x788b4f04
   2a7f8:	780e784d 	.word	0x780e784d
   2a7fc:	ea43041b 	.word	0xea43041b
   2a800:	78cd2305 	.word	0x78cd2305
   2a804:	f10c4333 	.word	0xf10c4333
   2a808:	ea430c01 	.word	0xea430c01
   2a80c:	45946305 	.word	0x45946305
   2a810:	3f04f847 	.word	0x3f04f847
   2a814:	0104f101 	.word	0x0104f101
   2a818:	6803d3ed 	.word	0x6803d3ed
   2a81c:	f0002b0c 	.word	0xf0002b0c
   2a820:	2b0e81bf 	.word	0x2b0e81bf
   2a824:	8158f000 	.word	0x8158f000
   2a828:	f0402b0a 	.word	0xf0402b0a
   2a82c:	6944814b 	.word	0x6944814b
   2a830:	f3c44bd8 	.word	0xf3c44bd8
   2a834:	68812207 	.word	0x68812207
   2a838:	0e255c9a 	.word	0x0e255c9a
   2a83c:	f0815d5e 	.word	0xf0815d5e
   2a840:	b2e50101 	.word	0xb2e50101
   2a844:	404a5d5d 	.word	0x404a5d5d
   2a848:	4107f3c4 	.word	0x4107f3c4
   2a84c:	4206ea82 	.word	0x4206ea82
   2a850:	ea825c5e 	.word	0xea825c5e
   2a854:	68c16505 	.word	0x68c16505
   2a858:	2206ea85 	.word	0x2206ea85
   2a85c:	40516907 	.word	0x40516907
   2a860:	0907ea81 	.word	0x0907ea81
   2a864:	0404ea89 	.word	0x0404ea89
   2a868:	2507f3c4 	.word	0x2507f3c4
   2a86c:	0e265d5d 	.word	0x0e265d5d
   2a870:	f0825d9e 	.word	0xf0825d9e
   2a874:	ea850c02 	.word	0xea850c02
   2a878:	ea85050c 	.word	0xea85050c
   2a87c:	b2e64506 	.word	0xb2e64506
   2a880:	c006f813 	.word	0xc006f813
   2a884:	4607f3c4 	.word	0x4607f3c4
   2a888:	ea855d9e 	.word	0xea855d9e
   2a88c:	ea85650c 	.word	0xea85650c
   2a890:	406f2506 	.word	0x406f2506
   2a894:	0c04ea87 	.word	0x0c04ea87
   2a898:	2607f3cc 	.word	0x2607f3cc
   2a89c:	ea4f5d9e 	.word	0xea4f5d9e
   2a8a0:	f8136e1c 	.word	0xf8136e1c
   2a8a4:	f085e00e 	.word	0xf085e00e
   2a8a8:	ea860804 	.word	0xea860804
   2a8ac:	ea860608 	.word	0xea860608
   2a8b0:	fa5f460e 	.word	0xfa5f460e
   2a8b4:	f813fe8c 	.word	0xf813fe8c
   2a8b8:	6182e00e 	.word	0x6182e00e
   2a8bc:	4207f3cc 	.word	0x4207f3cc
   2a8c0:	660eea86 	.word	0x660eea86
   2a8c4:	e002f813 	.word	0xe002f813
   2a8c8:	0201ea85 	.word	0x0201ea85
   2a8cc:	260eea86 	.word	0x260eea86
   2a8d0:	0802ea86 	.word	0x0802ea86
   2a8d4:	0e04ea88 	.word	0x0e04ea88
   2a8d8:	f3ce61c1 	.word	0xf3ce61c1
   2a8dc:	5c592107 	.word	0x5c592107
   2a8e0:	6a1eea4f 	.word	0x6a1eea4f
   2a8e4:	a00af813 	.word	0xa00af813
   2a8e8:	0b08f086 	.word	0x0b08f086
   2a8ec:	010bea81 	.word	0x010bea81
   2a8f0:	410aea81 	.word	0x410aea81
   2a8f4:	fa8efa5f 	.word	0xfa8efa5f
   2a8f8:	a00af813 	.word	0xa00af813
   2a8fc:	f3ce6244 	.word	0xf3ce6244
   2a900:	5d1c4407 	.word	0x5d1c4407
   2a904:	610aea81 	.word	0x610aea81
   2a908:	2104ea81 	.word	0x2104ea81
   2a90c:	0a07ea81 	.word	0x0a07ea81
   2a910:	040eea8a 	.word	0x040eea8a
   2a914:	630762c2 	.word	0x630762c2
   2a918:	2207f3c4 	.word	0x2207f3c4
   2a91c:	0707ea88 	.word	0x0707ea88
   2a920:	680ee9c0 	.word	0x680ee9c0
   2a924:	9020f8c0 	.word	0x9020f8c0
   2a928:	f8c06285 	.word	0xf8c06285
   2a92c:	f8c0c034 	.word	0xf8c0c034
   2a930:	6407e044 	.word	0x6407e044
   2a934:	f8136481 	.word	0xf8136481
   2a938:	0e22c002 	.word	0x0e22c002
   2a93c:	f0815c9a 	.word	0xf0815c9a
   2a940:	ea8c0510 	.word	0xea8c0510
   2a944:	ea8c0c05 	.word	0xea8c0c05
   2a948:	b2e24c02 	.word	0xb2e24c02
   2a94c:	f3c45c9d 	.word	0xf3c45c9d
   2a950:	5c9a4207 	.word	0x5c9a4207
   2a954:	6c05ea8c 	.word	0x6c05ea8c
   2a958:	2c02ea8c 	.word	0x2c02ea8c
   2a95c:	0108ea81 	.word	0x0108ea81
   2a960:	090cea81 	.word	0x090cea81
   2a964:	0209ea8e 	.word	0x0209ea8e
   2a968:	2507f3c2 	.word	0x2507f3c2
   2a96c:	0e155d5e 	.word	0x0e155d5e
   2a970:	f08c5d5d 	.word	0xf08c5d5d
   2a974:	407e0720 	.word	0x407e0720
   2a978:	4605ea86 	.word	0x4605ea86
   2a97c:	5d5db2d5 	.word	0x5d5db2d5
   2a980:	f3c264c1 	.word	0xf3c264c1
   2a984:	5c594107 	.word	0x5c594107
   2a988:	6605ea86 	.word	0x6605ea86
   2a98c:	2601ea86 	.word	0x2601ea86
   2a990:	0e06ea8a 	.word	0x0e06ea8a
   2a994:	080eea82 	.word	0x080eea82
   2a998:	2107f3c8 	.word	0x2107f3c8
   2a99c:	ea4f5c5f 	.word	0xea4f5c5f
   2a9a0:	5c596118 	.word	0x5c596118
   2a9a4:	0540f086 	.word	0x0540f086
   2a9a8:	ea87406f 	.word	0xea87406f
   2a9ac:	fa5f4701 	.word	0xfa5f4701
   2a9b0:	5c59f188 	.word	0x5c59f188
   2a9b4:	0509ea8a 	.word	0x0509ea8a
   2a9b8:	6701ea87 	.word	0x6701ea87
   2a9bc:	4107f3c8 	.word	0x4107f3c8
   2a9c0:	f8c05c59 	.word	0xf8c05c59
   2a9c4:	ea87a050 	.word	0xea87a050
   2a9c8:	ea892701 	.word	0xea892701
   2a9cc:	66050a06 	.word	0x66050a06
   2a9d0:	0507ea8a 	.word	0x0507ea8a
   2a9d4:	0105ea82 	.word	0x0105ea82
   2a9d8:	f3c16544 	.word	0xf3c16544
   2a9dc:	5d1c2407 	.word	0x5d1c2407
   2a9e0:	6b11ea4f 	.word	0x6b11ea4f
   2a9e4:	b00bf813 	.word	0xb00bf813
   2a9e8:	f0876642 	.word	0xf0876642
   2a9ec:	40620280 	.word	0x40620280
   2a9f0:	ea82b2cc 	.word	0xea82b2cc
   2a9f4:	f813420b 	.word	0xf813420b
   2a9f8:	f3c1b004 	.word	0xf3c1b004
   2a9fc:	5d1c4407 	.word	0x5d1c4407
   2aa00:	620bea82 	.word	0x620bea82
   2aa04:	2204ea82 	.word	0x2204ea82
   2aa08:	0402ea8e 	.word	0x0402ea8e
   2aa0c:	c058f8c0 	.word	0xc058f8c0
   2aa10:	0c04ea81 	.word	0x0c04ea81
   2aa14:	67c56686 	.word	0x67c56686
   2aa18:	0605ea8e 	.word	0x0605ea8e
   2aa1c:	40556787 	.word	0x40556787
   2aa20:	2707f3cc 	.word	0x2707f3cc
   2aa24:	ae1be9c0 	.word	0xae1be9c0
   2aa28:	1084f8c0 	.word	0x1084f8c0
   2aa2c:	2088f8c0 	.word	0x2088f8c0
   2aa30:	6080f8c0 	.word	0x6080f8c0
   2aa34:	905cf8c0 	.word	0x905cf8c0
   2aa38:	8074f8c0 	.word	0x8074f8c0
   2aa3c:	508cf8c0 	.word	0x508cf8c0
   2aa40:	f0825dde 	.word	0xf0825dde
   2aa44:	ea4f021b 	.word	0xea4f021b
   2aa48:	f813671c 	.word	0xf813671c
   2aa4c:	4056e007 	.word	0x4056e007
   2aa50:	f28cfa5f 	.word	0xf28cfa5f
   2aa54:	f3cc5c9f 	.word	0xf3cc5c9f
   2aa58:	5c9a4207 	.word	0x5c9a4207
   2aa5c:	460eea86 	.word	0x460eea86
   2aa60:	6607ea86 	.word	0x6607ea86
   2aa64:	2602ea86 	.word	0x2602ea86
   2aa68:	40694075 	.word	0x40694075
   2aa6c:	2207f3c1 	.word	0x2207f3c1
   2aa70:	0e0f5c9a 	.word	0x0e0f5c9a
   2aa74:	f0865ddf 	.word	0xf0865ddf
   2aa78:	ea820e36 	.word	0xea820e36
   2aa7c:	ea82020e 	.word	0xea82020e
   2aa80:	b2cf4207 	.word	0xb2cf4207
   2aa84:	e007f813 	.word	0xe007f813
   2aa88:	4707f3c1 	.word	0x4707f3c1
   2aa8c:	ea825ddf 	.word	0xea825ddf
   2aa90:	ea83630e 	.word	0xea83630e
   2aa94:	ea832307 	.word	0xea832307
   2aa98:	ea820204 	.word	0xea820204
   2aa9c:	e9c00e01 	.word	0xe9c00e01
   2aaa0:	e9c06526 	.word	0xe9c06526
   2aaa4:	f8c02e2c 	.word	0xf8c02e2c
   2aaa8:	ea834090 	.word	0xea834090
   2aaac:	406c0705 	.word	0x406c0705
   2aab0:	c094f8c0 	.word	0xc094f8c0
   2aab4:	10a4f8c0 	.word	0x10a4f8c0
   2aab8:	30a8f8c0 	.word	0x30a8f8c0
   2aabc:	70acf8c0 	.word	0x70acf8c0
   2aac0:	40a0f8c0 	.word	0x40a0f8c0
   2aac4:	b0052000 	.word	0xb0052000
   2aac8:	8ff0e8bd 	.word	0x8ff0e8bd
   2aacc:	6003230e 	.word	0x6003230e
   2aad0:	230ce686 	.word	0x230ce686
   2aad4:	e6836003 	.word	0xe6836003
   2aad8:	ce03e9d0 	.word	0xce03e9d0
   2aadc:	8907e9d0 	.word	0x8907e9d0
   2aae0:	7205e9d0 	.word	0x7205e9d0
   2aae4:	68836a46 	.word	0x68836a46
   2aae8:	f8df4670 	.word	0xf8df4670
   2aaec:	4d29a0b0 	.word	0x4d29a0b0
   2aaf0:	c000f8cd 	.word	0xc000f8cd
   2aaf4:	bf04f85a 	.word	0xbf04f85a
   2aaf8:	2c07f3c6 	.word	0x2c07f3c6
   2aafc:	e00cf815 	.word	0xe00cf815
   2ab00:	6c16ea4f 	.word	0x6c16ea4f
   2ab04:	030bea83 	.word	0x030bea83
   2ab08:	b00cf815 	.word	0xb00cf815
   2ab0c:	fc86fa5f 	.word	0xfc86fa5f
   2ab10:	0303ea8e 	.word	0x0303ea8e
   2ab14:	c00cf815 	.word	0xc00cf815
   2ab18:	4e07f3c6 	.word	0x4e07f3c6
   2ab1c:	430bea83 	.word	0x430bea83
   2ab20:	e00ef815 	.word	0xe00ef815
   2ab24:	630cea83 	.word	0x630cea83
   2ab28:	ea839900 	.word	0xea839900
   2ab2c:	4059230e 	.word	0x4059230e
   2ab30:	40474048 	.word	0x40474048
   2ab34:	fc87fa5f 	.word	0xfc87fa5f
   2ab38:	e00cf815 	.word	0xe00cf815
   2ab3c:	6c17ea4f 	.word	0x6c17ea4f
   2ab40:	b00cf815 	.word	0xb00cf815
   2ab44:	2c07f3c7 	.word	0x2c07f3c7
   2ab48:	0202ea8e 	.word	0x0202ea8e
   2ab4c:	c00cf815 	.word	0xc00cf815
   2ab50:	4e07f3c7 	.word	0x4e07f3c7
   2ab54:	620bea82 	.word	0x620bea82
   2ab58:	e00ef815 	.word	0xe00ef815
   2ab5c:	220cea82 	.word	0x220cea82
   2ab60:	420eea82 	.word	0x420eea82
   2ab64:	0802ea88 	.word	0x0802ea88
   2ab68:	3108e9c4 	.word	0x3108e9c4
   2ab6c:	490a9100 	.word	0x490a9100
   2ab70:	0908ea89 	.word	0x0908ea89
   2ab74:	0609ea86 	.word	0x0609ea86
   2ab78:	e9c4458a 	.word	0xe9c4458a
   2ab7c:	e9c4070a 	.word	0xe9c4070a
   2ab80:	e9c4960e 	.word	0xe9c4960e
   2ab84:	f104280c 	.word	0xf104280c
   2ab88:	d1b30420 	.word	0xd1b30420
   2ab8c:	b0052000 	.word	0xb0052000
   2ab90:	8ff0e8bd 	.word	0x8ff0e8bd
   2ab94:	000342a8 	.word	0x000342a8
   2ab98:	000347c0 	.word	0x000347c0
   2ab9c:	000347a4 	.word	0x000347a4
   2aba0:	4bb269c2 	.word	0x4bb269c2
   2aba4:	2407f3c2 	.word	0x2407f3c2
   2aba8:	5d1d6881 	.word	0x5d1d6881
   2abac:	5d1e0e14 	.word	0x5d1e0e14
   2abb0:	0101f081 	.word	0x0101f081
   2abb4:	5d1cb2d4 	.word	0x5d1cb2d4
   2abb8:	f3c2404d 	.word	0xf3c2404d
   2abbc:	5c594107 	.word	0x5c594107
   2abc0:	4506ea85 	.word	0x4506ea85
   2abc4:	ea8568c7 	.word	0xea8568c7
   2abc8:	ea856504 	.word	0xea856504
   2abcc:	69012501 	.word	0x69012501
   2abd0:	6946406f 	.word	0x6946406f
   2abd4:	0907ea81 	.word	0x0907ea81
   2abd8:	ea866984 	.word	0xea866984
   2abdc:	ea840609 	.word	0xea840609
   2abe0:	ea820806 	.word	0xea820806
   2abe4:	f3c20208 	.word	0xf3c20208
   2abe8:	f8132407 	.word	0xf8132407
   2abec:	ea4fe004 	.word	0xea4fe004
   2abf0:	f8136c12 	.word	0xf8136c12
   2abf4:	f085a00c 	.word	0xf085a00c
   2abf8:	fa5f0402 	.word	0xfa5f0402
   2abfc:	ea8efc82 	.word	0xea8efc82
   2ac00:	f8130404 	.word	0xf8130404
   2ac04:	f3c2e00c 	.word	0xf3c2e00c
   2ac08:	f8134c07 	.word	0xf8134c07
   2ac0c:	ea84c00c 	.word	0xea84c00c
   2ac10:	ea84440a 	.word	0xea84440a
   2ac14:	ea84640e 	.word	0xea84640e
   2ac18:	4061240c 	.word	0x4061240c
   2ac1c:	460c9401 	.word	0x460c9401
   2ac20:	62056981 	.word	0x62056981
   2ac24:	ea824061 	.word	0xea824061
   2ac28:	91030c01 	.word	0x91030c01
   2ac2c:	2e07f3cc 	.word	0x2e07f3cc
   2ac30:	f8139901 	.word	0xf8139901
   2ac34:	ea4fe00e 	.word	0xea4fe00e
   2ac38:	f8136a1c 	.word	0xf8136a1c
   2ac3c:	f081a00a 	.word	0xf081a00a
   2ac40:	ea8e0b04 	.word	0xea8e0b04
   2ac44:	ea8e0e0b 	.word	0xea8e0e0b
   2ac48:	fa5f4a0a 	.word	0xfa5f4a0a
   2ac4c:	f813fe8c 	.word	0xf813fe8c
   2ac50:	e9c0e00e 	.word	0xe9c0e00e
   2ac54:	ea8a960a 	.word	0xea8a960a
   2ac58:	f3cc650e 	.word	0xf3cc650e
   2ac5c:	f8134e07 	.word	0xf8134e07
   2ac60:	ea87e00e 	.word	0xea87e00e
   2ac64:	ea850a01 	.word	0xea850a01
   2ac68:	ea8a250e 	.word	0xea8a250e
   2ac6c:	ea860e05 	.word	0xea860e05
   2ac70:	9100010e 	.word	0x9100010e
   2ac74:	ea864621 	.word	0xea864621
   2ac78:	9c000904 	.word	0x9c000904
   2ac7c:	820ce9c0 	.word	0x820ce9c0
   2ac80:	0604ea82 	.word	0x0604ea82
   2ac84:	f8c06247 	.word	0xf8c06247
   2ac88:	9102a03c 	.word	0x9102a03c
   2ac8c:	9f036401 	.word	0x9f036401
   2ac90:	2407f3c6 	.word	0x2407f3c6
   2ac94:	080eea81 	.word	0x080eea81
   2ac98:	7c12e9c0 	.word	0x7c12e9c0
   2ac9c:	ea4f5d1c 	.word	0xea4f5d1c
   2aca0:	e9c06c16 	.word	0xe9c06c16
   2aca4:	f8c05e14 	.word	0xf8c05e14
   2aca8:	f0858058 	.word	0xf0858058
   2acac:	f8130508 	.word	0xf8130508
   2acb0:	fa5f800c 	.word	0xfa5f800c
   2acb4:	9901fc86 	.word	0x9901fc86
   2acb8:	c00cf813 	.word	0xc00cf813
   2acbc:	f3c64065 	.word	0xf3c64065
   2acc0:	5d1c4407 	.word	0x5d1c4407
   2acc4:	4508ea85 	.word	0x4508ea85
   2acc8:	ea856381 	.word	0xea856381
   2accc:	9902650c 	.word	0x9902650c
   2acd0:	2504ea85 	.word	0x2504ea85
   2acd4:	91014069 	.word	0x91014069
   2acd8:	69844639 	.word	0x69844639
   2acdc:	9044f8c0 	.word	0x9044f8c0
   2ace0:	0805ea84 	.word	0x0805ea84
   2ace4:	0908ea86 	.word	0x0908ea86
   2ace8:	2407f3c9 	.word	0x2407f3c9
   2acec:	a004f813 	.word	0xa004f813
   2acf0:	6419ea4f 	.word	0x6419ea4f
   2acf4:	f0855d1c 	.word	0xf0855d1c
   2acf8:	ea8a0c10 	.word	0xea8a0c10
   2acfc:	fa5f0c0c 	.word	0xfa5f0c0c
   2ad00:	f813fa89 	.word	0xf813fa89
   2ad04:	ea8ca00a 	.word	0xea8ca00a
   2ad08:	f3c94c04 	.word	0xf3c94c04
   2ad0c:	5d1c4407 	.word	0x5d1c4407
   2ad10:	6c0aea8c 	.word	0x6c0aea8c
   2ad14:	0e05ea8e 	.word	0x0e05ea8e
   2ad18:	2c04ea8c 	.word	0x2c04ea8c
   2ad1c:	040cea8e 	.word	0x040cea8e
   2ad20:	f8c04062 	.word	0xf8c04062
   2ad24:	f3c2e06c 	.word	0xf3c2e06c
   2ad28:	f8132e07 	.word	0xf8132e07
   2ad2c:	ea4fe00e 	.word	0xea4fe00e
   2ad30:	f8136a12 	.word	0xf8136a12
   2ad34:	f08ca00a 	.word	0xf08ca00a
   2ad38:	ea8e0b20 	.word	0xea8e0b20
   2ad3c:	ea8e0e0b 	.word	0xea8e0e0b
   2ad40:	fa5f4a0a 	.word	0xfa5f4a0a
   2ad44:	f813fe82 	.word	0xf813fe82
   2ad48:	9f00e00e 	.word	0x9f00e00e
   2ad4c:	6a0eea8a 	.word	0x6a0eea8a
   2ad50:	4e07f3c2 	.word	0x4e07f3c2
   2ad54:	b00ef813 	.word	0xb00ef813
   2ad58:	0e07ea81 	.word	0x0e07ea81
   2ad5c:	ea8a9901 	.word	0xea8a9901
   2ad60:	ea812b0b 	.word	0xea812b0b
   2ad64:	9f000a0b 	.word	0x9f000a0b
   2ad68:	e060f8c0 	.word	0xe060f8c0
   2ad6c:	0e0aea88 	.word	0x0e0aea88
   2ad70:	664665c7 	.word	0x664665c7
   2ad74:	907cf8c0 	.word	0x907cf8c0
   2ad78:	060eea82 	.word	0x060eea82
   2ad7c:	ea876701 	.word	0xea876701
   2ad80:	404f0904 	.word	0x404f0904
   2ad84:	66854061 	.word	0x66854061
   2ad88:	1088f8c0 	.word	0x1088f8c0
   2ad8c:	2507f3c6 	.word	0x2507f3c6
   2ad90:	0109ea88 	.word	0x0109ea88
   2ad94:	1090f8c0 	.word	0x1090f8c0
   2ad98:	0e315d5d 	.word	0x0e315d5d
   2ad9c:	f8c05c59 	.word	0xf8c05c59
   2ada0:	f8c04084 	.word	0xf8c04084
   2ada4:	ea84b098 	.word	0xea84b098
   2ada8:	6747040b 	.word	0x6747040b
   2adac:	0b40f08b 	.word	0x0b40f08b
   2adb0:	5ddfb2f7 	.word	0x5ddfb2f7
   2adb4:	60acf8c0 	.word	0x60acf8c0
   2adb8:	050bea85 	.word	0x050bea85
   2adbc:	4607f3c6 	.word	0x4607f3c6
   2adc0:	4501ea85 	.word	0x4501ea85
   2adc4:	ea855d99 	.word	0xea855d99
   2adc8:	ea856507 	.word	0xea856507
   2adcc:	f8c02501 	.word	0xf8c02501
   2add0:	406c409c 	.word	0x406c409c
   2add4:	0604ea89 	.word	0x0604ea89
   2add8:	2094f8c0 	.word	0x2094f8c0
   2addc:	f3c24072 	.word	0xf3c24072
   2ade0:	f8c02107 	.word	0xf8c02107
   2ade4:	5c59c080 	.word	0x5c59c080
   2ade8:	0c0aea89 	.word	0x0c0aea89
   2adec:	f8c00e17 	.word	0xf8c00e17
   2adf0:	f8c0908c 	.word	0xf8c0908c
   2adf4:	f813c0a4 	.word	0xf813c0a4
   2adf8:	f0859007 	.word	0xf0859007
   2adfc:	b2d70c80 	.word	0xb2d70c80
   2ae00:	010cea81 	.word	0x010cea81
   2ae04:	c007f813 	.word	0xc007f813
   2ae08:	4707f3c2 	.word	0x4707f3c2
   2ae0c:	ea815ddf 	.word	0xea815ddf
   2ae10:	ea814109 	.word	0xea814109
   2ae14:	ea83630c 	.word	0xea83630c
   2ae18:	f8c02307 	.word	0xf8c02307
   2ae1c:	ea838078 	.word	0xea838078
   2ae20:	ea830c0a 	.word	0xea830c0a
   2ae24:	f8c00808 	.word	0xf8c00808
   2ae28:	ea8ee0a8 	.word	0xea8ee0a8
   2ae2c:	ea880706 	.word	0xea880706
   2ae30:	ea8c0b02 	.word	0xea8c0b02
   2ae34:	ea830906 	.word	0xea830906
   2ae38:	ea8a0e04 	.word	0xea8a0e04
   2ae3c:	f8c00104 	.word	0xf8c00104
   2ae40:	e9c0a0a0 	.word	0xe9c0a0a0
   2ae44:	f8c07230 	.word	0xf8c07230
   2ae48:	e9c060bc 	.word	0xe9c060bc
   2ae4c:	e9c0542c 	.word	0xe9c0542c
   2ae50:	f8c08b36 	.word	0xf8c08b36
   2ae54:	e9c030c8 	.word	0xe9c030c8
   2ae58:	f8c0c934 	.word	0xf8c0c934
   2ae5c:	f8c0e0cc 	.word	0xf8c0e0cc
   2ae60:	200010b8 	.word	0x200010b8
   2ae64:	e8bdb005 	.word	0xe8bdb005
   2ae68:	bf008ff0 	.word	0xbf008ff0
   2ae6c:	000342a8 	.word	0x000342a8

0002ae70 <symbol_000e9b3>:
   2ae70:	4ff0e92d 	.word	0x4ff0e92d
   2ae74:	0400e9d0 	.word	0x0400e9d0
   2ae78:	46061040 	.word	0x46061040
   2ae7c:	f8d16823 	.word	0xf8d16823
   2ae80:	b089a000 	.word	0xb089a000
   2ae84:	0a03ea8a 	.word	0x0a03ea8a
   2ae88:	800cf8d1 	.word	0x800cf8d1
   2ae8c:	3e0168e3 	.word	0x3e0168e3
   2ae90:	68659006 	.word	0x68659006
   2ae94:	68a0684f 	.word	0x68a0684f
   2ae98:	688a9205 	.word	0x688a9205
   2ae9c:	0803ea88 	.word	0x0803ea88
   2aea0:	f1042e00 	.word	0xf1042e00
   2aea4:	96010310 	.word	0x96010310
   2aea8:	0507ea85 	.word	0x0507ea85
   2aeac:	0200ea82 	.word	0x0200ea82
   2aeb0:	f8df9304 	.word	0xf8df9304
   2aeb4:	f340b3e8 	.word	0xf340b3e8
   2aeb8:	462b80db 	.word	0x462b80db
   2aebc:	0930f104 	.word	0x0930f104
   2aec0:	f18afa5f 	.word	0xf18afa5f
   2aec4:	f788fa5f 	.word	0xf788fa5f
   2aec8:	b2d4b2de 	.word	0xb2d4b2de
   2aecc:	0021f85b 	.word	0x0021f85b
   2aed0:	5027f85b 	.word	0x5027f85b
   2aed4:	7026f85b 	.word	0x7026f85b
   2aed8:	6024f85b 	.word	0x6024f85b
   2aedc:	4c20f859 	.word	0x4c20f859
   2aee0:	6118ea4f 	.word	0x6118ea4f
   2aee4:	0c04ea80 	.word	0x0c04ea80
   2aee8:	0c14f859 	.word	0x0c14f859
   2aeec:	1021f85b 	.word	0x1021f85b
   2aef0:	0e00ea85 	.word	0x0e00ea85
   2aef4:	f85b0e10 	.word	0xf85b0e10
   2aef8:	f3c35020 	.word	0xf3c35020
   2aefc:	ea8c2407 	.word	0xea8c2407
   2af00:	f3c22c31 	.word	0xf3c22c31
   2af04:	f3c24107 	.word	0xf3c24107
   2af08:	f85b2207 	.word	0xf85b2207
   2af0c:	f85b4024 	.word	0xf85b4024
   2af10:	ea8e0022 	.word	0xea8e0022
   2af14:	0e1d2235 	.word	0x0e1d2235
   2af18:	4307f3c3 	.word	0x4307f3c3
   2af1c:	3023f85b 	.word	0x3023f85b
   2af20:	6c34ea8c 	.word	0x6c34ea8c
   2af24:	4c18f859 	.word	0x4c18f859
   2af28:	f85b9302 	.word	0xf85b9302
   2af2c:	f8595025 	.word	0xf8595025
   2af30:	ea4f3c1c 	.word	0xea4f3c1c
   2af34:	f85b6e1a 	.word	0xf85b6e1a
   2af38:	4066e02e 	.word	0x4066e02e
   2af3c:	f3ca405f 	.word	0xf3ca405f
   2af40:	ea862407 	.word	0xea862407
   2af44:	f3c82635 	.word	0xf3c82635
   2af48:	f3c82507 	.word	0xf3c82507
   2af4c:	ea874807 	.word	0xea874807
   2af50:	f85b273e 	.word	0xf85b273e
   2af54:	f85b4024 	.word	0xf85b4024
   2af58:	f85be025 	.word	0xf85be025
   2af5c:	9b025028 	.word	0x9b025028
   2af60:	6030ea87 	.word	0x6030ea87
   2af64:	4035ea80 	.word	0x4035ea80
   2af68:	1021f85b 	.word	0x1021f85b
   2af6c:	6434ea82 	.word	0x6434ea82
   2af70:	4433ea84 	.word	0x4433ea84
   2af74:	ea8cb2c3 	.word	0xea8cb2c3
   2af78:	f85b4131 	.word	0xf85b4131
   2af7c:	f3ca3023 	.word	0xf3ca3023
   2af80:	f85b4a07 	.word	0xf85b4a07
   2af84:	b2ca702a 	.word	0xb2ca702a
   2af88:	6c14ea4f 	.word	0x6c14ea4f
   2af8c:	2022f85b 	.word	0x2022f85b
   2af90:	663eea86 	.word	0x663eea86
   2af94:	f8599302 	.word	0xf8599302
   2af98:	ea863c10 	.word	0xea863c10
   2af9c:	f85b4637 	.word	0xf85b4637
   2afa0:	f3c0e02c 	.word	0xf3c0e02c
   2afa4:	f85b2707 	.word	0xf85b2707
   2afa8:	ea82c027 	.word	0xea82c027
   2afac:	f3c60a03 	.word	0xf3c60a03
   2afb0:	f3c64507 	.word	0xf3c64507
   2afb4:	f85b2207 	.word	0xf85b2207
   2afb8:	f85b3022 	.word	0xf85b3022
   2afbc:	ea8a5025 	.word	0xea8a5025
   2afc0:	f3c42a3e 	.word	0xf3c42a3e
   2afc4:	0e0f4207 	.word	0x0e0f4207
   2afc8:	6a3cea8a 	.word	0x6a3cea8a
   2afcc:	7027f85b 	.word	0x7027f85b
   2afd0:	ea8a9303 	.word	0xea8a9303
   2afd4:	f85b4a35 	.word	0xf85b4a35
   2afd8:	f8598022 	.word	0xf8598022
   2afdc:	9b025c0c 	.word	0x9b025c0c
   2afe0:	406bb2f2 	.word	0x406bb2f2
   2afe4:	2022f85b 	.word	0x2022f85b
   2afe8:	2337ea83 	.word	0x2337ea83
   2afec:	7c08f859 	.word	0x7c08f859
   2aff0:	fc84fa5f 	.word	0xfc84fa5f
   2aff4:	2407f3c4 	.word	0x2407f3c4
   2aff8:	502cf85b 	.word	0x502cf85b
   2affc:	0e364057 	.word	0x0e364057
   2b000:	2024f85b 	.word	0x2024f85b
   2b004:	4c04f859 	.word	0x4c04f859
   2b008:	6e10ea4f 	.word	0x6e10ea4f
   2b00c:	6026f85b 	.word	0x6026f85b
   2b010:	f85b406c 	.word	0xf85b406c
   2b014:	ea84e02e 	.word	0xea84e02e
   2b018:	f3c12636 	.word	0xf3c12636
   2b01c:	f3c12407 	.word	0xf3c12407
   2b020:	f85b4107 	.word	0xf85b4107
   2b024:	ea871021 	.word	0xea871021
   2b028:	ea8e2e3e 	.word	0xea8e2e3e
   2b02c:	f3c06232 	.word	0xf3c06232
   2b030:	f85b4007 	.word	0xf85b4007
   2b034:	9d034024 	.word	0x9d034024
   2b038:	4231ea82 	.word	0x4231ea82
   2b03c:	f85b9901 	.word	0xf85b9901
   2b040:	ea830020 	.word	0xea830020
   2b044:	ea866335 	.word	0xea866335
   2b048:	39016634 	.word	0x39016634
   2b04c:	4338ea83 	.word	0x4338ea83
   2b050:	0920f109 	.word	0x0920f109
   2b054:	4830ea86 	.word	0x4830ea86
   2b058:	f47f9101 	.word	0xf47f9101
   2b05c:	461daf31 	.word	0x461daf31
   2b060:	99049b06 	.word	0x99049b06
   2b064:	6300f103 	.word	0x6300f103
   2b068:	eb013b01 	.word	0xeb013b01
   2b06c:	93041343 	.word	0x93041343
   2b070:	fa5f2400 	.word	0xfa5f2400
   2b074:	f85bf38a 	.word	0xf85bf38a
   2b078:	9b047023 	.word	0x9b047023
   2b07c:	fa5f46a1 	.word	0xfa5f46a1
   2b080:	6819fc85 	.word	0x6819fc85
   2b084:	6318ea4f 	.word	0x6318ea4f
   2b088:	46a69407 	.word	0x46a69407
   2b08c:	402cf85b 	.word	0x402cf85b
   2b090:	c023f85b 	.word	0xc023f85b
   2b094:	f3c54079 	.word	0xf3c54079
   2b098:	f85b2307 	.word	0xf85b2307
   2b09c:	f3c23023 	.word	0xf3c23023
   2b0a0:	ea814707 	.word	0xea814707
   2b0a4:	fa5f213c 	.word	0xfa5f213c
   2b0a8:	f85bfc82 	.word	0xf85bfc82
   2b0ac:	f85b002c 	.word	0xf85b002c
   2b0b0:	ea817027 	.word	0xea817027
   2b0b4:	90036133 	.word	0x90036133
   2b0b8:	4037ea81 	.word	0x4037ea81
   2b0bc:	fa5f9f04 	.word	0xfa5f9f04
   2b0c0:	f85bf688 	.word	0xf85bf688
   2b0c4:	68fb6026 	.word	0x68fb6026
   2b0c8:	40739001 	.word	0x40739001
   2b0cc:	f85b0e16 	.word	0xf85b0e16
   2b0d0:	98046026 	.word	0x98046026
   2b0d4:	2636ea83 	.word	0x2636ea83
   2b0d8:	f85b0e2b 	.word	0xf85b0e2b
   2b0dc:	f3c53023 	.word	0xf3c53023
   2b0e0:	496d4507 	.word	0x496d4507
   2b0e4:	7025f85b 	.word	0x7025f85b
   2b0e8:	f89d9306 	.word	0xf89d9306
   2b0ec:	6843c004 	.word	0x6843c004
   2b0f0:	651aea4f 	.word	0x651aea4f
   2b0f4:	5025f85b 	.word	0x5025f85b
   2b0f8:	2207f3c2 	.word	0x2207f3c2
   2b0fc:	2022f85b 	.word	0x2022f85b
   2b100:	c00cf811 	.word	0xc00cf811
   2b104:	69044063 	.word	0x69044063
   2b108:	2535ea83 	.word	0x2535ea83
   2b10c:	2307f3ca 	.word	0x2307f3ca
   2b110:	3023f85b 	.word	0x3023f85b
   2b114:	0c04ea8c 	.word	0x0c04ea8c
   2b118:	6532ea85 	.word	0x6532ea85
   2b11c:	68829c03 	.word	0x68829c03
   2b120:	6633ea86 	.word	0x6633ea86
   2b124:	f3c84660 	.word	0xf3c84660
   2b128:	ea842307 	.word	0xea842307
   2b12c:	9c060c02 	.word	0x9c060c02
   2b130:	3023f85b 	.word	0x3023f85b
   2b134:	4a07f3ca 	.word	0x4a07f3ca
   2b138:	202af85b 	.word	0x202af85b
   2b13c:	2c34ea8c 	.word	0x2c34ea8c
   2b140:	4807f3c8 	.word	0x4807f3c8
   2b144:	4637ea86 	.word	0x4637ea86
   2b148:	6c33ea8c 	.word	0x6c33ea8c
   2b14c:	7028f85b 	.word	0x7028f85b
   2b150:	4232ea8c 	.word	0x4232ea8c
   2b154:	4537ea85 	.word	0x4537ea85
   2b158:	4c07f3c2 	.word	0x4c07f3c2
   2b15c:	5ccb0e33 	.word	0x5ccb0e33
   2b160:	a00cf811 	.word	0xa00cf811
   2b164:	fc85fa5f 	.word	0xfc85fa5f
   2b168:	400cf811 	.word	0x400cf811
   2b16c:	2707f3c5 	.word	0x2707f3c5
   2b170:	464c9403 	.word	0x464c9403
   2b174:	ea805dcf 	.word	0xea805dcf
   2b178:	98016303 	.word	0x98016303
   2b17c:	2307ea83 	.word	0x2307ea83
   2b180:	fb82fa5f 	.word	0xfb82fa5f
   2b184:	430aea83 	.word	0x430aea83
   2b188:	b00bf811 	.word	0xb00bf811
   2b18c:	6c10ea4f 	.word	0x6c10ea4f
   2b190:	f3639804 	.word	0xf3639804
   2b194:	f8110407 	.word	0xf8110407
   2b198:	f8cd800c 	.word	0xf8cd800c
   2b19c:	9402b018 	.word	0x9402b018
   2b1a0:	2c07f3c2 	.word	0x2c07f3c2
   2b1a4:	ea4f9c03 	.word	0xea4f9c03
   2b1a8:	69426b12 	.word	0x69426b12
   2b1ac:	c00cf811 	.word	0xc00cf811
   2b1b0:	f3c64062 	.word	0xf3c64062
   2b1b4:	5dcf4707 	.word	0x5dcf4707
   2b1b8:	6808ea82 	.word	0x6808ea82
   2b1bc:	6a15ea4f 	.word	0x6a15ea4f
   2b1c0:	ea886982 	.word	0xea886982
   2b1c4:	9c062c0c 	.word	0x9c062c0c
   2b1c8:	f886fa5f 	.word	0xf886fa5f
   2b1cc:	4707ea8c 	.word	0x4707ea8c
   2b1d0:	8008f811 	.word	0x8008f811
   2b1d4:	c00af811 	.word	0xc00af811
   2b1d8:	a01cf8d0 	.word	0xa01cf8d0
   2b1dc:	40629801 	.word	0x40629801
   2b1e0:	0a0aea88 	.word	0x0a0aea88
   2b1e4:	620cea82 	.word	0x620cea82
   2b1e8:	4807f3c0 	.word	0x4807f3c0
   2b1ec:	2c07f3c0 	.word	0x2c07f3c0
   2b1f0:	f8112000 	.word	0xf8112000
   2b1f4:	f3c6b00b 	.word	0xf3c6b00b
   2b1f8:	5d8e2607 	.word	0x5d8e2607
   2b1fc:	6b0bea8a 	.word	0x6b0bea8a
   2b200:	4507f3c5 	.word	0x4507f3c5
   2b204:	a00cf811 	.word	0xa00cf811
   2b208:	f8115d4d 	.word	0xf8115d4d
   2b20c:	ea821008 	.word	0xea821008
   2b210:	ea8b2606 	.word	0xea8b2606
   2b214:	9c022b0a 	.word	0x9c022b0a
   2b218:	4b05ea8b 	.word	0x4b05ea8b
   2b21c:	4601ea86 	.word	0x4601ea86
   2b220:	2c13ea4f 	.word	0x2c13ea4f
   2b224:	ea4f0a31 	.word	0xea4f0a31
   2b228:	f366221b 	.word	0xf366221b
   2b22c:	f36b0e07 	.word	0xf36b0e07
   2b230:	f36c0007 	.word	0xf36c0007
   2b234:	ea4f240f 	.word	0xea4f240f
   2b238:	f3624c13 	.word	0xf3624c13
   2b23c:	f361200f 	.word	0xf361200f
   2b240:	f36c2e0f 	.word	0xf36c2e0f
   2b244:	0c314417 	.word	0x0c314417
   2b248:	4e17f361 	.word	0x4e17f361
   2b24c:	46204601 	.word	0x46204601
   2b250:	f3630e1b 	.word	0xf3630e1b
   2b254:	9b05601f 	.word	0x9b05601f
   2b258:	60180a3d 	.word	0x60180a3d
   2b25c:	f3672000 	.word	0xf3672000
   2b260:	ea4f0907 	.word	0xea4f0907
   2b264:	f365421b 	.word	0xf365421b
   2b268:	0c3d290f 	.word	0x0c3d290f
   2b26c:	4917f365 	.word	0x4917f365
   2b270:	0e360e3f 	.word	0x0e360e3f
   2b274:	4117f362 	.word	0x4117f362
   2b278:	6b1bea4f 	.word	0x6b1bea4f
   2b27c:	691ff367 	.word	0x691ff367
   2b280:	6e1ff366 	.word	0x6e1ff366
   2b284:	611ff36b 	.word	0x611ff36b
   2b288:	9004f8c3 	.word	0x9004f8c3
   2b28c:	e008f8c3 	.word	0xe008f8c3
   2b290:	b00960d9 	.word	0xb00960d9
   2b294:	8ff0e8bd 	.word	0x8ff0e8bd
   2b298:	000342a8 	.word	0x000342a8
   2b29c:	000343a8 	.word	0x000343a8

0002b2a0 <symbol_000e471>:
   2b2a0:	4ff0e92d 	.word	0x4ff0e92d
   2b2a4:	3500e9d0 	.word	0x3500e9d0
   2b2a8:	682fb089 	.word	0x682fb089
   2b2ac:	f8d1105b 	.word	0xf8d1105b
   2b2b0:	9306a000 	.word	0x9306a000
   2b2b4:	684c3b01 	.word	0x684c3b01
   2b2b8:	ea8a9301 	.word	0xea8a9301
   2b2bc:	68eb0a07 	.word	0x68eb0a07
   2b2c0:	68c9688f 	.word	0x68c9688f
   2b2c4:	40596868 	.word	0x40596868
   2b2c8:	68ae9b01 	.word	0x68ae9b01
   2b2cc:	2b009205 	.word	0x2b009205
   2b2d0:	0210f105 	.word	0x0210f105
   2b2d4:	0004ea80 	.word	0x0004ea80
   2b2d8:	0706ea87 	.word	0x0706ea87
   2b2dc:	f8df9204 	.word	0xf8df9204
   2b2e0:	f340b3dc 	.word	0xf340b3dc
   2b2e4:	46d180d7 	.word	0x46d180d7
   2b2e8:	0830f105 	.word	0x0830f105
   2b2ec:	f489fa5f 	.word	0xf489fa5f
   2b2f0:	5024f85b 	.word	0x5024f85b
   2b2f4:	6c20f858 	.word	0x6c20f858
   2b2f8:	fc80fa5f 	.word	0xfc80fa5f
   2b2fc:	f85b0e04 	.word	0xf85b0e04
   2b300:	f85bc02c 	.word	0xf85bc02c
   2b304:	406e4024 	.word	0x406e4024
   2b308:	5c1cf858 	.word	0x5c1cf858
   2b30c:	2e07f3c1 	.word	0x2e07f3c1
   2b310:	a02ef85b 	.word	0xa02ef85b
   2b314:	0505ea8c 	.word	0x0505ea8c
   2b318:	2e34ea86 	.word	0x2e34ea86
   2b31c:	b2fbb2ca 	.word	0xb2fbb2ca
   2b320:	6c17ea4f 	.word	0x6c17ea4f
   2b324:	4407f3c7 	.word	0x4407f3c7
   2b328:	2707f3c7 	.word	0x2707f3c7
   2b32c:	6027f85b 	.word	0x6027f85b
   2b330:	2022f85b 	.word	0x2022f85b
   2b334:	7c14f858 	.word	0x7c14f858
   2b338:	3023f85b 	.word	0x3023f85b
   2b33c:	ea4f407a 	.word	0xea4f407a
   2b340:	f85b6719 	.word	0xf85b6719
   2b344:	f85b7027 	.word	0xf85b7027
   2b348:	ea82c02c 	.word	0xea82c02c
   2b34c:	ea822237 	.word	0xea822237
   2b350:	f8586636 	.word	0xf8586636
   2b354:	ea852c18 	.word	0xea852c18
   2b358:	ea8e2c3c 	.word	0xea8e2c3c
   2b35c:	0e0d6e3a 	.word	0x0e0d6e3a
   2b360:	0a02ea83 	.word	0x0a02ea83
   2b364:	2307f3c9 	.word	0x2307f3c9
   2b368:	3023f85b 	.word	0x3023f85b
   2b36c:	5025f85b 	.word	0x5025f85b
   2b370:	4107f3c1 	.word	0x4107f3c1
   2b374:	1021f85b 	.word	0x1021f85b
   2b378:	2707f3c0 	.word	0x2707f3c0
   2b37c:	2535ea8a 	.word	0x2535ea8a
   2b380:	4a07f3c0 	.word	0x4a07f3c0
   2b384:	6033ea8c 	.word	0x6033ea8c
   2b388:	4031ea80 	.word	0x4031ea80
   2b38c:	4024f85b 	.word	0x4024f85b
   2b390:	ea8e0e03 	.word	0xea8e0e03
   2b394:	f85b4434 	.word	0xf85b4434
   2b398:	b2e13023 	.word	0xb2e13023
   2b39c:	f3c99302 	.word	0xf3c99302
   2b3a0:	f8584907 	.word	0xf8584907
   2b3a4:	f85b3c10 	.word	0xf85b3c10
   2b3a8:	f85b1021 	.word	0xf85b1021
   2b3ac:	f3c42029 	.word	0xf3c42029
   2b3b0:	f85b2c07 	.word	0xf85b2c07
   2b3b4:	f85b9027 	.word	0xf85b9027
   2b3b8:	4059702a 	.word	0x4059702a
   2b3bc:	302cf85b 	.word	0x302cf85b
   2b3c0:	4637ea86 	.word	0x4637ea86
   2b3c4:	6539ea85 	.word	0x6539ea85
   2b3c8:	4532ea85 	.word	0x4532ea85
   2b3cc:	2707f3c6 	.word	0x2707f3c6
   2b3d0:	9b029303 	.word	0x9b029303
   2b3d4:	4e07f3c5 	.word	0x4e07f3c5
   2b3d8:	7027f85b 	.word	0x7027f85b
   2b3dc:	902ef85b 	.word	0x902ef85b
   2b3e0:	4c07f3c6 	.word	0x4c07f3c6
   2b3e4:	ea4fb2c2 	.word	0xea4fb2c2
   2b3e8:	ea816e15 	.word	0xea816e15
   2b3ec:	b2e92333 	.word	0xb2e92333
   2b3f0:	a02cf85b 	.word	0xa02cf85b
   2b3f4:	6337ea83 	.word	0x6337ea83
   2b3f8:	2022f85b 	.word	0x2022f85b
   2b3fc:	e02ef85b 	.word	0xe02ef85b
   2b400:	1021f85b 	.word	0x1021f85b
   2b404:	7c0cf858 	.word	0x7c0cf858
   2b408:	6c16ea4f 	.word	0x6c16ea4f
   2b40c:	b2f6407a 	.word	0xb2f6407a
   2b410:	2e3eea82 	.word	0x2e3eea82
   2b414:	2026f85b 	.word	0x2026f85b
   2b418:	6c08f858 	.word	0x6c08f858
   2b41c:	4939ea83 	.word	0x4939ea83
   2b420:	40710e23 	.word	0x40710e23
   2b424:	6023f85b 	.word	0x6023f85b
   2b428:	3c04f858 	.word	0x3c04f858
   2b42c:	702cf85b 	.word	0x702cf85b
   2b430:	f3c54053 	.word	0xf3c54053
   2b434:	ea832507 	.word	0xea832507
   2b438:	f85b2636 	.word	0xf85b2636
   2b43c:	f3c05025 	.word	0xf3c05025
   2b440:	f3c02307 	.word	0xf3c02307
   2b444:	ea814007 	.word	0xea814007
   2b448:	f85b2137 	.word	0xf85b2137
   2b44c:	f85b7023 	.word	0xf85b7023
   2b450:	ea863020 	.word	0xea863020
   2b454:	ea816635 	.word	0xea816635
   2b458:	f3c46737 	.word	0xf3c46737
   2b45c:	9a034407 	.word	0x9a034407
   2b460:	4133ea86 	.word	0x4133ea86
   2b464:	f85b9b01 	.word	0xf85b9b01
   2b468:	ea8e4024 	.word	0xea8e4024
   2b46c:	3b016e32 	.word	0x3b016e32
   2b470:	403aea8e 	.word	0x403aea8e
   2b474:	4734ea87 	.word	0x4734ea87
   2b478:	0820f108 	.word	0x0820f108
   2b47c:	f47f9301 	.word	0xf47f9301
   2b480:	46caaf35 	.word	0x46caaf35
   2b484:	9a049b06 	.word	0x9a049b06
   2b488:	6300f103 	.word	0x6300f103
   2b48c:	eb023b01 	.word	0xeb023b01
   2b490:	93041343 	.word	0x93041343
   2b494:	f38afa5f 	.word	0xf38afa5f
   2b498:	5023f85b 	.word	0x5023f85b
   2b49c:	fa5f9b04 	.word	0xfa5f9b04
   2b4a0:	681cf881 	.word	0x681cf881
   2b4a4:	f85b0e03 	.word	0xf85b0e03
   2b4a8:	f85b2028 	.word	0xf85b2028
   2b4ac:	f3c18023 	.word	0xf3c18023
   2b4b0:	f85b2307 	.word	0xf85b2307
   2b4b4:	406c3023 	.word	0x406c3023
   2b4b8:	4507f3c7 	.word	0x4507f3c7
   2b4bc:	5025f85b 	.word	0x5025f85b
   2b4c0:	2438ea84 	.word	0x2438ea84
   2b4c4:	f887fa5f 	.word	0xf887fa5f
   2b4c8:	6028f85b 	.word	0x6028f85b
   2b4cc:	6433ea84 	.word	0x6433ea84
   2b4d0:	4535ea84 	.word	0x4535ea84
   2b4d4:	462e9602 	.word	0x462e9602
   2b4d8:	fa5f9c04 	.word	0xfa5f9c04
   2b4dc:	f85bf980 	.word	0xf85bf980
   2b4e0:	68639029 	.word	0x68639029
   2b4e4:	f85b0e3c 	.word	0xf85b0e3c
   2b4e8:	96014024 	.word	0x96014024
   2b4ec:	0303ea89 	.word	0x0303ea89
   2b4f0:	ea839e04 	.word	0xea839e04
   2b4f4:	f3c72434 	.word	0xf3c72434
   2b4f8:	0e0b2707 	.word	0x0e0b2707
   2b4fc:	f85b4d6e 	.word	0xf85b4d6e
   2b500:	f89d9027 	.word	0xf89d9027
   2b504:	f85b8004 	.word	0xf85b8004
   2b508:	68f37023 	.word	0x68f37023
   2b50c:	0e00f04f 	.word	0x0e00f04f
   2b510:	8008f815 	.word	0x8008f815
   2b514:	69324053 	.word	0x69324053
   2b518:	4107f3c1 	.word	0x4107f3c1
   2b51c:	0802ea88 	.word	0x0802ea88
   2b520:	97034642 	.word	0x97034642
   2b524:	7021f85b 	.word	0x7021f85b
   2b528:	611aea4f 	.word	0x611aea4f
   2b52c:	1021f85b 	.word	0x1021f85b
   2b530:	e018f8cd 	.word	0xe018f8cd
   2b534:	2331ea83 	.word	0x2331ea83
   2b538:	6939ea83 	.word	0x6939ea83
   2b53c:	2307f3ca 	.word	0x2307f3ca
   2b540:	3023f85b 	.word	0x3023f85b
   2b544:	9e0268b1 	.word	0x9e0268b1
   2b548:	6333ea84 	.word	0x6333ea84
   2b54c:	4737ea83 	.word	0x4737ea83
   2b550:	0801ea86 	.word	0x0801ea86
   2b554:	2307f3c0 	.word	0x2307f3c0
   2b558:	f3ca9e03 	.word	0xf3ca9e03
   2b55c:	f3c04a07 	.word	0xf3c04a07
   2b560:	f85b4007 	.word	0xf85b4007
   2b564:	f85b102a 	.word	0xf85b102a
   2b568:	f8cd4023 	.word	0xf8cd4023
   2b56c:	f85be01c 	.word	0xf85be01c
   2b570:	0e383020 	.word	0x0e383020
   2b574:	ea885c28 	.word	0xea885c28
   2b578:	ea892836 	.word	0xea892836
   2b57c:	ea884933 	.word	0xea884933
   2b580:	ea886834 	.word	0xea886834
   2b584:	f3c94131 	.word	0xf3c94131
   2b588:	ea822407 	.word	0xea822407
   2b58c:	9a016000 	.word	0x9a016000
   2b590:	8004f815 	.word	0x8004f815
   2b594:	4307f3c1 	.word	0x4307f3c1
   2b598:	6a11ea4f 	.word	0x6a11ea4f
   2b59c:	f8155cec 	.word	0xf8155cec
   2b5a0:	f3c2b00a 	.word	0xf3c2b00a
   2b5a4:	9a042a07 	.word	0x9a042a07
   2b5a8:	ea80b2fb 	.word	0xea80b2fb
   2b5ac:	ea802008 	.word	0xea802008
   2b5b0:	5ceb4004 	.word	0x5ceb4004
   2b5b4:	f8156954 	.word	0xf8156954
   2b5b8:	f3c9a00a 	.word	0xf3c9a00a
   2b5bc:	40634807 	.word	0x40634807
   2b5c0:	6008f815 	.word	0x6008f815
   2b5c4:	6b0bea83 	.word	0x6b0bea83
   2b5c8:	2b0aea8b 	.word	0x2b0aea8b
   2b5cc:	4b06ea8b 	.word	0x4b06ea8b
   2b5d0:	260046f4 	.word	0x260046f4
   2b5d4:	f881fa5f 	.word	0xf881fa5f
   2b5d8:	f8156994 	.word	0xf8156994
   2b5dc:	ea4f8008 	.word	0xea4f8008
   2b5e0:	f8d26319 	.word	0xf8d26319
   2b5e4:	5ceba01c 	.word	0x5ceba01c
   2b5e8:	fa5f9a01 	.word	0xfa5f9a01
   2b5ec:	f815f989 	.word	0xf815f989
   2b5f0:	ea889009 	.word	0xea889009
   2b5f4:	ea880804 	.word	0xea880804
   2b5f8:	0e136803 	.word	0x0e136803
   2b5fc:	090aea89 	.word	0x090aea89
   2b600:	a003f815 	.word	0xa003f815
   2b604:	4307f3c2 	.word	0x4307f3c2
   2b608:	f3c75cec 	.word	0xf3c75cec
   2b60c:	5ceb2307 	.word	0x5ceb2307
   2b610:	2107f3c1 	.word	0x2107f3c1
   2b614:	ea885c69 	.word	0xea885c69
   2b618:	ea882803 	.word	0xea882803
   2b61c:	ea894804 	.word	0xea894804
   2b620:	ea4f690a 	.word	0xea4f690a
   2b624:	ea89241b 	.word	0xea89241b
   2b628:	f36b2901 	.word	0xf36b2901
   2b62c:	ea4f0c07 	.word	0xea4f0c07
   2b630:	f3682118 	.word	0xf3682118
   2b634:	22000607 	.word	0x22000607
   2b638:	260ff361 	.word	0x260ff361
   2b63c:	2c0ff364 	.word	0x2c0ff364
   2b640:	441bea4f 	.word	0x441bea4f
   2b644:	4c17f364 	.word	0x4c17f364
   2b648:	f3c74634 	.word	0xf3c74634
   2b64c:	5ded4707 	.word	0x5ded4707
   2b650:	0e07f360 	.word	0x0e07f360
   2b654:	4905ea89 	.word	0x4905ea89
   2b658:	2319ea4f 	.word	0x2319ea4f
   2b65c:	f3690a05 	.word	0xf3690a05
   2b660:	ea4f0207 	.word	0xea4f0207
   2b664:	f3634118 	.word	0xf3634118
   2b668:	f365220f 	.word	0xf365220f
   2b66c:	0c052e0f 	.word	0x0c052e0f
   2b670:	4417f361 	.word	0x4417f361
   2b674:	4e17f365 	.word	0x4e17f365
   2b678:	46110e00 	.word	0x46110e00
   2b67c:	6e1ff360 	.word	0x6e1ff360
   2b680:	ea4f4620 	.word	0xea4f4620
   2b684:	ea4f4319 	.word	0xea4f4319
   2b688:	f3636818 	.word	0xf3636818
   2b68c:	9b054117 	.word	0x9b054117
   2b690:	601ff368 	.word	0x601ff368
   2b694:	20006098 	.word	0x20006098
   2b698:	6b1bea4f 	.word	0x6b1bea4f
   2b69c:	6919ea4f 	.word	0x6919ea4f
   2b6a0:	6c1ff36b 	.word	0x6c1ff36b
   2b6a4:	611ff369 	.word	0x611ff369
   2b6a8:	e000f8c3 	.word	0xe000f8c3
   2b6ac:	c004f8c3 	.word	0xc004f8c3
   2b6b0:	b00960d9 	.word	0xb00960d9
   2b6b4:	8ff0e8bd 	.word	0x8ff0e8bd
   2b6b8:	000347d0 	.word	0x000347d0
   2b6bc:	000348d0 	.word	0x000348d0

0002b6c0 <symbol_0005bab>:
   2b6c0:	4614b410 	.word	0x4614b410
   2b6c4:	461a2901 	.word	0x461a2901
   2b6c8:	d0034621 	.word	0xd0034621
   2b6cc:	4b04f85d 	.word	0x4b04f85d
   2b6d0:	bde6f7ff 	.word	0xbde6f7ff
   2b6d4:	4b04f85d 	.word	0x4b04f85d
   2b6d8:	bbcaf7ff 	.word	0xbbcaf7ff

0002b6dc <ok_rsp_parser>:
   2b6dc:	47702000 	.word	0x47702000

0002b6e0 <pdn_state_get_parser>:
   2b6e0:	b5702200 	.word	0xb5702200
   2b6e4:	b084780b 	.word	0xb084780b
   2b6e8:	e9cd460e 	.word	0xe9cd460e
   2b6ec:	e9cd2200 	.word	0xe9cd2200
   2b6f0:	b3232202 	.word	0xb3232202
   2b6f4:	2b20460c 	.word	0x2b20460c
   2b6f8:	d01b460d 	.word	0xd01b460d
   2b6fc:	3201700b 	.word	0x3201700b
   2b700:	3f01f814 	.word	0x3f01f814
   2b704:	460d18b1 	.word	0x460d18b1
   2b708:	d1f42b00 	.word	0xd1f42b00
   2b70c:	4b0d2200 	.word	0x4b0d2200
   2b710:	f853702a 	.word	0xf853702a
   2b714:	4a0c3020 	.word	0x4a0c3020
   2b718:	2110681b 	.word	0x2110681b
   2b71c:	f0054668 	.word	0xf0054668
   2b720:	4669f895 	.word	0x4669f895
   2b724:	f0074630 	.word	0xf0074630
   2b728:	3000fa45 	.word	0x3000fa45
   2b72c:	2001bf18 	.word	0x2001bf18
   2b730:	bd70b004 	.word	0xbd70b004
   2b734:	3f01f814 	.word	0x3f01f814
   2b738:	d1dc2b00 	.word	0xd1dc2b00
   2b73c:	460de7e6 	.word	0x460de7e6
   2b740:	bf00e7e4 	.word	0xbf00e7e4
   2b744:	200217f0 	.word	0x200217f0
   2b748:	00034d74 	.word	0x00034d74

0002b74c <pdn_id_get_parser>:
   2b74c:	780bb570 	.word	0x780bb570
   2b750:	b3134606 	.word	0xb3134606
   2b754:	24004608 	.word	0x24004608
   2b758:	2b20460a 	.word	0x2b20460a
   2b75c:	d0174615 	.word	0xd0174615
   2b760:	34017013 	.word	0x34017013
   2b764:	3f01f810 	.word	0x3f01f810
   2b768:	4615190a 	.word	0x4615190a
   2b76c:	d1f42b00 	.word	0xd1f42b00
   2b770:	46082300 	.word	0x46082300
   2b774:	213a702b 	.word	0x213a702b
   2b778:	f9fdf007 	.word	0xf9fdf007
   2b77c:	3001b130 	.word	0x3001b130
   2b780:	f88af007 	.word	0xf88af007
   2b784:	f8534b06 	.word	0xf8534b06
   2b788:	60583026 	.word	0x60583026
   2b78c:	bd702000 	.word	0xbd702000
   2b790:	3f01f810 	.word	0x3f01f810
   2b794:	d1e02b00 	.word	0xd1e02b00
   2b798:	460de7ea 	.word	0x460de7ea
   2b79c:	bf00e7e8 	.word	0xbf00e7e8
   2b7a0:	200217f0 	.word	0x200217f0

0002b7a4 <context_create_parser>:
   2b7a4:	780bb570 	.word	0x780bb570
   2b7a8:	b3134606 	.word	0xb3134606
   2b7ac:	24004608 	.word	0x24004608
   2b7b0:	2b20460a 	.word	0x2b20460a
   2b7b4:	d0174615 	.word	0xd0174615
   2b7b8:	34017013 	.word	0x34017013
   2b7bc:	3f01f810 	.word	0x3f01f810
   2b7c0:	4615190a 	.word	0x4615190a
   2b7c4:	d1f42b00 	.word	0xd1f42b00
   2b7c8:	46082300 	.word	0x46082300
   2b7cc:	213a702b 	.word	0x213a702b
   2b7d0:	f9d1f007 	.word	0xf9d1f007
   2b7d4:	4b08b130 	.word	0x4b08b130
   2b7d8:	f8533001 	.word	0xf8533001
   2b7dc:	f0074026 	.word	0xf0074026
   2b7e0:	6020f85b 	.word	0x6020f85b
   2b7e4:	bd702000 	.word	0xbd702000
   2b7e8:	3f01f810 	.word	0x3f01f810
   2b7ec:	d1e02b00 	.word	0xd1e02b00
   2b7f0:	460de7ea 	.word	0x460de7ea
   2b7f4:	bf00e7e8 	.word	0xbf00e7e8
   2b7f8:	200217f0 	.word	0x200217f0

0002b7fc <pdn_interface_init>:
   2b7fc:	33fff04f 	.word	0x33fff04f
   2b800:	4c09b510 	.word	0x4c09b510
   2b804:	21002228 	.word	0x21002228
   2b808:	60234808 	.word	0x60234808
   2b80c:	f876f007 	.word	0xf876f007
   2b810:	2201f240 	.word	0x2201f240
   2b814:	20662100 	.word	0x20662100
   2b818:	f8ccf7f3 	.word	0xf8ccf7f3
   2b81c:	60202800 	.word	0x60202800
   2b820:	2003bfb4 	.word	0x2003bfb4
   2b824:	bd102000 	.word	0xbd102000
   2b828:	200216ec 	.word	0x200216ec
   2b82c:	200217f0 	.word	0x200217f0

0002b830 <pdn_interface_open>:
   2b830:	43f0e92d 	.word	0x43f0e92d
   2b834:	b0832866 	.word	0xb0832866
   2b838:	80bcf040 	.word	0x80bcf040
   2b83c:	7f00f5b1 	.word	0x7f00f5b1
   2b840:	80aaf040 	.word	0x80aaf040
   2b844:	2302f240 	.word	0x2302f240
   2b848:	f040429a 	.word	0xf040429a
   2b84c:	4c6280a5 	.word	0x4c6280a5
   2b850:	b34d6825 	.word	0xb34d6825
   2b854:	2b006863 	.word	0x2b006863
   2b858:	8098f000 	.word	0x8098f000
   2b85c:	2b0068a3 	.word	0x2b0068a3
   2b860:	8096f000 	.word	0x8096f000
   2b864:	2b0068e3 	.word	0x2b0068e3
   2b868:	8094f000 	.word	0x8094f000
   2b86c:	2b006923 	.word	0x2b006923
   2b870:	8098f000 	.word	0x8098f000
   2b874:	2b006963 	.word	0x2b006963
   2b878:	8098f000 	.word	0x8098f000
   2b87c:	2b0069a3 	.word	0x2b0069a3
   2b880:	8096f000 	.word	0x8096f000
   2b884:	2b0069e3 	.word	0x2b0069e3
   2b888:	808ef000 	.word	0x808ef000
   2b88c:	b1536a23 	.word	0xb1536a23
   2b890:	25096a63 	.word	0x25096a63
   2b894:	200cb143 	.word	0x200cb143
   2b898:	fefef7f1 	.word	0xfefef7f1
   2b89c:	30fff04f 	.word	0x30fff04f
   2b8a0:	e8bdb003 	.word	0xe8bdb003
   2b8a4:	250883f0 	.word	0x250883f0
   2b8a8:	f7fe2074 	.word	0xf7fe2074
   2b8ac:	f844ff3f 	.word	0xf844ff3f
   2b8b0:	28000025 	.word	0x28000025
   2b8b4:	2274d0ef 	.word	0x2274d0ef
   2b8b8:	f0072100 	.word	0xf0072100
   2b8bc:	2101f81f 	.word	0x2101f81f
   2b8c0:	f04f2003 	.word	0xf04f2003
   2b8c4:	f85437ff 	.word	0xf85437ff
   2b8c8:	4a443025 	.word	0x4a443025
   2b8cc:	f8546099 	.word	0xf8546099
   2b8d0:	f44f3025 	.word	0xf44f3025
   2b8d4:	67187180 	.word	0x67187180
   2b8d8:	4841605f 	.word	0x4841605f
   2b8dc:	810cf8df 	.word	0x810cf8df
   2b8e0:	ffb4f004 	.word	0xffb4f004
   2b8e4:	f8d8483e 	.word	0xf8d8483e
   2b8e8:	26009000 	.word	0x26009000
   2b8ec:	fb00f7ee 	.word	0xfb00f7ee
   2b8f0:	46024633 	.word	0x46024633
   2b8f4:	4648493a 	.word	0x4648493a
   2b8f8:	96009601 	.word	0x96009601
   2b8fc:	f804f7f3 	.word	0xf804f7f3
   2b900:	48374681 	.word	0x48374681
   2b904:	faf4f7ee 	.word	0xfaf4f7ee
   2b908:	d1594548 	.word	0xd1594548
   2b90c:	e9cd4633 	.word	0xe9cd4633
   2b910:	f44f6600 	.word	0xf44f6600
   2b914:	49327280 	.word	0x49327280
   2b918:	0000f8d8 	.word	0x0000f8d8
   2b91c:	f8dcf7f3 	.word	0xf8dcf7f3
   2b920:	48304606 	.word	0x48304606
   2b924:	fae4f7ee 	.word	0xfae4f7ee
   2b928:	db154286 	.word	0xdb154286
   2b92c:	492c4602 	.word	0x492c4602
   2b930:	f007482c 	.word	0xf007482c
   2b934:	b978f92d 	.word	0xb978f92d
   2b938:	46284929 	.word	0x46284929
   2b93c:	ff32f7ff 	.word	0xff32f7ff
   2b940:	2202b9b0 	.word	0x2202b9b0
   2b944:	3025f854 	.word	0x3025f854
   2b948:	40f1f045 	.word	0x40f1f045
   2b94c:	10d0f440 	.word	0x10d0f440
   2b950:	b003609a 	.word	0xb003609a
   2b954:	83f0e8bd 	.word	0x83f0e8bd
   2b958:	f7ee4823 	.word	0xf7ee4823
   2b95c:	4920fac9 	.word	0x4920fac9
   2b960:	48214602 	.word	0x48214602
   2b964:	f914f007 	.word	0xf914f007
   2b968:	2008b960 	.word	0x2008b960
   2b96c:	fe94f7f1 	.word	0xfe94f7f1
   2b970:	0025f854 	.word	0x0025f854
   2b974:	fef8f7fe 	.word	0xfef8f7fe
   2b978:	f04f2300 	.word	0xf04f2300
   2b97c:	f84430ff 	.word	0xf84430ff
   2b980:	e78d3025 	.word	0xe78d3025
   2b984:	f7f12005 	.word	0xf7f12005
   2b988:	e7f1fe87 	.word	0xe7f1fe87
   2b98c:	e78b2501 	.word	0xe78b2501
   2b990:	e7892502 	.word	0xe7892502
   2b994:	e7872503 	.word	0xe7872503
   2b998:	f7f12016 	.word	0xf7f12016
   2b99c:	f04ffe7d 	.word	0xf04ffe7d
   2b9a0:	e77d30ff 	.word	0xe77d30ff
   2b9a4:	e77f2504 	.word	0xe77f2504
   2b9a8:	e77d2507 	.word	0xe77d2507
   2b9ac:	e77b2505 	.word	0xe77b2505
   2b9b0:	e7792506 	.word	0xe7792506
   2b9b4:	f7f1202f 	.word	0xf7f1202f
   2b9b8:	f04ffe6f 	.word	0xf04ffe6f
   2b9bc:	e76f30ff 	.word	0xe76f30ff
   2b9c0:	f7f12005 	.word	0xf7f12005
   2b9c4:	f854fe69 	.word	0xf854fe69
   2b9c8:	f7fe0025 	.word	0xf7fe0025
   2b9cc:	f844fecd 	.word	0xf844fecd
   2b9d0:	46386025 	.word	0x46386025
   2b9d4:	bf00e764 	.word	0xbf00e764
   2b9d8:	200217f0 	.word	0x200217f0
   2b9dc:	00034d50 	.word	0x00034d50
   2b9e0:	200216f0 	.word	0x200216f0
   2b9e4:	00034d60 	.word	0x00034d60
   2b9e8:	00034d6c 	.word	0x00034d6c
   2b9ec:	200216ec 	.word	0x200216ec

0002b9f0 <pdn_interface_connect>:
   2b9f0:	4ff0e92d 	.word	0x4ff0e92d
   2b9f4:	2900b083 	.word	0x2900b083
   2b9f8:	813ef000 	.word	0x813ef000
   2b9fc:	46912a64 	.word	0x46912a64
   2ba00:	813af200 	.word	0x813af200
   2ba04:	46084605 	.word	0x46084605
   2ba08:	f7ee4688 	.word	0xf7ee4688
   2ba0c:	2864fa71 	.word	0x2864fa71
   2ba10:	8132f200 	.word	0x8132f200
   2ba14:	43ab4ba5 	.word	0x43ab4ba5
   2ba18:	8125f040 	.word	0x8125f040
   2ba1c:	45f1f025 	.word	0x45f1f025
   2ba20:	15d0f425 	.word	0x15d0f425
   2ba24:	f3002d09 	.word	0xf3002d09
   2ba28:	4fa1811e 	.word	0x4fa1811e
   2ba2c:	3025f857 	.word	0x3025f857
   2ba30:	f0002b00 	.word	0xf0002b00
   2ba34:	689a8118 	.word	0x689a8118
   2ba38:	f0002a00 	.word	0xf0002a00
   2ba3c:	2d008114 	.word	0x2d008114
   2ba40:	8111f2c0 	.word	0x8111f2c0
   2ba44:	2b02689b 	.word	0x2b02689b
   2ba48:	810df040 	.word	0x810df040
   2ba4c:	4a9a4e99 	.word	0x4a9a4e99
   2ba50:	7180f44f 	.word	0x7180f44f
   2ba54:	f0044630 	.word	0xf0044630
   2ba58:	f857fef9 	.word	0xf857fef9
   2ba5c:	46043025 	.word	0x46043025
   2ba60:	7180f5c0 	.word	0x7180f5c0
   2ba64:	4a95681b 	.word	0x4a95681b
   2ba68:	f0041830 	.word	0xf0041830
   2ba6c:	f857feef 	.word	0xf857feef
   2ba70:	44043025 	.word	0x44043025
   2ba74:	f0036f1b 	.word	0xf0036f1b
   2ba78:	2a030203 	.word	0x2a030203
   2ba7c:	80eaf000 	.word	0x80eaf000
   2ba80:	eb06079b 	.word	0xeb06079b
   2ba84:	f5c40004 	.word	0xf5c40004
   2ba88:	bf4c7180 	.word	0xbf4c7180
   2ba8c:	4b8d4b8c 	.word	0x4b8d4b8c
   2ba90:	f0044a8d 	.word	0xf0044a8d
   2ba94:	4404fedb 	.word	0x4404fedb
   2ba98:	4a8c4643 	.word	0x4a8c4643
   2ba9c:	7180f5c4 	.word	0x7180f5c4
   2baa0:	f0041930 	.word	0xf0041930
   2baa4:	4420fed3 	.word	0x4420fed3
   2baa8:	7f80f5b0 	.word	0x7f80f5b0
   2baac:	80f7f300 	.word	0x80f7f300
   2bab0:	a238f8df 	.word	0xa238f8df
   2bab4:	f8da487f 	.word	0xf8da487f
   2bab8:	2400b000 	.word	0x2400b000
   2babc:	fa18f7ee 	.word	0xfa18f7ee
   2bac0:	46024623 	.word	0x46024623
   2bac4:	4658497b 	.word	0x4658497b
   2bac8:	94009401 	.word	0x94009401
   2bacc:	ff1cf7f2 	.word	0xff1cf7f2
   2bad0:	48784683 	.word	0x48784683
   2bad4:	fa0cf7ee 	.word	0xfa0cf7ee
   2bad8:	d0084558 	.word	0xd0084558
   2badc:	f7f12005 	.word	0xf7f12005
   2bae0:	f04ffddb 	.word	0xf04ffddb
   2bae4:	462034ff 	.word	0x462034ff
   2bae8:	e8bdb003 	.word	0xe8bdb003
   2baec:	46238ff0 	.word	0x46238ff0
   2baf0:	4400e9cd 	.word	0x4400e9cd
   2baf4:	7280f44f 	.word	0x7280f44f
   2baf8:	f8da496e 	.word	0xf8da496e
   2bafc:	f7f20000 	.word	0xf7f20000
   2bb00:	4604ffeb 	.word	0x4604ffeb
   2bb04:	f7ee4872 	.word	0xf7ee4872
   2bb08:	4284f9f3 	.word	0x4284f9f3
   2bb0c:	8091f2c0 	.word	0x8091f2c0
   2bb10:	49684602 	.word	0x49684602
   2bb14:	f007486e 	.word	0xf007486e
   2bb18:	2800f83b 	.word	0x2800f83b
   2bb1c:	8089f040 	.word	0x8089f040
   2bb20:	46284964 	.word	0x46284964
   2bb24:	fddaf7ff 	.word	0xfddaf7ff
   2bb28:	28004604 	.word	0x28004604
   2bb2c:	4a69d1db 	.word	0x4a69d1db
   2bb30:	7180f44f 	.word	0x7180f44f
   2bb34:	f004485f 	.word	0xf004485f
   2bb38:	f857fe89 	.word	0xf857fe89
   2bb3c:	f5c03025 	.word	0xf5c03025
   2bb40:	681b7180 	.word	0x681b7180
   2bb44:	44304a64 	.word	0x44304a64
   2bb48:	fe80f004 	.word	0xfe80f004
   2bb4c:	f8da4859 	.word	0xf8da4859
   2bb50:	f7eeb000 	.word	0xf7eeb000
   2bb54:	4623f9cd 	.word	0x4623f9cd
   2bb58:	49564602 	.word	0x49564602
   2bb5c:	94014658 	.word	0x94014658
   2bb60:	f7f29400 	.word	0xf7f29400
   2bb64:	4683fed1 	.word	0x4683fed1
   2bb68:	f7ee4852 	.word	0xf7ee4852
   2bb6c:	4558f9c1 	.word	0x4558f9c1
   2bb70:	4623d1b4 	.word	0x4623d1b4
   2bb74:	7280f44f 	.word	0x7280f44f
   2bb78:	f8da494e 	.word	0xf8da494e
   2bb7c:	e9cd0000 	.word	0xe9cd0000
   2bb80:	f7f24400 	.word	0xf7f24400
   2bb84:	4683ffa9 	.word	0x4683ffa9
   2bb88:	f7ee4851 	.word	0xf7ee4851
   2bb8c:	4583f9b1 	.word	0x4583f9b1
   2bb90:	4602db4f 	.word	0x4602db4f
   2bb94:	484e4947 	.word	0x484e4947
   2bb98:	fffaf006 	.word	0xfffaf006
   2bb9c:	d1482800 	.word	0xd1482800
   2bba0:	f8572103 	.word	0xf8572103
   2bba4:	464a3025 	.word	0x464a3025
   2bba8:	f8576099 	.word	0xf8576099
   2bbac:	46410025 	.word	0x46410025
   2bbb0:	f006300c 	.word	0xf006300c
   2bbb4:	4a49fe98 	.word	0x4a49fe98
   2bbb8:	7180f44f 	.word	0x7180f44f
   2bbbc:	f004483d 	.word	0xf004483d
   2bbc0:	4601fe45 	.word	0x4601fe45
   2bbc4:	3025f857 	.word	0x3025f857
   2bbc8:	7180f5c1 	.word	0x7180f5c1
   2bbcc:	4a42681b 	.word	0x4a42681b
   2bbd0:	f0041830 	.word	0xf0041830
   2bbd4:	4837fe3b 	.word	0x4837fe3b
   2bbd8:	6000f8da 	.word	0x6000f8da
   2bbdc:	f988f7ee 	.word	0xf988f7ee
   2bbe0:	46024623 	.word	0x46024623
   2bbe4:	46304933 	.word	0x46304933
   2bbe8:	94009401 	.word	0x94009401
   2bbec:	fe8cf7f2 	.word	0xfe8cf7f2
   2bbf0:	48304606 	.word	0x48304606
   2bbf4:	f97cf7ee 	.word	0xf97cf7ee
   2bbf8:	d15342b0 	.word	0xd15342b0
   2bbfc:	f44f4623 	.word	0xf44f4623
   2bc00:	492c7280 	.word	0x492c7280
   2bc04:	0000f8da 	.word	0x0000f8da
   2bc08:	4400e9cd 	.word	0x4400e9cd
   2bc0c:	ff64f7f2 	.word	0xff64f7f2
   2bc10:	48334606 	.word	0x48334606
   2bc14:	f96cf7ee 	.word	0xf96cf7ee
   2bc18:	db334286 	.word	0xdb334286
   2bc1c:	49254602 	.word	0x49254602
   2bc20:	f006482f 	.word	0xf006482f
   2bc24:	bb68ffb5 	.word	0xbb68ffb5
   2bc28:	49224628 	.word	0x49224628
   2bc2c:	fd8ef7ff 	.word	0xfd8ef7ff
   2bc30:	482ce759 	.word	0x482ce759
   2bc34:	f95cf7ee 	.word	0xf95cf7ee
   2bc38:	4602491e 	.word	0x4602491e
   2bc3c:	f0064829 	.word	0xf0064829
   2bc40:	2800ffa7 	.word	0x2800ffa7
   2bc44:	af4af47f 	.word	0xaf4af47f
   2bc48:	f7f12008 	.word	0xf7f12008
   2bc4c:	f04ffd25 	.word	0xf04ffd25
   2bc50:	e74834ff 	.word	0xe74834ff
   2bc54:	7180f5c4 	.word	0x7180f5c4
   2bc58:	4b231930 	.word	0x4b231930
   2bc5c:	f0044a1a 	.word	0xf0044a1a
   2bc60:	4404fdf5 	.word	0x4404fdf5
   2bc64:	f04fe718 	.word	0xf04fe718
   2bc68:	200934ff 	.word	0x200934ff
   2bc6c:	fd14f7f1 	.word	0xfd14f7f1
   2bc70:	b0034620 	.word	0xb0034620
   2bc74:	8ff0e8bd 	.word	0x8ff0e8bd
   2bc78:	f7f12016 	.word	0xf7f12016
   2bc7c:	f04ffd0d 	.word	0xf04ffd0d
   2bc80:	e73034ff 	.word	0xe73034ff
   2bc84:	f7ee4817 	.word	0xf7ee4817
   2bc88:	490af933 	.word	0x490af933
   2bc8c:	48154602 	.word	0x48154602
   2bc90:	ff7ef006 	.word	0xff7ef006
   2bc94:	2008b930 	.word	0x2008b930
   2bc98:	fcfef7f1 	.word	0xfcfef7f1
   2bc9c:	f04fe723 	.word	0xf04fe723
   2bca0:	e72034ff 	.word	0xe72034ff
   2bca4:	f7f12005 	.word	0xf7f12005
   2bca8:	e71cfcf7 	.word	0xe71cfcf7
   2bcac:	789a0000 	.word	0x789a0000
   2bcb0:	200217f0 	.word	0x200217f0
   2bcb4:	200216f0 	.word	0x200216f0
   2bcb8:	00034cdc 	.word	0x00034cdc
   2bcbc:	00034ce8 	.word	0x00034ce8
   2bcc0:	00034cfc 	.word	0x00034cfc
   2bcc4:	00034d04 	.word	0x00034d04
   2bcc8:	00034cf4 	.word	0x00034cf4
   2bccc:	00034d34 	.word	0x00034d34
   2bcd0:	00033cfc 	.word	0x00033cfc
   2bcd4:	00034d08 	.word	0x00034d08
   2bcd8:	00034d14 	.word	0x00034d14
   2bcdc:	00034d18 	.word	0x00034d18
   2bce0:	00034d28 	.word	0x00034d28
   2bce4:	00034d6c 	.word	0x00034d6c
   2bce8:	00034cec 	.word	0x00034cec
   2bcec:	200216ec 	.word	0x200216ec

0002bcf0 <pdn_interface_close>:
   2bcf0:	43f0e92d 	.word	0x43f0e92d
   2bcf4:	b0834b63 	.word	0xb0834b63
   2bcf8:	f0404383 	.word	0xf0404383
   2bcfc:	f020809d 	.word	0xf020809d
   2bd00:	f42444f1 	.word	0xf42444f1
   2bd04:	2c0914d0 	.word	0x2c0914d0
   2bd08:	8096f300 	.word	0x8096f300
   2bd0c:	f8554d5e 	.word	0xf8554d5e
   2bd10:	28000024 	.word	0x28000024
   2bd14:	8090f000 	.word	0x8090f000
   2bd18:	2b006883 	.word	0x2b006883
   2bd1c:	808cf000 	.word	0x808cf000
   2bd20:	2b036883 	.word	0x2b036883
   2bd24:	f7fed008 	.word	0xf7fed008
   2bd28:	2300fd1f 	.word	0x2300fd1f
   2bd2c:	f8454618 	.word	0xf8454618
   2bd30:	b0033024 	.word	0xb0033024
   2bd34:	83f0e8bd 	.word	0x83f0e8bd
   2bd38:	4a554e54 	.word	0x4a554e54
   2bd3c:	7180f44f 	.word	0x7180f44f
   2bd40:	f0044630 	.word	0xf0044630
   2bd44:	f855fd83 	.word	0xf855fd83
   2bd48:	f5c03024 	.word	0xf5c03024
   2bd4c:	681b7180 	.word	0x681b7180
   2bd50:	44304a50 	.word	0x44304a50
   2bd54:	814cf8df 	.word	0x814cf8df
   2bd58:	fd78f004 	.word	0xfd78f004
   2bd5c:	f8d84630 	.word	0xf8d84630
   2bd60:	27009000 	.word	0x27009000
   2bd64:	f8c4f7ee 	.word	0xf8c4f7ee
   2bd68:	46024631 	.word	0x46024631
   2bd6c:	4648463b 	.word	0x4648463b
   2bd70:	97009701 	.word	0x97009701
   2bd74:	fdc8f7f2 	.word	0xfdc8f7f2
   2bd78:	46304681 	.word	0x46304681
   2bd7c:	f8b8f7ee 	.word	0xf8b8f7ee
   2bd80:	d1764548 	.word	0xd1764548
   2bd84:	e9cd463b 	.word	0xe9cd463b
   2bd88:	f44f7700 	.word	0xf44f7700
   2bd8c:	46317280 	.word	0x46317280
   2bd90:	0000f8d8 	.word	0x0000f8d8
   2bd94:	fea0f7f2 	.word	0xfea0f7f2
   2bd98:	483f4607 	.word	0x483f4607
   2bd9c:	f8a8f7ee 	.word	0xf8a8f7ee
   2bda0:	da4f4287 	.word	0xda4f4287
   2bda4:	f7ee483d 	.word	0xf7ee483d
   2bda8:	4938f8a3 	.word	0x4938f8a3
   2bdac:	483b4602 	.word	0x483b4602
   2bdb0:	feeef006 	.word	0xfeeef006
   2bdb4:	d15c2800 	.word	0xd15c2800
   2bdb8:	f7f12008 	.word	0xf7f12008
   2bdbc:	4a38fc6d 	.word	0x4a38fc6d
   2bdc0:	7180f44f 	.word	0x7180f44f
   2bdc4:	f0044831 	.word	0xf0044831
   2bdc8:	4601fd41 	.word	0x4601fd41
   2bdcc:	3024f855 	.word	0x3024f855
   2bdd0:	7180f5c1 	.word	0x7180f5c1
   2bdd4:	4a2f681b 	.word	0x4a2f681b
   2bdd8:	f0041830 	.word	0xf0041830
   2bddc:	482bfd37 	.word	0x482bfd37
   2bde0:	7000f8d8 	.word	0x7000f8d8
   2bde4:	f7ee2600 	.word	0xf7ee2600
   2bde8:	4633f883 	.word	0x4633f883
   2bdec:	49274602 	.word	0x49274602
   2bdf0:	96014638 	.word	0x96014638
   2bdf4:	f7f29600 	.word	0xf7f29600
   2bdf8:	4607fd87 	.word	0x4607fd87
   2bdfc:	f7ee4823 	.word	0xf7ee4823
   2be00:	42b8f877 	.word	0x42b8f877
   2be04:	4633d139 	.word	0x4633d139
   2be08:	6600e9cd 	.word	0x6600e9cd
   2be0c:	7280f44f 	.word	0x7280f44f
   2be10:	f8d8491e 	.word	0xf8d8491e
   2be14:	f7f20000 	.word	0xf7f20000
   2be18:	4606fe5f 	.word	0x4606fe5f
   2be1c:	f7ee481e 	.word	0xf7ee481e
   2be20:	4286f867 	.word	0x4286f867
   2be24:	4602db16 	.word	0x4602db16
   2be28:	481b4918 	.word	0x481b4918
   2be2c:	feb0f006 	.word	0xfeb0f006
   2be30:	f855b980 	.word	0xf855b980
   2be34:	e7760024 	.word	0xe7760024
   2be38:	f7f12009 	.word	0xf7f12009
   2be3c:	f04ffc2d 	.word	0xf04ffc2d
   2be40:	e77630ff 	.word	0xe77630ff
   2be44:	46314602 	.word	0x46314602
   2be48:	f0064813 	.word	0xf0064813
   2be4c:	2800fea1 	.word	0x2800fea1
   2be50:	e7a7d0b5 	.word	0xe7a7d0b5
   2be54:	f7ee4811 	.word	0xf7ee4811
   2be58:	490cf84b 	.word	0x490cf84b
   2be5c:	480f4602 	.word	0x480f4602
   2be60:	fe96f006 	.word	0xfe96f006
   2be64:	2008b948 	.word	0x2008b948
   2be68:	fc16f7f1 	.word	0xfc16f7f1
   2be6c:	0024f855 	.word	0x0024f855
   2be70:	2005e759 	.word	0x2005e759
   2be74:	fc10f7f1 	.word	0xfc10f7f1
   2be78:	2005e7a1 	.word	0x2005e7a1
   2be7c:	fc0cf7f1 	.word	0xfc0cf7f1
   2be80:	bf00e7d7 	.word	0xbf00e7d7
   2be84:	789a0000 	.word	0x789a0000
   2be88:	200217f0 	.word	0x200217f0
   2be8c:	200216f0 	.word	0x200216f0
   2be90:	00034cd0 	.word	0x00034cd0
   2be94:	00034d14 	.word	0x00034d14
   2be98:	00033cfc 	.word	0x00033cfc
   2be9c:	00034d6c 	.word	0x00034d6c
   2bea0:	00034cdc 	.word	0x00034cdc
   2bea4:	200216ec 	.word	0x200216ec

0002bea8 <pdn_interface_setopt>:
   2bea8:	f240b510 	.word	0xf240b510
   2beac:	42a12402 	.word	0x42a12402
   2beb0:	b153d10b 	.word	0xb153d10b
   2beb4:	b1419902 	.word	0xb1419902
   2beb8:	43814925 	.word	0x43814925
   2bebc:	2009d00b 	.word	0x2009d00b
   2bec0:	fbeaf7f1 	.word	0xfbeaf7f1
   2bec4:	30fff04f 	.word	0x30fff04f
   2bec8:	2016bd10 	.word	0x2016bd10
   2becc:	fbe4f7f1 	.word	0xfbe4f7f1
   2bed0:	30fff04f 	.word	0x30fff04f
   2bed4:	f020bd10 	.word	0xf020bd10
   2bed8:	f42040f1 	.word	0xf42040f1
   2bedc:	280910d0 	.word	0x280910d0
   2bee0:	491cdced 	.word	0x491cdced
   2bee4:	1020f851 	.word	0x1020f851
   2bee8:	d0e82900 	.word	0xd0e82900
   2beec:	2c00688c 	.word	0x2c00688c
   2bef0:	2800d0e5 	.word	0x2800d0e5
   2bef4:	2a01dbe3 	.word	0x2a01dbe3
   2bef8:	202dd001 	.word	0x202dd001
   2befc:	688ae7e6 	.word	0x688ae7e6
   2bf00:	688ab1fa 	.word	0x688ab1fa
   2bf04:	d01c2a03 	.word	0xd01c2a03
   2bf08:	2a04688a 	.word	0x2a04688a
   2bf0c:	9a02d019 	.word	0x9a02d019
   2bf10:	1e420890 	.word	0x1e420890
   2bf14:	d8d82a01 	.word	0xd8d82a01
   2bf18:	07929a02 	.word	0x07929a02
   2bf1c:	681ad1d5 	.word	0x681ad1d5
   2bf20:	d0102a02 	.word	0xd0102a02
   2bf24:	d1d02a0a 	.word	0xd1d02a0a
   2bf28:	28022202 	.word	0x28022202
   2bf2c:	685bd106 	.word	0x685bd106
   2bf30:	d00a2b02 	.word	0xd00a2b02
   2bf34:	d1c82b0a 	.word	0xd1c82b0a
   2bf38:	0202f042 	.word	0x0202f042
   2bf3c:	2000670a 	.word	0x2000670a
   2bf40:	200ee7c4 	.word	0x200ee7c4
   2bf44:	2201e7c2 	.word	0x2201e7c2
   2bf48:	f042e7ef 	.word	0xf042e7ef
   2bf4c:	e7f50201 	.word	0xe7f50201
   2bf50:	789a0000 	.word	0x789a0000
   2bf54:	200217f0 	.word	0x200217f0

0002bf58 <pdn_interface_getopt>:
   2bf58:	43f0e92d 	.word	0x43f0e92d
   2bf5c:	2402f240 	.word	0x2402f240
   2bf60:	42a1b083 	.word	0x42a1b083
   2bf64:	f0409d0a 	.word	0xf0409d0a
   2bf68:	461e80a9 	.word	0x461e80a9
   2bf6c:	f0002b00 	.word	0xf0002b00
   2bf70:	2d0080a5 	.word	0x2d0080a5
   2bf74:	80a2f000 	.word	0x80a2f000
   2bf78:	43834b56 	.word	0x43834b56
   2bf7c:	8084f040 	.word	0x8084f040
   2bf80:	44f1f020 	.word	0x44f1f020
   2bf84:	14d0f424 	.word	0x14d0f424
   2bf88:	dc7d2c09 	.word	0xdc7d2c09
   2bf8c:	f8534b52 	.word	0xf8534b52
   2bf90:	2b003024 	.word	0x2b003024
   2bf94:	6899d078 	.word	0x6899d078
   2bf98:	d0752900 	.word	0xd0752900
   2bf9c:	db732c00 	.word	0xdb732c00
   2bfa0:	d00e2a02 	.word	0xd00e2a02
   2bfa4:	d0082a03 	.word	0xd0082a03
   2bfa8:	d0152a01 	.word	0xd0152a01
   2bfac:	f7f1202d 	.word	0xf7f1202d
   2bfb0:	2000fb73 	.word	0x2000fb73
   2bfb4:	e8bdb003 	.word	0xe8bdb003
   2bfb8:	682b83f0 	.word	0x682b83f0
   2bfbc:	2016bb23 	.word	0x2016bb23
   2bfc0:	682ae7f5 	.word	0x682ae7f5
   2bfc4:	d0fa2a00 	.word	0xd0fa2a00
   2bfc8:	20002201 	.word	0x20002201
   2bfcc:	7033681b 	.word	0x7033681b
   2bfd0:	b003602a 	.word	0xb003602a
   2bfd4:	83f0e8bd 	.word	0x83f0e8bd
   2bfd8:	2a00689a 	.word	0x2a00689a
   2bfdc:	689ad052 	.word	0x689ad052
   2bfe0:	d04f2a04 	.word	0xd04f2a04
   2bfe4:	2a07682a 	.word	0x2a07682a
   2bfe8:	f012d9e9 	.word	0xf012d9e9
   2bfec:	d1e60203 	.word	0xd1e60203
   2bff0:	07996f1b 	.word	0x07996f1b
   2bff4:	2104d45d 	.word	0x2104d45d
   2bff8:	d50207db 	.word	0xd50207db
   2bffc:	50b32302 	.word	0x50b32302
   2c000:	602a460a 	.word	0x602a460a
   2c004:	e7d52000 	.word	0xe7d52000
   2c008:	f44f4a34 	.word	0xf44f4a34
   2c00c:	48347180 	.word	0x48347180
   2c010:	80d8f8df 	.word	0x80d8f8df
   2c014:	fc1af004 	.word	0xfc1af004
   2c018:	f8d84831 	.word	0xf8d84831
   2c01c:	27009000 	.word	0x27009000
   2c020:	ff66f7ed 	.word	0xff66f7ed
   2c024:	4602463b 	.word	0x4602463b
   2c028:	4648492d 	.word	0x4648492d
   2c02c:	97009701 	.word	0x97009701
   2c030:	fc6af7f2 	.word	0xfc6af7f2
   2c034:	482a4681 	.word	0x482a4681
   2c038:	ff5af7ed 	.word	0xff5af7ed
   2c03c:	d1434548 	.word	0xd1434548
   2c040:	e9cd463b 	.word	0xe9cd463b
   2c044:	f44f7700 	.word	0xf44f7700
   2c048:	49257280 	.word	0x49257280
   2c04c:	0000f8d8 	.word	0x0000f8d8
   2c050:	fd42f7f2 	.word	0xfd42f7f2
   2c054:	48234607 	.word	0x48234607
   2c058:	ff4af7ed 	.word	0xff4af7ed
   2c05c:	db194287 	.word	0xdb194287
   2c060:	491f4602 	.word	0x491f4602
   2c064:	f006481f 	.word	0xf006481f
   2c068:	4607fd93 	.word	0x4607fd93
   2c06c:	4620b990 	.word	0x4620b990
   2c070:	f7ff491b 	.word	0xf7ff491b
   2c074:	2800fb35 	.word	0x2800fb35
   2c078:	2301db99 	.word	0x2301db99
   2c07c:	46387030 	.word	0x46387030
   2c080:	e797602b 	.word	0xe797602b
   2c084:	e792200e 	.word	0xe792200e
   2c088:	f7f12009 	.word	0xf7f12009
   2c08c:	f04ffb05 	.word	0xf04ffb05
   2c090:	e78f30ff 	.word	0xe78f30ff
   2c094:	f7ed4814 	.word	0xf7ed4814
   2c098:	4911ff2b 	.word	0x4911ff2b
   2c09c:	48124602 	.word	0x48124602
   2c0a0:	fd76f006 	.word	0xfd76f006
   2c0a4:	2008b980 	.word	0x2008b980
   2c0a8:	faf6f7f1 	.word	0xfaf6f7f1
   2c0ac:	30fff04f 	.word	0x30fff04f
   2c0b0:	220ae77d 	.word	0x220ae77d
   2c0b4:	60322108 	.word	0x60322108
   2c0b8:	e79d2204 	.word	0xe79d2204
   2c0bc:	f7f12016 	.word	0xf7f12016
   2c0c0:	f04ffaeb 	.word	0xf04ffaeb
   2c0c4:	e77530ff 	.word	0xe77530ff
   2c0c8:	f7f12005 	.word	0xf7f12005
   2c0cc:	f04ffae5 	.word	0xf04ffae5
   2c0d0:	e76c30ff 	.word	0xe76c30ff
   2c0d4:	789a0000 	.word	0x789a0000
   2c0d8:	200217f0 	.word	0x200217f0
   2c0dc:	00034d3c 	.word	0x00034d3c
   2c0e0:	200216f0 	.word	0x200216f0
   2c0e4:	00034d48 	.word	0x00034d48
   2c0e8:	00034d6c 	.word	0x00034d6c
   2c0ec:	200216ec 	.word	0x200216ec

0002c0f0 <pdn_interface_pdn_id_get>:
   2c0f0:	f0002900 	.word	0xf0002900
   2c0f4:	e92d83b9 	.word	0xe92d83b9
   2c0f8:	4ca343f0 	.word	0x4ca343f0
   2c0fc:	b0832802 	.word	0xb0832802
   2c100:	6823460d 	.word	0x6823460d
   2c104:	8094f000 	.word	0x8094f000
   2c108:	d03f280a 	.word	0xd03f280a
   2c10c:	689bb11b 	.word	0x689bb11b
   2c110:	f0002b03 	.word	0xf0002b03
   2c114:	68638127 	.word	0x68638127
   2c118:	689bb11b 	.word	0x689bb11b
   2c11c:	f0002b03 	.word	0xf0002b03
   2c120:	68a38110 	.word	0x68a38110
   2c124:	689bb11b 	.word	0x689bb11b
   2c128:	f0002b03 	.word	0xf0002b03
   2c12c:	68e380f9 	.word	0x68e380f9
   2c130:	689bb11b 	.word	0x689bb11b
   2c134:	f0002b03 	.word	0xf0002b03
   2c138:	692380e2 	.word	0x692380e2
   2c13c:	689bb11b 	.word	0x689bb11b
   2c140:	f0002b03 	.word	0xf0002b03
   2c144:	69638123 	.word	0x69638123
   2c148:	689bb11b 	.word	0x689bb11b
   2c14c:	f0002b03 	.word	0xf0002b03
   2c150:	69a38161 	.word	0x69a38161
   2c154:	689bb11b 	.word	0x689bb11b
   2c158:	f0002b03 	.word	0xf0002b03
   2c15c:	69e3814a 	.word	0x69e3814a
   2c160:	689bb11b 	.word	0x689bb11b
   2c164:	f0002b03 	.word	0xf0002b03
   2c168:	6a238133 	.word	0x6a238133
   2c16c:	689bb11b 	.word	0x689bb11b
   2c170:	f0002b03 	.word	0xf0002b03
   2c174:	6a63811c 	.word	0x6a63811c
   2c178:	689bb11b 	.word	0x689bb11b
   2c17c:	f0002b03 	.word	0xf0002b03
   2c180:	f04f80ad 	.word	0xf04f80ad
   2c184:	b00330ff 	.word	0xb00330ff
   2c188:	83f0e8bd 	.word	0x83f0e8bd
   2c18c:	689bb11b 	.word	0x689bb11b
   2c190:	f0002b03 	.word	0xf0002b03
   2c194:	68638335 	.word	0x68638335
   2c198:	689bb11b 	.word	0x689bb11b
   2c19c:	f0002b03 	.word	0xf0002b03
   2c1a0:	68a382fd 	.word	0x68a382fd
   2c1a4:	689bb11b 	.word	0x689bb11b
   2c1a8:	f0002b03 	.word	0xf0002b03
   2c1ac:	68e382d5 	.word	0x68e382d5
   2c1b0:	689eb11b 	.word	0x689eb11b
   2c1b4:	f0002e03 	.word	0xf0002e03
   2c1b8:	692381f0 	.word	0x692381f0
   2c1bc:	689bb11b 	.word	0x689bb11b
   2c1c0:	f0002b03 	.word	0xf0002b03
   2c1c4:	69638203 	.word	0x69638203
   2c1c8:	689bb11b 	.word	0x689bb11b
   2c1cc:	f0002b03 	.word	0xf0002b03
   2c1d0:	69a38215 	.word	0x69a38215
   2c1d4:	689bb11b 	.word	0x689bb11b
   2c1d8:	f0002b03 	.word	0xf0002b03
   2c1dc:	69e38227 	.word	0x69e38227
   2c1e0:	689bb11b 	.word	0x689bb11b
   2c1e4:	f0002b03 	.word	0xf0002b03
   2c1e8:	6a238239 	.word	0x6a238239
   2c1ec:	689bb11b 	.word	0x689bb11b
   2c1f0:	f0002b03 	.word	0xf0002b03
   2c1f4:	6a63824d 	.word	0x6a63824d
   2c1f8:	d0c22b00 	.word	0xd0c22b00
   2c1fc:	2b03689b 	.word	0x2b03689b
   2c200:	4628d1bf 	.word	0x4628d1bf
   2c204:	fe74f7ed 	.word	0xfe74f7ed
   2c208:	6a604606 	.word	0x6a604606
   2c20c:	f7ed300c 	.word	0xf7ed300c
   2c210:	42b0fe6f 	.word	0x42b0fe6f
   2c214:	6a61d1b5 	.word	0x6a61d1b5
   2c218:	310c4628 	.word	0x310c4628
   2c21c:	fe5ef7ed 	.word	0xfe5ef7ed
   2c220:	d1ae2800 	.word	0xd1ae2800
   2c224:	6f1a6a63 	.word	0x6f1a6a63
   2c228:	d5aa0792 	.word	0xd5aa0792
   2c22c:	e11a2609 	.word	0xe11a2609
   2c230:	689bb11b 	.word	0x689bb11b
   2c234:	f0002b03 	.word	0xf0002b03
   2c238:	686382fd 	.word	0x686382fd
   2c23c:	689bb11b 	.word	0x689bb11b
   2c240:	f0002b03 	.word	0xf0002b03
   2c244:	68a382c5 	.word	0x68a382c5
   2c248:	689bb11b 	.word	0x689bb11b
   2c24c:	f0002b03 	.word	0xf0002b03
   2c250:	68e38269 	.word	0x68e38269
   2c254:	689eb11b 	.word	0x689eb11b
   2c258:	f0002e03 	.word	0xf0002e03
   2c25c:	692380ec 	.word	0x692380ec
   2c260:	689bb11b 	.word	0x689bb11b
   2c264:	f0002b03 	.word	0xf0002b03
   2c268:	6963814a 	.word	0x6963814a
   2c26c:	689bb11b 	.word	0x689bb11b
   2c270:	f0002b03 	.word	0xf0002b03
   2c274:	69a3815e 	.word	0x69a3815e
   2c278:	689bb11b 	.word	0x689bb11b
   2c27c:	f0002b03 	.word	0xf0002b03
   2c280:	69e38172 	.word	0x69e38172
   2c284:	689bb11b 	.word	0x689bb11b
   2c288:	f0002b03 	.word	0xf0002b03
   2c28c:	6a23821b 	.word	0x6a23821b
   2c290:	689bb11b 	.word	0x689bb11b
   2c294:	f0002b03 	.word	0xf0002b03
   2c298:	6a63822d 	.word	0x6a63822d
   2c29c:	f43f2b00 	.word	0xf43f2b00
   2c2a0:	689baf70 	.word	0x689baf70
   2c2a4:	f47f2b03 	.word	0xf47f2b03
   2c2a8:	4628af6c 	.word	0x4628af6c
   2c2ac:	fe20f7ed 	.word	0xfe20f7ed
   2c2b0:	6a604606 	.word	0x6a604606
   2c2b4:	f7ed300c 	.word	0xf7ed300c
   2c2b8:	4286fe1b 	.word	0x4286fe1b
   2c2bc:	af61f47f 	.word	0xaf61f47f
   2c2c0:	46286a61 	.word	0x46286a61
   2c2c4:	f7ed310c 	.word	0xf7ed310c
   2c2c8:	2800fe09 	.word	0x2800fe09
   2c2cc:	af59f47f 	.word	0xaf59f47f
   2c2d0:	6f1a6a63 	.word	0x6f1a6a63
   2c2d4:	f57f07d2 	.word	0xf57f07d2
   2c2d8:	e7a7af54 	.word	0xe7a7af54
   2c2dc:	f7ed4628 	.word	0xf7ed4628
   2c2e0:	4606fe07 	.word	0x4606fe07
   2c2e4:	300c6a60 	.word	0x300c6a60
   2c2e8:	fe02f7ed 	.word	0xfe02f7ed
   2c2ec:	f47f42b0 	.word	0xf47f42b0
   2c2f0:	6a61af48 	.word	0x6a61af48
   2c2f4:	310c4628 	.word	0x310c4628
   2c2f8:	fdf0f7ed 	.word	0xfdf0f7ed
   2c2fc:	4628e741 	.word	0x4628e741
   2c300:	fdf6f7ed 	.word	0xfdf6f7ed
   2c304:	68e04606 	.word	0x68e04606
   2c308:	f7ed300c 	.word	0xf7ed300c
   2c30c:	4286fdf1 	.word	0x4286fdf1
   2c310:	af13f47f 	.word	0xaf13f47f
   2c314:	462868e1 	.word	0x462868e1
   2c318:	f7ed310c 	.word	0xf7ed310c
   2c31c:	e70cfddf 	.word	0xe70cfddf
   2c320:	f7ed4628 	.word	0xf7ed4628
   2c324:	4606fde5 	.word	0x4606fde5
   2c328:	300c68a0 	.word	0x300c68a0
   2c32c:	fde0f7ed 	.word	0xfde0f7ed
   2c330:	f47f4286 	.word	0xf47f4286
   2c334:	68a1aefc 	.word	0x68a1aefc
   2c338:	310c4628 	.word	0x310c4628
   2c33c:	fdcef7ed 	.word	0xfdcef7ed
   2c340:	4628e6f5 	.word	0x4628e6f5
   2c344:	fdd4f7ed 	.word	0xfdd4f7ed
   2c348:	68604606 	.word	0x68604606
   2c34c:	f7ed300c 	.word	0xf7ed300c
   2c350:	4286fdcf 	.word	0x4286fdcf
   2c354:	aee5f47f 	.word	0xaee5f47f
   2c358:	46286861 	.word	0x46286861
   2c35c:	f7ed310c 	.word	0xf7ed310c
   2c360:	e6defdbd 	.word	0xe6defdbd
   2c364:	f7ed4608 	.word	0xf7ed4608
   2c368:	4606fdc3 	.word	0x4606fdc3
   2c36c:	300c6820 	.word	0x300c6820
   2c370:	fdbef7ed 	.word	0xfdbef7ed
   2c374:	f47f4286 	.word	0xf47f4286
   2c378:	6821aece 	.word	0x6821aece
   2c37c:	310c4628 	.word	0x310c4628
   2c380:	fdacf7ed 	.word	0xfdacf7ed
   2c384:	bf00e6c7 	.word	0xbf00e6c7
   2c388:	200217f0 	.word	0x200217f0
   2c38c:	f7ed4628 	.word	0xf7ed4628
   2c390:	4606fdaf 	.word	0x4606fdaf
   2c394:	300c6920 	.word	0x300c6920
   2c398:	fdaaf7ed 	.word	0xfdaaf7ed
   2c39c:	f47f4286 	.word	0xf47f4286
   2c3a0:	6921aed2 	.word	0x6921aed2
   2c3a4:	310c4628 	.word	0x310c4628
   2c3a8:	fd98f7ed 	.word	0xfd98f7ed
   2c3ac:	4628e6cb 	.word	0x4628e6cb
   2c3b0:	fd9ef7ed 	.word	0xfd9ef7ed
   2c3b4:	6a204606 	.word	0x6a204606
   2c3b8:	f7ed300c 	.word	0xf7ed300c
   2c3bc:	4286fd99 	.word	0x4286fd99
   2c3c0:	aed9f47f 	.word	0xaed9f47f
   2c3c4:	46286a21 	.word	0x46286a21
   2c3c8:	f7ed310c 	.word	0xf7ed310c
   2c3cc:	e6d2fd87 	.word	0xe6d2fd87
   2c3d0:	f7ed4628 	.word	0xf7ed4628
   2c3d4:	4606fd8d 	.word	0x4606fd8d
   2c3d8:	300c69e0 	.word	0x300c69e0
   2c3dc:	fd88f7ed 	.word	0xfd88f7ed
   2c3e0:	f47f4286 	.word	0xf47f4286
   2c3e4:	69e1aec2 	.word	0x69e1aec2
   2c3e8:	310c4628 	.word	0x310c4628
   2c3ec:	fd76f7ed 	.word	0xfd76f7ed
   2c3f0:	4628e6bb 	.word	0x4628e6bb
   2c3f4:	fd7cf7ed 	.word	0xfd7cf7ed
   2c3f8:	69a04606 	.word	0x69a04606
   2c3fc:	f7ed300c 	.word	0xf7ed300c
   2c400:	4286fd77 	.word	0x4286fd77
   2c404:	aeabf47f 	.word	0xaeabf47f
   2c408:	462869a1 	.word	0x462869a1
   2c40c:	f7ed310c 	.word	0xf7ed310c
   2c410:	e6a4fd65 	.word	0xe6a4fd65
   2c414:	f7ed4628 	.word	0xf7ed4628
   2c418:	4606fd6b 	.word	0x4606fd6b
   2c41c:	300c6960 	.word	0x300c6960
   2c420:	fd66f7ed 	.word	0xfd66f7ed
   2c424:	f47f4286 	.word	0xf47f4286
   2c428:	6961ae94 	.word	0x6961ae94
   2c42c:	310c4628 	.word	0x310c4628
   2c430:	fd54f7ed 	.word	0xfd54f7ed
   2c434:	4628e68d 	.word	0x4628e68d
   2c438:	fd5af7ed 	.word	0xfd5af7ed
   2c43c:	68e04607 	.word	0x68e04607
   2c440:	f7ed300c 	.word	0xf7ed300c
   2c444:	4287fd55 	.word	0x4287fd55
   2c448:	af09f47f 	.word	0xaf09f47f
   2c44c:	462868e1 	.word	0x462868e1
   2c450:	f7ed310c 	.word	0xf7ed310c
   2c454:	2800fd43 	.word	0x2800fd43
   2c458:	af01f47f 	.word	0xaf01f47f
   2c45c:	6f1a68e3 	.word	0x6f1a68e3
   2c460:	f57f07d1 	.word	0xf57f07d1
   2c464:	6858aefc 	.word	0x6858aefc
   2c468:	f47f1c43 	.word	0xf47f1c43
   2c46c:	4dc6ae8c 	.word	0x4dc6ae8c
   2c470:	f44f4ac6 	.word	0xf44f4ac6
   2c474:	46287180 	.word	0x46287180
   2c478:	f9e8f004 	.word	0xf9e8f004
   2c47c:	3026f854 	.word	0x3026f854
   2c480:	7180f5c0 	.word	0x7180f5c0
   2c484:	4ac2681b 	.word	0x4ac2681b
   2c488:	f8df4428 	.word	0xf8df4428
   2c48c:	f004830c 	.word	0xf004830c
   2c490:	4628f9dd 	.word	0x4628f9dd
   2c494:	9000f8d8 	.word	0x9000f8d8
   2c498:	f7ed2700 	.word	0xf7ed2700
   2c49c:	4629fd29 	.word	0x4629fd29
   2c4a0:	463b4602 	.word	0x463b4602
   2c4a4:	97014648 	.word	0x97014648
   2c4a8:	f7f29700 	.word	0xf7f29700
   2c4ac:	4681fa2d 	.word	0x4681fa2d
   2c4b0:	f7ed4628 	.word	0xf7ed4628
   2c4b4:	4548fd1d 	.word	0x4548fd1d
   2c4b8:	81e9f040 	.word	0x81e9f040
   2c4bc:	f44f463b 	.word	0xf44f463b
   2c4c0:	e9cd7280 	.word	0xe9cd7280
   2c4c4:	46297700 	.word	0x46297700
   2c4c8:	0000f8d8 	.word	0x0000f8d8
   2c4cc:	fb04f7f2 	.word	0xfb04f7f2
   2c4d0:	48b04607 	.word	0x48b04607
   2c4d4:	fd0cf7ed 	.word	0xfd0cf7ed
   2c4d8:	46024287 	.word	0x46024287
   2c4dc:	81c7f2c0 	.word	0x81c7f2c0
   2c4e0:	48ac4629 	.word	0x48ac4629
   2c4e4:	fb54f006 	.word	0xfb54f006
   2c4e8:	f0402800 	.word	0xf0402800
   2c4ec:	462981c0 	.word	0x462981c0
   2c4f0:	f7ff4630 	.word	0xf7ff4630
   2c4f4:	f854f92b 	.word	0xf854f92b
   2c4f8:	68583026 	.word	0x68583026
   2c4fc:	4628e643 	.word	0x4628e643
   2c500:	fcf6f7ed 	.word	0xfcf6f7ed
   2c504:	69204606 	.word	0x69204606
   2c508:	f7ed300c 	.word	0xf7ed300c
   2c50c:	4286fcf1 	.word	0x4286fcf1
   2c510:	aeabf47f 	.word	0xaeabf47f
   2c514:	46286921 	.word	0x46286921
   2c518:	f7ed310c 	.word	0xf7ed310c
   2c51c:	2800fcdf 	.word	0x2800fcdf
   2c520:	aea3f47f 	.word	0xaea3f47f
   2c524:	6f1a6923 	.word	0x6f1a6923
   2c528:	f57f07d2 	.word	0xf57f07d2
   2c52c:	2604ae9e 	.word	0x2604ae9e
   2c530:	4628e799 	.word	0x4628e799
   2c534:	fcdcf7ed 	.word	0xfcdcf7ed
   2c538:	69604606 	.word	0x69604606
   2c53c:	f7ed300c 	.word	0xf7ed300c
   2c540:	4286fcd7 	.word	0x4286fcd7
   2c544:	ae97f47f 	.word	0xae97f47f
   2c548:	46286961 	.word	0x46286961
   2c54c:	f7ed310c 	.word	0xf7ed310c
   2c550:	2800fcc5 	.word	0x2800fcc5
   2c554:	ae8ff47f 	.word	0xae8ff47f
   2c558:	6f1a6963 	.word	0x6f1a6963
   2c55c:	f57f07d7 	.word	0xf57f07d7
   2c560:	2605ae8a 	.word	0x2605ae8a
   2c564:	4628e77f 	.word	0x4628e77f
   2c568:	fcc2f7ed 	.word	0xfcc2f7ed
   2c56c:	69a04606 	.word	0x69a04606
   2c570:	f7ed300c 	.word	0xf7ed300c
   2c574:	4286fcbd 	.word	0x4286fcbd
   2c578:	ae83f47f 	.word	0xae83f47f
   2c57c:	462869a1 	.word	0x462869a1
   2c580:	f7ed310c 	.word	0xf7ed310c
   2c584:	2800fcab 	.word	0x2800fcab
   2c588:	ae7bf47f 	.word	0xae7bf47f
   2c58c:	6f1a69a3 	.word	0x6f1a69a3
   2c590:	f57f07d6 	.word	0xf57f07d6
   2c594:	2606ae76 	.word	0x2606ae76
   2c598:	4628e765 	.word	0x4628e765
   2c59c:	fca8f7ed 	.word	0xfca8f7ed
   2c5a0:	68e04607 	.word	0x68e04607
   2c5a4:	f7ed300c 	.word	0xf7ed300c
   2c5a8:	4287fca3 	.word	0x4287fca3
   2c5ac:	ae05f47f 	.word	0xae05f47f
   2c5b0:	462868e1 	.word	0x462868e1
   2c5b4:	f7ed310c 	.word	0xf7ed310c
   2c5b8:	2800fc91 	.word	0x2800fc91
   2c5bc:	adfdf47f 	.word	0xadfdf47f
   2c5c0:	6f1a68e3 	.word	0x6f1a68e3
   2c5c4:	f53f0791 	.word	0xf53f0791
   2c5c8:	e5f6af4e 	.word	0xe5f6af4e
   2c5cc:	f7ed4628 	.word	0xf7ed4628
   2c5d0:	4606fc8f 	.word	0x4606fc8f
   2c5d4:	300c6920 	.word	0x300c6920
   2c5d8:	fc8af7ed 	.word	0xfc8af7ed
   2c5dc:	f47f4286 	.word	0xf47f4286
   2c5e0:	6921adf2 	.word	0x6921adf2
   2c5e4:	310c4628 	.word	0x310c4628
   2c5e8:	fc78f7ed 	.word	0xfc78f7ed
   2c5ec:	f47f2800 	.word	0xf47f2800
   2c5f0:	6923adea 	.word	0x6923adea
   2c5f4:	07926f1a 	.word	0x07926f1a
   2c5f8:	e5e4d499 	.word	0xe5e4d499
   2c5fc:	f7ed4628 	.word	0xf7ed4628
   2c600:	4606fc77 	.word	0x4606fc77
   2c604:	300c6960 	.word	0x300c6960
   2c608:	fc72f7ed 	.word	0xfc72f7ed
   2c60c:	f47f4286 	.word	0xf47f4286
   2c610:	6961ade0 	.word	0x6961ade0
   2c614:	310c4628 	.word	0x310c4628
   2c618:	fc60f7ed 	.word	0xfc60f7ed
   2c61c:	f47f2800 	.word	0xf47f2800
   2c620:	6963add8 	.word	0x6963add8
   2c624:	07976f1a 	.word	0x07976f1a
   2c628:	e5d2d49b 	.word	0xe5d2d49b
   2c62c:	f7ed4628 	.word	0xf7ed4628
   2c630:	4606fc5f 	.word	0x4606fc5f
   2c634:	300c69a0 	.word	0x300c69a0
   2c638:	fc5af7ed 	.word	0xfc5af7ed
   2c63c:	f47f4286 	.word	0xf47f4286
   2c640:	69a1adce 	.word	0x69a1adce
   2c644:	310c4628 	.word	0x310c4628
   2c648:	fc48f7ed 	.word	0xfc48f7ed
   2c64c:	f47f2800 	.word	0xf47f2800
   2c650:	69a3adc6 	.word	0x69a3adc6
   2c654:	07966f1a 	.word	0x07966f1a
   2c658:	e5c0d49d 	.word	0xe5c0d49d
   2c65c:	f7ed4628 	.word	0xf7ed4628
   2c660:	4606fc47 	.word	0x4606fc47
   2c664:	300c69e0 	.word	0x300c69e0
   2c668:	fc42f7ed 	.word	0xfc42f7ed
   2c66c:	f47f4286 	.word	0xf47f4286
   2c670:	69e1adbc 	.word	0x69e1adbc
   2c674:	310c4628 	.word	0x310c4628
   2c678:	fc30f7ed 	.word	0xfc30f7ed
   2c67c:	f47f2800 	.word	0xf47f2800
   2c680:	69e3adb4 	.word	0x69e3adb4
   2c684:	07906f1a 	.word	0x07906f1a
   2c688:	adaff57f 	.word	0xadaff57f
   2c68c:	e6ea2607 	.word	0xe6ea2607
   2c690:	f7ed4628 	.word	0xf7ed4628
   2c694:	4606fc2d 	.word	0x4606fc2d
   2c698:	300c6a20 	.word	0x300c6a20
   2c69c:	fc28f7ed 	.word	0xfc28f7ed
   2c6a0:	f47f4286 	.word	0xf47f4286
   2c6a4:	6a21ada8 	.word	0x6a21ada8
   2c6a8:	310c4628 	.word	0x310c4628
   2c6ac:	fc16f7ed 	.word	0xfc16f7ed
   2c6b0:	f47f2800 	.word	0xf47f2800
   2c6b4:	6a23ada0 	.word	0x6a23ada0
   2c6b8:	07916f1a 	.word	0x07916f1a
   2c6bc:	ad9bf57f 	.word	0xad9bf57f
   2c6c0:	e6d02608 	.word	0xe6d02608
   2c6c4:	f7ed4628 	.word	0xf7ed4628
   2c6c8:	4606fc13 	.word	0x4606fc13
   2c6cc:	300c69e0 	.word	0x300c69e0
   2c6d0:	fc0ef7ed 	.word	0xfc0ef7ed
   2c6d4:	f47f4286 	.word	0xf47f4286
   2c6d8:	69e1adda 	.word	0x69e1adda
   2c6dc:	310c4628 	.word	0x310c4628
   2c6e0:	fbfcf7ed 	.word	0xfbfcf7ed
   2c6e4:	f47f2800 	.word	0xf47f2800
   2c6e8:	69e3add2 	.word	0x69e3add2
   2c6ec:	07d06f1a 	.word	0x07d06f1a
   2c6f0:	e5ccd4cc 	.word	0xe5ccd4cc
   2c6f4:	f7ed4628 	.word	0xf7ed4628
   2c6f8:	4606fbfb 	.word	0x4606fbfb
   2c6fc:	300c6a20 	.word	0x300c6a20
   2c700:	fbf6f7ed 	.word	0xfbf6f7ed
   2c704:	f47f4286 	.word	0xf47f4286
   2c708:	6a21adc8 	.word	0x6a21adc8
   2c70c:	310c4628 	.word	0x310c4628
   2c710:	fbe4f7ed 	.word	0xfbe4f7ed
   2c714:	f47f2800 	.word	0xf47f2800
   2c718:	6a23adc0 	.word	0x6a23adc0
   2c71c:	07d16f1a 	.word	0x07d16f1a
   2c720:	e5bad4ce 	.word	0xe5bad4ce
   2c724:	f7ed4628 	.word	0xf7ed4628
   2c728:	4606fbe3 	.word	0x4606fbe3
   2c72c:	300c68a0 	.word	0x300c68a0
   2c730:	fbdef7ed 	.word	0xfbdef7ed
   2c734:	f47f4286 	.word	0xf47f4286
   2c738:	68a1ad8c 	.word	0x68a1ad8c
   2c73c:	310c4628 	.word	0x310c4628
   2c740:	fbccf7ed 	.word	0xfbccf7ed
   2c744:	f47f2800 	.word	0xf47f2800
   2c748:	68a3ad84 	.word	0x68a3ad84
   2c74c:	07d06f1a 	.word	0x07d06f1a
   2c750:	ad7ff57f 	.word	0xad7ff57f
   2c754:	e6862602 	.word	0xe6862602
   2c758:	f7ed4628 	.word	0xf7ed4628
   2c75c:	4606fbc9 	.word	0x4606fbc9
   2c760:	300c68a0 	.word	0x300c68a0
   2c764:	fbc4f7ed 	.word	0xfbc4f7ed
   2c768:	f47f4286 	.word	0xf47f4286
   2c76c:	68a1ad20 	.word	0x68a1ad20
   2c770:	310c4628 	.word	0x310c4628
   2c774:	fbb2f7ed 	.word	0xfbb2f7ed
   2c778:	f47f2800 	.word	0xf47f2800
   2c77c:	68a3ad18 	.word	0x68a3ad18
   2c780:	07906f1a 	.word	0x07906f1a
   2c784:	e512d4e6 	.word	0xe512d4e6
   2c788:	200216f0 	.word	0x200216f0
   2c78c:	00034d18 	.word	0x00034d18
   2c790:	00034d14 	.word	0x00034d14
   2c794:	00034d28 	.word	0x00034d28
   2c798:	200216ec 	.word	0x200216ec
   2c79c:	f7ed4628 	.word	0xf7ed4628
   2c7a0:	4606fba7 	.word	0x4606fba7
   2c7a4:	300c6860 	.word	0x300c6860
   2c7a8:	fba2f7ed 	.word	0xfba2f7ed
   2c7ac:	f47f4286 	.word	0xf47f4286
   2c7b0:	6861acf8 	.word	0x6861acf8
   2c7b4:	310c4628 	.word	0x310c4628
   2c7b8:	fb90f7ed 	.word	0xfb90f7ed
   2c7bc:	f47f2800 	.word	0xf47f2800
   2c7c0:	6863acf0 	.word	0x6863acf0
   2c7c4:	07966f1a 	.word	0x07966f1a
   2c7c8:	acebf57f 	.word	0xacebf57f
   2c7cc:	e64a2601 	.word	0xe64a2601
   2c7d0:	f7ed4628 	.word	0xf7ed4628
   2c7d4:	4606fb8d 	.word	0x4606fb8d
   2c7d8:	300c6860 	.word	0x300c6860
   2c7dc:	fb88f7ed 	.word	0xfb88f7ed
   2c7e0:	f47f4286 	.word	0xf47f4286
   2c7e4:	6861ad30 	.word	0x6861ad30
   2c7e8:	310c4628 	.word	0x310c4628
   2c7ec:	fb76f7ed 	.word	0xfb76f7ed
   2c7f0:	f47f2800 	.word	0xf47f2800
   2c7f4:	6863ad28 	.word	0x6863ad28
   2c7f8:	07d66f1a 	.word	0x07d66f1a
   2c7fc:	e522d4e6 	.word	0xe522d4e6
   2c800:	f7ed4608 	.word	0xf7ed4608
   2c804:	4606fb75 	.word	0x4606fb75
   2c808:	300c6820 	.word	0x300c6820
   2c80c:	fb70f7ed 	.word	0xfb70f7ed
   2c810:	f47f4286 	.word	0xf47f4286
   2c814:	6821acc0 	.word	0x6821acc0
   2c818:	310c4628 	.word	0x310c4628
   2c81c:	fb5ef7ed 	.word	0xfb5ef7ed
   2c820:	28004606 	.word	0x28004606
   2c824:	acb7f47f 	.word	0xacb7f47f
   2c828:	6f1a6823 	.word	0x6f1a6823
   2c82c:	f53f0797 	.word	0xf53f0797
   2c830:	e4b0ae1a 	.word	0xe4b0ae1a
   2c834:	f7ed4608 	.word	0xf7ed4608
   2c838:	4606fb5b 	.word	0x4606fb5b
   2c83c:	300c6820 	.word	0x300c6820
   2c840:	fb56f7ed 	.word	0xfb56f7ed
   2c844:	f47f4286 	.word	0xf47f4286
   2c848:	6821acf8 	.word	0x6821acf8
   2c84c:	310c4628 	.word	0x310c4628
   2c850:	fb44f7ed 	.word	0xfb44f7ed
   2c854:	28004606 	.word	0x28004606
   2c858:	aceff47f 	.word	0xaceff47f
   2c85c:	6f1a6823 	.word	0x6f1a6823
   2c860:	f53f07d7 	.word	0xf53f07d7
   2c864:	e4e8ae00 	.word	0xe4e8ae00
   2c868:	30fff04f 	.word	0x30fff04f
   2c86c:	480b4770 	.word	0x480b4770
   2c870:	fb3ef7ed 	.word	0xfb3ef7ed
   2c874:	4602490a 	.word	0x4602490a
   2c878:	f0064808 	.word	0xf0064808
   2c87c:	b930f989 	.word	0xb930f989
   2c880:	f7f02008 	.word	0xf7f02008
   2c884:	f854ff09 	.word	0xf854ff09
   2c888:	68583026 	.word	0x68583026
   2c88c:	2005e47b 	.word	0x2005e47b
   2c890:	ff02f7f0 	.word	0xff02f7f0
   2c894:	3026f854 	.word	0x3026f854
   2c898:	e4746858 	.word	0xe4746858
   2c89c:	00034d6c 	.word	0x00034d6c
   2c8a0:	200216f0 	.word	0x200216f0

0002c8a4 <bsd_platform_getaddrinfo>:
   2c8a4:	be04f7f7 	.word	0xbe04f7f7

0002c8a8 <bsd_platform_freeaddrinfo>:
   2c8a8:	bef8f7f7 	.word	0xbef8f7f7

0002c8ac <bsd_platform_poll>:
   2c8ac:	43f0e92d 	.word	0x43f0e92d
   2c8b0:	72e2ea42 	.word	0x72e2ea42
   2c8b4:	9200b083 	.word	0x9200b083
   2c8b8:	d0482800 	.word	0xd0482800
   2c8bc:	2b071e4b 	.word	0x2b071e4b
   2c8c0:	4680d845 	.word	0x4680d845
   2c8c4:	24004605 	.word	0x24004605
   2c8c8:	07c1eb00 	.word	0x07c1eb00
   2c8cc:	682888ab 	.word	0x682888ab
   2c8d0:	0303f003 	.word	0x0303f003
   2c8d4:	f043a901 	.word	0xf043a901
   2c8d8:	f7f6061c 	.word	0xf7f6061c
   2c8dc:	9b01fd1f 	.word	0x9b01fd1f
   2c8e0:	40333508 	.word	0x40333508
   2c8e4:	3c02f825 	.word	0x3c02f825
   2c8e8:	3401b103 	.word	0x3401b103
   2c8ec:	d1ed42af 	.word	0xd1ed42af
   2c8f0:	4669bb9c 	.word	0x4669bb9c
   2c8f4:	f7f04640 	.word	0xf7f04640
   2c8f8:	4607fe3f 	.word	0x4607fe3f
   2c8fc:	283cb108 	.word	0x283cb108
   2c900:	46c1d11d 	.word	0x46c1d11d
   2c904:	f8b92600 	.word	0xf8b92600
   2c908:	f8d93004 	.word	0xf8d93004
   2c90c:	f0030000 	.word	0xf0030000
   2c910:	a9010303 	.word	0xa9010303
   2c914:	041cf043 	.word	0x041cf043
   2c918:	fd00f7f6 	.word	0xfd00f7f6
   2c91c:	f1099b01 	.word	0xf1099b01
   2c920:	40230908 	.word	0x40230908
   2c924:	3c02f829 	.word	0x3c02f829
   2c928:	3601b103 	.word	0x3601b103
   2c92c:	d1ea454d 	.word	0xd1ea454d
   2c930:	2f00b90e 	.word	0x2f00b90e
   2c934:	4630d0dd 	.word	0x4630d0dd
   2c938:	e8bdb003 	.word	0xe8bdb003
   2c93c:	202383f0 	.word	0x202383f0
   2c940:	feaaf7f0 	.word	0xfeaaf7f0
   2c944:	30fff04f 	.word	0x30fff04f
   2c948:	e8bdb003 	.word	0xe8bdb003
   2c94c:	201683f0 	.word	0x201683f0
   2c950:	fea2f7f0 	.word	0xfea2f7f0
   2c954:	30fff04f 	.word	0x30fff04f
   2c958:	4620e7ee 	.word	0x4620e7ee
   2c95c:	bf00e7ec 	.word	0xbf00e7ec

0002c960 <bsd_platform_fcntl>:
   2c960:	4b06b508 	.word	0x4b06b508
   2c964:	d0034383 	.word	0xd0034383
   2c968:	4008e8bd 	.word	0x4008e8bd
   2c96c:	bd54f7f6 	.word	0xbd54f7f6
   2c970:	f7f0202d 	.word	0xf7f0202d
   2c974:	f04ffe91 	.word	0xf04ffe91
   2c978:	bd0830ff 	.word	0xbd0830ff
   2c97c:	49765432 	.word	0x49765432

0002c980 <stream_handler_init>:
   2c980:	4604b510 	.word	0x4604b510
   2c984:	f7fd200c 	.word	0xf7fd200c
   2c988:	60e0fed1 	.word	0x60e0fed1
   2c98c:	2300b128 	.word	0x2300b128
   2c990:	e8bd6123 	.word	0xe8bd6123
   2c994:	f7f84010 	.word	0xf7f84010
   2c998:	2004ba1b 	.word	0x2004ba1b
   2c99c:	bf00bd10 	.word	0xbf00bd10

0002c9a0 <stream_handler_put>:
   2c9a0:	4606b570 	.word	0x4606b570
   2c9a4:	460d2014 	.word	0x460d2014
   2c9a8:	fec0f7fd 	.word	0xfec0f7fd
   2c9ac:	682bb178 	.word	0x682bb178
   2c9b0:	60434604 	.word	0x60434604
   2c9b4:	4601686b 	.word	0x4601686b
   2c9b8:	68eb6083 	.word	0x68eb6083
   2c9bc:	68ab60c3 	.word	0x68ab60c3
   2c9c0:	68f06103 	.word	0x68f06103
   2c9c4:	fa0ef7f8 	.word	0xfa0ef7f8
   2c9c8:	6868b920 	.word	0x6868b920
   2c9cc:	f04fbd70 	.word	0xf04fbd70
   2c9d0:	bd7030ff 	.word	0xbd7030ff
   2c9d4:	f7fd4620 	.word	0xf7fd4620
   2c9d8:	f04ffec7 	.word	0xf04ffec7
   2c9dc:	bd7030ff 	.word	0xbd7030ff

0002c9e0 <stream_handler_get>:
   2c9e0:	4ff0e92d 	.word	0x4ff0e92d
   2c9e4:	b0874682 	.word	0xb0874682
   2c9e8:	468968c0 	.word	0x468968c0
   2c9ec:	f7f84693 	.word	0xf7f84693
   2c9f0:	2800fa19 	.word	0x2800fa19
   2c9f4:	4605d072 	.word	0x4605d072
   2c9f8:	0008f8d9 	.word	0x0008f8d9
   2c9fc:	692bb120 	.word	0x692bb120
   2ca00:	68eab113 	.word	0x68eab113
   2ca04:	d15c2a00 	.word	0xd15c2a00
   2ca08:	f8c92300 	.word	0xf8c92300
   2ca0c:	f8d9300c 	.word	0xf8d9300c
   2ca10:	f8d92000 	.word	0xf8d92000
   2ca14:	f8da8004 	.word	0xf8da8004
   2ca18:	92011010 	.word	0x92011010
   2ca1c:	0f00f1b8 	.word	0x0f00f1b8
   2ca20:	f00bd05a 	.word	0xf00bd05a
   2ca24:	24000308 	.word	0x24000308
   2ca28:	e0109300 	.word	0xe0109300
   2ca2c:	3010f8da 	.word	0x3010f8da
   2ca30:	f8ca443b 	.word	0xf8ca443b
   2ca34:	46283010 	.word	0x46283010
   2ca38:	f9fcf7f8 	.word	0xf9fcf7f8
   2ca3c:	4605443c 	.word	0x4605443c
   2ca40:	d0382800 	.word	0xd0382800
   2ca44:	d93645a0 	.word	0xd93645a0
   2ca48:	f8d92100 	.word	0xf8d92100
   2ca4c:	68ae2000 	.word	0x68ae2000
   2ca50:	0b04eba8 	.word	0x0b04eba8
   2ca54:	455e1a76 	.word	0x455e1a76
   2ca58:	bf284637 	.word	0xbf284637
   2ca5c:	b132465f 	.word	0xb132465f
   2ca60:	9b016868 	.word	0x9b016868
   2ca64:	463a4401 	.word	0x463a4401
   2ca68:	f0051918 	.word	0xf0051918
   2ca6c:	9b00ff3c 	.word	0x9b00ff3c
   2ca70:	d1e02b00 	.word	0xd1e02b00
   2ca74:	d8d9455e 	.word	0xd8d9455e
   2ca78:	000cf8da 	.word	0x000cf8da
   2ca7c:	f9c8f7f8 	.word	0xf9c8f7f8
   2ca80:	b1704606 	.word	0xb1704606
   2ca84:	2301e9d0 	.word	0x2301e9d0
   2ca88:	0103e9d0 	.word	0x0103e9d0
   2ca8c:	2302e9cd 	.word	0x2302e9cd
   2ca90:	1004e9cd 	.word	0x1004e9cd
   2ca94:	3101e9da 	.word	0x3101e9da
   2ca98:	4798a802 	.word	0x4798a802
   2ca9c:	f7fd4630 	.word	0xf7fd4630
   2caa0:	2300fe63 	.word	0x2300fe63
   2caa4:	f8ca4628 	.word	0xf8ca4628
   2caa8:	f7f83010 	.word	0xf7f83010
   2caac:	443cf9c3 	.word	0x443cf9c3
   2cab0:	28004605 	.word	0x28004605
   2cab4:	4620d1c6 	.word	0x4620d1c6
   2cab8:	4004f8c9 	.word	0x4004f8c9
   2cabc:	e8bdb007 	.word	0xe8bdb007
   2cac0:	f8d98ff0 	.word	0xf8d98ff0
   2cac4:	429a300c 	.word	0x429a300c
   2cac8:	461abf28 	.word	0x461abf28
   2cacc:	200cf8c9 	.word	0x200cf8c9
   2cad0:	f0056929 	.word	0xf0056929
   2cad4:	e79aff08 	.word	0xe79aff08
   2cad8:	e7ec4644 	.word	0xe7ec4644
   2cadc:	30fff04f 	.word	0x30fff04f
   2cae0:	bf00e7ec 	.word	0xbf00e7ec

0002cae4 <stream_handler_available>:
   2cae4:	4604b510 	.word	0x4604b510
   2cae8:	f7f868c0 	.word	0xf7f868c0
   2caec:	b150f99b 	.word	0xb150f99b
   2caf0:	42646924 	.word	0x42646924
   2caf4:	441c6883 	.word	0x441c6883
   2caf8:	f99cf7f8 	.word	0xf99cf7f8
   2cafc:	d1f92800 	.word	0xd1f92800
   2cb00:	70e4ea24 	.word	0x70e4ea24
   2cb04:	f04fbd10 	.word	0xf04fbd10
   2cb08:	bd1030ff 	.word	0xbd1030ff

0002cb0c <stream_handler_flush>:
   2cb0c:	4605b530 	.word	0x4605b530
   2cb10:	b08568c0 	.word	0xb08568c0
   2cb14:	e01ab9a8 	.word	0xe01ab9a8
   2cb18:	f7f868e8 	.word	0xf7f868e8
   2cb1c:	4604f979 	.word	0x4604f979
   2cb20:	e9d0b170 	.word	0xe9d0b170
   2cb24:	e9d40101 	.word	0xe9d40101
   2cb28:	e9cd3203 	.word	0xe9cd3203
   2cb2c:	e9cd0100 	.word	0xe9cd0100
   2cb30:	e9d52302 	.word	0xe9d52302
   2cb34:	46683101 	.word	0x46683101
   2cb38:	46204798 	.word	0x46204798
   2cb3c:	fe14f7fd 	.word	0xfe14f7fd
   2cb40:	f7f868e8 	.word	0xf7f868e8
   2cb44:	2800f975 	.word	0x2800f975
   2cb48:	b005d1e6 	.word	0xb005d1e6
   2cb4c:	2008bd30 	.word	0x2008bd30
   2cb50:	bd30b005 	.word	0xbd30b005

0002cb54 <stream_handler_free>:
   2cb54:	4605b530 	.word	0x4605b530
   2cb58:	b08568c0 	.word	0xb08568c0
   2cb5c:	e01cb9a0 	.word	0xe01cb9a0
   2cb60:	f956f7f8 	.word	0xf956f7f8
   2cb64:	b1704604 	.word	0xb1704604
   2cb68:	0101e9d0 	.word	0x0101e9d0
   2cb6c:	3203e9d4 	.word	0x3203e9d4
   2cb70:	0100e9cd 	.word	0x0100e9cd
   2cb74:	2302e9cd 	.word	0x2302e9cd
   2cb78:	3101e9d5 	.word	0x3101e9d5
   2cb7c:	47984668 	.word	0x47984668
   2cb80:	f7fd4620 	.word	0xf7fd4620
   2cb84:	68e8fdf1 	.word	0x68e8fdf1
   2cb88:	f952f7f8 	.word	0xf952f7f8
   2cb8c:	68e84604 	.word	0x68e84604
   2cb90:	d1e52c00 	.word	0xd1e52c00
   2cb94:	fde8f7fd 	.word	0xfde8f7fd
   2cb98:	b00560ec 	.word	0xb00560ec
   2cb9c:	bf00bd30 	.word	0xbf00bd30

0002cba0 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   2cba0:	4a07      	ldr	r2, [pc, #28]	; (2cbc0 <SystemInit+0x20>)
   2cba2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   2cba6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   2cbaa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   2cbae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2cbb2:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   2cbb6:	4b03      	ldr	r3, [pc, #12]	; (2cbc4 <SystemInit+0x24>)
   2cbb8:	4a03      	ldr	r2, [pc, #12]	; (2cbc8 <SystemInit+0x28>)
   2cbba:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   2cbbc:	4770      	bx	lr
   2cbbe:	bf00      	nop
   2cbc0:	e000ed00 	.word	0xe000ed00
   2cbc4:	20028e30 	.word	0x20028e30
   2cbc8:	03d09000 	.word	0x03d09000

0002cbcc <nvmc_word_write>:
}

#if defined(NVMC_READYNEXT_READYNEXT_Msk)
__STATIC_INLINE bool nrf_nvmc_write_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   2cbcc:	4a04      	ldr	r2, [pc, #16]	; (2cbe0 <nvmc_word_write+0x14>)
   2cbce:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   2cbd2:	07db      	lsls	r3, r3, #31
   2cbd4:	d5fb      	bpl.n	2cbce <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   2cbd6:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   2cbd8:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   2cbdc:	4770      	bx	lr
   2cbde:	bf00      	nop
   2cbe0:	40039000 	.word	0x40039000

0002cbe4 <partial_word_create>:
{
   2cbe4:	b513      	push	{r0, r1, r4, lr}
    byte_shift = addr % NVMC_BYTES_IN_WORD;
   2cbe6:	f000 0003 	and.w	r0, r0, #3
    NRFX_ASSERT(bytes_count <= (NVMC_BYTES_IN_WORD - byte_shift));
   2cbea:	f1c0 0304 	rsb	r3, r0, #4
   2cbee:	4293      	cmp	r3, r2
   2cbf0:	d205      	bcs.n	2cbfe <partial_word_create+0x1a>
   2cbf2:	4b0b      	ldr	r3, [pc, #44]	; (2cc20 <partial_word_create+0x3c>)
   2cbf4:	4a0b      	ldr	r2, [pc, #44]	; (2cc24 <partial_word_create+0x40>)
   2cbf6:	2192      	movs	r1, #146	; 0x92
   2cbf8:	480b      	ldr	r0, [pc, #44]	; (2cc28 <partial_word_create+0x44>)
   2cbfa:	f003 f981 	bl	2ff00 <__assert_func>
    value32 = 0xFFFFFFFF;
   2cbfe:	f04f 33ff 	mov.w	r3, #4294967295
   2cc02:	ac02      	add	r4, sp, #8
   2cc04:	f844 3d04 	str.w	r3, [r4, #-4]!
    for (uint32_t i = 0; i < bytes_count; i++)
   2cc08:	2300      	movs	r3, #0
        ((uint8_t *)&value32)[byte_shift] = bytes[i];
   2cc0a:	4404      	add	r4, r0
    for (uint32_t i = 0; i < bytes_count; i++)
   2cc0c:	4293      	cmp	r3, r2
   2cc0e:	d102      	bne.n	2cc16 <partial_word_create+0x32>
}
   2cc10:	9801      	ldr	r0, [sp, #4]
   2cc12:	b002      	add	sp, #8
   2cc14:	bd10      	pop	{r4, pc}
        ((uint8_t *)&value32)[byte_shift] = bytes[i];
   2cc16:	5cc8      	ldrb	r0, [r1, r3]
   2cc18:	54e0      	strb	r0, [r4, r3]
    for (uint32_t i = 0; i < bytes_count; i++)
   2cc1a:	3301      	adds	r3, #1
   2cc1c:	e7f6      	b.n	2cc0c <partial_word_create+0x28>
   2cc1e:	bf00      	nop
   2cc20:	0003646c 	.word	0x0003646c
   2cc24:	000363d1 	.word	0x000363d1
   2cc28:	0003648c 	.word	0x0003648c

0002cc2c <nrfx_nvmc_page_erase>:
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(addr < flash_total_size_get());
   2cc2c:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   2cc30:	b508      	push	{r3, lr}
    NRFX_ASSERT(addr < flash_total_size_get());
   2cc32:	d305      	bcc.n	2cc40 <nrfx_nvmc_page_erase+0x14>
   2cc34:	4b0d      	ldr	r3, [pc, #52]	; (2cc6c <nrfx_nvmc_page_erase+0x40>)
   2cc36:	4a0e      	ldr	r2, [pc, #56]	; (2cc70 <nrfx_nvmc_page_erase+0x44>)
   2cc38:	21d1      	movs	r1, #209	; 0xd1
   2cc3a:	480e      	ldr	r0, [pc, #56]	; (2cc74 <nrfx_nvmc_page_erase+0x48>)
   2cc3c:	f003 f960 	bl	2ff00 <__assert_func>
    return !(addr % flash_page_size_get());
   2cc40:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   2cc44:	b97b      	cbnz	r3, 2cc66 <nrfx_nvmc_page_erase+0x3a>

#if defined(NVMC_CONFIGNS_WEN_Msk)
__STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                 nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   2cc46:	2202      	movs	r2, #2
   2cc48:	4b0b      	ldr	r3, [pc, #44]	; (2cc78 <nrfx_nvmc_page_erase+0x4c>)
   2cc4a:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   2cc4e:	f04f 32ff 	mov.w	r2, #4294967295
   2cc52:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2cc54:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   2cc58:	07d2      	lsls	r2, r2, #31
   2cc5a:	d5fb      	bpl.n	2cc54 <nrfx_nvmc_page_erase+0x28>
    p_reg->CONFIGNS = (uint32_t)mode;
   2cc5c:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   2cc5e:	4807      	ldr	r0, [pc, #28]	; (2cc7c <nrfx_nvmc_page_erase+0x50>)
   2cc60:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   2cc64:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   2cc66:	4806      	ldr	r0, [pc, #24]	; (2cc80 <nrfx_nvmc_page_erase+0x54>)
   2cc68:	e7fc      	b.n	2cc64 <nrfx_nvmc_page_erase+0x38>
   2cc6a:	bf00      	nop
   2cc6c:	00036425 	.word	0x00036425
   2cc70:	000363e5 	.word	0x000363e5
   2cc74:	0003648c 	.word	0x0003648c
   2cc78:	40039000 	.word	0x40039000
   2cc7c:	0bad0000 	.word	0x0bad0000
   2cc80:	0bad000a 	.word	0x0bad000a

0002cc84 <nrfx_nvmc_word_write>:
    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, &value, 1));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    NRFX_ASSERT(addr < flash_total_size_get());
   2cc84:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   2cc88:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(addr < flash_total_size_get());
   2cc8a:	d306      	bcc.n	2cc9a <nrfx_nvmc_word_write+0x16>
   2cc8c:	f240 1141 	movw	r1, #321	; 0x141
   2cc90:	4b0a      	ldr	r3, [pc, #40]	; (2ccbc <nrfx_nvmc_word_write+0x38>)
   2cc92:	4a0b      	ldr	r2, [pc, #44]	; (2ccc0 <nrfx_nvmc_word_write+0x3c>)
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   2cc94:	480b      	ldr	r0, [pc, #44]	; (2ccc4 <nrfx_nvmc_word_write+0x40>)
   2cc96:	f003 f933 	bl	2ff00 <__assert_func>
   2cc9a:	f010 0403 	ands.w	r4, r0, #3
   2cc9e:	d004      	beq.n	2ccaa <nrfx_nvmc_word_write+0x26>
   2cca0:	4b09      	ldr	r3, [pc, #36]	; (2ccc8 <nrfx_nvmc_word_write+0x44>)
   2cca2:	4a07      	ldr	r2, [pc, #28]	; (2ccc0 <nrfx_nvmc_word_write+0x3c>)
   2cca4:	f44f 71a1 	mov.w	r1, #322	; 0x142
   2cca8:	e7f4      	b.n	2cc94 <nrfx_nvmc_word_write+0x10>
   2ccaa:	2301      	movs	r3, #1
   2ccac:	4d07      	ldr	r5, [pc, #28]	; (2cccc <nrfx_nvmc_word_write+0x48>)
   2ccae:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   2ccb2:	f7ff ff8b 	bl	2cbcc <nvmc_word_write>
   2ccb6:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   2ccba:	bd38      	pop	{r3, r4, r5, pc}
   2ccbc:	00036425 	.word	0x00036425
   2ccc0:	000363fa 	.word	0x000363fa
   2ccc4:	0003648c 	.word	0x0003648c
   2ccc8:	00036443 	.word	0x00036443
   2cccc:	40039000 	.word	0x40039000

0002ccd0 <nrfx_nvmc_bytes_write>:

void nrfx_nvmc_bytes_write(uint32_t addr, void const * src, uint32_t num_bytes)
{
    NRFX_ASSERT(addr < flash_total_size_get());
   2ccd0:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   2ccd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ccd8:	4604      	mov	r4, r0
   2ccda:	460e      	mov	r6, r1
   2ccdc:	4615      	mov	r5, r2
    NRFX_ASSERT(addr < flash_total_size_get());
   2ccde:	d306      	bcc.n	2ccee <nrfx_nvmc_bytes_write+0x1e>
   2cce0:	4b20      	ldr	r3, [pc, #128]	; (2cd64 <nrfx_nvmc_bytes_write+0x94>)
   2cce2:	4a21      	ldr	r2, [pc, #132]	; (2cd68 <nrfx_nvmc_bytes_write+0x98>)
   2cce4:	f240 114d 	movw	r1, #333	; 0x14d
   2cce8:	4820      	ldr	r0, [pc, #128]	; (2cd6c <nrfx_nvmc_bytes_write+0x9c>)
   2ccea:	f003 f909 	bl	2ff00 <__assert_func>
   2ccee:	2201      	movs	r2, #1
   2ccf0:	4b1f      	ldr	r3, [pc, #124]	; (2cd70 <nrfx_nvmc_bytes_write+0xa0>)
   2ccf2:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nvmc_write_mode_set();

    uint8_t const * bytes_src = (uint8_t const *)src;

    uint32_t unaligned_bytes = addr % NVMC_BYTES_IN_WORD;
    if (unaligned_bytes != 0)
   2ccf6:	f010 0303 	ands.w	r3, r0, #3
   2ccfa:	d010      	beq.n	2cd1e <nrfx_nvmc_bytes_write+0x4e>
    {
        uint32_t leading_bytes = NVMC_BYTES_IN_WORD - unaligned_bytes;
   2ccfc:	f1c3 0704 	rsb	r7, r3, #4
   2cd00:	42af      	cmp	r7, r5
   2cd02:	bf28      	it	cs
   2cd04:	462f      	movcs	r7, r5
        if (leading_bytes > num_bytes)
        {
            leading_bytes = num_bytes;
        }

        nvmc_word_write(addr - unaligned_bytes,
   2cd06:	463a      	mov	r2, r7
   2cd08:	eba0 0803 	sub.w	r8, r0, r3
   2cd0c:	f7ff ff6a 	bl	2cbe4 <partial_word_create>
   2cd10:	4601      	mov	r1, r0
   2cd12:	4640      	mov	r0, r8
   2cd14:	f7ff ff5a 	bl	2cbcc <nvmc_word_write>
                        partial_word_create(addr, bytes_src, leading_bytes));
        num_bytes -= leading_bytes;
   2cd18:	1bed      	subs	r5, r5, r7
        addr      += leading_bytes;
   2cd1a:	443c      	add	r4, r7
        bytes_src += leading_bytes;
   2cd1c:	443e      	add	r6, r7
        }
    }
    else
#endif
    {
        uint32_t word_count = num_bytes / NVMC_BYTES_IN_WORD;
   2cd1e:	4637      	mov	r7, r6
   2cd20:	f025 0803 	bic.w	r8, r5, #3
   2cd24:	44b0      	add	r8, r6
   2cd26:	eba4 0906 	sub.w	r9, r4, r6
    for (uint32_t i = 0; i < num_words; i++)
   2cd2a:	45b8      	cmp	r8, r7
   2cd2c:	d113      	bne.n	2cd56 <nrfx_nvmc_bytes_write+0x86>
        addr += word_count * NVMC_BYTES_IN_WORD;
        bytes_src += word_count * NVMC_BYTES_IN_WORD;
    }

    uint32_t trailing_bytes = num_bytes % NVMC_BYTES_IN_WORD;
    if (trailing_bytes != 0)
   2cd2e:	f015 0203 	ands.w	r2, r5, #3
   2cd32:	d00a      	beq.n	2cd4a <nrfx_nvmc_bytes_write+0x7a>
        addr += word_count * NVMC_BYTES_IN_WORD;
   2cd34:	f025 0103 	bic.w	r1, r5, #3
   2cd38:	440c      	add	r4, r1
    {
        nvmc_word_write(addr, partial_word_create(addr, bytes_src, trailing_bytes));
   2cd3a:	4620      	mov	r0, r4
   2cd3c:	4431      	add	r1, r6
   2cd3e:	f7ff ff51 	bl	2cbe4 <partial_word_create>
   2cd42:	4601      	mov	r1, r0
   2cd44:	4620      	mov	r0, r4
   2cd46:	f7ff ff41 	bl	2cbcc <nvmc_word_write>
   2cd4a:	2200      	movs	r2, #0
   2cd4c:	4b08      	ldr	r3, [pc, #32]	; (2cd70 <nrfx_nvmc_bytes_write+0xa0>)
   2cd4e:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    }

    nvmc_readonly_mode_set();
}
   2cd52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2cd56:	eb09 0007 	add.w	r0, r9, r7
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
   2cd5a:	f857 1b04 	ldr.w	r1, [r7], #4
   2cd5e:	f7ff ff35 	bl	2cbcc <nvmc_word_write>
   2cd62:	e7e2      	b.n	2cd2a <nrfx_nvmc_bytes_write+0x5a>
   2cd64:	00036425 	.word	0x00036425
   2cd68:	0003640f 	.word	0x0003640f
   2cd6c:	0003648c 	.word	0x0003648c
   2cd70:	40039000 	.word	0x40039000

0002cd74 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   2cd74:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   2cd76:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   2cd78:	4b08      	ldr	r3, [pc, #32]	; (2cd9c <z_sys_device_do_config_level+0x28>)
   2cd7a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2cd7e:	3001      	adds	r0, #1
   2cd80:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   2cd84:	42a5      	cmp	r5, r4
   2cd86:	d800      	bhi.n	2cd8a <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   2cd88:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   2cd8a:	6823      	ldr	r3, [r4, #0]
   2cd8c:	4620      	mov	r0, r4
   2cd8e:	685b      	ldr	r3, [r3, #4]
   2cd90:	4798      	blx	r3
		if (retval != 0) {
   2cd92:	b100      	cbz	r0, 2cd96 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   2cd94:	6066      	str	r6, [r4, #4]
								info++) {
   2cd96:	340c      	adds	r4, #12
   2cd98:	e7f4      	b.n	2cd84 <z_sys_device_do_config_level+0x10>
   2cd9a:	bf00      	nop
   2cd9c:	00034d80 	.word	0x00034d80

0002cda0 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   2cda0:	4b10      	ldr	r3, [pc, #64]	; (2cde4 <z_impl_device_get_binding+0x44>)
{
   2cda2:	b570      	push	{r4, r5, r6, lr}
   2cda4:	4605      	mov	r5, r0
   2cda6:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   2cda8:	4c0f      	ldr	r4, [pc, #60]	; (2cde8 <z_impl_device_get_binding+0x48>)
   2cdaa:	429c      	cmp	r4, r3
   2cdac:	d104      	bne.n	2cdb8 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   2cdae:	4c0e      	ldr	r4, [pc, #56]	; (2cde8 <z_impl_device_get_binding+0x48>)
   2cdb0:	42b4      	cmp	r4, r6
   2cdb2:	d109      	bne.n	2cdc8 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   2cdb4:	2400      	movs	r4, #0
   2cdb6:	e012      	b.n	2cdde <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   2cdb8:	6862      	ldr	r2, [r4, #4]
   2cdba:	b11a      	cbz	r2, 2cdc4 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   2cdbc:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   2cdbe:	6812      	ldr	r2, [r2, #0]
   2cdc0:	42aa      	cmp	r2, r5
   2cdc2:	d00c      	beq.n	2cdde <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   2cdc4:	340c      	adds	r4, #12
   2cdc6:	e7f0      	b.n	2cdaa <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   2cdc8:	6863      	ldr	r3, [r4, #4]
   2cdca:	b90b      	cbnz	r3, 2cdd0 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   2cdcc:	340c      	adds	r4, #12
   2cdce:	e7ef      	b.n	2cdb0 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   2cdd0:	6823      	ldr	r3, [r4, #0]
   2cdd2:	4628      	mov	r0, r5
   2cdd4:	6819      	ldr	r1, [r3, #0]
   2cdd6:	f7ed f881 	bl	19edc <strcmp>
   2cdda:	2800      	cmp	r0, #0
   2cddc:	d1f6      	bne.n	2cdcc <z_impl_device_get_binding+0x2c>
}
   2cdde:	4620      	mov	r0, r4
   2cde0:	bd70      	pop	{r4, r5, r6, pc}
   2cde2:	bf00      	nop
   2cde4:	200290dc 	.word	0x200290dc
   2cde8:	20029010 	.word	0x20029010

0002cdec <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   2cdec:	4b01      	ldr	r3, [pc, #4]	; (2cdf4 <z_impl_z_errno+0x8>)
   2cdee:	6898      	ldr	r0, [r3, #8]
}
   2cdf0:	3054      	adds	r0, #84	; 0x54
   2cdf2:	4770      	bx	lr
   2cdf4:	200259e0 	.word	0x200259e0

0002cdf8 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   2cdf8:	b510      	push	{r4, lr}
   2cdfa:	4604      	mov	r4, r0
		z_arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   2cdfc:	f7ee f8be 	bl	1af7c <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   2ce00:	2301      	movs	r3, #1
   2ce02:	f04f 0000 	mov.w	r0, #0
   2ce06:	4a08      	ldr	r2, [pc, #32]	; (2ce28 <k_sys_fatal_error_handler+0x30>)
   2ce08:	f363 0002 	bfi	r0, r3, #0, #3
   2ce0c:	4b07      	ldr	r3, [pc, #28]	; (2ce2c <k_sys_fatal_error_handler+0x34>)
   2ce0e:	f36f 00c5 	bfc	r0, #3, #3
   2ce12:	1a9b      	subs	r3, r3, r2
   2ce14:	08db      	lsrs	r3, r3, #3
   2ce16:	f363 108f 	bfi	r0, r3, #6, #10
   2ce1a:	4905      	ldr	r1, [pc, #20]	; (2ce30 <k_sys_fatal_error_handler+0x38>)
   2ce1c:	f004 fd49 	bl	318b2 <log_string_sync>
	z_arch_system_halt(reason);
   2ce20:	4620      	mov	r0, r4
   2ce22:	f005 fbea 	bl	325fa <z_arch_system_halt>
   2ce26:	bf00      	nop
   2ce28:	00033914 	.word	0x00033914
   2ce2c:	00033994 	.word	0x00033994
   2ce30:	000364d4 	.word	0x000364d4

0002ce34 <z_fatal_error>:
	z_arch_system_halt(reason);
}
/* LCOV_EXCL_STOP */

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2ce34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ce38:	4605      	mov	r5, r0
   2ce3a:	460f      	mov	r7, r1
	return z_impl_k_current_get();
   2ce3c:	f001 fb3e 	bl	2e4bc <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s", reason, reason_to_str(reason));
   2ce40:	2301      	movs	r3, #1
   2ce42:	4606      	mov	r6, r0
   2ce44:	f04f 0000 	mov.w	r0, #0
   2ce48:	4c2d      	ldr	r4, [pc, #180]	; (2cf00 <z_fatal_error+0xcc>)
   2ce4a:	f363 0002 	bfi	r0, r3, #0, #3
   2ce4e:	4b2d      	ldr	r3, [pc, #180]	; (2cf04 <z_fatal_error+0xd0>)
   2ce50:	2d04      	cmp	r5, #4
   2ce52:	eba4 0403 	sub.w	r4, r4, r3
   2ce56:	bf98      	it	ls
   2ce58:	4b2b      	ldrls	r3, [pc, #172]	; (2cf08 <z_fatal_error+0xd4>)
   2ce5a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2ce5e:	f36f 00c5 	bfc	r0, #3, #3
   2ce62:	bf94      	ite	ls
   2ce64:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   2ce68:	4b28      	ldrhi	r3, [pc, #160]	; (2cf0c <z_fatal_error+0xd8>)
   2ce6a:	f364 108f 	bfi	r0, r4, #6, #10
   2ce6e:	462a      	mov	r2, r5
   2ce70:	4927      	ldr	r1, [pc, #156]	; (2cf10 <z_fatal_error+0xdc>)
   2ce72:	f004 fd1e 	bl	318b2 <log_string_sync>
	 * if (k_is_in_isr()) {
	 *     LOG_ERR("Fault during interrupt handling\n");
	 * }
	 */

	LOG_ERR("Current thread: %p (%s)", thread,
   2ce76:	f04f 0800 	mov.w	r8, #0
   2ce7a:	2301      	movs	r3, #1
   2ce7c:	f363 0802 	bfi	r8, r3, #0, #3
   2ce80:	f36f 08c5 	bfc	r8, #3, #3
	const char *thread_name = k_thread_name_get(thread);
   2ce84:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   2ce86:	f364 188f 	bfi	r8, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   2ce8a:	f005 fc47 	bl	3271c <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   2ce8e:	2800      	cmp	r0, #0
   2ce90:	d034      	beq.n	2cefc <z_fatal_error+0xc8>
   2ce92:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   2ce94:	4b1f      	ldr	r3, [pc, #124]	; (2cf14 <z_fatal_error+0xe0>)
   2ce96:	2a00      	cmp	r2, #0
   2ce98:	bf08      	it	eq
   2ce9a:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   2ce9c:	f004 fd1b 	bl	318d6 <log_strdup>
   2cea0:	4632      	mov	r2, r6
   2cea2:	4603      	mov	r3, r0
   2cea4:	491c      	ldr	r1, [pc, #112]	; (2cf18 <z_fatal_error+0xe4>)
   2cea6:	4640      	mov	r0, r8
   2cea8:	f004 fd03 	bl	318b2 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   2ceac:	4639      	mov	r1, r7
   2ceae:	4628      	mov	r0, r5
   2ceb0:	f7ff ffa2 	bl	2cdf8 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   2ceb4:	2d04      	cmp	r5, #4
   2ceb6:	d10c      	bne.n	2ced2 <z_fatal_error+0x9e>
   2ceb8:	4918      	ldr	r1, [pc, #96]	; (2cf1c <z_fatal_error+0xe8>)
   2ceba:	2373      	movs	r3, #115	; 0x73
   2cebc:	4a18      	ldr	r2, [pc, #96]	; (2cf20 <z_fatal_error+0xec>)
   2cebe:	4819      	ldr	r0, [pc, #100]	; (2cf24 <z_fatal_error+0xf0>)
   2cec0:	f004 fcda 	bl	31878 <printk>
   2cec4:	4818      	ldr	r0, [pc, #96]	; (2cf28 <z_fatal_error+0xf4>)
   2cec6:	f004 fcd7 	bl	31878 <printk>
   2ceca:	2173      	movs	r1, #115	; 0x73
   2cecc:	4814      	ldr	r0, [pc, #80]	; (2cf20 <z_fatal_error+0xec>)
   2cece:	f004 fce0 	bl	31892 <assert_post_action>
			 "Attempted to recover from a kernel panic condition");
		/* FIXME: #17656 */
		__ASSERT(!k_is_in_isr(),
   2ced2:	f001 fc17 	bl	2e704 <k_is_in_isr>
   2ced6:	b160      	cbz	r0, 2cef2 <z_fatal_error+0xbe>
   2ced8:	4914      	ldr	r1, [pc, #80]	; (2cf2c <z_fatal_error+0xf8>)
   2ceda:	2376      	movs	r3, #118	; 0x76
   2cedc:	4a10      	ldr	r2, [pc, #64]	; (2cf20 <z_fatal_error+0xec>)
   2cede:	4811      	ldr	r0, [pc, #68]	; (2cf24 <z_fatal_error+0xf0>)
   2cee0:	f004 fcca 	bl	31878 <printk>
   2cee4:	4812      	ldr	r0, [pc, #72]	; (2cf30 <z_fatal_error+0xfc>)
   2cee6:	f004 fcc7 	bl	31878 <printk>
   2ceea:	2176      	movs	r1, #118	; 0x76
   2ceec:	480c      	ldr	r0, [pc, #48]	; (2cf20 <z_fatal_error+0xec>)
   2ceee:	f004 fcd0 	bl	31892 <assert_post_action>
	z_impl_k_thread_abort(thread);
   2cef2:	4630      	mov	r0, r6
			 "Attempted to recover from a fatal error in ISR");
	}
	k_thread_abort(thread);
}
   2cef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2cef8:	f7ef bad4 	b.w	1c4a4 <z_impl_k_thread_abort>
		thread_name = "unknown";
   2cefc:	4805      	ldr	r0, [pc, #20]	; (2cf14 <z_fatal_error+0xe0>)
   2cefe:	e7cd      	b.n	2ce9c <z_fatal_error+0x68>
   2cf00:	00033994 	.word	0x00033994
   2cf04:	00033914 	.word	0x00033914
   2cf08:	00034d98 	.word	0x00034d98
   2cf0c:	0003652d 	.word	0x0003652d
   2cf10:	00036543 	.word	0x00036543
   2cf14:	0003653b 	.word	0x0003653b
   2cf18:	00036561 	.word	0x00036561
   2cf1c:	000365a7 	.word	0x000365a7
   2cf20:	00036579 	.word	0x00036579
   2cf24:	00034ff7 	.word	0x00034ff7
   2cf28:	000365c4 	.word	0x000365c4
   2cf2c:	000365f9 	.word	0x000365f9
   2cf30:	00036608 	.word	0x00036608

0002cf34 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   2cf34:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   2cf36:	4d0b      	ldr	r5, [pc, #44]	; (2cf64 <idle+0x30>)
	__asm__ volatile(
   2cf38:	f04f 0220 	mov.w	r2, #32
   2cf3c:	f3ef 8311 	mrs	r3, BASEPRI
   2cf40:	f382 8811 	msr	BASEPRI, r2
   2cf44:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   2cf48:	f001 ff98 	bl	2ee7c <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   2cf4c:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   2cf4e:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   2cf50:	2802      	cmp	r0, #2
   2cf52:	bfd8      	it	le
   2cf54:	4608      	movle	r0, r1
   2cf56:	f001 ffd7 	bl	2ef08 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   2cf5a:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	z_arch_cpu_idle();
   2cf5c:	f7ee fdc2 	bl	1bae4 <z_arch_cpu_idle>
   2cf60:	e7ea      	b.n	2cf38 <idle+0x4>
   2cf62:	bf00      	nop
   2cf64:	200259e0 	.word	0x200259e0

0002cf68 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   2cf68:	4802      	ldr	r0, [pc, #8]	; (2cf74 <z_bss_zero+0xc>)

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   2cf6a:	4a03      	ldr	r2, [pc, #12]	; (2cf78 <z_bss_zero+0x10>)
   2cf6c:	2100      	movs	r1, #0
   2cf6e:	1a12      	subs	r2, r2, r0
   2cf70:	f005 bcc4 	b.w	328fc <memset>
   2cf74:	20020000 	.word	0x20020000
   2cf78:	20025c84 	.word	0x20025c84

0002cf7c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   2cf7c:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2cf7e:	4806      	ldr	r0, [pc, #24]	; (2cf98 <z_data_copy+0x1c>)
   2cf80:	4a06      	ldr	r2, [pc, #24]	; (2cf9c <z_data_copy+0x20>)
   2cf82:	4907      	ldr	r1, [pc, #28]	; (2cfa0 <z_data_copy+0x24>)
   2cf84:	1a12      	subs	r2, r2, r0
   2cf86:	f005 fcae 	bl	328e6 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2cf8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2cf8e:	4a05      	ldr	r2, [pc, #20]	; (2cfa4 <z_data_copy+0x28>)
   2cf90:	4905      	ldr	r1, [pc, #20]	; (2cfa8 <z_data_copy+0x2c>)
   2cf92:	4806      	ldr	r0, [pc, #24]	; (2cfac <z_data_copy+0x30>)
   2cf94:	f005 bca7 	b.w	328e6 <memcpy>
   2cf98:	20028dcc 	.word	0x20028dcc
   2cf9c:	2002917c 	.word	0x2002917c
   2cfa0:	00036f04 	.word	0x00036f04
   2cfa4:	00000000 	.word	0x00000000
   2cfa8:	00036f04 	.word	0x00036f04
   2cfac:	20020000 	.word	0x20020000

0002cfb0 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   2cfb0:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2cfb2:	2002      	movs	r0, #2
   2cfb4:	f7ff fede 	bl	2cd74 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   2cfb8:	4807      	ldr	r0, [pc, #28]	; (2cfd8 <bg_thread_main+0x28>)
   2cfba:	f004 fc5d 	bl	31878 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   2cfbe:	2003      	movs	r0, #3
   2cfc0:	f7ff fed8 	bl	2cd74 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   2cfc4:	f001 fca0 	bl	2e908 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   2cfc8:	f7ed fdfa 	bl	1abc0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   2cfcc:	4a03      	ldr	r2, [pc, #12]	; (2cfdc <bg_thread_main+0x2c>)
   2cfce:	7b13      	ldrb	r3, [r2, #12]
   2cfd0:	f023 0301 	bic.w	r3, r3, #1
   2cfd4:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2cfd6:	bd08      	pop	{r3, pc}
   2cfd8:	00036639 	.word	0x00036639
   2cfdc:	200218c8 	.word	0x200218c8

0002cfe0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   2cfe0:	b580      	push	{r7, lr}
   2cfe2:	b0b2      	sub	sp, #200	; 0xc8
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   2cfe4:	f7ed ff4c 	bl	1ae80 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   2cfe8:	4b36      	ldr	r3, [pc, #216]	; (2d0c4 <z_cstart+0xe4>)
   2cfea:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2cfee:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   2cff2:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2cff6:	2400      	movs	r4, #0
   2cff8:	23e0      	movs	r3, #224	; 0xe0
   2cffa:	4d33      	ldr	r5, [pc, #204]	; (2d0c8 <z_cstart+0xe8>)

	/* perform any architecture-specific initialization */
	z_arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   2cffc:	2701      	movs	r7, #1
   2cffe:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   2d002:	77ec      	strb	r4, [r5, #31]
   2d004:	762c      	strb	r4, [r5, #24]
   2d006:	766c      	strb	r4, [r5, #25]
   2d008:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2d00a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   2d00c:	4e2f      	ldr	r6, [pc, #188]	; (2d0cc <z_cstart+0xec>)
   2d00e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2d012:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void z_arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2d014:	f7ef fa2e 	bl	1c474 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2d018:	f7ee fd5e 	bl	1bad8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2d01c:	f04f 33ff 	mov.w	r3, #4294967295
   2d020:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2d022:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   2d024:	ab06      	add	r3, sp, #24
   2d026:	22b0      	movs	r2, #176	; 0xb0
   2d028:	4621      	mov	r1, r4
   2d02a:	4618      	mov	r0, r3
   2d02c:	f005 fc66 	bl	328fc <memset>
	_current = &dummy_thread;
   2d030:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2d032:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   2d034:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2d038:	f7ff fe9c 	bl	2cd74 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2d03c:	4638      	mov	r0, r7
   2d03e:	f7ff fe99 	bl	2cd74 <z_sys_device_do_config_level>
	z_sched_init();
   2d042:	f001 f97d 	bl	2e340 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   2d046:	4b22      	ldr	r3, [pc, #136]	; (2d0d0 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   2d048:	4d22      	ldr	r5, [pc, #136]	; (2d0d4 <z_cstart+0xf4>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
   2d04a:	e9cd 7304 	strd	r7, r3, [sp, #16]
   2d04e:	2307      	movs	r3, #7
   2d050:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2d054:	e9cd 4302 	strd	r4, r3, [sp, #8]
   2d058:	e9cd 4400 	strd	r4, r4, [sp]
   2d05c:	4b1e      	ldr	r3, [pc, #120]	; (2d0d8 <z_cstart+0xf8>)
   2d05e:	491f      	ldr	r1, [pc, #124]	; (2d0dc <z_cstart+0xfc>)
   2d060:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   2d062:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   2d064:	f001 fb5e 	bl	2e724 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2d068:	7b6b      	ldrb	r3, [r5, #13]
   2d06a:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2d06e:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2d072:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2d074:	d104      	bne.n	2d080 <z_cstart+0xa0>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   2d076:	69ab      	ldr	r3, [r5, #24]
   2d078:	b913      	cbnz	r3, 2d080 <z_cstart+0xa0>
		z_add_thread_to_ready_q(thread);
   2d07a:	4628      	mov	r0, r5
   2d07c:	f000 fdf2 	bl	2dc64 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   2d080:	4b17      	ldr	r3, [pc, #92]	; (2d0e0 <z_cstart+0x100>)
   2d082:	2201      	movs	r2, #1
   2d084:	9305      	str	r3, [sp, #20]
   2d086:	230f      	movs	r3, #15
   2d088:	e9cd 3203 	strd	r3, r2, [sp, #12]
   2d08c:	2300      	movs	r3, #0
   2d08e:	4d15      	ldr	r5, [pc, #84]	; (2d0e4 <z_cstart+0x104>)
   2d090:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2d094:	9300      	str	r3, [sp, #0]
   2d096:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2d09a:	4b13      	ldr	r3, [pc, #76]	; (2d0e8 <z_cstart+0x108>)
   2d09c:	4913      	ldr	r1, [pc, #76]	; (2d0ec <z_cstart+0x10c>)
   2d09e:	4628      	mov	r0, r5
   2d0a0:	f001 fb40 	bl	2e724 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2d0a4:	7b6b      	ldrb	r3, [r5, #13]
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   2d0a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2d0aa:	f023 0304 	bic.w	r3, r3, #4
   2d0ae:	736b      	strb	r3, [r5, #13]
	list->head = (sys_dnode_t *)list;
   2d0b0:	4b0f      	ldr	r3, [pc, #60]	; (2d0f0 <z_cstart+0x110>)
   2d0b2:	490a      	ldr	r1, [pc, #40]	; (2d0dc <z_cstart+0xfc>)
	list->tail = (sys_dnode_t *)list;
   2d0b4:	e9c6 3306 	strd	r3, r3, [r6, #24]
   2d0b8:	4806      	ldr	r0, [pc, #24]	; (2d0d4 <z_cstart+0xf4>)
   2d0ba:	4b07      	ldr	r3, [pc, #28]	; (2d0d8 <z_cstart+0xf8>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   2d0bc:	60f5      	str	r5, [r6, #12]
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   2d0be:	f7ee fe09 	bl	1bcd4 <z_arch_switch_to_main_thread>
   2d0c2:	bf00      	nop
   2d0c4:	20027dc8 	.word	0x20027dc8
   2d0c8:	e000ed00 	.word	0xe000ed00
   2d0cc:	200259e0 	.word	0x200259e0
   2d0d0:	00036683 	.word	0x00036683
   2d0d4:	200218c8 	.word	0x200218c8
   2d0d8:	0002cfb1 	.word	0x0002cfb1
   2d0dc:	20025c88 	.word	0x20025c88
   2d0e0:	00036688 	.word	0x00036688
   2d0e4:	20021818 	.word	0x20021818
   2d0e8:	0002cf35 	.word	0x0002cf35
   2d0ec:	20027c88 	.word	0x20027c88
   2d0f0:	200259f8 	.word	0x200259f8

0002d0f4 <create_free_list>:
{
	u32_t j;
	char *p;

	/* blocks must be word aligned */
	__ASSERT(((slab->block_size | (uintptr_t)slab->buffer)
   2d0f4:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   2d0f8:	4313      	orrs	r3, r2
   2d0fa:	079b      	lsls	r3, r3, #30
{
   2d0fc:	b510      	push	{r4, lr}
   2d0fe:	4604      	mov	r4, r0
	__ASSERT(((slab->block_size | (uintptr_t)slab->buffer)
   2d100:	d00d      	beq.n	2d11e <create_free_list+0x2a>
   2d102:	2327      	movs	r3, #39	; 0x27
   2d104:	4a0d      	ldr	r2, [pc, #52]	; (2d13c <create_free_list+0x48>)
   2d106:	490e      	ldr	r1, [pc, #56]	; (2d140 <create_free_list+0x4c>)
   2d108:	480e      	ldr	r0, [pc, #56]	; (2d144 <create_free_list+0x50>)
   2d10a:	f004 fbb5 	bl	31878 <printk>
   2d10e:	4621      	mov	r1, r4
   2d110:	480d      	ldr	r0, [pc, #52]	; (2d148 <create_free_list+0x54>)
   2d112:	f004 fbb1 	bl	31878 <printk>
   2d116:	2127      	movs	r1, #39	; 0x27
   2d118:	4808      	ldr	r0, [pc, #32]	; (2d13c <create_free_list+0x48>)
   2d11a:	f004 fbba 	bl	31892 <assert_post_action>
					& (sizeof(void *) - 1)) == 0,
		 "slab at %p not word aligned", slab);

	slab->free_list = NULL;
   2d11e:	2300      	movs	r3, #0
	p = slab->buffer;
   2d120:	6922      	ldr	r2, [r4, #16]

	for (j = 0U; j < slab->num_blocks; j++) {
   2d122:	68a1      	ldr	r1, [r4, #8]
	slab->free_list = NULL;
   2d124:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2d126:	4299      	cmp	r1, r3
   2d128:	d100      	bne.n	2d12c <create_free_list+0x38>
		*(char **)p = slab->free_list;
		slab->free_list = p;
		p += slab->block_size;
	}
}
   2d12a:	bd10      	pop	{r4, pc}
		*(char **)p = slab->free_list;
   2d12c:	6960      	ldr	r0, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2d12e:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   2d130:	6010      	str	r0, [r2, #0]
		p += slab->block_size;
   2d132:	68e0      	ldr	r0, [r4, #12]
		slab->free_list = p;
   2d134:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   2d136:	4402      	add	r2, r0
   2d138:	e7f5      	b.n	2d126 <create_free_list+0x32>
   2d13a:	bf00      	nop
   2d13c:	0003668d 	.word	0x0003668d
   2d140:	000366be 	.word	0x000366be
   2d144:	00034ff7 	.word	0x00034ff7
   2d148:	00036709 	.word	0x00036709

0002d14c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   2d14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2d14e:	4d0e      	ldr	r5, [pc, #56]	; (2d188 <init_mem_slab_module+0x3c>)
   2d150:	4c0e      	ldr	r4, [pc, #56]	; (2d18c <init_mem_slab_module+0x40>)
   2d152:	462f      	mov	r7, r5
   2d154:	4e0e      	ldr	r6, [pc, #56]	; (2d190 <init_mem_slab_module+0x44>)
   2d156:	42ac      	cmp	r4, r5
   2d158:	d90c      	bls.n	2d174 <init_mem_slab_module+0x28>
   2d15a:	490e      	ldr	r1, [pc, #56]	; (2d194 <init_mem_slab_module+0x48>)
   2d15c:	233e      	movs	r3, #62	; 0x3e
   2d15e:	4632      	mov	r2, r6
   2d160:	480d      	ldr	r0, [pc, #52]	; (2d198 <init_mem_slab_module+0x4c>)
   2d162:	f004 fb89 	bl	31878 <printk>
   2d166:	480d      	ldr	r0, [pc, #52]	; (2d19c <init_mem_slab_module+0x50>)
   2d168:	f004 fb86 	bl	31878 <printk>
   2d16c:	213e      	movs	r1, #62	; 0x3e
   2d16e:	4630      	mov	r0, r6
   2d170:	f004 fb8f 	bl	31892 <assert_post_action>
   2d174:	42bc      	cmp	r4, r7
   2d176:	d301      	bcc.n	2d17c <init_mem_slab_module+0x30>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   2d178:	2000      	movs	r0, #0
   2d17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		create_free_list(slab);
   2d17c:	4620      	mov	r0, r4
   2d17e:	f7ff ffb9 	bl	2d0f4 <create_free_list>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2d182:	341c      	adds	r4, #28
   2d184:	e7e7      	b.n	2d156 <init_mem_slab_module+0xa>
   2d186:	bf00      	nop
   2d188:	200290dc 	.word	0x200290dc
   2d18c:	200290dc 	.word	0x200290dc
   2d190:	0003668d 	.word	0x0003668d
   2d194:	00036727 	.word	0x00036727
   2d198:	00034ff7 	.word	0x00034ff7
   2d19c:	00036744 	.word	0x00036744

0002d1a0 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   2d1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   2d1a2:	4d10      	ldr	r5, [pc, #64]	; (2d1e4 <init_static_pools+0x44>)
   2d1a4:	4c10      	ldr	r4, [pc, #64]	; (2d1e8 <init_static_pools+0x48>)
   2d1a6:	462f      	mov	r7, r5
   2d1a8:	4e10      	ldr	r6, [pc, #64]	; (2d1ec <init_static_pools+0x4c>)
   2d1aa:	42ac      	cmp	r4, r5
   2d1ac:	d90c      	bls.n	2d1c8 <init_static_pools+0x28>
   2d1ae:	4910      	ldr	r1, [pc, #64]	; (2d1f0 <init_static_pools+0x50>)
   2d1b0:	2328      	movs	r3, #40	; 0x28
   2d1b2:	4632      	mov	r2, r6
   2d1b4:	480f      	ldr	r0, [pc, #60]	; (2d1f4 <init_static_pools+0x54>)
   2d1b6:	f004 fb5f 	bl	31878 <printk>
   2d1ba:	480f      	ldr	r0, [pc, #60]	; (2d1f8 <init_static_pools+0x58>)
   2d1bc:	f004 fb5c 	bl	31878 <printk>
   2d1c0:	2128      	movs	r1, #40	; 0x28
   2d1c2:	4630      	mov	r0, r6
   2d1c4:	f004 fb65 	bl	31892 <assert_post_action>
   2d1c8:	42bc      	cmp	r4, r7
   2d1ca:	d301      	bcc.n	2d1d0 <init_static_pools+0x30>
		k_mem_pool_init(p);
	}

	return 0;
}
   2d1cc:	2000      	movs	r0, #0
   2d1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d1d0:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   2d1d4:	4620      	mov	r0, r4
   2d1d6:	e9c4 3305 	strd	r3, r3, [r4, #20]
   2d1da:	f004 f88a 	bl	312f2 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   2d1de:	341c      	adds	r4, #28
   2d1e0:	e7e3      	b.n	2d1aa <init_static_pools+0xa>
   2d1e2:	bf00      	nop
   2d1e4:	200290f8 	.word	0x200290f8
   2d1e8:	200290dc 	.word	0x200290dc
   2d1ec:	00036763 	.word	0x00036763
   2d1f0:	00036793 	.word	0x00036793
   2d1f4:	00034ff7 	.word	0x00034ff7
   2d1f8:	00036744 	.word	0x00036744

0002d1fc <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   2d1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d200:	4607      	mov	r7, r0
   2d202:	b085      	sub	sp, #20
   2d204:	460d      	mov	r5, r1
   2d206:	4692      	mov	sl, r2
   2d208:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2d20a:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   2d20e:	2b0d      	cmp	r3, #13
   2d210:	d805      	bhi.n	2d21e <k_mem_pool_alloc+0x22>
   2d212:	2b00      	cmp	r3, #0
   2d214:	d04c      	beq.n	2d2b0 <k_mem_pool_alloc+0xb4>
   2d216:	4b2a      	ldr	r3, [pc, #168]	; (2d2c0 <k_mem_pool_alloc+0xc4>)
   2d218:	685b      	ldr	r3, [r3, #4]
   2d21a:	051a      	lsls	r2, r3, #20
   2d21c:	d448      	bmi.n	2d2b0 <k_mem_pool_alloc+0xb4>
	int ret;
	s64_t end = 0;

	__ASSERT(!(z_arch_is_in_isr() && timeout != K_NO_WAIT), "");
   2d21e:	2c00      	cmp	r4, #0
   2d220:	d139      	bne.n	2d296 <k_mem_pool_alloc+0x9a>
	s64_t end = 0;
   2d222:	f04f 0800 	mov.w	r8, #0
	return pool - &_k_mem_pool_list_start[0];
   2d226:	4b27      	ldr	r3, [pc, #156]	; (2d2c4 <k_mem_pool_alloc+0xc8>)
   2d228:	4e27      	ldr	r6, [pc, #156]	; (2d2c8 <k_mem_pool_alloc+0xcc>)
   2d22a:	1afb      	subs	r3, r7, r3
   2d22c:	109b      	asrs	r3, r3, #2
   2d22e:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   2d230:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   2d234:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   2d236:	ab03      	add	r3, sp, #12
   2d238:	aa02      	add	r2, sp, #8
   2d23a:	9500      	str	r5, [sp, #0]
   2d23c:	4651      	mov	r1, sl
   2d23e:	4638      	mov	r0, r7
   2d240:	f004 f8a3 	bl	3138a <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   2d244:	796b      	ldrb	r3, [r5, #5]
   2d246:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   2d248:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   2d24a:	f362 0303 	bfi	r3, r2, #0, #4
   2d24e:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   2d250:	686b      	ldr	r3, [r5, #4]
   2d252:	9a03      	ldr	r2, [sp, #12]
   2d254:	f362 331f 	bfi	r3, r2, #12, #20
   2d258:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   2d25a:	b1c8      	cbz	r0, 2d290 <k_mem_pool_alloc+0x94>
   2d25c:	b1c4      	cbz	r4, 2d290 <k_mem_pool_alloc+0x94>
   2d25e:	f110 0f0c 	cmn.w	r0, #12
   2d262:	d115      	bne.n	2d290 <k_mem_pool_alloc+0x94>
   2d264:	f04f 0320 	mov.w	r3, #32
   2d268:	f3ef 8011 	mrs	r0, BASEPRI
   2d26c:	f383 8811 	msr	BASEPRI, r3
   2d270:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(z_arch_irq_lock(), wait_q, timeout);
   2d274:	4622      	mov	r2, r4
   2d276:	4659      	mov	r1, fp
   2d278:	f000 ff50 	bl	2e11c <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   2d27c:	1c63      	adds	r3, r4, #1
   2d27e:	d0da      	beq.n	2d236 <k_mem_pool_alloc+0x3a>
	return z_impl_k_uptime_get();
   2d280:	f005 fa96 	bl	327b0 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   2d284:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   2d288:	2c00      	cmp	r4, #0
   2d28a:	dcd4      	bgt.n	2d236 <k_mem_pool_alloc+0x3a>
				break;
			}
		}
	}

	return -EAGAIN;
   2d28c:	f06f 000a 	mvn.w	r0, #10
}
   2d290:	b005      	add	sp, #20
   2d292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(!(z_arch_is_in_isr() && timeout != K_NO_WAIT), "");
   2d296:	490d      	ldr	r1, [pc, #52]	; (2d2cc <k_mem_pool_alloc+0xd0>)
   2d298:	2337      	movs	r3, #55	; 0x37
   2d29a:	4a0d      	ldr	r2, [pc, #52]	; (2d2d0 <k_mem_pool_alloc+0xd4>)
   2d29c:	480d      	ldr	r0, [pc, #52]	; (2d2d4 <k_mem_pool_alloc+0xd8>)
   2d29e:	f004 faeb 	bl	31878 <printk>
   2d2a2:	480d      	ldr	r0, [pc, #52]	; (2d2d8 <k_mem_pool_alloc+0xdc>)
   2d2a4:	f004 fae8 	bl	31878 <printk>
   2d2a8:	2137      	movs	r1, #55	; 0x37
   2d2aa:	4809      	ldr	r0, [pc, #36]	; (2d2d0 <k_mem_pool_alloc+0xd4>)
   2d2ac:	f004 faf1 	bl	31892 <assert_post_action>
	if (timeout > 0) {
   2d2b0:	2c00      	cmp	r4, #0
   2d2b2:	ddb6      	ble.n	2d222 <k_mem_pool_alloc+0x26>
   2d2b4:	f005 fa7c 	bl	327b0 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   2d2b8:	eb10 0804 	adds.w	r8, r0, r4
   2d2bc:	e7b3      	b.n	2d226 <k_mem_pool_alloc+0x2a>
   2d2be:	bf00      	nop
   2d2c0:	e000ed00 	.word	0xe000ed00
   2d2c4:	200290dc 	.word	0x200290dc
   2d2c8:	b6db6db7 	.word	0xb6db6db7
   2d2cc:	000367ad 	.word	0x000367ad
   2d2d0:	00036763 	.word	0x00036763
   2d2d4:	00034ff7 	.word	0x00034ff7
   2d2d8:	000367d3 	.word	0x000367d3

0002d2dc <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   2d2dc:	b570      	push	{r4, r5, r6, lr}
   2d2de:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   2d2e0:	6802      	ldr	r2, [r0, #0]
   2d2e2:	7841      	ldrb	r1, [r0, #1]
   2d2e4:	4d23      	ldr	r5, [pc, #140]	; (2d374 <k_mem_pool_free_id+0x98>)
   2d2e6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2d2ea:	00a4      	lsls	r4, r4, #2
   2d2ec:	0b12      	lsrs	r2, r2, #12
   2d2ee:	f001 010f 	and.w	r1, r1, #15
   2d2f2:	1928      	adds	r0, r5, r4
   2d2f4:	f7ed fc6e 	bl	1abd4 <z_sys_mem_pool_block_free>
   2d2f8:	f04f 0320 	mov.w	r3, #32
   2d2fc:	f3ef 8611 	mrs	r6, BASEPRI
   2d300:	f383 8811 	msr	BASEPRI, r3
   2d304:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2d308:	481b      	ldr	r0, [pc, #108]	; (2d378 <k_mem_pool_free_id+0x9c>)
   2d30a:	f001 fa25 	bl	2e758 <z_spin_lock_valid>
   2d30e:	b960      	cbnz	r0, 2d32a <k_mem_pool_free_id+0x4e>
   2d310:	491a      	ldr	r1, [pc, #104]	; (2d37c <k_mem_pool_free_id+0xa0>)
   2d312:	235f      	movs	r3, #95	; 0x5f
   2d314:	4a1a      	ldr	r2, [pc, #104]	; (2d380 <k_mem_pool_free_id+0xa4>)
   2d316:	481b      	ldr	r0, [pc, #108]	; (2d384 <k_mem_pool_free_id+0xa8>)
   2d318:	f004 faae 	bl	31878 <printk>
   2d31c:	481a      	ldr	r0, [pc, #104]	; (2d388 <k_mem_pool_free_id+0xac>)
   2d31e:	f004 faab 	bl	31878 <printk>
   2d322:	215f      	movs	r1, #95	; 0x5f
   2d324:	4816      	ldr	r0, [pc, #88]	; (2d380 <k_mem_pool_free_id+0xa4>)
   2d326:	f004 fab4 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2d32a:	4813      	ldr	r0, [pc, #76]	; (2d378 <k_mem_pool_free_id+0x9c>)
   2d32c:	f001 fa32 	bl	2e794 <z_spin_lock_set_owner>
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   2d330:	f104 0014 	add.w	r0, r4, #20
   2d334:	4428      	add	r0, r5
   2d336:	f005 f9cf 	bl	326d8 <z_unpend_all>

	if (need_sched != 0) {
   2d33a:	b128      	cbz	r0, 2d348 <k_mem_pool_free_id+0x6c>
		z_reschedule(&lock, key);
   2d33c:	4631      	mov	r1, r6
	} else {
		k_spin_unlock(&lock, key);
	}
}
   2d33e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   2d342:	480d      	ldr	r0, [pc, #52]	; (2d378 <k_mem_pool_free_id+0x9c>)
   2d344:	f000 ba98 	b.w	2d878 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2d348:	480b      	ldr	r0, [pc, #44]	; (2d378 <k_mem_pool_free_id+0x9c>)
   2d34a:	f001 fa13 	bl	2e774 <z_spin_unlock_valid>
   2d34e:	b960      	cbnz	r0, 2d36a <k_mem_pool_free_id+0x8e>
   2d350:	490e      	ldr	r1, [pc, #56]	; (2d38c <k_mem_pool_free_id+0xb0>)
   2d352:	2372      	movs	r3, #114	; 0x72
   2d354:	4a0a      	ldr	r2, [pc, #40]	; (2d380 <k_mem_pool_free_id+0xa4>)
   2d356:	480b      	ldr	r0, [pc, #44]	; (2d384 <k_mem_pool_free_id+0xa8>)
   2d358:	f004 fa8e 	bl	31878 <printk>
   2d35c:	480c      	ldr	r0, [pc, #48]	; (2d390 <k_mem_pool_free_id+0xb4>)
   2d35e:	f004 fa8b 	bl	31878 <printk>
   2d362:	2172      	movs	r1, #114	; 0x72
   2d364:	4806      	ldr	r0, [pc, #24]	; (2d380 <k_mem_pool_free_id+0xa4>)
   2d366:	f004 fa94 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2d36a:	f386 8811 	msr	BASEPRI, r6
   2d36e:	f3bf 8f6f 	isb	sy
}
   2d372:	bd70      	pop	{r4, r5, r6, pc}
   2d374:	200290dc 	.word	0x200290dc
   2d378:	200259dc 	.word	0x200259dc
   2d37c:	00035426 	.word	0x00035426
   2d380:	000353f4 	.word	0x000353f4
   2d384:	00034ff7 	.word	0x00034ff7
   2d388:	0003543b 	.word	0x0003543b
   2d38c:	00035450 	.word	0x00035450
   2d390:	00035467 	.word	0x00035467

0002d394 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   2d394:	4601      	mov	r1, r0
   2d396:	4801      	ldr	r0, [pc, #4]	; (2d39c <k_malloc+0x8>)
   2d398:	f005 b93a 	b.w	32610 <k_mem_pool_malloc>
   2d39c:	200290dc 	.word	0x200290dc

0002d3a0 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   2d3a0:	4b03      	ldr	r3, [pc, #12]	; (2d3b0 <z_thread_malloc+0x10>)
{
   2d3a2:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   2d3a4:	689b      	ldr	r3, [r3, #8]
   2d3a6:	6e18      	ldr	r0, [r3, #96]	; 0x60
   2d3a8:	b108      	cbz	r0, 2d3ae <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   2d3aa:	f005 b931 	b.w	32610 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   2d3ae:	4770      	bx	lr
   2d3b0:	200259e0 	.word	0x200259e0

0002d3b4 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   2d3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d3b8:	4604      	mov	r4, r0
   2d3ba:	460e      	mov	r6, r1
   2d3bc:	4690      	mov	r8, r2
   2d3be:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2d3c0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2d3c4:	f04f 0320 	mov.w	r3, #32
   2d3c8:	f3ef 8711 	mrs	r7, BASEPRI
   2d3cc:	f383 8811 	msr	BASEPRI, r3
   2d3d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2d3d4:	4628      	mov	r0, r5
   2d3d6:	f001 f9bf 	bl	2e758 <z_spin_lock_valid>
   2d3da:	b960      	cbnz	r0, 2d3f6 <queue_insert+0x42>
   2d3dc:	4932      	ldr	r1, [pc, #200]	; (2d4a8 <queue_insert+0xf4>)
   2d3de:	235f      	movs	r3, #95	; 0x5f
   2d3e0:	4a32      	ldr	r2, [pc, #200]	; (2d4ac <queue_insert+0xf8>)
   2d3e2:	4833      	ldr	r0, [pc, #204]	; (2d4b0 <queue_insert+0xfc>)
   2d3e4:	f004 fa48 	bl	31878 <printk>
   2d3e8:	4832      	ldr	r0, [pc, #200]	; (2d4b4 <queue_insert+0x100>)
   2d3ea:	f004 fa45 	bl	31878 <printk>
   2d3ee:	215f      	movs	r1, #95	; 0x5f
   2d3f0:	482e      	ldr	r0, [pc, #184]	; (2d4ac <queue_insert+0xf8>)
   2d3f2:	f004 fa4e 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2d3f6:	4628      	mov	r0, r5
   2d3f8:	f001 f9cc 	bl	2e794 <z_spin_lock_set_owner>
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   2d3fc:	f1b9 0f00 	cmp.w	r9, #0
   2d400:	d02c      	beq.n	2d45c <queue_insert+0xa8>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   2d402:	2008      	movs	r0, #8
   2d404:	f7ff ffcc 	bl	2d3a0 <z_thread_malloc>
		if (anode == NULL) {
   2d408:	b9c0      	cbnz	r0, 2d43c <queue_insert+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2d40a:	4628      	mov	r0, r5
   2d40c:	f001 f9b2 	bl	2e774 <z_spin_unlock_valid>
   2d410:	b960      	cbnz	r0, 2d42c <queue_insert+0x78>
   2d412:	4929      	ldr	r1, [pc, #164]	; (2d4b8 <queue_insert+0x104>)
   2d414:	2372      	movs	r3, #114	; 0x72
   2d416:	4a25      	ldr	r2, [pc, #148]	; (2d4ac <queue_insert+0xf8>)
   2d418:	4825      	ldr	r0, [pc, #148]	; (2d4b0 <queue_insert+0xfc>)
   2d41a:	f004 fa2d 	bl	31878 <printk>
   2d41e:	4827      	ldr	r0, [pc, #156]	; (2d4bc <queue_insert+0x108>)
   2d420:	f004 fa2a 	bl	31878 <printk>
   2d424:	2172      	movs	r1, #114	; 0x72
   2d426:	4821      	ldr	r0, [pc, #132]	; (2d4ac <queue_insert+0xf8>)
   2d428:	f004 fa33 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2d42c:	f387 8811 	msr	BASEPRI, r7
   2d430:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   2d434:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   2d438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2d43c:	2301      	movs	r3, #1
		anode->data = data;
   2d43e:	f8c0 8004 	str.w	r8, [r0, #4]
   2d442:	6003      	str	r3, [r0, #0]
   2d444:	6803      	ldr	r3, [r0, #0]
   2d446:	f003 0303 	and.w	r3, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   2d44a:	b95e      	cbnz	r6, 2d464 <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d44c:	6822      	ldr	r2, [r4, #0]
   2d44e:	4313      	orrs	r3, r2
   2d450:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2d452:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2d454:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2d456:	b973      	cbnz	r3, 2d476 <queue_insert+0xc2>
	list->tail = node;
   2d458:	6060      	str	r0, [r4, #4]
   2d45a:	e00c      	b.n	2d476 <queue_insert+0xc2>
	node->next_and_flags = flags;
   2d45c:	f8c8 9000 	str.w	r9, [r8]
   2d460:	4640      	mov	r0, r8
   2d462:	e7ef      	b.n	2d444 <queue_insert+0x90>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2d464:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2d466:	f032 0203 	bics.w	r2, r2, #3
   2d46a:	d115      	bne.n	2d498 <queue_insert+0xe4>
Z_GENLIST_APPEND(sflist, sfnode)
   2d46c:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d46e:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2d470:	b962      	cbnz	r2, 2d48c <queue_insert+0xd8>
	list->head = node;
   2d472:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2d476:	2104      	movs	r1, #4
   2d478:	f104 000c 	add.w	r0, r4, #12
   2d47c:	f005 f9fc 	bl	32878 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2d480:	4628      	mov	r0, r5
   2d482:	4639      	mov	r1, r7
   2d484:	f000 f9f8 	bl	2d878 <z_reschedule>
	return 0;
   2d488:	2000      	movs	r0, #0
   2d48a:	e7d5      	b.n	2d438 <queue_insert+0x84>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d48c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d48e:	f003 0303 	and.w	r3, r3, #3
   2d492:	4303      	orrs	r3, r0
   2d494:	6013      	str	r3, [r2, #0]
   2d496:	e7df      	b.n	2d458 <queue_insert+0xa4>
   2d498:	4313      	orrs	r3, r2
   2d49a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d49c:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d49e:	f003 0303 	and.w	r3, r3, #3
   2d4a2:	4318      	orrs	r0, r3
   2d4a4:	6030      	str	r0, [r6, #0]
   2d4a6:	e7e6      	b.n	2d476 <queue_insert+0xc2>
   2d4a8:	00035426 	.word	0x00035426
   2d4ac:	000353f4 	.word	0x000353f4
   2d4b0:	00034ff7 	.word	0x00034ff7
   2d4b4:	0003543b 	.word	0x0003543b
   2d4b8:	00035450 	.word	0x00035450
   2d4bc:	00035467 	.word	0x00035467

0002d4c0 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   2d4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d4c4:	4604      	mov	r4, r0
   2d4c6:	b089      	sub	sp, #36	; 0x24
   2d4c8:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2d4ca:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2d4ce:	f04f 0320 	mov.w	r3, #32
   2d4d2:	f3ef 8811 	mrs	r8, BASEPRI
   2d4d6:	f383 8811 	msr	BASEPRI, r3
   2d4da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2d4de:	4628      	mov	r0, r5
   2d4e0:	f001 f93a 	bl	2e758 <z_spin_lock_valid>
   2d4e4:	b960      	cbnz	r0, 2d500 <z_impl_k_queue_get+0x40>
   2d4e6:	4967      	ldr	r1, [pc, #412]	; (2d684 <z_impl_k_queue_get+0x1c4>)
   2d4e8:	235f      	movs	r3, #95	; 0x5f
   2d4ea:	4a67      	ldr	r2, [pc, #412]	; (2d688 <z_impl_k_queue_get+0x1c8>)
   2d4ec:	4867      	ldr	r0, [pc, #412]	; (2d68c <z_impl_k_queue_get+0x1cc>)
   2d4ee:	f004 f9c3 	bl	31878 <printk>
   2d4f2:	4867      	ldr	r0, [pc, #412]	; (2d690 <z_impl_k_queue_get+0x1d0>)
   2d4f4:	f004 f9c0 	bl	31878 <printk>
   2d4f8:	215f      	movs	r1, #95	; 0x5f
   2d4fa:	4863      	ldr	r0, [pc, #396]	; (2d688 <z_impl_k_queue_get+0x1c8>)
   2d4fc:	f004 f9c9 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2d500:	4628      	mov	r0, r5
   2d502:	f001 f947 	bl	2e794 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   2d506:	6820      	ldr	r0, [r4, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2d508:	b320      	cbz	r0, 2d554 <z_impl_k_queue_get+0x94>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2d50a:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2d50c:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2d50e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2d512:	4290      	cmp	r0, r2
	list->tail = node;
   2d514:	bf08      	it	eq
   2d516:	6063      	streq	r3, [r4, #4]
	list->head = node;
   2d518:	6023      	str	r3, [r4, #0]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2d51a:	2101      	movs	r1, #1
   2d51c:	f005 f890 	bl	32640 <z_queue_node_peek>
   2d520:	4606      	mov	r6, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2d522:	4628      	mov	r0, r5
   2d524:	f001 f926 	bl	2e774 <z_spin_unlock_valid>
   2d528:	b960      	cbnz	r0, 2d544 <z_impl_k_queue_get+0x84>
   2d52a:	495a      	ldr	r1, [pc, #360]	; (2d694 <z_impl_k_queue_get+0x1d4>)
   2d52c:	2372      	movs	r3, #114	; 0x72
   2d52e:	4a56      	ldr	r2, [pc, #344]	; (2d688 <z_impl_k_queue_get+0x1c8>)
   2d530:	4856      	ldr	r0, [pc, #344]	; (2d68c <z_impl_k_queue_get+0x1cc>)
   2d532:	f004 f9a1 	bl	31878 <printk>
   2d536:	4858      	ldr	r0, [pc, #352]	; (2d698 <z_impl_k_queue_get+0x1d8>)
   2d538:	f004 f99e 	bl	31878 <printk>
   2d53c:	2172      	movs	r1, #114	; 0x72
   2d53e:	4852      	ldr	r0, [pc, #328]	; (2d688 <z_impl_k_queue_get+0x1c8>)
   2d540:	f004 f9a7 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2d544:	f388 8811 	msr	BASEPRI, r8
   2d548:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   2d54c:	4630      	mov	r0, r6
   2d54e:	b009      	add	sp, #36	; 0x24
   2d550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d554:	4628      	mov	r0, r5
	if (timeout == K_NO_WAIT) {
   2d556:	b9af      	cbnz	r7, 2d584 <z_impl_k_queue_get+0xc4>
   2d558:	f001 f90c 	bl	2e774 <z_spin_unlock_valid>
   2d55c:	b960      	cbnz	r0, 2d578 <z_impl_k_queue_get+0xb8>
   2d55e:	494d      	ldr	r1, [pc, #308]	; (2d694 <z_impl_k_queue_get+0x1d4>)
   2d560:	2372      	movs	r3, #114	; 0x72
   2d562:	4a49      	ldr	r2, [pc, #292]	; (2d688 <z_impl_k_queue_get+0x1c8>)
   2d564:	4849      	ldr	r0, [pc, #292]	; (2d68c <z_impl_k_queue_get+0x1cc>)
   2d566:	f004 f987 	bl	31878 <printk>
   2d56a:	484b      	ldr	r0, [pc, #300]	; (2d698 <z_impl_k_queue_get+0x1d8>)
   2d56c:	f004 f984 	bl	31878 <printk>
   2d570:	2172      	movs	r1, #114	; 0x72
   2d572:	4845      	ldr	r0, [pc, #276]	; (2d688 <z_impl_k_queue_get+0x1c8>)
   2d574:	f004 f98d 	bl	31892 <assert_post_action>
   2d578:	f388 8811 	msr	BASEPRI, r8
   2d57c:	f3bf 8f6f 	isb	sy
			return NULL;
   2d580:	2600      	movs	r6, #0
   2d582:	e7e3      	b.n	2d54c <z_impl_k_queue_get+0x8c>
   2d584:	f001 f8f6 	bl	2e774 <z_spin_unlock_valid>
   2d588:	b960      	cbnz	r0, 2d5a4 <z_impl_k_queue_get+0xe4>
   2d58a:	4942      	ldr	r1, [pc, #264]	; (2d694 <z_impl_k_queue_get+0x1d4>)
   2d58c:	2372      	movs	r3, #114	; 0x72
   2d58e:	4a3e      	ldr	r2, [pc, #248]	; (2d688 <z_impl_k_queue_get+0x1c8>)
   2d590:	483e      	ldr	r0, [pc, #248]	; (2d68c <z_impl_k_queue_get+0x1cc>)
   2d592:	f004 f971 	bl	31878 <printk>
   2d596:	4840      	ldr	r0, [pc, #256]	; (2d698 <z_impl_k_queue_get+0x1d8>)
   2d598:	f004 f96e 	bl	31878 <printk>
   2d59c:	2172      	movs	r1, #114	; 0x72
   2d59e:	483a      	ldr	r0, [pc, #232]	; (2d688 <z_impl_k_queue_get+0x1c8>)
   2d5a0:	f004 f977 	bl	31892 <assert_post_action>
   2d5a4:	f388 8811 	msr	BASEPRI, r8
   2d5a8:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   2d5ac:	2200      	movs	r2, #0
   2d5ae:	4623      	mov	r3, r4
   2d5b0:	2104      	movs	r1, #4
   2d5b2:	a803      	add	r0, sp, #12
   2d5b4:	f002 f850 	bl	2f658 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   2d5b8:	1c7a      	adds	r2, r7, #1
   2d5ba:	d002      	beq.n	2d5c2 <z_impl_k_queue_get+0x102>
   2d5bc:	f005 f8f8 	bl	327b0 <z_impl_k_uptime_get>
   2d5c0:	4683      	mov	fp, r0
{
   2d5c2:	f04f 0900 	mov.w	r9, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2d5c6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 2d688 <z_impl_k_queue_get+0x1c8>
   2d5ca:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 2d68c <z_impl_k_queue_get+0x1cc>
		event.state = K_POLL_STATE_NOT_READY;
   2d5ce:	9b06      	ldr	r3, [sp, #24]
   2d5d0:	f36f 3310 	bfc	r3, #12, #5
   2d5d4:	9306      	str	r3, [sp, #24]
	if (z_syscall_trap()) {
		return (int) z_arch_syscall_invoke3(*(u32_t *)&events, *(u32_t *)&num_events, *(u32_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   2d5d6:	2101      	movs	r1, #1
   2d5d8:	eba7 0209 	sub.w	r2, r7, r9
   2d5dc:	a803      	add	r0, sp, #12
   2d5de:	f002 f891 	bl	2f704 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   2d5e2:	b108      	cbz	r0, 2d5e8 <z_impl_k_queue_get+0x128>
   2d5e4:	300b      	adds	r0, #11
   2d5e6:	d1cb      	bne.n	2d580 <z_impl_k_queue_get+0xc0>
	__asm__ volatile(
   2d5e8:	f04f 0320 	mov.w	r3, #32
   2d5ec:	f3ef 8211 	mrs	r2, BASEPRI
   2d5f0:	f383 8811 	msr	BASEPRI, r3
   2d5f4:	f3bf 8f6f 	isb	sy
   2d5f8:	4628      	mov	r0, r5
   2d5fa:	9201      	str	r2, [sp, #4]
   2d5fc:	f001 f8ac 	bl	2e758 <z_spin_lock_valid>
   2d600:	b960      	cbnz	r0, 2d61c <z_impl_k_queue_get+0x15c>
   2d602:	4920      	ldr	r1, [pc, #128]	; (2d684 <z_impl_k_queue_get+0x1c4>)
   2d604:	235f      	movs	r3, #95	; 0x5f
   2d606:	4642      	mov	r2, r8
   2d608:	4650      	mov	r0, sl
   2d60a:	f004 f935 	bl	31878 <printk>
   2d60e:	4820      	ldr	r0, [pc, #128]	; (2d690 <z_impl_k_queue_get+0x1d0>)
   2d610:	f004 f932 	bl	31878 <printk>
   2d614:	215f      	movs	r1, #95	; 0x5f
   2d616:	4640      	mov	r0, r8
   2d618:	f004 f93b 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2d61c:	4628      	mov	r0, r5
   2d61e:	f001 f8b9 	bl	2e794 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   2d622:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   2d624:	b138      	cbz	r0, 2d636 <z_impl_k_queue_get+0x176>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2d626:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2d628:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2d62a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2d62e:	4290      	cmp	r0, r2
	list->head = node;
   2d630:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2d632:	bf08      	it	eq
   2d634:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   2d636:	2101      	movs	r1, #1
   2d638:	f005 f802 	bl	32640 <z_queue_node_peek>
   2d63c:	4606      	mov	r6, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2d63e:	4628      	mov	r0, r5
   2d640:	f001 f898 	bl	2e774 <z_spin_unlock_valid>
   2d644:	b960      	cbnz	r0, 2d660 <z_impl_k_queue_get+0x1a0>
   2d646:	4913      	ldr	r1, [pc, #76]	; (2d694 <z_impl_k_queue_get+0x1d4>)
   2d648:	2372      	movs	r3, #114	; 0x72
   2d64a:	4642      	mov	r2, r8
   2d64c:	4650      	mov	r0, sl
   2d64e:	f004 f913 	bl	31878 <printk>
   2d652:	4811      	ldr	r0, [pc, #68]	; (2d698 <z_impl_k_queue_get+0x1d8>)
   2d654:	f004 f910 	bl	31878 <printk>
   2d658:	2172      	movs	r1, #114	; 0x72
   2d65a:	4640      	mov	r0, r8
   2d65c:	f004 f919 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2d660:	9b01      	ldr	r3, [sp, #4]
   2d662:	f383 8811 	msr	BASEPRI, r3
   2d666:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   2d66a:	2e00      	cmp	r6, #0
   2d66c:	f47f af6e 	bne.w	2d54c <z_impl_k_queue_get+0x8c>
   2d670:	1c7b      	adds	r3, r7, #1
   2d672:	d0ac      	beq.n	2d5ce <z_impl_k_queue_get+0x10e>
	return z_impl_k_uptime_get();
   2d674:	f005 f89c 	bl	327b0 <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   2d678:	eba0 090b 	sub.w	r9, r0, fp
	} while (!val && !done);
   2d67c:	454f      	cmp	r7, r9
   2d67e:	daa6      	bge.n	2d5ce <z_impl_k_queue_get+0x10e>
   2d680:	e77e      	b.n	2d580 <z_impl_k_queue_get+0xc0>
   2d682:	bf00      	nop
   2d684:	00035426 	.word	0x00035426
   2d688:	000353f4 	.word	0x000353f4
   2d68c:	00034ff7 	.word	0x00034ff7
   2d690:	0003543b 	.word	0x0003543b
   2d694:	00035450 	.word	0x00035450
   2d698:	00035467 	.word	0x00035467

0002d69c <resched.part.15>:
   2d69c:	f3ef 8005 	mrs	r0, IPSR
   2d6a0:	280d      	cmp	r0, #13
   2d6a2:	d809      	bhi.n	2d6b8 <resched.part.15+0x1c>
   2d6a4:	b128      	cbz	r0, 2d6b2 <resched.part.15+0x16>
   2d6a6:	4b05      	ldr	r3, [pc, #20]	; (2d6bc <resched.part.15+0x20>)
   2d6a8:	6858      	ldr	r0, [r3, #4]
   2d6aa:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   2d6ae:	f3c0 20c0 	ubfx	r0, r0, #11, #1
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
}
   2d6b2:	f080 0001 	eor.w	r0, r0, #1
   2d6b6:	4770      	bx	lr
   2d6b8:	2001      	movs	r0, #1
   2d6ba:	e7fa      	b.n	2d6b2 <resched.part.15+0x16>
   2d6bc:	e000ed00 	.word	0xe000ed00

0002d6c0 <pended_on.isra.16>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   2d6c0:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   2d6c2:	b510      	push	{r4, lr}
   2d6c4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   2d6c6:	b95b      	cbnz	r3, 2d6e0 <pended_on.isra.16+0x20>
   2d6c8:	4906      	ldr	r1, [pc, #24]	; (2d6e4 <pended_on.isra.16+0x24>)
   2d6ca:	4807      	ldr	r0, [pc, #28]	; (2d6e8 <pended_on.isra.16+0x28>)
   2d6cc:	f240 1383 	movw	r3, #387	; 0x183
   2d6d0:	4a06      	ldr	r2, [pc, #24]	; (2d6ec <pended_on.isra.16+0x2c>)
   2d6d2:	f004 f8d1 	bl	31878 <printk>
   2d6d6:	f240 1183 	movw	r1, #387	; 0x183
   2d6da:	4804      	ldr	r0, [pc, #16]	; (2d6ec <pended_on.isra.16+0x2c>)
   2d6dc:	f004 f8d9 	bl	31892 <assert_post_action>
}
   2d6e0:	6820      	ldr	r0, [r4, #0]
   2d6e2:	bd10      	pop	{r4, pc}
   2d6e4:	0003689f 	.word	0x0003689f
   2d6e8:	00034ff7 	.word	0x00034ff7
   2d6ec:	00036871 	.word	0x00036871

0002d6f0 <z_reset_time_slice>:
{
   2d6f0:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   2d6f2:	4c08      	ldr	r4, [pc, #32]	; (2d714 <z_reset_time_slice+0x24>)
   2d6f4:	6823      	ldr	r3, [r4, #0]
   2d6f6:	b15b      	cbz	r3, 2d710 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   2d6f8:	f7ee f8d0 	bl	1b89c <z_clock_elapsed>
   2d6fc:	6823      	ldr	r3, [r4, #0]
   2d6fe:	4a06      	ldr	r2, [pc, #24]	; (2d718 <z_reset_time_slice+0x28>)
   2d700:	4418      	add	r0, r3
   2d702:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   2d704:	2100      	movs	r1, #0
}
   2d706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   2d70a:	4618      	mov	r0, r3
   2d70c:	f001 bbfc 	b.w	2ef08 <z_set_timeout_expiry>
}
   2d710:	bd10      	pop	{r4, pc}
   2d712:	bf00      	nop
   2d714:	20025a20 	.word	0x20025a20
   2d718:	200259e0 	.word	0x200259e0

0002d71c <k_sched_time_slice_set>:
{
   2d71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d71e:	4607      	mov	r7, r0
   2d720:	460d      	mov	r5, r1
	__asm__ volatile(
   2d722:	f04f 0320 	mov.w	r3, #32
   2d726:	f3ef 8411 	mrs	r4, BASEPRI
   2d72a:	f383 8811 	msr	BASEPRI, r3
   2d72e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2d732:	481f      	ldr	r0, [pc, #124]	; (2d7b0 <k_sched_time_slice_set+0x94>)
   2d734:	f001 f810 	bl	2e758 <z_spin_lock_valid>
   2d738:	b960      	cbnz	r0, 2d754 <k_sched_time_slice_set+0x38>
   2d73a:	491e      	ldr	r1, [pc, #120]	; (2d7b4 <k_sched_time_slice_set+0x98>)
   2d73c:	235f      	movs	r3, #95	; 0x5f
   2d73e:	4a1e      	ldr	r2, [pc, #120]	; (2d7b8 <k_sched_time_slice_set+0x9c>)
   2d740:	481e      	ldr	r0, [pc, #120]	; (2d7bc <k_sched_time_slice_set+0xa0>)
   2d742:	f004 f899 	bl	31878 <printk>
   2d746:	481e      	ldr	r0, [pc, #120]	; (2d7c0 <k_sched_time_slice_set+0xa4>)
   2d748:	f004 f896 	bl	31878 <printk>
   2d74c:	215f      	movs	r1, #95	; 0x5f
   2d74e:	481a      	ldr	r0, [pc, #104]	; (2d7b8 <k_sched_time_slice_set+0x9c>)
   2d750:	f004 f89f 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2d754:	4816      	ldr	r0, [pc, #88]	; (2d7b0 <k_sched_time_slice_set+0x94>)
   2d756:	f001 f81d 	bl	2e794 <z_spin_lock_set_owner>

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
   2d75a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   2d75e:	2200      	movs	r2, #0
   2d760:	f240 30e7 	movw	r0, #999	; 0x3e7
   2d764:	2100      	movs	r1, #0
   2d766:	4b17      	ldr	r3, [pc, #92]	; (2d7c4 <k_sched_time_slice_set+0xa8>)
   2d768:	fbc6 0107 	smlal	r0, r1, r6, r7
   2d76c:	611a      	str	r2, [r3, #16]
   2d76e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2d772:	2300      	movs	r3, #0
   2d774:	f7eb f810 	bl	18798 <__aeabi_ldivmod>
   2d778:	4b13      	ldr	r3, [pc, #76]	; (2d7c8 <k_sched_time_slice_set+0xac>)
   2d77a:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   2d77c:	4b13      	ldr	r3, [pc, #76]	; (2d7cc <k_sched_time_slice_set+0xb0>)
   2d77e:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   2d780:	f7ff ffb6 	bl	2d6f0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2d784:	480a      	ldr	r0, [pc, #40]	; (2d7b0 <k_sched_time_slice_set+0x94>)
   2d786:	f000 fff5 	bl	2e774 <z_spin_unlock_valid>
   2d78a:	b960      	cbnz	r0, 2d7a6 <k_sched_time_slice_set+0x8a>
   2d78c:	4910      	ldr	r1, [pc, #64]	; (2d7d0 <k_sched_time_slice_set+0xb4>)
   2d78e:	2372      	movs	r3, #114	; 0x72
   2d790:	4a09      	ldr	r2, [pc, #36]	; (2d7b8 <k_sched_time_slice_set+0x9c>)
   2d792:	480a      	ldr	r0, [pc, #40]	; (2d7bc <k_sched_time_slice_set+0xa0>)
   2d794:	f004 f870 	bl	31878 <printk>
   2d798:	480e      	ldr	r0, [pc, #56]	; (2d7d4 <k_sched_time_slice_set+0xb8>)
   2d79a:	f004 f86d 	bl	31878 <printk>
   2d79e:	2172      	movs	r1, #114	; 0x72
   2d7a0:	4805      	ldr	r0, [pc, #20]	; (2d7b8 <k_sched_time_slice_set+0x9c>)
   2d7a2:	f004 f876 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2d7a6:	f384 8811 	msr	BASEPRI, r4
   2d7aa:	f3bf 8f6f 	isb	sy
}
   2d7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d7b0:	20025a18 	.word	0x20025a18
   2d7b4:	00035426 	.word	0x00035426
   2d7b8:	000353f4 	.word	0x000353f4
   2d7bc:	00034ff7 	.word	0x00034ff7
   2d7c0:	0003543b 	.word	0x0003543b
   2d7c4:	200259e0 	.word	0x200259e0
   2d7c8:	20025a20 	.word	0x20025a20
   2d7cc:	20025a1c 	.word	0x20025a1c
   2d7d0:	00035450 	.word	0x00035450
   2d7d4:	00035467 	.word	0x00035467

0002d7d8 <z_unpend_thread_no_timeout>:
{
   2d7d8:	b538      	push	{r3, r4, r5, lr}
   2d7da:	4604      	mov	r4, r0
	__asm__ volatile(
   2d7dc:	f04f 0320 	mov.w	r3, #32
   2d7e0:	f3ef 8511 	mrs	r5, BASEPRI
   2d7e4:	f383 8811 	msr	BASEPRI, r3
   2d7e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2d7ec:	481b      	ldr	r0, [pc, #108]	; (2d85c <z_unpend_thread_no_timeout+0x84>)
   2d7ee:	f000 ffb3 	bl	2e758 <z_spin_lock_valid>
   2d7f2:	b960      	cbnz	r0, 2d80e <z_unpend_thread_no_timeout+0x36>
   2d7f4:	491a      	ldr	r1, [pc, #104]	; (2d860 <z_unpend_thread_no_timeout+0x88>)
   2d7f6:	235f      	movs	r3, #95	; 0x5f
   2d7f8:	4a1a      	ldr	r2, [pc, #104]	; (2d864 <z_unpend_thread_no_timeout+0x8c>)
   2d7fa:	481b      	ldr	r0, [pc, #108]	; (2d868 <z_unpend_thread_no_timeout+0x90>)
   2d7fc:	f004 f83c 	bl	31878 <printk>
   2d800:	481a      	ldr	r0, [pc, #104]	; (2d86c <z_unpend_thread_no_timeout+0x94>)
   2d802:	f004 f839 	bl	31878 <printk>
   2d806:	215f      	movs	r1, #95	; 0x5f
   2d808:	4816      	ldr	r0, [pc, #88]	; (2d864 <z_unpend_thread_no_timeout+0x8c>)
   2d80a:	f004 f842 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2d80e:	4813      	ldr	r0, [pc, #76]	; (2d85c <z_unpend_thread_no_timeout+0x84>)
   2d810:	f000 ffc0 	bl	2e794 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2d814:	f104 0008 	add.w	r0, r4, #8
   2d818:	f7ff ff52 	bl	2d6c0 <pended_on.isra.16>
   2d81c:	4621      	mov	r1, r4
   2d81e:	f000 f8e5 	bl	2d9ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2d822:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2d824:	480d      	ldr	r0, [pc, #52]	; (2d85c <z_unpend_thread_no_timeout+0x84>)
   2d826:	f023 0302 	bic.w	r3, r3, #2
   2d82a:	7363      	strb	r3, [r4, #13]
   2d82c:	f000 ffa2 	bl	2e774 <z_spin_unlock_valid>
   2d830:	b960      	cbnz	r0, 2d84c <z_unpend_thread_no_timeout+0x74>
   2d832:	490f      	ldr	r1, [pc, #60]	; (2d870 <z_unpend_thread_no_timeout+0x98>)
   2d834:	2372      	movs	r3, #114	; 0x72
   2d836:	4a0b      	ldr	r2, [pc, #44]	; (2d864 <z_unpend_thread_no_timeout+0x8c>)
   2d838:	480b      	ldr	r0, [pc, #44]	; (2d868 <z_unpend_thread_no_timeout+0x90>)
   2d83a:	f004 f81d 	bl	31878 <printk>
   2d83e:	480d      	ldr	r0, [pc, #52]	; (2d874 <z_unpend_thread_no_timeout+0x9c>)
   2d840:	f004 f81a 	bl	31878 <printk>
   2d844:	2172      	movs	r1, #114	; 0x72
   2d846:	4807      	ldr	r0, [pc, #28]	; (2d864 <z_unpend_thread_no_timeout+0x8c>)
   2d848:	f004 f823 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2d84c:	f385 8811 	msr	BASEPRI, r5
   2d850:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   2d854:	2300      	movs	r3, #0
   2d856:	60a3      	str	r3, [r4, #8]
}
   2d858:	bd38      	pop	{r3, r4, r5, pc}
   2d85a:	bf00      	nop
   2d85c:	20025a18 	.word	0x20025a18
   2d860:	00035426 	.word	0x00035426
   2d864:	000353f4 	.word	0x000353f4
   2d868:	00034ff7 	.word	0x00034ff7
   2d86c:	0003543b 	.word	0x0003543b
   2d870:	00035450 	.word	0x00035450
   2d874:	00035467 	.word	0x00035467

0002d878 <z_reschedule>:

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   2d878:	b510      	push	{r4, lr}
   2d87a:	4602      	mov	r2, r0
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
   2d87c:	460c      	mov	r4, r1
   2d87e:	b9c1      	cbnz	r1, 2d8b2 <z_reschedule+0x3a>
   2d880:	f7ff ff0c 	bl	2d69c <resched.part.15>
	if (resched(key.key)) {
   2d884:	b1a8      	cbz	r0, 2d8b2 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2d886:	4610      	mov	r0, r2
   2d888:	f000 ff74 	bl	2e774 <z_spin_unlock_valid>
   2d88c:	b960      	cbnz	r0, 2d8a8 <z_reschedule+0x30>
   2d88e:	4914      	ldr	r1, [pc, #80]	; (2d8e0 <z_reschedule+0x68>)
   2d890:	2389      	movs	r3, #137	; 0x89
   2d892:	4a14      	ldr	r2, [pc, #80]	; (2d8e4 <z_reschedule+0x6c>)
   2d894:	4814      	ldr	r0, [pc, #80]	; (2d8e8 <z_reschedule+0x70>)
   2d896:	f003 ffef 	bl	31878 <printk>
   2d89a:	4814      	ldr	r0, [pc, #80]	; (2d8ec <z_reschedule+0x74>)
   2d89c:	f003 ffec 	bl	31878 <printk>
   2d8a0:	2189      	movs	r1, #137	; 0x89
   2d8a2:	4810      	ldr	r0, [pc, #64]	; (2d8e4 <z_reschedule+0x6c>)
   2d8a4:	f003 fff5 	bl	31892 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   2d8a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d8ac:	2000      	movs	r0, #0
   2d8ae:	f7ee b955 	b.w	1bb5c <z_arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2d8b2:	4610      	mov	r0, r2
   2d8b4:	f000 ff5e 	bl	2e774 <z_spin_unlock_valid>
   2d8b8:	b960      	cbnz	r0, 2d8d4 <z_reschedule+0x5c>
   2d8ba:	4909      	ldr	r1, [pc, #36]	; (2d8e0 <z_reschedule+0x68>)
   2d8bc:	2372      	movs	r3, #114	; 0x72
   2d8be:	4a09      	ldr	r2, [pc, #36]	; (2d8e4 <z_reschedule+0x6c>)
   2d8c0:	4809      	ldr	r0, [pc, #36]	; (2d8e8 <z_reschedule+0x70>)
   2d8c2:	f003 ffd9 	bl	31878 <printk>
   2d8c6:	4809      	ldr	r0, [pc, #36]	; (2d8ec <z_reschedule+0x74>)
   2d8c8:	f003 ffd6 	bl	31878 <printk>
   2d8cc:	2172      	movs	r1, #114	; 0x72
   2d8ce:	4805      	ldr	r0, [pc, #20]	; (2d8e4 <z_reschedule+0x6c>)
   2d8d0:	f003 ffdf 	bl	31892 <assert_post_action>
   2d8d4:	f384 8811 	msr	BASEPRI, r4
   2d8d8:	f3bf 8f6f 	isb	sy
   2d8dc:	bd10      	pop	{r4, pc}
   2d8de:	bf00      	nop
   2d8e0:	00035450 	.word	0x00035450
   2d8e4:	000353f4 	.word	0x000353f4
   2d8e8:	00034ff7 	.word	0x00034ff7
   2d8ec:	00035467 	.word	0x00035467

0002d8f0 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   2d8f0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2d8f2:	f04f 0320 	mov.w	r3, #32
   2d8f6:	f3ef 8511 	mrs	r5, BASEPRI
   2d8fa:	f383 8811 	msr	BASEPRI, r3
   2d8fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2d902:	482d      	ldr	r0, [pc, #180]	; (2d9b8 <k_sched_lock+0xc8>)
   2d904:	f000 ff28 	bl	2e758 <z_spin_lock_valid>
   2d908:	b960      	cbnz	r0, 2d924 <k_sched_lock+0x34>
   2d90a:	492c      	ldr	r1, [pc, #176]	; (2d9bc <k_sched_lock+0xcc>)
   2d90c:	235f      	movs	r3, #95	; 0x5f
   2d90e:	4a2c      	ldr	r2, [pc, #176]	; (2d9c0 <k_sched_lock+0xd0>)
   2d910:	482c      	ldr	r0, [pc, #176]	; (2d9c4 <k_sched_lock+0xd4>)
   2d912:	f003 ffb1 	bl	31878 <printk>
   2d916:	482c      	ldr	r0, [pc, #176]	; (2d9c8 <k_sched_lock+0xd8>)
   2d918:	f003 ffae 	bl	31878 <printk>
   2d91c:	215f      	movs	r1, #95	; 0x5f
   2d91e:	4828      	ldr	r0, [pc, #160]	; (2d9c0 <k_sched_lock+0xd0>)
   2d920:	f003 ffb7 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2d924:	4824      	ldr	r0, [pc, #144]	; (2d9b8 <k_sched_lock+0xc8>)
   2d926:	f000 ff35 	bl	2e794 <z_spin_lock_set_owner>
   2d92a:	f3ef 8305 	mrs	r3, IPSR
   2d92e:	2b0d      	cmp	r3, #13
   2d930:	d804      	bhi.n	2d93c <k_sched_lock+0x4c>
   2d932:	b193      	cbz	r3, 2d95a <k_sched_lock+0x6a>
   2d934:	4b25      	ldr	r3, [pc, #148]	; (2d9cc <k_sched_lock+0xdc>)
   2d936:	685b      	ldr	r3, [r3, #4]
   2d938:	051b      	lsls	r3, r3, #20
   2d93a:	d40e      	bmi.n	2d95a <k_sched_lock+0x6a>
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_arch_is_in_isr(), "");
   2d93c:	4924      	ldr	r1, [pc, #144]	; (2d9d0 <k_sched_lock+0xe0>)
   2d93e:	f44f 7386 	mov.w	r3, #268	; 0x10c
   2d942:	4a24      	ldr	r2, [pc, #144]	; (2d9d4 <k_sched_lock+0xe4>)
   2d944:	481f      	ldr	r0, [pc, #124]	; (2d9c4 <k_sched_lock+0xd4>)
   2d946:	f003 ff97 	bl	31878 <printk>
   2d94a:	4823      	ldr	r0, [pc, #140]	; (2d9d8 <k_sched_lock+0xe8>)
   2d94c:	f003 ff94 	bl	31878 <printk>
   2d950:	f44f 7186 	mov.w	r1, #268	; 0x10c
   2d954:	481f      	ldr	r0, [pc, #124]	; (2d9d4 <k_sched_lock+0xe4>)
   2d956:	f003 ff9c 	bl	31892 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   2d95a:	4c20      	ldr	r4, [pc, #128]	; (2d9dc <k_sched_lock+0xec>)
   2d95c:	68a2      	ldr	r2, [r4, #8]
   2d95e:	7bd2      	ldrb	r2, [r2, #15]
   2d960:	2a01      	cmp	r2, #1
   2d962:	d10e      	bne.n	2d982 <k_sched_lock+0x92>
   2d964:	491e      	ldr	r1, [pc, #120]	; (2d9e0 <k_sched_lock+0xf0>)
   2d966:	f240 130d 	movw	r3, #269	; 0x10d
   2d96a:	4a1a      	ldr	r2, [pc, #104]	; (2d9d4 <k_sched_lock+0xe4>)
   2d96c:	4815      	ldr	r0, [pc, #84]	; (2d9c4 <k_sched_lock+0xd4>)
   2d96e:	f003 ff83 	bl	31878 <printk>
   2d972:	4819      	ldr	r0, [pc, #100]	; (2d9d8 <k_sched_lock+0xe8>)
   2d974:	f003 ff80 	bl	31878 <printk>
   2d978:	f240 110d 	movw	r1, #269	; 0x10d
   2d97c:	4815      	ldr	r0, [pc, #84]	; (2d9d4 <k_sched_lock+0xe4>)
   2d97e:	f003 ff88 	bl	31892 <assert_post_action>

	--_current->base.sched_locked;
   2d982:	68a2      	ldr	r2, [r4, #8]
   2d984:	7bd3      	ldrb	r3, [r2, #15]
   2d986:	3b01      	subs	r3, #1
   2d988:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2d98a:	480b      	ldr	r0, [pc, #44]	; (2d9b8 <k_sched_lock+0xc8>)
   2d98c:	f000 fef2 	bl	2e774 <z_spin_unlock_valid>
   2d990:	b960      	cbnz	r0, 2d9ac <k_sched_lock+0xbc>
   2d992:	4914      	ldr	r1, [pc, #80]	; (2d9e4 <k_sched_lock+0xf4>)
   2d994:	2372      	movs	r3, #114	; 0x72
   2d996:	4a0a      	ldr	r2, [pc, #40]	; (2d9c0 <k_sched_lock+0xd0>)
   2d998:	480a      	ldr	r0, [pc, #40]	; (2d9c4 <k_sched_lock+0xd4>)
   2d99a:	f003 ff6d 	bl	31878 <printk>
   2d99e:	4812      	ldr	r0, [pc, #72]	; (2d9e8 <k_sched_lock+0xf8>)
   2d9a0:	f003 ff6a 	bl	31878 <printk>
   2d9a4:	2172      	movs	r1, #114	; 0x72
   2d9a6:	4806      	ldr	r0, [pc, #24]	; (2d9c0 <k_sched_lock+0xd0>)
   2d9a8:	f003 ff73 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2d9ac:	f385 8811 	msr	BASEPRI, r5
   2d9b0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   2d9b4:	bd38      	pop	{r3, r4, r5, pc}
   2d9b6:	bf00      	nop
   2d9b8:	20025a18 	.word	0x20025a18
   2d9bc:	00035426 	.word	0x00035426
   2d9c0:	000353f4 	.word	0x000353f4
   2d9c4:	00034ff7 	.word	0x00034ff7
   2d9c8:	0003543b 	.word	0x0003543b
   2d9cc:	e000ed00 	.word	0xe000ed00
   2d9d0:	0003680d 	.word	0x0003680d
   2d9d4:	000367d6 	.word	0x000367d6
   2d9d8:	000367d3 	.word	0x000367d3
   2d9dc:	200259e0 	.word	0x200259e0
   2d9e0:	00036821 	.word	0x00036821
   2d9e4:	00035450 	.word	0x00035450
   2d9e8:	00035467 	.word	0x00035467

0002d9ec <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   2d9ec:	4b12      	ldr	r3, [pc, #72]	; (2da38 <z_priq_dumb_remove+0x4c>)
{
   2d9ee:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   2d9f0:	f103 0228 	add.w	r2, r3, #40	; 0x28
   2d9f4:	4282      	cmp	r2, r0
{
   2d9f6:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   2d9f8:	d105      	bne.n	2da06 <z_priq_dumb_remove+0x1a>
   2d9fa:	689b      	ldr	r3, [r3, #8]
   2d9fc:	428b      	cmp	r3, r1
   2d9fe:	d102      	bne.n	2da06 <z_priq_dumb_remove+0x1a>
   2da00:	7b4b      	ldrb	r3, [r1, #13]
   2da02:	06db      	lsls	r3, r3, #27
   2da04:	d116      	bne.n	2da34 <z_priq_dumb_remove+0x48>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2da06:	4b0d      	ldr	r3, [pc, #52]	; (2da3c <z_priq_dumb_remove+0x50>)
   2da08:	429c      	cmp	r4, r3
   2da0a:	d10b      	bne.n	2da24 <z_priq_dumb_remove+0x38>
   2da0c:	490c      	ldr	r1, [pc, #48]	; (2da40 <z_priq_dumb_remove+0x54>)
   2da0e:	480d      	ldr	r0, [pc, #52]	; (2da44 <z_priq_dumb_remove+0x58>)
   2da10:	f44f 7325 	mov.w	r3, #660	; 0x294
   2da14:	4a0c      	ldr	r2, [pc, #48]	; (2da48 <z_priq_dumb_remove+0x5c>)
   2da16:	f003 ff2f 	bl	31878 <printk>
   2da1a:	f44f 7125 	mov.w	r1, #660	; 0x294
   2da1e:	480a      	ldr	r0, [pc, #40]	; (2da48 <z_priq_dumb_remove+0x5c>)
   2da20:	f003 ff37 	bl	31892 <assert_post_action>
	node->prev->next = node->next;
   2da24:	e9d4 2300 	ldrd	r2, r3, [r4]
   2da28:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2da2a:	6822      	ldr	r2, [r4, #0]
   2da2c:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   2da2e:	2300      	movs	r3, #0
	node->prev = NULL;
   2da30:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   2da34:	bd10      	pop	{r4, pc}
   2da36:	bf00      	nop
   2da38:	200259e0 	.word	0x200259e0
   2da3c:	20021818 	.word	0x20021818
   2da40:	000368d5 	.word	0x000368d5
   2da44:	00034ff7 	.word	0x00034ff7
   2da48:	00036871 	.word	0x00036871

0002da4c <z_unpend_thread>:
{
   2da4c:	b538      	push	{r3, r4, r5, lr}
   2da4e:	4604      	mov	r4, r0
	__asm__ volatile(
   2da50:	f04f 0320 	mov.w	r3, #32
   2da54:	f3ef 8511 	mrs	r5, BASEPRI
   2da58:	f383 8811 	msr	BASEPRI, r3
   2da5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2da60:	481d      	ldr	r0, [pc, #116]	; (2dad8 <z_unpend_thread+0x8c>)
   2da62:	f000 fe79 	bl	2e758 <z_spin_lock_valid>
   2da66:	b960      	cbnz	r0, 2da82 <z_unpend_thread+0x36>
   2da68:	491c      	ldr	r1, [pc, #112]	; (2dadc <z_unpend_thread+0x90>)
   2da6a:	235f      	movs	r3, #95	; 0x5f
   2da6c:	4a1c      	ldr	r2, [pc, #112]	; (2dae0 <z_unpend_thread+0x94>)
   2da6e:	481d      	ldr	r0, [pc, #116]	; (2dae4 <z_unpend_thread+0x98>)
   2da70:	f003 ff02 	bl	31878 <printk>
   2da74:	481c      	ldr	r0, [pc, #112]	; (2dae8 <z_unpend_thread+0x9c>)
   2da76:	f003 feff 	bl	31878 <printk>
   2da7a:	215f      	movs	r1, #95	; 0x5f
   2da7c:	4818      	ldr	r0, [pc, #96]	; (2dae0 <z_unpend_thread+0x94>)
   2da7e:	f003 ff08 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2da82:	4815      	ldr	r0, [pc, #84]	; (2dad8 <z_unpend_thread+0x8c>)
   2da84:	f000 fe86 	bl	2e794 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2da88:	f104 0008 	add.w	r0, r4, #8
   2da8c:	f7ff fe18 	bl	2d6c0 <pended_on.isra.16>
   2da90:	4621      	mov	r1, r4
   2da92:	f7ff ffab 	bl	2d9ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2da96:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2da98:	480f      	ldr	r0, [pc, #60]	; (2dad8 <z_unpend_thread+0x8c>)
   2da9a:	f023 0302 	bic.w	r3, r3, #2
   2da9e:	7363      	strb	r3, [r4, #13]
   2daa0:	f000 fe68 	bl	2e774 <z_spin_unlock_valid>
   2daa4:	b960      	cbnz	r0, 2dac0 <z_unpend_thread+0x74>
   2daa6:	4911      	ldr	r1, [pc, #68]	; (2daec <z_unpend_thread+0xa0>)
   2daa8:	2372      	movs	r3, #114	; 0x72
   2daaa:	4a0d      	ldr	r2, [pc, #52]	; (2dae0 <z_unpend_thread+0x94>)
   2daac:	480d      	ldr	r0, [pc, #52]	; (2dae4 <z_unpend_thread+0x98>)
   2daae:	f003 fee3 	bl	31878 <printk>
   2dab2:	480f      	ldr	r0, [pc, #60]	; (2daf0 <z_unpend_thread+0xa4>)
   2dab4:	f003 fee0 	bl	31878 <printk>
   2dab8:	2172      	movs	r1, #114	; 0x72
   2daba:	4809      	ldr	r0, [pc, #36]	; (2dae0 <z_unpend_thread+0x94>)
   2dabc:	f003 fee9 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2dac0:	f385 8811 	msr	BASEPRI, r5
   2dac4:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   2dac8:	2300      	movs	r3, #0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2daca:	f104 0018 	add.w	r0, r4, #24
   2dace:	60a3      	str	r3, [r4, #8]
}
   2dad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2dad4:	f001 b986 	b.w	2ede4 <z_abort_timeout>
   2dad8:	20025a18 	.word	0x20025a18
   2dadc:	00035426 	.word	0x00035426
   2dae0:	000353f4 	.word	0x000353f4
   2dae4:	00034ff7 	.word	0x00034ff7
   2dae8:	0003543b 	.word	0x0003543b
   2daec:	00035450 	.word	0x00035450
   2daf0:	00035467 	.word	0x00035467

0002daf4 <update_cache>:
{
   2daf4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   2daf6:	4c15      	ldr	r4, [pc, #84]	; (2db4c <update_cache+0x58>)
{
   2daf8:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   2dafa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2dafe:	f004 fde5 	bl	326cc <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   2db02:	4605      	mov	r5, r0
   2db04:	b900      	cbnz	r0, 2db08 <update_cache+0x14>
   2db06:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   2db08:	b9ca      	cbnz	r2, 2db3e <update_cache+0x4a>
	__ASSERT(_current != NULL, "");
   2db0a:	68a3      	ldr	r3, [r4, #8]
   2db0c:	b963      	cbnz	r3, 2db28 <update_cache+0x34>
   2db0e:	4910      	ldr	r1, [pc, #64]	; (2db50 <update_cache+0x5c>)
   2db10:	2375      	movs	r3, #117	; 0x75
   2db12:	4a10      	ldr	r2, [pc, #64]	; (2db54 <update_cache+0x60>)
   2db14:	4810      	ldr	r0, [pc, #64]	; (2db58 <update_cache+0x64>)
   2db16:	f003 feaf 	bl	31878 <printk>
   2db1a:	4810      	ldr	r0, [pc, #64]	; (2db5c <update_cache+0x68>)
   2db1c:	f003 feac 	bl	31878 <printk>
   2db20:	2175      	movs	r1, #117	; 0x75
   2db22:	480c      	ldr	r0, [pc, #48]	; (2db54 <update_cache+0x60>)
   2db24:	f003 feb5 	bl	31892 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   2db28:	68a3      	ldr	r3, [r4, #8]
   2db2a:	7b5a      	ldrb	r2, [r3, #13]
   2db2c:	06d2      	lsls	r2, r2, #27
   2db2e:	d106      	bne.n	2db3e <update_cache+0x4a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2db30:	69aa      	ldr	r2, [r5, #24]
   2db32:	b922      	cbnz	r2, 2db3e <update_cache+0x4a>
	if (is_preempt(_current) || is_metairq(th)) {
   2db34:	89da      	ldrh	r2, [r3, #14]
   2db36:	2a7f      	cmp	r2, #127	; 0x7f
   2db38:	d901      	bls.n	2db3e <update_cache+0x4a>
		_kernel.ready_q.cache = _current;
   2db3a:	6263      	str	r3, [r4, #36]	; 0x24
}
   2db3c:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   2db3e:	68a3      	ldr	r3, [r4, #8]
   2db40:	42ab      	cmp	r3, r5
   2db42:	d001      	beq.n	2db48 <update_cache+0x54>
			z_reset_time_slice();
   2db44:	f7ff fdd4 	bl	2d6f0 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
   2db48:	6265      	str	r5, [r4, #36]	; 0x24
}
   2db4a:	e7f7      	b.n	2db3c <update_cache+0x48>
   2db4c:	200259e0 	.word	0x200259e0
   2db50:	000368b6 	.word	0x000368b6
   2db54:	00036871 	.word	0x00036871
   2db58:	00034ff7 	.word	0x00034ff7
   2db5c:	000367d3 	.word	0x000367d3

0002db60 <k_sched_unlock>:
{
   2db60:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current->base.sched_locked != 0, "");
   2db62:	4c33      	ldr	r4, [pc, #204]	; (2dc30 <k_sched_unlock+0xd0>)
   2db64:	68a2      	ldr	r2, [r4, #8]
   2db66:	7bd2      	ldrb	r2, [r2, #15]
   2db68:	b972      	cbnz	r2, 2db88 <k_sched_unlock+0x28>
   2db6a:	4932      	ldr	r1, [pc, #200]	; (2dc34 <k_sched_unlock+0xd4>)
   2db6c:	f240 232d 	movw	r3, #557	; 0x22d
   2db70:	4a31      	ldr	r2, [pc, #196]	; (2dc38 <k_sched_unlock+0xd8>)
   2db72:	4832      	ldr	r0, [pc, #200]	; (2dc3c <k_sched_unlock+0xdc>)
   2db74:	f003 fe80 	bl	31878 <printk>
   2db78:	4831      	ldr	r0, [pc, #196]	; (2dc40 <k_sched_unlock+0xe0>)
   2db7a:	f003 fe7d 	bl	31878 <printk>
   2db7e:	f240 212d 	movw	r1, #557	; 0x22d
   2db82:	482d      	ldr	r0, [pc, #180]	; (2dc38 <k_sched_unlock+0xd8>)
   2db84:	f003 fe85 	bl	31892 <assert_post_action>
   2db88:	f3ef 8305 	mrs	r3, IPSR
   2db8c:	2b0d      	cmp	r3, #13
   2db8e:	d804      	bhi.n	2db9a <k_sched_unlock+0x3a>
   2db90:	b193      	cbz	r3, 2dbb8 <k_sched_unlock+0x58>
   2db92:	4b2c      	ldr	r3, [pc, #176]	; (2dc44 <k_sched_unlock+0xe4>)
   2db94:	685b      	ldr	r3, [r3, #4]
   2db96:	051b      	lsls	r3, r3, #20
   2db98:	d40e      	bmi.n	2dbb8 <k_sched_unlock+0x58>
	__ASSERT(!z_arch_is_in_isr(), "");
   2db9a:	492b      	ldr	r1, [pc, #172]	; (2dc48 <k_sched_unlock+0xe8>)
   2db9c:	f240 232e 	movw	r3, #558	; 0x22e
   2dba0:	4a25      	ldr	r2, [pc, #148]	; (2dc38 <k_sched_unlock+0xd8>)
   2dba2:	4826      	ldr	r0, [pc, #152]	; (2dc3c <k_sched_unlock+0xdc>)
   2dba4:	f003 fe68 	bl	31878 <printk>
   2dba8:	4825      	ldr	r0, [pc, #148]	; (2dc40 <k_sched_unlock+0xe0>)
   2dbaa:	f003 fe65 	bl	31878 <printk>
   2dbae:	f240 212e 	movw	r1, #558	; 0x22e
   2dbb2:	4821      	ldr	r0, [pc, #132]	; (2dc38 <k_sched_unlock+0xd8>)
   2dbb4:	f003 fe6d 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2dbb8:	f04f 0320 	mov.w	r3, #32
   2dbbc:	f3ef 8511 	mrs	r5, BASEPRI
   2dbc0:	f383 8811 	msr	BASEPRI, r3
   2dbc4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2dbc8:	4820      	ldr	r0, [pc, #128]	; (2dc4c <k_sched_unlock+0xec>)
   2dbca:	f000 fdc5 	bl	2e758 <z_spin_lock_valid>
   2dbce:	b960      	cbnz	r0, 2dbea <k_sched_unlock+0x8a>
   2dbd0:	491f      	ldr	r1, [pc, #124]	; (2dc50 <k_sched_unlock+0xf0>)
   2dbd2:	235f      	movs	r3, #95	; 0x5f
   2dbd4:	4a1f      	ldr	r2, [pc, #124]	; (2dc54 <k_sched_unlock+0xf4>)
   2dbd6:	4819      	ldr	r0, [pc, #100]	; (2dc3c <k_sched_unlock+0xdc>)
   2dbd8:	f003 fe4e 	bl	31878 <printk>
   2dbdc:	481e      	ldr	r0, [pc, #120]	; (2dc58 <k_sched_unlock+0xf8>)
   2dbde:	f003 fe4b 	bl	31878 <printk>
   2dbe2:	215f      	movs	r1, #95	; 0x5f
   2dbe4:	481b      	ldr	r0, [pc, #108]	; (2dc54 <k_sched_unlock+0xf4>)
   2dbe6:	f003 fe54 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2dbea:	4818      	ldr	r0, [pc, #96]	; (2dc4c <k_sched_unlock+0xec>)
   2dbec:	f000 fdd2 	bl	2e794 <z_spin_lock_set_owner>
		++_current->base.sched_locked;
   2dbf0:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   2dbf2:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   2dbf4:	7bd3      	ldrb	r3, [r2, #15]
   2dbf6:	3301      	adds	r3, #1
   2dbf8:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   2dbfa:	f7ff ff7b 	bl	2daf4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2dbfe:	4813      	ldr	r0, [pc, #76]	; (2dc4c <k_sched_unlock+0xec>)
   2dc00:	f000 fdb8 	bl	2e774 <z_spin_unlock_valid>
   2dc04:	b960      	cbnz	r0, 2dc20 <k_sched_unlock+0xc0>
   2dc06:	4915      	ldr	r1, [pc, #84]	; (2dc5c <k_sched_unlock+0xfc>)
   2dc08:	2372      	movs	r3, #114	; 0x72
   2dc0a:	4a12      	ldr	r2, [pc, #72]	; (2dc54 <k_sched_unlock+0xf4>)
   2dc0c:	480b      	ldr	r0, [pc, #44]	; (2dc3c <k_sched_unlock+0xdc>)
   2dc0e:	f003 fe33 	bl	31878 <printk>
   2dc12:	4813      	ldr	r0, [pc, #76]	; (2dc60 <k_sched_unlock+0x100>)
   2dc14:	f003 fe30 	bl	31878 <printk>
   2dc18:	2172      	movs	r1, #114	; 0x72
   2dc1a:	480e      	ldr	r0, [pc, #56]	; (2dc54 <k_sched_unlock+0xf4>)
   2dc1c:	f003 fe39 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2dc20:	f385 8811 	msr	BASEPRI, r5
   2dc24:	f3bf 8f6f 	isb	sy
}
   2dc28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   2dc2c:	f004 bd44 	b.w	326b8 <z_reschedule_unlocked>
   2dc30:	200259e0 	.word	0x200259e0
   2dc34:	00036849 	.word	0x00036849
   2dc38:	00036871 	.word	0x00036871
   2dc3c:	00034ff7 	.word	0x00034ff7
   2dc40:	000367d3 	.word	0x000367d3
   2dc44:	e000ed00 	.word	0xe000ed00
   2dc48:	0003680d 	.word	0x0003680d
   2dc4c:	20025a18 	.word	0x20025a18
   2dc50:	00035426 	.word	0x00035426
   2dc54:	000353f4 	.word	0x000353f4
   2dc58:	0003543b 	.word	0x0003543b
   2dc5c:	00035450 	.word	0x00035450
   2dc60:	00035467 	.word	0x00035467

0002dc64 <z_add_thread_to_ready_q>:
{
   2dc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dc66:	4604      	mov	r4, r0
	__asm__ volatile(
   2dc68:	f04f 0320 	mov.w	r3, #32
   2dc6c:	f3ef 8511 	mrs	r5, BASEPRI
   2dc70:	f383 8811 	msr	BASEPRI, r3
   2dc74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2dc78:	482f      	ldr	r0, [pc, #188]	; (2dd38 <z_add_thread_to_ready_q+0xd4>)
   2dc7a:	f000 fd6d 	bl	2e758 <z_spin_lock_valid>
   2dc7e:	b960      	cbnz	r0, 2dc9a <z_add_thread_to_ready_q+0x36>
   2dc80:	492e      	ldr	r1, [pc, #184]	; (2dd3c <z_add_thread_to_ready_q+0xd8>)
   2dc82:	235f      	movs	r3, #95	; 0x5f
   2dc84:	4a2e      	ldr	r2, [pc, #184]	; (2dd40 <z_add_thread_to_ready_q+0xdc>)
   2dc86:	482f      	ldr	r0, [pc, #188]	; (2dd44 <z_add_thread_to_ready_q+0xe0>)
   2dc88:	f003 fdf6 	bl	31878 <printk>
   2dc8c:	482e      	ldr	r0, [pc, #184]	; (2dd48 <z_add_thread_to_ready_q+0xe4>)
   2dc8e:	f003 fdf3 	bl	31878 <printk>
   2dc92:	215f      	movs	r1, #95	; 0x5f
   2dc94:	482a      	ldr	r0, [pc, #168]	; (2dd40 <z_add_thread_to_ready_q+0xdc>)
   2dc96:	f003 fdfc 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2dc9a:	4827      	ldr	r0, [pc, #156]	; (2dd38 <z_add_thread_to_ready_q+0xd4>)
   2dc9c:	f000 fd7a 	bl	2e794 <z_spin_lock_set_owner>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2dca0:	4b2a      	ldr	r3, [pc, #168]	; (2dd4c <z_add_thread_to_ready_q+0xe8>)
   2dca2:	429c      	cmp	r4, r3
   2dca4:	d10b      	bne.n	2dcbe <z_add_thread_to_ready_q+0x5a>
   2dca6:	492a      	ldr	r1, [pc, #168]	; (2dd50 <z_add_thread_to_ready_q+0xec>)
   2dca8:	4826      	ldr	r0, [pc, #152]	; (2dd44 <z_add_thread_to_ready_q+0xe0>)
   2dcaa:	f240 237e 	movw	r3, #638	; 0x27e
   2dcae:	4a29      	ldr	r2, [pc, #164]	; (2dd54 <z_add_thread_to_ready_q+0xf0>)
   2dcb0:	f003 fde2 	bl	31878 <printk>
   2dcb4:	f240 217e 	movw	r1, #638	; 0x27e
   2dcb8:	4826      	ldr	r0, [pc, #152]	; (2dd54 <z_add_thread_to_ready_q+0xf0>)
   2dcba:	f003 fdea 	bl	31892 <assert_post_action>
	return list->head == list;
   2dcbe:	4a26      	ldr	r2, [pc, #152]	; (2dd58 <z_add_thread_to_ready_q+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2dcc0:	f102 0128 	add.w	r1, r2, #40	; 0x28
   2dcc4:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   2dcc8:	428b      	cmp	r3, r1
   2dcca:	d00b      	beq.n	2dce4 <z_add_thread_to_ready_q+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2dccc:	b153      	cbz	r3, 2dce4 <z_add_thread_to_ready_q+0x80>
	if (t1->base.prio < t2->base.prio) {
   2dcce:	f994 600e 	ldrsb.w	r6, [r4, #14]
   2dcd2:	f993 700e 	ldrsb.w	r7, [r3, #14]
   2dcd6:	42b7      	cmp	r7, r6
   2dcd8:	dc0a      	bgt.n	2dcf0 <z_add_thread_to_ready_q+0x8c>
	return (node == list->tail) ? NULL : node->next;
   2dcda:	4298      	cmp	r0, r3
   2dcdc:	d002      	beq.n	2dce4 <z_add_thread_to_ready_q+0x80>
   2dcde:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2dce0:	2b00      	cmp	r3, #0
   2dce2:	d1f6      	bne.n	2dcd2 <z_add_thread_to_ready_q+0x6e>
	node->prev = list->tail;
   2dce4:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   2dce8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2dcea:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2dcec:	62d4      	str	r4, [r2, #44]	; 0x2c
   2dcee:	e005      	b.n	2dcfc <z_add_thread_to_ready_q+0x98>
	node->prev = successor->prev;
   2dcf0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2dcf2:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2dcf6:	685a      	ldr	r2, [r3, #4]
   2dcf8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2dcfa:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   2dcfc:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   2dcfe:	2000      	movs	r0, #0
   2dd00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2dd04:	7363      	strb	r3, [r4, #13]
   2dd06:	f7ff fef5 	bl	2daf4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2dd0a:	480b      	ldr	r0, [pc, #44]	; (2dd38 <z_add_thread_to_ready_q+0xd4>)
   2dd0c:	f000 fd32 	bl	2e774 <z_spin_unlock_valid>
   2dd10:	b960      	cbnz	r0, 2dd2c <z_add_thread_to_ready_q+0xc8>
   2dd12:	4912      	ldr	r1, [pc, #72]	; (2dd5c <z_add_thread_to_ready_q+0xf8>)
   2dd14:	2372      	movs	r3, #114	; 0x72
   2dd16:	4a0a      	ldr	r2, [pc, #40]	; (2dd40 <z_add_thread_to_ready_q+0xdc>)
   2dd18:	480a      	ldr	r0, [pc, #40]	; (2dd44 <z_add_thread_to_ready_q+0xe0>)
   2dd1a:	f003 fdad 	bl	31878 <printk>
   2dd1e:	4810      	ldr	r0, [pc, #64]	; (2dd60 <z_add_thread_to_ready_q+0xfc>)
   2dd20:	f003 fdaa 	bl	31878 <printk>
   2dd24:	2172      	movs	r1, #114	; 0x72
   2dd26:	4806      	ldr	r0, [pc, #24]	; (2dd40 <z_add_thread_to_ready_q+0xdc>)
   2dd28:	f003 fdb3 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2dd2c:	f385 8811 	msr	BASEPRI, r5
   2dd30:	f3bf 8f6f 	isb	sy
}
   2dd34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2dd36:	bf00      	nop
   2dd38:	20025a18 	.word	0x20025a18
   2dd3c:	00035426 	.word	0x00035426
   2dd40:	000353f4 	.word	0x000353f4
   2dd44:	00034ff7 	.word	0x00034ff7
   2dd48:	0003543b 	.word	0x0003543b
   2dd4c:	20021818 	.word	0x20021818
   2dd50:	000368d5 	.word	0x000368d5
   2dd54:	00036871 	.word	0x00036871
   2dd58:	200259e0 	.word	0x200259e0
   2dd5c:	00035450 	.word	0x00035450
   2dd60:	00035467 	.word	0x00035467

0002dd64 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   2dd64:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   2dd68:	b570      	push	{r4, r5, r6, lr}
   2dd6a:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   2dd6c:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   2dd70:	2b00      	cmp	r3, #0
   2dd72:	d040      	beq.n	2ddf6 <z_thread_timeout+0x92>
	__asm__ volatile(
   2dd74:	f04f 0320 	mov.w	r3, #32
   2dd78:	f3ef 8611 	mrs	r6, BASEPRI
   2dd7c:	f383 8811 	msr	BASEPRI, r3
   2dd80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2dd84:	4824      	ldr	r0, [pc, #144]	; (2de18 <z_thread_timeout+0xb4>)
   2dd86:	f000 fce7 	bl	2e758 <z_spin_lock_valid>
   2dd8a:	b960      	cbnz	r0, 2dda6 <z_thread_timeout+0x42>
   2dd8c:	4923      	ldr	r1, [pc, #140]	; (2de1c <z_thread_timeout+0xb8>)
   2dd8e:	235f      	movs	r3, #95	; 0x5f
   2dd90:	4a23      	ldr	r2, [pc, #140]	; (2de20 <z_thread_timeout+0xbc>)
   2dd92:	4824      	ldr	r0, [pc, #144]	; (2de24 <z_thread_timeout+0xc0>)
   2dd94:	f003 fd70 	bl	31878 <printk>
   2dd98:	4823      	ldr	r0, [pc, #140]	; (2de28 <z_thread_timeout+0xc4>)
   2dd9a:	f003 fd6d 	bl	31878 <printk>
   2dd9e:	215f      	movs	r1, #95	; 0x5f
   2dda0:	481f      	ldr	r0, [pc, #124]	; (2de20 <z_thread_timeout+0xbc>)
   2dda2:	f003 fd76 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2dda6:	481c      	ldr	r0, [pc, #112]	; (2de18 <z_thread_timeout+0xb4>)
   2dda8:	f000 fcf4 	bl	2e794 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2ddac:	f1a4 0010 	sub.w	r0, r4, #16
   2ddb0:	f7ff fc86 	bl	2d6c0 <pended_on.isra.16>
   2ddb4:	4629      	mov	r1, r5
   2ddb6:	f7ff fe19 	bl	2d9ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2ddba:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2ddbe:	4816      	ldr	r0, [pc, #88]	; (2de18 <z_thread_timeout+0xb4>)
   2ddc0:	f023 0302 	bic.w	r3, r3, #2
   2ddc4:	f804 3c0b 	strb.w	r3, [r4, #-11]
   2ddc8:	f000 fcd4 	bl	2e774 <z_spin_unlock_valid>
   2ddcc:	b960      	cbnz	r0, 2dde8 <z_thread_timeout+0x84>
   2ddce:	4917      	ldr	r1, [pc, #92]	; (2de2c <z_thread_timeout+0xc8>)
   2ddd0:	2372      	movs	r3, #114	; 0x72
   2ddd2:	4a13      	ldr	r2, [pc, #76]	; (2de20 <z_thread_timeout+0xbc>)
   2ddd4:	4813      	ldr	r0, [pc, #76]	; (2de24 <z_thread_timeout+0xc0>)
   2ddd6:	f003 fd4f 	bl	31878 <printk>
   2ddda:	4815      	ldr	r0, [pc, #84]	; (2de30 <z_thread_timeout+0xcc>)
   2dddc:	f003 fd4c 	bl	31878 <printk>
   2dde0:	2172      	movs	r1, #114	; 0x72
   2dde2:	480f      	ldr	r0, [pc, #60]	; (2de20 <z_thread_timeout+0xbc>)
   2dde4:	f003 fd55 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2dde8:	f386 8811 	msr	BASEPRI, r6
   2ddec:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   2ddf0:	2300      	movs	r3, #0
   2ddf2:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2ddf6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   2ddfa:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2ddfc:	f023 0314 	bic.w	r3, r3, #20
   2de00:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   2de04:	f004 fc36 	bl	32674 <z_is_thread_ready>
   2de08:	b120      	cbz	r0, 2de14 <z_thread_timeout+0xb0>
		z_add_thread_to_ready_q(thread);
   2de0a:	4628      	mov	r0, r5
}
   2de0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2de10:	f7ff bf28 	b.w	2dc64 <z_add_thread_to_ready_q>
   2de14:	bd70      	pop	{r4, r5, r6, pc}
   2de16:	bf00      	nop
   2de18:	20025a18 	.word	0x20025a18
   2de1c:	00035426 	.word	0x00035426
   2de20:	000353f4 	.word	0x000353f4
   2de24:	00034ff7 	.word	0x00034ff7
   2de28:	0003543b 	.word	0x0003543b
   2de2c:	00035450 	.word	0x00035450
   2de30:	00035467 	.word	0x00035467

0002de34 <z_move_thread_to_end_of_prio_q>:
{
   2de34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2de36:	4604      	mov	r4, r0
	__asm__ volatile(
   2de38:	f04f 0320 	mov.w	r3, #32
   2de3c:	f3ef 8511 	mrs	r5, BASEPRI
   2de40:	f383 8811 	msr	BASEPRI, r3
   2de44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2de48:	4834      	ldr	r0, [pc, #208]	; (2df1c <z_move_thread_to_end_of_prio_q+0xe8>)
   2de4a:	f000 fc85 	bl	2e758 <z_spin_lock_valid>
   2de4e:	b960      	cbnz	r0, 2de6a <z_move_thread_to_end_of_prio_q+0x36>
   2de50:	4933      	ldr	r1, [pc, #204]	; (2df20 <z_move_thread_to_end_of_prio_q+0xec>)
   2de52:	235f      	movs	r3, #95	; 0x5f
   2de54:	4a33      	ldr	r2, [pc, #204]	; (2df24 <z_move_thread_to_end_of_prio_q+0xf0>)
   2de56:	4834      	ldr	r0, [pc, #208]	; (2df28 <z_move_thread_to_end_of_prio_q+0xf4>)
   2de58:	f003 fd0e 	bl	31878 <printk>
   2de5c:	4833      	ldr	r0, [pc, #204]	; (2df2c <z_move_thread_to_end_of_prio_q+0xf8>)
   2de5e:	f003 fd0b 	bl	31878 <printk>
   2de62:	215f      	movs	r1, #95	; 0x5f
   2de64:	482f      	ldr	r0, [pc, #188]	; (2df24 <z_move_thread_to_end_of_prio_q+0xf0>)
   2de66:	f003 fd14 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2de6a:	482c      	ldr	r0, [pc, #176]	; (2df1c <z_move_thread_to_end_of_prio_q+0xe8>)
   2de6c:	f000 fc92 	bl	2e794 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   2de70:	7b63      	ldrb	r3, [r4, #13]
   2de72:	065a      	lsls	r2, r3, #25
   2de74:	d503      	bpl.n	2de7e <z_move_thread_to_end_of_prio_q+0x4a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2de76:	4621      	mov	r1, r4
   2de78:	482d      	ldr	r0, [pc, #180]	; (2df30 <z_move_thread_to_end_of_prio_q+0xfc>)
   2de7a:	f7ff fdb7 	bl	2d9ec <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2de7e:	4b2d      	ldr	r3, [pc, #180]	; (2df34 <z_move_thread_to_end_of_prio_q+0x100>)
   2de80:	429c      	cmp	r4, r3
   2de82:	d10b      	bne.n	2de9c <z_move_thread_to_end_of_prio_q+0x68>
   2de84:	492c      	ldr	r1, [pc, #176]	; (2df38 <z_move_thread_to_end_of_prio_q+0x104>)
   2de86:	4828      	ldr	r0, [pc, #160]	; (2df28 <z_move_thread_to_end_of_prio_q+0xf4>)
   2de88:	f240 237e 	movw	r3, #638	; 0x27e
   2de8c:	4a2b      	ldr	r2, [pc, #172]	; (2df3c <z_move_thread_to_end_of_prio_q+0x108>)
   2de8e:	f003 fcf3 	bl	31878 <printk>
   2de92:	f240 217e 	movw	r1, #638	; 0x27e
   2de96:	4829      	ldr	r0, [pc, #164]	; (2df3c <z_move_thread_to_end_of_prio_q+0x108>)
   2de98:	f003 fcfb 	bl	31892 <assert_post_action>
	return list->head == list;
   2de9c:	4a28      	ldr	r2, [pc, #160]	; (2df40 <z_move_thread_to_end_of_prio_q+0x10c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2de9e:	f102 0128 	add.w	r1, r2, #40	; 0x28
   2dea2:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   2dea6:	428b      	cmp	r3, r1
   2dea8:	d00b      	beq.n	2dec2 <z_move_thread_to_end_of_prio_q+0x8e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2deaa:	b153      	cbz	r3, 2dec2 <z_move_thread_to_end_of_prio_q+0x8e>
	if (t1->base.prio < t2->base.prio) {
   2deac:	f994 600e 	ldrsb.w	r6, [r4, #14]
   2deb0:	f993 700e 	ldrsb.w	r7, [r3, #14]
   2deb4:	42b7      	cmp	r7, r6
   2deb6:	dc0a      	bgt.n	2dece <z_move_thread_to_end_of_prio_q+0x9a>
	return (node == list->tail) ? NULL : node->next;
   2deb8:	4283      	cmp	r3, r0
   2deba:	d002      	beq.n	2dec2 <z_move_thread_to_end_of_prio_q+0x8e>
   2debc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2debe:	2b00      	cmp	r3, #0
   2dec0:	d1f6      	bne.n	2deb0 <z_move_thread_to_end_of_prio_q+0x7c>
	node->prev = list->tail;
   2dec2:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   2dec6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2dec8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2deca:	62d4      	str	r4, [r2, #44]	; 0x2c
   2decc:	e005      	b.n	2deda <z_move_thread_to_end_of_prio_q+0xa6>
	node->prev = successor->prev;
   2dece:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   2ded0:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   2ded4:	6859      	ldr	r1, [r3, #4]
   2ded6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   2ded8:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   2deda:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   2dedc:	6890      	ldr	r0, [r2, #8]
   2dede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2dee2:	7363      	strb	r3, [r4, #13]
   2dee4:	1b03      	subs	r3, r0, r4
   2dee6:	4258      	negs	r0, r3
   2dee8:	4158      	adcs	r0, r3
   2deea:	f7ff fe03 	bl	2daf4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2deee:	480b      	ldr	r0, [pc, #44]	; (2df1c <z_move_thread_to_end_of_prio_q+0xe8>)
   2def0:	f000 fc40 	bl	2e774 <z_spin_unlock_valid>
   2def4:	b960      	cbnz	r0, 2df10 <z_move_thread_to_end_of_prio_q+0xdc>
   2def6:	4913      	ldr	r1, [pc, #76]	; (2df44 <z_move_thread_to_end_of_prio_q+0x110>)
   2def8:	2372      	movs	r3, #114	; 0x72
   2defa:	4a0a      	ldr	r2, [pc, #40]	; (2df24 <z_move_thread_to_end_of_prio_q+0xf0>)
   2defc:	480a      	ldr	r0, [pc, #40]	; (2df28 <z_move_thread_to_end_of_prio_q+0xf4>)
   2defe:	f003 fcbb 	bl	31878 <printk>
   2df02:	4811      	ldr	r0, [pc, #68]	; (2df48 <z_move_thread_to_end_of_prio_q+0x114>)
   2df04:	f003 fcb8 	bl	31878 <printk>
   2df08:	2172      	movs	r1, #114	; 0x72
   2df0a:	4806      	ldr	r0, [pc, #24]	; (2df24 <z_move_thread_to_end_of_prio_q+0xf0>)
   2df0c:	f003 fcc1 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2df10:	f385 8811 	msr	BASEPRI, r5
   2df14:	f3bf 8f6f 	isb	sy
}
   2df18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2df1a:	bf00      	nop
   2df1c:	20025a18 	.word	0x20025a18
   2df20:	00035426 	.word	0x00035426
   2df24:	000353f4 	.word	0x000353f4
   2df28:	00034ff7 	.word	0x00034ff7
   2df2c:	0003543b 	.word	0x0003543b
   2df30:	20025a08 	.word	0x20025a08
   2df34:	20021818 	.word	0x20021818
   2df38:	000368d5 	.word	0x000368d5
   2df3c:	00036871 	.word	0x00036871
   2df40:	200259e0 	.word	0x200259e0
   2df44:	00035450 	.word	0x00035450
   2df48:	00035467 	.word	0x00035467

0002df4c <z_time_slice>:
	if (pending_current == _current) {
   2df4c:	4a15      	ldr	r2, [pc, #84]	; (2dfa4 <z_time_slice+0x58>)
   2df4e:	4916      	ldr	r1, [pc, #88]	; (2dfa8 <z_time_slice+0x5c>)
{
   2df50:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   2df52:	680c      	ldr	r4, [r1, #0]
   2df54:	6893      	ldr	r3, [r2, #8]
   2df56:	42a3      	cmp	r3, r4
   2df58:	4614      	mov	r4, r2
   2df5a:	d103      	bne.n	2df64 <z_time_slice+0x18>
}
   2df5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   2df60:	f7ff bbc6 	b.w	2d6f0 <z_reset_time_slice>
	pending_current = NULL;
   2df64:	2500      	movs	r5, #0
   2df66:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   2df68:	4910      	ldr	r1, [pc, #64]	; (2dfac <z_time_slice+0x60>)
   2df6a:	6809      	ldr	r1, [r1, #0]
   2df6c:	b1b9      	cbz	r1, 2df9e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   2df6e:	89d9      	ldrh	r1, [r3, #14]
   2df70:	297f      	cmp	r1, #127	; 0x7f
   2df72:	d814      	bhi.n	2df9e <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   2df74:	490e      	ldr	r1, [pc, #56]	; (2dfb0 <z_time_slice+0x64>)
   2df76:	f993 500e 	ldrsb.w	r5, [r3, #14]
   2df7a:	6809      	ldr	r1, [r1, #0]
   2df7c:	428d      	cmp	r5, r1
   2df7e:	db0e      	blt.n	2df9e <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
   2df80:	490c      	ldr	r1, [pc, #48]	; (2dfb4 <z_time_slice+0x68>)
   2df82:	428b      	cmp	r3, r1
   2df84:	d00b      	beq.n	2df9e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   2df86:	6999      	ldr	r1, [r3, #24]
   2df88:	b949      	cbnz	r1, 2df9e <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   2df8a:	6911      	ldr	r1, [r2, #16]
   2df8c:	4281      	cmp	r1, r0
   2df8e:	dc03      	bgt.n	2df98 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   2df90:	4618      	mov	r0, r3
   2df92:	f7ff ff4f 	bl	2de34 <z_move_thread_to_end_of_prio_q>
   2df96:	e7e1      	b.n	2df5c <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   2df98:	1a09      	subs	r1, r1, r0
   2df9a:	6111      	str	r1, [r2, #16]
}
   2df9c:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   2df9e:	2300      	movs	r3, #0
   2dfa0:	6123      	str	r3, [r4, #16]
   2dfa2:	e7fb      	b.n	2df9c <z_time_slice+0x50>
   2dfa4:	200259e0 	.word	0x200259e0
   2dfa8:	20025a14 	.word	0x20025a14
   2dfac:	20025a20 	.word	0x20025a20
   2dfb0:	20025a1c 	.word	0x20025a1c
   2dfb4:	20021818 	.word	0x20021818

0002dfb8 <z_remove_thread_from_ready_q>:
{
   2dfb8:	b538      	push	{r3, r4, r5, lr}
   2dfba:	4604      	mov	r4, r0
	__asm__ volatile(
   2dfbc:	f04f 0320 	mov.w	r3, #32
   2dfc0:	f3ef 8511 	mrs	r5, BASEPRI
   2dfc4:	f383 8811 	msr	BASEPRI, r3
   2dfc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2dfcc:	481d      	ldr	r0, [pc, #116]	; (2e044 <z_remove_thread_from_ready_q+0x8c>)
   2dfce:	f000 fbc3 	bl	2e758 <z_spin_lock_valid>
   2dfd2:	b960      	cbnz	r0, 2dfee <z_remove_thread_from_ready_q+0x36>
   2dfd4:	491c      	ldr	r1, [pc, #112]	; (2e048 <z_remove_thread_from_ready_q+0x90>)
   2dfd6:	235f      	movs	r3, #95	; 0x5f
   2dfd8:	4a1c      	ldr	r2, [pc, #112]	; (2e04c <z_remove_thread_from_ready_q+0x94>)
   2dfda:	481d      	ldr	r0, [pc, #116]	; (2e050 <z_remove_thread_from_ready_q+0x98>)
   2dfdc:	f003 fc4c 	bl	31878 <printk>
   2dfe0:	481c      	ldr	r0, [pc, #112]	; (2e054 <z_remove_thread_from_ready_q+0x9c>)
   2dfe2:	f003 fc49 	bl	31878 <printk>
   2dfe6:	215f      	movs	r1, #95	; 0x5f
   2dfe8:	4818      	ldr	r0, [pc, #96]	; (2e04c <z_remove_thread_from_ready_q+0x94>)
   2dfea:	f003 fc52 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2dfee:	4815      	ldr	r0, [pc, #84]	; (2e044 <z_remove_thread_from_ready_q+0x8c>)
   2dff0:	f000 fbd0 	bl	2e794 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   2dff4:	7b63      	ldrb	r3, [r4, #13]
   2dff6:	065a      	lsls	r2, r3, #25
   2dff8:	d507      	bpl.n	2e00a <z_remove_thread_from_ready_q+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2dffa:	4621      	mov	r1, r4
   2dffc:	4816      	ldr	r0, [pc, #88]	; (2e058 <z_remove_thread_from_ready_q+0xa0>)
   2dffe:	f7ff fcf5 	bl	2d9ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   2e002:	7b63      	ldrb	r3, [r4, #13]
   2e004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   2e008:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   2e00a:	4b14      	ldr	r3, [pc, #80]	; (2e05c <z_remove_thread_from_ready_q+0xa4>)
   2e00c:	6898      	ldr	r0, [r3, #8]
   2e00e:	1b03      	subs	r3, r0, r4
   2e010:	4258      	negs	r0, r3
   2e012:	4158      	adcs	r0, r3
   2e014:	f7ff fd6e 	bl	2daf4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2e018:	480a      	ldr	r0, [pc, #40]	; (2e044 <z_remove_thread_from_ready_q+0x8c>)
   2e01a:	f000 fbab 	bl	2e774 <z_spin_unlock_valid>
   2e01e:	b960      	cbnz	r0, 2e03a <z_remove_thread_from_ready_q+0x82>
   2e020:	490f      	ldr	r1, [pc, #60]	; (2e060 <z_remove_thread_from_ready_q+0xa8>)
   2e022:	2372      	movs	r3, #114	; 0x72
   2e024:	4a09      	ldr	r2, [pc, #36]	; (2e04c <z_remove_thread_from_ready_q+0x94>)
   2e026:	480a      	ldr	r0, [pc, #40]	; (2e050 <z_remove_thread_from_ready_q+0x98>)
   2e028:	f003 fc26 	bl	31878 <printk>
   2e02c:	480d      	ldr	r0, [pc, #52]	; (2e064 <z_remove_thread_from_ready_q+0xac>)
   2e02e:	f003 fc23 	bl	31878 <printk>
   2e032:	2172      	movs	r1, #114	; 0x72
   2e034:	4805      	ldr	r0, [pc, #20]	; (2e04c <z_remove_thread_from_ready_q+0x94>)
   2e036:	f003 fc2c 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2e03a:	f385 8811 	msr	BASEPRI, r5
   2e03e:	f3bf 8f6f 	isb	sy
}
   2e042:	bd38      	pop	{r3, r4, r5, pc}
   2e044:	20025a18 	.word	0x20025a18
   2e048:	00035426 	.word	0x00035426
   2e04c:	000353f4 	.word	0x000353f4
   2e050:	00034ff7 	.word	0x00034ff7
   2e054:	0003543b 	.word	0x0003543b
   2e058:	20025a08 	.word	0x20025a08
   2e05c:	200259e0 	.word	0x200259e0
   2e060:	00035450 	.word	0x00035450
   2e064:	00035467 	.word	0x00035467

0002e068 <pend>:
{
   2e068:	b570      	push	{r4, r5, r6, lr}
   2e06a:	4604      	mov	r4, r0
   2e06c:	460d      	mov	r5, r1
   2e06e:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   2e070:	f7ff ffa2 	bl	2dfb8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   2e074:	7b63      	ldrb	r3, [r4, #13]
   2e076:	f043 0302 	orr.w	r3, r3, #2
   2e07a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2e07c:	2d00      	cmp	r5, #0
   2e07e:	d02c      	beq.n	2e0da <pend+0x72>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2e080:	4b21      	ldr	r3, [pc, #132]	; (2e108 <pend+0xa0>)
		thread->base.pended_on = wait_q;
   2e082:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2e084:	429c      	cmp	r4, r3
   2e086:	d10b      	bne.n	2e0a0 <pend+0x38>
   2e088:	4920      	ldr	r1, [pc, #128]	; (2e10c <pend+0xa4>)
   2e08a:	4821      	ldr	r0, [pc, #132]	; (2e110 <pend+0xa8>)
   2e08c:	f240 237e 	movw	r3, #638	; 0x27e
   2e090:	4a20      	ldr	r2, [pc, #128]	; (2e114 <pend+0xac>)
   2e092:	f003 fbf1 	bl	31878 <printk>
   2e096:	f240 217e 	movw	r1, #638	; 0x27e
   2e09a:	481e      	ldr	r0, [pc, #120]	; (2e114 <pend+0xac>)
   2e09c:	f003 fbf9 	bl	31892 <assert_post_action>
	return list->head == list;
   2e0a0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e0a2:	429d      	cmp	r5, r3
   2e0a4:	d00c      	beq.n	2e0c0 <pend+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2e0a6:	b15b      	cbz	r3, 2e0c0 <pend+0x58>
	if (t1->base.prio < t2->base.prio) {
   2e0a8:	f994 200e 	ldrsb.w	r2, [r4, #14]
   2e0ac:	f993 100e 	ldrsb.w	r1, [r3, #14]
   2e0b0:	4291      	cmp	r1, r2
   2e0b2:	dc0c      	bgt.n	2e0ce <pend+0x66>
	return (node == list->tail) ? NULL : node->next;
   2e0b4:	6869      	ldr	r1, [r5, #4]
   2e0b6:	428b      	cmp	r3, r1
   2e0b8:	d002      	beq.n	2e0c0 <pend+0x58>
   2e0ba:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2e0bc:	2b00      	cmp	r3, #0
   2e0be:	d1f5      	bne.n	2e0ac <pend+0x44>
	node->prev = list->tail;
   2e0c0:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2e0c2:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   2e0c4:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2e0c6:	686b      	ldr	r3, [r5, #4]
   2e0c8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2e0ca:	606c      	str	r4, [r5, #4]
   2e0cc:	e005      	b.n	2e0da <pend+0x72>
	node->prev = successor->prev;
   2e0ce:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2e0d0:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2e0d4:	685a      	ldr	r2, [r3, #4]
   2e0d6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2e0d8:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   2e0da:	1c73      	adds	r3, r6, #1
   2e0dc:	d013      	beq.n	2e106 <pend+0x9e>
   2e0de:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2e0e2:	f240 30e7 	movw	r0, #999	; 0x3e7
   2e0e6:	2100      	movs	r1, #0
   2e0e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2e0ec:	fbc5 0106 	smlal	r0, r1, r5, r6
   2e0f0:	2300      	movs	r3, #0
   2e0f2:	f7ea fb51 	bl	18798 <__aeabi_ldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   2e0f6:	4908      	ldr	r1, [pc, #32]	; (2e118 <pend+0xb0>)
   2e0f8:	1c42      	adds	r2, r0, #1
   2e0fa:	f104 0018 	add.w	r0, r4, #24
}
   2e0fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2e102:	f000 bdc9 	b.w	2ec98 <z_add_timeout>
   2e106:	bd70      	pop	{r4, r5, r6, pc}
   2e108:	20021818 	.word	0x20021818
   2e10c:	000368d5 	.word	0x000368d5
   2e110:	00034ff7 	.word	0x00034ff7
   2e114:	00036871 	.word	0x00036871
   2e118:	0002dd65 	.word	0x0002dd65

0002e11c <z_pend_curr_irqlock>:
{
   2e11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e11e:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   2e120:	4d21      	ldr	r5, [pc, #132]	; (2e1a8 <z_pend_curr_irqlock+0x8c>)
	pending_current = _current;
   2e122:	4c22      	ldr	r4, [pc, #136]	; (2e1ac <z_pend_curr_irqlock+0x90>)
	pend(_current, wait_q, timeout);
   2e124:	68a8      	ldr	r0, [r5, #8]
   2e126:	f7ff ff9f 	bl	2e068 <pend>
	pending_current = _current;
   2e12a:	68ab      	ldr	r3, [r5, #8]
   2e12c:	4630      	mov	r0, r6
   2e12e:	6023      	str	r3, [r4, #0]
   2e130:	f7ed fd14 	bl	1bb5c <z_arch_swap>
   2e134:	4606      	mov	r6, r0
	__asm__ volatile(
   2e136:	f04f 0320 	mov.w	r3, #32
   2e13a:	f3ef 8711 	mrs	r7, BASEPRI
   2e13e:	f383 8811 	msr	BASEPRI, r3
   2e142:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2e146:	481a      	ldr	r0, [pc, #104]	; (2e1b0 <z_pend_curr_irqlock+0x94>)
   2e148:	f000 fb06 	bl	2e758 <z_spin_lock_valid>
   2e14c:	b960      	cbnz	r0, 2e168 <z_pend_curr_irqlock+0x4c>
   2e14e:	4919      	ldr	r1, [pc, #100]	; (2e1b4 <z_pend_curr_irqlock+0x98>)
   2e150:	235f      	movs	r3, #95	; 0x5f
   2e152:	4a19      	ldr	r2, [pc, #100]	; (2e1b8 <z_pend_curr_irqlock+0x9c>)
   2e154:	4819      	ldr	r0, [pc, #100]	; (2e1bc <z_pend_curr_irqlock+0xa0>)
   2e156:	f003 fb8f 	bl	31878 <printk>
   2e15a:	4819      	ldr	r0, [pc, #100]	; (2e1c0 <z_pend_curr_irqlock+0xa4>)
   2e15c:	f003 fb8c 	bl	31878 <printk>
   2e160:	215f      	movs	r1, #95	; 0x5f
   2e162:	4815      	ldr	r0, [pc, #84]	; (2e1b8 <z_pend_curr_irqlock+0x9c>)
   2e164:	f003 fb95 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2e168:	4811      	ldr	r0, [pc, #68]	; (2e1b0 <z_pend_curr_irqlock+0x94>)
   2e16a:	f000 fb13 	bl	2e794 <z_spin_lock_set_owner>
		if (pending_current == _current) {
   2e16e:	6823      	ldr	r3, [r4, #0]
   2e170:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2e172:	480f      	ldr	r0, [pc, #60]	; (2e1b0 <z_pend_curr_irqlock+0x94>)
   2e174:	429a      	cmp	r2, r3
			pending_current = NULL;
   2e176:	bf04      	itt	eq
   2e178:	2300      	moveq	r3, #0
   2e17a:	6023      	streq	r3, [r4, #0]
   2e17c:	f000 fafa 	bl	2e774 <z_spin_unlock_valid>
   2e180:	b960      	cbnz	r0, 2e19c <z_pend_curr_irqlock+0x80>
   2e182:	4910      	ldr	r1, [pc, #64]	; (2e1c4 <z_pend_curr_irqlock+0xa8>)
   2e184:	2372      	movs	r3, #114	; 0x72
   2e186:	4a0c      	ldr	r2, [pc, #48]	; (2e1b8 <z_pend_curr_irqlock+0x9c>)
   2e188:	480c      	ldr	r0, [pc, #48]	; (2e1bc <z_pend_curr_irqlock+0xa0>)
   2e18a:	f003 fb75 	bl	31878 <printk>
   2e18e:	480e      	ldr	r0, [pc, #56]	; (2e1c8 <z_pend_curr_irqlock+0xac>)
   2e190:	f003 fb72 	bl	31878 <printk>
   2e194:	2172      	movs	r1, #114	; 0x72
   2e196:	4808      	ldr	r0, [pc, #32]	; (2e1b8 <z_pend_curr_irqlock+0x9c>)
   2e198:	f003 fb7b 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2e19c:	f387 8811 	msr	BASEPRI, r7
   2e1a0:	f3bf 8f6f 	isb	sy
}
   2e1a4:	4630      	mov	r0, r6
   2e1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e1a8:	200259e0 	.word	0x200259e0
   2e1ac:	20025a14 	.word	0x20025a14
   2e1b0:	20025a18 	.word	0x20025a18
   2e1b4:	00035426 	.word	0x00035426
   2e1b8:	000353f4 	.word	0x000353f4
   2e1bc:	00034ff7 	.word	0x00034ff7
   2e1c0:	0003543b 	.word	0x0003543b
   2e1c4:	00035450 	.word	0x00035450
   2e1c8:	00035467 	.word	0x00035467

0002e1cc <z_pend_curr>:
{
   2e1cc:	b538      	push	{r3, r4, r5, lr}
   2e1ce:	4605      	mov	r5, r0
   2e1d0:	460c      	mov	r4, r1
   2e1d2:	4611      	mov	r1, r2
	pending_current = _current;
   2e1d4:	4a0e      	ldr	r2, [pc, #56]	; (2e210 <z_pend_curr+0x44>)
   2e1d6:	6890      	ldr	r0, [r2, #8]
   2e1d8:	4a0e      	ldr	r2, [pc, #56]	; (2e214 <z_pend_curr+0x48>)
   2e1da:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   2e1dc:	461a      	mov	r2, r3
   2e1de:	f7ff ff43 	bl	2e068 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2e1e2:	4628      	mov	r0, r5
   2e1e4:	f000 fac6 	bl	2e774 <z_spin_unlock_valid>
   2e1e8:	b960      	cbnz	r0, 2e204 <z_pend_curr+0x38>
   2e1ea:	490b      	ldr	r1, [pc, #44]	; (2e218 <z_pend_curr+0x4c>)
   2e1ec:	2389      	movs	r3, #137	; 0x89
   2e1ee:	4a0b      	ldr	r2, [pc, #44]	; (2e21c <z_pend_curr+0x50>)
   2e1f0:	480b      	ldr	r0, [pc, #44]	; (2e220 <z_pend_curr+0x54>)
   2e1f2:	f003 fb41 	bl	31878 <printk>
   2e1f6:	480b      	ldr	r0, [pc, #44]	; (2e224 <z_pend_curr+0x58>)
   2e1f8:	f003 fb3e 	bl	31878 <printk>
   2e1fc:	2189      	movs	r1, #137	; 0x89
   2e1fe:	4807      	ldr	r0, [pc, #28]	; (2e21c <z_pend_curr+0x50>)
   2e200:	f003 fb47 	bl	31892 <assert_post_action>
   2e204:	4620      	mov	r0, r4
}
   2e206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2e20a:	f7ed bca7 	b.w	1bb5c <z_arch_swap>
   2e20e:	bf00      	nop
   2e210:	200259e0 	.word	0x200259e0
   2e214:	20025a14 	.word	0x20025a14
   2e218:	00035450 	.word	0x00035450
   2e21c:	000353f4 	.word	0x000353f4
   2e220:	00034ff7 	.word	0x00034ff7
   2e224:	00035467 	.word	0x00035467

0002e228 <z_unpend_first_thread>:
{
   2e228:	b538      	push	{r3, r4, r5, lr}
   2e22a:	4604      	mov	r4, r0
	__asm__ volatile(
   2e22c:	f04f 0320 	mov.w	r3, #32
   2e230:	f3ef 8511 	mrs	r5, BASEPRI
   2e234:	f383 8811 	msr	BASEPRI, r3
   2e238:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2e23c:	4839      	ldr	r0, [pc, #228]	; (2e324 <z_unpend_first_thread+0xfc>)
   2e23e:	f000 fa8b 	bl	2e758 <z_spin_lock_valid>
   2e242:	b960      	cbnz	r0, 2e25e <z_unpend_first_thread+0x36>
   2e244:	4938      	ldr	r1, [pc, #224]	; (2e328 <z_unpend_first_thread+0x100>)
   2e246:	235f      	movs	r3, #95	; 0x5f
   2e248:	4a38      	ldr	r2, [pc, #224]	; (2e32c <z_unpend_first_thread+0x104>)
   2e24a:	4839      	ldr	r0, [pc, #228]	; (2e330 <z_unpend_first_thread+0x108>)
   2e24c:	f003 fb14 	bl	31878 <printk>
   2e250:	4838      	ldr	r0, [pc, #224]	; (2e334 <z_unpend_first_thread+0x10c>)
   2e252:	f003 fb11 	bl	31878 <printk>
   2e256:	215f      	movs	r1, #95	; 0x5f
   2e258:	4834      	ldr	r0, [pc, #208]	; (2e32c <z_unpend_first_thread+0x104>)
   2e25a:	f003 fb1a 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2e25e:	4831      	ldr	r0, [pc, #196]	; (2e324 <z_unpend_first_thread+0xfc>)
   2e260:	f000 fa98 	bl	2e794 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   2e264:	4620      	mov	r0, r4
   2e266:	f004 fa31 	bl	326cc <z_priq_dumb_best>
   2e26a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2e26c:	482d      	ldr	r0, [pc, #180]	; (2e324 <z_unpend_first_thread+0xfc>)
   2e26e:	f000 fa81 	bl	2e774 <z_spin_unlock_valid>
   2e272:	b960      	cbnz	r0, 2e28e <z_unpend_first_thread+0x66>
   2e274:	4930      	ldr	r1, [pc, #192]	; (2e338 <z_unpend_first_thread+0x110>)
   2e276:	2372      	movs	r3, #114	; 0x72
   2e278:	4a2c      	ldr	r2, [pc, #176]	; (2e32c <z_unpend_first_thread+0x104>)
   2e27a:	482d      	ldr	r0, [pc, #180]	; (2e330 <z_unpend_first_thread+0x108>)
   2e27c:	f003 fafc 	bl	31878 <printk>
   2e280:	482e      	ldr	r0, [pc, #184]	; (2e33c <z_unpend_first_thread+0x114>)
   2e282:	f003 faf9 	bl	31878 <printk>
   2e286:	2172      	movs	r1, #114	; 0x72
   2e288:	4828      	ldr	r0, [pc, #160]	; (2e32c <z_unpend_first_thread+0x104>)
   2e28a:	f003 fb02 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2e28e:	f385 8811 	msr	BASEPRI, r5
   2e292:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   2e296:	2c00      	cmp	r4, #0
   2e298:	d041      	beq.n	2e31e <z_unpend_first_thread+0xf6>
	__asm__ volatile(
   2e29a:	f04f 0320 	mov.w	r3, #32
   2e29e:	f3ef 8511 	mrs	r5, BASEPRI
   2e2a2:	f383 8811 	msr	BASEPRI, r3
   2e2a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2e2aa:	481e      	ldr	r0, [pc, #120]	; (2e324 <z_unpend_first_thread+0xfc>)
   2e2ac:	f000 fa54 	bl	2e758 <z_spin_lock_valid>
   2e2b0:	b960      	cbnz	r0, 2e2cc <z_unpend_first_thread+0xa4>
   2e2b2:	491d      	ldr	r1, [pc, #116]	; (2e328 <z_unpend_first_thread+0x100>)
   2e2b4:	235f      	movs	r3, #95	; 0x5f
   2e2b6:	4a1d      	ldr	r2, [pc, #116]	; (2e32c <z_unpend_first_thread+0x104>)
   2e2b8:	481d      	ldr	r0, [pc, #116]	; (2e330 <z_unpend_first_thread+0x108>)
   2e2ba:	f003 fadd 	bl	31878 <printk>
   2e2be:	481d      	ldr	r0, [pc, #116]	; (2e334 <z_unpend_first_thread+0x10c>)
   2e2c0:	f003 fada 	bl	31878 <printk>
   2e2c4:	215f      	movs	r1, #95	; 0x5f
   2e2c6:	4819      	ldr	r0, [pc, #100]	; (2e32c <z_unpend_first_thread+0x104>)
   2e2c8:	f003 fae3 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2e2cc:	4815      	ldr	r0, [pc, #84]	; (2e324 <z_unpend_first_thread+0xfc>)
   2e2ce:	f000 fa61 	bl	2e794 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2e2d2:	f104 0008 	add.w	r0, r4, #8
   2e2d6:	f7ff f9f3 	bl	2d6c0 <pended_on.isra.16>
   2e2da:	4621      	mov	r1, r4
   2e2dc:	f7ff fb86 	bl	2d9ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2e2e0:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2e2e2:	4810      	ldr	r0, [pc, #64]	; (2e324 <z_unpend_first_thread+0xfc>)
   2e2e4:	f023 0302 	bic.w	r3, r3, #2
   2e2e8:	7363      	strb	r3, [r4, #13]
   2e2ea:	f000 fa43 	bl	2e774 <z_spin_unlock_valid>
   2e2ee:	b960      	cbnz	r0, 2e30a <z_unpend_first_thread+0xe2>
   2e2f0:	4911      	ldr	r1, [pc, #68]	; (2e338 <z_unpend_first_thread+0x110>)
   2e2f2:	2372      	movs	r3, #114	; 0x72
   2e2f4:	4a0d      	ldr	r2, [pc, #52]	; (2e32c <z_unpend_first_thread+0x104>)
   2e2f6:	480e      	ldr	r0, [pc, #56]	; (2e330 <z_unpend_first_thread+0x108>)
   2e2f8:	f003 fabe 	bl	31878 <printk>
   2e2fc:	480f      	ldr	r0, [pc, #60]	; (2e33c <z_unpend_first_thread+0x114>)
   2e2fe:	f003 fabb 	bl	31878 <printk>
   2e302:	2172      	movs	r1, #114	; 0x72
   2e304:	4809      	ldr	r0, [pc, #36]	; (2e32c <z_unpend_first_thread+0x104>)
   2e306:	f003 fac4 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2e30a:	f385 8811 	msr	BASEPRI, r5
   2e30e:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   2e312:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   2e314:	f104 0018 	add.w	r0, r4, #24
   2e318:	60a3      	str	r3, [r4, #8]
   2e31a:	f000 fd63 	bl	2ede4 <z_abort_timeout>
}
   2e31e:	4620      	mov	r0, r4
   2e320:	bd38      	pop	{r3, r4, r5, pc}
   2e322:	bf00      	nop
   2e324:	20025a18 	.word	0x20025a18
   2e328:	00035426 	.word	0x00035426
   2e32c:	000353f4 	.word	0x000353f4
   2e330:	00034ff7 	.word	0x00034ff7
   2e334:	0003543b 	.word	0x0003543b
   2e338:	00035450 	.word	0x00035450
   2e33c:	00035467 	.word	0x00035467

0002e340 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2e340:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   2e342:	4b04      	ldr	r3, [pc, #16]	; (2e354 <z_sched_init+0x14>)
   2e344:	4608      	mov	r0, r1
   2e346:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   2e34a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   2e34e:	f7ff b9e5 	b.w	2d71c <k_sched_time_slice_set>
   2e352:	bf00      	nop
   2e354:	200259e0 	.word	0x200259e0

0002e358 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   2e358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e35a:	f3ef 8305 	mrs	r3, IPSR
   2e35e:	2b0d      	cmp	r3, #13
   2e360:	d804      	bhi.n	2e36c <z_impl_k_yield+0x14>
   2e362:	b193      	cbz	r3, 2e38a <z_impl_k_yield+0x32>
   2e364:	4b46      	ldr	r3, [pc, #280]	; (2e480 <z_impl_k_yield+0x128>)
   2e366:	685b      	ldr	r3, [r3, #4]
   2e368:	051b      	lsls	r3, r3, #20
   2e36a:	d40e      	bmi.n	2e38a <z_impl_k_yield+0x32>
	__ASSERT(!z_arch_is_in_isr(), "");
   2e36c:	4945      	ldr	r1, [pc, #276]	; (2e484 <z_impl_k_yield+0x12c>)
   2e36e:	f44f 7362 	mov.w	r3, #904	; 0x388
   2e372:	4a45      	ldr	r2, [pc, #276]	; (2e488 <z_impl_k_yield+0x130>)
   2e374:	4845      	ldr	r0, [pc, #276]	; (2e48c <z_impl_k_yield+0x134>)
   2e376:	f003 fa7f 	bl	31878 <printk>
   2e37a:	4845      	ldr	r0, [pc, #276]	; (2e490 <z_impl_k_yield+0x138>)
   2e37c:	f003 fa7c 	bl	31878 <printk>
   2e380:	f44f 7162 	mov.w	r1, #904	; 0x388
   2e384:	4840      	ldr	r0, [pc, #256]	; (2e488 <z_impl_k_yield+0x130>)
   2e386:	f003 fa84 	bl	31892 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   2e38a:	4c42      	ldr	r4, [pc, #264]	; (2e494 <z_impl_k_yield+0x13c>)
   2e38c:	4e42      	ldr	r6, [pc, #264]	; (2e498 <z_impl_k_yield+0x140>)
   2e38e:	68a2      	ldr	r2, [r4, #8]
   2e390:	42b2      	cmp	r2, r6
   2e392:	d068      	beq.n	2e466 <z_impl_k_yield+0x10e>
	__asm__ volatile(
   2e394:	f04f 0320 	mov.w	r3, #32
   2e398:	f3ef 8711 	mrs	r7, BASEPRI
   2e39c:	f383 8811 	msr	BASEPRI, r3
   2e3a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2e3a4:	483d      	ldr	r0, [pc, #244]	; (2e49c <z_impl_k_yield+0x144>)
   2e3a6:	f000 f9d7 	bl	2e758 <z_spin_lock_valid>
   2e3aa:	b960      	cbnz	r0, 2e3c6 <z_impl_k_yield+0x6e>
   2e3ac:	493c      	ldr	r1, [pc, #240]	; (2e4a0 <z_impl_k_yield+0x148>)
   2e3ae:	235f      	movs	r3, #95	; 0x5f
   2e3b0:	4a3c      	ldr	r2, [pc, #240]	; (2e4a4 <z_impl_k_yield+0x14c>)
   2e3b2:	4836      	ldr	r0, [pc, #216]	; (2e48c <z_impl_k_yield+0x134>)
   2e3b4:	f003 fa60 	bl	31878 <printk>
   2e3b8:	483b      	ldr	r0, [pc, #236]	; (2e4a8 <z_impl_k_yield+0x150>)
   2e3ba:	f003 fa5d 	bl	31878 <printk>
   2e3be:	215f      	movs	r1, #95	; 0x5f
   2e3c0:	4838      	ldr	r0, [pc, #224]	; (2e4a4 <z_impl_k_yield+0x14c>)
   2e3c2:	f003 fa66 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2e3c6:	4835      	ldr	r0, [pc, #212]	; (2e49c <z_impl_k_yield+0x144>)
   2e3c8:	f000 f9e4 	bl	2e794 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   2e3cc:	68a1      	ldr	r1, [r4, #8]
   2e3ce:	4837      	ldr	r0, [pc, #220]	; (2e4ac <z_impl_k_yield+0x154>)
   2e3d0:	f7ff fb0c 	bl	2d9ec <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   2e3d4:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2e3d6:	42b5      	cmp	r5, r6
   2e3d8:	d10b      	bne.n	2e3f2 <z_impl_k_yield+0x9a>
   2e3da:	4935      	ldr	r1, [pc, #212]	; (2e4b0 <z_impl_k_yield+0x158>)
   2e3dc:	482b      	ldr	r0, [pc, #172]	; (2e48c <z_impl_k_yield+0x134>)
   2e3de:	f240 237e 	movw	r3, #638	; 0x27e
   2e3e2:	4a29      	ldr	r2, [pc, #164]	; (2e488 <z_impl_k_yield+0x130>)
   2e3e4:	f003 fa48 	bl	31878 <printk>
   2e3e8:	f240 217e 	movw	r1, #638	; 0x27e
   2e3ec:	4826      	ldr	r0, [pc, #152]	; (2e488 <z_impl_k_yield+0x130>)
   2e3ee:	f003 fa50 	bl	31892 <assert_post_action>
   2e3f2:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e3f6:	4a2d      	ldr	r2, [pc, #180]	; (2e4ac <z_impl_k_yield+0x154>)
   2e3f8:	4293      	cmp	r3, r2
   2e3fa:	d00b      	beq.n	2e414 <z_impl_k_yield+0xbc>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2e3fc:	b153      	cbz	r3, 2e414 <z_impl_k_yield+0xbc>
	if (t1->base.prio < t2->base.prio) {
   2e3fe:	f995 000e 	ldrsb.w	r0, [r5, #14]
   2e402:	f993 600e 	ldrsb.w	r6, [r3, #14]
   2e406:	4286      	cmp	r6, r0
   2e408:	dc0a      	bgt.n	2e420 <z_impl_k_yield+0xc8>
	return (node == list->tail) ? NULL : node->next;
   2e40a:	428b      	cmp	r3, r1
   2e40c:	d002      	beq.n	2e414 <z_impl_k_yield+0xbc>
   2e40e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2e410:	2b00      	cmp	r3, #0
   2e412:	d1f6      	bne.n	2e402 <z_impl_k_yield+0xaa>
	node->prev = list->tail;
   2e414:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   2e418:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2e41a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2e41c:	62e5      	str	r5, [r4, #44]	; 0x2c
   2e41e:	e005      	b.n	2e42c <z_impl_k_yield+0xd4>
	node->prev = successor->prev;
   2e420:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2e422:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   2e426:	685a      	ldr	r2, [r3, #4]
   2e428:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   2e42a:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   2e42c:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   2e42e:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   2e430:	7b53      	ldrb	r3, [r2, #13]
   2e432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e436:	7353      	strb	r3, [r2, #13]
   2e438:	f7ff fb5c 	bl	2daf4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2e43c:	4817      	ldr	r0, [pc, #92]	; (2e49c <z_impl_k_yield+0x144>)
   2e43e:	f000 f999 	bl	2e774 <z_spin_unlock_valid>
   2e442:	b960      	cbnz	r0, 2e45e <z_impl_k_yield+0x106>
   2e444:	491b      	ldr	r1, [pc, #108]	; (2e4b4 <z_impl_k_yield+0x15c>)
   2e446:	2372      	movs	r3, #114	; 0x72
   2e448:	4a16      	ldr	r2, [pc, #88]	; (2e4a4 <z_impl_k_yield+0x14c>)
   2e44a:	4810      	ldr	r0, [pc, #64]	; (2e48c <z_impl_k_yield+0x134>)
   2e44c:	f003 fa14 	bl	31878 <printk>
   2e450:	4819      	ldr	r0, [pc, #100]	; (2e4b8 <z_impl_k_yield+0x160>)
   2e452:	f003 fa11 	bl	31878 <printk>
   2e456:	2172      	movs	r1, #114	; 0x72
   2e458:	4812      	ldr	r0, [pc, #72]	; (2e4a4 <z_impl_k_yield+0x14c>)
   2e45a:	f003 fa1a 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2e45e:	f387 8811 	msr	BASEPRI, r7
   2e462:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2e466:	f04f 0320 	mov.w	r3, #32
   2e46a:	f3ef 8011 	mrs	r0, BASEPRI
   2e46e:	f383 8811 	msr	BASEPRI, r3
   2e472:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   2e476:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2e47a:	f7ed bb6f 	b.w	1bb5c <z_arch_swap>
   2e47e:	bf00      	nop
   2e480:	e000ed00 	.word	0xe000ed00
   2e484:	0003680d 	.word	0x0003680d
   2e488:	00036871 	.word	0x00036871
   2e48c:	00034ff7 	.word	0x00034ff7
   2e490:	000367d3 	.word	0x000367d3
   2e494:	200259e0 	.word	0x200259e0
   2e498:	20021818 	.word	0x20021818
   2e49c:	20025a18 	.word	0x20025a18
   2e4a0:	00035426 	.word	0x00035426
   2e4a4:	000353f4 	.word	0x000353f4
   2e4a8:	0003543b 	.word	0x0003543b
   2e4ac:	20025a08 	.word	0x20025a08
   2e4b0:	000368d5 	.word	0x000368d5
   2e4b4:	00035450 	.word	0x00035450
   2e4b8:	00035467 	.word	0x00035467

0002e4bc <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   2e4bc:	4b01      	ldr	r3, [pc, #4]	; (2e4c4 <z_impl_k_current_get+0x8>)
   2e4be:	6898      	ldr	r0, [r3, #8]
   2e4c0:	4770      	bx	lr
   2e4c2:	bf00      	nop
   2e4c4:	200259e0 	.word	0x200259e0

0002e4c8 <z_impl_k_sem_init>:

#endif /* CONFIG_OBJECT_TRACING */

void z_impl_k_sem_init(struct k_sem *sem, unsigned int initial_count,
		      unsigned int limit)
{
   2e4c8:	b570      	push	{r4, r5, r6, lr}
   2e4ca:	4604      	mov	r4, r0
   2e4cc:	460e      	mov	r6, r1
	__ASSERT(limit != 0U, "limit cannot be zero");
   2e4ce:	4615      	mov	r5, r2
   2e4d0:	b962      	cbnz	r2, 2e4ec <z_impl_k_sem_init+0x24>
   2e4d2:	4912      	ldr	r1, [pc, #72]	; (2e51c <z_impl_k_sem_init+0x54>)
   2e4d4:	2341      	movs	r3, #65	; 0x41
   2e4d6:	4a12      	ldr	r2, [pc, #72]	; (2e520 <z_impl_k_sem_init+0x58>)
   2e4d8:	4812      	ldr	r0, [pc, #72]	; (2e524 <z_impl_k_sem_init+0x5c>)
   2e4da:	f003 f9cd 	bl	31878 <printk>
   2e4de:	4812      	ldr	r0, [pc, #72]	; (2e528 <z_impl_k_sem_init+0x60>)
   2e4e0:	f003 f9ca 	bl	31878 <printk>
   2e4e4:	2141      	movs	r1, #65	; 0x41
   2e4e6:	480e      	ldr	r0, [pc, #56]	; (2e520 <z_impl_k_sem_init+0x58>)
   2e4e8:	f003 f9d3 	bl	31892 <assert_post_action>
	__ASSERT(initial_count <= limit, "count cannot be greater than limit");
   2e4ec:	42b5      	cmp	r5, r6
   2e4ee:	d20c      	bcs.n	2e50a <z_impl_k_sem_init+0x42>
   2e4f0:	490e      	ldr	r1, [pc, #56]	; (2e52c <z_impl_k_sem_init+0x64>)
   2e4f2:	2342      	movs	r3, #66	; 0x42
   2e4f4:	4a0a      	ldr	r2, [pc, #40]	; (2e520 <z_impl_k_sem_init+0x58>)
   2e4f6:	480b      	ldr	r0, [pc, #44]	; (2e524 <z_impl_k_sem_init+0x5c>)
   2e4f8:	f003 f9be 	bl	31878 <printk>
   2e4fc:	480c      	ldr	r0, [pc, #48]	; (2e530 <z_impl_k_sem_init+0x68>)
   2e4fe:	f003 f9bb 	bl	31878 <printk>
   2e502:	2142      	movs	r1, #66	; 0x42
   2e504:	4806      	ldr	r0, [pc, #24]	; (2e520 <z_impl_k_sem_init+0x58>)
   2e506:	f003 f9c4 	bl	31892 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SEMA_INIT);
	sem->count = initial_count;
	sem->limit = limit;
	z_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   2e50a:	f104 0310 	add.w	r3, r4, #16
	sem->limit = limit;
   2e50e:	e9c4 6502 	strd	r6, r5, [r4, #8]
	list->tail = (sys_dnode_t *)list;
   2e512:	e9c4 4400 	strd	r4, r4, [r4]
   2e516:	e9c4 3304 	strd	r3, r3, [r4, #16]

	SYS_TRACING_OBJ_INIT(k_sem, sem);

	z_object_init(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_INIT);
}
   2e51a:	bd70      	pop	{r4, r5, r6, pc}
   2e51c:	00036922 	.word	0x00036922
   2e520:	000368f6 	.word	0x000368f6
   2e524:	00034ff7 	.word	0x00034ff7
   2e528:	0003692e 	.word	0x0003692e
   2e52c:	00036945 	.word	0x00036945
   2e530:	0003695c 	.word	0x0003695c

0002e534 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2e534:	b570      	push	{r4, r5, r6, lr}
   2e536:	4604      	mov	r4, r0
   2e538:	f04f 0320 	mov.w	r3, #32
   2e53c:	f3ef 8611 	mrs	r6, BASEPRI
   2e540:	f383 8811 	msr	BASEPRI, r3
   2e544:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2e548:	4819      	ldr	r0, [pc, #100]	; (2e5b0 <z_impl_k_sem_give+0x7c>)
   2e54a:	f000 f905 	bl	2e758 <z_spin_lock_valid>
   2e54e:	b960      	cbnz	r0, 2e56a <z_impl_k_sem_give+0x36>
   2e550:	4918      	ldr	r1, [pc, #96]	; (2e5b4 <z_impl_k_sem_give+0x80>)
   2e552:	235f      	movs	r3, #95	; 0x5f
   2e554:	4a18      	ldr	r2, [pc, #96]	; (2e5b8 <z_impl_k_sem_give+0x84>)
   2e556:	4819      	ldr	r0, [pc, #100]	; (2e5bc <z_impl_k_sem_give+0x88>)
   2e558:	f003 f98e 	bl	31878 <printk>
   2e55c:	4818      	ldr	r0, [pc, #96]	; (2e5c0 <z_impl_k_sem_give+0x8c>)
   2e55e:	f003 f98b 	bl	31878 <printk>
   2e562:	215f      	movs	r1, #95	; 0x5f
   2e564:	4814      	ldr	r0, [pc, #80]	; (2e5b8 <z_impl_k_sem_give+0x84>)
   2e566:	f003 f994 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2e56a:	4811      	ldr	r0, [pc, #68]	; (2e5b0 <z_impl_k_sem_give+0x7c>)
   2e56c:	f000 f912 	bl	2e794 <z_spin_lock_set_owner>
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   2e570:	4620      	mov	r0, r4
   2e572:	f7ff fe59 	bl	2e228 <z_unpend_first_thread>
	if (thread != NULL) {
   2e576:	4605      	mov	r5, r0
   2e578:	b170      	cbz	r0, 2e598 <z_impl_k_sem_give+0x64>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2e57a:	7b43      	ldrb	r3, [r0, #13]
   2e57c:	06db      	lsls	r3, r3, #27
   2e57e:	d103      	bne.n	2e588 <z_impl_k_sem_give+0x54>
	if (z_is_thread_ready(thread)) {
   2e580:	6983      	ldr	r3, [r0, #24]
   2e582:	b90b      	cbnz	r3, 2e588 <z_impl_k_sem_give+0x54>
		z_add_thread_to_ready_q(thread);
   2e584:	f7ff fb6e 	bl	2dc64 <z_add_thread_to_ready_q>
}

static ALWAYS_INLINE void
z_arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2e588:	2300      	movs	r3, #0
   2e58a:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   2e58c:	4631      	mov	r1, r6
}
   2e58e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   2e592:	4807      	ldr	r0, [pc, #28]	; (2e5b0 <z_impl_k_sem_give+0x7c>)
   2e594:	f7ff b970 	b.w	2d878 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2e598:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2e59c:	429a      	cmp	r2, r3
   2e59e:	bf18      	it	ne
   2e5a0:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2e5a2:	2102      	movs	r1, #2
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2e5a4:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2e5a6:	f104 0010 	add.w	r0, r4, #16
   2e5aa:	f004 f965 	bl	32878 <z_handle_obj_poll_events>
   2e5ae:	e7ed      	b.n	2e58c <z_impl_k_sem_give+0x58>
   2e5b0:	20025a24 	.word	0x20025a24
   2e5b4:	00035426 	.word	0x00035426
   2e5b8:	000353f4 	.word	0x000353f4
   2e5bc:	00034ff7 	.word	0x00034ff7
   2e5c0:	0003543b 	.word	0x0003543b

0002e5c4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   2e5c4:	b570      	push	{r4, r5, r6, lr}
   2e5c6:	4605      	mov	r5, r0
   2e5c8:	460e      	mov	r6, r1
   2e5ca:	f3ef 8305 	mrs	r3, IPSR
   2e5ce:	2b0d      	cmp	r3, #13
   2e5d0:	d804      	bhi.n	2e5dc <z_impl_k_sem_take+0x18>
   2e5d2:	b18b      	cbz	r3, 2e5f8 <z_impl_k_sem_take+0x34>
   2e5d4:	4b34      	ldr	r3, [pc, #208]	; (2e6a8 <z_impl_k_sem_take+0xe4>)
   2e5d6:	685b      	ldr	r3, [r3, #4]
   2e5d8:	051b      	lsls	r3, r3, #20
   2e5da:	d40d      	bmi.n	2e5f8 <z_impl_k_sem_take+0x34>
	__ASSERT(((z_arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");
   2e5dc:	b166      	cbz	r6, 2e5f8 <z_impl_k_sem_take+0x34>
   2e5de:	4933      	ldr	r1, [pc, #204]	; (2e6ac <z_impl_k_sem_take+0xe8>)
   2e5e0:	238d      	movs	r3, #141	; 0x8d
   2e5e2:	4a33      	ldr	r2, [pc, #204]	; (2e6b0 <z_impl_k_sem_take+0xec>)
   2e5e4:	4833      	ldr	r0, [pc, #204]	; (2e6b4 <z_impl_k_sem_take+0xf0>)
   2e5e6:	f003 f947 	bl	31878 <printk>
   2e5ea:	4833      	ldr	r0, [pc, #204]	; (2e6b8 <z_impl_k_sem_take+0xf4>)
   2e5ec:	f003 f944 	bl	31878 <printk>
   2e5f0:	218d      	movs	r1, #141	; 0x8d
   2e5f2:	482f      	ldr	r0, [pc, #188]	; (2e6b0 <z_impl_k_sem_take+0xec>)
   2e5f4:	f003 f94d 	bl	31892 <assert_post_action>
   2e5f8:	f04f 0320 	mov.w	r3, #32
   2e5fc:	f3ef 8411 	mrs	r4, BASEPRI
   2e600:	f383 8811 	msr	BASEPRI, r3
   2e604:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2e608:	482c      	ldr	r0, [pc, #176]	; (2e6bc <z_impl_k_sem_take+0xf8>)
   2e60a:	f000 f8a5 	bl	2e758 <z_spin_lock_valid>
   2e60e:	b960      	cbnz	r0, 2e62a <z_impl_k_sem_take+0x66>
   2e610:	492b      	ldr	r1, [pc, #172]	; (2e6c0 <z_impl_k_sem_take+0xfc>)
   2e612:	235f      	movs	r3, #95	; 0x5f
   2e614:	4a2b      	ldr	r2, [pc, #172]	; (2e6c4 <z_impl_k_sem_take+0x100>)
   2e616:	4827      	ldr	r0, [pc, #156]	; (2e6b4 <z_impl_k_sem_take+0xf0>)
   2e618:	f003 f92e 	bl	31878 <printk>
   2e61c:	482a      	ldr	r0, [pc, #168]	; (2e6c8 <z_impl_k_sem_take+0x104>)
   2e61e:	f003 f92b 	bl	31878 <printk>
   2e622:	215f      	movs	r1, #95	; 0x5f
   2e624:	4827      	ldr	r0, [pc, #156]	; (2e6c4 <z_impl_k_sem_take+0x100>)
   2e626:	f003 f934 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2e62a:	4824      	ldr	r0, [pc, #144]	; (2e6bc <z_impl_k_sem_take+0xf8>)
   2e62c:	f000 f8b2 	bl	2e794 <z_spin_lock_set_owner>

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   2e630:	68ab      	ldr	r3, [r5, #8]
   2e632:	b1c3      	cbz	r3, 2e666 <z_impl_k_sem_take+0xa2>
		sem->count--;
   2e634:	3b01      	subs	r3, #1
   2e636:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2e638:	4820      	ldr	r0, [pc, #128]	; (2e6bc <z_impl_k_sem_take+0xf8>)
   2e63a:	f000 f89b 	bl	2e774 <z_spin_unlock_valid>
   2e63e:	b960      	cbnz	r0, 2e65a <z_impl_k_sem_take+0x96>
   2e640:	4922      	ldr	r1, [pc, #136]	; (2e6cc <z_impl_k_sem_take+0x108>)
   2e642:	2372      	movs	r3, #114	; 0x72
   2e644:	4a1f      	ldr	r2, [pc, #124]	; (2e6c4 <z_impl_k_sem_take+0x100>)
   2e646:	481b      	ldr	r0, [pc, #108]	; (2e6b4 <z_impl_k_sem_take+0xf0>)
   2e648:	f003 f916 	bl	31878 <printk>
   2e64c:	4820      	ldr	r0, [pc, #128]	; (2e6d0 <z_impl_k_sem_take+0x10c>)
   2e64e:	f003 f913 	bl	31878 <printk>
   2e652:	2172      	movs	r1, #114	; 0x72
   2e654:	481b      	ldr	r0, [pc, #108]	; (2e6c4 <z_impl_k_sem_take+0x100>)
   2e656:	f003 f91c 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2e65a:	f384 8811 	msr	BASEPRI, r4
   2e65e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   2e662:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   2e664:	bd70      	pop	{r4, r5, r6, pc}
	if (timeout == K_NO_WAIT) {
   2e666:	b9be      	cbnz	r6, 2e698 <z_impl_k_sem_take+0xd4>
   2e668:	4814      	ldr	r0, [pc, #80]	; (2e6bc <z_impl_k_sem_take+0xf8>)
   2e66a:	f000 f883 	bl	2e774 <z_spin_unlock_valid>
   2e66e:	b960      	cbnz	r0, 2e68a <z_impl_k_sem_take+0xc6>
   2e670:	4916      	ldr	r1, [pc, #88]	; (2e6cc <z_impl_k_sem_take+0x108>)
   2e672:	2372      	movs	r3, #114	; 0x72
   2e674:	4a13      	ldr	r2, [pc, #76]	; (2e6c4 <z_impl_k_sem_take+0x100>)
   2e676:	480f      	ldr	r0, [pc, #60]	; (2e6b4 <z_impl_k_sem_take+0xf0>)
   2e678:	f003 f8fe 	bl	31878 <printk>
   2e67c:	4814      	ldr	r0, [pc, #80]	; (2e6d0 <z_impl_k_sem_take+0x10c>)
   2e67e:	f003 f8fb 	bl	31878 <printk>
   2e682:	2172      	movs	r1, #114	; 0x72
   2e684:	480f      	ldr	r0, [pc, #60]	; (2e6c4 <z_impl_k_sem_take+0x100>)
   2e686:	f003 f904 	bl	31892 <assert_post_action>
   2e68a:	f384 8811 	msr	BASEPRI, r4
   2e68e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   2e692:	f06f 000f 	mvn.w	r0, #15
   2e696:	e7e5      	b.n	2e664 <z_impl_k_sem_take+0xa0>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2e698:	4633      	mov	r3, r6
   2e69a:	462a      	mov	r2, r5
   2e69c:	4621      	mov	r1, r4
}
   2e69e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2e6a2:	4806      	ldr	r0, [pc, #24]	; (2e6bc <z_impl_k_sem_take+0xf8>)
   2e6a4:	f7ff bd92 	b.w	2e1cc <z_pend_curr>
   2e6a8:	e000ed00 	.word	0xe000ed00
   2e6ac:	00036981 	.word	0x00036981
   2e6b0:	000368f6 	.word	0x000368f6
   2e6b4:	00034ff7 	.word	0x00034ff7
   2e6b8:	000367d3 	.word	0x000367d3
   2e6bc:	20025a24 	.word	0x20025a24
   2e6c0:	00035426 	.word	0x00035426
   2e6c4:	000353f4 	.word	0x000353f4
   2e6c8:	0003543b 	.word	0x0003543b
   2e6cc:	00035450 	.word	0x00035450
   2e6d0:	00035467 	.word	0x00035467

0002e6d4 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   2e6d4:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   2e6d6:	4c08      	ldr	r4, [pc, #32]	; (2e6f8 <k_sys_work_q_init+0x24>)
   2e6d8:	f04f 33ff 	mov.w	r3, #4294967295
   2e6dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2e6e0:	4906      	ldr	r1, [pc, #24]	; (2e6fc <k_sys_work_q_init+0x28>)
   2e6e2:	4620      	mov	r0, r4
   2e6e4:	f000 f9ee 	bl	2eac4 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   2e6e8:	4905      	ldr	r1, [pc, #20]	; (2e700 <k_sys_work_q_init+0x2c>)
   2e6ea:	f104 0014 	add.w	r0, r4, #20
   2e6ee:	f004 f812 	bl	32716 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   2e6f2:	2000      	movs	r0, #0
   2e6f4:	bd10      	pop	{r4, pc}
   2e6f6:	bf00      	nop
   2e6f8:	20025a28 	.word	0x20025a28
   2e6fc:	200285c8 	.word	0x200285c8
   2e700:	000369af 	.word	0x000369af

0002e704 <k_is_in_isr>:
   2e704:	f3ef 8005 	mrs	r0, IPSR
   2e708:	280d      	cmp	r0, #13
   2e70a:	d807      	bhi.n	2e71c <k_is_in_isr+0x18>
   2e70c:	b138      	cbz	r0, 2e71e <k_is_in_isr+0x1a>
   2e70e:	4b04      	ldr	r3, [pc, #16]	; (2e720 <k_is_in_isr+0x1c>)
   2e710:	6858      	ldr	r0, [r3, #4]
   2e712:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   2e716:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   2e71a:	4770      	bx	lr
   2e71c:	2001      	movs	r0, #1
}

bool k_is_in_isr(void)
{
	return z_arch_is_in_isr();
}
   2e71e:	4770      	bx	lr
   2e720:	e000ed00 	.word	0xe000ed00

0002e724 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   2e724:	b530      	push	{r4, r5, lr}
   2e726:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2e728:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   2e72a:	4604      	mov	r4, r0
	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2e72c:	9504      	str	r5, [sp, #16]
   2e72e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   2e730:	9503      	str	r5, [sp, #12]
   2e732:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2e734:	9502      	str	r5, [sp, #8]
   2e736:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2e738:	9501      	str	r5, [sp, #4]
   2e73a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2e73c:	9500      	str	r5, [sp, #0]
   2e73e:	f7ed fa77 	bl	1bc30 <z_arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   2e742:	4b04      	ldr	r3, [pc, #16]	; (2e754 <z_setup_new_thread+0x30>)
   2e744:	689b      	ldr	r3, [r3, #8]
   2e746:	b913      	cbnz	r3, 2e74e <z_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   2e748:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   2e74a:	b007      	add	sp, #28
   2e74c:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   2e74e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   2e750:	e7fa      	b.n	2e748 <z_setup_new_thread+0x24>
   2e752:	bf00      	nop
   2e754:	200259e0 	.word	0x200259e0

0002e758 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   2e758:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   2e75a:	b138      	cbz	r0, 2e76c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   2e75c:	4b04      	ldr	r3, [pc, #16]	; (2e770 <z_spin_lock_valid+0x18>)
   2e75e:	f000 0003 	and.w	r0, r0, #3
   2e762:	7d1b      	ldrb	r3, [r3, #20]
   2e764:	1ac0      	subs	r0, r0, r3
   2e766:	bf18      	it	ne
   2e768:	2001      	movne	r0, #1
   2e76a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   2e76c:	2001      	movs	r0, #1
}
   2e76e:	4770      	bx	lr
   2e770:	200259e0 	.word	0x200259e0

0002e774 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   2e774:	4a06      	ldr	r2, [pc, #24]	; (2e790 <z_spin_unlock_valid+0x1c>)
   2e776:	7d11      	ldrb	r1, [r2, #20]
   2e778:	6893      	ldr	r3, [r2, #8]
   2e77a:	6802      	ldr	r2, [r0, #0]
   2e77c:	430b      	orrs	r3, r1
   2e77e:	429a      	cmp	r2, r3
   2e780:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   2e784:	bf06      	itte	eq
   2e786:	6003      	streq	r3, [r0, #0]
	return true;
   2e788:	2001      	moveq	r0, #1
		return false;
   2e78a:	4618      	movne	r0, r3
}
   2e78c:	4770      	bx	lr
   2e78e:	bf00      	nop
   2e790:	200259e0 	.word	0x200259e0

0002e794 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   2e794:	4a02      	ldr	r2, [pc, #8]	; (2e7a0 <z_spin_lock_set_owner+0xc>)
   2e796:	7d11      	ldrb	r1, [r2, #20]
   2e798:	6893      	ldr	r3, [r2, #8]
   2e79a:	430b      	orrs	r3, r1
   2e79c:	6003      	str	r3, [r0, #0]
}
   2e79e:	4770      	bx	lr
   2e7a0:	200259e0 	.word	0x200259e0

0002e7a4 <z_impl_k_thread_start>:
{
   2e7a4:	b538      	push	{r3, r4, r5, lr}
   2e7a6:	4604      	mov	r4, r0
	__asm__ volatile(
   2e7a8:	f04f 0320 	mov.w	r3, #32
   2e7ac:	f3ef 8511 	mrs	r5, BASEPRI
   2e7b0:	f383 8811 	msr	BASEPRI, r3
   2e7b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2e7b8:	481e      	ldr	r0, [pc, #120]	; (2e834 <z_impl_k_thread_start+0x90>)
   2e7ba:	f7ff ffcd 	bl	2e758 <z_spin_lock_valid>
   2e7be:	b960      	cbnz	r0, 2e7da <z_impl_k_thread_start+0x36>
   2e7c0:	491d      	ldr	r1, [pc, #116]	; (2e838 <z_impl_k_thread_start+0x94>)
   2e7c2:	235f      	movs	r3, #95	; 0x5f
   2e7c4:	4a1d      	ldr	r2, [pc, #116]	; (2e83c <z_impl_k_thread_start+0x98>)
   2e7c6:	481e      	ldr	r0, [pc, #120]	; (2e840 <z_impl_k_thread_start+0x9c>)
   2e7c8:	f003 f856 	bl	31878 <printk>
   2e7cc:	481d      	ldr	r0, [pc, #116]	; (2e844 <z_impl_k_thread_start+0xa0>)
   2e7ce:	f003 f853 	bl	31878 <printk>
   2e7d2:	215f      	movs	r1, #95	; 0x5f
   2e7d4:	4819      	ldr	r0, [pc, #100]	; (2e83c <z_impl_k_thread_start+0x98>)
   2e7d6:	f003 f85c 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2e7da:	4816      	ldr	r0, [pc, #88]	; (2e834 <z_impl_k_thread_start+0x90>)
   2e7dc:	f7ff ffda 	bl	2e794 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   2e7e0:	7b63      	ldrb	r3, [r4, #13]
   2e7e2:	075a      	lsls	r2, r3, #29
   2e7e4:	d415      	bmi.n	2e812 <z_impl_k_thread_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2e7e6:	4813      	ldr	r0, [pc, #76]	; (2e834 <z_impl_k_thread_start+0x90>)
   2e7e8:	f7ff ffc4 	bl	2e774 <z_spin_unlock_valid>
   2e7ec:	b960      	cbnz	r0, 2e808 <z_impl_k_thread_start+0x64>
   2e7ee:	4916      	ldr	r1, [pc, #88]	; (2e848 <z_impl_k_thread_start+0xa4>)
   2e7f0:	2372      	movs	r3, #114	; 0x72
   2e7f2:	4a12      	ldr	r2, [pc, #72]	; (2e83c <z_impl_k_thread_start+0x98>)
   2e7f4:	4812      	ldr	r0, [pc, #72]	; (2e840 <z_impl_k_thread_start+0x9c>)
   2e7f6:	f003 f83f 	bl	31878 <printk>
   2e7fa:	4814      	ldr	r0, [pc, #80]	; (2e84c <z_impl_k_thread_start+0xa8>)
   2e7fc:	f003 f83c 	bl	31878 <printk>
   2e800:	2172      	movs	r1, #114	; 0x72
   2e802:	480e      	ldr	r0, [pc, #56]	; (2e83c <z_impl_k_thread_start+0x98>)
   2e804:	f003 f845 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2e808:	f385 8811 	msr	BASEPRI, r5
   2e80c:	f3bf 8f6f 	isb	sy
}
   2e810:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2e812:	f023 0304 	bic.w	r3, r3, #4
   2e816:	7363      	strb	r3, [r4, #13]
	if (z_is_thread_ready(thread)) {
   2e818:	4620      	mov	r0, r4
   2e81a:	f003 ff73 	bl	32704 <z_is_thread_ready>
   2e81e:	b110      	cbz	r0, 2e826 <z_impl_k_thread_start+0x82>
		z_add_thread_to_ready_q(thread);
   2e820:	4620      	mov	r0, r4
   2e822:	f7ff fa1f 	bl	2dc64 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   2e826:	4629      	mov	r1, r5
}
   2e828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2e82c:	4801      	ldr	r0, [pc, #4]	; (2e834 <z_impl_k_thread_start+0x90>)
   2e82e:	f7ff b823 	b.w	2d878 <z_reschedule>
   2e832:	bf00      	nop
   2e834:	20025aec 	.word	0x20025aec
   2e838:	00035426 	.word	0x00035426
   2e83c:	000353f4 	.word	0x000353f4
   2e840:	00034ff7 	.word	0x00034ff7
   2e844:	0003543b 	.word	0x0003543b
   2e848:	00035450 	.word	0x00035450
   2e84c:	00035467 	.word	0x00035467

0002e850 <z_impl_k_thread_create>:
{
   2e850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e854:	b086      	sub	sp, #24
   2e856:	4604      	mov	r4, r0
   2e858:	460e      	mov	r6, r1
   2e85a:	4617      	mov	r7, r2
   2e85c:	4698      	mov	r8, r3
   2e85e:	9d11      	ldr	r5, [sp, #68]	; 0x44
   2e860:	f3ef 8305 	mrs	r3, IPSR
   2e864:	2b0d      	cmp	r3, #13
   2e866:	d804      	bhi.n	2e872 <z_impl_k_thread_create+0x22>
   2e868:	b193      	cbz	r3, 2e890 <z_impl_k_thread_create+0x40>
   2e86a:	4b21      	ldr	r3, [pc, #132]	; (2e8f0 <z_impl_k_thread_create+0xa0>)
   2e86c:	685b      	ldr	r3, [r3, #4]
   2e86e:	051a      	lsls	r2, r3, #20
   2e870:	d40e      	bmi.n	2e890 <z_impl_k_thread_create+0x40>
	__ASSERT(!z_arch_is_in_isr(), "Threads may not be created in ISRs");
   2e872:	4920      	ldr	r1, [pc, #128]	; (2e8f4 <z_impl_k_thread_create+0xa4>)
   2e874:	f240 2315 	movw	r3, #533	; 0x215
   2e878:	4a1f      	ldr	r2, [pc, #124]	; (2e8f8 <z_impl_k_thread_create+0xa8>)
   2e87a:	4820      	ldr	r0, [pc, #128]	; (2e8fc <z_impl_k_thread_create+0xac>)
   2e87c:	f002 fffc 	bl	31878 <printk>
   2e880:	481f      	ldr	r0, [pc, #124]	; (2e900 <z_impl_k_thread_create+0xb0>)
   2e882:	f002 fff9 	bl	31878 <printk>
   2e886:	f240 2115 	movw	r1, #533	; 0x215
   2e88a:	481b      	ldr	r0, [pc, #108]	; (2e8f8 <z_impl_k_thread_create+0xa8>)
   2e88c:	f003 f801 	bl	31892 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2e890:	2300      	movs	r3, #0
   2e892:	9305      	str	r3, [sp, #20]
   2e894:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2e896:	463a      	mov	r2, r7
   2e898:	9304      	str	r3, [sp, #16]
   2e89a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2e89c:	4631      	mov	r1, r6
   2e89e:	9303      	str	r3, [sp, #12]
   2e8a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2e8a2:	4620      	mov	r0, r4
   2e8a4:	9302      	str	r3, [sp, #8]
   2e8a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2e8a8:	9301      	str	r3, [sp, #4]
   2e8aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2e8ac:	9300      	str	r3, [sp, #0]
   2e8ae:	4643      	mov	r3, r8
   2e8b0:	f7ff ff38 	bl	2e724 <z_setup_new_thread>
	if (delay != K_FOREVER) {
   2e8b4:	1c6b      	adds	r3, r5, #1
   2e8b6:	d003      	beq.n	2e8c0 <z_impl_k_thread_create+0x70>
	if (delay == 0) {
   2e8b8:	b935      	cbnz	r5, 2e8c8 <z_impl_k_thread_create+0x78>
	z_impl_k_thread_start(thread);
   2e8ba:	4620      	mov	r0, r4
   2e8bc:	f7ff ff72 	bl	2e7a4 <z_impl_k_thread_start>
}
   2e8c0:	4620      	mov	r0, r4
   2e8c2:	b006      	add	sp, #24
   2e8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e8c8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2e8cc:	f240 30e7 	movw	r0, #999	; 0x3e7
   2e8d0:	2100      	movs	r1, #0
   2e8d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2e8d6:	2300      	movs	r3, #0
   2e8d8:	fbc6 0105 	smlal	r0, r1, r6, r5
   2e8dc:	f7e9 ff5c 	bl	18798 <__aeabi_ldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   2e8e0:	4908      	ldr	r1, [pc, #32]	; (2e904 <z_impl_k_thread_create+0xb4>)
   2e8e2:	1c42      	adds	r2, r0, #1
   2e8e4:	f104 0018 	add.w	r0, r4, #24
   2e8e8:	f000 f9d6 	bl	2ec98 <z_add_timeout>
   2e8ec:	e7e8      	b.n	2e8c0 <z_impl_k_thread_create+0x70>
   2e8ee:	bf00      	nop
   2e8f0:	e000ed00 	.word	0xe000ed00
   2e8f4:	0003680d 	.word	0x0003680d
   2e8f8:	000369b8 	.word	0x000369b8
   2e8fc:	00034ff7 	.word	0x00034ff7
   2e900:	000369e7 	.word	0x000369e7
   2e904:	0002dd65 	.word	0x0002dd65

0002e908 <z_init_static_threads>:
{
   2e908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   2e90c:	4f3c      	ldr	r7, [pc, #240]	; (2ea00 <z_init_static_threads+0xf8>)
   2e90e:	4d3d      	ldr	r5, [pc, #244]	; (2ea04 <z_init_static_threads+0xfc>)
   2e910:	463e      	mov	r6, r7
   2e912:	f8df 8100 	ldr.w	r8, [pc, #256]	; 2ea14 <z_init_static_threads+0x10c>
{
   2e916:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   2e918:	42bd      	cmp	r5, r7
   2e91a:	d90e      	bls.n	2e93a <z_init_static_threads+0x32>
   2e91c:	493a      	ldr	r1, [pc, #232]	; (2ea08 <z_init_static_threads+0x100>)
   2e91e:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   2e922:	4642      	mov	r2, r8
   2e924:	4839      	ldr	r0, [pc, #228]	; (2ea0c <z_init_static_threads+0x104>)
   2e926:	f002 ffa7 	bl	31878 <printk>
   2e92a:	4839      	ldr	r0, [pc, #228]	; (2ea10 <z_init_static_threads+0x108>)
   2e92c:	f002 ffa4 	bl	31878 <printk>
   2e930:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   2e934:	4640      	mov	r0, r8
   2e936:	f002 ffac 	bl	31892 <assert_post_action>
   2e93a:	42b5      	cmp	r5, r6
   2e93c:	f105 0430 	add.w	r4, r5, #48	; 0x30
   2e940:	d31f      	bcc.n	2e982 <z_init_static_threads+0x7a>
	k_sched_lock();
   2e942:	f7fe ffd5 	bl	2d8f0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   2e946:	4c2f      	ldr	r4, [pc, #188]	; (2ea04 <z_init_static_threads+0xfc>)
   2e948:	4d32      	ldr	r5, [pc, #200]	; (2ea14 <z_init_static_threads+0x10c>)
   2e94a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 2ea08 <z_init_static_threads+0x100>
   2e94e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 2ea0c <z_init_static_threads+0x104>
   2e952:	42b4      	cmp	r4, r6
   2e954:	d90e      	bls.n	2e974 <z_init_static_threads+0x6c>
   2e956:	4641      	mov	r1, r8
   2e958:	f240 23f3 	movw	r3, #755	; 0x2f3
   2e95c:	462a      	mov	r2, r5
   2e95e:	4648      	mov	r0, r9
   2e960:	f002 ff8a 	bl	31878 <printk>
   2e964:	482a      	ldr	r0, [pc, #168]	; (2ea10 <z_init_static_threads+0x108>)
   2e966:	f002 ff87 	bl	31878 <printk>
   2e96a:	f240 21f3 	movw	r1, #755	; 0x2f3
   2e96e:	4628      	mov	r0, r5
   2e970:	f002 ff8f 	bl	31892 <assert_post_action>
   2e974:	42b4      	cmp	r4, r6
   2e976:	d321      	bcc.n	2e9bc <z_init_static_threads+0xb4>
}
   2e978:	b007      	add	sp, #28
   2e97a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   2e97e:	f7ff b8ef 	b.w	2db60 <k_sched_unlock>
		z_setup_new_thread(
   2e982:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2e986:	9305      	str	r3, [sp, #20]
   2e988:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2e98c:	9304      	str	r3, [sp, #16]
   2e98e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2e992:	9303      	str	r3, [sp, #12]
   2e994:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2e998:	9302      	str	r3, [sp, #8]
   2e99a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2e99e:	9301      	str	r3, [sp, #4]
   2e9a0:	f854 3c20 	ldr.w	r3, [r4, #-32]
   2e9a4:	9300      	str	r3, [sp, #0]
   2e9a6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2e9aa:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2e9ae:	f7ff feb9 	bl	2e724 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2e9b2:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2e9b6:	64dd      	str	r5, [r3, #76]	; 0x4c
   2e9b8:	4625      	mov	r5, r4
   2e9ba:	e7ad      	b.n	2e918 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_FOREVER) {
   2e9bc:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   2e9c0:	f1bc 3fff 	cmp.w	ip, #4294967295
   2e9c4:	d006      	beq.n	2e9d4 <z_init_static_threads+0xcc>
			schedule_new_thread(thread_data->init_thread,
   2e9c6:	6827      	ldr	r7, [r4, #0]
	if (delay == 0) {
   2e9c8:	f1bc 0f00 	cmp.w	ip, #0
   2e9cc:	d104      	bne.n	2e9d8 <z_init_static_threads+0xd0>
   2e9ce:	4638      	mov	r0, r7
   2e9d0:	f7ff fee8 	bl	2e7a4 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2e9d4:	3430      	adds	r4, #48	; 0x30
   2e9d6:	e7bc      	b.n	2e952 <z_init_static_threads+0x4a>
   2e9d8:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   2e9dc:	f240 30e7 	movw	r0, #999	; 0x3e7
   2e9e0:	2100      	movs	r1, #0
   2e9e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2e9e6:	2300      	movs	r3, #0
   2e9e8:	fbce 010c 	smlal	r0, r1, lr, ip
   2e9ec:	f7e9 fed4 	bl	18798 <__aeabi_ldivmod>
   2e9f0:	4909      	ldr	r1, [pc, #36]	; (2ea18 <z_init_static_threads+0x110>)
   2e9f2:	1c42      	adds	r2, r0, #1
   2e9f4:	f107 0018 	add.w	r0, r7, #24
   2e9f8:	f000 f94e 	bl	2ec98 <z_add_timeout>
   2e9fc:	e7ea      	b.n	2e9d4 <z_init_static_threads+0xcc>
   2e9fe:	bf00      	nop
   2ea00:	200290dc 	.word	0x200290dc
   2ea04:	200290dc 	.word	0x200290dc
   2ea08:	00036a0c 	.word	0x00036a0c
   2ea0c:	00034ff7 	.word	0x00034ff7
   2ea10:	00036744 	.word	0x00036744
   2ea14:	000369b8 	.word	0x000369b8
   2ea18:	0002dd65 	.word	0x0002dd65

0002ea1c <work_cancel>:
	work->work_q = NULL;
}

static int work_cancel(struct k_delayed_work *work)
{
	__ASSERT(work->work_q != NULL, "");
   2ea1c:	69c3      	ldr	r3, [r0, #28]
{
   2ea1e:	b570      	push	{r4, r5, r6, lr}
   2ea20:	4604      	mov	r4, r0
	__ASSERT(work->work_q != NULL, "");
   2ea22:	b963      	cbnz	r3, 2ea3e <work_cancel+0x22>
   2ea24:	4923      	ldr	r1, [pc, #140]	; (2eab4 <work_cancel+0x98>)
   2ea26:	2339      	movs	r3, #57	; 0x39
   2ea28:	4a23      	ldr	r2, [pc, #140]	; (2eab8 <work_cancel+0x9c>)
   2ea2a:	4824      	ldr	r0, [pc, #144]	; (2eabc <work_cancel+0xa0>)
   2ea2c:	f002 ff24 	bl	31878 <printk>
   2ea30:	4823      	ldr	r0, [pc, #140]	; (2eac0 <work_cancel+0xa4>)
   2ea32:	f002 ff21 	bl	31878 <printk>
   2ea36:	2139      	movs	r1, #57	; 0x39
   2ea38:	481f      	ldr	r0, [pc, #124]	; (2eab8 <work_cancel+0x9c>)
   2ea3a:	f002 ff2a 	bl	31892 <assert_post_action>
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   2ea3e:	f104 0508 	add.w	r5, r4, #8
   2ea42:	e8d5 3faf 	lda	r3, [r5]

	if (k_work_pending(&work->work)) {
   2ea46:	07db      	lsls	r3, r3, #31
   2ea48:	d52f      	bpl.n	2eaaa <work_cancel+0x8e>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2ea4a:	2100      	movs	r1, #0
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2ea4c:	69e2      	ldr	r2, [r4, #28]
   2ea4e:	6813      	ldr	r3, [r2, #0]
   2ea50:	b913      	cbnz	r3, 2ea58 <work_cancel+0x3c>
			return -EINVAL;
   2ea52:	f06f 0015 	mvn.w	r0, #21
	work->work_q = NULL;

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);

	return 0;
}
   2ea56:	bd70      	pop	{r4, r5, r6, pc}
   2ea58:	429c      	cmp	r4, r3
   2ea5a:	d121      	bne.n	2eaa0 <work_cancel+0x84>
   2ea5c:	6823      	ldr	r3, [r4, #0]
   2ea5e:	6856      	ldr	r6, [r2, #4]
   2ea60:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   2ea64:	b991      	cbnz	r1, 2ea8c <work_cancel+0x70>
   2ea66:	42b4      	cmp	r4, r6
	list->head = node;
   2ea68:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2ea6a:	d100      	bne.n	2ea6e <work_cancel+0x52>
	list->tail = node;
   2ea6c:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ea6e:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ea70:	f003 0303 	and.w	r3, r3, #3
   2ea74:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   2ea76:	2000      	movs	r0, #0
   2ea78:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ea7a:	e8d5 3fef 	ldaex	r3, [r5]
   2ea7e:	f023 0301 	bic.w	r3, r3, #1
   2ea82:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2ea86:	2a00      	cmp	r2, #0
   2ea88:	d0e5      	beq.n	2ea56 <work_cancel+0x3a>
   2ea8a:	e7f6      	b.n	2ea7a <work_cancel+0x5e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ea8c:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2ea8e:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ea90:	f003 0303 	and.w	r3, r3, #3
   2ea94:	ea43 0300 	orr.w	r3, r3, r0
   2ea98:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2ea9a:	bf08      	it	eq
   2ea9c:	6051      	streq	r1, [r2, #4]
   2ea9e:	e7e6      	b.n	2ea6e <work_cancel+0x52>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2eaa0:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2eaa2:	4619      	mov	r1, r3
   2eaa4:	f020 0303 	bic.w	r3, r0, #3
   2eaa8:	e7d2      	b.n	2ea50 <work_cancel+0x34>
		(void)z_abort_timeout(&work->timeout);
   2eaaa:	f104 000c 	add.w	r0, r4, #12
   2eaae:	f000 f999 	bl	2ede4 <z_abort_timeout>
   2eab2:	e7e0      	b.n	2ea76 <work_cancel+0x5a>
   2eab4:	00036a68 	.word	0x00036a68
   2eab8:	00036a39 	.word	0x00036a39
   2eabc:	00034ff7 	.word	0x00034ff7
   2eac0:	000367d3 	.word	0x000367d3

0002eac4 <k_work_q_start>:
{
   2eac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2eac8:	4605      	mov	r5, r0
   2eaca:	b086      	sub	sp, #24
   2eacc:	460e      	mov	r6, r1
   2eace:	4617      	mov	r7, r2
   2ead0:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   2ead2:	f003 fdc1 	bl	32658 <z_impl_k_queue_init>
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   2ead6:	f105 0414 	add.w	r4, r5, #20
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2eada:	2000      	movs	r0, #0
   2eadc:	4b09      	ldr	r3, [pc, #36]	; (2eb04 <k_work_q_start+0x40>)
   2eade:	e9cd 0004 	strd	r0, r0, [sp, #16]
   2eae2:	e9cd 0802 	strd	r0, r8, [sp, #8]
   2eae6:	e9cd 5000 	strd	r5, r0, [sp]
   2eaea:	463a      	mov	r2, r7
   2eaec:	4631      	mov	r1, r6
   2eaee:	4620      	mov	r0, r4
   2eaf0:	f7ff feae 	bl	2e850 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   2eaf4:	4620      	mov	r0, r4
   2eaf6:	4904      	ldr	r1, [pc, #16]	; (2eb08 <k_work_q_start+0x44>)
}
   2eaf8:	b006      	add	sp, #24
   2eafa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2eafe:	f003 be0a 	b.w	32716 <z_impl_k_thread_name_set>
   2eb02:	bf00      	nop
   2eb04:	00031537 	.word	0x00031537
   2eb08:	00036091 	.word	0x00036091

0002eb0c <k_delayed_work_submit_to_queue>:

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   2eb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2eb10:	4606      	mov	r6, r0
   2eb12:	460d      	mov	r5, r1
   2eb14:	4690      	mov	r8, r2
	__asm__ volatile(
   2eb16:	f04f 0320 	mov.w	r3, #32
   2eb1a:	f3ef 8711 	mrs	r7, BASEPRI
   2eb1e:	f383 8811 	msr	BASEPRI, r3
   2eb22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2eb26:	4836      	ldr	r0, [pc, #216]	; (2ec00 <k_delayed_work_submit_to_queue+0xf4>)
   2eb28:	f7ff fe16 	bl	2e758 <z_spin_lock_valid>
   2eb2c:	b960      	cbnz	r0, 2eb48 <k_delayed_work_submit_to_queue+0x3c>
   2eb2e:	4935      	ldr	r1, [pc, #212]	; (2ec04 <k_delayed_work_submit_to_queue+0xf8>)
   2eb30:	235f      	movs	r3, #95	; 0x5f
   2eb32:	4a35      	ldr	r2, [pc, #212]	; (2ec08 <k_delayed_work_submit_to_queue+0xfc>)
   2eb34:	4835      	ldr	r0, [pc, #212]	; (2ec0c <k_delayed_work_submit_to_queue+0x100>)
   2eb36:	f002 fe9f 	bl	31878 <printk>
   2eb3a:	4835      	ldr	r0, [pc, #212]	; (2ec10 <k_delayed_work_submit_to_queue+0x104>)
   2eb3c:	f002 fe9c 	bl	31878 <printk>
   2eb40:	215f      	movs	r1, #95	; 0x5f
   2eb42:	4831      	ldr	r0, [pc, #196]	; (2ec08 <k_delayed_work_submit_to_queue+0xfc>)
   2eb44:	f002 fea5 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2eb48:	482d      	ldr	r0, [pc, #180]	; (2ec00 <k_delayed_work_submit_to_queue+0xf4>)
   2eb4a:	f7ff fe23 	bl	2e794 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   2eb4e:	69ec      	ldr	r4, [r5, #28]
   2eb50:	b1e4      	cbz	r4, 2eb8c <k_delayed_work_submit_to_queue+0x80>
   2eb52:	42b4      	cmp	r4, r6
   2eb54:	d150      	bne.n	2ebf8 <k_delayed_work_submit_to_queue+0xec>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   2eb56:	4628      	mov	r0, r5
   2eb58:	f7ff ff60 	bl	2ea1c <work_cancel>
		if (err < 0) {
   2eb5c:	1e04      	subs	r4, r0, #0
   2eb5e:	da17      	bge.n	2eb90 <k_delayed_work_submit_to_queue+0x84>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2eb60:	4827      	ldr	r0, [pc, #156]	; (2ec00 <k_delayed_work_submit_to_queue+0xf4>)
   2eb62:	f7ff fe07 	bl	2e774 <z_spin_unlock_valid>
   2eb66:	b960      	cbnz	r0, 2eb82 <k_delayed_work_submit_to_queue+0x76>
   2eb68:	492a      	ldr	r1, [pc, #168]	; (2ec14 <k_delayed_work_submit_to_queue+0x108>)
   2eb6a:	2372      	movs	r3, #114	; 0x72
   2eb6c:	4a26      	ldr	r2, [pc, #152]	; (2ec08 <k_delayed_work_submit_to_queue+0xfc>)
   2eb6e:	4827      	ldr	r0, [pc, #156]	; (2ec0c <k_delayed_work_submit_to_queue+0x100>)
   2eb70:	f002 fe82 	bl	31878 <printk>
   2eb74:	4828      	ldr	r0, [pc, #160]	; (2ec18 <k_delayed_work_submit_to_queue+0x10c>)
   2eb76:	f002 fe7f 	bl	31878 <printk>
   2eb7a:	2172      	movs	r1, #114	; 0x72
   2eb7c:	4822      	ldr	r0, [pc, #136]	; (2ec08 <k_delayed_work_submit_to_queue+0xfc>)
   2eb7e:	f002 fe88 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2eb82:	f387 8811 	msr	BASEPRI, r7
   2eb86:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + z_ms_to_ticks(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   2eb8a:	e01f      	b.n	2ebcc <k_delayed_work_submit_to_queue+0xc0>
	if (work->work_q == work_q) {
   2eb8c:	2e00      	cmp	r6, #0
   2eb8e:	d0e2      	beq.n	2eb56 <k_delayed_work_submit_to_queue+0x4a>
	work->work_q = work_q;
   2eb90:	61ee      	str	r6, [r5, #28]
	if (delay == 0) {
   2eb92:	f1b8 0f00 	cmp.w	r8, #0
   2eb96:	d11c      	bne.n	2ebd2 <k_delayed_work_submit_to_queue+0xc6>
   2eb98:	4819      	ldr	r0, [pc, #100]	; (2ec00 <k_delayed_work_submit_to_queue+0xf4>)
   2eb9a:	f7ff fdeb 	bl	2e774 <z_spin_unlock_valid>
   2eb9e:	b960      	cbnz	r0, 2ebba <k_delayed_work_submit_to_queue+0xae>
   2eba0:	491c      	ldr	r1, [pc, #112]	; (2ec14 <k_delayed_work_submit_to_queue+0x108>)
   2eba2:	2372      	movs	r3, #114	; 0x72
   2eba4:	4a18      	ldr	r2, [pc, #96]	; (2ec08 <k_delayed_work_submit_to_queue+0xfc>)
   2eba6:	4819      	ldr	r0, [pc, #100]	; (2ec0c <k_delayed_work_submit_to_queue+0x100>)
   2eba8:	f002 fe66 	bl	31878 <printk>
   2ebac:	481a      	ldr	r0, [pc, #104]	; (2ec18 <k_delayed_work_submit_to_queue+0x10c>)
   2ebae:	f002 fe63 	bl	31878 <printk>
   2ebb2:	2172      	movs	r1, #114	; 0x72
   2ebb4:	4814      	ldr	r0, [pc, #80]	; (2ec08 <k_delayed_work_submit_to_queue+0xfc>)
   2ebb6:	f002 fe6c 	bl	31892 <assert_post_action>
   2ebba:	f387 8811 	msr	BASEPRI, r7
   2ebbe:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   2ebc2:	4629      	mov	r1, r5
   2ebc4:	4630      	mov	r0, r6
   2ebc6:	f003 fdd2 	bl	3276e <k_work_submit_to_queue>
		return 0;
   2ebca:	2400      	movs	r4, #0
}
   2ebcc:	4620      	mov	r0, r4
   2ebce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ebd2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2ebd6:	f240 30e7 	movw	r0, #999	; 0x3e7
   2ebda:	2100      	movs	r1, #0
   2ebdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2ebe0:	2300      	movs	r3, #0
   2ebe2:	fbc6 0108 	smlal	r0, r1, r6, r8
   2ebe6:	f7e9 fdd7 	bl	18798 <__aeabi_ldivmod>
	z_add_timeout(&work->timeout, work_timeout,
   2ebea:	490c      	ldr	r1, [pc, #48]	; (2ec1c <k_delayed_work_submit_to_queue+0x110>)
   2ebec:	1c42      	adds	r2, r0, #1
   2ebee:	f105 000c 	add.w	r0, r5, #12
   2ebf2:	f000 f851 	bl	2ec98 <z_add_timeout>
   2ebf6:	e7b3      	b.n	2eb60 <k_delayed_work_submit_to_queue+0x54>
		err = -EADDRINUSE;
   2ebf8:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   2ebfc:	e7b0      	b.n	2eb60 <k_delayed_work_submit_to_queue+0x54>
   2ebfe:	bf00      	nop
   2ec00:	20025af0 	.word	0x20025af0
   2ec04:	00035426 	.word	0x00035426
   2ec08:	000353f4 	.word	0x000353f4
   2ec0c:	00034ff7 	.word	0x00034ff7
   2ec10:	0003543b 	.word	0x0003543b
   2ec14:	00035450 	.word	0x00035450
   2ec18:	00035467 	.word	0x00035467
   2ec1c:	00032797 	.word	0x00032797

0002ec20 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   2ec20:	4b03      	ldr	r3, [pc, #12]	; (2ec30 <elapsed+0x10>)
   2ec22:	681b      	ldr	r3, [r3, #0]
   2ec24:	b90b      	cbnz	r3, 2ec2a <elapsed+0xa>
   2ec26:	f7ec be39 	b.w	1b89c <z_clock_elapsed>
}
   2ec2a:	2000      	movs	r0, #0
   2ec2c:	4770      	bx	lr
   2ec2e:	bf00      	nop
   2ec30:	20025af4 	.word	0x20025af4

0002ec34 <next_timeout>:
	return list->head == list;
   2ec34:	4b0b      	ldr	r3, [pc, #44]	; (2ec64 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   2ec36:	b510      	push	{r4, lr}
   2ec38:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ec3a:	429c      	cmp	r4, r3
   2ec3c:	bf08      	it	eq
   2ec3e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   2ec40:	f7ff ffee 	bl	2ec20 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   2ec44:	b154      	cbz	r4, 2ec5c <next_timeout+0x28>
   2ec46:	68a3      	ldr	r3, [r4, #8]
   2ec48:	1a18      	subs	r0, r3, r0
   2ec4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2ec4e:	4b06      	ldr	r3, [pc, #24]	; (2ec68 <next_timeout+0x34>)
   2ec50:	691b      	ldr	r3, [r3, #16]
   2ec52:	b113      	cbz	r3, 2ec5a <next_timeout+0x26>
   2ec54:	4298      	cmp	r0, r3
   2ec56:	bfa8      	it	ge
   2ec58:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2ec5a:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   2ec5c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2ec60:	e7f5      	b.n	2ec4e <next_timeout+0x1a>
   2ec62:	bf00      	nop
   2ec64:	20028e34 	.word	0x20028e34
   2ec68:	200259e0 	.word	0x200259e0

0002ec6c <remove_timeout>:
{
   2ec6c:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2ec6e:	b140      	cbz	r0, 2ec82 <remove_timeout+0x16>
   2ec70:	4a08      	ldr	r2, [pc, #32]	; (2ec94 <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
   2ec72:	6852      	ldr	r2, [r2, #4]
   2ec74:	4290      	cmp	r0, r2
   2ec76:	d004      	beq.n	2ec82 <remove_timeout+0x16>
	if (next(t) != NULL) {
   2ec78:	b11b      	cbz	r3, 2ec82 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   2ec7a:	689a      	ldr	r2, [r3, #8]
   2ec7c:	6881      	ldr	r1, [r0, #8]
   2ec7e:	440a      	add	r2, r1
   2ec80:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   2ec82:	6842      	ldr	r2, [r0, #4]
   2ec84:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2ec86:	6803      	ldr	r3, [r0, #0]
   2ec88:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2ec8a:	2300      	movs	r3, #0
	node->prev = NULL;
   2ec8c:	e9c0 3300 	strd	r3, r3, [r0]
}
   2ec90:	4770      	bx	lr
   2ec92:	bf00      	nop
   2ec94:	20028e34 	.word	0x20028e34

0002ec98 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   2ec98:	6803      	ldr	r3, [r0, #0]
{
   2ec9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ec9e:	4604      	mov	r4, r0
   2eca0:	460e      	mov	r6, r1
   2eca2:	4615      	mov	r5, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   2eca4:	b163      	cbz	r3, 2ecc0 <z_add_timeout+0x28>
   2eca6:	4943      	ldr	r1, [pc, #268]	; (2edb4 <z_add_timeout+0x11c>)
   2eca8:	2356      	movs	r3, #86	; 0x56
   2ecaa:	4a43      	ldr	r2, [pc, #268]	; (2edb8 <z_add_timeout+0x120>)
   2ecac:	4843      	ldr	r0, [pc, #268]	; (2edbc <z_add_timeout+0x124>)
   2ecae:	f002 fde3 	bl	31878 <printk>
   2ecb2:	4843      	ldr	r0, [pc, #268]	; (2edc0 <z_add_timeout+0x128>)
   2ecb4:	f002 fde0 	bl	31878 <printk>
   2ecb8:	2156      	movs	r1, #86	; 0x56
   2ecba:	483f      	ldr	r0, [pc, #252]	; (2edb8 <z_add_timeout+0x120>)
   2ecbc:	f002 fde9 	bl	31892 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   2ecc0:	2d01      	cmp	r5, #1
   2ecc2:	bfb8      	it	lt
   2ecc4:	2501      	movlt	r5, #1
	to->fn = fn;
   2ecc6:	60e6      	str	r6, [r4, #12]
	__asm__ volatile(
   2ecc8:	f04f 0320 	mov.w	r3, #32
   2eccc:	f3ef 8811 	mrs	r8, BASEPRI
   2ecd0:	f383 8811 	msr	BASEPRI, r3
   2ecd4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2ecd8:	483a      	ldr	r0, [pc, #232]	; (2edc4 <z_add_timeout+0x12c>)
   2ecda:	f7ff fd3d 	bl	2e758 <z_spin_lock_valid>
   2ecde:	b960      	cbnz	r0, 2ecfa <z_add_timeout+0x62>
   2ece0:	4939      	ldr	r1, [pc, #228]	; (2edc8 <z_add_timeout+0x130>)
   2ece2:	235f      	movs	r3, #95	; 0x5f
   2ece4:	4a39      	ldr	r2, [pc, #228]	; (2edcc <z_add_timeout+0x134>)
   2ece6:	4835      	ldr	r0, [pc, #212]	; (2edbc <z_add_timeout+0x124>)
   2ece8:	f002 fdc6 	bl	31878 <printk>
   2ecec:	4838      	ldr	r0, [pc, #224]	; (2edd0 <z_add_timeout+0x138>)
   2ecee:	f002 fdc3 	bl	31878 <printk>
   2ecf2:	215f      	movs	r1, #95	; 0x5f
   2ecf4:	4835      	ldr	r0, [pc, #212]	; (2edcc <z_add_timeout+0x134>)
   2ecf6:	f002 fdcc 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ecfa:	4832      	ldr	r0, [pc, #200]	; (2edc4 <z_add_timeout+0x12c>)
   2ecfc:	f7ff fd4a 	bl	2e794 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   2ed00:	f7ff ff8e 	bl	2ec20 <elapsed>
	return list->head == list;
   2ed04:	4e33      	ldr	r6, [pc, #204]	; (2edd4 <z_add_timeout+0x13c>)
   2ed06:	4428      	add	r0, r5
   2ed08:	6835      	ldr	r5, [r6, #0]
   2ed0a:	60a0      	str	r0, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ed0c:	42b5      	cmp	r5, r6
   2ed0e:	d005      	beq.n	2ed1c <z_add_timeout+0x84>
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");
   2ed10:	4f29      	ldr	r7, [pc, #164]	; (2edb8 <z_add_timeout+0x120>)
   2ed12:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 2ede0 <z_add_timeout+0x148>
   2ed16:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 2edbc <z_add_timeout+0x124>
		for (t = first(); t != NULL; t = next(t)) {
   2ed1a:	b935      	cbnz	r5, 2ed2a <z_add_timeout+0x92>
	node->prev = list->tail;
   2ed1c:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   2ed1e:	6026      	str	r6, [r4, #0]
	node->prev = list->tail;
   2ed20:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2ed22:	6873      	ldr	r3, [r6, #4]
   2ed24:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2ed26:	6074      	str	r4, [r6, #4]
   2ed28:	e01b      	b.n	2ed62 <z_add_timeout+0xca>
			__ASSERT(t->dticks >= 0, "");
   2ed2a:	68ab      	ldr	r3, [r5, #8]
   2ed2c:	2b00      	cmp	r3, #0
   2ed2e:	da0c      	bge.n	2ed4a <z_add_timeout+0xb2>
   2ed30:	4649      	mov	r1, r9
   2ed32:	235f      	movs	r3, #95	; 0x5f
   2ed34:	463a      	mov	r2, r7
   2ed36:	4650      	mov	r0, sl
   2ed38:	f002 fd9e 	bl	31878 <printk>
   2ed3c:	4820      	ldr	r0, [pc, #128]	; (2edc0 <z_add_timeout+0x128>)
   2ed3e:	f002 fd9b 	bl	31878 <printk>
   2ed42:	215f      	movs	r1, #95	; 0x5f
   2ed44:	4638      	mov	r0, r7
   2ed46:	f002 fda4 	bl	31892 <assert_post_action>

			if (t->dticks > to->dticks) {
   2ed4a:	68aa      	ldr	r2, [r5, #8]
   2ed4c:	68a3      	ldr	r3, [r4, #8]
   2ed4e:	429a      	cmp	r2, r3
   2ed50:	dd28      	ble.n	2eda4 <z_add_timeout+0x10c>
				t->dticks -= to->dticks;
   2ed52:	1ad3      	subs	r3, r2, r3
   2ed54:	60ab      	str	r3, [r5, #8]
	node->prev = successor->prev;
   2ed56:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   2ed58:	e9c4 5300 	strd	r5, r3, [r4]
	successor->prev->next = node;
   2ed5c:	686b      	ldr	r3, [r5, #4]
   2ed5e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2ed60:	606c      	str	r4, [r5, #4]
	return list->head == list;
   2ed62:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ed64:	42b3      	cmp	r3, r6
   2ed66:	d006      	beq.n	2ed76 <z_add_timeout+0xde>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   2ed68:	429c      	cmp	r4, r3
   2ed6a:	d104      	bne.n	2ed76 <z_add_timeout+0xde>
			z_clock_set_timeout(next_timeout(), false);
   2ed6c:	f7ff ff62 	bl	2ec34 <next_timeout>
   2ed70:	2100      	movs	r1, #0
   2ed72:	f7ec fd11 	bl	1b798 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2ed76:	4813      	ldr	r0, [pc, #76]	; (2edc4 <z_add_timeout+0x12c>)
   2ed78:	f7ff fcfc 	bl	2e774 <z_spin_unlock_valid>
   2ed7c:	b960      	cbnz	r0, 2ed98 <z_add_timeout+0x100>
   2ed7e:	4916      	ldr	r1, [pc, #88]	; (2edd8 <z_add_timeout+0x140>)
   2ed80:	2372      	movs	r3, #114	; 0x72
   2ed82:	4a12      	ldr	r2, [pc, #72]	; (2edcc <z_add_timeout+0x134>)
   2ed84:	480d      	ldr	r0, [pc, #52]	; (2edbc <z_add_timeout+0x124>)
   2ed86:	f002 fd77 	bl	31878 <printk>
   2ed8a:	4814      	ldr	r0, [pc, #80]	; (2eddc <z_add_timeout+0x144>)
   2ed8c:	f002 fd74 	bl	31878 <printk>
   2ed90:	2172      	movs	r1, #114	; 0x72
   2ed92:	480e      	ldr	r0, [pc, #56]	; (2edcc <z_add_timeout+0x134>)
   2ed94:	f002 fd7d 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2ed98:	f388 8811 	msr	BASEPRI, r8
   2ed9c:	f3bf 8f6f 	isb	sy
		}
	}
}
   2eda0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			to->dticks -= t->dticks;
   2eda4:	1a9b      	subs	r3, r3, r2
   2eda6:	60a3      	str	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
   2eda8:	6873      	ldr	r3, [r6, #4]
   2edaa:	42ab      	cmp	r3, r5
   2edac:	d0b6      	beq.n	2ed1c <z_add_timeout+0x84>
   2edae:	682d      	ldr	r5, [r5, #0]
   2edb0:	e7b3      	b.n	2ed1a <z_add_timeout+0x82>
   2edb2:	bf00      	nop
   2edb4:	00036ab4 	.word	0x00036ab4
   2edb8:	00036a84 	.word	0x00036a84
   2edbc:	00034ff7 	.word	0x00034ff7
   2edc0:	000367d3 	.word	0x000367d3
   2edc4:	20025af8 	.word	0x20025af8
   2edc8:	00035426 	.word	0x00035426
   2edcc:	000353f4 	.word	0x000353f4
   2edd0:	0003543b 	.word	0x0003543b
   2edd4:	20028e34 	.word	0x20028e34
   2edd8:	00035450 	.word	0x00035450
   2eddc:	00035467 	.word	0x00035467
   2ede0:	00036ad4 	.word	0x00036ad4

0002ede4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   2ede4:	b538      	push	{r3, r4, r5, lr}
   2ede6:	4604      	mov	r4, r0
	__asm__ volatile(
   2ede8:	f04f 0320 	mov.w	r3, #32
   2edec:	f3ef 8511 	mrs	r5, BASEPRI
   2edf0:	f383 8811 	msr	BASEPRI, r3
   2edf4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2edf8:	4819      	ldr	r0, [pc, #100]	; (2ee60 <z_abort_timeout+0x7c>)
   2edfa:	f7ff fcad 	bl	2e758 <z_spin_lock_valid>
   2edfe:	b960      	cbnz	r0, 2ee1a <z_abort_timeout+0x36>
   2ee00:	4918      	ldr	r1, [pc, #96]	; (2ee64 <z_abort_timeout+0x80>)
   2ee02:	235f      	movs	r3, #95	; 0x5f
   2ee04:	4a18      	ldr	r2, [pc, #96]	; (2ee68 <z_abort_timeout+0x84>)
   2ee06:	4819      	ldr	r0, [pc, #100]	; (2ee6c <z_abort_timeout+0x88>)
   2ee08:	f002 fd36 	bl	31878 <printk>
   2ee0c:	4818      	ldr	r0, [pc, #96]	; (2ee70 <z_abort_timeout+0x8c>)
   2ee0e:	f002 fd33 	bl	31878 <printk>
   2ee12:	215f      	movs	r1, #95	; 0x5f
   2ee14:	4814      	ldr	r0, [pc, #80]	; (2ee68 <z_abort_timeout+0x84>)
   2ee16:	f002 fd3c 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ee1a:	4811      	ldr	r0, [pc, #68]	; (2ee60 <z_abort_timeout+0x7c>)
   2ee1c:	f7ff fcba 	bl	2e794 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   2ee20:	6823      	ldr	r3, [r4, #0]
   2ee22:	b1d3      	cbz	r3, 2ee5a <z_abort_timeout+0x76>
			remove_timeout(to);
   2ee24:	4620      	mov	r0, r4
   2ee26:	f7ff ff21 	bl	2ec6c <remove_timeout>
			ret = 0;
   2ee2a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2ee2c:	480c      	ldr	r0, [pc, #48]	; (2ee60 <z_abort_timeout+0x7c>)
   2ee2e:	f7ff fca1 	bl	2e774 <z_spin_unlock_valid>
   2ee32:	b960      	cbnz	r0, 2ee4e <z_abort_timeout+0x6a>
   2ee34:	490f      	ldr	r1, [pc, #60]	; (2ee74 <z_abort_timeout+0x90>)
   2ee36:	2372      	movs	r3, #114	; 0x72
   2ee38:	4a0b      	ldr	r2, [pc, #44]	; (2ee68 <z_abort_timeout+0x84>)
   2ee3a:	480c      	ldr	r0, [pc, #48]	; (2ee6c <z_abort_timeout+0x88>)
   2ee3c:	f002 fd1c 	bl	31878 <printk>
   2ee40:	480d      	ldr	r0, [pc, #52]	; (2ee78 <z_abort_timeout+0x94>)
   2ee42:	f002 fd19 	bl	31878 <printk>
   2ee46:	2172      	movs	r1, #114	; 0x72
   2ee48:	4807      	ldr	r0, [pc, #28]	; (2ee68 <z_abort_timeout+0x84>)
   2ee4a:	f002 fd22 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2ee4e:	f385 8811 	msr	BASEPRI, r5
   2ee52:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   2ee56:	4620      	mov	r0, r4
   2ee58:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   2ee5a:	f06f 0415 	mvn.w	r4, #21
   2ee5e:	e7e5      	b.n	2ee2c <z_abort_timeout+0x48>
   2ee60:	20025af8 	.word	0x20025af8
   2ee64:	00035426 	.word	0x00035426
   2ee68:	000353f4 	.word	0x000353f4
   2ee6c:	00034ff7 	.word	0x00034ff7
   2ee70:	0003543b 	.word	0x0003543b
   2ee74:	00035450 	.word	0x00035450
   2ee78:	00035467 	.word	0x00035467

0002ee7c <z_get_next_timeout_expiry>:

	return ticks - elapsed();
}

s32_t z_get_next_timeout_expiry(void)
{
   2ee7c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2ee7e:	f04f 0320 	mov.w	r3, #32
   2ee82:	f3ef 8511 	mrs	r5, BASEPRI
   2ee86:	f383 8811 	msr	BASEPRI, r3
   2ee8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2ee8e:	4817      	ldr	r0, [pc, #92]	; (2eeec <z_get_next_timeout_expiry+0x70>)
   2ee90:	f7ff fc62 	bl	2e758 <z_spin_lock_valid>
   2ee94:	b960      	cbnz	r0, 2eeb0 <z_get_next_timeout_expiry+0x34>
   2ee96:	4916      	ldr	r1, [pc, #88]	; (2eef0 <z_get_next_timeout_expiry+0x74>)
   2ee98:	235f      	movs	r3, #95	; 0x5f
   2ee9a:	4a16      	ldr	r2, [pc, #88]	; (2eef4 <z_get_next_timeout_expiry+0x78>)
   2ee9c:	4816      	ldr	r0, [pc, #88]	; (2eef8 <z_get_next_timeout_expiry+0x7c>)
   2ee9e:	f002 fceb 	bl	31878 <printk>
   2eea2:	4816      	ldr	r0, [pc, #88]	; (2eefc <z_get_next_timeout_expiry+0x80>)
   2eea4:	f002 fce8 	bl	31878 <printk>
   2eea8:	215f      	movs	r1, #95	; 0x5f
   2eeaa:	4812      	ldr	r0, [pc, #72]	; (2eef4 <z_get_next_timeout_expiry+0x78>)
   2eeac:	f002 fcf1 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2eeb0:	480e      	ldr	r0, [pc, #56]	; (2eeec <z_get_next_timeout_expiry+0x70>)
   2eeb2:	f7ff fc6f 	bl	2e794 <z_spin_lock_set_owner>
	s32_t ret = K_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   2eeb6:	f7ff febd 	bl	2ec34 <next_timeout>
   2eeba:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2eebc:	480b      	ldr	r0, [pc, #44]	; (2eeec <z_get_next_timeout_expiry+0x70>)
   2eebe:	f7ff fc59 	bl	2e774 <z_spin_unlock_valid>
   2eec2:	b960      	cbnz	r0, 2eede <z_get_next_timeout_expiry+0x62>
   2eec4:	490e      	ldr	r1, [pc, #56]	; (2ef00 <z_get_next_timeout_expiry+0x84>)
   2eec6:	2372      	movs	r3, #114	; 0x72
   2eec8:	4a0a      	ldr	r2, [pc, #40]	; (2eef4 <z_get_next_timeout_expiry+0x78>)
   2eeca:	480b      	ldr	r0, [pc, #44]	; (2eef8 <z_get_next_timeout_expiry+0x7c>)
   2eecc:	f002 fcd4 	bl	31878 <printk>
   2eed0:	480c      	ldr	r0, [pc, #48]	; (2ef04 <z_get_next_timeout_expiry+0x88>)
   2eed2:	f002 fcd1 	bl	31878 <printk>
   2eed6:	2172      	movs	r1, #114	; 0x72
   2eed8:	4806      	ldr	r0, [pc, #24]	; (2eef4 <z_get_next_timeout_expiry+0x78>)
   2eeda:	f002 fcda 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2eede:	f385 8811 	msr	BASEPRI, r5
   2eee2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2eee6:	4620      	mov	r0, r4
   2eee8:	bd38      	pop	{r3, r4, r5, pc}
   2eeea:	bf00      	nop
   2eeec:	20025af8 	.word	0x20025af8
   2eef0:	00035426 	.word	0x00035426
   2eef4:	000353f4 	.word	0x000353f4
   2eef8:	00034ff7 	.word	0x00034ff7
   2eefc:	0003543b 	.word	0x0003543b
   2ef00:	00035450 	.word	0x00035450
   2ef04:	00035467 	.word	0x00035467

0002ef08 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   2ef08:	b570      	push	{r4, r5, r6, lr}
   2ef0a:	4604      	mov	r4, r0
   2ef0c:	460e      	mov	r6, r1
	__asm__ volatile(
   2ef0e:	f04f 0320 	mov.w	r3, #32
   2ef12:	f3ef 8511 	mrs	r5, BASEPRI
   2ef16:	f383 8811 	msr	BASEPRI, r3
   2ef1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2ef1e:	481a      	ldr	r0, [pc, #104]	; (2ef88 <z_set_timeout_expiry+0x80>)
   2ef20:	f7ff fc1a 	bl	2e758 <z_spin_lock_valid>
   2ef24:	b960      	cbnz	r0, 2ef40 <z_set_timeout_expiry+0x38>
   2ef26:	4919      	ldr	r1, [pc, #100]	; (2ef8c <z_set_timeout_expiry+0x84>)
   2ef28:	235f      	movs	r3, #95	; 0x5f
   2ef2a:	4a19      	ldr	r2, [pc, #100]	; (2ef90 <z_set_timeout_expiry+0x88>)
   2ef2c:	4819      	ldr	r0, [pc, #100]	; (2ef94 <z_set_timeout_expiry+0x8c>)
   2ef2e:	f002 fca3 	bl	31878 <printk>
   2ef32:	4819      	ldr	r0, [pc, #100]	; (2ef98 <z_set_timeout_expiry+0x90>)
   2ef34:	f002 fca0 	bl	31878 <printk>
   2ef38:	215f      	movs	r1, #95	; 0x5f
   2ef3a:	4815      	ldr	r0, [pc, #84]	; (2ef90 <z_set_timeout_expiry+0x88>)
   2ef3c:	f002 fca9 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ef40:	4811      	ldr	r0, [pc, #68]	; (2ef88 <z_set_timeout_expiry+0x80>)
   2ef42:	f7ff fc27 	bl	2e794 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   2ef46:	f7ff fe75 	bl	2ec34 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2ef4a:	2801      	cmp	r0, #1
   2ef4c:	dd05      	ble.n	2ef5a <z_set_timeout_expiry+0x52>
   2ef4e:	42a0      	cmp	r0, r4
   2ef50:	dd03      	ble.n	2ef5a <z_set_timeout_expiry+0x52>
			z_clock_set_timeout(ticks, idle);
   2ef52:	4631      	mov	r1, r6
   2ef54:	4620      	mov	r0, r4
   2ef56:	f7ec fc1f 	bl	1b798 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2ef5a:	480b      	ldr	r0, [pc, #44]	; (2ef88 <z_set_timeout_expiry+0x80>)
   2ef5c:	f7ff fc0a 	bl	2e774 <z_spin_unlock_valid>
   2ef60:	b960      	cbnz	r0, 2ef7c <z_set_timeout_expiry+0x74>
   2ef62:	490e      	ldr	r1, [pc, #56]	; (2ef9c <z_set_timeout_expiry+0x94>)
   2ef64:	2372      	movs	r3, #114	; 0x72
   2ef66:	4a0a      	ldr	r2, [pc, #40]	; (2ef90 <z_set_timeout_expiry+0x88>)
   2ef68:	480a      	ldr	r0, [pc, #40]	; (2ef94 <z_set_timeout_expiry+0x8c>)
   2ef6a:	f002 fc85 	bl	31878 <printk>
   2ef6e:	480c      	ldr	r0, [pc, #48]	; (2efa0 <z_set_timeout_expiry+0x98>)
   2ef70:	f002 fc82 	bl	31878 <printk>
   2ef74:	2172      	movs	r1, #114	; 0x72
   2ef76:	4806      	ldr	r0, [pc, #24]	; (2ef90 <z_set_timeout_expiry+0x88>)
   2ef78:	f002 fc8b 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2ef7c:	f385 8811 	msr	BASEPRI, r5
   2ef80:	f3bf 8f6f 	isb	sy
		}
	}
}
   2ef84:	bd70      	pop	{r4, r5, r6, pc}
   2ef86:	bf00      	nop
   2ef88:	20025af8 	.word	0x20025af8
   2ef8c:	00035426 	.word	0x00035426
   2ef90:	000353f4 	.word	0x000353f4
   2ef94:	00034ff7 	.word	0x00034ff7
   2ef98:	0003543b 	.word	0x0003543b
   2ef9c:	00035450 	.word	0x00035450
   2efa0:	00035467 	.word	0x00035467

0002efa4 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   2efa4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   2efa8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2efaa:	f7fe ffcf 	bl	2df4c <z_time_slice>
	__asm__ volatile(
   2efae:	f04f 0320 	mov.w	r3, #32
   2efb2:	f3ef 8511 	mrs	r5, BASEPRI
   2efb6:	f383 8811 	msr	BASEPRI, r3
   2efba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2efbe:	4846      	ldr	r0, [pc, #280]	; (2f0d8 <z_clock_announce+0x134>)
   2efc0:	f7ff fbca 	bl	2e758 <z_spin_lock_valid>
   2efc4:	b960      	cbnz	r0, 2efe0 <z_clock_announce+0x3c>
   2efc6:	4945      	ldr	r1, [pc, #276]	; (2f0dc <z_clock_announce+0x138>)
   2efc8:	235f      	movs	r3, #95	; 0x5f
   2efca:	4a45      	ldr	r2, [pc, #276]	; (2f0e0 <z_clock_announce+0x13c>)
   2efcc:	4845      	ldr	r0, [pc, #276]	; (2f0e4 <z_clock_announce+0x140>)
   2efce:	f002 fc53 	bl	31878 <printk>
   2efd2:	4845      	ldr	r0, [pc, #276]	; (2f0e8 <z_clock_announce+0x144>)
   2efd4:	f002 fc50 	bl	31878 <printk>
   2efd8:	215f      	movs	r1, #95	; 0x5f
   2efda:	4841      	ldr	r0, [pc, #260]	; (2f0e0 <z_clock_announce+0x13c>)
   2efdc:	f002 fc59 	bl	31892 <assert_post_action>
   2efe0:	4f42      	ldr	r7, [pc, #264]	; (2f0ec <z_clock_announce+0x148>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   2efe2:	4e43      	ldr	r6, [pc, #268]	; (2f0f0 <z_clock_announce+0x14c>)
   2efe4:	46b9      	mov	r9, r7
	z_spin_lock_set_owner(l);
   2efe6:	483c      	ldr	r0, [pc, #240]	; (2f0d8 <z_clock_announce+0x134>)
	return list->head == list;
   2efe8:	f8df 8110 	ldr.w	r8, [pc, #272]	; 2f0fc <z_clock_announce+0x158>
   2efec:	f7ff fbd2 	bl	2e794 <z_spin_lock_set_owner>
   2eff0:	6034      	str	r4, [r6, #0]
   2eff2:	f8d8 4000 	ldr.w	r4, [r8]
   2eff6:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2eff8:	4544      	cmp	r4, r8
   2effa:	e9d7 bc00 	ldrd	fp, ip, [r7]
   2effe:	d005      	beq.n	2f00c <z_clock_announce+0x68>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   2f000:	b124      	cbz	r4, 2f00c <z_clock_announce+0x68>
   2f002:	68a3      	ldr	r3, [r4, #8]
   2f004:	4293      	cmp	r3, r2
   2f006:	dd25      	ble.n	2f054 <z_clock_announce+0xb0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2f008:	1a9b      	subs	r3, r3, r2
   2f00a:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   2f00c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2f00e:	eb1b 0002 	adds.w	r0, fp, r2
   2f012:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   2f016:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   2f01a:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   2f01c:	f7ff fe0a 	bl	2ec34 <next_timeout>
   2f020:	4621      	mov	r1, r4
   2f022:	f7ec fbb9 	bl	1b798 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2f026:	482c      	ldr	r0, [pc, #176]	; (2f0d8 <z_clock_announce+0x134>)
   2f028:	f7ff fba4 	bl	2e774 <z_spin_unlock_valid>
   2f02c:	b960      	cbnz	r0, 2f048 <z_clock_announce+0xa4>
   2f02e:	4931      	ldr	r1, [pc, #196]	; (2f0f4 <z_clock_announce+0x150>)
   2f030:	2372      	movs	r3, #114	; 0x72
   2f032:	4a2b      	ldr	r2, [pc, #172]	; (2f0e0 <z_clock_announce+0x13c>)
   2f034:	482b      	ldr	r0, [pc, #172]	; (2f0e4 <z_clock_announce+0x140>)
   2f036:	f002 fc1f 	bl	31878 <printk>
   2f03a:	482f      	ldr	r0, [pc, #188]	; (2f0f8 <z_clock_announce+0x154>)
   2f03c:	f002 fc1c 	bl	31878 <printk>
   2f040:	2172      	movs	r1, #114	; 0x72
   2f042:	4827      	ldr	r0, [pc, #156]	; (2f0e0 <z_clock_announce+0x13c>)
   2f044:	f002 fc25 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2f048:	f385 8811 	msr	BASEPRI, r5
   2f04c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2f050:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   2f054:	eb1b 0003 	adds.w	r0, fp, r3
   2f058:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   2f05c:	1ad3      	subs	r3, r2, r3
   2f05e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   2f060:	2300      	movs	r3, #0
		curr_tick += dt;
   2f062:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   2f066:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   2f068:	4620      	mov	r0, r4
   2f06a:	f7ff fdff 	bl	2ec6c <remove_timeout>
   2f06e:	481a      	ldr	r0, [pc, #104]	; (2f0d8 <z_clock_announce+0x134>)
   2f070:	f7ff fb80 	bl	2e774 <z_spin_unlock_valid>
   2f074:	b960      	cbnz	r0, 2f090 <z_clock_announce+0xec>
   2f076:	491f      	ldr	r1, [pc, #124]	; (2f0f4 <z_clock_announce+0x150>)
   2f078:	2372      	movs	r3, #114	; 0x72
   2f07a:	4a19      	ldr	r2, [pc, #100]	; (2f0e0 <z_clock_announce+0x13c>)
   2f07c:	4819      	ldr	r0, [pc, #100]	; (2f0e4 <z_clock_announce+0x140>)
   2f07e:	f002 fbfb 	bl	31878 <printk>
   2f082:	481d      	ldr	r0, [pc, #116]	; (2f0f8 <z_clock_announce+0x154>)
   2f084:	f002 fbf8 	bl	31878 <printk>
   2f088:	2172      	movs	r1, #114	; 0x72
   2f08a:	4815      	ldr	r0, [pc, #84]	; (2f0e0 <z_clock_announce+0x13c>)
   2f08c:	f002 fc01 	bl	31892 <assert_post_action>
   2f090:	f385 8811 	msr	BASEPRI, r5
   2f094:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2f098:	68e3      	ldr	r3, [r4, #12]
   2f09a:	4620      	mov	r0, r4
   2f09c:	4798      	blx	r3
	__asm__ volatile(
   2f09e:	f04f 0320 	mov.w	r3, #32
   2f0a2:	f3ef 8511 	mrs	r5, BASEPRI
   2f0a6:	f383 8811 	msr	BASEPRI, r3
   2f0aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2f0ae:	480a      	ldr	r0, [pc, #40]	; (2f0d8 <z_clock_announce+0x134>)
   2f0b0:	f7ff fb52 	bl	2e758 <z_spin_lock_valid>
   2f0b4:	b960      	cbnz	r0, 2f0d0 <z_clock_announce+0x12c>
   2f0b6:	4909      	ldr	r1, [pc, #36]	; (2f0dc <z_clock_announce+0x138>)
   2f0b8:	235f      	movs	r3, #95	; 0x5f
   2f0ba:	4a09      	ldr	r2, [pc, #36]	; (2f0e0 <z_clock_announce+0x13c>)
   2f0bc:	4809      	ldr	r0, [pc, #36]	; (2f0e4 <z_clock_announce+0x140>)
   2f0be:	f002 fbdb 	bl	31878 <printk>
   2f0c2:	4809      	ldr	r0, [pc, #36]	; (2f0e8 <z_clock_announce+0x144>)
   2f0c4:	f002 fbd8 	bl	31878 <printk>
   2f0c8:	215f      	movs	r1, #95	; 0x5f
   2f0ca:	4805      	ldr	r0, [pc, #20]	; (2f0e0 <z_clock_announce+0x13c>)
   2f0cc:	f002 fbe1 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f0d0:	4801      	ldr	r0, [pc, #4]	; (2f0d8 <z_clock_announce+0x134>)
   2f0d2:	f7ff fb5f 	bl	2e794 <z_spin_lock_set_owner>
   2f0d6:	e78c      	b.n	2eff2 <z_clock_announce+0x4e>
   2f0d8:	20025af8 	.word	0x20025af8
   2f0dc:	00035426 	.word	0x00035426
   2f0e0:	000353f4 	.word	0x000353f4
   2f0e4:	00034ff7 	.word	0x00034ff7
   2f0e8:	0003543b 	.word	0x0003543b
   2f0ec:	20020000 	.word	0x20020000
   2f0f0:	20025af4 	.word	0x20025af4
   2f0f4:	00035450 	.word	0x00035450
   2f0f8:	00035467 	.word	0x00035467
   2f0fc:	20028e34 	.word	0x20028e34

0002f100 <z_tick_get>:

s64_t z_tick_get(void)
{
   2f100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f104:	f04f 0320 	mov.w	r3, #32
   2f108:	f3ef 8611 	mrs	r6, BASEPRI
   2f10c:	f383 8811 	msr	BASEPRI, r3
   2f110:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2f114:	481a      	ldr	r0, [pc, #104]	; (2f180 <z_tick_get+0x80>)
   2f116:	f7ff fb1f 	bl	2e758 <z_spin_lock_valid>
   2f11a:	b960      	cbnz	r0, 2f136 <z_tick_get+0x36>
   2f11c:	4919      	ldr	r1, [pc, #100]	; (2f184 <z_tick_get+0x84>)
   2f11e:	235f      	movs	r3, #95	; 0x5f
   2f120:	4a19      	ldr	r2, [pc, #100]	; (2f188 <z_tick_get+0x88>)
   2f122:	481a      	ldr	r0, [pc, #104]	; (2f18c <z_tick_get+0x8c>)
   2f124:	f002 fba8 	bl	31878 <printk>
   2f128:	4819      	ldr	r0, [pc, #100]	; (2f190 <z_tick_get+0x90>)
   2f12a:	f002 fba5 	bl	31878 <printk>
   2f12e:	215f      	movs	r1, #95	; 0x5f
   2f130:	4815      	ldr	r0, [pc, #84]	; (2f188 <z_tick_get+0x88>)
   2f132:	f002 fbae 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f136:	4812      	ldr	r0, [pc, #72]	; (2f180 <z_tick_get+0x80>)
   2f138:	f7ff fb2c 	bl	2e794 <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   2f13c:	f7ec fbae 	bl	1b89c <z_clock_elapsed>
   2f140:	4b14      	ldr	r3, [pc, #80]	; (2f194 <z_tick_get+0x94>)
   2f142:	e9d3 4500 	ldrd	r4, r5, [r3]
   2f146:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2f148:	480d      	ldr	r0, [pc, #52]	; (2f180 <z_tick_get+0x80>)
   2f14a:	f145 0800 	adc.w	r8, r5, #0
   2f14e:	f7ff fb11 	bl	2e774 <z_spin_unlock_valid>
   2f152:	b960      	cbnz	r0, 2f16e <z_tick_get+0x6e>
   2f154:	4910      	ldr	r1, [pc, #64]	; (2f198 <z_tick_get+0x98>)
   2f156:	2372      	movs	r3, #114	; 0x72
   2f158:	4a0b      	ldr	r2, [pc, #44]	; (2f188 <z_tick_get+0x88>)
   2f15a:	480c      	ldr	r0, [pc, #48]	; (2f18c <z_tick_get+0x8c>)
   2f15c:	f002 fb8c 	bl	31878 <printk>
   2f160:	480e      	ldr	r0, [pc, #56]	; (2f19c <z_tick_get+0x9c>)
   2f162:	f002 fb89 	bl	31878 <printk>
   2f166:	2172      	movs	r1, #114	; 0x72
   2f168:	4807      	ldr	r0, [pc, #28]	; (2f188 <z_tick_get+0x88>)
   2f16a:	f002 fb92 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2f16e:	f386 8811 	msr	BASEPRI, r6
   2f172:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2f176:	4638      	mov	r0, r7
   2f178:	4641      	mov	r1, r8
   2f17a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f17e:	bf00      	nop
   2f180:	20025af8 	.word	0x20025af8
   2f184:	00035426 	.word	0x00035426
   2f188:	000353f4 	.word	0x000353f4
   2f18c:	00034ff7 	.word	0x00034ff7
   2f190:	0003543b 	.word	0x0003543b
   2f194:	20020000 	.word	0x20020000
   2f198:	00035450 	.word	0x00035450
   2f19c:	00035467 	.word	0x00035467

0002f1a0 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   2f1a0:	6a02      	ldr	r2, [r0, #32]
{
   2f1a2:	b538      	push	{r3, r4, r5, lr}
	if (timer->period > 0) {
   2f1a4:	2a00      	cmp	r2, #0
{
   2f1a6:	4604      	mov	r4, r0
	if (timer->period > 0) {
   2f1a8:	dd02      	ble.n	2f1b0 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2f1aa:	490e      	ldr	r1, [pc, #56]	; (2f1e4 <z_timer_expiration_handler+0x44>)
   2f1ac:	f7ff fd74 	bl	2ec98 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   2f1b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2f1b2:	3301      	adds	r3, #1
   2f1b4:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2f1b6:	69a3      	ldr	r3, [r4, #24]
   2f1b8:	b10b      	cbz	r3, 2f1be <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   2f1ba:	4620      	mov	r0, r4
   2f1bc:	4798      	blx	r3
	return list->head == list;
   2f1be:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f1c2:	42a5      	cmp	r5, r4
   2f1c4:	d00d      	beq.n	2f1e2 <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2f1c6:	b165      	cbz	r5, 2f1e2 <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   2f1c8:	4628      	mov	r0, r5
   2f1ca:	f7fe fb05 	bl	2d7d8 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2f1ce:	7b6b      	ldrb	r3, [r5, #13]
   2f1d0:	06db      	lsls	r3, r3, #27
   2f1d2:	d104      	bne.n	2f1de <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   2f1d4:	69ab      	ldr	r3, [r5, #24]
   2f1d6:	b913      	cbnz	r3, 2f1de <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   2f1d8:	4628      	mov	r0, r5
   2f1da:	f7fe fd43 	bl	2dc64 <z_add_thread_to_ready_q>
   2f1de:	2300      	movs	r3, #0
   2f1e0:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	z_arch_thread_return_value_set(thread, 0);
}
   2f1e2:	bd38      	pop	{r3, r4, r5, pc}
   2f1e4:	0002f1a1 	.word	0x0002f1a1

0002f1e8 <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   2f1e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT(duration >= 0 && period >= 0 &&
   2f1ec:	f1b1 0900 	subs.w	r9, r1, #0
{
   2f1f0:	4604      	mov	r4, r0
   2f1f2:	4615      	mov	r5, r2
	__ASSERT(duration >= 0 && period >= 0 &&
   2f1f4:	db05      	blt.n	2f202 <z_impl_k_timer_start+0x1a>
   2f1f6:	2a00      	cmp	r2, #0
   2f1f8:	db03      	blt.n	2f202 <z_impl_k_timer_start+0x1a>
   2f1fa:	f1b9 0f00 	cmp.w	r9, #0
   2f1fe:	d10d      	bne.n	2f21c <z_impl_k_timer_start+0x34>
   2f200:	b962      	cbnz	r2, 2f21c <z_impl_k_timer_start+0x34>
   2f202:	491a      	ldr	r1, [pc, #104]	; (2f26c <z_impl_k_timer_start+0x84>)
   2f204:	236e      	movs	r3, #110	; 0x6e
   2f206:	4a1a      	ldr	r2, [pc, #104]	; (2f270 <z_impl_k_timer_start+0x88>)
   2f208:	481a      	ldr	r0, [pc, #104]	; (2f274 <z_impl_k_timer_start+0x8c>)
   2f20a:	f002 fb35 	bl	31878 <printk>
   2f20e:	481a      	ldr	r0, [pc, #104]	; (2f278 <z_impl_k_timer_start+0x90>)
   2f210:	f002 fb32 	bl	31878 <printk>
   2f214:	216e      	movs	r1, #110	; 0x6e
   2f216:	4816      	ldr	r0, [pc, #88]	; (2f270 <z_impl_k_timer_start+0x88>)
   2f218:	f002 fb3b 	bl	31892 <assert_post_action>
   2f21c:	f240 36e7 	movw	r6, #999	; 0x3e7
   2f220:	2700      	movs	r7, #0
   2f222:	f44f 4800 	mov.w	r8, #32768	; 0x8000
   2f226:	4630      	mov	r0, r6
   2f228:	4639      	mov	r1, r7
   2f22a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2f22e:	2300      	movs	r3, #0
   2f230:	fbc8 0105 	smlal	r0, r1, r8, r5
   2f234:	f7e9 fab0 	bl	18798 <__aeabi_ldivmod>
   2f238:	4639      	mov	r1, r7
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = z_ms_to_ticks(period);
   2f23a:	9000      	str	r0, [sp, #0]
   2f23c:	4630      	mov	r0, r6
   2f23e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2f242:	2300      	movs	r3, #0
   2f244:	fbc8 0109 	smlal	r0, r1, r8, r9
   2f248:	f7e9 faa6 	bl	18798 <__aeabi_ldivmod>
	duration_in_ticks = z_ms_to_ticks(duration);
   2f24c:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   2f24e:	4620      	mov	r0, r4
   2f250:	f7ff fdc8 	bl	2ede4 <z_abort_timeout>
	timer->period = period_in_ticks;
   2f254:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2f256:	4620      	mov	r0, r4
	timer->period = period_in_ticks;
   2f258:	6223      	str	r3, [r4, #32]
	timer->status = 0U;
   2f25a:	2300      	movs	r3, #0
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2f25c:	9a01      	ldr	r2, [sp, #4]
   2f25e:	4907      	ldr	r1, [pc, #28]	; (2f27c <z_impl_k_timer_start+0x94>)
	timer->status = 0U;
   2f260:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   2f262:	b003      	add	sp, #12
   2f264:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2f268:	f7ff bd16 	b.w	2ec98 <z_add_timeout>
   2f26c:	00036b11 	.word	0x00036b11
   2f270:	00036ae3 	.word	0x00036ae3
   2f274:	00034ff7 	.word	0x00034ff7
   2f278:	00036b50 	.word	0x00036b50
   2f27c:	0002f1a1 	.word	0x0002f1a1

0002f280 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, u32_t state)
{
   2f280:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   2f282:	6883      	ldr	r3, [r0, #8]
{
   2f284:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   2f286:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   2f288:	b964      	cbnz	r4, 2f2a4 <k_poll_poller_cb+0x24>
   2f28a:	4915      	ldr	r1, [pc, #84]	; (2f2e0 <k_poll_poller_cb+0x60>)
   2f28c:	23e0      	movs	r3, #224	; 0xe0
   2f28e:	4a15      	ldr	r2, [pc, #84]	; (2f2e4 <k_poll_poller_cb+0x64>)
   2f290:	4815      	ldr	r0, [pc, #84]	; (2f2e8 <k_poll_poller_cb+0x68>)
   2f292:	f002 faf1 	bl	31878 <printk>
   2f296:	4815      	ldr	r0, [pc, #84]	; (2f2ec <k_poll_poller_cb+0x6c>)
   2f298:	f002 faee 	bl	31878 <printk>
   2f29c:	21e0      	movs	r1, #224	; 0xe0
   2f29e:	4811      	ldr	r0, [pc, #68]	; (2f2e4 <k_poll_poller_cb+0x64>)
   2f2a0:	f002 faf7 	bl	31892 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   2f2a4:	7b63      	ldrb	r3, [r4, #13]
   2f2a6:	079a      	lsls	r2, r3, #30
   2f2a8:	d401      	bmi.n	2f2ae <k_poll_poller_cb+0x2e>
		return 0;
   2f2aa:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   2f2ac:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   2f2ae:	6a23      	ldr	r3, [r4, #32]
   2f2b0:	3302      	adds	r3, #2
   2f2b2:	d012      	beq.n	2f2da <k_poll_poller_cb+0x5a>
	z_unpend_thread(thread);
   2f2b4:	4620      	mov	r0, r4
   2f2b6:	f7fe fbc9 	bl	2da4c <z_unpend_thread>
	z_arch_thread_return_value_set(thread,
   2f2ba:	2d08      	cmp	r5, #8
   2f2bc:	bf0c      	ite	eq
   2f2be:	f06f 0303 	mvneq.w	r3, #3
   2f2c2:	2300      	movne	r3, #0
   2f2c4:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2f2c6:	7b63      	ldrb	r3, [r4, #13]
   2f2c8:	06db      	lsls	r3, r3, #27
   2f2ca:	d1ee      	bne.n	2f2aa <k_poll_poller_cb+0x2a>
	if (!z_is_thread_ready(thread)) {
   2f2cc:	69a5      	ldr	r5, [r4, #24]
   2f2ce:	2d00      	cmp	r5, #0
   2f2d0:	d1eb      	bne.n	2f2aa <k_poll_poller_cb+0x2a>
		z_add_thread_to_ready_q(thread);
   2f2d2:	4620      	mov	r0, r4
   2f2d4:	f7fe fcc6 	bl	2dc64 <z_add_thread_to_ready_q>
   2f2d8:	e7e7      	b.n	2f2aa <k_poll_poller_cb+0x2a>
		return -EAGAIN;
   2f2da:	f06f 000a 	mvn.w	r0, #10
   2f2de:	e7e5      	b.n	2f2ac <k_poll_poller_cb+0x2c>
   2f2e0:	00036ce0 	.word	0x00036ce0
   2f2e4:	00036cb3 	.word	0x00036cb3
   2f2e8:	00034ff7 	.word	0x00034ff7
   2f2ec:	00036cf6 	.word	0x00036cf6

0002f2f0 <clear_event_registrations>:
{
   2f2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f2f4:	2414      	movs	r4, #20
   2f2f6:	4680      	mov	r8, r0
   2f2f8:	4617      	mov	r7, r2
   2f2fa:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   2f2fe:	4d48      	ldr	r5, [pc, #288]	; (2f420 <clear_event_registrations+0x130>)
   2f300:	f8df 9158 	ldr.w	r9, [pc, #344]	; 2f45c <clear_event_registrations+0x16c>
   2f304:	4e47      	ldr	r6, [pc, #284]	; (2f424 <clear_event_registrations+0x134>)
	while (num_events--) {
   2f306:	4544      	cmp	r4, r8
   2f308:	d101      	bne.n	2f30e <clear_event_registrations+0x1e>
}
   2f30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   2f30e:	2300      	movs	r3, #0
   2f310:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   2f314:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   2f318:	f003 030f 	and.w	r3, r3, #15
   2f31c:	2b04      	cmp	r3, #4
   2f31e:	d83f      	bhi.n	2f3a0 <clear_event_registrations+0xb0>
   2f320:	e8df f003 	tbb	[pc, r3]
   2f324:	3e032f4b 	.word	0x3e032f4b
   2f328:	20          	.byte	0x20
   2f329:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2f32a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2f32e:	b963      	cbnz	r3, 2f34a <clear_event_registrations+0x5a>
   2f330:	493d      	ldr	r1, [pc, #244]	; (2f428 <clear_event_registrations+0x138>)
   2f332:	2396      	movs	r3, #150	; 0x96
   2f334:	462a      	mov	r2, r5
   2f336:	4630      	mov	r0, r6
   2f338:	f002 fa9e 	bl	31878 <printk>
   2f33c:	483b      	ldr	r0, [pc, #236]	; (2f42c <clear_event_registrations+0x13c>)
   2f33e:	f002 fa9b 	bl	31878 <printk>
   2f342:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2f344:	4628      	mov	r0, r5
   2f346:	f002 faa4 	bl	31892 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   2f34a:	f854 2c14 	ldr.w	r2, [r4, #-20]
   2f34e:	b3a2      	cbz	r2, 2f3ba <clear_event_registrations+0xca>
	node->prev->next = node->next;
   2f350:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2f354:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2f356:	f854 2c14 	ldr.w	r2, [r4, #-20]
   2f35a:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   2f35c:	2300      	movs	r3, #0
	node->prev = NULL;
   2f35e:	e944 3305 	strd	r3, r3, [r4, #-20]
   2f362:	e02a      	b.n	2f3ba <clear_event_registrations+0xca>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2f364:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2f368:	2b00      	cmp	r3, #0
   2f36a:	d1ee      	bne.n	2f34a <clear_event_registrations+0x5a>
   2f36c:	4930      	ldr	r1, [pc, #192]	; (2f430 <clear_event_registrations+0x140>)
   2f36e:	239a      	movs	r3, #154	; 0x9a
   2f370:	462a      	mov	r2, r5
   2f372:	4630      	mov	r0, r6
   2f374:	f002 fa80 	bl	31878 <printk>
   2f378:	482e      	ldr	r0, [pc, #184]	; (2f434 <clear_event_registrations+0x144>)
   2f37a:	f002 fa7d 	bl	31878 <printk>
   2f37e:	219a      	movs	r1, #154	; 0x9a
   2f380:	e7e0      	b.n	2f344 <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2f382:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2f386:	2b00      	cmp	r3, #0
   2f388:	d1df      	bne.n	2f34a <clear_event_registrations+0x5a>
   2f38a:	492b      	ldr	r1, [pc, #172]	; (2f438 <clear_event_registrations+0x148>)
   2f38c:	239e      	movs	r3, #158	; 0x9e
   2f38e:	462a      	mov	r2, r5
   2f390:	4630      	mov	r0, r6
   2f392:	f002 fa71 	bl	31878 <printk>
   2f396:	4829      	ldr	r0, [pc, #164]	; (2f43c <clear_event_registrations+0x14c>)
   2f398:	f002 fa6e 	bl	31878 <printk>
   2f39c:	219e      	movs	r1, #158	; 0x9e
   2f39e:	e7d1      	b.n	2f344 <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   2f3a0:	4649      	mov	r1, r9
   2f3a2:	23a5      	movs	r3, #165	; 0xa5
   2f3a4:	462a      	mov	r2, r5
   2f3a6:	4630      	mov	r0, r6
   2f3a8:	f002 fa66 	bl	31878 <printk>
   2f3ac:	4824      	ldr	r0, [pc, #144]	; (2f440 <clear_event_registrations+0x150>)
   2f3ae:	f002 fa63 	bl	31878 <printk>
   2f3b2:	21a5      	movs	r1, #165	; 0xa5
   2f3b4:	4628      	mov	r0, r5
   2f3b6:	f002 fa6c 	bl	31892 <assert_post_action>
   2f3ba:	4822      	ldr	r0, [pc, #136]	; (2f444 <clear_event_registrations+0x154>)
   2f3bc:	f7ff f9da 	bl	2e774 <z_spin_unlock_valid>
   2f3c0:	b960      	cbnz	r0, 2f3dc <clear_event_registrations+0xec>
   2f3c2:	4921      	ldr	r1, [pc, #132]	; (2f448 <clear_event_registrations+0x158>)
   2f3c4:	2372      	movs	r3, #114	; 0x72
   2f3c6:	4a21      	ldr	r2, [pc, #132]	; (2f44c <clear_event_registrations+0x15c>)
   2f3c8:	4630      	mov	r0, r6
   2f3ca:	f002 fa55 	bl	31878 <printk>
   2f3ce:	4820      	ldr	r0, [pc, #128]	; (2f450 <clear_event_registrations+0x160>)
   2f3d0:	f002 fa52 	bl	31878 <printk>
   2f3d4:	2172      	movs	r1, #114	; 0x72
   2f3d6:	481d      	ldr	r0, [pc, #116]	; (2f44c <clear_event_registrations+0x15c>)
   2f3d8:	f002 fa5b 	bl	31892 <assert_post_action>
   2f3dc:	f387 8811 	msr	BASEPRI, r7
   2f3e0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2f3e4:	f04f 0320 	mov.w	r3, #32
   2f3e8:	f3ef 8711 	mrs	r7, BASEPRI
   2f3ec:	f383 8811 	msr	BASEPRI, r3
   2f3f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2f3f4:	4813      	ldr	r0, [pc, #76]	; (2f444 <clear_event_registrations+0x154>)
   2f3f6:	f7ff f9af 	bl	2e758 <z_spin_lock_valid>
   2f3fa:	b960      	cbnz	r0, 2f416 <clear_event_registrations+0x126>
   2f3fc:	4915      	ldr	r1, [pc, #84]	; (2f454 <clear_event_registrations+0x164>)
   2f3fe:	235f      	movs	r3, #95	; 0x5f
   2f400:	4a12      	ldr	r2, [pc, #72]	; (2f44c <clear_event_registrations+0x15c>)
   2f402:	4630      	mov	r0, r6
   2f404:	f002 fa38 	bl	31878 <printk>
   2f408:	4813      	ldr	r0, [pc, #76]	; (2f458 <clear_event_registrations+0x168>)
   2f40a:	f002 fa35 	bl	31878 <printk>
   2f40e:	215f      	movs	r1, #95	; 0x5f
   2f410:	480e      	ldr	r0, [pc, #56]	; (2f44c <clear_event_registrations+0x15c>)
   2f412:	f002 fa3e 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f416:	480b      	ldr	r0, [pc, #44]	; (2f444 <clear_event_registrations+0x154>)
   2f418:	f7ff f9bc 	bl	2e794 <z_spin_lock_set_owner>
   2f41c:	3c14      	subs	r4, #20
   2f41e:	e772      	b.n	2f306 <clear_event_registrations+0x16>
   2f420:	00036cb3 	.word	0x00036cb3
   2f424:	00034ff7 	.word	0x00034ff7
   2f428:	00036b66 	.word	0x00036b66
   2f42c:	00036b80 	.word	0x00036b80
   2f430:	00036b95 	.word	0x00036b95
   2f434:	00036bb1 	.word	0x00036bb1
   2f438:	00036bc2 	.word	0x00036bc2
   2f43c:	00036bdf 	.word	0x00036bdf
   2f440:	00036bf6 	.word	0x00036bf6
   2f444:	20025afc 	.word	0x20025afc
   2f448:	00035450 	.word	0x00035450
   2f44c:	000353f4 	.word	0x000353f4
   2f450:	00035467 	.word	0x00035467
   2f454:	00035426 	.word	0x00035426
   2f458:	0003543b 	.word	0x0003543b
   2f45c:	0003686f 	.word	0x0003686f

0002f460 <register_events>:
{
   2f460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2f464:	2600      	movs	r6, #0
{
   2f466:	468a      	mov	sl, r1
   2f468:	4615      	mov	r5, r2
   2f46a:	4604      	mov	r4, r0
	int events_registered = 0;
   2f46c:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2f46e:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 2f654 <register_events+0x1f4>
   2f472:	4f68      	ldr	r7, [pc, #416]	; (2f614 <register_events+0x1b4>)
{
   2f474:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   2f476:	4556      	cmp	r6, sl
   2f478:	db03      	blt.n	2f482 <register_events+0x22>
}
   2f47a:	4640      	mov	r0, r8
   2f47c:	b003      	add	sp, #12
   2f47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f482:	f04f 0320 	mov.w	r3, #32
   2f486:	f3ef 8b11 	mrs	fp, BASEPRI
   2f48a:	f383 8811 	msr	BASEPRI, r3
   2f48e:	f3bf 8f6f 	isb	sy
   2f492:	4648      	mov	r0, r9
   2f494:	f7ff f960 	bl	2e758 <z_spin_lock_valid>
   2f498:	b960      	cbnz	r0, 2f4b4 <register_events+0x54>
   2f49a:	495f      	ldr	r1, [pc, #380]	; (2f618 <register_events+0x1b8>)
   2f49c:	235f      	movs	r3, #95	; 0x5f
   2f49e:	463a      	mov	r2, r7
   2f4a0:	485e      	ldr	r0, [pc, #376]	; (2f61c <register_events+0x1bc>)
   2f4a2:	f002 f9e9 	bl	31878 <printk>
   2f4a6:	485e      	ldr	r0, [pc, #376]	; (2f620 <register_events+0x1c0>)
   2f4a8:	f002 f9e6 	bl	31878 <printk>
   2f4ac:	215f      	movs	r1, #95	; 0x5f
   2f4ae:	4638      	mov	r0, r7
   2f4b0:	f002 f9ef 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f4b4:	4648      	mov	r0, r9
   2f4b6:	f7ff f96d 	bl	2e794 <z_spin_lock_set_owner>
	switch (event->type) {
   2f4ba:	7b63      	ldrb	r3, [r4, #13]
   2f4bc:	f003 030f 	and.w	r3, r3, #15
   2f4c0:	2b04      	cmp	r3, #4
   2f4c2:	d825      	bhi.n	2f510 <register_events+0xb0>
   2f4c4:	e8df f003 	tbb	[pc, r3]
   2f4c8:	24031e07 	.word	0x24031e07
   2f4cc:	18          	.byte	0x18
   2f4cd:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   2f4ce:	6923      	ldr	r3, [r4, #16]
   2f4d0:	689b      	ldr	r3, [r3, #8]
   2f4d2:	2b00      	cmp	r3, #0
   2f4d4:	d12d      	bne.n	2f532 <register_events+0xd2>
		} else if (!just_check && poller->is_polling) {
   2f4d6:	9b01      	ldr	r3, [sp, #4]
   2f4d8:	2b00      	cmp	r3, #0
   2f4da:	d135      	bne.n	2f548 <register_events+0xe8>
   2f4dc:	782b      	ldrb	r3, [r5, #0]
   2f4de:	2b00      	cmp	r3, #0
   2f4e0:	d032      	beq.n	2f548 <register_events+0xe8>
	switch (event->type) {
   2f4e2:	7b63      	ldrb	r3, [r4, #13]
   2f4e4:	f003 030f 	and.w	r3, r3, #15
   2f4e8:	2b04      	cmp	r3, #4
   2f4ea:	f200 8085 	bhi.w	2f5f8 <register_events+0x198>
   2f4ee:	e8df f003 	tbb	[pc, r3]
   2f4f2:	7058      	.short	0x7058
   2f4f4:	8343      	.short	0x8343
   2f4f6:	5c          	.byte	0x5c
   2f4f7:	00          	.byte	0x00
		if (!k_queue_is_empty(event->queue)) {
   2f4f8:	6923      	ldr	r3, [r4, #16]
   2f4fa:	681b      	ldr	r3, [r3, #0]
   2f4fc:	2b00      	cmp	r3, #0
   2f4fe:	d0ea      	beq.n	2f4d6 <register_events+0x76>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2f500:	2204      	movs	r2, #4
   2f502:	e017      	b.n	2f534 <register_events+0xd4>
		if (event->signal->signaled != 0U) {
   2f504:	6923      	ldr	r3, [r4, #16]
   2f506:	689b      	ldr	r3, [r3, #8]
   2f508:	2b00      	cmp	r3, #0
   2f50a:	d0e4      	beq.n	2f4d6 <register_events+0x76>
			*state = K_POLL_STATE_SIGNALED;
   2f50c:	2201      	movs	r2, #1
   2f50e:	e011      	b.n	2f534 <register_events+0xd4>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   2f510:	2350      	movs	r3, #80	; 0x50
   2f512:	4a44      	ldr	r2, [pc, #272]	; (2f624 <register_events+0x1c4>)
   2f514:	4944      	ldr	r1, [pc, #272]	; (2f628 <register_events+0x1c8>)
   2f516:	4841      	ldr	r0, [pc, #260]	; (2f61c <register_events+0x1bc>)
   2f518:	f002 f9ae 	bl	31878 <printk>
   2f51c:	7b61      	ldrb	r1, [r4, #13]
   2f51e:	4843      	ldr	r0, [pc, #268]	; (2f62c <register_events+0x1cc>)
   2f520:	f001 010f 	and.w	r1, r1, #15
   2f524:	f002 f9a8 	bl	31878 <printk>
   2f528:	2150      	movs	r1, #80	; 0x50
   2f52a:	483e      	ldr	r0, [pc, #248]	; (2f624 <register_events+0x1c4>)
   2f52c:	f002 f9b1 	bl	31892 <assert_post_action>
   2f530:	e7d1      	b.n	2f4d6 <register_events+0x76>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2f532:	2202      	movs	r2, #2
	event->poller = NULL;
   2f534:	2100      	movs	r1, #0
	event->state |= state;
   2f536:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   2f538:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   2f53a:	f3c3 3004 	ubfx	r0, r3, #12, #5
   2f53e:	4302      	orrs	r2, r0
   2f540:	f362 3310 	bfi	r3, r2, #12, #5
   2f544:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   2f546:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2f548:	4648      	mov	r0, r9
   2f54a:	f7ff f913 	bl	2e774 <z_spin_unlock_valid>
   2f54e:	b960      	cbnz	r0, 2f56a <register_events+0x10a>
   2f550:	4937      	ldr	r1, [pc, #220]	; (2f630 <register_events+0x1d0>)
   2f552:	2372      	movs	r3, #114	; 0x72
   2f554:	463a      	mov	r2, r7
   2f556:	4831      	ldr	r0, [pc, #196]	; (2f61c <register_events+0x1bc>)
   2f558:	f002 f98e 	bl	31878 <printk>
   2f55c:	4835      	ldr	r0, [pc, #212]	; (2f634 <register_events+0x1d4>)
   2f55e:	f002 f98b 	bl	31878 <printk>
   2f562:	2172      	movs	r1, #114	; 0x72
   2f564:	4638      	mov	r0, r7
   2f566:	f002 f994 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2f56a:	f38b 8811 	msr	BASEPRI, fp
   2f56e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2f572:	3601      	adds	r6, #1
   2f574:	3414      	adds	r4, #20
   2f576:	e77e      	b.n	2f476 <register_events+0x16>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2f578:	6923      	ldr	r3, [r4, #16]
   2f57a:	b963      	cbnz	r3, 2f596 <register_events+0x136>
   2f57c:	492e      	ldr	r1, [pc, #184]	; (2f638 <register_events+0x1d8>)
   2f57e:	2375      	movs	r3, #117	; 0x75
   2f580:	4a28      	ldr	r2, [pc, #160]	; (2f624 <register_events+0x1c4>)
   2f582:	4826      	ldr	r0, [pc, #152]	; (2f61c <register_events+0x1bc>)
   2f584:	f002 f978 	bl	31878 <printk>
   2f588:	482c      	ldr	r0, [pc, #176]	; (2f63c <register_events+0x1dc>)
   2f58a:	f002 f975 	bl	31878 <printk>
   2f58e:	2175      	movs	r1, #117	; 0x75
   2f590:	4824      	ldr	r0, [pc, #144]	; (2f624 <register_events+0x1c4>)
   2f592:	f002 f97e 	bl	31892 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   2f596:	462a      	mov	r2, r5
   2f598:	4621      	mov	r1, r4
   2f59a:	6920      	ldr	r0, [r4, #16]
   2f59c:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   2f59e:	f003 f93c 	bl	3281a <add_event>
	event->poller = poller;
   2f5a2:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   2f5a4:	f108 0801 	add.w	r8, r8, #1
   2f5a8:	e7ce      	b.n	2f548 <register_events+0xe8>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2f5aa:	6923      	ldr	r3, [r4, #16]
   2f5ac:	b963      	cbnz	r3, 2f5c8 <register_events+0x168>
   2f5ae:	4924      	ldr	r1, [pc, #144]	; (2f640 <register_events+0x1e0>)
   2f5b0:	2379      	movs	r3, #121	; 0x79
   2f5b2:	4a1c      	ldr	r2, [pc, #112]	; (2f624 <register_events+0x1c4>)
   2f5b4:	4819      	ldr	r0, [pc, #100]	; (2f61c <register_events+0x1bc>)
   2f5b6:	f002 f95f 	bl	31878 <printk>
   2f5ba:	4822      	ldr	r0, [pc, #136]	; (2f644 <register_events+0x1e4>)
   2f5bc:	f002 f95c 	bl	31878 <printk>
   2f5c0:	2179      	movs	r1, #121	; 0x79
   2f5c2:	4818      	ldr	r0, [pc, #96]	; (2f624 <register_events+0x1c4>)
   2f5c4:	f002 f965 	bl	31892 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   2f5c8:	6920      	ldr	r0, [r4, #16]
   2f5ca:	462a      	mov	r2, r5
   2f5cc:	4621      	mov	r1, r4
   2f5ce:	300c      	adds	r0, #12
   2f5d0:	e7e5      	b.n	2f59e <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2f5d2:	6923      	ldr	r3, [r4, #16]
   2f5d4:	b963      	cbnz	r3, 2f5f0 <register_events+0x190>
   2f5d6:	491c      	ldr	r1, [pc, #112]	; (2f648 <register_events+0x1e8>)
   2f5d8:	237d      	movs	r3, #125	; 0x7d
   2f5da:	4a12      	ldr	r2, [pc, #72]	; (2f624 <register_events+0x1c4>)
   2f5dc:	480f      	ldr	r0, [pc, #60]	; (2f61c <register_events+0x1bc>)
   2f5de:	f002 f94b 	bl	31878 <printk>
   2f5e2:	481a      	ldr	r0, [pc, #104]	; (2f64c <register_events+0x1ec>)
   2f5e4:	f002 f948 	bl	31878 <printk>
   2f5e8:	217d      	movs	r1, #125	; 0x7d
   2f5ea:	480e      	ldr	r0, [pc, #56]	; (2f624 <register_events+0x1c4>)
   2f5ec:	f002 f951 	bl	31892 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   2f5f0:	462a      	mov	r2, r5
   2f5f2:	4621      	mov	r1, r4
   2f5f4:	6920      	ldr	r0, [r4, #16]
   2f5f6:	e7d2      	b.n	2f59e <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   2f5f8:	2384      	movs	r3, #132	; 0x84
   2f5fa:	4a0a      	ldr	r2, [pc, #40]	; (2f624 <register_events+0x1c4>)
   2f5fc:	490a      	ldr	r1, [pc, #40]	; (2f628 <register_events+0x1c8>)
   2f5fe:	4807      	ldr	r0, [pc, #28]	; (2f61c <register_events+0x1bc>)
   2f600:	f002 f93a 	bl	31878 <printk>
   2f604:	4812      	ldr	r0, [pc, #72]	; (2f650 <register_events+0x1f0>)
   2f606:	f002 f937 	bl	31878 <printk>
   2f60a:	2184      	movs	r1, #132	; 0x84
   2f60c:	4805      	ldr	r0, [pc, #20]	; (2f624 <register_events+0x1c4>)
   2f60e:	f002 f940 	bl	31892 <assert_post_action>
   2f612:	e7c6      	b.n	2f5a2 <register_events+0x142>
   2f614:	000353f4 	.word	0x000353f4
   2f618:	00035426 	.word	0x00035426
   2f61c:	00034ff7 	.word	0x00034ff7
   2f620:	0003543b 	.word	0x0003543b
   2f624:	00036cb3 	.word	0x00036cb3
   2f628:	0003686f 	.word	0x0003686f
   2f62c:	00036d15 	.word	0x00036d15
   2f630:	00035450 	.word	0x00035450
   2f634:	00035467 	.word	0x00035467
   2f638:	00036b66 	.word	0x00036b66
   2f63c:	00036b80 	.word	0x00036b80
   2f640:	00036b95 	.word	0x00036b95
   2f644:	00036bb1 	.word	0x00036bb1
   2f648:	00036bc2 	.word	0x00036bc2
   2f64c:	00036bdf 	.word	0x00036bdf
   2f650:	00036bf6 	.word	0x00036bf6
   2f654:	20025afc 	.word	0x20025afc

0002f658 <k_poll_event_init>:
{
   2f658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f65a:	4604      	mov	r4, r0
   2f65c:	460f      	mov	r7, r1
   2f65e:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   2f660:	4616      	mov	r6, r2
   2f662:	b162      	cbz	r2, 2f67e <k_poll_event_init+0x26>
   2f664:	491f      	ldr	r1, [pc, #124]	; (2f6e4 <k_poll_event_init+0x8c>)
   2f666:	232a      	movs	r3, #42	; 0x2a
   2f668:	4a1f      	ldr	r2, [pc, #124]	; (2f6e8 <k_poll_event_init+0x90>)
   2f66a:	4820      	ldr	r0, [pc, #128]	; (2f6ec <k_poll_event_init+0x94>)
   2f66c:	f002 f904 	bl	31878 <printk>
   2f670:	481f      	ldr	r0, [pc, #124]	; (2f6f0 <k_poll_event_init+0x98>)
   2f672:	f002 f901 	bl	31878 <printk>
   2f676:	212a      	movs	r1, #42	; 0x2a
   2f678:	481b      	ldr	r0, [pc, #108]	; (2f6e8 <k_poll_event_init+0x90>)
   2f67a:	f002 f90a 	bl	31892 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   2f67e:	2f0f      	cmp	r7, #15
   2f680:	d90c      	bls.n	2f69c <k_poll_event_init+0x44>
   2f682:	491c      	ldr	r1, [pc, #112]	; (2f6f4 <k_poll_event_init+0x9c>)
   2f684:	232b      	movs	r3, #43	; 0x2b
   2f686:	4a18      	ldr	r2, [pc, #96]	; (2f6e8 <k_poll_event_init+0x90>)
   2f688:	4818      	ldr	r0, [pc, #96]	; (2f6ec <k_poll_event_init+0x94>)
   2f68a:	f002 f8f5 	bl	31878 <printk>
   2f68e:	481a      	ldr	r0, [pc, #104]	; (2f6f8 <k_poll_event_init+0xa0>)
   2f690:	f002 f8f2 	bl	31878 <printk>
   2f694:	212b      	movs	r1, #43	; 0x2b
   2f696:	4814      	ldr	r0, [pc, #80]	; (2f6e8 <k_poll_event_init+0x90>)
   2f698:	f002 f8fb 	bl	31892 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   2f69c:	b965      	cbnz	r5, 2f6b8 <k_poll_event_init+0x60>
   2f69e:	4917      	ldr	r1, [pc, #92]	; (2f6fc <k_poll_event_init+0xa4>)
   2f6a0:	232c      	movs	r3, #44	; 0x2c
   2f6a2:	4a11      	ldr	r2, [pc, #68]	; (2f6e8 <k_poll_event_init+0x90>)
   2f6a4:	4811      	ldr	r0, [pc, #68]	; (2f6ec <k_poll_event_init+0x94>)
   2f6a6:	f002 f8e7 	bl	31878 <printk>
   2f6aa:	4815      	ldr	r0, [pc, #84]	; (2f700 <k_poll_event_init+0xa8>)
   2f6ac:	f002 f8e4 	bl	31878 <printk>
   2f6b0:	212c      	movs	r1, #44	; 0x2c
   2f6b2:	480d      	ldr	r0, [pc, #52]	; (2f6e8 <k_poll_event_init+0x90>)
   2f6b4:	f002 f8ed 	bl	31892 <assert_post_action>
	event->poller = NULL;
   2f6b8:	2200      	movs	r2, #0
	event->type = type;
   2f6ba:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
   2f6bc:	60a2      	str	r2, [r4, #8]
	event->type = type;
   2f6be:	f367 0303 	bfi	r3, r7, #0, #4
   2f6c2:	7363      	strb	r3, [r4, #13]
	event->state = K_POLL_STATE_NOT_READY;
   2f6c4:	68e3      	ldr	r3, [r4, #12]
	event->obj = obj;
   2f6c6:	6125      	str	r5, [r4, #16]
	event->state = K_POLL_STATE_NOT_READY;
   2f6c8:	f362 3310 	bfi	r3, r2, #12, #5
   2f6cc:	60e3      	str	r3, [r4, #12]
	event->mode = mode;
   2f6ce:	f3c3 4307 	ubfx	r3, r3, #16, #8
   2f6d2:	f366 0341 	bfi	r3, r6, #1, #1
   2f6d6:	73a3      	strb	r3, [r4, #14]
	event->unused = 0U;
   2f6d8:	89e3      	ldrh	r3, [r4, #14]
   2f6da:	f362 038f 	bfi	r3, r2, #2, #14
   2f6de:	81e3      	strh	r3, [r4, #14]
}
   2f6e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f6e2:	bf00      	nop
   2f6e4:	00036c0c 	.word	0x00036c0c
   2f6e8:	00036cb3 	.word	0x00036cb3
   2f6ec:	00034ff7 	.word	0x00034ff7
   2f6f0:	00036c2c 	.word	0x00036c2c
   2f6f4:	00036c52 	.word	0x00036c52
   2f6f8:	00036c76 	.word	0x00036c76
   2f6fc:	00036c86 	.word	0x00036c86
   2f700:	00036c99 	.word	0x00036c99

0002f704 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   2f704:	2301      	movs	r3, #1
{
   2f706:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f708:	b087      	sub	sp, #28
	struct _poller poller = { .is_polling = true,
   2f70a:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   2f70e:	4b70      	ldr	r3, [pc, #448]	; (2f8d0 <z_impl_k_poll+0x1cc>)
{
   2f710:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   2f712:	689b      	ldr	r3, [r3, #8]
{
   2f714:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   2f716:	9304      	str	r3, [sp, #16]
   2f718:	4b6e      	ldr	r3, [pc, #440]	; (2f8d4 <z_impl_k_poll+0x1d0>)
{
   2f71a:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   2f71c:	9305      	str	r3, [sp, #20]
   2f71e:	f3ef 8305 	mrs	r3, IPSR
   2f722:	2b0d      	cmp	r3, #13
   2f724:	d804      	bhi.n	2f730 <z_impl_k_poll+0x2c>
   2f726:	b183      	cbz	r3, 2f74a <z_impl_k_poll+0x46>
   2f728:	4b6b      	ldr	r3, [pc, #428]	; (2f8d8 <z_impl_k_poll+0x1d4>)
   2f72a:	685b      	ldr	r3, [r3, #4]
   2f72c:	051b      	lsls	r3, r3, #20
   2f72e:	d40c      	bmi.n	2f74a <z_impl_k_poll+0x46>
				  .cb         = k_poll_poller_cb };

	__ASSERT(!z_arch_is_in_isr(), "");
   2f730:	496a      	ldr	r1, [pc, #424]	; (2f8dc <z_impl_k_poll+0x1d8>)
   2f732:	23ff      	movs	r3, #255	; 0xff
   2f734:	4a6a      	ldr	r2, [pc, #424]	; (2f8e0 <z_impl_k_poll+0x1dc>)
   2f736:	486b      	ldr	r0, [pc, #428]	; (2f8e4 <z_impl_k_poll+0x1e0>)
   2f738:	f002 f89e 	bl	31878 <printk>
   2f73c:	486a      	ldr	r0, [pc, #424]	; (2f8e8 <z_impl_k_poll+0x1e4>)
   2f73e:	f002 f89b 	bl	31878 <printk>
   2f742:	21ff      	movs	r1, #255	; 0xff
   2f744:	4866      	ldr	r0, [pc, #408]	; (2f8e0 <z_impl_k_poll+0x1dc>)
   2f746:	f002 f8a4 	bl	31892 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   2f74a:	b974      	cbnz	r4, 2f76a <z_impl_k_poll+0x66>
   2f74c:	4967      	ldr	r1, [pc, #412]	; (2f8ec <z_impl_k_poll+0x1e8>)
   2f74e:	f44f 7380 	mov.w	r3, #256	; 0x100
   2f752:	4a63      	ldr	r2, [pc, #396]	; (2f8e0 <z_impl_k_poll+0x1dc>)
   2f754:	4863      	ldr	r0, [pc, #396]	; (2f8e4 <z_impl_k_poll+0x1e0>)
   2f756:	f002 f88f 	bl	31878 <printk>
   2f75a:	4865      	ldr	r0, [pc, #404]	; (2f8f0 <z_impl_k_poll+0x1ec>)
   2f75c:	f002 f88c 	bl	31878 <printk>
   2f760:	f44f 7180 	mov.w	r1, #256	; 0x100
   2f764:	485e      	ldr	r0, [pc, #376]	; (2f8e0 <z_impl_k_poll+0x1dc>)
   2f766:	f002 f894 	bl	31892 <assert_post_action>
	__ASSERT(num_events > 0, "zero events\n");
   2f76a:	2d00      	cmp	r5, #0
   2f76c:	dc0e      	bgt.n	2f78c <z_impl_k_poll+0x88>
   2f76e:	4961      	ldr	r1, [pc, #388]	; (2f8f4 <z_impl_k_poll+0x1f0>)
   2f770:	f240 1301 	movw	r3, #257	; 0x101
   2f774:	4a5a      	ldr	r2, [pc, #360]	; (2f8e0 <z_impl_k_poll+0x1dc>)
   2f776:	485b      	ldr	r0, [pc, #364]	; (2f8e4 <z_impl_k_poll+0x1e0>)
   2f778:	f002 f87e 	bl	31878 <printk>
   2f77c:	485e      	ldr	r0, [pc, #376]	; (2f8f8 <z_impl_k_poll+0x1f4>)
   2f77e:	f002 f87b 	bl	31878 <printk>
   2f782:	f240 1101 	movw	r1, #257	; 0x101
   2f786:	4856      	ldr	r0, [pc, #344]	; (2f8e0 <z_impl_k_poll+0x1dc>)
   2f788:	f002 f883 	bl	31892 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   2f78c:	fab6 f386 	clz	r3, r6
   2f790:	aa03      	add	r2, sp, #12
   2f792:	095b      	lsrs	r3, r3, #5
   2f794:	4629      	mov	r1, r5
   2f796:	4620      	mov	r0, r4
   2f798:	f7ff fe62 	bl	2f460 <register_events>
   2f79c:	4607      	mov	r7, r0
	__asm__ volatile(
   2f79e:	f04f 0320 	mov.w	r3, #32
   2f7a2:	f3ef 8511 	mrs	r5, BASEPRI
   2f7a6:	f383 8811 	msr	BASEPRI, r3
   2f7aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2f7ae:	4853      	ldr	r0, [pc, #332]	; (2f8fc <z_impl_k_poll+0x1f8>)
   2f7b0:	f7fe ffd2 	bl	2e758 <z_spin_lock_valid>
   2f7b4:	b960      	cbnz	r0, 2f7d0 <z_impl_k_poll+0xcc>
   2f7b6:	4952      	ldr	r1, [pc, #328]	; (2f900 <z_impl_k_poll+0x1fc>)
   2f7b8:	235f      	movs	r3, #95	; 0x5f
   2f7ba:	4a52      	ldr	r2, [pc, #328]	; (2f904 <z_impl_k_poll+0x200>)
   2f7bc:	4849      	ldr	r0, [pc, #292]	; (2f8e4 <z_impl_k_poll+0x1e0>)
   2f7be:	f002 f85b 	bl	31878 <printk>
   2f7c2:	4851      	ldr	r0, [pc, #324]	; (2f908 <z_impl_k_poll+0x204>)
   2f7c4:	f002 f858 	bl	31878 <printk>
   2f7c8:	215f      	movs	r1, #95	; 0x5f
   2f7ca:	484e      	ldr	r0, [pc, #312]	; (2f904 <z_impl_k_poll+0x200>)
   2f7cc:	f002 f861 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f7d0:	484a      	ldr	r0, [pc, #296]	; (2f8fc <z_impl_k_poll+0x1f8>)
   2f7d2:	f7fe ffdf 	bl	2e794 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   2f7d6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2f7da:	b9eb      	cbnz	r3, 2f818 <z_impl_k_poll+0x114>
		clear_event_registrations(events, events_registered, key);
   2f7dc:	4620      	mov	r0, r4
   2f7de:	462a      	mov	r2, r5
   2f7e0:	4639      	mov	r1, r7
   2f7e2:	f7ff fd85 	bl	2f2f0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2f7e6:	4845      	ldr	r0, [pc, #276]	; (2f8fc <z_impl_k_poll+0x1f8>)
   2f7e8:	f7fe ffc4 	bl	2e774 <z_spin_unlock_valid>
   2f7ec:	b960      	cbnz	r0, 2f808 <z_impl_k_poll+0x104>
   2f7ee:	4947      	ldr	r1, [pc, #284]	; (2f90c <z_impl_k_poll+0x208>)
   2f7f0:	2372      	movs	r3, #114	; 0x72
   2f7f2:	4a44      	ldr	r2, [pc, #272]	; (2f904 <z_impl_k_poll+0x200>)
   2f7f4:	483b      	ldr	r0, [pc, #236]	; (2f8e4 <z_impl_k_poll+0x1e0>)
   2f7f6:	f002 f83f 	bl	31878 <printk>
   2f7fa:	4845      	ldr	r0, [pc, #276]	; (2f910 <z_impl_k_poll+0x20c>)
   2f7fc:	f002 f83c 	bl	31878 <printk>
   2f800:	2172      	movs	r1, #114	; 0x72
   2f802:	4840      	ldr	r0, [pc, #256]	; (2f904 <z_impl_k_poll+0x200>)
   2f804:	f002 f845 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2f808:	f385 8811 	msr	BASEPRI, r5
   2f80c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   2f810:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   2f812:	4628      	mov	r0, r5
   2f814:	b007      	add	sp, #28
   2f816:	bdf0      	pop	{r4, r5, r6, r7, pc}
	poller.is_polling = false;
   2f818:	2300      	movs	r3, #0
   2f81a:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   2f81e:	b9be      	cbnz	r6, 2f850 <z_impl_k_poll+0x14c>
   2f820:	4836      	ldr	r0, [pc, #216]	; (2f8fc <z_impl_k_poll+0x1f8>)
   2f822:	f7fe ffa7 	bl	2e774 <z_spin_unlock_valid>
   2f826:	b960      	cbnz	r0, 2f842 <z_impl_k_poll+0x13e>
   2f828:	4938      	ldr	r1, [pc, #224]	; (2f90c <z_impl_k_poll+0x208>)
   2f82a:	2372      	movs	r3, #114	; 0x72
   2f82c:	4a35      	ldr	r2, [pc, #212]	; (2f904 <z_impl_k_poll+0x200>)
   2f82e:	482d      	ldr	r0, [pc, #180]	; (2f8e4 <z_impl_k_poll+0x1e0>)
   2f830:	f002 f822 	bl	31878 <printk>
   2f834:	4836      	ldr	r0, [pc, #216]	; (2f910 <z_impl_k_poll+0x20c>)
   2f836:	f002 f81f 	bl	31878 <printk>
   2f83a:	2172      	movs	r1, #114	; 0x72
   2f83c:	4831      	ldr	r0, [pc, #196]	; (2f904 <z_impl_k_poll+0x200>)
   2f83e:	f002 f828 	bl	31892 <assert_post_action>
   2f842:	f385 8811 	msr	BASEPRI, r5
   2f846:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2f84a:	f06f 050a 	mvn.w	r5, #10
   2f84e:	e7e0      	b.n	2f812 <z_impl_k_poll+0x10e>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   2f850:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2f852:	4629      	mov	r1, r5
   2f854:	4633      	mov	r3, r6
   2f856:	4829      	ldr	r0, [pc, #164]	; (2f8fc <z_impl_k_poll+0x1f8>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   2f858:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2f85c:	f7fe fcb6 	bl	2e1cc <z_pend_curr>
   2f860:	4605      	mov	r5, r0
	__asm__ volatile(
   2f862:	f04f 0320 	mov.w	r3, #32
   2f866:	f3ef 8611 	mrs	r6, BASEPRI
   2f86a:	f383 8811 	msr	BASEPRI, r3
   2f86e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2f872:	4822      	ldr	r0, [pc, #136]	; (2f8fc <z_impl_k_poll+0x1f8>)
   2f874:	f7fe ff70 	bl	2e758 <z_spin_lock_valid>
   2f878:	b960      	cbnz	r0, 2f894 <z_impl_k_poll+0x190>
   2f87a:	4921      	ldr	r1, [pc, #132]	; (2f900 <z_impl_k_poll+0x1fc>)
   2f87c:	235f      	movs	r3, #95	; 0x5f
   2f87e:	4a21      	ldr	r2, [pc, #132]	; (2f904 <z_impl_k_poll+0x200>)
   2f880:	4818      	ldr	r0, [pc, #96]	; (2f8e4 <z_impl_k_poll+0x1e0>)
   2f882:	f001 fff9 	bl	31878 <printk>
   2f886:	4820      	ldr	r0, [pc, #128]	; (2f908 <z_impl_k_poll+0x204>)
   2f888:	f001 fff6 	bl	31878 <printk>
   2f88c:	215f      	movs	r1, #95	; 0x5f
   2f88e:	481d      	ldr	r0, [pc, #116]	; (2f904 <z_impl_k_poll+0x200>)
   2f890:	f001 ffff 	bl	31892 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f894:	4819      	ldr	r0, [pc, #100]	; (2f8fc <z_impl_k_poll+0x1f8>)
   2f896:	f7fe ff7d 	bl	2e794 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   2f89a:	4620      	mov	r0, r4
   2f89c:	4632      	mov	r2, r6
   2f89e:	4639      	mov	r1, r7
   2f8a0:	f7ff fd26 	bl	2f2f0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2f8a4:	4815      	ldr	r0, [pc, #84]	; (2f8fc <z_impl_k_poll+0x1f8>)
   2f8a6:	f7fe ff65 	bl	2e774 <z_spin_unlock_valid>
   2f8aa:	b960      	cbnz	r0, 2f8c6 <z_impl_k_poll+0x1c2>
   2f8ac:	4917      	ldr	r1, [pc, #92]	; (2f90c <z_impl_k_poll+0x208>)
   2f8ae:	2372      	movs	r3, #114	; 0x72
   2f8b0:	4a14      	ldr	r2, [pc, #80]	; (2f904 <z_impl_k_poll+0x200>)
   2f8b2:	480c      	ldr	r0, [pc, #48]	; (2f8e4 <z_impl_k_poll+0x1e0>)
   2f8b4:	f001 ffe0 	bl	31878 <printk>
   2f8b8:	4815      	ldr	r0, [pc, #84]	; (2f910 <z_impl_k_poll+0x20c>)
   2f8ba:	f001 ffdd 	bl	31878 <printk>
   2f8be:	2172      	movs	r1, #114	; 0x72
   2f8c0:	4810      	ldr	r0, [pc, #64]	; (2f904 <z_impl_k_poll+0x200>)
   2f8c2:	f001 ffe6 	bl	31892 <assert_post_action>
	__asm__ volatile(
   2f8c6:	f386 8811 	msr	BASEPRI, r6
   2f8ca:	f3bf 8f6f 	isb	sy
	return swap_rc;
   2f8ce:	e7a0      	b.n	2f812 <z_impl_k_poll+0x10e>
   2f8d0:	200259e0 	.word	0x200259e0
   2f8d4:	0002f281 	.word	0x0002f281
   2f8d8:	e000ed00 	.word	0xe000ed00
   2f8dc:	0003680d 	.word	0x0003680d
   2f8e0:	00036cb3 	.word	0x00036cb3
   2f8e4:	00034ff7 	.word	0x00034ff7
   2f8e8:	000367d3 	.word	0x000367d3
   2f8ec:	00036d32 	.word	0x00036d32
   2f8f0:	00036d48 	.word	0x00036d48
   2f8f4:	00036d57 	.word	0x00036d57
   2f8f8:	00036d66 	.word	0x00036d66
   2f8fc:	20025afc 	.word	0x20025afc
   2f900:	00035426 	.word	0x00035426
   2f904:	000353f4 	.word	0x000353f4
   2f908:	0003543b 	.word	0x0003543b
   2f90c:	00035450 	.word	0x00035450
   2f910:	00035467 	.word	0x00035467

0002f914 <ocrypto_ecdsa_p256_public_key>:
   2f914:	b530      	push	{r4, r5, lr}
   2f916:	b099      	sub	sp, #100	; 0x64
   2f918:	4605      	mov	r5, r0
   2f91a:	4668      	mov	r0, sp
   2f91c:	f000 f8f2 	bl	2fb04 <ocrypto_sc_p256_from32bytes>
   2f920:	4669      	mov	r1, sp
   2f922:	a808      	add	r0, sp, #32
   2f924:	f000 fae6 	bl	2fef4 <ocrypto_curve_p256_scalarmult_base>
   2f928:	4604      	mov	r4, r0
   2f92a:	a908      	add	r1, sp, #32
   2f92c:	4628      	mov	r0, r5
   2f92e:	f000 fa21 	bl	2fd74 <ocrypto_curve_p256_to64bytes>
   2f932:	4620      	mov	r0, r4
   2f934:	b019      	add	sp, #100	; 0x64
   2f936:	bd30      	pop	{r4, r5, pc}

0002f938 <ocrypto_mod_p256_cneg>:
   2f938:	b570      	push	{r4, r5, r6, lr}
   2f93a:	b088      	sub	sp, #32
   2f93c:	4604      	mov	r4, r0
   2f93e:	460d      	mov	r5, r1
   2f940:	4668      	mov	r0, sp
   2f942:	2120      	movs	r1, #32
   2f944:	4616      	mov	r6, r2
   2f946:	f7e9 fc7c 	bl	19242 <ocrypto_constant_time_fill_zero>
   2f94a:	2300      	movs	r3, #0
   2f94c:	4629      	mov	r1, r5
   2f94e:	4620      	mov	r0, r4
   2f950:	2220      	movs	r2, #32
   2f952:	9300      	str	r3, [sp, #0]
   2f954:	f7e9 fc6e 	bl	19234 <ocrypto_constant_time_copy>
   2f958:	462a      	mov	r2, r5
   2f95a:	4669      	mov	r1, sp
   2f95c:	4668      	mov	r0, sp
   2f95e:	f7e9 fcb6 	bl	192ce <ocrypto_mod_p256_sub>
   2f962:	4632      	mov	r2, r6
   2f964:	4669      	mov	r1, sp
   2f966:	4620      	mov	r0, r4
   2f968:	f7e9 f9c1 	bl	18cee <ocrypto_bigint_cswap256>
   2f96c:	b008      	add	sp, #32
   2f96e:	bd70      	pop	{r4, r5, r6, pc}

0002f970 <ocrypto_mod_p256_toBytes>:
   2f970:	69cb      	ldr	r3, [r1, #28]
   2f972:	ba1b      	rev	r3, r3
   2f974:	6003      	str	r3, [r0, #0]
   2f976:	698b      	ldr	r3, [r1, #24]
   2f978:	ba1b      	rev	r3, r3
   2f97a:	6043      	str	r3, [r0, #4]
   2f97c:	694b      	ldr	r3, [r1, #20]
   2f97e:	ba1b      	rev	r3, r3
   2f980:	6083      	str	r3, [r0, #8]
   2f982:	690b      	ldr	r3, [r1, #16]
   2f984:	ba1b      	rev	r3, r3
   2f986:	60c3      	str	r3, [r0, #12]
   2f988:	68cb      	ldr	r3, [r1, #12]
   2f98a:	ba1b      	rev	r3, r3
   2f98c:	6103      	str	r3, [r0, #16]
   2f98e:	688b      	ldr	r3, [r1, #8]
   2f990:	ba1b      	rev	r3, r3
   2f992:	6143      	str	r3, [r0, #20]
   2f994:	684b      	ldr	r3, [r1, #4]
   2f996:	ba1b      	rev	r3, r3
   2f998:	6183      	str	r3, [r0, #24]
   2f99a:	680b      	ldr	r3, [r1, #0]
   2f99c:	ba1b      	rev	r3, r3
   2f99e:	61c3      	str	r3, [r0, #28]
   2f9a0:	4770      	bx	lr
   2f9a2:	bf00      	nop

0002f9a4 <ocrypto_mod_p256_invert>:
   2f9a4:	b570      	push	{r4, r5, r6, lr}
   2f9a6:	460d      	mov	r5, r1
   2f9a8:	2405      	movs	r4, #5
   2f9aa:	b098      	sub	sp, #96	; 0x60
   2f9ac:	4606      	mov	r6, r0
   2f9ae:	a810      	add	r0, sp, #64	; 0x40
   2f9b0:	f7e9 fcba 	bl	19328 <ocrypto_mod_p256_square>
   2f9b4:	462a      	mov	r2, r5
   2f9b6:	a910      	add	r1, sp, #64	; 0x40
   2f9b8:	4668      	mov	r0, sp
   2f9ba:	f7e9 fcb6 	bl	1932a <ocrypto_mod_p256_mul>
   2f9be:	4669      	mov	r1, sp
   2f9c0:	a810      	add	r0, sp, #64	; 0x40
   2f9c2:	f7e9 fcb1 	bl	19328 <ocrypto_mod_p256_square>
   2f9c6:	a910      	add	r1, sp, #64	; 0x40
   2f9c8:	4608      	mov	r0, r1
   2f9ca:	f7e9 fcad 	bl	19328 <ocrypto_mod_p256_square>
   2f9ce:	466a      	mov	r2, sp
   2f9d0:	a910      	add	r1, sp, #64	; 0x40
   2f9d2:	a808      	add	r0, sp, #32
   2f9d4:	f7e9 fca9 	bl	1932a <ocrypto_mod_p256_mul>
   2f9d8:	a908      	add	r1, sp, #32
   2f9da:	a810      	add	r0, sp, #64	; 0x40
   2f9dc:	f7e9 fca4 	bl	19328 <ocrypto_mod_p256_square>
   2f9e0:	a910      	add	r1, sp, #64	; 0x40
   2f9e2:	4608      	mov	r0, r1
   2f9e4:	f7e9 fca0 	bl	19328 <ocrypto_mod_p256_square>
   2f9e8:	a910      	add	r1, sp, #64	; 0x40
   2f9ea:	4608      	mov	r0, r1
   2f9ec:	f7e9 fc9c 	bl	19328 <ocrypto_mod_p256_square>
   2f9f0:	a910      	add	r1, sp, #64	; 0x40
   2f9f2:	4608      	mov	r0, r1
   2f9f4:	f7e9 fc98 	bl	19328 <ocrypto_mod_p256_square>
   2f9f8:	a910      	add	r1, sp, #64	; 0x40
   2f9fa:	aa08      	add	r2, sp, #32
   2f9fc:	4608      	mov	r0, r1
   2f9fe:	f7e9 fc94 	bl	1932a <ocrypto_mod_p256_mul>
   2fa02:	a910      	add	r1, sp, #64	; 0x40
   2fa04:	4608      	mov	r0, r1
   2fa06:	f7e9 fc8f 	bl	19328 <ocrypto_mod_p256_square>
   2fa0a:	a910      	add	r1, sp, #64	; 0x40
   2fa0c:	4608      	mov	r0, r1
   2fa0e:	f7e9 fc8b 	bl	19328 <ocrypto_mod_p256_square>
   2fa12:	a910      	add	r1, sp, #64	; 0x40
   2fa14:	466a      	mov	r2, sp
   2fa16:	a808      	add	r0, sp, #32
   2fa18:	f7e9 fc87 	bl	1932a <ocrypto_mod_p256_mul>
   2fa1c:	a908      	add	r1, sp, #32
   2fa1e:	a810      	add	r0, sp, #64	; 0x40
   2fa20:	f7e9 fc82 	bl	19328 <ocrypto_mod_p256_square>
   2fa24:	a910      	add	r1, sp, #64	; 0x40
   2fa26:	4608      	mov	r0, r1
   2fa28:	f7e9 fc7e 	bl	19328 <ocrypto_mod_p256_square>
   2fa2c:	3c01      	subs	r4, #1
   2fa2e:	a910      	add	r1, sp, #64	; 0x40
   2fa30:	d1f5      	bne.n	2fa1e <ocrypto_mod_p256_invert+0x7a>
   2fa32:	aa08      	add	r2, sp, #32
   2fa34:	4608      	mov	r0, r1
   2fa36:	f7e9 fc78 	bl	1932a <ocrypto_mod_p256_mul>
   2fa3a:	2405      	movs	r4, #5
   2fa3c:	a910      	add	r1, sp, #64	; 0x40
   2fa3e:	4608      	mov	r0, r1
   2fa40:	f7e9 fc72 	bl	19328 <ocrypto_mod_p256_square>
   2fa44:	a910      	add	r1, sp, #64	; 0x40
   2fa46:	4608      	mov	r0, r1
   2fa48:	f7e9 fc6e 	bl	19328 <ocrypto_mod_p256_square>
   2fa4c:	3c01      	subs	r4, #1
   2fa4e:	d1f5      	bne.n	2fa3c <ocrypto_mod_p256_invert+0x98>
   2fa50:	a910      	add	r1, sp, #64	; 0x40
   2fa52:	aa08      	add	r2, sp, #32
   2fa54:	4608      	mov	r0, r1
   2fa56:	f7e9 fc68 	bl	1932a <ocrypto_mod_p256_mul>
   2fa5a:	a910      	add	r1, sp, #64	; 0x40
   2fa5c:	a808      	add	r0, sp, #32
   2fa5e:	f7e9 fc63 	bl	19328 <ocrypto_mod_p256_square>
   2fa62:	a908      	add	r1, sp, #32
   2fa64:	4608      	mov	r0, r1
   2fa66:	f7e9 fc5f 	bl	19328 <ocrypto_mod_p256_square>
   2fa6a:	a908      	add	r1, sp, #32
   2fa6c:	466a      	mov	r2, sp
   2fa6e:	4668      	mov	r0, sp
   2fa70:	f7e9 fc5b 	bl	1932a <ocrypto_mod_p256_mul>
   2fa74:	2410      	movs	r4, #16
   2fa76:	4669      	mov	r1, sp
   2fa78:	a810      	add	r0, sp, #64	; 0x40
   2fa7a:	f7e9 fc55 	bl	19328 <ocrypto_mod_p256_square>
   2fa7e:	a910      	add	r1, sp, #64	; 0x40
   2fa80:	4608      	mov	r0, r1
   2fa82:	f7e9 fc51 	bl	19328 <ocrypto_mod_p256_square>
   2fa86:	3c01      	subs	r4, #1
   2fa88:	a910      	add	r1, sp, #64	; 0x40
   2fa8a:	d1f5      	bne.n	2fa78 <ocrypto_mod_p256_invert+0xd4>
   2fa8c:	462a      	mov	r2, r5
   2fa8e:	4608      	mov	r0, r1
   2fa90:	f7e9 fc4b 	bl	1932a <ocrypto_mod_p256_mul>
   2fa94:	2440      	movs	r4, #64	; 0x40
   2fa96:	a910      	add	r1, sp, #64	; 0x40
   2fa98:	4608      	mov	r0, r1
   2fa9a:	f7e9 fc45 	bl	19328 <ocrypto_mod_p256_square>
   2fa9e:	a910      	add	r1, sp, #64	; 0x40
   2faa0:	4608      	mov	r0, r1
   2faa2:	f7e9 fc41 	bl	19328 <ocrypto_mod_p256_square>
   2faa6:	3c01      	subs	r4, #1
   2faa8:	d1f5      	bne.n	2fa96 <ocrypto_mod_p256_invert+0xf2>
   2faaa:	a910      	add	r1, sp, #64	; 0x40
   2faac:	466a      	mov	r2, sp
   2faae:	4608      	mov	r0, r1
   2fab0:	f7e9 fc3b 	bl	1932a <ocrypto_mod_p256_mul>
   2fab4:	2410      	movs	r4, #16
   2fab6:	a910      	add	r1, sp, #64	; 0x40
   2fab8:	4608      	mov	r0, r1
   2faba:	f7e9 fc35 	bl	19328 <ocrypto_mod_p256_square>
   2fabe:	a910      	add	r1, sp, #64	; 0x40
   2fac0:	4608      	mov	r0, r1
   2fac2:	f7e9 fc31 	bl	19328 <ocrypto_mod_p256_square>
   2fac6:	3c01      	subs	r4, #1
   2fac8:	d1f5      	bne.n	2fab6 <ocrypto_mod_p256_invert+0x112>
   2faca:	a910      	add	r1, sp, #64	; 0x40
   2facc:	466a      	mov	r2, sp
   2face:	4608      	mov	r0, r1
   2fad0:	f7e9 fc2b 	bl	1932a <ocrypto_mod_p256_mul>
   2fad4:	2410      	movs	r4, #16
   2fad6:	a910      	add	r1, sp, #64	; 0x40
   2fad8:	4608      	mov	r0, r1
   2fada:	f7e9 fc25 	bl	19328 <ocrypto_mod_p256_square>
   2fade:	a910      	add	r1, sp, #64	; 0x40
   2fae0:	4608      	mov	r0, r1
   2fae2:	f7e9 fc21 	bl	19328 <ocrypto_mod_p256_square>
   2fae6:	3c01      	subs	r4, #1
   2fae8:	d1f5      	bne.n	2fad6 <ocrypto_mod_p256_invert+0x132>
   2faea:	a910      	add	r1, sp, #64	; 0x40
   2faec:	aa08      	add	r2, sp, #32
   2faee:	4608      	mov	r0, r1
   2faf0:	f7e9 fc1b 	bl	1932a <ocrypto_mod_p256_mul>
   2faf4:	462a      	mov	r2, r5
   2faf6:	a910      	add	r1, sp, #64	; 0x40
   2faf8:	4630      	mov	r0, r6
   2fafa:	f7e9 fc16 	bl	1932a <ocrypto_mod_p256_mul>
   2fafe:	b018      	add	sp, #96	; 0x60
   2fb00:	bd70      	pop	{r4, r5, r6, pc}
   2fb02:	bf00      	nop

0002fb04 <ocrypto_sc_p256_from32bytes>:
   2fb04:	b538      	push	{r3, r4, r5, lr}
   2fb06:	460b      	mov	r3, r1
   2fb08:	680a      	ldr	r2, [r1, #0]
   2fb0a:	4d12      	ldr	r5, [pc, #72]	; (2fb54 <ocrypto_sc_p256_from32bytes+0x50>)
   2fb0c:	ba12      	rev	r2, r2
   2fb0e:	61c2      	str	r2, [r0, #28]
   2fb10:	684a      	ldr	r2, [r1, #4]
   2fb12:	4601      	mov	r1, r0
   2fb14:	ba12      	rev	r2, r2
   2fb16:	6182      	str	r2, [r0, #24]
   2fb18:	689a      	ldr	r2, [r3, #8]
   2fb1a:	4604      	mov	r4, r0
   2fb1c:	ba12      	rev	r2, r2
   2fb1e:	6142      	str	r2, [r0, #20]
   2fb20:	68da      	ldr	r2, [r3, #12]
   2fb22:	ba12      	rev	r2, r2
   2fb24:	6102      	str	r2, [r0, #16]
   2fb26:	691a      	ldr	r2, [r3, #16]
   2fb28:	ba12      	rev	r2, r2
   2fb2a:	60c2      	str	r2, [r0, #12]
   2fb2c:	695a      	ldr	r2, [r3, #20]
   2fb2e:	ba12      	rev	r2, r2
   2fb30:	6082      	str	r2, [r0, #8]
   2fb32:	699a      	ldr	r2, [r3, #24]
   2fb34:	ba12      	rev	r2, r2
   2fb36:	6042      	str	r2, [r0, #4]
   2fb38:	69db      	ldr	r3, [r3, #28]
   2fb3a:	462a      	mov	r2, r5
   2fb3c:	ba1b      	rev	r3, r3
   2fb3e:	6003      	str	r3, [r0, #0]
   2fb40:	f7e9 f84a 	bl	18bd8 <ocrypto_bigint_sub256>
   2fb44:	4629      	mov	r1, r5
   2fb46:	4602      	mov	r2, r0
   2fb48:	4620      	mov	r0, r4
   2fb4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2fb4e:	f7e9 b863 	b.w	18c18 <ocrypto_bigint_cadd256>
   2fb52:	bf00      	nop
   2fb54:	00034dac 	.word	0x00034dac

0002fb58 <p256_zdblu>:
   2fb58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fb5c:	4607      	mov	r7, r0
   2fb5e:	460d      	mov	r5, r1
   2fb60:	4690      	mov	r8, r2
   2fb62:	b088      	sub	sp, #32
   2fb64:	f102 0120 	add.w	r1, r2, #32
   2fb68:	4668      	mov	r0, sp
   2fb6a:	f107 0620 	add.w	r6, r7, #32
   2fb6e:	f7e9 fbdb 	bl	19328 <ocrypto_mod_p256_square>
   2fb72:	466a      	mov	r2, sp
   2fb74:	4669      	mov	r1, sp
   2fb76:	4668      	mov	r0, sp
   2fb78:	f7e9 fb6a 	bl	19250 <ocrypto_mod_p256_add>
   2fb7c:	4630      	mov	r0, r6
   2fb7e:	4669      	mov	r1, sp
   2fb80:	f7e9 fbd2 	bl	19328 <ocrypto_mod_p256_square>
   2fb84:	4632      	mov	r2, r6
   2fb86:	4631      	mov	r1, r6
   2fb88:	4630      	mov	r0, r6
   2fb8a:	f105 0420 	add.w	r4, r5, #32
   2fb8e:	f7e9 fb5f 	bl	19250 <ocrypto_mod_p256_add>
   2fb92:	466a      	mov	r2, sp
   2fb94:	4669      	mov	r1, sp
   2fb96:	4668      	mov	r0, sp
   2fb98:	f7e9 fb5a 	bl	19250 <ocrypto_mod_p256_add>
   2fb9c:	4620      	mov	r0, r4
   2fb9e:	4641      	mov	r1, r8
   2fba0:	f7e9 fbc2 	bl	19328 <ocrypto_mod_p256_square>
   2fba4:	466a      	mov	r2, sp
   2fba6:	4641      	mov	r1, r8
   2fba8:	4638      	mov	r0, r7
   2fbaa:	f7e9 fbbe 	bl	1932a <ocrypto_mod_p256_mul>
   2fbae:	4622      	mov	r2, r4
   2fbb0:	4621      	mov	r1, r4
   2fbb2:	4668      	mov	r0, sp
   2fbb4:	f7e9 fb4c 	bl	19250 <ocrypto_mod_p256_add>
   2fbb8:	4622      	mov	r2, r4
   2fbba:	4669      	mov	r1, sp
   2fbbc:	4668      	mov	r0, sp
   2fbbe:	f7e9 fb47 	bl	19250 <ocrypto_mod_p256_add>
   2fbc2:	4669      	mov	r1, sp
   2fbc4:	4668      	mov	r0, sp
   2fbc6:	4a11      	ldr	r2, [pc, #68]	; (2fc0c <p256_zdblu+0xb4>)
   2fbc8:	f7e9 fb42 	bl	19250 <ocrypto_mod_p256_add>
   2fbcc:	4669      	mov	r1, sp
   2fbce:	4628      	mov	r0, r5
   2fbd0:	f7e9 fbaa 	bl	19328 <ocrypto_mod_p256_square>
   2fbd4:	463a      	mov	r2, r7
   2fbd6:	4629      	mov	r1, r5
   2fbd8:	4628      	mov	r0, r5
   2fbda:	f7e9 fb78 	bl	192ce <ocrypto_mod_p256_sub>
   2fbde:	463a      	mov	r2, r7
   2fbe0:	4629      	mov	r1, r5
   2fbe2:	4628      	mov	r0, r5
   2fbe4:	f7e9 fb73 	bl	192ce <ocrypto_mod_p256_sub>
   2fbe8:	462a      	mov	r2, r5
   2fbea:	4639      	mov	r1, r7
   2fbec:	4620      	mov	r0, r4
   2fbee:	f7e9 fb6e 	bl	192ce <ocrypto_mod_p256_sub>
   2fbf2:	466a      	mov	r2, sp
   2fbf4:	4621      	mov	r1, r4
   2fbf6:	4620      	mov	r0, r4
   2fbf8:	f7e9 fb97 	bl	1932a <ocrypto_mod_p256_mul>
   2fbfc:	4632      	mov	r2, r6
   2fbfe:	4621      	mov	r1, r4
   2fc00:	4620      	mov	r0, r4
   2fc02:	f7e9 fb64 	bl	192ce <ocrypto_mod_p256_sub>
   2fc06:	b008      	add	sp, #32
   2fc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2fc0c:	00034e4c 	.word	0x00034e4c

0002fc10 <p256_zaddc>:
   2fc10:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fc12:	4604      	mov	r4, r0
   2fc14:	460e      	mov	r6, r1
   2fc16:	b099      	sub	sp, #100	; 0x64
   2fc18:	460a      	mov	r2, r1
   2fc1a:	4601      	mov	r1, r0
   2fc1c:	4668      	mov	r0, sp
   2fc1e:	f7e9 fb56 	bl	192ce <ocrypto_mod_p256_sub>
   2fc22:	4669      	mov	r1, sp
   2fc24:	4668      	mov	r0, sp
   2fc26:	f7e9 fb7f 	bl	19328 <ocrypto_mod_p256_square>
   2fc2a:	466a      	mov	r2, sp
   2fc2c:	4621      	mov	r1, r4
   2fc2e:	a808      	add	r0, sp, #32
   2fc30:	f106 0520 	add.w	r5, r6, #32
   2fc34:	f104 0720 	add.w	r7, r4, #32
   2fc38:	f7e9 fb77 	bl	1932a <ocrypto_mod_p256_mul>
   2fc3c:	466a      	mov	r2, sp
   2fc3e:	4631      	mov	r1, r6
   2fc40:	4668      	mov	r0, sp
   2fc42:	f7e9 fb72 	bl	1932a <ocrypto_mod_p256_mul>
   2fc46:	4639      	mov	r1, r7
   2fc48:	462a      	mov	r2, r5
   2fc4a:	a810      	add	r0, sp, #64	; 0x40
   2fc4c:	f7e9 fb00 	bl	19250 <ocrypto_mod_p256_add>
   2fc50:	462a      	mov	r2, r5
   2fc52:	4639      	mov	r1, r7
   2fc54:	4628      	mov	r0, r5
   2fc56:	f7e9 fb3a 	bl	192ce <ocrypto_mod_p256_sub>
   2fc5a:	4629      	mov	r1, r5
   2fc5c:	4630      	mov	r0, r6
   2fc5e:	f7e9 fb63 	bl	19328 <ocrypto_mod_p256_square>
   2fc62:	466a      	mov	r2, sp
   2fc64:	a908      	add	r1, sp, #32
   2fc66:	4620      	mov	r0, r4
   2fc68:	f7e9 faf2 	bl	19250 <ocrypto_mod_p256_add>
   2fc6c:	4622      	mov	r2, r4
   2fc6e:	4631      	mov	r1, r6
   2fc70:	4630      	mov	r0, r6
   2fc72:	f7e9 fb2c 	bl	192ce <ocrypto_mod_p256_sub>
   2fc76:	466a      	mov	r2, sp
   2fc78:	a908      	add	r1, sp, #32
   2fc7a:	4668      	mov	r0, sp
   2fc7c:	f7e9 fb27 	bl	192ce <ocrypto_mod_p256_sub>
   2fc80:	466a      	mov	r2, sp
   2fc82:	4639      	mov	r1, r7
   2fc84:	4638      	mov	r0, r7
   2fc86:	f7e9 fb50 	bl	1932a <ocrypto_mod_p256_mul>
   2fc8a:	4632      	mov	r2, r6
   2fc8c:	a908      	add	r1, sp, #32
   2fc8e:	4668      	mov	r0, sp
   2fc90:	f7e9 fb1d 	bl	192ce <ocrypto_mod_p256_sub>
   2fc94:	466a      	mov	r2, sp
   2fc96:	4629      	mov	r1, r5
   2fc98:	4628      	mov	r0, r5
   2fc9a:	f7e9 fb46 	bl	1932a <ocrypto_mod_p256_mul>
   2fc9e:	463a      	mov	r2, r7
   2fca0:	4629      	mov	r1, r5
   2fca2:	4628      	mov	r0, r5
   2fca4:	f7e9 fb13 	bl	192ce <ocrypto_mod_p256_sub>
   2fca8:	a910      	add	r1, sp, #64	; 0x40
   2fcaa:	4668      	mov	r0, sp
   2fcac:	f7e9 fb3c 	bl	19328 <ocrypto_mod_p256_square>
   2fcb0:	4622      	mov	r2, r4
   2fcb2:	4669      	mov	r1, sp
   2fcb4:	4620      	mov	r0, r4
   2fcb6:	f7e9 fb0a 	bl	192ce <ocrypto_mod_p256_sub>
   2fcba:	a908      	add	r1, sp, #32
   2fcbc:	4622      	mov	r2, r4
   2fcbe:	4608      	mov	r0, r1
   2fcc0:	f7e9 fb05 	bl	192ce <ocrypto_mod_p256_sub>
   2fcc4:	a910      	add	r1, sp, #64	; 0x40
   2fcc6:	aa08      	add	r2, sp, #32
   2fcc8:	4608      	mov	r0, r1
   2fcca:	f7e9 fb2e 	bl	1932a <ocrypto_mod_p256_mul>
   2fcce:	463a      	mov	r2, r7
   2fcd0:	a910      	add	r1, sp, #64	; 0x40
   2fcd2:	4638      	mov	r0, r7
   2fcd4:	f7e9 fafb 	bl	192ce <ocrypto_mod_p256_sub>
   2fcd8:	b019      	add	sp, #100	; 0x64
   2fcda:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002fcdc <p256_zaddu>:
   2fcdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fce0:	460c      	mov	r4, r1
   2fce2:	4605      	mov	r5, r0
   2fce4:	4690      	mov	r8, r2
   2fce6:	b088      	sub	sp, #32
   2fce8:	4622      	mov	r2, r4
   2fcea:	4601      	mov	r1, r0
   2fcec:	4668      	mov	r0, sp
   2fcee:	f7e9 faee 	bl	192ce <ocrypto_mod_p256_sub>
   2fcf2:	4669      	mov	r1, sp
   2fcf4:	4668      	mov	r0, sp
   2fcf6:	f7e9 fb17 	bl	19328 <ocrypto_mod_p256_square>
   2fcfa:	466a      	mov	r2, sp
   2fcfc:	4629      	mov	r1, r5
   2fcfe:	4628      	mov	r0, r5
   2fd00:	f104 0620 	add.w	r6, r4, #32
   2fd04:	f7e9 fb11 	bl	1932a <ocrypto_mod_p256_mul>
   2fd08:	f105 0720 	add.w	r7, r5, #32
   2fd0c:	466a      	mov	r2, sp
   2fd0e:	4621      	mov	r1, r4
   2fd10:	4668      	mov	r0, sp
   2fd12:	f7e9 fb0a 	bl	1932a <ocrypto_mod_p256_mul>
   2fd16:	4632      	mov	r2, r6
   2fd18:	4630      	mov	r0, r6
   2fd1a:	4639      	mov	r1, r7
   2fd1c:	f7e9 fad7 	bl	192ce <ocrypto_mod_p256_sub>
   2fd20:	4631      	mov	r1, r6
   2fd22:	4620      	mov	r0, r4
   2fd24:	f7e9 fb00 	bl	19328 <ocrypto_mod_p256_square>
   2fd28:	462a      	mov	r2, r5
   2fd2a:	4621      	mov	r1, r4
   2fd2c:	4620      	mov	r0, r4
   2fd2e:	f7e9 face 	bl	192ce <ocrypto_mod_p256_sub>
   2fd32:	466a      	mov	r2, sp
   2fd34:	4621      	mov	r1, r4
   2fd36:	4620      	mov	r0, r4
   2fd38:	f7e9 fac9 	bl	192ce <ocrypto_mod_p256_sub>
   2fd3c:	466a      	mov	r2, sp
   2fd3e:	4629      	mov	r1, r5
   2fd40:	4640      	mov	r0, r8
   2fd42:	f7e9 fac4 	bl	192ce <ocrypto_mod_p256_sub>
   2fd46:	4642      	mov	r2, r8
   2fd48:	4639      	mov	r1, r7
   2fd4a:	4638      	mov	r0, r7
   2fd4c:	f7e9 faed 	bl	1932a <ocrypto_mod_p256_mul>
   2fd50:	4622      	mov	r2, r4
   2fd52:	4629      	mov	r1, r5
   2fd54:	4668      	mov	r0, sp
   2fd56:	f7e9 faba 	bl	192ce <ocrypto_mod_p256_sub>
   2fd5a:	466a      	mov	r2, sp
   2fd5c:	4631      	mov	r1, r6
   2fd5e:	4630      	mov	r0, r6
   2fd60:	f7e9 fae3 	bl	1932a <ocrypto_mod_p256_mul>
   2fd64:	463a      	mov	r2, r7
   2fd66:	4631      	mov	r1, r6
   2fd68:	4630      	mov	r0, r6
   2fd6a:	f7e9 fab0 	bl	192ce <ocrypto_mod_p256_sub>
   2fd6e:	b008      	add	sp, #32
   2fd70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002fd74 <ocrypto_curve_p256_to64bytes>:
   2fd74:	b538      	push	{r3, r4, r5, lr}
   2fd76:	4604      	mov	r4, r0
   2fd78:	460d      	mov	r5, r1
   2fd7a:	f7ff fdf9 	bl	2f970 <ocrypto_mod_p256_toBytes>
   2fd7e:	f105 0120 	add.w	r1, r5, #32
   2fd82:	f104 0020 	add.w	r0, r4, #32
   2fd86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2fd8a:	f7ff bdf1 	b.w	2f970 <ocrypto_mod_p256_toBytes>
   2fd8e:	bf00      	nop

0002fd90 <ocrypto_curve_p256_scalarmult>:
   2fd90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2fd94:	b0b8      	sub	sp, #224	; 0xe0
   2fd96:	468a      	mov	sl, r1
   2fd98:	4681      	mov	r9, r0
   2fd9a:	4611      	mov	r1, r2
   2fd9c:	a810      	add	r0, sp, #64	; 0x40
   2fd9e:	4a51      	ldr	r2, [pc, #324]	; (2fee4 <ocrypto_curve_p256_scalarmult+0x154>)
   2fda0:	f7e8 ff1a 	bl	18bd8 <ocrypto_bigint_sub256>
   2fda4:	4950      	ldr	r1, [pc, #320]	; (2fee8 <ocrypto_curve_p256_scalarmult+0x158>)
   2fda6:	4602      	mov	r2, r0
   2fda8:	a810      	add	r0, sp, #64	; 0x40
   2fdaa:	f7e8 ff35 	bl	18c18 <ocrypto_bigint_cadd256>
   2fdae:	4680      	mov	r8, r0
   2fdb0:	9f17      	ldr	r7, [sp, #92]	; 0x5c
   2fdb2:	494c      	ldr	r1, [pc, #304]	; (2fee4 <ocrypto_curve_p256_scalarmult+0x154>)
   2fdb4:	ea08 77d7 	and.w	r7, r8, r7, lsr #31
   2fdb8:	f1c7 0201 	rsb	r2, r7, #1
   2fdbc:	a810      	add	r0, sp, #64	; 0x40
   2fdbe:	f7e8 ff2b 	bl	18c18 <ocrypto_bigint_cadd256>
   2fdc2:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   2fdc4:	4652      	mov	r2, sl
   2fdc6:	43ed      	mvns	r5, r5
   2fdc8:	a928      	add	r1, sp, #160	; 0xa0
   2fdca:	a818      	add	r0, sp, #96	; 0x60
   2fdcc:	f7ff fec4 	bl	2fb58 <p256_zdblu>
   2fdd0:	0fed      	lsrs	r5, r5, #31
   2fdd2:	a920      	add	r1, sp, #128	; 0x80
   2fdd4:	f1c5 0201 	rsb	r2, r5, #1
   2fdd8:	4608      	mov	r0, r1
   2fdda:	f7ff fdad 	bl	2f938 <ocrypto_mod_p256_cneg>
   2fdde:	26fe      	movs	r6, #254	; 0xfe
   2fde0:	f1c8 0801 	rsb	r8, r8, #1
   2fde4:	466a      	mov	r2, sp
   2fde6:	a918      	add	r1, sp, #96	; 0x60
   2fde8:	a828      	add	r0, sp, #160	; 0xa0
   2fdea:	f7ff ff77 	bl	2fcdc <p256_zaddu>
   2fdee:	1173      	asrs	r3, r6, #5
   2fdf0:	aa38      	add	r2, sp, #224	; 0xe0
   2fdf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2fdf6:	f853 4ca0 	ldr.w	r4, [r3, #-160]
   2fdfa:	f006 031f 	and.w	r3, r6, #31
   2fdfe:	40dc      	lsrs	r4, r3
   2fe00:	f004 0401 	and.w	r4, r4, #1
   2fe04:	4065      	eors	r5, r4
   2fe06:	462a      	mov	r2, r5
   2fe08:	a928      	add	r1, sp, #160	; 0xa0
   2fe0a:	a818      	add	r0, sp, #96	; 0x60
   2fe0c:	f7e8 ff6f 	bl	18cee <ocrypto_bigint_cswap256>
   2fe10:	462a      	mov	r2, r5
   2fe12:	a930      	add	r1, sp, #192	; 0xc0
   2fe14:	a820      	add	r0, sp, #128	; 0x80
   2fe16:	f7e8 ff6a 	bl	18cee <ocrypto_bigint_cswap256>
   2fe1a:	3e01      	subs	r6, #1
   2fe1c:	a928      	add	r1, sp, #160	; 0xa0
   2fe1e:	a818      	add	r0, sp, #96	; 0x60
   2fe20:	f7ff fef6 	bl	2fc10 <p256_zaddc>
   2fe24:	1c73      	adds	r3, r6, #1
   2fe26:	4625      	mov	r5, r4
   2fe28:	d1dc      	bne.n	2fde4 <ocrypto_curve_p256_scalarmult+0x54>
   2fe2a:	f1c4 0201 	rsb	r2, r4, #1
   2fe2e:	a808      	add	r0, sp, #32
   2fe30:	a920      	add	r1, sp, #128	; 0x80
   2fe32:	f7ff fd81 	bl	2f938 <ocrypto_mod_p256_cneg>
   2fe36:	407d      	eors	r5, r7
   2fe38:	466a      	mov	r2, sp
   2fe3a:	a918      	add	r1, sp, #96	; 0x60
   2fe3c:	a828      	add	r0, sp, #160	; 0xa0
   2fe3e:	f7ff ff4d 	bl	2fcdc <p256_zaddu>
   2fe42:	a928      	add	r1, sp, #160	; 0xa0
   2fe44:	462a      	mov	r2, r5
   2fe46:	a818      	add	r0, sp, #96	; 0x60
   2fe48:	f7e8 ff51 	bl	18cee <ocrypto_bigint_cswap256>
   2fe4c:	462a      	mov	r2, r5
   2fe4e:	a930      	add	r1, sp, #192	; 0xc0
   2fe50:	a820      	add	r0, sp, #128	; 0x80
   2fe52:	f7e8 ff4c 	bl	18cee <ocrypto_bigint_cswap256>
   2fe56:	a908      	add	r1, sp, #32
   2fe58:	466a      	mov	r2, sp
   2fe5a:	4608      	mov	r0, r1
   2fe5c:	f7e9 fa65 	bl	1932a <ocrypto_mod_p256_mul>
   2fe60:	a908      	add	r1, sp, #32
   2fe62:	4608      	mov	r0, r1
   2fe64:	f7ff fd9e 	bl	2f9a4 <ocrypto_mod_p256_invert>
   2fe68:	a908      	add	r1, sp, #32
   2fe6a:	f109 0420 	add.w	r4, r9, #32
   2fe6e:	f10a 0220 	add.w	r2, sl, #32
   2fe72:	4608      	mov	r0, r1
   2fe74:	f7e9 fa59 	bl	1932a <ocrypto_mod_p256_mul>
   2fe78:	a920      	add	r1, sp, #128	; 0x80
   2fe7a:	aa08      	add	r2, sp, #32
   2fe7c:	4620      	mov	r0, r4
   2fe7e:	f7e9 fa54 	bl	1932a <ocrypto_mod_p256_mul>
   2fe82:	aa08      	add	r2, sp, #32
   2fe84:	a918      	add	r1, sp, #96	; 0x60
   2fe86:	4668      	mov	r0, sp
   2fe88:	f7e9 fa4f 	bl	1932a <ocrypto_mod_p256_mul>
   2fe8c:	4669      	mov	r1, sp
   2fe8e:	4668      	mov	r0, sp
   2fe90:	f7e9 fa4a 	bl	19328 <ocrypto_mod_p256_square>
   2fe94:	aa18      	add	r2, sp, #96	; 0x60
   2fe96:	4669      	mov	r1, sp
   2fe98:	a808      	add	r0, sp, #32
   2fe9a:	f7e9 fa46 	bl	1932a <ocrypto_mod_p256_mul>
   2fe9e:	4621      	mov	r1, r4
   2fea0:	4668      	mov	r0, sp
   2fea2:	f7e9 fa41 	bl	19328 <ocrypto_mod_p256_square>
   2fea6:	aa08      	add	r2, sp, #32
   2fea8:	4669      	mov	r1, sp
   2feaa:	4610      	mov	r0, r2
   2feac:	f7e9 fa0f 	bl	192ce <ocrypto_mod_p256_sub>
   2feb0:	a908      	add	r1, sp, #32
   2feb2:	4a0e      	ldr	r2, [pc, #56]	; (2feec <ocrypto_curve_p256_scalarmult+0x15c>)
   2feb4:	4668      	mov	r0, sp
   2feb6:	f7e9 fa0a 	bl	192ce <ocrypto_mod_p256_sub>
   2feba:	4620      	mov	r0, r4
   2febc:	2120      	movs	r1, #32
   2febe:	f7e9 f9ac 	bl	1921a <ocrypto_constant_time_is_zero>
   2fec2:	a908      	add	r1, sp, #32
   2fec4:	4243      	negs	r3, r0
   2fec6:	4602      	mov	r2, r0
   2fec8:	4668      	mov	r0, sp
   2feca:	ea43 0808 	orr.w	r8, r3, r8
   2fece:	f7e8 ff0e 	bl	18cee <ocrypto_bigint_cswap256>
   2fed2:	4648      	mov	r0, r9
   2fed4:	4669      	mov	r1, sp
   2fed6:	4a06      	ldr	r2, [pc, #24]	; (2fef0 <ocrypto_curve_p256_scalarmult+0x160>)
   2fed8:	f7e9 fa27 	bl	1932a <ocrypto_mod_p256_mul>
   2fedc:	4640      	mov	r0, r8
   2fede:	b038      	add	sp, #224	; 0xe0
   2fee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2fee4:	00034e8c 	.word	0x00034e8c
   2fee8:	00034e0c 	.word	0x00034e0c
   2feec:	00034e6c 	.word	0x00034e6c
   2fef0:	00034e2c 	.word	0x00034e2c

0002fef4 <ocrypto_curve_p256_scalarmult_base>:
   2fef4:	460a      	mov	r2, r1
   2fef6:	4901      	ldr	r1, [pc, #4]	; (2fefc <ocrypto_curve_p256_scalarmult_base+0x8>)
   2fef8:	f7ff bf4a 	b.w	2fd90 <ocrypto_curve_p256_scalarmult>
   2fefc:	00034dcc 	.word	0x00034dcc

0002ff00 <__assert_func>:
   2ff00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2ff02:	461c      	mov	r4, r3
   2ff04:	4b09      	ldr	r3, [pc, #36]	; (2ff2c <__assert_func+0x2c>)
   2ff06:	4605      	mov	r5, r0
   2ff08:	681b      	ldr	r3, [r3, #0]
   2ff0a:	68d8      	ldr	r0, [r3, #12]
   2ff0c:	b152      	cbz	r2, 2ff24 <__assert_func+0x24>
   2ff0e:	4b08      	ldr	r3, [pc, #32]	; (2ff30 <__assert_func+0x30>)
   2ff10:	9100      	str	r1, [sp, #0]
   2ff12:	4908      	ldr	r1, [pc, #32]	; (2ff34 <__assert_func+0x34>)
   2ff14:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2ff18:	462b      	mov	r3, r5
   2ff1a:	4622      	mov	r2, r4
   2ff1c:	f000 f80e 	bl	2ff3c <fiprintf>
   2ff20:	f002 feeb 	bl	32cfa <abort>
   2ff24:	4b04      	ldr	r3, [pc, #16]	; (2ff38 <__assert_func+0x38>)
   2ff26:	461a      	mov	r2, r3
   2ff28:	e7f2      	b.n	2ff10 <__assert_func+0x10>
   2ff2a:	bf00      	nop
   2ff2c:	20028e3c 	.word	0x20028e3c
   2ff30:	00036d75 	.word	0x00036d75
   2ff34:	00036d82 	.word	0x00036d82
   2ff38:	000367d5 	.word	0x000367d5

0002ff3c <fiprintf>:
   2ff3c:	b40e      	push	{r1, r2, r3}
   2ff3e:	b503      	push	{r0, r1, lr}
   2ff40:	ab03      	add	r3, sp, #12
   2ff42:	4601      	mov	r1, r0
   2ff44:	4805      	ldr	r0, [pc, #20]	; (2ff5c <fiprintf+0x20>)
   2ff46:	f853 2b04 	ldr.w	r2, [r3], #4
   2ff4a:	6800      	ldr	r0, [r0, #0]
   2ff4c:	9301      	str	r3, [sp, #4]
   2ff4e:	f000 f815 	bl	2ff7c <_vfiprintf_r>
   2ff52:	b002      	add	sp, #8
   2ff54:	f85d eb04 	ldr.w	lr, [sp], #4
   2ff58:	b003      	add	sp, #12
   2ff5a:	4770      	bx	lr
   2ff5c:	20028e3c 	.word	0x20028e3c

0002ff60 <__locale_ctype_ptr>:
   2ff60:	4b04      	ldr	r3, [pc, #16]	; (2ff74 <__locale_ctype_ptr+0x14>)
   2ff62:	4a05      	ldr	r2, [pc, #20]	; (2ff78 <__locale_ctype_ptr+0x18>)
   2ff64:	681b      	ldr	r3, [r3, #0]
   2ff66:	6a1b      	ldr	r3, [r3, #32]
   2ff68:	2b00      	cmp	r3, #0
   2ff6a:	bf08      	it	eq
   2ff6c:	4613      	moveq	r3, r2
   2ff6e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   2ff72:	4770      	bx	lr
   2ff74:	20028e3c 	.word	0x20028e3c
   2ff78:	20028ea0 	.word	0x20028ea0

0002ff7c <_vfiprintf_r>:
   2ff7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ff80:	460c      	mov	r4, r1
   2ff82:	b09d      	sub	sp, #116	; 0x74
   2ff84:	4617      	mov	r7, r2
   2ff86:	461d      	mov	r5, r3
   2ff88:	4606      	mov	r6, r0
   2ff8a:	b118      	cbz	r0, 2ff94 <_vfiprintf_r+0x18>
   2ff8c:	6983      	ldr	r3, [r0, #24]
   2ff8e:	b90b      	cbnz	r3, 2ff94 <_vfiprintf_r+0x18>
   2ff90:	f000 fe3e 	bl	30c10 <__sinit>
   2ff94:	4b7c      	ldr	r3, [pc, #496]	; (30188 <_vfiprintf_r+0x20c>)
   2ff96:	429c      	cmp	r4, r3
   2ff98:	d158      	bne.n	3004c <_vfiprintf_r+0xd0>
   2ff9a:	6874      	ldr	r4, [r6, #4]
   2ff9c:	89a3      	ldrh	r3, [r4, #12]
   2ff9e:	0718      	lsls	r0, r3, #28
   2ffa0:	d55e      	bpl.n	30060 <_vfiprintf_r+0xe4>
   2ffa2:	6923      	ldr	r3, [r4, #16]
   2ffa4:	2b00      	cmp	r3, #0
   2ffa6:	d05b      	beq.n	30060 <_vfiprintf_r+0xe4>
   2ffa8:	2300      	movs	r3, #0
   2ffaa:	f04f 0b01 	mov.w	fp, #1
   2ffae:	9503      	str	r5, [sp, #12]
   2ffb0:	9309      	str	r3, [sp, #36]	; 0x24
   2ffb2:	2320      	movs	r3, #32
   2ffb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2ffb8:	2330      	movs	r3, #48	; 0x30
   2ffba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2ffbe:	46b8      	mov	r8, r7
   2ffc0:	4645      	mov	r5, r8
   2ffc2:	f815 3b01 	ldrb.w	r3, [r5], #1
   2ffc6:	b10b      	cbz	r3, 2ffcc <_vfiprintf_r+0x50>
   2ffc8:	2b25      	cmp	r3, #37	; 0x25
   2ffca:	d154      	bne.n	30076 <_vfiprintf_r+0xfa>
   2ffcc:	ebb8 0a07 	subs.w	sl, r8, r7
   2ffd0:	d00b      	beq.n	2ffea <_vfiprintf_r+0x6e>
   2ffd2:	4653      	mov	r3, sl
   2ffd4:	463a      	mov	r2, r7
   2ffd6:	4621      	mov	r1, r4
   2ffd8:	4630      	mov	r0, r6
   2ffda:	f002 fcae 	bl	3293a <__sfputs_r>
   2ffde:	3001      	adds	r0, #1
   2ffe0:	f000 80c2 	beq.w	30168 <_vfiprintf_r+0x1ec>
   2ffe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ffe6:	4453      	add	r3, sl
   2ffe8:	9309      	str	r3, [sp, #36]	; 0x24
   2ffea:	f898 3000 	ldrb.w	r3, [r8]
   2ffee:	2b00      	cmp	r3, #0
   2fff0:	f000 80ba 	beq.w	30168 <_vfiprintf_r+0x1ec>
   2fff4:	2300      	movs	r3, #0
   2fff6:	f04f 32ff 	mov.w	r2, #4294967295
   2fffa:	9304      	str	r3, [sp, #16]
   2fffc:	9307      	str	r3, [sp, #28]
   2fffe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   30002:	931a      	str	r3, [sp, #104]	; 0x68
   30004:	e9cd 2305 	strd	r2, r3, [sp, #20]
   30008:	46a8      	mov	r8, r5
   3000a:	2205      	movs	r2, #5
   3000c:	485f      	ldr	r0, [pc, #380]	; (3018c <_vfiprintf_r+0x210>)
   3000e:	f818 1b01 	ldrb.w	r1, [r8], #1
   30012:	f002 fc5a 	bl	328ca <memchr>
   30016:	9b04      	ldr	r3, [sp, #16]
   30018:	bb78      	cbnz	r0, 3007a <_vfiprintf_r+0xfe>
   3001a:	06d9      	lsls	r1, r3, #27
   3001c:	bf44      	itt	mi
   3001e:	2220      	movmi	r2, #32
   30020:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   30024:	071a      	lsls	r2, r3, #28
   30026:	bf44      	itt	mi
   30028:	222b      	movmi	r2, #43	; 0x2b
   3002a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3002e:	782a      	ldrb	r2, [r5, #0]
   30030:	2a2a      	cmp	r2, #42	; 0x2a
   30032:	d02a      	beq.n	3008a <_vfiprintf_r+0x10e>
   30034:	46a8      	mov	r8, r5
   30036:	9a07      	ldr	r2, [sp, #28]
   30038:	2000      	movs	r0, #0
   3003a:	250a      	movs	r5, #10
   3003c:	4641      	mov	r1, r8
   3003e:	f811 3b01 	ldrb.w	r3, [r1], #1
   30042:	3b30      	subs	r3, #48	; 0x30
   30044:	2b09      	cmp	r3, #9
   30046:	d969      	bls.n	3011c <_vfiprintf_r+0x1a0>
   30048:	b360      	cbz	r0, 300a4 <_vfiprintf_r+0x128>
   3004a:	e024      	b.n	30096 <_vfiprintf_r+0x11a>
   3004c:	4b50      	ldr	r3, [pc, #320]	; (30190 <_vfiprintf_r+0x214>)
   3004e:	429c      	cmp	r4, r3
   30050:	d101      	bne.n	30056 <_vfiprintf_r+0xda>
   30052:	68b4      	ldr	r4, [r6, #8]
   30054:	e7a2      	b.n	2ff9c <_vfiprintf_r+0x20>
   30056:	4b4f      	ldr	r3, [pc, #316]	; (30194 <_vfiprintf_r+0x218>)
   30058:	429c      	cmp	r4, r3
   3005a:	bf08      	it	eq
   3005c:	68f4      	ldreq	r4, [r6, #12]
   3005e:	e79d      	b.n	2ff9c <_vfiprintf_r+0x20>
   30060:	4621      	mov	r1, r4
   30062:	4630      	mov	r0, r6
   30064:	f000 fc8e 	bl	30984 <__swsetup_r>
   30068:	2800      	cmp	r0, #0
   3006a:	d09d      	beq.n	2ffa8 <_vfiprintf_r+0x2c>
   3006c:	f04f 30ff 	mov.w	r0, #4294967295
   30070:	b01d      	add	sp, #116	; 0x74
   30072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30076:	46a8      	mov	r8, r5
   30078:	e7a2      	b.n	2ffc0 <_vfiprintf_r+0x44>
   3007a:	4a44      	ldr	r2, [pc, #272]	; (3018c <_vfiprintf_r+0x210>)
   3007c:	4645      	mov	r5, r8
   3007e:	1a80      	subs	r0, r0, r2
   30080:	fa0b f000 	lsl.w	r0, fp, r0
   30084:	4318      	orrs	r0, r3
   30086:	9004      	str	r0, [sp, #16]
   30088:	e7be      	b.n	30008 <_vfiprintf_r+0x8c>
   3008a:	9a03      	ldr	r2, [sp, #12]
   3008c:	1d11      	adds	r1, r2, #4
   3008e:	6812      	ldr	r2, [r2, #0]
   30090:	2a00      	cmp	r2, #0
   30092:	9103      	str	r1, [sp, #12]
   30094:	db01      	blt.n	3009a <_vfiprintf_r+0x11e>
   30096:	9207      	str	r2, [sp, #28]
   30098:	e004      	b.n	300a4 <_vfiprintf_r+0x128>
   3009a:	4252      	negs	r2, r2
   3009c:	f043 0302 	orr.w	r3, r3, #2
   300a0:	9207      	str	r2, [sp, #28]
   300a2:	9304      	str	r3, [sp, #16]
   300a4:	f898 3000 	ldrb.w	r3, [r8]
   300a8:	2b2e      	cmp	r3, #46	; 0x2e
   300aa:	d10e      	bne.n	300ca <_vfiprintf_r+0x14e>
   300ac:	f898 3001 	ldrb.w	r3, [r8, #1]
   300b0:	2b2a      	cmp	r3, #42	; 0x2a
   300b2:	d138      	bne.n	30126 <_vfiprintf_r+0x1aa>
   300b4:	9b03      	ldr	r3, [sp, #12]
   300b6:	f108 0802 	add.w	r8, r8, #2
   300ba:	1d1a      	adds	r2, r3, #4
   300bc:	681b      	ldr	r3, [r3, #0]
   300be:	2b00      	cmp	r3, #0
   300c0:	9203      	str	r2, [sp, #12]
   300c2:	bfb8      	it	lt
   300c4:	f04f 33ff 	movlt.w	r3, #4294967295
   300c8:	9305      	str	r3, [sp, #20]
   300ca:	4d33      	ldr	r5, [pc, #204]	; (30198 <_vfiprintf_r+0x21c>)
   300cc:	2203      	movs	r2, #3
   300ce:	f898 1000 	ldrb.w	r1, [r8]
   300d2:	4628      	mov	r0, r5
   300d4:	f002 fbf9 	bl	328ca <memchr>
   300d8:	b140      	cbz	r0, 300ec <_vfiprintf_r+0x170>
   300da:	2340      	movs	r3, #64	; 0x40
   300dc:	1b40      	subs	r0, r0, r5
   300de:	f108 0801 	add.w	r8, r8, #1
   300e2:	fa03 f000 	lsl.w	r0, r3, r0
   300e6:	9b04      	ldr	r3, [sp, #16]
   300e8:	4303      	orrs	r3, r0
   300ea:	9304      	str	r3, [sp, #16]
   300ec:	f898 1000 	ldrb.w	r1, [r8]
   300f0:	2206      	movs	r2, #6
   300f2:	482a      	ldr	r0, [pc, #168]	; (3019c <_vfiprintf_r+0x220>)
   300f4:	f108 0701 	add.w	r7, r8, #1
   300f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   300fc:	f002 fbe5 	bl	328ca <memchr>
   30100:	2800      	cmp	r0, #0
   30102:	d037      	beq.n	30174 <_vfiprintf_r+0x1f8>
   30104:	4b26      	ldr	r3, [pc, #152]	; (301a0 <_vfiprintf_r+0x224>)
   30106:	bb1b      	cbnz	r3, 30150 <_vfiprintf_r+0x1d4>
   30108:	9b03      	ldr	r3, [sp, #12]
   3010a:	3307      	adds	r3, #7
   3010c:	f023 0307 	bic.w	r3, r3, #7
   30110:	3308      	adds	r3, #8
   30112:	9303      	str	r3, [sp, #12]
   30114:	9b09      	ldr	r3, [sp, #36]	; 0x24
   30116:	444b      	add	r3, r9
   30118:	9309      	str	r3, [sp, #36]	; 0x24
   3011a:	e750      	b.n	2ffbe <_vfiprintf_r+0x42>
   3011c:	fb05 3202 	mla	r2, r5, r2, r3
   30120:	2001      	movs	r0, #1
   30122:	4688      	mov	r8, r1
   30124:	e78a      	b.n	3003c <_vfiprintf_r+0xc0>
   30126:	2300      	movs	r3, #0
   30128:	f108 0801 	add.w	r8, r8, #1
   3012c:	250a      	movs	r5, #10
   3012e:	4619      	mov	r1, r3
   30130:	9305      	str	r3, [sp, #20]
   30132:	4640      	mov	r0, r8
   30134:	f810 2b01 	ldrb.w	r2, [r0], #1
   30138:	3a30      	subs	r2, #48	; 0x30
   3013a:	2a09      	cmp	r2, #9
   3013c:	d903      	bls.n	30146 <_vfiprintf_r+0x1ca>
   3013e:	2b00      	cmp	r3, #0
   30140:	d0c3      	beq.n	300ca <_vfiprintf_r+0x14e>
   30142:	9105      	str	r1, [sp, #20]
   30144:	e7c1      	b.n	300ca <_vfiprintf_r+0x14e>
   30146:	fb05 2101 	mla	r1, r5, r1, r2
   3014a:	2301      	movs	r3, #1
   3014c:	4680      	mov	r8, r0
   3014e:	e7f0      	b.n	30132 <_vfiprintf_r+0x1b6>
   30150:	ab03      	add	r3, sp, #12
   30152:	4622      	mov	r2, r4
   30154:	a904      	add	r1, sp, #16
   30156:	4630      	mov	r0, r6
   30158:	9300      	str	r3, [sp, #0]
   3015a:	4b12      	ldr	r3, [pc, #72]	; (301a4 <_vfiprintf_r+0x228>)
   3015c:	f000 f824 	bl	301a8 <_printf_float>
   30160:	f1b0 3fff 	cmp.w	r0, #4294967295
   30164:	4681      	mov	r9, r0
   30166:	d1d5      	bne.n	30114 <_vfiprintf_r+0x198>
   30168:	89a3      	ldrh	r3, [r4, #12]
   3016a:	065b      	lsls	r3, r3, #25
   3016c:	f53f af7e 	bmi.w	3006c <_vfiprintf_r+0xf0>
   30170:	9809      	ldr	r0, [sp, #36]	; 0x24
   30172:	e77d      	b.n	30070 <_vfiprintf_r+0xf4>
   30174:	ab03      	add	r3, sp, #12
   30176:	4622      	mov	r2, r4
   30178:	a904      	add	r1, sp, #16
   3017a:	4630      	mov	r0, r6
   3017c:	9300      	str	r3, [sp, #0]
   3017e:	4b09      	ldr	r3, [pc, #36]	; (301a4 <_vfiprintf_r+0x228>)
   30180:	f000 fa52 	bl	30628 <_printf_i>
   30184:	e7ec      	b.n	30160 <_vfiprintf_r+0x1e4>
   30186:	bf00      	nop
   30188:	00034ed0 	.word	0x00034ed0
   3018c:	00036db7 	.word	0x00036db7
   30190:	00034ef0 	.word	0x00034ef0
   30194:	00034eb0 	.word	0x00034eb0
   30198:	00036dbd 	.word	0x00036dbd
   3019c:	00036dc1 	.word	0x00036dc1
   301a0:	000301a9 	.word	0x000301a9
   301a4:	0003293b 	.word	0x0003293b

000301a8 <_printf_float>:
   301a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   301ac:	b08d      	sub	sp, #52	; 0x34
   301ae:	460c      	mov	r4, r1
   301b0:	4616      	mov	r6, r2
   301b2:	461f      	mov	r7, r3
   301b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   301b8:	4605      	mov	r5, r0
   301ba:	f000 fd95 	bl	30ce8 <_localeconv_r>
   301be:	6803      	ldr	r3, [r0, #0]
   301c0:	4618      	mov	r0, r3
   301c2:	9304      	str	r3, [sp, #16]
   301c4:	f7e9 fe94 	bl	19ef0 <strlen>
   301c8:	2300      	movs	r3, #0
   301ca:	9005      	str	r0, [sp, #20]
   301cc:	930a      	str	r3, [sp, #40]	; 0x28
   301ce:	f8d8 3000 	ldr.w	r3, [r8]
   301d2:	f894 a018 	ldrb.w	sl, [r4, #24]
   301d6:	3307      	adds	r3, #7
   301d8:	f8d4 b000 	ldr.w	fp, [r4]
   301dc:	f023 0307 	bic.w	r3, r3, #7
   301e0:	f103 0208 	add.w	r2, r3, #8
   301e4:	f8c8 2000 	str.w	r2, [r8]
   301e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   301ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   301f0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
   301f4:	f04f 32ff 	mov.w	r2, #4294967295
   301f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   301fc:	f8cd 8018 	str.w	r8, [sp, #24]
   30200:	9307      	str	r3, [sp, #28]
   30202:	4ba7      	ldr	r3, [pc, #668]	; (304a0 <_printf_float+0x2f8>)
   30204:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   30208:	f7e9 fe2a 	bl	19e60 <__aeabi_dcmpun>
   3020c:	bb70      	cbnz	r0, 3026c <_printf_float+0xc4>
   3020e:	f04f 32ff 	mov.w	r2, #4294967295
   30212:	4ba3      	ldr	r3, [pc, #652]	; (304a0 <_printf_float+0x2f8>)
   30214:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   30218:	f7e9 fe04 	bl	19e24 <__aeabi_dcmple>
   3021c:	bb30      	cbnz	r0, 3026c <_printf_float+0xc4>
   3021e:	2200      	movs	r2, #0
   30220:	2300      	movs	r3, #0
   30222:	4640      	mov	r0, r8
   30224:	4649      	mov	r1, r9
   30226:	f7e9 fdf3 	bl	19e10 <__aeabi_dcmplt>
   3022a:	b110      	cbz	r0, 30232 <_printf_float+0x8a>
   3022c:	232d      	movs	r3, #45	; 0x2d
   3022e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   30232:	4a9c      	ldr	r2, [pc, #624]	; (304a4 <_printf_float+0x2fc>)
   30234:	4b9c      	ldr	r3, [pc, #624]	; (304a8 <_printf_float+0x300>)
   30236:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   3023a:	bf8c      	ite	hi
   3023c:	4690      	movhi	r8, r2
   3023e:	4698      	movls	r8, r3
   30240:	f04f 0900 	mov.w	r9, #0
   30244:	2303      	movs	r3, #3
   30246:	f02b 0204 	bic.w	r2, fp, #4
   3024a:	6123      	str	r3, [r4, #16]
   3024c:	6022      	str	r2, [r4, #0]
   3024e:	9700      	str	r7, [sp, #0]
   30250:	4633      	mov	r3, r6
   30252:	aa0b      	add	r2, sp, #44	; 0x2c
   30254:	4621      	mov	r1, r4
   30256:	4628      	mov	r0, r5
   30258:	f002 fc15 	bl	32a86 <_printf_common>
   3025c:	3001      	adds	r0, #1
   3025e:	f040 808d 	bne.w	3037c <_printf_float+0x1d4>
   30262:	f04f 30ff 	mov.w	r0, #4294967295
   30266:	b00d      	add	sp, #52	; 0x34
   30268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3026c:	4642      	mov	r2, r8
   3026e:	464b      	mov	r3, r9
   30270:	4640      	mov	r0, r8
   30272:	4649      	mov	r1, r9
   30274:	f7e9 fdf4 	bl	19e60 <__aeabi_dcmpun>
   30278:	b110      	cbz	r0, 30280 <_printf_float+0xd8>
   3027a:	4a8c      	ldr	r2, [pc, #560]	; (304ac <_printf_float+0x304>)
   3027c:	4b8c      	ldr	r3, [pc, #560]	; (304b0 <_printf_float+0x308>)
   3027e:	e7da      	b.n	30236 <_printf_float+0x8e>
   30280:	6861      	ldr	r1, [r4, #4]
   30282:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   30286:	a80a      	add	r0, sp, #40	; 0x28
   30288:	1c4b      	adds	r3, r1, #1
   3028a:	d13e      	bne.n	3030a <_printf_float+0x162>
   3028c:	2306      	movs	r3, #6
   3028e:	6063      	str	r3, [r4, #4]
   30290:	2300      	movs	r3, #0
   30292:	6022      	str	r2, [r4, #0]
   30294:	f8cd a004 	str.w	sl, [sp, #4]
   30298:	6861      	ldr	r1, [r4, #4]
   3029a:	e9cd 0302 	strd	r0, r3, [sp, #8]
   3029e:	ab09      	add	r3, sp, #36	; 0x24
   302a0:	4628      	mov	r0, r5
   302a2:	9300      	str	r3, [sp, #0]
   302a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   302a8:	ec49 8b10 	vmov	d0, r8, r9
   302ac:	f002 fb57 	bl	3295e <__cvt>
   302b0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
   302b4:	4680      	mov	r8, r0
   302b6:	2b47      	cmp	r3, #71	; 0x47
   302b8:	d109      	bne.n	302ce <_printf_float+0x126>
   302ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   302bc:	1cd8      	adds	r0, r3, #3
   302be:	db02      	blt.n	302c6 <_printf_float+0x11e>
   302c0:	6862      	ldr	r2, [r4, #4]
   302c2:	4293      	cmp	r3, r2
   302c4:	dd47      	ble.n	30356 <_printf_float+0x1ae>
   302c6:	f1aa 0a02 	sub.w	sl, sl, #2
   302ca:	fa5f fa8a 	uxtb.w	sl, sl
   302ce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   302d2:	9909      	ldr	r1, [sp, #36]	; 0x24
   302d4:	d824      	bhi.n	30320 <_printf_float+0x178>
   302d6:	3901      	subs	r1, #1
   302d8:	4652      	mov	r2, sl
   302da:	f104 0050 	add.w	r0, r4, #80	; 0x50
   302de:	9109      	str	r1, [sp, #36]	; 0x24
   302e0:	f002 fb9e 	bl	32a20 <__exponent>
   302e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   302e6:	4681      	mov	r9, r0
   302e8:	1813      	adds	r3, r2, r0
   302ea:	2a01      	cmp	r2, #1
   302ec:	6123      	str	r3, [r4, #16]
   302ee:	dc02      	bgt.n	302f6 <_printf_float+0x14e>
   302f0:	6822      	ldr	r2, [r4, #0]
   302f2:	07d1      	lsls	r1, r2, #31
   302f4:	d501      	bpl.n	302fa <_printf_float+0x152>
   302f6:	3301      	adds	r3, #1
   302f8:	6123      	str	r3, [r4, #16]
   302fa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   302fe:	2b00      	cmp	r3, #0
   30300:	d0a5      	beq.n	3024e <_printf_float+0xa6>
   30302:	232d      	movs	r3, #45	; 0x2d
   30304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   30308:	e7a1      	b.n	3024e <_printf_float+0xa6>
   3030a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   3030e:	f000 8177 	beq.w	30600 <_printf_float+0x458>
   30312:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   30316:	d1bb      	bne.n	30290 <_printf_float+0xe8>
   30318:	2900      	cmp	r1, #0
   3031a:	d1b9      	bne.n	30290 <_printf_float+0xe8>
   3031c:	2301      	movs	r3, #1
   3031e:	e7b6      	b.n	3028e <_printf_float+0xe6>
   30320:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   30324:	d119      	bne.n	3035a <_printf_float+0x1b2>
   30326:	2900      	cmp	r1, #0
   30328:	6863      	ldr	r3, [r4, #4]
   3032a:	dd0c      	ble.n	30346 <_printf_float+0x19e>
   3032c:	6121      	str	r1, [r4, #16]
   3032e:	b913      	cbnz	r3, 30336 <_printf_float+0x18e>
   30330:	6822      	ldr	r2, [r4, #0]
   30332:	07d2      	lsls	r2, r2, #31
   30334:	d502      	bpl.n	3033c <_printf_float+0x194>
   30336:	3301      	adds	r3, #1
   30338:	440b      	add	r3, r1
   3033a:	6123      	str	r3, [r4, #16]
   3033c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3033e:	f04f 0900 	mov.w	r9, #0
   30342:	65a3      	str	r3, [r4, #88]	; 0x58
   30344:	e7d9      	b.n	302fa <_printf_float+0x152>
   30346:	b913      	cbnz	r3, 3034e <_printf_float+0x1a6>
   30348:	6822      	ldr	r2, [r4, #0]
   3034a:	07d0      	lsls	r0, r2, #31
   3034c:	d501      	bpl.n	30352 <_printf_float+0x1aa>
   3034e:	3302      	adds	r3, #2
   30350:	e7f3      	b.n	3033a <_printf_float+0x192>
   30352:	2301      	movs	r3, #1
   30354:	e7f1      	b.n	3033a <_printf_float+0x192>
   30356:	f04f 0a67 	mov.w	sl, #103	; 0x67
   3035a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   3035e:	4293      	cmp	r3, r2
   30360:	db05      	blt.n	3036e <_printf_float+0x1c6>
   30362:	6822      	ldr	r2, [r4, #0]
   30364:	6123      	str	r3, [r4, #16]
   30366:	07d1      	lsls	r1, r2, #31
   30368:	d5e8      	bpl.n	3033c <_printf_float+0x194>
   3036a:	3301      	adds	r3, #1
   3036c:	e7e5      	b.n	3033a <_printf_float+0x192>
   3036e:	2b00      	cmp	r3, #0
   30370:	bfd4      	ite	le
   30372:	f1c3 0302 	rsble	r3, r3, #2
   30376:	2301      	movgt	r3, #1
   30378:	4413      	add	r3, r2
   3037a:	e7de      	b.n	3033a <_printf_float+0x192>
   3037c:	6823      	ldr	r3, [r4, #0]
   3037e:	055a      	lsls	r2, r3, #21
   30380:	d407      	bmi.n	30392 <_printf_float+0x1ea>
   30382:	6923      	ldr	r3, [r4, #16]
   30384:	4642      	mov	r2, r8
   30386:	4631      	mov	r1, r6
   30388:	4628      	mov	r0, r5
   3038a:	47b8      	blx	r7
   3038c:	3001      	adds	r0, #1
   3038e:	d12b      	bne.n	303e8 <_printf_float+0x240>
   30390:	e767      	b.n	30262 <_printf_float+0xba>
   30392:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   30396:	f240 80dc 	bls.w	30552 <_printf_float+0x3aa>
   3039a:	2200      	movs	r2, #0
   3039c:	2300      	movs	r3, #0
   3039e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   303a2:	f7e9 fd2b 	bl	19dfc <__aeabi_dcmpeq>
   303a6:	2800      	cmp	r0, #0
   303a8:	d033      	beq.n	30412 <_printf_float+0x26a>
   303aa:	2301      	movs	r3, #1
   303ac:	4a41      	ldr	r2, [pc, #260]	; (304b4 <_printf_float+0x30c>)
   303ae:	4631      	mov	r1, r6
   303b0:	4628      	mov	r0, r5
   303b2:	47b8      	blx	r7
   303b4:	3001      	adds	r0, #1
   303b6:	f43f af54 	beq.w	30262 <_printf_float+0xba>
   303ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   303be:	429a      	cmp	r2, r3
   303c0:	db02      	blt.n	303c8 <_printf_float+0x220>
   303c2:	6823      	ldr	r3, [r4, #0]
   303c4:	07d8      	lsls	r0, r3, #31
   303c6:	d50f      	bpl.n	303e8 <_printf_float+0x240>
   303c8:	4631      	mov	r1, r6
   303ca:	4628      	mov	r0, r5
   303cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   303d0:	47b8      	blx	r7
   303d2:	3001      	adds	r0, #1
   303d4:	f43f af45 	beq.w	30262 <_printf_float+0xba>
   303d8:	f04f 0800 	mov.w	r8, #0
   303dc:	f104 091a 	add.w	r9, r4, #26
   303e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   303e2:	3b01      	subs	r3, #1
   303e4:	4543      	cmp	r3, r8
   303e6:	dc09      	bgt.n	303fc <_printf_float+0x254>
   303e8:	6823      	ldr	r3, [r4, #0]
   303ea:	079b      	lsls	r3, r3, #30
   303ec:	f100 8103 	bmi.w	305f6 <_printf_float+0x44e>
   303f0:	68e0      	ldr	r0, [r4, #12]
   303f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   303f4:	4298      	cmp	r0, r3
   303f6:	bfb8      	it	lt
   303f8:	4618      	movlt	r0, r3
   303fa:	e734      	b.n	30266 <_printf_float+0xbe>
   303fc:	2301      	movs	r3, #1
   303fe:	464a      	mov	r2, r9
   30400:	4631      	mov	r1, r6
   30402:	4628      	mov	r0, r5
   30404:	47b8      	blx	r7
   30406:	3001      	adds	r0, #1
   30408:	f43f af2b 	beq.w	30262 <_printf_float+0xba>
   3040c:	f108 0801 	add.w	r8, r8, #1
   30410:	e7e6      	b.n	303e0 <_printf_float+0x238>
   30412:	9b09      	ldr	r3, [sp, #36]	; 0x24
   30414:	2b00      	cmp	r3, #0
   30416:	dc2b      	bgt.n	30470 <_printf_float+0x2c8>
   30418:	2301      	movs	r3, #1
   3041a:	4a26      	ldr	r2, [pc, #152]	; (304b4 <_printf_float+0x30c>)
   3041c:	4631      	mov	r1, r6
   3041e:	4628      	mov	r0, r5
   30420:	47b8      	blx	r7
   30422:	3001      	adds	r0, #1
   30424:	f43f af1d 	beq.w	30262 <_printf_float+0xba>
   30428:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3042a:	b923      	cbnz	r3, 30436 <_printf_float+0x28e>
   3042c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3042e:	b913      	cbnz	r3, 30436 <_printf_float+0x28e>
   30430:	6823      	ldr	r3, [r4, #0]
   30432:	07d9      	lsls	r1, r3, #31
   30434:	d5d8      	bpl.n	303e8 <_printf_float+0x240>
   30436:	4631      	mov	r1, r6
   30438:	4628      	mov	r0, r5
   3043a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   3043e:	47b8      	blx	r7
   30440:	3001      	adds	r0, #1
   30442:	f43f af0e 	beq.w	30262 <_printf_float+0xba>
   30446:	f04f 0900 	mov.w	r9, #0
   3044a:	f104 0a1a 	add.w	sl, r4, #26
   3044e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   30450:	425b      	negs	r3, r3
   30452:	454b      	cmp	r3, r9
   30454:	dc01      	bgt.n	3045a <_printf_float+0x2b2>
   30456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30458:	e794      	b.n	30384 <_printf_float+0x1dc>
   3045a:	2301      	movs	r3, #1
   3045c:	4652      	mov	r2, sl
   3045e:	4631      	mov	r1, r6
   30460:	4628      	mov	r0, r5
   30462:	47b8      	blx	r7
   30464:	3001      	adds	r0, #1
   30466:	f43f aefc 	beq.w	30262 <_printf_float+0xba>
   3046a:	f109 0901 	add.w	r9, r9, #1
   3046e:	e7ee      	b.n	3044e <_printf_float+0x2a6>
   30470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   30472:	6da3      	ldr	r3, [r4, #88]	; 0x58
   30474:	429a      	cmp	r2, r3
   30476:	bfa8      	it	ge
   30478:	461a      	movge	r2, r3
   3047a:	2a00      	cmp	r2, #0
   3047c:	4691      	mov	r9, r2
   3047e:	dd07      	ble.n	30490 <_printf_float+0x2e8>
   30480:	4613      	mov	r3, r2
   30482:	4631      	mov	r1, r6
   30484:	4642      	mov	r2, r8
   30486:	4628      	mov	r0, r5
   30488:	47b8      	blx	r7
   3048a:	3001      	adds	r0, #1
   3048c:	f43f aee9 	beq.w	30262 <_printf_float+0xba>
   30490:	f104 031a 	add.w	r3, r4, #26
   30494:	f04f 0b00 	mov.w	fp, #0
   30498:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3049c:	9306      	str	r3, [sp, #24]
   3049e:	e015      	b.n	304cc <_printf_float+0x324>
   304a0:	7fefffff 	.word	0x7fefffff
   304a4:	00035202 	.word	0x00035202
   304a8:	00036dc8 	.word	0x00036dc8
   304ac:	00036dd0 	.word	0x00036dd0
   304b0:	00036dcc 	.word	0x00036dcc
   304b4:	0003686f 	.word	0x0003686f
   304b8:	2301      	movs	r3, #1
   304ba:	9a06      	ldr	r2, [sp, #24]
   304bc:	4631      	mov	r1, r6
   304be:	4628      	mov	r0, r5
   304c0:	47b8      	blx	r7
   304c2:	3001      	adds	r0, #1
   304c4:	f43f aecd 	beq.w	30262 <_printf_float+0xba>
   304c8:	f10b 0b01 	add.w	fp, fp, #1
   304cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   304d0:	ebaa 0309 	sub.w	r3, sl, r9
   304d4:	455b      	cmp	r3, fp
   304d6:	dcef      	bgt.n	304b8 <_printf_float+0x310>
   304d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   304dc:	44d0      	add	r8, sl
   304de:	429a      	cmp	r2, r3
   304e0:	db15      	blt.n	3050e <_printf_float+0x366>
   304e2:	6823      	ldr	r3, [r4, #0]
   304e4:	07da      	lsls	r2, r3, #31
   304e6:	d412      	bmi.n	3050e <_printf_float+0x366>
   304e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   304ea:	9909      	ldr	r1, [sp, #36]	; 0x24
   304ec:	eba3 020a 	sub.w	r2, r3, sl
   304f0:	eba3 0a01 	sub.w	sl, r3, r1
   304f4:	4592      	cmp	sl, r2
   304f6:	bfa8      	it	ge
   304f8:	4692      	movge	sl, r2
   304fa:	f1ba 0f00 	cmp.w	sl, #0
   304fe:	dc0e      	bgt.n	3051e <_printf_float+0x376>
   30500:	f04f 0800 	mov.w	r8, #0
   30504:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   30508:	f104 091a 	add.w	r9, r4, #26
   3050c:	e019      	b.n	30542 <_printf_float+0x39a>
   3050e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   30512:	4631      	mov	r1, r6
   30514:	4628      	mov	r0, r5
   30516:	47b8      	blx	r7
   30518:	3001      	adds	r0, #1
   3051a:	d1e5      	bne.n	304e8 <_printf_float+0x340>
   3051c:	e6a1      	b.n	30262 <_printf_float+0xba>
   3051e:	4653      	mov	r3, sl
   30520:	4642      	mov	r2, r8
   30522:	4631      	mov	r1, r6
   30524:	4628      	mov	r0, r5
   30526:	47b8      	blx	r7
   30528:	3001      	adds	r0, #1
   3052a:	d1e9      	bne.n	30500 <_printf_float+0x358>
   3052c:	e699      	b.n	30262 <_printf_float+0xba>
   3052e:	2301      	movs	r3, #1
   30530:	464a      	mov	r2, r9
   30532:	4631      	mov	r1, r6
   30534:	4628      	mov	r0, r5
   30536:	47b8      	blx	r7
   30538:	3001      	adds	r0, #1
   3053a:	f43f ae92 	beq.w	30262 <_printf_float+0xba>
   3053e:	f108 0801 	add.w	r8, r8, #1
   30542:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   30546:	1a9b      	subs	r3, r3, r2
   30548:	eba3 030a 	sub.w	r3, r3, sl
   3054c:	4543      	cmp	r3, r8
   3054e:	dcee      	bgt.n	3052e <_printf_float+0x386>
   30550:	e74a      	b.n	303e8 <_printf_float+0x240>
   30552:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   30554:	2a01      	cmp	r2, #1
   30556:	dc01      	bgt.n	3055c <_printf_float+0x3b4>
   30558:	07db      	lsls	r3, r3, #31
   3055a:	d53a      	bpl.n	305d2 <_printf_float+0x42a>
   3055c:	2301      	movs	r3, #1
   3055e:	4642      	mov	r2, r8
   30560:	4631      	mov	r1, r6
   30562:	4628      	mov	r0, r5
   30564:	47b8      	blx	r7
   30566:	3001      	adds	r0, #1
   30568:	f43f ae7b 	beq.w	30262 <_printf_float+0xba>
   3056c:	4631      	mov	r1, r6
   3056e:	4628      	mov	r0, r5
   30570:	f108 0801 	add.w	r8, r8, #1
   30574:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   30578:	47b8      	blx	r7
   3057a:	3001      	adds	r0, #1
   3057c:	f43f ae71 	beq.w	30262 <_printf_float+0xba>
   30580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30582:	2200      	movs	r2, #0
   30584:	f103 3aff 	add.w	sl, r3, #4294967295
   30588:	2300      	movs	r3, #0
   3058a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3058e:	f7e9 fc35 	bl	19dfc <__aeabi_dcmpeq>
   30592:	b9c8      	cbnz	r0, 305c8 <_printf_float+0x420>
   30594:	4653      	mov	r3, sl
   30596:	4642      	mov	r2, r8
   30598:	4631      	mov	r1, r6
   3059a:	4628      	mov	r0, r5
   3059c:	47b8      	blx	r7
   3059e:	3001      	adds	r0, #1
   305a0:	d10e      	bne.n	305c0 <_printf_float+0x418>
   305a2:	e65e      	b.n	30262 <_printf_float+0xba>
   305a4:	2301      	movs	r3, #1
   305a6:	4652      	mov	r2, sl
   305a8:	4631      	mov	r1, r6
   305aa:	4628      	mov	r0, r5
   305ac:	47b8      	blx	r7
   305ae:	3001      	adds	r0, #1
   305b0:	f43f ae57 	beq.w	30262 <_printf_float+0xba>
   305b4:	f108 0801 	add.w	r8, r8, #1
   305b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   305ba:	3b01      	subs	r3, #1
   305bc:	4543      	cmp	r3, r8
   305be:	dcf1      	bgt.n	305a4 <_printf_float+0x3fc>
   305c0:	464b      	mov	r3, r9
   305c2:	f104 0250 	add.w	r2, r4, #80	; 0x50
   305c6:	e6de      	b.n	30386 <_printf_float+0x1de>
   305c8:	f04f 0800 	mov.w	r8, #0
   305cc:	f104 0a1a 	add.w	sl, r4, #26
   305d0:	e7f2      	b.n	305b8 <_printf_float+0x410>
   305d2:	2301      	movs	r3, #1
   305d4:	e7df      	b.n	30596 <_printf_float+0x3ee>
   305d6:	2301      	movs	r3, #1
   305d8:	464a      	mov	r2, r9
   305da:	4631      	mov	r1, r6
   305dc:	4628      	mov	r0, r5
   305de:	47b8      	blx	r7
   305e0:	3001      	adds	r0, #1
   305e2:	f43f ae3e 	beq.w	30262 <_printf_float+0xba>
   305e6:	f108 0801 	add.w	r8, r8, #1
   305ea:	68e3      	ldr	r3, [r4, #12]
   305ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   305ee:	1a9b      	subs	r3, r3, r2
   305f0:	4543      	cmp	r3, r8
   305f2:	dcf0      	bgt.n	305d6 <_printf_float+0x42e>
   305f4:	e6fc      	b.n	303f0 <_printf_float+0x248>
   305f6:	f04f 0800 	mov.w	r8, #0
   305fa:	f104 0919 	add.w	r9, r4, #25
   305fe:	e7f4      	b.n	305ea <_printf_float+0x442>
   30600:	2900      	cmp	r1, #0
   30602:	f43f ae8b 	beq.w	3031c <_printf_float+0x174>
   30606:	2300      	movs	r3, #0
   30608:	6022      	str	r2, [r4, #0]
   3060a:	f8cd a004 	str.w	sl, [sp, #4]
   3060e:	e9cd 0302 	strd	r0, r3, [sp, #8]
   30612:	ab09      	add	r3, sp, #36	; 0x24
   30614:	4628      	mov	r0, r5
   30616:	9300      	str	r3, [sp, #0]
   30618:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   3061c:	ec49 8b10 	vmov	d0, r8, r9
   30620:	f002 f99d 	bl	3295e <__cvt>
   30624:	4680      	mov	r8, r0
   30626:	e648      	b.n	302ba <_printf_float+0x112>

00030628 <_printf_i>:
   30628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3062c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
   30630:	460c      	mov	r4, r1
   30632:	7e09      	ldrb	r1, [r1, #24]
   30634:	b085      	sub	sp, #20
   30636:	4617      	mov	r7, r2
   30638:	4606      	mov	r6, r0
   3063a:	296e      	cmp	r1, #110	; 0x6e
   3063c:	4698      	mov	r8, r3
   3063e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   30640:	f000 80b3 	beq.w	307aa <_printf_i+0x182>
   30644:	d822      	bhi.n	3068c <_printf_i+0x64>
   30646:	2963      	cmp	r1, #99	; 0x63
   30648:	d036      	beq.n	306b8 <_printf_i+0x90>
   3064a:	d80a      	bhi.n	30662 <_printf_i+0x3a>
   3064c:	2900      	cmp	r1, #0
   3064e:	f000 80b9 	beq.w	307c4 <_printf_i+0x19c>
   30652:	2958      	cmp	r1, #88	; 0x58
   30654:	f000 8083 	beq.w	3075e <_printf_i+0x136>
   30658:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3065c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
   30660:	e032      	b.n	306c8 <_printf_i+0xa0>
   30662:	2964      	cmp	r1, #100	; 0x64
   30664:	d001      	beq.n	3066a <_printf_i+0x42>
   30666:	2969      	cmp	r1, #105	; 0x69
   30668:	d1f6      	bne.n	30658 <_printf_i+0x30>
   3066a:	6820      	ldr	r0, [r4, #0]
   3066c:	6813      	ldr	r3, [r2, #0]
   3066e:	0605      	lsls	r5, r0, #24
   30670:	f103 0104 	add.w	r1, r3, #4
   30674:	d52a      	bpl.n	306cc <_printf_i+0xa4>
   30676:	681b      	ldr	r3, [r3, #0]
   30678:	6011      	str	r1, [r2, #0]
   3067a:	2b00      	cmp	r3, #0
   3067c:	da03      	bge.n	30686 <_printf_i+0x5e>
   3067e:	222d      	movs	r2, #45	; 0x2d
   30680:	425b      	negs	r3, r3
   30682:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
   30686:	486f      	ldr	r0, [pc, #444]	; (30844 <_printf_i+0x21c>)
   30688:	220a      	movs	r2, #10
   3068a:	e039      	b.n	30700 <_printf_i+0xd8>
   3068c:	2973      	cmp	r1, #115	; 0x73
   3068e:	f000 809d 	beq.w	307cc <_printf_i+0x1a4>
   30692:	d808      	bhi.n	306a6 <_printf_i+0x7e>
   30694:	296f      	cmp	r1, #111	; 0x6f
   30696:	d020      	beq.n	306da <_printf_i+0xb2>
   30698:	2970      	cmp	r1, #112	; 0x70
   3069a:	d1dd      	bne.n	30658 <_printf_i+0x30>
   3069c:	6823      	ldr	r3, [r4, #0]
   3069e:	f043 0320 	orr.w	r3, r3, #32
   306a2:	6023      	str	r3, [r4, #0]
   306a4:	e003      	b.n	306ae <_printf_i+0x86>
   306a6:	2975      	cmp	r1, #117	; 0x75
   306a8:	d017      	beq.n	306da <_printf_i+0xb2>
   306aa:	2978      	cmp	r1, #120	; 0x78
   306ac:	d1d4      	bne.n	30658 <_printf_i+0x30>
   306ae:	2378      	movs	r3, #120	; 0x78
   306b0:	4865      	ldr	r0, [pc, #404]	; (30848 <_printf_i+0x220>)
   306b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   306b6:	e055      	b.n	30764 <_printf_i+0x13c>
   306b8:	6813      	ldr	r3, [r2, #0]
   306ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
   306be:	1d19      	adds	r1, r3, #4
   306c0:	681b      	ldr	r3, [r3, #0]
   306c2:	6011      	str	r1, [r2, #0]
   306c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   306c8:	2301      	movs	r3, #1
   306ca:	e08c      	b.n	307e6 <_printf_i+0x1be>
   306cc:	681b      	ldr	r3, [r3, #0]
   306ce:	f010 0f40 	tst.w	r0, #64	; 0x40
   306d2:	6011      	str	r1, [r2, #0]
   306d4:	bf18      	it	ne
   306d6:	b21b      	sxthne	r3, r3
   306d8:	e7cf      	b.n	3067a <_printf_i+0x52>
   306da:	6813      	ldr	r3, [r2, #0]
   306dc:	6825      	ldr	r5, [r4, #0]
   306de:	1d18      	adds	r0, r3, #4
   306e0:	6010      	str	r0, [r2, #0]
   306e2:	0628      	lsls	r0, r5, #24
   306e4:	d501      	bpl.n	306ea <_printf_i+0xc2>
   306e6:	681b      	ldr	r3, [r3, #0]
   306e8:	e002      	b.n	306f0 <_printf_i+0xc8>
   306ea:	0668      	lsls	r0, r5, #25
   306ec:	d5fb      	bpl.n	306e6 <_printf_i+0xbe>
   306ee:	881b      	ldrh	r3, [r3, #0]
   306f0:	296f      	cmp	r1, #111	; 0x6f
   306f2:	4854      	ldr	r0, [pc, #336]	; (30844 <_printf_i+0x21c>)
   306f4:	bf14      	ite	ne
   306f6:	220a      	movne	r2, #10
   306f8:	2208      	moveq	r2, #8
   306fa:	2100      	movs	r1, #0
   306fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   30700:	6865      	ldr	r5, [r4, #4]
   30702:	2d00      	cmp	r5, #0
   30704:	60a5      	str	r5, [r4, #8]
   30706:	f2c0 8095 	blt.w	30834 <_printf_i+0x20c>
   3070a:	6821      	ldr	r1, [r4, #0]
   3070c:	f021 0104 	bic.w	r1, r1, #4
   30710:	6021      	str	r1, [r4, #0]
   30712:	2b00      	cmp	r3, #0
   30714:	d13d      	bne.n	30792 <_printf_i+0x16a>
   30716:	2d00      	cmp	r5, #0
   30718:	f040 808e 	bne.w	30838 <_printf_i+0x210>
   3071c:	4665      	mov	r5, ip
   3071e:	2a08      	cmp	r2, #8
   30720:	d10b      	bne.n	3073a <_printf_i+0x112>
   30722:	6823      	ldr	r3, [r4, #0]
   30724:	07db      	lsls	r3, r3, #31
   30726:	d508      	bpl.n	3073a <_printf_i+0x112>
   30728:	6923      	ldr	r3, [r4, #16]
   3072a:	6862      	ldr	r2, [r4, #4]
   3072c:	429a      	cmp	r2, r3
   3072e:	bfde      	ittt	le
   30730:	2330      	movle	r3, #48	; 0x30
   30732:	f805 3c01 	strble.w	r3, [r5, #-1]
   30736:	f105 35ff 	addle.w	r5, r5, #4294967295
   3073a:	ebac 0305 	sub.w	r3, ip, r5
   3073e:	6123      	str	r3, [r4, #16]
   30740:	f8cd 8000 	str.w	r8, [sp]
   30744:	463b      	mov	r3, r7
   30746:	aa03      	add	r2, sp, #12
   30748:	4621      	mov	r1, r4
   3074a:	4630      	mov	r0, r6
   3074c:	f002 f99b 	bl	32a86 <_printf_common>
   30750:	3001      	adds	r0, #1
   30752:	d14d      	bne.n	307f0 <_printf_i+0x1c8>
   30754:	f04f 30ff 	mov.w	r0, #4294967295
   30758:	b005      	add	sp, #20
   3075a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3075e:	4839      	ldr	r0, [pc, #228]	; (30844 <_printf_i+0x21c>)
   30760:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
   30764:	6813      	ldr	r3, [r2, #0]
   30766:	6821      	ldr	r1, [r4, #0]
   30768:	1d1d      	adds	r5, r3, #4
   3076a:	681b      	ldr	r3, [r3, #0]
   3076c:	6015      	str	r5, [r2, #0]
   3076e:	060a      	lsls	r2, r1, #24
   30770:	d50b      	bpl.n	3078a <_printf_i+0x162>
   30772:	07ca      	lsls	r2, r1, #31
   30774:	bf44      	itt	mi
   30776:	f041 0120 	orrmi.w	r1, r1, #32
   3077a:	6021      	strmi	r1, [r4, #0]
   3077c:	b91b      	cbnz	r3, 30786 <_printf_i+0x15e>
   3077e:	6822      	ldr	r2, [r4, #0]
   30780:	f022 0220 	bic.w	r2, r2, #32
   30784:	6022      	str	r2, [r4, #0]
   30786:	2210      	movs	r2, #16
   30788:	e7b7      	b.n	306fa <_printf_i+0xd2>
   3078a:	064d      	lsls	r5, r1, #25
   3078c:	bf48      	it	mi
   3078e:	b29b      	uxthmi	r3, r3
   30790:	e7ef      	b.n	30772 <_printf_i+0x14a>
   30792:	4665      	mov	r5, ip
   30794:	fbb3 f1f2 	udiv	r1, r3, r2
   30798:	fb02 3311 	mls	r3, r2, r1, r3
   3079c:	5cc3      	ldrb	r3, [r0, r3]
   3079e:	f805 3d01 	strb.w	r3, [r5, #-1]!
   307a2:	460b      	mov	r3, r1
   307a4:	2900      	cmp	r1, #0
   307a6:	d1f5      	bne.n	30794 <_printf_i+0x16c>
   307a8:	e7b9      	b.n	3071e <_printf_i+0xf6>
   307aa:	6813      	ldr	r3, [r2, #0]
   307ac:	6825      	ldr	r5, [r4, #0]
   307ae:	1d18      	adds	r0, r3, #4
   307b0:	6961      	ldr	r1, [r4, #20]
   307b2:	6010      	str	r0, [r2, #0]
   307b4:	0628      	lsls	r0, r5, #24
   307b6:	681b      	ldr	r3, [r3, #0]
   307b8:	d501      	bpl.n	307be <_printf_i+0x196>
   307ba:	6019      	str	r1, [r3, #0]
   307bc:	e002      	b.n	307c4 <_printf_i+0x19c>
   307be:	066a      	lsls	r2, r5, #25
   307c0:	d5fb      	bpl.n	307ba <_printf_i+0x192>
   307c2:	8019      	strh	r1, [r3, #0]
   307c4:	2300      	movs	r3, #0
   307c6:	4665      	mov	r5, ip
   307c8:	6123      	str	r3, [r4, #16]
   307ca:	e7b9      	b.n	30740 <_printf_i+0x118>
   307cc:	6813      	ldr	r3, [r2, #0]
   307ce:	1d19      	adds	r1, r3, #4
   307d0:	6011      	str	r1, [r2, #0]
   307d2:	2100      	movs	r1, #0
   307d4:	681d      	ldr	r5, [r3, #0]
   307d6:	6862      	ldr	r2, [r4, #4]
   307d8:	4628      	mov	r0, r5
   307da:	f002 f876 	bl	328ca <memchr>
   307de:	b108      	cbz	r0, 307e4 <_printf_i+0x1bc>
   307e0:	1b40      	subs	r0, r0, r5
   307e2:	6060      	str	r0, [r4, #4]
   307e4:	6863      	ldr	r3, [r4, #4]
   307e6:	6123      	str	r3, [r4, #16]
   307e8:	2300      	movs	r3, #0
   307ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   307ee:	e7a7      	b.n	30740 <_printf_i+0x118>
   307f0:	6923      	ldr	r3, [r4, #16]
   307f2:	462a      	mov	r2, r5
   307f4:	4639      	mov	r1, r7
   307f6:	4630      	mov	r0, r6
   307f8:	47c0      	blx	r8
   307fa:	3001      	adds	r0, #1
   307fc:	d0aa      	beq.n	30754 <_printf_i+0x12c>
   307fe:	6823      	ldr	r3, [r4, #0]
   30800:	079b      	lsls	r3, r3, #30
   30802:	d413      	bmi.n	3082c <_printf_i+0x204>
   30804:	68e0      	ldr	r0, [r4, #12]
   30806:	9b03      	ldr	r3, [sp, #12]
   30808:	4298      	cmp	r0, r3
   3080a:	bfb8      	it	lt
   3080c:	4618      	movlt	r0, r3
   3080e:	e7a3      	b.n	30758 <_printf_i+0x130>
   30810:	2301      	movs	r3, #1
   30812:	464a      	mov	r2, r9
   30814:	4639      	mov	r1, r7
   30816:	4630      	mov	r0, r6
   30818:	47c0      	blx	r8
   3081a:	3001      	adds	r0, #1
   3081c:	d09a      	beq.n	30754 <_printf_i+0x12c>
   3081e:	3501      	adds	r5, #1
   30820:	68e3      	ldr	r3, [r4, #12]
   30822:	9a03      	ldr	r2, [sp, #12]
   30824:	1a9b      	subs	r3, r3, r2
   30826:	42ab      	cmp	r3, r5
   30828:	dcf2      	bgt.n	30810 <_printf_i+0x1e8>
   3082a:	e7eb      	b.n	30804 <_printf_i+0x1dc>
   3082c:	2500      	movs	r5, #0
   3082e:	f104 0919 	add.w	r9, r4, #25
   30832:	e7f5      	b.n	30820 <_printf_i+0x1f8>
   30834:	2b00      	cmp	r3, #0
   30836:	d1ac      	bne.n	30792 <_printf_i+0x16a>
   30838:	7803      	ldrb	r3, [r0, #0]
   3083a:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3083e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   30842:	e76c      	b.n	3071e <_printf_i+0xf6>
   30844:	00036dd4 	.word	0x00036dd4
   30848:	00036de5 	.word	0x00036de5

0003084c <sniprintf>:
   3084c:	b40c      	push	{r2, r3}
   3084e:	4b18      	ldr	r3, [pc, #96]	; (308b0 <sniprintf+0x64>)
   30850:	b530      	push	{r4, r5, lr}
   30852:	1e0c      	subs	r4, r1, #0
   30854:	b09d      	sub	sp, #116	; 0x74
   30856:	681d      	ldr	r5, [r3, #0]
   30858:	da08      	bge.n	3086c <sniprintf+0x20>
   3085a:	238b      	movs	r3, #139	; 0x8b
   3085c:	f04f 30ff 	mov.w	r0, #4294967295
   30860:	602b      	str	r3, [r5, #0]
   30862:	b01d      	add	sp, #116	; 0x74
   30864:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   30868:	b002      	add	sp, #8
   3086a:	4770      	bx	lr
   3086c:	f44f 7302 	mov.w	r3, #520	; 0x208
   30870:	9002      	str	r0, [sp, #8]
   30872:	9006      	str	r0, [sp, #24]
   30874:	a902      	add	r1, sp, #8
   30876:	f8ad 3014 	strh.w	r3, [sp, #20]
   3087a:	bf14      	ite	ne
   3087c:	f104 33ff 	addne.w	r3, r4, #4294967295
   30880:	4623      	moveq	r3, r4
   30882:	9a20      	ldr	r2, [sp, #128]	; 0x80
   30884:	4628      	mov	r0, r5
   30886:	9304      	str	r3, [sp, #16]
   30888:	9307      	str	r3, [sp, #28]
   3088a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3088e:	f8ad 3016 	strh.w	r3, [sp, #22]
   30892:	ab21      	add	r3, sp, #132	; 0x84
   30894:	9301      	str	r3, [sp, #4]
   30896:	f000 fb73 	bl	30f80 <_svfiprintf_r>
   3089a:	1c43      	adds	r3, r0, #1
   3089c:	bfbc      	itt	lt
   3089e:	238b      	movlt	r3, #139	; 0x8b
   308a0:	602b      	strlt	r3, [r5, #0]
   308a2:	2c00      	cmp	r4, #0
   308a4:	d0dd      	beq.n	30862 <sniprintf+0x16>
   308a6:	9b02      	ldr	r3, [sp, #8]
   308a8:	2200      	movs	r2, #0
   308aa:	701a      	strb	r2, [r3, #0]
   308ac:	e7d9      	b.n	30862 <sniprintf+0x16>
   308ae:	bf00      	nop
   308b0:	20028e3c 	.word	0x20028e3c

000308b4 <strtol>:
   308b4:	4b08      	ldr	r3, [pc, #32]	; (308d8 <strtol+0x24>)
   308b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   308b8:	681c      	ldr	r4, [r3, #0]
   308ba:	4d08      	ldr	r5, [pc, #32]	; (308dc <strtol+0x28>)
   308bc:	6a23      	ldr	r3, [r4, #32]
   308be:	2b00      	cmp	r3, #0
   308c0:	bf08      	it	eq
   308c2:	462b      	moveq	r3, r5
   308c4:	9300      	str	r3, [sp, #0]
   308c6:	4613      	mov	r3, r2
   308c8:	460a      	mov	r2, r1
   308ca:	4601      	mov	r1, r0
   308cc:	4620      	mov	r0, r4
   308ce:	f002 f98b 	bl	32be8 <_strtol_l.isra.0>
   308d2:	b003      	add	sp, #12
   308d4:	bd30      	pop	{r4, r5, pc}
   308d6:	bf00      	nop
   308d8:	20028e3c 	.word	0x20028e3c
   308dc:	20028ea0 	.word	0x20028ea0

000308e0 <__swbuf_r>:
   308e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   308e2:	460e      	mov	r6, r1
   308e4:	4614      	mov	r4, r2
   308e6:	4605      	mov	r5, r0
   308e8:	b118      	cbz	r0, 308f2 <__swbuf_r+0x12>
   308ea:	6983      	ldr	r3, [r0, #24]
   308ec:	b90b      	cbnz	r3, 308f2 <__swbuf_r+0x12>
   308ee:	f000 f98f 	bl	30c10 <__sinit>
   308f2:	4b21      	ldr	r3, [pc, #132]	; (30978 <__swbuf_r+0x98>)
   308f4:	429c      	cmp	r4, r3
   308f6:	d12a      	bne.n	3094e <__swbuf_r+0x6e>
   308f8:	686c      	ldr	r4, [r5, #4]
   308fa:	69a3      	ldr	r3, [r4, #24]
   308fc:	60a3      	str	r3, [r4, #8]
   308fe:	89a3      	ldrh	r3, [r4, #12]
   30900:	071a      	lsls	r2, r3, #28
   30902:	d52e      	bpl.n	30962 <__swbuf_r+0x82>
   30904:	6923      	ldr	r3, [r4, #16]
   30906:	b363      	cbz	r3, 30962 <__swbuf_r+0x82>
   30908:	6923      	ldr	r3, [r4, #16]
   3090a:	b2f6      	uxtb	r6, r6
   3090c:	6820      	ldr	r0, [r4, #0]
   3090e:	4637      	mov	r7, r6
   30910:	1ac0      	subs	r0, r0, r3
   30912:	6963      	ldr	r3, [r4, #20]
   30914:	4283      	cmp	r3, r0
   30916:	dc04      	bgt.n	30922 <__swbuf_r+0x42>
   30918:	4621      	mov	r1, r4
   3091a:	4628      	mov	r0, r5
   3091c:	f000 f924 	bl	30b68 <_fflush_r>
   30920:	bb28      	cbnz	r0, 3096e <__swbuf_r+0x8e>
   30922:	68a3      	ldr	r3, [r4, #8]
   30924:	3001      	adds	r0, #1
   30926:	3b01      	subs	r3, #1
   30928:	60a3      	str	r3, [r4, #8]
   3092a:	6823      	ldr	r3, [r4, #0]
   3092c:	1c5a      	adds	r2, r3, #1
   3092e:	6022      	str	r2, [r4, #0]
   30930:	701e      	strb	r6, [r3, #0]
   30932:	6963      	ldr	r3, [r4, #20]
   30934:	4283      	cmp	r3, r0
   30936:	d004      	beq.n	30942 <__swbuf_r+0x62>
   30938:	89a3      	ldrh	r3, [r4, #12]
   3093a:	07db      	lsls	r3, r3, #31
   3093c:	d519      	bpl.n	30972 <__swbuf_r+0x92>
   3093e:	2e0a      	cmp	r6, #10
   30940:	d117      	bne.n	30972 <__swbuf_r+0x92>
   30942:	4621      	mov	r1, r4
   30944:	4628      	mov	r0, r5
   30946:	f000 f90f 	bl	30b68 <_fflush_r>
   3094a:	b190      	cbz	r0, 30972 <__swbuf_r+0x92>
   3094c:	e00f      	b.n	3096e <__swbuf_r+0x8e>
   3094e:	4b0b      	ldr	r3, [pc, #44]	; (3097c <__swbuf_r+0x9c>)
   30950:	429c      	cmp	r4, r3
   30952:	d101      	bne.n	30958 <__swbuf_r+0x78>
   30954:	68ac      	ldr	r4, [r5, #8]
   30956:	e7d0      	b.n	308fa <__swbuf_r+0x1a>
   30958:	4b09      	ldr	r3, [pc, #36]	; (30980 <__swbuf_r+0xa0>)
   3095a:	429c      	cmp	r4, r3
   3095c:	bf08      	it	eq
   3095e:	68ec      	ldreq	r4, [r5, #12]
   30960:	e7cb      	b.n	308fa <__swbuf_r+0x1a>
   30962:	4621      	mov	r1, r4
   30964:	4628      	mov	r0, r5
   30966:	f000 f80d 	bl	30984 <__swsetup_r>
   3096a:	2800      	cmp	r0, #0
   3096c:	d0cc      	beq.n	30908 <__swbuf_r+0x28>
   3096e:	f04f 37ff 	mov.w	r7, #4294967295
   30972:	4638      	mov	r0, r7
   30974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30976:	bf00      	nop
   30978:	00034ed0 	.word	0x00034ed0
   3097c:	00034ef0 	.word	0x00034ef0
   30980:	00034eb0 	.word	0x00034eb0

00030984 <__swsetup_r>:
   30984:	4b32      	ldr	r3, [pc, #200]	; (30a50 <__swsetup_r+0xcc>)
   30986:	b570      	push	{r4, r5, r6, lr}
   30988:	681d      	ldr	r5, [r3, #0]
   3098a:	4606      	mov	r6, r0
   3098c:	460c      	mov	r4, r1
   3098e:	b125      	cbz	r5, 3099a <__swsetup_r+0x16>
   30990:	69ab      	ldr	r3, [r5, #24]
   30992:	b913      	cbnz	r3, 3099a <__swsetup_r+0x16>
   30994:	4628      	mov	r0, r5
   30996:	f000 f93b 	bl	30c10 <__sinit>
   3099a:	4b2e      	ldr	r3, [pc, #184]	; (30a54 <__swsetup_r+0xd0>)
   3099c:	429c      	cmp	r4, r3
   3099e:	d10f      	bne.n	309c0 <__swsetup_r+0x3c>
   309a0:	686c      	ldr	r4, [r5, #4]
   309a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   309a6:	b29a      	uxth	r2, r3
   309a8:	0715      	lsls	r5, r2, #28
   309aa:	d42c      	bmi.n	30a06 <__swsetup_r+0x82>
   309ac:	06d0      	lsls	r0, r2, #27
   309ae:	d411      	bmi.n	309d4 <__swsetup_r+0x50>
   309b0:	2209      	movs	r2, #9
   309b2:	6032      	str	r2, [r6, #0]
   309b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   309b8:	f04f 30ff 	mov.w	r0, #4294967295
   309bc:	81a3      	strh	r3, [r4, #12]
   309be:	e03e      	b.n	30a3e <__swsetup_r+0xba>
   309c0:	4b25      	ldr	r3, [pc, #148]	; (30a58 <__swsetup_r+0xd4>)
   309c2:	429c      	cmp	r4, r3
   309c4:	d101      	bne.n	309ca <__swsetup_r+0x46>
   309c6:	68ac      	ldr	r4, [r5, #8]
   309c8:	e7eb      	b.n	309a2 <__swsetup_r+0x1e>
   309ca:	4b24      	ldr	r3, [pc, #144]	; (30a5c <__swsetup_r+0xd8>)
   309cc:	429c      	cmp	r4, r3
   309ce:	bf08      	it	eq
   309d0:	68ec      	ldreq	r4, [r5, #12]
   309d2:	e7e6      	b.n	309a2 <__swsetup_r+0x1e>
   309d4:	0751      	lsls	r1, r2, #29
   309d6:	d512      	bpl.n	309fe <__swsetup_r+0x7a>
   309d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
   309da:	b141      	cbz	r1, 309ee <__swsetup_r+0x6a>
   309dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
   309e0:	4299      	cmp	r1, r3
   309e2:	d002      	beq.n	309ea <__swsetup_r+0x66>
   309e4:	4630      	mov	r0, r6
   309e6:	f000 fa23 	bl	30e30 <_free_r>
   309ea:	2300      	movs	r3, #0
   309ec:	6363      	str	r3, [r4, #52]	; 0x34
   309ee:	89a3      	ldrh	r3, [r4, #12]
   309f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   309f4:	81a3      	strh	r3, [r4, #12]
   309f6:	2300      	movs	r3, #0
   309f8:	6063      	str	r3, [r4, #4]
   309fa:	6923      	ldr	r3, [r4, #16]
   309fc:	6023      	str	r3, [r4, #0]
   309fe:	89a3      	ldrh	r3, [r4, #12]
   30a00:	f043 0308 	orr.w	r3, r3, #8
   30a04:	81a3      	strh	r3, [r4, #12]
   30a06:	6923      	ldr	r3, [r4, #16]
   30a08:	b94b      	cbnz	r3, 30a1e <__swsetup_r+0x9a>
   30a0a:	89a3      	ldrh	r3, [r4, #12]
   30a0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
   30a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   30a14:	d003      	beq.n	30a1e <__swsetup_r+0x9a>
   30a16:	4621      	mov	r1, r4
   30a18:	4630      	mov	r0, r6
   30a1a:	f000 f973 	bl	30d04 <__smakebuf_r>
   30a1e:	89a2      	ldrh	r2, [r4, #12]
   30a20:	f012 0301 	ands.w	r3, r2, #1
   30a24:	d00c      	beq.n	30a40 <__swsetup_r+0xbc>
   30a26:	2300      	movs	r3, #0
   30a28:	60a3      	str	r3, [r4, #8]
   30a2a:	6963      	ldr	r3, [r4, #20]
   30a2c:	425b      	negs	r3, r3
   30a2e:	61a3      	str	r3, [r4, #24]
   30a30:	6923      	ldr	r3, [r4, #16]
   30a32:	b953      	cbnz	r3, 30a4a <__swsetup_r+0xc6>
   30a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   30a38:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   30a3c:	d1ba      	bne.n	309b4 <__swsetup_r+0x30>
   30a3e:	bd70      	pop	{r4, r5, r6, pc}
   30a40:	0792      	lsls	r2, r2, #30
   30a42:	bf58      	it	pl
   30a44:	6963      	ldrpl	r3, [r4, #20]
   30a46:	60a3      	str	r3, [r4, #8]
   30a48:	e7f2      	b.n	30a30 <__swsetup_r+0xac>
   30a4a:	2000      	movs	r0, #0
   30a4c:	e7f7      	b.n	30a3e <__swsetup_r+0xba>
   30a4e:	bf00      	nop
   30a50:	20028e3c 	.word	0x20028e3c
   30a54:	00034ed0 	.word	0x00034ed0
   30a58:	00034ef0 	.word	0x00034ef0
   30a5c:	00034eb0 	.word	0x00034eb0

00030a60 <__sflush_r>:
   30a60:	898a      	ldrh	r2, [r1, #12]
   30a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30a66:	4605      	mov	r5, r0
   30a68:	0710      	lsls	r0, r2, #28
   30a6a:	460c      	mov	r4, r1
   30a6c:	d458      	bmi.n	30b20 <__sflush_r+0xc0>
   30a6e:	684b      	ldr	r3, [r1, #4]
   30a70:	2b00      	cmp	r3, #0
   30a72:	dc05      	bgt.n	30a80 <__sflush_r+0x20>
   30a74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   30a76:	2b00      	cmp	r3, #0
   30a78:	dc02      	bgt.n	30a80 <__sflush_r+0x20>
   30a7a:	2000      	movs	r0, #0
   30a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30a80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   30a82:	2e00      	cmp	r6, #0
   30a84:	d0f9      	beq.n	30a7a <__sflush_r+0x1a>
   30a86:	2300      	movs	r3, #0
   30a88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   30a8c:	682f      	ldr	r7, [r5, #0]
   30a8e:	6a21      	ldr	r1, [r4, #32]
   30a90:	602b      	str	r3, [r5, #0]
   30a92:	d032      	beq.n	30afa <__sflush_r+0x9a>
   30a94:	6d60      	ldr	r0, [r4, #84]	; 0x54
   30a96:	89a3      	ldrh	r3, [r4, #12]
   30a98:	075a      	lsls	r2, r3, #29
   30a9a:	d505      	bpl.n	30aa8 <__sflush_r+0x48>
   30a9c:	6863      	ldr	r3, [r4, #4]
   30a9e:	1ac0      	subs	r0, r0, r3
   30aa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   30aa2:	b10b      	cbz	r3, 30aa8 <__sflush_r+0x48>
   30aa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   30aa6:	1ac0      	subs	r0, r0, r3
   30aa8:	2300      	movs	r3, #0
   30aaa:	4602      	mov	r2, r0
   30aac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   30aae:	4628      	mov	r0, r5
   30ab0:	6a21      	ldr	r1, [r4, #32]
   30ab2:	47b0      	blx	r6
   30ab4:	1c43      	adds	r3, r0, #1
   30ab6:	89a3      	ldrh	r3, [r4, #12]
   30ab8:	d106      	bne.n	30ac8 <__sflush_r+0x68>
   30aba:	6829      	ldr	r1, [r5, #0]
   30abc:	291d      	cmp	r1, #29
   30abe:	d847      	bhi.n	30b50 <__sflush_r+0xf0>
   30ac0:	4a28      	ldr	r2, [pc, #160]	; (30b64 <__sflush_r+0x104>)
   30ac2:	40ca      	lsrs	r2, r1
   30ac4:	07d6      	lsls	r6, r2, #31
   30ac6:	d543      	bpl.n	30b50 <__sflush_r+0xf0>
   30ac8:	2200      	movs	r2, #0
   30aca:	04d9      	lsls	r1, r3, #19
   30acc:	6062      	str	r2, [r4, #4]
   30ace:	6922      	ldr	r2, [r4, #16]
   30ad0:	6022      	str	r2, [r4, #0]
   30ad2:	d504      	bpl.n	30ade <__sflush_r+0x7e>
   30ad4:	1c42      	adds	r2, r0, #1
   30ad6:	d101      	bne.n	30adc <__sflush_r+0x7c>
   30ad8:	682b      	ldr	r3, [r5, #0]
   30ada:	b903      	cbnz	r3, 30ade <__sflush_r+0x7e>
   30adc:	6560      	str	r0, [r4, #84]	; 0x54
   30ade:	6b61      	ldr	r1, [r4, #52]	; 0x34
   30ae0:	602f      	str	r7, [r5, #0]
   30ae2:	2900      	cmp	r1, #0
   30ae4:	d0c9      	beq.n	30a7a <__sflush_r+0x1a>
   30ae6:	f104 0344 	add.w	r3, r4, #68	; 0x44
   30aea:	4299      	cmp	r1, r3
   30aec:	d002      	beq.n	30af4 <__sflush_r+0x94>
   30aee:	4628      	mov	r0, r5
   30af0:	f000 f99e 	bl	30e30 <_free_r>
   30af4:	2000      	movs	r0, #0
   30af6:	6360      	str	r0, [r4, #52]	; 0x34
   30af8:	e7c0      	b.n	30a7c <__sflush_r+0x1c>
   30afa:	2301      	movs	r3, #1
   30afc:	4628      	mov	r0, r5
   30afe:	47b0      	blx	r6
   30b00:	1c41      	adds	r1, r0, #1
   30b02:	d1c8      	bne.n	30a96 <__sflush_r+0x36>
   30b04:	682b      	ldr	r3, [r5, #0]
   30b06:	2b00      	cmp	r3, #0
   30b08:	d0c5      	beq.n	30a96 <__sflush_r+0x36>
   30b0a:	2b1d      	cmp	r3, #29
   30b0c:	d001      	beq.n	30b12 <__sflush_r+0xb2>
   30b0e:	2b16      	cmp	r3, #22
   30b10:	d101      	bne.n	30b16 <__sflush_r+0xb6>
   30b12:	602f      	str	r7, [r5, #0]
   30b14:	e7b1      	b.n	30a7a <__sflush_r+0x1a>
   30b16:	89a3      	ldrh	r3, [r4, #12]
   30b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   30b1c:	81a3      	strh	r3, [r4, #12]
   30b1e:	e7ad      	b.n	30a7c <__sflush_r+0x1c>
   30b20:	690f      	ldr	r7, [r1, #16]
   30b22:	2f00      	cmp	r7, #0
   30b24:	d0a9      	beq.n	30a7a <__sflush_r+0x1a>
   30b26:	0793      	lsls	r3, r2, #30
   30b28:	680e      	ldr	r6, [r1, #0]
   30b2a:	600f      	str	r7, [r1, #0]
   30b2c:	bf0c      	ite	eq
   30b2e:	694b      	ldreq	r3, [r1, #20]
   30b30:	2300      	movne	r3, #0
   30b32:	eba6 0807 	sub.w	r8, r6, r7
   30b36:	608b      	str	r3, [r1, #8]
   30b38:	f1b8 0f00 	cmp.w	r8, #0
   30b3c:	dd9d      	ble.n	30a7a <__sflush_r+0x1a>
   30b3e:	4643      	mov	r3, r8
   30b40:	463a      	mov	r2, r7
   30b42:	6a21      	ldr	r1, [r4, #32]
   30b44:	4628      	mov	r0, r5
   30b46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   30b48:	47b0      	blx	r6
   30b4a:	2800      	cmp	r0, #0
   30b4c:	dc06      	bgt.n	30b5c <__sflush_r+0xfc>
   30b4e:	89a3      	ldrh	r3, [r4, #12]
   30b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   30b54:	f04f 30ff 	mov.w	r0, #4294967295
   30b58:	81a3      	strh	r3, [r4, #12]
   30b5a:	e78f      	b.n	30a7c <__sflush_r+0x1c>
   30b5c:	4407      	add	r7, r0
   30b5e:	eba8 0800 	sub.w	r8, r8, r0
   30b62:	e7e9      	b.n	30b38 <__sflush_r+0xd8>
   30b64:	20400001 	.word	0x20400001

00030b68 <_fflush_r>:
   30b68:	b538      	push	{r3, r4, r5, lr}
   30b6a:	690b      	ldr	r3, [r1, #16]
   30b6c:	4605      	mov	r5, r0
   30b6e:	460c      	mov	r4, r1
   30b70:	b1db      	cbz	r3, 30baa <_fflush_r+0x42>
   30b72:	b118      	cbz	r0, 30b7c <_fflush_r+0x14>
   30b74:	6983      	ldr	r3, [r0, #24]
   30b76:	b90b      	cbnz	r3, 30b7c <_fflush_r+0x14>
   30b78:	f000 f84a 	bl	30c10 <__sinit>
   30b7c:	4b0c      	ldr	r3, [pc, #48]	; (30bb0 <_fflush_r+0x48>)
   30b7e:	429c      	cmp	r4, r3
   30b80:	d109      	bne.n	30b96 <_fflush_r+0x2e>
   30b82:	686c      	ldr	r4, [r5, #4]
   30b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   30b88:	b17b      	cbz	r3, 30baa <_fflush_r+0x42>
   30b8a:	4621      	mov	r1, r4
   30b8c:	4628      	mov	r0, r5
   30b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   30b92:	f7ff bf65 	b.w	30a60 <__sflush_r>
   30b96:	4b07      	ldr	r3, [pc, #28]	; (30bb4 <_fflush_r+0x4c>)
   30b98:	429c      	cmp	r4, r3
   30b9a:	d101      	bne.n	30ba0 <_fflush_r+0x38>
   30b9c:	68ac      	ldr	r4, [r5, #8]
   30b9e:	e7f1      	b.n	30b84 <_fflush_r+0x1c>
   30ba0:	4b05      	ldr	r3, [pc, #20]	; (30bb8 <_fflush_r+0x50>)
   30ba2:	429c      	cmp	r4, r3
   30ba4:	bf08      	it	eq
   30ba6:	68ec      	ldreq	r4, [r5, #12]
   30ba8:	e7ec      	b.n	30b84 <_fflush_r+0x1c>
   30baa:	2000      	movs	r0, #0
   30bac:	bd38      	pop	{r3, r4, r5, pc}
   30bae:	bf00      	nop
   30bb0:	00034ed0 	.word	0x00034ed0
   30bb4:	00034ef0 	.word	0x00034ef0
   30bb8:	00034eb0 	.word	0x00034eb0

00030bbc <std>:
   30bbc:	2300      	movs	r3, #0
   30bbe:	b510      	push	{r4, lr}
   30bc0:	4604      	mov	r4, r0
   30bc2:	6083      	str	r3, [r0, #8]
   30bc4:	8181      	strh	r1, [r0, #12]
   30bc6:	4619      	mov	r1, r3
   30bc8:	6643      	str	r3, [r0, #100]	; 0x64
   30bca:	81c2      	strh	r2, [r0, #14]
   30bcc:	2208      	movs	r2, #8
   30bce:	6183      	str	r3, [r0, #24]
   30bd0:	e9c0 3300 	strd	r3, r3, [r0]
   30bd4:	e9c0 3304 	strd	r3, r3, [r0, #16]
   30bd8:	305c      	adds	r0, #92	; 0x5c
   30bda:	f001 fe8f 	bl	328fc <memset>
   30bde:	4b05      	ldr	r3, [pc, #20]	; (30bf4 <std+0x38>)
   30be0:	6224      	str	r4, [r4, #32]
   30be2:	6263      	str	r3, [r4, #36]	; 0x24
   30be4:	4b04      	ldr	r3, [pc, #16]	; (30bf8 <std+0x3c>)
   30be6:	62a3      	str	r3, [r4, #40]	; 0x28
   30be8:	4b04      	ldr	r3, [pc, #16]	; (30bfc <std+0x40>)
   30bea:	62e3      	str	r3, [r4, #44]	; 0x2c
   30bec:	4b04      	ldr	r3, [pc, #16]	; (30c00 <std+0x44>)
   30bee:	6323      	str	r3, [r4, #48]	; 0x30
   30bf0:	bd10      	pop	{r4, pc}
   30bf2:	bf00      	nop
   30bf4:	0003359d 	.word	0x0003359d
   30bf8:	000335bf 	.word	0x000335bf
   30bfc:	000335f7 	.word	0x000335f7
   30c00:	0003361b 	.word	0x0003361b

00030c04 <_cleanup_r>:
   30c04:	4901      	ldr	r1, [pc, #4]	; (30c0c <_cleanup_r+0x8>)
   30c06:	f002 b925 	b.w	32e54 <_fwalk_reent>
   30c0a:	bf00      	nop
   30c0c:	00030b69 	.word	0x00030b69

00030c10 <__sinit>:
   30c10:	6983      	ldr	r3, [r0, #24]
   30c12:	b510      	push	{r4, lr}
   30c14:	4604      	mov	r4, r0
   30c16:	bb33      	cbnz	r3, 30c66 <__sinit+0x56>
   30c18:	6503      	str	r3, [r0, #80]	; 0x50
   30c1a:	4a13      	ldr	r2, [pc, #76]	; (30c68 <__sinit+0x58>)
   30c1c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
   30c20:	4b12      	ldr	r3, [pc, #72]	; (30c6c <__sinit+0x5c>)
   30c22:	6282      	str	r2, [r0, #40]	; 0x28
   30c24:	681b      	ldr	r3, [r3, #0]
   30c26:	4298      	cmp	r0, r3
   30c28:	bf04      	itt	eq
   30c2a:	2301      	moveq	r3, #1
   30c2c:	6183      	streq	r3, [r0, #24]
   30c2e:	f000 f81f 	bl	30c70 <__sfp>
   30c32:	6060      	str	r0, [r4, #4]
   30c34:	4620      	mov	r0, r4
   30c36:	f000 f81b 	bl	30c70 <__sfp>
   30c3a:	60a0      	str	r0, [r4, #8]
   30c3c:	4620      	mov	r0, r4
   30c3e:	f000 f817 	bl	30c70 <__sfp>
   30c42:	2200      	movs	r2, #0
   30c44:	60e0      	str	r0, [r4, #12]
   30c46:	2104      	movs	r1, #4
   30c48:	6860      	ldr	r0, [r4, #4]
   30c4a:	f7ff ffb7 	bl	30bbc <std>
   30c4e:	2201      	movs	r2, #1
   30c50:	2109      	movs	r1, #9
   30c52:	68a0      	ldr	r0, [r4, #8]
   30c54:	f7ff ffb2 	bl	30bbc <std>
   30c58:	2202      	movs	r2, #2
   30c5a:	2112      	movs	r1, #18
   30c5c:	68e0      	ldr	r0, [r4, #12]
   30c5e:	f7ff ffad 	bl	30bbc <std>
   30c62:	2301      	movs	r3, #1
   30c64:	61a3      	str	r3, [r4, #24]
   30c66:	bd10      	pop	{r4, pc}
   30c68:	00030c05 	.word	0x00030c05
   30c6c:	00034eac 	.word	0x00034eac

00030c70 <__sfp>:
   30c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30c72:	4b1b      	ldr	r3, [pc, #108]	; (30ce0 <__sfp+0x70>)
   30c74:	4607      	mov	r7, r0
   30c76:	681e      	ldr	r6, [r3, #0]
   30c78:	69b3      	ldr	r3, [r6, #24]
   30c7a:	b913      	cbnz	r3, 30c82 <__sfp+0x12>
   30c7c:	4630      	mov	r0, r6
   30c7e:	f7ff ffc7 	bl	30c10 <__sinit>
   30c82:	3648      	adds	r6, #72	; 0x48
   30c84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   30c88:	3b01      	subs	r3, #1
   30c8a:	d503      	bpl.n	30c94 <__sfp+0x24>
   30c8c:	6833      	ldr	r3, [r6, #0]
   30c8e:	b133      	cbz	r3, 30c9e <__sfp+0x2e>
   30c90:	6836      	ldr	r6, [r6, #0]
   30c92:	e7f7      	b.n	30c84 <__sfp+0x14>
   30c94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   30c98:	b16d      	cbz	r5, 30cb6 <__sfp+0x46>
   30c9a:	3468      	adds	r4, #104	; 0x68
   30c9c:	e7f4      	b.n	30c88 <__sfp+0x18>
   30c9e:	2104      	movs	r1, #4
   30ca0:	4638      	mov	r0, r7
   30ca2:	f002 f8c1 	bl	32e28 <__sfmoreglue>
   30ca6:	6030      	str	r0, [r6, #0]
   30ca8:	2800      	cmp	r0, #0
   30caa:	d1f1      	bne.n	30c90 <__sfp+0x20>
   30cac:	230c      	movs	r3, #12
   30cae:	4604      	mov	r4, r0
   30cb0:	603b      	str	r3, [r7, #0]
   30cb2:	4620      	mov	r0, r4
   30cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30cb6:	4b0b      	ldr	r3, [pc, #44]	; (30ce4 <__sfp+0x74>)
   30cb8:	2208      	movs	r2, #8
   30cba:	6665      	str	r5, [r4, #100]	; 0x64
   30cbc:	4629      	mov	r1, r5
   30cbe:	60a5      	str	r5, [r4, #8]
   30cc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   30cc4:	e9c4 5500 	strd	r5, r5, [r4]
   30cc8:	e9c4 3503 	strd	r3, r5, [r4, #12]
   30ccc:	e9c4 5505 	strd	r5, r5, [r4, #20]
   30cd0:	f001 fe14 	bl	328fc <memset>
   30cd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   30cd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   30cdc:	e7e9      	b.n	30cb2 <__sfp+0x42>
   30cde:	bf00      	nop
   30ce0:	00034eac 	.word	0x00034eac
   30ce4:	ffff0001 	.word	0xffff0001

00030ce8 <_localeconv_r>:
   30ce8:	4b04      	ldr	r3, [pc, #16]	; (30cfc <_localeconv_r+0x14>)
   30cea:	681b      	ldr	r3, [r3, #0]
   30cec:	6a18      	ldr	r0, [r3, #32]
   30cee:	4b04      	ldr	r3, [pc, #16]	; (30d00 <_localeconv_r+0x18>)
   30cf0:	2800      	cmp	r0, #0
   30cf2:	bf08      	it	eq
   30cf4:	4618      	moveq	r0, r3
   30cf6:	30f0      	adds	r0, #240	; 0xf0
   30cf8:	4770      	bx	lr
   30cfa:	bf00      	nop
   30cfc:	20028e3c 	.word	0x20028e3c
   30d00:	20028ea0 	.word	0x20028ea0

00030d04 <__smakebuf_r>:
   30d04:	898b      	ldrh	r3, [r1, #12]
   30d06:	b573      	push	{r0, r1, r4, r5, r6, lr}
   30d08:	079d      	lsls	r5, r3, #30
   30d0a:	4606      	mov	r6, r0
   30d0c:	460c      	mov	r4, r1
   30d0e:	d507      	bpl.n	30d20 <__smakebuf_r+0x1c>
   30d10:	f104 0347 	add.w	r3, r4, #71	; 0x47
   30d14:	6023      	str	r3, [r4, #0]
   30d16:	6123      	str	r3, [r4, #16]
   30d18:	2301      	movs	r3, #1
   30d1a:	6163      	str	r3, [r4, #20]
   30d1c:	b002      	add	sp, #8
   30d1e:	bd70      	pop	{r4, r5, r6, pc}
   30d20:	ab01      	add	r3, sp, #4
   30d22:	466a      	mov	r2, sp
   30d24:	f002 f8b4 	bl	32e90 <__swhatbuf_r>
   30d28:	9900      	ldr	r1, [sp, #0]
   30d2a:	4605      	mov	r5, r0
   30d2c:	4630      	mov	r0, r6
   30d2e:	f000 f8cd 	bl	30ecc <_malloc_r>
   30d32:	b948      	cbnz	r0, 30d48 <__smakebuf_r+0x44>
   30d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   30d38:	059a      	lsls	r2, r3, #22
   30d3a:	d4ef      	bmi.n	30d1c <__smakebuf_r+0x18>
   30d3c:	f023 0303 	bic.w	r3, r3, #3
   30d40:	f043 0302 	orr.w	r3, r3, #2
   30d44:	81a3      	strh	r3, [r4, #12]
   30d46:	e7e3      	b.n	30d10 <__smakebuf_r+0xc>
   30d48:	4b0d      	ldr	r3, [pc, #52]	; (30d80 <__smakebuf_r+0x7c>)
   30d4a:	62b3      	str	r3, [r6, #40]	; 0x28
   30d4c:	89a3      	ldrh	r3, [r4, #12]
   30d4e:	6020      	str	r0, [r4, #0]
   30d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   30d54:	6120      	str	r0, [r4, #16]
   30d56:	81a3      	strh	r3, [r4, #12]
   30d58:	9b00      	ldr	r3, [sp, #0]
   30d5a:	6163      	str	r3, [r4, #20]
   30d5c:	9b01      	ldr	r3, [sp, #4]
   30d5e:	b15b      	cbz	r3, 30d78 <__smakebuf_r+0x74>
   30d60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   30d64:	4630      	mov	r0, r6
   30d66:	f000 fa61 	bl	3122c <_isatty_r>
   30d6a:	b128      	cbz	r0, 30d78 <__smakebuf_r+0x74>
   30d6c:	89a3      	ldrh	r3, [r4, #12]
   30d6e:	f023 0303 	bic.w	r3, r3, #3
   30d72:	f043 0301 	orr.w	r3, r3, #1
   30d76:	81a3      	strh	r3, [r4, #12]
   30d78:	89a3      	ldrh	r3, [r4, #12]
   30d7a:	431d      	orrs	r5, r3
   30d7c:	81a5      	strh	r5, [r4, #12]
   30d7e:	e7cd      	b.n	30d1c <__smakebuf_r+0x18>
   30d80:	00030c05 	.word	0x00030c05

00030d84 <malloc>:
   30d84:	4b02      	ldr	r3, [pc, #8]	; (30d90 <malloc+0xc>)
   30d86:	4601      	mov	r1, r0
   30d88:	6818      	ldr	r0, [r3, #0]
   30d8a:	f000 b89f 	b.w	30ecc <_malloc_r>
   30d8e:	bf00      	nop
   30d90:	20028e3c 	.word	0x20028e3c

00030d94 <__pow5mult>:
   30d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30d98:	4615      	mov	r5, r2
   30d9a:	f012 0203 	ands.w	r2, r2, #3
   30d9e:	4606      	mov	r6, r0
   30da0:	460f      	mov	r7, r1
   30da2:	d007      	beq.n	30db4 <__pow5mult+0x20>
   30da4:	3a01      	subs	r2, #1
   30da6:	4c21      	ldr	r4, [pc, #132]	; (30e2c <__pow5mult+0x98>)
   30da8:	2300      	movs	r3, #0
   30daa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   30dae:	f002 f8f7 	bl	32fa0 <__multadd>
   30db2:	4607      	mov	r7, r0
   30db4:	10ad      	asrs	r5, r5, #2
   30db6:	d035      	beq.n	30e24 <__pow5mult+0x90>
   30db8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   30dba:	b93c      	cbnz	r4, 30dcc <__pow5mult+0x38>
   30dbc:	2010      	movs	r0, #16
   30dbe:	f7ff ffe1 	bl	30d84 <malloc>
   30dc2:	6270      	str	r0, [r6, #36]	; 0x24
   30dc4:	6004      	str	r4, [r0, #0]
   30dc6:	60c4      	str	r4, [r0, #12]
   30dc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   30dcc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   30dd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   30dd4:	b94c      	cbnz	r4, 30dea <__pow5mult+0x56>
   30dd6:	f240 2171 	movw	r1, #625	; 0x271
   30dda:	4630      	mov	r0, r6
   30ddc:	f002 f96b 	bl	330b6 <__i2b>
   30de0:	2300      	movs	r3, #0
   30de2:	4604      	mov	r4, r0
   30de4:	f8c8 0008 	str.w	r0, [r8, #8]
   30de8:	6003      	str	r3, [r0, #0]
   30dea:	f04f 0800 	mov.w	r8, #0
   30dee:	07eb      	lsls	r3, r5, #31
   30df0:	d50a      	bpl.n	30e08 <__pow5mult+0x74>
   30df2:	4639      	mov	r1, r7
   30df4:	4622      	mov	r2, r4
   30df6:	4630      	mov	r0, r6
   30df8:	f002 f966 	bl	330c8 <__multiply>
   30dfc:	4681      	mov	r9, r0
   30dfe:	4639      	mov	r1, r7
   30e00:	4630      	mov	r0, r6
   30e02:	464f      	mov	r7, r9
   30e04:	f002 f8b5 	bl	32f72 <_Bfree>
   30e08:	106d      	asrs	r5, r5, #1
   30e0a:	d00b      	beq.n	30e24 <__pow5mult+0x90>
   30e0c:	6820      	ldr	r0, [r4, #0]
   30e0e:	b938      	cbnz	r0, 30e20 <__pow5mult+0x8c>
   30e10:	4622      	mov	r2, r4
   30e12:	4621      	mov	r1, r4
   30e14:	4630      	mov	r0, r6
   30e16:	f002 f957 	bl	330c8 <__multiply>
   30e1a:	6020      	str	r0, [r4, #0]
   30e1c:	f8c0 8000 	str.w	r8, [r0]
   30e20:	4604      	mov	r4, r0
   30e22:	e7e4      	b.n	30dee <__pow5mult+0x5a>
   30e24:	4638      	mov	r0, r7
   30e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   30e2a:	bf00      	nop
   30e2c:	00034f10 	.word	0x00034f10

00030e30 <_free_r>:
   30e30:	b538      	push	{r3, r4, r5, lr}
   30e32:	4605      	mov	r5, r0
   30e34:	2900      	cmp	r1, #0
   30e36:	d045      	beq.n	30ec4 <_free_r+0x94>
   30e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
   30e3c:	1f0c      	subs	r4, r1, #4
   30e3e:	2b00      	cmp	r3, #0
   30e40:	bfb8      	it	lt
   30e42:	18e4      	addlt	r4, r4, r3
   30e44:	f002 fbed 	bl	33622 <__malloc_lock>
   30e48:	4a1f      	ldr	r2, [pc, #124]	; (30ec8 <_free_r+0x98>)
   30e4a:	6813      	ldr	r3, [r2, #0]
   30e4c:	4610      	mov	r0, r2
   30e4e:	b933      	cbnz	r3, 30e5e <_free_r+0x2e>
   30e50:	6063      	str	r3, [r4, #4]
   30e52:	6014      	str	r4, [r2, #0]
   30e54:	4628      	mov	r0, r5
   30e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   30e5a:	f002 bbe3 	b.w	33624 <__malloc_unlock>
   30e5e:	42a3      	cmp	r3, r4
   30e60:	d90c      	bls.n	30e7c <_free_r+0x4c>
   30e62:	6821      	ldr	r1, [r4, #0]
   30e64:	1862      	adds	r2, r4, r1
   30e66:	4293      	cmp	r3, r2
   30e68:	bf02      	ittt	eq
   30e6a:	681a      	ldreq	r2, [r3, #0]
   30e6c:	685b      	ldreq	r3, [r3, #4]
   30e6e:	1852      	addeq	r2, r2, r1
   30e70:	6063      	str	r3, [r4, #4]
   30e72:	bf08      	it	eq
   30e74:	6022      	streq	r2, [r4, #0]
   30e76:	6004      	str	r4, [r0, #0]
   30e78:	e7ec      	b.n	30e54 <_free_r+0x24>
   30e7a:	4613      	mov	r3, r2
   30e7c:	685a      	ldr	r2, [r3, #4]
   30e7e:	b10a      	cbz	r2, 30e84 <_free_r+0x54>
   30e80:	42a2      	cmp	r2, r4
   30e82:	d9fa      	bls.n	30e7a <_free_r+0x4a>
   30e84:	6819      	ldr	r1, [r3, #0]
   30e86:	1858      	adds	r0, r3, r1
   30e88:	42a0      	cmp	r0, r4
   30e8a:	d10b      	bne.n	30ea4 <_free_r+0x74>
   30e8c:	6820      	ldr	r0, [r4, #0]
   30e8e:	4401      	add	r1, r0
   30e90:	1858      	adds	r0, r3, r1
   30e92:	6019      	str	r1, [r3, #0]
   30e94:	4282      	cmp	r2, r0
   30e96:	d1dd      	bne.n	30e54 <_free_r+0x24>
   30e98:	6810      	ldr	r0, [r2, #0]
   30e9a:	6852      	ldr	r2, [r2, #4]
   30e9c:	4401      	add	r1, r0
   30e9e:	605a      	str	r2, [r3, #4]
   30ea0:	6019      	str	r1, [r3, #0]
   30ea2:	e7d7      	b.n	30e54 <_free_r+0x24>
   30ea4:	d902      	bls.n	30eac <_free_r+0x7c>
   30ea6:	230c      	movs	r3, #12
   30ea8:	602b      	str	r3, [r5, #0]
   30eaa:	e7d3      	b.n	30e54 <_free_r+0x24>
   30eac:	6820      	ldr	r0, [r4, #0]
   30eae:	1821      	adds	r1, r4, r0
   30eb0:	428a      	cmp	r2, r1
   30eb2:	bf02      	ittt	eq
   30eb4:	6811      	ldreq	r1, [r2, #0]
   30eb6:	6852      	ldreq	r2, [r2, #4]
   30eb8:	1809      	addeq	r1, r1, r0
   30eba:	6062      	str	r2, [r4, #4]
   30ebc:	bf08      	it	eq
   30ebe:	6021      	streq	r1, [r4, #0]
   30ec0:	605c      	str	r4, [r3, #4]
   30ec2:	e7c7      	b.n	30e54 <_free_r+0x24>
   30ec4:	bd38      	pop	{r3, r4, r5, pc}
   30ec6:	bf00      	nop
   30ec8:	20025b00 	.word	0x20025b00

00030ecc <_malloc_r>:
   30ecc:	b570      	push	{r4, r5, r6, lr}
   30ece:	1ccd      	adds	r5, r1, #3
   30ed0:	4606      	mov	r6, r0
   30ed2:	f025 0503 	bic.w	r5, r5, #3
   30ed6:	3508      	adds	r5, #8
   30ed8:	2d0c      	cmp	r5, #12
   30eda:	bf38      	it	cc
   30edc:	250c      	movcc	r5, #12
   30ede:	2d00      	cmp	r5, #0
   30ee0:	db01      	blt.n	30ee6 <_malloc_r+0x1a>
   30ee2:	42a9      	cmp	r1, r5
   30ee4:	d903      	bls.n	30eee <_malloc_r+0x22>
   30ee6:	230c      	movs	r3, #12
   30ee8:	6033      	str	r3, [r6, #0]
   30eea:	2000      	movs	r0, #0
   30eec:	bd70      	pop	{r4, r5, r6, pc}
   30eee:	f002 fb98 	bl	33622 <__malloc_lock>
   30ef2:	4a21      	ldr	r2, [pc, #132]	; (30f78 <_malloc_r+0xac>)
   30ef4:	6814      	ldr	r4, [r2, #0]
   30ef6:	4621      	mov	r1, r4
   30ef8:	b991      	cbnz	r1, 30f20 <_malloc_r+0x54>
   30efa:	4c20      	ldr	r4, [pc, #128]	; (30f7c <_malloc_r+0xb0>)
   30efc:	6823      	ldr	r3, [r4, #0]
   30efe:	b91b      	cbnz	r3, 30f08 <_malloc_r+0x3c>
   30f00:	4630      	mov	r0, r6
   30f02:	f000 f935 	bl	31170 <_sbrk_r>
   30f06:	6020      	str	r0, [r4, #0]
   30f08:	4629      	mov	r1, r5
   30f0a:	4630      	mov	r0, r6
   30f0c:	f000 f930 	bl	31170 <_sbrk_r>
   30f10:	1c43      	adds	r3, r0, #1
   30f12:	d124      	bne.n	30f5e <_malloc_r+0x92>
   30f14:	230c      	movs	r3, #12
   30f16:	4630      	mov	r0, r6
   30f18:	6033      	str	r3, [r6, #0]
   30f1a:	f002 fb83 	bl	33624 <__malloc_unlock>
   30f1e:	e7e4      	b.n	30eea <_malloc_r+0x1e>
   30f20:	680b      	ldr	r3, [r1, #0]
   30f22:	1b5b      	subs	r3, r3, r5
   30f24:	d418      	bmi.n	30f58 <_malloc_r+0x8c>
   30f26:	2b0b      	cmp	r3, #11
   30f28:	d90f      	bls.n	30f4a <_malloc_r+0x7e>
   30f2a:	18cc      	adds	r4, r1, r3
   30f2c:	600b      	str	r3, [r1, #0]
   30f2e:	50cd      	str	r5, [r1, r3]
   30f30:	4630      	mov	r0, r6
   30f32:	f002 fb77 	bl	33624 <__malloc_unlock>
   30f36:	f104 000b 	add.w	r0, r4, #11
   30f3a:	1d23      	adds	r3, r4, #4
   30f3c:	f020 0007 	bic.w	r0, r0, #7
   30f40:	1ac3      	subs	r3, r0, r3
   30f42:	d0d3      	beq.n	30eec <_malloc_r+0x20>
   30f44:	425a      	negs	r2, r3
   30f46:	50e2      	str	r2, [r4, r3]
   30f48:	e7d0      	b.n	30eec <_malloc_r+0x20>
   30f4a:	428c      	cmp	r4, r1
   30f4c:	684b      	ldr	r3, [r1, #4]
   30f4e:	bf1a      	itte	ne
   30f50:	6063      	strne	r3, [r4, #4]
   30f52:	460c      	movne	r4, r1
   30f54:	6013      	streq	r3, [r2, #0]
   30f56:	e7eb      	b.n	30f30 <_malloc_r+0x64>
   30f58:	460c      	mov	r4, r1
   30f5a:	6849      	ldr	r1, [r1, #4]
   30f5c:	e7cc      	b.n	30ef8 <_malloc_r+0x2c>
   30f5e:	1cc4      	adds	r4, r0, #3
   30f60:	f024 0403 	bic.w	r4, r4, #3
   30f64:	42a0      	cmp	r0, r4
   30f66:	d005      	beq.n	30f74 <_malloc_r+0xa8>
   30f68:	1a21      	subs	r1, r4, r0
   30f6a:	4630      	mov	r0, r6
   30f6c:	f000 f900 	bl	31170 <_sbrk_r>
   30f70:	3001      	adds	r0, #1
   30f72:	d0cf      	beq.n	30f14 <_malloc_r+0x48>
   30f74:	6025      	str	r5, [r4, #0]
   30f76:	e7db      	b.n	30f30 <_malloc_r+0x64>
   30f78:	20025b00 	.word	0x20025b00
   30f7c:	20025b04 	.word	0x20025b04

00030f80 <_svfiprintf_r>:
   30f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30f84:	461d      	mov	r5, r3
   30f86:	898b      	ldrh	r3, [r1, #12]
   30f88:	b09d      	sub	sp, #116	; 0x74
   30f8a:	4680      	mov	r8, r0
   30f8c:	061f      	lsls	r7, r3, #24
   30f8e:	460c      	mov	r4, r1
   30f90:	4616      	mov	r6, r2
   30f92:	d50f      	bpl.n	30fb4 <_svfiprintf_r+0x34>
   30f94:	690b      	ldr	r3, [r1, #16]
   30f96:	b96b      	cbnz	r3, 30fb4 <_svfiprintf_r+0x34>
   30f98:	2140      	movs	r1, #64	; 0x40
   30f9a:	f7ff ff97 	bl	30ecc <_malloc_r>
   30f9e:	6020      	str	r0, [r4, #0]
   30fa0:	6120      	str	r0, [r4, #16]
   30fa2:	b928      	cbnz	r0, 30fb0 <_svfiprintf_r+0x30>
   30fa4:	230c      	movs	r3, #12
   30fa6:	f8c8 3000 	str.w	r3, [r8]
   30faa:	f04f 30ff 	mov.w	r0, #4294967295
   30fae:	e0c8      	b.n	31142 <_svfiprintf_r+0x1c2>
   30fb0:	2340      	movs	r3, #64	; 0x40
   30fb2:	6163      	str	r3, [r4, #20]
   30fb4:	2300      	movs	r3, #0
   30fb6:	f04f 0b01 	mov.w	fp, #1
   30fba:	9503      	str	r5, [sp, #12]
   30fbc:	9309      	str	r3, [sp, #36]	; 0x24
   30fbe:	2320      	movs	r3, #32
   30fc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   30fc4:	2330      	movs	r3, #48	; 0x30
   30fc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   30fca:	4637      	mov	r7, r6
   30fcc:	463d      	mov	r5, r7
   30fce:	f815 3b01 	ldrb.w	r3, [r5], #1
   30fd2:	b10b      	cbz	r3, 30fd8 <_svfiprintf_r+0x58>
   30fd4:	2b25      	cmp	r3, #37	; 0x25
   30fd6:	d13e      	bne.n	31056 <_svfiprintf_r+0xd6>
   30fd8:	ebb7 0a06 	subs.w	sl, r7, r6
   30fdc:	d00b      	beq.n	30ff6 <_svfiprintf_r+0x76>
   30fde:	4653      	mov	r3, sl
   30fe0:	4632      	mov	r2, r6
   30fe2:	4621      	mov	r1, r4
   30fe4:	4640      	mov	r0, r8
   30fe6:	f002 fa55 	bl	33494 <__ssputs_r>
   30fea:	3001      	adds	r0, #1
   30fec:	f000 80a4 	beq.w	31138 <_svfiprintf_r+0x1b8>
   30ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   30ff2:	4453      	add	r3, sl
   30ff4:	9309      	str	r3, [sp, #36]	; 0x24
   30ff6:	783b      	ldrb	r3, [r7, #0]
   30ff8:	2b00      	cmp	r3, #0
   30ffa:	f000 809d 	beq.w	31138 <_svfiprintf_r+0x1b8>
   30ffe:	2300      	movs	r3, #0
   31000:	f04f 32ff 	mov.w	r2, #4294967295
   31004:	9304      	str	r3, [sp, #16]
   31006:	9307      	str	r3, [sp, #28]
   31008:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3100c:	931a      	str	r3, [sp, #104]	; 0x68
   3100e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   31012:	462f      	mov	r7, r5
   31014:	2205      	movs	r2, #5
   31016:	4851      	ldr	r0, [pc, #324]	; (3115c <_svfiprintf_r+0x1dc>)
   31018:	f817 1b01 	ldrb.w	r1, [r7], #1
   3101c:	f001 fc55 	bl	328ca <memchr>
   31020:	9b04      	ldr	r3, [sp, #16]
   31022:	b9d0      	cbnz	r0, 3105a <_svfiprintf_r+0xda>
   31024:	06d9      	lsls	r1, r3, #27
   31026:	bf44      	itt	mi
   31028:	2220      	movmi	r2, #32
   3102a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3102e:	071a      	lsls	r2, r3, #28
   31030:	bf44      	itt	mi
   31032:	222b      	movmi	r2, #43	; 0x2b
   31034:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   31038:	782a      	ldrb	r2, [r5, #0]
   3103a:	2a2a      	cmp	r2, #42	; 0x2a
   3103c:	d015      	beq.n	3106a <_svfiprintf_r+0xea>
   3103e:	462f      	mov	r7, r5
   31040:	9a07      	ldr	r2, [sp, #28]
   31042:	2000      	movs	r0, #0
   31044:	250a      	movs	r5, #10
   31046:	4639      	mov	r1, r7
   31048:	f811 3b01 	ldrb.w	r3, [r1], #1
   3104c:	3b30      	subs	r3, #48	; 0x30
   3104e:	2b09      	cmp	r3, #9
   31050:	d94d      	bls.n	310ee <_svfiprintf_r+0x16e>
   31052:	b1b8      	cbz	r0, 31084 <_svfiprintf_r+0x104>
   31054:	e00f      	b.n	31076 <_svfiprintf_r+0xf6>
   31056:	462f      	mov	r7, r5
   31058:	e7b8      	b.n	30fcc <_svfiprintf_r+0x4c>
   3105a:	4a40      	ldr	r2, [pc, #256]	; (3115c <_svfiprintf_r+0x1dc>)
   3105c:	463d      	mov	r5, r7
   3105e:	1a80      	subs	r0, r0, r2
   31060:	fa0b f000 	lsl.w	r0, fp, r0
   31064:	4318      	orrs	r0, r3
   31066:	9004      	str	r0, [sp, #16]
   31068:	e7d3      	b.n	31012 <_svfiprintf_r+0x92>
   3106a:	9a03      	ldr	r2, [sp, #12]
   3106c:	1d11      	adds	r1, r2, #4
   3106e:	6812      	ldr	r2, [r2, #0]
   31070:	2a00      	cmp	r2, #0
   31072:	9103      	str	r1, [sp, #12]
   31074:	db01      	blt.n	3107a <_svfiprintf_r+0xfa>
   31076:	9207      	str	r2, [sp, #28]
   31078:	e004      	b.n	31084 <_svfiprintf_r+0x104>
   3107a:	4252      	negs	r2, r2
   3107c:	f043 0302 	orr.w	r3, r3, #2
   31080:	9207      	str	r2, [sp, #28]
   31082:	9304      	str	r3, [sp, #16]
   31084:	783b      	ldrb	r3, [r7, #0]
   31086:	2b2e      	cmp	r3, #46	; 0x2e
   31088:	d10c      	bne.n	310a4 <_svfiprintf_r+0x124>
   3108a:	787b      	ldrb	r3, [r7, #1]
   3108c:	2b2a      	cmp	r3, #42	; 0x2a
   3108e:	d133      	bne.n	310f8 <_svfiprintf_r+0x178>
   31090:	9b03      	ldr	r3, [sp, #12]
   31092:	3702      	adds	r7, #2
   31094:	1d1a      	adds	r2, r3, #4
   31096:	681b      	ldr	r3, [r3, #0]
   31098:	2b00      	cmp	r3, #0
   3109a:	9203      	str	r2, [sp, #12]
   3109c:	bfb8      	it	lt
   3109e:	f04f 33ff 	movlt.w	r3, #4294967295
   310a2:	9305      	str	r3, [sp, #20]
   310a4:	4d2e      	ldr	r5, [pc, #184]	; (31160 <_svfiprintf_r+0x1e0>)
   310a6:	2203      	movs	r2, #3
   310a8:	7839      	ldrb	r1, [r7, #0]
   310aa:	4628      	mov	r0, r5
   310ac:	f001 fc0d 	bl	328ca <memchr>
   310b0:	b138      	cbz	r0, 310c2 <_svfiprintf_r+0x142>
   310b2:	2340      	movs	r3, #64	; 0x40
   310b4:	1b40      	subs	r0, r0, r5
   310b6:	3701      	adds	r7, #1
   310b8:	fa03 f000 	lsl.w	r0, r3, r0
   310bc:	9b04      	ldr	r3, [sp, #16]
   310be:	4303      	orrs	r3, r0
   310c0:	9304      	str	r3, [sp, #16]
   310c2:	7839      	ldrb	r1, [r7, #0]
   310c4:	2206      	movs	r2, #6
   310c6:	4827      	ldr	r0, [pc, #156]	; (31164 <_svfiprintf_r+0x1e4>)
   310c8:	1c7e      	adds	r6, r7, #1
   310ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   310ce:	f001 fbfc 	bl	328ca <memchr>
   310d2:	2800      	cmp	r0, #0
   310d4:	d038      	beq.n	31148 <_svfiprintf_r+0x1c8>
   310d6:	4b24      	ldr	r3, [pc, #144]	; (31168 <_svfiprintf_r+0x1e8>)
   310d8:	bb13      	cbnz	r3, 31120 <_svfiprintf_r+0x1a0>
   310da:	9b03      	ldr	r3, [sp, #12]
   310dc:	3307      	adds	r3, #7
   310de:	f023 0307 	bic.w	r3, r3, #7
   310e2:	3308      	adds	r3, #8
   310e4:	9303      	str	r3, [sp, #12]
   310e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   310e8:	444b      	add	r3, r9
   310ea:	9309      	str	r3, [sp, #36]	; 0x24
   310ec:	e76d      	b.n	30fca <_svfiprintf_r+0x4a>
   310ee:	fb05 3202 	mla	r2, r5, r2, r3
   310f2:	2001      	movs	r0, #1
   310f4:	460f      	mov	r7, r1
   310f6:	e7a6      	b.n	31046 <_svfiprintf_r+0xc6>
   310f8:	2300      	movs	r3, #0
   310fa:	3701      	adds	r7, #1
   310fc:	250a      	movs	r5, #10
   310fe:	4619      	mov	r1, r3
   31100:	9305      	str	r3, [sp, #20]
   31102:	4638      	mov	r0, r7
   31104:	f810 2b01 	ldrb.w	r2, [r0], #1
   31108:	3a30      	subs	r2, #48	; 0x30
   3110a:	2a09      	cmp	r2, #9
   3110c:	d903      	bls.n	31116 <_svfiprintf_r+0x196>
   3110e:	2b00      	cmp	r3, #0
   31110:	d0c8      	beq.n	310a4 <_svfiprintf_r+0x124>
   31112:	9105      	str	r1, [sp, #20]
   31114:	e7c6      	b.n	310a4 <_svfiprintf_r+0x124>
   31116:	fb05 2101 	mla	r1, r5, r1, r2
   3111a:	2301      	movs	r3, #1
   3111c:	4607      	mov	r7, r0
   3111e:	e7f0      	b.n	31102 <_svfiprintf_r+0x182>
   31120:	ab03      	add	r3, sp, #12
   31122:	4622      	mov	r2, r4
   31124:	a904      	add	r1, sp, #16
   31126:	4640      	mov	r0, r8
   31128:	9300      	str	r3, [sp, #0]
   3112a:	4b10      	ldr	r3, [pc, #64]	; (3116c <_svfiprintf_r+0x1ec>)
   3112c:	f7ff f83c 	bl	301a8 <_printf_float>
   31130:	f1b0 3fff 	cmp.w	r0, #4294967295
   31134:	4681      	mov	r9, r0
   31136:	d1d6      	bne.n	310e6 <_svfiprintf_r+0x166>
   31138:	89a3      	ldrh	r3, [r4, #12]
   3113a:	065b      	lsls	r3, r3, #25
   3113c:	f53f af35 	bmi.w	30faa <_svfiprintf_r+0x2a>
   31140:	9809      	ldr	r0, [sp, #36]	; 0x24
   31142:	b01d      	add	sp, #116	; 0x74
   31144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31148:	ab03      	add	r3, sp, #12
   3114a:	4622      	mov	r2, r4
   3114c:	a904      	add	r1, sp, #16
   3114e:	4640      	mov	r0, r8
   31150:	9300      	str	r3, [sp, #0]
   31152:	4b06      	ldr	r3, [pc, #24]	; (3116c <_svfiprintf_r+0x1ec>)
   31154:	f7ff fa68 	bl	30628 <_printf_i>
   31158:	e7ea      	b.n	31130 <_svfiprintf_r+0x1b0>
   3115a:	bf00      	nop
   3115c:	00036db7 	.word	0x00036db7
   31160:	00036dbd 	.word	0x00036dbd
   31164:	00036dc1 	.word	0x00036dc1
   31168:	000301a9 	.word	0x000301a9
   3116c:	00033495 	.word	0x00033495

00031170 <_sbrk_r>:
   31170:	b538      	push	{r3, r4, r5, lr}
   31172:	2300      	movs	r3, #0
   31174:	4c05      	ldr	r4, [pc, #20]	; (3118c <_sbrk_r+0x1c>)
   31176:	4605      	mov	r5, r0
   31178:	4608      	mov	r0, r1
   3117a:	6023      	str	r3, [r4, #0]
   3117c:	f7eb fc6c 	bl	1ca58 <_sbrk>
   31180:	1c43      	adds	r3, r0, #1
   31182:	d102      	bne.n	3118a <_sbrk_r+0x1a>
   31184:	6823      	ldr	r3, [r4, #0]
   31186:	b103      	cbz	r3, 3118a <_sbrk_r+0x1a>
   31188:	602b      	str	r3, [r5, #0]
   3118a:	bd38      	pop	{r3, r4, r5, pc}
   3118c:	20025c80 	.word	0x20025c80

00031190 <raise>:
   31190:	4b02      	ldr	r3, [pc, #8]	; (3119c <raise+0xc>)
   31192:	4601      	mov	r1, r0
   31194:	6818      	ldr	r0, [r3, #0]
   31196:	f002 b9d7 	b.w	33548 <_raise_r>
   3119a:	bf00      	nop
   3119c:	20028e3c 	.word	0x20028e3c

000311a0 <_kill_r>:
   311a0:	b538      	push	{r3, r4, r5, lr}
   311a2:	2300      	movs	r3, #0
   311a4:	4c06      	ldr	r4, [pc, #24]	; (311c0 <_kill_r+0x20>)
   311a6:	4605      	mov	r5, r0
   311a8:	4608      	mov	r0, r1
   311aa:	4611      	mov	r1, r2
   311ac:	6023      	str	r3, [r4, #0]
   311ae:	f000 fc73 	bl	31a98 <_kill>
   311b2:	1c43      	adds	r3, r0, #1
   311b4:	d102      	bne.n	311bc <_kill_r+0x1c>
   311b6:	6823      	ldr	r3, [r4, #0]
   311b8:	b103      	cbz	r3, 311bc <_kill_r+0x1c>
   311ba:	602b      	str	r3, [r5, #0]
   311bc:	bd38      	pop	{r3, r4, r5, pc}
   311be:	bf00      	nop
   311c0:	20025c80 	.word	0x20025c80

000311c4 <_write_r>:
   311c4:	b538      	push	{r3, r4, r5, lr}
   311c6:	4605      	mov	r5, r0
   311c8:	4c06      	ldr	r4, [pc, #24]	; (311e4 <_write_r+0x20>)
   311ca:	4608      	mov	r0, r1
   311cc:	4611      	mov	r1, r2
   311ce:	2200      	movs	r2, #0
   311d0:	6022      	str	r2, [r4, #0]
   311d2:	461a      	mov	r2, r3
   311d4:	f000 fc55 	bl	31a82 <_write>
   311d8:	1c43      	adds	r3, r0, #1
   311da:	d102      	bne.n	311e2 <_write_r+0x1e>
   311dc:	6823      	ldr	r3, [r4, #0]
   311de:	b103      	cbz	r3, 311e2 <_write_r+0x1e>
   311e0:	602b      	str	r3, [r5, #0]
   311e2:	bd38      	pop	{r3, r4, r5, pc}
   311e4:	20025c80 	.word	0x20025c80

000311e8 <_close_r>:
   311e8:	b538      	push	{r3, r4, r5, lr}
   311ea:	2300      	movs	r3, #0
   311ec:	4c05      	ldr	r4, [pc, #20]	; (31204 <_close_r+0x1c>)
   311ee:	4605      	mov	r5, r0
   311f0:	4608      	mov	r0, r1
   311f2:	6023      	str	r3, [r4, #0]
   311f4:	f000 fc49 	bl	31a8a <_close>
   311f8:	1c43      	adds	r3, r0, #1
   311fa:	d102      	bne.n	31202 <_close_r+0x1a>
   311fc:	6823      	ldr	r3, [r4, #0]
   311fe:	b103      	cbz	r3, 31202 <_close_r+0x1a>
   31200:	602b      	str	r3, [r5, #0]
   31202:	bd38      	pop	{r3, r4, r5, pc}
   31204:	20025c80 	.word	0x20025c80

00031208 <_fstat_r>:
   31208:	b538      	push	{r3, r4, r5, lr}
   3120a:	2300      	movs	r3, #0
   3120c:	4c06      	ldr	r4, [pc, #24]	; (31228 <_fstat_r+0x20>)
   3120e:	4605      	mov	r5, r0
   31210:	4608      	mov	r0, r1
   31212:	4611      	mov	r1, r2
   31214:	6023      	str	r3, [r4, #0]
   31216:	f000 fc43 	bl	31aa0 <_fstat>
   3121a:	1c43      	adds	r3, r0, #1
   3121c:	d102      	bne.n	31224 <_fstat_r+0x1c>
   3121e:	6823      	ldr	r3, [r4, #0]
   31220:	b103      	cbz	r3, 31224 <_fstat_r+0x1c>
   31222:	602b      	str	r3, [r5, #0]
   31224:	bd38      	pop	{r3, r4, r5, pc}
   31226:	bf00      	nop
   31228:	20025c80 	.word	0x20025c80

0003122c <_isatty_r>:
   3122c:	b538      	push	{r3, r4, r5, lr}
   3122e:	2300      	movs	r3, #0
   31230:	4c05      	ldr	r4, [pc, #20]	; (31248 <_isatty_r+0x1c>)
   31232:	4605      	mov	r5, r0
   31234:	4608      	mov	r0, r1
   31236:	6023      	str	r3, [r4, #0]
   31238:	f000 fc2c 	bl	31a94 <_isatty>
   3123c:	1c43      	adds	r3, r0, #1
   3123e:	d102      	bne.n	31246 <_isatty_r+0x1a>
   31240:	6823      	ldr	r3, [r4, #0]
   31242:	b103      	cbz	r3, 31246 <_isatty_r+0x1a>
   31244:	602b      	str	r3, [r5, #0]
   31246:	bd38      	pop	{r3, r4, r5, pc}
   31248:	20025c80 	.word	0x20025c80

0003124c <_lseek_r>:
   3124c:	b538      	push	{r3, r4, r5, lr}
   3124e:	4605      	mov	r5, r0
   31250:	4c06      	ldr	r4, [pc, #24]	; (3126c <_lseek_r+0x20>)
   31252:	4608      	mov	r0, r1
   31254:	4611      	mov	r1, r2
   31256:	2200      	movs	r2, #0
   31258:	6022      	str	r2, [r4, #0]
   3125a:	461a      	mov	r2, r3
   3125c:	f000 fc18 	bl	31a90 <_lseek>
   31260:	1c43      	adds	r3, r0, #1
   31262:	d102      	bne.n	3126a <_lseek_r+0x1e>
   31264:	6823      	ldr	r3, [r4, #0]
   31266:	b103      	cbz	r3, 3126a <_lseek_r+0x1e>
   31268:	602b      	str	r3, [r5, #0]
   3126a:	bd38      	pop	{r3, r4, r5, pc}
   3126c:	20025c80 	.word	0x20025c80

00031270 <_read_r>:
   31270:	b538      	push	{r3, r4, r5, lr}
   31272:	4605      	mov	r5, r0
   31274:	4c06      	ldr	r4, [pc, #24]	; (31290 <_read_r+0x20>)
   31276:	4608      	mov	r0, r1
   31278:	4611      	mov	r1, r2
   3127a:	2200      	movs	r2, #0
   3127c:	6022      	str	r2, [r4, #0]
   3127e:	461a      	mov	r2, r3
   31280:	f000 fbfb 	bl	31a7a <_read>
   31284:	1c43      	adds	r3, r0, #1
   31286:	d102      	bne.n	3128e <_read_r+0x1e>
   31288:	6823      	ldr	r3, [r4, #0]
   3128a:	b103      	cbz	r3, 3128e <_read_r+0x1e>
   3128c:	602b      	str	r3, [r5, #0]
   3128e:	bd38      	pop	{r3, r4, r5, pc}
   31290:	20025c80 	.word	0x20025c80

00031294 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   31294:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   31298:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   3129c:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   3129e:	bf08      	it	eq
   312a0:	f06f 0015 	mvneq.w	r0, #21
   312a4:	4770      	bx	lr

000312a6 <get_bit_ptr>:
{
   312a6:	b570      	push	{r4, r5, r6, lr}
   312a8:	250c      	movs	r5, #12
   312aa:	434d      	muls	r5, r1
   312ac:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   312ae:	f990 000b 	ldrsb.w	r0, [r0, #11]
   312b2:	1974      	adds	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   312b4:	4288      	cmp	r0, r1
   312b6:	bfa8      	it	ge
   312b8:	4621      	movge	r1, r4
	*word = &bitarray[bn / 32];
   312ba:	f04f 0420 	mov.w	r4, #32
   312be:	fb92 f4f4 	sdiv	r4, r2, r4
		p->levels[level].bits : p->levels[level].bits_p;
   312c2:	bfb8      	it	lt
   312c4:	5971      	ldrlt	r1, [r6, r5]
}
   312c6:	f002 001f 	and.w	r0, r2, #31
	*word = &bitarray[bn / 32];
   312ca:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   312ce:	6019      	str	r1, [r3, #0]
}
   312d0:	bd70      	pop	{r4, r5, r6, pc}

000312d2 <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   312d2:	f04f 0320 	mov.w	r3, #32
   312d6:	f3ef 8011 	mrs	r0, BASEPRI
   312da:	f383 8811 	msr	BASEPRI, r3
   312de:	f3bf 8f6f 	isb	sy
}
   312e2:	4770      	bx	lr

000312e4 <pool_irq_unlock.isra.4>:
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   312e4:	07c3      	lsls	r3, r0, #31
   312e6:	d503      	bpl.n	312f0 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   312e8:	f381 8811 	msr	BASEPRI, r1
   312ec:	f3bf 8f6f 	isb	sy
}
   312f0:	4770      	bx	lr

000312f2 <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   312f2:	23ff      	movs	r3, #255	; 0xff
{
   312f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   312f8:	6845      	ldr	r5, [r0, #4]
	for (i = 0; i < p->n_levels; i++) {
   312fa:	2200      	movs	r2, #0
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   312fc:	4629      	mov	r1, r5
		sys_dlist_init(&p->levels[i].free_list);
   312fe:	f04f 0a0c 	mov.w	sl, #12
			bits += (nblocks + 31)/32;
   31302:	f04f 0b20 	mov.w	fp, #32
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   31306:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   31308:	6804      	ldr	r4, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   3130a:	fb05 fc07 	mul.w	ip, r5, r7
	p->max_inline_level = -1;
   3130e:	72c3      	strb	r3, [r0, #11]
	for (i = 0; i < p->n_levels; i++) {
   31310:	7a83      	ldrb	r3, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   31312:	4464      	add	r4, ip
	for (i = 0; i < p->n_levels; i++) {
   31314:	9301      	str	r3, [sp, #4]
   31316:	9b01      	ldr	r3, [sp, #4]
   31318:	4293      	cmp	r3, r2
   3131a:	dc08      	bgt.n	3132e <z_sys_mem_pool_base_init+0x3c>
   3131c:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   3131e:	4619      	mov	r1, r3
   31320:	428f      	cmp	r7, r1
   31322:	eb05 0c03 	add.w	ip, r5, r3
   31326:	dc21      	bgt.n	3136c <z_sys_mem_pool_base_init+0x7a>
}
   31328:	b003      	add	sp, #12
   3132a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   3132e:	fbbc f3f1 	udiv	r3, ip, r1
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   31332:	2b20      	cmp	r3, #32
			bits += (nblocks + 31)/32;
   31334:	bf84      	itt	hi
   31336:	331f      	addhi	r3, #31
   31338:	fb93 f3fb 	sdivhi	r3, r3, fp
		sys_dlist_init(&p->levels[i].free_list);
   3133c:	fb0a fe02 	mul.w	lr, sl, r2
   31340:	f8d0 800c 	ldr.w	r8, [r0, #12]
		sz = WB_DN(sz / 4);
   31344:	ea4f 0191 	mov.w	r1, r1, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
   31348:	eb08 060e 	add.w	r6, r8, lr
   3134c:	f106 0904 	add.w	r9, r6, #4
	list->tail = (sys_dnode_t *)list;
   31350:	e9c6 9901 	strd	r9, r9, [r6, #4]
		sz = WB_DN(sz / 4);
   31354:	f021 0103 	bic.w	r1, r1, #3
			p->max_inline_level = i;
   31358:	bf94      	ite	ls
   3135a:	72c2      	strbls	r2, [r0, #11]
			p->levels[i].bits_p = bits;
   3135c:	f848 400e 	strhi.w	r4, [r8, lr]
	for (i = 0; i < p->n_levels; i++) {
   31360:	f102 0201 	add.w	r2, r2, #1
			bits += (nblocks + 31)/32;
   31364:	bf88      	it	hi
   31366:	eb04 0483 	addhi.w	r4, r4, r3, lsl #2
   3136a:	e7d4      	b.n	31316 <z_sys_mem_pool_base_init+0x24>
		sys_dlist_append(&p->levels[0].free_list, block);
   3136c:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   3136e:	6806      	ldr	r6, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   31370:	f102 0e04 	add.w	lr, r2, #4
	return (u8_t *)p->buf + lsz * block;
   31374:	18f4      	adds	r4, r6, r3
	node->next = list;
   31376:	f846 e003 	str.w	lr, [r6, r3]
	node->prev = list->tail;
   3137a:	6893      	ldr	r3, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   3137c:	3101      	adds	r1, #1
   3137e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   31380:	6893      	ldr	r3, [r2, #8]
   31382:	601c      	str	r4, [r3, #0]
	list->tail = node;
   31384:	6094      	str	r4, [r2, #8]
   31386:	4663      	mov	r3, ip
   31388:	e7ca      	b.n	31320 <z_sys_mem_pool_base_init+0x2e>

0003138a <z_sys_mem_pool_block_alloc>:
{
   3138a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3138e:	b089      	sub	sp, #36	; 0x24
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   31390:	7a84      	ldrb	r4, [r0, #10]
{
   31392:	af00      	add	r7, sp, #0
   31394:	e9c7 3202 	strd	r3, r2, [r7, #8]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   31398:	00a3      	lsls	r3, r4, #2
   3139a:	330a      	adds	r3, #10
   3139c:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   313a0:	ebad 0d03 	sub.w	sp, sp, r3
   313a4:	46ea      	mov	sl, sp
	lsizes[0] = p->max_sz;
   313a6:	4653      	mov	r3, sl
   313a8:	6842      	ldr	r2, [r0, #4]
{
   313aa:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   313ac:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   313b0:	2200      	movs	r2, #0
   313b2:	4294      	cmp	r4, r2
   313b4:	f102 39ff 	add.w	r9, r2, #4294967295
   313b8:	dd09      	ble.n	313ce <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   313ba:	b122      	cbz	r2, 313c6 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   313bc:	6818      	ldr	r0, [r3, #0]
   313be:	0880      	lsrs	r0, r0, #2
   313c0:	f020 0003 	bic.w	r0, r0, #3
   313c4:	6058      	str	r0, [r3, #4]
		if (lsizes[i] < size) {
   313c6:	f853 0f04 	ldr.w	r0, [r3, #4]!
   313ca:	4288      	cmp	r0, r1
   313cc:	d208      	bcs.n	313e0 <z_sys_mem_pool_block_alloc+0x56>
	if (alloc_l < 0) {
   313ce:	f1b9 3fff 	cmp.w	r9, #4294967295
   313d2:	d107      	bne.n	313e4 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   313d4:	2300      	movs	r3, #0
   313d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
   313d8:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
   313da:	f06f 000b 	mvn.w	r0, #11
   313de:	e047      	b.n	31470 <z_sys_mem_pool_block_alloc+0xe6>
	for (i = 0; i < p->n_levels; i++) {
   313e0:	3201      	adds	r2, #1
   313e2:	e7e6      	b.n	313b2 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   313e4:	7c28      	ldrb	r0, [r5, #16]
   313e6:	f010 0001 	ands.w	r0, r0, #1
   313ea:	d001      	beq.n	313f0 <z_sys_mem_pool_block_alloc+0x66>
   313ec:	f7ff ff71 	bl	312d2 <pool_irq_lock.isra.2.part.3>
   313f0:	230c      	movs	r3, #12
	block = sys_dlist_get(&p->levels[l].free_list);
   313f2:	46c8      	mov	r8, r9
   313f4:	fb03 f309 	mul.w	r3, r3, r9
   313f8:	1d1a      	adds	r2, r3, #4
   313fa:	68eb      	ldr	r3, [r5, #12]
	key = pool_irq_lock(p);
   313fc:	6178      	str	r0, [r7, #20]
   313fe:	4413      	add	r3, r2
	return list->head == list;
   31400:	681c      	ldr	r4, [r3, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   31402:	42a3      	cmp	r3, r4
   31404:	d070      	beq.n	314e8 <z_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
   31406:	e9d4 2300 	ldrd	r2, r3, [r4]
   3140a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   3140c:	6822      	ldr	r2, [r4, #0]
		data = block_alloc(p, i, lsizes[i]);
   3140e:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
   31412:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   31414:	2300      	movs	r3, #0
	node->prev = NULL;
   31416:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   3141a:	682b      	ldr	r3, [r5, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   3141c:	f107 0b1c 	add.w	fp, r7, #28
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   31420:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   31422:	fb92 f2f1 	sdiv	r2, r2, r1
   31426:	465b      	mov	r3, fp
   31428:	4641      	mov	r1, r8
   3142a:	4628      	mov	r0, r5
   3142c:	f7ff ff3b 	bl	312a6 <get_bit_ptr>
	*word |= (1<<bit);
   31430:	2201      	movs	r2, #1
   31432:	69f9      	ldr	r1, [r7, #28]
   31434:	fa02 f000 	lsl.w	r0, r2, r0
   31438:	680b      	ldr	r3, [r1, #0]
   3143a:	eb0a 0688 	add.w	r6, sl, r8, lsl #2
   3143e:	4303      	orrs	r3, r0
   31440:	600b      	str	r3, [r1, #0]
   31442:	607a      	str	r2, [r7, #4]
			for (from_l = i; from_l < alloc_l; from_l++) {
   31444:	45c8      	cmp	r8, r9
   31446:	db17      	blt.n	31478 <z_sys_mem_pool_block_alloc+0xee>
	pool_irq_unlock(p, key);
   31448:	6979      	ldr	r1, [r7, #20]
   3144a:	7c28      	ldrb	r0, [r5, #16]
   3144c:	f7ff ff4a 	bl	312e4 <pool_irq_unlock.isra.4>
	*data_p = data;
   31450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31452:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   31454:	2c00      	cmp	r4, #0
   31456:	d0c0      	beq.n	313da <z_sys_mem_pool_block_alloc+0x50>
	*level_p = alloc_l;
   31458:	68fb      	ldr	r3, [r7, #12]
	return 0;
   3145a:	2000      	movs	r0, #0
	*level_p = alloc_l;
   3145c:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   31460:	682b      	ldr	r3, [r5, #0]
   31462:	1ae4      	subs	r4, r4, r3
   31464:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   31468:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   3146c:	68bb      	ldr	r3, [r7, #8]
   3146e:	601c      	str	r4, [r3, #0]
}
   31470:	3724      	adds	r7, #36	; 0x24
   31472:	46bd      	mov	sp, r7
   31474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   31478:	682b      	ldr	r3, [r5, #0]
	bn = block_num(p, block, lsizes[l]);
   3147a:	6832      	ldr	r2, [r6, #0]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   3147c:	1ae3      	subs	r3, r4, r3
   3147e:	fb93 f2f2 	sdiv	r2, r3, r2
	set_alloc_bit(p, l + 1, 4*bn);
   31482:	f108 0801 	add.w	r8, r8, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   31486:	465b      	mov	r3, fp
   31488:	0092      	lsls	r2, r2, #2
   3148a:	4641      	mov	r1, r8
   3148c:	4628      	mov	r0, r5
   3148e:	f7ff ff0a 	bl	312a6 <get_bit_ptr>
	*word |= (1<<bit);
   31492:	69fa      	ldr	r2, [r7, #28]
   31494:	687b      	ldr	r3, [r7, #4]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   31496:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   31498:	fa03 f000 	lsl.w	r0, r3, r0
   3149c:	6813      	ldr	r3, [r2, #0]
   3149e:	4303      	orrs	r3, r0
   314a0:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   314a2:	230c      	movs	r3, #12
   314a4:	2203      	movs	r2, #3
   314a6:	fb03 1108 	mla	r1, r3, r8, r1
		int lsz = lsizes[l + 1];
   314aa:	f856 0f04 	ldr.w	r0, [r6, #4]!
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   314ae:	f101 0e04 	add.w	lr, r1, #4
   314b2:	1823      	adds	r3, r4, r0
   314b4:	613a      	str	r2, [r7, #16]
	node->prev = list->tail;
   314b6:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   314b8:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   314bc:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   314be:	688a      	ldr	r2, [r1, #8]
   314c0:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   314c2:	693a      	ldr	r2, [r7, #16]
	list->tail = node;
   314c4:	608b      	str	r3, [r1, #8]
   314c6:	3a01      	subs	r2, #1
   314c8:	4403      	add	r3, r0
   314ca:	613a      	str	r2, [r7, #16]
   314cc:	d1f3      	bne.n	314b6 <z_sys_mem_pool_block_alloc+0x12c>
				pool_irq_unlock(p, key);
   314ce:	6979      	ldr	r1, [r7, #20]
   314d0:	7c28      	ldrb	r0, [r5, #16]
   314d2:	f7ff ff07 	bl	312e4 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   314d6:	7c2b      	ldrb	r3, [r5, #16]
   314d8:	07db      	lsls	r3, r3, #31
   314da:	d503      	bpl.n	314e4 <z_sys_mem_pool_block_alloc+0x15a>
   314dc:	f7ff fef9 	bl	312d2 <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   314e0:	6178      	str	r0, [r7, #20]
   314e2:	e7af      	b.n	31444 <z_sys_mem_pool_block_alloc+0xba>
		return 0;
   314e4:	6938      	ldr	r0, [r7, #16]
   314e6:	e7fb      	b.n	314e0 <z_sys_mem_pool_block_alloc+0x156>
	for (i = alloc_l; i >= 0; i--) {
   314e8:	f108 38ff 	add.w	r8, r8, #4294967295
   314ec:	f1b8 3fff 	cmp.w	r8, #4294967295
   314f0:	f1a4 030c 	sub.w	r3, r4, #12
   314f4:	d184      	bne.n	31400 <z_sys_mem_pool_block_alloc+0x76>
   314f6:	2400      	movs	r4, #0
   314f8:	e7a6      	b.n	31448 <z_sys_mem_pool_block_alloc+0xbe>

000314fa <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   314fa:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   314fc:	f7fd f81a 	bl	2e534 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   31500:	2000      	movs	r0, #0
   31502:	bd08      	pop	{r3, pc}

00031504 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, s32_t timeout)
{
   31504:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   31506:	f7fd f85d 	bl	2e5c4 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   3150a:	f110 0f0b 	cmn.w	r0, #11
   3150e:	d005      	beq.n	3151c <sys_sem_take+0x18>
   31510:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   31514:	bf08      	it	eq
   31516:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   3151a:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   3151c:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   31520:	e7fb      	b.n	3151a <sys_sem_take+0x16>

00031522 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   31522:	4604      	mov	r4, r0
   31524:	b508      	push	{r3, lr}
   31526:	4608      	mov	r0, r1
   31528:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   3152a:	461a      	mov	r2, r3
   3152c:	47a0      	blx	r4
	return z_impl_k_current_get();
   3152e:	f7fc ffc5 	bl	2e4bc <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   31532:	f7ea ffb7 	bl	1c4a4 <z_impl_k_thread_abort>

00031536 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   31536:	b510      	push	{r4, lr}
   31538:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   3153a:	f04f 31ff 	mov.w	r1, #4294967295
   3153e:	4620      	mov	r0, r4
   31540:	f7fb ffbe 	bl	2d4c0 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   31544:	4603      	mov	r3, r0
   31546:	2800      	cmp	r0, #0
   31548:	d0f7      	beq.n	3153a <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   3154a:	6842      	ldr	r2, [r0, #4]
   3154c:	3308      	adds	r3, #8
   3154e:	e8d3 1fef 	ldaex	r1, [r3]
   31552:	f021 0c01 	bic.w	ip, r1, #1
   31556:	e8c3 cfee 	stlex	lr, ip, [r3]
   3155a:	f1be 0f00 	cmp.w	lr, #0
   3155e:	d1f6      	bne.n	3154e <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   31560:	07cb      	lsls	r3, r1, #31
   31562:	d500      	bpl.n	31566 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   31564:	4790      	blx	r2
	z_impl_k_yield();
   31566:	f7fc fef7 	bl	2e358 <z_impl_k_yield>
   3156a:	e7e6      	b.n	3153a <z_work_q_main+0x4>

0003156c <z_arch_printk_char_out>:
}
   3156c:	2000      	movs	r0, #0
   3156e:	4770      	bx	lr

00031570 <print_err>:
{
   31570:	b570      	push	{r4, r5, r6, lr}
   31572:	460d      	mov	r5, r1
   31574:	4604      	mov	r4, r0
	out('E', ctx);
   31576:	2045      	movs	r0, #69	; 0x45
   31578:	47a0      	blx	r4
	out('R', ctx);
   3157a:	4629      	mov	r1, r5
   3157c:	2052      	movs	r0, #82	; 0x52
   3157e:	47a0      	blx	r4
	out('R', ctx);
   31580:	4629      	mov	r1, r5
   31582:	4623      	mov	r3, r4
}
   31584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   31588:	2052      	movs	r0, #82	; 0x52
   3158a:	4718      	bx	r3

0003158c <z_vprintk>:
{
   3158c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   31590:	2700      	movs	r7, #0
{
   31592:	4605      	mov	r5, r0
   31594:	460e      	mov	r6, r1
   31596:	4692      	mov	sl, r2
   31598:	461c      	mov	r4, r3
	int min_width = -1;
   3159a:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
   3159e:	46b8      	mov	r8, r7
	int might_format = 0; /* 1 if encountered a '%' */
   315a0:	46bb      	mov	fp, r7
{
   315a2:	b089      	sub	sp, #36	; 0x24
	while (*fmt) {
   315a4:	f89a 0000 	ldrb.w	r0, [sl]
   315a8:	b910      	cbnz	r0, 315b0 <z_vprintk+0x24>
}
   315aa:	b009      	add	sp, #36	; 0x24
   315ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
   315b0:	f1bb 0f00 	cmp.w	fp, #0
   315b4:	d107      	bne.n	315c6 <z_vprintk+0x3a>
			if (*fmt != '%') {
   315b6:	2825      	cmp	r0, #37	; 0x25
   315b8:	f000 814e 	beq.w	31858 <z_vprintk+0x2cc>
				out((int)*fmt, ctx);
   315bc:	4631      	mov	r1, r6
   315be:	47a8      	blx	r5
		++fmt;
   315c0:	f10a 0a01 	add.w	sl, sl, #1
   315c4:	e7ee      	b.n	315a4 <z_vprintk+0x18>
			switch (*fmt) {
   315c6:	2864      	cmp	r0, #100	; 0x64
   315c8:	d068      	beq.n	3169c <z_vprintk+0x110>
   315ca:	d81a      	bhi.n	31602 <z_vprintk+0x76>
   315cc:	2839      	cmp	r0, #57	; 0x39
   315ce:	d80b      	bhi.n	315e8 <z_vprintk+0x5c>
   315d0:	2831      	cmp	r0, #49	; 0x31
   315d2:	d25a      	bcs.n	3168a <z_vprintk+0xfe>
   315d4:	282d      	cmp	r0, #45	; 0x2d
   315d6:	f000 8146 	beq.w	31866 <z_vprintk+0x2da>
   315da:	2830      	cmp	r0, #48	; 0x30
   315dc:	d046      	beq.n	3166c <z_vprintk+0xe0>
   315de:	2825      	cmp	r0, #37	; 0x25
   315e0:	d108      	bne.n	315f4 <z_vprintk+0x68>
				out((int)'%', ctx);
   315e2:	4631      	mov	r1, r6
				out((int)*fmt, ctx);
   315e4:	47a8      	blx	r5
   315e6:	e07a      	b.n	316de <z_vprintk+0x152>
			switch (*fmt) {
   315e8:	2858      	cmp	r0, #88	; 0x58
   315ea:	f000 80b4 	beq.w	31756 <z_vprintk+0x1ca>
   315ee:	2863      	cmp	r0, #99	; 0x63
   315f0:	f000 812c 	beq.w	3184c <z_vprintk+0x2c0>
				out((int)'%', ctx);
   315f4:	4631      	mov	r1, r6
   315f6:	2025      	movs	r0, #37	; 0x25
   315f8:	47a8      	blx	r5
				out((int)*fmt, ctx);
   315fa:	4631      	mov	r1, r6
   315fc:	f89a 0000 	ldrb.w	r0, [sl]
   31600:	e7f0      	b.n	315e4 <z_vprintk+0x58>
			switch (*fmt) {
   31602:	2870      	cmp	r0, #112	; 0x70
   31604:	f000 809d 	beq.w	31742 <z_vprintk+0x1b6>
   31608:	d80d      	bhi.n	31626 <z_vprintk+0x9a>
   3160a:	2869      	cmp	r0, #105	; 0x69
   3160c:	d046      	beq.n	3169c <z_vprintk+0x110>
   3160e:	286c      	cmp	r0, #108	; 0x6c
   31610:	d103      	bne.n	3161a <z_vprintk+0x8e>
				} else if (*fmt == 'l' && length_mod == 'l') {
   31612:	2f6c      	cmp	r7, #108	; 0x6c
   31614:	d126      	bne.n	31664 <z_vprintk+0xd8>
					length_mod = 'L';
   31616:	274c      	movs	r7, #76	; 0x4c
   31618:	e7d2      	b.n	315c0 <z_vprintk+0x34>
			switch (*fmt) {
   3161a:	2868      	cmp	r0, #104	; 0x68
   3161c:	d1ea      	bne.n	315f4 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   3161e:	2f68      	cmp	r7, #104	; 0x68
   31620:	d120      	bne.n	31664 <z_vprintk+0xd8>
					length_mod = 'H';
   31622:	2748      	movs	r7, #72	; 0x48
   31624:	e7cc      	b.n	315c0 <z_vprintk+0x34>
			switch (*fmt) {
   31626:	2875      	cmp	r0, #117	; 0x75
   31628:	d070      	beq.n	3170c <z_vprintk+0x180>
   3162a:	d817      	bhi.n	3165c <z_vprintk+0xd0>
   3162c:	2873      	cmp	r0, #115	; 0x73
   3162e:	d1e1      	bne.n	315f4 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   31630:	6822      	ldr	r2, [r4, #0]
   31632:	f104 0b04 	add.w	fp, r4, #4
   31636:	4611      	mov	r1, r2
				while (*s) {
   31638:	460c      	mov	r4, r1
   3163a:	f814 0b01 	ldrb.w	r0, [r4], #1
   3163e:	2800      	cmp	r0, #0
   31640:	f040 80f9 	bne.w	31836 <z_vprintk+0x2aa>
				if (padding == PAD_SPACE_AFTER) {
   31644:	f1b8 0f03 	cmp.w	r8, #3
   31648:	f040 8113 	bne.w	31872 <z_vprintk+0x2e6>
					int remaining = min_width - (s - start);
   3164c:	1a8c      	subs	r4, r1, r2
   3164e:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
   31652:	2c00      	cmp	r4, #0
   31654:	f300 80f5 	bgt.w	31842 <z_vprintk+0x2b6>
				int c = va_arg(ap, int);
   31658:	465c      	mov	r4, fp
   3165a:	e040      	b.n	316de <z_vprintk+0x152>
			switch (*fmt) {
   3165c:	2878      	cmp	r0, #120	; 0x78
   3165e:	d07a      	beq.n	31756 <z_vprintk+0x1ca>
   31660:	287a      	cmp	r0, #122	; 0x7a
   31662:	d1c7      	bne.n	315f4 <z_vprintk+0x68>
				} else if (length_mod == 0) {
   31664:	2f00      	cmp	r7, #0
   31666:	d1c5      	bne.n	315f4 <z_vprintk+0x68>
   31668:	4607      	mov	r7, r0
   3166a:	e7a9      	b.n	315c0 <z_vprintk+0x34>
				if (min_width < 0 && padding == PAD_NONE) {
   3166c:	f1b9 0f00 	cmp.w	r9, #0
   31670:	da0e      	bge.n	31690 <z_vprintk+0x104>
   31672:	f1b8 0f00 	cmp.w	r8, #0
   31676:	f000 80f9 	beq.w	3186c <z_vprintk+0x2e0>
					min_width = *fmt - '0';
   3167a:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   3167e:	f1b8 0f00 	cmp.w	r8, #0
   31682:	bf08      	it	eq
   31684:	f04f 0802 	moveq.w	r8, #2
   31688:	e79a      	b.n	315c0 <z_vprintk+0x34>
				if (min_width < 0) {
   3168a:	f1b9 0f00 	cmp.w	r9, #0
   3168e:	dbf4      	blt.n	3167a <z_vprintk+0xee>
					min_width = 10 * min_width + *fmt - '0';
   31690:	220a      	movs	r2, #10
   31692:	fb02 0909 	mla	r9, r2, r9, r0
   31696:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   3169a:	e7f0      	b.n	3167e <z_vprintk+0xf2>
				if (length_mod == 'z') {
   3169c:	2f7a      	cmp	r7, #122	; 0x7a
   3169e:	d103      	bne.n	316a8 <z_vprintk+0x11c>
					d = va_arg(ap, int);
   316a0:	f8d4 b000 	ldr.w	fp, [r4]
   316a4:	3404      	adds	r4, #4
   316a6:	e01e      	b.n	316e6 <z_vprintk+0x15a>
				} else if (length_mod == 'l') {
   316a8:	2f6c      	cmp	r7, #108	; 0x6c
   316aa:	d0f9      	beq.n	316a0 <z_vprintk+0x114>
				} else if (length_mod == 'L') {
   316ac:	2f4c      	cmp	r7, #76	; 0x4c
   316ae:	d1f7      	bne.n	316a0 <z_vprintk+0x114>
					if (lld > __LONG_MAX__ ||
   316b0:	f04f 0c00 	mov.w	ip, #0
   316b4:	f04f 3bff 	mov.w	fp, #4294967295
					long long lld = va_arg(ap, long long);
   316b8:	3407      	adds	r4, #7
   316ba:	f024 0307 	bic.w	r3, r4, #7
   316be:	f103 0408 	add.w	r4, r3, #8
   316c2:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (lld > __LONG_MAX__ ||
   316c6:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
   316ca:	f143 0100 	adc.w	r1, r3, #0
   316ce:	458c      	cmp	ip, r1
   316d0:	bf08      	it	eq
   316d2:	4583      	cmpeq	fp, r0
   316d4:	d206      	bcs.n	316e4 <z_vprintk+0x158>
						print_err(out, ctx);
   316d6:	4631      	mov	r1, r6
   316d8:	4628      	mov	r0, r5
   316da:	f7ff ff49 	bl	31570 <print_err>
			might_format = 0;
   316de:	f04f 0b00 	mov.w	fp, #0
				break;
   316e2:	e76d      	b.n	315c0 <z_vprintk+0x34>
					d = lld;
   316e4:	4693      	mov	fp, r2
				if (d < 0) {
   316e6:	f1bb 0f00 	cmp.w	fp, #0
   316ea:	da06      	bge.n	316fa <z_vprintk+0x16e>
					out((int)'-', ctx);
   316ec:	4631      	mov	r1, r6
   316ee:	202d      	movs	r0, #45	; 0x2d
   316f0:	47a8      	blx	r5
					d = -d;
   316f2:	f1cb 0b00 	rsb	fp, fp, #0
					min_width--;
   316f6:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
   316fa:	4643      	mov	r3, r8
   316fc:	465a      	mov	r2, fp
   316fe:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   31702:	4631      	mov	r1, r6
   31704:	4628      	mov	r0, r5
   31706:	f7e9 fb17 	bl	1ad38 <_printk_dec_ulong>
   3170a:	e7e8      	b.n	316de <z_vprintk+0x152>
				if (length_mod == 'z') {
   3170c:	2f7a      	cmp	r7, #122	; 0x7a
   3170e:	d102      	bne.n	31716 <z_vprintk+0x18a>
					u = va_arg(ap, unsigned int);
   31710:	6822      	ldr	r2, [r4, #0]
   31712:	3404      	adds	r4, #4
   31714:	e011      	b.n	3173a <z_vprintk+0x1ae>
				} else if (length_mod == 'l') {
   31716:	2f6c      	cmp	r7, #108	; 0x6c
   31718:	d0fa      	beq.n	31710 <z_vprintk+0x184>
				} else if (length_mod == 'L') {
   3171a:	2f4c      	cmp	r7, #76	; 0x4c
   3171c:	d1f8      	bne.n	31710 <z_vprintk+0x184>
					if (llu > ~0UL) {
   3171e:	2100      	movs	r1, #0
   31720:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
   31724:	3407      	adds	r4, #7
   31726:	f024 0307 	bic.w	r3, r4, #7
   3172a:	f103 0408 	add.w	r4, r3, #8
   3172e:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > ~0UL) {
   31732:	4299      	cmp	r1, r3
   31734:	bf08      	it	eq
   31736:	4290      	cmpeq	r0, r2
   31738:	d3cd      	bcc.n	316d6 <z_vprintk+0x14a>
				_printk_dec_ulong(out, ctx, u, padding,
   3173a:	f8cd 9000 	str.w	r9, [sp]
   3173e:	4643      	mov	r3, r8
   31740:	e7df      	b.n	31702 <z_vprintk+0x176>
				  out('0', ctx);
   31742:	4631      	mov	r1, r6
   31744:	2030      	movs	r0, #48	; 0x30
   31746:	47a8      	blx	r5
				  out('x', ctx);
   31748:	4631      	mov	r1, r6
   3174a:	2078      	movs	r0, #120	; 0x78
   3174c:	47a8      	blx	r5
				  min_width = 8;
   3174e:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
   31752:	f04f 0801 	mov.w	r8, #1
				if (*fmt == 'p') {
   31756:	f89a 2000 	ldrb.w	r2, [sl]
   3175a:	2a70      	cmp	r2, #112	; 0x70
   3175c:	d105      	bne.n	3176a <z_vprintk+0x1de>
					x = va_arg(ap, unsigned int);
   3175e:	6823      	ldr	r3, [r4, #0]
   31760:	3404      	adds	r4, #4
   31762:	9304      	str	r3, [sp, #16]
   31764:	2300      	movs	r3, #0
   31766:	9302      	str	r3, [sp, #8]
   31768:	e00c      	b.n	31784 <z_vprintk+0x1f8>
				} else if (length_mod == 'l') {
   3176a:	2f6c      	cmp	r7, #108	; 0x6c
   3176c:	d0f7      	beq.n	3175e <z_vprintk+0x1d2>
				} else if (length_mod == 'L') {
   3176e:	2f4c      	cmp	r7, #76	; 0x4c
   31770:	d1f5      	bne.n	3175e <z_vprintk+0x1d2>
					x = va_arg(ap, unsigned long long);
   31772:	3407      	adds	r4, #7
   31774:	f024 0207 	bic.w	r2, r4, #7
   31778:	6813      	ldr	r3, [r2, #0]
   3177a:	f102 0408 	add.w	r4, r2, #8
   3177e:	9304      	str	r3, [sp, #16]
   31780:	6853      	ldr	r3, [r2, #4]
   31782:	9302      	str	r3, [sp, #8]
	int digits = 0;
   31784:	2200      	movs	r2, #0
	int remaining = 16; /* 16 digits max */
   31786:	2310      	movs	r3, #16
	int digits = 0;
   31788:	9203      	str	r2, [sp, #12]
	int found_largest_digit = 0;
   3178a:	9205      	str	r2, [sp, #20]
	int shift = sizeof(num) * 8;
   3178c:	2240      	movs	r2, #64	; 0x40
		shift -= 4;
   3178e:	3a04      	subs	r2, #4
		nibble = (num >> shift) & 0xf;
   31790:	9902      	ldr	r1, [sp, #8]
   31792:	9804      	ldr	r0, [sp, #16]
   31794:	f1c2 0c20 	rsb	ip, r2, #32
   31798:	f1a2 0e20 	sub.w	lr, r2, #32
   3179c:	40d0      	lsrs	r0, r2
   3179e:	fa01 fc0c 	lsl.w	ip, r1, ip
   317a2:	ea40 000c 	orr.w	r0, r0, ip
   317a6:	fa21 fe0e 	lsr.w	lr, r1, lr
   317aa:	ea40 000e 	orr.w	r0, r0, lr
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   317ae:	f010 000f 	ands.w	r0, r0, #15
   317b2:	d108      	bne.n	317c6 <z_vprintk+0x23a>
   317b4:	9905      	ldr	r1, [sp, #20]
   317b6:	b901      	cbnz	r1, 317ba <z_vprintk+0x22e>
   317b8:	bb42      	cbnz	r2, 3180c <z_vprintk+0x280>
			nibble += nibble > 9 ? 87 : 48;
   317ba:	f04f 0c30 	mov.w	ip, #48	; 0x30
   317be:	e008      	b.n	317d2 <z_vprintk+0x246>
			found_largest_digit = 1;
   317c0:	f8cd b014 	str.w	fp, [sp, #20]
   317c4:	e7e3      	b.n	3178e <z_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
   317c6:	2809      	cmp	r0, #9
   317c8:	bf8c      	ite	hi
   317ca:	f04f 0c57 	movhi.w	ip, #87	; 0x57
   317ce:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
   317d2:	4631      	mov	r1, r6
   317d4:	4460      	add	r0, ip
   317d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
   317da:	47a8      	blx	r5
			digits++;
   317dc:	9b03      	ldr	r3, [sp, #12]
   317de:	3301      	adds	r3, #1
   317e0:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   317e2:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   317e6:	2a00      	cmp	r2, #0
   317e8:	d1ea      	bne.n	317c0 <z_vprintk+0x234>
	if (padding == PAD_SPACE_AFTER) {
   317ea:	f1b8 0f03 	cmp.w	r8, #3
   317ee:	f47f af76 	bne.w	316de <z_vprintk+0x152>
		remaining = min_width * 2 - digits;
   317f2:	9b03      	ldr	r3, [sp, #12]
   317f4:	ebc3 0b49 	rsb	fp, r3, r9, lsl #1
		while (remaining-- > 0) {
   317f8:	f1bb 0f00 	cmp.w	fp, #0
   317fc:	f77f af6f 	ble.w	316de <z_vprintk+0x152>
			out(' ', ctx);
   31800:	4631      	mov	r1, r6
   31802:	2020      	movs	r0, #32
   31804:	47a8      	blx	r5
   31806:	f10b 3bff 	add.w	fp, fp, #4294967295
   3180a:	e7f5      	b.n	317f8 <z_vprintk+0x26c>
		if (remaining-- <= min_width) {
   3180c:	1e59      	subs	r1, r3, #1
   3180e:	4599      	cmp	r9, r3
   31810:	9106      	str	r1, [sp, #24]
   31812:	db07      	blt.n	31824 <z_vprintk+0x298>
			if (padding == PAD_ZERO_BEFORE) {
   31814:	f1b8 0f01 	cmp.w	r8, #1
   31818:	d106      	bne.n	31828 <z_vprintk+0x29c>
				out('0', ctx);
   3181a:	4631      	mov	r1, r6
   3181c:	2030      	movs	r0, #48	; 0x30
   3181e:	9207      	str	r2, [sp, #28]
				out(' ', ctx);
   31820:	47a8      	blx	r5
   31822:	9a07      	ldr	r2, [sp, #28]
					x = va_arg(ap, unsigned int);
   31824:	9b06      	ldr	r3, [sp, #24]
   31826:	e7b2      	b.n	3178e <z_vprintk+0x202>
			} else if (padding == PAD_SPACE_BEFORE) {
   31828:	f1b8 0f02 	cmp.w	r8, #2
   3182c:	d1fa      	bne.n	31824 <z_vprintk+0x298>
   3182e:	9207      	str	r2, [sp, #28]
				out(' ', ctx);
   31830:	4631      	mov	r1, r6
   31832:	2020      	movs	r0, #32
   31834:	e7f4      	b.n	31820 <z_vprintk+0x294>
					out((int)(*s++), ctx);
   31836:	4631      	mov	r1, r6
   31838:	9202      	str	r2, [sp, #8]
   3183a:	47a8      	blx	r5
   3183c:	4621      	mov	r1, r4
   3183e:	9a02      	ldr	r2, [sp, #8]
   31840:	e6fa      	b.n	31638 <z_vprintk+0xac>
						out(' ', ctx);
   31842:	4631      	mov	r1, r6
   31844:	2020      	movs	r0, #32
   31846:	47a8      	blx	r5
   31848:	3c01      	subs	r4, #1
   3184a:	e702      	b.n	31652 <z_vprintk+0xc6>
				out(c, ctx);
   3184c:	4631      	mov	r1, r6
   3184e:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
   31850:	f104 0b04 	add.w	fp, r4, #4
				out(c, ctx);
   31854:	47a8      	blx	r5
   31856:	e6ff      	b.n	31658 <z_vprintk+0xcc>
				length_mod = 0;
   31858:	465f      	mov	r7, fp
				padding = PAD_NONE;
   3185a:	46d8      	mov	r8, fp
				min_width = -1;
   3185c:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
   31860:	f04f 0b01 	mov.w	fp, #1
   31864:	e6ac      	b.n	315c0 <z_vprintk+0x34>
				padding = PAD_SPACE_AFTER;
   31866:	f04f 0803 	mov.w	r8, #3
   3186a:	e6a9      	b.n	315c0 <z_vprintk+0x34>
					padding = PAD_ZERO_BEFORE;
   3186c:	f04f 0801 	mov.w	r8, #1
   31870:	e6a6      	b.n	315c0 <z_vprintk+0x34>
				char *s = va_arg(ap, char *);
   31872:	465c      	mov	r4, fp
			might_format = 0;
   31874:	4683      	mov	fp, r0
   31876:	e6a3      	b.n	315c0 <z_vprintk+0x34>

00031878 <printk>:
{
   31878:	b40f      	push	{r0, r1, r2, r3}
   3187a:	b507      	push	{r0, r1, r2, lr}
   3187c:	a904      	add	r1, sp, #16
   3187e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   31882:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   31884:	f7e9 faaa 	bl	1addc <vprintk>
}
   31888:	b003      	add	sp, #12
   3188a:	f85d eb04 	ldr.w	lr, [sp], #4
   3188e:	b004      	add	sp, #16
   31890:	4770      	bx	lr

00031892 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   31892:	4040      	eors	r0, r0
   31894:	f380 8811 	msr	BASEPRI, r0
   31898:	f04f 0004 	mov.w	r0, #4
   3189c:	df02      	svc	2

0003189e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_BOOTLOADER_MCUBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   3189e:	4770      	bx	lr

000318a0 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   318a0:	f7fb b97e 	b.w	2cba0 <SystemInit>

000318a4 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   318a4:	6843      	ldr	r3, [r0, #4]
}
   318a6:	7958      	ldrb	r0, [r3, #5]
   318a8:	4770      	bx	lr

000318aa <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t z_arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   318aa:	f7ea b845 	b.w	1b938 <z_timer_cycle_get_32>

000318ae <dummy_timestamp>:
   318ae:	2000      	movs	r0, #0
   318b0:	4770      	bx	lr

000318b2 <log_string_sync>:
{
   318b2:	b40e      	push	{r1, r2, r3}
   318b4:	b503      	push	{r0, r1, lr}
   318b6:	aa03      	add	r2, sp, #12
   318b8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   318bc:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap);
   318be:	f7e9 fab1 	bl	1ae24 <log_generic>
}
   318c2:	b002      	add	sp, #8
   318c4:	f85d eb04 	ldr.w	lr, [sp], #4
   318c8:	b003      	add	sp, #12
   318ca:	4770      	bx	lr

000318cc <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
   318cc:	b508      	push	{r3, lr}
				K_THREAD_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   318ce:	f7e9 fb1f 	bl	1af10 <log_init>
	}

	return 0;
}
   318d2:	2000      	movs	r0, #0
   318d4:	bd08      	pop	{r3, pc}

000318d6 <log_strdup>:
}
   318d6:	4770      	bx	lr

000318d8 <buffer_write>:
{
   318d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   318da:	4606      	mov	r6, r0
   318dc:	460d      	mov	r5, r1
   318de:	4614      	mov	r4, r2
   318e0:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   318e2:	4621      	mov	r1, r4
   318e4:	4628      	mov	r0, r5
   318e6:	463a      	mov	r2, r7
   318e8:	47b0      	blx	r6
	} while (len != 0);
   318ea:	1a24      	subs	r4, r4, r0
		buf += processed;
   318ec:	4405      	add	r5, r0
	} while (len != 0);
   318ee:	d1f8      	bne.n	318e2 <buffer_write+0xa>
}
   318f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000318f2 <log_output_flush>:
		     log_output->control_block->offset,
   318f2:	6842      	ldr	r2, [r0, #4]
{
   318f4:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   318f6:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   318fa:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   318fc:	6881      	ldr	r1, [r0, #8]
   318fe:	6800      	ldr	r0, [r0, #0]
   31900:	f7ff ffea 	bl	318d8 <buffer_write>
	log_output->control_block->offset = 0;
   31904:	2200      	movs	r2, #0
   31906:	6863      	ldr	r3, [r4, #4]
   31908:	601a      	str	r2, [r3, #0]
}
   3190a:	bd10      	pop	{r4, pc}

0003190c <char_out>:
{
   3190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3190e:	460d      	mov	r5, r1
   31910:	4616      	mov	r6, r2
   31912:	4604      	mov	r4, r0
   31914:	1847      	adds	r7, r0, r1
	for (size_t i = 0; i < length; i++) {
   31916:	42bc      	cmp	r4, r7
   31918:	d101      	bne.n	3191e <char_out+0x12>
}
   3191a:	4628      	mov	r0, r5
   3191c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   3191e:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
   31922:	6873      	ldr	r3, [r6, #4]
   31924:	4630      	mov	r0, r6
   31926:	685b      	ldr	r3, [r3, #4]
   31928:	4798      	blx	r3
   3192a:	e7f4      	b.n	31916 <char_out+0xa>

0003192c <z_impl_uart_poll_out>:
   3192c:	6843      	ldr	r3, [r0, #4]
   3192e:	685b      	ldr	r3, [r3, #4]
   31930:	4718      	bx	r3

00031932 <debug_hook_out_nop>:
}
   31932:	2000      	movs	r0, #0
   31934:	4770      	bx	lr

00031936 <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
   31936:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
   31938:	7a5a      	ldrb	r2, [r3, #9]
   3193a:	b932      	cbnz	r2, 3194a <get_status+0x14>
	if (data->ref > 0) {
   3193c:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
   31940:	2800      	cmp	r0, #0
   31942:	bfcc      	ite	gt
   31944:	2000      	movgt	r0, #0
   31946:	2001      	movle	r0, #1
   31948:	4770      	bx	lr
   3194a:	2002      	movs	r0, #2
}
   3194c:	4770      	bx	lr

0003194e <clock_stop>:
	const struct nrf_clock_control_config *config =
   3194e:	6802      	ldr	r2, [r0, #0]
{
   31950:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
   31952:	6896      	ldr	r6, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
   31954:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
   31956:	f04f 0320 	mov.w	r3, #32
   3195a:	f3ef 8511 	mrs	r5, BASEPRI
   3195e:	f383 8811 	msr	BASEPRI, r3
   31962:	f3bf 8f6f 	isb	sy
	data->ref--;
   31966:	7a23      	ldrb	r3, [r4, #8]
   31968:	3b01      	subs	r3, #1
   3196a:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
   3196c:	2b00      	cmp	r3, #0
	data->ref--;
   3196e:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
   31970:	d11c      	bne.n	319ac <clock_stop+0x5e>
   31972:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
   31976:	6873      	ldr	r3, [r6, #4]
				config->stop_handler(dev) : true;
   31978:	b9a3      	cbnz	r3, 319a4 <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   3197a:	2201      	movs	r2, #1
   3197c:	7af3      	ldrb	r3, [r6, #11]
   3197e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   31982:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   31986:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   31988:	2200      	movs	r2, #0
   3198a:	8933      	ldrh	r3, [r6, #8]
   3198c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   31990:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   31994:	601a      	str	r2, [r3, #0]
		data->started = false;
   31996:	2000      	movs	r0, #0
   31998:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   3199a:	f385 8811 	msr	BASEPRI, r5
   3199e:	f3bf 8f6f 	isb	sy
}
   319a2:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
   319a4:	4798      	blx	r3
   319a6:	2800      	cmp	r0, #0
   319a8:	d1e7      	bne.n	3197a <clock_stop+0x2c>
   319aa:	e7f4      	b.n	31996 <clock_stop+0x48>
   319ac:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
   319b0:	bfbc      	itt	lt
   319b2:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
   319b4:	f06f 0077 	mvnlt.w	r0, #119	; 0x77
   319b8:	e7ef      	b.n	3199a <clock_stop+0x4c>

000319ba <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   319ba:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
   319bc:	2000      	movs	r0, #0
	list->tail = NULL;
   319be:	e9c3 0000 	strd	r0, r0, [r3]
}
   319c2:	4770      	bx	lr

000319c4 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   319c4:	2200      	movs	r2, #0
   319c6:	f7e9 bdb5 	b.w	1b534 <clock_async_start>

000319ca <clkstarted_handle>:
{
   319ca:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
   319cc:	6884      	ldr	r4, [r0, #8]
{
   319ce:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
   319d0:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   319d2:	b12b      	cbz	r3, 319e0 <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   319d4:	6861      	ldr	r1, [r4, #4]
	return node->next;
   319d6:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   319d8:	428b      	cmp	r3, r1
	list->head = node;
   319da:	6022      	str	r2, [r4, #0]
	list->tail = node;
   319dc:	bf08      	it	eq
   319de:	6062      	streq	r2, [r4, #4]
	data->started = true;
   319e0:	2201      	movs	r2, #1
   319e2:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
   319e4:	b903      	cbnz	r3, 319e8 <clkstarted_handle+0x1e>
}
   319e6:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   319e8:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   319ec:	4628      	mov	r0, r5
   319ee:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
   319f0:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   319f2:	2b00      	cmp	r3, #0
   319f4:	d0f7      	beq.n	319e6 <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   319f6:	6861      	ldr	r1, [r4, #4]
	return node->next;
   319f8:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   319fa:	428b      	cmp	r3, r1
	list->head = node;
   319fc:	6022      	str	r2, [r4, #0]
	list->tail = node;
   319fe:	bf08      	it	eq
   31a00:	6062      	streq	r2, [r4, #4]
   31a02:	e7ef      	b.n	319e4 <clkstarted_handle+0x1a>

00031a04 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   31a04:	4770      	bx	lr

00031a06 <z_irq_spurious>:
	z_arm_reserved();
   31a06:	f7ea b873 	b.w	1baf0 <z_arm_bus_fault>

00031a0a <z_arch_isr_direct_header>:
#endif

void z_arch_isr_direct_header(void)
{
	sys_trace_isr_enter();
}
   31a0a:	4770      	bx	lr

00031a0c <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   31a0c:	6d83      	ldr	r3, [r0, #88]	; 0x58
   31a0e:	f383 880b 	msr	PSPLIM, r3
}
   31a12:	4770      	bx	lr

00031a14 <z_do_kernel_oops>:

void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   31a14:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   31a16:	6800      	ldr	r0, [r0, #0]
   31a18:	f7ea b98a 	b.w	1bd30 <z_arm_fatal_error>

00031a1c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   31a1c:	b508      	push	{r3, lr}
	handler();
   31a1e:	f7ea f879 	bl	1bb14 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   31a22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   31a26:	f7e9 bfd7 	b.w	1b9d8 <z_arm_exc_exit>

00031a2a <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   31a2a:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   31a2c:	2100      	movs	r1, #0
   31a2e:	a801      	add	r0, sp, #4
   31a30:	f7ea ff9a 	bl	1c968 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   31a34:	b003      	add	sp, #12
   31a36:	f85d fb04 	ldr.w	pc, [sp], #4

00031a3a <mpu_configure_region>:
{
   31a3a:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   31a3c:	684b      	ldr	r3, [r1, #4]
{
   31a3e:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   31a40:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   31a42:	f89d 2008 	ldrb.w	r2, [sp, #8]
   31a46:	890d      	ldrh	r5, [r1, #8]
   31a48:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   31a4a:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   31a4c:	f024 041f 	bic.w	r4, r4, #31
   31a50:	3b01      	subs	r3, #1
	p_attr->rbar = attr->rbar &
   31a52:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   31a56:	4423      	add	r3, r4
	p_attr->mair_idx = attr->mair_idx;
   31a58:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   31a5c:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   31a60:	4669      	mov	r1, sp
	p_attr->mair_idx = attr->mair_idx;
   31a62:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   31a66:	9303      	str	r3, [sp, #12]
   31a68:	f7ea fd9c 	bl	1c5a4 <region_allocate_and_init>
}
   31a6c:	b005      	add	sp, #20
   31a6e:	bd30      	pop	{r4, r5, pc}

00031a70 <_stdout_hook_default>:
}
   31a70:	f04f 30ff 	mov.w	r0, #4294967295
   31a74:	4770      	bx	lr

00031a76 <_stdin_hook_default>:
}
   31a76:	2000      	movs	r0, #0
   31a78:	4770      	bx	lr

00031a7a <_read>:
{
   31a7a:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   31a7c:	4611      	mov	r1, r2
   31a7e:	f7ea bfb3 	b.w	1c9e8 <z_impl_zephyr_read_stdin>

00031a82 <_write>:
{
   31a82:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   31a84:	4611      	mov	r1, r2
   31a86:	f7ea bfc3 	b.w	1ca10 <z_impl_zephyr_write_stdout>

00031a8a <_close>:
   31a8a:	f04f 30ff 	mov.w	r0, #4294967295
   31a8e:	4770      	bx	lr

00031a90 <_lseek>:
}
   31a90:	2000      	movs	r0, #0
   31a92:	4770      	bx	lr

00031a94 <_isatty>:
}
   31a94:	2001      	movs	r0, #1
   31a96:	4770      	bx	lr

00031a98 <_kill>:
}
   31a98:	2000      	movs	r0, #0
   31a9a:	4770      	bx	lr

00031a9c <_getpid>:
}
   31a9c:	2000      	movs	r0, #0
   31a9e:	4770      	bx	lr

00031aa0 <_fstat>:
	st->st_mode = S_IFCHR;
   31aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   31aa4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   31aa6:	604b      	str	r3, [r1, #4]
}
   31aa8:	4770      	bx	lr

00031aaa <__errno>:
	if (z_syscall_trap()) {
		return (int *) z_arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   31aaa:	f7fb b99f 	b.w	2cdec <z_impl_z_errno>

00031aae <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   31aae:	b508      	push	{r3, lr}
	net_if_init();
   31ab0:	f7eb f868 	bl	1cb84 <net_if_init>
	net_if_post_init();
   31ab4:	f7eb f87e 	bl	1cbb4 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   31ab8:	2000      	movs	r0, #0
   31aba:	bd08      	pop	{r3, pc}

00031abc <l2_flags_get>:
	return iface->if_dev->l2;
   31abc:	6803      	ldr	r3, [r0, #0]
   31abe:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   31ac0:	b113      	cbz	r3, 31ac8 <l2_flags_get+0xc>
   31ac2:	68db      	ldr	r3, [r3, #12]
   31ac4:	b103      	cbz	r3, 31ac8 <l2_flags_get+0xc>
		flags = net_if_l2(iface)->get_flags(iface);
   31ac6:	4718      	bx	r3
}
   31ac8:	2000      	movs	r0, #0
   31aca:	4770      	bx	lr

00031acc <gpio_nrfx_write>:
{
   31acc:	b510      	push	{r4, lr}
	return port->config->config_info;
   31ace:	6804      	ldr	r4, [r0, #0]
   31ad0:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   31ad2:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   31ad4:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   31ad6:	6824      	ldr	r4, [r4, #0]
   31ad8:	69c0      	ldr	r0, [r0, #28]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   31ada:	d103      	bne.n	31ae4 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   31adc:	4058      	eors	r0, r3
    p_reg->OUT = value;
   31ade:	6060      	str	r0, [r4, #4]
}
   31ae0:	2000      	movs	r0, #0
   31ae2:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   31ae4:	3300      	adds	r3, #0
   31ae6:	f04f 0101 	mov.w	r1, #1
   31aea:	bf18      	it	ne
   31aec:	2301      	movne	r3, #1
   31aee:	40d0      	lsrs	r0, r2
   31af0:	f000 0001 	and.w	r0, r0, #1
   31af4:	4091      	lsls	r1, r2
   31af6:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   31af8:	bf14      	ite	ne
   31afa:	60a1      	strne	r1, [r4, #8]
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   31afc:	60e1      	streq	r1, [r4, #12]
   31afe:	e7ef      	b.n	31ae0 <gpio_nrfx_write+0x14>

00031b00 <gpio_nrfx_read>:
{
   31b00:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   31b02:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   31b04:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   31b06:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   31b08:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   31b0a:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   31b0c:	2901      	cmp	r1, #1
    return p_reg->DIR;
   31b0e:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   31b10:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   31b12:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   31b14:	ea80 0004 	eor.w	r0, r0, r4
   31b18:	ea84 0405 	eor.w	r4, r4, r5
   31b1c:	ea04 0406 	and.w	r4, r4, r6
   31b20:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   31b24:	bf1c      	itt	ne
   31b26:	40d0      	lsrne	r0, r2
   31b28:	f000 0001 	andne.w	r0, r0, #1
   31b2c:	6018      	str	r0, [r3, #0]
}
   31b2e:	2000      	movs	r0, #0
   31b30:	bd70      	pop	{r4, r5, r6, pc}

00031b32 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   31b32:	2901      	cmp	r1, #1
{
   31b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   31b38:	bf18      	it	ne
   31b3a:	b2d4      	uxtbne	r4, r2
{
   31b3c:	4606      	mov	r6, r0
		to_pin   = pin;
   31b3e:	bf12      	itee	ne
   31b40:	4625      	movne	r5, r4
		to_pin   = 31U;
   31b42:	251f      	moveq	r5, #31
		from_pin = 0U;
   31b44:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   31b46:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   31b4a:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   31b4c:	42ac      	cmp	r4, r5
   31b4e:	d902      	bls.n	31b56 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   31b50:	2000      	movs	r0, #0
}
   31b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   31b56:	68fb      	ldr	r3, [r7, #12]
   31b58:	fa08 f204 	lsl.w	r2, r8, r4
   31b5c:	ea23 0302 	bic.w	r3, r3, r2
   31b60:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   31b62:	4621      	mov	r1, r4
   31b64:	4630      	mov	r0, r6
   31b66:	f7eb f8b9 	bl	1ccdc <gpiote_pin_int_cfg>
		if (res != 0) {
   31b6a:	2800      	cmp	r0, #0
   31b6c:	d1f1      	bne.n	31b52 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   31b6e:	3401      	adds	r4, #1
   31b70:	b2e4      	uxtb	r4, r4
   31b72:	e7eb      	b.n	31b4c <gpio_nrfx_pin_disable_callback+0x1a>

00031b74 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   31b74:	2901      	cmp	r1, #1
{
   31b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   31b7a:	bf18      	it	ne
   31b7c:	b2d4      	uxtbne	r4, r2
{
   31b7e:	4606      	mov	r6, r0
		to_pin   = pin;
   31b80:	bf12      	itee	ne
   31b82:	4625      	movne	r5, r4
		to_pin   = 31U;
   31b84:	251f      	moveq	r5, #31
		from_pin = 0U;
   31b86:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   31b88:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   31b8c:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   31b8e:	42ac      	cmp	r4, r5
   31b90:	d902      	bls.n	31b98 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   31b92:	2000      	movs	r0, #0
}
   31b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   31b98:	68fb      	ldr	r3, [r7, #12]
   31b9a:	fa08 f204 	lsl.w	r2, r8, r4
   31b9e:	4313      	orrs	r3, r2
   31ba0:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   31ba2:	4621      	mov	r1, r4
   31ba4:	4630      	mov	r0, r6
   31ba6:	f7eb f899 	bl	1ccdc <gpiote_pin_int_cfg>
		if (res != 0) {
   31baa:	2800      	cmp	r0, #0
   31bac:	d1f2      	bne.n	31b94 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   31bae:	3401      	adds	r4, #1
   31bb0:	b2e4      	uxtb	r4, r4
   31bb2:	e7ec      	b.n	31b8e <gpio_nrfx_pin_enable_callback+0x1a>

00031bb4 <is_regular_addr_valid>:
{
   31bb4:	b538      	push	{r3, r4, r5, lr}
   31bb6:	4604      	mov	r4, r0
   31bb8:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   31bba:	f000 fd15 	bl	325e8 <nrfx_nvmc_flash_size_get>
	if (addr >= DT_FLASH_BASE_ADDRESS + flash_size ||
   31bbe:	4284      	cmp	r4, r0
   31bc0:	d209      	bcs.n	31bd6 <is_regular_addr_valid+0x22>
   31bc2:	2c00      	cmp	r4, #0
   31bc4:	db07      	blt.n	31bd6 <is_regular_addr_valid+0x22>
	    addr < DT_FLASH_BASE_ADDRESS ||
   31bc6:	42a8      	cmp	r0, r5
   31bc8:	d305      	bcc.n	31bd6 <is_regular_addr_valid+0x22>
	    (addr - DT_FLASH_BASE_ADDRESS) + len > flash_size) {
   31bca:	442c      	add	r4, r5
	    len > flash_size ||
   31bcc:	4284      	cmp	r4, r0
   31bce:	bf8c      	ite	hi
   31bd0:	2000      	movhi	r0, #0
   31bd2:	2001      	movls	r0, #1
}
   31bd4:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   31bd6:	2000      	movs	r0, #0
   31bd8:	e7fc      	b.n	31bd4 <is_regular_addr_valid+0x20>

00031bda <flash_nrf_read>:
{
   31bda:	b570      	push	{r4, r5, r6, lr}
   31bdc:	460d      	mov	r5, r1
	return is_regular_addr_valid(addr, len) ||
   31bde:	4619      	mov	r1, r3
   31be0:	4628      	mov	r0, r5
{
   31be2:	4616      	mov	r6, r2
   31be4:	461c      	mov	r4, r3
	return is_regular_addr_valid(addr, len) ||
   31be6:	f7ff ffe5 	bl	31bb4 <is_regular_addr_valid>
	if (!is_addr_valid(addr, len)) {
   31bea:	b170      	cbz	r0, 31c0a <flash_nrf_read+0x30>
	if (!len) {
   31bec:	b184      	cbz	r4, 31c10 <flash_nrf_read+0x36>
	if (addr < PM_APP_ADDRESS) {
   31bee:	f5b5 3fc1 	cmp.w	r5, #98816	; 0x18200
		return spm_request_read(data, addr, len);
   31bf2:	4622      	mov	r2, r4
   31bf4:	4629      	mov	r1, r5
   31bf6:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   31bf8:	da03      	bge.n	31c02 <flash_nrf_read+0x28>
}
   31bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return spm_request_read(data, addr, len);
   31bfe:	f7e6 b9ef 	b.w	17fe0 <spm_request_read>
   31c02:	f000 fe70 	bl	328e6 <memcpy>
   31c06:	2000      	movs	r0, #0
}
   31c08:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   31c0a:	f06f 0015 	mvn.w	r0, #21
   31c0e:	e7fb      	b.n	31c08 <flash_nrf_read+0x2e>
		return 0;
   31c10:	4620      	mov	r0, r4
   31c12:	e7f9      	b.n	31c08 <flash_nrf_read+0x2e>

00031c14 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   31c14:	6883      	ldr	r3, [r0, #8]
   31c16:	689b      	ldr	r3, [r3, #8]
   31c18:	7b9a      	ldrb	r2, [r3, #14]
   31c1a:	b172      	cbz	r2, 31c3a <uarte_nrfx_isr_int+0x26>
	return dev->config->config_info;
   31c1c:	6802      	ldr	r2, [r0, #0]
	return config->uarte_regs;
   31c1e:	6892      	ldr	r2, [r2, #8]
   31c20:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   31c22:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (data->int_driven->disable_tx_irq &&
   31c26:	b141      	cbz	r1, 31c3a <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   31c28:	f44f 7180 	mov.w	r1, #256	; 0x100
   31c2c:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   31c30:	2101      	movs	r1, #1
   31c32:	60d1      	str	r1, [r2, #12]
		data->int_driven->disable_tx_irq = false;
   31c34:	2200      	movs	r2, #0
   31c36:	739a      	strb	r2, [r3, #14]
		return;
   31c38:	4770      	bx	lr
	if (data->int_driven->cb) {
   31c3a:	681a      	ldr	r2, [r3, #0]
   31c3c:	b10a      	cbz	r2, 31c42 <uarte_nrfx_isr_int+0x2e>
		data->int_driven->cb(data->int_driven->cb_data);
   31c3e:	6858      	ldr	r0, [r3, #4]
   31c40:	4710      	bx	r2
}
   31c42:	4770      	bx	lr

00031c44 <uarte_nrfx_config_get>:
{
   31c44:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   31c46:	6882      	ldr	r2, [r0, #8]
   31c48:	e892 0003 	ldmia.w	r2, {r0, r1}
   31c4c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   31c50:	2000      	movs	r0, #0
   31c52:	4770      	bx	lr

00031c54 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   31c54:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   31c56:	689b      	ldr	r3, [r3, #8]
   31c58:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   31c5a:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   31c5e:	b118      	cbz	r0, 31c68 <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   31c60:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   31c64:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   31c68:	4770      	bx	lr

00031c6a <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   31c6a:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   31c6c:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   31c6e:	689b      	ldr	r3, [r3, #8]
   31c70:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   31c72:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   31c76:	b138      	cbz	r0, 31c88 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   31c78:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31c7a:	2000      	movs	r0, #0
   31c7c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   31c7e:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31c80:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   31c84:	601a      	str	r2, [r3, #0]
	return 0;
   31c86:	4770      	bx	lr
		return -1;
   31c88:	f04f 30ff 	mov.w	r0, #4294967295
}
   31c8c:	4770      	bx	lr

00031c8e <uarte_nrfx_poll_out>:
{
   31c8e:	b082      	sub	sp, #8
   31c90:	aa02      	add	r2, sp, #8
   31c92:	f802 1d01 	strb.w	r1, [r2, #-1]!
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31c96:	2100      	movs	r1, #0
	return dev->config->config_info;
   31c98:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   31c9a:	689b      	ldr	r3, [r3, #8]
   31c9c:	681b      	ldr	r3, [r3, #0]
   31c9e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   31ca2:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   31ca6:	2201      	movs	r2, #1
   31ca8:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   31cac:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   31cae:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   31cb2:	2900      	cmp	r1, #0
   31cb4:	d0fb      	beq.n	31cae <uarte_nrfx_poll_out+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   31cb6:	60da      	str	r2, [r3, #12]
}
   31cb8:	b002      	add	sp, #8
   31cba:	4770      	bx	lr

00031cbc <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   31cbc:	6803      	ldr	r3, [r0, #0]
{
   31cbe:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   31cc0:	689b      	ldr	r3, [r3, #8]
   31cc2:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   31cc4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   31cc8:	b1bb      	cbz	r3, 31cfa <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   31cca:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   31ccc:	68ab      	ldr	r3, [r5, #8]
   31cce:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31cd0:	2300      	movs	r3, #0
   31cd2:	4290      	cmp	r0, r2
   31cd4:	bfa8      	it	ge
   31cd6:	4610      	movge	r0, r2
   31cd8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   31cdc:	68aa      	ldr	r2, [r5, #8]
	for (int i = 0; i < len; i++) {
   31cde:	4283      	cmp	r3, r0
   31ce0:	6892      	ldr	r2, [r2, #8]
   31ce2:	db06      	blt.n	31cf2 <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   31ce4:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   31ce6:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   31cea:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   31cee:	60a3      	str	r3, [r4, #8]
}
   31cf0:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   31cf2:	5cce      	ldrb	r6, [r1, r3]
   31cf4:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   31cf6:	3301      	adds	r3, #1
   31cf8:	e7f0      	b.n	31cdc <uarte_nrfx_fifo_fill+0x20>
		return 0;
   31cfa:	4618      	mov	r0, r3
   31cfc:	e7f8      	b.n	31cf0 <uarte_nrfx_fifo_fill+0x34>

00031cfe <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   31cfe:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   31d00:	689b      	ldr	r3, [r3, #8]
   31d02:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   31d04:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   31d08:	b143      	cbz	r3, 31d1c <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   31d0a:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31d0c:	2000      	movs	r0, #0
   31d0e:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   31d12:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   31d14:	7b1b      	ldrb	r3, [r3, #12]
   31d16:	700b      	strb	r3, [r1, #0]
   31d18:	6010      	str	r0, [r2, #0]
   31d1a:	4770      	bx	lr
	int num_rx = 0;
   31d1c:	4618      	mov	r0, r3
}
   31d1e:	4770      	bx	lr

00031d20 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   31d20:	2100      	movs	r1, #0
	return dev->config->config_info;
   31d22:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   31d24:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   31d26:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   31d28:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   31d2a:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   31d2c:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   31d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
   31d32:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   31d36:	4770      	bx	lr

00031d38 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   31d38:	2201      	movs	r2, #1
   31d3a:	6883      	ldr	r3, [r0, #8]
   31d3c:	689b      	ldr	r3, [r3, #8]
   31d3e:	739a      	strb	r2, [r3, #14]
}
   31d40:	4770      	bx	lr

00031d42 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   31d42:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   31d44:	689b      	ldr	r3, [r3, #8]
   31d46:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   31d48:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   31d4c:	b118      	cbz	r0, 31d56 <uarte_nrfx_irq_tx_ready_complete+0x14>
    return (bool)(p_reg->INTENSET & mask);
   31d4e:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   31d52:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   31d56:	4770      	bx	lr

00031d58 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   31d58:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   31d5a:	689b      	ldr	r3, [r3, #8]
   31d5c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   31d5e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   31d62:	3000      	adds	r0, #0
   31d64:	bf18      	it	ne
   31d66:	2001      	movne	r0, #1
   31d68:	4770      	bx	lr

00031d6a <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   31d6a:	2210      	movs	r2, #16
	return dev->config->config_info;
   31d6c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   31d6e:	689b      	ldr	r3, [r3, #8]
   31d70:	681b      	ldr	r3, [r3, #0]
   31d72:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   31d76:	4770      	bx	lr

00031d78 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   31d78:	2210      	movs	r2, #16
	return dev->config->config_info;
   31d7a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   31d7c:	689b      	ldr	r3, [r3, #8]
   31d7e:	681b      	ldr	r3, [r3, #0]
   31d80:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   31d84:	4770      	bx	lr

00031d86 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   31d86:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   31d8a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   31d8c:	689b      	ldr	r3, [r3, #8]
   31d8e:	681b      	ldr	r3, [r3, #0]
   31d90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   31d94:	4770      	bx	lr

00031d96 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   31d96:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   31d9a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   31d9c:	689b      	ldr	r3, [r3, #8]
   31d9e:	681b      	ldr	r3, [r3, #0]
   31da0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   31da4:	4770      	bx	lr

00031da6 <uarte_nrfx_irq_update>:
}
   31da6:	2001      	movs	r0, #1
   31da8:	4770      	bx	lr

00031daa <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   31daa:	6883      	ldr	r3, [r0, #8]
   31dac:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   31dae:	e9c3 1200 	strd	r1, r2, [r3]
}
   31db2:	4770      	bx	lr

00031db4 <uarte_nrfx_irq_is_pending>:
{
   31db4:	b508      	push	{r3, lr}
	return dev->config->config_info;
   31db6:	6803      	ldr	r3, [r0, #0]
{
   31db8:	4602      	mov	r2, r0
	return config->uarte_regs;
   31dba:	689b      	ldr	r3, [r3, #8]
   31dbc:	6819      	ldr	r1, [r3, #0]
    return (bool)(p_reg->INTENSET & mask);
   31dbe:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   31dc2:	05db      	lsls	r3, r3, #23
   31dc4:	d405      	bmi.n	31dd2 <uarte_nrfx_irq_is_pending+0x1e>
   31dc6:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   31dca:	f010 0010 	ands.w	r0, r0, #16
   31dce:	d106      	bne.n	31dde <uarte_nrfx_irq_is_pending+0x2a>
}
   31dd0:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   31dd2:	f7ff ffb6 	bl	31d42 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   31dd6:	2800      	cmp	r0, #0
   31dd8:	d0f5      	beq.n	31dc6 <uarte_nrfx_irq_is_pending+0x12>
		||
   31dda:	2001      	movs	r0, #1
   31ddc:	e7f8      	b.n	31dd0 <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   31dde:	4610      	mov	r0, r2
   31de0:	f7ff ffba 	bl	31d58 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   31de4:	3000      	adds	r0, #0
   31de6:	bf18      	it	ne
   31de8:	2001      	movne	r0, #1
   31dea:	e7f1      	b.n	31dd0 <uarte_nrfx_irq_is_pending+0x1c>

00031dec <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   31dec:	2000      	movs	r0, #0
   31dee:	4770      	bx	lr

00031df0 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   31df0:	4668      	mov	r0, sp
   31df2:	f020 0107 	bic.w	r1, r0, #7
   31df6:	468d      	mov	sp, r1
   31df8:	b501      	push	{r0, lr}
   31dfa:	f7ff fe06 	bl	31a0a <z_arch_isr_direct_header>
	bsd_os_trace_irq_handler();
   31dfe:	f7ef fa3d 	bl	2127c <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   31e02:	f7e9 ff07 	bl	1bc14 <_arch_isr_direct_pm>
   31e06:	f7e9 fde7 	bl	1b9d8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   31e0a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   31e0e:	4685      	mov	sp, r0
   31e10:	4770      	bx	lr

00031e12 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   31e12:	4668      	mov	r0, sp
   31e14:	f020 0107 	bic.w	r1, r0, #7
   31e18:	468d      	mov	sp, r1
   31e1a:	b501      	push	{r0, lr}
   31e1c:	f7ff fdf5 	bl	31a0a <z_arch_isr_direct_header>
	IPC_IRQHandler();
   31e20:	f7ed fdb4 	bl	1f98c <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   31e24:	f7e9 fef6 	bl	1bc14 <_arch_isr_direct_pm>
   31e28:	f7e9 fdd6 	bl	1b9d8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   31e2c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   31e30:	4685      	mov	sp, r0
   31e32:	4770      	bx	lr

00031e34 <trace_task_create>:
{
   31e34:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   31e36:	201d      	movs	r0, #29
   31e38:	2200      	movs	r2, #0
   31e3a:	2106      	movs	r1, #6
   31e3c:	f7e9 feb8 	bl	1bbb0 <z_arm_irq_priority_set>
}
   31e40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   31e44:	201d      	movs	r0, #29
   31e46:	f7e9 bea3 	b.w	1bb90 <z_arch_irq_enable>

00031e4a <read_task_create>:
{
   31e4a:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   31e4c:	201c      	movs	r0, #28
   31e4e:	2200      	movs	r2, #0
   31e50:	2106      	movs	r1, #6
   31e52:	f7e9 fead 	bl	1bbb0 <z_arm_irq_priority_set>
}
   31e56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   31e5a:	201c      	movs	r0, #28
   31e5c:	f7e9 be98 	b.w	1bb90 <z_arch_irq_enable>

00031e60 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   31e60:	2000      	movs	r0, #0
   31e62:	4770      	bx	lr

00031e64 <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   31e64:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   31e68:	bf18      	it	ne
   31e6a:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   31e6c:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   31e6e:	bf48      	it	mi
   31e70:	f043 0308 	orrmi.w	r3, r3, #8
}
   31e74:	4618      	mov	r0, r3
   31e76:	4770      	bx	lr

00031e78 <z_to_nrf_family>:
	switch (z_family) {
   31e78:	2803      	cmp	r0, #3
   31e7a:	d00f      	beq.n	31e9c <z_to_nrf_family+0x24>
   31e7c:	d806      	bhi.n	31e8c <z_to_nrf_family+0x14>
   31e7e:	2801      	cmp	r0, #1
   31e80:	d00e      	beq.n	31ea0 <z_to_nrf_family+0x28>
   31e82:	2802      	cmp	r0, #2
   31e84:	d008      	beq.n	31e98 <z_to_nrf_family+0x20>
		return -EAFNOSUPPORT;
   31e86:	f06f 0069 	mvn.w	r0, #105	; 0x69
   31e8a:	4770      	bx	lr
	switch (z_family) {
   31e8c:	2866      	cmp	r0, #102	; 0x66
   31e8e:	d008      	beq.n	31ea2 <z_to_nrf_family+0x2a>
   31e90:	2867      	cmp	r0, #103	; 0x67
   31e92:	d1f8      	bne.n	31e86 <z_to_nrf_family+0xe>
		return NRF_AF_LOCAL;
   31e94:	2001      	movs	r0, #1
   31e96:	4770      	bx	lr
		return NRF_AF_INET6;
   31e98:	200a      	movs	r0, #10
   31e9a:	4770      	bx	lr
		return NRF_AF_PACKET;
   31e9c:	2005      	movs	r0, #5
   31e9e:	4770      	bx	lr
		return NRF_AF_INET;
   31ea0:	2002      	movs	r0, #2
}
   31ea2:	4770      	bx	lr

00031ea4 <z_to_nrf_protocol>:
	switch (proto) {
   31ea4:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   31ea8:	d01d      	beq.n	31ee6 <z_to_nrf_protocol+0x42>
   31eaa:	dc05      	bgt.n	31eb8 <z_to_nrf_protocol+0x14>
   31eac:	2806      	cmp	r0, #6
   31eae:	d020      	beq.n	31ef2 <z_to_nrf_protocol+0x4e>
   31eb0:	2811      	cmp	r0, #17
   31eb2:	d016      	beq.n	31ee2 <z_to_nrf_protocol+0x3e>
   31eb4:	b948      	cbnz	r0, 31eca <z_to_nrf_protocol+0x26>
   31eb6:	4770      	bx	lr
   31eb8:	f240 2301 	movw	r3, #513	; 0x201
   31ebc:	4298      	cmp	r0, r3
   31ebe:	d00f      	beq.n	31ee0 <z_to_nrf_protocol+0x3c>
   31ec0:	dc06      	bgt.n	31ed0 <z_to_nrf_protocol+0x2c>
   31ec2:	f240 1311 	movw	r3, #273	; 0x111
   31ec6:	4298      	cmp	r0, r3
   31ec8:	d010      	beq.n	31eec <z_to_nrf_protocol+0x48>
		return -EPROTONOSUPPORT;
   31eca:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   31ece:	4770      	bx	lr
	switch (proto) {
   31ed0:	f240 2302 	movw	r3, #514	; 0x202
   31ed4:	4298      	cmp	r0, r3
   31ed6:	d003      	beq.n	31ee0 <z_to_nrf_protocol+0x3c>
   31ed8:	f240 2303 	movw	r3, #515	; 0x203
   31edc:	4298      	cmp	r0, r3
   31ede:	d1f4      	bne.n	31eca <z_to_nrf_protocol+0x26>
}
   31ee0:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   31ee2:	2002      	movs	r0, #2
   31ee4:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   31ee6:	f44f 7082 	mov.w	r0, #260	; 0x104
   31eea:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   31eec:	f44f 7087 	mov.w	r0, #270	; 0x10e
   31ef0:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   31ef2:	2001      	movs	r0, #1
   31ef4:	e7f4      	b.n	31ee0 <z_to_nrf_protocol+0x3c>

00031ef6 <nrf91_bsdlib_socket_offload_init>:
}
   31ef6:	2000      	movs	r0, #0
   31ef8:	4770      	bx	lr

00031efa <nrf91_socket_offload_freeaddrinfo>:
{
   31efa:	b538      	push	{r3, r4, r5, lr}
   31efc:	4604      	mov	r4, r0
	while (next != NULL) {
   31efe:	b904      	cbnz	r4, 31f02 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   31f00:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   31f02:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   31f04:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   31f06:	f000 fb96 	bl	32636 <k_free>
		k_free(this);
   31f0a:	4620      	mov	r0, r4
   31f0c:	f000 fb93 	bl	32636 <k_free>
		next = next->ai_next;
   31f10:	462c      	mov	r4, r5
   31f12:	e7f4      	b.n	31efe <nrf91_socket_offload_freeaddrinfo+0x4>

00031f14 <z_to_nrf_addrinfo_hints>:
{
   31f14:	b538      	push	{r3, r4, r5, lr}
   31f16:	460c      	mov	r4, r1
   31f18:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   31f1a:	221c      	movs	r2, #28
   31f1c:	2100      	movs	r1, #0
   31f1e:	1d20      	adds	r0, r4, #4
   31f20:	f000 fcec 	bl	328fc <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   31f24:	2300      	movs	r3, #0
   31f26:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   31f28:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   31f2a:	2b03      	cmp	r3, #3
   31f2c:	d003      	beq.n	31f36 <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   31f2e:	2b04      	cmp	r3, #4
   31f30:	bf08      	it	eq
   31f32:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   31f36:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   31f38:	88a8      	ldrh	r0, [r5, #4]
   31f3a:	f7ff ff9d 	bl	31e78 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   31f3e:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   31f42:	d00b      	beq.n	31f5c <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   31f44:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   31f46:	68e8      	ldr	r0, [r5, #12]
   31f48:	f7ff ffac 	bl	31ea4 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   31f4c:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   31f50:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   31f52:	d003      	beq.n	31f5c <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   31f54:	69a8      	ldr	r0, [r5, #24]
   31f56:	b108      	cbz	r0, 31f5c <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   31f58:	61a0      	str	r0, [r4, #24]
	return 0;
   31f5a:	2000      	movs	r0, #0
}
   31f5c:	bd38      	pop	{r3, r4, r5, pc}

00031f5e <nrf91_socket_offload_send>:
{
   31f5e:	b570      	push	{r4, r5, r6, lr}
   31f60:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   31f62:	4618      	mov	r0, r3
{
   31f64:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   31f66:	f7ff ff7d 	bl	31e64 <z_to_nrf_flags>
   31f6a:	462a      	mov	r2, r5
   31f6c:	4603      	mov	r3, r0
   31f6e:	4620      	mov	r0, r4
}
   31f70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   31f74:	f7ed bac8 	b.w	1f508 <nrf_send>

00031f78 <nrf91_socket_offload_recv>:
{
   31f78:	b570      	push	{r4, r5, r6, lr}
   31f7a:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   31f7c:	4618      	mov	r0, r3
{
   31f7e:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   31f80:	f7ff ff70 	bl	31e64 <z_to_nrf_flags>
   31f84:	462a      	mov	r2, r5
   31f86:	4603      	mov	r3, r0
   31f88:	4620      	mov	r0, r4
}
   31f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   31f8e:	f7ed baf1 	b.w	1f574 <nrf_recv>

00031f92 <nrf91_socket_offload_getsockopt>:
{
   31f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31f96:	461c      	mov	r4, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   31f98:	2300      	movs	r3, #0
{
   31f9a:	b086      	sub	sp, #24
   31f9c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   31fa0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   31fa4:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   31fa8:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   31fac:	4607      	mov	r7, r0
   31fae:	460d      	mov	r5, r1
   31fb0:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   31fb2:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   31fb4:	d00d      	beq.n	31fd2 <nrf91_socket_offload_getsockopt+0x40>
   31fb6:	dc08      	bgt.n	31fca <nrf91_socket_offload_getsockopt+0x38>
   31fb8:	2901      	cmp	r1, #1
   31fba:	d00a      	beq.n	31fd2 <nrf91_socket_offload_getsockopt+0x40>
	errno = ENOPROTOOPT;
   31fbc:	f7ff fd75 	bl	31aaa <__errno>
   31fc0:	236d      	movs	r3, #109	; 0x6d
	return retval;
   31fc2:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   31fc6:	6003      	str	r3, [r0, #0]
	return retval;
   31fc8:	e029      	b.n	3201e <nrf91_socket_offload_getsockopt+0x8c>
	switch (z_in_level) {
   31fca:	f2a1 2302 	subw	r3, r1, #514	; 0x202
   31fce:	2b01      	cmp	r3, #1
   31fd0:	d8f4      	bhi.n	31fbc <nrf91_socket_offload_getsockopt+0x2a>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   31fd2:	aa02      	add	r2, sp, #8
   31fd4:	4631      	mov	r1, r6
   31fd6:	4628      	mov	r0, r5
   31fd8:	f7eb fc80 	bl	1d8dc <z_to_nrf_optname>
   31fdc:	2800      	cmp	r0, #0
   31fde:	dbed      	blt.n	31fbc <nrf91_socket_offload_getsockopt+0x2a>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   31fe0:	2d01      	cmp	r5, #1
   31fe2:	d120      	bne.n	32026 <nrf91_socket_offload_getsockopt+0x94>
   31fe4:	2e14      	cmp	r6, #20
   31fe6:	d11e      	bne.n	32026 <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   31fe8:	2308      	movs	r3, #8
   31fea:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   31fec:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   31fee:	aa03      	add	r2, sp, #12
   31ff0:	9200      	str	r2, [sp, #0]
   31ff2:	4638      	mov	r0, r7
   31ff4:	9a02      	ldr	r2, [sp, #8]
   31ff6:	4629      	mov	r1, r5
   31ff8:	f7ed fb3c 	bl	1f674 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   31ffc:	4607      	mov	r7, r0
   31ffe:	b970      	cbnz	r0, 3201e <nrf91_socket_offload_getsockopt+0x8c>
   32000:	b16c      	cbz	r4, 3201e <nrf91_socket_offload_getsockopt+0x8c>
		*optlen = nrf_optlen;
   32002:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   32004:	2d01      	cmp	r5, #1
		*optlen = nrf_optlen;
   32006:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   3200a:	d108      	bne.n	3201e <nrf91_socket_offload_getsockopt+0x8c>
			if (optname == SO_ERROR) {
   3200c:	2e04      	cmp	r6, #4
   3200e:	d10c      	bne.n	3202a <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   32010:	6820      	ldr	r0, [r4, #0]
   32012:	f7eb fb41 	bl	1d698 <bsd_os_errno_set>
				*(int *)optval = errno;
   32016:	f7ff fd48 	bl	31aaa <__errno>
   3201a:	6803      	ldr	r3, [r0, #0]
   3201c:	6023      	str	r3, [r4, #0]
}
   3201e:	4638      	mov	r0, r7
   32020:	b006      	add	sp, #24
   32022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32026:	4623      	mov	r3, r4
   32028:	e7e1      	b.n	31fee <nrf91_socket_offload_getsockopt+0x5c>
			} else if (optname == SO_RCVTIMEO) {
   3202a:	2e14      	cmp	r6, #20
   3202c:	d1f7      	bne.n	3201e <nrf91_socket_offload_getsockopt+0x8c>
				((struct timeval *)optval)->tv_sec =
   3202e:	9b04      	ldr	r3, [sp, #16]
   32030:	6023      	str	r3, [r4, #0]
				((struct timeval *)optval)->tv_usec =
   32032:	9b05      	ldr	r3, [sp, #20]
   32034:	6063      	str	r3, [r4, #4]
				*optlen = sizeof(struct timeval);
   32036:	2308      	movs	r3, #8
   32038:	f8c8 3000 	str.w	r3, [r8]
   3203c:	e7ef      	b.n	3201e <nrf91_socket_offload_getsockopt+0x8c>

0003203e <nrf91_socket_offload_poll>:
{
   3203e:	b5f0      	push	{r4, r5, r6, r7, lr}
   32040:	b091      	sub	sp, #68	; 0x44
   32042:	4605      	mov	r5, r0
   32044:	460c      	mov	r4, r1
   32046:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   32048:	2100      	movs	r1, #0
   3204a:	2240      	movs	r2, #64	; 0x40
   3204c:	4668      	mov	r0, sp
   3204e:	f000 fc55 	bl	328fc <memset>
	for (int i = 0; i < nfds; i++) {
   32052:	2204      	movs	r2, #4
   32054:	2100      	movs	r1, #0
   32056:	42a1      	cmp	r1, r4
   32058:	db0c      	blt.n	32074 <nrf91_socket_offload_poll+0x36>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   3205a:	4632      	mov	r2, r6
   3205c:	4621      	mov	r1, r4
   3205e:	4668      	mov	r0, sp
   32060:	f7ed fb28 	bl	1f6b4 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   32064:	2200      	movs	r2, #0
   32066:	462b      	mov	r3, r5
		fds[i].revents = 0;
   32068:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   3206a:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   3206c:	42a2      	cmp	r2, r4
   3206e:	db1b      	blt.n	320a8 <nrf91_socket_offload_poll+0x6a>
}
   32070:	b011      	add	sp, #68	; 0x44
   32072:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   32074:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   32078:	5aa8      	ldrh	r0, [r5, r2]
		tmp[i].handle = fds[i].fd;
   3207a:	f84d 3031 	str.w	r3, [sp, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   3207e:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   32080:	bf48      	it	mi
   32082:	f83d 3002 	ldrhmi.w	r3, [sp, r2]
	for (int i = 0; i < nfds; i++) {
   32086:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   3208a:	bf44      	itt	mi
   3208c:	f043 0301 	orrmi.w	r3, r3, #1
   32090:	f82d 3002 	strhmi.w	r3, [sp, r2]
		if (fds[i].events & POLLOUT) {
   32094:	0747      	lsls	r7, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   32096:	bf42      	ittt	mi
   32098:	f83d 3002 	ldrhmi.w	r3, [sp, r2]
   3209c:	f043 0302 	orrmi.w	r3, r3, #2
   320a0:	f82d 3002 	strhmi.w	r3, [sp, r2]
   320a4:	3208      	adds	r2, #8
   320a6:	e7d6      	b.n	32056 <nrf91_socket_offload_poll+0x18>
		if (tmp[i].returned & NRF_POLLIN) {
   320a8:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   320ac:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   320ae:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   320b0:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   320b2:	bf48      	it	mi
   320b4:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   320b6:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   320b8:	bf48      	it	mi
   320ba:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   320bc:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   320c0:	bf44      	itt	mi
   320c2:	f045 0504 	orrmi.w	r5, r5, #4
   320c6:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   320c8:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   320ca:	bf48      	it	mi
   320cc:	88dd      	ldrhmi	r5, [r3, #6]
   320ce:	f103 0308 	add.w	r3, r3, #8
   320d2:	bf44      	itt	mi
   320d4:	f045 0508 	orrmi.w	r5, r5, #8
   320d8:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   320dc:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   320de:	bf42      	ittt	mi
   320e0:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   320e4:	f045 0520 	orrmi.w	r5, r5, #32
   320e8:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   320ec:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   320ee:	bf42      	ittt	mi
   320f0:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   320f4:	f041 0110 	orrmi.w	r1, r1, #16
   320f8:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   320fc:	e7b6      	b.n	3206c <nrf91_socket_offload_poll+0x2e>

000320fe <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   320fe:	f7ed ba65 	b.w	1f5cc <nrf_listen>

00032102 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   32102:	f7ed b9d7 	b.w	1f4b4 <nrf_close>

00032106 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   32106:	2903      	cmp	r1, #3
{
   32108:	b508      	push	{r3, lr}
	switch (cmd) {
   3210a:	d00b      	beq.n	32124 <nrf91_socket_offload_fcntl+0x1e>
   3210c:	2904      	cmp	r1, #4
   3210e:	d111      	bne.n	32134 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   32110:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   32112:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   32116:	d10d      	bne.n	32134 <nrf91_socket_offload_fcntl+0x2e>
}
   32118:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   3211c:	1392      	asrs	r2, r2, #14
   3211e:	2101      	movs	r1, #1
   32120:	f7ed baca 	b.w	1f6b8 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   32124:	2200      	movs	r2, #0
   32126:	2102      	movs	r1, #2
   32128:	f7ed fac6 	bl	1f6b8 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   3212c:	0380      	lsls	r0, r0, #14
   3212e:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   32132:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   32134:	f7ff fcb9 	bl	31aaa <__errno>
   32138:	2316      	movs	r3, #22
   3213a:	6003      	str	r3, [r0, #0]
	return retval;
   3213c:	f04f 30ff 	mov.w	r0, #4294967295
   32140:	e7f7      	b.n	32132 <nrf91_socket_offload_fcntl+0x2c>

00032142 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   32142:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   32144:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   32146:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   32148:	4603      	mov	r3, r0
{
   3214a:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   3214c:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   32150:	f101 0210 	add.w	r2, r1, #16
   32154:	f102 0410 	add.w	r4, r2, #16
   32158:	f852 5b04 	ldr.w	r5, [r2], #4
   3215c:	42a2      	cmp	r2, r4
   3215e:	f843 5b04 	str.w	r5, [r3], #4
   32162:	d1f9      	bne.n	32158 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   32164:	6a0b      	ldr	r3, [r1, #32]
   32166:	7503      	strb	r3, [r0, #20]
}
   32168:	bd30      	pop	{r4, r5, pc}

0003216a <nrf91_socket_offload_getaddrinfo>:
{
   3216a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3216e:	4614      	mov	r4, r2
   32170:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   32172:	2100      	movs	r1, #0
{
   32174:	b092      	sub	sp, #72	; 0x48
   32176:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   32178:	2220      	movs	r2, #32
   3217a:	a802      	add	r0, sp, #8
{
   3217c:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   3217e:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   32180:	f000 fbbc 	bl	328fc <memset>
	if (hints != NULL) {
   32184:	b19c      	cbz	r4, 321ae <nrf91_socket_offload_getaddrinfo+0x44>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   32186:	a902      	add	r1, sp, #8
   32188:	4620      	mov	r0, r4
   3218a:	f7ff fec3 	bl	31f14 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   3218e:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   32192:	f000 80b0 	beq.w	322f6 <nrf91_socket_offload_getaddrinfo+0x18c>
		} else if (error == -EAFNOSUPPORT) {
   32196:	306a      	adds	r0, #106	; 0x6a
   32198:	f000 80b0 	beq.w	322fc <nrf91_socket_offload_getaddrinfo+0x192>
		if (hints->ai_next != NULL) {
   3219c:	69e0      	ldr	r0, [r4, #28]
   3219e:	b120      	cbz	r0, 321aa <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   321a0:	ac0a      	add	r4, sp, #40	; 0x28
   321a2:	4621      	mov	r1, r4
   321a4:	f7ff feb6 	bl	31f14 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   321a8:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   321aa:	aa02      	add	r2, sp, #8
   321ac:	e000      	b.n	321b0 <nrf91_socket_offload_getaddrinfo+0x46>
	struct nrf_addrinfo *nrf_hints_ptr = NULL;
   321ae:	4622      	mov	r2, r4
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   321b0:	4631      	mov	r1, r6
   321b2:	4628      	mov	r0, r5
   321b4:	ab01      	add	r3, sp, #4
   321b6:	f7ed fa79 	bl	1f6ac <nrf_getaddrinfo>
	*res = NULL;
   321ba:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   321bc:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   321be:	f8c8 7000 	str.w	r7, [r8]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   321c2:	4605      	mov	r5, r0
   321c4:	2800      	cmp	r0, #0
   321c6:	d04c      	beq.n	32262 <nrf91_socket_offload_getaddrinfo+0xf8>
		nrf91_socket_offload_freeaddrinfo(*res);
   321c8:	f8d8 0000 	ldr.w	r0, [r8]
   321cc:	f7ff fe95 	bl	31efa <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   321d0:	2300      	movs	r3, #0
   321d2:	f8c8 3000 	str.w	r3, [r8]
   321d6:	e046      	b.n	32266 <nrf91_socket_offload_getaddrinfo+0xfc>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   321d8:	2020      	movs	r0, #32
   321da:	f7fb f8db 	bl	2d394 <k_malloc>
		if (next_z_res == NULL) {
   321de:	4604      	mov	r4, r0
   321e0:	2800      	cmp	r0, #0
   321e2:	f000 8083 	beq.w	322ec <nrf91_socket_offload_getaddrinfo+0x182>
	family = nrf_to_z_family(nrf_in->ai_family);
   321e6:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   321e8:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   321ea:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   321ec:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   321f0:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   321f2:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   321f4:	d03e      	beq.n	32274 <nrf91_socket_offload_getaddrinfo+0x10a>
   321f6:	dc09      	bgt.n	3220c <nrf91_socket_offload_getaddrinfo+0xa2>
   321f8:	2a01      	cmp	r2, #1
   321fa:	d00d      	beq.n	32218 <nrf91_socket_offload_getaddrinfo+0xae>
   321fc:	2a02      	cmp	r2, #2
   321fe:	d03d      	beq.n	3227c <nrf91_socket_offload_getaddrinfo+0x112>
			k_free(next_z_res);
   32200:	4620      	mov	r0, r4
   32202:	f000 fa18 	bl	32636 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   32206:	f06f 0508 	mvn.w	r5, #8
   3220a:	e7dd      	b.n	321c8 <nrf91_socket_offload_getaddrinfo+0x5e>
	switch (nrf_family) {
   3220c:	2a0a      	cmp	r2, #10
   3220e:	d033      	beq.n	32278 <nrf91_socket_offload_getaddrinfo+0x10e>
   32210:	2a66      	cmp	r2, #102	; 0x66
   32212:	d1f5      	bne.n	32200 <nrf91_socket_offload_getaddrinfo+0x96>
		return AF_LTE;
   32214:	4613      	mov	r3, r2
   32216:	e000      	b.n	3221a <nrf91_socket_offload_getaddrinfo+0xb0>
		return AF_LOCAL;
   32218:	2367      	movs	r3, #103	; 0x67
	z_out->ai_family = family;
   3221a:	6063      	str	r3, [r4, #4]
	switch (proto) {
   3221c:	68f3      	ldr	r3, [r6, #12]
   3221e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   32222:	d04c      	beq.n	322be <nrf91_socket_offload_getaddrinfo+0x154>
   32224:	dc2c      	bgt.n	32280 <nrf91_socket_offload_getaddrinfo+0x116>
   32226:	2b01      	cmp	r3, #1
   32228:	d04e      	beq.n	322c8 <nrf91_socket_offload_getaddrinfo+0x15e>
   3222a:	2b02      	cmp	r3, #2
   3222c:	d04a      	beq.n	322c4 <nrf91_socket_offload_getaddrinfo+0x15a>
   3222e:	2b00      	cmp	r3, #0
   32230:	d12e      	bne.n	32290 <nrf91_socket_offload_getaddrinfo+0x126>
	if (nrf_in->ai_family == NRF_AF_INET) {
   32232:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   32234:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   32236:	d149      	bne.n	322cc <nrf91_socket_offload_getaddrinfo+0x162>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   32238:	2008      	movs	r0, #8
   3223a:	f7fb f8ab 	bl	2d394 <k_malloc>
   3223e:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   32240:	2800      	cmp	r0, #0
   32242:	d050      	beq.n	322e6 <nrf91_socket_offload_getaddrinfo+0x17c>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   32244:	2308      	movs	r3, #8
   32246:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   32248:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   3224a:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3224c:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   3224e:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   32250:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   32252:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   32254:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   32256:	2f00      	cmp	r7, #0
   32258:	d14b      	bne.n	322f2 <nrf91_socket_offload_getaddrinfo+0x188>
			*res = next_z_res;
   3225a:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   3225e:	4627      	mov	r7, r4
   32260:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   32262:	2e00      	cmp	r6, #0
   32264:	d1b8      	bne.n	321d8 <nrf91_socket_offload_getaddrinfo+0x6e>
	nrf_freeaddrinfo(nrf_res);
   32266:	9801      	ldr	r0, [sp, #4]
   32268:	f7ed fa22 	bl	1f6b0 <nrf_freeaddrinfo>
}
   3226c:	4628      	mov	r0, r5
   3226e:	b012      	add	sp, #72	; 0x48
   32270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return AF_PACKET;
   32274:	2303      	movs	r3, #3
   32276:	e7d0      	b.n	3221a <nrf91_socket_offload_getaddrinfo+0xb0>
		return AF_INET6;
   32278:	2302      	movs	r3, #2
   3227a:	e7ce      	b.n	3221a <nrf91_socket_offload_getaddrinfo+0xb0>
		return AF_INET;
   3227c:	2301      	movs	r3, #1
   3227e:	e7cc      	b.n	3221a <nrf91_socket_offload_getaddrinfo+0xb0>
	switch (proto) {
   32280:	f240 2101 	movw	r1, #513	; 0x201
   32284:	428b      	cmp	r3, r1
   32286:	d0d4      	beq.n	32232 <nrf91_socket_offload_getaddrinfo+0xc8>
   32288:	dc0d      	bgt.n	322a6 <nrf91_socket_offload_getaddrinfo+0x13c>
   3228a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   3228e:	d013      	beq.n	322b8 <nrf91_socket_offload_getaddrinfo+0x14e>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   32290:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   32294:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   32296:	2300      	movs	r3, #0
   32298:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   3229a:	4620      	mov	r0, r4
   3229c:	f000 f9cb 	bl	32636 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   322a0:	f06f 0506 	mvn.w	r5, #6
   322a4:	e790      	b.n	321c8 <nrf91_socket_offload_getaddrinfo+0x5e>
	switch (proto) {
   322a6:	f240 2102 	movw	r1, #514	; 0x202
   322aa:	428b      	cmp	r3, r1
   322ac:	d0c1      	beq.n	32232 <nrf91_socket_offload_getaddrinfo+0xc8>
   322ae:	f240 2103 	movw	r1, #515	; 0x203
   322b2:	428b      	cmp	r3, r1
   322b4:	d0bd      	beq.n	32232 <nrf91_socket_offload_getaddrinfo+0xc8>
   322b6:	e7eb      	b.n	32290 <nrf91_socket_offload_getaddrinfo+0x126>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   322b8:	f240 1311 	movw	r3, #273	; 0x111
   322bc:	e7b9      	b.n	32232 <nrf91_socket_offload_getaddrinfo+0xc8>
   322be:	f44f 7381 	mov.w	r3, #258	; 0x102
   322c2:	e7b6      	b.n	32232 <nrf91_socket_offload_getaddrinfo+0xc8>
   322c4:	2311      	movs	r3, #17
   322c6:	e7b4      	b.n	32232 <nrf91_socket_offload_getaddrinfo+0xc8>
   322c8:	2306      	movs	r3, #6
   322ca:	e7b2      	b.n	32232 <nrf91_socket_offload_getaddrinfo+0xc8>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   322cc:	2a0a      	cmp	r2, #10
   322ce:	d1e4      	bne.n	3229a <nrf91_socket_offload_getaddrinfo+0x130>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   322d0:	2018      	movs	r0, #24
   322d2:	f7fb f85f 	bl	2d394 <k_malloc>
   322d6:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   322d8:	b128      	cbz	r0, 322e6 <nrf91_socket_offload_getaddrinfo+0x17c>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   322da:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   322dc:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   322de:	6123      	str	r3, [r4, #16]
		nrf_to_z_ipv6(z_out->ai_addr,
   322e0:	f7ff ff2f 	bl	32142 <nrf_to_z_ipv6>
   322e4:	e7b7      	b.n	32256 <nrf91_socket_offload_getaddrinfo+0xec>
			k_free(next_z_res);
   322e6:	4620      	mov	r0, r4
   322e8:	f000 f9a5 	bl	32636 <k_free>
			retval = DNS_EAI_MEMORY;
   322ec:	f06f 0509 	mvn.w	r5, #9
   322f0:	e76a      	b.n	321c8 <nrf91_socket_offload_getaddrinfo+0x5e>
			latest_z_res->ai_next = next_z_res;
   322f2:	61fc      	str	r4, [r7, #28]
   322f4:	e7b3      	b.n	3225e <nrf91_socket_offload_getaddrinfo+0xf4>
			return DNS_EAI_SOCKTYPE;
   322f6:	f06f 0506 	mvn.w	r5, #6
   322fa:	e7b7      	b.n	3226c <nrf91_socket_offload_getaddrinfo+0x102>
			return DNS_EAI_ADDRFAMILY;
   322fc:	f06f 0508 	mvn.w	r5, #8
   32300:	e7b4      	b.n	3226c <nrf91_socket_offload_getaddrinfo+0x102>

00032302 <z_to_nrf_ipv6>:
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   32302:	2224      	movs	r2, #36	; 0x24
{
   32304:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   32306:	700a      	strb	r2, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   32308:	8842      	ldrh	r2, [r0, #2]
{
   3230a:	4604      	mov	r4, r0
	nrf_out->sin6_port = ptr->sin6_port;
   3230c:	810a      	strh	r2, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   3230e:	220a      	movs	r2, #10
{
   32310:	460b      	mov	r3, r1
	nrf_out->sin6_family = NRF_AF_INET6;
   32312:	604a      	str	r2, [r1, #4]
   32314:	f101 0610 	add.w	r6, r1, #16
   32318:	1d02      	adds	r2, r0, #4
   3231a:	f100 0714 	add.w	r7, r0, #20
   3231e:	4635      	mov	r5, r6
   32320:	6810      	ldr	r0, [r2, #0]
   32322:	6851      	ldr	r1, [r2, #4]
   32324:	3208      	adds	r2, #8
   32326:	c503      	stmia	r5!, {r0, r1}
   32328:	42ba      	cmp	r2, r7
   3232a:	462e      	mov	r6, r5
   3232c:	d1f7      	bne.n	3231e <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   3232e:	7d22      	ldrb	r2, [r4, #20]
   32330:	621a      	str	r2, [r3, #32]
}
   32332:	bdf0      	pop	{r4, r5, r6, r7, pc}

00032334 <nrf91_socket_offload_sendto>:
{
   32334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   32338:	b08d      	sub	sp, #52	; 0x34
   3233a:	9c14      	ldr	r4, [sp, #80]	; 0x50
   3233c:	4605      	mov	r5, r0
   3233e:	460e      	mov	r6, r1
   32340:	4617      	mov	r7, r2
   32342:	4698      	mov	r8, r3
	if (to == NULL) {
   32344:	b96c      	cbnz	r4, 32362 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   32346:	4618      	mov	r0, r3
   32348:	f7ff fd8c 	bl	31e64 <z_to_nrf_flags>
   3234c:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   32350:	4603      	mov	r3, r0
   32352:	463a      	mov	r2, r7
   32354:	4631      	mov	r1, r6
   32356:	4628      	mov	r0, r5
   32358:	f7ed f8ba 	bl	1f4d0 <nrf_sendto>
}
   3235c:	b00d      	add	sp, #52	; 0x34
   3235e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   32362:	8823      	ldrh	r3, [r4, #0]
   32364:	2b01      	cmp	r3, #1
   32366:	d110      	bne.n	3238a <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   32368:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3236a:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   3236c:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   32370:	2302      	movs	r3, #2
   32372:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   32374:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   32376:	4640      	mov	r0, r8
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   32378:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3237a:	f88d 100c 	strb.w	r1, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   3237e:	f7ff fd71 	bl	31e64 <z_to_nrf_flags>
   32382:	ab03      	add	r3, sp, #12
   32384:	9101      	str	r1, [sp, #4]
   32386:	9300      	str	r3, [sp, #0]
   32388:	e7e2      	b.n	32350 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   3238a:	2b02      	cmp	r3, #2
   3238c:	d10c      	bne.n	323a8 <nrf91_socket_offload_sendto+0x74>
		z_to_nrf_ipv6(to, &ipv6);
   3238e:	f10d 090c 	add.w	r9, sp, #12
   32392:	4649      	mov	r1, r9
   32394:	4620      	mov	r0, r4
   32396:	f7ff ffb4 	bl	32302 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   3239a:	4640      	mov	r0, r8
   3239c:	f7ff fd62 	bl	31e64 <z_to_nrf_flags>
   323a0:	2324      	movs	r3, #36	; 0x24
   323a2:	e9cd 9300 	strd	r9, r3, [sp]
   323a6:	e7d3      	b.n	32350 <nrf91_socket_offload_sendto+0x1c>
	errno = ENOTSUP;
   323a8:	f7ff fb7f 	bl	31aaa <__errno>
   323ac:	2386      	movs	r3, #134	; 0x86
   323ae:	6003      	str	r3, [r0, #0]
	return retval;
   323b0:	f04f 30ff 	mov.w	r0, #4294967295
   323b4:	e7d2      	b.n	3235c <nrf91_socket_offload_sendto+0x28>

000323b6 <nrf91_socket_offload_recvfrom>:
{
   323b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   323ba:	4680      	mov	r8, r0
   323bc:	b08d      	sub	sp, #52	; 0x34
   323be:	4618      	mov	r0, r3
   323c0:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   323c4:	4691      	mov	r9, r2
   323c6:	f7ff fd4d 	bl	31e64 <z_to_nrf_flags>
   323ca:	4603      	mov	r3, r0
	if (from == NULL) {
   323cc:	b954      	cbnz	r4, 323e4 <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   323ce:	e9cd 4400 	strd	r4, r4, [sp]
   323d2:	464a      	mov	r2, r9
   323d4:	4640      	mov	r0, r8
   323d6:	f7ed f8b1 	bl	1f53c <nrf_recvfrom>
   323da:	4605      	mov	r5, r0
}
   323dc:	4628      	mov	r0, r5
   323de:	b00d      	add	sp, #52	; 0x34
   323e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   323e4:	2224      	movs	r2, #36	; 0x24
   323e6:	ad0c      	add	r5, sp, #48	; 0x30
   323e8:	f845 2d28 	str.w	r2, [r5, #-40]!
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   323ec:	af03      	add	r7, sp, #12
   323ee:	9501      	str	r5, [sp, #4]
   323f0:	9700      	str	r7, [sp, #0]
   323f2:	464a      	mov	r2, r9
   323f4:	4640      	mov	r0, r8
   323f6:	f7ed f8a1 	bl	1f53c <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   323fa:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   323fc:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   323fe:	2b02      	cmp	r3, #2
   32400:	d109      	bne.n	32416 <nrf91_socket_offload_recvfrom+0x60>
	ptr->sin_port = nrf_in->sin_port;
   32402:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   32406:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   32408:	2301      	movs	r3, #1
   3240a:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3240c:	9b06      	ldr	r3, [sp, #24]
   3240e:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   32410:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   32412:	6033      	str	r3, [r6, #0]
	return retval;
   32414:	e7e2      	b.n	323dc <nrf91_socket_offload_recvfrom+0x26>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   32416:	2b0a      	cmp	r3, #10
   32418:	d1e0      	bne.n	323dc <nrf91_socket_offload_recvfrom+0x26>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   3241a:	4639      	mov	r1, r7
   3241c:	4620      	mov	r0, r4
   3241e:	f7ff fe90 	bl	32142 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   32422:	2318      	movs	r3, #24
   32424:	e7f5      	b.n	32412 <nrf91_socket_offload_recvfrom+0x5c>

00032426 <nrf91_socket_offload_connect>:
{
   32426:	b530      	push	{r4, r5, lr}
	if (addr->sa_family == AF_INET) {
   32428:	880c      	ldrh	r4, [r1, #0]
{
   3242a:	b08b      	sub	sp, #44	; 0x2c
	if (addr->sa_family == AF_INET) {
   3242c:	2c01      	cmp	r4, #1
{
   3242e:	4605      	mov	r5, r0
   32430:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   32432:	d10e      	bne.n	32452 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   32434:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   32436:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   32438:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3243c:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3243e:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   32440:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   32442:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   32446:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   32448:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   3244a:	f7ed f8ad 	bl	1f5a8 <nrf_connect>
}
   3244e:	b00b      	add	sp, #44	; 0x2c
   32450:	bd30      	pop	{r4, r5, pc}
	} else if (addr->sa_family == AF_INET6) {
   32452:	2c02      	cmp	r4, #2
   32454:	d107      	bne.n	32466 <nrf91_socket_offload_connect+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   32456:	a901      	add	r1, sp, #4
   32458:	4618      	mov	r0, r3
   3245a:	f7ff ff52 	bl	32302 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   3245e:	2224      	movs	r2, #36	; 0x24
   32460:	a901      	add	r1, sp, #4
   32462:	4628      	mov	r0, r5
   32464:	e7f1      	b.n	3244a <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   32466:	f7ed f89f 	bl	1f5a8 <nrf_connect>
		if (retval < 0) {
   3246a:	2800      	cmp	r0, #0
   3246c:	daef      	bge.n	3244e <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   3246e:	f7ff fb1c 	bl	31aaa <__errno>
   32472:	2386      	movs	r3, #134	; 0x86
   32474:	6003      	str	r3, [r0, #0]
   32476:	f04f 30ff 	mov.w	r0, #4294967295
   3247a:	e7e8      	b.n	3244e <nrf91_socket_offload_connect+0x28>

0003247c <nrf91_socket_offload_accept>:
{
   3247c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   3247e:	2708      	movs	r7, #8
{
   32480:	b085      	sub	sp, #20
   32482:	4616      	mov	r6, r2
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   32484:	aa04      	add	r2, sp, #16
{
   32486:	460c      	mov	r4, r1
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   32488:	f842 7d0c 	str.w	r7, [r2, #-12]!
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   3248c:	eb0d 0107 	add.w	r1, sp, r7
   32490:	f7ed f8ac 	bl	1f5ec <nrf_accept>
	if (retval < 0) {
   32494:	1e05      	subs	r5, r0, #0
   32496:	db1a      	blt.n	324ce <nrf91_socket_offload_accept+0x52>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   32498:	9b03      	ldr	r3, [sp, #12]
   3249a:	2b02      	cmp	r3, #2
   3249c:	d10a      	bne.n	324b4 <nrf91_socket_offload_accept+0x38>
	ptr->sin_port = nrf_in->sin_port;
   3249e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   324a2:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   324a4:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   324a6:	2301      	movs	r3, #1
   324a8:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   324aa:	9b05      	ldr	r3, [sp, #20]
   324ac:	6063      	str	r3, [r4, #4]
}
   324ae:	4628      	mov	r0, r5
   324b0:	b005      	add	sp, #20
   324b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   324b4:	2b0a      	cmp	r3, #10
   324b6:	d106      	bne.n	324c6 <nrf91_socket_offload_accept+0x4a>
		*addrlen = sizeof(struct sockaddr_in6);
   324b8:	2318      	movs	r3, #24
		nrf_to_z_ipv6(addr, (const struct nrf_sockaddr_in6 *)&nrf_addr);
   324ba:	a902      	add	r1, sp, #8
		*addrlen = sizeof(struct sockaddr_in6);
   324bc:	6033      	str	r3, [r6, #0]
		nrf_to_z_ipv6(addr, (const struct nrf_sockaddr_in6 *)&nrf_addr);
   324be:	4620      	mov	r0, r4
   324c0:	f7ff fe3f 	bl	32142 <nrf_to_z_ipv6>
   324c4:	e7f3      	b.n	324ae <nrf91_socket_offload_accept+0x32>
	errno = ENOTSUP;
   324c6:	f7ff faf0 	bl	31aaa <__errno>
   324ca:	2386      	movs	r3, #134	; 0x86
   324cc:	6003      	str	r3, [r0, #0]
		return -1;
   324ce:	f04f 35ff 	mov.w	r5, #4294967295
   324d2:	e7ec      	b.n	324ae <nrf91_socket_offload_accept+0x32>

000324d4 <nrf91_socket_offload_socket>:
{
   324d4:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   324d6:	b280      	uxth	r0, r0
   324d8:	f7ff fcce 	bl	31e78 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   324dc:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   324e0:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   324e2:	d106      	bne.n	324f2 <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   324e4:	f7ff fae1 	bl	31aaa <__errno>
   324e8:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   324ea:	6003      	str	r3, [r0, #0]
}
   324ec:	f04f 30ff 	mov.w	r0, #4294967295
   324f0:	bd10      	pop	{r4, pc}
	switch (socktype) {
   324f2:	2903      	cmp	r1, #3
   324f4:	d003      	beq.n	324fe <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   324f6:	2904      	cmp	r1, #4
   324f8:	bf08      	it	eq
   324fa:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   324fe:	4610      	mov	r0, r2
   32500:	f7ff fcd0 	bl	31ea4 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   32504:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   32508:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   3250a:	d103      	bne.n	32514 <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   3250c:	f7ff facd 	bl	31aaa <__errno>
   32510:	237b      	movs	r3, #123	; 0x7b
   32512:	e7ea      	b.n	324ea <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   32514:	4620      	mov	r0, r4
}
   32516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   3251a:	f7ec bfb9 	b.w	1f490 <nrf_socket>

0003251e <nrf91_socket_offload_setsockopt>:
{
   3251e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   32522:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   32526:	b086      	sub	sp, #24
   32528:	4680      	mov	r8, r0
   3252a:	460c      	mov	r4, r1
   3252c:	4617      	mov	r7, r2
   3252e:	461d      	mov	r5, r3
   32530:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   32532:	d00d      	beq.n	32550 <nrf91_socket_offload_setsockopt+0x32>
   32534:	dc08      	bgt.n	32548 <nrf91_socket_offload_setsockopt+0x2a>
   32536:	2901      	cmp	r1, #1
   32538:	d00a      	beq.n	32550 <nrf91_socket_offload_setsockopt+0x32>
	errno = ENOPROTOOPT;
   3253a:	f7ff fab6 	bl	31aaa <__errno>
   3253e:	236d      	movs	r3, #109	; 0x6d
   32540:	6003      	str	r3, [r0, #0]
   32542:	f04f 30ff 	mov.w	r0, #4294967295
   32546:	e01b      	b.n	32580 <nrf91_socket_offload_setsockopt+0x62>
	switch (z_in_level) {
   32548:	f2a1 2302 	subw	r3, r1, #514	; 0x202
   3254c:	2b01      	cmp	r3, #1
   3254e:	d8f4      	bhi.n	3253a <nrf91_socket_offload_setsockopt+0x1c>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   32550:	aa03      	add	r2, sp, #12
   32552:	4639      	mov	r1, r7
   32554:	4620      	mov	r0, r4
   32556:	f7eb f9c1 	bl	1d8dc <z_to_nrf_optname>
   3255a:	2800      	cmp	r0, #0
   3255c:	dbed      	blt.n	3253a <nrf91_socket_offload_setsockopt+0x1c>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   3255e:	2c01      	cmp	r4, #1
   32560:	d107      	bne.n	32572 <nrf91_socket_offload_setsockopt+0x54>
   32562:	2f14      	cmp	r7, #20
   32564:	d105      	bne.n	32572 <nrf91_socket_offload_setsockopt+0x54>
		nrf_optlen = sizeof(struct nrf_timeval);
   32566:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   32568:	682b      	ldr	r3, [r5, #0]
   3256a:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3256c:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   3256e:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   32570:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   32572:	9600      	str	r6, [sp, #0]
   32574:	462b      	mov	r3, r5
   32576:	9a03      	ldr	r2, [sp, #12]
   32578:	4621      	mov	r1, r4
   3257a:	4640      	mov	r0, r8
   3257c:	f7ed f85e 	bl	1f63c <nrf_setsockopt>
}
   32580:	b006      	add	sp, #24
   32582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00032586 <nrf91_socket_offload_bind>:
{
   32586:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   32588:	880a      	ldrh	r2, [r1, #0]
{
   3258a:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   3258c:	2a01      	cmp	r2, #1
{
   3258e:	4604      	mov	r4, r0
   32590:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   32592:	d10e      	bne.n	325b2 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   32594:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   32596:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   32598:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3259c:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3259e:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   325a0:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   325a2:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   325a6:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   325a8:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   325aa:	f7ed f835 	bl	1f618 <nrf_bind>
}
   325ae:	b00a      	add	sp, #40	; 0x28
   325b0:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   325b2:	2a02      	cmp	r2, #2
   325b4:	d107      	bne.n	325c6 <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   325b6:	a901      	add	r1, sp, #4
   325b8:	4618      	mov	r0, r3
   325ba:	f7ff fea2 	bl	32302 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   325be:	2224      	movs	r2, #36	; 0x24
   325c0:	a901      	add	r1, sp, #4
   325c2:	4620      	mov	r0, r4
   325c4:	e7f1      	b.n	325aa <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   325c6:	f7ff fa70 	bl	31aaa <__errno>
   325ca:	2386      	movs	r3, #134	; 0x86
   325cc:	6003      	str	r3, [r0, #0]
   325ce:	f04f 30ff 	mov.w	r0, #4294967295
   325d2:	e7ec      	b.n	325ae <nrf91_socket_offload_bind+0x28>

000325d4 <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   325d4:	ea40 0301 	orr.w	r3, r0, r1
   325d8:	f033 030f 	bics.w	r3, r3, #15
   325dc:	d101      	bne.n	325e2 <dk_set_leds_state+0xe>
   325de:	f7eb b9f1 	b.w	1d9c4 <dk_set_leds_state.part.0>
}
   325e2:	f06f 0015 	mvn.w	r0, #21
   325e6:	4770      	bx	lr

000325e8 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   325e8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   325ec:	4770      	bx	lr

000325ee <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   325ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   325f2:	4770      	bx	lr

000325f4 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   325f4:	f44f 7080 	mov.w	r0, #256	; 0x100
   325f8:	4770      	bx	lr

000325fa <z_arch_system_halt>:
	__asm__ volatile(
   325fa:	f04f 0220 	mov.w	r2, #32
   325fe:	f3ef 8311 	mrs	r3, BASEPRI
   32602:	f382 8811 	msr	BASEPRI, r2
   32606:	f3bf 8f6f 	isb	sy
   3260a:	e7fe      	b.n	3260a <z_arch_system_halt+0x10>

0003260c <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   3260c:	f7ff b9fa 	b.w	31a04 <z_clock_idle_exit>

00032610 <k_mem_pool_malloc>:
{
   32610:	b507      	push	{r0, r1, r2, lr}
   32612:	2204      	movs	r2, #4
   32614:	188a      	adds	r2, r1, r2
   32616:	d204      	bcs.n	32622 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   32618:	2300      	movs	r3, #0
   3261a:	4669      	mov	r1, sp
   3261c:	f7fa fdee 	bl	2d1fc <k_mem_pool_alloc>
   32620:	b118      	cbz	r0, 3262a <k_mem_pool_malloc+0x1a>
		return NULL;
   32622:	2000      	movs	r0, #0
}
   32624:	b003      	add	sp, #12
   32626:	f85d fb04 	ldr.w	pc, [sp], #4
   3262a:	e9dd 3200 	ldrd	r3, r2, [sp]
   3262e:	601a      	str	r2, [r3, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   32630:	9800      	ldr	r0, [sp, #0]
   32632:	3004      	adds	r0, #4
   32634:	e7f6      	b.n	32624 <k_mem_pool_malloc+0x14>

00032636 <k_free>:
	if (ptr != NULL) {
   32636:	b110      	cbz	r0, 3263e <k_free+0x8>
		k_mem_pool_free_id(ptr);
   32638:	3804      	subs	r0, #4
   3263a:	f7fa be4f 	b.w	2d2dc <k_mem_pool_free_id>
}
   3263e:	4770      	bx	lr

00032640 <z_queue_node_peek>:
{
   32640:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   32642:	4604      	mov	r4, r0
   32644:	b130      	cbz	r0, 32654 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   32646:	6802      	ldr	r2, [r0, #0]
   32648:	0793      	lsls	r3, r2, #30
   3264a:	d003      	beq.n	32654 <z_queue_node_peek+0x14>
		ret = anode->data;
   3264c:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   3264e:	b109      	cbz	r1, 32654 <z_queue_node_peek+0x14>
			k_free(anode);
   32650:	f7ff fff1 	bl	32636 <k_free>
}
   32654:	4620      	mov	r0, r4
   32656:	bd10      	pop	{r4, pc}

00032658 <z_impl_k_queue_init>:
	list->head = NULL;
   32658:	2300      	movs	r3, #0
	list->tail = NULL;
   3265a:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   3265e:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   32660:	f100 030c 	add.w	r3, r0, #12
	list->tail = (sys_dnode_t *)list;
   32664:	e9c0 3303 	strd	r3, r3, [r0, #12]
}
   32668:	4770      	bx	lr

0003266a <k_queue_append>:
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   3266a:	460a      	mov	r2, r1
   3266c:	2300      	movs	r3, #0
   3266e:	6841      	ldr	r1, [r0, #4]
   32670:	f7fa bea0 	b.w	2d3b4 <queue_insert>

00032674 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   32674:	7b43      	ldrb	r3, [r0, #13]
   32676:	06db      	lsls	r3, r3, #27
   32678:	bf03      	ittte	eq
   3267a:	6980      	ldreq	r0, [r0, #24]
   3267c:	fab0 f080 	clzeq	r0, r0
   32680:	0940      	lsreq	r0, r0, #5
   32682:	2000      	movne	r0, #0
}
   32684:	4770      	bx	lr

00032686 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   32686:	f990 000e 	ldrsb.w	r0, [r0, #14]
   3268a:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   3268e:	4298      	cmp	r0, r3
   32690:	bfac      	ite	ge
   32692:	2000      	movge	r0, #0
   32694:	2001      	movlt	r0, #1
   32696:	4770      	bx	lr

00032698 <z_reschedule_irqlock>:
{
   32698:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
   3269a:	4602      	mov	r2, r0
   3269c:	b938      	cbnz	r0, 326ae <z_reschedule_irqlock+0x16>
   3269e:	f7fa fffd 	bl	2d69c <resched.part.15>
	if (resched(key)) {
   326a2:	b120      	cbz	r0, 326ae <z_reschedule_irqlock+0x16>
}
   326a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   326a8:	4610      	mov	r0, r2
   326aa:	f7e9 ba57 	b.w	1bb5c <z_arch_swap>
	__asm__ volatile(
   326ae:	f382 8811 	msr	BASEPRI, r2
   326b2:	f3bf 8f6f 	isb	sy
   326b6:	bd08      	pop	{r3, pc}

000326b8 <z_reschedule_unlocked>:
	__asm__ volatile(
   326b8:	f04f 0320 	mov.w	r3, #32
   326bc:	f3ef 8011 	mrs	r0, BASEPRI
   326c0:	f383 8811 	msr	BASEPRI, r3
   326c4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
   326c8:	f7ff bfe6 	b.w	32698 <z_reschedule_irqlock>

000326cc <z_priq_dumb_best>:
	return list->head == list;
   326cc:	6803      	ldr	r3, [r0, #0]
}
   326ce:	4298      	cmp	r0, r3
   326d0:	bf14      	ite	ne
   326d2:	4618      	movne	r0, r3
   326d4:	2000      	moveq	r0, #0
   326d6:	4770      	bx	lr

000326d8 <z_unpend_all>:
{
   326d8:	b570      	push	{r4, r5, r6, lr}
   326da:	4606      	mov	r6, r0
	int need_sched = 0;
   326dc:	2500      	movs	r5, #0
   326de:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   326e0:	42a6      	cmp	r6, r4
   326e2:	d000      	beq.n	326e6 <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   326e4:	b90c      	cbnz	r4, 326ea <z_unpend_all+0x12>
}
   326e6:	4628      	mov	r0, r5
   326e8:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   326ea:	4620      	mov	r0, r4
   326ec:	f7fb f9ae 	bl	2da4c <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   326f0:	4620      	mov	r0, r4
   326f2:	f7ff ffbf 	bl	32674 <z_is_thread_ready>
		need_sched = 1;
   326f6:	2501      	movs	r5, #1
   326f8:	2800      	cmp	r0, #0
   326fa:	d0f0      	beq.n	326de <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   326fc:	4620      	mov	r0, r4
   326fe:	f7fb fab1 	bl	2dc64 <z_add_thread_to_ready_q>
   32702:	e7ec      	b.n	326de <z_unpend_all+0x6>

00032704 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   32704:	7b43      	ldrb	r3, [r0, #13]
   32706:	06db      	lsls	r3, r3, #27
   32708:	bf03      	ittte	eq
   3270a:	6980      	ldreq	r0, [r0, #24]
   3270c:	fab0 f080 	clzeq	r0, r0
   32710:	0940      	lsreq	r0, r0, #5
   32712:	2000      	movne	r0, #0
}
   32714:	4770      	bx	lr

00032716 <z_impl_k_thread_name_set>:
}
   32716:	f06f 0057 	mvn.w	r0, #87	; 0x57
   3271a:	4770      	bx	lr

0003271c <k_thread_name_get>:
}
   3271c:	2000      	movs	r0, #0
   3271e:	4770      	bx	lr

00032720 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   32720:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   32722:	b510      	push	{r4, lr}
   32724:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   32726:	b103      	cbz	r3, 3272a <z_thread_single_abort+0xa>
		thread->fn_abort();
   32728:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   3272a:	4620      	mov	r0, r4
   3272c:	f7ff ffea 	bl	32704 <z_is_thread_ready>
   32730:	b138      	cbz	r0, 32742 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   32732:	4620      	mov	r0, r4
   32734:	f7fb fc40 	bl	2dfb8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   32738:	7b63      	ldrb	r3, [r4, #13]
   3273a:	f043 0308 	orr.w	r3, r3, #8
   3273e:	7363      	strb	r3, [r4, #13]
}
   32740:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   32742:	7b63      	ldrb	r3, [r4, #13]
   32744:	079b      	lsls	r3, r3, #30
   32746:	d502      	bpl.n	3274e <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   32748:	4620      	mov	r0, r4
   3274a:	f7fb f845 	bl	2d7d8 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   3274e:	69a3      	ldr	r3, [r4, #24]
   32750:	2b00      	cmp	r3, #0
   32752:	d0f1      	beq.n	32738 <z_thread_single_abort+0x18>
	return z_abort_timeout(&thread->base.timeout);
   32754:	f104 0018 	add.w	r0, r4, #24
   32758:	f7fc fb44 	bl	2ede4 <z_abort_timeout>
   3275c:	e7ec      	b.n	32738 <z_thread_single_abort+0x18>

0003275e <z_init_thread_base>:
	thread_base->user_options = (u8_t)options;
   3275e:	7303      	strb	r3, [r0, #12]
	thread_base->sched_locked = 0U;
   32760:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   32762:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   32764:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   32766:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   32768:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
   3276c:	4770      	bx	lr

0003276e <k_work_submit_to_queue>:
{
   3276e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   32770:	f101 0308 	add.w	r3, r1, #8
   32774:	e8d3 2fef 	ldaex	r2, [r3]
   32778:	f042 0c01 	orr.w	ip, r2, #1
   3277c:	e8c3 cfee 	stlex	lr, ip, [r3]
   32780:	f1be 0f00 	cmp.w	lr, #0
   32784:	d1f6      	bne.n	32774 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   32786:	07d3      	lsls	r3, r2, #31
   32788:	d403      	bmi.n	32792 <k_work_submit_to_queue+0x24>
}
   3278a:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   3278e:	f7ff bf6c 	b.w	3266a <k_queue_append>
}
   32792:	f85d fb04 	ldr.w	pc, [sp], #4

00032796 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   32796:	f1a0 010c 	sub.w	r1, r0, #12
   3279a:	6900      	ldr	r0, [r0, #16]
   3279c:	f7ff bfe7 	b.w	3276e <k_work_submit_to_queue>

000327a0 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   327a0:	2300      	movs	r3, #0
   327a2:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   327a6:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   327aa:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   327ac:	61c3      	str	r3, [r0, #28]
}
   327ae:	4770      	bx	lr

000327b0 <z_impl_k_uptime_get>:
	return (u32_t)curr_tick;
#endif
}

s64_t z_impl_k_uptime_get(void)
{
   327b0:	b510      	push	{r4, lr}
	return __ticks_to_ms(z_tick_get());
   327b2:	f7fc fca5 	bl	2f100 <z_tick_get>
}

static inline u64_t __ticks_to_ms(s64_t ticks)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	return (u64_t)ticks * MSEC_PER_SEC /
   327b6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   327ba:	fba0 2304 	umull	r2, r3, r0, r4
   327be:	fb04 3301 	mla	r3, r4, r1, r3
   327c2:	0bd0      	lsrs	r0, r2, #15
}
   327c4:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   327c8:	0bd9      	lsrs	r1, r3, #15
   327ca:	bd10      	pop	{r4, pc}

000327cc <k_timer_init>:
	timer->status = 0U;
   327cc:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   327ce:	e9c0 1206 	strd	r1, r2, [r0, #24]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   327d2:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   327d6:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   327d8:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   327dc:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   327e0:	6283      	str	r3, [r0, #40]	; 0x28
}
   327e2:	4770      	bx	lr

000327e4 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   327e4:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   327e6:	6884      	ldr	r4, [r0, #8]
{
   327e8:	4605      	mov	r5, r0
   327ea:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   327ec:	b19c      	cbz	r4, 32816 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   327ee:	68a3      	ldr	r3, [r4, #8]
   327f0:	b95b      	cbnz	r3, 3280a <signal_poll_event+0x26>
	int retcode = 0;
   327f2:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   327f4:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   327f6:	2300      	movs	r3, #0
   327f8:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   327fa:	68eb      	ldr	r3, [r5, #12]
   327fc:	f3c3 3204 	ubfx	r2, r3, #12, #5
   32800:	4316      	orrs	r6, r2
   32802:	f366 3310 	bfi	r3, r6, #12, #5
   32806:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   32808:	e004      	b.n	32814 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   3280a:	4798      	blx	r3
		poller->is_polling = false;
   3280c:	2300      	movs	r3, #0
		if (retcode < 0) {
   3280e:	2800      	cmp	r0, #0
		poller->is_polling = false;
   32810:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   32812:	daf0      	bge.n	327f6 <signal_poll_event+0x12>
}
   32814:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   32816:	4620      	mov	r0, r4
   32818:	e7ed      	b.n	327f6 <signal_poll_event+0x12>

0003281a <add_event>:
{
   3281a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3281c:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   3281e:	e9d0 2300 	ldrd	r2, r3, [r0]
   32822:	4290      	cmp	r0, r2
   32824:	4604      	mov	r4, r0
   32826:	460d      	mov	r5, r1
   32828:	d106      	bne.n	32838 <add_event+0x1e>
	node->prev = list->tail;
   3282a:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   3282c:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   3282e:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   32830:	6863      	ldr	r3, [r4, #4]
   32832:	601d      	str	r5, [r3, #0]
	list->tail = node;
   32834:	6065      	str	r5, [r4, #4]
   32836:	e019      	b.n	3286c <add_event+0x52>
	if ((pending == NULL) ||
   32838:	2b00      	cmp	r3, #0
   3283a:	d0f6      	beq.n	3282a <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   3283c:	689b      	ldr	r3, [r3, #8]
   3283e:	6879      	ldr	r1, [r7, #4]
   32840:	6858      	ldr	r0, [r3, #4]
   32842:	f7ff ff20 	bl	32686 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   32846:	2800      	cmp	r0, #0
   32848:	d1ef      	bne.n	3282a <add_event+0x10>
	return list->head == list;
   3284a:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3284c:	42b4      	cmp	r4, r6
   3284e:	d0ec      	beq.n	3282a <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   32850:	2e00      	cmp	r6, #0
   32852:	d0ea      	beq.n	3282a <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   32854:	68b3      	ldr	r3, [r6, #8]
   32856:	6878      	ldr	r0, [r7, #4]
   32858:	6859      	ldr	r1, [r3, #4]
   3285a:	f7ff ff14 	bl	32686 <z_is_t1_higher_prio_than_t2>
   3285e:	b130      	cbz	r0, 3286e <add_event+0x54>
	node->prev = successor->prev;
   32860:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   32862:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   32866:	6873      	ldr	r3, [r6, #4]
   32868:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   3286a:	6075      	str	r5, [r6, #4]
}
   3286c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   3286e:	6863      	ldr	r3, [r4, #4]
   32870:	429e      	cmp	r6, r3
   32872:	d0da      	beq.n	3282a <add_event+0x10>
   32874:	6836      	ldr	r6, [r6, #0]
   32876:	e7eb      	b.n	32850 <add_event+0x36>

00032878 <z_handle_obj_poll_events>:
	return list->head == list;
   32878:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   3287a:	4298      	cmp	r0, r3
   3287c:	d00a      	beq.n	32894 <z_handle_obj_poll_events+0x1c>
	node->prev->next = node->next;
   3287e:	e9d3 0200 	ldrd	r0, r2, [r3]
   32882:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   32884:	6818      	ldr	r0, [r3, #0]
   32886:	6042      	str	r2, [r0, #4]
	node->next = NULL;
   32888:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   3288a:	4618      	mov	r0, r3
	node->prev = NULL;
   3288c:	e9c3 2200 	strd	r2, r2, [r3]
   32890:	f7ff bfa8 	b.w	327e4 <signal_poll_event>
	}
}
   32894:	4770      	bx	lr

00032896 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   32896:	4770      	bx	lr

00032898 <atoi>:
   32898:	220a      	movs	r2, #10
   3289a:	2100      	movs	r1, #0
   3289c:	f7fe b80a 	b.w	308b4 <strtol>

000328a0 <__locale_ctype_ptr_l>:
   328a0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   328a4:	4770      	bx	lr

000328a6 <__ascii_mbtowc>:
   328a6:	b082      	sub	sp, #8
   328a8:	b901      	cbnz	r1, 328ac <__ascii_mbtowc+0x6>
   328aa:	a901      	add	r1, sp, #4
   328ac:	b142      	cbz	r2, 328c0 <__ascii_mbtowc+0x1a>
   328ae:	b14b      	cbz	r3, 328c4 <__ascii_mbtowc+0x1e>
   328b0:	7813      	ldrb	r3, [r2, #0]
   328b2:	600b      	str	r3, [r1, #0]
   328b4:	7812      	ldrb	r2, [r2, #0]
   328b6:	1c10      	adds	r0, r2, #0
   328b8:	bf18      	it	ne
   328ba:	2001      	movne	r0, #1
   328bc:	b002      	add	sp, #8
   328be:	4770      	bx	lr
   328c0:	4610      	mov	r0, r2
   328c2:	e7fb      	b.n	328bc <__ascii_mbtowc+0x16>
   328c4:	f06f 0001 	mvn.w	r0, #1
   328c8:	e7f8      	b.n	328bc <__ascii_mbtowc+0x16>

000328ca <memchr>:
   328ca:	b2c9      	uxtb	r1, r1
   328cc:	4402      	add	r2, r0
   328ce:	b510      	push	{r4, lr}
   328d0:	4290      	cmp	r0, r2
   328d2:	4603      	mov	r3, r0
   328d4:	d101      	bne.n	328da <memchr+0x10>
   328d6:	2300      	movs	r3, #0
   328d8:	e003      	b.n	328e2 <memchr+0x18>
   328da:	781c      	ldrb	r4, [r3, #0]
   328dc:	3001      	adds	r0, #1
   328de:	428c      	cmp	r4, r1
   328e0:	d1f6      	bne.n	328d0 <memchr+0x6>
   328e2:	4618      	mov	r0, r3
   328e4:	bd10      	pop	{r4, pc}

000328e6 <memcpy>:
   328e6:	1e43      	subs	r3, r0, #1
   328e8:	440a      	add	r2, r1
   328ea:	b510      	push	{r4, lr}
   328ec:	4291      	cmp	r1, r2
   328ee:	d100      	bne.n	328f2 <memcpy+0xc>
   328f0:	bd10      	pop	{r4, pc}
   328f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   328f6:	f803 4f01 	strb.w	r4, [r3, #1]!
   328fa:	e7f7      	b.n	328ec <memcpy+0x6>

000328fc <memset>:
   328fc:	4402      	add	r2, r0
   328fe:	4603      	mov	r3, r0
   32900:	4293      	cmp	r3, r2
   32902:	d100      	bne.n	32906 <memset+0xa>
   32904:	4770      	bx	lr
   32906:	f803 1b01 	strb.w	r1, [r3], #1
   3290a:	e7f9      	b.n	32900 <memset+0x4>

0003290c <__sfputc_r>:
   3290c:	6893      	ldr	r3, [r2, #8]
   3290e:	3b01      	subs	r3, #1
   32910:	2b00      	cmp	r3, #0
   32912:	6093      	str	r3, [r2, #8]
   32914:	b410      	push	{r4}
   32916:	da08      	bge.n	3292a <__sfputc_r+0x1e>
   32918:	6994      	ldr	r4, [r2, #24]
   3291a:	42a3      	cmp	r3, r4
   3291c:	db01      	blt.n	32922 <__sfputc_r+0x16>
   3291e:	290a      	cmp	r1, #10
   32920:	d103      	bne.n	3292a <__sfputc_r+0x1e>
   32922:	f85d 4b04 	ldr.w	r4, [sp], #4
   32926:	f7fd bfdb 	b.w	308e0 <__swbuf_r>
   3292a:	6813      	ldr	r3, [r2, #0]
   3292c:	1c58      	adds	r0, r3, #1
   3292e:	6010      	str	r0, [r2, #0]
   32930:	4608      	mov	r0, r1
   32932:	7019      	strb	r1, [r3, #0]
   32934:	f85d 4b04 	ldr.w	r4, [sp], #4
   32938:	4770      	bx	lr

0003293a <__sfputs_r>:
   3293a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3293c:	4606      	mov	r6, r0
   3293e:	460f      	mov	r7, r1
   32940:	4614      	mov	r4, r2
   32942:	18d5      	adds	r5, r2, r3
   32944:	42ac      	cmp	r4, r5
   32946:	d101      	bne.n	3294c <__sfputs_r+0x12>
   32948:	2000      	movs	r0, #0
   3294a:	e007      	b.n	3295c <__sfputs_r+0x22>
   3294c:	463a      	mov	r2, r7
   3294e:	f814 1b01 	ldrb.w	r1, [r4], #1
   32952:	4630      	mov	r0, r6
   32954:	f7ff ffda 	bl	3290c <__sfputc_r>
   32958:	1c43      	adds	r3, r0, #1
   3295a:	d1f3      	bne.n	32944 <__sfputs_r+0xa>
   3295c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003295e <__cvt>:
   3295e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   32962:	ec55 4b10 	vmov	r4, r5, d0
   32966:	2d00      	cmp	r5, #0
   32968:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   3296a:	460e      	mov	r6, r1
   3296c:	4691      	mov	r9, r2
   3296e:	4619      	mov	r1, r3
   32970:	bfb8      	it	lt
   32972:	4622      	movlt	r2, r4
   32974:	462b      	mov	r3, r5
   32976:	f027 0720 	bic.w	r7, r7, #32
   3297a:	bfb6      	itet	lt
   3297c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
   32980:	2300      	movge	r3, #0
   32982:	4614      	movlt	r4, r2
   32984:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   32988:	bfbc      	itt	lt
   3298a:	461d      	movlt	r5, r3
   3298c:	232d      	movlt	r3, #45	; 0x2d
   3298e:	2f46      	cmp	r7, #70	; 0x46
   32990:	700b      	strb	r3, [r1, #0]
   32992:	d004      	beq.n	3299e <__cvt+0x40>
   32994:	2f45      	cmp	r7, #69	; 0x45
   32996:	d100      	bne.n	3299a <__cvt+0x3c>
   32998:	3601      	adds	r6, #1
   3299a:	2102      	movs	r1, #2
   3299c:	e000      	b.n	329a0 <__cvt+0x42>
   3299e:	2103      	movs	r1, #3
   329a0:	ab03      	add	r3, sp, #12
   329a2:	4632      	mov	r2, r6
   329a4:	9301      	str	r3, [sp, #4]
   329a6:	ab02      	add	r3, sp, #8
   329a8:	ec45 4b10 	vmov	d0, r4, r5
   329ac:	9300      	str	r3, [sp, #0]
   329ae:	4653      	mov	r3, sl
   329b0:	f7e7 faa6 	bl	19f00 <_dtoa_r>
   329b4:	2f47      	cmp	r7, #71	; 0x47
   329b6:	4680      	mov	r8, r0
   329b8:	d102      	bne.n	329c0 <__cvt+0x62>
   329ba:	f019 0f01 	tst.w	r9, #1
   329be:	d026      	beq.n	32a0e <__cvt+0xb0>
   329c0:	2f46      	cmp	r7, #70	; 0x46
   329c2:	eb08 0906 	add.w	r9, r8, r6
   329c6:	d111      	bne.n	329ec <__cvt+0x8e>
   329c8:	f898 3000 	ldrb.w	r3, [r8]
   329cc:	2b30      	cmp	r3, #48	; 0x30
   329ce:	d10a      	bne.n	329e6 <__cvt+0x88>
   329d0:	2200      	movs	r2, #0
   329d2:	2300      	movs	r3, #0
   329d4:	4620      	mov	r0, r4
   329d6:	4629      	mov	r1, r5
   329d8:	f7e7 fa10 	bl	19dfc <__aeabi_dcmpeq>
   329dc:	b918      	cbnz	r0, 329e6 <__cvt+0x88>
   329de:	f1c6 0601 	rsb	r6, r6, #1
   329e2:	f8ca 6000 	str.w	r6, [sl]
   329e6:	f8da 3000 	ldr.w	r3, [sl]
   329ea:	4499      	add	r9, r3
   329ec:	2200      	movs	r2, #0
   329ee:	2300      	movs	r3, #0
   329f0:	4620      	mov	r0, r4
   329f2:	4629      	mov	r1, r5
   329f4:	f7e7 fa02 	bl	19dfc <__aeabi_dcmpeq>
   329f8:	b938      	cbnz	r0, 32a0a <__cvt+0xac>
   329fa:	2230      	movs	r2, #48	; 0x30
   329fc:	9b03      	ldr	r3, [sp, #12]
   329fe:	454b      	cmp	r3, r9
   32a00:	d205      	bcs.n	32a0e <__cvt+0xb0>
   32a02:	1c59      	adds	r1, r3, #1
   32a04:	9103      	str	r1, [sp, #12]
   32a06:	701a      	strb	r2, [r3, #0]
   32a08:	e7f8      	b.n	329fc <__cvt+0x9e>
   32a0a:	f8cd 900c 	str.w	r9, [sp, #12]
   32a0e:	9b03      	ldr	r3, [sp, #12]
   32a10:	4640      	mov	r0, r8
   32a12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   32a14:	eba3 0308 	sub.w	r3, r3, r8
   32a18:	6013      	str	r3, [r2, #0]
   32a1a:	b004      	add	sp, #16
   32a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00032a20 <__exponent>:
   32a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   32a22:	2900      	cmp	r1, #0
   32a24:	4604      	mov	r4, r0
   32a26:	bfba      	itte	lt
   32a28:	4249      	neglt	r1, r1
   32a2a:	232d      	movlt	r3, #45	; 0x2d
   32a2c:	232b      	movge	r3, #43	; 0x2b
   32a2e:	f804 2b02 	strb.w	r2, [r4], #2
   32a32:	2909      	cmp	r1, #9
   32a34:	7043      	strb	r3, [r0, #1]
   32a36:	dd20      	ble.n	32a7a <__exponent+0x5a>
   32a38:	f10d 0307 	add.w	r3, sp, #7
   32a3c:	260a      	movs	r6, #10
   32a3e:	461f      	mov	r7, r3
   32a40:	1e5a      	subs	r2, r3, #1
   32a42:	fb91 f5f6 	sdiv	r5, r1, r6
   32a46:	fb06 1115 	mls	r1, r6, r5, r1
   32a4a:	2d09      	cmp	r5, #9
   32a4c:	f101 0130 	add.w	r1, r1, #48	; 0x30
   32a50:	f803 1c01 	strb.w	r1, [r3, #-1]
   32a54:	4629      	mov	r1, r5
   32a56:	dc09      	bgt.n	32a6c <__exponent+0x4c>
   32a58:	3130      	adds	r1, #48	; 0x30
   32a5a:	3b02      	subs	r3, #2
   32a5c:	f802 1c01 	strb.w	r1, [r2, #-1]
   32a60:	42bb      	cmp	r3, r7
   32a62:	4622      	mov	r2, r4
   32a64:	d304      	bcc.n	32a70 <__exponent+0x50>
   32a66:	1a10      	subs	r0, r2, r0
   32a68:	b003      	add	sp, #12
   32a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32a6c:	4613      	mov	r3, r2
   32a6e:	e7e7      	b.n	32a40 <__exponent+0x20>
   32a70:	f813 2b01 	ldrb.w	r2, [r3], #1
   32a74:	f804 2b01 	strb.w	r2, [r4], #1
   32a78:	e7f2      	b.n	32a60 <__exponent+0x40>
   32a7a:	2330      	movs	r3, #48	; 0x30
   32a7c:	1d02      	adds	r2, r0, #4
   32a7e:	4419      	add	r1, r3
   32a80:	7083      	strb	r3, [r0, #2]
   32a82:	70c1      	strb	r1, [r0, #3]
   32a84:	e7ef      	b.n	32a66 <__exponent+0x46>

00032a86 <_printf_common>:
   32a86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32a8a:	4691      	mov	r9, r2
   32a8c:	461f      	mov	r7, r3
   32a8e:	688a      	ldr	r2, [r1, #8]
   32a90:	4606      	mov	r6, r0
   32a92:	690b      	ldr	r3, [r1, #16]
   32a94:	460c      	mov	r4, r1
   32a96:	f8dd 8020 	ldr.w	r8, [sp, #32]
   32a9a:	4293      	cmp	r3, r2
   32a9c:	bfb8      	it	lt
   32a9e:	4613      	movlt	r3, r2
   32aa0:	f8c9 3000 	str.w	r3, [r9]
   32aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   32aa8:	b112      	cbz	r2, 32ab0 <_printf_common+0x2a>
   32aaa:	3301      	adds	r3, #1
   32aac:	f8c9 3000 	str.w	r3, [r9]
   32ab0:	6823      	ldr	r3, [r4, #0]
   32ab2:	0699      	lsls	r1, r3, #26
   32ab4:	bf42      	ittt	mi
   32ab6:	f8d9 3000 	ldrmi.w	r3, [r9]
   32aba:	3302      	addmi	r3, #2
   32abc:	f8c9 3000 	strmi.w	r3, [r9]
   32ac0:	6825      	ldr	r5, [r4, #0]
   32ac2:	f015 0506 	ands.w	r5, r5, #6
   32ac6:	d107      	bne.n	32ad8 <_printf_common+0x52>
   32ac8:	f104 0a19 	add.w	sl, r4, #25
   32acc:	68e3      	ldr	r3, [r4, #12]
   32ace:	f8d9 2000 	ldr.w	r2, [r9]
   32ad2:	1a9b      	subs	r3, r3, r2
   32ad4:	42ab      	cmp	r3, r5
   32ad6:	dc2b      	bgt.n	32b30 <_printf_common+0xaa>
   32ad8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   32adc:	6822      	ldr	r2, [r4, #0]
   32ade:	3300      	adds	r3, #0
   32ae0:	bf18      	it	ne
   32ae2:	2301      	movne	r3, #1
   32ae4:	0692      	lsls	r2, r2, #26
   32ae6:	d430      	bmi.n	32b4a <_printf_common+0xc4>
   32ae8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   32aec:	4639      	mov	r1, r7
   32aee:	4630      	mov	r0, r6
   32af0:	47c0      	blx	r8
   32af2:	3001      	adds	r0, #1
   32af4:	d023      	beq.n	32b3e <_printf_common+0xb8>
   32af6:	6823      	ldr	r3, [r4, #0]
   32af8:	341a      	adds	r4, #26
   32afa:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   32afe:	f003 0306 	and.w	r3, r3, #6
   32b02:	f8d9 2000 	ldr.w	r2, [r9]
   32b06:	f04f 0900 	mov.w	r9, #0
   32b0a:	2b04      	cmp	r3, #4
   32b0c:	f854 3c12 	ldr.w	r3, [r4, #-18]
   32b10:	bf08      	it	eq
   32b12:	1aad      	subeq	r5, r5, r2
   32b14:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   32b18:	bf14      	ite	ne
   32b1a:	2500      	movne	r5, #0
   32b1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   32b20:	4293      	cmp	r3, r2
   32b22:	bfc4      	itt	gt
   32b24:	1a9b      	subgt	r3, r3, r2
   32b26:	18ed      	addgt	r5, r5, r3
   32b28:	454d      	cmp	r5, r9
   32b2a:	d11a      	bne.n	32b62 <_printf_common+0xdc>
   32b2c:	2000      	movs	r0, #0
   32b2e:	e008      	b.n	32b42 <_printf_common+0xbc>
   32b30:	2301      	movs	r3, #1
   32b32:	4652      	mov	r2, sl
   32b34:	4639      	mov	r1, r7
   32b36:	4630      	mov	r0, r6
   32b38:	47c0      	blx	r8
   32b3a:	3001      	adds	r0, #1
   32b3c:	d103      	bne.n	32b46 <_printf_common+0xc0>
   32b3e:	f04f 30ff 	mov.w	r0, #4294967295
   32b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32b46:	3501      	adds	r5, #1
   32b48:	e7c0      	b.n	32acc <_printf_common+0x46>
   32b4a:	18e1      	adds	r1, r4, r3
   32b4c:	1c5a      	adds	r2, r3, #1
   32b4e:	2030      	movs	r0, #48	; 0x30
   32b50:	3302      	adds	r3, #2
   32b52:	4422      	add	r2, r4
   32b54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   32b58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   32b5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   32b60:	e7c2      	b.n	32ae8 <_printf_common+0x62>
   32b62:	2301      	movs	r3, #1
   32b64:	4622      	mov	r2, r4
   32b66:	4639      	mov	r1, r7
   32b68:	4630      	mov	r0, r6
   32b6a:	47c0      	blx	r8
   32b6c:	3001      	adds	r0, #1
   32b6e:	d0e6      	beq.n	32b3e <_printf_common+0xb8>
   32b70:	f109 0901 	add.w	r9, r9, #1
   32b74:	e7d8      	b.n	32b28 <_printf_common+0xa2>

00032b76 <strchr>:
   32b76:	b2c9      	uxtb	r1, r1
   32b78:	4603      	mov	r3, r0
   32b7a:	f810 2b01 	ldrb.w	r2, [r0], #1
   32b7e:	b11a      	cbz	r2, 32b88 <strchr+0x12>
   32b80:	428a      	cmp	r2, r1
   32b82:	d1f9      	bne.n	32b78 <strchr+0x2>
   32b84:	4618      	mov	r0, r3
   32b86:	4770      	bx	lr
   32b88:	2900      	cmp	r1, #0
   32b8a:	bf18      	it	ne
   32b8c:	2300      	movne	r3, #0
   32b8e:	e7f9      	b.n	32b84 <strchr+0xe>

00032b90 <strncmp>:
   32b90:	b510      	push	{r4, lr}
   32b92:	b16a      	cbz	r2, 32bb0 <strncmp+0x20>
   32b94:	3901      	subs	r1, #1
   32b96:	1884      	adds	r4, r0, r2
   32b98:	f810 3b01 	ldrb.w	r3, [r0], #1
   32b9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   32ba0:	4293      	cmp	r3, r2
   32ba2:	d103      	bne.n	32bac <strncmp+0x1c>
   32ba4:	42a0      	cmp	r0, r4
   32ba6:	d001      	beq.n	32bac <strncmp+0x1c>
   32ba8:	2b00      	cmp	r3, #0
   32baa:	d1f5      	bne.n	32b98 <strncmp+0x8>
   32bac:	1a98      	subs	r0, r3, r2
   32bae:	bd10      	pop	{r4, pc}
   32bb0:	4610      	mov	r0, r2
   32bb2:	e7fc      	b.n	32bae <strncmp+0x1e>

00032bb4 <strstr>:
   32bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   32bb6:	7803      	ldrb	r3, [r0, #0]
   32bb8:	b17b      	cbz	r3, 32bda <strstr+0x26>
   32bba:	4604      	mov	r4, r0
   32bbc:	7823      	ldrb	r3, [r4, #0]
   32bbe:	4620      	mov	r0, r4
   32bc0:	1c66      	adds	r6, r4, #1
   32bc2:	b17b      	cbz	r3, 32be4 <strstr+0x30>
   32bc4:	1e4a      	subs	r2, r1, #1
   32bc6:	1e63      	subs	r3, r4, #1
   32bc8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   32bcc:	b14d      	cbz	r5, 32be2 <strstr+0x2e>
   32bce:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   32bd2:	4634      	mov	r4, r6
   32bd4:	42af      	cmp	r7, r5
   32bd6:	d0f7      	beq.n	32bc8 <strstr+0x14>
   32bd8:	e7f0      	b.n	32bbc <strstr+0x8>
   32bda:	780b      	ldrb	r3, [r1, #0]
   32bdc:	2b00      	cmp	r3, #0
   32bde:	bf18      	it	ne
   32be0:	2000      	movne	r0, #0
   32be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32be4:	4618      	mov	r0, r3
   32be6:	e7fc      	b.n	32be2 <strstr+0x2e>

00032be8 <_strtol_l.isra.0>:
   32be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32bec:	4680      	mov	r8, r0
   32bee:	4689      	mov	r9, r1
   32bf0:	4692      	mov	sl, r2
   32bf2:	461e      	mov	r6, r3
   32bf4:	460f      	mov	r7, r1
   32bf6:	463d      	mov	r5, r7
   32bf8:	9808      	ldr	r0, [sp, #32]
   32bfa:	f815 4b01 	ldrb.w	r4, [r5], #1
   32bfe:	f7ff fe4f 	bl	328a0 <__locale_ctype_ptr_l>
   32c02:	4420      	add	r0, r4
   32c04:	7843      	ldrb	r3, [r0, #1]
   32c06:	f013 0308 	ands.w	r3, r3, #8
   32c0a:	d133      	bne.n	32c74 <_strtol_l.isra.0+0x8c>
   32c0c:	2c2d      	cmp	r4, #45	; 0x2d
   32c0e:	d133      	bne.n	32c78 <_strtol_l.isra.0+0x90>
   32c10:	1cbd      	adds	r5, r7, #2
   32c12:	787c      	ldrb	r4, [r7, #1]
   32c14:	2201      	movs	r2, #1
   32c16:	2e00      	cmp	r6, #0
   32c18:	d05e      	beq.n	32cd8 <_strtol_l.isra.0+0xf0>
   32c1a:	2e10      	cmp	r6, #16
   32c1c:	d109      	bne.n	32c32 <_strtol_l.isra.0+0x4a>
   32c1e:	2c30      	cmp	r4, #48	; 0x30
   32c20:	d107      	bne.n	32c32 <_strtol_l.isra.0+0x4a>
   32c22:	782b      	ldrb	r3, [r5, #0]
   32c24:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   32c28:	2b58      	cmp	r3, #88	; 0x58
   32c2a:	d150      	bne.n	32cce <_strtol_l.isra.0+0xe6>
   32c2c:	786c      	ldrb	r4, [r5, #1]
   32c2e:	2610      	movs	r6, #16
   32c30:	3502      	adds	r5, #2
   32c32:	2a00      	cmp	r2, #0
   32c34:	f04f 0700 	mov.w	r7, #0
   32c38:	bf14      	ite	ne
   32c3a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
   32c3e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
   32c42:	4638      	mov	r0, r7
   32c44:	fbb1 fcf6 	udiv	ip, r1, r6
   32c48:	fb06 1e1c 	mls	lr, r6, ip, r1
   32c4c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   32c50:	2b09      	cmp	r3, #9
   32c52:	d817      	bhi.n	32c84 <_strtol_l.isra.0+0x9c>
   32c54:	461c      	mov	r4, r3
   32c56:	42a6      	cmp	r6, r4
   32c58:	dd23      	ble.n	32ca2 <_strtol_l.isra.0+0xba>
   32c5a:	1c7b      	adds	r3, r7, #1
   32c5c:	d007      	beq.n	32c6e <_strtol_l.isra.0+0x86>
   32c5e:	4584      	cmp	ip, r0
   32c60:	d31c      	bcc.n	32c9c <_strtol_l.isra.0+0xb4>
   32c62:	d101      	bne.n	32c68 <_strtol_l.isra.0+0x80>
   32c64:	45a6      	cmp	lr, r4
   32c66:	db19      	blt.n	32c9c <_strtol_l.isra.0+0xb4>
   32c68:	fb00 4006 	mla	r0, r0, r6, r4
   32c6c:	2701      	movs	r7, #1
   32c6e:	f815 4b01 	ldrb.w	r4, [r5], #1
   32c72:	e7eb      	b.n	32c4c <_strtol_l.isra.0+0x64>
   32c74:	462f      	mov	r7, r5
   32c76:	e7be      	b.n	32bf6 <_strtol_l.isra.0+0xe>
   32c78:	2c2b      	cmp	r4, #43	; 0x2b
   32c7a:	461a      	mov	r2, r3
   32c7c:	bf04      	itt	eq
   32c7e:	1cbd      	addeq	r5, r7, #2
   32c80:	787c      	ldrbeq	r4, [r7, #1]
   32c82:	e7c8      	b.n	32c16 <_strtol_l.isra.0+0x2e>
   32c84:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   32c88:	2b19      	cmp	r3, #25
   32c8a:	d801      	bhi.n	32c90 <_strtol_l.isra.0+0xa8>
   32c8c:	3c37      	subs	r4, #55	; 0x37
   32c8e:	e7e2      	b.n	32c56 <_strtol_l.isra.0+0x6e>
   32c90:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   32c94:	2b19      	cmp	r3, #25
   32c96:	d804      	bhi.n	32ca2 <_strtol_l.isra.0+0xba>
   32c98:	3c57      	subs	r4, #87	; 0x57
   32c9a:	e7dc      	b.n	32c56 <_strtol_l.isra.0+0x6e>
   32c9c:	f04f 37ff 	mov.w	r7, #4294967295
   32ca0:	e7e5      	b.n	32c6e <_strtol_l.isra.0+0x86>
   32ca2:	1c7b      	adds	r3, r7, #1
   32ca4:	d108      	bne.n	32cb8 <_strtol_l.isra.0+0xd0>
   32ca6:	2322      	movs	r3, #34	; 0x22
   32ca8:	4608      	mov	r0, r1
   32caa:	f8c8 3000 	str.w	r3, [r8]
   32cae:	f1ba 0f00 	cmp.w	sl, #0
   32cb2:	d107      	bne.n	32cc4 <_strtol_l.isra.0+0xdc>
   32cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32cb8:	b102      	cbz	r2, 32cbc <_strtol_l.isra.0+0xd4>
   32cba:	4240      	negs	r0, r0
   32cbc:	f1ba 0f00 	cmp.w	sl, #0
   32cc0:	d0f8      	beq.n	32cb4 <_strtol_l.isra.0+0xcc>
   32cc2:	b10f      	cbz	r7, 32cc8 <_strtol_l.isra.0+0xe0>
   32cc4:	f105 39ff 	add.w	r9, r5, #4294967295
   32cc8:	f8ca 9000 	str.w	r9, [sl]
   32ccc:	e7f2      	b.n	32cb4 <_strtol_l.isra.0+0xcc>
   32cce:	2430      	movs	r4, #48	; 0x30
   32cd0:	2e00      	cmp	r6, #0
   32cd2:	d1ae      	bne.n	32c32 <_strtol_l.isra.0+0x4a>
   32cd4:	2608      	movs	r6, #8
   32cd6:	e7ac      	b.n	32c32 <_strtol_l.isra.0+0x4a>
   32cd8:	2c30      	cmp	r4, #48	; 0x30
   32cda:	d0a2      	beq.n	32c22 <_strtol_l.isra.0+0x3a>
   32cdc:	260a      	movs	r6, #10
   32cde:	e7a8      	b.n	32c32 <_strtol_l.isra.0+0x4a>

00032ce0 <__ascii_wctomb>:
   32ce0:	b149      	cbz	r1, 32cf6 <__ascii_wctomb+0x16>
   32ce2:	2aff      	cmp	r2, #255	; 0xff
   32ce4:	bf8d      	iteet	hi
   32ce6:	238a      	movhi	r3, #138	; 0x8a
   32ce8:	700a      	strbls	r2, [r1, #0]
   32cea:	2001      	movls	r0, #1
   32cec:	6003      	strhi	r3, [r0, #0]
   32cee:	bf88      	it	hi
   32cf0:	f04f 30ff 	movhi.w	r0, #4294967295
   32cf4:	4770      	bx	lr
   32cf6:	4608      	mov	r0, r1
   32cf8:	4770      	bx	lr

00032cfa <abort>:
   32cfa:	b508      	push	{r3, lr}
   32cfc:	2006      	movs	r0, #6
   32cfe:	f7fe fa47 	bl	31190 <raise>
   32d02:	2001      	movs	r0, #1
   32d04:	f7e9 fea0 	bl	1ca48 <_exit>

00032d08 <quorem>:
   32d08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32d0c:	6903      	ldr	r3, [r0, #16]
   32d0e:	4680      	mov	r8, r0
   32d10:	690c      	ldr	r4, [r1, #16]
   32d12:	42a3      	cmp	r3, r4
   32d14:	f2c0 8086 	blt.w	32e24 <quorem+0x11c>
   32d18:	3c01      	subs	r4, #1
   32d1a:	f101 0714 	add.w	r7, r1, #20
   32d1e:	f100 0614 	add.w	r6, r0, #20
   32d22:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
   32d26:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   32d2a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   32d2e:	3501      	adds	r5, #1
   32d30:	eb06 030c 	add.w	r3, r6, ip
   32d34:	eb07 090c 	add.w	r9, r7, ip
   32d38:	9301      	str	r3, [sp, #4]
   32d3a:	fbb0 f5f5 	udiv	r5, r0, r5
   32d3e:	b3a5      	cbz	r5, 32daa <quorem+0xa2>
   32d40:	f04f 0a00 	mov.w	sl, #0
   32d44:	4638      	mov	r0, r7
   32d46:	46b6      	mov	lr, r6
   32d48:	46d3      	mov	fp, sl
   32d4a:	f850 2b04 	ldr.w	r2, [r0], #4
   32d4e:	b293      	uxth	r3, r2
   32d50:	4581      	cmp	r9, r0
   32d52:	ea4f 4212 	mov.w	r2, r2, lsr #16
   32d56:	fb05 a303 	mla	r3, r5, r3, sl
   32d5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   32d5e:	b29b      	uxth	r3, r3
   32d60:	fb05 a202 	mla	r2, r5, r2, sl
   32d64:	ebab 0303 	sub.w	r3, fp, r3
   32d68:	f8de b000 	ldr.w	fp, [lr]
   32d6c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
   32d70:	fa1f fb8b 	uxth.w	fp, fp
   32d74:	445b      	add	r3, fp
   32d76:	fa1f fb82 	uxth.w	fp, r2
   32d7a:	f8de 2000 	ldr.w	r2, [lr]
   32d7e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
   32d82:	eb02 4223 	add.w	r2, r2, r3, asr #16
   32d86:	b29b      	uxth	r3, r3
   32d88:	ea4f 4b22 	mov.w	fp, r2, asr #16
   32d8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   32d90:	f84e 3b04 	str.w	r3, [lr], #4
   32d94:	d2d9      	bcs.n	32d4a <quorem+0x42>
   32d96:	f856 300c 	ldr.w	r3, [r6, ip]
   32d9a:	b933      	cbnz	r3, 32daa <quorem+0xa2>
   32d9c:	9b01      	ldr	r3, [sp, #4]
   32d9e:	3b04      	subs	r3, #4
   32da0:	429e      	cmp	r6, r3
   32da2:	461a      	mov	r2, r3
   32da4:	d332      	bcc.n	32e0c <quorem+0x104>
   32da6:	f8c8 4010 	str.w	r4, [r8, #16]
   32daa:	4640      	mov	r0, r8
   32dac:	f000 fa75 	bl	3329a <__mcmp>
   32db0:	2800      	cmp	r0, #0
   32db2:	db27      	blt.n	32e04 <quorem+0xfc>
   32db4:	3501      	adds	r5, #1
   32db6:	4630      	mov	r0, r6
   32db8:	f04f 0c00 	mov.w	ip, #0
   32dbc:	f857 1b04 	ldr.w	r1, [r7], #4
   32dc0:	f8d0 e000 	ldr.w	lr, [r0]
   32dc4:	b28b      	uxth	r3, r1
   32dc6:	45b9      	cmp	r9, r7
   32dc8:	fa1f f28e 	uxth.w	r2, lr
   32dcc:	ebac 0303 	sub.w	r3, ip, r3
   32dd0:	4413      	add	r3, r2
   32dd2:	ea4f 4211 	mov.w	r2, r1, lsr #16
   32dd6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   32dda:	eb02 4223 	add.w	r2, r2, r3, asr #16
   32dde:	b29b      	uxth	r3, r3
   32de0:	ea4f 4c22 	mov.w	ip, r2, asr #16
   32de4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   32de8:	f840 3b04 	str.w	r3, [r0], #4
   32dec:	d2e6      	bcs.n	32dbc <quorem+0xb4>
   32dee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   32df2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
   32df6:	b92a      	cbnz	r2, 32e04 <quorem+0xfc>
   32df8:	3b04      	subs	r3, #4
   32dfa:	429e      	cmp	r6, r3
   32dfc:	461a      	mov	r2, r3
   32dfe:	d30b      	bcc.n	32e18 <quorem+0x110>
   32e00:	f8c8 4010 	str.w	r4, [r8, #16]
   32e04:	4628      	mov	r0, r5
   32e06:	b003      	add	sp, #12
   32e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32e0c:	6812      	ldr	r2, [r2, #0]
   32e0e:	3b04      	subs	r3, #4
   32e10:	2a00      	cmp	r2, #0
   32e12:	d1c8      	bne.n	32da6 <quorem+0x9e>
   32e14:	3c01      	subs	r4, #1
   32e16:	e7c3      	b.n	32da0 <quorem+0x98>
   32e18:	6812      	ldr	r2, [r2, #0]
   32e1a:	3b04      	subs	r3, #4
   32e1c:	2a00      	cmp	r2, #0
   32e1e:	d1ef      	bne.n	32e00 <quorem+0xf8>
   32e20:	3c01      	subs	r4, #1
   32e22:	e7ea      	b.n	32dfa <quorem+0xf2>
   32e24:	2000      	movs	r0, #0
   32e26:	e7ee      	b.n	32e06 <quorem+0xfe>

00032e28 <__sfmoreglue>:
   32e28:	b570      	push	{r4, r5, r6, lr}
   32e2a:	1e4a      	subs	r2, r1, #1
   32e2c:	2568      	movs	r5, #104	; 0x68
   32e2e:	460e      	mov	r6, r1
   32e30:	4355      	muls	r5, r2
   32e32:	f105 0174 	add.w	r1, r5, #116	; 0x74
   32e36:	f7fe f849 	bl	30ecc <_malloc_r>
   32e3a:	4604      	mov	r4, r0
   32e3c:	b140      	cbz	r0, 32e50 <__sfmoreglue+0x28>
   32e3e:	2100      	movs	r1, #0
   32e40:	f105 0268 	add.w	r2, r5, #104	; 0x68
   32e44:	e9c0 1600 	strd	r1, r6, [r0]
   32e48:	300c      	adds	r0, #12
   32e4a:	60a0      	str	r0, [r4, #8]
   32e4c:	f7ff fd56 	bl	328fc <memset>
   32e50:	4620      	mov	r0, r4
   32e52:	bd70      	pop	{r4, r5, r6, pc}

00032e54 <_fwalk_reent>:
   32e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   32e58:	4680      	mov	r8, r0
   32e5a:	4689      	mov	r9, r1
   32e5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
   32e60:	2600      	movs	r6, #0
   32e62:	b914      	cbnz	r4, 32e6a <_fwalk_reent+0x16>
   32e64:	4630      	mov	r0, r6
   32e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   32e6a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
   32e6e:	3f01      	subs	r7, #1
   32e70:	d501      	bpl.n	32e76 <_fwalk_reent+0x22>
   32e72:	6824      	ldr	r4, [r4, #0]
   32e74:	e7f5      	b.n	32e62 <_fwalk_reent+0xe>
   32e76:	89ab      	ldrh	r3, [r5, #12]
   32e78:	2b01      	cmp	r3, #1
   32e7a:	d907      	bls.n	32e8c <_fwalk_reent+0x38>
   32e7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   32e80:	3301      	adds	r3, #1
   32e82:	d003      	beq.n	32e8c <_fwalk_reent+0x38>
   32e84:	4629      	mov	r1, r5
   32e86:	4640      	mov	r0, r8
   32e88:	47c8      	blx	r9
   32e8a:	4306      	orrs	r6, r0
   32e8c:	3568      	adds	r5, #104	; 0x68
   32e8e:	e7ee      	b.n	32e6e <_fwalk_reent+0x1a>

00032e90 <__swhatbuf_r>:
   32e90:	b570      	push	{r4, r5, r6, lr}
   32e92:	460e      	mov	r6, r1
   32e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   32e98:	b096      	sub	sp, #88	; 0x58
   32e9a:	4614      	mov	r4, r2
   32e9c:	2900      	cmp	r1, #0
   32e9e:	461d      	mov	r5, r3
   32ea0:	da07      	bge.n	32eb2 <__swhatbuf_r+0x22>
   32ea2:	2300      	movs	r3, #0
   32ea4:	602b      	str	r3, [r5, #0]
   32ea6:	89b3      	ldrh	r3, [r6, #12]
   32ea8:	061a      	lsls	r2, r3, #24
   32eaa:	d410      	bmi.n	32ece <__swhatbuf_r+0x3e>
   32eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
   32eb0:	e00e      	b.n	32ed0 <__swhatbuf_r+0x40>
   32eb2:	466a      	mov	r2, sp
   32eb4:	f7fe f9a8 	bl	31208 <_fstat_r>
   32eb8:	2800      	cmp	r0, #0
   32eba:	dbf2      	blt.n	32ea2 <__swhatbuf_r+0x12>
   32ebc:	9a01      	ldr	r2, [sp, #4]
   32ebe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   32ec2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   32ec6:	425a      	negs	r2, r3
   32ec8:	415a      	adcs	r2, r3
   32eca:	602a      	str	r2, [r5, #0]
   32ecc:	e7ee      	b.n	32eac <__swhatbuf_r+0x1c>
   32ece:	2340      	movs	r3, #64	; 0x40
   32ed0:	2000      	movs	r0, #0
   32ed2:	6023      	str	r3, [r4, #0]
   32ed4:	b016      	add	sp, #88	; 0x58
   32ed6:	bd70      	pop	{r4, r5, r6, pc}

00032ed8 <memmove>:
   32ed8:	4288      	cmp	r0, r1
   32eda:	eb01 0302 	add.w	r3, r1, r2
   32ede:	b510      	push	{r4, lr}
   32ee0:	d807      	bhi.n	32ef2 <memmove+0x1a>
   32ee2:	1e42      	subs	r2, r0, #1
   32ee4:	4299      	cmp	r1, r3
   32ee6:	d00a      	beq.n	32efe <memmove+0x26>
   32ee8:	f811 4b01 	ldrb.w	r4, [r1], #1
   32eec:	f802 4f01 	strb.w	r4, [r2, #1]!
   32ef0:	e7f8      	b.n	32ee4 <memmove+0xc>
   32ef2:	4283      	cmp	r3, r0
   32ef4:	d9f5      	bls.n	32ee2 <memmove+0xa>
   32ef6:	1881      	adds	r1, r0, r2
   32ef8:	1ad2      	subs	r2, r2, r3
   32efa:	42d3      	cmn	r3, r2
   32efc:	d100      	bne.n	32f00 <memmove+0x28>
   32efe:	bd10      	pop	{r4, pc}
   32f00:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   32f04:	f801 4d01 	strb.w	r4, [r1, #-1]!
   32f08:	e7f7      	b.n	32efa <memmove+0x22>

00032f0a <_Balloc>:
   32f0a:	b570      	push	{r4, r5, r6, lr}
   32f0c:	6a45      	ldr	r5, [r0, #36]	; 0x24
   32f0e:	4604      	mov	r4, r0
   32f10:	460e      	mov	r6, r1
   32f12:	b93d      	cbnz	r5, 32f24 <_Balloc+0x1a>
   32f14:	2010      	movs	r0, #16
   32f16:	f7fd ff35 	bl	30d84 <malloc>
   32f1a:	6260      	str	r0, [r4, #36]	; 0x24
   32f1c:	6005      	str	r5, [r0, #0]
   32f1e:	60c5      	str	r5, [r0, #12]
   32f20:	e9c0 5501 	strd	r5, r5, [r0, #4]
   32f24:	6a65      	ldr	r5, [r4, #36]	; 0x24
   32f26:	68eb      	ldr	r3, [r5, #12]
   32f28:	b183      	cbz	r3, 32f4c <_Balloc+0x42>
   32f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   32f2c:	68db      	ldr	r3, [r3, #12]
   32f2e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   32f32:	b9b8      	cbnz	r0, 32f64 <_Balloc+0x5a>
   32f34:	2101      	movs	r1, #1
   32f36:	4620      	mov	r0, r4
   32f38:	fa01 f506 	lsl.w	r5, r1, r6
   32f3c:	1d6a      	adds	r2, r5, #5
   32f3e:	0092      	lsls	r2, r2, #2
   32f40:	f000 fa74 	bl	3342c <_calloc_r>
   32f44:	b160      	cbz	r0, 32f60 <_Balloc+0x56>
   32f46:	e9c0 6501 	strd	r6, r5, [r0, #4]
   32f4a:	e00e      	b.n	32f6a <_Balloc+0x60>
   32f4c:	2221      	movs	r2, #33	; 0x21
   32f4e:	2104      	movs	r1, #4
   32f50:	4620      	mov	r0, r4
   32f52:	f000 fa6b 	bl	3342c <_calloc_r>
   32f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
   32f58:	60e8      	str	r0, [r5, #12]
   32f5a:	68db      	ldr	r3, [r3, #12]
   32f5c:	2b00      	cmp	r3, #0
   32f5e:	d1e4      	bne.n	32f2a <_Balloc+0x20>
   32f60:	2000      	movs	r0, #0
   32f62:	bd70      	pop	{r4, r5, r6, pc}
   32f64:	6802      	ldr	r2, [r0, #0]
   32f66:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   32f6a:	2300      	movs	r3, #0
   32f6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   32f70:	e7f7      	b.n	32f62 <_Balloc+0x58>

00032f72 <_Bfree>:
   32f72:	b570      	push	{r4, r5, r6, lr}
   32f74:	6a44      	ldr	r4, [r0, #36]	; 0x24
   32f76:	4606      	mov	r6, r0
   32f78:	460d      	mov	r5, r1
   32f7a:	b93c      	cbnz	r4, 32f8c <_Bfree+0x1a>
   32f7c:	2010      	movs	r0, #16
   32f7e:	f7fd ff01 	bl	30d84 <malloc>
   32f82:	6270      	str	r0, [r6, #36]	; 0x24
   32f84:	6004      	str	r4, [r0, #0]
   32f86:	60c4      	str	r4, [r0, #12]
   32f88:	e9c0 4401 	strd	r4, r4, [r0, #4]
   32f8c:	b13d      	cbz	r5, 32f9e <_Bfree+0x2c>
   32f8e:	6a73      	ldr	r3, [r6, #36]	; 0x24
   32f90:	686a      	ldr	r2, [r5, #4]
   32f92:	68db      	ldr	r3, [r3, #12]
   32f94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   32f98:	6029      	str	r1, [r5, #0]
   32f9a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   32f9e:	bd70      	pop	{r4, r5, r6, pc}

00032fa0 <__multadd>:
   32fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32fa4:	f101 0c14 	add.w	ip, r1, #20
   32fa8:	461f      	mov	r7, r3
   32faa:	4606      	mov	r6, r0
   32fac:	460c      	mov	r4, r1
   32fae:	690d      	ldr	r5, [r1, #16]
   32fb0:	2300      	movs	r3, #0
   32fb2:	f8dc 0000 	ldr.w	r0, [ip]
   32fb6:	3301      	adds	r3, #1
   32fb8:	b281      	uxth	r1, r0
   32fba:	429d      	cmp	r5, r3
   32fbc:	ea4f 4010 	mov.w	r0, r0, lsr #16
   32fc0:	fb02 7101 	mla	r1, r2, r1, r7
   32fc4:	ea4f 4711 	mov.w	r7, r1, lsr #16
   32fc8:	b289      	uxth	r1, r1
   32fca:	fb02 7000 	mla	r0, r2, r0, r7
   32fce:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   32fd2:	ea4f 4710 	mov.w	r7, r0, lsr #16
   32fd6:	f84c 1b04 	str.w	r1, [ip], #4
   32fda:	dcea      	bgt.n	32fb2 <__multadd+0x12>
   32fdc:	b1d7      	cbz	r7, 33014 <__multadd+0x74>
   32fde:	68a3      	ldr	r3, [r4, #8]
   32fe0:	42ab      	cmp	r3, r5
   32fe2:	dc12      	bgt.n	3300a <__multadd+0x6a>
   32fe4:	6861      	ldr	r1, [r4, #4]
   32fe6:	4630      	mov	r0, r6
   32fe8:	3101      	adds	r1, #1
   32fea:	f7ff ff8e 	bl	32f0a <_Balloc>
   32fee:	6922      	ldr	r2, [r4, #16]
   32ff0:	4680      	mov	r8, r0
   32ff2:	f104 010c 	add.w	r1, r4, #12
   32ff6:	3202      	adds	r2, #2
   32ff8:	300c      	adds	r0, #12
   32ffa:	0092      	lsls	r2, r2, #2
   32ffc:	f7ff fc73 	bl	328e6 <memcpy>
   33000:	4621      	mov	r1, r4
   33002:	4644      	mov	r4, r8
   33004:	4630      	mov	r0, r6
   33006:	f7ff ffb4 	bl	32f72 <_Bfree>
   3300a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   3300e:	3501      	adds	r5, #1
   33010:	615f      	str	r7, [r3, #20]
   33012:	6125      	str	r5, [r4, #16]
   33014:	4620      	mov	r0, r4
   33016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003301a <__hi0bits>:
   3301a:	0c02      	lsrs	r2, r0, #16
   3301c:	4603      	mov	r3, r0
   3301e:	0412      	lsls	r2, r2, #16
   33020:	b9b2      	cbnz	r2, 33050 <__hi0bits+0x36>
   33022:	0403      	lsls	r3, r0, #16
   33024:	2010      	movs	r0, #16
   33026:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   3302a:	bf04      	itt	eq
   3302c:	021b      	lsleq	r3, r3, #8
   3302e:	3008      	addeq	r0, #8
   33030:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   33034:	bf04      	itt	eq
   33036:	011b      	lsleq	r3, r3, #4
   33038:	3004      	addeq	r0, #4
   3303a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   3303e:	bf04      	itt	eq
   33040:	009b      	lsleq	r3, r3, #2
   33042:	3002      	addeq	r0, #2
   33044:	2b00      	cmp	r3, #0
   33046:	db06      	blt.n	33056 <__hi0bits+0x3c>
   33048:	005b      	lsls	r3, r3, #1
   3304a:	d503      	bpl.n	33054 <__hi0bits+0x3a>
   3304c:	3001      	adds	r0, #1
   3304e:	4770      	bx	lr
   33050:	2000      	movs	r0, #0
   33052:	e7e8      	b.n	33026 <__hi0bits+0xc>
   33054:	2020      	movs	r0, #32
   33056:	4770      	bx	lr

00033058 <__lo0bits>:
   33058:	6803      	ldr	r3, [r0, #0]
   3305a:	4601      	mov	r1, r0
   3305c:	f013 0207 	ands.w	r2, r3, #7
   33060:	d00b      	beq.n	3307a <__lo0bits+0x22>
   33062:	07da      	lsls	r2, r3, #31
   33064:	d423      	bmi.n	330ae <__lo0bits+0x56>
   33066:	0798      	lsls	r0, r3, #30
   33068:	bf47      	ittee	mi
   3306a:	085b      	lsrmi	r3, r3, #1
   3306c:	2001      	movmi	r0, #1
   3306e:	089b      	lsrpl	r3, r3, #2
   33070:	2002      	movpl	r0, #2
   33072:	bf4c      	ite	mi
   33074:	600b      	strmi	r3, [r1, #0]
   33076:	600b      	strpl	r3, [r1, #0]
   33078:	4770      	bx	lr
   3307a:	b298      	uxth	r0, r3
   3307c:	b9a8      	cbnz	r0, 330aa <__lo0bits+0x52>
   3307e:	0c1b      	lsrs	r3, r3, #16
   33080:	2010      	movs	r0, #16
   33082:	f013 0fff 	tst.w	r3, #255	; 0xff
   33086:	bf04      	itt	eq
   33088:	0a1b      	lsreq	r3, r3, #8
   3308a:	3008      	addeq	r0, #8
   3308c:	071a      	lsls	r2, r3, #28
   3308e:	bf04      	itt	eq
   33090:	091b      	lsreq	r3, r3, #4
   33092:	3004      	addeq	r0, #4
   33094:	079a      	lsls	r2, r3, #30
   33096:	bf04      	itt	eq
   33098:	089b      	lsreq	r3, r3, #2
   3309a:	3002      	addeq	r0, #2
   3309c:	07da      	lsls	r2, r3, #31
   3309e:	d402      	bmi.n	330a6 <__lo0bits+0x4e>
   330a0:	085b      	lsrs	r3, r3, #1
   330a2:	d006      	beq.n	330b2 <__lo0bits+0x5a>
   330a4:	3001      	adds	r0, #1
   330a6:	600b      	str	r3, [r1, #0]
   330a8:	4770      	bx	lr
   330aa:	4610      	mov	r0, r2
   330ac:	e7e9      	b.n	33082 <__lo0bits+0x2a>
   330ae:	2000      	movs	r0, #0
   330b0:	4770      	bx	lr
   330b2:	2020      	movs	r0, #32
   330b4:	4770      	bx	lr

000330b6 <__i2b>:
   330b6:	b510      	push	{r4, lr}
   330b8:	460c      	mov	r4, r1
   330ba:	2101      	movs	r1, #1
   330bc:	f7ff ff25 	bl	32f0a <_Balloc>
   330c0:	2201      	movs	r2, #1
   330c2:	6144      	str	r4, [r0, #20]
   330c4:	6102      	str	r2, [r0, #16]
   330c6:	bd10      	pop	{r4, pc}

000330c8 <__multiply>:
   330c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   330cc:	4614      	mov	r4, r2
   330ce:	690a      	ldr	r2, [r1, #16]
   330d0:	4688      	mov	r8, r1
   330d2:	6923      	ldr	r3, [r4, #16]
   330d4:	429a      	cmp	r2, r3
   330d6:	bfbe      	ittt	lt
   330d8:	460b      	movlt	r3, r1
   330da:	46a0      	movlt	r8, r4
   330dc:	461c      	movlt	r4, r3
   330de:	f8d8 7010 	ldr.w	r7, [r8, #16]
   330e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   330e6:	f8d4 9010 	ldr.w	r9, [r4, #16]
   330ea:	f8d8 1004 	ldr.w	r1, [r8, #4]
   330ee:	eb07 0609 	add.w	r6, r7, r9
   330f2:	42b3      	cmp	r3, r6
   330f4:	bfb8      	it	lt
   330f6:	3101      	addlt	r1, #1
   330f8:	f7ff ff07 	bl	32f0a <_Balloc>
   330fc:	f100 0514 	add.w	r5, r0, #20
   33100:	2200      	movs	r2, #0
   33102:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
   33106:	462b      	mov	r3, r5
   33108:	4573      	cmp	r3, lr
   3310a:	d316      	bcc.n	3313a <__multiply+0x72>
   3310c:	f108 0114 	add.w	r1, r8, #20
   33110:	f104 0214 	add.w	r2, r4, #20
   33114:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   33118:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   3311c:	9300      	str	r3, [sp, #0]
   3311e:	9b00      	ldr	r3, [sp, #0]
   33120:	9201      	str	r2, [sp, #4]
   33122:	4293      	cmp	r3, r2
   33124:	d80c      	bhi.n	33140 <__multiply+0x78>
   33126:	2e00      	cmp	r6, #0
   33128:	dd03      	ble.n	33132 <__multiply+0x6a>
   3312a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   3312e:	2b00      	cmp	r3, #0
   33130:	d05d      	beq.n	331ee <__multiply+0x126>
   33132:	6106      	str	r6, [r0, #16]
   33134:	b003      	add	sp, #12
   33136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3313a:	f843 2b04 	str.w	r2, [r3], #4
   3313e:	e7e3      	b.n	33108 <__multiply+0x40>
   33140:	f8b2 b000 	ldrh.w	fp, [r2]
   33144:	f1bb 0f00 	cmp.w	fp, #0
   33148:	d023      	beq.n	33192 <__multiply+0xca>
   3314a:	4689      	mov	r9, r1
   3314c:	46ac      	mov	ip, r5
   3314e:	f04f 0800 	mov.w	r8, #0
   33152:	f859 4b04 	ldr.w	r4, [r9], #4
   33156:	f8dc a000 	ldr.w	sl, [ip]
   3315a:	b2a3      	uxth	r3, r4
   3315c:	454f      	cmp	r7, r9
   3315e:	fa1f fa8a 	uxth.w	sl, sl
   33162:	fb0b a303 	mla	r3, fp, r3, sl
   33166:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   3316a:	f8dc 4000 	ldr.w	r4, [ip]
   3316e:	4443      	add	r3, r8
   33170:	ea4f 4814 	mov.w	r8, r4, lsr #16
   33174:	fb0b 840a 	mla	r4, fp, sl, r8
   33178:	46e2      	mov	sl, ip
   3317a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   3317e:	b29b      	uxth	r3, r3
   33180:	ea4f 4814 	mov.w	r8, r4, lsr #16
   33184:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   33188:	f84a 3b04 	str.w	r3, [sl], #4
   3318c:	d82b      	bhi.n	331e6 <__multiply+0x11e>
   3318e:	f8cc 8004 	str.w	r8, [ip, #4]
   33192:	9b01      	ldr	r3, [sp, #4]
   33194:	3204      	adds	r2, #4
   33196:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   3319a:	f1ba 0f00 	cmp.w	sl, #0
   3319e:	d020      	beq.n	331e2 <__multiply+0x11a>
   331a0:	682b      	ldr	r3, [r5, #0]
   331a2:	4689      	mov	r9, r1
   331a4:	46a8      	mov	r8, r5
   331a6:	f04f 0b00 	mov.w	fp, #0
   331aa:	f8b9 c000 	ldrh.w	ip, [r9]
   331ae:	b29b      	uxth	r3, r3
   331b0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
   331b4:	fb0a 440c 	mla	r4, sl, ip, r4
   331b8:	46c4      	mov	ip, r8
   331ba:	445c      	add	r4, fp
   331bc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   331c0:	f84c 3b04 	str.w	r3, [ip], #4
   331c4:	f859 3b04 	ldr.w	r3, [r9], #4
   331c8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
   331cc:	0c1b      	lsrs	r3, r3, #16
   331ce:	454f      	cmp	r7, r9
   331d0:	fb0a b303 	mla	r3, sl, r3, fp
   331d4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
   331d8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   331dc:	d805      	bhi.n	331ea <__multiply+0x122>
   331de:	f8c8 3004 	str.w	r3, [r8, #4]
   331e2:	3504      	adds	r5, #4
   331e4:	e79b      	b.n	3311e <__multiply+0x56>
   331e6:	46d4      	mov	ip, sl
   331e8:	e7b3      	b.n	33152 <__multiply+0x8a>
   331ea:	46e0      	mov	r8, ip
   331ec:	e7dd      	b.n	331aa <__multiply+0xe2>
   331ee:	3e01      	subs	r6, #1
   331f0:	e799      	b.n	33126 <__multiply+0x5e>

000331f2 <__lshift>:
   331f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   331f6:	460c      	mov	r4, r1
   331f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   331fc:	4607      	mov	r7, r0
   331fe:	4616      	mov	r6, r2
   33200:	6923      	ldr	r3, [r4, #16]
   33202:	6849      	ldr	r1, [r1, #4]
   33204:	eb0a 0903 	add.w	r9, sl, r3
   33208:	68a3      	ldr	r3, [r4, #8]
   3320a:	f109 0501 	add.w	r5, r9, #1
   3320e:	42ab      	cmp	r3, r5
   33210:	db32      	blt.n	33278 <__lshift+0x86>
   33212:	4638      	mov	r0, r7
   33214:	f7ff fe79 	bl	32f0a <_Balloc>
   33218:	2300      	movs	r3, #0
   3321a:	4680      	mov	r8, r0
   3321c:	f100 0114 	add.w	r1, r0, #20
   33220:	461a      	mov	r2, r3
   33222:	4553      	cmp	r3, sl
   33224:	db2b      	blt.n	3327e <__lshift+0x8c>
   33226:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   3322a:	f104 0314 	add.w	r3, r4, #20
   3322e:	6920      	ldr	r0, [r4, #16]
   33230:	f016 021f 	ands.w	r2, r6, #31
   33234:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   33238:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   3323c:	d025      	beq.n	3328a <__lshift+0x98>
   3323e:	f1c2 0e20 	rsb	lr, r2, #32
   33242:	2000      	movs	r0, #0
   33244:	681e      	ldr	r6, [r3, #0]
   33246:	468a      	mov	sl, r1
   33248:	4096      	lsls	r6, r2
   3324a:	4330      	orrs	r0, r6
   3324c:	f84a 0b04 	str.w	r0, [sl], #4
   33250:	f853 0b04 	ldr.w	r0, [r3], #4
   33254:	459c      	cmp	ip, r3
   33256:	fa20 f00e 	lsr.w	r0, r0, lr
   3325a:	d814      	bhi.n	33286 <__lshift+0x94>
   3325c:	6048      	str	r0, [r1, #4]
   3325e:	b108      	cbz	r0, 33264 <__lshift+0x72>
   33260:	f109 0502 	add.w	r5, r9, #2
   33264:	3d01      	subs	r5, #1
   33266:	4638      	mov	r0, r7
   33268:	4621      	mov	r1, r4
   3326a:	f8c8 5010 	str.w	r5, [r8, #16]
   3326e:	f7ff fe80 	bl	32f72 <_Bfree>
   33272:	4640      	mov	r0, r8
   33274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   33278:	3101      	adds	r1, #1
   3327a:	005b      	lsls	r3, r3, #1
   3327c:	e7c7      	b.n	3320e <__lshift+0x1c>
   3327e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   33282:	3301      	adds	r3, #1
   33284:	e7cd      	b.n	33222 <__lshift+0x30>
   33286:	4651      	mov	r1, sl
   33288:	e7dc      	b.n	33244 <__lshift+0x52>
   3328a:	3904      	subs	r1, #4
   3328c:	f853 2b04 	ldr.w	r2, [r3], #4
   33290:	459c      	cmp	ip, r3
   33292:	f841 2f04 	str.w	r2, [r1, #4]!
   33296:	d8f9      	bhi.n	3328c <__lshift+0x9a>
   33298:	e7e4      	b.n	33264 <__lshift+0x72>

0003329a <__mcmp>:
   3329a:	6903      	ldr	r3, [r0, #16]
   3329c:	690a      	ldr	r2, [r1, #16]
   3329e:	1a9b      	subs	r3, r3, r2
   332a0:	b530      	push	{r4, r5, lr}
   332a2:	d10c      	bne.n	332be <__mcmp+0x24>
   332a4:	0092      	lsls	r2, r2, #2
   332a6:	3014      	adds	r0, #20
   332a8:	3114      	adds	r1, #20
   332aa:	1884      	adds	r4, r0, r2
   332ac:	4411      	add	r1, r2
   332ae:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   332b2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   332b6:	4295      	cmp	r5, r2
   332b8:	d003      	beq.n	332c2 <__mcmp+0x28>
   332ba:	d305      	bcc.n	332c8 <__mcmp+0x2e>
   332bc:	2301      	movs	r3, #1
   332be:	4618      	mov	r0, r3
   332c0:	bd30      	pop	{r4, r5, pc}
   332c2:	42a0      	cmp	r0, r4
   332c4:	d3f3      	bcc.n	332ae <__mcmp+0x14>
   332c6:	e7fa      	b.n	332be <__mcmp+0x24>
   332c8:	f04f 33ff 	mov.w	r3, #4294967295
   332cc:	e7f7      	b.n	332be <__mcmp+0x24>

000332ce <__mdiff>:
   332ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   332d2:	460d      	mov	r5, r1
   332d4:	4607      	mov	r7, r0
   332d6:	4611      	mov	r1, r2
   332d8:	4614      	mov	r4, r2
   332da:	4628      	mov	r0, r5
   332dc:	f7ff ffdd 	bl	3329a <__mcmp>
   332e0:	1e06      	subs	r6, r0, #0
   332e2:	d108      	bne.n	332f6 <__mdiff+0x28>
   332e4:	4631      	mov	r1, r6
   332e6:	4638      	mov	r0, r7
   332e8:	f7ff fe0f 	bl	32f0a <_Balloc>
   332ec:	2301      	movs	r3, #1
   332ee:	e9c0 3604 	strd	r3, r6, [r0, #16]
   332f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   332f6:	bfa3      	ittte	ge
   332f8:	4623      	movge	r3, r4
   332fa:	462c      	movge	r4, r5
   332fc:	2600      	movge	r6, #0
   332fe:	2601      	movlt	r6, #1
   33300:	bfa8      	it	ge
   33302:	461d      	movge	r5, r3
   33304:	6861      	ldr	r1, [r4, #4]
   33306:	4638      	mov	r0, r7
   33308:	f7ff fdff 	bl	32f0a <_Balloc>
   3330c:	f105 0914 	add.w	r9, r5, #20
   33310:	60c6      	str	r6, [r0, #12]
   33312:	f104 0214 	add.w	r2, r4, #20
   33316:	6926      	ldr	r6, [r4, #16]
   33318:	f100 0114 	add.w	r1, r0, #20
   3331c:	692b      	ldr	r3, [r5, #16]
   3331e:	f04f 0e00 	mov.w	lr, #0
   33322:	eb02 0786 	add.w	r7, r2, r6, lsl #2
   33326:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   3332a:	f852 ab04 	ldr.w	sl, [r2], #4
   3332e:	f859 5b04 	ldr.w	r5, [r9], #4
   33332:	fa1f f38a 	uxth.w	r3, sl
   33336:	4694      	mov	ip, r2
   33338:	b2ac      	uxth	r4, r5
   3333a:	45c8      	cmp	r8, r9
   3333c:	4473      	add	r3, lr
   3333e:	eba3 0304 	sub.w	r3, r3, r4
   33342:	ea4f 4415 	mov.w	r4, r5, lsr #16
   33346:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
   3334a:	eb04 4423 	add.w	r4, r4, r3, asr #16
   3334e:	b29b      	uxth	r3, r3
   33350:	ea4f 4e24 	mov.w	lr, r4, asr #16
   33354:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   33358:	f841 4b04 	str.w	r4, [r1], #4
   3335c:	d8e5      	bhi.n	3332a <__mdiff+0x5c>
   3335e:	45bc      	cmp	ip, r7
   33360:	d304      	bcc.n	3336c <__mdiff+0x9e>
   33362:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   33366:	b183      	cbz	r3, 3338a <__mdiff+0xbc>
   33368:	6106      	str	r6, [r0, #16]
   3336a:	e7c2      	b.n	332f2 <__mdiff+0x24>
   3336c:	f85c 4b04 	ldr.w	r4, [ip], #4
   33370:	b2a2      	uxth	r2, r4
   33372:	4472      	add	r2, lr
   33374:	1413      	asrs	r3, r2, #16
   33376:	b292      	uxth	r2, r2
   33378:	eb03 4314 	add.w	r3, r3, r4, lsr #16
   3337c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   33380:	ea4f 4e23 	mov.w	lr, r3, asr #16
   33384:	f841 2b04 	str.w	r2, [r1], #4
   33388:	e7e9      	b.n	3335e <__mdiff+0x90>
   3338a:	3e01      	subs	r6, #1
   3338c:	e7e9      	b.n	33362 <__mdiff+0x94>

0003338e <__d2b>:
   3338e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   33392:	ec59 8b10 	vmov	r8, r9, d0
   33396:	f3c9 540a 	ubfx	r4, r9, #20, #11
   3339a:	460e      	mov	r6, r1
   3339c:	2101      	movs	r1, #1
   3339e:	4615      	mov	r5, r2
   333a0:	f7ff fdb3 	bl	32f0a <_Balloc>
   333a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
   333a8:	4607      	mov	r7, r0
   333aa:	bb34      	cbnz	r4, 333fa <__d2b+0x6c>
   333ac:	9301      	str	r3, [sp, #4]
   333ae:	f1b8 0300 	subs.w	r3, r8, #0
   333b2:	d027      	beq.n	33404 <__d2b+0x76>
   333b4:	a802      	add	r0, sp, #8
   333b6:	f840 3d08 	str.w	r3, [r0, #-8]!
   333ba:	f7ff fe4d 	bl	33058 <__lo0bits>
   333be:	9900      	ldr	r1, [sp, #0]
   333c0:	b1f0      	cbz	r0, 33400 <__d2b+0x72>
   333c2:	9a01      	ldr	r2, [sp, #4]
   333c4:	f1c0 0320 	rsb	r3, r0, #32
   333c8:	fa02 f303 	lsl.w	r3, r2, r3
   333cc:	40c2      	lsrs	r2, r0
   333ce:	430b      	orrs	r3, r1
   333d0:	9201      	str	r2, [sp, #4]
   333d2:	617b      	str	r3, [r7, #20]
   333d4:	9b01      	ldr	r3, [sp, #4]
   333d6:	2b00      	cmp	r3, #0
   333d8:	61bb      	str	r3, [r7, #24]
   333da:	bf14      	ite	ne
   333dc:	2102      	movne	r1, #2
   333de:	2101      	moveq	r1, #1
   333e0:	6139      	str	r1, [r7, #16]
   333e2:	b1c4      	cbz	r4, 33416 <__d2b+0x88>
   333e4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   333e8:	4404      	add	r4, r0
   333ea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   333ee:	6034      	str	r4, [r6, #0]
   333f0:	6028      	str	r0, [r5, #0]
   333f2:	4638      	mov	r0, r7
   333f4:	b003      	add	sp, #12
   333f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   333fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   333fe:	e7d5      	b.n	333ac <__d2b+0x1e>
   33400:	6179      	str	r1, [r7, #20]
   33402:	e7e7      	b.n	333d4 <__d2b+0x46>
   33404:	a801      	add	r0, sp, #4
   33406:	f7ff fe27 	bl	33058 <__lo0bits>
   3340a:	9b01      	ldr	r3, [sp, #4]
   3340c:	2101      	movs	r1, #1
   3340e:	3020      	adds	r0, #32
   33410:	617b      	str	r3, [r7, #20]
   33412:	6139      	str	r1, [r7, #16]
   33414:	e7e5      	b.n	333e2 <__d2b+0x54>
   33416:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   3341a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   3341e:	6030      	str	r0, [r6, #0]
   33420:	6918      	ldr	r0, [r3, #16]
   33422:	f7ff fdfa 	bl	3301a <__hi0bits>
   33426:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   3342a:	e7e1      	b.n	333f0 <__d2b+0x62>

0003342c <_calloc_r>:
   3342c:	b538      	push	{r3, r4, r5, lr}
   3342e:	fb02 f401 	mul.w	r4, r2, r1
   33432:	4621      	mov	r1, r4
   33434:	f7fd fd4a 	bl	30ecc <_malloc_r>
   33438:	4605      	mov	r5, r0
   3343a:	b118      	cbz	r0, 33444 <_calloc_r+0x18>
   3343c:	4622      	mov	r2, r4
   3343e:	2100      	movs	r1, #0
   33440:	f7ff fa5c 	bl	328fc <memset>
   33444:	4628      	mov	r0, r5
   33446:	bd38      	pop	{r3, r4, r5, pc}

00033448 <_realloc_r>:
   33448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3344a:	4607      	mov	r7, r0
   3344c:	4614      	mov	r4, r2
   3344e:	460e      	mov	r6, r1
   33450:	b921      	cbnz	r1, 3345c <_realloc_r+0x14>
   33452:	4611      	mov	r1, r2
   33454:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   33458:	f7fd bd38 	b.w	30ecc <_malloc_r>
   3345c:	b922      	cbnz	r2, 33468 <_realloc_r+0x20>
   3345e:	4625      	mov	r5, r4
   33460:	f7fd fce6 	bl	30e30 <_free_r>
   33464:	4628      	mov	r0, r5
   33466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33468:	f000 f8dd 	bl	33626 <_malloc_usable_size_r>
   3346c:	42a0      	cmp	r0, r4
   3346e:	d20f      	bcs.n	33490 <_realloc_r+0x48>
   33470:	4621      	mov	r1, r4
   33472:	4638      	mov	r0, r7
   33474:	f7fd fd2a 	bl	30ecc <_malloc_r>
   33478:	4605      	mov	r5, r0
   3347a:	2800      	cmp	r0, #0
   3347c:	d0f2      	beq.n	33464 <_realloc_r+0x1c>
   3347e:	4631      	mov	r1, r6
   33480:	4622      	mov	r2, r4
   33482:	f7ff fa30 	bl	328e6 <memcpy>
   33486:	4631      	mov	r1, r6
   33488:	4638      	mov	r0, r7
   3348a:	f7fd fcd1 	bl	30e30 <_free_r>
   3348e:	e7e9      	b.n	33464 <_realloc_r+0x1c>
   33490:	4635      	mov	r5, r6
   33492:	e7e7      	b.n	33464 <_realloc_r+0x1c>

00033494 <__ssputs_r>:
   33494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   33498:	688e      	ldr	r6, [r1, #8]
   3349a:	4682      	mov	sl, r0
   3349c:	460c      	mov	r4, r1
   3349e:	4690      	mov	r8, r2
   334a0:	429e      	cmp	r6, r3
   334a2:	4699      	mov	r9, r3
   334a4:	d837      	bhi.n	33516 <__ssputs_r+0x82>
   334a6:	898a      	ldrh	r2, [r1, #12]
   334a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
   334ac:	d031      	beq.n	33512 <__ssputs_r+0x7e>
   334ae:	6825      	ldr	r5, [r4, #0]
   334b0:	2302      	movs	r3, #2
   334b2:	6909      	ldr	r1, [r1, #16]
   334b4:	1a6f      	subs	r7, r5, r1
   334b6:	6965      	ldr	r5, [r4, #20]
   334b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   334bc:	fb95 f5f3 	sdiv	r5, r5, r3
   334c0:	f109 0301 	add.w	r3, r9, #1
   334c4:	443b      	add	r3, r7
   334c6:	429d      	cmp	r5, r3
   334c8:	bf38      	it	cc
   334ca:	461d      	movcc	r5, r3
   334cc:	0553      	lsls	r3, r2, #21
   334ce:	d530      	bpl.n	33532 <__ssputs_r+0x9e>
   334d0:	4629      	mov	r1, r5
   334d2:	f7fd fcfb 	bl	30ecc <_malloc_r>
   334d6:	4606      	mov	r6, r0
   334d8:	b950      	cbnz	r0, 334f0 <__ssputs_r+0x5c>
   334da:	230c      	movs	r3, #12
   334dc:	f04f 30ff 	mov.w	r0, #4294967295
   334e0:	f8ca 3000 	str.w	r3, [sl]
   334e4:	89a3      	ldrh	r3, [r4, #12]
   334e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   334ea:	81a3      	strh	r3, [r4, #12]
   334ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   334f0:	463a      	mov	r2, r7
   334f2:	6921      	ldr	r1, [r4, #16]
   334f4:	f7ff f9f7 	bl	328e6 <memcpy>
   334f8:	89a3      	ldrh	r3, [r4, #12]
   334fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   334fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   33502:	81a3      	strh	r3, [r4, #12]
   33504:	6126      	str	r6, [r4, #16]
   33506:	443e      	add	r6, r7
   33508:	6165      	str	r5, [r4, #20]
   3350a:	1bed      	subs	r5, r5, r7
   3350c:	6026      	str	r6, [r4, #0]
   3350e:	464e      	mov	r6, r9
   33510:	60a5      	str	r5, [r4, #8]
   33512:	454e      	cmp	r6, r9
   33514:	d900      	bls.n	33518 <__ssputs_r+0x84>
   33516:	464e      	mov	r6, r9
   33518:	4632      	mov	r2, r6
   3351a:	4641      	mov	r1, r8
   3351c:	6820      	ldr	r0, [r4, #0]
   3351e:	f7ff fcdb 	bl	32ed8 <memmove>
   33522:	68a3      	ldr	r3, [r4, #8]
   33524:	2000      	movs	r0, #0
   33526:	1b9b      	subs	r3, r3, r6
   33528:	60a3      	str	r3, [r4, #8]
   3352a:	6823      	ldr	r3, [r4, #0]
   3352c:	441e      	add	r6, r3
   3352e:	6026      	str	r6, [r4, #0]
   33530:	e7dc      	b.n	334ec <__ssputs_r+0x58>
   33532:	462a      	mov	r2, r5
   33534:	f7ff ff88 	bl	33448 <_realloc_r>
   33538:	4606      	mov	r6, r0
   3353a:	2800      	cmp	r0, #0
   3353c:	d1e2      	bne.n	33504 <__ssputs_r+0x70>
   3353e:	6921      	ldr	r1, [r4, #16]
   33540:	4650      	mov	r0, sl
   33542:	f7fd fc75 	bl	30e30 <_free_r>
   33546:	e7c8      	b.n	334da <__ssputs_r+0x46>

00033548 <_raise_r>:
   33548:	291f      	cmp	r1, #31
   3354a:	b538      	push	{r3, r4, r5, lr}
   3354c:	4604      	mov	r4, r0
   3354e:	460d      	mov	r5, r1
   33550:	d904      	bls.n	3355c <_raise_r+0x14>
   33552:	2316      	movs	r3, #22
   33554:	6003      	str	r3, [r0, #0]
   33556:	f04f 30ff 	mov.w	r0, #4294967295
   3355a:	bd38      	pop	{r3, r4, r5, pc}
   3355c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   3355e:	b112      	cbz	r2, 33566 <_raise_r+0x1e>
   33560:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   33564:	b94b      	cbnz	r3, 3357a <_raise_r+0x32>
   33566:	4620      	mov	r0, r4
   33568:	f000 f816 	bl	33598 <_getpid_r>
   3356c:	462a      	mov	r2, r5
   3356e:	4601      	mov	r1, r0
   33570:	4620      	mov	r0, r4
   33572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   33576:	f7fd be13 	b.w	311a0 <_kill_r>
   3357a:	2b01      	cmp	r3, #1
   3357c:	d00a      	beq.n	33594 <_raise_r+0x4c>
   3357e:	1c59      	adds	r1, r3, #1
   33580:	d103      	bne.n	3358a <_raise_r+0x42>
   33582:	2316      	movs	r3, #22
   33584:	6003      	str	r3, [r0, #0]
   33586:	2001      	movs	r0, #1
   33588:	e7e7      	b.n	3355a <_raise_r+0x12>
   3358a:	2400      	movs	r4, #0
   3358c:	4628      	mov	r0, r5
   3358e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   33592:	4798      	blx	r3
   33594:	2000      	movs	r0, #0
   33596:	e7e0      	b.n	3355a <_raise_r+0x12>

00033598 <_getpid_r>:
   33598:	f7fe ba80 	b.w	31a9c <_getpid>

0003359c <__sread>:
   3359c:	b510      	push	{r4, lr}
   3359e:	460c      	mov	r4, r1
   335a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   335a4:	f7fd fe64 	bl	31270 <_read_r>
   335a8:	2800      	cmp	r0, #0
   335aa:	bfab      	itete	ge
   335ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   335ae:	89a3      	ldrhlt	r3, [r4, #12]
   335b0:	181b      	addge	r3, r3, r0
   335b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   335b6:	bfac      	ite	ge
   335b8:	6563      	strge	r3, [r4, #84]	; 0x54
   335ba:	81a3      	strhlt	r3, [r4, #12]
   335bc:	bd10      	pop	{r4, pc}

000335be <__swrite>:
   335be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   335c2:	461f      	mov	r7, r3
   335c4:	898b      	ldrh	r3, [r1, #12]
   335c6:	4605      	mov	r5, r0
   335c8:	460c      	mov	r4, r1
   335ca:	05db      	lsls	r3, r3, #23
   335cc:	4616      	mov	r6, r2
   335ce:	d505      	bpl.n	335dc <__swrite+0x1e>
   335d0:	2302      	movs	r3, #2
   335d2:	2200      	movs	r2, #0
   335d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   335d8:	f7fd fe38 	bl	3124c <_lseek_r>
   335dc:	89a3      	ldrh	r3, [r4, #12]
   335de:	4632      	mov	r2, r6
   335e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   335e4:	4628      	mov	r0, r5
   335e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   335ea:	81a3      	strh	r3, [r4, #12]
   335ec:	463b      	mov	r3, r7
   335ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   335f2:	f7fd bde7 	b.w	311c4 <_write_r>

000335f6 <__sseek>:
   335f6:	b510      	push	{r4, lr}
   335f8:	460c      	mov	r4, r1
   335fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   335fe:	f7fd fe25 	bl	3124c <_lseek_r>
   33602:	1c43      	adds	r3, r0, #1
   33604:	89a3      	ldrh	r3, [r4, #12]
   33606:	bf15      	itete	ne
   33608:	6560      	strne	r0, [r4, #84]	; 0x54
   3360a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   3360e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   33612:	81a3      	strheq	r3, [r4, #12]
   33614:	bf18      	it	ne
   33616:	81a3      	strhne	r3, [r4, #12]
   33618:	bd10      	pop	{r4, pc}

0003361a <__sclose>:
   3361a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3361e:	f7fd bde3 	b.w	311e8 <_close_r>

00033622 <__malloc_lock>:
   33622:	4770      	bx	lr

00033624 <__malloc_unlock>:
   33624:	4770      	bx	lr

00033626 <_malloc_usable_size_r>:
   33626:	f851 3c04 	ldr.w	r3, [r1, #-4]
   3362a:	1f18      	subs	r0, r3, #4
   3362c:	2b00      	cmp	r3, #0
   3362e:	bfbc      	itt	lt
   33630:	580b      	ldrlt	r3, [r1, r0]
   33632:	18c0      	addlt	r0, r0, r3
   33634:	4770      	bx	lr
